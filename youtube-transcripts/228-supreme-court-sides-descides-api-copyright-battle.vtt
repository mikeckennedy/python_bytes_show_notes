WEBVTT

00:00:00.000 --> 00:00:05.000
- Everyone out there in the live stream.


00:00:05.000 --> 00:00:06.640
Hey Brian, hey Guy.


00:00:06.640 --> 00:00:08.400
- Hey, howdy howdy.


00:00:08.400 --> 00:00:09.840
- Great to have you here.


00:00:09.840 --> 00:00:11.240
Looks like some folks are already here.


00:00:11.240 --> 00:00:14.040
And Dean, this time we're back on the right schedule for you.


00:00:14.040 --> 00:00:15.720
I'd love for the help with the introduction.


00:00:15.720 --> 00:00:17.920
Let's see if I can pull that off.


00:00:17.920 --> 00:00:20.520
Hello and welcome to Python Bytes


00:00:20.520 --> 00:00:22.280
where we deliver Python news and headlines


00:00:22.280 --> 00:00:23.840
directly to your earbuds.


00:00:23.840 --> 00:00:28.600
This is episode 228, recorded April 7th, 2021.


00:00:28.600 --> 00:00:29.760
I'm Michael Kennedy.


00:00:29.760 --> 00:00:36.400
I'm Brian Okken. And I'm Guy Royce. Hey, Guy. Welcome. Special guest Guy Royce here to be part


00:00:36.400 --> 00:00:40.800
of the show this week. Thanks for having me. That's exciting. I know that's what they all say,


00:00:40.800 --> 00:00:47.760
right? It's great to have you here, though. You know, we met on a panel at the Python Web


00:00:47.760 --> 00:00:53.840
Conference, and we recently had Calvin Hendryx-Parker here from who was organizing that as well.


00:00:53.840 --> 00:00:59.360
So, you know, a little bit of a little more Python Web Conference going on. Yeah, it was a good event.


00:00:59.360 --> 00:01:03.360
Absolutely. You want to tell folks a bit about yourself before we jump into the topics?


00:01:03.360 --> 00:01:09.360
Yeah, sure. You can see my name right here on the screen. But for those listening to the podcast, my name's Guy.


00:01:09.360 --> 00:01:13.360
Yes, it's my real name. I sometimes get asked if it's short for something.


00:01:13.360 --> 00:01:18.360
It's not, in fact, short for Guy Tholomew. It's actually just my name, Guy.


00:01:18.360 --> 00:01:21.360
I work for Redis Labs. I'm a developer advocate there.


00:01:21.360 --> 00:01:27.360
And I've been doing developer relations type of work for, you know, I've been paid to do it for about five years.


00:01:27.360 --> 00:01:33.920
five years, been doing it unpaid as an unpaid just fan of doing community things for about


00:01:33.920 --> 00:01:40.160
10 years on top of that. So a lot of different tech stacks. I'm not really a Python person by


00:01:40.160 --> 00:01:46.640
trade. I tend to spend more time in the vile, vile JavaScript space. But I know...


00:01:46.640 --> 00:01:53.760
>> The other very popular language these days. >> It is. But I know a lot of different things.


00:01:53.760 --> 00:01:56.800
I'm a bit of a generalist, so I do my part as well.


00:01:56.800 --> 00:01:59.200
- Fantastic. How do you enjoy being a developer evangelist?


00:01:59.200 --> 00:02:00.240
It seems like a really fun job.


00:02:00.240 --> 00:02:04.480
- It's, well, I like to joke that the best thing about being a developer


00:02:04.480 --> 00:02:06.880
advocate is that it lets me monetize my narcissism.


00:02:06.880 --> 00:02:15.760
But the reality of it is, I mean, it's actually a lot more work than you would think.


00:02:15.760 --> 00:02:18.160
It is fun, but there's a lot of challenge there.


00:02:18.160 --> 00:02:21.680
You know, I spend a lot of my time making content,


00:02:21.680 --> 00:02:27.280
advocating with the product group for the ways that we should change Redis and our clients and that kind of stuff.


00:02:27.280 --> 00:02:31.120
And also going out and speaking at events.


00:02:31.120 --> 00:02:33.120
This obviously has been a very weird year for that.


00:02:33.120 --> 00:02:35.120
Yeah, it has.


00:02:35.120 --> 00:02:38.400
But that's a lot to balance.


00:02:38.400 --> 00:02:40.640
It's actually kind of a lot of hats to wear.


00:02:40.640 --> 00:02:43.760
And there's a degree where being a generalist is very useful.


00:02:43.760 --> 00:02:47.120
Like today I'm spending a lot of time working on a .NET course.


00:02:47.120 --> 00:02:50.800
Helping someone out with that because I've got some .NET experience.


00:02:50.800 --> 00:02:54.060
But then I'm doing stuff in JavaScript and then,


00:02:54.060 --> 00:02:55.620
"Oh, let's look at graph databases."


00:02:55.620 --> 00:02:57.100
I'm just looking at different things.


00:02:57.100 --> 00:02:59.420
>> You got dragged into this Python podcast as well?


00:02:59.420 --> 00:03:00.860
>> Yeah. Then someone thinks I know


00:03:00.860 --> 00:03:02.540
Python and put me on this podcast.


00:03:02.540 --> 00:03:04.060
>> You got a couple of good items to talk about.


00:03:04.060 --> 00:03:05.780
I think they'll be good.


00:03:05.780 --> 00:03:11.320
Cool. Welcome. Brian, you want to kick us off here?


00:03:11.320 --> 00:03:17.020
>> Yeah, sure. I can't believe it's already March.


00:03:17.020 --> 00:03:19.340
>> Yeah. You're going to say almost March


00:03:19.340 --> 00:03:20.640
and it's actually blown out.


00:03:20.640 --> 00:03:21.480
- Yeah, yeah, yeah.


00:03:21.480 --> 00:03:22.680
(both laughing)


00:03:22.680 --> 00:03:25.420
So here's a article called


00:03:25.420 --> 00:03:30.420
How to Make Awesome Python Package in 2021.


00:03:30.420 --> 00:03:34.360
And this is, I really love this article


00:03:34.360 --> 00:03:36.760
because it's kind of my workflow.


00:03:36.760 --> 00:03:38.480
I've just never written it down.


00:03:38.480 --> 00:03:42.680
And so I'm really grateful for Anton for writing it down.


00:03:42.680 --> 00:03:47.240
Also grateful to John Mitchell on Twitter to post that


00:03:47.240 --> 00:03:48.240
so that I could see it.


00:03:48.240 --> 00:03:49.100
So it's great.


00:03:49.100 --> 00:03:50.020
I really love it.


00:03:50.020 --> 00:03:51.580
Anyway, so what is this?


00:03:51.580 --> 00:03:54.580
It isn't about how to make an awesome package.


00:03:54.580 --> 00:03:56.020
It's all of the extra stuff.


00:03:56.020 --> 00:03:57.260
It's the workflow.


00:03:57.260 --> 00:04:00.820
So he starts, and he starts just like at the basics,


00:04:00.820 --> 00:04:02.540
just stubbing a package.


00:04:02.540 --> 00:04:04.660
And I really, actually really like that


00:04:04.660 --> 00:04:06.320
this is where you start.


00:04:06.320 --> 00:04:09.520
So the start was in using,


00:04:09.520 --> 00:04:12.340
just grabbing a directory and stubbing it out,


00:04:12.340 --> 00:04:15.340
and then having a dunder init file


00:04:15.340 --> 00:04:20.340
in an initial file that just has one function you can call,


00:04:20.340 --> 00:04:22.060
just so that it's something there.


00:04:22.060 --> 00:04:26.300
And it actually throws a not implemented yet exception,


00:04:26.300 --> 00:04:29.020
which is, that's a great thing to throw, right?


00:04:29.020 --> 00:04:32.900
And then, pardon the birds.


00:04:32.900 --> 00:04:35.020
Anyway.


00:04:35.020 --> 00:04:38.340
>> Brian's recorded from Hawaii. He's in the forest, so it's fine.


00:04:38.340 --> 00:04:39.580
>> Yeah, he's got a virtual background


00:04:39.580 --> 00:04:41.820
to make it look more mundane.


00:04:41.820 --> 00:04:43.420
>> More tropical birds, yeah, yeah.


00:04:44.540 --> 00:04:47.940
So then using flit to package it up,


00:04:47.940 --> 00:04:51.820
and then go ahead and publish, not publish for real,


00:04:51.820 --> 00:04:55.360
publish to the test PyPI repository,


00:04:55.360 --> 00:04:57.180
which I love this workflow of,


00:04:57.180 --> 00:04:59.580
if you're gonna plan on sharing something,


00:04:59.580 --> 00:05:01.620
just go ahead and do this right away.


00:05:01.620 --> 00:05:04.180
The one thing missing there is,


00:05:04.180 --> 00:05:05.780
go ahead and check the real PyPI


00:05:05.780 --> 00:05:09.180
to make sure your project name isn't taken already,


00:05:09.180 --> 00:05:11.780
or else the test might work, but your real one won't.


00:05:11.780 --> 00:05:14.660
So adding that in is a good step.


00:05:14.660 --> 00:05:15.500
But then--


00:05:15.500 --> 00:05:17.380
- I'm blown away at some of the Python packages


00:05:17.380 --> 00:05:20.940
that are still available, like secure, right?


00:05:20.940 --> 00:05:21.940
I mean, that's not available now,


00:05:21.940 --> 00:05:25.980
but there was a thing that got to just call itself secure.


00:05:25.980 --> 00:05:26.820
Like a couple of years ago,


00:05:26.820 --> 00:05:28.520
like how is that still a thing, right?


00:05:28.520 --> 00:05:29.820
Oh my gosh. - Yeah.


00:05:29.820 --> 00:05:33.260
So one of the tricks with doing the test PyPI though


00:05:33.260 --> 00:05:38.260
is getting the PyPI RC correct.


00:05:38.260 --> 00:05:41.060
So it talks about how to do that.


00:05:41.060 --> 00:05:44.360
and then publishing using flip publish.


00:05:44.360 --> 00:05:47.480
And then, you know, adding more detail,


00:05:47.480 --> 00:05:50.340
like now you actually have to implement it.


00:05:50.340 --> 00:05:52.340
So an implementation of something


00:05:52.340 --> 00:05:55.040
and then push to the real repository.


00:05:55.040 --> 00:05:58.820
And then, you know, then everything else is like extras.


00:05:58.820 --> 00:06:01.360
Then he lists them as appendices almost,


00:06:01.360 --> 00:06:03.200
like adding a readme and a change log.


00:06:03.200 --> 00:06:08.080
And then, you know, linters and testing.


00:06:08.080 --> 00:06:10.240
You should maybe test earlier than this,


00:06:10.240 --> 00:06:14.280
but setting up talks and make files and cloud building


00:06:14.280 --> 00:06:15.680
and the whole gamut.


00:06:15.680 --> 00:06:18.920
So this is a really great comprehensive article.


00:06:18.920 --> 00:06:21.480
And you can, what I like is you can start at the beginning


00:06:21.480 --> 00:06:23.940
and if you're not even publishing publicly,


00:06:23.940 --> 00:06:25.640
if you're just publishing in-house,


00:06:25.640 --> 00:06:28.440
this still makes sense up to a certain point.


00:06:28.440 --> 00:06:29.920
So this is great.


00:06:29.920 --> 00:06:31.060
- Yeah, it looks like really good advice.


00:06:31.060 --> 00:06:34.020
I love having a well-structured projects where,


00:06:34.020 --> 00:06:37.160
if I have a problem or there's something I wanna do,


00:06:37.160 --> 00:06:38.000
I know right where to go.


00:06:38.000 --> 00:06:39.400
I don't need to go through all the coders.


00:06:39.400 --> 00:06:41.120
like here's the 50 lines of code


00:06:41.120 --> 00:06:42.680
that could possibly be about this.


00:06:42.680 --> 00:06:44.440
Let me go find it and get started.


00:06:44.440 --> 00:06:45.600
Guy, what do you think?


00:06:45.600 --> 00:06:49.960
- I like that it's an awesome Python package


00:06:49.960 --> 00:06:51.480
and it's not about the contents,


00:06:51.480 --> 00:06:54.080
it's about the stuff around it.


00:06:54.080 --> 00:06:56.580
Right, this is the kind of stuff that is just,


00:06:56.580 --> 00:06:58.660
noobs need this, right?


00:06:58.660 --> 00:06:59.500
- Yeah.


00:06:59.500 --> 00:07:02.080
- It's just, these are exactly the sorts of resources


00:07:02.080 --> 00:07:02.920
I like to find.


00:07:02.920 --> 00:07:06.320
It's the, here's the canonical way to do this thing well.


00:07:06.320 --> 00:07:08.480
- Right, a lot of times the tutorials are like,


00:07:08.480 --> 00:07:10.700
well create the one file and that's what you do.


00:07:10.700 --> 00:07:11.540
And then off you go.


00:07:11.540 --> 00:07:13.200
And I feel like that kind of leads people


00:07:13.200 --> 00:07:14.460
down the wrong path a lot of times.


00:07:14.460 --> 00:07:15.900
So yeah, love it.


00:07:15.900 --> 00:07:22.140
All right, well, I think I got the next one here, Brian.


00:07:22.140 --> 00:07:23.620
- Okay.


00:07:23.620 --> 00:07:27.780
- Kube Striker, as in Kubernetes.


00:07:27.780 --> 00:07:32.700
So this is a security tool for anyone who is running


00:07:32.700 --> 00:07:36.380
or being a tenant on a Kubernetes cluster.


00:07:36.380 --> 00:07:38.380
So it's really fast way to audit


00:07:38.380 --> 00:07:42.180
an existing Kubernetes clusters for best practices.


00:07:42.180 --> 00:07:44.660
And like all beautiful repositories,


00:07:44.660 --> 00:07:45.820
it has an animated GIF.


00:07:45.820 --> 00:07:46.860
So you don't have to read anything.


00:07:46.860 --> 00:07:47.860
You just watch it for a little like,


00:07:47.860 --> 00:07:48.680
oh, this is what it does.


00:07:48.680 --> 00:07:50.020
That's kind of cool.


00:07:50.020 --> 00:07:51.860
Maybe I'll use this.


00:07:51.860 --> 00:07:52.700
- Yes, we love that.


00:07:52.700 --> 00:07:53.700
- For those who are listening,


00:07:53.700 --> 00:07:55.580
there's an animated GIF on the screen right now.


00:07:55.580 --> 00:07:57.660
- That's right, absolutely.


00:07:57.660 --> 00:07:59.540
- You should totally see it, it's amazing.


00:07:59.540 --> 00:08:00.940
- Yeah, I mean, sometimes we cover,


00:08:00.940 --> 00:08:02.060
there'll be like UI frameworks.


00:08:02.060 --> 00:08:03.580
Like, oh, we built this whole UI framework


00:08:03.580 --> 00:08:05.500
where you do this thing and there's like no screenshot


00:08:05.500 --> 00:08:07.380
there are no way to see what it looks like.


00:08:07.380 --> 00:08:09.860
You're like, well, if it's about the UI,


00:08:09.860 --> 00:08:11.140
we should probably see some pictures.


00:08:11.140 --> 00:08:14.660
So Brian and I are always on a bit of a kick about this.


00:08:14.660 --> 00:08:18.060
Yeah, so it performs a bunch of in-depth analysis


00:08:18.060 --> 00:08:22.540
on self-hosted Kubernetes on Amazon EKS, Azure EKS,


00:08:22.540 --> 00:08:25.060
I suspect pretty much you name it, the EKS.


00:08:25.060 --> 00:08:25.940
It'll do it.


00:08:25.940 --> 00:08:27.780
Let's see if I can find where it talks


00:08:27.780 --> 00:08:29.460
about the things that it does.


00:08:29.460 --> 00:08:34.460
Yeah, so it scans your infrastructure, like I said,


00:08:34.460 --> 00:08:37.960
It checks for various services and open ports,


00:08:37.960 --> 00:08:40.200
tells you if they should or shouldn't be open.


00:08:40.200 --> 00:08:44.300
It looks for insecure things or read/write,


00:08:44.300 --> 00:08:46.000
or you can even set it up to be read-only


00:08:46.000 --> 00:08:48.700
and it can check, you know, give it like lower permissions


00:08:48.700 --> 00:08:50.600
and it'll still do that.


00:08:50.600 --> 00:08:54.600
It'll look for misconfigured IAM settings,


00:08:54.600 --> 00:08:57.300
identity from Azure, sorry, AWS,


00:08:57.300 --> 00:09:00.400
misconfigured containers, pod security policies,


00:09:00.400 --> 00:09:02.600
network policies, and extra privileges,


00:09:02.600 --> 00:09:04.000
all that kind of stuff.


00:09:04.000 --> 00:09:09.000
So running containers is pretty easy.


00:09:09.000 --> 00:09:11.840
Running containers in Kubernetes is pretty easy.


00:09:11.840 --> 00:09:14.960
Running a Kubernetes cluster is not easy.


00:09:14.960 --> 00:09:16.640
There's a lot going on if you're the one


00:09:16.640 --> 00:09:18.360
running the Kubernetes cluster.


00:09:18.360 --> 00:09:19.560
And so here's a really nice tool


00:09:19.560 --> 00:09:22.180
that you just point at your cluster and say,


00:09:22.180 --> 00:09:24.040
how am I doing?


00:09:24.040 --> 00:09:26.640
Right, give it a quick check to see if anything's wrong.


00:09:26.640 --> 00:09:30.680
Yeah.


00:09:31.880 --> 00:09:32.720
- Yeah, thanks.


00:09:32.720 --> 00:09:34.980
You guys, a guy, you do anything with Kubernetes


00:09:34.980 --> 00:09:36.480
or Docker, things like that?


00:09:36.480 --> 00:09:38.080
- I do basic developer things


00:09:38.080 --> 00:09:41.360
that developers tend to do with Docker.


00:09:41.360 --> 00:09:43.500
Containerization isn't necessarily my jam.


00:09:43.500 --> 00:09:47.000
I mean, you know, I certainly will spin up a Redis instance,


00:09:47.000 --> 00:09:49.120
for example, using Docker or something like that,


00:09:49.120 --> 00:09:50.460
because that's super convenient.


00:09:50.460 --> 00:09:54.140
But beyond using some basic Docker Compose,


00:09:54.140 --> 00:09:55.680
I don't do much of anything.


00:09:55.680 --> 00:09:56.920
- Yeah, same here.


00:09:56.920 --> 00:09:58.720
I feel like every time I start to work with it,


00:09:58.720 --> 00:09:59.620
I go, this is really neat,


00:09:59.620 --> 00:10:02.300
but it feels like I'm just moving code complexity


00:10:02.300 --> 00:10:03.980
to DevOps complexity.


00:10:03.980 --> 00:10:05.420
I'm better at code than I'm at DevOps.


00:10:05.420 --> 00:10:06.380
So let me not do that.


00:10:06.380 --> 00:10:08.580
- You got to write it down somewhere, right?


00:10:08.580 --> 00:10:09.420
- Yeah.


00:10:09.420 --> 00:10:10.240
(laughing)


00:10:10.240 --> 00:10:11.080
- At the end of the day.


00:10:11.080 --> 00:10:13.020
- Exactly, exactly.


00:10:13.020 --> 00:10:15.020
All right, so Guy, you got this next one here.


00:10:15.020 --> 00:10:16.940
This is something I'm pretty excited about.


00:10:16.940 --> 00:10:21.940
I'm a big fan of the possibility of WebAssembly.


00:10:21.940 --> 00:10:23.140
Sounds like you are as well.


00:10:23.140 --> 00:10:25.900
- Yeah, I'm an enormous fan of WebAssembly.


00:10:25.900 --> 00:10:27.460
And I mean, there's a couple of reasons for that.


00:10:27.460 --> 00:10:29.220
Some of it's that it kind of reminds me


00:10:29.220 --> 00:10:31.700
of the early days, like in the 80s


00:10:31.700 --> 00:10:33.100
when I was learning programming,


00:10:33.100 --> 00:10:35.620
I got into 6502 assembly language.


00:10:35.620 --> 00:10:39.820
So that low level machine level coding


00:10:39.820 --> 00:10:43.780
has got a nostalgic joy to it.


00:10:43.780 --> 00:10:45.620
And so WebAssembly has drawn me in.


00:10:45.620 --> 00:10:48.940
If you don't know much about WebAssembly,


00:10:48.940 --> 00:10:50.260
just to put context around it,


00:10:50.260 --> 00:10:52.520
WebAssembly is byte code for the browser.


00:10:52.520 --> 00:10:53.740
That's where it started.


00:10:53.740 --> 00:10:55.240
The idea is you can take some code,


00:10:55.240 --> 00:10:58.540
write it in C or Rust or some higher level compiled language


00:10:58.540 --> 00:11:01.180
And then you get a bunch of byte code,


00:11:01.180 --> 00:11:02.640
a binary file that can be downloaded


00:11:02.640 --> 00:11:03.640
and run from the browser.


00:11:03.640 --> 00:11:06.240
So that's WebAssembly in 30 seconds.


00:11:06.240 --> 00:11:08.600
- Yeah, people have done really crazy stuff


00:11:08.600 --> 00:11:10.400
with things like asm.js,


00:11:10.400 --> 00:11:12.600
where they're like, oh, let's take some code


00:11:12.600 --> 00:11:14.640
and send it over to some fancy JavaScript


00:11:14.640 --> 00:11:16.280
that then we'll compile it in Java.


00:11:16.280 --> 00:11:18.280
And there's just all this wild stuff that you can do.


00:11:18.280 --> 00:11:20.240
And it's really, really impressive.


00:11:20.240 --> 00:11:22.760
But this is like, you know, if you're gonna do that,


00:11:22.760 --> 00:11:24.460
let's make this an actual thing


00:11:24.460 --> 00:11:27.600
that's actually expected to be this runtime,


00:11:27.600 --> 00:11:28.640
this low level runtime.


00:11:28.640 --> 00:11:29.960
Yeah, it's cool.


00:11:29.960 --> 00:11:31.320
- Well, and it turns out it's actually


00:11:31.320 --> 00:11:32.820
a lot more performant too.


00:11:32.820 --> 00:11:33.660
- Yeah.


00:11:33.660 --> 00:11:36.120
- I mean, I've seen benchmarks say as much as 20% faster


00:11:36.120 --> 00:11:37.560
all the way up to 20 times faster,


00:11:37.560 --> 00:11:40.000
but regardless, they always say faster.


00:11:40.000 --> 00:11:40.980
- Yeah.


00:11:40.980 --> 00:11:41.820
- Which is good.


00:11:41.820 --> 00:11:44.160
- And smaller probably, coming down as binary bits


00:11:44.160 --> 00:11:45.140
and probably loads faster,


00:11:45.140 --> 00:11:46.840
it doesn't have to jet it when it gets there.


00:11:46.840 --> 00:11:48.440
- Well, and it's just another file


00:11:48.440 --> 00:11:49.860
that can be served from the file server,


00:11:49.860 --> 00:11:51.280
so, or from the web server.


00:11:51.280 --> 00:11:52.880
So it can be cached and all the other things


00:11:52.880 --> 00:11:54.600
that you would do with any web content.


00:11:54.600 --> 00:11:58.680
So lots of advantages and optimizations to be had.


00:11:58.680 --> 00:12:00.800
- Right, so what's this thing that you're telling us about?


00:12:00.800 --> 00:12:03.640
- So WasmTime, it says,


00:12:03.640 --> 00:12:05.760
"Hey, we built this bytecode for the browser."


00:12:05.760 --> 00:12:08.960
WasmTime said, "You know, what if we put the bytecode


00:12:08.960 --> 00:12:10.120
"wherever we want it?"


00:12:10.120 --> 00:12:14.560
And so in much the way that Node


00:12:14.560 --> 00:12:16.600
brought JavaScript to the server side,


00:12:16.600 --> 00:12:21.120
WasmTime brings WebAssembly to the server side


00:12:21.120 --> 00:12:23.240
by adding I/O capabilities


00:12:23.240 --> 00:12:26.780
and by adding a command line tool that can run it,


00:12:26.780 --> 00:12:30.880
by adding run times that you can load up in other languages.


00:12:30.880 --> 00:12:33.960
So WasmTime, it's simplest is,


00:12:33.960 --> 00:12:35.160
is you've got a WebAssembly module


00:12:35.160 --> 00:12:37.020
and you say, "WasmTime space" in that module


00:12:37.020 --> 00:12:39.160
on the command line, and it just runs it


00:12:39.160 --> 00:12:41.240
and does whatever it does.


00:12:41.240 --> 00:12:42.080
- Fantastic.


00:12:42.080 --> 00:12:44.160
And there's different languages supported, right?


00:12:44.160 --> 00:12:45.000
- Right.


00:12:45.000 --> 00:12:46.480
So, and this isn't language support


00:12:46.480 --> 00:12:49.220
from a take that language and compile it to WebAssembly.


00:12:49.220 --> 00:12:51.000
This is take WebAssembly modules


00:12:51.000 --> 00:12:52.960
and run it in those environments.


00:12:52.960 --> 00:12:55.860
So in Rust, Python, Go, .NET, and in C,


00:12:55.860 --> 00:12:58.140
although it's not listed here on the screen,


00:12:58.140 --> 00:13:00.200
there are runtimes that you can load up,


00:13:00.200 --> 00:13:04.680
load a WebAssembly module from whatever,


00:13:04.680 --> 00:13:07.320
read it from the file system, read it out of whatever,


00:13:07.320 --> 00:13:11.120
and instantiate that WebAssembly module and run it.


00:13:11.120 --> 00:13:12.280
And so--


00:13:12.280 --> 00:13:14.120
- Yeah, so if I found like a cool library,


00:13:14.120 --> 00:13:16.080
it happened to be written in Rust,


00:13:16.080 --> 00:13:17.840
and it has a WebAssembly version,


00:13:17.840 --> 00:13:19.720
I could then use that in Python.


00:13:19.720 --> 00:13:20.560
- Absolutely.


00:13:21.980 --> 00:13:25.460
I've actually done a WebAssembly text format,


00:13:25.460 --> 00:13:28.100
which is the assembly language to go with WebAssembly.


00:13:28.100 --> 00:13:30.460
I've used that to compile simple modules


00:13:30.460 --> 00:13:32.660
and just like add numbers and stuff like that.


00:13:32.660 --> 00:13:35.200
And then loaded that up from Python code


00:13:35.200 --> 00:13:37.400
that I actually even run it inside of Redis.


00:13:37.400 --> 00:13:42.380
But yeah, so now all of a sudden it brings that,


00:13:42.380 --> 00:13:46.420
those compiled chunks of code that are really just data.


00:13:46.420 --> 00:13:47.840
You can hand them around any way you want


00:13:47.840 --> 00:13:51.160
and bring them into all these different platforms.


00:13:51.160 --> 00:13:52.660
That's pretty cool.


00:13:52.660 --> 00:13:53.640
- Yeah, this is really neat.


00:13:53.640 --> 00:13:55.460
Brian, what do you think?


00:13:55.460 --> 00:13:59.440
- Just the intermediate part to where you can have


00:13:59.440 --> 00:14:01.640
a group of people,


00:14:01.640 --> 00:14:03.980
even if it's not some third party package,


00:14:03.980 --> 00:14:06.420
it's just within one company that can write


00:14:06.420 --> 00:14:08.580
in whatever language they want to write in


00:14:08.580 --> 00:14:10.260
and then have an intermediate language


00:14:10.260 --> 00:14:15.260
that you can glue it all together down the pipeline.


00:14:15.260 --> 00:14:18.260
I think that just makes people more efficient.


00:14:18.260 --> 00:14:20.180
I'd like to see that sort of take off.


00:14:20.180 --> 00:14:22.540
I think it's a neat place to go.


00:14:22.540 --> 00:14:23.840
- Yeah, Guy, could I use this to say


00:14:23.840 --> 00:14:26.660
if I had like a .NET library, a Go library


00:14:26.660 --> 00:14:29.100
and a Rust library and I was writing in Python,


00:14:29.100 --> 00:14:30.260
could I bring those all together


00:14:30.260 --> 00:14:32.060
to interoperate with this thing?


00:14:32.060 --> 00:14:34.220
- In theory, I mean, there's a lot of work


00:14:34.220 --> 00:14:36.660
involved to do that.


00:14:36.660 --> 00:14:38.940
And there are limitations.


00:14:38.940 --> 00:14:40.340
Out of the box WebAssembly,


00:14:40.340 --> 00:14:42.500
just like out of the box JavaScript


00:14:42.500 --> 00:14:44.100
didn't have any kind of IO


00:14:44.100 --> 00:14:46.980
because you don't need IO in a browser.


00:14:46.980 --> 00:14:48.580
You have fetch, right?


00:14:48.580 --> 00:14:50.520
You know, that's all the IO you get.


00:14:50.520 --> 00:14:53.740
WebAssembly is the same way,


00:14:53.740 --> 00:14:58.340
but WasmTime supports the WASI standard.


00:14:58.340 --> 00:15:00.380
All these things start with W,


00:15:00.380 --> 00:15:02.100
they're actually kind of hard to say.


00:15:02.100 --> 00:15:03.340
(laughing)


00:15:03.340 --> 00:15:06.100
And WASI is the WebAssembly Systems Interface,


00:15:06.100 --> 00:15:08.040
which gives you a file IO


00:15:08.040 --> 00:15:11.580
and will eventually give us network IO.


00:15:11.580 --> 00:15:13.560
Right now it will support reading and writing of sockets,


00:15:13.560 --> 00:15:15.620
but it won't support opening a socket,


00:15:15.620 --> 00:15:17.780
which is tantatizingly frustrating.


00:15:17.780 --> 00:15:19.200
(both laughing)


00:15:19.200 --> 00:15:20.880
- That extra ability though,


00:15:20.880 --> 00:15:22.560
that actually kind of scares me a little bit.


00:15:22.560 --> 00:15:24.960
And I'm concerned about the security part,


00:15:24.960 --> 00:15:27.480
since you're grabbing some binary blob


00:15:27.480 --> 00:15:31.920
or it's a WebAssembly blob, it's still not human readable.


00:15:31.920 --> 00:15:34.880
So how do I know it's not going to be a virus


00:15:34.880 --> 00:15:36.320
or something like that?


00:15:36.320 --> 00:15:40.120
- Yeah, that's actually a totally legitimate concern.


00:15:40.120 --> 00:15:42.320
It's honestly echoes the same concerns


00:15:42.320 --> 00:15:45.960
that we had with Node.js when it first came out.


00:15:45.960 --> 00:15:48.140
It's like, 'cause in the browser,


00:15:48.140 --> 00:15:50.540
it's all nice and neat and sandboxed, right?


00:15:50.540 --> 00:15:52.940
And as soon as JavaScript escaped the browser


00:15:52.940 --> 00:15:54.660
and got onto your server side, everyone's like,


00:15:54.660 --> 00:15:55.980
well, but we can pull JavaScript code


00:15:55.980 --> 00:15:57.500
and call you Val on it from anywhere.


00:15:57.500 --> 00:15:59.100
It's like, well, yeah, you could.


00:15:59.100 --> 00:16:01.100
And so it's the same,


00:16:01.100 --> 00:16:02.860
I think we end up in the same situation


00:16:02.860 --> 00:16:06.000
where it's got the same caveats once we go there.


00:16:06.000 --> 00:16:11.260
I guess the advice is don't run strange code.


00:16:11.260 --> 00:16:13.940
- Right, yeah.


00:16:13.940 --> 00:16:16.460
But these are particularly like a JavaScript,


00:16:16.460 --> 00:16:19.580
you can look at it and say, I see what's going here.


00:16:19.580 --> 00:16:22.700
And I suppose if it's minified, that's not that easy,


00:16:22.700 --> 00:16:25.580
but with WebAssembly, it's actually just bytes.


00:16:25.580 --> 00:16:27.500
And it's even harder. It's even more opaque.


00:16:27.500 --> 00:16:28.820
- Yeah.


00:16:28.820 --> 00:16:30.460
- Yeah. I mean, there's so much stuff going on


00:16:30.460 --> 00:16:34.940
in the supply chain space now, right?


00:16:34.940 --> 00:16:39.940
PyPI, there was the PHP itself got a backdoor put into it,


00:16:41.220 --> 00:16:44.120
but luckily never got into any of the releases.


00:16:44.120 --> 00:16:46.200
But yeah, I mean, it's a good concern, Brian,


00:16:46.200 --> 00:16:47.720
or a valid, certainly valid concern.


00:16:47.720 --> 00:16:48.560
- It is.


00:16:48.560 --> 00:16:52.140
It's still cool.


00:16:52.140 --> 00:16:53.880
- Yeah, absolutely else.


00:16:53.880 --> 00:16:55.480
You know what else is cool, Brian?


00:16:55.480 --> 00:16:56.320
- What?


00:16:56.320 --> 00:16:58.200
- This episode is brought to you by you and me this time.


00:16:58.200 --> 00:16:59.520
So all the cool things we're doing,


00:16:59.520 --> 00:17:00.360
I wanna just tell people,


00:17:00.360 --> 00:17:02.000
if they wanna take some Python courses,


00:17:02.000 --> 00:17:05.600
they can check out talkpython.fm and just click on courses.


00:17:05.600 --> 00:17:06.800
And we've got a bunch of new ones


00:17:06.800 --> 00:17:10.400
and I'm about to release a brand new free course


00:17:10.400 --> 00:17:12.160
that people will be able to check out as well.


00:17:12.160 --> 00:17:13.840
Probably I'll be able to talk about that next time,


00:17:13.840 --> 00:17:15.080
but it's on the data science side


00:17:15.080 --> 00:17:16.680
and that'll be a lot of fun.


00:17:16.680 --> 00:17:18.640
And then people want to test things,


00:17:18.640 --> 00:17:20.320
they should probably test it with pytest


00:17:20.320 --> 00:17:22.720
so they can check out your book as well.


00:17:22.720 --> 00:17:24.560
- Yeah, yeah, that'd be great.


00:17:24.560 --> 00:17:25.380
I can't wait to get--


00:17:25.380 --> 00:17:26.480
- You guys are the best sponsors.


00:17:26.480 --> 00:17:27.600
(laughing)


00:17:27.600 --> 00:17:28.440
- Thanks.


00:17:28.440 --> 00:17:30.560
- Yeah, and I can't wait to get back to conferences


00:17:30.560 --> 00:17:32.880
so I can get back to handing out stickers and stuff.


00:17:32.880 --> 00:17:33.720
That was so fun.


00:17:33.720 --> 00:17:34.540
- That'd be great.


00:17:34.540 --> 00:17:35.380
- Yeah, I know.


00:17:35.380 --> 00:17:37.640
Imagine that with other people, so crazy.


00:17:37.640 --> 00:17:39.600
- Yeah, I hand them to myself,


00:17:39.600 --> 00:17:40.440
but you know.


00:17:40.440 --> 00:17:45.440
- I'm at risk of becoming agoraphobic at this point.


00:17:45.440 --> 00:17:46.280
- Yeah.


00:17:46.280 --> 00:17:50.120
- So I wanted to talk about something cool


00:17:50.120 --> 00:17:52.040
that Anthony Shaw put together.


00:17:52.040 --> 00:17:56.680
So he, I just saw about this.


00:17:56.680 --> 00:17:59.280
I think, don't you use Dependabot?


00:17:59.280 --> 00:18:01.080
- Oh yeah.


00:18:01.080 --> 00:18:05.200
My Monday morning means go in and like close 20 PRs


00:18:05.200 --> 00:18:08.880
and about four of them are conflicting with Dependabot


00:18:08.880 --> 00:18:10.680
where Dependabot was the other PR


00:18:10.680 --> 00:18:12.620
that also did the PR that I had conflict with.


00:18:12.620 --> 00:18:15.440
So yeah, I've got this special relationship


00:18:15.440 --> 00:18:17.400
but I'm still very glad to have it there


00:18:17.400 --> 00:18:18.600
'cause it's fantastic to know.


00:18:18.600 --> 00:18:21.400
There's a security problem for this thing, fix it now.


00:18:21.400 --> 00:18:22.840
That's really good to know.


00:18:22.840 --> 00:18:23.680
- Yeah, so, okay.


00:18:23.680 --> 00:18:25.760
So I probably am a bad one to introduce


00:18:25.760 --> 00:18:27.440
the Dependabot side.


00:18:27.440 --> 00:18:31.360
So this is, we're actually talking about Dependalotbot


00:18:31.360 --> 00:18:33.920
but Dependabot, if people haven't heard it


00:18:33.920 --> 00:18:35.920
like the 90 times we've talked about it.


00:18:38.360 --> 00:18:39.200
Tell me what it does.


00:18:39.200 --> 00:18:41.140
It goes out and checks to--


00:18:41.140 --> 00:18:43.540
- So it looks at, it supports different languages.


00:18:43.540 --> 00:18:45.280
The Python world, that means,


00:18:45.280 --> 00:18:48.920
if it sees a requirements.txt,


00:18:48.920 --> 00:18:52.100
or it sees like a pyproject.toml or whatever,


00:18:52.100 --> 00:18:53.960
it will look in there for pinned versions.


00:18:53.960 --> 00:18:56.320
If they're not pinned, it will pin it to the current version


00:18:56.320 --> 00:19:00.340
and then submit that change to the requirements.txt as a PR.


00:19:00.340 --> 00:19:01.180
- Yeah.


00:19:01.180 --> 00:19:03.040
- If they are there and it sees there's a new version


00:19:03.040 --> 00:19:05.160
of that library, it will do a PR,


00:19:05.160 --> 00:19:06.960
and in the PR, it'll say things like,


00:19:06.960 --> 00:19:11.520
here's the change log and all the commits since the last time you used this library.


00:19:11.520 --> 00:19:15.600
Here's the release notes around this library. Click this button to apply the new,


00:19:15.600 --> 00:19:22.240
you know, upgrade your pinning. So, you know, requests equal, equal, something higher than it is


00:19:22.240 --> 00:19:28.080
currently automatically to your system. So that's the job of Dependabot. The thing, the complaint is


00:19:28.080 --> 00:19:36.240
that if I've got a requirements.txt file with 30 packages in it, and 10 of them change, I get 10


00:19:36.240 --> 00:19:38.240
but I'm not sure that's the case.


00:19:38.240 --> 00:19:40.240
I think it's a little bit more complicated.


00:19:40.240 --> 00:19:42.240
I think it's more complicated to do that.


00:19:42.240 --> 00:19:44.240
But I think it's a little bit more complicated.


00:19:44.240 --> 00:19:46.240
But I think it's a little bit more complicated.


00:19:46.240 --> 00:19:48.240
And I think it's a little bit more complicated.


00:19:48.240 --> 00:19:50.240
And I think it's a little bit more complicated.


00:19:50.240 --> 00:19:52.240
And I think it's a little bit more complicated.


00:19:52.240 --> 00:19:54.240
And I think it's a little bit more complicated.


00:19:54.240 --> 00:19:56.240
And I think it's a little bit more complicated.


00:19:56.240 --> 00:19:58.240
And I think it's a little bit more complicated.


00:19:58.240 --> 00:20:00.240
And I think it's a little bit more complicated.


00:20:00.240 --> 00:20:02.240
And I think it's a little bit more complicated.


00:20:02.240 --> 00:20:04.240
And I think it's a little bit more complicated.


00:20:04.240 --> 00:20:10.000
dependencies can be automatically figured out and then like say talks so


00:20:10.000 --> 00:20:15.200
you're not you're using talks but you're not really using it you're using it to


00:20:15.200 --> 00:20:21.240
test and stuff you're not using it for everything so like that's an example and


00:20:21.240 --> 00:20:27.680
the depend a lot bot makes sure that the PR request from dependent bot if it


00:20:27.680 --> 00:20:33.760
passes the tests it goes ahead and merges it so that's really all it does


00:20:33.760 --> 00:20:39.240
And I think that's cool to just because that's what I would do if I got one of those PR requests


00:20:39.240 --> 00:20:41.040
I would make sure it all works fine


00:20:41.040 --> 00:20:46.240
And then probably in some of them I would probably just push through if I trust the where it comes from and stuff


00:20:46.240 --> 00:20:48.160
So yeah, exactly


00:20:48.160 --> 00:20:53.640
It's a well-known package. The chances are it's gonna be fine right like Bodo from AWS


00:20:53.640 --> 00:20:55.960
Sure, it's fine to take it


00:20:55.960 --> 00:20:56.480
Yeah


00:20:56.480 --> 00:21:02.860
And especially the tools around your project or you're you're only using a little part of something as long as your test pass


00:21:02.860 --> 00:21:04.220
it's probably going to be fine.


00:21:04.220 --> 00:21:06.520
Things like updating Django,


00:21:06.520 --> 00:21:09.940
you may want to have some more manual procedures for that.


00:21:09.940 --> 00:21:12.400
But something, some minor thing,


00:21:12.400 --> 00:21:16.060
like I'm only using a fraction of a package,


00:21:16.060 --> 00:21:18.820
go ahead and update it and see if the tests pass.


00:21:18.820 --> 00:21:20.160
- Yeah, exactly.


00:21:20.160 --> 00:21:21.400
I totally agree.


00:21:21.400 --> 00:21:24.520
Guy, if OneSpace has more dependencies than Python,


00:21:24.520 --> 00:21:25.740
it's got to be JavaScript.


00:21:25.740 --> 00:21:27.440
- (laughs) Ain't that the truth.


00:21:27.440 --> 00:21:29.400
Yeah.


00:21:29.400 --> 00:21:31.900
You know, my interaction would depend about


00:21:31.900 --> 00:21:37.900
The vast majority of my repos online are sample codes to go with talks and videos and that kind of stuff.


00:21:37.900 --> 00:21:43.900
And I always get to depend about notifications for, hey, this project that you did a year and a half ago that you forgot about.


00:21:43.900 --> 00:21:49.900
That tends to be my interaction with depend about, I can see how something like this would be very useful.


00:21:49.900 --> 00:21:54.900
I don't know that. I don't know, it might be something I could use to just.


00:21:54.900 --> 00:21:58.900
I have to think about those old packages anymore. It seems like this could be really helpful.


00:21:58.900 --> 00:21:59.740
- Yeah, exactly.


00:21:59.740 --> 00:22:00.560
- I do like that the guy's,


00:22:00.560 --> 00:22:01.600
the developer's name is Tony Bologna.


00:22:01.600 --> 00:22:03.600
That's a fantastic username, by the way.


00:22:03.600 --> 00:22:06.300
(laughing)


00:22:06.300 --> 00:22:07.500
- Yeah, he's been on the show.


00:22:07.500 --> 00:22:08.740
He's a great friend of the show.


00:22:08.740 --> 00:22:10.140
Yeah, it's a good name.


00:22:10.140 --> 00:22:10.980
- I've never met him.


00:22:10.980 --> 00:22:12.780
I just think that's really funny.


00:22:12.780 --> 00:22:13.620
Kudos.


00:22:13.620 --> 00:22:15.800
- Yeah, this is really cool.


00:22:15.800 --> 00:22:16.780
I wanna check this out.


00:22:16.780 --> 00:22:18.860
I'm definitely thinking I'm putting this on my watch.


00:22:18.860 --> 00:22:19.700
- I'll probably do it.


00:22:19.700 --> 00:22:22.620
Like, for example, things like talks and pytest


00:22:22.620 --> 00:22:25.840
and my testing tools and the linters and stuff like that.


00:22:25.840 --> 00:22:28.300
I definitely wanna just update those,


00:22:28.300 --> 00:22:30.900
like, and try.


00:22:30.900 --> 00:22:33.760
And if it doesn't, I'm always gonna update those


00:22:33.760 --> 00:22:37.380
if there's a new one and everything passes.


00:22:37.380 --> 00:22:40.000
- Yeah, just roll it back if it doesn't work.


00:22:40.000 --> 00:22:42.520
Yeah, and Tangentially Related Dean out there says,


00:22:42.520 --> 00:22:47.220
he can't seem to be able to pip install -e.bracket extra,


00:22:47.220 --> 00:22:50.280
but then he quickly posted his own little fix


00:22:50.280 --> 00:22:53.520
that, oh, in Zshell, you got to escape the brackets.


00:22:53.520 --> 00:22:56.080
So if anyone else there's trying to do that,


00:22:56.080 --> 00:22:56.920
that's great.


00:22:56.920 --> 00:23:00.120
Well done on this, Tony, Anthony.


00:23:00.120 --> 00:23:04.280
This is really, this could be a dream.


00:23:04.280 --> 00:23:05.840
If this works the way it is,


00:23:05.840 --> 00:23:08.160
you know, again, I will be so happy.


00:23:08.160 --> 00:23:09.320
My Mondays won't be like,


00:23:09.320 --> 00:23:11.120
well, here's the next hour merging PRs


00:23:11.120 --> 00:23:13.200
and resolving its own self-conflicts.


00:23:13.200 --> 00:23:15.080
So I'm excited.


00:23:15.080 --> 00:23:20.440
Very cool, all right, well, what is the next one?


00:23:20.440 --> 00:23:22.000
I wanna take us a little bit,


00:23:22.000 --> 00:23:24.120
like take a step back just a little bit


00:23:25.360 --> 00:23:30.300
From low-level tech and talk about the Supreme Court of the United States, right?


00:23:30.300 --> 00:23:39.900
I also want to take you back to the early 2000s. I mean, this is like early days in my programming career, honestly


00:23:39.900 --> 00:23:45.460
But here we are with a ruling about something that happened in the early 2000s. And what it is that


00:23:45.460 --> 00:23:50.340
Way way back Sun created Java


00:23:52.120 --> 00:23:56.260
Google would they create I actually whoever created Android I think before Google bought them


00:23:56.260 --> 00:24:03.280
Created Android and said, you know, what would be cool is if we could program with this with Java and use the API of


00:24:03.280 --> 00:24:08.820
Java so the common ways to like write files and open sockets all that kind of stuff


00:24:08.820 --> 00:24:14.600
Just make it exactly what the Java runtime libraries do


00:24:14.600 --> 00:24:19.860
But they did not actually take Java. They actually re-implemented it from scratch


00:24:19.860 --> 00:24:23.280
So none of the runtime details had anything to do with Java,


00:24:23.280 --> 00:24:25.700
but the API, the way you talk to it,


00:24:25.700 --> 00:24:30.160
looked just like the Java base class library, standard library.


00:24:30.160 --> 00:24:32.460
So Oracle buys Java.


00:24:32.460 --> 00:24:34.540
Oracle thinks, "That's not super cool.


00:24:34.540 --> 00:24:35.920
We want part of that action."


00:24:35.920 --> 00:24:39.080
Sues Google for copyright infringement


00:24:39.080 --> 00:24:40.960
by using the Java APIs.


00:24:40.960 --> 00:24:43.880
And so then this throws a huge uncertainty


00:24:43.880 --> 00:24:49.300
into the space of basically all these libraries, right?


00:24:49.300 --> 00:24:52.140
what if I want to create a new web framework


00:24:52.140 --> 00:24:54.420
and the way it works is a little bit like Flask,


00:24:54.420 --> 00:24:56.660
but it turns out that Flask copyrighted,


00:24:56.660 --> 00:25:01.760
the way it uses decorators, app.route or whatever.


00:25:01.760 --> 00:25:03.420
And then I get sued.


00:25:03.420 --> 00:25:06.260
That seems, I don't know, that seems weird, right?


00:25:06.260 --> 00:25:09.420
But basically-- - So does this mean that--


00:25:09.420 --> 00:25:10.560
- Yeah, go ahead, Guy.


00:25:10.560 --> 00:25:12.020
- So does this mean that,


00:25:12.020 --> 00:25:14.560
does the ruling mean that you can't copyright an interface


00:25:14.560 --> 00:25:15.400
in essence?


00:25:16.640 --> 00:25:19.920
Yes, well, the ruling is interesting


00:25:19.920 --> 00:25:22.520
because it didn't actually address the copyright


00:25:22.520 --> 00:25:24.520
ability of APIs.


00:25:24.520 --> 00:25:27.520
They said potentially they still could be copyrighted.


00:25:27.520 --> 00:25:31.360
But the use of the API, as I described it


00:25:31.360 --> 00:25:34.040
in the beginning of like, this is the way you talk to it,


00:25:34.040 --> 00:25:39.240
not the implementation, but the way you speak to the thing,


00:25:39.240 --> 00:25:41.880
they said that that is fair use.


00:25:41.880 --> 00:25:43.480
So when things are copyrighted, you're


00:25:43.480 --> 00:25:46.080
allowed to speak about them in limited ways.


00:25:46.080 --> 00:25:48.800
you're not allowed to take a movie and publish it,


00:25:48.800 --> 00:25:50.880
republish it, but you're allowed to take a scene of it


00:25:50.880 --> 00:25:53.400
and analyze it and maybe have that soundtrack,


00:25:53.400 --> 00:25:56.160
that 30 second soundtrack or something like that.


00:25:56.160 --> 00:25:57.160
Right, so that'd be fair use.


00:25:57.160 --> 00:26:00.760
And so they said the way in which they're using APIs


00:26:00.760 --> 00:26:01.800
is like fair use.


00:26:01.800 --> 00:26:04.120
And they talked about the knowledge,


00:26:04.120 --> 00:26:07.920
having a thing, you might copyright the thing,


00:26:07.920 --> 00:26:10.240
but having knowledge how to operate the thing


00:26:10.240 --> 00:26:12.400
that you can't copyright.


00:26:12.400 --> 00:26:14.080
So like knowing how to drive a car,


00:26:14.080 --> 00:26:15.420
you can't copyright that.


00:26:15.420 --> 00:26:29.420
And so having the API without the implementation is kind of like the knowledge of how to operate the thing that the API goes to, but the API itself is fair use, which is pretty interesting. So I guess this just sort of put the bow on it is


00:26:30.420 --> 00:26:35.420
the Supreme Court ruled that Oracle suit is dismissed.


00:26:35.420 --> 00:26:39.140
They cannot sue Google.


00:26:39.140 --> 00:26:42.700
And it stopped actually a huge wave of lawsuits


00:26:42.700 --> 00:26:44.080
that would have followed around all sorts


00:26:44.080 --> 00:26:46.240
of different things for all different sorts of people.


00:26:46.240 --> 00:26:50.780
So I think I'm happy with this.


00:26:50.780 --> 00:26:52.700
- I think I am too, actually.


00:26:52.700 --> 00:26:55.260
I mean, if I were to sum up everything I just heard,


00:26:55.260 --> 00:26:57.980
what I heard is reverse engineering is fair use.


00:26:59.300 --> 00:27:01.140
Yes, that sounds about right.


00:27:01.140 --> 00:27:01.980
So for example--


00:27:01.980 --> 00:27:04.940
- It feels like the Twitter version of this ruling.


00:27:04.940 --> 00:27:05.980
- Yeah.


00:27:05.980 --> 00:27:08.100
You know, the example that came to mind for me,


00:27:08.100 --> 00:27:09.440
and this is the thing,


00:27:09.440 --> 00:27:15.340
this exact example that was in the lawsuit,


00:27:15.340 --> 00:27:18.420
it seems really clear to me that it shouldn't really,


00:27:18.420 --> 00:27:19.460
I don't think that should be a thing.


00:27:19.460 --> 00:27:21.820
But on the other hand, you know,


00:27:21.820 --> 00:27:26.820
AWS was hosting, like reselling the open source free version


00:27:26.820 --> 00:27:28.780
of MongoDB as a service,


00:27:28.780 --> 00:27:32.780
without paying any money to the MongoDB folks who actually created and maintained it,


00:27:32.780 --> 00:27:36.780
they changed their license. And so what AWS did was


00:27:36.780 --> 00:27:40.780
kept the API for MongoDB identical,


00:27:40.780 --> 00:27:44.780
but re-implemented the database server in their own


00:27:44.780 --> 00:27:48.780
version. I feel like that's a real interesting example. That's a little more


00:27:48.780 --> 00:27:52.780
close to the edge. It's like, well, here's an open source project that built something neat.


00:27:52.780 --> 00:27:56.780
Here's somebody who was literally running it and taking profits off of it


00:27:56.780 --> 00:28:01.780
exactly, and then they sort of changed it to this mode


00:28:01.780 --> 00:28:03.400
and now it's okay.


00:28:03.400 --> 00:28:04.460
And I think it probably is okay,


00:28:04.460 --> 00:28:06.800
although I feel like Redis could get itself


00:28:06.800 --> 00:28:09.400
into the same situation probably,


00:28:09.400 --> 00:28:13.000
unless the license already explicitly says


00:28:13.000 --> 00:28:14.160
that you can't do that.


00:28:14.160 --> 00:28:19.440
- The only licenses we have that specifically explicit


00:28:19.440 --> 00:28:22.360
that are the ones for the modules, which extend it,


00:28:22.360 --> 00:28:23.520
extend Redis.


00:28:23.520 --> 00:28:25.580
Redis itself is open source.


00:28:25.580 --> 00:28:29.620
And so Amazon does have an implementation of Redis


00:28:29.620 --> 00:28:31.140
that they sell.


00:28:31.140 --> 00:28:32.700
- Okay, yeah.


00:28:32.700 --> 00:28:34.700
Tal out there in the live stream says,


00:28:34.700 --> 00:28:39.700
another example would be AWS could sue all the other places


00:28:39.700 --> 00:28:41.620
like Linode and DigitalOcean and stuff


00:28:41.620 --> 00:28:44.940
that offer S3 compatible storage.


00:28:44.940 --> 00:28:46.180
- That's such a good point.


00:28:46.180 --> 00:28:47.020
- Yeah, right?


00:28:47.020 --> 00:28:50.700
Like both Linode and DigitalOcean have something


00:28:50.700 --> 00:28:52.940
that's like S3,


00:28:52.940 --> 00:28:56.300
And you literally can talk to it with a Bodo3 API


00:28:56.300 --> 00:28:58.620
because it on the surface, it is S3.


00:28:58.620 --> 00:29:01.100
And so there's another example of something


00:29:01.100 --> 00:29:06.100
that is spared being destroyed in the courts.


00:29:06.100 --> 00:29:07.300
- I hope this holds up.


00:29:07.300 --> 00:29:09.260
I really want APIs to be something


00:29:09.260 --> 00:29:12.060
that you can't copyright.


00:29:12.060 --> 00:29:13.060
- I think this is it.


00:29:13.060 --> 00:29:14.020
I think this is it.


00:29:14.020 --> 00:29:17.620
I mean, it actually Google won


00:29:17.620 --> 00:29:20.900
and then it was overturned by a higher court


00:29:20.900 --> 00:29:21.740
and then Google won again.


00:29:21.740 --> 00:29:25.260
it's overturned by a higher court and it like literally worked its way all the way to the


00:29:25.260 --> 00:29:32.700
supreme court and then this is it and the supreme court operates so much on prior rulings and


00:29:32.700 --> 00:29:37.900
precedent and stuff that it's very unlikely that it could be changed at this point. The entire


00:29:37.900 --> 00:29:45.820
the entire like story of Java is just riddled with these gross lawsuits and it's just I just


00:29:45.820 --> 00:29:51.180
have to shake my head about it. It really would be nice if it had a nicer history. I think people


00:29:51.180 --> 00:29:58.060
would be, you know, trashing Java a lot less at this point. But yeah, we come up with other reasons,


00:29:58.060 --> 00:30:03.820
it wouldn't be a problem. Ben Thompson from Strategory had a really interesting analysis


00:30:03.820 --> 00:30:11.340
taking apart what the Supreme Court said. And one of the things they focused on was the meaning and


00:30:11.340 --> 00:30:16.300
the essence of copyrights. Like the reason to have copyrights is so that somebody might invest 10


00:30:16.300 --> 00:30:22.140
years in something that could easily be copied but doesn't yet exist and sort of drive innovation.


00:30:22.140 --> 00:30:28.220
And they talked a lot about, the Supreme Court talked about, does this application of copyright


00:30:28.220 --> 00:30:32.620
actually benefit or restrict innovation? And it was interesting that they were actually thinking


00:30:32.620 --> 00:30:35.820
in those terms, not just like, well, what is the legal definition of copyright? But they're like,


00:30:35.820 --> 00:30:41.660
this would be very harmful to so many people if it went the other way. And so we've got to consider


00:30:41.660 --> 00:30:42.500
to that as well.


00:30:42.500 --> 00:30:46.580
And let's see, Dean says,


00:30:46.580 --> 00:30:48.920
so Java lost this close case.


00:30:48.920 --> 00:30:51.400
I guess the case is now public static void.


00:30:51.400 --> 00:30:53.240
- It's final.


00:30:53.240 --> 00:30:54.080
Yeah.


00:30:54.080 --> 00:30:56.320
(laughing)


00:30:56.320 --> 00:30:59.240
- Exactly.


00:30:59.240 --> 00:31:00.080
Exactly.


00:31:00.080 --> 00:31:00.900
Cool. All right.


00:31:00.900 --> 00:31:02.440
- We're gonna have a Supreme Court factory.


00:31:02.440 --> 00:31:04.000
So, you know.


00:31:04.000 --> 00:31:04.840
- Yeah. Yeah.


00:31:04.840 --> 00:31:05.960
We've got an I Supreme Court


00:31:05.960 --> 00:31:08.000
and the Supreme Court factory generates


00:31:08.000 --> 00:31:10.080
I Supreme Court implementations.


00:31:10.080 --> 00:31:12.880
- You got a Supreme Court factory manager, yeah.


00:31:12.880 --> 00:31:14.400
- Oh my God.


00:31:14.400 --> 00:31:16.480
Yeah, that's a, no, I don't know.


00:31:16.480 --> 00:31:20.040
That's going a bit down, too far, too far down.


00:31:20.040 --> 00:31:22.120
- Yeah, it's a bridge too far, isn't it?


00:31:22.120 --> 00:31:24.520
- It definitely is, it definitely is.


00:31:24.520 --> 00:31:27.840
All right, Guy, you got the last one here


00:31:27.840 --> 00:31:28.920
and I'm not sure I pulled it up.


00:31:28.920 --> 00:31:31.640
Let me make sure I got it pulled up here.


00:31:31.640 --> 00:31:34.400
Yeah.


00:31:34.400 --> 00:31:37.680
Yeah, so you already talked about how you work for Redis


00:31:37.680 --> 00:31:41.340
and machine learning is absolutely front and center


00:31:41.340 --> 00:31:42.800
in the Python world.


00:31:42.800 --> 00:31:44.520
And you guys are doing some interesting stuff there.


00:31:44.520 --> 00:31:45.600
You wanna tell us about it?


00:31:45.600 --> 00:31:48.200
- Yeah, so I sort of mentioned this earlier,


00:31:48.200 --> 00:31:52.320
but it's kind of a good segue is Redis has modules,


00:31:52.320 --> 00:31:54.200
which are, you know, things you can use.


00:31:54.200 --> 00:31:55.840
They're like plugins to extend what Redis can do.


00:31:55.840 --> 00:31:58.040
So you can, there's like a module that's a graph database.


00:31:58.040 --> 00:32:00.040
And so now, boom, we got some new types


00:32:00.040 --> 00:32:01.380
and some new functionality.


00:32:01.380 --> 00:32:04.200
We can do graph databases or time series or whatever.


00:32:05.140 --> 00:32:08.240
And one of the modules that Redis Labs,


00:32:08.240 --> 00:32:10.400
and this is part of Redis, it's standard,


00:32:10.400 --> 00:32:12.640
anyone can create a module.


00:32:12.640 --> 00:32:14.960
There are lots of open source ones out there.


00:32:14.960 --> 00:32:16.900
Redis Labs has a few that we've created.


00:32:16.900 --> 00:32:18.940
One of those is Redis AI.


00:32:18.940 --> 00:32:23.000
And Redis AI turns Redis into a model server.


00:32:23.000 --> 00:32:27.660
So the idea is that I can take the binary output of a model


00:32:27.660 --> 00:32:31.900
in whether it's TensorFlow or whether it's PyTorch


00:32:31.900 --> 00:32:34.000
or whether it's an ONNX model.


00:32:34.000 --> 00:32:35.560
And for those who don't know what ONNX is,


00:32:35.560 --> 00:32:37.640
that's the Open Neural Network Exchange,


00:32:37.640 --> 00:32:41.440
which is a standard Microsoft put together for models.


00:32:41.440 --> 00:32:44.720
So it's sort of like a universal model standard.


00:32:44.720 --> 00:32:48.960
And just like in XKCD, it's like,


00:32:48.960 --> 00:32:49.800
there's too many standards,


00:32:49.800 --> 00:32:51.840
we need a new one to bring these all together.


00:32:51.840 --> 00:32:54.060
ONNX has created yet another standard.


00:32:54.060 --> 00:32:56.200
- Exactly.


00:32:56.200 --> 00:32:58.560
- This is what always happens, right?


00:32:58.560 --> 00:33:00.600
But Redis supports those three model types.


00:33:00.600 --> 00:33:02.280
So you can take an ONNX model, for example,


00:33:02.280 --> 00:33:03.480
and load it into Redis,


00:33:03.480 --> 00:33:07.520
and then you can use Redis commands to execute that model.


00:33:07.520 --> 00:33:11.400
It provides a nice little abstraction.


00:33:11.400 --> 00:33:13.120
The thing that's cool here, I think,


00:33:13.120 --> 00:33:15.920
is that normally if you want to


00:33:15.920 --> 00:33:18.320
bring AI into your application as a developer,


00:33:18.320 --> 00:33:19.520
you got the data science team,


00:33:19.520 --> 00:33:21.100
they do their thing,


00:33:21.100 --> 00:33:22.680
they build their models,


00:33:22.680 --> 00:33:24.960
and you get these binary files out,


00:33:24.960 --> 00:33:27.240
and then you need to bring them into your application some way.


00:33:27.240 --> 00:33:29.120
There's a few ways to do that.


00:33:29.120 --> 00:33:32.280
You can just wrap it up, you could containerize it,


00:33:32.280 --> 00:33:34.200
and make a little flask app around it,


00:33:34.200 --> 00:33:35.900
which is a really common solution.


00:33:35.900 --> 00:33:39.780
There are other model servers.


00:33:39.780 --> 00:33:41.260
You can just put it right in your application,


00:33:41.260 --> 00:33:43.180
but then you have to use Python,


00:33:43.180 --> 00:33:45.500
which is, well, not a terrible problem,


00:33:45.500 --> 00:33:47.140
could sometimes be a problem.


00:33:47.140 --> 00:33:49.380
- You're not using Python, you might see it as a,


00:33:49.380 --> 00:33:51.460
like, wait a minute, this is gonna be a big change.


00:33:51.460 --> 00:33:54.260
- And so the thing that gets me excited about Redis AI,


00:33:54.260 --> 00:33:56.500
which is kind of not the thing that gets my bosses excited,


00:33:56.500 --> 00:33:58.140
but it's the thing that gets me excited,


00:33:58.140 --> 00:34:00.940
is that because we support ONNX,


00:34:00.940 --> 00:34:02.740
the data science team can build their model


00:34:02.740 --> 00:34:03.660
and convert it to ONNX


00:34:03.660 --> 00:34:05.140
and they sort of have a universal standard.


00:34:05.140 --> 00:34:07.860
So they can pick whatever tech stack they want,


00:34:07.860 --> 00:34:09.800
as long as they can spell out an ONNX model.


00:34:09.800 --> 00:34:12.340
And then Redis, being Redis,


00:34:12.340 --> 00:34:14.500
it's got a client for every language under the sun.


00:34:14.500 --> 00:34:18.300
So if you're, you know, using Haskell, for example,


00:34:18.300 --> 00:34:19.980
you know, there's a Redis client for,


00:34:19.980 --> 00:34:21.700
I don't know that there's a Redis client for Haskell,


00:34:21.700 --> 00:34:23.420
but I would assume there is.


00:34:23.420 --> 00:34:24.880
It's odds are there is.


00:34:24.880 --> 00:34:28.860
Then you can get to that model


00:34:28.860 --> 00:34:30.220
from whatever language you're at,


00:34:30.220 --> 00:34:32.800
regardless of what that data science,


00:34:32.800 --> 00:34:36.420
how amenable to data science tooling that platform is.


00:34:36.420 --> 00:34:39.660
And so it creates a nice architectural layer of abstraction.


00:34:39.660 --> 00:34:41.360
And so that's actually what I think is kind of cool


00:34:41.360 --> 00:34:42.280
about Redis AI.


00:34:42.280 --> 00:34:46.940
It just provides that abstraction


00:34:46.940 --> 00:34:49.060
that makes the developers and the data science folks


00:34:49.060 --> 00:34:51.900
both not have to, well, speak the same language


00:34:51.900 --> 00:34:52.740
in a lot of ways.


00:34:52.740 --> 00:34:53.560
- Yeah, that's really neat.


00:34:53.560 --> 00:34:58.560
And it sounds to me a lot like what HTTP APIs did


00:34:58.560 --> 00:34:59.900
previously, right?


00:34:59.900 --> 00:35:01.580
if you wanted to talk to something


00:35:01.580 --> 00:35:04.580
instead of directly plugging in that library


00:35:04.580 --> 00:35:06.900
or exchanging some binary data,


00:35:06.900 --> 00:35:10.180
like, all right, everybody's gonna just agree on JSON.


00:35:10.180 --> 00:35:11.460
Why didn't they agree on dates?


00:35:11.460 --> 00:35:14.100
But come on, other than that, it's working out just fine.


00:35:14.100 --> 00:35:15.180
We're just gonna exchange this


00:35:15.180 --> 00:35:17.820
and that'll be the way we can talk to it.


00:35:17.820 --> 00:35:20.180
And nobody worries about what language


00:35:20.180 --> 00:35:21.660
you're using to consume the API.


00:35:21.660 --> 00:35:23.100
It's like, that's your problem.


00:35:23.100 --> 00:35:25.900
Hopefully your language has a nice way to do that.


00:35:25.900 --> 00:35:29.080
- Yeah, it's a similar thing.


00:35:29.080 --> 00:35:31.720
The other thing it does, which I think is kind of interesting,


00:35:31.720 --> 00:35:34.000
is that it introduces a new data type.


00:35:34.000 --> 00:35:36.920
So the models as inputs and outputs take tensors.


00:35:36.920 --> 00:35:38.460
So you can put in a couple of tensors


00:35:38.460 --> 00:35:40.760
as input to your model or one or however many you need.


00:35:40.760 --> 00:35:43.920
And then your output would be whatever tensors make sense.


00:35:43.920 --> 00:35:47.720
And a tensor is just--


00:35:47.720 --> 00:35:50.880
I don't know, I think the word tensor is--


00:35:50.880 --> 00:35:53.280
I'm going to say pretentious.


00:35:53.280 --> 00:35:56.640
I'm probably going to anger a lot of people by saying that.


00:35:56.640 --> 00:35:59.320
Because really what a tensor is in practical terms


00:35:59.320 --> 00:36:01.820
is just a multi-dimensional array.


00:36:01.820 --> 00:36:05.860
You got a tensor that's got a particular shape,


00:36:05.860 --> 00:36:07.000
it's just like, well, this is an array


00:36:07.000 --> 00:36:09.080
that's 10 by five by three.


00:36:09.080 --> 00:36:11.040
And it's made up of ints.


00:36:11.040 --> 00:36:13.080
And that's all a tensor is.


00:36:13.080 --> 00:36:15.060
And so it sounds all mystical,


00:36:15.060 --> 00:36:16.600
but it's really just a multi-dimensional array


00:36:16.600 --> 00:36:18.280
that's being handed in.


00:36:18.280 --> 00:36:20.920
But because tensors tend to be the things


00:36:20.920 --> 00:36:24.360
that are put into and taken out of machine learning models,


00:36:24.360 --> 00:36:26.240
Redis AI has a tensor data type.


00:36:26.240 --> 00:36:28.640
And so you could use that capability in Redis as well.


00:36:28.640 --> 00:36:31.160
If you needed to store multi-dimensional arrays in Redis,


00:36:31.160 --> 00:36:32.920
you've got a type that does that now.


00:36:32.920 --> 00:36:35.520
And so even if you didn't care about the data science,


00:36:35.520 --> 00:36:39.200
the predictive capabilities, the model hosting,


00:36:39.200 --> 00:36:41.200
that's the word I'm looking for in Redis AI,


00:36:41.200 --> 00:36:42.320
you could still use the tensors


00:36:42.320 --> 00:36:44.500
for various data storage uses.


00:36:44.500 --> 00:36:46.160
- Yeah. - So.


00:36:46.160 --> 00:36:47.000
- Yeah, okay, interesting.


00:36:47.000 --> 00:36:49.260
Yeah, so you can kind of hijack the data type as well.


00:36:49.260 --> 00:36:50.100
- Yeah.


00:36:50.100 --> 00:36:52.560
- Yeah, this looks really interesting.


00:36:52.560 --> 00:36:54.760
I think it's, yeah, people should check it out


00:36:54.760 --> 00:36:55.840
if they're doing machine learning.


00:36:55.840 --> 00:36:59.000
and sharing their models across different technologies


00:36:59.000 --> 00:37:00.640
or processes.


00:37:00.640 --> 00:37:03.120
- I use multi-dimensional. - Yeah, I'm obviously


00:37:03.120 --> 00:37:03.960
excited about it.


00:37:03.960 --> 00:37:05.680
(laughs)


00:37:05.680 --> 00:37:08.200
- I'm excited 'cause I use multi-dimensional arrays


00:37:08.200 --> 00:37:10.680
and now I can call myself a data scientist.


00:37:10.680 --> 00:37:12.120
- That's right, there you go.


00:37:12.120 --> 00:37:14.200
(laughs)


00:37:14.200 --> 00:37:16.880
- Awesome, all right, quick follow up


00:37:16.880 --> 00:37:19.960
before we get to the extras and the joke.


00:37:19.960 --> 00:37:22.360
- I'm more of a mad data scientist, yeah.


00:37:22.360 --> 00:37:25.440
- Yeah. (laughs)


00:37:25.440 --> 00:37:27.660
Student Army captain says, "Sorry I'm late.


00:37:27.660 --> 00:37:30.680
Doesn't depend about optionally auto merge if CI passes?"


00:37:30.680 --> 00:37:33.940
Yes, but you got to have CI running on that project.


00:37:33.940 --> 00:37:35.520
And so like, if you've got,


00:37:35.520 --> 00:37:40.520
like I have 30, 40 repositories that have courses.


00:37:40.520 --> 00:37:43.120
I don't set up CI for the course.


00:37:43.120 --> 00:37:45.640
Like what does it even mean to have CI for the courses?


00:37:45.640 --> 00:37:48.560
But I get dependent about stuff all the time on that


00:37:48.560 --> 00:37:50.680
because it's checking the repository


00:37:50.680 --> 00:37:52.160
for the requirements file.


00:37:52.160 --> 00:37:55.580
So sometimes you can get it to auto merge,


00:37:55.580 --> 00:37:58.460
but there's certainly circumstances where it doesn't.


00:37:58.460 --> 00:38:00.680
If it would just put it in one PR,


00:38:00.680 --> 00:38:01.780
here's the 10 changes.


00:38:01.780 --> 00:38:06.520
I put that actually as a issue on the Pinterbot itself


00:38:06.520 --> 00:38:07.520
and people upvoted it,


00:38:07.520 --> 00:38:09.520
commented like, "Yes, this please."


00:38:09.520 --> 00:38:10.860
But apparently not yet.


00:38:10.860 --> 00:38:13.800
Anyway, what Anthony's done is pretty excellent.


00:38:13.800 --> 00:38:16.840
Hi, Brian, that's it for all of our main items, right?


00:38:16.840 --> 00:38:18.480
Unless I lost track.


00:38:18.480 --> 00:38:19.960
- Yeah.


00:38:19.960 --> 00:38:22.140
Got any extras you wanna throw out there?


00:38:22.140 --> 00:38:24.700
- I don't, I've just been working a lot.


00:38:24.700 --> 00:38:25.620
How about you? - I got extras.


00:38:25.620 --> 00:38:27.260
I got plenty.


00:38:27.260 --> 00:38:31.180
So recently did a cool episode over on Talk Python


00:38:31.180 --> 00:38:34.380
about diving into the .git folder


00:38:34.380 --> 00:38:36.300
and like all the internals of what git does there


00:38:36.300 --> 00:38:37.280
and what all those pieces mean.


00:38:37.280 --> 00:38:38.980
If you wanna go in there and look and see how,


00:38:38.980 --> 00:38:40.740
basically understand how git itself works


00:38:40.740 --> 00:38:42.080
and then all the storage stuff,


00:38:42.080 --> 00:38:44.020
like how they all come together.


00:38:44.020 --> 00:38:46.060
And one of the things that got a nice shout out there


00:38:46.060 --> 00:38:48.940
is gitforwindows@gitforwindows.org.


00:38:48.940 --> 00:38:52.780
There's like a special version to install for Git.


00:38:52.780 --> 00:38:57.220
I think this actually might've come from Chris Moffett even,


00:38:57.220 --> 00:38:58.900
some sort of follow-on conversation or something,


00:38:58.900 --> 00:39:01.660
but wherever it came from, if you're doing Windows


00:39:01.660 --> 00:39:02.480
and you wanna install Git,


00:39:02.480 --> 00:39:04.380
this is kind of a cool way to do it as well


00:39:04.380 --> 00:39:06.180
if you're not doing something like Chocolatey.


00:39:06.180 --> 00:39:07.700
- I use it every day and it's--


00:39:07.700 --> 00:39:08.540
- Git for Windows?


00:39:08.540 --> 00:39:10.820
- Yeah, it's a requirement, yeah.


00:39:10.820 --> 00:39:12.060
- Nice, yeah, very cool.


00:39:12.060 --> 00:39:15.980
JupyterLab 3 is released.


00:39:15.980 --> 00:39:18.960
So this one comes to us from Alan Hanson


00:39:18.960 --> 00:39:20.440
and thanks for pointing this out.


00:39:20.440 --> 00:39:23.680
It's a little bit old, couple of months,


00:39:23.680 --> 00:39:26.000
but still very cool that JupyterLab 3 is out.


00:39:26.000 --> 00:39:28.320
You can check it out and see all the new changes


00:39:28.320 --> 00:39:30.840
that come along, including a debugger.


00:39:30.840 --> 00:39:33.260
A debugger, how about that?


00:39:33.260 --> 00:39:35.920
Table of contents, multiple languages,


00:39:35.920 --> 00:39:36.760
all sorts of cool stuff.


00:39:36.760 --> 00:39:38.640
So this looks like a major release.


00:39:38.640 --> 00:39:41.800
And if people who love JupyterLab should check it out.


00:39:41.800 --> 00:39:45.040
- Won't be too long until it's PyCharm.


00:39:45.040 --> 00:39:46.160
(laughing)


00:39:46.160 --> 00:39:47.000
Yeah, that's right.


00:39:47.000 --> 00:39:48.240
It's on its way.


00:39:48.240 --> 00:39:50.880
And speaking of PyCharm, I've got some on that.


00:39:50.880 --> 00:39:54.040
Brian Skin also did a follow-up to,


00:39:54.040 --> 00:39:57.000
not the previous episode, maybe the one before that,


00:39:57.000 --> 00:39:59.280
where we were talking about, like, you know,


00:39:59.280 --> 00:40:01.540
really, it's great that,


00:40:01.540 --> 00:40:03.400
I think this is when we had Sebastian Ramirez on,


00:40:03.400 --> 00:40:04.600
and we were talking about Google


00:40:04.600 --> 00:40:08.740
becoming a visionary sponsor of Python, which is great.


00:40:08.740 --> 00:40:11.320
And it's really cool that a couple of companies


00:40:11.320 --> 00:40:12.140
have done that.


00:40:12.140 --> 00:40:14.800
But then we also pointed out that, you know,


00:40:14.800 --> 00:40:18.040
Bank of America has insane amounts of stuff


00:40:18.040 --> 00:40:19.200
that they depend upon.


00:40:19.200 --> 00:40:22.280
JP Morgan Chase, their core trading engine,


00:40:22.280 --> 00:40:23.920
some of it is all by,


00:40:23.920 --> 00:40:26.520
some of these companies that make huge amounts of money


00:40:26.520 --> 00:40:30.840
and fundamentally depend upon Python itself,


00:40:30.840 --> 00:40:32.040
generally don't support Python.


00:40:32.040 --> 00:40:34.520
I don't know the degree to which those two companies do,


00:40:34.520 --> 00:40:35.880
but you don't see them


00:40:35.880 --> 00:40:37.780
at the top of those sponsorship lists.


00:40:37.780 --> 00:40:42.840
And Google's with something like $300,000 a year.


00:40:42.840 --> 00:40:46.200
That's the biggest corporate sponsor in the world.


00:40:46.200 --> 00:40:47.400
Right, couldn't we do more?


00:40:47.400 --> 00:40:50.640
So Brian Skin said, "Hey, I wrote a letter for people."


00:40:50.640 --> 00:40:53.260
And he shared it where it just said,


00:40:53.260 --> 00:40:58.260
"As a peer recipient, given the appreciable business value


00:40:58.260 --> 00:41:01.360
"that we derive from Python and its related scientific tool


00:41:01.360 --> 00:41:02.680
"that never lasts for years,


00:41:02.680 --> 00:41:05.340
"at no direct cost to the company,


00:41:05.340 --> 00:41:07.540
"would there be room for bracket company


00:41:07.540 --> 00:41:12.340
"to contribute financially to the 501(c)(3) organizations


00:41:12.340 --> 00:41:13.540
that support these tools.


00:41:13.540 --> 00:41:15.060
Here's a list, here's how.


00:41:15.060 --> 00:41:17.500
And basically, it wrote a template letter


00:41:17.500 --> 00:41:20.580
that you can send to your company decision makers


00:41:20.580 --> 00:41:22.780
to help encourage them to support Python


00:41:22.780 --> 00:41:24.980
and other open source projects.


00:41:24.980 --> 00:41:29.180
So, well done, Brian, that was pretty cool.


00:41:29.180 --> 00:41:35.860
All right, Django 3.2 long-term support releases out.


00:41:35.860 --> 00:41:39.760
So if you're on a slow roll with Django,


00:41:39.760 --> 00:41:42.140
you're ready to roll on the new version.


00:41:42.140 --> 00:41:44.340
So this is something you can safely adopt


00:41:44.340 --> 00:41:47.440
for the next three years and stay happy,


00:41:47.440 --> 00:41:50.700
but on a brand new version of Django, so check that out.


00:41:50.700 --> 00:41:53.580
PyCharm, there you go, guy, I told you it would come out.


00:41:53.580 --> 00:41:56.980
PyCharm 2021.1 is out,


00:41:56.980 --> 00:42:00.300
and they've got some really cool stuff in here,


00:42:00.300 --> 00:42:01.140
really neat things,


00:42:01.140 --> 00:42:03.980
including the Code With Me stuff is now out.


00:42:03.980 --> 00:42:07.440
So Code With Me is, I fire up PyCharm


00:42:07.440 --> 00:42:10.300
or any of the IntelliJ-based things,


00:42:10.300 --> 00:42:11.620
and I say, "Hey, I would like to say


00:42:11.620 --> 00:42:12.660
"Program with Brian, Brian,


00:42:12.660 --> 00:42:15.220
"can you help me work on the Python Bytes website?"


00:42:15.220 --> 00:42:17.700
So I could send you a link and then we would both have


00:42:17.700 --> 00:42:20.180
like Google Docs, but in PyCharm,


00:42:20.180 --> 00:42:21.420
like where we see each other typing,


00:42:21.420 --> 00:42:23.220
we can follow each other along.


00:42:23.220 --> 00:42:24.340
You can debug the code,


00:42:24.340 --> 00:42:26.140
but it's running on my machine, for example,


00:42:26.140 --> 00:42:28.020
even as voice call, video call,


00:42:28.020 --> 00:42:30.100
built into PyCharm alongside that.


00:42:30.100 --> 00:42:32.780
- Really? - So.


00:42:32.780 --> 00:42:34.300
- It's like a Skype client?


00:42:34.300 --> 00:42:35.740
- It actually looks like Skype.


00:42:35.740 --> 00:42:37.320
I couldn't be sure 'cause I haven't tried it yet,


00:42:37.320 --> 00:42:39.500
but I looked at the UI that you get.


00:42:39.500 --> 00:42:40.660
It's like a little, in a panel,


00:42:40.660 --> 00:42:42.540
It looks like an embedded Skype.


00:42:42.540 --> 00:42:43.540
- Interesting.


00:42:43.540 --> 00:42:44.580
- Yeah, yeah.


00:42:44.580 --> 00:42:45.940
All right, well, those are all the extra things


00:42:45.940 --> 00:42:47.660
for me as well.


00:42:47.660 --> 00:42:48.660
- Well, I wanted to bring up,


00:42:48.660 --> 00:42:53.180
so you reminded me of the Google fund thing


00:42:53.180 --> 00:42:55.940
that when adding, you know,


00:42:55.940 --> 00:42:59.260
Google give PSF a bunch of money.


00:42:59.260 --> 00:43:01.260
Well, what the PSF is doing with it


00:43:01.260 --> 00:43:03.380
is they're hiring a developer.


00:43:03.380 --> 00:43:04.220
- Oh, nice.


00:43:04.220 --> 00:43:05.340
- I'll drop the link.


00:43:05.340 --> 00:43:07.500
So PSF's hiring a developer in residence


00:43:07.500 --> 00:43:09.380
to support CPython.


00:43:09.380 --> 00:43:10.980
So this is a good thing.


00:43:10.980 --> 00:43:12.100
- Yeah, awesome.


00:43:12.100 --> 00:43:13.060
That's really cool.


00:43:13.060 --> 00:43:19.620
Ding Langsam also says PyCon IL is in a month.


00:43:19.620 --> 00:43:22.560
So yeah, awesome.


00:43:22.560 --> 00:43:23.660
Check that out.


00:43:23.660 --> 00:43:25.140
And then he also asked about,


00:43:25.140 --> 00:43:27.060
what about the in-browser PyCharm,


00:43:27.060 --> 00:43:28.020
which we did cover,


00:43:28.020 --> 00:43:30.180
but that was in some kind of experimental phase.


00:43:30.180 --> 00:43:31.820
I would definitely, if possible,


00:43:31.820 --> 00:43:33.660
recommend this code with me thing over that.


00:43:33.660 --> 00:43:35.420
'Cause then you get the real PyCharm.


00:43:35.420 --> 00:43:38.420
It just happens to be like this live exchange.


00:43:38.420 --> 00:43:40.340
There's a lot of setup and whatnot.


00:43:40.340 --> 00:43:42.980
And it had the, this is a private,


00:43:42.980 --> 00:43:44.900
not necessarily private, but this is in a beta,


00:43:44.900 --> 00:43:46.460
don't depend on it sort of way.


00:43:46.460 --> 00:43:48.980
But this is officially this other thing is released.


00:43:48.980 --> 00:43:51.140
Guy, anything else you want to throw out there


00:43:51.140 --> 00:43:53.460
for the world, for the listeners while you're here?


00:43:53.460 --> 00:43:56.060
- nothing really comes to mind.


00:43:56.060 --> 00:43:58.980
But thanks for having me.


00:43:58.980 --> 00:44:01.700
I see on our schedule we have a joke coming next.


00:44:01.700 --> 00:44:02.540
Is that true?


00:44:02.540 --> 00:44:04.180
- We do have a joke coming next.


00:44:04.180 --> 00:44:05.820
We actually have two, I believe.


00:44:05.820 --> 00:44:07.460
I'm gonna fire up mine first.


00:44:07.460 --> 00:44:09.460
fire up mine first. This one comes from...


00:44:09.460 --> 00:44:11.460
I have a joke as well, if you don't mind.


00:44:11.460 --> 00:44:13.460
Don't worry, it's safe.


00:44:13.460 --> 00:44:15.460
Alright, so


00:44:15.460 --> 00:44:17.460
Brian, you're a fan of Vim, right?


00:44:17.460 --> 00:44:19.460
Yes.


00:44:19.460 --> 00:44:21.460
So Anthony Shaw, same Anthony Shaw as the


00:44:21.460 --> 00:44:23.460
Pindelop bot


00:44:23.460 --> 00:44:25.460
we were just talking about,


00:44:25.460 --> 00:44:27.460
wrote a little one-liner


00:44:27.460 --> 00:44:29.460
that fits nicely in Twitter.


00:44:29.460 --> 00:44:31.460
Vim, the original escape room.


00:44:31.460 --> 00:44:33.460
[laughter]


00:44:33.460 --> 00:44:35.460
That's an old joke.


00:44:35.460 --> 00:44:38.060
I love it though. I love it.


00:44:38.060 --> 00:44:41.300
Of course, you put it on April 1st because you got to do something funny then.


00:44:41.300 --> 00:44:41.740
All right.


00:44:41.740 --> 00:44:42.540
>> Yeah.


00:44:42.540 --> 00:44:44.460
>> How about you? You got one here?


00:44:44.460 --> 00:44:46.140
>> Yeah, I was just added it.


00:44:46.140 --> 00:44:49.220
So this is awesome.


00:44:49.220 --> 00:44:53.740
So the H in software development stands for happiness.


00:44:53.740 --> 00:45:05.140
>> Nice. Yeah, Dean also just wants to point out that IL is Israel,


00:45:05.140 --> 00:45:07.460
which I did think that was, but I wasn't 100% sure.


00:45:07.460 --> 00:45:08.300
So I didn't.


00:45:08.300 --> 00:45:10.620
- I wasn't sure if that was Israel or Illinois.


00:45:10.620 --> 00:45:11.820
- Yeah, yeah.


00:45:11.820 --> 00:45:12.700
Israel, perfect.


00:45:12.700 --> 00:45:14.420
I would love to go there,


00:45:14.420 --> 00:45:16.140
but probably not traveling right now.


00:45:16.140 --> 00:45:17.740
- I will get to go there eventually.


00:45:17.740 --> 00:45:20.020
That's actually where Redis Labs is headquartered.


00:45:20.020 --> 00:45:20.860
- Oh, is it?


00:45:20.860 --> 00:45:21.680
Interesting, yeah.


00:45:21.680 --> 00:45:23.500
I've had some really great vacations in Tel Aviv,


00:45:23.500 --> 00:45:24.340
hanging out on the beach.


00:45:24.340 --> 00:45:25.940
I can't wait to get back.


00:45:25.940 --> 00:45:27.340
All right, Guy, how about your joke?


00:45:27.340 --> 00:45:29.580
- I thought you were excited to go to Illinois.


00:45:29.580 --> 00:45:31.420
- Yes.


00:45:31.420 --> 00:45:33.420
You know, Chicago would be nice, maybe.


00:45:33.420 --> 00:45:34.900
Yeah, nice place.


00:45:34.900 --> 00:45:37.300
I just can't wait to get to Peoria.


00:45:37.300 --> 00:45:41.300
- Well, I've actually spent a lot of time in Peoria,


00:45:41.300 --> 00:45:44.420
but I've probably hit my lifetime limit.


00:45:44.420 --> 00:45:45.260
I don't need to go.


00:45:45.260 --> 00:45:46.540
I wouldn't take a vacation there.


00:45:46.540 --> 00:45:49.060
It's a nice place, but I wouldn't go travel to it.


00:45:49.060 --> 00:45:50.540
- Yeah, yeah.


00:45:50.540 --> 00:45:55.540
So my joke is, well, it's for you, for you all.


00:45:55.540 --> 00:45:59.280
What's a, what be a pirate's favorite programming language?


00:46:02.380 --> 00:46:04.620
Pirate's favorite programming language.


00:46:04.620 --> 00:46:06.980
C?


00:46:06.980 --> 00:46:08.220
- Ah, you ruined it.


00:46:08.220 --> 00:46:10.480
(laughing)


00:46:10.480 --> 00:46:12.700
- You had to ask me, I'm sorry.


00:46:12.700 --> 00:46:14.980
- So the way it's supposed to go is I say,


00:46:14.980 --> 00:46:16.780
what would be a pirate's favorite programming language?


00:46:16.780 --> 00:46:19.900
And you both simultaneously go R, right?


00:46:19.900 --> 00:46:20.740
- R.


00:46:20.740 --> 00:46:21.580
- Right, because--


00:46:21.580 --> 00:46:23.300
- Oh, yeah.


00:46:23.300 --> 00:46:26.020
- And then the response from me is,


00:46:26.020 --> 00:46:27.140
you might think it'd be R or maybe,


00:46:27.140 --> 00:46:29.020
but his first love would be the C.


00:46:29.020 --> 00:46:30.540
- Ah, man.


00:46:30.540 --> 00:46:33.220
Oh, and the audience is forced to call on that R.


00:46:33.220 --> 00:46:35.500
Should have looked down.


00:46:35.500 --> 00:46:38.580
It's it works great live because you know, you get an audience,


00:46:38.580 --> 00:46:40.260
they'll shout back the answer.


00:46:40.260 --> 00:46:41.180
Yeah.


00:46:41.180 --> 00:46:43.580
And because they just can't help themselves.


00:46:43.580 --> 00:46:46.100
And then you, you surprise them with the twist.


00:46:46.100 --> 00:46:47.460
What was the trick question?


00:46:47.460 --> 00:46:49.380
Because R is not a programming language.


00:46:49.380 --> 00:46:57.020
Well, it's been nice talking with you, Brian.


00:46:57.020 --> 00:46:59.260
(laughing)


00:46:59.260 --> 00:47:04.220
I saw what I would wanna work in honestly.


00:47:04.220 --> 00:47:05.780
It's, I mean, I know it's popular,


00:47:05.780 --> 00:47:07.980
was popular in data science stack, but it's,


00:47:07.980 --> 00:47:11.940
I mean, it's got one based arrays.


00:47:11.940 --> 00:47:14.100
I mean, that's right up there with VB6.


00:47:14.100 --> 00:47:16.580
- I've never even tried it.


00:47:16.580 --> 00:47:18.820
I just, I haven't made anybody mad today.


00:47:18.820 --> 00:47:21.380
So I needed to fill my quota.


00:47:21.380 --> 00:47:23.780
- It does have like web clients and stuff like that.


00:47:23.780 --> 00:47:24.900
So you can build web servers.


00:47:24.900 --> 00:47:25.980
It's the full fledged language,


00:47:25.980 --> 00:47:28.700
but I've never done anything more than attend


00:47:28.700 --> 00:47:30.780
a one hour talk on the language.


00:47:30.780 --> 00:47:31.620
So.


00:47:31.620 --> 00:47:32.440
- Yeah.


00:47:32.440 --> 00:47:34.260
Yeah, I haven't either.


00:47:34.260 --> 00:47:35.100
All right.


00:47:35.100 --> 00:47:37.720
Well, Guy, thanks so much for being here with us.


00:47:37.720 --> 00:47:40.540
And Brian, as always, great to chat with you.


00:47:40.540 --> 00:47:41.380
- Good to talk.


00:47:41.380 --> 00:47:42.660
- Yeah, thanks for having me.


00:47:42.660 --> 00:47:43.500
- Yep.


00:47:43.500 --> 00:47:45.020
Thanks everyone in the live stream as well.


00:47:45.020 --> 00:47:46.020
Bye all.


00:47:46.020 --> 00:47:46.860
- See ya.


00:47:46.860 --> 00:47:48.940
(laughs)

