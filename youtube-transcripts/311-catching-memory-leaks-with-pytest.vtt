WEBVTT

00:00:00.000 --> 00:00:02.700
Still sketches. Hey, everybody.


00:00:02.700 --> 00:00:04.500
hello.


00:00:04.500 --> 00:00:07.500
Welcome to, Python bites live recording.


00:00:07.500 --> 00:00:11.700
And, thanks for everyone for sticking around for a couple extra minutes.


00:00:11.700 --> 00:00:15.400
We had some technical difficulty, but we're all set to go now.


00:00:15.400 --> 00:00:17.500
Yay. So ready guys.


00:00:17.500 --> 00:00:19.900
Okay.


00:00:19.900 --> 00:00:25.900
Hello and welcome to Python bites where we deliver Python news and headlines directly to your earbuds.


00:00:25.900 --> 00:00:30.900
This is episode 311 recorded November 22nd, 2022.


00:00:30.900 --> 00:00:34.300
And I am Brian Okken.


00:00:34.300 --> 00:00:36.100
- I'm Michael Kennedy.


00:00:36.100 --> 00:00:37.780
- And I'm Murilo Cunha.


00:00:37.780 --> 00:00:40.700
- So welcome Murilo, Mur, Mur, sorry.


00:00:40.700 --> 00:00:41.540
- Murilo is fine.


00:00:41.540 --> 00:00:42.380
- Okay.


00:00:42.380 --> 00:00:43.200
- Yeah.


00:00:43.200 --> 00:00:44.040
- Okay.


00:00:44.040 --> 00:00:45.380
So tell us a little bit about yourself


00:00:45.380 --> 00:00:47.820
before we jump into the topics.


00:00:47.820 --> 00:00:48.660
- All right.


00:00:48.660 --> 00:00:51.540
So TLDR is a machine learning engineer


00:00:51.540 --> 00:00:55.100
at a data and AI consultancy company called Data Roots.


00:00:55.100 --> 00:00:57.780
I'm from Brazil, but I actually live in Belgium.


00:00:57.780 --> 00:01:00.380
And I guess that's it.


00:01:00.380 --> 00:01:02.020
Thanks for having me.


00:01:02.020 --> 00:01:03.580
- Thanks for showing up.


00:01:03.580 --> 00:01:05.460
- It's great to have you here.


00:01:05.460 --> 00:01:06.780
- Well, Michael, why don't you kick us off


00:01:06.780 --> 00:01:08.300
with the first topic?


00:01:08.300 --> 00:01:09.540
- All right, let's kick it off.


00:01:09.540 --> 00:01:12.620
I've got some fun stuff.


00:01:12.620 --> 00:01:14.140
Let's see what Marilo thinks about this.


00:01:14.140 --> 00:01:16.380
This is, it's a little bit mathy,


00:01:16.380 --> 00:01:18.780
what I got going on here.


00:01:18.780 --> 00:01:20.100
That is not the right screen.


00:01:20.100 --> 00:01:21.260
How about that screen?


00:01:21.260 --> 00:01:26.260
So this comes in from one of the big friends of the show,


00:01:26.260 --> 00:01:29.840
Brian Skin, and he sent me a tweet and it just says,


00:01:29.840 --> 00:01:32.180
what @pythonbytes?


00:01:32.180 --> 00:01:37.180
And it's a quote tweet from somebody here saying,


00:01:37.180 --> 00:01:41.740
holy latexify is the sexiest thing I've ever seen.


00:01:41.740 --> 00:01:46.860
And look at this, so when I studied a ton of math


00:01:46.860 --> 00:01:51.860
And the symbols of mathematics are really important


00:01:51.860 --> 00:01:55.340
and they communicate stuff like really, really quickly.


00:01:55.340 --> 00:01:57.260
You can scan over and you see the symbol


00:01:57.260 --> 00:02:00.260
for the real numbers, or you can see the symbol


00:02:00.260 --> 00:02:03.900
for subset or infinite sum, and you're like,


00:02:03.900 --> 00:02:05.120
I know what that means.


00:02:05.120 --> 00:02:08.460
When you translate that into Python or into computer code,


00:02:08.460 --> 00:02:12.060
it usually becomes something kind of gnarly looking, right?


00:02:12.060 --> 00:02:15.960
So the example here on this tweet


00:02:15.960 --> 00:02:17.320
has a function called solve,


00:02:17.320 --> 00:02:20.120
and it's solving the quadratic equation,


00:02:20.120 --> 00:02:22.560
I guess just for one variation of the root,


00:02:22.560 --> 00:02:24.360
not the plus minus, but that's fine.


00:02:24.360 --> 00:02:28.280
It just says like negative B plus math dot square root


00:02:28.280 --> 00:02:31.880
B star star two, it's like symbol soup, right?


00:02:31.880 --> 00:02:33.080
- Yeah.


00:02:33.080 --> 00:02:36.720
- So this latexify thing, latecify,


00:02:36.720 --> 00:02:40.540
latec is the language of expressing those symbols


00:02:40.540 --> 00:02:42.680
the way mathematicians would have written them


00:02:42.680 --> 00:02:45.120
in the 16th century or whatever,


00:02:45.120 --> 00:02:49.300
like the fancy flowing sort of, you know,


00:02:49.300 --> 00:02:52.140
some symbols and integral symbols and whatnot.


00:02:52.140 --> 00:02:55.620
And so what this does is you just put a decorator


00:02:55.620 --> 00:02:57.220
onto that Python function,


00:02:57.220 --> 00:02:59.720
you say let techify dot with latex,


00:02:59.720 --> 00:03:04.720
let tech, when you show that function in a notebook,


00:03:04.720 --> 00:03:10.480
it shows the math, the formal mathematics of it.


00:03:10.480 --> 00:03:11.480
- Wow.


00:03:11.480 --> 00:03:14.060
- Like, like there's one that was doing,


00:03:14.060 --> 00:03:15.860
I said the quadratic equation, another one that says,


00:03:15.860 --> 00:03:19.700
if X is zero, return one else return math,


00:03:19.700 --> 00:03:21.580
sine of X divided by X.


00:03:21.580 --> 00:03:23.540
And then the symbols is like this sort of like


00:03:23.540 --> 00:03:27.140
branching equation, you know, like what you would write that


00:03:27.140 --> 00:03:29.140
in the LaTeX conceptually.


00:03:29.140 --> 00:03:31.060
What do you think? - Oh, wow.


00:03:31.060 --> 00:03:32.460
- Is that insane?


00:03:32.460 --> 00:03:34.100
- This is great.


00:03:34.100 --> 00:03:36.900
But it just changes the rep of the function, I guess, right?


00:03:36.900 --> 00:03:39.140
Like if you call the function, it's all fine.


00:03:39.140 --> 00:03:41.620
- Yeah, exactly.


00:03:41.620 --> 00:03:42.700
It doesn't change the function at all.


00:03:42.700 --> 00:03:45.800
It changes the repper or the stir.


00:03:45.800 --> 00:03:47.780
So if you do this outside of a notebook,


00:03:47.780 --> 00:03:51.080
what it prints out, let me see if I can somehow


00:03:51.080 --> 00:03:53.620
communicate this back.


00:03:53.620 --> 00:03:56.940
So if you print it out, what it, it returns,


00:03:56.940 --> 00:03:58.940
oh, do I have it here?


00:03:58.940 --> 00:04:01.920
No, yes, there.


00:04:01.920 --> 00:04:02.760
No, that's not it.


00:04:02.760 --> 00:04:03.660
Sorry, I don't have it.


00:04:03.660 --> 00:04:06.620
What it prints out is the LaTeX escape codes.


00:04:06.620 --> 00:04:10.980
So it'll say like, backslash frack of, you know,


00:04:10.980 --> 00:04:13.700
Like it's a weird, I don't know how to write LaTeX.


00:04:13.700 --> 00:04:15.300
I did a little bit when I was studying math


00:04:15.300 --> 00:04:17.620
and then I said, that's something I never need to remember


00:04:17.620 --> 00:04:21.580
and, you know, shot it out of my brain.


00:04:21.580 --> 00:04:22.760
- Never again.


00:04:22.760 --> 00:04:24.220
- Yeah, like why do I need to know this?


00:04:24.220 --> 00:04:25.620
I don't need to know this.


00:04:25.620 --> 00:04:30.620
But yeah, so the repper is just the LaTeX escape codes


00:04:30.620 --> 00:04:34.700
and then the notebooks see that


00:04:34.700 --> 00:04:36.940
and then they render it as LaTeX.


00:04:36.940 --> 00:04:38.900
- That's pretty cool.


00:04:38.900 --> 00:04:40.940
And then, but one of the nice things about this then


00:04:40.940 --> 00:04:44.960
is you can, you might have like the math


00:04:44.960 --> 00:04:47.360
that you're trying to convert to code


00:04:47.360 --> 00:04:49.000
and then you can like check your answer.


00:04:49.000 --> 00:04:53.360
You can just see, did I get it right in code?


00:04:53.360 --> 00:04:55.520
So, this is pretty cool.


00:04:55.520 --> 00:04:56.400
- That's really interesting.


00:04:56.400 --> 00:04:58.300
Yeah, 'cause you round trip it, right?


00:04:58.300 --> 00:05:02.000
- Yeah, I'm assuming people are doing this


00:05:02.000 --> 00:05:02.840
on their own code.


00:05:02.840 --> 00:05:05.160
So they're, you know, I guess you could--


00:05:05.160 --> 00:05:08.080
- The question about the inverse, right?


00:05:08.080 --> 00:05:11.160
It's like, hey, if I have the math symbols,


00:05:11.160 --> 00:05:13.000
could I turn this into a Python function?


00:05:13.000 --> 00:05:15.760
I mean, I don't see why I can't go both ways.


00:05:15.760 --> 00:05:16.600
- Sure.


00:05:16.600 --> 00:05:19.080
- True, but I still think it would be easier


00:05:19.080 --> 00:05:21.360
to write the Python function than the latex code


00:05:21.360 --> 00:05:22.800
or rendering it.


00:05:22.800 --> 00:05:24.120
- Yeah, that's true.


00:05:24.120 --> 00:05:25.680
I think it's a pretty niche use case.


00:05:25.680 --> 00:05:27.360
Well, you know, I'm sure.


00:05:27.360 --> 00:05:29.580
- Well, I'm sure someone's gonna find a cool use case


00:05:29.580 --> 00:05:31.160
for it too, right?


00:05:31.160 --> 00:05:32.600
- Yeah.


00:05:32.600 --> 00:05:34.480
This is pretty interesting.


00:05:34.480 --> 00:05:37.440
We've got a couple of live comments.


00:05:37.440 --> 00:05:39.440
Hey Madison, out in the audience.


00:05:39.440 --> 00:05:41.240
Madison's been on the show before.


00:05:41.240 --> 00:05:44.080
I'm blown away by how libraries like this


00:05:44.080 --> 00:05:45.960
are able to make math approachable.


00:05:45.960 --> 00:05:46.940
I wonder how this could be used


00:05:46.940 --> 00:05:48.360
with auto-generated documentation.


00:05:48.360 --> 00:05:50.360
Very cool, I agree.


00:05:50.360 --> 00:05:53.120
And Henry also says, I'm guessing it's working


00:05:53.120 --> 00:05:55.360
on the byte code like Numba,


00:05:55.360 --> 00:05:56.880
but compiling it into a human language.


00:05:56.880 --> 00:06:00.760
Yeah, compiling it into the LaTeX escape codes.


00:06:00.760 --> 00:06:01.600
- Which is not human.


00:06:01.600 --> 00:06:02.440
- Basically.


00:06:02.440 --> 00:06:03.260
- Yeah.


00:06:03.260 --> 00:06:04.680
- Which is the opposite of unreadable,


00:06:04.680 --> 00:06:05.960
but it is text, right?


00:06:05.960 --> 00:06:06.800
- Yeah.


00:06:06.800 --> 00:06:10.240
Related to this, just--


00:06:10.240 --> 00:06:11.000
Oh, yeah.


00:06:11.000 --> 00:06:13.280
Henry tells me how it's done.


00:06:13.280 --> 00:06:14.400
OK.


00:06:14.400 --> 00:06:16.760
It's using inspect get source and parsing the AST.


00:06:16.760 --> 00:06:17.760
Yeah, perfect.


00:06:17.760 --> 00:06:19.400
Another thing that's amazing that people


00:06:19.400 --> 00:06:22.000
check out, like the SymPy stuff, it


00:06:22.000 --> 00:06:26.360
does some really, really interesting things.


00:06:26.360 --> 00:06:29.400
Like if you go, say, to Calculus, you take a limit


00:06:29.400 --> 00:06:34.200
here, it'll do similar outputs as well.


00:06:34.200 --> 00:06:42.760
You could put in this, and it'll actually express it as symbolic math, and it won't lose precision


00:06:42.760 --> 00:06:46.920
because it solves it symbolically. You can say, like, you know, factor this equation.


00:06:46.920 --> 00:06:53.400
So that's kind of related. But this just says, given any arbitrary Python function not written


00:06:53.400 --> 00:06:58.520
in the symbolic form, just turn it into LaTeX, which is pretty amazing. So anyway, thank you,


00:06:58.520 --> 00:07:00.440
- Thank you, Brian Skin for pointing that out.


00:07:00.440 --> 00:07:01.640
That is pretty neat.


00:07:01.640 --> 00:07:03.400
One final comment.


00:07:03.400 --> 00:07:07.640
I could not get it to install on my Apple Silicon Mac.


00:07:07.640 --> 00:07:09.200
Maybe that detail matters,


00:07:09.200 --> 00:07:11.360
but I couldn't get it to pip install.


00:07:11.360 --> 00:07:15.440
Out of PyPI, I had to pip install the git plus


00:07:15.440 --> 00:07:18.280
the GitHub URL, and then it would install.


00:07:18.280 --> 00:07:20.400
I don't know why, but if people wanna play with it,


00:07:20.400 --> 00:07:22.000
that might be necessary.


00:07:22.000 --> 00:07:22.960
- Okay, cool.


00:07:22.960 --> 00:07:25.280
- Yeah, over to you, Brian.


00:07:25.280 --> 00:07:28.360
- All right, well, while we're talking about math,


00:07:28.360 --> 00:07:32.240
I'm often working in the measurement world


00:07:32.240 --> 00:07:35.440
and where we care about like prefixes a lot.


00:07:35.440 --> 00:07:36.720
And you know, a lot of people do


00:07:36.720 --> 00:07:39.320
with big numbers or small numbers.


00:07:39.320 --> 00:07:44.320
And this was actually suggested to us by Avram.


00:07:44.320 --> 00:07:48.620
And I think he's either works on this or it's his project.


00:07:48.620 --> 00:07:50.720
It's a project called Prefixed.


00:07:50.720 --> 00:07:55.600
And what this does is it's just, it's a class,


00:07:55.600 --> 00:07:59.600
it provides a class called float, capital F,


00:07:59.600 --> 00:08:04.160
that is a, derives from the built-in float,


00:08:04.160 --> 00:08:09.440
and it supports scientific decimal,


00:08:09.440 --> 00:08:11.600
or scientific and, yeah, IEC,


00:08:11.600 --> 00:08:15.480
which I'm not familiar with, prefixes.


00:08:15.480 --> 00:08:20.320
So things like scientific, like K and S


00:08:20.320 --> 00:08:21.640
and things like that.


00:08:21.640 --> 00:08:23.640
If you go look at all the metric prefixes,


00:08:23.640 --> 00:08:26.920
you've got like, there's some new ones,


00:08:26.920 --> 00:08:30.680
but N, K, mega, giga, things like that.


00:08:30.680 --> 00:08:35.440
And it just, so it adds these onto when you print them.


00:08:35.440 --> 00:08:37.680
So it acts just like a normal float.


00:08:37.680 --> 00:08:41.720
Most of the time you can use it in math equations


00:08:41.720 --> 00:08:42.640
and everything.


00:08:42.640 --> 00:08:46.920
The interesting thing is if it is used in math equation,


00:08:46.920 --> 00:08:51.920
the result will be one of these prefix float types.


00:08:51.920 --> 00:08:55.180
But then the nice thing about it


00:08:55.180 --> 00:08:57.440
is when you convert it to a string,


00:08:57.440 --> 00:09:01.340
it includes the little prefix thing


00:09:01.340 --> 00:09:03.140
or the suffix or whatever,


00:09:03.140 --> 00:09:06.180
the little micro or K or M or something like that.


00:09:06.180 --> 00:09:11.080
So I think this is actually super helpful.


00:09:11.080 --> 00:09:12.440
I'm gonna use this right away


00:09:12.440 --> 00:09:16.100
because I use a lot of like big and small numbers


00:09:16.100 --> 00:09:18.440
and reporting out just the huge thing,


00:09:18.440 --> 00:09:23.360
or just the float is sometimes horrible to compare with.


00:09:23.360 --> 00:09:25.000
So this is pretty cool.


00:09:25.000 --> 00:09:27.980
- It's very clever.


00:09:27.980 --> 00:09:30.680
I love how simple the idea is.


00:09:30.680 --> 00:09:32.620
So you can just F string one of these floats


00:09:32.620 --> 00:09:37.480
and say colon 0.2 H, and that'll convert it to its,


00:09:37.480 --> 00:09:40.100
and the H tells it to be either, you know,


00:09:40.100 --> 00:09:42.880
kila or micro or mega or, you know,


00:09:42.880 --> 00:09:44.520
whatever suffix is needed.


00:09:44.520 --> 00:09:45.360
That's cool.


00:09:45.360 --> 00:09:48.500
And then there's the byte example where they said,


00:09:48.500 --> 00:09:52.100
well, I'm gonna use the capital B for bytes,


00:09:52.100 --> 00:09:55.420
but that's after the formatting of the number.


00:09:55.420 --> 00:09:58.880
And then the K comes in from the float thing.


00:09:58.880 --> 00:10:01.420
So that's pretty cool.


00:10:01.420 --> 00:10:03.480
One of the other things that he passed along


00:10:03.480 --> 00:10:06.000
is there's some new prefixes.


00:10:06.000 --> 00:10:09.780
So this is apparently new,


00:10:09.780 --> 00:10:12.500
new scientific prefixes over the last,


00:10:12.500 --> 00:10:15.780
for the first ones, new ones for the last 30 years,


00:10:15.780 --> 00:10:16.780
apparently.


00:10:16.780 --> 00:10:21.720
So we have 10 to the 21st, which is Zeta,


00:10:21.720 --> 00:10:24.420
and 10 to the 24th, which is Yotta,


00:10:24.420 --> 00:10:28.080
and then negative is Zepto and Yocto.


00:10:28.080 --> 00:10:29.500
So these are fun.


00:10:29.500 --> 00:10:32.020
- Maybe, why now?


00:10:32.020 --> 00:10:34.600
Why did they decided to like,


00:10:34.600 --> 00:10:36.740
need to, they have more money now


00:10:36.740 --> 00:10:39.820
and they need to come up with new prefixes or?


00:10:39.820 --> 00:10:40.700
- Exactly.


00:10:40.700 --> 00:10:44.180
I'm not sure why we need new prefixes.


00:10:44.180 --> 00:10:46.180
>> Our microscopes can now see smaller things.


00:10:46.180 --> 00:10:50.420
We don't have words for this, that things are this small.


00:10:50.420 --> 00:10:53.780
>> But national debt, maybe.


00:10:53.780 --> 00:10:57.660
>> Yeah, very possible.


00:10:57.660 --> 00:11:01.140
>> But also, Avram notes that Prefixed


00:11:01.140 --> 00:11:02.660
does handle these new ones.


00:11:02.660 --> 00:11:04.260
So cool.


00:11:04.260 --> 00:11:05.380
Good job.


00:11:05.380 --> 00:11:08.420
>> One thing, Python 2, you can put the underscore, right?


00:11:08.420 --> 00:11:10.860
if you put underscore in the thousands, that also,


00:11:10.860 --> 00:11:13.320
that's something that makes it easier, I think,


00:11:13.320 --> 00:11:15.060
to read the numbers too.


00:11:15.060 --> 00:11:15.900
That's what I was using to know.


00:11:15.900 --> 00:11:17.780
- Yeah, like the digit grouping, yeah.


00:11:17.780 --> 00:11:19.880
- Yeah. - Do you do that a lot?


00:11:19.880 --> 00:11:23.460
- Not a lot, but like, whenever I can, I do.


00:11:23.460 --> 00:11:26.460
I think it makes it easier to distinguish


00:11:26.460 --> 00:11:28.300
how big the number is, I guess.


00:11:28.300 --> 00:11:29.580
- I always forget to.


00:11:29.580 --> 00:11:32.120
I just, I know it's there, but I never use it.


00:11:32.120 --> 00:11:35.460
- I think usually it's like when I'm counting the zeros


00:11:35.460 --> 00:11:36.620
with my finger on the screen, I'm like,


00:11:36.620 --> 00:11:38.980
No, no, maybe I'll just put a underscore there.


00:11:38.980 --> 00:11:41.220
It makes everyone's life easier.


00:11:41.220 --> 00:11:41.740
Yeah.


00:11:41.740 --> 00:11:44.540
I've really started doing that a lot the last couple years.


00:11:44.540 --> 00:11:46.860
But before then, I didn't.


00:11:46.860 --> 00:11:48.060
Cool.


00:11:48.060 --> 00:11:50.820
Well, what is next?


00:11:50.820 --> 00:11:52.580
Merlo, what you got for us?


00:11:52.580 --> 00:11:54.060
I think that's me.


00:11:54.060 --> 00:11:56.100
Yeah.


00:11:56.100 --> 00:11:56.980
DBT, have you ever--


00:11:56.980 --> 00:11:58.900
First, you've got to accept some cookies.


00:11:58.900 --> 00:12:00.140
Hold on.


00:12:00.140 --> 00:12:01.420
Oh, my bad.


00:12:01.420 --> 00:12:01.920
My bad.


00:12:01.920 --> 00:12:02.620
Just kidding.


00:12:02.620 --> 00:12:03.420
I'm just teasing.


00:12:03.420 --> 00:12:04.060
I love cookies.


00:12:04.060 --> 00:12:06.460
I'm trying to-- these cookie things drive me crazy, man.


00:12:06.460 --> 00:12:07.460
I don't know.


00:12:07.460 --> 00:12:08.460
Yeah.


00:12:08.460 --> 00:12:11.700
I think it's like crazy how like now that it's popping up everywhere and then you see


00:12:11.700 --> 00:12:16.660
like the data gathering all the time and this and this.


00:12:16.660 --> 00:12:17.660
But maybe DBT.


00:12:17.660 --> 00:12:18.660
Have you ever heard of DBT?


00:12:18.660 --> 00:12:22.380
Is this something because in the data world in my field, it's super popular, but I don't


00:12:22.380 --> 00:12:24.620
know if it's a bubble as well.


00:12:24.620 --> 00:12:25.620
I've never heard of it.


00:12:25.620 --> 00:12:28.060
Michael never heard of it.


00:12:28.060 --> 00:12:31.580
I think I've heard of it, but I couldn't tell you what it does.


00:12:31.580 --> 00:12:33.620
So I'm basically in the same spot.


00:12:33.620 --> 00:12:35.220
Tell us about it.


00:12:35.220 --> 00:12:36.500
No, it's a really cool tool.


00:12:36.500 --> 00:12:37.580
It's open source as well.


00:12:37.580 --> 00:12:39.860
They have their cloud option, I guess, right?


00:12:39.860 --> 00:12:41.580
So you can pay and they host it.


00:12:41.580 --> 00:12:43.780
Maybe a disclaimer as well that I never,


00:12:43.780 --> 00:12:45.540
I always see it and I always want to use it,


00:12:45.540 --> 00:12:47.340
but I haven't found the use case.


00:12:47.340 --> 00:12:49.780
So I don't have first-hand experience here,


00:12:49.780 --> 00:12:51.820
but basically the way I would describe


00:12:51.820 --> 00:12:54.780
is that they add best practices around SQL projects.


00:12:54.780 --> 00:12:58.740
So why am I mentioning this on Python Bytes?


00:12:58.740 --> 00:12:59.980
It's built with Python.


00:12:59.980 --> 00:13:00.900
Yay.


00:13:00.900 --> 00:13:02.460
And the other thing too is that,


00:13:03.580 --> 00:13:06.460
they actually mix Jinja with SQL stuff, right?


00:13:06.460 --> 00:13:07.860
So you can actually do for loops,


00:13:07.860 --> 00:13:08.700
you can do stuff like that,


00:13:08.700 --> 00:13:10.240
so you don't have to repeat every time


00:13:10.240 --> 00:13:12.220
and just change the variable.


00:13:12.220 --> 00:13:14.440
They also have these like reference macros and stuff,


00:13:14.440 --> 00:13:16.020
so you can actually say, okay,


00:13:16.020 --> 00:13:17.980
this comes from that table that is on that file,


00:13:17.980 --> 00:13:18.960
and this comes from this.


00:13:18.960 --> 00:13:21.540
So you can actually chain a lot of these dependencies, right?


00:13:21.540 --> 00:13:22.800
Like there's a lot of projects


00:13:22.800 --> 00:13:24.780
that you have these ETL stuff, right?


00:13:24.780 --> 00:13:27.240
So you just have to basically transform each step.


00:13:27.240 --> 00:13:29.060
And with dbt, they actually keep track


00:13:29.060 --> 00:13:30.100
of what depends on what,


00:13:30.100 --> 00:13:32.380
and you can say, oh, I want the freshest data here,


00:13:32.380 --> 00:13:35.880
and you execute everything that needs to be executed there.


00:13:35.880 --> 00:13:36.760
- Wow.


00:13:36.760 --> 00:13:38.060
- Yeah, so it's super cool.


00:13:38.060 --> 00:13:40.100
They actually support a lot of like data platforms here.


00:13:40.100 --> 00:13:43.860
Right, so you see like BigQuery, Databricks, Snowflake,


00:13:43.860 --> 00:13:45.420
all these things as well.


00:13:45.420 --> 00:13:48.180
Another thing that they also, more things they do,


00:13:48.180 --> 00:13:50.540
they even have some data validation stuff,


00:13:50.540 --> 00:13:52.700
which in my field, it's a big thing too.


00:13:52.700 --> 00:13:54.260
You know, like maybe have an ID column


00:13:54.260 --> 00:13:55.860
that needs to be unique, cannot be null,


00:13:55.860 --> 00:13:57.540
and you wanna make sure that that always happens.


00:13:57.540 --> 00:13:59.700
And if it doesn't happen, you wanna be flagged, right?


00:13:59.700 --> 00:14:00.740
So that's super cool.


00:14:00.740 --> 00:14:03.060
What else?


00:14:03.060 --> 00:14:05.620
You also have some built-in documentation.


00:14:05.620 --> 00:14:07.740
Once you have the dependencies,


00:14:07.740 --> 00:14:09.580
you can say, "Show me the DAG,


00:14:09.580 --> 00:14:12.100
show me where the data comes from and what depends on what."


00:14:12.100 --> 00:14:13.580
That's also super cool.


00:14:13.580 --> 00:14:16.100
Recently, actually, they actually started supporting.


00:14:16.100 --> 00:14:19.700
Like an SQL file corresponds to a model.


00:14:19.700 --> 00:14:26.260
Cookies again. They have SQL models,


00:14:26.260 --> 00:14:27.460
so that's the one, but they also


00:14:27.460 --> 00:14:29.260
started supporting Python models.


00:14:29.260 --> 00:14:31.440
So this is very tight to data.


00:14:31.440 --> 00:14:32.920
So now you can actually mix and match, right?


00:14:32.920 --> 00:14:35.480
You can say this step, this transformation is in SQL,


00:14:35.480 --> 00:14:37.420
but this one is actually in Python, right?


00:14:37.420 --> 00:14:39.740
So the way they don't run anything on the machine,


00:14:39.740 --> 00:14:41.220
they actually send it to the cloud.


00:14:41.220 --> 00:14:42.840
So Snowflake has Snowpark,


00:14:42.840 --> 00:14:45.900
which is Python on its own Snowflake.


00:14:45.900 --> 00:14:49.400
BigQuery has Spark and Databricks as well, right?


00:14:49.400 --> 00:14:51.320
So basically you can mix and match.


00:14:51.320 --> 00:14:53.040
This transformation is here, this transformation is there,


00:14:53.040 --> 00:14:55.760
but everything is like in a nice, put in one place.


00:14:55.760 --> 00:14:58.480
And because it's on Git as well, you can have CI/CD.


00:14:58.480 --> 00:15:01.080
I think also you mentioned, I think it was you, Brian,


00:15:01.080 --> 00:15:04.200
that mentioned SQL Fluff, and SQL Fluff actually


00:15:04.200 --> 00:15:05.880
came from a DBT project as well.


00:15:05.880 --> 00:15:08.440
So, and it's all in Python, so super cool.


00:15:08.440 --> 00:15:10.800
- That's really neat.


00:15:10.800 --> 00:15:12.920
So what do the Python models look like?


00:15:12.920 --> 00:15:16.560
Are they straight Python classes, or are they Pydantic?


00:15:16.560 --> 00:15:18.800
- I have, I watched, maybe I'm a bit lazy,


00:15:18.800 --> 00:15:22.480
'cause I just watched a video, and they were showing here


00:15:22.480 --> 00:15:25.160
how it works, 'cause they're also doing a comparison, right?


00:15:25.160 --> 00:15:27.880
Maybe this is, no, this doesn't work, does it?


00:15:27.880 --> 00:15:30.720
- Yeah, it works. - This works?


00:15:30.720 --> 00:15:32.040
- Yeah, it was wrong.


00:15:32.040 --> 00:15:35.480
- Okay, but the quality is horrible.


00:15:35.480 --> 00:15:38.080
But in a nutshell, you have this basically.


00:15:38.080 --> 00:15:38.920
- Yeah, I'll put this in the top.


00:15:38.920 --> 00:15:40.360
- You define a function. - Okay, got it.


00:15:40.360 --> 00:15:42.480
- Yeah, you define a function that has a DBT and a session,


00:15:42.480 --> 00:15:43.400
and then you create a reference,


00:15:43.400 --> 00:15:45.160
so reference is basically a table, right?


00:15:45.160 --> 00:15:46.800
And you can say, and then from that point on,


00:15:46.800 --> 00:15:48.800
you can say two pandas, and then you can just basically


00:15:48.800 --> 00:15:51.060
use the pandas API to transform that, right?


00:15:51.060 --> 00:15:52.720
So there's still some caveats, right?


00:15:52.720 --> 00:15:54.840
'Cause panda is not super performant,


00:15:54.840 --> 00:15:56.360
depending on how much data you have and whatnot.


00:15:56.360 --> 00:16:01.360
So sometimes you probably still want to stick to


00:16:01.360 --> 00:16:04.360
the SQL stuff, but then it opens a lot of possibilities


00:16:04.360 --> 00:16:07.480
there too.


00:16:07.480 --> 00:16:08.620
So even stuff like deploying machine learning models


00:16:08.620 --> 00:16:10.980
on the SQL infrastructure and everything.


00:16:10.980 --> 00:16:14.520
Yeah, so it's kind of the same old, same old story.


00:16:14.520 --> 00:16:19.900
Even if you're working with an ORM, sometimes you don't want


00:16:19.900 --> 00:16:22.080
to bring all that data back to make some minor change.


00:16:22.080 --> 00:16:25.120
You would just do a sort of an update statement


00:16:22.160 --> 00:16:24.160
instead of pull back 10,000 models,


00:16:24.160 --> 00:16:27.160
change something and call save 10,000 times.


00:16:27.160 --> 00:16:29.160
It's probably that kind of trade off,


00:16:29.160 --> 00:16:31.160
but it's really cool that you can bring it back


00:16:31.160 --> 00:16:33.160
into Python this way.


00:16:33.160 --> 00:16:35.160
What are you using it for?


00:16:35.160 --> 00:16:37.160
What are you interested in using it for?


00:16:37.160 --> 00:16:40.160
- Well, I think we have a lot of these ETL pipeline stuff.


00:16:40.160 --> 00:16:43.160
A lot of these, we have some data here,


00:16:43.160 --> 00:16:45.160
and then we want to basically clean it up,


00:16:45.160 --> 00:16:47.160
make sure it's all uniform, and put in a dashboard,


00:16:47.160 --> 00:16:49.160
calculate some KPIs and whatnot,


00:16:49.160 --> 00:16:51.160
so business people can see,


00:16:51.160 --> 00:16:54.760
better or making more money or not, kind of.


00:16:54.760 --> 00:16:56.640
And like a lot of the times it's just SQL, right?


00:16:56.640 --> 00:16:58.520
It's also more accessible for a lot of people.


00:16:58.520 --> 00:17:00.640
So we stick to SQL.


00:17:00.640 --> 00:17:02.060
But there are also limitations, right?


00:17:02.060 --> 00:17:06.960
But before what I've seen is people just kind of go in the UI and just execute stuff ad


00:17:06.960 --> 00:17:07.960
hoc, right?


00:17:07.960 --> 00:17:08.960
So no versioning, nothing.


00:17:08.960 --> 00:17:10.840
And I think this kind of puts everything in one place.


00:17:10.840 --> 00:17:14.200
You can even add CI/CD because the CLI tool and everything and just kind of make sure


00:17:14.200 --> 00:17:18.000
that everything goes to that versioned method, let's say.


00:17:18.000 --> 00:17:21.200
I mean, and again, yeah, if you need something more fancy,


00:17:21.200 --> 00:17:23.360
right, then you can throw some Python stuff in there.


00:17:23.360 --> 00:17:26.440
But usually we try to avoid it, to be honest.


00:17:26.440 --> 00:17:27.560
- I can imagine.


00:17:27.560 --> 00:17:29.600
Let's see here.


00:17:29.600 --> 00:17:30.440
Hold on.


00:17:30.440 --> 00:17:33.920
The models, the way you express the code,


00:17:33.920 --> 00:17:37.640
it's really nice looking for a SQL,


00:17:37.640 --> 00:17:39.480
which is surprising, right?


00:17:39.480 --> 00:17:42.840
This code you write, like with customers as select


00:17:42.840 --> 00:17:45.640
these fields from this table.


00:17:45.640 --> 00:17:48.520
- Yeah, and they also have the different macros


00:17:48.520 --> 00:17:49.960
and people can write different macros,


00:17:49.960 --> 00:17:51.520
so the describe function in Pandas,


00:17:51.520 --> 00:17:54.040
someone can just have written that and you can import that


00:17:54.040 --> 00:17:56.760
and it's really nice to share all these things as well.


00:17:56.760 --> 00:17:58.160
So, super cool.


00:17:58.160 --> 00:18:02.160
Really, really eager to give it a try, to be honest.


00:18:02.160 --> 00:18:04.720
I've been just trying to scratch that.


00:18:04.720 --> 00:18:07.720
- When's the next project that we get to use this on?


00:18:07.720 --> 00:18:08.920
- Indeed, indeed, indeed.


00:18:08.920 --> 00:18:12.120
- Yeah, all right.


00:18:12.120 --> 00:18:14.240
Brian, anything you want to add before we jump over


00:18:14.240 --> 00:18:16.780
to talking about our sponsor real quick?


00:18:16.780 --> 00:18:19.580
- Yeah, no, let's talk about our sponsor.


00:18:19.580 --> 00:18:20.900
- All right.


00:18:20.900 --> 00:18:23.100
- So today's episode of Python Bytes


00:18:23.100 --> 00:18:27.300
is brought to you by Microsoft for Startups Founders Hub.


00:18:27.300 --> 00:18:30.040
So Microsoft for Startups set out to understand


00:18:30.040 --> 00:18:31.660
what startups need to be successful


00:18:31.660 --> 00:18:33.340
and created a digital platform


00:18:33.340 --> 00:18:35.660
to help you overcome those challenges.


00:18:35.660 --> 00:18:38.740
And they came up with Microsoft for Startups Founders Hub.


00:18:38.740 --> 00:18:41.220
The Founders Hub provides all founders at any stage


00:18:41.220 --> 00:18:44.900
with free resources to help solve startup challenges.


00:18:44.900 --> 00:18:47.420
The platform provides access to expert guidance,


00:18:47.420 --> 00:18:50.600
skilled resources, mentorship, and networking connections,


00:18:50.600 --> 00:18:53.260
technology benefits, and so much more.


00:18:53.260 --> 00:18:55.360
Founders Hub is truly open to all.


00:18:55.360 --> 00:18:57.980
You don't need to be investor backed, but you can be.


00:18:57.980 --> 00:19:00.620
Speed up development with free access to GitHub


00:19:00.620 --> 00:19:02.560
and the Microsoft Cloud.


00:19:02.560 --> 00:19:04.100
You can unlock credits over time,


00:19:04.100 --> 00:19:05.860
and there's also discounts and benefits


00:19:05.860 --> 00:19:09.100
from innovative companies partnering with Founders Hub,


00:19:09.100 --> 00:19:10.940
such as OpenAI.


00:19:10.940 --> 00:19:14.260
You'll have access to their mentorship network,


00:19:14.260 --> 00:19:15.940
which includes hundreds of mentors


00:19:15.940 --> 00:19:17.980
across a range of disciplines.


00:19:17.980 --> 00:19:21.300
Need advice on marketing, fundraising, idea validation?


00:19:21.300 --> 00:19:24.260
There's tons of topics, including management and coaching.


00:19:24.260 --> 00:19:26.180
You'll be able to book one-on-one meetings


00:19:26.180 --> 00:19:29.820
with the mentors, many of whom


00:19:29.820 --> 00:19:32.180
are former founders themselves.


00:19:32.180 --> 00:19:34.580
It's no longer about who you know.


00:19:34.580 --> 00:19:36.300
Get critical support you need


00:19:36.300 --> 00:19:38.900
from Microsoft for Startup Founders Hub


00:19:38.900 --> 00:19:41.500
and make your ideas a reality today.


00:19:41.500 --> 00:19:46.500
Join the program by visiting pythonbytes.fm/foundershub2022.


00:19:46.500 --> 00:19:49.660
That link is also in your show notes.


00:19:49.660 --> 00:19:52.260
- Yep, thanks Microsoft for keeping us going strong.


00:19:52.260 --> 00:19:55.800
All right, what have I got next?


00:19:55.800 --> 00:19:59.660
This one is a chain of really cool things.


00:19:59.660 --> 00:20:03.500
So Roman Wright of Beanie fame and other things


00:20:03.500 --> 00:20:06.920
tweeted about this project


00:20:06.920 --> 00:20:10.880
that Pablo Galindo Salgado has been working on.


00:20:10.880 --> 00:20:15.160
So Pablo was the release manager for Python 3.11.


00:20:15.160 --> 00:20:17.160
It was part of the live stream of release,


00:20:17.160 --> 00:20:18.080
and that was all fun.


00:20:18.080 --> 00:20:20.200
But he also, I believe, works at Bloomberg,


00:20:20.200 --> 00:20:22.480
where they work on memory.


00:20:22.480 --> 00:20:25.600
And I think we spoke about memory quite a while back,


00:20:25.600 --> 00:20:28.720
Brian, it's a memory profiling tool.


00:20:28.720 --> 00:20:29.560
- Maybe.


00:20:29.560 --> 00:20:33.720
- Merlo, do you use profilers


00:20:33.720 --> 00:20:36.320
and that kind of stuff in your world?


00:20:36.320 --> 00:20:37.560
- Not, I haven't used much,


00:20:37.560 --> 00:20:39.960
haven't had the need to be honest, not yet.


00:20:39.960 --> 00:20:43.600
I feel like so far, there's no, try to keep it simple.


00:20:43.600 --> 00:20:48.480
- So a lot of times profilers are about performance,


00:20:48.480 --> 00:20:49.880
like how fast did this code run?


00:20:49.880 --> 00:20:52.000
And if it's slower, should I look at this loop


00:20:52.000 --> 00:20:53.600
or that loop or, you know, where do you spend your time


00:20:53.600 --> 00:20:54.440
making it faster?


00:20:54.440 --> 00:20:57.280
'Cause it's really surprising when you look at code,


00:20:57.280 --> 00:20:58.560
you're like, this part looks complicated,


00:20:58.560 --> 00:20:59.580
so that must be the slow part.


00:20:59.580 --> 00:21:01.040
Like, no, that doesn't matter.


00:21:01.040 --> 00:21:02.480
Nothing you do to that will make any difference.


00:21:02.480 --> 00:21:03.920
You gotta look over here, right?


00:21:03.920 --> 00:21:05.320
That kind of stuff.


00:21:05.320 --> 00:21:07.680
But Memray, as the name would suggest,


00:21:07.680 --> 00:21:12.480
is more about memory profiling and talking about


00:21:12.480 --> 00:21:14.640
how many of these different things have you allocated


00:21:14.640 --> 00:21:16.400
and those kinds of things.


00:21:16.400 --> 00:21:17.720
What is coming?


00:21:17.720 --> 00:21:20.160
Well, first, let me pull up,


00:21:20.160 --> 00:21:26.880
we have a pytest plugin, which is super cool.


00:21:26.880 --> 00:21:31.880
So with the pytest plugin, you can do two things now.


00:21:32.040 --> 00:21:36.280
you can say pytest --memory tests,


00:21:36.280 --> 00:21:38.840
and it'll tell you things like,


00:21:38.840 --> 00:21:41.920
you can actually set limits on how much memory


00:21:41.920 --> 00:21:44.120
can be allocated for a certain operation,


00:21:44.120 --> 00:21:45.960
and if it exceeds that, it'll say,


00:21:45.960 --> 00:21:47.640
"Oh my gosh, there's something wrong.


00:21:47.640 --> 00:21:50.560
"This thing is way overusing the memory we expected,


00:21:50.560 --> 00:21:51.760
"so that's an error."


00:21:51.760 --> 00:21:56.760
But it also gives you a cool emoji-filled summary, I guess.


00:21:56.760 --> 00:22:01.180
Like total memory allocated, the number of allocations,


00:22:01.180 --> 00:22:03.760
a histogram of allocation sizes.


00:22:03.760 --> 00:22:07.760
So like Python memory has like size classes


00:22:07.760 --> 00:22:11.680
when we've talked about it's block arena.


00:22:11.680 --> 00:22:15.200
One other term I'm forgetting


00:22:15.200 --> 00:22:17.920
that it uses to organize data structures.


00:22:17.920 --> 00:22:20.840
And then you can actually get it overall


00:22:20.840 --> 00:22:22.000
then for individual tests.


00:22:22.000 --> 00:22:24.280
And so it'll tell you like the different things


00:22:24.280 --> 00:22:29.280
that were allocated and anyway, it's pretty insane.


00:22:30.520 --> 00:22:32.760
So you can get that report, and then you can also--


00:22:32.760 --> 00:22:35.840
where's the other one?


00:22:35.840 --> 00:22:38.920
I think it's-- where was it?


00:22:38.920 --> 00:22:41.400
There's a place where you put a decorator,


00:22:41.400 --> 00:22:45.160
and you just say, on this test, if it


00:22:45.160 --> 00:22:46.880
exceeds this amount of allocation,


00:22:46.880 --> 00:22:48.320
that should fail the unit test.


00:22:48.320 --> 00:22:52.800
It's just a pytest.mark.memory limit or something.


00:22:52.800 --> 00:22:54.600
I don't think it's a limit or memory limit.


00:22:54.600 --> 00:22:56.920
I can't remember exactly what it's called.


00:22:56.920 --> 00:22:59.660
You can say, if this test exceeds one memory,


00:22:59.660 --> 00:23:01.820
one megabyte of memory allocation,


00:23:01.820 --> 00:23:03.100
then that's a failed test,


00:23:03.100 --> 00:23:04.640
which is pretty cool, right, Brian?


00:23:04.640 --> 00:23:06.240
- That's really great.


00:23:06.240 --> 00:23:09.400
So they got a, yeah, they have a limit memory decorator


00:23:09.400 --> 00:23:12.040
and a check leaks decorator.


00:23:12.040 --> 00:23:12.960
- That's the one.


00:23:12.960 --> 00:23:16.160
So the check leaks is the new thing.


00:23:16.160 --> 00:23:18.200
And so what you can do now is you can say


00:23:18.200 --> 00:23:22.960
pytest.mark.checkleaks as a decorator on your test.


00:23:22.960 --> 00:23:24.800
And if there's a memory leak in the code


00:23:24.800 --> 00:23:27.960
that runs during that, it will let you know.


00:23:27.960 --> 00:23:28.800
- Wow.


00:23:28.800 --> 00:23:31.080
- I don't know if anyone else has tried


00:23:31.080 --> 00:23:32.560
to track down memory leaks.


00:23:32.560 --> 00:23:34.960
I would rather track down like a multi-threaded


00:23:34.960 --> 00:23:36.880
race condition than a memory leak.


00:23:36.880 --> 00:23:38.560
I don't want anything to do with memory leaks.


00:23:38.560 --> 00:23:39.800
This is no fun.


00:23:39.800 --> 00:23:42.520
And so if I can do it with a decorator, let's do it.


00:23:42.520 --> 00:23:44.160
- Well, and also decorating your tests,


00:23:44.160 --> 00:23:48.160
so you're not having to modify your code at all to do this.


00:23:48.160 --> 00:23:49.400
That mean the code under test,


00:23:49.400 --> 00:23:51.120
you're modifying your test code.


00:23:51.120 --> 00:23:54.440
If at all, or it looks like it gives you some benefits,


00:23:54.440 --> 00:23:56.040
even with no modifications.


00:23:56.040 --> 00:23:57.360
It's pretty cool.


00:23:57.360 --> 00:23:58.200
- Yeah.


00:23:58.200 --> 00:23:59.760
- Maybe, pardon my ignorance here,


00:23:59.760 --> 00:24:02.760
but when would I worry about memory leaks in Python?


00:24:02.760 --> 00:24:06.620
- I think, so imagine you're writing,


00:24:06.620 --> 00:24:11.140
imagine you're writing pandas, right?


00:24:11.140 --> 00:24:13.600
And you've written a bunch of C code


00:24:13.600 --> 00:24:14.920
that's getting imported,


00:24:14.920 --> 00:24:19.720
and you know there's a memory leak in there somewhere.


00:24:19.720 --> 00:24:21.320
And it's just like, okay, well,


00:24:23.280 --> 00:24:25.360
I don't really know how to--


00:24:25.360 --> 00:24:28.780
- But then it's more like the C part is the--


00:24:28.780 --> 00:24:33.120
- You can also have memory leaks in the sense


00:24:33.120 --> 00:24:37.520
that you expected there to be no more things allocated


00:24:37.520 --> 00:24:39.160
after the function was called,


00:24:39.160 --> 00:24:41.480
but you could have signed it to a global variable


00:24:41.480 --> 00:24:44.240
or you could have stored it,


00:24:44.240 --> 00:24:45.900
held onto a reference in some way


00:24:45.900 --> 00:24:46.740
that you weren't expecting.


00:24:46.740 --> 00:24:50.560
So it's not a leak in the super traditional sense,


00:24:50.560 --> 00:24:52.840
but it could build up if you're doing something wrong


00:24:52.840 --> 00:24:57.240
Python, but certainly outside of that. So I think this is pretty cool.


00:24:57.240 --> 00:25:03.000
Really, any long running service is going to have, you're going to be concerned


00:25:03.000 --> 00:25:06.840
about it. There's a lot of Python applications that are short running, and


00:25:06.840 --> 00:25:11.080
it just cleans up after itself when it's done. So there's just cases long


00:25:11.080 --> 00:25:15.360
running services, also things like that maybe you care about things that are


00:25:15.360 --> 00:25:21.080
using large amounts of data and, and need all of the data that they can get a


00:25:21.080 --> 00:25:27.400
a hold of without wasting any, that's important as well.


00:25:27.400 --> 00:25:28.560
Makes sense.


00:25:28.560 --> 00:25:29.360
I'm also wondering--


00:25:29.360 --> 00:25:30.760
Yeah, if you're right at the limit.


00:25:30.760 --> 00:25:31.260
No, sorry.


00:25:31.260 --> 00:25:31.760
Go ahead.


00:25:31.760 --> 00:25:32.680
Go ahead.


00:25:32.680 --> 00:25:35.000
Yeah, if you're right at the limit of,


00:25:35.000 --> 00:25:38.760
I'm using 15 and 1/2 gigs, and I don't have more than that,


00:25:38.760 --> 00:25:39.760
so I need that.


00:25:39.760 --> 00:25:42.280
Or I just checked, the TalkByThon training site


00:25:42.280 --> 00:25:45.200
has been running for seven days and one hour.


00:25:45.200 --> 00:25:49.080
If it had a memory leak, even if it's 100 kilobyte here


00:25:49.080 --> 00:25:53.360
and there, it could turn out to be a big hassle.


00:25:53.360 --> 00:25:53.860
-Cool.


00:25:53.860 --> 00:25:57.400
I'm wondering if you could use this for edge device stuff,


00:25:57.400 --> 00:25:59.480
if you want to limit the memory, because we


00:25:59.480 --> 00:26:02.080
know the edge device won't have that much.


00:26:02.080 --> 00:26:04.800
-That's actually a really good point,


00:26:04.800 --> 00:26:08.280
because if you're on one of these CircuitPython little


00:26:08.280 --> 00:26:12.200
boards, they've got 256K of RAM.


00:26:12.200 --> 00:26:16.520
And that's very different than 16 gigs, isn't it?


00:26:16.520 --> 00:26:18.560
- Right, yeah, so you could test your application


00:26:18.560 --> 00:26:22.600
on a larger computer and limit how much memory you give it.


00:26:22.600 --> 00:26:23.600
So it's kind of interesting.


00:26:23.600 --> 00:26:25.000
- Right, yeah, I think you would wanna do that


00:26:25.000 --> 00:26:28.280
with the limit rather than the check leaks, but still.


00:26:28.280 --> 00:26:29.840
- Yeah, but it's the same, yeah.


00:26:29.840 --> 00:26:32.320
Cool.


00:26:32.320 --> 00:26:33.280
- Yeah, awesome.


00:26:33.280 --> 00:26:35.600
All right, let's see a couple comments from the audience.


00:26:35.600 --> 00:26:37.720
Gareth out there, hey Gareth.


00:26:37.720 --> 00:26:39.240
Says, "I ended up writing Docker containers


00:26:39.240 --> 00:26:41.080
"that swapped out every couple hours to solve it."


00:26:41.080 --> 00:26:42.640
I mean, that's actually what a lot of people do.


00:26:42.640 --> 00:26:43.480
They're like, you know what?


00:26:43.480 --> 00:26:45.140
If it runs more than 12 hours, there's a problem.


00:26:45.140 --> 00:26:47.840
So we just tell it to recycle itself.


00:26:47.840 --> 00:26:49.680
And then Madison says, this is so cool.


00:26:49.680 --> 00:26:51.180
I need memory profile line all the time


00:26:51.180 --> 00:26:52.800
with some of the data I do work with regularly.


00:26:52.800 --> 00:26:54.520
So people are digging it.


00:26:54.520 --> 00:26:56.740
- Cool.


00:26:56.740 --> 00:26:58.040
- Yeah, very cool.


00:26:58.040 --> 00:26:59.260
So thank you, Roman.


00:26:59.260 --> 00:27:01.220
I know you didn't send that in to us on purpose,


00:27:01.220 --> 00:27:03.020
but you shared it with us anyway, thanks.


00:27:03.020 --> 00:27:04.420
- Nice.


00:27:04.420 --> 00:27:05.360
- Over to you, Brian.


00:27:05.360 --> 00:27:07.560
- Okay, before I get onto the next topic,


00:27:07.560 --> 00:27:10.220
I wanna point out that Henry Schreiner,


00:27:10.220 --> 00:27:13.020
I'm gonna paraphrase him by saying,


00:27:13.020 --> 00:27:14.180
Brian, you dork.


00:27:14.180 --> 00:27:15.940
You didn't even read the article.


00:27:15.940 --> 00:27:18.340
Yes, you're right, Henry, sorry.


00:27:18.340 --> 00:27:23.340
So the new prefixes, I was showing the previous new ones


00:27:23.340 --> 00:27:26.780
in '91 when they added Yocto and Zepto.


00:27:26.780 --> 00:27:28.120
These are not the new ones.


00:27:28.120 --> 00:27:32.980
The new ones are down here with Rana, Quetta,


00:27:32.980 --> 00:27:35.300
Ronto and Quecto.


00:27:35.300 --> 00:27:39.540
Yes, the reason why those sounded familiar


00:27:39.540 --> 00:27:41.140
is because they've been around.


00:27:41.140 --> 00:27:42.780
These new ones, they're the new ones.


00:27:42.780 --> 00:27:46.620
Okay. So thanks Henry for clarifying that.


00:27:46.620 --> 00:27:51.540
but onto the next topic is, Will McGugan says,


00:27:51.540 --> 00:27:55.920
please steal my source code. so, he wrote an article,


00:27:55.920 --> 00:27:59.700
Will McGugan wrote an article said stealing open source code from textual.


00:27:59.700 --> 00:28:02.020
And he says,


00:28:02.020 --> 00:28:06.500
I would like to talk about a serious issue with free and open source software,


00:28:06.500 --> 00:28:10.780
steal the code, stealing code. You wouldn't steal a car, would you?


00:28:11.020 --> 00:28:15.060
And then actually he has this funny video that he embeds about like how,


00:28:15.060 --> 00:28:19.340
uh, like digital piracy really is like stealing. And it's a,


00:28:19.340 --> 00:28:22.260
it's sort of a funny video. but the,


00:28:22.260 --> 00:28:25.660
the comment is Israel that like you need to,


00:28:25.660 --> 00:28:30.020
you can steal code from open source projects as long as you can.


00:28:30.020 --> 00:28:35.020
So please read the MIT license or read the license to make sure that


00:28:35.020 --> 00:28:39.780
you can. And in a lot of cases you can. So like,


00:28:40.620 --> 00:28:44.260
I'm gonna give an example that I use a lot is,


00:28:44.260 --> 00:28:46.460
I'll think of something that I wanna do,


00:28:46.460 --> 00:28:48.700
like I'm interacting with a library,


00:28:48.700 --> 00:28:50.900
and maybe I don't quite get how to do that


00:28:50.900 --> 00:28:51.900
with the documentation,


00:28:51.900 --> 00:28:53.640
I can search GitHub for projects


00:28:53.640 --> 00:28:56.740
that use that library also, as an example.


00:28:56.740 --> 00:28:59.460
And so that's a way to look at other source code


00:28:59.460 --> 00:29:02.180
of how to interact with a project


00:29:02.180 --> 00:29:04.340
that maybe doesn't have the greatest documentation,


00:29:04.340 --> 00:29:05.640
you can see how it's done.


00:29:05.640 --> 00:29:08.540
- I've honestly never thought to do that,


00:29:08.540 --> 00:29:09.780
that's a great idea.


00:29:09.780 --> 00:29:12.420
I'll go look at the tests and stuff.


00:29:12.420 --> 00:29:13.260
I'm like, these tests suck.


00:29:13.260 --> 00:29:15.220
There's not a single one that shows me like


00:29:15.220 --> 00:29:17.820
this use case that I'm looking for.


00:29:17.820 --> 00:29:18.780
This is brilliant.


00:29:18.780 --> 00:29:22.760
- Some of the, yeah, I use do that a lot


00:29:22.760 --> 00:29:23.740
with pytest plugins.


00:29:23.740 --> 00:29:26.820
'Cause I look at how other plugins are testing their stuff


00:29:26.820 --> 00:29:28.740
and I'm like, oh, how do they do it?


00:29:28.740 --> 00:29:32.740
So the, but so the warning there is


00:29:32.740 --> 00:29:35.140
he's not advocating for piracy.


00:29:35.140 --> 00:29:38.540
Open source code gives you explicit permission to use it.


00:29:38.540 --> 00:29:42.280
And if you're actually just copying the whole thing,


00:29:42.280 --> 00:29:45.020
you probably should reference it and use the same license.


00:29:45.020 --> 00:29:47.300
Or if you're copying large chunks,


00:29:47.300 --> 00:29:49.100
but the MIT license, for example,


00:29:49.100 --> 00:29:51.860
says it's substantial copying.


00:29:51.860 --> 00:29:54.100
So a little bit of copying is fine.


00:29:54.100 --> 00:29:57.940
And Will says, "Textual has some cool stuff in it


00:29:57.940 --> 00:29:59.100
"that you might wanna look at."


00:29:59.100 --> 00:30:00.300
So he's got a loop.


00:30:00.300 --> 00:30:03.100
He points out some things you might wanna steal.


00:30:03.100 --> 00:30:04.420
The loop first and last.


00:30:04.420 --> 00:30:06.900
So he's got a loop iterator


00:30:06.900 --> 00:30:09.300
that he's got a couple of versions of it


00:30:09.300 --> 00:30:12.300
that will not only iterate through things,


00:30:12.300 --> 00:30:14.740
but it'll give you,


00:30:14.740 --> 00:30:17.140
it'll note which one's the first and the last.


00:30:17.140 --> 00:30:19.940
So if you need to do something cool


00:30:19.940 --> 00:30:22.660
on something different on the first and the last one,


00:30:22.660 --> 00:30:24.140
do that.


00:30:24.140 --> 00:30:26.820
He tweeted recently or tooted or whatever


00:30:26.820 --> 00:30:29.380
about the LRU cache as well.


00:30:29.380 --> 00:30:32.260
So the Python's got a built-in LRU cache,


00:30:32.260 --> 00:30:33.300
but everything's global.


00:30:33.300 --> 00:30:34.780
So you can only kind of clear,


00:30:34.780 --> 00:30:37.020
There's limits on how you can interact with it.


00:30:37.020 --> 00:30:40.340
So he has a more flexible LRU cache.


00:30:40.340 --> 00:30:42.860
He's got a color class that looks pretty cool


00:30:42.860 --> 00:30:45.960
that you can convert to different color representations.


00:30:45.960 --> 00:30:47.000
That's pretty neat.


00:30:47.000 --> 00:30:48.660
And then, you know, he's been working


00:30:48.660 --> 00:30:51.020
on a ton of geometry stuff, 2D geometry.


00:30:51.020 --> 00:30:53.060
So he's like, you might want to use this


00:30:53.060 --> 00:30:55.180
for whatever 2D geometry you're using.


00:30:55.180 --> 00:30:56.780
So here's there.


00:30:56.780 --> 00:30:59.180
So kind of cool reminder that open source,


00:30:59.180 --> 00:31:00.500
one of the benefits of open source


00:31:00.500 --> 00:31:03.660
is you get to see the source and learn from people.


00:31:03.660 --> 00:31:05.660
So I like it.


00:31:05.660 --> 00:31:06.820
I love your idea.


00:31:06.820 --> 00:31:09.220
- You've never done that.


00:31:09.220 --> 00:31:10.580
I'm like, it might dance.


00:31:10.580 --> 00:31:11.900
I just can't figure this out.


00:31:11.900 --> 00:31:13.700
Oh, how are other people using it?


00:31:13.700 --> 00:31:14.540
So yeah.


00:31:14.540 --> 00:31:17.100
- I just get frustrated and go into a new library.


00:31:17.100 --> 00:31:17.920
This one sucks.


00:31:17.920 --> 00:31:18.760
I can't do this.


00:31:18.760 --> 00:31:19.580
I'm gonna find another one.


00:31:19.580 --> 00:31:20.420
- It's not good enough.


00:31:20.420 --> 00:31:22.060
- Merlo, are you an open source thief?


00:31:22.060 --> 00:31:23.420
Do you do this kind of stuff?


00:31:23.420 --> 00:31:24.540
- I have to admit, yes.


00:31:24.540 --> 00:31:25.700
Yes, I am.


00:31:25.700 --> 00:31:27.980
Stack Overflow thief, open source thief.


00:31:27.980 --> 00:31:30.900
Is this especially in the early, early days, right?


00:31:30.900 --> 00:31:33.300
But I think with the rich stuff too,


00:31:33.300 --> 00:31:35.560
it's very inviting for you to steal code


00:31:35.560 --> 00:31:37.980
'cause even on the rich package, right?


00:31:37.980 --> 00:31:41.700
Like if you do Python-m rich table or whatever,


00:31:41.700 --> 00:31:43.140
you always show some really nice stuff


00:31:43.140 --> 00:31:45.020
on the terminal, right?


00:31:45.020 --> 00:31:46.860
And I was like, how does he do that?


00:31:46.860 --> 00:31:49.460
And, or like, I think for every component,


00:31:49.460 --> 00:31:51.340
he had a little demo that you can just run.


00:31:51.340 --> 00:31:53.420
And it's very, it's very tempting.


00:31:53.420 --> 00:31:55.740
Even if you didn't want people to steal stuff from him,


00:31:55.740 --> 00:31:57.040
I feel like you have a hard time


00:31:57.040 --> 00:31:59.320
just keeping the thieves away, you know?


00:31:59.320 --> 00:32:01.060
- Yeah. - Yeah.


00:32:01.060 --> 00:32:02.700
Yeah, very cool.


00:32:02.700 --> 00:32:03.980
And funny too.


00:32:03.980 --> 00:32:04.480
I like it.


00:32:04.480 --> 00:32:06.300
Good job.


00:32:06.300 --> 00:32:08.980
Good job, Will.


00:32:08.980 --> 00:32:10.180
Where are we at now?


00:32:10.180 --> 00:32:13.980
Off to Marlow's final item?


00:32:13.980 --> 00:32:14.480
Yes.


00:32:14.480 --> 00:32:15.940
This one I had not heard of either,


00:32:15.940 --> 00:32:17.420
and it looks pretty interesting.


00:32:17.420 --> 00:32:21.140
Yeah, I mean, it's one of the things that I saw.


00:32:21.140 --> 00:32:23.100
I was like, yeah, this makes so much sense.


00:32:23.100 --> 00:32:25.060
How come I didn't think of this before?


00:32:25.060 --> 00:32:26.780
But this is Shed.


00:32:26.780 --> 00:32:27.860
This is a podcast, right?


00:32:27.860 --> 00:32:28.380
So maybe--


00:32:28.380 --> 00:32:30.860
[LAUGHTER]


00:32:30.860 --> 00:32:35.460
I think it's related to bike shedding, shed your legacy code.


00:32:35.460 --> 00:32:38.260
So it's like a superset of black.


00:32:38.260 --> 00:32:40.380
They call it black++ here.


00:32:40.380 --> 00:32:43.780
So they say here, maximally opinionated auto-formatting


00:32:43.780 --> 00:32:44.500
tool.


00:32:44.500 --> 00:32:48.100
So it's all about convention over configuration,


00:32:48.100 --> 00:32:52.180
which is also something that I can subscribe to.


00:32:52.180 --> 00:32:54.940
They have no configuration options.


00:32:54.940 --> 00:32:57.660
But basically, it's a bundling of a lot of tools.


00:32:57.660 --> 00:32:59.820
So they have black here, but they also


00:32:59.820 --> 00:33:03.700
have I sort and with the profile black so it doesn't clash.


00:33:03.700 --> 00:33:04.860
They also have PyUpgrade,


00:33:04.860 --> 00:33:06.900
which I think you guys mentioned a couple of times, right?


00:33:06.900 --> 00:33:08.980
- Yeah, we did. - And Autoflake as well.


00:33:08.980 --> 00:33:11.340
Autoflake I didn't know actually before,


00:33:11.340 --> 00:33:15.700
but basically it removes unused imports


00:33:15.700 --> 00:33:18.060
and unused variables from your Python code.


00:33:18.060 --> 00:33:19.740
So it's kind of like, yeah, that's all I wanted.


00:33:19.740 --> 00:33:22.240
I was like, you know, I wish I had this last week.


00:33:22.240 --> 00:33:23.700
(laughs)


00:33:23.700 --> 00:33:24.980
- There you go, yeah.


00:33:24.980 --> 00:33:26.900
But yeah, it's a one-stop shop


00:33:26.900 --> 00:33:29.040
and even do like a black in docs, right?


00:33:29.040 --> 00:33:31.080
So if you have doc strings or markdown or everything,


00:33:31.080 --> 00:33:33.560
you will take that, it will black format that for you.


00:33:33.560 --> 00:33:36.200
So I was like, yeah, this is what I wanted.


00:33:36.200 --> 00:33:38.400
- Okay, hold on, black in docs.


00:33:38.400 --> 00:33:39.520
This is new to me too.


00:33:39.520 --> 00:33:40.520
All right.


00:33:40.520 --> 00:33:41.780
- Yeah, let's see.


00:33:41.780 --> 00:33:47.880
- So this is black on Python blocks, sample code blocks.


00:33:47.880 --> 00:33:51.040
- Yes, so if you have a restructured text, markdown,


00:33:51.040 --> 00:33:54.360
even doc strings, it will format that for you.


00:33:54.360 --> 00:33:57.720
- Oh, like you like blackening your readme for instance.


00:33:57.720 --> 00:33:59.800
So yes, yes, yes.


00:33:59.800 --> 00:34:02.080
Oh, OK.


00:34:02.080 --> 00:34:03.600
Yeah, this is good.


00:34:03.600 --> 00:34:04.160
Indeed.


00:34:04.160 --> 00:34:07.240
So I have some stuff to talk about at the very end,


00:34:07.240 --> 00:34:09.320
just a little bit about blogging and writing


00:34:09.320 --> 00:34:12.240
and some platforms and stuff.


00:34:12.240 --> 00:34:13.440
And that's all in Markdown.


00:34:13.440 --> 00:34:16.520
Like I could run this against all of my code samples


00:34:16.520 --> 00:34:21.360
on my blog to basically auto format all code in the blog.


00:34:21.360 --> 00:34:22.240
That would be cool.


00:34:22.240 --> 00:34:23.040
Yeah.


00:34:23.040 --> 00:34:24.840
Yes, exciting.


00:34:24.840 --> 00:34:27.120
Next time I write a book, I'm totally going to use that.


00:34:27.120 --> 00:34:29.640
Yeah, or if you're doing a book. Yeah, I mean, absolutely.


00:34:29.640 --> 00:34:36.400
So I literally just like, yesterday, the day before I was


00:34:36.400 --> 00:34:40.520
cleaning up some code, I finally got, you know, I kind of I don't


00:34:40.520 --> 00:34:44.040
do it clean the whole time I get it to work. And then I like, you


00:34:44.040 --> 00:34:47.080
know, then I look at what I did stupid. And there's there might


00:34:47.080 --> 00:34:50.320
be some imports laying around that I thought I needed. Because


00:34:50.320 --> 00:34:53.160
you add an import, and then you take that code out, but you do


00:34:53.160 --> 00:34:56.320
you sometimes forget to take the import out. So I ran black on


00:34:56.320 --> 00:34:57.800
and everything, of course.


00:34:57.800 --> 00:35:00.800
And then I run Flake 8 and I'm getting errors.


00:35:00.800 --> 00:35:04.000
I'm like, "Shoot, why didn't Black just take those out?"


00:35:04.000 --> 00:35:07.840
So now I've got Shed and it'll take those out for me.


00:35:07.840 --> 00:35:08.680
- It does it all, right?


00:35:08.680 --> 00:35:09.680
Like it's great.


00:35:09.680 --> 00:35:10.520
'Cause maybe it's the same, right?


00:35:10.520 --> 00:35:11.360
Like you run Flake 8, it's like,


00:35:11.360 --> 00:35:12.680
"Ah, yeah, unused variable.


00:35:12.680 --> 00:35:14.600
"Ah, okay, they have to go there one by one."


00:35:14.600 --> 00:35:15.440
You know, it's like,


00:35:15.440 --> 00:35:17.980
it feels like there should be a nicer way, right?


00:35:17.980 --> 00:35:20.760
- Yeah, I mean, you have to pay attention to that


00:35:20.760 --> 00:35:25.240
'cause your unused variable might be a typo or something.


00:35:25.240 --> 00:35:28.400
You might think you're using it, but--


00:35:28.400 --> 00:35:29.240
- That's true.


00:35:29.240 --> 00:35:31.680
- Yeah, or it's like a global variable module


00:35:31.680 --> 00:35:33.240
supposed to share with something else,


00:35:33.240 --> 00:35:34.960
and it's a library, but in general,


00:35:34.960 --> 00:35:36.320
I mean, you could probably put like a hash,


00:35:36.320 --> 00:35:37.800
you know, QA or something on it.


00:35:37.800 --> 00:35:41.640
- Well, I mean, yeah, and also you're testing,


00:35:41.640 --> 00:35:44.340
so your test will catch it if you delete too much, so.


00:35:44.340 --> 00:35:47.720
- Yeah.


00:35:47.720 --> 00:35:48.980
All right, well, really, really good one.


00:35:48.980 --> 00:35:50.040
Take your code out to the shed


00:35:50.040 --> 00:35:52.040
and whip it into shape behind the shed.


00:35:52.040 --> 00:35:53.880
- That's it.


00:35:53.880 --> 00:35:54.720
- All right.


00:35:54.720 --> 00:35:57.520
- All right, well, Brian, what else we got, extras?


00:35:57.520 --> 00:35:59.520
- I got some extras, you got some extras.


00:35:59.520 --> 00:36:01.120
Who should go first?


00:36:01.120 --> 00:36:02.160
- You go first.


00:36:02.160 --> 00:36:05.280
- Okay, well, the thing that I've been working on


00:36:05.280 --> 00:36:08.720
is by test check and I finally got,


00:36:08.720 --> 00:36:10.680
and I've been talking about this for like a month


00:36:10.680 --> 00:36:14.560
'cause I've been slowly pulling this into shape.


00:36:14.560 --> 00:36:17.480
It's almost a complete, not really a rewrite,


00:36:17.480 --> 00:36:18.920
but I moved everything around


00:36:18.920 --> 00:36:20.560
and the code's a lot easier to read


00:36:20.560 --> 00:36:22.160
and so it makes me happier.


00:36:22.160 --> 00:36:24.080
And so it makes me happier.


00:36:24.080 --> 00:36:26.000
And I also changed the API.


00:36:26.000 --> 00:36:28.440
So I wanted to mention to everybody


00:36:28.440 --> 00:36:31.080
that you can either use,


00:36:31.080 --> 00:36:33.840
so you can either use from pytest check,


00:36:33.840 --> 00:36:37.480
import check to get this check object,


00:36:37.480 --> 00:36:40.360
or you can stick the check object as a fixture.


00:36:40.360 --> 00:36:42.960
And either way you get access to everything in the library.


00:36:42.960 --> 00:36:44.200
That's the only thing you have to do.


00:36:44.200 --> 00:36:45.560
And for people unfamiliar,


00:36:45.560 --> 00:36:48.980
pytest check is a library that allows you


00:36:48.980 --> 00:36:51.040
to have multiple failures per test.


00:36:51.040 --> 00:36:56.720
I, you know, normally the recommendation is try to fail on one thing, but sometimes you


00:36:56.720 --> 00:36:57.720
need lots of data.


00:36:57.720 --> 00:37:00.700
And I just threw in a little example that uses both.


00:37:00.700 --> 00:37:05.520
So if like it's using HTTPS to grab, grab the status code.


00:37:05.520 --> 00:37:09.520
And as long as the status goes 200, then I can check a whole bunch of stuff.


00:37:09.520 --> 00:37:12.680
I can check to make sure the redirect and encoding is right.


00:37:12.680 --> 00:37:17.960
And check for some, some stuff inside the, I mean, you, you, these could be multiple


00:37:17.960 --> 00:37:22.840
tests. But if it really is, you're checking multiple parts of things. And for scientific


00:37:22.840 --> 00:37:27.680
work that I'm in measurement work that I do, I'm often checking like tons of aspects of


00:37:27.680 --> 00:37:32.880
a waveform. And it's really just making sure the waveforms right and that rightness is


00:37:32.880 --> 00:37:39.720
multiple checks. So use that. Anyway, I didn't intend to break anybody, but I did break Brian's


00:37:39.720 --> 00:37:45.080
skin. So Brian came up at the beginning of the article. But he tagged me in a GitHub


00:37:45.080 --> 00:37:50.560
issue on his project and I looked at it and I'm like, oh, I didn't intend to break that.


00:37:50.560 --> 00:37:57.200
So I fixed it this morning. So hopefully if anybody gets broken by this, I was not intending


00:37:57.200 --> 00:38:03.360
to break anybody. Just let me know and I'll try to fix it. So that looks great. How about


00:38:03.360 --> 00:38:11.400
you? Merlo? I know you have some as well. It goes well. So I don't go too long. Maybe.


00:38:11.400 --> 00:38:16.440
Yeah, I feel like I should have opened the, I didn't have the link up here, but talking


00:38:16.440 --> 00:38:22.400
about breaking stuff, Flakate is not on GitLab anymore.


00:38:22.400 --> 00:38:26.720
And I actually didn't have issues with that because with pre-commit, right, you have to


00:38:26.720 --> 00:38:27.720
specify the repo.


00:38:27.720 --> 00:38:31.960
I already was on GitHub, but I actually heard from people, some people that they heard a


00:38:31.960 --> 00:38:35.200
lot of noise that Flakate is not on GitLab anymore.


00:38:35.200 --> 00:38:38.720
And then there was also this video from Anthony that is maintaining, right, pre-commit and


00:38:38.720 --> 00:38:39.720
Flakate.


00:38:39.720 --> 00:38:44.680
was explaining a bit 'cause why was the motivation from going from GitLab to GitHub?


00:38:44.680 --> 00:38:50.200
And yeah, like what's relatable is that like sometimes you break people's code, but it's


00:38:50.200 --> 00:38:51.640
like it's not intention, right?


00:38:51.640 --> 00:38:54.120
But sometimes people can get very heated over these things.


00:38:54.120 --> 00:39:00.040
So yeah, just maybe public service announcement, you know, change your your Git repo to GitHub


00:39:00.040 --> 00:39:03.040
now for using Flakegate as a pre-commit.


00:39:03.040 --> 00:39:04.040
Yeah.


00:39:04.040 --> 00:39:06.040
You also had mastodon.py, right?


00:39:06.040 --> 00:39:08.360
Yes, yes, yes, that I did.


00:39:08.360 --> 00:39:09.740
I just, sorry, I flipped the order


00:39:09.740 --> 00:39:12.700
'cause I thought it was a segue there.


00:39:12.700 --> 00:39:16.180
- Yeah, yeah, yeah, I wish I knew about this


00:39:16.180 --> 00:39:17.420
like a week ago or so.


00:39:17.420 --> 00:39:18.260
That would have been awesome.


00:39:18.260 --> 00:39:21.260
- Yeah, you covered a toot, I think, right?


00:39:21.260 --> 00:39:22.580
- Yes, we covered toot, that's right.


00:39:22.580 --> 00:39:26.500
- Yeah, yeah, so this is, to be very honest,


00:39:26.500 --> 00:39:28.580
I wasn't the one that found this, it was my boss,


00:39:28.580 --> 00:39:31.140
so shout out to Bart if you're listening right now.


00:39:31.140 --> 00:39:32.820
But this is basically just a wrapper


00:39:32.820 --> 00:39:34.580
around the Mastodon API, right?


00:39:34.580 --> 00:39:35.540
So you don't have to do requests,


00:39:35.540 --> 00:39:37.480
you can usually have like a nice client library there


00:39:37.480 --> 00:39:38.320
to do all these things.


00:39:38.320 --> 00:39:40.600
So if you wanna play around, create some bots,


00:39:40.600 --> 00:39:42.960
you know, whatever, then yeah,


00:39:42.960 --> 00:39:46.800
there's a nice convenient package now for you to do it.


00:39:46.800 --> 00:39:47.640
- Wow, this is really cool.


00:39:47.640 --> 00:39:48.640
And it has, you know what,


00:39:48.640 --> 00:39:50.700
documentations that say what functions it has.


00:39:50.700 --> 00:39:51.540
I love it.


00:39:51.540 --> 00:39:52.360
(laughing)


00:39:52.360 --> 00:39:53.480
- Documentation?


00:39:53.480 --> 00:39:55.520
To treat the code.


00:39:55.520 --> 00:39:56.360
- It doesn't have to be much,


00:39:56.360 --> 00:39:58.920
like the seven or eight lines of code that are in the readme,


00:39:58.920 --> 00:40:00.340
like gives you a really good boost,


00:40:00.340 --> 00:40:02.280
but it lets you register your app,


00:40:02.280 --> 00:40:04.660
which is one of the things if you go to the website,


00:40:04.660 --> 00:40:06.280
it'll show you which apps are registered


00:40:06.280 --> 00:40:08.800
for your access keys on Mastodon,


00:40:08.800 --> 00:40:11.680
but it won't let you create one on the website.


00:40:11.680 --> 00:40:14.040
So here's like a simple create app,


00:40:14.040 --> 00:40:16.540
and just give it your instance name


00:40:16.540 --> 00:40:19.600
and what file to save the access tokens over to,


00:40:19.600 --> 00:40:21.000
and boom, you're good to go.


00:40:21.000 --> 00:40:25.480
- Yeah, have you guys already done stuff with Mastodon?


00:40:25.480 --> 00:40:27.880
- Yeah, you know, on the stream deck,


00:40:27.880 --> 00:40:29.240
the thing that controls the stream,


00:40:29.240 --> 00:40:31.680
I already wrote that thing where I push the one button,


00:40:31.680 --> 00:40:34.360
it sends out the message automatically


00:40:34.360 --> 00:40:36.040
that this live stream is starting,


00:40:36.040 --> 00:40:38.600
And yeah, that uses a little bit of toot


00:40:38.600 --> 00:40:42.600
and mostly just a straight API with HTTPX.


00:40:42.600 --> 00:40:46.440
But if I'd known about this, I would have used it.


00:40:46.440 --> 00:40:47.440
Now we know.


00:40:47.440 --> 00:40:48.840
Yeah, no, thanks for sharing that.


00:40:48.840 --> 00:40:50.940
Anything else you want to share before we move on?


00:40:50.940 --> 00:40:52.400
Yes.


00:40:52.400 --> 00:40:53.820
So there are a couple more things.


00:40:53.820 --> 00:40:56.920
But this one, this is the Brazilian [INAUDIBLE]


00:40:56.920 --> 00:40:58.040
that couldn't resist.


00:40:58.040 --> 00:40:59.040
The World Cup started.


00:40:59.040 --> 00:40:59.620
I don't know.


00:40:59.620 --> 00:41:02.360
Are you guys soccer fans or not at all?


00:41:02.360 --> 00:41:04.600
So we've a fun soccer team here.


00:41:04.600 --> 00:41:09.560
I go see with the kids and stuff in town.


00:41:09.560 --> 00:41:12.080
So I'm also in machine learning, so a lot of data.


00:41:12.080 --> 00:41:15.480
And this time of the year, there's a lot of like, oh, yeah, the AI models are predicting


00:41:15.480 --> 00:41:16.800
this, this, and this.


00:41:16.800 --> 00:41:17.880
This one is one from Oxford.


00:41:17.880 --> 00:41:20.120
So I just wanted to give a quick shout out here.


00:41:20.120 --> 00:41:22.560
So they have a video on YouTube as well, which is cool.


00:41:22.560 --> 00:41:23.560
They explain the math.


00:41:23.560 --> 00:41:27.200
And I will go on a limp here and say they use Python, because they even mention Matplotlib


00:41:27.200 --> 00:41:28.320
and whatnot.


00:41:28.320 --> 00:41:31.600
But this is basically just a big excuse to say that they predict Brazil to win.


00:41:31.600 --> 00:41:34.400
So if this doesn't happen, it's all rigged.


00:41:34.400 --> 00:41:37.200
The math supports this.


00:41:37.200 --> 00:41:39.520
So Brazil must win this World Cup.


00:41:39.520 --> 00:41:40.560
And anything that is not there, I'm


00:41:40.560 --> 00:41:42.060
going to be extremely disappointed.


00:41:42.060 --> 00:41:46.600
This is really cool.


00:41:46.600 --> 00:41:49.160
People are always looking for realistic examples


00:41:49.160 --> 00:41:51.840
to learn and explore libraries and tools.


00:41:51.840 --> 00:41:54.280
And if you're into soccer and you care about the World Cup,


00:41:54.280 --> 00:41:55.560
this is great.


00:41:55.560 --> 00:41:58.120
Yeah, I think if you-- yeah.


00:41:58.120 --> 00:41:59.280
People are very creative.


00:41:59.280 --> 00:42:01.440
I feel like there's a lot of uses for it.


00:42:01.440 --> 00:42:02.760
- Well, I'm sure this will happen


00:42:02.760 --> 00:42:05.080
'cause there's absolutely no corruption in soccer.


00:42:05.080 --> 00:42:06.240
- Yeah, yeah, for sure.


00:42:06.240 --> 00:42:09.420
Yeah, not at all, not at all.


00:42:09.420 --> 00:42:11.720
- Cool.


00:42:11.720 --> 00:42:15.320
- Should I just keep going or you wanna take over?


00:42:15.320 --> 00:42:16.360
- You got more items?


00:42:16.360 --> 00:42:17.200
Yeah, keep going.


00:42:17.200 --> 00:42:18.040
- I have--


00:42:18.040 --> 00:42:19.260
- Take a step on the list.


00:42:19.260 --> 00:42:20.760
- I have two more, sorry.


00:42:20.760 --> 00:42:22.520
I know you said I could have more than two.


00:42:22.520 --> 00:42:23.360
So I just went--


00:42:23.360 --> 00:42:26.440
- You can have, that's what this whole section is about.


00:42:26.440 --> 00:42:29.160
- One, so for me as a data scientist


00:42:29.160 --> 00:42:30.160
or machine learning engineer,


00:42:30.160 --> 00:42:31.240
we use a lot of notebooks, right?


00:42:31.240 --> 00:42:33.000
and I think they have their place in data science,


00:42:33.000 --> 00:42:35.660
but there are some tools that don't play


00:42:35.660 --> 00:42:36.840
very nicely with it, right?


00:42:36.840 --> 00:42:39.360
And I think in Git diffs or PRs,


00:42:39.360 --> 00:42:41.620
they don't play so nicely, right?


00:42:41.620 --> 00:42:45.160
So this is, I think it's public preview, I wanna say,


00:42:45.160 --> 00:42:46.400
but I haven't actually seen this,


00:42:46.400 --> 00:42:49.880
but now GitHub is gonna start supporting notebook diffs.


00:42:49.880 --> 00:42:51.240
So if you have a pull request,


00:42:51.240 --> 00:42:53.920
they're gonna have a nicer rendering of the notebook here,


00:42:53.920 --> 00:42:55.520
and you can actually see what the differences are.


00:42:55.520 --> 00:42:59.120
And I think before there was a tool called ReviewNB


00:42:59.120 --> 00:43:00.640
that you could add to GitHub.


00:43:00.640 --> 00:43:05.520
But yeah, now they're just gonna start supporting it.


00:43:05.520 --> 00:43:06.780
So I haven't seen how it looks,


00:43:06.780 --> 00:43:08.500
but I'm pretty excited about this too.


00:43:08.500 --> 00:43:10.080
One less headache for me.


00:43:10.080 --> 00:43:10.920
- Yeah, that's excellent.


00:43:10.920 --> 00:43:12.180
'Cause before the diff would just be like,


00:43:12.180 --> 00:43:13.720
here's the diff of the JSON file.


00:43:13.720 --> 00:43:16.100
You're like, no, that's not what I was like.


00:43:16.100 --> 00:43:18.340
- And also JSON is just JSON, like just key value.


00:43:18.340 --> 00:43:20.680
So if you just change the order of some keys,


00:43:20.680 --> 00:43:22.340
it's just like, yeah, you have a lot of changes,


00:43:22.340 --> 00:43:23.960
but it's not, you don't care.


00:43:23.960 --> 00:43:26.520
- Yeah, oh, this looks really useful.


00:43:26.520 --> 00:43:30.480
- Yeah, and maybe one last, if that's okay.


00:43:30.480 --> 00:43:31.320
- Yeah.


00:43:31.320 --> 00:43:33.280
- Let me just pull this here.


00:43:33.280 --> 00:43:34.320
This is Lancer.


00:43:34.320 --> 00:43:35.480
So it's another CLI tool.


00:43:35.480 --> 00:43:37.560
I talked about linting before, right?


00:43:37.560 --> 00:43:39.800
So this is another kind of linting.


00:43:39.800 --> 00:43:40.640
And I say kind of 'cause--


00:43:40.640 --> 00:43:41.560
- What's a linting?


00:43:41.560 --> 00:43:43.520
- So, you know--


00:43:43.520 --> 00:43:48.400
- Some definition of linting or clean up, yeah.


00:43:48.400 --> 00:43:50.820
- So this is like black, almost like black,


00:43:50.820 --> 00:43:51.800
but it's the opposite.


00:43:51.800 --> 00:43:53.460
So instead of making your code look nice,


00:43:53.460 --> 00:43:56.720
it would just make it like a hideous, but working mess,


00:43:56.720 --> 00:43:57.560
right?


00:43:57.560 --> 00:43:59.080
So these are some of the features.


00:43:59.080 --> 00:44:01.480
It turns all your comments to pitbull lyrics


00:44:01.480 --> 00:44:04.400
or something safe for work, if you want.


00:44:04.400 --> 00:44:05.800
It takes all your variable names


00:44:05.800 --> 00:44:08.380
and mix into like animal sounds


00:44:08.380 --> 00:44:10.580
and horribly similar looking characters.


00:44:10.580 --> 00:44:15.580
So like bark underscore bark underscore 0 0 0 0.


00:44:15.580 --> 00:44:17.840
It adds white spaces.


00:44:17.840 --> 00:44:20.580
It adds completely irrelevant comments


00:44:20.580 --> 00:44:23.720
and the code still runs after these improvements.


00:44:23.720 --> 00:44:24.760
- I love it.


00:44:24.760 --> 00:44:28.840
- You have here some comments and everything.


00:44:28.840 --> 00:44:30.880
So before, like nicely formatted,


00:44:30.880 --> 00:44:33.560
and then afterwards you see some comments like,


00:44:33.560 --> 00:44:35.360
but I've been, but I boom, you know,


00:44:35.360 --> 00:44:37.160
there's nothing like Miami heat,


00:44:37.160 --> 00:44:39.320
some alpha characters in your variable name.


00:44:39.320 --> 00:44:41.360
So pretty, pretty good stuff.


00:44:41.360 --> 00:44:44.080
Again, I must say I haven't used this,


00:44:44.080 --> 00:44:47.040
but this is a tool that I'm not as excited to use.


00:44:47.040 --> 00:44:52.560
- I mean, there's always times that you need


00:44:52.560 --> 00:44:54.760
to send out your code to different places


00:44:54.760 --> 00:44:58.520
and you would rather share it less than more.


00:44:58.520 --> 00:45:03.620
thinking of like if you make a desktop app and you got to send


00:45:03.620 --> 00:45:06.200
out the code for that or whatever, and you would want to


00:45:06.200 --> 00:45:08.760
obfuscate it, you want to make it harder for people to just


00:45:08.760 --> 00:45:11.760
pick it up and like do so you could hit it with this. They'd


00:45:11.760 --> 00:45:14.240
be like, yeah, no, no, we're just now we're just not doing


00:45:14.240 --> 00:45:14.360
that.


00:45:14.360 --> 00:45:17.360
So my favorite one is my favorite ones on the screen is


00:45:17.360 --> 00:45:21.800
the adding obvious comments, like setting the value of some


00:45:23.920 --> 00:45:30.920
Like, that wasn't in the original.


00:45:30.920 --> 00:45:34.120
And it's just funny that I mean, that's actually not gibberish.


00:45:34.120 --> 00:45:35.200
It's just useless.


00:45:35.200 --> 00:45:40.760
Yeah, it's it's really good.


00:45:40.760 --> 00:45:45.000
The comments out in the live stream are really great as well.


00:45:45.000 --> 00:45:46.200
People are enjoying it.


00:45:46.200 --> 00:45:47.960
One of them is it's great for Twitter employees.


00:45:47.960 --> 00:45:51.440
You can maximize your lines of code for reviewers that's coming up.


00:45:52.000 --> 00:45:55.040
then you just print it out and you take it, and sidebar.


00:45:55.040 --> 00:45:57.920
Like if somebody says print out my code so we can review it,


00:45:57.920 --> 00:46:01.720
they're not equipped to review the code


00:46:01.720 --> 00:46:02.800
that you may have written.


00:46:02.800 --> 00:46:05.760
If the word print involves in evaluating code, no.


00:46:05.760 --> 00:46:07.600
All right, I don't think so.


00:46:07.600 --> 00:46:10.280
So leave that where that is.


00:46:10.280 --> 00:46:12.280
But you could put this on top of like, yeah,


00:46:12.280 --> 00:46:14.000
I'm kind of funky when I write codes.


00:46:14.000 --> 00:46:15.040
It's a little different.


00:46:15.040 --> 00:46:18.480
Let's get used to-- yeah, I just-- it's a form.


00:46:18.480 --> 00:46:19.600
It's a code form.


00:46:19.600 --> 00:46:21.520
Oink, oink, oink.


00:46:21.520 --> 00:46:24.120
You can have two sets of books, kind of.


00:46:24.120 --> 00:46:27.120
You got your real repo, and then you use this


00:46:27.120 --> 00:46:31.200
to put it into the actual one that you submit.


00:46:31.200 --> 00:46:32.520
And you're like, I understand it.


00:46:32.520 --> 00:46:34.320
I don't know what your problem is.


00:46:34.320 --> 00:46:35.600
It works on my machine.


00:46:35.600 --> 00:46:42.240
I kind of want to run this on a large code base.


00:46:42.240 --> 00:46:44.040
Something really complicated.


00:46:44.040 --> 00:46:47.480
Squash all the commits, force push.


00:46:47.480 --> 00:46:49.120
Like textual.


00:46:49.120 --> 00:46:52.020
- I'm gonna release it as textual oink oink or something.


00:46:52.020 --> 00:46:53.960
(laughing)


00:46:53.960 --> 00:46:55.000
- Yes, I love it.


00:46:55.000 --> 00:46:57.680
- Cool.


00:46:57.680 --> 00:46:59.360
- All right, well, this was a good find.


00:46:59.360 --> 00:47:00.200
Awesome, thanks.


00:47:00.200 --> 00:47:01.660
All right, I'll make mine quick here.


00:47:01.660 --> 00:47:03.160
So a new YouTube video,


00:47:03.160 --> 00:47:06.680
I talked about how you can install the Mastodon web app


00:47:06.680 --> 00:47:11.240
on your iPad as a native app, as well as on your desktop.


00:47:11.240 --> 00:47:15.760
So if you're doing that kind of stuff, not there.


00:47:17.480 --> 00:47:20.420
Basically, they just released Mastodon 4


00:47:20.420 --> 00:47:21.500
like a couple days ago,


00:47:21.500 --> 00:47:24.400
and all the apps don't have features like edit


00:47:24.400 --> 00:47:26.520
and some of the other features that are there


00:47:26.520 --> 00:47:28.240
because they're like months behind.


00:47:28.240 --> 00:47:30.480
And so if you install the web app as an app,


00:47:30.480 --> 00:47:31.320
then guess what?


00:47:31.320 --> 00:47:32.560
It looks like an app, it acts like an app,


00:47:32.560 --> 00:47:35.840
but it has like zero latency.


00:47:35.840 --> 00:47:38.260
So as soon as something is released on the website,


00:47:38.260 --> 00:47:39.240
you get it, which is pretty cool.


00:47:39.240 --> 00:47:41.040
So people can check that out.


00:47:41.040 --> 00:47:43.800
I saw Madison in the audience,


00:47:43.800 --> 00:47:51.800
sent over a call for proposals or calling all Pythonistas, if you will, for PyCascades. So


00:47:51.800 --> 00:47:57.720
PyCascades is back in person this year in Vancouver, BC. It goes from Vancouver to Seattle


00:47:57.720 --> 00:48:05.880
to Portland and cycles through that there. But so this year, it's going to be in Vancouver. So if


00:48:05.880 --> 00:48:11.240
you want to go up there and talk, be part of the conference, good conference. So call for proposals


00:48:11.240 --> 00:48:14.320
- Yeah, but they're not open for very much longer.


00:48:14.320 --> 00:48:16.480
So jump on that.


00:48:16.480 --> 00:48:18.060
I don't remember what the date is, but.


00:48:18.060 --> 00:48:21.240
- It closes Wednesday 30th.


00:48:21.240 --> 00:48:22.080
So what is that?


00:48:22.080 --> 00:48:23.200
- Yeah, eight days.


00:48:23.200 --> 00:48:24.040
- Yeah, next Wednesday.


00:48:24.040 --> 00:48:24.940
Yeah, eight days.


00:48:24.940 --> 00:48:29.480
And Madison, and if you're in the audience, thank you.


00:48:29.480 --> 00:48:30.820
Is put in person this time,


00:48:30.820 --> 00:48:33.160
we really value the first time speakers


00:48:33.160 --> 00:48:34.520
in a typical talks.


00:48:34.520 --> 00:48:37.360
So get out there and put yourself out there


00:48:37.360 --> 00:48:38.980
and get into public speaking.


00:48:38.980 --> 00:48:39.880
It's not a huge conference,


00:48:39.880 --> 00:48:43.000
But it's big enough, a couple hundred people,


00:48:43.000 --> 00:48:46.320
300, 400 people, fun time.


00:48:46.320 --> 00:48:49.680
This is just really quick and fun.


00:48:49.680 --> 00:48:51.920
If you're on a Mac, you're not as


00:48:51.920 --> 00:48:54.320
likely to get viruses sent your way that we'd actually


00:48:54.320 --> 00:48:57.880
be able to do something like 90% of viruses


00:48:57.880 --> 00:48:59.000
are written for Windows.


00:48:59.000 --> 00:49:01.880
But what's a really interesting fact, I just--


00:49:01.880 --> 00:49:06.120
if you do have a Mac, it turns out 50% of all macOS malware


00:49:06.120 --> 00:49:08.420
comes from one single app.


00:49:08.420 --> 00:49:09.420
Can you believe that?


00:49:09.420 --> 00:49:12.000
- What is it, Safari?


00:49:12.000 --> 00:49:15.640
- No, it's MacKeeper.


00:49:15.640 --> 00:49:20.920
So if you have MacKeeper, it organizes your files


00:49:20.920 --> 00:49:24.460
and it'll clean up your junky cache and stuff.


00:49:24.460 --> 00:49:27.300
But apparently it has to take over so much permissions


00:49:27.300 --> 00:49:30.060
and it can get, I guess, plugged in,


00:49:30.060 --> 00:49:31.020
or I don't know what it does,


00:49:31.020 --> 00:49:33.220
but people can plug into this


00:49:33.220 --> 00:49:35.060
and make it do all sorts of horrible stuff.


00:49:35.060 --> 00:49:38.500
So 50% of all malware is written for MacKeeper.


00:49:38.500 --> 00:49:41.700
So if you have MacKeeper, maybe unhave it.


00:49:41.700 --> 00:49:42.540
- Unhave it.


00:49:42.540 --> 00:49:44.780
(laughing)


00:49:44.780 --> 00:49:50.220
- I recently, as of Sunday, launched a new website


00:49:50.220 --> 00:49:52.700
that I hope will bring me back to writing some more.


00:49:52.700 --> 00:49:54.500
We'll see about how that goes.


00:49:54.500 --> 00:49:58.780
But here I'm trying a new philosophy on blogging, Brian.


00:49:58.780 --> 00:50:01.420
I don't know how you feel about it, but I have a blog.


00:50:01.420 --> 00:50:02.260
Been doing it for a long time,


00:50:02.260 --> 00:50:04.660
but like I looked, the last article I wrote


00:50:04.660 --> 00:50:06.660
I'm like, "Oh, that's not so good."


00:50:06.660 --> 00:50:11.660
And the reason is I always try to write like 2,000 word posts that are really...


00:50:11.660 --> 00:50:15.660
And I'm like, "But I could post to Twitter and mass it on all day."


00:50:15.660 --> 00:50:17.660
And it's like, "I can just do that. That's no problem.


00:50:17.660 --> 00:50:19.660
I don't like fall behind on Twitter."


00:50:19.660 --> 00:50:23.660
I'm like, "Well, that's because these really should be super short posts."


00:50:23.660 --> 00:50:29.660
So I have. I've got this new website that I wrote that are just super short,


00:50:29.660 --> 00:50:33.660
fits on a page type of articles that people can go and check out.


00:50:33.660 --> 00:50:35.100
and check out.


00:50:35.100 --> 00:50:38.140
- Yeah, some people are promoting like,


00:50:38.140 --> 00:50:41.300
today I learned things, but sure, why not?


00:50:41.300 --> 00:50:45.340
I mean, if you think it's gonna be a thread,


00:50:45.340 --> 00:50:47.460
write a blog post.


00:50:47.460 --> 00:50:48.300
- Exactly.


00:50:48.300 --> 00:50:49.300
- Yeah.


00:50:49.300 --> 00:50:50.340
- Yeah, so cool.


00:50:50.340 --> 00:50:52.340
So all of these are written,


00:50:52.340 --> 00:50:54.900
this is all based on Hugo, which is a,


00:50:54.900 --> 00:50:55.740
just learned about it,


00:50:55.740 --> 00:50:57.980
but a ridiculously cool static site generator.


00:50:57.980 --> 00:50:59.300
Either of you played with Hugo?


00:50:59.300 --> 00:51:01.340
- I use it, I love it.


00:51:01.340 --> 00:51:04.420
So pythontest.com is written on Hugo.


00:51:04.420 --> 00:51:06.500
- It's ridiculous, right?


00:51:06.500 --> 00:51:08.100
No, Marlo, you haven't?


00:51:08.100 --> 00:51:10.020
- Sorry, no, I haven't used it, but I heard of it.


00:51:10.020 --> 00:51:11.540
Yeah, I heard nice things.


00:51:11.540 --> 00:51:13.540
- Yeah, so you basically just go to your directory


00:51:13.540 --> 00:51:15.300
of markdown files and images,


00:51:15.300 --> 00:51:18.300
you just run hugo-dserver or whatever,


00:51:18.300 --> 00:51:22.060
and then as you write, you have your web page


00:51:22.060 --> 00:51:22.900
open in your browser,


00:51:22.900 --> 00:51:26.180
and it automatically sees the markdown file changes


00:51:26.180 --> 00:51:28.420
or the CSS changes, regenerates it,


00:51:28.420 --> 00:51:30.140
and refreshes your browser.


00:51:30.140 --> 00:51:32.140
So your browser could be just over there


00:51:32.140 --> 00:51:34.820
and it's just periodically, as you make changes,


00:51:34.820 --> 00:51:36.180
it instantly refreshes.


00:51:36.180 --> 00:51:37.660
So you don't even go and refresh the page.


00:51:37.660 --> 00:51:41.260
You just write and the browser just watches


00:51:41.260 --> 00:51:44.220
and reloads, it's cool.


00:51:44.220 --> 00:51:46.620
- Yeah, and I, so you got it so that you just,


00:51:46.620 --> 00:51:50.820
you just push your changes to GitHub or your repo


00:51:50.820 --> 00:51:53.540
and it just appears on your website.


00:51:53.540 --> 00:51:54.780
- Exactly.


00:51:54.780 --> 00:51:55.620
Yeah, exactly.


00:51:55.620 --> 00:51:57.620
So that was my next thing is,


00:51:57.620 --> 00:51:59.640
Then I set up a Netlify free account


00:51:59.640 --> 00:52:02.240
with CDN SSL custom domain name,


00:52:02.240 --> 00:52:04.820
push it just has a prod branch that I connected it to.


00:52:04.820 --> 00:52:07.380
And when I pushed a prod boom, it just goes there instantly.


00:52:07.380 --> 00:52:09.840
So anyway, people are looking at that, that is super cool.


00:52:09.840 --> 00:52:10.680
- Pushed a prod?


00:52:10.680 --> 00:52:12.840
Oh, that's kind of cool.


00:52:12.840 --> 00:52:14.780
I just edit on prod, so.


00:52:14.780 --> 00:52:18.260
- I just log in, edit over SSH.


00:52:18.260 --> 00:52:19.160
- Yeah.


00:52:19.160 --> 00:52:21.480
- Just edit on the server, the server is the backup.


00:52:21.480 --> 00:52:22.780
Anyway, I have stuff on the screen,


00:52:22.780 --> 00:52:23.640
but there are no more backups.


00:52:23.640 --> 00:52:25.040
That's just stuff I pulled up while we were talking.


00:52:25.040 --> 00:52:27.160
So no more extras, I mean.


00:52:27.160 --> 00:52:29.600
So yeah, fun stuff.


00:52:29.600 --> 00:52:32.920
People check out the blog website and the video


00:52:32.920 --> 00:52:36.680
and apply for speaking at PyCascades.


00:52:36.680 --> 00:52:37.520
- Nice.


00:52:37.520 --> 00:52:40.920
Well, I feel like Lancer also was like already really funny,


00:52:40.920 --> 00:52:43.340
but do you have anything else funny for us or?


00:52:43.340 --> 00:52:45.160
- I do, although I somehow forgot


00:52:45.160 --> 00:52:46.080
to pull them up on the screen.


00:52:46.080 --> 00:52:47.520
So give me just a second here.


00:52:47.520 --> 00:52:49.120
There's two, these are really good.


00:52:49.120 --> 00:52:52.300
Okay, these are pretty epic.


00:52:52.300 --> 00:52:55.960
So this one is called,


00:52:55.960 --> 00:52:58.720
I think Merlo, you'll really like this one


00:52:58.720 --> 00:53:01.240
'cause it has to do with like algorithms and data science.


00:53:01.240 --> 00:53:03.960
And it's called Messing with the Algorithm.


00:53:03.960 --> 00:53:06.400
And it shows this dude here,


00:53:06.400 --> 00:53:07.360
don't mind the thing at the bottom,


00:53:07.360 --> 00:53:08.640
I have no idea what that's about.


00:53:08.640 --> 00:53:12.360
But see, there's this guy whose face is blurred out in


00:53:12.360 --> 00:53:14.640
UK, I think, I can't remember where this was.


00:53:14.640 --> 00:53:16.240
No, Berlin.


00:53:16.240 --> 00:53:19.540
And he's got a wagon, like a little red wagon


00:53:19.540 --> 00:53:22.860
that you pull behind you, full of 99 phones.


00:53:24.400 --> 00:53:27.940
Now what he did is he got them all running Google Maps


00:53:27.940 --> 00:53:30.560
and left them open and started walking down the street


00:53:30.560 --> 00:53:34.400
real slow and notice his neighborhood is now red on the map


00:53:34.400 --> 00:53:36.600
and he got it so it thinks there's a traffic jam


00:53:36.600 --> 00:53:38.840
and it'll send cars around his neighborhood.


00:53:38.840 --> 00:53:40.280
- Nice.


00:53:40.280 --> 00:53:41.840
- I wanna get one of these so bad


00:53:41.840 --> 00:53:43.560
and whenever I take my dog for a walk,


00:53:43.560 --> 00:53:46.240
just walk with the wagon behind me too.


00:53:46.240 --> 00:53:47.520
- No cars.


00:53:47.520 --> 00:53:49.040
- Yeah.


00:53:49.040 --> 00:53:50.800
So good, isn't it?


00:53:50.800 --> 00:53:51.640
- Yeah.


00:53:51.640 --> 00:53:53.440
He's so ahead of our time.


00:53:53.440 --> 00:53:55.120
He's just like, oh, he's so brilliant.


00:53:55.120 --> 00:53:55.620
Yeah.


00:53:55.620 --> 00:53:57.920
And I got for his neighbors.


00:53:57.920 --> 00:53:58.800
Yeah.


00:53:58.800 --> 00:54:02.260
The next one, the next one here is going to take a little bit of a, I just


00:54:02.260 --> 00:54:03.440
got to, I got to set the stage.


00:54:03.440 --> 00:54:05.520
Give me a second to set, set the history.


00:54:05.520 --> 00:54:07.680
Have you heard of, you've heard about these motivational posters.


00:54:07.680 --> 00:54:08.960
You go to like a dentist's office.


00:54:08.960 --> 00:54:11.840
It'll be like an Eagle soaring over like a sunset.


00:54:11.840 --> 00:54:14.480
Like if you don't spread your wings, you'll never soar as high as you


00:54:14.480 --> 00:54:15.880
could or something cheesy like that.


00:54:15.880 --> 00:54:16.540
Yeah.


00:54:16.540 --> 00:54:19.200
Well, there's this company called yes, exactly.


00:54:19.200 --> 00:54:21.080
There's a company called Despair.


00:54:21.080 --> 00:54:25.000
And Despair creates these, but in reverse.


00:54:25.000 --> 00:54:26.600
They're called the Demotivators.


00:54:26.600 --> 00:54:27.440
- Yeah, nice.


00:54:27.440 --> 00:54:28.840
- So have you seen these?


00:54:28.840 --> 00:54:29.920
- No.


00:54:29.920 --> 00:54:31.520
- Okay, so here's one like Solutions.


00:54:31.520 --> 00:54:32.720
And what does it say?


00:54:32.720 --> 00:54:37.160
It has a Rube Goldbergian type looking thing here.


00:54:37.160 --> 00:54:39.600
And it says, "Solutions, this is what happens


00:54:39.600 --> 00:54:42.040
"when the problem solver gets paid by the hour."


00:54:42.040 --> 00:54:43.360
(laughing)


00:54:43.360 --> 00:54:45.000
It's just out of control.


00:54:45.000 --> 00:54:45.840
Here's one, what is this?


00:54:45.840 --> 00:54:48.720
It's a frog wearing, with a snail on its head.


00:54:48.720 --> 00:54:52.560
is collaborate, so the best of us have to carry the rest of us.


00:54:52.560 --> 00:54:55.360
It's just like, they're really...


00:54:55.360 --> 00:54:56.360
All right.


00:54:56.360 --> 00:55:01.360
So that brings us to, I feel like this is a Brian Skin show a little bit.


00:55:01.360 --> 00:55:11.760
This tweet that he shared here, and it has the latexify thing, but recursion.


00:55:11.760 --> 00:55:13.760
And for the recursion, it has that demotivator.


00:55:13.760 --> 00:55:15.960
It's a picture that said recursion, here we go again.


00:55:15.960 --> 00:55:18.400
And then embedded in that is recursion, here we go again.


00:55:18.400 --> 00:55:21.780
Like that, you know, like your screen share, you see your own screen.


00:55:21.780 --> 00:55:22.660
Yeah.


00:55:22.660 --> 00:55:24.780
So it's kind of like that poster, but for recursion.


00:55:24.780 --> 00:55:26.500
Yeah.


00:55:26.500 --> 00:55:31.000
I kind of feel bad that people, the people that don't get the recursion


00:55:31.000 --> 00:55:34.540
joke, cause they can't even look it up because it just gets redirected.


00:55:34.540 --> 00:55:36.260
It just keeps going.


00:55:36.260 --> 00:55:38.540
Like the definition is the definition.


00:55:38.540 --> 00:55:39.220
That's right.


00:55:39.220 --> 00:55:40.700
Nice.


00:55:40.700 --> 00:55:40.900
All right.


00:55:40.900 --> 00:55:41.980
Well, that's what I got for you all.


00:55:41.980 --> 00:55:43.420
Well, thanks everybody.


00:55:43.420 --> 00:55:44.700
And thanks Michael, of course.


00:55:44.700 --> 00:55:47.140
And thanks Merlo for coming on the show.


00:55:47.140 --> 00:55:48.340
Thanks for having me.


00:55:48.340 --> 00:55:49.340
It was great.


00:55:49.340 --> 00:55:50.340
>> Yeah, you bet.


00:55:50.340 --> 00:55:51.340
Bye, everyone.


00:55:51.340 --> 00:55:52.340
>> Bye.


00:55:52.340 --> 00:55:52.340
>> Bye.


00:55:52.340 --> 00:55:54.340
Bye

