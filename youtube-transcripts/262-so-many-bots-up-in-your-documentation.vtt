WEBVTT

00:00:00.000 --> 00:00:04.000
>> Hello, everyone. Hey, Brian. Hey, Leah.


00:00:04.000 --> 00:00:05.000
>> Hi.


00:00:05.000 --> 00:00:06.000
>> Hey.


00:00:06.000 --> 00:00:09.760
>> Hey. Awesome. Thanks for having you here on the live stream. Leah, welcome to the show.


00:00:09.760 --> 00:00:10.760
You ready to kick this off?


00:00:10.760 --> 00:00:11.760
>> Yeah. Thanks for having me.


00:00:11.760 --> 00:00:17.040
>> Right on. Yeah. You're welcome. Hello and welcome to Python Bytes, where we deliver


00:00:17.040 --> 00:00:22.760
Python news and headlines directly to your earbuds. This is episode 262, recorded December


00:00:22.760 --> 00:00:27.960
8th, 2021. Oh, my gosh. It's almost winter. I'm Michael Kennedy.


00:00:27.960 --> 00:00:29.380
>> And I'm Brian Okken.


00:00:29.380 --> 00:00:31.340
- And I'm Leah Cole.


00:00:31.340 --> 00:00:32.340
- Hey. - Hey, Leah.


00:00:32.340 --> 00:00:34.180
- Yay, so great to have you here.


00:00:34.180 --> 00:00:35.820
Thanks for being here on the show.


00:00:35.820 --> 00:00:37.500
- Yeah, happy to be here.


00:00:37.500 --> 00:00:41.260
- Yeah, you and I got a chance to discuss Airflow


00:00:41.260 --> 00:00:43.460
over on Talk Python a couple months ago,


00:00:43.460 --> 00:00:44.500
something like that.


00:00:44.500 --> 00:00:45.340
- Yeah.


00:00:45.340 --> 00:00:48.380
- Yeah, but now we'll probably do a little more Airflow


00:00:48.380 --> 00:00:49.900
over here for people who are unfamiliar with that,


00:00:49.900 --> 00:00:51.820
but also just whatever you're interested in.


00:00:51.820 --> 00:00:53.540
So great to have you here.


00:00:53.540 --> 00:00:55.660
Why don't you tell people a quick bit about yourself


00:00:55.660 --> 00:00:57.100
before we jump into the topics?


00:00:57.100 --> 00:01:02.100
Sure, so I'm Leah and I am a Developer Relations Engineer


00:01:02.100 --> 00:01:07.100
in Google Cloud, and specifically I work on Cloud Composer,


00:01:07.100 --> 00:01:10.140
which is our hosted managed product


00:01:10.140 --> 00:01:12.940
of the popular Apache Airflow project,


00:01:12.940 --> 00:01:14.860
which we'll talk about a little bit later.


00:01:14.860 --> 00:01:18.060
And in addition to writing samples and content for that,


00:01:18.060 --> 00:01:21.220
I also work with a group of fellow engineers


00:01:21.220 --> 00:01:25.620
and we maintain all Python samples for Google Cloud


00:01:25.620 --> 00:01:28.620
and make sure that they stay tested up to date


00:01:28.620 --> 00:01:31.900
and are healthy and are getting reviewed for new samples.


00:01:31.900 --> 00:01:32.860
And that's a lot of fun.


00:01:32.860 --> 00:01:36.340
That kind of fell into my lap and has been a good time.


00:01:36.340 --> 00:01:39.060
- I remember Python being one of the original


00:01:39.060 --> 00:01:41.700
two supported languages on Google Cloud, right?


00:01:41.700 --> 00:01:43.220
It had sort of a special place.


00:01:43.220 --> 00:01:46.620
- Yeah, now it's one of seven, I think.


00:01:46.620 --> 00:01:47.460
- Yeah, cool.


00:01:47.460 --> 00:01:48.700
Well, that sounds like such a fun job.


00:01:48.700 --> 00:01:51.580
I've always imagined dev relations type of jobs


00:01:51.580 --> 00:01:54.380
to be super fun, maybe slightly less fun in COVID


00:01:54.380 --> 00:01:56.260
'cause the travel and the conferences


00:01:56.260 --> 00:01:58.820
and all those kinds of things are part of it,


00:01:58.820 --> 00:02:00.380
but still a fun job, right?


00:02:00.380 --> 00:02:01.380
- Still a good time.


00:02:01.380 --> 00:02:02.660
Every day is a little bit different.


00:02:02.660 --> 00:02:04.300
You kind of never know what's gonna happen


00:02:04.300 --> 00:02:06.220
and that's part of what I like about it.


00:02:06.220 --> 00:02:07.700
- Yeah, awesome.


00:02:07.700 --> 00:02:08.780
Cool.


00:02:08.780 --> 00:02:10.140
Brian, I don't even know what you're gonna cover,


00:02:10.140 --> 00:02:11.060
so I don't know what's gonna happen.


00:02:11.060 --> 00:02:12.620
Why don't you let us know?


00:02:12.620 --> 00:02:14.260
- You don't know what I'm gonna cover?


00:02:14.260 --> 00:02:15.900
- Well, I'm not looking at my docs yet.


00:02:15.900 --> 00:02:16.740
- Oh, okay.


00:02:16.740 --> 00:02:21.080
Sorry, fighting a cold.


00:02:21.940 --> 00:02:24.100
- I am super excited, pytest 7,


00:02:24.100 --> 00:02:26.340
release candidate one is out.


00:02:26.340 --> 00:02:29.020
- That's excellent, that's big news.


00:02:29.020 --> 00:02:29.980
- Yeah. - It is.


00:02:29.980 --> 00:02:33.340
The last release for pytest was, or six,


00:02:33.340 --> 00:02:35.220
they've done other dot releases,


00:02:35.220 --> 00:02:39.180
but the 6.2 or 6.0 came out, or 6.2, I don't know.


00:02:39.180 --> 00:02:40.380
I lost track.


00:02:40.380 --> 00:02:43.700
- We use 6.2.4 for our GCP samples, so.


00:02:43.700 --> 00:02:45.700
- Oh, you do? - We do.


00:02:45.700 --> 00:02:48.940
- Well, I think it was, I wrote this down.


00:02:48.940 --> 00:02:52.020
The 6.2.0 was released on December, 2020.


00:02:52.020 --> 00:02:55.220
So it's been, we're ready for a new one.


00:02:55.220 --> 00:02:58.620
So 7.0 is out, the release candidate at least.


00:02:58.620 --> 00:03:01.980
And so, because it's a release candidate to install it,


00:03:01.980 --> 00:03:06.180
you have to do a pip install pytest double equal


00:03:06.180 --> 00:03:08.520
7.0.0 rc1.


00:03:08.520 --> 00:03:10.180
We've got that in the show notes.


00:03:10.180 --> 00:03:15.180
It's also on the release announcement page for pytest.


00:03:15.860 --> 00:03:19.480
but I wanted to go through some of the cool features


00:03:19.480 --> 00:03:20.520
that I'm really excited about.


00:03:20.520 --> 00:03:22.460
There's a lot of great things in there.


00:03:22.460 --> 00:03:28.340
There's some little improvements with the approx thing.


00:03:28.340 --> 00:03:30.940
So one of the things that pytest has is an approx.


00:03:30.940 --> 00:03:32.760
So you can say floating point numbers,


00:03:32.760 --> 00:03:35.580
if you're comparing them, you should never do equal,


00:03:35.580 --> 00:03:37.820
but you can do equal approx with pytest


00:03:37.820 --> 00:03:39.200
and it's really pretty cool.


00:03:39.200 --> 00:03:41.760
- That's cool, I didn't know that because Ian Sainz,


00:03:41.760 --> 00:03:45.300
you're doing is so, like double equals is the kiss of death


00:03:45.300 --> 00:03:47.640
for floating point math comparison.


00:03:47.640 --> 00:03:51.020
- Yeah, well, the pytest of Procs


00:03:51.020 --> 00:03:56.020
does now the docs reference the NumPy comparisons,


00:03:56.020 --> 00:03:58.620
which is nice because NumPy has some really cool features


00:03:58.620 --> 00:03:59.940
around that. - Nice.


00:03:59.940 --> 00:04:02.020
- But pytest out of the box does.


00:04:02.020 --> 00:04:07.020
And now also with mappings and dicts and other sets,


00:04:07.020 --> 00:04:11.600
it does, it handles decimal types, which is nice.


00:04:11.600 --> 00:04:13.440
Decimal types, of course, are very useful


00:04:13.440 --> 00:04:15.020
when working with money.


00:04:15.020 --> 00:04:17.780
and other things that need to be exact decimals.


00:04:17.780 --> 00:04:20.260
One of the things that's really cool


00:04:20.260 --> 00:04:23.660
is the sequences are compared better.


00:04:23.660 --> 00:04:26.240
So if you have like a list of numbers


00:04:26.240 --> 00:04:29.020
and you compare against an approximate list


00:04:29.020 --> 00:04:31.780
of another numbers, I didn't know you could do this,


00:04:31.780 --> 00:04:36.060
it will tell you which index was wrong


00:04:36.060 --> 00:04:37.660
and by how much. - Oh, nice.


00:04:37.660 --> 00:04:39.100
- And actually not by how much,


00:04:39.100 --> 00:04:42.780
but what the expected was, and that's pretty neat.


00:04:42.780 --> 00:04:45.000
So those are the little minor features.


00:04:45.000 --> 00:04:46.760
Most of these are kind of minor,


00:04:46.760 --> 00:04:49.520
but major for somebody, right?


00:04:49.520 --> 00:04:51.840
So one of the things I like is


00:04:51.840 --> 00:04:53.640
some people have mentioned fixtures


00:04:53.640 --> 00:04:55.600
or sometimes when people use a lot of fixtures,


00:04:55.600 --> 00:04:57.200
they don't know where the fixtures are.


00:04:57.200 --> 00:04:58.360
Well, there's a couple of flags,


00:04:58.360 --> 00:05:01.040
fixtures per test and --fixtures.


00:05:01.040 --> 00:05:04.040
Both those flags are helpful to find out


00:05:04.040 --> 00:05:06.400
what fixtures you have available.


00:05:06.400 --> 00:05:10.320
And now by default, they print the location of the path


00:05:10.320 --> 00:05:12.720
in with the fixture name.


00:05:12.720 --> 00:05:14.440
And you can also do a verbose option


00:05:14.440 --> 00:05:18.000
that prints out the full doc string, which is pretty handy.


00:05:18.000 --> 00:05:22.080
A couple of things that I'm really excited about


00:05:22.080 --> 00:05:24.760
are Python path that's been added.


00:05:24.760 --> 00:05:27.240
And that was a feature I added to the project,


00:05:27.240 --> 00:05:28.440
which is fun.


00:05:28.440 --> 00:05:30.360
- Nice, it's cool to see the contributions


00:05:30.360 --> 00:05:31.960
you're making coming back out.


00:05:31.960 --> 00:05:32.800
- Yeah, it's cool.


00:05:32.800 --> 00:05:34.940
And then there's a bunch of other features


00:05:34.940 --> 00:05:37.520
that I contributed to by just saying,


00:05:37.520 --> 00:05:39.360
this is a little weird, can we fix this?


00:05:39.360 --> 00:05:40.960
And somebody else volunteered to fix it.


00:05:40.960 --> 00:05:42.520
So it's nice.


00:05:42.520 --> 00:05:45.320
- That's the best kind of contribution.


00:05:45.320 --> 00:05:46.560
- Yeah.


00:05:46.560 --> 00:05:48.560
One of the improvements in the docs,


00:05:48.560 --> 00:05:53.080
which is kind of fun is there's an auto-generated list of,


00:05:53.080 --> 00:05:55.180
so we've got the change log going on here.


00:05:55.180 --> 00:05:58.080
I gotta come back to this.


00:05:58.080 --> 00:06:00.080
There's an auto-generated list of plugins


00:06:00.080 --> 00:06:02.400
and there's 963 right now.


00:06:02.400 --> 00:06:03.240
We'll refresh it.


00:06:03.240 --> 00:06:05.600
Nope, still 963, but that's a lot.


00:06:05.600 --> 00:06:09.860
When I first started writing the beta


00:06:09.860 --> 00:06:13.200
or the second edition of the pytest book.


00:06:13.200 --> 00:06:15.460
I noticed this and I wrote it down,


00:06:15.460 --> 00:06:16.520
but the number keeps changing.


00:06:16.520 --> 00:06:18.100
So I took out the number.


00:06:18.100 --> 00:06:19.480
It's a lot.


00:06:19.480 --> 00:06:21.020
There's a lot of cool plugins.


00:06:21.020 --> 00:06:23.700
One of the things that if you'll notice


00:06:23.700 --> 00:06:25.460
when you go to the changelog,


00:06:25.460 --> 00:06:29.460
it starts with breaking changes and then deprecations.


00:06:29.460 --> 00:06:31.460
And I know, I think this is around


00:06:31.460 --> 00:06:32.760
because people, when they upgrade,


00:06:32.760 --> 00:06:34.940
they want to know if it's going to break their code or not.


00:06:34.940 --> 00:06:38.140
I have tested a bunch of stuff and upgraded from six to seven


00:06:38.140 --> 00:06:40.140
and I haven't noticed a lot.


00:06:40.140 --> 00:06:45.140
There was like a 6.1 to 6.2, I can't remember what the,


00:06:45.140 --> 00:06:48.980
there was one break a while ago in the 6X


00:06:48.980 --> 00:06:51.260
that messed some plugin authors,


00:06:51.260 --> 00:06:52.460
but I haven't noticed any problems.


00:06:52.460 --> 00:06:54.000
So please try these out.


00:06:54.000 --> 00:06:55.840
I wish they would do the features first


00:06:55.840 --> 00:06:58.380
and then not the breaking changes.


00:06:58.380 --> 00:07:01.900
- I suspect it's the people working deep in the guts


00:07:01.900 --> 00:07:04.820
like the plugin authors that hit these deprecations


00:07:04.820 --> 00:07:07.820
and not just people doing assert this equals that type of.


00:07:07.820 --> 00:07:10.260
- Yeah, right.


00:07:10.260 --> 00:07:12.100
One of the things that I didn't list,


00:07:12.100 --> 00:07:14.180
but I think a lot of people are excited about,


00:07:14.180 --> 00:07:16.540
there's more, the objects within pytest


00:07:16.540 --> 00:07:20.500
that people are using, more of them are type hinted now


00:07:20.500 --> 00:07:23.060
so that you can do type hints with objects.


00:07:23.060 --> 00:07:24.140
- Oh, that's nice.


00:07:24.140 --> 00:07:26.500
- Yeah. - That's really nice.


00:07:26.500 --> 00:07:27.460
- So, fun.


00:07:27.460 --> 00:07:32.260
- We had to use pytest, some of these changes, exciting.


00:07:32.260 --> 00:07:35.740
- We do, we use pytest on our Python samples.


00:07:35.740 --> 00:07:38.440
And so I actually the one that was most exciting to me


00:07:38.440 --> 00:07:40.900
was the fixtures, figuring out where fixtures are


00:07:40.900 --> 00:07:45.300
is definitely something that comes into play for me,


00:07:45.300 --> 00:07:46.980
especially when we're maintaining something


00:07:46.980 --> 00:07:48.640
that was written a while ago by someone


00:07:48.640 --> 00:07:51.420
who might not be working on that code anymore.


00:07:51.420 --> 00:07:52.260
- Yeah.


00:07:52.260 --> 00:07:53.980
- Yeah.


00:07:53.980 --> 00:07:54.800
- Nice.


00:07:54.800 --> 00:07:55.640
- Yes. - That's great.


00:07:55.640 --> 00:07:58.100
I love the pip installable RC1, that's great.


00:07:58.100 --> 00:08:02.060
And before we move on, just taking a step back,


00:08:02.060 --> 00:08:03.340
Roman Wright, author of Beanie.


00:08:03.340 --> 00:08:04.660
Hey, Roman, out there in the audience says,


00:08:04.660 --> 00:08:06.460
I'm a big fan of Google Cloud.


00:08:06.460 --> 00:08:07.940
>> Oh, thank you.


00:08:07.940 --> 00:08:10.340
>> For sure. Well, I've got


00:08:10.340 --> 00:08:12.700
some fun stuff to talk about next year.


00:08:12.700 --> 00:08:15.500
I want to talk about this thing that David Smith,


00:08:15.500 --> 00:08:19.220
former guest co-host here on Python Bytes,


00:08:19.220 --> 00:08:21.940
sent over and said, "This looks cool."


00:08:21.940 --> 00:08:25.860
Sam Lowe and Philip Guell


00:08:25.860 --> 00:08:28.940
released this thing called Pandas Tutor.


00:08:28.940 --> 00:08:30.380
>> This is cool.


00:08:30.380 --> 00:08:32.660
>> Yeah. Previously, Philip had built


00:08:32.660 --> 00:08:35.540
PythonTutor@PythonTutor.com.


00:08:35.540 --> 00:08:38.600
Now there's PandasTutor.com.


00:08:38.600 --> 00:08:45.460
It's all about just helping you understand what the code does.


00:08:45.460 --> 00:08:49.620
It basically says, "Look, there's this code here."


00:08:49.620 --> 00:08:52.860
Imagine you've got a list of dogs that have a breed, a type, a longevity.


00:08:52.860 --> 00:08:55.740
A type is like a herding dog or a toy dog.


00:08:55.740 --> 00:08:56.740
It goes in a purse.


00:08:56.740 --> 00:08:59.540
Longevity, size, weight, and so on.


00:08:59.540 --> 00:09:00.860
You've got that as a data frame.


00:09:00.860 --> 00:09:07.860
If you wrote dogs with a size equal equal medium, then sort values on type, then group


00:09:07.860 --> 00:09:11.940
by by type, and then show the median, what is that actually doing?


00:09:11.940 --> 00:09:13.500
How do I understand that?


00:09:13.500 --> 00:09:18.340
As somebody learning Pandas, imagine I don't really have a database background.


00:09:18.340 --> 00:09:21.860
I'm not trying to map that over to, "Okay, there's the where clause, there's the order


00:09:21.860 --> 00:09:25.620
by clause," that kind of business.


00:09:25.620 --> 00:09:28.380
What is happening when I write that code?


00:09:28.380 --> 00:09:33.580
because I'm coming across it for the first time or, which happens to me a lot, I wrote


00:09:33.580 --> 00:09:35.640
it two years ago and understood it perfectly then.


00:09:35.640 --> 00:09:36.640
I have no idea what it does now.


00:09:36.640 --> 00:09:37.640
You want to know what it does.


00:09:37.640 --> 00:09:38.640
>> Same.


00:09:38.640 --> 00:09:41.660
>> Yeah, that happens way too often, right?


00:09:41.660 --> 00:09:49.020
What you do is you can go and run this code over in Pandas Tutor and you say visualize


00:09:49.020 --> 00:09:51.420
and it says running a code, please wait.


00:09:51.420 --> 00:09:55.820
What they do is they put a CSV bit of text in here, it's like a triple string, and then


00:09:55.820 --> 00:09:58.140
use Pandas Read and then just do that one line.


00:09:58.140 --> 00:10:00.380
That's a nice way to get data in there.


00:10:00.380 --> 00:10:02.700
The way to think about this is steps.


00:10:02.700 --> 00:10:06.820
It shows you what is the first step and what is the second step and so on.


00:10:06.820 --> 00:10:11.180
When you go there, you'll see that it has the code that we were talking about, but then


00:10:11.180 --> 00:10:17.700
right now the effective where clause, the filter, is regular font and the rest is gray.


00:10:17.700 --> 00:10:19.500
It's like fade into the background.


00:10:19.500 --> 00:10:25.540
You can actually see what the starting data frame was and the ending data frame and then


00:10:25.540 --> 00:10:26.540
how it got in there.


00:10:26.540 --> 00:10:31.080
can use the mouse over like, so what they're saying is the type is medium.


00:10:31.080 --> 00:10:34.680
So if you hover over like a large or a small dog, there's just no arrow.


00:10:34.680 --> 00:10:38.060
But if you hover over medium, it shows you where in the result that,


00:10:38.060 --> 00:10:39.980
that thing landed.


00:10:39.980 --> 00:10:40.620
Isn't that cool?


00:10:40.620 --> 00:10:41.180
>> No, neat.


00:10:41.180 --> 00:10:42.500
>> That's wild.


00:10:42.500 --> 00:10:43.100
>> Isn't that wild?


00:10:43.100 --> 00:10:46.460
And so then you can see size has all the values on the left and


00:10:46.460 --> 00:10:49.220
then the size is grouped on the right and it shows medium, medium, medium,


00:10:49.220 --> 00:10:51.500
medium because that's all that's in there.


00:10:51.500 --> 00:10:53.100
Now, when I first looked at this, I'm like,


00:10:53.100 --> 00:10:55.380
there's a bunch of stuff on the screen, what's going on?


00:10:55.380 --> 00:10:59.940
I noticed the arrows, but then what it took me a minute to realize is there's multiple steps.


00:10:59.940 --> 00:11:03.980
So the next thing if you scroll down shows the same code at the top,


00:11:03.980 --> 00:11:07.160
but now the sort values type is highlighted.


00:11:07.160 --> 00:11:10.280
That's the next part of what looks like one expression in Pandas.


00:11:10.280 --> 00:11:15.320
And so now it highlights the column that it's sorting on, and you can actually see


00:11:15.320 --> 00:11:20.040
the arrows pointing to how they were reordered in the result because you're sorting by type.


00:11:20.040 --> 00:11:25.140
So it's non-sporting, non-sporting, non-sporting, non-sporting, then sporting, sporting, and working, working, and so on.


00:11:25.140 --> 00:11:27.180
So, that was step two.


00:11:27.180 --> 00:11:28.380
We have a group by.


00:11:28.380 --> 00:11:29.380
This one's interesting.


00:11:29.380 --> 00:11:31.500
It doesn't have arrows, it has colors.


00:11:31.500 --> 00:11:37.220
So, the group by type, again, non-sporting, sporting, so on, you end up with these groups.


00:11:37.220 --> 00:11:40.340
Here's a blue box of all the non-sporting dogs.


00:11:40.340 --> 00:11:43.740
The bulldog, the poodle, the French bulldog is so cute.


00:11:43.740 --> 00:11:46.780
Then you've got the golden retriever and the Labrador in the box.


00:11:46.780 --> 00:11:48.740
These are grouped into the colors.


00:11:48.740 --> 00:11:54.220
Then finally, you do the median and it shows how those groups reduce down to statistics


00:11:54.220 --> 00:11:56.300
Like the longevity of a non-sporting dog


00:11:56.300 --> 00:11:57.880
is less than a sporting dog apparently,


00:11:57.880 --> 00:11:59.540
but they're also lighter.


00:11:59.540 --> 00:12:02.540
So anyway, what do y'all think?


00:12:02.540 --> 00:12:04.620
- Oh my gosh, I love this.


00:12:04.620 --> 00:12:05.860
- This is nice, right?


00:12:05.860 --> 00:12:09.460
- I'm a very visual learner, so I really appreciate this.


00:12:09.460 --> 00:12:11.220
And especially if you're working with data


00:12:11.220 --> 00:12:13.860
that you kind of aren't sure what it does


00:12:13.860 --> 00:12:16.940
and or the code, like that's pretty incredible.


00:12:16.940 --> 00:12:19.600
I'm filing this away, it's gonna go in my team's group chat


00:12:19.600 --> 00:12:21.380
pretty much as soon as we're done recording.


00:12:21.380 --> 00:12:23.460
- In fact, yeah, it's awesome.


00:12:23.460 --> 00:12:24.300
I think it's really good.


00:12:24.300 --> 00:12:26.780
You know, there's so many people who are presented a notebook


00:12:26.780 --> 00:12:28.980
or presented some kind of result, and they're like,


00:12:28.980 --> 00:12:31.900
I need to understand what that means so I can keep following.


00:12:31.900 --> 00:12:33.560
And I think, you know, throw it into here or something


00:12:33.560 --> 00:12:35.260
like this would be really helpful.


00:12:35.260 --> 00:12:37.380
- Well, and a lot of people that have spent a lot of time


00:12:37.380 --> 00:12:41.580
with databases, it might be obvious what these things do.


00:12:41.580 --> 00:12:45.460
But for people that don't spend a lot of time with SQL,


00:12:45.460 --> 00:12:46.820
it's not obvious.


00:12:46.820 --> 00:12:49.580
And so this is really nice.


00:12:49.580 --> 00:12:50.860
- Yeah, definitely.


00:12:50.860 --> 00:12:52.940
Or if you're like trying to take some example


00:12:52.940 --> 00:12:55.040
that you have with their example data


00:12:55.040 --> 00:12:57.600
and trying to translate it to your own data,


00:12:57.600 --> 00:13:00.840
that's something customers do all the time for us.


00:13:00.840 --> 00:13:03.080
It's something I do a lot too,


00:13:03.080 --> 00:13:05.640
just seeing how it behaves with your stuff.


00:13:05.640 --> 00:13:06.720
Oh man.


00:13:06.720 --> 00:13:08.280
- You didn't write it but you wanna use it


00:13:08.280 --> 00:13:09.360
and so much applies.


00:13:09.360 --> 00:13:11.400
- Yeah, exactly.


00:13:11.400 --> 00:13:13.760
- Yeah, so this is quite cool.


00:13:13.760 --> 00:13:15.800
Dean out in the live stream, hey Dean,


00:13:15.800 --> 00:13:19.000
says Panda's tutor looks awesome


00:13:19.000 --> 00:13:22.240
and Robert Robertson also loving it, it's nice.


00:13:22.240 --> 00:13:23.240
So very cool.


00:13:23.240 --> 00:13:25.360
Indeed. All right.


00:13:25.360 --> 00:13:26.880
Over to you, Leah.


00:13:26.880 --> 00:13:28.840
All right. So, yeah, my first thing


00:13:28.840 --> 00:13:30.520
today is Apache Airflow.


00:13:30.520 --> 00:13:32.760
So Airflow is a project


00:13:32.760 --> 00:13:34.180
that is part of the Apache Software


00:13:34.180 --> 00:13:35.120
Foundation.


00:13:35.120 --> 00:13:37.160
It's a workflow orchestration tool


00:13:37.160 --> 00:13:39.040
that originated at Airbnb,


00:13:39.040 --> 00:13:41.280
I want to say, in like 2014.


00:13:41.280 --> 00:13:43.920
And then pretty shortly after


00:13:43.920 --> 00:13:46.000
became part of the ASF


00:13:46.000 --> 00:13:48.380
and it became a top level Apache


00:13:48.380 --> 00:13:50.200
project in, I want to say,


00:13:50.200 --> 00:13:51.560
early 2019.


00:13:51.600 --> 00:13:54.560
It's been a little while now, which is very exciting.


00:13:54.560 --> 00:13:57.320
So you can use it to author these workflows


00:13:57.320 --> 00:14:01.280
as directed acyclic graphs or DAGs of tasks,


00:14:01.280 --> 00:14:02.520
which is pretty cool.


00:14:02.520 --> 00:14:04.980
And it's most commonly used with workflows


00:14:04.980 --> 00:14:07.000
that are like pretty static,


00:14:07.000 --> 00:14:10.240
not super frequently changing or slowly changing,


00:14:10.240 --> 00:14:13.680
just so that you can see how the workflow goes over time.


00:14:13.680 --> 00:14:16.280
And that allows you for some clarity


00:14:16.280 --> 00:14:19.160
and continuity in your workflows.


00:14:19.160 --> 00:14:24.960
I've always sort of wondered what the role of these workflow type systems were until


00:14:24.960 --> 00:14:28.680
I realized, you know, if you're going to build a full end to end type of workflow without


00:14:28.680 --> 00:14:32.640
a framework, there's a lot of coordination and what if this fails?


00:14:32.640 --> 00:14:33.640
Where do you restart?


00:14:33.640 --> 00:14:34.640
What do you do?


00:14:34.640 --> 00:14:39.640
And then the analogy for me is kind of like Flask or some web, like all I got to do is


00:14:39.640 --> 00:14:43.320
write this little thing and everything else will come together to make sure these four


00:14:43.320 --> 00:14:45.040
lines of my Python code run.


00:14:45.040 --> 00:14:46.040
They run reliably.


00:14:46.040 --> 00:14:48.200
If they fail, it gets dealt with, right?


00:14:48.200 --> 00:14:51.760
It allows people to not have to understand the whole system and just go, I need you to


00:14:51.760 --> 00:14:54.480
load up this file and put it into that database.


00:14:54.480 --> 00:14:55.480
Can you write that code?


00:14:55.480 --> 00:14:58.760
And that's all you got to know to be part of some complex thing, right?


00:14:58.760 --> 00:15:04.880
Yeah, it's, I mean, it's not the most glamorous thing, but it is extremely useful.


00:15:04.880 --> 00:15:11.040
I mean, I did a summer internship when I was doing my bachelor's, where I wrote a cron


00:15:11.040 --> 00:15:13.880
job that ingested some data every night.


00:15:13.880 --> 00:15:18.160
And the only way I knew if it failed was if I looked in the target folder where it's supposed


00:15:18.160 --> 00:15:23.160
to end up and if the data wasn't there.


00:15:23.160 --> 00:15:24.160
That sucked.


00:15:24.160 --> 00:15:26.000
I'm sure a lot of people have dealt with that.


00:15:26.000 --> 00:15:31.560
And this is actually like a really common Airflow workflow, which is the extract, transform


00:15:31.560 --> 00:15:36.820
and load the ETL workflow, which is where you have data somewhere that you want to get,


00:15:36.820 --> 00:15:40.960
you want to do something to it, or maybe not, maybe you just want to extract and load it.


00:15:40.960 --> 00:15:45.760
And you want to put that result somewhere else, either locally or in the cloud for all


00:15:45.760 --> 00:15:46.760
of that.


00:15:46.760 --> 00:15:49.040
And Airflow lets you do all of that.


00:15:49.040 --> 00:15:51.720
And you can see the history of these jobs.


00:15:51.720 --> 00:15:54.440
There's a UI where you can see, did it fail?


00:15:54.440 --> 00:15:56.780
It has a helpful error message if it failed.


00:15:56.780 --> 00:15:59.000
It's not just, oh gosh, the data is not there.


00:15:59.000 --> 00:16:00.000
What do I do?


00:16:00.000 --> 00:16:01.000
Yeah.


00:16:01.000 --> 00:16:03.840
You've got a really cool UI where it shows all the parts of the workflow running and


00:16:03.840 --> 00:16:06.760
like, yeah, they finished successfully and stuff, right?


00:16:06.760 --> 00:16:07.760
Yeah.


00:16:07.760 --> 00:16:09.440
And it got a makeover fairly recently.


00:16:09.440 --> 00:16:12.120
So it's had a lot of improvements.


00:16:12.120 --> 00:16:12.960
- That's super cool.


00:16:12.960 --> 00:16:15.040
Another thing maybe you could talk about really quick


00:16:15.040 --> 00:16:16.580
is the connectors.


00:16:16.580 --> 00:16:18.440
I don't remember exactly the right terminology.


00:16:18.440 --> 00:16:20.420
There's a name for them.


00:16:20.420 --> 00:16:21.600
Tell us, tell people about that.


00:16:21.600 --> 00:16:22.920
That's all I can think of. - Definitely.


00:16:22.920 --> 00:16:25.360
So these connectors that you're thinking of,


00:16:25.360 --> 00:16:26.560
I mean, we can use the word connector


00:16:26.560 --> 00:16:27.960
to describe what it does.


00:16:27.960 --> 00:16:30.360
So there are these things called operators in Airflow


00:16:30.360 --> 00:16:33.600
and an operator executes a single task.


00:16:33.600 --> 00:16:35.980
And so that might be executing a Bash script


00:16:35.980 --> 00:16:38.360
or executing a Python script.


00:16:38.360 --> 00:16:40.720
But we also have these connectors


00:16:40.720 --> 00:16:42.400
that are grouped by providers,


00:16:42.400 --> 00:16:43.920
which might be your cloud provider


00:16:43.920 --> 00:16:46.520
or other software providers


00:16:46.520 --> 00:16:48.680
that allow you to execute code there.


00:16:48.680 --> 00:16:52.660
So for example, we have a ton of GCP operators.


00:16:52.660 --> 00:16:57.200
One example might allow you to create a Dataproc cluster


00:16:57.200 --> 00:16:59.780
or then like run a job on that Dataproc cluster


00:16:59.780 --> 00:17:02.040
and maybe tear it down when you're done.


00:17:02.040 --> 00:17:05.860
And there are providers that have operators


00:17:05.860 --> 00:17:09.040
for all the major clouds and more.


00:17:09.040 --> 00:17:11.320
You can do, there's one that like sends a Slack message


00:17:11.320 --> 00:17:13.060
when it's done.


00:17:13.060 --> 00:17:16.240
So it's, if you can dream it, it might be there.


00:17:16.240 --> 00:17:18.360
And if not, you can make it there.


00:17:18.360 --> 00:17:19.200
- That's awesome.


00:17:19.200 --> 00:17:21.280
- Sure, what's GCP?


00:17:21.280 --> 00:17:24.640
- GCP is Google Cloud Platform or Google Cloud.


00:17:24.640 --> 00:17:26.920
GCP might be a dated acronym, sorry.


00:17:26.920 --> 00:17:29.160
- Don't know.


00:17:29.160 --> 00:17:30.720
- Yeah.


00:17:30.720 --> 00:17:33.040
- Yeah, so one of the advantages I think of that,


00:17:33.040 --> 00:17:34.880
that's really cool, is you don't necessarily have to know


00:17:34.880 --> 00:17:41.040
those APIs. Like if I was going to connect Slack to GCP, like Azure Blob storage to like some


00:17:41.040 --> 00:17:45.360
hosted database, I don't have to learn all those things. I can just sort of click it together.


00:17:45.360 --> 00:17:51.280
Yeah. There's a small amount of setup you have to do for auth, which is understandable. You


00:17:51.280 --> 00:17:56.240
can't just like publicly go to your Azure Blob thing to grab your data. But once you set up that


00:17:56.240 --> 00:18:02.480
connection, then your operators can talk to those things. And if you use... So you can run or host


00:18:02.480 --> 00:18:08.360
Airflow yourself, and there are a few different ways to do that. And then Amazon and Google


00:18:08.360 --> 00:18:14.680
both have managed hosted providers, and there's a company, Astronomer, that also does manage


00:18:14.680 --> 00:18:20.080
hosted ones. And so if you're in an Amazon or a Google, the advantage there is that the


00:18:20.080 --> 00:18:24.680
connections with those operators might be a little bit simpler from the auth and networking


00:18:24.680 --> 00:18:30.320
perspective. But other than that, you can still, like if you're running in Cloud Composer,


00:18:30.320 --> 00:18:33.160
which is Google's Airflow, you can still be using


00:18:33.160 --> 00:18:35.200
the Amazon or the Microsoft operators


00:18:35.200 --> 00:18:36.640
to pull data from over there.


00:18:36.640 --> 00:18:40.360
That's really common and you see it all the time


00:18:40.360 --> 00:18:42.460
and bring it, do some stuff in Google Cloud


00:18:42.460 --> 00:18:44.020
and either put it back in the other cloud


00:18:44.020 --> 00:18:45.660
or leave it in Google Cloud.


00:18:45.660 --> 00:18:48.880
That's totally normal and people are doing that all the time.


00:18:48.880 --> 00:18:50.580
- Right on. - Yeah.


00:18:50.580 --> 00:18:51.480
- Cool, cool.


00:18:51.480 --> 00:18:53.880
I think this is neat and people for whom


00:18:53.880 --> 00:18:56.120
that would make sense, you're like trying to do these,


00:18:56.120 --> 00:18:57.640
sort of running in the background,


00:18:57.640 --> 00:18:59.760
schedule jobs or there's triggers as well.


00:18:59.760 --> 00:19:02.400
like a file has been uploaded or landed here, right?


00:19:02.400 --> 00:19:04.260
- Yeah, let's talk about that.


00:19:04.260 --> 00:19:06.880
So that's actually, I had written down this one example,


00:19:06.880 --> 00:19:09.640
but I'll adapt it slightly since you mentioned triggers.


00:19:09.640 --> 00:19:11.920
So that's another common type of operator,


00:19:11.920 --> 00:19:14.520
these sensors where you wait for a certain condition


00:19:14.520 --> 00:19:17.760
to be true, and they're used in data analytics workflows


00:19:17.760 --> 00:19:18.600
all the time.


00:19:18.600 --> 00:19:21.720
So like one example workflow might be waiting


00:19:21.720 --> 00:19:25.060
for a particular file to appear in a cloud storage


00:19:25.060 --> 00:19:27.100
or an S3 bucket.


00:19:27.100 --> 00:19:28.820
So you'd use one of those sensors


00:19:28.820 --> 00:19:30.340
to wait for that to happen.


00:19:30.340 --> 00:19:32.600
And then you want to do something to that data.


00:19:32.600 --> 00:19:36.320
So let's say you then create a data proc cluster


00:19:36.320 --> 00:19:40.680
that is going to run a PySpark job on that cluster.


00:19:40.680 --> 00:19:43.880
And then you can store the results in BigQuery at the end


00:19:43.880 --> 00:19:46.760
and then delete the cluster and like send a Slack message


00:19:46.760 --> 00:19:48.700
when the job is done.


00:19:48.700 --> 00:19:53.700
That's a very common ETL thing, including that sensor.


00:19:53.700 --> 00:19:55.280
- Yeah, that sounds pretty nice.


00:19:55.280 --> 00:19:58.200
Definitely seems interesting and quite useful.


00:19:58.200 --> 00:19:59.440
- Yeah, it's a lot of fun.


00:19:59.440 --> 00:20:01.440
- Yeah, that's before we move on.


00:20:01.440 --> 00:20:02.480
- I have a question.


00:20:02.480 --> 00:20:05.680
If you wanted to get started with something like this,


00:20:05.680 --> 00:20:07.120
I was trying to look for tutorials


00:20:07.120 --> 00:20:09.600
and getting started and stuff like that.


00:20:09.600 --> 00:20:11.320
Is it, does it make sense,


00:20:11.320 --> 00:20:12.920
or is it too confusing if somebody,


00:20:12.920 --> 00:20:14.520
you said you could run it on your own machine.


00:20:14.520 --> 00:20:17.340
Does that make sense to try it that way,


00:20:17.340 --> 00:20:18.720
or should you try it with the--


00:20:18.720 --> 00:20:19.800
- It depends.


00:20:19.800 --> 00:20:20.640
- Okay.


00:20:20.640 --> 00:20:23.720
- You totally can do it on your own machine,


00:20:23.720 --> 00:20:26.360
and there's this really wonderful environment


00:20:26.360 --> 00:20:29.360
that can be found in the Airflow repository


00:20:29.360 --> 00:20:33.480
that's called Breeze, and it's a Dockerized version of it.


00:20:33.480 --> 00:20:35.200
It shouldn't be run in production,


00:20:35.200 --> 00:20:37.440
but if you're looking to try it out


00:20:37.440 --> 00:20:39.720
or if you're looking to contribute to Airflow,


00:20:39.720 --> 00:20:41.280
we highly recommend that everyone


00:20:41.280 --> 00:20:43.440
check out the Breeze environment.


00:20:43.440 --> 00:20:46.080
Right now I have the community page pulled up


00:20:46.080 --> 00:20:48.640
where you can join the dev list in the Slack


00:20:48.640 --> 00:20:49.640
if you have questions,


00:20:49.640 --> 00:20:51.680
but if you were to go to the GitHub repo,


00:20:51.680 --> 00:20:54.680
you would see Breeze right on that first page.


00:20:54.680 --> 00:20:56.080
- Okay, cool, thanks.


00:20:56.080 --> 00:20:57.400
- Yeah, great question, thank you.


00:20:57.400 --> 00:20:58.580
- Yeah, very good one.


00:20:58.580 --> 00:21:00.360
All right, Brian.


00:21:00.360 --> 00:21:02.920
Are you gonna give us a tutorial on Airflow


00:21:02.920 --> 00:21:04.120
or what we got going next here?


00:21:04.120 --> 00:21:06.480
- Yeah, so I was looking through the tutorials in Airflow


00:21:06.480 --> 00:21:08.920
and I noticed that right away,


00:21:08.920 --> 00:21:11.720
one of the examples used D-dent.


00:21:11.720 --> 00:21:14.600
So that's our connection. - Nice connection.


00:21:14.600 --> 00:21:15.880
- Nice connection.


00:21:15.880 --> 00:21:17.800
- Totally not planned, very cool.


00:21:17.800 --> 00:21:22.000
- D-dent was suggested, it's a Textwrap tool,


00:21:22.000 --> 00:21:24.560
it's suggested by Michael Rogers-Fallet.


00:21:25.600 --> 00:21:28.360
It's a small utility, but it's super useful.


00:21:28.360 --> 00:21:31.040
And I kind of forget that it's, I mean, I use it all the time,


00:21:31.040 --> 00:21:35.680
but I forget to mention it to people, but it comes up a lot.


00:21:35.680 --> 00:21:40.480
And the idea around D dent is you've got something.


00:21:40.480 --> 00:21:43.320
Oh, I think I lost my thing.


00:21:43.320 --> 00:21:47.320
Um, let's see if I can find it. There it is.


00:21:47.320 --> 00:21:50.040
the idea is you've got a multi-line string like here,


00:21:50.040 --> 00:21:54.000
we've got hello world and some multiple lines and there's different spacing,


00:21:54.360 --> 00:21:57.840
But as you notice, I want to define it within a test,


00:21:57.840 --> 00:22:01.640
within a test function or within some other function.


00:22:01.640 --> 00:22:05.040
And that's, so there's this extra like space


00:22:05.040 --> 00:22:07.840
at the beginning, that's in the string,


00:22:07.840 --> 00:22:10.320
it's in the multi-line string and we don't want that.


00:22:10.320 --> 00:22:14.320
We don't, we want it to be just no,


00:22:14.320 --> 00:22:16.080
like nothing at the beginning,


00:22:16.080 --> 00:22:18.240
or the same amount chopped off.


00:22:18.240 --> 00:22:20.480
So one of the options that people have used before


00:22:20.480 --> 00:22:23.280
is to just define a very multi-line string


00:22:23.280 --> 00:22:25.980
out of the function, you just do it out of the function,


00:22:25.980 --> 00:22:28.240
then it's against, then it's just against the left side


00:22:28.240 --> 00:22:32.140
of your editor or whatever on column zero,


00:22:32.140 --> 00:22:33.380
and you don't have to worry about it.


00:22:33.380 --> 00:22:36.200
But it does bother some people that you've got this,


00:22:36.200 --> 00:22:38.420
this variable defined outside of your function


00:22:38.420 --> 00:22:41.240
when you're just using it within one function.


00:22:41.240 --> 00:22:42.620
So dedent is the answer.


00:22:42.620 --> 00:22:45.740
So what dedent does is it just takes a multi-line string


00:22:45.740 --> 00:22:48.660
and strips off all the common white space at the beginning.


00:22:48.660 --> 00:22:49.860
That's it.


00:22:49.860 --> 00:22:52.700
But it's a, it's super useful.


00:22:52.700 --> 00:22:54.900
I've got a little example that we're showing here,


00:22:54.900 --> 00:22:58.500
but I think this is not a great example.


00:22:58.500 --> 00:23:00.340
So I wrote a new example.


00:23:00.340 --> 00:23:01.420
Oops, fell asleep.


00:23:01.420 --> 00:23:05.560
And so the idea really is I've got a function


00:23:05.560 --> 00:23:09.600
that either print stuff or has some output,


00:23:09.600 --> 00:23:11.920
and I wanna be able to compare that string,


00:23:11.920 --> 00:23:14.320
and I want my comparison to be in the function.


00:23:14.320 --> 00:23:19.700
So I use ddent to just write it right in my function,


00:23:19.700 --> 00:23:21.300
and then I don't have the spaces.


00:23:21.300 --> 00:23:22.520
And then, yeah, anyway.


00:23:22.520 --> 00:23:25.080
So this is a high test example


00:23:25.080 --> 00:23:27.840
of how you could test a output string.


00:23:27.840 --> 00:23:29.080
So anyway.


00:23:29.080 --> 00:23:31.480
- This really sounds like a classic example


00:23:31.480 --> 00:23:33.740
of there's a problem, like the open source,


00:23:33.740 --> 00:23:34.880
this really bothered me.


00:23:34.880 --> 00:23:36.540
And so I wrote something to fix it.


00:23:36.540 --> 00:23:37.920
And it's wonderful.


00:23:37.920 --> 00:23:42.280
Like the time honored open source reason to make something.


00:23:42.280 --> 00:23:43.980
- But I also wanna remind people


00:23:43.980 --> 00:23:46.400
that D-dent is not the only thing in TextWrap


00:23:46.400 --> 00:23:48.520
and TextWrap has a whole bunch of other cool tools.


00:23:48.520 --> 00:23:51.320
So it's not huge, it's just,


00:23:51.320 --> 00:23:54.160
but a five minute read to peruse what's in TextWrap


00:23:54.160 --> 00:23:56.560
so that next time you need to manipulate some text,


00:23:56.560 --> 00:23:57.680
it's useful.


00:23:57.680 --> 00:23:59.200
- So nice, yeah, maybe wrapping.


00:23:59.200 --> 00:24:01.840
- Yeah, like wrapping.


00:24:01.840 --> 00:24:04.360
Well, it does things like if you've got a huge string


00:24:04.360 --> 00:24:05.880
and you wanna be able to,


00:24:05.880 --> 00:24:08.020
like one of the things is to shorten it.


00:24:08.020 --> 00:24:10.040
So if you've got a huge string,


00:24:10.040 --> 00:24:11.720
but you really only have like eight characters


00:24:11.720 --> 00:24:12.560
to show something.


00:24:12.560 --> 00:24:13.880
- Like ellipsize it.


00:24:13.880 --> 00:24:15.520
- Yeah, it does that for you.


00:24:15.520 --> 00:24:17.680
So that's there too.


00:24:17.680 --> 00:24:20.600
- That's good 'cause I've written that code, it wasn't fun.


00:24:20.600 --> 00:24:21.600
It didn't feel useful either.


00:24:21.600 --> 00:24:22.600
I'm like, "Okay, great.


00:24:22.600 --> 00:24:23.600
It works."


00:24:23.600 --> 00:24:25.440
Here we go.


00:24:25.440 --> 00:24:26.960
Some audience feedback.


00:24:26.960 --> 00:24:27.960
Anthony out there.


00:24:27.960 --> 00:24:29.800
Hey, Anthony says, "It's really useful.


00:24:29.800 --> 00:24:31.520
Used it many times."


00:24:31.520 --> 00:24:32.520
>> Nice.


00:24:32.520 --> 00:24:36.160
>> All right.


00:24:36.160 --> 00:24:38.360
This next one comes to us from Dan Bader.


00:24:38.360 --> 00:24:41.160
You might know him from RealPython and other things.


00:24:41.160 --> 00:24:45.200
He and I were chatting, and he said, "Hey, have you heard about pip audit from Trail


00:24:45.200 --> 00:24:46.200
of Bits?"


00:24:46.200 --> 00:24:48.760
I was sure that I had.


00:24:48.760 --> 00:24:53.320
I thought we had talked about it, but then I realized, "No, I don't believe we have."


00:24:53.320 --> 00:24:57.120
I must have just heard about it somewhere else, and we haven't covered it before.


00:24:57.120 --> 00:25:03.900
The idea is we've heard about a lot of issues with supply chain vulnerabilities, things


00:25:03.900 --> 00:25:08.940
getting into pip, but also RubyGems and NPM and so on.


00:25:08.940 --> 00:25:13.120
Sometimes that's somebody trying to be evil and putting in some typo-squatting thing,


00:25:13.120 --> 00:25:20.320
More worse than that would be if the GitHub account of a maintainer got hacked and somebody


00:25:20.320 --> 00:25:26.800
published a package to the real package.


00:25:26.800 --> 00:25:31.120
However things might get into your dependencies, if something is going on bad there, it's better


00:25:31.120 --> 00:25:34.260
to know than to not know.


00:25:34.260 --> 00:25:35.720
This pip audit is all about that.


00:25:35.720 --> 00:25:40.440
It audits Python environments as in virtual environments and dependency trees for known


00:25:40.440 --> 00:25:42.240
vulnerabilities.


00:25:42.240 --> 00:25:47.640
That's one of the things that's interesting is when you pip install things, you might


00:25:47.640 --> 00:25:52.840
be very good about saying, "Oh, I pip installed Flask and I pip installed Pandas.


00:25:52.840 --> 00:25:57.280
Those are going into my requirements file or my pyproject.toml, but did you remember


00:25:57.280 --> 00:25:59.880
to pin their versions?"


00:25:59.880 --> 00:26:03.760
Things like GitHub will say, "Your version is wrong," because if it just sees Flask and


00:26:03.760 --> 00:26:07.240
the recent version doesn't have a problem, it's not going to tell you, but the one you


00:26:07.240 --> 00:26:08.520
have installed may.


00:26:08.520 --> 00:26:12.600
Also, the transitive closure of the dependencies.


00:26:12.600 --> 00:26:16.960
So Flask depends on it's dangerous, which depends on, I don't know.


00:26:16.960 --> 00:26:21.100
But if there's something down that chain that has a problem, you may have not put that in


00:26:21.100 --> 00:26:24.480
your requirements file, and you may not be tracking it.


00:26:24.480 --> 00:26:28.600
Like I might be paying careful attention to Flask, I might not care anything about it's


00:26:28.600 --> 00:26:29.600
dangerous.


00:26:29.600 --> 00:26:31.200
But that's where the problem is, right?


00:26:31.200 --> 00:26:32.200
>> Yeah.


00:26:32.200 --> 00:26:36.540
>> So this tool from Trail of Bits, which is a security company, basically solves that


00:26:36.540 --> 00:26:44.600
problem and it lets you just type pip - audit and for me it's a - our requirements.txt


00:26:44.600 --> 00:26:50.360
or whatever and from what I can tell what it does is it will go create its own virtual


00:26:50.360 --> 00:26:56.520
environment where it one by one installs each package looks at the things that come out


00:26:56.520 --> 00:27:02.300
of that process and then scans those so it's not just looking at all you say you have flask


00:27:02.300 --> 00:27:06.320
and that's 201 great you're good to go.


00:27:06.320 --> 00:27:10.540
It actually installs it because who knows what the setup.py process is doing and all


00:27:10.540 --> 00:27:11.540
those kinds of things.


00:27:11.540 --> 00:27:15.160
Then it scans that and it gives you a report.


00:27:15.160 --> 00:27:20.920
For like Talk Python Training site, we have, I don't know, 30 dependencies or something.


00:27:20.920 --> 00:27:25.280
It sat there and it took, I don't know, probably took two minutes to go through and it said,


00:27:25.280 --> 00:27:26.920
"Everything's good to go."


00:27:26.920 --> 00:27:29.000
That was good to hear, but it's pretty neat.


00:27:29.000 --> 00:27:30.360
Really easy to use.


00:27:30.360 --> 00:27:35.600
It's like an external tool like Black or something, so it's a good candidate for PIPx.


00:27:35.600 --> 00:27:38.400
and it's just globally available to point at any environment.


00:27:38.400 --> 00:27:42.320
What do you all think?


00:27:42.320 --> 00:27:43.680
Oh, this is so cool.


00:27:43.680 --> 00:27:46.440
I heard about it because one of my colleagues, Dustin Ingram,


00:27:46.440 --> 00:27:47.840
I think has been involved with it,


00:27:47.840 --> 00:27:50.040
or either it's his Twitter that I found out about it from.


00:27:50.040 --> 00:27:53.840
But he also has a really good talk from PyCon this past year


00:27:53.840 --> 00:27:56.480
about the supply chain vulnerabilities.


00:27:56.480 --> 00:28:00.840
That's worth checking out if you're wanting to get an idea


00:28:00.840 --> 00:28:02.680
why this is important.


00:28:02.680 --> 00:28:05.400
Yeah. Yeah, we've highlighted a few examples.


00:28:05.400 --> 00:28:06.240
- Yeah.


00:28:06.240 --> 00:28:07.160
- Over the years, but it's.


00:28:07.160 --> 00:28:08.000
- I'm sure.


00:28:08.000 --> 00:28:09.680
- It's definitely something you wanna pay attention to


00:28:09.680 --> 00:28:11.320
and that's cool that Dustin was talking about it.


00:28:11.320 --> 00:28:13.480
He works, I think he's still working with the PyPA


00:28:13.480 --> 00:28:18.480
and works on the PyPI.org and all those kinds of things.


00:28:18.480 --> 00:28:21.660
So very cool warehouse.


00:28:21.660 --> 00:28:22.500
- Yeah.


00:28:22.500 --> 00:28:26.400
- Brian, what do you think?


00:28:26.400 --> 00:28:27.240
Good stuff?


00:28:27.240 --> 00:28:28.060
- I think this is cool.


00:28:28.060 --> 00:28:28.900
I'm gonna start using it right away.


00:28:28.900 --> 00:28:29.740
- Yeah. - This is nice.


00:28:29.740 --> 00:28:32.360
- Yeah, I used it once as well and everything seems good.


00:28:32.360 --> 00:28:34.340
So here, look, I even called up Flask as an example.


00:28:34.340 --> 00:28:36.100
say here on this particular version,


00:28:36.100 --> 00:28:41.960
there was this security vulnerability from 2019.


00:28:41.960 --> 00:28:43.580
Same with, I guess,


00:28:43.580 --> 00:28:44.740
Jinja and all those were good. But yeah,


00:28:44.740 --> 00:28:48.100
it gives you a nice description of what went wrong.


00:28:48.100 --> 00:28:52.460
In this case, it's a denial of service attack and whatnot.


00:28:52.460 --> 00:28:55.580
>> So I definitely recommend people pin versions,


00:28:55.580 --> 00:28:57.580
definitely in your requirements.


00:28:57.580 --> 00:29:02.300
But what do you all think of including hashes?


00:29:02.300 --> 00:29:07.300
- I think that's something Dustin talked about in his talk.


00:29:07.300 --> 00:29:08.880
And at the time I was like,


00:29:08.880 --> 00:29:11.040
oh, that sounds like a good idea.


00:29:11.040 --> 00:29:13.920
And it's not something I've started doing yet.


00:29:13.920 --> 00:29:15.760
- Exactly. That's exactly what I think.


00:29:15.760 --> 00:29:18.020
It sounds like a good idea and I'm not doing it yet.


00:29:18.020 --> 00:29:19.220
So anyway.


00:29:19.220 --> 00:29:21.920
- But that sounds like it's a me problem


00:29:21.920 --> 00:29:23.520
more than anything else.


00:29:23.520 --> 00:29:26.240
- I also, it seems like a good idea.


00:29:26.240 --> 00:29:29.720
You know, I might be missing a step.


00:29:29.720 --> 00:29:34.360
It feels like the challenge you're going to run into there,


00:29:34.360 --> 00:29:37.840
what you're preventing against is a man in the middle attack.


00:29:37.840 --> 00:29:41.920
Somebody can intercept what's happening with PyPI.org


00:29:41.920 --> 00:29:47.080
and sneak in some kind of broken, hacked version.


00:29:47.080 --> 00:29:48.960
-Yeah. -I don't know.


00:29:48.960 --> 00:29:51.960
I don't necessarily trust what goes into PyPI.org,


00:29:51.960 --> 00:29:56.280
but I trust PyPI.org, so I'm not super --


00:29:56.280 --> 00:29:57.520
It's not my biggest worry.


00:29:57.520 --> 00:30:00.660
There's like 10 other worries that make me have a hard time


00:30:00.660 --> 00:30:02.900
sleeping at night about running stuff on the internet


00:30:02.900 --> 00:30:04.260
that precedes that.


00:30:04.260 --> 00:30:06.580
So I haven't worried about it, but maybe I should.


00:30:06.580 --> 00:30:09.980
- I think it's in the queue of things to worry about.


00:30:09.980 --> 00:30:11.500
- Well, for instance, with this audit,


00:30:11.500 --> 00:30:15.960
you can pin your stuff and then have it be,


00:30:15.960 --> 00:30:19.580
check it every once in a while,


00:30:19.580 --> 00:30:21.140
install everything and check for--


00:30:21.140 --> 00:30:24.280
- I don't see why it couldn't be a CI step.


00:30:24.280 --> 00:30:26.740
- I was actually just gonna say that pip audit,


00:30:26.740 --> 00:30:29.500
I need to bring it to my samples maintaining group


00:30:29.500 --> 00:30:31.700
to talk about who wants to implement it


00:30:31.700 --> 00:30:33.900
and how soon we're gonna do it.


00:30:33.900 --> 00:30:36.180
- Whose pager rings when it finds a problem.


00:30:36.180 --> 00:30:37.020
- Yes.


00:30:37.020 --> 00:30:39.820
- Yeah, pagers from back in the day.


00:30:39.820 --> 00:30:42.420
All right, well, that's all I got for that one.


00:30:42.420 --> 00:30:44.740
We're off to Leah.


00:30:44.740 --> 00:30:47.420
- Well, I'm so glad you mentioned pinning requirements


00:30:47.420 --> 00:30:49.420
because that is actually, that's a great segue


00:30:49.420 --> 00:30:52.180
for managing samples for GCP.


00:30:52.180 --> 00:30:54.780
So what I have open right now for Google Cloud


00:30:54.780 --> 00:30:57.000
is an example documentation page.


00:30:57.000 --> 00:31:00.420
I picked Cloud Composer because it's what I work on.


00:31:00.420 --> 00:31:03.660
And I want to give an example of where this code lives


00:31:03.660 --> 00:31:06.020
that I'm talking about that I work with this group


00:31:06.020 --> 00:31:07.540
to maintain.


00:31:07.540 --> 00:31:11.180
So this is a page that's about using a particular Airflow


00:31:11.180 --> 00:31:12.420
operator.


00:31:12.420 --> 00:31:15.020
And if you were to scroll on it, you


00:31:15.020 --> 00:31:16.660
will see these code samples.


00:31:16.660 --> 00:31:19.140
And they are all stored in GitHub


00:31:19.140 --> 00:31:21.980
and then embedded in our docs.


00:31:21.980 --> 00:31:24.460
So you can click View on GitHub on any one of them,


00:31:24.460 --> 00:31:27.180
and it will take you to the linked repository.


00:31:27.180 --> 00:31:30.940
You can look up a history, look at everything in context.


00:31:30.940 --> 00:31:35.740
So we have thousands of samples for all of the Google Cloud


00:31:35.740 --> 00:31:37.940
products, just for Python.


00:31:37.940 --> 00:31:39.940
But we have them in other languages, too.


00:31:39.940 --> 00:31:42.780
And they're located across hundreds of repos.


00:31:42.780 --> 00:31:45.100
This happens to be one repo that has


00:31:45.100 --> 00:31:47.300
samples for multiple products.


00:31:47.300 --> 00:31:51.340
But we have other repos where things are stored, too.


00:31:51.340 --> 00:31:54.220
So to ensure that there's consistency


00:31:54.220 --> 00:31:57.580
and that my group of engineers, my colleagues and I,


00:31:57.580 --> 00:31:59.380
actually have time to do our work


00:31:59.380 --> 00:32:02.900
and function as humans outside of work too.


00:32:02.900 --> 00:32:05.140
We use a lot of automation.


00:32:05.140 --> 00:32:07.060
So we use a lot of bots to do things


00:32:07.060 --> 00:32:08.940
like keep our dependencies up to date,


00:32:08.940 --> 00:32:13.300
check for license headers, auto-assign PRs for reviewing,


00:32:13.300 --> 00:32:16.940
syncing repositories with centralized configurations,


00:32:16.940 --> 00:32:20.020
and even more, which is pretty great.


00:32:20.020 --> 00:32:22.900
And this is actually where the pinning requirements comes in.


00:32:22.900 --> 00:32:25.780
We very strongly believe in pinning requirements


00:32:25.780 --> 00:32:28.540
because it makes the samples easier to maintain


00:32:28.540 --> 00:32:31.260
and test against, and it's easier to go back


00:32:31.260 --> 00:32:34.380
to the product and say, hey, you just pushed


00:32:34.380 --> 00:32:36.280
a release candidate for your product


00:32:36.280 --> 00:32:38.380
and it broke your samples.


00:32:38.380 --> 00:32:41.660
It wasn't supposed to, what gives,


00:32:41.660 --> 00:32:43.900
rather than finding out mysteriously


00:32:43.900 --> 00:32:46.060
when getting a customer issue.


00:32:46.060 --> 00:32:49.140
So then to keep it up to date, we use a bot,


00:32:49.140 --> 00:32:51.880
and these are some pull requests recently opened


00:32:51.880 --> 00:32:54.340
by the bot of some dependencies.


00:32:54.340 --> 00:32:56.840
They get double-checked to make sure everything looks good


00:32:56.840 --> 00:32:58.540
by human and merged.


00:32:58.540 --> 00:33:00.320
It's pretty great.


00:33:00.320 --> 00:33:04.320
And then we actually have a team of engineers in DevRel


00:33:04.320 --> 00:33:07.820
that works on making GitHub bots that we use,


00:33:07.820 --> 00:33:09.660
and that is totally open source.


00:33:09.660 --> 00:33:11.760
You can see some of the ones that we use,


00:33:11.760 --> 00:33:14.160
like we have our license header one.


00:33:14.160 --> 00:33:18.300
The sync repo settings allows us to have a single source of truth


00:33:18.300 --> 00:33:21.440
for our configuration for all of our Python repos.


00:33:21.440 --> 00:33:25.440
and then it makes sure it gets synced across all of them.


00:33:25.440 --> 00:33:26.280
It's pretty great.


00:33:26.280 --> 00:33:28.360
I really don't know how I would function


00:33:28.360 --> 00:33:31.200
without all of my bot friends.


00:33:31.200 --> 00:33:32.240
This is super cool.


00:33:32.240 --> 00:33:34.800
I can just imagine how much work it


00:33:34.800 --> 00:33:37.200
is to keep all of those different things in sync.


00:33:37.200 --> 00:33:42.240
And I have worked recently on projects where I'm like, OK,


00:33:42.240 --> 00:33:43.660
I've got to integrate this library.


00:33:43.660 --> 00:33:45.160
I'm going to go to the documentation.


00:33:45.160 --> 00:33:48.800
And I try to use the one or two functions


00:33:48.800 --> 00:33:49.840
that the whole thing does.


00:33:49.840 --> 00:33:52.200
and it's like, nope, that parameter doesn't exist


00:33:52.200 --> 00:33:53.320
or you're missing some parameter.


00:33:53.320 --> 00:33:56.800
You're like, come on, at least just keep the signature.


00:33:56.800 --> 00:34:00.360
You know, it's, of course it's something like star args,


00:34:00.360 --> 00:34:01.400
star star KW args.


00:34:01.400 --> 00:34:03.440
It's not like, oh, I can just look in my ID and see,


00:34:03.440 --> 00:34:06.040
oh yeah, it says it takes like, use security,


00:34:06.040 --> 00:34:07.200
use SSL, yes or no.


00:34:07.200 --> 00:34:11.020
Like no, it's unknown without the documentation basically.


00:34:11.020 --> 00:34:12.840
- Yeah. - This is awesome.


00:34:12.840 --> 00:34:13.680
- Thank you.


00:34:13.680 --> 00:34:15.680
I think so too, I'm very grateful to it.


00:34:15.680 --> 00:34:17.680
And yeah, for our dependency bot,


00:34:17.680 --> 00:34:19.220
we do use an external one.


00:34:19.220 --> 00:34:21.620
I know, I think GitHub is the one that does Dependabot.


00:34:21.620 --> 00:34:24.660
We, in particular, use Whitesource Renovate Bot.


00:34:24.660 --> 00:34:26.740
It's what we were using when I started,


00:34:26.740 --> 00:34:28.340
and that works very well, too,


00:34:28.340 --> 00:34:31.060
and they're very nice and responsive to issues.


00:34:31.060 --> 00:34:31.900
- Oh, that's fantastic.


00:34:31.900 --> 00:34:32.720
- Yeah.


00:34:32.720 --> 00:34:34.100
- Yeah, Dependabot was fairly new,


00:34:34.100 --> 00:34:36.680
and then it was bought quite recently by GitHub,


00:34:36.680 --> 00:34:40.600
so I can imagine you were all doing something before then.


00:34:40.600 --> 00:34:43.300
- Probably, but I know I have friends who use that, too,


00:34:43.300 --> 00:34:44.120
and they're great.


00:34:44.120 --> 00:34:45.980
Using a dependency bot, I would say,


00:34:45.980 --> 00:34:48.320
if you need a starter bot for any of them,


00:34:48.320 --> 00:34:51.440
the dependency bot is a great place to start.


00:34:51.440 --> 00:34:52.420
- Yeah, that's fantastic.


00:34:52.420 --> 00:34:55.120
I recently switched to pip-tools and PipCompile


00:34:55.120 --> 00:34:58.480
to generate my requirements with pinned versions and stuff.


00:34:58.480 --> 00:34:59.320
- Nice.


00:34:59.320 --> 00:35:01.480
- Before that I was all about the pin to bot telling me


00:35:01.480 --> 00:35:05.320
if it's something new is up out and seeking that.


00:35:05.320 --> 00:35:06.160
- Nice.


00:35:06.160 --> 00:35:07.160
- Yeah.


00:35:07.160 --> 00:35:08.520
- pip-tools rocks.


00:35:08.520 --> 00:35:10.720
- Yeah, it definitely does.


00:35:10.720 --> 00:35:12.080
Brian, there's a lot of cool automation here.


00:35:12.080 --> 00:35:13.280
What do you think?


00:35:13.280 --> 00:35:15.360
- I'm excited about looking through all of these.


00:35:15.360 --> 00:35:17.560
I love looking at bots because it-


00:35:17.560 --> 00:35:18.400
- I know.


00:35:18.400 --> 00:35:20.580
- The whole idea about a bot is to do,


00:35:20.580 --> 00:35:24.040
is like the Unix philosophy of do one thing and do it well.


00:35:24.040 --> 00:35:25.080
- Yes. - Yeah.


00:35:25.080 --> 00:35:25.920
- I love that.


00:35:25.920 --> 00:35:27.680
- Have something else do it and not you do it,


00:35:27.680 --> 00:35:28.920
which is even better. - Oh yeah.


00:35:28.920 --> 00:35:31.360
All of our bots are based on like,


00:35:31.360 --> 00:35:34.080
oh gosh, we're doing this one thing over and over


00:35:34.080 --> 00:35:35.820
and we're not doing it well


00:35:35.820 --> 00:35:37.580
because we're doing it manually.


00:35:37.580 --> 00:35:39.880
So how can we like use automation


00:35:39.880 --> 00:35:41.520
to make sure we're doing it consistently?


00:35:41.520 --> 00:35:43.940
And it's just a lot of time.


00:35:43.940 --> 00:35:45.480
- Like one of the things you've got in here


00:35:45.480 --> 00:35:47.600
that's shown right now is label sync.


00:35:47.600 --> 00:35:49.280
So one of the nice things about,


00:35:49.280 --> 00:35:52.540
one of the interesting things about different groups


00:35:52.540 --> 00:35:54.740
workflows is to have different labels


00:35:54.740 --> 00:35:56.180
that mean different things.


00:35:56.180 --> 00:35:58.140
But when you open a new repo,


00:35:58.140 --> 00:35:59.500
it doesn't have all those labels.


00:35:59.500 --> 00:36:02.980
So being able to sync those labels across an organization.


00:36:02.980 --> 00:36:07.300
- Like needs triage, good first contribution,


00:36:07.300 --> 00:36:08.700
all those kinds of things, right?


00:36:08.700 --> 00:36:11.820
- Yeah, as I said, we have hundreds of repos


00:36:11.820 --> 00:36:15.340
just for Python and we use things like we have labels


00:36:15.340 --> 00:36:19.540
that say what API something belongs to.


00:36:19.540 --> 00:36:22.680
And that helps with the auto assign bot


00:36:22.680 --> 00:36:24.260
to make sure that issues and PRs


00:36:24.260 --> 00:36:26.100
get routed to the right team.


00:36:26.100 --> 00:36:28.540
Otherwise you're having a human do all that triage,


00:36:28.540 --> 00:36:32.780
which is fine, but doesn't scale super well in our use case.


00:36:32.780 --> 00:36:33.620
- Yeah.


00:36:33.620 --> 00:36:35.620
- Yeah, and adding a label is really easy


00:36:35.620 --> 00:36:38.580
in a, to an issue or something.


00:36:38.580 --> 00:36:41.100
So having a bot that looks at label changes


00:36:41.100 --> 00:36:43.260
and just does an action based on that


00:36:43.260 --> 00:36:45.380
is a brilliant use of time.


00:36:45.380 --> 00:36:47.580
- Yep, highly recommend.


00:36:47.580 --> 00:36:48.460
- Yeah, fantastic.


00:36:48.460 --> 00:36:49.300
This is great.


00:36:49.300 --> 00:36:51.580
And you have an install link next to all of them.


00:36:51.580 --> 00:36:52.640
Does that mean I just click that


00:36:52.640 --> 00:36:55.100
and install it into one of my repos?


00:36:55.100 --> 00:36:57.340
- I believe that is the intent.


00:36:57.340 --> 00:36:58.180
And if it doesn't work,


00:36:58.180 --> 00:36:59.620
you should open an issue on this repo


00:36:59.620 --> 00:37:01.960
because my colleagues are very responsive.


00:37:01.960 --> 00:37:02.800
- Fantastic.


00:37:02.800 --> 00:37:03.640
All right.


00:37:03.640 --> 00:37:06.140
- Now we just need bots to generate bots.


00:37:06.140 --> 00:37:08.380
- Honestly, if my colleagues told me


00:37:08.380 --> 00:37:09.740
they were working on that in this repo,


00:37:09.740 --> 00:37:11.780
I wouldn't be surprised, but I don't know.


00:37:12.700 --> 00:37:13.820
- A meta bot.


00:37:13.820 --> 00:37:14.860
- Yeah.


00:37:14.860 --> 00:37:16.120
- Fantastic.


00:37:16.120 --> 00:37:20.060
All right, well, how about some extras?


00:37:20.060 --> 00:37:21.980
Brian, you got anything extra you wanna share


00:37:21.980 --> 00:37:24.140
while we're here before we call it a show?


00:37:24.140 --> 00:37:26.140
- No, just I'm fighting a cold


00:37:26.140 --> 00:37:27.820
and hopefully that'll all be over.


00:37:27.820 --> 00:37:30.140
- All right, well. - Feel better soon.


00:37:30.140 --> 00:37:31.640
- Yeah, maybe some sort of audit thing.


00:37:31.640 --> 00:37:33.040
We'll check your health status.


00:37:33.040 --> 00:37:34.540
We can run that next to you.


00:37:34.540 --> 00:37:37.500
Leah, anything else you wanna share with us?


00:37:37.500 --> 00:37:39.260
- Oh, I mean, on Twitter earlier,


00:37:39.260 --> 00:37:41.380
we were talking about HTTP status codes


00:37:41.380 --> 00:37:43.860
and it reminded me of still my forever reference


00:37:43.860 --> 00:37:47.700
for HTTP status codes is http.cat.


00:37:47.700 --> 00:37:50.260
- Yes, http.cat is fantastic.


00:37:50.260 --> 00:37:51.460
- It's so good.


00:37:51.460 --> 00:37:52.280
- It is so good.


00:37:52.280 --> 00:37:54.300
Let me share a few non-funny things


00:37:54.300 --> 00:37:56.060
and then we'll mix that in with our joke.


00:37:56.060 --> 00:37:57.860
How's that? - Please do.


00:37:57.860 --> 00:37:58.980
- Fantastic, all right.


00:37:58.980 --> 00:38:04.780
The first one has to do with, speaking of GitHub,


00:38:04.780 --> 00:38:06.500
another cool GitHub thing.


00:38:06.500 --> 00:38:08.100
You know you could press a dot


00:38:08.100 --> 00:38:09.480
and that would do certain things.


00:38:09.480 --> 00:38:12.120
This only works if you're signed in.


00:38:12.120 --> 00:38:14.440
But now there's a command palette.


00:38:14.440 --> 00:38:17.160
This idea of command palettes are becoming popular in UIs.


00:38:17.160 --> 00:38:18.840
We've got it in VS Code.


00:38:18.840 --> 00:38:22.240
We've got it in like Superhuman, the email.


00:38:22.240 --> 00:38:26.040
And often you get them by pressing Command K or Control K.


00:38:26.040 --> 00:38:27.240
And now you have that for GitHub.


00:38:27.240 --> 00:38:32.320
So if I were on a repo where I could do stuff to it, I could hit Command K and then it will


00:38:32.320 --> 00:38:34.080
say what do you want to do?


00:38:34.080 --> 00:38:35.720
Search or jump to.


00:38:35.720 --> 00:38:38.580
I can go to pages, issues.


00:38:38.580 --> 00:38:42.320
I could look for, let's see, look for the app.


00:38:42.320 --> 00:38:44.200
If I just type app, it'll search for those.


00:38:44.200 --> 00:38:46.940
I could search for all sorts of things here,


00:38:46.940 --> 00:38:49.360
and boom, it takes me and shows me all the apps.


00:38:49.360 --> 00:38:50.360
Isn't that cool?


00:38:50.360 --> 00:38:51.320
- That's so cool.


00:38:51.320 --> 00:38:54.400
- Command palette, yeah, that's now a thing.


00:38:54.400 --> 00:38:55.520
- That's beautiful.


00:38:55.520 --> 00:38:57.360
- And you could just, I mean, no mouse.


00:38:57.360 --> 00:38:59.640
I'm here, I'm in this repo, the top level,


00:38:59.640 --> 00:39:02.040
Command + K, down arrow, two times to enter,


00:39:02.040 --> 00:39:03.100
I'm on the issues.


00:39:03.100 --> 00:39:04.440
- Oh my gosh.


00:39:04.440 --> 00:39:05.280
- Yeah.


00:39:05.280 --> 00:39:06.100
- Love to see it.


00:39:06.100 --> 00:39:07.200
- Yeah, so that's a good one.


00:39:07.200 --> 00:39:15.460
The other one, the other extra is Python 3.10.1 is out, released December 6th, so as in two


00:39:15.460 --> 00:39:16.460
days ago.


00:39:16.460 --> 00:39:19.580
It's got a fun little snake with a hat on.


00:39:19.580 --> 00:39:22.020
I'm not sure about 3.10.


00:39:22.020 --> 00:39:23.100
So let me describe.


00:39:23.100 --> 00:39:24.940
I can cover the entire release for you.


00:39:24.940 --> 00:39:29.200
So Python 3.10.1 is the newest major release of the Python programming languages.


00:39:29.200 --> 00:39:32.900
It contains many features and optimizations.


00:39:32.900 --> 00:39:34.460
So now you all know what's in it.


00:39:34.460 --> 00:39:36.460
It's very vague.


00:39:36.460 --> 00:39:37.300
- Sweet.


00:39:37.300 --> 00:39:38.120
- Very, very well.


00:39:38.120 --> 00:39:38.960
(laughs)


00:39:38.960 --> 00:39:42.000
Apparently it has 300 commits of changes and fixes.


00:39:42.000 --> 00:39:44.540
One thing I would, I wanted to know,


00:39:44.540 --> 00:39:46.980
are there security updates, yes or no?


00:39:46.980 --> 00:39:50.080
Like, should I, like, should I install this if I'm curious


00:39:50.080 --> 00:39:52.500
or should I install this now before tomorrow


00:39:52.500 --> 00:39:55.560
because someone's gonna start poking around.


00:39:55.560 --> 00:39:57.180
I would love if it would say that.


00:39:57.180 --> 00:39:58.940
There's a great thing about the major features,


00:39:58.940 --> 00:40:01.860
but that's just 310, not the point is, so.


00:40:01.860 --> 00:40:03.900
- I'll have to check it out.


00:40:03.900 --> 00:40:05.660
- Anyway, still good.


00:40:05.660 --> 00:40:08.720
- Yeah, we've been having fun making all of our GCP samples,


00:40:08.720 --> 00:40:10.740
making sure they're 3.10 compatible,


00:40:10.740 --> 00:40:13.180
which we're getting there.


00:40:13.180 --> 00:40:16.380
It's all waiting for certain dependencies to be ready.


00:40:16.380 --> 00:40:18.660
But a lot of fun, very exciting to see.


00:40:18.660 --> 00:40:19.780
- Yeah, that's awesome.


00:40:19.780 --> 00:40:21.300
- Well, you can look at the changelog.


00:40:21.300 --> 00:40:23.220
So if you look at the changelog,


00:40:23.220 --> 00:40:24.860
you can see 3.10 more than stuff.


00:40:24.860 --> 00:40:25.700
- Okay.


00:40:25.700 --> 00:40:27.020
I can.


00:40:27.020 --> 00:40:30.140
- Okay, go up a little bit.


00:40:30.140 --> 00:40:31.700
- Full changelog there, maybe?


00:40:31.700 --> 00:40:33.260
- Yeah.


00:40:33.260 --> 00:40:34.080
- Yeah, that's true.


00:40:34.080 --> 00:40:37.320
I can't go to the change log there and check that out.


00:40:37.320 --> 00:40:39.480
- But having a security thing would be--


00:40:39.480 --> 00:40:40.320
- Yeah, just like--


00:40:40.320 --> 00:40:41.640
- A TLDR.


00:40:41.640 --> 00:40:43.680
- Yeah, exactly, exactly, cool.


00:40:43.680 --> 00:40:46.360
- Well, and also a lot of people didn't wanna try 3.10


00:40:46.360 --> 00:40:48.440
until we got one patch release.


00:40:48.440 --> 00:40:50.840
So now we have one patch release, so there's no excuse.


00:40:50.840 --> 00:40:51.960
- Now it's safe.


00:40:51.960 --> 00:40:54.080
I have been running it for a day in production


00:40:54.080 --> 00:40:55.400
and it seems okay.


00:40:55.400 --> 00:40:58.000
Put it on one site to see if it would hang in there,


00:40:58.000 --> 00:40:59.100
it seems fine.


00:40:59.100 --> 00:41:00.160
So we're okay.


00:41:00.160 --> 00:41:01.000
- Yeah.


00:41:01.000 --> 00:41:02.920
All right, the samples that are using it are doing fine.


00:41:02.920 --> 00:41:05.040
They've had passing periodic builds for a while.


00:41:05.040 --> 00:41:06.480
- Yeah, fantastic.


00:41:06.480 --> 00:41:08.080
All right, are you ready for some cat news?


00:41:08.080 --> 00:41:09.480
- No, I'm ready, sorry.


00:41:09.480 --> 00:41:12.280
- Yes, I mean, we started our conversation off today


00:41:12.280 --> 00:41:14.080
talking about cats and--


00:41:14.080 --> 00:41:14.960
- It's true.


00:41:14.960 --> 00:41:15.840
- Before we hit record,


00:41:15.840 --> 00:41:18.280
so I feel like we should round that out, yeah?


00:41:18.280 --> 00:41:19.360
- Definitely.


00:41:19.360 --> 00:41:22.440
- So first of all, httpstatuses.com


00:41:22.440 --> 00:41:25.680
is a fantastic place to go learn about the real meaning


00:41:25.680 --> 00:41:28.360
or the official meaning, let's say, of status code.


00:41:28.360 --> 00:41:30.560
So for example, there's 100 continue,


00:41:30.560 --> 00:41:31.920
and if you want details, you click on that,


00:41:31.920 --> 00:41:33.840
it actually pulls this all up, even shows you


00:41:33.840 --> 00:41:37.320
like the enum in Python, if you wanted to use that.


00:41:37.320 --> 00:41:38.680
- Oh my gosh, I love that.


00:41:38.680 --> 00:41:39.720
- Isn't that cool?


00:41:39.720 --> 00:41:41.800
It gives you the meaning like, 100 continue,


00:41:41.800 --> 00:41:43.960
the initial part of a request has been received


00:41:43.960 --> 00:41:47.100
and has not yet been rejected by the server.


00:41:47.100 --> 00:41:50.560
The server intends to send a final response eventually.


00:41:50.560 --> 00:41:54.240
And so there's other ones like 200 okay, 201 created,


00:41:54.240 --> 00:41:55.640
let's see, what else should I point out?


00:41:55.640 --> 00:42:00.640
304, cache not modified, 400 bad request.


00:42:01.640 --> 00:42:02.480
- Bad.


00:42:02.480 --> 00:42:04.420
- 404 not found, 403 forbidden.


00:42:04.420 --> 00:42:08.260
500 internal server error.


00:42:08.260 --> 00:42:09.100
Yep, 418.


00:42:09.100 --> 00:42:10.240
- 418.


00:42:10.240 --> 00:42:11.080
- Yeah.


00:42:11.080 --> 00:42:11.900
- And 502 bad gateway.


00:42:11.900 --> 00:42:14.600
Okay, so let's do yours firstly.


00:42:14.600 --> 00:42:17.100
So I put out this joke and you said,


00:42:17.100 --> 00:42:20.500
"This is good, but oh my goodness, cat."


00:42:20.500 --> 00:42:24.700
- Yeah, so when I was doing my computer science degree,


00:42:24.700 --> 00:42:28.000
a friend shared with me http.cat


00:42:28.000 --> 00:42:30.360
when we were learning about HTTP status codes.


00:42:30.360 --> 00:42:33.620
And if you go there, you will find one cat


00:42:33.620 --> 00:42:37.840
per HTTP status code representing what is going on.


00:42:37.840 --> 00:42:40.400
And I'm not gonna lie to you, in my professional career,


00:42:40.400 --> 00:42:44.080
I still use it as a reference because it's my favorite one.


00:42:44.080 --> 00:42:46.240
- And you can even, if you go to like,


00:42:46.240 --> 00:42:51.240
HTTP.cat/200, it returns a JPEG of a cat that's like, okay.


00:42:51.240 --> 00:42:52.520
- Yeah, exactly.


00:42:52.520 --> 00:42:55.000
And you can do that for all of the status codes.


00:42:55.000 --> 00:42:58.580
- 201, the cat has walked through some wet cement


00:42:58.580 --> 00:43:02.940
and that's too uncreated for a chance.


00:43:02.940 --> 00:43:04.340
Let's see what else we got in here.


00:43:04.340 --> 00:43:05.300
Some good ones.


00:43:05.300 --> 00:43:08.900
404 not modify, 304, sorry.


00:43:08.900 --> 00:43:12.820
The 404, the cat is hiding under some wrapping, not found.


00:43:12.820 --> 00:43:13.660
Fantastic.


00:43:13.660 --> 00:43:14.480
Yeah, I love this.


00:43:14.480 --> 00:43:16.980
I had not heard about this and it's glorious.


00:43:16.980 --> 00:43:19.300
- Well, wait, is there a 418?


00:43:19.300 --> 00:43:20.140
- There is.


00:43:20.140 --> 00:43:20.980
- Of course there is.


00:43:20.980 --> 00:43:22.400
- I'm a teapot, cool.


00:43:22.400 --> 00:43:24.180
- A kitten in a teapot.


00:43:24.180 --> 00:43:25.580
- Literally inside of a teapot.


00:43:25.580 --> 00:43:26.420
All right.


00:43:27.500 --> 00:43:32.500
So I saw the joke by Breen, who is John Breen,


00:43:32.500 --> 00:43:35.420
and thought, that's really funny.


00:43:35.420 --> 00:43:39.400
What he did is he put his own personal take


00:43:39.400 --> 00:43:40.720
on what status code means,


00:43:40.720 --> 00:43:41.900
and I thought they were hilarious,


00:43:41.900 --> 00:43:44.220
but I thought, you know, let me take a shot at this as well,


00:43:44.220 --> 00:43:46.340
a little more Python focused.


00:43:46.340 --> 00:43:48.220
So I, I'll link to my tweet,


00:43:48.220 --> 00:43:51.780
I put this set of colloquial meanings


00:43:51.780 --> 00:43:53.460
of the HTTP status code.


00:43:53.460 --> 00:43:54.900
All right, you all ready for this?


00:43:54.900 --> 00:43:55.740
- Yeah.


00:43:55.740 --> 00:43:56.560
- So. - Let's do it.


00:43:56.560 --> 00:43:58.040
Here it is, what's up?


00:43:58.040 --> 00:43:59.520
(laughs)


00:43:59.520 --> 00:44:01.040
All good?


00:44:01.040 --> 00:44:02.960
201, hello creator.


00:44:02.960 --> 00:44:07.960
304, not modified or cached, is same old, same old.


00:44:07.960 --> 00:44:10.920
403, permission denied, it's get off my lawn kids.


00:44:10.920 --> 00:44:12.160
- That one was my favorite.


00:44:12.160 --> 00:44:13.520
(laughs)


00:44:13.520 --> 00:44:17.040
- 404 is just, there's no message, it's just not there.


00:44:17.040 --> 00:44:20.040
It's not that that's the message, but it's just blank.


00:44:20.040 --> 00:44:22.240
500 is, we're bad at APIs.


00:44:22.240 --> 00:44:23.240
- I love that.


00:44:23.240 --> 00:44:25.120
- 400 is, you're bad at APIs.


00:44:25.120 --> 00:44:25.960
- Yes.


00:44:25.960 --> 00:44:32.360
The real cardinal sin of APIs is 200, but in the body, there's a JSON that says error


00:44:32.360 --> 00:44:33.360
and a reason.


00:44:33.360 --> 00:44:38.200
200, but with error text, we're really bad at APIs.


00:44:38.200 --> 00:44:43.480
502, we're bad at deployment or DevOps because part of the infrastructure can't get to the


00:44:43.480 --> 00:44:45.720
other part.


00:44:45.720 --> 00:44:50.240
And Brian's favorite, 418, is it already April again?


00:44:50.240 --> 00:44:55.120
Because the reason is that was actually put into the spec as an April Fool's joke and


00:44:55.120 --> 00:44:59.140
they left it. I'm a teapot. I love that they left it. I do too.


00:44:59.140 --> 00:45:04.360
I do too. It's like a, like import this,


00:45:04.360 --> 00:45:08.200
it's just stuff that's fun that should just always be there. Yeah.


00:45:08.200 --> 00:45:10.640
What's the harm? What's the harm? Just leave it there.


00:45:10.640 --> 00:45:15.840
Anthony, the live stream has some feedback for you, Leah.


00:45:15.840 --> 00:45:18.840
He said status codes using cats. Well, I never,


00:45:18.840 --> 00:45:23.760
I mean where there's internet, there is cats. No, of course.


00:45:23.800 --> 00:45:27.260
- Why we created the internet in the first place for cats.


00:45:27.260 --> 00:45:29.280
- Exactly.


00:45:29.280 --> 00:45:31.760
All right, well, I think that's it for our show.


00:45:31.760 --> 00:45:33.640
Brian, thanks for being here as always.


00:45:33.640 --> 00:45:34.960
Leah, thanks for joining us.


00:45:34.960 --> 00:45:35.840
- Thank you for having me.


00:45:35.840 --> 00:45:37.120
Thanks for listening, everyone.


00:45:37.120 --> 00:45:38.240
- Yeah, you bet.


00:45:38.240 --> 00:45:39.160
See you all later.

