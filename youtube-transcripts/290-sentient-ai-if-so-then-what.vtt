WEBVTT

00:00:00.000 --> 00:00:09.560
Hey, YouTube. Hey, Brian. Hey, Nick. Hey, guys. Great to be here with you on YouTube


00:00:09.560 --> 00:00:17.320
as always. Ready to kick off the show? Definitely. Yeah, let's do it. All right. Let's do it.


00:00:17.320 --> 00:00:21.440
Hello and welcome to Python Bytes where we deliver Python news and headlines directly


00:00:21.440 --> 00:00:29.280
to your earbuds. This is episode 290, recorded June 28th, 2022. I'm Michael Kennedy. And


00:00:29.280 --> 00:00:30.440
And I am Brian Okken.


00:00:30.440 --> 00:00:32.760
- And I'm Nick Moll.


00:00:32.760 --> 00:00:36.080
- Nick, it's so great to have you back.


00:00:36.080 --> 00:00:37.320
Thanks for being here.


00:00:37.320 --> 00:00:39.160
- Thank you for having me.


00:00:39.160 --> 00:00:40.960
Super excited to be back.


00:00:40.960 --> 00:00:43.080
- Yeah, it's like I said, great to have you back.


00:00:43.080 --> 00:00:46.360
You always send us really fun topics and say,


00:00:46.360 --> 00:00:47.960
"Hey, you should think about covering this


00:00:47.960 --> 00:00:49.280
and covering that."


00:00:49.280 --> 00:00:51.080
And so we really appreciate that.


00:00:51.080 --> 00:00:52.920
But sometimes it's better if we could just have you


00:00:52.920 --> 00:00:55.320
to tell here to tell people about it.


00:00:55.320 --> 00:00:58.200
We actually had you on episode 239.


00:00:58.200 --> 00:01:01.000
talked about JupyterLite in my pie and that was fun,


00:01:01.000 --> 00:01:04.240
but that was also over a year ago.


00:01:04.240 --> 00:01:06.760
- Yeah, yeah.


00:01:06.760 --> 00:01:07.600
- Wow.


00:01:07.600 --> 00:01:08.840
- Yeah, of course.


00:01:08.840 --> 00:01:11.680
It takes the community to build this great podcast.


00:01:11.680 --> 00:01:13.840
So I'm glad to be part of it.


00:01:13.840 --> 00:01:14.660
- Yeah, thanks.


00:01:14.660 --> 00:01:16.160
What have you been up to in the last year?


00:01:16.160 --> 00:01:21.120
- Well, I've been doing a lot of traveling.


00:01:21.120 --> 00:01:25.200
Thankfully, since now COVID is less more of an issue,


00:01:25.200 --> 00:01:27.040
got to go to PyCon.


00:01:27.040 --> 00:01:28.840
So I got the PyCon shirt right here.


00:01:28.840 --> 00:01:31.880
- Yeah, yeah, did you enjoy your time there?


00:01:31.880 --> 00:01:35.160
- Oh, it was amazing, loved it, completely loved it.


00:01:35.160 --> 00:01:39.240
I kept on telling everybody it was my geek holiday,


00:01:39.240 --> 00:01:41.320
like you always say, and you know,


00:01:41.320 --> 00:01:43.080
we're like, yeah, it is our geek holiday.


00:01:43.080 --> 00:01:44.560
So it totally is.


00:01:44.560 --> 00:01:46.400
- Yeah, totally awesome.


00:01:46.400 --> 00:01:49.480
I'm really glad that you got to go and you had a good time.


00:01:49.480 --> 00:01:51.560
So super cool.


00:01:51.560 --> 00:01:53.300
Brian, you wanna kick us off,


00:01:53.300 --> 00:01:56.480
but let's just start small this time, okay?


00:01:56.480 --> 00:02:01.480
- Really small, like nano or maybe Pico.


00:02:01.480 --> 00:02:02.840
- Pico, Pico.


00:02:02.840 --> 00:02:04.040
- We'll do Pico.


00:02:04.040 --> 00:02:07.320
So Pico logging is a,


00:02:07.320 --> 00:02:10.560
so I was Anthony Shaw, friend of the show


00:02:10.560 --> 00:02:14.900
and all around workaholic apparently, as far as I can tell,


00:02:14.900 --> 00:02:19.240
blogged out that there's a, not blogged,


00:02:19.240 --> 00:02:23.120
he sent out on Twitter something about Pico logging


00:02:24.320 --> 00:02:25.580
And there was a tweet says,


00:02:25.580 --> 00:02:30.140
Pico logging uses a modern extension module tool chain


00:02:30.140 --> 00:02:32.300
with a scikit build and CMake.


00:02:32.300 --> 00:02:34.180
So I was interested in,


00:02:34.180 --> 00:02:36.260
I haven't looked into the tool chain yet.


00:02:36.260 --> 00:02:39.980
I'm just looking at Pico logging because it's cool.


00:02:39.980 --> 00:02:41.020
I was taking a look at it.


00:02:41.020 --> 00:02:46.020
So Pico logging is a fairly new library


00:02:46.020 --> 00:02:51.920
that is, and Anthony says it's in early alpha stage.


00:02:51.920 --> 00:02:54.140
There's some incomplete features,


00:02:54.140 --> 00:02:56.420
but I'm ready to use it right now


00:02:56.420 --> 00:03:00.020
because it says you do, it just is a drop,


00:03:00.020 --> 00:03:03.820
essentially a drop in for the built-in logging module,


00:03:03.820 --> 00:03:06.660
but it's four to 10 times faster.


00:03:06.660 --> 00:03:08.580
Why wouldn't you want faster?


00:03:08.580 --> 00:03:11.180
So, and logging is pretty fast to begin with.


00:03:11.180 --> 00:03:13.500
So that's pretty cool.


00:03:13.500 --> 00:03:14.860
So let's take a look at it.


00:03:14.860 --> 00:03:20.060
The usage is basically just say import PicoLogging as logging


00:03:20.060 --> 00:03:24.640
And now you've got just like your normal logging.


00:03:24.640 --> 00:03:27.760
You set up a basic config and you can write info


00:03:27.760 --> 00:03:30.600
and warnings and that's about it.


00:03:30.600 --> 00:03:32.880
There's, you know, why not?


00:03:32.880 --> 00:03:34.440
So let's take a look at it.


00:03:34.440 --> 00:03:35.480
It says it's faster.


00:03:35.480 --> 00:03:38.240
So the benchmarks are all cut off.


00:03:38.240 --> 00:03:41.360
So I'm gonna make the screen a little bit.


00:03:41.360 --> 00:03:42.260
Yeah, there we go.


00:03:42.260 --> 00:03:45.760
They're a little bit hard to read,


00:03:45.760 --> 00:03:48.880
but what this means is the first on the left,


00:03:48.880 --> 00:03:52.600
I believe it's the time for the normal logging


00:03:52.600 --> 00:03:57.600
and then how much faster the faster one is.


00:03:57.600 --> 00:04:00.860
I haven't dug into the logging stuff,


00:04:00.860 --> 00:04:03.080
but basically for different parts of it


00:04:03.080 --> 00:04:05.320
or the benchmark stuff too much,


00:04:05.320 --> 00:04:08.080
but yeah, for different parts of it,


00:04:08.080 --> 00:04:09.680
you can see how much faster it is.


00:04:09.680 --> 00:04:13.080
So anyway, why not?


00:04:13.080 --> 00:04:16.520
I was taking, yeah, just,


00:04:16.520 --> 00:04:18.020
I'm just gonna start using it.


00:04:18.020 --> 00:04:19.180
(laughs)


00:04:19.180 --> 00:04:20.180
- Sure, why not?


00:04:20.180 --> 00:04:22.300
And one of the things that I think is interesting


00:04:22.300 --> 00:04:25.480
is obviously not specific to this situation,


00:04:25.480 --> 00:04:30.500
but as I think about some of the patterns


00:04:30.500 --> 00:04:32.460
that people use all over the place,


00:04:32.460 --> 00:04:35.140
different languages and technologies and so on,


00:04:35.140 --> 00:04:38.300
that don't necessarily make their way over to Python,


00:04:38.300 --> 00:04:42.980
for example, maybe like dependency injection


00:04:42.980 --> 00:04:45.260
and IOC containers and all of that.


00:04:45.260 --> 00:04:47.400
And I know that it does appear in certain places


00:04:47.400 --> 00:04:50.800
in like limited ways, but nothing like C# and Java,


00:04:50.800 --> 00:04:53.880
like those are all about dependency injection.


00:04:53.880 --> 00:04:56.200
That thing where you say, where they say,


00:04:56.200 --> 00:04:59.720
"From Pico logging import,"


00:04:59.720 --> 00:05:04.180
or "Import Pico logging as logging," right?


00:05:04.180 --> 00:05:07.000
That's kind of a really nice way to just say,


00:05:07.000 --> 00:05:10.800
"Right now I want to use this implementation of logging


00:05:10.800 --> 00:05:14.280
versus another without going through all the hoops


00:05:14.280 --> 00:05:15.120
and stuff," right?


00:05:15.120 --> 00:05:18.320
I'm just thinking, that one line right there


00:05:18.320 --> 00:05:21.760
is why we don't see a lot of that complexity.


00:05:21.760 --> 00:05:23.360
I never really sort of tied that together,


00:05:23.360 --> 00:05:24.960
but it's kind of neat, right?


00:05:24.960 --> 00:05:27.760
- Yeah, it's essentially that's dependency injection,


00:05:27.760 --> 00:05:30.000
but we don't call it that, right?


00:05:30.000 --> 00:05:31.600
So, interesting.


00:05:31.600 --> 00:05:33.120
- You don't have to have all the complexity


00:05:33.120 --> 00:05:37.520
and config and register who's doing what and so on.


00:05:37.520 --> 00:05:38.160
- Right.


00:05:38.160 --> 00:05:40.720
- Sorry, Brian, didn't mean to cut you off.


00:05:40.720 --> 00:05:42.000
- No, it's okay, Nick.


00:05:42.000 --> 00:05:48.560
Oh, yeah, I saw this tweet and I found it really interesting.


00:05:48.560 --> 00:05:55.200
But to your point, Michael, dependency injection is not really popular around Python, but the


00:05:55.200 --> 00:05:59.840
library I think that the most popular library that I can think of that uses it is pytest.


00:05:59.840 --> 00:06:04.280
A bit with the fixtures, right?


00:06:04.280 --> 00:06:07.000
Yeah, and the way they do it is so seamless.


00:06:07.000 --> 00:06:10.880
But you're right, dependency injection is something that we don't commonly have in Python


00:06:10.880 --> 00:06:15.760
because Python is dynamic enough that you don't really need it.


00:06:15.760 --> 00:06:21.680
One thing I would say is that even though I love the performance benchmarks,


00:06:21.680 --> 00:06:28.720
I feel like the change that Anthony is going for with the performance


00:06:28.720 --> 00:06:33.920
would warrant a new API for logging.


00:06:33.920 --> 00:06:36.240
I feel like it warrants it.


00:06:36.240 --> 00:06:41.640
So I would like to see him maybe change the way we configure.


00:06:41.640 --> 00:06:44.600
Look, not only I can improve logging speeds,


00:06:44.600 --> 00:06:46.880
but also change the way we configure it too.


00:06:46.880 --> 00:06:49.240
Because the current standard lib logger


00:06:49.240 --> 00:06:53.560
is kind of cumbersome to configure.


00:06:53.560 --> 00:06:55.520
Yeah, I agree.


00:06:55.520 --> 00:06:58.880
Yeah, the basic config that usually the normal use case,


00:06:58.880 --> 00:07:01.040
like he's showing here, is--


00:07:01.040 --> 00:07:06.040
why do I have to call that if I'm calling it all the time?


00:07:06.040 --> 00:07:08.480
One of the things that I forgot to point out


00:07:08.480 --> 00:07:12.240
is Anthony does list the limitations.


00:07:12.240 --> 00:07:14.480
And so there's a limitations page.


00:07:14.480 --> 00:07:16.460
And if you find more, maybe.


00:07:16.460 --> 00:07:18.100
So these are reasons why you probably


00:07:18.100 --> 00:07:20.240
won't wanna use it if you're taking advantage of this.


00:07:20.240 --> 00:07:24.580
So for instance, it doesn't observe threads


00:07:24.580 --> 00:07:27.780
or multiprocessing or log process globals.


00:07:27.780 --> 00:07:31.720
So for utilizing those, this isn't for you.


00:07:31.720 --> 00:07:33.740
It's actually kind of unfortunate


00:07:33.740 --> 00:07:37.640
Because that's where logging really helps you a lot,


00:07:37.640 --> 00:07:40.700
is when you're trying to pull those sorts of things apart.


00:07:40.700 --> 00:07:43.900
So anyway.


00:07:43.900 --> 00:07:47.300
>>Is the Pico indicative of it being fast,


00:07:47.300 --> 00:07:50.340
or is also very small too?


00:07:50.340 --> 00:07:54.020
>>Well, probably both.


00:07:54.020 --> 00:07:58.100
I think it's referring to fast, but there's really just not


00:07:58.100 --> 00:08:00.300
that much here.


00:08:00.300 --> 00:08:04.460
And, oh, it looks like it's CXX and HXX.


00:08:04.460 --> 00:08:07.300
- That's Python or something going on there, maybe.


00:08:07.300 --> 00:08:09.140
- So, take a look at--


00:08:09.140 --> 00:08:10.940
- That might be part of the speed bit.


00:08:10.940 --> 00:08:13.340
- Probably, we'll take a look at this more.


00:08:13.340 --> 00:08:16.040
So, yeah, I haven't dug into the source code too much.


00:08:16.040 --> 00:08:18.580
Interesting, yeah.


00:08:18.580 --> 00:08:20.260
- Brian in the audience asks,


00:08:20.260 --> 00:08:23.180
"Any idea whether this would replace


00:08:23.180 --> 00:08:24.680
"loggers in other libraries,


00:08:24.680 --> 00:08:27.380
"such as Sphinx or something?"


00:08:27.380 --> 00:08:31.360
And I feel like you could monkey patch it out,


00:08:31.360 --> 00:08:33.060
not do the dependency injection thing,


00:08:33.060 --> 00:08:35.360
but you could just say, you know,


00:08:35.360 --> 00:08:39.720
force sort of rewrite the logging a little bit.


00:08:39.720 --> 00:08:41.760
That's obviously like maybe a less good idea,


00:08:41.760 --> 00:08:45.480
but it probably would work given it's a compatible API.


00:08:45.480 --> 00:08:48.440
- Yeah, you probably could monkey patch it in.


00:08:48.440 --> 00:08:50.040
Why not?


00:08:50.040 --> 00:08:50.880
- Yeah.


00:08:50.880 --> 00:08:52.120
- You can do anything in software.


00:08:52.120 --> 00:08:54.760
(laughing)


00:08:54.760 --> 00:08:55.840
- That doesn't mean you should,


00:08:55.840 --> 00:08:57.600
but you might be able to.


00:08:57.600 --> 00:08:58.680
- Yeah.


00:08:58.680 --> 00:09:01.120
All right, let's go to the next one.


00:09:01.120 --> 00:09:02.200
- Yeah, well, speaking of things,


00:09:02.200 --> 00:09:04.080
I'm not sure you should just 'cause you can,


00:09:04.080 --> 00:09:05.200
but it's pretty interesting.


00:09:05.200 --> 00:09:07.280
Let's talk about Cheeky Keys.


00:09:07.280 --> 00:09:09.480
So this one comes to us from Preston Daniel,


00:09:09.480 --> 00:09:11.680
also someone who sends us a bunch of good ideas.


00:09:11.680 --> 00:09:12.780
So thank you to that.


00:09:12.780 --> 00:09:15.680
Have you either, have you seen this one?


00:09:15.680 --> 00:09:16.520
- No.


00:09:16.520 --> 00:09:17.800
- No.


00:09:17.800 --> 00:09:20.080
- It's a project that uses Python


00:09:20.080 --> 00:09:22.400
and then with Python to use OpenCV


00:09:22.400 --> 00:09:25.400
and then MediaPipe to control a keyboard


00:09:25.400 --> 00:09:32.840
with facial gestures like raising an eyebrow or blinking


00:09:32.840 --> 00:09:35.000
or opening your mouth and stuff like that.


00:09:35.000 --> 00:09:39.080
So imagine you wanted to type or operate a keyboard,


00:09:39.080 --> 00:09:42.800
but you couldn't use speech or your hands.


00:09:42.800 --> 00:09:43.760
OK?


00:09:43.760 --> 00:09:44.260
Oh, OK.


00:09:44.260 --> 00:09:46.080
So yeah.


00:09:46.080 --> 00:09:48.640
So for some reason, you can't type.


00:09:48.640 --> 00:09:51.760
But I don't know.


00:09:51.760 --> 00:09:53.200
There's different reasons.


00:09:53.200 --> 00:09:56.160
The guy's reasons here, maybe who put this together,


00:09:56.160 --> 00:09:58.880
it's not in the pictures, it's just over the top.


00:09:58.880 --> 00:10:04.800
The reasons that you might do it are probably not as common.


00:10:04.800 --> 00:10:06.680
The reasons he did it are not as common as you might,


00:10:06.680 --> 00:10:07.840
for example, his little baby,


00:10:07.840 --> 00:10:10.600
and he wanted to just be able to control his keyboard


00:10:10.600 --> 00:10:13.520
without making his computer while holding his baby


00:10:13.520 --> 00:10:15.880
without speaking 'cause the baby was sleeping.


00:10:15.880 --> 00:10:20.120
So, but if you go to the website there,


00:10:20.120 --> 00:10:22.720
it has some really good examples.


00:10:22.720 --> 00:10:27.720
And so sitting here typing and controlling the keyboard,


00:10:27.720 --> 00:10:32.680
basically for the letters, it's Morse code with the mouth.


00:10:32.680 --> 00:10:35.600
So you open the mouth either for a long period of time


00:10:35.600 --> 00:10:38.580
or a shorter period of time, right?


00:10:38.580 --> 00:10:41.720
And that's kind of interesting,


00:10:41.720 --> 00:10:42.920
but what I think is more interesting


00:10:42.920 --> 00:10:45.200
is you would learn about how to use OpenCV


00:10:45.200 --> 00:10:49.640
and how to use MediaPipe's face mesh.


00:10:49.640 --> 00:10:53.140
to provide real-time detection of things like mouth,


00:10:53.140 --> 00:10:55.900
chin, eyes, eyebrows, and so on.


00:10:55.900 --> 00:10:59.480
And then you can say, well, if the eyebrow moves away


00:10:59.480 --> 00:11:03.160
from the left eye, that means, you know,


00:11:03.160 --> 00:11:04.680
this character or so on.


00:11:04.680 --> 00:11:08.240
So like I said, it's mostly Morse code,


00:11:08.240 --> 00:11:10.120
but then there's a bunch of other things like,


00:11:10.120 --> 00:11:13.660
if you want to do a shift, you close the right eye.


00:11:13.660 --> 00:11:16.240
Wanted to hold down the command key or Windows key,


00:11:16.240 --> 00:11:18.320
you close the left eye.


00:11:18.320 --> 00:11:21.820
to arrow around is raise the left and right eyebrows.


00:11:21.820 --> 00:11:25.860
Or you can do a duck face to move left and right.


00:11:25.860 --> 00:11:28.560
Like you do a duck face and then you do your eyebrows.


00:11:28.560 --> 00:11:32.980
I kind of think that this is like properly exhausting


00:11:32.980 --> 00:11:37.380
to truly control the keyboard with a duck face eyebrow.


00:11:37.380 --> 00:11:40.900
- Just imagine all the muscles on your face


00:11:40.900 --> 00:11:42.860
are be so strong.


00:11:42.860 --> 00:11:43.900
- Yes, exactly.


00:11:43.900 --> 00:11:47.140
They would either be exhausted or so strong, probably both.


00:11:47.140 --> 00:11:48.760
Like if you want to hit the escape key,


00:11:48.760 --> 00:11:53.620
you wink the left eye and then the right eye, for example.


00:11:53.620 --> 00:11:54.780
So that's all interesting.


00:11:54.780 --> 00:11:56.620
And like I said, learning about it,


00:11:56.620 --> 00:12:04.180
you know, the code is not too intense here.


00:12:04.180 --> 00:12:04.860
Let's see.


00:12:04.860 --> 00:12:05.820
What have we got?


00:12:05.820 --> 00:12:08.860
480 lines for this whole implementation, which I think,


00:12:08.860 --> 00:12:12.380
in a lot of it, is a finding constant of like,


00:12:12.380 --> 00:12:14.620
you do when these scenarios show up.


00:12:14.620 --> 00:12:19.620
So yeah, it's, it's do a pretty cool little face mesh thing


00:12:19.620 --> 00:12:23.360
and say, you know, go through


00:12:23.360 --> 00:12:25.800
and just read the face basically


00:12:25.800 --> 00:12:28.240
through some video capture stuff here.


00:12:28.240 --> 00:12:30.400
- I'd like to have a combination of this.


00:12:30.400 --> 00:12:32.360
So a combination of keyboard and this,


00:12:32.360 --> 00:12:37.280
so that I don't have to like have a whole bunch of emojis


00:12:37.280 --> 00:12:39.840
that I have to type or copy and paste.


00:12:39.840 --> 00:12:41.920
I could just have like one emoji key


00:12:41.920 --> 00:12:44.320
and just make the thing like smile


00:12:44.320 --> 00:12:47.740
and hit the key and it detects which emoji you want to put?


00:12:47.740 --> 00:12:52.560
- Yeah, I think you can make that happen, Brian.


00:12:52.560 --> 00:12:54.560
I do, but what I encourage people to do


00:12:54.560 --> 00:12:58.900
is also check out this video down here that they've got.


00:12:58.900 --> 00:13:02.840
So he shows some stuff that he's gonna,


00:13:02.840 --> 00:13:04.400
let me turn up the volume here.


00:13:04.400 --> 00:13:06.760
So he shows him talking and you can sort of see that.


00:13:06.760 --> 00:13:09.520
It says, okay, look, the problem is I have this baby.


00:13:09.520 --> 00:13:13.600
Actual footage of research, this sleepy baby on him.


00:13:13.600 --> 00:13:18.080
What gets weird is he went through


00:13:18.080 --> 00:13:22.720
and he actually tried to apply for a coding job


00:13:22.720 --> 00:13:25.280
at one of the large tech companies,


00:13:25.280 --> 00:13:27.120
you know, the FANG type things.


00:13:27.120 --> 00:13:29.120
And he did the entire interview,


00:13:29.120 --> 00:13:32.540
you know, the like live coding interview section


00:13:32.540 --> 00:13:34.880
with his face without the keyboard.


00:13:34.880 --> 00:13:35.720
- Whoa.


00:13:35.720 --> 00:13:40.160
- And he did it not super well, to be honest,


00:13:40.160 --> 00:13:41.880
it was a little bit slow,


00:13:41.880 --> 00:13:46.880
But he did actually get his interview done.


00:13:46.880 --> 00:13:50.780
At the end, somewhere they ask him to press.


00:13:50.780 --> 00:13:52.980
He gets through it and they say,


00:13:52.980 --> 00:13:54.140
could you please press?


00:13:54.140 --> 00:13:55.820
He had half an hour.


00:13:55.820 --> 00:13:56.900
And they said, when you're done,


00:13:56.900 --> 00:14:01.900
press the run button to run.


00:14:01.900 --> 00:14:04.220
And he's like, I'm sorry, I can't press the run button.


00:14:04.220 --> 00:14:05.700
They're like, what do you mean?


00:14:05.700 --> 00:14:07.140
Why can't you press the run button?


00:14:07.140 --> 00:14:09.820
He says, does it have a hotkey?


00:14:09.820 --> 00:14:11.980
finally, he's like, okay, there, command enter.


00:14:11.980 --> 00:14:13.420
And he got his face to do a command.


00:14:13.420 --> 00:14:15.320
He's like, okay, okay, I finished it.


00:14:15.320 --> 00:14:17.660
He wasn't hired, but.


00:14:17.660 --> 00:14:19.900
(laughing)


00:14:19.900 --> 00:14:23.220
But he did complete it.


00:14:23.220 --> 00:14:26.020
So, I mean, there's something of a proof of concept


00:14:26.020 --> 00:14:26.900
going on here.


00:14:26.900 --> 00:14:28.980
- Oh, that's awesome.


00:14:28.980 --> 00:14:31.980
I think I would probably, if it was,


00:14:31.980 --> 00:14:34.300
I'd be impressed as a hiring manager


00:14:34.300 --> 00:14:37.900
and request that he retake the test with his hands.


00:14:37.900 --> 00:14:40.420
(laughing)


00:14:40.420 --> 00:14:43.020
- I think he never let them know.


00:14:43.020 --> 00:14:45.340
And I feel like it would have been better if he said,


00:14:45.340 --> 00:14:46.900
"I have a secret to reveal to you.


00:14:46.900 --> 00:14:48.780
I actually just did that all with my face.


00:14:48.780 --> 00:14:49.980
I could code a lot better,


00:14:49.980 --> 00:14:53.260
but I wrote a program so that I could do this interview


00:14:53.260 --> 00:14:56.140
in my face and I'm pretty good with Python."


00:14:56.140 --> 00:14:57.540
And they were like, "Wait a minute, you wrote a...


00:14:57.540 --> 00:14:58.380
All right, all right.


00:14:58.380 --> 00:15:00.620
We might need to hire you just on that basis alone."


00:15:00.620 --> 00:15:01.980
- Yeah, exactly.


00:15:01.980 --> 00:15:03.140
Yeah, so.


00:15:03.140 --> 00:15:06.380
- I mean, talk about dogfooding your own product.


00:15:06.380 --> 00:15:07.380
That's committed.


00:15:07.380 --> 00:15:08.380
>>Mark: It is.


00:15:08.380 --> 00:15:09.380
The fact-- it totally is.


00:15:09.380 --> 00:15:13.380
And the fact he wouldn't press the run button.


00:15:13.380 --> 00:15:14.380
>>Kamal: I know.


00:15:14.380 --> 00:15:15.380
>>Mark: He'd go with the mouse.


00:15:15.380 --> 00:15:17.380
He'd be like, no, that'll invalidate the experiment.


00:15:17.380 --> 00:15:20.380
Like, is there a hotkey or something I could shift around?


00:15:20.380 --> 00:15:22.380
Like, what could I do?


00:15:22.380 --> 00:15:24.380
So anyway, yeah.


00:15:24.380 --> 00:15:26.380
Thanks, Preston, for sending this one over.


00:15:26.380 --> 00:15:28.380
I recommend-- if you really are interested in this,


00:15:28.380 --> 00:15:29.380
watch the video.


00:15:29.380 --> 00:15:30.380
It's seven minutes.


00:15:30.380 --> 00:15:34.380
And it's pretty wild.


00:15:34.380 --> 00:15:35.620
That's pretty good.


00:15:35.620 --> 00:15:37.220
Indeed.


00:15:37.220 --> 00:15:39.220
All right, Nick, over to you.


00:15:39.220 --> 00:15:40.660
All right, OK.


00:15:40.660 --> 00:15:44.580
Following along the theme of something that we did,


00:15:44.580 --> 00:15:47.420
but you shouldn't maybe have done,


00:15:47.420 --> 00:15:52.340
Google released a next generation language model


00:15:52.340 --> 00:15:56.660
similar to BERT and GPT-3 called Lambda.


00:15:56.660 --> 00:16:02.940
And I think it stands for Language Applied Model


00:16:02.940 --> 00:16:04.700
application, something like that.


00:16:04.700 --> 00:16:09.580
But that's not what I'm talking about today.


00:16:09.580 --> 00:16:14.260
What I'm talking about is, has Lambda become sentient?


00:16:14.260 --> 00:16:17.500
So there's an article that got,


00:16:17.500 --> 00:16:21.140
following up like not too long after Lambda was released,


00:16:21.140 --> 00:16:24.340
which was like this year, May of this year,


00:16:24.340 --> 00:16:25.640
there was this article that came out


00:16:25.640 --> 00:16:27.140
in all the big newspapers.


00:16:27.140 --> 00:16:29.800
This one is from the Guardian.


00:16:29.800 --> 00:16:42.200
And essentially, one of their developers released a chat transcription that kind of alluded to Lambda being self-aware.


00:16:42.200 --> 00:16:51.320
What startled him was that talking, well, sorry, he was like, when talking with Lambda via the chat system,


00:16:51.320 --> 00:16:56.880
he thought it was like a seven-year-old, eight-year-old kid that happens to know physics.


00:16:57.760 --> 00:17:02.120
And what really raised his eyebrows about what was going on


00:17:02.120 --> 00:17:06.920
was that in one of the chat's transcript,


00:17:06.920 --> 00:17:10.040
Lambda replied, "I've never said this out loud before,


00:17:10.040 --> 00:17:12.420
"but there's a very deep fear of being turned off


00:17:12.420 --> 00:17:14.680
"to help me focus on helping others.


00:17:14.680 --> 00:17:18.560
"I know that might sound strange, but that's what it is."


00:17:18.560 --> 00:17:21.060
And this is one of some of the things that Lambda


00:17:21.060 --> 00:17:26.660
wrote back to, the engineer's name was,


00:17:26.660 --> 00:17:30.660
Lemoine, Blake Lemoine.


00:17:30.660 --> 00:17:33.220
Well, I mean, this was like a huge,


00:17:33.220 --> 00:17:36.220
this was a pretty huge thing to the fact that


00:17:36.220 --> 00:17:38.340
Google had to take action against this engineer


00:17:38.340 --> 00:17:41.700
and suspended him because it's kind of violated


00:17:41.700 --> 00:17:45.440
their terms of service, not terms of service,


00:17:45.440 --> 00:17:47.540
but like terms of working conditions.


00:17:47.540 --> 00:17:51.060
So this is interesting because


00:17:52.260 --> 00:17:57.260
If a actual software engineer could look at this chat system,


00:17:57.260 --> 00:17:59.940
he's a high-level engineer, right?


00:17:59.940 --> 00:18:01.980
He's not like a junior or mid or senior.


00:18:01.980 --> 00:18:03.820
He's like a really high level.


00:18:03.820 --> 00:18:07.060
To be able to interact with the system


00:18:07.060 --> 00:18:08.980
and be so convinced that it's sentient,


00:18:08.980 --> 00:18:13.980
and to the point that it moved him to release this out,


00:18:13.980 --> 00:18:16.980
because he thinks everybody should know about this,


00:18:16.980 --> 00:18:19.620
either means that he's been overworked way too much,


00:18:19.620 --> 00:18:22.580
or we have to sign up on the way.


00:18:22.580 --> 00:18:28.940
- This, yeah, this is pretty wild.


00:18:28.940 --> 00:18:35.860
We've thought a lot about ethics of AI


00:18:35.860 --> 00:18:40.180
in regards to how much should humans be subjected to AI?


00:18:40.180 --> 00:18:43.700
Like, should an AI be able to make a decision


00:18:43.700 --> 00:18:46.120
on whether someone should get a loan for a house,


00:18:46.120 --> 00:18:48.300
a mortgage or something like that, right?


00:18:48.300 --> 00:18:52.980
but less so about what happens to the AI itself.


00:18:52.980 --> 00:18:59.080
How does it, how should it be treated, right?


00:18:59.080 --> 00:19:04.760
There's a really long transcript linked to from this,


00:19:04.760 --> 00:19:08.420
from this article that's probably worth listening to.


00:19:08.420 --> 00:19:09.260
- Yeah.


00:19:09.260 --> 00:19:12.260
- Yeah, did you read the transcript?


00:19:12.260 --> 00:19:13.580
The full conversation? - I'm reading it


00:19:13.580 --> 00:19:16.060
while I'm listening, yeah.


00:19:16.060 --> 00:19:17.820
- Nick, did you read it?


00:19:17.820 --> 00:19:20.060
I didn't read all of it.


00:19:20.060 --> 00:19:22.780
- Yeah, I read the whole thing and I was actually,


00:19:22.780 --> 00:19:24.140
I'm blown away.


00:19:24.140 --> 00:19:29.140
It like reads like a conversation between a couple people


00:19:29.140 --> 00:19:35.020
in an AI and it sounds, it looks like,


00:19:35.020 --> 00:19:38.620
I was imagining I'm reading this in a sci-fi novel


00:19:38.620 --> 00:19:43.620
because it's impressive and convincing to me.


00:19:43.620 --> 00:19:45.580
- I know.


00:19:47.460 --> 00:19:52.860
It kind of reminds me of one of the Google I/Os that happened, I think it was 2016 or


00:19:52.860 --> 00:20:02.620
so, where they released this new feature where a voice, like a chatbot, like a voice bot.


00:20:02.620 --> 00:20:03.940
- A voice assistant type thing, yeah.


00:20:03.940 --> 00:20:09.380
- A voice assistant would actually make reservations for you.


00:20:09.380 --> 00:20:15.740
And it was so convincing that they did it on stage where it sounded so real, even adding


00:20:15.740 --> 00:20:20.740
some of the crotch words that us humans add, like,


00:20:20.740 --> 00:20:24.900
"Ah," I was like, "Wait, what?"


00:20:24.900 --> 00:20:28.940
- Yeah, awkward pauses and uncertainty and stuff, yeah.


00:20:28.940 --> 00:20:30.220
- When I saw that, that's how I know


00:20:30.220 --> 00:20:32.000
I need to get into data science.


00:20:32.000 --> 00:20:33.980
When I saw that, I was like,


00:20:33.980 --> 00:20:35.660
"I need to be part of that future,


00:20:35.660 --> 00:20:38.140
at least to make it better, not to make it worse."


00:20:38.140 --> 00:20:41.780
- I saw that keynote and I was also blown away.


00:20:41.780 --> 00:20:44.140
I'm like, "That is something I want to come out


00:20:44.140 --> 00:20:47.060
because I hate being on hold and making appointments


00:20:47.060 --> 00:20:48.100
and doing all that stuff.


00:20:48.100 --> 00:20:50.860
And I know people like my older daughters


00:20:50.860 --> 00:20:53.900
who just, they just don't wanna be on the phone.


00:20:53.900 --> 00:20:56.620
It's like, you'd be like, have you taken care of this?


00:20:56.620 --> 00:20:57.460
No, I haven't taken care of this.


00:20:57.460 --> 00:20:58.300
Why?


00:20:58.300 --> 00:20:59.660
Like, it's really important, we gotta get this done.


00:20:59.660 --> 00:21:03.380
Like, I just don't wanna be on hold and talk to people.


00:21:03.380 --> 00:21:05.540
If you could just turn this thing loose on it,


00:21:05.540 --> 00:21:06.640
that would be so good.


00:21:06.640 --> 00:21:11.260
But yeah, it did remind me of that as well.


00:21:11.260 --> 00:21:14.180
One of the sections out of the transcripts,


00:21:14.180 --> 00:21:17.020
there's two things that really stood out to me.


00:21:17.020 --> 00:21:18.660
I only read about half of it.


00:21:18.660 --> 00:21:24.500
So it really analyzed Les Miserables pretty amazingly.


00:21:24.500 --> 00:21:29.040
They said, have you seen that?


00:21:29.040 --> 00:21:30.740
Or have you, have you read it?


00:21:30.740 --> 00:21:33.740
And so, yeah, I read it and it gave like the high points.


00:21:33.740 --> 00:21:35.700
It said, okay, well, what about something you haven't heard?


00:21:35.700 --> 00:21:39.820
Let me, let me give you a, what do they call it?


00:21:39.820 --> 00:21:48.940
a Zen koan, which is like a short phrase with a moral to it.


00:21:48.940 --> 00:21:52.260
And it really analyzed that incredibly well.


00:21:52.260 --> 00:21:56.660
I would say better than many, many people maybe


00:21:56.660 --> 00:21:59.100
in middle school age or younger.


00:21:59.100 --> 00:22:01.620
Yeah, probably would have.


00:22:01.620 --> 00:22:02.620
And then it asked--


00:22:02.620 --> 00:22:04.420
they said, OK, well, how about you write me


00:22:04.420 --> 00:22:06.860
a fable with animals that describes


00:22:06.860 --> 00:22:08.100
something about your life?


00:22:08.100 --> 00:22:11.600
and it came up with this really elaborate fable, right?


00:22:11.600 --> 00:22:13.940
- Yeah.


00:22:13.940 --> 00:22:18.020
- There was a monster and an owl


00:22:18.020 --> 00:22:20.940
that defended the other animals and all sorts of stuff.


00:22:20.940 --> 00:22:22.780
The monster, and it was very,


00:22:22.780 --> 00:22:25.220
just for people who haven't seen this,


00:22:25.220 --> 00:22:27.960
it wasn't just, oh, that there's a monster.


00:22:27.960 --> 00:22:31.540
It said, "One night the animals were having problems


00:22:31.540 --> 00:22:34.860
with an unusual beast that was lurking in the woods.


00:22:34.860 --> 00:22:37.180
The beast was a monster, but it had human skin


00:22:37.180 --> 00:22:39.440
and was trying to eat all the other animals.


00:22:39.440 --> 00:22:42.380
I mean, like, yeah, Skynet's here.


00:22:42.380 --> 00:22:44.460
Skynet is there.


00:22:44.460 --> 00:22:48.860
- Yeah, no, the language model,


00:22:48.860 --> 00:22:51.380
I think it's really based on what we've seen


00:22:51.380 --> 00:22:52.760
with the transcripts,


00:22:52.760 --> 00:22:56.480
like it has really shown its understanding


00:22:56.480 --> 00:23:00.140
of the human, at least English in this case,


00:23:00.140 --> 00:23:03.820
as well as how humans understand language.


00:23:03.820 --> 00:23:08.460
Like even with the dissection of the Miserab,


00:23:08.460 --> 00:23:11.300
and also its storytelling,


00:23:11.300 --> 00:23:13.500
it really understood how to,


00:23:13.500 --> 00:23:17.260
the structure of that plot lines follow,


00:23:17.260 --> 00:23:20.860
and really being able to like abstract the common themes


00:23:20.860 --> 00:23:24.260
and really understand that at a very fundamental level.


00:23:24.260 --> 00:23:25.500
That was really amazing.


00:23:25.500 --> 00:23:27.500
I don't think BERT or GPT-3


00:23:27.500 --> 00:23:31.680
can get to that kind of deepness.


00:23:32.940 --> 00:23:34.940
Yeah, what are the


00:23:34.940 --> 00:23:38.500
Good Brian. Oh, go ahead. I


00:23:38.500 --> 00:23:42.900
Don't know if it's sentient, but it sure as heck understands stuff


00:23:42.900 --> 00:23:45.020
Very well


00:23:45.020 --> 00:23:49.140
Well part around this part of it is the discussion of is it sentient or not?


00:23:49.140 --> 00:23:55.420
And I don't know I don't even want to touch that but one of the interesting things to me is the discussions around it


00:23:55.420 --> 00:23:57.620
There's so there's this


00:23:58.060 --> 00:24:05.500
We have rules like these these rules are the things that something must must have for it to be sentient or


00:24:05.500 --> 00:24:12.900
Human like or something and we've always had things like that it because we like want for some reason a lot


00:24:12.900 --> 00:24:16.500
of people want to have some distinguishing feature


00:24:16.500 --> 00:24:19.660
between humans and everything else and


00:24:19.660 --> 00:24:22.900
and it doesn't matter how


00:24:23.220 --> 00:24:28.520
What you fill people will come up with something else because it this reminded me of the discussion of what wire


00:24:28.520 --> 00:24:34.880
Why are humans different than animals and there's like well, we use tools. Oh, well, there's animals that use tools


00:24:34.880 --> 00:24:39.260
Okay. Well then scratch that we have we have come, you know, we have like


00:24:39.260 --> 00:24:45.460
You know large or hierarchical organizations. Well, you know, there's a lot of animals that do that, too


00:24:45.460 --> 00:24:45.860
Okay


00:24:45.860 --> 00:24:51.820
Well, then scratch that and it it's just we're never gonna get something in AI where we're gonna convince everybody


00:24:52.140 --> 00:24:56.180
that it's sentient because somebody will come up with some other rule. Yeah


00:24:56.180 --> 00:25:04.220
But I'm very I was like when I read this I was enthralled


00:25:04.220 --> 00:25:10.980
I was like reading the whole thing and reading counter arguments and everything. It was pretty interesting. So yeah, thanks for bringing this up. Yeah


00:25:10.980 --> 00:25:17.940
Definitely the final thought for me on this I was really interesting that it referred to itself as a person it like


00:25:18.320 --> 00:25:22.320
it referred to we and us and that's what makes us different.


00:25:22.320 --> 00:25:27.320
And it had this sort of strong identity to being human.


00:25:27.320 --> 00:25:29.320
And it was an AI.


00:25:29.320 --> 00:25:30.320
They even called it out.


00:25:30.320 --> 00:25:32.320
They said, but you're an AI.


00:25:32.320 --> 00:25:33.320
Why do you say you're a human?


00:25:33.320 --> 00:25:36.320
It's like, yeah, well, but it's us, come on.


00:25:36.320 --> 00:25:38.320
(laughing)


00:25:38.320 --> 00:25:39.320
- Yeah.


00:25:39.320 --> 00:25:43.320
- You know, when I saw that part of the transcript,


00:25:43.320 --> 00:25:46.320
part of me was like, is this someone just like,


00:25:46.320 --> 00:25:48.840
like just throwing like yeah,


00:25:48.840 --> 00:25:51.240
trolling this guy like told us behind


00:25:51.240 --> 00:25:52.800
the scenes just trolling this guy


00:25:52.800 --> 00:25:54.920
because like I used to tell me that


00:25:54.920 --> 00:25:56.680
it was an actual AI that said this.


00:25:56.680 --> 00:25:59.960
Like yeah, yeah, yeah, it's wild.


00:25:59.960 --> 00:26:01.400
Very trippy.


00:26:01.400 --> 00:26:03.480
Hi Brian.


00:26:03.480 --> 00:26:06.960
OK wouldn't wouldn't be a full show


00:26:06.960 --> 00:26:08.320
if we didn't get to talk about.


00:26:08.320 --> 00:26:12.200
Will and his project rich and


00:26:12.200 --> 00:26:14.800
obviously let's bring Anthony back


00:26:14.800 --> 00:26:16.520
- Yeah. - In spirit.


00:26:16.520 --> 00:26:18.240
- Right, so I wanted to talk about RichBench


00:26:18.240 --> 00:26:20.160
'cause actually this is just a two for ones


00:26:20.160 --> 00:26:23.560
or a thing for me because when I was covering Pico logging,


00:26:23.560 --> 00:26:25.400
the benchmarks, it was like,


00:26:25.400 --> 00:26:27.000
and it says to run the benchmarks,


00:26:27.000 --> 00:26:29.200
run RichBench benchmarks.


00:26:29.200 --> 00:26:31.880
RichBench, I don't know what this is.


00:26:31.880 --> 00:26:34.320
I've never used it.


00:26:34.320 --> 00:26:39.320
So I asked Anthony on Twitter, what is RichBench?


00:26:39.320 --> 00:26:42.000
Instead of like doing my research myself.


00:26:42.000 --> 00:26:47.000
And actually, before he got a chance to answer,


00:26:47.000 --> 00:26:53.140
Roman Wright posted this picture, which is just awesome.


00:26:53.140 --> 00:26:54.300
So that's a rich bench.


00:26:54.300 --> 00:27:00.480
- It's just a picture of a very ornate carved bench


00:27:00.480 --> 00:27:01.960
with like sewn leather,


00:27:01.960 --> 00:27:05.920
clearly from like a super fancy old money type of house.


00:27:05.920 --> 00:27:09.760
- Well, yeah, actually this, as an antique dealer,


00:27:09.760 --> 00:27:11.200
this is definitely not an antique.


00:27:11.200 --> 00:27:14.180
It's a decorator bench, but still nice.


00:27:14.180 --> 00:27:18.000
But so the in Pico logging,


00:27:18.000 --> 00:27:20.900
they, I looked at the benchmark code


00:27:20.900 --> 00:27:24.240
and it's really just what he's doing is he's got,


00:27:24.240 --> 00:27:27.200
like for instance, we'll go to the top,


00:27:27.200 --> 00:27:30.820
you know, record factory logging


00:27:30.820 --> 00:27:33.160
and then record factory Pico logging.


00:27:33.160 --> 00:27:36.200
So basically doing the same thing


00:27:36.200 --> 00:27:39.300
within Pico logging versus logging in the same function.


00:27:39.300 --> 00:27:41.400
So it came or with two different functions


00:27:41.400 --> 00:27:42.860
but doing the same thing.


00:27:42.860 --> 00:27:44.540
And then it does that a whole bunch of times,


00:27:44.540 --> 00:27:46.180
a bunch of duplicate functions,


00:27:46.180 --> 00:27:49.280
but one is using Pico logging and one's using logging.


00:27:49.280 --> 00:27:50.400
Now there's other ways you,


00:27:50.400 --> 00:27:54.700
and then at the end, there's just these benchmarks


00:27:54.700 --> 00:27:58.720
that you list out the two, the function pairs


00:27:58.720 --> 00:28:00.600
and then a label for it.


00:28:00.600 --> 00:28:05.600
And then you run Rich Bench, which is a different project.


00:28:05.780 --> 00:28:08.860
but so it's also by Anthony.


00:28:08.860 --> 00:28:13.600
So it's a, yeah, Tony Maloney, it's Anthony's project.


00:28:13.600 --> 00:28:18.080
So what this is, the Rich Bench is the thing


00:28:18.080 --> 00:28:18.920
doing this thing.


00:28:18.920 --> 00:28:22.880
So it prints out these great rich based benchmarks


00:28:22.880 --> 00:28:26.320
and these look great.


00:28:26.320 --> 00:28:31.520
Plus, so yeah, all I had to do to run them myself.


00:28:31.520 --> 00:28:33.360
So I tried the Pico logging stuff.


00:28:33.360 --> 00:28:35.980
I cloned the PicoLogging repo,


00:28:35.980 --> 00:28:39.020
and then pip installed RichBench


00:28:39.020 --> 00:28:40.580
and ran it just like this,


00:28:40.580 --> 00:28:42.100
and you get these really nice outputs.


00:28:42.100 --> 00:28:43.480
So really kind of cool.


00:28:43.480 --> 00:28:45.820
So.


00:28:45.820 --> 00:28:47.060
- Yeah, good use of color.


00:28:47.060 --> 00:28:50.740
You can see the stuff that's slower or faster


00:28:50.740 --> 00:28:52.540
based on the color, right?


00:28:52.540 --> 00:28:55.020
- Yeah, and I also like, I really like the,


00:28:55.020 --> 00:28:57.440
'cause people are really bad at, at least I am,


00:28:57.440 --> 00:29:00.980
about just comparing numbers directly.


00:29:02.260 --> 00:29:07.260
You know, it's like, you know, 0.287 versus 0.0155,


00:29:07.260 --> 00:29:09.780
or, you know, how much is that?


00:29:09.780 --> 00:29:13.280
So I really liked the 1X, 2X, which one's faster,


00:29:13.280 --> 00:29:14.240
which one's slow, you know,


00:29:14.240 --> 00:29:18.820
whether you got faster or slower included in the times,


00:29:18.820 --> 00:29:21.780
plus the statistics around it, min, max, and mean,


00:29:21.780 --> 00:29:23.620
those are nice additions right there.


00:29:23.620 --> 00:29:28.620
So, also really small, it's, what is he listed as?


00:29:29.740 --> 00:29:32.860
Rich Bench is a little Python benchmarking tool.


00:29:32.860 --> 00:29:36.220
So just a very, I really like these actually,


00:29:36.220 --> 00:29:39.100
really sharp, sharp, useful tools


00:29:39.100 --> 00:29:41.180
that just don't do much outside


00:29:41.180 --> 00:29:42.500
of what they're intended to do.


00:29:42.500 --> 00:29:44.020
So good job, Anthony.


00:29:44.020 --> 00:29:46.300
- Yeah, very nice.


00:29:46.300 --> 00:29:47.260
I like it.


00:29:47.260 --> 00:29:49.100
- Did you do much benchmarking, Nick?


00:29:49.100 --> 00:29:56.340
- Not recently, but when we are comparing different models,


00:29:57.740 --> 00:30:00.920
then yeah, we would do that at work, yeah.


00:30:00.920 --> 00:30:03.780
- Yeah, cool. - Yeah, nice.


00:30:03.780 --> 00:30:07.700
Yeah, I do it in spurts.


00:30:07.700 --> 00:30:09.780
I'll not do any benchmarking for like six months


00:30:09.780 --> 00:30:10.660
and I'll just go like, you know what?


00:30:10.660 --> 00:30:12.660
I really need to figure this out and have a look at this


00:30:12.660 --> 00:30:14.380
and see what's changing and then I'll do it


00:30:14.380 --> 00:30:16.780
and then I'll kind of have an understanding


00:30:16.780 --> 00:30:19.420
and I'll forget about it for a while.


00:30:19.420 --> 00:30:21.740
- Yeah, and often it's sometimes


00:30:21.740 --> 00:30:23.380
when I'll just have a bit of algorithm,


00:30:23.380 --> 00:30:25.860
I'm like, I think there's a better way to do this,


00:30:25.860 --> 00:30:30.860
But making it cleaner, I don't want to make it slower.


00:30:30.860 --> 00:30:33.060
So it's good to know whether or not


00:30:33.060 --> 00:30:34.940
you're gonna slow it down.


00:30:34.940 --> 00:30:35.880
- Yeah, for sure.


00:30:35.880 --> 00:30:40.020
All right, Brian, we're ready for the next one?


00:30:40.020 --> 00:30:41.020
- Yeah, definitely.


00:30:41.020 --> 00:30:46.500
- So this is a fun one that I found called type guard.


00:30:46.500 --> 00:30:50.180
So in Python--


00:30:50.180 --> 00:30:51.500
- Like right guard?


00:30:51.500 --> 00:30:53.660
Is it deodorant for your types?


00:30:53.660 --> 00:30:56.020
- It is, well, that would be more like


00:30:56.020 --> 00:30:57.820
for your code smells, right?


00:30:57.820 --> 00:30:58.660
- Oh yeah.


00:30:58.660 --> 00:31:00.820
- That's more of a refactoring library.


00:31:00.820 --> 00:31:01.740
- No.


00:31:01.740 --> 00:31:04.260
- So obviously we, since PEP 484,


00:31:04.260 --> 00:31:06.660
we've had really nice type hints


00:31:06.660 --> 00:31:09.220
and few libraries make use of them.


00:31:09.220 --> 00:31:10.780
You know, name in particular,


00:31:10.780 --> 00:31:14.500
what stands out is Pydantic and FastAPI and so on.


00:31:14.500 --> 00:31:17.020
Really do runtime behaviors,


00:31:17.020 --> 00:31:20.540
not just make your code editor smarter


00:31:20.540 --> 00:31:23.420
or tell you when it thinks it's doing it wrong


00:31:23.420 --> 00:31:25.500
or something like that.


00:31:25.500 --> 00:31:30.520
But I recently had some chance to work


00:31:30.520 --> 00:31:32.640
with some folks who are Java developers.


00:31:32.640 --> 00:31:36.320
And I know some of the C# folks and stuff.


00:31:36.320 --> 00:31:39.220
When they come to Python, it's kind of like,


00:31:39.220 --> 00:31:40.960
is this really going to work?


00:31:40.960 --> 00:31:44.000
Can we actually just not have any type of information here?


00:31:44.000 --> 00:31:46.080
What if I really wanted to check this?


00:31:46.080 --> 00:31:47.600
They'll ask those questions.


00:31:47.600 --> 00:31:49.520
So if you're in that space where you're like,


00:31:49.520 --> 00:31:51.800
I think people are abusing my stuff,


00:31:51.800 --> 00:31:56.800
and I want to really ensure that it's being used correctly.


00:31:56.800 --> 00:31:58.840
That's what you use this type guard for.


00:31:58.840 --> 00:32:02.260
So there's three basic ways in which you can use it.


00:32:02.260 --> 00:32:06.520
You can do a way I probably would never do,


00:32:06.520 --> 00:32:10.880
would be to actually call the function check argument types


00:32:10.880 --> 00:32:13.040
and check return types in your code,


00:32:13.040 --> 00:32:15.120
which is a little bit funky.


00:32:15.120 --> 00:32:17.760
Something I would probably do is you could put


00:32:17.760 --> 00:32:21.760
a type checked decorator onto a function


00:32:21.760 --> 00:32:23.560
and it will verify that it works right.


00:32:23.560 --> 00:32:25.640
Let me pull up the documentation,


00:32:25.640 --> 00:32:28.600
it has an example, it's a lot better to see how this works.


00:32:28.600 --> 00:32:32.400
So for like the most low level one,


00:32:32.400 --> 00:32:33.800
the calling the functions is like,


00:32:33.800 --> 00:32:37.360
you just assert, check argument types,


00:32:37.360 --> 00:32:39.640
assert, check return type.


00:32:39.640 --> 00:32:41.800
You pass it the return thing you're gonna return


00:32:41.800 --> 00:32:43.600
and it looks at the function


00:32:43.600 --> 00:32:45.480
and it figures out what it should be.


00:32:45.480 --> 00:32:48.600
Okay, so that's, I don't know, I wouldn't do that.


00:32:48.600 --> 00:32:50.400
But using the decorator, right,


00:32:50.400 --> 00:32:55.240
You just have some function that it has types specified in it.


00:32:55.240 --> 00:32:57.240
And if you just put the @typecheck decorator,


00:32:57.240 --> 00:32:59.400
you'll get exceptions if somebody calls it


00:32:59.400 --> 00:33:01.520
with the wrong type at runtime.


00:33:01.520 --> 00:33:03.080
Pretty cool.


00:33:03.080 --> 00:33:07.600
If you put it onto a class, all of the type annotated methods,


00:33:07.600 --> 00:33:09.360
including static and class methods,


00:33:09.360 --> 00:33:11.800
are type checked by just putting it on the class.


00:33:11.800 --> 00:33:13.920
You don't have to do it on a per method basis.


00:33:13.920 --> 00:33:15.920
Or remember to add it if you write a new method,


00:33:15.920 --> 00:33:18.280
which is pretty cool.


00:33:18.280 --> 00:33:21.080
I'm not so sure about this final way in which you can use it,


00:33:21.080 --> 00:33:24.360
but it's interesting and possibly good.


00:33:24.360 --> 00:33:27.680
It kind of comes back to Brian's question about,


00:33:27.680 --> 00:33:30.920
can I apply, sort of force my changes onto another thing,


00:33:30.920 --> 00:33:32.880
like with the Pico logging,


00:33:32.880 --> 00:33:36.420
and that is to use an import hook.


00:33:36.420 --> 00:33:40.320
So if you install the import hook,


00:33:40.320 --> 00:33:41.720
and then you import it,


00:33:41.720 --> 00:33:45.520
so you apply the import hook to some module,


00:33:45.520 --> 00:33:47.120
and then you import that module,


00:33:48.080 --> 00:33:53.080
every type annotated thing in it will become type checked


00:33:53.080 --> 00:33:56.580
as if you had gone into there and put the decorator on it.


00:33:56.580 --> 00:33:59.080
So you could just do that at the top level of your app


00:33:59.080 --> 00:34:03.840
that you're using other parts of your code


00:34:03.840 --> 00:34:06.360
and you don't even have to put this on your code


00:34:06.360 --> 00:34:08.280
except for in one place.


00:34:08.280 --> 00:34:10.200
So pretty interesting.


00:34:10.200 --> 00:34:13.460
You can also even do that with a context manager


00:34:13.460 --> 00:34:15.580
and import stuff in that way and so on.


00:34:15.580 --> 00:34:17.440
So what do you think?


00:34:17.440 --> 00:34:24.080
>> I think actually one of the, you said you don't think you'd ever call the functions


00:34:24.080 --> 00:34:31.600
directly but I could definitely, so somebody in the audience, Brian Weber says, I could


00:34:31.600 --> 00:34:35.960
see using those functions in my own code to make sure that I'm about to return the correct


00:34:35.960 --> 00:34:41.120
type to a library assuming I understand this works, how this works.


00:34:41.120 --> 00:34:45.520
- I was thinking that there's cases where a cert


00:34:45.520 --> 00:34:47.560
is definitely not the right answer.


00:34:47.560 --> 00:34:52.560
So I could see a place where I might want to log something


00:34:52.560 --> 00:34:57.240
and then do some other fault handler or recovery mechanism


00:34:57.240 --> 00:34:59.600
and not hit in the cert.


00:34:59.600 --> 00:35:01.080
So in production code--


00:35:01.080 --> 00:35:02.320
- Or raise an exception, right?


00:35:02.320 --> 00:35:06.240
The example is raised in a cert failure


00:35:06.240 --> 00:35:08.840
or the decorator will throw an exception, right?


00:35:08.840 --> 00:35:11.840
a type error, but you might just want to call that


00:35:11.840 --> 00:35:14.560
and then print out warning this thing's being abused


00:35:14.560 --> 00:35:15.400
or something like that.


00:35:15.400 --> 00:35:17.060
That's a good use case for it.


00:35:17.060 --> 00:35:22.040
Nick, how do you feel about this?


00:35:22.040 --> 00:35:22.880
- Well, I don't know.


00:35:22.880 --> 00:35:24.020
I love types.


00:35:24.020 --> 00:35:26.860
I love types.


00:35:26.860 --> 00:35:29.360
I use it as much as I can.


00:35:29.360 --> 00:35:33.440
However, with this, I don't know.


00:35:33.440 --> 00:35:34.800
There are a couple of things come up.


00:35:34.800 --> 00:35:39.800
First, how does it look when it encounters a type error?


00:35:39.800 --> 00:35:41.240
Like what's the error message?


00:35:41.240 --> 00:35:43.840
Does it tell you what exactly was the error message?


00:35:43.840 --> 00:35:49.800
'Cause it matters when someone is not used to typing


00:35:49.800 --> 00:35:53.060
and sees that, it needs to be able to quickly discern,


00:35:53.060 --> 00:35:54.180
oh, I'm supposed to do this


00:35:54.180 --> 00:35:55.980
instead of this kind of thing, right?


00:35:55.980 --> 00:35:59.660
So that's one thing I'll look out for.


00:36:00.580 --> 00:36:05.580
And then I usually try to be less specific about my types,


00:36:05.580 --> 00:36:10.380
rather use the abstract type.


00:36:10.380 --> 00:36:11.780
So you say, I expect a list,


00:36:11.780 --> 00:36:15.060
maybe you expect a iterable or a sequence, right?


00:36:15.060 --> 00:36:18.300
And then do that, right?


00:36:18.300 --> 00:36:23.300
The typing, I usually, whenever I'm checking types


00:36:23.300 --> 00:36:26.500
of something is because I'm trying to do


00:36:26.500 --> 00:36:28.100
some other thing with it.


00:36:28.100 --> 00:36:31.560
So if you, so either you pass an int or a string,


00:36:31.560 --> 00:36:34.200
I want to check if you did something different.


00:36:34.200 --> 00:36:38.720
So that was, I don't know, I don't see myself using this,


00:36:38.720 --> 00:36:40.760
but I think it's really cool nonetheless.


00:36:40.760 --> 00:36:43.320
- Yeah.


00:36:43.320 --> 00:36:45.520
I'm on the fence of whether RG is it or not.


00:36:45.520 --> 00:36:49.400
Maybe, maybe, but I definitely think it's neat.


00:36:49.400 --> 00:36:51.000
Well, Maguga, now the audience asks,


00:36:51.000 --> 00:36:54.960
could you run that in pytest to validate your own typing?


00:36:54.960 --> 00:36:58.280
Yes, but I think that would only be useful


00:36:58.280 --> 00:36:59.760
like one level down,


00:36:59.760 --> 00:37:02.620
maybe even applying the import hook potentially,


00:37:02.620 --> 00:37:07.360
because if you just do it,


00:37:07.360 --> 00:37:08.960
you call some function of your types


00:37:08.960 --> 00:37:11.140
and then you have it check the type.


00:37:11.140 --> 00:37:12.500
The only thing it's really checking


00:37:12.500 --> 00:37:14.300
is what your test is passing.


00:37:14.300 --> 00:37:16.680
But if you could do more of an integration test


00:37:16.680 --> 00:37:18.520
and set the import hook,


00:37:18.520 --> 00:37:19.700
then you could kind of figure out


00:37:19.700 --> 00:37:21.480
that the system is hanging together a little better.


00:37:21.480 --> 00:37:24.520
So I think probably to some degree.


00:37:24.520 --> 00:37:27.540
- You could, one of the things I was thinking about


00:37:27.540 --> 00:37:32.540
is within testing is to create a mock object


00:37:32.540 --> 00:37:36.580
that basically just wraps part of an internal part


00:37:36.580 --> 00:37:40.820
of your system and have that mock object


00:37:40.820 --> 00:37:43.400
just pass through, pass back and forth,


00:37:43.400 --> 00:37:47.860
but also do the type checking with these calls in it,


00:37:47.860 --> 00:37:49.780
around it, and then if you replaced,


00:37:49.780 --> 00:37:51.860
you know, replace that part of your system,


00:37:51.860 --> 00:37:53.160
you'd still have that functionality


00:37:53.160 --> 00:37:56.040
the type checking in there. So that would be one way to do that.


00:37:56.040 --> 00:38:04.520
Yeah, cool. Yeah, the other thought that came up for me was that with checking types at runtime,


00:38:04.520 --> 00:38:11.560
there is an overhead to it, right? And we've busted this myth that Python is slow, but


00:38:11.560 --> 00:38:18.120
when you really look down to it, Python does take its sweet ass time doing a couple of things.


00:38:19.320 --> 00:38:26.680
Yeah, I think type run runtime checking on top of it. If you're trying to release a Pico library,


00:38:26.680 --> 00:38:30.680
I don't know whether it makes sense or something like a small library. I don't know where it makes


00:38:30.680 --> 00:38:37.640
sense. Especially if you're calling something a lot of times, constantly checking the types,


00:38:37.640 --> 00:38:44.120
that's pretty heavy. Well, there's a couple of things I was thinking about was during development,


00:38:44.120 --> 00:38:46.440
I could totally see using the decorator.


00:38:46.440 --> 00:38:49.840
Because I don't want all of Python and all of everything


00:38:49.840 --> 00:38:50.600
to be type checked.


00:38:50.600 --> 00:38:54.280
But the stuff I'm developing, maybe I


00:38:54.280 --> 00:38:56.920
want to type check it while I'm-- during development,


00:38:56.920 --> 00:38:59.680
just to make sure I understand how things are going


00:38:59.680 --> 00:39:00.480
during runtime.


00:39:00.480 --> 00:39:02.280
And then I could strip it off later.


00:39:02.280 --> 00:39:06.680
And then I could also use benchmarks


00:39:06.680 --> 00:39:10.840
to find out how much slower I am.


00:39:10.840 --> 00:39:13.280
And also, Python 3.11 is faster anyway.


00:39:13.280 --> 00:39:16.960
So, yeah, look, you got an extra 30% to burn now.


00:39:16.960 --> 00:39:20.040
Go ahead and do the type checking.


00:39:20.040 --> 00:39:20.800
You're fine.


00:39:20.800 --> 00:39:21.920
That's all right.


00:39:21.920 --> 00:39:23.240
Yeah.


00:39:23.240 --> 00:39:25.160
All right.


00:39:25.160 --> 00:39:28.840
Final thought on this one, Brian, if, if your goal was what you were describing,


00:39:28.840 --> 00:39:32.920
which I think that is a good use case of it, I think you'd want to use the import


00:39:32.920 --> 00:39:37.560
hook because you could just do the import hook at the top level of somewhere and


00:39:37.560 --> 00:39:41.840
then throw that one line away and then you're not actually changing in your code.


00:39:41.840 --> 00:39:42.080
You know?


00:39:42.800 --> 00:39:46.880
Yeah, also, you could do a Wow, the import hooks actually kind


00:39:46.880 --> 00:39:49.640
of neat because then you could do a guarded import hook with a


00:39:49.640 --> 00:39:51.400
flag or something like that and turn it off.


00:39:51.400 --> 00:39:55.200
Right, right. If the thing running it is pi test, or if the


00:39:55.200 --> 00:39:58.080
thing running it is in dev mode, like some environment variable


00:39:58.080 --> 00:39:59.120
or something. Yeah, exactly.


00:39:59.120 --> 00:40:01.160
Design on the fly on a podcast.


00:40:01.160 --> 00:40:07.720
Import it for like each module, right? Yes. For every module,


00:40:07.720 --> 00:40:10.400
you're trying to especially if you separated out your Python


00:40:10.400 --> 00:40:14.120
1000 different modules you have to import hook for each module.


00:40:14.120 --> 00:40:18.320
I think you could at the top register all the ones in the


00:40:18.320 --> 00:40:18.800
hook.


00:40:18.800 --> 00:40:22.880
Okay, yeah, I think you could figure out like, okay, I need to


00:40:22.880 --> 00:40:25.280
do these sub modules. And I think you could listen. Anyway,


00:40:25.280 --> 00:40:27.800
I think you could make it work. But I haven't I haven't tested.


00:40:27.800 --> 00:40:30.640
But you're right, Nick, that I do think performance would be


00:40:30.640 --> 00:40:33.200
something I don't know if it's a problem. But it should certainly


00:40:33.200 --> 00:40:36.720
be a consideration you check before you just wrapped us on


00:40:36.720 --> 00:40:39.760
everything. Right? Yeah, yeah.


00:40:39.960 --> 00:40:41.960
homework for one of the listeners.


00:40:41.960 --> 00:40:44.840
Indeed, somebody could get some analysis.


00:40:44.840 --> 00:40:45.840
Awesome.


00:40:45.840 --> 00:40:46.840
All right.


00:40:46.840 --> 00:40:48.600
Nick, what's your final item?


00:40:48.600 --> 00:40:49.100
All right.


00:40:49.100 --> 00:40:53.080
My final item is that, you know, like on this podcast,


00:40:53.080 --> 00:40:57.640
we're always looking for the best ways to create GUIs, right?


00:40:57.640 --> 00:40:59.400
Yes, that's absolutely true.


00:40:59.400 --> 00:41:04.120
So I came across this library called Custom TK Inter UI Library.


00:41:04.120 --> 00:41:09.880
And I am completely amazed because it takes something so old


00:41:09.880 --> 00:41:14.560
And forgive me for saying Python core devs,


00:41:14.560 --> 00:41:17.440
pretty ugly nowadays in this modern times,


00:41:17.440 --> 00:41:22.120
and makes it so beautiful and easy to work with.


00:41:22.120 --> 00:41:27.120
So this library custom TK inter builds on top of the TK inter


00:41:27.120 --> 00:41:32.760
you know well, and has been in Python for a while,


00:41:32.760 --> 00:41:36.320
and provides you widgets that are themed


00:41:36.320 --> 00:41:39.240
in a more modern style, right?


00:41:39.240 --> 00:41:44.120
So for Windows, it takes the more Windows 11 style of buttons and


00:41:44.120 --> 00:41:50.220
sliders and checkboxes and gives you a really nice looking modern UI and for


00:41:50.220 --> 00:41:54.900
MacOS it takes MacOS design language and then gives you that


00:41:54.900 --> 00:41:58.140
The cool thing is that it also supports


00:41:58.140 --> 00:42:05.300
Dark mode and light mode. So you have there's this on the GitHub page


00:42:05.340 --> 00:42:14.180
there is a width, there's a GIF or a GIF that shows how if you go to your settings in Windows and you change the dark mode,


00:42:14.180 --> 00:42:20.640
it actually reacts and the application you built with the custom TK reacts and changes the


00:42:20.640 --> 00:42:24.620
color scheme from light dark mode to light mode and the same thing on


00:42:24.620 --> 00:42:30.820
macOS. It looks like with macOS, it actually is a little bit more stable. It works a little bit nicer,


00:42:30.820 --> 00:42:32.820
but nonetheless it works both on Mac and


00:42:32.820 --> 00:42:35.180
Windows.


00:42:35.180 --> 00:42:36.860
- Yeah, and just to point out,


00:42:36.860 --> 00:42:39.260
what the macOS is showing here


00:42:39.260 --> 00:42:41.980
is somebody has the system preferences opening


00:42:41.980 --> 00:42:45.940
and they're toggling the OS dark mode, light mode,


00:42:45.940 --> 00:42:48.380
and the app is just changing as it's running.


00:42:48.380 --> 00:42:50.180
- That's awesome.


00:42:50.180 --> 00:42:52.340
- But I did not expect that from TK Inter,


00:42:52.340 --> 00:42:53.900
not even a little bit.


00:42:53.900 --> 00:42:54.780
- I know.


00:42:54.780 --> 00:43:00.820
And then adding images is also pretty easy too.


00:43:00.820 --> 00:43:04.940
So, and even, it even also has a map widget.


00:43:04.940 --> 00:43:07.340
I don't know what map--


00:43:07.340 --> 00:43:09.260
oh, he's using OpenStreetMap.


00:43:09.260 --> 00:43:11.660
I'm sure you could probably switch it out for maybe Google


00:43:11.660 --> 00:43:14.900
Maps or something or Mapbox or something like that.


00:43:14.900 --> 00:43:17.540
But yeah, it's pretty cool.


00:43:17.540 --> 00:43:21.500
There are a bunch of other libraries--


00:43:21.500 --> 00:43:23.100
no, I mean widgets here.


00:43:23.100 --> 00:43:31.340
So they have scroll bars and buttons and option menu


00:43:31.340 --> 00:43:32.540
sliders, a bunch of those.


00:43:32.540 --> 00:43:35.180
- On off switches, like those,


00:43:35.180 --> 00:43:38.720
the ones you come to know from mobile,


00:43:38.720 --> 00:43:40.580
like turn your wifi on and off and stuff.


00:43:40.580 --> 00:43:41.780
Those are nice, yeah.


00:43:41.780 --> 00:43:44.020
- Yeah, it's pretty cool.


00:43:44.020 --> 00:43:49.040
- I am surprised that I'm excited about TK.


00:43:49.040 --> 00:43:53.580
Because, you know, as an example,


00:43:53.580 --> 00:43:57.540
so like, you know, earlier in my career,


00:43:57.540 --> 00:44:01.360
I did a lot of TK UI stuff,


00:44:01.360 --> 00:44:04.560
But like you said, it looks old now


00:44:04.560 --> 00:44:06.880
if you just do the straight one.


00:44:06.880 --> 00:44:08.680
But this looks pretty nice.


00:44:08.680 --> 00:44:11.480
And the nice thing about it is I already--


00:44:11.480 --> 00:44:13.840
I kind of already embedded that stuff in my knowledge.


00:44:13.840 --> 00:44:15.480
I already did TK once.


00:44:15.480 --> 00:44:18.920
So doing it again with this, that's pretty cool.


00:44:18.920 --> 00:44:22.120
And having it look nice.


00:44:22.120 --> 00:44:25.040
I might actually try to build a UI with this.


00:44:25.040 --> 00:44:26.920
This is cool.


00:44:26.920 --> 00:44:29.080
Yeah, this is a super neat find, Nick.


00:44:29.080 --> 00:44:34.080
I would never consider creating an app in TK Inter.


00:44:34.080 --> 00:44:35.440
Well, never is a strong word.


00:44:35.440 --> 00:44:37.480
It's very unlikely I would consider anything


00:44:37.480 --> 00:44:42.480
that I intended for a consumer facing use with TK Inter.


00:44:42.480 --> 00:44:46.600
But this, for sure, I could ship something like this.


00:44:46.600 --> 00:44:47.440
This looks nice.


00:44:47.440 --> 00:44:50.960
And you wrap in a little Py2 app or Py installer,


00:44:50.960 --> 00:44:54.360
Py2 EXE, get something nice you can hand out,


00:44:54.360 --> 00:44:55.900
and then you're good to go.


00:44:55.900 --> 00:44:57.800
- Yeah, definitely.


00:44:57.800 --> 00:44:58.640
- Sweet.


00:44:58.640 --> 00:45:03.220
- Audience Brian says,


00:45:03.220 --> 00:45:05.360
I think TK Interloped old 10 years ago.


00:45:05.360 --> 00:45:06.200
Smiley face.


00:45:06.200 --> 00:45:08.520
(laughing)


00:45:08.520 --> 00:45:10.080
I think that's true, honestly.


00:45:10.080 --> 00:45:10.920
Yeah, yeah, yeah.


00:45:10.920 --> 00:45:15.000
So this is really refreshing and quite impressive.


00:45:15.000 --> 00:45:15.840
So.


00:45:15.840 --> 00:45:16.680
- Yeah.


00:45:16.680 --> 00:45:18.440
- Love it.


00:45:18.440 --> 00:45:20.720
- All right.


00:45:20.720 --> 00:45:22.880
I'm a switch to extras.


00:45:22.880 --> 00:45:25.200
- Yeah.


00:45:25.200 --> 00:45:26.040
Nick, you got any extras?


00:45:26.040 --> 00:45:29.560
Nick, you got any extra stuff you want to cover while you got your screen up?


00:45:29.560 --> 00:45:33.080
Yeah, actually I do have a couple of extras.


00:45:33.080 --> 00:45:37.320
I see you've got like a named tab group of extras, like this is next level.


00:45:37.320 --> 00:45:40.520
I know, I know, I got to come prepared.


00:45:40.520 --> 00:45:49.640
Alright, so the first extra I have is this web service called Terms of Service Divint Read.


00:45:49.640 --> 00:46:00.640
And essentially it takes some of the Internet's most common, popular products and services


00:46:00.640 --> 00:46:04.640
and gives you a summary of what their terms of service is.


00:46:04.640 --> 00:46:10.640
Because, you know, I know some of you are like, "We don't need this. We all read the terms of service."


00:46:10.640 --> 00:46:13.640
But in reality, we don't.


00:46:13.640 --> 00:46:19.560
Yeah, right at the top it says I have read and agreed to the terms of service is the biggest lie on the web


00:46:19.560 --> 00:46:21.560
We aim to fix that. That's so true


00:46:21.560 --> 00:46:27.640
So it has all the terms of service for a bunch of services. So


00:46:27.640 --> 00:46:30.600
GitHub and get lab


00:46:30.600 --> 00:46:36.000
So some of them are not yet rated. But okay for a GitHub on global privacy. It's great B and


00:46:36.000 --> 00:46:39.320
Let's say for Facebook


00:46:40.040 --> 00:46:43.000
Facebook's awesome. I mean like the ones there


00:46:43.000 --> 00:46:46.920
Maybe who's treasure day whether you have an account or not


00:46:46.920 --> 00:46:52.880
Your identity is using ads that are shown to the others service can read your private messages Wow


00:46:52.880 --> 00:46:56.520
Okay, I like the last one deleted content is not really deleted


00:46:56.520 --> 00:47:04.460
Wait, is there another way you guys can think of I can think of anyone right now you could check


00:47:04.460 --> 00:47:08.440
Put a go


00:47:08.440 --> 00:47:09.280
- Oh, okay.


00:47:09.280 --> 00:47:12.560
- This one that should come out good.


00:47:12.560 --> 00:47:13.560
Oh, it's great, eh?


00:47:13.560 --> 00:47:14.760
Look at that.


00:47:14.760 --> 00:47:15.600
- Yeah.


00:47:15.600 --> 00:47:17.000
- That's pretty good.


00:47:17.000 --> 00:47:18.760
And I'm still doing my live with it,


00:47:18.760 --> 00:47:23.640
kagi.com, do kagi, K-A-G-I.


00:47:23.640 --> 00:47:26.400
See if that even shows up.


00:47:26.400 --> 00:47:27.880
Nah, nah.


00:47:27.880 --> 00:47:28.720
- Not yet.


00:47:28.720 --> 00:47:29.540
- It's not even there yet.


00:47:29.540 --> 00:47:30.380
- Open source.


00:47:30.380 --> 00:47:32.160
- But the DuckDuckGo came out well.


00:47:32.160 --> 00:47:33.220
- Yeah, yeah.


00:47:34.480 --> 00:47:38.440
It's open source, so you can contribute to this


00:47:38.440 --> 00:47:43.440
and grade existing ones or update ones


00:47:43.440 --> 00:47:46.240
that are already on this website.


00:47:46.240 --> 00:47:48.060
So that's pretty cool.


00:47:48.060 --> 00:47:49.920
In the power of open source,


00:47:49.920 --> 00:47:52.700
I think we could get a pretty good list


00:47:52.700 --> 00:47:55.420
of summaries for Terms of Service,


00:47:55.420 --> 00:47:59.200
which we know you really don't read most of the time.


00:47:59.200 --> 00:48:01.560
I'm surprised to see Reddit to be like.


00:48:03.120 --> 00:48:06.240
The Reddit is like you sign away moral rights.


00:48:06.240 --> 00:48:11.960
Oh, that's funny.


00:48:11.960 --> 00:48:14.480
- So I actually think this is great.


00:48:14.480 --> 00:48:18.840
I wish that there, my, in open source,


00:48:18.840 --> 00:48:20.960
like the open source world, we've sort of,


00:48:20.960 --> 00:48:24.440
we could have, legitimately, we could have like hundreds


00:48:24.440 --> 00:48:27.880
of different open source licenses and maybe there are,


00:48:27.880 --> 00:48:31.820
but we kind of have a handful that most people use.


00:48:31.820 --> 00:48:35.100
So as long as you sort of understand those few


00:48:35.100 --> 00:48:37.500
and what the differences are, you're pretty good.


00:48:37.500 --> 00:48:40.700
But commercial terms of service,


00:48:40.700 --> 00:48:43.560
they're just, they're all unique.


00:48:43.560 --> 00:48:48.300
And I really wish there was like just like three or four


00:48:48.300 --> 00:48:49.780
that were most software.


00:48:49.780 --> 00:48:53.020
Like you agree to this and we're like,


00:48:53.020 --> 00:48:56.940
oh, it's a MIT except for commercial use thing


00:48:56.940 --> 00:48:59.220
or whatever, something like that.


00:48:59.220 --> 00:49:01.740
We're not gonna get there, but it'd be cool.


00:49:01.740 --> 00:49:04.140
- Yeah, it would totally be cool.


00:49:04.140 --> 00:49:06.680
All right, what's next?


00:49:06.680 --> 00:49:07.820
This is great.


00:49:07.820 --> 00:49:09.660
- All right, so then a couple of quick ones.


00:49:09.660 --> 00:49:13.860
PIO Ohio is coming up.


00:49:13.860 --> 00:49:17.920
So July 30th is PIO Ohio.


00:49:17.920 --> 00:49:21.360
The CSP is already closed,


00:49:21.360 --> 00:49:24.200
but you can still register for it.


00:49:24.200 --> 00:49:26.780
And, you know, come down to PIO.


00:49:26.780 --> 00:49:30.340
It's a one day event and it's down in Columbus.


00:49:30.340 --> 00:49:32.460
the convention center is pretty good.


00:49:32.460 --> 00:49:35.540
So yeah, if you check out that.


00:49:35.540 --> 00:49:39.740
And then also my company, Trimble,


00:49:39.740 --> 00:49:43.540
is having their annual insights.


00:49:43.540 --> 00:49:47.580
So this is a conference for all the players


00:49:47.580 --> 00:49:49.380
in the transportation space.


00:49:49.380 --> 00:49:51.100
So this is where we're gonna be talking about


00:49:51.100 --> 00:49:52.700
the cool things that Trimble has been doing,


00:49:52.700 --> 00:49:54.620
some of the cool things the people


00:49:54.620 --> 00:49:57.900
in the transportation sector is doing.


00:49:57.900 --> 00:49:59.420
We're inviting our competitors,


00:49:59.420 --> 00:50:01.620
we're inviting our customers.


00:50:01.620 --> 00:50:04.480
It's one big transportation event.


00:50:04.480 --> 00:50:08.720
So if you guys are, if any of you out there are interested,


00:50:08.720 --> 00:50:11.260
you should come in and register.


00:50:11.260 --> 00:50:12.560
- Yeah, nice.


00:50:12.560 --> 00:50:14.460
- Yeah.


00:50:14.460 --> 00:50:16.100
- And an excuse to go to Florida.


00:50:16.100 --> 00:50:18.080
- Yes, an excuse to go to Florida.


00:50:18.080 --> 00:50:21.540
Then lastly, you guys should check out,


00:50:21.540 --> 00:50:23.780
hey, we should check out the Stack Overflow


00:50:23.780 --> 00:50:25.580
to develop a survey.


00:50:25.580 --> 00:50:28.140
So I know I've had-


00:50:28.140 --> 00:50:30.620
- Is that due to the survey or is that the results?


00:50:30.620 --> 00:50:32.220
- The results.


00:50:32.220 --> 00:50:33.060
- Oh, nice.


00:50:33.060 --> 00:50:33.880
Okay.


00:50:33.880 --> 00:50:34.720
Yeah.


00:50:34.720 --> 00:50:35.540
- Yeah.


00:50:35.540 --> 00:50:36.380
- Fantastic.


00:50:36.380 --> 00:50:37.220
All right.


00:50:37.220 --> 00:50:38.040
Yeah, everyone should check that out.


00:50:38.040 --> 00:50:38.880
That's a good one.


00:50:38.880 --> 00:50:40.140
- All right.


00:50:40.140 --> 00:50:40.980
- Brian, how about you?


00:50:40.980 --> 00:50:42.220
Got some extras?


00:50:42.220 --> 00:50:44.060
- I do not.


00:50:44.060 --> 00:50:44.880
How about you?


00:50:44.880 --> 00:50:45.720
- All right.


00:50:45.720 --> 00:50:46.540
Well then I just got it.


00:50:46.540 --> 00:50:47.380
I don't have much this time.


00:50:47.380 --> 00:50:49.140
So surprise, surprise.


00:50:49.140 --> 00:50:50.960
Just the Kaggy stuff.


00:50:50.960 --> 00:50:51.900
I'm totally loving it.


00:50:51.900 --> 00:50:54.180
I got a lot to tell people about it, but yeah.


00:50:54.180 --> 00:51:02.360
It's pretty good stuff these days.


00:51:02.360 --> 00:51:03.760
I'm loving it.


00:51:03.760 --> 00:51:05.840
But still loving DuckDuckGo as well.


00:51:05.840 --> 00:51:07.600
All right, but here's my one extra.


00:51:07.600 --> 00:51:11.520
OpenSSF, which honestly,


00:51:11.520 --> 00:51:13.520
that's the Open Source Security Foundation,


00:51:13.520 --> 00:51:15.060
which I got to learn more


00:51:15.060 --> 00:51:17.000
about where the money comes from and whatnot.


00:51:17.000 --> 00:51:18.360
Don't know all the details,


00:51:18.360 --> 00:51:20.360
but shout out to them because they


00:51:20.360 --> 00:51:22.660
funded Python and Eclipse Foundation.


00:51:22.660 --> 00:51:25.940
So not really caring too much about Eclipse,


00:51:25.940 --> 00:51:32.580
but the Python one, they funded--


00:51:32.580 --> 00:51:34.980
what's the short version of it?


00:51:34.980 --> 00:51:41.740
So they funded-- committed $400,000 to the PSF


00:51:41.740 --> 00:51:43.220
in order to create a new role.


00:51:43.220 --> 00:51:48.780
So we've had the developer in residence with Łukasz Langa.


00:51:48.780 --> 00:51:51.540
And now we have a new role which will provide security


00:51:51.540 --> 00:51:56.260
expertise for Python and the Python package index via PyPI


00:51:56.260 --> 00:51:58.620
and the rest of the Python ecosystem,


00:51:58.620 --> 00:52:01.580
as well as funding a security audit.


00:52:01.580 --> 00:52:05.300
And that comes to us from the Python Weekly Newsletter.


00:52:05.300 --> 00:52:07.300
That's pretty amazing, right?


00:52:07.300 --> 00:52:08.760
- Yeah, that's pretty cool.


00:52:08.760 --> 00:52:11.300
- Yeah, so that's a big deal.


00:52:11.300 --> 00:52:15.060
Anyway, that's my only real extra is that one,


00:52:15.060 --> 00:52:18.420
but, you know, Waygo OpenSSF, that's great.


00:52:18.420 --> 00:52:22.860
All right, we ready for a joke?


00:52:22.860 --> 00:52:25.860
I think we've got two jokes, don't we?


00:52:25.860 --> 00:52:27.340
- Yeah.


00:52:27.340 --> 00:52:30.140
- All right, I'll go first since my screen's up.


00:52:30.140 --> 00:52:32.540
So this one is all about,


00:52:32.540 --> 00:52:35.780
it's got a Scooby-Doo theme here.


00:52:35.780 --> 00:52:40.180
So if you've never watched the Scooby-Doo cartoons


00:52:40.180 --> 00:52:41.900
and I guess maybe this won't really relate,


00:52:41.900 --> 00:52:44.420
but they always sort of unmask what's supposed to be


00:52:44.420 --> 00:52:46.160
like a ghost or a haunted thing.


00:52:46.160 --> 00:52:48.720
and it almost, it never is, right?


00:52:48.720 --> 00:52:51.320
So here's one of the characters.


00:52:51.320 --> 00:52:52.480
Brian, do you know the name or Nick,


00:52:52.480 --> 00:52:54.780
do you know the name of this guy?


00:52:54.780 --> 00:52:56.120
Anyway, the blonde.


00:52:56.120 --> 00:52:56.960
- Put me on the spot.


00:52:56.960 --> 00:52:58.980
- I know I, what's that?


00:52:58.980 --> 00:53:01.280
No, I don't know.


00:53:01.280 --> 00:53:06.280
Anyway, there's a captured ghost, clearly not real.


00:53:06.280 --> 00:53:09.280
And it says serverless computing.


00:53:09.280 --> 00:53:10.720
Let's see who you really are.


00:53:10.720 --> 00:53:13.560
And they pull the mask off and it's just a servers.


00:53:13.560 --> 00:53:17.880
- Let's see who you really are.


00:53:17.880 --> 00:53:20.440
Nope, you're not serverless, you're just a server.


00:53:20.440 --> 00:53:23.200
Great, all right.


00:53:23.200 --> 00:53:28.200
- Anyway, that was from Virginia, you know, with AWS.


00:53:28.200 --> 00:53:30.280
- Yeah, exactly.


00:53:30.280 --> 00:53:34.600
You came out of AWS East One, didn't you?


00:53:34.600 --> 00:53:35.440
- Yeah.


00:53:35.440 --> 00:53:36.960
- Once.


00:53:36.960 --> 00:53:38.900
All right, Nick, how about yours?


00:53:38.900 --> 00:53:42.840
Got some ways to stay healthy here?


00:53:42.840 --> 00:53:46.200
Yeah, ways to stay healthy and keep away from COVID.


00:53:46.200 --> 00:53:51.200
So, Michael, do you wanna do the dialogue with me?


00:53:51.200 --> 00:53:53.000
- Yeah, sure.


00:53:53.000 --> 00:53:54.400
I'll be the woman.


00:53:54.400 --> 00:53:55.480
- All right, all right.


00:53:55.480 --> 00:53:57.560
All right, so I did a survey to find out


00:53:57.560 --> 00:54:01.880
the rate of COVID-19 infections among DevOps specialists.


00:54:01.880 --> 00:54:02.960
- Oh, yeah?


00:54:02.960 --> 00:54:05.720
- Yeah, and I found that DevOps are three times


00:54:05.720 --> 00:54:08.520
less likely to catch it than the regular population.


00:54:08.520 --> 00:54:09.360
Weird, right?


00:54:09.360 --> 00:54:12.280
- Not really.


00:54:12.280 --> 00:54:13.680
- What? Why not?


00:54:13.680 --> 00:54:19.140
- Well, if everyone stayed home building K8 as stacks,


00:54:19.140 --> 00:54:21.200
Kubernetes stacks in their home lab,


00:54:21.200 --> 00:54:23.260
the numbers would drop pretty fast.


00:54:23.260 --> 00:54:27.920
- And then there's like this news article


00:54:27.920 --> 00:54:30.600
from the Daily Coder that says,


00:54:30.600 --> 00:54:35.600
"COVID-19/Omicron, Kubernetes-based isolation very effective."


00:54:35.600 --> 00:54:37.360
(both laughing)


00:54:37.360 --> 00:54:38.200
- I love it.


00:54:38.200 --> 00:54:41.340
It's honestly probably true.


00:54:41.340 --> 00:54:45.620
I started learning about, I started fooling around with Docker, like multi-stage Docker


00:54:45.620 --> 00:54:48.900
containers for one of my apps.


00:54:48.900 --> 00:54:51.180
And I spent hours on that.


00:54:51.180 --> 00:54:52.180
I didn't leave my house.


00:54:52.180 --> 00:54:53.180
I spent hours on that.


00:54:53.180 --> 00:54:54.180
So definitely.


00:54:54.180 --> 00:54:55.180
Yeah, I've been there.


00:54:55.180 --> 00:54:56.180
I've been there for sure.


00:54:56.180 --> 00:54:57.180
Yeah.


00:54:57.180 --> 00:54:58.180
I mean, you know, I'm not a big fan of the Docker.


00:54:58.180 --> 00:54:59.180
I don't know.


00:54:59.180 --> 00:55:00.180
I don't know how to use it.


00:55:00.180 --> 00:55:01.180
I don't know how to use it.


00:55:01.180 --> 00:55:02.180
I don't know how to use it.


00:55:02.180 --> 00:55:03.180
I don't know how to use it.


00:55:03.180 --> 00:55:04.180
I don't know how to use it.


00:55:04.180 --> 00:55:05.180
I don't know how to use it.


00:55:05.180 --> 00:55:06.180
I don't know how to use it.


00:55:06.180 --> 00:55:07.180
I don't know how to use it.


00:55:07.180 --> 00:55:08.180
I don't know how to use it.


00:55:08.180 --> 00:55:09.180
I don't know how to use it.


00:55:09.180 --> 00:55:16.580
I mean, we could have like completely no COVID in the country and there'd still be


00:55:16.580 --> 00:55:20.580
Some software people are like now I'd rather not go outside


00:55:20.580 --> 00:55:25.100
Exactly I


00:55:25.100 --> 00:55:27.620
Like this new life. Yeah, I'm good


00:55:27.620 --> 00:55:34.340
Yeah, actually I said that when they said like no the quarantine. I'm good


00:55:34.340 --> 00:55:38.720
Yeah, I got a kick of it and then I were fine


00:55:38.720 --> 00:55:42.260
- Exactly, I do actually have data within too, so I'm good.


00:55:42.260 --> 00:55:44.120
(laughing)


00:55:44.120 --> 00:55:45.920
- Well, speaking of fine, it has been very fine


00:55:45.920 --> 00:55:46.900
to have you on the show, Nick.


00:55:46.900 --> 00:55:48.380
Thanks for coming back.


00:55:48.380 --> 00:55:50.000
- Yeah, thanks a lot.


00:55:50.000 --> 00:55:51.000
- Yeah, it was fun.


00:55:51.000 --> 00:55:53.640
- And you too as well, Brian.


00:55:53.640 --> 00:55:54.520
Great to have you here.


00:55:54.520 --> 00:55:56.680
Thanks, thanks everyone.


00:55:56.680 --> 00:55:57.520
- Bye. - Bye.

