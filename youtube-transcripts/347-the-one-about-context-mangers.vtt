WEBVTT

00:00:00.000 --> 00:00:08.800
Hey everybody, thanks for showing up to this episode of Python Bytes recording. Thanks


00:00:08.800 --> 00:00:13.920
Michael for showing up and getting everything working. Ready to get started?


00:00:13.920 --> 00:00:15.760
I'm ready. Let's do this.


00:00:15.760 --> 00:00:20.600
All right. Hello and welcome to Python Bytes where we deliver Python news and headlines


00:00:20.600 --> 00:00:27.680
directly to your earbuds. This is episode 347 recorded August 8th, 2023. And I'm Brian


00:00:27.680 --> 00:00:29.000
Okken.


00:00:29.000 --> 00:00:30.000
I'm Michael Kennedy.


00:00:30.000 --> 00:00:34.760
Dave Well, we have lots of great topics today.


00:00:34.760 --> 00:00:37.680
I'm pretty excited to get to them.


00:00:37.680 --> 00:00:42.500
This episode of Courses, well, not of course, but is sponsored by us.


00:00:42.500 --> 00:00:47.620
So if you'd like to support the show, you can support us on Patreon or check out one


00:00:47.620 --> 00:00:54.000
of Michael's many courses or my other podcasts or you know how to support us.


00:00:54.000 --> 00:00:56.760
>> There you go. Brian, let me throw one more in there for people.


00:00:56.760 --> 00:00:57.080
>> Okay.


00:00:57.080 --> 00:00:59.520
>> If you work for a company and


00:00:59.520 --> 00:01:02.280
that company is trying to spread the word about a product or service,


00:01:02.280 --> 00:01:05.440
pythonbytes.fm/sponsor, and check that as well.


00:01:05.440 --> 00:01:08.040
I recommend that to their marketing team.


00:01:08.040 --> 00:01:12.000
>> Definitely. If you are


00:01:12.000 --> 00:01:15.800
listening and would like to join the show live sometimes,


00:01:15.800 --> 00:01:21.120
just check out pythonbytes.fm/live and there's info about it there.


00:01:21.120 --> 00:01:24.320
Why don't you kick us off, Michael, with the first topic?


00:01:24.320 --> 00:01:30.840
>> Here we go. I'm going to do a lead in here to basically all of my things.


00:01:30.840 --> 00:01:35.120
Ready? I believe it was ready.


00:01:35.120 --> 00:01:37.440
The folks behind Litestar,


00:01:37.440 --> 00:01:42.680
Litestar is async framework for building APIs in Python.


00:01:42.680 --> 00:01:46.240
It's pretty interesting, similar but not the same as FastAPI.


00:01:46.240 --> 00:01:48.680
They share some of the same Zen.


00:01:48.680 --> 00:01:50.960
Now, I'm not ready to talk about Litestar.


00:01:50.960 --> 00:01:57.240
this is not actually my thing. I will at some point probably. It's pretty popular. 2.4 thousand


00:01:57.240 --> 00:02:01.640
stars which is cool. But I'm like huh, let me learn more about this. Like let me see


00:02:01.640 --> 00:02:05.600
what this is built on. And so I started poking through, what did I poke through? Not the


00:02:05.600 --> 00:02:13.100
requirements but the poetry lock file and pyproject and all that stuff and came across


00:02:13.100 --> 00:02:17.120
two projects that are not super well known I think. And I kind of want to shine a light


00:02:17.120 --> 00:02:20.880
on them by way of finding them through Litestar.


00:02:20.880 --> 00:02:24.140
So the first one I want to talk about is AsyncTimeout.


00:02:24.140 --> 00:02:28.680
And I know you have some stuff you want to talk about with context managers, and this


00:02:28.680 --> 00:02:31.560
kind of lines right up there.


00:02:31.560 --> 00:02:40.000
So this is an AsyncIO compatible, as in async and await keywords, timeout class.


00:02:40.000 --> 00:02:42.160
And it is itself a context manager.


00:02:42.160 --> 00:02:46.280
Not the only way you could possibly use it, I suppose, but it's a context manager.


00:02:46.280 --> 00:02:49.960
And the idea is you say async with timeout,


00:02:49.960 --> 00:02:52.320
and then whatever you do inside of that block,


00:02:52.320 --> 00:02:54.760
that context manager, that with block,


00:02:54.760 --> 00:02:58.720
if it's asynchronous and it takes longer


00:02:58.720 --> 00:03:00.560
than the timeout you specified,


00:03:00.560 --> 00:03:02.680
it will cancel it and raise an exception,


00:03:02.680 --> 00:03:04.600
say this took too long, right?


00:03:04.600 --> 00:03:06.480
Maybe you're trying to talk to a database


00:03:06.480 --> 00:03:07.720
and you're not sure it's on,


00:03:07.720 --> 00:03:09.920
or you're trying to call an API and you don't know,


00:03:09.920 --> 00:03:11.660
you don't wanna wait more than two seconds


00:03:11.660 --> 00:03:15.560
for the API to respond or whatever it is you're after,


00:03:15.560 --> 00:03:19.080
That's what you do is you just say async with timeout


00:03:19.080 --> 00:03:23.080
and then it manages all of the nested asyncio calls


00:03:23.080 --> 00:03:25.680
and if something goes wrong there,


00:03:25.680 --> 00:03:27.920
it just raises an exception and cancels it.


00:03:27.920 --> 00:03:29.520
- That's really pretty cool.


00:03:29.520 --> 00:03:31.200
- Isn't that cool?


00:03:31.200 --> 00:03:34.920
There are ways in which, in Python 3.11,


00:03:34.920 --> 00:03:38.160
I believe it was added, where you can create a task group


00:03:38.160 --> 00:03:41.920
and then you can do certain things,


00:03:41.920 --> 00:03:43.320
but I believe you gotta pass,


00:03:43.320 --> 00:03:48.420
You've got to use the task group itself to run the work.


00:03:48.420 --> 00:03:51.620
So I'm pretty sure that's how you do it.


00:03:51.620 --> 00:03:53.460
It's been a while since I thought about it.


00:03:53.460 --> 00:03:56.020
Be some task group dot create task,


00:03:56.020 --> 00:03:59.900
and you await it, something along those lines.


00:03:59.900 --> 00:04:03.500
And there, you've got to be really explicit,


00:04:03.500 --> 00:04:06.540
not just in the parts within that,


00:04:06.540 --> 00:04:08.700
but all the stuff that's doing async and await


00:04:08.700 --> 00:04:09.820
deep down in the guts.


00:04:09.820 --> 00:04:12.200
They all kind of got to know about this task group deal,


00:04:12.200 --> 00:04:13.660
if I'm remembering it correctly.


00:04:13.660 --> 00:04:15.340
And this one, you don't have to do that, right?


00:04:15.340 --> 00:04:19.520
You just run async stuff within this with block.


00:04:19.520 --> 00:04:21.720
And if it takes too long, that's it.


00:04:21.720 --> 00:04:26.520
So in the example here, it says we have an await inner.


00:04:26.520 --> 00:04:29.320
This is like all the work that's happening.


00:04:29.320 --> 00:04:30.800
I don't see why that has to be just one.


00:04:30.800 --> 00:04:32.760
It could be multiple things.


00:04:32.760 --> 00:04:35.560
And it says if it executes faster than the timeout,


00:04:35.560 --> 00:04:38.080
it just runs as if nothing happened.


00:04:38.080 --> 00:04:41.960
Otherwise, the inner work is canceled internally


00:04:41.960 --> 00:04:46.560
by sending an async.io.canceled error into it,


00:04:46.560 --> 00:04:48.980
but from the outside, that's transformed


00:04:48.980 --> 00:04:51.560
into a timeout error that's raised outside


00:04:51.560 --> 00:04:53.520
the context manager scope.


00:04:53.520 --> 00:04:54.520
Pretty cool, huh?


00:04:54.520 --> 00:04:56.920
- Yeah, that's handy.


00:04:56.920 --> 00:04:58.280
- Yeah, there's another way you can specify,


00:04:58.280 --> 00:05:02.560
you can say timeout at, like now plus 1.5 seconds,


00:05:02.560 --> 00:05:05.040
if you'd rather than just saying 1.5 seconds.


00:05:05.040 --> 00:05:07.840
So if there's, you wanna capture a time at some point,


00:05:07.840 --> 00:05:11.840
and then later you wanna say that time plus some bit of time,


00:05:11.840 --> 00:05:14.800
You can also access things like the expired property


00:05:14.800 --> 00:05:16.240
on the context manager,


00:05:16.240 --> 00:05:19.560
which tells you whether or not it was expired


00:05:19.560 --> 00:05:21.520
or whether it ran successfully.


00:05:21.520 --> 00:05:24.320
Inside the context manager, you can ask for the deadline


00:05:24.320 --> 00:05:25.900
so you know how long it takes.


00:05:25.900 --> 00:05:29.280
And you can upgrade the time as it runs.


00:05:29.280 --> 00:05:32.000
You're like, oh, this part took too long


00:05:32.000 --> 00:05:34.320
or under some circumstance, something happened,


00:05:34.320 --> 00:05:35.480
so we need to do more work.


00:05:35.480 --> 00:05:38.120
Like maybe we're checking the API if there's a user,


00:05:38.120 --> 00:05:39.760
but actually there's not.


00:05:39.760 --> 00:05:41.360
So we've got to create the new user


00:05:41.360 --> 00:05:42.560
and we've got to send him an email


00:05:42.560 --> 00:05:44.160
and that might take more time


00:05:44.160 --> 00:05:46.900
than the sort of other scenario.


00:05:46.900 --> 00:05:50.400
So you can say shift by or shift to for time.


00:05:50.400 --> 00:05:55.400
So you can say, hey, we need to add a second to the timeout


00:05:55.400 --> 00:05:56.960
within this context manager.


00:05:56.960 --> 00:05:59.400
- Interesting. - So basically reschedule it.


00:05:59.400 --> 00:06:00.480
Yeah.


00:06:00.480 --> 00:06:02.920
- Oh, that's pretty cool.


00:06:02.920 --> 00:06:05.480
- Yeah, so that's one thing.


00:06:05.480 --> 00:06:07.640
And then there's one other bit in here.


00:06:09.680 --> 00:06:13.240
The wait for, right.


00:06:13.240 --> 00:06:17.440
It says, so this is useful when async.io.waitFor


00:06:17.440 --> 00:06:20.320
is not suitable, but it's also faster than waitFor


00:06:20.320 --> 00:06:22.920
because it doesn't create a separate task


00:06:22.920 --> 00:06:26.600
that is also scheduled as async.waitFor itself does.


00:06:26.600 --> 00:06:31.600
So it's not totally unique functionality in Python,


00:06:31.600 --> 00:06:34.040
but it's a neat way to look at it.


00:06:34.040 --> 00:06:36.120
And I think this is a nice little library.


00:06:36.120 --> 00:06:36.960
- Yeah, I like that.


00:06:36.960 --> 00:06:40.320
The interface to it's pretty clean as well.


00:06:40.320 --> 00:06:42.200
- Yeah, a good little API there


00:06:42.200 --> 00:06:43.960
because it's a context manager, huh?


00:06:43.960 --> 00:06:47.360
- Yeah, well, let's reorder my topics a little bit.


00:06:47.360 --> 00:06:49.720
Let's talk about context managers.


00:06:49.720 --> 00:06:51.640
- Did I change your order?


00:06:51.640 --> 00:06:52.600
- That's all right.


00:06:52.600 --> 00:06:56.040
So Trey Hunter has written an article


00:06:56.040 --> 00:06:58.840
called "Creating a Context Manager in Python."


00:06:58.840 --> 00:07:02.400
And it's, as you've just described,


00:07:02.400 --> 00:07:04.480
a context manager is really the things


00:07:04.480 --> 00:07:06.800
that you use a with block with.


00:07:06.800 --> 00:07:11.480
And there's a whole bunch of them, like there's a open,


00:07:11.480 --> 00:07:15.320
if you say with open and then a file name as file,


00:07:15.320 --> 00:07:20.040
then the context manager automatically closes it afterwards.


00:07:20.040 --> 00:07:23.400
So really this article is about, this is pretty awesome,


00:07:23.400 --> 00:07:25.520
but how do we do it ourselves?


00:07:25.520 --> 00:07:29.960
And so he kind of walks through,


00:07:29.960 --> 00:07:33.720
he's got a bunch of detail here, which is great.


00:07:33.720 --> 00:07:36.400
It's not too long of an article though.


00:07:36.400 --> 00:07:38.920
A useful one, which I thought that was an awesome,


00:07:38.920 --> 00:07:43.160
good example is having a context manager


00:07:43.160 --> 00:07:45.280
that changed an environmental variable


00:07:45.280 --> 00:07:46.560
just with the with block.


00:07:46.560 --> 00:07:49.540
And then it goes back to the way it was before.


00:07:49.540 --> 00:07:52.160
And the code for this is just a,


00:07:52.160 --> 00:07:54.640
it's just a class with,


00:07:54.640 --> 00:07:56.640
it's not inheriting from anything.


00:07:56.640 --> 00:08:00.000
And the context manager class is a class


00:08:00.000 --> 00:08:02.980
that has a dunder init, dunder enter,


00:08:02.980 --> 00:08:05.800
and under exit functions.


00:08:05.800 --> 00:08:07.600
And then he talks about all the stuff


00:08:07.600 --> 00:08:08.800
you have to put in here.


00:08:08.800 --> 00:08:14.160
And then in your example before you said as,


00:08:14.160 --> 00:08:18.340
like with the timer as CM or something


00:08:18.340 --> 00:08:23.340
so that you could access that to see values afterwards.


00:08:23.340 --> 00:08:28.140
So Trey talks about how do you get


00:08:28.140 --> 00:08:30.060
the as functionality to work?


00:08:30.060 --> 00:08:32.620
And really it's just, you have to return something.


00:08:32.620 --> 00:08:37.240
And then there's enter and exit functions.


00:08:37.240 --> 00:08:42.080
And there's, yeah.


00:08:42.080 --> 00:08:43.700
How do you deal with all of those?


00:08:43.700 --> 00:08:46.260
It's a great, it's just a little great article.


00:08:46.260 --> 00:08:51.140
I love using context managers and knowing how to,


00:08:51.140 --> 00:08:53.980
I think it's makes sense to practice a couple of these


00:08:53.980 --> 00:08:56.540
because knowing how to use one


00:08:56.540 --> 00:08:58.980
in the context of your own code,


00:08:58.980 --> 00:09:02.220
there's frequently times where you have to do something


00:09:02.220 --> 00:09:04.120
and you know you're gonna have to clean up or something


00:09:04.120 --> 00:09:06.400
or there's some final thing that you have to do.


00:09:06.400 --> 00:09:09.060
You don't really wanna have that littered all over your code


00:09:09.060 --> 00:09:12.440
especially if there's multiple exit points or return points


00:09:12.440 --> 00:09:16.240
in a context manager is a great way to deal with that.


00:09:16.240 --> 00:09:19.520
I did wanna shout out to pytest a little bit.


00:09:19.520 --> 00:09:23.560
So the environmental variable part example


00:09:23.560 --> 00:09:26.460
is a great useful one for normal code


00:09:26.460 --> 00:09:29.760
if you ever wanna change the environment outside of testing.


00:09:29.760 --> 00:09:32.040
But if you're doing it in testing,


00:09:32.040 --> 00:09:34.280
I recommend making sure that you,


00:09:34.280 --> 00:09:35.960
I scrolled to the wrong spot.


00:09:35.960 --> 00:09:39.480
There's a monkey patch thing within pytest.


00:09:39.480 --> 00:09:44.480
So if you use fixtures, monkey patch,


00:09:44.480 --> 00:09:49.160
there is a set environment monkey patch portion.


00:09:49.160 --> 00:09:51.920
So within a test, that's how you do an environmental variable


00:09:51.920 --> 00:09:53.440
but outside of a test,


00:09:53.440 --> 00:09:56.260
why not create your own context manager?


00:09:56.260 --> 00:09:58.960
Oh, you're muted.


00:10:00.560 --> 00:10:02.640
- So the environment variable only exists


00:10:02.640 --> 00:10:05.960
while you're in the context block, right?


00:10:05.960 --> 00:10:07.680
That's cool, or the with block.


00:10:07.680 --> 00:10:09.080
- Yeah, or you're changing it.


00:10:09.080 --> 00:10:10.560
Like if you wanted to add a path,


00:10:10.560 --> 00:10:13.400
add something to the path or something.


00:10:13.400 --> 00:10:14.240
- Sure, sure, sure.


00:10:14.240 --> 00:10:15.700
- Or there's other ways to do the path,


00:10:15.700 --> 00:10:18.800
but let's say it's a, I don't know,


00:10:18.800 --> 00:10:21.480
some other Windows environment variable or something.


00:10:21.480 --> 00:10:23.560
- Yeah, these things are so cool.


00:10:23.560 --> 00:10:28.040
So if you ever find yourself writing try finally,


00:10:28.040 --> 00:10:31.120
And the finally part is unwinding something


00:10:31.120 --> 00:10:35.100
like it's clearing some variable


00:10:35.100 --> 00:10:38.540
or deleting a temporary file or closing a connection.


00:10:38.540 --> 00:10:39.820
That's a super good chance


00:10:39.820 --> 00:10:41.880
to be using a context manager instead


00:10:41.880 --> 00:10:44.560
'cause you just say with the thing and then it goes.


00:10:44.560 --> 00:10:46.840
I'll give two examples that I think were really fun


00:10:46.840 --> 00:10:48.320
that people might connect with.


00:10:48.320 --> 00:10:52.020
So prior to SQLAlchemy 1.4, the session,


00:10:52.020 --> 00:10:56.440
which is the unit of work design pattern object


00:10:56.440 --> 00:11:01.440
in SQLAlchemy, the idea of those are I start a session,


00:11:01.440 --> 00:11:05.340
I do some queries, updates, deletes, inserts, more work,


00:11:05.340 --> 00:11:08.680
and then I commit all of that work in one shot.


00:11:08.680 --> 00:11:11.640
Like, that thing didn't used to be a context manager,


00:11:11.640 --> 00:11:16.160
and so what was really awesome was I would create one,


00:11:16.160 --> 00:11:18.920
like a wrapper class that would say,


00:11:18.920 --> 00:11:21.920
in this block, create a session, do all the work,


00:11:21.920 --> 00:11:24.680
and then if you look at the dunder exit,


00:11:24.680 --> 00:11:26.680
it has whether or not there was an exception.


00:11:26.680 --> 00:11:29.320
And so my context manager, you could say when you create it,


00:11:29.320 --> 00:11:32.000
do you want to auto commit the transaction if it succeeds


00:11:32.000 --> 00:11:34.880
and auto roll it back if there's an error?


00:11:34.880 --> 00:11:37.360
And so you just say in the exit, is there an error?


00:11:37.360 --> 00:11:38.880
Roll back the session.


00:11:38.880 --> 00:11:41.240
If it's no errors, commit the session.


00:11:41.240 --> 00:11:43.240
And then you just-- it's beautiful, right?


00:11:43.240 --> 00:11:44.160
You don't have to juggle that.


00:11:44.160 --> 00:11:45.280
There's no try finally.


00:11:45.280 --> 00:11:46.920
There's-- awesome.


00:11:46.920 --> 00:11:51.000
Another one to put it in something sort of out


00:11:51.000 --> 00:11:52.880
of normal scope maybe for people,


00:11:52.880 --> 00:11:55.500
like the database one might be something you think of,


00:11:55.500 --> 00:11:57.100
is colors. - This is a great one.


00:11:57.100 --> 00:11:58.340
Yeah. - Colorama.


00:11:58.340 --> 00:12:00.280
So if you're using something like Colorama,


00:12:00.280 --> 00:12:03.080
where you're like, I want to change the color of the text


00:12:03.080 --> 00:12:05.580
for this block, right?


00:12:05.580 --> 00:12:08.500
So there's all sorts of colors and cool stuff.


00:12:08.500 --> 00:12:10.140
It's like a lightweight version of Rich,


00:12:10.140 --> 00:12:11.460
but just for colors.


00:12:11.460 --> 00:12:14.460
You can do things like print foreground.red,


00:12:14.460 --> 00:12:15.980
and it'll do some sort of,


00:12:15.980 --> 00:12:17.560
every bit of text that comes after that


00:12:17.560 --> 00:12:19.780
will be red or whatever.


00:12:19.780 --> 00:12:21.400
So you can create a context block


00:12:21.400 --> 00:12:25.280
that is like a color block of output.


00:12:25.280 --> 00:12:28.440
And then there's a reset all, style.resetall you can do.


00:12:28.440 --> 00:12:29.800
So you just, in the open,


00:12:29.800 --> 00:12:31.600
you pass in the new color settings,


00:12:31.600 --> 00:12:34.320
you do all your print statements and whatever deep down.


00:12:34.320 --> 00:12:35.440
And then on the exit,


00:12:35.440 --> 00:12:38.680
you just say print style.resetall out of Colorama


00:12:38.680 --> 00:12:41.640
and it's undone, like the color vanishes.


00:12:41.640 --> 00:12:42.800
Or you capture what it is


00:12:42.800 --> 00:12:45.440
and then you reset it to the way it was before,


00:12:45.440 --> 00:12:46.360
something along those lines.


00:12:46.360 --> 00:12:49.400
So anyway, this is, I really like this,


00:12:49.400 --> 00:12:50.320
that kind of stuff, right?


00:12:50.320 --> 00:12:53.540
people maybe don't think about color as a context manager,


00:12:53.540 --> 00:12:54.380
but it could be.


00:12:54.380 --> 00:12:55.440
- It kind of is,


00:12:55.440 --> 00:12:57.580
'cause you always have to do the thing afterwards.


00:12:57.580 --> 00:12:58.420
You always have to do the--


00:12:58.420 --> 00:12:59.880
- Yes, you gotta put it back.


00:12:59.880 --> 00:13:00.860
It's so annoying, yeah.


00:13:00.860 --> 00:13:02.600
- Yeah, anything where you have to put it back.


00:13:02.600 --> 00:13:07.600
Any other data structures that you may have like dirty,


00:13:07.600 --> 00:13:09.040
you've got cues sitting around


00:13:09.040 --> 00:13:11.280
that you wanna clean up afterwards.


00:13:11.280 --> 00:13:13.240
Those are great for context managers.


00:13:13.240 --> 00:13:14.120
- Absolutely.


00:13:14.120 --> 00:13:17.500
- Brandon Brainer notices that,


00:13:17.500 --> 00:13:20.740
and points out that there's also context lib


00:13:20.740 --> 00:13:21.940
for making them.


00:13:21.940 --> 00:13:23.740
And I'm glad he brought that up.


00:13:23.740 --> 00:13:25.060
I was gonna bring that up.


00:13:25.060 --> 00:13:28.820
Context lib is great, especially for quickly


00:13:28.820 --> 00:13:32.340
and doing context managers.


00:13:32.340 --> 00:13:35.780
But I think it's, and maybe the documentation's pretty good.


00:13:35.780 --> 00:13:38.180
You can do a decorator context manager


00:13:38.180 --> 00:13:40.560
and then you can use a yield for it.


00:13:40.560 --> 00:13:43.480
But I really like the notion of,


00:13:43.480 --> 00:13:44.820
I guess you should understand both.


00:13:44.820 --> 00:13:47.620
I think people should understand how to write them


00:13:47.620 --> 00:13:50.260
with just under methods and how to write them


00:13:50.260 --> 00:13:52.580
with the context manager and context lab.


00:13:52.580 --> 00:13:53.660
I think both are useful,


00:13:53.660 --> 00:13:57.720
but to mentally understand how the enter exit,


00:13:57.720 --> 00:14:00.220
all that stuff works, I think is important.


00:14:00.220 --> 00:14:01.140
So thanks, Brian.


00:14:01.140 --> 00:14:04.540
- Yes, and let's tie the thing that I opened with


00:14:04.540 --> 00:14:07.440
and this one a little bit tighter together, Brian.


00:14:07.440 --> 00:14:12.440
There's an A enter and A exit or async with blocks, right?


00:14:14.060 --> 00:14:16.000
So if you want an asynchronous enabled version,


00:14:16.000 --> 00:14:17.580
you just create an async,


00:14:17.580 --> 00:14:23.000
async def a enter, then async def a exit.


00:14:23.000 --> 00:14:26.040
And now you can do async and await stuff


00:14:26.040 --> 00:14:28.360
in your context manager,


00:14:28.360 --> 00:14:31.920
which is sort of the async equivalent of the enter and exit.


00:14:31.920 --> 00:14:35.800
- Okay, and the context lib also has


00:14:35.800 --> 00:14:40.440
these async context manager options,


00:14:40.440 --> 00:14:41.700
a enter and a exit.


00:14:41.700 --> 00:14:42.640
- Cool. - Yeah, perfect.


00:14:42.640 --> 00:14:43.480
- Yeah, exactly.


00:14:43.480 --> 00:14:46.160
Very nice, very nice.


00:14:46.160 --> 00:14:51.240
All right, let's go to the next one, huh?


00:14:51.240 --> 00:14:52.360
- Yeah.


00:14:52.360 --> 00:14:54.680
- So, server sent events.


00:14:54.680 --> 00:14:56.480
Let's talk about server sent events.


00:14:56.480 --> 00:15:00.560
Server sent events, people probably,


00:15:00.560 --> 00:15:03.000
well, they certainly know what a request response is


00:15:03.000 --> 00:15:06.180
for the web, because we do that in our browsers all the time.


00:15:06.180 --> 00:15:08.600
I enter a URL, the page comes back.


00:15:08.600 --> 00:15:11.000
I click a button, it does another request,


00:15:11.000 --> 00:15:13.480
it pulls back a page, maybe I submit a form, it posts it,


00:15:13.480 --> 00:15:15.600
and then it pulls back a page.


00:15:15.600 --> 00:15:18.840
That's traditional web interchange.


00:15:18.840 --> 00:15:22.500
But that is a stateless kind of one time


00:15:22.500 --> 00:15:24.640
and who knows what happens after that


00:15:24.640 --> 00:15:25.960
sort of experience for the web.


00:15:25.960 --> 00:15:29.520
And so there were a bunch of different styles of like,


00:15:29.520 --> 00:15:31.880
what if the web server and the client


00:15:31.880 --> 00:15:34.600
could talk to each other type of thing?


00:15:34.600 --> 00:15:39.200
In the early days, this is what's called long polling.


00:15:39.200 --> 00:15:42.500
this works, but it is bad on your server for,


00:15:42.500 --> 00:15:44.560
so what you do is you make a request


00:15:44.560 --> 00:15:46.520
and the server doesn't respond right away.


00:15:46.520 --> 00:15:49.120
It just says, this request is gonna time out


00:15:49.120 --> 00:15:51.760
in five minutes and then it'll wait.


00:15:51.760 --> 00:15:54.520
And if it has any events to send during that time,


00:15:54.520 --> 00:15:55.960
it'll respond and then you start


00:15:55.960 --> 00:15:59.400
another long polled event cycle, right?


00:15:59.400 --> 00:16:01.180
But the problem is you've got to,


00:16:01.180 --> 00:16:02.920
for everything that might be interested,


00:16:02.920 --> 00:16:06.400
you've got an open socket just waiting,


00:16:06.400 --> 00:16:09.880
try like in the process that requests queue sort of thing.


00:16:09.880 --> 00:16:11.400
It's not great.


00:16:11.400 --> 00:16:12.960
And then web sockets were added.


00:16:12.960 --> 00:16:16.400
And web sockets are cool because they create this connection


00:16:16.400 --> 00:16:20.080
that is bidirectional, like a binary bidirectional socket


00:16:20.080 --> 00:16:24.240
channel from the web server to the client, which is cool.


00:16:24.240 --> 00:16:27.640
Not great for IoT things, mobile devices


00:16:27.640 --> 00:16:30.900
are not necessarily super good for web sockets.


00:16:30.900 --> 00:16:33.080
It's kind of heavyweight.


00:16:33.080 --> 00:16:35.240
It's like a very sort of complex,


00:16:35.240 --> 00:16:36.740
like we're gonna be able to have a client


00:16:36.740 --> 00:16:38.720
talk to the server, but also the server, the client,


00:16:38.720 --> 00:16:40.760
they can respond to each other.


00:16:40.760 --> 00:16:43.360
So a lighter weight, simpler version of that


00:16:43.360 --> 00:16:46.920
would be server sent events, okay?


00:16:46.920 --> 00:16:50.280
So what server sent events do is it's the same idea,


00:16:50.280 --> 00:16:52.560
like I want to have the server


00:16:52.560 --> 00:16:54.080
without the client's interaction


00:16:54.080 --> 00:16:55.640
send messages to the client.


00:16:55.640 --> 00:16:58.540
So I could create like a dashboard or something, right?


00:16:58.540 --> 00:17:01.580
The difference with server sent events is


00:17:01.580 --> 00:17:03.080
it's not bi-directional.


00:17:03.080 --> 00:17:05.360
only the server can send information to the client.


00:17:05.360 --> 00:17:07.500
But often for like dashboard type things,


00:17:07.500 --> 00:17:08.340
that's all you want.


00:17:08.340 --> 00:17:10.740
Like I wanna pull up a bunch of pieces of information


00:17:10.740 --> 00:17:14.000
and if any of them change, let the server notify me, right?


00:17:14.000 --> 00:17:14.840
- Oh yeah.


00:17:14.840 --> 00:17:16.400
- I wanna create a page that shows


00:17:16.400 --> 00:17:18.720
the position of all the cars in F1,


00:17:18.720 --> 00:17:22.080
their last pit stop, their tires, like all of that stuff.


00:17:22.080 --> 00:17:23.840
And like, if any of them change,


00:17:23.840 --> 00:17:27.520
I want the server to be able to let the browser know,


00:17:27.520 --> 00:17:30.380
but there's no reason the browser needs to like,


00:17:30.380 --> 00:17:31.240
make a change, right?


00:17:31.240 --> 00:17:33.560
It's a watching, right?


00:17:33.560 --> 00:17:34.840
So if you have this watching scenario,


00:17:34.840 --> 00:17:36.480
server sent events are like a simpler,


00:17:36.480 --> 00:17:39.120
more lightweight, awesome way to do this.


00:17:39.120 --> 00:17:42.480
Okay, we all know what SSE, server sent events are.


00:17:42.480 --> 00:17:43.320
- Okay.


00:17:43.320 --> 00:17:46.980
- So if you want that, in Python,


00:17:46.980 --> 00:17:48.240
there's this cool library,


00:17:48.240 --> 00:17:50.920
which is not super well known, but it's cool,


00:17:50.920 --> 00:17:52.760
is HTTPX.


00:17:52.760 --> 00:17:55.040
So HTTPX is kind of like requests,


00:17:55.040 --> 00:17:58.360
sort of maybe the modern day version of requests,


00:17:58.360 --> 00:18:03.360
because it has a really great async and await story going on.


00:18:03.360 --> 00:18:08.120
So there's this extension called HTTPX-SSE


00:18:08.120 --> 00:18:13.120
for consuming server sent events with HTTPX.


00:18:13.120 --> 00:18:14.320
- Oh, okay.


00:18:14.320 --> 00:18:16.780
- Yeah, so if you wanna be a client


00:18:16.780 --> 00:18:18.760
to one of these things in Python,


00:18:18.760 --> 00:18:21.160
to some server that's sending out these notifications


00:18:21.160 --> 00:18:25.040
and these updates, well, HTTPX is an awesome way to do it


00:18:25.040 --> 00:18:26.760
because you can do async and await.


00:18:26.760 --> 00:18:28.320
So just a great client in general.


00:18:28.320 --> 00:18:29.880
And then here you plug this in


00:18:29.880 --> 00:18:33.320
and it has a really, really clean API to do it.


00:18:33.320 --> 00:18:38.320
So what you do is you would get the connect SSE out of it


00:18:38.320 --> 00:18:42.380
and you just with HTTPS, you just create a client


00:18:42.380 --> 00:18:45.400
and then you say connect the SSE to that client


00:18:45.400 --> 00:18:46.840
to someplace gives you an event source.


00:18:46.840 --> 00:18:50.040
And then you just iterate, you just say for thing and event


00:18:50.040 --> 00:18:52.960
and it just blocks until the server sends you an event


00:18:52.960 --> 00:18:55.160
and it'll I think raise an exception


00:18:55.160 --> 00:18:57.040
if the socket's closed is what happens.


00:18:57.040 --> 00:18:58.540
So you just like loop over the events


00:18:58.540 --> 00:19:01.840
that the server's sending you when they happen.


00:19:01.840 --> 00:19:03.080
- Okay, cool.


00:19:03.080 --> 00:19:03.920
- Isn't that cool?


00:19:03.920 --> 00:19:06.280
So yeah, so you could like in my F1 example,


00:19:06.280 --> 00:19:08.640
you could subscribe to the changes of the race


00:19:08.640 --> 00:19:10.660
and when anything happens, you would get like,


00:19:10.660 --> 00:19:13.440
there's a new tire event and here's the data about it


00:19:13.440 --> 00:19:17.720
and the ID of the event session


00:19:17.720 --> 00:19:20.720
and all those different things just streaming to you.


00:19:20.720 --> 00:19:24.200
And it's like literally five lines of code,


00:19:24.200 --> 00:19:27.320
Sorry, six lines of code with the import statement.


00:19:27.320 --> 00:19:30.280
- So what does it look like on the server then?


00:19:30.280 --> 00:19:32.520
I guess that's not what this--


00:19:32.520 --> 00:19:33.840
- It's not your problem.


00:19:33.840 --> 00:19:37.880
However, they do say you can create a server,


00:19:37.880 --> 00:19:40.760
sorry, a starlet server here,


00:19:40.760 --> 00:19:42.380
and they have below an example you can use.


00:19:42.380 --> 00:19:45.560
So it's cool they've got a Python example for both ends.


00:19:45.560 --> 00:19:48.840
So what you do on the server is you create an async function


00:19:48.840 --> 00:19:53.840
and here's a async function that just yields bits of code.


00:19:53.840 --> 00:19:55.940
bits of just a series of numbers.


00:19:55.940 --> 00:19:57.420
It's kind of like a really cheesy example,


00:19:57.420 --> 00:20:01.080
but it sleeps for about an async second.


00:20:01.080 --> 00:20:03.320
It's like a New York second, like a New York minute,


00:20:03.320 --> 00:20:06.620
but 1/60th of it, and it doesn't block stuff.


00:20:06.620 --> 00:20:09.700
So for an async second, you sleep,


00:20:09.700 --> 00:20:11.540
and then it yields up the data, right?


00:20:11.540 --> 00:20:16.120
And then you can just create one of these


00:20:16.120 --> 00:20:22.660
event source responses, which comes out of the Starlette SSE,


00:20:22.720 --> 00:20:24.880
which is not related to this, I believe,


00:20:24.880 --> 00:20:26.760
but it's like kind of the server implementation.


00:20:26.760 --> 00:20:28.700
And then you just set that as an endpoint.


00:20:28.700 --> 00:20:31.880
So in order to do that, they just connect to that,


00:20:31.880 --> 00:20:33.540
and then they just get these numbers


00:20:33.540 --> 00:20:35.840
just streaming back every second or so.


00:20:35.840 --> 00:20:37.660
- That's pretty cool.


00:20:37.660 --> 00:20:38.840
- Yeah, I mean, all of this,


00:20:38.840 --> 00:20:43.320
like if I hit Command minus one time,


00:20:43.320 --> 00:20:45.240
all of the, both the server and the client


00:20:45.240 --> 00:20:47.120
fit on one screen of code.


00:20:47.120 --> 00:20:47.960
- Yeah.


00:20:47.960 --> 00:20:49.080
- Yeah.


00:20:49.080 --> 00:20:50.720
That's pretty neat.


00:20:50.720 --> 00:20:52.480
What else do I have to say about it?


00:20:52.480 --> 00:20:59.480
It has an async way to call it and a synchronous way to call it because that's HTTPS's style.


00:20:59.480 --> 00:21:03.480
It shows how to do it with the async. Here's your async with block.


00:21:03.480 --> 00:21:05.480
I mean, it's full of context managers this episode.


00:21:05.480 --> 00:21:07.480
And it shows you all the different things that you can do.


00:21:07.480 --> 00:21:10.480
It talks about how you handle reconnects.


00:21:10.480 --> 00:21:16.480
And all of these little projects and all these things we're talking about are


00:21:16.480 --> 00:21:22.400
There's sort of a breadcrumbs through the trail of Python.


00:21:22.400 --> 00:21:28.960
So it says, look, if there's an error, what you might do about that, like if you disconnect,


00:21:28.960 --> 00:21:33.240
you might want to just let it be disconnected, or you might want to try to reconnect or who


00:21:33.240 --> 00:21:36.320
knows right what you need to do is not really known by this library.


00:21:36.320 --> 00:21:39.800
So it just says, they're just going to get an exception.


00:21:39.800 --> 00:21:45.180
But it does provide a way to resume by holding on to the last event ID.


00:21:45.180 --> 00:21:47.340
So you can say like, hey, you know that generator


00:21:47.340 --> 00:21:48.380
you were sending me before?


00:21:48.380 --> 00:21:51.260
Like, let's keep doing that, which is kind of cool.


00:21:51.260 --> 00:21:53.100
And then you'll just pick up.


00:21:53.100 --> 00:21:54.140
But here's the breadcrumbs.


00:21:54.140 --> 00:21:57.800
It says, here's how you might achieve this using Stamina.


00:21:57.800 --> 00:22:02.220
And it has the operations here and it says, on HTTPS,


00:22:02.220 --> 00:22:06.020
gives a decorator, says @retry on HTTPS.reader.


00:22:06.020 --> 00:22:09.420
And then it goes how to redo it again and how often.


00:22:09.420 --> 00:22:12.340
So Stamina is a project by Hennecke


00:22:12.340 --> 00:22:17.260
that allows you to do asynchronous retries


00:22:17.260 --> 00:22:18.540
and all sorts of cool stuff.


00:22:18.540 --> 00:22:21.420
So maybe something fun to,


00:22:21.420 --> 00:22:22.740
have we talked about stamina before?


00:22:22.740 --> 00:22:23.580
I don't believe we have, have we?


00:22:23.580 --> 00:22:25.180
- I don't think we have.


00:22:25.180 --> 00:22:26.980
- I don't remember it either.


00:22:26.980 --> 00:22:29.940
So anyway, yeah, there's a lot of cool stuff in here, right?


00:22:29.940 --> 00:22:30.780
- Yeah.


00:22:30.780 --> 00:22:32.900
- And yeah, so people can go and check this out,


00:22:32.900 --> 00:22:35.720
but here's the retrying version.


00:22:35.720 --> 00:22:36.980
You can see an example of that


00:22:36.980 --> 00:22:40.340
where it just automatically will continue to keep going.


00:22:40.340 --> 00:22:45.340
So pretty cool little library here, HTTPS-SE.


00:22:45.340 --> 00:22:47.540
It has 51 GitHub stars.


00:22:47.540 --> 00:22:51.260
I feel like it deserves more so people can give it a look.


00:22:51.260 --> 00:22:52.580
- Yeah.


00:22:52.580 --> 00:22:57.580
Well, speaking of cool projects in Python,


00:22:57.580 --> 00:23:00.900
you probably grab them from PyPI, right?


00:23:00.900 --> 00:23:01.720
- Of course.


00:23:01.720 --> 00:23:02.700
- To a pip install.


00:23:02.700 --> 00:23:06.620
And let's take a look at stamina, for instance.


00:23:06.620 --> 00:23:09.300
In a lot of projects, one of the things you can do,


00:23:09.300 --> 00:23:11.740
you can go down and on the left-hand side,


00:23:11.740 --> 00:23:13.940
there's project description, release history,


00:23:13.940 --> 00:23:16.940
download files, everybody has, all of them have that.


00:23:16.940 --> 00:23:20.180
But then there's project links and these change,


00:23:20.180 --> 00:23:21.540
they're different on different projects.


00:23:21.540 --> 00:23:24.020
So Stamina's got a change log


00:23:24.020 --> 00:23:26.820
and documentation and funding and source,


00:23:26.820 --> 00:23:29.780
and they all have like icons associated with it.


00:23:29.780 --> 00:23:32.500
So I don't know what we have.


00:23:32.500 --> 00:23:37.220
If we go to sources, it goes to GitHub, looks like funding.


00:23:37.220 --> 00:23:38.700
It's a GitHub sponsors.


00:23:38.700 --> 00:23:39.860
That's pretty cool.


00:23:39.860 --> 00:23:42.540
Documentation, I'm looking at the bottom of my screen.


00:23:42.540 --> 00:23:46.100
Documentation links to stamina.hinnik.me.


00:23:46.100 --> 00:23:47.200
Okay, interesting.


00:23:47.200 --> 00:23:51.220
Change log, anyway, these links are great on projects.


00:23:51.220 --> 00:23:53.080
Let's take a look at, but they're different.


00:23:53.080 --> 00:23:56.500
So textual just as a homepage.


00:23:56.500 --> 00:23:57.340
Okay.


00:23:57.340 --> 00:24:02.980
HTTPX has change log homepage documentation.


00:24:04.140 --> 00:24:07.180
pytest has a bunch also, also has a tracker.


00:24:07.180 --> 00:24:08.140
That's kind of neat.


00:24:08.140 --> 00:24:09.460
And Twitter. - A log in there, yeah.


00:24:09.460 --> 00:24:10.300
- Yeah.


00:24:10.300 --> 00:24:12.740
So how do you get these?


00:24:12.740 --> 00:24:14.300
So if you have a project,


00:24:14.300 --> 00:24:16.680
it's really helpful to put these in here.


00:24:16.680 --> 00:24:19.700
And so there's Daniel Roy Greenfield,


00:24:19.700 --> 00:24:22.940
wrote a blog post or post saying,


00:24:22.940 --> 00:24:25.880
PyPI project URLs cheat sheet.


00:24:25.880 --> 00:24:28.620
So basically he figured all this stuff out.


00:24:28.620 --> 00:24:30.940
It's in, it's not documented really anywhere,


00:24:30.940 --> 00:24:31.900
except for here,


00:24:31.900 --> 00:24:34.260
but it's in the warehouse code.


00:24:34.260 --> 00:24:37.300
And the warehouse is the software that runs PyPI.


00:24:37.300 --> 00:24:40.420
And I'm not gonna dig through this too much,


00:24:40.420 --> 00:24:41.760
but basically it's the,


00:24:41.760 --> 00:24:44.780
trying to figure out what the name,


00:24:44.780 --> 00:24:48.220
if the name that you put on in for a link,


00:24:48.220 --> 00:24:50.320
and then which icon to use, if that's it.


00:24:50.320 --> 00:24:53.320
So there's a bunch of different icons that are available.


00:24:53.320 --> 00:24:56.260
And anyway, we don't need to look at that too much


00:24:56.260 --> 00:24:58.920
because Daniel made a cheat sheet for us.


00:24:58.920 --> 00:25:03.680
So he shows a handful of them on the, on his post,


00:25:03.680 --> 00:25:06.220
also a link to where they all are.


00:25:06.220 --> 00:25:10.280
But then what it is, is you've got project URLs


00:25:10.280 --> 00:25:13.280
in your PyProject toml file.


00:25:13.280 --> 00:25:16.600
And he just lists a bunch of them that you probably want,


00:25:16.600 --> 00:25:20.120
possibly like homepage, repository, changelog.


00:25:20.120 --> 00:25:21.920
Anyway, this is a really cool cheat sheet


00:25:21.920 --> 00:25:24.240
of things that you might wanna use


00:25:24.240 --> 00:25:26.640
and what names to give them.


00:25:26.640 --> 00:25:31.640
So it's a name equals string with the URL and you know,


00:25:31.640 --> 00:25:35.160
some of the names on the left can be anything,


00:25:35.160 --> 00:25:37.600
but if they're special things, you get an icon.


00:25:37.600 --> 00:25:38.440
So.


00:25:38.440 --> 00:25:39.260
- Nice.


00:25:39.260 --> 00:25:42.360
- Anyway, and there's even a mastodon now, one now.


00:25:42.360 --> 00:25:43.200
So that's cool.


00:25:43.200 --> 00:25:44.040
- Yay.


00:25:44.040 --> 00:25:45.800
You have to change the Twitter one.


00:25:45.800 --> 00:25:48.000
- Twitter.


00:25:48.000 --> 00:25:49.440
Oh, it's Twitter or X.


00:25:49.440 --> 00:25:50.280
Interesting.


00:25:50.280 --> 00:25:51.100
- Yeah.


00:25:51.100 --> 00:25:51.940
I think how much math that's gonna break.


00:25:51.940 --> 00:25:53.480
It has to be called X everywhere now.


00:25:53.480 --> 00:25:54.680
No more algebra for you.


00:25:56.200 --> 00:25:57.040
>> Yeah.


00:25:57.040 --> 00:25:58.240
>> What a toaster fire.


00:25:58.240 --> 00:25:58.520
Okay.


00:25:58.520 --> 00:26:01.360
>> [LAUGH]


00:26:01.360 --> 00:26:04.760
>> Mike on the audience points out the icons are courtesy of Font Awesome,


00:26:04.760 --> 00:26:06.120
and indeed they are.


00:26:06.120 --> 00:26:08.280
If you're not familiar with Font Awesome, check that out.


00:26:08.280 --> 00:26:12.640
So, like we can come over here and search for, wait for it, GitHub.


00:26:12.640 --> 00:26:15.160
And you get all these icons here.


00:26:15.160 --> 00:26:17.680
One of them is the one that shows up.


00:26:17.680 --> 00:26:19.360
I don't remember which one of these it would be.


00:26:19.360 --> 00:26:24.600
But, if, you know, so it shows you the code that you need.


00:26:24.600 --> 00:26:29.600
it's just fa-brands space fa-github for the icon there.


00:26:29.600 --> 00:26:33.240
But if for some reason you're like,


00:26:33.240 --> 00:26:35.100
what if there was a merge one?


00:26:35.100 --> 00:26:38.640
I want to merge, but there's no merge that's there,


00:26:38.640 --> 00:26:40.120
like on your other project, right?


00:26:40.120 --> 00:26:42.840
Then there's, I don't know how many icons are in Font Awesome,


00:26:42.840 --> 00:26:47.440
like 6,000, yeah, 6,444 in total.


00:26:47.440 --> 00:26:48.960
Maybe, no, I take that back,


00:26:48.960 --> 00:26:51.480
'cause there's new 12,000, new ones.


00:26:51.480 --> 00:26:53.700
So there's a lot, let's just say there's a lot here.


00:26:53.700 --> 00:26:55.720
Well, the top said 26,000.


00:26:55.720 --> 00:26:57.200
So that's, there we go.


00:26:57.200 --> 00:26:58.560
Yeah.


00:26:58.560 --> 00:26:58.980
Awesome.


00:26:58.980 --> 00:26:59.860
Yeah.


00:26:59.860 --> 00:27:00.300
So.


00:27:00.300 --> 00:27:02.360
Oh, there's a fire one.


00:27:02.360 --> 00:27:04.080
Oh, there's so many good ones.


00:27:04.080 --> 00:27:05.580
That'd be good for Twitter now.


00:27:05.580 --> 00:27:10.400
So by the way, if you got to buy them bites and you're going to, it would be, I


00:27:10.400 --> 00:27:13.400
would be, if you go to the bottom, like all these little icons, these are all


00:27:13.400 --> 00:27:13.640
fun.


00:27:13.640 --> 00:27:13.980
Awesome.


00:27:13.980 --> 00:27:15.920
Even the little heart about made in Portland.


00:27:15.920 --> 00:27:16.480
Ah,


00:27:16.480 --> 00:27:19.400
is font awesome a free thing or do you got to pay for it?


00:27:19.400 --> 00:27:20.000
Do you know?


00:27:20.000 --> 00:27:20.440
Yes.


00:27:20.440 --> 00:27:20.760
And no.


00:27:20.920 --> 00:27:25.840
So Font Awesome is, if I search for GitHub again,


00:27:25.840 --> 00:27:28.480
you see that some say pro and some don't.


00:27:28.480 --> 00:27:30.280
- Yeah, oh, okay.


00:27:30.280 --> 00:27:31.780
- The ones that don't say pro are free.


00:27:31.780 --> 00:27:33.800
The ones that say pro are pro.


00:27:33.800 --> 00:27:37.560
They cost like $100 a year subscription,


00:27:37.560 --> 00:27:40.720
but I bought a subscription to it and just canceled it


00:27:40.720 --> 00:27:41.840
because--


00:27:41.840 --> 00:27:43.440
- You got the icons you need.


00:27:43.440 --> 00:27:44.480
- I got the icon.


00:27:44.480 --> 00:27:46.600
If I'm just locked at version six for a good long while,


00:27:46.600 --> 00:27:47.440
that's fine.


00:27:47.440 --> 00:27:50.800
Maybe someday I'll buy more, but yeah, so there you go.


00:27:50.800 --> 00:27:51.640
- Nice.


00:27:51.640 --> 00:27:54.000
- So yeah, that's awesome, but it's cool how you,


00:27:54.000 --> 00:27:56.640
or how you pointed out, Danny,


00:27:56.640 --> 00:27:59.240
related that to the pyproject.toml.


00:27:59.240 --> 00:28:01.160
I had no idea that that's how those went together.


00:28:01.160 --> 00:28:02.000
It's cool.


00:28:02.000 --> 00:28:03.480
- Yeah, nice.


00:28:03.480 --> 00:28:06.080
All right.


00:28:06.080 --> 00:28:08.120
- All right, well, I've got my screen up.


00:28:08.120 --> 00:28:09.640
I'm off to the next one, huh?


00:28:09.640 --> 00:28:10.480
- Yeah.


00:28:10.480 --> 00:28:11.300
- We're done with them, aren't we?


00:28:11.300 --> 00:28:13.080
That was, I have no more items.


00:28:13.080 --> 00:28:16.300
No more items to cover, other than extras.


00:28:16.300 --> 00:28:20.000
- Okay, well, I have a few, couple extras.


00:28:20.000 --> 00:28:25.000
So I, a couple of more people, more people, more people,


00:28:25.000 --> 00:28:28.000
and Python people.


00:28:28.000 --> 00:28:29.080
What did I want to say?


00:28:29.080 --> 00:28:32.560
Oh, just that I had some great feedback.


00:28:32.560 --> 00:28:35.200
So I love starting something new.


00:28:35.200 --> 00:28:37.120
It's good to provide feedback for people.


00:28:37.120 --> 00:28:40.320
And I got some wonderful feedback that the music


00:28:40.320 --> 00:28:44.320
that I stole from testing code is annoying on Python people


00:28:44.320 --> 00:28:47.320
'cause it's a completely different tone and fair enough.


00:28:47.320 --> 00:28:49.400
So I'm gonna go through and rip out all the music,


00:28:49.400 --> 00:28:52.560
the intro music out of Python people.


00:28:52.560 --> 00:28:56.200
So, and also the next episode's coming out this week.


00:28:56.200 --> 00:28:58.680
It'll be Bob Bilderbos from PyBytes.


00:28:58.680 --> 00:28:59.680
It's a good episode.


00:28:59.680 --> 00:29:01.380
So, should be out later this week.


00:29:01.380 --> 00:29:04.460
Do you have any extras?


00:29:04.460 --> 00:29:06.080
- I do, I do, I do.


00:29:06.080 --> 00:29:09.680
I have some cool announcements and some extras


00:29:09.680 --> 00:29:11.000
and all of those things.


00:29:11.000 --> 00:29:15.280
First of all, businesses achieve fusion


00:29:15.280 --> 00:29:18.240
with NetEnergy Game for the second time.


00:29:18.240 --> 00:29:23.640
So, you know, the holy grail of energy is fusion, not fission, right?


00:29:23.640 --> 00:29:29.220
Just squishing stuff together like the sun does and getting heavier particles and tons


00:29:29.220 --> 00:29:32.640
of energy with no waste, no negative waste really.


00:29:32.640 --> 00:29:35.760
I mean, there's output, but it's like helium or something, right?


00:29:35.760 --> 00:29:38.000
Oh, no. We need more helium anyway.


00:29:38.000 --> 00:29:42.220
I don't know, Brian, if you knew, but there's a helium shortage


00:29:42.220 --> 00:29:44.000
and a crisis of helium potentially.


00:29:44.000 --> 00:29:45.140
We'll see that someday.


00:29:45.580 --> 00:29:52.380
Anyway, the big news is the folks over at the NIF


00:29:52.380 --> 00:29:54.460
repeated this big breakthrough that they


00:29:54.460 --> 00:29:57.060
had last year at the National Ignition Facility.


00:29:57.060 --> 00:29:58.820
So congrats to them.


00:29:58.820 --> 00:30:01.740
And why am I covering this here other than, hey,


00:30:01.740 --> 00:30:05.180
it's chemical science, is last year after that,


00:30:05.180 --> 00:30:09.460
or actually earlier this year, I had Jay Solomonson on the show.


00:30:09.460 --> 00:30:11.340
And we talked about all the Python


00:30:11.340 --> 00:30:14.740
that is behind that project at the NIF


00:30:14.740 --> 00:30:18.140
and how they use Python to help power up the whole


00:30:18.140 --> 00:30:20.340
Nash fusion breakthrough that they had.


00:30:20.340 --> 00:30:22.060
So, pretty cool.


00:30:22.060 --> 00:30:23.580
People want to learn more about that.


00:30:23.580 --> 00:30:27.340
They can listen to the episode 403 on Talk Python.me


00:30:27.340 --> 00:30:29.780
and just congrats to Jay and team again.


00:30:29.780 --> 00:30:30.940
That's very cool.


00:30:30.940 --> 00:30:35.940
- Do they have a 1.21 gigawatt one yet?


00:30:35.940 --> 00:30:38.500
- That would be good.


00:30:38.500 --> 00:30:39.320
- They can't go back in time yet.


00:30:39.320 --> 00:30:40.240
No. - No, okay.


00:30:40.240 --> 00:30:42.820
- No, but if you actually look,


00:30:42.820 --> 00:30:48.340
there's a video, down there's this video demonstration.


00:30:48.340 --> 00:30:54.100
If you actually look at the project here, the machine that it goes through,


00:30:54.100 --> 00:30:59.240
this is like a room size, like a warehouse room size machine of lasers and coolers


00:30:59.240 --> 00:31:06.200
and mirrors and insane stuff, that it goes through till it hits like a dime


00:31:06.200 --> 00:31:09.320
size or small marble size piece somewhere.


00:31:09.320 --> 00:31:10.780
There's like an insane, there is.


00:31:11.440 --> 00:31:14.560
It's not exactly what you're asking for, but


00:31:14.560 --> 00:31:16.240
there is something insane on the other side


00:31:16.240 --> 00:31:16.920
of the devices.


00:31:16.920 --> 00:31:17.640
Yeah.


00:31:17.640 --> 00:31:19.680
We've got a ways to get this into a car.


00:31:19.680 --> 00:31:21.360
Yeah.


00:31:21.360 --> 00:31:24.160
I mean, Marty McFly has got to definitely wait


00:31:24.160 --> 00:31:27.000
to save his parents relationship.


00:31:27.000 --> 00:31:27.320
Okay.


00:31:27.320 --> 00:31:28.800
All right.


00:31:28.800 --> 00:31:29.120
All right.


00:31:29.120 --> 00:31:30.680
I have another bit of positive news.


00:31:30.680 --> 00:31:31.480
I think this is positive.


00:31:31.480 --> 00:31:32.600
This is a very positive news.


00:31:32.600 --> 00:31:33.040
Yeah.


00:31:33.040 --> 00:31:34.640
The other positive news is, you know, I've


00:31:34.640 --> 00:31:37.520
kind of knocked on, on Facebook and Google.


00:31:37.520 --> 00:31:39.400
I get last time I think I was railing against


00:31:39.400 --> 00:31:42.560
Google and their DRM for websites,


00:31:42.560 --> 00:31:46.320
like their ongoing persistent premise


00:31:46.320 --> 00:31:48.920
that we must track and retarget you.


00:31:48.920 --> 00:31:50.800
So how can we make the web better?


00:31:50.800 --> 00:31:53.160
Like, no, no, that's not the assumption


00:31:53.160 --> 00:31:54.280
we need to start with.


00:31:54.280 --> 00:31:55.140
No, it's not.


00:31:55.140 --> 00:31:58.160
So I would, you know, I just want to point out


00:31:58.160 --> 00:31:59.720
maybe like a little credit,


00:31:59.720 --> 00:32:02.040
a little credit to Facebook at this time,


00:32:02.040 --> 00:32:04.040
a little, maybe a positive shout out.


00:32:04.040 --> 00:32:06.240
So there's a bunch of rules that I think are


00:32:07.360 --> 00:32:10.280
off the target by here.


00:32:10.280 --> 00:32:15.280
And for example, there were a bunch of attempts


00:32:15.280 --> 00:32:18.680
and like in Spain, there was an attempt to say,


00:32:18.680 --> 00:32:24.000
if you're going to link to a news organization,


00:32:24.000 --> 00:32:25.040
you have to pay them.


00:32:25.040 --> 00:32:26.880
- Okay.


00:32:26.880 --> 00:32:27.700
- Like, wait a minute.


00:32:27.700 --> 00:32:32.600
So our big platform is sending you free traffic.


00:32:32.600 --> 00:32:34.640
And to do that, we have to pay you,


00:32:34.640 --> 00:32:36.200
because the newspapers are having a hard time


00:32:36.200 --> 00:32:37.200
and they're important.


00:32:37.200 --> 00:32:39.340
but maybe that's a little bit off.


00:32:39.340 --> 00:32:42.360
Probably the most outrageous of this category of them


00:32:42.360 --> 00:32:43.380
were somewhere in Europe,


00:32:43.380 --> 00:32:45.000
I can't remember if it was the EU in general


00:32:45.000 --> 00:32:48.240
or a particular company, a country rather, sorry.


00:32:48.240 --> 00:32:52.400
They were trying to make companies like Netflix


00:32:52.400 --> 00:32:57.160
and Google because of YouTube pay for their broadband


00:32:57.160 --> 00:32:59.760
because people consume a lot of their content.


00:32:59.760 --> 00:33:01.120
So it uses a lot of their traffic.


00:33:01.120 --> 00:33:02.760
It's like, wait a minute,


00:33:02.760 --> 00:33:05.160
we're paying already to like get this to you.


00:33:05.160 --> 00:33:06.640
And then you're gonna charge us


00:33:06.640 --> 00:33:08.880
to make you pay for our infrastructure.


00:33:08.880 --> 00:33:10.200
I don't know, it's just, you're like,


00:33:10.200 --> 00:33:12.360
oh, no, no, no, that seems really odd to say,


00:33:12.360 --> 00:33:17.360
like, you know, Netflix should pay for Europe's fiber


00:33:17.360 --> 00:33:19.600
because people watch Netflix.


00:33:19.600 --> 00:33:21.920
I don't know, that just, it seems super backwards to me.


00:33:21.920 --> 00:33:22.760
So--


00:33:22.760 --> 00:33:25.320
- Okay, I'm gonna be a devil's advocate here.


00:33:25.320 --> 00:33:29.360
I think that if Netflix, for example,


00:33:29.360 --> 00:33:31.640
if Netflix is taking half the bandwidth


00:33:31.640 --> 00:33:33.080
or something like that,


00:33:33.080 --> 00:33:36.080
then all of the infrastructure costs


00:33:36.080 --> 00:33:39.820
half of those costs are benefiting Netflix and they're profiting off of it.


00:33:39.820 --> 00:33:45.020
I think that's sort of legitimate. It, it depends on the scale,


00:33:45.020 --> 00:33:47.860
right? I think like,


00:33:47.860 --> 00:33:50.380
we are not taking a ton of bandwidth from Europe,


00:33:50.380 --> 00:33:53.060
so it would be weird for us to have to pay something.


00:33:53.060 --> 00:33:58.060
But if I'm taking a measurable percentage, that's probably maybe okay.


00:33:58.060 --> 00:34:03.980
the other side is like, I read Google news still,


00:34:04.100 --> 00:34:05.620
even though I'm not a huge fan of Google,


00:34:05.620 --> 00:34:07.180
but I read Google News,


00:34:07.180 --> 00:34:08.860
there's a lot of times where that's enough.


00:34:08.860 --> 00:34:10.700
I'm like, is there anything important happening?


00:34:10.700 --> 00:34:12.100
I'm just reading the headlines.


00:34:12.100 --> 00:34:13.780
I'm not clicking on the link.


00:34:13.780 --> 00:34:16.940
And that benefit then for Google


00:34:16.940 --> 00:34:19.540
wouldn't be there if the newspapers weren't there.


00:34:19.540 --> 00:34:22.260
So I would say some money going to the newspapers


00:34:22.260 --> 00:34:23.980
that are providing those headlines,


00:34:23.980 --> 00:34:25.500
I think that's fair.


00:34:25.500 --> 00:34:27.220
- I certainly hear what you're saying


00:34:27.220 --> 00:34:28.820
with the news on that.


00:34:28.820 --> 00:34:31.980
We still haven't got to the topic yet, have we?


00:34:31.980 --> 00:34:32.900
- Okay.


00:34:32.900 --> 00:34:34.220
No, no, but I totally hear you.


00:34:34.220 --> 00:34:38.760
I think with the bandwidth, like the customers decide, like no one's.


00:34:38.760 --> 00:34:42.920
Netflix isn't projecting stuff on to the people in Europe and


00:34:42.920 --> 00:34:44.040
they're receiving it out of the band.


00:34:44.040 --> 00:34:45.200
They, they seek it out.


00:34:45.200 --> 00:34:45.520
Right.


00:34:45.520 --> 00:34:46.040
So I don't know.


00:34:46.040 --> 00:34:50.720
I feel like, but we can, yeah, that's I appreciate the devil's advocate.


00:34:50.720 --> 00:34:50.960
Yeah.


00:34:50.960 --> 00:34:52.280
Okay.


00:34:52.280 --> 00:34:53.560
What was the Google news?


00:34:53.560 --> 00:34:54.960
So here's the news though.


00:34:54.960 --> 00:35:00.720
Facebook and more generally meta is protesting a new Canadian law,


00:35:01.120 --> 00:35:09.040
Obliging it to pay for news that if so, if my mom shares an article, say my mom was Canadian


00:35:09.040 --> 00:35:12.000
And she shared an article to some


00:35:12.000 --> 00:35:16.900
Some news thing the Canadian poster or whatever


00:35:16.900 --> 00:35:24.120
Then on Facebook then Facebook would have to pay the Canadian post because my mom put it there


00:35:26.680 --> 00:35:31.000
So they're protesting it by no longer having news in Canada.


00:35:31.000 --> 00:35:33.280
Like news doesn't exist in Canada now.


00:35:33.280 --> 00:35:34.640
On Facebook or.


00:35:34.640 --> 00:35:34.900
Yeah.


00:35:34.900 --> 00:35:36.440
So my mom tried to post that they were just


00:35:36.440 --> 00:35:37.600
going to like that can't be posted.


00:35:37.600 --> 00:35:39.900
Oh, well, that's weird.


00:35:39.900 --> 00:35:41.840
Isn't that weird.


00:35:41.840 --> 00:35:44.680
So I actually kind of agree with you on the Google


00:35:44.680 --> 00:35:46.980
news bit, like where a good chunk of it is there.


00:35:46.980 --> 00:35:49.380
And it becomes almost a reader type service, but


00:35:49.380 --> 00:35:50.440
like Facebook doesn't do that.


00:35:50.440 --> 00:35:52.500
It just says, well, here's the, here's the


00:35:52.500 --> 00:35:53.940
thumbnail and you could click on it.


00:35:53.940 --> 00:35:56.180
But also a lot of, a lot of anger.


00:35:56.180 --> 00:35:58.960
- A lot of people get their news


00:35:58.960 --> 00:36:01.080
from people sharing it on Facebook.


00:36:01.080 --> 00:36:01.920
They follow the photo sharing.


00:36:01.920 --> 00:36:02.740
- But do they click it?


00:36:02.740 --> 00:36:04.840
That's the, do they, do they?


00:36:04.840 --> 00:36:06.400
- Often not.


00:36:06.400 --> 00:36:07.640
- Yeah, possibly.


00:36:07.640 --> 00:36:08.600
- And is it free?


00:36:08.600 --> 00:36:10.640
Is the bandwidth, if like,


00:36:10.640 --> 00:36:13.040
if I share it with a million people


00:36:13.040 --> 00:36:15.760
and they don't click on it,


00:36:15.760 --> 00:36:18.200
does it cost the newspaper?


00:36:18.200 --> 00:36:19.720
Possibly, they might be drawing it


00:36:19.720 --> 00:36:21.440
for the headline and the image and all that stuff.


00:36:21.440 --> 00:36:22.940
- They might, yeah, they'd probably catch it,


00:36:22.940 --> 00:36:24.720
but they might, might not.


00:36:24.720 --> 00:36:28.380
So I'll leave, I'll put this out there for people to have their own opinions.


00:36:28.380 --> 00:36:33.060
but I think this is something that Facebook should stand up to.


00:36:33.060 --> 00:36:35.640
And just me not speaking for Ryan.


00:36:35.640 --> 00:36:36.880
Well done Facebook.


00:36:36.880 --> 00:36:39.380
I don't think, I don't think this makes any sense.


00:36:39.380 --> 00:36:44.680
Like they're protesting this law that makes them pay if my mom or


00:36:44.680 --> 00:36:46.920
Canadian and put news into her feed.


00:36:46.920 --> 00:36:47.820
Yeah.


00:36:47.820 --> 00:36:50.100
And I'll just say way to go, Canada.


00:36:50.100 --> 00:36:50.900
I like it.


00:36:50.900 --> 00:36:52.980
Awesome.


00:36:52.980 --> 00:36:54.300
All right, cool.


00:36:54.300 --> 00:36:56.700
That's it for all the items I got.


00:36:56.700 --> 00:36:58.100
You covered yours, right?


00:36:58.100 --> 00:36:59.020
- Yes, I did.


00:36:59.020 --> 00:37:01.180
So let's do something funny.


00:37:01.180 --> 00:37:03.180
Before we get into fisticuffs.


00:37:03.180 --> 00:37:04.940
- So before, no, never.


00:37:04.940 --> 00:37:07.700
So, well, you wanna talk about fisticuffs.


00:37:07.700 --> 00:37:08.740
So let's see the joke.


00:37:08.740 --> 00:37:10.660
So this joke makes fun of a particular language.


00:37:10.660 --> 00:37:13.720
The point is not to make fun of that language.


00:37:13.720 --> 00:37:16.140
It's to make fun of AI, okay?


00:37:16.140 --> 00:37:18.980
So people who wanna support the AI,


00:37:18.980 --> 00:37:20.340
they can send me their angry messages.


00:37:20.340 --> 00:37:22.860
People who are fans of the language I'm about to show you,


00:37:22.860 --> 00:37:24.060
Please don't.


00:37:24.060 --> 00:37:26.100
Not about that.


00:37:26.100 --> 00:37:32.180
OK, so if you were working with a GitHub copilot,


00:37:32.180 --> 00:37:37.620
a lot of times it tries to auto suggest stuff for you, right?


00:37:37.620 --> 00:37:38.900
That didn't zoom that.


00:37:38.900 --> 00:37:41.860
So it tries to auto suggest stuff for you.


00:37:41.860 --> 00:37:46.500
And so if you say, this is C#, which people know I've


00:37:46.500 --> 00:37:47.140
done C# before.


00:37:47.140 --> 00:37:49.260
I like it.


00:37:49.260 --> 00:37:50.420
So I'm not making fun of it.


00:37:50.420 --> 00:37:52.020
But it's just a slash slash day.


00:37:52.020 --> 00:37:55.320
And then there's the auto complete statement that the co-pilot is trying to write.


00:37:55.320 --> 00:37:55.860
What does it say?


00:37:55.860 --> 00:37:56.180
Right.


00:37:56.180 --> 00:38:00.540
It says day one of C# and I already hate it.


00:38:00.540 --> 00:38:07.140
So like how many people have written this in their like online journals or something?


00:38:07.140 --> 00:38:08.420
Yes, exactly.


00:38:08.420 --> 00:38:10.180
What in the world is going on here?


00:38:10.180 --> 00:38:11.740
So


00:38:11.740 --> 00:38:20.340
that's, there's some, there's some fun comments, but, they're,


00:38:20.340 --> 00:38:21.980
they're not too great down here, but I just.


00:38:21.980 --> 00:38:30.700
I just thought like, you know, this, this weirdo, weirdo autocomplete, like we're going


00:38:30.700 --> 00:38:33.380
to get into this where this kind of stuff happens all the time, right?


00:38:33.380 --> 00:38:40.440
This is kind of, the Google suggest, you know, let's see if I can get it to work here.


00:38:40.440 --> 00:38:47.900
We go to Google and type American, Americans are, you know, what does it say?


00:38:47.900 --> 00:38:48.900
Right?


00:38:48.900 --> 00:38:49.900
Struggling, entitled.


00:38:49.900 --> 00:38:50.900
Yeah.


00:38:50.900 --> 00:38:57.900
C# developers are and then it'll give you a list or let's do a Python.


00:38:57.900 --> 00:39:01.580
Python, Python.


00:39:01.580 --> 00:39:04.060
Who are the Python?


00:39:04.060 --> 00:39:05.380
Why are they paid so much?


00:39:05.380 --> 00:39:07.100
Who hired these people?


00:39:07.100 --> 00:39:08.900
So this is the AI equivalent,


00:39:08.900 --> 00:39:12.500
but it's going to be right where you work all the time.


00:39:12.500 --> 00:39:15.740
>> That's funny.


00:39:17.260 --> 00:39:21.380
And Joe out there says, I wonder what it says for day one of Python.


00:39:21.380 --> 00:39:24.460
I have no idea, but--


00:39:24.460 --> 00:39:25.780
somebody had Copilot installed.


00:39:25.780 --> 00:39:30.100
They should let us know, and maybe we'll point it out next time.


00:39:30.100 --> 00:39:31.660
Yeah.


00:39:31.660 --> 00:39:32.380
Interesting.


00:39:32.380 --> 00:39:34.260
I haven't turned it on, but--


00:39:34.260 --> 00:39:35.500
No, I haven't either.


00:39:35.500 --> 00:39:36.060
All right.


00:39:36.060 --> 00:39:36.700
All right, well, thanks.


00:39:36.700 --> 00:39:38.780
Apparently, many people do, and I really enjoy it.


00:39:38.780 --> 00:39:42.540
The usage numbers are kind of off the chart.


00:39:42.540 --> 00:39:44.780
Well, so yeah.


00:39:44.780 --> 00:39:48.740
I'll just say, people used to not like maintaining software


00:39:48.740 --> 00:39:50.220
written by others, and they mostly


00:39:50.220 --> 00:39:53.220
like writing green field code.


00:39:53.220 --> 00:39:56.300
But with Copilot, you don't have to write your first draft.


00:39:56.300 --> 00:40:00.900
You can just become a permanent maintainer of software


00:40:00.900 --> 00:40:02.340
written by something else.


00:40:02.340 --> 00:40:03.620
I wrote the bullet points, and now I


00:40:03.620 --> 00:40:04.980
maintain what the AI wrote.


00:40:04.980 --> 00:40:05.780
Fantastic.


00:40:05.780 --> 00:40:07.300
Exactly.


00:40:07.300 --> 00:40:08.940
Hope you understand it.


00:40:08.940 --> 00:40:11.260
Yeah, exactly.


00:40:11.260 --> 00:40:12.820
But anyway.


00:40:12.820 --> 00:40:15.020
Well, thanks a lot for a great day again.


00:40:15.020 --> 00:40:16.920
Very great episode.


00:40:16.920 --> 00:40:18.380
Absolutely.


00:40:18.380 --> 00:40:18.920
Thank you.


00:40:18.920 --> 00:40:19.880
See you later.


00:40:19.880 --> 00:40:21.420
Bye.

