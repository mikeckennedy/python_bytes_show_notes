WEBVTT

00:00:00.000 --> 00:00:02.000
- Hey Brian. - Hey.


00:00:02.000 --> 00:00:04.000
- Hey, hey everyone out there.


00:00:04.000 --> 00:00:06.000
Thanks for being here on the live stream


00:00:06.000 --> 00:00:08.000
and watching afterwards.


00:00:08.000 --> 00:00:10.000
Get the uncut version.


00:00:10.000 --> 00:00:12.000
And look at that Brian, you already kicked this thing off


00:00:12.000 --> 00:00:15.000
early morning, like first thing of the week for us.


00:00:15.000 --> 00:00:17.000
- Yeah. - Here on Monday.


00:00:17.000 --> 00:00:19.000
- Monday morning, why not?


00:00:19.000 --> 00:00:21.000
- Why not, all right.


00:00:21.000 --> 00:00:23.000
Hello and welcome to Python Bytes


00:00:23.000 --> 00:00:25.000
where we deliver Python news and headlines


00:00:25.000 --> 00:00:27.000
directly to your earbuds.


00:00:27.000 --> 00:00:29.000
This is the Python Bytes podcast.


00:00:29.000 --> 00:00:34.000
This is episode 342, recorded June 25th, 2023.


00:00:34.000 --> 00:00:36.800
I'm Michael Kennedy.


00:00:36.800 --> 00:00:38.200
- And I am Brian Okken.


00:00:38.200 --> 00:00:42.880
- And this episode is brought to you by Brian and me.


00:00:42.880 --> 00:00:44.160
Us, our work.


00:00:44.160 --> 00:00:46.400
So support us, support the show,


00:00:46.400 --> 00:00:47.520
keep us doing what we're doing


00:00:47.520 --> 00:00:50.560
by checking out our courses over at Talk Python Training.


00:00:50.560 --> 00:00:52.720
We have a bunch, including a really nice pytest course


00:00:52.720 --> 00:00:53.540
written by Brian.


00:00:53.540 --> 00:00:56.840
Check out the Test to Code podcast, the Patreon supporters.


00:00:56.840 --> 00:00:59.320
Brian's got a book as well in pytest.


00:00:59.320 --> 00:01:00.920
You may have heard of this.


00:01:00.920 --> 00:01:02.200
Please, if you check those things out,


00:01:02.200 --> 00:01:03.240
share them with your friends, share,


00:01:03.240 --> 00:01:04.440
recommend them to your coworkers.


00:01:04.440 --> 00:01:05.840
It really makes a difference.


00:01:05.840 --> 00:01:08.520
You can also connect with us on Mastodon.


00:01:08.520 --> 00:01:12.520
You'll see that over on the show notes for every episode.


00:01:12.520 --> 00:01:17.720
And finally, you can join us over at pythonbytes.fm/live


00:01:17.720 --> 00:01:19.440
if you want to be part of the live recording,


00:01:19.440 --> 00:01:24.440
usually, usually, Tuesdays at 11 a.m. Pacific time,


00:01:24.440 --> 00:01:25.360
but not today.


00:01:25.360 --> 00:01:27.480
No, Brian, we're starting nice and early


00:01:27.480 --> 00:01:30.100
because, well, it's vacation time.


00:01:30.100 --> 00:01:33.240
And well, plumb bum, I think we should


00:01:33.240 --> 00:01:34.400
just get right into it.


00:01:34.400 --> 00:01:39.640
- Sure, plumb bum, let's do it.


00:01:39.640 --> 00:01:41.600
- It's a new saying, it's an expression.


00:01:41.600 --> 00:01:43.680
Plumb bum, let's just do it.


00:01:43.680 --> 00:01:45.160
- Let's just do it.


00:01:45.160 --> 00:01:47.760
Yeah, I have no idea where this comes from.


00:01:47.760 --> 00:01:50.040
But the, well, I do know where it comes from.


00:01:50.040 --> 00:01:51.240
It was last week.


00:01:51.240 --> 00:01:56.240
Last week we talked about shells and Henry Schreiner said,


00:01:56.240 --> 00:01:59.400
"Hey, you should check out Plumbum.


00:01:59.400 --> 00:02:02.320
It's kind of like what you're talking about, but also neat."


00:02:02.320 --> 00:02:03.600
So I did.


00:02:03.600 --> 00:02:05.320
- We were talking about shh.


00:02:05.320 --> 00:02:06.160
- Oh, right.


00:02:06.160 --> 00:02:07.840
We were talking about shh.


00:02:07.840 --> 00:02:08.840
- Don't tell anyone.


00:02:08.840 --> 00:02:12.720
- So Plumbum, it's a little easier to search for actually


00:02:12.720 --> 00:02:13.560
than shh.


00:02:13.560 --> 00:02:16.280
So what is it?


00:02:16.280 --> 00:02:20.480
It's a Python library and it's got,


00:02:20.480 --> 00:02:21.920
It's shell combinations.


00:02:21.920 --> 00:02:24.040
It's for interacting with your environment.


00:02:24.040 --> 00:02:25.680
And there we go.


00:02:25.680 --> 00:02:27.680
Henry Schreiner, one of the maintainers.


00:02:27.680 --> 00:02:33.040
So it's a tool that you can install


00:02:33.040 --> 00:02:36.680
so that you can interact with your operating system


00:02:36.680 --> 00:02:38.280
and file system and stuff like that


00:02:38.280 --> 00:02:39.680
and all sorts of other things.


00:02:39.680 --> 00:02:44.080
And it's got a little bit different style than sh.


00:02:44.080 --> 00:02:48.040
But it, so I was taking a look at,


00:02:48.040 --> 00:02:50.600
It's kind of like a local command for one.


00:02:50.600 --> 00:02:55.240
The basics are you like import from Plumbum, import local,


00:02:55.240 --> 00:02:56.720
and then you can run commands


00:02:56.720 --> 00:02:58.600
as if you were just running a shell,


00:02:58.600 --> 00:03:01.740
but you do this within your Python code.


00:03:01.740 --> 00:03:05.800
And there's also some convenience ones like SH has,


00:03:05.800 --> 00:03:08.560
like LS and grep and things like that.


00:03:08.560 --> 00:03:14.340
But it generally looks like there's more stuff


00:03:14.340 --> 00:03:18.740
around how you operate with a shell normally,


00:03:18.740 --> 00:03:20.180
things like piping.


00:03:20.180 --> 00:03:23.220
So you can, you know, you can pipe one,


00:03:23.220 --> 00:03:27.220
like LS to grab to word count or something like that


00:03:27.220 --> 00:03:28.060
to count files.


00:03:28.060 --> 00:03:30.300
You can, I mean, there's other ways to do it within Python,


00:03:30.300 --> 00:03:33.400
but if you're used to doing it in the shell,


00:03:33.400 --> 00:03:37.340
just wrapping the same work in a Python script, why not?


00:03:37.340 --> 00:03:41.180
Things like, yeah, redirection,


00:03:41.180 --> 00:03:43.320
manipulating your working directory,


00:03:43.320 --> 00:03:46.280
just all sorts of fun stuff to do with your shell,


00:03:46.280 --> 00:03:47.360
but through Python.


00:03:47.360 --> 00:03:52.640
- The pipe overriding the,


00:03:52.640 --> 00:03:55.720
you know, the pipe operator in Python overwrite


00:03:55.720 --> 00:03:58.240
sort of actually in the language


00:03:58.240 --> 00:03:59.840
being the same as in the shell


00:03:59.840 --> 00:04:04.440
is a little bit like Pathlib doing the divide aspect, right?


00:04:04.440 --> 00:04:05.840
Like we're gonna grab some operator


00:04:05.840 --> 00:04:09.000
and make it that it probably was never really imagined


00:04:09.000 --> 00:04:11.440
to be used for, but we're gonna make it use it


00:04:11.440 --> 00:04:13.720
So it looks like what you would actually,


00:04:13.720 --> 00:04:15.040
the abstraction you're representing,


00:04:15.040 --> 00:04:16.840
which is pretty interesting.


00:04:16.840 --> 00:04:18.960
- Yeah, and they could, like this example,


00:04:18.960 --> 00:04:22.240
they have an example in the readme


00:04:22.240 --> 00:04:26.120
of piping LS to grep to word count.


00:04:26.120 --> 00:04:29.540
And they like define that as a chain


00:04:29.540 --> 00:04:33.000
and it doesn't even run it, I don't think.


00:04:33.000 --> 00:04:36.760
It just defines this new sequence


00:04:36.760 --> 00:04:40.980
so you can chain together script commands.


00:04:40.980 --> 00:04:45.980
And if you print it, so it has a probably a stir


00:04:45.980 --> 00:04:50.540
or a wrapper implementation that shows you exactly


00:04:50.540 --> 00:04:52.980
what the, all the pipe and the chaining was.


00:04:52.980 --> 00:04:55.180
So that's kind of a neat thing for debugging.


00:04:55.180 --> 00:04:57.540
And then when you actually run it, then it,


00:04:57.540 --> 00:05:01.120
then it, you call that thing like a function


00:05:01.120 --> 00:05:01.960
and it runs it.


00:05:01.960 --> 00:05:02.900
That's pretty neat.


00:05:02.900 --> 00:05:04.180
So.


00:05:04.180 --> 00:05:05.180
- It is.


00:05:05.180 --> 00:05:06.020
Yeah, it is.


00:05:06.020 --> 00:05:07.860
You can even do them inline, just put parentheses


00:05:07.860 --> 00:05:09.940
around them and kind of execute at the end.


00:05:09.940 --> 00:05:11.900
- Yeah, pretty interesting.


00:05:11.900 --> 00:05:16.700
- Yeah, yeah, anyway, just a fun little quick shout out


00:05:16.700 --> 00:05:18.740
to Plumbum, so.


00:05:18.740 --> 00:05:21.980
- Yeah, if you thought SH was cool last time,


00:05:21.980 --> 00:05:24.260
then you might also check this out, right?


00:05:24.260 --> 00:05:26.820
They kind of play in similar spaces.


00:05:26.820 --> 00:05:29.460
- Yeah, yeah, that's one of the things--


00:05:29.460 --> 00:05:30.500
- We're talking about--


00:05:30.500 --> 00:05:32.300
- No, just one of the things I like about Python


00:05:32.300 --> 00:05:35.940
and the Python community is this variety


00:05:35.940 --> 00:05:39.200
of different libraries that might solve the same space,


00:05:39.200 --> 00:05:42.120
but have a different flavor.


00:05:42.120 --> 00:05:43.280
You know, some people like chocolate,


00:05:43.280 --> 00:05:44.720
some people like vanilla.


00:05:44.720 --> 00:05:45.560
So. - Yeah.


00:05:45.560 --> 00:05:48.040
Well, I'm a big fan of caramel.


00:05:48.040 --> 00:05:51.880
So how about we talk about Faster CPython?


00:05:51.880 --> 00:05:54.280
(laughing)


00:05:54.280 --> 00:05:55.120
- Okay, I'm not sure.


00:05:55.120 --> 00:05:58.560
- So the Faster CPython is,


00:05:58.560 --> 00:06:02.920
they're really starting to show some results, right?


00:06:02.920 --> 00:06:06.700
Python 3.11 was 40% faster, I believe is,


00:06:08.240 --> 00:06:10.620
you know, roughly speaking, working with averages


00:06:10.620 --> 00:06:11.760
and all those things.


00:06:11.760 --> 00:06:16.360
And we've got 3.12 coming with more optimizations.


00:06:16.360 --> 00:06:21.360
And ultimately the faster CPython plan was, you know,


00:06:21.360 --> 00:06:24.320
put together and laid out by Mark Shannon.


00:06:24.320 --> 00:06:27.400
And the idea was if we could make, you know,


00:06:27.400 --> 00:06:31.520
improvements like 40% faster, but over and over again,


00:06:31.520 --> 00:06:36.240
because of, you know, compounding sort of numbers there,


00:06:36.240 --> 00:06:38.760
we'll end up with a really fast CPython,


00:06:38.760 --> 00:06:41.880
a faster one you might say, in five releases,


00:06:41.880 --> 00:06:44.400
five times faster in five releases.


00:06:44.400 --> 00:06:47.840
And so that started really with 3.10,


00:06:47.840 --> 00:06:51.960
and then 3.11, 3.12, not the one that's coming,


00:06:51.960 --> 00:06:54.160
but the one that's coming in a year and a few months,


00:06:54.160 --> 00:06:57.120
3.11, they're laying out their work for that.


00:06:57.120 --> 00:06:59.920
And it's looking pretty ambitious.


00:06:59.920 --> 00:07:03.880
And so in 3.12, they're coming up with ways


00:07:03.880 --> 00:07:06.440
to optimize blocks of code.


00:07:06.440 --> 00:07:08.840
So in 3.11, stepping a little bit back,


00:07:08.840 --> 00:07:12.880
we've got the adaptive specializing interpreter


00:07:12.880 --> 00:07:15.040
or specializing adaptive interpreter.


00:07:15.040 --> 00:07:16.160
I haven't pulled up in front of me,


00:07:16.160 --> 00:07:17.400
which order those words go in,


00:07:17.400 --> 00:07:22.400
but that will allow CPython to replace the byte codes


00:07:22.400 --> 00:07:28.040
with more specific ones.


00:07:28.040 --> 00:07:31.960
So if it sees that you're doing a float


00:07:31.960 --> 00:07:34.360
plus a float operation instead of just doing word,


00:07:34.360 --> 00:07:36.700
we're doing an abstract plus,


00:07:36.700 --> 00:07:40.280
you know, is that a list plus a string?


00:07:40.280 --> 00:07:42.400
Is that an integer and a float?


00:07:42.400 --> 00:07:43.920
Is that actually a float and a float?


00:07:43.920 --> 00:07:45.320
And if it's a float and a float,


00:07:45.320 --> 00:07:49.140
then we can specialize that to do more specific,


00:07:49.140 --> 00:07:52.040
more efficient types of math and that kind of stuff, right?


00:07:52.040 --> 00:07:54.120
3.12 is supposed to have


00:07:54.120 --> 00:07:58.240
what they're calling the tier one optimizer.


00:07:58.240 --> 00:08:02.320
And so, which optimizes little blocks of code,


00:08:02.320 --> 00:08:03.640
but they're pretty small.


00:08:03.640 --> 00:08:07.340
And so one of the big things coming here in 3.13


00:08:07.340 --> 00:08:11.020
is a tier two optimizer.


00:08:11.020 --> 00:08:13.580
So bigger blocks of code,


00:08:13.580 --> 00:08:17.100
something they're calling super blocks,


00:08:17.100 --> 00:08:19.040
which I'll talk about in just a second.


00:08:19.040 --> 00:08:21.700
The other one that sounds really amazing


00:08:21.700 --> 00:08:26.020
is enabling sub-interpreters from Python code.


00:08:26.020 --> 00:08:31.020
So we know about PEP 554, this has been quite the journey


00:08:31.020 --> 00:08:33.520
and massive amount of work done by Eric Snow.


00:08:33.520 --> 00:08:39.000
And the idea is if we have a GIL,


00:08:39.000 --> 00:08:42.120
then we have serious limits on concurrency, right?


00:08:42.120 --> 00:08:43.780
From a computational perspective,


00:08:43.780 --> 00:08:46.360
not from an IO one potentially.


00:08:46.360 --> 00:08:50.740
And I'm sitting here on my M2 Pro with 10 cores


00:08:50.740 --> 00:08:55.280
and no matter how much multi-threaded Python I write,


00:08:55.280 --> 00:08:57.920
if it's all computational, all running Python bytecode,


00:08:57.920 --> 00:09:02.920
I get 1/10 of the capability of this machine, right?


00:09:02.920 --> 00:09:04.040
'Cause of the GIL.


00:09:04.040 --> 00:09:07.280
So the idea is, well, what if we could have


00:09:07.280 --> 00:09:10.960
each thread have its own GIL?


00:09:10.960 --> 00:09:14.520
So there's still, sure, a limit to how much work


00:09:14.520 --> 00:09:17.480
that can be done in that particular thread concurrently,


00:09:17.480 --> 00:09:20.600
but it's one thread dedicated to one core,


00:09:20.600 --> 00:09:23.440
and the other core gets its own other subinterpreter,


00:09:23.440 --> 00:09:25.660
that doesn't share objects in the same way,


00:09:25.660 --> 00:09:28.980
but they can pass them around through certain mechanisms.


00:09:28.980 --> 00:09:32.660
Anyway, so this thing has been a journey, like I said,


00:09:32.660 --> 00:09:40.140
created 2017, and it has all this history up until now.


00:09:40.140 --> 00:09:45.660
And the status still says draft, and now the Python version--


00:09:45.660 --> 00:09:49.340
I think the PEP is approved, and work has been done,


00:09:49.340 --> 00:09:52.060
but it's still in pretty early stages.


00:09:52.060 --> 00:09:58.540
that's a pretty big deal is to add that that's supposed to show up in 3.13


00:09:58.540 --> 00:10:09.140
and in Python code and this is a big deal I think that in 3.12 the work has


00:10:09.140 --> 00:10:14.860
been done so that it's internally possible it's internally done if I


00:10:14.860 --> 00:10:20.500
remember correctly but there's no way to use it from Python right like it's if


00:10:20.500 --> 00:10:22.940
If you're a creator of interpreters,


00:10:22.940 --> 00:10:25.060
basically you can use it.


00:10:25.060 --> 00:10:28.060
So now the idea is like, let's make this possible


00:10:28.060 --> 00:10:31.380
for you to do things like start a thread


00:10:31.380 --> 00:10:33.940
and give it its own sub-interpreter,


00:10:33.940 --> 00:10:36.220
copy its objects over, let it create its own,


00:10:36.220 --> 00:10:39.900
and really do computational parallelism,


00:10:39.900 --> 00:10:42.180
guessing interaction with async and await


00:10:42.180 --> 00:10:43.540
and those kinds of things.


00:10:43.540 --> 00:10:46.180
And also more improved memory management.


00:10:46.180 --> 00:10:47.900
Let's see what else.


00:10:47.900 --> 00:10:49.740
- Well, so I guess along with that,


00:10:49.740 --> 00:10:52.260
we're gonna have to have some tutorials or something


00:10:52.260 --> 00:10:57.260
on how do the two sub-interpreters share information.


00:10:57.260 --> 00:10:59.260
- Yeah, exactly.


00:10:59.260 --> 00:11:00.180
Yeah, we will.


00:11:00.180 --> 00:11:06.500
What I would love to see is just on the thread object,


00:11:06.500 --> 00:11:07.740
give the thread object,


00:11:07.740 --> 00:11:12.660
use sub-isolating, isolate sub-interpreter


00:11:12.660 --> 00:11:16.220
or new sub-interpreter equals true, and off it goes.


00:11:16.220 --> 00:11:17.100
That would be excellent.


00:11:17.100 --> 00:11:19.200
And then maybe it pickles the object.


00:11:19.200 --> 00:11:21.840
I don't know, we can see how they come up with that.


00:11:21.840 --> 00:11:23.420
But this is good news.


00:11:23.420 --> 00:11:26.080
I think it's the kind of thing


00:11:26.080 --> 00:11:29.900
that's not that important necessarily for a lot of people,


00:11:29.900 --> 00:11:31.720
but for those who it is, it's like,


00:11:31.720 --> 00:11:35.060
you know, really we want this to go a lot faster.


00:11:35.060 --> 00:11:36.540
What can we do here, right?


00:11:36.540 --> 00:11:37.380
- Yeah.


00:11:37.380 --> 00:11:38.200
- Yeah.


00:11:38.200 --> 00:11:39.100
- That sounds complicated.


00:11:39.100 --> 00:11:40.300
Does it make it go faster?


00:11:40.300 --> 00:11:41.500
Yay, then do it.


00:11:41.500 --> 00:11:42.980
(laughing)


00:11:42.980 --> 00:11:44.120
- Well, and you know,


00:11:44.120 --> 00:11:48.260
compared to a lot of the other alternatives


00:11:48.260 --> 00:11:51.380
that we've had for, I have 10 cores,


00:11:51.380 --> 00:11:54.540
why can I only use one of them on my Python code


00:11:54.540 --> 00:11:56.080
without multi-processing?


00:11:56.080 --> 00:12:00.940
This is one of those that doesn't affect


00:12:00.940 --> 00:12:02.820
single-threaded performance.


00:12:02.820 --> 00:12:05.940
It's one of those things that there's not a cost


00:12:05.940 --> 00:12:07.740
to people who don't use it, right?


00:12:07.740 --> 00:12:10.460
Whereas a lot of the other types of options are like,


00:12:10.460 --> 00:12:13.420
well, sure, your code gets 5% slower,


00:12:13.420 --> 00:12:15.660
but you could make it a lot faster


00:12:15.660 --> 00:12:17.860
if you did a bunch more work.


00:12:17.860 --> 00:12:20.180
- Yeah, and that's been a hard sell


00:12:20.180 --> 00:12:23.740
and also a hard line that Guido put in the sand,


00:12:23.740 --> 00:12:26.740
saying like, look, we can't make regular,


00:12:26.740 --> 00:12:30.700
non-concurrent Python slower for the sake of,


00:12:30.700 --> 00:12:32.580
you know, this more rare,


00:12:32.580 --> 00:12:36.500
but sometimes specialized, right, concurrent stuff.


00:12:36.500 --> 00:12:38.180
So they'd done a bunch of foundational work


00:12:38.180 --> 00:12:41.100
and then the three main things are the tier two optimizer,


00:12:41.100 --> 00:12:43.900
sub-interpreters for Python and memory management.


00:12:43.900 --> 00:12:46.100
So the tier two optimizer,


00:12:46.100 --> 00:12:48.180
There's a lot of stuff that you kind of got to look around.


00:12:48.180 --> 00:12:51.020
So check out the detailed plan.


00:12:51.020 --> 00:12:53.520
They have this thing called copy and patch.


00:12:53.520 --> 00:12:58.820
So you can generate like roughly


00:12:58.820 --> 00:13:00.660
these things called super blocks,


00:13:00.660 --> 00:13:02.660
and then you can implement,


00:13:02.660 --> 00:13:05.740
they're planning to implement basic super block management.


00:13:05.740 --> 00:13:07.820
And Brian, you may be thinking,


00:13:07.820 --> 00:13:09.620
what are these words you're saying, Michael?


00:13:09.620 --> 00:13:10.620
Duplo.


00:13:10.620 --> 00:13:11.780
They're not those little Legos.


00:13:11.780 --> 00:13:14.480
No, they're big, big Duplos.


00:13:14.480 --> 00:13:15.320
Well, that's kind of true.


00:13:15.320 --> 00:13:18.840
So they were optimizing smaller pieces, like little tiny bits,


00:13:18.840 --> 00:13:20.880
but you can only have so much of an effect


00:13:20.880 --> 00:13:23.160
if you're working on small blocks of code


00:13:23.160 --> 00:13:24.080
that you're optimizing.


00:13:24.080 --> 00:13:27.320
So a superblock is a linear piece of code


00:13:27.320 --> 00:13:31.000
with one entry and multiple exits.


00:13:31.000 --> 00:13:35.280
It differs from a basic block in that it


00:13:35.280 --> 00:13:36.440
may duplicate some code.


00:13:36.440 --> 00:13:39.360
So they just talk about considering


00:13:39.360 --> 00:13:41.920
different types of things you might optimize.


00:13:41.920 --> 00:13:44.600
So I'll link over to--


00:13:44.600 --> 00:13:49.280
So there's a big long discussion, lots of graphics


00:13:49.280 --> 00:13:52.160
people could go check out.


00:13:52.160 --> 00:13:57.360
So yeah, they're going to add support


00:13:57.360 --> 00:14:00.280
for deoptimization of superblocks,


00:14:00.280 --> 00:14:03.840
enhance the code creation, implement the specializer,


00:14:03.840 --> 00:14:07.160
and use this algorithm called copy and patch.


00:14:07.160 --> 00:14:12.040
So implement the copy and patch machine code generator.


00:14:12.040 --> 00:14:14.760
You don't normally hear about a machine code generator, do you?


00:14:14.760 --> 00:14:15.760
- No. - But, you know,


00:14:15.760 --> 00:14:19.520
that sounds like a JIT compiler or something along those lines.


00:14:19.520 --> 00:14:21.600
Yeah, anyway, so that's the goal.


00:14:21.600 --> 00:14:25.520
And reduce the time spent in the interpreter by 50%.


00:14:25.520 --> 00:14:27.280
If they make that happen, that sounds all right to me,


00:14:27.280 --> 00:14:29.040
just for this one feature.


00:14:29.040 --> 00:14:31.440
- That's pretty neat. Yeah, wow.


00:14:31.440 --> 00:14:33.400
- Pretty good. And I talked a whole bunch about


00:14:33.400 --> 00:14:35.080
the subinterpreter's final thing.


00:14:35.080 --> 00:14:39.360
The profiling data shows that a large amount of time


00:14:39.360 --> 00:14:41.280
is actually spent in memory management


00:14:41.280 --> 00:14:44.160
and the cycle GC, all right?


00:14:44.160 --> 00:14:48.640
And while when Python, I guess,


00:14:48.640 --> 00:14:50.680
if you do 40% a bunch of times,


00:14:50.680 --> 00:14:54.000
it was maybe half this fast before,


00:14:54.000 --> 00:14:55.760
like, 'cause remember, we're like a few years out


00:14:55.760 --> 00:14:57.760
working back on this plan.


00:14:57.760 --> 00:15:01.520
In 3.9, 3.8, maybe it didn't matter as much


00:15:01.520 --> 00:15:05.040
because as a percentage of where is CPython


00:15:05.040 --> 00:15:06.520
spending its time,


00:15:06.520 --> 00:15:09.360
it was not that much time on memory management.


00:15:09.360 --> 00:15:12.120
But as all this other stuff gets faster and faster,


00:15:12.120 --> 00:15:14.360
if they don't do stuff to make the memory management faster,


00:15:14.360 --> 00:15:15.680
it's gonna be like, well, half the time


00:15:15.680 --> 00:15:17.980
is memory management, what are we doing?


00:15:17.980 --> 00:15:20.840
So they say, as we get the VM faster,


00:15:20.840 --> 00:15:23.080
this is only gonna be a larger percent of our time,


00:15:23.080 --> 00:15:24.640
so what can we do?


00:15:24.640 --> 00:15:28.240
So do fewer allocations to improve data structures.


00:15:28.240 --> 00:15:30.640
For example, partial evaluation


00:15:30.640 --> 00:15:32.800
to reduce the number of temporary objects,


00:15:32.800 --> 00:15:36.320
which is part of the other section of their work,


00:15:36.320 --> 00:15:39.320
and spend less time doing cycle GCs,


00:15:39.320 --> 00:15:41.600
It could be as simple as doing fewer calculations


00:15:41.600 --> 00:15:46.800
or as complex as implementing a new incremental cycle finder.


00:15:46.800 --> 00:15:48.800
Either way, it sounds pretty cool.


00:15:48.800 --> 00:15:54.600
So that's the plan for a year and a couple of months.


00:15:54.600 --> 00:15:55.600
It's pretty exciting.


00:15:55.600 --> 00:15:59.640
I'm really happy that these people are working on it.


00:15:59.640 --> 00:16:00.760
I am too.


00:16:00.760 --> 00:16:03.240
It's a team of, I think, last time I counted,


00:16:03.240 --> 00:16:04.200
five or six people.


00:16:07.840 --> 00:16:10.920
There's a big group of them around Guido at Microsoft,


00:16:10.920 --> 00:16:12.920
but then also outside.


00:16:12.920 --> 00:16:13.740
- Yeah.


00:16:13.740 --> 00:16:16.140
- So for example, this was written by Mark Shannon,


00:16:16.140 --> 00:16:18.760
who's there, but also Michael Dropboom,


00:16:18.760 --> 00:16:21.720
who was at Mozilla, but I don't remember where he is


00:16:21.720 --> 00:16:22.760
right now.


00:16:22.760 --> 00:16:24.480
- Cool last name, Dropboom.


00:16:24.480 --> 00:16:26.880
- Yes, indeed.


00:16:26.880 --> 00:16:29.360
All right, over to you, Brian.


00:16:29.360 --> 00:16:30.440
- Well, that was pretty heavy.


00:16:30.440 --> 00:16:33.360
I'm gonna do kind of a light topic,


00:16:33.360 --> 00:16:36.620
is we need more people to write blogs about Python.


00:16:37.600 --> 00:16:39.840
who would help us out a lot, really.


00:16:39.840 --> 00:16:42.120
And one of the ways you could do that


00:16:42.120 --> 00:16:44.360
is to just head over and check out


00:16:44.360 --> 00:16:47.000
one of the recent articles from Julia Evans


00:16:47.000 --> 00:16:49.900
about some blogging myths.


00:16:49.900 --> 00:16:53.520
And I guess this is a pretty light-hearted topic,


00:16:53.520 --> 00:16:55.940
but also serious.


00:16:55.940 --> 00:17:00.940
But we have some more fun stuff in the extras,


00:17:00.940 --> 00:17:03.320
so don't worry about it.


00:17:03.320 --> 00:17:06.120
Anyway, so there's a few blogging myths,


00:17:06.120 --> 00:17:07.600
And I just wanted to highlight these


00:17:07.600 --> 00:17:09.160
'cause I think it's good to remember


00:17:09.160 --> 00:17:11.680
that these are just wrong.


00:17:11.680 --> 00:17:14.120
So I'll just run through them quickly.


00:17:14.120 --> 00:17:15.580
You don't need to be original.


00:17:15.580 --> 00:17:19.020
You can write content that other people have covered before.


00:17:19.020 --> 00:17:20.240
That's fine.


00:17:20.240 --> 00:17:22.360
You don't need to be an expert.


00:17:22.360 --> 00:17:24.560
Posts don't need to be 100% correct.


00:17:24.560 --> 00:17:28.800
Writing boring posts is bad.


00:17:28.800 --> 00:17:31.960
So these are, oh wait, the myths are,


00:17:31.960 --> 00:17:34.000
the myth is you need to be original.


00:17:34.000 --> 00:17:35.000
That's not true.


00:17:35.840 --> 00:17:38.480
Myth, you need to be an expert.


00:17:38.480 --> 00:17:40.160
Posts need to be 100% correct.


00:17:40.160 --> 00:17:42.120
Also myth, all these are myths.


00:17:42.120 --> 00:17:43.980
Writing boring posts is bad.


00:17:43.980 --> 00:17:48.560
Boring posts are fine if they're informational.


00:17:48.560 --> 00:17:50.720
You need to explain every concept.


00:17:50.720 --> 00:17:52.580
Actually, that will just kill your audience


00:17:52.580 --> 00:17:54.680
if you explain every little detail.


00:17:54.680 --> 00:17:57.700
Page views matter.


00:17:57.700 --> 00:18:00.520
More material is always better.


00:18:00.520 --> 00:18:01.880
Everyone should blog.


00:18:01.880 --> 00:18:04.060
These are all myths, according to Julia.


00:18:04.060 --> 00:18:06.500
And then she goes through a lot of the,


00:18:06.500 --> 00:18:09.340
in detail into each one of them.


00:18:09.340 --> 00:18:11.540
And I kind of want to like,


00:18:11.540 --> 00:18:14.620
hover on the first two a little bit of,


00:18:14.620 --> 00:18:17.860
you need to be original and you need to be an expert.


00:18:17.860 --> 00:18:19.180
I think it's,


00:18:19.180 --> 00:18:22.860
when we're learning,


00:18:22.860 --> 00:18:24.300
we're learning about the software,


00:18:24.300 --> 00:18:27.080
a new library or a new technique or something,


00:18:27.080 --> 00:18:29.900
often I'm like, I'm reading Stack Overflow,


00:18:29.900 --> 00:18:33.660
I'm reading blog posts, I'm reading maybe books,


00:18:33.660 --> 00:18:36.020
who knows, reading a lot of stuff on it.


00:18:36.020 --> 00:18:41.020
And you'll get all that stuff in your own perspective


00:18:41.020 --> 00:18:42.120
of how it really is.


00:18:42.120 --> 00:18:45.120
And then you can sort of,


00:18:45.120 --> 00:18:48.280
like the cheating book report you did in junior high,


00:18:48.280 --> 00:18:50.580
where you just like rewrote some of the encyclopedia,


00:18:50.580 --> 00:18:51.460
but changed it.


00:18:51.460 --> 00:18:52.600
Don't do that.


00:18:52.600 --> 00:18:54.580
But it doesn't,


00:18:54.580 --> 00:18:57.220
you don't have to come up with a completely new technique


00:18:57.220 --> 00:18:58.060
or something.


00:18:58.060 --> 00:19:00.860
You can just say, oh, all the stuff I learned,


00:19:02.020 --> 00:19:04.900
I'm going to put it together and like write like my,


00:19:04.900 --> 00:19:08.340
my workflow now or the process or just a little tiny bit.


00:19:08.340 --> 00:19:11.500
It doesn't have to be long. It can be a short thing of like, Oh,


00:19:11.500 --> 00:19:15.380
I finally got this. It's way easier than I thought it was.


00:19:15.380 --> 00:19:16.820
And writing little,


00:19:16.820 --> 00:19:20.780
little aha moments are great times to just write that down as a little blog


00:19:20.780 --> 00:19:23.340
post. the other thing of,


00:19:23.340 --> 00:19:27.940
you don't need to be an expert is a lot of us got started blogging while we were


00:19:27.940 --> 00:19:30.780
learning stuff as a way to write that down.


00:19:31.120 --> 00:19:33.760
So you're definitely not an expert as you're learning stuff.


00:19:33.760 --> 00:19:35.880
So go ahead and write about it then.


00:19:35.880 --> 00:19:38.960
And it's a great way to, and that ties into,


00:19:38.960 --> 00:19:41.120
it doesn't need to be a hundred percent correct.


00:19:41.120 --> 00:19:43.600
As you get more traction in your blog,


00:19:43.600 --> 00:19:45.840
people will like let you know if you made a mistake.


00:19:45.840 --> 00:19:49.080
And in the Python community, usually it's nice.


00:19:49.080 --> 00:19:53.200
They'll like mention, hey, this isn't quite right anymore.


00:19:53.200 --> 00:19:55.320
And I kind of love that about our community.


00:19:55.320 --> 00:19:59.320
So I want to go back to the original part


00:19:59.320 --> 00:20:01.000
is you don't even have to be original


00:20:01.000 --> 00:20:02.580
from your own perspective.


00:20:02.580 --> 00:20:05.120
If you wrote about something like last year,


00:20:05.120 --> 00:20:06.260
go ahead and write about it again.


00:20:06.260 --> 00:20:08.400
If you think it's important and it needs,


00:20:08.400 --> 00:20:11.220
and you sort of have a different way to explain it,


00:20:11.220 --> 00:20:13.880
you can write another blog post about a similar topic.


00:20:13.880 --> 00:20:16.880
- Yeah, I totally agree.


00:20:16.880 --> 00:20:21.480
I also want to add a couple of things.


00:20:21.480 --> 00:20:23.000
- Okay.


00:20:23.000 --> 00:20:26.800
- I would like to add that your posts, the myth,


00:20:26.800 --> 00:20:29.320
your posts have to be long or like an article


00:20:29.320 --> 00:20:31.960
or you need to spend a lot of time on it.


00:20:31.960 --> 00:20:34.920
The biggest example of this in terms of like


00:20:34.920 --> 00:20:38.720
successful in the face of just really short stuff is


00:20:38.720 --> 00:20:43.040
John Gruber's Daring Fireball.


00:20:43.040 --> 00:20:46.120
This is an incredibly popular site


00:20:46.120 --> 00:20:48.480
and the entire articles are,


00:20:48.480 --> 00:20:52.320
it starts out with him quoting often someone else


00:20:52.320 --> 00:20:55.600
and that's like two paragraphs, which is half the article


00:20:55.600 --> 00:20:57.000
and say, here's my thoughts on this,


00:20:57.000 --> 00:20:58.080
or here's something interesting,


00:20:58.080 --> 00:21:00.440
let's highlight it or something, right?


00:21:00.440 --> 00:21:05.440
And my last blog post was four paragraphs and a picture,


00:21:05.440 --> 00:21:08.600
maybe five if you count the bonus, right?


00:21:08.600 --> 00:21:11.120
Not too many people paid attention to mine


00:21:11.120 --> 00:21:12.720
'cause the titles, you can ignore this post.


00:21:12.720 --> 00:21:14.880
So I don't know, I'm having a hard time


00:21:14.880 --> 00:21:16.480
getting traction with it, but.


00:21:16.480 --> 00:21:18.560
(laughing)


00:21:18.560 --> 00:21:20.440
- I actually, I like that you highlighted


00:21:20.440 --> 00:21:23.380
that good John Gruber style.


00:21:23.380 --> 00:21:25.360
There's a lot of different styles of blog posts,


00:21:25.360 --> 00:21:29.080
and one of them is reacting to something.


00:21:29.080 --> 00:21:30.960
Because a lot of people have actually turned--


00:21:30.960 --> 00:21:33.160
you can either comment on somebody's blog


00:21:33.160 --> 00:21:35.200
or talk about it on Reddit or something,


00:21:35.200 --> 00:21:39.720
or you can react to it on your own blog and link to it.


00:21:39.720 --> 00:21:42.280
Still link to it on Reddit or something, yeah.


00:21:42.280 --> 00:21:44.640
Not anymore because Reddit went private out of protest,


00:21:44.640 --> 00:21:47.080
but somewhere else if you find another place.


00:21:47.080 --> 00:21:48.240
Or maybe post on Twitter.


00:21:48.240 --> 00:21:49.000
No, don't do that.


00:21:49.000 --> 00:21:49.600
Let's--


00:21:49.600 --> 00:21:50.560
Yeah, it's getting hard.


00:21:50.560 --> 00:21:51.060
Yeah.


00:21:51.060 --> 00:21:54.120
[LAUGHTER]


00:21:54.120 --> 00:21:59.120
- Funny, I had another one as well, but oh yeah.


00:21:59.120 --> 00:22:01.720
So there's not a myth, but just another thing,


00:22:01.720 --> 00:22:05.480
another source of inspiration is if you come across


00:22:05.480 --> 00:22:07.640
something that really surprised you,


00:22:07.640 --> 00:22:09.520
like if you're learning, right, kind of to add on,


00:22:09.520 --> 00:22:11.600
like I'm not an expert, if you come across something


00:22:11.600 --> 00:22:14.940
and like, wow, Python really, it broke my expectations.


00:22:14.940 --> 00:22:17.520
I thought this was gonna work this way.


00:22:17.520 --> 00:22:18.640
Gosh, it's weird here.


00:22:18.640 --> 00:22:20.720
People, it seems like a lot of people think


00:22:20.720 --> 00:22:22.040
it works this way, but it works


00:22:22.040 --> 00:22:23.720
in some completely other way.


00:22:23.720 --> 00:22:26.160
that could be a cool little write up.


00:22:26.160 --> 00:22:27.960
Also, people might be searching like,


00:22:27.960 --> 00:22:29.200
why does Python do this?


00:22:29.200 --> 00:22:32.280
They might find your quote boring article


00:22:32.280 --> 00:22:33.880
and go that was really helpful.


00:22:33.880 --> 00:22:35.720
Right, so yeah.


00:22:35.720 --> 00:22:38.800
- I still remember way back when I started writing


00:22:38.800 --> 00:22:42.140
about pytest and unit tests and stuff.


00:22:42.140 --> 00:22:47.140
There was a feature, a behavior of tear down functionality


00:22:47.140 --> 00:22:50.140
that behaved different.


00:22:50.140 --> 00:22:54.880
It was like sort of the same in Nose and Unit Test


00:22:54.880 --> 00:22:56.800
and then different in pytest.


00:22:56.800 --> 00:22:59.440
And I wrote a post that said,


00:22:59.440 --> 00:23:00.960
"Maybe Unit Test is broken


00:23:00.960 --> 00:23:03.400
"because I kind of like this pytest behavior."


00:23:03.400 --> 00:23:06.920
And I got a reaction from some of the pytest contributors


00:23:06.920 --> 00:23:09.980
that said, "Oh no, we just forgot,


00:23:09.980 --> 00:23:12.400
"didn't test that part, so that's wrong.


00:23:12.400 --> 00:23:13.800
"We'll fix it."


00:23:13.800 --> 00:23:16.040
(laughing)


00:23:17.040 --> 00:23:21.220
What a meta problem that Hytest didn't test the thing.


00:23:21.220 --> 00:23:24.960
- Yeah, well, I mean, it was really corner case,


00:23:24.960 --> 00:23:27.320
but I'm kind of a fastidious person


00:23:27.320 --> 00:23:30.480
when I'm looking at how things work.


00:23:30.480 --> 00:23:33.600
But the other thing I wanna say is a lot of things


00:23:33.600 --> 00:23:37.720
written by other people are old enough


00:23:37.720 --> 00:23:39.000
that they don't work anymore.


00:23:39.000 --> 00:23:42.200
If you're following along with like a little tutorial


00:23:42.200 --> 00:23:45.280
and it doesn't work anymore because the language changed


00:23:45.280 --> 00:23:48.520
or the library they're using is not supported anymore


00:23:48.520 --> 00:23:51.000
or something, that's a great opportunity to go,


00:23:51.000 --> 00:23:54.920
well, I'll just kind of write it in my own language,


00:23:54.920 --> 00:23:58.440
but, or in my own style, but also make it current


00:23:58.440 --> 00:24:00.920
and to make it work this time.


00:24:00.920 --> 00:24:02.840
So that's good.


00:24:02.840 --> 00:24:04.080
- Indeed.


00:24:04.080 --> 00:24:05.160
- Anyway, okay.


00:24:05.160 --> 00:24:08.160
Well, let's go back to something more meaty.


00:24:08.160 --> 00:24:13.160
- Yeah, something like AI.


00:24:13.160 --> 00:24:17.340
So I want to tell you about Jupyter AI, Brian.


00:24:17.340 --> 00:24:23.440
Jupyter AI is a pretty interesting project here.


00:24:23.440 --> 00:24:28.280
It's a generative AI extension for JupyterLab.


00:24:28.280 --> 00:24:33.280
I believe it also works in Jupyter and IPython,


00:24:33.280 --> 00:24:37.640
I just IPython prompt as well.


00:24:37.640 --> 00:24:38.880
And so here's the idea.


00:24:38.880 --> 00:24:41.040
There's a couple of things that you can do.


00:24:41.880 --> 00:24:45.240
So Jupyter has this thing called a magic, right?


00:24:45.240 --> 00:24:49.080
Where you put 2% in front of a command


00:24:49.080 --> 00:24:52.160
and it applies it to an extension to Jupyter,


00:24:52.160 --> 00:24:54.320
not trying to run Python code,


00:24:54.320 --> 00:24:56.200
but it says, let me find this thing.


00:24:56.200 --> 00:24:58.280
In this case, you say %%AI,


00:24:58.280 --> 00:25:00.400
and then you type some stuff.


00:25:00.400 --> 00:25:03.680
So that stuff you type afterwards,


00:25:03.680 --> 00:25:08.200
then turns on a certain behavior for that particular cell.


00:25:08.200 --> 00:25:13.200
And so this AI magic, literally it's percent percent AI,


00:25:13.200 --> 00:25:15.880
and then they call it a magic or it is a magic.


00:25:15.880 --> 00:25:20.840
So AI magic turns Jupyter Notebooks into reproducible,


00:25:20.840 --> 00:25:23.600
it's the interesting aspect, generative AI.


00:25:23.600 --> 00:25:28.600
So think if you could have ChatGPT or open AI type stuff


00:25:28.600 --> 00:25:31.960
clicked right into your notebook.


00:25:31.960 --> 00:25:34.880
So instead of going out to one of these AI chat systems


00:25:34.880 --> 00:25:36.680
and say, I'm trying to do this, tell me how to do this,


00:25:36.680 --> 00:25:38.280
or could you explain that data?


00:25:38.280 --> 00:25:44.480
You just say, hey, that cell above, what happened here?


00:25:44.480 --> 00:25:48.120
Or I'm trying, I have this data frame, do you see it above?


00:25:48.120 --> 00:25:48.960
Okay, good.


00:25:48.960 --> 00:25:53.360
How do I visualize that in a pie chart


00:25:53.360 --> 00:25:57.160
or some, you know, in those donut graphs using Plotly?


00:25:57.160 --> 00:26:00.680
And it can just write it for you as the next cell.


00:26:00.680 --> 00:26:02.320
- Interesting, okay.


00:26:02.320 --> 00:26:03.240
- Interesting, right?


00:26:03.240 --> 00:26:04.480
- Yeah.


00:26:04.480 --> 00:26:06.880
It runs anywhere the IPython kernel works.


00:26:06.880 --> 00:26:09.240
So JupyterLab, Jupyter Notebooks, Google Colab,


00:26:09.240 --> 00:26:14.000
VS Code, probably PyCharm, although they don't call it out.


00:26:14.000 --> 00:26:16.520
And it has a native UI chat.


00:26:16.520 --> 00:26:19.280
So in JupyterLab, not Jupyter,


00:26:19.280 --> 00:26:22.320
there's like a left pane that has stuff.


00:26:22.320 --> 00:26:24.240
It has like your files,


00:26:24.240 --> 00:26:25.900
and it has other things that you can do.


00:26:25.900 --> 00:26:29.000
And it will plug in another window on the left there


00:26:29.000 --> 00:26:31.440
that is like a ChatGPT.


00:26:31.440 --> 00:26:32.540
So that's pretty cool.


00:26:33.600 --> 00:26:35.400
Another really interesting difference


00:26:35.400 --> 00:26:42.640
is this thing supports its model or platform agnostic.


00:26:42.640 --> 00:26:49.560
So if you like AI21 or Anthropic or OpenAI or SageMaker


00:26:49.560 --> 00:26:51.880
or HuggingFace, et cetera, et cetera,


00:26:51.880 --> 00:26:53.960
you just say, please use this model.


00:26:53.960 --> 00:26:56.720
And they have these integrations across these different things.


00:26:56.720 --> 00:26:59.480
So for example, you could be going along saying,


00:26:59.480 --> 00:27:00.480
I'm using OpenAI.


00:27:00.480 --> 00:27:01.800
I'm using OpenAI.


00:27:01.800 --> 00:27:03.800
That's a terrible answer.


00:27:03.800 --> 00:27:06.800
Let's see, let's ask Anthropic the same thing.


00:27:06.800 --> 00:27:09.800
And then right there below, you can use these different models


00:27:09.800 --> 00:27:11.800
and different AI platforms.


00:27:11.800 --> 00:27:13.800
Actually, it did really good on this one.


00:27:13.800 --> 00:27:17.800
I'm just going to keep using that one now for this part of my data.


00:27:17.800 --> 00:27:20.800
- Hmm, okay. - Okay?


00:27:20.800 --> 00:27:22.800
So how do you install it?


00:27:22.800 --> 00:27:24.800
You pip install jupyter_ai.


00:27:24.800 --> 00:27:27.800
That's it. It's good to go.


00:27:27.800 --> 00:27:37.640
Then you plug in your various API keys


00:27:37.640 --> 00:27:40.120
or whatever you need to as environment variables.


00:27:40.120 --> 00:27:41.480
So they give you an example here.


00:27:41.480 --> 00:27:47.000
So you would say %%AI ChatGPT, and then you type something.


00:27:47.000 --> 00:27:49.920
Please generate the Python code to solve the 2D Laplace


00:27:49.920 --> 00:27:51.840
equation in the Cartesian coordinates.


00:27:51.840 --> 00:27:54.200
Solve the equation on the square, such and such,


00:27:54.200 --> 00:27:56.200
with vanishing boundary conditions, et cetera.


00:27:56.200 --> 00:27:57.960
"the solution to matplotlib.


00:27:57.960 --> 00:27:59.960
Also, please provide an explanation."


00:27:59.960 --> 00:28:01.960
And then look at this, it goes, da-da-da-da-da,


00:28:01.960 --> 00:28:03.460
and down it goes.


00:28:03.460 --> 00:28:07.080
And you can see off it shows you how to implement it.


00:28:07.080 --> 00:28:08.840
That's the only part that's shown.


00:28:08.840 --> 00:28:10.840
You can also have it do graphics.


00:28:10.840 --> 00:28:14.640
Anything that those models will generate is HTML,


00:28:14.640 --> 00:28:15.340
just show up.


00:28:15.340 --> 00:28:18.140
So you could say, "Create a square using SVG


00:28:18.140 --> 00:28:19.520
with a black border and white fill."


00:28:19.520 --> 00:28:23.940
And then what shows up is not SVG commands


00:28:23.940 --> 00:28:25.580
like little definition.


00:28:25.580 --> 00:28:29.340
You just get a square because it put it in HTML as a response,


00:28:29.340 --> 00:28:30.580
and so that showed up.


00:28:30.580 --> 00:28:35.580
You can even do LaTeX, like dash F is math,


00:28:35.580 --> 00:28:37.580
generate a 2D heat equation, and you


00:28:37.580 --> 00:28:46.220
get this partial differential equation thing in LaTeX.


00:28:46.220 --> 00:28:49.100
You can even ask it to write a poem, whatever you do.


00:28:49.100 --> 00:28:50.580
So that's one of the--


00:28:50.580 --> 00:28:52.340
Go back to the poem one.


00:28:52.340 --> 00:28:56.060
Yeah, it says write a poem in the style of variable names.


00:28:56.060 --> 00:29:01.740
So you can have commands with variable, insert variable stuff.


00:29:01.740 --> 00:29:04.540
So that's interesting.


00:29:04.540 --> 00:29:06.140
So you can also--


00:29:06.140 --> 00:29:08.060
Jupyter has inputs and outputs.


00:29:08.060 --> 00:29:11.300
Like along the left side, there's like a 9 and a 10.


00:29:11.300 --> 00:29:14.380
And those are like the order they were executed.


00:29:14.380 --> 00:29:19.140
You can say, using input of 9, which


00:29:19.140 --> 00:29:21.700
might be the previous cell or something,


00:29:21.700 --> 00:29:26.260
or output of nine, go do, you know, take that and go do other things, right?


00:29:26.260 --> 00:29:28.060
Like, kind of, that's how I opened this conversation.


00:29:28.060 --> 00:29:34.100
One of the really interesting examples that David Q pointed out, there's a nice talk that he gave


00:29:34.100 --> 00:29:41.780
in a link to in the show notes at PyData like a week ago, was he had written some code,


00:29:41.780 --> 00:29:46.860
two examples, one, he had written some code, a bunch of calculations and pandas,


00:29:46.860 --> 00:29:49.700
and then he created a plot, but the plot wasn't showing


00:29:50.260 --> 00:29:52.420
because he forgot to call plot.show.


00:29:52.420 --> 00:29:57.060
And he asks one of the AIs, it depends,


00:29:57.060 --> 00:29:59.380
you can ask a bunch depending on which model


00:29:59.380 --> 00:30:01.580
you tell it to target.


00:30:01.580 --> 00:30:04.900
He said, "Why isn't, hey, in that previous cell,


00:30:04.900 --> 00:30:06.420
"why isn't my plot showing?"


00:30:06.420 --> 00:30:10.660
It said, "Because you forgot to call show."


00:30:10.660 --> 00:30:12.900
So here's an example of your code above,


00:30:12.900 --> 00:30:15.180
but that works and shows the plot.


00:30:15.180 --> 00:30:16.620
That's pretty cool for help, right?


00:30:16.620 --> 00:30:17.860
- Yeah, geez.


00:30:17.860 --> 00:30:19.540
- Instead of going to stack overflow


00:30:19.540 --> 00:30:21.980
or even trying to copy that into one of these AIs,


00:30:21.980 --> 00:30:23.580
you just go, "Hey, that thing I just did,


00:30:23.580 --> 00:30:25.100
it didn't do what I expected."


00:30:25.100 --> 00:30:26.060
Why?


00:30:26.060 --> 00:30:26.880
Here's your answer.


00:30:26.880 --> 00:30:28.660
Not in a general sense,


00:30:28.660 --> 00:30:31.740
but like literally grabbing your data and your code.


00:30:31.740 --> 00:30:33.780
Two final things that are interesting here.


00:30:33.780 --> 00:30:35.920
The other, maybe three.


00:30:35.920 --> 00:30:39.900
The other one is he had some code that was crashing.


00:30:39.900 --> 00:30:41.780
I can't remember what it was doing,


00:30:41.780 --> 00:30:45.320
but it was throwing some kind of exception


00:30:45.320 --> 00:30:46.980
and it wasn't working out.


00:30:46.980 --> 00:30:49.740
And so he said, why is this code crashing?


00:30:49.740 --> 00:30:52.980
And it explained what the problem was with the code


00:30:52.980 --> 00:30:54.920
and how to fix it, right?


00:30:54.920 --> 00:30:59.540
So super, super interesting here.


00:30:59.540 --> 00:31:04.060
- I'll have to check that out.


00:31:04.060 --> 00:31:06.100
Yeah, we have that link in the show notes.


00:31:06.100 --> 00:31:08.900
- Yeah, the talk is really, really interesting.


00:31:08.900 --> 00:31:11.580
I'm trying to think, there's one other thing


00:31:11.580 --> 00:31:12.700
that was in that talk.


00:31:12.700 --> 00:31:16.020
It's like a 40 minute talk, so I don't remember all of it.


00:31:16.020 --> 00:31:20.260
Anyway, there's more to it that goes on also beyond this.


00:31:20.260 --> 00:31:22.660
It looks pretty interesting.


00:31:22.660 --> 00:31:27.660
If you live in Jupyter and you think that these AI models


00:31:27.660 --> 00:31:30.220
have something to offer you,


00:31:30.220 --> 00:31:33.500
then this is definitely worth checking out.


00:31:33.500 --> 00:31:38.300
Alvaro says, "You know, as long as it doesn't hallucinate


00:31:38.300 --> 00:31:39.940
"a non-existing package."


00:31:39.940 --> 00:31:42.020
(laughs)


00:31:42.020 --> 00:31:45.020
Yeah, that's, I mean, that is the thing.


00:31:45.020 --> 00:31:50.260
What's kind of cool about this is it puts it right into code.


00:31:50.260 --> 00:31:52.660
You can run it and see if it does indeed work


00:31:52.660 --> 00:31:53.500
and do what it says.


00:31:53.500 --> 00:31:56.540
So anyway, that's our last--


00:31:56.540 --> 00:31:57.260
yeah, go ahead.


00:31:57.260 --> 00:31:59.100
>>Oh, before we move away too much,


00:31:59.100 --> 00:32:05.140
I was listening to an NPR show talking about AI.


00:32:05.140 --> 00:32:07.380
And somebody did research, I think


00:32:07.380 --> 00:32:11.420
that was for the New York Times, a research project.


00:32:11.420 --> 00:32:14.820
And it found out that sometimes they


00:32:14.820 --> 00:32:19.780
would ask, what's the first instance of this phrase showing


00:32:19.780 --> 00:32:21.660
up in the newspaper or something?


00:32:21.660 --> 00:32:24.940
And it would make up stuff.


00:32:24.940 --> 00:32:30.420
And they'd say, well, can you show those examples?


00:32:30.420 --> 00:32:32.740
And it would show snippets of fake articles


00:32:32.740 --> 00:32:35.860
that actually never were there.


00:32:35.860 --> 00:32:37.660
It did that for--


00:32:37.660 --> 00:32:38.260
that's crazy.


00:32:38.260 --> 00:32:41.140
It did that for legal proceedings as well.


00:32:41.140 --> 00:32:44.180
And a lawyer cited those cases.


00:32:44.180 --> 00:32:47.180
got sanctioned or whatever lawyers get when they do it wrong.


00:32:47.180 --> 00:32:49.180
Those are wrong.


00:32:49.180 --> 00:32:51.180
Don't do that.


00:32:51.180 --> 00:32:58.180
Also, the final thing that was interesting that I now remember that made me pause to think, Brian,


00:32:58.180 --> 00:33:06.180
is you can point it at a directory of files, like HTML files, Markdown files, CSV files,


00:33:06.180 --> 00:33:13.180
just like a bunch of files that happen to be part of your project and you wish it had knowledge of.


00:33:13.180 --> 00:33:21.380
So you can say /learn and point it at a sub-directory of your project.


00:33:21.380 --> 00:33:26.100
It will go learn that stuff in those documents.


00:33:26.100 --> 00:33:29.540
And then you can say, "Okay, now I have questions."


00:33:29.540 --> 00:33:34.620
Like if it learned some statistics about a CSV.


00:33:34.620 --> 00:33:40.660
The example that David gave was he had copied all the documentation for Jupyter AI over


00:33:40.660 --> 00:33:43.160
into there and it told it to go learn about itself.


00:33:43.160 --> 00:33:44.000
And then it did.


00:33:44.000 --> 00:33:45.160
And then you could talk to it about it


00:33:45.160 --> 00:33:46.520
based on the documentation.


00:33:46.520 --> 00:33:51.720
So if you've got a whole bunch of research papers,


00:33:51.720 --> 00:33:54.800
for example, and I learned those,


00:33:54.800 --> 00:33:56.020
now I need to ask you questions


00:33:56.020 --> 00:33:58.800
about this astronomy study, okay?


00:33:58.800 --> 00:34:01.440
Who studied this and who found what?


00:34:01.440 --> 00:34:02.280
You know, whatever, right?


00:34:02.280 --> 00:34:04.440
Like these kinds of questions are pretty amazing.


00:34:04.440 --> 00:34:06.120
- Yeah, and actually some of this stuff


00:34:06.120 --> 00:34:07.120
would be super powerful,


00:34:07.120 --> 00:34:09.360
especially if you could make it not,


00:34:09.360 --> 00:34:11.820
like keep all the information local,


00:34:11.820 --> 00:34:15.320
like internal company stuff,


00:34:15.320 --> 00:34:18.400
they don't wanna like upload all of their source code


00:34:18.400 --> 00:34:21.400
into the cloud just so that they can ask it questions


00:34:21.400 --> 00:34:22.240
about it.


00:34:22.240 --> 00:34:24.280
- Yeah, exactly.


00:34:24.280 --> 00:34:29.280
The other one was to generate starter projects


00:34:29.280 --> 00:34:31.680
and code based on ideas.


00:34:31.680 --> 00:34:35.600
So you can say generate me a Jupyter notebook


00:34:35.600 --> 00:34:39.720
that explains how to use Matplotlib.


00:34:39.720 --> 00:34:40.560
- Okay.


00:34:40.560 --> 00:34:43.360
- And it'll come over the notebook and it'll do,


00:34:43.360 --> 00:34:45.000
so here's a bunch of different examples


00:34:45.000 --> 00:34:46.460
and here's how you might apply a theme


00:34:46.460 --> 00:34:48.080
and it'll create things.


00:34:48.080 --> 00:34:50.240
And one of the things that they actually have to do


00:34:50.240 --> 00:34:54.880
is they use Lang chain and AI agents to in parallel


00:34:54.880 --> 00:34:56.740
go break that into smaller things


00:34:56.740 --> 00:34:59.240
that are actually gonna be able to handle


00:34:59.240 --> 00:35:01.000
and send them off to all be done separately


00:35:01.000 --> 00:35:01.840
and then compose them.


00:35:01.840 --> 00:35:03.640
So it'll say, oh, what's that problem?


00:35:03.640 --> 00:35:05.240
Instead of saying, what's the notebook,


00:35:05.240 --> 00:35:09.280
it'll say, give me an outline of how somebody might learn this.


00:35:09.280 --> 00:35:11.720
And then for each step in the outline,


00:35:11.720 --> 00:35:15.000
that's a section in the document that it'll go have the AI


00:35:15.000 --> 00:35:16.880
generate those sections.


00:35:16.880 --> 00:35:18.480
And it's like a smaller problem that


00:35:18.480 --> 00:35:19.680
seemed to get better results.


00:35:19.680 --> 00:35:23.540
So anyway, this is a way bigger project than just like,


00:35:23.540 --> 00:35:26.480
maybe I can pipe some information to ChatGPT.


00:35:26.480 --> 00:35:30.520
There's a lot of crazy stuff going on here


00:35:30.520 --> 00:35:33.120
that people who live in Jupyter might want to check out.


00:35:33.120 --> 00:35:34.120
- It is pretty neat.


00:35:34.120 --> 00:35:37.820
I was not around the Jupyter stuff,


00:35:37.820 --> 00:35:42.000
but I was thinking that a lot of software work


00:35:42.000 --> 00:35:45.500
is the maintenance, not the writing it in the first place.


00:35:45.500 --> 00:35:48.920
So what we've done is like taken the fun part


00:35:48.920 --> 00:35:51.800
of making something new and giving it to a computer


00:35:51.800 --> 00:35:55.960
and we'll all be just like software maintainers afterwards.


00:35:55.960 --> 00:35:57.760
- Exactly, we'll just be plumbers.


00:35:57.760 --> 00:36:00.480
(laughing)


00:36:00.480 --> 00:36:02.800
Sewer overflowed again, call the plumber.


00:36:02.800 --> 00:36:05.080
No, I don't want to go in there.


00:36:05.080 --> 00:36:08.080
And also, I'm just imagining a whole bunch of new web apps


00:36:08.080 --> 00:36:11.640
showing up that are generated by ideas.


00:36:11.640 --> 00:36:15.680
And they kind of work, but nobody knows how to fix them.


00:36:15.680 --> 00:36:16.600
Sure.


00:36:16.600 --> 00:36:18.900
I think that you're right, and that that's going to be what's


00:36:18.900 --> 00:36:19.780
going to happen a lot.


00:36:19.780 --> 00:36:23.360
But you technically could come to an existing notebook


00:36:23.360 --> 00:36:26.640
and add a cell below it and go, I don't really understand.


00:36:26.640 --> 00:36:28.880
Could you try to explain what is happening


00:36:28.880 --> 00:36:31.760
in the line in the cell above?


00:36:31.760 --> 00:36:35.520
And it also has the possibility for making legacy code better.


00:36:35.520 --> 00:36:37.920
And if that's the reality, we'll see.


00:36:37.920 --> 00:36:38.640
>>Yeah.


00:36:38.640 --> 00:36:39.800
Hopefully it's a good thing.


00:36:39.800 --> 00:36:40.320
So cool.


00:36:40.320 --> 00:36:40.820
>>All right.


00:36:40.820 --> 00:36:42.200
Well, those are all of our items.


00:36:42.200 --> 00:36:43.880
That's the last one I brought.


00:36:43.880 --> 00:36:44.840
Any extras?


00:36:44.840 --> 00:36:48.840
>>I got a couple extras.


00:36:48.840 --> 00:36:52.520
Will McGugan and gang at Textualize


00:36:52.520 --> 00:36:55.280
have started a YouTube channel.


00:36:55.280 --> 00:36:57.000
And so far, there's--


00:36:57.000 --> 00:36:58.200
and some of these--


00:36:58.200 --> 00:36:59.520
I think it's a neat idea.


00:36:59.520 --> 00:37:01.400
Some of the tutorials that they already have,


00:37:01.400 --> 00:37:04.480
They're just walking through some of the tutorials


00:37:04.480 --> 00:37:06.560
in video form at this point.


00:37:06.560 --> 00:37:09.680
And there's three up so far of stopwatch intro


00:37:09.680 --> 00:37:12.760
and how to get set up and use Textualize.


00:37:12.760 --> 00:37:15.240
And I like what they're doing over there,


00:37:15.240 --> 00:37:17.120
and it's kind of fun.


00:37:17.120 --> 00:37:18.280
Another fun thing--


00:37:18.280 --> 00:37:20.280
I like it too, because it's--


00:37:20.280 --> 00:37:24.240
Textualize-- rich is a visual thing,


00:37:24.240 --> 00:37:27.920
but Textualize is like a higher level UI framework


00:37:27.920 --> 00:37:30.080
where you've got docking sections and all kinds


00:37:30.080 --> 00:37:32.420
of really interesting UI things.


00:37:32.420 --> 00:37:37.420
And so sometimes learning that in an animated,


00:37:37.420 --> 00:37:40.400
active video form is really maybe better


00:37:40.400 --> 00:37:42.200
than reading the docs.


00:37:42.200 --> 00:37:44.640
- Yep. And then something else that they've done.


00:37:44.640 --> 00:37:47.080
So maybe watch that if you want to try to build


00:37:47.080 --> 00:37:52.080
your own command line, text user interface,


00:37:52.080 --> 00:37:54.240
a TUI as it were.


00:37:54.240 --> 00:37:59.400
Or you can take your command line interface


00:37:59.400 --> 00:38:03.640
and just pipe, use a Trogon, Trogon,


00:38:03.640 --> 00:38:06.720
I don't know how you say that, T-R-O-G-O-N.


00:38:06.720 --> 00:38:10.280
It's by Textualize also, it's a new project.


00:38:10.280 --> 00:38:13.120
And the idea is you just,


00:38:13.120 --> 00:38:17.720
I think you use it to wrap your own,


00:38:17.720 --> 00:38:19.960
your own command line interface tool


00:38:19.960 --> 00:38:23.080
and it makes a graphic or text-based user interface


00:38:23.080 --> 00:38:23.920
out of it.


00:38:23.920 --> 00:38:26.160
There's a little video showing an example


00:38:26.160 --> 00:38:30.560
of Trogon app applied to SQLite Utils,


00:38:30.560 --> 00:38:32.960
which has a whole bunch,


00:38:32.960 --> 00:38:34.680
SQLite Utils has a bunch of great stuff,


00:38:34.680 --> 00:38:39.680
and now you can interact with it with a GUI instead,


00:38:39.680 --> 00:38:41.460
and that's kind of fun.


00:38:41.460 --> 00:38:45.920
Works around Click, but apparently they will support


00:38:45.920 --> 00:38:48.280
other libraries and languages in the future.


00:38:48.280 --> 00:38:50.800
So, interesting.


00:38:50.800 --> 00:38:53.480
- Yeah, it's like you can pop up the documentation


00:38:53.480 --> 00:38:55.280
for a parameter while you're working on it


00:38:55.280 --> 00:38:57.080
in a little modal window or something.


00:38:57.080 --> 00:38:58.720
Looks interesting.


00:38:58.720 --> 00:39:00.560
- Yeah, well, I was thinking along the lines


00:39:00.560 --> 00:39:03.240
of even like in a internal stuff,


00:39:03.240 --> 00:39:07.440
it's fairly, you're gonna write like a make script


00:39:07.440 --> 00:39:10.880
or a build script or some different utilitarian thing


00:39:10.880 --> 00:39:12.460
for your work group.


00:39:12.460 --> 00:39:16.560
If you use it all the time, command line's fine.


00:39:16.560 --> 00:39:19.120
But if you only use it like every, you know,


00:39:19.120 --> 00:39:21.360
once a month or every couple weeks or something,


00:39:21.360 --> 00:39:24.000
it might be that you forget about some of the features


00:39:24.000 --> 00:39:26.920
and yeah, there's help, but having it as a GUI,


00:39:26.920 --> 00:39:29.920
if you could easily write a GUI for it, that's kind of fun.


00:39:29.920 --> 00:39:31.080
So why not?


00:39:31.080 --> 00:39:33.720
The other thing I wanted to bring up,


00:39:33.720 --> 00:39:38.520
completely different topic is the June 2023 release


00:39:38.520 --> 00:39:41.800
of Visual Studio Code came out recently


00:39:41.800 --> 00:39:45.600
and I hadn't taken a look at it.


00:39:45.600 --> 00:39:47.360
I'm still, I've installed it,


00:39:47.360 --> 00:39:48.880
but I haven't played with it yet.


00:39:48.880 --> 00:39:50.760
And the reason why I want to play with it


00:39:50.760 --> 00:39:54.920
is they've revamped the test discovery and execution.


00:39:54.920 --> 00:39:57.480
So apparently you can,


00:39:57.480 --> 00:40:00.760
there were some glitches with finding tests sometimes.


00:40:00.760 --> 00:40:03.720
So I'm looking forward to trying this out.


00:40:03.720 --> 00:40:04.760
You have to turn it on though.


00:40:04.760 --> 00:40:09.240
You have to, there's so this new test discovery stuff,


00:40:09.240 --> 00:40:14.240
you have to go, you have to like set a opt into flag.


00:40:14.240 --> 00:40:18.360
And I just put the little snippet in our show notes.


00:40:18.360 --> 00:40:20.860
So you can just copy that into your settings file


00:40:20.860 --> 00:40:21.700
to try it out.


00:40:21.700 --> 00:40:24.300
Yeah.


00:40:24.300 --> 00:40:25.120
- Excellent.


00:40:25.120 --> 00:40:25.960
- I guess that's all I got.


00:40:25.960 --> 00:40:26.800
Do you have any extras?


00:40:26.800 --> 00:40:29.460
- I do. I do.


00:40:29.460 --> 00:40:32.620
I have a report, a report from the field, Brian.


00:40:32.620 --> 00:40:37.620
So I had my 16 inch MacBook Pro M1 Max as my laptop.


00:40:37.620 --> 00:40:43.140
And I decided I just,


00:40:43.140 --> 00:40:47.020
it's not really necessarily the thing for me.


00:40:47.020 --> 00:40:50.080
So I traded it in and got a new MacBook Air 15 inch,


00:40:50.080 --> 00:40:53.000
one of those big, really light ones.


00:40:53.000 --> 00:40:56.500
And I just wanna sort of compare the two


00:40:56.500 --> 00:40:57.680
if people are considering this.


00:40:57.680 --> 00:41:00.640
You know, I have my mini that we're talking on now


00:41:00.640 --> 00:41:03.280
with my big screen and all that,


00:41:03.280 --> 00:41:06.520
which is a M2 Pro, it was super fast.


00:41:06.520 --> 00:41:08.600
And I found like that thing was way faster


00:41:08.600 --> 00:41:13.600
than my much heavier, more expensive laptop.


00:41:13.600 --> 00:41:15.960
Like, well, why am I dragging this thing around


00:41:15.960 --> 00:41:19.560
if it's not really faster, if it's heavy,


00:41:19.560 --> 00:41:22.080
has all these cores and stuff


00:41:22.080 --> 00:41:23.920
that are just burning through the battery,


00:41:23.920 --> 00:41:25.640
even though it says it lasts a long time,


00:41:25.640 --> 00:41:27.320
it's like four or five hours


00:41:27.320 --> 00:41:29.560
was a good day for that thing.


00:41:29.560 --> 00:41:30.380
I'm like, you know what?


00:41:30.380 --> 00:41:33.680
I'm gonna trade it in for the new,


00:41:33.680 --> 00:41:35.720
a little bit bigger Air.


00:41:35.720 --> 00:41:38.040
And yeah, so far that thing is incredible.


00:41:38.040 --> 00:41:40.760
It's excellent for doing software development thing.


00:41:40.760 --> 00:41:42.980
The only thing is the screen's not quite as nice,


00:41:42.980 --> 00:41:45.780
but for me, I don't live on my laptop, right?


00:41:45.780 --> 00:41:47.660
I've got like a big dedicated screen.


00:41:47.660 --> 00:41:49.680
I'm normally at then I'm like out somewhere.


00:41:49.680 --> 00:41:53.640
So small is better and it lasts like twice as long


00:41:53.640 --> 00:41:54.480
and the battery.


00:41:54.480 --> 00:41:56.680
So, and I got the black one,


00:41:56.680 --> 00:42:00.180
which is weird for an Apple device, but very cool.


00:42:00.180 --> 00:42:03.180
People say it's a fingerprint magnet and absolutely,


00:42:03.180 --> 00:42:05.700
but it's also a super, super cool machine.


00:42:05.700 --> 00:42:07.380
So people are thinking about it.


00:42:07.380 --> 00:42:10.720
I'll give it a pretty, I'll give it like a 90% thumbs up.


00:42:10.720 --> 00:42:13.620
The screen's not quite as nice.


00:42:13.620 --> 00:42:15.700
It's super clear, but it kind of is like washed out


00:42:15.700 --> 00:42:17.100
a little harder to see in light,


00:42:17.100 --> 00:42:18.920
but other than that, it's excellent.


00:42:18.920 --> 00:42:20.780
So here's my report.


00:42:20.780 --> 00:42:25.540
I did my expensive MacBook for an incredibly light, thin,


00:42:25.540 --> 00:42:27.540
and often faster, right?


00:42:27.540 --> 00:42:29.220
When I'm doing stuff in Adobe Audition


00:42:29.220 --> 00:42:33.020
for audio or video work, or a lot of other places,


00:42:33.020 --> 00:42:34.640
like those things that I gotta do,


00:42:34.640 --> 00:42:37.180
like noise reduction and other sorts of stuff,


00:42:37.180 --> 00:42:38.300
it's all single threaded.


00:42:38.300 --> 00:42:42.700
And so it's like 20% faster than my $3,500


00:42:42.700 --> 00:42:44.420
MacBook Pro Max thing.


00:42:45.420 --> 00:42:48.420
And lighter and smaller, you know, all the good things.


00:42:48.420 --> 00:42:54.780
But you're still using, your, your mini for some, some of your workload.


00:42:54.780 --> 00:42:56.640
I use my mini for almost all my work.


00:42:56.640 --> 00:42:56.780
Yeah.


00:42:56.780 --> 00:42:59.820
If I'm not out, then I usually, or sitting on the couch, then it's


00:42:59.820 --> 00:43:01.900
all mini, mini, mini all the time.


00:43:01.900 --> 00:43:02.680
Okay.


00:43:02.680 --> 00:43:03.460
Okay.


00:43:03.460 --> 00:43:03.780
Yeah.


00:43:03.780 --> 00:43:06.580
Is it black on the outside also then?


00:43:06.580 --> 00:43:06.980
Yeah.


00:43:06.980 --> 00:43:07.500
Yeah.


00:43:07.500 --> 00:43:08.540
It's, it's cool looking.


00:43:08.540 --> 00:43:09.020
It's cool.


00:43:09.020 --> 00:43:12.660
You can throw a sticker on that and somebody to hide that it's Apple and


00:43:12.660 --> 00:43:14.140
people might think you just have a Dell.


00:43:14.140 --> 00:43:16.700
- They wouldn't know, that's right.


00:43:16.700 --> 00:43:20.180
Run Parallels, you can run Linux on it.


00:43:20.180 --> 00:43:21.980
They're like, "Oh, okay, Linux, got it.


00:43:21.980 --> 00:43:22.820
"What is that thing?


00:43:22.820 --> 00:43:23.660
"That's a weird..."


00:43:23.660 --> 00:43:26.660
Yeah, you could disguise it pretty easy if you want.


00:43:26.660 --> 00:43:30.100
Or just your sticker stained out better, you never know.


00:43:30.100 --> 00:43:31.460
All right, so people are thinking about that,


00:43:31.460 --> 00:43:33.620
a pretty cool device.


00:43:33.620 --> 00:43:36.700
But, Brian, if somebody were to send you a message


00:43:36.700 --> 00:43:39.780
and trick you, like, "Hey, you want a MacBook?


00:43:39.780 --> 00:43:41.420
"You wanna get your MacBook for free?"


00:43:41.420 --> 00:43:42.980
You don't want that, right?


00:43:42.980 --> 00:43:44.020
- No.


00:43:44.020 --> 00:43:47.740
So companies, they'll do tests.


00:43:47.740 --> 00:43:52.740
They'll test their people just to make sure,


00:43:52.740 --> 00:43:56.340
like, hey, we told you not to click on weird looking links,


00:43:56.340 --> 00:43:59.020
but let's send out a test and see if they'll click on a link.


00:43:59.020 --> 00:44:01.020
And there's this picture,


00:44:01.020 --> 00:44:04.680
this guy getting congratulated by the CEO.


00:44:04.680 --> 00:44:10.780
IT congratulated me for not failing the phishing test.


00:44:10.780 --> 00:44:12.980
And the guy's like, deer head, like,


00:44:12.980 --> 00:44:17.720
Oh no, me who doesn't open emails is what the picture says.


00:44:17.720 --> 00:44:19.620
(laughing)


00:44:19.620 --> 00:44:21.980
So you just ignore all your work email.


00:44:21.980 --> 00:44:23.580
You know, you won't get caught in the phishing test.


00:44:23.580 --> 00:44:24.420
How about that?


00:44:24.420 --> 00:44:28.660
- Yeah, those are,


00:44:28.660 --> 00:44:32.100
you've been out of the corporate for a while.


00:44:32.100 --> 00:44:33.220
It happens.


00:44:33.220 --> 00:44:35.700
We've got, I've had some phishing tests come through.


00:44:35.700 --> 00:44:36.540
- Have you gone through this?


00:44:36.540 --> 00:44:37.360
Yeah, okay.


00:44:37.360 --> 00:44:39.860
- Yeah, well, like the email,


00:44:39.860 --> 00:44:42.220
like looks like it came from,


00:44:42.220 --> 00:44:45.300
So that's one of the problems is it looks like it's legit


00:44:45.300 --> 00:44:49.420
and it has like, you know, the right third party company


00:44:49.420 --> 00:44:52.540
that we're using for some service or something.


00:44:52.540 --> 00:44:56.500
And you're like, wait, what is this?


00:44:56.500 --> 00:45:00.420
And then the link doesn't match up with the,


00:45:00.420 --> 00:45:02.940
whatever it says it's going to and things like that.


00:45:02.940 --> 00:45:06.500
But it actually is harder now, I think,


00:45:06.500 --> 00:45:09.980
to verify what's real and what's not


00:45:09.980 --> 00:45:13.860
when more companies do use third-party services


00:45:13.860 --> 00:45:14.780
for lots of stuff.


00:45:14.780 --> 00:45:15.620
So, yeah.


00:45:15.620 --> 00:45:16.460
- Yeah.


00:45:16.460 --> 00:45:17.380
- Anyway.


00:45:17.380 --> 00:45:19.700
- Yeah, it's a joke, but it is serious.


00:45:19.700 --> 00:45:24.620
I worked for a company where somebody got a message,


00:45:24.620 --> 00:45:26.380
I think either, it might have been


00:45:26.380 --> 00:45:28.540
through a hacked email account,


00:45:28.540 --> 00:45:33.540
or it was spoofed in a way that it looked


00:45:33.540 --> 00:45:35.660
like it came from a higher-up that says,


00:45:35.660 --> 00:45:37.740
hey, there's a really big emergency.


00:45:37.740 --> 00:45:39.060
This vendor's super upset.


00:45:39.060 --> 00:45:40.540
We didn't pay them.


00:45:40.540 --> 00:45:42.900
They're kind of suing us if we don't, you know,


00:45:42.900 --> 00:45:45.380
could you quick transfer this money over


00:45:45.380 --> 00:45:47.420
to this bank account?


00:45:47.420 --> 00:45:50.620
And because it came from, you know,


00:45:50.620 --> 00:45:54.240
somebody who looked like they should be asking that, right?


00:45:54.240 --> 00:45:55.940
It almost happened, so.


00:45:55.940 --> 00:45:56.900
- Jeez. - It's not good.


00:45:56.900 --> 00:45:58.500
- That's not good, yeah.


00:45:58.500 --> 00:46:02.860
I get texts now, like the latest one was just this weekend,


00:46:02.860 --> 00:46:04.820
I got a text or something that said,


00:46:04.820 --> 00:46:07.580
said, hey, we need information about your shipping


00:46:07.580 --> 00:46:10.280
for Amazon shipment or something.


00:46:10.280 --> 00:46:14.100
And it's like, copy and paste this link into your browser.


00:46:14.100 --> 00:46:15.860
And it's just like bizarre link.


00:46:15.860 --> 00:46:19.500
And I'm like, no, it would be amazon.com something.


00:46:19.500 --> 00:46:24.500
There's no way it's gonna be Bob's Burgers, whatever.


00:46:24.500 --> 00:46:27.900
- Yeah, Amazon.


00:46:27.900 --> 00:46:29.860
Yeah, let's go to amazon.com.


00:46:29.860 --> 00:46:32.760
- Anyway.


00:46:32.760 --> 00:46:33.580
- Oh, well.


00:46:33.580 --> 00:46:36.660
- Well, may everybody get through their day


00:46:36.660 --> 00:46:39.420
without clicking on phishing emails.


00:46:39.420 --> 00:46:40.420
- That's right.


00:46:40.420 --> 00:46:42.780
Yeah, may you pass the test.


00:46:42.780 --> 00:46:45.220
- Or don't read email, just stop reading email.


00:46:45.220 --> 00:46:47.740
- Yeah, think about how productive you'll be.


00:46:47.740 --> 00:46:49.340
Well, this was very productive, Brian.


00:46:49.340 --> 00:46:50.740
- Yes, it was. - Yeah.


00:46:50.740 --> 00:46:54.100
- Well, thanks for hanging out with me this morning.


00:46:54.100 --> 00:46:55.820
So it was fun. - Yeah, absolutely.


00:46:55.820 --> 00:46:57.180
Thanks for being here, as always.


00:46:57.180 --> 00:46:59.100
And everyone, thank you for listening.


00:46:59.100 --> 00:47:00.180
It's been a lot of fun.


00:47:00.180 --> 00:47:01.300
See you next time.


00:47:01.300 --> 00:47:02.140
- Bye.

