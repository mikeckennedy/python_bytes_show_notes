WEBVTT

00:00:00.000 --> 00:00:09.720
Hello, everybody. I'm Michael. Hey, hey. Well, we're back. We were absent last week, but


00:00:09.720 --> 00:00:15.320
taking a little vacation. And we're back. And I'm excited to talk Python with you. And


00:00:15.320 --> 00:00:20.920
everybody excited as well. Everybody out in the YouTube world. Thanks for showing up.


00:00:20.920 --> 00:00:25.680
So let's kick it off. Hello, and welcome to Python bites where we deliver Python news


00:00:25.680 --> 00:00:33.200
and headlines directly to your earbuds. This is episode 343, recorded July 11th, 2023,


00:00:33.200 --> 00:00:36.640
and I am Brian Okken. >> And I'm Michael Kennedy.


00:00:36.640 --> 00:00:43.680
>> Well, Michael, it's pretty exciting to be here. If you're listening to the show,


00:00:43.680 --> 00:00:49.680
thank you. And also, if you'd like to watch and participate, ask questions or whatever,


00:00:49.680 --> 00:00:53.800
You could do that by going to pythonbytes.fm/live.


00:00:53.800 --> 00:00:57.320
And we'd love to have you, even if it's just once in a while.


00:00:57.320 --> 00:01:01.320
- So yeah, sometimes people show up in the live stream


00:01:01.320 --> 00:01:03.560
that will possibly get,


00:01:03.560 --> 00:01:06.200
their projects will actually get mentioned as well.


00:01:06.200 --> 00:01:07.720
And that's always kind of interesting.


00:01:07.720 --> 00:01:09.920
I'm feeling this might happen today.


00:01:09.920 --> 00:01:13.080
- Yeah, speaking of that, Seth Larson showed up


00:01:13.080 --> 00:01:15.040
and we have some Seth Larson news to share.


00:01:15.040 --> 00:01:16.040
So that's cool.


00:01:16.040 --> 00:01:17.920
Hey, Seth.


00:01:17.920 --> 00:01:22.920
- Well, how would you like to start us off today, Michael?


00:01:22.920 --> 00:01:26.920
- I would like to start it with a version update.


00:01:26.920 --> 00:01:28.680
So let's talk about Pydantic.


00:01:28.680 --> 00:01:32.160
We talked about the Pydantic version two story


00:01:32.160 --> 00:01:33.420
and performance.


00:01:33.420 --> 00:01:37.640
So Pydantic got a major rewrite.


00:01:37.640 --> 00:01:42.640
This rewrite was, I don't know, maybe a year in undertaking,


00:01:42.640 --> 00:01:46.560
a year long undertaking, quite massive.


00:01:46.560 --> 00:01:50.560
got its internals rewritten and rust to be way faster.


00:01:50.560 --> 00:01:54.200
We talked about the early alpha version of this


00:01:54.200 --> 00:01:56.600
and the early alpha version had, you know,


00:01:56.600 --> 00:01:59.100
like a 22 times speed up.


00:01:59.100 --> 00:02:01.040
Well, alpha no more.


00:02:01.040 --> 00:02:05.120
If you pip install Pydantic, you get Pydantic 2.


00:02:05.120 --> 00:02:07.160
So that's pretty exciting, right?


00:02:07.160 --> 00:02:09.680
- That's very exciting, yeah.


00:02:09.680 --> 00:02:11.800
- Yeah, so there's a blog post that says


00:02:11.800 --> 00:02:15.840
the last few months have involved a whirlwind of work.


00:02:15.840 --> 00:02:18.760
And finally, we're ready to announce version 2.


00:02:18.760 --> 00:02:22.600
So you get started by just installing it, upgrading it.


00:02:22.600 --> 00:02:24.640
It requires Python 3.7 and above.


00:02:24.640 --> 00:02:28.360
So honestly, that's a pretty old bit of Python


00:02:28.360 --> 00:02:30.000
that you can be based on there.


00:02:30.000 --> 00:02:31.240
That's great.


00:02:31.240 --> 00:02:35.280
Now, there's some pretty major changes


00:02:35.280 --> 00:02:41.400
in terms of the API, I guess you would call it,


00:02:41.400 --> 00:02:44.400
the way that you work with Pydantic, right?


00:02:44.400 --> 00:02:47.080
in some cases, the way you work with base classes


00:02:47.080 --> 00:02:50.560
or the functions you call and all those things.


00:02:50.560 --> 00:02:52.400
So there's a migration guide


00:02:52.400 --> 00:02:54.200
that we can use to go through that.


00:02:54.200 --> 00:02:58.580
And if you check out the migration guide,


00:02:58.580 --> 00:03:01.040
you'll see, I'll do it like this.


00:03:01.040 --> 00:03:02.540
Check out the migration guide.


00:03:02.540 --> 00:03:07.560
It starts by recommending this thing called bump-pydantic.


00:03:07.560 --> 00:03:10.800
And I guess I should probably also just let you know,


00:03:10.800 --> 00:03:14.000
like, this is like a big pydantic episode


00:03:14.000 --> 00:03:15.840
that we're going to be covering a lot of Pydantic things.


00:03:15.840 --> 00:03:18.560
So there's this thing called Bump Pydantic.


00:03:18.560 --> 00:03:22.560
And what you can do is you can run it against your project


00:03:22.560 --> 00:03:25.240
and it will traverse all the code


00:03:25.240 --> 00:03:30.040
and find all of the Pydantic things,


00:03:30.040 --> 00:03:32.920
the classes and functions and so on


00:03:32.920 --> 00:03:35.600
that you might write with for your Pydantic code


00:03:35.600 --> 00:03:38.400
and it will upgrade them to the new thing.


00:03:38.400 --> 00:03:40.800
So we can check that thing out first.


00:03:40.800 --> 00:03:42.280
Basically a converter.


00:03:42.280 --> 00:03:44.520
It's like a two to three, but for Pydantic.


00:03:44.520 --> 00:03:46.420
It's like a one to two, I guess.


00:03:46.420 --> 00:03:49.680
And so it'll do things like,


00:03:49.680 --> 00:03:51.360
one of the things you should do


00:03:51.360 --> 00:03:55.880
is you should have explicitly set the default value.


00:03:55.880 --> 00:03:58.440
So previously you could have a class


00:03:58.440 --> 00:04:00.400
that give an example of a user that's a base model,


00:04:00.400 --> 00:04:03.360
you have a name and you say the name is an optional string.


00:04:03.360 --> 00:04:08.960
Well, now what you should write is name,


00:04:08.960 --> 00:04:10.640
optional string equals none.


00:04:10.640 --> 00:04:13.800
So explicitly setting the default values


00:04:13.800 --> 00:04:16.100
when there are things like none.


00:04:16.100 --> 00:04:17.760
So if you run this code against it,


00:04:17.760 --> 00:04:20.400
it'll go and make those transformations.


00:04:20.400 --> 00:04:23.360
It also will replace the config class


00:04:23.360 --> 00:04:26.240
with a model config attribute.


00:04:26.240 --> 00:04:29.000
So you might've had an inner config class,


00:04:29.000 --> 00:04:33.720
and now you have a model config


00:04:33.720 --> 00:04:35.700
where you set that to an instance


00:04:35.700 --> 00:04:38.480
of the same settings, basically.


00:04:38.480 --> 00:04:45.520
So fewer inner classes, more just fields that make things happen, right?


00:04:45.520 --> 00:04:49.680
And a bunch of stuff like that, that you can run, it'll do that automatically.


00:04:49.680 --> 00:04:54.280
But this is, if you look at the migration guide, this is actually just scratching the surface.


00:04:54.280 --> 00:04:58.200
So there's a lot of other things that you need to be aware of.


00:04:58.200 --> 00:05:05.320
And I don't know how far they intend for this bump pedantic to go and trying to manage those things.


00:05:07.120 --> 00:05:07.960
But for example--


00:05:07.960 --> 00:05:10.040
- It's pretty cool that they have it though.


00:05:10.040 --> 00:05:11.800
- It is pretty cool they have it, yeah.


00:05:11.800 --> 00:05:13.120
Even it's a star, right?


00:05:13.120 --> 00:05:16.040
- Yeah, to let people say,


00:05:16.040 --> 00:05:17.480
here's the changes you have to make.


00:05:17.480 --> 00:05:21.080
And also here's a tool that can do at least most of it.


00:05:21.080 --> 00:05:21.920
- Exactly.


00:05:21.920 --> 00:05:26.640
So there's things like in old Pydantic,


00:05:26.640 --> 00:05:27.920
you had a Dunder fields.


00:05:27.920 --> 00:05:32.920
Now you have model fields as a field to the base class.


00:05:32.920 --> 00:05:35.080
You had Dunder private attributes


00:05:35.080 --> 00:05:37.200
and now you have dunder, pedantic, private.


00:05:37.200 --> 00:05:41.200
And there's more relevant ones like there was a copy function


00:05:41.200 --> 00:05:43.200
and now there's a model copy.


00:05:43.200 --> 00:05:46.720
There was a dict, and now there's a model dump.


00:05:46.720 --> 00:05:48.960
So if you had a Pydantic model, you wanted a dictionary,


00:05:48.960 --> 00:05:50.260
you could just call dict on it.


00:05:50.260 --> 00:05:52.760
Well, that doesn't exist or is deprecated.


00:05:52.760 --> 00:05:55.760
And so now you have a model dump.


00:05:55.760 --> 00:05:57.440
They did say where possible, they've


00:05:57.440 --> 00:06:00.360
tried to retain deprecated methods with their old names


00:06:00.360 --> 00:06:02.200
for ease of migration, but you'll


00:06:02.200 --> 00:06:03.400
get deprecation warnings.


00:06:03.400 --> 00:06:06.900
So don't sleep on that 'cause one day they won't be.


00:06:06.900 --> 00:06:12.560
This is a pretty significantly long document.


00:06:12.560 --> 00:06:15.120
I don't know how long it is, this migration guide,


00:06:15.120 --> 00:06:19.200
but there's a bunch of things you should just go through.


00:06:19.200 --> 00:06:22.200
I would just say, try to upgrade to Pydantic 2,


00:06:22.200 --> 00:06:29.080
run your code, see if you get any deprecation warnings.


00:06:29.080 --> 00:06:32.200
If it runs and you don't get them, you're probably fine.


00:06:32.200 --> 00:06:37.200
But if you get errors, then go consult a migration guide.


00:06:37.200 --> 00:06:39.720
If you get deprecation warnings, do the same


00:06:39.720 --> 00:06:42.240
but maybe with slight less urgency.


00:06:42.240 --> 00:06:45.560
So yeah, there's a bunch of stuff that you can go through.


00:06:45.560 --> 00:06:48.240
One of them was, one that's interesting


00:06:48.240 --> 00:06:51.720
is they introduced this thing called a type adapter.


00:06:51.720 --> 00:06:54.080
Let me see if there's a section where they talk about it.


00:06:54.080 --> 00:06:54.920
Yeah.


00:06:54.920 --> 00:07:00.020
So now they have this thing called a type adapter


00:07:00.020 --> 00:07:00.900
which is pretty cool.


00:07:00.900 --> 00:07:02.600
I have some example, there we go.


00:07:02.600 --> 00:07:05.580
It says in Pydantic version one,


00:07:05.580 --> 00:07:07.340
we had weak support for validating


00:07:07.340 --> 00:07:09.900
or serializing non-base model types,


00:07:09.900 --> 00:07:11.340
like a list of something.


00:07:11.340 --> 00:07:15.260
So now you can create this instance


00:07:15.260 --> 00:07:17.220
of a type called a type adapter,


00:07:17.220 --> 00:07:20.020
and you pass the type it adapts.


00:07:20.020 --> 00:07:23.700
So you can say a type adapter of list of int.


00:07:23.700 --> 00:07:26.820
And then you can just go to it and say validate Python.


00:07:26.820 --> 00:07:30.400
And for the example here, they have a list of numbers,


00:07:30.400 --> 00:07:32.300
but they're in strings like the list,


00:07:32.300 --> 00:07:34.620
string one, string two, string three.


00:07:34.620 --> 00:07:37.860
Then what it gives you back is just the actual list,


00:07:37.860 --> 00:07:40.660
one, two, three, like all that magical transformation


00:07:40.660 --> 00:07:42.620
that Pydantic is.


00:07:42.620 --> 00:07:44.080
>> That's pretty cool.


00:07:44.080 --> 00:07:46.580
>> Yeah. So that's another thing people can check out.


00:07:46.580 --> 00:07:48.760
Like I said, this is a huge document.


00:07:48.760 --> 00:07:50.800
People probably want to go check out.


00:07:50.800 --> 00:07:53.720
They've removed a whole bunch of error messages,


00:07:53.720 --> 00:07:56.400
or errors, sorry, error types like


00:07:56.400 --> 00:07:59.740
pydantic.errors.ipvninterfacer.


00:07:59.740 --> 00:08:00.580
(laughs)


00:08:00.580 --> 00:08:04.420
For example, I'm not sure where they went though.


00:08:04.420 --> 00:08:05.960
It doesn't explicitly say.


00:08:05.960 --> 00:08:10.040
And they were moved or mapped over to this other error type.


00:08:10.040 --> 00:08:12.280
But again, it's a huge document.


00:08:12.280 --> 00:08:15.040
I don't wanna go through the migration guide for everyone.


00:08:15.040 --> 00:08:15.880
That's not fun.


00:08:15.880 --> 00:08:20.280
But congratulations to the Pydantic team.


00:08:20.280 --> 00:08:22.440
This is really awesome that this is finally here.


00:08:22.440 --> 00:08:25.260
Now we come to the point where we wait.


00:08:26.320 --> 00:08:30.320
will we wait for all of the Pydantic frameworks?


00:08:30.320 --> 00:08:31.720
'Cause working with Pydantic is great


00:08:31.720 --> 00:08:33.760
and you can do cool stuff with Pydantic directly.


00:08:33.760 --> 00:08:37.480
Like you can directly work with it in a Flask app,


00:08:37.480 --> 00:08:41.920
for example, but if you work with FastAPI or Beanie


00:08:41.920 --> 00:08:45.440
or all these other frameworks that are built on top of it,


00:08:45.440 --> 00:08:46.600
you gotta wait for, you know,


00:08:46.600 --> 00:08:49.680
they're deep down in the guts of Pydantic a lot of times


00:08:49.680 --> 00:08:51.360
'cause of the way they work.


00:08:51.360 --> 00:08:54.080
- Except for, not FastAPI though.


00:08:54.080 --> 00:08:56.080
- FastAPI is already upgraded, right?


00:08:56.080 --> 00:08:59.960
Yeah, it is. It released or just the beta is out for it.


00:08:59.960 --> 00:09:00.960
I can't remember.


00:09:00.960 --> 00:09:01.640
I think so.


00:09:01.640 --> 00:09:06.160
FastAPI released a version 0.100.0.


00:09:06.160 --> 00:09:06.880
Come on, guys.


00:09:06.880 --> 00:09:07.760
Zero verse still.


00:09:07.760 --> 00:09:09.520
Anyway, four days ago.


00:09:09.520 --> 00:09:14.720
And it does look like they the last like five days ago,


00:09:14.720 --> 00:09:19.840
we got emerged from merged for adding support for


00:09:19.840 --> 00:09:24.440
pedantic 2.002 or something.


00:09:24.440 --> 00:09:26.520
The first couple of versions for Panentic


00:09:26.520 --> 00:09:30.280
didn't work with FastAPI, but it looks like there were some fixes.


00:09:30.280 --> 00:09:32.920
Wouldn't surprise me if they kind of just held off


00:09:32.920 --> 00:09:39.160
on announcing the version 2 until FastAPI was able to use it,


00:09:39.160 --> 00:09:41.800
because that's a huge user of it.


00:09:41.800 --> 00:09:43.960
>> Yeah, it's certainly the biggest user.


00:09:43.960 --> 00:09:47.880
And Samuel and Sebastian work pretty closely together.


00:09:47.880 --> 00:09:53.000
>> I'm excited. I know this is different.


00:09:53.000 --> 00:09:57.640
It might be difficult for people that are already using an old Binantic to move over,


00:09:57.640 --> 00:10:00.400
even with the bump.


00:10:00.400 --> 00:10:05.240
But I guess I haven't used Binantic directly before, and now I'm kind of excited to use


00:10:05.240 --> 00:10:11.200
it, even with tools like this auto thing that they're using.


00:10:11.200 --> 00:10:12.200
What was that?


00:10:12.200 --> 00:10:13.200
The auto changer?


00:10:13.200 --> 00:10:14.200
>> The bump?


00:10:14.200 --> 00:10:15.200
>> No, the-- >> The bump Binantic?


00:10:15.200 --> 00:10:18.080
>> No, the one to like-- >> Oh, the type adapter.


00:10:18.080 --> 00:10:19.080
>> Type adapter.


00:10:19.080 --> 00:10:21.500
I think that I've got places to use type adapter,


00:10:21.500 --> 00:10:25.700
even in without non-web stuff.


00:10:25.700 --> 00:10:27.500
So that's pretty fun.


00:10:27.500 --> 00:10:31.180
Anyway, cool, I'm excited.


00:10:31.180 --> 00:10:35.280
- Grant, the audience does point out,


00:10:35.280 --> 00:10:36.740
tough luck for base models


00:10:36.740 --> 00:10:38.520
with an existing model attribute.


00:10:38.520 --> 00:10:44.740
There might be some mechanism to rename that or remap that.


00:10:44.740 --> 00:10:48.040
There's like an alias you can put on them,


00:10:48.040 --> 00:10:50.560
but you say, when you look in the data,


00:10:50.560 --> 00:10:52.960
it looks like this, even though the name is that,


00:10:52.960 --> 00:10:55.680
but yeah, there might be some trickiness here.


00:10:55.680 --> 00:10:59.520
Yeah, at least in an API level, you could be able to fix it.


00:10:59.520 --> 00:11:01.040
I don't know about the Python code level,


00:11:01.040 --> 00:11:02.720
if that'll help you.


00:11:02.720 --> 00:11:05.320
All right, well, anyway, big news, big news,


00:11:05.320 --> 00:11:07.560
Pydantic version two is out.


00:11:07.560 --> 00:11:12.560
This was on June 30th, but we were off on vacation, Brian.


00:11:12.560 --> 00:11:18.000
Mostly my fault, sorry.


00:11:18.000 --> 00:11:19.960
- Well, actually- - But I said we didn't cover it.


00:11:19.960 --> 00:11:21.600
- It's all right, now that we covered it,


00:11:21.600 --> 00:11:24.400
now we can cover the FastAPI's cut up, so.


00:11:24.400 --> 00:11:26.240
- Yeah, exactly, wait long enough things,


00:11:26.240 --> 00:11:28.000
things come together.


00:11:28.000 --> 00:11:31.520
- Well, I wanna talk about talks a little bit,


00:11:31.520 --> 00:11:34.640
because I learned something new from Hinnick,


00:11:34.640 --> 00:11:36.040
which isn't that unusual.


00:11:36.040 --> 00:11:37.960
I often learn a lot of stuff from him.


00:11:37.960 --> 00:11:42.000
However, there's an article from him saying,


00:11:42.000 --> 00:11:45.240
"Two ways to turbo charge talks."


00:11:45.240 --> 00:11:49.680
And it just starts right off the bat with saying,


00:11:49.680 --> 00:11:51.640
no, it's not just run parallel


00:11:51.640 --> 00:11:54.040
because actually running parallel is pretty cool.


00:11:54.040 --> 00:11:56.340
And if you don't know about running parallel,


00:11:56.340 --> 00:12:01.340
if you, I usually just use the talks-p to run parallel.


00:12:01.340 --> 00:12:06.120
If you can run all of your environments in parallel,


00:12:06.120 --> 00:12:08.760
it's super cool to be able to speed it up.


00:12:08.760 --> 00:12:12.380
That's the awesomest way to speed it up, I think.


00:12:14.880 --> 00:12:17.360
He does note that it's broken for some people.


00:12:17.360 --> 00:12:19.680
So Talks 4 has had some,


00:12:19.680 --> 00:12:23.220
Talks 4 is awesome and it's got some great new features,


00:12:23.220 --> 00:12:27.720
but apparently for some people, Parallel isn't working.


00:12:27.720 --> 00:12:29.200
I'm not one of those people.


00:12:29.200 --> 00:12:32.760
So most of my, all of my projects that can use Talks


00:12:32.760 --> 00:12:34.360
or Parallel seems to be working,


00:12:34.360 --> 00:12:36.240
but I'm not using something complicated.


00:12:36.240 --> 00:12:39.100
Apparently it's broken for adders, for instance,


00:12:39.100 --> 00:12:41.320
or at least it was last time I checked.


00:12:41.320 --> 00:12:43.480
Anyway, so what is he, what is he recommending?


00:12:43.480 --> 00:12:46.700
if it's not running in parallel, what should you do?


00:12:46.700 --> 00:12:49.800
This is something that I didn't really think about before.


00:12:49.800 --> 00:12:51.680
So one of the things that talks does


00:12:51.680 --> 00:12:54.440
is for each environment that you set up,


00:12:54.440 --> 00:12:55.880
like say you've got environments


00:12:55.880 --> 00:12:57.860
for three versions of Python,


00:12:57.860 --> 00:13:04.080
and it will create a source distribution


00:13:04.080 --> 00:13:08.880
of your library or package for each of those.


00:13:08.880 --> 00:13:09.940
If you're doing a normal,


00:13:09.940 --> 00:13:13.200
like using talks to test a Python package,


00:13:13.200 --> 00:13:16.960
it'll build a source distribution for each environment.


00:13:16.960 --> 00:13:19.680
Except for that's not really how we use our packages.


00:13:19.680 --> 00:13:23.320
We build it once and throw it up on PyPI


00:13:23.320 --> 00:13:25.040
and everybody uses the same one


00:13:25.040 --> 00:13:29.280
if one supports all three versions of Python.


00:13:29.280 --> 00:13:32.920
So he's showing us a way to get around that,


00:13:32.920 --> 00:13:36.440
to say, instead of building it on all environments,


00:13:36.440 --> 00:13:38.320
go ahead and just build the wheel once.


00:13:38.320 --> 00:13:40.960
And so you tell it to build the wheel


00:13:40.960 --> 00:13:42.900
instead of a source distribution,


00:13:42.900 --> 00:13:45.980
and you tell it where to put it into.


00:13:45.980 --> 00:13:48.560
And there's apparently a command line way to do it,


00:13:48.560 --> 00:13:53.020
but really it's throw it in your talks, any file,


00:13:53.020 --> 00:13:55.540
or if you're using pyproject.toml,


00:13:55.540 --> 00:13:57.600
you can throw it there too, of course.


00:13:57.600 --> 00:14:01.420
But so there's a wheel build environment


00:14:01.420 --> 00:14:04.820
that tells talks what directory to stick it in.


00:14:04.820 --> 00:14:07.360
And if it's the same directory for everybody,


00:14:07.360 --> 00:14:09.660
it'll get used for all environments.


00:14:09.660 --> 00:14:13.740
And this alone sped up quite a few of my workflows,


00:14:13.740 --> 00:14:15.500
which is really cool.


00:14:15.500 --> 00:14:17.620
Just building it once, using it in,


00:14:17.620 --> 00:14:20.700
in testing it in different Python environments.


00:14:20.700 --> 00:14:22.180
- Yeah, that's, that's really excellent.


00:14:22.180 --> 00:14:24.720
Cause generally the, the wheel's not gonna vary


00:14:24.720 --> 00:14:27.540
from 3.9 to 3.10, right?


00:14:27.540 --> 00:14:29.020
- Right. Yeah.


00:14:29.020 --> 00:14:32.540
In, in a lot of Python only packages,


00:14:32.540 --> 00:14:35.260
you're gonna use the same wheel for everything.


00:14:35.260 --> 00:14:37.100
And now there are some that use,


00:14:37.100 --> 00:14:40.300
have different ones for different versions, I guess.


00:14:40.300 --> 00:14:42.000
None of the stuff I work with does.


00:14:42.000 --> 00:14:46.780
And they, okay, so that's the first way to speed it up.


00:14:46.780 --> 00:14:48.140
What's the second way?


00:14:48.140 --> 00:14:51.740
The second way is if you're in one of these camps,


00:14:51.740 --> 00:14:53.540
especially one of these camps where


00:14:53.540 --> 00:14:56.620
you can't run talks in parallel,


00:14:56.620 --> 00:14:58.900
you can still run pytest in parallel.


00:14:58.900 --> 00:15:02.540
So he's recommending using pytest xdist and run,


00:15:02.540 --> 00:15:04.780
and then use as a plugin,


00:15:04.780 --> 00:15:07.420
and then running pytest dash in auto,


00:15:07.420 --> 00:15:10.300
or you can give it a number of CPUs or whatever.


00:15:10.300 --> 00:15:15.780
And auto just says, pick the number of CPUs you want


00:15:15.780 --> 00:15:17.800
and you can run pytest in parallel.


00:15:17.800 --> 00:15:20.740
This actually, if you have a fast test suite,


00:15:20.740 --> 00:15:22.420
this might slow down your tests.


00:15:22.420 --> 00:15:24.460
So be careful, measure it.


00:15:24.460 --> 00:15:29.340
However, he has an example in a lot of CPU intensive


00:15:29.340 --> 00:15:32.860
test suites, like for instance, if you're using hypothesis


00:15:32.860 --> 00:15:36.360
and it's running a lot of tests that are similar.


00:15:36.360 --> 00:15:39.940
And yeah, so especially if you're using hypothesis,


00:15:39.940 --> 00:15:44.080
I recommend trying out running pytest in parallel


00:15:44.080 --> 00:15:47.920
and it can speed things up significantly.


00:15:47.920 --> 00:15:50.400
He has an example at the bottom.


00:15:50.400 --> 00:15:52.740
Oh, I wanted to cover some of the other things.


00:15:52.740 --> 00:15:54.200
If you're doing all these tricks,


00:15:54.200 --> 00:15:58.160
you might, it might muck up your coverage collection.


00:15:58.160 --> 00:16:01.420
So he's got some stuff here to help you


00:16:01.420 --> 00:16:05.560
through cleaning up your coverage, which is great.


00:16:05.560 --> 00:16:11.640
Skipping down for the Adder's project, those two tricks,


00:16:11.640 --> 00:16:15.180
he started out with 257 seconds


00:16:15.180 --> 00:16:19.220
and got it down to 69 seconds using parallel pytest


00:16:19.220 --> 00:16:21.660
and building a wheel only.


00:16:21.660 --> 00:16:24.420
I had a test suite that was pretty fast anyway,


00:16:24.420 --> 00:16:26.860
just 18 seconds.


00:16:26.860 --> 00:16:29.260
It did take it down to like five seconds.


00:16:29.260 --> 00:16:34.100
So it's worth it just for the heck of it.


00:16:34.100 --> 00:16:34.940
Why not?


00:16:34.940 --> 00:16:36.060
So thanks.


00:16:36.060 --> 00:16:38.180
- Yeah, it's almost five times faster, not bad.


00:16:38.180 --> 00:16:39.580
Four times faster.


00:16:39.580 --> 00:16:41.060
- Yeah, I mean, right.


00:16:41.060 --> 00:16:43.340
If it's low, you don't really think about it,


00:16:43.340 --> 00:16:44.740
even if it's multiples.


00:16:44.740 --> 00:16:45.980
So, but.


00:16:45.980 --> 00:16:46.820
- Yep.


00:16:46.820 --> 00:16:50.460
And the bigger the project, the more you care, right?


00:16:50.460 --> 00:16:51.300
- Yeah.


00:16:51.300 --> 00:16:53.620
And I wasn't using a hypothesis.


00:16:53.620 --> 00:16:56.380
I would like to try this out using hypothesis.


00:16:56.380 --> 00:16:57.220
It's pretty cool.


00:16:58.340 --> 00:16:59.340
Excellent, good one.


00:16:59.340 --> 00:17:03.420
All right, before we move on to the next item,


00:17:03.420 --> 00:17:06.920
I have a bit of real-time follow-up,


00:17:06.920 --> 00:17:09.380
but not real-time follow-up in the traditional sense


00:17:09.380 --> 00:17:11.340
where we have audience members.


00:17:11.340 --> 00:17:14.140
I just got a message from Roman Wright,


00:17:14.140 --> 00:17:18.140
who is the creator of Beanie, the async MongoDB ODM


00:17:18.140 --> 00:17:22.380
based on Pydantic.


00:17:22.380 --> 00:17:26.940
And he said, "I am releasing a version of Beanie


00:17:26.940 --> 00:17:29.420
that supports Pydantic version two soon,


00:17:29.420 --> 00:17:31.680
either this week or next week.


00:17:31.680 --> 00:17:36.540
So don't want to put him down for a certain time exactly,


00:17:36.540 --> 00:17:39.900
but just that project is also moving along


00:17:39.900 --> 00:17:42.860
like FastAPI did to support it.


00:17:42.860 --> 00:17:45.620
And he said it promises to have quite a bit of a speed up


00:17:45.620 --> 00:17:46.940
as you would expect.


00:17:46.940 --> 00:17:48.100
- Nice, cool.


00:17:48.100 --> 00:17:50.980
That Beanie's a great project.


00:17:50.980 --> 00:17:51.940
- It absolutely is.


00:17:51.940 --> 00:17:55.140
So how about something totally different like Pydantic?


00:17:55.140 --> 00:18:00.020
So this next item is Awesome Pydantic,


00:18:00.020 --> 00:18:03.740
a curated list of awesome things related to Pydantic.


00:18:03.740 --> 00:18:08.340
So this is kind of an early stage project here.


00:18:08.340 --> 00:18:10.940
And it got created five months ago or so,


00:18:10.940 --> 00:18:13.060
but I feel like it needs people out there


00:18:13.060 --> 00:18:16.660
who have Pydantic things contributing them back.


00:18:16.660 --> 00:18:19.660
For example, do we have,


00:18:19.660 --> 00:18:22.740
I don't even think like SQL model is listed here


00:18:22.740 --> 00:18:25.580
where SQL model is created by Sebastian Ramirez


00:18:25.580 --> 00:18:29.860
based on Pydantic and SQLAlchemy, for example.


00:18:29.860 --> 00:18:31.760
So there are some notable things though


00:18:31.760 --> 00:18:33.020
that are worth pointing out here.


00:18:33.020 --> 00:18:35.060
So we have Transformers,


00:18:35.060 --> 00:18:37.500
and what's cool is it lists all the stars.


00:18:37.500 --> 00:18:41.300
So Transformers has 106,000 stars.


00:18:41.300 --> 00:18:43.820
That's crazy, Brian.


00:18:43.820 --> 00:18:44.740
- Yeah.


00:18:44.740 --> 00:18:46.340
- I mean, if you look at CPython,


00:18:46.340 --> 00:18:48.620
I think it has in the realm of 50,000,


00:18:48.620 --> 00:18:49.780
Flask does as well.


00:18:49.780 --> 00:18:51.820
So Transformers is the state of art,


00:18:51.820 --> 00:18:55.660
natural language processing for PyTorch and TensorFlow


00:18:55.660 --> 00:18:57.380
based on Pydantic.


00:18:57.380 --> 00:18:59.200
- It's more popular than Python.


00:18:59.200 --> 00:19:02.580
- Sort of, yes.


00:19:02.580 --> 00:19:06.020
I think, you know, how many people are actually trying


00:19:06.020 --> 00:19:08.380
to work on Python and the code itself?


00:19:08.380 --> 00:19:10.060
But yeah, in a sense.


00:19:10.060 --> 00:19:13.300
spaCy, of course, the free open source library


00:19:13.300 --> 00:19:16.360
for natural NLP, natural language processing.


00:19:16.360 --> 00:19:19.820
That's a pretty cool one.


00:19:19.820 --> 00:19:24.820
Gina, Gina, J-I-N-A is geared,


00:19:24.820 --> 00:19:28.500
Gina is geared towards building search systems


00:19:28.500 --> 00:19:31.420
for any kind of data, including text, image,


00:19:31.420 --> 00:19:33.740
audio, video, and more.


00:19:33.740 --> 00:19:34.960
That's pretty excellent.


00:19:34.960 --> 00:19:37.340
Modular design and multilayer abstractions.


00:19:37.340 --> 00:19:38.700
You can leverage efficient patterns


00:19:38.700 --> 00:19:40.460
to build different parts of the system


00:19:40.460 --> 00:19:42.860
or change them into a flow.


00:19:42.860 --> 00:19:45.140
That sounds pretty interesting, right?


00:19:45.140 --> 00:19:45.980
- Yeah.


00:19:47.660 --> 00:19:51.380
Down here, we have the object mapping.


00:19:51.380 --> 00:19:53.820
We have Beanie, as I just called out,


00:19:53.820 --> 00:19:57.980
an asynchronous Python object document mapper for MongoDB


00:19:57.980 --> 00:20:01.060
based on motor and Pydantic, of course.


00:20:01.060 --> 00:20:03.660
What else we got?


00:20:03.660 --> 00:20:07.340
We have data model code generator,


00:20:07.340 --> 00:20:11.820
which is the foundation of JSON to Pydantic,


00:20:11.820 --> 00:20:13.540
which I know that we talked about before.


00:20:13.540 --> 00:20:16.780
If you're not familiar with JSON to Pydantic.com,


00:20:16.780 --> 00:20:21.500
take some JSON, drop it in there, you get your JSON output.


00:20:21.500 --> 00:20:23.600
Here's the big question though, Brian,


00:20:23.600 --> 00:20:25.640
what version of Pydantic do you get out?


00:20:25.640 --> 00:20:29.500
- I'm guessing not the new one, I don't know.


00:20:29.500 --> 00:20:32.780
- I am as well, it probably needs an update, doesn't it?


00:20:32.780 --> 00:20:36.260
So hopefully that that comes along there, but data model-


00:20:36.260 --> 00:20:38.580
- Well, stick in model in there as an attribute


00:20:38.580 --> 00:20:39.700
and see what happens.


00:20:39.700 --> 00:20:42.140
- Oh yeah, nope, not doing it.


00:20:42.140 --> 00:20:46.060
So data model code generator is the CLI equivalent


00:20:46.060 --> 00:20:48.060
that that thing uses behind the scenes.


00:20:48.060 --> 00:20:51.140
Let's see. GoodConf.


00:20:51.140 --> 00:20:53.140
I don't know how many people know that Pydantic


00:20:53.140 --> 00:20:55.140
has a settings management capability,


00:20:55.140 --> 00:20:58.700
where you can read variables out of environment variables


00:20:58.700 --> 00:21:00.700
and YAML files and so on.


00:21:00.700 --> 00:21:03.500
So GoodConf, as in GoodConfig,


00:21:03.500 --> 00:21:07.460
GoodConf is a thin wrapper over Pydantic settings management.


00:21:07.460 --> 00:21:10.140
So that's pretty cool.


00:21:10.140 --> 00:21:12.140
Get a little bit of a cleaner


00:21:12.140 --> 00:21:14.700
or more opinionated way to work with settings.


00:21:15.820 --> 00:21:20.500
And of course, FastAPI, Django Ninja are listed here


00:21:20.500 --> 00:21:21.660
along with some others.


00:21:21.660 --> 00:21:26.860
And yeah, I think I'll probably leave it there


00:21:26.860 --> 00:21:28.460
as the shadow for all those items.


00:21:28.460 --> 00:21:29.940
But there's a bunch of cool stuff in here.


00:21:29.940 --> 00:21:32.380
Awesome things you might say that people can check out.


00:21:32.380 --> 00:21:35.500
And also, if you have one of these projects


00:21:35.500 --> 00:21:37.080
or you're a super fan of one of these projects


00:21:37.080 --> 00:21:40.720
and it's not listed here, PRs are accepted, I believe.


00:21:40.720 --> 00:21:44.020
- Yeah, cool.


00:21:44.020 --> 00:21:49.020
So that was the next thing in the Pydantic journey of today.


00:21:49.020 --> 00:21:52.980
- Nice.


00:21:52.980 --> 00:21:56.180
Well, I'm gonna go away from Pydantic again,


00:21:56.180 --> 00:22:00.660
and I'm gonna talk about command line interface tools.


00:22:00.660 --> 00:22:03.340
So I like CLIs.


00:22:03.340 --> 00:22:07.760
I kind of spent a lot of time with a terminal open.


00:22:07.760 --> 00:22:12.820
And so I thought this was a fun article from Simon Willison,


00:22:12.820 --> 00:22:15.820
CLI tools hidden in the Python standard library.


00:22:15.820 --> 00:22:19.820
And I think it's also really cool that Simon does a shout


00:22:19.820 --> 00:22:22.660
out to Seth Larsen.


00:22:22.660 --> 00:22:23.500
Hey Seth.


00:22:23.500 --> 00:22:29.140
That Seth pointed out that gzip, the Python gzip module,


00:22:29.140 --> 00:22:31.860
you can use it as a CLI tool,


00:22:31.860 --> 00:22:34.180
especially handy if you're on Windows


00:22:34.180 --> 00:22:36.380
and don't have gzip built in.


00:22:36.380 --> 00:22:39.860
You can say Python-M gzip,


00:22:39.860 --> 00:22:42.860
and you can with a --decompress


00:22:42.860 --> 00:22:45.380
and give it a G zip file and it'll decompress it for you.


00:22:45.380 --> 00:22:47.740
There's a whole bunch of other stuff you can do with it,


00:22:47.740 --> 00:22:51.800
but it's pretty neat, kind of fun.


00:22:51.800 --> 00:22:56.460
So Simon saw this, that Seth pointed this out


00:22:56.460 --> 00:22:58.540
and thought, wonder what other stuff


00:22:58.540 --> 00:23:00.840
is hiding in the standard library.


00:23:00.840 --> 00:23:03.260
So he talks about using rip prep


00:23:03.260 --> 00:23:06.940
to search through the standard library.


00:23:06.940 --> 00:23:09.020
And I think it's kind of fun that he shows you


00:23:09.020 --> 00:23:12.260
how he went about looking for all these things


00:23:12.260 --> 00:23:14.340
and then parsed out some stuff


00:23:14.340 --> 00:23:17.000
'cause he didn't really care about tests


00:23:17.000 --> 00:23:21.240
or turtle or idle because yes,


00:23:21.240 --> 00:23:23.540
we know that those have applications,


00:23:23.540 --> 00:23:26.420
but what's left is quite a few.


00:23:26.420 --> 00:23:28.720
There's quite a few Python modules


00:23:28.720 --> 00:23:31.240
within standard library or packages,


00:23:31.240 --> 00:23:34.880
modules that do these init things


00:23:34.880 --> 00:23:38.660
or have a command line thing.


00:23:38.660 --> 00:23:40.860
And so what's kind of interesting


00:23:40.860 --> 00:23:42.060
is what he's looking for.


00:23:42.060 --> 00:23:47.060
He's looking for packages that have a if name equals main,


00:23:47.060 --> 00:23:50.060
because that little trick of if dunder name


00:23:50.060 --> 00:23:51.420
equals dunder main,


00:23:51.420 --> 00:23:54.780
that means that if it's imported,


00:23:54.780 --> 00:23:57.220
it just runs like a library.


00:23:57.220 --> 00:24:00.880
But if it's not imported, if it's run directly,


00:24:00.880 --> 00:24:02.280
then this will be true.


00:24:02.280 --> 00:24:05.820
And whatever's in there will run as a command


00:24:05.820 --> 00:24:08.460
and you can do the dash M thing.


00:24:08.460 --> 00:24:11.700
And so one of the, a few fun things that he found,


00:24:11.700 --> 00:24:13.680
I did know about the server thing,


00:24:13.680 --> 00:24:15.520
but I always forget about it.


00:24:15.520 --> 00:24:18.560
Python-mhttp.server.


00:24:18.560 --> 00:24:20.440
And you can give it a port.


00:24:20.440 --> 00:24:21.280
- Yeah, that's nice.


00:24:21.280 --> 00:24:23.320
I use that sometimes when things complain


00:24:23.320 --> 00:24:25.320
and trying to work with like JavaScript


00:24:25.320 --> 00:24:27.440
and a static HTML file or something.


00:24:27.440 --> 00:24:30.360
It's like, you need a server for this to work


00:24:30.360 --> 00:24:32.160
'cause it wants to just do forward slash something.


00:24:32.160 --> 00:24:35.880
So I'll just run that and then like open up the file


00:24:35.880 --> 00:24:37.840
right there and then it starts working


00:24:37.840 --> 00:24:39.520
instead of trying to go to a lot of trouble.


00:24:39.520 --> 00:24:41.560
Just run that in the directory you're working on.


00:24:41.560 --> 00:24:42.960
- Yeah, and if you wanna,


00:24:42.960 --> 00:24:44.640
one of the fun things with this is


00:24:44.640 --> 00:24:48.080
if you wanna just learn a little basic HTML,


00:24:48.080 --> 00:24:50.600
maybe JavaScript in CSS,


00:24:50.600 --> 00:24:52.800
you can just use this as a local server


00:24:52.800 --> 00:24:57.000
to just play around with using all three together.


00:24:57.000 --> 00:24:57.920
It's kind of fun.


00:24:57.920 --> 00:24:59.520
- Yeah, or maybe you wanna do PyScript


00:24:59.520 --> 00:25:01.160
and not actually do JavaScript.


00:25:01.160 --> 00:25:02.440
- Oh, yeah.


00:25:02.440 --> 00:25:03.280
Yeah, maybe.


00:25:03.280 --> 00:25:06.560
So let's go through a few more fun things.


00:25:06.560 --> 00:25:11.560
Base64, you can use -m base64 to either encode, decode,


00:25:11.560 --> 00:25:13.600
or both.


00:25:13.600 --> 00:25:16.760
I'm not sure what both at the same time means.


00:25:16.760 --> 00:25:19.280
To try that out, see what it does.


00:25:19.280 --> 00:25:20.800
- Maybe you just get the answer back.


00:25:20.800 --> 00:25:22.560
(laughing)


00:25:22.560 --> 00:25:23.380
- Maybe.


00:25:23.380 --> 00:25:29.680
AsyncIO has, will open up a async REPL,


00:25:29.680 --> 00:25:32.040
which where you can use a wait


00:25:32.040 --> 00:25:34.680
and instead of asyncIO run,


00:25:34.680 --> 00:25:37.440
you can call user weight directly.


00:25:37.440 --> 00:25:38.540
It's just kind of fun.


00:25:38.540 --> 00:25:43.600
Neat to try out async stuff on the REPL.


00:25:43.600 --> 00:25:46.000
That sounds hard, but it might be fun.


00:25:46.000 --> 00:25:49.000
Tokenize just as a fun thing,


00:25:49.000 --> 00:25:54.000
you can use the Python tokenizer on a Python file


00:25:54.000 --> 00:25:57.340
just to see what the tokens look like.


00:25:57.340 --> 00:26:00.160
That's kind of neat.


00:26:00.160 --> 00:26:01.860
AST, I probably would use more.


00:26:01.860 --> 00:26:05.660
So you can do -mast on a Python file


00:26:05.660 --> 00:26:10.660
and it'll give you a printout of the abstract syntax tree,


00:26:10.660 --> 00:26:13.780
which is nice.


00:26:13.780 --> 00:26:15.620
This is super handy, I didn't know about this,


00:26:15.620 --> 00:26:20.540
json.tool, it's a pretty printer for JSON.


00:26:20.540 --> 00:26:23.780
So you can just throw some,


00:26:23.780 --> 00:26:25.820
pipe some JSON into it


00:26:25.820 --> 00:26:28.620
and get some nice formatted output, kind of nice.


00:26:30.080 --> 00:26:32.000
- Yeah, that's really what I wanted to highlight those.


00:26:32.000 --> 00:26:34.160
Calendar, I knew about this a long time ago


00:26:34.160 --> 00:26:36.200
and I've totally forgot about it.


00:26:36.200 --> 00:26:39.720
Python dev dash M calendar will print an ASCII calendar


00:26:39.720 --> 00:26:41.400
of the current year.


00:26:41.400 --> 00:26:42.580
Why would you need this?


00:26:42.580 --> 00:26:44.600
But anyway.


00:26:44.600 --> 00:26:47.080
- Because you can Brian, because you can.


00:26:47.080 --> 00:26:51.640
- I used this way, way, way long ago to try to,


00:26:51.640 --> 00:26:55.120
and then parsed it afterwards to hook up


00:26:55.120 --> 00:27:00.120
a dynamic calendar application with clickable dates.


00:27:00.120 --> 00:27:02.160
It was terrible.


00:27:02.160 --> 00:27:04.760
It was a terrible application, but it was fun.


00:27:04.760 --> 00:27:05.600
Anyway.


00:27:05.600 --> 00:27:06.440
(laughing)


00:27:06.440 --> 00:27:08.000
- That's kind of, I kind of like it though.


00:27:08.000 --> 00:27:09.200
I do kind of like it.


00:27:09.200 --> 00:27:15.600
- So, oh, in NTP, do you use news groups much?


00:27:15.600 --> 00:27:16.960
I don't use news groups.


00:27:16.960 --> 00:27:18.760
- I used to news group, but.


00:27:18.760 --> 00:27:21.840
- Apparently you can do NTP


00:27:21.840 --> 00:27:24.960
and it prints out like some articles.


00:27:24.960 --> 00:27:27.180
Interesting.


00:27:27.180 --> 00:27:29.880
- In case you want to read from 1994.


00:27:29.880 --> 00:27:32.460
(laughing)


00:27:32.460 --> 00:27:34.400
One thing I think would,


00:27:34.400 --> 00:27:36.800
I think it might be kind of cool if somebody had,


00:27:36.800 --> 00:27:42.560
creates a meta package for this kind of stuff


00:27:42.560 --> 00:27:43.860
based on this article.


00:27:43.860 --> 00:27:47.120
So what I mean is if you set an entry point


00:27:47.120 --> 00:27:49.680
in your Python package,


00:27:49.680 --> 00:27:53.000
and you install it into your virtual environment


00:27:53.000 --> 00:27:56.960
or you pipx install it, it becomes a CLI command, right?


00:27:56.960 --> 00:27:59.200
So for example, pyjoke, right?


00:27:59.200 --> 00:28:02.880
I could just go up here and type pyjoke,


00:28:02.880 --> 00:28:05.560
oh, pipx install pyjoke first,


00:28:05.560 --> 00:28:08.080
and it'll give you some kind of,


00:28:08.080 --> 00:28:09.920
it'll just call that function, right?


00:28:09.920 --> 00:28:12.840
Is it jokes perhaps?


00:28:12.840 --> 00:28:14.240
I'm not sure.


00:28:14.240 --> 00:28:17.720
Yeah, so if I type pyjoke after installing a pipx install,


00:28:17.720 --> 00:28:21.280
versus obfuscated reality mappers,


00:28:21.280 --> 00:28:23.320
ORMs can be useful database tools, right?


00:28:23.320 --> 00:28:24.920
So, right.


00:28:24.920 --> 00:28:28.480
But the fact now I have a single command I give


00:28:28.480 --> 00:28:31.400
instead of, you know, Python dash M,


00:28:31.400 --> 00:28:33.660
pyjoke, I just type pyjoke, right?


00:28:33.660 --> 00:28:35.920
So it would be cool if somebody took this


00:28:35.920 --> 00:28:38.880
and created something that I could pipx install


00:28:38.880 --> 00:28:41.160
that gave me every single one of these


00:28:41.160 --> 00:28:44.000
in a more concise way to call it.


00:28:44.000 --> 00:28:46.360
So instead of Python dash M dash, you know,


00:28:46.360 --> 00:28:49.300
calendar, just calendar, I can just type calendar


00:28:49.300 --> 00:28:51.300
and it runs this, right?


00:28:51.300 --> 00:28:55.340
Or I could just type acp.server and it runs that.


00:28:55.340 --> 00:28:59.900
So there's something for people to try to come up with


00:28:59.900 --> 00:29:01.100
a cleaner way.


00:29:01.100 --> 00:29:04.820
There might be some name conflicts.


00:29:04.820 --> 00:29:08.300
So you'd have like for gzip, you might need to pgzip


00:29:08.300 --> 00:29:09.300
or something, right?


00:29:09.300 --> 00:29:12.340
Like that, which would be a little bit annoying, but yeah.


00:29:12.340 --> 00:29:13.860
Anyway, it'd be fun if somebody turned these


00:29:13.860 --> 00:29:16.860
into like a simpler series of commands and just like,


00:29:16.860 --> 00:29:20.180
you got Python, you basically have all these.


00:29:20.180 --> 00:29:21.740
- Yeah, it might be kind of difficult.


00:29:21.740 --> 00:29:24.020
Maybe a fun thing to try


00:29:24.020 --> 00:29:26.540
because you can't just import the module and run it


00:29:26.540 --> 00:29:29.760
because then that part doesn't run.


00:29:29.760 --> 00:29:32.060
So you have to, yeah.


00:29:32.060 --> 00:29:34.180
- Right, you usually have to set up a bunch of entry points


00:29:34.180 --> 00:29:35.980
in your package and then give them names


00:29:35.980 --> 00:29:38.300
and then basically map them over to calling.


00:29:38.300 --> 00:29:41.900
Yeah, but Henry, out in the audience says,


00:29:41.900 --> 00:29:43.940
I thought the point is you didn't have to install anything


00:29:43.940 --> 00:29:44.780
to use these.


00:29:44.780 --> 00:29:46.900
- Right.


00:29:46.900 --> 00:29:48.180
- True, true, true.


00:29:48.180 --> 00:29:50.100
But you have got to make a bunch of aliases


00:29:50.100 --> 00:29:51.800
if you want them real short then.


00:29:51.800 --> 00:29:55.340
Anyway, very cool find, right?


00:29:55.340 --> 00:29:57.020
- Cheat sheet maybe, a cheat sheet.


00:29:57.020 --> 00:29:58.500
- Yes, kind of a cheat sheet.


00:29:58.500 --> 00:30:00.260
Thanks, Simon.


00:30:00.260 --> 00:30:01.080
Thank you, Seth.


00:30:01.080 --> 00:30:01.920
This is cool.


00:30:01.920 --> 00:30:04.100
- All right.


00:30:04.100 --> 00:30:06.460
Well, those are our things.


00:30:06.460 --> 00:30:08.860
Do you have anything extra to share with us?


00:30:08.860 --> 00:30:10.100
- I do have some extras.


00:30:10.100 --> 00:30:11.120
Back to Pydantic.


00:30:11.120 --> 00:30:13.100
(laughing)


00:30:13.100 --> 00:30:15.080
So over at Talk Python Training,


00:30:15.080 --> 00:30:16.640
we have a brand new course,


00:30:16.640 --> 00:30:20.940
a seven hour course for MongoDB


00:30:20.940 --> 00:30:23.760
called MongoDB with Async Python.


00:30:23.760 --> 00:30:24.600
- Oh fun.


00:30:24.600 --> 00:30:27.920
- And the whole idea is it takes Beanie


00:30:27.920 --> 00:30:30.800
and it's kind of a comprehensive introduction to MongoDB


00:30:30.800 --> 00:30:32.820
but approaches it from using Beanie


00:30:32.820 --> 00:30:35.920
which is Pydantic plus Async and Await


00:30:35.920 --> 00:30:39.760
talking to MongoDB, how to use indexes,


00:30:39.760 --> 00:30:41.040
How do you write queries?


00:30:41.040 --> 00:30:42.600
What are the different styles?


00:30:42.600 --> 00:30:47.900
We end up building a FastAPI API around that,


00:30:47.900 --> 00:30:50.440
as well as do load testing with Locust.


00:30:50.440 --> 00:30:52.200
So if you want to kind of see end to end


00:30:52.200 --> 00:30:55.000
how to build a modern Python app


00:30:55.000 --> 00:31:00.000
based on MongoDB and Beanie, check it out.


00:31:00.000 --> 00:31:03.880
Links in the show notes, just talkpython.fm,


00:31:03.880 --> 00:31:07.200
click on courses, and you'll find it over there.


00:31:07.200 --> 00:31:08.640
So I'm really, really excited.


00:31:08.640 --> 00:31:10.160
been working for a long time on this.


00:31:10.160 --> 00:31:12.080
It has an early bird special.


00:31:12.080 --> 00:31:15.240
So for from today for a week,


00:31:15.240 --> 00:31:18.840
you get $10 off or something relative


00:31:18.840 --> 00:31:22.120
in your own currency off if you get it this week


00:31:22.120 --> 00:31:23.600
and then it goes up a little bit next week.


00:31:23.600 --> 00:31:25.040
So really, really fun course.


00:31:25.040 --> 00:31:26.400
There's tons of stuff to learn here.


00:31:26.400 --> 00:31:31.280
People can check it out if they're interested in this.


00:31:31.280 --> 00:31:33.920
And as I said, I was just talking to Roman


00:31:33.920 --> 00:31:36.320
and the Beanie should get its


00:31:36.320 --> 00:31:38.320
- Yeah, and I think that's a really good point.


00:31:38.320 --> 00:31:39.320
I think that's a really good point.


00:31:39.320 --> 00:31:40.320
I think that's a really good point.


00:31:40.320 --> 00:31:41.320
I think that's a really good point.


00:31:41.320 --> 00:31:42.320
I think that's a really good point.


00:31:42.320 --> 00:31:43.320
I think that's a really good point.


00:31:43.320 --> 00:31:44.320
I think that's a really good point.


00:31:44.320 --> 00:31:45.320
I think that's a really good point.


00:31:45.320 --> 00:31:46.320
I think that's a really good point.


00:31:46.320 --> 00:31:47.320
I think that's a really good point.


00:31:47.320 --> 00:31:48.320
I think that's a really good point.


00:31:48.320 --> 00:31:49.320
I think that's a really good point.


00:31:49.320 --> 00:31:50.320
I think that's a really good point.


00:31:50.320 --> 00:31:51.320
I think that's a really good point.


00:31:51.320 --> 00:31:52.320
I think that's a really good point.


00:31:52.320 --> 00:31:53.320
I think that's a really good point.


00:31:53.320 --> 00:31:54.320
I think that's a really good point.


00:31:54.320 --> 00:31:55.320
I think that's a really good point.


00:31:55.320 --> 00:31:56.320
I think that's a really good point.


00:31:56.320 --> 00:31:57.780
- Nice.


00:31:57.780 --> 00:32:01.300
- Another one, did you know that PyPI has a blog?


00:32:01.300 --> 00:32:03.780
- No.


00:32:03.780 --> 00:32:05.220
- It does.


00:32:05.220 --> 00:32:06.900
This one's been sitting around for a little bit.


00:32:06.900 --> 00:32:08.180
I meant to talk about it,


00:32:08.180 --> 00:32:11.700
but it kept getting edged out by more urgent things.


00:32:11.700 --> 00:32:16.380
But back in March, end of March,


00:32:16.380 --> 00:32:20.040
there's now a blog.pypi.org that you can go to.


00:32:20.040 --> 00:32:22.500
So definitely check that out.


00:32:22.500 --> 00:32:24.480
One of the things that's a little bit of a hassle


00:32:24.480 --> 00:32:28.040
is if you take this like blog.pypi.org


00:32:28.040 --> 00:32:31.960
and you drop it into your RSS reader,


00:32:31.960 --> 00:32:34.120
like reader with two E's for me,


00:32:34.120 --> 00:32:35.760
it says there's no blog here.


00:32:35.760 --> 00:32:39.040
Is there no blog here?


00:32:39.040 --> 00:32:42.880
So go to the bottom.


00:32:42.880 --> 00:32:47.880
There's a blog.pypi.org/feed_rss_created.xml.


00:32:47.880 --> 00:32:51.000
That is what you got to put into RSS reader


00:32:51.000 --> 00:32:52.760
if your RSS reader doesn't find it


00:32:52.760 --> 00:32:57.760
'cause there's no meta tag for the RSS capabilities.


00:32:57.760 --> 00:33:01.720
Maybe someone's over there listening,


00:33:01.720 --> 00:33:02.560
go and throw that in,


00:33:02.560 --> 00:33:04.120
make that a little bit quicker and simpler


00:33:04.120 --> 00:33:05.400
for people to find.


00:33:05.400 --> 00:33:07.240
But if you wanna subscribe to it,


00:33:07.240 --> 00:33:10.280
that is the business right there.


00:33:10.280 --> 00:33:12.240
- Well, if you go to, yeah,


00:33:12.240 --> 00:33:15.520
there is a little icon at the bottom right-hand corner,


00:33:15.520 --> 00:33:17.800
little RSS thing.


00:33:17.800 --> 00:33:20.080
So all the way down there.


00:33:20.080 --> 00:33:21.160
Yeah.


00:33:21.160 --> 00:33:22.880
So copy link, is that the same address?


00:33:22.880 --> 00:33:25.440
Yeah, that's the same address I suggested.


00:33:25.440 --> 00:33:26.460
- Cool. - So people, yeah.


00:33:26.460 --> 00:33:28.400
But like if there's a meta tag you can put,


00:33:28.400 --> 00:33:30.480
so like you'll get a little pop-up


00:33:30.480 --> 00:33:35.400
in your different browsers and other things that browse it.


00:33:35.400 --> 00:33:36.880
Say, "Hey, just click here to subscribe


00:33:36.880 --> 00:33:37.920
or to auto detect it."


00:33:37.920 --> 00:33:39.400
Yeah.


00:33:39.400 --> 00:33:40.480
- Cool.


00:33:40.480 --> 00:33:42.000
- Yeah.


00:33:42.000 --> 00:33:42.820
Excellent.


00:33:42.820 --> 00:33:45.680
One, I guess one final thing of my extras.


00:33:45.680 --> 00:33:48.520
Oh my gosh, there's a lot of pop-ups on Twitter these days.


00:33:49.960 --> 00:33:53.200
On Twitter, Luca Schlinge pointed out,


00:33:53.200 --> 00:33:55.680
says, "Wow, Meta," as in Facebook,


00:33:55.680 --> 00:33:59.160
"Meta commits to dedicate three engineering years


00:33:59.160 --> 00:34:01.860
"to implement the removal of the GIL from Python


00:34:01.860 --> 00:34:04.640
"and fix upcoming compatibility and performance issues


00:34:04.640 --> 00:34:06.560
"as a result of that."


00:34:06.560 --> 00:34:08.240
- Oh, awesome.


00:34:08.240 --> 00:34:09.080
- How about that?


00:34:09.080 --> 00:34:13.120
So I believe, I believe this is the,


00:34:13.120 --> 00:34:18.120
703 is the no-GIL work done by Sam Gross, who is at Meta.


00:34:19.800 --> 00:34:22.000
And there's been some hesitation like,


00:34:22.000 --> 00:34:23.440
well, if we adopt this,


00:34:23.440 --> 00:34:27.080
how much things that are based on C and Rust start breaking.


00:34:27.080 --> 00:34:29.400
And so it sounds like,


00:34:29.400 --> 00:34:32.300
you know, with a couple of paragraphs of information


00:34:32.300 --> 00:34:34.600
that they're saying, look, we'll both fix--


00:34:34.600 --> 00:34:36.920
- Just do it anyway, we'll fix it later.


00:34:36.920 --> 00:34:38.400
- Well, I think it's like, we'll fix the Python


00:34:38.400 --> 00:34:41.480
and then maybe, maybe I'm inferring here is like,


00:34:41.480 --> 00:34:45.800
and we'll fix the popular packages based on it


00:34:45.800 --> 00:34:47.320
that might run into trouble.


00:34:47.320 --> 00:34:48.200
I'm not sure.


00:34:48.200 --> 00:34:49.040
- Yeah.


00:34:49.040 --> 00:34:54.040
- But yeah, so basically three years.


00:34:54.040 --> 00:34:56.960
I think they were saying one to two years


00:34:56.960 --> 00:35:00.520
of actual calendar time, but with multiple people


00:35:00.520 --> 00:35:02.940
who are either core developers or very close


00:35:02.940 --> 00:35:05.200
to core developers to make this happen.


00:35:05.200 --> 00:35:07.520
- Cool.


00:35:07.520 --> 00:35:10.480
- Yeah, so that's big news and those are my extras.


00:35:10.480 --> 00:35:15.360
- Nice, I wanted to say congrats to Seth Larson.


00:35:15.360 --> 00:35:17.760
So we mentioned him at the beginning of the show


00:35:17.760 --> 00:35:25.120
a couple of times during the show. Seth is the new security developer in residence. So


00:35:25.120 --> 00:35:33.900
yay, congrats, Seth. So we're linking to an announcement on the PSF blog. And he also


00:35:33.900 --> 00:35:44.280
has a blog announcing the change also, a blog post. So pretty cool. I'm excited to see that.


00:35:44.280 --> 00:35:45.280
So congrats, Seth.


00:35:45.280 --> 00:35:46.520
Yeah, congrats, Seth.


00:35:46.520 --> 00:35:51.680
And there's all this discussion about supply chain vulnerabilities


00:35:51.680 --> 00:35:54.280
and security and all of those things.


00:35:54.280 --> 00:35:57.600
So it's really excellent, and just security in general.


00:35:57.600 --> 00:36:01.160
But thanks for coming on to make things better.


00:36:01.160 --> 00:36:04.320
Yeah, and nice sweatshirt, Seth.


00:36:04.320 --> 00:36:05.480
Cool.


00:36:05.480 --> 00:36:07.940
The other thing I wanted to announce is I'm


00:36:07.940 --> 00:36:11.120
pretty excited about this last bit.


00:36:11.120 --> 00:36:12.800
Python People is live.


00:36:12.800 --> 00:36:13.960
So Python People--


00:36:13.960 --> 00:36:15.600
- Who are these Python people you speak of?


00:36:15.600 --> 00:36:16.960
- Python people.


00:36:16.960 --> 00:36:20.800
So I, you know, the first part of like,


00:36:20.800 --> 00:36:22.700
I kind of, there's a couple of things


00:36:22.700 --> 00:36:24.080
that were inspiring for this.


00:36:24.080 --> 00:36:28.560
So it's a new podcast, pythonpeople.fm.


00:36:28.560 --> 00:36:30.840
So far, there's one episode with Michael Kennedy,


00:36:30.840 --> 00:36:34.360
but there, you, but there's a whole bunch more coming.


00:36:34.360 --> 00:36:38.860
And I used to like mostly just want the tech stuff


00:36:38.860 --> 00:36:41.600
of a tech podcast, but I kind of really liked


00:36:41.600 --> 00:36:43.040
the first part of Talk Python,


00:36:43.040 --> 00:36:44.960
where you just like get to know people.


00:36:44.960 --> 00:36:47.440
And I thought we should do more of that.


00:36:47.440 --> 00:36:51.920
So I wanted to get a podcast together


00:36:51.920 --> 00:36:53.400
where we mostly focus on the people


00:36:53.400 --> 00:36:55.000
and less about the tech.


00:36:55.000 --> 00:36:58.840
So that's what Python People is about.


00:36:58.840 --> 00:37:01.260
- Yeah, we talked for like 45 minutes or something,


00:37:01.260 --> 00:37:03.720
no, 28 minutes and 44 seconds.


00:37:03.720 --> 00:37:08.080
And we almost don't talk about Python at all, right?


00:37:08.080 --> 00:37:08.900
- Yeah, a little bit.


00:37:08.900 --> 00:37:10.440
Yeah, a little bit about what you do.


00:37:10.440 --> 00:37:12.920
So I thought it'd be fun to like pull in like why,


00:37:12.920 --> 00:37:14.660
I mean, everybody knows who you are,


00:37:14.660 --> 00:37:17.560
but for some people, like what is your connection to Python?


00:37:17.560 --> 00:37:19.620
What is your connection to the Python community?


00:37:19.620 --> 00:37:21.440
But then also just more about you.


00:37:21.440 --> 00:37:23.340
Like we learned about your motorcycling


00:37:23.340 --> 00:37:26.500
and about being a pool shark.


00:37:26.500 --> 00:37:27.560
(laughing)


00:37:27.560 --> 00:37:28.720
Who knew?


00:37:28.720 --> 00:37:29.560
- Who knew?


00:37:29.560 --> 00:37:31.600
And we talk about skateboarding with you.


00:37:31.600 --> 00:37:34.120
So there's like a ton of other cool things


00:37:34.120 --> 00:37:35.820
that people might be interested in.


00:37:35.820 --> 00:37:37.880
- Yeah, so check it out, please.


00:37:37.880 --> 00:37:40.640
And that's all I've got for--


00:37:40.640 --> 00:37:42.880
- What if somebody else wants to be a Python people?


00:37:42.880 --> 00:37:44.340
Can they reach out to you?


00:37:44.340 --> 00:37:45.800
Do you want to be a Python person?


00:37:45.800 --> 00:37:49.680
- Yeah, I should put a, like a, be a person or I don't know.


00:37:49.680 --> 00:37:50.520
- Be a person.


00:37:50.520 --> 00:37:53.200
- Oh, maybe be a guest or something.


00:37:53.200 --> 00:37:55.440
Yeah, just reach out to me.


00:37:55.440 --> 00:37:58.280
You don't have to be as well known as Michael


00:37:58.280 --> 00:38:03.280
because who is, but I'd love to have just like everybody on.


00:38:03.280 --> 00:38:05.880
Why not?


00:38:05.880 --> 00:38:06.720
- Yeah, good luck with the show.


00:38:06.720 --> 00:38:07.840
It's off to a good start.


00:38:07.840 --> 00:38:10.240
And it was really fun to be a part of that.


00:38:10.240 --> 00:38:12.220
- Cool.


00:38:12.220 --> 00:38:15.580
All right, you ready for some O'Reilly?


00:38:15.580 --> 00:38:17.820
- Oh yeah, we have a joke.


00:38:17.820 --> 00:38:19.220
- We have a joke.


00:38:19.220 --> 00:38:22.740
So this is part of the O'Reilly book series.


00:38:22.740 --> 00:38:26.020
You know, O'Reilly always has like an animal


00:38:26.020 --> 00:38:27.620
or something on there.


00:38:27.620 --> 00:38:30.420
And so there's the joke series, O'Reilly?


00:38:30.420 --> 00:38:31.860
Question mark?


00:38:31.860 --> 00:38:33.860
It's kind of a riffs on that a little bit.


00:38:33.860 --> 00:38:36.140
This one is Kubernetes for beginners.


00:38:36.140 --> 00:38:37.460
It says, what could go wrong?


00:38:37.460 --> 00:38:42.460
And this is in the dev oops category of tech books.


00:38:42.460 --> 00:38:46.180
And then the cover is, it says containers, that'll fix it.


00:38:46.180 --> 00:38:48.500
And it has that giant evergreen container ship


00:38:48.500 --> 00:38:50.940
stuck sideways in the Suez Canal.


00:38:50.940 --> 00:38:52.140
What could go wrong?


00:38:52.140 --> 00:38:53.260
- Yeah.


00:38:53.260 --> 00:38:57.100
And just the title, Kubernetes for Beginners.


00:38:57.100 --> 00:39:01.820
No, beginners aren't there yet.


00:39:01.820 --> 00:39:03.700
- Yeah, they probably shouldn't be doing Kubernetes,


00:39:03.700 --> 00:39:05.100
but that'll fix it.


00:39:05.100 --> 00:39:05.940
Awesome.


00:39:05.940 --> 00:39:07.540
- You've got a joke for us as well, right?


00:39:07.540 --> 00:39:10.860
- Oh yeah, just a random one I heard the other day.


00:39:10.860 --> 00:39:12.100
I thought it was terrible.


00:39:12.100 --> 00:39:14.200
So I thought I'd share it with the world.


00:39:14.200 --> 00:39:17.940
So five ants rent an apartment together.


00:39:17.940 --> 00:39:20.300
They invite five other ants to share the rent.


00:39:20.300 --> 00:39:21.740
Also, they got tons of room.


00:39:21.740 --> 00:39:24.460
So now they're tenants.


00:39:24.460 --> 00:39:26.820
- Tenants, got it.


00:39:26.820 --> 00:39:27.660
- Tenants, got it.


00:39:27.660 --> 00:39:29.260
- I love it.


00:39:29.260 --> 00:39:31.020
All right, got one more in that vein for you


00:39:31.020 --> 00:39:32.740
since I just installed PyJoke.


00:39:32.740 --> 00:39:37.740
a single key, a single word on the CLI for me.


00:39:37.740 --> 00:39:41.940
So pirates go arg, computer buyers go argv.


00:39:41.940 --> 00:39:45.280
How about that?


00:39:45.280 --> 00:39:46.100
It's pretty bad.


00:39:46.100 --> 00:39:47.720
- Yeah, yeah.


00:39:47.720 --> 00:39:48.800
- But also true.


00:39:48.800 --> 00:39:50.460
They do that.


00:39:50.460 --> 00:39:51.300
- Maybe.


00:39:51.300 --> 00:39:53.780
All right, cool.


00:39:53.780 --> 00:39:55.480
Fun talking with you again.


00:39:55.480 --> 00:39:58.240
Thanks everybody in the interwebs


00:39:58.240 --> 00:40:01.280
and on the YouTubes to watching us.


00:40:01.280 --> 00:40:02.640
- Yeah, thanks everyone.


00:40:02.640 --> 00:40:04.400
Good to be back with you, Brian.


00:40:04.400 --> 00:40:05.340
- Bye.


00:40:05.340 --> 00:40:06.180
- Yeah, bye.


00:40:06.180 --> 00:40:16.180
[BLANK_AUDIO]

