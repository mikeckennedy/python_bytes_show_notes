WEBVTT

00:00:00.001 --> 00:00:01.480
Well, hello Brian.

00:00:02.060 --> 00:00:02.260
Hey.

00:00:03.480 --> 00:00:07.000
Hey, hey, and hello people who are watching live, watching the replay.

00:00:07.370 --> 00:00:09.100
Thanks for being here. Let's kick this off.

00:00:11.460 --> 00:00:13.200
I'll check what date it is. Now we know.

00:00:13.920 --> 00:00:15.760
I've got to check what month it is. I don't even know that, Brian.

00:00:17.780 --> 00:00:22.960
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:23.060 --> 00:00:27.500
This is episode 422, recorded March 3rd, 2025.

00:00:27.800 --> 00:00:28.700
I am Michael Kennedy.

00:00:29.000 --> 00:00:29.980
And I am Brian Okken.

00:00:30.980 --> 00:00:32.740
In this episode is brought to you by us.

00:00:33.260 --> 00:00:35.740
Check out Brian's pytest courses.

00:00:36.020 --> 00:00:38.040
Check out the ones over at Talk Python Training.

00:00:38.220 --> 00:00:41.200
We're up to almost 475 hours.

00:00:42.060 --> 00:00:42.800
275 hours?

00:00:43.260 --> 00:00:43.760
Not that many.

00:00:44.040 --> 00:00:46.220
275 hours of courses over at Talk Python.

00:00:46.300 --> 00:00:47.780
So are there many to choose from there?

00:00:49.580 --> 00:00:52.100
And Brian's book and Patreon supporters and all these things.

00:00:52.120 --> 00:00:52.700
Thank you so much.

00:00:53.860 --> 00:00:58.000
Also, we're continuing to improve and evolve our newsletter

00:00:58.000 --> 00:01:00.500
which gives you, I think, insights into the episode

00:01:00.760 --> 00:01:02.580
that we maybe didn't explicitly call out

00:01:02.580 --> 00:01:04.040
and certainly are not in the show notes.

00:01:04.199 --> 00:01:07.040
So head over to pythonbytes.fm, click on newsletter,

00:01:07.420 --> 00:01:08.000
put in your email.

00:01:08.560 --> 00:01:10.040
We will be kind and gentle to it,

00:01:10.180 --> 00:01:11.200
but we'll send you cool stuff,

00:01:11.860 --> 00:01:14.680
usually the day of or after the day after the show.

00:01:16.000 --> 00:01:18.040
Yeah. So with that said, Brian,

00:01:18.820 --> 00:01:20.040
how do we start our show today?

00:01:22.560 --> 00:01:24.860
- Let's start it with a video, kind of.

00:01:25.780 --> 00:01:27.100
- Wait, isn't this already a video

00:01:27.100 --> 00:01:28.040
if people want to watch it?

00:01:28.620 --> 00:01:29.100
- Yeah, yeah.

00:01:29.940 --> 00:01:30.680
- Very mad at you.

00:01:31.120 --> 00:01:35.500
- Yeah, so I'm trying to add this to the stage.

00:01:35.720 --> 00:01:36.240
What's going on?

00:01:36.350 --> 00:01:38.220
Oh, the wrong, yeah, anyway.

00:01:39.080 --> 00:01:39.660
There we go.

00:01:40.620 --> 00:01:42.780
Technical difficulties that won't make any sense

00:01:42.860 --> 00:01:43.540
to anybody listening.

00:01:44.260 --> 00:01:47.820
So, we don't normally cover video because it's,

00:01:48.600 --> 00:01:49.680
I don't know, I don't know why,

00:01:49.980 --> 00:01:52.880
but I don't watch a lot of Python videos, I guess.

00:01:53.500 --> 00:01:55.840
But this one is a do not miss.

00:01:55.940 --> 00:02:01.200
So Henik put out a video called my 2025 uv based project,

00:02:01.550 --> 00:02:03.940
Python project layout for production apps.

00:02:04.780 --> 00:02:09.100
And I was paid attention to this partly to see

00:02:09.100 --> 00:02:10.780
what was he was up to and I like UV,

00:02:11.600 --> 00:02:14.580
but also this, so this, when you watch it,

00:02:14.780 --> 00:02:18.500
it's his example is a FastAPI app.

00:02:19.200 --> 00:02:22.880
And in his world, it's an app is usually like,

00:02:22.880 --> 00:02:25.900
you know, really a website app.

00:02:26.180 --> 00:02:29.420
And later he's gonna go on to talk about Docker, I think,

00:02:29.620 --> 00:02:33.260
because this is a part one, part one of a series.

00:02:33.600 --> 00:02:35.340
But this one's already enough

00:02:35.460 --> 00:02:36.620
that I think it's really useful.

00:02:37.040 --> 00:02:41.060
And especially in a lot of the, some of the stuff I deal with

00:02:41.320 --> 00:02:46.660
I think of an app as anything that's packaged, kind of.

00:02:47.260 --> 00:02:50.660
Like it's not a package, it's not something you put on PyPI,

00:02:51.280 --> 00:02:54.920
but it's a bunch of your own code that you normally would have used a

00:02:55.340 --> 00:02:59.060
requirements.txt file. And I like his model better.

00:02:59.220 --> 00:03:00.500
So I'm going to jump in.

00:03:00.560 --> 00:03:05.240
I got a couple of tabs because it's kind of hard to like navigate.

00:03:05.800 --> 00:03:09.360
Anyway, snapshot videos. So I stopped them where I wanted to.

00:03:09.940 --> 00:03:14.060
So the video is great. It's about 25 minutes long,

00:03:14.280 --> 00:03:18.280
pretty quick to watch. Here we've got

00:03:19.480 --> 00:03:26.560
the project layout. So his project layout is using a source layout and really there's

00:03:26.560 --> 00:03:32.520
no requirements file. All of the requirements are in the pyproject.toml and instead of a

00:03:32.720 --> 00:03:39.460
custom lock file or one you manually do, he's just recommending that you let uv take care

00:03:39.500 --> 00:03:45.559
of a lot of the project stuff and actually even with, and we'll take a look at a little

00:03:45.560 --> 00:03:47.580
a little bit more what's in pyproject.toml,

00:03:48.260 --> 00:03:50.460
but he's recommending that you go ahead

00:03:50.460 --> 00:03:51.700
and check in the uv lock.

00:03:51.880 --> 00:03:55.420
So if you're letting uv handle your virtual environment,

00:03:55.920 --> 00:03:57.600
it's gonna create a lock file,

00:03:57.840 --> 00:04:02.820
and if you commit that, then uv run later will use that

00:04:02.900 --> 00:04:04.740
and use all of the stuff in the lock file,

00:04:05.260 --> 00:04:07.720
and you, instead of running Python,

00:04:08.500 --> 00:04:12.200
you clone the repo, run uv run on your project,

00:04:12.320 --> 00:04:15.940
and it's gonna grab everything out of the lock file.

00:04:16.200 --> 00:04:17.480
It's just like pin dependencies.

00:04:17.760 --> 00:04:18.239
It's pretty sweet.

00:04:18.540 --> 00:04:20.640
- Yep, I 100% agree with him.

00:04:21.180 --> 00:04:22.200
Check in the uv lock file.

00:04:22.700 --> 00:04:26.060
And then you don't even have to do uv run if you don't want.

00:04:26.100 --> 00:04:27.560
You can just do uv sync,

00:04:27.790 --> 00:04:30.060
and it will also use the pin dependencies in lock file.

00:04:30.180 --> 00:04:32.180
And then, 'cause some systems,

00:04:33.360 --> 00:04:36.500
they require you to run kind of with their setup.

00:04:37.260 --> 00:04:40.220
For example, Pyramid, you need to use PSERV,

00:04:40.660 --> 00:04:44.380
and then it's like configuration file or flask.

00:04:44.640 --> 00:04:46.300
You can do like flask run or Django.

00:04:46.480 --> 00:04:47.760
So if you still want to stick with that,

00:04:47.760 --> 00:04:48.720
you can just do uv sync.

00:04:49.240 --> 00:04:52.000
- So uv sync will grab everything out of the lock file then?

00:04:52.520 --> 00:04:53.340
- Yes, exactly.

00:04:55.120 --> 00:04:56.980
I think it might even create the virtual environment

00:04:57.180 --> 00:04:58.700
though I haven't actually tried that yet.

00:04:58.780 --> 00:04:59.240
- Yeah, it does.

00:04:59.680 --> 00:04:59.800
Yeah.

00:05:00.440 --> 00:05:02.220
If you don't have one already, it'll create it.

00:05:02.360 --> 00:05:07.040
And also if you already had one and it was out of sync,

00:05:07.620 --> 00:05:10.600
like uv sync, that's kind of what the part of the sync does.

00:05:11.160 --> 00:05:13.420
If somebody updated some of the requirements,

00:05:13.680 --> 00:05:15.600
so the uv lock had changed,

00:05:16.200 --> 00:05:19.920
then uv sync will rewrite the virtual environment.

00:05:20.280 --> 00:05:21.180
So. - Nice.

00:05:22.160 --> 00:05:26.240
- And so he's showing also that his version

00:05:26.320 --> 00:05:29.220
of how to specify the Python version

00:05:29.320 --> 00:05:32.360
is to just specify it within your pyproject.toml,

00:05:32.500 --> 00:05:35.340
and uv will grab that and install it if necessary.

00:05:36.580 --> 00:05:40.580
And then, also, an interesting discussion around version,

00:05:40.880 --> 00:05:44.140
because pyproject.toml requires a version,

00:05:44.400 --> 00:05:46.040
but with a lot of applications,

00:05:46.300 --> 00:05:48.540
we don't really utilize the version,

00:05:49.700 --> 00:05:52.160
because it's just code that you're pushing and running.

00:05:52.360 --> 00:05:54.460
So he said, "Just set it.

00:05:54.520 --> 00:05:56.680
"If you don't care about the version, just set it to zero,

00:05:56.920 --> 00:05:59.880
"and then people will realize you're not using it."

00:06:00.739 --> 00:06:01.820
- The world's most common version.

00:06:02.760 --> 00:06:05.179
- Yeah, and then also a discussion

00:06:05.180 --> 00:06:07.780
around the separation of dependency groups

00:06:07.880 --> 00:06:10.840
that came in recently that uv handles nicely

00:06:11.540 --> 00:06:13.240
in PyProject TOML files.

00:06:13.960 --> 00:06:16.300
And that allows you to separate your dependencies

00:06:17.540 --> 00:06:20.280
based on really what the application needs

00:06:20.440 --> 00:06:21.900
versus what you need for development.

00:06:22.580 --> 00:06:26.040
And this will work, then you can run,

00:06:26.080 --> 00:06:28.420
if you're in production, it won't install your,

00:06:29.579 --> 00:06:32.600
like pytest and stuff, but it'll install everything else.

00:06:32.740 --> 00:06:35.520
but when you're creating a virtual environment locally

00:06:35.590 --> 00:06:37.480
to develop, it'll grab those also.

00:06:37.700 --> 00:06:40.800
So very cool to have all of this together.

00:06:41.360 --> 00:06:45.020
And then build system, I didn't really realize

00:06:45.100 --> 00:06:47.300
that you could specify uv as a build backend,

00:06:48.560 --> 00:06:50.280
and I'm gonna have to play with that.

00:06:50.460 --> 00:06:50.980
That's pretty cool.

00:06:52.060 --> 00:06:55.820
So, are you muted?

00:06:58.260 --> 00:06:59.900
- I put Hatchling in mind,

00:07:00.340 --> 00:07:04.420
And I believe several people pointed out that hatchling is the default.

00:07:04.900 --> 00:07:08.060
And the reason that we, when we played with this the very, very first time, it

00:07:08.200 --> 00:07:13.540
didn't show up with any build back in is because we created in application mode.

00:07:13.590 --> 00:07:16.800
But I think if we created in package mode, there's a way to say like, well,

00:07:16.900 --> 00:07:18.360
what really kind of project are you creating?

00:07:18.480 --> 00:07:20.980
Then it specifies the build back in explicitly, I think.

00:07:21.120 --> 00:07:24.920
So anyway, a lot of, a lot of options there, but yeah, very cool.

00:07:25.580 --> 00:07:25.700
Yeah.

00:07:26.600 --> 00:07:29.660
actually just an enjoyable video too.

00:07:29.700 --> 00:07:32.140
I like what he's doing there. So check it out.

00:07:33.680 --> 00:07:41.140
Very nice. Well, let's talk about async and await.

00:07:42.760 --> 00:07:45.740
So there's this cool project called AIO Limiter,

00:07:46.200 --> 00:07:49.660
an efficient implementation of a rate limiter for async I/O.

00:07:49.820 --> 00:07:52.780
And this comes to us from Martin Peters.

00:07:53.980 --> 00:07:56.220
Martin Peters, at least at one point,

00:07:56.300 --> 00:08:01.800
was the most prolific Stack Overflow Python person, period.

00:08:02.940 --> 00:08:03.640
So that was fun.

00:08:04.140 --> 00:08:08.960
And this project is something that

00:08:08.960 --> 00:08:11.660
got created as a result of an answer on Stack Overflow

00:08:11.800 --> 00:08:13.680
by him, so not a big surprise.

00:08:17.020 --> 00:08:18.800
I'll beat on the dead horse a little bit, Brian.

00:08:19.940 --> 00:08:23.460
I feel like there's a big missing piece for async

00:08:23.690 --> 00:08:24.740
and await in Python.

00:08:25.060 --> 00:08:31.500
and that is any sort of mechanism or control or understanding or adjustment or whatever

00:08:31.820 --> 00:08:36.760
of the underlying running of async code in general.

00:08:37.419 --> 00:08:42.280
If I call an async function and I say a way to thing, how does it run?

00:08:42.900 --> 00:08:45.040
Well, you don't know.

00:08:45.740 --> 00:08:48.000
It might be running in an event loop that you've created.

00:08:48.120 --> 00:08:51.500
It might be running in a framework created.

00:08:51.780 --> 00:08:55.900
don't sometimes often most the time let's say you don't get a choice on how

00:08:56.000 --> 00:09:00.880
that loop is created for example if using FastAPI FastAPI creates a loop

00:09:00.900 --> 00:09:04.640
and says here you can use this one hope you like it you know what I mean

00:09:05.260 --> 00:09:12.440
whereas systems like .NET they've got thread pools and asyncio pools and

00:09:12.600 --> 00:09:16.380
contexts and stuff that you can say hey on this one I want you to limit to 10 so

00:09:16.420 --> 00:09:20.039
if you're doing work just do 10 at a time when you're done one allow the

00:09:20.040 --> 00:09:21.460
other ones to come in, otherwise queue them

00:09:21.520 --> 00:09:22.440
and just make them wait, right?

00:09:22.540 --> 00:09:23.660
Stuff like that is kind of missing.

00:09:24.240 --> 00:09:27.520
So all these projects are trying to backfill

00:09:27.640 --> 00:09:30.100
that kind of functionality into Python's async and await.

00:09:31.060 --> 00:09:33.000
And this is cool, so it does give you,

00:09:33.560 --> 00:09:35.040
like suppose you're working on a project

00:09:35.520 --> 00:09:37.160
and you're using an external API,

00:09:37.320 --> 00:09:39.700
the API says you have a rate limit of five per second.

00:09:40.440 --> 00:09:42.620
If you go over that, we're gonna start failing

00:09:43.420 --> 00:09:46.860
and telling you status code 429, too many requests,

00:09:47.120 --> 00:09:48.680
wait however long and try again.

00:09:48.740 --> 00:09:51.100
But that becomes like really janky, right?

00:09:51.820 --> 00:09:53.340
So with this thing, what you can do is I can create

00:09:53.380 --> 00:09:56.140
a rate limiter and say, I'm willing to allow

00:09:56.270 --> 00:09:59.240
a hundred calls within a 30 second window.

00:09:59.440 --> 00:10:02.840
Or the example I gave, five calls within a one second window

00:10:03.060 --> 00:10:03.700
or whatever, right?

00:10:03.880 --> 00:10:04.460
Something like that.

00:10:05.260 --> 00:10:08.100
And then you just put that into a async with block

00:10:08.460 --> 00:10:11.360
and then stuff that happens in that window

00:10:11.560 --> 00:10:12.960
will be limited by this rate limit.

00:10:14.240 --> 00:10:14.380
- Okay.

00:10:15.320 --> 00:10:15.660
- Cool, right?

00:10:15.920 --> 00:10:18.180
So it makes it really easy to handle those kinds of things.

00:10:18.580 --> 00:10:21.760
But often it's not like I'm going

00:10:21.760 --> 00:10:23.380
to make all of the calls here.

00:10:24.160 --> 00:10:24.720
You know what I mean?

00:10:27.160 --> 00:10:30.260
It's I want all the async calls in the system

00:10:30.510 --> 00:10:32.340
to be limited in this way, not the ones

00:10:32.400 --> 00:10:34.380
that I'm controlling the particular function of,

00:10:34.480 --> 00:10:37.140
which is sort of the crux of my complaint

00:10:37.140 --> 00:10:37.700
that I started with.

00:10:38.200 --> 00:10:38.860
But this is nice.

00:10:38.870 --> 00:10:40.680
You create one of these somewhere,

00:10:40.850 --> 00:10:44.180
and then anywhere you use this rate limit as a context

00:10:44.380 --> 00:10:47.840
manager, it is subject to that rate limiting.

00:10:48.080 --> 00:10:49.600
So it doesn't have to be the same function.

00:10:50.100 --> 00:10:52.620
It doesn't have to be all the codes are happening

00:10:52.660 --> 00:10:54.300
at the same time within the block.

00:10:54.760 --> 00:10:58.180
So, you know, that's a pretty nice thing, right?

00:10:58.280 --> 00:11:00.240
As long as you just put that in all the places you need it.

00:11:00.960 --> 00:11:02.940
Like, for example, one of the problems you can do is

00:11:03.380 --> 00:11:04.740
if you're getting too many requests,

00:11:04.740 --> 00:11:05.900
you can overwhelm your database.

00:11:06.200 --> 00:11:10.180
And because you're awaiting and do it asynchronously,

00:11:10.200 --> 00:11:11.900
you could just keep feeding it to the database,

00:11:12.060 --> 00:11:13.440
even if the database is slowing down

00:11:13.540 --> 00:11:14.540
and slowing down and slowing down.

00:11:14.660 --> 00:11:16.000
So like in your data access layer,

00:11:16.200 --> 00:11:20.960
You could just wrap all of your queries in one of these things that say, don't let more

00:11:21.080 --> 00:11:26.280
than, I don't know, 10 per second or whatever is reasonable for your database.

00:11:26.480 --> 00:11:28.780
That's kind of low, but you know what I mean?

00:11:28.860 --> 00:11:30.260
Like you can sort of control that.

00:11:30.740 --> 00:11:36.780
So you might like have one of these rate limiter for your database and then maybe one for an

00:11:36.780 --> 00:11:38.220
external API or…

00:11:38.300 --> 00:11:38.800
Yes, theoretically.

00:11:38.920 --> 00:11:39.720
Yeah, yeah, theoretically.

00:11:39.960 --> 00:11:40.940
And they could be different, right?

00:11:41.340 --> 00:11:41.600
Yeah.

00:11:42.380 --> 00:11:42.780
Okay.

00:11:42.800 --> 00:11:43.380
That makes sense.

00:11:44.020 --> 00:11:44.120
Yeah.

00:11:44.180 --> 00:11:44.520
Anyway.

00:11:45.980 --> 00:11:50.720
kind of cool and people who are worried about trying to solve that problem then

00:11:51.180 --> 00:11:58.100
they can use this as one of the tools there. Computers are so fast sometimes

00:11:58.200 --> 00:12:02.040
we're like it's too fast slow down a little bit. No it's like let's make it

00:12:02.100 --> 00:12:06.080
allowed to do all the work and not wait on any of it like uh usually good

00:12:06.180 --> 00:12:10.300
sometimes bad. Sometimes bad. But the thing on the end doesn't like it.

00:12:12.280 --> 00:12:12.620
Yeah.

00:12:14.320 --> 00:12:17.020
Yeah, out in the audience we got a "Wow, cool," says Aziz.

00:12:17.340 --> 00:12:19.200
"I had this limit problem a lot."

00:12:19.200 --> 00:12:19.660
Awesome.

00:12:20.100 --> 00:12:20.560
Hope it helps.

00:12:21.160 --> 00:12:22.820
Yeah, hope it limits your problems.

00:12:23.840 --> 00:12:24.600
It does limit.

00:12:24.740 --> 00:12:25.580
It will limit your problems.

00:12:26.420 --> 00:12:27.080
What's next?

00:12:27.380 --> 00:12:27.840
That was weak.

00:12:28.200 --> 00:12:30.320
So, I want to talk about SpyStuff.

00:12:32.640 --> 00:12:37.380
So Lucas Lange wrote an article about SpyStuff.

00:12:37.800 --> 00:12:41.380
a peek into a possible future of Python in the browser.

00:12:44.980 --> 00:12:47.020
It's kind of a fun article also,

00:12:47.160 --> 00:12:48.280
but a great picture as well.

00:12:48.340 --> 00:12:49.360
Some cool picture of the mountains.

00:12:49.780 --> 00:12:49.960
Anyway.

00:12:55.239 --> 00:12:58.340
I trust his opinion because of his involvement

00:12:58.340 --> 00:12:59.240
with Python and everything,

00:12:59.440 --> 00:13:01.920
but this is interesting about a lot of the

00:13:02.540 --> 00:13:05.240
core Python people really involved with

00:13:05.460 --> 00:13:06.620
thinking about the web.

00:13:07.280 --> 00:13:10.660
So there's a section about looking back on,

00:13:12.220 --> 00:13:14.080
I haven't read this, or seen this,

00:13:14.180 --> 00:13:16.140
but apparently there was a Gary Bernhardt talk

00:13:16.260 --> 00:13:18.200
about the birth and death of JavaScript.

00:13:18.500 --> 00:13:19.620
I'll have to go back and look at that.

00:13:20.880 --> 00:13:22.920
And then, but basically talking about the history

00:13:23.020 --> 00:13:23.700
of Python--

00:13:23.820 --> 00:13:24.260
- Wait, wait, wait, wait.

00:13:24.480 --> 00:13:27.720
If you have not seen the birth and death of JavaScript,

00:13:28.740 --> 00:13:30.100
it needs to go to the top of your list.

00:13:30.380 --> 00:13:33.480
The birth and death of JavaScript is a seminal video

00:13:33.660 --> 00:13:36.300
that is both hilarious and very insightful.

00:13:36.880 --> 00:13:37.980
Okay, well-- - In the JavaScript

00:13:38.050 --> 00:13:38.860
is part of the joke.

00:13:39.500 --> 00:13:40.820
- Okay, JavaScript.

00:13:41.600 --> 00:13:44.920
All right, well, then he goes on to talk about Pyodide

00:13:44.920 --> 00:13:51.620
and other things, and using NumPy and Cython and stuff.

00:13:52.640 --> 00:13:59.500
But the real thrust here is a new research project

00:13:59.660 --> 00:14:03.880
called Spy, S, capital S, capital P, lower Y, I guess.

00:14:04.940 --> 00:14:06.080
So that's Spy stuff.

00:14:07.560 --> 00:14:13.440
It says, the article says the SPI is a research project in its early stages at the moment.

00:14:13.680 --> 00:14:16.920
Don't attempt to use it yet unless you plan to contribute.

00:14:17.160 --> 00:14:18.640
But maybe you do plan to contribute.

00:14:20.080 --> 00:14:26.160
Both incomplete implementation wise and design wise, but so early stages.

00:14:26.480 --> 00:14:27.880
But it sounds pretty cool.

00:14:28.040 --> 00:14:30.060
So there's this, I like the idea.

00:14:30.300 --> 00:14:35.120
So there's this, I'm going to jump down to the demo and see if we can get it to play.

00:14:38.100 --> 00:14:41.320
Oh, had video sound too, but I don't think you hear that.

00:14:41.460 --> 00:14:46.520
But anyway, there's a demo of it working of some shapes shifting around and that's

00:14:46.620 --> 00:14:50.980
actually running in the browser already, but you just can't, I guess it's not

00:14:51.000 --> 00:14:51.480
complete yet.

00:14:51.760 --> 00:14:57.340
But, this, this idea of having, having things that look like Python.

00:14:57.580 --> 00:15:02.400
So when you're, when you're, there's like blue code and red code is the idea.

00:15:02.800 --> 00:15:05.640
And the blue code is stuff that just like acts like Python.

00:15:06.899 --> 00:15:09.460
And that's great for debugging and stuff.

00:15:09.720 --> 00:15:12.180
And because people are used to writing in Python.

00:15:12.840 --> 00:15:14.900
And then there's a redshift model of,

00:15:15.180 --> 00:15:17.060
'cause that's what we do a lot is like,

00:15:17.430 --> 00:15:18.860
whether we should compile it or not.

00:15:19.380 --> 00:15:24.920
But this will like pre-compute a lot of the stuff

00:15:25.020 --> 00:15:27.780
that's blue into a pre-compiled version.

00:15:28.190 --> 00:15:31.599
Anyway, all the little compilation parts

00:15:31.600 --> 00:15:32.900
to make things run faster.

00:15:33.560 --> 00:15:35.940
But I really like the idea that you've got a level

00:15:36.080 --> 00:15:39.140
where you're running it just as pure Python

00:15:39.360 --> 00:15:43.360
and then you can deploy it and it runs as a compiled part.

00:15:43.720 --> 00:15:47.220
So anyway, I'm probably getting this wrong at early stages,

00:15:47.400 --> 00:15:49.060
but we've got links to this article

00:15:49.240 --> 00:15:50.980
and then to the Spy Project itself,

00:15:52.280 --> 00:15:54.900
which a lot of activity just recently.

00:15:55.140 --> 00:15:58.060
So anyway, I like that.

00:15:58.320 --> 00:16:00.340
And mostly, I don't know why I brought this up.

00:16:05.459 --> 00:16:08.220
the story of Python in the web browser better and better.

00:16:11.559 --> 00:16:20.520
I also bookmarked this article as something super interesting that might be worth reading up on, so thanks for covering it.

00:16:21.080 --> 00:16:22.520
Yeah, if you've got a deeper...

00:16:22.520 --> 00:16:23.480
We're on the verge.

00:16:23.520 --> 00:16:25.560
You mentioned we could bring it up later again as well.

00:16:27.040 --> 00:16:29.760
Yeah, yeah. It's early days, so maybe there'll be more news on it.

00:16:30.620 --> 00:16:34.620
I'm very excited about the possibility of Python in the browser.

00:16:36.460 --> 00:16:41.760
It'll uncork some amazing stuff if that really gets running seamlessly.

00:16:43.600 --> 00:16:51.940
And really, you're saying in the browser, but really what we're also meaning is that if we could not have different front-end and back-end languages,

00:16:52.820 --> 00:16:55.680
we could do all the dynamic front-end stuff with Python.

00:16:55.760 --> 00:17:03.220
Yep. Exactly. Exactly. Like, so I think that the browser manufacturers could do

00:17:03.360 --> 00:17:11.000
significantly more to make this better. Yeah. For, for example, every one of them

00:17:11.079 --> 00:17:16.319
has ships a JavaScript runtime that's optimized, right? Not a single one of

00:17:16.319 --> 00:17:23.440
them ships the WebAssembly version of Ruby or the WebAssembly version of C

00:17:23.439 --> 00:17:29.040
Python, you know, Pyodide or the WebAssembly version of.NET for Blazor or all these things.

00:17:29.170 --> 00:17:33.360
And so all of those projects are like, well, it'd be great to use this, but it's really

00:17:33.500 --> 00:17:36.560
slow to download the whole runtime on each page separately.

00:17:38.040 --> 00:17:45.200
Every browser could say, we will provide and keep up to date as part of our binaries or

00:17:45.240 --> 00:17:50.480
just off of the internet or whatever as you download it, a shared Python runtime, a shared

00:17:50.480 --> 00:17:54.240
Ruby runtime as shared .NET runtime and so on.

00:17:55.540 --> 00:17:56.680
And they don't, right.

00:17:56.900 --> 00:18:01.460
But all of these complaints about, well, the web front end is too slow

00:18:01.540 --> 00:18:05.640
because you've got to download all this stuff like yes, you do now, but it

00:18:05.730 --> 00:18:09.500
could theoretically be that they say, well, we're going to support like an

00:18:09.780 --> 00:18:13.660
open sort of management of these, these binary, these WebAssembly runtimes

00:18:13.680 --> 00:18:14.640
that you might need to download.

00:18:15.160 --> 00:18:15.220
Sure.

00:18:15.220 --> 00:18:20.460
The extras you've got to download every time like JavaScript, but the, the

00:18:20.460 --> 00:18:26.100
We'll like update that with our browser or just as it changes on the web.

00:18:26.240 --> 00:18:26.980
I wish they would do that.

00:18:29.740 --> 00:18:30.060
Right.

00:18:30.140 --> 00:18:31.040
Maybe you do it for JavaScript.

00:18:31.880 --> 00:18:33.060
I mean, come on now.

00:18:33.580 --> 00:18:33.800
Right.

00:18:33.920 --> 00:18:36.200
It's like, it sounds crazy, but at the same time they do it for

00:18:36.380 --> 00:18:38.060
JavaScript and they write their own.

00:18:38.620 --> 00:18:38.900
All right.

00:18:39.180 --> 00:18:40.220
They wouldn't even have to write their own.

00:18:40.220 --> 00:18:42.980
They just got to allow the run of random others.

00:18:43.120 --> 00:18:43.200
Okay.

00:18:43.860 --> 00:18:44.320
Enough of that.

00:18:44.480 --> 00:18:46.400
Let's talk about reloading stuff in the browser instead.

00:18:46.700 --> 00:18:47.260
That sounds fun.

00:18:47.560 --> 00:18:49.780
So there's two projects I want to tell you about.

00:18:50.540 --> 00:18:54.360
One is the big heavyweight does so much stuff

00:18:54.420 --> 00:18:56.380
to help you write web applications,

00:18:57.360 --> 00:19:00.760
type in the editor, and have that stuff magically change.

00:19:01.380 --> 00:19:03.720
For example, by default, if I run a Flask app

00:19:04.620 --> 00:19:05.720
and I go over to the,

00:19:07.040 --> 00:19:08.620
I run it and I open it up in a browser

00:19:09.180 --> 00:19:10.440
and I see the page I'm working on,

00:19:10.520 --> 00:19:12.780
and then I go over and I edit the Jinja template,

00:19:13.480 --> 00:19:15.860
and I hit save, and I refresh the browser,

00:19:17.360 --> 00:19:24.780
nothing happens. I have to go back to Flask, restart Flask, go back to the browser, reload

00:19:24.840 --> 00:19:29.460
the browser, now I can see my changes. You can level that up one by going to Flask and say you're

00:19:29.540 --> 00:19:36.000
running into bug mode, so if you see any changes, please rerun Flask and reload the templates if I

00:19:36.080 --> 00:19:40.760
edit the templates. Then you can just edit your thing, save it, go over to your browser, hit

00:19:40.980 --> 00:19:45.840
refresh, see the changes. But what would be nicer if I could have like two-thirds of my screen be

00:19:45.840 --> 00:19:51.060
be my editor. One third of my screen be the web browser. And as I type, I see

00:19:51.180 --> 00:19:56.040
stuff just changing on the page. So if I put a CSS class on a thing, I don't have

00:19:56.100 --> 00:20:00.020
to go to the other app and do anything. It just literally just the changes that

00:20:00.040 --> 00:20:04.780
apply like every second or so, right? So that's what this reloadium thing is. But

00:20:04.840 --> 00:20:10.100
it does a lot. So I want to put this out there for people as a cool option. I'm

00:20:10.200 --> 00:20:15.820
not sure I'm gonna put it out there as a recommendation yet. So let me tell you. So

00:20:15.820 --> 00:20:20.460
not just do the experience I told you about, but it will actually rerun every

00:20:21.120 --> 00:20:25.600
function. If you make a change to a function, it will rerun it and you can

00:20:25.700 --> 00:20:32.820
actually have it doing like live profiling. So as you type there,

00:20:32.880 --> 00:20:38.300
it'll give you profiled output of the thing and so on. So if you kind of want

00:20:38.340 --> 00:20:45.800
to explore it, it gives you like that idea more broadly. So it works there. It

00:20:45.800 --> 00:20:52.220
So you can actually see a visual representation of like the performance time and how it's running and reworking and so on

00:20:53.040 --> 00:20:54.220
Okay, so that's pretty neat

00:20:55.460 --> 00:20:58.500
Comes with an AI thing. I'm gonna skip that. I don't know what that is or care

00:20:59.500 --> 00:21:00.160
it has

00:21:01.300 --> 00:21:07.640
Yeah, so generally if you make a change to a function it will re-execute the current function providing immediate feedback

00:21:08.420 --> 00:21:11.120
And if there's an error doesn't die it just goes well

00:21:11.900 --> 00:21:14.780
Okay, once you fix it things are going to be good and it'll start working again

00:21:14.780 --> 00:21:17.860
So it's kind of durable to that, you know.

00:21:19.020 --> 00:21:22.180
And it'll refresh files throughout the entire project,

00:21:22.320 --> 00:21:23.080
looking at dependencies.

00:21:23.320 --> 00:21:25.140
So if I make a change to like a one bit,

00:21:25.640 --> 00:21:27.140
then it'll change the others, you know,

00:21:27.220 --> 00:21:28.320
like with the import or whatever.

00:21:29.220 --> 00:21:32.540
For Django, it does exactly what I was telling you,

00:21:32.620 --> 00:21:36.660
like as you type, not just as you type HTML,

00:21:36.860 --> 00:21:38.000
but as you type Python.

00:21:38.860 --> 00:21:41.780
So the example they have here is they're doing a query

00:21:41.780 --> 00:21:44.340
for all objects and then they slice it to do a limit,

00:21:44.840 --> 00:21:46.460
paging and limiting type of business.

00:21:47.000 --> 00:21:50.640
And as they change the numbers in the slice in Python,

00:21:51.260 --> 00:21:54.160
the web browser is automatically updating the results

00:21:54.280 --> 00:21:55.040
without them touching it.

00:21:55.580 --> 00:21:56.380
- That's pretty cool.

00:21:56.920 --> 00:21:57.940
- Yeah, it's pretty cool, right?

00:21:59.060 --> 00:22:02.100
Similarly for Flask, it automatically reloads Flask.

00:22:02.540 --> 00:22:05.740
But again, it says, look, it'll hot reload the Flask app.

00:22:06.620 --> 00:22:09.500
But if you just set Flask debug to be true,

00:22:10.260 --> 00:22:12.400
Flask will already do that, you know what I mean?

00:22:13.800 --> 00:22:17.040
So the one thing it doesn't do is it doesn't refresh the page

00:22:17.070 --> 00:22:18.220
as you type on one side,

00:22:18.900 --> 00:22:20.840
the stuff on the right doesn't change, right?

00:22:21.540 --> 00:22:24.020
Another thing it does, it'll, for SQLAlchemy,

00:22:24.160 --> 00:22:26.520
because it's like running functions over and over and over,

00:22:27.360 --> 00:22:29.900
it might start to do insert, insert, insert to the database.

00:22:30.100 --> 00:22:33.340
So it does these auto runs and transactions that roll back

00:22:33.340 --> 00:22:35.160
so it doesn't tweak the database.

00:22:35.880 --> 00:22:36.740
- Oh, interesting.

00:22:37.320 --> 00:22:39.740
Yeah, and it also does hot reload for pandas.

00:22:41.260 --> 00:22:43.900
So if you were messing with your data frame or things like that,

00:22:44.200 --> 00:22:46.440
it'll just automatically be updating as you type.

00:22:48.360 --> 00:22:49.780
All right, pretty interesting, right, Brian?

00:22:50.340 --> 00:22:50.500
Yeah.

00:22:51.240 --> 00:22:52.420
Yeah, I don't know if I talked about it before,

00:22:52.520 --> 00:22:56.340
but just since people might want a less intrusive version of that.

00:22:57.260 --> 00:23:00.020
So I have this project called Server Hot Reload over on GitHub.

00:23:00.840 --> 00:23:02.500
And it's a single JavaScript file.

00:23:03.360 --> 00:23:07.440
And if you just include the JavaScript file in your page,

00:23:08.390 --> 00:23:11.840
it will give you the same functionality for web apps

00:23:12.000 --> 00:23:13.240
that will reload the template.

00:23:14.940 --> 00:23:18.920
So for example, if you just include the JavaScript

00:23:19.160 --> 00:23:21.140
at the top of the page, and then in Flask,

00:23:21.140 --> 00:23:24.220
if you run it with Flask debug, or Pyramid automatically

00:23:24.460 --> 00:23:27.820
reloads in debug mode, you can set that in the config file.

00:23:27.920 --> 00:23:30.420
And I'm sure you can do similar stuff with Django.

00:23:31.080 --> 00:23:34.820
And then you just browse on one side, code on the other,

00:23:34.900 --> 00:23:36.840
and you just start typing, and off it goes.

00:23:36.900 --> 00:23:38.420
And even detects if you set it up right,

00:23:38.430 --> 00:23:41.180
or even like reload the page if you change an image

00:23:42.080 --> 00:23:44.520
that was being used, and things like that.

00:23:44.640 --> 00:23:47.860
So, super cool, but this one, it doesn't go all crazy.

00:23:47.870 --> 00:23:51.580
It doesn't require an IDE plugin and all that kind of stuff.

00:23:51.680 --> 00:23:54.460
Basically what it does is it looks at the response

00:23:54.540 --> 00:23:57.860
from the server and says, is the hash of the HTML changed?

00:23:58.180 --> 00:23:59.600
If yes, reload the page.

00:24:00.320 --> 00:24:02.280
If it's not changed, then don't reload the page,

00:24:02.360 --> 00:24:02.900
that kind of thing.

00:24:04.300 --> 00:24:08.340
So anyway, two ways to basically work in your editor,

00:24:09.000 --> 00:24:12.300
start typing, and having some kind of output web

00:24:12.400 --> 00:24:14.360
or in reloading other places.

00:24:15.060 --> 00:24:17.020
So it's automatically changing as you type,

00:24:17.100 --> 00:24:18.360
so you don't have to manage that.

00:24:18.400 --> 00:24:19.320
You're just like, oh, what's this class?

00:24:19.380 --> 00:24:20.180
Oh, that looks really great.

00:24:20.300 --> 00:24:21.660
No, we need more padding here, da, da, da.

00:24:21.800 --> 00:24:22.180
Off it goes.

00:24:23.340 --> 00:24:27.559
So the server one probably doesn't do the--

00:24:27.560 --> 00:24:28.720
like if you change Python?

00:24:30.880 --> 00:24:31.700
- Technically, no.

00:24:32.020 --> 00:24:33.020
It doesn't do that.

00:24:33.300 --> 00:24:35.900
However, if you set Flask to do that automatically,

00:24:36.580 --> 00:24:38.800
and then it re-requests the page, then yes, it does.

00:24:38.830 --> 00:24:39.280
You know what I mean?

00:24:39.400 --> 00:24:40.080
- Okay, got it.

00:24:40.420 --> 00:24:43.420
- So if you're willing to use the framework tools,

00:24:43.460 --> 00:24:43.900
then it does.

00:24:44.520 --> 00:24:44.720
- Okay.

00:24:45.740 --> 00:24:46.600
Okay, very good.

00:24:47.000 --> 00:24:47.320
Cool. - Yeah.

00:24:47.900 --> 00:24:49.620
But it's nowhere near as intense,

00:24:49.710 --> 00:24:51.520
which I think for some people is a drawback,

00:24:51.580 --> 00:24:54.620
and other people is a plus, depending on where you are.

00:24:55.920 --> 00:24:57.160
- Okay, nice.

00:24:57.440 --> 00:24:59.740
>> All right. That's it for all of our items, isn't it?

00:25:00.240 --> 00:25:02.040
>> Yeah, it is.

00:25:02.240 --> 00:25:04.180
>> Well then, what have you got for extras?

00:25:05.360 --> 00:25:11.160
>> I got just a pet project of mine that I wanted to talk about.

00:25:12.360 --> 00:25:14.720
So the complete pytest course has been out for a while,

00:25:15.500 --> 00:25:20.840
and there's a couple of things about it that I'd really like to change.

00:25:20.940 --> 00:25:21.880
So I'm working on some changes.

00:25:22.540 --> 00:25:25.440
First of all, if you go and look at it,

00:25:25.480 --> 00:25:27.420
It says there's 162 lessons.

00:25:28.040 --> 00:25:29.120
That seems a little scary.

00:25:29.660 --> 00:25:33.320
And the reason is because I've chopped it all up into,

00:25:33.700 --> 00:25:35.280
so there's 16 chapters in the book.

00:25:35.460 --> 00:25:36.820
The course covers the entire book.

00:25:37.500 --> 00:25:38.200
16 chapters.

00:25:39.480 --> 00:25:42.740
Each video covers a section of a chapter.

00:25:43.340 --> 00:25:47.780
And that's where, plus welcome videos and stuff.

00:25:47.840 --> 00:25:49.480
That's where the 162 comes in.

00:25:50.140 --> 00:25:53.760
But that's a little, there's actually 162 videos,

00:25:53.860 --> 00:25:54.960
which is a little intimidating,

00:25:55.960 --> 00:25:58.300
especially if you're looking at one

00:25:58.840 --> 00:26:00.440
and you kind of like, there's a lot here.

00:26:02.000 --> 00:26:03.420
But I mean, it's all good.

00:26:03.640 --> 00:26:06.700
If you like to go in just like a few minutes at a time,

00:26:07.380 --> 00:26:08.020
that's great.

00:26:08.660 --> 00:26:11.320
But some people wanna just chunk through an entire chapter

00:26:11.480 --> 00:26:12.900
in like a lunch break or something.

00:26:13.560 --> 00:26:16.940
So the alternate version that I'm working on

00:26:17.120 --> 00:26:20.720
is chopping this up into just chapters.

00:26:20.970 --> 00:26:22.920
So most chapters will be one video.

00:26:24.379 --> 00:26:27.660
And then you can just chunk through,

00:26:27.920 --> 00:26:29.180
like just watching one video,

00:26:29.180 --> 00:26:30.580
you can watch it in a weekend,

00:26:30.780 --> 00:26:33.820
or not a weekend, in like 20 minutes or something like that.

00:26:34.280 --> 00:26:35.700
There's a couple chapters,

00:26:36.140 --> 00:26:38.760
chapter two and chapter three are pretty big,

00:26:38.840 --> 00:26:41.060
writing test functions and then fixtures,

00:26:42.020 --> 00:26:42.800
pretty big concepts.

00:26:43.180 --> 00:26:44.140
So they're a little longer,

00:26:44.140 --> 00:26:46.420
so I'm chopping those not into one video,

00:26:46.720 --> 00:26:49.160
but like three videos.

00:26:50.340 --> 00:26:59.660
And so when I get all done, the new version will be not 162 lessons, but like 20 lessons

00:26:59.720 --> 00:27:00.460
or something like that.

00:27:01.980 --> 00:27:05.800
And then I'll probably make that the default and I'll just have both of them available

00:27:06.000 --> 00:27:12.080
because some people might like the little more granularity and it's not more effort

00:27:12.120 --> 00:27:13.440
on me to have both of them around.

00:27:13.580 --> 00:27:15.560
So they'll both be around.

00:27:15.950 --> 00:27:16.880
Anyway, that's what I'm up to.

00:27:18.410 --> 00:27:18.540
Cool.

00:27:19.100 --> 00:27:20.960
I like the small little videos.

00:27:21.540 --> 00:27:23.700
I think it's a way better reference material.

00:27:23.860 --> 00:27:28.020
You wouldn't have to go like, "Wait, wasn't that 18-minute video the thing I wanted?"

00:27:28.280 --> 00:27:29.660
Yeah, that's the benefit.

00:27:30.120 --> 00:27:37.500
The other thing is I like to, for videos, I like to probably set them at like 1.2 speed or 1.3 speed the first time,

00:27:37.820 --> 00:27:42.400
or 1.25, maybe 1.4, to get an overview really quickly.

00:27:43.320 --> 00:27:47.340
And you have to reset that for every video, and that's somewhat a little annoying.

00:27:47.340 --> 00:27:48.120
Wow, that's a hassle.

00:27:49.480 --> 00:27:50.160
That is a hassle.

00:27:50.960 --> 00:27:52.280
All right, well, let's see what I got for extras.

00:27:52.380 --> 00:27:54.320
I got an oldie, something fun here.

00:27:56.500 --> 00:27:59.980
So there was a Hacker News thread or Reddit thread.

00:28:01.040 --> 00:28:02.040
I'm going to go with Hacker News.

00:28:02.480 --> 00:28:04.400
Pretty sure it was Hacker News talking about, hey,

00:28:04.440 --> 00:28:11.360
could some people recommend some cool, legit programmer

00:28:11.700 --> 00:28:12.600
fiction books?

00:28:13.940 --> 00:28:18.480
Right? Like I want a spy thriller that has to do with programming,

00:28:18.680 --> 00:28:19.780
but that's not stupid.

00:28:20.140 --> 00:28:22.660
Right? It's not like, "Whoa, this is VB6. I know that.

00:28:23.000 --> 00:28:24.060
I'm going to track their IP."

00:28:24.060 --> 00:28:25.580
Like, you know what? That's not how it works.

00:28:26.420 --> 00:28:29.600
More Mr. Robot, less Jurassic Park or whatever that was.

00:28:29.600 --> 00:28:30.120
I can't remember.

00:28:32.220 --> 00:28:34.000
So, the book that I thought was really cool,

00:28:34.000 --> 00:28:36.100
I'll give a shout out to, is by Mark Russinovich,

00:28:36.100 --> 00:28:37.300
who is the CTO of Azure.

00:28:37.640 --> 00:28:40.120
And apparently I bought this book in 2012, just to give you a sense.

00:28:40.140 --> 00:28:42.920
So it's not brand new, but it is a super cool series.

00:28:44.000 --> 00:28:45.020
As long as you keep in mind,

00:28:45.120 --> 00:28:47.640
like it's computer world was 2012.

00:28:48.940 --> 00:28:50.500
So people can check that out if they're interested.

00:28:51.440 --> 00:28:53.500
Also, Warp on Windows.

00:28:53.920 --> 00:28:56.580
I'm a big fan of Warp, the terminal.

00:28:56.980 --> 00:28:59.120
It's been working out super, super well.

00:28:59.520 --> 00:29:01.760
I tried Ghost-tee-tee or Ghost-tee-tee

00:29:01.840 --> 00:29:03.120
or whatever you say that.

00:29:04.440 --> 00:29:05.980
Just, I cannot do it.

00:29:06.100 --> 00:29:06.760
I can't do it.

00:29:06.840 --> 00:29:10.120
Like it doesn't even let you like select

00:29:10.120 --> 00:29:15.420
hotkeys and stuff. It just puts like control H and stuff in there and until you can work

00:29:15.480 --> 00:29:22.540
with it as an editor. No, I can't do it. So, I mean, I know there's some way like you can

00:29:22.580 --> 00:29:29.160
hold shift and arrow, but you can't do like control shift arrow to do like word by word

00:29:29.700 --> 00:29:32.900
and you can't do like you can do a home, but you can't do like shift. These are like really

00:29:32.980 --> 00:29:36.520
weird like editing and stuff where like some of it just starts putting escape characters

00:29:36.520 --> 00:29:37.820
into the thing.

00:29:38.980 --> 00:29:42.440
I don't remember exactly what it was because when I saw it, I was like, "Okay, we'll come

00:29:42.460 --> 00:29:43.480
back to this some other time."

00:29:43.740 --> 00:29:48.160
Anyway, if you're on Windows and you're looking for a better terminal, and I know Windows

00:29:48.220 --> 00:29:55.780
has fewer options and less good options than the other places for a variety of terminals,

00:29:55.850 --> 00:29:59.820
like there's Windows Terminal and then, I don't know, is there anything else?

00:29:59.880 --> 00:30:00.160
I'm not sure.

00:30:00.220 --> 00:30:01.540
There's definitely Command Prompt.

00:30:02.270 --> 00:30:04.580
Well, PowerShell runs within Windows Terminal.

00:30:04.840 --> 00:30:10.400
You can run Git Bash or PowerShell or whatever the DOS-like stuff.

00:30:10.440 --> 00:30:12.200
You can run all that in Windows Terminal.

00:30:12.280 --> 00:30:13.120
>> All right. Okay.

00:30:13.240 --> 00:30:17.160
>> Right. You can do the same in Warp.

00:30:17.220 --> 00:30:18.620
You can choose, I want PowerShell,

00:30:18.700 --> 00:30:20.360
do I want Git Bash or whatever.

00:30:21.640 --> 00:30:24.500
But the thing that is the outer bit of it,

00:30:25.320 --> 00:30:28.200
the app itself, there's not many options.

00:30:28.340 --> 00:30:30.120
So this is a cool thing that people can check out.

00:30:30.180 --> 00:30:31.460
I'll link to the video because it's fun,

00:30:31.640 --> 00:30:33.520
but you just go to warp.dev or wherever it is.

00:30:33.880 --> 00:30:38.060
Okay, our friends over at Teaching Python Podcast,

00:30:39.960 --> 00:30:46.660
they are participating in being part of the PyCon 2025 Education Summit,

00:30:48.660 --> 00:30:51.740
and they're pointing out that, hey, hey, hey,

00:30:52.300 --> 00:30:59.680
the applications are going to be, you know, sending a proposal very, very soon.

00:30:59.880 --> 00:31:03.840
So that was, I think, last Friday, and today is Monday.

00:31:04.040 --> 00:31:05.940
So it just recently opened up, and they said,

00:31:05.940 --> 00:31:08.160
"The main theme is, in the age of AI,

00:31:08.560 --> 00:31:10.700
"how do we maintain the creative, empathetic,

00:31:10.820 --> 00:31:12.240
"and critical thinking skills we need

00:31:12.240 --> 00:31:14.060
"to make us human and great coders?

00:31:14.440 --> 00:31:15.040
"We wanna know."

00:31:15.040 --> 00:31:17.840
And so there's a whole bunch of ideas around this.

00:31:17.980 --> 00:31:21.340
So we've got Kelly and Sean,

00:31:21.520 --> 00:31:23.440
and a bunch of other people participating in this.

00:31:23.540 --> 00:31:26.780
So if that resonates with you, check it out.

00:31:27.560 --> 00:31:32.040
No, I was just chuckling because even before AI, we hadn't figured that out as far as I could tell.

00:31:33.120 --> 00:31:37.300
Yeah, I don't really know the answer. So I'm gonna ask ChatGPT, I'll get back to you. Okay.

00:31:40.360 --> 00:31:53.120
Yeah, one more extra here real quick. I just noticed that Granian, which is powering pythonbytes.fm, by the way, and many, many other things, just came out with their 2.0 release. Right there, seven hours ago. How's that for

00:31:53.800 --> 00:31:55.940
Fred shop the presses breaking news.

00:31:59.260 --> 00:32:02.820
Far as I can tell, there's a bunch of cool changes here.

00:32:03.700 --> 00:32:07.800
One thing that's not cool is as far as I can tell, it doesn't run FastAPI apps.

00:32:08.100 --> 00:32:13.440
So if you have a gradient power in your FastAPI app, API app, you might

00:32:13.820 --> 00:32:16.260
test this before you just update.

00:32:16.500 --> 00:32:19.600
There's also breaking changes in the CLI of like how you specify

00:32:19.940 --> 00:32:20.780
certain constraints and stuff.

00:32:21.660 --> 00:32:22.820
That's easy enough to fix it.

00:32:22.820 --> 00:32:26.020
That tells you this constraint such and such, but I think there's something going

00:32:26.260 --> 00:32:31.260
on where at least all of my FastAPI apps stopped working when I switched to this,

00:32:31.380 --> 00:32:34.900
but all the other ones like court and flask and pyramid all work fine.

00:32:35.860 --> 00:32:35.920
Interesting.

00:32:36.300 --> 00:32:36.400
Weird.

00:32:36.520 --> 00:32:36.940
Don't know why.

00:32:37.400 --> 00:32:41.480
And court is async first, just like FastAPI.

00:32:41.600 --> 00:32:44.600
So I don't know what's going on, but they were, they were not having it.

00:32:44.780 --> 00:32:49.260
So I just pin the version to less than two for those until whatever

00:32:49.480 --> 00:32:50.140
happens here gets figured out.

00:32:50.220 --> 00:32:51.360
So there's just a little PSA.

00:32:52.140 --> 00:32:53.240
All right, with that.

00:32:54.540 --> 00:32:56.340
So seven hours ago you've already tried it?

00:32:57.260 --> 00:32:57.760
Not on purpose.

00:32:58.540 --> 00:33:00.160
I tried it three hours after it was released.

00:33:00.560 --> 00:33:05.920
I needed to ship something else, but my deployment process is check something in the Git and

00:33:05.940 --> 00:33:08.380
then have it go rebuild the Docker images and restart them.

00:33:09.160 --> 00:33:13.160
And that's all, check all the dependencies, is there anything we can update, like does

00:33:13.300 --> 00:33:16.360
Ubuntu have like security fixes we need to apply?

00:33:16.600 --> 00:33:19.780
Can we update the web server in case there's a security fix for it?

00:33:19.780 --> 00:33:23.160
And then we'll rerun the dependencies and we'll like to restart it.

00:33:23.540 --> 00:33:24.680
And then it didn't restart.

00:33:24.680 --> 00:33:25.460
And I'm like, wait a minute.

00:33:25.640 --> 00:33:27.740
What, why, what's going on here?

00:33:27.840 --> 00:33:28.620
This is not good.

00:33:29.400 --> 00:33:32.200
So that's how I learned that there's a new release of Granian.

00:33:32.340 --> 00:33:32.400
Yeah.

00:33:32.760 --> 00:33:33.000
Okay.

00:33:33.820 --> 00:33:34.140
You know what I mean?

00:33:34.200 --> 00:33:36.180
It's not like I was like, Oh, I got to try it that quick.

00:33:37.160 --> 00:33:39.840
It, it tried itself on me and then it didn't go so well.

00:33:39.920 --> 00:33:41.160
So I scrambled to fix it.

00:33:42.120 --> 00:33:42.420
Okay.

00:33:42.900 --> 00:33:43.100
Got it.

00:33:43.180 --> 00:33:43.280
Yeah.

00:33:44.000 --> 00:33:44.160
Yep.

00:33:44.900 --> 00:33:45.260
Okay.

00:33:47.280 --> 00:33:47.560
Joke.

00:33:48.360 --> 00:33:49.240
I love a joke.

00:33:50.900 --> 00:33:53.120
Tabs or spaces. This one has to do with tabs or spaces.

00:33:53.580 --> 00:33:56.220
I'll tell you a joke before the joke. A pre-joke, if you will.

00:33:57.080 --> 00:33:59.320
To get everyone in the mood. This is like the bad joke.

00:34:00.340 --> 00:34:03.180
The bad comedian that shows up before the one you actually came to see.

00:34:03.540 --> 00:34:06.520
So we were at PyCon, I don't know.

00:34:07.140 --> 00:34:09.520
I think this might have even been in Portland. This was a while ago.

00:34:10.159 --> 00:34:14.899
And there was some company that was clearly not very tuned in to Python.

00:34:15.120 --> 00:34:16.800
They were just a coder company, right?

00:34:19.679 --> 00:34:25.200
And so is they wanted to make a spicy t-shirt and the spicy t-shirt

00:34:25.240 --> 00:34:27.460
said, tabs are spaces fight.

00:34:28.340 --> 00:34:31.679
Like this is the stupidest shirt I've seen at the whole conference.

00:34:33.839 --> 00:34:35.659
I mean, tabs are basically disallowed.

00:34:35.720 --> 00:34:38.060
They're not exactly disallowed, but they're pretty much disallowed.

00:34:38.740 --> 00:34:39.919
Like that's not an argument.

00:34:40.179 --> 00:34:40.679
It's over.

00:34:40.820 --> 00:34:42.840
And you're like, you're trying to set up as a debate.

00:34:42.860 --> 00:34:46.780
I'm like, you could do two spaces, four spaces and fight, but you can't do two.

00:34:46.780 --> 00:34:48.919
tab dresses spaces at a Python conference.

00:34:50.909 --> 00:34:52.740
Anyway, but people are going around the shirts nonetheless.

00:34:53.450 --> 00:34:54.919
I think I got one to cut the lawn in.

00:34:55.700 --> 00:34:55.800
Okay.

00:34:55.990 --> 00:35:00.040
Well, let's, on that topic, two spaces or four spaces?

00:35:01.180 --> 00:35:01.340
Four.

00:35:02.680 --> 00:35:05.580
Unless I'm doing JavaScript then two, because for some reason the tool seemed

00:35:05.580 --> 00:35:06.820
to default to two for JavaScript.

00:35:07.420 --> 00:35:07.480
You?

00:35:08.800 --> 00:35:16.100
like four usually, but, I'm noticing that I'm using two frequently as well.

00:35:16.340 --> 00:35:17.160
So, okay.

00:35:18.920 --> 00:35:19.420
Very contrary.

00:35:19.800 --> 00:35:20.060
Okay.

00:35:20.440 --> 00:35:24.000
You're an enigma wrapped in a fuzzy cloud.

00:35:24.060 --> 00:35:24.240
Okay.

00:35:25.020 --> 00:35:25.420
How about this?

00:35:25.460 --> 00:35:26.440
For this is the real joke.

00:35:26.540 --> 00:35:29.420
So I don't know if this is better or worse, but this is what people came for.

00:35:30.059 --> 00:35:30.700
Code puns.

00:35:31.420 --> 00:35:31.940
You ready, Brian?

00:35:32.340 --> 00:35:32.480
Yeah.

00:35:33.740 --> 00:35:36.200
A Python programmer walks into a bar and opens a tab.

00:35:36.900 --> 00:35:40.080
The bartender tells them to sit at the table since they will need four spaces.

00:35:45.900 --> 00:35:48.000
That's what I got for you all.

00:35:51.980 --> 00:35:52.880
No, it's hilarious.

00:35:53.200 --> 00:35:54.300
See, this is why people listen.

00:35:55.360 --> 00:35:56.280
Yeah, yeah, yeah.

00:35:56.700 --> 00:35:59.260
Oh no, I'm like advertising it poorly.

00:35:59.420 --> 00:36:00.400
That was hilarious, man.

00:36:00.560 --> 00:36:00.840
Good job.

00:36:01.240 --> 00:36:02.460
Now there's actually a bunch more here.

00:36:02.700 --> 00:36:04.140
We've talked about this place before, right?

00:36:04.800 --> 00:36:04.980
Yeah.

00:36:06.720 --> 00:36:07.280
Let's see.

00:36:07.600 --> 00:36:08.420
They're not all good.

00:36:09.740 --> 00:36:11.120
Why did the for loop stop running?

00:36:11.340 --> 00:36:12.020
It took a break.

00:36:13.660 --> 00:36:15.000
How do you comfort a JavaScript bug?

00:36:15.060 --> 00:36:17.500
You console it, like it's console log and so on.

00:36:18.280 --> 00:36:18.580
There we go.

00:36:19.940 --> 00:36:20.300
(laughing)

00:36:23.340 --> 00:36:24.860
- No, it's good, thanks.

00:36:25.280 --> 00:36:26.200
- I think it was hilarious, I know.

00:36:26.680 --> 00:36:28.360
Okay, I hear the flaws.

00:36:28.560 --> 00:36:29.000
No, not really.

00:36:29.860 --> 00:36:30.760
But that's what I brought anyway.

00:36:33.980 --> 00:36:34.840
- Good talking to you again,

00:36:35.340 --> 00:36:36.720
and thanks everybody for listening.

00:36:37.520 --> 00:36:37.920
- Yeah, you bet.

00:36:38.840 --> 00:36:39.040
Bye all.

00:36:43.560 --> 00:36:44.960
(audience laughing)

