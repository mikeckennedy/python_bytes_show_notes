WEBVTT

00:00:00.001 --> 00:00:02.000
>> Hello, world.

00:00:02.000 --> 00:00:04.000
>> Hello, Brian.

00:00:04.000 --> 00:00:06.000
>> Hello.

00:00:06.000 --> 00:00:10.000
>> Ready to kick off another one of our fantastic weekly shows?

00:00:10.000 --> 00:00:13.000
>> Yes, and we're on the right time of day today, this week.

00:00:13.000 --> 00:00:17.000
>> Yay, everything's back. Nothing crazy is going on.

00:00:17.000 --> 00:00:19.000
>> Yeah.

00:00:19.000 --> 00:00:26.000
>> No one's in the desert. All right. Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:26.000 --> 00:00:34.000
This is episode 386, recorded June 4th, 2024. I am Michael Kennedy.

00:00:34.000 --> 00:00:36.000
>> And I am Brian Okken.

00:00:36.000 --> 00:00:42.000
>> This episode is brought to you by Mailtrap. I want to tell you more about them later.

00:00:42.000 --> 00:00:50.000
And I also want to let you know that you can find us over on Fosstodon. We are Fosstodonians, as we've said before.

00:00:50.000 --> 00:00:56.000
If you want to talk to us on Mastodon, the links are in the top of your podcast player show notes.

00:00:56.000 --> 00:01:01.000
We're also on X, but do a little bit more stuff on Mastodon. So check us out there.

00:01:01.000 --> 00:01:08.000
Also, you can find us streaming live at exactly this time right now, Brian.

00:01:08.000 --> 00:01:10.000
>> Yeah.

00:01:10.000 --> 00:01:14.000
>> Finally, which is usually 10 a.m. Pacific time on a Tuesday.

00:01:14.000 --> 00:01:17.000
So just pythonbytes.fm/live, and you can be part of the live show.

00:01:17.000 --> 00:01:20.000
You can watch the older videos there if you like, or just subscribe in your podcast player.

00:01:20.000 --> 00:01:22.000
We really appreciate that.

00:01:22.000 --> 00:01:29.000
Finally, we're making lots of interest in our e-mail that you've been writing.

00:01:29.000 --> 00:01:31.000
There's a lot of people signing up for it, Brian.

00:01:31.000 --> 00:01:37.000
So if you want an artisanal, handcrafted digest of the show in written form, just visit pythonbytes.fm.

00:01:37.000 --> 00:01:43.000
Click on "Newsletter" right there in the center, and enter your e-mail address.

00:01:43.000 --> 00:01:49.000
We will send you an e-mail after every show about what we covered, so you have it saved if you like.

00:01:49.000 --> 00:01:51.000
>> Yeah.

00:01:51.000 --> 00:01:53.000
>> All right. You want to kick us off, Brian?

00:01:53.000 --> 00:01:59.000
>> I will. So this comes as a suggestion from somebody, and I'm sorry I didn't write the name down.

00:01:59.000 --> 00:02:01.000
So thanks. We do love it.

00:02:01.000 --> 00:02:08.000
I love it when people share important news with us and say, "Hey, you really should cover this because it's important."

00:02:08.000 --> 00:02:10.000
Thank you for that.

00:02:10.000 --> 00:02:12.000
So what am I talking about today?

00:02:12.000 --> 00:02:14.000
I'm talking about NumPy 2.0.

00:02:14.000 --> 00:02:16.000
I was searching for it.

00:02:16.000 --> 00:02:21.000
I thought we'd covered some of the changes in NumPy 2.0, but I don't know if we have.

00:02:21.000 --> 00:02:25.000
So NumPy 2.0 has been in the works for a long time.

00:02:25.000 --> 00:02:30.000
The reason why I'm bringing it up right now is because the release date is June 16th.

00:02:30.000 --> 00:02:32.000
It's right around the corner.

00:02:32.000 --> 00:02:36.000
NumPy is both -- you're probably using it.

00:02:36.000 --> 00:02:38.000
I guess I'll just say that.

00:02:38.000 --> 00:02:48.000
If you're using any data science or any machine learning or something, you're probably using it, even if you don't use it directly.

00:02:48.000 --> 00:02:50.000
But you probably are using it directly.

00:02:50.000 --> 00:02:53.000
Anyway, lots of changes to 2.0.

00:02:53.000 --> 00:02:55.000
We're linking to an announcement.

00:02:55.000 --> 00:02:59.000
The main page, numpy.org, announces it.

00:02:59.000 --> 00:03:01.000
You can just go there if you want.

00:03:01.000 --> 00:03:05.000
But there's also a news item for the release for June 16th.

00:03:05.000 --> 00:03:07.000
There is some cool migration guides.

00:03:07.000 --> 00:03:13.000
I'm not going to go over a lot of the details, but there are some breaking changes with this.

00:03:13.000 --> 00:03:16.000
I'll go over a few things.

00:03:16.000 --> 00:03:19.000
First off, I went over and looked at the migration guide.

00:03:19.000 --> 00:03:20.000
Let's see the release note.

00:03:20.000 --> 00:03:21.000
Migration guide.

00:03:21.000 --> 00:03:23.000
I thought this was super cool.

00:03:23.000 --> 00:03:33.000
The migration guide is around to help you go through, navigate some of the changes that might be the most problematic.

00:03:33.000 --> 00:03:37.000
But one of the cool things is Ruff is helping out.

00:03:37.000 --> 00:03:49.000
If you're using Ruff greater than version 0.2.0, you added a rule for NPY 201.

00:03:49.000 --> 00:03:52.000
But you can just look at the migration guide and find this.

00:03:52.000 --> 00:04:02.000
You select this rule and run Ruff, and it will -- and you can just run check or you can just run Ruff to correct.

00:04:02.000 --> 00:04:14.000
RUF is around to help you with a lot of the stuff in this migration guide to try to modify your code from older NumPy to the NumPy 2.0.

00:04:14.000 --> 00:04:16.000
That's really cool.

00:04:16.000 --> 00:04:18.000
I would probably start there.

00:04:18.000 --> 00:04:24.000
Also, making sure you have tests around your code to make sure your code is working before and after the migration.

00:04:24.000 --> 00:04:29.000
And then the release notes gets down to a lot of the nitty-gritty stuff.

00:04:29.000 --> 00:04:31.000
There's new string stuff.

00:04:31.000 --> 00:04:33.000
There's performance improvements.

00:04:33.000 --> 00:04:38.000
But there's also -- hopping down, there's a lot of breaking changes.

00:04:38.000 --> 00:04:43.000
And we need to allow projects to do this.

00:04:43.000 --> 00:04:50.000
So I think this is a good thing that they're moving towards some changes in NumPy.

00:04:50.000 --> 00:04:54.000
>> Yeah, quite a big deal for a 2.0 of NumPy.

00:04:54.000 --> 00:05:00.000
It's been around a super long time, 15 years or something like that.

00:05:00.000 --> 00:05:02.000
They must take it seriously.

00:05:02.000 --> 00:05:05.000
That was released in 2006.

00:05:05.000 --> 00:05:19.000
>> Yeah, and like I said, this 2.0 migration to make sure that they're doing the right deprecations and omissions and changes necessary for the breaking --

00:05:19.000 --> 00:05:23.000
breaking some backwards compatibility, but for good reasons.

00:05:23.000 --> 00:05:29.000
I think it's -- yeah, just heads up, everybody.

00:05:29.000 --> 00:05:31.000
>> Yeah, awesome.

00:05:31.000 --> 00:05:33.000
Well, that's a good one to cover for sure.

00:05:33.000 --> 00:05:35.000
I have another exciting one.

00:05:35.000 --> 00:05:37.000
Let's jump over to that.

00:05:37.000 --> 00:05:48.000
So if you are a fan of uvicorn -- so uvicorn is one of the ways you can run ASGI, ASGI web app.

00:05:48.000 --> 00:05:54.000
So things like Quartz, FastAPI, many others.

00:05:54.000 --> 00:06:06.000
You can use uvicorn, and it's definitely the recommended way or the at least suggested way that you run FastAPI for development.

00:06:06.000 --> 00:06:11.000
But then when you go into production, well, you've got challenges.

00:06:11.000 --> 00:06:21.000
So, for example, you want your web server to look and see if your web app crashes for whatever reason, like something went wrong.

00:06:21.000 --> 00:06:27.000
Excuse me, something went wrong with it, something -- maybe it ran out of memory.

00:06:27.000 --> 00:06:28.000
I don't know.

00:06:28.000 --> 00:06:30.000
All these things, right?

00:06:30.000 --> 00:06:37.000
You need the app to sort of look at that and say, well, we're going to restart it because it looks like it's hung up or it looks like it crashed.

00:06:37.000 --> 00:06:39.000
Bring it back.

00:06:39.000 --> 00:06:45.000
The other thing you need to be able to do is you need to be able to potentially scale out across processes.

00:06:45.000 --> 00:06:48.000
So maybe I've -- not maybe.

00:06:48.000 --> 00:06:51.000
At Python Bytes, we have an eight CPU server.

00:06:51.000 --> 00:06:58.000
If we just create one process, you know, because of the GIL and other things, it might be kind of blocked up.

00:06:58.000 --> 00:07:04.000
If it's processing some slow request, we don't want it to have to just queue up behind it.

00:07:04.000 --> 00:07:14.000
You want to be able to say, well, this one is busy, but there's three other processes that are clones of this thing running and hand it off to one of them, right?

00:07:14.000 --> 00:07:24.000
Typically that's done in production by using gunicorn with uveicorn workers, which is like, why am I using two servers to kind of manage the CEO?

00:07:24.000 --> 00:07:27.000
So like gunicorn manages uveicorn running this stuff.

00:07:27.000 --> 00:07:28.000
Like what a mess, right?

00:07:28.000 --> 00:07:36.000
So the news of this item is uveicorn now does all of that stuff itself.

00:07:36.000 --> 00:07:38.000
It no longer needs gunicorn.

00:07:38.000 --> 00:07:40.000
And this news comes from us from John Hagan.

00:07:40.000 --> 00:07:43.000
So thanks for shooting this our way.

00:07:43.000 --> 00:07:48.000
This is filed under the new multiprocess manager.

00:07:48.000 --> 00:07:56.000
And it says the multiprocess manager introduced by this includes a process keep alive and process on detection.

00:07:56.000 --> 00:08:04.000
It also imitates gunicorn and uses a bunch of different types of signals to control the child processes.

00:08:04.000 --> 00:08:10.000
And there's even I haven't opened it up yet, but I will.

00:08:10.000 --> 00:08:15.000
I'll include a link to how you use this in production.

00:08:15.000 --> 00:08:17.000
So it's pretty easy.

00:08:17.000 --> 00:08:23.000
You just say uveicorn and then the module name and then the variable name of the app.

00:08:23.000 --> 00:08:25.000
So like main colon app super common.

00:08:25.000 --> 00:08:31.000
But then the new thing is --workers and you can specify how many workers you want.

00:08:31.000 --> 00:08:34.000
The documentation has four.

00:08:34.000 --> 00:08:45.000
So it says unlike gunicorn, uveicorn does not use pre fork, but uses spawn, which allows uveicorn's multiprocess manager to work well on Windows as well.

00:08:45.000 --> 00:08:49.000
The default process manager monitors the status of child processes.

00:08:49.000 --> 00:08:56.000
Those are actually the things handling your web requests and it automatically restarts child processes that die unexpectedly.

00:08:56.000 --> 00:08:58.000
That's a little morbid.

00:08:58.000 --> 00:09:04.000
Not only that, it'll also monitor the status of child processes through the pipeline.

00:09:04.000 --> 00:09:09.000
And if it gets stuck, it'll be killed off and restarted and so on.

00:09:09.000 --> 00:09:12.000
So that's the new thing.

00:09:12.000 --> 00:09:21.000
And if you're already using uveicorn, especially if you're using uveicorn workers with gunicorn, this might be a pretty awesome way to simplify things.

00:09:21.000 --> 00:09:28.000
Not only it might be, you kind of need to because the uveicorn workers have been deprecated as well.

00:09:28.000 --> 00:09:30.000
Oh, the unicorn workers?

00:09:30.000 --> 00:09:31.000
You mean?

00:09:31.000 --> 00:09:32.000
Oh, yeah.

00:09:32.000 --> 00:09:33.000
Oh, yeah, that's right.

00:09:33.000 --> 00:09:37.000
It is deprecated and will be removed in a future release.

00:09:37.000 --> 00:09:40.000
So I guess get busy, people.

00:09:40.000 --> 00:09:43.000
Yeah.

00:09:43.000 --> 00:09:47.000
So exciting news.

00:09:47.000 --> 00:09:48.000
Yeah, indeed.

00:09:48.000 --> 00:09:50.000
Very exciting.

00:09:50.000 --> 00:09:55.000
Now, do you know what else is exciting, Brian?

00:09:55.000 --> 00:09:56.000
Mailtrap.

00:09:56.000 --> 00:09:57.000
Yeah, our sponsor.

00:09:57.000 --> 00:10:00.000
Let's talk about them for just a second.

00:10:00.000 --> 00:10:05.000
This episode is sponsored by Mailtrap, an email delivery platform that developers love.

00:10:05.000 --> 00:10:17.000
An email sending solution with industry-best analytics, SMTP, and email API, as well as SDKs for major programming languages and 24/7 human support.

00:10:17.000 --> 00:10:23.000
Try for free at mailtrap.io.

00:10:23.000 --> 00:10:24.000
Over to you.

00:10:24.000 --> 00:10:25.000
What you got next?

00:10:25.000 --> 00:10:27.000
We got Pixie.

00:10:27.000 --> 00:10:29.000
I did write down who suggested this.

00:10:29.000 --> 00:10:31.000
Suggested by Vic Gelson.

00:10:31.000 --> 00:10:33.000
So thanks, Vic.

00:10:33.000 --> 00:10:36.000
Pixie is a package management made easy.

00:10:36.000 --> 00:10:38.000
So another package manager thing.

00:10:38.000 --> 00:10:45.000
This is something that says Conda package management simplified.

00:10:45.000 --> 00:10:51.000
So this is not trying to replace pip, but really trying to -- and, you know, things like that.

00:10:51.000 --> 00:10:54.000
But it's trying to replace Conda or build on Conda.

00:10:54.000 --> 00:10:59.000
So I haven't really dug too much into this, but I think it's an interesting project.

00:10:59.000 --> 00:11:07.000
This is cross-platform, written in Rust, but it's also not just about Python.

00:11:07.000 --> 00:11:10.000
It's about other languages as well.

00:11:10.000 --> 00:11:15.000
So the highlights are it supports multiple languages, including Python.

00:11:15.000 --> 00:11:19.000
C++, R, using Conda packages.

00:11:19.000 --> 00:11:26.000
And there's -- yeah, some exciting information around it.

00:11:26.000 --> 00:11:28.000
It's cargo-like.

00:11:28.000 --> 00:11:34.000
I think that it's built thinking -- you know, trying to get Conda to kind of look like cargo.

00:11:34.000 --> 00:11:38.000
Like I said, I haven't tried this, but it looks exciting.

00:11:38.000 --> 00:11:46.000
There is a Pixie tutorial for doing Python development with Pixie.

00:11:46.000 --> 00:11:54.000
This walks through creating a Pixie Py project, which creates a Py project tunnel.

00:11:54.000 --> 00:12:01.000
I found this interesting, that it is using setup tools as a back end.

00:12:01.000 --> 00:12:05.000
And then there's some extra Pixie project stuff around Conda forward.

00:12:05.000 --> 00:12:17.000
So I think this is a tool -- if you were publishing to the Conda space, this might be a tool worth looking into to try to manage your Conda environments.

00:12:17.000 --> 00:12:21.000
Yeah, definitely. It's a super cool project.

00:12:21.000 --> 00:12:30.000
I feel like there was some collaboration between them and maybe the uv folks.

00:12:30.000 --> 00:12:31.000
I can't remember.

00:12:31.000 --> 00:12:33.000
But, yeah, it's a super cool project.

00:12:33.000 --> 00:12:40.000
I actually had Wolf Volprec and Ruben Art on last year in October to talk about this on Talk Python.

00:12:40.000 --> 00:12:45.000
So if you want to hear them dive into why they built it and all the plans there.

00:12:45.000 --> 00:12:49.000
And actually, we talked about some other stuff as well that they're doing.

00:12:49.000 --> 00:12:51.000
We talked about like NixOS and so on.

00:12:51.000 --> 00:12:52.000
So, yeah.

00:12:52.000 --> 00:12:53.000
Interesting.

00:12:53.000 --> 00:12:54.000
Awesome. Yeah, it's awesome.

00:12:54.000 --> 00:12:59.000
You know, there's a thousand flowers blooming in the packaging space right now.

00:12:59.000 --> 00:13:00.000
It's very exciting.

00:13:00.000 --> 00:13:08.000
Yeah, so this was mentioned by Vic, but he also gave us a little bit of what his take on it is.

00:13:08.000 --> 00:13:12.000
So I'm just going to quote from Vic right now.

00:13:12.000 --> 00:13:21.000
He says, "Pixie is a project manager written in Rust that allows you to build Python projects without having Python previously installed."

00:13:21.000 --> 00:13:22.000
That's interesting.

00:13:22.000 --> 00:13:24.000
"It's installable via Homebrew.

00:13:24.000 --> 00:13:30.000
There's support for supporting VS Code and PyCharm via plugins to deal with this.

00:13:30.000 --> 00:13:39.000
By default, Pixie fetches packages from CondaForge, so you get the scientific stack in a pretty reliable and performant build.

00:13:39.000 --> 00:13:44.000
And if it's not there, it looks on PyPI."

00:13:44.000 --> 00:13:47.000
Or if there's a possibility to look on PyPI.

00:13:47.000 --> 00:13:50.000
So Vic tried to use it.

00:13:50.000 --> 00:13:59.000
He was really impressed and got his Jupyter environment with QPy using NVIDIA GPUs working really quickly.

00:13:59.000 --> 00:14:03.000
So at least one person says it's a pretty cool thing to try.

00:14:03.000 --> 00:14:06.000
Yeah, scroll up in that screen you got there.

00:14:06.000 --> 00:14:08.000
Scroll up?

00:14:08.000 --> 00:14:09.000
Or the other way.

00:14:09.000 --> 00:14:11.000
Yeah, to the top.

00:14:11.000 --> 00:14:15.000
Yeah, 2,100 people think it's a pretty good way.

00:14:15.000 --> 00:14:16.000
The number of stars there.

00:14:16.000 --> 00:14:17.000
Yeah, yeah.

00:14:17.000 --> 00:14:19.000
Exactly.

00:14:19.000 --> 00:14:20.000
All right.

00:14:20.000 --> 00:14:25.000
Final one for me is Jupyter.

00:14:25.000 --> 00:14:33.000
So we already talked about NumPy, which also is the foundation of so many other data science projects.

00:14:33.000 --> 00:14:38.000
So here's maybe looking at it from the other direction of the data science space.

00:14:38.000 --> 00:14:41.000
Looking in from the top, from the UI.

00:14:41.000 --> 00:14:48.000
So JupyterLab 4.2 and Jupyter Notebook 7.2 are now available.

00:14:48.000 --> 00:14:50.000
So it's pretty awesome.

00:14:50.000 --> 00:14:53.000
JupyterLab includes three new features.

00:14:53.000 --> 00:14:56.000
I'll give you some shout outs on them.

00:14:56.000 --> 00:15:06.000
20 enhancements, 33 bug fixes, and 29 maintenance tasks included by 39 contributors, which is pretty awesome, right?

00:15:06.000 --> 00:15:07.000
Yeah.

00:15:07.000 --> 00:15:13.000
And Jupyter Notebook, I think, carries, takes some of these forward as well.

00:15:13.000 --> 00:15:15.000
So also has a bunch of fixes.

00:15:15.000 --> 00:15:18.000
All right, so what are some of the features?

00:15:18.000 --> 00:15:22.000
Easier workspace management with the GUIs.

00:15:22.000 --> 00:15:39.000
So you can, instead of using the CLI or just grabbing a URL, like, for example, if you want to have it open up a particular notebook when you launch it or something, you could create a workspace with that open, I believe, instead of just pointing to a URL to that particular notebook.

00:15:39.000 --> 00:15:45.000
So now there's a UI for workspaces that you can control.

00:15:45.000 --> 00:15:48.000
Rename them, reset them, delete them, and so on.

00:15:48.000 --> 00:15:49.000
That's pretty cool.

00:15:49.000 --> 00:15:52.000
You have recently opened and closed files.

00:15:52.000 --> 00:16:03.000
So there used to be an extension called JupyterLab-recents to give you access to recent files and recent directories, and now that just comes built in.

00:16:03.000 --> 00:16:12.000
So I guess if you have the extension still installed, you'll really know what recent files you had, but now it probably disables it or something.

00:16:12.000 --> 00:16:19.000
It has full notebook windowing mode by default, and that's not like a screen layout type thing.

00:16:19.000 --> 00:16:32.000
Suppose you have a notebook with a thousand cells and their output, and those outputs have interactive notebook widgets and Jupyter widgets, and they've got a bunch of graphs and stuff.

00:16:32.000 --> 00:16:39.000
If you open that thing up and it just goes, "Well, we're going to render all thousand items," it might take a moment, right?

00:16:39.000 --> 00:16:52.000
So instead what it does is it basically renders only the cells visible on the window, which should be, as it gets larger and larger, should be more important for performance.

00:16:52.000 --> 00:16:57.000
It's got an improved shortcut editor, so you can do a bunch of different better things.

00:16:57.000 --> 00:17:00.000
In fact, even change default bindings and stuff.

00:17:00.000 --> 00:17:03.000
Dark, high-contrast theme.

00:17:03.000 --> 00:17:05.000
More keyboard shortcuts.

00:17:05.000 --> 00:17:07.000
They're putting some of them back.

00:17:07.000 --> 00:17:11.000
Like, Ctrl+D, spinner sword, allow users to delete a line and that type of stuff.

00:17:11.000 --> 00:17:13.000
So there you have it.

00:17:13.000 --> 00:17:21.000
If you are a notebook person, go forth and get the new one for you, whether JupyterLab or Jupyter Notebook.

00:17:21.000 --> 00:17:22.000
>> That's pretty exciting.

00:17:22.000 --> 00:17:26.000
I'm glad to see this is continuing with the new releases.

00:17:26.000 --> 00:17:31.000
>> Yeah, it's a really nice way to work with Python and data science and all the things.

00:17:31.000 --> 00:17:33.000
>> All the things.

00:17:33.000 --> 00:17:35.000
>> How extra are you feeling today?

00:17:35.000 --> 00:17:37.000
>> I got a few extras.

00:17:37.000 --> 00:17:38.000
>> All right, do it.

00:17:38.000 --> 00:17:39.000
Tell us about them.

00:17:39.000 --> 00:17:50.000
>> Okay, this couple things came from Hugo Von Kaminada.

00:17:50.000 --> 00:17:52.000
Sorry if I messed this up, Hugo.

00:17:52.000 --> 00:17:58.000
But anyway, some encouragement for us to test Python 3.13.

00:17:58.000 --> 00:18:02.000
So Python 3.13 is in.

00:18:02.000 --> 00:18:03.000
The beta is out.

00:18:03.000 --> 00:18:09.000
And we're trying to -- it's got some interesting stuff in it, like the free threaded mode.

00:18:09.000 --> 00:18:13.000
So a couple links here to encourage people to help test.

00:18:13.000 --> 00:18:19.000
Some blog posts to help you know how to test it.

00:18:19.000 --> 00:18:21.000
So help test Python 3.13.

00:18:21.000 --> 00:18:26.000
There's an announcement here, strongly encouraging people to test.

00:18:26.000 --> 00:18:31.000
And then a specific test around the free threading Python without the GIL.

00:18:31.000 --> 00:18:37.000
And a reminder that some people call this no gill, but we don't like to say that anymore.

00:18:37.000 --> 00:18:40.000
So the free threading mode.

00:18:40.000 --> 00:18:41.000
And how to test that.

00:18:41.000 --> 00:18:46.000
And that one's a little tricky because you've got to -- there are some official installers,

00:18:46.000 --> 00:18:52.000
but you can build it yourself as well, and it's available as well on Dead Snakes.

00:18:52.000 --> 00:18:55.000
There's a question marker on GitHub Actions.

00:18:55.000 --> 00:18:57.000
It would be great if that works.

00:18:57.000 --> 00:19:00.000
I'd like to hear back from people.

00:19:00.000 --> 00:19:04.000
But we really want this to go well with this because it's a cool project.

00:19:04.000 --> 00:19:06.000
So help test that.

00:19:06.000 --> 00:19:09.000
So that's around the Python 3.13.

00:19:09.000 --> 00:19:19.000
That's probably the biggest change facing people using 3.13 and packages that you might be using that are on 3.13

00:19:19.000 --> 00:19:22.000
and all those things because those were not built with this in mind.

00:19:22.000 --> 00:19:27.000
Whereas everything else is built at least with the concept of backwards compatibility, right?

00:19:27.000 --> 00:19:28.000
But this one --

00:19:28.000 --> 00:19:29.000
Right.

00:19:29.000 --> 00:19:30.000
-- trying to break out.

00:19:30.000 --> 00:19:37.000
I'm sure there's places where they've had to change the normal stuff as well just to get ready for that.

00:19:37.000 --> 00:19:45.000
So I encourage people, even if you're not planning on testing any part of the GIL versus with free threading,

00:19:45.000 --> 00:19:52.000
to test 3.13 anyway just to make sure that there are no surprises with your project and report them if there are.

00:19:52.000 --> 00:19:58.000
Last thing, I have been fairly quiet on the Python TestPy podcast recently,

00:19:58.000 --> 00:20:04.000
but there is an episode that came out the other day, "How to Get pytest to Import Your Code Under Test."

00:20:04.000 --> 00:20:06.000
So 2.21 is out.

00:20:06.000 --> 00:20:11.000
These are not going to come out very regularly, but occasionally they'll drop, so I'll mention them.

00:20:11.000 --> 00:20:13.000
Yeah, there's a new one.

00:20:13.000 --> 00:20:15.000
So those are my extras.

00:20:15.000 --> 00:20:16.000
Yeah, cool.

00:20:16.000 --> 00:20:23.000
What's very excellent about podcast clients is even if something doesn't come out for six weeks,

00:20:23.000 --> 00:20:26.000
when it does, boom, it just shows up right in your list.

00:20:26.000 --> 00:20:27.000
Yeah.

00:20:27.000 --> 00:20:29.000
People will know.

00:20:29.000 --> 00:20:30.000
Do you have extras?

00:20:30.000 --> 00:20:31.000
I do.

00:20:31.000 --> 00:20:34.000
I have just one quick bit of follow-up.

00:20:34.000 --> 00:20:39.000
So remember, Brian, we talked about the higher-order company, and we talked about Bend,

00:20:39.000 --> 00:20:45.000
a parallel programming language that is Python-like.

00:20:45.000 --> 00:20:48.000
It looks like Python, that sort of thing.

00:20:48.000 --> 00:20:52.000
I feel like I maybe gave the impression that it is Python.

00:20:52.000 --> 00:20:54.000
It's not Python.

00:20:54.000 --> 00:20:56.000
It's just Python-like.

00:20:56.000 --> 00:21:02.000
So you could look at code and say, "Yeah, that is Python," but you might not be able to import a bunch of things,

00:21:02.000 --> 00:21:04.000
or there are certain things you can't do, right?

00:21:04.000 --> 00:21:11.000
So it's a big-time subset and maybe not exactly even a subset, right?

00:21:11.000 --> 00:21:15.000
Anyway, I got some follow-up from Bernard Gabor.

00:21:15.000 --> 00:21:21.000
I just wanted to read just so, because I think it sounds like he's got more experience than I do for sure.

00:21:21.000 --> 00:21:27.000
It says, "Bend looks roughly like Python but is nowhere there, actually.

00:21:27.000 --> 00:21:29.000
For example, it has no for loops.

00:21:29.000 --> 00:21:34.000
Instead, you're meant to use the Bend keyword," hence the language name, "to expand calculations

00:21:34.000 --> 00:21:36.000
and another keyword to join branches."

00:21:36.000 --> 00:21:42.000
So basically, think of something that resembles Python at a high level but without being compatible with that

00:21:42.000 --> 00:21:46.000
and without any of the standard library or packages that the Python language provides.

00:21:46.000 --> 00:21:52.000
That being said, it does an impressive job at parallelization, but essentially, it's a brand-new language

00:21:52.000 --> 00:21:55.000
with new syntax and paradigms you'll have to learn.

00:21:55.000 --> 00:21:58.000
It just shares the first look similarities to Python.

00:21:58.000 --> 00:22:06.000
So, yeah, if you want to check that out, I'm sure it's awesome, but it's going to be its own kind of thing.

00:22:06.000 --> 00:22:07.000
Yeah.

00:22:08.000 --> 00:22:11.000
That's not funny, but you know what is funny?

00:22:11.000 --> 00:22:13.000
[laughter]

00:22:13.000 --> 00:22:14.000
What's funny?

00:22:14.000 --> 00:22:16.000
Do-while loops. They're hilarious.

00:22:16.000 --> 00:22:17.000
Do-while loops are hilarious.

00:22:17.000 --> 00:22:23.000
All right, describe what's going on in this picture without maybe the words here for us, Brian.

00:22:23.000 --> 00:22:26.000
People dancing at a party with somebody in the corner looking at them.

00:22:26.000 --> 00:22:36.000
Yeah, so there's a crowd of people dancing, having fun, just footloose, carefree, having a good time,

00:22:36.000 --> 00:22:42.000
and there's someone in the corner with a party hat and a drink but the most serious look on their face

00:22:42.000 --> 00:22:47.000
as if the world is about to end and the people in the room don't know it.

00:22:47.000 --> 00:22:53.000
The quote says, "They don't know today. I finally ran into a situation that required a do-while."

00:22:53.000 --> 00:22:58.000
[laughter]

00:22:58.000 --> 00:23:05.000
They're just going about it like life is normal, and here it is, the do-while.

00:23:05.000 --> 00:23:07.000
Do we have do-while in Python?

00:23:07.000 --> 00:23:16.000
I was just thinking that. I think no, but we have while else, which you could probably bend into some weird--

00:23:16.000 --> 00:23:22.000
I don't know. I don't really think you ever need a do-while. I don't know why languages have this.

00:23:22.000 --> 00:23:27.000
[laughter]

00:23:27.000 --> 00:23:30.000
Amazing. But it's a funny joke nonetheless.

00:23:30.000 --> 00:23:39.000
Yeah, definitely. Nice. Do you know what's not funny? It's the end of the podcast.

00:23:39.000 --> 00:23:44.000
Oh, it is the end of the podcast. I have to say goodbye, Brian, to everyone.

00:23:44.000 --> 00:23:46.000
Until next week.

00:23:46.000 --> 00:23:53.000
Yes, until next week. Thank you, everyone, for listening. We always appreciate it. Thanks. Bye.

00:23:53.000 --> 00:23:55.000
Bye.

