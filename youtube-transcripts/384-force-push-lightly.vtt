WEBVTT

00:00:00.001 --> 00:00:03.080
>> Hey, Brian. Hey, everyone out there.

00:00:03.080 --> 00:00:04.080
>> Hey.

00:00:04.080 --> 00:00:11.360
>> Thanks for watching live or catching the replay, if you will, of the unedited pure

00:00:11.360 --> 00:00:19.000
100% blooper-filled recording of this Python Bytes. Shall we kick it off, Brian?

00:00:19.000 --> 00:00:21.120
>> Sure, let's do it.

00:00:21.120 --> 00:00:27.160
>> Let's do it, folks. Hello, and welcome to Python Bytes, where we deliver Python news

00:00:27.160 --> 00:00:36.240
and headlines directly to your earbuds. This is episode 384, recorded May -- what month

00:00:36.240 --> 00:00:41.120
is it? May 21st, 2024. I'm Michael Kennedy.

00:00:41.120 --> 00:00:42.680
>> And I'm Brian Okken.

00:00:42.680 --> 00:00:48.520
>> This episode is sponsored by Mailtrap, better email sending APIs. Check them out

00:00:48.520 --> 00:00:54.160
at pythonbytes.fm/Mailtrap. Tell you more about them later. And you can connect with

00:00:54.160 --> 00:01:01.000
us over on Fosstodon. We're all -- Mastodon in general, but we're all over on Fosstodon.

00:01:01.000 --> 00:01:08.120
So find us there. And if you want to X, then you can connect to us over on X as well. Brian,

00:01:08.120 --> 00:01:12.160
I'm not going to call it Twitter anymore. Do you know why?

00:01:12.160 --> 00:01:13.160
>> Why?

00:01:13.160 --> 00:01:15.600
>> When you go there, it now redirects Twitter to X instead of X to Twitter.

00:01:15.600 --> 00:01:16.600
>> Oh, really?

00:01:16.600 --> 00:01:21.920
>> It's like they've accepted their fate. They've accepted their fate. So at least for

00:01:21.920 --> 00:01:22.920
the time being.

00:01:22.920 --> 00:01:29.800
>> I said a friend of mine, like, get mad at me for unfollowing him on Twitter. And

00:01:29.800 --> 00:01:34.440
I'm like, it wasn't just you, man. I don't follow anybody on Twitter.

00:01:34.440 --> 00:01:40.240
>> Don't take it personally. Don't take it personally. Yeah. So people can find us there

00:01:40.240 --> 00:01:45.920
as well, although more conversations on Mastodon. And check out the live show, if you would

00:01:45.920 --> 00:01:50.560
like, pythonbytes.fm/live, usually Tuesdays at 10 a.m. Pacific time. And if you want an

00:01:50.560 --> 00:01:59.320
artisanal, handcrafted, specialized, personal summary of what we talked about on the show,

00:01:59.320 --> 00:02:04.120
just head on over to pythonbytes.fm, click newsletter right in the middle of the hero

00:02:04.120 --> 00:02:09.320
section at the top, and put your email address there. We won't share it. It's just so that

00:02:09.320 --> 00:02:15.480
we can talk to you about things that we're up to. So if that sounds awesome, do that.

00:02:15.480 --> 00:02:22.200
But Brian, we're not going to be forceful about that. We're not going to overdo it,

00:02:22.200 --> 00:02:29.240
are we? >> No. Yeah. Nice. Nice transition. So I'm

00:02:29.240 --> 00:02:35.400
going to start by talking about Gitforce, actually. Adam Johnson wrote a blog post about

00:02:35.400 --> 00:02:41.600
Git. This isn't specifically Python related, but I'm guessing a lot of you guys use Git.

00:02:41.600 --> 00:02:46.480
>> I've seen a few people who do Python who use Git also. It's true.

00:02:46.480 --> 00:02:56.560
>> So one of the things that happens is you've got your local repo that's not quite in sync

00:02:56.560 --> 00:03:01.640
with the remote one. And if it's just you, and it somehow, when you push and it doesn't

00:03:01.640 --> 00:03:07.720
work right, you do a push force, a --force. And it just says, no, I mean it. Take

00:03:07.720 --> 00:03:16.840
it. That's not always what you want to do. So Adam Johnson wrote a post called force

00:03:16.840 --> 00:03:23.120
push safely with force with lease and force if includes. Wow, these are verbose. I did

00:03:23.120 --> 00:03:28.320
not know about either of these things. So I'm really glad that he wrote this up. The

00:03:28.320 --> 00:03:35.600
idea is, and I don't know what that means. I don't know what with lease or if includes

00:03:35.600 --> 00:03:43.320
means, but the gist of it is, is one of them will make sure that you have, oh, let's just

00:03:43.320 --> 00:03:49.600
look at what he said. So if you try and sometimes you get an error message that said a note

00:03:49.600 --> 00:03:56.960
about fast forwards and failed push, because the tip of your current branch is behind its

00:03:56.960 --> 00:04:05.080
remote counterpart. So you're not up to date. So, and wait, before you ignore this, because

00:04:05.080 --> 00:04:09.960
you think, oh, I only use my own repos and I don't, I'm never going to be in conflict.

00:04:09.960 --> 00:04:15.040
I've finding this more and more with my own repositories and I'm the only one developing.

00:04:15.040 --> 00:04:21.560
Why is that? It's because I've got CI tools that do things like update things for me.

00:04:21.560 --> 00:04:27.240
And and if it passes, it goes through. And so therefore my local branch is not up to

00:04:27.240 --> 00:04:32.440
date with my remote because there's stuff in CI doing things for me. That's a good thing,

00:04:32.440 --> 00:04:37.520
but it causes this problem sometimes. And what we want to do is to make sure that we

00:04:37.520 --> 00:04:42.360
pull or fetch all of the branches that we were going to be pushing to and make sure

00:04:42.360 --> 00:04:48.800
that our local changes are merged correctly. And if we don't do that, a get push will fail.

00:04:48.800 --> 00:04:53.560
So this, you can force it, but forcing will just overwrite your version with the one up

00:04:53.560 --> 00:05:00.480
there. It's not really what you want to do. The the, so one of these, one of these flags

00:05:00.480 --> 00:05:06.320
will make sure that you have at least fetched the branching question. So all in all

00:05:06.320 --> 00:05:10.800
the commits that you've fetched, all of the commits that are involved so that it assumes

00:05:10.800 --> 00:05:17.200
that you've looked at them. And then one of them makes sure that you have actually,

00:05:17.200 --> 00:05:22.020
you've actually checked it out. So if you done, you did a get checkout and actually,

00:05:22.020 --> 00:05:27.920
so that, and that would mean that would, I guess, assume that you have looked at, actually

00:05:27.920 --> 00:05:32.480
looked at it, not just that it's on your computer, this fetch will pull everything down. So it's

00:05:32.480 --> 00:05:38.560
on your computer, but a committing or checking it out will mean that you've actually had

00:05:38.560 --> 00:05:44.920
it in there and you had at least the opportunity to look at it. So, I'm definitely gonna,

00:05:44.920 --> 00:05:51.160
and there was some comments to this blog post saying, that I usually, have a, a

00:05:51.160 --> 00:05:56.880
shortcut assigned to this. And I'm not sure what the normal shortcut is for this, but

00:05:56.880 --> 00:06:01.000
I'm definitely going to set this up to me, see if I can get this to happen automatically

00:06:01.000 --> 00:06:02.000
or something.

00:06:02.000 --> 00:06:06.160
So, yeah, this is interesting. It's new to me as well. And I'm certainly going to check

00:06:06.160 --> 00:06:17.400
it out. So anyway, some get safety concerns. So, speaking of safety, how was your flight?

00:06:17.400 --> 00:06:19.440
Is your flight safe back from PyCon?

00:06:19.440 --> 00:06:24.620
My flight, my flight was great. Actually worked out pretty good. All the flights were full.

00:06:24.620 --> 00:06:29.880
So it was like rubbing shoulders with strangers. I even got the bonus of being in the middle

00:06:29.880 --> 00:06:34.520
seat one time. That was amazing. That was the flight that was delayed for an hour and

00:06:34.520 --> 00:06:38.560
a half and waited on the tarmac instead of the terminal. So I got an extra time there

00:06:38.560 --> 00:06:43.280
with people, but yeah, no, it was great. And yeah, let's, let's talk a little bit about

00:06:43.280 --> 00:06:48.880
PyCon. So PyCon, PyCon was awesome. You know, there's a ton of people that I got to see

00:06:48.880 --> 00:06:56.080
again and that was really special. A bunch of people I met and that was also amazing.

00:06:56.080 --> 00:07:02.360
Just I just spent my time going around networking, learning what folks are up to both through

00:07:02.360 --> 00:07:08.360
the expo floor and just from talking to others. And, you know, I say this all the time, but

00:07:08.360 --> 00:07:15.560
to me, it's basically my geek holiday. So we missed you though, Brian, we missed you

00:07:15.560 --> 00:07:16.560
this year.

00:07:16.560 --> 00:07:21.280
I missed you guys. Yeah. A bunch of people asked about you, by the way, they're like,

00:07:21.280 --> 00:07:27.560
"Hey, too bad he's not here." All right. Well, I did do a live Talk Python episode with Jody

00:07:27.560 --> 00:07:33.920
Burchill and some other data science ladies there at the JetBrains booth. So thanks to

00:07:33.920 --> 00:07:39.760
them for all the AV setup and I'll post that in a couple of weeks. And also the talks look

00:07:39.760 --> 00:07:46.440
really good. I'm not always inspired by the PyCon talks and some of the Python, more regional

00:07:46.440 --> 00:07:51.720
conference talks. But this year they looked quite good. So I'm really looking forward

00:07:51.720 --> 00:07:55.880
to the YouTube version of them coming out whenever that happens. I think last year was

00:07:55.880 --> 00:08:01.960
like three months or something. Pretty quick. No, just kidding. But eventually, whenever

00:08:01.960 --> 00:08:05.680
they do come out, they'll be really good. So we'll talk more about that here when they

00:08:05.680 --> 00:08:11.720
land. Right? Yeah. All right. Let's wrap this up with a rant. I highly recommend people

00:08:11.720 --> 00:08:15.840
go. If you've never gone and you think that you might, you should definitely go. If you're

00:08:15.840 --> 00:08:22.400
thinking that I'm not good enough at Python to go, you should definitely go. You'll make

00:08:22.400 --> 00:08:26.520
connections. You'll get better at Python. People are super welcoming. But do you know

00:08:26.520 --> 00:08:33.000
what was not welcome? The stupid mask policy, right? It was universally disliked. And I'm

00:08:33.000 --> 00:08:37.000
sure there's one person out of several thousand that are like, "Michael, the only reason I

00:08:37.000 --> 00:08:42.200
would come because of this." Yes, I know. But I'll tell you, I spoke to tons of people,

00:08:42.200 --> 00:08:47.640
spoke to vendors. Everyone was there complaining about the mask. They're like, "Can we go outside

00:08:47.640 --> 00:08:51.800
and just take this thing off for a minute so we can talk?" Or I lost my voice after

00:08:51.800 --> 00:08:59.200
the first day and still had to do the podcast because it would be like, "What?" It was just

00:08:59.200 --> 00:09:02.960
a loud... Everybody had masks on and it was like loud din because everyone was trying

00:09:02.960 --> 00:09:08.480
to yell through them. I don't know. It was just a tremendous mistake. The only reason

00:09:08.480 --> 00:09:14.320
I bring this up, not to rant because I've already done this rant. Hopefully people listening

00:09:14.320 --> 00:09:19.160
for next year, people who are interested in going next year, speak to people in charge

00:09:19.160 --> 00:09:27.520
and say, "Okay, the world is not like that anymore. Can we please just have a more coherent

00:09:27.520 --> 00:09:32.240
policy?" Anyway, that's what my hope is.

00:09:32.240 --> 00:09:39.400
We could do somewhere in the middle. If you feel like you might have a cough or something,

00:09:39.400 --> 00:09:41.440
please try to keep your mask on.

00:09:41.440 --> 00:09:49.840
Yeah. Yeah. 100%. I said this before and just for people who didn't catch it, I'm not anti-mask,

00:09:49.840 --> 00:09:56.920
not anti-science, whatever. When I went on a trip recently, long trip, I thought maybe

00:09:56.920 --> 00:10:01.720
I was getting sick. I wore my mask the whole time, even though no one around me did. A

00:10:01.720 --> 00:10:05.800
super long flight and the airport and everything because I wanted to be considerate.

00:10:05.800 --> 00:10:09.800
I don't care if other people want to wear a mask, that's great, but don't force this

00:10:09.800 --> 00:10:18.840
weird policy onto everybody who generally doesn't think that they'd rather. It undermines

00:10:18.840 --> 00:10:25.440
the networking aspect, both for the sponsors and expo, trying to talk to people and each

00:10:25.440 --> 00:10:31.080
other. All right. Rant over, but please, fingers crossed for next year.

00:10:31.080 --> 00:10:36.120
If you're out there and you agree with me, please let the folks know. You don't have

00:10:36.120 --> 00:10:40.720
to email me. I've already had this conversation a lot, but it's just closing the loop in the

00:10:40.720 --> 00:10:46.280
past. I feel like what I said before pretty much was how it was.

00:10:46.280 --> 00:10:51.480
You know what, though, is quite awesome, Brian? I hinted at the top of the show, not that.

00:10:51.480 --> 00:10:55.600
That's later. Mailtrap. Let's talk about Mailtrap real quick.

00:10:55.600 --> 00:11:00.080
This episode is sponsored by Mailtrap, an email delivery platform that developers love.

00:11:00.080 --> 00:11:07.320
An email sending solution with industry-best analytics, SMTP, and email API, as well as

00:11:07.320 --> 00:11:14.520
SDKs for major programming languages and 24/7 human support. Try for free at mailtrap.io.

00:11:14.520 --> 00:11:20.920
Indeed. Thank you, Mailtrap. All right. Over to you, Brian. What you got?

00:11:20.920 --> 00:11:24.280
I'm going to talk about Git some more, actually.

00:11:24.280 --> 00:11:28.280
Let's get it on.

00:11:28.280 --> 00:11:34.640
I'm thinking about forking a project because you remember how projects used to have like

00:11:34.640 --> 00:11:40.800
fork me on GitHub, little things on the top corner. They don't really do that anymore.

00:11:40.800 --> 00:11:44.720
But we often think of, I mean, actually, I often think of contributing to an open source

00:11:44.720 --> 00:11:50.980
project just in the sense of forking it just so that I can make modifications to contribute

00:11:50.980 --> 00:11:58.120
back to the project. That's often how we, you create a fork, you create a branch on

00:11:58.120 --> 00:12:03.680
your own fork, and then you contribute back to the project. That's how we do contributions.

00:12:03.680 --> 00:12:09.280
But what if you want to have a long running fork of a project? And that's what I'm considering.

00:12:09.280 --> 00:12:13.920
And I was thinking about strategies, how to do that, because I don't know.

00:12:13.920 --> 00:12:22.520
And so I ran across this, a couple of blog posts from the Git folks. It's actually from

00:12:22.520 --> 00:12:27.380
Leslie Dennington. Cool. There's a couple of posts called being friendly. So there's

00:12:27.380 --> 00:12:32.540
being friendly, friendly forks, one on one, and there's being friendly strategies for

00:12:32.540 --> 00:12:39.400
friendly fork management. And I think these are interesting because there's a lot of stuff

00:12:39.400 --> 00:12:48.280
going on here. And there's, but not really, we'll go through them relatively quickly.

00:12:48.280 --> 00:12:51.900
They picked some examples to think about. And I was thinking, I would really like to

00:12:51.900 --> 00:12:58.640
know like from an example project and Git itself is a lovely example project because

00:12:58.640 --> 00:13:08.620
Git has several forks and they have different policies. So there's a Git slash Git, which

00:13:08.620 --> 00:13:17.580
is the main, wait, there's Git for Windows, for instance, there's Git, the base one, there's

00:13:17.580 --> 00:13:23.960
Git for Windows Git, there's Microsoft Git, and there's GitHub Git. So there's four different

00:13:23.960 --> 00:13:30.760
friendly forks off of that. Actually, it's not like, it's actually not like that. There's

00:13:30.760 --> 00:13:37.120
the main Git, Git, and then there's a Git for Windows that's based off of that. And

00:13:37.120 --> 00:13:43.360
then there's Microsoft Git, which is a fork of the Git for Windows. And then there's GitHub

00:13:43.360 --> 00:13:51.620
Git, which is a separate branch fork from, anyway. Three forks on it and they have different

00:13:51.620 --> 00:13:57.540
policies and it's interesting to look at them. And then, so if you talk about, look about

00:13:57.540 --> 00:14:01.740
the different needs. So the first article talks about the different needs for the forks.

00:14:01.740 --> 00:14:07.120
And then the second article talks about merging strategy. That's really where I wanted to

00:14:07.120 --> 00:14:13.120
understand it because here's the idea. I'm going to fork a project and then I want to,

00:14:13.120 --> 00:14:18.660
I want to regularly get updates from the parent project because I want to like maybe, and

00:14:18.660 --> 00:14:25.460
this happens like for internal companies a lot. If I want to add on extra features that

00:14:25.460 --> 00:14:28.940
are not there, they like, maybe I tried to contribute to them and they got rejected,

00:14:28.940 --> 00:14:32.900
but I still need them so I can have a friendly fork, but I want to keep up to date with all

00:14:32.900 --> 00:14:39.380
the changes. So how do you keep up to date? So one of the ways is, is from a, you take

00:14:39.380 --> 00:14:46.420
a, what they call a merging rebase, which is, which is what Git for Windows does. And

00:14:46.420 --> 00:14:51.300
the, I guess I'm not going to try to find all the, all the diagrams, but there's diagrams

00:14:51.300 --> 00:14:58.460
in here too. But there's a, a merging rebases where you take, you kind of do a, like a,

00:14:58.460 --> 00:15:04.540
a fake merge where you, where you, you say, I'm going to merge, but I'm actually only

00:15:04.540 --> 00:15:10.820
going to take my changes. And then you, so that isolates just your changes and then you

00:15:10.820 --> 00:15:16.980
rebase so that you can just take the new, the new space on the, on the upstream

00:15:16.980 --> 00:15:22.180
one and then just apply all of your changes to it. It's a way to just do that. The second

00:15:22.180 --> 00:15:30.300
way is a new branch and, and that, that'll allow you to just take, like the, the, the

00:15:30.300 --> 00:15:36.860
Microsoft Git one does a new branch. So for each upstream new version, you just create

00:15:36.860 --> 00:15:43.220
a new branch for that, like complete, completely do a new branch. And then, then you copy over

00:15:43.220 --> 00:15:49.460
your changes from, from past changes onto the new changes. So you like start the branch

00:15:49.460 --> 00:15:55.420
over again every time, almost. And then the other, the third one is just a traditional

00:15:55.420 --> 00:16:00.040
merge, like Git, Git uses a traditional merge, but there's, there's a lot of noise in that.

00:16:00.040 --> 00:16:04.620
And so they say that that works okay. Takes a lot of people and a lot of testing though,

00:16:04.620 --> 00:16:12.060
and they often delay. So let's say I picked, I don't know, any, any project and for a major

00:16:12.060 --> 00:16:17.060
release I'd maybe wait till like, wait a couple months or something or wait, whatever the

00:16:17.060 --> 00:16:22.100
dot releases to make sure the, the, a couple of the bug fixes releases after the new features

00:16:22.100 --> 00:16:28.860
came out and then merge them. So and then at the end which is great, I know this is

00:16:28.860 --> 00:16:36.540
a lot of detail, but the great articles oh, there's a, there's a cool picture of the the

00:16:36.540 --> 00:16:40.340
creating a new branch, completing a new branch and then merging your changes over. So there

00:16:40.340 --> 00:16:46.780
are some great pictures in here. So the and then the, they also talked about like proactive

00:16:46.780 --> 00:16:51.660
versus cautious, like how frequently you're going to merge. And this is just a really

00:16:51.660 --> 00:16:56.460
good discussion of this is a lot of work guys. If you're really going to like maintain a

00:16:56.460 --> 00:17:01.500
fork of a project, you just, just take it slow, make sure you know what you're doing

00:17:01.500 --> 00:17:07.020
and know how many people you are there. So it talks about the different scenarios and

00:17:07.020 --> 00:17:13.300
when, when you might or might want to not want to use different versions. And I think

00:17:13.300 --> 00:17:18.540
like the final one says, if you're new to the fork game and want to keep it simple,

00:17:18.540 --> 00:17:23.580
just do just two merges and do it be considerate. Maybe that's, that might be the easiest. And

00:17:23.580 --> 00:17:29.100
I think they, I might go with this one to start with because, but I am intrigued by

00:17:29.100 --> 00:17:34.100
the whole, like the merging rebase thing. That sounds neat too. Actually they all sound

00:17:34.100 --> 00:17:38.980
cool. I might try all of them just to see how it goes, but it's just me. So that's I

00:17:38.980 --> 00:17:44.740
might be crazy, but I breathe, bring this up because I'm a one because other people

00:17:44.740 --> 00:17:49.860
might be considering like forking something for their own company use or, or just wanting

00:17:49.860 --> 00:17:56.700
to possibly start a sister project for something. How it'd be a slightly different. How do you

00:17:56.700 --> 00:18:01.540
go about that? So these are great articles, but also if I'm missing something, if this

00:18:01.540 --> 00:18:06.740
is not a great reference for this and the other people have other tools around let me

00:18:06.740 --> 00:18:12.660
know. By the way, the whole forking rebase thing, there was a script involved here. So

00:18:12.660 --> 00:18:17.980
they have, they like shared the script that they use for doing this. And then talked about

00:18:17.980 --> 00:18:25.500
some cool merging like a deficit. There's a different merge tool that they used for

00:18:25.500 --> 00:18:29.700
code reviews and stuff. So anyway,

00:18:29.700 --> 00:18:37.140
very cool. This is some advanced to get stuff right here, but you can easily get yourself

00:18:37.140 --> 00:18:42.660
in trouble if you fork our repo. And even if you intend to make changes back and you

00:18:42.660 --> 00:18:49.380
change the brand, the branch that is being updated on the remote or the original repository,

00:18:49.380 --> 00:18:54.780
you can end up with a merge conflicts. It's almost always seems like a good idea to have

00:18:54.780 --> 00:19:01.140
kind of a separate branch where you work and something that syncs with the project. Right.

00:19:01.140 --> 00:19:07.660
And so that's kind of like that. Plus like, then what do you do to kind of keep it in

00:19:07.660 --> 00:19:11.180
sync? Cause you're definitely going to end up with conflicts if your intention is not

00:19:11.180 --> 00:19:15.980
to keep it in sync by pushing your changes back to it. Right.

00:19:15.980 --> 00:19:22.180
The other thing that I want to point out that wasn't in this article is tags are completely

00:19:22.180 --> 00:19:29.060
separate. I know that tags are part of the get repository, but they don't come automatically.

00:19:29.060 --> 00:19:36.300
So and that's often, I don't know the reason it's convenient that they don't come. It's

00:19:36.300 --> 00:19:40.780
both convenient and painful because the new project will have its own versioning scheme

00:19:40.780 --> 00:19:45.660
possibly. But if you want the same versioning scheme, you have to do that separately. You

00:19:45.660 --> 00:19:51.100
need to make sure that you're pulling the tags as well. So yeah, a lot to consider.

00:19:51.100 --> 00:19:57.420
Yeah. All right. Let's talk about TAC. Not a super

00:19:57.420 --> 00:20:03.900
popular project yet, but pretty awesome. Let's see. It's about a month old, I would say.

00:20:03.900 --> 00:20:10.300
No, four months old is how old it is. So this is a project that lets you understand the

00:20:10.300 --> 00:20:17.660
architecture and actually not just understand, let you specify the architecture of your application

00:20:17.660 --> 00:20:26.380
and enforce it through a linting sort of thing. Okay. So let's see what they say here. Python

00:20:26.380 --> 00:20:31.940
tool to enforce modular design. So maybe the best way, Brian, would be to like look at

00:20:31.940 --> 00:20:38.100
this little thing as people are watching. You can see there's a little video demo, which

00:20:38.100 --> 00:20:46.780
is great. So what it will do is it will show you, you set up some config files and you

00:20:46.780 --> 00:20:54.660
say, "I have these parts of my application, these modules or these packages, and I want

00:20:54.660 --> 00:21:00.580
to control how they interact with each other." So if I say, "This stuff makes up a data layer

00:21:00.580 --> 00:21:07.460
here and this stuff makes up an API layer," you might say that the API layer and the data

00:21:07.460 --> 00:21:11.940
layer are not allowed to talk to each other. Only stuff that consumes either of them can

00:21:11.940 --> 00:21:17.660
coordinate across them. So for example, in the API section, shouldn't import something

00:21:17.660 --> 00:21:22.860
from the data section and vice versa. You want them to be independent so that potentially

00:21:22.860 --> 00:21:27.380
they're easier to test, they're easier to change. You know if I change this part, it's

00:21:27.380 --> 00:21:32.740
only going to affect the thing itself and the stuff that I explicitly understand to

00:21:32.740 --> 00:21:39.300
be using it. It doesn't become sort of a spider web of everything's connected to everything

00:21:39.300 --> 00:21:45.380
as much as it can in Python because circular dependencies are an issue. But still, that's

00:21:45.380 --> 00:21:54.180
kind of the idea. So you just install it and you have to add a package and it'll let you

00:21:54.180 --> 00:22:00.740
take through and specify that. Or you can just come up with a YAML file, a package.yaml,

00:22:00.740 --> 00:22:05.180
and then you give it a tag like, "This one is a core and this one is a DB and this one

00:22:05.180 --> 00:22:11.340
is a utils." And then at the root, you come up with a tack.yaml that says, "The core depends

00:22:11.340 --> 00:22:18.740
upon DB and utils." So the core can import from DB and utils but not vice versa. The

00:22:18.740 --> 00:22:25.080
DB depends on utils and utils shouldn't be importing from other places in your application.

00:22:25.080 --> 00:22:29.540
And then you can run it, CLI tool against your app like tack check and it tells you

00:22:29.540 --> 00:22:35.060
that there's some import that's breaking the rules that you've laid out. So the other thing,

00:22:35.060 --> 00:22:42.260
yeah, go ahead. The other thing that's interesting is it allows you to define a public API. You

00:22:42.260 --> 00:22:47.140
can say, "These things I would like you to be able to use when you use my package." But

00:22:47.140 --> 00:22:52.940
this other stuff is internal stuff and I make zero promises about it. So please don't use

00:22:52.940 --> 00:22:58.300
it. I know you could because of Python but don't. And it'll enforce that as well. It'll

00:22:58.300 --> 00:23:06.340
say like you're trying to use something that I'm explicitly trying to say, don't use. So

00:23:06.340 --> 00:23:10.940
I don't think this is useful for every app but if you've got different people working

00:23:10.940 --> 00:23:15.540
on it and you want to be real careful about your architecture, it's worth checking out.

00:23:15.540 --> 00:23:22.500
I think this is, I am going to check this out. It's not just like bad architecture or

00:23:22.500 --> 00:23:30.820
something. You might bring some new people onto a team or it might help people get used

00:23:30.820 --> 00:23:36.580
to a project and the rules around it easier if you aren't allowed to do stuff.

00:23:36.580 --> 00:23:38.140
Yeah, that's a pretty good point.

00:23:38.140 --> 00:23:43.220
So how does it stop it? Does it test the thing or is it just-

00:23:43.220 --> 00:23:44.220
It just prints a warning.

00:23:44.220 --> 00:23:45.220
Stop it at runtime?

00:23:45.220 --> 00:23:51.220
It's like the linter would fail. So it's like a linter error but I mean it doesn't actually,

00:23:51.220 --> 00:23:57.100
there's no runtime checks. So no runtime checks.

00:23:57.100 --> 00:23:58.100
Okay.

00:23:58.100 --> 00:23:59.100
Yeah.

00:23:59.100 --> 00:24:00.820
All right. Cool.

00:24:00.820 --> 00:24:04.700
Yeah, but you can set it up as a pre-commit hook in which case I guess you couldn't commit

00:24:04.700 --> 00:24:11.300
if you wanted. But yeah, I kind of like the idea of the public API. I know it looks like

00:24:11.300 --> 00:24:14.420
you should use that but there's actually this other thing that does more checks and brings

00:24:14.420 --> 00:24:17.820
in some other stuff and adds versioning and you should use that function to make this

00:24:17.820 --> 00:24:22.260
change, don't like directly, I don't know, whatever, interact with something, right?

00:24:22.260 --> 00:24:23.260
Yeah.

00:24:23.260 --> 00:24:27.740
Cool. All right. Extra time. What do you got?

00:24:27.740 --> 00:24:35.180
I got I guess one extra. I noticed that the pedantic guys or pedantic people I should

00:24:35.180 --> 00:24:43.500
say have something they're trying to sell now. So being a company you have to make some

00:24:43.500 --> 00:24:50.420
money somehow, which is good. But they came up with a tool called log fire and it just

00:24:50.420 --> 00:24:57.940
looks fun. So it's advertised as uncomplicated observability from the team behind pedantic.

00:24:57.940 --> 00:25:04.900
They have an observability platform to look at like logging and other things. And it's

00:25:04.900 --> 00:25:13.060
actually I haven't dug into it too much but it looks pretty slick. Anyway, right now the

00:25:13.060 --> 00:25:20.580
pricing model is free for everybody but they're going to eventually charge people.

00:25:20.580 --> 00:25:30.100
You could know how much they're going to charge you if you had some of that like cool fake

00:25:30.100 --> 00:25:35.300
futuristic image capabilities. Zoom, enhance, zoom, enhance, because they have the blurry

00:25:35.300 --> 00:25:36.300
pricing.

00:25:36.300 --> 00:25:39.300
Yeah. Well, the website is beautiful.

00:25:39.300 --> 00:25:44.780
Oh, it's not. I don't know. I don't know what it is. Yeah. Yeah, it does look good.

00:25:44.780 --> 00:25:46.260
Do you have any extras?

00:25:46.260 --> 00:25:50.900
Well, I just quick comment on this. What I think is interesting about log fire and again,

00:25:50.900 --> 00:25:58.460
congrats to Samuel and team over there. I saw those folks at PyCon as well. There's

00:25:58.460 --> 00:26:04.940
a lot of observability platforms that you can add to different Python stacks and other

00:26:04.940 --> 00:26:11.420
stacks as well. But what's kind of interesting about this is it's super focused on specific

00:26:11.420 --> 00:26:18.180
frameworks to add more observability than normal to them, I guess. So for example, you'd

00:26:18.180 --> 00:26:24.220
say log fire dot instrument, psycopg or log fire dot instrument, FastAPI, and it

00:26:24.220 --> 00:26:29.140
gets like really deep understanding of what that thing is doing. It gives you reports

00:26:29.140 --> 00:26:34.820
around it rather than just a web request or I saw you talk to a file or an API or something,

00:26:34.820 --> 00:26:42.660
you know? Yeah. Yeah. I do have a couple of extras. Let's see. The getting started with

00:26:42.660 --> 00:26:50.780
an LP and spaCy course by Vincent Vommerdam. He is he and I decided we're going to do a

00:26:50.780 --> 00:26:58.140
10% on the course for the month of May 10% off. So if you would like to take this course

00:26:58.140 --> 00:27:04.260
and save a little bit, you've got nine, 10 days to do so. If you listen to this right

00:27:04.260 --> 00:27:09.820
away, right? Basically during May 2024, you can save 10%. So put the link in the show

00:27:09.820 --> 00:27:16.140
notes. Check out getting started with NLP and spaCy. Super cool. Super cool one. And

00:27:16.140 --> 00:27:24.420
I feel like I might have had another. I go with no, that's my only only my only extra.

00:27:24.420 --> 00:27:29.820
And I saw we both put a joke in, but let's let's do your joke next week. I'll do this

00:27:29.820 --> 00:27:39.540
joke this week. Okay. Okay. So to do my joke next. Yeah. All right. So I was actually listening

00:27:39.540 --> 00:27:44.740
to a book called Company of One from Paul Jarvis. Excellent book. I'm actually listening

00:27:44.740 --> 00:27:51.020
to it the second time now. I'm really enjoying it. Anyway, he talked about one of the one

00:27:51.020 --> 00:27:56.660
of the people he talked about was somebody that runs actually Tom Fishbourne runs a company

00:27:56.660 --> 00:28:02.340
called market toonist. And here's a cartoon from market toonist that I actually really

00:28:02.340 --> 00:28:08.700
love. It's the evolution. One sec. I don't see your screen anymore. You don't see it?

00:28:08.700 --> 00:28:15.220
No. Okay. You just have to tell it to most people listen anyway. Okay. Evolution of smart

00:28:15.220 --> 00:28:21.700
products. If I were to buy a toaster first, there's the toaster. It makes toasts. I mean,

00:28:21.700 --> 00:28:28.060
you've got wifi enabled, makes toast after making you wait for a firmware update, data

00:28:28.060 --> 00:28:37.500
driven toaster makes toast by by watching how you like toast. So watches you toast as

00:28:37.500 --> 00:28:43.100
a service makes toast for 599 a month. Ad supported toaster makes toast and lets you

00:28:43.100 --> 00:28:49.700
know that Smuckers is on sale. And then there's the AI toaster toast. I'm afraid I can't do

00:28:49.700 --> 00:29:03.620
that Dave. I can't do that Dave. Oh, you do it good. How? Goodbye, Dave. Goodbye, Dave.

00:29:03.620 --> 00:29:09.620
I love it. I love it. Yeah, that's a really good one. Anyway, the market is I'm not really

00:29:09.620 --> 00:29:14.660
it's, he's got a great company. There's a couple other ones. The one I really, one of

00:29:14.660 --> 00:29:20.420
them I really related to. Anyway, there's a lot of thoughts I related to and enjoyed

00:29:20.420 --> 00:29:27.740
his stuff. So cool. Awesome. Yeah. Very funny one. Good stuff over there. So nice find.

00:29:27.740 --> 00:29:36.180
All right. Well, I think that is it for the week. Brian, thank you. And thank you. Yeah.

00:29:36.180 --> 00:29:39.500
Thanks everyone for listening. See y'all later. Bye.

