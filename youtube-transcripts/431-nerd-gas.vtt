WEBVTT

00:00:02.000 --> 00:00:05.340
Hey, everybody. Welcome, Michael. Welcome, everybody.

00:00:05.420 --> 00:00:05.540
Hello.

00:00:06.779 --> 00:00:11.520
It's great to be. Happy Cinco de Mayo, May 5th, or Cinco de Python.

00:00:12.180 --> 00:00:12.420
Mm-hmm.

00:00:12.580 --> 00:00:13.380
Cinco de Python.

00:00:13.740 --> 00:00:17.280
Cinco de Python, yeah. All right. Let's get started.

00:00:18.780 --> 00:00:23.460
Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:24.200 --> 00:00:28.260
This is episode 431, recorded May 5th, 2025.

00:00:29.310 --> 00:00:30.340
And I am Brian Okken.

00:00:30.860 --> 00:00:31.940
And I am Michael Kennedy.

00:00:32.900 --> 00:00:35.580
And this episode is sponsored by NordLayer.

00:00:35.820 --> 00:00:37.700
Listen to their spot later in the show.

00:00:38.500 --> 00:00:48.420
And if you'd like to connect with us, you can, or suggest topics, please feel free to send us an email or head on over to either Mastodon or Blue Sky.

00:00:48.970 --> 00:00:52.760
And the links to both of us and the show are in the show notes.

00:00:53.780 --> 00:01:23.060
and you can join this episode live or join it live usually Mondays at 10 but sometimes other times but head on over to pythonbytes.fm to sign up and see the schedule for the next one but also that's on YouTube so you can watch them later if you'd like and I'd also like to encourage people to sign up for the newsletter we send out a weekly email with all the links from the show plus background information and it's a lot of fun.

00:01:23.380 --> 00:01:24.160
So check that out.

00:01:25.659 --> 00:01:30.000
Also, I think it'd be cool to have a cool first topic, Michael.

00:01:30.600 --> 00:01:30.940
What you got?

00:01:32.160 --> 00:01:37.220
This was a nice, easy one, easy to adopt, easy to appreciate, I think.

00:01:37.720 --> 00:01:46.600
So you and I, we spend a lot of time talking about here's the new things for this and here's the new thing for Python and here's the new features, the next version and test the alpha, test the beta.

00:01:47.460 --> 00:01:51.360
And we also talk about when they go out of support, but I don't know how you feel.

00:01:51.400 --> 00:01:54.520
So I often, that sneaks up on me.

00:01:55.520 --> 00:01:58.040
I mean, the fact that 3.8 is out of support seemed wrong.

00:01:58.640 --> 00:01:58.720
Yeah.

00:01:58.880 --> 00:02:00.020
But it is, you know what I mean?

00:02:00.540 --> 00:02:00.600
Yeah.

00:02:00.840 --> 00:02:05.060
And so you might be sitting at your terminal just going, what's that status again?

00:02:06.000 --> 00:02:11.160
And so I present to you PIREL, P-I-R-E-L.

00:02:11.760 --> 00:02:16.220
And what it is it's the release cycle of Python at your fingertips.

00:02:17.220 --> 00:02:17.420
Ooh.

00:02:18.120 --> 00:02:18.500
Yeah, so

00:02:18.500 --> 00:02:21.280
there's a little graphic here, I suppose.

00:02:22.580 --> 00:02:24.560
We could open up the image full size, perhaps.

00:02:25.760 --> 00:02:27.460
And you just type whatever.

00:02:27.640 --> 00:02:41.240
It doesn't matter how you have Python active, if it's the system one or if it's a virtual environment one, you can write Pyrelle check, and it'll give you a nice summary of what's going on here.

00:02:41.260 --> 00:02:48.800
It can say you're using Python 3.13, which is actively maintained, and it will be this good for this long.

00:02:49.440 --> 00:02:59.280
You can say Pyrelle list, and it'll give you a list of all of the last 10 or so versions, when they came and when they went.

00:03:00.660 --> 00:03:01.780
So it's pretty cool.

00:03:01.880 --> 00:03:08.820
I mean, that's more or less what it does, but it tells you that you can go get a new Python version if yours is getting older.

00:03:09.060 --> 00:03:10.260
And the status as well.

00:03:10.420 --> 00:03:12.300
Is it still getting feature updates?

00:03:12.880 --> 00:03:13.980
Is it in bug fix level?

00:03:14.280 --> 00:03:15.200
Is it security fixes?

00:03:15.580 --> 00:03:16.620
Or is it YOLO?

00:03:17.080 --> 00:03:17.800
I just can't be

00:03:17.800 --> 00:03:18.160
bothered.

00:03:19.500 --> 00:03:19.780
Out of.

00:03:20.720 --> 00:03:21.840
Anyway, that's what this is.

00:03:22.200 --> 00:03:22.580
What do you think?

00:03:23.020 --> 00:03:24.180
I think that's pretty fun.

00:03:25.000 --> 00:03:25.240
Yeah.

00:03:25.680 --> 00:03:26.080
Awesome.

00:03:26.980 --> 00:03:27.100
Yeah.

00:03:27.480 --> 00:03:27.760
Yeah.

00:03:27.880 --> 00:03:31.480
And it uses the rocket emoji, which will make a reappearance.

00:03:32.080 --> 00:03:32.180
Right?

00:03:32.660 --> 00:03:32.840
Yeah.

00:03:33.360 --> 00:03:34.320
I do like the rocket emoji.

00:03:35.320 --> 00:03:35.520
Indeed.

00:03:36.760 --> 00:03:44.580
So there's a little bit else you can do with it, though it does not particularly interest me as a tool.

00:03:45.140 --> 00:03:45.460
Nonetheless.

00:03:46.440 --> 00:03:58.200
You can also type Pyroguess, and it will do things like give you various trivia about the release history of Python.

00:03:58.660 --> 00:04:01.460
So, for example, it might ask, when was Python 3.11 released?

00:04:01.520 --> 00:04:03.400
Or who is the release manager for 3.6?

00:04:04.140 --> 00:04:08.320
And it gives you a multi-choice select, and you can pick, and it'll tell you if you're right or wrong.

00:04:08.320 --> 00:04:14.180
So if you like Python release history and seen the details, you can do that.

00:04:14.580 --> 00:04:17.799
But I think the payroll list and the payroll check is pretty cool.

00:04:19.079 --> 00:04:20.079
Yeah, I like it.

00:04:20.780 --> 00:04:20.940
Neat.

00:04:21.500 --> 00:04:21.600
Yeah,

00:04:21.880 --> 00:04:22.180
that's it.

00:04:23.380 --> 00:04:23.640
All right.

00:04:23.970 --> 00:04:28.400
Well, I want to cover something that we've covered before, kind of.

00:04:29.040 --> 00:04:30.580
Ooh, back to the future.

00:04:30.960 --> 00:04:33.060
Back to, we're going to go back in time.

00:04:33.700 --> 00:04:36.740
This is episode 123, which, when was that?

00:04:37.150 --> 00:04:40.640
That was like in May 26, 2019.

00:04:40.970 --> 00:04:43.660
We recorded it, and it came out on the 29th.

00:04:44.160 --> 00:04:45.240
Brian, we had no idea.

00:04:45.900 --> 00:04:47.660
Things were different back then, 2019.

00:04:48.180 --> 00:04:49.640
2019, different world.

00:04:50.660 --> 00:05:03.540
But one of the things that started in that was when we announced, well, we didn't announce it, but we covered it on the show way back in 2019, the introduction of FastAPI.

00:05:03.640 --> 00:05:04.920
So we talked about it.

00:05:04.940 --> 00:05:07.440
This new cool web framework called FastAPI.

00:05:08.160 --> 00:05:15.920
Well, FastAPI has been growing, and it's now the number one web framework, not just across Python, but across everything.

00:05:16.360 --> 00:05:19.620
So it's been an incredible thing to watch.

00:05:20.320 --> 00:05:21.440
Some great work out there.

00:05:21.910 --> 00:05:39.520
Well, today, Sebastian Ramirez, the dude that created FastAPI in the first place, he announced that he is forming FastAPI Labs, a new company, and that they are, the FastAPI Labs is a new company, and they're building FastAPI Cloud.

00:05:40.680 --> 00:05:42.180
So we're going to take a look.

00:05:42.820 --> 00:05:43.800
What does this mean?

00:05:44.300 --> 00:05:46.800
It kind of means that you just get to build your fast.

00:05:46.940 --> 00:05:56.320
If you do this, the promise is you build a FastAPI application and you can just deploy it with FastAPI deploy, just a single line.

00:05:57.020 --> 00:06:04.500
And then they'll host it on their, like a subdomain of the fastAPICloud.dev.

00:06:05.120 --> 00:06:07.280
So kind of interesting.

00:06:08.340 --> 00:06:09.180
I'm intrigued.

00:06:09.500 --> 00:06:11.160
So I've definitely joined the wait list.

00:06:12.060 --> 00:06:17.360
There is an announcement blog post by the same team behind FastAPI.

00:06:17.880 --> 00:06:19.580
So this is kind of incredible.

00:06:20.080 --> 00:06:25.480
He's built FastAPI up, and it's not just Sebastian now.

00:06:25.580 --> 00:06:26.680
There's other people working on it.

00:06:27.080 --> 00:06:32.300
It's built on top of Pydantic and a couple of cool things that I can't remember.

00:06:33.260 --> 00:06:40.720
But the team is, the blog post talks about the problems of deploying to the cloud.

00:06:40.850 --> 00:06:49.820
Now, there is documentation on the FastAPI, and we've often commented that the FastAPI documentation is excellent.

00:06:50.040 --> 00:06:51.700
They've done a great job with documentation.

00:06:52.560 --> 00:07:00.220
But it is not trivial to really deploy anything anymore, aside from maybe a static site.

00:07:00.900 --> 00:07:07.500
But you have to get concerned with a lot of stuff, especially if you start growing with security.

00:07:07.670 --> 00:07:10.460
And so they are looking at that security bit.

00:07:11.350 --> 00:07:29.080
So far it looks like Patrick Armino, Alejandro Sanchez, Sophie van Langen, sorry, and Sebastian, and probably more.

00:07:29.620 --> 00:07:32.020
I'm not sure if that's part of the team or if that's just...

00:07:32.520 --> 00:07:34.000
Anyway, they might be...

00:07:34.000 --> 00:07:39.380
I don't know how many people are in the company right now, but he's promising to keep FastAPI open source.

00:07:40.180 --> 00:07:47.240
And also, interesting in this is that he doesn't want to have vendor lock-in.

00:07:47.460 --> 00:07:56.820
So whatever processes they build up, it won't make it so that you're stuck with FastAPI with their hosting.

00:07:57.280 --> 00:07:57.420
So

00:07:57.420 --> 00:07:59.260
essentially, this is hosting for FastAPI.

00:07:59.560 --> 00:08:00.800
So kind of neat.

00:08:01.640 --> 00:08:04.720
Yeah, congratulations, Sebastian and crew.

00:08:04.860 --> 00:08:05.140
That's awesome.

00:08:06.020 --> 00:08:06.200
Yeah.

00:08:07.480 --> 00:08:09.360
It is a hassle to deploy things.

00:08:09.530 --> 00:08:14.260
And presumably these folks know the best way to host FastAPI.

00:08:15.160 --> 00:08:20.120
FastAPI might be tuned for the infrastructure that they choose over time.

00:08:21.040 --> 00:08:22.360
I'll have to look more into this.

00:08:23.150 --> 00:08:25.540
Like how do you host a database and things like that.

00:08:25.600 --> 00:08:37.560
But presumably you can do things like use a CNAME for your app at fastapicloud.com and get your own domain name and all that sort of stuff.

00:08:37.719 --> 00:08:38.840
But very interesting.

00:08:39.680 --> 00:08:40.719
Yeah, it is.

00:08:40.969 --> 00:08:47.480
Also, interestingly, that was the first thing I thought is like, well, I probably don't want to use their domain.

00:08:48.160 --> 00:08:54.040
But for an API endpoint for some internal tools and stuff, I might not care.

00:08:55.500 --> 00:08:58.460
So I think some people That's a good point.

00:08:59.100 --> 00:09:07.620
Yeah, you would care a whole lot less, right, if it's just an API and it's not like your landing page or whatever. Yeah. Yeah.

00:09:08.180 --> 00:09:08.380
Anyway.

00:09:08.520 --> 00:09:08.640
Cool.

00:09:09.120 --> 00:09:09.440
Cool stuff.

00:09:10.279 --> 00:09:10.720
Absolutely.

00:09:12.420 --> 00:09:13.900
Well, what else is cool, Brian?

00:09:15.380 --> 00:09:17.580
What? NordLayer.

00:09:17.690 --> 00:09:23.460
Let me tell everyone about our sponsor and NordLayer here. So NordLayer is actually a pretty neat product.

00:09:23.720 --> 00:09:26.740
And this episode of Python Bytes is brought to you by NordLayer.

00:09:28.020 --> 00:09:40.040
So it's a toggle-ready network security platform for modern businesses and combines VPNs, like you would expect, of course, from the parent company, Nord.

00:09:40.600 --> 00:09:49.280
However, it's also access control, threat protection, visibility into what's happening in case you spot some sort of malware.

00:09:49.680 --> 00:09:51.340
All of those in one easy-to-use platform.

00:09:51.640 --> 00:09:52.960
There's no hardware, no complex setup.

00:09:53.740 --> 00:09:57.040
just secure connections and full control in less than 10 minutes.

00:09:57.720 --> 00:10:02.160
So it's easy to start with quick deployment, step-by-step onboarding, 24-7 support.

00:10:02.940 --> 00:10:03.800
It's easy to combine.

00:10:04.160 --> 00:10:07.280
It works with existing setups in all major platforms.

00:10:07.780 --> 00:10:09.280
And NordLater is easy to scale.

00:10:09.980 --> 00:10:13.520
Just add users, features, servers in a few clicks.

00:10:14.160 --> 00:10:15.840
SSO and provisioning included.

00:10:17.540 --> 00:10:21.080
If you want zero-trust network access, you got it.

00:10:21.300 --> 00:10:24.980
It provides those network zero-trust solutions.

00:10:25.840 --> 00:10:31.920
It adds threat protection to keep malware, ransomware, and phishing from reaching your endpoints, including servers.

00:10:32.090 --> 00:10:32.760
How cool is that?

00:10:33.240 --> 00:10:40.960
Increases your threat intelligence to spot threats before they escalate and helps businesses achieve things like HIPAA compliance and stuff.

00:10:41.860 --> 00:10:48.280
So if you're responsible for security of your software or data science team, you should definitely give NordLayer a look.

00:10:49.200 --> 00:11:02.500
As Python Bytes listeners, you get an exclusive offer of up to 22% off NordLayer yearly plans plus 10% off the top with a coupon, and that coupon is Python Bytes-10.

00:11:03.220 --> 00:11:09.040
If you visit the link in your show notes, there's a landing page, and it gives you the code right there.

00:11:09.280 --> 00:11:11.160
So Python Bytes-10.

00:11:11.760 --> 00:11:14.680
Try NordLayer risk-free with their 14-day money-back guarantee.

00:11:15.080 --> 00:11:17.940
Visit pythonbytes.fm slash NordLayer to get started.

00:11:18.560 --> 00:11:20.180
Link is in your podcast blur show notes.

00:11:20.960 --> 00:11:22.780
Thank you to NordLayer for supporting the show.

00:11:27.180 --> 00:11:27.440
All right.

00:11:29.679 --> 00:11:35.280
Next, going back in time, a little less in time, this is just a couple episodes ago.

00:11:35.490 --> 00:11:39.380
In episode 428, we covered t-strings.

00:11:39.800 --> 00:11:44.060
So t-strings are going to come in 3.14 in the Pi release.

00:11:46.140 --> 00:12:16.560
there is one of the authors Dave Beck or Dave Peck sorry Dave wrote an article about the Python's new t-strings and I'm kind of excited about it because when we talked about it on the show I'm excited about them but I also they're like template strings but how are they different than f-strings when would I use one over the other and I got all these answers in this blog post so he talks about what's the big idea of t-strings.

00:12:17.380 --> 00:12:23.600
And interestingly enough, we've loved f-strings so much that they're used inappropriately.

00:12:24.010 --> 00:12:26.840
And I didn't really realize that there's security problems.

00:12:27.480 --> 00:12:38.700
So there's like he comments on using f-strings to take user data, user input, and fill in like maybe a SQL statement.

00:12:39.700 --> 00:12:40.520
Don't do that.

00:12:41.280 --> 00:12:43.960
You want to clean your user input first.

00:12:45.360 --> 00:12:50.640
So people have been using it or possibly to use it to generate a web page.

00:12:50.760 --> 00:13:04.220
So you've got a possibility of somebody inserting cross-site scripting or other bad things that you don't expect by just sticking user data into HTML.

00:13:04.560 --> 00:13:09.400
So misusing f-strings is one of the reasons why t-strings are kind of a cool thing.

00:13:10.080 --> 00:13:15.600
So the template strings are a generalization of f-strings, and they keep things separate.

00:13:15.660 --> 00:13:27.260
So f-strings actually create a string, but t-strings don't create, when you create a T string, you don't get a T string, you get a, or a string, you get a template object.

00:13:28.000 --> 00:13:30.820
And this template object has these two separate things.

00:13:31.000 --> 00:13:39.160
You've got, it's got a, I'm going to scroll down, it's got a strings section and a values.

00:13:39.720 --> 00:13:46.240
And so it keeps, they're both tuples of things, of what's inside of it.

00:13:46.760 --> 00:13:47.880
And you can iterate through them.

00:13:48.060 --> 00:13:51.780
There's all sorts of cool stuff you can do with templates, these template strings.

00:13:52.440 --> 00:13:57.820
But this is a nice, really good walkthrough of kind of what's inside and why they're different than fstrings.

00:13:57.880 --> 00:13:58.860
They're very different now.

00:14:01.760 --> 00:14:06.560
But talking about there's inside, there's a, what's the value?

00:14:06.820 --> 00:14:10.460
There's a, interpolations are a thing that's in there.

00:14:10.580 --> 00:14:15.560
So you might have, it might be a string, it might be other, it might be something else.

00:14:16.920 --> 00:14:19.460
And the interpolations have all the pieces in place.

00:14:20.240 --> 00:14:35.280
And you can even dive really deep into it and have things like what's the, what the value of the variable that you passed in, the expression name, the conversion, the format specifier, even if you've got format specifiers on it.

00:14:36.680 --> 00:14:43.700
And this is all sorts of nitty gritty detail, but the gist I'm taking away is they're just really kept separate.

00:14:43.830 --> 00:14:49.400
So you've got like the template and the things you're passing into the template as completely separate things.

00:14:50.080 --> 00:14:50.740
Why is that great?

00:14:51.200 --> 00:15:04.220
Well, one of the great things about that is you can, like in the example of SQL or HTML, you can take the user data and check all of that and run things over it.

00:15:04.260 --> 00:15:11.260
So if you've got user data and you expected a string, you expected people to not be nefarious about it.

00:15:11.720 --> 00:15:26.560
You can do like a safe HTML or something, convert like the brackets into something else, strip out SQL statements so that they're not, it's not a, you know, escape things, escaping things and making them cleaner.

00:15:27.380 --> 00:15:29.720
One fun example in this, I love this.

00:15:29.920 --> 00:15:33.820
A fun example is how to create PigLatin.

00:15:34.240 --> 00:15:35.840
using template strings.

00:15:36.600 --> 00:15:41.320
And so there's like this pig Latin converter that takes a template and returns a string.

00:15:41.620 --> 00:15:55.900
So you're able to have like a hello world and then you run pig Latin on the template and it converts the template into, if you have these converter functions, you can convert into actual string.

00:15:56.660 --> 00:16:22.080
And I kind of, okay, I went down a rabbit hole on this because this example says to convert, I kind of forgot the rules of Pig Latin because it's been a while since I've been a kid, but it says essentially if the first character is a vowel, if the words in the word, the first character is a vowel, then you append yay on the end.

00:16:22.550 --> 00:16:31.240
But if it's not a vowel, you take the rest of the word and take the first character and put it at the end and say A.

00:16:31.890 --> 00:16:33.320
And I don't think that's correct.

00:16:33.510 --> 00:16:36.460
Or I think it might be correct, but I forgot the rules.

00:16:37.000 --> 00:16:37.880
So I looked it up.

00:16:38.500 --> 00:16:46.800
And PigLatin, sorry about this, but PigLatin, it says that it's not just the first constant, but it's the first constant cluster.

00:16:47.050 --> 00:16:48.980
So I don't think this is the correct implementation.

00:16:51.300 --> 00:16:51.400
Well,

00:16:51.660 --> 00:16:52.720
it might be the one that

00:16:52.720 --> 00:16:53.500
fits on one screen.

00:16:54.120 --> 00:16:54.280
Yeah.

00:16:55.000 --> 00:17:00.980
So Brian would translate into Ian Bray, not Ryan Bay.

00:17:02.520 --> 00:17:03.160
You know, anyway.

00:17:03.820 --> 00:17:05.560
Okay, diversion, but anyway.

00:17:06.300 --> 00:17:20.640
So there's some great ideas for when we finally have t-strings and we ship Python 3.14, we can do things like possibly having everything more safer, more flexible.

00:17:21.459 --> 00:17:25.260
One of the things that's coming up possibly is, oh, where'd he go?

00:17:26.740 --> 00:17:27.260
787.

00:17:27.740 --> 00:17:35.760
So there's a proposal for safer subprocess usage with like Schlex and subpros, which I love Schlex.

00:17:36.330 --> 00:17:42.280
But you could use a, if those could be implemented with t-strings, they'd be a lot safer.

00:17:42.410 --> 00:17:45.660
So there are some security vulnerabilities in these things.

00:17:45.940 --> 00:17:47.780
So it could simplify the

00:17:47.780 --> 00:17:47.960
implementation.

00:17:47.960 --> 00:17:52.500
Right. You don't want to ampersand, ampersand, do other thing as part of your command, right?

00:17:53.100 --> 00:17:53.360
Yeah.

00:17:53.740 --> 00:18:17.140
So having a lot of things that do take user input and create other things, having them use t-strings and having some quick, safe conversions, instead of having to convert user data ahead of time, you just grab the user data and stick it in a template string, and then later in your pipeline, clean up the user data.

00:18:17.680 --> 00:18:18.540
Those are pretty cool things.

00:18:19.280 --> 00:18:21.820
There's also some attribute things.

00:18:22.660 --> 00:18:31.080
There's other ways you can, since they're separate, all the way until you do the conversion, you can do some cool attribute things that he covers in the article too.

00:18:31.360 --> 00:18:31.480
So

00:18:31.480 --> 00:18:32.040
anyway.

00:18:32.320 --> 00:18:33.480
Yeah, looks like a great article.

00:18:34.120 --> 00:18:34.400
Thanks, Dave.

00:18:35.500 --> 00:18:45.420
I'm going to have Paul Everett on Talk Python this week, next week, to talk about t-strings.

00:18:46.220 --> 00:18:46.980
Oh, perfect.

00:18:47.100 --> 00:18:47.620
Yeah, we're going to

00:18:47.620 --> 00:18:48.220
be diving into

00:18:48.220 --> 00:18:48.660
it some more.

00:18:48.720 --> 00:18:49.240
Yeah, it should be fun.

00:18:49.720 --> 00:18:49.940
Nice.

00:18:52.420 --> 00:19:03.620
Indeed. Let's go back to the terminal. And this one, I think, is also pretty interesting, especially if you're learning the terminal or you're just like, how do I do that again?

00:19:04.560 --> 00:19:05.860
Zev. Have you heard of Zev?

00:19:06.660 --> 00:19:07.100
No.

00:19:07.420 --> 00:19:11.240
It's a simple CLI tool that helps you remember terminal commands.

00:19:12.160 --> 00:19:24.040
So if you're sitting here and you're like, you know, I don't really know what I'm doing with this stuff, I can type Zev and it says, what do you want to do? It says, show all files in this directory with human readable sizes.

00:19:24.740 --> 00:19:25.860
And it says, okay, great.

00:19:26.120 --> 00:19:27.320
Here are a couple of things you could do.

00:19:27.810 --> 00:19:34.620
And it gives you a select list like ls-lh or I think it was find is one of the options.

00:19:35.060 --> 00:19:38.700
But basically it gives you a bunch of options to do those types of things.

00:19:39.180 --> 00:19:40.340
And off it goes.

00:19:41.600 --> 00:19:42.140
Pretty cool, right?

00:19:43.400 --> 00:19:43.560
Yeah.

00:19:44.500 --> 00:19:44.680
Yeah.

00:19:46.460 --> 00:19:55.420
So this project runs on top of LLM APIs like OpenAI, Google Gemini, or local Olama.

00:19:56.080 --> 00:19:59.880
So basically it sends that command over and then it looks at all the responses.

00:20:00.440 --> 00:20:03.800
But it probably does a bunch of work to format it for you.

00:20:03.880 --> 00:20:09.500
But more importantly, it puts it right there in your terminal where you can just select the answer and hit enter.

00:20:09.580 --> 00:20:15.340
You don't have to go to chat, copy it, move it back over, run it.

00:20:15.440 --> 00:20:17.100
You know, like that sort of round tripping.

00:20:18.760 --> 00:20:19.480
Yeah, okay.

00:20:21.320 --> 00:20:37.220
Yeah, so suggestions that you might use are like show all running Python processes, find all Python files modified in the last 24 hours, show disk usage for the current directory, check if google.com is reachable, et cetera, et cetera.

00:20:37.520 --> 00:20:39.740
So, yeah, pretty neat.

00:20:40.620 --> 00:20:45.700
It does say everything's generated by LLMs, so careful.

00:20:47.980 --> 00:20:52.040
Because you know how it goes, right?

00:20:52.130 --> 00:20:58.160
It could be delete all files like this in this directory, and in this directory part gets forgotten.

00:21:00.520 --> 00:21:02.820
rm-rf star, okay.

00:21:05.240 --> 00:21:05.840
Slash star.

00:21:06.900 --> 00:21:07.460
Slash star.

00:21:08.680 --> 00:21:10.960
Anyway, super simple, but you set up an LLM provider.

00:21:11.210 --> 00:21:23.080
I recently wrote a really cool program that I'm, program, utility, simple tool, that I use that I'm thinking of making public somehow, but I also don't need another thing to babysit.

00:21:23.940 --> 00:21:37.080
But basically, if you're in a Git repository, you can just hit a command, and it will look at all the new files, the change files, and then correlate that with a local LLM, coding-based LLM.

00:21:37.080 --> 00:21:46.300
It says, create me a Git summary of everything, like the header and then actually a detailed summary, and what happened if you forgot all the things you did.

00:21:46.860 --> 00:21:48.660
A little bit like this, but that's not out yet.

00:21:48.810 --> 00:21:49.340
But this is cool.

00:21:49.340 --> 00:21:50.120
I like tools like this.

00:21:50.260 --> 00:21:53.160
Like, what did I do on Friday to run on Monday?

00:21:53.660 --> 00:21:54.100
Yeah, exactly.

00:21:54.430 --> 00:21:55.160
You could totally do it.

00:21:55.280 --> 00:21:57.140
And it improves it in this way.

00:21:57.200 --> 00:21:58.860
You're like, oh, gosh, I did improve it in that way.

00:21:58.940 --> 00:21:59.500
Look at the show.

00:21:59.660 --> 00:22:00.320
Aren't I smart?

00:22:03.580 --> 00:22:13.780
And before we carry on looping back to your topic, the t-strings, Henry Schreiner writes, I've been wondering if this could be supported in the logging module.

00:22:14.170 --> 00:22:16.220
Since it's an actual type, it could be detected.

00:22:16.600 --> 00:22:16.760
Yeah.

00:22:16.800 --> 00:22:16.880
Yeah,

00:22:16.940 --> 00:22:17.780
that would be cool, right?

00:22:18.100 --> 00:22:23.000
Maybe have a slightly different output with more information about the parts of the string.

00:22:25.360 --> 00:22:25.560
Yeah.

00:22:26.840 --> 00:22:26.960
Indeed.

00:22:27.560 --> 00:22:27.800
All right.

00:22:31.960 --> 00:22:33.540
Well, we're back to extras.

00:22:34.320 --> 00:22:35.620
I really should have put up.

00:22:35.760 --> 00:22:52.540
So one of the things I didn't cover about the t-strings, we'll get to my extra first, or second, But in the T-string article, there is a link to a whole bunch of examples of other non-silly examples of t-strings.

00:22:53.000 --> 00:22:56.860
We did this big Latin in the article, but there's a bunch of others too.

00:22:57.200 --> 00:23:01.880
And one of them is a treatment of logging with t-strings.

00:23:02.080 --> 00:23:02.820
So check that out.

00:23:04.260 --> 00:23:14.740
My extra really is I kind of went – speaking of rabbit holes, found out Monty Python and the Holy Grail turns 50 this year.

00:23:15.100 --> 00:23:16.640
So 50 years ago, Monty Python.

00:23:16.730 --> 00:23:17.500
I can't believe that.

00:23:18.660 --> 00:23:20.020
Bring out the holy hand grenade.

00:23:23.120 --> 00:23:28.460
But one of the comments in here, which is, this is, I'm linking to an Ars Technica article.

00:23:30.120 --> 00:23:38.960
And I learned a new word today, because it says they were, Monty Python and the Holy Grail were nerd gassing before it was cool.

00:23:39.580 --> 00:23:41.440
So they were talking about nerd gassing.

00:23:42.780 --> 00:23:50.480
And one of the wonderful discussions in the movie is using coconuts.

00:23:51.400 --> 00:23:53.100
Because they're supposedly riding horses.

00:23:54.760 --> 00:23:56.880
Yeah, there's just some guy banging coconuts.

00:23:57.360 --> 00:24:00.480
And somebody stops and says, like, where did you get the coconuts?

00:24:00.640 --> 00:24:01.560
Oh, we found them.

00:24:02.080 --> 00:24:05.440
No, you couldn't have found them because, like, they're not native to England.

00:24:05.700 --> 00:24:06.060
They're tropical.

00:24:07.240 --> 00:24:09.380
So great discussion about coconuts.

00:24:09.900 --> 00:24:23.260
And apparently that is nerd gassing. I didn't know the term, so I looked that up. Nerd gassing was coined in 2008 by John Scalzi, a sci-fi author and blogger.

00:24:24.580 --> 00:24:41.860
And nerd gassing is the venting nerd, venting, the venting that nerds emit when some often minor detail of a book or movie or TV show, comic book, et cetera, either conflicts with canon or hand waves through some suspect science.

00:24:42.430 --> 00:24:51.180
And so I was totally nerd gassing in the, in one of our topics when I went off on what the correct rules for pig Latin are.

00:24:51.450 --> 00:24:51.600
So,

00:24:51.790 --> 00:24:54.140
yes, that's, you were.

00:24:54.780 --> 00:25:00.960
And I do the same thing when people mess up that quote from Captain Picard about may the force be with you.

00:25:01.250 --> 00:25:02.760
Okay, so let's go on to the next.

00:25:05.520 --> 00:25:05.740
Nice.

00:25:06.800 --> 00:25:07.160
Please

00:25:07.160 --> 00:25:08.400
write us and tell me that that's wrong.

00:25:08.620 --> 00:25:10.380
All right, this is it for your extras?

00:25:11.100 --> 00:25:11.240
Yeah.

00:25:12.340 --> 00:25:19.660
I would like to also point out for those as a follow-up who don't know, because Python, the community, has done a poor job of this.

00:25:22.140 --> 00:25:29.200
All the logos for Python are snakes, but the name Python came from Monty Python, which is why it's relevant on this show.

00:25:29.880 --> 00:25:30.120
Yes.

00:25:31.400 --> 00:25:31.640
Yes.

00:25:32.040 --> 00:25:34.960
And that's why we have wheels, because they're wheels of cheese.

00:25:35.680 --> 00:25:37.240
And the cheese shop for PyPI.

00:25:38.760 --> 00:25:39.500
The cheese skit.

00:25:39.760 --> 00:25:44.260
And if you haven't seen the cheese skit from Monty Python, you have to go watch the cheese skit, because

00:25:44.260 --> 00:25:44.700
it's awesome.

00:25:45.280 --> 00:25:47.240
The rabbit part is my favorite by far.

00:25:47.360 --> 00:25:47.500
Okay.

00:25:50.280 --> 00:25:50.640
Here's a quote.

00:25:50.640 --> 00:25:51.260
This is not the joke.

00:25:51.380 --> 00:25:52.120
This is actually a real thing.

00:25:52.860 --> 00:25:58.520
So it has a picture of Firefox, and it says, you either die a hero or you live long enough to see yourself become a villain.

00:25:59.200 --> 00:26:04.600
And underneath it, it shows the preferences in Firefox for website advertising.

00:26:05.520 --> 00:26:09.280
Allow websites to perform privacy-preserving ad measurement.

00:26:10.560 --> 00:26:14.420
This helps the site understand how their ads perform, et cetera, et cetera.

00:26:14.800 --> 00:26:16.680
Like this is built into Firefox now.

00:26:16.800 --> 00:26:27.180
There was like some terms and use changes about how the stuff you submit in Firefox is now being used and being shared and so on.

00:26:27.440 --> 00:26:28.760
And, oh, right?

00:26:29.060 --> 00:26:41.640
Firefox was like one of the last bastions of privacy, like real privacy, the antithesis of Chrome, which is, you know, tracking and correlating and reselling everything.

00:26:42.300 --> 00:26:42.420
Yeah.

00:26:43.560 --> 00:26:49.220
So both Brian and me, we care about these things.

00:26:49.580 --> 00:26:51.940
And for example, Brian used Vivaldi.

00:26:52.040 --> 00:26:53.880
I use Vivaldi quite a bit.

00:26:54.150 --> 00:26:57.100
But I also started using Zen, Zen Browser.

00:26:57.260 --> 00:26:58.700
That's what's actually on the screen right now.

00:26:58.730 --> 00:27:03.520
And I love Zen Browser because it's such a clean, nice little layout.

00:27:04.360 --> 00:27:06.220
And it's based on Firefox as well.

00:27:06.220 --> 00:27:17.320
So when this stuff got announced 10 months ago or whenever it was, There was over on the Zen browser GitHub repo, there was like, so what is Zen going to do about this?

00:27:17.600 --> 00:27:25.020
And at the time, there wasn't a lot of clarity, but now Zen 1.2.1 is out and it's got some features.

00:27:26.060 --> 00:27:31.420
One of the things that we said, if you go read the full release notes, it's got some new features.

00:27:31.740 --> 00:27:39.880
But in response to recent privacy concerns, bracket about Firefox, we've significantly strengthened Zen's privacy measures.

00:27:40.600 --> 00:27:44.520
Previously, we only disabled telemetry, but other things were being done.

00:27:45.680 --> 00:27:50.260
Now Firefox telemetry has been completely stripped out of this.

00:27:50.810 --> 00:28:03.200
Basically, much like Vivaldi de-Google-ifies Chrome, Zen has had to go to the step of actually de-Mozilla-fying?

00:28:03.350 --> 00:28:03.720
I don't know.

00:28:03.730 --> 00:28:03.880
Whatever.

00:28:04.080 --> 00:28:05.120
What is the term here?

00:28:06.200 --> 00:28:07.100
Extracting evil.

00:28:08.480 --> 00:28:15.040
Extracting the in, poopification of, yeah.

00:28:15.550 --> 00:28:19.120
And I don't necessarily blame Firefox.

00:28:19.620 --> 00:28:20.500
They are in a tough spot.

00:28:20.660 --> 00:28:31.940
They've squandered their position quite badly for quite a long time, such that if the ruling against Google goes through, they lose 90% of their revenue overnight.

00:28:32.880 --> 00:28:33.480
That's a problem.

00:28:34.080 --> 00:28:39.200
But they're also doing good things like starting to create, like docs alternatives that we've covered before.

00:28:39.740 --> 00:28:41.580
But, you know,

00:28:43.540 --> 00:28:44.100
I guess things

00:28:44.100 --> 00:28:49.180
must be, people must be resold and ads must be put upon people.

00:28:49.880 --> 00:28:51.820
And that's the way it seems to be.

00:28:51.840 --> 00:28:52.220
I don't know.

00:28:52.240 --> 00:28:53.600
I don't agree with it, but that's how it is.

00:28:54.240 --> 00:28:55.940
Anyway, I'm happy to see Zen Browser do this.

00:28:57.060 --> 00:29:09.300
Yeah, there's also a ton of cool, well, there are a handful at least of cool pytest plugins that I use that started in Mozilla.

00:29:09.760 --> 00:29:09.940
So

00:29:09.940 --> 00:29:11.600
there's

00:29:11.600 --> 00:29:13.740
lots of great people that have worked there over the years.

00:29:14.220 --> 00:29:15.260
And I'm sure still do.

00:29:15.520 --> 00:29:15.680
A lot

00:29:15.680 --> 00:29:15.940
of people

00:29:15.940 --> 00:29:16.100
do.

00:29:16.860 --> 00:29:23.540
And I suspect not all of them are super psyched about turning on all the ad stuff, right?

00:29:24.380 --> 00:29:25.200
It's like I'm sure

00:29:25.200 --> 00:29:30.340
there's people that still work at Google that don't think they should have removed don't be evil from their tagline.

00:29:31.880 --> 00:29:32.840
Yeah, but those people are evil.

00:29:33.040 --> 00:29:33.720
Okay, let's keep going.

00:29:34.940 --> 00:29:37.200
just kidding just kidding please don't email me

00:29:38.340 --> 00:29:39.180
email him

00:29:39.680 --> 00:29:40.140
it's Michael

00:29:40.140 --> 00:29:40.740
at

00:29:45.020 --> 00:30:08.660
testingcode.com okay next or you go to jail that was such a fun episode that we did last week but I pulled up this episode not because I care about that but I've changed the way that transcripts work so previously we had transcripts are every word spoken for 30 minutes or however long the show is.

00:30:10.020 --> 00:30:11.800
And I thought, well, that should go on its own page.

00:30:11.920 --> 00:30:13.000
You can go and check it out.

00:30:13.200 --> 00:30:22.040
But I'd like you to be able to come to the page and hit Command-F and let you know what we said about, I don't know, AI or Porkbomb.

00:30:22.040 --> 00:30:24.740
We'll just pick the sponsor because it doesn't show up too many times.

00:30:24.960 --> 00:30:31.720
But now the transcripts show up on the main page just as a section farther down.

00:30:32.720 --> 00:30:33.240
You can clap them if

00:30:33.240 --> 00:30:33.480
you like.

00:30:34.340 --> 00:30:37.920
But it lets you click on the time link anywhere and play it back

00:30:37.920 --> 00:30:39.140
as you go.

00:30:39.210 --> 00:30:44.320
So if you find something in the transcript and you're like, I just want to hear it, you just click right there and boom, off it goes.

00:30:46.240 --> 00:30:51.380
Put tons of effort into making these transcripts accurate and good.

00:30:51.500 --> 00:30:52.420
They're not perfect, please.

00:30:53.010 --> 00:30:55.060
Again, don't email me and say there is an imperfection.

00:30:55.070 --> 00:30:56.600
I have discovered you were wrong.

00:30:57.270 --> 00:31:02.240
But we make a lot of effort to say things like PyPI are spelled correctly.

00:31:03.040 --> 00:31:08.000
and other words are correct in here so that when you search for them, they show up.

00:31:08.000 --> 00:31:13.420
It also powers our search engine that you can just search and even add to your browser that we've talked about before.

00:31:14.750 --> 00:31:18.120
But transcripts are slightly better and the pages are slightly more useful.

00:31:18.340 --> 00:31:19.000
So visit the website.

00:31:19.660 --> 00:31:20.900
Yeah, and that

00:31:20.900 --> 00:31:26.500
helps us track every part of your life because we know we don't do that.

00:31:27.500 --> 00:31:30.760
We need just one cookie to get it started.

00:31:30.980 --> 00:31:31.420
No, just kidding.

00:31:31.430 --> 00:31:32.060
We have no cookies.

00:31:32.740 --> 00:31:34.960
Okay, that's it for my extras Joke?

00:31:35.800 --> 00:32:02.140
Yeah This is a re-envisioning A re-envisioning of an old joke I think it's pretty good There's this person running a china shop And there's a big sign that says China shop And then above it, my code base And there's a character here Holding a giant angry looking bull by a nose ring.

00:32:03.700 --> 00:32:08.980
And the person holding it says, mind my friend comes in with me and the ball is labeled cursor.

00:32:11.560 --> 00:32:13.180
Welcome to the error of AI, huh?

00:32:13.380 --> 00:32:15.060
Just add that one feature.

00:32:15.280 --> 00:32:16.760
Sure, we only need 27 changes.

00:32:16.840 --> 00:32:17.900
You don't mind if we do, do we?

00:32:19.720 --> 00:32:20.060
Interesting.

00:32:20.380 --> 00:32:20.720
That's funny.

00:32:21.680 --> 00:32:22.800
So why is this a flashback?

00:32:22.920 --> 00:32:31.980
This joke actually comes from, this is the original one from when George W. Bush was president in the US and the China shop was not code base.

00:32:32.460 --> 00:32:34.300
The China shop was social security.

00:32:36.180 --> 00:32:36.480
Okay.

00:32:37.120 --> 00:32:38.180
Yeah, something like that.

00:32:38.440 --> 00:32:41.720
That's, I don't know, somewhere down here in this thread people talk about stuff.

00:32:41.920 --> 00:32:42.300
I don't know.

00:32:43.080 --> 00:32:44.540
Anyway, I think it's a pretty appropriate joke.

00:32:44.680 --> 00:32:45.060
It's pretty good.

00:32:46.120 --> 00:32:46.360
Yeah.

00:32:47.780 --> 00:32:47.920
Yeah,

00:32:48.300 --> 00:32:48.580
it's funny.

00:32:49.220 --> 00:32:50.220
Good, good, good point.

00:32:50.940 --> 00:32:51.520
Yeah, indeed.

00:32:52.120 --> 00:32:52.460
Indeed.

00:32:54.060 --> 00:32:55.100
All right, well, that's what I had for our joke.

00:32:55.760 --> 00:32:58.300
Not absolutely hilarious, but amusing, I think.

00:32:59.140 --> 00:33:02.740
if you want hilarious you got to go back to 430 episode 430 last week

00:33:03.480 --> 00:33:07.540
yeah yeah yeah and if you haven't listened to that you have to watch that video because it's

00:33:07.540 --> 00:33:07.900
that's right

00:33:09.500 --> 00:33:21.900
or you go to jail listen to it or you go to jail well once again wonderful episode thanks everybody for listening and we'll see everybody

00:33:21.900 --> 00:33:22.440
next week

00:33:27.440 --> 00:33:28.320
thanks bye

