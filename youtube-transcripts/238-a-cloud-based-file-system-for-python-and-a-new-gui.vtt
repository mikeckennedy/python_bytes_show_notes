WEBVTT

00:00:00.000 --> 00:00:05.000
Hey Brian, hey Julia.


00:00:05.000 --> 00:00:06.000
Hey.


00:00:06.000 --> 00:00:07.000
Hey.


00:00:07.000 --> 00:00:08.000
Hey.


00:00:08.000 --> 00:00:09.000
Happy to have you here for the podcast.


00:00:09.000 --> 00:00:12.000
Everyone in the live stream, thank you for being here.


00:00:12.000 --> 00:00:14.000
If you got comments, throw them in the live chat.


00:00:14.000 --> 00:00:15.000
We'll try to make them part of the show.


00:00:15.000 --> 00:00:18.000
And with that, let's go ahead and kick this off.


00:00:18.000 --> 00:00:21.000
Hello and welcome to Python Bytes,


00:00:21.000 --> 00:00:24.000
where we deliver Python news and headlines directly to your earbuds.


00:00:24.000 --> 00:00:28.000
This is episode 238, recorded June 15th, 2021.


00:00:28.000 --> 00:00:30.000
I'm Michael Kennedy.


00:00:30.000 --> 00:00:32.000
And I'm Brian Okken.


00:00:32.000 --> 00:00:34.000
And I'm Julia Sidnell.


00:00:34.000 --> 00:00:36.000
Hey, Julia. Thanks for coming on the show.


00:00:36.000 --> 00:00:38.000
Yeah, thanks for having me.


00:00:38.000 --> 00:00:40.000
Yeah, it's great.


00:00:40.000 --> 00:00:42.000
Why don't you tell folks a bit about yourself?


00:00:42.000 --> 00:00:44.000
Yeah, so I'm


00:00:44.000 --> 00:00:46.000
the head of open source at SaturnCloud


00:00:46.000 --> 00:00:48.000
and a maintainer of Dask.


00:00:48.000 --> 00:00:50.000
So I split my time half and half.


00:00:50.000 --> 00:00:52.000
I spend half my time just doing regular


00:00:52.000 --> 00:00:54.000
maintenance-y stuff on Dask


00:00:54.000 --> 00:00:56.000
and then half my time doing


00:00:56.000 --> 00:01:01.280
engineering and product management on Saturn Cloud. Saturn Cloud is a data science platform


00:01:01.280 --> 00:01:06.480
that really specializes in distributed DAS clusters in Jupyter and making it really easy


00:01:06.480 --> 00:01:14.880
for people to get up and going with those things on AWS. Yeah, DAS is really interesting. When I


00:01:14.880 --> 00:01:19.440
first heard about it, I thought, "Okay, this is a grid computing scale-out thing, which


00:01:19.440 --> 00:01:23.440
I probably don't have a lot of use for." But then I was speaking with Matthew Rocklin about it, and


00:01:25.120 --> 00:01:31.280
it has a lot of applicability, even if you have not huge data, huge clusters, right?


00:01:31.280 --> 00:01:33.480
Like you can say, even on your local machines,


00:01:33.480 --> 00:01:35.680
you know, let's look out across my cores or,


00:01:35.680 --> 00:01:39.360
you know, allow me to work with more data than will fit in RAM on my laptop


00:01:39.360 --> 00:01:40.560
and stuff like that, right?


00:01:40.560 --> 00:01:45.640
Yeah, it has like a whole number of different ways of interacting with it, right?


00:01:45.640 --> 00:01:49.760
Like, there's that, there's like, just make this thing go faster by parallelizing it.


00:01:49.760 --> 00:01:51.920
There's all the data framing stuff.


00:01:51.920 --> 00:01:54.840
There's all the array stuff for more dimensional data.


00:01:54.840 --> 00:01:57.640
So it's got a large API.


00:01:57.640 --> 00:01:58.480
- Yeah, cool.


00:01:58.480 --> 00:01:59.700
And we're gonna touch on a couple of topics


00:01:59.700 --> 00:02:04.700
that are not all that unrelated to those things here.


00:02:04.700 --> 00:02:08.480
And so, yeah, speaking of data science,


00:02:08.480 --> 00:02:10.240
Brian, you wanna kick us off?


00:02:10.240 --> 00:02:11.640
- Sure.


00:02:11.640 --> 00:02:14.040
Yeah, the first thing I wanna cover is an article


00:02:14.040 --> 00:02:17.480
called "Practical SQL for Data Analysis."


00:02:17.480 --> 00:02:20.520
This is by Aki Benita.


00:02:20.520 --> 00:02:25.520
So one of the things I liked about this


00:02:25.520 --> 00:02:29.000
is it was kind of talking about the first bit


00:02:29.000 --> 00:02:31.260
of the article was talking about basically


00:02:31.260 --> 00:02:35.020
that with data science, you've got pandas


00:02:35.020 --> 00:02:36.940
and NumPy and stuff.


00:02:36.940 --> 00:02:39.440
And you also often you're dealing with a database,


00:02:39.440 --> 00:02:43.200
and SQL on the back end.


00:02:43.200 --> 00:02:46.860
So the first part of the article talks about


00:02:46.860 --> 00:02:53.700
how some things you can do both in pandas and in SQL,


00:02:53.700 --> 00:02:57.260
like SQL queries, it's faster in SQL.


00:02:57.260 --> 00:03:00.460
So there's a big chunk that's just talking about how that's faster.


00:03:00.460 --> 00:03:06.700
But then he also talks about just basically,


00:03:06.700 --> 00:03:09.820
there's a lot of benefits to the flexibility


00:03:09.820 --> 00:03:12.060
and the comfortableness you can have with pandas, though.


00:03:12.060 --> 00:03:16.200
So trade-offs as to where you're going to push


00:03:16.260 --> 00:03:20.140
the push it too far into SQL or having a split is good.


00:03:20.140 --> 00:03:24.460
But then he goes through and talks about a whole bunch of great examples


00:03:24.460 --> 00:03:28.500
of different things like pivot tables and roll-ups


00:03:28.500 --> 00:03:33.220
and choices and different things you can do with either Pandas or SQL,


00:03:33.220 --> 00:03:35.500
and really what his recommendations are for


00:03:35.500 --> 00:03:38.900
whether it should be in Pandas or in SQL query,


00:03:38.900 --> 00:03:40.700
and then how to do those queries.


00:03:40.700 --> 00:03:45.060
Because really the gist of the article is,


00:03:45.060 --> 00:03:49.660
And this problem space is people are comfortable with pandas,


00:03:49.660 --> 00:03:52.220
but they don't really understand SQL queries.


00:03:52.220 --> 00:03:57.220
So this sort of good cheat sheet for how to do the queries


00:03:57.220 --> 00:04:01.260
is, I think, really kind of a cool thing.


00:04:01.260 --> 00:04:02.220
Yeah.


00:04:02.220 --> 00:04:03.500
I think it's really neat.


00:04:03.500 --> 00:04:06.540
And you have these problems.


00:04:06.540 --> 00:04:08.540
You know how to solve them in one or the other.


00:04:08.540 --> 00:04:12.500
And I think this compare and contrast is really valuable.


00:04:12.500 --> 00:04:16.680
I know how to take the mean of some column in SQL,


00:04:16.680 --> 00:04:18.080
but I haven't done it in pandas yet.


00:04:18.080 --> 00:04:19.120
Let's go see how to do that.


00:04:19.120 --> 00:04:21.640
Or I'm really good at doing pivot tables in pandas,


00:04:21.640 --> 00:04:24.540
but boy, I always kind of avoided joins in SQL.


00:04:24.540 --> 00:04:25.380
They scared me.


00:04:25.380 --> 00:04:27.300
And then how does that even translate?


00:04:27.300 --> 00:04:28.140
Right?


00:04:28.140 --> 00:04:29.780
I think that back and forth is really valuable.


00:04:29.780 --> 00:04:30.620
- Yeah.


00:04:30.620 --> 00:04:31.460
Yep.


00:04:31.460 --> 00:04:32.740
And then it covers things


00:04:32.740 --> 00:04:33.940
that I don't even know what they are,


00:04:33.940 --> 00:04:35.900
like aggregate expressions.


00:04:35.900 --> 00:04:36.980
I don't even know what that is,


00:04:36.980 --> 00:04:40.620
but apparently that's a thing that people do.


00:04:40.620 --> 00:04:42.420
- I can help you out at aggregate stuff.


00:04:42.420 --> 00:04:43.260
(laughing)


00:04:43.260 --> 00:04:44.080
Just kidding.


00:04:44.080 --> 00:04:45.220
Julia, what do you think of this?


00:04:45.220 --> 00:04:46.780
- Yeah, no, it seems, it's really cool.


00:04:46.780 --> 00:04:49.660
Like, I agree that like, that having the,


00:04:49.660 --> 00:04:51.500
having an appendix and then a SQL,


00:04:51.500 --> 00:04:53.260
that in comparison is super helpful.


00:04:53.260 --> 00:04:55.940
Like, SQL is always super scary to me.


00:04:55.940 --> 00:04:57.820
And I always end up like Googling a bunch of stuff


00:04:57.820 --> 00:05:00.660
whenever I have to mangle my SQL.


00:05:00.660 --> 00:05:01.860
But I know it's so fast,


00:05:01.860 --> 00:05:04.440
so it's cool to see a way to access that.


00:05:04.440 --> 00:05:06.380
- Yeah, absolutely.


00:05:06.380 --> 00:05:07.260
This is a good one, Brian.


00:05:07.260 --> 00:05:09.340
I think a lot of people will find it useful.


00:05:10.220 --> 00:05:13.060
I also wanna just give a quick shout out


00:05:13.060 --> 00:05:14.260
to the past a little bit.


00:05:14.260 --> 00:05:17.180
Not too long ago, we talked about efficient SQL


00:05:17.180 --> 00:05:18.660
on pandas with DuckDB,


00:05:18.660 --> 00:05:20.540
where you actually do the SQL queries


00:05:20.540 --> 00:05:23.460
against pandas data frames.


00:05:23.460 --> 00:05:26.740
So if you're finding that you're trying to do something


00:05:26.740 --> 00:05:28.480
and maybe it would be better in SQL,


00:05:28.480 --> 00:05:30.580
but you don't wanna say completely switch


00:05:30.580 --> 00:05:33.020
all your data over to a relational database,


00:05:33.020 --> 00:05:34.660
you just kinda wanna stay in the panda side.


00:05:34.660 --> 00:05:36.660
But there's that one or two things,


00:05:36.660 --> 00:05:37.860
like this is really cool,


00:05:37.860 --> 00:05:42.860
this sort of upgrade your data frame to execute SQL


00:05:42.860 --> 00:05:46.740
with the DuckDB query optimizer


00:05:46.740 --> 00:05:49.980
is also a kind of a nice intermediary there.


00:05:49.980 --> 00:05:52.220
- Yeah, Dask also does some,


00:05:52.220 --> 00:05:53.940
I'm gonna try not to make everything about Dask,


00:05:53.940 --> 00:05:56.980
but Dask does some things that are kind of,


00:05:56.980 --> 00:05:59.500
that kind of take some of the ideas in this article


00:05:59.500 --> 00:06:01.660
of like doing predicate pushdown of like,


00:06:01.660 --> 00:06:05.820
of pushing down some of the like filters into the read


00:06:05.820 --> 00:06:08.200
because it evaluates lazily,


00:06:08.200 --> 00:06:10.920
it doesn't have to like grab all the data greedily up front,


00:06:10.920 --> 00:06:12.720
it can like do that later.


00:06:12.720 --> 00:06:14.560
So you can get some of the benefits.


00:06:14.560 --> 00:06:15.400
- That's cool.


00:06:15.400 --> 00:06:16.960
And it can also distribute the filter bit,


00:06:16.960 --> 00:06:18.060
I guess at that point.


00:06:18.060 --> 00:06:20.040
Yeah, nice.


00:06:20.040 --> 00:06:24.520
All right, I wanna talk about the usual suspects.


00:06:24.520 --> 00:06:26.920
So, okay, that was a pretty good show.


00:06:26.920 --> 00:06:29.240
Was that Quentin Tarantino or something like that?


00:06:29.240 --> 00:06:30.280
It's not actually about this,


00:06:30.280 --> 00:06:33.920
this comes to us from Ruslan Portnoy.


00:06:33.920 --> 00:06:35.560
And thank you for sending this in.


00:06:35.560 --> 00:06:39.420
mentioned an article that has this really interesting idea.


00:06:39.420 --> 00:06:43.260
How do you apply git blame


00:06:43.260 --> 00:06:46.160
when you encounter a Python traceback?


00:06:46.160 --> 00:06:49.000
So here's the scenario, your code crashes


00:06:49.000 --> 00:06:51.300
and you either print out the traceback


00:06:51.300 --> 00:06:55.560
or Python does it for you because it's just crashed.


00:06:55.560 --> 00:06:58.680
And normally it says, here's the value,


00:06:58.680 --> 00:07:00.880
here's the line of code, here's the file it's in,


00:07:00.880 --> 00:07:04.320
here's the next line in the call stack,


00:07:04.320 --> 00:07:05.960
here's a line of code it's in.


00:07:05.960 --> 00:07:09.320
The idea is you can take git blame,


00:07:09.320 --> 00:07:11.760
which is a command that says,


00:07:11.760 --> 00:07:13.800
show me who changed this line of code


00:07:13.800 --> 00:07:15.240
or who wrote this line of code,


00:07:15.240 --> 00:07:18.400
at least touched it last on every single line of code.


00:07:18.400 --> 00:07:20.940
And I love this whole idea of like, all right, who did this?


00:07:20.940 --> 00:07:22.400
And sometimes I'll come across code.


00:07:22.400 --> 00:07:23.960
I'm like, this is so crappy.


00:07:23.960 --> 00:07:24.780
Like who did this?


00:07:24.780 --> 00:07:26.040
Oh wait, that's me.


00:07:26.040 --> 00:07:29.360
Okay, well, at least I know how to feel about it.


00:07:29.360 --> 00:07:31.720
But the idea is what if your trace back


00:07:31.720 --> 00:07:34.400
on each line where it had an exception


00:07:34.400 --> 00:07:37.560
could also show who wrote that line of code.


00:07:37.560 --> 00:07:38.400
Cool, huh?


00:07:38.400 --> 00:07:40.020
- Yeah, that'd be great.


00:07:40.020 --> 00:07:41.380
- Yeah, so let's check it out.


00:07:41.380 --> 00:07:42.320
It's pretty straightforward.


00:07:42.320 --> 00:07:45.160
This is an article by Afar Koren,


00:07:45.160 --> 00:07:49.100
and it basically uses two libraries


00:07:49.100 --> 00:07:51.560
that are themselves both pretty straightforward.


00:07:51.560 --> 00:07:54.880
So like, here's a straightforward example of a traceback,


00:07:54.880 --> 00:07:57.960
like trying to pop something off of an empty list.


00:07:57.960 --> 00:08:02.020
says on this line in the function pop some,


00:08:02.020 --> 00:08:05.040
you know, there's this line here in the call stack


00:08:05.040 --> 00:08:06.500
and then the next line, this line in the call stack


00:08:06.500 --> 00:08:08.480
and eventually raise a value error,


00:08:08.480 --> 00:08:12.300
you know, empty range can't pop nothing off,


00:08:12.300 --> 00:08:14.600
you know, something off of nothing, basically.


00:08:14.600 --> 00:08:18.320
But this doesn't show you any information about


00:08:18.320 --> 00:08:19.760
like maybe who wrote that line


00:08:19.760 --> 00:08:22.100
and who wrote this other line up here, right?


00:08:22.100 --> 00:08:27.100
So what they did is they took a couple of modules,


00:08:27.160 --> 00:08:30.800
traceback and then line cache.


00:08:30.800 --> 00:08:34.280
And it turns out when traceback shows you this traceback,


00:08:34.280 --> 00:08:36.760
that line, it uses line cache to figure out,


00:08:36.760 --> 00:08:41.760
okay, from this actual, I'm guessing byte code


00:08:41.760 --> 00:08:47.080
that it's gonna run, this CPython interpreter code,


00:08:47.080 --> 00:08:50.100
where did it, like what line of file


00:08:50.100 --> 00:08:51.900
did this actually come from, right?


00:08:51.900 --> 00:08:56.520
So here's the insight or the thing,


00:08:56.520 --> 00:08:59.920
you can actually change what's in the cache.


00:08:59.920 --> 00:09:01.640
And because it's a cache,


00:09:01.640 --> 00:09:03.480
once it's figured out what the lines are,


00:09:03.480 --> 00:09:05.120
it's not gonna read it again.


00:09:05.120 --> 00:09:09.560
So it's like a list for each line that you get back


00:09:09.560 --> 00:09:11.360
and you can just change the value.


00:09:11.360 --> 00:09:14.740
So it said, okay, well, here's like return random.


00:09:14.740 --> 00:09:16.000
That's what the line of text was.


00:09:16.000 --> 00:09:16.840
They're like, no, no, no,


00:09:16.840 --> 00:09:18.400
there's nothing to see here, move along.


00:09:18.400 --> 00:09:20.680
If you make that and then you cause it to crash again,


00:09:20.680 --> 00:09:24.280
what comes out is, if you go a little bit further down,


00:09:24.280 --> 00:09:26.260
normal code, normal code, or normal trace back,


00:09:26.260 --> 00:09:29.580
traceback then it just instead of the line of code it says nothing to see here


00:09:29.580 --> 00:09:34.380
please move along. Alright so what are you gonna do with that now that you


00:09:34.380 --> 00:09:39.300
realize like you can actually change what appears in the traceback. So you


00:09:39.300 --> 00:09:45.700
write a little regular expression to go and execute get blame on the various


00:09:45.700 --> 00:09:51.500
files and then to re-inject that back into line cache. And so what they do is


00:09:51.500 --> 00:09:55.860
they just put if they know the blame they just put you know like 80 lines 80


00:09:55.860 --> 00:09:58.340
up to 80 characters of the line,


00:09:58.340 --> 00:10:01.400
and then edited on such and such date


00:10:01.400 --> 00:10:02.940
by such and such person.


00:10:02.940 --> 00:10:07.180
And here's the commit message, right?


00:10:07.180 --> 00:10:10.020
And so just basically shelling out to get blame


00:10:10.020 --> 00:10:12.300
when it crashes now, you get some really cool stuff.


00:10:12.300 --> 00:10:14.580
Like on this slide, it says,


00:10:14.580 --> 00:10:18.740
this is edited by many, many days ago


00:10:18.740 --> 00:10:21.680
by so-and-so in this git commit and so on.


00:10:21.680 --> 00:10:24.260
And what's interesting,


00:10:24.260 --> 00:10:26.940
Like this is already in itself useful, I think.


00:10:26.940 --> 00:10:29.860
But what's more interesting is other tools use this as well.


00:10:29.860 --> 00:10:31.700
So for example, if you use PUDB,


00:10:31.700 --> 00:10:36.060
which is a sort of visual debugger, kind of,


00:10:36.060 --> 00:10:37.700
it's like a command line one,


00:10:37.700 --> 00:10:40.140
visual in the sense of like Emacs is visual,


00:10:40.140 --> 00:10:42.660
not like PyCharm is visual,


00:10:42.660 --> 00:10:44.380
but it will actually pull up that data.


00:10:44.380 --> 00:10:47.180
So you can see they jumped into the PUDB debugger


00:10:47.180 --> 00:10:50.040
and it's actually showing all this get blame attribution


00:10:50.040 --> 00:10:51.220
as well that they've added.


00:10:51.220 --> 00:10:53.220
So yeah, pretty interesting.


00:10:53.220 --> 00:10:54.320
What do you all think?


00:10:54.320 --> 00:10:56.960
- Yeah, I think that looks really cool.


00:10:56.960 --> 00:10:59.740
I mean, I always do GitBlame


00:10:59.740 --> 00:11:01.480
whenever I run into something that's weird


00:11:01.480 --> 00:11:02.620
with the hope that someone else


00:11:02.620 --> 00:11:04.060
would be able to explain it to me.


00:11:04.060 --> 00:11:05.260
- Exactly, who knows about this


00:11:05.260 --> 00:11:07.540
or who do I talk to about breaking this?


00:11:07.540 --> 00:11:09.740
- Right, yeah, you could even put like PR numbers


00:11:09.740 --> 00:11:10.780
and stuff in here, right?


00:11:10.780 --> 00:11:11.940
And that'd be pretty cool.


00:11:11.940 --> 00:11:12.780
- Yeah. - Oh, PR numbers.


00:11:12.780 --> 00:11:13.780
That'd be cool.


00:11:13.780 --> 00:11:15.100
- Yeah, that'd be super cool.


00:11:15.100 --> 00:11:16.340
- Yeah, one of the things I like,


00:11:16.340 --> 00:11:20.660
I don't really like the name GitBlame, but it's there.


00:11:20.660 --> 00:11:24.020
- Well, I agree with Julia that the main thing I use it for


00:11:24.020 --> 00:11:26.260
isn't to try to figure out who broke it,


00:11:26.260 --> 00:11:29.440
but who to ask about this chunk of the code.


00:11:29.440 --> 00:11:31.540
- I agree.


00:11:31.540 --> 00:11:32.700
'Cause usually when you see something


00:11:32.700 --> 00:11:34.660
that's really confusing and weird, you're like,


00:11:34.660 --> 00:11:37.860
I know they didn't just pick the hard way of doing this


00:11:37.860 --> 00:11:39.820
because they didn't wanna do the easy way.


00:11:39.820 --> 00:11:42.140
There's something that I don't fully understand,


00:11:42.140 --> 00:11:44.800
some edge case that's crazy here.


00:11:44.800 --> 00:11:47.060
I'm gonna go talk to that person, so yeah.


00:11:47.060 --> 00:11:49.540
- Also, how long ago it was edited.


00:11:49.540 --> 00:11:51.580
So if there was something edited yesterday,


00:11:51.580 --> 00:11:53.620
that's probably the problem.


00:11:53.620 --> 00:11:54.440
- Yeah, exactly.


00:11:54.440 --> 00:11:55.760
Like in this little screenshot here,


00:11:55.760 --> 00:12:00.340
some of these are edited like 1,427 days ago.


00:12:00.340 --> 00:12:03.540
That's probably not the problem, maybe, but probably not.


00:12:03.540 --> 00:12:05.180
- I feel like I have the opposite assumption.


00:12:05.180 --> 00:12:07.220
Like if something is from six years ago and it's weird,


00:12:07.220 --> 00:12:10.220
I'm like, well, probably things were different back then.


00:12:10.220 --> 00:12:11.060
- Not bad.


00:12:11.060 --> 00:12:11.980
- Yeah.


00:12:11.980 --> 00:12:13.980
- Yeah, yeah, it's no longer applicable


00:12:13.980 --> 00:12:15.500
to the new data, new situation.


00:12:15.500 --> 00:12:16.340
- Yeah.


00:12:16.340 --> 00:12:17.160
- Yeah.


00:12:17.160 --> 00:12:18.420
- Oh, that'd be an interesting thing also,


00:12:18.420 --> 00:12:20.780
is to have like a tool that would tell you


00:12:20.780 --> 00:12:22.900
if something's like over a thousand days old


00:12:22.900 --> 00:12:24.040
or something like that,


00:12:24.040 --> 00:12:25.620
you probably should go refactor it


00:12:25.620 --> 00:12:28.420
to make sure somebody understands that code.


00:12:28.420 --> 00:12:29.720
- Yeah, yeah, for sure.


00:12:29.720 --> 00:12:32.780
All right, jumping back to the first item really quick,


00:12:32.780 --> 00:12:34.520
in the live stream, Alexander out there,


00:12:34.520 --> 00:12:35.500
hey, Alexander, says,


00:12:35.500 --> 00:12:38.900
"I wonder if graph databases with Gremlin queries


00:12:38.900 --> 00:12:40.780
could be more suitable for data science.


00:12:40.780 --> 00:12:42.860
You know, SQL joins are way harder."


00:12:42.860 --> 00:12:44.820
Yeah, graph databases are pretty interesting.


00:12:44.820 --> 00:12:46.580
If you're trying to understand the relationships,


00:12:46.580 --> 00:12:47.660
that may well be better.


00:12:47.660 --> 00:12:48.500
I don't know.


00:12:48.500 --> 00:12:50.780
Julia, do you got any thoughts on this?


00:12:50.780 --> 00:12:51.620
Brian?


00:12:51.620 --> 00:12:54.220
- I don't know anything about graph databases.


00:12:54.220 --> 00:12:55.560
So out of my league.


00:12:55.560 --> 00:12:59.700
- I didn't have a desire to understand graph databases


00:12:59.700 --> 00:13:02.580
until I found out that there were Gremlin queries.


00:13:02.580 --> 00:13:04.140
Now I think I wanna know.


00:13:04.140 --> 00:13:06.940
- Brian, they don't start out as a Gremlin queries.


00:13:06.940 --> 00:13:09.380
They're mogwai inserts.


00:13:09.380 --> 00:13:11.460
And then if you insert them after midnight,


00:13:11.460 --> 00:13:12.940
then they become a Gremlin query.


00:13:12.940 --> 00:13:14.760
I mean, come on, we all know how it goes.


00:13:14.760 --> 00:13:16.700
You definitely don't wanna get them wet.


00:13:16.700 --> 00:13:18.740
(laughing)


00:13:18.740 --> 00:13:19.580
- Oh, that's our old show.


00:13:19.580 --> 00:13:21.140
I'm not sure if everyone's gonna get that reference,


00:13:21.140 --> 00:13:22.980
but yeah, I love that show.


00:13:22.980 --> 00:13:27.040
Okay, anyway, let's move on to the next one.


00:13:27.040 --> 00:13:28.700
The next one is you, Julia.


00:13:28.700 --> 00:13:32.920
- Yeah, so I wanted to highlight FS spec,


00:13:32.920 --> 00:13:34.500
so file system spec for people


00:13:34.500 --> 00:13:36.700
who can't hear letters very well.


00:13:36.700 --> 00:13:41.660
So this is the basis for S3 FS,


00:13:41.660 --> 00:13:45.400
sorry, I'm not getting the letters right,


00:13:45.400 --> 00:13:48.840
But there's one for GCP, there's one for S3.


00:13:48.840 --> 00:13:53.720
And basically it's a file system storage interface


00:13:53.720 --> 00:13:56.180
or like the basis for a file system.


00:13:56.180 --> 00:14:00.320
And so you can do things like you can open just files


00:14:00.320 --> 00:14:02.920
as you can just take a path and open it


00:14:02.920 --> 00:14:07.320
as a file object in Python and read it


00:14:07.320 --> 00:14:10.600
with all the normal like read, write operations,


00:14:10.600 --> 00:14:13.080
but from anywhere.


00:14:13.080 --> 00:14:18.080
So there's all these different ones for S3, for GCFs,


00:14:18.080 --> 00:14:25.580
and even for HTTP, and just basically anything


00:14:25.580 --> 00:14:29.860
you can imagine, anywhere you can imagine a file being,


00:14:29.860 --> 00:14:32.300
either there's already been one of these written.


00:14:32.300 --> 00:14:35.380
It's kind of like a, it's an interface,


00:14:35.380 --> 00:14:38.200
and then you write different packages on top of it


00:14:38.200 --> 00:14:39.500
that are like drivers or something,


00:14:39.500 --> 00:14:40.840
they have some name for it.


00:14:42.140 --> 00:14:45.620
And it allows you to treat the file system


00:14:45.620 --> 00:14:48.020
as like this interchangeable building block.


00:14:48.020 --> 00:14:51.420
So you don't get, you don't end up writing like


00:14:51.420 --> 00:14:54.200
photo three code or something that's like very specific


00:14:54.200 --> 00:14:56.900
to a specific cloud storage.


00:14:56.900 --> 00:14:58.780
You write like this more general code.


00:14:58.780 --> 00:15:01.940
And then it's really useful for like


00:15:01.940 --> 00:15:04.420
a lot of free data sets that are hosted on different clouds,


00:15:04.420 --> 00:15:06.220
but like they'll sometimes be on one cloud


00:15:06.220 --> 00:15:07.180
and sometimes be on another,


00:15:07.180 --> 00:15:09.080
but like basically it's the same data.


00:15:09.080 --> 00:15:11.780
Or if you're at a company and you wanna like


00:15:11.780 --> 00:15:15.940
switch clouds, it just makes that whole thing so much easier.


00:15:15.940 --> 00:15:18.820
- It looks really, really useful,


00:15:18.820 --> 00:15:22.340
especially for avoiding cloud lock-in.


00:15:22.340 --> 00:15:23.660
- Yeah, yeah.


00:15:23.660 --> 00:15:24.940
And you can always write,


00:15:24.940 --> 00:15:26.460
like you can always write your own one.


00:15:26.460 --> 00:15:27.620
If something else pops up,


00:15:27.620 --> 00:15:30.140
you can write your own implementation of that.


00:15:30.140 --> 00:15:32.900
- Right, so there's an example here


00:15:32.900 --> 00:15:34.860
talking about using a file system in the docs


00:15:34.860 --> 00:15:36.340
that says something to the effect of,


00:15:36.340 --> 00:15:38.020
well, you want to open up a CSV


00:15:38.020 --> 00:15:40.700
and feed it off the pandas read CSV.


00:15:40.700 --> 00:15:43.420
So normally you would say open CSV file


00:15:43.420 --> 00:15:45.380
and then you just say pandas read CSV


00:15:45.380 --> 00:15:47.500
and give it the file stream.


00:15:47.500 --> 00:15:48.900
But what if that's on the internet?


00:15:48.900 --> 00:15:51.140
What if that's on S3 with authentication?


00:15:51.140 --> 00:15:53.740
What if that's somewhere else, right?


00:15:53.740 --> 00:15:55.820
And so with this one, you can just say


00:15:55.820 --> 00:16:00.060
FS file system spec open, here's a URL.


00:16:00.060 --> 00:16:01.340
And now that's a stream, right?


00:16:01.340 --> 00:16:05.900
Or that could be, here's an S3 location, S3 bucket.


00:16:05.900 --> 00:16:06.860
Go get that, right?


00:16:08.060 --> 00:16:10.940
- Yeah, yeah, so instead of passing the path


00:16:10.940 --> 00:16:13.060
directly into the read function,


00:16:13.060 --> 00:16:14.740
you pass in the file object.


00:16:14.740 --> 00:16:18.340
And it's really powerful.


00:16:18.340 --> 00:16:21.180
Like it seems like a thing that we shouldn't need,


00:16:21.180 --> 00:16:24.420
but files, like the file locations


00:16:24.420 --> 00:16:27.020
can get so crazy so quickly.


00:16:27.020 --> 00:16:28.660
And this just really helps simplify


00:16:28.660 --> 00:16:31.780
and like make it so you don't have to think about this stuff


00:16:31.780 --> 00:16:33.780
which I think is what most people want.


00:16:33.780 --> 00:16:35.020
It's what I want.


00:16:35.020 --> 00:16:35.900
- Yeah, for sure.


00:16:35.900 --> 00:16:39.120
So like there's a local file system option,


00:16:39.120 --> 00:16:41.580
but then you could also have an FTP file system


00:16:41.580 --> 00:16:43.900
or you could have something else, right?


00:16:43.900 --> 00:16:45.340
All sorts of different options.


00:16:45.340 --> 00:16:47.200
- Yeah, yeah, all sorts of stuff.


00:16:47.200 --> 00:16:49.060
- Yeah, okay, that's cool.


00:16:49.060 --> 00:16:50.220
Brian, what do you think?


00:16:50.220 --> 00:16:52.900
Does this have any applicability for you?


00:16:52.900 --> 00:16:54.100
- Oh yeah, definitely.


00:16:54.100 --> 00:16:58.600
And that's a great abstraction layer to put in place


00:16:58.600 --> 00:17:03.300
to just have reading as if it was a file and have it moved.


00:17:03.300 --> 00:17:05.640
It also helps you develop tools locally


00:17:05.640 --> 00:17:09.480
and then be able to deploy them into a larger space.


00:17:09.480 --> 00:17:11.200
So it's cool.


00:17:11.200 --> 00:17:12.040
- Yeah, for sure.


00:17:12.040 --> 00:17:14.420
One of the things that always makes me a little hesitant


00:17:14.420 --> 00:17:17.560
when I hear people say things like, we're cloud native.


00:17:17.560 --> 00:17:19.920
I like my app is cloud native.


00:17:19.920 --> 00:17:21.380
That's always code word for me.


00:17:21.380 --> 00:17:23.120
Like I will never be able to run my app


00:17:23.120 --> 00:17:25.280
unless I'm connected to the internet.


00:17:25.280 --> 00:17:26.120
You know, it's like,


00:17:26.120 --> 00:17:27.520
it depends on all these services together.


00:17:27.520 --> 00:17:30.480
And there's no way I can recreate that locally.


00:17:30.480 --> 00:17:32.400
But something like this could allow you to say,


00:17:32.400 --> 00:17:34.840
well, we're gonna have a local file system version.


00:17:34.840 --> 00:17:36.040
but then when we go to production,


00:17:36.040 --> 00:17:39.420
we'll switch to S3 or pick it, just pick something.


00:17:39.420 --> 00:17:42.720
- I've always wanted to make it either a t-shirt


00:17:42.720 --> 00:17:43.920
or a sticker or both that says,


00:17:43.920 --> 00:17:45.920
"Not a cloud native, just visiting."


00:17:45.920 --> 00:17:49.800
- Nice, I also think Brian,


00:17:49.800 --> 00:17:52.520
there might be testing opportunities here.


00:17:52.520 --> 00:17:53.360
- Yeah, definitely.


00:17:53.360 --> 00:17:56.500
- Give it a test file system, that'd be cool.


00:17:56.500 --> 00:17:59.600
- Yeah, and like Julia said, swapping things out


00:17:59.600 --> 00:18:03.240
to just have your logic not have to care


00:18:03.240 --> 00:18:04.420
where it's coming from.


00:18:04.420 --> 00:18:09.420
But I guess it would make sure,


00:18:09.420 --> 00:18:12.220
you'd have to make sure all of the interfaces,


00:18:12.220 --> 00:18:15.060
the different storage systems really are equal.


00:18:15.060 --> 00:18:17.620
But I guess you have to try that out yourself.


00:18:17.620 --> 00:18:19.780
- Yeah, there's like kind of a bucket, right?


00:18:19.780 --> 00:18:22.540
That's kind of like a dict that you can pass,


00:18:22.540 --> 00:18:24.500
which is like storage options.


00:18:24.500 --> 00:18:28.140
So I think that might get a little wonky,


00:18:28.140 --> 00:18:30.020
depending on what the different backends need,


00:18:30.020 --> 00:18:33.100
but the general principles are the same.


00:18:33.100 --> 00:18:35.060
And it also, I should have said this originally,


00:18:35.060 --> 00:18:38.820
but it also allows, the FS spec itself can contain logic


00:18:38.820 --> 00:18:42.940
to do things that are general to all the different libraries


00:18:42.940 --> 00:18:44.660
like caching and things like that.


00:18:44.660 --> 00:18:47.900
- Oh, interesting, like you could put a caching layer


00:18:47.900 --> 00:18:52.300
on top of arbitrary things like S3 and Google Storage


00:18:52.300 --> 00:18:54.980
and Azure Buckets or Blob Storage, yeah.


00:18:54.980 --> 00:18:59.700
Yeah, maybe even save money on bandwidth there


00:18:59.700 --> 00:19:01.200
if you could do some caching.


00:19:02.340 --> 00:19:03.860
- Yeah, you can do it right.


00:19:03.860 --> 00:19:05.660
- Yeah, super, super neat.


00:19:05.660 --> 00:19:07.660
Brian, you're gonna tell us about how to slim down


00:19:07.660 --> 00:19:09.260
our Docker containers, but before you do,


00:19:09.260 --> 00:19:12.780
I wanna tell people about our sponsor for this episode.


00:19:12.780 --> 00:19:14.140
It's brought to you by Sentry.


00:19:14.140 --> 00:19:15.880
So how would you like to remove a little stress


00:19:15.880 --> 00:19:18.260
from your life in addition to just abstracting


00:19:18.260 --> 00:19:21.240
your file system, maybe tracking down some errors?


00:19:21.240 --> 00:19:24.220
So do you worry that your users may be having difficulties


00:19:24.220 --> 00:19:26.740
or encountering errors with your app right now?


00:19:26.740 --> 00:19:27.860
And would you even know it


00:19:27.860 --> 00:19:30.040
until they send that support email?


00:19:30.040 --> 00:19:32.840
So how much better would it be if you got the error


00:19:32.840 --> 00:19:35.120
or performance details sent right away


00:19:35.120 --> 00:19:38.600
with all the call stack, maybe you would get blame in there.


00:19:38.600 --> 00:19:42.280
The local variables, the active user who was logged in


00:19:42.280 --> 00:19:43.620
while this happened, all that kind of stuff.


00:19:43.620 --> 00:19:46.080
So with Sentry, it's not only possible,


00:19:46.080 --> 00:19:47.920
it's actually really simple.


00:19:47.920 --> 00:19:49.720
I've used this on Sentry,


00:19:49.720 --> 00:19:51.720
I've used Sentry on our websites before.


00:19:51.720 --> 00:19:53.680
So it's on Python Bytes, Talk Python Training,


00:19:53.680 --> 00:19:55.200
all those different sites.


00:19:55.200 --> 00:19:57.160
And I've actually had someone encounter an error


00:19:57.160 --> 00:20:00.300
trying to buy a course over on TalkBython training.


00:20:00.300 --> 00:20:01.780
I got the Sentry notification.


00:20:01.780 --> 00:20:04.240
I said, "Oh, geez, I can't believe this problem


00:20:04.240 --> 00:20:05.080
crept in here."


00:20:05.080 --> 00:20:05.920
And I fixed it really quick


00:20:05.920 --> 00:20:08.500
and started to roll out the fix


00:20:08.500 --> 00:20:09.880
and actually got an email.


00:20:09.880 --> 00:20:11.140
They said, "Hey, we're having this problem


00:20:11.140 --> 00:20:11.980
buying a course."


00:20:11.980 --> 00:20:13.400
I said, "I know, I've almost got it fixed.


00:20:13.400 --> 00:20:15.580
Just give me a moment and try again."


00:20:15.580 --> 00:20:17.000
And they were just like, "What?


00:20:17.000 --> 00:20:18.500
That doesn't make sense."


00:20:18.500 --> 00:20:19.740
So they were very surprised.


00:20:19.740 --> 00:20:21.600
And so it's surprising to let your users


00:20:21.600 --> 00:20:24.460
create your Sentry account at pythonbytes.fm/sentry.


00:20:24.460 --> 00:20:27.180
And when you sign up, there's a little got a promo code.


00:20:27.180 --> 00:20:29.060
Make sure that you put Python Bytes,


00:20:29.060 --> 00:20:32.700
all one word, all caps with a Y in there,


00:20:32.700 --> 00:20:33.780
and you'll get two free months


00:20:33.780 --> 00:20:35.860
plus a bunch of extra features and so on.


00:20:35.860 --> 00:20:39.940
So also it really lets them know that you came from us


00:20:39.940 --> 00:20:40.980
rather than just somewhere else


00:20:40.980 --> 00:20:42.140
and that helps support the show a lot.


00:20:42.140 --> 00:20:45.760
So pythonbytes.fm/sentry and promo code Python Bytes.


00:20:45.760 --> 00:20:49.540
Awesome, thanks for supporting the show Sentry.


00:20:49.540 --> 00:20:53.300
And Brian, let's talk Docker.


00:20:53.300 --> 00:20:54.740
"Yeah, let's talk Docker."


00:20:54.740 --> 00:20:57.220
I mean, I'm starting to use Docker more and more,


00:20:57.220 --> 00:20:59.820
and I like the experience,


00:20:59.820 --> 00:21:03.620
but I was interested when this article came up.


00:21:03.620 --> 00:21:06.780
So it was in June, I saw this article called


00:21:06.780 --> 00:21:09.740
The Need for Slimmer Containers.


00:21:09.740 --> 00:21:14.300
And this is from somebody, Ivan,


00:21:14.300 --> 00:21:17.180
I'm not gonna try his last name, Ivan something.


00:21:17.180 --> 00:21:19.580
But anyway, it's an interesting discussion.


00:21:19.580 --> 00:21:28.460
And the idea around the original host was that there's now a Docker scan that you can use.


00:21:28.460 --> 00:21:34.540
So you can use Docker scan to scan for vulnerabilities in your Docker containers.


00:21:34.540 --> 00:21:41.060
And I even thought, well, I'll look at some of the standard Python containers that are available.


00:21:41.060 --> 00:21:45.740
Right. Theoretically, some of the things that are nice is I can just go and say Docker,


00:21:45.740 --> 00:21:50.080
or in my Docker container, I can say from Python colon three nine,


00:21:50.080 --> 00:21:52.380
and I don't have to think about how do I install Python,


00:21:52.380 --> 00:21:54.020
how do I keep it up to date,


00:21:54.020 --> 00:21:56.380
you know, make sure that pip is there and that I'll be able and,


00:21:56.380 --> 00:21:59.580
you know, pip install stuff that needs to do build things.


00:21:59.580 --> 00:22:01.080
And that's all that stuff will be there, right?


00:22:01.080 --> 00:22:04.120
So it seems like, of course, this is what you want.


00:22:04.120 --> 00:22:08.480
Yeah, well, and also just that's kind of one of the neat things about Dockers.


00:22:08.480 --> 00:22:10.840
I can just say I have these standard parts.


00:22:10.840 --> 00:22:13.920
Now I just want to put my custom stuff on top of it.


00:22:13.920 --> 00:22:16.120
And it's great.


00:22:16.120 --> 00:22:18.240
So what did he find?


00:22:18.240 --> 00:22:20.720
So he used-- so Docker scan apparently


00:22:20.720 --> 00:22:26.960
uses a third party tool called Snake, S-N-Y-K, container.


00:22:26.960 --> 00:22:30.620
And we've covered Snake before, not the container version,


00:22:30.620 --> 00:22:34.080
but we covered Snake in episode 227.


00:22:34.080 --> 00:22:37.200
But so it's looking for vulnerabilities,


00:22:37.200 --> 00:22:38.840
and that's a good thing.


00:22:38.840 --> 00:22:40.560
But he found them in everything.


00:22:40.560 --> 00:22:44.640
And he found him in all of the standard Python ones,


00:22:44.640 --> 00:22:48.440
except for Alpine, I guess.


00:22:48.440 --> 00:22:51.360
And so he didn't really know what to make of it, really.


00:22:51.360 --> 00:22:53.480
He was just sort of reporting his results,


00:22:53.480 --> 00:22:58.920
that maybe Alpine's the only one with few vulnerabilities.


00:22:58.920 --> 00:23:01.280
But then this went out on Hacker News,


00:23:01.280 --> 00:23:04.280
and there was a big discussion around it.


00:23:04.280 --> 00:23:08.040
So he updated the article, which I appreciate,


00:23:08.040 --> 00:23:10.040
with some of the feedback that he got.


00:23:10.040 --> 00:23:13.540
And so some of the feedback was that


00:23:13.540 --> 00:23:17.240
these vulnerability checkers sometimes give you false positives.


00:23:17.240 --> 00:23:21.140
And I don't really have enough experience to know what that...


00:23:21.140 --> 00:23:24.240
Well, I know what that means, but I don't have enough experience to know if


00:23:24.240 --> 00:23:26.740
these really are false positives or if they're


00:23:26.740 --> 00:23:29.240
actual vulnerabilities or not.


00:23:29.240 --> 00:23:32.540
The other thing that was...


00:23:32.540 --> 00:23:35.140
that maybe...


00:23:35.140 --> 00:23:39.820
Some people suggested that these standard ones really aren't updated very much.


00:23:39.820 --> 00:23:41.900
So I don't really know much about that either.


00:23:41.900 --> 00:23:46.500
And if they're not, that's a bummer because I think people are relying on them.


00:23:46.500 --> 00:23:52.740
So I actually just am left with a little bit of a confusion as to what to do.


00:23:52.740 --> 00:23:57.300
I want to also mention that the Alpine is current one,


00:23:57.300 --> 00:24:01.820
there's original article, he says Alpine is pretty good for vulnerabilities.


00:24:01.820 --> 00:24:14.100
But then his follow up says it doesn't, there's a lot of applications that can't run on Alpine because of some issues or another. So anyway, I'm not sure what to make of it. So I was hoping Michael might give us some insight.


00:24:14.100 --> 00:24:30.180
I did some thinking about this morning. And in fact, I recently spoke a lot about this over on talk by thon. So I had it Mr. On the show, and we talked about best practices for Docker packaging. And we talked a lot about


00:24:30.420 --> 00:24:33.860
both security and package size.


00:24:33.860 --> 00:24:37.460
So I can try to relay a couple of things from that.


00:24:37.460 --> 00:24:40.060
So we've got our official image over here,


00:24:40.060 --> 00:24:41.360
our Python official image.


00:24:41.360 --> 00:24:44.720
There's actually a bunch of options.


00:24:44.720 --> 00:24:46.900
As you can see,


00:24:46.900 --> 00:24:47.860
- There's tons.


00:24:47.860 --> 00:24:48.900
- There's a few,


00:24:48.900 --> 00:24:50.900
(laughs)


00:24:50.900 --> 00:24:55.360
310 beta two buster or the 310 RC buster.


00:24:55.360 --> 00:24:57.220
That sounds bad, but I think it's actually good.


00:24:57.220 --> 00:24:58.060
No, I'm just kidding.


00:24:58.060 --> 00:24:58.880
I know what it is.


00:24:58.880 --> 00:25:04.780
These are by default based on Debian and Buster is the latest version of Debian.


00:25:04.780 --> 00:25:08.740
And so you can do a Buster which is like full Debian with 3.10 or you can do a


00:25:08.740 --> 00:25:14.120
3.10 slim Buster which is like a slimmed down version of Debian Buster that


00:25:14.120 --> 00:25:21.020
supports Python 3.10. Okay so there's a lot going on here in terms of the


00:25:21.020 --> 00:25:30.620
options. One of the, so the article talks about how Alpine had the fewest security vulnerabilities.


00:25:30.620 --> 00:25:38.140
And I actually looked, so the Python latest, if you run the sneak package scanner thingy on it,


00:25:38.140 --> 00:25:44.060
it says there's 364 vulnerabilities. If you just do Python latest,


00:25:45.340 --> 00:25:48.140
3 9 um in 353


00:25:48.140 --> 00:25:54.620
After you run apt update apt upgrade. So if you try to get the container to update itself


00:25:54.620 --> 00:25:57.740
There's still 353 in the that one


00:25:57.740 --> 00:26:01.980
I don't use that I use ubuntu. So I use the ubuntu latest


00:26:01.980 --> 00:26:05.680
And the bare version of that one had 31


00:26:05.680 --> 00:26:08.220
Vulnerabilities


00:26:08.220 --> 00:26:09.660
but then if I


00:26:09.660 --> 00:26:15.740
either install python through apt or build it through source and put in the necessary foundational bits like build essentials and stuff


00:26:15.740 --> 00:26:18.060
to build python


00:26:18.060 --> 00:26:24.460
It goes up to 35 total problems. We're 28 of merlot. So seven are medium. Nothing major


00:26:24.460 --> 00:26:29.020
One thing I thought was weird was I actually ran another step where I said, okay


00:26:29.020 --> 00:26:35.340
Let's uninstall those intermediate tools like gcc and wget and stuff like that that I needed to get stuff on the machine


00:26:35.340 --> 00:26:37.340
But i'm not going to use again


00:26:37.580 --> 00:26:41.820
and I took them away and almost all those warnings were about those tools that I had


00:26:41.820 --> 00:26:45.900
apt uninstalled. So I don't know why Snyk is still showing them because if I go into the


00:26:45.900 --> 00:26:51.900
container I type wget it says nope this thing is not installed sorry but it still says the


00:26:51.900 --> 00:26:56.460
warning is that wget has a vulnerability in it for example right so there's like


00:26:56.460 --> 00:27:02.220
there's like this over reporting for sure but I mean the difference between 28 and 350 is not


00:27:02.220 --> 00:27:09.340
trivial. Right. Right. So like run an apt install python3 type of thing is not you know it's probably


00:27:09.340 --> 00:27:21.260
worth it for example. When I switched from python39 to python39 slim buster it went from 350 to 69


00:27:21.260 --> 00:27:28.780
so that's a lot better right. Yeah. It's still not as good as it would do but it's a lot better.


00:27:29.340 --> 00:27:33.580
The it's still twice as many but I mean you can't it sounds better, but it could be like


00:27:33.580 --> 00:27:40.300
359 low problems and then 69 critical ones. It totally could it totally could


00:27:40.300 --> 00:27:47.660
If the reporting like if the if if we can't trust snake necessarily then like


00:27:47.660 --> 00:27:50.140
maybe


00:27:50.140 --> 00:27:56.140
You know if you can't trust your reporting system, then like maybe that maybe none of this is means anything, right? Yeah


00:27:56.700 --> 00:28:03.340
Yeah, I think one of the things the article originally started out to address was, if you have fewer subsystems,


00:28:03.340 --> 00:28:07.500
there's no chance the missing subsystem could get hacked because it's not there.


00:28:07.500 --> 00:28:13.180
Right? So if there's a vulnerability in SSH, but you literally don't install SSH, who cares?


00:28:13.180 --> 00:28:21.420
Whereas if you just take the full distribution, you may potentially get affected by something you dragged along.


00:28:21.420 --> 00:28:24.940
And then it went down this rat hole of like, well, let me scan it and so on.


00:28:24.940 --> 00:28:30.860
I want to add one more thing like Alpine did result in the best outcome from the scanner,


00:28:30.860 --> 00:28:33.660
but there's a lot of issues with Alpine and Python.


00:28:33.660 --> 00:28:35.500
So for example,


00:28:35.500 --> 00:28:45.260
there's this PEP here 656 that right now if I try to pip install something on Alpine,


00:28:45.260 --> 00:28:50.700
so especially in the data science world where things are large and then compiling takes a lot of steps and so on.


00:28:51.580 --> 00:28:57.940
The wheels that are built for Linux are built for, what is it, Glib?


00:28:57.940 --> 00:29:03.340
Gclib? I mean, hold on. I'll look over here. I wrote it down so I know.


00:29:03.340 --> 00:29:08.960
No, I didn't write it down. Sorry.


00:29:08.960 --> 00:29:10.960
There's like, I think it's Glib or Gclib,


00:29:10.960 --> 00:29:15.120
which is the C runtime on like Ubuntu and Debian,


00:29:15.120 --> 00:29:18.760
but there's one, MUSL, Muscle, on Alpine.


00:29:18.760 --> 00:29:22.040
And the wheels are not built for muscle,


00:29:22.040 --> 00:29:24.200
they're built for GCLib.


00:29:24.200 --> 00:29:26.480
And so you can't pip install that,


00:29:26.480 --> 00:29:29.080
you gotta download everything and then compile it.


00:29:29.080 --> 00:29:33.460
And it's like compiling matplotlib and Jupyter from scratch


00:29:33.460 --> 00:29:36.240
can take a really long time versus just downloading


00:29:36.240 --> 00:29:37.720
the wheel and it takes up a lot of space.


00:29:37.720 --> 00:29:41.760
And there's a bunch of issues and things around that


00:29:41.760 --> 00:29:44.200
that make it slightly not Python friendly.


00:29:44.200 --> 00:29:48.000
That's why there's this PEP 656


00:29:48.000 --> 00:29:53.000
to allow wheels to be tagged as supporting muscle, not gclib.


00:29:53.000 --> 00:29:58.440
Is that more than you wanted, Brian, or are you good?


00:29:58.440 --> 00:30:01.340
- Okay, so the takeaway that I'm getting is


00:30:01.340 --> 00:30:03.400
probably not panic on some of these,


00:30:03.400 --> 00:30:06.180
but maybe at least pay attention to them.


00:30:06.180 --> 00:30:08.560
And it is good, like you said,


00:30:08.560 --> 00:30:14.160
to remove tools out of your Docker images


00:30:14.160 --> 00:30:15.000
that you're not using.


00:30:15.000 --> 00:30:17.520
If you're not using wget in your application,


00:30:17.520 --> 00:30:19.320
take it off of there, things like that.


00:30:19.320 --> 00:30:20.160
- Yeah, exactly.


00:30:20.160 --> 00:30:21.440
I think Julia's point was great, right?


00:30:21.440 --> 00:30:25.680
It's, if you, it might be a false positive,


00:30:25.680 --> 00:30:30.080
but at the same time, if you're not gonna use it again,


00:30:30.080 --> 00:30:31.360
because Docker, a lot of times,


00:30:31.360 --> 00:30:32.760
you pip install all your stuff


00:30:32.760 --> 00:30:34.680
and then it's kind of ready to run,


00:30:34.680 --> 00:30:36.980
but you're not gonna go and pip install something again,


00:30:36.980 --> 00:30:40.160
you're gonna do a new Docker build from scratch, right?


00:30:40.160 --> 00:30:42.040
Like one of the final lines could be,


00:30:42.040 --> 00:30:44.320
remove all those intermediate things


00:30:44.320 --> 00:30:47.440
that could have problems and make it larger and whatnot.


00:30:47.440 --> 00:30:51.760
- Yeah, I thought, so I've only thought about this


00:30:51.760 --> 00:30:54.800
from like package, from like image size, right?


00:30:54.800 --> 00:30:56.940
Like that you want similar images


00:30:56.940 --> 00:30:59.960
just because it takes forever to get them around.


00:30:59.960 --> 00:31:02.240
But it's interesting to think about


00:31:02.240 --> 00:31:03.600
from the vulnerability perspective.


00:31:03.600 --> 00:31:06.640
And I've always seen it done as


00:31:06.640 --> 00:31:08.360
you do whatever installation you need


00:31:08.360 --> 00:31:10.500
and then you do all these like cleaning steps.


00:31:10.500 --> 00:31:12.280
But what you said, Michael, about like


00:31:12.280 --> 00:31:15.440
not ever putting certain things on your image


00:31:15.440 --> 00:31:18.400
was interesting, I haven't heard of that before.


00:31:18.400 --> 00:31:19.240
- Yeah, thanks.


00:31:19.240 --> 00:31:21.800
I also had Peter McKee from, who works at Docker


00:31:21.800 --> 00:31:23.240
on Talk Python a little while ago,


00:31:23.240 --> 00:31:24.880
like six months ago or something.


00:31:24.880 --> 00:31:27.480
And he talks about having these multi-step builds,


00:31:27.480 --> 00:31:29.000
something to the effect of,


00:31:29.000 --> 00:31:30.660
it doesn't make as much sense with Python,


00:31:30.660 --> 00:31:31.780
I'll try to put it together.


00:31:31.780 --> 00:31:33.440
But like imagine you're building a Go library,


00:31:33.440 --> 00:31:37.720
you could put the Go runtime and build tools on a container,


00:31:37.720 --> 00:31:39.840
build your thing, but the thing you get from Go


00:31:39.840 --> 00:31:42.360
is an actual binary that's all self-contained.


00:31:42.360 --> 00:31:43.760
You could throw that container away


00:31:43.760 --> 00:31:47.160
and just copy the output of that into your actual container


00:31:47.160 --> 00:31:49.720
and never even put all those tools


00:31:49.720 --> 00:31:52.160
on the actual system that goes to production.


00:31:52.160 --> 00:31:55.180
Within Python, that might look something like


00:31:55.180 --> 00:31:57.840
maybe using PECs to package up all the stuff


00:31:57.840 --> 00:31:59.400
inside of a virtual environment.


00:31:59.400 --> 00:32:01.040
And long as Python, the runtime is there,


00:32:01.040 --> 00:32:03.520
then you can like PECs run on your other machine,


00:32:03.520 --> 00:32:05.920
but you could potentially not even ever install those,


00:32:05.920 --> 00:32:07.040
which might be good.


00:32:07.040 --> 00:32:09.440
- Yeah, that makes sense.


00:32:09.440 --> 00:32:11.680
- Yeah, there's a lot there that I'm,


00:32:11.680 --> 00:32:13.520
is sort of beyond my comfort level,


00:32:13.520 --> 00:32:17.240
But that's what I thought as I looked at this, Brian.


00:32:17.240 --> 00:32:19.060
- Well, thanks for taking a look.


00:32:19.060 --> 00:32:20.400
- Sure, you bet.


00:32:20.400 --> 00:32:21.240
All right.


00:32:21.240 --> 00:32:25.600
We like to talk about GUIs on the show every now and then.


00:32:25.600 --> 00:32:29.480
And so, and we wanna talk about pandas and data frames


00:32:29.480 --> 00:32:30.960
and data science and all that.


00:32:30.960 --> 00:32:32.460
So let's put those together.


00:32:32.460 --> 00:32:36.880
There's this project over here called pandas GUI.


00:32:36.880 --> 00:32:41.400
And the documentation is sparse, let's say.


00:32:41.400 --> 00:32:42.240
It's pretty easy.


00:32:42.240 --> 00:32:44.000
There's a couple of examples or two.


00:32:44.000 --> 00:32:46.600
So I could come down here and I could like do my Panda stuff


00:32:46.600 --> 00:32:47.420
and create a data frame.


00:32:47.420 --> 00:32:50.400
And then I could just import show from the Pandas GUI.


00:32:50.400 --> 00:32:54.160
And within my notebook, it will pop open a separate window


00:32:54.160 --> 00:32:57.480
that it then allows me to cruise around and check it out.


00:32:57.480 --> 00:33:00.480
So it does, you know, you can print out the data frame


00:33:00.480 --> 00:33:05.920
in a notebook and you get kind of a static Excel grid


00:33:05.920 --> 00:33:07.000
looking thing.


00:33:07.000 --> 00:33:08.520
And that's nice.


00:33:08.520 --> 00:33:10.560
But with this, you get a interactive one


00:33:10.560 --> 00:33:12.920
that lets you sort and select,


00:33:12.920 --> 00:33:15.600
you can actually copy and paste chunks out of there


00:33:15.600 --> 00:33:18.600
as if it was Excel and then paste it in other places.


00:33:18.600 --> 00:33:21.360
It also has a plotting library with like pictures.


00:33:21.360 --> 00:33:23.760
So I'm gonna go click on the bar graph picture


00:33:23.760 --> 00:33:26.160
and then there's a list of all the columns


00:33:26.160 --> 00:33:27.720
and the things that the bar graph needs


00:33:27.720 --> 00:33:30.760
and you can drag and drop of this column is the X axis


00:33:30.760 --> 00:33:32.360
and this column is the Y axis


00:33:32.360 --> 00:33:35.200
and I wanna group by color and have,


00:33:35.200 --> 00:33:39.080
group by color it by some other aspect of the data


00:33:39.080 --> 00:33:41.560
and it'll like group into multiple charts


00:33:41.560 --> 00:33:44.760
or multiple lines or plots on a chart.


00:33:44.760 --> 00:33:46.080
All sorts of cool stuff like that.


00:33:46.080 --> 00:33:48.560
There's a statistics section.


00:33:48.560 --> 00:33:51.040
There's, you can export, import and export,


00:33:51.040 --> 00:33:53.240
I guess, import CSV files with drag and drop.


00:33:53.240 --> 00:33:55.800
And there's also search that you can do.


00:33:55.800 --> 00:34:00.060
So it's a pretty neat, quick way to explore pandas.


00:34:00.060 --> 00:34:05.400
- Yeah, it's a neat idea.


00:34:05.400 --> 00:34:07.560
Like when you first encounter a data frame,


00:34:07.560 --> 00:34:12.560
Like you really want to just be able to like look at it


00:34:12.560 --> 00:34:15.000
without any assumptions.


00:34:15.000 --> 00:34:17.680
And there's a lot of stuff that like kind of goes


00:34:17.680 --> 00:34:21.120
towards that with like the dot plot API in pandas


00:34:21.120 --> 00:34:23.200
and making that, making it really accessible


00:34:23.200 --> 00:34:24.780
to make plots really quickly.


00:34:24.780 --> 00:34:27.440
But this is like kind of like the step beyond that, right?


00:34:27.440 --> 00:34:31.200
Of just visualizing it immediately.


00:34:31.200 --> 00:34:34.240
- Yeah, like one thing you get when you view the data frame


00:34:34.240 --> 00:34:36.500
as you know, like I said, it looks kind of just like


00:34:36.500 --> 00:34:40.900
printing DF in or just typing DF in the notebook.


00:34:40.900 --> 00:34:42.380
But then on the right, you can say,


00:34:42.380 --> 00:34:43.380
oh, I wanna see the filters


00:34:43.380 --> 00:34:46.100
and you can type in these filter expressions,


00:34:46.100 --> 00:34:48.540
these query expressions, and then turn them all,


00:34:48.540 --> 00:34:50.500
like pile them on, you can have little check boxes


00:34:50.500 --> 00:34:54.100
to like optionally turn them off, but not delete them.


00:34:54.100 --> 00:34:57.300
And then of course you can work within there, I like that.


00:34:57.300 --> 00:34:59.020
And the graphing, I think the support


00:34:59.020 --> 00:35:01.620
for the graphing part is really, really helpful.


00:35:01.620 --> 00:35:04.280
So the fact that you can just go and click and say,


00:35:04.280 --> 00:35:07.840
oh, I want a box plot and then the box plot needs


00:35:07.840 --> 00:35:11.560
these things you can just drag and drop from the column


00:35:11.560 --> 00:35:13.320
from your data frame definition over


00:35:13.320 --> 00:35:14.880
and it just live updates.


00:35:14.880 --> 00:35:19.080
- Yeah, I think that really like lets people


00:35:19.080 --> 00:35:22.760
visualize the data in the way that they want to sometimes


00:35:22.760 --> 00:35:24.880
rather than like the way they already know how


00:35:24.880 --> 00:35:25.920
in that part of it,


00:35:25.920 --> 00:35:28.080
which I think is what people end up doing.


00:35:28.080 --> 00:35:28.920
- Yeah.


00:35:28.920 --> 00:35:30.840
- At least for exploratory stuff.


00:35:30.840 --> 00:35:32.200
- Yeah, exactly.


00:35:32.200 --> 00:35:35.000
you could real quickly switch between a bar, a box,


00:35:35.000 --> 00:35:36.720
a scatter plot, back and forth,


00:35:36.720 --> 00:35:39.980
without having to actually be familiar with how those works.


00:35:39.980 --> 00:35:43.840
- Can you tell if there's a way to export the filters


00:35:43.840 --> 00:35:46.320
or is there any method for that?


00:35:46.320 --> 00:35:47.920
- I don't think so.


00:35:47.920 --> 00:35:50.920
At least in the YouTube explainer video,


00:35:50.920 --> 00:35:52.000
there were some comments like,


00:35:52.000 --> 00:35:53.620
you know what would be awesome?


00:35:53.620 --> 00:35:55.360
Export this as code from here


00:35:55.360 --> 00:35:58.160
so that I can just turn it back into Python.


00:35:58.160 --> 00:36:00.440
I didn't see anything like that, but.


00:36:01.400 --> 00:36:03.840
- Yeah, sometimes GUIs are a little weird for me


00:36:03.840 --> 00:36:04.760
because of that, you know,


00:36:04.760 --> 00:36:07.080
like you end up in this GUI world and it's not,


00:36:07.080 --> 00:36:09.200
you can't reproduce anything.


00:36:09.200 --> 00:36:12.280
- I clicked on a whole bunch of stuff


00:36:12.280 --> 00:36:14.800
and then it looked great, but don't touch it.


00:36:14.800 --> 00:36:15.640
- Yeah, exactly.


00:36:15.640 --> 00:36:16.680
- I can't do it again.


00:36:16.680 --> 00:36:19.320
- Yeah. - Okay, but to be fair,


00:36:19.320 --> 00:36:22.800
it is a fairly quick way to look at the data


00:36:22.800 --> 00:36:23.720
and know what you,


00:36:23.720 --> 00:36:26.320
maybe you can't produce that exact plot again,


00:36:26.320 --> 00:36:27.960
but you know what the data looks like


00:36:27.960 --> 00:36:31.620
and you can use a different plotting mechanism to do that.


00:36:31.620 --> 00:36:33.160
- Yeah, and the visual is pretty clear.


00:36:33.160 --> 00:36:35.620
Like, okay, well, X is assigned to speed


00:36:35.620 --> 00:36:37.260
and we know it's a histogram.


00:36:37.260 --> 00:36:39.780
And so you could pretty quickly,


00:36:39.780 --> 00:36:41.580
with some Googling and Stack Overflow and go,


00:36:41.580 --> 00:36:43.940
all right, how do I matplotlib a histogram


00:36:43.940 --> 00:36:45.620
and get that going?


00:36:45.620 --> 00:36:48.180
- Right, that's a huge time saver.


00:36:48.180 --> 00:36:50.920
- Yeah, but some sort of export of like,


00:36:50.920 --> 00:36:53.380
okay, give me the code to make this plot in my own code.


00:36:53.380 --> 00:36:54.380
That would be great.


00:36:55.580 --> 00:36:56.660
- Yep, absolutely.


00:36:56.660 --> 00:36:58.420
Absolutely.


00:36:58.420 --> 00:37:01.520
All right, onto the next, but before we get there,


00:37:01.520 --> 00:37:04.160
I do wanna call out just a shout out by PyLang


00:37:04.160 --> 00:37:06.620
that FSSpec is sweet, good mention.


00:37:06.620 --> 00:37:08.320
Yeah, I like it as well.


00:37:08.320 --> 00:37:10.740
- Cool.


00:37:10.740 --> 00:37:12.500
- All right, X-Ray.


00:37:12.500 --> 00:37:13.340
- X-Ray.


00:37:13.340 --> 00:37:14.500
- Go ahead, Julie.


00:37:14.500 --> 00:37:15.340
- Okay.


00:37:15.340 --> 00:37:20.860
So X-Ray is, it's my favorite library.


00:37:20.860 --> 00:37:24.620
It's like a pandas, so it's a pandas-like API.


00:37:24.620 --> 00:37:28.280
but it's for n-dimensional data.


00:37:28.280 --> 00:37:33.000
So if you have like, a lot of times people talk about


00:37:33.000 --> 00:37:35.960
in like geospatial data where there's that long time


00:37:35.960 --> 00:37:38.760
and others, but also for image data


00:37:38.760 --> 00:37:40.360
where there's maybe a bunch of different bands


00:37:40.360 --> 00:37:44.620
from like satellite imagery or other disciplines


00:37:44.620 --> 00:37:47.280
where you just have labeled data that's not tabular.


00:37:47.280 --> 00:37:50.400
So the axis like mean something,


00:37:50.400 --> 00:37:52.960
but there's not just one or two of them.


00:37:54.020 --> 00:37:55.620
then X-Ray is great for that,


00:37:55.620 --> 00:37:58.540
'cause it lets you do things like you can select


00:37:58.540 --> 00:38:02.380
a certain subset of time


00:38:02.380 --> 00:38:05.340
or a certain subset of whatever your dimension is.


00:38:05.340 --> 00:38:08.820
And you can also aggregate across different dimensions,


00:38:08.820 --> 00:38:11.180
and you can use the labels directly.


00:38:11.180 --> 00:38:14.020
So if you don't have a tool like this,


00:38:14.020 --> 00:38:16.780
I see people doing this a lot


00:38:16.780 --> 00:38:18.300
with machine learning workflows,


00:38:18.300 --> 00:38:22.900
where they'll have separate,


00:38:22.900 --> 00:38:25.160
like a list of all their,


00:38:25.160 --> 00:38:26.820
they'll have like a list of all their labels


00:38:26.820 --> 00:38:28.200
and then they'll have their data


00:38:28.200 --> 00:38:29.500
and they'll do some manipulation


00:38:29.500 --> 00:38:32.760
and they'll try to like reattach them at the end.


00:38:32.760 --> 00:38:36.540
And it just turns into a mess.


00:38:36.540 --> 00:38:39.780
And it's actually just like takes care of that all for you.


00:38:39.780 --> 00:38:42.380
It's pretty great.


00:38:42.380 --> 00:38:44.160
And I think that it has applications


00:38:44.160 --> 00:38:47.120
that have not been fully realized yet.


00:38:47.120 --> 00:38:49.160
And it's starting to like take off in other spaces,


00:38:49.160 --> 00:38:51.320
but it really comes from this geospatial world,


00:38:51.320 --> 00:38:54.520
but I think it could be useful for all sorts of people.


00:38:54.520 --> 00:38:55.920
- Right, because in geospatial,


00:38:55.920 --> 00:38:59.040
sometimes you have three dimensions, not just two.


00:38:59.040 --> 00:39:01.800
- Yeah, you almost always have three.


00:39:01.800 --> 00:39:02.960
- Sorry, Brian, go ahead.


00:39:02.960 --> 00:39:04.520
- No, the documentation looks great too.


00:39:04.520 --> 00:39:08.680
The documentation has like, it gets getting started guides


00:39:08.680 --> 00:39:12.140
and tutorials and videos and galleries and stuff.


00:39:12.140 --> 00:39:14.440
So definitely check out the documentation.


00:39:14.440 --> 00:39:16.720
- Yeah, I think it got a major,


00:39:16.720 --> 00:39:18.600
it seems like I looked at it for this too,


00:39:18.600 --> 00:39:21.160
and it seems like it got a major facelift.


00:39:21.160 --> 00:39:22.880
So it looks really nice.


00:39:22.880 --> 00:39:26.040
It also has like plotting,


00:39:26.040 --> 00:39:28.760
it has a Poisson.plot API,


00:39:28.760 --> 00:39:30.900
or some different version of it


00:39:30.900 --> 00:39:33.240
that's like the pandas version,


00:39:33.240 --> 00:39:35.920
but you can plot in different three dimensions


00:39:35.920 --> 00:39:37.720
or aggregate and then plot.


00:39:37.720 --> 00:39:40.040
And that's like a really nice way


00:39:40.040 --> 00:39:41.720
to get the visuals quickly.


00:39:41.720 --> 00:39:45.360
And then the last thing I wanted to say about it


00:39:45.360 --> 00:39:48.660
is that it's normally backed by NumPy arrays,


00:39:48.660 --> 00:39:51.560
but it can also be backed by Dask arrays or Sparse arrays


00:39:51.560 --> 00:39:55.160
or all sorts of different arrays natively.


00:39:55.160 --> 00:39:58.460
So it's a really cool,


00:39:58.460 --> 00:40:00.440
it's another one of these like building block things


00:40:00.440 --> 00:40:02.340
where you can have extra ways like your labeling


00:40:02.340 --> 00:40:05.480
and your indexing and all the nice stuff


00:40:05.480 --> 00:40:10.480
and then down inside it can be NumPy or Qpy or Dask.


00:40:10.480 --> 00:40:13.340
- How interesting.


00:40:13.340 --> 00:40:16.640
So it can do that juggling and piecing back together


00:40:16.640 --> 00:40:18.640
that other people are manually doing


00:40:18.640 --> 00:40:20.120
and you just have this simple API


00:40:20.120 --> 00:40:22.680
and if it has to do that, it'll figure it out.


00:40:22.680 --> 00:40:24.160
- Yeah, yeah.


00:40:24.160 --> 00:40:25.000
That's pretty cool.


00:40:25.000 --> 00:40:27.840
- Nice, and you talked about QPy and Dask,


00:40:27.840 --> 00:40:30.800
like those are some pretty interesting back ends for this.


00:40:30.800 --> 00:40:33.160
- Yeah, yeah.


00:40:33.160 --> 00:40:36.040
The Dask one is,


00:40:36.040 --> 00:40:40.240
I said QPy and now I'm wondering if maybe it's just like


00:40:40.240 --> 00:40:43.000
Dask and then QPy, so don't quote me on that.


00:40:43.000 --> 00:40:43.840
- Yeah, yeah.


00:40:43.840 --> 00:40:46.640
- But yeah, the Dask one is,


00:40:47.680 --> 00:40:49.400
is like really integrated with X-Ray code.


00:40:49.400 --> 00:40:52.080
So you do like, they do just do some special things


00:40:52.080 --> 00:40:54.600
to make it so that it works with parallelizing and things.


00:40:54.600 --> 00:40:57.520
But from the user experience, it's the same.


00:40:57.520 --> 00:40:59.400
- Yeah, fantastic.


00:40:59.400 --> 00:41:02.200
And then also noticed it requires Python 3.7.


00:41:02.200 --> 00:41:05.160
Really nice to see tools sort of keeping up


00:41:05.160 --> 00:41:08.240
with the latest, not really old stuff.


00:41:08.240 --> 00:41:10.800
- Well, hopefully it's 3.7 and above.


00:41:10.800 --> 00:41:13.400
- Well, yeah, greater than or equal to.


00:41:13.400 --> 00:41:15.240
- Well, I mean, I ran into a library.


00:41:15.240 --> 00:41:19.520
it was an internal thing that was only 3.7.


00:41:19.520 --> 00:41:22.480
So I tried it on, I'm like, I assumed or above


00:41:22.480 --> 00:41:25.200
and I tried it on 3.9 and it like fell over.


00:41:25.200 --> 00:41:26.280
Like what's going on?


00:41:26.280 --> 00:41:28.360
It was only 3.7, it's weird.


00:41:28.360 --> 00:41:29.880
(laughing)


00:41:29.880 --> 00:41:31.480
- Okay, that is weird.


00:41:31.480 --> 00:41:32.640
- That'd be interesting to think about


00:41:32.640 --> 00:41:34.960
what special features of 3.7 there


00:41:34.960 --> 00:41:36.960
depending on the broken 3.8.


00:41:36.960 --> 00:41:37.800
- Yeah, that's what I was thinking.


00:41:37.800 --> 00:41:39.400
Like, how do you do that?


00:41:39.400 --> 00:41:42.680
Without just checking for equal, equal 3.7 on version.


00:41:42.680 --> 00:41:43.520
- Yeah.


00:41:43.520 --> 00:41:45.060
So anyway.


00:41:45.060 --> 00:41:45.900
- Yeah.


00:41:45.900 --> 00:41:48.120
All right, well, that's it for our six main topics.


00:41:48.120 --> 00:41:49.280
Brian, you got anything else


00:41:49.280 --> 00:41:51.360
you wanna throw out there quickly?


00:41:51.360 --> 00:41:52.480
- Yeah, actually.


00:41:52.480 --> 00:41:55.880
So I didn't have this up,


00:41:55.880 --> 00:41:58.500
but there was a, on Twitter,


00:41:58.500 --> 00:42:01.780
somebody's like reacted to me with an emoji


00:42:01.780 --> 00:42:05.940
and I didn't know what they meant.


00:42:05.940 --> 00:42:09.300
So I looked up, let me pop this up.


00:42:11.160 --> 00:42:16.160
this emojipedia and it was helpful.


00:42:16.160 --> 00:42:18.720
And you can just copy and paste the emoji


00:42:18.720 --> 00:42:22.440
that somebody uses in there and it tells you what it means.


00:42:22.440 --> 00:42:26.520
And the, you know, kind of not just what it's supposed


00:42:26.520 --> 00:42:29.120
to mean, but also what people are using it for.


00:42:29.120 --> 00:42:31.640
Anyway, for somebody that's sort of an old guy


00:42:31.640 --> 00:42:34.100
that is out of touch sometimes, this was helpful.


00:42:34.100 --> 00:42:37.080
Anyway.


00:42:37.080 --> 00:42:38.400
- Yeah, I mean, sometimes it's obvious,


00:42:38.400 --> 00:42:41.360
Like a heart, we know what a heart means, right?


00:42:41.360 --> 00:42:43.760
But you know, like hands together,


00:42:43.760 --> 00:42:45.520
it's not necessarily that that's like a thank you


00:42:45.520 --> 00:42:47.040
sort of bow type of thing.


00:42:47.040 --> 00:42:48.200
I mean, there's certain ones where you're like,


00:42:48.200 --> 00:42:49.160
ah, what does that mean?


00:42:49.160 --> 00:42:51.840
- It was like a hands together with like arrows


00:42:51.840 --> 00:42:52.840
coming out of the top.


00:42:52.840 --> 00:42:54.560
And I'm like, I don't know what this is,


00:42:54.560 --> 00:42:57.000
but apparently it's just raising hands.


00:42:57.000 --> 00:42:59.360
Like you're saying hooray for somebody.


00:42:59.360 --> 00:43:01.080
Oh, okay, that's nice.


00:43:01.080 --> 00:43:01.920
- Okay.


00:43:01.920 --> 00:43:02.740
- It's good.


00:43:02.740 --> 00:43:03.660
- I use Emojipedia all the time,


00:43:03.660 --> 00:43:05.240
but I think I use it in the opposite way.


00:43:05.240 --> 00:43:08.740
I use it to get an emoji to put somewhere,


00:43:08.740 --> 00:43:11.440
because I don't have an emoji keyboard or whatever.


00:43:11.440 --> 00:43:13.840
Oh, yeah, that would be good, too.


00:43:13.840 --> 00:43:17.440
The other thing I wanted to bring up is I hopefully have some cool news


00:43:17.440 --> 00:43:21.040
to share tomorrow about the pytestbook,


00:43:21.040 --> 00:43:25.640
and the news will show up on a revamped pytestbook site.


00:43:25.640 --> 00:43:28.040
So if you go to pytestbook.com,


00:43:28.040 --> 00:43:34.140
you get redirected to this pythontest.com page


00:43:34.140 --> 00:43:36.500
where I'll talk about the second edition.


00:43:36.500 --> 00:43:38.620
So hopefully there'll be news


00:43:38.620 --> 00:43:40.820
about the second edition coming out tomorrow.


00:43:40.820 --> 00:43:44.620
- This is your static site magic?


00:43:44.620 --> 00:43:46.180
- Yeah, yeah, static site.


00:43:46.180 --> 00:43:48.020
And I totally, and it goes dark and light.


00:43:48.020 --> 00:43:49.100
This is fun.


00:43:49.100 --> 00:43:51.180
But I totally stole from Prajan.


00:43:51.180 --> 00:43:56.100
So Prajan has the same, he's got a really nice site.


00:43:56.100 --> 00:43:58.700
So it's a bunch of great, great.


00:43:58.700 --> 00:43:59.540
It looked great.


00:43:59.540 --> 00:44:00.420
And I'm like, that'll work.


00:44:00.420 --> 00:44:01.500
I'll just do what he's doing.


00:44:01.500 --> 00:44:03.740
So that's what I did.


00:44:03.740 --> 00:44:05.340
- Yeah, yeah, very cool.


00:44:05.340 --> 00:44:06.820
- I think we have exactly the same stack


00:44:06.820 --> 00:44:09.020
for our Saturn Cloud site now.


00:44:09.020 --> 00:44:10.780
- Oh, how neat. - That's cool.


00:44:10.780 --> 00:44:12.940
- Awesome, how about you, Julie?


00:44:12.940 --> 00:44:14.820
Anything else you wanna give a shout out to?


00:44:14.820 --> 00:44:18.940
- Well, I've been really into entry points recently.


00:44:18.940 --> 00:44:21.340
Just like the concept of them is very cool.


00:44:21.340 --> 00:44:22.820
- As in like Python packages,


00:44:22.820 --> 00:44:25.140
you can give them almost like CLI command


00:44:25.140 --> 00:44:26.260
type of entry points?


00:44:26.260 --> 00:44:28.700
- Yeah, but the thing that I think is really cool


00:44:28.700 --> 00:44:31.300
is like, like, like matplotlib,


00:44:31.300 --> 00:44:33.620
this is an example that made me first realize


00:44:33.620 --> 00:44:36.020
about entry points is matplotlib has this .plat,


00:44:36.020 --> 00:44:38.260
I think I mentioned this three times now,


00:44:38.260 --> 00:44:39.620
but you can swap out the backend,


00:44:39.620 --> 00:44:41.220
so you don't have to have matplotlib,


00:44:41.220 --> 00:44:42.460
you can use other backends,


00:44:42.460 --> 00:44:45.300
and all the logic for that is in


00:44:45.300 --> 00:44:48.780
the other visualization libraries themselves,


00:44:48.780 --> 00:44:50.280
not in pandas.


00:44:50.280 --> 00:44:55.300
So it's just like, you can swap out other things,


00:44:55.300 --> 00:44:57.540
it's not just for CLIs, I guess.


00:44:57.540 --> 00:44:58.940
- Okay, yeah, how neat.


00:44:58.940 --> 00:45:01.540
All right, yeah, I learned about entry points


00:45:01.540 --> 00:45:02.660
a year, year and a half ago,


00:45:02.660 --> 00:45:04.460
And ever since I'm, oh yeah, this is awesome.


00:45:04.460 --> 00:45:06.140
I can now create these little commands


00:45:06.140 --> 00:45:07.700
that'll be part of just my shell.


00:45:07.700 --> 00:45:08.820
I love it.


00:45:08.820 --> 00:45:09.780
- Yeah.


00:45:09.780 --> 00:45:10.940
The other thing I wanted to say was


00:45:10.940 --> 00:45:12.820
the GitHub CLI is really cool.


00:45:12.820 --> 00:45:16.660
I think that's standalone, but it's, I've been using it.


00:45:16.660 --> 00:45:19.180
- I'm sure people know the Git CLI,


00:45:19.180 --> 00:45:21.500
but what's the story of the GitHub CLI?


00:45:21.500 --> 00:45:24.980
- Oh, well, the GitHub CLI is, makes it,


00:45:24.980 --> 00:45:28.860
so if you have ever tried to check out a branch


00:45:28.860 --> 00:45:30.740
on someone else's fork,


00:45:30.740 --> 00:45:33.060
Like if you want to like evaluate a PR


00:45:33.060 --> 00:45:33.900
that someone has put on the forum.


00:45:33.900 --> 00:45:35.100
- Yeah, exactly, yeah.


00:45:35.100 --> 00:45:38.460
- That is the situation where the GitHub CLI is really great


00:45:38.460 --> 00:45:42.420
'cause you can just do like gh checkout PR


00:45:42.420 --> 00:45:45.580
or gh PR checkout, whatever the number is


00:45:45.580 --> 00:45:47.960
and that you're just on their branch then.


00:45:47.960 --> 00:45:50.320
And if you can push, if you have push access


00:45:50.320 --> 00:45:52.460
to their branch of your maintainer and they've allowed it,


00:45:52.460 --> 00:45:55.780
you can just push directly and you don't,


00:45:55.780 --> 00:45:57.780
I mean, I was always looking at that


00:45:57.780 --> 00:45:59.140
like sequence of commands before,


00:45:59.140 --> 00:46:01.780
I know people have like aliases and stuff,


00:46:01.780 --> 00:46:04.460
but yeah, I'd really recommend checking it out


00:46:04.460 --> 00:46:06.100
if you do a lot of GitHub stuff.


00:46:06.100 --> 00:46:06.940
- Okay, awesome.


00:46:06.940 --> 00:46:08.140
Yeah, that's great advice.


00:46:08.140 --> 00:46:10.940
- Yeah, I often wanna like check out some pull requests.


00:46:10.940 --> 00:46:13.300
I wanna be able to like play with it, run their code.


00:46:13.300 --> 00:46:14.140
- Yeah.


00:46:14.140 --> 00:46:14.960
- And so, yeah.


00:46:14.960 --> 00:46:16.740
- It's the best.


00:46:16.740 --> 00:46:18.140
- Yeah, awesome.


00:46:18.140 --> 00:46:19.420
All right, I got a couple of things to add.


00:46:19.420 --> 00:46:20.260
By the way, first of all,


00:46:20.260 --> 00:46:22.740
just that first practical SQL analysis


00:46:22.740 --> 00:46:23.580
that you talked about,


00:46:23.580 --> 00:46:26.020
it also has a similar theme


00:46:26.020 --> 00:46:27.260
that you were talking about, Brian.


00:46:27.260 --> 00:46:28.380
One of the things I thought was cool though,


00:46:28.380 --> 00:46:29.300
as you scroll through it,


00:46:29.300 --> 00:46:31.460
it has a progress bar for reading at the top.


00:46:31.460 --> 00:46:32.660
And that just made me so happy.


00:46:32.660 --> 00:46:33.500
I don't know why.


00:46:33.500 --> 00:46:34.340
- Oh.


00:46:34.340 --> 00:46:35.620
- That was really neat.


00:46:35.620 --> 00:46:36.860
All right, but I have a bunch of


00:46:36.860 --> 00:46:38.040
hear all about it sort of things.


00:46:38.040 --> 00:46:40.340
So really quick, Python,


00:46:40.340 --> 00:46:42.500
P2, it's got the center.


00:46:42.500 --> 00:46:43.780
Yeah, okay.


00:46:43.780 --> 00:46:44.680
Live update.


00:46:44.680 --> 00:46:47.500
Python 3.10 beta two is out


00:46:47.500 --> 00:46:48.740
if people want to check that out


00:46:48.740 --> 00:46:51.080
and you can go download that.


00:46:51.080 --> 00:46:53.240
It also highlights all the major features


00:46:53.240 --> 00:46:56.960
like the pipe operator for writing unions


00:46:56.960 --> 00:47:01.440
type specifications and a bunch of other stuff that people might care about.


00:47:01.440 --> 00:47:04.800
A structural pattern matching is probably a big one.


00:47:04.800 --> 00:47:10.160
Yeah, go to the completely different down. Is that on here?


00:47:10.160 --> 00:47:14.480
And now for something completely different. I love that part. So right above the files.


00:47:14.480 --> 00:47:23.520
Yeah. Oh, interesting. The Aaron Fest paradox concerns the rotation of a rigid disc in the


00:47:23.520 --> 00:47:25.520
the theory of relativity.


00:47:25.520 --> 00:47:28.240
It's original 1909 formulation presented by,


00:47:28.240 --> 00:47:31.200
yeah, okay, that is unexpected, but very cool.


00:47:31.200 --> 00:47:34.160
- And completely different and irrelevant, yeah.


00:47:34.160 --> 00:47:35.400
- Yeah, awesome, okay.


00:47:35.400 --> 00:47:38.280
So takeaway, 3.10 beta two is out,


00:47:38.280 --> 00:47:39.120
people can check that out.


00:47:39.120 --> 00:47:41.840
There's also some security patches for Django,


00:47:41.840 --> 00:47:43.260
so be sure to check that out.


00:47:43.260 --> 00:47:46.440
One thing that surprised me is the Microsoft


00:47:46.440 --> 00:47:48.680
install Python from the Windows Store


00:47:48.680 --> 00:47:53.680
He's already like has a 310 beta store install.


00:47:53.680 --> 00:47:55.400
So, okay, that's pretty cool


00:47:55.400 --> 00:47:57.560
that they're keeping that up to date.


00:47:57.560 --> 00:47:59.080
- And it's rated E for everyone.


00:47:59.080 --> 00:48:02.280
- Yeah, even kids can pip install, awesome.


00:48:02.280 --> 00:48:06.000
So Frederick Bankston sent a message


00:48:06.000 --> 00:48:07.580
in response to our last show


00:48:07.580 --> 00:48:10.840
where we talked about the method overloading by type.


00:48:10.840 --> 00:48:12.600
Like if it takes an int or a string,


00:48:12.600 --> 00:48:13.600
it calls different functions.


00:48:13.600 --> 00:48:16.440
It's also pointed us towards this multi-method


00:48:16.440 --> 00:48:19.800
other library that is similar so people can check that out.


00:48:19.800 --> 00:48:20.640
That's cool.


00:48:20.640 --> 00:48:21.460
- Yeah, neat.


00:48:21.460 --> 00:48:24.680
- Speaking of the GitHub stuff,


00:48:24.680 --> 00:48:29.080
I've been starting to use PyCharm 2021.2


00:48:29.080 --> 00:48:31.880
early access version, early access program version,


00:48:31.880 --> 00:48:32.920
and it's been working fine.


00:48:32.920 --> 00:48:34.880
So if people wanna try out the new features,


00:48:34.880 --> 00:48:36.480
there's a bunch of cool stuff.


00:48:36.480 --> 00:48:38.200
You have support for Python 3.10


00:48:38.200 --> 00:48:40.860
and new stuff for pytest.


00:48:40.860 --> 00:48:43.160
I don't remember if this came in here,


00:48:43.160 --> 00:48:46.000
but one thing that I did learn about


00:48:46.000 --> 00:48:49.000
that recently that's in there that's super cool is


00:48:49.000 --> 00:48:53.600
they have in PyCharm,


00:48:53.600 --> 00:48:56.360
if you log in PyCharm into your GitHub account,


00:48:56.360 --> 00:48:59.100
there's a pull request section and you can just click it


00:48:59.100 --> 00:49:02.100
and it'll do those same steps that Julia was talking about,


00:49:02.100 --> 00:49:03.240
like right there in PyCharm.


00:49:03.240 --> 00:49:05.900
Just go, I wanna try that PR before I accept it


00:49:05.900 --> 00:49:07.720
and just click that and go.


00:49:07.720 --> 00:49:08.740
You can even have comments.


00:49:08.740 --> 00:49:10.440
You see the conversation inside there


00:49:10.440 --> 00:49:11.980
and everything is cool.


00:49:11.980 --> 00:49:13.840
- Never go to a GitHub again.


00:49:13.840 --> 00:49:14.840
- Exactly.


00:49:14.840 --> 00:49:17.240
and just forget how to use it basically.


00:49:17.240 --> 00:49:20.240
All right, that's it.


00:49:20.240 --> 00:49:21.800
That's all the items I got.


00:49:21.800 --> 00:49:23.240
So yeah, I've got other stuff


00:49:23.240 --> 00:49:25.240
that's just hanging around from before.


00:49:25.240 --> 00:49:27.040
- Cool.


00:49:27.040 --> 00:49:29.560
- All right, well, you wanna close it out with a joke?


00:49:29.560 --> 00:49:31.080
- Yeah, always. - A couple of jokes?


00:49:31.080 --> 00:49:31.920
Always, all right.


00:49:31.920 --> 00:49:35.800
So over at upjoke.com/programmer-jokes,


00:49:35.800 --> 00:49:38.160
you'll find many bad jokes.


00:49:38.160 --> 00:49:40.840
Some even that are not very appropriate or whatever,


00:49:40.840 --> 00:49:42.120
but there's a few that are funny.


00:49:42.120 --> 00:49:43.920
So I pulled out three here.


00:49:43.920 --> 00:49:46.340
I'll do the first one.


00:49:46.340 --> 00:49:48.720
Brian, you can do the second,


00:49:48.720 --> 00:49:50.780
Julie, you can do the third, I guess, if you're up for it.


00:49:50.780 --> 00:49:51.620
- Okay.


00:49:51.620 --> 00:49:53.200
- So this one we should have saved


00:49:53.200 --> 00:49:54.360
for six months from now,


00:49:54.360 --> 00:49:55.620
but I asked a programmer


00:49:55.620 --> 00:49:57.600
what her new year's resolution would be.


00:49:57.600 --> 00:49:59.960
She answered 1920 by 1080.


00:49:59.960 --> 00:50:01.920
- That's so bad.


00:50:01.920 --> 00:50:03.200
No, that's awesome.


00:50:03.200 --> 00:50:04.040
- It's really bad.


00:50:04.040 --> 00:50:05.600
All right, well, you got to do the next one.


00:50:05.600 --> 00:50:07.980
(laughing)


00:50:07.980 --> 00:50:11.400
- How does a programmer confuse a mathematician?


00:50:11.400 --> 00:50:12.240
- I don't know how.


00:50:12.240 --> 00:50:15.000
saying that X equals X plus one.


00:50:15.000 --> 00:50:17.240
(laughing)


00:50:17.240 --> 00:50:19.960
- All right, Julia.


00:50:19.960 --> 00:50:24.120
- Okay, why do Python programmers have low self-esteem?


00:50:24.120 --> 00:50:27.920
They're constantly comparing their self to other.


00:50:27.920 --> 00:50:30.180
(laughing)


00:50:30.180 --> 00:50:34.200
- Also bad, probably the worst, sorry we gave you that one.


00:50:34.200 --> 00:50:35.960
- That's okay.


00:50:35.960 --> 00:50:38.680
I saw the one that Brian did and I was like,


00:50:38.680 --> 00:50:40.200
oh, it should be X plus equals one.


00:50:40.200 --> 00:50:42.040
I was like, no, that ruins the joke.


00:50:42.040 --> 00:50:43.280
(laughing)


00:50:43.280 --> 00:50:44.120
- Exactly.


00:50:44.120 --> 00:50:45.880
- Yeah.


00:50:45.880 --> 00:50:50.240
Yeah, I actually often do the slow way


00:50:50.240 --> 00:50:54.720
or the non-obvious way of X equals X plus one


00:50:54.720 --> 00:50:57.880
just to make it more obvious to people reading it.


00:50:57.880 --> 00:51:00.280
- Yeah, yeah, no, I agree.


00:51:00.280 --> 00:51:04.180
- Yeah, at least it's not C++ with X, plus plus X.


00:51:04.180 --> 00:51:06.760
- Right?


00:51:06.760 --> 00:51:09.200
- No, no, we should have that.


00:51:09.200 --> 00:51:14.200
- I'm okay with X plus plus, but not that also plus plus X.


00:51:14.200 --> 00:51:15.040
- The pre-increment.


00:51:15.040 --> 00:51:16.320
- Yeah, the pre-increment.


00:51:16.320 --> 00:51:18.000
- Pre-increment's weird.


00:51:18.000 --> 00:51:19.840
- Yes, exactly, exactly.


00:51:19.840 --> 00:51:22.800
But I could go for an X plus plus, come on.


00:51:22.800 --> 00:51:25.700
All right, well, Julia, thanks for joining us this week.


00:51:25.700 --> 00:51:27.320
And Brian, thanks as always.


00:51:27.320 --> 00:51:28.160
- Always a pleasure.


00:51:28.160 --> 00:51:29.000
Thanks, Julia.


00:51:29.000 --> 00:51:29.840
- Yeah, it's fun.


00:51:29.840 --> 00:51:30.920
- Bye. - Bye.


00:51:30.920 --> 00:51:31.760
- Bye, everyone.


00:51:31.760 --> 00:51:41.760
[BLANK_AUDIO]

