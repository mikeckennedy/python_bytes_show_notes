WEBVTT

00:00:00.000 --> 00:00:03.640
- Hello, YouTube. Hello, Brian.


00:00:03.640 --> 00:00:04.480
- Hey.


00:00:04.480 --> 00:00:05.960
- Hey, great to see you.


00:00:05.960 --> 00:00:07.660
Super excited to be here.


00:00:07.660 --> 00:00:10.000
- Hi, Will.


00:00:10.000 --> 00:00:11.640
- Hi, Will. Hi, Oli. Hi, Brandon.


00:00:11.640 --> 00:00:12.800
Hey, everyone out in the audience.


00:00:12.800 --> 00:00:13.640
It's really great.


00:00:13.640 --> 00:00:14.720
We always love that you show up


00:00:14.720 --> 00:00:17.040
and ask questions and whatnot.


00:00:17.040 --> 00:00:18.680
And yeah, happy to have you here.


00:00:18.680 --> 00:00:20.020
Let's kick this thing off.


00:00:20.020 --> 00:00:23.320
Hello, and welcome to Python Bytes,


00:00:23.320 --> 00:00:25.200
where we deliver Python news and headlines


00:00:25.200 --> 00:00:26.760
directly to your earbuds.


00:00:26.760 --> 00:00:31.760
This is episode 282, recorded May 3rd, 2022.


00:00:31.760 --> 00:00:33.880
I'm Michael Kennedy.


00:00:33.880 --> 00:00:35.080
- And I am Brian Okken.


00:00:35.080 --> 00:00:37.480
- It's great to have you here, Brian.


00:00:37.480 --> 00:00:39.660
It's just us, just the two of us.


00:00:39.660 --> 00:00:41.540
- Yeah, just like old times.


00:00:41.540 --> 00:00:43.680
- I know, but we have our friends out in the audience,


00:00:43.680 --> 00:00:45.720
so we're not entirely alone.


00:00:45.720 --> 00:00:47.160
It's great.


00:00:47.160 --> 00:00:50.280
So let's kick it off.


00:00:50.280 --> 00:00:54.280
I know you have a particularly exciting announcement


00:00:54.280 --> 00:00:56.120
topic to cover here.


00:00:56.120 --> 00:00:59.320
So yeah, let's go do it.


00:00:59.320 --> 00:01:02.160
- Okay, so PyScript.


00:01:02.160 --> 00:01:05.200
So this was an announcement at PyCon US


00:01:05.200 --> 00:01:09.860
by Anaconda's CEO, Peter Wang, during a keynote.


00:01:09.860 --> 00:01:13.100
I wasn't there, but like everybody was tweeting about it.


00:01:13.100 --> 00:01:16.160
So it almost felt like I was there.


00:01:16.160 --> 00:01:20.400
So, but I haven't seen the presentation,


00:01:20.400 --> 00:01:23.240
so I can't wait till that goes online.


00:01:23.240 --> 00:01:24.080
So.


00:01:24.080 --> 00:01:25.320
- I know, are the videos,


00:01:25.320 --> 00:01:27.960
I have not seen the videos for the presentations


00:01:27.960 --> 00:01:28.920
at PyCon out yet.


00:01:28.920 --> 00:01:29.760
Are they out yet?


00:01:29.760 --> 00:01:30.720
Or did I just missed it?


00:01:30.720 --> 00:01:31.560
- I haven't looked.


00:01:31.560 --> 00:01:32.720
- Is my YouTube broken?


00:01:32.720 --> 00:01:33.560
(laughing)


00:01:33.560 --> 00:01:35.240
It should be full of this stuff.


00:01:35.240 --> 00:01:36.600
- But like, what's up with,


00:01:36.600 --> 00:01:38.440
is it supposed to be next day or something?


00:01:38.440 --> 00:01:39.280
I don't know.


00:01:39.280 --> 00:01:40.320
- No, I know.


00:01:40.320 --> 00:01:41.140
- Anyway.


00:01:41.140 --> 00:01:41.980
- I would have loved to live stream it,


00:01:41.980 --> 00:01:43.000
but I didn't see an option.


00:01:43.000 --> 00:01:45.280
So anyway, I'm looking forward to watching this one


00:01:45.280 --> 00:01:46.400
in particular when it comes out,


00:01:46.400 --> 00:01:47.560
'cause this is big news.


00:01:47.560 --> 00:01:50.800
- So PyScript is Python in the browser.


00:01:50.800 --> 00:01:51.640
So what does that mean?


00:01:51.640 --> 00:01:53.820
It is built on top of PyEdited,


00:01:53.820 --> 00:01:57.180
which is a port of CPython based on WebAssembly.


00:01:57.180 --> 00:02:00.160
I'm pretty sure we've covered Pyodide before,


00:02:00.160 --> 00:02:02.460
but so this is a pretty neat thing.


00:02:02.460 --> 00:02:04.040
And one of the things that this,


00:02:04.040 --> 00:02:06.660
so the PyScript.net, you go to it,


00:02:06.660 --> 00:02:09.360
it's got a little, it's kind of actually,


00:02:09.360 --> 00:02:12.020
it's like hype and it sounds neat


00:02:12.020 --> 00:02:13.380
and you can do Python in the browser.


00:02:13.380 --> 00:02:16.380
Neat with the PyScript tags, but what does that mean?


00:02:16.380 --> 00:02:18.980
So there's a, if you go down to the bottom,


00:02:18.980 --> 00:02:22.420
there's a GitHub repo that you can go look at.


00:02:22.420 --> 00:02:24.320
this is what I suggest.


00:02:24.320 --> 00:02:25.780
And this we'll talk about,


00:02:25.780 --> 00:02:28.100
there's a getting started guide.


00:02:28.100 --> 00:02:31.860
But what I did is just followed this,


00:02:31.860 --> 00:02:34.180
I cloned the repo and then I went in


00:02:34.180 --> 00:02:37.340
and did the into the JavaScript area


00:02:37.340 --> 00:02:38.940
and then did NPM install


00:02:38.940 --> 00:02:42.160
and then did this dev run, run dev thing.


00:02:42.160 --> 00:02:45.580
So this only take me like five minutes to get this far.


00:02:45.580 --> 00:02:49.220
And what you have is you've got,


00:02:49.220 --> 00:02:51.900
one of the things that it has is it has an examples folder


00:02:51.900 --> 00:02:54.820
and you can just open this up now in your local,


00:02:54.820 --> 00:02:57.380
your local browser, local host.


00:02:57.380 --> 00:02:58.660
And there's all these cool demos.


00:02:58.660 --> 00:03:01.500
Like there's a, a REPL where you can just do,


00:03:01.500 --> 00:03:04.620
it's kind of like a Jupyter where you can say like


00:03:04.620 --> 00:03:07.380
X equals three, let's do this.


00:03:07.380 --> 00:03:11.500
And then X, and then if I do shift enter, it evaluates it.


00:03:11.500 --> 00:03:12.460
How neat is that?


00:03:12.460 --> 00:03:13.900
That's pretty neat. - That's awesome.


00:03:13.900 --> 00:03:15.220
Yeah.


00:03:15.220 --> 00:03:16.500
- To do app here.


00:03:16.500 --> 00:03:19.060
So make sure you listen to our podcasts,


00:03:19.060 --> 00:03:20.780
go by Python testing with pytest.


00:03:20.780 --> 00:03:22.880
We'll check that 'cause we know you already bought that.


00:03:22.880 --> 00:03:27.880
So, and then there's an example with D3 graphics.


00:03:27.880 --> 00:03:29.160
This is neat.


00:03:29.160 --> 00:03:31.360
I don't think I've ever done this.


00:03:31.360 --> 00:03:33.880
There's an Altair example, and this is pretty fun


00:03:33.880 --> 00:03:36.600
'cause you click around and it changes the above.


00:03:36.600 --> 00:03:38.160
It's like an interactive thing.


00:03:38.160 --> 00:03:40.360
This is fun.


00:03:40.360 --> 00:03:42.840
We use Altair with a project at work.


00:03:42.840 --> 00:03:43.680
So this is neat.


00:03:43.680 --> 00:03:45.660
The Mandelbrot set.


00:03:45.660 --> 00:03:47.120
So there's some code.


00:03:47.120 --> 00:03:48.600
So all of this code is in the repo.


00:03:48.600 --> 00:03:49.720
So you can look at the examples


00:03:49.720 --> 00:03:51.960
and look exactly how the code is done.


00:03:51.960 --> 00:03:55.920
There's a HTML file and a Python file for all of these.


00:03:55.920 --> 00:03:57.080
So you can check it out.


00:03:57.080 --> 00:03:58.800
Actually, I don't know about the Python thing.


00:03:58.800 --> 00:04:02.920
It's HTML and Python within the HTML code embedded.


00:04:02.920 --> 00:04:05.280
So there isn't a separate file,


00:04:05.280 --> 00:04:08.720
but you can do imports and all this sort of stuff too.


00:04:08.720 --> 00:04:11.400
Oh, I went too far, but I wanted to bring up,


00:04:11.400 --> 00:04:13.040
there's also an article that we're gonna link to


00:04:13.040 --> 00:04:15.080
in the show notes that is called


00:04:16.800 --> 00:04:20.120
- PyScript, unleash the power of Python in your browser.


00:04:20.120 --> 00:04:24.760
This is by Eric Lewinson and it runs through,


00:04:24.760 --> 00:04:27.980
it's a pretty interesting little quick read of what it is,


00:04:27.980 --> 00:04:32.560
if you're not familiar with WebAssembly and Pyodide.


00:04:32.560 --> 00:04:33.860
So it's nice.


00:04:33.860 --> 00:04:37.680
What do you think, Michael?


00:04:37.680 --> 00:04:38.880
- I am very excited.


00:04:38.880 --> 00:04:43.880
You know, there's been progress on the WebAssembly


00:04:44.560 --> 00:04:48.920
plus Python side on several occurrences that were,


00:04:48.920 --> 00:04:52.000
they give you a sense of what's possible,


00:04:52.000 --> 00:04:55.840
but they didn't give you a thing to build with.


00:04:55.840 --> 00:04:57.200
You know what I mean? - Yeah, yeah.


00:04:57.200 --> 00:04:59.220
- So for example, Pyodide is awesome,


00:04:59.220 --> 00:05:00.380
but it's kind of like,


00:05:00.380 --> 00:05:05.360
well, if I wanna sort of host Jupyter kernel in my browser,


00:05:05.360 --> 00:05:07.380
like I can kind of do that, right?


00:05:07.380 --> 00:05:10.280
The WebAssembly Python itself is great,


00:05:10.280 --> 00:05:14.720
but it doesn't specify a way to have a UI


00:05:14.720 --> 00:05:16.700
of your webpage interact with Python.


00:05:16.700 --> 00:05:19.560
It's just, oh, you could execute Python over here.


00:05:19.560 --> 00:05:20.600
Well, like, and then what?


00:05:20.600 --> 00:05:21.680
You know what I mean?


00:05:21.680 --> 00:05:24.840
Which is still good, but there's not something


00:05:24.840 --> 00:05:28.140
where like I can have a button on there


00:05:28.140 --> 00:05:30.040
that like wires up to this thing in Python


00:05:30.040 --> 00:05:33.720
and I can have this list that binds in that way and so on.


00:05:33.720 --> 00:05:36.640
And this looks like we might be there.


00:05:36.640 --> 00:05:39.400
Like one of the things they talk about on the page


00:05:39.400 --> 00:05:42.720
is not just running Python in the browser


00:05:42.720 --> 00:05:45.040
and the Python ecosystem as you pointed out,


00:05:45.040 --> 00:05:47.040
but really importantly, two more things,


00:05:47.040 --> 00:05:48.240
Python with JavaScript,


00:05:48.240 --> 00:05:50.440
bidirectional communication between Python


00:05:50.440 --> 00:05:52.040
and JavaScript objects.


00:05:52.040 --> 00:05:52.880
- Yeah.


00:05:52.880 --> 00:05:54.680
- So you can wire into like events on the page


00:05:54.680 --> 00:05:57.680
and other DOM type of things.


00:05:57.680 --> 00:05:58.800
- Yes.


00:05:58.800 --> 00:06:00.560
- Visual application development,


00:06:00.560 --> 00:06:02.360
but ties in with that with,


00:06:02.360 --> 00:06:04.760
use readily available curated UI components


00:06:04.760 --> 00:06:07.720
such as buttons, containers, text boxes, and more.


00:06:07.720 --> 00:06:08.560
Oh yeah.


00:06:08.560 --> 00:06:12.600
- Yeah, I mean, like these are just a little quick examples,


00:06:12.600 --> 00:06:15.300
but I'd love to see some bigger examples


00:06:15.300 --> 00:06:17.700
of things like that, like being able to connect,


00:06:17.700 --> 00:06:20.940
you know, yeah, JavaScript interaction


00:06:20.940 --> 00:06:24.580
with stuff on the Python side.


00:06:24.580 --> 00:06:25.620
That'll be neat.


00:06:25.620 --> 00:06:27.520
- Yeah, it's weird to see Python written


00:06:27.520 --> 00:06:31.680
just straight in the browser, you know?


00:06:31.680 --> 00:06:35.560
But here you have like angle bracket, pi dash script


00:06:35.560 --> 00:06:38.360
and just import anti-gravity, anti-gravity.fly.


00:06:38.360 --> 00:06:40.840
>> Wait, what?


00:06:40.840 --> 00:06:46.960
>> Well, I picked this example for one is because it does do an import.


00:06:46.960 --> 00:06:50.100
So there's a path thing you can set up.


00:06:50.100 --> 00:06:51.940
So you can put code.


00:06:51.940 --> 00:06:54.520
All your code doesn't have to be in HTML.


00:06:54.520 --> 00:06:57.240
It can be in a Python file.


00:06:57.240 --> 00:06:58.480
So you can debug it there,


00:06:58.480 --> 00:07:00.040
which that's where you want to debug it,


00:07:00.040 --> 00:07:02.880
and then you can import it and call it within Python.


00:07:02.880 --> 00:07:05.720
This is probably more where I would use it


00:07:05.720 --> 00:07:08.300
is putting most of my code somewhere else.


00:07:08.300 --> 00:07:09.140
And then--


00:07:09.140 --> 00:07:10.160
- Yeah, that's what I wanna see.


00:07:10.160 --> 00:07:13.040
I would want to see just Python files


00:07:13.040 --> 00:07:16.640
and just effectively a script tag for it.


00:07:16.640 --> 00:07:18.680
I mean, you probably, maybe you can't do it directly


00:07:18.680 --> 00:07:20.800
as a script tag, but you could do, you know,


00:07:20.800 --> 00:07:24.160
bracket PyScript and then just import and run, right?


00:07:24.160 --> 00:07:25.560
It's called the endpoint basically.


00:07:25.560 --> 00:07:26.560
- I haven't looked at this before.


00:07:26.560 --> 00:07:30.120
So the antigravity.py that is bringing in


00:07:30.120 --> 00:07:32.760
is bringing in some Pyodide stuff


00:07:32.760 --> 00:07:35.480
and to be able to work it.


00:07:35.480 --> 00:07:39.340
- I'm seeing some from doc, this is Python code,


00:07:39.340 --> 00:07:43.380
from document, or sorry, from JS import document


00:07:43.380 --> 00:07:44.640
and set interval. - Yeah.


00:07:44.640 --> 00:07:48.140
- Those are the things you do there.


00:07:48.140 --> 00:07:50.980
Let's see, are there any callbacks?


00:07:50.980 --> 00:07:52.860
I don't see any callbacks there.


00:07:52.860 --> 00:07:55.300
Oh yeah, yeah, this set interval has a callback,


00:07:55.300 --> 00:07:57.980
self.move when the JavaScript interval fires.


00:07:57.980 --> 00:08:02.980
So under under fly, that is hooking into a timer there.


00:08:02.980 --> 00:08:04.300
- Oh, yeah. - Timer callback.


00:08:04.300 --> 00:08:05.360
- So we should check that out.


00:08:05.360 --> 00:08:06.880
So where's that?


00:08:06.880 --> 00:08:07.720
So the,


00:08:07.720 --> 00:08:13.240
I should have done this ahead of time.


00:08:13.240 --> 00:08:14.520
The anti-gravity is not linked to,


00:08:14.520 --> 00:08:16.080
but I'll just like bring it up.


00:08:16.080 --> 00:08:18.840
Anti-gravity.


00:08:18.840 --> 00:08:23.680
Based on.


00:08:23.680 --> 00:08:26.280
- Wow. Oh my gosh.


00:08:26.280 --> 00:08:27.240
This is so amazing.


00:08:27.240 --> 00:08:28.720
People have to do this.


00:08:28.720 --> 00:08:30.400
- Oh, this is cool.


00:08:30.400 --> 00:08:32.320
- We all know import anti-gravity


00:08:32.320 --> 00:08:34.760
and we've got to know the XKCD that comes up,


00:08:34.760 --> 00:08:36.160
But yes, this is--


00:08:36.160 --> 00:08:37.360
- I've been animated.


00:08:37.360 --> 00:08:38.260
- Oh, it's alive.


00:08:38.260 --> 00:08:40.260
It's not just as the person who says,


00:08:40.260 --> 00:08:41.100
"How are you flying?"


00:08:41.100 --> 00:08:42.680
The person says, "I'm playing with Python."


00:08:42.680 --> 00:08:44.760
Like that thing is alive and cruising around.


00:08:44.760 --> 00:08:45.600
I love it.


00:08:45.600 --> 00:08:47.440
And that's based on the callback, right?


00:08:47.440 --> 00:08:50.120
That's calling Python based on the set interval,


00:08:50.120 --> 00:08:51.740
timer callback in JavaScript.


00:08:51.740 --> 00:08:52.580
- Yep, yeah.


00:08:52.580 --> 00:08:54.920
- And to me, that has been the missing piece.


00:08:54.920 --> 00:08:56.760
Like how do I wire up?


00:08:56.760 --> 00:08:59.240
It's like great if I can just execute Python


00:08:59.240 --> 00:09:00.880
and have, you know, like a number come out.


00:09:00.880 --> 00:09:03.600
But what I want is view in Python or reactive.


00:09:03.600 --> 00:09:07.120
I want to build the UI in Python and just not deal


00:09:07.120 --> 00:09:10.680
with JavaScript and be able to do so many more things


00:09:10.680 --> 00:09:12.400
on the front end.


00:09:12.400 --> 00:09:16.680
I mean, this opens up stuff like progressive web apps,


00:09:16.680 --> 00:09:20.740
which could be really amazing for the Python space, right?


00:09:20.740 --> 00:09:22.360
Like I'm here in Vivaldi.


00:09:22.360 --> 00:09:25.620
If I go to my email client, just in the browser,


00:09:25.620 --> 00:09:27.040
I can right click and install.


00:09:27.040 --> 00:09:29.240
It gets its own app that works offline.


00:09:29.240 --> 00:09:32.060
It like pulls its data down into local DB or whatever.


00:09:32.920 --> 00:09:34.200
- Theoretically, you could do this, right?


00:09:34.200 --> 00:09:37.760
You could pull down the CPython WASM.


00:09:37.760 --> 00:09:42.280
You could pull down the 5K PyScript file


00:09:42.280 --> 00:09:45.620
and then just somehow use JavaScript to Python


00:09:45.620 --> 00:09:46.680
to talk to local DBs.


00:09:46.680 --> 00:09:50.520
I mean, what if we get like ORMs in Python going,


00:09:50.520 --> 00:09:52.000
oh yeah, we have one of our backends


00:09:52.000 --> 00:09:55.080
is the web browser local DB.


00:09:55.080 --> 00:09:55.920
- Yeah.


00:09:55.920 --> 00:09:57.180
- Or something, that would mean, this is great.


00:09:57.180 --> 00:10:00.880
I would love, I'm very excited for where this might go.


00:10:00.880 --> 00:10:02.480
- Sky's the limit, right?


00:10:02.480 --> 00:10:06.020
with that little flying character saying at least.


00:10:06.020 --> 00:10:07.360
- Yeah.


00:10:07.360 --> 00:10:10.160
- Okay, so well, good job, Anaconda folks.


00:10:10.160 --> 00:10:12.500
And I believe this was Fabio and crew.


00:10:12.500 --> 00:10:13.500
So really, really nice.


00:10:13.500 --> 00:10:16.000
That was super psyched.


00:10:16.000 --> 00:10:17.460
How am I gonna follow that one up, Brian?


00:10:17.460 --> 00:10:18.300
I mean, come on.


00:10:18.300 --> 00:10:19.600
(laughing)


00:10:19.600 --> 00:10:22.040
It's just, I'll give it a try.


00:10:22.040 --> 00:10:23.300
No, I've got some good items.


00:10:23.300 --> 00:10:27.640
They're just not flying around amazing Python


00:10:27.640 --> 00:10:29.520
in the browser, amazing.


00:10:29.520 --> 00:10:34.520
So Bloomberg has a lot of Python going on,


00:10:34.520 --> 00:10:36.520
and Bloomberg actually has a pretty cool


00:10:36.520 --> 00:10:39.520
like tech engineering blog where they talk about


00:10:39.520 --> 00:10:41.520
some of the stuff going on at Bloomberg, right?


00:10:41.520 --> 00:10:42.520
- Yeah.


00:10:42.520 --> 00:10:46.520
- One of the really good articles I read from them


00:10:46.520 --> 00:10:49.520
was about how to really set up and run


00:10:49.520 --> 00:10:51.520
microWSGI in production.


00:10:51.520 --> 00:10:53.520
And it was like this huge, long, deep list of like,


00:10:53.520 --> 00:10:55.520
here's a bunch of flags you probably never thought about,


00:10:55.520 --> 00:10:57.520
and here's why you should care about them in Python.


00:10:57.520 --> 00:10:59.520
Really good stuff.


00:10:59.520 --> 00:11:02.440
So they're back with another thing that they use


00:11:02.440 --> 00:11:07.440
that is cool called Memray, like memory, but Memray.


00:11:07.440 --> 00:11:11.960
It is a memory profile for Python.


00:11:11.960 --> 00:11:14.680
So if you want to understand the performance


00:11:14.680 --> 00:11:17.920
of your application, especially around memory,


00:11:17.920 --> 00:11:21.340
here's a pretty neat tool.


00:11:21.340 --> 00:11:23.240
Now let me just get to that right out of the way


00:11:23.240 --> 00:11:25.480
before I forget, Linux only.


00:11:26.640 --> 00:11:28.860
So if you're not using Linux, just close your ears.


00:11:28.860 --> 00:11:29.700
No, just kidding.


00:11:29.700 --> 00:11:31.740
Like you could all, if you're on Windows,


00:11:31.740 --> 00:11:34.740
you could just run your Python app under WSL


00:11:34.740 --> 00:11:37.420
and then profile it and then go back to running on Windows.


00:11:37.420 --> 00:11:40.540
Or if you're on Mac, just do a VM or something, right?


00:11:40.540 --> 00:11:42.340
Anyway, it only runs on Linux,


00:11:42.340 --> 00:11:45.760
but because Python is so similar across the platforms,


00:11:45.760 --> 00:11:47.460
I'm sure you could just test your code there,


00:11:47.460 --> 00:11:50.000
even if that's not the main use case.


00:11:50.000 --> 00:11:52.420
All right, so you get all these different visualizations


00:11:52.420 --> 00:11:54.520
of memory usage.


00:11:54.520 --> 00:11:57.500
It can track allocations for Python code


00:11:57.500 --> 00:12:00.740
in native extension modules like NumPy


00:12:00.740 --> 00:12:01.580
or something like that.


00:12:01.580 --> 00:12:03.980
And even within CPython itself.


00:12:03.980 --> 00:12:07.700
So you get sort of a holistic view of the memory,


00:12:07.700 --> 00:12:09.220
which is pretty awesome.


00:12:09.220 --> 00:12:10.060
- Yeah.


00:12:10.060 --> 00:12:12.400
- Yeah, and it'll give you different memory reports.


00:12:12.400 --> 00:12:13.700
We'll talk about them a little bit.


00:12:13.700 --> 00:12:16.020
And you can use it as a CLI tool,


00:12:16.020 --> 00:12:17.700
just like kind of like time it or whatever.


00:12:17.700 --> 00:12:21.060
You can just say, memory run my app.


00:12:21.060 --> 00:12:22.980
And then when your app exits, it's like,


00:12:22.980 --> 00:12:24.500
and here's what happened.


00:12:24.500 --> 00:12:26.360
One of the things that's super challenging


00:12:26.360 --> 00:12:31.280
about complicated applications and web apps and stuff


00:12:31.280 --> 00:12:34.360
is you wanna focus on a particular scenario


00:12:34.360 --> 00:12:37.000
and there's so much overhead of like startup


00:12:37.000 --> 00:12:38.480
and other things.


00:12:38.480 --> 00:12:41.960
So for example, if I just want to profile


00:12:41.960 --> 00:12:45.320
a FastAPI, API call,


00:12:45.320 --> 00:12:49.360
if I just say run it up and then I go hit that API,


00:12:49.360 --> 00:12:51.640
all of the infrastructure starting up,


00:12:51.640 --> 00:12:54.920
UVicorn and FastAPI and Python.


00:12:54.920 --> 00:12:58.320
It just dwarfs whatever that little thing is usually.


00:12:58.320 --> 00:13:01.280
So there's also a programmable API that says,


00:13:01.280 --> 00:13:03.640
you could create a context manager.


00:13:03.640 --> 00:13:04.920
I don't know if it actually is that way,


00:13:04.920 --> 00:13:06.880
but you could certainly build it if it doesn't exist,


00:13:06.880 --> 00:13:09.160
like with memory profile here


00:13:09.160 --> 00:13:12.480
and just do a little block of code and then get an answer,


00:13:12.480 --> 00:13:13.920
which I think is pretty neat.


00:13:13.920 --> 00:13:17.600
Alvaro asks if it accepts an entry point.


00:13:17.600 --> 00:13:20.880
I suspect you could call an entry point


00:13:20.880 --> 00:13:24.840
because you just do the run on the command prompt.


00:13:24.840 --> 00:13:27.080
So you could probably pass it over.


00:13:27.080 --> 00:13:28.000
- Whatever you run, yeah.


00:13:28.000 --> 00:13:28.920
- Yeah, exactly.


00:13:28.920 --> 00:13:31.720
But the problem is there's still like the startup


00:13:31.720 --> 00:13:33.560
of just CPython itself, right?


00:13:33.560 --> 00:13:37.160
Like I always find just the imports and all that


00:13:37.160 --> 00:13:41.400
is just way more overhead than, you know, it clutters it up.


00:13:41.400 --> 00:13:43.920
Anyway, let's hit some notable features of Memray.


00:13:43.920 --> 00:13:49.240
It traces every function call as opposed to sampling it.


00:13:49.240 --> 00:13:52.260
So instead of just going every millisecond,


00:13:52.260 --> 00:13:53.100
what are you doing now?


00:13:53.100 --> 00:13:53.920
What are you doing now?


00:13:53.920 --> 00:13:54.980
Let's just record that, right?


00:13:54.980 --> 00:13:57.180
It actually exactly traces,


00:13:57.180 --> 00:13:59.940
so you don't miss any functions being called,


00:13:59.940 --> 00:14:01.460
even if they're brief.


00:14:01.460 --> 00:14:04.140
It handles native calls in C++ library,


00:14:04.140 --> 00:14:06.860
so the entire stack is represented in the results,


00:14:06.860 --> 00:14:07.940
which is pretty cool.


00:14:07.940 --> 00:14:08.860
- Oh, that's pretty neat.


00:14:08.860 --> 00:14:10.620
- Yeah, that's pretty dope.


00:14:10.620 --> 00:14:12.420
Apparently it's blazing fast.


00:14:12.420 --> 00:14:13.420
There's some kind of character,


00:14:13.420 --> 00:14:15.460
I think it's a race car there.


00:14:15.460 --> 00:14:17.780
It causes minimal slowdown in the app


00:14:17.780 --> 00:14:20.100
If you're doing Python tracing,


00:14:20.100 --> 00:14:21.320
if you do the native code stuff,


00:14:21.320 --> 00:14:24.640
it's a little bit slower it says, but that's optional.


00:14:24.640 --> 00:14:25.600
You get a bunch of reports.


00:14:25.600 --> 00:14:26.640
We'll see those in a minute.


00:14:26.640 --> 00:14:28.200
It works on Python threads.


00:14:28.200 --> 00:14:30.880
So you can see, Brian, I know all these people watching,


00:14:30.880 --> 00:14:33.040
but you check out the webpage.


00:14:33.040 --> 00:14:36.480
There's a little thread, like a sewing thread emoji


00:14:36.480 --> 00:14:38.040
for works on threads. - Or a Twitter thread.


00:14:38.040 --> 00:14:39.520
(both laughing)


00:14:39.520 --> 00:14:40.360
- Yeah, indeed.


00:14:40.360 --> 00:14:41.680
So it also works on native threads,


00:14:41.680 --> 00:14:43.920
like C++ threads and native extensions,


00:14:43.920 --> 00:14:46.840
which it represents as an alien plus,


00:14:46.840 --> 00:14:47.920
(laughing)


00:14:47.920 --> 00:14:50.320
The thread icon, I love it.


00:14:50.320 --> 00:14:51.720
- Alien threads, yeah.


00:14:51.720 --> 00:14:52.560
- Yeah, yeah, yeah.


00:14:52.560 --> 00:14:54.520
So let's look over here real quick.


00:14:54.520 --> 00:14:57.920
We'll look at just, I guess the reporting, right?


00:14:57.920 --> 00:15:00.000
I mean, the running is super simple, as I said.


00:15:00.000 --> 00:15:02.480
Memory run Python file with arguments


00:15:02.480 --> 00:15:06.440
or memory run dash M module with arguments.


00:15:06.440 --> 00:15:08.440
These are the places you could put your entry point


00:15:08.440 --> 00:15:09.760
and so on.


00:15:09.760 --> 00:15:13.480
And Dean in the audience says we've had a rich spotting.


00:15:13.480 --> 00:15:16.560
Okay, I haven't pulled that up yet, but very nice.


00:15:16.560 --> 00:15:18.920
There's different ways in which you can view it.


00:15:18.920 --> 00:15:20.580
The first one that I ran across,


00:15:20.580 --> 00:15:22.600
which is pretty interesting if you're familiar with


00:15:22.600 --> 00:15:24.680
Glances or you want to go old school like


00:15:24.680 --> 00:15:28.180
Top or one of these things you can run in just the terminal,


00:15:28.180 --> 00:15:33.000
and get not rich with Top,


00:15:33.000 --> 00:15:37.380
but rich output like Glances is,


00:15:37.380 --> 00:15:41.320
you can run it in a live mode where while it's running,


00:15:41.320 --> 00:15:43.260
it'll show you what's happening with the memory.


00:15:43.260 --> 00:15:44.800
That is so awesome.


00:15:44.800 --> 00:15:45.840
>> That's pretty cool.


00:15:45.840 --> 00:15:48.920
>> Yeah. Instead of just showing you a memory graph,


00:15:48.920 --> 00:15:51.680
it's like, guess what? We're running here right now with


00:15:51.680 --> 00:15:54.120
this many allocations and so on.


00:15:54.120 --> 00:15:55.680
Yeah, that looks super neat.


00:15:55.680 --> 00:15:57.160
Just give it a hash dash line.


00:15:57.160 --> 00:15:58.700
>> If you've got something interactive,


00:15:58.700 --> 00:16:01.720
you can interact with it and watch the memory change then.


00:16:01.720 --> 00:16:04.700
>> Yeah. You can cycle through threads,


00:16:04.700 --> 00:16:09.120
you can sort by total memory or its own memory.


00:16:09.120 --> 00:16:12.200
That's a common thing you do in profiling,


00:16:12.200 --> 00:16:14.280
like this and all the stuff it's called or


00:16:14.280 --> 00:16:17.080
adjust this method itself, sort by allocations


00:16:17.080 --> 00:16:19.620
versus memory usage, all kinds of stuff.


00:16:19.620 --> 00:16:21.360
So that's really neat.


00:16:21.360 --> 00:16:26.040
It will track the allocations across forks,


00:16:26.040 --> 00:16:28.160
as in process, sub-process.


00:16:28.160 --> 00:16:29.000
Why would you care?


00:16:29.000 --> 00:16:30.840
Because multi-processing.


00:16:30.840 --> 00:16:33.400
If you wanna track some kind of multi-processing


00:16:33.400 --> 00:16:35.320
memory workflow, it'll actually do that.


00:16:35.320 --> 00:16:37.320
Just you do --follow fork,


00:16:37.320 --> 00:16:39.760
and it'll like aggregate the stats


00:16:39.760 --> 00:16:41.960
across the different processes.


00:16:41.960 --> 00:16:42.920
Kind of insane.


00:16:42.920 --> 00:16:47.640
Let's see if we can get down here and you can do,


00:16:47.640 --> 00:16:48.960
they have the summary reporter,


00:16:48.960 --> 00:16:51.400
which is a nice just,


00:16:51.400 --> 00:16:53.560
this is probably what you would expect.


00:16:53.560 --> 00:16:57.040
Flame graphs, if I can get down here somewhere,


00:16:57.040 --> 00:17:01.320
it'll show the color and the width of these bars.


00:17:01.320 --> 00:17:03.560
I'll show you how significant it is.


00:17:03.560 --> 00:17:06.040
There's a nice tree version


00:17:06.040 --> 00:17:08.120
that'll show you the biggest 10 allocations,


00:17:08.120 --> 00:17:10.860
and then a call stack in and out with trees and how


00:17:10.860 --> 00:17:15.420
much memory is being allocated in each one of those and so on.


00:17:15.420 --> 00:17:16.380
>> That's nice.


00:17:16.380 --> 00:17:17.900
>> This is a nice app, right?


00:17:17.900 --> 00:17:19.620
Nice little utility.


00:17:19.620 --> 00:17:22.360
>> Definitely. Cool.


00:17:22.360 --> 00:17:27.980
>> Yeah. Indeed. If you want to track down memory leaks,


00:17:27.980 --> 00:17:32.320
or you're just wondering why is my program using so much memory,


00:17:32.320 --> 00:17:35.660
fire it up, let it run for a while, see what happens.


00:17:35.660 --> 00:17:36.140
>> Yeah.


00:17:36.140 --> 00:17:40.620
>> Cool. All right. Back to you, Ryan.


00:17:40.620 --> 00:17:45.080
- Well, I want to bring up a pytest tool.


00:17:45.080 --> 00:17:49.760
So it was, I have recent,


00:17:49.760 --> 00:17:53.960
I've often used a pytest xdist for parallel.


00:17:53.960 --> 00:17:57.160
So xdist is a way you can just say that it's,


00:17:57.160 --> 00:18:00.000
it's the one that I heard about first


00:18:00.000 --> 00:18:01.800
for running pytest in parallel.


00:18:01.800 --> 00:18:04.860
So you've got, you know, like tons of unit tests maybe,


00:18:04.860 --> 00:18:06.880
and you want to just speed them up.


00:18:06.880 --> 00:18:09.520
You can throw them, throw a dash n for,


00:18:09.520 --> 00:18:11.120
or something like that at it.


00:18:11.120 --> 00:18:15.160
And it'll just launch different processes


00:18:15.160 --> 00:18:19.160
and run pytest in parallel on a bunch of them.


00:18:19.160 --> 00:18:21.920
So it cuts time down, but there's overhead.


00:18:21.920 --> 00:18:24.880
And I was recommending this to somebody on Twitter


00:18:24.880 --> 00:18:28.400
and there was, I think it was Bruno Olivier


00:18:28.400 --> 00:18:31.880
suggested a couple of alternatives.


00:18:31.880 --> 00:18:33.800
And one of them was pytest parallel,


00:18:33.800 --> 00:18:37.060
which I know I've run across,


00:18:37.060 --> 00:18:38.320
but I haven't played with it for a while.


00:18:38.320 --> 00:18:42.100
So I tried it out and it's actually like really cool.


00:18:42.100 --> 00:18:45.440
So one of the, one of the, pytest Ext is does a lot.


00:18:45.440 --> 00:18:47.500
One of the things it does is it not just,


00:18:47.500 --> 00:18:50.760
it's not just multiprocessor,


00:18:50.760 --> 00:18:53.240
but it can be on different actual different computers.


00:18:53.240 --> 00:18:54.080
So you can launch them on.


00:18:54.080 --> 00:18:54.920
- Oh, nice.


00:18:54.920 --> 00:18:56.720
Like great computing almost.


00:18:56.720 --> 00:18:59.280
- Yeah, you can SSH into different systems


00:18:59.280 --> 00:19:02.200
and have it running in parallel.


00:19:02.200 --> 00:19:03.360
But that, you know, you don't,


00:19:03.360 --> 00:19:05.720
I don't usually need that kind of power.


00:19:06.760 --> 00:19:08.520
The one thing it doesn't do is thread.


00:19:08.520 --> 00:19:11.720
So it's process-based and pytest Parallel does both.


00:19:11.720 --> 00:19:14.940
So you can say, you can give it,


00:19:14.940 --> 00:19:18.840
you can give it a, where we have,


00:19:18.840 --> 00:19:21.900
I'm gonna go down to the examples.


00:19:21.900 --> 00:19:23.800
So you can give it number of workers


00:19:23.800 --> 00:19:27.040
and it'll tell it to, that's how many processes


00:19:27.040 --> 00:19:29.640
it'll spin up or how many CPUs.


00:19:29.640 --> 00:19:33.480
Now you can also give it test per worker


00:19:33.480 --> 00:19:36.180
and then it'll run in multi-threading mode.


00:19:36.180 --> 00:19:39.460
And you can give it auto on both of these.


00:19:39.460 --> 00:19:43.580
And it's a, this is extremely useful for,


00:19:43.580 --> 00:19:45.620
you have to, by default, this is turned off.


00:19:45.620 --> 00:19:47.260
By default, the features,


00:19:47.260 --> 00:19:49.460
if you just say workers equals five or something,


00:19:49.460 --> 00:19:52.620
it won't do multiple thread, multi-threading.


00:19:52.620 --> 00:19:55.420
And the reason is because you need to make sure


00:19:55.420 --> 00:19:59.660
your tests are thread safe and many are not.


00:19:59.660 --> 00:20:00.500
So I tried it on a couple of my products.


00:20:00.500 --> 00:20:01.800
- Even if they're isolated,


00:20:01.800 --> 00:20:03.540
they might not be thread safe, right?


00:20:03.540 --> 00:20:06.140
Like, that's another level of,


00:20:06.140 --> 00:20:07.140
of consideration.


00:20:07.140 --> 00:20:11.100
However, if there are, there's a lot of small,


00:20:11.100 --> 00:20:14.140
especially small, not really unit like system tests,


00:20:14.140 --> 00:20:16.860
but a lot of unit tests are just testing a little Python code.


00:20:16.860 --> 00:20:19.660
If you've got a part of that is a lot of projects,


00:20:19.660 --> 00:20:21.460
that's a big chunk of the test load.


00:20:21.460 --> 00:20:24.380
So being able to do multi-threading is really nice.


00:20:24.380 --> 00:20:27.940
But you know, even with just multi-processing,


00:20:27.940 --> 00:20:32.820
I tried this on a few different projects and there were like,


00:20:32.820 --> 00:20:37.820
I tried it on Flask and the parallel version


00:20:37.820 --> 00:20:42.280
using pytest parallel was like three times faster


00:20:42.280 --> 00:20:43.800
than the XDist version.


00:20:43.800 --> 00:20:48.720
So based on your, there was another one


00:20:48.720 --> 00:20:50.800
that Bruno mentioned, but I think these two


00:20:50.800 --> 00:20:53.140
are really solid XDist and parallel.


00:20:53.140 --> 00:20:55.360
So if you wanna speed up your test run times,


00:20:55.360 --> 00:20:58.520
I would try both on your project and just see,


00:20:58.520 --> 00:21:01.360
play with them and see which one's faster.


00:21:01.360 --> 00:21:04.580
on many of the projects I tried parallel


00:21:04.580 --> 00:21:07.800
was at least as fast or faster than X-Disk.


00:21:07.800 --> 00:21:09.540
So it's kind of nice.


00:21:09.540 --> 00:21:10.420
- Yeah, that's cool.


00:21:10.420 --> 00:21:11.260
This looks great.


00:21:11.260 --> 00:21:13.640
I like it.


00:21:13.640 --> 00:21:16.880
And having your test run faster is always good.


00:21:16.880 --> 00:21:18.000
Do you do anything crazy?


00:21:18.000 --> 00:21:20.680
Like do you set up your editor to auto run tests


00:21:20.680 --> 00:21:22.720
on file change or anything like that?


00:21:22.720 --> 00:21:27.080
- Sometimes, one of the things-


00:21:27.080 --> 00:21:29.000
- I've done it a few times, but it always makes me nervous.


00:21:29.000 --> 00:21:30.760
I'm like, ah, it's so unnerving to me


00:21:30.760 --> 00:21:32.900
that it just keeps running.


00:21:32.900 --> 00:21:35.460
- One of the things that I really like around


00:21:35.460 --> 00:21:40.460
that was added to pytest not too long ago was, is stepwise.


00:21:40.460 --> 00:21:43.760
So that's not really all the running it all the time,


00:21:43.760 --> 00:21:46.040
but stepwise will,


00:21:46.040 --> 00:21:48.400
and this would be a handy one to run all the time.


00:21:48.400 --> 00:21:50.480
So what stepwise does is it takes,


00:21:50.480 --> 00:21:53.640
you can run all your tests in stepwise.


00:21:53.640 --> 00:21:55.240
And when you run it again,


00:21:55.240 --> 00:21:58.120
it'll start at the first failing test


00:21:58.120 --> 00:22:00.200
'cause it assumes you're trying to fix something.


00:22:00.200 --> 00:22:03.580
it'll start at that and then run until it finds a failure.


00:22:03.580 --> 00:22:06.060
So if you haven't fixed this first failure,


00:22:06.060 --> 00:22:08.760
it'll just keep running that one until you fixed it


00:22:08.760 --> 00:22:10.220
and it'll go to the next one.


00:22:10.220 --> 00:22:14.540
And so I do that a lot while I'm trying to debug something.


00:22:14.540 --> 00:22:15.520
- Oh, that's cool.


00:22:15.520 --> 00:22:18.000
- And hooking that up with like an auto,


00:22:18.000 --> 00:22:19.040
like a watch feature,


00:22:19.040 --> 00:22:21.580
there's a bunch of ways you can watch your code too,


00:22:21.580 --> 00:22:22.720
to do that.


00:22:22.720 --> 00:22:23.560
- Yeah.


00:22:23.560 --> 00:22:24.640
- Yeah, it's fun.


00:22:24.640 --> 00:22:25.480
- Nice.


00:22:25.480 --> 00:22:27.720
Very cool.


00:22:27.720 --> 00:22:30.000
So let's do some real time follow up here.


00:22:30.000 --> 00:22:33.440
First, Alvaro is being almost mischievous asking,


00:22:33.440 --> 00:22:36.200
"I wonder what would happen if I install both plugins,


00:22:36.200 --> 00:22:38.280
"both Extest and Parallel?"


00:22:38.280 --> 00:22:42.400
- I don't know if you can run them at the same time.


00:22:42.400 --> 00:22:43.440
I should try.


00:22:43.440 --> 00:22:45.480
I have it installed on like the Flask one.


00:22:45.480 --> 00:22:48.440
I ran it, I installed both of them and then tried them both,


00:22:48.440 --> 00:22:49.520
but not at the same time.


00:22:49.520 --> 00:22:52.400
- Both forks, it's gonna go so fast.


00:22:52.400 --> 00:22:53.760
And then just going back to PyScript,


00:22:53.760 --> 00:22:56.400
there's like tons of excitement about PyScript.


00:22:56.400 --> 00:22:58.760
RJL is excited, Brandon's excited.


00:22:59.840 --> 00:23:02.640
And David says, "I hope someday I can say,


00:23:02.640 --> 00:23:05.020
"back in my day, you couldn't just learn Python,


00:23:05.020 --> 00:23:07.080
"you had to learn JavaScript too."


00:23:07.080 --> 00:23:08.000
- Yeah.


00:23:08.000 --> 00:23:09.120
- Indeed, indeed.


00:23:09.120 --> 00:23:14.840
Let's see, so I got one more to cover


00:23:14.840 --> 00:23:16.600
that is gonna be fun as well.


00:23:16.600 --> 00:23:21.600
And this one comes to us from former guest co-host,


00:23:21.600 --> 00:23:25.720
Michael Feigert, sorry, Matthew Feigert.


00:23:25.720 --> 00:23:28.240
And Matthew is a great supporter of the show,


00:23:28.240 --> 00:23:32.120
It sends all sorts of interesting things in to help us out


00:23:32.120 --> 00:23:33.520
and good ideas.


00:23:33.520 --> 00:23:37.760
And this is yet another one coming from the data science


00:23:37.760 --> 00:23:40.560
side of things saying, you know,


00:23:40.560 --> 00:23:42.080
one of the things you have to do often


00:23:42.080 --> 00:23:45.160
in say a Jupyter notebook is go download a file


00:23:45.160 --> 00:23:49.800
off of an API or just some link or S3 bucket or whatever


00:23:49.800 --> 00:23:50.760
and you wanna process it.


00:23:50.760 --> 00:23:54.440
And if you use requests, wow, great.


00:23:54.440 --> 00:23:58.160
you end up making the request, verifying that it worked,


00:23:58.160 --> 00:24:00.480
reading the stream into bytes,


00:24:00.480 --> 00:24:03.380
writing the bytes to a file, picking a file name,


00:24:03.380 --> 00:24:05.100
and then using that file name to open it,


00:24:05.100 --> 00:24:07.560
and then say, now you can process it, right?


00:24:07.560 --> 00:24:10.420
So there's this thing called Pooch,


00:24:10.420 --> 00:24:12.020
a friend to fetch your data files.


00:24:12.020 --> 00:24:13.760
All right, Pooch, go get my files.


00:24:13.760 --> 00:24:16.140
Like a little friendly dog


00:24:16.140 --> 00:24:19.160
that also seems to hold a snake in its mouth.


00:24:19.160 --> 00:24:20.860
So that's pretty cool.


00:24:20.860 --> 00:24:24.580
Anyway, who wouldn't want a dog that can wrangle snakes


00:24:24.580 --> 00:24:26.360
to go help you with your notebooks?


00:24:26.360 --> 00:24:30.020
Anyway, the idea is you can do all of what I described


00:24:30.020 --> 00:24:33.380
with requests, you can do that in one line of code.


00:24:33.380 --> 00:24:34.220
- Oh, wow.


00:24:34.220 --> 00:24:35.980
- Yeah, and you get other cool features as well.


00:24:35.980 --> 00:24:40.980
So it says, look, you can just make this one function call


00:24:40.980 --> 00:24:44.380
and it'll save it and it'll also cache your files locally.


00:24:44.380 --> 00:24:46.200
So some of these files that data scientists


00:24:46.200 --> 00:24:48.300
especially work with are massive, right?


00:24:48.300 --> 00:24:49.180
You know, it's like a gig


00:24:49.180 --> 00:24:50.900
and every time you run the notebook,


00:24:50.900 --> 00:24:52.820
you don't want it to download the gig again.


00:24:52.820 --> 00:24:54.700
You just want it to run more quickly.


00:24:54.700 --> 00:24:57.920
So you can set up a location for it to cache it.


00:24:57.920 --> 00:25:01.680
You can pass in a hash of the file to say,


00:25:01.680 --> 00:25:06.020
I wanna get this file and I expect it to be this MD5


00:25:06.020 --> 00:25:07.980
or whatever the heck the hash is that they're using


00:25:07.980 --> 00:25:10.060
so that you can be sure it doesn't change, right?


00:25:10.060 --> 00:25:13.020
So if you're doing like reproducible data science,


00:25:13.020 --> 00:25:15.180
you say, what you do is you download this file,


00:25:15.180 --> 00:25:18.020
then you apply this algorithm, then you get this picture.


00:25:18.020 --> 00:25:20.460
Well, if the data changes, I bet the picture changes, right?


00:25:20.460 --> 00:25:24.320
And so you can put it like a layer of verification


00:25:24.320 --> 00:25:26.380
that it's unchanged from the last time


00:25:26.380 --> 00:25:28.820
you decided what it should be.


00:25:28.820 --> 00:25:29.660
That's pretty cool.


00:25:29.660 --> 00:25:31.660
You can do multiple protocols.


00:25:31.660 --> 00:25:34.660
So not just HTTP, HTTPS, but FTP.


00:25:34.660 --> 00:25:36.480
Oh my gosh, SFTP.


00:25:36.480 --> 00:25:39.540
Oh yeah, it's what holds basic off.


00:25:39.540 --> 00:25:41.780
It'll also automatically resolve DOIs,


00:25:41.780 --> 00:25:45.580
digital object identifiers,


00:25:45.580 --> 00:25:50.580
which are used in places like Figshare and Zenodo.


00:25:50.580 --> 00:25:53.260
And this is about the reproducible science.


00:25:53.260 --> 00:25:56.820
Like here's the file and like we've been assigned


00:25:56.820 --> 00:25:59.820
an immutable ID that we can always refer back to it.


00:25:59.820 --> 00:26:00.980
So you can just say, here's the ID


00:26:00.980 --> 00:26:02.060
and it'll actually get the file


00:26:02.060 --> 00:26:04.860
and it'll even unzip and decompress files upon download.


00:26:04.860 --> 00:26:07.180
Pretty neat, huh?


00:26:07.180 --> 00:26:08.980
Yeah, pretty straightforward.


00:26:08.980 --> 00:26:12.060
Let me see if I can find an example of getting a single file.


00:26:12.060 --> 00:26:15.400
- I like the section of learning about it.


00:26:15.400 --> 00:26:16.980
- It's called training your Pooch.


00:26:16.980 --> 00:26:17.820
That's cute.


00:26:17.820 --> 00:26:21.000
- Oh, nice, I love it.


00:26:21.000 --> 00:26:23.180
Apparently it has progress bars,


00:26:23.180 --> 00:26:25.620
post download actions, logging,


00:26:25.620 --> 00:26:27.240
and you get multiple files.


00:26:27.240 --> 00:26:30.680
But the main use case is just file equals


00:26:30.680 --> 00:26:33.360
pooch.retrieve URL, done.


00:26:33.360 --> 00:26:34.580
That seems pretty nice.


00:26:34.580 --> 00:26:36.840
- Yeah, that's great.


00:26:36.840 --> 00:26:37.820
It's my data.


00:26:37.820 --> 00:26:38.660
Here it is.


00:26:38.660 --> 00:26:41.420
- Oh, cool.


00:26:41.420 --> 00:26:43.640
So Pamphil Roy out in the audience says,


00:26:43.640 --> 00:26:45.840
"Hey folks, funny, we're adding this to SciPy,


00:26:45.840 --> 00:26:50.200
"optional to have the SciPy dataset sub-module.


00:26:50.200 --> 00:26:52.280
"SciKit image is using this as well."


00:26:52.280 --> 00:26:53.120
I had no idea.


00:26:53.120 --> 00:26:55.000
Very cool, thanks for that extra background there.


00:26:55.000 --> 00:26:55.840
- Cool.


00:26:55.840 --> 00:26:57.160
- Yeah, but I think this is great.


00:26:57.160 --> 00:27:00.680
In fact, I know it sells itself,


00:27:00.680 --> 00:27:03.160
it builds itself as being for data science.


00:27:03.160 --> 00:27:06.200
I also like to download files sometimes


00:27:06.200 --> 00:27:08.280
and not go through five or six lines of code.


00:27:08.280 --> 00:27:09.400
I could use this.


00:27:09.400 --> 00:27:11.640
- Yeah, yeah, there's a lot of stuff


00:27:11.640 --> 00:27:12.960
that data science people are doing


00:27:12.960 --> 00:27:15.680
that we can use in lots of other fields.


00:27:15.680 --> 00:27:17.160
- Indeed.


00:27:17.160 --> 00:27:20.400
I do think that's actually one of the really interesting


00:27:20.400 --> 00:27:23.120
aspects of Python is we have so many people


00:27:23.120 --> 00:27:26.480
from these different areas that it's not just all,


00:27:26.480 --> 00:27:29.000
you know, CS grads doing the same thing.


00:27:29.000 --> 00:27:29.840
- Yeah.


00:27:29.840 --> 00:27:31.420
- Yeah, for sure.


00:27:31.420 --> 00:27:32.400
All right.


00:27:32.400 --> 00:27:35.360
Well, those are my items for today, Brian.


00:27:35.360 --> 00:27:38.200
- Nice.


00:27:38.200 --> 00:27:41.000
I don't have any extras today.


00:27:41.000 --> 00:27:43.660
Do you have any extra stuff?


00:27:43.660 --> 00:27:45.080
- I do.


00:27:45.080 --> 00:27:46.200
I do have extras.


00:27:46.200 --> 00:27:50.380
So this one I'm very, very excited about.


00:27:50.380 --> 00:27:53.920
I have a new course that I just released


00:27:53.920 --> 00:27:55.560
called "Up and Running with Git,


00:27:55.560 --> 00:27:58.360
a Pragmatic UI-Based Introduction."


00:27:58.360 --> 00:28:00.320
So I'm really excited.


00:28:00.320 --> 00:28:03.000
I just released, I haven't really even announced it yet,


00:28:03.000 --> 00:28:05.680
but I finished getting it all public and online


00:28:05.680 --> 00:28:07.880
and turned all the GitHub repos public


00:28:07.880 --> 00:28:10.840
and all that stuff right before we jumped on the call today.


00:28:10.840 --> 00:28:14.400
And the idea is there are tons of Git courses.


00:28:14.400 --> 00:28:15.480
So why create a Git course?


00:28:15.480 --> 00:28:17.840
Well, I feel like so many of them are just like,


00:28:17.840 --> 00:28:22.260
okay, we're just gonna work in the terminal


00:28:22.260 --> 00:28:23.640
or the command prompt.


00:28:23.640 --> 00:28:25.080
And you're just gonna assume that like,


00:28:25.080 --> 00:28:27.760
that's the world of Git that you live in.


00:28:27.760 --> 00:28:29.760
And like kind of at least common denominator approach.


00:28:29.760 --> 00:28:31.640
And while that is useful,


00:28:31.640 --> 00:28:33.960
like I don't think that's how most people are working.


00:28:33.960 --> 00:28:36.280
If you're in Visual Studio Code or PyCharm,


00:28:36.280 --> 00:28:38.520
there's great hotkeys just to do the Git stuff


00:28:38.520 --> 00:28:39.840
and see the history and whatnot.


00:28:39.840 --> 00:28:43.200
There's other tools like SourceTree and Tower and others.


00:28:43.200 --> 00:28:45.880
So it kind of takes this approach of like,


00:28:45.880 --> 00:28:47.360
well, let's take all the modern tools


00:28:47.360 --> 00:28:48.920
that give you the best visibility


00:28:48.920 --> 00:28:50.680
and teach you to get with that.


00:28:50.680 --> 00:28:52.880
So super fun.


00:28:52.880 --> 00:28:54.560
- Which GUI tools are you using then?


00:28:54.560 --> 00:28:55.840
Which ones are you showing?


00:28:55.840 --> 00:28:59.400
- Visual Studio Code, MyCharm, SourceTree.


00:28:59.400 --> 00:29:00.240
- Okay.


00:29:00.240 --> 00:29:01.060
- Those are the things.


00:29:01.060 --> 00:29:02.400
And so I've done a lot of work.


00:29:02.400 --> 00:29:04.520
I've tried to take some of my experience


00:29:04.520 --> 00:29:05.960
from doing some work on YouTube


00:29:05.960 --> 00:29:08.560
where I was experimenting with like setup


00:29:08.560 --> 00:29:10.600
and presentations and stuff.


00:29:10.600 --> 00:29:12.880
And I think I have a really neat,


00:29:12.880 --> 00:29:15.320
polished experience for this course


00:29:15.320 --> 00:29:18.100
with like lots of cool visuals and graphics


00:29:18.100 --> 00:29:19.280
and video and stuff.


00:29:19.280 --> 00:29:21.120
So hopefully people really enjoy it.


00:29:21.120 --> 00:29:22.560
Anyway, this is my extra.


00:29:22.560 --> 00:29:24.440
I just sent this out to the world.


00:29:24.440 --> 00:29:25.280
Hopefully people love it.


00:29:25.280 --> 00:29:26.100
- I'm excited about this.


00:29:26.100 --> 00:29:27.560
Nice, congrats.


00:29:27.560 --> 00:29:28.800
- Thanks, thanks so much.


00:29:28.800 --> 00:29:30.920
You have no extras.


00:29:30.920 --> 00:29:33.080
Does that mean you're ready for some humor?


00:29:33.080 --> 00:29:34.720
- Yes, always.


00:29:34.720 --> 00:29:36.720
- All right, this one, I chose this,


00:29:36.720 --> 00:29:39.360
Honestly, I just chose it just because of the title.


00:29:39.360 --> 00:29:44.180
So, (laughs)


00:29:44.180 --> 00:29:47.480
there's Robert, is this Robert Downing Jr.


00:29:47.480 --> 00:29:51.360
looking at somebody in like some kind of wizard situation.


00:29:51.360 --> 00:29:52.840
Right? Like.


00:29:52.840 --> 00:29:54.640
- Yeah, this is like end game or something.


00:29:54.640 --> 00:29:55.920
- Okay, yeah. I don't know the movie.


00:29:55.920 --> 00:29:58.400
Like, apparently I stopped watching movies at some point


00:29:58.400 --> 00:30:00.100
and now I don't, I'm out of touch.


00:30:00.100 --> 00:30:01.320
(laughs)


00:30:01.320 --> 00:30:03.000
So anyway, the title is,


00:30:03.000 --> 00:30:05.660
When Your Code Stopped Working During an Interview.


00:30:05.660 --> 00:30:07.700
or it could be a demo presentation or whatever.


00:30:07.700 --> 00:30:09.780
Like you wanna tell us what this is about,


00:30:09.780 --> 00:30:11.140
what's going on here?


00:30:11.140 --> 00:30:15.620
- So he's looking back at Banner.


00:30:15.620 --> 00:30:17.060
So who's the Hulk?


00:30:17.060 --> 00:30:19.980
Says, dude, you're embarrassing me in front of the wizards.


00:30:19.980 --> 00:30:21.260
Yeah, because yeah,


00:30:21.260 --> 00:30:24.020
'cause Banner wasn't able to become the Hulk.


00:30:24.020 --> 00:30:25.860
So at the time.


00:30:25.860 --> 00:30:27.620
- Don't embarrass me in front of the wizards.


00:30:27.620 --> 00:30:29.220
I just, I love to think of programmers


00:30:29.220 --> 00:30:30.740
as kind of like the modern day wizards.


00:30:30.740 --> 00:30:32.460
Like we can think of things and then poof,


00:30:32.460 --> 00:30:34.380
they kind of come into existence.


00:30:35.420 --> 00:30:36.260
- Yeah. - That's good.


00:30:36.260 --> 00:30:38.860
And then also while working on that Git course,


00:30:38.860 --> 00:30:40.820
I had this pretty fun experience,


00:30:40.820 --> 00:30:43.140
like right while I was recording it.


00:30:43.140 --> 00:30:44.820
(both laughing)


00:30:44.820 --> 00:30:45.740
- Nice.


00:30:45.740 --> 00:30:47.740
- And I'm just sitting there and then-


00:30:47.740 --> 00:30:49.300
- Git was down.


00:30:49.300 --> 00:30:51.540
- How often does GitHub itself go down?


00:30:51.540 --> 00:30:53.260
But no, oh no, there's like an,


00:30:53.260 --> 00:30:54.940
the Octocat is falling,


00:30:54.940 --> 00:30:58.060
like with a 500 sign in his hands.


00:30:58.060 --> 00:31:01.780
Which of course made me-


00:31:01.780 --> 00:31:03.580
- I love the- - I love that section, of course.


00:31:03.580 --> 00:31:06.460
- Yeah, I like the expression on your face for that.


00:31:06.460 --> 00:31:07.420
It's like.


00:31:07.420 --> 00:31:10.380
- Exactly, people seem to really like that tweet.


00:31:10.380 --> 00:31:11.220
I'll put it in the show notes


00:31:11.220 --> 00:31:12.060
if people can check it out.


00:31:12.060 --> 00:31:15.380
Anyway, dude, don't embarrass me in front of the wizards.


00:31:15.380 --> 00:31:17.220
That's what I got for you.


00:31:17.220 --> 00:31:18.900
- Yeah, good.


00:31:18.900 --> 00:31:20.460
- Good, good.


00:31:20.460 --> 00:31:22.980
- Well, thanks a lot again.


00:31:22.980 --> 00:31:24.020
It's a great show.


00:31:24.020 --> 00:31:24.900
- Yeah, sure was.


00:31:24.900 --> 00:31:26.260
Thanks, thanks, Brian.


00:31:26.260 --> 00:31:27.980
Thanks for everyone who came, bye.


00:31:27.980 --> 00:31:37.980
[BLANK_AUDIO]

