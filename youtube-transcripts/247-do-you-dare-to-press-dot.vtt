WEBVTT

00:00:00.000 --> 00:00:11.600
Hello, everybody. Welcome to the live stream of Python Bytes. I almost forgot which podcast


00:00:11.600 --> 00:00:14.280
we were doing today.


00:00:14.280 --> 00:00:17.000
Test and Bytes. We're doing Test and Bytes.


00:00:17.000 --> 00:00:23.000
So let's kick it off. Hello and welcome to Python Bytes, where we deliver Python news


00:00:23.000 --> 00:00:29.560
and headlines directly to your earbuds. This is episode 247, recorded August 25th. Really?


00:00:29.560 --> 00:00:37.840
Oh, we're almost done. And 2021. I'm Brian Okken. I'm Michael Kennedy. And I'm Dan Taylor.


00:00:37.840 --> 00:00:43.840
So Dan, before we jump into things, welcome to the show. And but can you let people know


00:00:43.840 --> 00:00:44.840
kind of who you are?


00:00:44.840 --> 00:00:49.680
Yeah, thank you. It's great to be here. A big fan of the show. So I'm Dan Taylor. I'm


00:00:49.680 --> 00:00:56.260
a program manager manager for on our Python team. So I manage a team of, of program managers


00:00:56.260 --> 00:01:01.300
that work on our Python developer tools, for example, our Python support and Visual Studio


00:01:01.300 --> 00:01:06.260
Code and Visual Studio IDE. And we also manage some of our engagements with the Python community,


00:01:06.260 --> 00:01:10.020
for example, our sponsorships of PyCon and the Python Software Foundation.


00:01:10.020 --> 00:01:14.820
- That's awesome. You know, something, Dan, I thought was pretty interesting. I was just


00:01:14.820 --> 00:01:19.780
watching a talk from Brett Cannon, getting ready for an interview I did on Talk Python


00:01:19.780 --> 00:01:25.300
with Lucas Flanga, a lot of stuff going on there. But the talk was only from 2018. And


00:01:25.300 --> 00:01:29.300
Brett went into detail describing what VS Code was.


00:01:29.300 --> 00:01:31.920
I was like, Adam or Sublime and all these things.


00:01:31.920 --> 00:01:34.040
It needs no introduction these days, does it?


00:01:34.040 --> 00:01:37.040
- No, no, it's just been amazing watching


00:01:37.040 --> 00:01:39.740
just how much it's grown over the past year


00:01:39.740 --> 00:01:41.580
and it become a household name for people,


00:01:41.580 --> 00:01:43.340
especially in the Python community.


00:01:43.340 --> 00:01:46.620
- Definitely.


00:01:46.620 --> 00:01:51.600
- Well, Michael, how do I keep my computer awake?


00:01:52.540 --> 00:01:56.100
Well, first you make sure it gets eight hours of sleep a day.


00:01:56.100 --> 00:01:57.600
You don't overwork it.


00:01:57.600 --> 00:01:58.840
I know it's work from home.


00:01:58.840 --> 00:02:00.740
So you might be working on it, playing on it


00:02:00.740 --> 00:02:01.580
and watching TV.


00:02:01.580 --> 00:02:04.260
Oh wait, this is not, this is a totally different thing.


00:02:04.260 --> 00:02:07.020
So I recently was working on this project


00:02:07.020 --> 00:02:09.860
around some of the courses over at Talk Python Training.


00:02:09.860 --> 00:02:13.000
And I needed to do a bunch of video processing


00:02:13.000 --> 00:02:16.500
and re-encoding for like, take the same videos


00:02:16.500 --> 00:02:18.100
but make them smaller.


00:02:18.100 --> 00:02:20.560
So I wrote some really cool Python code to go through


00:02:20.560 --> 00:02:23.820
and take the source videos and do all this analysis


00:02:23.820 --> 00:02:26.600
and re-encode it into a bunch of formats,


00:02:26.600 --> 00:02:30.380
you know, that takes like five hours for one of our courses.


00:02:30.380 --> 00:02:32.860
And if my computer goes to sleep,


00:02:32.860 --> 00:02:34.180
it's gonna take more than five hours.


00:02:34.180 --> 00:02:37.380
I gotta go and like keep waking the thing up again, right?


00:02:37.380 --> 00:02:38.620
Well, what can I do?


00:02:38.620 --> 00:02:41.380
I could go into the settings and say, you know what?


00:02:41.380 --> 00:02:42.420
Don't do that.


00:02:42.420 --> 00:02:43.940
Just don't go to sleep right now.


00:02:43.940 --> 00:02:46.800
But then maybe I'll forget, who knows?


00:02:46.800 --> 00:02:49.960
It would be cool if just while my Python code was running,


00:02:49.960 --> 00:02:54.400
it would stay awake, and then it would potentially not stay awake when it was done.


00:02:54.400 --> 00:02:55.400
Wouldn't that be nice?


00:02:55.400 --> 00:02:57.000
Yeah.


00:02:57.000 --> 00:03:00.200
Yeah. So I found this cool library called WakePy,


00:03:00.200 --> 00:03:05.000
and the implementation of using this is ridiculously easy.


00:03:05.000 --> 00:03:08.600
You just say from WakePy import keep awake,


00:03:08.600 --> 00:03:11.400
and then you create a context manager with keep awake,


00:03:11.400 --> 00:03:14.400
do the stuff you want it to do while the computer doesn't go to sleep.


00:03:14.400 --> 00:03:15.400
Done.


00:03:18.800 --> 00:03:22.400
That's cool, huh? Yeah, it's super easy. It works cross-platform.


00:03:22.400 --> 00:03:26.000
It works on Windows. It works on Linux.


00:03:26.000 --> 00:03:30.240
It doesn't really work on macOS because there's a bug, but it's supposed to work on macOS,


00:03:30.240 --> 00:03:34.080
which is where I'm running this right now. So that's kind of unfortunate, wouldn't you say?


00:03:34.080 --> 00:03:42.240
It turns out it's one of these strings versus bytes weirdness.


00:03:42.240 --> 00:03:48.640
So I actually decided this is kind of cool. So what I'm going to do is I'm going to create a PR.


00:03:48.640 --> 00:03:52.640
There's a PR that says it doesn't work on Python 3,


00:03:52.640 --> 00:03:53.640
but you know what?


00:03:53.640 --> 00:03:55.640
And here's like the error if anyone cares.


00:03:55.640 --> 00:03:58.640
You get this bytes like object is required, not string.


00:03:58.640 --> 00:04:00.640
So I submitted a PR.


00:04:00.640 --> 00:04:05.640
The PR is not yet addressed or responded to or anything.


00:04:05.640 --> 00:04:07.640
So if you want to use this for the time being,


00:04:07.640 --> 00:04:10.640
I can really only on macOS, to be clear,


00:04:10.640 --> 00:04:12.640
I can only recommend it off of my branch


00:04:12.640 --> 00:04:15.640
until you see that PR merge because it won't work at all.


00:04:15.640 --> 00:04:17.640
But if you're using Windows or Linux,


00:04:17.640 --> 00:04:19.920
Windows or Linux, I think it'll just work straight away.


00:04:19.920 --> 00:04:22.320
And it's interesting if you actually dig into it,


00:04:22.320 --> 00:04:25.400
I kind of imagined it would just be doing the same thing.


00:04:25.400 --> 00:04:28.560
But if you dig into it, like in the Mac version,


00:04:28.560 --> 00:04:31.000
there's literally a command you can type on,


00:04:31.000 --> 00:04:33.040
this is awesome, you can type on the terminal,


00:04:33.040 --> 00:04:34.600
you can type caffeinate,


00:04:34.600 --> 00:04:38.120
that'll keep your OS from going to sleep.


00:04:38.120 --> 00:04:40.200
If you just run that on the terminal.


00:04:40.200 --> 00:04:44.360
If you type a dash D, it'll keep the display on,


00:04:44.360 --> 00:04:45.840
things like that.


00:04:45.840 --> 00:04:47.920
I won't let the screen go to sleep.


00:04:47.920 --> 00:04:51.760
But over on, say, Windows, it does a bunch of tweaking with threads.


00:04:51.760 --> 00:04:56.720
So what it'll do is go and set its current thread to be


00:04:56.720 --> 00:05:01.520
continuous, system required, display required, as a bunch of bitwise flags.


00:05:01.520 --> 00:05:06.400
And then over on Linux, it uses something completely different.


00:05:06.400 --> 00:05:10.720
It runs mask and unmask, which I don't actually know what that does.


00:05:10.720 --> 00:05:12.520
I suspect it keeps it awake.


00:05:12.520 --> 00:05:15.320
So anyway, it's a pretty cool little project.


00:05:15.320 --> 00:05:18.740
It's very simple, but it also solves the problem


00:05:18.740 --> 00:05:21.240
that I can imagine a ton of people doing data science-y


00:05:21.240 --> 00:05:24.480
like things would run into because they want to do


00:05:24.480 --> 00:05:27.140
a bunch of processing and not have their system go to sleep.


00:05:27.140 --> 00:05:28.200
What do you all think?


00:05:28.200 --> 00:05:32.860
- I think I'm just glad that I know about Caffeinate now


00:05:32.860 --> 00:05:34.280
'cause that's cool.


00:05:34.280 --> 00:05:36.240
- Yeah, if you want to keep your Mac awake,


00:05:36.240 --> 00:05:38.580
you literally just have to go over and type Caffeinate


00:05:38.580 --> 00:05:39.420
on the terminal.


00:05:39.420 --> 00:05:41.040
You don't have to have Python or any of those kinds


00:05:41.040 --> 00:05:44.280
of things, but if you want your Python code to control it,


00:05:44.280 --> 00:05:47.700
This thing is basically subprost juggling that command.


00:05:47.700 --> 00:05:48.900
- Okay. - Yeah, I can imagine


00:05:48.900 --> 00:05:51.660
if you're writing code that's scraping websites,


00:05:51.660 --> 00:05:53.460
looking for updates and things like that,


00:05:53.460 --> 00:05:55.200
you really wouldn't want your computer to go to sleep.


00:05:55.200 --> 00:05:57.220
And I always find myself messing around


00:05:57.220 --> 00:06:00.100
in all the power settings and maxing things out.


00:06:00.100 --> 00:06:01.540
So this is nice.


00:06:01.540 --> 00:06:03.740
- Yeah, yeah, very cool, very cool.


00:06:03.740 --> 00:06:06.100
Awesome, well, that's it for that one, Brian.


00:06:06.100 --> 00:06:07.260
- Cool. - Off to you.


00:06:07.260 --> 00:06:09.300
- What do we got next?


00:06:09.300 --> 00:06:12.740
We have, oh, how to create a great stack overflow question.


00:06:12.740 --> 00:06:14.740
Actually, this is great.


00:06:14.740 --> 00:06:18.740
Yeah, Stack Overflow just sold for like $1.4 billion.


00:06:18.740 --> 00:06:20.580
It's quite the site.


00:06:20.580 --> 00:06:21.540
Yeah.


00:06:21.540 --> 00:06:22.900
Who did it sell to? Do you know?


00:06:22.900 --> 00:06:23.780
No, I don't remember.


00:06:23.780 --> 00:06:25.180
It's a company I hadn't heard of.


00:06:25.180 --> 00:06:26.900
How did I miss that?


00:06:26.900 --> 00:06:29.180
So, you know, I don't really...


00:06:29.180 --> 00:06:31.300
I actually...


00:06:31.300 --> 00:06:32.740
Of course, when I Google stuff,


00:06:32.740 --> 00:06:34.780
I get a bunch of Stack Overflow answers,


00:06:34.780 --> 00:06:36.140
and I've utilized it.


00:06:36.140 --> 00:06:39.580
And I tried to play the whole game for a little while


00:06:39.580 --> 00:06:42.040
of trying to get Stack Overflow points and stuff.


00:06:42.040 --> 00:06:45.680
And then I realized, yeah, this just isn't my thing.


00:06:45.680 --> 00:06:48.680
But it's a thing for a lot of people of like answering this.


00:06:48.680 --> 00:06:53.420
But the reason why I brought this up isn't just to get great answers on Stack Overflow,


00:06:53.420 --> 00:06:55.520
but there is a good trick to that, and it's good.


00:06:55.520 --> 00:06:59.680
But it's also if you're asking questions really from anybody,


00:06:59.680 --> 00:07:03.020
if you send any sort of expert that you know,


00:07:03.020 --> 00:07:06.680
like maybe if you want to ask a pyramid question to Michael


00:07:06.680 --> 00:07:08.920
or a pytest question for me.


00:07:09.640 --> 00:07:15.140
These sorts of things are, this is the same topics apply.


00:07:15.140 --> 00:07:16.940
So let's just jump in.


00:07:16.940 --> 00:07:20.200
This is from Kevin Markham at Data School.


00:07:20.200 --> 00:07:23.280
Kevin's a great guy.


00:07:23.280 --> 00:07:26.500
We kind of hang out with him sometimes at PyCons and stuff when we had those.


00:07:26.500 --> 00:07:30.540
But the punchline of his article, which we'll link to,


00:07:30.540 --> 00:07:33.880
is you need to write a brief introduction


00:07:33.880 --> 00:07:38.480
and you want to have self-contained code examples.


00:07:39.100 --> 00:07:43.600
and then detail the expected results and why you want those results.


00:07:43.600 --> 00:07:47.560
And then add any other important notes, link to relevant questions,


00:07:47.560 --> 00:07:50.900
and then also write a title that summarizes the question.


00:07:50.900 --> 00:07:52.760
These all seem sort of obvious,


00:07:52.760 --> 00:07:57.620
so I'm really glad that Kevin went through kind of an example.


00:07:57.620 --> 00:07:59.700
So he started with an example that somebody,


00:07:59.700 --> 00:08:02.360
one of his students asked him about pandas.


00:08:02.360 --> 00:08:05.500
And the question really was about data frames


00:08:05.500 --> 00:08:06.900
and filling in missing values,


00:08:06.960 --> 00:08:11.600
and it had a domain-specific thing that somebody was asking him.


00:08:11.600 --> 00:08:14.880
Then Kevin goes through and


00:08:14.880 --> 00:08:19.200
rewrites the question as a good Stack Overflow question.


00:08:19.200 --> 00:08:20.580
It's night and day.


00:08:20.580 --> 00:08:23.080
It's amazing to see this.


00:08:23.080 --> 00:08:25.960
I really encourage people to read the article.


00:08:25.960 --> 00:08:31.640
But a couple of things that I really love is converting.


00:08:31.640 --> 00:08:33.000
They didn't really talk about,


00:08:33.000 --> 00:08:38.900
but convert the example from any domain-specific stuff to a toy example.


00:08:38.900 --> 00:08:43.300
And that's a good skill to have anyway,


00:08:43.300 --> 00:08:46.860
is to say, "This problem that I'm having in my code,


00:08:46.860 --> 00:08:48.800
it's really a generic problem.


00:08:48.800 --> 00:08:53.600
How do I make that using a toy example to describe the problem?"


00:08:53.600 --> 00:08:56.400
And oftentimes, actually, you can answer your own question


00:08:56.400 --> 00:08:58.620
once you get it into a toy example and you realize,


00:08:58.620 --> 00:09:02.000
"Oh, I'm overthinking it."


00:09:02.060 --> 00:09:04.060
So this is a good first step.


00:09:04.060 --> 00:09:07.740
And so this is a great thing to see.


00:09:07.740 --> 00:09:12.140
But this is a great example, because it's like some architecture problem,


00:09:12.140 --> 00:09:14.780
but then he turns it into colors of toys.


00:09:14.780 --> 00:09:18.140
And it's an easier problem to see.


00:09:18.140 --> 00:09:20.860
The other thing is making sure that the example is runnable


00:09:20.860 --> 00:09:23.500
with all the import statements and everything, so somebody can just


00:09:23.500 --> 00:09:27.260
plop it into their own editor and run it to see


00:09:27.260 --> 00:09:31.980
if they can see the same problem and see if they can figure out


00:09:31.980 --> 00:09:34.340
- That's good advice if it's too specific


00:09:34.340 --> 00:09:37.180
or you don't have the data or it's not complete,


00:09:37.180 --> 00:09:40.260
you have to speculate rather than actually fix,


00:09:40.260 --> 00:09:42.700
you know, verify you can fix the problem or not, right?


00:09:42.700 --> 00:09:44.620
- Yeah, and the part that I,


00:09:44.620 --> 00:09:46.760
one of the things that I wouldn't have thought of


00:09:46.760 --> 00:09:48.220
is linking to other questions


00:09:48.220 --> 00:09:51.300
because there's a fear I think of moderators


00:09:51.300 --> 00:09:53.620
and also other people reading it is,


00:09:53.620 --> 00:09:55.540
this is probably, if it's simple,


00:09:55.540 --> 00:09:56.700
it's probably already been answered.


00:09:56.700 --> 00:09:58.940
What, did you already look or whatever?


00:09:58.940 --> 00:10:03.300
And the act of linking to other answers to say,


00:10:03.300 --> 00:10:06.340
this question over here doesn't really,


00:10:06.340 --> 00:10:08.600
it kind of helps me, but it's missing


00:10:08.600 --> 00:10:11.460
because of this or something,


00:10:11.460 --> 00:10:13.200
some reason why the other answers.


00:10:13.200 --> 00:10:17.620
And that's an interesting take on it,


00:10:17.620 --> 00:10:19.980
just so that people don't dismiss you right away


00:10:19.980 --> 00:10:23.100
as somebody that didn't do any research to begin with.


00:10:23.100 --> 00:10:23.940
So.


00:10:23.940 --> 00:10:24.880
- Yeah, for sure.


00:10:24.880 --> 00:10:27.380
- Yeah, it's cool.


00:10:27.380 --> 00:10:31.020
I get to Stack Overflow, I'm pretty desperate for help.


00:10:31.020 --> 00:10:33.060
And so forming really good questions


00:10:33.060 --> 00:10:35.860
so you get the best answers and is really important.


00:10:35.860 --> 00:10:36.820
I really like that.


00:10:36.820 --> 00:10:40.140
Narrowing it down to a reproducible example.


00:10:40.140 --> 00:10:43.780
- Yeah, and people can be mean on Stack Overflow


00:10:43.780 --> 00:10:45.780
and on Reddit and on YouTube


00:10:45.780 --> 00:10:47.220
and other places on the internet.


00:10:47.220 --> 00:10:50.100
But if you show that you've tried,


00:10:50.100 --> 00:10:53.300
I think that will disarm them somewhat.


00:10:53.300 --> 00:10:54.900
Right, I mean, I've seen questions like,


00:10:54.900 --> 00:10:57.140
I have this homework question and I can't do my homework.


00:10:57.140 --> 00:10:58.420
Could anyone help?


00:10:58.420 --> 00:10:59.420
And I get that email too.


00:10:59.420 --> 00:11:02.940
And like, no, no one can help.


00:11:02.940 --> 00:11:04.620
No one wants to do your homework for you.


00:11:04.620 --> 00:11:05.860
Yes, no one should.


00:11:05.860 --> 00:11:08.140
But if you have a legitimate problem


00:11:08.140 --> 00:11:10.380
or you think you found a legitimate bug


00:11:10.380 --> 00:11:12.180
or there's just no documentation


00:11:12.180 --> 00:11:14.100
and it's clear you've tried,


00:11:14.100 --> 00:11:16.700
I suspect that'll disarm people.


00:11:16.700 --> 00:11:17.940
They may still not be able to help you,


00:11:17.940 --> 00:11:19.580
but at least they won't be mean.


00:11:19.580 --> 00:11:25.740
Hey Brian, before we move on to the next one,


00:11:25.740 --> 00:11:27.880
I wanna do two quick real-time follow-ups.


00:11:27.880 --> 00:11:32.880
So one, Stack Overflow sold to tech giant Process,


00:11:32.880 --> 00:11:36.820
Process, we've all heard of them, for $1.8 billion.


00:11:36.820 --> 00:11:40.720
So that is not messing around.


00:11:40.720 --> 00:11:42.740
That forum site did all right.


00:11:42.740 --> 00:11:47.440
Jill Spolsky and Jeff Atwood did okay.


00:11:47.440 --> 00:11:49.000
And then the other one is,


00:11:49.000 --> 00:11:51.680
unfortunately, Dan Heifert out there in the live stream


00:11:51.680 --> 00:11:53.760
said he just ran Caffeinate three times on his Mac


00:11:53.760 --> 00:11:55.080
that he can't get it to sleep


00:11:55.080 --> 00:11:57.000
and it's acting jittery and anxious.


00:11:57.000 --> 00:11:59.520
So I don't really know what we can do about that,


00:11:59.520 --> 00:12:01.600
but maybe we should just go to TikTok.


00:12:01.600 --> 00:12:02.520
What do you think?


00:12:02.520 --> 00:12:04.360
- Yeah, totally.


00:12:04.360 --> 00:12:07.080
So have you ever really wanted to make a quick edit


00:12:07.080 --> 00:12:09.200
to something you've got in a GitHub repo,


00:12:09.200 --> 00:12:11.140
but you're kind of stuck with that rudimentary,


00:12:11.140 --> 00:12:13.000
feels like you're working with notepad, maybe a little bit.


00:12:13.000 --> 00:12:14.320
- Yeah, so you click the edit,


00:12:14.320 --> 00:12:15.160
there's a little edit thing.


00:12:15.160 --> 00:12:16.440
You find the file, you edit it,


00:12:16.440 --> 00:12:18.240
and then you go in there and there's like no help


00:12:18.240 --> 00:12:20.040
and you just type away.


00:12:20.040 --> 00:12:21.120
Yeah, I do that.


00:12:21.120 --> 00:12:22.760
I don't love it, but I do that.


00:12:22.760 --> 00:12:23.720
- Feels like you're a notepad.


00:12:23.720 --> 00:12:28.120
Well, GitHub announced GitHub Codespaces recently,


00:12:28.120 --> 00:12:30.680
which is a cloud-hosted development environments


00:12:30.680 --> 00:12:32.840
with powerful machines, and you have to pay for them.


00:12:32.840 --> 00:12:34.800
But one of the fun bonus features


00:12:34.800 --> 00:12:36.180
that they launched at the same time


00:12:36.180 --> 00:12:38.680
that we only really announced on TikTok


00:12:38.680 --> 00:12:42.400
and other social media is called github.dev.


00:12:42.400 --> 00:12:46.720
So you can actually go to any GitHub repo


00:12:46.720 --> 00:12:50.560
and say, I just wanna edit this GitHub repo that I have here.


00:12:50.560 --> 00:12:52.800
I can just press the dot key,


00:12:52.800 --> 00:12:56.280
and that will reopen this GitHub repository


00:12:56.280 --> 00:12:57.840
in something called github.dev.


00:12:57.840 --> 00:13:01.960
So this is an entirely web browser based version of VS Code


00:13:01.960 --> 00:13:03.120
that's built right into GitHub.


00:13:03.120 --> 00:13:04.520
It works on any GitHub repo.


00:13:04.520 --> 00:13:08.120
And there's no server behind it, it's serverless.


00:13:08.120 --> 00:13:10.640
So there's nothing that you need to pay for here.


00:13:10.640 --> 00:13:12.920
And so it also has some limited functionality


00:13:12.920 --> 00:13:13.840
'cause there's no backend.


00:13:13.840 --> 00:13:16.680
This is all just a front end running in your web browser.


00:13:16.680 --> 00:13:22.520
But what's really cool is that you can come in here


00:13:22.520 --> 00:13:24.880
And you can add new files.


00:13:24.880 --> 00:13:28.840
Like I can go in here and add a new Python file.


00:13:28.840 --> 00:13:30.200
In the File Explorer on the left,


00:13:30.200 --> 00:13:31.720
I can just click and add a new file.


00:13:31.720 --> 00:13:34.060
And I can work with this more like I'm


00:13:34.060 --> 00:13:36.320
used to working with a text editor.


00:13:36.320 --> 00:13:41.120
And as I can just say, imports Flask, for example.


00:13:41.120 --> 00:13:46.840
And because there's support for different extensions


00:13:46.840 --> 00:13:49.880
that are web-enabled that know how to work in this new mode.


00:13:49.880 --> 00:13:53.020
we've actually added the Python extension recently in here.


00:13:53.020 --> 00:13:56.760
So I can actually get some auto-complete


00:13:56.760 --> 00:13:59.940
from some of the modules.


00:13:59.940 --> 00:14:02.960
So if I say from Flask import Flask,


00:14:02.960 --> 00:14:05.960
I get the auto-complete for that Flask object.


00:14:05.960 --> 00:14:08.920
And I can do the typical thing where I can say,


00:14:08.920 --> 00:14:14.120
Flask equals name, and I can type app.


00:14:14.120 --> 00:14:18.000
And I get all of this, you know, add template filter route,


00:14:18.000 --> 00:14:19.040
all those in the auto-complete.


00:14:19.040 --> 00:14:22.880
So I can actually get a more real editing experience


00:14:22.880 --> 00:14:25.920
with the productivity, things like that,


00:14:25.920 --> 00:14:28.320
that I'm used to when I'm working with text editor.


00:14:28.320 --> 00:14:31.520
But this is all using the storage file system


00:14:31.520 --> 00:14:33.920
from the web browser's local storage,


00:14:33.920 --> 00:14:36.700
as well as the files from the GitHub repo.


00:14:36.700 --> 00:14:38.680
So if, for example, if I go in here


00:14:38.680 --> 00:14:43.680
and just change Hello World to Hello Python Bytes


00:14:45.660 --> 00:14:49.220
in this code here and I hit save on a piece of code


00:14:49.220 --> 00:14:52.300
and then I see I've got source control changes here.


00:14:52.300 --> 00:14:54.380
And it's telling me that I can click on that file


00:14:54.380 --> 00:14:58.380
and I can actually see a diff of that file side by side


00:14:58.380 --> 00:15:01.500
and I can just commit that using the source control panel.


00:15:01.500 --> 00:15:03.020
And if I add this commit,


00:15:03.020 --> 00:15:05.660
it will go directly into my GitHub repo.


00:15:05.660 --> 00:15:08.140
So that's pretty cool.


00:15:08.140 --> 00:15:09.140
So a lot of the--


00:15:09.140 --> 00:15:09.980
- That's amazing.


00:15:09.980 --> 00:15:12.380
I do see right below the source control thing,


00:15:12.380 --> 00:15:15.640
a play debug thing.


00:15:15.640 --> 00:15:17.760
So that doesn't--


00:15:17.760 --> 00:15:18.840
- Doesn't work yet, does it?


00:15:18.840 --> 00:15:20.320
- Yeah, so that's what there's like,


00:15:20.320 --> 00:15:22.360
continue working on code spaces at that point.


00:15:22.360 --> 00:15:23.680
You gotta get a real machine for--


00:15:23.680 --> 00:15:25.640
- I see, it kicks you over to the hosted,


00:15:25.640 --> 00:15:27.600
the real hosted version.


00:15:27.600 --> 00:15:29.080
- Yeah, yeah, but there is some,


00:15:29.080 --> 00:15:30.200
we're actually pushing the boundaries


00:15:30.200 --> 00:15:32.080
of what you can do in these web versions


00:15:32.080 --> 00:15:33.080
in some interesting ways.


00:15:33.080 --> 00:15:35.120
So you can get basic syntax highlighting,


00:15:35.120 --> 00:15:37.640
as you saw, auto-complete,


00:15:37.640 --> 00:15:39.280
but there's no Python interpreter.


00:15:39.280 --> 00:15:41.600
So when I go to definition, say,


00:15:41.600 --> 00:15:44.100
I wanna go to definition on this Flask module,


00:15:44.100 --> 00:15:47.420
It just brings up type hints, the type hints that we have.


00:15:47.420 --> 00:15:49.340
- I see, the typeshed type hints, okay.


00:15:49.340 --> 00:15:50.180
It's still okay though.


00:15:50.180 --> 00:15:54.700
It's still better than what you get with a normal editor.


00:15:54.700 --> 00:15:55.540
- Yeah, it's pretty cool.


00:15:55.540 --> 00:15:58.240
One kind of bonus thing I wanna throw in here is that,


00:15:58.240 --> 00:16:01.900
so if you go to the extensions tab,


00:16:01.900 --> 00:16:03.060
you'll be able to search


00:16:03.060 --> 00:16:05.900
and you'll see which extensions are web-enabled.


00:16:05.900 --> 00:16:08.780
And one of the fun ones that somebody on our team put out


00:16:08.780 --> 00:16:11.500
is this VS Code PyIoDyed one.


00:16:11.500 --> 00:16:13.180
So if you actually open a Jupyter notebook,


00:16:13.180 --> 00:16:17.180
You can run a little bit of Python code from these cells


00:16:17.180 --> 00:16:18.980
here using PyIoDyte.


00:16:18.980 --> 00:16:20.220
So that's pretty neat.


00:16:20.220 --> 00:16:21.460
- Oh, wow.


00:16:21.460 --> 00:16:22.860
WebAssembly for the win.


00:16:22.860 --> 00:16:25.180
- Yeah, so that's github.dev.


00:16:25.180 --> 00:16:29.100
I think it's really cool how much more you can do


00:16:29.100 --> 00:16:31.140
right from the browser within GitHub.


00:16:31.140 --> 00:16:34.100
- Brian, did you know about this?


00:16:34.100 --> 00:16:36.060
- I didn't, and I was just playing with it


00:16:36.060 --> 00:16:38.740
in the background on my own repo.


00:16:38.740 --> 00:16:41.940
I was looking through the extensions


00:16:41.940 --> 00:16:44.540
And maybe you know off the top of your head, Dan,


00:16:44.540 --> 00:16:48.120
can I get the Vim mode in this extension?


00:16:48.120 --> 00:16:53.100
- Well, if you, you'll see which ones are,


00:16:53.100 --> 00:16:55.580
so if they're highlighted here and not grayed out,


00:16:55.580 --> 00:16:58.140
so the, this Vim extension works.


00:16:58.140 --> 00:16:58.980
- Oh, sweet.


00:16:58.980 --> 00:17:00.900
- So you can see which ones are available.


00:17:00.900 --> 00:17:02.100
It says available in Vim.


00:17:02.100 --> 00:17:03.300
- You just made Brian's day.


00:17:03.300 --> 00:17:05.460
There's a couple of Vim options.


00:17:05.460 --> 00:17:06.300
- Yeah. - Yeah.


00:17:06.300 --> 00:17:08.140
I can't, I just can't use any editor


00:17:08.140 --> 00:17:09.860
without Vim mode anymore.


00:17:09.860 --> 00:17:11.900
My brain just doesn't work without.


00:17:11.900 --> 00:17:14.920
- How do you use Google Docs or like other editors


00:17:14.920 --> 00:17:16.020
or anything like that?


00:17:16.020 --> 00:17:17.960
- What's that?


00:17:17.960 --> 00:17:20.820
- How do you use Google Docs or some other editor?


00:17:20.820 --> 00:17:23.220
- I paste into that after I've written this stuff


00:17:23.220 --> 00:17:24.900
in somewhere else.


00:17:24.900 --> 00:17:28.580
- Nice.


00:17:28.580 --> 00:17:31.660
Dan, when I first saw this, I was on my GitHub repo


00:17:31.660 --> 00:17:32.980
and I'm like, oh, let me just hit dot


00:17:32.980 --> 00:17:35.660
'cause it seems like that's too simple, but I'll try it.


00:17:35.660 --> 00:17:37.020
And then boom, it came an editor.


00:17:37.020 --> 00:17:38.540
I'm like, oh my God, this is awesome.


00:17:38.540 --> 00:17:40.020
And then I went into the settings


00:17:40.020 --> 00:17:41.540
and I put it into dark mode


00:17:41.540 --> 00:17:43.540
I change the font size and all the font family,


00:17:43.540 --> 00:17:47.340
and I'm like, "Oh, this is nice. This is really cool."


00:17:47.340 --> 00:17:51.580
Yeah, I'm excited about it. Let me throw one more bonus in here.


00:17:51.580 --> 00:17:58.260
If I change this to say, I edit this Jupyter Notebook cell here,


00:17:58.260 --> 00:18:02.260
and if I go into the diff of--


00:18:02.260 --> 00:18:06.060
If I go into the Source Control panel after editing this Jupyter Notebook cell,


00:18:06.060 --> 00:18:10.300
I can actually see a real diff side by side with those cells.


00:18:10.300 --> 00:18:13.100
So that's something cool you can do


00:18:13.100 --> 00:18:18.100
without having to install a full editor and things locally.


00:18:18.100 --> 00:18:20.700
- Very cool.


00:18:20.700 --> 00:18:22.860
Yeah, and it's a nice diff of the cell contents,


00:18:22.860 --> 00:18:26.180
not like the JSON crazy diff.


00:18:26.180 --> 00:18:30.540
- Yeah, you get the left, right with red, green,


00:18:30.540 --> 00:18:33.820
add, remove, yeah, and the outputs are squashed.


00:18:33.820 --> 00:18:36.020
So you're not seeing a bunch of, if you diff a notebook,


00:18:36.020 --> 00:18:39.860
you'll see a bunch of XML and JSON being removed and added.


00:18:39.860 --> 00:18:41.820
This is more that rich.


00:18:41.820 --> 00:18:46.700
- Take all of the various encoding language storage formats


00:18:46.700 --> 00:18:48.540
and then jam them all together and then diff that.


00:18:48.540 --> 00:18:49.820
That's fun.


00:18:49.820 --> 00:18:50.700
- Cool.


00:18:50.700 --> 00:18:51.540
- Yeah, no, this is awesome.


00:18:51.540 --> 00:18:52.540
This is a great view.


00:18:52.540 --> 00:18:55.260
- Click it.


00:18:55.260 --> 00:18:56.700
I'm gonna use it.


00:18:56.700 --> 00:18:57.540
- Indeed.


00:18:57.540 --> 00:19:00.740
- So one of the things that I don't really edit


00:19:00.740 --> 00:19:02.780
on in GitHub very much,


00:19:02.780 --> 00:19:05.140
what happens like once you're done?


00:19:05.140 --> 00:19:08.660
Does it create a merge request or just edit it in place?


00:19:08.660 --> 00:19:11.540
- It makes a commit directly to the repository.


00:19:11.540 --> 00:19:16.540
So I can just throw that right in there.


00:19:16.540 --> 00:19:17.940
- So you have to have,


00:19:17.940 --> 00:19:19.820
obviously you have to have permissions.


00:19:19.820 --> 00:19:20.780
You have to be one of the people


00:19:20.780 --> 00:19:23.860
that can commit directly to that branch, right?


00:19:23.860 --> 00:19:27.960
- Yeah, this is great.


00:19:27.960 --> 00:19:29.480
I was so delighted when I saw it.


00:19:29.480 --> 00:19:31.140
So I'm gonna definitely use this.


00:19:31.140 --> 00:19:35.660
Nice.


00:19:35.660 --> 00:19:37.220
All right, Brian, am I up on the next one?


00:19:37.220 --> 00:19:38.300
- You are.


00:19:38.300 --> 00:19:40.800
All right on, let's move on to it.


00:19:40.800 --> 00:19:43.520
Okay, I'm resisting the temptation to hit dot


00:19:43.520 --> 00:19:45.320
and play around with the wait py.


00:19:45.320 --> 00:19:48.640
Instead, let me take you over here.


00:19:48.640 --> 00:19:51.240
So we go to Python, that's not Python bytes.


00:19:51.240 --> 00:19:52.840
It's close, but not exactly.


00:19:52.840 --> 00:19:55.640
Oh my gosh, I don't even, why did I type com?


00:19:55.640 --> 00:19:57.060
I've never, hold on.


00:19:57.060 --> 00:20:01.600
That's our domain.


00:20:01.600 --> 00:20:03.240
So we're live streaming right now, by the way,


00:20:03.240 --> 00:20:04.280
if you didn't notice.


00:20:04.280 --> 00:20:07.960
If you go over here, notice I've got Firefox


00:20:07.960 --> 00:20:10.100
that I'm using and it has this little shield


00:20:10.100 --> 00:20:12.320
and almost anything you go to,


00:20:12.320 --> 00:20:15.720
man, I wanna go to a new site, but let's go to CNN.


00:20:15.720 --> 00:20:16.880
And you'll come over here


00:20:16.880 --> 00:20:21.200
and you'll see a bunch of stuff up here getting blocked


00:20:21.200 --> 00:20:24.680
like social media trackers, tracking content,


00:20:24.680 --> 00:20:26.080
like look at that.


00:20:26.080 --> 00:20:30.820
That's a ridiculous amount of gross Google analytics,


00:20:30.820 --> 00:20:35.820
Google tag services, Rubicon project, US East apparently.


00:20:35.820 --> 00:20:37.840
Like that's bad, right?


00:20:37.840 --> 00:20:40.800
So I've done a lot of work to get us away


00:20:40.800 --> 00:20:45.600
from retargeting, tracking, and we have no known trackers.


00:20:45.600 --> 00:20:46.440
Now I'm running a VPN,


00:20:46.440 --> 00:20:49.280
which probably blocked a bunch of the ones off of CNN.


00:20:49.280 --> 00:20:52.680
So that was the ones that got through the blocking


00:20:52.680 --> 00:20:53.520
and stuff.


00:20:53.520 --> 00:20:58.520
So it's really nice to not have all that stuff


00:20:58.520 --> 00:21:00.520
and let people come visit the site


00:21:00.520 --> 00:21:02.140
and know that we're not retargeting them,


00:21:02.140 --> 00:21:04.160
we're not tracking them, we're not doing stuff.


00:21:04.160 --> 00:21:06.600
We're just giving them a podcast


00:21:06.600 --> 00:21:08.560
or same thing over on Talk Python Training


00:21:08.560 --> 00:21:11.000
or Talk Python or whatever, you go there,


00:21:11.000 --> 00:21:12.160
you get the content.


00:21:12.160 --> 00:21:16.560
We offer things like a podcast with ads


00:21:16.560 --> 00:21:17.980
that people can take and that's enough.


00:21:17.980 --> 00:21:20.320
We don't need to like follow you around


00:21:20.320 --> 00:21:22.780
for all sorts of creepy reasons, right?


00:21:22.780 --> 00:21:26.420
The drawback is we don't have a lot of analytics, right?


00:21:26.420 --> 00:21:29.200
We can get a sense about like download numbers


00:21:29.200 --> 00:21:32.000
and things like that, but we can't report like,


00:21:32.000 --> 00:21:34.800
well, in the last hour, since we talked about this thing,


00:21:34.800 --> 00:21:44.640
here's the traffic, can we? Or could we? So junction apps over


00:21:44.640 --> 00:21:48.300
on Twitter said, Hey, you know what, I heard you going on and


00:21:48.300 --> 00:21:52.040
on about the retargeting of all these places, and how you


00:21:52.040 --> 00:21:55.580
dropped it. Have you heard about go access.io? Have either of you


00:21:55.580 --> 00:21:59.420
heard about this thing? No, no, I hadn't either. But check it


00:21:59.420 --> 00:22:04.680
out is super cool. So what it is, is it is a Google Analytics


00:22:04.700 --> 00:22:07.900
like service that you install on your server.


00:22:07.900 --> 00:22:12.660
And what it does, if I can open this image in a tab, so it doesn't go away.


00:22:12.660 --> 00:22:16.620
What it does is it looks and tails your logs,


00:22:16.620 --> 00:22:19.340
and gives you real time analytics on your logs,


00:22:19.340 --> 00:22:25.460
rather than by looking at going through JavaScript and hooking into people's browsers.


00:22:25.460 --> 00:22:28.620
So no tracking, none of that stuff, but you can come over here,


00:22:29.420 --> 00:22:36.500
and in your terminal, run it and get a real time view of your traffic, your visitors,


00:22:36.500 --> 00:22:41.700
all the kind of stuff you would expect from Google Analytics, visually as a graph like thing in your terminal.


00:22:41.700 --> 00:22:45.100
Interesting, huh?


00:22:45.100 --> 00:22:48.780
What kind of information are you getting?


00:22:48.780 --> 00:22:53.540
Well, probably the easiest way to find out is they have a web view and have the terminal view.


00:22:53.540 --> 00:22:58.700
And the web view is really generate a HTML file and then just request it.


00:22:58.700 --> 00:23:00.700
So there's not a web server type thing.


00:23:00.700 --> 00:23:03.380
But you go over here and click, it says...


00:23:03.380 --> 00:23:05.700
I'll give you the features real quick, then open up the demo.


00:23:05.700 --> 00:23:11.140
It says, "Fast real-time millisecond-based latency updates written in C.


00:23:11.140 --> 00:23:13.820
Only uses end cursors as dependencies.


00:23:13.820 --> 00:23:17.420
Works on almost all the formats, Nginx amongst the others.


00:23:17.420 --> 00:23:21.500
Just set the log format and run it on your log,


00:23:21.500 --> 00:23:24.660
got the terminal and the web UI bit."


00:23:24.660 --> 00:23:27.060
So if you go over here, you can see...


00:23:27.060 --> 00:23:28.980
like look at this off of just the log files.


00:23:28.980 --> 00:23:32.060
So you can see things like here, I'll pull them up.


00:23:32.060 --> 00:23:33.260
So you can go over and say,


00:23:33.260 --> 00:23:35.640
well, what are the referring URLs?


00:23:35.640 --> 00:23:39.940
Let me make that small so you can kind of see in here.


00:23:39.940 --> 00:23:42.580
Unfortunately, here's the referring URLs.


00:23:42.580 --> 00:23:43.820
So you can see in this example,


00:23:43.820 --> 00:23:46.980
they were, you know, shop, internet, whatever, right?


00:23:46.980 --> 00:23:48.220
These little, it's a fake site,


00:23:48.220 --> 00:23:50.860
but you can come over here and like actually see graphs


00:23:50.860 --> 00:23:54.380
as well as like grids and pages.


00:23:54.380 --> 00:23:56.140
So like think Google Analytics,


00:23:56.140 --> 00:23:59.740
But if you run a site, you can point this against your logs


00:23:59.740 --> 00:24:02.620
and get real time information in the terminal


00:24:02.620 --> 00:24:04.780
or as in this web view.


00:24:04.780 --> 00:24:06.320
And yeah, it's pretty neat.


00:24:06.320 --> 00:24:09.940
- And so do you have to install anything


00:24:09.940 --> 00:24:12.580
or do you just run this and it finds the logs on your system


00:24:12.580 --> 00:24:13.920
and pulls them all together?


00:24:13.920 --> 00:24:17.020
- Yeah, you do install, let's see here.


00:24:17.020 --> 00:24:21.460
So there's a getting started and it says,


00:24:21.460 --> 00:24:24.200
the way to get started probably to use a package manager


00:24:24.200 --> 00:24:27.000
for your Linux machine if you're running on Linux,


00:24:27.000 --> 00:24:29.560
or you can get a Docker image and you run it.


00:24:29.560 --> 00:24:32.360
And then what you do is you just simply run the command


00:24:32.360 --> 00:24:36.800
against your log file and tell it what format


00:24:36.800 --> 00:24:38.320
and boom, off it goes.


00:24:38.320 --> 00:24:43.840
So you could set it up as a like a cron job or something


00:24:43.840 --> 00:24:46.360
that will then generate the HTML file


00:24:46.360 --> 00:24:48.160
and you could just refresh that,


00:24:48.160 --> 00:24:51.320
however often you want to, or run the terminal one.


00:24:53.680 --> 00:24:55.680
You could run it once a day too.


00:24:55.680 --> 00:24:57.480
- Yeah, yeah, you don't need to.


00:24:57.480 --> 00:25:02.480
Exactly, yeah, you don't need real time, real time.


00:25:02.480 --> 00:25:04.920
You need just sort of how's the day going


00:25:04.920 --> 00:25:05.760
or something like that.


00:25:05.760 --> 00:25:07.280
How was yesterday?


00:25:07.280 --> 00:25:09.760
- Right, so like one of the things that I use


00:25:09.760 --> 00:25:11.160
information like this about is


00:25:11.160 --> 00:25:12.600
I don't really want to track users.


00:25:12.600 --> 00:25:14.540
I don't care about individual users,


00:25:14.540 --> 00:25:15.840
but I do want to know,


00:25:15.840 --> 00:25:18.920
like I've got putting out different content on my blog


00:25:18.920 --> 00:25:20.400
or on the podcast,


00:25:20.400 --> 00:25:24.600
which ones are resonating with people.


00:25:24.600 --> 00:25:25.440
- Yes, exactly.


00:25:25.440 --> 00:25:27.600
- And maybe do more of that.


00:25:27.600 --> 00:25:28.440
- Yep.


00:25:28.440 --> 00:25:33.480
So you can see, like there's a little bunch of options here,


00:25:33.480 --> 00:25:35.760
referring sites, hosts,


00:25:35.760 --> 00:25:42.600
requested files, they call it, but it's really just URLs.


00:25:42.600 --> 00:25:46.540
So you go over here and this would tell you


00:25:46.540 --> 00:25:47.740
sort of the traffic, you know,


00:25:47.740 --> 00:25:51.620
across your various pages.


00:25:51.620 --> 00:25:53.820
Right, so this would be like your list,


00:25:53.820 --> 00:25:56.380
this requested files URL, so the one you'd want.


00:25:56.380 --> 00:25:58.620
- Yeah.


00:25:58.620 --> 00:26:00.620
- Yeah, so anyway, I haven't set this up yet,


00:26:00.620 --> 00:26:01.780
but it looks pretty neat,


00:26:01.780 --> 00:26:03.540
and it could be worth checking out.


00:26:03.540 --> 00:26:05.340
- Yeah, neat.


00:26:05.340 --> 00:26:08.260
- And I guess even you could download your logs


00:26:08.260 --> 00:26:09.820
and not install it on your server,


00:26:09.820 --> 00:26:10.660
if you really wanted, right?


00:26:10.660 --> 00:26:11.900
You want this view,


00:26:11.900 --> 00:26:13.860
but you don't actually wanna put it on your server


00:26:13.860 --> 00:26:16.700
because putting stuff on the server,


00:26:16.700 --> 00:26:19.420
So, you know, so you could download it


00:26:19.420 --> 00:26:21.500
and then just run against your logs locally.


00:26:21.500 --> 00:26:23.700
- And you might be uploading your logs


00:26:23.700 --> 00:26:25.720
to a storage account somewhere too.


00:26:25.720 --> 00:26:28.260
- Yeah, exactly.


00:26:28.260 --> 00:26:30.940
You could push the logs out instead of running it there.


00:26:30.940 --> 00:26:32.800
So a bunch of cool ways to use this,


00:26:32.800 --> 00:26:34.300
but if people are running web apps


00:26:34.300 --> 00:26:36.300
and they want more visibility into it,


00:26:36.300 --> 00:26:37.460
this looks like a cool thing.


00:26:37.460 --> 00:26:39.840
So thanks Junction for sending that over.


00:26:39.840 --> 00:26:43.580
All right, off to you, Brian.


00:26:43.580 --> 00:26:45.700
- I wanna talk about keyboards a little bit.


00:26:45.700 --> 00:26:52.800
So this was a topic recommended by somebody named Blaze, I think.


00:26:52.800 --> 00:26:58.040
So there's a package called KMK.


00:26:58.040 --> 00:27:01.900
It's actually a collection of pieces of software,


00:27:01.900 --> 00:27:06.200
but we're linking to the KMK firmware.


00:27:06.200 --> 00:27:09.040
So this is firmware for computer keyboards


00:27:09.040 --> 00:27:12.540
written and configured in CircuitPython.


00:27:12.540 --> 00:27:14.460
So got super excited about this.


00:27:14.540 --> 00:27:16.700
I'm so kind of excited about it.


00:27:16.700 --> 00:27:18.800
The gist of it is, is you've got,


00:27:18.800 --> 00:27:24.820
if you've got a keyboard that runs a,


00:27:24.820 --> 00:27:29.460
runs CircuitPython and is powerful enough to run,


00:27:29.460 --> 00:27:33.180
to handle your keyboard and stuff.


00:27:33.180 --> 00:27:35.380
So there's a couple of tips in here.


00:27:35.380 --> 00:27:37.980
There's a couple available through Adafruit


00:27:37.980 --> 00:27:41.940
of different boards that would work.


00:27:42.860 --> 00:27:44.560
We'll get into the details a little bit more.


00:27:44.560 --> 00:27:51.560
But basically, you can configure a keyboard with a single Python file.


00:27:51.560 --> 00:27:57.160
It controls both split keyboards, two-piece keyboards and single keyboards.


00:27:57.160 --> 00:28:00.960
You can hook up macros, things like chainable macros,


00:28:00.960 --> 00:28:06.660
so you can have key sequences built into one key,


00:28:06.660 --> 00:28:10.260
or you can hook it up so that a key hitting multiple times,


00:28:10.320 --> 00:28:13.280
You can hit a particular key three times in a row,


00:28:13.280 --> 00:28:16.680
and you'll have one action versus something else.


00:28:16.680 --> 00:28:20.640
So even controlling under glow and LEDs and backlights


00:28:20.640 --> 00:28:23.320
and all that sort of stuff totally would be fun.


00:28:23.320 --> 00:28:25.080
I want to use this.


00:28:25.080 --> 00:28:26.520
I don't know how--


00:28:26.520 --> 00:28:28.720
seems like a lot of work, though.


00:28:28.720 --> 00:28:34.280
So we're linking to the project, and there's


00:28:34.280 --> 00:28:35.680
some information here.


00:28:35.680 --> 00:28:37.720
There's some guides on how to get started.


00:28:37.720 --> 00:28:39.200
And then we're also going to run--


00:28:39.200 --> 00:28:48.240
I found somebody that ran this and he's got a video that walks through doing it.


00:28:48.240 --> 00:28:49.600
But the gist of it is,


00:28:49.600 --> 00:28:52.000
is there any keyboards that do this right away?


00:28:52.000 --> 00:28:54.060
You've got to take an existing keyboard,


00:28:54.060 --> 00:28:57.980
rip out the existing circuit board and replace it with one of


00:28:57.980 --> 00:29:03.080
the 80 fruit boards and then reprogram it.


00:29:03.080 --> 00:29:05.720
If you're the kind of person that's okay with ripping


00:29:05.720 --> 00:29:08.840
the circuit board out of your keyboard


00:29:08.840 --> 00:29:11.480
and replacing it with something else, that'd be great.


00:29:11.480 --> 00:29:13.040
I actually wouldn't mind doing this.


00:29:13.040 --> 00:29:14.080
I think that'd be fun,


00:29:14.080 --> 00:29:18.560
but I'd like to know which keyboards I can do this with and which ones I can't.


00:29:18.560 --> 00:29:20.440
I know there's a huge list of keyboards out there,


00:29:20.440 --> 00:29:24.400
but even just a couple starter kits would be great to hear.


00:29:24.400 --> 00:29:26.560
>> It really works well with this one and here's where


00:29:26.560 --> 00:29:31.960
the CircuitPython board fits in there easily rather than,


00:29:31.960 --> 00:29:33.800
it doesn't really go back in.


00:29:33.800 --> 00:29:38.000
>> Yeah. One of the reasons why I'm bringing this up is I'd love somebody from Adafruit


00:29:38.000 --> 00:29:44.840
or from anybody working on CircuitPython or the KMK team or somebody to maybe put


00:29:44.840 --> 00:29:47.880
a couple more tutorials out to just say,


00:29:47.880 --> 00:29:49.400
"Hey, this is how you do it."


00:29:49.400 --> 00:29:53.480
I'd love it to have an off-the-shelf full keyboard,


00:29:53.480 --> 00:29:55.180
even if it's small or whatever,


00:29:55.180 --> 00:29:58.400
that said, "Okay, here's how you do it.


00:29:58.400 --> 00:30:00.240
You pull this circuit board out,


00:30:00.240 --> 00:30:01.480
put this other one in,


00:30:01.480 --> 00:30:03.680
it's like $40 on Adafruit."


00:30:03.680 --> 00:30:05.920
And there you go.


00:30:05.920 --> 00:30:07.400
You can, you can try it.


00:30:07.400 --> 00:30:14.760
And here's a sample of file that you would run it, run just a normal keyboard usage.


00:30:14.760 --> 00:30:20.440
And now, now you can customize it because the, just getting back to a workable keyboard


00:30:20.440 --> 00:30:23.720
seems already like a lot of work, but it still looks fun.


00:30:23.720 --> 00:30:25.840
I'd love to be able to hack a keyboard with Python.


00:30:25.840 --> 00:30:27.800
Very cool.


00:30:27.800 --> 00:30:29.600
Dan, what kind of keyboard do you use?


00:30:30.480 --> 00:30:37.000
I use a I'm a big fan of the thin keys, right? The very the


00:30:37.000 --> 00:30:40.720
very light travel keys, but I got an ergonomic keyboard. So


00:30:40.720 --> 00:30:42.480
thin ergonomic Logitech.


00:30:42.480 --> 00:30:48.360
Nice. I've got the I've got the Microsoft sculpt ergonomic,


00:30:48.360 --> 00:30:52.760
which I absolutely love. I know Brian's got even more exotic


00:30:52.760 --> 00:30:54.440
stuff that he's running over there.


00:30:54.440 --> 00:30:56.960
I can get mine up here. I'll do the camera.


00:30:56.960 --> 00:30:58.800
It's like, it's mounted to the


00:30:59.760 --> 00:31:02.060
Oh, my junk too. I've got a kinesis.


00:31:02.060 --> 00:31:03.960
Yeah, the kinesis inverted ones.


00:31:03.960 --> 00:31:05.560
Those are super interesting.


00:31:05.560 --> 00:31:07.160
What I would like to see


00:31:07.160 --> 00:31:10.960
would be some keyboard manufacturer


00:31:10.960 --> 00:31:12.560
saying we're shipping a keyboard


00:31:12.560 --> 00:31:14.260
to you. Oh, and you can program it


00:31:14.260 --> 00:31:15.760
with Python and basically


00:31:15.760 --> 00:31:18.560
do this for you as a package thing


00:31:18.560 --> 00:31:20.060
and just, you know, build it out of


00:31:20.060 --> 00:31:21.660
these components. That'd be fantastic.


00:31:21.660 --> 00:31:23.860
Yeah, that'd be great.


00:31:23.860 --> 00:31:27.060
Well, I think it'd be fun with with everyone


00:31:27.460 --> 00:31:29.840
decking out their home offices these days,


00:31:29.840 --> 00:31:32.400
if you could do a little bit of magic light show


00:31:32.400 --> 00:31:35.160
while you're presenting or talking on the call,


00:31:35.160 --> 00:31:36.280
that would be really cool.


00:31:36.280 --> 00:31:37.880
- That'd be fantastic.


00:31:37.880 --> 00:31:41.120
Yeah, hey, Brett Cannon's out there in the live stream.


00:31:41.120 --> 00:31:42.960
Dan, you may have heard of this guy.


00:31:42.960 --> 00:31:47.960
Pablo Salgado has programmed his keyboard RGB lights


00:31:47.960 --> 00:31:53.160
to color code the build bot status for CPython.


00:31:53.160 --> 00:31:54.660
I don't know which library uses.


00:31:54.660 --> 00:31:55.500
That's awesome.


00:31:55.500 --> 00:31:57.180
So like it's green if everything's good,


00:31:57.180 --> 00:31:59.700
but it turns red if CI fails or something like that.


00:31:59.700 --> 00:32:00.540
Oh, that's awesome, Brett.


00:32:00.540 --> 00:32:01.500
Thanks for sharing.


00:32:01.500 --> 00:32:04.580
- That'd be cool.


00:32:04.580 --> 00:32:06.800
You know, I never really, I mean,


00:32:06.800 --> 00:32:09.740
when I first saw the LEDs under the keyboards,


00:32:09.740 --> 00:32:11.700
I thought, you know, yeah, gamers like it,


00:32:11.700 --> 00:32:14.900
but I don't think I would probably have a use for it.


00:32:14.900 --> 00:32:15.860
But now I'm jealous.


00:32:15.860 --> 00:32:18.700
I want to light up things on my keyboard.


00:32:18.700 --> 00:32:20.140
It'd be fun.


00:32:20.140 --> 00:32:22.000
- Yeah, especially if you could program them, right?


00:32:22.000 --> 00:32:23.700
Like this example here,


00:32:23.700 --> 00:32:28.480
My mouse sits here and pulsates and changes color,


00:32:28.480 --> 00:32:30.880
but because it's on a Mac, the software doesn't work


00:32:30.880 --> 00:32:31.880
and I can't do anything with it.


00:32:31.880 --> 00:32:34.160
So it's just annoys me there.


00:32:34.160 --> 00:32:36.760
It's a good mouse otherwise, but anyway.


00:32:36.760 --> 00:32:39.080
- So is it a Windows only thing or what?


00:32:39.080 --> 00:32:41.840
- No, the mouse is perfect on Mac,


00:32:41.840 --> 00:32:43.920
but the software that lets you customize it


00:32:43.920 --> 00:32:45.680
and do interesting things to the colors


00:32:45.680 --> 00:32:47.800
doesn't work on the Mac.


00:32:47.800 --> 00:32:49.240
- Lame.


00:32:49.240 --> 00:32:51.240
- Super lame, super lame.


00:32:51.240 --> 00:32:52.080
All right.


00:32:52.080 --> 00:32:55.720
What is not lame is this last thing that Dan has got here,


00:32:55.720 --> 00:32:57.840
'cause this thing has been blowing up on Twitter


00:32:57.840 --> 00:33:00.960
as all of a day old with like 2000 GitHub stars.


00:33:00.960 --> 00:33:02.680
And I was like, oh, this has got to be covered.


00:33:02.680 --> 00:33:04.520
And then Dan, you were on it.


00:33:04.520 --> 00:33:06.320
- Yeah, I just saw it yesterday and I was like,


00:33:06.320 --> 00:33:08.280
I have to talk about this.


00:33:08.280 --> 00:33:11.380
So I know that when I've built web apps in the past,


00:33:11.380 --> 00:33:14.240
one of the big frustrations I have is


00:33:14.240 --> 00:33:17.440
that when you wanna add something new to your database,


00:33:17.440 --> 00:33:19.320
you need to add it to the SQL queries,


00:33:19.320 --> 00:33:21.600
you need to add something to the backend code,


00:33:21.600 --> 00:33:26.480
you need to add a piece to the API that then returns


00:33:26.480 --> 00:33:28.160
that new object to users.


00:33:28.160 --> 00:33:30.000
And then in your client code, you need to consume it.


00:33:30.000 --> 00:33:31.760
And so there's all this repetition


00:33:31.760 --> 00:33:33.480
that you're doing across your web app


00:33:33.480 --> 00:33:36.720
every time you need to make a change to your data


00:33:36.720 --> 00:33:38.760
or add a new object.


00:33:38.760 --> 00:33:41.200
And that's very error prone as well.


00:33:41.200 --> 00:33:45.920
And so things like SQLAlchemy,


00:33:45.920 --> 00:33:50.040
you can use to write code that interacts with your database.


00:33:50.040 --> 00:33:52.800
And then things like FastAPI, you can use Pydantic


00:33:52.800 --> 00:33:57.800
to return models to your users, to your APIs.


00:33:57.800 --> 00:34:01.840
But then, now we had this thing


00:34:01.840 --> 00:34:06.480
where you have SQLAlchemy models and Pydantic models,


00:34:06.480 --> 00:34:08.960
and then you're translating back and forth between them.


00:34:08.960 --> 00:34:13.960
And so Sebastian Ramirez, who just released yesterday,


00:34:13.960 --> 00:34:18.960
this new SQL model library, which looks just awesome


00:34:18.960 --> 00:34:20.860
because it actually combines the schema


00:34:20.860 --> 00:34:24.900
for talking to the database and speaking to your API


00:34:24.900 --> 00:34:28.220
into one schema object that you write.


00:34:28.220 --> 00:34:32.960
So what's really cool about this is that,


00:34:32.960 --> 00:34:34.800
so the way you work with this


00:34:34.800 --> 00:34:36.400
is that you define your objects.


00:34:36.400 --> 00:34:39.280
For example, he's got in the GitHub repo,


00:34:39.280 --> 00:34:44.000
this hero class with an ID name, secret name, age,


00:34:44.000 --> 00:34:46.960
and it's got some of the SQLAlchemy type things


00:34:46.960 --> 00:34:51.000
like it's your primary key, the ID is optional,


00:34:51.000 --> 00:34:53.560
but it's defaults to non-primary key.


00:34:53.560 --> 00:34:54.520
So what's really cool about it,


00:34:54.520 --> 00:34:59.520
this class is both a SQLAlchemy model and a Bidantic model.


00:34:59.520 --> 00:35:01.880
I don't know how he did that.


00:35:01.880 --> 00:35:04.920
He said there's some magic that's going on behind the scenes.


00:35:04.920 --> 00:35:07.260
And so what's really cool is that you can use this


00:35:07.260 --> 00:35:09.540
to instantiate your database.


00:35:09.540 --> 00:35:12.900
So you've got this hero class,


00:35:12.900 --> 00:35:15.360
you can create objects in the database


00:35:15.360 --> 00:35:22.520
going hero1, hero2, hero3 equals hero bracket and pass the name, secret name, all the fields


00:35:22.520 --> 00:35:24.760
to the object.


00:35:24.760 --> 00:35:29.980
And you can also return those same objects.


00:35:29.980 --> 00:35:33.000
You can use that same hero class and use it in your FastAPI.


00:35:33.000 --> 00:35:39.200
So you can accept hero objects, you can return hero objects.


00:35:39.200 --> 00:35:42.880
And so that's one, you write that one schema and you use it in multiple places.


00:35:42.880 --> 00:35:48.880
Yeah, what you have on the screen here for FastAPI is response model equals the database entity,


00:35:48.880 --> 00:35:54.880
which that then drives the OpenAPI documentation in addition to just driving.


00:35:54.880 --> 00:36:01.880
Yeah, exactly. You got it right there. So you can go there and it's sort of end to end the same model, which I think is really great.


00:36:01.880 --> 00:36:09.880
Yeah. And so you can look at your in with FastAPI. If you go to slash docs, you get the swagger UI.


00:36:09.880 --> 00:36:17.080
UI. And so you can see that same schema with the ID name, secret name, age. And what's really cool


00:36:17.080 --> 00:36:22.920
about that is that it also has this generates the open API.json. And so you can use tools like


00:36:22.920 --> 00:36:28.120
OpenAPI generator to even generate client code in all the any different language that you're using,


00:36:28.120 --> 00:36:35.720
like Python, JavaScript, Lua. And so you can, if you just went back to that original hero class


00:36:35.720 --> 00:36:40.520
and added a new field, you could potentially have it show up in all different layers of


00:36:40.520 --> 00:36:41.520
your application.


00:36:41.520 --> 00:36:42.520
Right.


00:36:42.520 --> 00:36:48.080
Including the consuming clients, because they could regen off of the JSON schema, right?


00:36:48.080 --> 00:36:49.280
Yeah.


00:36:49.280 --> 00:36:50.640
So I think that's really cool.


00:36:50.640 --> 00:36:57.260
And one other really nice thing that Sebastian did here is that he really emphasized making


00:36:57.260 --> 00:37:03.080
sure that in the editors that you have a good experience with autocomplete, because in the


00:37:03.080 --> 00:37:09.320
past stuff like the Django ORM and the SQLAlchemy ORM, the editors have had to write custom


00:37:09.320 --> 00:37:15.720
code to be able to have a good autocomplete experience for that. And so Sebastian used


00:37:15.720 --> 00:37:21.640
type hints really well throughout the design of this so that as you're returning objects


00:37:21.640 --> 00:37:26.120
from the database, you actually get -- you can -- once you return that object from the


00:37:26.120 --> 00:37:31.000
database, you actually get autocomplete on it. I can show that here.


00:37:31.000 --> 00:37:37.260
Yeah, that's really cool because a lot of times you just get star star kwr. You know like oh, thanks


00:37:37.260 --> 00:37:40.640
Yeah, so I got this


00:37:40.640 --> 00:37:47.640
statement select hero where hero name equals hero name and then the object that returns I can go hero dot and then


00:37:47.640 --> 00:37:52.920
Put it at the very end of the line maybe or in the next line. Yeah


00:37:52.920 --> 00:37:57.440
Yeah, I can so I can access all the


00:37:57.440 --> 00:38:00.240
properties on the hero object


00:38:00.240 --> 00:38:03.620
One cool thing about how he did this,


00:38:03.620 --> 00:38:08.460
he used a proposal from Eric Trout,


00:38:08.460 --> 00:38:11.980
the author of PyRite called the Data Class Transform,


00:38:11.980 --> 00:38:16.980
that it's this proposal that basically you can annotate


00:38:16.980 --> 00:38:21.380
various objects to say that they behave like data classes.


00:38:21.380 --> 00:38:23.620
And so that's kind of the magic that allows


00:38:23.620 --> 00:38:27.740
some of this dynamic behavior to show up in type checkers.


00:38:27.740 --> 00:38:29.300
- I love it because so often you'll do


00:38:29.300 --> 00:38:31.400
SQLAlchemy query or something and what you get back,


00:38:31.400 --> 00:38:35.300
it's so many layers, it's lost what that type is.


00:38:35.300 --> 00:38:38.260
And just like, now I gotta like re annotate it again.


00:38:38.260 --> 00:38:39.500
- You gotta search for everything,


00:38:39.500 --> 00:38:40.860
look at all the different source code


00:38:40.860 --> 00:38:43.180
and my code bases, stuff like that.


00:38:43.180 --> 00:38:44.020
So this is really cool.


00:38:44.020 --> 00:38:46.180
- We've got some great comments in the chat.


00:38:46.180 --> 00:38:53.760
Here's one, I swear Sebastian spends as much time


00:38:53.760 --> 00:38:56.940
on his docs as he does his code, amazing talent.


00:38:56.940 --> 00:39:00.940
I got it. And we were talking about type hints and the editor experience as well.


00:39:00.940 --> 00:39:06.660
Sebastian does a great job with the onboarding experience as well as the


00:39:06.660 --> 00:39:08.540
youth, the developer experience.


00:39:08.540 --> 00:39:12.740
And a lot of large companies could pay attention to what this one person is doing,


00:39:12.740 --> 00:39:15.860
making it easy for people to pick up a new tool. It's amazing.


00:39:15.860 --> 00:39:22.020
Docs here. These are, this looks like a professional team wrote all this stuff.


00:39:22.300 --> 00:39:24.080
>> Yeah. >> This is incredible.


00:39:24.080 --> 00:39:27.520
>> Instead, one very productive guy.


00:39:27.520 --> 00:39:30.320
>> Then Brett, good question.


00:39:30.320 --> 00:39:32.280
I want to know how Sebastian manages to release


00:39:32.280 --> 00:39:35.140
a new very cool project every single year.


00:39:35.140 --> 00:39:38.260
No kidding, man. He has a powerhouse.


00:39:38.260 --> 00:39:41.320
He's changing how we do web development,


00:39:41.320 --> 00:39:44.320
and it's just one person.


00:39:44.320 --> 00:39:48.380
>> Yeah. I think I can speak to that just a little bit, by the way.


00:39:48.380 --> 00:39:52.260
If you look at the magic of FastAPI,


00:39:52.260 --> 00:39:54.700
you look at what's happening here.


00:39:54.700 --> 00:39:57.340
These are really nice things to work with,


00:39:57.340 --> 00:40:00.540
but they're not from the ground recreations


00:40:00.540 --> 00:40:02.160
of what they are.


00:40:02.160 --> 00:40:05.940
This takes Pydantic plus SQLAlchemy and makes it better.


00:40:05.940 --> 00:40:08.380
FastAPI takes Starlette and Pydantic


00:40:08.380 --> 00:40:09.460
and makes them better, right?


00:40:09.460 --> 00:40:11.940
It's like the recombining of things


00:40:11.940 --> 00:40:14.420
that are already really good into something better.


00:40:15.900 --> 00:40:18.300
- Yeah, and some cool things that come


00:40:18.300 --> 00:40:20.820
as a result of that repackaging.


00:40:20.820 --> 00:40:22.780
So according to Sebastian,


00:40:22.780 --> 00:40:25.500
this should support async database sessions out of the box


00:40:25.500 --> 00:40:28.060
because that's something that SQLAlchemy supports,


00:40:28.060 --> 00:40:30.700
Alembic migrations as well.


00:40:30.700 --> 00:40:32.660
And in theory, it should be possible to integrate


00:40:32.660 --> 00:40:37.580
with post-gists and TS vectors for doing geo stuff


00:40:37.580 --> 00:40:41.100
and full-text search with Postgres,


00:40:41.100 --> 00:40:42.820
but he says he hasn't tested it yet.


00:40:42.820 --> 00:40:43.940
- Yeah, I have no idea,


00:40:43.940 --> 00:40:46.140
but potentially async and await as well


00:40:46.140 --> 00:40:48.340
now that SQLAlchemy supports that.


00:40:48.340 --> 00:40:49.180
- Yep.


00:40:49.180 --> 00:40:50.000
- But again, this is a day old,


00:40:50.000 --> 00:40:52.220
so we haven't really had a chance to dig in it too much.


00:40:52.220 --> 00:40:54.060
I want to highlight just a couple more comments.


00:40:54.060 --> 00:40:55.380
Savannah on the live stream says,


00:40:55.380 --> 00:40:57.460
Sebastian's attention to developer experience


00:40:57.460 --> 00:40:58.300
is so awesome.


00:40:58.300 --> 00:40:59.120
Yeah, I agree.


00:40:59.120 --> 00:41:00.780
Keep it up, Sebastian.


00:41:00.780 --> 00:41:04.260
And Rehan says, it looks great for a toy case,


00:41:04.260 --> 00:41:06.780
but people make professional interior systems.


00:41:06.780 --> 00:41:08.740
Do they really want to share the same types


00:41:08.740 --> 00:41:12.540
between their database and their REST API?


00:41:12.540 --> 00:41:13.500
That's a good question.


00:41:13.500 --> 00:41:15.260
I was thinking about that as well.


00:41:15.260 --> 00:41:16.880
One of the challenges that you can run into


00:41:16.880 --> 00:41:18.140
when you just sort of say,


00:41:18.140 --> 00:41:21.460
well, here's my data model out onto the internet as JSON,


00:41:21.460 --> 00:41:22.920
and then especially taking it back


00:41:22.920 --> 00:41:25.480
is you can run into like situations


00:41:25.480 --> 00:41:27.480
where you overexpose information


00:41:27.480 --> 00:41:31.580
or you run into a mass assignment type of bugs


00:41:31.580 --> 00:41:35.860
where values get set or you didn't expect them to be set.


00:41:35.860 --> 00:41:39.020
So with Pydantic, you can do things like call,


00:41:39.020 --> 00:41:41.660
you have to call to JSON, but you can also,


00:41:41.660 --> 00:41:43.380
or to dict, I can't remember, I think to dict,


00:41:43.380 --> 00:41:47.320
but you explicitly opt in or opt out certain fields.


00:41:47.320 --> 00:41:50.660
So you could do things like that about bringing those in.


00:41:50.660 --> 00:41:55.240
So pretty neat, but yeah,


00:41:55.240 --> 00:41:57.320
you gotta be a little bit careful about that.


00:41:57.320 --> 00:41:58.840
But yeah, very cool stuff.


00:41:58.840 --> 00:42:02.080
- You don't want your password hashes on your user object.


00:42:02.080 --> 00:42:03.960
- Exactly, if you're gonna return your user,


00:42:03.960 --> 00:42:05.440
you don't necessarily wanna exactly return,


00:42:05.440 --> 00:42:07.840
say the password hash or God forbid,


00:42:07.840 --> 00:42:09.520
not just the straight password.


00:42:10.880 --> 00:42:14.200
- You're not hashing it, but that's a bigger problem.


00:42:14.200 --> 00:42:16.300
- Oh, I wanted to bring up one more thing


00:42:16.300 --> 00:42:21.300
is his choice of heroes in his example, love these.


00:42:21.300 --> 00:42:26.680
We've got dead pond, spider boy and rusty man, hilarious.


00:42:26.680 --> 00:42:31.040
- Love it, yeah, those are great.


00:42:31.040 --> 00:42:35.180
- Well, so those are our six items.


00:42:35.180 --> 00:42:40.320
Do we have any extras, got anything to share?


00:42:40.320 --> 00:42:43.000
Sometimes I have extra extra nine times here all about it.


00:42:43.000 --> 00:42:44.080
I got none this time.


00:42:44.080 --> 00:42:44.920
How about you?


00:42:44.920 --> 00:42:47.760
- Really? I've got like two.


00:42:47.760 --> 00:42:48.600
So,


00:42:48.600 --> 00:42:55.240
so first one I wanted to bring up was a really fun episode.


00:42:55.240 --> 00:42:58.440
People know I also do a podcast called testing code.


00:42:58.440 --> 00:43:01.920
Episode 163 does,


00:43:01.920 --> 00:43:04.960
it's a talk with the Stefan Bedul


00:43:04.960 --> 00:43:07.480
about pip install of local directory.


00:43:07.480 --> 00:43:09.200
And so if you're,


00:43:09.200 --> 00:43:14.600
If you're doing anything where you do the pip install the local directory,


00:43:14.600 --> 00:43:19.300
definitely check that out, or especially if you never knew that you could do that.


00:43:19.300 --> 00:43:21.300
It's a good episode.


00:43:21.300 --> 00:43:25.300
The other thing I wanted to bring up is


00:43:25.300 --> 00:43:29.300
it's been like five episodes since I plugged my book, but


00:43:29.300 --> 00:43:33.300
there's a... chapter 12 is up.


00:43:33.300 --> 00:43:38.800
So chapter 12, one of the things I got questions about for the first edition was


00:43:38.800 --> 00:43:44.440
It's the whole book is talking about testing packages, and there's a lot more in the Python world than just packages.


00:43:44.440 --> 00:43:46.840
So chapter 12 is a reaction to that.


00:43:46.840 --> 00:43:49.080
It's testing scripts and applications.


00:43:49.080 --> 00:43:55.360
So it's not a pivot. If you don't have a pivot installable package, you can still use pytest to test it in chapter 12


00:43:55.360 --> 00:43:58.320
directly addresses that. So I wanted to bring that up.


00:43:58.320 --> 00:43:59.880
Awesome.


00:43:59.880 --> 00:44:07.200
Alvaro out in the live stream says, how is the second edition testing going? Yeah, it looks like chapter 12 is coming along. Well done.


00:44:07.200 --> 00:44:09.200
You're basically done, Brian.


00:44:09.200 --> 00:44:10.200
You can go on vacation.


00:44:10.200 --> 00:44:13.200
Well, there were less than 10 chapters in the first book,


00:44:13.200 --> 00:44:15.200
but now I'm working on chapter 13,


00:44:15.200 --> 00:44:18.200
planning on 17 altogether.


00:44:18.200 --> 00:44:22.200
It's going to come out in hard copy early next year.


00:44:22.200 --> 00:44:25.200
Super.


00:44:25.200 --> 00:44:28.200
I have one extra.


00:44:28.200 --> 00:44:29.200
How about you, Dan?


00:44:29.200 --> 00:44:34.200
Yep. So, one cool library that I wanted to share is type4py.


00:44:34.200 --> 00:44:37.200
We've been talking about types a lot lately.


00:44:37.200 --> 00:44:40.040
Seems like it's a regular topic of conversation.


00:44:40.040 --> 00:44:44.320
And they can provide a lot of benefits to your code base


00:44:44.320 --> 00:44:47.760
and to text editors like VS Code or PyCharm.


00:44:47.760 --> 00:44:52.960
But what happens if you want to retrofit


00:44:52.960 --> 00:44:54.820
or add a bunch of types to a code base


00:44:54.820 --> 00:44:57.640
that's not typed already, that's a big daunting task.


00:44:57.640 --> 00:45:02.080
And so I came across this library shared amongst our team.


00:45:02.080 --> 00:45:04.680
And what I thought was really cool about it


00:45:04.680 --> 00:45:09.680
is that it's a state-of-the-art machine learning model


00:45:09.680 --> 00:45:11.080
for inferring types.


00:45:11.080 --> 00:45:14.200
So we've talked about before,


00:45:14.200 --> 00:45:15.760
hey, wouldn't it be cool if we could just go generate


00:45:15.760 --> 00:45:17.520
all the types for all the packages out there


00:45:17.520 --> 00:45:19.540
so that we could have great auto-complete on everything.


00:45:19.540 --> 00:45:21.720
But it turns out you can't because you can't do that


00:45:21.720 --> 00:45:23.020
until you actually run the code


00:45:23.020 --> 00:45:24.680
and have the objects to bind it to.


00:45:24.680 --> 00:45:27.920
And so this machine learning model


00:45:27.920 --> 00:45:31.240
is sort of the latest in a line of attempts


00:45:31.240 --> 00:45:33.780
from different researchers to create a good machine learning


00:45:33.780 --> 00:45:36.580
model for inferring types.


00:45:36.580 --> 00:45:39.760
What I like about it is not only is it


00:45:39.760 --> 00:45:43.940
sort of best in class in terms of its accuracy,


00:45:43.940 --> 00:45:47.200
is that the author of this machine learning model


00:45:47.200 --> 00:45:52.260
open sourced the training data set with 4.3 million type


00:45:52.260 --> 00:45:55.020
annotations in it, the training code.


00:45:55.020 --> 00:45:58.060
So you can go in and actually use--


00:45:58.060 --> 00:45:59.800
train this on your own code following


00:45:59.800 --> 00:46:02.200
some of these very simple commands to train the model


00:46:02.200 --> 00:46:04.880
and pre-process the data with your own code base.


00:46:04.880 --> 00:46:07.560
Open-sourced a VS Code extension,


00:46:07.560 --> 00:46:09.320
so you can actually have developers using it.


00:46:09.320 --> 00:46:12.040
It's not just some, hey, this is our results,


00:46:12.040 --> 00:46:13.440
QAB, go read the paper.


00:46:13.440 --> 00:46:15.520
It's actually something that you can use.


00:46:15.520 --> 00:46:21.180
And so if you're looking at trying to retrofit


00:46:21.180 --> 00:46:22.960
a bunch of types in your code base,


00:46:22.960 --> 00:46:24.660
this is something you might wanna try out.


00:46:24.660 --> 00:46:27.480
Just one sort of quick caveat


00:46:27.480 --> 00:46:29.720
that the sample VS Code extension


00:46:29.720 --> 00:46:31.380
uses the machine learning model


00:46:31.380 --> 00:46:33.520
that's hosted on type4py.com.


00:46:33.520 --> 00:46:36.040
And so if you're not working on an open source project,


00:46:36.040 --> 00:46:39.560
you probably want to fork the extension


00:46:39.560 --> 00:46:42.820
and stand up the machine learning model


00:46:42.820 --> 00:46:44.860
using the web server that he links to.


00:46:44.860 --> 00:46:48.320
- Yeah, that's a good bit of warning,


00:46:48.320 --> 00:46:49.620
but this looks super cool.


00:46:49.620 --> 00:46:52.960
It seems like one of those things


00:46:52.960 --> 00:46:55.520
you could do a first pass, retrofit it,


00:46:55.520 --> 00:46:59.240
and then go back and check it out, run mypy against it.


00:46:59.240 --> 00:47:02.520
You could even go to Pydantic and use the validate decorator


00:47:02.520 --> 00:47:05.840
and put that on all the things and then run your tests.


00:47:05.840 --> 00:47:08.400
The validate actually verifies the type annotations really


00:47:08.400 --> 00:47:10.720
match the runtime behavior.


00:47:10.720 --> 00:47:12.200
So yeah, a lot of neat things.


00:47:12.200 --> 00:47:18.840
Excellent.


00:47:18.840 --> 00:47:21.720
Brian, did you think that was funny?


00:47:21.720 --> 00:47:24.560
No, not funny at all.


00:47:24.560 --> 00:47:25.660
This might be funny.


00:47:25.660 --> 00:47:27.860
- We need something funny.


00:47:27.860 --> 00:47:30.500
- Yeah, so we've been doing a lot of geek and poke lately.


00:47:30.500 --> 00:47:32.960
And yeah, this is a really good one.


00:47:32.960 --> 00:47:36.560
So, you know, we talk about testing


00:47:36.560 --> 00:47:38.400
and we talk about continuous integration.


00:47:38.400 --> 00:47:41.440
If you wanna take that like to go from testing to CI


00:47:41.440 --> 00:47:45.180
to the next level, we're talking continuous delivery, right?


00:47:45.180 --> 00:47:46.920
I'm gonna get pushed to the production branch.


00:47:46.920 --> 00:47:48.200
That's gonna kick off the CI,


00:47:48.200 --> 00:47:50.480
which is gonna kick off a deployment.


00:47:50.480 --> 00:47:51.520
It's glorious, right?


00:47:51.520 --> 00:47:53.400
- Yeah.


00:47:53.400 --> 00:47:55.000
Well, we've got a cartoon around it.


00:47:55.000 --> 00:47:59.080
So there's this man and woman developer pair


00:47:59.080 --> 00:48:01.840
and they're just looking like perplexed at each other.


00:48:01.840 --> 00:48:06.300
For five days, I've been doing nothing else


00:48:06.300 --> 00:48:09.040
than trying to deploy this blinking application


00:48:09.040 --> 00:48:11.040
on our production environment.


00:48:11.040 --> 00:48:12.900
Title, continuous deployment.


00:48:12.900 --> 00:48:18.320
That's one way to interpret that term.


00:48:18.320 --> 00:48:19.640
- Literal.


00:48:19.640 --> 00:48:20.480
- Very literal.


00:48:22.640 --> 00:48:25.540
All right, well, hopefully that was more funny.


00:48:25.540 --> 00:48:28.980
Yeah, so I've got a not very good joke,


00:48:28.980 --> 00:48:30.680
but I thought it was funny anyway.


00:48:30.680 --> 00:48:36.180
It was shared to us, it was first from Carla,


00:48:36.180 --> 00:48:38.500
not a robot, she's a great handle,


00:48:38.500 --> 00:48:43.160
and told to us by Blue Fiddle Guy also.


00:48:43.160 --> 00:48:47.380
So, joke is, if a programmer gets an interview


00:48:47.380 --> 00:48:49.580
because of a recommendation from a friend,


00:48:49.580 --> 00:48:51.340
are they being passed by reference?


00:48:51.340 --> 00:48:53.180
(laughing)


00:48:53.180 --> 00:48:54.580
- Instead of value.


00:48:54.580 --> 00:48:55.420
- I love it.


00:48:55.420 --> 00:48:59.140
Definitely passed by reference.


00:48:59.140 --> 00:48:59.980
- Definitely.


00:48:59.980 --> 00:49:03.060
- Well, this has been fun.


00:49:03.060 --> 00:49:04.140
So thanks everybody.


00:49:04.140 --> 00:49:05.580
Thanks Dan for showing up.


00:49:05.580 --> 00:49:07.340
- Thanks for having me.


00:49:07.340 --> 00:49:08.220
- Yeah, thanks Brian.


00:49:08.220 --> 00:49:09.060
Thanks guys.


00:49:09.060 --> 00:49:10.180
Thanks everyone out there.


00:49:10.180 --> 00:49:11.340
- Bye.


00:49:11.340 --> 00:49:12.180
- Bye.

