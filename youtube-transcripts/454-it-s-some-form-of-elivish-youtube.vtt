WEBVTT

00:00:00.020 --> 00:00:07.960
<v Speaker 1>out of order hello hello hey brian hey um how's it going good and get your stuff all sorted and

00:00:07.960 --> 00:00:12.200
<v Speaker 1>i'll kick this off and while everyone's out there if if you're watching and you're not

00:00:12.880 --> 00:00:17.080
<v Speaker 1>subscribed to our youtube channel please do get subscribed we'd really appreciate it

00:00:17.720 --> 00:00:22.240
<v Speaker 1>that you come and participate in the live streams and that is step one step two is press the get

00:00:22.380 --> 00:00:27.279
<v Speaker 1>notified when we go live because even though we typically have a time we don't always have a time

00:00:27.360 --> 00:00:29.180
<v Speaker 1>So right now is the time, Brian. Are you ready?

00:00:29.600 --> 00:00:30.560
<v Speaker 2>Yes, I am ready.

00:00:30.860 --> 00:00:31.400
<v Speaker 1>Is it time?

00:00:32.299 --> 00:00:33.600
<v Speaker 1>Yeah, this week it is.

00:00:35.260 --> 00:00:36.800
<v Speaker 1>Awesome. All right, well, let's kick it off.

00:00:38.500 --> 00:00:41.860
<v Speaker 1>Now that I know what day it is, hello and welcome to Python Bytes,

00:00:42.040 --> 00:00:46.360
<v Speaker 1>where we deliver news and headlines directly to your earbuds.

00:00:46.800 --> 00:00:52.580
<v Speaker 1>This is episode 454, recorded October 20th, 2025.

00:00:53.060 --> 00:00:53.500
<v Speaker 1>I'm Michael Kennedy.

00:00:54.140 --> 00:00:54.940
<v Speaker 1>And I'm Brian Okken.

00:00:55.600 --> 00:00:57.320
<v Speaker 1>And this episode is brought to you by us.

00:00:57.670 --> 00:01:03.940
<v Speaker 1>We have increasingly more monotonically increasing number of ways in which you can support us

00:01:04.059 --> 00:01:08.380
<v Speaker 1>and things that Brian and I both feel like contribute a lot of value, right?

00:01:08.430 --> 00:01:13.320
<v Speaker 1>Your pytest book, your pytest courses, all the courses over at Talk Python,

00:01:14.980 --> 00:01:17.360
<v Speaker 1>foreshadowing some of that's coming later as well.

00:01:18.880 --> 00:01:22.200
<v Speaker 1>The Patreon supporters, like a lot of, pretty much all of these things.

00:01:22.420 --> 00:01:27.460
<v Speaker 1>We create them not just so that we have a job, but also because we think the world needs them.

00:01:28.010 --> 00:01:30.320
<v Speaker 1>So we appreciate when you all agree with that and support them.

00:01:31.320 --> 00:01:35.520
<v Speaker 1>You want to connect with us, connect on social media or on most of the social media.

00:01:35.610 --> 00:01:37.740
<v Speaker 1>There's the links at the top of the show notes.

00:01:38.050 --> 00:01:42.920
<v Speaker 1>Join us live right now, Monday, just after 10 o'clock.

00:01:43.160 --> 00:01:45.980
<v Speaker 1>Typically, it's when we start live streaming, although sometimes it varies.

00:01:46.360 --> 00:01:52.820
<v Speaker 1>So subscribe to the YouTube channel and get notified there to make sure you get all the notifications.

00:01:53.010 --> 00:01:56.640
<v Speaker 1>But typically we aim for Monday at 10 until further notice at least.

00:01:57.740 --> 00:01:58.980
<v Speaker 1>And finally, subscribe to the newsletter.

00:01:59.880 --> 00:02:06.220
<v Speaker 1>We're putting a lot of effort into sharing a really nice, rich, extra bits of information out to the newsletter there every week.

00:02:06.540 --> 00:02:08.740
<v Speaker 1>So appreciate that going out.

00:02:09.140 --> 00:02:11.660
<v Speaker 1>And I think it's been a, we put a lot of work into this, Brian.

00:02:11.660 --> 00:02:12.240
<v Speaker 1>I mean, a lot.

00:02:12.530 --> 00:02:13.780
<v Speaker 1>So I'm ready for a rest.

00:02:14.360 --> 00:02:15.200
<v Speaker 1>Take a little rest.

00:02:15.310 --> 00:02:15.620
<v Speaker 1>How about you?

00:02:16.300 --> 00:02:19.420
<v Speaker 2>Yeah, yeah, we should take a rest, maybe with a rest framework.

00:02:20.320 --> 00:02:22.220
<v Speaker 1>Because sometimes you need a whole framework to rest.

00:02:22.230 --> 00:02:22.700
<v Speaker 1>You're that tired.

00:02:24.120 --> 00:02:26.240
<v Speaker 2>Yeah, so let's pop this up.

00:02:26.880 --> 00:02:28.840
<v Speaker 2>So we've got an article.

00:02:29.360 --> 00:02:37.040
<v Speaker 2>This is sort of going backwards because there's a new package out that I want to talk about.

00:02:37.240 --> 00:02:41.120
<v Speaker 2>But it's based on this article from Emma Levitt.

00:02:41.720 --> 00:02:45.660
<v Speaker 2>why in 2025 do you still need a third-party app

00:02:45.750 --> 00:02:48.440
<v Speaker 2>to write a REST API with Django?

00:02:50.280 --> 00:02:52.360
<v Speaker 2>And third-party apps we're talking about

00:02:52.620 --> 00:02:57.080
<v Speaker 2>is usually Django REST Framework or Django Ninja.

00:02:57.780 --> 00:02:59.960
<v Speaker 2>Increasingly, more people are reaching for Django Ninja.

00:03:01.880 --> 00:03:03.460
<v Speaker 2>But both are great choices.

00:03:05.660 --> 00:03:10.199
<v Speaker 2>But still, do we have to have an extra REST Framework

00:03:10.220 --> 00:03:11.620
<v Speaker 2>with if you already have Django.

00:03:12.460 --> 00:03:15.560
<v Speaker 2>And basically the gist of this article is no,

00:03:15.610 --> 00:03:19.720
<v Speaker 2>you can create with all the built-ins.

00:03:20.590 --> 00:03:24.020
<v Speaker 2>And this is using the class-based views

00:03:24.840 --> 00:03:29.680
<v Speaker 2>to build a CRUD app, a CRUD API with Django.

00:03:30.040 --> 00:03:31.840
<v Speaker 2>And I actually kind of love this.

00:03:32.720 --> 00:03:34.300
<v Speaker 2>There's comments at the end.

00:03:35.050 --> 00:03:38.179
<v Speaker 2>Also, I kind of love the article talking about

00:03:38.220 --> 00:03:44.020
<v Speaker 2>doing everything that's necessary to it's not that much it's just not that much code to create

00:03:44.820 --> 00:03:52.940
<v Speaker 2>a json rest api through yeah through django without anything extra um and one of the down in the

00:03:53.220 --> 00:03:58.380
<v Speaker 2>comments uh some of the folks are like well why why would you do this um if you already have

00:03:58.500 --> 00:04:07.319
<v Speaker 2>these others and of course um it's that you can you you you also that you can but also that when you

00:04:08.040 --> 00:04:11.140
<v Speaker 2>when you understand how you could build it with just those here,

00:04:11.620 --> 00:04:17.320
<v Speaker 2>then it helps you understand how do you, the other tools like Django Ninja.

00:04:17.920 --> 00:04:20.900
<v Speaker 2>So the reason why I'm bringing this up now, this is this,

00:04:21.260 --> 00:04:25.960
<v Speaker 2>I think this article was from like March, April or something like that.

00:04:26.400 --> 00:04:33.440
<v Speaker 2>But, but she went ahead and DJ rest two is now available.

00:04:34.120 --> 00:04:36.460
<v Speaker 2>And that is if you scroll down to the bottom of it,

00:04:36.980 --> 00:04:43.140
<v Speaker 2>It is designed to be a minimal yet powerful REST framework,

00:04:44.160 --> 00:04:49.480
<v Speaker 2>but it's around this article of why do we need an external app for REST,

00:04:50.000 --> 00:04:55.780
<v Speaker 2>which is kind of funny that she created an external app for REST to demonstrate that.

00:04:56.960 --> 00:04:59.100
<v Speaker 2>But it's all the code from there.

00:04:59.320 --> 00:05:04.299
<v Speaker 2>And it's really great to be able to learn about REST frameworks

00:05:04.320 --> 00:05:06.860
<v Speaker 2>through trying something smaller scale.

00:05:07.380 --> 00:05:08.340
<v Speaker 1>So I like it.

00:05:08.860 --> 00:05:09.300
<v Speaker 1>Awesome.

00:05:10.280 --> 00:05:12.620
<v Speaker 2>Yeah, I'm with her on this.

00:05:12.870 --> 00:05:14.500
<v Speaker 1>Like, you don't necessarily need a framework.

00:05:14.600 --> 00:05:15.420
<v Speaker 1>I know there's great frameworks.

00:05:15.570 --> 00:05:20.140
<v Speaker 1>Like, there's FastAPI and others, and no shade on those things.

00:05:20.400 --> 00:05:25.800
<v Speaker 1>But if you already have a web app, you already have a framework that is serving web stuff.

00:05:25.870 --> 00:05:29.020
<v Speaker 1>And do you really want to say, well, now we're going to do a completely different one because

00:05:29.090 --> 00:05:30.860
<v Speaker 1>I need the response to be JSON?

00:05:32.740 --> 00:05:33.700
<v Speaker 3>Not necessarily, right?

00:05:33.900 --> 00:05:41.740
<v Speaker 1>And all the APIs that power the talk Python mobile app are written in Pyramid.

00:05:42.420 --> 00:05:45.200
<v Speaker 1>They're not using FastAPI because the whole app was already Pyramid.

00:05:45.200 --> 00:05:48.420
<v Speaker 1>The data, everything it needs to know about the users and the data and the course,

00:05:48.460 --> 00:05:49.200
<v Speaker 1>it's all in there.

00:05:49.880 --> 00:05:53.360
<v Speaker 1>And all I had to do was write a JSON serializer that would take a dictionary

00:05:53.580 --> 00:05:55.260
<v Speaker 1>and turn it into the right kind of JSON.

00:05:56.060 --> 00:05:56.980
<v Speaker 1>And literally, I have an API.

00:05:57.860 --> 00:06:00.120
<v Speaker 1>A lot of these frameworks, I don't like them.

00:06:00.660 --> 00:06:10.900
<v Speaker 1>I'm not knocking at any particular, but these add rest to your thing so often become what that means is an HTTP view of your database.

00:06:11.400 --> 00:06:17.340
<v Speaker 1>Like, here's how you do get, post, put, and delete to rows in this table.

00:06:17.940 --> 00:06:23.380
<v Speaker 1>And then, you know, it's like, okay, that's not the way I want to structure my, I don't want to just give my database to, like, the world.

00:06:23.480 --> 00:06:27.000
<v Speaker 1>I want to have control over actions that you take, like, authenticate.

00:06:27.200 --> 00:06:29.800
<v Speaker 1>And that's not, like, just access to the table, you know, it's weird.

00:06:30.580 --> 00:06:35.900
<v Speaker 1>so I don't know I find them not to be I know it's like well we absolutely have to reach for a rest

00:06:36.040 --> 00:06:42.800
<v Speaker 2>thing I don't know that's necessarily true it's also um it's also very true that you don't like

00:06:43.600 --> 00:06:50.320
<v Speaker 2>you don't really need a full framework if really you're the client um if I mean I would say I would

00:06:50.380 --> 00:06:57.199
<v Speaker 2>probably lean on others to to create a better API or better you know experience if I was um if that's

00:06:57.220 --> 00:07:02.180
<v Speaker 2>the product if the api is the product but if the product is your website and you're but you've got

00:07:02.180 --> 00:07:07.880
<v Speaker 2>a framework you're using django you're you've got a database there but you have something else that

00:07:07.960 --> 00:07:13.620
<v Speaker 2>wants to access that data you want to and so that you're you're presenting some extra endpoints

00:07:14.460 --> 00:07:20.200
<v Speaker 2>if you have just have a couple of endpoints that you need to to create to to get some data out or

00:07:20.320 --> 00:07:27.180
<v Speaker 2>push some data in you don't necessarily need the full-blown extra framework i think something

00:07:27.200 --> 00:07:28.480
<v Speaker 2>simple would work just fine.

00:07:28.800 --> 00:07:29.760
<v Speaker 2>Yeah, for sure.

00:07:31.880 --> 00:07:32.320
<v Speaker 2>Yeah.

00:07:34.060 --> 00:07:36.000
<v Speaker 2>Well, let's get out of the web a little bit

00:07:36.150 --> 00:07:38.320
<v Speaker 2>and maybe go to the command line.

00:07:39.960 --> 00:07:40.520
<v Speaker 1>I'm going to spend a lot.

00:07:40.660 --> 00:07:46.460
<v Speaker 1>I basically have a theme running through my picks,

00:07:46.720 --> 00:07:47.660
<v Speaker 1>my topics for the day.

00:07:50.040 --> 00:07:52.800
<v Speaker 1>So use git on the command line, I'm sure, Brian.

00:07:53.720 --> 00:07:54.000
<v Speaker 1>Yeah.

00:07:54.000 --> 00:07:56.740
<v Speaker 1>A little bit of git add dot, git push,

00:07:56.820 --> 00:08:01.440
<v Speaker 1>all those things I'm a big fan of using the GUI tools especially the tools built into your IDE

00:08:02.440 --> 00:08:08.120
<v Speaker 1>you know PyCharm and VS Code plus derivatives that means like 20 different things these days

00:08:09.620 --> 00:08:15.140
<v Speaker 1>they have really fantastic tools and I don't rarely I rarely feel the need like I got to be in

00:08:15.480 --> 00:08:22.520
<v Speaker 1>the command line to mess with it but I still do plenty that said where I haven't been doing a lot

00:08:22.480 --> 00:08:26.380
<v Speaker 1>of stuff in the command line is at the GitHub level.

00:08:27.040 --> 00:08:27.600
<v Speaker 3>Oh, right.

00:08:27.840 --> 00:08:27.880
<v Speaker 3>Yeah.

00:08:28.460 --> 00:08:28.580
<v Speaker 1>Right?

00:08:28.780 --> 00:08:30.440
<v Speaker 1>Like you're like, okay, I'm going to get push, get pull.

00:08:30.500 --> 00:08:31.860
<v Speaker 1>Oh, there's a PR.

00:08:31.880 --> 00:08:32.680
<v Speaker 1>I need to check that out.

00:08:32.820 --> 00:08:35.180
<v Speaker 1>What is the command again to check out that PR?

00:08:35.620 --> 00:08:36.060
<v Speaker 3>Mm-hmm.

00:08:37.860 --> 00:08:40.640
<v Speaker 1>Or I want to refer to an issue.

00:08:41.380 --> 00:08:41.979
<v Speaker 1>How do I do that?

00:08:42.060 --> 00:08:43.380
<v Speaker 1>Like what was the number of it again?

00:08:43.560 --> 00:08:45.320
<v Speaker 1>Because there's really cool things in Git.

00:08:45.340 --> 00:08:49.360
<v Speaker 1>You can say git commit, and for the message, you can say da-da-da-da-da,

00:08:50.240 --> 00:08:53.120
<v Speaker 1>fixes or resolves number one, two, three.

00:08:53.340 --> 00:08:56.420
<v Speaker 1>And that'll literally associate the commit with the issue one, two, three,

00:08:56.620 --> 00:08:58.980
<v Speaker 1>and close it when you push it.

00:08:59.360 --> 00:09:02.240
<v Speaker 2>Which sometimes surprises me, but yeah, it's good to know.

00:09:02.340 --> 00:09:06.060
<v Speaker 1>Yeah. I've accidentally put a issue in a PR,

00:09:06.180 --> 00:09:08.820
<v Speaker 1>but then close the PR and it's closed issue. I'm like, no, no, no.

00:09:09.060 --> 00:09:11.980
<v Speaker 1>That's actually, we're not done yet. Hold on.

00:09:12.240 --> 00:09:15.860
<v Speaker 2>Look, doesn't quite resolve blah. Okay. Whoops.

00:09:16.300 --> 00:09:19.900
<v Speaker 1>Yeah. Then it actually closes it. You got to reopen it. Whoopsie. Anyway,

00:09:20.340 --> 00:09:26.720
<v Speaker 1>So what I want to talk about today is the GitHub CLI.

00:09:27.400 --> 00:09:29.060
<v Speaker 1>So I don't know how long this has been around.

00:09:30.860 --> 00:09:33.080
<v Speaker 1>Well, presumably, but I think it's pretty new.

00:09:33.680 --> 00:09:39.520
<v Speaker 1>And so the idea is you can ask for status of PRs, or you can check out.

00:09:39.980 --> 00:09:40.740
<v Speaker 1>Like this one's really nice.

00:09:41.080 --> 00:09:43.980
<v Speaker 1>GH PR checkout 12.

00:09:44.680 --> 00:09:44.940
<v Speaker 1>That's it.

00:09:45.920 --> 00:09:46.640
<v Speaker 1>That's all you got to do.

00:09:47.140 --> 00:09:48.240
<v Speaker 1>And it's figured out the branches.

00:09:48.620 --> 00:09:49.520
<v Speaker 1>It's pulled it.

00:09:49.700 --> 00:09:51.180
<v Speaker 1>checked out the right one, right?

00:09:51.340 --> 00:09:52.240
<v Speaker 1>That's really cool, isn't it?

00:09:53.080 --> 00:09:53.540
<v Speaker 1>Oh, yeah.

00:09:54.060 --> 00:09:56.020
<v Speaker 1>Yeah, so to get a sense of what's possible--

00:09:56.020 --> 00:09:58.800
<v Speaker 1>when I saw this, I'm like, I think this will be cool, but why?

00:09:59.939 --> 00:10:01.060
<v Speaker 1>So look at the manual.

00:10:01.200 --> 00:10:03.160
<v Speaker 1>And the manual has example usages.

00:10:03.920 --> 00:10:05.660
<v Speaker 1>That's how I would start to look.

00:10:05.820 --> 00:10:08.900
<v Speaker 1>So it says, I could check out a pull request locally,

00:10:09.060 --> 00:10:10.180
<v Speaker 1>and it's the one that I just said.

00:10:10.660 --> 00:10:10.760
<v Speaker 1>Boom.

00:10:11.560 --> 00:10:11.620
<v Speaker 1>Right?

00:10:12.160 --> 00:10:12.700
<v Speaker 1>Pretty neat.

00:10:14.519 --> 00:10:15.880
<v Speaker 1>You can do it by branch name.

00:10:16.540 --> 00:10:21.120
<v Speaker 1>You can clone a repository with just the owner and repo.

00:10:21.370 --> 00:10:27.180
<v Speaker 1>So you could say ghrepo clone, Mike C. Kennedy slash

00:10:28.000 --> 00:10:30.420
<v Speaker 1>Jinja dash partials, or whatever.

00:10:31.030 --> 00:10:32.020
<v Speaker 1>So you don't have to know the whole URL.

00:10:32.070 --> 00:10:33.680
<v Speaker 1>It's not that huge of a thing, but it's kind of nice.

00:10:34.500 --> 00:10:37.560
<v Speaker 1>You can also clone it as if you were doing git clone,

00:10:37.700 --> 00:10:41.320
<v Speaker 1>but you like to type gh space repo instead of git.

00:10:41.820 --> 00:10:42.160
<v Speaker 1>I don't know.

00:10:43.640 --> 00:10:48.420
<v Speaker 1>You can create PRs from a branch, which is pretty cool.

00:10:49.560 --> 00:10:53.500
<v Speaker 1>And it just asks you, what's the title, what's the body, and so on.

00:10:55.100 --> 00:10:57.620
<v Speaker 1>You can open up the browser, like take me to GitHub.

00:10:59.080 --> 00:11:00.140
<v Speaker 1>You can mess with forks.

00:11:00.870 --> 00:11:01.640
<v Speaker 1>What else can you do?

00:11:02.400 --> 00:11:05.120
<v Speaker 1>You can see issues like GitHub PR list,

00:11:05.460 --> 00:11:09.140
<v Speaker 1>and it'll show you whether they're open, who they're associated with.

00:11:09.300 --> 00:11:10.080
<v Speaker 1>Same thing for issues.

00:11:10.920 --> 00:11:14.000
<v Speaker 1>It even puts the tag in parentheses, parenthetically tags it.

00:11:14.000 --> 00:11:14.400
<v Speaker 1>I love it.

00:11:15.320 --> 00:11:16.600
<v Speaker 1>Anyway, I think this is kind of handy.

00:11:16.760 --> 00:11:17.120
<v Speaker 1>What do you think?

00:11:17.899 --> 00:11:20.860
<v Speaker 2>Yeah, you can do releases too, right?

00:11:21.060 --> 00:11:22.640
<v Speaker 2>Did you already comment on that?

00:11:22.860 --> 00:11:23.840
<v Speaker 1>I have not commented on that.

00:11:25.240 --> 00:11:27.700
<v Speaker 2>Because that's often the thing that I need to,

00:11:28.120 --> 00:11:29.860
<v Speaker 2>like I've got everything all automated,

00:11:30.600 --> 00:11:34.440
<v Speaker 2>except for I still go over to GitHub itself

00:11:35.720 --> 00:11:37.840
<v Speaker 2>to create a release item or release.

00:11:38.540 --> 00:11:39.160
<v Speaker 1>Yeah, I do too.

00:11:39.900 --> 00:11:42.360
<v Speaker 1>So being able to do that locally, that's pretty cool.

00:11:43.160 --> 00:11:45.840
<v Speaker 1>I've got the generation of the release notes automated

00:11:46.360 --> 00:11:48.140
<v Speaker 1>and the tagging of the branch automated,

00:11:48.360 --> 00:11:49.960
<v Speaker 1>but I still can't release it automatically.

00:11:50.400 --> 00:11:50.780
<v Speaker 1>You know what I mean?

00:11:52.460 --> 00:11:55.280
<v Speaker 1>Now you can at least do it on the command line.

00:11:55.680 --> 00:11:56.780
<v Speaker 1>A little bit more? That's awesome.

00:11:57.400 --> 00:11:59.900
<v Speaker 1>Anyway, check this out if you're a CLI person.

00:12:02.100 --> 00:12:03.700
<v Speaker 1>GH, your new command.

00:12:05.820 --> 00:12:09.199
<v Speaker 2>Yeah, so go figure that you're the command line person today

00:12:09.220 --> 00:12:10.380
<v Speaker 2>I'm the web person.

00:12:11.660 --> 00:12:15.920
<v Speaker 2>So we're going to hop back over the web and talk about web scraping.

00:12:16.480 --> 00:12:20.320
<v Speaker 2>So and web scraping is, you know, not evil.

00:12:21.210 --> 00:12:23.900
<v Speaker 2>Sometimes it's if, especially if there's no API,

00:12:24.720 --> 00:12:26.780
<v Speaker 2>it might be the only way to get some data from something.

00:12:28.660 --> 00:12:32.020
<v Speaker 2>So there's a, there's a project that I found out on Reddit.

00:12:33.400 --> 00:12:37.020
<v Speaker 2>It called can I scrape, which is sort of a fun name.

00:12:38.020 --> 00:12:50.480
<v Speaker 2>And it basically analyzes the website's anti-bot protections to let you know whether or not you should even try to build a scraper for it or how many roadblocks you're going to run into.

00:12:52.300 --> 00:13:00.600
<v Speaker 2>And also, I think it's sort of, I don't know, it seems like kind of a nice thing to do instead of to check all the rules out and stuff.

00:13:01.200 --> 00:13:05.620
<v Speaker 2>So it looks for protections like, I don't know what WAF is,

00:13:05.900 --> 00:13:09.520
<v Speaker 2>but captures and rate limits, honeypots.

00:13:11.280 --> 00:13:15.520
<v Speaker 2>And then it rates it a difficulty score from 0 to 10, easy to hard,

00:13:16.260 --> 00:13:21.100
<v Speaker 2>and specific recommendations on what tools or proxies you'll need

00:13:22.100 --> 00:13:24.540
<v Speaker 2>and the estimated complexity to build it.

00:13:25.980 --> 00:13:29.779
<v Speaker 2>Also would be a decent thing to use on your own stuff

00:13:29.800 --> 00:13:33.660
<v Speaker 2>If you are intending somebody, if you just tell somebody,

00:13:33.770 --> 00:13:36.200
<v Speaker 2>oh, I don't have an API for that, but go scrape the data,

00:13:37.440 --> 00:13:40.360
<v Speaker 2>what kind of a job are you asking them to do?

00:13:41.520 --> 00:13:45.480
<v Speaker 2>And I was like, I didn't see right away a comment on the robots,

00:13:46.140 --> 00:13:49.100
<v Speaker 2>but looking down through it, what it analyzes,

00:13:49.270 --> 00:13:52.260
<v Speaker 2>it does check the robots.txt to make sure that you can.

00:13:52.590 --> 00:13:56.820
<v Speaker 2>And that's one of the things I want to be careful of somebody's,

00:13:57.660 --> 00:13:59.980
<v Speaker 2>what they say you should do and not do with their website.

00:14:00.340 --> 00:14:01.900
<v Speaker 2>So that's cool.

00:14:02.879 --> 00:14:04.800
<v Speaker 2>And anyway, I just thought it was nice.

00:14:05.220 --> 00:14:09.860
<v Speaker 2>There's an interesting discussion on the link to the Reddit discretion as well.

00:14:11.480 --> 00:14:16.520
<v Speaker 2>Just a target audience of hobbyists, but also just like data people.

00:14:16.860 --> 00:14:20.480
<v Speaker 2>Sometimes there's data that's available on the web that, like I said,

00:14:20.620 --> 00:14:24.120
<v Speaker 2>no, there's no REST API yet for it, or there won't be.

00:14:24.940 --> 00:14:26.000
<v Speaker 2>But yeah, anyway.

00:14:26.500 --> 00:14:27.260
<v Speaker 1>Yeah, I love it.

00:14:27.880 --> 00:14:30.760
<v Speaker 1>very interesting this whole web scraping thing is getting more and more

00:14:32.080 --> 00:14:37.800
<v Speaker 1>contentious with AI training and and all of that but yeah it's good to be a good

00:14:38.020 --> 00:14:42.760
<v Speaker 2>citizen of the web yeah and also like maybe I'd possibly use some of

00:14:42.760 --> 00:14:45.980
<v Speaker 2>these to check your own if you want to lock it down if you really want to make

00:14:47.300 --> 00:14:51.800
<v Speaker 2>if you want to make scraping a real pain in the butt for people looking at your

00:14:51.720 --> 00:14:57.940
<v Speaker 2>website, you can use this to try to make your score as close to 10 as possible.

00:14:59.819 --> 00:15:00.220
<v Speaker 2>Exactly.

00:15:00.800 --> 00:15:00.920
<v Speaker 2>Exactly.

00:15:01.340 --> 00:15:01.540
<v Speaker 1>All right.

00:15:03.319 --> 00:15:04.600
<v Speaker 1>That's not what I want to talk about.

00:15:04.800 --> 00:15:06.160
<v Speaker 1>That's what I want to talk about next.

00:15:07.980 --> 00:15:12.120
<v Speaker 1>So I want to talk about Git, a totally different tool, though.

00:15:12.120 --> 00:15:13.560
<v Speaker 1>This is completely unrelated to the other one.

00:15:14.260 --> 00:15:14.360
<v Speaker 1>Okay.

00:15:14.560 --> 00:15:17.440
<v Speaker 1>So I launched this CLI tool.

00:15:17.680 --> 00:15:25.320
<v Speaker 1>It's on PyPI, but primarily is intended to be used as a CLI type of thing,

00:15:25.420 --> 00:15:29.400
<v Speaker 1>like rough, not to be built upon, but to be run, you know what I mean?

00:15:29.520 --> 00:15:31.100
<v Speaker 1>So you can uv tool install it.

00:15:31.880 --> 00:15:37.120
<v Speaker 1>And the idea is, I called it Giddyup, G-I-T-T-Y,

00:15:37.540 --> 00:15:42.760
<v Speaker 1>for updating a whole directory tree of GitHub repositories.

00:15:44.040 --> 00:15:46.100
<v Speaker 1>I may have talked about this before.

00:15:46.220 --> 00:15:47.860
<v Speaker 1>something I kind of built in passing.

00:15:48.920 --> 00:15:54.720
<v Speaker 1>And then last week, I decided I'm creating a new course,

00:15:55.860 --> 00:15:57.420
<v Speaker 1>Agentic AI Programming in Python.

00:15:57.620 --> 00:15:58.160
<v Speaker 1>How about that?

00:15:59.160 --> 00:16:00.520
<v Speaker 1>And I'm like, let me think of something

00:16:00.540 --> 00:16:03.580
<v Speaker 1>I can try to take that I know is a cool idea that

00:16:03.680 --> 00:16:07.820
<v Speaker 1>would seem plausible, but really just make it a super nice app,

00:16:08.240 --> 00:16:10.860
<v Speaker 1>add a bunch of features and so on.

00:16:11.340 --> 00:16:12.860
<v Speaker 1>So I took that little utility I had,

00:16:12.920 --> 00:16:16.180
<v Speaker 1>and I spent a lot of time with Cloud Sonnet

00:16:16.820 --> 00:16:18.300
<v Speaker 1>Giddyup is the output.

00:16:20.920 --> 00:16:22.920
<v Speaker 1>So it says, never forget to pull again.

00:16:23.260 --> 00:16:25.800
<v Speaker 1>Automatically discover and update all your GitHub repositories in one command.

00:16:26.000 --> 00:16:27.060
<v Speaker 1>So here's the thing.

00:16:27.160 --> 00:16:29.560
<v Speaker 1>I've got three computers, one of them is a laptop,

00:16:30.600 --> 00:16:32.700
<v Speaker 1>and they all have a bunch of GitHub repositories,

00:16:32.880 --> 00:16:34.540
<v Speaker 1>like hundreds of GitHub repositories.

00:16:35.720 --> 00:16:36.580
<v Speaker 1>And it drives me crazy.

00:16:36.680 --> 00:16:39.200
<v Speaker 1>I'll go to some older one I haven't worked with for a while.

00:16:39.560 --> 00:16:41.100
<v Speaker 1>I'm like, I don't think there's been any change to this.

00:16:41.160 --> 00:16:42.060
<v Speaker 1>And I'll start messing with it.

00:16:42.160 --> 00:16:43.180
<v Speaker 1>Then I'll try to push it.

00:16:43.180 --> 00:16:44.680
<v Speaker 1>I'll go, please pull your changes first.

00:16:44.840 --> 00:16:45.460
<v Speaker 1>I'm like, uh-oh.

00:16:47.040 --> 00:16:50.220
<v Speaker 1>Uh-oh, that's not good, especially if it's something to do with the courses

00:16:50.410 --> 00:16:53.320
<v Speaker 1>where it might be a PowerPoint that cannot be merged.

00:16:53.940 --> 00:16:54.300
<v Speaker 1>You know what I mean?

00:16:54.420 --> 00:16:56.100
<v Speaker 1>You're like, oh, no, this is real bad.

00:16:57.000 --> 00:16:58.000
<v Speaker 1>But it's out of date, right?

00:16:58.530 --> 00:17:00.140
<v Speaker 1>And so I created this thing so I can just,

00:17:00.340 --> 00:17:03.100
<v Speaker 1>especially before I grab my laptop and head off to the coffee shop,

00:17:03.220 --> 00:17:06.720
<v Speaker 1>I can just go into part of my GitHub repos and just say Giddy Up.

00:17:07.560 --> 00:17:11.880
<v Speaker 1>And it goes through in parallel, and it just looks at all the repositories.

00:17:12.699 --> 00:17:15.439
<v Speaker 1>Does it get pull on all the ones that don't have anything checked out?

00:17:15.560 --> 00:17:17.120
<v Speaker 1>And the ones that are not committed yet,

00:17:17.170 --> 00:17:18.560
<v Speaker 1>say, hey, I don't want to mess with this one.

00:17:18.589 --> 00:17:20.980
<v Speaker 1>It has these three files unchanged and so on.

00:17:21.740 --> 00:17:23.199
<v Speaker 1>So it's just a nice little utility

00:17:23.420 --> 00:17:25.819
<v Speaker 1>people can run to update all their code.

00:17:25.850 --> 00:17:27.699
<v Speaker 1>I'll see if I can find a little output down here.

00:17:28.220 --> 00:17:29.140
<v Speaker 1>It's got a ton of features.

00:17:29.340 --> 00:17:32.160
<v Speaker 1>But I can say, update this thing.

00:17:32.270 --> 00:17:35.060
<v Speaker 1>And it traverses hierarchically through all

00:17:35.240 --> 00:17:36.520
<v Speaker 1>the GitHub repositories.

00:17:36.590 --> 00:17:37.560
<v Speaker 1>It says, these are up to date.

00:17:37.740 --> 00:17:39.580
<v Speaker 1>I actually pulled a couple of commits for this one.

00:17:40.180 --> 00:17:41.160
<v Speaker 1>This one had an error.

00:17:41.230 --> 00:17:43.200
<v Speaker 1>And it just gives you-- basically gets

00:17:43.220 --> 00:17:48.040
<v Speaker 1>all of your GitHub repositories as much in sync across all the branches as much as possible

00:17:48.400 --> 00:17:49.120
<v Speaker 1>without breaking anything.

00:17:50.080 --> 00:17:50.520
<v Speaker 1>Oh, cool.

00:17:51.180 --> 00:17:51.240
<v Speaker 1>Yeah.

00:17:51.400 --> 00:17:54.320
<v Speaker 1>So anyway, I put that out there for you.

00:17:54.360 --> 00:17:56.160
<v Speaker 1>I think people might like it.

00:17:56.180 --> 00:18:02.260
<v Speaker 1>I just put it out there two days or three days ago, and it's already got some stars and forks,

00:18:02.280 --> 00:18:05.500
<v Speaker 1>and I haven't announced it at all whatsoever, not even on social media.

00:18:05.740 --> 00:18:08.200
<v Speaker 1>So people found it and started.

00:18:08.380 --> 00:18:08.580
<v Speaker 1>That's cool.

00:18:09.400 --> 00:18:09.560
<v Speaker 1>Yeah.

00:18:10.140 --> 00:18:10.220
<v Speaker 1>Nice.

00:18:11.000 --> 00:18:11.240
<v Speaker 1>All right.

00:18:11.400 --> 00:18:12.040
<v Speaker 1>So GittyUp.

00:18:12.940 --> 00:18:17.460
<v Speaker 2>I have a feeling that maybe people watch your repo a little bit.

00:18:18.060 --> 00:18:19.300
<v Speaker 1>I think that's what it is.

00:18:20.460 --> 00:18:25.400
<v Speaker 1>To be honest, I am a super fan of just clicking on the GitHub logo

00:18:25.740 --> 00:18:28.060
<v Speaker 1>and just looking at what's flowing by.

00:18:28.320 --> 00:18:29.880
<v Speaker 1>I'm starting to follow more and more people,

00:18:30.500 --> 00:18:31.680
<v Speaker 3>and I appreciate people following me,

00:18:32.780 --> 00:18:36.120
<v Speaker 1>that that's a really nice source of just, hey, what's interesting?

00:18:36.680 --> 00:18:39.760
<v Speaker 1>Because if people you follow star something, that shows up.

00:18:39.840 --> 00:18:43.620
<v Speaker 1>be like, oh, you know, this person found that interesting enough to star it.

00:18:44.150 --> 00:18:46.080
<v Speaker 1>And I definitely respect what that person's doing.

00:18:46.430 --> 00:18:47.320
<v Speaker 1>Let me go check this out.

00:18:47.460 --> 00:18:48.240
<v Speaker 1>That does look interesting.

00:18:48.460 --> 00:18:50.480
<v Speaker 1>Like that's, I'm sure that's how people found it.

00:18:51.480 --> 00:18:51.700
<v Speaker 2>Okay.

00:18:52.520 --> 00:18:52.580
<v Speaker 2>Cool.

00:18:53.020 --> 00:18:53.460
<v Speaker 2>Cool.

00:18:55.200 --> 00:19:00.240
<v Speaker 2>Well, I want to bring up something that we've been, I've spent, I apparently spend a lot

00:19:00.240 --> 00:19:01.120
<v Speaker 2>of time thinking about.

00:19:01.780 --> 00:19:03.860
<v Speaker 2>So we're done with our normal stuff, right?

00:19:04.160 --> 00:19:06.420
<v Speaker 2>So we are moving on to extras.

00:19:07.130 --> 00:19:08.340
<v Speaker 2>Do you want to do your extras first?

00:19:08.600 --> 00:19:09.440
<v Speaker 1>Or sure.

00:19:09.660 --> 00:19:10.700
<v Speaker 2>I'll be quick about mine.

00:19:10.840 --> 00:19:14.000
<v Speaker 1>Okay, so let me close this off.

00:19:14.040 --> 00:19:15.920
<v Speaker 1>Yeah, check out that Agent.gai programming course.

00:19:16.060 --> 00:19:16.900
<v Speaker 1>It's coming out this week.

00:19:18.519 --> 00:19:21.480
<v Speaker 1>But people listened, and I don't know if they actually listened to us.

00:19:21.480 --> 00:19:23.500
<v Speaker 1>I think they listened to other people with the same complaint.

00:19:24.080 --> 00:19:27.260
<v Speaker 1>But remember how last week on PyDay I said,

00:19:28.260 --> 00:19:32.120
<v Speaker 1>great, but uv loop doesn't work with Python 3.14?

00:19:33.880 --> 00:19:36.020
<v Speaker 1>Well, I'm so happy to tell you as of four days ago,

00:19:36.540 --> 00:19:39.460
<v Speaker 1>UV loop is back, baby, and we can use it again.

00:19:40.080 --> 00:19:42.800
<v Speaker 1>which mostly is awesome because I don't want to go change a bunch of projects

00:19:43.000 --> 00:19:46.880
<v Speaker 1>that were just fine, but if I were to swap out the foundation running them

00:19:47.390 --> 00:19:50.360
<v Speaker 1>to 3.14, they wouldn't run anymore, so now it's back.

00:19:50.390 --> 00:19:52.660
<v Speaker 1>So there's a release for that.

00:19:53.120 --> 00:19:57.700
<v Speaker 1>So uv loop, while it was gone from us for a little bit, it's back.

00:19:58.280 --> 00:20:01.680
<v Speaker 1>And remember how I said I wish I knew who created PyPI Plus

00:20:01.790 --> 00:20:04.420
<v Speaker 1>and how neat it was because it has just these few little gotchas

00:20:04.580 --> 00:20:06.400
<v Speaker 3>that I would love to polish it.

00:20:07.780 --> 00:20:10.520
<v Speaker 1>Well, they sent over a message and said,

00:20:10.700 --> 00:20:12.460
<v Speaker 1>thank you so much for a feature in PyPI Plus,

00:20:13.220 --> 00:20:14.600
<v Speaker 1>and I'm working on the bugs that you found.

00:20:16.780 --> 00:20:17.960
<v Speaker 3>I don't know how they heard that we were,

00:20:18.080 --> 00:20:18.960
<v Speaker 1>maybe they're a show listener,

00:20:19.100 --> 00:20:20.880
<v Speaker 1>someone they know is a listener of the show.

00:20:21.500 --> 00:20:22.100
<v Speaker 1>But yeah, look at this.

00:20:22.200 --> 00:20:24.120
<v Speaker 1>I can search for something with a dash,

00:20:24.200 --> 00:20:25.640
<v Speaker 1>and I get the lowercase and vice versa.

00:20:26.420 --> 00:20:26.840
<v Speaker 1>Oh, cool.

00:20:28.460 --> 00:20:32.580
<v Speaker 2>But also, there's some people

00:20:32.780 --> 00:20:34.540
<v Speaker 2>that maybe don't have a Python podcast

00:20:35.640 --> 00:20:36.660
<v Speaker 2>to complain about things.

00:20:38.820 --> 00:20:39.780
<v Speaker 2>is there

00:20:40.080 --> 00:20:41.580
<v Speaker 2>like a about us

00:20:41.660 --> 00:20:42.960
<v Speaker 1>or who are we

00:20:43.300 --> 00:20:44.960
<v Speaker 1>I believe I put it in

00:20:45.920 --> 00:20:47.400
<v Speaker 1>the best way would be

00:20:47.900 --> 00:20:49.160
<v Speaker 1>a Reddit I believe so

00:20:52.440 --> 00:20:53.280
<v Speaker 1>Royal Wizard

00:20:53.980 --> 00:20:55.380
<v Speaker 1>is the one who they initially

00:20:55.660 --> 00:20:57.340
<v Speaker 1>announced it on Reddit and so on

00:20:57.440 --> 00:20:59.560
<v Speaker 3>so you could and they seem to be talking

00:20:59.760 --> 00:21:00.140
<v Speaker 1>about the

00:21:02.520 --> 00:21:03.120
<v Speaker 1>the changes

00:21:03.440 --> 00:21:04.840
<v Speaker 1>and the features over on

00:21:05.320 --> 00:21:06.760
<v Speaker 1>r slash python

00:21:07.040 --> 00:21:08.420
<v Speaker 1>So that's probably the best way.

00:21:09.000 --> 00:21:09.300
<v Speaker 2>Okay.

00:21:09.800 --> 00:21:10.240
<v Speaker 1>Yeah, cool.

00:21:11.000 --> 00:21:14.940
<v Speaker 1>And then finally, I told you about my post,

00:21:15.900 --> 00:21:18.480
<v Speaker 1>Show Me Your LS, which looked like Show Me Your Is

00:21:19.220 --> 00:21:20.280
<v Speaker 3>because of the fonts.

00:21:21.000 --> 00:21:22.720
<v Speaker 1>Well, people sent some feedback,

00:21:23.160 --> 00:21:24.540
<v Speaker 1>and I just wanted to share one

00:21:24.740 --> 00:21:26.460
<v Speaker 1>because this is a common theme over and over.

00:21:26.800 --> 00:21:28.940
<v Speaker 1>Thomas Svensson said,

00:21:29.540 --> 00:21:31.100
<v Speaker 1>Hey, I'm currently using New Shell,

00:21:31.260 --> 00:21:32.540
<v Speaker 1>which for some reason I read as a nutshell

00:21:32.680 --> 00:21:33.940
<v Speaker 1>and went on about talking about it,

00:21:34.140 --> 00:21:35.200
<v Speaker 1>that stuff that was the thing.

00:21:35.340 --> 00:21:38.120
<v Speaker 1>It said, hey, I'm currently using and exploring New Shell,

00:21:38.760 --> 00:21:41.220
<v Speaker 1>and its LS is something else clever.

00:21:43.680 --> 00:21:46.820
<v Speaker 1>So you can just kind of do almost query syntax

00:21:47.260 --> 00:21:52.300
<v Speaker 1>against things like LS, structured data, PS, JSON, et cetera.

00:21:52.490 --> 00:21:53.360
<v Speaker 1>So, like, look at this.

00:21:53.470 --> 00:21:54.400
<v Speaker 1>This is crazy, right?

00:21:55.220 --> 00:21:55.420
<v Speaker 2>Yeah.

00:21:55.760 --> 00:22:00.840
<v Speaker 1>And following on, found out today that New Shell is using pollers,

00:22:00.870 --> 00:22:03.820
<v Speaker 1>and that plugins can be written in Python.

00:22:04.620 --> 00:22:05.880
<v Speaker 1>So even cooler.

00:22:06.360 --> 00:22:07.620
<v Speaker 1>I'm not doing anything with New Shell.

00:22:08.320 --> 00:22:09.620
<v Speaker 1>I literally had never heard of it.

00:22:09.920 --> 00:22:10.520
<v Speaker 1>It's that new.

00:22:11.160 --> 00:22:11.540
<v Speaker 1>No, I don't know.

00:22:11.840 --> 00:22:13.640
<v Speaker 1>I hadn't heard of it before I wrote that article.

00:22:14.840 --> 00:22:16.460
<v Speaker 1>But it does seem pretty interesting.

00:22:16.700 --> 00:22:19.720
<v Speaker 1>I am not here necessarily to switch to it.

00:22:19.720 --> 00:22:20.440
<v Speaker 1>But look at this.

00:22:20.640 --> 00:22:22.820
<v Speaker 1>LS pipe, where size greater than 10 megabytes.

00:22:23.720 --> 00:22:25.240
<v Speaker 1>Pipe sorted by, modified.

00:22:25.520 --> 00:22:25.620
<v Speaker 1>Boom.

00:22:26.020 --> 00:22:28.540
<v Speaker 1>That is, I can see that as powerful.

00:22:30.580 --> 00:22:31.780
<v Speaker 1>Yeah, that's pretty cool.

00:22:32.520 --> 00:22:32.720
<v Speaker 1>Mm-hmm.

00:22:33.880 --> 00:22:35.080
<v Speaker 2>All right, that's it for my extras.

00:22:35.760 --> 00:22:39.060
<v Speaker 2>Yeah, and I really would like to try new stuff.

00:22:40.540 --> 00:22:45.500
<v Speaker 2>It's for me, well, I'm using Mac, Windows, Linux,

00:22:46.980 --> 00:22:50.740
<v Speaker 2>all sorts of stuff and trying to get,

00:22:51.760 --> 00:22:54.660
<v Speaker 2>so to be fair, I just sort of use,

00:22:55.620 --> 00:22:57.160
<v Speaker 2>obviously I use ZShell on Mac

00:22:57.880 --> 00:22:59.080
<v Speaker 2>because that's what it comes with.

00:22:59.660 --> 00:23:02.960
<v Speaker 2>But I kind of just use the Bash version of stuff

00:23:02.980 --> 00:23:05.560
<v Speaker 2>because it's a common denominator over everything.

00:23:06.020 --> 00:23:09.140
<v Speaker 2>Anyway, but that's just me griping.

00:23:10.500 --> 00:23:13.880
<v Speaker 2>I want to talk about something old or new or not yet.

00:23:14.700 --> 00:23:15.360
<v Speaker 2>Lazy imports.

00:23:15.530 --> 00:23:19.060
<v Speaker 2>So two episodes ago, we talked about PEP 810,

00:23:19.440 --> 00:23:20.240
<v Speaker 2>explicit lazy imports,

00:23:20.310 --> 00:23:22.540
<v Speaker 2>and I was super excited about it coming in 315,

00:23:23.820 --> 00:23:25.660
<v Speaker 2>but it's still in draft mode,

00:23:25.660 --> 00:23:26.780
<v Speaker 2>so we don't know if we'll get it.

00:23:27.860 --> 00:23:31.100
<v Speaker 2>And then last week, I talked about if you want to use this,

00:23:31.480 --> 00:23:34.880
<v Speaker 2>if you want to use lazy imports right now,

00:23:35.080 --> 00:23:37.860
<v Speaker 2>you can, how you can do it just with, with Python,

00:23:38.580 --> 00:23:42.840
<v Speaker 2>of just throwing the import in the first function before you start using it.

00:23:44.300 --> 00:23:49.520
<v Speaker 2>And then, but there's some other people thinking about lazy imports

00:23:49.520 --> 00:23:50.660
<v Speaker 2>and how cool they would be also.

00:23:51.340 --> 00:23:56.640
<v Speaker 2>So Hugo wrote an article called three times faster with lazy imports.

00:23:56.940 --> 00:23:59.920
<v Speaker 2>This is, and actually, wow,

00:24:00.160 --> 00:24:02.400
<v Speaker 2>This is something I don't have the capacity to do.

00:24:02.520 --> 00:24:04.280
<v Speaker 2>I probably would maybe.

00:24:04.720 --> 00:24:08.380
<v Speaker 2>But anyway, just implementing it.

00:24:08.560 --> 00:24:12.380
<v Speaker 2>So he fetched the CPython.

00:24:12.560 --> 00:24:17.560
<v Speaker 2>There's apparently a lazy import reference implementation in the PEP.

00:24:18.200 --> 00:24:26.120
<v Speaker 2>So he built Python with the patch and then also released it as if it was 314

00:24:26.320 --> 00:24:29.120
<v Speaker 2>so that he could get away with not building a whole bunch of other stuff.

00:24:30.460 --> 00:24:37.400
<v Speaker 2>and then went ahead and did some Hugo does the PyPI stat stuff which I love that tool

00:24:38.979 --> 00:24:44.340
<v Speaker 2>and the pip dep tree and did some lazy import stuff on it to see if it would speed it up

00:24:44.620 --> 00:24:55.419
<v Speaker 2>and his benchmarks look very promising so speeds it up quite a bit my free 1.31 times faster for

00:24:57.240 --> 00:24:58.320
<v Speaker 2>one implementation.

00:24:59.180 --> 00:24:59.460
<v Speaker 2>And then

00:25:00.600 --> 00:25:01.900
<v Speaker 2>kept going and

00:25:02.480 --> 00:25:04.400
<v Speaker 2>let's see, I can't remember what this last

00:25:04.400 --> 00:25:04.780
<v Speaker 2>one is.

00:25:08.240 --> 00:25:10.140
<v Speaker 2>We no longer need inline imports

00:25:10.460 --> 00:25:10.980
<v Speaker 3>trick. Anyway,

00:25:12.160 --> 00:25:14.060
<v Speaker 2>a couple of different things he tested.

00:25:15.260 --> 00:25:16.380
<v Speaker 2>Either way, it's faster

00:25:16.560 --> 00:25:17.360
<v Speaker 2>to use it. So

00:25:18.200 --> 00:25:19.780
<v Speaker 2>be excited to get that in.

00:25:20.880 --> 00:25:22.260
<v Speaker 2>However, somebody else.

00:25:23.160 --> 00:25:24.040
<v Speaker 2>So there's a

00:25:23.940 --> 00:25:24.960
<v Speaker 2>There's a great thread also.

00:25:25.040 --> 00:25:25.720
<v Speaker 2>We'll link to it.

00:25:25.920 --> 00:25:28.960
<v Speaker 2>A great thread on Mastodon, which I clicked on accidentally,

00:25:30.160 --> 00:25:35.700
<v Speaker 2>to talk about between Graham and him and others about his implementation.

00:25:36.660 --> 00:25:38.240
<v Speaker 2>Okay, so top imports, 105.

00:25:38.960 --> 00:25:41.080
<v Speaker 2>The normal imports, 105 milliseconds.

00:25:42.040 --> 00:25:46.840
<v Speaker 2>Inlining, which is essentially what I'm teaching people to do in my post,

00:25:47.820 --> 00:25:51.220
<v Speaker 2>46 milliseconds, so that drops it down quite a bit.

00:25:51.980 --> 00:25:55.860
<v Speaker 2>Then there's the wrapped lazy import version, which I'm going to talk about in a second.

00:25:56.180 --> 00:25:57.820
<v Speaker 2>That drops it down to 41.

00:25:59.000 --> 00:26:02.560
<v Speaker 2>And then using 810 drops it down to 35.

00:26:02.920 --> 00:26:05.140
<v Speaker 2>So there's, I guess that's it.

00:26:05.360 --> 00:26:09.900
<v Speaker 2>So he timed a whole bunch of stuff and talks about it in the article.

00:26:11.460 --> 00:26:16.460
<v Speaker 2>Like 3x speedup with the, if we put it in 315, that's awesome.

00:26:17.820 --> 00:26:17.940
<v Speaker 2>Yeah.

00:26:18.520 --> 00:26:22.180
<v Speaker 2>And he's timing PyPI stats with help.

00:26:22.780 --> 00:26:24.400
<v Speaker 2>So the help is supposed to be really fast

00:26:24.560 --> 00:26:25.720
<v Speaker 2>and not actually do anything.

00:26:26.540 --> 00:26:29.500
<v Speaker 2>And that's kind of a cool way to test it

00:26:29.700 --> 00:26:32.180
<v Speaker 2>is you're running your application

00:26:32.500 --> 00:26:34.000
<v Speaker 2>or your command line application,

00:26:34.200 --> 00:26:36.320
<v Speaker 2>but not actually doing work.

00:26:36.540 --> 00:26:38.680
<v Speaker 2>It shouldn't import the world then, right?

00:26:39.760 --> 00:26:41.440
<v Speaker 2>Yeah, even if it does a decent amount of work,

00:26:41.440 --> 00:26:43.060
<v Speaker 2>it probably doesn't need all the imports.

00:26:43.640 --> 00:26:43.920
<v Speaker 2>Yeah.

00:26:44.600 --> 00:26:44.720
<v Speaker 2>Right.

00:26:45.400 --> 00:26:46.680
<v Speaker 2>And if you're doing some work,

00:26:46.760 --> 00:26:48.880
<v Speaker 2>you might not need other imports, those sort of things.

00:26:49.340 --> 00:26:51.040
<v Speaker 2>Those are good things to do.

00:26:51.340 --> 00:26:53.580
<v Speaker 2>And going back, again, reminding people,

00:26:54.100 --> 00:26:56.240
<v Speaker 2>the idea around this explicitly as the imports

00:26:56.320 --> 00:26:58.820
<v Speaker 2>is to mark some imports to say,

00:26:59.660 --> 00:27:02.660
<v Speaker 2>don't actually import this until the first instance

00:27:02.820 --> 00:27:04.220
<v Speaker 2>of somebody trying to use it.

00:27:04.860 --> 00:27:05.840
<v Speaker 2>That gets imported.

00:27:07.800 --> 00:27:07.960
<v Speaker 2>Graham.

00:27:08.980 --> 00:27:09.440
<v Speaker 2>Go ahead.

00:27:11.059 --> 00:27:14.540
<v Speaker 1>I just timed GittyUp-help,

00:27:15.400 --> 00:27:19.220
<v Speaker 1>which I installed via uv tool install, 60 milliseconds.

00:27:19.490 --> 00:27:20.400
<v Speaker 1>I'm pretty impressed with that.

00:27:20.560 --> 00:27:21.540
<v Speaker 1>That's really fast.

00:27:22.560 --> 00:27:22.840
<v Speaker 1>Yeah.

00:27:24.420 --> 00:27:25.220
<v Speaker 1>Yeah, but you know what?

00:27:25.320 --> 00:27:28.260
<v Speaker 1>The help in the CLI, arg parsing type stuff,

00:27:28.310 --> 00:27:29.140
<v Speaker 1>is built with arg pars.

00:27:31.100 --> 00:27:33.800
<v Speaker 1>There's not a bunch of external stuff to pull in.

00:27:35.960 --> 00:27:37.480
<v Speaker 2>Yeah, I'm using arg pars more and more now.

00:27:38.620 --> 00:27:41.240
<v Speaker 2>Okay, so Graham was in the discussion thread,

00:27:41.640 --> 00:27:42.740
<v Speaker 2>and Graham Doubleton,

00:27:43.180 --> 00:27:46.540
<v Speaker 2>And he also wrote a blog post called, wow, it just came out today.

00:27:46.900 --> 00:27:46.980
<v Speaker 2>Cool.

00:27:48.060 --> 00:27:49.600
<v Speaker 2>Use or updated today.

00:27:50.160 --> 00:27:51.540
<v Speaker 4>He did it just off the wire.

00:27:54.940 --> 00:27:57.200
<v Speaker 2>Use lazy module imports now.

00:27:57.400 --> 00:27:59.920
<v Speaker 2>And then this case is not the inline one.

00:28:00.140 --> 00:28:02.760
<v Speaker 2>He's using the wrapped.

00:28:03.900 --> 00:28:10.120
<v Speaker 2>There's a wrapped package that is for decorators, wrappers, and monkey patching.

00:28:11.620 --> 00:28:12.420
<v Speaker 2>It's one of his packages.

00:28:13.460 --> 00:28:17.100
<v Speaker 2>can be used to kind of simulate lazy imports also.

00:28:18.490 --> 00:28:21.180
<v Speaker 2>Which in, it's a, look, the syntax,

00:28:21.350 --> 00:28:22.620
<v Speaker 2>so it's kind of a cool article,

00:28:22.940 --> 00:28:24.860
<v Speaker 2>and the syntax is different.

00:28:25.080 --> 00:28:26.700
<v Speaker 2>So again, the lazy imports,

00:28:26.900 --> 00:28:29.620
<v Speaker 2>if we get it in 3.15, it'll look like that.

00:28:30.200 --> 00:28:34.400
<v Speaker 2>Lazy import JSON or lazy from JSON import something.

00:28:36.280 --> 00:28:38.640
<v Speaker 2>wrapped version is

00:28:40.600 --> 00:28:44.300
<v Speaker 2>import wrapped and wrapped dot lazy import so apparently

00:28:44.820 --> 00:28:46.920
<v Speaker 2>wrapped has a lazy import feature which is cool

00:28:48.660 --> 00:28:52.420
<v Speaker 2>and but the syntax is a lot different so I'm not sure

00:28:52.420 --> 00:28:56.560
<v Speaker 2>what I was what I think about that and then also down at the

00:28:56.690 --> 00:28:59.700
<v Speaker 2>bottom Adam Johnson reached out to him and said

00:29:01.010 --> 00:29:03.639
<v Speaker 2>type checking kind of breaks when you're using it

00:29:04.059 --> 00:29:08.520
<v Speaker 1>so you know what i think you might be able to actually fix it i wonder if you could could you

00:29:09.080 --> 00:29:15.440
<v Speaker 1>no probably i was saying that you could say json colon type is json but import but then it's it's

00:29:15.500 --> 00:29:20.000
<v Speaker 1>not going to know what that is yeah you're right it that was my thought when i saw this as like oh

00:29:20.080 --> 00:29:24.160
<v Speaker 1>it'd be fun to play lazy imports i'm like oh but that's going to destroy type information in the

00:29:24.340 --> 00:29:31.379
<v Speaker 2>editors right so that's where um adam's suggestion of saying if type yet checking import

00:29:31.400 --> 00:29:35.500
<v Speaker 2>jason so just go ahead and actually import all the stuff if you're type checking and that'll

00:29:35.540 --> 00:29:43.020
<v Speaker 1>probably help the editors i imagine so well here's looking forward to 315 because i love this idea as

00:29:43.100 --> 00:29:50.280
<v Speaker 1>well and i appreciate hugo writing up all doing all the research yeah so and also um graham for

00:29:50.480 --> 00:29:55.080
<v Speaker 2>talking about how to get around it with rapt that's cool so and a little faster than my man

00:29:56.740 --> 00:29:56.980
<v Speaker 2>All right.

00:30:00.400 --> 00:30:02.720
<v Speaker 2>I'm feeling lazy still, but how about funny?

00:30:02.800 --> 00:30:03.620
<v Speaker 2>Do we got something funny?

00:30:04.040 --> 00:30:04.440
<v Speaker 1>Oh, yeah.

00:30:04.860 --> 00:30:05.400
<v Speaker 1>I got something.

00:30:05.520 --> 00:30:07.840
<v Speaker 1>Actually, really, really quick real-time follow-up

00:30:08.040 --> 00:30:11.540
<v Speaker 1>because, I mean, we're covering stuff that came out today.

00:30:12.880 --> 00:30:20.240
<v Speaker 1>And who doesn't love to hear that AWS U.S. East 1 in Virginia went down?

00:30:22.780 --> 00:30:24.900
<v Speaker 1>So right here on CNN, by the way.

00:30:24.980 --> 00:30:29.260
<v Speaker 1>AWS services are recovering again after a global internet outage.

00:30:31.680 --> 00:30:32.560
<v Speaker 1>Scroll down a little bit.

00:30:34.120 --> 00:30:36.060
<v Speaker 1>Somewhere about East.

00:30:36.600 --> 00:30:37.140
<v Speaker 1>There we are.

00:30:39.420 --> 00:30:42.260
<v Speaker 1>It seems like a third of the world is hosted in US East 1.

00:30:43.260 --> 00:30:43.580
<v Speaker 1>But you know what?

00:30:43.660 --> 00:30:47.700
<v Speaker 1>Our stuff is clipping along smoothly just as it should.

00:30:48.460 --> 00:30:48.720
<v Speaker 1>All right.

00:30:49.080 --> 00:30:52.060
<v Speaker 1>So good luck to everyone who's running over there.

00:30:53.840 --> 00:30:56.260
<v Speaker 1>So here's the thing, Brian, for the joke.

00:30:56.800 --> 00:31:00.100
<v Speaker 1>Do you, are you more of a fantasy person?

00:31:00.660 --> 00:31:01.920
<v Speaker 1>Are you more of a science fiction?

00:31:02.520 --> 00:31:07.060
<v Speaker 1>Or what's your genre of big epic storytelling?

00:31:09.280 --> 00:31:13.480
<v Speaker 2>Well, usually I'm listening to a lot of science books right now.

00:31:13.740 --> 00:31:14.260
<v Speaker 1>But yeah.

00:31:14.360 --> 00:31:16.560
<v Speaker 1>Yeah, I'm personally a science fiction person.

00:31:17.860 --> 00:31:29.520
<v Speaker 1>I definitely take a science, a giant space sort of thing, interstellar type of thing, over, say, dragons and witches.

00:31:29.860 --> 00:31:33.860
<v Speaker 1>But I think you might appreciate this.

00:31:33.960 --> 00:31:34.920
<v Speaker 1>Lord of the Rings, okay?

00:31:36.220 --> 00:31:37.660
<v Speaker 1>There's Gandalf and there's Frodo.

00:31:38.240 --> 00:31:41.520
<v Speaker 1>And it says, Gandalf, they've discovered something together.

00:31:41.540 --> 00:31:45.120
<v Speaker 1>And Gandalf looks over at Frodo and says, what can you see?

00:31:46.760 --> 00:31:48.300
<v Speaker 1>It's some form of elvish.

00:31:49.000 --> 00:31:50.200
<v Speaker 1>I can't read it.

00:31:51.140 --> 00:31:52.820
<v Speaker 1>And he's holding a regular expression.

00:31:56.720 --> 00:32:00.780
<v Speaker 4>Slash caret per the Z question mark equals dot percent backslash D.

00:32:00.820 --> 00:32:02.640
<v Speaker 4>It's like, it's some form of elvish.

00:32:02.900 --> 00:32:03.580
<v Speaker 4>I can't read it.

00:32:05.820 --> 00:32:06.740
<v Speaker 2>Yeah, nobody can.

00:32:07.200 --> 00:32:07.840
<v Speaker 2>It's pretty good, right?

00:32:08.280 --> 00:32:09.060
<v Speaker 2>Yeah, that is good.

00:32:10.280 --> 00:32:15.199
<v Speaker 1>I've seen the same meme, but with if double underscore name

00:32:15.480 --> 00:32:20.540
<v Speaker 1>or dunder name equal equal dunder main it's like it's a form of elvish i can't read it it's great

00:32:21.220 --> 00:32:29.400
<v Speaker 2>it just doesn't make sense how can you not read that but also um it seems odd that still that

00:32:29.560 --> 00:32:34.740
<v Speaker 2>that's the way we can tell if if you're running an application directly or it's getting imported

00:32:35.480 --> 00:32:41.159
<v Speaker 1>i know it does it's it works but it's just a weird convention

00:32:42.320 --> 00:32:42.960
<v Speaker 1>I think

00:32:43.640 --> 00:32:45.060
<v Speaker 1>I'm totally here for

00:32:45.340 --> 00:32:46.400
<v Speaker 1>just the main function

00:32:46.860 --> 00:32:48.720
<v Speaker 1>static main void or

00:32:49.320 --> 00:32:50.860
<v Speaker 1>the variations across so many different

00:32:51.100 --> 00:32:51.380
<v Speaker 1>applications

00:32:53.320 --> 00:32:55.100
<v Speaker 1>and that's actually what I end up

00:32:55.240 --> 00:32:56.740
<v Speaker 1>writing in my code is I always have a

00:32:57.520 --> 00:32:59.160
<v Speaker 1>def main something or async

00:32:59.320 --> 00:33:00.880
<v Speaker 1>def whatever main

00:33:01.320 --> 00:33:03.020
<v Speaker 1>and then in the dunder name

00:33:03.200 --> 00:33:05.100
<v Speaker 1>equal dunder main I just call main

00:33:05.520 --> 00:33:07.240
<v Speaker 1>and that's just like this is my convention

00:33:07.420 --> 00:33:09.140
<v Speaker 1>the main thing goes at the top it's called main

00:33:09.520 --> 00:33:10.639
<v Speaker 1>that's how the app starts

00:33:10.960 --> 00:33:14.520
<v Speaker 1>but I still got to go to that little wire together deal at the end.

00:33:16.360 --> 00:33:16.600
<v Speaker 2>Yeah.

00:33:17.070 --> 00:33:18.960
<v Speaker 2>It seems like we should have like a, if, like,

00:33:19.200 --> 00:33:21.200
<v Speaker 2>if not imported or something,

00:33:21.620 --> 00:33:24.960
<v Speaker 2>because that's essentially what we're saying. But anyway,

00:33:27.639 --> 00:33:30.120
<v Speaker 2>one of the things I noticed, I really enjoy sci-fi,

00:33:30.170 --> 00:33:34.960
<v Speaker 2>but I realized that a lot of the sci-fi books that I love still have like

00:33:35.960 --> 00:33:40.080
<v Speaker 2>talk about like in the future we'll have new technology.

00:33:40.140 --> 00:33:43.780
<v Speaker 2>and it's going to suck because of XYZ.

00:33:44.040 --> 00:33:46.640
<v Speaker 2>It's like there's not a lot of optimistic sci-fi.

00:33:47.320 --> 00:33:48.420
<v Speaker 2>It's a lot of dystopian, yeah.

00:33:49.180 --> 00:33:49.300
<v Speaker 1>Yeah.

00:33:50.160 --> 00:33:50.260
<v Speaker 2>Anyway.

00:33:50.680 --> 00:33:52.760
<v Speaker 1>Sure, we have cool spaceships, but we've destroyed the world,

00:33:52.840 --> 00:33:54.940
<v Speaker 1>so we have to use them to go find a new world to destroy.

00:33:55.660 --> 00:33:55.880
<v Speaker 2>Yeah.

00:33:56.920 --> 00:33:58.600
<v Speaker 2>And we still have politics in space.

00:34:01.060 --> 00:34:01.640
<v Speaker 2>But anyway.

00:34:03.260 --> 00:34:04.500
<v Speaker 2>But no politics on this episode.

00:34:05.500 --> 00:34:09.120
<v Speaker 1>No, unless you don't feel like we're bashing elvish writing,

00:34:09.200 --> 00:34:09.679
<v Speaker 1>but that's okay.

00:34:11.740 --> 00:34:12.179
<v Speaker 1>yeah

00:34:13.260 --> 00:34:13.399
<v Speaker 1>alright

00:34:14.760 --> 00:34:15.659
<v Speaker 1>alright thanks for being here

00:34:15.980 --> 00:34:17.419
<v Speaker 1>thanks to everyone for listening we appreciate it

00:34:17.690 --> 00:34:18.000
<v Speaker 1>bye y'all

00:34:39.649 --> 00:34:39.780
<v Speaker 1>bye

