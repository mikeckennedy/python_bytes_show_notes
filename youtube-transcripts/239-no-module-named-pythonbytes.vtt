WEBVTT

00:00:00.000 --> 00:00:03.800
>> Hey, everybody. Welcome to the stream.


00:00:03.800 --> 00:00:07.000
We're kicking off today's Python Bytes.


00:00:07.000 --> 00:00:09.480
We'll just jump into it.


00:00:09.480 --> 00:00:11.780
Hello and welcome to Python Bytes,


00:00:11.780 --> 00:00:15.200
where we deliver news and headlines directly to your earbuds.


00:00:15.200 --> 00:00:17.160
This is Episode 239,


00:00:17.160 --> 00:00:19.400
recorded June 23rd.


00:00:19.400 --> 00:00:20.600
It's almost end of June.


00:00:20.600 --> 00:00:24.160
Well, 2021. I am Brian Okken.


00:00:24.160 --> 00:00:25.760
>> I'm Michael Kennedy.


00:00:25.760 --> 00:00:27.800
>> I am Nick Moore.


00:00:27.800 --> 00:00:30.280
Welcome, Nick. Thanks for joining the show.


00:00:30.280 --> 00:00:31.800
Thank you.


00:00:31.800 --> 00:00:34.800
Before we jump in, tell me a little bit about yourself.


00:00:34.800 --> 00:00:39.400
Yeah, sure. So as I said, Nick Moua, I'm based out of Ohio,


00:00:39.400 --> 00:00:43.480
and I work as a data engineer at Trimble Transportation.


00:00:43.480 --> 00:00:48.520
It's a software company aiming to revolutionize the way we supply the world


00:00:48.520 --> 00:00:52.520
and simplify and connect the world supply chain.


00:00:52.520 --> 00:00:57.000
It wants to make it easier to move goods and freight all around the world.


00:00:57.000 --> 00:01:01.320
I'm also the co-organizer of the of Kleepyte,


00:01:01.320 --> 00:01:03.720
which is Cleveland's Python meetup group.


00:01:03.720 --> 00:01:06.760
Thank you, Michael, for sharing that on the screen.


00:01:06.760 --> 00:01:08.660
So yeah, that's a bit about me.


00:01:08.660 --> 00:01:09.500
- Nice.


00:01:09.500 --> 00:01:11.880
I enjoyed Cleveland when we were there for PyCon.


00:01:11.880 --> 00:01:13.920
- Yeah, I think I met you guys there.


00:01:13.920 --> 00:01:15.640
- Cool.


00:01:15.640 --> 00:01:18.040
- Yeah, I think it was the JetBrains.


00:01:18.040 --> 00:01:18.880
- That's right, we were.


00:01:18.880 --> 00:01:21.680
It was really great to be in Cleveland for a couple of years


00:01:21.680 --> 00:01:24.080
and I guess we just completely missed Pittsburgh,


00:01:24.080 --> 00:01:26.680
but they're gonna get another round out of here.


00:01:26.680 --> 00:01:29.560
as a redo, which is cool from COVID.


00:01:29.560 --> 00:01:33.520
I got a chance to speak at the Cleveland Python meetup


00:01:33.520 --> 00:01:36.060
and I talked about, talked about memory.


00:01:36.060 --> 00:01:36.900
Was that right?


00:01:36.900 --> 00:01:39.080
- Yeah, you're talking about how Python


00:01:39.080 --> 00:01:42.020
managed his memory was like a really cool deep dive into.


00:01:42.020 --> 00:01:42.860
- Yeah, thanks.


00:01:42.860 --> 00:01:43.760
That was super fun for having me.


00:01:43.760 --> 00:01:45.360
Now it's good to have you on our show.


00:01:45.360 --> 00:01:46.640
- Yeah.


00:01:46.640 --> 00:01:47.920
- So was that on purpose?


00:01:47.920 --> 00:01:49.440
Did you make a joke that you couldn't remember


00:01:49.440 --> 00:01:51.040
what the talk was about?


00:01:51.040 --> 00:01:53.440
- No, I, (laughs)


00:01:53.440 --> 00:01:55.640
I know how my brain might store the memory


00:01:55.640 --> 00:01:57.420
of what I spoke about, but I just,


00:01:57.420 --> 00:01:58.720
it could have been that or async


00:01:58.720 --> 00:02:00.920
and I wasn't a hundred percent sure which one it was.


00:02:00.920 --> 00:02:02.420
(laughing)


00:02:02.420 --> 00:02:04.960
- We did talk about async too though, so.


00:02:04.960 --> 00:02:05.800
- Cool.


00:02:05.800 --> 00:02:06.640
- Yeah, yeah, for sure.


00:02:06.640 --> 00:02:08.580
Speaking of async, Brian.


00:02:08.580 --> 00:02:09.420
- Yeah.


00:02:09.420 --> 00:02:10.940
- Async databases, tell us about it.


00:02:10.940 --> 00:02:15.780
- Well, this is object relational mappers also.


00:02:15.780 --> 00:02:20.780
So we have ORMR, which is an async mini ORM for Python,


00:02:22.580 --> 00:02:26.120
which supports Postgres, MySQL, and SQLite.


00:02:26.120 --> 00:02:31.220
This was a suggestion sent to us by John Hagan.


00:02:31.220 --> 00:02:33.700
Thanks, John, for sending this in.


00:02:33.700 --> 00:02:35.860
I actually haven't played with this a lot.


00:02:35.860 --> 00:02:37.460
I was looking around, it looks pretty neat.


00:02:37.460 --> 00:02:39.620
But I'm going to quote John here.


00:02:39.620 --> 00:02:42.740
He says, "It's a really cool ORM that combines


00:02:42.740 --> 00:02:47.180
Pydantic models and SQL models into a single definition.


00:02:47.180 --> 00:02:49.900
What is great about this is it can be used to reduce


00:02:49.900 --> 00:02:53.900
the repetitive duplication between the models for an ORM


00:02:53.900 --> 00:02:57.660
and the Pydantic models for that FastAPI needs


00:02:57.660 --> 00:02:59.760
to describe serialization.


00:02:59.760 --> 00:03:02.580
So I guess you do have to specify that twice normally.


00:03:02.580 --> 00:03:05.500
- Yeah, normally what you do is you would have


00:03:05.500 --> 00:03:09.540
the data model, the classes that do the exchange


00:03:09.540 --> 00:03:11.340
on the API level.


00:03:11.340 --> 00:03:12.940
So those are probably Pydantic,


00:03:12.940 --> 00:03:16.820
but maybe then you have something like a SQLAlchemy model.


00:03:16.820 --> 00:03:18.600
And then somewhere in the middle,


00:03:18.600 --> 00:03:21.300
you've got to copy the SQLAlchemy data over to the


00:03:21.300 --> 00:03:24.260
Pydantic model, send out over FastAPI,


00:03:24.260 --> 00:03:25.860
and you get it back, then you've got to copy that


00:03:25.860 --> 00:03:29.500
from FastAPI and Pydantic back into SQLAlchemy.


00:03:29.500 --> 00:03:31.660
And because SQLAlchemy types are not really meant


00:03:31.660 --> 00:03:33.140
to be transferred on the wire,


00:03:33.140 --> 00:03:35.020
you don't get the open API documentation


00:03:35.020 --> 00:03:37.340
that you get from Pydantic integration


00:03:37.340 --> 00:03:38.580
and all those sorts of things.


00:03:38.580 --> 00:03:40.120
So that's normally what happens.


00:03:40.120 --> 00:03:43.980
But if your database model can also be a Pydantic model,


00:03:43.980 --> 00:03:46.940
then you don't do that back and forth.


00:03:46.940 --> 00:03:48.700
>> Yeah, and anytime you've got duplication,


00:03:48.700 --> 00:03:50.820
it's like that dry issue of just,


00:03:50.820 --> 00:03:52.460
you're going to mess it up sometime,


00:03:52.460 --> 00:03:53.620
but it's going to be wrong.


00:03:53.620 --> 00:03:56.440
>> I think that's why SQLAlchemy,


00:03:56.440 --> 00:03:58.580
I think in version 1.4,


00:03:58.580 --> 00:04:01.740
they've been playing around with a lot of ideas on how to


00:04:01.740 --> 00:04:04.420
integrate data, not pedantic,


00:04:04.420 --> 00:04:12.220
but data classes and the ORM style base models.


00:04:12.220 --> 00:04:15.520
Four different propositions of how that should be done,


00:04:15.520 --> 00:04:16.880
but it's not yet perfect.


00:04:16.880 --> 00:04:18.960
I think that's something that looks


00:04:18.960 --> 00:04:21.440
like they could learn from Omar here.


00:04:21.440 --> 00:04:24.680
>> Or at least it's good to have these experiments going


00:04:24.680 --> 00:04:27.120
on for everybody to look around and see how do


00:04:27.120 --> 00:04:30.320
we move forward so that we can do this cleanly.


00:04:30.320 --> 00:04:34.240
>> Yeah. The one thing I will say is that with all of these ORMs,


00:04:34.240 --> 00:04:37.920
I don't know why they never give some love to SQL Server.


00:04:37.920 --> 00:04:40.720
I always see Postgres, MySQL, SQLite,


00:04:40.720 --> 00:04:43.600
but SQL Server is pretty cool too.


00:04:43.600 --> 00:04:46.760
Where is the support for that?


00:04:46.760 --> 00:04:48.240
- What's SQL server?


00:04:48.240 --> 00:04:51.420
- So that's like Microsoft's, you know what?


00:04:51.420 --> 00:04:53.680
(laughing)


00:04:53.680 --> 00:04:59.280
- I think it really matters what audience


00:04:59.280 --> 00:05:00.840
you're addressing, Nick, right?


00:05:00.840 --> 00:05:03.160
So if you're talking startups


00:05:03.160 --> 00:05:06.000
and a lot of the open source crowd,


00:05:06.000 --> 00:05:07.080
yeah, it's all Postgres,


00:05:07.080 --> 00:05:10.280
or if you're talking to Michael, it's all MongoDB, right?


00:05:10.280 --> 00:05:12.480
But if you're talking to enterprises,


00:05:12.480 --> 00:05:17.840
boy oh boy do a big bunch of those enterprises run on the Microsoft stack.


00:05:17.840 --> 00:05:25.120
Yeah. Windows, Windows servers, Microsoft SQL server, and that's a non-trivial amount of


00:05:25.120 --> 00:05:30.080
the use cases for these things. So I agree that it should get some attention, even if it's not


00:05:30.080 --> 00:05:34.240
necessarily the one that the maintainers or many people are like most keen to use.


00:05:34.240 --> 00:05:41.920
Yeah, and I agree it was a joke, but one of the things I wanted to point out that John mentioned


00:05:41.920 --> 00:05:50.720
is that one of the benefits of ORMR is there's a quick start specifically for FastAPI. So you can


00:05:50.720 --> 00:05:56.560
look at the documentation and there's a FastAPI quick start on how to get this running with FastAPI.


00:05:56.560 --> 00:06:05.280
What an interesting combination of descriptors from the ORM class side and


00:06:06.000 --> 00:06:09.280
Pydantic models you get here. So for this we have


00:06:09.280 --> 00:06:14.320
like the Pydantic model base type of thing. We've got the


00:06:14.320 --> 00:06:19.440
columns specified with type information that Pydantic would use, but then you set them to things like


00:06:19.440 --> 00:06:24.480
an integer column that's a primary key or a string that has a max length setting and things like that.


00:06:24.480 --> 00:06:27.600
Yeah, it's like the worst of every world, but


00:06:27.600 --> 00:06:32.400
But it's better than repeating stuff, right? So yeah


00:06:34.460 --> 00:06:41.680
Interesting. Yeah. Yeah, I think it's pretty good and nick you mentioned sequel alchemy and data classes


00:06:41.680 --> 00:06:47.340
Pydantic also has some integration for working with data classes as well


00:06:47.340 --> 00:06:53.100
So maybe there's a way to bridge those things across for like fast api and similar situations as well


00:06:53.100 --> 00:06:55.100
I haven't tried that but it's it's possible


00:06:55.100 --> 00:07:00.780
Yeah, let's see out there in the live stream. We got sam orly. Hey sam says this looks a lot like a django orm


00:07:00.860 --> 00:07:02.180
Yeah, absolutely.


00:07:02.180 --> 00:07:03.580
It really does.


00:07:03.580 --> 00:07:06.820
And then Dean is hoping that we'll get some support


00:07:06.820 --> 00:07:09.100
for a very important database, AccessDB.


00:07:09.100 --> 00:07:11.900
That and, oh gosh, what was it?


00:07:11.900 --> 00:07:13.500
DB2 and a couple of the others.


00:07:13.500 --> 00:07:14.780
Yeah, there's some really important ones


00:07:14.780 --> 00:07:16.220
that we might be forgetting,


00:07:16.220 --> 00:07:17.860
but I think it's gonna be okay.


00:07:17.860 --> 00:07:21.180
- Oh man, Access, that gives me PTSD from college.


00:07:21.180 --> 00:07:22.220
(laughing)


00:07:22.220 --> 00:07:24.020
- I can imagine.


00:07:24.020 --> 00:07:25.660
I can imagine.


00:07:25.660 --> 00:07:27.340
All right, well, speaking to people


00:07:27.340 --> 00:07:30.060
who might be getting some trauma,


00:07:30.060 --> 00:07:33.900
Let's talk about nomodulenamed.


00:07:33.900 --> 00:07:37.420
nomodulenamed.com, in fact, it's now its own website.


00:07:37.420 --> 00:07:39.980
You used to think of it as like an error,


00:07:39.980 --> 00:07:43.500
and now it's actually a service.


00:07:43.500 --> 00:07:45.900
So error explanations of a service, I guess,


00:07:45.900 --> 00:07:47.260
is what you would call it.


00:07:47.260 --> 00:07:49.180
All right, so Gared Dune pointed out


00:07:49.180 --> 00:07:52.540
that there's this website called nomodulenamed,


00:07:52.540 --> 00:07:55.260
and it looks super plain,


00:07:55.260 --> 00:07:56.780
and I went to like, "What is this?"


00:07:58.220 --> 00:08:01.780
It has 3,626 packages.


00:08:01.780 --> 00:08:05.620
And oh my goodness, like 2 million modules or something like that.


00:08:05.620 --> 00:08:09.500
And it has 151,000 package install guidelines.


00:08:09.500 --> 00:08:12.300
So for example, what if I'm working with HTTPX?


00:08:12.300 --> 00:08:14.620
And I get the message that says,


00:08:14.620 --> 00:08:17.740
Python error, no module named HTTPX.


00:08:17.740 --> 00:08:21.980
This is what would happen if you wrote import HTTPX and you went and tried to run it,


00:08:21.980 --> 00:08:23.820
but you were new,


00:08:23.820 --> 00:08:26.420
and you didn't realize there were external dependencies


00:08:26.420 --> 00:08:29.460
or that HTTPX wasn't built into the standard library,


00:08:29.460 --> 00:08:30.920
you would get that error, right?


00:08:30.920 --> 00:08:32.080
- Yeah.


00:08:32.080 --> 00:08:33.880
- So this tells you how to fix it.


00:08:33.880 --> 00:08:35.300
It says, "Oh, this is probably


00:08:35.300 --> 00:08:37.800
"'cause you don't have the package HTTPX."


00:08:37.800 --> 00:08:43.920
Let's see if I can go something like FastAPI.responses.


00:08:43.920 --> 00:08:45.180
Is that a thing?


00:08:45.180 --> 00:08:47.620
And what will it tell me if I try it?


00:08:47.620 --> 00:08:49.600
Oh, no such model.


00:08:49.600 --> 00:08:52.920
Yeah, but so NumPy, for example,


00:08:52.920 --> 00:08:55.900
it'll give you a lot of these and it'll tell you,


00:08:55.900 --> 00:08:58.500
This is probably because you don't have the package NumPy


00:08:58.500 --> 00:09:01.900
or NumPy MIPS 64 installed.


00:09:01.900 --> 00:09:02.940
So that's what I was looking for,


00:09:02.940 --> 00:09:04.300
is if it would sort of show like,


00:09:04.300 --> 00:09:08.220
well, the package name is not exactly


00:09:08.220 --> 00:09:09.600
what you're looking for.


00:09:09.600 --> 00:09:11.580
So maybe BS4, right?


00:09:11.580 --> 00:09:13.780
Sometimes there's these modules that, yeah.


00:09:13.780 --> 00:09:15.740
So for example, if I say BS4,


00:09:15.740 --> 00:09:17.540
it'll say, oh, it's because you don't have,


00:09:17.540 --> 00:09:19.860
if you have the error, no module name BS4,


00:09:19.860 --> 00:09:22.740
it's because you don't have beautiful soup four installed.


00:09:22.740 --> 00:09:24.420
Right, so it's more than just like,


00:09:24.420 --> 00:09:26.740
to pip install the thing that there's no module of.


00:09:26.740 --> 00:09:30.340
It tries to help a little bit more with understanding that.


00:09:30.340 --> 00:09:32.380
And it tells you how to get the latest version.


00:09:32.380 --> 00:09:33.380
It tells you how to install it.


00:09:33.380 --> 00:09:34.620
So yeah.


00:09:34.620 --> 00:09:36.380
And there's even a related article.


00:09:36.380 --> 00:09:40.140
- Extremely beautiful, like SEO on that


00:09:40.140 --> 00:09:44.260
with people just Googling error messages as well.


00:09:44.260 --> 00:09:45.100
- Yeah.


00:09:45.100 --> 00:09:48.440
Yeah, so pretty, pretty interesting.


00:09:48.440 --> 00:09:52.260
Garrett Dunn, thank you so much for sending that in.


00:09:52.260 --> 00:09:53.380
It's simple, but you know,


00:09:53.380 --> 00:09:56.260
These kinds of things can help people who are new


00:09:56.260 --> 00:09:57.100
and are getting in.


00:09:57.100 --> 00:09:59.820
And I think one of the powers of Python


00:09:59.820 --> 00:10:02.220
is we have people coming from all these different


00:10:02.220 --> 00:10:05.260
backgrounds and experiences


00:10:05.260 --> 00:10:06.980
and they are not all computer science people


00:10:06.980 --> 00:10:09.180
that know about package managers and like love that.


00:10:09.180 --> 00:10:11.520
They're just like, oh, I know that I can do cool.


00:10:11.520 --> 00:10:13.660
I can like load this file and make a picture out of it


00:10:13.660 --> 00:10:14.940
that I need to work on,


00:10:14.940 --> 00:10:16.920
but I get this stupid no module name this,


00:10:16.920 --> 00:10:17.760
what is this?


00:10:17.760 --> 00:10:20.060
And then they can, these kinds of things can help.


00:10:21.700 --> 00:10:23.980
- I'm starting to teach my 11 year old some programming


00:10:23.980 --> 00:10:25.680
and we started with packaging.


00:10:25.680 --> 00:10:27.440
- Yeah.


00:10:27.440 --> 00:10:28.260
- We didn't.


00:10:28.260 --> 00:10:29.100
(laughing)


00:10:29.100 --> 00:10:30.820
- No, you started with virtual environments


00:10:30.820 --> 00:10:31.660
and then packaging.


00:10:31.660 --> 00:10:32.500
- Yeah.


00:10:32.500 --> 00:10:33.320
(laughing)


00:10:33.320 --> 00:10:35.260
- But Brian, I thought you would have started


00:10:35.260 --> 00:10:36.740
with testing first.


00:10:36.740 --> 00:10:38.140
- I always test first, yeah.


00:10:38.140 --> 00:10:39.620
(laughing)


00:10:39.620 --> 00:10:43.380
- I think this is like a really cool project.


00:10:43.380 --> 00:10:47.400
I find it super useful when working on projects


00:10:47.400 --> 00:10:52.400
related to GUIs like Qt or Phoenix, no, no, WX Python,


00:10:52.400 --> 00:10:58.240
'cause like those packages come with so many


00:10:58.240 --> 00:11:01.600
underlying dependencies and sometimes you might miss one


00:11:01.600 --> 00:11:04.320
or might miss something that like is an OS dependency


00:11:04.320 --> 00:11:05.240
that you don't know.


00:11:05.240 --> 00:11:06.920
I feel like this could help you out.


00:11:06.920 --> 00:11:08.960
I know I've run through this a few times


00:11:08.960 --> 00:11:11.720
where like I'm using like a package


00:11:11.720 --> 00:11:13.240
that is built on top of Qt,


00:11:13.240 --> 00:11:16.760
but then it tells me you don't have PyQt-Gt.


00:11:16.760 --> 00:11:18.920
- Right, exactly. - Well done.


00:11:18.920 --> 00:11:22.160
- Well, I like that,


00:11:22.160 --> 00:11:23.400
I think you probably already mentioned this,


00:11:23.400 --> 00:11:28.240
but the error message is the module not found.


00:11:28.240 --> 00:11:30.080
That's often not the same,


00:11:30.080 --> 00:11:33.080
it's not the same name as the thing you install.


00:11:33.080 --> 00:11:34.640
So.


00:11:34.640 --> 00:11:36.760
- Yeah, like one that drives me crazy is dateUtil.


00:11:36.760 --> 00:11:37.880
I love dateUtil.


00:11:37.880 --> 00:11:41.040
I think it's like magic for the pain of parsing dates,


00:11:41.040 --> 00:11:42.300
but that's not what you install.


00:11:42.300 --> 00:11:45.080
You install Python underscore dateUtil, right?


00:11:45.080 --> 00:11:47.480
So there's just, it's those situations where you're like,


00:11:47.480 --> 00:11:48.920
why is there no date util?


00:11:48.920 --> 00:11:50.120
I had pip and saw date util,


00:11:50.120 --> 00:11:51.600
and then it's not even the right thing.


00:11:51.600 --> 00:11:54.000
Or, you know, it's just, yeah,


00:11:54.000 --> 00:11:56.280
I think it's helpful to sort of put those things together


00:11:56.280 --> 00:11:57.440
for people who are new.


00:11:57.440 --> 00:12:00.960
- Yeah, and for people doing new packages,


00:12:00.960 --> 00:12:02.200
don't do this if you can.


00:12:02.200 --> 00:12:05.760
Even if you have the perfect name for your package,


00:12:05.760 --> 00:12:08.480
maybe come up with something else that you can actually,


00:12:08.480 --> 00:12:10.320
it's available on PyPI.


00:12:10.320 --> 00:12:11.700
- Yeah, yeah, for sure.


00:12:13.560 --> 00:12:16.360
All right, Nick, you got the next one, right?


00:12:16.360 --> 00:12:19.040
- Yep, I got the next one.


00:12:19.040 --> 00:12:24.040
So I was looking through Jupyter.


00:12:24.040 --> 00:12:26.360
So as I said, as a data engineer,


00:12:26.360 --> 00:12:30.160
I often use Jupyter for like data wrangling


00:12:30.160 --> 00:12:34.040
and just trying out how to like clean up some kind of data


00:12:34.040 --> 00:12:36.840
before I actually do the actual cleaning


00:12:36.840 --> 00:12:38.480
in our data pipeline.


00:12:38.480 --> 00:12:40.640
As I stumble, I got a new iPad.


00:12:40.640 --> 00:12:45.280
I went to tinkering around with Python code


00:12:45.280 --> 00:12:47.520
and I was researching into how to do that.


00:12:47.520 --> 00:12:49.960
I stumbled across JupyterLite.


00:12:49.960 --> 00:12:51.680
I was like, "Okay, cool, JupyterLite."


00:12:51.680 --> 00:12:53.800
But sometimes I'm not going to use code,


00:12:53.800 --> 00:12:57.000
it's always going to be connected to Internet using my iPad.


00:12:57.000 --> 00:12:59.640
Then I looked deeper into it and it's


00:12:59.640 --> 00:13:04.120
a Jupyter distribution that runs entirely in the browser,


00:13:04.120 --> 00:13:06.200
and it's built from the ground up


00:13:06.200 --> 00:13:09.600
using JupyterLab components and extensions.


00:13:09.600 --> 00:13:10.440
- That's cool.


00:13:10.440 --> 00:13:15.320
- And the kernels that are available are like


00:13:15.320 --> 00:13:16.160
in the browser.


00:13:16.160 --> 00:13:19.040
So like there's a Python kernel that is like


00:13:19.040 --> 00:13:21.600
in the browser and it's built using PyIoDyed.


00:13:21.600 --> 00:13:23.380
That was like really cool to see.


00:13:23.380 --> 00:13:27.240
And there's also like a, I think there is a,


00:13:27.240 --> 00:13:28.080
where is it?


00:13:28.080 --> 00:13:30.600
In the user guide,


00:13:30.600 --> 00:13:34.880
there are other kernels such as,


00:13:34.880 --> 00:13:37.160
yeah, JavaScript and P5.js,


00:13:37.160 --> 00:13:40.440
which I think is like a graphics library


00:13:40.440 --> 00:13:43.280
to build like things on Canvas.


00:13:43.280 --> 00:13:46.800
But it was really cool to see like it's supports Python 3.8


00:13:46.800 --> 00:13:49.400
and you get like start session,


00:13:49.400 --> 00:13:51.100
you can run Python code,


00:13:51.100 --> 00:13:54.240
Python completion, which is really cool.


00:13:54.240 --> 00:13:57.520
It's interesting they call the kernel Pyolite.


00:13:57.520 --> 00:14:00.840
- Pyolite based on Pyiodide.


00:14:00.840 --> 00:14:02.680
- Yeah, based on Pyiodide.


00:14:02.680 --> 00:14:04.820
And this is, I pulled it on, this is how it looks like


00:14:04.820 --> 00:14:06.920
and it looks pretty cool.


00:14:06.920 --> 00:14:08.820
So it also supports, right, I think,


00:14:08.820 --> 00:14:11.640
rough or not, it supports Altair and,


00:14:11.640 --> 00:14:13.640
hold on, wait again.


00:14:13.640 --> 00:14:16.240
- I think Matplotlib as well, I think, yeah.


00:14:16.240 --> 00:14:18.280
- Matplotlib, Matplotlib.


00:14:18.280 --> 00:14:22.680
And so, like, open up this Altair notebook.


00:14:22.680 --> 00:14:25.840
It even has something called MicroPip,


00:14:25.840 --> 00:14:28.720
which is like, I don't know what this means,


00:14:28.720 --> 00:14:33.000
but I think it means that it's like,


00:14:33.000 --> 00:14:37.120
is a package manager, but for the browser, for Python,


00:14:37.120 --> 00:14:38.640
which is interesting.


00:14:38.640 --> 00:14:42.680
- And it's asynchronous,


00:14:42.680 --> 00:14:44.400
because it's JavaScript basically, right?


00:14:44.400 --> 00:14:46.520
So it's a wait, micro pip installed,


00:14:46.520 --> 00:14:48.920
like Jinja2 or Altair or something like that.


00:14:48.920 --> 00:14:49.840
How interesting.


00:14:49.840 --> 00:14:51.240
- That's very cool.


00:14:51.240 --> 00:14:55.160
I think it also, everything that you download


00:14:55.160 --> 00:15:00.240
and everything that, all the data that you like load up,


00:15:00.240 --> 00:15:04.040
it's being stored in the browsers like local storage


00:15:04.040 --> 00:15:07.960
or some other, I don't know, index DB.


00:15:07.960 --> 00:15:10.400
So it's like self-contained.


00:15:10.400 --> 00:15:13.080
The only thing I noticed is that right now, it's not,


00:15:13.080 --> 00:15:18.760
it's not, what was the word here?


00:15:18.760 --> 00:15:20.040
PWA?


00:15:20.040 --> 00:15:21.880
So it's not like-- - Yes, I was just thinking


00:15:21.880 --> 00:15:24.240
it would be fantastic if that was a progressive web app


00:15:24.240 --> 00:15:26.520
and then you could just have it


00:15:26.520 --> 00:15:28.980
in mostly offline mode, yeah.


00:15:28.980 --> 00:15:31.540
Edge does a great job with PWAs


00:15:31.540 --> 00:15:35.020
and every time you detect like a manifest of JSON


00:15:35.020 --> 00:15:36.820
it will show you, do you wanna install this app?


00:15:36.820 --> 00:15:39.700
And I would just love to have like this click install


00:15:39.700 --> 00:15:42.340
and then have JupyterLite wherever I go


00:15:42.340 --> 00:15:44.700
or load it up on my iPad and then disconnect


00:15:44.700 --> 00:15:46.860
and still be tinkering around with what I want.


00:15:46.860 --> 00:15:48.740
So this is all browser-based.


00:15:48.740 --> 00:15:50.620
So that's really cool.


00:15:50.620 --> 00:15:51.620
I'm not gonna run any of these


00:15:51.620 --> 00:15:53.780
but I encourage everybody to check this out.


00:15:53.780 --> 00:15:55.180
It's pretty cool.


00:15:55.180 --> 00:15:56.260
- Yeah, yeah, this is really cool.


00:15:56.260 --> 00:15:58.500
I do the same thing with, I use Brave.


00:15:58.500 --> 00:16:01.980
So I have like a YouTube app installed on my Mac


00:16:01.980 --> 00:16:05.460
and I've got a Twitter app installed


00:16:05.460 --> 00:16:07.460
at all as progressive web apps so that you can just


00:16:07.460 --> 00:16:08.280
launch them.


00:16:08.280 --> 00:16:09.660
I do wish Firefox supported that.


00:16:09.660 --> 00:16:11.060
Firefox people, if you're listening,


00:16:11.060 --> 00:16:12.380
bring back the progressive web app.


00:16:12.380 --> 00:16:13.420
We all need this.


00:16:13.420 --> 00:16:14.260
- Yep.


00:16:14.260 --> 00:16:16.100
- Yeah, that's cool.


00:16:16.100 --> 00:16:17.260
What are some of the other notebooks in there


00:16:17.260 --> 00:16:18.100
that look cool?


00:16:18.100 --> 00:16:21.620
Are these like demo ones or did you--


00:16:21.620 --> 00:16:22.900
- Yeah, this is a demo one.


00:16:22.900 --> 00:16:26.580
So there are, this is a P5 JS one.


00:16:26.580 --> 00:16:27.820
There's the Altair one.


00:16:27.820 --> 00:16:29.780
I don't know what Folium is.


00:16:29.780 --> 00:16:32.540
There's interactive widgets, which is cool.


00:16:32.540 --> 00:16:37.540
So it still uses Jupyter's IPython notebook widgets.


00:16:37.540 --> 00:16:39.580
Math.lib.


00:16:39.580 --> 00:16:42.380
- Oh, Plotly as well.


00:16:42.380 --> 00:16:44.860
- And Plotly, cool.


00:16:44.860 --> 00:16:47.340
And so this is the de facto like PyOlight one.


00:16:47.340 --> 00:16:51.900
So it supports Matlab, Pandas, that's cool.


00:16:51.900 --> 00:16:53.780
- It supports LaTeX as well.


00:16:53.780 --> 00:16:56.180
- Yeah, it's really cool.


00:16:56.180 --> 00:16:58.380
- And so like, as I was saying before,


00:16:58.380 --> 00:17:01.700
PyOdyte is, what is it?


00:17:01.700 --> 00:17:06.700
Is like an implementation of Python on the browser.


00:17:06.700 --> 00:17:10.020
Actually the implementation of Python


00:17:10.020 --> 00:17:12.220
is on the computing stack on the browser.


00:17:12.220 --> 00:17:16.540
So I think things like Pandas, NuPy, SciPy, scikit-learn


00:17:16.540 --> 00:17:20.780
already like available, it's within the PyOdyte ecosystem.


00:17:20.780 --> 00:17:21.620
So you don't have to-


00:17:21.620 --> 00:17:23.620
- Yeah, I had the guys behind it,


00:17:23.620 --> 00:17:26.420
Firefox and Mozilla was behind it originally at least.


00:17:26.420 --> 00:17:28.900
And I had them on talk Python.


00:17:28.900 --> 00:17:31.020
I believe it's WebAssembly based.


00:17:31.020 --> 00:17:33.500
I think what they did is they took all these major


00:17:33.500 --> 00:17:36.100
visualization libraries and things like pandas and NumPy


00:17:36.100 --> 00:17:39.500
and compiled them all into a Python plus


00:17:39.500 --> 00:17:43.220
those WebAssembly thing that runs in the browser


00:17:43.220 --> 00:17:45.860
instead of a JavaScript version, which is pretty awesome.


00:17:45.860 --> 00:17:47.020
- Oh, yeah, it's so easy.


00:17:47.020 --> 00:17:49.100
- Yeah, the symbolic output, like the,


00:17:49.100 --> 00:17:52.020
got the math symbol integral of the square root


00:17:52.020 --> 00:17:54.020
One over XDX, beautiful.


00:17:54.020 --> 00:17:59.540
I wonder if you get hand calcs on it.


00:17:59.540 --> 00:18:00.380
- Oh, yeah.


00:18:00.380 --> 00:18:03.460
- Awesome.


00:18:03.460 --> 00:18:05.340
Cool, all right, well, that's a really good one.


00:18:05.340 --> 00:18:06.260
I love it.


00:18:06.260 --> 00:18:08.300
All the data scientists out there


00:18:08.300 --> 00:18:10.020
can definitely enjoy that.


00:18:10.020 --> 00:18:11.940
- Yeah, cool.


00:18:11.940 --> 00:18:18.180
Where do we go next?


00:18:18.180 --> 00:18:19.540
- I think you're up next.


00:18:19.540 --> 00:18:20.880
- Oh, right, okay.


00:18:21.980 --> 00:18:24.840
- So next we've got-- - More plotting maybe?


00:18:24.840 --> 00:18:26.300
- Yeah, more plotting.


00:18:26.300 --> 00:18:30.180
So this is a long title.


00:18:30.180 --> 00:18:32.060
Basically it's lots of plots.


00:18:32.060 --> 00:18:35.700
There's eight popular graphs made


00:18:35.700 --> 00:18:39.500
with pandas, matplotlib, seaborn, and plotly-express.


00:18:39.500 --> 00:18:43.460
And I, one of these, I've seen a lot of articles


00:18:43.460 --> 00:18:45.380
and stuff talking about how to do different plots


00:18:45.380 --> 00:18:47.760
in one or more of these.


00:18:47.760 --> 00:18:50.100
And a lot of them are, a lot of the articles,


00:18:50.100 --> 00:18:55.240
and rightly so, are focused on something cool you can do with one library that you can't do with others.


00:18:55.240 --> 00:18:59.100
And like I've seen Seaborn ones like that, and that's great.


00:18:59.100 --> 00:19:07.540
What I like about this article is it's like, well, let's just take these different pandas


00:19:07.540 --> 00:19:12.240
plotting and matplotlib, seaborn, and plotly express, and do the same plot.


00:19:12.240 --> 00:19:14.500
Let's do something they can all do.


00:19:14.500 --> 00:19:16.740
And so that's what this article does.


00:19:16.740 --> 00:19:18.840
It does a whole list.


00:19:18.840 --> 00:19:21.400
You got normal line charts,


00:19:21.400 --> 00:19:23.780
grouped bar charts, stacked bars,


00:19:23.780 --> 00:19:27.240
pies, a whole bunch of things, and histograms.


00:19:27.240 --> 00:19:29.320
Then you can just compare to


00:19:29.320 --> 00:19:33.240
see what it looks like before you try.


00:19:33.240 --> 00:19:36.320
For one, it's got the output,


00:19:36.320 --> 00:19:39.760
what do the graphs look like, which is important.


00:19:39.760 --> 00:19:43.080
But also, it's a fairly simple article,


00:19:43.080 --> 00:19:44.860
it's talking about what the plots look like,


00:19:44.860 --> 00:19:46.160
but also how do you make them?


00:19:46.160 --> 00:19:50.200
It's in a Jupyter Notebook viewer,


00:19:50.200 --> 00:19:55.600
and it shows you what's the code look like to get these plots set up.


00:19:55.600 --> 00:19:59.360
I think that's a big part of choosing your plotting library is looking at


00:19:59.360 --> 00:20:02.880
the API to see what kind of API looks comfortable to you.


00:20:02.880 --> 00:20:04.760
>> Yeah. I've got to write this code.


00:20:04.760 --> 00:20:06.280
Will I be able to remember this?


00:20:06.280 --> 00:20:06.840
>> Yeah.


00:20:06.840 --> 00:20:10.720
>> Or will it be like regular expressions and I learn it every time I use it?


00:20:10.720 --> 00:20:13.680
>> Yeah. Or if you get stuck with one and you want to switch to


00:20:13.680 --> 00:20:16.320
to sort of look at what the deltas are.


00:20:16.320 --> 00:20:18.040
I like these side-by-side,


00:20:18.040 --> 00:20:20.560
apples to apples comparison sort of articles.


00:20:20.560 --> 00:20:23.140
So I think this is good for choosing


00:20:23.140 --> 00:20:24.840
the simple parts of plotting.


00:20:24.840 --> 00:20:26.480
But some of the comparisons are sort of funny


00:20:26.480 --> 00:20:28.080
'cause like the bar charts,


00:20:28.080 --> 00:20:30.120
it just kind of all look the same.


00:20:30.120 --> 00:20:32.640
But. (laughs)


00:20:32.640 --> 00:20:35.120
- Oh, that one's orange versus orange and blue


00:20:35.120 --> 00:20:37.320
versus green and blue, it's not all the same.


00:20:37.320 --> 00:20:40.320
- Yeah, but you get down into some of the fancy ones


00:20:40.320 --> 00:20:42.360
and they, yeah, they do look great.


00:20:42.360 --> 00:20:45.360
some of the area charts.


00:20:45.360 --> 00:20:48.240
Yeah, that one looks great.


00:20:48.240 --> 00:20:49.360
What's that?


00:20:49.360 --> 00:20:51.520
Poly express area charts look awesome.


00:20:51.520 --> 00:20:53.360
- Yeah, the area charts look good.


00:20:53.360 --> 00:20:56.200
- And what's, I didn't know what a donut chart was.


00:20:56.200 --> 00:20:58.760
A donut chart was a pie chart with a hole in it.


00:20:58.760 --> 00:20:59.600
- Yep.


00:20:59.600 --> 00:21:00.640
- Why do people use that?


00:21:00.640 --> 00:21:06.640
- I think it's because of like with the pie charts,


00:21:06.640 --> 00:21:08.640
the sectors are kind of,


00:21:08.640 --> 00:21:11.240
it's kind of 'cause sometimes it can be hard to see


00:21:11.240 --> 00:21:13.300
like how much width,


00:21:13.300 --> 00:21:16.660
no, like the circumference of like this sector.


00:21:16.660 --> 00:21:17.860
So maybe the donut chart,


00:21:17.860 --> 00:21:20.220
it kind of makes it easier to see like, okay,


00:21:20.220 --> 00:21:22.440
this takes like all of this.


00:21:22.440 --> 00:21:24.620
It's just a visual thing to be honest.


00:21:24.620 --> 00:21:25.840
- Okay, good.


00:21:25.840 --> 00:21:28.460
- Nick, this is your world.


00:21:28.460 --> 00:21:29.300
What do you think?


00:21:29.300 --> 00:21:30.660
- I think this is really cool,


00:21:30.660 --> 00:21:32.100
but to be honest,


00:21:32.100 --> 00:21:34.260
all of these APIs don't compare


00:21:34.260 --> 00:21:37.340
to the grammar of graphics from R.


00:21:37.340 --> 00:21:39.340
And so I usually,


00:21:39.340 --> 00:21:43.500
- If I am going to do graphics in Python,


00:21:43.500 --> 00:21:47.100
I would prefer to use something that like conforms


00:21:47.100 --> 00:21:48.220
to the grammar of graphics,


00:21:48.220 --> 00:21:51.000
because to me that's kind of,


00:21:51.000 --> 00:21:55.580
you know how like Python has the import this


00:21:55.580 --> 00:21:57.940
and it's all philosophy how you write Python.


00:21:57.940 --> 00:21:59.620
The grammar of graphics like has that.


00:21:59.620 --> 00:22:03.220
So it has like, gives you these like sentences,


00:22:03.220 --> 00:22:05.240
so to speak to build graphics.


00:22:05.240 --> 00:22:07.500
And I like, that makes so much sense in my head.


00:22:07.500 --> 00:22:10.180
So like for a GraphQL reads,


00:22:10.180 --> 00:22:13.240
it's either Altair or ggplot.


00:22:13.240 --> 00:22:17.120
And there is like a Python port of ggplot


00:22:17.120 --> 00:22:18.140
that's pretty good.


00:22:18.140 --> 00:22:22.160
But I think Altair is like the Pythonic de facto version


00:22:22.160 --> 00:22:24.300
that I've used, that's really nice.


00:22:24.300 --> 00:22:26.700
All the other ones that make me have to do like,


00:22:26.700 --> 00:22:32.660
do these method calls on objects,


00:22:32.660 --> 00:22:35.260
just I can't remember it.


00:22:35.260 --> 00:22:37.260
I'll have to come back to something like this.


00:22:37.260 --> 00:22:41.100
So how do you use it in Matlab, or are you using Seaborn?


00:22:41.100 --> 00:22:44.860
I really like the fact that Seaborn has a lot of one-liners


00:22:44.860 --> 00:22:48.460
to do simple charts in one line, which is great.


00:22:48.460 --> 00:22:50.020
Unlike with the grammar graphics,


00:22:50.020 --> 00:22:52.380
still makes you have to build everything out.


00:22:52.380 --> 00:22:55.300
But if I'm building something really custom,


00:22:55.300 --> 00:22:58.860
or I am just building something


00:22:58.860 --> 00:23:02.140
that I want to have complete control over,


00:23:02.140 --> 00:23:04.340
the grammar graphics just gives me a better way


00:23:04.340 --> 00:23:06.620
of remembering what to do


00:23:06.620 --> 00:23:09.660
compared to having to remember all this API,


00:23:09.660 --> 00:23:11.220
all this method API calls.


00:23:11.220 --> 00:23:15.980
- Well, I mean, the author, Dylan Castillo,


00:23:15.980 --> 00:23:17.060
says, "Let me know what you think."


00:23:17.060 --> 00:23:19.340
So maybe we can give him some feedback


00:23:19.340 --> 00:23:22.620
to add Altair and a couple others.


00:23:22.620 --> 00:23:23.920
- Oh yeah, that'd be cool.


00:23:23.920 --> 00:23:27.860
- Okay, Dean also has some thoughts out there, Ryan.


00:23:27.860 --> 00:23:32.240
- Oh, Seaborn and Pandas use Matplotlib in the backend,


00:23:32.240 --> 00:23:34.680
so you can do everything they can do with Matplotlib.


00:23:34.680 --> 00:23:37.040
Okay, maybe harder, but not impossible.


00:23:37.040 --> 00:23:39.740
And also, that's probably why they look all the same.


00:23:39.740 --> 00:23:42.040
(both laughing)


00:23:42.040 --> 00:23:42.920
- They are the same.


00:23:42.920 --> 00:23:44.600
It's turtles all the way down.


00:23:44.600 --> 00:23:45.920
And he also says, "Remember kids,


00:23:45.920 --> 00:23:47.720
almost every command in Matplotlib


00:23:47.720 --> 00:23:50.000
returns the object it charts."


00:23:50.000 --> 00:23:52.920
That's the start of OOP, object-oriented plotting.


00:23:52.920 --> 00:23:54.240
All right, Rhino.


00:23:54.240 --> 00:23:55.760
- Oop, it'd be two Ps.


00:23:55.760 --> 00:23:57.780
Oop, boop, oop.


00:23:57.780 --> 00:24:00.440
(both laughing)


00:24:02.320 --> 00:24:04.880
All right, well, Brian, you gotta talk about databases,


00:24:04.880 --> 00:24:06.780
so I'm gonna talk about databases too.


00:24:06.780 --> 00:24:10.360
But my databases are gonna be smaller


00:24:10.360 --> 00:24:14.460
and in-memory and embedded, but also about MongoDB.


00:24:14.460 --> 00:24:17.460
So there's this really cool one created by David Latwe


00:24:17.460 --> 00:24:22.440
called MontyDB.


00:24:22.440 --> 00:24:27.440
So it's a Monty, it's a MongoDB tiny-ified,


00:24:27.440 --> 00:24:31.440
so it's MongoDB implemented in Python,


00:24:32.280 --> 00:24:34.020
and you can have it in process,


00:24:34.020 --> 00:24:36.260
kind of like SQLite, I believe.


00:24:36.260 --> 00:24:37.660
We've covered a couple of these libraries


00:24:37.660 --> 00:24:38.920
that are starting to show up


00:24:38.920 --> 00:24:41.100
that let you do sort of embedded MongoDB,


00:24:41.100 --> 00:24:42.960
which I think is really neat.


00:24:42.960 --> 00:24:48.120
So it's inspired by TinyDB


00:24:48.120 --> 00:24:51.100
and its extension, TinyMongo.


00:24:51.100 --> 00:24:53.300
So the way you work with it, it's super simple.


00:24:53.300 --> 00:24:55.380
You just import the Monty client.


00:24:55.380 --> 00:24:56.260
If you wanted to go crazy,


00:24:56.260 --> 00:24:57.980
you could say as Mongo client


00:24:57.980 --> 00:24:59.420
and make it basically the same.


00:24:59.420 --> 00:25:01.100
And then you can give it connection strings


00:25:01.100 --> 00:25:03.100
like colon memory colon,


00:25:03.100 --> 00:25:05.940
that should look familiar from something like SQLite.


00:25:05.940 --> 00:25:07.660
And then you can insert data to it,


00:25:07.660 --> 00:25:11.220
do all sorts of things and do queries against it,


00:25:11.220 --> 00:25:14.180
run like the MongoDB query syntax against it.


00:25:14.180 --> 00:25:17.200
And you get the responses back,


00:25:17.200 --> 00:25:19.100
which I think is pretty cool.


00:25:19.100 --> 00:25:21.700
It's certainly interesting for testing.


00:25:21.700 --> 00:25:23.940
If you told it to use a file storage,


00:25:23.940 --> 00:25:26.500
it could be an interesting little embedded database


00:25:26.500 --> 00:25:27.580
and things like that.


00:25:27.580 --> 00:25:29.260
So pretty cool.


00:25:29.260 --> 00:25:33.220
It supports many of the MongoDB versions up to 4.2 and 4.4


00:25:33.220 --> 00:25:35.900
on the way with wave emoji.


00:25:35.900 --> 00:25:38.420
I'm not really sure about that, but also--


00:25:38.420 --> 00:25:39.540
- Sweat.


00:25:39.540 --> 00:25:40.380
- What's that?


00:25:40.380 --> 00:25:41.460
- I think it's sweat.


00:25:41.460 --> 00:25:43.180
- Oh, gotcha.


00:25:43.180 --> 00:25:45.020
Like the work is being done, gotcha.


00:25:45.020 --> 00:25:48.900
So you can pip install MontyDB


00:25:48.900 --> 00:25:54.140
and it will work in sort of its way.


00:25:54.140 --> 00:25:58.020
If you want to use the actual serialization library


00:25:58.020 --> 00:26:02.260
from MongoDB itself, you can say install Monty DB


00:26:02.260 --> 00:26:05.180
bracket bson to install that as well.


00:26:05.180 --> 00:26:10.180
It also has a lightning memory map DB, LMDB library.


00:26:10.180 --> 00:26:13.540
You can use that as the storage engine as well.


00:26:13.540 --> 00:26:17.260
So you can pip install, you know, add that on as well.


00:26:17.260 --> 00:26:19.060
So for the storage, you've got in memory,


00:26:19.060 --> 00:26:20.300
you've got a flat file.


00:26:20.300 --> 00:26:22.700
It'll actually use SQL lite as a back end store,


00:26:22.700 --> 00:26:23.540
which is pretty cool.


00:26:23.540 --> 00:26:26.940
And then that LMDB lightning memory mapped DB.


00:26:26.940 --> 00:26:30.220
So, this looks pretty neat to me.


00:26:30.220 --> 00:26:33.020
If you're gonna do some kind of embedded thing


00:26:33.020 --> 00:26:34.280
or you're gonna do some testing


00:26:34.280 --> 00:26:36.360
and you want something lightweight,


00:26:36.360 --> 00:26:37.580
that's not a separate server,


00:26:37.580 --> 00:26:40.580
you've got to set up and run and all those kinds of things.


00:26:40.580 --> 00:26:42.380
This is cool.


00:26:42.380 --> 00:26:43.580
- I think it's awesome.


00:26:43.580 --> 00:26:45.720
- Could you make this a pytest fixture, Brian,


00:26:45.720 --> 00:26:47.460
that just gives you like presets,


00:26:47.460 --> 00:26:49.320
sets up your database and gives you access


00:26:49.320 --> 00:26:50.900
to the connection or something?


00:26:50.900 --> 00:26:52.620
- Yeah, I mean, actually, I don't,


00:26:52.620 --> 00:26:55.100
I'm not really a fan of people switching their databases


00:26:55.100 --> 00:26:57.940
too much for testing because most modern databases


00:26:57.940 --> 00:27:01.640
have in-memory options or smaller version options.


00:27:01.640 --> 00:27:05.400
But I mean, we use SQLite for tons of stuff.


00:27:05.400 --> 00:27:06.960
That's not just for testing.


00:27:06.960 --> 00:27:08.840
And if you've got SQLite at the backend,


00:27:08.840 --> 00:27:13.040
there's no reason why this couldn't be a production thing.


00:27:13.040 --> 00:27:14.480
- Yeah, absolutely.


00:27:14.480 --> 00:27:16.640
- No, this is really cool.


00:27:16.640 --> 00:27:19.680
This could be really useful for like CLI apps


00:27:19.680 --> 00:27:20.960
that need to store.


00:27:20.960 --> 00:27:22.680
- Yes, exactly.


00:27:22.680 --> 00:27:24.880
You wanna have a little thing, but you don't wanna say,


00:27:24.880 --> 00:27:26.520
"Oh, you want to run my little utility?


00:27:26.520 --> 00:27:31.040
I packaged it up with Py2 app or Py2 exe or something."


00:27:31.040 --> 00:27:32.480
You're going to need to install MongoDB


00:27:32.480 --> 00:27:33.920
and become an admin of that.


00:27:33.920 --> 00:27:37.480
Like, no, you just use like a SQLite file


00:27:37.480 --> 00:27:40.480
as the back end store or the LMDB version.


00:27:40.480 --> 00:27:43.840
Another thing that's common from the MongoDB world


00:27:43.840 --> 00:27:46.800
is there's a set of CLI tools that allows you to manage it.


00:27:46.800 --> 00:27:49.360
So I can connect to it.


00:27:49.360 --> 00:27:52.600
I can import a bunch of exported files


00:27:52.600 --> 00:27:56.800
from some other backed up files from some other MongoDB instance


00:27:56.800 --> 00:28:01.740
and import that into my current server or whatever,


00:28:01.740 --> 00:28:04.040
or create those exports, right?


00:28:04.040 --> 00:28:07.280
So there's actually a bunch of utilities called MontyImport,


00:28:07.280 --> 00:28:10.680
MontyExport, MontyRestore, MontyDump.


00:28:10.680 --> 00:28:18.080
All of these are the parallels of MongoDump, MongoRestore, and so on.


00:28:18.080 --> 00:28:20.760
All right, so if you're used to working with MongoDB,


00:28:20.760 --> 00:28:25.560
it's not just explicitly that there's some API to talk to some file.


00:28:25.560 --> 00:28:28.160
There's also the tools that are there as well.


00:28:28.160 --> 00:28:30.300
Yeah.


00:28:30.300 --> 00:28:33.140
I think it could be a cool project.


00:28:33.140 --> 00:28:36.260
I said, "Why did I make this?" Mostly for just fun and practicing on it,


00:28:36.260 --> 00:28:39.740
but also I needed to run in this limited little environments


00:28:39.740 --> 00:28:42.440
for render farms in the film industry.


00:28:42.440 --> 00:28:43.440
So that's pretty cool.


00:28:43.440 --> 00:28:44.700
[LAUGHS]


00:28:44.700 --> 00:28:47.100
It's a side project also with render farms.


00:28:47.100 --> 00:28:49.300
[LAUGHS]


00:28:49.300 --> 00:28:51.800
- It's a side project for my super computer, yes.


00:28:51.800 --> 00:28:53.240
(laughing)


00:28:53.240 --> 00:28:56.460
- I love the name by the way, Monty Python.


00:28:56.460 --> 00:29:00.540
- Yeah, I mean, yeah, it really brings the MongoDB wordplay


00:29:00.540 --> 00:29:04.600
in with Monty Python, Python origin, yeah, pretty cool.


00:29:04.600 --> 00:29:07.480
All right, Nick, you got the last one?


00:29:07.480 --> 00:29:08.500
- Awesome.


00:29:08.500 --> 00:29:13.960
So, exhaustiveness checking with mypy.


00:29:13.960 --> 00:29:18.400
So essentially what exhaustiveness checking is,


00:29:18.400 --> 00:29:21.560
is a feature of a lot of type checkers


00:29:21.560 --> 00:29:25.320
where they guarantee that the programmer


00:29:25.320 --> 00:29:27.640
has covered all their cases.


00:29:27.640 --> 00:29:32.640
And so with mypy, you could essentially check things


00:29:32.640 --> 00:29:35.280
like whether you've covered all the,


00:29:35.280 --> 00:29:37.840
you have written all the if statements


00:29:37.840 --> 00:29:40.040
you're supposed to write at compile time


00:29:40.040 --> 00:29:43.200
rather than figuring that out at run time.


00:29:43.200 --> 00:29:46.720
And I really got into using mypy


00:29:46.720 --> 00:29:51.720
and trying to like have it save my butt a lot


00:29:51.720 --> 00:29:54.960
the way I think about code by embracing types.


00:29:54.960 --> 00:29:57.920
So I stumbled across this, which was like really interesting


00:29:57.920 --> 00:30:02.840
where this article written by Haki Benita


00:30:02.840 --> 00:30:07.600
went into how like auxiliary networking actually works.


00:30:07.600 --> 00:30:12.600
So they start out with enum that has order status


00:30:13.760 --> 00:30:17.840
and you have a function that is called handleOrder


00:30:17.840 --> 00:30:22.480
that takes a status, which should be an instance


00:30:22.480 --> 00:30:23.380
of order status.


00:30:23.380 --> 00:30:27.800
And so in his function, he has it like,


00:30:27.800 --> 00:30:30.460
if status is order ready, you do something.


00:30:30.460 --> 00:30:32.700
If status is order shipped, you do something.


00:30:32.700 --> 00:30:37.700
But then he added this new scenario


00:30:37.700 --> 00:30:43.100
where what if you wanted to check the status


00:30:43.100 --> 00:30:44.460
of something scheduled.


00:30:44.460 --> 00:30:46.580
And so he tried to run my PI right now


00:30:46.580 --> 00:30:47.780
and I didn't complain about it.


00:30:47.780 --> 00:30:49.580
So like, okay, cool.


00:30:49.580 --> 00:30:51.340
- Yeah, 'cause one of the things that's very common


00:30:51.340 --> 00:30:53.900
is if you have something like a set of cases,


00:30:53.900 --> 00:30:57.660
in this case, it's put together in an enumeration,


00:30:57.660 --> 00:30:59.260
you have more cases over time,


00:30:59.260 --> 00:31:03.320
but all these if else if else if else if statements


00:31:03.320 --> 00:31:05.740
all over your code,


00:31:05.740 --> 00:31:07.340
have you exhaustively gone through


00:31:07.340 --> 00:31:09.480
and added that case check for all of them?


00:31:09.480 --> 00:31:11.540
Probably not, unless you've got a good test,


00:31:11.540 --> 00:31:12.940
- A really good test, yeah.


00:31:12.940 --> 00:31:19.300
- Okay, and so he proposed like one quick way of checking


00:31:19.300 --> 00:31:24.740
that you've handled all cases is by adding this assert false


00:31:24.740 --> 00:31:27.780
comma on handle status,


00:31:27.780 --> 00:31:30.300
and you pass in the status like using f-strings.


00:31:30.300 --> 00:31:33.340
And so then when you try to pass a state


00:31:33.340 --> 00:31:35.860
that you have not actually handled before,


00:31:35.860 --> 00:31:38.700
you actually get assertion error, right?


00:31:38.700 --> 00:31:41.740
which is all right, but if you use mypy,


00:31:41.740 --> 00:31:45.260
there's this clever trick where you create a function


00:31:45.260 --> 00:31:49.740
called assertNever that takes a value called noReturn


00:31:49.740 --> 00:31:53.220
and returns noReturn, and in it,


00:31:53.220 --> 00:31:55.900
it has the assertFalse unhandled value.


00:31:55.900 --> 00:31:59.420
And so then when you use that function


00:31:59.420 --> 00:32:03.300
in your handleOrder function,


00:32:03.300 --> 00:32:07.300
you, at the end case, you have this else assertNever,


00:32:07.300 --> 00:32:09.280
and you're passing the status.


00:32:09.280 --> 00:32:11.420
Now when you check with mypy, mypy will know,


00:32:11.420 --> 00:32:14.480
hey, argument one to assert has incompatible type,


00:32:14.480 --> 00:32:18.200
literal, or their status schedule, expected, no return.


00:32:18.200 --> 00:32:19.620
- How interesting.


00:32:19.620 --> 00:32:20.980
- Yeah, and this is a compile time,


00:32:20.980 --> 00:32:21.820
and you can actually get this.


00:32:21.820 --> 00:32:23.780
- Yeah, yeah, I think that's the important thing,


00:32:23.780 --> 00:32:24.940
'cause I was looking at that going,


00:32:24.940 --> 00:32:26.380
oh, I could just add the else statement


00:32:26.380 --> 00:32:29.540
and put the assert there and have nothing to do with mypy,


00:32:29.540 --> 00:32:31.160
and it would catch that error.


00:32:31.160 --> 00:32:33.620
But that catches that error when that code runs.


00:32:33.620 --> 00:32:35.660
Like I said before, hopefully there's tests,


00:32:35.660 --> 00:32:38.420
but oftentimes there's not tests for everything.


00:32:38.420 --> 00:32:39.260
- Yeah.


00:32:39.260 --> 00:32:42.740
- And so especially there might not be a test


00:32:42.740 --> 00:32:44.180
for the new thing you've added.


00:32:44.180 --> 00:32:46.900
And so this is cool in that it checks


00:32:46.900 --> 00:32:48.540
all the possible types that could go in there.


00:32:48.540 --> 00:32:49.380
That's cool.


00:32:49.380 --> 00:32:53.340
- Yeah, and the part that really got me


00:32:53.340 --> 00:32:56.940
was that it integrates with your IDE.


00:32:56.940 --> 00:33:00.300
So PyCharm, VS Code, or any editor


00:33:00.300 --> 00:33:02.900
that implements a language server


00:33:02.900 --> 00:33:04.660
can then like look at this and say,


00:33:04.660 --> 00:33:07.520
"Hey, you haven't handled all your cases."


00:33:07.520 --> 00:33:09.940
Right, and you get that immediate feedback


00:33:09.940 --> 00:33:11.700
rather than having to run your code


00:33:11.700 --> 00:33:15.620
and then find out, "Oh, dang it, I missed this case."


00:33:15.620 --> 00:33:17.120
- Yeah, so people who are not looking


00:33:17.120 --> 00:33:19.380
at the live stream, YouTube stream,


00:33:19.380 --> 00:33:21.660
which is almost all the people listening,


00:33:21.660 --> 00:33:26.620
Nick is showing on the screen this assert function


00:33:26.620 --> 00:33:29.100
that's checking the numeration.


00:33:29.100 --> 00:33:32.640
And there's just a red squiggly line that literally says,


00:33:32.640 --> 00:33:36.080
a cert never has incompatible order status at scheduled,


00:33:36.080 --> 00:33:38.400
that's the missed enumeration case.


00:33:38.400 --> 00:33:40.620
I think that's incredible that actually finds this.


00:33:40.620 --> 00:33:45.620
- Yeah, and it works because mypy uses this technique


00:33:45.620 --> 00:33:49.600
called type narrowing.


00:33:49.600 --> 00:33:53.480
And essentially what that means is that it would,


00:33:53.480 --> 00:34:00.440
given a variable as it goes through like a control flow,


00:34:00.440 --> 00:34:03.900
like if statements, switch statements, while loop,


00:34:03.900 --> 00:34:06.280
Mypy will like kind of confine,


00:34:06.280 --> 00:34:09.520
or in other words, narrow down the types


00:34:09.520 --> 00:34:12.120
as it goes through those control flow programs.


00:34:12.120 --> 00:34:17.120
And so it works with enumeration types, unions, literals.


00:34:17.120 --> 00:34:19.760
So you have in the article,


00:34:19.760 --> 00:34:22.740
there are examples of how you could pass in a union


00:34:22.740 --> 00:34:24.740
of different types, strings, float,


00:34:24.740 --> 00:34:26.280
and you could still use this technique


00:34:26.280 --> 00:34:29.980
and it'll tell you, hey, you've missed a case,


00:34:29.980 --> 00:34:32.460
or you could do this with literals.


00:34:32.460 --> 00:34:37.380
So you have like RGB and then you only implemented the,


00:34:37.380 --> 00:34:40.580
you only check for like two cases, which are R and G,


00:34:40.580 --> 00:34:41.500
and they need to tell you,


00:34:41.500 --> 00:34:44.820
hey, you did not handle the B case.


00:34:44.820 --> 00:34:48.840
So yeah, and so like the article goes further


00:34:48.840 --> 00:34:52.700
into different ways in which you could set this up,


00:34:52.700 --> 00:34:57.060
have my point, check all of the different places for you,


00:34:57.060 --> 00:34:57.900
which is really cool.


00:34:57.900 --> 00:35:00.880
- I like the various sweets for cards,


00:35:00.880 --> 00:35:02.700
like clubs, diamonds, hearts.


00:35:02.700 --> 00:35:06.200
- I know, it's interesting that,


00:35:06.200 --> 00:35:08.740
to Mai Pai, when it sees an enum


00:35:08.740 --> 00:35:12.120
that has like clubs, diamonds, hearts, and spades,


00:35:12.120 --> 00:35:15.480
all it sees is like a union of literals,


00:35:15.480 --> 00:35:19.120
which are sweets, cards, sweet clubs, sweet hearts,


00:35:19.120 --> 00:35:20.120
which is actually interesting.


00:35:20.120 --> 00:35:21.440
That's how Mai Pai sees it.


00:35:21.440 --> 00:35:22.400
- Yeah, that's very interesting.


00:35:22.400 --> 00:35:25.120
I mean, basically it's emojis.


00:35:25.120 --> 00:35:27.320
- Yeah, it's basically emojis, right.


00:35:27.320 --> 00:35:32.320
The one other thing I wanted to mention here is that,


00:35:32.320 --> 00:35:39.280
that was a specific, oh yeah.


00:35:39.280 --> 00:35:43.600
This feature is actually something that Guido


00:35:43.600 --> 00:35:45.120
actually thought was pretty cool.


00:35:45.120 --> 00:35:48.560
And so I think it's part of PEP 622,


00:35:48.560 --> 00:35:50.600
structural pattern matching already.


00:35:50.600 --> 00:35:54.200
So if you are matching against an enum,


00:35:54.200 --> 00:35:58.260
or something that has multiple different states,


00:35:58.260 --> 00:36:01.720
the matching, hopefully Python 3.10


00:36:01.720 --> 00:36:02.800
will give you a nice error saying,


00:36:02.800 --> 00:36:07.800
hey, you missed a particular case.


00:36:07.800 --> 00:36:11.120
And this could really, and if you're a Django developer


00:36:11.120 --> 00:36:13.240
or you just use Django or even, yeah,


00:36:13.240 --> 00:36:18.240
you use any ORM and the ORM provides something like choices


00:36:18.240 --> 00:36:22.160
where like yes, no, or dollar, euro,


00:36:22.160 --> 00:36:24.560
like these kinds of choices in the field,


00:36:24.560 --> 00:36:25.840
this works pretty well.


00:36:25.840 --> 00:36:26.980
And so in your Django code,


00:36:26.980 --> 00:36:28.720
you could actually have mypy telling you,


00:36:28.720 --> 00:36:32.640
hey, you missed handling a particular case.


00:36:32.640 --> 00:36:33.640
- Crazy.


00:36:33.640 --> 00:36:34.800
- Yeah, that's awesome.


00:36:34.800 --> 00:36:37.340
- Yeah, this is really cool.


00:36:37.340 --> 00:36:38.640
- Yeah, Sam out in the live stream


00:36:38.640 --> 00:36:40.280
was sort of onto the same thoughts


00:36:40.280 --> 00:36:42.320
you were talking about with Guido there.


00:36:42.320 --> 00:36:45.040
Wonder if one could hack on the match mechanism


00:36:45.040 --> 00:36:47.320
to deliver this functionality at runtime,


00:36:47.320 --> 00:36:51.700
using by somehow getting all the variants


00:36:51.700 --> 00:36:54.420
of the enum and checking the branches of the AST or something.


00:36:54.420 --> 00:36:54.920
Yeah.


00:36:54.920 --> 00:37:00.660
>> That's actually interesting because I know that part of the structural pattern matching,


00:37:00.660 --> 00:37:05.980
like any object can implement the magic method match,


00:37:05.980 --> 00:37:13.500
and maybe that's your entry point into providing that kind of checking at runtime.


00:37:13.500 --> 00:37:15.620
Of course, with Python,


00:37:15.620 --> 00:37:19.860
anything that is around runtime checking,


00:37:19.860 --> 00:37:21.540
there's performance costs with that.


00:37:21.540 --> 00:37:22.700
So be careful.


00:37:22.700 --> 00:37:27.460
- Yeah, but having this built into my pipe already


00:37:27.460 --> 00:37:28.280
would be good.


00:37:28.280 --> 00:37:34.540
- And Juergen is talking about on the live stream,


00:37:34.540 --> 00:37:36.780
he says, I wonder whether you could rewrite the code


00:37:36.780 --> 00:37:38.780
to not use if statements at all,


00:37:38.780 --> 00:37:42.420
but be more polymorphic, which I agree.


00:37:42.420 --> 00:37:44.000
That's a really interesting idea


00:37:44.000 --> 00:37:46.920
with the method overloading and stuff.


00:37:46.920 --> 00:37:49.880
And it reminds me back a couple of weeks ago,


00:37:49.880 --> 00:37:51.600
Brian talked about function overloading


00:37:51.600 --> 00:37:54.000
with single dispatch and multiple dispatch.


00:37:54.000 --> 00:37:56.360
And yeah, you could kind of more or less


00:37:56.360 --> 00:37:57.280
make that happen there.


00:37:57.280 --> 00:37:58.320
So yeah, pretty neat.


00:37:58.320 --> 00:38:02.660
Although you still may miss a case.


00:38:02.660 --> 00:38:04.480
I'm not entirely sure.


00:38:04.480 --> 00:38:06.680
At least in the enumeration bit, that won't help you, right?


00:38:06.680 --> 00:38:08.400
'Cause the enum will still be the same type.


00:38:08.400 --> 00:38:10.960
It'll just, you'll still have more values.


00:38:10.960 --> 00:38:14.240
- Yep.


00:38:14.240 --> 00:38:16.340
- Awesome.


00:38:16.340 --> 00:38:17.180
Good one, Nick.


00:38:17.180 --> 00:38:21.020
Brian, what else we got?


00:38:21.020 --> 00:38:24.220
- Well, I've got a couple of things.


00:38:24.220 --> 00:38:27.180
One of the things I wanted to note was that


00:38:27.180 --> 00:38:30.460
this is the second week in a row we've featured an article


00:38:30.460 --> 00:38:35.300
by Hockey and the third in this year.


00:38:35.300 --> 00:38:37.420
So we should probably try to get him on the show


00:38:37.420 --> 00:38:38.260
or something.


00:38:38.260 --> 00:38:40.820
- Yeah, sounds good.


00:38:40.820 --> 00:38:42.920
- He's doing some good writing, so thanks.


00:38:42.920 --> 00:38:46.540
The other thing I wanted to mention is


00:38:46.540 --> 00:38:50.900
I've got, oh yeah, by the way, my book is out.


00:38:50.900 --> 00:38:54.980
- Yay, this is a good book too.


00:38:54.980 --> 00:38:58.420
- Yeah, second edition of Pytest is available for beta.


00:38:58.420 --> 00:39:01.300
So people can tell me everything that's,


00:39:01.300 --> 00:39:04.540
I already got it, somebody said they have got an issue.


00:39:04.540 --> 00:39:08.780
It's a minor issue with it already, so thanks.


00:39:08.780 --> 00:39:11.680
But it's just been me and my editor so far


00:39:11.680 --> 00:39:12.520
working through it.


00:39:12.520 --> 00:39:14.340
So having more people, more eyes


00:39:14.340 --> 00:39:17.340
before we go to shipping the physical book,


00:39:17.340 --> 00:39:18.280
it would be great.


00:39:18.280 --> 00:39:21.300
So of course this is through Pragmatic,


00:39:21.300 --> 00:39:24.580
but if you go to pytestbook.com, it'll take you there.


00:39:24.580 --> 00:39:26.820
So that was my extra.


00:39:26.820 --> 00:39:27.660
- Right on.


00:39:27.660 --> 00:39:28.860
Cool, I've got a couple as well.


00:39:28.860 --> 00:39:30.460
Yeah, I got some neat ones here.


00:39:30.460 --> 00:39:36.460
So how often do you maybe have like a blueprint, floor plan?


00:39:36.460 --> 00:39:38.540
Maybe you're looking at a house


00:39:38.540 --> 00:39:40.580
and you're trying to decide whether you wanna buy it.


00:39:40.580 --> 00:39:43.660
What would it be like to actually live in there?


00:39:43.660 --> 00:39:45.060
Maybe you're trying to figure out,


00:39:45.060 --> 00:39:47.020
well, I'm planning out this apartment


00:39:47.020 --> 00:39:48.900
or I have this place, I wanna remodel it


00:39:48.900 --> 00:39:53.500
with like Ikea it all out or something along those lines.


00:39:53.500 --> 00:39:57.420
I ran across this thing that uses some interesting models


00:39:57.420 --> 00:39:59.700
called plan to scene.


00:39:59.700 --> 00:40:04.260
So the idea is it'll take what is literally a floor plan,


00:40:04.260 --> 00:40:06.100
like a blueprint floor plan that shows


00:40:06.100 --> 00:40:07.800
like swinging doors in bits.


00:40:07.800 --> 00:40:11.260
And then you tell it what kind of room it is.


00:40:11.260 --> 00:40:13.380
It's like a bedroom or a bathroom or whatever.


00:40:13.380 --> 00:40:17.700
And it will generate a 3D world that


00:40:17.700 --> 00:40:22.060
has things like sinks and toilets and couches that


00:40:22.060 --> 00:40:26.300
are three-dimensional, not just somehow projected in there.


00:40:26.300 --> 00:40:29.400
So there's all of these interesting things.


00:40:29.400 --> 00:40:30.980
You can see there's-- if you pull up the site,


00:40:30.980 --> 00:40:32.400
there's all these spinning worlds.


00:40:32.400 --> 00:40:34.860
And you can see that they've created


00:40:34.860 --> 00:40:37.740
these little environments just from floor plans, which


00:40:37.740 --> 00:40:40.540
I think is pretty insane.


00:40:40.540 --> 00:40:42.020
So anyway, you can--


00:40:42.020 --> 00:40:43.020
go ahead, Nick.


00:40:43.020 --> 00:40:45.240
- No, that's really cool.


00:40:45.240 --> 00:40:46.840
I think I wonder if like,


00:40:46.840 --> 00:40:49.880
'cause like Tremble, we own like SketchUp.


00:40:49.880 --> 00:40:52.080
I wonder if they do this kind of stuff.


00:40:52.080 --> 00:40:56.540
They take floor plans and then they make it 3D.


00:40:56.540 --> 00:40:58.080
That's really cool.


00:40:58.080 --> 00:41:00.840
- Yeah, there's a whole bunch of comparisons


00:41:00.840 --> 00:41:02.080
of how it used to be done,


00:41:02.080 --> 00:41:03.960
how you can pick like different,


00:41:03.960 --> 00:41:06.400
you know, different flooring and walls


00:41:06.400 --> 00:41:08.340
and source codes available on GitHub.


00:41:08.340 --> 00:41:09.180
People can run with that.


00:41:09.180 --> 00:41:10.200
So that's pretty cool.


00:41:10.200 --> 00:41:12.200
It's called plan to scene.


00:41:12.200 --> 00:41:15.920
And then just a quick shout out to this TCAST podcast.


00:41:15.920 --> 00:41:17.840
I happen to be a guest of recently


00:41:17.840 --> 00:41:21.720
and we got to talk about Python and data science


00:41:21.720 --> 00:41:25.040
and how Python and data are sort of changing the world


00:41:25.040 --> 00:41:25.880
and stuff and it's really fun.


00:41:25.880 --> 00:41:28.080
So people can check that out.


00:41:28.080 --> 00:41:29.460
Yeah, and that's it for the things I got.


00:41:29.460 --> 00:41:31.500
Nick, anything else you wanna throw out there?


00:41:31.500 --> 00:41:34.140
- Yeah, just a shameless plug.


00:41:34.140 --> 00:41:41.700
As I said earlier on the live stream,


00:41:41.700 --> 00:41:46.740
I co-host the CLEPI, which is Cleveland's Area Python Meetup


00:41:46.740 --> 00:41:47.620
Group.


00:41:47.620 --> 00:41:54.580
And so we have meetups every second Monday of the month.


00:41:54.580 --> 00:41:58.260
And one of the reasons why I would encourage anybody


00:41:58.260 --> 00:42:01.620
across the world or US or everywhere


00:42:01.620 --> 00:42:05.860
to still come and present is because oftentimes,


00:42:05.860 --> 00:42:09.460
meetups are a great place to present talks


00:42:09.460 --> 00:42:11.700
that you are planning on giving in maybe like


00:42:11.700 --> 00:42:17.980
continental conferences or like other larger conferences,


00:42:17.980 --> 00:42:22.980
smaller crowd and we show you guys a good time, right?


00:42:22.980 --> 00:42:25.180
So it's a great place to come, give your talk,


00:42:25.180 --> 00:42:29.540
get feedback from that and then take and improve on it.


00:42:29.540 --> 00:42:30.740
So that's one.


00:42:30.740 --> 00:42:32.300
And then the other,


00:42:32.300 --> 00:42:36.540
streamless blog is that Pi Ohio


00:42:36.540 --> 00:42:41.540
It has its own conference coming up on July 31st.


00:42:41.540 --> 00:42:43.620
Registrations are open.


00:42:43.620 --> 00:42:45.320
We have pretty cool t-shirts.


00:42:45.320 --> 00:42:47.060
So yeah, register.


00:42:47.060 --> 00:42:50.860
- And that's a, is that live or streaming?


00:42:50.860 --> 00:42:53.820
- Yes, that is being streamed.


00:42:53.820 --> 00:42:54.660
- Okay.


00:42:54.660 --> 00:42:56.420
How about your meetups?


00:42:56.420 --> 00:42:58.700
Are those being, are those streamed or live?


00:42:58.700 --> 00:42:59.660
- Those are virtual.


00:42:59.660 --> 00:43:02.460
We have them like in person.


00:43:02.460 --> 00:43:04.980
And that's, I really, that's when like pandemic


00:43:04.980 --> 00:43:09.460
mess things up because you have stuff like pizza over and just have a good time talking about


00:43:09.460 --> 00:43:17.300
Python. But no, the virtual setting has given a lot more people access. We're able to have more


00:43:17.300 --> 00:43:25.060
people on. So nice. Yeah, that's fantastic. And PyOhio is definitely one of those big regional


00:43:25.060 --> 00:43:30.500
conferences that a lot of people pay attention to, even if they're not in Ohio. Are you going to go


00:43:30.500 --> 00:43:31.820
- So are you gonna go back to in-person only?


00:43:31.820 --> 00:43:34.440
Are you gonna do like a hybrid stream and in-person


00:43:34.440 --> 00:43:37.080
or is it gonna be, what's your plans


00:43:37.080 --> 00:43:39.480
for when the world returns to normal?


00:43:39.480 --> 00:43:41.680
- That's if it ever returns to normal.


00:43:41.680 --> 00:43:43.280
I think we'll change forever.


00:43:43.280 --> 00:43:45.800
But to answer your question,


00:43:45.800 --> 00:43:50.800
I think my co-organizer and I have been thinking about it.


00:43:50.800 --> 00:43:52.640
We don't, we're not yet set yet.


00:43:52.640 --> 00:43:55.120
Like we see the benefits of the virtual,


00:43:55.120 --> 00:43:57.960
but we also see the benefits of the live.


00:43:57.960 --> 00:44:00.080
And there are things that have changed so much.


00:44:00.080 --> 00:44:01.720
you don't even know whether the live


00:44:01.720 --> 00:44:03.200
in person is still available.


00:44:03.200 --> 00:44:05.400
But no, just something we're thinking about.


00:44:05.400 --> 00:44:07.840
- Yeah, cool.


00:44:07.840 --> 00:44:09.000
Well, it's a challenge.


00:44:09.000 --> 00:44:11.480
I think all the meetups and other events are having,


00:44:11.480 --> 00:44:12.960
especially these smaller,


00:44:12.960 --> 00:44:16.760
like monthly, bi-weekly sort of things.


00:44:16.760 --> 00:44:17.640
You know, it's one thing to say


00:44:17.640 --> 00:44:19.040
that there's gonna be a big conference


00:44:19.040 --> 00:44:21.080
and we'll all either go to it or not.


00:44:21.080 --> 00:44:23.280
But if you're doing it every couple of weeks


00:44:23.280 --> 00:44:25.600
and it's mostly local, but not 100% local,


00:44:25.600 --> 00:44:27.040
yeah, it's a challenge.


00:44:27.040 --> 00:44:27.880
- Yeah.


00:44:29.000 --> 00:44:30.720
Fantastic.


00:44:30.720 --> 00:44:33.560
All right, Brian, you ready for a joke?


00:44:33.560 --> 00:44:34.600
Definitely.


00:44:34.600 --> 00:44:35.560
OK.


00:44:35.560 --> 00:44:37.600
So I've got one, and then Nick has one.


00:44:37.600 --> 00:44:43.640
So this one, the title of the joke is "Root Beer Float."


00:44:43.640 --> 00:44:46.520
So a programmer walks into a bar.


00:44:46.520 --> 00:44:53.200
He orders 1.000000119 root beers.


00:44:53.200 --> 00:44:55.820
The bartender says, I'm going to have to charge you extra.


00:44:55.820 --> 00:44:58.240
That's a root beer float.


00:44:58.240 --> 00:45:01.240
The programmer says, "Well, in that case, make it a double."


00:45:01.240 --> 00:45:03.660
It's bad, right?


00:45:03.660 --> 00:45:05.020
- That's bad.


00:45:05.020 --> 00:45:05.860
- Yeah.


00:45:05.860 --> 00:45:06.700
- All right.


00:45:06.700 --> 00:45:08.260
And Nick, you've got one as well.


00:45:08.260 --> 00:45:10.120
You wanna do this one for us?


00:45:10.120 --> 00:45:11.700
- Yeah, would someone like to-


00:45:11.700 --> 00:45:14.540
- You want me to be the bearded person?


00:45:14.540 --> 00:45:16.460
- Yeah, you already have something going on there.


00:45:16.460 --> 00:45:18.260
So, all right.


00:45:18.260 --> 00:45:22.980
So, will refactoring the code improve the loading time?


00:45:22.980 --> 00:45:24.140
- Not really.


00:45:24.140 --> 00:45:26.260
- Will it improve the security then?


00:45:26.260 --> 00:45:27.180
- No.


00:45:27.180 --> 00:45:29.460
So it's for browser compatibility.


00:45:29.460 --> 00:45:31.580
- Yeah, no, not really, nope.


00:45:31.580 --> 00:45:34.960
- So tell me, why is it always the same old story


00:45:34.960 --> 00:45:37.820
with you guys wanting to refactor everything?


00:45:37.820 --> 00:45:40.140
I need to know.


00:45:40.140 --> 00:45:44.020
- Because as devs, if we know, excuse me,


00:45:44.020 --> 00:45:46.040
if we know we've left behind some messy code,


00:45:46.040 --> 00:45:47.500
we can't stop thinking about it.


00:45:47.500 --> 00:45:49.960
We wake up in the morning, at lunchtime,


00:45:49.960 --> 00:45:51.740
in the evening, when we go home,


00:45:51.740 --> 00:45:53.420
and when we're trying to go to sleep,


00:45:53.420 --> 00:45:56.860
it haunts us, you know, it haunts us.


00:45:56.860 --> 00:45:58.580
(laughing)


00:45:58.580 --> 00:45:59.420
- I love it.


00:45:59.420 --> 00:46:01.460
- And it's true too.


00:46:01.460 --> 00:46:05.340
- Totally true, it's totally true.


00:46:05.340 --> 00:46:07.460
- All right, I have one more joke for you guys.


00:46:07.460 --> 00:46:08.740
- Oh yeah, hit us.


00:46:08.740 --> 00:46:11.360
- All right, how much does a chimney cost?


00:46:11.360 --> 00:46:14.620
- Dunno.


00:46:14.620 --> 00:46:16.060
- No idea.


00:46:16.060 --> 00:46:17.460
- Nothing, it's on the house.


00:46:17.460 --> 00:46:19.780
(laughing)


00:46:19.780 --> 00:46:20.620
- Very good.


00:46:20.620 --> 00:46:25.820
- I have a friend that is so into dad jokes,


00:46:25.820 --> 00:46:28.580
which is weird because it's only 22.


00:46:28.580 --> 00:46:33.420
- Practicing for the future.


00:46:33.420 --> 00:46:35.380
- Yeah, that was practicing for the future.


00:46:35.380 --> 00:46:37.900
- I think my dad can be blamed for all bad jokes.


00:46:37.900 --> 00:46:41.300
Anyway.


00:46:41.300 --> 00:46:45.060
Yeah, I wanna highlight,


00:46:45.060 --> 00:46:48.840
Jurgen says that they cost 2,500 euros.


00:46:48.840 --> 00:46:52.420
- That's expensive.


00:46:54.380 --> 00:46:56.740
- Well, thanks a lot for joining us today.


00:46:56.740 --> 00:46:57.840
This was a lot of fun.


00:46:57.840 --> 00:47:01.580
And thanks everybody in the stream for showing up


00:47:01.580 --> 00:47:04.860
and we'll talk to everybody next week.


00:47:04.860 --> 00:47:06.180
- Thanks, bye everyone.


00:47:06.180 --> 00:47:07.020
- Bye.


00:47:07.020 --> 00:47:17.020
[BLANK_AUDIO]

