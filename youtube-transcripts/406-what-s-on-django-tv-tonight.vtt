WEBVTT

00:00:00.001 --> 00:00:03.480
Hey, Brian. Ready to kick this off?

00:00:03.480 --> 00:00:04.140
Yeah.

00:00:04.140 --> 00:00:06.380
Awesome, awesome.

00:00:06.380 --> 00:00:09.580
Hello and welcome to Python Bytes,

00:00:09.580 --> 00:00:11.160
where we deliver Python news and headlines

00:00:11.160 --> 00:00:12.840
directly to your earbuds.

00:00:12.840 --> 00:00:15.540
This is episode 406,

00:00:15.540 --> 00:00:19.580
recorded Monday, October 21st, 2024.

00:00:19.580 --> 00:00:20.520
I'm Michael Kennedy.

00:00:20.520 --> 00:00:21.860
And I'm Brian Nocken.

00:00:21.860 --> 00:00:25.700
And this episode is brought to you by Scout APM.

00:00:25.700 --> 00:00:28.540
We would love to tell you more about them later.

00:00:29.580 --> 00:00:31.340
If you want to stay in touch with us,

00:00:31.340 --> 00:00:32.420
send us show ideas.

00:00:32.420 --> 00:00:34.720
We love it when people send us ideas like,

00:00:34.720 --> 00:00:35.860
hey, you should check out this.

00:00:35.860 --> 00:00:38.460
Because Brian, usually it starts with,

00:00:38.460 --> 00:00:42.920
I'm sure you've heard of this, but here it is.

00:00:42.920 --> 00:00:44.240
I'm like, I've not heard of that.

00:00:44.240 --> 00:00:45.780
And I really appreciate you sending it.

00:00:45.780 --> 00:00:47.500
So keep that kind of stuff coming.

00:00:47.500 --> 00:00:48.480
It helps us a lot, right?

00:00:48.480 --> 00:00:49.180
Definitely.

00:00:49.180 --> 00:00:51.040
And even if we have,

00:00:51.040 --> 00:00:53.820
we at most get a couple duplicates.

00:00:53.820 --> 00:00:55.320
Yeah, exactly.

00:00:55.320 --> 00:00:58.380
If you want to stay in touch with us or send us things,

00:00:58.620 --> 00:01:00.800
find us on Mastodon or shoot us an email.

00:01:00.800 --> 00:01:02.880
Links at the top of the show notes.

00:01:02.880 --> 00:01:08.360
And do consider signing up for the newsletter,

00:01:08.360 --> 00:01:11.420
the newsletter that Brian sends out every week

00:01:11.420 --> 00:01:13.340
just after the show comes out

00:01:13.340 --> 00:01:17.640
with everything we've talked about written down there

00:01:17.640 --> 00:01:18.320
so you have it.

00:01:18.320 --> 00:01:21.320
Just get an email if you don't have the time to listen.

00:01:21.440 --> 00:01:22.860
Although we prefer people to listen.

00:01:22.860 --> 00:01:23.660
That's always fun.

00:01:23.660 --> 00:01:25.420
Yeah.

00:01:25.420 --> 00:01:28.740
I just think it's nice that people don't have to write notes down

00:01:28.740 --> 00:01:29.480
while they're listening.

00:01:29.480 --> 00:01:31.120
They can just get it from the email later.

00:01:31.120 --> 00:01:31.740
Yeah.

00:01:31.740 --> 00:01:34.060
So pythonbytes.fm, click the newsletter button,

00:01:34.060 --> 00:01:36.680
enter your email, everything will be good.

00:01:36.680 --> 00:01:40.660
Brian, I want to listen to what you want to tell us about first.

00:01:40.660 --> 00:01:41.020
What's up?

00:01:41.640 --> 00:01:44.000
I think people should pay more money to open source.

00:01:44.000 --> 00:01:47.980
So I'm going to cover open source pledge.

00:01:48.820 --> 00:01:53.040
And I'm going to hop over to the Django site to begin with

00:01:53.040 --> 00:01:54.820
because that's where I found out about it.

00:01:54.820 --> 00:01:58.600
Because the Django community, Django Software Foundation,

00:01:58.600 --> 00:02:03.180
announced that they are supporting the open source pledge.

00:02:03.180 --> 00:02:05.900
And what does this mean?

00:02:05.900 --> 00:02:09.580
Well, the open source pledge is really simple to do.

00:02:09.580 --> 00:02:13.400
All you have to do is you have to say

00:02:13.400 --> 00:02:16.360
that you're going to pay open source maintainers

00:02:16.360 --> 00:02:20.500
minimum to participate is $2,000 per year

00:02:20.500 --> 00:02:22.140
per developer at your company.

00:02:22.140 --> 00:02:24.920
So you don't have to count your salespeople.

00:02:24.920 --> 00:02:29.260
You don't have to count the janitor, stuff like that.

00:02:29.260 --> 00:02:32.120
But how many devs you have, 2K per year,

00:02:32.120 --> 00:02:33.400
seems like more than reasonable

00:02:33.400 --> 00:02:36.340
because you know you're getting that much value out of open source.

00:02:36.340 --> 00:02:39.340
So you self-report.

00:02:39.340 --> 00:02:42.500
So you pledge this and then you self-report annually.

00:02:43.800 --> 00:02:47.500
Click a blog or make a blog post to say how you've paid.

00:02:47.500 --> 00:02:50.920
Well, there's a whole bunch of, if you take a look,

00:02:50.920 --> 00:02:53.500
there's a list of members already.

00:02:53.500 --> 00:02:58.140
And I'm not sure how long this has been out,

00:02:58.140 --> 00:03:03.220
but the list of members includes like,

00:03:03.220 --> 00:03:06.660
you know, people like Sentry have 135 devs

00:03:06.660 --> 00:03:10.820
and they're pledging 3,704 per dev,

00:03:10.820 --> 00:03:12.180
which is pretty cool.

00:03:12.180 --> 00:03:14.700
Laravel's in there.

00:03:14.700 --> 00:03:16.120
So it's not just Python people.

00:03:16.120 --> 00:03:19.500
And yeah, a whole bunch of great names in here.

00:03:19.500 --> 00:03:22.120
So what is this?

00:03:22.120 --> 00:03:22.740
Oh, button down.

00:03:22.740 --> 00:03:23.480
That's nice.

00:03:23.480 --> 00:03:24.620
Even one dev.

00:03:24.620 --> 00:03:26.980
They're doing 5K per developer,

00:03:26.980 --> 00:03:27.840
but it's just one.

00:03:27.840 --> 00:03:28.420
But it's nice.

00:03:28.960 --> 00:03:31.440
Anyway, so Django says, let's do that also.

00:03:31.440 --> 00:03:37.940
And to help make the Django community more sustainable.

00:03:37.940 --> 00:03:41.480
And I think this is great.

00:03:41.480 --> 00:03:42.520
So they're pledging it.

00:03:42.520 --> 00:03:48.380
I don't know how many devs the Python Software Foundation has now.

00:03:48.380 --> 00:03:50.860
Like we know they have at least two full-time,

00:03:50.860 --> 00:03:53.800
but I think it's growing.

00:03:53.800 --> 00:03:55.520
So that's pretty cool.

00:03:55.520 --> 00:03:58.020
So I think this is a great idea.

00:03:58.020 --> 00:04:00.000
And it's neat.

00:04:00.000 --> 00:04:02.860
Pledge your support for open source.

00:04:02.860 --> 00:04:07.020
It's an interesting time for money and open source.

00:04:07.020 --> 00:04:09.380
And I do think it's a good idea as well.

00:04:09.380 --> 00:04:11.440
But there's some crazy stuff.

00:04:11.440 --> 00:04:12.980
You know, see WordPress.

00:04:12.980 --> 00:04:15.240
It's so insane.

00:04:15.240 --> 00:04:17.880
But that's not pledging money to open source.

00:04:17.880 --> 00:04:20.640
That's something else entirely.

00:04:20.640 --> 00:04:23.540
I do want to put this up there,

00:04:23.540 --> 00:04:26.980
but I do want to point out there's a cool post by Armin Roeneker

00:04:26.980 --> 00:04:30.200
who talked about the inevitability of mixing open source and money.

00:04:30.200 --> 00:04:33.640
And also just give a shout out to Sentry,

00:04:33.640 --> 00:04:36.400
who I believe this open source pledge was their idea

00:04:36.400 --> 00:04:38.360
and Armin was behind the launch of it.

00:04:38.360 --> 00:04:39.960
So well done, Armin.

00:04:39.960 --> 00:04:41.240
Well done, Sentry.

00:04:41.240 --> 00:04:45.200
Yeah, big sponsor of Talk Python.

00:04:47.200 --> 00:04:49.640
And I believe they sponsored Python Bytes some as well,

00:04:49.640 --> 00:04:50.660
but certainly Talk Python.

00:04:50.660 --> 00:04:53.760
But if you want to see a bunch of interesting reading,

00:04:53.760 --> 00:04:56.660
I'll put that article in there as well.

00:04:56.660 --> 00:05:00.680
But moving on, let's talk about TV.

00:05:00.680 --> 00:05:02.280
Let's watch some TV, Brian.

00:05:02.280 --> 00:05:04.080
What's on tonight?

00:05:04.080 --> 00:05:06.500
Catch the nightly news,

00:05:06.500 --> 00:05:08.060
Three's Company,

00:05:08.060 --> 00:05:10.800
or maybe some Django?

00:05:10.800 --> 00:05:16.080
So I believe this project is put together by Jeff Triplett.

00:05:16.520 --> 00:05:17.620
So well done, Jeff.

00:05:17.620 --> 00:05:20.580
And it's called Django TV at Django TV dot com.

00:05:20.580 --> 00:05:25.580
And the idea here is these are videos from,

00:05:25.580 --> 00:05:29.120
it's like a kind of a little mini YouTube-like thing, sort of,

00:05:29.120 --> 00:05:31.040
but for all the conferences.

00:05:31.040 --> 00:05:37.140
So you want to see the conferences at Django Con US of 2023?

00:05:37.140 --> 00:05:38.600
Boom.

00:05:38.780 --> 00:05:39.580
There they all are.

00:05:39.580 --> 00:05:42.840
You want to find all the videos about HTMX?

00:05:42.840 --> 00:05:46.980
There are many because HTMX is awesome and so on.

00:05:46.980 --> 00:05:48.260
Search for it.

00:05:48.260 --> 00:05:52.680
You can see friends of ours up there speaking and doing things like that.

00:05:52.680 --> 00:05:55.460
So not a big, deep thing to go into.

00:05:55.460 --> 00:05:58.460
However, it's nice, right?

00:05:58.680 --> 00:06:01.920
Basically, it's a curated list with the descriptions.

00:06:01.920 --> 00:06:06.740
You know, you always want to know, like, when is something published?

00:06:06.740 --> 00:06:07.300
Right?

00:06:07.300 --> 00:06:09.220
That's often the thing with conferences.

00:06:09.220 --> 00:06:11.160
Like, I saw there was going to be a cool talk.

00:06:11.160 --> 00:06:13.180
It happened three months ago.

00:06:13.180 --> 00:06:15.400
Eventually, somebody's going to put it on the internet.

00:06:15.620 --> 00:06:17.440
Probably, we think.

00:06:17.440 --> 00:06:18.800
We're not entirely sure.

00:06:18.800 --> 00:06:24.440
So you can come down here and just hit the RSS feed and subscribe to that.

00:06:24.440 --> 00:06:30.700
And it'll just, all the Django videos start popping up when you subscribe.

00:06:30.700 --> 00:06:31.480
Pretty cool?

00:06:31.480 --> 00:06:33.000
Yeah, it's pretty cool.

00:06:33.000 --> 00:06:33.940
And this is pretty new.

00:06:33.940 --> 00:06:38.580
So if you've got old videos or new conference videos that are not listed here,

00:06:38.580 --> 00:06:40.180
especially Django-related.

00:06:40.180 --> 00:06:41.560
Yeah.

00:06:41.560 --> 00:06:43.000
Fix it.

00:06:43.000 --> 00:06:45.180
Fix it, indeed.

00:06:45.180 --> 00:06:46.940
All right.

00:06:46.940 --> 00:06:50.060
Well, that is my main one.

00:06:50.060 --> 00:06:55.140
Now, before we move on, let's talk about our sponsor, huh?

00:06:55.140 --> 00:06:55.840
Yeah.

00:06:55.840 --> 00:07:02.840
Let me tell you real quick about Scout APM.

00:07:02.840 --> 00:07:06.600
They're big supporters of Python Bytes, so we appreciate that very much.

00:07:06.600 --> 00:07:13.740
So if you are tired of spending hours trying to find the root cause of issues impacting your

00:07:13.740 --> 00:07:17.560
performance, then you owe it to yourself to check out Scout APM.

00:07:17.560 --> 00:07:24.120
They're a leading Python application performance monitoring tool, APM, that helps you identify

00:07:24.120 --> 00:07:27.140
and solve performance abnormalities faster and easier.

00:07:27.140 --> 00:07:32.780
Scout APM ties bottlenecks such as memory leaks, slow database queries, background jobs, and the

00:07:32.780 --> 00:07:38.480
dreaded N plus one queries that you can end up if you do lazy loading in your ORM.

00:07:38.680 --> 00:07:39.480
And then you say, oh, no.

00:07:39.480 --> 00:07:40.840
Why is it so slow?

00:07:40.840 --> 00:07:43.200
Why are you doing 200 database queries for what should be one?

00:07:43.200 --> 00:07:45.220
So you can find out things like that.

00:07:45.220 --> 00:07:50.400
And it links it back directly to source code so you can spend less time in the debugger and

00:07:50.400 --> 00:07:53.660
healing logs and just finding the problems and moving on.

00:07:54.440 --> 00:07:57.460
And you'll love it because it's built for developers by developers.

00:07:57.460 --> 00:07:59.040
It makes it easy to get set up.

00:07:59.040 --> 00:08:01.560
Seriously, you can do it in less than four minutes.

00:08:01.560 --> 00:08:02.380
So that's awesome.

00:08:02.380 --> 00:08:05.440
And the best part is the pricing is straightforward.

00:08:05.440 --> 00:08:11.000
You only pay for the data that you use with no hidden overage fees or per seat pricing.

00:08:11.860 --> 00:08:13.660
And I just learned this, Brian.

00:08:13.660 --> 00:08:18.800
They also have they provide the pro version for free to all open source projects.

00:08:18.800 --> 00:08:23.460
So if you're an open source maintainer and you want to have Scout APM for that project,

00:08:23.460 --> 00:08:27.140
just shoot them a message or something on their pricing page about that.

00:08:27.140 --> 00:08:31.040
So you can start your free trial and get instant insights today.

00:08:31.040 --> 00:08:34.300
Visit by thembytes.fm slash Scout.

00:08:34.300 --> 00:08:36.540
The link is in your podcast player show notes as well.

00:08:36.820 --> 00:08:37.940
And please use that link.

00:08:37.940 --> 00:08:42.440
Don't just search for them because otherwise they don't think you came from us.

00:08:42.440 --> 00:08:44.020
And then they'd stop supporting the show.

00:08:44.020 --> 00:08:46.580
So please use our link by thembytes.fm slash Scout.

00:08:46.580 --> 00:08:47.520
Check them out.

00:08:47.520 --> 00:08:49.480
It really supports the show.

00:08:49.480 --> 00:08:52.600
Brian, over to you.

00:08:52.600 --> 00:08:53.900
Yep.

00:08:53.900 --> 00:08:58.020
So I'd like to talk about dependencies a little bit.

00:08:58.020 --> 00:08:59.600
So projects have dependencies.

00:08:59.600 --> 00:09:05.960
We often stick them in requirements.txt files or pyproject.toml files.

00:09:06.240 --> 00:09:08.520
But there's a new PEP that just came out.

00:09:08.520 --> 00:09:10.720
Well, it's been out for a bit.

00:09:10.720 --> 00:09:13.360
Created in 2023 in November.

00:09:13.360 --> 00:09:14.800
But it just got resolved.

00:09:14.800 --> 00:09:17.360
And so I think it just got accepted recently.

00:09:17.360 --> 00:09:19.480
So the resolution date of 10th of October.

00:09:19.480 --> 00:09:25.500
So PEP 735 is dependency groups in pyproject.toml.

00:09:25.500 --> 00:09:31.720
And my first glance at this, I'm like, don't we already kind of have that in extras?

00:09:31.720 --> 00:09:37.280
But that's addressed by this PEP.

00:09:37.280 --> 00:09:50.500
So the idea is that we have other dependencies, not direct project dependencies, but extra stuff, like when you're building your docs or you're running your tests or things like that.

00:09:51.100 --> 00:09:53.740
So how do we specify those?

00:09:53.740 --> 00:09:56.920
And there's a couple of ways that people have done it in the past.

00:09:56.920 --> 00:10:00.380
One of them is the extras in pyproject.toml.

00:10:00.380 --> 00:10:05.840
But preceding that, even before we had that, there were extra requirements.txt files.

00:10:06.020 --> 00:10:10.120
So some projects have a main requirements.txt file.

00:10:10.120 --> 00:10:18.440
And then some of them have a requirements.dev file or a requirements.doc file or something or several.

00:10:18.440 --> 00:10:24.440
And the problem with that really is that there's no standardization around it.

00:10:24.440 --> 00:10:31.380
And then also there's not really a standardization about the requirements.txt file.

00:10:31.620 --> 00:10:34.660
It's just whatever you can pass to pip install.

00:10:34.660 --> 00:10:40.660
And so like even flags and stuff, which is actually kind of fun.

00:10:40.660 --> 00:10:42.120
Anyway, tangent.

00:10:42.120 --> 00:10:49.060
But so that's, I don't think a bunch of requirements files is the right answer.

00:10:49.060 --> 00:10:50.060
How about extras?

00:10:50.600 --> 00:10:59.160
Well, I was surprised to find out that the extras that you can put in extra dependencies or optional dependencies.

00:10:59.160 --> 00:11:02.820
These are, these might not.

00:11:02.820 --> 00:11:08.500
I learned that they're, they're using, they're, they might not be resolved.

00:11:08.500 --> 00:11:10.460
What am I trying to say here?

00:11:12.880 --> 00:11:15.920
They, they're not guaranteed to be statically defined.

00:11:15.920 --> 00:11:17.720
They could be dynamically defined.

00:11:17.720 --> 00:11:19.960
And that I just didn't even know.

00:11:19.960 --> 00:11:26.220
So we do need it to be statically defined so that, so that, you know, tools can read it easily.

00:11:26.220 --> 00:11:32.680
And there's other limitations around using the extras as well.

00:11:32.680 --> 00:11:36.160
Also, I think it's just, I think extras confuses people.

00:11:36.260 --> 00:11:43.560
I know it's a feature of pyproject.toml, but I was confused by it at first, had to like, like study it for a bit.

00:11:43.560 --> 00:11:49.940
And it just somehow doesn't, doesn't fit right away with a lot of people's mindset.

00:11:49.940 --> 00:11:52.440
But these dependency groups look pretty good.

00:11:52.440 --> 00:11:54.160
So let's take a look at one example.

00:11:54.160 --> 00:12:01.080
So their example in the PEP just shows you get a block of dependency groups section.

00:12:01.340 --> 00:12:06.340
And then there's stuff like test with a list of, a list of things like pytesting coverage.

00:12:06.340 --> 00:12:11.260
Docs might have Sphinx and, and the Sphinx read the docs theme.

00:12:11.260 --> 00:12:15.280
Typing for doing type checking, like my pie and type requests.

00:12:15.280 --> 00:12:17.760
So these all totally make sense.

00:12:17.760 --> 00:12:21.620
And then there's a, there's an extra bit about being able to group others.

00:12:21.620 --> 00:12:25.080
So you could have a dependency group that includes other groups.

00:12:25.080 --> 00:12:25.860
That's pretty cool.

00:12:26.460 --> 00:12:31.340
And then there's some details around like, well, what happens if they conflict with each other and stuff?

00:12:31.340 --> 00:12:33.840
So that's well-defined, which is good.

00:12:33.840 --> 00:12:40.500
But I just think like having something like this, like a small block that say, hey, for tests, we use pytesting coverage.

00:12:40.500 --> 00:12:45.640
For docs, we use these and have that be nice and succinct in a dependency group section.

00:12:45.640 --> 00:12:46.700
I like it.

00:12:46.700 --> 00:12:48.360
So this has been accepted.

00:12:48.360 --> 00:12:53.980
I'm not sure when it's going to come to a pip near you, but it's pretty cool.

00:12:53.980 --> 00:12:57.900
There, there's an example of how it might work at the end.

00:12:57.900 --> 00:13:09.980
Like, how, I don't know, reference implementation, how it might work of like saying maybe pip install dependency group and be able to install that.

00:13:09.980 --> 00:13:15.960
but, but that's up to pip, the pip maintainers to figure out how, how that's really going to be used.

00:13:16.360 --> 00:13:19.380
Other interesting thing is extras are extras.

00:13:19.380 --> 00:13:25.720
Extras are on top of the normal thing, everything needed for the, for the system.

00:13:25.720 --> 00:13:33.140
But for example, like when you're doing the documentation build, you don't actually have to build your thing to build the docs.

00:13:33.280 --> 00:13:38.560
So these, dependency groups do not, they're not extra, they're independent.

00:13:38.560 --> 00:13:46.260
So you could build the, install the documentation, dependencies without installing the project, which is pretty interesting.

00:13:46.260 --> 00:13:54.720
So anyway, that's, that's one of the differences they highlight is the extras require, they add on to the base requirements.

00:13:54.720 --> 00:14:01.860
Whereas this, you can have one set of things installed for one scenario and another for another without necessarily overlapping them.

00:14:01.860 --> 00:14:05.480
Which you might think, whatever, right?

00:14:05.480 --> 00:14:05.980
It doesn't matter.

00:14:05.980 --> 00:14:07.080
I just install some extra stuff.

00:14:07.080 --> 00:14:11.640
But there's certain things that say work in production, but won't install on Windows.

00:14:11.640 --> 00:14:13.440
For example, right?

00:14:13.440 --> 00:14:19.520
I think last I looked, uv loop didn't work on Windows, but it was like a speed up for asyncio on Linux.

00:14:20.620 --> 00:14:33.640
Well, there also might be a, an incompatibility of a dependent library on like your, if you're using Sphinx, maybe Sphinx depends on something that's a different version than what your project depends on.

00:14:33.640 --> 00:14:34.500
Yeah, yeah, yeah.

00:14:34.500 --> 00:14:34.980
Good point.

00:14:34.980 --> 00:14:35.340
So.

00:14:35.340 --> 00:14:36.440
Indeed.

00:14:36.440 --> 00:14:39.960
Henry out in the audience throws in that extras are public.

00:14:39.960 --> 00:14:40.840
These are not.

00:14:40.840 --> 00:14:44.620
Unfortunately, we lose the ability to guarantee the package was installed.

00:14:44.620 --> 00:14:45.740
Sometimes you want this.

00:14:45.740 --> 00:14:46.460
Sometimes you don't.

00:14:46.460 --> 00:14:47.540
Thanks.

00:14:47.540 --> 00:14:48.420
Yeah.

00:14:48.420 --> 00:14:48.480
Yeah.

00:14:50.480 --> 00:14:54.100
Hat tip to a transition you didn't know was coming.

00:14:54.100 --> 00:15:05.560
So over at Talk Python Training, we have a free course called Static Sites and API Docs with Sphinx Python and Markdown done by Paul Everett.

00:15:05.560 --> 00:15:11.840
And he unwittingly introduced me to this next topic through that course on here.

00:15:11.840 --> 00:15:13.460
Live reload.

00:15:13.460 --> 00:15:15.560
As in pip install live reload.

00:15:15.560 --> 00:15:16.720
Do you know this?

00:15:16.720 --> 00:15:17.460
No.

00:15:18.080 --> 00:15:25.020
So it's kind of a generic file watcher, mostly focused on web apps, but you could use it for literally anything.

00:15:25.020 --> 00:15:31.760
And it's just, you can say, here is a set of file patterns, multiple ones.

00:15:32.760 --> 00:15:39.060
And you can use the star star slash something to look at subdirectories and whatnot.

00:15:39.060 --> 00:15:45.940
You know, the file pattern craziness, however much you want.

00:15:45.940 --> 00:15:54.880
And then if something changes, it will just run an arbitrary shell command for you and potentially restart your web app as well.

00:15:54.920 --> 00:15:59.160
If you give it a web app, you give it a flask or Django or any whiskey app type of thing.

00:15:59.160 --> 00:16:00.840
So that's pretty cool.

00:16:00.840 --> 00:16:04.640
If you look at the documentation, you will find it to be sparse.

00:16:04.640 --> 00:16:09.800
Like the description of it literally is about eight words in one sentence.

00:16:09.800 --> 00:16:11.940
It tells you how to install it.

00:16:11.940 --> 00:16:13.840
But like, well, okay.

00:16:13.920 --> 00:16:15.060
But why would I install it?

00:16:15.060 --> 00:16:18.900
You look at the API reference and it's basically just a signature.

00:16:18.900 --> 00:16:22.920
So if people are looking to contribute to a project, you know, maybe give them this little example.

00:16:22.920 --> 00:16:26.760
A little bit of a few paragraphs would be awesome.

00:16:26.860 --> 00:16:31.920
But I gave you an example that we can all use from Python Bytes and from Talk Python.

00:16:31.920 --> 00:16:35.280
Similar apps, so similar use here.

00:16:35.280 --> 00:16:48.080
And so I'm sharing a gist with folks that will, if you run it, a little file here, you can just run this as in your terminal or just however you start it.

00:16:48.080 --> 00:16:51.140
Just leave it running while you're working on a project.

00:16:51.940 --> 00:16:58.720
And what it'll do, it'll track down using pathlib, it'll track down the root folder and then find a CSS folder and a JavaScript folder.

00:16:58.720 --> 00:17:05.460
And then it'll run Python against some file that does bundling.

00:17:05.460 --> 00:17:16.540
So for example, at Python Bytes, we take maybe six or seven CSS files and minify and bundle them into a single one in a certain order and then share that over a CDN.

00:17:16.540 --> 00:17:17.740
Yeah.

00:17:18.000 --> 00:17:26.080
And so depending on how it's running, you may or may not see those changes if you're doing like CSS design stuff.

00:17:26.080 --> 00:17:28.700
Same thing for JavaScript, right?

00:17:28.700 --> 00:17:35.460
So what you can do is you just set this up, point it at the right places on your file system.

00:17:36.180 --> 00:17:47.200
Say, watch the CSS folder, watch the JS folder, and run a shell command, which is tell Python to run that Python script that does the bundling.

00:17:47.200 --> 00:17:48.420
Boom.

00:17:48.420 --> 00:17:49.080
Off it goes.

00:17:49.080 --> 00:17:51.240
And you just run that in the background while you're working.

00:17:51.240 --> 00:17:51.900
What do you think?

00:17:51.900 --> 00:17:53.220
That's pretty cool.

00:17:53.360 --> 00:17:58.060
So with this, if you change the JavaScript and CSS, it just automatically updates them?

00:17:58.060 --> 00:17:58.440
Right.

00:17:58.440 --> 00:18:07.540
It looks for any file change within the search pattern, like star, star, slash CSS, slash dot, star, dot CSS, or whatever, you know.

00:18:07.960 --> 00:18:15.440
And then if it sees that, it just runs the command, which the command that I gave it is to run Python to rebundle our assets.

00:18:15.440 --> 00:18:26.240
So for whatever reason, because one of the things that can happen is, you know, change something about a CSS file, forget to bundle it, publish the site.

00:18:26.240 --> 00:18:28.100
And you're like, huh, why does that look so weird?

00:18:28.160 --> 00:18:29.380
Like, why is that not changed?

00:18:29.380 --> 00:18:38.220
But the, you know, the packed version of that one that runs in production, but not in development is out of sync.

00:18:38.220 --> 00:18:39.260
And then it's weird, right?

00:18:39.260 --> 00:18:43.520
So if you just, as long as you have this running somewhere, just chilling, then you're good.

00:18:43.520 --> 00:18:44.660
Cool.

00:18:44.660 --> 00:18:51.220
But it doesn't have to be, I mean, the context is web and it's very focused on static websites, which is super annoying.

00:18:51.220 --> 00:18:57.920
Like the way you run it is you say server dot serve, and it literally starts up a web server at some root you give it.

00:18:58.020 --> 00:18:59.480
But I don't want to look at it.

00:18:59.480 --> 00:19:01.480
I'm not trying to look at the website through it.

00:19:01.480 --> 00:19:04.980
I literally just want it to run the file.

00:19:04.980 --> 00:19:11.360
So there should be some secondary command, like just start watching or something like that in the background.

00:19:11.360 --> 00:19:13.500
But it starts a little web server.

00:19:13.500 --> 00:19:17.480
You can just ignore it and, or point it to nowhere and ignore it.

00:19:17.480 --> 00:19:24.140
And then you could get it to do basically when a file changes, run a shell command of your choosing, which is pretty flexible.

00:19:24.140 --> 00:19:25.060
Yeah.

00:19:25.440 --> 00:19:35.000
It does, I guess, to give them a little credit, they do have pages for how to use this with Django and Flask and Bottle.

00:19:35.000 --> 00:19:37.540
I don't know anybody that uses Bottle anymore.

00:19:37.540 --> 00:19:39.160
No, no, I know.

00:19:39.160 --> 00:19:42.080
But, I mean, the pages for it.

00:19:42.080 --> 00:19:46.160
But not necessarily the right details.

00:19:47.160 --> 00:19:49.380
Yeah, it doesn't, like it doesn't really tell you what happens.

00:19:49.380 --> 00:19:50.140
Okay.

00:19:50.140 --> 00:19:55.360
It just shows you what to do and then you can imagine, well, will it restart the app or will it not restart the app?

00:19:55.360 --> 00:19:57.460
Will it just restart the CSS?

00:19:57.460 --> 00:19:58.620
Will it reload the templates?

00:19:58.620 --> 00:20:01.600
There's options of what could be happening, but it doesn't really say.

00:20:01.600 --> 00:20:02.880
Anyway, it's a cool project.

00:20:03.020 --> 00:20:07.480
I would love to see a little bit more description just so that I can get a little more traction.

00:20:07.480 --> 00:20:09.100
But, yeah, there you go.

00:20:09.100 --> 00:20:14.080
Paul was using it for when he changed a markdown file in the course.

00:20:14.080 --> 00:20:21.600
It would run make HTML out of Sphinx to automatically rebuild the website as you just typed in it.

00:20:21.600 --> 00:20:22.840
Oh, that's cool.

00:20:22.840 --> 00:20:23.280
Yeah.

00:20:25.960 --> 00:20:26.660
All right.

00:20:26.660 --> 00:20:30.460
Well, do you want to jump into extras?

00:20:30.460 --> 00:20:32.000
Let's jump.

00:20:32.000 --> 00:20:33.160
Okay.

00:20:33.160 --> 00:20:34.980
Do you want to hit yours first?

00:20:34.980 --> 00:20:35.700
Yeah, I'll go first.

00:20:35.700 --> 00:20:36.520
Mine are super short.

00:20:36.520 --> 00:20:38.700
So, a couple of things.

00:20:38.700 --> 00:20:42.660
First of all, I was looking at our Umami.

00:20:42.660 --> 00:20:47.040
That is our Umami Analytics.

00:20:47.040 --> 00:20:49.360
Is it .is?

00:20:49.360 --> 00:20:50.100
I think it is.

00:20:50.100 --> 00:20:52.140
Umami.is.

00:20:52.140 --> 00:20:53.280
Analytics.

00:20:53.280 --> 00:20:53.860
Yeah, perfect.

00:20:54.640 --> 00:20:57.120
And I noticed something unusual.

00:20:57.120 --> 00:21:01.060
That 14% of our listeners are from Germany.

00:21:01.060 --> 00:21:02.840
Oh, that's cool.

00:21:02.840 --> 00:21:04.300
That's pretty interesting, right?

00:21:04.300 --> 00:21:07.120
Especially given, you know, this is in English.

00:21:07.120 --> 00:21:09.000
It's not their native language.

00:21:09.000 --> 00:21:13.040
But, like, more than Australians, the Germans are listening to our stuff.

00:21:13.040 --> 00:21:13.820
So, thank you, Germany.

00:21:13.820 --> 00:21:18.820
Maybe we should have a competition to try to get the country.

00:21:18.820 --> 00:21:19.020
Exactly.

00:21:19.020 --> 00:21:19.640
The country.

00:21:19.640 --> 00:21:20.520
Exactly.

00:21:21.240 --> 00:21:26.820
And then, not that I intended this to be a German episode, but here are German extras.

00:21:26.820 --> 00:21:29.740
But the German company, Hetzner.

00:21:29.740 --> 00:21:30.440
Have you heard of them?

00:21:30.440 --> 00:21:33.320
They're like DigitalOcean, Linode, so on.

00:21:33.320 --> 00:21:33.760
AWS.

00:21:33.760 --> 00:21:37.400
So, I've heard a few people talk about them.

00:21:37.880 --> 00:21:41.160
And they have really interesting hosting models.

00:21:41.160 --> 00:21:48.400
Like, they'll give you super affordable VMs with lots of bandwidth and so on.

00:21:48.400 --> 00:21:57.940
So, for example, for an 8 gig, sorry, 16 gig, 8 CPU server in DigitalOcean, it's $112.

00:21:58.940 --> 00:22:07.460
It's hard to tell exactly on AWS and Azure, but I believe AWS is $200 and Azure is $350 per month, okay?

00:22:07.460 --> 00:22:08.320
Okay.

00:22:08.320 --> 00:22:17.700
If I go over here to Hetzner, prices, and you pick, say, shared AMD, and you pick your country to be US.

00:22:21.540 --> 00:22:22.240
Come here.

00:22:22.240 --> 00:22:23.580
Oh, where'd you go?

00:22:23.580 --> 00:22:25.620
Same server is $25.

00:22:25.620 --> 00:22:27.340
Wow.

00:22:27.340 --> 00:22:37.740
And it comes with 20 terabytes of bandwidth, which, quick math, I believe that's about $2,000 at AWS.

00:22:37.740 --> 00:22:40.280
And that's included in the $25.

00:22:40.280 --> 00:22:41.960
Cool.

00:22:41.960 --> 00:22:44.440
So, the news is, why am I even mentioning this?

00:22:44.440 --> 00:22:46.480
The news is, they recently came to the US.

00:22:48.000 --> 00:22:51.800
They used to be just a European company.

00:22:51.800 --> 00:22:53.320
Now, they're available in the US.

00:22:53.320 --> 00:22:56.600
So, that opens up a lot of interesting hosting possibilities.

00:22:56.600 --> 00:22:59.260
Are you switching anything?

00:22:59.260 --> 00:23:02.020
I'm thinking about playing with it.

00:23:02.020 --> 00:23:02.760
We'll see how it goes.

00:23:02.760 --> 00:23:06.960
I actually asked people in Mastodon, what do you guys think about this company?

00:23:06.960 --> 00:23:12.260
And I got a lot of German folks who said they're having a lot of good experiences with it.

00:23:12.260 --> 00:23:13.440
So, we'll see.

00:23:13.440 --> 00:23:14.480
Okay.

00:23:14.480 --> 00:23:16.780
But, I'll let you know if we do.

00:23:16.780 --> 00:23:18.980
I haven't switched anything around.

00:23:18.980 --> 00:23:20.140
But it's pretty interesting, right?

00:23:20.140 --> 00:23:22.800
That you can get so much compute for so affordable.

00:23:22.800 --> 00:23:24.320
Yeah, that's pretty cool.

00:23:24.320 --> 00:23:25.820
Anyway, those are my extras.

00:23:25.820 --> 00:23:26.480
Over to you.

00:23:26.480 --> 00:23:32.740
A couple blog posts that I wanted to highlight that were kind of neat.

00:23:32.740 --> 00:23:33.380
KJ Miller.

00:23:33.380 --> 00:23:38.300
Personal blogs are no longer personal when AI gets too involved.

00:23:38.860 --> 00:23:47.380
So, I know people are using AI and chat-like things to come up with some ideas and stuff.

00:23:47.380 --> 00:23:51.500
And that's pretty much what KJ Miller is talking about.

00:23:51.880 --> 00:23:54.840
It's not necessarily terrible to do that.

00:23:54.840 --> 00:23:58.720
But be careful what you're doing and why you're doing it.

00:23:58.720 --> 00:24:07.680
So, for instance, coming up with ideas or if you're stuck on how to say a phrase something, having somebody help with that is great.

00:24:08.080 --> 00:24:10.280
And writing is hard.

00:24:10.280 --> 00:24:12.540
So, getting some advice, fine.

00:24:12.540 --> 00:24:14.920
But it should still be your voice.

00:24:14.920 --> 00:24:18.760
So, I love, I was wanting to hop down to his advice.

00:24:20.200 --> 00:24:33.040
It says, obviously, if you're reading this and not getting ChatGPT to summarize it for you, you care about my words to some degree.

00:24:33.040 --> 00:24:36.300
So, you are reading somebody's blog for their voice.

00:24:36.300 --> 00:24:38.800
So, keep that in mind when writing your own blog.

00:24:38.800 --> 00:24:49.260
So, especially if you're writing a blog to try to get hired later, it doesn't help you any to just regurgitate some ChatGPT stuff and copy and paste it.

00:24:49.760 --> 00:24:51.360
We don't need more people like that.

00:24:51.360 --> 00:24:59.340
I mean, if you're doing it to try to, like, you know, fill up your blog for selling something, I still don't like that.

00:24:59.340 --> 00:25:01.100
But, you know, your business.

00:25:01.100 --> 00:25:06.280
But if you're trying to do it to highlight what you write like, then you need to write it.

00:25:06.280 --> 00:25:12.440
And also, if you're doing this to help your future self, make it personal.

00:25:12.440 --> 00:25:19.680
Also, like, if you're not writing it or at least rewriting it, writing it in your voice, it's not going to stick in your head.

00:25:19.680 --> 00:25:21.780
So, you're not doing yourself any favors.

00:25:21.780 --> 00:25:32.820
There is a bit about, he talks about if you're doing this to create content in another language, learn about that community's writing style, which makes sense.

00:25:32.960 --> 00:25:38.960
But I kind of think there's translation tools already built into some browsers.

00:25:38.960 --> 00:25:46.640
And if somebody from another country really want to read your stuff, maybe they probably will anyway and translate it if they want to.

00:25:48.240 --> 00:25:51.200
So, I got really no interesting opinion about that.

00:25:51.200 --> 00:26:04.800
But I think I like these ideas about if you're doing it to gain, you know, build your personal brand or put yourself up as an expert in an area, using AI to do that's really not helping you.

00:26:04.900 --> 00:26:11.040
I think people can figure that out because there'll be an inconsistency in writing styles in different posts.

00:26:11.040 --> 00:26:16.140
And then also, it's your personal thing.

00:26:16.140 --> 00:26:18.240
People are trying to reach you.

00:26:18.240 --> 00:26:19.060
So, be you.

00:26:19.060 --> 00:26:21.640
Anyway, that was one extra.

00:26:21.640 --> 00:26:28.460
The other one was something that I just didn't think about, and I probably should, is mind your image metadata.

00:26:29.760 --> 00:26:33.100
This is an article lost.

00:26:33.100 --> 00:26:35.260
Oh, from Stephanie Molin, right there at the top.

00:26:35.260 --> 00:26:39.740
From, she presented at PyConestonia.

00:26:39.740 --> 00:26:46.420
Anyway, the talks about the EXIF interchange format.

00:26:46.420 --> 00:26:49.240
Basically, pictures have tons of metadata in it.

00:26:49.240 --> 00:26:59.720
And if you don't want to have that published everywhere, and you might not, you might not want personal locations for exactly where your photos are.

00:26:59.720 --> 00:27:08.280
She talks about how to tell using tools to figure out what's in there and also talks about tools to rip them out.

00:27:08.280 --> 00:27:19.300
And then even talks about using a pre-commit hook to strip out pictures that you're including as your static images or in your Git repo.

00:27:19.300 --> 00:27:20.380
That's cool.

00:27:20.380 --> 00:27:24.800
If you're putting your Hugo static site, just none of it has any of that in there.

00:27:24.800 --> 00:27:25.700
That's a pretty cool idea.

00:27:25.700 --> 00:27:26.640
I like that.

00:27:26.640 --> 00:27:29.060
Those are just my two extras.

00:27:29.680 --> 00:27:30.320
Excellent.

00:27:30.320 --> 00:27:34.780
I'm having Stephanie on Talk Python Thursday.

00:27:34.780 --> 00:27:35.800
Cool.

00:27:35.800 --> 00:27:36.580
Three or four days from now.

00:27:36.580 --> 00:27:37.220
Neat.

00:27:37.220 --> 00:27:37.800
Yeah.

00:27:37.800 --> 00:27:40.140
All right.

00:27:40.140 --> 00:27:41.620
How about our joke?

00:27:41.620 --> 00:27:42.540
Let's do it.

00:27:42.540 --> 00:27:43.420
Over to you.

00:27:43.420 --> 00:27:45.340
This is a dumb joke, but I love it.

00:27:45.340 --> 00:27:46.420
It's an oldie bit of goodie.

00:27:46.980 --> 00:27:53.740
I'm linking to savvy programmer blog, but I've heard it before.

00:27:53.740 --> 00:27:56.280
Essentially, it's okay.

00:27:56.280 --> 00:28:01.720
A programmer's partner asked them, hey, would you go get a loaf of bread from the store?

00:28:01.720 --> 00:28:03.440
And if they have eggs, grab a dozen.

00:28:04.440 --> 00:28:09.020
While later, the programmer returns with 12 loaves of bread and says they had eggs.

00:28:09.020 --> 00:28:12.060
So literal.

00:28:12.060 --> 00:28:12.840
I love it.

00:28:12.840 --> 00:28:17.520
Anyway, there's a handful of jokes here.

00:28:17.520 --> 00:28:19.120
Pretty decent.

00:28:19.120 --> 00:28:20.160
Okay.

00:28:20.660 --> 00:28:21.520
I didn't read very many.

00:28:21.520 --> 00:28:22.940
I'm going to go check some of them out.

00:28:22.940 --> 00:28:23.380
That's awesome.

00:28:23.380 --> 00:28:25.320
Anyway.

00:28:25.320 --> 00:28:26.580
Excellent.

00:28:26.580 --> 00:28:27.800
Well, yeah.

00:28:27.800 --> 00:28:28.440
Very funny.

00:28:28.440 --> 00:28:31.200
Thanks again for the show together.

00:28:31.200 --> 00:28:32.500
And everyone, thank you for listening.

00:28:32.500 --> 00:28:33.400
Talk to you later.

00:28:33.760 --> 00:28:34.000
Bye.

00:28:34.000 --> 00:28:36.820
Thank you.

