WEBVTT

00:00:00.000 --> 00:00:04.320
Hey, everybody on the stream. Thanks for showing up.


00:00:04.320 --> 00:00:06.320
Everyone.


00:00:06.320 --> 00:00:08.320
Dean's got the star for us.


00:00:08.320 --> 00:00:10.320
Hey, Dean.


00:00:10.320 --> 00:00:12.320
Hey.


00:00:12.320 --> 00:00:14.320
Let's get going.


00:00:14.320 --> 00:00:19.040
Hello and welcome to Python Bytes, where we deliver news and headlines directly to your earbuds.


00:00:19.040 --> 00:00:24.560
This is episode 249, recorded September 8th, 2021.


00:00:24.560 --> 00:00:26.560
And I am Brian Okken.


00:00:26.560 --> 00:00:28.560
Hey, I'm Michael Kennedy.


00:00:28.560 --> 00:00:30.700
I am Erik Christiaansen.


00:00:30.700 --> 00:00:33.540
- Hey, Erik, thanks for joining us today.


00:00:33.540 --> 00:00:35.700
- Yeah, thank you so much for having me.


00:00:35.700 --> 00:00:37.900
- So tell us a little bit about who you are.


00:00:37.900 --> 00:00:40.500
- Sure, so first of all,


00:00:40.500 --> 00:00:42.420
I'm a long time listener to the show.


00:00:42.420 --> 00:00:44.020
I just told Michael,


00:00:44.020 --> 00:00:47.580
I'm listening since episode one of this podcast actually.


00:00:47.580 --> 00:00:50.740
And also listening to Michael's podcast, obviously.


00:00:50.740 --> 00:00:53.420
And then once I get to know it,


00:00:53.420 --> 00:00:56.620
I started listening to your podcast as well.


00:00:56.620 --> 00:00:58.020
So basically everything that's out there,


00:00:58.020 --> 00:01:06.100
listening. So what I'm doing, I'm currently the lead, leading the competence center for AI and


00:01:06.100 --> 00:01:12.500
data science at Data Drivers, which is a consultancy firm from Hamburg, Germany. Our


00:01:12.500 --> 00:01:18.740
focus is mainly on building big data platforms and applications, mostly using cloud native services.


00:01:18.740 --> 00:01:24.820
And we try to apply best DevOps and MLOps practices to wherever we are.


00:01:24.820 --> 00:01:26.580
- That's super cool.


00:01:26.580 --> 00:01:28.020
Do you have a favorite cloud?


00:01:28.020 --> 00:01:31.740
- In all honesty, probably Google Cloud.


00:01:31.740 --> 00:01:34.860
Gotta say it.


00:01:34.860 --> 00:01:36.180
- Yeah, nice.


00:01:36.180 --> 00:01:39.060
Awesome.


00:01:39.060 --> 00:01:40.940
- Well, Michael, why don't you kick us off


00:01:40.940 --> 00:01:42.900
with our first item?


00:01:42.900 --> 00:01:44.980
- Yeah, this one's a little fickle.


00:01:44.980 --> 00:01:46.100
Comes to us from Ollie.


00:01:46.100 --> 00:01:48.240
He sent that in, so thank you, Ollie.


00:01:48.240 --> 00:01:50.980
And sort of indirectly from Patrick Gray


00:01:50.980 --> 00:01:52.540
over at Risky Business,


00:01:52.540 --> 00:01:54.900
which is a cool security focused podcast,


00:01:54.900 --> 00:01:58.160
but Python support security, they talk about it over there.


00:01:58.160 --> 00:02:03.160
So you've heard of Pickles, obviously, Pickling in Python.


00:02:03.160 --> 00:02:09.260
It's like, I want to take this binary Python object graph


00:02:09.260 --> 00:02:12.520
and turn it into a blob that I can stash away


00:02:12.520 --> 00:02:14.100
and then later get it back, right?


00:02:14.100 --> 00:02:16.640
Sometimes it's real simple, stash it in Reddit


00:02:16.640 --> 00:02:20.220
and other systems can pull it out real quick as a cache,


00:02:20.220 --> 00:02:21.380
maybe save it to a file,


00:02:21.380 --> 00:02:23.360
but where it's become really popular


00:02:23.360 --> 00:02:28.360
as a means of data exchange is actually in machine learning.


00:02:28.360 --> 00:02:31.840
Okay, so the people who built this thing


00:02:31.840 --> 00:02:32.680
I'm gonna tell you about,


00:02:32.680 --> 00:02:35.680
were really built it around focusing


00:02:35.680 --> 00:02:37.160
on the machine learning use case,


00:02:37.160 --> 00:02:39.120
because people are handing around these models,


00:02:39.120 --> 00:02:40.480
these pre-trained models,


00:02:40.480 --> 00:02:42.760
and like, here's the model loaded up in roll,


00:02:42.760 --> 00:02:45.040
and loaded up in roll may mean


00:02:45.040 --> 00:02:47.160
you have an amazing artificial intelligence


00:02:47.160 --> 00:02:48.320
that drives a car,


00:02:48.320 --> 00:02:50.640
or it may mean that you have a virus,


00:02:50.640 --> 00:02:53.660
because pickles can contain all sorts of bad things.


00:02:53.660 --> 00:02:56.880
All right, so this thing I'm gonna tell you about


00:02:56.880 --> 00:02:59.280
is called Fickling, like pickling.


00:02:59.280 --> 00:03:02.220
It's a decompiler, a static analyzer,


00:03:02.220 --> 00:03:04.080
and a bytecode rewriter


00:03:04.080 --> 00:03:07.200
for Python pickle object serializations.


00:03:07.200 --> 00:03:08.840
So you take these pickle files,


00:03:08.840 --> 00:03:11.720
these object graphs of Python things,


00:03:11.720 --> 00:03:14.080
and you can pull them apart and look at them.


00:03:14.080 --> 00:03:16.880
You can ask questions like, is it a virus?


00:03:16.880 --> 00:03:20.080
And you can even say things like, let's put a virus in it.


00:03:20.080 --> 00:03:23.720
So all of these are possible with this tool


00:03:23.720 --> 00:03:26.520
and it's made by a security pen testing company


00:03:26.520 --> 00:03:29.540
called Trello Bits for basically that purpose, right?


00:03:29.540 --> 00:03:32.320
So it's kind of either side,


00:03:32.320 --> 00:03:36.120
the attacking pen testing side


00:03:36.120 --> 00:03:37.880
or the defensive side of the store.


00:03:37.880 --> 00:03:42.000
So it works on three, six and above


00:03:42.000 --> 00:03:44.160
and you can see it's super simple.


00:03:44.160 --> 00:03:47.320
You say, you basically do pickle stuff


00:03:47.320 --> 00:03:50.520
and you say from fickling.pickle import pickled,


00:03:50.520 --> 00:03:54.000
and then you can kind of as if you would use


00:03:54.000 --> 00:03:58.640
the dis module to disassemble Python code,


00:03:58.640 --> 00:04:02.240
you can do that with this pickled library.


00:04:02.240 --> 00:04:04.160
And it'll print out something that's kind of like


00:04:04.160 --> 00:04:06.400
an abstract syntax tree of the pickle.


00:04:06.400 --> 00:04:09.840
And they've got a real simple example on the GitHub repo.


00:04:09.840 --> 00:04:12.960
It's like a list of four numbers, one, two, three, four.


00:04:12.960 --> 00:04:15.040
And then it just shows you, look,


00:04:15.040 --> 00:04:18.760
for assigning the results of creating a list


00:04:18.760 --> 00:04:20.460
and setting these constants in it.


00:04:20.460 --> 00:04:23.120
Another thing that is nice about this


00:04:23.120 --> 00:04:27.960
is it's not specifically built for Python developers.


00:04:27.960 --> 00:04:30.920
So it's also kind of something you can integrate


00:04:30.920 --> 00:04:33.400
into other tooling and say continuous integration


00:04:33.400 --> 00:04:34.240
and stuff like that.


00:04:34.240 --> 00:04:37.080
So you can run it off the command line as well.


00:04:37.080 --> 00:04:39.240
So you can just on the terminal,


00:04:39.240 --> 00:04:41.160
just type fickling and give it the data


00:04:41.160 --> 00:04:44.640
and then outcomes some answer.


00:04:44.640 --> 00:04:46.080
The one that people might wanna do


00:04:46.080 --> 00:04:49.280
is the --check safety.


00:04:49.280 --> 00:04:52.600
And that will try to look and see if it's doing bad things


00:04:52.600 --> 00:04:56.080
like for example, talking to os.system


00:04:56.080 --> 00:04:58.320
or doing other malicious stuff like that.


00:04:58.320 --> 00:05:01.680
So that's good, but I wouldn't trust that entirely.


00:05:01.680 --> 00:05:03.200
Like how well is it checking, right?


00:05:03.200 --> 00:05:06.600
If you, for example, were to encode Python code


00:05:06.600 --> 00:05:08.960
and then decode it and then take that decoded stuff


00:05:08.960 --> 00:05:11.120
and it did OS something, right?


00:05:11.120 --> 00:05:12.800
Feed that to a Val or whatever.


00:05:12.800 --> 00:05:14.960
There's all sorts of layers here, right?


00:05:14.960 --> 00:05:16.640
So it can check for obvious things,


00:05:16.640 --> 00:05:19.920
but it's not like an absolute guarantee.


00:05:19.920 --> 00:05:23.480
And then finally, you can inject arbitrary Python code


00:05:23.480 --> 00:05:27.360
that will run on unpickling into an existing pickle file


00:05:27.360 --> 00:05:28.800
with --inject.


00:05:28.800 --> 00:05:31.020
Seems fine, right?


00:05:31.020 --> 00:05:31.860
Everything's fine.


00:05:31.860 --> 00:05:33.360
- That's the fun part.


00:05:33.360 --> 00:05:36.760
- Yeah, so if there's no malicious code present,


00:05:36.760 --> 00:05:37.600
here you go.


00:05:37.600 --> 00:05:39.580
- Yeah, exactly.


00:05:39.580 --> 00:05:43.680
Maybe I'm imagining something like a little thing


00:05:43.680 --> 00:05:48.100
that prints out in flashing bright colors.


00:05:48.100 --> 00:05:50.500
We told you shouldn't unpickle untrusted data.


00:05:50.500 --> 00:05:51.340
- Don't do it.


00:05:51.340 --> 00:05:54.000
- Beginning hard drive format.


00:05:54.000 --> 00:05:55.500
It has a loud beeping sound.


00:05:55.500 --> 00:05:57.500
It was three, two, one, and just like.


00:05:57.500 --> 00:05:59.720
Obviously not really do it,


00:05:59.720 --> 00:06:01.300
but that would get your attention, right?


00:06:01.300 --> 00:06:02.420
That'd be a mean trick.


00:06:02.420 --> 00:06:06.180
But this is interesting.


00:06:06.180 --> 00:06:07.940
And I didn't really put it together


00:06:07.940 --> 00:06:11.300
with the ML data exchange model exchange story


00:06:11.300 --> 00:06:13.940
until I heard the folks talking about it


00:06:13.940 --> 00:06:15.540
over on Risky Business.


00:06:15.540 --> 00:06:18.940
So it seems like, especially in the ML story,


00:06:18.940 --> 00:06:21.240
you wanna have a look at these kinds of things.


00:06:21.240 --> 00:06:25.180
- So I've heard about the use case before actually,


00:06:25.180 --> 00:06:28.700
but I didn't know that somebody would solve it in this way.


00:06:28.700 --> 00:06:30.220
So pretty, pretty nice.


00:06:30.220 --> 00:06:32.580
- Yeah, I mean, Eric, this is sort of your world, right?


00:06:32.580 --> 00:06:34.220
The machine learning stuff.


00:06:34.220 --> 00:06:37.260
So how does this sit with you?


00:06:37.260 --> 00:06:38.460
What do you think?


00:06:38.460 --> 00:06:39.860
- Yeah, so it comes up all the time


00:06:39.860 --> 00:06:43.700
that you pick up some random model that someone has built.


00:06:43.700 --> 00:06:48.700
So as security issues become more prevalent,


00:06:48.700 --> 00:06:50.700
this might be a thing.


00:06:50.700 --> 00:06:52.740
- Yeah, well, is there better ways to store it?


00:06:52.740 --> 00:06:54.100
Yeah, is there better ways to store it


00:06:54.100 --> 00:06:56.180
like JSON or something else?


00:06:56.180 --> 00:06:58.740
So models don't have to exist that way, do they?


00:06:58.740 --> 00:07:00.660
- Yeah, I mean, even if there was,


00:07:00.660 --> 00:07:03.500
there are some projects that focus on building


00:07:03.500 --> 00:07:06.100
like some reusable interface


00:07:06.100 --> 00:07:08.780
across all these different frameworks and stuff.


00:07:08.780 --> 00:07:12.420
But in reality, people just use pickle and yeah.


00:07:12.420 --> 00:07:13.260
- Really?


00:07:13.260 --> 00:07:14.780
- Yeah, yeah, they do.


00:07:14.780 --> 00:07:17.860
- I just didn't know anybody was really using it for much.


00:07:17.860 --> 00:07:18.820
- It's absolutely common.


00:07:18.820 --> 00:07:20.940
So within like say scikit-learn,


00:07:20.940 --> 00:07:24.040
which is probably most used library ever,


00:07:24.040 --> 00:07:29.080
you just use pickle on the dev to store your files.


00:07:29.080 --> 00:07:32.100
- Yeah. All right.


00:07:32.100 --> 00:07:32.980
Well, cool.


00:07:32.980 --> 00:07:35.420
So this is a useful library from Trello Bits.


00:07:35.420 --> 00:07:36.340
People can check out,


00:07:36.340 --> 00:07:37.900
and we're gonna start with everything is fine,


00:07:37.900 --> 00:07:39.740
and we'll end with everything is fine as well, Brian,


00:07:39.740 --> 00:07:42.140
but over to you.


00:07:42.140 --> 00:07:46.020
- Okay, well, this is something,


00:07:46.020 --> 00:07:49.540
it's a blast from the past a little bit, about a year ago.


00:07:49.540 --> 00:07:53.220
Anyway, I wanna talk about virtual environments


00:07:53.220 --> 00:07:54.980
and directories.


00:07:54.980 --> 00:07:59.020
So, and there's an article from Hinnick


00:07:59.020 --> 00:08:05.220
that's called Python Project Local Virtual Environment Management.


00:08:05.220 --> 00:08:07.020
That's a mouthful.


00:08:07.020 --> 00:08:11.320
But the idea, and we've talked about wanting this before,


00:08:11.320 --> 00:08:12.320
is to be able to--


00:08:12.320 --> 00:08:13.560
I still want it.


00:08:13.560 --> 00:08:18.100
Yeah, so just to go, if I've got several projects going on,


00:08:18.100 --> 00:08:23.000
whenever I CD into a directory with this project,


00:08:23.000 --> 00:08:26.840
I just want the virtual environment to activate automatically.


00:08:26.840 --> 00:08:30.720
And then when I leave it and go to another one, it's just automatically switched.


00:08:30.720 --> 00:08:35.320
Apparently, that already works, and we've already covered it, but I missed it.


00:08:35.320 --> 00:08:41.420
So actually, in episode 185, you brought up Drenv,


00:08:41.420 --> 00:08:45.520
and in part of it, it's the ability to...


00:08:45.520 --> 00:08:50.620
you can have per-project isolated development environments.


00:08:50.620 --> 00:08:51.480
Yes.


00:08:51.480 --> 00:08:56.340
But I didn't pick that up yet, but Hinnick just said...


00:08:56.340 --> 00:08:58.340
This is how you do it.


00:08:58.340 --> 00:09:06.780
How you do it really is you have to install direnv first,


00:09:06.780 --> 00:09:11.780
and then you put a .envrc file in a directory,


00:09:11.780 --> 00:09:15.100
and say layout Python and then what Python version.


00:09:15.100 --> 00:09:17.780
Like layout Python, Python 3.9,


00:09:17.780 --> 00:09:19.500
and then that's it.


00:09:19.500 --> 00:09:21.380
That's all you got to do.


00:09:21.380 --> 00:09:24.340
I'm like, that can't be that easy.


00:09:24.340 --> 00:09:30.100
And it was I did it this morning and it's like man, this is great. So on my Mac, it's all solved


00:09:30.100 --> 00:09:34.060
But it doesn't work on Windows. So oh


00:09:34.060 --> 00:09:36.700
well


00:09:36.700 --> 00:09:46.420
Linux subsystem for Windows or Windows subsystem for Linux WSL, I guess it is. Okay. Yeah, I mean that sort of saw a semi-solid


00:09:46.420 --> 00:09:47.940
Yeah


00:09:47.940 --> 00:09:54.220
Yeah, so I really probably have this need more within Windows than I have in in on a much


00:09:54.220 --> 00:09:56.220
my Mac, but I have it in both places.


00:09:56.220 --> 00:09:59.220
So I'm going to start using it.


00:09:59.220 --> 00:10:00.520
It's great.


00:10:00.520 --> 00:10:03.620
Plus, like you covered last time,


00:10:03.620 --> 00:10:05.920
you can also have a bonus.


00:10:05.920 --> 00:10:08.520
You can put environmental variables in there too,


00:10:08.520 --> 00:10:10.120
so that in the project, you've got,


00:10:10.120 --> 00:10:12.120
like perhaps your secrets


00:10:12.120 --> 00:10:16.820
or just different environmental settings you want to use.


00:10:16.820 --> 00:10:20.020
Yeah, I think people will look in your .rc,


00:10:20.020 --> 00:10:23.120
whatever, your bashrc, zshrc,


00:10:23.120 --> 00:10:25.720
whatever files for your secrets.


00:10:25.720 --> 00:10:28.000
But I suspect it's much less likely


00:10:28.000 --> 00:10:29.680
to go hunting through virtual environments


00:10:29.680 --> 00:10:31.540
and looking for their activate scripts


00:10:31.540 --> 00:10:32.640
and see what's in them.


00:10:32.640 --> 00:10:35.800
People know, but fewer people know


00:10:35.800 --> 00:10:37.360
that stuff gets stashed in there.


00:10:37.360 --> 00:10:39.360
So that's probably good.


00:10:39.360 --> 00:10:43.000
- Right, so I guess mainly the story is


00:10:43.000 --> 00:10:44.040
I knew that you could do it,


00:10:44.040 --> 00:10:45.520
but I didn't realize how easy it was.


00:10:45.520 --> 00:10:47.280
So this is, it's super simple.


00:10:47.280 --> 00:10:48.600
It just took a little bit.


00:10:48.600 --> 00:10:51.720
And then my second thought was,


00:10:51.720 --> 00:10:54.040
It's not that hard to create virtual environments though.


00:10:54.040 --> 00:10:55.160
Is this saving any time?


00:10:55.160 --> 00:10:58.080
I still gotta create this file and put this stuff in it.


00:10:58.080 --> 00:11:01.080
It actually is more typing, a little bit more,


00:11:01.080 --> 00:11:03.520
but it didn't take me long to realize


00:11:03.520 --> 00:11:05.040
that it's when you're switching


00:11:05.040 --> 00:11:08.360
between different directories, you save a ton of time.


00:11:08.360 --> 00:11:10.280
- Yeah, it's like going back and forth


00:11:10.280 --> 00:11:12.480
between projects, right?


00:11:12.480 --> 00:11:13.960
- Yeah.


00:11:13.960 --> 00:11:16.280
So that's it really, just kind of neat.


00:11:16.280 --> 00:11:19.880
- Brett out in the live stream's got a comment for us.


00:11:19.880 --> 00:11:23.940
If you use pyenv, you can run pyenv localenv name


00:11:23.940 --> 00:11:26.540
in your project folder and get this behavior as well.


00:11:26.540 --> 00:11:28.240
How do you do that?


00:11:28.240 --> 00:11:30.820
How do you get it to activate


00:11:30.820 --> 00:11:32.640
by just changing directory into it?


00:11:32.640 --> 00:11:34.100
Is what I'm not totally sure.


00:11:34.100 --> 00:11:35.940
Yeah.


00:11:35.940 --> 00:11:39.340
- Yeah, I think you get the Python version that way, right?


00:11:39.340 --> 00:11:41.260
But not the actual virtual environment.


00:11:41.260 --> 00:11:43.920
- Yeah, possibly if you've installed Python


00:11:43.920 --> 00:11:46.140
through pyenv as well, yeah.


00:11:46.140 --> 00:11:49.700
And then David has a comment back


00:11:49.700 --> 00:11:53.080
to the first topic out there in the live stream.


00:11:53.080 --> 00:11:54.160
Hey, David.


00:11:54.160 --> 00:11:56.400
The irony of legacy object serialization


00:11:56.400 --> 00:11:59.360
being used on cutting edge machine learning.


00:11:59.360 --> 00:12:00.400
- Like that one?


00:12:00.400 --> 00:12:02.360
- Yeah, and then Teddy out live stream.


00:12:02.360 --> 00:12:04.840
Hey, Teddy, he says, does it work with an IDE?


00:12:04.840 --> 00:12:07.280
Changes the interpreter based on the folder you're in


00:12:07.280 --> 00:12:10.120
within a workspace in Viscose, for example.


00:12:10.120 --> 00:12:11.400
That I don't know,


00:12:11.400 --> 00:12:14.320
but I was gonna add the personal comment


00:12:14.320 --> 00:12:18.960
that I don't need this nearly as much as I felt like I used to


00:12:18.960 --> 00:12:22.000
because the way I jump between projects is usually jump,


00:12:22.000 --> 00:12:24.560
open them up in PyCharm and jump between them there.


00:12:24.560 --> 00:12:27.760
And that always activates, if you go to the terminal in PyCharm,


00:12:27.760 --> 00:12:30.400
it activates that environment for that project.


00:12:30.400 --> 00:12:32.720
So, I don't know.


00:12:32.720 --> 00:12:35.680
I'm on the command line all the time, so definitely--


00:12:35.680 --> 00:12:37.320
Yeah, if you're on the command line,


00:12:37.320 --> 00:12:39.320
busting around a lot, then that's--


00:12:39.320 --> 00:12:44.000
then both Brett and Alvaro have a follow-up,


00:12:44.000 --> 00:12:46.960
pyenv adds a shim that intercepts the calls to Python.


00:12:46.960 --> 00:12:48.000
So yeah, very good.


00:12:48.000 --> 00:12:49.880
So it must be that you have to install Python


00:12:49.880 --> 00:12:52.160
through pyenv, but then it'll also do this.


00:12:52.160 --> 00:12:53.000
Very cool.


00:12:53.000 --> 00:12:53.840
Good to know, I didn't know that.


00:12:53.840 --> 00:12:55.920
- Cool, me too.


00:12:55.920 --> 00:12:56.960
- Yeah. - Nice.


00:12:56.960 --> 00:13:00.280
- All right, Eric, first one for you.


00:13:00.280 --> 00:13:03.680
- Yeah, so I brought with me


00:13:03.680 --> 00:13:06.840
the test containers Python library,


00:13:06.840 --> 00:13:09.760
which, and like, let me quote this one from the description


00:13:09.760 --> 00:13:12.760
because I think it's a pretty good summarization.


00:13:12.760 --> 00:13:17.760
So test containers Python is a port for test containers Java


00:13:17.760 --> 00:13:19.200
that allows Docker containers


00:13:19.200 --> 00:13:21.000
for functional integration testing.


00:13:21.000 --> 00:13:24.820
It provides capabilities to spin up Docker containers


00:13:24.820 --> 00:13:27.080
such as databases, Selenium web browsers


00:13:27.080 --> 00:13:29.460
and any other containers for testing.


00:13:29.460 --> 00:13:33.560
So maybe not that many new things in here


00:13:33.560 --> 00:13:36.400
but we use this in a project lately


00:13:36.400 --> 00:13:41.400
And especially we use this in integration pipelines


00:13:41.400 --> 00:13:43.360
using cloud native services.


00:13:43.360 --> 00:13:45.840
So there's a container for Google Cloud Pub/Sub,


00:13:45.840 --> 00:13:47.840
for example, which is pretty amazing.


00:13:47.840 --> 00:13:49.940
Also for like your Kafka.


00:13:49.940 --> 00:13:52.020
This is originally a Java project.


00:13:52.020 --> 00:13:55.160
So there's still a lot to do for the Python community


00:13:55.160 --> 00:13:57.600
in order to catch up a bunch of interfaces


00:13:57.600 --> 00:14:00.260
that need to be implemented and stuff.


00:14:00.260 --> 00:14:05.060
One example, it is here.


00:14:05.060 --> 00:14:07.180
Let me just show you that one.


00:14:07.180 --> 00:14:13.440
There's in the repo, you can find an example


00:14:13.440 --> 00:14:17.780
of how to use this within your CI pipeline.


00:14:17.780 --> 00:14:19.700
So what's happening here is actually


00:14:19.700 --> 00:14:21.980
that if you have like a standard CI pipeline


00:14:21.980 --> 00:14:23.540
for your integration test,


00:14:23.540 --> 00:14:26.020
which consists of Docker containers


00:14:26.020 --> 00:14:27.660
that we use Docker in Docker


00:14:27.660 --> 00:14:30.300
to actually run the integration test.


00:14:30.300 --> 00:14:34.280
So all your standard 2021 stuff in here, I guess.


00:14:34.280 --> 00:14:37.060
- Yeah, this is super cool.


00:14:37.060 --> 00:14:40.300
And the way you do it is just create a context manager.


00:14:40.300 --> 00:14:41.140
Right?


00:14:41.140 --> 00:14:41.960
- Exactly.


00:14:41.960 --> 00:14:44.680
- You just say something like with my SQL container,


00:14:44.680 --> 00:14:46.200
here's a connection string,


00:14:46.200 --> 00:14:50.240
and then you can just do your normal database stuff


00:14:50.240 --> 00:14:51.080
over to it.


00:14:51.080 --> 00:14:51.920
Yeah.


00:14:51.920 --> 00:14:52.740
- Yeah.


00:14:52.740 --> 00:14:54.360
So it integrates perfectly fine with pytest.


00:14:54.360 --> 00:14:56.640
We did that a lot.


00:14:56.640 --> 00:14:59.240
And yeah, the syntax is pretty cool.


00:14:59.240 --> 00:15:00.720
It's super easy to use.


00:15:00.720 --> 00:15:03.340
The integration with the CI/CD works fine.


00:15:03.340 --> 00:15:04.980
So yeah.


00:15:04.980 --> 00:15:08.500
- Yeah, Brian, we could use this with a test fixture


00:15:08.500 --> 00:15:10.620
and a little yield action, something like that.


00:15:10.620 --> 00:15:11.700
- Yeah, yeah.


00:15:11.700 --> 00:15:15.740
And I can't wait to try to play with something like this.


00:15:15.740 --> 00:15:16.580
- Yeah.


00:15:16.580 --> 00:15:18.540
We talked about this way long ago.


00:15:18.540 --> 00:15:19.780
I brought this up, I believe,


00:15:19.780 --> 00:15:21.180
but I'm glad you brought it back, Eric,


00:15:21.180 --> 00:15:23.260
'cause it's really useful and it's really neat.


00:15:23.260 --> 00:15:25.500
And there's more stuff than actually is listed


00:15:25.500 --> 00:15:27.460
on the readme for some reason.


00:15:27.460 --> 00:15:29.340
- Exactly.


00:15:29.340 --> 00:15:33.900
Like if you flip through the actual documentation,


00:15:33.900 --> 00:15:37.160
you can see that there's other containers, right?


00:15:37.160 --> 00:15:41.900
For example, I believe there's a MongoDB one, for example,


00:15:41.900 --> 00:15:43.620
but that's not listed in the documentation.


00:15:43.620 --> 00:15:46.620
And then the cloud emulators are probably neat for you


00:15:46.620 --> 00:15:49.420
for testing that, right? - Absolutely.


00:15:49.420 --> 00:15:52.180
- I mean, that's one of the things that I find


00:15:52.180 --> 00:15:54.960
off-putting from like cloud native type stuff


00:15:54.960 --> 00:15:58.020
is if you don't have access to the cloud,


00:15:58.020 --> 00:15:59.160
you're dead in the water, right?


00:15:59.160 --> 00:16:01.560
Like, and that can be a problem for continuous integration


00:16:01.560 --> 00:16:02.880
and for all sorts of things.


00:16:02.880 --> 00:16:05.160
So things like this are pretty neat.


00:16:05.160 --> 00:16:06.320
- It's definitely challenging.


00:16:06.320 --> 00:16:07.720
So stuff like this helps.


00:16:07.720 --> 00:16:09.680
- Yeah.


00:16:09.680 --> 00:16:12.440
You know, to me, it's an interesting trade-off


00:16:12.440 --> 00:16:15.320
because on one hand, sure, you can mock out your database


00:16:15.320 --> 00:16:19.180
and then just test against your test data.


00:16:19.180 --> 00:16:22.180
But then if your data model and the database changes,


00:16:22.180 --> 00:16:25.240
but you don't think to update the test data,


00:16:25.240 --> 00:16:27.960
well, then your code's gonna, like SQLAlchemy, for example,


00:16:27.960 --> 00:16:30.960
will freak out and crash if the scheme is not a perfect match.


00:16:30.960 --> 00:16:35.960
Whereas you wouldn't find that in testing if you weren't letting it talk a little bit to the database.


00:16:35.960 --> 00:16:39.960
And I think there's just interesting things like this.


00:16:39.960 --> 00:16:43.960
Brian, you even had an episode about not mocking out your database, didn't you?


00:16:43.960 --> 00:16:51.960
Yeah, I think as little as you can mock, I guess, let's do it the reverse.


00:16:51.960 --> 00:16:54.960
As close as you can have to the real environment, the better.


00:16:54.960 --> 00:16:58.000
And this is when people are deploying on containers,


00:16:58.000 --> 00:17:00.720
testing with containers makes total sense.


00:17:00.720 --> 00:17:01.840
- Yeah, absolutely.


00:17:01.840 --> 00:17:04.120
Absolutely.


00:17:04.120 --> 00:17:08.560
All right, I wanna talk a little more infrastructure.


00:17:08.560 --> 00:17:09.400
- Yeah.


00:17:09.400 --> 00:17:11.120
- All right, so I have the one,


00:17:11.120 --> 00:17:14.000
it's gotta be the shortest named thing


00:17:14.000 --> 00:17:18.760
for a featured item, JC, two letters, JC.


00:17:18.760 --> 00:17:22.100
So JC comes to us from Garrett.


00:17:22.100 --> 00:17:23.720
Thank you Garrett for sending that in.


00:17:23.720 --> 00:17:25.440
And at first I was like, I don't know


00:17:25.440 --> 00:17:27.560
if this is relevant to me or if this is interesting.


00:17:27.560 --> 00:17:28.880
But the more I looked at it, I'm like, yeah,


00:17:28.880 --> 00:17:30.600
this is actually pretty awesome.


00:17:30.600 --> 00:17:35.000
To me, let me, I'll read what JC describes itself as


00:17:35.000 --> 00:17:37.320
in a moment, but to me, what this is,


00:17:37.320 --> 00:17:42.320
is it is basically what web scraping is to the web,


00:17:42.320 --> 00:17:44.020
JC is to Linux.


00:17:44.020 --> 00:17:48.880
So there's not a nice API for it,


00:17:48.880 --> 00:17:51.960
but I'd like to somehow wrap a little Python magic around it


00:17:51.960 --> 00:17:54.280
and then have an API for it.


00:17:54.280 --> 00:17:57.440
Okay, so it's official story is it's a CLI tool


00:17:57.440 --> 00:17:59.320
in Python library that converts the output


00:17:59.320 --> 00:18:02.840
of popular command line tools and file types to JSON.


00:18:02.840 --> 00:18:06.560
And it allows piping one thing to the next,


00:18:06.560 --> 00:18:08.660
obviously, 'cause it's Linux-like.


00:18:08.660 --> 00:18:11.600
So the idea is, you know, the example they have


00:18:11.600 --> 00:18:14.320
on their site there is dig.


00:18:14.320 --> 00:18:17.240
So dig is a command that'll give you information


00:18:17.240 --> 00:18:19.540
about a domain.


00:18:19.540 --> 00:18:24.060
So you could do something like dig example.com pipe,


00:18:24.060 --> 00:18:26.840
JC, and then you tell JC what it's expecting,


00:18:26.840 --> 00:18:30.800
output from just whatever the print output


00:18:30.800 --> 00:18:32.820
to the terminal is in dig,


00:18:32.820 --> 00:18:36.420
and it will parse that and turn it into a Python dictionary.


00:18:36.420 --> 00:18:42.460
Right, so I could subprocess run dig,


00:18:42.460 --> 00:18:44.580
but then I just get a huge blob of text


00:18:44.580 --> 00:18:47.300
and I've got to basically go through it,


00:18:47.300 --> 00:18:49.020
try to understand it and so on.


00:18:49.020 --> 00:18:53.220
And this knows the exact format and turns it into structured data.


00:18:53.220 --> 00:18:57.400
So think of all these different Linux commands you may run,


00:18:57.400 --> 00:19:00.040
you find a whole bunch of them, they're like a huge list down here.


00:19:00.040 --> 00:19:09.200
So airport, ARP, crontab, date, CSV, free, du, hash, history, hosts,


00:19:09.200 --> 00:19:14.040
ipconfig, netstat, all those types of commands, syscontrol.


00:19:14.040 --> 00:19:17.980
So for example, if you're automating daemons and stuff like that,


00:19:17.980 --> 00:19:22.780
you can now do that from Python and then instead of getting just a text blob and an exit code you get


00:19:22.780 --> 00:19:26.860
a dictionary back that you can then check out and program against. What do you think?


00:19:26.860 --> 00:19:32.940
Well that's pretty cool. Yeah. Yeah, there's a bunch of built-ins.


00:19:32.940 --> 00:19:38.620
Hopefully the thing you're looking for is one of these.


00:19:38.620 --> 00:19:47.340
Yeah, exactly. I suspect it's not extraordinarily hard to do, to add another one.


00:19:47.340 --> 00:19:49.380
- Yeah. - Yeah.


00:19:49.380 --> 00:19:51.380
But you can also run it on the command line.


00:19:51.380 --> 00:19:53.340
You don't have to use it in Python,


00:19:53.340 --> 00:19:55.380
which is what I was scrolling around looking for.


00:19:55.380 --> 00:19:58.240
So if you want to,


00:19:58.240 --> 00:20:02.300
like, let's suppose I wanna go and run dig,


00:20:02.300 --> 00:20:05.260
and I just want to go to the answers and get the data,


00:20:05.260 --> 00:20:09.300
which would be the IP address of some domain.


00:20:09.300 --> 00:20:14.300
You can say, JC run this thing, and then JQ-R,


00:20:15.480 --> 00:20:19.240
or there's like a way to just pass over a string.


00:20:19.240 --> 00:20:21.160
And basically the string you pass in


00:20:21.160 --> 00:20:24.040
is the object dereferencing,


00:20:24.040 --> 00:20:26.320
the traversal of the dictionary.


00:20:26.320 --> 00:20:30.120
So dot bracket, dot answer bracket, dot data,


00:20:30.120 --> 00:20:33.080
and it'll go and pull that all apart, which is pretty neat.


00:20:33.080 --> 00:20:37.000
So it's got a cool command line,


00:20:37.000 --> 00:20:40.560
terminal automation aspect, just like Fickle.


00:20:40.560 --> 00:20:43.320
- This is a nice wizard effect.


00:20:43.320 --> 00:20:46.080
So that if you know how to do this well


00:20:46.080 --> 00:20:47.800
and people come over and watch you do this,


00:20:47.800 --> 00:20:49.080
they will be amazed.


00:20:49.080 --> 00:20:50.200
- Yes, exactly.


00:20:50.200 --> 00:20:51.920
- Just make sure you're sprint up your third


00:20:51.920 --> 00:20:54.240
or fourth terminal while you do that.


00:20:54.240 --> 00:20:55.120
- Yeah, yeah, yeah.


00:20:55.120 --> 00:20:55.960
- Exactly.


00:20:55.960 --> 00:20:57.480
Eric, what do you think?


00:20:57.480 --> 00:21:00.440
- Yeah, so it sounds like I found something


00:21:00.440 --> 00:21:05.040
that I can put my usual Sunday afternoon time into.


00:21:05.040 --> 00:21:07.400
So I'll play around with it.


00:21:07.400 --> 00:21:08.560
Yeah, yeah, yeah.


00:21:08.560 --> 00:21:09.400
- Exactly.


00:21:09.400 --> 00:21:11.600
Yeah, 'cause every now and then


00:21:11.600 --> 00:21:16.160
I want to do some sub process thing and it needs to call some kind of Linux command. I'm like, uh


00:21:16.160 --> 00:21:18.240
What am I going to do?


00:21:18.240 --> 00:21:22.800
I'm, just going to check the status code the return code and hope it works and then just say it didn't work if it


00:21:22.800 --> 00:21:24.960
Didn't work or you know, you could do so much more with this


00:21:24.960 --> 00:21:32.240
Sorry, brian. Well, there's there's some stuff that that may not that's less unixy that other people might need like


00:21:32.240 --> 00:21:34.480
um, you can parp


00:21:34.480 --> 00:21:37.760
Parp, you can parse uh pip list and pip show


00:21:37.760 --> 00:21:39.600
and uh


00:21:39.600 --> 00:21:42.560
and YAML and XML with this as well.


00:21:42.560 --> 00:21:44.560
So that's pretty nice.


00:21:44.560 --> 00:21:45.760
Yeah.


00:21:45.760 --> 00:21:47.560
Yeah, very cool.


00:21:47.560 --> 00:21:50.640
All right.


00:21:50.640 --> 00:21:53.280
How about some ellipses or


00:21:53.280 --> 00:21:56.720
I don't know how else to say it, dot, dot, dot.


00:21:56.720 --> 00:21:59.200
The next day, do you say more?


00:21:59.200 --> 00:22:05.240
So this was a surprise to me.


00:22:05.240 --> 00:22:08.760
I guess I haven't run into this yet or maybe just I forgot.


00:22:09.200 --> 00:22:14.040
But Python has ellipses, and it has the keyword ellipses.


00:22:14.040 --> 00:22:16.840
Ellipses, ellipses, ellipses.


00:22:16.840 --> 00:22:18.840
- Ellipseye. - Ellipseye.


00:22:18.840 --> 00:22:24.140
And it's an actual object within Python. Who knew?


00:22:24.140 --> 00:22:26.980
And then also you can just do dot, dot, dot.


00:22:26.980 --> 00:22:33.060
And that's a valid thing, an identifier.


00:22:33.060 --> 00:22:35.060
So it's a special value.


00:22:35.060 --> 00:22:38.320
But you can use it for all sorts of stuff.


00:22:38.320 --> 00:22:42.360
Like the, oh, by the way, I'm referencing an article called


00:22:42.360 --> 00:22:47.160
What is Python's ellipses object from Florian Dollitz.


00:22:47.160 --> 00:22:48.920
Thanks, Florian, for writing that.


00:22:48.920 --> 00:22:55.320
So the definition really is,


00:22:55.320 --> 00:23:01.020
it's the same, the ellipses literal is the same as the literal dot dot dot.


00:23:01.020 --> 00:23:07.080
It's a special value used mostly in conjunction with extended slicing syntax


00:23:07.160 --> 00:23:10.320
for user-defined container data types.


00:23:10.320 --> 00:23:12.320
I don't know. What does that mean?


00:23:12.320 --> 00:23:15.080
I guess Pandas uses it, maybe.


00:23:15.080 --> 00:23:17.080
But the article comes up,


00:23:17.080 --> 00:23:19.760
has some interesting things.


00:23:19.760 --> 00:23:21.760
You can use it in place of pass


00:23:21.760 --> 00:23:24.960
because it has a valid value.


00:23:24.960 --> 00:23:27.280
You can kind of do


00:23:27.280 --> 00:23:31.880
a dictionary or a function definition.


00:23:31.880 --> 00:23:34.760
And instead of saying pass, just do three dots


00:23:34.760 --> 00:23:36.560
and that's valid Python.


00:23:36.560 --> 00:23:40.280
I'm kind of liking that. I'm sure people will be like, what are you doing?


00:23:40.280 --> 00:23:43.720
But at the same time, it's like, that's really what you wanted to put down there.


00:23:43.720 --> 00:23:47.600
It's like, I just don't want to put anything, but Python won't work unless I kind of close this off.


00:23:47.600 --> 00:23:49.160
So here's a pass, right?


00:23:49.160 --> 00:23:55.880
Well, also, one of the things I was thinking about is, no, I would probably use pass all the time when in that case.


00:23:55.880 --> 00:24:01.200
But when writing documentation and you really want to have a working code example,


00:24:01.200 --> 00:24:04.080
but you want to just indicate there's going to be more code there.


00:24:04.080 --> 00:24:06.080
That's a cool thing to put in.


00:24:06.080 --> 00:24:08.680
Anyway, so there's that.


00:24:08.680 --> 00:24:12.180
And then there's also using it in type information.


00:24:12.180 --> 00:24:16.020
So with type information, for instance, apparently,


00:24:16.020 --> 00:24:20.580
like let's say I've got a function that returns a tuple.


00:24:20.580 --> 00:24:22.840
I've got these words today.


00:24:22.840 --> 00:24:25.340
Anyway, a tuple with two integers,


00:24:25.340 --> 00:24:28.120
you can just say a tuple with two int,


00:24:28.120 --> 00:24:30.640
but if you don't know how many integers are going to be there,


00:24:30.640 --> 00:24:32.180
you can do the three dots.


00:24:32.240 --> 00:24:34.240
And apparently that works with typing.


00:24:34.240 --> 00:24:37.200
Um, that's neat. So


00:24:37.200 --> 00:24:44.960
Um, there's not a lot apparently it's used also within fast api and typer, but it's there and if you want


00:24:44.960 --> 00:24:50.640
uh, if you want to use uh to implement a certain feature where that might make sense it is a


00:24:50.640 --> 00:24:53.040
it is a thing that's available to


00:24:53.040 --> 00:24:57.680
You like maybe you could have an operator a dot dot operator on your something


00:24:57.680 --> 00:25:00.240
so


00:25:00.640 --> 00:25:04.000
So I learned this just the other day from a tweet


00:25:04.000 --> 00:25:06.520
from Raymond HedJinja, where he was asking people like,


00:25:06.520 --> 00:25:07.400
how would you do this?


00:25:07.400 --> 00:25:12.040
And he brought up the exact same example


00:25:12.040 --> 00:25:16.260
using the documentation and the pass or the ellipsis instead.


00:25:16.260 --> 00:25:20.400
And I didn't even know that this was a Python object.


00:25:20.400 --> 00:25:25.200
I knew it from the typing, but so the question is,


00:25:25.200 --> 00:25:27.920
can you pass this object around?


00:25:27.920 --> 00:25:31.400
can you like return from a function value like dot, dot, dot?


00:25:31.400 --> 00:25:34.760
- I imagine, I don't know.


00:25:34.760 --> 00:25:37.680
- Yeah, it should work, yeah, it should work.


00:25:37.680 --> 00:25:38.520
- Yeah.


00:25:38.520 --> 00:25:39.700
- Okay, nice.


00:25:39.700 --> 00:25:44.280
- I'll try it out while we go on to the next topic.


00:25:44.280 --> 00:25:49.120
- Yeah, that one surprised me.


00:25:49.120 --> 00:25:50.080
Well done, Florian.


00:25:50.080 --> 00:25:55.560
- Yeah, so the last one that I brought with me,


00:25:55.560 --> 00:25:57.760
actually, since I lead the data science and AI team,


00:25:57.760 --> 00:26:00.600
I gotta bring something with me that has to do with it.


00:26:00.600 --> 00:26:05.600
So I brought with me the PyTorch forecasting library.


00:26:05.600 --> 00:26:11.200
So Michael, you just used this analogy


00:26:11.200 --> 00:26:13.920
in a couple of minutes ago.


00:26:13.920 --> 00:26:16.040
So I'm gonna use an analogy now.


00:26:16.040 --> 00:26:19.560
So for me, PyTorch forecasting looks like


00:26:19.560 --> 00:26:24.480
what a fast AI does for computer vision


00:26:24.480 --> 00:26:25.760
and natural language processing,


00:26:25.760 --> 00:26:27.560
it does for time series forecasting.


00:26:27.560 --> 00:26:32.560
because there was like a lack of deep learning


00:26:32.560 --> 00:26:37.740
for type series forecasting, time series forecasting.


00:26:37.740 --> 00:26:41.000
And actually I think that PyTorch forecasting


00:26:41.000 --> 00:26:43.040
is gonna close this gap.


00:26:43.040 --> 00:26:48.040
So it comes in with a bunch of important features actually.


00:26:48.040 --> 00:26:52.320
So it's built on top of PyTorch Lightning,


00:26:52.320 --> 00:26:55.340
which allows training on CPUs,


00:26:55.340 --> 00:26:58.460
single and multiple GPUs basically out of the box.


00:26:58.460 --> 00:27:02.560
So there's been a lot of software engineering involved


00:27:02.560 --> 00:27:04.720
for all the data scientists in the past.


00:27:04.720 --> 00:27:09.420
And this library just makes it pretty simple.


00:27:09.420 --> 00:27:14.040
So you have to work very hard in order to mess things up


00:27:14.040 --> 00:27:16.100
with this library, I guess.


00:27:16.100 --> 00:27:21.100
So what it also brings is a implementation


00:27:22.980 --> 00:27:27.980
of a model that is called the Temporal Fusion Transformers.


00:27:27.980 --> 00:27:32.420
So this is from Google research.


00:27:32.420 --> 00:27:36.260
Actually, there's also a TensorFlow-based implementation.


00:27:36.260 --> 00:27:40.860
I'm gonna put the link to the paper in the show notes.


00:27:40.860 --> 00:27:43.500
This is a very interesting model


00:27:43.500 --> 00:27:46.220
that has performed pretty well


00:27:46.220 --> 00:27:51.220
on a dozen prominent benchmarks very lately.


00:27:52.340 --> 00:27:54.980
And it has a very huge benefit,


00:27:54.980 --> 00:27:57.440
which is that it is pretty interpretable.


00:27:57.440 --> 00:28:00.620
So you can, it does actually calculate


00:28:00.620 --> 00:28:02.060
feature importance for you.


00:28:02.060 --> 00:28:05.860
So this is in the real world applications, very important,


00:28:05.860 --> 00:28:09.300
because whenever you stick your data into these models


00:28:09.300 --> 00:28:10.940
and something good comes out,


00:28:10.940 --> 00:28:12.460
people will always ask you,


00:28:12.460 --> 00:28:15.220
so, okay, so what was the important part in the data?


00:28:15.220 --> 00:28:19.060
So how does it influence the model and the outcome?


00:28:19.060 --> 00:28:22.220
So Temporal Refusion Transformers, they do this for you.


00:28:22.220 --> 00:28:26.820
Also the PyTorch forecasting comes with Optuna,


00:28:26.820 --> 00:28:30.880
which is a popular library for hyperparameter tuning,


00:28:30.880 --> 00:28:34.000
which is also implemented in here.


00:28:34.000 --> 00:28:34.840
- Right, there might be,


00:28:34.840 --> 00:28:39.840
so this does like multivariate time series,


00:28:39.840 --> 00:28:41.680
multivariable time series.


00:28:41.680 --> 00:28:45.580
- Yeah, so the multi-horizon part of it


00:28:45.580 --> 00:28:48.420
is pretty important actually.


00:28:48.420 --> 00:28:49.260
So go ahead, sorry.


00:28:49.260 --> 00:28:51.500
- I was gonna say, so the hyperparameter tuning might say,


00:28:51.500 --> 00:28:53.060
This part actually doesn't make any difference


00:28:53.060 --> 00:28:55.260
in the prediction, but this other part does.


00:28:55.260 --> 00:28:56.820
So pay attention to that, right?


00:28:56.820 --> 00:28:57.860
- Yeah, absolutely.


00:28:57.860 --> 00:28:58.700
- Yeah.


00:28:58.700 --> 00:29:01.500
Yeah, this looks really good.


00:29:01.500 --> 00:29:05.660
So if you wanna predict the future about sales,


00:29:05.660 --> 00:29:09.740
home prices, heart rate, whatever, right?


00:29:09.740 --> 00:29:11.380
- Oh, it comes up all the time.


00:29:11.380 --> 00:29:12.660
Comes up all the time.


00:29:12.660 --> 00:29:15.900
And I know from a couple of guys who work


00:29:15.900 --> 00:29:20.820
for the Google Clouds of this world and the AWSs


00:29:20.820 --> 00:29:24.520
that within these software as a services


00:29:24.520 --> 00:29:26.240
or these APIs that they provide for,


00:29:26.240 --> 00:29:28.240
like say a demand forecast,


00:29:28.240 --> 00:29:31.280
they use this temporary fusion transformers under the hood.


00:29:31.280 --> 00:29:32.120
So.


00:29:32.120 --> 00:29:34.120
- Yeah, no, this looks great.


00:29:34.120 --> 00:29:35.700
- Just spin it up and use it.


00:29:35.700 --> 00:29:37.520
- Yeah, great recommendation.


00:29:37.520 --> 00:29:38.960
Follow up from the previous one, Brian,


00:29:38.960 --> 00:29:40.320
Will McGugan, hey Will,


00:29:40.320 --> 00:29:42.960
the live stream says it's the dot, dot, dot,


00:29:42.960 --> 00:29:46.000
ellipsis sometimes is used as a sentinel value


00:29:46.000 --> 00:29:48.640
to mean no value when none is a valid value.


00:29:50.240 --> 00:29:51.560
So, yeah.


00:29:51.560 --> 00:29:54.880
- Yeah, and also, yes, you can return it from a function.


00:29:54.880 --> 00:29:55.720
So.


00:29:55.720 --> 00:29:56.560
(laughing)


00:29:56.560 --> 00:29:57.380
- Nice.


00:29:57.380 --> 00:29:58.360
(laughing)


00:29:58.360 --> 00:30:00.340
- And then, let's see.


00:30:00.340 --> 00:30:05.580
Someone out in the live stream asked if it has methods.


00:30:05.580 --> 00:30:07.520
Does it have methods or anything that you can do to it?


00:30:07.520 --> 00:30:08.360
That was Teddy.


00:30:08.360 --> 00:30:11.240
Yes, but only the built-ins, right?


00:30:11.240 --> 00:30:12.360
I don't think it, from object.


00:30:12.360 --> 00:30:13.840
I don't think it does anything interesting


00:30:13.840 --> 00:30:15.320
besides just B dot dot dot.


00:30:15.320 --> 00:30:17.320
- Yeah.


00:30:17.320 --> 00:30:19.200
- And then Anderson, hey, Anderson says,


00:30:19.200 --> 00:30:21.020
It's a pity the ecosystem is moving


00:30:21.020 --> 00:30:22.400
towards PyTorch Lightning.


00:30:22.400 --> 00:30:24.520
The separation of concerns there is not very nice.


00:30:24.520 --> 00:30:27.320
In my opinion, PyTorch Ignite does a better job


00:30:27.320 --> 00:30:29.120
in that aspect.


00:30:29.120 --> 00:30:30.680
Eric, that's all you.


00:30:30.680 --> 00:30:32.600
- Yeah, fair enough.


00:30:32.600 --> 00:30:37.040
Still, I mean, one thing that you gotta keep in mind.


00:30:37.040 --> 00:30:40.800
So speaking of separation of concerns, right?


00:30:40.800 --> 00:30:42.320
There's so many data scientists out there


00:30:42.320 --> 00:30:45.560
that if you throw like separations of concerns at them,


00:30:45.560 --> 00:30:48.240
they just answer like, yeah, here's my mom.


00:30:48.240 --> 00:30:52.040
So what is separation of concerns in this sense, right?


00:30:52.040 --> 00:30:56.640
So if this works and people use it, it's probably good.


00:30:56.640 --> 00:30:57.480
- Yeah, cool.


00:30:57.480 --> 00:31:02.160
Brian, extras?


00:31:02.160 --> 00:31:03.200
- Extras.


00:31:03.200 --> 00:31:08.200
Oh, I just wanted to bring up that Python 3.10 RC2 is out.


00:31:08.200 --> 00:31:11.440
So the release candidate,


00:31:11.440 --> 00:31:13.520
the second release candidate for Python 3.10 is out


00:31:13.520 --> 00:31:14.800
so people can play with it.


00:31:14.800 --> 00:31:16.840
Apparently we're like maybe a month away


00:31:16.840 --> 00:31:18.600
from getting 310.


00:31:18.600 --> 00:31:20.320
So I'm excited about that.


00:31:20.320 --> 00:31:21.780
- Yeah, that's very exciting.


00:31:21.780 --> 00:31:23.280
- Nice.


00:31:23.280 --> 00:31:24.120
- Awesome, awesome.


00:31:24.120 --> 00:31:25.960
All right, I got a couple to throw out there.


00:31:25.960 --> 00:31:26.800
- Really?


00:31:26.800 --> 00:31:28.040
- So remember, could you imagine?


00:31:28.040 --> 00:31:28.880
So what a surprise.


00:31:28.880 --> 00:31:29.720
Could you imagine?


00:31:29.720 --> 00:31:33.280
So remember we talked about several things.


00:31:33.280 --> 00:31:38.280
I talked about how I turned off all of the tracking stuff


00:31:38.280 --> 00:31:44.780
and all those things on the website,


00:31:45.960 --> 00:31:48.920
which I think is good because so many people run ad blockers,


00:31:48.920 --> 00:31:51.280
they were, it was like pretty inconsistent data anyway,


00:31:51.280 --> 00:31:52.200
inaccurate.


00:31:52.200 --> 00:31:54.720
Then I mentioned goaccess.io.


00:31:54.720 --> 00:31:57.240
I said, that'd be cool, maybe we should apply it.


00:31:57.240 --> 00:31:59.440
I ended up writing a ton of automation to apply this


00:31:59.440 --> 00:32:00.880
to Python by stock Python,


00:32:00.880 --> 00:32:02.880
talk about them training all the things.


00:32:02.880 --> 00:32:04.140
And it's pretty cool.


00:32:04.140 --> 00:32:05.880
I built some automation that will download


00:32:05.880 --> 00:32:08.600
all the IntentX log files, some of which are text,


00:32:08.600 --> 00:32:10.440
some of which are gzipped,


00:32:10.440 --> 00:32:11.920
and then run this thing across it


00:32:11.920 --> 00:32:16.160
and it will build like one giant monthly log thing


00:32:16.160 --> 00:32:17.680
that then Go Access can then turn


00:32:17.680 --> 00:32:18.960
into nice, beautiful reports.


00:32:18.960 --> 00:32:22.900
So, very excited to have Go Access working well.


00:32:22.900 --> 00:32:24.420
And instead of running it on the server,


00:32:24.420 --> 00:32:27.200
I actually just download and then run it


00:32:27.200 --> 00:32:29.920
on like a monthly report locally,


00:32:29.920 --> 00:32:31.520
which I think is kind of cool.


00:32:31.520 --> 00:32:32.560
- Yeah.


00:32:32.560 --> 00:32:33.820
- All right, that's one.


00:32:33.820 --> 00:32:39.200
We had some feedback about Caffeinate.


00:32:39.200 --> 00:32:40.200
Remember CaffeNate?


00:32:40.200 --> 00:32:43.800
You can type CaffeNate on the macOS terminal


00:32:43.800 --> 00:32:46.160
and it'll keep your system alive.


00:32:46.160 --> 00:32:48.200
Well, Nathan Henry said,


00:32:48.200 --> 00:32:52.040
you mentioned over in macOS, the CaffeNate tool.


00:32:52.040 --> 00:32:57.280
It says you can follow it with a long running command


00:32:57.280 --> 00:32:58.120
to keep awake.


00:32:58.120 --> 00:33:02.640
So you can say like CaffeNate Python dash C import time,


00:33:02.640 --> 00:33:06.600
time.sleep, or so give it some kind of,


00:33:06.600 --> 00:33:08.360
so you could say CaffeNate Python


00:33:08.360 --> 00:33:09.600
in some script you want to run.


00:33:09.600 --> 00:33:14.000
So you could reverse it if that script doesn't use


00:33:14.000 --> 00:33:17.380
keep awake or I think that's what it was, right?


00:33:17.380 --> 00:33:19.760
So you could apply caffeinate to your Python code


00:33:19.760 --> 00:33:21.520
and just say, no, stay awake while you're doing this,


00:33:21.520 --> 00:33:25.620
or you can even apply it to a running process using a PID.


00:33:25.620 --> 00:33:27.880
- So it just stays awake


00:33:27.880 --> 00:33:29.680
while that process is running then?


00:33:29.680 --> 00:33:31.120
- Yep, and then it'll go away, yeah.


00:33:31.120 --> 00:33:32.360
- Oh, okay, nice.


00:33:32.360 --> 00:33:33.520
- Yeah, so it's like the reverse


00:33:33.520 --> 00:33:35.160
of what we talked about then.


00:33:35.160 --> 00:33:40.080
- And then Sean Taver from Teaching Python said,


00:33:40.080 --> 00:33:41.440
isn't this what we were asking for?


00:33:41.440 --> 00:33:44.560
Remember, we were talking about the keyboards.


00:33:44.560 --> 00:33:47.440
And here's a Python one.


00:33:47.440 --> 00:33:50.080
This is a M60 mechanical keyboard,


00:33:50.080 --> 00:33:54.480
the open source USB BLE Bluetooth Low Energy 5,


00:33:54.480 --> 00:33:59.480
hot swappable, 60% keyboard, powered by Python.


00:33:59.480 --> 00:34:01.500
So this one comes with Python built in,


00:34:01.500 --> 00:34:02.880
which is pretty excellent.


00:34:02.880 --> 00:34:05.580
So people want to play with that, they definitely can.


00:34:05.580 --> 00:34:09.660
The next one I want to throw out there real quick


00:34:09.660 --> 00:34:11.380
comes to us from Mark Little,


00:34:11.380 --> 00:34:12.820
friend of mine here in Portland.


00:34:12.820 --> 00:34:15.460
And basically the subtitle is that,


00:34:15.460 --> 00:34:18.660
this is the article from CNBC Finance News


00:34:18.660 --> 00:34:20.780
that open source is booming.


00:34:20.780 --> 00:34:23.700
So the headline has to do with MongoDB,


00:34:23.700 --> 00:34:24.920
but it's more broad.


00:34:24.920 --> 00:34:27.020
So if people are interested in kind of following up on that,


00:34:27.020 --> 00:34:27.860
it's kind of cool.


00:34:27.860 --> 00:34:32.860
So MongoDB surged on Friday, which was last Friday.


00:34:32.860 --> 00:34:36.400
is now worth as much as IBM paid for Red Hat.


00:34:36.400 --> 00:34:38.320
Databricks raised private financing


00:34:38.320 --> 00:34:42.620
around putting it at $30 billion valuation.


00:34:42.620 --> 00:34:45.900
And just, you know, these are the mega open source companies


00:34:45.900 --> 00:34:47.400
but it's pretty interesting.


00:34:47.400 --> 00:34:49.860
So just to give you a sense, like I read this article,


00:34:49.860 --> 00:34:50.700
I go, "That's pretty interesting."


00:34:50.700 --> 00:34:52.860
These numbers kind of just like bounce off me.


00:34:52.860 --> 00:34:55.580
But the one that made it stick for me


00:34:55.580 --> 00:34:58.260
was MongoDB was a private company for a while,


00:34:58.260 --> 00:35:00.220
then it became, then IPO'd, right?


00:35:00.220 --> 00:35:01.960
It had VC money, then IPO'd.


00:35:01.960 --> 00:35:03.960
Do you have a sense?


00:35:03.960 --> 00:35:06.460
Either of you have a sense for how much it IPO'd for?


00:35:06.460 --> 00:35:08.460
It's crazy, right?


00:35:08.460 --> 00:35:12.260
It's like a 1.2, 1.4 billion dollars.


00:35:12.260 --> 00:35:16.460
MongoDB is worth 30 billion now.


00:35:16.460 --> 00:35:20.460
Right, so even after like the crazy IPO,


00:35:20.460 --> 00:35:23.960
1.2 billion to start and now over 30 billion.


00:35:23.960 --> 00:35:27.960
So that is an insane amount of growth in these.


00:35:27.960 --> 00:35:32.280
they talk about Confluent and JFrog and a bunch of other elastic.


00:35:32.280 --> 00:35:36.240
So if you kind of want to dig into the business side of open source,


00:35:36.240 --> 00:35:37.440
that's pretty interesting.


00:35:37.440 --> 00:35:39.840
All right, two more.


00:35:39.840 --> 00:35:43.680
I've been doing a ton of video encoding lately.


00:35:43.680 --> 00:35:47.560
I use FFmpeg for some of the audio processing


00:35:47.560 --> 00:35:51.080
and other types of things around both the podcast and the courses.


00:35:51.080 --> 00:35:53.840
So attribution here.


00:35:53.840 --> 00:35:56.760
This is from Jim Anderson, sent this over. Thanks, Jim.


00:35:57.040 --> 00:35:59.440
ffmpeg.wasm.


00:35:59.440 --> 00:36:03.400
So here's ffmpeg, which is a very popular tool in that world,


00:36:03.400 --> 00:36:07.800
but as a WebAssembly thing, which is pretty awesome.


00:36:07.800 --> 00:36:13.400
And, gosh, I'm trying to remember what the name of the library was,


00:36:13.400 --> 00:36:16.240
but over in... we did talk about it on Python Bytes,


00:36:16.240 --> 00:36:18.800
I think with Cecil Philip on one time.


00:36:18.800 --> 00:36:21.500
Maybe it was even him that brought it up.


00:36:21.500 --> 00:36:24.400
But there's a Python library


00:36:24.400 --> 00:36:26.940
that will run WebAssemblies.


00:36:26.940 --> 00:36:30.440
So not run WebAssembly in your browser or put Python in the browser,


00:36:30.440 --> 00:36:31.100
but reverse it.


00:36:31.100 --> 00:36:33.440
Like, I have a WebAssembly library that does cool stuff.


00:36:33.440 --> 00:36:35.240
Put it in my Python code and run it here.


00:36:35.240 --> 00:36:42.240
So you could take ffmpeg.wasm and pure Python and have like a no dependency


00:36:42.240 --> 00:36:47.800
sort of audio video processing tool in Python, which I think is pretty cool.


00:36:47.800 --> 00:36:51.400
All right, last one.


00:36:51.400 --> 00:36:53.240
I told you we'd start with everything is fine.


00:36:53.240 --> 00:36:54.900
I'm going to end with everything is fine.


00:36:54.900 --> 00:37:00.500
Credit card stealing backdoored packages found in pypi python's pypi library hub. What?


00:37:00.500 --> 00:37:02.820
That's not good


00:37:02.820 --> 00:37:04.820
This this is not good


00:37:04.820 --> 00:37:06.820
This is not good


00:37:06.820 --> 00:37:08.820
um


00:37:08.820 --> 00:37:14.660
When you hear people talk about remote code execution that typically is bad like i'm on the internet


00:37:14.660 --> 00:37:20.260
People send me bad stuff now. They have my computer and I don't even necessarily know it


00:37:20.660 --> 00:37:25.340
So apparently, in addition to this, these were found and removed, it was something...


00:37:25.340 --> 00:37:30.660
What was it? It was something around the line of Noblesse,


00:37:30.660 --> 00:37:34.980
N-O-B-L-E-S-S-E, and a couple of variations on that spelling.


00:37:34.980 --> 00:37:37.980
That was the problem. So I'm happy to see I didn't install that.


00:37:37.980 --> 00:37:40.420
But this doesn't make me happy. It looks like it's fixed.


00:37:40.420 --> 00:37:45.420
So the PyPI team also just patched a remote code execution hole in their platform,


00:37:45.420 --> 00:37:50.500
which potentially could have been exploited to hijack the entirety of PyPI.


00:37:50.500 --> 00:37:55.620
That one makes me way more nervous than typo squatting or that weirdness.


00:37:55.620 --> 00:38:02.980
And it was a vulnerability in the way that they were doing GitHub actions with PyPI,


00:38:02.980 --> 00:38:08.820
which allowed a malicious pull request to execute arbitrary code over there, which is


00:38:08.820 --> 00:38:09.820
not ideal.


00:38:09.820 --> 00:38:10.820
>> Nice.


00:38:10.820 --> 00:38:11.820
>> Yeah.


00:38:11.820 --> 00:38:13.260
But I'm glad to hear that's fixed.


00:38:13.260 --> 00:38:15.100
Anyway, everything's fine.


00:38:15.100 --> 00:38:18.340
>> Doesn't feel fine.


00:38:18.340 --> 00:38:19.840
- No, not at all.


00:38:19.840 --> 00:38:22.420
(all laughing)


00:38:22.420 --> 00:38:24.900
More like a nightmare to be honest.


00:38:24.900 --> 00:38:25.980
- Yeah, to be honest.


00:38:25.980 --> 00:38:28.540
Eric, anything else you wanna share with us?


00:38:28.540 --> 00:38:33.760
- No, just thank you guys again for having me on the show.


00:38:33.760 --> 00:38:36.020
Pretty fun.


00:38:36.020 --> 00:38:39.780
And make sure that you guys follow me on Twitter.


00:38:39.780 --> 00:38:40.620
And yeah.


00:38:40.620 --> 00:38:42.820
- Awesome.


00:38:42.820 --> 00:38:43.640
- We're done.


00:38:43.640 --> 00:38:46.460
- Yeah, we'll put a link in the show notes for your Twitter.


00:38:46.460 --> 00:38:48.820
- No, we are done, are we, Ryan?


00:38:48.820 --> 00:38:49.660
- No, we need to go.


00:38:49.660 --> 00:38:50.940
- Oh, there's one thing that's missing.


00:38:50.940 --> 00:38:51.820
Yeah, yeah, yeah.


00:38:51.820 --> 00:38:53.060
It's important.


00:38:53.060 --> 00:38:54.220
- Yes, all right, well.


00:38:54.220 --> 00:39:00.420
So this one is more of a, not an ML one,


00:39:00.420 --> 00:39:04.920
it's more of a web API type thing.


00:39:04.920 --> 00:39:08.060
So, so often people will write web APIs


00:39:08.060 --> 00:39:10.580
and just return some kind of message


00:39:10.580 --> 00:39:12.300
in a JavaScript dictionary


00:39:12.300 --> 00:39:14.660
that says things like bad response or whatever,


00:39:14.660 --> 00:39:17.380
but you're supposed to use HTTP status codes, right?


00:39:17.380 --> 00:39:19.380
Like if there's a bad request,


00:39:19.380 --> 00:39:22.100
you should return the status code 400.


00:39:22.100 --> 00:39:24.420
If it's not found as an entity,


00:39:24.420 --> 00:39:26.800
you should return 404 or whatever.


00:39:26.800 --> 00:39:30.980
So here's like two kids at school exchanging messages


00:39:30.980 --> 00:39:32.340
and it has server on one of them,


00:39:32.340 --> 00:39:35.980
client on the other and 200 on the message exchange here.


00:39:35.980 --> 00:39:37.580
And then at the bottom,


00:39:37.580 --> 00:39:40.460
the one kid that got the message reads the JavaScript


00:39:40.460 --> 00:39:42.980
and it says status code 400, detailed bad request.


00:39:42.980 --> 00:39:44.980
He's like, "Why, why did you do this to me?"


00:39:44.980 --> 00:39:47.640
(both laughing)


00:39:47.640 --> 00:39:49.740
- This is good.


00:39:49.740 --> 00:39:51.580
- Yeah, this is like little Bobby tables.


00:39:51.580 --> 00:39:52.620
Let this be a lesson to you.


00:39:52.620 --> 00:39:54.260
You don't pass messages like that.


00:39:54.260 --> 00:39:55.700
Come on.


00:39:55.700 --> 00:39:57.100
- It's so true.


00:39:57.100 --> 00:39:58.340
- It's totally true.


00:39:58.340 --> 00:39:59.540
Totally true.


00:39:59.540 --> 00:40:01.420
All right, well, that's it for our jokes


00:40:01.420 --> 00:40:02.860
and everything, Brian.


00:40:02.860 --> 00:40:06.640
- Yeah, well, another fun Wednesday on Python Bytes.


00:40:06.640 --> 00:40:08.860
- Absolutely.


00:40:08.860 --> 00:40:09.780
- Thanks, Eric. - Thanks, Brian.


00:40:09.780 --> 00:40:11.820
Yeah, thanks, Eric, for being here.


00:40:11.820 --> 00:40:13.260
Thanks a lot, guys.


00:40:13.260 --> 00:40:14.980
See you around.


00:40:14.980 --> 00:40:16.100
Bye, all.


00:40:16.100 --> 00:40:17.660
Bye.

