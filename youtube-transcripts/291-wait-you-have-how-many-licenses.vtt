WEBVTT

00:00:00.000 --> 00:00:02.760
Hey Brian, hey YouTube.


00:00:02.760 --> 00:00:03.600
- Hey everyone.


00:00:03.600 --> 00:00:06.160
Yeah, sorry about everybody.


00:00:06.160 --> 00:00:08.120
Sorry to everybody that showed up early.


00:00:08.120 --> 00:00:12.040
We are recording a little bit later than normal,


00:00:12.040 --> 00:00:14.420
but we'll get started now.


00:00:14.420 --> 00:00:17.880
Hello and welcome to Python Bytes,


00:00:17.880 --> 00:00:19.720
where we deliver Python news and headlines


00:00:19.720 --> 00:00:21.120
directly to your earbuds.


00:00:21.120 --> 00:00:26.120
This is episode 291, recorded July 6, 2022,


00:00:26.120 --> 00:00:27.520
and I'm Brian Otkin.


00:00:28.680 --> 00:00:30.040
- Hey, I'm Michael Kennedy.


00:00:30.040 --> 00:00:32.880
- Good to see you, Michael.


00:00:32.880 --> 00:00:35.320
- Yeah, good to see Brian as well.


00:00:35.320 --> 00:00:36.760
Fun as always.


00:00:36.760 --> 00:00:39.360
There's just a never ending flow of fun stuff to talk about.


00:00:39.360 --> 00:00:42.360
I know we got good stuff to share today as always.


00:00:42.360 --> 00:00:43.200
- Yes, we do.


00:00:43.200 --> 00:00:44.880
Why don't you kick us off?


00:00:44.880 --> 00:00:50.080
- All right, I'm gonna kick us off with licensing.


00:00:50.080 --> 00:00:52.880
Something everybody's super psyched about.


00:00:52.880 --> 00:00:56.280
But I think you'll find this project interesting


00:00:56.280 --> 00:00:59.280
And I don't know how you'll receive it,


00:00:59.280 --> 00:01:01.320
but I was like, wait a minute, what?


00:01:01.320 --> 00:01:02.760
This is odd.


00:01:02.760 --> 00:01:06.680
So this project comes to us from Tom Nighthoff.


00:01:06.680 --> 00:01:07.600
And he sent this in and said,


00:01:07.600 --> 00:01:12.520
you know, it occurred to me that we have licenses


00:01:12.520 --> 00:01:13.360
for things like pytest.


00:01:13.360 --> 00:01:15.080
So I could go search for pytest.


00:01:15.080 --> 00:01:21.280
And over on GitHub, turn my programming lens,


00:01:21.280 --> 00:01:23.400
over on GitHub, I could check this out.


00:01:23.400 --> 00:01:24.640
And what is the license?


00:01:25.960 --> 00:01:27.920
Well, it looks like the license is MIT.


00:01:27.920 --> 00:01:29.200
So if I want to use pytest,


00:01:29.200 --> 00:01:31.980
I'm buying into the MIT license, right?


00:01:31.980 --> 00:01:34.200
- Yeah, kinda.


00:01:34.200 --> 00:01:35.120
- Sometimes.


00:01:35.120 --> 00:01:38.320
- Only if you ship with it.


00:01:38.320 --> 00:01:39.160
- That's true.


00:01:39.160 --> 00:01:40.760
But you know, there are libraries like request


00:01:40.760 --> 00:01:43.120
or whatever that you might, you know, ship, right?


00:01:43.120 --> 00:01:45.920
So I'll just put pytest in here to see what we get.


00:01:45.920 --> 00:01:49.100
So this project is called Python Project Insight,


00:01:49.100 --> 00:01:54.100
and it only has about 5,300 packages parsed in so far.


00:01:54.220 --> 00:01:57.420
But the idea is you can say, load the dependencies


00:01:57.420 --> 00:01:59.740
and it'll show you the licenses.


00:01:59.740 --> 00:02:03.620
So for example, for pytest we have the MIT license,


00:02:03.620 --> 00:02:07.340
but pytest depends upon packaging and import lib metadata


00:02:07.340 --> 00:02:11.980
and Colorama and PyParsing and Adders and typing extensions.


00:02:11.980 --> 00:02:14.500
Well, packaging has the Apache license,


00:02:14.500 --> 00:02:16.780
Colorama has the BST license,


00:02:16.780 --> 00:02:20.980
Adders has MIT license, so does pytest,


00:02:20.980 --> 00:02:22.620
and then the Python Software Foundation


00:02:22.620 --> 00:02:26.340
has typing extensions. So I don't know, what do you think of


00:02:26.340 --> 00:02:26.620
that?


00:02:26.620 --> 00:02:32.660
It is interesting, and I don't know what you do with it.


00:02:32.660 --> 00:02:37.780
I don't either. I'm like, wait a minute, I have to kind of sort


00:02:37.780 --> 00:02:41.580
of consider the transit of closure of the dependencies for


00:02:41.580 --> 00:02:46.500
their licenses. And I had never really, I'm sure people are


00:02:46.500 --> 00:02:49.100
there. Well, of course, Michael, of course, that's how it works.


00:02:49.100 --> 00:02:50.980
But for me, I like I hadn't really thought about I look at


00:02:50.980 --> 00:02:53.420
the project or the library and has this license.


00:02:53.420 --> 00:02:57.540
Like another one could be that you would build on before,


00:02:57.540 --> 00:02:59.140
more likely would be like requests.


00:02:59.140 --> 00:03:01.420
So if we load the dependencies for requests,


00:03:01.420 --> 00:03:05.100
you have Apache, BSC, MIT, and Mozilla


00:03:05.100 --> 00:03:06.860
split across that one project.


00:03:06.860 --> 00:03:11.500
So yeah, I just think this is pretty wild.


00:03:11.500 --> 00:03:17.140
Tom pointed out that TensorFlow was one of the more wild ones.


00:03:17.140 --> 00:03:20.180
You load up TensorFlow, there's just


00:03:20.180 --> 00:03:21.940
lots of different licenses here.


00:03:21.940 --> 00:03:26.400
Like sample the GitHub licensing options basically.


00:03:26.400 --> 00:03:29.520
- So if I was shipping a commercial project,


00:03:29.520 --> 00:03:32.000
a commercial product with Python


00:03:32.000 --> 00:03:34.000
that used a whole bunch of dependencies,


00:03:34.000 --> 00:03:36.620
I do know that this transitive closure stuff,


00:03:36.620 --> 00:03:39.140
the stuff that I'm actually shipping with,


00:03:39.140 --> 00:03:42.400
I really am supposed to list those


00:03:42.400 --> 00:03:44.960
and have those licenses listed in somewhere.


00:03:44.960 --> 00:03:46.760
- Right, in a sense, 'cause you are shipping


00:03:46.760 --> 00:03:48.920
the dependencies of a thing


00:03:49.760 --> 00:03:52.040
in order for that thing to work, right?


00:03:52.040 --> 00:03:56.280
- Yeah, so you're at least saying I'm using this,


00:03:56.280 --> 00:03:58.680
it's here and here's the license for it.


00:03:58.680 --> 00:03:59.860
I think that's the case.


00:03:59.860 --> 00:04:01.260
I'm not a lawyer, of course.


00:04:01.260 --> 00:04:05.400
But there's a whole bunch of these tools,


00:04:05.400 --> 00:04:08.960
like pytest, for instance, that we use that we don't ship.


00:04:08.960 --> 00:04:11.240
Those are a different story.


00:04:11.240 --> 00:04:14.160
And that's kind of a different license thing.


00:04:14.160 --> 00:04:15.880
But I don't know about the packages.


00:04:15.880 --> 00:04:18.900
Are these like the packages that, these are shipping,


00:04:18.900 --> 00:04:21.700
they're there, they're not really being sold,


00:04:21.700 --> 00:04:24.680
but do you have to list the licenses


00:04:24.680 --> 00:04:26.140
of the things that you're depending on?


00:04:26.140 --> 00:04:26.980
I don't know.


00:04:26.980 --> 00:04:29.320
- I don't know either.


00:04:29.320 --> 00:04:32.700
I think maybe in sometimes it doesn't matter,


00:04:32.700 --> 00:04:37.700
but if it was GPL rather than LGPL, right, for example,


00:04:37.700 --> 00:04:39.940
that might be something you care about.


00:04:39.940 --> 00:04:41.900
You know, I don't know.


00:04:41.900 --> 00:04:42.860
I would love to hear people


00:04:42.860 --> 00:04:44.500
who really understand this super well,


00:04:44.500 --> 00:04:46.100
if they could like maybe tweet at us


00:04:46.100 --> 00:04:48.140
or comment on the YouTube stream


00:04:48.140 --> 00:04:51.580
or something like that about exactly what that means.


00:04:51.580 --> 00:04:55.980
But I do think it's pretty interesting information.


00:04:55.980 --> 00:04:58.220
Like, mostly this shows the licenses,


00:04:58.220 --> 00:05:02.020
but it also shows the total size of installing the project


00:05:02.020 --> 00:05:03.620
and what libraries it depends upon.


00:05:03.620 --> 00:05:05.940
So you can kind of like poke around with that as well.


00:05:05.940 --> 00:05:07.940
- That is, that's actually pretty useful


00:05:07.940 --> 00:05:09.740
and interesting information as well


00:05:09.740 --> 00:05:11.900
that you don't really think about is how big,


00:05:11.900 --> 00:05:14.580
how big of a download do I get if I put all these things,


00:05:14.580 --> 00:05:15.820
pull all these things together?


00:05:15.820 --> 00:05:16.820
So, yeah.


00:05:16.820 --> 00:05:18.260
- Yeah, and you can pile them up.


00:05:18.260 --> 00:05:20.360
So you can say, I'm using TensorFlow,


00:05:20.360 --> 00:05:23.980
I'm using SKLearn,


00:05:23.980 --> 00:05:28.000
I'm using requests, whatever.


00:05:28.000 --> 00:05:30.160
Then you can say like, okay, for those three,


00:05:30.160 --> 00:05:33.820
tell me about what the story is, you know what I mean?


00:05:33.820 --> 00:05:34.660
- Yeah.


00:05:34.660 --> 00:05:35.880
- It's a little more interesting still.


00:05:35.880 --> 00:05:38.100
I guess maybe that's not quite right,


00:05:38.100 --> 00:05:40.840
but that just kind of works.


00:05:40.840 --> 00:05:43.540
But anyway, yeah, something like that, right?


00:05:43.540 --> 00:05:44.380
Yeah, neat.


00:05:44.380 --> 00:05:45.540
So anyway, thanks Tom for sending that in


00:05:45.540 --> 00:05:46.700
and share it with us.


00:05:46.700 --> 00:05:53.980
- Well, I think I'll switch gears a little bit


00:05:53.980 --> 00:05:56.100
and talk about data classes.


00:05:56.100 --> 00:05:58.220
So I actually really like data classes.


00:05:58.220 --> 00:06:00.540
Have you used data classes much, Mike?


00:06:00.540 --> 00:06:06.780
- Some, they definitely have some very neat properties.


00:06:06.780 --> 00:06:09.460
I find myself kind of when I'm on the edge


00:06:09.460 --> 00:06:12.340
of using a data class, I'm like, maybe Pydantic,


00:06:12.340 --> 00:06:14.220
but Frozen is a cool option.


00:06:14.220 --> 00:06:19.060
you can add slots, slots makes so many things awesome


00:06:19.060 --> 00:06:22.700
in terms of lower memory usage, faster attribute access,


00:06:22.700 --> 00:06:23.520
all kinds of things.


00:06:23.520 --> 00:06:26.140
And if it's just slots equal true on the class definition,


00:06:26.140 --> 00:06:27.700
that's kind of nice.


00:06:27.700 --> 00:06:28.740
- Yeah, it is.


00:06:28.740 --> 00:06:32.020
So Train Hunter is a Python trainer


00:06:32.020 --> 00:06:35.140
and he came up with this cool tool


00:06:35.140 --> 00:06:38.780
on his Python morsels site called the Undated Class.


00:06:38.780 --> 00:06:41.260
And it's actually also a library that he released,


00:06:41.260 --> 00:06:43.500
a little tool that's Undated Class.


00:06:43.500 --> 00:06:47.340
And he, the idea is he was thinking like,


00:06:47.340 --> 00:06:49.340
what would be the equivalent of a data class?


00:06:49.340 --> 00:06:50.780
If you didn't write a data class,


00:06:50.780 --> 00:06:53.420
if you wanted to have the same sort of functionality,


00:06:53.420 --> 00:06:55.100
what would you do in a normal class?


00:06:55.100 --> 00:06:59.020
So he's got this cool tool down and the example shows,


00:06:59.020 --> 00:07:03.300
yeah, it shows here slots, just a point with XYZ,


00:07:03.300 --> 00:07:07.520
all floats and also shows frozen sets and slots,


00:07:07.520 --> 00:07:09.340
but I'm gonna turn those off.


00:07:09.340 --> 00:07:12.820
And you just change the class and it changes the output


00:07:12.820 --> 00:07:17.460
and he prints out what an equivalent class would be


00:07:17.460 --> 00:07:22.100
if you didn't use data classes.


00:07:22.100 --> 00:07:23.300
So actually I'm not,


00:07:23.300 --> 00:07:25.660
and I tried to make sure I understood all of this.


00:07:25.660 --> 00:07:28.240
So one of the things that it's kind of neat


00:07:28.240 --> 00:07:30.660
that it just, it's part of a learning tool that he's got


00:07:30.660 --> 00:07:34.660
that it shows you what you get with data classes,


00:07:34.660 --> 00:07:36.300
but there's not a lot of description around


00:07:36.300 --> 00:07:37.420
like what all this means.


00:07:37.420 --> 00:07:39.840
So this is sort of a fun thing


00:07:39.840 --> 00:07:41.540
to help you look up stuff, I guess.


00:07:41.540 --> 00:07:44.160
So right off the bat, if we just have X, Y, and Z,


00:07:44.160 --> 00:07:47.440
you have a Dunder and Net that takes X, Y, and Z


00:07:47.440 --> 00:07:50.400
as input values and assigns them.


00:07:50.400 --> 00:07:53.160
And it comes with a nice wrapper class


00:07:53.160 --> 00:07:58.160
and then an EQ, a Dunder EQ, which is for equality.


00:07:58.160 --> 00:08:00.200
And one of the things I knew I wanted to look up


00:08:00.200 --> 00:08:04.560
was to make sure I understood is what it does is it says,


00:08:04.560 --> 00:08:06.040
if the other thing,


00:08:06.040 --> 00:08:08.280
if I'm getting compared to something else,


00:08:08.280 --> 00:08:10.400
if that other thing is also my same type


00:08:10.400 --> 00:08:13.020
in this point, in this case point,


00:08:13.020 --> 00:08:16.960
then you can do the equality comparison,


00:08:16.960 --> 00:08:19.720
otherwise to raise a not implemented.


00:08:19.720 --> 00:08:23.680
And that's just kind of a convention because Python,


00:08:23.680 --> 00:08:27.960
and then what happens is Python will try to call EQ


00:08:27.960 --> 00:08:31.360
on the other thing of like reverse the order and stuff


00:08:31.360 --> 00:08:33.500
because it's kind of how Python works.


00:08:33.500 --> 00:08:35.520
But it's one of those hidden sort of things


00:08:35.520 --> 00:08:36.920
is you need to kind of know that.


00:08:36.920 --> 00:08:40.080
If you don't know what to do in an EQ class


00:08:40.080 --> 00:08:43.580
or an EQ function, Ray's not implemented


00:08:43.580 --> 00:08:45.340
and then Python goes from there.


00:08:45.340 --> 00:08:51.880
And then resetting though, if you give it slots,


00:08:51.880 --> 00:08:56.480
all the slots does is add slots to it and that's it,


00:08:56.480 --> 00:08:57.520
which is kind of cool.


00:08:57.520 --> 00:08:59.680
And what slots does, yeah.


00:08:59.680 --> 00:09:01.080
And what slots does is it makes it


00:09:01.080 --> 00:09:02.760
so that you can't add later.


00:09:02.760 --> 00:09:07.760
So if you can't add a W attribute later to your point,


00:09:08.480 --> 00:09:12.340
But then if you do frozen, it does a whole bunch of stuff.


00:09:12.340 --> 00:09:15.060
Oh, you get a whole bunch more Dunder methods,


00:09:15.060 --> 00:09:19.080
but mostly these are just raising exceptions


00:09:19.080 --> 00:09:22.900
so that if you try to change it, it raises an exception.


00:09:22.900 --> 00:09:24.900
So anyway, this is kind of cool.


00:09:24.900 --> 00:09:28.180
- Yeah, do you see the Dunder in it,


00:09:28.180 --> 00:09:32.220
the constructor implementation when you add frozen?


00:09:32.220 --> 00:09:34.260
It doesn't say self.x. - Oh, it does change.


00:09:34.260 --> 00:09:38.180
- It calls setAdder like behind the scenes


00:09:38.180 --> 00:09:40.760
and then it implements setAdder and delAdder


00:09:40.760 --> 00:09:43.740
and raises exceptions if you try to mess with it.


00:09:43.740 --> 00:09:44.580
It's pretty wild.


00:09:44.580 --> 00:09:46.920
- That's cool.


00:09:46.920 --> 00:09:52.860
We're also gonna link to a couple articles


00:09:52.860 --> 00:09:55.580
that Trey wrote about.


00:09:55.580 --> 00:09:58.220
He wrote about this, about how he wrote this.


00:09:58.220 --> 00:10:01.940
And one of the things I'm bringing this up partly


00:10:01.940 --> 00:10:04.460
'cause I like data classes and it's kind of cool


00:10:04.460 --> 00:10:06.140
for people to learn what they are.


00:10:06.140 --> 00:10:10.380
But in his developing this, he says he came up with


00:10:10.380 --> 00:10:14.260
having a great use case for the match case,


00:10:14.260 --> 00:10:18.620
new match case blocks in Python using Sentinel objects,


00:10:18.620 --> 00:10:20.140
which I'm not sure what he's talking about there.


00:10:20.140 --> 00:10:22.500
So I'll have to take that, look at that.


00:10:22.500 --> 00:10:25.260
Using TextWrapDedent, which I love,


00:10:25.260 --> 00:10:28.420
and it's nice to see somebody else using that.


00:10:28.420 --> 00:10:31.260
Slice and then AST, so he's using AST in here.


00:10:31.260 --> 00:10:34.260
So it's kind of a cool, fun example of using that.


00:10:34.260 --> 00:10:36.340
So anyway, yeah, cool.


00:10:36.340 --> 00:10:38.680
- Cool stuff and actually go back to the first one,


00:10:38.680 --> 00:10:40.380
the first tab you got there.


00:10:40.380 --> 00:10:41.880
- Yeah.


00:10:41.880 --> 00:10:44.100
- One of the things I appreciate from this example


00:10:44.100 --> 00:10:46.420
is you just say class point X colon float,


00:10:46.420 --> 00:10:48.220
Y colon float, Z colon float,


00:10:48.220 --> 00:10:50.340
you put the data class attribute on it.


00:10:50.340 --> 00:10:51.580
Look how much it's doing for you, right?


00:10:51.580 --> 00:10:54.220
Like it's not just the typed values,


00:10:54.220 --> 00:10:57.620
but it's protecting the read write ability,


00:10:57.620 --> 00:11:00.820
making it read only, it's getting a wrapper definition,


00:11:00.820 --> 00:11:04.360
It's getting hashability, equality,


00:11:04.360 --> 00:11:06.720
not equality effectively by, all right,


00:11:06.720 --> 00:11:09.880
there's a lot of cool things that's adding for you there.


00:11:09.880 --> 00:11:14.680
- Yeah, and he's suggesting doing other stuff


00:11:14.680 --> 00:11:19.680
like using keyword only and fields,


00:11:19.680 --> 00:11:23.160
different fields to see if you can change how it works.


00:11:23.160 --> 00:11:25.980
But yeah, I'll have to play with this more.


00:11:25.980 --> 00:11:29.160
And a reminder to everybody that has,


00:11:29.160 --> 00:11:33.000
is like data classes are almost enough, but you need more.


00:11:33.000 --> 00:11:35.040
We'll also look at adders because adders


00:11:35.040 --> 00:11:37.700
is a kind of a super set of data classes.


00:11:37.700 --> 00:11:38.540
- Right.


00:11:38.540 --> 00:11:40.600
Yeah, fantastic.


00:11:40.600 --> 00:11:41.560
That's great.


00:11:41.560 --> 00:11:42.960
Cool.


00:11:42.960 --> 00:11:45.040
I find the next one I got here.


00:11:45.040 --> 00:11:46.080
This one's for you.


00:11:46.080 --> 00:11:46.920
Okay.


00:11:46.920 --> 00:11:48.480
- All right.


00:11:48.480 --> 00:11:49.320
- All right.


00:11:49.320 --> 00:11:52.160
So let's go back.


00:11:52.160 --> 00:11:55.840
We'll take a two step process to approach this.


00:11:55.840 --> 00:11:58.720
Did you ever use links, L-Y-N-X?


00:11:58.720 --> 00:12:02.280
>> Yeah, like a long, long time ago.


00:12:02.280 --> 00:12:04.680
>> I remember SSH.


00:12:04.680 --> 00:12:10.920
I know I think I telnet it into the mainframes back of the university,


00:12:10.920 --> 00:12:12.640
and I'd run ly in X.


00:12:12.640 --> 00:12:15.160
This predated the graphical web.


00:12:15.160 --> 00:12:17.280
I mean, it's insane.


00:12:17.280 --> 00:12:21.640
But it's a browser that is pure text in the terminal.


00:12:21.640 --> 00:12:24.200
Today we have all these fancy browsers.


00:12:24.200 --> 00:12:27.080
But one of the things you had a lot of is like keyboard shortcuts and


00:12:27.080 --> 00:12:30.040
and other types of things you could do, right?


00:12:30.040 --> 00:12:31.280
- Yeah.


00:12:31.280 --> 00:12:33.640
- Well, now that it's 30 years later,


00:12:33.640 --> 00:12:37.020
what if we could go back to a time a little bit like that?


00:12:37.020 --> 00:12:40.480
So I wanna introduce you to the Qt Browser,


00:12:40.480 --> 00:12:45.360
Q-U-T-E Browser, okay?


00:12:45.360 --> 00:12:46.360
- Okay.


00:12:46.360 --> 00:12:47.280
- So what is this?


00:12:47.280 --> 00:12:51.280
The Qt Browser is also like kind of


00:12:51.280 --> 00:12:54.080
in need of a homepage refresh,


00:12:54.080 --> 00:12:56.120
but it's a keyboard focused browser


00:12:56.120 --> 00:12:58.460
with a minimal GUI.


00:12:58.460 --> 00:13:01.040
And what's interesting is it's built with Python.


00:13:01.040 --> 00:13:06.620
Okay, so it's a full web browser built with Python.


00:13:06.620 --> 00:13:12.340
And it's kind of like a Vimper or one of these other ones


00:13:12.340 --> 00:13:16.460
that lets you do Vim like control and behavior of it.


00:13:16.460 --> 00:13:19.040
A little bit like Links,


00:13:19.040 --> 00:13:23.280
but it's actually Chrome more or less,


00:13:23.280 --> 00:13:25.580
at least the Chrome runtime.


00:13:25.580 --> 00:13:27.740
So this one was sent in,


00:13:27.740 --> 00:13:28.980
I'm gonna make sure I give him credit


00:13:28.980 --> 00:13:30.020
for giving the shout out.


00:13:30.020 --> 00:13:33.180
This was sent in to us by Martin Boris


00:13:33.180 --> 00:13:35.620
and it's pretty neat.


00:13:35.620 --> 00:13:36.500
So it's a browser.


00:13:36.500 --> 00:13:38.620
Let me switch up my screen share


00:13:38.620 --> 00:13:39.820
just for you for a sec.


00:13:39.820 --> 00:13:44.940
Stop and then I'm gonna add the Qt browser.


00:13:44.940 --> 00:13:45.760
Ready?


00:13:45.760 --> 00:13:47.980
Where is it?


00:13:47.980 --> 00:13:50.420
There.


00:13:50.420 --> 00:13:51.900
All right.


00:13:51.900 --> 00:13:54.340
So look at this bad boy.


00:13:54.340 --> 00:13:57.320
So this is the browser and how do I go to places?


00:13:57.320 --> 00:14:01.280
Well, I can click on things like here's a link I can click on


00:14:01.280 --> 00:14:04.620
but if I wanna go somewhere, I press O


00:14:04.620 --> 00:14:06.500
and it pulls up a place I can open.


00:14:06.500 --> 00:14:08.060
Look at this, I got my history.


00:14:08.060 --> 00:14:11.420
I wanna go to like, I'm gonna go to talk Python.


00:14:11.420 --> 00:14:16.000
If I wanna do a command, I hit colon


00:14:16.000 --> 00:14:17.260
and here's all my commands.


00:14:17.260 --> 00:14:21.720
I've like my tab, focus and control and so on.


00:14:22.580 --> 00:14:25.300
Go over here and just type F.


00:14:25.300 --> 00:14:28.100
So if I wanna navigate, for example,


00:14:28.100 --> 00:14:29.380
I'm here on the Talk Python page.


00:14:29.380 --> 00:14:30.700
What if I wanna go to courses?


00:14:30.700 --> 00:14:32.380
I type F and then everything,


00:14:32.380 --> 00:14:34.940
see how everything gets a letter above it?


00:14:34.940 --> 00:14:35.780
- Oh, that's pretty great.


00:14:35.780 --> 00:14:37.180
- So L, D, D, G.


00:14:37.180 --> 00:14:38.740
If I wanna go to D, I just press D


00:14:38.740 --> 00:14:42.060
and then we're off on the Talk Python Training site


00:14:42.060 --> 00:14:43.020
and so on.


00:14:43.020 --> 00:14:44.260
So I could open,


00:14:44.260 --> 00:14:47.340
say open,


00:14:47.340 --> 00:14:49.160
and I can search for pytest.


00:14:51.260 --> 00:14:56.100
pull up my tests and so on, and I can do a new tab.


00:14:56.100 --> 00:14:57.700
I gotta remember how to do that.


00:14:57.700 --> 00:15:03.860
Yeah, we're gonna say tab clone.


00:15:03.860 --> 00:15:04.700
And I come over here,


00:15:04.700 --> 00:15:06.780
I know there's a bunch of good commands that I'm not following


00:15:06.780 --> 00:15:09.900
like very much like if I was actually using Vim.


00:15:09.900 --> 00:15:10.740
- Yeah.


00:15:10.740 --> 00:15:11.560
- If I could search for pytest book,


00:15:11.560 --> 00:15:12.940
I could come over here, right?


00:15:12.940 --> 00:15:17.500
Like that, and I can hit, is it control or windows control?


00:15:17.500 --> 00:15:18.800
- Ooh, that's a good book.


00:15:20.500 --> 00:15:21.340
I heard this good book.


00:15:21.340 --> 00:15:22.540
So I can like cycle through my tabs,


00:15:22.540 --> 00:15:25.220
see how minimal my tabs are and stuff right there.


00:15:25.220 --> 00:15:26.260
- Oh yeah. - Right at the bottom.


00:15:26.260 --> 00:15:27.220
It's got all the little commands.


00:15:27.220 --> 00:15:30.640
So anyway, and I can type colon Q, boom, we're out.


00:15:30.640 --> 00:15:32.900
- Nice.


00:15:32.900 --> 00:15:33.980
- What do you think of this?


00:15:33.980 --> 00:15:35.620
Yeah, what do you think of that?


00:15:35.620 --> 00:15:37.300
- I actually love the Qt Browser.


00:15:37.300 --> 00:15:39.100
I haven't used it much,


00:15:39.100 --> 00:15:41.660
but I definitely know about it


00:15:41.660 --> 00:15:45.500
because the Florian Bruin who started Qt Browser,


00:15:45.500 --> 00:15:49.060
he's a pytest core contributor


00:15:49.940 --> 00:15:52.380
and also one of the technical reviewers


00:15:52.380 --> 00:15:53.460
for the pytest book.


00:15:53.460 --> 00:15:54.760
So really cool guy.


00:15:54.760 --> 00:15:59.020
But I love the idea of being able to just use a browser


00:15:59.020 --> 00:16:01.620
with a keyboard and not have to touch the mouse at all.


00:16:01.620 --> 00:16:04.980
That's like, that's next level.


00:16:04.980 --> 00:16:05.820
- It's pretty neat.


00:16:05.820 --> 00:16:07.140
- I guess.


00:16:07.140 --> 00:16:07.980
Yeah.


00:16:07.980 --> 00:16:09.820
- Yeah, let's see.


00:16:09.820 --> 00:16:12.060
Out in the audience, Kim Benwick, hey Kim, says,


00:16:12.060 --> 00:16:15.300
I resign myself to using a mouse more than I want to.


00:16:15.300 --> 00:16:16.900
Qt Browser may be the way to go.


00:16:16.900 --> 00:16:18.300
Thanks for the tip, awesome.


00:16:19.140 --> 00:16:20.580
- Yeah. - And Alvaro says,


00:16:20.580 --> 00:16:21.860
"Are those VS Code shortcuts?"


00:16:21.860 --> 00:16:25.940
I suppose only if you have the Vim bindings set in VS Code.


00:16:25.940 --> 00:16:27.540
But then I sort of yes,


00:16:27.540 --> 00:16:30.660
which really just means Vim. - Well, of course you do.


00:16:30.660 --> 00:16:31.620
Why wouldn't you?


00:16:31.620 --> 00:16:34.180
- Are you a monster?


00:16:34.180 --> 00:16:36.980
No. - Can you do,


00:16:36.980 --> 00:16:38.780
can you even do Emacs bindings?


00:16:38.780 --> 00:16:40.740
- I don't know.


00:16:40.740 --> 00:16:43.340
You could do non-Vim bindings.


00:16:43.340 --> 00:16:44.280
- Yeah, right.


00:16:44.280 --> 00:16:48.700
- But then people would look down on you, right, Brian?


00:16:48.700 --> 00:16:50.560
I don't do Vim stuff in my,


00:16:50.560 --> 00:16:52.260
I know that you probably do though.


00:16:52.260 --> 00:16:57.700
- Yeah, I use Vim everywhere, especially in VS Code.


00:16:57.700 --> 00:17:00.500
So nice.


00:17:00.500 --> 00:17:02.820
But I think people should check it out.


00:17:02.820 --> 00:17:03.940
It's kind of a cool project.


00:17:03.940 --> 00:17:07.040
And also it helped push forward some of the,


00:17:07.040 --> 00:17:10.380
some pytest things.


00:17:10.380 --> 00:17:12.060
We got some new features because of this.


00:17:12.060 --> 00:17:13.580
So it's cool.


00:17:13.580 --> 00:17:14.840
- Yeah, that's great.


00:17:14.840 --> 00:17:18.140
I installed it with Homebrew.


00:17:18.140 --> 00:17:19.340
So that was easy to install.


00:17:19.340 --> 00:17:21.620
You can install it with apt on Linux.


00:17:21.620 --> 00:17:22.980
I'm not sure about Windows,


00:17:22.980 --> 00:17:24.220
but they've got a quick start guide.


00:17:24.220 --> 00:17:26.500
So you can follow along to see like,


00:17:26.500 --> 00:17:29.740
you know, what you might want to do.


00:17:29.740 --> 00:17:32.220
Like it's not super obvious.


00:17:32.220 --> 00:17:37.220
- No, that cheat sheet is a kind of a eye chart.


00:17:37.220 --> 00:17:40.700
- It's a bit of an eye chart.


00:17:40.700 --> 00:17:42.180
I suspect you can zoom it.


00:17:42.180 --> 00:17:43.020
There you go.


00:17:43.020 --> 00:17:44.780
It's still small.


00:17:44.780 --> 00:17:46.140
It's still small.


00:17:46.140 --> 00:17:49.740
but yeah, I do like the navigation,


00:17:49.740 --> 00:17:52.480
pressing like F and then just a letter to navigate


00:17:52.480 --> 00:17:54.380
instead of using your mouse to follow the links.


00:17:54.380 --> 00:17:55.580
That's pretty cool.


00:17:55.580 --> 00:17:57.700
- Do you remember those like those templates


00:17:57.700 --> 00:18:00.060
that people used to have like back in the day


00:18:00.060 --> 00:18:04.460
for like in like office tools where they would-


00:18:04.460 --> 00:18:07.500
- Right, it was actually an overlay on your keyboard.


00:18:07.500 --> 00:18:10.020
- Yeah, it would go over the, like the function keys


00:18:10.020 --> 00:18:13.020
to so that you can remember which functions did what


00:18:13.020 --> 00:18:14.540
during what application.


00:18:14.540 --> 00:18:16.180
If you switch to Word, you put a different,


00:18:16.180 --> 00:18:18.220
or probably Word Perfect at the time,


00:18:18.220 --> 00:18:20.700
you put a different template over it.


00:18:20.700 --> 00:18:22.380
- Yeah, I'm gonna use Lotus one, two, three,


00:18:22.380 --> 00:18:24.780
give me the function key over.


00:18:24.780 --> 00:18:26.820
- Yeah, yeah, okay.


00:18:26.820 --> 00:18:29.020
- Yeah, I totally like that, it is.


00:18:29.020 --> 00:18:30.120
- Showing how old I am.


00:18:30.120 --> 00:18:32.820
So let's talk about something new.


00:18:32.820 --> 00:18:35.300
- I'm sure they still teach that in college.


00:18:35.300 --> 00:18:37.420
- Yeah, no, they don't.


00:18:37.420 --> 00:18:39.820
Although in college, I had to teach,


00:18:39.820 --> 00:18:44.500
I was a TA for like a computers 101 class.


00:18:44.500 --> 00:18:48.020
during grad school and links was one of the things we had to teach.


00:18:48.020 --> 00:18:50.480
And I was like, no, I'm just going to use this. Yeah.


00:18:50.480 --> 00:18:55.920
But it was part of the curriculum. Yeah. That's awesome. Anyway,


00:18:55.920 --> 00:19:00.680
so let's switch to something new, like async. So, yeah,


00:19:00.680 --> 00:19:04.540
uh, I think we've talked about court probably several times.


00:19:04.540 --> 00:19:09.780
and court is a, it's like flask, but it's async.


00:19:09.780 --> 00:19:13.060
it actually is the, is the, does the entire,


00:19:13.420 --> 00:19:17.600
It supports the Flask API or I think,


00:19:17.600 --> 00:19:21.180
and sort of looks the same, but it's async instead,


00:19:21.180 --> 00:19:22.120
pretty much.


00:19:22.120 --> 00:19:23.080
But there's a problem.


00:19:23.080 --> 00:19:24.020
- Super close.


00:19:24.020 --> 00:19:26.580
You can basically, everywhere you have the word Flask,


00:19:26.580 --> 00:19:28.660
if you replace it with the word Court,


00:19:28.660 --> 00:19:29.820
it more or less works.


00:19:29.820 --> 00:19:33.340
So like lower case, like import lowercase F Flask,


00:19:33.340 --> 00:19:34.580
you import lowercase Court.


00:19:34.580 --> 00:19:36.660
If you create an object, capital F Flask,


00:19:36.660 --> 00:19:37.580
you use capital Court,


00:19:37.580 --> 00:19:40.380
and then it lets you do async basically.


00:19:40.380 --> 00:19:41.980
- Cool.


00:19:41.980 --> 00:19:44.400
But there's an ecosystem around both of them now.


00:19:44.400 --> 00:19:47.400
So there are extensions to Flask.


00:19:47.400 --> 00:19:49.100
Some of them work on Quart.


00:19:49.100 --> 00:19:50.540
There's extensions to Quart.


00:19:50.540 --> 00:19:53.320
I don't know if any of those work on Flask,


00:19:53.320 --> 00:19:56.540
but the people behind both of them


00:19:56.540 --> 00:19:59.140
kind of are supportive of the whole thing.


00:19:59.140 --> 00:20:02.820
And so Quart is actually now part of the Palettes project


00:20:02.820 --> 00:20:04.440
was the big news.


00:20:04.440 --> 00:20:10.340
And Palettes is the project that includes Flask


00:20:11.240 --> 00:20:12.940
and a whole bunch of other stuff.


00:20:12.940 --> 00:20:16.400
But it, because of this,


00:20:16.400 --> 00:20:20.240
it will help maybe the maintainers kind of work together


00:20:20.240 --> 00:20:23.960
a little bit better and smoother to iron this out.


00:20:23.960 --> 00:20:28.960
So the big difference of course is that Flask has a whiskey


00:20:28.960 --> 00:20:32.240
server behind it, server is the right word.


00:20:32.240 --> 00:20:38.100
And Cort is ASCII, so asynchronous.


00:20:38.100 --> 00:20:42.420
But the, it's, so this is cool.


00:20:42.420 --> 00:20:45.540
Well, why do we care a little bit is that


00:20:45.540 --> 00:20:48.420
it used to be that really you had to do async.


00:20:48.420 --> 00:20:50.260
If you wanted async, you had to do core.


00:20:50.260 --> 00:20:52.540
But now Flask as a Flask 2.0,


00:20:52.540 --> 00:20:57.500
you do have some async capabilities,


00:20:57.500 --> 00:21:01.460
but it's still using a single threaded server.


00:21:01.460 --> 00:21:03.540
So there's, there are some limitations.


00:21:03.540 --> 00:21:07.060
So kind of interesting to read about this.


00:21:07.060 --> 00:21:11.700
There is a async and await page on the Flask website


00:21:11.700 --> 00:21:15.040
that talks about really what the trade-offs are,


00:21:15.040 --> 00:21:17.180
what the performance and the background tasks


00:21:17.180 --> 00:21:19.700
and how to do that within,


00:21:19.700 --> 00:21:22.420
without switching to court,


00:21:22.420 --> 00:21:24.760
but then also talks about at some point,


00:21:24.760 --> 00:21:27.520
you might wanna just switch to court instead.


00:21:27.520 --> 00:21:35.020
Along this line is, I was thinking about this partly


00:21:35.760 --> 00:21:38.360
while I was looking at this other article


00:21:38.360 --> 00:21:40.880
from Steve Pate that called,


00:21:40.880 --> 00:21:44.660
should you use async on your next Python web application?


00:21:44.660 --> 00:21:46.840
Which I was, I wanted to bring this up


00:21:46.840 --> 00:21:49.920
'cause I was curious about what your take on it was.


00:21:49.920 --> 00:21:52.520
The first part is it's a really nice history.


00:21:52.520 --> 00:21:54.920
It talks about the history of web server interfaces


00:21:54.920 --> 00:21:59.920
with Python, with the timelines and, and Whiskey and Ascii.


00:22:01.320 --> 00:22:06.200
And then how AsyncIO came into play


00:22:06.200 --> 00:22:11.200
and how UVicorn is popular and Goonicorn.


00:22:11.200 --> 00:22:15.680
I don't know how to say that.


00:22:15.680 --> 00:22:16.920
- I'm pretty sure it's Gunicorn


00:22:16.920 --> 00:22:19.840
'cause it's short for green unicorn.


00:22:19.840 --> 00:22:21.840
So the last bit should still be pronounced unicorn.


00:22:21.840 --> 00:22:23.360
So I'm gonna go with G.


00:22:23.360 --> 00:22:24.200
- Okay.


00:22:24.200 --> 00:22:25.280
And then there's Hypercorn,


00:22:25.280 --> 00:22:29.840
which is the asynchronous web server that's similar.


00:22:30.920 --> 00:22:33.680
Anyway, so it talks about this, but then at the end,


00:22:33.680 --> 00:22:36.480
the conclusion, it talks about all the different frameworks.


00:22:36.480 --> 00:22:38.640
In the conclusion is,


00:22:38.640 --> 00:22:42.160
most people don't need async on their web server.


00:22:42.160 --> 00:22:47.160
And I was curious what your reaction to this conclusion is.


00:22:47.160 --> 00:22:52.400
- I have some thoughts.


00:22:52.400 --> 00:22:57.520
Okay, so here's my thought.


00:22:57.520 --> 00:23:02.520
- It depends, it depends on how far you need to push it


00:23:02.520 --> 00:23:05.800
towards the edge.


00:23:05.800 --> 00:23:10.800
I was surprised how far you can get without async


00:23:10.800 --> 00:23:12.440
in terms of concurrency.


00:23:12.440 --> 00:23:14.280
- Okay.


00:23:14.280 --> 00:23:17.160
- So I recently did an in-person class, imagine that,


00:23:17.160 --> 00:23:21.320
over Zoom, but live in person.


00:23:21.320 --> 00:23:22.680
I actually have some more to say about that,


00:23:22.680 --> 00:23:23.520
it's kind of related.


00:23:23.520 --> 00:23:26.080
But anyway, I just did a course with some folks


00:23:26.080 --> 00:23:31.240
we're doing FastAPI and they said, look, this async stuff that we're doing,


00:23:31.240 --> 00:23:34.360
like add some complexity to the way that we got to write code.


00:23:34.360 --> 00:23:36.440
And we're not sure whether or not there's a trade off.


00:23:36.440 --> 00:23:41.080
So what we did is we actually ended up writing a FastAPI app


00:23:41.080 --> 00:23:46.360
with using the sync and the async version of SQLAlchemy


00:23:46.360 --> 00:23:50.560
and then using async and an async version of FastAPI endpoints.


00:23:50.560 --> 00:23:51.280
Okay?


00:23:51.280 --> 00:23:52.280
Okay.


00:23:52.280 --> 00:23:55.720
with the database that we had as the backend


00:23:55.720 --> 00:23:58.520
and the database was not the limiting factor


00:23:58.520 --> 00:24:02.400
'cause it was at like 10% CPU while this was happening,


00:24:02.400 --> 00:24:04.000
it was just chilling.


00:24:04.000 --> 00:24:04.840
- Yeah.


00:24:04.840 --> 00:24:08.960
- But with a real database Postgres as the backend,


00:24:08.960 --> 00:24:11.920
what we found was we could do,


00:24:11.920 --> 00:24:14.440
if I can remember this right.


00:24:14.440 --> 00:24:19.760
Oh boy, I can certainly give you the relative bit.


00:24:19.760 --> 00:24:22.000
So with the synchronous version,


00:24:22.000 --> 00:24:24.640
we got way more scalability than we thought.


00:24:24.640 --> 00:24:29.640
So it was like 75% performance of the async version.


00:24:29.640 --> 00:24:37.000
So that seems way higher 'cause the database,


00:24:37.000 --> 00:24:38.360
like most of the things we were doing


00:24:38.360 --> 00:24:40.080
is just waiting on the database.


00:24:40.080 --> 00:24:42.200
But because we were running in gunicorn


00:24:42.200 --> 00:24:43.920
with uvicorn workers,


00:24:43.920 --> 00:24:46.220
I was really just in gunicorn with threads,


00:24:46.220 --> 00:24:49.500
you know, Python doesn't do threading well,


00:24:49.500 --> 00:24:52.580
except when it's listening on a network socket


00:24:52.580 --> 00:24:56.180
or doing a few other things that will release the GIL.


00:24:56.180 --> 00:24:57.020
And guess what?


00:24:57.020 --> 00:24:57.840
When you're talking database,


00:24:57.840 --> 00:24:58.680
you're listening to network socket.


00:24:58.680 --> 00:24:59.500
So there's all these points


00:24:59.500 --> 00:25:01.440
that naturally free up the threading.


00:25:01.440 --> 00:25:03.300
- Interesting.


00:25:03.300 --> 00:25:05.620
- And actually got us like 75% of the way there,


00:25:05.620 --> 00:25:09.980
but we still got 25 to 30% more performance


00:25:09.980 --> 00:25:12.040
out of the async version.


00:25:12.040 --> 00:25:13.820
And it was like,


00:25:13.820 --> 00:25:16.060
I think it was five worker processes


00:25:16.060 --> 00:25:17.340
running on my eight core machine,


00:25:17.340 --> 00:25:18.540
talking to Postgres.


00:25:18.540 --> 00:25:20.440
and we were getting something like,


00:25:20.440 --> 00:25:23.440
you know, like 2000 requests per second


00:25:23.440 --> 00:25:27.720
versus 1500 a second, or maybe it was 1000, 1500,


00:25:27.720 --> 00:25:30.720
something like that, it was a lot of requests per second.


00:25:30.720 --> 00:25:34.760
But we did get more performance out of the async version.


00:25:34.760 --> 00:25:38.960
So my depends is like that last 25,


00:25:38.960 --> 00:25:40.980
are you like that close to your performance?


00:25:40.980 --> 00:25:45.980
I would say 95% of the web apps are not maxed, right?


00:25:45.980 --> 00:25:48.260
They're not maxed out with like multiple servers


00:25:48.260 --> 00:25:49.420
trying to deal with it.


00:25:49.420 --> 00:25:54.500
All right, 95% of servers are doing important work,


00:25:54.500 --> 00:25:57.180
but they're probably still have a lot of capacity left.


00:25:57.180 --> 00:25:58.660
So it's like, it depends.


00:25:58.660 --> 00:26:01.460
Do you need that last 25% or does it not really matter?


00:26:01.460 --> 00:26:04.660
- Yeah.


00:26:04.660 --> 00:26:05.860
Yeah, and also-


00:26:05.860 --> 00:26:07.060
- Those are my thoughts.


00:26:07.060 --> 00:26:11.460
- What's the load like on your typical,


00:26:11.460 --> 00:26:13.860
I mean, what are your levels anyway, right?


00:26:13.860 --> 00:26:16.580
So if you already have an,


00:26:16.580 --> 00:26:18.300
Like for instance, if you already have an application


00:26:18.300 --> 00:26:21.900
running, you can measure it and see what your reload


00:26:21.900 --> 00:26:24.720
is looking like and how many people you have.


00:26:24.720 --> 00:26:28.660
And then if you think, oh, I might increase my,


00:26:28.660 --> 00:26:30.500
what if we double?


00:26:30.500 --> 00:26:32.900
Then you can kind of guess what your load's gonna look like


00:26:32.900 --> 00:26:34.980
if you double and stuff.


00:26:34.980 --> 00:26:36.160
So, interesting.


00:26:36.160 --> 00:26:39.620
- I recommend people check out this Locust thing


00:26:39.620 --> 00:26:43.420
because it's so easy to say a typical user clicks


00:26:43.420 --> 00:26:45.940
on the page between five and 15 seconds.


00:26:45.940 --> 00:26:47.680
They might go log in some of the time,


00:26:47.680 --> 00:26:49.700
they might go hit the homepage,


00:26:49.700 --> 00:26:51.460
they might hit the about, and then you can say,


00:26:51.460 --> 00:26:54.220
I would like to see how many users I can take.


00:26:54.220 --> 00:26:57.340
And if you're 10X what you need,


00:26:57.340 --> 00:26:58.780
it doesn't matter whether you use async or not,


00:26:58.780 --> 00:27:00.900
but there is a performance benefit.


00:27:00.900 --> 00:27:04.080
It's just not as massive as it might sound.


00:27:04.080 --> 00:27:07.820
- The other bit that I wanna like point out


00:27:07.820 --> 00:27:11.900
is the one statement that like,


00:27:11.900 --> 00:27:14.300
it depends on what you're using also.


00:27:14.300 --> 00:27:17.340
Like I can't find the bit here,


00:27:17.340 --> 00:27:21.540
but he was talking about how one application he had,


00:27:21.540 --> 00:27:24.260
he was thinking about, oh, I might do async,


00:27:24.260 --> 00:27:26.300
except for he was using a payment gateway


00:27:26.300 --> 00:27:28.460
that didn't have an async version.


00:27:28.460 --> 00:27:31.620
So he had to use a synchronous for that.


00:27:31.620 --> 00:27:35.740
And since it's synchronous somewhere, you kind of have,


00:27:35.740 --> 00:27:36.560
is this true?


00:27:36.560 --> 00:27:37.400
If it's synchronous somewhere,


00:27:37.400 --> 00:27:38.500
you have to be synchronous everywhere,


00:27:38.500 --> 00:27:40.420
or is that not really true?


00:27:40.420 --> 00:27:43.300
Do you know?


00:27:43.300 --> 00:27:45.420
- Sorry, say that if it's async,


00:27:45.420 --> 00:27:48.700
it's async everywhere or sync, it's sync everywhere.


00:27:48.700 --> 00:27:50.380
- Either one, is either one of those true?


00:27:50.380 --> 00:27:53.300
If I, like if I have a, if I've got an application


00:27:53.300 --> 00:27:57.460
and I do need to hit a gateway that's synchronous,


00:27:57.460 --> 00:28:00.140
do I need to, if I isolate it,


00:28:00.140 --> 00:28:02.060
I guess I can probably do asynchronous


00:28:02.060 --> 00:28:04.680
and hide it that way, but.


00:28:04.680 --> 00:28:07.820
- Yeah, I mean, you just don't get as good a scalability.


00:28:07.820 --> 00:28:08.940
- Yeah. - There, and you kind of


00:28:08.940 --> 00:28:11.260
block up the processing if you do the sync.


00:28:11.260 --> 00:28:15.700
For the async one, you can do like a wrapper


00:28:15.700 --> 00:28:17.720
where you say like, we're gonna do some async work,


00:28:17.720 --> 00:28:19.260
but I'm just gonna call that in block


00:28:19.260 --> 00:28:20.720
because all the other stuff above it


00:28:20.720 --> 00:28:23.060
doesn't want to deal with being async.


00:28:23.060 --> 00:28:26.580
So it's easier to go from sync to async,


00:28:26.580 --> 00:28:27.940
to like have part of it be async.


00:28:27.940 --> 00:28:30.740
The other way around is a little more tricky.


00:28:30.740 --> 00:28:32.500
It can mess it up a bit.


00:28:32.500 --> 00:28:34.100
- Okay, cool.


00:28:34.100 --> 00:28:34.940
- Yeah.


00:28:34.940 --> 00:28:36.580
- Nice, interesting conversation.


00:28:36.580 --> 00:28:37.420
Thanks a lot.


00:28:37.420 --> 00:28:39.820
- Absolutely, it sure is.


00:28:41.180 --> 00:28:43.380
Is that it? Is that all of our items?


00:28:43.380 --> 00:28:45.780
- Are we? I think.


00:28:45.780 --> 00:28:46.620
Is that all of our items? - I think so.


00:28:46.620 --> 00:28:47.580
- I guess so.


00:28:47.580 --> 00:28:48.420
- Yeah, yeah.


00:28:48.420 --> 00:28:49.620
You got any extras for us?


00:28:49.620 --> 00:28:51.740
- I don't.


00:28:51.740 --> 00:28:53.660
- Okay. - No.


00:28:53.660 --> 00:28:54.700
- I have some.


00:28:54.700 --> 00:28:57.100
Let me pull them up here.


00:28:57.100 --> 00:28:58.340
Locust, look, let me tell you about it now.


00:28:58.340 --> 00:28:59.180
It's great.


00:28:59.180 --> 00:29:00.220
All right, now I have three things


00:29:00.220 --> 00:29:01.180
I want to tell people about.


00:29:01.180 --> 00:29:06.180
Number one is I did a talk at Python web conference,


00:29:06.180 --> 00:29:08.720
the HTMX and Flask one that I've done in some other places,


00:29:08.720 --> 00:29:12.400
but that was a fun talk, like a 45 minute flask


00:29:12.400 --> 00:29:15.880
plus HTMX goodness there.


00:29:15.880 --> 00:29:18.600
And so that video along with all the other


00:29:18.600 --> 00:29:24.400
Python webconf 2022 talks are now on YouTube.


00:29:24.400 --> 00:29:26.600
So people can check that out.


00:29:26.600 --> 00:29:31.360
Did you know that the Python web conference had five days


00:29:31.360 --> 00:29:34.560
and I think it was like four or five tracks all day.


00:29:34.560 --> 00:29:35.800
So there are a ton of videos.


00:29:35.800 --> 00:29:38.780
There's like 150 videos or something on there.


00:29:38.780 --> 00:29:40.620
I mean, look at this scroll bar here.


00:29:40.620 --> 00:29:44.340
It's probably gonna like page as I get to the bottom too.


00:29:44.340 --> 00:29:45.780
Yep.


00:29:45.780 --> 00:29:46.620
You know, look at that.


00:29:46.620 --> 00:29:49.660
So there's a lot of talks that people can come check out


00:29:49.660 --> 00:29:51.620
if they're interested in that.


00:29:51.620 --> 00:29:53.840
One of them being PCC MX that I did.


00:29:53.840 --> 00:29:57.020
- Yeah, I wanna watch your talk.


00:29:57.020 --> 00:29:58.260
You've given that a couple of times.


00:29:58.260 --> 00:30:01.080
- Yeah, yeah, I've gave it a couple of times.


00:30:01.080 --> 00:30:02.420
Basically the way it worked is like


00:30:02.420 --> 00:30:03.700
when I was working on that course


00:30:03.700 --> 00:30:04.960
and really like playing with those ideas,


00:30:04.960 --> 00:30:06.640
I submitted to a bunch of conferences


00:30:06.640 --> 00:30:08.480
and those conferences were either a year out


00:30:08.480 --> 00:30:10.480
or they were like a month out or something, right?


00:30:10.480 --> 00:30:13.280
So that's how I ended up so spread out.


00:30:13.280 --> 00:30:16.400
The other one is I mentioned the browser that was fun,


00:30:16.400 --> 00:30:18.460
but how about the Browser-asaurus?


00:30:18.460 --> 00:30:21.320
This is a macOS only tool,


00:30:21.320 --> 00:30:24.720
but there's probably something like it for the others.


00:30:24.720 --> 00:30:25.560
So here's the thing.


00:30:25.560 --> 00:30:30.560
Suppose I'm in Typeora, which is a Markdown editor,


00:30:30.560 --> 00:30:34.760
or I'm in PowerPoint and it's got a link and I click it.


00:30:34.760 --> 00:30:37.840
By default, it opens in the default browser,


00:30:37.840 --> 00:30:39.120
but depending on what you're doing,


00:30:39.120 --> 00:30:40.680
you might want it to be like,


00:30:40.680 --> 00:30:44.340
oh, sometimes I wanted to open in Vivaldi,


00:30:44.340 --> 00:30:46.080
but other times I wanted to open in,


00:30:46.080 --> 00:30:47.880
like say the Qt browser or Orion


00:30:47.880 --> 00:30:49.880
or some odd thing like that, right?


00:30:49.880 --> 00:30:54.880
So the idea with this thing is that you click a link


00:30:54.880 --> 00:30:57.280
and when it opens up,


00:30:57.280 --> 00:30:59.240
instead of opening in the default browser,


00:30:59.240 --> 00:31:01.480
the browser as source is the default.


00:31:01.480 --> 00:31:04.960
And then you have keyboard shortcuts


00:31:04.960 --> 00:31:08.920
like F for Firefox, E for Edge, S for Safari.


00:31:08.920 --> 00:31:11.260
And you say, well, which one do you wanna open in right now?


00:31:11.260 --> 00:31:12.900
And it basically just delegates


00:31:12.900 --> 00:31:14.780
to the different browsers you register it with.


00:31:14.780 --> 00:31:17.040
So you can hit T for Tor or F for Firefox


00:31:17.040 --> 00:31:18.060
when you click a link.


00:31:18.060 --> 00:31:19.620
That's kind of cool.


00:31:19.620 --> 00:31:21.520
- That is pretty cool.


00:31:21.520 --> 00:31:23.500
- Yeah, I haven't been convinced


00:31:23.500 --> 00:31:28.500
that I would use that or not, but I do appreciate it.


00:31:28.660 --> 00:31:31.820
And I feel like maybe someone sent that in


00:31:31.820 --> 00:31:33.420
and if they did, I really appreciate it.


00:31:33.420 --> 00:31:35.700
But yeah, I don't have any notes of who sent it in.


00:31:35.700 --> 00:31:37.040
So anyway, that's pretty cool.


00:31:37.040 --> 00:31:39.520
If you find yourself, you know,


00:31:39.520 --> 00:31:42.100
copy link going to different browsers a lot


00:31:42.100 --> 00:31:45.100
and you're on Mac, I know that's like a small,


00:31:45.100 --> 00:31:47.420
a rapidly decreasing Venn diagram.


00:31:47.420 --> 00:31:48.420
But if you're in that space,


00:31:48.420 --> 00:31:50.500
this might be a cool option for you.


00:31:50.500 --> 00:31:51.340
- Yeah.


00:31:51.340 --> 00:31:53.000
- I don't play much anyway.


00:31:53.000 --> 00:31:54.640
TypeScript mostly.


00:31:54.640 --> 00:31:55.560
- Okay.


00:31:55.560 --> 00:31:57.140
So speaking of browsers,


00:31:57.140 --> 00:31:58.420
I just found this 'cause I was like,


00:31:58.420 --> 00:32:01.480
Is links dead? Can I use something like links now?


00:32:01.480 --> 00:32:04.920
And there's a browser called Browse,


00:32:04.920 --> 00:32:06.600
which is a text-based browser.


00:32:06.600 --> 00:32:08.200
So that's still a thing.


00:32:08.200 --> 00:32:10.120
Cool, I gotta try this out.


00:32:10.120 --> 00:32:11.400
- My gosh.


00:32:11.400 --> 00:32:13.000
I love it that it kind of has text,


00:32:13.000 --> 00:32:14.920
but it like 8-bit pixelated.


00:32:14.920 --> 00:32:16.840
- Yeah, it takes the images.


00:32:16.840 --> 00:32:18.240
- I mean, it has pictures, but it kind of 8-bit,


00:32:18.240 --> 00:32:19.580
it takes the images and makes them look


00:32:19.580 --> 00:32:20.780
like what you would get.


00:32:20.780 --> 00:32:24.040
- Yeah, so I'll have to give this a try.


00:32:24.040 --> 00:32:25.440
Yeah.


00:32:25.440 --> 00:32:26.720
- And you run it in Docker.


00:32:26.720 --> 00:32:27.560
Of course you do.


00:32:27.560 --> 00:32:29.840
All right, pretty cool.


00:32:29.840 --> 00:32:33.000
All right, let's, yeah, go ahead.


00:32:33.000 --> 00:32:35.600
One more before we get to our joke.


00:32:35.600 --> 00:32:39.200
The other one is I talked about doing a live class.


00:32:39.200 --> 00:32:41.200
So I actually have an announcement


00:32:41.200 --> 00:32:43.440
for a live class that I'm doing.


00:32:43.440 --> 00:32:46.040
So obviously people know I have a bunch of online courses


00:32:46.040 --> 00:32:47.840
and of course I'm gonna keep,


00:32:47.840 --> 00:32:49.280
I'm already working on the next one of those


00:32:49.280 --> 00:32:50.680
and we've got a bunch coming there.


00:32:50.680 --> 00:32:55.400
But I wanna try some experiments,


00:32:55.400 --> 00:33:00.400
something where people can attend a class


00:33:00.400 --> 00:33:03.120
in person with other people, right?


00:33:03.120 --> 00:33:06.760
If they sort of help each other along,


00:33:06.760 --> 00:33:08.520
and I've tried this before, this cohort thing,


00:33:08.520 --> 00:33:10.560
but I think I've got a better platform,


00:33:10.560 --> 00:33:11.380
a better way to do it.


00:33:11.380 --> 00:33:14.720
So over at, this link I'm gonna put in the show notes,


00:33:14.720 --> 00:33:17.400
I'm doing a FastAPI in MongoDB,


00:33:17.400 --> 00:33:21.640
so basically FastAPI, Pydantic, Beanie, and MongoDB course


00:33:21.640 --> 00:33:25.280
that is going to be a four day, six day course


00:33:25.280 --> 00:33:29.560
over two weeks and it has a couple hours a day


00:33:29.560 --> 00:33:32.840
and a bunch of people there working together


00:33:32.840 --> 00:33:37.840
on some fun stuff and I'll be live teaching every session.


00:33:37.840 --> 00:33:40.780
So it's gonna be like a live course


00:33:40.780 --> 00:33:42.760
as if you were attending it in person,


00:33:42.760 --> 00:33:45.680
just remotely because it's 2022 and it's not,


00:33:45.680 --> 00:33:51.520
I guess it's not post COVID all the way.


00:33:51.520 --> 00:33:53.860
But anyway, it's got a really cool set of topics


00:33:53.860 --> 00:33:57.060
we cover talks about async, it talks about Mongo, Beanie,


00:33:57.060 --> 00:33:59.780
PyDandic, FastAPI of course.


00:33:59.780 --> 00:34:02.020
We even use Locust at the end to test it out.


00:34:02.020 --> 00:34:08.220
- I think this would be fun, this looks great, cool.


00:34:08.220 --> 00:34:09.060
- Yeah, awesome.


00:34:09.060 --> 00:34:10.740
I think it'll be fun too, I think it'll be neat


00:34:10.740 --> 00:34:13.060
to have this experience with people.


00:34:13.060 --> 00:34:16.540
And I've tried this before, but all my prior attempts were,


00:34:16.540 --> 00:34:17.860
they were good I think, but they were like,


00:34:17.860 --> 00:34:19.780
"Oh, take the online course, and then we'll do


00:34:19.780 --> 00:34:20.980
"like a community type thing."


00:34:20.980 --> 00:34:24.180
This is like a live course that I'm just teaching


00:34:24.180 --> 00:34:26.060
one off for that group of people that sign up.


00:34:26.060 --> 00:34:27.820
So we'll see how that goes.


00:34:27.820 --> 00:34:29.260
If it goes really well, people love it,


00:34:29.260 --> 00:34:30.100
then I'll do more of these.


00:34:30.100 --> 00:34:31.560
If not, then maybe less of them.


00:34:31.560 --> 00:34:32.540
I don't know, we'll see how it goes.


00:34:32.540 --> 00:34:36.220
But this is happening August 8th to 19th.


00:34:36.220 --> 00:34:37.780
So it has a real date,


00:34:37.780 --> 00:34:40.640
it has a real live aspect to it.


00:34:40.640 --> 00:34:42.420
- Nice.


00:34:42.420 --> 00:34:43.260
- All right.


00:34:43.260 --> 00:34:47.380
That's and Mario on the ice says,


00:34:47.380 --> 00:34:48.620
that's my stack right there.


00:34:48.620 --> 00:34:50.180
Oh yeah, that's a good stack right there.


00:34:50.180 --> 00:34:53.780
There's some really good stuff to talk about there.


00:34:53.780 --> 00:34:56.220
I've been using Beanie and FastAPI for stuff


00:34:56.220 --> 00:34:57.980
and obviously Mongo.


00:34:57.980 --> 00:34:59.020
- Yeah.


00:34:59.020 --> 00:35:02.540
Speaking of courses, one question out there,


00:35:02.540 --> 00:35:04.140
how's the pytest course going?


00:35:04.140 --> 00:35:08.160
It is going, it's creeping forward,


00:35:08.160 --> 00:35:10.520
but life has gotten in the way.


00:35:10.520 --> 00:35:13.360
- And it's awesome that you're having,


00:35:13.360 --> 00:35:16.260
yeah, it's awesome that you're working on that.


00:35:16.260 --> 00:35:18.500
It takes a while to create a course, doesn't it?


00:35:18.500 --> 00:35:19.500
- Longer than I thought.


00:35:19.500 --> 00:35:21.120
I'm like, man, I already wrote the book.


00:35:21.120 --> 00:35:23.720
I can totally pop a course out like a couple of days.


00:35:23.720 --> 00:35:24.560
(laughing)


00:35:24.560 --> 00:35:25.520
- Of course.


00:35:25.520 --> 00:35:27.600
Would you say that like as a junior developer,


00:35:27.600 --> 00:35:29.320
you might think about this differently


00:35:29.320 --> 00:35:32.040
than after somebody has been doing it for a while?


00:35:32.040 --> 00:35:32.880
- Yeah.


00:35:32.880 --> 00:35:34.800
This cracked me up.


00:35:34.800 --> 00:35:36.160
So I can't remember who shared this.


00:35:36.160 --> 00:35:38.560
- This is a great joke from out here.


00:35:38.560 --> 00:35:40.680
- Somebody shared on Twitter, sorry.


00:35:40.680 --> 00:35:42.600
I don't know who, but.


00:35:42.600 --> 00:35:44.400
Okay, so in a job interview,


00:35:44.400 --> 00:35:47.920
you've got somebody gets asked,


00:35:47.920 --> 00:35:49.680
where do you see yourself in five years?


00:35:49.680 --> 00:35:53.120
And the junior developer in this interview question,


00:35:53.120 --> 00:35:56.320
like shows a picture of like, you know,


00:35:56.320 --> 00:35:58.360
the black hoodie with multiple screens


00:35:58.360 --> 00:35:59.680
and light up keyboard.


00:35:59.680 --> 00:36:01.680
Just, I'm an acronym.


00:36:01.680 --> 00:36:02.520
- Yeah.


00:36:02.520 --> 00:36:04.280
- Totally coding, yeah.


00:36:04.280 --> 00:36:06.000
- Senior developer, where do you see yourself


00:36:06.000 --> 00:36:07.480
in five years?


00:36:07.480 --> 00:36:08.380
On a farm.


00:36:08.380 --> 00:36:11.880
- Pumpkin farming with cows and apples.


00:36:11.880 --> 00:36:13.920
And you know what, I'm about done.


00:36:16.080 --> 00:36:19.200
- Yeah, my personal thoughts are why not both?


00:36:19.200 --> 00:36:21.960
This is just a view of the inside his office


00:36:21.960 --> 00:36:23.060
and then outside.


00:36:23.060 --> 00:36:25.400
Working from home, man.


00:36:25.400 --> 00:36:28.320
- That's right, working from home.


00:36:28.320 --> 00:36:31.480
All right, I have maybe the one that preceded that,


00:36:31.480 --> 00:36:33.760
the one that, or maybe is in between these two


00:36:33.760 --> 00:36:35.480
that might precipitate the second.


00:36:35.480 --> 00:36:37.320
You ready? - Okay.


00:36:37.320 --> 00:36:39.920
- All right, so this is a tweet from Programming Humor.


00:36:39.920 --> 00:36:42.760
It's a strange language, that JS.


00:36:42.760 --> 00:36:44.680
JavaScript is such a strange language.


00:36:44.680 --> 00:36:45.960
Nobody can understand it.


00:36:45.960 --> 00:36:49.800
But if they manage to, then they create their own framework.


00:36:49.800 --> 00:36:52.400
(laughing)


00:36:52.400 --> 00:36:55.040
Everyone's got their JavaScript front end framework


00:36:55.040 --> 00:36:56.720
or something like that.


00:36:56.720 --> 00:36:57.560
- Yeah.


00:36:57.560 --> 00:37:01.560
You know you've made it when the framework you've invented


00:37:01.560 --> 00:37:03.600
starts showing up on job requirements.


00:37:03.600 --> 00:37:05.840
- That's right.


00:37:05.840 --> 00:37:10.680
With four years experience when it's still years old.


00:37:10.680 --> 00:37:11.640
- Exactly.


00:37:11.640 --> 00:37:15.440
Well, good episode, Michael.


00:37:15.440 --> 00:37:18.320
Thanks for showing up again.


00:37:18.320 --> 00:37:19.600
You bet.


00:37:19.600 --> 00:37:20.720
Fun as always.


00:37:20.720 --> 00:37:22.600
Yeah, thanks everybody.


00:37:22.600 --> 00:37:24.720
In the slack and everything.


00:37:24.720 --> 00:37:25.640
Bye.


00:37:25.640 --> 00:37:26.480
Yep.


00:37:26.480 --> 00:37:27.320
Later.

