WEBVTT

00:00:00.000 --> 00:00:04.480
- Everyone out there in the live stream.


00:00:04.480 --> 00:00:06.160
Hey, Brian, hey, Ethan.


00:00:06.160 --> 00:00:07.560
- Hey, Michael.


00:00:07.560 --> 00:00:09.040
- Ethan, welcome to Python Bytes over here.


00:00:09.040 --> 00:00:10.320
This is a lot of fun.


00:00:10.320 --> 00:00:11.160
- Yeah, thanks.


00:00:11.160 --> 00:00:12.320
It's really cool to be here.


00:00:12.320 --> 00:00:13.160
- Yeah.


00:00:13.160 --> 00:00:14.000
- Yeah, I've been listening for a while


00:00:14.000 --> 00:00:16.200
and it's cool to get a chance to be on.


00:00:16.200 --> 00:00:17.440
- Awesome, yeah, yeah.


00:00:17.440 --> 00:00:18.520
Well, we're about to kick off the show.


00:00:18.520 --> 00:00:19.360
I just wanna say, Dean,


00:00:19.360 --> 00:00:21.380
thank you for always keeping us on track


00:00:21.380 --> 00:00:22.840
on how we do our introduction here.


00:00:22.840 --> 00:00:26.900
So, let's do this.


00:00:26.900 --> 00:00:28.280
Hello and welcome to Python Bytes


00:00:28.280 --> 00:00:30.040
where we deliver Python news and headlines


00:00:30.040 --> 00:00:31.200
directly to your earbuds.


00:00:31.200 --> 00:00:36.200
This is episode 252, recorded September 29th, 2021.


00:00:36.200 --> 00:00:38.000
I'm Michael Kennedy.


00:00:38.000 --> 00:00:39.160
- And I'm Brian Okken.


00:00:39.160 --> 00:00:41.960
- And I'm Ethan Swan.


00:00:41.960 --> 00:00:44.440
- Ethan, welcome to Python Bytes.


00:00:44.440 --> 00:00:45.840
You've been over on Talk Python,


00:00:45.840 --> 00:00:48.880
where you talked about some really cool data science stuff.


00:00:48.880 --> 00:00:50.360
And now you're over here.


00:00:50.360 --> 00:00:51.400
So thanks for being here.


00:00:51.400 --> 00:00:52.880
Tell people a bit about yourself.


00:00:52.880 --> 00:00:53.720
- Sure.


00:00:53.720 --> 00:00:56.520
Yeah, I was on Talk Python 236.


00:00:56.520 --> 00:00:59.000
So it was a while ago, but that was really cool.


00:00:59.000 --> 00:01:01.880
So I work for a company called 8451.


00:01:01.880 --> 00:01:06.160
It's the data science subsidiary of Kroger.


00:01:06.160 --> 00:01:07.480
And I'm a data scientist,


00:01:07.480 --> 00:01:09.440
but basically what I do is build tools,


00:01:09.440 --> 00:01:12.520
mostly which are in Python for our data science department.


00:01:12.520 --> 00:01:15.120
So we have like 250 data scientists,


00:01:15.120 --> 00:01:16.600
pretty large department.


00:01:16.600 --> 00:01:19.600
And I build like packages and some dashboard sort of things,


00:01:19.600 --> 00:01:23.080
just like various technology helper stuff for data science.


00:01:23.080 --> 00:01:24.280
- Yeah, it sounds really fun.


00:01:24.280 --> 00:01:27.120
and you all run what we were talking about


00:01:27.120 --> 00:01:28.120
before we hit record,


00:01:28.120 --> 00:01:29.720
one of the, probably one of the larger


00:01:29.720 --> 00:01:31.880
data science groups out there, right?


00:01:31.880 --> 00:01:33.280
I think of data science as being like,


00:01:33.280 --> 00:01:35.040
there's a couple of folks that are embedded


00:01:35.040 --> 00:01:37.500
with like a marketing team or a product team


00:01:37.500 --> 00:01:39.280
or the software development team a lot of times,


00:01:39.280 --> 00:01:43.280
but you are a properly large group of data scientists.


00:01:43.280 --> 00:01:45.600
- I mean, in theory, that's what the whole company does.


00:01:45.600 --> 00:01:47.200
So it's a very cool experience.


00:01:47.200 --> 00:01:50.200
And often I think that's nice for the team I'm on


00:01:50.200 --> 00:01:52.200
because you don't usually get so many customers


00:01:52.200 --> 00:01:53.200
on internal tools.


00:01:53.200 --> 00:01:55.660
you know, we're building stuff for literally hundreds


00:01:55.660 --> 00:01:57.000
of people to use and it's a little bit


00:01:57.000 --> 00:01:59.040
like releasing software externally.


00:01:59.040 --> 00:02:01.040
So it's, yeah, it's a lot of fun.


00:02:01.040 --> 00:02:02.240
- Yeah. - Interesting.


00:02:02.240 --> 00:02:03.080
- Yeah, fantastic.


00:02:03.080 --> 00:02:04.840
All right, well, we're definitely looking forward


00:02:04.840 --> 00:02:07.720
to having your insights here for the show.


00:02:07.720 --> 00:02:10.180
Now, Brian, I do wanna start off here.


00:02:10.180 --> 00:02:12.760
I wanna talk about some deck staining.


00:02:12.760 --> 00:02:13.600
- Thanks, yeah.


00:02:13.600 --> 00:02:18.480
- So, because those of us who are very attentive on Twitter


00:02:18.480 --> 00:02:23.000
saw that Brian kindly responded to somebody


00:02:23.000 --> 00:02:24.320
who sent us a message and said,


00:02:24.320 --> 00:02:26.040
"Oh, I see you were talking about palettes.


00:02:26.040 --> 00:02:28.440
We should also talk about Dextane


00:02:28.440 --> 00:02:30.620
and other DIY project resources.


00:02:30.620 --> 00:02:33.480
And maybe you could put that stupid article on your blog.


00:02:33.480 --> 00:02:35.120
You're like, "We're not a blog.


00:02:35.120 --> 00:02:36.920
We talk about palettes 'cause it's on the flask."


00:02:36.920 --> 00:02:39.400
And then, and Twitter decided,


00:02:39.400 --> 00:02:40.680
"Oh, you are now classified


00:02:40.680 --> 00:02:42.320
under the home improvement category."


00:02:42.320 --> 00:02:44.760
So are we changing our theme or what?


00:02:44.760 --> 00:02:45.920
- Apparently just me.


00:02:45.920 --> 00:02:47.000
That's most people.


00:02:47.000 --> 00:02:49.240
I've got a few new followers now


00:02:49.240 --> 00:02:52.560
and most of them are people that like to make things.


00:02:52.560 --> 00:02:55.960
- Well, it's fun to make things as well,


00:02:55.960 --> 00:02:58.860
but maybe we'll talk more about SQL and stuff like that.


00:02:58.860 --> 00:02:59.700
What do you think?


00:02:59.700 --> 00:03:03.760
- Yeah, so this was sent to us by Dave Cochessa.


00:03:03.760 --> 00:03:05.220
Thanks, Dave.


00:03:05.220 --> 00:03:07.640
I want to talk about SQL Fluff.


00:03:07.640 --> 00:03:11.040
So I had never heard of this, but it looks pretty cool.


00:03:11.040 --> 00:03:15.800
So SQL Fluff is a Python package


00:03:15.800 --> 00:03:19.200
that is basically a linter for SQL.


00:03:19.200 --> 00:03:20.940
So that's pretty cool. - How interesting.


00:03:20.940 --> 00:03:23.380
I haven't really thought about linting in SQL code,


00:03:23.380 --> 00:03:24.980
but it makes perfect sense.


00:03:24.980 --> 00:03:27.060
- Yeah, well, I mean, there is,


00:03:27.060 --> 00:03:30.420
like, I don't really think about it too much either,


00:03:30.420 --> 00:03:31.620
but there's like things like,


00:03:31.620 --> 00:03:33.420
should you capitalize all the keywords?


00:03:33.420 --> 00:03:35.300
And some people just like it like that.


00:03:35.300 --> 00:03:40.300
So there is style, there's both style guides around SQL,


00:03:40.300 --> 00:03:42.580
I assume there's style guides,


00:03:42.580 --> 00:03:45.500
and this lets you help, helps you enforce it.


00:03:45.500 --> 00:03:47.660
Not just style guides, but just, you know,


00:03:47.660 --> 00:03:49.940
looking for mistakes and things.


00:03:49.940 --> 00:03:53.440
The page looks really slick.


00:03:53.440 --> 00:03:55.640
I like the logo, the Fluff logo.


00:03:55.640 --> 00:03:59.640
But one of the things that's great about it is the documentation.


00:03:59.640 --> 00:04:01.840
So the documentation looks wonderful.


00:04:01.840 --> 00:04:06.340
And one of the neat things about this


00:04:06.340 --> 00:04:10.740
is there's different rules or different dialects set up


00:04:10.740 --> 00:04:16.100
so that it treats different things like ANSI and Postgres and MySQL different.


00:04:16.180 --> 00:04:21.180
And I'm not sure if these are style differences


00:04:21.180 --> 00:04:25.340
or what they're doing different,


00:04:25.340 --> 00:04:26.900
but it's kind of interesting


00:04:26.900 --> 00:04:29.820
that there is a difference there.


00:04:29.820 --> 00:04:32.060
- Well, one of the things that comes to mind for me,


00:04:32.060 --> 00:04:34.940
if this reports errors, and I suspect it probably does,


00:04:34.940 --> 00:04:36.420
one of the things that comes to mind for me


00:04:36.420 --> 00:04:38.260
is if using like Microsoft SQL Server


00:04:38.260 --> 00:04:40.380
and you're using a parameterized query,


00:04:40.380 --> 00:04:43.860
because you don't want little Bobby tables in your school,


00:04:43.860 --> 00:04:49.780
you would say at parameter name, whereas in with like MySQL or Oracle, it'd be like a question mark, right?


00:04:49.780 --> 00:04:53.220
And I think one is illegal in the other syntax.


00:04:53.220 --> 00:04:58.300
So at least in that regard, I think I don't know for sure it's illegal, but I'm pretty sure like it may be.


00:04:58.300 --> 00:05:04.300
And it could be that you've got to say what type of parameterized specifications and other extensions are valid.


00:05:04.300 --> 00:05:06.820
And even I think there's some keywords, right?


00:05:06.820 --> 00:05:08.660
Aren't there some different keywords in some cases?


00:05:08.660 --> 00:05:11.100
So it would make sense to have to know the dialect.


00:05:12.580 --> 00:05:18.880
Yeah. And also, like you were saying, if there really are big differences, or even minor differences,


00:05:18.880 --> 00:05:22.020
there might be some queries that you don't run all the time.


00:05:22.020 --> 00:05:27.020
And so you're not sure if you switch databases that they might be broken after you're trying to port.


00:05:27.020 --> 00:05:29.020
So it's kind of cool.


00:05:29.020 --> 00:05:32.020
There's a list of, so it has rules like a lot of linters,


00:05:32.020 --> 00:05:36.520
rules for failure, and I like the rules page because it talks about the rules,


00:05:36.520 --> 00:05:40.720
but also shows you the anti-pattern and best practice.


00:05:40.720 --> 00:05:45.760
I kind of like that style. I don't know if I like the terms anti-pattern,


00:05:45.760 --> 00:05:48.080
and I really don't like the term best practice.


00:05:48.080 --> 00:05:53.040
But nonetheless, what it's looking for and what you should do different


00:05:53.040 --> 00:05:56.400
is a good thing to have in the documentation. It's pretty cool.


00:05:56.400 --> 00:06:00.400
Yeah, I do like the anti-pattern aspect. Maybe pattern?


00:06:00.400 --> 00:06:02.560
If you're going to have an anti-pattern, just have the pattern. I don't know.


00:06:02.560 --> 00:06:05.760
I'm not sure. One of the things that's in the documentation,


00:06:05.760 --> 00:06:07.200
I can't remember where... There it is.


00:06:08.160 --> 00:06:11.440
that people should be aware of. Supposedly, this even though it has like


00:06:11.440 --> 00:06:19.200
1982, that's interesting stars. It's still in alpha phase.


00:06:19.200 --> 00:06:24.960
So there's a note here that says expect significant changes. So just be aware of that.


00:06:24.960 --> 00:06:31.120
Cool. It doesn't seem major because you're not doing a runtime behavior on it, right? It's a


00:06:31.120 --> 00:06:33.520
thing you run against your code and then you look at the output.


00:06:33.520 --> 00:06:36.400
I mean, maybe it's in your CI system or something.


00:06:37.200 --> 00:06:40.000
Yeah, but it's not in production.


00:06:40.000 --> 00:06:40.880
Right.


00:06:40.880 --> 00:06:44.880
So like you won't get called on a weekend


00:06:44.880 --> 00:06:46.720
because the site went down


00:06:46.720 --> 00:06:48.880
because this thing got automatically updated


00:06:48.880 --> 00:06:50.640
or something to that effect.


00:06:50.640 --> 00:06:51.040
Yeah.


00:06:51.040 --> 00:06:53.040
I guess it could have broken your queries,


00:06:53.040 --> 00:06:53.920
but you know, whatever.


00:06:53.920 --> 00:06:56.640
And it's good to have an audience


00:06:56.640 --> 00:07:00.160
because we did have Paul from the chat


00:07:00.160 --> 00:07:01.200
say Ethan's correct.


00:07:01.200 --> 00:07:02.400
There are different keywords


00:07:02.400 --> 00:07:04.160
between different SQL dialects.


00:07:04.160 --> 00:07:05.040
So it's cool.


00:07:05.040 --> 00:07:05.540
Yeah.


00:07:06.080 --> 00:07:08.360
We use a-- oh, sorry, Michael.


00:07:08.360 --> 00:07:09.080
>> No, go ahead.


00:07:09.080 --> 00:07:09.580
Go ahead.


00:07:09.580 --> 00:07:12.440
>> We use a lot of SQL, as I would assume most data science


00:07:12.440 --> 00:07:13.480
shops do.


00:07:13.480 --> 00:07:17.420
But what this made me think of was one contentious topic


00:07:17.420 --> 00:07:19.960
in people who write a lot of SQL is, especially when you have


00:07:19.960 --> 00:07:23.280
a bunch of column names, and you're selecting regularly


00:07:23.280 --> 00:07:26.240
5 to 10 columns, the comma first--


00:07:26.240 --> 00:07:28.920
I don't know if you've seen the approach where you do a newline


00:07:28.920 --> 00:07:32.240
comma, column, comma, column, so it lines up really nicely,


00:07:32.240 --> 00:07:34.680
and it makes it easier to delete things.


00:07:34.680 --> 00:07:37.880
that's a very common thing that people feel strongly about.


00:07:37.880 --> 00:07:42.080
So I could imagine linters being very handy to at least enforce one style throughout a company


00:07:42.080 --> 00:07:44.080
because, you know, we don't have that.


00:07:44.080 --> 00:07:45.180
Yeah.


00:07:45.180 --> 00:07:50.380
Nice. And then I was going to add that Pamphil Roy on the audience says,


00:07:50.380 --> 00:07:53.180
"It would be cool if there was a plugin for dbeaver."


00:07:53.180 --> 00:07:57.780
And Sam Morley asks, "I wonder if it checks if inputs are sanitized."


00:07:57.780 --> 00:07:58.980
I don't know if it should.


00:07:59.280 --> 00:08:04.620
But Paul also asks if it validates for syntactical correctness beyond just style.


00:08:04.620 --> 00:08:08.320
It does say that it catches errors in bad SQL before it hits your database.


00:08:08.320 --> 00:08:09.520
So I'm going to go with yes.


00:08:09.520 --> 00:08:11.920
That's pretty cool.


00:08:11.920 --> 00:08:13.020
Yeah.


00:08:13.020 --> 00:08:17.420
Ethan, I was thinking as I was watching Brian present this,


00:08:17.420 --> 00:08:21.180
that you probably do way more SQL than I do,


00:08:21.180 --> 00:08:26.120
even though I run in production websites that are backed by databases,


00:08:26.120 --> 00:08:28.680
not just because there's no SQL, but because I use ORMs.


00:08:29.160 --> 00:08:34.160
and the data structure doesn't change.


00:08:34.160 --> 00:08:36.100
But for data science,


00:08:36.100 --> 00:08:38.840
you're kind of in a more exploratory mode, right?


00:08:38.840 --> 00:08:41.500
- Yeah, I think it's pretty interesting


00:08:41.500 --> 00:08:43.160
because, like listening to this podcast,


00:08:43.160 --> 00:08:45.700
people talk about using ORMs a lot,


00:08:45.700 --> 00:08:47.320
but in data science,


00:08:47.320 --> 00:08:48.060
you don't really think of data


00:08:48.060 --> 00:08:49.760
in that relational model as much.


00:08:49.760 --> 00:08:51.960
I mean, you can,


00:08:51.960 --> 00:08:52.960
but thinking of rows as objects is really not common.


00:08:52.960 --> 00:08:56.720
So I feel like my relationship with databases


00:08:56.720 --> 00:08:58.440
is totally different.


00:08:54.520 --> 00:08:57.640
My first couple of years, I was mostly writing SQL,


00:08:57.640 --> 00:09:00.700
but it was literally just asking questions for analyses,


00:09:00.700 --> 00:09:02.000
which is such a different use case


00:09:02.000 --> 00:09:04.280
than what people use it for for web development.


00:09:04.280 --> 00:09:05.240
- Right, yeah, absolutely.


00:09:05.240 --> 00:09:07.720
It's super different, super different.


00:09:07.720 --> 00:09:10.200
But if you were to explore data,


00:09:10.200 --> 00:09:13.720
wouldn't it be nice to have a desktop application


00:09:13.720 --> 00:09:16.480
instead of a web browser for doing so?


00:09:16.480 --> 00:09:18.760
So Jupyter and JupyterLab have gotta be


00:09:18.760 --> 00:09:20.640
the most popular way that people interact


00:09:20.640 --> 00:09:22.280
with data on the data science side.


00:09:22.280 --> 00:09:24.580
It's certainly an exploration stage anyway.


00:09:24.580 --> 00:09:27.980
So super big news that is old news is new again,


00:09:27.980 --> 00:09:32.100
but better JupyterLab desktop app is a thing.


00:09:32.100 --> 00:09:34.000
Like I can download JupyterLab.


00:09:34.000 --> 00:09:38.080
It's an icon on my dock or on my taskbar.


00:09:38.080 --> 00:09:42.200
I click it, it runs like an app,


00:09:42.200 --> 00:09:43.660
but inside of it is Jupyter Notebook,


00:09:43.660 --> 00:09:47.560
like the whole JupyterLab with terminal and Python consoles


00:09:47.560 --> 00:09:49.420
and kernels and all those things.


00:09:49.420 --> 00:09:51.260
- That's cool.


00:09:51.260 --> 00:09:52.220
- That's very nice.


00:09:52.220 --> 00:09:54.580
- Yeah, have you played with this yet, Ethan?


00:09:54.580 --> 00:09:57.620
- No, so I don't know how common this is,


00:09:57.620 --> 00:09:59.580
but I think for us at least,


00:09:59.580 --> 00:10:01.660
mostly people aren't working on their local machines.


00:10:01.660 --> 00:10:05.020
They're really connecting to a session of Python


00:10:05.020 --> 00:10:06.100
on a remote server.


00:10:06.100 --> 00:10:08.260
So mostly what we do is we fire up Jupyter


00:10:08.260 --> 00:10:10.840
on a remote server, and then from our laptops,


00:10:10.840 --> 00:10:13.420
we hit that URL to actually look at the notebook.


00:10:13.420 --> 00:10:16.180
So I'm not sure a desktop app would work as well for us,


00:10:16.180 --> 00:10:17.900
although maybe, it's definitely interesting.


00:10:17.900 --> 00:10:20.400
And I wonder if there's some native features


00:10:20.400 --> 00:10:22.020
of desktop apps that are available


00:10:22.020 --> 00:10:24.260
that are gonna be a reason to switch.


00:10:24.260 --> 00:10:25.580
- Well, what I would say right now


00:10:25.580 --> 00:10:30.260
is it's a really nice self-contained thing.


00:10:30.260 --> 00:10:33.100
So I'll just read the description real quick.


00:10:33.100 --> 00:10:35.780
JupyterLab app is a cross-platform,


00:10:35.780 --> 00:10:39.180
standalone application distribution of JupyterLab.


00:10:39.180 --> 00:10:41.180
It is a self-contained desktop application


00:10:41.180 --> 00:10:43.940
which bundles the Python environment


00:10:43.940 --> 00:10:46.380
and several popular libraries to use


00:10:46.380 --> 00:10:49.320
in scientific computing, like surely Pandas and NumPy


00:10:49.320 --> 00:10:51.200
in those kinds of things.


00:10:51.200 --> 00:10:52.960
So what you get is you get just an app


00:10:52.960 --> 00:10:55.440
that's ready to go that you could just have


00:10:55.440 --> 00:10:56.880
somebody install and you can say,


00:10:56.880 --> 00:10:58.800
here, open this notebook and run it.


00:10:58.800 --> 00:11:00.680
And long as you're using core libraries


00:11:00.680 --> 00:11:02.080
and stuff like that, you don't have to think,


00:11:02.080 --> 00:11:03.800
okay, go to the terminal,


00:11:03.800 --> 00:11:09.240
set up the environment and then type JupyterLab.


00:11:09.240 --> 00:11:11.360
Oh, you need to activate the kernel


00:11:11.360 --> 00:11:12.480
and you got to do this and that.


00:11:12.480 --> 00:11:15.280
It's just like, it's a real simple,


00:11:15.280 --> 00:11:18.560
here's the thing, no nonsense type of app.


00:11:18.560 --> 00:11:23.040
Yes, and you lost a whole bunch of people with just open the command line.


00:11:23.040 --> 00:11:25.040
Yeah, that's so true.


00:11:25.040 --> 00:11:27.040
Yeah, so you don't have to here, right?


00:11:27.040 --> 00:11:31.720
It's on your dock, you click it just like you would with Word or Firefox or whatever.


00:11:31.720 --> 00:11:33.720
And you're there.


00:11:33.720 --> 00:11:36.880
It starts and manages the Jupyter server in the background.


00:11:36.880 --> 00:11:43.120
There may be a whole host of command line arguments you can give it to say like,


00:11:43.120 --> 00:11:46.800
run but use that server and other things along those lines or run


00:11:46.800 --> 00:11:49.840
and use this Conda environment.


00:11:49.840 --> 00:11:51.240
I didn't see any of those.


00:11:51.240 --> 00:11:55.240
And so from what I can tell is it's kind of a local version


00:11:55.240 --> 00:11:56.160
of Jupyter.


00:11:56.160 --> 00:11:59.160
So it might not be super interesting for you all


00:11:59.160 --> 00:12:00.060
in your workflow.


00:12:00.060 --> 00:12:03.240
- One place where I think this would be really handy


00:12:03.240 --> 00:12:04.800
is teaching beginners.


00:12:04.800 --> 00:12:07.040
So I actually teach some Python,


00:12:07.040 --> 00:12:08.800
especially for data science classes


00:12:08.800 --> 00:12:10.440
at the University of Cincinnati.


00:12:10.440 --> 00:12:12.880
And one thing that regularly is really confusing to people


00:12:12.880 --> 00:12:14.880
is that you can't double click on a notebook file


00:12:14.880 --> 00:12:15.720
and have it open.


00:12:15.720 --> 00:12:17.220
'cause that's such a typical experience


00:12:17.220 --> 00:12:18.280
of files on a computer.


00:12:18.280 --> 00:12:19.840
You double click and there's an application


00:12:19.840 --> 00:12:21.480
that opens that file.


00:12:21.480 --> 00:12:23.000
- Oh, interesting, yeah.


00:12:23.000 --> 00:12:24.060
- There are workarounds.


00:12:24.060 --> 00:12:26.360
If you have Anaconda Navigator, it kind of works,


00:12:26.360 --> 00:12:29.560
although it's a little hitchy.


00:12:29.560 --> 00:12:32.000
But I would assume that if you have a desktop app,


00:12:32.000 --> 00:12:33.960
you'd be able to register that with the operating system,


00:12:33.960 --> 00:12:35.720
whatever that process is to say,


00:12:35.720 --> 00:12:39.200
when I click on .ipynbs, open it.


00:12:39.200 --> 00:12:40.860
'Cause I find I have to teach students,


00:12:40.860 --> 00:12:43.800
no, start up Jupyter, open your browser,


00:12:43.800 --> 00:12:45.800
navigate to that file in the browser.


00:12:45.800 --> 00:12:47.860
- Were you in the wrong folder in the terminal


00:12:47.860 --> 00:12:48.700
when you ran JupyterLab?


00:12:48.700 --> 00:12:49.780
- Which is, yeah. - Well, sorry,


00:12:49.780 --> 00:12:51.380
you're now locked out of that tree,


00:12:51.380 --> 00:12:53.220
that part of the tree of the folders.


00:12:53.220 --> 00:12:55.340
- And then suddenly you're having a conversation about paths.


00:12:55.340 --> 00:12:56.380
Yeah, you go down.


00:12:56.380 --> 00:12:58.580
It really is like something I don't like to deal with.


00:12:58.580 --> 00:13:00.500
So maybe this is what I should recommend


00:13:00.500 --> 00:13:01.740
for people when I teach.


00:13:01.740 --> 00:13:04.140
- What I would recommend is just check it out and try.


00:13:04.140 --> 00:13:07.260
So I do have a bit of a comment here from Dean


00:13:07.260 --> 00:13:08.260
out in the audience.


00:13:08.260 --> 00:13:10.300
I like the concept of JupyterLab app,


00:13:10.300 --> 00:13:12.660
but I'm afraid it will be a VE and V,


00:13:12.660 --> 00:13:20.380
virtual environment nightmare. So what I found interesting is it's discovered, you know,


00:13:20.380 --> 00:13:26.340
when you're creating kernels for Jupyter, you have to run a command, I always forget


00:13:26.340 --> 00:13:31.260
and always have to duck, duck, go or search this to figure out how to do it again. But


00:13:31.260 --> 00:13:37.340
I have to get the command to say, create this environment and then register that as so Jupyter


00:13:37.340 --> 00:13:41.140
finds that content environment, that VNV, right?


00:13:41.140 --> 00:13:42.840
It's IPykernel install.


00:13:42.840 --> 00:13:44.340
I have to do this all the time.


00:13:44.340 --> 00:13:45.340
Yes, exactly.


00:13:45.340 --> 00:13:47.140
And I know that it's basically that,


00:13:47.140 --> 00:13:48.940
but the exact command, I always forget.


00:13:48.940 --> 00:13:50.740
So that command,


00:13:50.740 --> 00:13:52.740
it seems like it picked up the ones


00:13:52.740 --> 00:13:54.140
that I had run previously


00:13:54.140 --> 00:13:58.240
for standalone terminal JupyterLab.


00:13:58.240 --> 00:14:02.440
So the virtual environment story


00:14:02.440 --> 00:14:04.740
is the same as Jupyter itself without that.


00:14:04.740 --> 00:14:06.240
I think all we're getting here


00:14:06.240 --> 00:14:09.440
is we're getting the libraries plus Python,


00:14:09.440 --> 00:14:12.600
plus the server starting all bundled together.


00:14:12.600 --> 00:14:15.120
And it's basically the same as if you just run it


00:14:15.120 --> 00:14:16.220
on the command prompt.


00:14:16.220 --> 00:14:19.520
- I think as long as, was it Dean?


00:14:19.520 --> 00:14:22.440
As long as Dean doesn't wanna be starting Jupyter


00:14:22.440 --> 00:14:24.320
from the virtual environment, it should be fine.


00:14:24.320 --> 00:14:25.780
Like when you said, Michael, about kernels,


00:14:25.780 --> 00:14:27.960
that's the much more, I recommend people do it that way.


00:14:27.960 --> 00:14:30.240
'Cause some people do like to just install Jupyter


00:14:30.240 --> 00:14:32.840
in whatever environment they work in and launch it there.


00:14:32.840 --> 00:14:34.480
But I have a hard time imagining


00:14:34.480 --> 00:14:36.280
how that would work in this case.


00:14:36.280 --> 00:14:37.560
- Yeah, I do as well.


00:14:37.560 --> 00:14:39.880
And Dean makes the point that once you have to go


00:14:39.880 --> 00:14:42.240
and register all that kind of stuff,


00:14:42.240 --> 00:14:43.760
like when you're down in the terminal doing this,


00:14:43.760 --> 00:14:45.080
you've kind of lost those same people


00:14:45.080 --> 00:14:47.240
and that may well be the case.


00:14:47.240 --> 00:14:51.560
But I can see, this is sort of a first version of this.


00:14:51.560 --> 00:14:53.520
I can see that those are some of the desktop things


00:14:53.520 --> 00:14:54.800
it could add, right?


00:14:54.800 --> 00:14:57.800
It could add a setting section where you have a dialogue


00:14:57.800 --> 00:15:00.840
for managing these things and creating new ones and so on.


00:15:00.840 --> 00:15:02.240
So it could be pretty neat.


00:15:03.380 --> 00:15:05.180
- Yeah. - Definitely something to watch.


00:15:05.180 --> 00:15:07.380
- All right, before we move on,


00:15:07.380 --> 00:15:11.060
Paul out in the audience has a quick question for you,


00:15:11.060 --> 00:15:12.980
Ethan, a tangential one.


00:15:12.980 --> 00:15:18.740
Python has some really great SAST tools like Bandit,


00:15:18.740 --> 00:15:21.300
but I'm not able to find good options for R.


00:15:21.300 --> 00:15:22.820
And I know that you live in a world


00:15:22.820 --> 00:15:25.780
that does both R and Python.


00:15:25.780 --> 00:15:26.620
- Yeah. - So, do you have


00:15:26.620 --> 00:15:27.440
any thoughts on this?


00:15:27.440 --> 00:15:28.280
I have no ideas.


00:15:28.280 --> 00:15:29.940
- I'm gonna come off as a fraud,


00:15:29.940 --> 00:15:32.340
but I don't know what SAST is.


00:15:32.340 --> 00:15:36.700
I have to admit like what I do,


00:15:36.700 --> 00:15:38.500
I know I said I'm a data scientist,


00:15:38.500 --> 00:15:40.140
but in some ways that's nominal.


00:15:40.140 --> 00:15:42.140
Like really a lot of what I do is software development


00:15:42.140 --> 00:15:43.780
for the data scientists.


00:15:43.780 --> 00:15:46.380
- Data scientists are your customer in a sense,


00:15:46.380 --> 00:15:47.700
your target user.


00:15:47.700 --> 00:15:50.380
- Yeah, so I think a lot of what I hear from users


00:15:50.380 --> 00:15:52.220
is that there are certain measurement tools


00:15:52.220 --> 00:15:54.060
and certain statistical tools that are available


00:15:54.060 --> 00:15:56.180
and are that take longer to get to Python.


00:15:56.180 --> 00:15:57.540
So I wouldn't be surprised if that really


00:15:57.540 --> 00:15:58.460
is what's happening here,


00:15:58.460 --> 00:16:00.700
but I don't personally have any suggestions.


00:16:00.700 --> 00:16:01.540
- Yeah, okay.


00:16:01.540 --> 00:16:06.260
Yeah, so Bandit is like a tool that will scan


00:16:06.260 --> 00:16:08.020
for known security vulnerabilities,


00:16:08.020 --> 00:16:10.340
like leaving debug settings on in Django.


00:16:10.340 --> 00:16:12.420
- Oh, see, I was wondering if that was, okay.


00:16:12.420 --> 00:16:13.860
Then that I also don't know.


00:16:13.860 --> 00:16:16.980
That's a little different than what I was imagining.


00:16:16.980 --> 00:16:18.620
- Yeah, awesome.


00:16:18.620 --> 00:16:22.380
All right, well, since you got the floor,


00:16:22.380 --> 00:16:24.420
tell us about your first item.


00:16:24.420 --> 00:16:29.420
- Sure, so I found this requests cache package


00:16:30.200 --> 00:16:31.480
in a newsletter recently.


00:16:31.480 --> 00:16:33.040
And this might be a little bit of a shorter one


00:16:33.040 --> 00:16:35.800
'cause unfortunately I haven't had a reason to use it yet.


00:16:35.800 --> 00:16:39.140
But basically what this does, scrolling down here,


00:16:39.140 --> 00:16:42.440
is you can instantiate sessions just like you would


00:16:42.440 --> 00:16:44.360
with the traditional requests library.


00:16:44.360 --> 00:16:48.520
So probably request is one of the most commonly used


00:16:48.520 --> 00:16:50.040
Python packages, I would guess.


00:16:50.040 --> 00:16:51.340
And for anybody who's not familiar,


00:16:51.340 --> 00:16:53.280
you use it to make HTTP requests,


00:16:53.280 --> 00:16:55.760
which is basically to bring anything back from the internet.


00:16:55.760 --> 00:16:59.160
And the tagline I think is HTTP for humans.


00:16:59.160 --> 00:17:01.120
But it's just known for being easy to use


00:17:01.120 --> 00:17:02.920
and you can access the internet.


00:17:02.920 --> 00:17:05.080
But one thing that I have found is that,


00:17:05.080 --> 00:17:08.600
especially if I'm testing something in an interactive way,


00:17:08.600 --> 00:17:10.380
not mocking, but I really wanna see


00:17:10.380 --> 00:17:12.760
if my code pulls back what I expect,


00:17:12.760 --> 00:17:15.240
sometimes I rerun the same request over and over.


00:17:15.240 --> 00:17:17.720
And I say, go get this, go get this, go get this,


00:17:17.720 --> 00:17:19.120
often the same data.


00:17:19.120 --> 00:17:20.920
And sometimes that data is large


00:17:20.920 --> 00:17:22.600
and that takes a really long time.


00:17:22.600 --> 00:17:25.520
So requests cache is a way of creating a session object


00:17:25.520 --> 00:17:27.440
that looks and acts the same.


00:17:27.440 --> 00:17:32.440
But when you call a get or a post request on the same URL


00:17:32.440 --> 00:17:35.920
with the same data, what you get back


00:17:35.920 --> 00:17:39.020
is actually just the cached version of that data.


00:17:39.020 --> 00:17:40.640
So you're not waiting every time.


00:17:40.640 --> 00:17:42.840
The first time you incur the network latency


00:17:42.840 --> 00:17:46.360
and if the server has to do anything to compute the data


00:17:46.360 --> 00:17:48.000
or if it's enough data that it takes some time


00:17:48.000 --> 00:17:49.960
to get to you, you wait for that.


00:17:49.960 --> 00:17:52.120
But the second time everything runs instantly,


00:17:52.120 --> 00:17:53.480
which is really a big advantage.


00:17:53.480 --> 00:17:55.820
So I've done some things with web scraping


00:17:55.820 --> 00:17:58.220
where I'm building some kind of,


00:17:58.220 --> 00:18:00.200
I wanna build like a function that pulls some things down


00:18:00.200 --> 00:18:03.080
and makes or pull some things out of that,


00:18:03.080 --> 00:18:05.060
but just waiting every time to run the function


00:18:05.060 --> 00:18:06.980
for it to pull from several different pages


00:18:06.980 --> 00:18:09.680
and do some computation on that,


00:18:09.680 --> 00:18:10.820
actually makes it pretty slow.


00:18:10.820 --> 00:18:12.340
But if you were able to cache it like this,


00:18:12.340 --> 00:18:13.820
that'd be a lot faster.


00:18:13.820 --> 00:18:14.660
- Yeah, this is nice.


00:18:14.660 --> 00:18:17.020
I love the fact that it's just a standard replacement


00:18:17.020 --> 00:18:19.420
for the request session itself.


00:18:19.420 --> 00:18:21.500
- Yeah, and if you scroll down a little more,


00:18:21.500 --> 00:18:23.240
it actually shows a way to do that


00:18:23.240 --> 00:18:24.980
with the regular requests library.


00:18:24.980 --> 00:18:26.500
This actually scares me a little bit.


00:18:26.500 --> 00:18:29.100
This is kind of magical what's going on here.


00:18:29.100 --> 00:18:31.580
You just run a one-liner with requests cache


00:18:31.580 --> 00:18:33.700
and then suddenly the requests library itself


00:18:33.700 --> 00:18:34.540
works differently.


00:18:34.540 --> 00:18:37.140
So I wonder if that's a monkey patching or what's going on.


00:18:37.140 --> 00:18:38.340
- It probably is.


00:18:38.340 --> 00:18:40.540
- But it is really slick.


00:18:40.540 --> 00:18:43.300
So I would imagine I'll have a reason to use this soon


00:18:43.300 --> 00:18:44.740
but I haven't tested it out yet.


00:18:44.740 --> 00:18:46.780
It does offer a lot of configuration options.


00:18:46.780 --> 00:18:50.500
And one thing I thought was a good idea to look at


00:18:50.500 --> 00:18:52.800
is an expiration date.


00:18:52.800 --> 00:18:54.240
And that's sort of like,


00:18:54.240 --> 00:18:56.600
when should you invalidate the cache and actually pull again


00:18:56.600 --> 00:18:58.080
'cause you maybe should trust that the website


00:18:58.080 --> 00:18:59.520
is sending you all the same stuff today,


00:18:59.520 --> 00:19:01.280
but if you rerun your code in a week,


00:19:01.280 --> 00:19:03.360
make sure that it still responds the same way.


00:19:03.360 --> 00:19:06.120
So it's got some nice options like that.


00:19:06.120 --> 00:19:07.120
- I really like that. - That's interesting.


00:19:07.120 --> 00:19:09.480
So you could use it not even just for testing,


00:19:09.480 --> 00:19:12.020
it could be for actual data,


00:19:12.020 --> 00:19:15.200
but you know it's not getting updated very often, so.


00:19:15.200 --> 00:19:17.520
- Yeah, for large data is what I was imagining.


00:19:17.520 --> 00:19:19.760
So yeah, like I said, there's been some times


00:19:19.760 --> 00:19:21.160
where I've like pulled things from APIs


00:19:21.160 --> 00:19:22.520
where they send back a lot of data


00:19:22.520 --> 00:19:24.120
and you don't want to be waiting for that.


00:19:24.120 --> 00:19:25.400
Yeah.


00:19:25.400 --> 00:19:26.880
- Or even you just want to make sure


00:19:26.880 --> 00:19:29.640
that multiple calls to it are getting the same data,


00:19:29.640 --> 00:19:31.400
even if it does change.


00:19:31.400 --> 00:19:32.480
- That's true. Yeah.


00:19:32.480 --> 00:19:35.360
- So keep consistency. Interesting.


00:19:35.360 --> 00:19:37.640
- This reminded me a little bit of the,


00:19:37.640 --> 00:19:40.240
I don't know if people are familiar with the @cache


00:19:40.240 --> 00:19:41.840
or LRU cache it used to be,


00:19:41.840 --> 00:19:43.520
and now there's a new one just called @cache


00:19:43.520 --> 00:19:45.720
in the funk tools module built into Python.


00:19:45.720 --> 00:19:48.920
And that's very, very handy once you know it's there.


00:19:48.920 --> 00:19:50.040
'Cause often you have a function


00:19:50.040 --> 00:19:51.920
that you don't want to recompute the work for.


00:19:51.920 --> 00:19:54.040
And this is almost like somebody rewrote requests


00:19:54.040 --> 00:19:56.480
with cache in it, which is pretty cool.


00:19:56.480 --> 00:19:58.480
- Yeah, it's got a lot of nice features.


00:19:58.480 --> 00:20:01.120
You know, I think a question from Pamphlet


00:20:01.120 --> 00:20:03.620
in the audience, can it cache to Redis


00:20:03.620 --> 00:20:07.280
because production in memory production caching,


00:20:07.280 --> 00:20:08.600
you could blow it up, right?


00:20:08.600 --> 00:20:09.520
Blow up the memory.


00:20:09.520 --> 00:20:11.400
So a couple of things that stood out to me


00:20:11.400 --> 00:20:13.080
that were interesting there was,


00:20:13.080 --> 00:20:16.920
yeah, you could throw a FuncTools LRU cache decorator


00:20:16.920 --> 00:20:20.080
onto an expensive thing, which is fine,


00:20:20.080 --> 00:20:21.520
but that's in memory, right?


00:20:21.520 --> 00:20:23.600
and plus things have to be hashable and whatnot.


00:20:23.600 --> 00:20:28.080
But you could do that, but it's in memory.


00:20:28.080 --> 00:20:30.400
And a lot of times if you have scale out


00:20:30.400 --> 00:20:32.280
as you do on web apps, like in production,


00:20:32.280 --> 00:20:35.300
as in Brian was talking about,


00:20:35.300 --> 00:20:39.160
you have web farms, like five or 10 copies


00:20:39.160 --> 00:20:41.120
of microWZG or something running.


00:20:41.120 --> 00:20:43.120
So then there's still five times you got to do it


00:20:43.120 --> 00:20:45.120
before it really gets cached.


00:20:45.120 --> 00:20:48.520
And then also it goes to SQLite.


00:20:48.520 --> 00:20:50.960
So it gets stored to disk, right?


00:20:50.960 --> 00:20:52.960
So it's not even in memory, it's on disk.


00:20:52.960 --> 00:20:55.080
So like you said, there's other backends as well,


00:20:55.080 --> 00:20:57.680
but I think having just by default,


00:20:57.680 --> 00:21:00.800
going to a SQLite file with a possible expiration


00:21:00.800 --> 00:21:02.900
means you could just turn this on and leave it.


00:21:02.900 --> 00:21:04.860
- Yeah. - Expire after a day, go.


00:21:04.860 --> 00:21:07.240
Tell us about the backends though.


00:21:07.240 --> 00:21:08.760
There's more than just SQLite.


00:21:08.760 --> 00:21:10.360
- Yeah, it does seem like you have some options.


00:21:10.360 --> 00:21:12.720
I mean, like I said, I haven't had a reason to use this,


00:21:12.720 --> 00:21:13.960
so I haven't toyed around with all these,


00:21:13.960 --> 00:21:16.960
but the way this is documented leads me to believe


00:21:16.960 --> 00:21:19.060
that it really is just a drop-in replacement


00:21:19.060 --> 00:21:21.220
that you can configure what you want to use as your backend.


00:21:21.220 --> 00:21:23.460
And I do wonder, so yeah, what you were saying, Michael,


00:21:23.460 --> 00:21:24.680
about having multiple instances,


00:21:24.680 --> 00:21:26.020
I do wonder how that would work.


00:21:26.020 --> 00:21:28.220
Would it check to see if any of the instances


00:21:28.220 --> 00:21:29.820
had cached this yet?


00:21:29.820 --> 00:21:31.980
Would it like proactively go reach out to the cache


00:21:31.980 --> 00:21:32.820
or would it--


00:21:32.820 --> 00:21:34.420
- Yeah, well, I think if you have the memory one,


00:21:34.420 --> 00:21:35.500
it's gonna be a hassle, right?


00:21:35.500 --> 00:21:37.200
Like one of the options is memory,


00:21:37.200 --> 00:21:39.860
but all the other ones, file system,


00:21:39.860 --> 00:21:44.380
GridFS, Redis, SQLite, those are all support,


00:21:44.380 --> 00:21:45.700
you know, concurrency, they support.


00:21:45.700 --> 00:21:46.700
- Yeah, exactly.


00:21:46.700 --> 00:21:50.200
So then it will scale across process seamlessly.


00:21:50.200 --> 00:21:52.700
- Yeah, so that could be actually really helpful


00:21:52.700 --> 00:21:53.540
for something like that,


00:21:53.540 --> 00:21:56.260
where you have a distributed set of workers, yeah.


00:21:56.260 --> 00:21:57.100
- Yeah, for sure.


00:21:57.100 --> 00:22:01.060
Let's see some fun stuff about your monkey patching comment.


00:22:01.060 --> 00:22:03.260
Dean says, "Monkey patching is like having a real monkey.


00:22:03.260 --> 00:22:05.220
It's very cool when other people have it,


00:22:05.220 --> 00:22:07.380
but having it in my house is scary."


00:22:07.380 --> 00:22:11.260
And yeah, Sam just has too much experience at the zoo,


00:22:11.260 --> 00:22:12.940
I think, with that as well.


00:22:12.940 --> 00:22:16.560
So yeah, monkey patching's a little sketch.


00:22:16.560 --> 00:22:18.560
Oh, nice.


00:22:18.560 --> 00:22:20.560
All right, Brian, you're up next.


00:22:20.560 --> 00:22:22.560
Okay, what do we got next?


00:22:22.560 --> 00:22:24.560
I, so,


00:22:24.560 --> 00:22:26.560
I did something


00:22:26.560 --> 00:22:28.560
kind of dumb the other day.


00:22:28.560 --> 00:22:30.560
So I


00:22:30.560 --> 00:22:32.560
went ahead and I needed


00:22:32.560 --> 00:22:34.560
I pushed a


00:22:34.560 --> 00:22:36.560
new package out on PyPI.


00:22:36.560 --> 00:22:38.560
Really, I was just trying to remember


00:22:38.560 --> 00:22:40.560
how to, the whole


00:22:40.560 --> 00:22:42.560
process, because I wanted to just


00:22:42.560 --> 00:22:44.560
remind myself of like, if I have something new,


00:22:44.560 --> 00:22:49.120
new, something cool I wanted to share. How do I get it out there to pipe? Yeah. So I


00:22:49.120 --> 00:22:54.000
was walking through that process. And I was doing it for your own type of squatting.


00:22:54.000 --> 00:23:06.040
Apparently, so I published pytest slow. And then, but who was it Brian skin said, cool,


00:23:06.040 --> 00:23:11.880
but maybe pytest skip slow would be better. And I'm like, man, that is a better name.


00:23:11.880 --> 00:23:14.600
That's what it does. It skips the slow tests by default.


00:23:14.600 --> 00:23:18.680
And this is totally lifted from the pytest documentation.


00:23:18.680 --> 00:23:22.040
They have this example, but nobody's written a plugin for it.


00:23:22.040 --> 00:23:24.740
So I did this. It's a little tiny thing.


00:23:24.740 --> 00:23:28.080
So I renamed it. But how do you rename it?


00:23:28.080 --> 00:23:29.500
So I went out and searched.


00:23:29.500 --> 00:23:31.200
So how do you rename something in PyPI?


00:23:31.200 --> 00:23:32.900
You can't really do it.


00:23:32.900 --> 00:23:34.980
But you can create another one.


00:23:34.980 --> 00:23:37.780
And then, so this is nice.


00:23:37.840 --> 00:23:42.380
Well, who was it? Simon Willison wrote this up.


00:23:42.380 --> 00:23:45.840
It's a PyPI renamed cookie cutter template.


00:23:45.840 --> 00:23:50.040
And I didn't actually use the template, but I did use the steps.


00:23:50.040 --> 00:23:54.540
So the steps really are create a renamed version of the package, which I did,


00:23:54.540 --> 00:23:57.640
then publish it to PyPI under the new name,


00:23:57.640 --> 00:24:01.440
and create a final release for the old name that points to the new one


00:24:01.440 --> 00:24:05.240
and depends on it and have dependencies


00:24:05.240 --> 00:24:07.340
so that if somebody installed the old one,


00:24:07.400 --> 00:24:09.300
they'll really get the new one.


00:24:09.300 --> 00:24:11.060
It sounds more complicated than it is.


00:24:11.060 --> 00:24:12.300
It's just a few steps.


00:24:12.300 --> 00:24:15.200
But there's a cookie cutter you can use.


00:24:15.200 --> 00:24:18.100
The cookie cutter uses setup tools, and I didn't want to do that.


00:24:18.100 --> 00:24:20.700
But so I used it.


00:24:20.700 --> 00:24:23.600
I did basically copy the entire thing.


00:24:23.600 --> 00:24:26.060
And then he's got a demo.


00:24:26.060 --> 00:24:30.060
So if you look at it, so if you go to the old version,


00:24:30.060 --> 00:24:32.120
it'll just have a thing that says,


00:24:32.120 --> 00:24:34.020
"Hey, I'm going to the new one now."


00:24:34.020 --> 00:24:36.620
So I did that.


00:24:36.700 --> 00:24:38.180
And it was neat.


00:24:38.180 --> 00:24:43.180
I really appreciate the steps and it's all good.


00:24:43.180 --> 00:24:45.900
- Yeah, that's cool.


00:24:45.900 --> 00:24:47.340
You can also use it for aliases.


00:24:47.340 --> 00:24:51.980
Like you can install BS4 or beautiful soup four, right?


00:24:51.980 --> 00:24:53.900
And it's kind of the same.


00:24:53.900 --> 00:24:56.860
- Oh, is that how they do that?


00:24:56.860 --> 00:24:59.180
- I'm guessing, I don't know, but it sounds like the same.


00:24:59.180 --> 00:25:00.180
- I didn't know that.


00:25:00.180 --> 00:25:04.420
- So now when I go to Pythas, if you go to the old one,


00:25:04.420 --> 00:25:07.020
It just shows it's now a new name.


00:25:07.020 --> 00:25:08.420
Go to the other one instead.


00:25:08.420 --> 00:25:10.020
- But if I install the old one,


00:25:10.020 --> 00:25:12.540
it kind of just pulls in the new one.


00:25:12.540 --> 00:25:13.460
- Yes.


00:25:13.460 --> 00:25:14.300
- Yes.


00:25:14.300 --> 00:25:16.500
Yeah, very cool.


00:25:16.500 --> 00:25:19.940
- Brian, you were refreshing on PyPI,


00:25:19.940 --> 00:25:22.580
but I actually just pushed my first ever package to PyPI


00:25:22.580 --> 00:25:23.420
a couple of weeks ago.


00:25:23.420 --> 00:25:25.040
And so that was a bit of a trial,


00:25:25.040 --> 00:25:27.200
but I was amazed at how straightforward it is.


00:25:27.200 --> 00:25:28.620
The documentation is excellent.


00:25:28.620 --> 00:25:30.740
It really is pretty seamless actually


00:25:30.740 --> 00:25:31.900
for somebody who's never done it before.


00:25:31.900 --> 00:25:32.900
So who knows,


00:25:32.900 --> 00:25:35.340
Hopefully I don't make any mistakes on the one package I have


00:25:35.340 --> 00:25:36.540
and need to rename.


00:25:36.540 --> 00:25:38.700
- Yeah, the immutability of it is a little scary,


00:25:38.700 --> 00:25:40.620
but yeah, it's not too bad.


00:25:40.620 --> 00:25:43.260
- For me, the hard part was just understanding


00:25:43.260 --> 00:25:44.820
that it really was pretty simple.


00:25:44.820 --> 00:25:48.140
And then also getting the hashes right.


00:25:48.140 --> 00:25:52.100
So you have to get signatures and stuff


00:25:52.100 --> 00:25:56.100
to make sure that you can push to the pipe correctly.


00:25:56.100 --> 00:25:58.020
- Yeah, but even the documentation there,


00:25:58.020 --> 00:25:58.840
it's a little intimidating,


00:25:58.840 --> 00:26:01.780
but it actually turned out to be only a few minutes of work.


00:26:01.780 --> 00:26:03.060
So that was pretty nice.


00:26:03.060 --> 00:26:03.900
Good for them.


00:26:03.900 --> 00:26:06.700
I guess PyPA is the people to praise for that.


00:26:06.700 --> 00:26:08.860
- Yeah. So what was your package?


00:26:08.860 --> 00:26:11.500
- Oh, it's called Premark.


00:26:11.500 --> 00:26:16.500
It's a spin-off of a JavaScript library for making slides.


00:26:16.500 --> 00:26:19.200
And I just make a lot of slides for teaching.


00:26:19.200 --> 00:26:22.820
And I actually found an existing package by,


00:26:22.820 --> 00:26:23.940
man, I want to,


00:26:23.940 --> 00:26:24.860
(laughing)


00:26:24.860 --> 00:26:26.300
I mean, yeah, here it is.


00:26:26.300 --> 00:26:27.120
It is not ready.


00:26:27.120 --> 00:26:28.620
That's why it's a release candidate.


00:26:28.620 --> 00:26:29.580
- Oh, okay.


00:26:29.580 --> 00:26:32.880
But I, yeah, I based it on this existing package


00:26:32.880 --> 00:26:34.800
by @tylerdave on GitHub


00:26:34.800 --> 00:26:36.180
and talked to him a little bit about it.


00:26:36.180 --> 00:26:37.880
He had already built a really lightweight tool


00:26:37.880 --> 00:26:38.880
and I just expanded on it.


00:26:38.880 --> 00:26:40.880
But I like to write my slides in Markdown,


00:26:40.880 --> 00:26:42.080
which is really what this is for.


00:26:42.080 --> 00:26:43.160
You write your slides in Markdown


00:26:43.160 --> 00:26:44.520
in a bunch of different files,


00:26:44.520 --> 00:26:46.340
it stitches them together and creates a,


00:26:46.340 --> 00:26:48.880
what's called remark JS presentation.


00:26:48.880 --> 00:26:50.880
So I use this for my own teaching.


00:26:50.880 --> 00:26:53.120
- Nice, I'll check it out.


00:26:53.120 --> 00:26:55.200
- But it really is largely a sample project


00:26:55.200 --> 00:26:58.800
to just like learn how to use PyPI and things like that.


00:26:58.800 --> 00:27:01.280
- Yeah, very cool.


00:27:01.280 --> 00:27:06.080
All right, up next we have caching.


00:27:06.080 --> 00:27:07.120
Oh wait, we just talked about caching.


00:27:07.120 --> 00:27:08.440
No, I have more caching.


00:27:08.440 --> 00:27:12.840
So Django, I have two pieces of news on Django.


00:27:12.840 --> 00:27:16.080
This one comes from Carlton Gibson,


00:27:16.080 --> 00:27:18.240
one of the Django guys,


00:27:18.240 --> 00:27:21.640
and also one of the hosts at Django Chat, the podcast.


00:27:21.640 --> 00:27:26.640
So they are adding a Redis cache backend to Django.


00:27:27.600 --> 00:27:32.600
So traditionally Django has shipped with memcache, memcache-d,


00:27:32.600 --> 00:27:38.720
that cache backend with multiple implementations, I think, even.


00:27:38.720 --> 00:27:40.640
So you can go there, like Django has an ORM,


00:27:40.640 --> 00:27:43.680
it can talk to stuff, so it has a cache backend as well.


00:27:43.680 --> 00:27:45.280
And it could talk to memcache,


00:27:45.280 --> 00:27:48.240
but it couldn't talk to Redis.


00:27:48.240 --> 00:27:50.480
And they found that the vast majority of people


00:27:50.480 --> 00:27:51.680
are using Redis, and they said,


00:27:51.680 --> 00:27:53.120
"Well, why don't we have a backend for it?"


00:27:53.120 --> 00:27:54.560
Well, guess what?


00:27:54.560 --> 00:27:55.520
It's going to.


00:27:55.520 --> 00:27:58.560
So this was merged and this whole conversation here


00:27:58.560 --> 00:28:01.320
around the PR and the issue is pretty interesting.


00:28:01.320 --> 00:28:04.060
So it starts out and says,


00:28:04.060 --> 00:28:07.860
this PR aims to add support for Redis


00:28:07.860 --> 00:28:10.800
to be used as a caching back end with Django


00:28:10.800 --> 00:28:13.160
as Redis is the most popular caching back end,


00:28:13.160 --> 00:28:17.280
adding it to Django.core.cache module


00:28:17.280 --> 00:28:19.080
would be a great addition for developers


00:28:19.080 --> 00:28:22.760
who previously had to rely on third party packages.


00:28:22.760 --> 00:28:24.680
And check out how they've got this little checklist


00:28:24.680 --> 00:28:27.680
and progress, these are the things for this PR


00:28:27.680 --> 00:28:29.600
to come along and work.


00:28:29.600 --> 00:28:31.820
So create the Redis cache class,


00:28:31.820 --> 00:28:33.880
do a pickle serializer, et cetera, et cetera,


00:28:33.880 --> 00:28:35.640
waiting for this other task.


00:28:35.640 --> 00:28:38.080
Here's some open-ended documentation.


00:28:38.080 --> 00:28:40.280
So I don't think I've seen this really before,


00:28:40.280 --> 00:28:43.780
like this project tracking in the PR.


00:28:43.780 --> 00:28:46.500
- Yeah, that's really cool.


00:28:46.500 --> 00:28:47.720
- Yeah, I do too.


00:28:47.720 --> 00:28:50.440
The other thing to note that this came in on May 23rd


00:28:50.440 --> 00:28:52.580
and there's a large conversation.


00:28:52.580 --> 00:28:57.580
If you go there, there's 30 pages of conversation about it.


00:28:57.580 --> 00:28:59.300
And you can see it evolving, like, okay,


00:28:59.300 --> 00:29:00.740
we finally got the test pass


00:29:00.740 --> 00:29:01.900
and we finally got it implemented.


00:29:01.900 --> 00:29:04.140
Now let's move on to the documentation now, et cetera,


00:29:04.140 --> 00:29:08.740
et cetera, and then finally, boom, September 15th.


00:29:08.740 --> 00:29:12.180
That's three, three and a half months, something like that.


00:29:12.180 --> 00:29:13.020
It's closed.


00:29:13.020 --> 00:29:16.820
So you can actually sort of track what the Django team


00:29:16.820 --> 00:29:18.500
is doing for adding features,


00:29:18.500 --> 00:29:20.860
like core important features to Django.


00:29:21.780 --> 00:29:23.420
It's always so interesting to watch


00:29:23.420 --> 00:29:24.840
open source communities like this,


00:29:24.840 --> 00:29:27.080
especially on somewhat contentious issues


00:29:27.080 --> 00:29:29.680
where people disagree in how they manage these things.


00:29:29.680 --> 00:29:30.720
I think it's really impressive


00:29:30.720 --> 00:29:34.460
because a lot of teams that even meet in person regularly


00:29:34.460 --> 00:29:36.580
and are small teams still struggle with that kind of stuff,


00:29:36.580 --> 00:29:38.920
but these huge open source projects manage it


00:29:38.920 --> 00:29:41.100
and somehow they implemented the feature at the end.


00:29:41.100 --> 00:29:42.480
So pretty impressive.


00:29:42.480 --> 00:29:43.320
- Yeah, absolutely.


00:29:43.320 --> 00:29:44.200
It's very impressive.


00:29:44.200 --> 00:29:45.960
Also, I said this was from Carlton.


00:29:45.960 --> 00:29:46.920
He participated a lot.


00:29:46.920 --> 00:29:50.040
I'm not a hundred percent sure that he was the originator.


00:29:50.040 --> 00:29:55.040
This might be Daniel Abassi.


00:29:55.040 --> 00:29:58.320
So sorry if I misattributed credit there,


00:29:58.320 --> 00:30:00.920
but for whoever did this, the original issue,


00:30:00.920 --> 00:30:02.280
I think Carlton had put up.


00:30:02.280 --> 00:30:04.920
So I'm not sure who was really sort of the initiator there,


00:30:04.920 --> 00:30:06.260
but I think it's cool.


00:30:06.260 --> 00:30:10.000
And it's also neat how out in the open this whole thing is.


00:30:10.000 --> 00:30:11.260
- Yeah. - Yeah.


00:30:11.260 --> 00:30:15.280
- Putting the open in an open source.


00:30:15.280 --> 00:30:16.120
- That's right.


00:30:19.600 --> 00:30:21.600
Hi Brian, what you got?


00:30:21.600 --> 00:30:22.500
- It's me again.


00:30:22.500 --> 00:30:27.440
Are we done with our things?


00:30:27.440 --> 00:30:28.280
So-


00:30:28.280 --> 00:30:29.720
- Oh wait, no, I think I got one more.


00:30:29.720 --> 00:30:32.440
- Oh, sorry, I totally, I was for some reason in wrong order.


00:30:32.440 --> 00:30:33.760
Yes, Ethan, you're up next, sorry.


00:30:33.760 --> 00:30:35.080
- Totally fine.


00:30:35.080 --> 00:30:40.080
So yeah, so I wanted to highlight PEP 612.


00:30:40.080 --> 00:30:42.480
So I happened upon this, I forget,


00:30:42.480 --> 00:30:44.040
there was some other PEP I was looking at


00:30:44.040 --> 00:30:46.000
and they'd linked off to this one,


00:30:46.000 --> 00:30:47.600
but a little bit of background,


00:30:47.600 --> 00:30:49.520
a PEP is a Python Enhancement Proposal.


00:30:49.520 --> 00:30:54.660
It's basically like how ideas are proposed in terms of what to do with Python as a community


00:30:54.660 --> 00:30:56.960
or as a language.


00:30:56.960 --> 00:31:02.440
And I recently have been really kind of diving into type hinting in Python.


00:31:02.440 --> 00:31:04.720
So there's a surprising number of peps about type hinting.


00:31:04.720 --> 00:31:08.080
And what this one does is something I guess I didn't really realize I needed.


00:31:08.080 --> 00:31:12.200
It was a bit of an annoyance, but I didn't realize there was a fix coming.


00:31:12.200 --> 00:31:17.160
Basically what it comes down to is quite often you write functions that take in a function


00:31:17.160 --> 00:31:19.160
and return another function.


00:31:19.160 --> 00:31:21.160
So there's this example.


00:31:21.160 --> 00:31:26.160
Where's the first case where they use it?


00:31:26.160 --> 00:31:29.160
I think here, paramspec.


00:31:29.160 --> 00:31:32.160
I'll find it while I talk about this.


00:31:32.160 --> 00:31:35.160
- A lot of decorator time, yeah.


00:31:35.160 --> 00:31:38.160
- Yeah, what you do with decorators is you write


00:31:38.160 --> 00:31:40.160
functions that take in other functions


00:31:40.160 --> 00:31:42.160
and return a function that has the same signature,


00:31:42.160 --> 00:31:44.160
which is to say it takes in the same parameters


00:31:44.160 --> 00:31:48.400
of the same types and returns the same return type.


00:31:48.400 --> 00:31:50.080
It may have some other modifications of the function,


00:31:50.080 --> 00:31:51.800
but that's very frequent.


00:31:51.800 --> 00:31:55.060
And so sometimes what you want to say is my decorator,


00:31:55.060 --> 00:31:56.600
if I want to type the decorator,


00:31:56.600 --> 00:31:58.160
say what types of things it takes in,


00:31:58.160 --> 00:31:59.520
it takes in something that is essentially


00:31:59.520 --> 00:32:02.640
a generic function type.


00:32:02.640 --> 00:32:05.620
Any kind of function is fine that takes in any parameters


00:32:05.620 --> 00:32:07.380
and returns any return type,


00:32:07.380 --> 00:32:09.040
as long as it returns the same thing.


00:32:09.040 --> 00:32:12.480
So it's like generics, which you would do with type vars.


00:32:12.480 --> 00:32:16.880
But in this case, you create something called a param spec,


00:32:16.880 --> 00:32:21.520
and then you pass that as the--


00:32:21.520 --> 00:32:25.000
oh, man, I lost where it is in here.


00:32:25.000 --> 00:32:25.720
Oh, here we go.


00:32:25.720 --> 00:32:26.760
This is what I wanted.


00:32:26.760 --> 00:32:30.040
So you pass it as the type of callable


00:32:30.040 --> 00:32:32.280
when you type the function that's taken in.


00:32:32.280 --> 00:32:34.160
And then you say you're returning a callable


00:32:34.160 --> 00:32:36.200
with the same parameter specification.


00:32:36.200 --> 00:32:39.100
This p is a parameter specification.


00:32:39.100 --> 00:32:47.100
and you make essentially your callables generic on both this parameter specification and on the return value.


00:32:47.100 --> 00:32:49.780
So I know there's a lot to that.


00:32:49.780 --> 00:32:55.780
And I think for people who are typing everything every day, maybe this doesn't seem terribly pertinent.


00:32:55.780 --> 00:32:59.300
What I do, I said, I write a lot of Python packages for people to use.


00:32:59.300 --> 00:33:04.980
And it's important both for quality control and so people know what the return values are


00:33:04.980 --> 00:33:07.060
and what they should pass into functions to have a lot of typing.


00:33:07.460 --> 00:33:13.860
But really, what this got me thinking about a little bit is just that the Python typing ecosystem is still really evolving.


00:33:13.860 --> 00:33:19.700
Like for somebody who's not super close to following it, it appears that like, this is how Python works now.


00:33:19.700 --> 00:33:21.860
And maybe it's always been this way, but it really hasn't.


00:33:21.860 --> 00:33:23.860
And there's a lot of holes in how it works.


00:33:23.860 --> 00:33:25.420
There was no way to do this before.


00:33:25.420 --> 00:33:26.620
And this isn't finished yet.


00:33:26.620 --> 00:33:28.340
This is a pep, but it isn't implemented.


00:33:28.340 --> 00:33:33.020
And so right now, you don't have a way to do typing for this particular feature.


00:33:33.860 --> 00:33:38.460
- Yeah, flaring type information through different things.


00:33:38.460 --> 00:33:41.100
That is something we haven't done a lot of in Python.


00:33:41.100 --> 00:33:43.380
But as you called out generics and templates,


00:33:43.380 --> 00:33:44.220
that's like all you do.


00:33:44.220 --> 00:33:46.700
That's the bread and butter of those things.


00:33:46.700 --> 00:33:48.020
- Yeah, and it's the same idea,


00:33:48.020 --> 00:33:49.500
but features that aren't there yet.


00:33:49.500 --> 00:33:51.260
So it's just kind of interesting to remember


00:33:51.260 --> 00:33:53.220
that this stuff is still being added.


00:33:53.220 --> 00:33:55.380
Like keeping an eye on when this stuff comes in,


00:33:55.380 --> 00:33:57.100
it can really make things easier.


00:33:57.100 --> 00:34:00.140
And in the meantime, don't lose too much sleep,


00:34:00.140 --> 00:34:01.620
not being able to type certain things.


00:34:01.620 --> 00:34:04.100
If you can't type it perfectly, that's okay.


00:34:04.100 --> 00:34:07.100
I've actually been reading Luciano Romalho's book,


00:34:07.100 --> 00:34:09.760
Fluent Python, and he makes that point really well,


00:34:09.760 --> 00:34:12.340
that Python isn't a statically typed language


00:34:12.340 --> 00:34:14.000
and you shouldn't get too carried away


00:34:14.000 --> 00:34:14.880
trying to type things.


00:34:14.880 --> 00:34:17.240
As much as is possible and helps you is worth it,


00:34:17.240 --> 00:34:19.260
but you shouldn't be religious about it.


00:34:19.260 --> 00:34:21.020
- Right, but if you are building tools


00:34:21.020 --> 00:34:24.060
and you put this into there eventually,


00:34:24.060 --> 00:34:26.900
it might help other people who consume your libraries,


00:34:26.900 --> 00:34:29.820
it might help the editors give better auto-complete


00:34:29.820 --> 00:34:31.120
and error checking and stuff.


00:34:31.120 --> 00:34:32.520
And we catch bugs all the time.


00:34:32.520 --> 00:34:36.040
So as much as it's feasible, I think it's totally worth it.


00:34:36.040 --> 00:34:37.360
And actually there's a couple other peps


00:34:37.360 --> 00:34:39.120
on that note of things still changing.


00:34:39.120 --> 00:34:41.680
There's a couple other peps that are worth looking at.


00:34:41.680 --> 00:34:45.160
There's a new, more convenient way to write optional types.


00:34:45.160 --> 00:34:47.440
So right now you can say, I know.


00:34:47.440 --> 00:34:50.600
- Oh my gosh, I've wanted this for so long, yes.


00:34:50.600 --> 00:34:53.440
- Yeah, so you have to say optional left bracket


00:34:53.440 --> 00:34:55.480
then the thing that is optional and then right bracket.


00:34:55.480 --> 00:34:57.880
- Optional bracket string or optional bracket user


00:34:57.880 --> 00:34:58.720
or whatever, yeah.


00:34:58.720 --> 00:35:00.580
And you've got to import optional, don't forget that, yeah.


00:35:00.580 --> 00:35:02.020
- That's true, you got to import it too.


00:35:02.020 --> 00:35:04.460
And so now there's a pet proposing


00:35:04.460 --> 00:35:05.560
that you could just put a question mark,


00:35:05.560 --> 00:35:07.220
which I guess isn't a problem for the parser,


00:35:07.220 --> 00:35:08.720
which is pretty nice.


00:35:08.720 --> 00:35:11.260
This one also is in process.


00:35:11.260 --> 00:35:12.860
- Maybe this was something that was needed,


00:35:12.860 --> 00:35:14.980
the peg parser, which recently went into,


00:35:14.980 --> 00:35:16.340
- Oh, maybe. - Was that three nine, right?


00:35:16.340 --> 00:35:17.880
Where it couldn't do it before,


00:35:17.880 --> 00:35:19.780
but maybe it can now. - Yeah, that's a good point.


00:35:19.780 --> 00:35:22.220
- But yeah, they have that in C#


00:35:22.220 --> 00:35:23.060
and they have that in Swift.


00:35:23.060 --> 00:35:26.880
And I just love like this thing question mark, right?


00:35:26.880 --> 00:35:29.380
Rather than a null check or specifying


00:35:29.380 --> 00:35:32.640
into question mark rather than optional bracket of int.


00:35:32.640 --> 00:35:33.480
It's just-


00:35:33.480 --> 00:35:34.520
- I didn't know that was in other languages.


00:35:34.520 --> 00:35:36.040
That, okay, that makes a lot more sense.


00:35:36.040 --> 00:35:37.600
- And it's phonetic, right?


00:35:37.600 --> 00:35:40.080
Like if it's an int, you just say int.


00:35:40.080 --> 00:35:42.320
If it's an int question mark, it's int.


00:35:42.320 --> 00:35:44.280
Right, so you can even just like speak it out really well.


00:35:44.280 --> 00:35:46.080
Like int, maybe, okay, that could be null.


00:35:46.080 --> 00:35:47.720
- Maybe, yeah. - Could be none.


00:35:47.720 --> 00:35:49.480
(laughing)


00:35:49.480 --> 00:35:51.320
- Yeah. - That's not obvious to me.


00:35:51.320 --> 00:35:53.360
- Really, oh, interesting.


00:35:53.360 --> 00:35:55.720
I feel like that's a nice syntax, but maybe it isn't.


00:35:55.720 --> 00:35:57.640
Who knows, maybe that PEP won't get approved.


00:35:57.640 --> 00:35:59.240
- Yeah, I think it may not,


00:35:59.240 --> 00:36:00.720
but I do hope it does.


00:36:00.720 --> 00:36:01.840
I mean, it's the question mark,


00:36:01.840 --> 00:36:03.520
there's an int or is there, right?


00:36:03.520 --> 00:36:04.480
It's like, is it there?


00:36:04.480 --> 00:36:05.320
You're not sure.


00:36:05.320 --> 00:36:08.040
There's some subtle symbolism there.


00:36:08.040 --> 00:36:10.700
- Yeah, I prefer the int or none.


00:36:10.700 --> 00:36:13.240
- I like that as well.


00:36:13.240 --> 00:36:14.080
I agree.


00:36:14.080 --> 00:36:15.520
Now that that's more convenient to write,


00:36:15.520 --> 00:36:16.360
but that's what that's all about.


00:36:16.360 --> 00:36:18.160
- The other languages that support this,


00:36:18.160 --> 00:36:20.640
and I don't know, I didn't read that PEP well enough to know


00:36:20.640 --> 00:36:22.520
there's a runtime behavior,


00:36:22.520 --> 00:36:24.680
not just a type specification behavior.


00:36:24.680 --> 00:36:29.680
So I could say X equals like user question mark dot name.


00:36:29.680 --> 00:36:34.080
And it'll either, if the user is none, the name is none


00:36:34.080 --> 00:36:36.600
or it'll follow down that path and say, okay,


00:36:36.600 --> 00:36:38.640
user is not none, so then I'll say dot name.


00:36:38.640 --> 00:36:40.880
- Oh, that avoids the none type has no attribute there.


00:36:40.880 --> 00:36:41.720
- Yeah, yeah, yeah, exactly.


00:36:41.720 --> 00:36:42.540
- That's really nice.


00:36:42.540 --> 00:36:43.380
Yeah.


00:36:43.380 --> 00:36:44.200
- Yeah.


00:36:44.200 --> 00:36:45.040
- Wow, very cool.


00:36:45.040 --> 00:36:49.280
- So Will is in the chat and he's got,


00:36:49.280 --> 00:36:50.680
oh, I did the wrong one.


00:36:50.680 --> 00:36:52.640
I love that.


00:36:52.640 --> 00:36:55.200
(laughing)


00:36:55.200 --> 00:36:56.040
- Hey, well.


00:36:56.040 --> 00:36:59.120
- That's pretty good.


00:36:59.120 --> 00:36:59.960
- All right, and then Ethan,


00:36:59.960 --> 00:37:02.080
you wanna tell us about one more before we wrap it up?


00:37:02.080 --> 00:37:03.600
- Oh, just another pep, yeah.


00:37:03.600 --> 00:37:05.920
Just another thing that is potentially changed


00:37:05.920 --> 00:37:07.120
how typing works.


00:37:07.120 --> 00:37:08.720
Right now there's no way to specify


00:37:08.720 --> 00:37:10.000
if you've used a type dict,


00:37:10.000 --> 00:37:13.160
which is to say a dictionary with some keys


00:37:13.160 --> 00:37:14.400
having certain types.


00:37:14.400 --> 00:37:19.880
There was no way to specify what keys were optional


00:37:19.880 --> 00:37:20.720
and which ones weren't.


00:37:20.720 --> 00:37:21.800
You could either say they were all optional


00:37:21.800 --> 00:37:23.980
or they were all required and there's nothing in between.


00:37:23.980 --> 00:37:25.840
But there's also a PEP to do that.


00:37:25.840 --> 00:37:27.640
So just there's a lot of stuff on the horizon


00:37:27.640 --> 00:37:28.720
to keep an eye out for.


00:37:28.720 --> 00:37:31.520
And these three peps I think are a good reminder of that.


00:37:31.520 --> 00:37:33.600
- Yeah.


00:37:33.600 --> 00:37:34.940
- Yeah, very cool.


00:37:34.940 --> 00:37:39.000
All right, now can we throw it to you, Brian?


00:37:39.000 --> 00:37:43.840
- Yeah, now, so this was a suggestion by John Hagan


00:37:43.840 --> 00:37:47.080
and I just thought I'd throw it in as an extra,


00:37:47.080 --> 00:37:49.160
just one extra.


00:37:49.160 --> 00:37:53.460
So we've talked about the effort at Microsoft and Guido and others


00:37:53.460 --> 00:37:55.960
to make Python faster.


00:37:55.960 --> 00:38:03.660
And there's a whole bunch of ideas up in the faster CPython ideas.


00:38:03.660 --> 00:38:07.320
And this links to a couple of slide decks


00:38:07.320 --> 00:38:11.480
talking about making Python faster.


00:38:11.480 --> 00:38:15.420
And one of the things is a slide deck from Guido.


00:38:15.480 --> 00:38:19.480
And in it, he mentions various other optimizations,


00:38:19.480 --> 00:38:22.540
like maybe zero overhead exception handling.


00:38:22.540 --> 00:38:26.140
Well, that's neat, because that's already in 3.11.


00:38:26.140 --> 00:38:33.720
So in 3.11, we have Mark Shannon implementing zero-cost exceptions.


00:38:33.720 --> 00:38:39.220
So if you have a try statement that doesn't catch anything,


00:38:39.220 --> 00:38:41.780
there's no cost to it. So that's pretty cool.


00:38:42.640 --> 00:38:45.700
That is very cool. I did a little playing around with this idea,


00:38:45.700 --> 00:38:51.380
and I wrote a program here that calls string upper


00:38:51.380 --> 00:38:54.340
like a hundred million times in a loop.


00:38:54.340 --> 00:38:58.540
And it does that also in a try-except block with no errors.


00:38:58.540 --> 00:39:03.240
And so my understanding of this was that it will make


00:39:03.240 --> 00:39:07.440
entering the try block in the case there's not an exception cheaper.


00:39:07.440 --> 00:39:10.900
And I ran it a hundred million times, and I got,


00:39:10.900 --> 00:39:14.080
Yeah, not exactly the same, but it's really similar.


00:39:14.080 --> 00:39:17.580
But one of the other things which I'm not doing in my example here,


00:39:17.580 --> 00:39:19.580
this is a gist, I'll put it in the show notes.


00:39:19.580 --> 00:39:24.080
The looking into this comment, Brian, is


00:39:24.080 --> 00:39:28.780
they talk about the number of, basically the size of the call stack.


00:39:28.780 --> 00:39:33.120
And some of the other things that happen in there


00:39:33.120 --> 00:39:35.120
about not pushing the exception


00:39:35.120 --> 00:39:38.000
onto the call stack or something unless it actually happens.


00:39:38.000 --> 00:39:39.560
and those kinds of things.


00:39:39.560 --> 00:39:41.980
So it's supposed to make function calls faster as well.


00:39:41.980 --> 00:39:44.840
So even if my little example wasn't necessarily faster,


00:39:44.840 --> 00:39:46.720
maybe something else,


00:39:46.720 --> 00:39:49.400
there's maybe other situations where it is nice.


00:39:49.400 --> 00:39:52.800
- Cool.


00:39:52.800 --> 00:39:54.360
- Ethan, anything else you want to just throw out there


00:39:54.360 --> 00:39:55.880
for people?


00:39:55.880 --> 00:39:57.840
- Well, one thing I did want to mention real fast


00:39:57.840 --> 00:40:00.680
about the zero cost exception handling is,


00:40:00.680 --> 00:40:02.100
I think it's always tough to teach people


00:40:02.100 --> 00:40:04.160
about try except blocks and then introduce to them


00:40:04.160 --> 00:40:06.000
that they're actually pretty slow,


00:40:06.000 --> 00:40:07.360
especially use them in a function


00:40:07.360 --> 00:40:08.480
it gets called many times.


00:40:08.480 --> 00:40:09.920
And to be honest, I don't know the reasons


00:40:09.920 --> 00:40:11.900
for the internals being like that.


00:40:11.900 --> 00:40:12.880
So it's really nice to feel like


00:40:12.880 --> 00:40:14.000
that might not be true anymore,


00:40:14.000 --> 00:40:15.760
because they're a good practice to have


00:40:15.760 --> 00:40:16.840
to be able to say like,


00:40:16.840 --> 00:40:18.300
"Be careful when you write code."


00:40:18.300 --> 00:40:20.180
Especially for people like data scientists


00:40:20.180 --> 00:40:21.700
who aren't day-to-day programmers,


00:40:21.700 --> 00:40:23.280
to say like, "Oh, it's good practice to use these


00:40:23.280 --> 00:40:24.800
"and you shouldn't have to worry about performance."


00:40:24.800 --> 00:40:26.720
So glad to see that.


00:40:26.720 --> 00:40:27.560
- Yeah, absolutely.


00:40:27.560 --> 00:40:29.720
And just following up on that real quick.


00:40:29.720 --> 00:40:34.480
You look at the issue underlying this,


00:40:34.480 --> 00:40:36.480
where was it?


00:40:36.480 --> 00:40:37.300
This the right one?


00:40:37.300 --> 00:40:39.800
There's an issue that's linked in the show notes,


00:40:39.800 --> 00:40:43.300
and it actually shows you the disassembly into bytecode


00:40:43.300 --> 00:40:47.800
of what it currently is and what it's going to be.


00:40:47.800 --> 00:40:50.800
And it's really, really similar.


00:40:50.800 --> 00:40:52.800
So you can see currently it does like,


00:40:52.800 --> 00:40:55.300
the first thing it does is set up a finally,


00:40:55.300 --> 00:40:57.800
and then stuff right at the beginning.


00:40:57.800 --> 00:41:01.300
But now just do like a no op,


00:41:01.300 --> 00:41:03.300
and then do a return value in the good case.


00:41:03.300 --> 00:41:05.300
Otherwise it'll do a push exception,


00:41:05.300 --> 00:41:07.440
and then work with it and so on.


00:41:07.440 --> 00:41:11.560
So it pushes off some of the bytecode operations


00:41:11.560 --> 00:41:13.420
that add to the call stack,


00:41:13.420 --> 00:41:15.360
like pushing things onto it and so on


00:41:15.360 --> 00:41:20.000
at the c of al.c level of CPython.


00:41:20.000 --> 00:41:21.840
- Yeah, that's very cool.


00:41:21.840 --> 00:41:22.680
- Yeah.


00:41:22.680 --> 00:41:26.240
- Well, the one thing I wanted to mention,


00:41:26.240 --> 00:41:28.800
well, I don't know if people have heard of pedalboard.


00:41:28.800 --> 00:41:30.720
I think Spotify just announced this recently.


00:41:30.720 --> 00:41:33.120
It's basically a Python package that lets you do some things


00:41:33.120 --> 00:41:35.560
you might usually do using an audio editing tool.


00:41:35.560 --> 00:41:37.580
And it's cool on its own,


00:41:37.580 --> 00:41:39.760
but I had just listened to,


00:41:39.760 --> 00:41:40.640
I forget if it was last week,


00:41:40.640 --> 00:41:43.760
so the weeks before episode where Brett Cannon was on,


00:41:43.760 --> 00:41:45.060
on Python Bytes.


00:41:45.060 --> 00:41:47.040
And he talked about how,


00:41:47.040 --> 00:41:49.080
anytime you see an issue with documentation,


00:41:49.080 --> 00:41:50.280
just put in a pull request,


00:41:50.280 --> 00:41:51.580
most of the time it'll get accepted.


00:41:51.580 --> 00:41:53.960
And he said he's contributed


00:41:53.960 --> 00:41:56.980
like 200 or 300 repositories that way.


00:41:56.980 --> 00:41:58.360
So I found this last week.


00:41:58.360 --> 00:41:59.200
And then in this week,


00:41:59.200 --> 00:42:00.620
I was thinking about what I wanted to talk about


00:42:00.620 --> 00:42:01.460
on the show.


00:42:01.460 --> 00:42:02.680
So I went back to this link


00:42:02.680 --> 00:42:06.460
And lo and behold, the last commit was made by Brett Cannon


00:42:06.460 --> 00:42:09.540
and it's removing a stray backtick in the readme.


00:42:09.540 --> 00:42:11.680
So he really practices what he preaches.


00:42:11.680 --> 00:42:12.820
So he seems to be very active.


00:42:12.820 --> 00:42:15.940
He's one of only nine contributors to this


00:42:15.940 --> 00:42:17.700
and probably the rest work at Spotify.


00:42:17.700 --> 00:42:19.260
So good for him.


00:42:19.260 --> 00:42:21.580
- Nice. - Yeah, that's fantastic.


00:42:21.580 --> 00:42:24.420
Nice for that a little bit of real-time follow-up.


00:42:24.420 --> 00:42:25.260
Fantastic.


00:42:25.260 --> 00:42:28.140
All right, so I have a few extras.


00:42:28.140 --> 00:42:32.220
And again, I have my banner for extras, extras, extras.


00:42:32.220 --> 00:42:34.100
So a couple of things here.


00:42:34.100 --> 00:42:38.620
Let's talk about something that Kelly Schuster-Perez


00:42:38.620 --> 00:42:41.860
does, talked about.


00:42:41.860 --> 00:42:44.500
You know, she and Sean Tabor are doing


00:42:44.500 --> 00:42:47.700
the Teaching Python podcast,


00:42:47.700 --> 00:42:49.340
and they're doing great work over there.


00:42:49.340 --> 00:42:52.940
So one of the things that she found for teaching


00:42:52.940 --> 00:42:55.540
is this thing called Ear Sketch.


00:42:55.540 --> 00:42:58.020
You probably haven't heard of this, I'm guessing.


00:42:58.020 --> 00:43:01.060
So Ear Sketch is a project from Georgia Tech


00:43:01.060 --> 00:43:07.580
that teaches coding, but through like a DJ type of experience.


00:43:07.580 --> 00:43:10.300
So she's got a cool video up there


00:43:10.300 --> 00:43:12.740
that says five minutes and four lines of code.


00:43:12.740 --> 00:43:14.380
And I got this up there going.


00:43:14.380 --> 00:43:16.540
So yeah, thanks, Tony, for pointing that out.


00:43:16.540 --> 00:43:18.380
So here, I'll just play what she created for everyone


00:43:18.380 --> 00:43:19.180
real quick.


00:43:19.180 --> 00:43:19.840
[VIDEO PLAYBACK]


00:43:19.840 --> 00:43:21.580
[MUSIC - TAYLOR SWIFT, "FIT THIS CROWN"]


00:43:21.580 --> 00:43:23.620
- I can see the look that's written on your face.


00:43:23.620 --> 00:43:25.140
Wonder how I still fit this crown.


00:43:25.140 --> 00:43:26.260
- I kind of like the beat.


00:43:26.260 --> 00:43:27.780
I like the vocals.


00:43:27.780 --> 00:43:30.460
[END PLAYBACK]


00:43:30.460 --> 00:43:31.460
Nice.


00:43:31.460 --> 00:43:33.340
So anyway, people are teaching,


00:43:33.340 --> 00:43:35.420
wanna get folks involved through music and Python,


00:43:35.420 --> 00:43:38.460
that's a real cool project, that Ear Sketch.


00:43:38.460 --> 00:43:41.540
And I told you good stuff about Django before,


00:43:41.540 --> 00:43:43.580
let me tell you some bad stuff.


00:43:43.580 --> 00:43:44.420
- Oh no.


00:43:44.420 --> 00:43:49.420
- You might meet little Bobby Tables in the Django ORM


00:43:49.420 --> 00:43:53.660
if you're running query set order by


00:43:53.660 --> 00:43:58.580
and passing some piece of user input


00:43:58.580 --> 00:44:00.700
into what you might be ordering by.


00:44:00.700 --> 00:44:02.620
You might be ordering by backtick,


00:44:02.620 --> 00:44:06.980
semi-colon, drop table, dash dash,


00:44:06.980 --> 00:44:08.980
or something like that, which you wouldn't want to.


00:44:08.980 --> 00:44:13.020
So basically there's a SQL injection vulnerability in Django.


00:44:13.020 --> 00:44:15.020
What is it?


00:44:15.020 --> 00:44:20.380
320 up to 325,


00:44:20.380 --> 00:44:24.980
and 300 up to 313,


00:44:24.980 --> 00:44:26.260
but less than that, right?


00:44:26.260 --> 00:44:29.840
less than 325 and less than 313.


00:44:29.840 --> 00:44:31.680
So if you have those,


00:44:31.680 --> 00:44:33.440
you definitely want to patch it straight away.


00:44:33.440 --> 00:44:35.200
That's a critical vulnerability.


00:44:35.200 --> 00:44:37.700
So check that out.


00:44:37.700 --> 00:44:39.820
- That's on untrusted input.


00:44:39.820 --> 00:44:40.660
So-


00:44:40.660 --> 00:44:42.120
- Yes, that is untrusted input.


00:44:42.120 --> 00:44:44.340
Don't freak if you're not taking,


00:44:44.340 --> 00:44:45.520
what would you like to sort by?


00:44:45.520 --> 00:44:47.060
Please type here.


00:44:47.060 --> 00:44:49.320
(laughing)


00:44:49.320 --> 00:44:53.800
But still, you know, it's easy enough to just do a GitHub


00:44:54.960 --> 00:44:55.800
- Yeah.


00:44:55.800 --> 00:44:57.000
- Just an update to the requirements.


00:44:57.000 --> 00:44:59.320
Now, if you're on, your code is on GitHub


00:44:59.320 --> 00:45:02.720
and this is the requirement, you pinned your version,


00:45:02.720 --> 00:45:04.880
you probably have already gotten this


00:45:04.880 --> 00:45:08.360
as a security announcement and an email sent to you.


00:45:08.360 --> 00:45:09.880
- Yeah, that's such a nice feature.


00:45:09.880 --> 00:45:10.920
- It is such a nice feature.


00:45:10.920 --> 00:45:12.080
But if you don't pin your version,


00:45:12.080 --> 00:45:13.220
they're like, well, you're on the latest version,


00:45:13.220 --> 00:45:14.400
you're good, right?


00:45:14.400 --> 00:45:15.240
You won't know.


00:45:15.240 --> 00:45:16.860
So it still may slip through.


00:45:16.860 --> 00:45:19.720
All right.


00:45:19.720 --> 00:45:21.520
Yeah, and Chris May on the live stream


00:45:21.520 --> 00:45:23.280
has some philosophical thoughts for us.


00:45:23.280 --> 00:45:26.280
He says sometimes he doesn't even trust his own input.


00:45:26.280 --> 00:45:28.480
Yes, we've all been there.


00:45:28.480 --> 00:45:30.040
- Chris, don't inject yourself.


00:45:30.040 --> 00:45:35.240
- All right, shall we wrap this up with some laughs?


00:45:35.240 --> 00:45:36.580
- Yes.


00:45:36.580 --> 00:45:38.800
- Brian, this is gonna take some role playing again,


00:45:38.800 --> 00:45:40.280
a nice little cartoon for us.


00:45:40.280 --> 00:45:42.320
This is QA 101.


00:45:42.320 --> 00:45:44.800
Speaking of the CVE I just spoke about,


00:45:44.800 --> 00:45:47.560
and you know, if you fix a minor bug,


00:45:47.560 --> 00:45:49.520
you might get credit, like whatever,


00:45:49.520 --> 00:45:50.920
we fixed a little tiny bug, right?


00:45:50.920 --> 00:45:52.400
Formatted in a log file.


00:45:52.400 --> 00:45:53.680
You fixed a critical bug.


00:45:53.680 --> 00:45:55.200
Like, wow, that seems super important.


00:45:55.200 --> 00:45:56.680
You've been doing good work this week, right?


00:45:56.680 --> 00:46:00.920
So here's two developers in a open office sort of space.


00:46:00.920 --> 00:46:03.760
Brian, you be the guy, I'll be the woman developer.


00:46:03.760 --> 00:46:04.840
- Okay.


00:46:04.840 --> 00:46:07.600
Which priority should I give this bug?


00:46:07.600 --> 00:46:09.440
- Is it easy to fix?


00:46:09.440 --> 00:46:11.480
- Yep, I'll fix it immediately.


00:46:11.480 --> 00:46:13.720
- Critical.


00:46:13.720 --> 00:46:15.520
Critical.


00:46:15.520 --> 00:46:18.920
Finding the correct bug priority is key, they say.


00:46:18.920 --> 00:46:19.880
So very nice.


00:46:19.880 --> 00:46:22.380
I'll link to that little cartoon in the show notes.


00:46:22.380 --> 00:46:24.060
- I don't get it.


00:46:24.060 --> 00:46:26.200
- Because you're gonna get more credit


00:46:26.200 --> 00:46:27.300
for fixing critical bugs.


00:46:27.300 --> 00:46:28.780
And if you can fix it right away.


00:46:28.780 --> 00:46:30.440
- Yeah, it looks like you did more work.


00:46:30.440 --> 00:46:32.000
- You did so much more work.


00:46:32.000 --> 00:46:35.600
Brian only fixed like medium bugs.


00:46:35.600 --> 00:46:37.460
Ethan and I took out the critical ones.


00:46:37.460 --> 00:46:39.680
- You do your T-shirt size and after you finish,


00:46:39.680 --> 00:46:41.080
after you take all the work,


00:46:41.080 --> 00:46:43.880
you assume everything you took was a large.


00:46:43.880 --> 00:46:44.720
- Yeah.


00:46:44.720 --> 00:46:46.760
So, yep.


00:46:46.760 --> 00:46:47.960
- Exactly.


00:46:47.960 --> 00:46:49.440
- I keep asking people,


00:46:49.440 --> 00:46:51.640
so what are the points equal in hours?


00:46:51.640 --> 00:46:53.720
- No, we can't talk about that.


00:46:53.720 --> 00:46:54.560
- Okay.


00:46:54.560 --> 00:46:56.080
(laughing)


00:46:56.080 --> 00:46:58.080
- Try these powers of two.


00:46:58.080 --> 00:46:59.360
What do I do?


00:46:59.360 --> 00:47:00.280
Yeah. - There.


00:47:00.280 --> 00:47:01.120
Cool.


00:47:01.120 --> 00:47:03.080
Well, thanks Ethan for coming on the show.


00:47:03.080 --> 00:47:04.080
It's fun. - Yeah, this was great.


00:47:04.080 --> 00:47:05.200
Thanks for having me.


00:47:05.200 --> 00:47:07.080
- Yeah, it's been fantastic to have you here.


00:47:07.080 --> 00:47:07.920
Thanks for being here.


00:47:07.920 --> 00:47:09.320
Brian, thanks as always.


00:47:09.320 --> 00:47:10.160
- Thanks.


00:47:10.160 --> 00:47:11.000
- Bye everyone.


00:47:11.000 --> 00:47:21.000
[BLANK_AUDIO]

