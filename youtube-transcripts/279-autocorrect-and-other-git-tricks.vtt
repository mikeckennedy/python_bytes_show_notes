WEBVTT

00:00:00.000 --> 00:00:02.000
Hello, YouTube.


00:00:02.000 --> 00:00:04.000
Hello, Brian Okken and Brian Skin.


00:00:04.000 --> 00:00:06.000
>> Hey.


00:00:06.000 --> 00:00:08.000
>> Hello.


00:00:08.000 --> 00:00:10.000
>> Hello.


00:00:10.000 --> 00:00:12.000
Great to have you both here.


00:00:12.000 --> 00:00:14.000
Everyone watching on the live stream, I can see you there.


00:00:14.000 --> 00:00:16.000
Thank you for showing up.


00:00:16.000 --> 00:00:18.000
Feel free to put in comments like always.


00:00:18.000 --> 00:00:20.000
Let's kick this off.


00:00:20.000 --> 00:00:26.000
Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:26.000 --> 00:00:33.280
episode 279 recorded on lucky April 13th, 2022. I'm Michael Kennedy.


00:00:33.280 --> 00:00:36.320
>> Brian Ochen. >> Brian Skinn.


00:00:36.320 --> 00:00:40.880
>> Hello, Brian's. Great to have you. >> Hello, singular Michael.


00:00:40.880 --> 00:00:45.440
>> Great Brian's think alike. >> That's right. That's the saying.


00:00:45.440 --> 00:00:52.400
Brian Skinn, welcome. It's great to have you here. You were now completing the trifecta of podcasts,


00:00:52.400 --> 00:00:58.800
I understand. Yes, indeed. I was on a panel for talk Python and an episode of testing code a little


00:00:58.800 --> 00:01:04.800
while back and excited to be here for a Python bites. Yeah, nice. You've been a big contributor


00:01:04.800 --> 00:01:10.000
in terms of sending topics our way. So it's only fitting that you're here. Tell people real quick


00:01:10.000 --> 00:01:14.480
about yourself before we jump into the topics. Sure. I'm a chemical engineer by training. I'm


00:01:14.480 --> 00:01:19.440
not actually a software dev by day. I have a PhD in chemical engineering. I've been working for the


00:01:19.440 --> 00:01:23.000
of the last 10 years or so at a company here in Dayton, Ohio,


00:01:23.000 --> 00:01:27.520
Faraday Technology, working on electrochemical process R&D.


00:01:27.520 --> 00:01:30.640
So there's a lot of science there, some programming,


00:01:30.640 --> 00:01:33.120
mostly for data analysis, things like that.


00:01:33.120 --> 00:01:35.440
But I also have done quite a bit of Python


00:01:35.440 --> 00:01:38.240
on the side in the documentation area


00:01:38.240 --> 00:01:39.680
and various things like that.


00:01:39.680 --> 00:01:40.840
So Alex?


00:01:40.840 --> 00:01:43.080
ALEX LANGSHUR: Chemical engineering is pretty awesome.


00:01:43.080 --> 00:01:44.920
And it's great to have someone here who's not


00:01:44.920 --> 00:01:46.440
a straight software developer.


00:01:46.440 --> 00:01:49.360
We get a lot of myopic views.


00:01:49.360 --> 00:01:52.000
and I think you'll have some interesting perspectives.


00:01:52.000 --> 00:01:52.920
- Hope so.


00:01:52.920 --> 00:01:55.320
- Yeah, I hope so as well, I'm sure.


00:01:55.320 --> 00:01:56.800
Now, before we kick this off,


00:01:56.800 --> 00:01:59.000
I wanna say this episode is brought to you by Datadog.


00:01:59.000 --> 00:02:01.840
Check them out at pythonbytes.fm/datadog.


00:02:01.840 --> 00:02:04.060
We'll talk more about them later.


00:02:04.060 --> 00:02:06.400
Right now, Brian, maybe we could talk about f-strings.


00:02:06.400 --> 00:02:07.360
What do you think?


00:02:07.360 --> 00:02:09.920
- Yeah, I mean, I love f-strings.


00:02:09.920 --> 00:02:12.160
Use them all the time, but I was like,


00:02:12.160 --> 00:02:13.840
really thought it was cool.


00:02:13.840 --> 00:02:15.160
There were a couple of new resources


00:02:15.160 --> 00:02:18.080
that I kind of wish I had had earlier.


00:02:18.080 --> 00:02:19.880
This one, a couple, they're new.


00:02:19.880 --> 00:02:23.040
So we've got from Florian Bruin,


00:02:23.040 --> 00:02:27.300
and he's, he's hugely helpful to,


00:02:27.300 --> 00:02:29.060
to getting, doing the code review


00:02:29.060 --> 00:02:30.380
or book review and code review


00:02:30.380 --> 00:02:32.680
and all that stuff on the pytest book.


00:02:32.680 --> 00:02:35.920
So I definitely want to shout out to him for,


00:02:35.920 --> 00:02:37.760
thank him for doing that.


00:02:37.760 --> 00:02:40.720
But so he generated this, this Python f-strings.


00:02:40.720 --> 00:02:42.260
It's called fstrings.help.


00:02:42.260 --> 00:02:47.440
And it's just like, it's a Jupyter notebook looking thing.


00:02:47.440 --> 00:02:50.300
I think he created it with Jupyter Notebook,


00:02:50.300 --> 00:02:52.960
but it just quickly goes through


00:02:52.960 --> 00:02:55.120
all of the formatting stuff of f-strings.


00:02:55.120 --> 00:02:57.680
And there's a little bit of explanation,


00:02:57.680 --> 00:03:01.360
but it just sort of exactly shows you,


00:03:01.360 --> 00:03:03.920
you know, what the syntax is and what the output is


00:03:03.920 --> 00:03:05.680
really concisely.


00:03:05.680 --> 00:03:10.360
This is a nice run through of the F string features.


00:03:10.360 --> 00:03:11.180
- Yeah, that's cool.


00:03:11.180 --> 00:03:13.440
It looks like if you were trying to either learn


00:03:13.440 --> 00:03:16.000
Python strings or trying to help someone learn


00:03:16.000 --> 00:03:18.400
Python strings, you could just send them this and go,


00:03:18.400 --> 00:03:21.400
here, scan this, you'll be good to go.


00:03:21.400 --> 00:03:24.160
- What I like about it is just the terse-ness as well.


00:03:24.160 --> 00:03:27.200
So this is a decent reference to bookmark


00:03:27.200 --> 00:03:28.620
for looking things up.


00:03:28.620 --> 00:03:31.120
The other thing I wanted to point out was an article


00:03:31.120 --> 00:03:33.760
called Python f-strings are more powerful


00:03:33.760 --> 00:03:35.000
than you might think.


00:03:35.000 --> 00:03:37.160
And that's exactly kind of the gist of it.


00:03:37.160 --> 00:03:39.840
It's more discussion.


00:03:39.840 --> 00:03:43.240
I mean, it does sort of tell you what they are,


00:03:43.240 --> 00:03:45.360
but it kind of assumes you already know.


00:03:45.360 --> 00:03:49.300
But some really cool things like date and time formatting,


00:03:49.300 --> 00:03:54.020
have using it for debugging with variable names.


00:03:54.020 --> 00:03:56.360
We've talked about that on the show,


00:03:56.360 --> 00:03:57.880
making advantage, taking advantage


00:03:57.880 --> 00:03:59.720
of string representations.


00:03:59.720 --> 00:04:02.280
There's even embedded,


00:04:02.280 --> 00:04:05.680
I didn't know you could put f-strings inside of f-strings.


00:04:05.680 --> 00:04:09.600
So there's part nested f-strings, they call it.


00:04:09.600 --> 00:04:11.960
So interesting stuff.


00:04:11.960 --> 00:04:12.800
Yes.


00:04:13.920 --> 00:04:15.400
- So, yes. - Nested f-strings,


00:04:15.400 --> 00:04:16.600
I had no idea.


00:04:16.600 --> 00:04:17.880
- I didn't either.


00:04:17.880 --> 00:04:19.680
- I've totally done that before.


00:04:19.680 --> 00:04:20.640
- Really? - Totally.


00:04:20.640 --> 00:04:21.880
Yeah, templating one thing


00:04:21.880 --> 00:04:23.440
to then template into another thing.


00:04:23.440 --> 00:04:25.320
Absolutely, it's super helpful.


00:04:25.320 --> 00:04:26.360
- Okay.


00:04:26.360 --> 00:04:27.520
- Very cool. - Nice.


00:04:27.520 --> 00:04:29.080
So, yeah, a couple-- - Yeah, it's easy to forget


00:04:29.080 --> 00:04:32.400
that you can apply the standard,


00:04:32.400 --> 00:04:35.960
I guess, string.format type of operators,


00:04:35.960 --> 00:04:38.160
like colon, point three F,


00:04:38.160 --> 00:04:41.640
or colon, comma to put digit grouping,


00:04:41.640 --> 00:04:42.840
but in f-strings, right?


00:04:42.840 --> 00:04:46.520
it's, I don't know, it feels more like you're working with a variable than you are with a format


00:04:46.520 --> 00:04:52.280
character. I mean short examples like this of here's a cool thing you can do with, you know,


00:04:52.280 --> 00:04:56.520
even a well-established basic feature like that can really help people go, oh hey, that's just


00:04:56.520 --> 00:05:02.760
what I need and run with it. Yeah, yeah, very nice. Oh, this is great, Brian. I love it. Now,


00:05:02.760 --> 00:05:08.440
are we ready to move on? Yeah, definitely. All right, I kind of want to blow your mind with this


00:05:09.000 --> 00:05:17.000
thing here. You've probably heard about Bloomberg terminals. So if you're in an investment space,


00:05:17.000 --> 00:05:22.360
like if you work at a hedge fund or an investment company, especially in Manhattan, you know,


00:05:22.360 --> 00:05:29.240
you'll sit down, you'll see like these six monitor crazy setups that would make gamers jealous,


00:05:29.240 --> 00:05:34.840
you know, around them, you know, look at what is going on here. And one of the tools they use a


00:05:34.840 --> 00:05:39.080
a lot, it's a thing called the Bloomberg terminal that lets them look at all kinds of different


00:05:39.080 --> 00:05:46.640
visualizations and real time instant updating things around the stock market and whatnot.


00:05:46.640 --> 00:05:52.760
That is a commercial product project that best I can tell, I mean, there's probably


00:05:52.760 --> 00:05:58.880
discounts or whatever, but it costs around $2,000 per user per month, which is a non


00:05:58.880 --> 00:05:59.880
trivial amount of


00:05:59.880 --> 00:06:04.440
That's a ton cost, right?


00:06:04.440 --> 00:06:09.400
I mean, no wonder we're all getting like little percentages of money sucked out of our 401k


00:06:09.400 --> 00:06:13.360
retirements because all those people are like paying that much money to like manage our


00:06:13.360 --> 00:06:14.360
platform tools.


00:06:14.360 --> 00:06:15.360
Yeah, exactly.


00:06:15.360 --> 00:06:22.820
So I want to introduce you all to Open BB at Open BB.co.


00:06:22.820 --> 00:06:28.540
This is the equivalent thing, but several interesting aspects.


00:06:28.540 --> 00:06:29.860
One, it's open source.


00:06:29.860 --> 00:06:30.860
Two, it's free.


00:06:30.860 --> 00:06:38.020
Not necessarily the most important thing, but it also gives you access to all sorts


00:06:38.020 --> 00:06:44.420
of tools that we know and love from Python, especially on the data science side.


00:06:44.420 --> 00:06:50.620
So this OpenBB thing is this terminal type thing you can install.


00:06:50.620 --> 00:06:54.060
It's really got this sort of weird blend of like CLI.


00:06:54.060 --> 00:06:56.460
I know Will McGugan would be super impressed


00:06:56.460 --> 00:07:00.940
with all of its like terminal UI, its TUI aspects,


00:07:00.940 --> 00:07:03.500
but then it also pops open interactive windows


00:07:03.500 --> 00:07:06.420
that are like graphs and all those kinds of things.


00:07:06.420 --> 00:07:07.880
We'll pull up some examples in a minute.


00:07:07.880 --> 00:07:10.620
So you get access, it's not just that it's free,


00:07:10.620 --> 00:07:14.380
but you get access to all the Python data science stack.


00:07:14.380 --> 00:07:17.040
And it is itself created in Python.


00:07:17.040 --> 00:07:18.680
So pretty cool.


00:07:19.660 --> 00:07:23.040
It's pretty popular, it's got 11,000 GitHub stars.


00:07:23.040 --> 00:07:26.540
And what you do is you show up at this terminal


00:07:26.540 --> 00:07:28.580
and there's even an interactive live version.


00:07:28.580 --> 00:07:31.260
You can have dark mode or not dark mode turned on


00:07:31.260 --> 00:07:32.100
on the website.


00:07:32.100 --> 00:07:33.260
I mean, I love it.


00:07:33.260 --> 00:07:34.660
This is really a polished thing.


00:07:34.660 --> 00:07:37.340
And you can type things like stocks.


00:07:37.340 --> 00:07:39.660
You could spell stocks, you could type stocks.


00:07:39.660 --> 00:07:41.180
And it'll come up with all these ways


00:07:41.180 --> 00:07:42.460
that you could explore them.


00:07:42.460 --> 00:07:44.940
As you could type BA and it'll come and give you


00:07:44.940 --> 00:07:46.720
these things.


00:07:46.720 --> 00:07:47.740
And eventually if you get to the right spot,


00:07:47.740 --> 00:07:49.080
it doesn't happen on the website,


00:07:49.080 --> 00:07:50.980
but it'll pop up these extra windows


00:07:50.980 --> 00:07:55.180
that then like let you explore things with graphs and so on.


00:07:55.180 --> 00:07:57.320
So very, very cool.


00:07:57.320 --> 00:08:02.020
Let's pull up some of the terminal things here


00:08:02.020 --> 00:08:05.240
and look at the features.


00:08:05.240 --> 00:08:06.460
Where are the features?


00:08:06.460 --> 00:08:10.380
So you can install it through its own installer.


00:08:10.380 --> 00:08:12.560
You can install it through Anaconda


00:08:12.560 --> 00:08:15.700
or you can run a Docker image of it to get it to run.


00:08:16.780 --> 00:08:19.600
So it's sort of summary is Python-based integrated


00:08:19.600 --> 00:08:21.660
environment for investing research that


00:08:21.660 --> 00:08:24.520
leverages state-of-the-art data science tools and machine


00:08:24.520 --> 00:08:25.960
learning technology.


00:08:25.960 --> 00:08:29.960
Then navigate through over 500 different views


00:08:29.960 --> 00:08:31.560
and functionality.


00:08:31.560 --> 00:08:33.800
So here's some of the pictures that we can look at.


00:08:33.800 --> 00:08:37.360
If you go to the product terminal and just scroll down,


00:08:37.360 --> 00:08:39.760
you can have these really cool graphs


00:08:39.760 --> 00:08:43.160
of significant events happening along here


00:08:43.160 --> 00:08:45.580
and extra information.


00:08:45.580 --> 00:08:48.740
You can look at basically an Excel view.


00:08:48.740 --> 00:08:52.020
You can look at 3D volatility sections.


00:08:52.020 --> 00:08:55.500
You can look at sentiment analysis here.


00:08:55.500 --> 00:08:59.580
The Bitcoin rainbow chart.


00:08:59.580 --> 00:09:02.500
I don't know how to read rainbow charts,


00:09:02.500 --> 00:09:04.940
but isn't this an amazing view


00:09:04.940 --> 00:09:07.260
for something that runs in the terminal?


00:09:07.260 --> 00:09:08.260
- Yeah, this is great.


00:09:08.260 --> 00:09:09.800
- That's astonishing.


00:09:09.800 --> 00:09:13.380
- Yeah, it really is pretty astonishing.


00:09:13.380 --> 00:09:15.480
And like the things just keep coming.


00:09:15.480 --> 00:09:17.000
So if you just keep scrolling through this,


00:09:17.000 --> 00:09:18.640
there's stuff to wait to like to understand


00:09:18.640 --> 00:09:20.120
how is the economy doing,


00:09:20.120 --> 00:09:23.760
apply AI predictions to like GDP


00:09:23.760 --> 00:09:26.560
and all sorts of wild stuff.


00:09:26.560 --> 00:09:28.800
So it's this really crazy blend of


00:09:28.800 --> 00:09:33.860
terminal 2e plus pop open a bunch of data science


00:09:33.860 --> 00:09:35.400
explorations and then being Python,


00:09:35.400 --> 00:09:38.760
I'm sure you can explore it yourself.


00:09:38.760 --> 00:09:40.160
I looked at the requirements file,


00:09:40.160 --> 00:09:43.320
it's like maxed on requirements in there.


00:09:43.320 --> 00:09:44.400
(laughing)


00:09:44.400 --> 00:09:49.400
but I think it's based on Tornado, as far as I can tell.


00:09:49.400 --> 00:09:51.880
So, and-- - But--


00:09:51.880 --> 00:09:53.280
- Yeah. - Go ahead.


00:09:53.280 --> 00:09:55.640
- Will points out it also uses Rich.


00:09:55.640 --> 00:09:57.960
- Yeah, well, it uses Rich.


00:09:57.960 --> 00:09:59.000
Very cool, thanks. - Very cool.


00:09:59.000 --> 00:10:00.800
And tested with pytest.


00:10:00.800 --> 00:10:02.960
- Oh my goodness, yeah, so that's awesome.


00:10:02.960 --> 00:10:04.880
Anyway, I am super impressed with this.


00:10:04.880 --> 00:10:08.080
It's an open source project based on Python


00:10:08.080 --> 00:10:11.180
for democratizing a lot of these things.


00:10:11.180 --> 00:10:13.400
And if that wasn't enough,


00:10:13.400 --> 00:10:16.220
I think here's one more sort of side story


00:10:16.220 --> 00:10:18.440
that I think is interesting.


00:10:18.440 --> 00:10:20.480
So I'm sure you two have seen,


00:10:20.480 --> 00:10:23.560
you go, it's not as common as it used to be,


00:10:23.560 --> 00:10:26.120
but you go to some open source project or some application


00:10:26.120 --> 00:10:27.640
and says, buy us a coffee,


00:10:27.640 --> 00:10:30.640
help make that next feature happen.


00:10:30.640 --> 00:10:32.280
This one has a different banner at the top


00:10:32.280 --> 00:10:33.480
of instead of coffee.


00:10:33.480 --> 00:10:37.080
It says, we've just landed our $8.5 million seed funding


00:10:37.080 --> 00:10:39.800
round and we're about ready to get started.


00:10:39.800 --> 00:10:41.520
I mean, that's some kind of crushing it


00:10:41.520 --> 00:10:42.800
for open source, isn't it?


00:10:42.800 --> 00:10:44.160
- Yeah, definitely.


00:10:44.160 --> 00:10:45.560
- That's a lot of coffee.


00:10:45.560 --> 00:10:48.340
- That is a, they're gonna be so jittery.


00:10:48.340 --> 00:10:51.080
(laughing)


00:10:51.080 --> 00:10:52.560
- Just like the stock prices.


00:10:52.560 --> 00:10:53.400
- Exactly.


00:10:53.400 --> 00:10:54.840
(laughing)


00:10:54.840 --> 00:10:55.760
Oh no, no, that's just me.


00:10:55.760 --> 00:10:57.320
It's actually very still.


00:10:57.320 --> 00:10:59.440
- Maybe that's why stocks go up and down so much.


00:10:59.440 --> 00:11:01.200
(laughing)


00:11:01.200 --> 00:11:03.320
- Too many traders and too much coffee.


00:11:03.320 --> 00:11:05.080
- That's probably actually true.


00:11:05.080 --> 00:11:07.760
Anyway, I think this is a really cool Python application.


00:11:07.760 --> 00:11:10.460
It looks well done and it looks pretty modern.


00:11:10.460 --> 00:11:12.500
And yeah, it just looks like a neat way


00:11:12.500 --> 00:11:15.180
to apply some data science to investing.


00:11:15.180 --> 00:11:16.440
- Do you have a sense of the learning curve?


00:11:16.440 --> 00:11:18.800
Like, is it mainly pointed at, you know,


00:11:18.800 --> 00:11:20.640
directed at investment professionals


00:11:20.640 --> 00:11:23.280
or is there an on-ramp for casual use?


00:11:23.280 --> 00:11:26.200
- If you look at their description,


00:11:26.200 --> 00:11:28.460
it does seem to be focused on casual,


00:11:28.460 --> 00:11:31.900
sort of a casual use case here.


00:11:31.900 --> 00:11:35.100
Where, let me see, it says a terminal built


00:11:35.100 --> 00:11:36.960
by the community, shape our taste.


00:11:36.960 --> 00:11:39.240
Where did I see this?


00:11:39.240 --> 00:11:41.280
I can't remember where I ran across it,


00:11:41.280 --> 00:11:44.240
but they do talk about sort of like individual investors


00:11:44.240 --> 00:11:49.240
getting access to the tools that the companies,


00:11:49.240 --> 00:11:52.560
the people at the big banks and hedge funds would have.


00:11:52.560 --> 00:11:55.200
So it does sort of seem to be aimed at that.


00:11:55.200 --> 00:11:56.900
My experience is it's pretty easy to use.


00:11:56.900 --> 00:11:59.740
I don't know it's easy to understand the output, right?


00:11:59.740 --> 00:12:03.360
That's more of us investing economics problem though.


00:12:03.360 --> 00:12:05.400
- That's a perpetual problem, yeah.


00:12:05.400 --> 00:12:07.160
- Yeah, indeed.


00:12:07.160 --> 00:12:08.760
All right, well, people can check this out if


00:12:08.760 --> 00:12:10.800
It sounds interesting to them.


00:12:10.800 --> 00:12:12.520
BrightSkin, what you got for us?


00:12:12.520 --> 00:12:17.520
- So my first item is PyProject.toml and pep621


00:12:17.520 --> 00:12:21.320
for project metadata and PyProject.toml


00:12:21.320 --> 00:12:23.340
coming to setup tools.


00:12:23.340 --> 00:12:28.640
So, people in Python land are gonna be pretty well familiar


00:12:28.640 --> 00:12:30.600
with PyProject.toml at this point.


00:12:30.600 --> 00:12:33.760
Originally was the pep517 and pep518,


00:12:33.760 --> 00:12:38.720
that created it and started the basics there


00:12:38.720 --> 00:12:41.220
And then you had black doing project configuration in there.


00:12:41.220 --> 00:12:43.080
And it's kind of been slowly snowballing


00:12:43.080 --> 00:12:45.020
over the past few years.


00:12:45.020 --> 00:12:48.980
And one of the big pushes of PEP 621,


00:12:48.980 --> 00:12:53.980
who's who of Python packaging authors here


00:12:53.980 --> 00:12:56.580
was trying to standardize project metadata


00:12:56.580 --> 00:12:58.620
and also standardize it in a way


00:12:58.620 --> 00:13:03.040
that the metadata could be specified statically


00:13:03.040 --> 00:13:05.580
because that for things to get uploaded to PyPI,


00:13:05.580 --> 00:13:08.460
if you wanna have information about dependencies


00:13:08.460 --> 00:13:10.620
or various other things like that.


00:13:10.620 --> 00:13:12.600
If you have the metadata specified statically,


00:13:12.600 --> 00:13:15.440
it's much easier to get to, you can trust it more.


00:13:15.440 --> 00:13:21.640
And so the PEP, it's defining how to put project metadata


00:13:21.640 --> 00:13:25.480
in pyproject.toml, how to tell the build tools


00:13:25.480 --> 00:13:29.720
like build or flit, what is a static defined


00:13:29.720 --> 00:13:32.360
in declaratively in the metadata and what's dynamic


00:13:32.360 --> 00:13:34.860
that is gonna be provided dynamically later on.


00:13:36.520 --> 00:13:39.320
And a number of tools had implemented


00:13:39.320 --> 00:13:44.320
PyProject Automal support, things like flit, hatch, PDM,


00:13:44.320 --> 00:13:46.400
not poetry yet, though they're discussing it,


00:13:46.400 --> 00:13:49.380
but setup tools was still missing it.


00:13:49.380 --> 00:13:52.120
It's been an issue on the setup tools


00:13:52.120 --> 00:13:53.560
GitHub tracker for a while,


00:13:53.560 --> 00:13:55.320
and with a lot of discussion there


00:13:55.320 --> 00:13:57.520
about what it would take to bring it in.


00:13:57.520 --> 00:14:00.260
One of the big appeals of moving to this


00:14:00.260 --> 00:14:02.320
for setup tools specifically,


00:14:02.320 --> 00:14:06.200
there'd been the move from to try to bring static metadata


00:14:06.200 --> 00:14:10.300
in the setup.cfg, but there's some,


00:14:10.300 --> 00:14:12.400
you know, in that discussion, there's some, you know,


00:14:12.400 --> 00:14:15.400
problems with the INI format because it's not structured.


00:14:15.400 --> 00:14:19.040
It doesn't have good, like, complex data type support.


00:14:19.040 --> 00:14:21.160
- Right, nesting embedded things don't work so well.


00:14:21.160 --> 00:14:23.200
- Yeah, you know, like, there's no,


00:14:23.200 --> 00:14:25.800
INI has no sense of an array.


00:14:25.800 --> 00:14:28.800
So if you had a setup.cfg with an array in it,


00:14:28.800 --> 00:14:31.600
setup tools actually had to take that


00:14:31.600 --> 00:14:34.360
as a string representation of an array


00:14:34.360 --> 00:14:37.680
and then arrayify it by executing it basically,


00:14:37.680 --> 00:14:40.040
instead of the toml where it actually knows it


00:14:40.040 --> 00:14:43.080
as an array in a table.


00:14:43.080 --> 00:14:47.760
But in any event, Anderson Bravel Harry has,


00:14:47.760 --> 00:14:49.000
just within the last month or so,


00:14:49.000 --> 00:14:53.040
I think it was, finished an experimental implementation


00:14:53.040 --> 00:14:57.640
of PEP 621 in setup tools.


00:14:57.640 --> 00:15:01.260
There was a discuss thread seeking feedback


00:15:01.260 --> 00:15:04.240
from the community, try it out, report bugs.


00:15:04.240 --> 00:15:06.680
I tried it on one of my projects and it mostly worked.


00:15:06.680 --> 00:15:09.880
I actually turned up a bug that Anderson fixed super quickly


00:15:09.880 --> 00:15:13.280
where I do dynamic long description,


00:15:13.280 --> 00:15:16.600
which turns into the readme for the PyPI page.


00:15:16.600 --> 00:15:18.640
- Do you mean you read it out of like a text file


00:15:18.640 --> 00:15:19.480
or something?


00:15:19.480 --> 00:15:21.880
- Well, so what I have is I've got documentation links


00:15:21.880 --> 00:15:25.360
in my readme that point into like the main branch.


00:15:25.360 --> 00:15:28.000
But when I do a build to PyPI to do a release,


00:15:28.000 --> 00:15:30.800
I want it to point to an archival version of the docs


00:15:30.800 --> 00:15:32.000
on read the docs.


00:15:32.000 --> 00:15:37.000
And so I dynamically do a replace on the docs branch


00:15:37.000 --> 00:15:38.360
for those links.


00:15:38.360 --> 00:15:42.440
- Well, aren't you a special butterfly?


00:15:42.440 --> 00:15:45.320
- I have complicated needs.


00:15:45.320 --> 00:15:46.380
It's, I'm sorry.


00:15:46.380 --> 00:15:50.040
But, you know, so I, you know, I have that set up


00:15:50.040 --> 00:15:52.200
and it broke and I reported it and he fixed it.


00:15:52.200 --> 00:15:55.720
So as far as I can tell, you know, it's, it may be,


00:15:55.720 --> 00:15:58.320
it may be experimental and it probably will change,


00:15:58.320 --> 00:16:00.480
especially some of the issues around specifying


00:16:00.480 --> 00:16:03.600
dynamic metadata.


00:16:03.600 --> 00:16:07.680
But it's at least working reasonably.


00:16:07.680 --> 00:16:10.080
And so check it out.


00:16:10.080 --> 00:16:13.420
If you're using setup tools, take a look at switching over


00:16:13.420 --> 00:16:14.080
to that.


00:16:14.080 --> 00:16:21.540
He made a tool that can convert setup.cfg to pyproject.toml.


00:16:21.540 --> 00:16:25.360
The project is ini2toml.


00:16:25.360 --> 00:16:26.400
And there's some others.


00:16:26.400 --> 00:16:27.600
You can check the show notes.


00:16:27.600 --> 00:16:29.640
I've got a number of things listed there.


00:16:29.640 --> 00:16:30.360
Yeah, very cool.


00:16:30.360 --> 00:16:34.020
I suspect that INI to TOML might be more generally useful,


00:16:34.020 --> 00:16:35.160
actually.


00:16:35.160 --> 00:16:39.680
I think that's why he titled it that way, instead of setup.cfg


00:16:39.680 --> 00:16:40.920
to TOML or whatever.


00:16:40.920 --> 00:16:41.440
Right.


00:16:41.440 --> 00:16:42.960
So--


00:16:42.960 --> 00:16:43.440
Cool.


00:16:43.440 --> 00:16:44.240
Yeah, this is great.


00:16:44.240 --> 00:16:47.960
More progress on the highproject.toml stuff.


00:16:47.960 --> 00:16:49.320
Definitely.


00:16:49.320 --> 00:16:49.840
Very cool.


00:16:49.840 --> 00:16:52.880
Now, before we move on, let me tell you


00:16:52.880 --> 00:16:54.960
all about our sponsor this week, Datadog.


00:16:54.960 --> 00:16:57.600
They've been supporting the show for a really, really long time.


00:16:57.600 --> 00:16:59.200
Datadog is great.


00:16:59.200 --> 00:17:02.640
They have a real-time monitoring platform that unifies metrics,


00:17:02.640 --> 00:17:05.840
traces, and logs into one integrated system.


00:17:05.840 --> 00:17:11.240
Their APM empowers developers and teams to identify anomalies


00:17:11.240 --> 00:17:14.240
and resolve issues and improve application performance.


00:17:14.240 --> 00:17:18.680
So you can begin collecting stack traces and visualizing them as flame graphs


00:17:18.680 --> 00:17:24.280
and organizing them into profile types such as CPU or I/O types of reports.


00:17:24.280 --> 00:17:27.400
Teams can search for specific profiles


00:17:27.400 --> 00:17:29.260
and correlate them into distributed traces


00:17:29.260 --> 00:17:31.600
and identify slow or underperforming code


00:17:31.600 --> 00:17:33.680
for later analysis and optimization.


00:17:33.680 --> 00:17:35.680
And with Datadog's APM Live Search,


00:17:35.680 --> 00:17:39.440
you can perform searches across the full stream


00:17:39.440 --> 00:17:42.720
of ingest traces of your app over the last 15 minutes.


00:17:42.720 --> 00:17:45.520
Like, I need to figure out what the database is doing


00:17:45.520 --> 00:17:49.100
and the API and the front end and all those things.


00:17:49.100 --> 00:17:52.320
So try them for free with a 14-day free trial


00:17:52.320 --> 00:17:54.800
and Datadog will send you a free t-shirt.


00:17:54.800 --> 00:17:57.240
So just check them out and support the show


00:17:57.240 --> 00:17:59.960
by visiting pythonbytes.fm/datadog,


00:17:59.960 --> 00:18:02.320
or just click the link in your podcast player show notes


00:18:02.320 --> 00:18:03.480
to get started.


00:18:03.480 --> 00:18:04.300
- Nice.


00:18:04.300 --> 00:18:06.760
- Indeed.


00:18:06.760 --> 00:18:08.200
All right.


00:18:08.200 --> 00:18:10.220
Brian, what do you got next?


00:18:10.220 --> 00:18:11.180
- I've got Git.


00:18:11.180 --> 00:18:13.920
So this isn't necessarily Python only related,


00:18:13.920 --> 00:18:16.100
but I use Git a lot,


00:18:16.100 --> 00:18:20.640
and I didn't know you could do autocorrect with Git.


00:18:20.640 --> 00:18:22.680
So this is Wayland Walker,


00:18:22.680 --> 00:18:24.280
and I think he's been,


00:18:25.240 --> 00:18:27.880
submitted other things to us on the show.


00:18:27.880 --> 00:18:29.900
But he wrote this article called configure Git


00:18:29.900 --> 00:18:32.960
to autocorrect your fat fingers,


00:18:32.960 --> 00:18:37.020
or just your sloppy typing.


00:18:37.020 --> 00:18:41.840
So there's this, like, let's say you do a git checkout dev,


00:18:41.840 --> 00:18:46.340
but you spell checkout C-H-E-K-O-U-T and misspell it.


00:18:46.340 --> 00:18:49.420
Well, Git will like tell you that you did it wrong


00:18:49.420 --> 00:18:54.300
and it guesses what you meant and tells you,


00:18:54.300 --> 00:18:56.780
So this is a similar command as this,


00:18:56.780 --> 00:18:59.980
but there's a configuration option that I didn't know about


00:18:59.980 --> 00:19:03.500
called help.autocorrect that you can set a timeout


00:19:03.500 --> 00:19:05.500
and it just automatically runs the command


00:19:05.500 --> 00:19:06.620
it thinks you want it.


00:19:06.620 --> 00:19:10.580
So I'm playing with it


00:19:10.580 --> 00:19:12.560
and so far it hasn't got anything wrong.


00:19:12.560 --> 00:19:15.900
So you can, I've set it to one second also,


00:19:15.900 --> 00:19:17.700
but you can set it to things like 10 seconds


00:19:17.700 --> 00:19:19.420
or I don't know why you want 10.


00:19:19.420 --> 00:19:21.380
- Did you mean RM-RF?


00:19:21.380 --> 00:19:22.220
(laughing)


00:19:22.220 --> 00:19:23.060
Applying.


00:19:23.060 --> 00:19:23.880
(laughing)


00:19:23.880 --> 00:19:24.940
- Just get commands.


00:19:24.940 --> 00:19:26.280
It's not everything.


00:19:26.280 --> 00:19:28.660
- Formatting hard drive.


00:19:28.660 --> 00:19:30.260
- Get reset --hard.


00:19:30.260 --> 00:19:32.960
- Oh yeah.


00:19:32.960 --> 00:19:34.940
That one actually would be kind of destructive.


00:19:34.940 --> 00:19:36.380
- That would be bad.


00:19:36.380 --> 00:19:40.340
- But I, so I realized that I added this to my workflow


00:19:40.340 --> 00:19:42.360
but I realized that I hadn't really talked


00:19:42.360 --> 00:19:44.180
about my workflow at all on my blog.


00:19:44.180 --> 00:19:47.540
So I went ahead and just showed the things


00:19:47.540 --> 00:19:49.780
that I do normally for a quick change.


00:19:49.780 --> 00:19:52.660
I usually check out main, do a poll,


00:19:52.660 --> 00:19:56.500
then create a branch with checkout-b.


00:19:56.500 --> 00:19:58.580
And then I commit,


00:19:58.580 --> 00:20:02.040
I usually do commit-a-m with a message.


00:20:02.040 --> 00:20:06.900
I wanna talk about that one a little bit, the -a,


00:20:06.900 --> 00:20:11.900
and then also push because I want that to be faster.


00:20:11.900 --> 00:20:15.540
So the -a, what that does is,


00:20:15.540 --> 00:20:19.540
that push, anyway, I got these backwards.


00:20:19.540 --> 00:20:21.940
Anyway, the dash A will just say,


00:20:21.940 --> 00:20:26.040
instead of having to stage a file or add them.


00:20:26.040 --> 00:20:28.620
So normally you have to add your changes


00:20:28.620 --> 00:20:30.580
and then you commit them.


00:20:30.580 --> 00:20:32.300
But I just wanna,


00:20:32.300 --> 00:20:35.140
usually just wanna commit everything that I've changed


00:20:35.140 --> 00:20:37.340
or deleted also, if I delete something,


00:20:37.340 --> 00:20:38.460
I want that to change.


00:20:38.460 --> 00:20:40.020
So the dash A does that.


00:20:40.020 --> 00:20:41.500
I just learned about that recently.


00:20:41.500 --> 00:20:42.340
- Oh, interesting.


00:20:42.340 --> 00:20:44.940
So you can basically skip the git add dot.


00:20:44.940 --> 00:20:45.780
- Yeah.


00:20:45.780 --> 00:20:46.600
- Or something equivalent to that,


00:20:46.600 --> 00:20:47.700
or the git add filenames.


00:20:47.700 --> 00:20:49.740
- Right, and they add dot is a little dangerous


00:20:49.740 --> 00:20:52.540
because it'll add everything, the unstaged stuff too.


00:20:52.540 --> 00:20:55.420
So if you have temporary files or just play,


00:20:55.420 --> 00:20:57.820
you know, you get a test file or a goofy file


00:20:57.820 --> 00:20:59.180
that you're just playing out with.


00:20:59.180 --> 00:21:00.460
I don't wanna add that stuff.


00:21:00.460 --> 00:21:04.440
I intentionally add things that I want,


00:21:04.440 --> 00:21:06.540
or I mean, add, what's the other one?


00:21:06.540 --> 00:21:09.460
You know, uncommitted things,


00:21:09.460 --> 00:21:10.740
I don't usually wanna add that.


00:21:10.740 --> 00:21:14.380
So the dash A is nice that it doesn't do that.


00:21:14.380 --> 00:21:16.580
And then the last thing that I did


00:21:16.580 --> 00:21:20.100
was the global, there's another configuration change


00:21:20.100 --> 00:21:25.100
of global push.default current.


00:21:25.100 --> 00:21:29.500
So weird, but what this does is that the current,


00:21:29.500 --> 00:21:30.940
there's a bunch of values for that.


00:21:30.940 --> 00:21:32.580
I'm gonna have a link to the other show notes


00:21:32.580 --> 00:21:36.260
and the other, the documentation


00:21:36.260 --> 00:21:38.860
about all the different values in the show notes.


00:21:38.860 --> 00:21:41.220
But I like current because what that says


00:21:41.220 --> 00:21:44.140
is the branch that I'm using, branch name I'm using now,


00:21:44.140 --> 00:21:46.620
just make that the one on online.


00:21:46.620 --> 00:21:50.140
So if you do or upstream, if you don't do that, it says,


00:21:50.140 --> 00:21:52.700
oh, there's no upstream named this branch


00:21:52.700 --> 00:21:54.140
and you have to do this.


00:21:54.140 --> 00:21:55.060
I'm like, okay.


00:21:55.060 --> 00:21:56.660
And you can do it with push.


00:21:56.660 --> 00:22:00.140
You can do a dash U in push to make it automatically do that


00:22:00.140 --> 00:22:01.420
but it's just for both.


00:22:01.420 --> 00:22:03.020
And I always wanted to do that.


00:22:03.020 --> 00:22:08.020
So anyway, that's my new Git workflow for simple stuff.


00:22:08.020 --> 00:22:09.020
- I love it.


00:22:09.020 --> 00:22:10.540
It's very nice.


00:22:10.540 --> 00:22:13.100
- Yeah, I really like that current.


00:22:13.100 --> 00:22:16.460
having to do all that extra typing, even with auto complete is just annoying.


00:22:16.460 --> 00:22:24.700
Yeah. So Brian S, it sounds like you use get a lot. What's your view of source control from a


00:22:24.700 --> 00:22:30.300
chemical engineer perspective, like in that ecosystem and that environment,


00:22:30.300 --> 00:22:33.340
how do people view this kind of stuff? They don't.


00:22:33.340 --> 00:22:41.740
Basically, I mean, you know, anyone who's who's familiar with it, with the development,


00:22:41.740 --> 00:22:44.620
much development probably uses it some.


00:22:44.620 --> 00:22:46.620
Actually, there's a 3D physics modeling,


00:22:46.620 --> 00:22:48.060
multi-physics modeling tool, CalmSol,


00:22:48.060 --> 00:22:52.260
that just added a source control-like feature into it.


00:22:52.260 --> 00:22:54.700
So it's starting, you know, the data reproducibility


00:22:54.700 --> 00:22:56.380
and the history tracking has started


00:22:56.380 --> 00:22:58.180
to become more of a thing.


00:22:58.180 --> 00:23:03.020
But yeah, it's very often the, you know,


00:23:03.020 --> 00:23:06.220
V2, V3, 2020--


00:23:06.220 --> 00:23:08.140
- V3, V3. - Final.


00:23:08.140 --> 00:23:10.180
- Final, final, final.


00:23:10.180 --> 00:23:20.340
Yeah. So I mean, I have blog posts churning about strategies for version control on data


00:23:20.340 --> 00:23:26.660
analysis code because of the reproducibility and needing to track environments precisely


00:23:26.660 --> 00:23:33.940
for reproducibility at a point in the past and tagging commits for, just like, oh, this,


00:23:34.740 --> 00:23:36.900
Basically, every time I run the code,


00:23:36.900 --> 00:23:38.620
I need to know what the state of it was.


00:23:38.620 --> 00:23:42.980
And the tooling is not that great for doing that.


00:23:42.980 --> 00:23:44.220
At least I haven't found much.


00:23:44.220 --> 00:23:47.780
So it's still evolving, I think.


00:23:47.780 --> 00:23:48.500
Indeed.


00:23:48.500 --> 00:23:49.820
OK, cool.


00:23:49.820 --> 00:23:51.780
Alvaro points out at work that they


00:23:51.780 --> 00:23:55.260
have a project with 6,000 lines in an INI final


00:23:55.260 --> 00:23:57.620
that INI to TOML might be just what they need.


00:23:57.620 --> 00:24:01.620
That sounds like a lot.


00:24:01.620 --> 00:24:03.180
You definitely have to--


00:24:03.180 --> 00:24:05.940
you have to proof them afterwards because you know,


00:24:05.940 --> 00:24:08.620
there may be some stuff that doesn't translate cleanly,


00:24:08.620 --> 00:24:09.460
but yeah.


00:24:09.460 --> 00:24:11.940
- Yeah, we need a TML to INI and you can round trip it


00:24:11.940 --> 00:24:13.500
and it's the same, then you're good to go.


00:24:13.500 --> 00:24:16.380
(both laughing)


00:24:16.380 --> 00:24:18.840
- Yeah, I don't know if that'll work.


00:24:18.840 --> 00:24:19.680
(both laughing)


00:24:19.680 --> 00:24:20.740
- Keep your sanity, yeah.


00:24:20.740 --> 00:24:22.940
All right, this next one's a quick one for me,


00:24:22.940 --> 00:24:24.200
but it'll be useful for people


00:24:24.200 --> 00:24:27.480
who are working with JSON web tokens.


00:24:27.480 --> 00:24:31.180
So JSON web tokens are a thing that you can exchange


00:24:31.180 --> 00:24:36.180
with maybe a distributed login system.


00:24:36.180 --> 00:24:38.420
So instead of using like an API key


00:24:38.420 --> 00:24:40.080
that you just pass around all the time,


00:24:40.080 --> 00:24:43.460
you could say, I'm going to either share a certificate


00:24:43.460 --> 00:24:45.420
or somehow log into some other system


00:24:45.420 --> 00:24:47.420
and I'll get back this token that I can share on


00:24:47.420 --> 00:24:50.460
to other places to communicate who I am,


00:24:50.460 --> 00:24:53.260
communicate what roles or permissions


00:24:53.260 --> 00:24:55.000
I should be granted and so on.


00:24:55.000 --> 00:24:56.660
So if you work in that world,


00:24:56.660 --> 00:25:01.460
you work in a world of dealing with cryptographic signatures


00:25:01.460 --> 00:25:03.820
and picky algorithms and stuff like that.


00:25:03.820 --> 00:25:07.500
So I just wanted to give a shout out to JWT.io.


00:25:07.500 --> 00:25:11.180
So this is a place that allows you to decode,


00:25:11.180 --> 00:25:14.780
verify and debug JWTs, which is pretty cool.


00:25:14.780 --> 00:25:17.620
So you come down here and what you do is you put in


00:25:17.620 --> 00:25:21.740
some encoded token and you say which algorithm


00:25:21.740 --> 00:25:24.260
of the encryption algorithms are using.


00:25:24.260 --> 00:25:29.180
And then what pops out is the separated JSON result


00:25:29.180 --> 00:25:30.180
that says, here's the header.


00:25:30.180 --> 00:25:32.620
It says what algorithm and what type it is,


00:25:32.620 --> 00:25:34.580
what version of JWT and so on.


00:25:34.580 --> 00:25:37.220
And then what the actual data was,


00:25:37.220 --> 00:25:40.860
like this person is a subscriber, their name is John Doe.


00:25:40.860 --> 00:25:43.140
Shouldn't scroll it 'cause it doesn't seem to work.


00:25:43.140 --> 00:25:45.300
And then here's like the signature


00:25:45.300 --> 00:25:47.540
and whether or not the signature was verified


00:25:47.540 --> 00:25:48.580
and stuff like that.


00:25:48.580 --> 00:25:50.980
So I think that's pretty cool.


00:25:50.980 --> 00:25:55.080
you can hit share JWT and it'll just copy that


00:25:55.080 --> 00:25:56.900
when you get sitting along.


00:25:56.900 --> 00:25:58.780
But anyway, I think if you're working with the stuff,


00:25:58.780 --> 00:26:00.860
this might be pretty handy.


00:26:00.860 --> 00:26:04.100
And while you're at it, there's somewhere in here,


00:26:04.100 --> 00:26:07.780
the libraries, you can say, see the JWT libraries.


00:26:07.780 --> 00:26:10.620
And let me make that smaller-ish.


00:26:10.620 --> 00:26:13.500
So the way it shows, it's a little bit weird.


00:26:13.500 --> 00:26:16.500
It has the technology and then a whole bunch of checklists.


00:26:16.500 --> 00:26:17.780
And if you way go down to the bottom,


00:26:17.780 --> 00:26:19.620
you can see the actual package name.


00:26:19.620 --> 00:26:22.600
So like there's a bunch of .NET ones here.


00:26:22.600 --> 00:26:23.440
Don't care about those,


00:26:23.440 --> 00:26:25.680
but the Python ones are down here


00:26:25.680 --> 00:26:28.400
and says who's created them, right?


00:26:28.400 --> 00:26:31.980
Like CMO Source or Michael Davis.


00:26:31.980 --> 00:26:36.980
And then this one's called Python Jose JW Crypto or PyJW.


00:26:36.980 --> 00:26:39.960
And it shows you which algorithms are supported


00:26:39.960 --> 00:26:42.120
and how it works and so on.


00:26:42.120 --> 00:26:43.480
So I think this is pretty cool


00:26:43.480 --> 00:26:45.640
if you're gonna work with these things.


00:26:45.640 --> 00:26:47.560
What do you all think?


00:26:47.560 --> 00:26:49.520
- I don't have a lot of expertise with authentication


00:26:49.520 --> 00:26:51.320
and tokens of this sort.


00:26:51.320 --> 00:26:53.240
How is this different from something like Macaroons


00:26:53.240 --> 00:26:56.600
where it's more like a advanced cookie?


00:26:56.600 --> 00:26:58.740
Is this separate from the browser or?


00:26:58.740 --> 00:27:04.620
- This is done in several ways, I think.


00:27:04.620 --> 00:27:09.080
So you can go like to a federated identity provider.


00:27:09.080 --> 00:27:11.520
So something like Auth0


00:27:11.520 --> 00:27:15.880
or Microsoft Azure Active Directory or something like that.


00:27:15.880 --> 00:27:18.080
Or you can have your own identity provider


00:27:19.120 --> 00:27:22.080
from like identity servers, like one of these implementations


00:27:22.080 --> 00:27:25.240
and basically it allows you to do single sign-on


00:27:25.240 --> 00:27:28.680
and federated sign-on across different platforms


00:27:28.680 --> 00:27:31.840
without just taking and using straight cookies.


00:27:31.840 --> 00:27:35.920
So it works both for APIs and for other types of app.


00:27:35.920 --> 00:27:37.880
You can do it within an app or with an API.


00:27:37.880 --> 00:27:41.440
So like, if I call an API, if I log in with me


00:27:41.440 --> 00:27:44.800
and I call an API and I wanna communicate


00:27:44.800 --> 00:27:49.800
onto my identity, onto the APIs that API is calling.


00:27:49.800 --> 00:27:52.920
It's like those kinds of sort of more complicated scenarios.


00:27:52.920 --> 00:27:53.800
Yeah.


00:27:53.800 --> 00:27:54.640
- Gotcha.


00:27:54.640 --> 00:27:55.600
- Yeah.


00:27:55.600 --> 00:27:56.600
Yeah.


00:27:56.600 --> 00:27:59.700
Anyway, JWT.io, check it out.


00:27:59.700 --> 00:28:02.880
What do you got, Brian's again?


00:28:02.880 --> 00:28:04.880
- Okay, for my second item,


00:28:04.880 --> 00:28:07.440
I'm gonna appreciate the opportunity,


00:28:07.440 --> 00:28:08.680
Michael and Brian Okken,


00:28:08.680 --> 00:28:11.700
to do a little bit of self-promotion.


00:28:14.240 --> 00:28:17.760
I have a new project I'm calling Jupyter TempVars.


00:28:17.760 --> 00:28:20.280
So one of the really powerful things about,


00:28:20.280 --> 00:28:22.040
you know, Jupyter notebooks are great.


00:28:22.040 --> 00:28:23.200
You can do a whole lot with them.


00:28:23.200 --> 00:28:24.760
They're obviously being used everywhere,


00:28:24.760 --> 00:28:27.080
data science, scientific analysis.


00:28:27.080 --> 00:28:30.160
And one of the features of at least the Python kernel


00:28:30.160 --> 00:28:32.680
of Jupyter is that you have a global namespace


00:28:32.680 --> 00:28:33.720
that you work in.


00:28:33.720 --> 00:28:36.660
And this really adds to the power of it in some ways


00:28:36.660 --> 00:28:39.300
because everything you do in the notebook flows


00:28:39.300 --> 00:28:40.200
from one cell to another.


00:28:40.200 --> 00:28:41.520
You don't have to worry about shuttling things


00:28:41.520 --> 00:28:43.120
back and forth.


00:28:43.120 --> 00:28:46.280
But as has come up countless times here and elsewhere,


00:28:46.280 --> 00:28:48.480
you have namespace contamination problems


00:28:48.480 --> 00:28:52.720
where you accidentally assign something in one cell


00:28:52.720 --> 00:28:53.780
and then you fuck on yourself


00:28:53.780 --> 00:28:57.760
because either you use something and have a typo


00:28:57.760 --> 00:28:59.680
and accidentally use something from another cell


00:28:59.680 --> 00:29:01.560
or something's lingering on


00:29:01.560 --> 00:29:03.460
and you have the same variable name in multiple cells


00:29:03.460 --> 00:29:06.280
and all of a sudden your analysis behaves funny


00:29:06.280 --> 00:29:09.000
or it's not reproducible or you close down for the day


00:29:09.000 --> 00:29:11.520
and start back up and the whole worksheet blows up.


00:29:12.600 --> 00:29:17.200
And so what I've put together is a notebook extension for Jupyter.


00:29:17.200 --> 00:29:19.800
It's based upon another library of mine, tempvars,


00:29:19.800 --> 00:29:22.440
which I need to freshen a bit.


00:29:22.440 --> 00:29:26.400
But this is a front-end extension for Jupyter.


00:29:26.400 --> 00:29:32.340
And so what the underlying library does is you import from tempvars,


00:29:32.340 --> 00:29:35.500
you import the capital tempvars context manager.


00:29:35.500 --> 00:29:39.100
Then I'll just define a variable here.


00:29:39.100 --> 00:29:44.940
And then in this cell, I've got, as a context manager, tempvars.


00:29:44.940 --> 00:29:47.140
And I declare to it, all right, anything--


00:29:47.140 --> 00:29:49.060
this syntax says anything that starts with T underscore


00:29:49.060 --> 00:29:51.180
is going to be treated as a temporary variable.


00:29:51.180 --> 00:29:54.300
And so when I run this, the first line just checks to see


00:29:54.300 --> 00:29:57.220
if T underscore A is in the namespace,


00:29:57.220 --> 00:30:02.260
and it's not because it's inside the temporary variables context.


00:30:02.260 --> 00:30:05.660
Then I assign it, and indeed, it assigns.


00:30:05.660 --> 00:30:07.380
And then when I pop out the back end,


00:30:07.380 --> 00:30:10.300
the previous value five is now restored to it.


00:30:10.300 --> 00:30:13.440
So what this does is it makes sure that you don't have


00:30:13.440 --> 00:30:16.400
contamination coming into the cell and anything you do in


00:30:16.400 --> 00:30:20.420
here is reverted to the prior state out the back end.


00:30:20.420 --> 00:30:21.460
>> That's cool.


00:30:21.460 --> 00:30:23.480
>> Yeah. So that's using the underlying library.


00:30:23.480 --> 00:30:25.360
But what I did is like, "Okay, fine,


00:30:25.360 --> 00:30:26.920
it works but you have to have this whole thing


00:30:26.920 --> 00:30:28.800
that you type out and it's cumbersome."


00:30:28.800 --> 00:30:34.060
So what the Jupyter extension does is it lets you,


00:30:34.060 --> 00:30:39.060
you can turn on this toolbar for tags for each cell.


00:30:39.060 --> 00:30:41.300
And then if you define, go away.


00:30:41.300 --> 00:30:43.980
Then if you define a tag with this syntax,


00:30:43.980 --> 00:30:45.340
you can also do a temp vars end,


00:30:45.340 --> 00:30:47.660
but here temp vars start T underscore.


00:30:47.660 --> 00:30:50.980
Now this variable will automatically be treated


00:30:50.980 --> 00:30:52.740
as a temporary variable.


00:30:52.740 --> 00:30:55.540
It's no longer in the namespace when you execute the cell.


00:30:55.540 --> 00:30:56.660
And what it's doing behind the scenes


00:30:56.660 --> 00:30:58.840
is it's actually taking the code,


00:30:58.840 --> 00:31:01.980
patching the execute functionality for the cell


00:31:01.980 --> 00:31:04.880
and wrapping it in a TempVars context manager


00:31:04.880 --> 00:31:07.740
behind the scenes, so that anything you use in here,


00:31:07.740 --> 00:31:10.220
T_ is a temporary variable.


00:31:10.220 --> 00:31:13.260
You don't have to worry about it getting contamination


00:31:13.260 --> 00:31:14.940
from the rest of the namespace.


00:31:14.940 --> 00:31:17.140
And then just like the other, it--


00:31:17.140 --> 00:31:18.460
- So there, yeah.


00:31:18.460 --> 00:31:19.340
- Yeah.


00:31:19.340 --> 00:31:23.900
So it's brand new, 0.1 is out on PyPI.


00:31:23.900 --> 00:31:28.300
The readme is in order to satisfy the audience here,


00:31:28.300 --> 00:31:30.140
I have animated GIFs galore.


00:31:30.140 --> 00:31:34.220
- Those screenshots on a UI tool, I love it.


00:31:34.220 --> 00:31:36.560
- Yeah, and animated to boot.


00:31:36.560 --> 00:31:40.020
So, README has the user's instructions.


00:31:40.020 --> 00:31:42.740
It's on PyPI, just a pip install Jupyter temp files.


00:31:42.740 --> 00:31:45.500
And then I have a shortcut script


00:31:45.500 --> 00:31:46.900
to actually install the extension


00:31:46.900 --> 00:31:49.060
into your Jupyter environment.


00:31:49.060 --> 00:31:51.620
I have a number of features that could be added to it,


00:31:51.620 --> 00:31:53.500
different things that the underlying library


00:31:53.500 --> 00:31:55.700
could have added to it.


00:31:55.700 --> 00:31:58.540
But I'd really love it if anybody who is intrigued


00:31:58.540 --> 00:32:00.260
would try it out, find and report bugs,


00:32:00.260 --> 00:32:03.140
suggest features that you want.


00:32:03.140 --> 00:32:06.100
Because it's a small thing, but it can be a big problem.


00:32:06.100 --> 00:32:09.340
And if this could be at least a partial or substantial solution


00:32:09.340 --> 00:32:12.580
for people, that would be awesome.


00:32:12.580 --> 00:32:13.300
Yeah, nice work.


00:32:13.300 --> 00:32:14.460
This looks great.


00:32:14.460 --> 00:32:15.340
Those are good.


00:32:15.340 --> 00:32:18.020
Yeah, the problem of having variables


00:32:18.020 --> 00:32:22.620
shared across those things when you didn't intend them to be,


00:32:22.620 --> 00:32:24.140
so tricky in so many ways.


00:32:24.140 --> 00:32:28.500
I mean, Jupyter cells are like go-to statements


00:32:28.500 --> 00:32:30.780
with no traceability, right?


00:32:30.780 --> 00:32:32.500
'Cause you could run them down,


00:32:32.500 --> 00:32:34.540
then you could go back and run the one in the middle again,


00:32:34.540 --> 00:32:35.820
and then you could go run another,


00:32:35.820 --> 00:32:37.500
like you need to have,


00:32:37.500 --> 00:32:39.380
except for just a little in and out numbering,


00:32:39.380 --> 00:32:41.620
like you have no idea the order they ran.


00:32:41.620 --> 00:32:44.480
- Yeah, notebook hygiene is really tricky, and yeah.


00:32:44.480 --> 00:32:47.500
- Brian, I'm not gonna feel like I cut you off,


00:32:47.500 --> 00:32:48.380
we can say something.


00:32:48.380 --> 00:32:51.620
- Oh, just, he commented that to satisfy us,


00:32:51.620 --> 00:32:54.100
he's got, or the entire Python community


00:32:54.100 --> 00:32:55.700
is gonna be animated, yes.


00:32:55.700 --> 00:33:00.380
But to be fair, it's not just technical books and read-me's.


00:33:00.380 --> 00:33:04.100
I don't use cookbooks that don't have pictures either.


00:33:04.100 --> 00:33:04.820
So--


00:33:04.820 --> 00:33:06.100
Yeah, that sounds good.


00:33:06.100 --> 00:33:09.380
I do read novels that don't have pictures,


00:33:09.380 --> 00:33:10.660
so it's not everything.


00:33:10.660 --> 00:33:13.020
I thought the point there was the pictures in your head.


00:33:13.020 --> 00:33:15.060
I really hate the graphical novels that don't have


00:33:15.060 --> 00:33:17.460
pictures.


00:33:17.460 --> 00:33:18.460
Those are the worst.


00:33:18.460 --> 00:33:19.820
They're the worst.


00:33:19.820 --> 00:33:21.140
All right, real-time follow-up.


00:33:21.140 --> 00:33:24.540
Brandon Brainer, former co-host here,


00:33:24.540 --> 00:33:28.540
says, this is talking about going back to YJWT


00:33:28.540 --> 00:33:29.780
over something like cookies.


00:33:29.780 --> 00:33:32.700
So imagine having something like auto zero,


00:33:32.700 --> 00:33:34.220
when you log, maybe off zero,


00:33:34.220 --> 00:33:37.380
when you log in, it gives you back this JWT,


00:33:37.380 --> 00:33:40.100
which has a timeout, the front end has this,


00:33:40.100 --> 00:33:42.220
it can send it to your API,


00:33:42.220 --> 00:33:44.020
and then also it has the signature


00:33:44.020 --> 00:33:46.740
that verifies it wasn't tampered with.


00:33:46.740 --> 00:33:48.540
And you can verify the sender


00:33:48.540 --> 00:33:50.980
because you can decrypt it and stuff like that.


00:33:50.980 --> 00:33:52.500
- Okay, better chain of custody.


00:33:52.500 --> 00:33:53.340
Okay.


00:33:53.340 --> 00:33:56.340
- All that tricky cryptography stuff.


00:33:56.340 --> 00:34:00.940
Speaking of other things, extra things,


00:34:00.940 --> 00:34:03.440
you guys got some extras we should cover?


00:34:03.440 --> 00:34:05.820
- I have a few actually, some quick ones.


00:34:05.820 --> 00:34:06.780
- All right, bring it on.


00:34:06.780 --> 00:34:11.240
- So we've got GitHub issues are finally live.


00:34:11.240 --> 00:34:15.820
So there are Python issues are now on GitHub.


00:34:15.820 --> 00:34:17.140
- We didn't jinx it this time.


00:34:17.140 --> 00:34:19.060
- It really is there.


00:34:19.060 --> 00:34:20.840
So enough said.


00:34:20.840 --> 00:34:23.800
I was, you know, I've used lorem ipsum before.


00:34:23.800 --> 00:34:26.280
I think everybody doing front end stuff has,


00:34:26.280 --> 00:34:28.120
but I didn't know there's a,


00:34:28.120 --> 00:34:30.680
there's a cool page like loremipsum.com


00:34:30.680 --> 00:34:33.240
that has some, a translation.


00:34:33.240 --> 00:34:35.680
So you can read what it means,


00:34:35.680 --> 00:34:40.680
at least a 1500s, 1914 translation.


00:34:40.680 --> 00:34:44.000
So it's sort of an interesting read.


00:34:44.000 --> 00:34:44.940
I won't get into it here,


00:34:44.940 --> 00:34:47.380
but it's worth a read if you're curious.


00:34:47.380 --> 00:34:50.600
And then one of the things we do sometimes at the end


00:34:50.600 --> 00:34:59.240
funny stuff. And one of the things we've covered is various O'Reilly covers. So I found this


00:34:59.240 --> 00:35:04.160
Dev2 O'Reilly cover generator. I didn't know where it was. Somebody had it.


00:35:04.160 --> 00:35:05.160
Oh, nice.


00:35:05.160 --> 00:35:10.880
And you can just make up your own. So I made one up, passed it around last night. So it's


00:35:10.880 --> 00:35:13.120
kind of a fun thing.


00:35:13.120 --> 00:35:16.920
Yeah. I pulled that from the show notes and passed it on to my friends and they have run


00:35:16.920 --> 00:35:17.920
with it. They're delighted.


00:35:17.920 --> 00:35:18.920
[LAUGHTER]


00:35:18.920 --> 00:35:21.760
>> You're going to test with no asserts.


00:35:21.760 --> 00:35:22.840
At least CI is happy.


00:35:22.840 --> 00:35:24.840
[LAUGHTER]


00:35:24.840 --> 00:35:25.560
>> So anyway.


00:35:25.560 --> 00:35:26.760
>> This is awesome.


00:35:26.760 --> 00:35:27.280
>> How about you?


00:35:27.280 --> 00:35:30.400
Got any extras?


00:35:30.400 --> 00:35:31.960
>> I have a few.


00:35:31.960 --> 00:35:36.200
Now, your mention made me add a third one, or another one,


00:35:36.200 --> 00:35:37.760
rather.


00:35:37.760 --> 00:35:38.720
Let's go here.


00:35:38.720 --> 00:35:41.200
So hipster ipsum.


00:35:41.200 --> 00:35:43.040
[LAUGHTER]


00:35:43.040 --> 00:35:47.320
If you just need a little more pizzazz in that lorem ipsum,


00:35:47.320 --> 00:35:49.360
You don't want people asking questions.


00:35:49.360 --> 00:35:53.280
This is a hipsteripsum@hipsum.co.


00:35:53.280 --> 00:35:54.800
This is a generator.


00:35:54.800 --> 00:35:55.920
You can give it your flavor.


00:35:55.920 --> 00:35:57.720
So you can go over here and say like,


00:35:57.720 --> 00:36:00.780
how many paragraphs?


00:36:00.780 --> 00:36:02.280
We only need two paragraphs.


00:36:02.280 --> 00:36:05.600
And hipster neat, or you can do it with a shot of Latin.


00:36:05.600 --> 00:36:07.200
- Nice.


00:36:07.200 --> 00:36:08.960
- And it starts out with,


00:36:08.960 --> 00:36:11.800
I'm baby, gentrified, tumbler, butcher,


00:36:11.800 --> 00:36:13.680
cronut, succulents,


00:36:13.680 --> 00:36:14.920
poor local subway,


00:36:14.920 --> 00:36:16.440
tile food truck, letterpress,


00:36:16.440 --> 00:36:17.680
- Tote bag, tofu.


00:36:17.680 --> 00:36:22.400
- Doesn't flow quite the same as the Latin, but it works.


00:36:22.400 --> 00:36:23.240
- Yeah, exactly.


00:36:23.240 --> 00:36:24.360
You got the fashion X and all that.


00:36:24.360 --> 00:36:26.720
So anyway, that one's kind of fun.


00:36:26.720 --> 00:36:28.640
More seriously, quick shout out,


00:36:28.640 --> 00:36:32.920
worked with Christos Meskis


00:36:32.920 --> 00:36:37.120
from the Microsoft Identity Team, speaking of JWTs.


00:36:37.120 --> 00:36:38.600
And he and I just put together a course,


00:36:38.600 --> 00:36:40.640
Secure APIs with FastAPI


00:36:40.640 --> 00:36:42.560
in the Microsoft Identity Platform.


00:36:42.560 --> 00:36:46.000
So people can check that out if they wanna do JWT


00:36:46.000 --> 00:36:49.320
and other types of federated identity with FastAPI.


00:36:49.320 --> 00:36:52.320
That's a fun course we just launched yesterday.


00:36:52.320 --> 00:36:53.960
- Nice, cool.


00:36:53.960 --> 00:36:54.800
- Yeah, thanks.


00:36:54.800 --> 00:36:56.240
And then a quick shout out,


00:36:56.240 --> 00:36:57.960
Seth sent over this thing called


00:36:57.960 --> 00:37:00.980
Python Virtual ENV for Windows Sorta-ish.


00:37:00.980 --> 00:37:06.240
And it's this idea to bring some of the


00:37:06.240 --> 00:37:09.560
pyenv virtual environment features to Windows.


00:37:09.560 --> 00:37:11.360
I haven't really played with this,


00:37:11.360 --> 00:37:14.680
but trying, I guess some of the features there


00:37:14.680 --> 00:37:16.680
for the virtual environments don't work on Windows,


00:37:16.680 --> 00:37:21.640
but his plugin script does, you can check that out,


00:37:21.640 --> 00:37:24.140
which I think will be helpful for some people,


00:37:24.140 --> 00:37:27.580
for the Windows people.


00:37:27.580 --> 00:37:29.580
That's it for my items. Brian Skin, do you have anything


00:37:29.580 --> 00:37:30.900
you want to share as well?


00:37:30.900 --> 00:37:32.900
Yep, I've got a few quick ones.


00:37:32.900 --> 00:37:36.100
First of all, as many probably know,


00:37:36.100 --> 00:37:40.060
Eva stepped down, Jalaska stepped down


00:37:40.060 --> 00:37:42.060
as the Executive Director of the PSF,


00:37:42.780 --> 00:37:44.780
I believe it was at the end of last year.


00:37:44.780 --> 00:37:47.100
PSF has found their new executive director,


00:37:47.100 --> 00:37:48.780
Deb Nicholson, so woo!


00:37:48.780 --> 00:37:51.720
Congratulations to all there.


00:37:51.720 --> 00:37:56.020
PSF-- - And congratulations.


00:37:56.020 --> 00:38:00.560
- So, and more generally, PSF has been hiring lately.


00:38:00.560 --> 00:38:02.880
Last year, there was the packaging project manager,


00:38:02.880 --> 00:38:04.940
Shamika Mohanan, there's the--


00:38:04.940 --> 00:38:06.340
- And the development residents.


00:38:06.340 --> 00:38:07.900
- Absolutely.


00:38:07.900 --> 00:38:10.200
They also, there was a posting for an infrastructure


00:38:10.200 --> 00:38:12.500
engineer to assist with the facilities


00:38:12.500 --> 00:38:16.220
that the link now 404s, so maybe they've made their hire.


00:38:16.220 --> 00:38:19.740
I don't know, but the posting was there and now it's not.


00:38:19.740 --> 00:38:22.140
And then actually in the steering council notes


00:38:22.140 --> 00:38:25.860
released for March, there is beginnings of discussion


00:38:25.860 --> 00:38:27.940
about hiring a second developer in residence,


00:38:27.940 --> 00:38:30.500
which would be terrific.


00:38:30.500 --> 00:38:31.340
So.


00:38:31.340 --> 00:38:34.380
- Yeah, it seems like it's been a big success.


00:38:34.380 --> 00:38:36.140
So getting someone to help Lukasz out


00:38:36.140 --> 00:38:37.340
would be really great.


00:38:37.340 --> 00:38:38.940
- Definitely.


00:38:38.940 --> 00:38:39.860
Two more quick things.


00:38:39.860 --> 00:38:43.340
one, Pi Ohio, the regional Ohio conference, the call for


00:38:43.340 --> 00:38:45.740
proposals is open, it's going to be a fully virtual conference


00:38:45.740 --> 00:38:50.500
again this year. So anybody who is interested, submit, submit,


00:38:50.500 --> 00:38:50.940
submit.


00:38:50.940 --> 00:38:52.900
Nice.


00:38:52.900 --> 00:38:56.620
And then and then one interesting tidbit relevant to


00:38:56.620 --> 00:38:59.100
you, we have to talk about Pydantic at least once I think,


00:38:59.100 --> 00:39:03.980
right, along with Anthony Shaw and, and Will McGugan. This was


00:39:03.980 --> 00:39:07.020
a couple of days ago, Samuel Colvin of Pydantic fame posted


00:39:07.020 --> 00:39:13.860
this somewhat cryptic tweet here showing over a tenfold increase


00:39:13.860 --> 00:39:17.820
in speed for some sort of Pydantic features here.


00:39:17.820 --> 00:39:22.340
So I don't believe this has actually dropped yet.


00:39:22.340 --> 00:39:25.780
This is all I know, but this looks pretty exciting.


00:39:25.780 --> 00:39:29.140
>> A magical Pydantic core is coming.


00:39:29.140 --> 00:39:30.540
>> Yes.


00:39:30.540 --> 00:39:33.700
>> Cool. I have no idea what it is, but very exciting.


00:39:33.700 --> 00:39:35.980
>> But I want one.


00:39:35.980 --> 00:39:38.300
(laughing)


00:39:38.300 --> 00:39:39.840
- Maybe it's the pedantic pony.


00:39:39.840 --> 00:39:41.940
- The pedantic unicorn.


00:39:41.940 --> 00:39:42.780
No, that's great.


00:39:42.780 --> 00:39:44.560
(laughing)


00:39:44.560 --> 00:39:49.560
All right, I got no more extras, but I have some jokes.


00:39:49.560 --> 00:39:50.540
- Yay.


00:39:50.540 --> 00:39:51.360
- Bring 'em.


00:39:51.360 --> 00:39:53.220
- All right, I think this first one


00:39:53.220 --> 00:39:55.460
might be from you, Brian Skin, is that right?


00:39:55.460 --> 00:39:56.300
- Yeah, I can't--


00:39:56.300 --> 00:39:58.460
- You wanna tell us this joke here?


00:39:58.460 --> 00:40:02.860
- Yeah, so it's a riff off of the various elements


00:40:02.860 --> 00:40:05.340
of a business enterprise trying to bring a product


00:40:05.340 --> 00:40:07.980
to a customer that's what they actually want.


00:40:07.980 --> 00:40:09.380
You know, with the tree and the swing


00:40:09.380 --> 00:40:12.180
and the armchair swing and the swing with no ropes


00:40:12.180 --> 00:40:15.700
and that this one is more cat directed


00:40:15.700 --> 00:40:18.100
and the left panel says product features


00:40:18.100 --> 00:40:21.260
and it shows this really nice multi-level cat tower


00:40:21.260 --> 00:40:23.980
with beds and scratching posts and, you know,


00:40:23.980 --> 00:40:26.940
very attractive and on the right it says user needs


00:40:26.940 --> 00:40:30.940
and it has a cat peeking up out of a cardboard box.


00:40:30.940 --> 00:40:31.780
- Exactly.


00:40:31.780 --> 00:40:35.300
Slightly over-designed would you say?


00:40:35.300 --> 00:40:36.260
- Just a bit.


00:40:36.260 --> 00:40:38.340
And I think there was somebody responded to that.


00:40:38.340 --> 00:40:39.800
There was a tweet lower down saying,


00:40:39.800 --> 00:40:41.060
"This is exactly my life.


00:40:41.060 --> 00:40:44.000
I have an untouched cat tree in the corner


00:40:44.000 --> 00:40:45.780
and all the cat sits in is the box."


00:40:45.780 --> 00:40:47.040
So.


00:40:47.040 --> 00:40:48.300
- This is also true for children.


00:40:48.300 --> 00:40:50.360
A lot of times the box is the best part.


00:40:50.360 --> 00:40:51.480
- Definitely.


00:40:51.480 --> 00:40:53.760
- All right, I brought two more for us


00:40:53.760 --> 00:40:55.160
just because they're both, they're all short


00:40:55.160 --> 00:40:57.040
and I thought this would be fun.


00:40:57.040 --> 00:40:59.920
So here's one that says,


00:40:59.920 --> 00:41:03.260
"Junior developer, how did you find the bug so fast?"


00:41:03.260 --> 00:41:04.480
And it has the senior developer


00:41:04.480 --> 00:41:08.640
is a sort of lion meme. I was there when it was written.


00:41:08.640 --> 00:41:12.720
Lion witch in the wardrobe reference there, I think.


00:41:12.720 --> 00:41:18.480
I think so. All right. And then this one really, I really appreciate this one. So there's two


00:41:18.480 --> 00:41:26.560
sort of time lapse Google search pages with text overlaid on it. And it says 831


00:41:26.560 --> 00:41:30.560
C++ hello world 833 alternatives to see


00:41:30.560 --> 00:41:42.080
And of course is complete with the top std colon colon c out less than less than hello world less than less than standard out


00:41:42.080 --> 00:41:44.160
Colon end out, you know


00:41:44.160 --> 00:41:46.560
the formal C++ style like


00:41:46.560 --> 00:41:49.840
However


00:41:49.840 --> 00:41:53.780
Yeah. Hello C++. Hello world alternatives to C++


00:41:55.360 --> 00:41:57.160
I'll just leave it with that, you guys.


00:41:57.160 --> 00:41:59.560
- I had one semester of C++ in college


00:41:59.560 --> 00:42:02.000
and I don't miss the compiler errors at all.


00:42:02.000 --> 00:42:05.440
- No, yeah, C++ is some wild stuff.


00:42:05.440 --> 00:42:06.640
I used to work in it,


00:42:06.640 --> 00:42:08.880
I did a couple of years of professional C++


00:42:08.880 --> 00:42:12.840
and it was okay, but a lot of craziness.


00:42:12.840 --> 00:42:15.800
- Yeah, you don't have to use the crazy parts though.


00:42:15.800 --> 00:42:18.720
So, at least in the embedded world,


00:42:18.720 --> 00:42:21.040
we use, it's C++,


00:42:21.040 --> 00:42:24.240
but we just selectively use the cool features.


00:42:24.240 --> 00:42:30.560
mostly it looks like C. Yeah, I think C++ is getting a big update as well, isn't it? I think


00:42:30.560 --> 00:42:37.600
there's there's regular updates. There's so many new things coming on. It was fairly stagnant for


00:42:37.600 --> 00:42:42.640
like decades. Yeah. And then, but in the last 10 years, there's been a lot of new changes.


00:42:42.640 --> 00:42:48.000
I feel like I've read people griping that they're making C++ too much like Python or something,


00:42:48.000 --> 00:42:51.680
adding. I don't know exactly what that means, but, you know,


00:42:52.640 --> 00:42:54.560
We propose taking away the semi-colons.


00:42:54.560 --> 00:42:55.060
What?


00:42:55.060 --> 00:42:57.600
[LAUGHTER]


00:42:57.600 --> 00:42:58.160
Too much.


00:42:58.160 --> 00:42:59.000
Too much.


00:42:59.000 --> 00:43:02.240
I can definitely get rid of the curly brackets.


00:43:02.240 --> 00:43:02.960
Yeah, yeah, yeah.


00:43:02.960 --> 00:43:04.340
There's a lot of parentheses when


00:43:04.340 --> 00:43:06.720
you don't really need them.


00:43:06.720 --> 00:43:09.360
All right, well, Brian Okken, thank you as always.


00:43:09.360 --> 00:43:11.480
And Brian Skinn, thanks for being here.


00:43:11.480 --> 00:43:11.980
Thank you.


00:43:11.980 --> 00:43:12.480
Thanks.


00:43:12.480 --> 00:43:14.160
Thanks for having me.


00:43:14.160 --> 00:43:14.760
You bet.


00:43:14.760 --> 00:43:15.480
Bye, everyone.


00:43:15.480 --> 00:43:16.240
Bye.

