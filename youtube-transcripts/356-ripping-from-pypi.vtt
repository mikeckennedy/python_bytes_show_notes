WEBVTT

00:00:00.000 --> 00:00:02.000
>> Hey, all. Hey, Brian.


00:00:02.000 --> 00:00:04.000
>> Hey.


00:00:04.000 --> 00:00:06.000
>> Hey, it's good to be here with everyone.


00:00:06.000 --> 00:00:10.000
Thanks for those of you here on the live stream or watching later.


00:00:10.000 --> 00:00:12.000
And, Brian, should we just kick it off?


00:00:12.000 --> 00:00:14.000
>> Yeah, let's kick it off. Oh, yeah.


00:00:14.000 --> 00:00:16.000
>> All right.


00:00:16.000 --> 00:00:18.000
Hello, and welcome to Python Bytes,


00:00:18.000 --> 00:00:21.000
where we deliver Python news and headlines directly to your earbuds.


00:00:21.000 --> 00:00:26.000
This is episode 356, recorded October 10th, 2023.


00:00:26.000 --> 00:00:28.000
I'm Michael Kennedy.


00:00:28.000 --> 00:00:30.000
>> And I'm Brian Okken.


00:00:30.000 --> 00:00:32.000
>> And this episode is brought to you by us,


00:00:32.000 --> 00:00:34.000
courses over at Talk Python Training,


00:00:34.000 --> 00:00:36.000
the complete pytest course from Brian,


00:00:36.000 --> 00:00:39.000
Patreon supporters, and find us over on FostedOn.


00:00:39.000 --> 00:00:42.000
That's probably the best way to chat with us these days.


00:00:42.000 --> 00:00:44.000
And also be part of the live show,


00:00:44.000 --> 00:00:48.000
pythonbytes.fm/live, usually Tuesdays at 11 Pacific Time.


00:00:48.000 --> 00:00:52.000
And you can also see all the old versions there as well.


00:00:52.000 --> 00:00:55.000
So, Brian, what are you going to start us with today?


00:00:55.000 --> 00:00:58.000
>> Well, I thought I would start with a --


00:00:58.000 --> 00:01:03.000
it's kind of going to have a theme of getting information from FostedOn,


00:01:03.000 --> 00:01:05.000
people letting us know.


00:01:05.000 --> 00:01:11.000
So I saw today a post by the PsychoPG group,


00:01:11.000 --> 00:01:15.000
so Psycho Postgres,


00:01:15.000 --> 00:01:17.000
and the post says, "It feels weird,


00:01:17.000 --> 00:01:21.000
but it's time to stop considering PsychoPG 2, the present,


00:01:21.000 --> 00:01:24.000
and PsychoPG 3, the future.


00:01:24.000 --> 00:01:28.000
We've entered the time where PsychoPG 3 is the present


00:01:28.000 --> 00:01:31.000
and 2 is the respectable past.


00:01:31.000 --> 00:01:36.000
Updated the feature page and a few other resources on the website to reflect this."


00:01:36.000 --> 00:01:38.000
So I thought I would check it out.


00:01:38.000 --> 00:01:40.000
>> Awesome. That's big news.


00:01:40.000 --> 00:01:45.000
Postgres is clearly the biggest database that people use in the Python space,


00:01:45.000 --> 00:01:47.000
according to the survey we talked about recently.


00:01:47.000 --> 00:01:49.000
So this is relevant, right?


00:01:49.000 --> 00:01:51.000
>> Yeah, and this is a great library.


00:01:51.000 --> 00:01:53.000
I've been using the version 2 for a long time,


00:01:53.000 --> 00:01:57.000
and I guess I haven't been paying attention to the 3,


00:01:57.000 --> 00:01:59.000
but it's been out for a while.


00:01:59.000 --> 00:02:04.000
So the 3 page basically talks about,


00:02:04.000 --> 00:02:07.000
"It's a new implementation of the most used, reliable,


00:02:07.000 --> 00:02:12.000
and feature-rich Postgres adapter for Python."


00:02:12.000 --> 00:02:14.000
And there are some differences, though.


00:02:14.000 --> 00:02:18.000
So apparently most of 2 was written in C,


00:02:18.000 --> 00:02:23.000
but 3 is written in a combination.


00:02:23.000 --> 00:02:27.000
So a lot of it's in Python, and some of the speedups are in C.


00:02:27.000 --> 00:02:32.000
And so the big announcement really is that there are no--


00:02:32.000 --> 00:02:36.000
so we're going to link to both the 3 page and the features page,


00:02:36.000 --> 00:02:40.000
and the features page has a nice comparison of 2 versus 3.


00:02:40.000 --> 00:02:47.000
So really, the recommendation is they're still going to maintain 2,


00:02:47.000 --> 00:02:49.000
but you should maybe think about--


00:02:49.000 --> 00:02:51.000
mostly think about 3 for new projects.


00:02:51.000 --> 00:02:55.000
So if you already have an existing project that's running 2,


00:02:55.000 --> 00:02:57.000
go ahead and leave it running with that.


00:02:57.000 --> 00:02:59.000
I couldn't find where they're doing it--


00:02:59.000 --> 00:03:01.000
when or if or where they're doing--


00:03:01.000 --> 00:03:03.000
announced an end of life.


00:03:03.000 --> 00:03:06.000
So I don't think that's even planned at this point


00:03:06.000 --> 00:03:08.000
for end of life for 2, eventually probably.


00:03:08.000 --> 00:03:12.000
But so 2 has been around since 2006.


00:03:12.000 --> 00:03:15.000
3 started in first release in 2021,


00:03:15.000 --> 00:03:18.000
but they've got a whole bunch of cool things in here.


00:03:18.000 --> 00:03:21.000
So some of the things I thought were pretty cool


00:03:21.000 --> 00:03:26.000
was we've got native async I/O support.


00:03:26.000 --> 00:03:28.000
That looks pretty nice.


00:03:28.000 --> 00:03:30.000
Native support for more Python types,


00:03:30.000 --> 00:03:33.000
such as enums and Postgres types.


00:03:33.000 --> 00:03:37.000
So Postgres-- one of the cool Postgres types was multi-range,


00:03:37.000 --> 00:03:38.000
so that's supported now.


00:03:38.000 --> 00:03:40.000
That's pretty nice.


00:03:40.000 --> 00:03:44.000
And then I don't know what parameter bindings are, actually,


00:03:44.000 --> 00:03:48.000
but apparently 2 has client-side parameter bindings,


00:03:48.000 --> 00:03:52.000
and 3 defaults to server-side parameter bindings.


00:03:52.000 --> 00:03:56.000
But you can still do client-side if you want to.


00:03:56.000 --> 00:04:00.000
So lots of fun stuff in here--


00:04:00.000 --> 00:04:05.000
advanced connection pool, static typing support.


00:04:05.000 --> 00:04:11.000
Yeah, so I say why not try 3 and only go back to 2


00:04:11.000 --> 00:04:13.000
if you really need to.


00:04:13.000 --> 00:04:14.000
This is super exciting.


00:04:14.000 --> 00:04:16.000
Those are a lot of great features.


00:04:16.000 --> 00:04:19.000
I think the async support was previously done


00:04:19.000 --> 00:04:23.000
through a separate library, and now it's just part of it.


00:04:23.000 --> 00:04:26.000
That's pretty cool.


00:04:26.000 --> 00:04:27.000
What is the present?


00:04:27.000 --> 00:04:28.000
What is the past?


00:04:28.000 --> 00:04:29.000
What is the future?


00:04:29.000 --> 00:04:31.000
We'll come back to that in our extras.


00:04:31.000 --> 00:04:32.000
We'll have some fun there.


00:04:32.000 --> 00:04:37.000
And then also our audience is awesome.


00:04:37.000 --> 00:04:40.000
Mike Sheetletter says, "Hey, I migrated PyPI


00:04:40.000 --> 00:04:43.000
from PsychoPG 2 to 3 in June.


00:04:43.000 --> 00:04:46.000
It was not too hard, but it took some time to do safely."


00:04:46.000 --> 00:04:51.000
So hey, when you pip install things or PyPI lookup things,


00:04:51.000 --> 00:04:52.000
it's already using this.


00:04:52.000 --> 00:04:53.000
Awesome.


00:04:53.000 --> 00:04:54.000
Thanks.


00:04:54.000 --> 00:04:55.000
Yeah.


00:04:55.000 --> 00:04:56.000
Oh, that's cool.


00:04:56.000 --> 00:04:57.000
Nice.


00:04:57.000 --> 00:04:59.000
Indeed, indeed.


00:04:59.000 --> 00:05:01.000
All right, shall we convert some data?


00:05:01.000 --> 00:05:02.000
That's what I got next.


00:05:02.000 --> 00:05:03.000
Sure.


00:05:03.000 --> 00:05:04.000
Let's talk about it.


00:05:04.000 --> 00:05:06.000
So we all know about Pydantic, right?


00:05:06.000 --> 00:05:07.000
And Pydantic is cool.


00:05:07.000 --> 00:05:12.000
So Pydantic lets us create classes that derive from some


00:05:12.000 --> 00:05:14.000
Pydantic base type, base model.


00:05:14.000 --> 00:05:19.000
And it will do conversions and parsing of JSON and so on.


00:05:19.000 --> 00:05:23.000
But maybe you know about data classes, right?


00:05:23.000 --> 00:05:24.000
These are built in.


00:05:24.000 --> 00:05:26.000
They're not anything separate.


00:05:26.000 --> 00:05:28.000
They're part of Python itself.


00:05:28.000 --> 00:05:31.000
And so being able to use them is pretty cool.


00:05:31.000 --> 00:05:36.000
And Raymond Peck commented on one of our YouTube videos


00:05:36.000 --> 00:05:40.000
and said, "Hey, I use this thing called Dacite."


00:05:40.000 --> 00:05:43.000
Hopefully that's the right pronunciation, Dacite.


00:05:43.000 --> 00:05:47.000
And the idea is it allows you to create Python data classes


00:05:47.000 --> 00:05:49.000
in a similar way, right?


00:05:49.000 --> 00:05:52.000
So simple creation of data classes from dictionaries.


00:05:52.000 --> 00:05:54.000
So APIs and other things.


00:05:54.000 --> 00:05:58.000
And you just create data classes as you normally would,


00:05:58.000 --> 00:06:08.000
data classes just are classes with global or static level field type, right?


00:06:08.000 --> 00:06:11.000
Like class user, name, colon, string, age, colon, int, and so on.


00:06:11.000 --> 00:06:13.000
Then you just put the data class wrapper on it, right?


00:06:13.000 --> 00:06:19.000
And it gives it a bunch of nice things like hashability, comparability,


00:06:19.000 --> 00:06:21.000
et cetera, right, constructors.


00:06:21.000 --> 00:06:26.000
But if you've got a dictionary that has sub-objects


00:06:26.000 --> 00:06:30.000
that themselves should be data classes and maybe a list of other things


00:06:30.000 --> 00:06:33.000
that should be data classes, actually turning that JSON


00:06:33.000 --> 00:06:39.000
into one of these more complicated versions is a hassle, right?


00:06:39.000 --> 00:06:43.000
You also might need to do data conversion as well, right,


00:06:43.000 --> 00:06:45.000
to make sure that the types match.


00:06:45.000 --> 00:06:48.000
So that's what you can use this for, and it's pretty neat.


00:06:48.000 --> 00:06:52.000
You can just say from dict, dacite.fromdict,


00:06:52.000 --> 00:06:55.000
and you say what data class it's going to go to


00:06:55.000 --> 00:06:58.000
and what the dictionary is, and it's like a little factory method,


00:06:58.000 --> 00:07:00.000
out pops one of these objects.


00:07:00.000 --> 00:07:01.000
Cool, right?


00:07:01.000 --> 00:07:04.000
Yeah, that's pretty cool.


00:07:04.000 --> 00:07:06.000
Yeah, and let's see.


00:07:06.000 --> 00:07:11.000
Features include nested structures like I described,


00:07:11.000 --> 00:07:14.000
basic type checking, optional fields, union.


00:07:14.000 --> 00:07:16.000
So if you say it could be an int or a string,


00:07:16.000 --> 00:07:21.000
it'll check that it's one of those two but not a float or something.


00:07:21.000 --> 00:07:23.000
Forward references, collections, and interestingly,


00:07:23.000 --> 00:07:25.000
custom type hooks.


00:07:25.000 --> 00:07:29.000
So, for example, you can say any time that you're going to take a string,


00:07:29.000 --> 00:07:35.000
actually call string.lower.strip on it if it's not null, right,


00:07:35.000 --> 00:07:37.000
if it's not none, things like that, right?


00:07:37.000 --> 00:07:41.000
So you can actually get into the parsing side a little bit if you need to.


00:07:41.000 --> 00:07:43.000
So that's pretty neat.


00:07:43.000 --> 00:07:44.000
What else have we got here?


00:07:44.000 --> 00:07:45.000
Let me scroll down.


00:07:45.000 --> 00:07:49.000
It talks, of course, about all the things I said.


00:07:49.000 --> 00:07:51.000
Yeah, I think that's probably it.


00:07:51.000 --> 00:07:56.000
I guess one thing it's worth pointing out, it says right in the docs they say,


00:07:56.000 --> 00:08:00.000
"It's important to mention that it's not a data validation library."


00:08:00.000 --> 00:08:05.000
Now, when I first read that, I'm like, "But there's all these types," right?


00:08:05.000 --> 00:08:09.000
Is it supposed to find out when I say the thing takes a string and an int


00:08:09.000 --> 00:08:12.000
and a bool for its three fields, like it will actually do that?


00:08:12.000 --> 00:08:14.000
It does that, but you can't say, like,


00:08:14.000 --> 00:08:18.000
"The string must be this regular expression and this many characters,


00:08:18.000 --> 00:08:23.000
and the int has to be positive," and those types of things it doesn't do, right?


00:08:23.000 --> 00:08:29.000
So it's just dictionary to object, possibly complex data class object,


00:08:29.000 --> 00:08:33.000
but with type validation, and that's about it.


00:08:33.000 --> 00:08:36.000
But still, I think that's super, super useful.


00:08:36.000 --> 00:08:39.000
It's a kind of partway validator.


00:08:39.000 --> 00:08:44.000
Yeah, more like a proper parser without the validation itself.


00:08:44.000 --> 00:08:45.000
Yeah.


00:08:45.000 --> 00:08:46.000
Yeah.


00:08:46.000 --> 00:08:47.000
Indeed.


00:08:47.000 --> 00:08:49.000
So anyway, that's what I got for people.


00:08:49.000 --> 00:08:51.000
It was news to me, so check it out.


00:08:51.000 --> 00:08:53.000
I think that's pretty neat.


00:08:53.000 --> 00:08:54.000
Mm-hmm.


00:08:54.000 --> 00:09:00.000
So I am going to continue on with a topic of, I guess,


00:09:00.000 --> 00:09:06.000
the ever-rustification of Python projects,


00:09:06.000 --> 00:09:10.000
and this one is one that we use every day, Pip.


00:09:10.000 --> 00:09:18.000
So this came to us from Owen, Owen Lamont, I think, Owen Lamont.


00:09:18.000 --> 00:09:19.000
Thanks, Owen.


00:09:19.000 --> 00:09:22.000
So he said, "Hey, you guys might be interested in this.


00:09:22.000 --> 00:09:32.000
It's under the project group prefix dev is rip, rip for rust, Pip,


00:09:32.000 --> 00:09:36.000
written in rust," and I was ready to go try it.


00:09:36.000 --> 00:09:39.000
It's not ready to try yet, but it's still pretty exciting.


00:09:39.000 --> 00:09:46.000
So kind of the headline, "Fast, bare bones, pip implementation in rust,"


00:09:46.000 --> 00:09:50.000
and it's not just an installer, though, so it has got --


00:09:50.000 --> 00:09:52.000
what does it have so far?


00:09:52.000 --> 00:09:57.000
It's got -- you can download and aggressively cache PyPI metadata,


00:09:57.000 --> 00:10:02.000
resolve PyPI packages using a project called Resolvo,


00:10:02.000 --> 00:10:08.000
which is kind of a Rust thing, and then still on the planned list


00:10:08.000 --> 00:10:11.000
is actually installing the files.


00:10:11.000 --> 00:10:17.000
So I'm just chuckling because, yeah, I just jumped the gun.


00:10:17.000 --> 00:10:21.000
But this is new, so it's fine that it's published early.


00:10:21.000 --> 00:10:24.000
So first commits look like about two weeks ago,


00:10:24.000 --> 00:10:27.000
so I'm pretty excited about this.


00:10:27.000 --> 00:10:33.000
I think it would be fun to try it out and look at possibly different resolvers


00:10:33.000 --> 00:10:37.000
and how they handled it versus normal Pip.


00:10:37.000 --> 00:10:39.000
So kind of neat.


00:10:39.000 --> 00:10:43.000
Yeah, when I saw this too, I was pretty excited.


00:10:43.000 --> 00:10:45.000
So thanks, Owen, for sending this in.


00:10:45.000 --> 00:10:47.000
Yeah, it's cool.


00:10:47.000 --> 00:10:51.000
Mike says, "Let it rip." I love it.


00:10:51.000 --> 00:10:56.000
Yeah, so it looks like maybe we should swap these last two topics,


00:10:56.000 --> 00:10:58.000
but I don't know.


00:10:58.000 --> 00:11:02.000
Let's go with your next topic.


00:11:02.000 --> 00:11:06.000
Well, I do think that this one would have been pretty good for you to cover,


00:11:06.000 --> 00:11:11.000
but too bad, I'm already on it, so here we go.


00:11:11.000 --> 00:11:15.000
I guess the only stronger tie-in to me is it's in response to a Talk Python episode.


00:11:15.000 --> 00:11:18.000
So this one comes to us from Marwin, and thank you, Marwin,


00:11:18.000 --> 00:11:21.000
for sending it in and writing this article called


00:11:21.000 --> 00:11:24.000
"How Not to Footgun Yourself When Writing Tests,


00:11:24.000 --> 00:11:26.000
a Showcase of Flaky Tests."


00:11:26.000 --> 00:11:30.000
It says, "I was writing this article after listening to Talk Python


00:11:30.000 --> 00:11:35.000
with Gregory Kampfhammer and Owen Perry talking about flaky tests."


00:11:35.000 --> 00:11:37.000
So that was the subject of that.


00:11:37.000 --> 00:11:42.000
Basically talked about all of their experience here, which is cool,


00:11:42.000 --> 00:11:46.000
like a definition and really a lot of examples of flaky tests, I thought.


00:11:46.000 --> 00:11:49.000
I mean, Brian, did you get to check any of these out?


00:11:49.000 --> 00:11:51.000
I haven't looked at this yet, no.


00:11:51.000 --> 00:11:53.000
Well, we'll do it live, okay?


00:11:53.000 --> 00:12:00.000
So the first one is really about concurrency and said,


00:12:00.000 --> 00:12:02.000
"Well, look, I've got a bunch of tests.


00:12:02.000 --> 00:12:05.000
Maybe I could speed them up by using threading and run a bunch of them.


00:12:05.000 --> 00:12:07.000
That would be fun."


00:12:07.000 --> 00:12:12.000
However, there's a real simple example of, like, "Hey, I've got an account,


00:12:12.000 --> 00:12:15.000
and I can transfer money from one account to the other."


00:12:15.000 --> 00:12:17.000
So first account, that withdraw this amount,


00:12:17.000 --> 00:12:20.000
and then second account, deposit that amount, right?


00:12:20.000 --> 00:12:22.000
And how could that go wrong?


00:12:22.000 --> 00:12:26.000
So do a bunch of those, and then, "Hey, if we want to make those faster,


00:12:26.000 --> 00:12:29.000
let's run them in some threads," right?


00:12:29.000 --> 00:12:31.000
Rather than using, say, one of the pytest plugins more properly, right?


00:12:31.000 --> 00:12:36.000
This is more to highlight, like, what might go wrong, you know?


00:12:36.000 --> 00:12:42.000
And it turns out that we have the gill, and I think Marwan's right.


00:12:42.000 --> 00:12:48.000
I think people do think that the GIL will just kind of save you from concurrency,


00:12:48.000 --> 00:12:50.000
right, because only one thing can run at a time.


00:12:50.000 --> 00:12:52.000
So how are you going to have a problem?


00:12:52.000 --> 00:12:54.000
Well, it's one thing.


00:12:54.000 --> 00:12:57.000
It's one kind of bytecode at a time.


00:12:57.000 --> 00:12:59.000
Exactly, one Python bytecode.


00:12:59.000 --> 00:13:00.000
But here's the thing.


00:13:00.000 --> 00:13:07.000
If your program ever enters into a temporarily invalid state, ever,


00:13:07.000 --> 00:13:12.000
you may need some kind of concurrency locks or something.


00:13:12.000 --> 00:13:17.000
And I think my reading of Python stuff, I don't see this very often,


00:13:17.000 --> 00:13:22.000
and I think actually a lot of people should be doing more locks, honestly.


00:13:22.000 --> 00:13:26.000
So even in this example, I withdraw some money, and now for just a moment,


00:13:26.000 --> 00:13:32.000
the program is in a temporarily invalid state until it's deposited into the other account, right?


00:13:32.000 --> 00:13:37.000
So this moment, like, if the GIL says, "Okay, you ran enough.


00:13:37.000 --> 00:13:45.000
We're going to switch to the other one," then somebody tries to--the other one reads that state,


00:13:45.000 --> 00:13:47.000
that's going to be trouble, right?


00:13:47.000 --> 00:13:52.000
So they were talking about, well, how do you actually check this?


00:13:52.000 --> 00:13:56.000
And here's something I actually didn't even know.


00:13:56.000 --> 00:14:01.000
Look, you can actually make that switching back and forth more aggressive.


00:14:01.000 --> 00:14:07.000
You can control that switching that the GIL does on how much Python on one thread it'll do


00:14:07.000 --> 00:14:12.000
before it switches to another by getting the switch interval.


00:14:12.000 --> 00:14:15.000
And here they set it to one-tenth of a millisecond.


00:14:15.000 --> 00:14:18.000
And then they do a bunch of work, and then they put it back.


00:14:18.000 --> 00:14:19.000
And that's pretty interesting.


00:14:19.000 --> 00:14:21.000
Did you know you could do that?


00:14:21.000 --> 00:14:22.000
I didn't.


00:14:22.000 --> 00:14:23.000
This is pretty cool.


00:14:23.000 --> 00:14:24.000
I know.


00:14:24.000 --> 00:14:27.000
This might be worth covering the article right here, just that, you know?


00:14:27.000 --> 00:14:29.000
Yeah.


00:14:29.000 --> 00:14:32.000
Good for testing these race conditions.


00:14:32.000 --> 00:14:33.000
Yes, exactly.


00:14:33.000 --> 00:14:35.000
Like, make it worse.


00:14:35.000 --> 00:14:37.000
And also run it on more cores, potentially.


00:14:37.000 --> 00:14:38.000
I don't know.


00:14:38.000 --> 00:14:40.000
Probably that doesn't too much matter.


00:14:40.000 --> 00:14:44.000
Okay, so to avoid boilerplate, you can reach out to the pytest Repeat plugin.


00:14:44.000 --> 00:14:46.000
Weren't you just talking about this?


00:14:46.000 --> 00:14:47.000
I know you're doing some stuff with it.


00:14:47.000 --> 00:14:50.000
Yeah, I'm one of the maintainers on it now.


00:14:50.000 --> 00:14:51.000
There's my picture.


00:14:51.000 --> 00:14:56.000
Yeah, I feel like you actually just mentioned it.


00:14:56.000 --> 00:14:59.000
Maybe it was the Git article or something.


00:14:59.000 --> 00:15:01.000
But anyway, recently I thought you just talked about this.


00:15:01.000 --> 00:15:02.000
Yeah, last week.


00:15:02.000 --> 00:15:03.000
Yeah, exactly.


00:15:03.000 --> 00:15:08.000
Also worth pointing out, a similar and more straightforward plugin possibly for this job


00:15:08.000 --> 00:15:12.000
is pytest Flake Finder, which is meant to find flaky tests.


00:15:12.000 --> 00:15:14.000
Oh, yeah.


00:15:14.000 --> 00:15:17.000
Okay, so let's just hang out for here.


00:15:17.000 --> 00:15:23.000
One of the differences they're saying is that you can repeat your test multiple times with repeat,


00:15:23.000 --> 00:15:26.000
or Flake Finder, you can repeat your whole suite.


00:15:26.000 --> 00:15:31.000
That's one of the things I need to change for repeat, because you can do the same thing with repeat.


00:15:31.000 --> 00:15:33.000
You can run the whole suite.


00:15:33.000 --> 00:15:40.000
It's just kind of hidden in two lines of the readme, and it needs to be more bolded that you can change the scope


00:15:40.000 --> 00:15:41.000
and repeat the whole thing.


00:15:41.000 --> 00:15:44.000
Oh, nice.


00:15:44.000 --> 00:15:46.000
All right, randomness.


00:15:46.000 --> 00:15:50.000
For example, algorithms that are non-deterministic, like heuristic ones.


00:15:50.000 --> 00:15:52.000
That's pretty interesting.


00:15:52.000 --> 00:15:57.000
They do a distance algorithm or something that's heuristic.


00:15:57.000 --> 00:16:08.000
They say NP-close, which they're testing on NP-close, whereas NumPy, like are these vectors close?


00:16:08.000 --> 00:16:15.000
It says basically fix this by actually computing the tolerance, and they use a little statistics.


00:16:15.000 --> 00:16:22.000
Probably more statistics than I know, but let's say three standard deviations away, or something like that.


00:16:22.000 --> 00:16:23.000
It's interesting.


00:16:23.000 --> 00:16:27.000
Obviously, floating-point arithmetic is always trouble.


00:16:27.000 --> 00:16:29.000
Loss of precision is always trouble.


00:16:29.000 --> 00:16:35.000
But one they talk about here that's interesting is using integers.


00:16:35.000 --> 00:16:44.000
Integers in Python are arbitrarily large, which I think probably complicates C interoperability every now and then.


00:16:44.000 --> 00:16:47.000
Otherwise, it's a good thing generally.


00:16:47.000 --> 00:16:58.000
However, if you're doing NumPy, NumPy has C backing for a lot of its types, like int32 and so on.


00:16:58.000 --> 00:17:07.000
You could end up with, if you specify a particular data type in there, when you create your array, data type is NP int32,


00:17:07.000 --> 00:17:15.000
then you do have to care about the 2.14 billion limit.


00:17:15.000 --> 00:17:18.000
You probably know that all the time from C, right?


00:17:18.000 --> 00:17:24.000
You've got to worry about variable sizes and signed, unsigned, shorts, and whatever.


00:17:24.000 --> 00:17:29.000
Yeah, and be careful about the order of operations so you don't overflow in the middle of a set of operations.


00:17:29.000 --> 00:17:31.000
Yeah.


00:17:31.000 --> 00:17:32.000
Let's see.


00:17:32.000 --> 00:17:37.000
There are some interesting things about buzzing your data, like sending in a bunch of crazy data,


00:17:37.000 --> 00:17:41.000
or even using hypothesis to try to find edge cases.


00:17:41.000 --> 00:17:44.000
Timeouts for external systems, be super explicit about those.


00:17:44.000 --> 00:17:47.000
There's a bunch of cool examples in here.


00:17:47.000 --> 00:17:50.000
This is a really properly long article here.


00:17:50.000 --> 00:17:51.000
Nice.


00:17:51.000 --> 00:17:54.000
I think it really highlights a lot of good examples.


00:17:54.000 --> 00:17:57.000
Follow up to that podcast episode, but just good for testing as well.


00:17:57.000 --> 00:18:01.000
Yeah, I can't wait to read that more closely and listen to that episode.


00:18:01.000 --> 00:18:04.000
I have to admit I haven't listened to it yet.


00:18:04.000 --> 00:18:06.000
Yeah, it's a good one.


00:18:06.000 --> 00:18:11.000
Blaze out in the audience wonders if we have to reinvent these corner cases for Rust.


00:18:11.000 --> 00:18:14.000
I imagine we probably do, Blaze. Good point.


00:18:14.000 --> 00:18:16.000
Yeah.


00:18:16.000 --> 00:18:17.000
Possibly.


00:18:17.000 --> 00:18:19.000
How extra are you feeling, Brian?


00:18:19.000 --> 00:18:21.000
I'm feeling pretty extra.


00:18:21.000 --> 00:18:24.000
Actually, myself, not too much.


00:18:24.000 --> 00:18:33.000
I've been actually doing a lot of personal projects, so I haven't been doing a lot of work projects to announce.


00:18:33.000 --> 00:18:35.000
However, those are wrapping up.


00:18:35.000 --> 00:18:36.000
The personal stuff's wrapping up.


00:18:36.000 --> 00:18:43.000
I hope to get more Python people and Python test episodes out soon and more course chapters coming.


00:18:43.000 --> 00:18:45.000
Everything in due time.


00:18:45.000 --> 00:18:46.000
Nice.


00:18:46.000 --> 00:18:48.000
How about you?


00:18:48.000 --> 00:18:50.000
I have some extras as well.


00:18:50.000 --> 00:18:55.000
First, I just got back from PyBay last night, so that was a lot of fun.


00:18:55.000 --> 00:18:58.000
PyBay's always a good time.


00:18:58.000 --> 00:19:00.000
I get the video to play even.


00:19:00.000 --> 00:19:02.000
Really cool environment.


00:19:02.000 --> 00:19:05.000
Nice to meet a lot of people there.


00:19:05.000 --> 00:19:09.000
For those of you I met, great to meet you.


00:19:09.000 --> 00:19:12.000
Also, I just want to give a shout out to Sparkmail.


00:19:12.000 --> 00:19:15.000
I just started using Sparkmail to try to unify some stuff.


00:19:15.000 --> 00:19:20.000
What a cool app for macOS email.


00:19:20.000 --> 00:19:28.000
If you're fed up, I was using different web run-ins for different things, and it was like, "God, they're all a little bit different."


00:19:28.000 --> 00:19:36.000
One has E for archive, one has A for archive, but like ProtonMail, the A for archive only periodically works.


00:19:36.000 --> 00:19:41.000
Sometimes it works, and you're like, "Why is it so frustrating? Maybe I could just use one thing."


00:19:41.000 --> 00:19:43.000
All in all, that was really fun.


00:19:43.000 --> 00:19:50.000
Also, I think a big part of the development team is in Ukraine, so happy to be supporting those folks as well.


00:19:50.000 --> 00:19:51.000
Nice.


00:19:51.000 --> 00:20:00.000
Somewhere it says, "Hello from Ukraine," or something like that, which is cool.


00:20:00.000 --> 00:20:06.000
However, one of the challenges is one of my personal email domains is actually backed by ProtonMail.


00:20:06.000 --> 00:20:15.000
I think I talked about that before, but ProtonMail has end-to-end encryption, and so you can't talk to it with a third-party email client, right?


00:20:15.000 --> 00:20:21.000
It can't decrypt it. It doesn't use IMAP, at least not directly.


00:20:21.000 --> 00:20:36.000
If you use ProtonMail, and you want to have something that is a standard email client, you can install this thing called ProtonMail Bridge.


00:20:36.000 --> 00:20:39.000
What it is it runs locally on your computer.


00:20:39.000 --> 00:20:49.000
It does all the end-to-end encryption, and it has a password-protected but not end-to-end encrypted IMAP thing that just runs on localhost.


00:20:49.000 --> 00:20:57.000
You just attach to localhost for your IMAP, and you have ProtonMail plugged into their examples, or Outlook.


00:20:57.000 --> 00:21:00.000
It just made me get a little wheezy just thinking about it.


00:21:00.000 --> 00:21:05.000
It also works on SparkMail and other nice things.


00:21:05.000 --> 00:21:10.000
I had been using SuperHuman, which was really nice, but that's only Gmail, which is such a hassle.


00:21:10.000 --> 00:21:13.000
This works for anything, which makes me super happy.


00:21:13.000 --> 00:21:15.000
What do you do for email?


00:21:15.000 --> 00:21:20.000
I just use the web clients, but mostly it's FastMail.


00:21:20.000 --> 00:21:28.000
Yeah, nice. That's what I had been doing for 10 years, but there were just too many, and they were weird.


00:21:28.000 --> 00:21:30.000
I'm like, "Let me try this. I really like it."


00:21:30.000 --> 00:21:32.000
I think I will check it out.


00:21:32.000 --> 00:21:35.000
I see you brought up Outlook.


00:21:35.000 --> 00:21:44.000
I have to use Outlook for work, and it still drives me crazy that Control-F is not "find." It's "forward."


00:21:44.000 --> 00:21:46.000
Oh, my God.


00:21:46.000 --> 00:21:48.000
It's terrible.


00:21:48.000 --> 00:21:52.000
This thing is nice. It has digital well-being stuff where it will only show you.


00:21:52.000 --> 00:21:58.000
You can have it time out, so it brings you to this thing like, "Hey, check your email just two or three times a day.


00:21:58.000 --> 00:22:03.000
Show me on this little list here that will just show people that are important to me, but nobody else."


00:22:03.000 --> 00:22:06.000
You can block senders. It's pretty sweet.


00:22:06.000 --> 00:22:08.000
Nice. Cool.


00:22:08.000 --> 00:22:10.000
Yeah.


00:22:10.000 --> 00:22:19.000
Next, where I hinted at before, is I ran across this YouTube channel called Dust.


00:22:19.000 --> 00:22:24.000
Man, are they making amazing science fiction. Have you seen this?


00:22:24.000 --> 00:22:27.000
You shared it with me last week. It was pretty cool.


00:22:27.000 --> 00:22:38.000
Yeah. It's just this independent channel, and they are posting new, if you like short sci-fi, like 10, 20-minute sci-fi stories.


00:22:38.000 --> 00:22:41.000
The production quality is just off the charts.


00:22:41.000 --> 00:22:48.000
I recommend to people actually interested in this FTL, Faster Than Light, which is about faster than light travel.


00:22:48.000 --> 00:22:57.000
It's pretty neat. The graphics and stuff is surprisingly good for what it is.


00:22:57.000 --> 00:23:07.000
People can check that out. Also, one called Oceanus, which is about this underwater world.


00:23:07.000 --> 00:23:11.000
Yeah, this one is 30 minutes. It's long.


00:23:11.000 --> 00:23:17.000
Anyway, if people want short-form science fiction, this is pretty awesome. I'll link to it in the show notes.


00:23:17.000 --> 00:23:19.000
That's pretty cool.


00:23:19.000 --> 00:23:25.000
Blaze out there says FTL is a great short. I totally agree. It's very well done.


00:23:25.000 --> 00:23:27.000
Neat.


00:23:27.000 --> 00:23:33.000
Yeah, and it's not always the Hollywood, like, of course the good person has to, the hero has to triumph at the end.


00:23:33.000 --> 00:23:41.000
Of course, it's just a matter of how. Yeah, you never know. Some of these are pretty open-ended, as you might expect a 10-minute show to be.


00:23:41.000 --> 00:23:49.000
Well, you know, I think there are some half-hour shows on TV that really are only like 15 minutes if you take the commercials out.


00:23:49.000 --> 00:23:54.000
I know. A lot of the comments on, if you look at the FTL one, for example, the comments are like,


00:23:54.000 --> 00:24:01.000
"This is a better show than Hollywood studios make with millions of dollars and large teams. How are you all doing this?"


00:24:01.000 --> 00:24:06.000
So, anyway, I thought people might appreciate this, given our audience is probably a little bit techie.


00:24:06.000 --> 00:24:08.000
Yeah, cool.


00:24:08.000 --> 00:24:16.000
Brian, have you ever wanted to just, like, rewrite your software, like some old junkie thing, wrote it in some old code,


00:24:16.000 --> 00:24:19.000
and you're going to rewrite it in the new awesomeness?


00:24:19.000 --> 00:24:23.000
Frequently, yes.


00:24:23.000 --> 00:24:31.000
There is an amazing, so this is the joke. So there's an amazing video, music video, which is a parody on American Pie.


00:24:31.000 --> 00:24:35.000
And for those of you who are not familiar with American Pie, it's a really great song.


00:24:35.000 --> 00:24:37.000
Oh, you sing it?


00:24:37.000 --> 00:24:40.000
No, I'm not singing it.


00:24:40.000 --> 00:24:48.000
It's eight and a half minutes long. And so this guy, Dylan Beatty, he's really talented.


00:24:48.000 --> 00:24:57.000
And he redid one that basically is like a journey through all the follies of his different perspectives through his programming career.


00:24:57.000 --> 00:25:04.000
And it starts out in like assembly, and it goes, I don't know what it's the next one. Is it VB6 or something?


00:25:04.000 --> 00:25:09.000
It's just, it's an amazing, amazing thing. But eight and a half minutes, I'm not going to play it.


00:25:09.000 --> 00:25:14.000
So I'm just going to say, go watch the video. I'm sure it will connect with you. What do you think, Brian?


00:25:14.000 --> 00:25:20.000
It's very good. And then check out his channel, because there's a bunch of great nerdy videos on his channel.


00:25:20.000 --> 00:25:26.000
Yeah, if we scroll down here, what will we find in the recommended? You give REST a bad name?


00:25:26.000 --> 00:25:28.000
That's funny. That was a good one.


00:25:28.000 --> 00:25:39.000
The bug in the JavaScript, I think we featured before, but it's like starting to think I might need a drink because the bug is in the JavaScript.


00:25:39.000 --> 00:25:44.000
That's pretty good. Yeah. Huh. Fun.


00:25:44.000 --> 00:25:53.000
Yeah. Fun. Anyway, so this is an entry point into quite a bit of time of programmer fun videos.


00:25:53.000 --> 00:26:02.000
Okay. So that's a programmer one. I've had like a dad joke, science joke that I wanted to share because I just ran across it recently.


00:26:02.000 --> 00:26:07.000
And I just thought it was so funny. So it's just a comment.


00:26:07.000 --> 00:26:14.000
There are more hydrogen atoms in a single molecule of water than there are stars in the entire solar system.


00:26:14.000 --> 00:26:20.000
And I talked to several people about it, and they just looked at me blankly and said, that can't be true.


00:26:20.000 --> 00:26:29.000
I'm like, sure, there's two hydrogen atoms in a molecule of water and there's one star in our solar system.


00:26:29.000 --> 00:26:36.000
That's awesome. And those two hydrogen atoms. Did the hydrogen atoms come from stars?


00:26:36.000 --> 00:26:42.000
I know. Were they just the stars? Anything larger than that should have come from stars. But that's awesome. I love it.


00:26:42.000 --> 00:26:51.000
It does make you think. Because if you think galaxy, universe, whatever, right? But solar system, I mean, solar, singular.


00:26:51.000 --> 00:27:01.000
Yeah. And it was funny. Some of the comments were like trying to calculate the volume of the water and how many atoms might be there.


00:27:01.000 --> 00:27:08.000
And I'm like, no, it's not atoms. It's a single molecule of water, not a glass of it.


00:27:08.000 --> 00:27:13.000
Yeah, that's how I first started. Like, well, how large is the glass? How many? Okay. How many moles is that?


00:27:13.000 --> 00:27:18.000
And how many? No, wait. That's not what it says at all. That's irrelevant. I love it.


00:27:18.000 --> 00:27:23.000
Anyway. Well, once again, great chatting with you weekly.


00:27:23.000 --> 00:27:28.000
Yep. You as well. And thanks to everyone for listening. See you all later.


00:27:28.000 --> 00:27:29.000
Bye.


00:27:29.360 --> 00:27:31.520
(silence)

