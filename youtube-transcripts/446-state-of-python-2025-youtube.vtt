WEBVTT

00:00:03.460 --> 00:00:04.620
Hey, world. Hey, Brian.

00:00:05.140 --> 00:00:05.480
Hey.

00:00:06.480 --> 00:00:13.820
Let's do another episode. Thanks to everyone for being here on YouTube and whatever time frame you are, live or after the fact.

00:00:15.180 --> 00:00:20.380
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:20.690 --> 00:00:26.680
This is episode 446, recorded August 25th, 2025. I am Michael Kennedy.

00:00:27.400 --> 00:00:28.340
And I'm Brian Okken.

00:00:29.180 --> 00:00:33.040
And this episode is brought to you by many cool services and products.

00:00:33.510 --> 00:00:36.420
Can you imagine a course that teaches you how to use pytest?

00:00:37.080 --> 00:00:42.040
An entire library of 270 hours of courses about all Python things.

00:00:43.520 --> 00:00:46.260
pytest book and Patreon supporters.

00:00:46.500 --> 00:00:46.800
Thank you all.

00:00:46.940 --> 00:00:53.560
Yes, check out Brian's courses, Michael's courses, Patreon supporters.

00:00:53.900 --> 00:00:55.640
Check out Patreon and all that.

00:00:55.760 --> 00:00:55.960
Thank you.

00:00:56.720 --> 00:01:02.040
And I actually have another thing that kind of falls into that category

00:01:02.340 --> 00:01:03.660
that's pretty awesome I want to talk about later.

00:01:04.540 --> 00:01:06.800
If you want to connect with us on the socials,

00:01:07.939 --> 00:01:10.460
MastodonBlueSky is probably where we spend most of our time.

00:01:12.760 --> 00:01:15.020
Brian, me, the show, we've all got accounts.

00:01:16.300 --> 00:01:19.160
You can watch us live on YouTube at pythonbytes.fm.

00:01:19.760 --> 00:01:24.680
If the live show is going on, it should say a big banner across the top.

00:01:24.880 --> 00:01:25.860
Hey, we're live.

00:01:26.080 --> 00:01:32.060
click here to go to it. And if not, you'll just see all the past live streams. So much appreciated

00:01:32.260 --> 00:01:38.280
typically Monday at 10 a.m. Pacific time. And you should definitely subscribe to the newsletter

00:01:38.400 --> 00:01:45.620
because you'll get a custom email from Brian talking about all the different things we covered

00:01:45.640 --> 00:01:49.960
and not just a list of what we've covered, but diving into extra details, extra links,

00:01:51.100 --> 00:01:56.000
more background info. Very cool. Also very cool are statistics.

00:01:57.280 --> 00:01:59.000
Yeah. Tell us about these things.

00:01:59.660 --> 00:02:08.340
Well, we have, there's a website called pypistats.org. And it's nice. You pop into it and it just says

00:02:08.580 --> 00:02:16.820
analytics for PyPI packages. So let's pick one. pytest check. It's my favorite little thing that

00:02:16.720 --> 00:02:23.980
support. And then what you get is you get these, I'm pretty sure we covered this before, but you

00:02:23.980 --> 00:02:28.420
get the download statistics. So that's not really the news. It is a cool website. You should check

00:02:28.420 --> 00:02:34.580
it out if you haven't checked out before. And you can also check out the top packages,

00:02:35.600 --> 00:02:42.400
which ones are the most downloaded by day, by week, by month. And that's all fun,

00:02:42.500 --> 00:02:47.600
but there's some details in the individual package that you might want to know for if you're

00:02:47.820 --> 00:02:53.560
supporting stuff so like for example what system uh for py test check it looks like it's pretty

00:02:53.560 --> 00:03:00.580
much all Linux 97.5 percent Linux um which makes sense it's a test tool so a lot of the tests are

00:03:00.700 --> 00:03:06.959
running in the server uh and not other places but uh the package supports windows anyway

00:03:07.400 --> 00:03:11.760
But if I wanted to bail on Windows, I probably wouldn't be a terror.

00:03:12.080 --> 00:03:14.920
I mean, I don't think very many people would be mad because...

00:03:14.920 --> 00:03:17.100
No, 1% of the people would be pretty upset.

00:03:18.940 --> 00:03:19.860
Yeah, well, you know.

00:03:21.060 --> 00:03:21.960
So maybe I'll leave it.

00:03:22.440 --> 00:03:24.940
It isn't OS-specific anyway.

00:03:25.180 --> 00:03:26.200
But some things are, you know.

00:03:27.400 --> 00:03:28.640
Okay, so why am I bringing this up?

00:03:28.700 --> 00:03:31.560
If this is old news, you should know about it anyway.

00:03:32.800 --> 00:03:37.300
But one of the things is a few weeks ago, it went down.

00:03:38.400 --> 00:03:40.240
This is a volunteer-supported site.

00:03:42.120 --> 00:03:46.900
And it was by C.R. Flynn.

00:03:47.500 --> 00:03:48.780
I'm sorry, I don't know his name.

00:03:49.460 --> 00:03:54.880
But anyway, posted that, hey, PyStats.org is down.

00:03:55.380 --> 00:03:58.200
Somebody reported that like three weeks ago.

00:03:59.220 --> 00:04:00.660
And so I noticed that.

00:04:01.160 --> 00:04:08.560
and Hugo mentioned it and I saw what was going on but just a couple days ago Hugo announced hey

00:04:09.320 --> 00:04:19.680
PyPI stats is back online and it's more supported now so thanks to Janice and the PSF thanks to

00:04:19.799 --> 00:04:23.660
Janice for suggesting that the PSF takes stewardship and connecting the right people

00:04:25.399 --> 00:04:30.300
like eDurban for migrating and of course Christopher Flynn oh Christopher Flynn was

00:04:30.580 --> 00:04:35.100
created it but but a lot of people were involved or at least a handful of people were involved to

00:04:35.260 --> 00:04:42.240
get it back online and get it going and I didn't realize so that's cool it's back online works

00:04:42.380 --> 00:04:46.900
great and I really appreciate it because I don't use it all the time but occasionally and I will

00:04:46.940 --> 00:04:53.880
i'd like to use it i didn't know that there was a a cli for it so uh hugo um

00:04:56.060 --> 00:05:01.920
put together a project called pypi stats same name but without the dot org but you can pip install it

00:05:02.080 --> 00:05:07.720
and you can run it on the command line and it's super neat um you can actually you can run it on

00:05:07.720 --> 00:05:13.999
the command line and you get you get some you can pass it by like python i'm showing on the screen

00:05:14.020 --> 00:05:21.640
python minor so it shows uh which python versions are being being downloaded um but you can do other

00:05:21.670 --> 00:05:30.760
stuff you you can what i have a list look it up uh you can do python major python minor the system

00:05:31.620 --> 00:05:40.239
overall downloads recent downloads so it's a pretty interesting information um the some new

00:05:40.280 --> 00:05:46.580
things that just got released are the ability to you were always able to pass in like a name so just

00:05:46.580 --> 00:05:52.500
on the command line type in a package name and get the stats but now you can also point it at a

00:05:52.660 --> 00:05:58.440
directory or not point it at anything and it'll if you're in the current directory for a project

00:05:58.660 --> 00:06:05.999
and it'll just look up pyproject.toml or set up cfg and look it up so uh really cool that um that

00:06:06.020 --> 00:06:09.480
Hugo extended that command line thing to be able to look up that information.

00:06:09.920 --> 00:06:10.560
That's cool.

00:06:11.120 --> 00:06:15.520
It tells you what is the popularity of the packages you're using, basically?

00:06:16.680 --> 00:06:19.400
Yeah, well, the popularity, but also just different stuff.

00:06:21.580 --> 00:06:23.900
For Pillow, for example, it shows an example.

00:06:25.520 --> 00:06:30.060
This is in black and white on the readme, but if you do it on the command line, it's color.

00:06:30.240 --> 00:06:31.820
So the color output is really nice.

00:06:33.160 --> 00:06:33.440
Nice.

00:06:34.020 --> 00:06:37.080
But you can figure out like start and end dates.

00:06:37.140 --> 00:06:44.020
So if you want a particular date, you know, for you want to zoom in on dates, how many downloads last month and whatnot.

00:06:45.340 --> 00:06:50.180
And the different things like the what Python version is good.

00:06:50.580 --> 00:06:59.780
It's kind of cool because that's one of those things of like, do you think it'll be okay if I completely remove support for 3.8?

00:06:59.960 --> 00:07:02.240
If I want to bump up to 3.10 or something.

00:07:03.080 --> 00:07:10.360
But looking at Pillow, for example, it's still 5% of the people are using 3.8.

00:07:11.860 --> 00:07:14.240
And some people are still using 3.6.

00:07:14.580 --> 00:07:17.100
So maybe they should still support it.

00:07:17.180 --> 00:07:17.540
I'm not sure.

00:07:17.720 --> 00:07:19.180
Maybe they support it.

00:07:19.320 --> 00:07:27.000
Or maybe they could be the pebble thrown in the water to create the wave that causes those people to upgrade.

00:07:27.740 --> 00:07:27.960
Yeah.

00:07:29.160 --> 00:07:32.720
There's some cool flags for the command line thing.

00:07:32.760 --> 00:07:38.080
like last month or picking a date, easy to read stuff.

00:07:39.460 --> 00:07:44.240
And there's an API for it or like a package,

00:07:45.200 --> 00:07:50.020
importable package that you can do it programmatically.

00:07:50.900 --> 00:07:52.740
So anyway, cool tool.

00:07:53.500 --> 00:07:54.260
Very cool.

00:07:54.800 --> 00:07:59.040
All right, let's jump over and talk about the state of Python 2025

00:07:59.860 --> 00:08:02.260
according to the PSF JetBrains survey.

00:08:02.880 --> 00:08:03.660
Ooh, neat.

00:08:04.780 --> 00:08:08.740
This article is written by a little known guy named Michael Kennedy.

00:08:10.510 --> 00:08:15.240
I actually worked with, yeah, I worked with JetBrains and they're like, Hey, you want to

00:08:15.290 --> 00:08:15.560
write this?

00:08:15.740 --> 00:08:16.520
I'm like, yeah, sure.

00:08:16.520 --> 00:08:17.060
That'd be great.

00:08:17.410 --> 00:08:26.100
So basically what I did is I went through all of the, all of the survey results and pulled

00:08:26.150 --> 00:08:29.260
out the headlines and like the trends and like what jumped out at me.

00:08:29.860 --> 00:08:29.980
All right.

00:08:30.020 --> 00:08:36.300
You know, you and I have done this together before, Brian, where we just pull up the survey results and do it on the show.

00:08:37.159 --> 00:08:42.719
I did this with like way more time and effort in written form, and then we'll do it on the show.

00:08:42.800 --> 00:08:43.140
How's that?

00:08:43.740 --> 00:08:45.840
So I think this is maybe like 4,000 words.

00:08:45.980 --> 00:08:48.320
It's like quite a write-up, right?

00:08:49.660 --> 00:08:51.860
So I want to just, I don't want to go through all of it.

00:08:52.380 --> 00:08:53.120
You guys can read it.

00:08:53.220 --> 00:08:56.100
But I do want to pull up some interesting trends.

00:08:57.120 --> 00:09:04.820
So the first trend I think that's pretty wild is that Python people use Python.

00:09:05.500 --> 00:09:07.960
And you're like, oh, Michael, obviously.

00:09:09.400 --> 00:09:14.680
But if you had a JavaScript survey, you would ask, do you use JavaScript?

00:09:15.200 --> 00:09:18.360
And a lot of people that do Python would say, yeah, I use JavaScript.

00:09:19.260 --> 00:09:26.640
A lot of people who do.NET use JavaScript, either as little utilities for Node.

00:09:27.200 --> 00:09:30.980
or because they need a website that has interactivity.

00:09:32.300 --> 00:09:35.400
So I think it's noteworthy that of the people that are in the Python space,

00:09:35.700 --> 00:09:37.520
they're not there as a secondary purpose.

00:09:38.140 --> 00:09:39.920
They're there because of Python,

00:09:40.160 --> 00:09:42.780
not because they've got some library that they need to work on.

00:09:42.940 --> 00:09:48.060
So 86% of people who are Python people use Python.

00:09:49.500 --> 00:09:50.400
That's their main thing, right?

00:09:50.680 --> 00:09:51.200
As their main.

00:09:51.380 --> 00:09:52.760
And then 14% is secondary.

00:09:53.460 --> 00:09:53.980
Yeah, yeah.

00:09:54.360 --> 00:09:56.500
So maybe they have to support tools in Python,

00:09:56.580 --> 00:10:04.060
but that's not really what they do. The other one that I think is wild is that I think we maybe

00:10:04.180 --> 00:10:10.020
have mentioned this. I know I've mentioned this on Talk Python before, but people out there are

00:10:10.220 --> 00:10:15.120
mostly brand new. I've seen this once before, but it continues to be true even more so,

00:10:15.260 --> 00:10:19.920
and it blows my mind. How many years of professional coding experience do you have?

00:10:20.380 --> 00:10:25.820
less than two, one to two years, like zero to two years of programming,

00:10:27.220 --> 00:10:28.480
that's 50% of the people.

00:10:29.540 --> 00:10:29.700
Wow.

00:10:30.740 --> 00:10:34.860
50% of the people in the Python space just started.

00:10:34.980 --> 00:10:37.640
And if you're one of those 50% listening, thanks for listening.

00:10:37.720 --> 00:10:39.820
I know a lot of people listen to our podcasts

00:10:41.320 --> 00:10:44.980
so that they can jump into the community and get up to speed.

00:10:45.080 --> 00:10:45.980
So that's pretty awesome.

00:10:46.720 --> 00:10:48.200
But this has tons of consequences, right?

00:10:48.320 --> 00:10:55.200
Like if you're creating tutorials and you're just like, hey, yeah, install that, make a VNV, and then install the package for local editing.

00:10:55.500 --> 00:10:56.700
Now we get started with the tutorials.

00:10:56.830 --> 00:10:57.400
Like, hold on.

00:10:57.520 --> 00:11:01.220
You got to realize you're talking to people that are just getting started, like half of them.

00:11:02.020 --> 00:11:07.680
And I think that has a lot of implications for tooling, for tutorials, for presentations, et cetera.

00:11:08.560 --> 00:11:14.500
Yeah, but this question is how many years of professional coding, not necessarily how many years of coding.

00:11:14.560 --> 00:11:16.920
Yeah, there's more results in there that are like,

00:11:17.700 --> 00:11:19.280
how much experience do you have with Python at all?

00:11:19.340 --> 00:11:20.880
And it's like really quite low.

00:11:21.480 --> 00:11:21.680
Okay.

00:11:22.020 --> 00:11:24.640
So this, but this is also noteworthy in the sense that,

00:11:26.100 --> 00:11:29.360
like, not just how much time do they have with Python,

00:11:29.660 --> 00:11:32.700
but how much they have time professionally coding at all.

00:11:34.020 --> 00:11:34.180
Yeah.

00:11:34.880 --> 00:11:34.980
Right?

00:11:35.120 --> 00:11:38.940
Yeah, and I'm noticing that a lot with people I teach as well.

00:11:39.620 --> 00:11:42.680
I get a lot of, on the Python test community,

00:11:43.180 --> 00:11:47.400
get a lot of questions that say, I don't know if I can ask this here, but basically I don't

00:11:47.430 --> 00:11:56.420
have any CS background. And so I don't know what a lock is or something like that. So I'm like,

00:11:56.420 --> 00:12:01.900
yeah, sure. Let's talk about that. Yeah, exactly. Yeah. And it's fine. Another one, I don't know,

00:12:02.140 --> 00:12:07.399
I've always thought of like the Python community being broken into thirds, like one thirds or web

00:12:07.420 --> 00:12:11.420
API, one-third data science, and one-third catch all others,

00:12:12.040 --> 00:12:15.120
automation, little tools, whatever.

00:12:15.780 --> 00:12:19.400
Well, that is no longer valid. Data science is now

00:12:19.640 --> 00:12:21.020
half of Python.

00:12:26.380 --> 00:12:29.560
51%. It's probably 51% AI, too, because

00:12:30.100 --> 00:12:32.600
with AI, you can go over 100%.

00:12:33.280 --> 00:12:37.060
That's right. Absolutely. You don't need it to add up. Now, this does include data engineers,

00:12:37.220 --> 00:12:39.300
who I got a message from so many

00:12:39.400 --> 00:12:41.320
saying, I don't want to be grouped in with data

00:12:41.520 --> 00:12:41.640
science.

00:12:44.100 --> 00:12:44.260
Okay.

00:12:45.440 --> 00:12:46.780
But you also don't belong in web.

00:12:47.440 --> 00:12:49.160
You don't belong in other, I don't think.

00:12:49.500 --> 00:12:49.920
I don't know.

00:12:51.480 --> 00:12:53.140
That does include some data

00:12:53.380 --> 00:12:54.840
engineering, but nonetheless,

00:12:55.220 --> 00:12:57.000
this is a significant portion.

00:12:58.580 --> 00:12:59.260
Another thing to keep

00:12:59.280 --> 00:12:59.600
in mind.

00:13:01.559 --> 00:13:03.020
Does this survey include

00:13:03.619 --> 00:13:04.720
the LLM people?

00:13:06.020 --> 00:13:06.380
Yeah.

00:13:06.680 --> 00:13:06.940
Oh, absolutely.

00:13:07.120 --> 00:13:07.660
Yeah, yeah, definitely.

00:13:07.840 --> 00:13:12.200
I think a lot of this is people getting into machine learning and so on.

00:13:12.940 --> 00:13:16.800
Okay, this is, I think, the last main thing I wanted to –

00:13:16.800 --> 00:13:18.120
I know two more things real quick.

00:13:18.720 --> 00:13:25.160
The other one is – and this one I think I want to put out there as a –

00:13:25.320 --> 00:13:26.660
if you were in this group, reconsider.

00:13:28.100 --> 00:13:35.280
Most people, 83% use a major version older of Python or older.

00:13:37.780 --> 00:13:39.800
I mean we're at the end of 313

00:13:40.020 --> 00:13:41.700
and it's like 83%

00:13:41.760 --> 00:13:42.960
are like 312 or below

00:13:44.740 --> 00:13:45.460
and not just

00:13:45.460 --> 00:13:47.040
we're not at the end of 313

00:13:48.160 --> 00:13:49.560
well no not in the end of like

00:13:49.820 --> 00:13:51.580
support I mean we're about to have

00:13:51.720 --> 00:13:52.940
314 is what I mean

00:13:53.600 --> 00:13:54.640
that's what I mean like

00:13:55.480 --> 00:13:56.360
313 is not

00:13:57.340 --> 00:13:59.660
it's about to no longer be the latest is what I'm

00:13:59.740 --> 00:13:59.860
saying

00:14:01.800 --> 00:14:03.500
so this is pretty wild and I did some quick

00:14:03.740 --> 00:14:04.679
math just like

00:14:05.340 --> 00:14:07.020
some people are like, well, it works fine for me.

00:14:07.020 --> 00:14:08.840
I don't really need it to be any better.

00:14:09.100 --> 00:14:11.380
I don't need the new tools, so 3.11, let's say.

00:14:11.450 --> 00:14:13.760
3.11 is fine, or let's say 3.10, 3.10 is fine.

00:14:14.160 --> 00:14:16.120
Even 3.9, it's supported for another couple years, right?

00:14:16.580 --> 00:14:18.420
Probably. Maybe one.

00:14:21.280 --> 00:14:23.260
But let me do some quick math here,

00:14:23.460 --> 00:14:25.200
just to see if I can put this in perspective for people.

00:14:26.420 --> 00:14:29.540
In addition to just you might need to be on the later version

00:14:29.590 --> 00:14:31.840
to have some of the newer tooling, right?

00:14:32.640 --> 00:14:35.420
some of the new libraries and so on that decide to drop the old one

00:14:35.430 --> 00:14:38.120
so they can adopt some feature, right?

00:14:38.400 --> 00:14:38.500
Yeah.

00:14:39.100 --> 00:14:43.040
But I said, well, what if you're on 3.11?

00:14:44.740 --> 00:14:47.000
48% of the people currently using 3.11,

00:14:47.110 --> 00:14:50.300
if they upgraded to 3.13, their code would run 11% faster

00:14:50.480 --> 00:14:52.180
and use 10% to 15% less memory.

00:14:52.980 --> 00:14:53.180
Yeah.

00:14:53.800 --> 00:14:57.920
If you're on 3.10, you get a 42% speed increase

00:14:58.620 --> 00:15:00.120
and 20% to 30% less memory

00:15:00.420 --> 00:15:02.260
just by changing the Python you're running on.

00:15:02.620 --> 00:15:07.420
Chances are it's extremely minimal or zero upgrade costs.

00:15:07.440 --> 00:15:08.580
You just got to try it out.

00:15:09.400 --> 00:15:09.940
And then I also did some other...

00:15:09.940 --> 00:15:11.460
Yeah, this is like no code changes.

00:15:11.760 --> 00:15:12.860
Just change the interpreter.

00:15:13.460 --> 00:15:13.620
Exactly.

00:15:13.960 --> 00:15:16.660
Just change the start command or what's installed.

00:15:17.080 --> 00:15:18.360
I said, well, what if you're a medium business?

00:15:18.460 --> 00:15:20.380
I did a little research like vendor.com and stuff.

00:15:20.440 --> 00:15:26.120
I said the average AWS bill for a medium-sized business is $2.3 million a year.

00:15:27.140 --> 00:15:29.640
And EC2 represents 50% to 70% of that.

00:15:30.480 --> 00:15:35.840
And if you're paying for a bunch of cloud machines

00:15:36.450 --> 00:15:38.200
or cloud compute in whatever form

00:15:38.200 --> 00:15:39.740
and you get those boosts I talked about,

00:15:40.620 --> 00:15:45.780
well, your small business just saved $420,000

00:15:46.170 --> 00:15:48.620
by just changing from 310 to 313.

00:15:50.160 --> 00:15:52.500
If you're a large-scale business, like a large enterprise,

00:15:53.100 --> 00:15:55.940
you save $5.6 million by just switching to run

00:15:56.110 --> 00:15:57.040
on the newer version of Python.

00:15:57.150 --> 00:15:59.640
So anyway, I think these are really interesting.

00:15:59.860 --> 00:16:05.440
And then the last one is there's a big resurgence in Python web development, I think.

00:16:06.080 --> 00:16:11.000
Over the years, this has been trending down 45, 43, 42%.

00:16:11.320 --> 00:16:12.460
But it's back, baby.

00:16:13.920 --> 00:16:19.120
And not just are people saying that they're doing a little more web development,

00:16:19.700 --> 00:16:27.020
but if you look at things like CSS or HTML in terms of how much they're used,

00:16:27.260 --> 00:16:32.600
they jumped, I think it's like 15% up year over year.

00:16:33.120 --> 00:16:38.260
Not a like 30% to 45%, but the increase from what it was to the new one

00:16:38.400 --> 00:16:41.200
is like a 15% growth from what it was previously.

00:16:41.980 --> 00:16:44.700
So like all in databases just across the board.

00:16:45.000 --> 00:16:47.560
So I think that's really interesting because there had been like a long,

00:16:47.870 --> 00:16:52.760
slow trend of kind of like Python's less for web, Python's less for web,

00:16:53.160 --> 00:16:55.760
probably more JavaScript, and it's like it's back.

00:16:55.970 --> 00:16:57.000
So I think that's pretty interesting.

00:16:58.020 --> 00:16:59.160
and then there's a bunch of

00:16:59.779 --> 00:17:01.480
guidance that I gave for people

00:17:01.540 --> 00:17:02.420
at the end like okay

00:17:03.280 --> 00:17:05.260
now that you know all this stuff here are some

00:17:05.500 --> 00:17:07.339
actions some actionable things you can

00:17:07.439 --> 00:17:09.280
do to take advantage of these trends and

00:17:09.680 --> 00:17:10.260
what not so

00:17:11.079 --> 00:17:13.439
I've said enough about this people can check it out

00:17:13.540 --> 00:17:14.880
it's a super long and interesting

00:17:15.439 --> 00:17:15.959
article I think

00:17:17.140 --> 00:17:19.360
yeah okay cool I can't wait to check this

00:17:19.459 --> 00:17:20.560
out yeah indeed

00:17:21.220 --> 00:17:22.040
alright over to you

00:17:24.079 --> 00:17:25.719
well I'd like to

00:17:26.480 --> 00:17:32.040
swap out and take a look at wrapped i actually i couldn't resist so i i'm going to talk about a

00:17:32.180 --> 00:17:37.720
package called wrapped and i went ahead and looked at the pypi stats um and it's um it's used a lot

00:17:38.080 --> 00:17:45.800
so it's uh the i don't know numbers what percent wise or where it is at the uh the top packages or

00:17:45.920 --> 00:17:54.419
something but um it's downloaded almost five what five million 4.8 million daily downloads that's

00:17:54.440 --> 00:18:01.620
pretty good pretty big so um a pretty popular package so what is wrapped wrapped is um i can't

00:18:01.620 --> 00:18:06.000
believe we actually haven't talked about this yet but wrapped is a python module for decorators

00:18:06.300 --> 00:18:11.640
wrappers and monkey patching and to be honest the first time i ran across wrapped i thought

00:18:12.520 --> 00:18:19.659
well wait don't we have functools wraps uh that's what i've been using before um however so let's

00:18:19.800 --> 00:18:24.360
let's talk about wrapped a little bit the aim of the module is to provide a transparent object

00:18:24.680 --> 00:18:30.900
proxy for python yep wrappers which can be used as a basis for constructing a construction of

00:18:31.200 --> 00:18:36.180
functional wrapper function wrappers and decorator functions right got it functools wraps right

00:18:37.120 --> 00:18:43.819
no apparently um so uh the wrap module focuses very much on correctness it therefore goes way

00:18:43.840 --> 00:18:50.860
beyond the existing mechanisms such as functools wraps to ensure decorators preserve introspectability

00:18:51.240 --> 00:18:58.380
signatures type checking abilities okay um yeah because sometimes you'll you like let's say if you

00:18:58.800 --> 00:19:05.360
one of the examples of camera where it is in the in the docs but if you if something that is in a

00:19:05.460 --> 00:19:15.200
package is implemented as a property, not a method, then the return value is different than if it was

00:19:15.240 --> 00:19:21.520
just a function. And functools wraps gets that wrong, but wrapped, I think functools wraps gets

00:19:21.620 --> 00:19:27.160
that wrong, but wrapped gets it correct. It has it behave and signature-wise look the same,

00:19:27.640 --> 00:19:29.880
which is pretty cool. I wish I knew about this.

00:19:32.000 --> 00:19:46.960
I was battling. This decorator doesn't have the right, you know, it transforms the type of signature of this function. So then you get some warning. I'm like, I don't care. It's a web function. No one's going to call it directly, but it's just an IDE warning. I'm like, ah, make it go away.

00:19:47.180 --> 00:19:56.920
And to be fair, the main reason why I usually am reaching for, if I reach for functools wraps is because it makes the name of the function be correct.

00:19:56.960 --> 00:19:59.060
And it isn't the silly little function.

00:19:59.120 --> 00:20:01.320
It changes the name and it changes the doc string.

00:20:01.400 --> 00:20:05.500
So if anybody's looking at the name or the doc string, it gets corrected.

00:20:06.200 --> 00:20:08.360
And if that's enough for you, yeah, that's fine.

00:20:08.600 --> 00:20:12.740
But it's kind of interesting looking at some of the history.

00:20:13.660 --> 00:20:14.780
So I was looking back.

00:20:15.120 --> 00:20:22.260
There's a blog that the creator of this wrote, Graham Dumpleton.

00:20:23.130 --> 00:20:34.860
And this is back from apparently originally, if we go to the blog, it's from originally from 2014.

00:20:35.170 --> 00:20:37.160
He started writing these and he's kept them updated.

00:20:37.230 --> 00:20:40.340
So last update was five years ago, but original 2014.

00:20:40.980 --> 00:20:44.700
Anyway, how you implement your Python decorators is wrong.

00:20:44.780 --> 00:20:51.000
I was interested one of the reasons why I was interested in this is the idea that it was around

00:20:51.200 --> 00:20:56.800
monkey patching and monkey patching is the original thought process as to why he wrote this is he was

00:20:57.300 --> 00:21:03.220
monkey patching things and it was incorrect and interesting discussion over there on the blog

00:21:03.580 --> 00:21:09.100
about monkey patching and why why it's not just for testing I use it a lot for testing but it could

00:21:09.160 --> 00:21:14.019
be there's a lot of other use cases too interesting blog series of blog posts about it so

00:21:14.040 --> 00:21:17.240
So pretty fun to take a look.

00:21:17.820 --> 00:21:20.780
One of the amazing examples in the docs,

00:21:21.480 --> 00:21:22.940
which I thought was really pretty awesome.

00:21:23.260 --> 00:21:25.480
There's some really easy examples that you'll get right away.

00:21:25.940 --> 00:21:27.240
And then it goes like pretty deep.

00:21:27.540 --> 00:21:32.800
So let's say you've got asynchronous code or multi-threaded code,

00:21:33.840 --> 00:21:38.120
and you want to synchronize those with locks.

00:21:39.600 --> 00:21:43.240
He's got this write-up, which is kind of a lengthy write-up,

00:21:43.440 --> 00:21:44.700
but it's not too bad.

00:21:45.360 --> 00:21:48.600
And the end result, if you scroll to the answer at the bottom,

00:21:49.360 --> 00:21:51.980
is you can just have synchronized.

00:21:52.640 --> 00:21:55.340
You set up these locks, and you decorate each function

00:21:55.390 --> 00:21:57.920
that you want synchronized with a synchronized decorator,

00:21:58.540 --> 00:21:59.240
and it just works.

00:21:59.520 --> 00:22:02.360
So it's kind of fun to be able to do things

00:22:03.600 --> 00:22:06.980
like put extra abilities around something like lock,

00:22:07.100 --> 00:22:08.600
grabbing a lock or something like that.

00:22:08.860 --> 00:22:09.820
Yeah, that's really cool.

00:22:10.040 --> 00:22:10.860
We're going to need more of that

00:22:10.930 --> 00:22:12.840
as free-threaded Python becomes the thing.

00:22:12.920 --> 00:22:17.880
people have to get used to that those concerns yeah and also um the other one of the other

00:22:18.040 --> 00:22:26.740
my concerns with jumping to um from functools wrapped to wrap to uh wrapped r-a-w-r-a-p-t

00:22:27.500 --> 00:22:34.220
was i was worried about speed because it's doing a lot so is it kind of slow and um and apparently

00:22:34.440 --> 00:22:40.459
not uh to ensure the overhead as minimal as possible a c extension module is used if it's

00:22:40.480 --> 00:22:45.740
available an automatic fallback to a python implementation is provided if the target system

00:22:45.940 --> 00:22:51.980
doesn't have isn't extended for that target system but for my use cases as we've seen um

00:22:52.740 --> 00:22:59.860
most of my users are in Linux so we're probably fine there so it's really neat very neat very neat

00:23:00.600 --> 00:23:05.760
let's see what is next owen lamont it's back with a good recommendation for us

00:23:07.040 --> 00:23:07.320
Okay.

00:23:07.940 --> 00:23:08.100
Yeah.

00:23:08.660 --> 00:23:11.880
He says, you should check out PySentry.

00:23:13.380 --> 00:23:18.280
So I did check out PySentry, and it's quite neat.

00:23:18.280 --> 00:23:19.100
So what is PySentry?

00:23:20.240 --> 00:23:23.680
It scans your Python dependencies for known vulnerabilities,

00:23:24.740 --> 00:23:27.260
and it's Rust-based, so it's fast, and it might get VC funny.

00:23:27.980 --> 00:23:36.060
So what it does is you go into a folder, a project.

00:23:36.220 --> 00:23:39.380
I'm not sure if it needs an active virtual environment or just the files,

00:23:40.080 --> 00:23:43.600
but it will scan uv lock, poetry lock, pip lock,

00:23:44.240 --> 00:23:47.120
pyproject.toml, pip file, and requirements.txt.

00:23:48.020 --> 00:23:53.220
Look for specific versions of dependencies that you are specifying there,

00:23:53.940 --> 00:23:58.240
and it will cross-check them with a bunch of vulnerability databases.

00:23:59.040 --> 00:24:03.620
Not just typosquatting type stuff, but just, hey,

00:24:04.040 --> 00:24:06.840
There was this vulnerability reported in the Django admin.

00:24:07.660 --> 00:24:11.580
You should update because you don't want to participate in that kind of fun.

00:24:12.060 --> 00:24:12.880
You're not about that life.

00:24:13.640 --> 00:24:14.980
So pretty cool.

00:24:16.240 --> 00:24:19.540
Yeah, it has multiple data sources, the PyPA advisory database,

00:24:20.000 --> 00:24:24.460
PyPI JSON API, OSV dev open source vulnerabilities, and so on.

00:24:25.660 --> 00:24:26.700
Yeah, and it's pretty neat.

00:24:27.060 --> 00:24:29.680
So you can specify different levels.

00:24:30.980 --> 00:24:33.760
Dependency scopes are supported like dev versus main.

00:24:35.060 --> 00:24:38.220
direct versus transitive dependencies and that kind of thing.

00:24:39.600 --> 00:24:45.720
I ran it on our setup on pythonbytes.fm, which apparently...

00:24:46.210 --> 00:24:50.600
Now, one thing really quick here is it actually has more than...

00:24:50.850 --> 00:24:53.020
It says, PyCentury security audit.

00:24:53.560 --> 00:24:57.780
Summary, 89 packages scanned, one vulnerable, one vulnerability found.

00:24:58.240 --> 00:24:59.460
Ah, Brian, what's going on?

00:25:00.020 --> 00:25:02.440
There's actually more than 89 packages for our website.

00:25:03.240 --> 00:25:04.400
but I don't know why.

00:25:04.580 --> 00:25:08.120
Maybe there's just no information about some unpopular ones,

00:25:08.210 --> 00:25:10.360
and so that's why they didn't show up.

00:25:10.690 --> 00:25:11.380
They weren't scanned.

00:25:11.810 --> 00:25:12.140
I don't know.

00:25:12.510 --> 00:25:15.200
I don't know why it's less, but that's my conjecture.

00:25:16.080 --> 00:25:22.500
It says there's one unfixed low severity CVE found,

00:25:22.770 --> 00:25:23.700
and it's unfixable.

00:25:24.460 --> 00:25:24.580
Great.

00:25:24.820 --> 00:25:25.500
That's why it's still there.

00:25:26.120 --> 00:25:26.500
What is it?

00:25:26.620 --> 00:25:28.180
It is an aiohttp.

00:25:30.500 --> 00:25:35.040
If an invalid IPv6 URL is passed to it, it will go bonkers.

00:25:36.060 --> 00:25:36.500
I don't care.

00:25:36.670 --> 00:25:38.880
This is the dependency of a dependency of a dependency

00:25:39.720 --> 00:25:43.760
that internally calls an API to its own service,

00:25:45.310 --> 00:25:47.700
and it uses AIOHTP to do that.

00:25:50.360 --> 00:25:54.940
No one's going to pass an invalid IPv6 URL to that thing

00:25:55.100 --> 00:25:56.620
because it's not even part of our code.

00:25:56.780 --> 00:26:00.320
It just happens to be we ask the service to do something.

00:26:00.350 --> 00:26:02.920
It goes, OK, I got to call my API in the cloud and do that.

00:26:03.440 --> 00:26:04.380
But here it is.

00:26:04.460 --> 00:26:06.480
So you can decide, is it an issue or not?

00:26:06.770 --> 00:26:07.660
But still, that's pretty cool.

00:26:07.840 --> 00:26:11.320
You could just run this in your project periodically,

00:26:11.690 --> 00:26:14.700
or you could maybe run it as part of CI-CD and get warnings.

00:26:15.580 --> 00:26:17.120
Hey, maybe I shouldn't put this in production.

00:26:17.680 --> 00:26:22.300
It says there's a CVE severity level 10 out of 10 remote code execution,

00:26:22.680 --> 00:26:23.280
no auth required.

00:26:23.460 --> 00:26:24.000
Let's not do that.

00:26:26.500 --> 00:26:27.740
Yeah, interesting.

00:26:28.670 --> 00:26:28.800
Yeah.

00:26:30.680 --> 00:26:36.760
One thing to be aware of, you don't uv tool install PyCentury.

00:26:37.260 --> 00:26:40.160
You install PyCentury-RS.

00:26:42.140 --> 00:26:43.460
So just be careful on the install.

00:26:43.550 --> 00:26:46.480
I don't know what's at PyCentury, but I presume it's not this.

00:26:47.460 --> 00:26:47.920
Oh, okay.

00:26:48.070 --> 00:26:49.980
So you have to be careful what you're installing?

00:26:50.460 --> 00:26:51.920
Yeah, just look at the website.

00:26:52.120 --> 00:26:56.560
and the name of the command and the package are different.

00:26:59.320 --> 00:27:02.440
Yeah, and I know that that happens, but it always, like...

00:27:02.900 --> 00:27:03.500
I don't like it.

00:27:04.840 --> 00:27:05.500
I don't like it.

00:27:05.680 --> 00:27:07.080
Just pick a different package name, people.

00:27:07.400 --> 00:27:07.660
Come on.

00:27:11.100 --> 00:27:15.420
One quick extra for me is that I talked about this last week,

00:27:15.600 --> 00:27:20.960
that our testing code is being offline to archived or whatever.

00:27:21.420 --> 00:27:22.880
It's not going offline, I don't think.

00:27:23.620 --> 00:27:29.240
So last week, Michael convinced me to think about archiving it away.

00:27:29.480 --> 00:27:41.320
So you'll be able to go to testandcode.com and find it for the foreseeable future, I think, looking into ways to offload it to somewhere else.

00:27:41.600 --> 00:27:44.920
But there's some pretty cool things that make it seamless.

00:27:45.380 --> 00:27:49.600
So I think that as I get time in the next couple of months,

00:27:50.120 --> 00:27:52.080
it'll transition over and nobody will know the difference,

00:27:52.410 --> 00:27:54.120
except for maybe the website will look different.

00:27:54.410 --> 00:27:58.680
But other than that, also, I've gotten a whole bunch of great comments.

00:27:58.890 --> 00:28:03.380
So a lot of people have gone over to the contact page.

00:28:05.880 --> 00:28:10.820
And so in the episodes, I've said, hey, you can go over to pythontest.com

00:28:11.160 --> 00:28:13.500
and there's a contact page and you can reach me if you want.

00:28:14.260 --> 00:28:21.340
I'm not really fishing for compliments, but a lot of people have said, hey, I've enjoyed this podcast and thanks.

00:28:21.680 --> 00:28:24.580
And just some nice emails have come in.

00:28:24.700 --> 00:28:25.140
So that's cool.

00:28:25.200 --> 00:28:25.860
So thank you, everybody.

00:28:27.480 --> 00:28:27.920
That's very nice.

00:28:28.080 --> 00:28:28.340
That's it.

00:28:28.400 --> 00:28:30.060
I'm glad to see you're keeping it online.

00:28:30.220 --> 00:28:30.480
That's cool.

00:28:33.080 --> 00:28:36.180
Actually, somebody contacted me and said, I was worried.

00:28:36.380 --> 00:28:37.580
So I downloaded all the episodes.

00:28:40.340 --> 00:28:41.740
So, you know, you don't have to do that.

00:28:42.420 --> 00:28:43.560
But very proactive.

00:28:44.160 --> 00:28:46.020
Okay, Michael, how about extras for you?

00:28:46.160 --> 00:28:47.600
I have some extras.

00:28:47.750 --> 00:28:49.700
I have some rumble follow-up.

00:28:50.300 --> 00:28:55.480
This is the Markdown Lentor that we talked about previously.

00:28:57.340 --> 00:28:58.960
Let me do it in reverse order.

00:28:59.140 --> 00:29:04.520
So I'm actually almost ready to release my Talk Python in Production book,

00:29:05.180 --> 00:29:06.020
which I've been working on.

00:29:06.020 --> 00:29:07.340
It's about 300 pages now.

00:29:07.780 --> 00:29:09.400
I'm going to release it as an e-book initially.

00:29:09.590 --> 00:29:11.700
If it's worthwhile, I'll eventually do a print.

00:29:11.780 --> 00:29:18.440
but certainly an ebook that you can get. So you can read about the first third of it online,

00:29:19.000 --> 00:29:24.300
which is fun. So if people are interested, they can go through and read the first

00:29:25.700 --> 00:29:33.480
seven chapters, I think, which is exactly what's in the book. And then you'll be able to actually

00:29:35.500 --> 00:29:39.680
buy the rest of the book, right? Pretty soon. So why am I starting out with this? Well, one,

00:29:40.260 --> 00:29:43.860
I encourage you right now, it's not quite released yet, go click on buy the book.

00:29:44.360 --> 00:29:45.640
Please put your name in and email address.

00:29:45.780 --> 00:29:48.820
Say I'm interested when this comes out and I'll email you very, very soon.

00:29:49.940 --> 00:29:56.980
But the reason I'm talking about this is I've been grinding on that thing with like 45,000 words worth of markdown with rumble.

00:29:58.799 --> 00:30:00.280
And I have some reports.

00:30:00.460 --> 00:30:01.620
It's been going really well, actually.

00:30:02.240 --> 00:30:03.300
The thing works great.

00:30:04.400 --> 00:30:06.920
It's found some issues, some of them I didn't like.

00:30:07.860 --> 00:30:09.640
I didn't like the fixes it was proposing.

00:30:09.900 --> 00:30:14.720
like we talked about it word wrapping at like line 80

00:30:14.920 --> 00:30:15.920
or whatever you set it at.

00:30:16.080 --> 00:30:19.000
And I'm like, no, because in my markdown editors,

00:30:19.140 --> 00:30:20.680
it shows that kind of formatting.

00:30:20.720 --> 00:30:22.980
I want it to just wrap around and not be like weird,

00:30:23.800 --> 00:30:24.500
no wrapping wrapping.

00:30:26.480 --> 00:30:27.660
So you can turn those things off.

00:30:28.040 --> 00:30:28.480
Yeah, exactly.

00:30:30.500 --> 00:30:33.740
The other thing is I pointed out that there was a bug

00:30:34.520 --> 00:30:38.740
and it not sort of looking up the directory

00:30:38.760 --> 00:30:40.840
tree to find the config file if you're down in the guts.

00:30:41.120 --> 00:30:44.560
And so Ruben very kindly said, you know what?

00:30:44.740 --> 00:30:45.240
That's a good idea.

00:30:45.360 --> 00:30:48.620
I'll fix it and just released a fix that made it a little bit better.

00:30:48.720 --> 00:30:50.840
There's a lot of traction going on here.

00:30:51.140 --> 00:30:51.280
Yeah.

00:30:51.560 --> 00:30:52.460
That would have bugged me too.

00:30:52.780 --> 00:30:52.960
Yeah.

00:30:53.200 --> 00:30:56.220
I'm like, well, the reason it bugged me is there's the book,

00:30:56.380 --> 00:30:58.940
and then there's a source folder full of all the markdown.

00:30:58.980 --> 00:31:01.720
Then there's other folders that are output and assets and so on.

00:31:01.940 --> 00:31:04.420
And I was down in the lower one, and I ran it on accident.

00:31:04.500 --> 00:31:07.460
And it completely formatted and changed everything

00:31:07.480 --> 00:31:12.080
based on the defaults of the tool, not all the specs I set.

00:31:12.080 --> 00:31:12.920
And I'm like, no.

00:31:13.540 --> 00:31:14.480
No, no, no.

00:31:15.480 --> 00:31:16.920
How much work is this going to--

00:31:17.280 --> 00:31:18.840
luckily, I just rolled it back in Git.

00:31:19.100 --> 00:31:21.680
But it was easier to apply the few changes

00:31:21.860 --> 00:31:26.180
that I wanted to keep than to redo all those things.

00:31:27.000 --> 00:31:27.880
Anyway, that's fixed now.

00:31:27.900 --> 00:31:28.360
So it's awesome.

00:31:28.700 --> 00:31:31.000
And then finally, I thought maybe people

00:31:31.440 --> 00:31:33.980
would be interested in the config that I was using,

00:31:34.900 --> 00:31:35.520
that I am using.

00:31:35.780 --> 00:31:37.600
and I turned off a bunch of things and added comments

00:31:37.750 --> 00:31:41.400
to what I turned off, like line wrapping, for example.

00:31:43.180 --> 00:31:45.700
And also, I don't know where I got the config file.

00:31:45.750 --> 00:31:48.680
I got it from somewhere, but some of the settings were not right.

00:31:49.640 --> 00:31:51.440
I can't remember exactly what it was,

00:31:51.600 --> 00:31:55.180
but maybe they were not under a global tag or some weird thing

00:31:55.500 --> 00:31:56.380
in the TOML.

00:31:56.760 --> 00:31:59.420
So I put mine up, and it seems to work if people want to borrow it.

00:31:59.570 --> 00:31:59.960
So anyway.

00:32:00.840 --> 00:32:01.200
Cool.

00:32:01.290 --> 00:32:02.720
So that's in the show notes, right?

00:32:03.080 --> 00:32:05.120
That is all in the-- yeah, that's all in the show notes.

00:32:05.260 --> 00:32:08.160
I've made it a gist, and you can get it from the gist.

00:32:08.860 --> 00:32:09.920
If you get the gist, Brian.

00:32:09.920 --> 00:32:10.100
It's just that easy.

00:32:10.880 --> 00:32:11.940
It's just that easy.

00:32:13.160 --> 00:32:14.100
That is right.

00:32:14.740 --> 00:32:17.780
And then I think-- oh, yeah, one more thing.

00:32:18.220 --> 00:32:23.600
Remember, last time I speculated, could Python 3.13.6

00:32:24.100 --> 00:32:26.360
be the final 3.13 before 3.14?

00:32:28.080 --> 00:32:28.180
No.

00:32:28.260 --> 00:32:28.880
The answer is no.

00:32:29.280 --> 00:32:29.680
No.

00:32:30.250 --> 00:32:31.420
The answer is a hard no.

00:32:31.880 --> 00:32:39.440
answer is actually no 3.17 was released before you talked about 3.16 because 3.16 came out I wrote it

00:32:39.440 --> 00:32:44.680
in the show notes and then I didn't look for a few days then we did the show and 3.17 had already

00:32:44.720 --> 00:32:54.060
come out well that's a hard no 3.13.7 yeah sorry 3.13.7 um and but here's here's the thing

00:32:54.220 --> 00:33:06.200
interesting why. Why is that the case? It is an emergency bug fix for an issue or a problem

00:33:06.520 --> 00:33:13.540
introduced in 3.13.6. So in 3.13.6, there was something that went wrong. And they're like,

00:33:13.740 --> 00:33:21.480
ah, what was it? A regression in the SSL module between 3.13.5, 3.13.6, reading from a TLS

00:33:21.480 --> 00:33:27.580
encrypted connection block that actually sounds like you really want that to work so yeah well

00:33:27.700 --> 00:33:33.080
so don't predict it again because the next one will just be the reason will be to make michael

00:33:33.150 --> 00:33:42.020
wrong exactly yeah how about that for a release note huh okay that's it for all my extras okay

00:33:43.120 --> 00:33:47.860
well ready from ready for a joke or you got something else for us it's like 98 degrees here

00:33:48.000 --> 00:33:48.860
Yes, I'm ready for a joke.

00:33:50.400 --> 00:33:50.740
So hot.

00:33:50.740 --> 00:33:51.000
I know.

00:33:51.500 --> 00:33:54.480
Neither of us have air conditioning in our current setup right now.

00:33:54.620 --> 00:33:58.420
I'm above the garage in this separate building that has literally no AC.

00:33:58.510 --> 00:34:00.960
I have to close the windows because the road noise.

00:34:02.160 --> 00:34:03.820
This is my little spa time, my sauna time.

00:34:04.660 --> 00:34:07.400
And I am in a house that used to have lovely air conditioning,

00:34:07.620 --> 00:34:10.340
and it picked the hottest weekend of the year to break.

00:34:11.040 --> 00:34:12.540
Because when else would it break?

00:34:13.740 --> 00:34:14.020
All right.

00:34:14.270 --> 00:34:17.080
Well, it's going to be fine, Brian.

00:34:17.280 --> 00:34:18.060
Don't you worry about it.

00:34:18.060 --> 00:34:18.500
Do you know why?

00:34:19.200 --> 00:34:19.340
Why?

00:34:19.419 --> 00:34:21.840
Because this planet is marked for death.

00:34:22.720 --> 00:34:23.020
Okay.

00:34:23.560 --> 00:34:25.179
So says the Silver Surfer.

00:34:25.679 --> 00:34:27.700
Now, I don't even know what show the Silver Surfer is from.

00:34:28.500 --> 00:34:31.179
I know it's one of those Marvel or Avenger type shows.

00:34:32.360 --> 00:34:34.440
But the Silver Surfer appears and says,

00:34:34.480 --> 00:34:35.740
your planet is marked for death.

00:34:36.020 --> 00:34:38.520
And people say, can we ask why?

00:34:39.300 --> 00:34:40.620
Well, the Silver Surfer says,

00:34:41.520 --> 00:34:44.639
because your planet's beings chose JavaScript

00:34:45.100 --> 00:34:46.960
as the primary language of web development.

00:34:47.040 --> 00:34:48.520
clearly a fatal flaw.

00:34:49.000 --> 00:34:49.760
What is wrong with him?

00:34:50.399 --> 00:34:52.419
We're going to have to just finish you off.

00:34:52.440 --> 00:34:53.540
You're clearly not worthy.

00:34:56.780 --> 00:34:57.220
That's good.

00:34:57.760 --> 00:34:58.140
Yeah.

00:34:59.180 --> 00:35:01.480
I can come up with some other reasons

00:35:01.800 --> 00:35:03.080
that it might pick as well right now.

00:35:03.900 --> 00:35:04.280
You know what?

00:35:04.340 --> 00:35:07.000
The Silver Surfer is not a fan of random frameworks.

00:35:10.500 --> 00:35:11.600
I'll tell you what, though.

00:35:12.520 --> 00:35:14.660
At least my frustration with all this kind of stuff

00:35:14.680 --> 00:35:17.740
is not that JavaScript is a language for front-end development.

00:35:18.140 --> 00:35:27.820
It's that it's the only language ever after 25, 30 years of code running in browsers,

00:35:28.500 --> 00:35:29.540
that it's the only language.

00:35:30.390 --> 00:35:32.460
And we've had WebAssembly for 10 years.

00:35:32.470 --> 00:35:33.340
It's fairly ridiculous.

00:35:35.980 --> 00:35:38.460
Anyway, thank you, Silver Surfer, for putting us out of our misery.

00:35:39.260 --> 00:35:39.660
Yeah.

00:35:40.980 --> 00:35:41.740
Maybe not.

00:35:42.380 --> 00:35:43.020
No, no.

00:35:44.880 --> 00:35:46.820
Pat says you should come visit Iowa, by the way.

00:35:47.320 --> 00:35:48.780
Lovely weather and not melting there.

00:35:50.760 --> 00:35:51.000
All right.

00:35:52.070 --> 00:35:52.400
Thank you, Pat.

00:35:52.400 --> 00:35:52.860
I like Iowa.

00:35:54.160 --> 00:35:54.340
Indeed.

00:35:55.400 --> 00:35:59.280
And with that, Brian, thanks for a lovely show as always.

00:35:59.730 --> 00:36:00.060
Bye, everyone.

00:36:00.760 --> 00:36:00.940
Bye.

