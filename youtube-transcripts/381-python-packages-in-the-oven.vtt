WEBVTT

00:00:00.001 --> 00:00:05.400
Hey everybody, another wonderful Python Bytes.

00:00:05.400 --> 00:00:08.240
Are you ready to kick it off?

00:00:08.240 --> 00:00:09.240
Let's kick it off.

00:00:09.240 --> 00:00:11.560
It's going to be awesome.

00:00:11.560 --> 00:00:15.880
Hello and welcome to Python Bytes where we deliver Python news and headlines directly

00:00:15.880 --> 00:00:17.040
to your earbuds.

00:00:17.040 --> 00:00:22.720
This is episode 381 recorded April 30th, 2024.

00:00:22.720 --> 00:00:24.360
And I am Brian Okken.

00:00:24.360 --> 00:00:26.520
And I'm Michael Kennedy.

00:00:26.520 --> 00:00:31.400
And this episode is brought to you by Scout APM, listen to their spot later in the show

00:00:31.400 --> 00:00:34.000
and connect with your hosts if you'd like to.

00:00:34.000 --> 00:00:42.040
We're @mkennedy, @brianokken@pythonbytes.org, all at foss.org, connect with us on mastodon.

00:00:42.040 --> 00:00:47.560
And if you are listening and would like to join us live sometime to be part of the audience,

00:00:47.560 --> 00:00:52.000
you can go to pythonbytes.fm/live and check that out.

00:00:52.000 --> 00:00:56.960
And while you're there, while you're at pythonbytes.fm, go ahead and sign up for the friends of the

00:00:56.960 --> 00:00:57.960
show list.

00:00:57.960 --> 00:01:03.760
And that way you will get an email announcement after we have everything all polished up and

00:01:03.760 --> 00:01:04.760
put up online.

00:01:04.760 --> 00:01:08.480
So what you got for us first, Michael?

00:01:08.480 --> 00:01:14.320
Well, first I have a new audio setup because I'm traveling this week and I had a much nicer

00:01:14.320 --> 00:01:21.520
setup Brian, until these guys, these construction guys dropped in and started causing a ruckus.

00:01:21.520 --> 00:01:23.400
Could you describe the ruckus?

00:01:23.400 --> 00:01:26.120
I don't hear any ruckus.

00:01:26.120 --> 00:01:27.120
Little breakfast club.

00:01:27.120 --> 00:01:33.720
Yeah, I'm on the East Coast this week visiting my dad and there's a ruckus.

00:01:33.720 --> 00:01:35.000
So I'm in a slightly different setup.

00:01:35.000 --> 00:01:36.000
It's a little echoey.

00:01:36.000 --> 00:01:38.520
So forgive me folks for the echo.

00:01:38.520 --> 00:01:41.000
I'll be back to the studio next week.

00:01:41.000 --> 00:01:43.240
And connecting with Michael in the field.

00:01:43.240 --> 00:01:44.240
That's right.

00:01:44.240 --> 00:01:45.920
Reporting from the field.

00:01:45.920 --> 00:01:49.360
I did see a wild turkey over there and there have been a couple of squirrels, a baby squirrel

00:01:49.360 --> 00:01:55.320
were playing, so it's a very exciting, but not as exciting as Pi to Wasm, a Python to

00:01:55.320 --> 00:01:59.000
Wasm WebAssembly compiler.

00:01:59.000 --> 00:02:03.960
Now Brian, it would be entirely reasonable to ask or to point out that there is already

00:02:03.960 --> 00:02:08.440
a Wasm version of CPython.

00:02:08.440 --> 00:02:10.680
So why would it be exciting?

00:02:10.680 --> 00:02:12.320
More exciting than baby squirrels?

00:02:12.320 --> 00:02:14.060
Well, let's see.

00:02:14.060 --> 00:02:15.520
So really it's about performance.

00:02:15.520 --> 00:02:19.080
This comes from a company called Wasmer.

00:02:19.080 --> 00:02:22.240
They make Wasmer Edge.

00:02:22.240 --> 00:02:23.800
Don't fully understand Wasmer Edge.

00:02:23.800 --> 00:02:29.360
I'll talk about it for a second in a minute, but they basically have like cloud computing,

00:02:29.360 --> 00:02:36.600
but what you deliver are WebAssembly things to run rather than full native code to run.

00:02:36.600 --> 00:02:43.400
So they can do them closer to the edge, like CDN endpoints, things like that.

00:02:43.400 --> 00:02:50.760
But regardless of how you run it, they've come up with this thing called Pi to Wasm.

00:02:50.760 --> 00:02:56.360
And so you can take your code and compile it to this and it's not quite as fast as true

00:02:56.360 --> 00:02:58.160
native CPython.

00:02:58.160 --> 00:03:06.600
But what I didn't realize that the CPython Wasm is like one fifth as fast as native Python.

00:03:06.600 --> 00:03:13.200
So this is three times faster than the alternatives if you're going to do anything WebAssembly.

00:03:13.200 --> 00:03:14.200
So that's pretty cool.

00:03:14.200 --> 00:03:19.600
And that makes it maybe two thirds the speed of truly native Python rather than compiling

00:03:19.600 --> 00:03:24.640
C to WebAssembly and interpret it in a JavaScript runtime, which I guess I understand why that's

00:03:24.640 --> 00:03:25.640
slower.

00:03:25.640 --> 00:03:26.640
Yeah.

00:03:26.640 --> 00:03:27.640
All right.

00:03:27.640 --> 00:03:28.640
So pretty interesting.

00:03:28.640 --> 00:03:34.040
You just pip install Pi to Wasm and then you just Pi to Wasm your program and you output

00:03:34.040 --> 00:03:35.520
your .wasm.

00:03:35.520 --> 00:03:40.160
And actually that, I mean, you can run it in Wasmer, but it also kind of just opens

00:03:40.160 --> 00:03:45.680
up the possibility to run interesting things on the web and web based platforms in general.

00:03:45.680 --> 00:03:46.680
Right.

00:03:46.680 --> 00:03:48.480
That's pretty, pretty easy workflow.

00:03:48.480 --> 00:03:50.720
Yeah, it doesn't look too bad.

00:03:50.720 --> 00:03:52.520
And the pip install one is one time, right?

00:03:52.520 --> 00:03:55.200
Like you get that set up and good to go.

00:03:55.200 --> 00:03:57.560
Now this is actually based on Nutka.

00:03:57.560 --> 00:04:00.760
Am I saying that right?

00:04:00.760 --> 00:04:07.260
Nutka, I believe is the way the Python compiler.

00:04:07.260 --> 00:04:11.480
And so that's both awesome, but also has an effect.

00:04:11.480 --> 00:04:16.440
And the effect is that Nutka, oh, I'm saying this close, right?

00:04:16.440 --> 00:04:19.000
Only supports 3.11 so far.

00:04:19.000 --> 00:04:21.400
And so your code will only work on Python 3.11.

00:04:21.400 --> 00:04:26.680
But honestly, these days 3.11, 3.12, they're real similar, right?

00:04:26.680 --> 00:04:29.680
There's not a lot of features that we go like, can't use it.

00:04:29.680 --> 00:04:31.800
Can't use 3.11 these days.

00:04:31.800 --> 00:04:32.800
Right.

00:04:32.800 --> 00:04:34.620
That's kind of as mainstream as you get.

00:04:34.620 --> 00:04:40.520
Because people have a lot of really hard requirements for stability or a step behind anyway, right?

00:04:40.520 --> 00:04:41.520
Yeah.

00:04:42.520 --> 00:04:44.880
And yeah, not to diss anybody that worked on 3.12.

00:04:44.880 --> 00:04:45.880
3.12 is awesome.

00:04:45.880 --> 00:04:46.880
But yeah.

00:04:46.880 --> 00:04:47.880
Oh, no.

00:04:47.880 --> 00:04:51.480
I mean, when we have 3.13, 3.12 will be kind of like the mainstream one, right?

00:04:51.480 --> 00:04:52.480
Not saying nothing's wrong.

00:04:52.480 --> 00:04:54.060
Nothing's wrong with that.

00:04:54.060 --> 00:04:56.120
It's just a lot of people stick one version behind.

00:04:56.120 --> 00:04:57.120
That's all.

00:04:57.120 --> 00:05:00.120
Yeah, that's pretty neat.

00:05:00.120 --> 00:05:01.120
Absolutely.

00:05:01.120 --> 00:05:04.280
I'm excited to try that for something.

00:05:04.280 --> 00:05:05.280
Yeah.

00:05:05.280 --> 00:05:06.280
There's a bunch of...

00:05:06.280 --> 00:05:07.280
Exactly.

00:05:07.280 --> 00:05:09.060
So, it's awesome.

00:05:09.060 --> 00:05:15.040
I so want a front end framework to be based on PyScript and the MicroPython runtime and

00:05:15.040 --> 00:05:16.040
all of that.

00:05:16.040 --> 00:05:17.040
But we don't have that yet.

00:05:17.040 --> 00:05:18.800
And so until we do, I don't have a huge use case.

00:05:18.800 --> 00:05:25.080
I mean, in the data science world, there's a lot of reasons for like, hey, can we push

00:05:25.080 --> 00:05:32.080
the compute for this computationally expensive thing to the browsers so that we don't have

00:05:32.080 --> 00:05:42.000
to pay all the cloud computing costs, just like let them download, oxidize, oxide rather,

00:05:42.000 --> 00:05:43.000
and run it locally.

00:05:43.000 --> 00:05:44.000
Right.

00:05:44.000 --> 00:05:45.000
That would be awesome.

00:05:45.000 --> 00:05:49.600
But if you're not doing that, now, if we can have front end framework in Python, I'd be

00:05:49.600 --> 00:05:50.600
all about it.

00:05:50.600 --> 00:05:53.840
Oh, just one thing to wrap up this article here that announces this.

00:05:53.840 --> 00:05:57.840
They also talk about like, well, how could you get Python into WebAssembly?

00:05:57.840 --> 00:05:59.760
There are ways to do it.

00:05:59.760 --> 00:06:00.760
There's ways to make it faster.

00:06:00.760 --> 00:06:02.120
You could use a subset of Python.

00:06:02.120 --> 00:06:03.120
You could use a JIT.

00:06:03.120 --> 00:06:05.320
You could use static analysis, etc., etc.

00:06:05.320 --> 00:06:08.800
So they talk about using Cython, R-Python.

00:06:08.800 --> 00:06:10.440
Have you heard of R-Python?

00:06:10.440 --> 00:06:14.600
Transforms typed code into C and then compiles it with a normal C compiler.

00:06:14.600 --> 00:06:15.600
OK.

00:06:15.600 --> 00:06:16.600
I didn't know.

00:06:16.600 --> 00:06:17.600
I didn't know that.

00:06:17.600 --> 00:06:23.400
But you just say R-Python, hello world.py and boom, there's a binary executable.

00:06:23.400 --> 00:06:26.560
That's actually kind of interesting.

00:06:26.560 --> 00:06:27.840
OK.

00:06:27.840 --> 00:06:34.920
And then some other options you could do Python JIT, PyPy, P-Y-P-Y is probably the most common

00:06:34.920 --> 00:06:35.920
one of those.

00:06:35.920 --> 00:06:39.280
And you can do static analysis with mypyC.

00:06:39.280 --> 00:06:44.400
And finally, the one that they chose was Nuke, Nuike.

00:06:44.400 --> 00:06:47.000
And then they talked about how they use it here.

00:06:47.000 --> 00:06:49.400
So if people want to dig deeper, there's a lot more to go here.

00:06:49.400 --> 00:06:52.120
But I think that's enough for introducing the idea.

00:06:52.120 --> 00:06:53.120
Yeah.

00:06:53.120 --> 00:06:56.880
And I do appreciate that they talked about their tradeoffs and why they picked one over

00:06:56.880 --> 00:06:57.880
the other and stuff.

00:06:57.880 --> 00:06:58.880
Yeah, exactly.

00:06:58.880 --> 00:06:59.880
Pretty neat.

00:06:59.880 --> 00:07:00.880
Pretty neat as well.

00:07:00.880 --> 00:07:01.880
All right.

00:07:01.880 --> 00:07:02.880
Over to you.

00:07:02.880 --> 00:07:07.880
Well, I want to talk a little bit about where you get packages from.

00:07:07.880 --> 00:07:11.920
So normally, I take a look at PyPI.org to look for stuff.

00:07:11.920 --> 00:07:14.080
And that's kind of where stuff's coming from.

00:07:14.080 --> 00:07:20.760
And unless you have a local repo, if you do pip install, it's coming from PyPI.

00:07:20.760 --> 00:07:25.040
But the or local or your company or something like that.

00:07:25.040 --> 00:07:30.760
But in the end, this is the place that we shove all the stuff that people share.

00:07:30.760 --> 00:07:35.240
And you can browse things like I picked one of mine, pytestCheck.

00:07:35.240 --> 00:07:40.680
And you can you get pretty quick, you can see a bunch of stuff about it, the maintainers,

00:07:40.680 --> 00:07:42.080
some of the meta.

00:07:42.080 --> 00:07:48.360
And the reason why I'm covering this is because that's kind of what you get with PyPI, this

00:07:48.360 --> 00:07:49.360
browse feature.

00:07:49.360 --> 00:07:53.040
But there's a couple other options that I wasn't aware of.

00:07:53.040 --> 00:07:56.320
And I'm pretty excited about Oven.

00:07:56.320 --> 00:08:01.000
So both Oven and what's the other one?

00:08:01.000 --> 00:08:02.880
PyPI browser.

00:08:02.880 --> 00:08:04.160
So let's take a look at Oven.

00:08:04.160 --> 00:08:06.800
So I just learned about this recently.

00:08:06.800 --> 00:08:11.560
It's from FrostMing and really slick interface.

00:08:11.560 --> 00:08:17.680
And when you search for something here, you get like something similar to what you see

00:08:17.680 --> 00:08:19.960
on PyPI.

00:08:19.960 --> 00:08:25.200
But there's some meta information on the left and you've got the readme documentation

00:08:25.200 --> 00:08:27.760
on the right, the description.

00:08:27.760 --> 00:08:29.920
But there's also this kind of fun.

00:08:29.920 --> 00:08:32.200
It's got the authors is blank.

00:08:32.200 --> 00:08:33.880
I wonder what I'm doing wrong here.

00:08:33.880 --> 00:08:40.640
But anyway, it says how to install it in case you didn't know, like pip install, PDM, Rai

00:08:40.640 --> 00:08:46.360
and poetry instructions for how to install something kind of fun.

00:08:46.360 --> 00:08:50.920
The thing that I really enjoy is some of the extra stuff that it's adding is so some of

00:08:50.920 --> 00:08:56.440
the extra stuff is a really great browser for what great look at what the version.

00:08:56.440 --> 00:09:00.920
So this is a really clean old version interface and how old they are.

00:09:00.920 --> 00:09:04.640
And then the file browser is kind of amazing.

00:09:04.640 --> 00:09:06.820
So you've got both wheels.

00:09:06.820 --> 00:09:10.280
So I'm distributing both a wheel and a tarball.

00:09:10.280 --> 00:09:16.240
And within the wheel, you can check to see you can just see all the files in here.

00:09:16.240 --> 00:09:19.480
You can even look inside individual files.

00:09:19.480 --> 00:09:22.960
This is pretty amazing to be able to inspect.

00:09:22.960 --> 00:09:27.520
Inspect what what you're getting with your wheel before you even try to install it.

00:09:27.520 --> 00:09:28.520
It's cool.

00:09:28.520 --> 00:09:32.700
And it's really for people who are not pulling this up while they're listening.

00:09:32.700 --> 00:09:38.640
It looks very much like the source view, the code view and GitHub actually, but based directly

00:09:38.640 --> 00:09:40.040
on the wheel.

00:09:40.040 --> 00:09:41.780
Yeah, it's pretty great.

00:09:41.780 --> 00:09:49.040
And then even so, even the tarball pulls things apart and you can see see what's in there

00:09:49.040 --> 00:09:50.960
through through the tarball.

00:09:50.960 --> 00:09:52.100
This is pretty amazing.

00:09:52.100 --> 00:09:56.720
All the meta all the meta data and then just everything you can just completely view it

00:09:56.720 --> 00:09:59.780
without even installing it or downloading it or anything.

00:09:59.780 --> 00:10:04.380
So pretty awesome to look at different different things here.

00:10:04.380 --> 00:10:06.180
The it is open source.

00:10:06.180 --> 00:10:11.180
It is based on I think it's JavaScript.

00:10:11.180 --> 00:10:17.620
I think JS JavaScript and something called remix, which I'm not familiar with, but pretty

00:10:17.620 --> 00:10:20.540
new project, but pretty exciting.

00:10:20.540 --> 00:10:25.580
I think this is gorgeous and helpful to the community.

00:10:25.580 --> 00:10:33.580
And then the I think I saw this on the announcement for oven was comparing it to also pipe browser.

00:10:33.580 --> 00:10:35.860
And I'm like, I didn't know about that.

00:10:35.860 --> 00:10:37.260
So let's take a look at pipe browser.

00:10:37.260 --> 00:10:44.100
So pipe your browser, IPA dot browser.org also as you can search for packages.

00:10:44.100 --> 00:10:48.900
And this is not trying to replace the pipe interface too much.

00:10:48.900 --> 00:10:51.100
It's just so you can take a look at wheels.

00:10:51.100 --> 00:10:55.980
So being able to look at the metadata and the package content within.

00:10:55.980 --> 00:10:56.980
Oh, wow.

00:10:56.980 --> 00:10:59.420
You can just like, see all this stuff.

00:10:59.420 --> 00:11:04.180
So yeah, you pipe your browser allows you to go in and look at all the code, but there's

00:11:04.180 --> 00:11:09.020
a little more clicking around to be able to see everything.

00:11:09.020 --> 00:11:16.860
So that's why I think that's one of the reasons for the oven is to try to maybe clean up this

00:11:16.860 --> 00:11:20.300
interface a little bit, but still, this is pretty cool.

00:11:20.300 --> 00:11:25.900
And then one of the neat things about pipe browser is that it is based, it's written

00:11:25.900 --> 00:11:26.900
in Python.

00:11:26.900 --> 00:11:27.900
It's open source.

00:11:27.900 --> 00:11:31.180
Both are open source, but this one's written in Python on starlet.

00:11:31.180 --> 00:11:32.980
So it's a starlet app.

00:11:32.980 --> 00:11:39.620
And it even says that one of the benefits of this is you can use it as, as a browser

00:11:39.620 --> 00:11:44.800
for a private pipe, your registry at your company or an internal registry.

00:11:44.800 --> 00:11:47.660
So that's pretty cool.

00:11:47.660 --> 00:11:51.860
So I don't know what the differences would try to between trying to install this versus

00:11:51.860 --> 00:11:58.180
other things, but anyway, a couple of neat ways to browse Python packages.

00:11:58.180 --> 00:12:02.060
Yeah, both are new to me and very interesting.

00:12:02.060 --> 00:12:03.060
I like oven a lot.

00:12:03.060 --> 00:12:04.060
It looks real good.

00:12:04.060 --> 00:12:07.060
Yeah, the, the interface is just gorgeous.

00:12:07.060 --> 00:12:11.060
Of course, of course, this is mostly the images neat, but it looks nice.

00:12:11.060 --> 00:12:13.540
It says oven to bake pies.

00:12:13.540 --> 00:12:17.100
No not to bake pies, to explore Python packages.

00:12:17.100 --> 00:12:19.780
And for a while I was like, what's going on?

00:12:19.780 --> 00:12:20.780
I don't get the joke.

00:12:20.780 --> 00:12:27.020
I honestly, I didn't get the joke for a few minutes and then it's the pie is in the oven.

00:12:27.020 --> 00:12:28.020
I get it now.

00:12:28.020 --> 00:12:34.300
I'm a little slow sometimes.

00:12:34.300 --> 00:12:38.100
So do you know what's not slow?

00:12:38.100 --> 00:12:39.100
Scout APM.

00:12:39.100 --> 00:12:41.100
Yes, indeed.

00:12:41.100 --> 00:12:42.660
Indeed.

00:12:42.660 --> 00:12:45.160
Let's talk about Scout, our sponsor.

00:12:45.160 --> 00:12:48.260
Let me tell you real quick about Scout APM.

00:12:48.260 --> 00:12:50.900
They're big supporters of Python bites.

00:12:50.900 --> 00:12:53.960
So we appreciate that very much.

00:12:53.960 --> 00:12:59.260
So if you are tired of spending hours trying to find the root cause of issues impacting

00:12:59.260 --> 00:13:04.140
your performance, then you owe it to yourself to check out Scout APM.

00:13:04.140 --> 00:13:09.780
They're a leading Python application performance monitoring tool, APM that helps you identify

00:13:09.780 --> 00:13:13.620
and solve performance abnormalities faster and easier.

00:13:13.620 --> 00:13:18.340
Scout APM ties bottlenecks such as memory leaks, slow database queries, background jobs,

00:13:18.340 --> 00:13:23.620
and the dreaded N plus one queries that you can end up if you do lazy loading in your

00:13:23.620 --> 00:13:26.500
thorium, then you say, Oh no, why is it so slow?

00:13:26.500 --> 00:13:29.780
Why are you doing 200 database queries for what should be one?

00:13:29.780 --> 00:13:31.980
So you can find out things like that.

00:13:31.980 --> 00:13:33.700
And it links it back directly to source code.

00:13:33.700 --> 00:13:38.860
So you can spend less time in the debugger and healing logs and just finding the problems

00:13:38.860 --> 00:13:39.860
and moving on.

00:13:39.860 --> 00:13:43.340
And you'll love it because it's built for developers by developers.

00:13:43.340 --> 00:13:45.020
It makes it easy to get set up.

00:13:45.020 --> 00:13:47.540
Seriously, you can do it in less than four minutes.

00:13:47.540 --> 00:13:48.540
So that's awesome.

00:13:48.540 --> 00:13:51.980
And the best part is the pricing is straightforward.

00:13:51.980 --> 00:13:58.020
You only pay for the data that you use with no hidden overage fees or per seat pricing.

00:13:58.020 --> 00:14:02.980
And I just learned this, Brian, they also have, they provide the pro version for free

00:14:02.980 --> 00:14:04.820
to all open source projects.

00:14:04.820 --> 00:14:10.500
So if you're an open source maintainer and you want to have Scout APM for that project,

00:14:10.500 --> 00:14:13.540
just shoot them a message or something on their pricing page about that.

00:14:13.540 --> 00:14:17.980
So you can start your free trial and get instant insights today.

00:14:17.980 --> 00:14:20.420
Visit pythonbytes.fm/scout.

00:14:20.420 --> 00:14:22.900
The link is in your podcast player show notes as well.

00:14:22.900 --> 00:14:23.900
And please use that link.

00:14:23.900 --> 00:14:28.600
Don't just search for them because otherwise, they don't think you came from us.

00:14:28.600 --> 00:14:29.880
And then they'd stop supporting the show.

00:14:29.880 --> 00:14:32.740
So please use our link pythonbytes.fm/scout.

00:14:32.740 --> 00:14:33.740
Check them out.

00:14:33.740 --> 00:14:35.820
It really supports the show.

00:14:35.820 --> 00:14:39.300
Right, thank you, Scout.

00:14:39.300 --> 00:14:46.340
Now on to the next thing, which is a freeze frame of Paul Everett in YouTube here doing

00:14:46.340 --> 00:14:48.340
an announcement.

00:14:48.340 --> 00:14:56.360
So I want to just give a quick shout out to this new, autocomplete code intelligence

00:14:56.360 --> 00:14:58.860
engine that's in PyCharm.

00:14:58.860 --> 00:15:00.380
People know I'm a big fan of PyCharm, right?

00:15:00.380 --> 00:15:01.500
I talk about it all the time.

00:15:01.500 --> 00:15:10.100
But if you have any of the pro tools, including PyCharm Pro, there's something that you've

00:15:10.100 --> 00:15:14.940
noticed, but if you haven't used it lately, you wouldn't notice, obviously.

00:15:14.940 --> 00:15:20.900
And they've added, you know, how people have GitHub, Copilot, and some of these other things

00:15:20.900 --> 00:15:24.980
that they can plug into their development tools, right?

00:15:24.980 --> 00:15:25.980
Yeah.

00:15:25.980 --> 00:15:30.780
Well, the way that works is it takes a section of your code or your code comment that you

00:15:30.780 --> 00:15:34.540
ask, instructed to do a thing and then a section of your code and it sends it off to the cloud

00:15:34.540 --> 00:15:36.700
and stuff happens.

00:15:36.700 --> 00:15:38.100
That send it off to the cloud.

00:15:38.100 --> 00:15:40.940
Some companies may frown upon it.

00:15:40.940 --> 00:15:45.500
I believe your company says, "Nein, du kannst nicht."

00:15:45.500 --> 00:15:46.500
You can't do it.

00:15:46.500 --> 00:15:47.940
You're not doing that.

00:15:47.940 --> 00:15:50.140
So being a German company, they say it that way.

00:15:50.140 --> 00:15:51.140
That's why I said that.

00:15:51.140 --> 00:15:57.300
So this is awesome because it's sort of like that, but there's probably the wrong mental

00:15:57.300 --> 00:16:00.220
model, but nonetheless, it's like totally local.

00:16:00.220 --> 00:16:06.860
So it comes as a plugin for PyCharm and others if you have the pro version, and it just lets

00:16:06.860 --> 00:16:13.780
you do like awesome code completion locally with no round tripping, which is pretty neat.

00:16:13.780 --> 00:16:17.660
And I think it was on by default on the new PyCharm because why not?

00:16:17.660 --> 00:16:22.340
I want to give you an example to give you a sense so people, otherwise it's just like,

00:16:22.340 --> 00:16:23.860
"Hey, this thing, it's neat.

00:16:23.860 --> 00:16:25.060
It helps you write code.

00:16:25.060 --> 00:16:26.100
What does that mean?"

00:16:26.100 --> 00:16:28.680
So here's a little bit of code I wrote.

00:16:28.680 --> 00:16:33.620
It's a Flask view endpoint and it's using Blueprint.

00:16:33.620 --> 00:16:36.860
So it says @blueprint.get/listing.

00:16:36.860 --> 00:16:43.380
It says a function deflisting, and then it wants to show some videos and some view.

00:16:43.380 --> 00:16:44.380
So there's all code existing.

00:16:44.380 --> 00:16:47.020
I'm trying to help people get a sense of where it starts.

00:16:47.020 --> 00:16:51.980
Videos equals some database query to get a list of video objects.

00:16:51.980 --> 00:16:58.380
Now if you type the word R-E-T, and attempt to begin to write return, do you know what

00:16:58.380 --> 00:17:01.540
tab will write for you with this hell outland?

00:17:01.540 --> 00:17:09.900
Return Flask.render template, parentheses, /home/listing.html because there's a hierarchy

00:17:09.900 --> 00:17:12.420
of the templates and that is the correct one.

00:17:12.420 --> 00:17:15.660
And videos equals videos, close parentheses.

00:17:15.660 --> 00:17:16.660
Tab to write that.

00:17:16.660 --> 00:17:17.660
Yeah, that's amazing.

00:17:17.660 --> 00:17:18.660
You just do that all day.

00:17:18.660 --> 00:17:24.340
Just tab, tab, tab, tab.

00:17:24.340 --> 00:17:28.260
Sometimes it gets it wrong and sometimes it's close enough you tab it and correct it.

00:17:28.260 --> 00:17:33.780
And sometimes it gets it, actually this is exactly what should be written, which is insane.

00:17:33.780 --> 00:17:37.660
And some pretty long, like you're showing some pretty long stuff that I'm surprised

00:17:37.660 --> 00:17:38.660
by.

00:17:38.660 --> 00:17:40.420
Some short stuff I'm like, "Oh yeah, that's probably, that's right.

00:17:40.420 --> 00:17:41.420
Yeah, that's right."

00:17:41.420 --> 00:17:42.420
Yeah, yeah.

00:17:42.420 --> 00:17:48.100
Like, "Oh, we're going to sort the functions by most used rather than alphabetical only."

00:17:48.100 --> 00:17:50.140
And something silly like that, right?

00:17:50.140 --> 00:17:51.140
It's not that.

00:17:51.140 --> 00:17:52.140
It's way more than that.

00:17:52.140 --> 00:17:55.700
But there's been times now, I'm still loving this because there's times where I'm calling

00:17:55.700 --> 00:18:01.820
some API function and I'm just about to think, "Yeah, I don't use this very often.

00:18:01.820 --> 00:18:02.820
I have to look it up."

00:18:02.820 --> 00:18:04.820
And it just like pops it in and it's correct.

00:18:04.820 --> 00:18:07.300
I'm like, "Oh yeah, that's exactly what I wanted."

00:18:07.300 --> 00:18:08.300
Thank you.

00:18:08.300 --> 00:18:09.300
Yeah.

00:18:09.300 --> 00:18:15.060
And I'm already getting used to it to the point where I can't live without it now.

00:18:15.060 --> 00:18:16.980
This is an incredible extra feature.

00:18:16.980 --> 00:18:17.980
It is.

00:18:17.980 --> 00:18:21.140
And where it frustrates me is where I'll type a little too much and it'll go away.

00:18:21.140 --> 00:18:22.900
I'm like, "No, I should have just accepted it.

00:18:22.900 --> 00:18:23.900
I didn't read.

00:18:23.900 --> 00:18:24.900
How do I get this back?"

00:18:24.900 --> 00:18:25.900
Yeah.

00:18:25.900 --> 00:18:27.620
I've actually started over.

00:18:27.620 --> 00:18:30.500
I'm like, "Okay, delete the line and start over because that's easier."

00:18:30.500 --> 00:18:33.140
It's going to be quicker than writing the rest of it.

00:18:33.140 --> 00:18:34.140
Absolutely.

00:18:34.140 --> 00:18:35.140
Yeah.

00:18:35.140 --> 00:18:39.340
So anyway, I know PyTorch Pro is a paid thing, but it's also one of the very most common

00:18:39.340 --> 00:18:40.340
tools.

00:18:40.340 --> 00:18:42.300
And this is not paid, but I think it's awesome.

00:18:42.300 --> 00:18:46.220
And so I just wanted to give a shout out for it because so many of these coding assistants

00:18:46.220 --> 00:18:50.300
do all this magic by sending all of your code to the cloud and they've got the cloud latency

00:18:50.300 --> 00:18:51.300
and all that.

00:18:51.300 --> 00:18:53.300
And this is just nice and local and sweet.

00:18:53.300 --> 00:18:55.660
Yeah, that's the part that I really...

00:18:55.660 --> 00:18:57.740
So yeah, I like that it's just easier.

00:18:57.740 --> 00:19:04.860
It fits in my workflow, but also, like you said, at work, we have local GPT kind of things

00:19:04.860 --> 00:19:10.460
that we can use that are company internal, which is a neat thing for people to do.

00:19:10.460 --> 00:19:13.260
But this is just local and it doesn't even go anywhere.

00:19:13.260 --> 00:19:14.260
So it's super fast.

00:19:14.260 --> 00:19:17.180
I can even have my laptop unplugged and this works.

00:19:17.180 --> 00:19:19.180
So that's pretty cool.

00:19:19.180 --> 00:19:21.500
Anyway, good job.

00:19:21.500 --> 00:19:22.500
Cool.

00:19:22.500 --> 00:19:24.140
Next up.

00:19:24.140 --> 00:19:25.860
So that's the good, that's good news.

00:19:25.860 --> 00:19:30.220
We've got some bad news and I got this from like lots of people.

00:19:30.220 --> 00:19:34.180
So a lot of people were talking about this on Mastodon.

00:19:34.180 --> 00:19:41.100
The news is that Google seems to be shedding Python developers, at least in the US.

00:19:41.100 --> 00:19:44.860
And there's a bunch of articles around it.

00:19:44.860 --> 00:19:49.380
So we've got Registry talked about it.

00:19:49.380 --> 00:19:57.900
This is the registry I kind of talked said, Python and Flutter teams latest on the Google

00:19:57.900 --> 00:20:00.420
shopping block.

00:20:00.420 --> 00:20:03.740
Nevermind the record revenues cost must be cut.

00:20:03.740 --> 00:20:11.100
And I this I kind of like this article in that it highlighted that in this time where

00:20:11.100 --> 00:20:15.860
they're like laying off a lot of great people.

00:20:15.860 --> 00:20:26.260
They last week they announced a one year jump on net profits to 23.66 billion over for Q1.

00:20:26.260 --> 00:20:28.020
So record profits.

00:20:28.020 --> 00:20:31.060
I don't know if that's record profits, but really great profits.

00:20:31.060 --> 00:20:35.100
And yet that's not enough and they're cutting people.

00:20:35.100 --> 00:20:40.300
And I saw it all over Mastodon.

00:20:40.300 --> 00:20:45.460
TechCrunch has some highlights of different people posting, including from Thomas Wooders,

00:20:45.460 --> 00:20:49.580
who's one of the Python core people.

00:20:49.580 --> 00:20:51.420
He's on the steering council too as well.

00:20:51.420 --> 00:20:52.820
Oh yeah.

00:20:52.820 --> 00:20:54.980
And also Dart.

00:20:54.980 --> 00:20:59.260
So Google lays off staff from Flutter, Dart and Python teams.

00:20:59.260 --> 00:21:05.740
And I and there's no official announcement as far as I can tell from Google yet.

00:21:05.740 --> 00:21:10.540
It's just since it was under 100 people, they not announcing it.

00:21:10.540 --> 00:21:15.060
Basically leaked messages from team leaders to the teams and stuff like that.

00:21:15.060 --> 00:21:16.740
That's what we're seeing.

00:21:16.740 --> 00:21:17.740
Yeah.

00:21:17.740 --> 00:21:28.180
And I don't remember what article I saw this in and it's from the register.

00:21:28.180 --> 00:21:38.420
Some of the teams have been reduced in favor of a new team based in Munich.

00:21:38.420 --> 00:21:41.060
And then I thought, I don't know if this is true or not.

00:21:41.060 --> 00:21:45.660
I heard somebody mentioned that some of the laid off people are getting or having to retrain

00:21:45.660 --> 00:21:50.780
having to train their replacements, which is tacky and yicky.

00:21:50.780 --> 00:21:53.020
So hopefully that's not true.

00:21:53.020 --> 00:22:00.060
Anyway, my my I guess I hope everything goes well for everybody that is part of this and

00:22:00.060 --> 00:22:02.940
hopefully land land on their feet.

00:22:02.940 --> 00:22:04.700
Well, so good luck.

00:22:04.700 --> 00:22:05.700
Yeah.

00:22:05.700 --> 00:22:06.700
Sorry, folks.

00:22:06.700 --> 00:22:09.300
I'm gonna try to take out my entire tech stack.

00:22:09.300 --> 00:22:12.820
Python and then the mobile apps are Flutter and Dart.

00:22:12.820 --> 00:22:14.660
And I was like, Oh, come on.

00:22:14.660 --> 00:22:20.660
I'm actually more worried about Flutter and Dart, because Google is such a pen city to

00:22:20.660 --> 00:22:24.500
like just kill stuff.

00:22:24.500 --> 00:22:29.100
You know, there's the Google graveyard and all that sort of things that you hear about.

00:22:29.100 --> 00:22:34.380
They're the lead of Flutter and Dart, whereas they're not in charge of Python.

00:22:34.380 --> 00:22:35.380
It's just unfortunate.

00:22:35.380 --> 00:22:37.740
Yeah, going that way.

00:22:37.740 --> 00:22:38.740
Yeah.

00:22:38.740 --> 00:22:43.900
So yeah, you've used Flutter and Dart before for a project.

00:22:43.900 --> 00:22:44.900
Yeah, it's great.

00:22:44.900 --> 00:22:45.900
Yeah.

00:22:45.900 --> 00:22:48.100
So the talk Python courses mobile app is built in.

00:22:48.100 --> 00:22:52.900
Yeah, I would build it in Python if we had solid options there.

00:22:52.900 --> 00:22:54.860
But sadly, we're not there yet.

00:22:54.860 --> 00:22:55.860
Someday.

00:22:56.860 --> 00:22:57.860
All right.

00:22:57.860 --> 00:23:01.860
Before we call it on that, all of my have a quick follow up to this.

00:23:01.860 --> 00:23:03.420
It's part of this.

00:23:03.420 --> 00:23:04.420
Okay.

00:23:04.420 --> 00:23:09.300
It's not as timely, although it's an article from seven days ago.

00:23:09.300 --> 00:23:15.460
It talks about the history last couple of years, and it it's quite a long article.

00:23:15.460 --> 00:23:16.460
Let me look.

00:23:16.460 --> 00:23:17.460
It's sorry, the original.

00:23:17.460 --> 00:23:27.980
There is what I would like to the original one on where's your ed at, which is an awesome

00:23:27.980 --> 00:23:29.580
domain.

00:23:29.580 --> 00:23:35.420
But it's a really long write up, and it's entitled the man who killed Google search.

00:23:35.420 --> 00:23:42.220
And basically, it documents the struggle between the search team whose job is to build features

00:23:42.220 --> 00:23:45.220
that are better for you, better for me, better for everyone.

00:23:45.220 --> 00:23:50.240
And the ad team whose job is to make you do more queries.

00:23:50.240 --> 00:23:53.900
So more ads show up so that you might click them.

00:23:53.900 --> 00:23:57.540
So they called for a code yellow, which in Google parlance actually means a really bad

00:23:57.540 --> 00:24:00.980
thing like code red would probably be the way people would think of it.

00:24:00.980 --> 00:24:05.820
It says people are finding what they look for too quickly and leaving.

00:24:05.820 --> 00:24:10.540
So what can we do to like, make them see more ads, basically.

00:24:10.540 --> 00:24:14.140
And there was a big struggle for a couple of years.

00:24:14.140 --> 00:24:15.500
This all started in 2019.

00:24:15.500 --> 00:24:23.780
But it's basically the in clarification, if you will, the slightly nicer, Cory Doctorow

00:24:23.780 --> 00:24:26.580
term of Google search.

00:24:26.580 --> 00:24:30.260
And if you feel like over the last couple years, Google search has gotten worse, it's

00:24:30.260 --> 00:24:35.620
on purpose so that you will spend more time seeing ads and maybe clicking them.

00:24:35.620 --> 00:24:36.620
How about that?

00:24:36.620 --> 00:24:37.620
Well, yeah.

00:24:37.620 --> 00:24:40.660
So one of the things that people look at is your bounce rate.

00:24:40.660 --> 00:24:45.180
So I may get this wrong, because I'm not really a like a stats wonk.

00:24:45.180 --> 00:24:50.900
But bounce rate, I think is, I don't know what it is, it measures how how many how long

00:24:50.900 --> 00:24:55.980
people stay in on your site and look at different, what is it?

00:24:55.980 --> 00:24:58.580
How many pages they see, look at what before they leave?

00:24:58.580 --> 00:24:59.580
I think that's right.

00:24:59.580 --> 00:25:03.780
As you you get to one page and you leave, you don't subsequently explore the page.

00:25:03.780 --> 00:25:06.340
Okay, so a lot of people don't want that.

00:25:06.340 --> 00:25:13.260
And I personally, I think for my like, blog and stuff, anything I'm doing, I love

00:25:13.260 --> 00:25:14.260
a low bounce rate.

00:25:14.260 --> 00:25:19.700
That means that my, my analytics and whatever, or my Google search terms and all that are

00:25:19.700 --> 00:25:23.340
correct and people can find exactly what they're looking for right away.

00:25:23.340 --> 00:25:25.940
And they don't need to click around and find something else.

00:25:25.940 --> 00:25:28.020
But I'm not I'm not like pushing ads.

00:25:28.020 --> 00:25:30.660
So yeah, anyway.

00:25:30.660 --> 00:25:31.660
Yep.

00:25:31.660 --> 00:25:33.940
I'm off to read this.

00:25:33.940 --> 00:25:34.940
This is very interesting.

00:25:34.940 --> 00:25:35.940
It's super interesting.

00:25:35.940 --> 00:25:37.780
Yeah, I read it yesterday.

00:25:37.780 --> 00:25:39.220
It's really interesting.

00:25:39.220 --> 00:25:41.340
And it's not inspiring.

00:25:41.340 --> 00:25:42.340
But it is interesting.

00:25:42.340 --> 00:25:48.260
And the reason I even brought it up, not because of word Google appears in both but the the

00:25:48.260 --> 00:25:51.980
like, hey, we don't care so much about the tech.

00:25:51.980 --> 00:25:54.660
We're not doing this to support the community.

00:25:54.660 --> 00:25:55.660
We need our cut.

00:25:55.660 --> 00:25:56.860
And what can we do to make that happen?

00:25:56.860 --> 00:26:01.780
It feels very much like the same vibe of it's motivating a lot of these layoffs.

00:26:01.780 --> 00:26:04.900
And like, yeah, we don't really like how we make money on ads from Flutter.

00:26:04.900 --> 00:26:05.900
I don't think we do.

00:26:05.900 --> 00:26:06.900
Can we get that out of here?

00:26:06.900 --> 00:26:08.820
Like these people are just dead weight, like that kind of thing.

00:26:08.820 --> 00:26:09.820
Right.

00:26:09.820 --> 00:26:12.580
And these a little less so for Python, but still.

00:26:12.580 --> 00:26:16.660
Also, but this is the, this isn't a struggling company.

00:26:16.660 --> 00:26:19.060
This is one of the most profitable companies in the world.

00:26:19.060 --> 00:26:20.060
Yes.

00:26:20.060 --> 00:26:24.140
I think they just became a two trillion dollar stock market valuation.

00:26:24.140 --> 00:26:30.260
So it's not just we need to make money, but we need to make more and always more and always

00:26:30.260 --> 00:26:31.500
more.

00:26:31.500 --> 00:26:32.500
Never enough.

00:26:32.500 --> 00:26:37.180
So anyway, it's too bad.

00:26:37.180 --> 00:26:39.420
Well, those are our topics.

00:26:39.420 --> 00:26:43.740
Do you do you have anything extra since you're I am feeling not very extra.

00:26:43.740 --> 00:26:46.380
I have one extra one extra.

00:26:46.380 --> 00:26:47.380
This is good.

00:26:47.380 --> 00:26:48.380
Yeah.

00:26:48.380 --> 00:26:49.380
Cool.

00:26:49.380 --> 00:26:55.620
So previously I've spoken about LM studio and this is like right in line with what I

00:26:55.620 --> 00:26:57.460
was talking about earlier, the local LLM.

00:26:57.460 --> 00:27:00.660
So download, discover and run local LLMs.

00:27:00.660 --> 00:27:05.860
The way it works is you run this app, then you tell it you basically search hugging face

00:27:05.860 --> 00:27:09.780
models and they get rankings and all that kind of stuff.

00:27:09.780 --> 00:27:11.860
And then it just downloads a whole bunch of them.

00:27:11.860 --> 00:27:13.020
It gives you a chat interface.

00:27:13.020 --> 00:27:19.340
You can say now I want to run Mistral now I want to run fine now I want to run whatever.

00:27:19.340 --> 00:27:20.340
Right.

00:27:20.340 --> 00:27:23.500
You pick the ones you downloaded different sizes, all sorts of things.

00:27:23.500 --> 00:27:31.580
Well, the big deal is LLAMA 3, which is a very powerful but not too big open source

00:27:31.580 --> 00:27:36.860
LLM for Meta is now available locally on LM studio.

00:27:36.860 --> 00:27:42.140
And boy, oh boy, is it good.

00:27:42.140 --> 00:27:43.140
It's really good.

00:27:43.140 --> 00:27:49.100
So like for example, I gave it a segment of a Docker compose file with concrete settings.

00:27:49.100 --> 00:27:57.140
I said, tell me what this does and tell me not just what do these mean, but exactly what

00:27:57.140 --> 00:27:59.260
does each command do?

00:27:59.260 --> 00:28:04.780
Like when it says restart, does it just, and it says restart five times until you consider

00:28:04.780 --> 00:28:05.780
it failed.

00:28:05.780 --> 00:28:08.620
So they just try as fast as it can.

00:28:08.620 --> 00:28:10.660
Does it use, is there some kind of way to set a timeout?

00:28:10.660 --> 00:28:14.340
It's like, oh no, no, it uses an exponential back off and it works like this.

00:28:14.340 --> 00:28:19.300
And here's the formula to compute like, pretty good running locally.

00:28:19.300 --> 00:28:20.300
Highly recommend.

00:28:20.300 --> 00:28:21.300
That's pretty cool.

00:28:21.300 --> 00:28:22.300
Yep.

00:28:22.300 --> 00:28:24.500
So that's my only extra.

00:28:24.500 --> 00:28:29.620
My one extra is just a public service announcement because I run into this all the time.

00:28:29.620 --> 00:28:30.620
I don't know.

00:28:30.620 --> 00:28:35.460
It's a basic Python thing, but this article, Oh, who's it from?

00:28:35.460 --> 00:28:38.020
I should give him his anyway.

00:28:38.020 --> 00:28:40.420
Actually, sorry.

00:28:40.420 --> 00:28:44.860
It's Python gotchas, strip L strip and R strip can remove more than expected.

00:28:44.860 --> 00:28:45.860
And I do this all the time.

00:28:45.860 --> 00:28:46.860
I forget about it.

00:28:46.860 --> 00:28:51.900
So what else strip L strip and R strip do is they take a string and they strip characters

00:28:51.900 --> 00:28:52.900
out of it.

00:28:52.900 --> 00:28:56.940
And if you give it like a word, it doesn't take the word out.

00:28:56.940 --> 00:29:00.980
It takes, it's a, that's a set of characters that it removes.

00:29:00.980 --> 00:29:06.180
And that's not usually what I mean, but Python has what do they have?

00:29:06.180 --> 00:29:09.980
We have remove prefix and remove suffix that you want to use instead.

00:29:09.980 --> 00:29:14.180
So if you, if that's what you want to do, if you just want to remove something off the

00:29:14.180 --> 00:29:18.660
beginning of the, of a string, use remove suffix, remove prefix.

00:29:18.660 --> 00:29:24.420
And I bring this up because I always run into it and, and then in, in my little test

00:29:24.420 --> 00:29:28.340
example it works and then I put it in a bigger project and it doesn't work.

00:29:28.340 --> 00:29:29.700
What's going on?

00:29:29.700 --> 00:29:30.700
So that's it.

00:29:30.700 --> 00:29:31.700
That's it.

00:29:31.700 --> 00:29:32.700
PSA.

00:29:32.700 --> 00:29:33.700
Yeah.

00:29:34.700 --> 00:29:35.700
That's it.

00:29:36.700 --> 00:29:37.700
I'm just kidding.

00:29:37.700 --> 00:29:39.380
If you could start over, I think it would be awesome that L strip and R strip and all

00:29:39.380 --> 00:29:43.980
those things could take two keyword arguments that were required as keyword.

00:29:43.980 --> 00:29:47.980
One is characters and another is a substrings or something.

00:29:47.980 --> 00:29:52.180
You just say characters equal this or substring equals that or something.

00:29:52.180 --> 00:29:57.140
But you know, even changing keyword names, primary names is breaking because you can

00:29:57.140 --> 00:29:58.540
explicitly state them.

00:29:58.540 --> 00:29:59.540
So.

00:29:59.540 --> 00:30:00.540
Well, yeah.

00:30:00.540 --> 00:30:04.140
And it's, it's a different interesting thing because strings are iterable.

00:30:04.140 --> 00:30:08.380
So like, because sometimes I really do want what it does.

00:30:08.380 --> 00:30:13.660
Like sometimes I want to take out the, like the dashes out of a string or something

00:30:13.660 --> 00:30:14.660
like that.

00:30:14.660 --> 00:30:15.660
But yeah.

00:30:15.660 --> 00:30:16.660
Anyway.

00:30:16.660 --> 00:30:17.660
All right.

00:30:17.660 --> 00:30:18.660
Oh, let's see.

00:30:18.660 --> 00:30:19.660
Who, who's this from?

00:30:19.660 --> 00:30:21.140
This is Andrew Wagner, Andrew.

00:30:21.140 --> 00:30:22.140
So thanks Andrew.

00:30:22.140 --> 00:30:23.140
All right.

00:30:23.140 --> 00:30:24.140
Something funny.

00:30:24.140 --> 00:30:25.140
Oh, I got some funny today.

00:30:25.140 --> 00:30:28.140
I had a couple of funny.

00:30:28.140 --> 00:30:30.580
So let's start with the traditional style of funny.

00:30:30.580 --> 00:30:33.020
So this comes to us from dev humor.

00:30:33.020 --> 00:30:39.700
And both you and I work on courses, but a ton of energy and we don't charge that much

00:30:39.700 --> 00:30:40.700
money for them.

00:30:40.700 --> 00:30:45.540
But here's kind of a paradox or, or something.

00:30:45.540 --> 00:30:51.700
So this is the post that says developers will spend $150,000 on a computer science degree.

00:30:51.700 --> 00:30:54.620
Then they go and they go and learn JavaScript on YouTube for free.

00:30:54.620 --> 00:30:57.020
We'll pay 20 bucks for it.

00:30:57.020 --> 00:30:58.020
Basically.

00:30:58.020 --> 00:30:59.020
Yeah.

00:31:00.020 --> 00:31:02.740
Like of course you get that too.

00:31:02.740 --> 00:31:03.740
Right.

00:31:03.740 --> 00:31:06.140
People say, can I get it for cheaper?

00:31:06.140 --> 00:31:07.140
Yeah.

00:31:07.140 --> 00:31:11.900
And then I've been playing with Pyjoke, the actual Python API, not the CLI of it.

00:31:11.900 --> 00:31:17.900
And did you know that in Pyjoke you can specify a category and one of the categories is Chuck

00:31:17.900 --> 00:31:18.900
Norris.

00:31:18.900 --> 00:31:19.900
So let me read you.

00:31:19.900 --> 00:31:23.180
I'm just going to get like five, five Chuck Norris programming jokes for you.

00:31:23.180 --> 00:31:24.180
Are you ready for this?

00:31:24.180 --> 00:31:25.180
This one is right, right down your alley.

00:31:25.180 --> 00:31:26.180
The first one.

00:31:26.180 --> 00:31:27.180
Okay.

00:31:27.180 --> 00:31:29.500
Chuck Norris's unit tests don't run.

00:31:29.500 --> 00:31:30.500
They die.

00:31:30.500 --> 00:31:36.100
Let me have a hit if you are good.

00:31:36.100 --> 00:31:37.100
Okay.

00:31:37.100 --> 00:31:38.100
This one's pretty good.

00:31:38.100 --> 00:31:41.540
Chuck Norris doesn't need to use Ajax for JavaScript postbacks.

00:31:41.540 --> 00:31:47.940
Chuck Norris doesn't need to use Ajax because pages are too afraid to post back anyway.

00:31:47.940 --> 00:31:49.980
Chuck Norris can dereference null.

00:31:49.980 --> 00:31:50.980
Okay.

00:31:50.980 --> 00:31:54.500
That's, that's my favorite so far.

00:31:54.500 --> 00:31:56.500
Hold on.

00:31:56.500 --> 00:32:00.500
Okay.

00:32:00.500 --> 00:32:13.940
Last one.

00:32:13.940 --> 00:32:16.220
Chuck Norris's programs never exit.

00:32:16.220 --> 00:32:17.220
They are terminate.

00:32:17.220 --> 00:32:18.220
Okay.

00:32:18.220 --> 00:32:19.220
That's pretty good.

00:32:19.220 --> 00:32:20.220
Yeah.

00:32:20.220 --> 00:32:27.340
So anyway, if you pass the Chuck category to PI jokes, plural, not PI jokes singular,

00:32:27.340 --> 00:32:28.340
pretty awesome.

00:32:28.340 --> 00:32:31.140
Oh, those are, those two different things.

00:32:31.140 --> 00:32:33.140
Well, oh yeah.

00:32:33.140 --> 00:32:40.980
One is like a expired version from 2014 and jokes as at least been updated in 2019.

00:32:40.980 --> 00:32:41.980
Okay.

00:32:41.980 --> 00:32:42.980
Yeah.

00:32:42.980 --> 00:32:43.980
All right.

00:32:43.980 --> 00:32:46.380
Looking for contributors there, man.

00:32:46.380 --> 00:32:47.380
Exactly.

00:32:47.380 --> 00:32:48.380
Sure.

00:32:48.380 --> 00:32:51.140
We can get a few more of these.

00:32:51.140 --> 00:32:55.900
No one has ever paired program with Chuck Norris and live to tell the tale.

00:32:55.900 --> 00:32:58.540
We can tell the tale of the podcast, Brian.

00:32:58.540 --> 00:32:59.540
Yeah.

00:32:59.540 --> 00:33:03.500
Well, next week, are you back in town or?

00:33:03.500 --> 00:33:05.020
I am back in town.

00:33:05.020 --> 00:33:06.020
Okay.

00:33:06.020 --> 00:33:07.140
Everything is back to normal.

00:33:07.140 --> 00:33:08.140
So glad.

00:33:08.140 --> 00:33:09.860
We'll talk to everybody next week.

00:33:09.860 --> 00:33:10.860
Yeah.

00:33:10.860 --> 00:33:11.860
I'm glad we're able to do the show anyway.

00:33:11.860 --> 00:33:12.860
So yeah.

00:33:12.860 --> 00:33:13.860
Yeah.

00:33:13.860 --> 00:33:14.860
Good to see you.

00:33:14.860 --> 00:33:15.860
Bye.

00:33:15.860 --> 00:33:15.860
Bye.

