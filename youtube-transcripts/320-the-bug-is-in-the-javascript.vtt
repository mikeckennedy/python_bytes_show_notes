WEBVTT

00:00:00.000 --> 00:00:08.760
Hey Brian. Hey everybody. Hello YouTube. Everyone who is here watching live, thanks for being


00:00:08.760 --> 00:00:17.680
here. Let us know if you got comments, feedbacks as always. And with that, my dog doesn't go


00:00:17.680 --> 00:00:21.800
completely bonkers which is a likelihood for those of you watching live. I'll edit that


00:00:21.800 --> 00:00:29.800
out, of course. We'll get started in just a second. All right. Brian, you ready?


00:00:29.800 --> 00:00:32.840
>> I am ready. >> All right.


00:00:32.840 --> 00:00:37.000
>> Yep. >> Hello, and welcome to Python Bytes, where


00:00:37.000 --> 00:00:42.760
we deliver Python news and headlines directly to your earbuds. This is episode 320, recorded


00:00:42.760 --> 00:00:48.480
January 24th, 2023. I'm Michael Kennedy. >> And I'm Brian Okken.


00:00:48.480 --> 00:00:52.500
This episode is sponsored by us over at Talk Python Training


00:00:52.500 --> 00:00:54.700
and Testing Code and Patreon supporters.


00:00:54.700 --> 00:00:56.700
We'll talk more about all that


00:00:56.700 --> 00:00:58.760
in a little bit further into the show.


00:00:58.760 --> 00:01:01.380
And also, yes, for those of you listening live,


00:01:01.380 --> 00:01:03.600
you already know this, but for most people,


00:01:03.600 --> 00:01:06.260
they may not know that we're live streaming this on YouTube.


00:01:06.260 --> 00:01:10.300
And if you just go to pythonbytes.fm/stream/live,


00:01:10.300 --> 00:01:12.660
then you'll be able to follow over there.


00:01:12.660 --> 00:01:15.420
Usually on Tuesdays at 11 Pacific time,


00:01:15.420 --> 00:01:18.040
which it is right now, you can be part of the show.


00:01:18.040 --> 00:01:19.940
That's how some of the folks are in the audience.


00:01:19.940 --> 00:01:22.980
So hopefully you go over there and subscribe on YouTube


00:01:22.980 --> 00:01:24.380
and press the notify so you know


00:01:24.380 --> 00:01:27.280
when we're posting live streams.


00:01:27.280 --> 00:01:30.580
And with that, let's get going, Brian.


00:01:30.580 --> 00:01:31.620
Let's mark it down. - Okay.


00:01:31.620 --> 00:01:33.200
I'm gonna talk about markdown a little bit


00:01:33.200 --> 00:01:35.680
while you're queuing up your next item.


00:01:35.680 --> 00:01:38.440
So I'm gonna get ready for next time.


00:01:38.440 --> 00:01:41.020
So let's see, first off, I wanna talk.


00:01:41.020 --> 00:01:46.820
We do pay attention to Rich and Will McGugan in the show,


00:01:46.820 --> 00:01:48.780
And I'm not going to talk about them too much,


00:01:48.780 --> 00:01:54.460
except for that I noticed that Rich updated--


00:01:54.460 --> 00:01:58.140
we got a release note that they updated their Markdown parser


00:01:58.140 --> 00:02:02.820
and from something called Common Mark, which


00:02:02.820 --> 00:02:07.060
I was familiar with, to Markdown It Pi.


00:02:07.060 --> 00:02:09.460
And I was curious about this.


00:02:09.460 --> 00:02:11.380
So I went and took a look.


00:02:11.380 --> 00:02:16.260
So the Common Mark library, if we go take a look at that,


00:02:16.260 --> 00:02:20.660
that's up on PyPI, Common Mark, no big deal.


00:02:20.660 --> 00:02:24.140
But if we go look at the source in GitHub,


00:02:24.140 --> 00:02:26.860
it says this repository has been archived


00:02:26.860 --> 00:02:30.700
by the owner on November of 2022.


00:02:30.700 --> 00:02:31.540
Oops.


00:02:31.540 --> 00:02:34.700
And if we look down a little bit further,


00:02:34.700 --> 00:02:36.940
it says, "Warning, it's deprecated.


00:02:36.940 --> 00:02:39.980
"We recommend using Common Mark down it, hi."


00:02:39.980 --> 00:02:44.420
And okay, I haven't used it, so I wanted to go take a look.


00:02:44.420 --> 00:02:48.580
So Markdownit, I think I'm saying that right,


00:02:48.580 --> 00:02:51.740
is it's built on top of another,


00:02:51.740 --> 00:02:53.920
it's another Markdownit tool.


00:02:53.920 --> 00:02:55.740
So Markdownit is its own tool


00:02:55.740 --> 00:02:59.160
and the Markdownit-py is a Python wrapper around it.


00:02:59.160 --> 00:03:00.320
So great.


00:03:00.320 --> 00:03:03.980
So it's, do we have to worry about this one


00:03:03.980 --> 00:03:06.500
going out of fashion as well?


00:03:06.500 --> 00:03:08.260
And I think we're probably safe


00:03:08.260 --> 00:03:12.140
because the project this is a part of executable books


00:03:12.140 --> 00:03:16.100
and executable books is a project to try to build


00:03:16.100 --> 00:03:18.260
more collaboration with Jupyter notebooks.


00:03:18.260 --> 00:03:19.720
So I think we're safe now.


00:03:19.720 --> 00:03:23.600
So to use Markdown for PI for a while.


00:03:23.600 --> 00:03:27.400
And I just did a quick, there's a live demo thing.


00:03:27.400 --> 00:03:30.980
There's converting Markdown.


00:03:30.980 --> 00:03:33.240
It's kind of a nice package.


00:03:33.240 --> 00:03:34.240
You can do it by itself.


00:03:34.240 --> 00:03:38.040
You can convert from Markdown to HTML on the command line,


00:03:38.040 --> 00:03:40.440
Or you can use it within your code.


00:03:40.440 --> 00:03:42.000
So you can use--


00:03:42.000 --> 00:03:45.440
and it's got some nice features for in code,


00:03:45.440 --> 00:03:47.160
pulling in different plugins and stuff


00:03:47.160 --> 00:03:49.280
if you have different specialties.


00:03:49.280 --> 00:03:51.680
And if we go back to the original release,


00:03:51.680 --> 00:03:54.160
one of the reasons why they did it wasn't just--


00:03:54.160 --> 00:03:56.280
the reasons why Rich started using it


00:03:56.280 --> 00:04:02.320
isn't just because the common mark's been deprecated.


00:04:02.320 --> 00:04:05.560
But they say it will allow us to implement


00:04:05.560 --> 00:04:08.200
a number of additional Markdown features in the future.


00:04:08.200 --> 00:04:09.760
So this is pretty exciting.


00:04:09.760 --> 00:04:13.800
And yeah, I don't know a lot about Markdown it,


00:04:13.800 --> 00:04:15.880
but I am gonna check it out.


00:04:15.880 --> 00:04:16.920
So this is--


00:04:16.920 --> 00:04:19.040
- Well, if it's used by executable books


00:04:19.040 --> 00:04:20.540
and it's used by Rich,


00:04:20.540 --> 00:04:25.540
I think that those are some pretty solid endorsements for it.


00:04:25.540 --> 00:04:28.800
I saw that it got installed as well and I wasn't sure why,


00:04:28.800 --> 00:04:30.680
but now I see that it's from Rich.


00:04:30.680 --> 00:04:32.840
- Yeah, so--


00:04:32.840 --> 00:04:34.880
I use Markdown too,


00:04:34.880 --> 00:04:36.760
and I have no idea what the status of it is,


00:04:36.760 --> 00:04:41.680
but there is so much of our website that runs on Markdown,


00:04:41.680 --> 00:04:45.280
like every episode page you visit, that's a Markdown page.


00:04:45.280 --> 00:04:46.560
There's a bunch on Talk Python,


00:04:46.560 --> 00:04:48.320
a whole bunch of Talk Python Training.


00:04:48.320 --> 00:04:51.400
So anything that's better for Markdown,


00:04:51.400 --> 00:04:54.920
I'd definitely be wanting to give that a look.


00:04:54.920 --> 00:04:57.360
- Well, and I don't want everybody using the same thing


00:04:57.360 --> 00:05:00.760
because we do want some different tools


00:05:00.760 --> 00:05:03.200
to build on each other and stuff.


00:05:03.200 --> 00:05:05.840
- Indeed.


00:05:05.840 --> 00:05:08.200
All right, should I sketch out the next idea for you?


00:05:08.200 --> 00:05:11.240
- Yeah, let's take a look.


00:05:11.240 --> 00:05:15.120
- Let's take a look, oh my God, this is fantastic.


00:05:15.120 --> 00:05:17.720
So this was sent over by Jake Furman.


00:05:17.720 --> 00:05:22.320
And Jake said, "Have you seen Sketch?"


00:05:22.320 --> 00:05:26.740
So we've seen a lot of AI coding assistants.


00:05:26.740 --> 00:05:31.660
We've talked about the potential bordering


00:05:31.660 --> 00:05:36.660
on violating license agreements and stuff of GitHub Copilot.


00:05:36.660 --> 00:05:39.940
Everyone has surely heard about ChatGPT.


00:05:39.940 --> 00:05:41.460
I have friends who are not even in programming.


00:05:41.460 --> 00:05:43.340
They come, "Michael, I'm working on some programming thing


00:05:43.340 --> 00:05:44.740
"'cause of ChatGPT."


00:05:44.740 --> 00:05:47.180
I'm like, "All right, well, interesting."


00:05:47.180 --> 00:05:48.980
We'll see where all that stuff goes.


00:05:48.980 --> 00:05:53.420
But this thing called Sketch is like a simple view,


00:05:53.420 --> 00:05:57.620
a simple way to ask natural language questions


00:05:57.620 --> 00:06:00.880
of your data that's contained in a pandas data frame.


00:06:00.880 --> 00:06:03.020
- Ooh.


00:06:03.020 --> 00:06:03.920
- Yeah. - Okay.


00:06:03.920 --> 00:06:07.020
- So the way it works is you go and


00:06:07.020 --> 00:06:10.120
it's not built into the editor.


00:06:10.120 --> 00:06:14.500
It's part of monkey patches, I believe pandas,


00:06:14.500 --> 00:06:18.460
so it adds a function to pandas called, I think, ask.


00:06:18.460 --> 00:06:21.620
Let's see, what is the way we, yeah,


00:06:21.620 --> 00:06:25.240
dot sketch dot ask or dot sketch dot how to


00:06:25.240 --> 00:06:26.900
or sketch dot apply.


00:06:26.900 --> 00:06:29.060
So these are the different kinds of prompts


00:06:29.060 --> 00:06:30.380
that you can give it.


00:06:30.380 --> 00:06:31.300
Okay?


00:06:31.300 --> 00:06:32.140
- Okay.


00:06:32.140 --> 00:06:33.240
- So you just pip install this.


00:06:33.240 --> 00:06:35.920
And once it's pip installed and you import it,


00:06:35.920 --> 00:06:37.420
that's all you gotta do.


00:06:37.420 --> 00:06:40.740
And it lets you ask data cataloging questions


00:06:40.740 --> 00:06:44.140
like is there any personally identifiable information,


00:06:44.140 --> 00:06:45.660
PII within here?


00:06:45.660 --> 00:06:48.360
Like is there a phone number or is there an email address


00:06:48.360 --> 00:06:50.260
or is there a social security number?


00:06:51.220 --> 00:06:52.820
This could be some big, large data set


00:06:52.820 --> 00:06:55.200
and you don't wanna save necessarily that or share it.


00:06:55.200 --> 00:06:58.280
You can ask it and it'll ask you how to,


00:06:58.280 --> 00:07:00.640
it'll basically tell you how to get rid of it as well.


00:07:00.640 --> 00:07:04.920
Also, give me descriptions of this data set.


00:07:04.920 --> 00:07:08.520
Okay, which is nuts.


00:07:08.520 --> 00:07:10.820
It also does data cleaning and masking


00:07:10.820 --> 00:07:13.080
to, for example, removing the PII.


00:07:13.080 --> 00:07:17.220
And it'll extract some features


00:07:17.220 --> 00:07:18.620
and just lets you visualize stuff.


00:07:18.620 --> 00:07:22.140
So the best way to do this is to watch


00:07:22.140 --> 00:07:26.120
this one and a half minute video here.


00:07:26.120 --> 00:07:26.960
And so what you do,


00:07:26.960 --> 00:07:28.020
and what it shows you is it says,


00:07:28.020 --> 00:07:31.180
here's a pandas data frame read from a CSV,


00:07:31.180 --> 00:07:34.420
and it's got like an order ID and a price


00:07:34.420 --> 00:07:36.620
and a date and an address.


00:07:36.620 --> 00:07:40.600
And they just say, data frame.sketch.


00:07:40.600 --> 00:07:44.500
Is there any personalizing information


00:07:44.500 --> 00:07:45.540
or any personal information?


00:07:45.540 --> 00:07:46.520
This is yes, these fields.


00:07:46.520 --> 00:07:48.100
And it says, how can I remove it?


00:07:48.100 --> 00:07:51.140
And so it writes out the code, you just copy and paste that.


00:07:51.140 --> 00:07:52.820
Boom, now it's removed.


00:07:52.820 --> 00:07:55.060
And then it says, give me a friendly,


00:07:55.060 --> 00:07:57.060
let's see if I can pause this real quick.


00:07:57.060 --> 00:07:59.100
It says,


00:07:59.100 --> 00:08:03.660
can you give me friendly names?


00:08:03.660 --> 00:08:04.500
Stop moving.


00:08:04.500 --> 00:08:05.780
Can you give me friendly names


00:08:05.780 --> 00:08:08.140
in a single sentence description of each column?


00:08:08.140 --> 00:08:09.780
Format output as an HTML list.


00:08:09.780 --> 00:08:13.420
And boom, it says index, numerical index, da da da da da.


00:08:13.420 --> 00:08:15.460
Product, the product purchase in each order.


00:08:15.460 --> 00:08:17.840
Order ID, a unique identifier for each order,


00:08:17.840 --> 00:08:19.580
purchase address, the address of the customer


00:08:19.580 --> 00:08:22.520
who placed the order and so on and so on.


00:08:22.520 --> 00:08:23.360
- Nice.


00:08:23.360 --> 00:08:24.680
- Isn't that neat?


00:08:24.680 --> 00:08:25.520
- Yeah.


00:08:25.520 --> 00:08:29.920
- Yeah, so when it spits out the answer,


00:08:29.920 --> 00:08:32.160
it puts a little copy tag so you can copy.


00:08:32.160 --> 00:08:34.000
You can ask it, how do I do this?


00:08:34.000 --> 00:08:36.080
You know, how to extract city, state and zip


00:08:36.080 --> 00:08:38.120
from the address, which is a single string.


00:08:38.120 --> 00:08:41.440
And it writes, it writes the code


00:08:41.440 --> 00:08:44.840
to like do the split statements to pull it apart.


00:08:44.840 --> 00:08:47.320
telling you this thing is, you know, it's not going to be


00:08:47.320 --> 00:08:50.440
perfect. But it's going to be pretty good. It's pretty


00:08:50.440 --> 00:08:52.760
interesting to just jump in. What do you think?


00:08:52.760 --> 00:08:56.800
I think it's great. Hey, sketch. How do I remove the data that


00:08:56.800 --> 00:08:58.400
disproves my hypothesis?


00:08:58.400 --> 00:09:04.680
Exactly. I'm gonna need the data that shows a downward trend


00:09:04.680 --> 00:09:10.880
here. Can you extract just those rows? Anyway, people can check


00:09:10.880 --> 00:09:12.720
I think it's pretty neat.


00:09:12.720 --> 00:09:17.520
It says, "In the future, we plan to update the prompt


00:09:17.520 --> 00:09:21.380
at this endpoint with our own custom foundation model


00:09:21.380 --> 00:09:23.480
built to answer questions more accurately


00:09:23.480 --> 00:09:28.480
than GPT-3 can with its minimal data context."


00:09:28.480 --> 00:09:31.160
So, because it doesn't know a lot about your data.


00:09:31.160 --> 00:09:36.160
You can also directly call OpenAI directly, it says,


00:09:36.160 --> 00:09:40.520
and not use their endpoint by using your own API key.


00:09:40.520 --> 00:09:43.120
So there's that.


00:09:43.120 --> 00:09:44.500
And anyway, it talks about how it works


00:09:44.500 --> 00:09:45.840
and what it sends over and stuff.


00:09:45.840 --> 00:09:46.680
So.


00:09:46.680 --> 00:09:48.660
- This is pretty powerful though.


00:09:48.660 --> 00:09:51.220
Because there's so much data for people using


00:09:51.220 --> 00:09:55.220
and different things, we kind of expect it now.


00:09:55.220 --> 00:09:58.780
I was working on a project just recently


00:09:58.780 --> 00:10:02.460
where somebody, things like to test result analysis


00:10:02.460 --> 00:10:04.940
and a question of like, can we just put


00:10:04.940 --> 00:10:08.120
natural language strings in there to query it?


00:10:08.120 --> 00:10:08.960
Why do we have to?


00:10:08.960 --> 00:10:11.620
And so people are kind of expecting this


00:10:11.620 --> 00:10:12.780
all over the place now.


00:10:12.780 --> 00:10:16.040
- Yeah, I just wanna highlight just the last one there.


00:10:16.040 --> 00:10:20.580
It says, go to the data frame, sketched on how to,


00:10:20.580 --> 00:10:24.220
using Plotly, plot a map of the total sales in each state.


00:10:24.220 --> 00:10:27.940
Boom, you get a perfectly, perfect interactive map,


00:10:27.940 --> 00:10:32.120
a geographical map of the United States.


00:10:32.120 --> 00:10:35.260
Like that's pretty neat.


00:10:35.260 --> 00:10:36.420
- Yeah.


00:10:36.420 --> 00:10:37.660
- To be able to just jump in and do that.


00:10:37.660 --> 00:10:39.940
Like sure, you could go search and look that up,


00:10:39.940 --> 00:10:44.940
but you know, instead of just doing df.head, df.tail


00:10:44.940 --> 00:10:48.860
and so on, like how to?


00:10:48.860 --> 00:10:51.180
- I could think I'm ready to hang up a shingle


00:10:51.180 --> 00:10:55.300
for like a data science side job.


00:10:55.300 --> 00:10:56.940
- I'm pretty sure that you and I could pass


00:10:56.940 --> 00:11:00.260
as at least junior data scientists now.


00:11:00.260 --> 00:11:02.060
- Just with this, yeah.


00:11:02.060 --> 00:11:06.500
- Anyway, I think this is pretty cool.


00:11:06.500 --> 00:11:08.500
I'm pretty psyched about it.


00:11:08.500 --> 00:11:09.340
- It's pretty cool.


00:11:09.340 --> 00:11:10.180
- Yeah.


00:11:10.180 --> 00:11:11.000
- People should check it out.


00:11:11.000 --> 00:11:13.220
From what I can tell, it doesn't cost anything.


00:11:13.220 --> 00:11:17.020
So just play with it, which is really nice.


00:11:17.020 --> 00:11:18.580
And also, before we move on,


00:11:18.580 --> 00:11:20.460
I just wanna tell people that this episode


00:11:20.460 --> 00:11:23.140
is brought to you by us, Brian.


00:11:23.140 --> 00:11:25.540
So there's a whole bunch of Python courses


00:11:25.540 --> 00:11:28.460
that if you get inspired over at Talk Python Training,


00:11:28.460 --> 00:11:31.580
we've got the Python 3.11 guided tour,


00:11:31.580 --> 00:11:33.000
which a couple hours of hands-on,


00:11:33.000 --> 00:11:34.320
showing why that's awesome.


00:11:34.320 --> 00:11:35.860
Python data visualization.


00:11:35.860 --> 00:11:37.460
So if the sketch stuff was interesting,


00:11:37.460 --> 00:11:38.860
like there's a bunch of that there.


00:11:38.860 --> 00:11:41.860
And oh, there's also something on pytest, isn't there?


00:11:41.860 --> 00:11:44.060
- Yeah, highly recommend that course.


00:11:44.060 --> 00:11:44.900
It's great.


00:11:44.900 --> 00:11:46.420
- I do as well.


00:11:46.420 --> 00:11:47.780
All right, so if you wanna support us,


00:11:47.780 --> 00:11:50.580
the best way you can do it is to support our other work


00:11:50.580 --> 00:11:53.140
as well as share the podcasts with your friends.


00:11:53.140 --> 00:11:55.700
So thank you, thank you, thank you for that.


00:11:55.700 --> 00:11:57.660
- Yes, I also wanna thank the Patreon people


00:11:57.660 --> 00:11:59.320
'cause they're, it's great.


00:11:59.320 --> 00:12:00.540
We don't really talk about it much,


00:12:00.540 --> 00:12:02.540
but you can support us through Patreon as well


00:12:02.540 --> 00:12:04.580
and we very much appreciate it.


00:12:04.580 --> 00:12:05.420
- Absolutely.


00:12:05.420 --> 00:12:08.340
All right, what you got for our next one, Brian?


00:12:08.340 --> 00:12:10.180
- Well, I wanna go in circles a little bit,


00:12:10.180 --> 00:12:13.700
actually going back to the year 2021.


00:12:13.700 --> 00:12:18.540
No, in 2021, we covered a article by Hinnick


00:12:18.540 --> 00:12:22.780
called "Subclassing in Python Redux."


00:12:22.780 --> 00:12:25.300
And it's a great article to talk about


00:12:25.300 --> 00:12:30.300
like just how subclassing and dealing with classes in Python


00:12:30.300 --> 00:12:32.740
and just to get your head around it.


00:12:32.740 --> 00:12:35.540
So I did read it and I enjoyed it.


00:12:35.540 --> 00:12:38.780
And then this year I came across the problem


00:12:38.780 --> 00:12:40.700
and I'm like, I think I can solve it


00:12:40.700 --> 00:12:42.780
with something I read in this article.


00:12:42.780 --> 00:12:46.100
So I'm gonna scroll down to the thing specifically


00:12:46.100 --> 00:12:50.180
and it's called, so we have nominal subtyping


00:12:50.180 --> 00:12:51.820
with abstract base classes.


00:12:51.820 --> 00:12:56.180
I tried that, but I decided to go with structural subtyping.


00:12:56.180 --> 00:12:58.800
And with structural subtyping, basically,


00:13:00.980 --> 00:13:03.760
my understanding is it's like duck typing,


00:13:03.760 --> 00:13:06.600
but with like, it's like strict duck typing.


00:13:06.600 --> 00:13:10.540
And it says here, as you can see,


00:13:10.540 --> 00:13:15.760
if you've got something calling two things,


00:13:15.760 --> 00:13:17.080
two classes talking to each other,


00:13:17.080 --> 00:13:18.940
one of them doesn't have to know about the other.


00:13:18.940 --> 00:13:22.380
So in this example, we've got a reader and a foo reader,


00:13:22.380 --> 00:13:26.680
and it's just a reader protocol.


00:13:26.680 --> 00:13:29.940
We just need to know that there's a reader protocol here.


00:13:29.940 --> 00:13:33.060
So I kind of like, I just knew this was here


00:13:33.060 --> 00:13:35.620
and I'm like, how do I apply this?


00:13:35.620 --> 00:13:37.860
So I went ahead and wrote up an article


00:13:37.860 --> 00:13:41.900
called fixing circular imports in Python with protocol.


00:13:41.900 --> 00:13:43.720
And this is directly from this.


00:13:43.720 --> 00:13:47.700
So it's just a zoom in on one special case.


00:13:47.700 --> 00:13:51.700
I really have, like if I've got a class director and actor


00:13:51.700 --> 00:13:53.800
and they talk to each other.


00:13:53.800 --> 00:13:57.580
So director tells an actor to do an action, no big deal.


00:13:57.580 --> 00:13:59.540
It has to import the actor, right?


00:13:59.540 --> 00:14:01.660
So the actor gets a director.


00:14:01.660 --> 00:14:04.520
So I'm gonna, it gets data from the director.


00:14:04.520 --> 00:14:07.580
And so it has to be able to call it.


00:14:07.580 --> 00:14:09.060
Well, I could just pass it in self.


00:14:09.060 --> 00:14:11.740
And since we have duck typing, it all works fine.


00:14:11.740 --> 00:14:14.820
That we just call director, get data.


00:14:14.820 --> 00:14:16.580
So far we have no types.


00:14:16.580 --> 00:14:18.760
That the problem comes in when we have types.


00:14:18.760 --> 00:14:20.920
If we add types to the whole mix,


00:14:20.920 --> 00:14:26.960
then when we add types to the director,


00:14:27.260 --> 00:14:29.620
It's no big deal, we just add types to everything.


00:14:29.620 --> 00:14:32.360
But to add types to the actor,


00:14:32.360 --> 00:14:33.860
suddenly the actor needs to know


00:14:33.860 --> 00:14:35.680
what type the director is.


00:14:35.680 --> 00:14:37.640
And that's where we get the problem.


00:14:37.640 --> 00:14:39.940
And that's exactly the kind of problem


00:14:39.940 --> 00:14:43.460
that I ran into is I wanted to add typing to this,


00:14:43.460 --> 00:14:46.900
to a similar problem and it blows up.


00:14:46.900 --> 00:14:48.420
It actually blows up really bad.


00:14:48.420 --> 00:14:50.860
Python just says you can't do that.


00:14:50.860 --> 00:14:52.000
It's circular import.


00:14:52.000 --> 00:14:56.760
So the protocol solution is really slick


00:14:56.760 --> 00:14:59.800
I'm going to scroll down to the answer.


00:14:59.800 --> 00:15:04.920
The answer is just, I just need a little bit of a snippet of code that says,


00:15:04.920 --> 00:15:09.160
I've got this class that is derived from protocol,


00:15:09.160 --> 00:15:11.660
but it's just got a get data function.


00:15:11.660 --> 00:15:14.280
And that's all I know about it. I know what it returns,


00:15:14.280 --> 00:15:18.360
and that's all I know. And I can say that my director really is that type.


00:15:18.360 --> 00:15:22.480
And that's it. The actor has to change to say what type it is.


00:15:22.480 --> 00:15:25.520
And the rest of the code just works.


00:15:25.520 --> 00:15:28.160
And I don't have to change the director.


00:15:28.160 --> 00:15:30.000
I don't have to change the test code.


00:15:30.000 --> 00:15:34.320
It's just this one file that I'm changing.


00:15:34.320 --> 00:15:38.400
And I like this because I'm adding typing.


00:15:38.400 --> 00:15:40.720
I'm not changing the code at all.


00:15:40.720 --> 00:15:42.200
And the only thing is that--


00:15:42.200 --> 00:15:46.640
yeah, anyway, it's a slick way to use it.


00:15:46.640 --> 00:15:47.800
I think so, too.


00:15:47.800 --> 00:15:49.720
It's a little bit like interfaces,


00:15:49.720 --> 00:15:54.720
but less in the traditional Java or C#,


00:15:54.720 --> 00:15:57.960
the IEnumerable or whatever type of interfaces.


00:15:57.960 --> 00:16:01.800
Yeah, and then Hinnik goes through


00:16:01.800 --> 00:16:06.040
abstract base classes also, and that's one thing you could do,


00:16:06.040 --> 00:16:09.880
is you could have a base class that has this getData function,


00:16:09.880 --> 00:16:13.080
and both the director and the actor know about the base class,


00:16:13.080 --> 00:16:15.720
but you don't really need that.


00:16:15.720 --> 00:16:18.880
Nobody else needs to know that except for this one file,


00:16:18.880 --> 00:16:21.380
So protocol is a nice hack.


00:16:21.380 --> 00:16:21.920
>>Interesting.


00:16:21.920 --> 00:16:22.420
Yeah.


00:16:22.420 --> 00:16:23.840
Jonathan in the audience is asking,


00:16:23.840 --> 00:16:27.720
why not just use abstract base classes?


00:16:27.720 --> 00:16:28.560
>>They both work.


00:16:28.560 --> 00:16:30.440
So it's just a personal preference thing.


00:16:30.440 --> 00:16:33.080
So yeah.


00:16:33.080 --> 00:16:35.120
>>And Kim in the audience is asking,


00:16:35.120 --> 00:16:37.680
as a question of style, do you prefer an ellipsis


00:16:37.680 --> 00:16:42.720
over the keyword past to indicate an empty function?


00:16:42.720 --> 00:16:47.640
>>Well, I'm warming to the ellipsis a lot


00:16:47.640 --> 00:16:49.980
because I write a lot of test code


00:16:49.980 --> 00:16:53.120
and I write a lot of example test code.


00:16:53.120 --> 00:16:58.120
And if I say an empty function that is a test function


00:16:58.120 --> 00:17:01.400
and I use dot, dot, dot,


00:17:01.400 --> 00:17:05.120
it's clear that I'm not finishing it.


00:17:05.120 --> 00:17:07.160
Whereas if I say pass,


00:17:07.160 --> 00:17:09.280
I've actually had some people get confused


00:17:09.280 --> 00:17:12.700
and think that the pass keyword is how you pass a test.


00:17:12.700 --> 00:17:16.200
It's not.


00:17:16.200 --> 00:17:17.640
(both laughing)


00:17:17.640 --> 00:17:19.440
- We can be, if you've got no--


00:17:19.440 --> 00:17:21.800
- Well, you're not gonna raise an error in that test method


00:17:21.800 --> 00:17:22.700
if you got a pass in there.


00:17:22.700 --> 00:17:25.080
I mean, it's sort of a way to pass it.


00:17:25.080 --> 00:17:25.920
- Yeah.


00:17:25.920 --> 00:17:28.520
Anyway.


00:17:28.520 --> 00:17:29.760
- Yeah, I kinda like it too to say,


00:17:29.760 --> 00:17:31.640
look, I don't want anything here.


00:17:31.640 --> 00:17:33.440
I don't intend to come back and fill it out.


00:17:33.440 --> 00:17:35.800
Just, this is it.


00:17:35.800 --> 00:17:38.320
- And it kinda matches, the ellipses match


00:17:38.320 --> 00:17:43.320
how we do like type stubs as well.


00:17:43.320 --> 00:17:45.280
I think I'll use ellipses,


00:17:45.280 --> 00:17:47.580
but I don't know if they have to.


00:17:47.580 --> 00:17:49.720
- I think they do as well.


00:17:49.720 --> 00:17:51.480
Like if you go and look at TypeShed


00:17:51.480 --> 00:17:54.640
and you look at the stubs in there,


00:17:54.640 --> 00:17:58.440
like let me just grab one rando.


00:17:58.440 --> 00:18:03.120
Yeah, all those have dot, dot, dots.


00:18:03.120 --> 00:18:05.400
Dot, dot, dots for their default value,


00:18:05.400 --> 00:18:07.520
dot, dot, dot for the implementation.


00:18:07.520 --> 00:18:09.520
They're kind of gnarly looking if you open them up,


00:18:09.520 --> 00:18:10.880
but there they are.


00:18:10.880 --> 00:18:15.120
So yeah, to me, I kind of feel like I'm matching the stub.


00:18:15.120 --> 00:18:15.960
- Yeah. - Definition,


00:18:15.960 --> 00:18:17.960
like I don't intend anything to be here.


00:18:17.960 --> 00:18:18.880
Yeah. - Exactly.


00:18:18.880 --> 00:18:22.200
- Right. All right.


00:18:22.200 --> 00:18:23.120
Ready for the next one?


00:18:23.120 --> 00:18:23.940
- Yes.


00:18:23.940 --> 00:18:24.980
- This is a simple,


00:18:24.980 --> 00:18:28.440
and I think will be useful to many, many folks.


00:18:28.440 --> 00:18:33.440
This one comes to us via Rud Vanderham.


00:18:33.440 --> 00:18:34.960
Rud Vanderham, thank you.


00:18:34.960 --> 00:18:38.720
Sent it over and recommended, also created it.


00:18:38.720 --> 00:18:41.280
So we've all seen like code samples


00:18:42.360 --> 00:18:45.640
that I don't know why,


00:18:45.640 --> 00:18:47.880
but I guess it's a decent way to explore it.


00:18:47.880 --> 00:18:51.640
But I've always found it a little bit difficult to consume.


00:18:51.640 --> 00:18:56.120
Basically, I wanna show you how this bit of code works


00:18:56.120 --> 00:18:57.840
in the REPL.


00:18:57.840 --> 00:18:59.240
Here's what happens.


00:18:59.240 --> 00:19:02.040
Copy this and use it, right?


00:19:02.040 --> 00:19:03.280
And when you see that here,


00:19:03.280 --> 00:19:06.880
you have the triple arrow and you write some code,


00:19:06.880 --> 00:19:08.520
the triple, you know, right arrow,


00:19:08.520 --> 00:19:10.680
no greater than, greater than, greater than, right?


00:19:10.680 --> 00:19:11.640
You might do a for loop,


00:19:11.640 --> 00:19:14.200
which then has the indents and it does a triple dot dot dot


00:19:14.200 --> 00:19:18.200
to show you that, well, now you're still in the same command.


00:19:18.200 --> 00:19:22.360
And then eventually, a closing dot, and you run it.


00:19:22.360 --> 00:19:25.440
And if you print out, if you just say a variable or a response,


00:19:25.440 --> 00:19:28.080
then that gets printed without any of the dots


00:19:28.080 --> 00:19:30.120
or the greater thans or anything.


00:19:30.120 --> 00:19:33.200
It's just straight up, as if you said print that, right?


00:19:33.200 --> 00:19:38.920
So if I do like copy this, and I want to explore it,


00:19:38.920 --> 00:19:44.760
I've got it. Okay. You know, remove all the triple dot dots on indent it correctly. Remove


00:19:44.760 --> 00:19:51.260
the arrows, common, you know, it's just like, yuck, right? It's just a hassle. So enter


00:19:51.260 --> 00:20:01.280
unravel the the inverse of rebel, where you say, take this code and make it runnable.


00:20:01.280 --> 00:20:07.760
For me. Isn't that cool? Yeah. Super simple. Like, even if you're in the rebel, you can't


00:20:07.760 --> 00:20:09.680
take what you're copying from someone else's example


00:20:09.680 --> 00:20:12.140
and put it in the REPL because then you'll have


00:20:12.140 --> 00:20:13.560
triple greater thans.


00:20:13.560 --> 00:20:15.240
And so you just take this code


00:20:15.240 --> 00:20:17.880
and the way it works is you copy it to the clipboard,


00:20:17.880 --> 00:20:20.720
your code sample that you got from this REPL thing.


00:20:20.720 --> 00:20:23.880
And then you just call unrepl as a CLI


00:20:23.880 --> 00:20:26.320
and it replaces the clipboard


00:20:26.320 --> 00:20:28.880
with contents of exactly what you would want.


00:20:28.880 --> 00:20:32.480
And it even comments out the output.


00:20:32.480 --> 00:20:35.820
So what wasn't code is now a code comment.


00:20:36.800 --> 00:20:37.900
- Oh, wow.


00:20:37.900 --> 00:20:39.880
- Nice.


00:20:39.880 --> 00:20:40.920
- That's perfect.


00:20:40.920 --> 00:20:42.400
- Yeah, really perfect, right?


00:20:42.400 --> 00:20:43.240
- Yeah.


00:20:43.240 --> 00:20:48.120
- So I can certainly see that this is a handy thing


00:20:48.120 --> 00:20:51.760
that people may want to install.


00:20:51.760 --> 00:20:54.960
So when you see the instructions here,


00:20:54.960 --> 00:20:58.160
it says you can just use unrapple.py


00:20:58.160 --> 00:21:01.200
and the way that you run it, it says up here somewhere.


00:21:01.200 --> 00:21:02.600
Okay, what you do.


00:21:02.600 --> 00:21:06.160
So what you do is you copy it


00:21:06.160 --> 00:21:08.680
And then you run, oh, great, he's updated.


00:21:08.680 --> 00:21:09.520
It just says unrapple.


00:21:09.520 --> 00:21:14.040
It used to say run unrapple.py, but it's also on PyPI,


00:21:14.040 --> 00:21:17.960
which means that you can pip install it.


00:21:17.960 --> 00:21:20.240
But I would not pip install it.


00:21:20.240 --> 00:21:22.840
This is not the thing that goes into a virtual environment


00:21:22.840 --> 00:21:24.220
to be part of a program.


00:21:24.220 --> 00:21:28.760
This is a CLI tool that you just want to have available.


00:21:28.760 --> 00:21:32.080
So I would replace pip with pipx.


00:21:32.080 --> 00:21:34.160
And then you just globally have this command


00:21:34.160 --> 00:21:37.900
on your computer just happens to be implemented with Python.


00:21:37.900 --> 00:21:41.060
But you copy it, just type Unrapple,


00:21:41.060 --> 00:21:44.900
and then whatever was in the clipboard is now better.


00:21:44.900 --> 00:21:46.800
- Okay.


00:21:46.800 --> 00:21:49.900
- It doesn't say use pipx, but I think that's the way.


00:21:49.900 --> 00:21:50.960
That's certainly how I would do it


00:21:50.960 --> 00:21:52.920
if I'm gonna install and use this thing.


00:21:52.920 --> 00:21:56.560
There's a way to set up a auto hotkey on Windows only.


00:21:56.560 --> 00:21:59.440
I have no idea about this, so you're on your own there.


00:21:59.440 --> 00:22:01.720
- Okay, so how do you use it on the command line?


00:22:01.720 --> 00:22:02.880
You just--


00:22:02.880 --> 00:22:05.960
You just type the word Unrapple once you've installed it


00:22:05.960 --> 00:22:08.320
in the path, which PIPX, of course, does.


00:22:08.320 --> 00:22:11.960
- And then you paste your code or use it to--


00:22:11.960 --> 00:22:14.700
- So you copy your code, type Unrapple on the command line.


00:22:14.700 --> 00:22:16.800
It looks at your clipboard.


00:22:16.800 --> 00:22:17.640
- Oh, okay.


00:22:17.640 --> 00:22:20.040
- Unrapple it and then it replaces the clipboard


00:22:20.040 --> 00:22:21.720
like basically with a new copy.


00:22:21.720 --> 00:22:24.360
- Oh, that's neat. - Command, yeah.


00:22:24.360 --> 00:22:25.200
- That's great. - Exactly.


00:22:25.200 --> 00:22:26.560
- Yeah. - Yeah, so really easy.


00:22:26.560 --> 00:22:29.280
It also says you can import it into a program


00:22:29.280 --> 00:22:31.780
and use it if for some reason you feel like


00:22:31.780 --> 00:22:32.620
that's the thing you want.


00:22:32.620 --> 00:22:36.280
And it has special handling of the underscore,


00:22:36.280 --> 00:22:39.980
which has special meaning in the REPL.


00:22:39.980 --> 00:22:43.580
Like it knows about underscore and treats it accordingly.


00:22:43.580 --> 00:22:47.180
- Well, like for instance,


00:22:47.180 --> 00:22:50.380
somebody could like maybe change B Python


00:22:50.380 --> 00:22:54.100
or something like that to allow you to paste right in.


00:22:54.100 --> 00:22:56.300
- Yep.


00:22:56.300 --> 00:22:59.580
People out there think it's nice.


00:22:59.580 --> 00:23:02.020
This is a nifty little tool, says Kim.


00:23:02.020 --> 00:23:06.120
And see, it uses Tkinter,


00:23:06.120 --> 00:23:09.160
presumably for clipboard access.


00:23:09.160 --> 00:23:10.640
I believe so as well.


00:23:10.640 --> 00:23:13.920
It should use paperclip, I believe.


00:23:13.920 --> 00:23:18.320
Paperclip, paperclip rather, Piperclip.


00:23:18.320 --> 00:23:22.040
If I were saying it, that's like a super small,


00:23:22.040 --> 00:23:24.800
simple little thing, cross-platform copy and paste,


00:23:24.800 --> 00:23:27.840
but you know, it doesn't matter really.


00:23:27.840 --> 00:23:30.480
what it uses to accomplish copy and paste.


00:23:30.480 --> 00:23:32.400
>> But Tkinter is built in now,


00:23:32.400 --> 00:23:33.720
is just normally.


00:23:33.720 --> 00:23:35.520
>> Yeah, that's true. I guess there's no dependency.


00:23:35.520 --> 00:23:36.680
That's right, there's no dependency.


00:23:36.680 --> 00:23:38.680
Maybe I'll take that back, maybe that is better.


00:23:38.680 --> 00:23:40.520
Anyway, I love Paperclip.


00:23:40.520 --> 00:23:44.400
This is cool. I don't know if you're working on a book or if


00:23:44.400 --> 00:23:46.040
you're learning a lot where you're


00:23:46.040 --> 00:23:48.880
grabbing stuff off of tutorials.


00:23:48.880 --> 00:23:53.960
I spoke a tiny bit disparagingly of this,


00:23:53.960 --> 00:23:57.500
because the style of showing the REPL output,


00:23:57.500 --> 00:24:01.660
I'd rather show an example that has executable code


00:24:01.660 --> 00:24:02.740
and a print statement.


00:24:02.740 --> 00:24:06.460
I kind of already write this output like,


00:24:06.460 --> 00:24:09.860
here's the code, comment, here's the output.


00:24:09.860 --> 00:24:12.220
I don't know, it seems a little more reasonable to me,


00:24:12.220 --> 00:24:16.100
but whatever, people can write them in any style they want


00:24:16.100 --> 00:24:18.660
and this Unrapple will roll it from one to the other.


00:24:18.660 --> 00:24:21.500
- Yeah, you can also use a doc test


00:24:21.500 --> 00:24:25.060
to check your Rapple docs.


00:24:25.060 --> 00:24:26.420
- Yes, exactly.


00:24:26.420 --> 00:24:31.220
And while they're giving a challenge to the community,


00:24:31.220 --> 00:24:34.140
I think someone should write a PyCharm


00:24:34.140 --> 00:24:37.140
and VS Code plugins using this


00:24:37.140 --> 00:24:40.140
so it becomes part of the editors as well,


00:24:40.140 --> 00:24:41.180
which would be pretty neat.


00:24:41.180 --> 00:24:43.940
Paste as, paste from, right?


00:24:43.940 --> 00:24:45.980
Paste from REPL.


00:24:45.980 --> 00:24:47.940
- Yeah, that'd be cool.


00:24:47.940 --> 00:24:50.300
- Yeah, but it's already really handy to have it just,


00:24:50.300 --> 00:24:52.940
you know, just pop over to the terminal and run this.


00:24:52.940 --> 00:24:54.500
- Yeah, awesome. - All right.


00:24:56.220 --> 00:24:58.340
I guess that's it for all of our items, isn't it?


00:24:58.340 --> 00:24:59.540
- I think it is.


00:24:59.540 --> 00:25:02.700
- Yeah, we've come to the end of all of the main things.


00:25:02.700 --> 00:25:04.220
What do you got for our extras today?


00:25:04.220 --> 00:25:06.180
- Well, I was gonna mention that I wrote an article,


00:25:06.180 --> 00:25:08.620
but it was my item, so.


00:25:08.620 --> 00:25:09.540
- Correct.


00:25:09.540 --> 00:25:10.380
- So that's it.


00:25:10.380 --> 00:25:11.220
- There you go.


00:25:11.220 --> 00:25:13.420
I got a couple of quick ones here.


00:25:13.420 --> 00:25:16.600
So I think this happened since our last show,


00:25:16.600 --> 00:25:18.860
but pretty much right after it shipped.


00:25:18.860 --> 00:25:22.580
If you have Git, you should update it.


00:25:22.580 --> 00:25:27.020
So there's remote code execution level vulnerabilities


00:25:27.020 --> 00:25:29.940
in the Git client that is sitting on your machine


00:25:29.940 --> 00:25:33.000
if you have less than 2.39,


00:25:33.000 --> 00:25:35.280
maybe even less than 2.39.1,


00:25:35.280 --> 00:25:37.240
I can't remember the exact version.


00:25:37.240 --> 00:25:40.260
But until last week, there was a problem,


00:25:40.260 --> 00:25:42.780
I'll link to this over here,


00:25:42.780 --> 00:25:44.180
but you don't really want that.


00:25:44.180 --> 00:25:46.580
Yeah, affects 2.39 and older.


00:25:46.580 --> 00:25:49.740
- I know.


00:25:49.740 --> 00:25:52.980
So careful.


00:25:52.980 --> 00:25:55.420
I mean, if you're only pulling stuff from your own repo


00:25:55.420 --> 00:25:57.620
and only you can put stuff in your repo, you're safe.


00:25:57.620 --> 00:26:00.260
But if you're checking out someone else's repo


00:26:00.260 --> 00:26:03.660
or PRs or things, you might not like it.


00:26:03.660 --> 00:26:08.760
Okay, another one here.


00:26:08.760 --> 00:26:09.800
Over on,


00:26:09.800 --> 00:26:13.740
quite on training,


00:26:13.740 --> 00:26:16.380
we, as much as I don't like to,


00:26:16.380 --> 00:26:20.060
had to add some kind of validation.


00:26:20.060 --> 00:26:23.300
It used to be that dreaded recapture thing from Google.


00:26:23.300 --> 00:26:27.180
And it would say, find all of the stoplights.


00:26:27.180 --> 00:26:30.940
And you're like, well, is it the pole of the stoplight?


00:26:30.940 --> 00:26:31.780
Also the stoplight.


00:26:31.780 --> 00:26:34.380
I mean, technically it is, but it's not the light part.


00:26:34.380 --> 00:26:35.620
And it'll be like, try again.


00:26:35.620 --> 00:26:36.580
You're like, no.


00:26:36.580 --> 00:26:38.220
Right?


00:26:38.220 --> 00:26:41.580
But because it's the internet, we can't have nice things.


00:26:41.580 --> 00:26:44.620
Unfortunately, I had to put something there


00:26:44.620 --> 00:26:48.180
to slow people down because they were just pounding away on it


00:26:48.180 --> 00:26:51.220
in various ways that were not ideal.


00:26:51.220 --> 00:26:52.340
We had stuff to mitigate it.


00:26:52.340 --> 00:26:55.460
But once you start encountering botnets,


00:26:55.460 --> 00:26:58.260
then you kind of get yourself into a bad place.


00:26:58.260 --> 00:27:00.500
So I had to put the reCAPTCHA stuff there


00:27:00.500 --> 00:27:03.020
to keep people from messing with it.


00:27:03.020 --> 00:27:07.860
And I hate reCAPTCHA, but I did it because I had to.


00:27:07.860 --> 00:27:10.380
So then when Cloudflare came out with turnstile,


00:27:10.380 --> 00:27:12.540
I'm like, yes, this is so much better.


00:27:12.540 --> 00:27:16.620
It doesn't ask you about chimneys or fire trucks.


00:27:16.620 --> 00:27:20.260
It just does a little like run some code on your browser


00:27:20.260 --> 00:27:22.980
to prove that you're not just requesting


00:27:22.980 --> 00:27:24.980
and posting this from some bot,


00:27:24.980 --> 00:27:27.000
but it's a real browser, off it goes, right?


00:27:27.000 --> 00:27:27.840
So that's great.


00:27:27.840 --> 00:27:33.980
Eli Cobbler said, "Hey, this is awesome


00:27:33.980 --> 00:27:35.300
"that you got this working.


00:27:35.300 --> 00:27:37.320
"I can't get it working.


00:27:37.320 --> 00:27:38.900
"How do you use it?"


00:27:38.900 --> 00:27:41.940
So I ended up posting a gist,


00:27:41.940 --> 00:27:44.120
which has that implementation of this


00:27:44.120 --> 00:27:47.240
using like a faux web framework.


00:27:47.240 --> 00:27:49.520
Doesn't really, I didn't want to try it to blast,


00:27:49.520 --> 00:27:50.520
but it just says like,


00:27:50.520 --> 00:27:52.400
here's your thing that handles the forum posts.


00:27:52.400 --> 00:27:53.560
Do this.


00:27:53.560 --> 00:27:57.480
It shows the HTML bit, which also Cloudflare would show,


00:27:57.480 --> 00:27:58.880
but they don't have the Python version.


00:27:58.880 --> 00:28:00.160
And then it has the


00:28:00.160 --> 00:28:05.920
pedantic based API validation stuff here,


00:28:05.920 --> 00:28:08.720
which is, this is the gnarly bit.


00:28:08.720 --> 00:28:10.120
So he was like, I can't get it working.


00:28:10.120 --> 00:28:11.080
Could you post this?


00:28:11.080 --> 00:28:12.920
And apparently he got it working as well,


00:28:12.920 --> 00:28:16.160
but I'm sure there are other people who equally hate


00:28:16.160 --> 00:28:19.440
find all the haystacks, find all the fire trucks


00:28:19.440 --> 00:28:20.360
and would rather use churn style,


00:28:20.360 --> 00:28:21.920
but it's kind of tricky to use.


00:28:21.920 --> 00:28:24.640
So they can also use that gist if they so wish.


00:28:24.640 --> 00:28:29.680
Yeah.


00:28:29.680 --> 00:28:30.520
- That's funny.


00:28:30.520 --> 00:28:33.480
- Yeah.


00:28:33.480 --> 00:28:34.320
David Poole says,


00:28:34.320 --> 00:28:38.120
"Google's captures made me doubt my own humanity."


00:28:38.120 --> 00:28:40.380
(laughing)


00:28:40.380 --> 00:28:42.300
- So I always thought like,


00:28:42.300 --> 00:28:44.280
that'd be fun to do like trees instead


00:28:44.280 --> 00:28:46.600
or like plant identification.


00:28:46.600 --> 00:28:50.360
Like, like find the azaleas.


00:28:50.360 --> 00:28:52.480
- What?


00:28:52.480 --> 00:28:56.120
Let's see.


00:28:56.120 --> 00:29:00.080
So when I talked about getting a bunch of stickers


00:29:00.080 --> 00:29:01.960
on my computer the other day, remember that?


00:29:01.960 --> 00:29:02.800
- Yeah.


00:29:02.800 --> 00:29:05.840
- Well, one of the stickers I put is I'm not a robot


00:29:05.840 --> 00:29:07.400
and it's like a validated reCAPTCHA.


00:29:07.400 --> 00:29:09.740
So I just thought that was fun too.


00:29:09.740 --> 00:29:11.120
- But that's cool.


00:29:11.120 --> 00:29:12.800
- Yeah, anyway, so if people are interested


00:29:12.800 --> 00:29:14.440
and they wanna try out Turnstile,


00:29:14.440 --> 00:29:17.200
which is way more privacy oriented,


00:29:17.200 --> 00:29:19.680
also nicer 'cause you don't have to interact with it.


00:29:19.680 --> 00:29:20.880
It's just a little hard to work with.


00:29:20.880 --> 00:29:22.200
Here's some code that they can try


00:29:22.200 --> 00:29:25.020
that at least one other person has been successful using.


00:29:25.020 --> 00:29:30.020
So that's a tepid, but somewhat good testimonial.


00:29:30.020 --> 00:29:30.960
How's that?


00:29:30.960 --> 00:29:32.520
- That's nice.


00:29:32.520 --> 00:29:34.240
- All right, thank goodness it wasn't in the JavaScript,


00:29:34.240 --> 00:29:35.080
Brian.


00:29:36.080 --> 00:29:38.080
>> Yeah.


00:29:38.080 --> 00:29:39.620
>> Because if it's in the JavaScript,


00:29:39.620 --> 00:29:41.500
I don't want to have to go debug that. Do you want to debug it?


00:29:41.500 --> 00:29:43.700
>> No, I don't want to debug it in the JavaScript.


00:29:43.700 --> 00:29:47.220
>> It might make you so crazy as if to go and


00:29:47.220 --> 00:29:48.780
literally write a song


00:29:48.780 --> 00:29:51.080
about how much you don't want to go into the JavaScript.


00:29:51.080 --> 00:29:52.200
>> Yeah.


00:29:52.200 --> 00:29:57.900
>> Now, I am very unskilled at music,


00:29:57.900 --> 00:30:05.400
but Dylan Betty is actually quite skilled and has


00:30:05.400 --> 00:30:08.620
a whole bunch of really funny songs here,


00:30:08.620 --> 00:30:11.800
like the big rewrite based on American Pie,


00:30:11.800 --> 00:30:14.920
when the eight and a half minute long song I'll point out,


00:30:14.920 --> 00:30:18.220
and he wrote a programming song against it.


00:30:18.220 --> 00:30:18.760
>> Awesome.


00:30:18.760 --> 00:30:21.080
>> Your API is a hall of shame.


00:30:21.080 --> 00:30:24.740
You give rest a bad name based on the Bon Jovi song.


00:30:24.740 --> 00:30:27.460
But neither of those are the one that I'm referring to.


00:30:27.460 --> 00:30:30.360
No, I'm referring to the song called Bug in


00:30:30.360 --> 00:30:35.360
the JavaScript based on Piano Man by Billy Joel.


00:30:35.360 --> 00:30:37.560
- This is good stuff, right?


00:30:37.560 --> 00:30:38.600
- Yeah.


00:30:38.600 --> 00:30:39.720
- Now it's six and a half minutes,


00:30:39.720 --> 00:30:41.080
so there's no way I can play it,


00:30:41.080 --> 00:30:42.400
but it starts out like,


00:30:42.400 --> 00:30:44.600
you've checked all of your database indexes,


00:30:44.600 --> 00:30:47.040
you've tuned all your API hooks.


00:30:47.040 --> 00:30:49.600
You're starting to think that you might need a drink


00:30:49.600 --> 00:30:51.920
because there's only one place left to look.


00:30:51.920 --> 00:30:54.960
There must be a bug in the JavaScript


00:30:54.960 --> 00:30:57.200
because everything else is built properly,


00:30:57.200 --> 00:30:59.800
but the front end's a pile of crap.


00:30:59.800 --> 00:31:00.860
It's so fun.


00:31:00.860 --> 00:31:04.760
- I like it.


00:31:04.760 --> 00:31:08.500
to think that I might need a drink because there's only one place left to look.


00:31:08.500 --> 00:31:09.500
It's really good.


00:31:09.500 --> 00:31:10.500
I recommend people put this on.


00:31:10.500 --> 00:31:15.920
And if you're working with Angular or Vue or some friend in framework, you can play


00:31:15.920 --> 00:31:21.920
it loud in the office just to share a little bit of the feeling.


00:31:21.920 --> 00:31:25.320
Anyway, that's what I got for you this week.


00:31:25.320 --> 00:31:27.320
People can go watch the YouTube video.


00:31:27.320 --> 00:31:28.320
>> Thanks.


00:31:28.320 --> 00:31:31.860
>> Yeah, you bet.


00:31:31.860 --> 00:31:33.240
And thanks for being here.


00:31:33.240 --> 00:31:39.480
everyone for listening as always. Thank you. Bye. Bye y'all.


00:31:39.480 --> 00:31:49.480
[BLANK_AUDIO]

