WEBVTT

00:00:00.000 --> 00:00:09.760
Hey, everybody. Hey, welcome to Python Bytes. It's good. Let's get let's just get started


00:00:09.760 --> 00:00:15.100
with the show. Hello and welcome Python Bytes where we deliver Python news and headlines


00:00:15.100 --> 00:00:22.380
directly to your earbuds. This is Episode 297 recorded August 16 2022 and I am Brian


00:00:22.380 --> 00:00:29.880
Okken. I'm Michael Kennedy. It's good to good to be back and be with you, Michael. Yeah,


00:00:29.880 --> 00:00:31.200
It's great to be back.


00:00:31.200 --> 00:00:33.280
Not in the usual location today.


00:00:33.280 --> 00:00:34.640
You may hear some nature sounds.


00:00:34.640 --> 00:00:37.280
Shmaayan, I apologize if animals go crazy,


00:00:37.280 --> 00:00:38.760
but there's construction,


00:00:38.760 --> 00:00:40.700
which is guaranteed to be a problem in my office.


00:00:40.700 --> 00:00:42.000
So I'm sitting in the backyard.


00:00:42.000 --> 00:00:43.040
We'll see how that goes.


00:00:43.040 --> 00:00:46.720
- Yeah, for people that are listening to the podcast,


00:00:46.720 --> 00:00:49.560
the live stream people get to see his lovely view


00:00:49.560 --> 00:00:51.880
from his backyard, some nice trees.


00:00:51.880 --> 00:00:53.000
- Yeah, big trees.


00:00:53.000 --> 00:00:54.680
It's all Oregon backyard here.


00:00:54.680 --> 00:00:56.680
- Nice.


00:00:56.680 --> 00:00:58.520
- But also, I also want to say this episode


00:00:58.520 --> 00:01:04.960
brought to you by IRL podcast from Mozilla. So we'll tell you more about that later. But


00:01:04.960 --> 00:01:08.600
thanks to Mozilla and the IRL podcast for supporting the show.


00:01:08.600 --> 00:01:14.880
Thank you. Well, how about some clean code or clean? Yeah.


00:01:14.880 --> 00:01:20.320
Let's let's talk about writing code by not writing code. Does that sound like a good


00:01:20.320 --> 00:01:27.320
idea? Well, OK. Not in the low code, no code sense. There's actually some pretty cool tools


00:01:27.320 --> 00:01:29.320
in that space, but that's not what I'm talking about.


00:01:29.320 --> 00:01:35.720
Imagine, Brian, somebody says, "We used to be a .NET shop,


00:01:35.720 --> 00:01:40.360
and we have this huge database, and all of our code to talk to it


00:01:40.360 --> 00:01:42.680
is in some other language, or it's Ruby, or it's Java,


00:01:42.680 --> 00:01:43.800
or whatever, it's not Python."


00:01:43.800 --> 00:01:47.000
And you decide the best way to talk to this database


00:01:47.000 --> 00:01:51.640
is with some flavor of SQLAlchemy, SQLAlchemy straight,


00:01:51.640 --> 00:01:54.840
or if you prefer, you could have it with data classes,


00:01:54.840 --> 00:01:58.600
or you could even mix in a little sprinkling of SQL model


00:01:58.600 --> 00:02:01.400
if you're doing async and FastAPI and Pydantic.


00:02:01.400 --> 00:02:05.800
And whatever choice you want to make from that perspective,


00:02:05.800 --> 00:02:09.480
if you're looking at a database with 150 tables


00:02:09.480 --> 00:02:11.560
and all sorts of gnarly relationships,


00:02:11.560 --> 00:02:14.920
you might say, well, I'm going to spend the next week


00:02:14.920 --> 00:02:16.840
planning out how to model those out


00:02:16.840 --> 00:02:19.400
so I get them to exactly match the database.


00:02:19.400 --> 00:02:20.520
Is it a VARCHAR?


00:02:20.520 --> 00:02:23.320
Is that a VARCHAR with a limit like VARCHAR 10?


00:02:23.320 --> 00:02:26.560
or you know what, that doesn't sound fun, does it?


00:02:26.560 --> 00:02:29.040
- No, no.


00:02:29.040 --> 00:02:30.480
- Not, I mean, at least for me,


00:02:30.480 --> 00:02:33.120
maybe some people that's a special kind of fun for them,


00:02:33.120 --> 00:02:38.120
but Josh Thurston sent over this project called SQL A,


00:02:38.120 --> 00:02:41.040
for SQLAlchemy CodeGen.


00:02:41.040 --> 00:02:43.320
So I'm taking that, he doesn't think it sounds like fun.


00:02:43.320 --> 00:02:46.200
I certainly don't think that it does either.


00:02:46.200 --> 00:02:48.680
So people should check this out.


00:02:48.680 --> 00:02:50.560
It's, it's looks really cool.


00:02:50.560 --> 00:02:55.120
And what you do is it's an automatic model generator


00:02:55.120 --> 00:02:56.080
for SQLAlchemy.


00:02:56.080 --> 00:03:00.480
- What does it generate it from?


00:03:00.480 --> 00:03:02.600
- So what you do is you go through


00:03:02.600 --> 00:03:05.280
and you point it at some database.


00:03:05.280 --> 00:03:06.120
- Okay.


00:03:06.120 --> 00:03:07.760
- Just say SQLA code gen


00:03:07.760 --> 00:03:09.380
and you give it your connection string.


00:03:09.380 --> 00:03:13.040
For example, Postgres SQL colon triple slash


00:03:13.040 --> 00:03:14.740
some database connection string.


00:03:14.740 --> 00:03:18.960
And then magic happens


00:03:18.960 --> 00:03:21.160
and you have a whole bunch of Python classes


00:03:21.160 --> 00:03:23.880
that are attempted to look handwritten


00:03:23.880 --> 00:03:25.520
and it sounds very, very cool.


00:03:25.520 --> 00:03:30.040
So instead of taking all your time,


00:03:30.040 --> 00:03:32.880
like a week to model out the database


00:03:32.880 --> 00:03:35.480
and the relationships and all that stuff in Python,


00:03:35.480 --> 00:03:38.320
you run this one command line thing


00:03:38.320 --> 00:03:39.760
and then you have all the classes


00:03:39.760 --> 00:03:42.460
and then you can tweak them a tiny bit if you see fit.


00:03:42.460 --> 00:03:46.080
- Okay, so this is, okay, you probably said this


00:03:46.080 --> 00:03:48.280
and I missed it, but so you already have data


00:03:48.280 --> 00:03:51.240
in a database and you're trying to hook up an application


00:03:51.240 --> 00:03:52.080
to it or something.


00:03:52.080 --> 00:03:54.760
- Yeah, yeah, which is why one of my theoretical example.


00:03:54.760 --> 00:03:56.640
I have a database, I have code that talks to it,


00:03:56.640 --> 00:03:57.560
but it's not Python.


00:03:57.560 --> 00:04:00.780
And so there's not really something to work from,


00:04:00.780 --> 00:04:02.480
but I've got a really complicated database


00:04:02.480 --> 00:04:03.760
that's been around for a while.


00:04:03.760 --> 00:04:05.060
It doesn't have to be complicated,


00:04:05.060 --> 00:04:06.960
but the more gnarly the database,


00:04:06.960 --> 00:04:09.160
the more you will appreciate this tool making,


00:04:09.160 --> 00:04:11.000
you know, doing it for you.


00:04:11.000 --> 00:04:13.240
- I think I have this situation.


00:04:13.240 --> 00:04:14.920
I totally want to use this.


00:04:14.920 --> 00:04:15.760
Yeah.


00:04:15.760 --> 00:04:16.600
- Yeah, yeah, yeah.


00:04:16.600 --> 00:04:19.320
It does a bunch of neat things.


00:04:19.320 --> 00:04:23.440
It's written to read the structure of an existing database


00:04:23.440 --> 00:04:26.340
and generate the appropriate SQLAlchemy model code


00:04:26.340 --> 00:04:28.520
using the declarative style if possible.


00:04:28.520 --> 00:04:31.620
So derived from SQLAlchemy declarative base.


00:04:31.620 --> 00:04:35.720
It's also, there was some other tool called SQL AutoCode,


00:04:35.720 --> 00:04:38.040
which apparently has some limitations,


00:04:38.040 --> 00:04:41.520
such as, for example, it doesn't support Python 3


00:04:41.520 --> 00:04:43.360
or recent versions of SQLAlchemy.


00:04:43.360 --> 00:04:46.160
That seems like a pretty large limitation, but whatever.


00:04:46.160 --> 00:04:47.540
(laughing)


00:04:47.540 --> 00:04:50.100
So this supports the newest version.


00:04:50.100 --> 00:04:52.380
It produces PEP 8 compliant code,


00:04:52.380 --> 00:04:56.000
tries to make it look like you're writing code by hand


00:04:56.000 --> 00:04:58.140
so it doesn't look auto-generated.


00:04:58.140 --> 00:05:01.940
It automatically detects join table inheritance


00:05:01.940 --> 00:05:03.500
and all kinds of things.


00:05:03.500 --> 00:05:05.420
So if I scroll down here,


00:05:05.420 --> 00:05:06.740
it's got these different generators.


00:05:06.740 --> 00:05:09.260
So you can generate table objects


00:05:09.260 --> 00:05:10.920
for people who don't wanna use the ORM


00:05:10.920 --> 00:05:12.580
'cause SQLAlchemy has these two flavors,


00:05:12.580 --> 00:05:16.060
like a low level, slightly above just raw SQL,


00:05:16.060 --> 00:05:19.140
And then the ORM, which is the one that I use all the time.


00:05:19.140 --> 00:05:20.940
By default, it uses the ORM one,


00:05:20.940 --> 00:05:23.960
but you can also use, like I said, data classes,


00:05:23.960 --> 00:05:26.840
which is pretty excellent, instead of,


00:05:26.840 --> 00:05:28.960
you know, in case that's what you want your code to look like


00:05:28.960 --> 00:05:33.440
or even better than that, you can use SQL model models


00:05:33.440 --> 00:05:36.880
for using SQL model, which is the project,


00:05:36.880 --> 00:05:40.460
I'm sure we've discussed it before by Sebastian.


00:05:42.240 --> 00:05:46.560
It's based on Pydantic and Async,


00:05:46.560 --> 00:05:49.720
but then it's built really on top of SQLAlchemy.


00:05:49.720 --> 00:05:53.440
So if you're looking to do the newer version of that,


00:05:53.440 --> 00:05:54.280
you could get this.


00:05:54.280 --> 00:05:55.840
By the way, just thinking about it while I'm looking at this,


00:05:55.840 --> 00:06:00.600
maybe I have actually a SQLAlchemy generated database,


00:06:00.600 --> 00:06:05.000
but it's written in the older style of SQLAlchemy,


00:06:05.000 --> 00:06:06.560
and it's not using SQL model,


00:06:06.560 --> 00:06:08.560
and I wanna just upgrade to SQL model,


00:06:08.560 --> 00:06:10.000
you might be able to use the database.


00:06:10.000 --> 00:06:11.360
Just go rewrite it for me again.


00:06:11.360 --> 00:06:13.280
but in this flavor, you know,


00:06:13.280 --> 00:06:15.720
or use it to generate the data class version.


00:06:15.720 --> 00:06:17.440
That actually looks pretty cool.


00:06:17.440 --> 00:06:19.240
- Or do all of them and look at it


00:06:19.240 --> 00:06:22.380
and see which one looks like it's more fun to maintain.


00:06:22.380 --> 00:06:23.480
- Yeah, exactly.


00:06:23.480 --> 00:06:26.500
So there's a whole bunch of options


00:06:26.500 --> 00:06:27.440
and stuff that you can use,


00:06:27.440 --> 00:06:31.480
but you can basically pass a bunch


00:06:31.480 --> 00:06:34.400
of command line arguments and stuff to change how it works.


00:06:34.400 --> 00:06:35.240
- Cool.


00:06:35.240 --> 00:06:37.480
- Like change how it names objects,


00:06:37.480 --> 00:06:40.520
change how it names fields, et cetera, et cetera.


00:06:40.520 --> 00:06:42.920
People, if they really want to look into it and use it,


00:06:42.920 --> 00:06:45.160
I think they all got the idea from this.


00:06:45.160 --> 00:06:47.360
- Okay.


00:06:47.360 --> 00:06:48.560
- Cool thing, sounds cool?


00:06:48.560 --> 00:06:50.960
- Yeah, looks really cool.


00:06:50.960 --> 00:06:52.660
- Yeah, anytime you've got a database,


00:06:52.660 --> 00:06:55.760
they're so hard to model because you've got to get


00:06:55.760 --> 00:06:57.760
the SQLAlchemy code to match it just right,


00:06:57.760 --> 00:06:59.320
or it won't work at all.


00:06:59.320 --> 00:07:02.600
And yet, you know, do you really want to do that by hand?


00:07:02.600 --> 00:07:03.640
No, I don't.


00:07:03.640 --> 00:07:07.420
So SQL A CodeGen, thanks Josh.


00:07:09.560 --> 00:07:11.260
- Well, I'm gonna talk about package.


00:07:11.260 --> 00:07:13.580
I've been, my headspace is in packaging lately


00:07:13.580 --> 00:07:18.580
because I'm preparing a talk for next month.


00:07:18.580 --> 00:07:22.660
And it's gonna have some packaging stuff in it.


00:07:22.660 --> 00:07:26.020
So this is really exciting with,


00:07:26.020 --> 00:07:31.020
I heard from Juan Luis Cano Rodriguez, Rodriguez, sorry,


00:07:31.020 --> 00:07:36.940
that setup tool 664.00 is out.


00:07:37.220 --> 00:07:41.300
and it ships with PEP 660 editable installs.


00:07:41.300 --> 00:07:45.140
So this, the big headline is not that,


00:07:45.140 --> 00:07:46.540
although that's really cool,


00:07:46.540 --> 00:07:50.580
it's that most projects don't need a setup.py


00:07:50.580 --> 00:07:52.420
or a setup.cfg anymore.


00:07:52.420 --> 00:07:54.200
- Awesome.


00:07:54.200 --> 00:07:55.540
- Those can be gone.


00:07:55.540 --> 00:07:59.380
And not that setup.py was evil, but it kind of was evil


00:07:59.380 --> 00:08:01.820
because what it does is it runs Python,


00:08:01.820 --> 00:08:04.300
runs Python while you install something.


00:08:04.300 --> 00:08:07.100
- When used normally, it's fine.


00:08:07.100 --> 00:08:10.140
when, but it has this in tremendous gaping hole


00:08:10.140 --> 00:08:14.820
for abusing things at different levels.


00:08:14.820 --> 00:08:15.660
- Yeah.


00:08:15.660 --> 00:08:19.780
And the, okay, so the caveat on this is


00:08:19.780 --> 00:08:22.220
the reason why it has that is sometimes it goes out


00:08:22.220 --> 00:08:27.060
and compiles stuff if it's not just pure Python stuff.


00:08:27.060 --> 00:08:29.980
But you don't need that for that.


00:08:29.980 --> 00:08:33.520
A lot of, most projects don't need that anymore


00:08:33.520 --> 00:08:36.840
because they're not really compiling stuff.


00:08:36.840 --> 00:08:39.080
they're on during pip install,


00:08:39.080 --> 00:08:41.200
they're compiling stuff ahead of time


00:08:41.200 --> 00:08:42.480
and they have their separate wheels


00:08:42.480 --> 00:08:44.160
for different architectures.


00:08:44.160 --> 00:08:46.180
So I like that model better.


00:08:46.180 --> 00:08:50.800
So anyway, I'm like pretty excited about this.


00:08:50.800 --> 00:08:53.320
So there's a, so yeah,


00:08:53.320 --> 00:08:55.720
congrats to the PyPA for getting that done.


00:08:55.720 --> 00:08:57.840
We've got, there's an article called


00:08:57.840 --> 00:09:00.280
development mode editable installs.


00:09:00.280 --> 00:09:04.120
So here you've got pip install editable


00:09:05.060 --> 00:09:08.300
that works with setup tools without a setup.py.


00:09:08.300 --> 00:09:11.200
Used to have to have a shim.


00:09:11.200 --> 00:09:14.180
So everything can be in pyproject.toml now.


00:09:14.180 --> 00:09:17.480
And so one of the cool things,


00:09:17.480 --> 00:09:20.820
and I actually discovered this also at the same time


00:09:20.820 --> 00:09:22.980
I was researching packaging stuff.


00:09:22.980 --> 00:09:26.180
The PyPA has this really cool guide


00:09:26.180 --> 00:09:28.080
packaging Python projects.


00:09:28.080 --> 00:09:32.240
And what's neat is they keep it up to date fairly well.


00:09:32.240 --> 00:09:35.600
And this whole tutorial, it's a simple,


00:09:35.600 --> 00:09:37.280
so you got a simple Python project


00:09:37.280 --> 00:09:39.960
and you wanna try to learn how to package.


00:09:39.960 --> 00:09:41.960
They have this page here.


00:09:41.960 --> 00:09:42.860
It's nice.


00:09:42.860 --> 00:09:45.720
There's no mention of setup.py or setup.cfg.


00:09:45.720 --> 00:09:47.280
It's all pyproject.toml.


00:09:47.280 --> 00:09:48.340
- Oh, wow.


00:09:48.340 --> 00:09:49.920
That's awesome.


00:09:49.920 --> 00:09:50.760
Here's how you do it.


00:09:50.760 --> 00:09:52.720
And you don't even talk about the older,


00:09:52.720 --> 00:09:55.760
more troublesome way.


00:09:55.760 --> 00:09:56.600
Yeah. - Yeah.


00:09:56.600 --> 00:10:00.520
And since setup tools and pip are not part of Python proper,


00:10:00.520 --> 00:10:02.640
They're separate things.


00:10:02.640 --> 00:10:06.140
Well, I mean, you get pip when you download Python,


00:10:06.140 --> 00:10:10.040
but you get a version and you usually upgrade anyway.


00:10:10.040 --> 00:10:11.760
But set of tools is separate,


00:10:11.760 --> 00:10:15.240
so they can move at a faster pace than Python itself.


00:10:15.240 --> 00:10:17.680
So, it's nice. - Oh, right, okay.


00:10:17.680 --> 00:10:18.520
Excellent.


00:10:18.520 --> 00:10:21.680
Well, this is great news.


00:10:21.680 --> 00:10:26.200
Anything that makes the supply chain side of Python


00:10:26.200 --> 00:10:29.080
stronger is good. - Yeah, yep.


00:10:30.400 --> 00:10:31.600
- Indeed.


00:10:31.600 --> 00:10:34.760
All right, well, before we move on to the next thing, Brian,


00:10:34.760 --> 00:10:36.500
let me tell you about our sponsor.


00:10:36.500 --> 00:10:38.280
- All right.


00:10:38.280 --> 00:10:39.440
- So this episode of Python Bytes


00:10:39.440 --> 00:10:41.700
is brought to you by the IRL Podcast,


00:10:41.700 --> 00:10:43.800
an original podcast from Mozilla.


00:10:43.800 --> 00:10:45.320
If you're like me and Brian,


00:10:45.320 --> 00:10:48.100
we care about ideas behind technology,


00:10:48.100 --> 00:10:49.980
not just the tech itself.


00:10:49.980 --> 00:10:52.780
So we know that tech has an enormous influence on society.


00:10:52.780 --> 00:10:55.300
Many of these effects are hugely beneficial.


00:10:55.300 --> 00:10:58.600
Just think about carrying all of the world's information


00:10:58.600 --> 00:11:00.640
in our pockets sort of thing.


00:11:00.640 --> 00:11:04.360
But other tech influences can have negative effects.


00:11:04.360 --> 00:11:05.720
And I really appreciate that Mozilla


00:11:05.720 --> 00:11:07.800
is always on the lookout for and working


00:11:07.800 --> 00:11:11.360
to mitigate negative influences of tech on all of us,


00:11:11.360 --> 00:11:13.480
all the tracking stuff they're doing,


00:11:13.480 --> 00:11:15.880
but a bunch of awareness things as well.


00:11:15.880 --> 00:11:17.840
And so if these ideas resonate with you,


00:11:17.840 --> 00:11:19.600
you should definitely check out the IRL podcast.


00:11:19.600 --> 00:11:21.060
It's hosted by Bridget Todd.


00:11:21.060 --> 00:11:25.320
And this season is very much in the focus of Python.


00:11:25.320 --> 00:11:28.000
It's AI in real life.


00:11:28.000 --> 00:11:31.200
So who can AI help?


00:11:31.200 --> 00:11:32.680
Who can it harm?


00:11:32.680 --> 00:11:34.600
The show features fascinating conversations


00:11:34.600 --> 00:11:37.400
with people who are working on building more trustworthy AI.


00:11:37.400 --> 00:11:40.600
For example, there's an episode about how our world is


00:11:40.600 --> 00:11:41.880
mapped with AI.


00:11:41.880 --> 00:11:44.160
And it's the data that's missing from those maps that


00:11:44.160 --> 00:11:46.800
tells as much of the story as the maps themselves.


00:11:46.800 --> 00:11:49.080
Another one's about gig workers and how


00:11:49.080 --> 00:11:51.160
they're pushing back on algorithms to create better


00:11:51.160 --> 00:11:51.800
working style.


00:11:51.800 --> 00:11:53.600
And for political junkies, there's


00:11:53.600 --> 00:11:56.640
an episode about how the role of AI


00:11:56.640 --> 00:12:00.080
plays when it comes to spreading disinformation about elections.


00:12:00.080 --> 00:12:05.120
Obviously, huge concern just across the world


00:12:05.120 --> 00:12:07.040
for all the democracies.


00:12:07.040 --> 00:12:09.560
I also just listened to the tech we won't build,


00:12:09.560 --> 00:12:13.380
which explores when developers and data scientists should


00:12:13.380 --> 00:12:15.320
consider pushing back on projects that


00:12:15.320 --> 00:12:19.400
can be harmful to society, even though the machine learning can


00:12:19.400 --> 00:12:21.160
easily be turned on them.


00:12:21.160 --> 00:12:23.540
If this sounds interesting, try an episode for yourself.


00:12:23.540 --> 00:12:26.600
Just check out-- just search for RL on your podcast player


00:12:26.600 --> 00:12:29.440
or visit pythonbytes.fm/irl.


00:12:29.440 --> 00:12:31.200
The link is in your podcast player show notes.


00:12:31.200 --> 00:12:34.200
Thank you so much to IRL and Mozilla for supporting the show.


00:12:34.200 --> 00:12:35.960
- I've been listening to it.


00:12:35.960 --> 00:12:37.360
It's really great show too.


00:12:37.360 --> 00:12:38.200
- Yeah, yeah.


00:12:38.200 --> 00:12:39.240
I enjoy it as well.


00:12:39.240 --> 00:12:42.960
It's not super, super technical


00:12:42.960 --> 00:12:44.400
where it's all about APIs and stuff.


00:12:44.400 --> 00:12:47.080
You can kind of just kick back and enjoy it.


00:12:47.080 --> 00:12:50.520
- Not like this podcast where we're super technical.


00:12:50.520 --> 00:12:52.120
- Exactly.


00:12:52.120 --> 00:12:53.720
Yeah, we talk about a bunch of technical things,


00:12:53.720 --> 00:12:55.520
sometimes not too deeply, huh?


00:12:55.520 --> 00:12:56.360
- Oh, I like it.


00:12:56.360 --> 00:12:57.760
I like our level.


00:12:57.760 --> 00:12:59.360
- Yeah, I do too, I do too.


00:12:59.360 --> 00:13:01.080
Before we get on to the next topic,


00:13:01.080 --> 00:13:05.360
I just wanna do a quick audience comment from Anna here.


00:13:05.360 --> 00:13:06.600
Says, "Hello from London, UK.


00:13:06.600 --> 00:13:09.440
"SQL Code Gen sounds like it could save a lot of headaches."


00:13:09.440 --> 00:13:11.900
Yeah, I think it's gonna be great.


00:13:11.900 --> 00:13:12.880
- Yeah.


00:13:12.880 --> 00:13:16.580
- And feedback for the tutorial that you highlighted,


00:13:16.580 --> 00:13:18.720
Brian, on python.org.


00:13:18.720 --> 00:13:19.560
- Yep.


00:13:19.560 --> 00:13:21.160
- Henry Schreiner says, "It took around six months


00:13:21.160 --> 00:13:23.040
"for my rewrite of that page to get accepted."


00:13:23.040 --> 00:13:24.760
Well, thank you for all the hard work, Henry.


00:13:24.760 --> 00:13:25.680
That's awesome.


00:13:25.680 --> 00:13:27.680
It did a great job. It looks great.


00:13:27.680 --> 00:13:29.680
Yeah, very, very cool.


00:13:29.680 --> 00:13:36.680
Alright, so previously I had talked about Async Cache.


00:13:36.680 --> 00:13:40.680
Remember that? Where it's like the Functools LRU Cache,


00:13:40.680 --> 00:13:42.680
but a little bit more.


00:13:42.680 --> 00:13:44.680
However, you can apply it to Async methods.


00:13:44.680 --> 00:13:49.680
Owen Lamont said, "You may also be interested in AIO Cache."


00:13:49.680 --> 00:13:53.680
Now, these are similar but not the same thing.


00:13:53.680 --> 00:13:58.680
Async cache basically caches in memory by default.


00:13:58.680 --> 00:14:03.280
What this one does is this lets you use proper


00:14:03.280 --> 00:14:05.000
distributed backends for caching.


00:14:05.000 --> 00:14:07.320
So for example, if you're on a web app,


00:14:07.320 --> 00:14:11.400
you might have like five, six, 10,


00:14:11.400 --> 00:14:13.960
maybe many more worker processes,


00:14:13.960 --> 00:14:17.900
either on one machine using the supervisor mode


00:14:17.900 --> 00:14:18.760
of like G-unicorn,


00:14:18.760 --> 00:14:21.000
or it could be even across different computers.


00:14:21.000 --> 00:14:23.800
If you're using that in-memory version of cache,


00:14:23.800 --> 00:14:26.440
every time the request goes to a different part of your site


00:14:26.440 --> 00:14:31.520
or different runtime, different process running your site,


00:14:31.520 --> 00:14:33.320
you've got to recompute it, right?


00:14:33.320 --> 00:14:36.760
Well, this one also supports Redis and Memcached.


00:14:36.760 --> 00:14:38.320
- Oh, sweet. - Or Memcached.


00:14:38.320 --> 00:14:42.400
And it has a common API across all of them,


00:14:42.400 --> 00:14:43.600
which is pretty fantastic.


00:14:43.600 --> 00:14:46.400
And they're all async and awaitable, which is cool.


00:14:46.400 --> 00:14:50.120
So it aims for simplicity rather than trying to


00:14:50.120 --> 00:14:52.840
highlight all the nuances of that particular, say,


00:14:52.840 --> 00:14:54.680
to Redis versus the others.


00:14:54.680 --> 00:14:58.160
So it has an add, a get, a set, a multi-get,


00:14:58.160 --> 00:15:00.440
if you need to say, give me the values corresponding


00:15:00.440 --> 00:15:04.120
to these four IDs, or does this thing exist or not?


00:15:04.120 --> 00:15:06.180
Delete, clear, even increment a value,


00:15:06.180 --> 00:15:08.000
like how many people viewed this page?


00:15:08.000 --> 00:15:09.480
Increment that in the cache.


00:15:09.480 --> 00:15:11.080
And it's shared across, like I said,


00:15:11.080 --> 00:15:15.020
10 worker processes across machines instantly.


00:15:15.020 --> 00:15:16.840
How cool is that? - That's pretty cool.


00:15:16.840 --> 00:15:18.960
- Yeah, so super easy to work with.


00:15:18.960 --> 00:15:22.320
You can install it, but then you should also reference


00:15:22.320 --> 00:15:25.840
probably the specialization that you're using


00:15:25.840 --> 00:15:27.680
or the backend that you're using.


00:15:27.680 --> 00:15:30.300
So for example, you can say pip install aio-cache,


00:15:30.300 --> 00:15:32.980
but if you wanna use Redis, it's bracket Redis.


00:15:32.980 --> 00:15:35.040
If you wanna use Redis and memcached,


00:15:35.040 --> 00:15:37.680
you might say, you know, bracket Redis memcached.


00:15:37.680 --> 00:15:40.060
They have message pack and different formatting.


00:15:40.060 --> 00:15:41.480
So depending on how you're using it,


00:15:41.480 --> 00:15:44.360
you might have to install some dependencies, okay?


00:15:44.360 --> 00:15:45.960
- Yeah, at least-- - But these cases--


00:15:45.960 --> 00:15:47.120
- Go ahead. - The optional install


00:15:47.120 --> 00:15:50.080
mechanism of pip is pretty cool.


00:15:50.080 --> 00:15:51.440
- It is, it is pretty cool.


00:15:51.440 --> 00:15:56.440
So you just import asyncio, easy.


00:15:56.440 --> 00:16:00.160
And then you import a O cache and you gotta


00:16:00.160 --> 00:16:02.320
basically run your loop somewhere.


00:16:02.320 --> 00:16:04.420
Or if you're using something like FastAPI,


00:16:04.420 --> 00:16:07.960
just that thing's generating or managing the loop freeze,


00:16:07.960 --> 00:16:09.440
you don't have to worry about it.


00:16:09.440 --> 00:16:12.800
So you can just say await cache dot set key comma value,


00:16:12.800 --> 00:16:15.200
await cache dot get key.


00:16:15.200 --> 00:16:17.520
Sounds pretty straightforward, right?


00:16:17.520 --> 00:16:19.400
You can even use it as a decorator.


00:16:19.400 --> 00:16:22.740
So if you put @cache on a function,


00:16:22.740 --> 00:16:26.640
you can give it time to live, the target, which is Redis,


00:16:26.640 --> 00:16:29.580
the key to use for that particular thing and so on.


00:16:29.580 --> 00:16:32.440
And then off it goes, the serializer,


00:16:32.440 --> 00:16:35.680
you have Pickles or you have MessagePack or JSON.


00:16:35.680 --> 00:16:38.320
And then there you go.


00:16:38.320 --> 00:16:39.200
Pretty cool, huh?


00:16:39.200 --> 00:16:41.320
- So does it, okay, so for a function,


00:16:41.320 --> 00:16:44.440
does it cache the input and output of that function then?


00:16:44.440 --> 00:16:47.960
I think it caches the output.


00:16:47.960 --> 00:16:48.960
Okay.


00:16:48.960 --> 00:16:54.720
But it doesn't look like it varies by argument.


00:16:54.720 --> 00:16:59.440
At least in this example, it's not very fine.


00:16:59.440 --> 00:17:01.360
I don't see how you would...


00:17:01.360 --> 00:17:03.120
This key is the lookup value, right?


00:17:03.120 --> 00:17:07.960
So you might call it cache call key result or something.


00:17:07.960 --> 00:17:10.640
I don't see how you dynamically do that.


00:17:10.640 --> 00:17:12.040
It's got to be a void.


00:17:12.040 --> 00:17:13.840
But you know, a lot of times that's usually like,


00:17:13.840 --> 00:17:17.040
show me all the products in this database or whatever.


00:17:17.040 --> 00:17:18.640
Yeah, yeah.


00:17:18.640 --> 00:17:19.480
- Cool. - Cool.


00:17:19.480 --> 00:17:21.120
Yeah, pretty neat, huh?


00:17:21.120 --> 00:17:22.080
- Very neat.


00:17:22.080 --> 00:17:25.600
- Yeah, and then you have different three basic ideas


00:17:25.600 --> 00:17:26.960
to think about, you have these backends.


00:17:26.960 --> 00:17:29.920
So you have Redis backed by AIO Redis,


00:17:29.920 --> 00:17:32.720
you have Memcache backed by AIO Memcache,


00:17:32.720 --> 00:17:35.840
and then serializers, like you can serialize just string,


00:17:35.840 --> 00:17:40.360
pickle, JSON, message pack, but you can also build your own.


00:17:40.360 --> 00:17:41.720
and that you can also plug in.


00:17:41.720 --> 00:17:43.000
There's a bunch of examples


00:17:43.000 --> 00:17:44.800
and documentation people can check out.


00:17:44.800 --> 00:17:46.960
So this looks really neat to me.


00:17:46.960 --> 00:17:47.800
- Yeah.


00:17:47.800 --> 00:17:50.040
Nice.


00:17:50.040 --> 00:17:52.380
- Not quite something that I need,


00:17:52.380 --> 00:17:54.920
but if I did need it, I would definitely go.


00:17:54.920 --> 00:17:55.880
- I know.


00:17:55.880 --> 00:17:57.720
- And I'd be all over it.


00:17:57.720 --> 00:17:59.200
- Yeah.


00:17:59.200 --> 00:18:04.200
Regarding the level of detail we have in our podcast,


00:18:04.200 --> 00:18:08.160
S.E. Steve says, let's see,


00:18:08.160 --> 00:18:10.200
I only listen to podcasts about APIs.


00:18:10.200 --> 00:18:12.200
- Nice.


00:18:12.200 --> 00:18:14.020
Nice, nice.


00:18:14.020 --> 00:18:16.680
All right, what's your last one, Brian?


00:18:16.680 --> 00:18:21.680
- My last one is, well, the Python packaging project.


00:18:21.680 --> 00:18:23.840
Packaging Python project, same thing.


00:18:23.840 --> 00:18:27.040
No, I have a new one, but I got it from this.


00:18:27.040 --> 00:18:31.160
So when I was reading this article or this tutorial again,


00:18:31.160 --> 00:18:33.120
I came across something I wasn't familiar with.


00:18:33.120 --> 00:18:34.320
So I had to go check it out.


00:18:34.320 --> 00:18:38.240
So down with creating a pyproject.toml,


00:18:38.240 --> 00:18:41.040
one of the options is hatchling.


00:18:41.040 --> 00:18:44.400
- Hatchling.


00:18:44.400 --> 00:18:45.220
- Yeah.


00:18:45.220 --> 00:18:46.060
- I've heard of hatch.


00:18:46.060 --> 00:18:47.840
Is this somehow related to hatch?


00:18:47.840 --> 00:18:48.840
- Yeah, it is hatch.


00:18:48.840 --> 00:18:51.060
So did, have we already covered hatchling?


00:18:51.060 --> 00:18:52.120
- No, I don't think we have here,


00:18:52.120 --> 00:18:53.680
but I love the idea of it.


00:18:53.680 --> 00:18:57.520
- Okay, so hatch is a modern extensible


00:18:57.520 --> 00:19:01.120
Python project manager with a whole bunch of cool features


00:19:01.120 --> 00:19:03.480
like a standardized build systems,


00:19:03.480 --> 00:19:06.540
build system and reproducible builds by default


00:19:06.540 --> 00:19:10.220
and environment management, which, you know, okay.


00:19:10.220 --> 00:19:12.680
So, I'm not sure if this is similar


00:19:12.680 --> 00:19:14.700
to Poetry's environment manager or not.


00:19:14.700 --> 00:19:16.400
I haven't played with it much,


00:19:16.400 --> 00:19:19.800
but you don't actually have to care, which is nice.


00:19:19.800 --> 00:19:21.760
'Cause Poetry, you have to care about it


00:19:21.760 --> 00:19:23.820
'cause that's part of the whole thing.


00:19:23.820 --> 00:19:28.360
Anyway, publishing is easy to PyPI and other sources,


00:19:28.360 --> 00:19:33.120
version management, project generation with sane defaults,


00:19:33.120 --> 00:19:35.200
which I haven't tried that, so I want to try that.


00:19:35.200 --> 00:19:37.260
And supposedly a responsive CLI


00:19:37.260 --> 00:19:40.660
that's two to three times faster than equivalent tools.


00:19:40.660 --> 00:19:42.920
So this, I definitely need to try.


00:19:42.920 --> 00:19:45.400
So this is, I would think it's similar


00:19:45.400 --> 00:19:48.240
on the line of Flit, I think,


00:19:48.240 --> 00:19:52.320
but with some extra things thrown in.


00:19:52.320 --> 00:19:54.360
And one of the reasons why I love Flit now


00:19:54.360 --> 00:19:57.080
is because even though setup tools


00:19:57.080 --> 00:20:00.800
does now support PyProject TOMO properly, completely,


00:20:01.760 --> 00:20:05.680
flits like twice as fast for building stuff.


00:20:05.680 --> 00:20:09.440
But, so I definitely want to try out hatch and try this.


00:20:09.440 --> 00:20:11.200
I did try one little small project,


00:20:11.200 --> 00:20:13.540
just converting a flip project to hatch.


00:20:13.540 --> 00:20:16.040
And it took me like five minutes just using,


00:20:16.040 --> 00:20:17.920
the documentation here is great.


00:20:17.920 --> 00:20:20.720
So the excellent documentation here


00:20:20.720 --> 00:20:22.840
about how to use the different pieces of it.


00:20:22.840 --> 00:20:25.840
So it's pretty neat.


00:20:25.840 --> 00:20:27.200
Have you tried it?


00:20:27.200 --> 00:20:28.040
- I have not tried it.


00:20:28.040 --> 00:20:30.500
I've looked at it and it looks neat to me.


00:20:30.500 --> 00:20:33.900
I don't make many packages.


00:20:33.900 --> 00:20:36.780
I more build applications and web apps and stuff.


00:20:36.780 --> 00:20:37.380
>> Oh, yeah.


00:20:37.380 --> 00:20:39.100
>> I'm less in the,


00:20:39.100 --> 00:20:42.540
what's the right tool to build packages properly?


00:20:42.540 --> 00:20:44.940
I know you're doing that a little bit more.


00:20:44.940 --> 00:20:45.940
>> Yeah.


00:20:45.940 --> 00:20:46.900
>> I'm learning from you.


00:20:46.900 --> 00:20:48.980
>> I guess good mix. I do more packages and


00:20:48.980 --> 00:20:51.780
less applications and you do more applications.


00:20:51.780 --> 00:20:56.100
>> Yeah. Some live feedback.


00:20:56.100 --> 00:20:58.100
Henry Schreiner says, "You can use


00:20:58.100 --> 00:21:03.060
any PEP 621 backend, Hatchling, PDM, Flitcore,


00:21:03.060 --> 00:21:05.900
and so on with Hatch or with PDM2,


00:21:05.900 --> 00:21:08.780
one of the fantastic results of standardization.


00:21:08.780 --> 00:21:11.180
And that Hatchling does a much better job


00:21:11.180 --> 00:21:13.380
of getting source files right than Flitcore.


00:21:13.380 --> 00:21:15.860
- Okay, interesting.


00:21:15.860 --> 00:21:21.060
Yeah, there was a lot of cool options with the Hatch


00:21:21.060 --> 00:21:23.700
that you could specify exactly which modules


00:21:23.700 --> 00:21:25.980
and packages to pick up if you need to.


00:21:25.980 --> 00:21:28.060
That's one of the things that's a little bit mysterious


00:21:28.060 --> 00:21:29.660
with Flit how to figure it out,


00:21:29.660 --> 00:21:33.500
because it just sort of knows somehow.


00:21:33.500 --> 00:21:38.500
I think it's the stuff that's in Git, but it's interesting.


00:21:38.500 --> 00:21:41.460
So the main thing is, is I really like


00:21:41.460 --> 00:21:44.380
with the standardization, the hatch is possible,


00:21:44.380 --> 00:21:46.980
the Flit's possible, that PDM is possible,


00:21:46.980 --> 00:21:50.020
that we can do new things.


00:21:50.020 --> 00:21:52.180
And they're not that different.


00:21:52.180 --> 00:21:55.420
Like it's kind of the backend of packaging


00:21:55.420 --> 00:21:58.660
The front end is the pyproject.toml.


00:21:58.660 --> 00:22:00.780
That's the better world to be in.


00:22:00.780 --> 00:22:04.980
- Yeah, that separation lets there be a lot more exploration,


00:22:04.980 --> 00:22:06.580
a lot more variation.


00:22:06.580 --> 00:22:07.860
- Yep.


00:22:07.860 --> 00:22:10.460
- All right, well, that's it for our items, isn't it?


00:22:10.460 --> 00:22:12.340
- I think so, yeah.


00:22:12.340 --> 00:22:13.580
- You got any extras?


00:22:13.580 --> 00:22:18.420
- No, but hopefully I will soon.


00:22:18.420 --> 00:22:19.620
So I've got something I'm working on.


00:22:19.620 --> 00:22:20.740
- Right on.


00:22:20.740 --> 00:22:21.580
Yes, I know.


00:22:21.580 --> 00:22:23.260
I think I know what you're alluding to.


00:22:23.260 --> 00:22:25.580
Very exciting stuff coming quite soon.


00:22:25.580 --> 00:22:26.380
>> Yeah.


00:22:26.380 --> 00:22:28.140
>> I have one extra.


00:22:28.140 --> 00:22:30.300
This one's quick, but quite cool.


00:22:30.300 --> 00:22:35.620
So I'm sitting here on my MacBook Pro with M1,


00:22:35.620 --> 00:22:38.580
MacBook Pro with M1 Max.


00:22:38.580 --> 00:22:42.460
Until recently, I wasn't able to use PyPy.


00:22:42.460 --> 00:22:47.260
Now, PyPy is the JIT compiled,


00:22:47.260 --> 00:22:50.980
often faster version of Python.


00:22:50.980 --> 00:22:56.400
Sometimes you'll hear people say "Pi-Pi" when they are referring to Pi-PI,


00:22:56.400 --> 00:23:00.240
but all the people who work on Pi-PI pronounce it that way.


00:23:00.240 --> 00:23:03.480
It leaves space for Pi-PI to be pronounced like it should.


00:23:03.480 --> 00:23:09.120
Pi-PI is the fast JIT compiled version of Python.


00:23:09.120 --> 00:23:12.400
The big news is, a couple of weeks ago,


00:23:12.400 --> 00:23:16.960
they announced support for M1, which is pretty cool.


00:23:16.960 --> 00:23:19.660
If you're on Apple Silicon, you can now use Pi-PI.


00:23:19.660 --> 00:23:21.660
- That's very cool. - Natively, yeah.


00:23:21.660 --> 00:23:24.660
Yeah, it was done by Fajal


00:23:24.660 --> 00:23:29.660
and supported by contributions from the Open Collective,


00:23:29.660 --> 00:23:31.660
which is pretty cool.


00:23:31.660 --> 00:23:35.660
And it's based on support for Aarch64,


00:23:35.660 --> 00:23:37.660
which is ARM64 in Linux,


00:23:37.660 --> 00:23:39.660
with some variations on how this works.


00:23:39.660 --> 00:23:44.660
So they've got 3.8 and 3.9 working on macOS ARM64 platform,


00:23:44.660 --> 00:23:46.660
which is pretty cool.


00:23:46.660 --> 00:23:47.660
So if you're using that and you've been waiting for this,


00:23:47.660 --> 00:23:51.180
you've been waiting for this should make your code run faster, maybe use less memory, that


00:23:51.180 --> 00:23:52.180
kind of thing.


00:23:52.180 --> 00:23:53.180
Very cool.


00:23:53.180 --> 00:24:00.780
If people are interested in PyPy, testing code on episode 190, I interviewed Carl Frederick


00:24:00.780 --> 00:24:03.300
Bowles about testing PyPy.


00:24:03.300 --> 00:24:05.300
So it's a good episode.


00:24:05.300 --> 00:24:06.860
Yeah, there's a lot of testing.


00:24:06.860 --> 00:24:09.820
I mean, it's the entire Python runtime, basically.


00:24:09.820 --> 00:24:12.260
It's like in much of the standard library.


00:24:12.260 --> 00:24:13.260
That's a lot of work.


00:24:13.260 --> 00:24:16.940
Yeah, it's an interesting story.


00:24:16.940 --> 00:24:20.220
Would you say that testing and documentation are often


00:24:20.220 --> 00:24:23.260
really good things to add to your project that go along


00:24:23.260 --> 00:24:24.900
together in some ways?


00:24:24.900 --> 00:24:27.940
- Well, hopefully you're doing it at the same time, but yes.


00:24:27.940 --> 00:24:28.940
- Yes.


00:24:28.940 --> 00:24:33.420
So, you know, we've all worked with different types


00:24:33.420 --> 00:24:38.380
of team dynamics, the sort of flat hierarchy,


00:24:38.380 --> 00:24:40.220
people would just take over the projects,


00:24:40.220 --> 00:24:42.860
the parts of the projects that they seem best suited for,


00:24:42.860 --> 00:24:45.340
and there might be more hierarchical,


00:24:45.340 --> 00:24:47.100
(laughs)


00:24:47.100 --> 00:24:47.940
Version.


00:24:47.940 --> 00:24:52.620
So our joke this week is about a somewhat dominating


00:24:52.620 --> 00:24:55.760
senior developer here.


00:24:55.760 --> 00:25:00.180
And there's a junior developer just hired onto the team.


00:25:00.180 --> 00:25:02.220
You know, this is a picture, people can check it out.


00:25:02.220 --> 00:25:03.740
Just follow the link in the show notes.


00:25:03.740 --> 00:25:05.960
The junior asks, "Where's the documentation?"


00:25:05.960 --> 00:25:08.620
In a very stern face, the team is,


00:25:08.620 --> 00:25:10.620
"I am the documentation."


00:25:10.620 --> 00:25:12.340
(laughs)


00:25:12.340 --> 00:25:13.180
- Yes.


00:25:14.100 --> 00:25:16.380
Hopefully you're not currently working in this situation,


00:25:16.380 --> 00:25:17.480
but it's pretty funny.


00:25:17.480 --> 00:25:21.140
- You know, there's always bits.


00:25:21.140 --> 00:25:23.580
There's always pieces of the system that like,


00:25:23.580 --> 00:25:25.340
well, how does this work?


00:25:25.340 --> 00:25:27.420
Oh, you've got to ask that guy.


00:25:27.420 --> 00:25:29.380
He's not even on our team before anymore.


00:25:29.380 --> 00:25:31.620
Yeah, but he's the one that wrote it.


00:25:31.620 --> 00:25:33.000
And luckily he's still with the company.


00:25:33.000 --> 00:25:33.980
So go talk to him.


00:25:33.980 --> 00:25:34.820
So.


00:25:34.820 --> 00:25:36.300
- Luckily no one understands that we don't touch it anymore.


00:25:36.300 --> 00:25:37.580
It seems to still work.


00:25:37.580 --> 00:25:38.700
- Yeah.


00:25:38.700 --> 00:25:39.600
- Exactly.


00:25:39.600 --> 00:25:40.440
All right.


00:25:40.440 --> 00:25:43.100
Well, what seems to still be working is our podcast, Brian.


00:25:43.100 --> 00:25:45.620
>> It does. Yeah. Thank you.


00:25:45.620 --> 00:25:48.860
>> Yeah. Thanks for everyone to listen. See you all later.


00:25:48.860 --> 00:25:50.580
>> Bye.

