WEBVTT

00:00:00.000 --> 00:00:03.000
Hey, we're live.


00:00:03.000 --> 00:00:03.500
Yay.


00:00:03.500 --> 00:00:08.500
Welcome to Python Bytes, everybody in the video world.


00:00:08.500 --> 00:00:10.800
So welcome, Michael.


00:00:10.800 --> 00:00:14.300
Hey, you ready to get started?


00:00:14.300 --> 00:00:15.600
Let's do it.


00:00:15.600 --> 00:00:16.300
A lot of good things.


00:00:16.300 --> 00:00:17.200
We got to get to them.


00:00:17.200 --> 00:00:17.700
Yeah.


00:00:17.700 --> 00:00:21.800
Hello and welcome to Python Bytes, where we deliver Python news and


00:00:21.800 --> 00:00:23.600
headlines directly to your earbuds.


00:00:23.600 --> 00:00:29.700
This is Episode 315, recorded December 20, 2022, almost the end of the year.


00:00:29.700 --> 00:00:30.700
I am Brian Okken.


00:00:30.700 --> 00:00:32.380
I'm Michael Kennedy.


00:00:32.380 --> 00:00:34.980
It is almost the end of the year.


00:00:34.980 --> 00:00:36.900
Are you guys, you ready for Christmas and everything?


00:00:36.900 --> 00:00:38.220
Yeah.


00:00:38.220 --> 00:00:41.460
Starting to think about Christmas, maybe try to do some skiing.


00:00:41.460 --> 00:00:44.500
You know, it's getting cold and it's snowing in the mountains around here.


00:00:44.500 --> 00:00:46.020
So yeah, getting there.


00:00:46.020 --> 00:00:47.060
Anyway.


00:00:47.060 --> 00:00:50.180
Um, why don't you kick us off with our first story?


00:00:50.180 --> 00:00:51.220
All right.


00:00:51.220 --> 00:00:53.220
Let's let's go.


00:00:53.220 --> 00:00:54.740
Let's talk some Jupyter server.


00:00:55.580 --> 00:00:58.980
So this is an announcement by Zach Saylor,


00:00:58.980 --> 00:01:02.520
and it says, "Jupyter Server 2.0 is released."


00:01:02.520 --> 00:01:03.980
Now we know what Jupyter is,


00:01:03.980 --> 00:01:05.100
we know what Jupyter Notebooks are,


00:01:05.100 --> 00:01:06.780
we know what JupyterLab is.


00:01:06.780 --> 00:01:10.020
Well, Jupyter Server is the core web server


00:01:10.020 --> 00:01:12.340
that powers those things.


00:01:12.340 --> 00:01:15.500
So when you pull up JupyterLab or Jupyter Notebook,


00:01:15.500 --> 00:01:16.860
you're talking to a server,


00:01:16.860 --> 00:01:19.580
oftentimes that's a local host little thing running,


00:01:19.580 --> 00:01:23.060
but other times it's a centralized server that's set up for


00:01:23.060 --> 00:01:25.020
like students or a research group,


00:01:25.020 --> 00:01:28.220
or it's set up on a supercomputer near a bunch of data


00:01:28.220 --> 00:01:29.780
that you log into it.


00:01:29.780 --> 00:01:31.860
And it runs locally on that, right?


00:01:31.860 --> 00:01:35.420
So it's the core of Jupyter in a lot of ways.


00:01:35.420 --> 00:01:39.220
So 2.0, that's a big deal, right?


00:01:39.220 --> 00:01:40.540
- I think so.


00:01:40.540 --> 00:01:42.380
- Yeah, I get it. - It's new features, right?


00:01:42.380 --> 00:01:43.960
- In open source, when something goes


00:01:43.960 --> 00:01:46.060
from one major version to another,


00:01:46.060 --> 00:01:47.820
that's usually a pretty big deal.


00:01:47.820 --> 00:01:49.500
So let's hit some of the highlights.


00:01:49.500 --> 00:01:54.160
So one of them is a new identity API.


00:01:54.160 --> 00:01:59.160
One of the farther looking out features of Jupyter server


00:01:59.160 --> 00:02:01.160
that they're hoping to bring


00:02:01.160 --> 00:02:03.960
is like a Google Docs like experience.


00:02:03.960 --> 00:02:07.480
So real-time collaboration experiences.


00:02:07.480 --> 00:02:10.240
There are some, but I'm making them better.


00:02:10.240 --> 00:02:13.080
And around this, having multiple people


00:02:13.080 --> 00:02:15.920
working on a single notebook,


00:02:15.920 --> 00:02:19.640
you need to have a good way to work with identity.


00:02:19.640 --> 00:02:22.280
So there's a new identity API in Jupyter server


00:02:22.280 --> 00:02:23.740
that makes it possible.


00:02:23.740 --> 00:02:26.320
It is configurable, pluggable.


00:02:26.320 --> 00:02:30.660
You can even swap out your own identity provider


00:02:30.660 --> 00:02:33.200
to authenticate users with any provider.


00:02:33.200 --> 00:02:37.900
So within your organization, you could do single sign on,


00:02:37.900 --> 00:02:39.500
all those types of fun things.


00:02:39.500 --> 00:02:40.420
- Oh, neat.


00:02:40.420 --> 00:02:41.260
- Yeah.


00:02:42.500 --> 00:02:46.540
Related to that, you have authorization.


00:02:46.540 --> 00:02:50.280
So once you know who you are, what can you do?


00:02:50.280 --> 00:02:52.580
Enabling collaboration on a notebook


00:02:52.580 --> 00:02:54.980
shouldn't just mean you have access


00:02:54.980 --> 00:02:57.340
to everything on the server or nothing on the server,


00:02:57.340 --> 00:03:00.240
but you maybe have access to these notebooks,


00:03:00.240 --> 00:03:01.220
but not those notebooks.


00:03:01.220 --> 00:03:04.140
Or maybe you can read that notebook and not write to it.


00:03:04.140 --> 00:03:07.420
So there's this new authorization API


00:03:07.420 --> 00:03:10.860
that allows you to share certain notebooks


00:03:10.860 --> 00:03:14.060
with certain people, even if they have access to the server.


00:03:14.060 --> 00:03:15.460
Okay, so that's pretty cool.


00:03:15.460 --> 00:03:20.420
Again, with the collaboration stuff,


00:03:20.420 --> 00:03:23.700
there's a new event system API coming along


00:03:23.700 --> 00:03:27.420
and they created this package called Jupyter events


00:03:27.420 --> 00:03:32.420
that allows for JSON based event driven system over here.


00:03:32.420 --> 00:03:35.380
So a lot of cool things that should be coming.


00:03:35.380 --> 00:03:37.020
So it's like a foundational piece


00:03:37.020 --> 00:03:39.220
so that they can add more events,


00:03:39.220 --> 00:03:40.900
more interactivity and so on.


00:03:40.900 --> 00:03:44.580
There's a new kernel WebSocket API.


00:03:44.580 --> 00:03:46.580
It ships with its own kernel manager.


00:03:46.580 --> 00:03:48.660
I suspect most people are not messing with that,


00:03:48.660 --> 00:03:50.900
but it's down in the guts.


00:03:50.900 --> 00:03:53.860
In JupyterLab, you can open up a terminal.


00:03:53.860 --> 00:03:57.300
Now this terminal service is a server extension


00:03:57.300 --> 00:03:59.660
and it can be optionally disabled


00:03:59.660 --> 00:04:01.020
because it's an extension, which is cool.


00:04:01.020 --> 00:04:02.620
And Brian, the last one for you.


00:04:02.620 --> 00:04:06.420
They say, "As we work to increase our test coverage


00:04:06.420 --> 00:04:09.140
to 80% major thank you to Steve Sylvester.


00:04:09.140 --> 00:04:13.060
We built a handy set of Pytest fixtures that can benefit Jupyter


00:04:13.060 --> 00:04:15.220
developers and extension authors.


00:04:15.220 --> 00:04:16.380
That's pretty cool.


00:04:16.380 --> 00:04:16.940
Yeah.


00:04:16.940 --> 00:04:21.780
We released Pytest, Jupyter, a bunch of fixtures and other Pytest goodies for


00:04:21.780 --> 00:04:23.420
Jupyter core libraries and extensions.


00:04:23.420 --> 00:04:24.940
That's nice.


00:04:24.940 --> 00:04:29.460
I'm actually going to check this out and I think it'd be cool to get one of those


00:04:29.460 --> 00:04:32.140
folks on to test and code to talk about it.


00:04:32.140 --> 00:04:33.460
So I'll, I'll reach out to them.


00:04:33.460 --> 00:04:34.340
Yeah.


00:04:34.340 --> 00:04:35.420
I think that'd be great too.


00:04:35.420 --> 00:04:35.780
All right.


00:04:35.780 --> 00:04:39.140
Well, there you have it, the core of Jupyter got a little bit better.


00:04:39.140 --> 00:04:40.340
Nice.


00:04:40.340 --> 00:05:05.700
Well, what do we I'm next? So I guess what do I got? I, I actually so last week, we were it was just last week, actually, time flies. We were talking about automatically converting stuff like having having other programs convert your Python code, modify your code, and all


00:05:05.700 --> 00:05:07.380
the different ways you can do that.


00:05:07.380 --> 00:05:09.340
And one of the things I said was,


00:05:09.340 --> 00:05:15.420
it'd be cool if we had some ways to convert from setup.py


00:05:15.420 --> 00:05:17.060
to setup.cfg--


00:05:17.060 --> 00:05:21.360
or from setup systems to pyproject.toml.


00:05:21.360 --> 00:05:23.380
And so, of course, lots of people


00:05:23.380 --> 00:05:26.260
reached out to me and said, there's already some ways


00:05:26.260 --> 00:05:27.500
that you should take a look at.


00:05:27.500 --> 00:05:31.020
So thank you, Christian Klaus, and Brian Skin,


00:05:31.020 --> 00:05:34.140
and others for reaching out and letting me know.


00:05:34.140 --> 00:05:36.060
The first one-- actually, the main thing


00:05:36.060 --> 00:05:40.260
I wanted to talk about was a thing called ini.toml.


00:05:40.260 --> 00:05:43.740
So this is a project that takes--


00:05:43.740 --> 00:05:46.540
it converts-- it attempts to convert


00:05:46.540 --> 00:05:50.820
ini files or CFG files to toml.


00:05:50.820 --> 00:05:52.220
They say it's experimental.


00:05:52.220 --> 00:05:57.140
So what is-- I thought I was looking at setup.py files.


00:05:57.140 --> 00:06:00.060
Well, actually, a lot of large projects


00:06:00.060 --> 00:06:01.780
are not just setup.py.


00:06:01.780 --> 00:06:05.100
They've moved a lot of the settings from setup.py


00:06:05.100 --> 00:06:06.260
to setup.cfg.


00:06:06.260 --> 00:06:07.700
So this is still helpful.


00:06:07.700 --> 00:06:08.980
This isn't going to--


00:06:08.980 --> 00:06:11.740
I don't think I can grab your setup.py file if that's


00:06:11.740 --> 00:06:13.340
the only thing you're using.


00:06:13.340 --> 00:06:17.540
But if you're using setup.cfg, maybe this will help.


00:06:17.540 --> 00:06:19.340
Converts to a TOML file.


00:06:19.340 --> 00:06:23.180
And it says it's experimental, but that's all right.


00:06:23.180 --> 00:06:25.180
So it's kind of fun.


00:06:25.180 --> 00:06:27.260
There's a couple versions of it.


00:06:27.260 --> 00:06:29.660
One of the versions, it's light.


00:06:29.660 --> 00:06:32.900
And it's got late, L-I-T-E, and full.


00:06:32.900 --> 00:06:36.940
And the light version has less calories.


00:06:36.940 --> 00:06:38.580
No.


00:06:38.580 --> 00:06:42.180
The light version creates a TOML file,


00:06:42.180 --> 00:06:45.780
but the full version will try to get your comments over too.


00:06:45.780 --> 00:06:49.180
So convert your comments into TOML-compliant comments.


00:06:49.180 --> 00:06:50.260
That's pretty neat.


00:06:50.260 --> 00:06:53.940
So I would definitely try that.


00:06:53.940 --> 00:06:54.540
What did I?


00:06:54.540 --> 00:06:57.220
I don't think I tried this.


00:06:57.220 --> 00:06:59.340
I didn't try this, but it looks pretty fun.


00:06:59.340 --> 00:07:02.980
So a way to automatically change that.


00:07:02.980 --> 00:07:06.240
So be fine to grab that.


00:07:06.240 --> 00:07:09.420
And I've heard from people that they have used this


00:07:09.420 --> 00:07:13.140
to convert their project, at least the initial batch.


00:07:13.140 --> 00:07:17.620
But at least Christian mentioned


00:07:17.620 --> 00:07:21.220
that they needed to clean it up a bit afterwards.


00:07:21.220 --> 00:07:22.980
So one of the tools they used


00:07:22.980 --> 00:07:26.920
was a thing called pyproject-format.


00:07:28.180 --> 00:07:31.940
And what this does is, and I did try this, it's pretty neat.


00:07:31.940 --> 00:07:36.940
It takes like your, if you got any PyProject.toml file


00:07:36.940 --> 00:07:42.440
and it converts it to a known way to set it up.


00:07:42.440 --> 00:07:44.020
So it takes over.


00:07:44.020 --> 00:07:46.680
- It's like black for project files.


00:07:46.680 --> 00:07:47.620
- Kind of, yeah.


00:07:47.620 --> 00:07:50.540
But one of the things with like the toml syntax


00:07:50.540 --> 00:07:53.020
is you can have like, you know, like in any file,


00:07:53.020 --> 00:07:55.040
you can have things in any order you want


00:07:55.040 --> 00:07:56.520
and it's still valid.


00:07:56.520 --> 00:07:58.960
but are you gonna be able to find it there?


00:07:58.960 --> 00:08:02.120
I mean, if you're working with lots of projects,


00:08:02.120 --> 00:08:04.600
it'd be really nice if like the authors


00:08:04.600 --> 00:08:06.600
were in a similar place


00:08:06.600 --> 00:08:08.760
and the dependencies were in a similar place


00:08:08.760 --> 00:08:10.360
'cause they could be like all over the place


00:08:10.360 --> 00:08:13.040
and it's easier to find them


00:08:13.040 --> 00:08:16.480
if they're in the right place and formatted the same.


00:08:16.480 --> 00:08:19.520
And I mean, who really cares how much, how it's formatted


00:08:19.520 --> 00:08:22.720
as long as it looks good and it's proper.


00:08:22.720 --> 00:08:25.120
So I think this is a neat idea.


00:08:25.120 --> 00:08:29.360
I tried it on a couple of my projects, and it worked OK.


00:08:29.360 --> 00:08:32.800
So I don't want to put that in asterisks.


00:08:32.800 --> 00:08:35.760
So you want to check what you get afterwards.


00:08:35.760 --> 00:08:38.320
Because one of the things it did, which I didn't expect it


00:08:38.320 --> 00:08:41.720
to, was it replaced--


00:08:41.720 --> 00:08:44.240
it took the name of my project and replaced dashes


00:08:44.240 --> 00:08:46.040
with underscores.


00:08:46.040 --> 00:08:51.760
And I know that a library, you can't have a dash in the thing


00:08:51.760 --> 00:08:54.680
you're importing, but the name of the project


00:08:54.680 --> 00:08:59.920
that is where it shows up on PyPI and everywhere else,


00:08:59.920 --> 00:09:01.200
it can have a dash in it.


00:09:01.200 --> 00:09:03.600
And traditionally-- and I was using it on a pytest plugin.


00:09:03.600 --> 00:09:05.040
Traditionally, we do have dashes.


00:09:05.040 --> 00:09:06.760
We say pytest dash something.


00:09:06.760 --> 00:09:08.880
So it needs to stay a dash.


00:09:08.880 --> 00:09:09.720
Don't translate it.


00:09:09.720 --> 00:09:10.920
So that was a little shocking.


00:09:10.920 --> 00:09:13.080
>>Do you want it to be pytest underscore check?


00:09:13.080 --> 00:09:15.920
>>Yeah, no, I don't want it to be that.


00:09:15.920 --> 00:09:18.280
So I did submit an issue.


00:09:18.280 --> 00:09:19.400
I'm sure it's a minor thing.


00:09:19.400 --> 00:09:22.120
But at least I know it's there.


00:09:22.120 --> 00:09:23.240
So to check it out.


00:09:23.240 --> 00:09:26.240
So a neat tool to for auto format it


00:09:26.240 --> 00:09:28.700
and a couple other tools that were kind of neat


00:09:28.700 --> 00:09:32.040
pipe validate PI project.


00:09:32.040 --> 00:09:36.800
Just a moment.


00:09:36.800 --> 00:09:40.860
Can you still see me?


00:09:40.860 --> 00:09:41.700
Okay.


00:09:41.700 --> 00:09:42.840
- Yeah, it seems fine.


00:09:42.840 --> 00:09:44.680
- Something happened on my computer.


00:09:44.680 --> 00:09:49.680
Anyway, it just validates to make sure everything's fine.


00:09:51.760 --> 00:09:54.480
And I ran it on a couple of projects and nothing happened.


00:09:54.480 --> 00:09:55.920
I'm like, oh, it must be good.


00:09:55.920 --> 00:10:00.760
So I inserted some errors just to see what would happen.


00:10:00.760 --> 00:10:02.240
And it's pretty terse.


00:10:02.240 --> 00:10:03.640
It pretty much just says like,


00:10:03.640 --> 00:10:06.920
there's an error on this line at this column or something.


00:10:06.920 --> 00:10:10.360
And so it was still helpful.


00:10:10.360 --> 00:10:13.560
You can go count and figure out where the project might be,


00:10:13.560 --> 00:10:16.280
but kind of a neat validator.


00:10:16.280 --> 00:10:19.680
But for validation, and I'm not sure what I was checking,


00:10:19.680 --> 00:10:24.040
but it says it's JSON schema definition defined driven.


00:10:24.040 --> 00:10:25.780
So you could probably check it out.


00:10:25.780 --> 00:10:29.320
- Interesting, it probably converts it to JSON


00:10:29.320 --> 00:10:32.680
and then run it through JSON schema or something like that.


00:10:32.680 --> 00:10:33.520
- Oh, you think so?


00:10:33.520 --> 00:10:34.880
Maybe. - Yeah, probably.


00:10:34.880 --> 00:10:35.720
- Might.


00:10:35.720 --> 00:10:39.160
One of the things that I wanted to bring up


00:10:39.160 --> 00:10:42.520
when validating TOML files and projects


00:10:42.520 --> 00:10:43.880
is don't forget TOX.


00:10:43.880 --> 00:10:48.880
So using TOX to go ahead and...


00:10:48.920 --> 00:10:52.440
what the default of TOCs, you can use it for lots of stuff,


00:10:52.440 --> 00:10:54.800
but the default works great for me for this,


00:10:54.800 --> 00:10:57.960
which is say, to take your project, build it,


00:10:57.960 --> 00:11:02.180
put it in a virtual environment and install it there.


00:11:02.180 --> 00:11:03.920
And you'll catch things like,


00:11:03.920 --> 00:11:06.480
you forgot to specify a dependency,


00:11:06.480 --> 00:11:09.320
or missing dependencies,


00:11:09.320 --> 00:11:12.600
or you forgot some code or something like that.


00:11:12.600 --> 00:11:13.840
You'll catch it if you test it.


00:11:13.840 --> 00:11:15.500
So test your projects.


00:11:15.500 --> 00:11:17.840
- Absolutely.


00:11:17.840 --> 00:11:19.600
- Yeah, those are a bunch of great little tools.


00:11:19.600 --> 00:11:22.280
I didn't know about hardly any of them.


00:11:22.280 --> 00:11:25.440
I'm starting to do more with pyproject.toml, it's nice.


00:11:25.440 --> 00:11:26.280
- And it's--


00:11:26.280 --> 00:11:28.560
- Hatch and hatchling and pyproject.toml.


00:11:28.560 --> 00:11:31.200
- Oh yeah, hatch is fun.


00:11:31.200 --> 00:11:33.000
So hatch and hatchling.


00:11:33.000 --> 00:11:35.920
- It sure is.


00:11:35.920 --> 00:11:39.080
All right, well, quick word from our sponsor


00:11:39.080 --> 00:11:41.560
before we move on, do you think?


00:11:41.560 --> 00:11:42.880
- Yeah, it sounds great.


00:11:42.880 --> 00:11:45.380
So this episode of Python Bytes is brought to you


00:11:45.380 --> 00:11:47.720
by Microsoft for Startups.


00:11:47.720 --> 00:11:49.520
Starting a business is hard.


00:11:49.520 --> 00:11:52.040
By some estimates, over 90% of startups


00:11:52.040 --> 00:11:54.520
will go out of business within the first year.


00:11:54.520 --> 00:11:56.880
With this in mind, Microsoft for Startups set out


00:11:56.880 --> 00:12:00.480
to understand what startups need to be successful


00:12:00.480 --> 00:12:01.880
and create a digital platform


00:12:01.880 --> 00:12:04.600
to help overcome those challenges.


00:12:04.600 --> 00:12:07.680
And it's Microsoft for Startups Founders Hub.


00:12:07.680 --> 00:12:10.440
Founders Hub provides all founders at any stage


00:12:10.440 --> 00:12:14.140
with free resources to help solve startup challenges.


00:12:14.140 --> 00:12:16.640
The platform provides technology benefits,


00:12:16.640 --> 00:12:19.960
access to expert guidance and skilling resources,


00:12:19.960 --> 00:12:23.360
mentorship and networking connections, and so much more.


00:12:23.360 --> 00:12:24.940
Unlike others in the industry,


00:12:24.940 --> 00:12:26.920
Microsoft for Startup, Founders Hub,


00:12:26.920 --> 00:12:29.680
doesn't require startups to be investor backed


00:12:29.680 --> 00:12:32.240
or third party validated to participate.


00:12:32.240 --> 00:12:34.640
Founders Hub is truly open to all.


00:12:34.640 --> 00:12:35.600
So what do you get?


00:12:35.600 --> 00:12:38.320
You get to speed up development


00:12:38.320 --> 00:12:40.880
with free access to GitHub and Microsoft Cloud


00:12:40.880 --> 00:12:43.400
with the ability to unlock credits over time.


00:12:43.400 --> 00:12:44.960
And to help your startup innovate,


00:12:44.960 --> 00:12:47.580
Founders Hub is partnering with innovative companies


00:12:47.580 --> 00:12:50.780
like OpenAI, a global leader in AI research


00:12:50.780 --> 00:12:54.740
and deployment to provide exclusive benefits and discounts.


00:12:54.740 --> 00:12:57.400
Through Microsoft for Startup Founders Hub,


00:12:57.400 --> 00:12:59.980
becoming a founder is no longer about who you know.


00:12:59.980 --> 00:13:02.640
You'll have access to their mentorship network,


00:13:02.640 --> 00:13:05.140
giving you access to a pool of hundreds of mentors


00:13:05.140 --> 00:13:06.980
across a range of disciplines,


00:13:06.980 --> 00:13:10.260
across areas like idea validation, fundraising,


00:13:10.260 --> 00:13:12.860
management, coaching, sales, marketing,


00:13:12.860 --> 00:13:15.660
as well as specific technical stress points.


00:13:15.660 --> 00:13:17.980
You'll be able to book a one-on-one meeting


00:13:17.980 --> 00:13:19.060
with the mentors,


00:13:19.060 --> 00:13:21.620
many of whom are former founders themselves.


00:13:21.620 --> 00:13:23.380
Make your ideas a reality today


00:13:23.380 --> 00:13:24.900
with the critical support you'll get


00:13:24.900 --> 00:13:27.580
from Microsoft for Startup Founders Hub.


00:13:27.580 --> 00:13:29.260
To join the program,


00:13:29.260 --> 00:13:33.940
visit pythonbytes.fm/foundershub2022,


00:13:33.940 --> 00:13:36.940
or of course, go to your show notes for this episode


00:13:36.940 --> 00:13:39.020
and click the link there.


00:13:40.340 --> 00:13:43.140
Indeed, thanks to Microsoft for supporting our show.


00:13:43.140 --> 00:13:44.140
Very cool program.


00:13:44.140 --> 00:13:48.220
All right, let's talk about the cloud.


00:13:48.220 --> 00:13:50.500
We're going to round this whole episode out


00:13:50.500 --> 00:13:53.160
with a little bit of talk about the cloud as well.


00:13:53.160 --> 00:13:57.960
Specifically though, serverless and functions.


00:13:57.960 --> 00:13:59.980
Brian, have you done anything with functions


00:13:59.980 --> 00:14:03.340
like AWS Lambda or DigitalOcean


00:14:03.340 --> 00:14:06.180
or any of those Azure functions?


00:14:06.180 --> 00:14:07.020
- Not for a while.


00:14:07.020 --> 00:14:08.380
I played with it when I learned about them,


00:14:08.380 --> 00:14:10.980
but I haven't done anything lately.


00:14:10.980 --> 00:14:11.820
- Yeah, they're neat.


00:14:11.820 --> 00:14:15.080
I've been thinking about this project.


00:14:15.080 --> 00:14:17.700
I'm not even close to committing to it


00:14:17.700 --> 00:14:19.500
and not gonna give away too many details


00:14:19.500 --> 00:14:23.100
until I'm more willing to put time and energy into it.


00:14:23.100 --> 00:14:26.180
But something that requires interaction


00:14:26.180 --> 00:14:29.020
from many, many different geographical locations.


00:14:29.020 --> 00:14:31.740
And one thing that's really cool about Lambda


00:14:31.740 --> 00:14:33.180
and serverless, these functions,


00:14:33.180 --> 00:14:34.500
is you only pay while they're running.


00:14:34.500 --> 00:14:36.260
And so if you want to say,


00:14:36.260 --> 00:14:38.020
I wanna have 20 different locations


00:14:38.020 --> 00:14:41.080
in which I can, like geolocations throughout the world,


00:14:41.080 --> 00:14:42.340
I could do certain things,


00:14:42.340 --> 00:14:44.020
but I'm not gonna do them very often.


00:14:44.020 --> 00:14:46.360
Well, having a bunch of functions,


00:14:46.360 --> 00:14:50.000
many of them on these different parts of the cloud


00:14:50.000 --> 00:14:50.960
would be really awesome.


00:14:50.960 --> 00:14:54.020
And if you're working with AWS Lambda,


00:14:54.020 --> 00:14:57.040
there's certain APIs for doing this,


00:14:57.040 --> 00:14:59.540
obviously that AWS puts out,


00:14:59.540 --> 00:15:01.860
but what if you were a Python developer


00:15:01.860 --> 00:15:03.300
and you wanted to use Python?


00:15:04.220 --> 00:15:08.140
So I present to you AWS Lambda Power Tools Python,


00:15:08.140 --> 00:15:11.740
a suite of utilities for AWS Lambda functions


00:15:11.740 --> 00:15:15.320
that makes distributed tracing, structured logging,


00:15:15.320 --> 00:15:16.900
custom metrics and item potency


00:15:16.900 --> 00:15:19.700
and many leading best practices easier.


00:15:19.700 --> 00:15:22.740
And it is all based on Python.


00:15:22.740 --> 00:15:24.460
So you can just write your Python code


00:15:24.460 --> 00:15:27.180
and start working with this API.


00:15:27.180 --> 00:15:29.900
This one came to us from,


00:15:29.900 --> 00:15:30.900
let me make sure I got this right,


00:15:30.900 --> 00:15:32.060
via Mark Pender.


00:15:32.060 --> 00:15:35.180
So thanks, Mark, for sending this in.


00:15:35.180 --> 00:15:39.540
It also happens to be available in Java, TypeScript,


00:15:39.540 --> 00:15:40.700
and .NET.


00:15:40.700 --> 00:15:43.540
But if you come down and look at the features,


00:15:43.540 --> 00:15:49.140
there's all sorts of different bits of Python code


00:15:49.140 --> 00:15:52.380
and classes or modules that you can use that do things


00:15:52.380 --> 00:15:54.540
like distributed tracing.


00:15:54.540 --> 00:15:56.100
Because if you're on a serverless thing


00:15:56.100 --> 00:15:59.820
and something you want to keep track of,


00:15:59.820 --> 00:16:04.820
some sort of logging or performance.


00:16:04.820 --> 00:16:06.580
Those things are super transient.


00:16:06.580 --> 00:16:09.500
They don't have a hard drive where you append to the log


00:16:09.500 --> 00:16:10.660
or anything like that.


00:16:10.660 --> 00:16:13.820
So having that kind of setup would be great.


00:16:13.820 --> 00:16:17.940
Use a Pydantic for data parsing.


00:16:17.940 --> 00:16:21.940
But there's just a bunch of built in parts of this library


00:16:21.940 --> 00:16:24.340
that you can use within your functions,


00:16:24.340 --> 00:16:26.660
your serverless functions to make it better.


00:16:26.660 --> 00:16:29.260
So it's got tracing, which includes decorators


00:16:29.260 --> 00:16:31.260
and utilities to trace Lambda functions,


00:16:31.260 --> 00:16:33.560
both synchronous and asynchronous.


00:16:33.560 --> 00:16:35.560
There you go. Structured logging,


00:16:35.560 --> 00:16:40.040
metrics that asynchronously go up to CloudWatch.


00:16:40.040 --> 00:16:42.200
Remember, this is AWS.


00:16:42.200 --> 00:16:49.440
Event handlers for putting stuff over into GraphQL.


00:16:49.440 --> 00:16:52.160
You can build your own middleware,


00:16:52.160 --> 00:16:54.800
like something that runs before and after the request.


00:16:54.800 --> 00:16:56.800
That's really, really handy.


00:16:56.800 --> 00:17:02.800
like only certain types of clients should be able to call this over the web.


00:17:02.800 --> 00:17:07.800
Batch processing, typing validation, a bunch of other stuff, parsing, streaming.


00:17:07.800 --> 00:17:13.800
So you can actually set it up to, instead of loading some massive data set into your function,


00:17:13.800 --> 00:17:16.800
you can just stream that data in and process it as it goes.


00:17:16.800 --> 00:17:20.800
So there's tutorials and there's some example applications.


00:17:20.800 --> 00:17:23.800
There's a serverless shopping cart, a serverless airline.


00:17:23.800 --> 00:17:25.800
That's a pretty big one.


00:17:25.800 --> 00:17:28.920
Serverless e-commerce platform and some graph.


00:17:28.920 --> 00:17:31.600
Serverless, let me just say this,


00:17:31.600 --> 00:17:32.680
it's not a joke, it's serious.


00:17:32.680 --> 00:17:35.600
Serverless GraphQL nanny booking API.


00:17:35.600 --> 00:17:38.960
There it is.


00:17:38.960 --> 00:17:39.800
- Sure, nice.


00:17:39.800 --> 00:17:42.720
- Anyway, if people are doing serverless,


00:17:42.720 --> 00:17:46.000
especially if they're doing AWS Lambda, this might be cool.


00:17:46.000 --> 00:17:51.280
John, she and the audience points out that Zappa


00:17:51.280 --> 00:17:55.520
works great for quickly deploying Flask apps as...


00:17:55.520 --> 00:17:56.480
Yeah.


00:17:56.480 --> 00:17:59.360
So if you look at AWS,


00:17:59.360 --> 00:18:03.040
Zappo, OEM, Flask,


00:18:03.040 --> 00:18:04.840
that's probably a sufficient search.


00:18:04.840 --> 00:18:08.760
Right, that's a pretty cool project.


00:18:08.760 --> 00:18:11.680
I believe we covered that way, way back in the day.


00:18:11.680 --> 00:18:14.280
So basically, it turns your Flask routes


00:18:14.280 --> 00:18:16.320
into serverless function calls as well.


00:18:16.320 --> 00:18:19.340
So anyway, here's some nice tools.


00:18:19.340 --> 00:18:21.860
I suspect you could probably put those together as well.


00:18:21.860 --> 00:18:22.700
Right?


00:18:22.700 --> 00:18:24.740
Like you're tracing and logging,


00:18:24.740 --> 00:18:26.780
you could probably still put inside of a Zappo,


00:18:26.780 --> 00:18:29.340
but I haven't tried that combination.


00:18:29.340 --> 00:18:30.180
- Cool.


00:18:30.180 --> 00:18:32.300
Neat.


00:18:32.300 --> 00:18:33.380
Well, I'm looking forward


00:18:33.380 --> 00:18:35.540
to whatever secret project you're working.


00:18:35.540 --> 00:18:39.500
- There's like a 17 and a half percent chance


00:18:39.500 --> 00:18:41.020
that that actually comes to first


00:18:41.020 --> 00:18:43.460
'cause it's got a lot of operational overhead.


00:18:43.460 --> 00:18:47.980
I'm not sure I want to like put myself on pager duty.


00:18:47.980 --> 00:18:48.820
- Yeah.


00:18:48.820 --> 00:18:50.480
I do want to hear what you got next.


00:18:50.480 --> 00:18:51.320
- Well, I wanted to talk--


00:18:51.320 --> 00:18:53.000
- Our friend Bob is on the screen, so.


00:18:53.000 --> 00:18:56.340
- Yeah, so I wanted to talk about Bob Bilderboss


00:18:56.340 --> 00:19:00.740
and actually his GitHub profile.


00:19:00.740 --> 00:19:04.440
Several people have done things like this.


00:19:04.440 --> 00:19:08.540
So we're looking at Bob's GitHub profile.


00:19:08.540 --> 00:19:10.280
And one of the things you see


00:19:10.280 --> 00:19:13.680
that's different than the default is you see,


00:19:13.680 --> 00:19:15.860
you see some stuff at the top,


00:19:15.860 --> 00:19:18.320
like the latest PyBytes articles


00:19:18.320 --> 00:19:23.080
and latest Python tips and even latest fostered on toots.


00:19:23.080 --> 00:19:26.960
So that's kind of neat, but how did he do this?


00:19:26.960 --> 00:19:30.000
Well, luckily he's got a link at the bottom that says


00:19:30.000 --> 00:19:33.160
how to create a self-updating GitHub readme.


00:19:33.160 --> 00:19:36.800
And we did talk about this way back in 2020,


00:19:36.800 --> 00:19:39.800
Simon Willison had a blog post about that.


00:19:39.800 --> 00:19:43.360
And so we'll link to the episode and Simon's also.


00:19:43.360 --> 00:19:46.880
And Bob actually says he was inspired by both Simon


00:19:46.880 --> 00:19:50.840
And I think Brett Cannon as well has a updated readme.


00:19:50.840 --> 00:19:52.400
But I really like this article.


00:19:52.400 --> 00:19:55.640
So it's just a little short thing saying,


00:19:55.640 --> 00:19:58.960
hey, I started doing updating my profile,


00:19:58.960 --> 00:20:02.480
GitHub profile with some tools.


00:20:02.480 --> 00:20:04.120
And then he just published all the tools.


00:20:04.120 --> 00:20:06.120
So that's pretty awesome.


00:20:06.120 --> 00:20:07.680
First of all, he's got a script.


00:20:07.680 --> 00:20:09.280
So the script that runs,


00:20:09.280 --> 00:20:12.240
of course he has it up on GitHub as well.


00:20:12.240 --> 00:20:14.520
And it just goes through and collects


00:20:14.520 --> 00:20:16.280
all of this data for him.


00:20:16.280 --> 00:20:19.700
And the script's pretty easy to read, you know,


00:20:19.700 --> 00:20:23.100
not terrible, go through and it has links


00:20:23.100 --> 00:20:25.660
to where he's getting the information.


00:20:25.660 --> 00:20:29.760
And then all of it is used to fill out,


00:20:29.760 --> 00:20:31.460
all that data is used to fill out a template,


00:20:31.460 --> 00:20:34.120
which he also published the template.


00:20:34.120 --> 00:20:39.120
It's a markdown file that, yeah, he uses for that.


00:20:39.120 --> 00:20:42.860
And then all of it's pulled together with a GitHub action.


00:20:42.860 --> 00:20:44.540
- Wait, we go back for just a second there.


00:20:44.540 --> 00:20:46.540
It looks like it's a markdown file


00:20:46.540 --> 00:20:49.260
that has Jinja template language in it.


00:20:49.260 --> 00:20:54.260
So hit it with Jinja and it generates the final markdown.


00:20:54.260 --> 00:20:56.700
I think that's pretty cool.


00:20:56.700 --> 00:20:59.140
- Yeah, how's it look?


00:20:59.140 --> 00:21:02.460
I didn't look exactly where the template's being used


00:21:02.460 --> 00:21:03.380
in the code, but--


00:21:03.380 --> 00:21:04.860
- Yeah, I don't see it either, but it's, you know,


00:21:04.860 --> 00:21:08.640
you can put, you don't have to have well-formed HTML


00:21:08.640 --> 00:21:09.580
for Jinja to run.


00:21:09.580 --> 00:21:12.820
You can just jam it against anything.


00:21:12.820 --> 00:21:16.240
For example, the RSS feed for Python bytes


00:21:16.240 --> 00:21:20.960
is generated using just like an XML template


00:21:20.960 --> 00:21:23.580
with markup language in it like this.


00:21:23.580 --> 00:21:25.440
- Yeah, it does look like he's using


00:21:25.440 --> 00:21:30.200
Jinja template itself out of the Jinja2 project


00:21:30.200 --> 00:21:31.400
to render it, so.


00:21:31.400 --> 00:21:32.460
- Yeah, cool. - Nice.


00:21:32.460 --> 00:21:36.480
And then the whole thing is run by GitHub Action


00:21:36.480 --> 00:21:40.800
and it auto commits.


00:21:40.800 --> 00:21:44.580
So using another project that GitHub auto-commit,


00:21:44.580 --> 00:21:49.060
but the whole thing's pulled together and runs whenever.


00:21:49.060 --> 00:21:51.540
So once a day, and when does it run?


00:21:51.540 --> 00:21:53.040
Well, it's a cron job.


00:21:53.040 --> 00:21:55.180
So I had to use my handy decoder


00:21:55.180 --> 00:21:59.320
'cause I can never remember that stuff, crontab.guru.


00:21:59.320 --> 00:22:01.240
It's 8.45 in the morning.


00:22:01.240 --> 00:22:03.960
It goes off and runs this.


00:22:03.960 --> 00:22:07.220
So kind of neat.


00:22:07.220 --> 00:22:08.180
I wanted to try this.


00:22:08.180 --> 00:22:12.380
So I highlighted it again because it's been on my to-do list since 2020.


00:22:12.380 --> 00:22:14.580
I haven't done it yet.


00:22:14.580 --> 00:22:19.420
One of the things that I'm hoping it will do is it'll highlight that I haven't posted


00:22:19.420 --> 00:22:24.340
any articles recently and it'll get me off my rump and write some more.


00:22:24.340 --> 00:22:26.580
- Yeah, yeah, yeah.


00:22:26.580 --> 00:22:30.180
You'll have to take on the philosophy that I did as well.


00:22:30.180 --> 00:22:31.180
Like, you know what?


00:22:31.180 --> 00:22:33.740
Two paragraphs, that's a perfectly fine blog post.


00:22:33.740 --> 00:22:34.740
- Yeah, definitely.


00:22:34.740 --> 00:22:38.860
- I learned something and also the today I learned


00:22:38.860 --> 00:22:40.240
sort of thing as well.


00:22:40.240 --> 00:22:41.080
So I like that.


00:22:41.080 --> 00:22:42.540
- Yeah, that was very popular.


00:22:42.540 --> 00:22:46.800
Well, that's quite a nice one.


00:22:46.800 --> 00:22:51.500
- That's all of our normal items now.


00:22:51.500 --> 00:22:52.340
- It is.


00:22:52.340 --> 00:22:53.160
- Yeah.


00:22:53.160 --> 00:22:55.820
- It is, you got any, well, let me go to my extras first


00:22:55.820 --> 00:22:57.520
since I got a follow up for this one.


00:22:57.520 --> 00:22:58.360
- Okay.


00:22:58.360 --> 00:22:59.860
- I got a few extras, I know that we both do.


00:22:59.860 --> 00:23:03.120
So you talked about crontab.guru, right?


00:23:03.120 --> 00:23:04.760
People haven't seen this before.


00:23:04.760 --> 00:23:06.640
I just learned about this,


00:23:06.640 --> 00:23:11.640
that there's this funky syntax for cron jobs,


00:23:11.640 --> 00:23:13.640
but there's this site crontab.guru


00:23:13.640 --> 00:23:16.720
that lets you put in like, well, I want a five there.


00:23:16.720 --> 00:23:20.280
It says every minute past hour five,


00:23:20.280 --> 00:23:25.200
if you just say star five, star, star, star, for example,


00:23:25.200 --> 00:23:29.380
or if you put, what's it, like store over 20,


00:23:30.240 --> 00:23:32.960
every 20 minutes, you know, past every minute


00:23:32.960 --> 00:23:37.960
past the 20th hour or like, there's weird syntax here,


00:23:37.960 --> 00:23:41.600
but there's this cool little site


00:23:41.600 --> 00:23:42.960
that you referenced to show.


00:23:42.960 --> 00:23:44.600
- Oh, wow, yeah.


00:23:44.600 --> 00:23:46.320
Yeah, I was curious if you could do like


00:23:46.320 --> 00:23:48.320
just day of the week and not,


00:23:48.320 --> 00:23:50.300
and like no Sunday, Saturday and Sunday,


00:23:50.300 --> 00:23:51.600
how you would do that, but.


00:23:51.600 --> 00:23:55.080
- Yeah, probably.


00:23:55.080 --> 00:23:58.640
Yeah, there's 20 star now.


00:23:58.640 --> 00:24:01.700
Anyway, there's a whole bunch of different things


00:24:01.700 --> 00:24:04.160
and a little bit of a description on how this works.


00:24:04.160 --> 00:24:06.120
But way more interesting than I knew.


00:24:06.120 --> 00:24:09.840
All right, so let me tell you about a few things real quick.


00:24:09.840 --> 00:24:11.960
I've been playing with Canary Mail.


00:24:11.960 --> 00:24:13.880
Canary Mail is like a mail client,


00:24:13.880 --> 00:24:18.880
like Spike or Outlook or whatever.


00:24:18.880 --> 00:24:20.640
One of the, like Thunderbird,


00:24:20.640 --> 00:24:24.000
one of the client side rich email clients.


00:24:24.000 --> 00:24:29.000
This thing just added an AI capability


00:24:29.000 --> 00:24:32.120
called Inbox Copilot, which is a lot like GitHub Copilot.


00:24:32.120 --> 00:24:38.680
And so you just go to it and you just say,


00:24:38.680 --> 00:24:43.680
"Hey there, email, write me a message that says this."


00:24:43.680 --> 00:24:47.000
So for example, you could just say,


00:24:47.000 --> 00:24:48.560
like if you got a message asking


00:24:48.560 --> 00:24:50.160
if you're gonna be able to make the,


00:24:50.160 --> 00:24:55.160
So meaning you could just say, you type CCC anywhere


00:24:55.160 --> 00:24:57.840
and your message it pulls up this little separate window


00:24:57.840 --> 00:25:00.040
that you talk to the AI and you just say,


00:25:00.040 --> 00:25:05.040
tell them, apologize, I'll be late by 20 or 30 minutes


00:25:05.040 --> 00:25:06.840
traffic and that's all you say.


00:25:06.840 --> 00:25:09.040
And it writes like a really nice formal,


00:25:09.040 --> 00:25:15.180
like well-written, friendly, not terse message back.


00:25:15.180 --> 00:25:16.400
So I'm gonna try to start playing with this


00:25:16.400 --> 00:25:19.160
a little bit more, we'll see how it goes.


00:25:19.160 --> 00:25:22.760
I already had the app, it just came with this co-pilot.


00:25:22.760 --> 00:25:24.040
I'm like, okay, that's pretty interesting.


00:25:24.040 --> 00:25:25.600
So people can check that out.


00:25:25.600 --> 00:25:27.560
I don't even know what it costs, just to be clear,


00:25:27.560 --> 00:25:32.560
not an ad, this episode is sponsored by Microsoft,


00:25:32.560 --> 00:25:35.160
but yeah, it's like $20 a year,


00:25:35.160 --> 00:25:39.040
you know, not a terribly expensive thing to play with.


00:25:39.040 --> 00:25:40.960
All right, next one is,


00:25:40.960 --> 00:25:45.960
this is a tweet from the Python package index itself.


00:25:45.960 --> 00:25:48.640
And the status is, Python, or the message is,


00:25:48.640 --> 00:25:50.360
Python 3.11 delivers.


00:25:50.360 --> 00:25:51.200
Check this out, Brian.


00:25:51.200 --> 00:25:54.820
So they show some kind of analytics,


00:25:54.820 --> 00:26:01.220
real-time performance graph of the G-unicorn


00:26:01.220 --> 00:26:05.820
to Python worker processes that power PyPI


00:26:05.820 --> 00:26:09.720
from Python 3.10 and when they upgraded to 3.11.


00:26:09.720 --> 00:26:11.040
It's pretty striking, huh?


00:26:11.040 --> 00:26:12.200
- Yeah, totally.


00:26:12.200 --> 00:26:15.800
That just went down in load drastically.


00:26:15.800 --> 00:26:18.980
- You look at, I mean, it dropped at least 50%


00:26:18.980 --> 00:26:20.280
of usage there.


00:26:20.280 --> 00:26:22.940
And then if you, this is a pretty zoomed in picture,


00:26:22.940 --> 00:26:26.240
someone else, Dustin Ingram, it was, tweeted,


00:26:26.240 --> 00:26:28.000
well, you should see it over time more.


00:26:28.000 --> 00:26:32.380
Look at, bam, there's this huge jump in the middle.


00:26:32.380 --> 00:26:35.240
This is when they restarted it.


00:26:35.240 --> 00:26:36.380
Whenever you restart the app,


00:26:36.380 --> 00:26:38.760
it doesn't have all of its caches


00:26:38.760 --> 00:26:40.120
and all that stuff warmed up.


00:26:40.120 --> 00:26:42.120
And potentially they even maybe had to throw away


00:26:42.120 --> 00:26:44.280
like Redis cache data if they were pickling it


00:26:44.280 --> 00:26:46.800
because 3.10 and 3.11 didn't,


00:26:46.800 --> 00:26:50.840
you know, they might not be compatible in a binary way.


00:26:50.840 --> 00:26:52.400
So anyway, there's like this kind of like,


00:26:52.400 --> 00:26:56.160
ouch, you restarted us, it hurts type of thing.


00:26:56.160 --> 00:26:58.480
But then after that, it really, really drops.


00:26:58.480 --> 00:27:03.480
I mean, at least 50% or 2X more for 3.10 than 3.11.


00:27:03.480 --> 00:27:07.920
So that's really massive.


00:27:07.920 --> 00:27:10.160
- That's pretty cool.


00:27:10.160 --> 00:27:12.520
- Anyway, so 3.11 delivers, people can check that out.


00:27:12.520 --> 00:27:16.920
And this is, I mean, there's a lot of traffic on pypi.org,


00:27:16.920 --> 00:27:19.760
right, 'cause it's not just the human browser traffic.


00:27:19.760 --> 00:27:22.320
It's every time you pip install something,


00:27:22.320 --> 00:27:24.100
every time you do a Docker build


00:27:24.100 --> 00:27:25.480
and it runs pip install some,


00:27:25.480 --> 00:27:27.680
like all the robots of the world


00:27:27.680 --> 00:27:30.560
are just hammering this thing, you know?


00:27:30.560 --> 00:27:32.480
- Yeah, yep.


00:27:32.480 --> 00:27:34.720
- Yep, all right, so that's a good one.


00:27:34.720 --> 00:27:40.280
I was just in Las Vegas this weekend, that was fun.


00:27:40.280 --> 00:27:41.600
- Thanks for rubbing it in.


00:27:41.600 --> 00:27:42.800
(laughing)


00:27:42.800 --> 00:27:43.640
- Such a great time.


00:27:43.640 --> 00:27:45.560
Went to see the Blue Man Group


00:27:45.560 --> 00:27:46.920
and we went to see Cirque du Soleil.


00:27:46.920 --> 00:27:51.280
We had breakfast at like a beautiful brunch.


00:27:51.280 --> 00:27:53.600
They even had a, you know how some places


00:27:53.600 --> 00:27:55.840
have like a little omelet factory


00:27:55.840 --> 00:27:58.720
where you can have some eggs or whatever.


00:27:58.720 --> 00:28:01.200
And you tell them, they had a donut, one of those as well.


00:28:01.200 --> 00:28:03.120
So they'll make custom donuts for you on the spot.


00:28:03.120 --> 00:28:03.960
It was outrageous.


00:28:03.960 --> 00:28:04.800
Why do I bring this up?


00:28:04.800 --> 00:28:07.800
Not to rub in whether or not I was in Vegas,


00:28:07.800 --> 00:28:10.820
but it was my first chance to test out my iPad


00:28:10.820 --> 00:28:14.820
as my only dev device traveling experience.


00:28:14.820 --> 00:28:18.140
My first trip since I'd tried all those tools.


00:28:18.140 --> 00:28:20.100
And it worked pretty fabulously actually.


00:28:20.100 --> 00:28:22.260
Just took my iPad and my ergonomic keyboard


00:28:22.260 --> 00:28:25.980
so I don't give myself carpal tunnel again.


00:28:25.980 --> 00:28:28.100
And it worked great.


00:28:28.100 --> 00:28:30.860
So all those tools we talked about,


00:28:30.860 --> 00:28:32.260
people maybe all find a way,


00:28:32.260 --> 00:28:33.100
if people wanna know,


00:28:33.100 --> 00:28:34.620
find a way to link back to that episode.


00:28:34.620 --> 00:28:38.140
- Able to monitor the Michael Kennedy empire from remote.


00:28:38.140 --> 00:28:38.980
- Indeed, yeah.


00:28:38.980 --> 00:28:42.460
even I busted in and installed some Linux security updates


00:28:42.460 --> 00:28:44.840
real quick and then drop back out. It was all good. tailed


00:28:44.840 --> 00:28:47.760
some logs. Yeah, it was fine. Most I wrote email. That's,


00:28:47.760 --> 00:28:51.360
that's what my empire is about is right email. All right.


00:28:51.360 --> 00:28:55.880
Here's another good one. Linux, Amazon, meta, and Microsoft want


00:28:55.880 --> 00:29:01.960
to break the Google Maps monopoly. So apparently, Google


00:29:01.960 --> 00:29:06.840
Maps owns a significant portion of the mapping data and the


00:29:06.840 --> 00:29:08.560
street view data and so on.


00:29:08.560 --> 00:29:12.000
But all those groups I mentioned are working on


00:29:12.000 --> 00:29:14.320
creating this thing called Overture Maps Foundation.


00:29:14.320 --> 00:29:17.620
And they're gonna create an open source,


00:29:17.620 --> 00:29:21.360
open to everyone set of maps by pulling in some of


00:29:21.360 --> 00:29:24.200
existing open map data, but also really doubling down


00:29:24.200 --> 00:29:27.240
on trying to add more information.


00:29:27.240 --> 00:29:28.080
That's pretty cool, right?


00:29:28.080 --> 00:29:29.400
So if you wanna do anything with mapping,


00:29:29.400 --> 00:29:31.060
that might be getting a lot better.


00:29:31.060 --> 00:29:34.400
- Yeah, I haven't seen the word TomTom in a long time.


00:29:35.440 --> 00:29:36.200
I know.


00:29:36.200 --> 00:29:38.600
I actually had my hands on a TomTom device this summer.


00:29:38.600 --> 00:29:40.240
It was insane.


00:29:40.240 --> 00:29:43.680
All right, last one before we get to our joke.


00:29:43.680 --> 00:29:47.960
I decided my laptop that had zero stickers on it was boring.


00:29:47.960 --> 00:29:50.800
So I went completely bonkers.


00:29:50.800 --> 00:29:53.440
Got a completely--


00:29:53.440 --> 00:29:57.200
I went to Redbubble, ordered an insane number of stickers


00:29:57.200 --> 00:29:58.280
and put it on my laptop.


00:29:58.280 --> 00:29:59.940
What do you think of this thing, Brian?


00:29:59.940 --> 00:30:01.900
Put the link and the picture in the show notes.


00:30:01.900 --> 00:30:05.260
- I like the laptop opening and closing tags.


00:30:05.260 --> 00:30:09.520
- Yeah, it's got a bracket laptop at the top of the laptop


00:30:09.520 --> 00:30:12.180
and it's got a bracket slash laptop at the bottom.


00:30:12.180 --> 00:30:14.620
- Yeah, you got Python bytes there, it's nice.


00:30:14.620 --> 00:30:17.100
I gotta get you a testing code sticker.


00:30:17.100 --> 00:30:18.380
- Get in there, we'll find a spot.


00:30:18.380 --> 00:30:21.300
I replaced the Mac icon with a terminal icon.


00:30:21.300 --> 00:30:22.620
So it was pretty good.


00:30:22.620 --> 00:30:23.440
- Yeah.


00:30:23.440 --> 00:30:25.140
- Anyway, that was a lot of fun.


00:30:25.140 --> 00:30:26.980
Okay, but that's it for my extras.


00:30:26.980 --> 00:30:27.800
How about yours?


00:30:27.800 --> 00:30:28.900
- I had a few extras.


00:30:28.900 --> 00:30:31.820
So I just don't have a lot to add to these,


00:30:31.820 --> 00:30:34.700
but I'd noticed this is kind of interesting.


00:30:34.700 --> 00:30:38.700
So GitHub, I think this was on December 15th,


00:30:38.700 --> 00:30:43.140
announced that they're able to check for security leaks.


00:30:43.140 --> 00:30:48.140
And I'm linking to an article that they can check


00:30:48.140 --> 00:30:50.700
your GitHub repos for security leaks,


00:30:50.700 --> 00:30:52.600
like secrets and stuff.


00:30:52.600 --> 00:30:55.620
Apparently that's how a lot of secrets get leaked


00:30:55.620 --> 00:30:58.140
is people like actually merge request


00:30:58.140 --> 00:31:00.020
a bunch of secrets or something.


00:31:01.780 --> 00:31:04.900
But the, so it's kind of cool that it's there.


00:31:04.900 --> 00:31:07.220
I went, there's some, it says you have to turn it on.


00:31:07.220 --> 00:31:08.660
I went to check one of my repos


00:31:08.660 --> 00:31:10.260
and it looked like it was already on.


00:31:10.260 --> 00:31:13.300
So may as well check it anyway.


00:31:13.300 --> 00:31:17.740
So I wanted to shout out to Julia Evans,


00:31:17.740 --> 00:31:18.580
did I get that right?


00:31:18.580 --> 00:31:21.180
Julia Evans, she's written a whole bunch of great stuff


00:31:21.180 --> 00:31:22.020
to help programmers,


00:31:22.020 --> 00:31:25.120
but she just released Pocket Guide to Debugging.


00:31:25.120 --> 00:31:27.380
And I was pretty intrigued by this.


00:31:27.380 --> 00:31:31.760
One of the things that highlighted was asking for help.


00:31:31.760 --> 00:31:35.480
and writing a tiny program that reproduces the problem.


00:31:35.480 --> 00:31:38.220
Those are two things that I really encourage people to do


00:31:38.220 --> 00:31:39.560
before they waste too much time.


00:31:39.560 --> 00:31:41.440
So I might throw some money away


00:31:41.440 --> 00:31:44.820
because those are really great free tips.


00:31:44.820 --> 00:31:46.380
- Yeah, that's cool.


00:31:46.380 --> 00:31:50.000
- There's a, I found this, what?


00:31:50.000 --> 00:31:52.860
Python Easter eggs repository.


00:31:52.860 --> 00:31:54.360
Not all of these work anymore.


00:31:54.360 --> 00:31:55.520
So I tried the first one,


00:31:55.520 --> 00:31:58.280
the import hello on Python 3.11 doesn't seem to work,


00:31:58.280 --> 00:32:01.320
but a bunch of these others are really pretty fun.


00:32:01.320 --> 00:32:03.240
Import this of course is there.


00:32:03.240 --> 00:32:06.480
One of the things that I think I knew about at one point


00:32:06.480 --> 00:32:11.480
but I forgot about was the from future import


00:32:11.480 --> 00:32:13.780
Barry as Fluffle.


00:32:13.780 --> 00:32:19.920
So this was a joke from 2009 that's still in Python 3.11


00:32:19.920 --> 00:32:23.760
that it's Barry Warsaw,


00:32:23.760 --> 00:32:27.120
it's like a joke from Barry Warsaw and Brett Cannon.


00:32:28.160 --> 00:32:31.040
And if you do that, it completely,


00:32:31.040 --> 00:32:34.040
it removes the not equal, like the pound,


00:32:34.040 --> 00:32:39.040
like the bang equal sign with less than, greater than


00:32:39.040 --> 00:32:41.480
for not equal.


00:32:41.480 --> 00:32:45.480
So the joke being if Barry was the dictator for life,


00:32:45.480 --> 00:32:46.360
he would change it.


00:32:46.360 --> 00:32:48.120
So anyway, it's kind of funny.


00:32:48.120 --> 00:32:52.000
- FLFL stands for Friendly Language Uncle for Life.


00:32:52.000 --> 00:32:54.080
- And there's even a PEP for it.


00:32:54.080 --> 00:32:59.080
So you can read about the BPEP 401 with this.


00:32:59.080 --> 00:33:00.480
Anyway.


00:33:00.480 --> 00:33:01.320
- Nice.


00:33:01.320 --> 00:33:02.620
- Just a few extras. - Yeah, those are fun.


00:33:02.620 --> 00:33:05.040
So it could have been our joke.


00:33:05.040 --> 00:33:06.920
It could have been our joke section.


00:33:06.920 --> 00:33:08.280
- It could have been our joke section,


00:33:08.280 --> 00:33:09.640
but we have another joke, don't we?


00:33:09.640 --> 00:33:10.740
- We do.


00:33:10.740 --> 00:33:12.700
So I told you we'd wrap this up


00:33:12.700 --> 00:33:13.960
with some stuff about the cloud.


00:33:13.960 --> 00:33:16.400
So here's a nice little conversation


00:33:16.400 --> 00:33:18.440
a father and a daughter are having.


00:33:18.440 --> 00:33:19.640
They're out walking in a park,


00:33:19.640 --> 00:33:21.800
looking up at the sky and they see a cloud,


00:33:23.120 --> 00:33:26.320
mostly empty sky, and the kid says,


00:33:26.320 --> 00:33:29.600
"Dad, what are clouds made of?"


00:33:29.600 --> 00:33:31.860
The dad looks down and clearly says,


00:33:31.860 --> 00:33:33.440
"Linux servers, mostly."


00:33:33.440 --> 00:33:36.100
(both laughing)


00:33:36.100 --> 00:33:39.800
That's good, right?


00:33:39.800 --> 00:33:41.640
- Yeah, it's good.


00:33:41.640 --> 00:33:43.000
- Even when they're serverless,


00:33:43.000 --> 00:33:45.560
they're probably still Linux things running


00:33:45.560 --> 00:33:47.320
and Docker running and a Kubernetes cluster


00:33:47.320 --> 00:33:49.060
running on Linux.


00:33:49.060 --> 00:33:52.000
- Serverless is a hilarious word.


00:33:52.000 --> 00:33:54.820
It just means you don't know where the server is.


00:33:54.820 --> 00:33:56.920
- Yeah, it's like server's not my problem.


00:33:56.920 --> 00:33:57.760
- Yeah.


00:33:57.760 --> 00:34:00.000
(laughing)


00:34:00.000 --> 00:34:03.600
- Well, this show is not a problem.


00:34:03.600 --> 00:34:04.680
It was a lot of fun.


00:34:04.680 --> 00:34:05.560
- It was a lot of fun.


00:34:05.560 --> 00:34:09.560
Thanks so much for joining us and showing up again.


00:34:09.560 --> 00:34:11.840
And thanks everybody in the audience.


00:34:11.840 --> 00:34:12.660
- Yeah, absolutely.


00:34:12.660 --> 00:34:14.320
Hey, before we go, I have one quick more announcement


00:34:14.320 --> 00:34:15.740
really, really quickly.


00:34:15.740 --> 00:34:19.100
Next week, for those of you who are kind enough


00:34:19.100 --> 00:34:21.000
to drop in and join us live,


00:34:21.000 --> 00:34:22.160
We're not doing a live show.


00:34:22.160 --> 00:34:24.600
We're gonna do a crossover episode


00:34:24.600 --> 00:34:26.760
with Talk Python and vice versa.


00:34:26.760 --> 00:34:28.500
Python bites on Talk Python.


00:34:28.500 --> 00:34:30.920
And Brian, we're gonna be on vacation.


00:34:30.920 --> 00:34:32.760
So I'll see you in January.


00:34:32.760 --> 00:34:35.160
- All right, talk to everybody in January.


00:34:35.160 --> 00:34:36.800
- Yeah, so happy new year, everyone.


00:34:36.800 --> 00:34:37.680
See you later.


00:34:37.680 --> 00:34:38.520
- Bye.


00:34:38.520 --> 00:34:39.020
Bye.


00:34:39.020 --> 00:34:49.020
[BLANK_AUDIO]

