WEBVTT

00:00:02.080 --> 00:00:03.040
Hey, everybody. Hey, Michael.

00:00:03.660 --> 00:00:03.980
Hey, hey.

00:00:05.370 --> 00:00:06.100
Should we kick this off?

00:00:07.140 --> 00:00:07.500
Let's do it.

00:00:08.860 --> 00:00:10.380
Hello, and welcome to Python Bytes,

00:00:10.540 --> 00:00:13.240
where we deliver Python news and headlines directly to your earbuds.

00:00:13.780 --> 00:00:17.920
This is episode 425, recorded March 24th, 2025.

00:00:18.980 --> 00:00:19.800
I am Brian Okken.

00:00:20.460 --> 00:00:21.180
And I'm Michael Kennedy.

00:00:22.660 --> 00:00:23.100
And

00:00:23.100 --> 00:00:23.540
we

00:00:23.540 --> 00:00:26.860
are excited to announce that this episode is brought to you by Posit Connect.

00:00:27.800 --> 00:00:29.580
Listen to their segment later in the show.

00:00:30.160 --> 00:00:31.540
You can also connect with us.

00:00:32.599 --> 00:00:33.039
And

00:00:33.039 --> 00:00:33.480
if

00:00:33.480 --> 00:00:37.460
you go to our show notes and visit all the links,

00:00:37.700 --> 00:00:39.720
we're on Bluesky and Mastodon mostly lately.

00:00:40.559 --> 00:00:44.640
And if you'd like to actually thank you for listening,

00:00:44.880 --> 00:00:46.540
but also if you'd like to watch us live,

00:00:47.150 --> 00:00:50.200
you can check us out at pythonbytes.fm/live.

00:00:50.820 --> 00:00:54.540
Usually Mondays at 10 a.m., but it's spring break this week,

00:00:54.590 --> 00:00:55.680
so we're doing it a little early.

00:00:56.760 --> 00:00:57.680
And then finally,

00:00:57.920 --> 00:01:02.120
if you'd like to have all the links that we talked about delivered, plus extra information

00:01:02.360 --> 00:01:06.500
delivered right to your inbox, go to pythonbytes.fm

00:01:06.500 --> 00:01:07.480
and

00:01:07.480 --> 00:01:09.940
sign up for the newsletter. We don't spam

00:01:09.980 --> 00:01:11.420
you. We just send you the newsletter.

00:01:13.620 --> 00:01:14.100
Anyway,

00:01:14.280 --> 00:01:16.820
what do you got for us today, Michael?

00:01:17.360 --> 00:01:25.620
I want to kick off with a Twitter thread of all things. And this one's pretty interesting.

00:01:26.100 --> 00:01:29.780
So Armin Roeneker, original creator of Flask,

00:01:30.020 --> 00:01:31.420
put

00:01:31.420 --> 00:01:32.500
out a question,

00:01:33.080 --> 00:01:34.660
and it got

00:01:34.660 --> 00:01:35.580
a

00:01:35.580 --> 00:01:39.600
lot more attention than I would imagine it justified.

00:01:40.480 --> 00:01:45.260
And I found it so simple, and I just found it pretty interesting.

00:01:45.740 --> 00:01:46.120
Okay.

00:01:46.980 --> 00:01:48.040
The question is,

00:01:48.180 --> 00:01:50.280
if

00:01:50.280 --> 00:01:54.580
you use Python, but you don't use uv, why?

00:01:55.700 --> 00:01:56.740
we don't use it yet why

00:01:57.520 --> 00:01:59.260
right so I got like 215

00:01:59.820 --> 00:02:01.640
responses almost a thousand likes

00:02:01.740 --> 00:02:02.260
things like that

00:02:03.860 --> 00:02:05.640
so I want to just call out

00:02:06.380 --> 00:02:06.940
some of

00:02:08.019 --> 00:02:09.539
I'm not going to go read all

00:02:09.679 --> 00:02:11.720
215 top level

00:02:12.420 --> 00:02:13.620
pieces but I'm going to call out some of the ones

00:02:13.740 --> 00:02:14.620
that I thought were interesting

00:02:15.579 --> 00:02:17.580
and just get your thoughts Brian

00:02:17.800 --> 00:02:18.180
as well

00:02:19.360 --> 00:02:19.980
so for example

00:02:21.820 --> 00:02:23.879
someone said I'm not going to also give attributes

00:02:23.900 --> 00:02:25.080
because there's a bunch. It'll take forever.

00:02:25.840 --> 00:02:30.240
So someone said, I get it replaces pip in pyenv,

00:02:30.740 --> 00:02:36.300
but should I use it instead of the built-in Python-m venv, venv, right?

00:02:37.360 --> 00:02:37.600
Yes.

00:02:38.100 --> 00:02:39.440
Yes. Yes, you should.

00:02:41.220 --> 00:02:43.600
Yes, yes, you should also do that.

00:02:46.080 --> 00:02:48.740
The reason I'm calling this out, the reason I'm making this a topic

00:02:48.820 --> 00:02:49.940
is there were a lot of,

00:02:50.080 --> 00:02:52.180
I

00:02:52.180 --> 00:02:53.860
think, a lot of misconceptions

00:02:54.280 --> 00:02:55.800
or a lot of people are like, what's UV?

00:02:56.460 --> 00:02:56.780
So I think

00:02:56.780 --> 00:02:58.140
those

00:02:58.140 --> 00:02:58.880
are worth touching on.

00:02:59.700 --> 00:03:05.040
So one of the awesome things about using uv, V, E, and V,

00:03:05.190 --> 00:03:07.420
instead of Python, V, E, and V,

00:03:09.080 --> 00:03:11.220
is, well, what if you don't have Python?

00:03:12.400 --> 00:03:15.520
Python, V, and V will just say, error, no Python, right?

00:03:16.819 --> 00:03:20.280
UV says, oh, well, why don't we just get you the latest version of Python?

00:03:20.500 --> 00:03:26.680
Or you can say 3.12 or 3.11 or whatever version you want or a specific minor version, right?

00:03:27.820 --> 00:03:29.300
Or build version, right?

00:03:29.600 --> 00:03:33.940
3.13.1 instead of 3.13.2, whatever, right?

00:03:34.060 --> 00:03:39.200
So it frees you from even having to worry about having Python set up.

00:03:39.200 --> 00:03:41.620
I got two new computers, Brian, two new computers.

00:03:41.670 --> 00:03:43.680
I got a new laptop and a new Mac mini.

00:03:44.540 --> 00:03:46.940
And I have not installed Python on it.

00:03:47.000 --> 00:03:49.800
And I actually was a little bit bugged when

00:03:49.800 --> 00:03:50.880
something

00:03:50.880 --> 00:03:54.020
I had to brew install installed Python.

00:03:54.070 --> 00:03:54.900
I'm like, darn it.

00:03:55.740 --> 00:03:57.500
You're messing up my flow, right?

00:03:57.560 --> 00:04:00.520
I don't want any Python in here other than virtual environments.

00:04:00.810 --> 00:04:03.120
And I want those to be managed by uv.

00:04:03.660 --> 00:04:05.440
And the thing is, it's two seconds.

00:04:06.799 --> 00:04:13.900
With PyE and V, what it does is it downloads and it builds locally, which if you don't have it, it can take 10 minutes or more.

00:04:14.940 --> 00:04:16.079
With uv, it takes two seconds.

00:04:16.680 --> 00:04:17.940
It's a thing of beauty.

00:04:18.260 --> 00:04:18.540
Well,

00:04:18.540 --> 00:04:22.600
I just ran into the build, a problem with the build recently

00:04:22.940 --> 00:04:23.080
because

00:04:23.080 --> 00:04:26.700
there's issues,

00:04:26.840 --> 00:04:27.760
especially in Windows,

00:04:28.240 --> 00:04:28.440
when

00:04:28.440 --> 00:04:29.260
if

00:04:29.260 --> 00:04:31.720
you've got your dependencies mucked up somehow,

00:04:32.500 --> 00:04:35.080
it can cause you to have to recompile some stuff

00:04:37.100 --> 00:04:39.080
or try to recompile some stuff.

00:04:39.920 --> 00:04:42.840
And then you have to make sure you have the right compiler libraries

00:04:43.160 --> 00:04:44.600
on your computer and stuff like that.

00:04:44.720 --> 00:04:45.340
So that's a mess.

00:04:46.260 --> 00:04:47.020
Yeah, yeah.

00:04:48.160 --> 00:04:51.500
Someone says, but I need Python installed to make Python programs.

00:04:52.800 --> 00:04:53.240
I don't know.

00:04:53.420 --> 00:04:55.460
Yes, but the previous comment.

00:04:55.980 --> 00:04:59.360
But, I mean, it is installing it, using uv to install.

00:04:59.820 --> 00:04:59.980
Like,

00:05:00.370 --> 00:05:02.740
it isn't installing it like you normally think,

00:05:03.000 --> 00:05:03.120
but

00:05:03.120 --> 00:05:04.320
behind

00:05:04.320 --> 00:05:06.600
the scenes, uv is putting it on your computer.

00:05:08.280 --> 00:05:09.340
This is an interesting one.

00:05:09.640 --> 00:05:10.960
I want to hear your thoughts on this.

00:05:11.320 --> 00:05:13.700
I'm anti this only because of my workflow,

00:05:13.920 --> 00:05:15.620
not against the person who made the comment.

00:05:16.180 --> 00:05:21.760
because I don't use it because it places the VE and V folder inside your project.

00:05:23.100 --> 00:05:27.120
And I can't run executables from there due to corporate policy, many such use cases.

00:05:27.970 --> 00:05:30.900
No idea why Astral doesn't address this with more urgency.

00:05:31.400 --> 00:05:33.700
Someone responded, that sounds like a bad corporate policy.

00:05:34.680 --> 00:05:36.940
Also, it does. You can configure it to do that.

00:05:37.560 --> 00:05:41.260
Yeah, exactly. There's an environment variable you can set to have it put it in somewhere else.

00:05:42.240 --> 00:06:00.280
Now, one of the things that made me never, ever adopt Conda is if you would go and create a Conda environment for a data science project, it puts it into some hidden folder, centralized hidden folder inside of your profile instead of inside your project.

00:06:00.400 --> 00:06:06.760
So I would go to a project and I'm like, did I, you know, a couple of months later and be like, did I ever make a virtual environment for this?

00:06:07.120 --> 00:06:07.260
Maybe.

00:06:08.220 --> 00:06:11.520
But then you got to say Conda activate and name the virtual environment.

00:06:11.680 --> 00:06:13.120
I'm like, but what did I call it?

00:06:13.390 --> 00:06:13.880
You know what I mean?

00:06:13.960 --> 00:06:15.500
They're like, oh, drives me crazy.

00:06:15.740 --> 00:06:17.580
And with it being inside the project folder,

00:06:17.670 --> 00:06:19.660
you can look, go, yep, there's a virtual environment there.

00:06:20.060 --> 00:06:20.620
I'm good to go.

00:06:20.880 --> 00:06:24.200
Same reason that I don't like calling mine.vnv.

00:06:24.390 --> 00:06:25.620
I just leave it without the dot

00:06:26.440 --> 00:06:28.760
because I can quickly see in the finder

00:06:30.440 --> 00:06:33.020
or a regular LS or whatever that, hey, look,

00:06:34.360 --> 00:06:35.400
it does have a virtual environment.

00:06:36.100 --> 00:06:39.660
All right, I'm too lazy to switch from Py, ENV, and pip.

00:06:40.520 --> 00:06:40.740
I mean,

00:06:40.900 --> 00:06:41.400
it

00:06:41.400 --> 00:06:42.420
seems like a you problem.

00:06:45.840 --> 00:06:48.400
There's lazy, like, I'm not going to walk two miles to the store.

00:06:49.130 --> 00:06:55.380
And then there's, I can't be bothered to put the word uv space pip instead of pip in my command.

00:06:56.780 --> 00:06:59.280
Well, and like, I'm lazy.

00:06:59.480 --> 00:06:59.920
That's why I

00:06:59.920 --> 00:07:00.520
am

00:07:00.520 --> 00:07:05.940
using uv because it speeds up everything and I can get on my day faster.

00:07:06.480 --> 00:07:06.680
Yeah.

00:07:07.060 --> 00:07:19.400
Matthew Rocklin of Dask and Coiled had a really interesting comment once on Talk Python that basically like so much in programming happens because we're leveraging the natural inclination for programmers to be lazy.

00:07:21.400 --> 00:07:24.340
I set it up so they can do this and they have to do less work and do it.

00:07:24.940 --> 00:07:25.120
All right.

00:07:26.080 --> 00:07:27.020
I'll keep going quicker now.

00:07:27.400 --> 00:07:27.980
Trust issues.

00:07:28.260 --> 00:07:29.660
What if they do a bait and switch, right?

00:07:29.780 --> 00:07:30.500
It's VC backed.

00:07:30.530 --> 00:07:31.940
What if they go, oh, all of a sudden?

00:07:33.860 --> 00:07:34.480
Two comments there.

00:07:34.680 --> 00:07:37.740
One, it's open source, and I'm sure a lot of people have forked it.

00:07:40.139 --> 00:07:42.520
Two, although there are still some potential issues,

00:07:42.740 --> 00:07:46.360
somebody's got to run the Python build standalone for some of the features.

00:07:46.560 --> 00:07:48.460
But there's that.

00:07:52.699 --> 00:07:53.180
And

00:07:53.180 --> 00:07:54.740
they've already said that they won't, right?

00:07:54.900 --> 00:07:57.460
Charlie Marsh said, like, our business model does not

00:07:57.460 --> 00:07:59.460
hinge

00:07:59.460 --> 00:08:00.840
upon charging for uv.

00:08:01.520 --> 00:08:03.340
It's kind of an open core model.

00:08:04.080 --> 00:08:04.360
But

00:08:04.360 --> 00:08:06.320
Google used to say, don't be evil.

00:08:08.719 --> 00:08:11.360
Yeah, but Brian, I totally hear you.

00:08:11.970 --> 00:08:14.300
But did you look, when they said it, like around their back,

00:08:14.610 --> 00:08:15.520
they had their fingers crossed.

00:08:16.700 --> 00:08:17.480
Look, I'm just telling you,

00:08:17.560 --> 00:08:18.360
you

00:08:18.360 --> 00:08:19.460
got to double check these things.

00:08:20.280 --> 00:08:20.780
No, I'm just kidding.

00:08:21.440 --> 00:08:21.960
I know they did.

00:08:22.060 --> 00:08:24.360
Actually, yeah, when VCs get involved,

00:08:25.800 --> 00:08:27.960
and it's all well and good when there's lots of money,

00:08:28.010 --> 00:08:30.100
things get tight, then it could potentially.

00:08:30.150 --> 00:08:32.000
Well, and also we'll switch to something else then.

00:08:33.200 --> 00:08:35.180
We'll switch to uv fairly quickly if

00:08:35.180 --> 00:08:36.400
it

00:08:36.400 --> 00:08:37.500
becomes bad.

00:08:37.960 --> 00:08:38.240
Yeah, we'll

00:08:38.240 --> 00:08:39.620
switch to VU or something.

00:08:40.099 --> 00:08:40.500
I

00:08:40.500 --> 00:08:43.039
have a reason, but when you run out of good

00:08:43.039 --> 00:08:43.320
reasons.

00:08:44.219 --> 00:08:45.600
All right, another one, masochism.

00:08:45.800 --> 00:08:48.160
I haven't switched yet because I'm masochistic.

00:08:49.300 --> 00:08:49.720
Another one.

00:08:50.040 --> 00:08:54.260
Many times I've tried similar tools and always come back to pip and pip-tools,

00:08:54.480 --> 00:08:55.360
a.k.a. pip compile.

00:08:56.760 --> 00:08:57.560
Those, they just work.

00:08:58.060 --> 00:08:59.080
I don't want something cool.

00:08:59.860 --> 00:09:03.780
I know, but adding the word uv in front of each of these commands,

00:09:03.830 --> 00:09:05.860
like uv pip compile, uv pip install,

00:09:07.020 --> 00:09:09.400
it's not a huge risk to roll that back.

00:09:10.260 --> 00:09:11.020
Delete three characters.

00:09:11.150 --> 00:09:11.820
And we've tried the

00:09:11.820 --> 00:09:13.860
other ones also, and they were not as fun.

00:09:15.400 --> 00:09:15.540
Exactly.

00:09:17.220 --> 00:09:21.180
I tried this week and was expecting uv install requests instead of uv add.

00:09:21.740 --> 00:09:22.560
And I brought this one up.

00:09:22.610 --> 00:09:23.940
I switched back to pip env.

00:09:24.170 --> 00:09:25.700
I thought that was interesting because

00:09:25.700 --> 00:09:27.520
there's

00:09:27.520 --> 00:09:29.380
sort of two workflows with uv.

00:09:30.000 --> 00:09:36.700
one says treat it like poetry or hatch and let it manage your project and that's the uv add style

00:09:36.850 --> 00:09:38.780
right it manages the lock file and so on

00:09:38.780 --> 00:09:40.760
they

00:09:40.760 --> 00:09:44.180
were expecting uv install requests if they typed uv pip

00:09:44.600 --> 00:09:49.020
install requests they would have been carrying on with the regular workflow and i do think it's worth

00:09:49.420 --> 00:09:56.760
shouting out that there's like two unrelated workflows for for projects and one is sort of

00:09:56.640 --> 00:10:00.060
the project manager poetry hatch style,

00:10:00.660 --> 00:10:03.860
and one is the more low-level pip style.

00:10:06.720 --> 00:10:06.880
Yeah.

00:10:08.080 --> 00:10:08.180
Yeah.

00:10:09.700 --> 00:10:09.920
Okay.

00:10:10.580 --> 00:10:14.580
But the uv is like you can kind of flow between the styles

00:10:14.640 --> 00:10:15.500
and it all just works,

00:10:15.820 --> 00:10:18.480
whereas in the other one,

00:10:19.100 --> 00:10:21.060
you kind of had to buy into it or not.

00:10:22.460 --> 00:10:23.680
Yeah, it's all or nothing, yeah.

00:10:25.560 --> 00:10:26.360
Another one really quick.

00:10:26.500 --> 00:10:27.260
We partially use it.

00:10:27.310 --> 00:10:30.420
We will transition when dependabot support is available.

00:10:32.080 --> 00:10:32.960
See previous comment.

00:10:33.120 --> 00:10:36.140
If you say uv pip install and uv pip compile

00:10:36.860 --> 00:10:39.880
and use a requirements.txt file compiled by uv,

00:10:41.380 --> 00:10:42.380
you've got dependabot support.

00:10:42.860 --> 00:10:46.000
For me, dependabot support is a net negative.

00:10:46.220 --> 00:10:47.680
I hate dependabot so much.

00:10:47.960 --> 00:10:49.780
I've tried to turn it off on some of my projects,

00:10:49.830 --> 00:10:51.020
and I can't get it turned off

00:10:52.210 --> 00:10:55.120
without turning off all the security features at GitHub.

00:10:55.860 --> 00:11:01.120
So I just had to set up mail rules that say, delete anything from Dependabot that says bump.

00:11:01.800 --> 00:11:02.300
Bump this thing.

00:11:02.580 --> 00:11:09.840
Because I would wake up on Monday and I'd have probably 25, 30 separate messages from Dependabot saying, hey, guess what?

00:11:09.900 --> 00:11:10.880
You've got an update for this.

00:11:10.980 --> 00:11:11.820
You've got an update for that.

00:11:12.520 --> 00:11:12.800
I'm like,

00:11:12.960 --> 00:11:15.280
oh, Dependabot, please stop doing this.

00:11:16.240 --> 00:11:18.540
And if they would just go, your project has 17 updates.

00:11:19.540 --> 00:11:19.700
Okay.

00:11:20.800 --> 00:11:21.200
That

00:11:21.200 --> 00:11:21.860
would be kind of helpful.

00:11:22.820 --> 00:11:25.060
17 times your project has an update is not helpful.

00:11:25.860 --> 00:11:30.220
So that said, if you use uv space pip compile and requires not TXC,

00:11:30.250 --> 00:11:31.060
you have dependent bot support.

00:11:31.580 --> 00:11:32.060
All right, last thought.

00:11:32.060 --> 00:11:33.720
I'll leave it with this one from Jared Sheel.

00:11:34.540 --> 00:11:37.600
Seeing a whole lot of Stockholm syndrome in the replies to this question.

00:11:42.760 --> 00:11:43.480
Okay, interesting.

00:11:44.120 --> 00:11:47.280
Like a lot of people were sort of, you know,

00:11:47.370 --> 00:11:51.100
they were tied to the things that were not working well

00:11:51.280 --> 00:11:53.320
or they were tied to the things like, well, this is how we do it,

00:11:53.600 --> 00:11:54.400
And I know it sucks.

00:11:54.640 --> 00:11:57.040
It's not better, but this is how we do it.

00:11:57.520 --> 00:11:57.860
You know what I mean?

00:11:58.600 --> 00:11:58.740
Yeah.

00:12:00.160 --> 00:12:02.380
Yeah, the one thing that I would like to...

00:12:02.680 --> 00:12:04.160
Okay, there's a reason

00:12:04.160 --> 00:12:05.120
that

00:12:05.120 --> 00:12:07.160
you really get a lot of the benefit of UV

00:12:07.380 --> 00:12:09.160
if you globally install it.

00:12:09.160 --> 00:12:10.960
You do the curl install or something, right?

00:12:15.199 --> 00:12:19.200
And also letting it install Python for you.

00:12:21.000 --> 00:12:30.460
With all the other Python dependencies, you can use your own custom, like a custom PyPI, like your own in-house PyPI.

00:12:31.380 --> 00:12:38.020
With that part, the curl install and the installing the binaries, Python binaries,

00:12:38.220 --> 00:12:38.720
I

00:12:38.720 --> 00:12:39.880
don't know if you can do that.

00:12:40.140 --> 00:12:45.660
So I think that that still might be a decent reason is because you're using a firewall in a company.

00:12:46.960 --> 00:12:47.040
And

00:12:47.040 --> 00:12:47.720
that

00:12:47.720 --> 00:12:48.820
part isn't working right.

00:12:49.140 --> 00:12:51.740
But you can still pip install uv.

00:12:52.030 --> 00:12:57.880
And I have done time tests, and it's still faster to use uv even if you pip install it.

00:12:58.040 --> 00:12:58.180
So

00:12:58.180 --> 00:12:59.220
you

00:12:59.220 --> 00:12:59.880
just don't get all the

00:12:59.880 --> 00:13:00.120
benefits.

00:13:00.980 --> 00:13:01.700
Yeah, absolutely.

00:13:01.870 --> 00:13:01.960
Awesome.

00:13:02.720 --> 00:13:04.240
Yeah, you've got to already have a project.

00:13:04.290 --> 00:13:05.400
You can't start.

00:13:05.580 --> 00:13:06.200
You've got to have Python.

00:13:06.340 --> 00:13:08.380
You've got to have a VNV, and then you go from there.

00:13:08.820 --> 00:13:09.060
Yeah.

00:13:09.820 --> 00:13:10.000
Anyway.

00:13:10.700 --> 00:13:12.560
Which is fine because mostly that's what you're doing with life.

00:13:12.670 --> 00:13:14.040
You're not constantly creating a project.

00:13:14.520 --> 00:13:15.600
I love our audience.

00:13:16.510 --> 00:13:16.640
I

00:13:16.640 --> 00:13:17.420
mean, Henry Schreiner.

00:13:17.510 --> 00:13:18.000
Hey, Henry.

00:13:18.900 --> 00:13:19.620
Just shout it out.

00:13:19.820 --> 00:13:22.680
Dependabot just added support last week for uv lock.

00:13:23.180 --> 00:13:23.880
How about that?

00:13:24.700 --> 00:13:27.420
Do you know how out of date that Twitter thread is?

00:13:27.820 --> 00:13:28.380
So last week.

00:13:29.120 --> 00:13:30.080
So last week.

00:13:31.440 --> 00:13:35.760
Well, and also a lot of the knowledgeable people probably didn't respond because it's on X.

00:13:37.220 --> 00:13:37.980
Yeah, that's true.

00:13:37.980 --> 00:13:44.460
Well, I mean, it's a surprising amount of interaction over there for what it is.

00:13:44.840 --> 00:13:45.040
Okay.

00:13:45.720 --> 00:13:46.100
Over to you.

00:13:46.700 --> 00:13:46.860
Okay.

00:13:48.180 --> 00:13:49.620
Let's talk about uv a little bit.

00:13:51.680 --> 00:13:51.940
Why?

00:13:51.950 --> 00:13:52.780
We haven't even done that yet.

00:13:54.940 --> 00:13:58.720
So I want to talk about this cool project from Tim Hopper.

00:13:59.500 --> 00:13:59.940
Love Tim.

00:14:00.820 --> 00:14:01.600
Kind of miss seeing him.

00:14:02.340 --> 00:14:05.320
He's one of the fellows that I used to run into at conferences all the time

00:14:05.520 --> 00:14:07.220
and haven't been to conferences lately.

00:14:07.500 --> 00:14:07.620
So

00:14:07.620 --> 00:14:08.380
hi,

00:14:08.540 --> 00:14:08.660
Tim.

00:14:09.200 --> 00:14:13.140
Anyway, he put out the Python developer tooling handbook.

00:14:13.870 --> 00:14:17.500
And it's an in-progress thing, but he's been working on it for a while.

00:14:19.320 --> 00:14:20.020
yeah Tim Hopper

00:14:20.480 --> 00:14:21.280
great guy anyway

00:14:21.960 --> 00:14:23.580
the Python developer

00:14:24.040 --> 00:14:25.620
tooling handbook and it's

00:14:26.000 --> 00:14:26.640
walking through

00:14:27.700 --> 00:14:28.760
a lot of the

00:14:29.600 --> 00:14:30.900
basically the new

00:14:31.540 --> 00:14:32.660
models for doing things

00:14:33.660 --> 00:14:34.660
I don't know

00:14:35.300 --> 00:14:36.760
it says that I guess he does

00:14:37.120 --> 00:14:38.720
comment on a lot of these things

00:14:39.200 --> 00:14:40.680
UV, poetry, flit,

00:14:41.120 --> 00:14:41.820
subtools, hatch

00:14:42.620 --> 00:14:44.640
but I was noticing right away

00:14:45.400 --> 00:14:46.599
he's doing tutorials

00:14:46.840 --> 00:14:49.740
and how-tos and explanations and

00:14:49.740 --> 00:14:50.440
kind

00:14:50.440 --> 00:14:51.000
of a cool,

00:14:51.220 --> 00:14:53.800
and then some references and kind of a cool way

00:14:53.860 --> 00:14:55.300
to set up some documentation.

00:14:57.020 --> 00:15:00.660
But like, let's say publish your first Python package

00:15:01.300 --> 00:15:03.840
or let's do a create your first Python project.

00:15:04.580 --> 00:15:06.980
And instead of doing a lot of the history,

00:15:07.180 --> 00:15:09.060
he's just popping to the right answer.

00:15:09.620 --> 00:15:10.840
It's UVInit.

00:15:12.220 --> 00:15:15.360
And I mean, actually a lot of the other init,

00:15:16.140 --> 00:15:19.120
like initializing projects I haven't liked before,

00:15:19.380 --> 00:15:21.740
even like the flit in it I didn't like,

00:15:21.920 --> 00:15:23.020
but uv in it is

00:15:23.020 --> 00:15:23.620
pretty

00:15:23.620 --> 00:15:24.100
darn good.

00:15:24.960 --> 00:15:26.060
They're doing a good job.

00:15:26.980 --> 00:15:29.120
And anyway, so using

00:15:29.120 --> 00:15:30.060
and

00:15:30.060 --> 00:15:30.760
then adding dependencies.

00:15:31.420 --> 00:15:33.880
And I love this, like let's skip all the,

00:15:34.020 --> 00:15:35.640
well, you could do it nine different ways.

00:15:35.700 --> 00:15:38.860
Just tell me the way to do it, or at least a way.

00:15:39.300 --> 00:15:41.520
It's opinionated, but it's a good opinion.

00:15:43.060 --> 00:15:44.760
And publishing your first package,

00:15:45.560 --> 00:15:49.240
talking about setting it up. Anyway, a cool resource. I hope to see it

00:15:49.810 --> 00:15:52.320
grow a lot. So anyway,

00:15:53.339 --> 00:15:57.220
it encourages people to test. It encourages people to use TestPyPI

00:15:57.500 --> 00:16:01.060
first before they go somewhere else. Although be careful

00:16:01.480 --> 00:16:04.980
because there's a lot of projects that don't use

00:16:05.140 --> 00:16:08.540
TestPyPI and they clean that one out every once in a while.

00:16:09.260 --> 00:16:09.340
So

00:16:09.340 --> 00:16:12.400
even if a package is available on the

00:16:12.420 --> 00:16:16.220
test PyPI, it might not be available on the big PyPI.

00:16:16.960 --> 00:16:17.320
Yeah,

00:16:17.580 --> 00:16:20.380
yeah. So you're like, oh, it uploaded, so that means

00:16:20.500 --> 00:16:23.780
there's no name conflict. Like, no, no, no. Search

00:16:24.360 --> 00:16:24.660
PyPI.

00:16:24.980 --> 00:16:25.460
Yeah,

00:16:26.140 --> 00:16:28.320
but one of the things I wanted to bring up also is

00:16:28.600 --> 00:16:29.820
let's see, right at the top.

00:16:32.260 --> 00:16:36.080
It says, this is not a book about programming Python.

00:16:36.380 --> 00:16:40.499
Instead, the goal of this book is to help you understand the ecosystem of tools

00:16:40.520 --> 00:16:43.520
used to make Python development easier and more productive.

00:16:44.280 --> 00:16:45.140
So it's going to grow.

00:16:45.840 --> 00:16:48.900
I commented about some of the testing already,

00:16:49.180 --> 00:16:51.840
and he said he's going to add some stuff about testing as well.

00:16:53.200 --> 00:16:57.780
He said the handbook is structured according to the DIA taxes framework,

00:16:58.240 --> 00:16:58.360
which,

00:16:58.520 --> 00:16:59.620
okay,

00:16:59.880 --> 00:17:01.640
didn't know anything about this.

00:17:01.760 --> 00:17:03.680
Tutorial, how-to, explanation, and reference.

00:17:04.120 --> 00:17:06.120
So I'm not going to link to it,

00:17:06.120 --> 00:17:07.480
but there's a link here on

00:17:07.480 --> 00:17:08.480
his

00:17:08.480 --> 00:17:09.459
project about it.

00:17:09.720 --> 00:17:09.800
And

00:17:09.800 --> 00:17:10.680
I'm

00:17:10.680 --> 00:17:11.819
going to have to read more about this.

00:17:11.920 --> 00:17:12.500
This is interesting.

00:17:12.860 --> 00:17:13.740
I've never heard about this.

00:17:14.079 --> 00:17:15.839
I had not heard of it either, but it does look interesting.

00:17:16.380 --> 00:17:23.319
Anyway, and some great information about setting up rough to check your code and things like that.

00:17:24.980 --> 00:17:33.900
I've been so excited about UVV and V and UVPIP and stuff like that that I kind of forget that I'm using rough all the time also.

00:17:34.900 --> 00:17:36.660
And it's kind of bundled into there.

00:17:38.320 --> 00:17:44.960
I'm curious, while we're talking, like kind of transition to Ruff for a second, I was listening to that interview you did

00:17:44.960 --> 00:17:46.460
recently

00:17:46.460 --> 00:17:49.460
where you were talking about, I think you interviewed Charlie recently.

00:17:51.720 --> 00:17:54.160
And I, there's, I like,

00:17:54.280 --> 00:17:55.120
I

00:17:55.120 --> 00:18:00.060
like how detailed Ruff can be, but this is one of the things that I think I'm,

00:18:00.500 --> 00:18:01.420
Ruff

00:18:01.420 --> 00:18:05.860
can go in the Pi Project Tommel or there's Ruff Tommel also now.

00:18:07.400 --> 00:18:18.080
And I kind of like, I think I might transition to using the ruff.toml or try to, because I end up having like a decent amount of tweaking the rules a little bit.

00:18:18.150 --> 00:18:19.580
And I'm not really tweaking the project.

00:18:19.840 --> 00:18:22.000
I'm just tweaking the linting rules.

00:18:22.380 --> 00:18:22.480
So

00:18:22.480 --> 00:18:23.360
are

00:18:23.360 --> 00:18:26.340
you using, do you use rough and where do you put your rules?

00:18:26.340 --> 00:18:26.880
I love rough.

00:18:27.580 --> 00:18:28.960
And I'm all about the rough.toml.

00:18:29.160 --> 00:18:33.620
Yeah, it definitely takes more than a page of small font on my screen.

00:18:34.580 --> 00:18:34.880
Okay.

00:18:34.900 --> 00:18:41.980
I don't want to, you know, you could reasonably have a PyProject.toml that's smaller than the ruff.toml.

00:18:42.620 --> 00:18:43.780
So, you know, I don't want to put those together.

00:18:45.020 --> 00:18:52.860
Yeah, and I loved Charlie's comment about the rules of even he doesn't turn them all on.

00:18:53.020 --> 00:18:53.600
That would be silly.

00:18:54.680 --> 00:18:55.300
So I tried it.

00:18:55.450 --> 00:18:56.820
I tried turning all the rules on.

00:18:57.360 --> 00:18:59.840
And there's some rules that are inconsistent.

00:19:00.040 --> 00:19:02.940
There's like two or three rules that are conflict with other rules.

00:19:03.060 --> 00:19:03.980
So you have to decide,

00:19:04.120 --> 00:19:04.480
you

00:19:04.480 --> 00:19:05.420
know, if you turn them all on,

00:19:05.600 --> 00:19:06.120
there's

00:19:06.120 --> 00:19:09.160
actually a built-in conflict because a couple of those conflicts.

00:19:09.310 --> 00:19:13.740
But it gives you really great detailed information about how to fix it.

00:19:15.040 --> 00:19:31.600
Yeah, another benefit from using a rough TOML over pyproject.toml is if you're using Docker or any, basically any continuous integration style thing where it looks at, well, if any of the source files change, I need to rebuild or redeploy.

00:19:32.540 --> 00:19:35.300
and restart your web apps, your APIs, or whatever,

00:19:36.160 --> 00:19:38.920
you can make changes to your ruff.toml

00:19:39.800 --> 00:19:43.300
and having, if you exclude that with a Docker ignore, for example,

00:19:43.920 --> 00:19:44.760
then you rebuild it.

00:19:44.760 --> 00:19:46.940
It'll say, yep, there's no changes, right?

00:19:47.140 --> 00:19:49.880
Unless those changes result in real code changes.

00:19:51.500 --> 00:19:52.460
So I

00:19:52.460 --> 00:19:53.420
know it's not a huge deal,

00:19:53.440 --> 00:19:56.080
but that's a plus one in the column of separating those things.

00:19:56.740 --> 00:19:59.640
Yeah, so if you're just doing a handful of rules,

00:19:59.780 --> 00:20:02.280
it might be fine in your pyproject.toml,

00:20:02.310 --> 00:20:07.300
but if you're experimenting with turning on more and more rules,

00:20:08.740 --> 00:20:09.180
then,

00:20:09.180 --> 00:20:09.620
yeah,

00:20:10.280 --> 00:20:10.980
bring

00:20:10.980 --> 00:20:11.360
it separate.

00:20:12.820 --> 00:20:14.680
It's both surprising and cool

00:20:14.680 --> 00:20:16.880
that

00:20:16.880 --> 00:20:18.600
by default not all of them are on,

00:20:18.760 --> 00:20:21.360
because a lot of linters in the past, they defaulted to all on,

00:20:21.920 --> 00:20:25.180
and you'd try to use the tool and it would just blow up with errors.

00:20:26.630 --> 00:20:27.900
But Ruff does not.

00:20:29.600 --> 00:20:29.980
it's got

00:20:29.980 --> 00:20:30.100
some

00:20:30.100 --> 00:20:31.020
good standard ones

00:20:31.130 --> 00:20:33.020
and then you have to go turn them on.

00:20:33.750 --> 00:20:33.860
So

00:20:33.860 --> 00:20:34.220
anyway.

00:20:35.200 --> 00:20:35.280
Yep.

00:20:35.650 --> 00:20:37.520
One more piece I saw in the toolbook here

00:20:37.680 --> 00:20:40.340
that it was being added with a uv add.

00:20:41.000 --> 00:20:43.220
I put rough into my system

00:20:43.700 --> 00:20:46.560
using uv toolinstall ruff

00:20:47.100 --> 00:20:48.880
because just globally

00:20:49.120 --> 00:20:50.060
and then have a ruff.toml

00:20:50.180 --> 00:20:51.660
for each project to configure it.

00:20:52.150 --> 00:20:54.200
So that way you don't have to

00:20:55.660 --> 00:20:56.820
have updates to your project

00:20:57.080 --> 00:20:58.260
or make sure you remember and install.

00:20:58.460 --> 00:20:59.900
It's just like a globally available

00:20:59.900 --> 00:21:01.160
tool.

00:21:03.520 --> 00:21:03.660
Yeah.

00:21:03.840 --> 00:21:04.020
Yeah.

00:21:04.300 --> 00:21:05.060
I should do that.

00:21:05.500 --> 00:21:06.280
I don't know why I don't.

00:21:06.780 --> 00:21:06.920
Oh.

00:21:11.300 --> 00:21:11.560
Anyway.

00:21:12.460 --> 00:21:12.840
Anyway.

00:21:13.960 --> 00:21:18.460
Well, should we talk about the wonderful people at Posit that are helping us today?

00:21:19.160 --> 00:21:19.640
Absolutely.

00:21:20.200 --> 00:21:20.480
Okay.

00:21:20.480 --> 00:21:20.860
Let's do it.

00:21:21.800 --> 00:21:25.220
This episode of Python Bytes is brought to you by the folks at Posit.

00:21:25.880 --> 00:21:29.620
Posit has made a huge investment in the Python community lately.

00:21:30.420 --> 00:21:36.280
Known originally for RStudio, they have been building out a suite of tools and services for Team Python.

00:21:37.160 --> 00:21:40.920
Today, I want to focus on hosting your Python-based data science workloads.

00:21:41.470 --> 00:21:48.480
This includes dashboards, reports, plots, interactive web apps, all the way to custom Flask and Django apps.

00:21:48.980 --> 00:21:50.780
Their service is Posit Connect.

00:21:51.360 --> 00:21:56.140
Posit Connect makes it easy for data scientists to share work built with Python code.

00:21:56.560 --> 00:22:10.840
If you have a streamlit app, dashboard, Plotly interactive plots, a FastAPI service, or even a Quarto report, just give Posit Connect the code it needs to maintain the asset, and Connect automatically does the rest.

00:22:11.400 --> 00:22:14.220
Connect will manage your APIs and serve your interactive apps.

00:22:15.060 --> 00:22:18.720
And if desired, update your ports and dashboards on a scheduled basis.

00:22:19.100 --> 00:22:24.900
That's right. No more need to explain to the stakeholders why the dashboard or plot stopped updating last week.

00:22:25.540 --> 00:22:33.060
You get to focus on your data science and leverage your skill set while Connect makes you look good, keeping your code running in private.

00:22:33.560 --> 00:22:39.500
With Connect, you get a private URL on your Connect server, ensuring that your asset is continuously

00:22:39.500 --> 00:22:41.020
available

00:22:41.020 --> 00:22:42.000
to your shareholders.

00:22:42.540 --> 00:22:45.860
You can also control which users have access to the asset.

00:22:46.760 --> 00:22:49.940
Let Posit Connect handle the delivery and DevOps

00:22:49.940 --> 00:22:52.580
involved

00:22:52.580 --> 00:22:53.860
in sharing your work.

00:22:54.310 --> 00:22:55.740
You focus on what you do best.

00:22:56.130 --> 00:23:01.840
So if you work on a data science team, you owe it to you and your org to check out Posit Connect.

00:23:02.280 --> 00:23:06.020
Visit pythonbytes.fm/connect today and get

00:23:06.020 --> 00:23:07.120
a

00:23:07.120 --> 00:23:10.080
three-month free trial to see if it's a good fit.

00:23:10.600 --> 00:23:12.640
That's pythonbytes.fm/connect.

00:23:13.400 --> 00:23:16.060
The link is in your podcast player's show notes.

00:23:16.580 --> 00:23:19.200
Thank you to Posit for supporting Python Bytes.

00:23:20.140 --> 00:23:20.660
Absolutely.

00:23:21.500 --> 00:23:22.040
Thank you, Posit.

00:23:22.700 --> 00:23:24.680
That's sort of a data science theme, right, Brian?

00:23:25.190 --> 00:23:25.320
Yeah.

00:23:25.320 --> 00:23:27.980
Let's go and talk about something from Adam Chains.

00:23:29.320 --> 00:23:35.180
And I know we talked about rough, but what about black?

00:23:35.660 --> 00:23:38.820
So black is still a super important, super influential thing.

00:23:38.870 --> 00:23:42.220
I imagine with black, without black, maybe rough doesn't exist.

00:23:43.120 --> 00:23:48.660
So I want to come up, I want to point out a tool called Blacken Docs.

00:23:49.360 --> 00:23:56.440
So if you have documentation, and in that documentation maybe you've got some code blocks,

00:23:56.690 --> 00:23:59.620
some Python code blocks, and you would like to format them.

00:24:00.160 --> 00:24:04.840
I don't know how well your Markdown Editor formats code, but I'll tell you what.

00:24:04.910 --> 00:24:07.160
I love my Markdown Editor, which is TypeHora.

00:24:07.840 --> 00:24:13.660
It does not have a reformat according to rough style feature

00:24:13.990 --> 00:24:17.800
whenever I say tick, tick, tick, Python types and stuff, right?

00:24:18.880 --> 00:24:19.400
But this does.

00:24:20.000 --> 00:24:23.200
And so you can run this against all sorts of different things.

00:24:23.340 --> 00:24:24.360
So it says documentation.

00:24:25.450 --> 00:24:31.480
But if you look at it, what it will do is it works on restructured text

00:24:31.880 --> 00:24:33.340
or it works on markdown files.

00:24:34.660 --> 00:24:35.100
Okay.

00:24:35.700 --> 00:24:42.900
For example, I'm working on that Python in production book from Talk Python, which is like 250 pages of Markdown.

00:24:43.700 --> 00:24:48.520
There's a crap ton of tick, tick, tick Python something or other in there.

00:24:48.900 --> 00:24:49.680
Oh, yeah.

00:24:50.060 --> 00:24:51.220
I could run it against that.

00:24:51.220 --> 00:24:52.500
It doesn't have to be documentation.

00:24:53.000 --> 00:24:54.280
Anything that's restructured text

00:24:54.280 --> 00:24:55.320
or

00:24:55.320 --> 00:24:56.900
Markdown that has

00:24:56.900 --> 00:24:57.760
Python

00:24:57.760 --> 00:24:58.840
code,

00:24:59.060 --> 00:24:59.600
you

00:24:59.600 --> 00:25:03.020
know, full-size code block sections, you can just hit it with that.

00:25:03.940 --> 00:25:04.320
Oh, cool.

00:25:04.940 --> 00:25:05.420
That's cool, right?

00:25:05.500 --> 00:25:05.940
Yeah.

00:25:08.080 --> 00:25:10.500
You can also install a pre-commit hook.

00:25:10.510 --> 00:25:11.260
It comes with one.

00:25:12.380 --> 00:25:14.540
And then when anybody commits,

00:25:14.570 --> 00:25:16.120
it will automatically format that.

00:25:16.190 --> 00:25:18.240
And I think, does it do doc strings as well?

00:25:18.480 --> 00:25:19.000
Let's see.

00:25:21.860 --> 00:25:25.400
I believe, yeah, you can run it on Python files

00:25:26.580 --> 00:25:29.180
to reformat doc strings.

00:25:29.500 --> 00:25:29.560
Yeah.

00:25:30.920 --> 00:25:34.180
So doc strings and basically markdown and restructure text.

00:25:34.300 --> 00:25:35.180
That's pretty awesome, right?

00:25:36.200 --> 00:25:36.300
yeah

00:25:37.359 --> 00:25:39.680
so there you go you can even turn it off

00:25:39.680 --> 00:25:41.500
with some comments like no

00:25:42.040 --> 00:25:42.800
please don't do it here

00:25:43.580 --> 00:25:44.040
and so on

00:25:44.680 --> 00:25:47.260
so just to be clear I mean it's probably obvious but

00:25:47.580 --> 00:25:48.040
it's not

00:25:49.379 --> 00:25:50.500
it's formatting

00:25:51.560 --> 00:25:53.580
the code blocks within your markdown

00:25:53.820 --> 00:25:54.060
files

00:25:54.060 --> 00:25:54.980
to

00:25:54.980 --> 00:25:55.600
black style

00:25:55.660 --> 00:25:57.040
there aren't black styles for

00:25:57.700 --> 00:25:58.040
markdown

00:25:58.660 --> 00:25:59.220
yes exactly

00:26:00.820 --> 00:26:02.700
although that's an interesting idea as well

00:26:03.679 --> 00:26:04.240
I

00:26:04.240 --> 00:26:05.180
actually wouldn't mind

00:26:05.200 --> 00:26:07.140
something like black for Markdown

00:26:07.230 --> 00:26:09.060
because it drives me... I do

00:26:09.600 --> 00:26:10.400
headings with the

00:26:10.400 --> 00:26:11.240
pound

00:26:11.500 --> 00:26:12.100
and pound, pound.

00:26:13.860 --> 00:26:15.260
But Markdown allows the

00:26:15.480 --> 00:26:17.340
underscore, the dash

00:26:17.580 --> 00:26:19.000
line line underneath it.

00:26:19.400 --> 00:26:20.920
I hate that. It drives me.

00:26:21.920 --> 00:26:23.240
It's like somebody came from a structured

00:26:23.480 --> 00:26:24.780
text and stuck it in there.

00:26:25.160 --> 00:26:27.120
Let's make it easier to convert our restructured text.

00:26:27.600 --> 00:26:28.040
No.

00:26:28.400 --> 00:26:29.380
No, please don't

00:26:29.440 --> 00:26:31.300
do that. We're here because

00:26:31.310 --> 00:26:33.200
we don't like structured text. Don't you understand

00:26:33.400 --> 00:26:33.800
what's happening?

00:26:36.200 --> 00:26:38.360
All right, well, anyway, thanks, Adam, for that.

00:26:38.480 --> 00:26:39.520
That's a cool-looking project.

00:26:40.380 --> 00:26:40.460
Yeah.

00:26:42.220 --> 00:26:45.840
I'm going to stick with some data science themes

00:26:46.340 --> 00:26:47.680
for a little bit longer.

00:26:48.880 --> 00:26:49.360
So

00:26:49.360 --> 00:26:49.840
I

00:26:49.840 --> 00:26:51.780
want to talk about reinventing notebooks

00:26:52.220 --> 00:26:53.680
as reusable Python programs.

00:26:54.000 --> 00:26:57.200
Have you heard of this Marimo thing?

00:26:57.400 --> 00:26:58.040
Marimo, yes.

00:26:58.160 --> 00:26:59.040
I just had

00:26:59.040 --> 00:27:02.100
the founder of Marimo on Talk Python.

00:27:02.600 --> 00:27:02.860
Okay.

00:27:03.580 --> 00:27:03.680
Yeah.

00:27:03.780 --> 00:27:08.680
Yeah, it's not out yet, but it's been recorded and available on YouTube.

00:27:09.280 --> 00:27:09.460
Okay.

00:27:10.400 --> 00:27:11.760
This is sort of interesting.

00:27:11.940 --> 00:27:15.740
I'm like, oh, okay, somebody else is reinventing notebooks or something.

00:27:16.940 --> 00:27:17.820
But this

00:27:17.820 --> 00:27:18.480
is pretty cool.

00:27:18.860 --> 00:27:21.520
So what are we looking at here?

00:27:21.620 --> 00:27:25.000
What we're looking at is, I'm going to pop down to some code examples,

00:27:25.840 --> 00:27:26.260
is that

00:27:26.260 --> 00:27:26.960
a

00:27:26.960 --> 00:27:29.460
notebook doesn't have to look like a notebook anymore

00:27:29.650 --> 00:27:31.180
in like JSON form or something.

00:27:31.320 --> 00:27:35.920
It can look like Python, or at least with the Maramode environment.

00:27:37.330 --> 00:27:37.960
And I'm not

00:27:37.960 --> 00:27:38.600
quite

00:27:38.600 --> 00:27:38.920
sure.

00:27:38.990 --> 00:27:40.260
You probably know more than I do then.

00:27:41.320 --> 00:27:44.420
Can you just open these up into notebooks,

00:27:44.670 --> 00:27:47.060
or do you have to do something special to get them up?

00:27:48.060 --> 00:27:55.080
So it's a different execution environment than, say,

00:27:56.150 --> 00:27:58.700
in Jupyter Space Lab or Jupyter Space Notebook.

00:27:59.020 --> 00:27:59.820
It's a different runtime.

00:28:00.460 --> 00:28:00.640
Okay.

00:28:01.040 --> 00:28:03.000
But they're real similar.

00:28:03.660 --> 00:28:04.460
Okay, got it.

00:28:04.800 --> 00:28:08.080
But I really like that it's just Python.

00:28:08.360 --> 00:28:09.800
Well, it's not just Python code.

00:28:09.920 --> 00:28:10.860
It's extra stuff also.

00:28:11.320 --> 00:28:15.640
It looks like they add some decorators to make their environment understand what it is.

00:28:15.740 --> 00:28:17.200
Like there's app.sell

00:28:17.200 --> 00:28:18.660
and

00:28:18.660 --> 00:28:19.900
at app

00:28:19.900 --> 00:28:20.940
.sell

00:28:20.940 --> 00:28:23.320
and at app.function and

00:28:23.320 --> 00:28:25.400
probably

00:28:25.400 --> 00:28:26.440
other stuff too.

00:28:27.020 --> 00:28:29.600
But some of the benefits of this are incredible.

00:28:30.080 --> 00:28:34.520
So some of the benefits are that you can version with Git easier.

00:28:35.140 --> 00:28:36.220
Well, you can do that with JSON too,

00:28:36.380 --> 00:28:38.440
but the diffs don't really make a lot of sense often.

00:28:39.179 --> 00:28:41.080
The diffs are all over the place.

00:28:41.900 --> 00:28:45.160
You can test with pytest, and that one, I'm like, really?

00:28:46.559 --> 00:28:48.200
That's been one of the problems because

00:28:48.200 --> 00:28:49.400
in

00:28:49.400 --> 00:28:49.820
the past,

00:28:50.940 --> 00:28:52.560
testing is kind of an issue,

00:28:52.780 --> 00:28:55.020
or at least it has been a long time ago when I tried it.

00:28:55.860 --> 00:28:57.200
Maybe they've solved it other ways.

00:28:57.880 --> 00:28:59.620
But testing even with Doctest,

00:28:59.820 --> 00:29:04.560
and some of the other stuff in there,

00:29:04.840 --> 00:29:06.020
embedding SQL and Markdown,

00:29:06.600 --> 00:29:08.660
like all the sort of stuff that you could normally do with Python

00:29:08.880 --> 00:29:10.480
you can now still do with these.

00:29:12.460 --> 00:29:14.120
And it's just kind of cool.

00:29:15.760 --> 00:29:18.120
I wanted to check this out and try it out.

00:29:18.360 --> 00:29:20.140
This is available for everybody to run, right?

00:29:21.340 --> 00:29:22.920
Yeah, it's available for people to run.

00:29:23.460 --> 00:29:24.600
You can download it, run it locally.

00:29:24.740 --> 00:29:28.260
They also have some cloud options, and it's really neat.

00:29:28.460 --> 00:29:30.620
There's super nice ways to host it.

00:29:31.800 --> 00:29:35.840
You just say run it as a service.

00:29:36.000 --> 00:29:37.380
One of the things that's pretty interesting here,

00:29:37.380 --> 00:29:39.880
let me steal the stage for a moment,

00:29:41.299 --> 00:29:44.400
is this all runs inside of,

00:29:46.420 --> 00:29:47.800
in your browser, client-side.

00:29:47.960 --> 00:29:50.120
So that's one of the big differences with, say,

00:29:50.360 --> 00:29:51.300
Jupyter versus this,

00:29:51.580 --> 00:29:54.940
is it's powered by WebAssembly and PyOxide.

00:29:55.440 --> 00:29:56.620
Hmm. Okay.

00:29:57.020 --> 00:29:57.900
Pyodide, rather, sorry.

00:29:59.500 --> 00:30:00.740
and so for example this one

00:30:01.420 --> 00:30:02.880
that I pulled up I'll put it in the show notes

00:30:03.020 --> 00:30:05.200
is the F1 driver career explorer

00:30:05.780 --> 00:30:07.140
and look how nice this looks Brian

00:30:07.520 --> 00:30:08.480
like in terms of relative

00:30:08.700 --> 00:30:10.680
compare that to Jupyter for example I think

00:30:10.960 --> 00:30:12.640
it's got like a really beautiful style

00:30:13.060 --> 00:30:13.700
you know you can check out

00:30:14.420 --> 00:30:16.660
this is old we got to put Ferrari in here for

00:30:17.580 --> 00:30:17.800
Hamilton

00:30:18.600 --> 00:30:20.220
they only got Mercedes and McLaren

00:30:20.820 --> 00:30:22.480
but it was powered by say DuckDB

00:30:23.080 --> 00:30:24.220
WebAssembly for example

00:30:24.900 --> 00:30:25.739
and F1 data

00:30:26.480 --> 00:30:28.240
and yeah it's you know it's got little

00:30:28.240 --> 00:30:30.200
explorer

00:30:30.200 --> 00:30:33.740
sort of things and it just it feels really polished

00:30:33.860 --> 00:30:39.560
it also has a collaborative edit sort of thing like jupiter notebooks i'm sorry like google docs

00:30:39.700 --> 00:30:43.780
rather so you can like pair up on them there's a lot of neat stuff about this

00:30:43.780 --> 00:30:44.440
okay

00:30:44.440 --> 00:30:45.380
but this is okay

00:30:45.700 --> 00:30:51.579
it's still cool i was but i i misunderstood i thought maybe it was just a new way to run jupiter

00:30:51.660 --> 00:30:51.920
notebooks.

00:30:53.920 --> 00:30:55.780
Yes, but with a decent amount

00:30:55.800 --> 00:30:56.680
of new features.

00:30:56.840 --> 00:30:57.599
I mean, yeah.

00:30:59.380 --> 00:30:59.920
Well, I guess

00:31:00.900 --> 00:31:02.700
the thing I'm missing then, or

00:31:02.940 --> 00:31:04.700
not understanding, is there a

00:31:04.940 --> 00:31:06.480
relation between this and Jupyter notebooks?

00:31:07.480 --> 00:31:08.480
Can you use

00:31:09.060 --> 00:31:09.520
any of the

00:31:10.840 --> 00:31:11.960
rest of the Jupyter environment?

00:31:12.840 --> 00:31:12.940
I

00:31:12.940 --> 00:31:13.440
believe so.

00:31:14.340 --> 00:31:16.360
I'm trying to remember now how much integration

00:31:16.740 --> 00:31:18.720
there is between those, but yeah, I think so.

00:31:19.200 --> 00:31:19.920
Okay, cool.

00:31:21.260 --> 00:31:22.520
I'll investigate more.

00:31:24.480 --> 00:31:26.520
Anyway, I'm still pretty excited about it.

00:31:26.520 --> 00:31:27.220
It looks pretty neat.

00:31:28.860 --> 00:31:29.840
I'll have to play with it a bit.

00:31:31.600 --> 00:31:32.400
Yep, absolutely.

00:31:33.380 --> 00:31:35.520
It's also another thing that it really tries to solve

00:31:35.720 --> 00:31:37.480
is they are trying to solve the...

00:31:39.100 --> 00:31:39.600
Oh, you know what?

00:31:39.600 --> 00:31:41.740
I said it had a Google Docs integration.

00:31:42.040 --> 00:31:42.520
Not exactly.

00:31:42.940 --> 00:31:43.820
But what they're trying to solve

00:31:44.000 --> 00:31:49.300
is the real challenges of integrating notebooks with Git.

00:31:50.040 --> 00:31:53.520
So, for example, with notebooks, they're really JSON files,

00:31:53.670 --> 00:31:56.040
and then they've got the input blocks and the output blocks.

00:31:56.860 --> 00:31:58.160
So if you've run some code,

00:31:58.260 --> 00:32:00.320
and it's dependent on anything that might change,

00:32:00.620 --> 00:32:03.200
you'll get, like, huge, instead of getting a nice merge,

00:32:03.200 --> 00:32:07.600
you'll get two conflicts of, like, giant embedded blobs and so on.

00:32:08.780 --> 00:32:08.860
Yeah.

00:32:09.600 --> 00:32:12.120
The other thing that this really addresses around notebooks

00:32:13.990 --> 00:32:17.040
is notebooks allow you to run them in any order,

00:32:17.260 --> 00:32:19.040
which is kind of insane, right?

00:32:19.200 --> 00:32:26.700
Like I could run cell one, cell two, cell three, cell four, change cell two, run cell four again to see what the output is.

00:32:26.780 --> 00:32:33.000
But maybe the changes would have made cell two be different or cell three be different, you know, and you can like skip over.

00:32:33.640 --> 00:32:36.580
You'll have like – you'll have little numbers on the side of which order it was running.

00:32:36.600 --> 00:32:44.080
It would be like 1, 7, 8, 19, 14 or something.

00:32:44.080 --> 00:32:45.620
You know, as you go down, you're like, oh, this.

00:32:46.320 --> 00:32:53.040
So this is reactive in the sense that every variable you create is like wrapped.

00:32:53.320 --> 00:32:56.280
It's not technically wrapped in a reactive behavior thing.

00:32:56.440 --> 00:32:59.840
They parse the DOM every time you run anything.

00:33:00.390 --> 00:33:02.360
And they create relationships between cells.

00:33:02.450 --> 00:33:05.580
Say like, okay, cell 10 uses something from cell 1 and cell 3.

00:33:07.460 --> 00:33:11.760
So if you run cell 3, it knows that cell 10 is out of date

00:33:12.100 --> 00:33:14.120
or potentially will just rerun it for you.

00:33:15.040 --> 00:33:18.600
So it keeps track of the relationships even depending on the order

00:33:19.170 --> 00:33:21.920
so that you don't end up with like stale data

00:33:21.990 --> 00:33:25.680
and then run another cell that pulls in that stale data and so on.

00:33:25.680 --> 00:33:27.260
So it's trying to really address that as well.

00:33:27.940 --> 00:33:28.560
That's cool.

00:33:28.940 --> 00:33:29.020
Yeah.

00:33:29.660 --> 00:33:32.840
That's one of the things that threw me off when I first started using Notebooks.

00:33:33.860 --> 00:33:34.220
Yeah.

00:33:35.440 --> 00:33:36.160
That's a little weird.

00:33:36.190 --> 00:33:39.120
Like why is it allowed to just run this piece?

00:33:39.740 --> 00:33:42.640
From an exploratory perspective, that makes sense.

00:33:42.650 --> 00:33:43.719
Like, well, those were all expensive

00:33:43.780 --> 00:33:46.080
and I just want to ask questions down here and over here.

00:33:46.530 --> 00:33:49.900
But from a reproducibility perspective in debugging, it's bad.

00:33:50.800 --> 00:33:51.520
Yeah, yeah.

00:33:53.480 --> 00:33:57.700
So anyway, neat, something fun new to play with.

00:33:58.580 --> 00:33:58.860
Indeed,

00:33:58.970 --> 00:33:59.820
yeah, it's pretty cool.

00:34:00.320 --> 00:34:03.320
So that's our items.

00:34:03.350 --> 00:34:04.560
Do you have any extras for us?

00:34:05.480 --> 00:34:06.900
I do have some extras.

00:34:07.420 --> 00:34:09.120
Let's see a couple real quick.

00:34:10.179 --> 00:34:13.300
PyCon Taiwan, PyCon Taiwan 2025.

00:34:14.000 --> 00:34:16.280
is doing a call for proposals.

00:34:16.679 --> 00:34:17.820
It's going to be in the fall.

00:34:18.060 --> 00:34:18.620
And so

00:34:18.620 --> 00:34:20.600
you've

00:34:20.600 --> 00:34:24.360
got until April 5th anywhere in the world.

00:34:25.139 --> 00:34:28.960
So if you want to go to Taiwan and present stuff there,

00:34:29.840 --> 00:34:31.899
they have a decent number of English

00:34:31.899 --> 00:34:34.280
tracks

00:34:34.280 --> 00:34:35.200
and talks and stuff,

00:34:35.360 --> 00:34:36.440
and they're looking for more.

00:34:36.639 --> 00:34:37.879
So check that out.

00:34:39.200 --> 00:34:41.940
Also, a follow-up on the Hacker News thing.

00:34:42.080 --> 00:34:45.540
Remember, Brian, I was reading the Hacker News thing saying,

00:34:46.100 --> 00:34:46.980
who's looking for a job?

00:34:47.080 --> 00:34:47.639
Who's hiring?

00:34:48.580 --> 00:34:50.639
Well, Shinjitsu sent a submission and said,

00:34:52.300 --> 00:34:54.960
I'm sure some other Hacker News readers have already told you this.

00:34:55.300 --> 00:34:55.840
No, they haven't.

00:34:55.980 --> 00:34:57.060
So thank you, Shinjitsu.

00:34:58.380 --> 00:35:02.060
But if you haven't, you kind of got this exactly wrong.

00:35:02.700 --> 00:35:03.420
Oh, sorry.

00:35:03.420 --> 00:35:06.720
It says, Ask Hacker News Who Is Hiring is a monthly post

00:35:07.360 --> 00:35:10.500
that asks employers to post what jobs they're posting,

00:35:11.320 --> 00:35:15.620
not people asking which one.

00:35:15.860 --> 00:35:21.200
And who wants to be hired is a monthly topic that has people who are looking for jobs about themselves.

00:35:22.840 --> 00:35:23.040
So

00:35:23.040 --> 00:35:23.860
did we have that backwards?

00:35:23.940 --> 00:35:24.780
It was actually bad news?

00:35:25.900 --> 00:35:27.400
Yeah, I think that's what it's saying.

00:35:27.440 --> 00:35:27.900
Let me see.

00:35:30.540 --> 00:35:33.280
Yes, I think I said who wants to be hired was asked by the employers,

00:35:33.580 --> 00:35:37.380
and who is hiring was asked by the people looking for a job.

00:35:37.760 --> 00:35:40.580
But it sounds like it's the other way around.

00:35:40.740 --> 00:35:41.980
So that would make it less rosy.

00:35:42.360 --> 00:35:45.820
So sorry about that, folks, if that was a little bit backwards.

00:35:47.340 --> 00:35:47.920
Oh, okay.

00:35:48.680 --> 00:35:48.840
See?

00:35:49.920 --> 00:35:50.260
Errata.

00:35:51.500 --> 00:35:51.860
Errata.

00:35:52.140 --> 00:35:52.980
Yes, we have to have an

00:35:52.980 --> 00:35:53.220
errata.

00:35:54.480 --> 00:35:54.840
How about you?

00:35:55.800 --> 00:35:56.620
I've got a couple of things.

00:35:57.480 --> 00:36:07.900
First off, PyCon US announced that there's a refund policy for international attendees if you qualify for certain things.

00:36:08.140 --> 00:36:12.100
And actually, I'm just embarrassed as American that we have to do stuff like this.

00:36:13.450 --> 00:36:17.240
But international travel in the United States has become more complex for many of our community.

00:36:18.160 --> 00:36:20.800
Like on U.S. welcomes all community members to Pittsburgh.

00:36:21.880 --> 00:36:24.980
But if for some reason you can't come because of various

00:36:24.980 --> 00:36:27.180
problems,

00:36:27.520 --> 00:36:29.300
read the post for details.

00:36:30.350 --> 00:36:30.480
But

00:36:30.480 --> 00:36:31.360
they're

00:36:31.360 --> 00:36:31.980
a

00:36:31.980 --> 00:36:36.300
fairly, I think, a fairly cool refund policy details.

00:36:37.200 --> 00:36:40.400
anyway if you can't come for some reason check this out

00:36:42.300 --> 00:36:43.020
I've been thinking

00:36:43.020 --> 00:36:44.240
a lot about this there's

00:36:44.540 --> 00:36:48.020
been a lot of badness and

00:36:50.980 --> 00:36:52.660
I'm not happy about it Brian

00:36:52.900 --> 00:36:56.660
I'm not happy that our country is treating people that way it's one thing

00:36:57.180 --> 00:37:00.700
if you catch somebody trying to sneak over the border and I mean it's a

00:37:00.880 --> 00:37:01.680
political debate on

00:37:01.680 --> 00:37:02.820
how

00:37:02.820 --> 00:37:04.880
lenient or aggressive you want to

00:37:04.800 --> 00:37:08.380
enforce them. But when people, especially from

00:37:08.380 --> 00:37:09.580
fellow

00:37:09.580 --> 00:37:12.020
ally countries, just try to come over and

00:37:12.020 --> 00:37:16.420
they get put in jail because they didn't have the right kind of visa or something, that is,

00:37:18.060 --> 00:37:24.660
that's some bad stuff. Well, you would just never think that that was, that was the way the U.S.

00:37:24.710 --> 00:37:28.700
would treat people. I know they've been a little bit tough on immigration, but you know, Australia

00:37:28.940 --> 00:37:32.999
has, Canada has. I was detained at the Canadian border for a long time and finally was let into

00:37:33.020 --> 00:37:34.940
Canada. And it's

00:37:35.180 --> 00:37:36.960
okay, it's a hassle. But this is

00:37:37.180 --> 00:37:39.080
another level of jerkery

00:37:39.200 --> 00:37:39.800
and

00:37:42.280 --> 00:37:43.040
I'm glad

00:37:43.040 --> 00:37:44.900
to see that PyCon is doing this. I

00:37:45.100 --> 00:37:46.840
apologize to the world. I guarantee you

00:37:46.940 --> 00:37:48.860
Brian and I are not supporters of this

00:37:49.160 --> 00:37:49.260
policy.

00:37:51.460 --> 00:37:52.880
We're supporters of the refund policy.

00:37:53.240 --> 00:37:54.340
Yes, not the

00:37:54.340 --> 00:37:55.000
cause of the

00:37:55.080 --> 00:37:55.580
refund policy.

00:37:58.100 --> 00:37:58.280
Right.

00:37:58.960 --> 00:38:00.900
Okay. On a

00:38:01.320 --> 00:38:02.520
slightly more positive note,

00:38:03.900 --> 00:38:11.240
I finally finished up restructuring the complete pytest course series.

00:38:11.720 --> 00:38:17.560
So originally it was, so this is over at pythontest.com.

00:38:19.120 --> 00:38:26.280
This originally was, I had a remaking the pytest book I wrote as a course,

00:38:26.700 --> 00:38:31.859
and it was one course, but really the book was into three parts

00:38:31.880 --> 00:38:35.860
and intended to be read at different times during your development process.

00:38:36.100 --> 00:38:37.540
When you're first starting out a pytest,

00:38:37.960 --> 00:38:39.640
then when you're trying to apply it to projects.

00:38:40.280 --> 00:38:41.820
And then when you're really good at it

00:38:41.960 --> 00:38:44.480
and you really want to take off and get great at it,

00:38:44.900 --> 00:38:46.460
there's another section.

00:38:47.140 --> 00:38:49.320
And I had it in one course, and it doesn't write quite.

00:38:49.680 --> 00:38:54.040
I don't think it really quite fit how people use pytest and learn pytest.

00:38:54.200 --> 00:38:54.540
So now

00:38:54.540 --> 00:38:55.180
it's

00:38:55.180 --> 00:38:55.600
split up.

00:38:55.640 --> 00:38:59.360
So you can still get the complete bundle, and it gets the three parts.

00:38:59.760 --> 00:39:03.480
But the three parts, learning the basics of pytest is a separate course now.

00:39:03.530 --> 00:39:04.420
You can just buy it separate.

00:39:05.110 --> 00:39:10.180
And then you can grab part two and then part three.

00:39:10.310 --> 00:39:12.640
But also part two is working with projects.

00:39:12.800 --> 00:39:13.940
Part three, the booster rockets.

00:39:14.510 --> 00:39:18.320
Like really building plugins is why you would probably grab this

00:39:18.920 --> 00:39:20.620
and advanced parameterization techniques.

00:39:21.720 --> 00:39:25.060
However, even if you didn't buy the other ones,

00:39:25.310 --> 00:39:27.660
I like having them separate now because if somebody is like,

00:39:27.700 --> 00:39:28.960
I really want to build my own plugin,

00:39:29.600 --> 00:39:32.740
You can just go check out this one course instead of taking all three of them.

00:39:33.020 --> 00:39:33.080
So

00:39:33.080 --> 00:39:34.060
that's

00:39:34.060 --> 00:39:34.780
my big news there.

00:39:34.870 --> 00:39:41.980
The other reason why the other restructuring that I did is all the chapters are now a single video

00:39:41.980 --> 00:39:43.060
per

00:39:43.060 --> 00:39:44.360
chapter for the most part.

00:39:44.700 --> 00:39:48.600
Chapters two and three are a bit long, so I split them up so they're about 20 minutes each.

00:39:49.200 --> 00:39:52.880
But the thing that I really like about this now is that in each video,

00:39:53.100 --> 00:39:54.120
you

00:39:54.120 --> 00:39:56.360
can pop in and you can change the speed.

00:39:56.380 --> 00:39:57.480
So you can watch like

00:39:57.480 --> 00:39:58.280
the

00:39:58.280 --> 00:40:02.180
whole, I mean, I'm usually a 1.25 or 1.5 speed kind of person.

00:40:03.580 --> 00:40:04.020
And

00:40:04.020 --> 00:40:04.460
it

00:40:04.460 --> 00:40:08.140
was bugging me that you had to reset that setting every three minutes, like for

00:40:08.220 --> 00:40:09.200
a three or five minute video.

00:40:09.460 --> 00:40:13.360
Now, now it's only like you only set it once for a 20 minute video.

00:40:13.540 --> 00:40:13.640
So

00:40:13.640 --> 00:40:14.600
anyway,

00:40:14.940 --> 00:40:15.560
works better for me.

00:40:15.960 --> 00:40:17.880
Hopefully it works better for everybody else too.

00:40:18.460 --> 00:40:18.560
So

00:40:18.560 --> 00:40:19.860
that's

00:40:19.860 --> 00:40:21.540
my, that's my big extra.

00:40:22.800 --> 00:40:22.920
Yeah.

00:40:23.060 --> 00:40:23.240
Awesome.

00:40:23.500 --> 00:40:24.960
Congrats on getting that all redone.

00:40:25.060 --> 00:40:25.280
That's great.

00:40:26.260 --> 00:40:28.760
Yeah, so how about a joke?

00:40:28.820 --> 00:40:30.300
Shall we boldly go when

00:40:30.300 --> 00:40:31.260
no one has gone before?

00:40:31.950 --> 00:40:36.420
Yeah, so last week's joke was around a Star Trek Klingon theme.

00:40:37.740 --> 00:40:39.460
And we had, who was it?

00:40:40.050 --> 00:40:45.840
We had somebody from Holgi on Mastodon said, again, you probably already know this,

00:40:46.140 --> 00:40:46.300
but

00:40:46.300 --> 00:40:48.020
there's

00:40:48.020 --> 00:40:48.740
this thing called

00:40:48.740 --> 00:40:50.700
Klingon

00:40:50.700 --> 00:40:51.160
programmers.

00:40:51.900 --> 00:40:53.760
So this is over at Cornell.edu.

00:40:54.420 --> 00:40:58.420
Top 12 things likely to be heard if you are a Klingon programmer.

00:40:59.300 --> 00:41:00.220
And I kind of love this.

00:41:00.580 --> 00:41:01.480
So we should probably

00:41:01.480 --> 00:41:02.480
zoom

00:41:02.480 --> 00:41:03.060
in a little bit.

00:41:03.690 --> 00:41:03.820
Okay.

00:41:04.880 --> 00:41:06.400
We're not going to read all 12, but

00:41:06.400 --> 00:41:08.320
number

00:41:08.320 --> 00:41:09.340
12 is actually pretty good.

00:41:09.800 --> 00:41:12.480
Specifications are for the weak and timid.

00:41:13.920 --> 00:41:14.780
Do you want to read any of these?

00:41:15.500 --> 00:41:16.140
Let's see.

00:41:18.540 --> 00:41:20.120
This machine is a piece of God.

00:41:20.540 --> 00:41:22.200
I need a dual Pentium processor.

00:41:22.520 --> 00:41:24.400
if I am to do battle with this code.

00:41:27.040 --> 00:41:27.140
Yeah.

00:41:27.460 --> 00:41:27.780
Number four,

00:41:28.040 --> 00:41:29.140
a true Klingon warrior

00:41:29.440 --> 00:41:30.760
does not comment his code.

00:41:32.360 --> 00:41:32.800
Debugging.

00:41:33.300 --> 00:41:34.240
Klingons do not debug.

00:41:34.540 --> 00:41:36.240
Our software does not coddle the weak.

00:41:42.300 --> 00:41:43.680
Perhaps I think the perfect...

00:41:43.680 --> 00:41:44.280
Oh, no, go ahead.

00:41:45.200 --> 00:41:47.360
Klingon functions do not have parameters.

00:41:47.640 --> 00:41:48.180
They have arguments

00:41:48.640 --> 00:41:49.840
and they always win them.

00:41:51.320 --> 00:41:51.820
I love it.

00:41:52.200 --> 00:41:55.660
All right, let's round out the tie back to last week,

00:41:55.730 --> 00:41:58.140
which was we will test in production.

00:41:59.700 --> 00:42:00.200
Okay, yeah.

00:42:00.450 --> 00:42:02.040
So this is what, number one?

00:42:02.640 --> 00:42:03.520
Number one, do it.

00:42:04.260 --> 00:42:07.840
Our users will know fear and cower before our software.

00:42:08.210 --> 00:42:11.300
Ship it, ship it, and let them flee like the dogs they are.

00:42:13.020 --> 00:42:13.440
Exactly.

00:42:13.880 --> 00:42:14.320
This is good.

00:42:15.180 --> 00:42:19.760
This is a reminder also to everybody that if you think we probably have already heard it,

00:42:20.000 --> 00:42:21.240
there's a decent chance we haven't.

00:42:21.440 --> 00:42:22.500
So send it to us anyway.

00:42:22.950 --> 00:42:23.780
We don't mind repeats.

00:42:24.720 --> 00:42:26.640
So if you find something funny.

00:42:26.640 --> 00:42:27.100
People give us a

00:42:27.100 --> 00:42:27.860
lot of credit, Brian.

00:42:28.020 --> 00:42:30.300
Maybe too much, more than we deserve sometimes.

00:42:30.960 --> 00:42:31.120
Yeah.

00:42:32.300 --> 00:42:32.540
Anyway.

00:42:34.080 --> 00:42:36.780
Well, thanks again for jumping on the

00:42:36.780 --> 00:42:37.720
call

00:42:37.720 --> 00:42:38.180
with us.

00:42:39.500 --> 00:42:39.940
And

00:42:39.940 --> 00:42:41.760
enjoy doing another episode.

00:42:41.970 --> 00:42:42.680
And thank you, everybody

00:42:42.680 --> 00:42:44.060
that

00:42:44.060 --> 00:42:46.240
listens and everybody that shares this with other people.

00:42:46.420 --> 00:42:49.040
We like to grow our community.

00:42:50.860 --> 00:42:52.000
Yeah, very much appreciate everyone.

00:42:52.250 --> 00:42:52.600
See y'all later.

00:42:53.010 --> 00:42:53.300
Bye, Brian.

00:42:53.700 --> 00:42:53.880
Bye.

