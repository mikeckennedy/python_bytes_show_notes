WEBVTT

00:00:02.200 --> 00:00:07.640
Hey, Michael. Hey, everybody. I'm excited for another Python Bytes, so let's kick it off.

00:00:08.399 --> 00:00:09.240
Let's do it.

00:00:11.040 --> 00:00:15.420
Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:15.920 --> 00:00:23.240
This is episode 445. I can't believe that. Recorded August 18th, 2025. I am Brian Okken.

00:00:23.660 --> 00:00:24.640
And I'm Michael Kennedy.

00:00:25.520 --> 00:00:30.320
This episode is sponsored by Sentry, Python error and performance monitoring.

00:00:30.660 --> 00:00:31.260
Thank you, Sentry.

00:00:32.160 --> 00:00:37.500
And if you'd like to get a hold of us, maybe give us some topic ideas that you'd like us to cover on the show, that would be awesome.

00:00:37.940 --> 00:00:40.460
Or just comment on something or just say hi.

00:00:40.960 --> 00:00:46.040
You can reach us on both BlueSky and Mastodon, and the links are in the show notes.

00:00:46.940 --> 00:01:06.380
And if you'd like to join us live for the live performance, pythonbytes.fm/live, or you can also use that link to find out when we're going to record next or just find out where the YouTube page is so that you can subscribe and watch them later.

00:01:06.740 --> 00:01:07.140
That'd be great.

00:01:07.860 --> 00:01:13.300
And finally, we'd like to get a hold of you later just to sell you stuff.

00:01:13.390 --> 00:01:15.700
No, just to give you links.

00:01:15.920 --> 00:01:17.780
So we cover a lot of stuff in the show.

00:01:18.260 --> 00:01:19.640
You don't have to keep track of the links.

00:01:19.760 --> 00:01:20.460
They're in the show notes.

00:01:20.560 --> 00:01:28.220
But they're also the links plus extra information and things you might need to know if you are new to Python or new to a topic.

00:01:29.220 --> 00:01:30.600
Those are all in the email.

00:01:31.000 --> 00:01:36.820
So you can go to pythonbytes.fm and sign up for the newsletter, and we'll send that to you.

00:01:38.640 --> 00:01:40.440
And that's all the intro stuff.

00:01:40.700 --> 00:01:44.320
So, Michael, we've got some exciting news for number one.

00:01:44.320 --> 00:01:45.800
We have very exciting news.

00:01:45.940 --> 00:01:50.620
And as part of this performance, Brian, I would like to recite The Raven by Edgar Allen.

00:01:50.780 --> 00:01:51.820
Oh, no, wait, this is not a performance.

00:01:52.400 --> 00:01:52.920
And I don't want to do that.

00:01:53.280 --> 00:01:59.220
I want to talk about Astral, actually, because this is a really interesting announcement from them.

00:02:00.440 --> 00:02:02.480
Charlie and team are knocking stuff out of the park.

00:02:02.660 --> 00:02:09.720
They're delivering big time on the tooling for Python packaging, managing Python, right?

00:02:09.840 --> 00:02:13.960
All the layer that you build upon when you're writing applications, right?

00:02:14.680 --> 00:02:18.340
So first they came out with Ruff for formatting and fixing issues.

00:02:19.330 --> 00:02:27.980
Then they came out with uv, and then they upgraded uv to have its project management and Python management, not just alternate pip installs and so on.

00:02:29.740 --> 00:02:35.180
And along all of that time, people have been saying, well, this is so amazing.

00:02:35.420 --> 00:02:39.920
It's so fast, and it does all of the things instead of piecing together tools.

00:02:40.520 --> 00:02:43.340
But what if they rug pull us and we slip and we hit our head?

00:02:43.700 --> 00:02:45.160
What if they go and do something else?

00:02:45.180 --> 00:02:50.420
What if they start saying it's a half a cent per pip install or whatever, you know?

00:02:50.840 --> 00:02:51.480
What are we going to do?

00:02:52.480 --> 00:02:58.780
And Charlie has said that he's not planning on monetizing those types of things.

00:02:59.720 --> 00:03:01.420
Instead, he wants to build on top of them.

00:03:01.880 --> 00:03:06.780
So with this announcement, we get our first look at what that might be.

00:03:08.120 --> 00:03:11.280
So it's interesting in and of itself, but I think it's also interesting in, like,

00:03:11.720 --> 00:03:17.060
This could be the thing that supports the stuff that people are really starting to depend upon.

00:03:18.080 --> 00:03:21.180
And it's something called PYX, PyX.

00:03:21.640 --> 00:03:25.900
I'm going to be interviewing Charlie on Talk Python in a couple of days.

00:03:26.580 --> 00:03:28.200
By a couple of days, I think it's next week.

00:03:29.140 --> 00:03:32.540
But pretty soon, I put a link to the event on the show notes.

00:03:32.660 --> 00:03:33.340
People can check that out.

00:03:33.440 --> 00:03:34.520
So we'll get the pronunciation.

00:03:34.710 --> 00:03:37.980
I'm going to say PYX for now, like T-Y and U-V and so on.

00:03:39.120 --> 00:03:40.680
Unlike Ruff, not R-U-F-F.

00:03:41.380 --> 00:03:45.720
So PYX, a Python native Python registry now in beta.

00:03:47.040 --> 00:03:49.240
So here's the deal with PYX.

00:03:49.690 --> 00:03:58.400
Think of this as an alternate PyPI, but not as a source of packages.

00:03:59.240 --> 00:05:03.600
Not where, like when I publish something, I also have to publish to PYX, but more of a front end that adds a bunch of features or an intermediate layer, middleware to PyPI itself. And at the moment, the plan is for this to be a full-on paid service for people that really need things like, I really need my project to 100% be able to build some thing that's only available as a source distribution. How often have you pip installed something and most things just come down as a wheel and they come flying in but every now and then it'll stop and say building something for 10 seconds the very first time before it gets cached then it goes yeah or longer yeah definitely potentially longer like i don't use it anymore we've talked about why is micro whiskey because they said please stop using our project we're not going to support it let's go find something else and we talked about that but But that thing took forever to build.

00:05:04.500 --> 00:05:15.540
But also, if you're doing a GPU-aware types of things, you're doing a lot of stuff with PyTorch or machine learning more broadly, a lot of those things are huge.

00:05:16.320 --> 00:05:20.100
And having the right platform built version is really, really tricky.

00:05:21.860 --> 00:05:28.340
So the idea is that uv and PYX are going to go together hand in glove.

00:05:30.720 --> 00:05:35.420
So uv can work even better by having complete control over the back end as well.

00:05:35.960 --> 00:05:36.040
Right?

00:05:36.620 --> 00:05:37.620
They say there are some limitations

00:05:37.840 --> 00:05:46.280
that uv was able to solve, but not all of them because they don't control pypi.org and its API and how things get built.

00:05:47.220 --> 00:05:54.920
So the idea is making it easier to install PyTorch or CUDA-based libraries, that kind of thing.

00:05:56.780 --> 00:05:57.980
It also solves the problems.

00:05:58.200 --> 00:06:01.720
Why is everyone rebuilding the same packages over and over on their machine?

00:06:01.830 --> 00:06:03.960
And what if those build tools are no longer the same?

00:06:04.860 --> 00:06:06.480
Why did setup tools break our recent release?

00:06:08.180 --> 00:06:10.420
How do we authenticate against our internal registry?

00:06:10.600 --> 00:06:15.640
The other thing this is going to do is it's going to be a first class private registry.

00:06:16.230 --> 00:06:27.060
So if you have a team, you're like, let's publish our data access layer, not to the world, but to our other people who are working on the projects, to our other applications, and so on.

00:06:28.320 --> 00:06:29.440
So pretty exciting.

00:06:29.630 --> 00:06:31.520
I think there's a lot of stuff going on here.

00:06:31.640 --> 00:06:34.640
They're in beta, you can join the waitlist, you can get in touch with them.

00:06:36.240 --> 00:06:42.500
Says, "Beyond the product itself, PYX is also an instantiation of our strategy." And this is what I opened with.

00:06:43.800 --> 00:06:48.600
Our tools, uv, Ruff, ty, et cetera, remain free, open source, and permissively licensed forever.

00:06:49.560 --> 00:06:56.600
And this project is pretty interesting because it's a glimpse into how they're planning to make that possible.

00:06:57.760 --> 00:07:00.300
Yeah, I'd be really curious to watch this.

00:07:00.540 --> 00:07:01.820
I'm excited for a lot of reasons.

00:07:02.060 --> 00:07:04.860
So let's say this is only a commercial offering.

00:07:06.100 --> 00:07:07.280
It's a corporate sort of thing.

00:07:07.280 --> 00:07:08.200
You have to pay to get it.

00:07:08.740 --> 00:07:41.460
I'd be still okay with that, because there's alternatives out there, like JFrog Artifactory is around, and there's other products available to set up to mirror PyPI and do other things like as things come in, do like a security scan, your own security scans and things like that. And so a mirror front end, but also something that you can publish to internal, publish internal things too. Those are really cool. They're a little hard to set up though.

00:07:41.660 --> 00:08:07.160
And I think I trust Astral to make this fairly easy for people. It also would be cool. There's, If you want to test things out locally, there's smaller businesses and smaller teams that aren't large corporations or even individuals that might have a need to try out what a repository might look like when you're doing those sorts of things or you're developing on an airplane or something, a local repo.

00:08:07.820 --> 00:08:13.940
I don't know if they're going to get down to the point where it's a local person, like a free thing that you can just run on your own.

00:08:15.360 --> 00:08:16.680
So it'll be interesting to watch.

00:08:16.840 --> 00:08:25.440
I guess I'm okay with either if they want to keep it like paid only or something that, you know, Small Fry can use as well.

00:08:25.660 --> 00:08:26.760
But I'm excited to watch.

00:08:27.910 --> 00:08:28.500
I am as well.

00:08:29.080 --> 00:08:33.659
Yeah, there's, I think somewhere Charlie said, maybe possibly there's a free version.

00:08:33.770 --> 00:08:36.200
But right now, the plan is to be a paid project.

00:08:37.760 --> 00:08:37.919
Yeah.

00:08:39.840 --> 00:08:39.900
Yeah.

00:08:40.000 --> 00:08:40.219
All right.

00:08:40.320 --> 00:08:43.380
That's all I got to say about that for now until I talk to Charlie and learn a whole bunch more.

00:08:45.040 --> 00:08:45.200
Okay.

00:08:46.120 --> 00:08:46.980
What do I have?

00:08:49.740 --> 00:08:51.420
Oh, let me jump over.

00:08:52.320 --> 00:08:53.700
I have my topics out of order.

00:08:53.860 --> 00:08:55.360
That's why I'm hesitating right now.

00:08:56.520 --> 00:09:01.060
I am looking at, what do I want to talk about?

00:09:01.200 --> 00:09:02.720
I want to talk about Litestar a little bit.

00:09:03.240 --> 00:09:08.660
There is an article called, where did I missed it.

00:09:08.840 --> 00:09:09.380
Oh, here it is.

00:09:10.220 --> 00:09:10.320
Sorry.

00:09:10.800 --> 00:09:14.480
James Bennett has an article called Litestar is worth a look.

00:09:15.120 --> 00:09:21.620
And I was looking through our past history a little bit, and it looks like we've talked about Litestar, but it's been a while.

00:09:21.800 --> 00:09:30.040
So you brought up, this was earlier this year, I think, talking about rewriting court, or rewriting Talk Python in court.

00:09:31.540 --> 00:09:34.020
And Litestar is one of the things you looked at, right?

00:09:34.220 --> 00:09:37.440
So that was episode, that was back, oh, that was last year, November of 2024.

00:09:38.300 --> 00:09:39.140
Tia's client, hello.

00:09:40.460 --> 00:09:41.120
That was a good one.

00:09:42.060 --> 00:09:43.240
So we haven't talked about it a bit.

00:09:43.730 --> 00:09:44.920
So I was taking a look at it.

00:09:45.240 --> 00:09:46.740
looking at Litestar.

00:09:46.830 --> 00:09:48.060
I had never played with this.

00:09:48.210 --> 00:09:57.280
And there is some interesting history around that it used to be Starlette or something like that.

00:09:57.480 --> 00:10:00.540
Yeah, I believe it was not Starlet, Starlette.

00:10:00.980 --> 00:10:02.800
And there was confusion, whatever.

00:10:03.580 --> 00:10:05.680
Anyway, so this is an interesting...

00:10:06.280 --> 00:10:09.220
James Bennett brought up Litestar is worth a look.

00:10:09.840 --> 00:10:15.880
And he brought up, like a lot of people do, If I'm going to do an API, why not FastAPI?

00:10:16.020 --> 00:10:22.740
I mean, that seems like the obvious choice now for setting up an API or something.

00:10:23.540 --> 00:10:26.340
And or a lightweight web framework.

00:10:26.960 --> 00:10:27.680
So why not?

00:10:28.860 --> 00:10:31.420
There are a few reasons that he brought up.

00:10:31.660 --> 00:10:35.540
So one of the things was in scaling.

00:10:36.020 --> 00:10:40.760
And not scaling in traffic, but scaling in, I want more than one file.

00:10:41.000 --> 00:10:43.540
I want my application in a bunch of files.

00:10:44.090 --> 00:10:53.040
And there was some frustration that he talked about with trying to figure out how to do that within FastAPI because there's the app dot.

00:10:53.270 --> 00:10:59.280
And how do you have multiple routings in different files if you have one app?

00:10:59.420 --> 00:11:08.780
I don't know if this is easy or not, but he had some frustrations that it took him 40 pages into the documentation to the user guide to find that.

00:11:09.280 --> 00:11:15.620
However, it's kind of built in with Litestar is that you don't, it's not a top level app.

00:11:16.810 --> 00:11:22.360
You can set it up, I guess, into multiple files easier is one thing.

00:11:23.940 --> 00:11:27.580
The other thing was that FastAPI is tied to Pydantic.

00:11:29.420 --> 00:11:35.420
And I don't know if you can break that or not, but Litestar is not tied directly to Pydantic.

00:11:35.530 --> 00:11:36.840
And you can use SQLAlchemy.

00:11:37.640 --> 00:11:39.880
Yeah, it can use Pydantic, but it also has other options.

00:11:41.240 --> 00:11:44.940
Yeah, he brings up maybe adders.

00:11:45.090 --> 00:11:51.680
You could use adders for validation, which some people forget that that's one of the cool things about adders is it can validate things.

00:11:52.839 --> 00:11:56.200
Or SQLAlchemy even can do some of that.

00:11:58.460 --> 00:12:00.080
Or a little combination of both, I guess.

00:12:00.580 --> 00:12:02.500
Anyway, so that's interesting.

00:12:02.930 --> 00:12:07.540
If you'd rather use SQLAlchemy for that or adders, why not?

00:12:08.400 --> 00:12:12.680
But the third option, what is the third thing he brought up?

00:12:13.120 --> 00:12:14.880
Is, I guess, just the architecture.

00:12:16.820 --> 00:12:17.680
Oh, I had another note.

00:12:19.760 --> 00:12:23.900
Anyway, it's interesting that there's another option out there.

00:12:24.160 --> 00:12:26.860
So do you know more about Litestar?

00:12:27.240 --> 00:12:29.420
I interviewed the guys from Litestar over on Talk Python,

00:12:29.510 --> 00:12:31.940
so I know a little bit more, but not a ton more.

00:12:31.980 --> 00:12:53.060
I would say one thing, kind of a mental model I have about Litestar, and I'm not sure how accurate this is, but it's mine, so I get to have it, is FastAPI is kind of Flask-esque in that it gives you enough to have a bunch of cool building blocks, but then you pick and you build the other pieces and so on.

00:12:54.419 --> 00:13:00.820
Whereas Litestar seems to me a little bit more of the Django philosophy where it comes with a bunch of batteries included.

00:13:01.080 --> 00:13:02.700
See all those little boxes down there?

00:13:03.340 --> 00:13:05.180
Look at all the different pieces.

00:13:06.140 --> 00:13:07.680
It's got middleware.

00:13:07.840 --> 00:13:08.800
It's got data stores.

00:13:09.100 --> 00:13:12.740
It's got ORM integration, caching.

00:13:13.240 --> 00:13:19.520
A lot of those things don't come off in that sort of stuff.

00:13:19.680 --> 00:13:23.200
Don't come with FastAPI, which is both a good and a bad thing.

00:13:24.460 --> 00:13:28.280
If it comes with it, but it's not what you want, then it's just a hassle to battle against all the time.

00:13:29.100 --> 00:13:38.180
But that's how I sort of perceive Litestar is it's like FastAPI with more options and more stuff included.

00:13:39.660 --> 00:13:39.920
I don't know.

00:13:41.100 --> 00:13:41.680
It is interesting.

00:13:41.830 --> 00:13:42.680
Yeah, it's definitely interesting.

00:13:44.100 --> 00:13:44.240
Yeah.

00:13:45.600 --> 00:13:45.880
All right.

00:13:46.080 --> 00:13:50.320
Also interesting is our sponsor.

00:13:51.100 --> 00:13:53.840
Sentry is back, and I want to tell you about them.

00:13:57.260 --> 00:14:00.620
So this episode is brought to you by Sentry, of course.

00:14:01.160 --> 00:14:04.120
It's been incredibly valuable for tracking down errors in our web apps.

00:14:04.280 --> 00:14:16.500
Other code that we run, that's web apps, APIs, even the Talk Python mobile apps, use it and send in errors when something goes wrong for somebody in some far-flung place in the world.

00:14:17.580 --> 00:14:24.340
And I've told you the story more than once about how at Talk Python, I learned one user was encountering a bug through Sentry.

00:14:24.480 --> 00:14:27.200
I fixed the bug and I let them know before they contacted me.

00:14:27.200 --> 00:14:28.560
It was pretty wild, right?

00:14:29.460 --> 00:14:29.640
Yeah.

00:14:30.160 --> 00:14:31.040
So how does this work?

00:14:31.860 --> 00:14:44.820
So I'll walk you through a few simple steps on how you might add error monitoring and distributed tracing through some kind of e-commerce app that's got a JavaScript front end, Flask back end.

00:14:46.020 --> 00:15:39.820
So if it's Flask on the front, React on the front end, you want to make sure there's no errors during some checkout process for an e-commerce page. For me, anytime money and payments are involved, I always get a little extra nervous writing that code. So here's what you do. You enable distributed tracing and error monitoring in both your Flask backend and your React frontend. Then you want to add enough context to that frontend and backend action so they can be correlated. And to do that, you enrich the spans, a sentry concept, with business context. So in your React checkout, you wrap the submit handler in a start span and add information to that. Then you want to see the requests. You build a real-time Sentry dashboard. You spin up one using span metrics to track key attributes, cart size, checkout duration, and so on, giving you a single place to see both performance and error data.

00:15:41.360 --> 00:16:07.340
That's it. When an error happens, you open up the entry on the error on Sentry and you get end-to-end requests and error tracebacks and so on. They also have a new product called Seer, which is C-E-E-R, is a thing that looks at your app and uses LLMs to understand what's going wrong and possibly even suggesting, you know, here's actually what's causing that bug, and it could even potentially do a PR and help you fix it, things like that.

00:16:07.480 --> 00:16:07.820
Really cool.

00:16:08.020 --> 00:16:11.900
So it's not just looking at the error, but even, you know, going further than that.

00:16:12.940 --> 00:16:20.480
So if your apps and your customers matter to you, you'll definitely want to set up Sentry like I have over at Talk Python and Python Bytes and so on.

00:16:20.700 --> 00:16:27.000
So visit pythonbytes.fm/sentry and use the code pythonbytes, all caps, just in a word.

00:16:27.160 --> 00:16:28.880
That's pythonbytes.fm/sentry.

00:16:30.080 --> 00:16:31.420
Use the code pythonbytes.

00:16:32.140 --> 00:16:33.940
The link is in your podcast player show notes.

00:16:34.140 --> 00:16:35.480
Thank you to Sentry for supporting the show.

00:16:40.800 --> 00:16:41.000
Awesome.

00:16:41.000 --> 00:16:41.360
What are you, Brian?

00:16:41.760 --> 00:16:41.820
Yeah.

00:16:43.820 --> 00:16:44.680
Sleeping on the job.

00:16:44.940 --> 00:16:45.040
Sorry.

00:16:47.780 --> 00:16:51.340
So for the next topic, I want to follow up from last week.

00:16:51.640 --> 00:16:54.800
So just last week, I think it was last week.

00:16:55.160 --> 00:16:57.920
Yeah, 444, BeGonePython of Yore.

00:16:58.400 --> 00:16:59.220
Two-thirds of a beast.

00:17:00.700 --> 00:17:01.080
Two-thirds.

00:17:02.920 --> 00:17:04.640
That took me too long to figure that out.

00:17:05.600 --> 00:17:10.819
So one of the things we talked about was an article called Stop Using Django's Squash Migrations.

00:17:11.560 --> 00:17:13.060
And we had some feedback.

00:17:13.339 --> 00:17:23.720
So from Bruno Alla said, Hey, just to follow up and a plug for one of my own projects, there is a project called Django Remake Migrations.

00:17:24.140 --> 00:17:25.880
So that's really kind of what I want to talk about.

00:17:26.939 --> 00:17:27.800
This looks pretty cool.

00:17:28.100 --> 00:17:30.000
So it sort of does a lot of the stuff.

00:17:30.300 --> 00:17:35.380
But one of the things that I like isn't just there's a tool that you can use to do a lot of this work for you.

00:17:35.440 --> 00:17:36.940
You don't have to follow the step by step.

00:17:37.400 --> 00:17:40.360
However, it's cool that it talked about the problem.

00:17:40.600 --> 00:17:44.360
So it says a Django admin command.

00:17:44.540 --> 00:17:47.380
There's a Django admin command to recreate all migrations in a project.

00:17:49.980 --> 00:17:53.660
This new one is like squash migrations, but it's on steroids.

00:17:54.090 --> 00:18:07.960
So it says the built-in squash migrations command is great, but it only works on a single app at a time, which means that you need to run it for each app in your project and on a project with enough cross-app dependencies that can be tricky.

00:18:08.700 --> 00:18:09.620
Yeah, that sounds tricky.

00:18:10.280 --> 00:18:47.980
So this command aims to solve this problem by recreating all the migration files in the whole project from scratch and mark them as applied by using the replaces attribute i don't know what that does but there's some caveats like uh all migrations are marked as one as replaced once um so um i i'm glad i'm using git when i'm using any of this stuff so i could try it and if it doesn't work roll it back but um this looks pretty cool so i i wanted to I'm just shout out to people to maybe try this as well.

00:18:47.980 --> 00:18:50.560
If you want to try to remake your migrations easier.

00:18:51.920 --> 00:18:58.980
While I was looking at this, I was like scrolling down and it says the package was created with the copier template.

00:18:59.240 --> 00:19:05.380
And that rung a bell and it looked down and this was a while ago.

00:19:05.540 --> 00:19:12.280
So Michael brought up on this show, talked about copier, But that was back in 2021.

00:19:13.060 --> 00:19:17.640
So I'm going to go ahead and do a shout out to Copier again because it looks pretty cool.

00:19:19.920 --> 00:19:27.380
Copier is something like Cookie Cutter, but it's a CLI app for rendering project templates.

00:19:28.220 --> 00:19:29.760
But it looks kind of fun.

00:19:32.160 --> 00:19:33.140
So I'm going to check this out.

00:19:33.140 --> 00:19:37.080
I have some sort of project template needs coming up.

00:19:37.600 --> 00:19:39.060
And so I might take a look at this.

00:19:39.200 --> 00:19:40.280
They have a comparison too.

00:19:40.560 --> 00:19:42.440
So you're like, this is kind of like cookie cutter.

00:19:42.660 --> 00:19:44.200
Yeah, they know it's kind of like cookie cutter.

00:19:44.740 --> 00:19:46.200
There's some differences here.

00:19:46.340 --> 00:19:47.720
They've got a table in the documentation.

00:19:49.680 --> 00:19:56.060
One of the things I kind of like is that the configuration file is in YAML format instead of JSON for cookie cutter.

00:19:56.940 --> 00:20:03.700
I'm not really a fan of either, but if I got to handwrite stuff, I'd probably rather handwrite YAML files.

00:20:04.680 --> 00:20:07.320
So anyway, interesting to take a look at.

00:20:07.840 --> 00:20:07.960
Nice.

00:20:08.160 --> 00:20:22.420
I think the biggest difference, other than I think being a little more maintained these days, is that it has-- like with Cookie Cutter, you run a template, it generates a thing, and then you make changes to it, and that's it.

00:20:23.960 --> 00:20:34.560
With Copier, you can apply-- if there's a new version of the template, you can theoretically, at least-- it has the option to try to apply a migration from the old version to the new version.

00:20:34.900 --> 00:20:36.420
Oh, that's cool.

00:20:37.080 --> 00:20:38.600
Yeah, I think that's its biggest selling point.

00:20:39.160 --> 00:20:40.460
Template updates, yeah.

00:20:41.660 --> 00:20:42.700
That's actually awesome.

00:20:43.300 --> 00:20:43.480
Yeah.

00:20:43.750 --> 00:20:45.760
And it looks like it's composable, too.

00:20:45.850 --> 00:20:54.040
So you can, like, if you might have different, like, say, for instance, in a Django, you might have several applications that you would add.

00:20:54.440 --> 00:21:00.320
You could use multiple copiers to pull different apps into one application.

00:21:01.160 --> 00:21:03.600
Right, add a CRM action or something, yeah.

00:21:04.060 --> 00:21:04.240
Yeah.

00:21:04.850 --> 00:21:05.540
So, interesting.

00:21:06.520 --> 00:21:24.460
Very interesting indeed. Cool. All right. On to the next one. This is kind of like the Django show. And one more Django shout out on top of this, by the way, I'm going to be doing a happy birthday, happy 20th birthday Django panel with a bunch of the creators in an hour and a half, two hours.

00:21:24.530 --> 00:21:24.880
Oh, wow.

00:21:25.380 --> 00:21:35.600
Now, if you're listening to the audio version, there's a good chance that's already over. However, you can still either check out the live stream or in a few weeks, check out the Talk Python episode on it.

00:21:35.680 --> 00:21:39.620
So keeping with that theme, Django Kronos.

00:21:39.920 --> 00:21:42.580
This one's a quick little topic, but it's really cool.

00:21:43.440 --> 00:21:46.580
So I want to know how fast my page is loading.

00:21:47.260 --> 00:21:54.780
And I know there's the Django toolbar and all that, but here's a nice way to add more information about performance right into your browser.

00:21:55.000 --> 00:21:59.660
So it's Django Middleware that shows you how fast your pages load right in your browser.

00:22:01.560 --> 00:22:04.560
You simply add it as the first and last thing.

00:22:06.020 --> 00:22:10.300
The quick start says, add it as your last installed app.

00:22:11.140 --> 00:22:14.980
And it has a start and an end that has to be the first and last middleware.

00:22:15.340 --> 00:22:19.660
So it gets the full picture of all the middleware actions and all that kind of thing.

00:22:21.680 --> 00:22:28.760
I also would recommend saying probably show in production false unless you really, really want to show in production.

00:22:29.940 --> 00:22:30.580
something like that.

00:22:32.340 --> 00:22:36.040
But the idea is it just shows you how long did your middleware take to run?

00:22:36.300 --> 00:22:37.860
How long did your view take to run?

00:22:38.040 --> 00:22:43.700
How long did your SQL queries and commands take as part of the middleware, as part of the view?

00:22:44.300 --> 00:22:45.940
And then how long did it take total?

00:22:46.640 --> 00:22:53.020
And how many queries-- if you see the little screenshots of 7q, 5q, 12q total, I'm guessing those are the number of queries.

00:22:53.860 --> 00:23:03.460
One of the really big problems when you're working with ORMs, like Django has, but many, is they have lazy evaluation for relationships.

00:23:05.560 --> 00:23:13.780
That can be tremendously slow because the programming model doesn't change if you do an eager query and join two things or you just use it.

00:23:14.060 --> 00:23:17.480
It's really just about how the query was structured, not how you program against it.

00:23:18.240 --> 00:23:21.660
So you might have, hey, I got 100 things back from the list as one query.

00:23:21.770 --> 00:23:27.580
And then I loop over it and I interact with a field where each one of those is doing another query, 100 more.

00:23:27.860 --> 00:23:31.900
So 101 queries, hence the-- it's typically called the n plus 1.

00:23:32.040 --> 00:23:32.980
So you would see something like that.

00:23:33.020 --> 00:23:35.760
You'd be like, whoa, the view is doing 107 queries.

00:23:35.850 --> 00:23:36.780
I think I got two things.

00:23:36.960 --> 00:23:37.300
What's happening?

00:23:37.740 --> 00:23:40.660
Well, n plus 1, some version there, probably.

00:23:41.700 --> 00:23:43.720
Anyway, if this is interesting to you,

00:23:44.140 --> 00:23:47.100
it's not super big in terms of popularity,

00:23:47.340 --> 00:23:48.980
but it's also pretty straightforward and simple.

00:23:49.130 --> 00:23:50.580
And yeah, people might like it.

00:23:51.020 --> 00:23:53.280
Remind me, where does the information pop up?

00:23:53.360 --> 00:23:56.780
Is it in the browser when you're developing or something?

00:23:56.900 --> 00:23:59.660
I think it's at the bottom of the page.

00:23:59.680 --> 00:24:03.680
I haven't installed it and tried it, but it's somewhere in the page as part of it.

00:24:03.760 --> 00:24:03.920
Okay.

00:24:04.920 --> 00:24:05.060
Yeah.

00:24:06.080 --> 00:24:14.280
So basically, I believe what it does is actually gives your template, your Django template, these pieces of information, and you show them how you want.

00:24:14.440 --> 00:24:19.560
So it gives you middleware CPU time, SQL time, view, count total time.

00:24:19.760 --> 00:24:21.660
Basically, the stuff that was on the screen.

00:24:21.860 --> 00:24:23.260
So you can put it in.

00:24:23.940 --> 00:24:28.920
It provides it as data values, and then you would put it into your view as you see fit.

00:24:29.240 --> 00:24:30.300
I believe that's how it works.

00:24:30.800 --> 00:24:31.100
Okay.

00:24:32.060 --> 00:24:32.120
Cool.

00:24:33.100 --> 00:24:33.480
That's neat.

00:24:36.460 --> 00:24:36.640
Indeed.

00:24:36.870 --> 00:24:39.360
Well, those are our topics.

00:24:40.300 --> 00:24:43.240
I have a little bit of an extra.

00:24:43.940 --> 00:24:44.400
Go for it.

00:24:45.120 --> 00:24:45.480
All right.

00:24:47.840 --> 00:24:49.360
I'm going to go back in time a little bit.

00:24:49.880 --> 00:24:55.520
And so Test and Code is a podcast I started in August of 2015.

00:24:56.580 --> 00:25:53.660
so it's August so it's now it's August 20, it's almost two days in two days it'll be like 10 years I think that's enough I'm looking at like episode 2 episode 1 was terrible so I deleted it a long time ago so episode 2 is pytest versus UnitTest versus Nose and I didn't even capitalize pytest correctly that's bad and Nose is just if I would redo this it would just say don't you don't just pick by test you it's there's one option really anyway uh unit test is fine also but let's get real don't do don't use nose so um what is this or why am i bringing this up well i just released on friday uh episode 238 so long and thanks for all the fish where i announced that i am no longer doing testing code so closing the book on that chapter that's i listened to that episode and

00:25:54.560 --> 00:26:04.160
yeah I think what I'll say is congratulations 10 years and 238 episodes is quite a run and those things will be around people can listen to them

00:26:04.340 --> 00:26:17.060
and enjoy them yeah so that's another thing I'm seeing I'm not sure how long I'll leave it live because podcast hosting is something you have to pay for so I am

00:26:17.360 --> 00:26:25.180
you know what I say you take it write a little web scraper and just generate a static site and just leave it there.

00:26:26.920 --> 00:26:28.860
That's something I might be able to do.

00:26:28.860 --> 00:26:29.020
I'm giving you work.

00:26:29.050 --> 00:26:29.420
How about that?

00:26:31.040 --> 00:26:32.440
Actually, so that, yeah.

00:26:32.870 --> 00:26:35.160
But the point was to remove work from my plate.

00:26:35.360 --> 00:26:36.200
But, you know, we'll see.

00:26:37.380 --> 00:26:37.600
All right.

00:26:38.120 --> 00:26:39.240
Leave that up in the air.

00:26:40.080 --> 00:26:40.400
All right.

00:26:40.820 --> 00:26:41.700
What you got for us?

00:26:41.710 --> 00:26:42.280
Do you have any extras?

00:26:43.480 --> 00:26:44.840
Yes, I have some extras.

00:26:46.470 --> 00:26:47.720
Let me get it ready.

00:26:48.440 --> 00:26:53.120
So we have Python 3.13.6.

00:26:54.150 --> 00:26:54.800
Big question.

00:26:55.760 --> 00:26:59.820
Will this be the final 3.13 before 3.14?

00:27:00.680 --> 00:27:02.700
Probably not, but it's plausible.

00:27:04.220 --> 00:27:08.780
We're talking October, which is sadly not that far away.

00:27:09.340 --> 00:27:10.160
Not ready for rain.

00:27:10.490 --> 00:27:11.260
Not ready for it.

00:27:12.740 --> 00:27:17.060
Anyway, 3.13.6 is out, and there's actually a lot of changes.

00:27:17.380 --> 00:27:23.920
If you flip through the library, I don't know how many pages that is, but we're talking a lot of pages.

00:27:25.320 --> 00:27:31.120
So there's actually a ton of changes here that you might want to check out, like little security fixes and other stuff.

00:27:32.060 --> 00:27:33.080
Does it have that zip?

00:27:33.420 --> 00:27:45.240
There's like a-- there was some kind of zip issue where you could trick it into doing-- I don't think that was in Python.

00:27:45.580 --> 00:27:49.540
I think that was in pip and uv also had it.

00:27:49.640 --> 00:27:54.120
So update your uv, by the way, folks, as well, which is uv self update, easy enough.

00:27:54.920 --> 00:27:55.960
Anyway, this is out.

00:27:56.530 --> 00:28:03.320
Because of our sweet Docker setup, I just did a rebuild on Python Bytes.fm and it said uv install Python.

00:28:03.940 --> 00:28:07.620
And we have 3.13.6 powering everything all of a sudden.

00:28:08.500 --> 00:28:08.740
Very nice.

00:28:09.200 --> 00:28:10.140
Anyway, quick and easy.

00:28:11.320 --> 00:28:12.060
Stay on top of that.

00:28:12.860 --> 00:28:14.420
The final 13.

00:28:15.240 --> 00:28:27.760
the final countdown. I was just listening to that song. I have this really cool script, and I think this is kind of, it's kind of interesting, and please don't write me and tell me other things are out there that do this, because I know there are some that sort of do this.

00:28:28.640 --> 00:28:48.800
But it's interesting in and of itself, but it's also interesting as we get better and better LLM and agentic coding tools to just say, instead of just like depending on something that has a hundred features, and I'm going to take one or two of them and then deal with that, I just want this one thing. Could I just ask to have that one thing created? The answer is probably yes.

00:28:49.520 --> 00:29:41.460
So I wanted something that would auto activate Python virtual environments built with uv, named like I like, exactly as I navigate around my shell. So I asked Claude, I think, something like that. And it said, sure, here's a cool little bash script that as you enter a folder that either itself has a virtual environment or somewhere up in the higher hierarchy of it has a virtual environment, it'll just activate it. And if you leave that portion of the directory tree, it'll go back and unactivate it. And I know that dir env does some things along these lines. But like I said, I just like, I think it's really cool. You can just say, really, all that needs to be is like a 35 lines of bash and then it never changes. So I put up, I decided someone was like, oh, that's really cool.

00:29:41.580 --> 00:29:42.040
Is that happening?

00:29:42.140 --> 00:29:44.580
I'm like, I'll just put that up as a gist, and people can check it out.

00:29:45.220 --> 00:29:46.060
I like it.

00:29:46.340 --> 00:29:51.680
Also, something small that you can change if it's not quite what you want, change it.

00:29:51.780 --> 00:29:51.980
Exactly.

00:29:52.420 --> 00:29:58.060
I'm not looking for something that solves every problem for every programming language in the most advanced.

00:29:58.220 --> 00:29:59.800
I just want this one little feature.

00:30:00.370 --> 00:30:04.900
And I don't really, to be honest, I don't know enough Bash to do this really well.

00:30:05.120 --> 00:30:06.000
But guess what?

00:30:06.330 --> 00:30:08.620
Either chat or cloud sure knows it, and it took care of it.

00:30:09.160 --> 00:30:10.520
So I'm really enjoying that.

00:30:11.180 --> 00:30:19.640
Yeah, I'm totally going to use this, although I'm going to change VENV to.VENV because Brett Cannon convinced me that the dot is good.

00:30:20.340 --> 00:30:24.000
I've got tons of respect for Brett, but not my thing.

00:30:25.100 --> 00:30:32.520
I want to be able to look either via LS or in the macOS Finder and see that it has a virtual environment.

00:30:33.900 --> 00:30:35.920
And you can't if it's a dot, right?

00:30:37.320 --> 00:30:37.900
Fair enough.

00:30:37.950 --> 00:30:38.860
Anyway, fair enough.

00:30:39.000 --> 00:30:42.580
I want to just look at it and go, yep, it absolutely has a virtual environment, right?

00:30:42.720 --> 00:30:45.260
Because that tells me what my next action needs to be.

00:30:46.380 --> 00:30:46.660
All right.

00:30:46.840 --> 00:30:50.820
I just spent a long time this summer writing up this huge, long post.

00:30:50.860 --> 00:30:54.940
I don't know if it'll actually tell us how many minutes of reading time it is, if I ask.

00:30:56.059 --> 00:31:00.040
24 to 34 minutes of reading time for this article that I wrote.

00:31:01.679 --> 00:31:04.220
And it's called The State of Python 2025.

00:31:04.720 --> 00:31:06.620
I wrote this in partnership with JetBrains.

00:31:07.540 --> 00:31:21.120
And it takes the PSF JetBrains survey results and does like a ton of analysis on it and predictions and concrete actions people could take based on the trends that we're seeing and so on.

00:31:23.660 --> 00:31:25.240
So I'll put that here now.

00:31:25.250 --> 00:31:32.640
I think I might make this one of next week's items and we can dive into some of the trends and recommendations and you can tell me how I'm wrong or right.

00:31:34.000 --> 00:31:38.500
But it just came out this morning, So I thought I'd go ahead and just throw it out there as an extra for now.

00:31:38.960 --> 00:31:39.200
Cool.

00:31:40.000 --> 00:31:40.120
Yeah.

00:31:43.020 --> 00:31:54.780
Next, if you run local LLMs, as I do, and there's a really interesting option, you can now run OpenAI's.

00:31:56.660 --> 00:31:57.780
Well, first of all, hey, guess what?

00:31:58.000 --> 00:32:01.980
OpenAI has a public open weights model you can use.

00:32:03.180 --> 00:32:04.520
And you can run it locally.

00:32:04.660 --> 00:32:13.220
So I'm running here in LM Studio in developer mode and programming against the GPT OSS 20 billion parameter model.

00:32:13.900 --> 00:32:14.440
How cool is that?

00:32:15.200 --> 00:32:15.920
That's pretty cool.

00:32:16.380 --> 00:32:16.720
Yeah.

00:32:17.040 --> 00:32:17.520
Maybe.

00:32:17.800 --> 00:32:18.180
I don't know.

00:32:18.980 --> 00:32:19.440
It's super cool.

00:32:19.440 --> 00:32:22.300
I have some other things that I created, like little utilities.

00:32:22.440 --> 00:32:24.900
I'm like, hey, I want this utility to work, and it needs an LLM.

00:32:25.740 --> 00:32:29.480
And I knocked it out real quick in combo with some agentic coding.

00:32:30.320 --> 00:32:33.960
And it was using QWEN, which was pretty good.

00:32:34.120 --> 00:32:37.440
But then when this came out, I'm like, let me try this and see if it'll give me better answers.

00:32:38.140 --> 00:32:43.940
Sure enough, so now I'm just running this locally on my Mac Mini and talking to it, and it's pretty good.

00:32:44.440 --> 00:32:45.960
So that's a cool option.

00:32:45.980 --> 00:32:48.460
You run it in Olama or other places as well.

00:32:50.100 --> 00:32:58.560
And finally, just remind people that we just released the Just Enough Python for Data Scientists course for $29 over at Talk Python.

00:32:58.840 --> 00:33:10.280
So if you're getting started in your data science journey or you feel like you've been doing it for a long time but you just don't quite have the software engineering techniques and tools and so on, check this out.

00:33:10.550 --> 00:33:12.420
Just talk by Thun.fm, click on Courses.

00:33:13.320 --> 00:33:13.760
Be right there.

00:33:14.980 --> 00:33:15.620
That's it for my extras.

00:33:17.440 --> 00:33:17.620
Awesome.

00:33:19.660 --> 00:33:20.400
That's all of our extras.

00:33:20.720 --> 00:33:22.600
Do you have something funny for us?

00:33:22.680 --> 00:33:24.860
I have a quick follow-up before we do from Pat Decker.

00:33:24.950 --> 00:33:26.260
It says, I saw your post on Blue Sky.

00:33:26.640 --> 00:33:27.600
Listened to 238.

00:33:27.720 --> 00:33:28.320
I agree with Michael.

00:33:28.620 --> 00:33:29.980
Congratulations on 10 years, Brian.

00:33:30.970 --> 00:33:31.340
Thank you.

00:33:31.690 --> 00:33:32.100
Thanks, Pat.

00:33:33.720 --> 00:33:33.920
Indeed.

00:33:34.450 --> 00:33:35.640
Okay, yes, we have a joke.

00:33:36.800 --> 00:33:37.300
Let's check it out.

00:33:37.350 --> 00:33:43.560
This one, you know, people don't like if I, they don't like generally when one language bashes on another.

00:33:43.610 --> 00:33:45.700
Well, some of them do, but not generally.

00:33:46.980 --> 00:33:51.660
So keep, folks, before I show you this joke, it's supposed to be lighthearted.

00:33:52.060 --> 00:33:53.240
Please don't email us.

00:33:53.290 --> 00:33:53.680
That's how we're mean.

00:33:54.370 --> 00:33:57.380
So the joke is, Python is better than Java.

00:33:58.460 --> 00:33:59.160
says someone.

00:33:59.880 --> 00:34:01.040
Another person says, prove it.

00:34:01.840 --> 00:34:14.240
So the original person fires up Python, creates two strings, one named Python, one named Java, and then asks, as writing in the interpreter, Python greater than Java as strings?

00:34:14.720 --> 00:34:14.860
True.

00:34:15.800 --> 00:34:16.460
True, says Python.

00:34:20.300 --> 00:34:21.980
It's greater, yeah, sure.

00:34:23.600 --> 00:34:23.700
Truth.

00:34:24.620 --> 00:34:25.000
It's true.

00:34:25.780 --> 00:34:26.200
There you have it.

00:34:26.399 --> 00:34:27.360
Anyway, I just thought that was funny.

00:34:28.859 --> 00:34:39.020
it's too bad that Python doesn't have a better operator not necessarily greater but just better exactly well there it is

00:34:39.560 --> 00:34:40.419
that's the joke

00:34:41.879 --> 00:34:43.000
alright cool

00:34:43.860 --> 00:34:50.179
well thanks again thanks everybody for listening and see you next time see you later file

