WEBVTT

00:00:00.000 --> 00:00:10.720
Hey Michael. Hey. Hello everybody in the chat or watching it later. Thanks for showing up.


00:00:10.720 --> 00:00:16.340
So shall we just kick it off. Let's do it. Hello and welcome to Python Bytes where we


00:00:16.340 --> 00:00:22.220
deliver Python news and headlines directly to your earbuds. This is episode 317 recorded


00:00:22.220 --> 00:00:29.380
January 3rd 2023 and I am Brian Okken. Hello I'm Michael Kennedy. Welcome to 2023. How


00:00:29.380 --> 00:00:30.380
It's very exciting.


00:00:30.380 --> 00:00:35.020
It's a lot like 2022, but I think maybe a little more optimism.


00:00:35.020 --> 00:00:36.020
We'll see.


00:00:36.020 --> 00:00:39.940
Yeah, but I've had one extra shower in 2020 since 2022.


00:00:39.940 --> 00:00:42.300
So yeah, I mean, I do.


00:00:42.300 --> 00:00:43.300
Do you remember 2022?


00:00:43.300 --> 00:00:45.340
It just feels like a few days ago.


00:00:45.340 --> 00:00:47.500
It honestly, it really flew by.


00:00:47.500 --> 00:00:48.500
Yeah.


00:00:48.500 --> 00:00:51.380
I mean, we, we, we stayed inside for like two years and then like, Hey, well look, we


00:00:51.380 --> 00:00:52.380
get to go outside.


00:00:52.380 --> 00:00:55.260
Oh, time flies when you're not just stuck inside.


00:00:55.260 --> 00:00:57.780
I even actually rode a bicycle the other day.


00:00:57.780 --> 00:00:58.780
Nice.


00:00:58.780 --> 00:01:00.860
Oregon said we're gonna rain for two weeks, so.


00:01:00.860 --> 00:01:02.580
- Of course, of course it did.


00:01:02.580 --> 00:01:03.900
- Yeah.


00:01:03.900 --> 00:01:04.740
Well, let's kick it off.


00:01:04.740 --> 00:01:06.360
What do you got for us first?


00:01:06.360 --> 00:01:07.700
- All right.


00:01:07.700 --> 00:01:12.700
Let's talk about the Stack Overflow 2022 Developer Survey.


00:01:12.700 --> 00:01:17.660
Now, this is one of the better surveys


00:01:17.660 --> 00:01:21.340
that gives you a pulse on the developer community.


00:01:21.340 --> 00:01:24.020
It's, you know, we do the PSF survey every year,


00:01:24.020 --> 00:01:25.860
and that one I think is really well done.


00:01:25.860 --> 00:01:26.780
This one's interesting


00:01:26.780 --> 00:01:29.180
because it's not just Python, obviously.


00:01:29.180 --> 00:01:32.000
It's all of Stack Overflow people.


00:01:32.000 --> 00:01:32.900
- Yeah.


00:01:32.900 --> 00:01:36.240
- And it's really, really long, notice the scroll bar.


00:01:36.240 --> 00:01:39.960
So I'm gonna try to go through these


00:01:39.960 --> 00:01:44.600
and just hit on some of the high points for us.


00:01:44.600 --> 00:01:47.640
All right, so they did that as well for us at the top here.


00:01:47.640 --> 00:01:49.000
They kind of summarize some little things


00:01:49.000 --> 00:01:50.600
you can call out and then jump to other sections.


00:01:50.600 --> 00:01:54.920
Saying, learning to code online increased by 10%


00:01:54.920 --> 00:02:02.040
year over year. However, respondents older than 45 years are most likely to have learned


00:02:02.040 --> 00:02:11.800
from books, whereas the youngins are more likely to use some kind of online course or


00:02:11.800 --> 00:02:16.160
YouTube video or something along those lines. Does that surprise you?


00:02:16.160 --> 00:02:17.160
>> No.


00:02:17.160 --> 00:02:19.360
- Yeah, me either.


00:02:19.360 --> 00:02:23.200
So last year they said we saw Git rise


00:02:23.200 --> 00:02:25.900
as a fundamental tool of software development.


00:02:25.900 --> 00:02:27.700
So like if you are a software developer,


00:02:27.700 --> 00:02:29.880
you basically just need to know Git.


00:02:29.880 --> 00:02:31.940
Surprisingly, this year they said,


00:02:31.940 --> 00:02:34.080
that's Docker this year,


00:02:34.080 --> 00:02:39.080
increasing from 55% usage to 69% usage.


00:02:39.080 --> 00:02:45.080
And I kind of feel like the hype and the heyday of Docker


00:02:45.360 --> 00:02:47.880
was actually a couple of years ago.


00:02:47.880 --> 00:02:51.240
And I hear a little bit less, maybe it's just less hype,


00:02:51.240 --> 00:02:53.200
but it's just more like, yeah, we're just using it.


00:02:53.200 --> 00:02:54.720
But I don't know that,


00:02:54.720 --> 00:02:57.220
that was surprising and interesting to me.


00:02:57.220 --> 00:03:02.080
- I'm using it more in places where I didn't use to.


00:03:02.080 --> 00:03:04.560
- Like what?


00:03:04.560 --> 00:03:07.920
- Build chains for just to keep them consistent.


00:03:07.920 --> 00:03:10.680
We're just, and it isn't even a cloud thing.


00:03:10.680 --> 00:03:14.400
It's just having, being able to have


00:03:14.400 --> 00:03:18.320
a consistent build system, no matter what machine you're on.


00:03:18.320 --> 00:03:19.800
- Yeah, that makes a lot of sense.


00:03:19.800 --> 00:03:23.280
- CI systems are utilizing Docker more.


00:03:23.280 --> 00:03:24.120
- Sure.


00:03:24.120 --> 00:03:27.040
I've heard of even people using Docker


00:03:27.040 --> 00:03:30.360
to sort of manage and deploy,


00:03:30.360 --> 00:03:32.440
is that how you would phrase it?


00:03:32.440 --> 00:03:34.440
Little apps to Raspberry Pis


00:03:34.440 --> 00:03:36.880
for like home automation and stuff.


00:03:36.880 --> 00:03:37.720
- Really?


00:03:37.720 --> 00:03:39.440
- I'm sure there would be more of that


00:03:39.440 --> 00:03:41.040
if you could actually get a Raspberry Pi,


00:03:41.040 --> 00:03:43.000
but you know, this is more of a theoretical.


00:03:43.000 --> 00:03:45.000
who already have the Raspberry Pi.


00:03:45.000 --> 00:03:50.080
One of my favorite sections of this


00:03:50.080 --> 00:03:53.520
is the most loved, most dreaded, and most wanted.


00:03:53.520 --> 00:03:54.520
- Yeah.


00:03:54.520 --> 00:03:56.520
- Because it really tells you,


00:03:56.520 --> 00:04:01.320
how do people feel about how things are now,


00:04:01.320 --> 00:04:03.520
and how do they feel about where they're going?


00:04:03.520 --> 00:04:06.920
What would they do if they were unencumbered by


00:04:06.920 --> 00:04:11.920
their boss saying, "Nope, we're using this particular database,"


00:04:11.920 --> 00:04:14.000
or nope, it's all Angular.


00:04:14.000 --> 00:04:15.480
And you're on the team that does Angular,


00:04:15.480 --> 00:04:18.200
so I don't care what you want, you're doing Angular.


00:04:18.200 --> 00:04:21.080
And so Rust is on its seventh year


00:04:21.080 --> 00:04:23.140
as the most loved language.


00:04:23.140 --> 00:04:25.680
- Seven years?


00:04:25.680 --> 00:04:27.200
Is it even seven years old?


00:04:27.200 --> 00:04:29.800
- I know, I know, that's my thought as well.


00:04:29.800 --> 00:04:34.520
But 87% of developers say they wanna continue using it.


00:04:34.520 --> 00:04:35.640
Wow.


00:04:35.640 --> 00:04:39.880
I mean, yeah, anyway, that's pretty interesting.


00:04:39.880 --> 00:04:44.880
But it also Python and Rust are basically exactly tied


00:04:44.880 --> 00:04:49.620
as the most wanted programming language.


00:04:49.620 --> 00:04:50.940
That's cool.


00:04:50.940 --> 00:04:51.980
- I can see that.


00:04:51.980 --> 00:04:53.260
- Yeah, absolutely.


00:04:53.260 --> 00:04:59.080
Phoenix, Phoenix is some web framework I've never heard of


00:04:59.080 --> 00:05:00.940
that is apparently the most popular.


00:05:00.940 --> 00:05:04.180
AngularJS, it continues into its third year


00:05:04.180 --> 00:05:05.480
of being the most dreaded.


00:05:05.480 --> 00:05:07.980
All right, what else?


00:05:09.060 --> 00:05:10.060
Go ahead.


00:05:10.060 --> 00:05:11.360
- Oh, just react.


00:05:11.360 --> 00:05:15.740
I, yeah, is most wanted, but who knows?


00:05:15.740 --> 00:05:16.860
- Yeah, exactly.


00:05:16.860 --> 00:05:18.540
So some of these questions


00:05:18.540 --> 00:05:20.540
and some of these phrasings and analyses


00:05:20.540 --> 00:05:24.140
are super, super good and others are really bad.


00:05:24.140 --> 00:05:26.100
So I'll try to highlight some of these.


00:05:26.100 --> 00:05:27.980
So let me jump down here.


00:05:27.980 --> 00:05:31.340
Well, I don't really care about the education stuff.


00:05:31.340 --> 00:05:35.100
I mean, it tells you, education profile.


00:05:35.100 --> 00:05:37.100
It tells you things like,


00:05:37.100 --> 00:05:41.300
Yeah, there's an insane number of guys versus women.


00:05:41.300 --> 00:05:42.140
- No, that's fine.


00:05:42.140 --> 00:05:43.820
I just thought it was funny that you said


00:05:43.820 --> 00:05:45.220
I don't care about education.


00:05:45.220 --> 00:05:47.460
(laughing)


00:05:47.460 --> 00:05:53.900
- Teacher, you know, leave the kids alone.


00:05:53.900 --> 00:05:54.740
All right.


00:05:54.740 --> 00:05:57.700
So no, like it's fine, but it's, you know,


00:05:57.700 --> 00:05:59.420
people can check it out if they care about it, right?


00:05:59.420 --> 00:06:01.380
Like there's stuff about the demographics,


00:06:01.380 --> 00:06:02.720
like age and gender.


00:06:02.720 --> 00:06:03.880
That is pretty interesting.


00:06:03.880 --> 00:06:06.260
I wish some of these numbers were better.


00:06:06.260 --> 00:06:12.100
like, yeah, it totally is. Right. But, you know, that's also not


00:06:12.100 --> 00:06:18.340
news. So yeah, some of the most popular technologies here. Now,


00:06:18.340 --> 00:06:22.380
I know, Brian, I might just be getting older and grumpy. But


00:06:22.380 --> 00:06:24.860
when I look at this, there's like, it's almost all these


00:06:24.860 --> 00:06:28.060
responses are broken into two segments, professional


00:06:28.060 --> 00:06:33.820
developers, and learning to code people. And the default is to


00:06:33.840 --> 00:06:36.720
take all those together and I guess that's the biggest picture,


00:06:36.720 --> 00:06:38.120
but I don't know.


00:06:38.120 --> 00:06:39.740
When I ever look at this, I'm just like,


00:06:39.740 --> 00:06:41.240
professional developers tell me about this.


00:06:41.240 --> 00:06:42.360
>> Yeah.


00:06:42.360 --> 00:06:45.280
>> If you're on your third week of


00:06:45.280 --> 00:06:48.680
a coding tutorial and that tutorial says use this,


00:06:48.680 --> 00:06:52.800
how much does that really speak to the state of the community?


00:06:52.800 --> 00:06:54.440
I don't think it.


00:06:54.440 --> 00:06:55.560
>> Agreed.


00:06:55.560 --> 00:06:58.080
>> So I'm checking. When I think about these,


00:06:58.080 --> 00:06:59.920
I'm just going to check professional developer and if you


00:06:59.920 --> 00:07:02.280
want the same numbers, you can do so as well.


00:07:02.280 --> 00:07:03.980
So where are we?


00:07:03.980 --> 00:07:07.760
We are on programming languages, scripting and markup.


00:07:07.760 --> 00:07:11.020
JavaScript is definitely the most popular here.


00:07:11.020 --> 00:07:14.880
This is one of those areas where I don't,


00:07:14.880 --> 00:07:16.840
I think you need to phrase it a little bit different.


00:07:16.840 --> 00:07:19.040
Let's see what the question exactly is.


00:07:19.040 --> 00:07:23.040
Which programming languages have you done


00:07:23.040 --> 00:07:25.680
extensive development work in over the year,


00:07:25.680 --> 00:07:26.980
over the last year, okay?


00:07:29.760 --> 00:07:33.020
I don't know how quite how to solve this problem,


00:07:33.020 --> 00:07:35.880
but there's a ton of Python people who did JavaScript work.


00:07:35.880 --> 00:07:36.720
- Yeah.


00:07:36.720 --> 00:07:41.720
- There is a ton of C++ people who did SQL, right?


00:07:41.720 --> 00:07:43.840
There's also Python people who did SQL.


00:07:43.840 --> 00:07:46.560
So SQL ranks above Python,


00:07:46.560 --> 00:07:50.400
but there's very few people whose job it is


00:07:50.400 --> 00:07:53.960
as a developer to write SQL


00:07:53.960 --> 00:07:57.360
and not use something else, right?


00:07:57.360 --> 00:07:58.360
So that's--


00:07:58.360 --> 00:08:02.520
- It's weird to have SQL even in there.


00:08:02.520 --> 00:08:03.360
- Yeah, I know.


00:08:03.360 --> 00:08:05.480
Well, HTML and CSS, right,


00:08:05.480 --> 00:08:08.440
is like a little bit weirder as well.


00:08:08.440 --> 00:08:10.120
And so I feel like it should say like,


00:08:10.120 --> 00:08:12.560
what is your primary programming language?


00:08:12.560 --> 00:08:15.400
Or something like, you know, something like that, right?


00:08:15.400 --> 00:08:16.720
I feel like it's--


00:08:16.720 --> 00:08:18.200
- It's kind of like favorite movie.


00:08:18.200 --> 00:08:20.960
Like, what's your favorite movie, but not "Princess Bride"?


00:08:20.960 --> 00:08:23.040
Other than that, what's your favorite movie?


00:08:23.040 --> 00:08:24.720
- Yes, exactly, exactly.


00:08:24.720 --> 00:08:27.280
So like, there's people who do Node.js and JavaScript


00:08:27.280 --> 00:08:29.980
And that is what I think this top bar


00:08:29.980 --> 00:08:31.740
where JavaScript is should represent.


00:08:31.740 --> 00:08:34.220
But it's not plus everyone else, right?


00:08:34.220 --> 00:08:35.420
Aggregated.


00:08:35.420 --> 00:08:37.320
So I don't know, these are a little bit weird,


00:08:37.320 --> 00:08:38.160
but I'll just go through the top.


00:08:38.160 --> 00:08:39.000
- Yeah, back end.


00:08:39.000 --> 00:08:42.540
So like, unless you're primarily just a front end developer,


00:08:42.540 --> 00:08:44.220
what back end languages?


00:08:44.220 --> 00:08:45.060
- Right, right.


00:08:45.060 --> 00:08:46.180
Or maybe you're using Node on the back end,


00:08:46.180 --> 00:08:47.880
but then other than that.


00:08:47.880 --> 00:08:50.100
So JavaScript, number one.


00:08:50.100 --> 00:08:53.260
HTML, top programming language, okay.


00:08:53.260 --> 00:08:55.780
SQL, third most, and then Python, and then TypeScript.


00:08:55.780 --> 00:08:58.400
So, you know, like a bunch of interesting ones.


00:08:58.400 --> 00:09:00.340
And then you've got your VM,


00:09:00.340 --> 00:09:06.820
garbage collected JavaScript,


00:09:06.820 --> 00:09:09.160
Java and C# back there.


00:09:09.160 --> 00:09:11.720
And then it starts to fall off pretty quick after that.


00:09:11.720 --> 00:09:13.080
Down at the very bottom,


00:09:13.080 --> 00:09:15.240
let's see the very bottom one is Crystal.


00:09:15.240 --> 00:09:16.080
Okay.


00:09:16.080 --> 00:09:17.800
And APL, oh my gosh.


00:09:17.800 --> 00:09:19.040
APL.


00:09:19.040 --> 00:09:21.460
APL is something.


00:09:21.460 --> 00:09:22.300
All right.


00:09:22.300 --> 00:09:26.040
Another one that's worth talking about is databases.


00:09:26.040 --> 00:09:30.640
So we've got Postgres, MySQL, SQLite, SQL Server,


00:09:30.640 --> 00:09:33.600
MongoDB as the top five.


00:09:33.600 --> 00:09:37.920
So it's pretty clear that Postgres has the momentum.


00:09:37.920 --> 00:09:41.380
Like MySQL was higher, and now Postgres is passing it,


00:09:41.380 --> 00:09:44.840
but that's kind of going up here.


00:09:44.840 --> 00:09:50.360
So this is which environments have you done extensive work in?


00:09:50.360 --> 00:09:54.220
We'll also see that in like the loved versus dreaded section.


00:09:54.220 --> 00:09:56.680
- Yeah.


00:09:56.680 --> 00:09:57.520
(laughing)


00:09:57.520 --> 00:09:59.320
- And by the way, on the audience, Marco says,


00:09:59.320 --> 00:10:01.360
I've already aged myself with that Pink Floyd reference.


00:10:01.360 --> 00:10:02.200
Indeed.


00:10:02.200 --> 00:10:08.640
All right, so cloud platforms, AWS,


00:10:08.640 --> 00:10:10.600
I want to surprise you that AWS has over half


00:10:10.600 --> 00:10:12.340
of the entire market.


00:10:12.340 --> 00:10:14.120
- No.


00:10:14.120 --> 00:10:16.120
- No.


00:10:16.120 --> 00:10:18.880
- But only, it's only a smidge over half, it's 55, so.


00:10:18.880 --> 00:10:19.960
- Yeah, exactly.


00:10:19.960 --> 00:10:24.040
Web technologies, here's another one.


00:10:24.040 --> 00:10:27.980
No, not this, this one's kind of okay,


00:10:27.980 --> 00:10:32.080
but like for example, they've got Node.js,


00:10:32.080 --> 00:10:36.360
but they don't have Python, right?


00:10:36.360 --> 00:10:39.280
So I don't know, it's a little bit funky.


00:10:39.280 --> 00:10:43.700
Like they've Node and Express and Express runs on Node,


00:10:43.700 --> 00:10:46.980
whereas they have Flask and Django,


00:10:46.980 --> 00:10:50.040
but they don't have the thing that Django and Flask run on,


00:10:50.040 --> 00:10:51.580
which is, I don't know, anyway,


00:10:51.580 --> 00:10:53.620
it's a little bit of a challenging one,


00:10:53.620 --> 00:10:56.560
but Node and React are quite high up there.


00:10:56.560 --> 00:11:01.560
Look at this artifact, this living fossil right here, Brian.


00:11:01.560 --> 00:11:03.300
What's number three?


00:11:03.300 --> 00:11:04.140
- jQuery.


00:11:04.140 --> 00:11:05.960
- JQuery, you know it.


00:11:05.960 --> 00:11:09.660
Dollar document ready, let's go.


00:11:09.660 --> 00:11:10.500
All right.


00:11:10.500 --> 00:11:12.140
- I learned jQuery a long time ago.


00:11:12.140 --> 00:11:14.080
- Yeah, I still use a little bit of jQuery


00:11:14.080 --> 00:11:15.580
if there's some site that's already using it.


00:11:15.580 --> 00:11:18.460
I'm like, yeah, whatever, I'm just gonna put one handler


00:11:18.460 --> 00:11:19.820
in here and not worry about it.


00:11:19.820 --> 00:11:21.260
- FastAPI's on the list.


00:11:21.260 --> 00:11:23.500
- Yeah, FastAPI's on the list.


00:11:23.500 --> 00:11:27.260
Django and Flask are 14.6%, both.


00:11:27.260 --> 00:11:30.460
FastAPI is 6% and going up.


00:11:30.460 --> 00:11:32.980
FastAPI just actually had a Ruby on Rails,


00:11:32.980 --> 00:11:34.420
which is pretty interesting.


00:11:34.420 --> 00:11:39.300
- Wait, so Phoenix is down at 2.13%,


00:11:39.300 --> 00:11:41.540
but I thought it was like--


00:11:41.540 --> 00:11:43.460
- It's the most loved.


00:11:43.460 --> 00:11:45.100
- Okay. - It's the most wanted.


00:11:45.100 --> 00:11:48.180
I'm not, I looked at it, I'm not sure I agree with that,


00:11:48.180 --> 00:11:53.180
but it's a web framework built on the Elixir language.


00:11:53.180 --> 00:11:56.980
So there you have it.


00:11:56.980 --> 00:11:57.820
And we'll see.


00:11:57.820 --> 00:12:04.100
So yeah, another one here that's worth pointing out,


00:12:04.100 --> 00:12:06.460
I'm not gonna go over too many more.


00:12:06.460 --> 00:12:07.900
Other frameworks and libraries.


00:12:07.900 --> 00:12:12.500
This one is pretty weird in terms of like the partition.


00:12:12.500 --> 00:12:13.800
This is what I had in mind when I'm like,


00:12:13.800 --> 00:12:16.500
there's something really weird about this.


00:12:16.500 --> 00:12:19.560
- So .NET and NumPy in the same bucket.


00:12:19.560 --> 00:12:24.560
- Exactly, so .NET is the equivalent of Python.


00:12:24.560 --> 00:12:27.680
It's the equivalent of C++.


00:12:27.680 --> 00:12:29.820
It's the equivalent of Ruby, right?


00:12:29.820 --> 00:12:32.120
It's like a huge and broad.


00:12:32.120 --> 00:12:34.180
And it's the thing that all the other stuff


00:12:34.180 --> 00:12:36.580
in that ecosystem runs on, right?


00:12:36.580 --> 00:12:38.540
ASP.NET or whatever.


00:12:38.540 --> 00:12:42.040
And so they say, what other language do you work with?


00:12:42.040 --> 00:12:43.640
Do you work, or other libraries,


00:12:43.640 --> 00:12:46.160
Do you work with .NET or do you work with NumPy?


00:12:46.160 --> 00:12:47.240
Or do you work with Panda?


00:12:47.240 --> 00:12:48.960
There's no Python here, right?


00:12:48.960 --> 00:12:52.120
And there's no Go and there's no, no, I don't know.


00:12:52.120 --> 00:12:55.840
Like, it's just, it's, I feel like this just fully


00:12:55.840 --> 00:12:57.360
is like out of place here.


00:12:57.360 --> 00:13:01.440
So if you just go past that, the top two are NumPy


00:13:01.440 --> 00:13:04.480
and Pandas, which by quite a good margin.


00:13:04.480 --> 00:13:08.800
And then Spring for Java, React, Native for mobile


00:13:08.800 --> 00:13:12.200
with JavaScript, Flutter, and, but then back to a bunch


00:13:12.200 --> 00:13:15.280
Python libraries.


00:13:15.280 --> 00:13:17.240
- Yeah, like PyTorch.


00:13:17.240 --> 00:13:19.960
- Yeah, so Python actually ranks pretty high


00:13:19.960 --> 00:13:22.760
in the other frameworks and libraries you might be using.


00:13:22.760 --> 00:13:25.520
All right, let's just, let's jump to the loved, dreaded,


00:13:25.520 --> 00:13:29.600
wanted section, and then that's probably enough.


00:13:29.600 --> 00:13:31.880
People can check out the rest.


00:13:31.880 --> 00:13:34.020
All right, so they've got this sort of,


00:13:34.020 --> 00:13:37.840
you know, like what is driving the market,


00:13:37.840 --> 00:13:41.440
greed versus fear type of thing.


00:13:41.440 --> 00:13:43.580
And so they put each technology up,


00:13:43.580 --> 00:13:45.680
and it's got a how much love versus how much hate


00:13:45.680 --> 00:13:48.040
does this technology get in a single bar, which


00:13:48.040 --> 00:13:50.560
is-- the graphics here are pretty nice.


00:13:50.560 --> 00:13:56.560
So Rust, 86% love.


00:13:56.560 --> 00:13:59.320
So people who use Rust really like Rust,


00:13:59.320 --> 00:14:02.440
and they don't strongly dislike it.


00:14:02.440 --> 00:14:04.480
It's probably a self-selecting group, right?


00:14:04.480 --> 00:14:07.560
If you took, I don't know, JavaScript people


00:14:07.560 --> 00:14:09.980
and told them they had to do Rust, they might not like it.


00:14:09.980 --> 00:14:12.500
Rust people seem to really like Rust.


00:14:12.500 --> 00:14:15.340
Elixir, I've never done anything with Elixir,


00:14:15.340 --> 00:14:18.340
but it's also really high.


00:14:18.340 --> 00:14:21.380
Closure TypeScript and Python is there


00:14:21.380 --> 00:14:25.420
at about two thirds loved, one third dreaded,


00:14:25.420 --> 00:14:26.760
I suppose, or not loved.


00:14:26.760 --> 00:14:29.940
And you can see it goes down from there.


00:14:29.940 --> 00:14:32.900
- Yeah, I kind of want to talk to those 32% of the people


00:14:32.900 --> 00:14:35.180
and say, what is it that you don't like?


00:14:35.180 --> 00:14:36.380
- Well, I agree.


00:14:36.380 --> 00:14:39.040
I feel like there's a lot of people who end up,


00:14:39.040 --> 00:14:41.840
So for example, if you look at just the third


00:14:41.840 --> 00:14:43.140
that says they don't like it,


00:14:43.140 --> 00:14:46.160
that's 11 times as many people using Elixir.


00:14:46.160 --> 00:14:50.680
And that's two times as all the people using Rust.


00:14:50.680 --> 00:14:53.640
So I think it's a little bit, you know, a scale thing, right?


00:14:53.640 --> 00:14:56.160
Like, there's a bunch of people


00:14:56.160 --> 00:14:57.840
who were working in one technology


00:14:57.840 --> 00:14:59.360
and then they were told you're gonna do Python.


00:14:59.360 --> 00:15:01.400
And some of them wanted that change


00:15:01.400 --> 00:15:04.080
and some of them probably like, but I like C++


00:15:04.080 --> 00:15:05.400
or I like whatever I'm doing.


00:15:05.400 --> 00:15:07.760
And you know, they're unhappy to be in that situation.


00:15:07.760 --> 00:15:10.420
So I imagine there's some of that going on here.


00:15:10.420 --> 00:15:13.560
Where there's less people being moved into Elixir projects


00:15:13.560 --> 00:15:15.240
unless they really want to,


00:15:15.240 --> 00:15:16.880
'cause it's a pretty small group.


00:15:16.880 --> 00:15:18.800
Anyway, there's that.


00:15:18.800 --> 00:15:21.040
And then if you switch to the wanted though,


00:15:21.040 --> 00:15:24.220
Python and Rust tie for number one in most wanted.


00:15:24.220 --> 00:15:28.200
Along with TypeScript is showing very notable there.


00:15:28.200 --> 00:15:30.400
- Yeah, nice.


00:15:30.400 --> 00:15:34.000
- Yeah, last one we'll say databases, I suppose.


00:15:34.000 --> 00:15:37.400
Postgres, most loved, least dreaded.


00:15:37.400 --> 00:15:41.820
Redis, again, one of the things like,


00:15:41.820 --> 00:15:44.100
does this really belong on this list?


00:15:44.100 --> 00:15:45.180
Redis is cool.


00:15:45.180 --> 00:15:47.420
It's mostly for caching and message queues,


00:15:47.420 --> 00:15:49.780
not really as a standalone independent database.


00:15:49.780 --> 00:15:52.540
So can it really be the most wanted database?


00:15:52.540 --> 00:15:55.900
You technically, I know, can make it work that way,


00:15:55.900 --> 00:15:57.180
but it's not really built for it.


00:15:57.180 --> 00:15:58.340
So I don't know.


00:15:58.340 --> 00:16:00.460
Anyway, Redis is number two, whether it belongs there or not


00:16:00.460 --> 00:16:03.180
and then MongoDB and SQLite and so on.


00:16:03.180 --> 00:16:06.260
in terms of wanted, Postgres and Mongo.


00:16:06.260 --> 00:16:08.460
- Nice.


00:16:08.460 --> 00:16:09.980
- Not too much of a change.


00:16:09.980 --> 00:16:12.060
All right, I think that's pretty much it.


00:16:12.060 --> 00:16:14.420
I'll give just a quick shout out to some graphics


00:16:14.420 --> 00:16:16.100
that are down here that people can play with


00:16:16.100 --> 00:16:18.780
if you really wanna go explore.


00:16:18.780 --> 00:16:19.820
Brian, check this out.


00:16:19.820 --> 00:16:22.340
Like, which one is this?


00:16:22.340 --> 00:16:24.340
This database one's probably fair.


00:16:24.340 --> 00:16:27.820
So there's this giant, I don't know what section is this.


00:16:27.820 --> 00:16:32.820
It is work with versus what to work with.


00:16:32.820 --> 00:16:37.620
So, it has this wheel.


00:16:37.620 --> 00:16:41.940
And as you move around the wheel, it'll show you, for example,


00:16:41.940 --> 00:16:46.020
5,000 people who worked with Postgres want to work with SQLite.


00:16:46.020 --> 00:16:50.100
8,000 people who work with MongoDB want to stay with it.


00:16:50.100 --> 00:16:55.220
Whereas 7,000 people who work with MySQL want to move to MongoDB.


00:16:55.220 --> 00:17:01.380
And similarly, it shows you all these interesting trends and flows


00:17:01.380 --> 00:17:03.740
from this technology to that technology.


00:17:03.740 --> 00:17:06.140
Like if you go up here to the language one,


00:17:06.140 --> 00:17:09.480
you go to pros, and you click on C#,


00:17:09.480 --> 00:17:11.940
it's pretty interesting because like,


00:17:11.940 --> 00:17:14.660
the C# people, they wanna go to TypeScript


00:17:14.660 --> 00:17:16.500
or Python or JavaScript or HTML,


00:17:16.500 --> 00:17:18.340
but they don't wanna go to Java.


00:17:18.340 --> 00:17:20.180
Like there's no arc over to Java, right?


00:17:20.180 --> 00:17:22.740
'Cause these are basically the same technology


00:17:22.740 --> 00:17:23.900
with slight different trade-offs.


00:17:23.900 --> 00:17:24.940
So if you wanted to be in Java,


00:17:24.940 --> 00:17:26.980
you would just be in Java, I feel like.


00:17:26.980 --> 00:17:27.820
- Yeah.


00:17:27.820 --> 00:17:29.740
- You can sort of check out these flows and stuff.


00:17:29.740 --> 00:17:32.240
So anyway, I think that's more than enough on this survey,


00:17:32.240 --> 00:17:33.520
but people should go check it out.


00:17:33.520 --> 00:17:37.980
There's a lot of data here and a lot of things to learn.


00:17:37.980 --> 00:17:39.580
- So does that say HypeScript?


00:17:39.580 --> 00:17:40.900
HypeScript?


00:17:40.900 --> 00:17:42.300
- It doesn't fit on the screen, that's all.


00:17:42.300 --> 00:17:44.340
- Oh, okay. - It's HypeScript.


00:17:44.340 --> 00:17:47.580
Hype, yeah, there's just Y-P-E script, TypeScript.


00:17:47.580 --> 00:17:49.980
With, yeah, it's just a scaling.


00:17:49.980 --> 00:17:52.620
- Nice. - Yeah.


00:17:52.620 --> 00:17:53.460
- Okay, so.


00:17:53.460 --> 00:17:56.860
- Before we move on real quick, John out in the audience says


00:17:56.860 --> 00:17:58.700
it's interesting that MySQL and MariaDB


00:17:58.700 --> 00:18:00.380
are perceived so differently.


00:18:00.380 --> 00:18:01.780
Yeah, that is true.


00:18:01.780 --> 00:18:04.900
- Yeah, I don't know much.


00:18:04.900 --> 00:18:08.180
I think that MySQL has a problem


00:18:08.180 --> 00:18:10.580
that people used it a long time ago


00:18:10.580 --> 00:18:11.900
and maybe it's different now,


00:18:11.900 --> 00:18:14.060
but I mean, that's what I'm basing it.


00:18:14.060 --> 00:18:17.820
My experience with MySQL is like all over 10 years ago.


00:18:17.820 --> 00:18:19.100
So. - Yeah, same.


00:18:19.100 --> 00:18:22.860
All right, what you got for us next?


00:18:22.860 --> 00:18:25.780
- Well, I wanted to talk about Pepe,


00:18:25.780 --> 00:18:29.920
our P, I don't know, it's a pepy.tech.


00:18:29.920 --> 00:18:33.020
So I found out about this, who did I find?


00:18:33.020 --> 00:18:37.180
From the person that wrote it, Petru Reres.


00:18:37.180 --> 00:18:40.940
So we've talked about something similar.


00:18:40.940 --> 00:18:45.940
What we've talked about before is PyPI download stats,


00:18:45.940 --> 00:18:48.380
or pypistats.org.


00:18:48.380 --> 00:18:50.240
And so I was like, well, what's different?


00:18:50.240 --> 00:18:54.260
So Pepe does download stats for packages.


00:18:54.260 --> 00:18:56.940
So what I'm showing, we're showing here is the,


00:18:56.940 --> 00:18:58.300
the stats for pytest.


00:18:58.300 --> 00:19:04.060
And what the PyPI stats does is it shows you a breakdown of


00:19:04.060 --> 00:19:06.300
like, you've got the overall packages,


00:19:06.300 --> 00:19:10.660
but then you can also look at downloads per Python two


00:19:10.660 --> 00:19:15.660
versus three, and then major and minor versions of Python.


00:19:15.660 --> 00:19:20.900
And so that's kind of interesting, but,


00:19:20.900 --> 00:19:25.180
But I actually now after we're like so much far past


00:19:25.180 --> 00:19:27.220
the two versus three split,


00:19:27.220 --> 00:19:29.740
like I'm not even supporting two anymore.


00:19:29.740 --> 00:19:33.720
So what I like is Pepe doesn't do that.


00:19:33.720 --> 00:19:37.300
So Pepe is same stats are same for pytest.


00:19:37.300 --> 00:19:40.940
What it's looking at is it grabs like the top handful.


00:19:40.940 --> 00:19:42.780
So let's do the default.


00:19:42.780 --> 00:19:45.540
I have it all customized right now.


00:19:45.540 --> 00:19:47.980
So let's drop those off.


00:19:49.380 --> 00:19:54.380
By default, it shows us the last few versions of pytest


00:19:54.380 --> 00:19:59.980
plus all of the downloads for the last major one.


00:19:59.980 --> 00:20:02.740
So all the 7X downloads.


00:20:02.740 --> 00:20:05.520
And so the numbers are a little different


00:20:05.520 --> 00:20:06.900
because we're not showing everything.


00:20:06.900 --> 00:20:09.600
So right off the bat, I kind of like that


00:20:09.600 --> 00:20:11.760
I'm just caring about the last few versions.


00:20:11.760 --> 00:20:13.100
That's kind of nice.


00:20:13.100 --> 00:20:15.980
And it also has a daily, weekly, monthly chart


00:20:15.980 --> 00:20:20.980
so that you can kind of see trends going on, which is nice.


00:20:20.980 --> 00:20:28.420
What I didn't realize at first is that you can select


00:20:28.420 --> 00:20:30.460
different statistics.


00:20:30.460 --> 00:20:33.620
So if I wanted to see everything on all versions,


00:20:33.620 --> 00:20:35.720
I can just go ahead and type a star there.


00:20:35.720 --> 00:20:38.020
I think that works.


00:20:38.020 --> 00:20:38.860
Yeah.


00:20:38.860 --> 00:20:39.680
- There you go.


00:20:39.680 --> 00:20:41.500
- And then it does all of the downloads.


00:20:41.500 --> 00:20:43.480
And then also when I just dropped that,


00:20:43.480 --> 00:20:44.420
I don't know if you noticed,


00:20:44.420 --> 00:20:48.900
but it shows all the different download stats already.


00:20:48.900 --> 00:20:50.380
So you can kind of get a glimpse


00:20:50.380 --> 00:20:54.420
of what you're gonna find right off the bat.


00:20:54.420 --> 00:20:57.140
Now, going down through the chart,


00:20:57.140 --> 00:20:59.560
we've got both a chart and a table


00:20:59.560 --> 00:21:02.000
for when they grab the data.


00:21:02.000 --> 00:21:07.560
And this split up of, I'm not looking at Python version,


00:21:07.560 --> 00:21:11.100
I'm looking at version for the package that I care about,


00:21:11.100 --> 00:21:13.300
or like, you know, possibly my package.


00:21:13.300 --> 00:21:15.940
So I did this recently for pytest check


00:21:15.940 --> 00:21:18.820
and I was thinking about it for pytest


00:21:18.820 --> 00:21:20.980
of like which version should I support?


00:21:20.980 --> 00:21:24.580
And clearly like most, like tons of people


00:21:24.580 --> 00:21:26.020
have switched up to,


00:21:26.020 --> 00:21:28.080
most people have switched to 7x already.


00:21:28.080 --> 00:21:32.380
So yeah, I think it's perfectly fair game


00:21:32.380 --> 00:21:34.700
to not support 6x pytest anymore.


00:21:34.700 --> 00:21:36.480
So why not?


00:21:36.480 --> 00:21:40.940
Anyway, so just a different take on download stats.


00:21:40.940 --> 00:21:43.080
Plus it includes some cool badges


00:21:43.080 --> 00:21:47.480
that if you wanna grab your, like add this to your repo


00:21:47.480 --> 00:21:50.680
to say how many downloads per week or per month,


00:21:50.680 --> 00:21:51.500
kind of neat.


00:21:51.500 --> 00:21:54.780
- Yeah, that's really cool.


00:21:54.780 --> 00:22:00.560
If you're maintaining some open source package,


00:22:00.560 --> 00:22:02.940
you know, like, and it depends on something like this,


00:22:02.940 --> 00:22:06.400
like pytest, you can quickly look at that


00:22:06.400 --> 00:22:11.160
and make a call like, well, how important is it for me


00:22:11.160 --> 00:22:14.400
to support this old version or how ready am I to move


00:22:14.400 --> 00:22:18.400
to the new thing, adopt this feature that won't allow


00:22:18.400 --> 00:22:22.360
older versions of Python or whatever it is


00:22:22.360 --> 00:22:23.200
you're looking at, right?


00:22:23.200 --> 00:22:24.160
Like, should we add types?


00:22:24.160 --> 00:22:27.120
Well, that might not work on like, where is that?


00:22:27.120 --> 00:22:28.400
Three, three and before.


00:22:28.400 --> 00:22:29.840
Well, it's been a while.


00:22:29.840 --> 00:22:32.560
- Well, like on pytest check, I've got a feature


00:22:32.560 --> 00:22:34.780
that I'm gonna deprecate and it's only been in


00:22:34.780 --> 00:22:37.080
since like the last version.


00:22:37.080 --> 00:22:41.880
I just didn't think through the API enough, I think.


00:22:41.880 --> 00:22:43.340
But so I wanted to take a look,


00:22:43.340 --> 00:22:45.200
how many people are using the most recent version?


00:22:45.200 --> 00:22:48.520
And actually, so most of the people are,


00:22:48.520 --> 00:22:50.560
quite a few people are using the most recent version,


00:22:50.560 --> 00:22:53.320
but it isn't most, it's a,


00:22:53.320 --> 00:22:56.520
if I do like a total of every version,


00:22:56.520 --> 00:23:01.480
it's definitely not most people using the most recent one,


00:23:01.480 --> 00:23:02.880
but I don't know.


00:23:02.880 --> 00:23:04.400
And of those, I have no idea what,


00:23:04.400 --> 00:23:06.960
if they're using the feature or not, but anyway.


00:23:06.960 --> 00:23:09.440
So interesting, take a look on it.


00:23:09.440 --> 00:23:10.560
And I appreciate it.


00:23:10.560 --> 00:23:13.360
And it's open source project as well.


00:23:13.360 --> 00:23:18.000
And some of these graphs have been updated by a contributor.


00:23:18.000 --> 00:23:20.640
So it's kind of nice to have it alive


00:23:20.640 --> 00:23:21.880
and well on open source.


00:23:21.880 --> 00:23:24.920
- Peppy.tech.


00:23:24.920 --> 00:23:26.280
- Yeah. - Very nice.


00:23:26.280 --> 00:23:27.320
Good find, I like it.


00:23:27.320 --> 00:23:32.080
All right, off to our sponsor for the week.


00:23:32.080 --> 00:23:34.680
- Yes, thank you, Microsoft,


00:23:36.000 --> 00:23:37.480
for sponsoring this episode.


00:23:37.480 --> 00:23:39.560
This episode is brought to you by Microsoft


00:23:39.560 --> 00:23:41.860
for Startups Founders Hub.


00:23:41.860 --> 00:23:44.680
Starting a business is hard, but by some estimates,


00:23:44.680 --> 00:23:47.160
over 90% of startups will go out of business


00:23:47.160 --> 00:23:48.960
in the first year, ouch.


00:23:48.960 --> 00:23:50.800
With this in mind, Microsoft for Startups


00:23:50.800 --> 00:23:53.880
set out to understand what startups need to be successful


00:23:53.880 --> 00:23:55.600
and create a digital platform


00:23:55.600 --> 00:23:57.760
to help overcome those challenges.


00:23:57.760 --> 00:24:01.480
And Startups Founders Hub was born.


00:24:01.480 --> 00:24:03.200
Microsoft for Startups Founders Hub


00:24:03.200 --> 00:24:05.400
provides all founders at any stage


00:24:05.400 --> 00:24:08.560
with free resources to help solve startup challenges.


00:24:08.560 --> 00:24:11.040
The platform provides technology benefits,


00:24:11.040 --> 00:24:14.600
access to expert guidance and skilling resources,


00:24:14.600 --> 00:24:17.880
mentorship and network connections, and much more.


00:24:17.880 --> 00:24:19.320
Unlike others in the industry,


00:24:19.320 --> 00:24:21.320
Microsoft for Startups Founders Hub


00:24:21.320 --> 00:24:24.600
does not require startups to be investor-backed


00:24:24.600 --> 00:24:27.280
or third-party validated to participate.


00:24:27.280 --> 00:24:29.000
It is truly open to all.


00:24:29.000 --> 00:24:30.240
So what do you get?


00:24:30.240 --> 00:24:33.240
You can speed up development with free access to GitHub


00:24:33.240 --> 00:24:37.800
and the Microsoft Cloud with the ability to unlock credits over time.


00:24:37.800 --> 00:24:41.880
To help with your startup and to help innovate, Founders Hub is partnering with


00:24:41.880 --> 00:24:46.520
innovative companies like OpenAI, a global leader in AI research and


00:24:46.520 --> 00:24:50.200
development, to provide exclusive benefits and discounts.


00:24:50.200 --> 00:24:54.440
Through Founders Hub, becoming a founder is no longer about who you know.


00:24:54.440 --> 00:24:57.480
You'll have access to their mentorship network,


00:24:57.480 --> 00:25:01.880
giving you access to a pool of hundreds of mentors across a range of disciplines,


00:25:01.880 --> 00:25:07.240
across areas like idea validation, fundraising, management, and coaching, sales and marketing,


00:25:07.240 --> 00:25:12.280
as well as specific technical stress points. You'll be able to book a one-on-one meeting with


00:25:12.280 --> 00:25:20.120
the mentors, many of whom are former founders themselves. Make your ideas a reality today with


00:25:20.120 --> 00:25:25.560
the critical support you'll get from Microsoft for Startups Founders Hub. To join the program,


00:25:25.560 --> 00:25:30.000
visit pythonbytes.fm/foundershub2022,


00:25:30.000 --> 00:25:32.180
or click the link in your show notes.


00:25:32.180 --> 00:25:35.360
- Indeed, thank you, Microsoft for Startups.


00:25:35.360 --> 00:25:38.220
Let's move over here.


00:25:38.220 --> 00:25:42.000
So this next one comes to us


00:25:42.000 --> 00:25:44.680
from several folks recommending it.


00:25:44.680 --> 00:25:47.280
And to be honest, I'm not sure if I would cover it


00:25:47.280 --> 00:25:48.600
if there wasn't a bunch of people that said,


00:25:48.600 --> 00:25:50.080
hey, you should cover this, this is really interesting.


00:25:50.080 --> 00:25:53.200
So I'll sort of take their lead and say,


00:25:53.200 --> 00:25:54.400
this does look pretty interesting.


00:25:54.400 --> 00:25:59.400
So Jeff Hutchins and Abdul Aziz Al-Khwassim sent this in.


00:25:59.400 --> 00:26:02.000
Thank you both for sending it in.


00:26:02.000 --> 00:26:04.480
And this is the CodeOn Python compiler.


00:26:04.480 --> 00:26:06.360
Have you heard about this, Brian?


00:26:06.360 --> 00:26:09.840
- Just from people submitting it, so.


00:26:09.840 --> 00:26:14.840
- Yeah, and people talk about Python performance


00:26:14.840 --> 00:26:17.200
all the time.


00:26:17.200 --> 00:26:19.400
Sometimes, I would say most of the time,


00:26:19.400 --> 00:26:20.780
it doesn't really matter to you.


00:26:20.780 --> 00:26:23.040
Most of the time, you're spending way more time


00:26:23.040 --> 00:26:25.340
waiting on a network, waiting on an API call,


00:26:25.340 --> 00:26:27.020
waiting on a database.


00:26:27.020 --> 00:26:29.520
But sometimes it really does matter


00:26:29.520 --> 00:26:31.960
and you need your code to go faster, right?


00:26:31.960 --> 00:26:36.960
So, traditional options have included things like Numba


00:26:36.960 --> 00:26:42.580
or Cython or even PyPy, P-Y-P-Y


00:26:42.580 --> 00:26:46.760
for the JIT compiled version of Python.


00:26:46.760 --> 00:26:49.740
So here's one more thing to put into that category


00:26:49.740 --> 00:26:52.880
of options called Codon from ExaLoop.


00:26:52.880 --> 00:26:57.640
And it's a high-performance, zero-overhead, extensible Python compiler


00:26:57.640 --> 00:26:59.640
using LLVM.


00:26:59.640 --> 00:27:05.880
And LLVM is, you know, a compiler that gets used all the time, of course,


00:27:05.880 --> 00:27:08.600
for a bunch of different things.


00:27:08.600 --> 00:27:14.480
And they claim that it is on the order of 10 to 100 times or more faster


00:27:14.480 --> 00:27:17.680
than regular Python for single-core performance.


00:27:17.680 --> 00:27:22.480
And because it really compiles to some native code,


00:27:22.480 --> 00:27:25.840
They say also, by the way, sometimes better than C++


00:27:25.840 --> 00:27:27.720
in terms of performance.


00:27:27.720 --> 00:27:32.400
But it also, because it compiles some native representation,


00:27:32.400 --> 00:27:35.800
it doesn't involve the GIL, so you also get better scaling.


00:27:35.800 --> 00:27:37.880
And it comes out of this, I think,


00:27:37.880 --> 00:27:43.160
genetics project called SEC, bioinformatics, rather,


00:27:43.160 --> 00:27:45.880
which is this language for bioinformatics.


00:27:45.880 --> 00:27:49.120
And I think what they've decided is like, you know,


00:27:49.120 --> 00:27:52.360
let's just go and just do straight Python.


00:27:52.360 --> 00:28:01.000
Right? And if you go to exaloop.io, they've got a couple of sort of selling points here.


00:28:01.000 --> 00:28:03.480
You know, performance SE is a Python.


00:28:03.480 --> 00:28:07.800
It adopts Python syntax and is fully interoperable with Python.


00:28:07.800 --> 00:28:13.080
And they've got this little flow graphic type thing,


00:28:13.080 --> 00:28:14.360
shows your Python code.


00:28:14.360 --> 00:28:17.640
And if you look, it's not even type annotated, which kind of surprised me, Brian.


00:28:17.640 --> 00:28:21.400
I figured that would at least require you add, you know, Python type ins.


00:28:21.400 --> 00:28:29.660
Yeah, but no, it says you take Python syntax and semantics and you feed it in, it builds


00:28:29.660 --> 00:28:36.980
up an abstract syntax tree, it does some kind of type inference to figure out what the types


00:28:36.980 --> 00:28:42.280
are like ints, comes up with an intermediate representation and then applies a bunch of


00:28:42.280 --> 00:28:47.760
JIT style optimizations and domain specific optimizations and outcomes.


00:28:47.760 --> 00:28:49.340
It's pretty interesting.


00:28:49.340 --> 00:28:51.440
Native code, as I said, but also,


00:28:51.440 --> 00:28:52.580
where does this show?


00:28:52.580 --> 00:28:54.140
I guess it doesn't have a better picture


00:28:54.140 --> 00:28:54.980
'cause it's cut off here.


00:28:54.980 --> 00:28:57.400
Outcomes native code, but also WebAssembly


00:28:57.400 --> 00:29:00.040
and GPU targeted code.


00:29:00.040 --> 00:29:03.180
- That's cool. - Think about that.


00:29:03.180 --> 00:29:04.420
You wanna write some code,


00:29:04.420 --> 00:29:06.980
say this Python code does matrix stuff.


00:29:06.980 --> 00:29:09.280
I want it to run on my NVIDIA GPU,


00:29:09.280 --> 00:29:13.320
you know, --GPU or whatever the thing you do


00:29:13.320 --> 00:29:14.600
to make it come out with that.


00:29:14.600 --> 00:29:16.340
It's pretty wild.


00:29:16.340 --> 00:29:18.280
or put it on the web with WebAssembly.


00:29:18.280 --> 00:29:22.420
- It sounds great.


00:29:22.420 --> 00:29:23.380
- It does sound great.


00:29:23.380 --> 00:29:25.180
So they've got some examples.


00:29:25.180 --> 00:29:28.860
It says, we're gonna have a list of fruits,


00:29:28.860 --> 00:29:31.060
just three strings, banana, apple, and lime,


00:29:31.060 --> 00:29:32.780
and some prices in a dictionary.


00:29:32.780 --> 00:29:35.600
Banana has a price, apple has a price.


00:29:35.600 --> 00:29:37.460
And it says, we're gonna write standard


00:29:37.460 --> 00:29:38.900
for fruit in fruits,


00:29:38.900 --> 00:29:41.260
F string print out the price of the fruit,


00:29:41.260 --> 00:29:44.140
and then it's gonna put a bunch of stuff in the cart


00:29:44.140 --> 00:29:46.860
by doing less multiplication and addition


00:29:46.860 --> 00:29:48.680
like you would expect.


00:29:48.680 --> 00:29:51.000
Call the sum with a comprehension and print it out


00:29:51.000 --> 00:29:52.340
and then boom, no problem.


00:29:52.340 --> 00:29:54.840
Compile that to native code if you want.


00:29:54.840 --> 00:29:56.860
- Okay.


00:29:56.860 --> 00:30:01.140
- Says if you know Python, there's nothing to learn.


00:30:01.140 --> 00:30:04.100
Yeah, there's a bunch of, yeah, go ahead.


00:30:04.100 --> 00:30:06.100
- Question is which Python?


00:30:06.100 --> 00:30:09.380
It says Python syntax, but which Python syntax?


00:30:09.380 --> 00:30:12.660
Is it 310, 39, 311?


00:30:12.660 --> 00:30:16.540
It's not clear other than 3.6 or above,


00:30:16.540 --> 00:30:20.200
'cause the f-strings, the only giveaway I see here.


00:30:20.200 --> 00:30:25.220
- And possibly lots of people are fine


00:30:25.220 --> 00:30:28.660
with not exactly knowing which version of the syntax.


00:30:28.660 --> 00:30:31.260
- Yeah, I didn't say, I mean, maybe if you go into the docs,


00:30:31.260 --> 00:30:34.260
it'll exactly say, right, but not in the little landing page.


00:30:34.260 --> 00:30:36.020
It was initially dissolved


00:30:36.020 --> 00:30:38.640
to solve computing challenges in genomics,


00:30:38.640 --> 00:30:40.780
which is so focused on.


00:30:40.780 --> 00:30:44.840
Also, it's got a bunch of stuff focused on finance


00:30:44.840 --> 00:30:49.560
and GPUs for CUDA programming, as well as WebAssembly,


00:30:49.560 --> 00:30:51.220
which is pretty dope.


00:30:51.220 --> 00:30:52.060
- Yeah.


00:30:52.060 --> 00:30:53.120
- Also, if you scroll down a little bit,


00:30:53.120 --> 00:30:54.880
there's a little video.


00:30:54.880 --> 00:30:56.200
Let me go ahead and tell it to go.


00:30:56.200 --> 00:30:59.180
There's a video, I'll tell it to stop, I don't know,


00:30:59.180 --> 00:31:04.180
where they show it running as a kernel in Jupyter Notebooks.


00:31:04.180 --> 00:31:06.960
- Oh, wow.


00:31:06.960 --> 00:31:11.960
standard Python stuff with like kind of mass intensive


00:31:11.960 --> 00:31:14.500
things and then pulling in Matplotlib


00:31:14.500 --> 00:31:17.960
and showing the various things you get with Matplotlib.


00:31:17.960 --> 00:31:21.060
So yeah, it looks pretty good.


00:31:21.060 --> 00:31:22.220
So what do you think?


00:31:22.220 --> 00:31:25.940
- I think even if it, I'd like to know what version


00:31:25.940 --> 00:31:27.180
of Python it's compatible with,


00:31:27.180 --> 00:31:29.040
but other than that, it looks fun.


00:31:29.040 --> 00:31:31.460
- It looks really good.


00:31:31.460 --> 00:31:32.840
It's on GitHub.


00:31:32.840 --> 00:31:37.040
- Yeah, so it is technically at least source open.


00:31:37.040 --> 00:31:38.400
What is the license here?


00:31:38.400 --> 00:31:41.720
The license is a business source license.


00:31:41.720 --> 00:31:43.720
What the heck is a business source license?


00:31:43.720 --> 00:31:45.900
Okay, from MariaDB Corp.


00:31:45.900 --> 00:31:52.600
Yeah, I'm gonna have to figure out


00:31:52.600 --> 00:31:54.120
what the business source license is.


00:31:54.120 --> 00:31:54.960
I don't know.


00:31:54.960 --> 00:31:56.000
- Just a source.


00:31:56.000 --> 00:31:58.400
You can read the source, but it's hard.


00:31:58.400 --> 00:31:59.240
I don't know.


00:31:59.240 --> 00:32:01.680
- That's what I said, is it source open or is it not?


00:32:01.680 --> 00:32:02.680
- Yeah.


00:32:02.680 --> 00:32:05.360
And so all this stuff is good.


00:32:05.360 --> 00:32:08.200
And the reason I'm hesitant to recommend it,


00:32:08.200 --> 00:32:11.440
but I think these benefits are really big


00:32:11.440 --> 00:32:14.340
and people can use it, then great.


00:32:14.340 --> 00:32:16.280
You go a little further, it says,


00:32:16.280 --> 00:32:19.380
Exalupin U, this is free for non-production use.


00:32:19.380 --> 00:32:22.980
If you wanna use it for things that are commercial,


00:32:22.980 --> 00:32:27.560
then do you know what it costs?


00:32:27.560 --> 00:32:30.160
- Don't know, contact us.


00:32:30.160 --> 00:32:31.760
- I don't know either.


00:32:31.760 --> 00:32:33.960
- If you gotta ask, it's too much for you.


00:32:33.960 --> 00:32:34.800
(laughing)


00:32:34.800 --> 00:32:36.400
So let's just put it there.


00:32:36.400 --> 00:32:37.760
- That's what my dad always said.


00:32:37.760 --> 00:32:40.480
If you gotta ask, you can't afford it.


00:32:40.480 --> 00:32:41.640
- Exactly.


00:32:41.640 --> 00:32:43.440
Which, I don't know.


00:32:43.440 --> 00:32:46.100
I'm not against them charging for it.


00:32:46.100 --> 00:32:48.600
I understand this is probably an insane amount of work


00:32:48.600 --> 00:32:49.440
to put together.


00:32:49.440 --> 00:32:52.480
And if that's their model, that's their prerogative.


00:32:52.480 --> 00:32:53.560
It's fine.


00:32:53.560 --> 00:32:56.000
I don't think everything has to be given away free.


00:32:56.000 --> 00:32:57.920
There's tons of work that goes into a lot of stuff.


00:32:57.920 --> 00:33:01.720
And sometimes charging for it is the right answer.


00:33:01.720 --> 00:33:03.640
but just tell people what it costs.


00:33:03.640 --> 00:33:05.400
You know, don't make them email you.


00:33:05.400 --> 00:33:07.520
That is, it's really not good.


00:33:07.520 --> 00:33:11.280
- Well, so Robert mentions, Robert Robinson,


00:33:11.280 --> 00:33:13.920
maybe it's a sliding scale and it's like,


00:33:13.920 --> 00:33:17.400
it depends on who's asking, you know,


00:33:17.400 --> 00:33:20.840
Microsoft calls up and asks, it's a different price than.


00:33:20.840 --> 00:33:23.080
- I'm sure it is a different price and I'm sure that's,


00:33:23.080 --> 00:33:25.760
oh, do you want to run that on all of Azure?


00:33:25.760 --> 00:33:29.640
Well, here's the price, but, you know,


00:33:29.640 --> 00:33:32.280
put some common cases in there.


00:33:32.280 --> 00:33:35.720
Are you a data scientist and you wanna use it for an API?


00:33:35.720 --> 00:33:36.840
Here's what it costs.


00:33:36.840 --> 00:33:39.080
Are you trying to host it as a server?


00:33:39.080 --> 00:33:40.600
Well, here, like then maybe need to,


00:33:40.600 --> 00:33:43.320
like there should be at least a little bit of a,


00:33:43.320 --> 00:33:47.400
here's the realm of where you start, right?


00:33:47.400 --> 00:33:50.020
A lot of things have, you know, here's the base price,


00:33:50.020 --> 00:33:52.920
here's the pro price, here's the enterprise price,


00:33:52.920 --> 00:33:55.840
and here's the contact us if that doesn't fit you, right?


00:33:55.840 --> 00:33:58.480
But to say it costs money,


00:33:58.480 --> 00:34:00.480
We won't tell you what it costs.


00:34:00.480 --> 00:34:01.320
I don't know.


00:34:01.320 --> 00:34:04.040
It just sounds not great.


00:34:04.040 --> 00:34:07.560
- And I help people so that the free non-production,


00:34:07.560 --> 00:34:10.200
non-commercial versus commercial,


00:34:10.200 --> 00:34:11.680
that's still a fuzzy line.


00:34:11.680 --> 00:34:13.920
And I wish there was like more detail


00:34:13.920 --> 00:34:15.120
whenever anybody does that,


00:34:15.120 --> 00:34:17.880
because I've been in situations a lot


00:34:17.880 --> 00:34:21.000
where I'm just some dude writing a script in a company


00:34:21.000 --> 00:34:22.000
and the company's big,


00:34:22.000 --> 00:34:24.720
but I just want to get this thing to work.


00:34:24.720 --> 00:34:28.120
And it's just a small piece of my build chain or something.


00:34:28.120 --> 00:34:31.420
I'm not gonna get okayed to do a corporate license


00:34:31.420 --> 00:34:35.160
for something just to save me five minutes a day.


00:34:35.160 --> 00:34:36.000
Yeah.


00:34:36.000 --> 00:34:37.340
- Maybe you're not selling it, right?


00:34:37.340 --> 00:34:38.180
- Yeah.


00:34:38.180 --> 00:34:39.000
- For example.


00:34:39.000 --> 00:34:40.360
- Yeah, that's another thing is,


00:34:40.360 --> 00:34:42.040
is it part of the thing I'm selling


00:34:42.040 --> 00:34:45.300
or is it just part of my work to get something else done?


00:34:45.300 --> 00:34:48.040
- Yep, indeed.


00:34:48.040 --> 00:34:50.400
So anyway, pluses and minuses,


00:34:50.400 --> 00:34:52.940
but it's an interesting contribution


00:34:52.940 --> 00:34:55.120
and thanks folks for sending that in.


00:34:55.120 --> 00:34:56.240
- Definitely.


00:34:56.240 --> 00:34:57.400
- Indeed.


00:34:57.400 --> 00:35:00.160
- Well, so I wanna talk about type hints a little bit.


00:35:00.160 --> 00:35:02.120
I've been thinking about type hints a lot


00:35:02.120 --> 00:35:04.880
and ran across this article called


00:35:04.880 --> 00:35:08.980
eight levels of using type hints in Python.


00:35:08.980 --> 00:35:12.080
And it's from Yang Cho.


00:35:12.080 --> 00:35:14.720
And first off, I love the graphic.


00:35:14.720 --> 00:35:19.080
This is a unsplash graphic, but I'm kind of a fan of,


00:35:19.080 --> 00:35:23.820
it looks like posters, like movie,


00:35:23.820 --> 00:35:25.640
or like band posters or something like that


00:35:25.640 --> 00:35:29.940
on something and then half of them are peeled off.


00:35:29.940 --> 00:35:32.120
So cool image.


00:35:32.120 --> 00:35:34.100
Anyway, complete side note.


00:35:34.100 --> 00:35:37.720
But so I was attracted to this


00:35:37.720 --> 00:35:39.280
'cause this eight state,


00:35:39.280 --> 00:35:40.960
I thought, I kind of thought of it


00:35:40.960 --> 00:35:42.920
as like eight stages of using type hints


00:35:42.920 --> 00:35:46.160
'cause that's kind of how I started using type hints


00:35:46.160 --> 00:35:48.620
and it almost got the order the same.


00:35:48.620 --> 00:35:50.760
So let's go through these orders.


00:35:50.760 --> 00:35:53.980
So the first one is, did I skip over it?


00:35:55.600 --> 00:35:59.120
The first was type hints for basic data types.


00:35:59.120 --> 00:36:02.360
So basically, and like you kind of do this


00:36:02.360 --> 00:36:05.000
if you're using data classes at all,


00:36:05.000 --> 00:36:08.440
you just say, well, I've got my age as an int


00:36:08.440 --> 00:36:10.760
and it defaults to 29.


00:36:10.760 --> 00:36:14.040
Just to kind of tell people what you're thinking about.


00:36:14.040 --> 00:36:19.040
And while you're, you know, my posts are a tuple


00:36:19.040 --> 00:36:22.660
and they default to an empty tuple or something.


00:36:22.660 --> 00:36:25.580
So this is pretty much how I started as well.


00:36:25.580 --> 00:36:29.420
And I started mostly because I started using data classes


00:36:29.420 --> 00:36:31.060
and this is what they look like


00:36:31.060 --> 00:36:35.180
when you're declaring the contents of a data class.


00:36:35.180 --> 00:36:39.140
And then, so where do you go from there?


00:36:39.140 --> 00:36:44.140
The next stage is defining a constant using final type.


00:36:44.140 --> 00:36:47.580
Actually, I've never used this.


00:36:47.580 --> 00:36:48.820
Have you ever used final?


00:36:48.820 --> 00:36:52.060
- I've wanted to use it, but it's so,


00:36:54.820 --> 00:36:58.400
it's so not exactly enforced type of thing.


00:36:58.400 --> 00:36:59.400
It's like--


00:36:59.400 --> 00:37:01.940
- Right, Python doesn't enforce it, but--


00:37:01.940 --> 00:37:05.600
- I would love to have a constant in Python,


00:37:05.600 --> 00:37:07.760
but doing it through typing means the only time


00:37:07.760 --> 00:37:09.640
it's gonna be validated or checked


00:37:09.640 --> 00:37:11.360
is if I run mypy or something,


00:37:11.360 --> 00:37:13.760
and most of the time I'm not, you know?


00:37:13.760 --> 00:37:16.640
So it's like, well, okay, whatever, I'm not doing that.


00:37:16.640 --> 00:37:19.360
- Yeah, I'm actually increasing the amount of times


00:37:19.360 --> 00:37:24.360
I'm using mypy or other type checking things,


00:37:24.400 --> 00:37:27.280
But yeah, I wouldn't have put this number two,


00:37:27.280 --> 00:37:29.560
but minor grape, it's kind of a cool feature.


00:37:29.560 --> 00:37:30.400
- It is a cool feature though.


00:37:30.400 --> 00:37:33.000
Yeah, I don't knock it's existence.


00:37:33.000 --> 00:37:36.120
I just wish it was more supported in the language.


00:37:36.120 --> 00:37:37.280
- Yeah.


00:37:37.280 --> 00:37:41.920
The third is adding multiple type hints to one variable.


00:37:41.920 --> 00:37:45.380
Like it shows here a couple of different ways,


00:37:45.380 --> 00:37:50.380
the union of an int and a float or the bar of int and float.


00:37:50.720 --> 00:37:54.800
And the number one way I use this,


00:37:54.800 --> 00:37:56.960
I mean, I use things like this also,


00:37:56.960 --> 00:37:58.600
like it could be an interflow,


00:37:58.600 --> 00:38:03.600
but I mostly use it for like int or none


00:38:03.600 --> 00:38:04.840
or something or none


00:38:04.840 --> 00:38:07.680
because I've got a default value of none.


00:38:07.680 --> 00:38:10.760
And I kind of wish there was another way to do it.


00:38:10.760 --> 00:38:13.400
'Cause when you have a, I don't know,


00:38:13.400 --> 00:38:14.600
it's kind of convenient anyway,


00:38:14.600 --> 00:38:17.800
but like, let's say I've got a parameter to a function


00:38:17.800 --> 00:38:21.240
And it defaults when I internally I assign it,


00:38:21.240 --> 00:38:24.240
it defaults to none if nobody passes anything in.


00:38:24.240 --> 00:38:27.280
But I also don't really want somebody to pass none in.


00:38:27.280 --> 00:38:33.200
So I wish there was a, like the default is none,


00:38:33.200 --> 00:38:35.880
but users can't pass in or something like that.


00:38:35.880 --> 00:38:37.960
- Yeah.


00:38:37.960 --> 00:38:39.680
- But anyway, it works.


00:38:39.680 --> 00:38:43.000
And in the end, it helps with testing anyway,


00:38:43.000 --> 00:38:45.740
to be able to pass in all the types.


00:38:45.740 --> 00:38:48.900
But so yeah, the, and I've totally switched


00:38:48.900 --> 00:38:50.060
to the bar thing.


00:38:50.060 --> 00:38:52.340
I think it was 310 that added that.


00:38:52.340 --> 00:38:53.500
Do you remember?


00:38:53.500 --> 00:38:54.340
I think it was 310.


00:38:54.340 --> 00:38:55.300
- I think it was 310.


00:38:55.300 --> 00:38:56.140
Yeah, it says right here.


00:38:56.140 --> 00:38:57.420
- It says there, yeah.


00:38:57.420 --> 00:38:58.240
- Yeah.


00:38:58.240 --> 00:39:01.340
So anything I'm writing, I support 310 and above


00:39:01.340 --> 00:39:03.160
because I like the bar.


00:39:03.160 --> 00:39:07.420
The next thing is using general type hints,


00:39:07.420 --> 00:39:11.100
which also this is, yeah, I think now we're starting


00:39:11.100 --> 00:39:13.420
to increase the stage of understanding


00:39:13.420 --> 00:39:15.980
of how type hints can help you.


00:39:15.980 --> 00:39:18.100
And the notion like in the example,


00:39:18.100 --> 00:39:20.980
they use a iterable as,


00:39:20.980 --> 00:39:24.820
as, you know, from typing import iterable.


00:39:24.820 --> 00:39:25.980
So you say that, you know,


00:39:25.980 --> 00:39:28.760
I'm accepting something like numbers


00:39:28.760 --> 00:39:30.220
and it takes an iterable.


00:39:30.220 --> 00:39:34.020
I love this use and I, you know,


00:39:34.020 --> 00:39:36.020
it takes a little bit more of advanced use.


00:39:36.020 --> 00:39:38.340
You get a little more comfortable with type hints


00:39:38.340 --> 00:39:40.220
and to be able to say,


00:39:40.220 --> 00:39:43.480
I'm gonna do iteration like for in and nums.


00:39:43.480 --> 00:39:44.660
It doesn't really matter what it is,


00:39:44.660 --> 00:39:47.780
if it's a list or a tuple or something else,


00:39:47.780 --> 00:39:51.020
as long as I can iterate over it, it's good.


00:39:51.020 --> 00:39:55.060
So, the other thing is probably,


00:39:55.060 --> 00:39:58.260
and I'm not sure why they didn't put, is optional,


00:39:58.260 --> 00:40:00.740
but along the same is iterable.


00:40:00.740 --> 00:40:03.540
I like, I'm gonna often say it's iterable,


00:40:03.540 --> 00:40:07.760
but the type inside is an int or something like that.


00:40:08.700 --> 00:40:10.280
But anyway.


00:40:10.280 --> 00:40:11.260
- Right.


00:40:11.260 --> 00:40:12.100
- The fifth one is-


00:40:12.100 --> 00:40:13.940
- You got to get a little bracket int or something like that


00:40:13.940 --> 00:40:15.980
or a little bracket string so you know what you get out.


00:40:15.980 --> 00:40:17.460
Yeah.


00:40:17.460 --> 00:40:19.540
- The fifth is type hints for functions.


00:40:19.540 --> 00:40:21.740
And I probably would have put this as like number two


00:40:21.740 --> 00:40:26.260
'cause I started using this right away of, yeah.


00:40:26.260 --> 00:40:31.260
Just to say, 'cause that's one of the things that's hard


00:40:31.260 --> 00:40:35.820
when I came to Python from C++ is knowing


00:40:35.820 --> 00:40:38.380
like where do I put the return value?


00:40:38.380 --> 00:40:41.300
like the return type is, you know,


00:40:41.300 --> 00:40:43.420
maybe it's multiple return types,


00:40:43.420 --> 00:40:45.300
which I don't really want it to be,


00:40:45.300 --> 00:40:48.820
but it's nice to be able to see what the return type is


00:40:48.820 --> 00:40:52.100
and type hints add that with type hints for functions.


00:40:52.100 --> 00:40:53.660
- Or you read a function, you know,


00:40:53.660 --> 00:40:55.980
like I want to call that, but what do I do?


00:40:55.980 --> 00:40:57.780
- Yeah.


00:40:57.780 --> 00:40:58.600
- I'm gonna pass to it, right?


00:40:58.600 --> 00:41:00.120
Do I have to read the function and try to understand it


00:41:00.120 --> 00:41:02.020
or can I just read the definition, right?


00:41:02.020 --> 00:41:04.740
I think this is one of the main uses, right?


00:41:04.740 --> 00:41:08.260
- And it's also nice to be able to see right there,


00:41:08.260 --> 00:41:11.300
with a union type is not a possibility.


00:41:11.300 --> 00:41:13.820
You have to deal with nothing coming back


00:41:13.820 --> 00:41:17.180
as something is possible.


00:41:17.180 --> 00:41:19.140
Number six is alias for type hints.


00:41:19.140 --> 00:41:21.540
And I kind of love this.


00:41:21.540 --> 00:41:23.740
I haven't been using this much


00:41:23.740 --> 00:41:25.440
but I'm gonna start using it more.


00:41:25.440 --> 00:41:29.260
Especially it says in Python 3.10.


00:41:29.260 --> 00:41:32.060
So before Python 3.10, you had to do


00:41:32.060 --> 00:41:33.980
like from typing import type alias


00:41:33.980 --> 00:41:36.600
and have this weird syntax thing around it.


00:41:37.820 --> 00:41:40.300
but it's not really that weird.


00:41:40.300 --> 00:41:44.180
But after 3.10, you just sort of declare a thing.


00:41:44.180 --> 00:41:45.500
It says like post type,


00:41:45.500 --> 00:41:48.700
posts type is a dict that goes from int to string.


00:41:48.700 --> 00:41:50.100
That's great.


00:41:50.100 --> 00:41:53.300
And then you can use that as a type hint in other places.


00:41:53.300 --> 00:41:54.140
So.


00:41:54.140 --> 00:41:54.960
- And that's interesting.


00:41:54.960 --> 00:41:55.800
That's news to me.


00:41:55.800 --> 00:41:57.220
Yeah, that's really interesting.


00:41:57.220 --> 00:41:59.660
- So definitely, I'll definitely start using that.


00:41:59.660 --> 00:42:02.060
So I'm glad I read the article for that.


00:42:02.060 --> 00:42:05.020
Type hints for a class itself,


00:42:05.020 --> 00:42:07.420
which I'm not sure why it was titled this,


00:42:07.420 --> 00:42:09.980
but basically it's the self type.


00:42:09.980 --> 00:42:13.380
And this is very helpful if you have a class,


00:42:13.380 --> 00:42:16.100
a class that has objects that refer to other objects


00:42:16.100 --> 00:42:16.940
of the same type.


00:42:16.940 --> 00:42:20.460
I don't know how you did that before then.


00:42:20.460 --> 00:42:22.860
I guess I wasn't caring about it, but.


00:42:22.860 --> 00:42:26.140
- You had to, there was a hack where you put it into quotes.


00:42:26.140 --> 00:42:28.620
So the example from this article is a class


00:42:28.620 --> 00:42:30.340
called list node,


00:42:30.340 --> 00:42:32.460
and it's gonna be past the previous node, right?


00:42:32.460 --> 00:42:33.940
So what is the type of that?


00:42:33.940 --> 00:42:36.180
Well, it should be a list node.


00:42:36.180 --> 00:42:37.020
- Yeah.


00:42:37.020 --> 00:42:39.860
is in the process of building up the list node class.


00:42:39.860 --> 00:42:41.260
So it doesn't yet know what it is,


00:42:41.260 --> 00:42:43.960
but you're trying to define a function that has that.


00:42:43.960 --> 00:42:47.100
So there's this weird catch 22 thing,


00:42:47.100 --> 00:42:48.160
chicken and egg thing.


00:42:48.160 --> 00:42:51.040
So what you put is you would put list node in quotes.


00:42:51.040 --> 00:42:52.180
That's the old version.


00:42:52.180 --> 00:42:54.580
And of course it was just a string,


00:42:54.580 --> 00:42:55.420
but then it's like, well,


00:42:55.420 --> 00:42:57.220
but it's a string that says that.


00:42:57.220 --> 00:43:00.140
So we're going to just guess that that's what you want.


00:43:00.140 --> 00:43:01.140
No, it was weird.


00:43:01.140 --> 00:43:02.980
- Okay.


00:43:02.980 --> 00:43:06.460
Well, the eighth and final one is to provide literals


00:43:06.460 --> 00:43:08.700
for variables and I haven't done this,


00:43:08.700 --> 00:43:10.020
but it's kind of nice also.


00:43:10.020 --> 00:43:12.100
And I didn't know you could do this.


00:43:12.100 --> 00:43:13.980
Just to say, and in the example,


00:43:13.980 --> 00:43:17.260
it's from typing import literal,


00:43:17.260 --> 00:43:20.500
and then you define like a weekend,


00:43:20.500 --> 00:43:23.620
that's a literal that can only be the strings,


00:43:23.620 --> 00:43:25.620
Saturday or Sunday.


00:43:25.620 --> 00:43:28.220
And so this isn't an enumeration,


00:43:28.220 --> 00:43:31.820
it's just saying that it can only have


00:43:31.820 --> 00:43:33.380
these particular values.


00:43:33.380 --> 00:43:36.140
So I think I got that right.


00:43:36.140 --> 00:43:40.040
I don't think it has to be an enumeration, but no, no.


00:43:40.040 --> 00:43:43.080
So this, this is, and the, and so like the example says,


00:43:43.080 --> 00:43:46.540
well, if you assign that variable to Monday,


00:43:46.540 --> 00:43:49.140
it's gonna, your, your type checkers are gonna complain


00:43:49.140 --> 00:43:51.740
because you didn't assign the one of the known ones.


00:43:51.740 --> 00:43:56.920
And I probably would use this in conjunction with enums


00:43:56.920 --> 00:44:00.560
or maybe I don't have to with enums, I don't know, but,


00:44:00.560 --> 00:44:03.520
but there's a lot of stuff that is passed around


00:44:03.520 --> 00:44:05.920
that it's kind of like an enum, but it's passed around.


00:44:05.920 --> 00:44:07.840
is just a handful of strings that it can only


00:44:07.840 --> 00:44:09.120
be one of these strings.


00:44:09.120 --> 00:44:12.360
- Yeah, it'd be nice for this to support it.


00:44:12.360 --> 00:44:15.480
Henry on the audience points out that x colon final


00:44:15.480 --> 00:44:19.280
equals true also maps to one of these literal checks.


00:44:19.280 --> 00:44:21.880
So is literal true rather than just a bool


00:44:21.880 --> 00:44:24.440
so the type checker can make sure it's always true,


00:44:24.440 --> 00:44:26.380
not true or false.


00:44:26.380 --> 00:44:29.120
So there's an interesting tie together of those as well.


00:44:29.120 --> 00:44:32.440
And Robert points out that it sounds like a case


00:44:32.440 --> 00:44:33.280
of the Mondays.


00:44:33.280 --> 00:44:35.460
- Oh, dear.


00:44:35.460 --> 00:44:40.100
And Henry mentions that last time I checked,


00:44:40.100 --> 00:44:41.740
self is not supported by mypy,


00:44:41.740 --> 00:44:44.020
but so we'll have to check on that.


00:44:44.020 --> 00:44:44.860
- Yeah.


00:44:44.860 --> 00:44:46.440
- Anybody from mypy listening?


00:44:46.440 --> 00:44:48.580
- Let us know.


00:44:48.580 --> 00:44:49.400
- Let us know.


00:44:49.400 --> 00:44:52.760
Well, that's it for this.


00:44:52.760 --> 00:44:54.620
I just thought it was a good,


00:44:54.620 --> 00:44:57.460
and I do think this is a good idea


00:44:57.460 --> 00:45:00.920
is to not try to jump in the deep end of type hints.


00:45:02.420 --> 00:45:04.500
try some of the simple stuff first,


00:45:04.500 --> 00:45:07.040
and then you get to caring about it.


00:45:07.040 --> 00:45:10.780
- Yeah, that was a good little discussion around it.


00:45:10.780 --> 00:45:11.940
That was fun.


00:45:11.940 --> 00:45:13.020
- Yeah.


00:45:13.020 --> 00:45:14.380
- All right, got any extras for us


00:45:14.380 --> 00:45:15.580
you want to throw out there?


00:45:15.580 --> 00:45:17.940
- The only extra I wanted to bring up


00:45:17.940 --> 00:45:20.300
is the testing code hasn't had an episode


00:45:20.300 --> 00:45:23.540
since like October or something, and it's not dead.


00:45:23.540 --> 00:45:26.940
I just kind of wanted to take the holiday off


00:45:26.940 --> 00:45:30.460
without telling anybody, and it's coming back.


00:45:30.460 --> 00:45:33.460
So sometime in January, there will be a test and code episode.


00:45:33.460 --> 00:45:34.260
Oh, excellent.


00:45:34.260 --> 00:45:35.620
Looking forward to it.


00:45:35.620 --> 00:45:38.420
I have a few extras, and one leads to another,


00:45:38.420 --> 00:45:41.340
which leads to another, as is the nature of all these things.


00:45:41.340 --> 00:45:44.700
So I ran across a couple of articles--


00:45:44.700 --> 00:45:45.900
let me start that way--


00:45:45.900 --> 00:45:48.140
that sort of talked about RSS and how


00:45:48.140 --> 00:45:51.200
RSS is actually kind of important as a foundation


00:45:51.200 --> 00:45:54.740
of the independent web in ways maybe bigger than I really


00:45:54.740 --> 00:45:55.660
realized.


00:45:55.660 --> 00:45:57.540
So there's this one called Back to RSS.


00:45:57.540 --> 00:45:59.660
I'll just read a little excerpt from each of them.


00:45:59.660 --> 00:46:03.060
It says, it's 2023 or 1999 or whatever.


00:46:03.060 --> 00:46:04.740
Personal sites are back, blogs are back,


00:46:04.740 --> 00:46:07.060
RSS is back and owning your data is becoming real,


00:46:07.060 --> 00:46:09.460
which is kind of a cool thing.


00:46:09.460 --> 00:46:11.820
And then also there's this one the same day


00:46:11.820 --> 00:46:16.580
on the Verge called Bring Back Personal Blogging.


00:46:16.580 --> 00:46:19.860
And yeah, anyway, so I ended up writing


00:46:19.860 --> 00:46:23.700
a Welcome Back RSS article that kind of riffed on those ideas


00:46:23.700 --> 00:46:26.300
and talked about some more, talked about Reader,


00:46:26.300 --> 00:46:28.660
which I talked about before and stuff.


00:46:28.660 --> 00:46:32.540
So yeah, anyway, people can go check out that article


00:46:32.540 --> 00:46:33.380
and it's interesting.


00:46:33.380 --> 00:46:36.460
And as part of the conversation,


00:46:36.460 --> 00:46:40.860
I learned about Reader, as in reader.readthedocs.io,


00:46:40.860 --> 00:46:44.100
which is a reader, is a Python feed reader library.


00:46:44.100 --> 00:46:46.940
So it does things like let you subscribe


00:46:46.940 --> 00:46:50.240
with Python to RSS and Atom and JSON feeds,


00:46:50.240 --> 00:46:52.340
mark articles as read and important,


00:46:52.340 --> 00:46:55.340
filter them, get stats, do all of it.


00:46:55.340 --> 00:46:59.180
Like basically if you wanted the logical internals


00:46:59.180 --> 00:47:02.560
of an RSS reader, here's a Python library to do that,


00:47:02.560 --> 00:47:03.860
which is cool.


00:47:03.860 --> 00:47:05.860
- No, what we need to do is have a listener,


00:47:05.860 --> 00:47:09.140
like take reader and put a textual front end on it.


00:47:09.140 --> 00:47:10.740
So we have like a-


00:47:10.740 --> 00:47:13.220
- Yes, actually, that's a pretty interesting idea.


00:47:13.220 --> 00:47:14.060
- That'd be cool.


00:47:14.060 --> 00:47:19.700
- This guy over here built a thing called Kustos,


00:47:19.700 --> 00:47:23.980
which is basically like Instapaper,


00:47:23.980 --> 00:47:26.980
self-hosted Python web app built on Reader.


00:47:26.980 --> 00:47:28.340
So people can check that out.


00:47:28.340 --> 00:47:30.780
And then ReadWise looks really interesting.


00:47:30.780 --> 00:47:32.380
Are you familiar with ReadWise?


00:47:32.380 --> 00:47:33.660
- No.


00:47:33.660 --> 00:47:36.640
- So it's like an RSS reader,


00:47:36.640 --> 00:47:39.780
but it also lets you take notes,


00:47:39.780 --> 00:47:41.540
mark stuff as read for later,


00:47:41.540 --> 00:47:43.260
even if it doesn't have an RSS feed


00:47:43.260 --> 00:47:45.700
and highlight like your research


00:47:45.700 --> 00:47:47.640
as you're going through it and save it.


00:47:47.640 --> 00:47:49.580
So think how good that would be for people that say,


00:47:49.580 --> 00:47:51.940
do podcast, you gotta remember a bunch of stuff


00:47:51.940 --> 00:47:53.020
about an article.


00:47:53.020 --> 00:47:54.900
pull that thing back up and it's got your highlights


00:47:54.900 --> 00:47:55.940
and your notes on it.


00:47:55.940 --> 00:47:57.880
- Oh, I'm liking this.


00:47:57.880 --> 00:47:59.020
I'm gonna have to check it out.


00:47:59.020 --> 00:48:00.180
- Yeah, that's looking pretty good.


00:48:00.180 --> 00:48:02.980
So anyway, all that stuff came from this little article


00:48:02.980 --> 00:48:04.580
that I wrote, people can check that out.


00:48:04.580 --> 00:48:05.420
- Nice.


00:48:05.420 --> 00:48:07.340
- Another very important thing.


00:48:07.340 --> 00:48:12.340
There's this Mastodon account called Year Progress.


00:48:12.340 --> 00:48:17.740
And it just goes along and every day,


00:48:17.740 --> 00:48:22.740
it just posts a progress bar for how far we are


00:48:22.740 --> 00:48:25.100
in the daily progress.


00:48:25.100 --> 00:48:29.700
So it's like a little ASCII, you know,


00:48:29.700 --> 00:48:33.860
TQ, DM style progress bar of the year.


00:48:33.860 --> 00:48:37.500
And it's just notable that we just had 100% progress


00:48:37.500 --> 00:48:38.980
for the year.


00:48:38.980 --> 00:48:43.300
Now that we're done, it's reset to zero, but it was 100%.


00:48:43.300 --> 00:48:45.260
- Actually, it looks like it doesn't actually do it


00:48:45.260 --> 00:48:47.620
every day, but it does it when it goes to a new percentage.


00:48:47.620 --> 00:48:50.140
So it's every few days or two or three days, right?


00:48:50.140 --> 00:48:52.100
- Yeah, yeah, it looks like it.


00:48:52.100 --> 00:48:53.660
which I guess is probably good.


00:48:53.660 --> 00:48:56.180
I mean, thank you for not doing it.


00:48:56.180 --> 00:49:01.020
It's like saving 3.6, 2.6 posts, something like that.


00:49:01.020 --> 00:49:03.300
All right.


00:49:03.300 --> 00:49:05.100
- And don't just watch it, wait for it.


00:49:05.100 --> 00:49:09.740
- It's not that exciting, it doesn't actually happen.


00:49:09.740 --> 00:49:13.780
It has no decimal point, so it's not,


00:49:13.780 --> 00:49:15.340
it's gotta work in big ASCII blocks,


00:49:15.340 --> 00:49:16.340
so it does what it does.


00:49:16.340 --> 00:49:20.240
All right, this is something that people might wanna keep


00:49:20.240 --> 00:49:26.400
an ION who had automated build running over the winter break


00:49:26.400 --> 00:49:28.520
and also used PyTorch.


00:49:28.520 --> 00:49:33.320
So one of the thoughts I had was I was just


00:49:33.320 --> 00:49:34.500
kind of kicking back.


00:49:34.500 --> 00:49:35.000
We're hanging around.


00:49:35.000 --> 00:49:36.540
I'm like, you know, I'm going to work


00:49:36.540 --> 00:49:38.300
on some of these little weird projects.


00:49:38.300 --> 00:49:41.240
Like, I'd like the login page on top of Python chain


00:49:41.240 --> 00:49:43.120
to just be a little smoother and cleaner.


00:49:43.120 --> 00:49:44.040
Maybe I'll just go play with that.


00:49:44.040 --> 00:49:45.800
Like, I'm not really going to do real work,


00:49:45.800 --> 00:49:47.640
but it'd be kind of fun to do some web design


00:49:47.640 --> 00:49:51.140
just sort of like no pressure, redesign that a little bit.


00:49:51.140 --> 00:49:54.140
And I thought, but I'm gonna be careful


00:49:54.140 --> 00:49:57.460
about adding new libraries, updating existing ones


00:49:57.460 --> 00:50:00.940
like pip-tools, style, update them.


00:50:00.940 --> 00:50:02.820
Because is anybody watching?


00:50:02.820 --> 00:50:04.520
And if something bad got in there,


00:50:04.520 --> 00:50:07.940
would anybody know or are they all on break, right?


00:50:07.940 --> 00:50:12.620
Well, it turns out my paranoid side was onto something,


00:50:12.620 --> 00:50:14.060
luckily not anything I was using,


00:50:14.060 --> 00:50:17.180
but PyTorch discloses malicious dependency chain


00:50:17.180 --> 00:50:18.880
compromise over the holidays.


00:50:18.880 --> 00:50:22.900
This is bad.


00:50:22.900 --> 00:50:26.880
If you pip installed somehow the PyTorch stuff,


00:50:26.880 --> 00:50:28.920
I don't know the exact how it links together,


00:50:28.920 --> 00:50:31.740
but it says PyTorch has identified a malicious dependency


00:50:31.740 --> 00:50:36.740
with the same name as the frameworks Torch Triton library.


00:50:36.740 --> 00:50:41.720
So that was like somehow shipped or directly linked


00:50:41.720 --> 00:50:44.740
in PyTorch in a way that I don't fully understand


00:50:44.740 --> 00:50:46.060
'cause I don't use it.


00:50:46.060 --> 00:50:50.220
But what happened is on Merry Merry Christmas,


00:50:50.220 --> 00:50:58.060
on December 25th, users who installed PyTorch nightly


00:50:58.060 --> 00:51:00.060
should ensure their systems are not compromised


00:51:00.060 --> 00:51:01.740
because of this Triton torch.


00:51:01.740 --> 00:51:05.700
What they did is somebody put a malicious version on PyPI


00:51:05.700 --> 00:51:07.980
and when PyTorch was getting set up,


00:51:07.980 --> 00:51:09.500
instead of picking its own version,


00:51:09.500 --> 00:51:13.300
it preferred the PyPI version, which was a virus.


00:51:14.820 --> 00:51:17.060
So anyway, people can check that out.


00:51:17.060 --> 00:51:18.940
It's sub-ideal.


00:51:18.940 --> 00:51:20.900
Since the PyPI index takes precedence,


00:51:20.900 --> 00:51:24.140
this malicious package was being installed


00:51:24.140 --> 00:51:26.540
instead of the version from the official repository.


00:51:26.540 --> 00:51:28.920
This enables somebody to register a package


00:51:28.920 --> 00:51:30.620
to do bad things.


00:51:30.620 --> 00:51:32.060
Anyway, people can read all about that,


00:51:32.060 --> 00:51:34.860
but if you have PyTorch and you pip installed it


00:51:34.860 --> 00:51:38.260
over the point of break, read that.


00:51:38.260 --> 00:51:40.420
- Yeah.


00:51:40.420 --> 00:51:42.140
Plus, kudos for them for coming up


00:51:42.140 --> 00:51:44.860
with a great domain name, bleepingcomputer.com.


00:51:44.860 --> 00:51:46.260
- Yes, I know, bleepingcomputer.


00:51:46.260 --> 00:51:48.660
There's a lot of good articles on bleepingcomputer.


00:51:48.660 --> 00:51:49.900
It's in my RSS feed.


00:51:49.900 --> 00:51:54.260
All right, well, that's all I got for extras.


00:51:54.260 --> 00:51:55.580
How about a joke?


00:51:55.580 --> 00:51:56.940
- Yeah, that sounds great.


00:51:56.940 --> 00:51:58.820
- So first of all, let me,


00:51:58.820 --> 00:52:01.900
I don't wanna kill the punchline before we set the stage.


00:52:01.900 --> 00:52:04.500
Okay, so I pulled up just the picture.


00:52:04.500 --> 00:52:06.940
Can you tell people what this is on the screen, Brian?


00:52:06.940 --> 00:52:08.380
You remember these things?


00:52:08.380 --> 00:52:10.620
- Well, remember, they're still there.


00:52:11.540 --> 00:52:13.940
on my laptop. Not on my Mac Mini.


00:52:13.940 --> 00:52:18.460
Okay, it's on the back of like a computer or something. A desktop


00:52:18.460 --> 00:52:22.060
computer. Next to the power cord. There's a toggle switch


00:52:22.060 --> 00:52:25.020
with a on and off toggle switch for


00:52:25.020 --> 00:52:29.060
Right, it's like a physical power button directly on the


00:52:29.060 --> 00:52:32.100
power supply on a desktop computer, right? Yep. Yeah. And


00:52:32.100 --> 00:52:36.220
Robert, Robert got it exactly right. So here is the joke. They


00:52:36.220 --> 00:52:38.260
They finally made a switch to exit Vim.


00:52:38.260 --> 00:52:40.500
(laughing)


00:52:40.500 --> 00:52:44.700
And they've highlighted that physical power button


00:52:44.700 --> 00:52:46.300
on the back of the power supply.


00:52:46.300 --> 00:52:49.780
- Nice.


00:52:49.780 --> 00:52:55.140
- You're a Vim lover, so I won't run into too much,


00:52:55.140 --> 00:52:57.380
but that's a pretty effective way to exit Vim.


00:52:57.380 --> 00:53:00.960
- Vim runs in a window, so just close the window.


00:53:06.140 --> 00:53:08.260
- A funny thing about power switches.


00:53:08.260 --> 00:53:10.460
So I used to work with a lot of,


00:53:10.460 --> 00:53:12.940
so I work with embedded systems


00:53:12.940 --> 00:53:16.020
and some of them run Windows embedded.


00:53:16.020 --> 00:53:20.340
And embedded systems are supposed to be able


00:53:20.340 --> 00:53:23.500
to toggle the power off just like from the power supply.


00:53:23.500 --> 00:53:27.100
And now normal Windows, you're not supposed to do that


00:53:27.100 --> 00:53:30.700
because you wanna let it shut down gracefully.


00:53:30.700 --> 00:53:32.940
And if the disk is moving at the time,


00:53:32.940 --> 00:53:34.660
and there's even with Windows embedded,


00:53:34.660 --> 00:53:37.980
there's some issues or any embedded operating system,


00:53:37.980 --> 00:53:41.580
there are a possibility you could do some damage to the disk


00:53:41.580 --> 00:53:44.900
if you power off at exactly the right time.


00:53:44.900 --> 00:53:46.780
But there's supposed to be safeguards in place


00:53:46.780 --> 00:53:48.220
to take care of it.


00:53:48.220 --> 00:53:51.180
So I'm just in the habit of using these things all the time


00:53:51.180 --> 00:53:53.700
of like toggle off and on.


00:53:53.700 --> 00:53:56.140
And if we get like a new batch of people


00:53:56.140 --> 00:54:00.460
in that are mostly from DevOps or from non-embedded worlds,


00:54:00.460 --> 00:54:02.620
they're like, "What are you doing?"


00:54:02.620 --> 00:54:03.500
- You're gonna break it.


00:54:03.500 --> 00:54:04.460
Yeah, you're gonna break it.


00:54:04.460 --> 00:54:06.940
Like, no, these are good.


00:54:06.940 --> 00:54:07.780
- Yeah.


00:54:07.780 --> 00:54:09.460
So that's awesome.


00:54:09.460 --> 00:54:12.340
Yeah, my little circuit Python thing,


00:54:12.340 --> 00:54:13.520
it doesn't have a power switch.


00:54:13.520 --> 00:54:16.780
You just disconnect it from power if you want it off.


00:54:16.780 --> 00:54:18.660
That's how it works.


00:54:18.660 --> 00:54:20.380
- Well, and one of the reasons,


00:54:20.380 --> 00:54:21.380
now I'm going in the weeds,


00:54:21.380 --> 00:54:23.920
but one of the reasons for the need


00:54:23.920 --> 00:54:25.420
for the ability to just power off


00:54:25.420 --> 00:54:28.260
is 'cause a lot of times instruments are in a huge rack


00:54:28.260 --> 00:54:29.380
and you don't go through


00:54:29.380 --> 00:54:31.340
and power off each individual instrument.


00:54:31.340 --> 00:54:32.760
You just turn the rack off.


00:54:32.760 --> 00:54:37.040
>> Wow, interesting. Cool.


00:54:37.040 --> 00:54:40.440
Well, it's good to be back in 2023.


00:54:40.440 --> 00:54:42.680
>> Yeah, it is good to be back.


00:54:42.680 --> 00:54:47.720
Welcome back and thanks everybody for tuning in.


00:54:47.720 --> 00:54:49.880
>> Yeah, you bet. Bye all.


00:54:49.880 --> 00:54:51.560
>> Bye.


00:54:51.560 --> 00:55:01.560
[BLANK_AUDIO]

