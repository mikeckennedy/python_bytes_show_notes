WEBVTT

00:00:00.000 --> 00:00:09.120
Hey, everybody. Welcome to the show. Thanks for thanks for holding out a little bit. And


00:00:09.120 --> 00:00:16.400
everybody that's listening to this on as a post recording, then nothing bad happened.


00:00:16.400 --> 00:00:21.560
Anyway, let's get started. Are you ready, Michael?


00:00:21.560 --> 00:00:27.440
I am very ready. Sorry for the delay, everyone. I came from one podcast live stream to another


00:00:27.440 --> 00:00:30.560
and we almost crossed the streams, which you know, Brian,


00:00:30.560 --> 00:00:31.760
you cannot cross the stream.


00:00:31.760 --> 00:00:32.600
- Never crossed the stream.


00:00:32.600 --> 00:00:35.960
- We've all seen Ghostbusters.


00:00:35.960 --> 00:00:37.280
- Yeah.


00:00:37.280 --> 00:00:39.800
All right, well, let's get started.


00:00:39.800 --> 00:00:41.320
Hello and welcome to Python Bytes


00:00:41.320 --> 00:00:43.440
where we deliver Python news and headlines


00:00:43.440 --> 00:00:44.760
directly to your earbuds.


00:00:44.760 --> 00:00:49.760
This is episode 339, recorded June 6th, 2023.


00:00:49.760 --> 00:00:51.480
Is it the 6th?


00:00:51.480 --> 00:00:52.320
Yeah.


00:00:52.320 --> 00:00:53.880
I am Brian Okken.


00:00:53.880 --> 00:00:54.920
- I'm Michael Kennedy.


00:00:54.920 --> 00:00:59.920
- And today's episode is sponsored by InfluxDB


00:00:59.920 --> 00:01:03.520
from InfluxData.


00:01:03.520 --> 00:01:04.360
Thank you.


00:01:04.360 --> 00:01:07.320
And we'll talk about them more later in the show.


00:01:07.320 --> 00:01:10.560
If you want to reach any of us or the show,


00:01:10.560 --> 00:01:13.000
you can, we have a contact form, of course,


00:01:13.000 --> 00:01:16.640
you can, and then also mkennedy at Fosstodon


00:01:16.640 --> 00:01:19.420
and Brian Okken and Python Bytes,


00:01:19.420 --> 00:01:22.140
all Fosstodon, Mastodon locations.


00:01:23.080 --> 00:01:26.500
If you're listening to us on a recording


00:01:26.500 --> 00:01:30.140
or on YouTube or on a podcast player,


00:01:30.140 --> 00:01:34.460
please join us on YouTube at pythonbytes.fm/live,


00:01:34.460 --> 00:01:36.240
at least occasionally, 'cause it's fun


00:01:36.240 --> 00:01:38.840
to have people hanging around while we're recording.


00:01:38.840 --> 00:01:40.600
It's usually Tuesdays at 11,


00:01:40.600 --> 00:01:44.040
and you can watch older versions there too.


00:01:44.040 --> 00:01:48.340
So let's kick it off with something stacky.


00:01:48.340 --> 00:01:49.340
- Something stacky.


00:01:49.340 --> 00:01:52.540
You feeling like some pancakes, a stack of pancakes?


00:01:52.540 --> 00:01:53.500
- Yeah.


00:01:53.500 --> 00:01:54.580
- How about a PyStack?


00:01:54.580 --> 00:01:58.580
So the reason I was late to this recording, Brian,


00:01:58.580 --> 00:02:01.780
was I was just talking with Pablo and Matt,


00:02:01.780 --> 00:02:05.300
maintainers and creators of PyStack.


00:02:05.300 --> 00:02:06.620
Have you heard of PyStack?


00:02:06.620 --> 00:02:07.460
- I have not.


00:02:07.460 --> 00:02:11.940
- So PyStack is a tool that uses forbidden magic


00:02:11.940 --> 00:02:14.380
to let people inspect the stack frames


00:02:14.380 --> 00:02:17.100
of a running Python process,


00:02:17.100 --> 00:02:19.900
or even a core dump that was captured


00:02:19.900 --> 00:02:22.680
from a Python process that crashed,


00:02:22.680 --> 00:02:25.860
helping you quickly and easily learn what it's doing.


00:02:25.860 --> 00:02:28.500
How cool is that?


00:02:28.500 --> 00:02:29.520
- Pretty good.


00:02:29.520 --> 00:02:31.080
- Yeah, so here's the deal.


00:02:31.080 --> 00:02:32.060
Yeah, so here's the deal.


00:02:32.060 --> 00:02:35.200
I've got a Python app.


00:02:35.200 --> 00:02:38.020
This is especially important if you have mixed code.


00:02:38.020 --> 00:02:41.420
So if you're talking with C, C++, Rust,


00:02:41.420 --> 00:02:42.540
those kinds of things,


00:02:42.540 --> 00:02:44.380
'cause it'll cross those boundaries as well.


00:02:44.380 --> 00:02:46.580
But let's just say pure Python even.


00:02:46.580 --> 00:02:49.740
I've got a Python web app


00:02:49.740 --> 00:02:54.220
And I go to the server, I try to connect to it,


00:02:54.220 --> 00:02:55.760
it won't really respond.


00:02:55.760 --> 00:02:57.960
It connects, but it just hangs.


00:02:57.960 --> 00:02:59.920
Go to the server, it's not 100% CPU,


00:02:59.920 --> 00:03:01.840
in fact, it's 0% CPU usage.


00:03:01.840 --> 00:03:04.160
So it's not like spinning and busy.


00:03:04.160 --> 00:03:05.740
Like what the heck is it doing?


00:03:05.740 --> 00:03:06.680
Is it a deadlock?


00:03:06.680 --> 00:03:08.680
Is it waiting on like the database?


00:03:08.680 --> 00:03:10.360
What is going on?


00:03:10.360 --> 00:03:12.720
So what you can do, even in production,


00:03:12.720 --> 00:03:15.760
you can go up to that process and you can say,


00:03:15.760 --> 00:03:20.760
give me a snapshot of exactly what this process is doing.


00:03:20.760 --> 00:03:26.880
And what you see is you see a call stack.


00:03:26.880 --> 00:03:29.120
Let me find an example here of what it looks like.


00:03:29.120 --> 00:03:30.080
It looks like this.


00:03:30.080 --> 00:03:35.200
Silly zoom.


00:03:35.200 --> 00:03:39.160
So what you'll see is like, hey, on this particular thread,


00:03:39.160 --> 00:03:41.920
we're seeing on this file, on this line,


00:03:41.920 --> 00:03:43.960
this function was called and check it out.


00:03:43.960 --> 00:03:47.080
It even has the arguments passed to the function.


00:03:47.080 --> 00:03:49.480
Oh, wow, that's nice.


00:03:49.480 --> 00:03:52.800
Yeah. And then you can see what function that's calling


00:03:52.800 --> 00:03:55.300
with the arguments passed to it, and what function that's calling


00:03:55.300 --> 00:03:57.300
with the arguments passed to it.


00:03:57.300 --> 00:04:01.960
You can do this on a running function without altering its behavior.


00:04:01.960 --> 00:04:04.520
Basically, it doesn't inject any code or anything.


00:04:04.520 --> 00:04:08.200
The only behavior it alters is that it freezes it for a second, potentially,


00:04:08.200 --> 00:04:10.360
which could, I guess, make something time out.


00:04:10.360 --> 00:04:13.840
But other than that, you could do this in production.


00:04:13.840 --> 00:04:15.840
even to see what's happening.


00:04:15.840 --> 00:04:18.980
And what's extra cool is,


00:04:18.980 --> 00:04:21.680
even if the process crashes,


00:04:21.680 --> 00:04:23.680
you can grab the core dump,


00:04:23.680 --> 00:04:26.180
and it will go back and analyze that


00:04:26.180 --> 00:04:28.180
as if it was a running process.


00:04:28.180 --> 00:04:30.720
- That's pretty cool.


00:04:30.720 --> 00:04:33.860
- Yeah. So there are a ton of features.


00:04:33.860 --> 00:04:35.860
If you can get to the section where it says,


00:04:35.860 --> 00:04:37.860
"What can PyStack do?"


00:04:37.860 --> 00:04:40.200
So it works with both running processes


00:04:40.200 --> 00:04:42.500
and core dump files. It'll tell you if...


00:04:42.500 --> 00:04:47.140
if a thread is currently holding onto the gill,


00:04:47.140 --> 00:04:50.620
if it's waiting to acquire it or is trying to drop it.


00:04:50.620 --> 00:04:53.740
So you can, you know, one of the examples


00:04:53.740 --> 00:04:56.100
that Matt and Pablo spoke about was


00:04:56.100 --> 00:04:59.780
they were calling into custom C code


00:04:59.780 --> 00:05:02.260
that was a Python extension.


00:05:02.260 --> 00:05:04.140
That call that was coming in,


00:05:04.140 --> 00:05:10.100
that was acquiring the gill,


00:05:11.420 --> 00:05:14.840
But then in the destructor for some object


00:05:14.840 --> 00:05:17.480
that it was waiting for it to go away,


00:05:17.480 --> 00:05:20.480
it was like waiting on a background thread


00:05:20.480 --> 00:05:21.380
to do some cleanup.


00:05:21.380 --> 00:05:24.400
That background thread also was trying to do a callback


00:05:24.400 --> 00:05:26.240
to let Python know what's happening


00:05:26.240 --> 00:05:29.300
and was trying to acquire the gill, but it couldn't.


00:05:29.300 --> 00:05:32.200
So, because the one that was waiting on it


00:05:32.200 --> 00:05:34.600
was already holding the GIL and wasn't gonna give it up


00:05:34.600 --> 00:05:36.520
because that's how the GIL works, right?


00:05:36.520 --> 00:05:41.360
And so you can use it for like these deadlock situations.


00:05:41.360 --> 00:05:43.700
You can see if it's running a GC,


00:05:43.700 --> 00:05:47.440
you can see both the call stack


00:05:47.440 --> 00:05:51.960
in intertwined for both Python and C or C++ or Rust


00:05:51.960 --> 00:05:53.400
all together.


00:05:53.400 --> 00:05:55.400
And it'll even do things like go out


00:05:55.400 --> 00:05:57.980
and find the debugging symbols


00:05:57.980 --> 00:06:00.120
for say your Python runtime.


00:06:00.120 --> 00:06:01.240
Even if you don't have it,


00:06:01.240 --> 00:06:03.440
it can potentially go and get those


00:06:03.440 --> 00:06:05.660
and bring that extra information in.


00:06:05.660 --> 00:06:08.960
What else should we see here?


00:06:08.960 --> 00:06:11.020
safety using running processes.


00:06:11.020 --> 00:06:15.280
You can run it on a process in memory,


00:06:15.280 --> 00:06:19.000
a running process without pausing at all,


00:06:19.000 --> 00:06:22.040
which will minimize the impact it might have,


00:06:22.040 --> 00:06:25.560
but it'll also potentially have like not 100%


00:06:25.560 --> 00:06:28.400
precise information, it could be out of sync.


00:06:28.400 --> 00:06:33.400
So yeah, it even works on like corrupted process core dumps


00:06:33.400 --> 00:06:37.440
'cause the process died 'cause it got corrupted memory


00:06:37.440 --> 00:06:38.920
or something.


00:06:38.920 --> 00:06:41.020
So if you've thought about GDB


00:06:41.020 --> 00:06:42.460
or some of these other types of things,


00:06:42.460 --> 00:06:43.660
because you're like, oh my gosh,


00:06:43.660 --> 00:06:46.860
I've got to figure out why this crashed.


00:06:46.860 --> 00:06:47.700
Here's a core dump.


00:06:47.700 --> 00:06:48.580
Let me start looking at it.


00:06:48.580 --> 00:06:52.020
Well, PyStack may be the thing you want.


00:06:52.020 --> 00:06:53.340
- That's pretty cool.


00:06:53.340 --> 00:06:56.220
- And one final bonus for you, Brian.


00:06:56.220 --> 00:07:01.700
Suppose you have a pytest test.


00:07:01.700 --> 00:07:02.520
Is it in here?


00:07:02.520 --> 00:07:05.540
This one.


00:07:05.540 --> 00:07:09.180
Suppose you have a pytest test


00:07:09.180 --> 00:07:13.020
and that test while it's running deadlocks


00:07:13.020 --> 00:07:16.000
or is very slow or something like that.


00:07:16.000 --> 00:07:20.000
You can have PyStack as a pytest plugin.


00:07:20.000 --> 00:07:24.960
And then when you run your code, how do you do it?


00:07:24.960 --> 00:07:27.900
I think it's, you just, where is it?


00:07:27.900 --> 00:07:29.580
You know about it.


00:07:29.580 --> 00:07:30.980
Anyway, when you run it,


00:07:30.980 --> 00:07:34.940
you can say basically analyze my tests


00:07:34.940 --> 00:07:38.140
and here's a certain threshold to consider a failure


00:07:38.140 --> 00:07:40.540
and take a snapshot of that and so on.


00:07:40.540 --> 00:07:43.300
- Yeah, I like the threshold notion of just like,


00:07:43.300 --> 00:07:46.620
if it gets this bad, tell me why.


00:07:46.620 --> 00:07:47.700
- Exactly.


00:07:47.700 --> 00:07:49.540
- Yeah, nice.


00:07:49.540 --> 00:07:52.340
- Cool, so if people want the full details,


00:07:52.340 --> 00:07:53.440
I suppose they could go check out


00:07:53.440 --> 00:07:57.140
the YouTube live stream channel for Talk Python now,


00:07:57.140 --> 00:07:59.420
or in three weeks they could listen to the podcast.


00:07:59.420 --> 00:08:04.280
But super, super cool tool if you've got a process


00:08:04.280 --> 00:08:06.780
that is crashing, that is hanging.


00:08:06.780 --> 00:08:08.200
Maybe it's doing this in production


00:08:08.200 --> 00:08:11.620
and it only gets deadlocked after 12 hours


00:08:11.620 --> 00:08:13.100
of being hammered on.


00:08:13.100 --> 00:08:15.780
You can't easily just debug it locally


00:08:15.780 --> 00:08:17.160
and get this to happen.


00:08:17.160 --> 00:08:19.860
Or if it's completely crashed and you have a core dump,


00:08:19.860 --> 00:08:23.760
these guys are doing lots of magic to make it possible.


00:08:23.760 --> 00:08:25.300
>>Nice. >>Yep.


00:08:25.300 --> 00:08:26.140
>>Cool.


00:08:26.140 --> 00:08:31.960
Well, next I kind of want to give everybody some news.


00:08:33.160 --> 00:08:37.480
So last year, actually, it was in July last year.


00:08:37.480 --> 00:08:42.000
So we talked about in episode 293,


00:08:42.000 --> 00:08:45.160
we talked about some giveaway, some PSF,


00:08:45.160 --> 00:08:48.760
the PSF saying that there's like the top 1%


00:08:48.760 --> 00:08:51.960
of the critical packages are gonna have to use


00:08:51.960 --> 00:08:55.040
two-factor authentication.


00:08:55.040 --> 00:08:56.120
And now-- - And it was big drama


00:08:56.120 --> 00:08:57.240
at the time, right?


00:08:57.240 --> 00:08:59.240
- Yeah, well, 'cause like there was some confusion


00:08:59.240 --> 00:09:00.680
over the keys and stuff like that,


00:09:00.680 --> 00:09:04.600
or hardware keys and, and, and yeah,


00:09:04.600 --> 00:09:07.120
some pushback against that or just some confusion around it,


00:09:07.120 --> 00:09:08.480
I think.


00:09:08.480 --> 00:09:11.040
But we've seen some,


00:09:11.040 --> 00:09:14.440
some even more attacks against Python projects


00:09:14.440 --> 00:09:15.400
in the last year.


00:09:15.400 --> 00:09:17.120
I mean, it's only, it's only,


00:09:17.120 --> 00:09:19.120
it's been less than a year since that.


00:09:19.120 --> 00:09:22.940
And so the change is this year,


00:09:22.940 --> 00:09:26.960
PyPI is going to require everybody


00:09:26.960 --> 00:09:28.760
to use two-factor authentication,


00:09:28.760 --> 00:09:31.680
not the top 1%, the top 100%.


00:09:31.680 --> 00:09:33.400
(laughing)


00:09:33.400 --> 00:09:36.920
So, and it's, you got till the end of the year, I think.


00:09:36.920 --> 00:09:42.500
And it's a, let's see, we're linking to an article


00:09:42.500 --> 00:09:46.140
from the Python package index saying,


00:09:46.140 --> 00:09:50.720
securing PyPI accounts via two-factor authentication.


00:09:50.720 --> 00:09:55.720
And as of today, they're going to require,


00:09:56.160 --> 00:09:59.080
they're announcing that every account that maintains,


00:09:59.080 --> 00:10:01.080
every account that maintains a project


00:10:01.080 --> 00:10:04.160
or organization on PyPI will be required


00:10:04.160 --> 00:10:07.200
to enable two-factor authentication on their account


00:10:07.200 --> 00:10:08.800
by the end of 2023.


00:10:08.800 --> 00:10:10.980
So that's the news really.


00:10:10.980 --> 00:10:14.760
There's some discussion as to why in this article,


00:10:14.760 --> 00:10:19.760
but there's some information on how to prepare,


00:10:19.760 --> 00:10:23.000
but it's not, I mean, it's not that bad.


00:10:23.000 --> 00:10:25.020
I did it last year.


00:10:25.020 --> 00:10:28.080
If you've got, especially if you're already using a smartphone,


00:10:28.080 --> 00:10:33.080
I think that using something like offy or something like that on,


00:10:33.080 --> 00:10:38.940
on a smartphone would work just fine. So, yeah.


00:10:38.940 --> 00:10:43.800
What else? There's, it's kind of,


00:10:43.800 --> 00:10:47.640
I guess there's not much really more to say about it is that this is happening


00:10:47.640 --> 00:10:52.680
and you gotta kind of do it. You had to do it by the end of the year. So wait,


00:10:52.720 --> 00:10:54.760
but why not? Why wait? Just go ahead and do it.


00:10:54.760 --> 00:10:56.920
And it's really everybody. So it's,


00:10:56.920 --> 00:11:00.140
so let's say you've got an open source project and there's like, you know,


00:11:00.140 --> 00:11:03.400
20 people contributing. That would be cool. Maybe there's like five,


00:11:03.400 --> 00:11:07.520
but if only one of you is ever pushing to pipey, I, then it's just one of,


00:11:07.520 --> 00:11:10.520
I think it's just one of you, unless you're doing an organization thing.


00:11:10.520 --> 00:11:12.520
I think it's just the person pushing.


00:11:12.520 --> 00:11:17.280
So if other people are on get and not using two factor forget,


00:11:17.280 --> 00:11:22.320
but they're just pushing to your repo, I think that's still fine.


00:11:22.320 --> 00:11:23.160
It doesn't matter.


00:11:23.160 --> 00:11:26.440
It's the people actually actively interacting with PyPI


00:11:26.440 --> 00:11:28.340
that need to be authenticated.


00:11:28.340 --> 00:11:31.520
- Yeah, that's what it sounds like to me as well.


00:11:31.520 --> 00:11:32.360
It's kind of,


00:11:32.360 --> 00:11:38.400
if you're actually have an active account on PyPI,


00:11:38.400 --> 00:11:39.360
not necessarily GitHub.


00:11:39.360 --> 00:11:41.880
Although I think GitHub itself also has


00:11:41.880 --> 00:11:43.760
a 2FA requirement now.


00:11:43.760 --> 00:11:46.040
- And there is some discussion here about like people


00:11:46.040 --> 00:11:49.360
that don't interact with a project


00:11:49.360 --> 00:11:51.200
but still have a PyPI account.


00:11:51.200 --> 00:11:53.960
And I'm not exactly sure why,


00:11:53.960 --> 00:11:56.160
apparently there's some people that need it.


00:11:56.160 --> 00:11:59.400
Why would you have a pipey eye account


00:11:59.400 --> 00:12:00.960
if you're not pushing stuff to?


00:12:00.960 --> 00:12:03.080
- Yeah, yeah, that's a good point.


00:12:03.080 --> 00:12:04.000
It is a good point.


00:12:04.000 --> 00:12:10.640
Well, so there was so much drama about it


00:12:10.640 --> 00:12:15.480
and there was that person that deleted all their packages


00:12:15.480 --> 00:12:18.200
because they were frustrated as like a thing of protest


00:12:18.200 --> 00:12:19.400
and it caused some issues.


00:12:19.400 --> 00:12:32.400
Well, I'm fine with this. This is great. I think it's supply chain issues are really, really serious. So it's, it's okay with me.


00:12:32.400 --> 00:12:38.400
Yeah, me too. So, shall we thank our sponsor?


00:12:38.400 --> 00:12:40.800
- We shall, but first I just want to point out,


00:12:40.800 --> 00:12:44.000
yeah, I think Authy is a fantastic option


00:12:44.000 --> 00:12:46.640
for the 2FA stuff that you were pointing out.


00:12:46.640 --> 00:12:48.640
As you mentioned, like one of the things


00:12:48.640 --> 00:12:53.640
that is a huge hassle for a lot of the systems is,


00:12:53.640 --> 00:12:59.000
guess what, you can install this 2FA tool onto your phone


00:12:59.000 --> 00:13:01.960
and it's completely safe and all that local,


00:13:01.960 --> 00:13:03.960
that 2FA, it'll never go anywhere


00:13:03.960 --> 00:13:05.360
until you want to get a new phone


00:13:05.360 --> 00:13:06.600
and then you're completely out of luck


00:13:06.600 --> 00:13:08.160
and then you're completely out of luck


00:13:08.160 --> 00:13:10.040
and you've got to somehow reset it


00:13:10.040 --> 00:13:12.300
or worse you lose your phone,


00:13:12.300 --> 00:13:14.640
but there's no way to recover the 2FA code.


00:13:14.640 --> 00:13:17.320
So what I really like about Authy is it will,


00:13:17.320 --> 00:13:19.440
you can install it in multiple locations.


00:13:19.440 --> 00:13:22.000
Like you can install it on your desktop


00:13:22.000 --> 00:13:25.360
and your mobile device, and they're just in sync.


00:13:25.360 --> 00:13:27.680
If you add one somewhere, it appears elsewhere.


00:13:27.680 --> 00:13:31.080
So if people feel like 2FA is a huge pain,


00:13:31.080 --> 00:13:32.580
I think Authy is one of the choices


00:13:32.580 --> 00:13:34.400
that's pretty good for that.


00:13:34.400 --> 00:13:36.760
You can also do like one password and so on.


00:13:36.760 --> 00:13:39.800
But to me, having the passwords there


00:13:39.800 --> 00:13:41.880
and the 2FA thing in the same place


00:13:41.880 --> 00:13:45.440
seems to violate some aspect of security.


00:13:45.440 --> 00:13:47.560
I mean, I know one password is pretty safe,


00:13:47.560 --> 00:13:50.920
but 2FA should be about having the password


00:13:50.920 --> 00:13:52.720
and the thing separated in my mind.


00:13:52.720 --> 00:13:56.740
So I don't use my password managers 2FA thing.


00:13:56.740 --> 00:13:59.820
- Yeah, I just thought,


00:13:59.820 --> 00:14:02.360
I thought I had like just a couple accounts with Authy


00:14:02.360 --> 00:14:05.280
and I just looked and I've got like, I got a scroll.


00:14:05.280 --> 00:14:06.840
I've got a whole bunch of things on off.


00:14:06.840 --> 00:14:10.160
- Yeah, I think I have 40 or so myself.


00:14:10.160 --> 00:14:12.720
All right, now let's tell people about our sponsor.


00:14:12.720 --> 00:14:14.180
- All right.


00:14:14.180 --> 00:14:16.480
This episode of Python Bytes is brought to you


00:14:16.480 --> 00:14:19.880
by Influx Data, the makers of InfluxDB.


00:14:19.880 --> 00:14:22.080
InfluxDB is a database purpose built


00:14:22.080 --> 00:14:24.940
for handling time series data at massive scale


00:14:24.940 --> 00:14:26.800
for real-time analytics.


00:14:26.800 --> 00:14:29.040
Developers can ingest, store, and analyze


00:14:29.040 --> 00:14:31.720
all types of time series data, metrics, events,


00:14:31.720 --> 00:14:34.000
traces on a single platform.


00:14:34.000 --> 00:14:37.020
So dear listener, let me ask the question,


00:14:37.020 --> 00:14:39.500
how would boundless cardinality


00:14:39.500 --> 00:14:41.840
and lightning fast SQL queries impact


00:14:41.840 --> 00:14:44.720
the way you develop real-time applications?


00:14:44.720 --> 00:14:49.360
InfluxDB processes large time series datasets


00:14:49.360 --> 00:14:51.580
and provides low latency SQL queries,


00:14:51.580 --> 00:14:53.960
making it a go-to choice for developers


00:14:53.960 --> 00:14:57.440
building real-time applications and seeking crucial insights.


00:14:57.440 --> 00:14:59.600
For developer efficiency,


00:14:59.600 --> 00:15:02.960
InfluxDB helps you create IoT, analytics,


00:15:02.960 --> 00:15:05.640
and cloud applications using timestamp data


00:15:05.640 --> 00:15:07.880
rapidly and at scale.


00:15:07.880 --> 00:15:11.440
It's designed to ingest billions of data points


00:15:11.440 --> 00:15:14.400
in real time with unlimited cardinality.


00:15:14.400 --> 00:15:17.080
InfluxDB streamlines building once


00:15:17.080 --> 00:15:19.960
and deploying across various products and environments


00:15:19.960 --> 00:15:23.040
from the edge, on-premise, and to the cloud.


00:15:23.040 --> 00:15:27.480
Try it for free at pythonbytes.fm/influxdb.


00:15:27.480 --> 00:15:31.760
The links are also in your show notes on the podcast.


00:15:31.760 --> 00:15:34.840
Thanks to InfluxDB for supporting the show.


00:15:34.840 --> 00:15:36.400
- Yep, thank you, thank you.


00:15:36.400 --> 00:15:38.900
Everyone check them out to help support the show.


00:15:38.900 --> 00:15:43.520
All right, let's talk about queues, Brian.


00:15:43.520 --> 00:15:44.720
- Okay.


00:15:44.720 --> 00:15:48.600
- Yeah, so I wanna talk about Propan.


00:15:48.600 --> 00:15:52.320
Now, Propan is a project that's not, you know,


00:15:52.320 --> 00:15:55.000
tens of thousands of GitHub stars,


00:15:55.000 --> 00:15:57.840
I think it looks pretty compelling.


00:15:57.840 --> 00:16:01.120
It's put together by Lance Nick,


00:16:01.120 --> 00:16:04.380
Lance Nick, I'm gonna go with,


00:16:04.380 --> 00:16:05.440
over here on GitHub,


00:16:05.440 --> 00:16:08.640
and it is a powerful and easy to use Python framework


00:16:08.640 --> 00:16:11.700
for building asynchronous web services


00:16:11.700 --> 00:16:14.960
that interact with any message broker.


00:16:14.960 --> 00:16:18.460
So what are some of the options of the message brokers here?


00:16:18.460 --> 00:16:23.460
We've got RabbitMQ, Redis, Nats, Kafka, SQS,


00:16:24.960 --> 00:16:27.600
some of the other ones like Redis streams.


00:16:27.600 --> 00:16:31.920
If you're using these and you want a cool declarative way


00:16:31.920 --> 00:16:36.020
to interact with them, then Propan might be your thing.


00:16:36.020 --> 00:16:40.980
So right now what they have is async APIs for you,


00:16:40.980 --> 00:16:42.940
and they're working on synchronous ones,


00:16:42.940 --> 00:16:44.620
but they don't have them yet.


00:16:44.620 --> 00:16:46.980
So let me just give you an example, Brian.


00:16:46.980 --> 00:16:50.900
Over here, it says, first,


00:16:50.900 --> 00:16:54.460
let's take the quick start from AIO PICA,


00:16:54.460 --> 00:16:59.460
which is a way to talk, way to listen for events.


00:16:59.460 --> 00:17:00.580
This is the important part.


00:17:00.580 --> 00:17:02.820
It'll listen for a certain set of events


00:17:02.820 --> 00:17:05.420
coming into a message queue, okay?


00:17:05.420 --> 00:17:06.700
- Okay. - So what you do is you say,


00:17:06.700 --> 00:17:10.300
I'm going to connect to the message queue server


00:17:10.300 --> 00:17:15.100
and I'm gonna listen to a particular queue.


00:17:15.100 --> 00:17:18.540
Then you await creating the connection,


00:17:18.540 --> 00:17:20.260
you await creating a channel,


00:17:20.260 --> 00:17:23.220
you await connecting to the queue.


00:17:23.220 --> 00:17:26.860
And once you do it, then you use the iterator,


00:17:26.860 --> 00:17:29.000
you loop over the iterator as messages come in,


00:17:29.000 --> 00:17:30.740
and then you get them.


00:17:30.740 --> 00:17:33.420
And then you, of course, run that code that does that.


00:17:33.420 --> 00:17:37.660
That's the imperative way


00:17:37.660 --> 00:17:40.020
where you do all the steps yourself.


00:17:40.020 --> 00:17:44.260
So this other way is what you do is you go to,


00:17:44.260 --> 00:17:46.300
you basically create this thing called a broker


00:17:46.300 --> 00:17:51.300
using ProPan, and you point it at one of these queues,


00:17:51.300 --> 00:17:53.020
like Redis or something.


00:17:53.020 --> 00:17:56.020
And then you just kind of like you would in FastAPI


00:17:56.020 --> 00:17:59.260
or Flask, you say, you put a decorator on a function


00:17:59.260 --> 00:18:01.080
and you say @broker.handle,


00:18:01.080 --> 00:18:02.360
and you give it the name of the queue.


00:18:02.360 --> 00:18:05.220
So if a message comes into that named queue,


00:18:05.220 --> 00:18:06.160
call this function.


00:18:06.160 --> 00:18:08.860
- Oh, I like that better.


00:18:08.860 --> 00:18:09.700
- Isn't this nice?


00:18:09.700 --> 00:18:11.660
It's kind of like I'm listening for this URL,


00:18:11.660 --> 00:18:15.900
like if, you know, /courses/id of a course,


00:18:15.900 --> 00:18:18.460
I wanna get you details about that course, right?


00:18:18.460 --> 00:18:21.340
You would put that in Flask or Pyramid or FastAPI.


00:18:21.340 --> 00:18:23.980
This is the same thing, but for message queue.


00:18:23.980 --> 00:18:26.260
So you say this function receives stuff


00:18:26.260 --> 00:18:28.020
that goes to that queue.


00:18:28.020 --> 00:18:29.100
- Oh, I like it.


00:18:29.100 --> 00:18:32.060
Yeah, that's what those interfaces should be like.


00:18:32.060 --> 00:18:33.420
- Yeah, absolutely.


00:18:33.420 --> 00:18:34.700
It totally should.


00:18:34.700 --> 00:18:37.460
So this is pretty interesting already,


00:18:37.460 --> 00:18:39.960
but it gets a little bit cooler.


00:18:39.960 --> 00:18:44.400
So you can go and create one of these apps


00:18:44.400 --> 00:18:46.400
and just run a server directly, right?


00:18:46.400 --> 00:18:49.820
So you can say, I wanna run this as a system daemon


00:18:49.820 --> 00:18:52.800
on Linux, let's say, and it's just gonna, you know,


00:18:52.800 --> 00:18:55.260
use the ProPan server to run.


00:18:55.260 --> 00:18:57.660
That's fine, but there's tons of infrastructure


00:18:57.660 --> 00:19:02.300
around running these types of things as web applications.


00:19:02.300 --> 00:19:05.660
And if you already have a web app that receives


00:19:05.660 --> 00:19:08.220
like JSON requests, you know,


00:19:08.220 --> 00:19:10.700
it's got some kind of API endpoint,


00:19:10.700 --> 00:19:13.420
but you also wanna have it handle stuff


00:19:13.420 --> 00:19:15.620
that might be put into the message queue,


00:19:15.620 --> 00:19:20.060
Then it has integration, if I scroll down,


00:19:20.060 --> 00:19:23.140
into, you can do it manually into any web framework


00:19:23.140 --> 00:19:25.860
or it's got things like a FastAPI plugin,


00:19:25.860 --> 00:19:27.140
which is pretty cool.


00:19:27.140 --> 00:19:28.140
- That's cool.


00:19:28.140 --> 00:19:29.700
- Yeah, so let's see.


00:19:29.700 --> 00:19:30.980
Actually, if I go to the examples,


00:19:30.980 --> 00:19:33.820
I'll pull up a Flask one that's probably the best,


00:19:33.820 --> 00:19:36.420
which you gotta use Quart because it's only async.


00:19:36.420 --> 00:19:39.700
That's the Flask async variant.


00:19:39.700 --> 00:19:42.900
So what you can do is in your, let's see, I'll just say,


00:19:42.900 --> 00:19:45.780
in your court app, you create this broker


00:19:45.780 --> 00:19:47.060
to sort of listen as well,


00:19:47.060 --> 00:19:50.900
in addition to create your Flask or court app.


00:19:50.900 --> 00:19:54.180
And then you might have a function that says


00:19:54.180 --> 00:19:57.720
app.routeListenForForwardSlash, and that's a JSON endpoint.


00:19:57.720 --> 00:20:02.140
Or you might have broker.handleSomeQueueMessage,


00:20:02.140 --> 00:20:03.980
and that's the queue coming in.


00:20:03.980 --> 00:20:06.540
So it's kind of like, well, here's the messages coming in


00:20:06.540 --> 00:20:09.340
over the web and here are the ones coming over


00:20:09.340 --> 00:20:11.580
message queuing, but you know, it's just,


00:20:11.580 --> 00:20:14.980
it runs in micro-WSGI or g-unicorn or whatever.


00:20:14.980 --> 00:20:15.980
- Yeah, that's nice.


00:20:15.980 --> 00:20:17.900
- Yeah.


00:20:17.900 --> 00:20:22.900
Last thing, this is inspired by Pydantic and FastAPI.


00:20:22.900 --> 00:20:28.780
And so, let me see about a good example here.


00:20:28.780 --> 00:20:35.480
You can do things like declaring that the body


00:20:35.480 --> 00:20:40.480
of the message is the dictionary


00:20:40.480 --> 00:20:44.480
or you can have a Pydantic base models that are coming in.


00:20:44.480 --> 00:20:45.900
So you can say, here's a Pydant.


00:20:45.900 --> 00:20:47.760
When a message comes to the message queue,


00:20:47.760 --> 00:20:50.360
it's gonna be represented by, let's say JSON.


00:20:50.360 --> 00:20:53.760
And that JSON, I want to parse into a Pydantic model.


00:20:53.760 --> 00:20:57.720
You can just say much like FastAPI in your handler,


00:20:57.720 --> 00:20:59.680
you say body colon,


00:20:59.680 --> 00:21:01.920
the name of your custom Pydantic class, boom.


00:21:01.920 --> 00:21:04.960
Now it's automatically parsing that based on the type.


00:21:04.960 --> 00:21:08.160
- Oh, that's neat.


00:21:08.160 --> 00:21:10.960
- And the last thing, they also have this concept


00:21:10.960 --> 00:21:15.480
of modeling pytest fixtures.


00:21:15.480 --> 00:21:18.440
So you can create functions that will do things like,


00:21:18.440 --> 00:21:20.880
you know, process requests or give you extra information


00:21:20.880 --> 00:21:23.920
or what you would do with pytest fixture type things.


00:21:23.920 --> 00:21:27.000
And you can have those as well in here,


00:21:27.000 --> 00:21:27.840
which is pretty cool.


00:21:27.840 --> 00:21:29.520
So there's a lot of cool,


00:21:29.520 --> 00:21:32.440
it's like a fusion of interesting Python frameworks


00:21:32.440 --> 00:21:33.960
for message queuing.


00:21:33.960 --> 00:21:35.200
- I like it.


00:21:35.200 --> 00:21:38.840
So ask your doctor if Propan is right for you.


00:21:38.840 --> 00:21:40.640
- Ask your doctor, that's right.


00:21:40.640 --> 00:21:44.200
Yeah, it's interesting because this message queuing


00:21:44.200 --> 00:21:46.960
type of architecture is super powerful


00:21:46.960 --> 00:21:49.640
at unlocking tons of interesting asynchrony.


00:21:49.640 --> 00:21:52.360
Like, well, if I've got a request come in


00:21:52.360 --> 00:21:53.960
and I gotta place an order,


00:21:53.960 --> 00:21:55.920
and we gotta check the warehouse, whether we have them,


00:21:55.920 --> 00:21:59.160
and that's the janky old API call that's slow,


00:21:59.160 --> 00:22:01.760
like, well, how do I scale that would be one option


00:22:01.760 --> 00:22:04.160
with threads and async await.


00:22:04.160 --> 00:22:05.720
The other one would be just like, well,


00:22:05.720 --> 00:22:08.100
throw that into a queue to say,


00:22:08.100 --> 00:22:12.960
check that out and then let it run completely disassociated.


00:22:12.960 --> 00:22:18.800
>> Yeah. Scroll to the bottom, the key features.


00:22:18.800 --> 00:22:24.000
One of the things I want right down there,


00:22:24.000 --> 00:22:27.760
testability, ProPan allows you to test your app.


00:22:27.760 --> 00:22:29.640
Without external dependencies,


00:22:29.640 --> 00:22:32.520
you do not have to set up a message broker to test.


00:22:32.520 --> 00:22:33.640
You can have a virtual one.


00:22:33.640 --> 00:22:34.920
That's pretty cool.


00:22:34.920 --> 00:22:35.760
- Yeah, yeah.


00:22:35.760 --> 00:22:36.580
This is cool.


00:22:36.580 --> 00:22:39.280
So it's not super popular, like I said.


00:22:39.280 --> 00:22:41.880
However, it does look pretty neat.


00:22:41.880 --> 00:22:43.000
- Sure does.


00:22:43.000 --> 00:22:44.280
- All right, over to you.


00:22:44.280 --> 00:22:46.840
- So that was a little bit of a new thing.


00:22:46.840 --> 00:22:48.960
I wanna talk about a little bit of an old thing,


00:22:48.960 --> 00:22:50.220
which is make files.


00:22:50.220 --> 00:22:52.640
We haven't talked about it for a while,


00:22:52.640 --> 00:22:55.680
but make files are still fairly popular


00:22:55.680 --> 00:22:57.480
for Python projects, I think.


00:22:57.480 --> 00:23:01.720
I've got them on several internal projects at least.


00:23:01.720 --> 00:23:03.640
And they come in handy.


00:23:03.640 --> 00:23:05.480
You gotta be careful that a lot of,


00:23:05.480 --> 00:23:08.260
sometimes people on your team won't be familiar with them,


00:23:08.260 --> 00:23:11.640
but if it's a common thing for your team to use Makefiles


00:23:11.640 --> 00:23:14.640
or for you, why not use them on a Python project?


00:23:14.640 --> 00:23:18.520
So this, what I'm gonna cover is an article,


00:23:18.520 --> 00:23:22.020
forgetting the author name right now.


00:23:22.020 --> 00:23:24.640
Let's see, Ricardo Enderegg,


00:23:24.640 --> 00:23:27.200
called "Makefile Tricks for Python Projects."


00:23:27.200 --> 00:23:30.440
And I'm going to hop down to the actual template.


00:23:30.440 --> 00:23:35.160
What it is, it's a small template as a starter template


00:23:35.160 --> 00:23:39.000
for a Python project, but it has some pretty cool features.


00:23:39.000 --> 00:23:42.680
And the actual template's at the bottom of the article,


00:23:42.680 --> 00:23:45.320
but we kind of go through some of the different things


00:23:45.320 --> 00:23:47.480
that you might want to put in there.


00:23:47.480 --> 00:23:50.880
And so to start off a little bit,


00:23:50.880 --> 00:23:52.000
I always forget to do this.


00:23:52.000 --> 00:23:53.740
These are things I always want to do,


00:23:53.740 --> 00:23:55.080
but I forget in my Makefiles.


00:23:55.080 --> 00:23:57.820
Things like making sure that it fails


00:23:57.820 --> 00:24:00.520
if anything throws an incorrect error code.


00:24:00.520 --> 00:24:04.020
And also warning if you did something wrong,


00:24:04.020 --> 00:24:06.420
like undefined variables, or you're using...


00:24:06.420 --> 00:24:10.020
You can turn off this built-in rules.


00:24:10.020 --> 00:24:12.980
And I don't really know what the built-in rules thing does.


00:24:12.980 --> 00:24:17.520
It's just I find my Makefiles more pleasant if I disable them.


00:24:17.520 --> 00:24:19.120
So this is good.


00:24:19.120 --> 00:24:20.880
The virtual environment thing.


00:24:20.880 --> 00:24:24.220
So there's a little snippet that he includes


00:24:24.220 --> 00:24:29.860
that you can use the py variable to select which Python to run.


00:24:29.860 --> 00:24:32.060
So if you already have a virtual environment,


00:24:32.060 --> 00:24:34.060
it uses that, which is cool.


00:24:34.060 --> 00:24:35.560
That's pretty clever, yeah.


00:24:35.560 --> 00:24:38.060
Yeah, and if you don't, it uses the global one.


00:24:38.060 --> 00:24:43.660
And then also with pip, so it uses that py variable


00:24:43.660 --> 00:24:48.360
to pick pip if it's there, or not, it uses the global one.


00:24:48.360 --> 00:24:49.860
So that's pretty cool.


00:24:49.860 --> 00:24:52.940
Actually, probably be better to just blow up


00:24:52.940 --> 00:24:55.460
if you didn't have a virtual environment.


00:24:55.460 --> 00:25:00.120
So anyway, some stuff like PWD


00:25:00.120 --> 00:25:03.840
and current working directory and work route,


00:25:03.840 --> 00:25:05.780
these are good things to add in


00:25:05.780 --> 00:25:09.220
because sometimes you'll call a make script


00:25:09.220 --> 00:25:10.760
from a different directory.


00:25:10.760 --> 00:25:12.540
So your actual current directory is different


00:25:12.540 --> 00:25:13.900
and it mucks things up.


00:25:13.900 --> 00:25:15.940
So there's some good correction there.


00:25:16.780 --> 00:25:20.540
I do like this, there's some little magic stuff


00:25:20.540 --> 00:25:22.700
about default goal and help message.


00:25:22.700 --> 00:25:24.020
And I had to read this a little bit


00:25:24.020 --> 00:25:25.780
to understand what's going on.


00:25:25.780 --> 00:25:29.780
But what happens is it, the default goal being help


00:25:29.780 --> 00:25:34.140
means that if you just type make with no arguments,


00:25:34.140 --> 00:25:35.700
what should it do?


00:25:35.700 --> 00:25:37.620
And a cool thing to have make do


00:25:37.620 --> 00:25:40.340
is to print out all the things that you can do


00:25:40.340 --> 00:25:44.820
with the make file, like all the targets and what they do.


00:25:44.820 --> 00:25:46.700
And so that's what this does.


00:25:46.700 --> 00:25:51.140
by having this little greps thing.


00:25:51.140 --> 00:25:54.140
Is it grep?


00:25:54.140 --> 00:25:57.300
Anyway, it's searching through your file


00:25:57.300 --> 00:26:00.220
and using awk and saying,


00:26:00.220 --> 00:26:05.220
hey, if you've got a comment against the site of a target,


00:26:05.220 --> 00:26:06.780
that means that's the help message.


00:26:06.780 --> 00:26:08.660
So it'll print that stuff out.


00:26:08.660 --> 00:26:09.780
- Oh, that's cool.


00:26:09.780 --> 00:26:11.140
- Yeah.


00:26:11.140 --> 00:26:13.780
Some, I don't really muck with my Python path too much,


00:26:13.780 --> 00:26:16.420
but if you have to muck with your Python path


00:26:16.420 --> 00:26:20.860
for Makefile to find libraries or something like that,


00:26:20.860 --> 00:26:22.920
or find the code that you're running.


00:26:22.920 --> 00:26:27.160
There's examples on how to do that, which is nice.


00:26:27.160 --> 00:26:31.420
I guess that's really kind of what I wanted to talk about.


00:26:31.420 --> 00:26:33.420
And I was surprised it's doing all this stuff


00:26:33.420 --> 00:26:36.060
and it's really, and some examples


00:26:36.060 --> 00:26:37.820
on how you can use the path thing.


00:26:37.820 --> 00:26:40.820
Oh, having, adding a little create virtual environment


00:26:40.820 --> 00:26:42.620
within a Makefile, this is nice,


00:26:42.620 --> 00:26:44.500
just so that people working on the project--


00:26:44.500 --> 00:26:45.380
- Make.vnv.


00:26:45.380 --> 00:26:49.180
Yeah, make.vnb, you could have vnb also,


00:26:49.180 --> 00:26:51.660
and it just makes your virtual environment.


00:26:51.660 --> 00:26:53.260
Why do you need a target for that?


00:26:53.260 --> 00:26:57.140
And it's because, and you've discovered this,


00:26:57.140 --> 00:27:01.120
but sometimes new Python developers kind of forget,


00:27:01.120 --> 00:27:03.260
is that it's kind of annoying


00:27:03.260 --> 00:27:04.740
to just create a virtual environment.


00:27:04.740 --> 00:27:07.000
It's good to, after you've created it,


00:27:07.000 --> 00:27:10.740
update the update set of tools and wheel and build.


00:27:10.740 --> 00:27:13.900
And then also, if you have a requirements file,


00:27:13.900 --> 00:27:15.420
why not just install it right away


00:27:15.420 --> 00:27:18.460
instead of having that as another command.


00:27:18.460 --> 00:27:22.020
So kind of a fun template for starting Makefiles


00:27:22.020 --> 00:27:23.120
with Python projects.


00:27:23.120 --> 00:27:25.940
So.


00:27:25.940 --> 00:27:28.660
- Yeah, that's, what is that?


00:27:28.660 --> 00:27:30.380
A modern take on an old idea.


00:27:30.380 --> 00:27:35.460
- Yeah, and if you are new to Makefiles,


00:27:35.460 --> 00:27:37.060
one of the things to be careful about


00:27:37.060 --> 00:27:40.500
that some people don't quite sometimes remember


00:27:40.500 --> 00:27:43.140
is spaces matter within Makefiles


00:27:43.140 --> 00:27:46.520
kind of like they do in Python, but spaces and tabs matter.


00:27:46.520 --> 00:27:50.040
So in Makefiles, you're using tabs.


00:27:50.040 --> 00:27:53.160
It has to be a tab, it cannot be a space,


00:27:53.160 --> 00:27:55.440
unless something's changed that I don't know about,


00:27:55.440 --> 00:27:58.040
but that has messed me up before.


00:27:58.040 --> 00:28:00.600
So use tabs within Makefiles.


00:28:00.600 --> 00:28:05.240
- All right, yep, sounds good.


00:28:05.240 --> 00:28:06.680
Excellent one.


00:28:06.680 --> 00:28:08.200
I guess that's everything.


00:28:08.200 --> 00:28:09.040
- Is that all the stuff?


00:28:09.040 --> 00:28:10.840
- Yeah, any extras?


00:28:10.840 --> 00:28:12.320
- No, not really.


00:28:12.320 --> 00:28:17.240
- I got a couple here, just a couple of conference ones.


00:28:17.240 --> 00:28:22.240
So PyCon Portugal has their call for participation.


00:28:22.240 --> 00:28:28.540
So got a little bit of time left on that.


00:28:28.540 --> 00:28:33.360
What is that till the 30th of June?


00:28:33.360 --> 00:28:35.800
And when will it be?


00:28:35.800 --> 00:28:39.960
It will be September 7 to 9, which is cool.


00:28:39.960 --> 00:28:43.740
So if you're in and around or want to go to Portugal,


00:28:43.740 --> 00:28:45.580
there you go.


00:28:45.580 --> 00:28:47.860
- Cool.


00:28:47.860 --> 00:28:50.300
- On the other hand, if you happen to be interested


00:28:50.300 --> 00:28:52.940
in Django and are in Europe,


00:28:52.940 --> 00:28:54.380
that just got announced as well.


00:28:54.380 --> 00:28:56.280
So people can check that out.


00:28:56.280 --> 00:28:58.540
- I wanna go.


00:28:58.540 --> 00:28:59.620
- Maybe that's going soon.


00:28:59.620 --> 00:29:01.220
- I'm not going, but I wanna go.


00:29:01.220 --> 00:29:03.500
- Yeah, indeed.


00:29:03.500 --> 00:29:04.880
So that's also announced.


00:29:04.880 --> 00:29:07.060
Link to both of those in the show notes.


00:29:07.060 --> 00:29:08.580
Are you ready for a joke?


00:29:08.580 --> 00:29:09.420
- Yeah.


00:29:09.420 --> 00:29:15.340
Well, this becomes because Apple.com,


00:29:15.340 --> 00:29:21.380
did you see that they announced this crazy vision thing, Brian?


00:29:21.380 --> 00:29:24.840
>> Yeah, but it doesn't come with the snorkel.


00:29:24.840 --> 00:29:26.740
It's just the snorkel mask.


00:29:26.740 --> 00:29:28.580
>> Yeah, it's just the snorkel mask.


00:29:28.580 --> 00:29:32.380
It doesn't even come with that little handheld


00:29:32.380 --> 00:29:36.980
submarine thing that you can drag yourself around either.


00:29:36.980 --> 00:29:40.940
So yeah, so they announced, if you haven't noticed yet,


00:29:40.940 --> 00:29:43.140
Apple announced Vision Pro,


00:29:43.140 --> 00:29:47.440
which is a $3,500 ski goggle-looking thing


00:29:47.440 --> 00:29:52.420
that is both augmented reality and virtual reality,


00:29:52.420 --> 00:29:54.420
kind of turn the dial.


00:29:54.420 --> 00:29:56.420
I'm highly suspicious of this.


00:29:56.420 --> 00:29:58.420
I think it's going to not do great,


00:29:58.420 --> 00:30:02.920
but it does look pretty awesome for certain use cases.


00:30:02.920 --> 00:30:04.920
Like, for example, you could sit on the sidelines


00:30:04.920 --> 00:30:08.440
of a football game and get like a 3D view.


00:30:08.440 --> 00:30:11.200
So you could look to the right and see down the sideline


00:30:11.200 --> 00:30:12.720
and then look ahead and watch the game.


00:30:12.720 --> 00:30:15.960
Like that, that's pretty epic.


00:30:15.960 --> 00:30:17.880
Is it worth $3,500?


00:30:17.880 --> 00:30:19.280
I don't know, we'll see.


00:30:19.280 --> 00:30:23.960
But okay, so that's setting the stage for the joke.


00:30:23.960 --> 00:30:25.160
So here's the joke.


00:30:25.160 --> 00:30:27.740
The average pseudo technical person


00:30:27.740 --> 00:30:30.400
has got like an Oculus Rift


00:30:30.400 --> 00:30:33.160
and they got their handheld controllers


00:30:33.160 --> 00:30:34.800
that they're doing, right?


00:30:34.800 --> 00:30:36.800
And then we have the pseudo,


00:30:36.800 --> 00:30:39.760
the rich pseudo technical people wearing the Apple one,


00:30:39.760 --> 00:30:41.640
sitting there watching TV.


00:30:41.640 --> 00:30:43.480
And then Brian, you want to describe


00:30:43.480 --> 00:30:45.160
the actual technical people,


00:30:45.160 --> 00:30:48.160
advanced high-tech setup they got here?


00:30:48.160 --> 00:30:51.720
- That's just a dude at a desk with like, you know,


00:30:51.720 --> 00:30:55.680
okay, with using a computer, but nice.


00:30:55.680 --> 00:30:57.320
- Oh, there's important stuff to it though.


00:30:57.320 --> 00:30:59.280
It's dual monitor.


00:30:59.280 --> 00:31:01.320
We will note the dual monitor.


00:31:01.320 --> 00:31:02.160
- Yes.


00:31:02.160 --> 00:31:03.280
- And the mechanical keyboard.


00:31:03.280 --> 00:31:06.560
This is not your average desk worker.


00:31:06.560 --> 00:31:08.800
- Yeah.


00:31:08.800 --> 00:31:12.080
- Anyway, there's my follow on to WWDC.


00:31:12.080 --> 00:31:15.380
- I know, and that's even, okay.


00:31:15.380 --> 00:31:17.560
I've got the big curved monitor,


00:31:17.560 --> 00:31:22.000
so I don't have two right now, but do you have two monitors?


00:31:22.000 --> 00:31:26.360
- I have one big monitor for my working desk,


00:31:26.360 --> 00:31:28.640
and I have a big curved monitor for my gaming PC,


00:31:28.640 --> 00:31:30.160
but just one for both as well.


00:31:30.160 --> 00:31:32.160
I used to have dual monitors,


00:31:32.160 --> 00:31:34.440
and I was always trying to like juggle them.


00:31:34.440 --> 00:31:37.360
I'm like, you know what, just one big monitor, that's better.


00:31:37.360 --> 00:31:39.680
- Yeah, actually when we did the pandemic thing,


00:31:39.680 --> 00:31:41.500
I went to one big monitor at home


00:31:41.500 --> 00:31:44.080
and then at work I still had the two split ones,


00:31:44.080 --> 00:31:47.880
but then I was just tired of doing this all day long.


00:31:47.880 --> 00:31:51.160
So I'm like, oh, we're gonna just, so I went to a big one.


00:31:51.160 --> 00:31:55.600
But that's kind of privilege speak, so I don't know.


00:31:55.600 --> 00:31:56.440
- It is a little bad.


00:31:56.440 --> 00:31:58.520
Just for people who are interested,


00:31:58.520 --> 00:32:00.120
if I do need a second monitor,


00:32:00.120 --> 00:32:01.760
like sometimes when I'm recording a course,


00:32:01.760 --> 00:32:04.900
I wanna be able to see what the recording is doing.


00:32:04.900 --> 00:32:07.120
So I wanna see my video overlaid


00:32:07.120 --> 00:32:09.120
with maybe what's on the screen,


00:32:09.120 --> 00:32:11.840
with whatever settings like scale,


00:32:11.840 --> 00:32:13.960
like exactly what's being recorded


00:32:13.960 --> 00:32:15.640
as the person's gonna see it


00:32:15.640 --> 00:32:17.360
in case something goes weird with that.


00:32:17.360 --> 00:32:22.240
So I'll take my iPad, plug it into my Mini,


00:32:22.240 --> 00:32:24.320
and then use Duet.


00:32:24.320 --> 00:32:28.400
Duet is a really cool software


00:32:28.400 --> 00:32:30.520
that I think works on Mac and Windows


00:32:30.520 --> 00:32:32.640
and basically turns that into a second monitor


00:32:32.640 --> 00:32:35.440
just periodically when you want it.


00:32:35.440 --> 00:32:41.720
So that's what I do if I really feel like I need extra space.


00:32:41.720 --> 00:32:44.560
So go back to the Apple Vision thing or the iDork.


00:32:44.560 --> 00:32:45.280
What's it called?


00:32:45.280 --> 00:32:45.840
Apple Vision.


00:32:45.840 --> 00:32:48.280
Yeah, I think it's iDork Pro.


00:32:48.280 --> 00:32:56.760
One of the things on there is somebody doing a meeting


00:32:56.760 --> 00:33:00.000
where you can supposedly see other people in the meeting,


00:33:00.000 --> 00:33:02.280
like as if you were still there,


00:33:02.280 --> 00:33:04.080
they were with you or something.


00:33:04.080 --> 00:33:07.600
And I thought, oh, that one go up a little bit.


00:33:07.600 --> 00:33:10.920
- Yeah, this is like the group FaceTime is what that is.


00:33:10.920 --> 00:33:11.760
- Except for.


00:33:11.760 --> 00:33:14.040
- Oh no, yeah, yeah, I see it, okay.


00:33:14.040 --> 00:33:17.360
- Wouldn't they see you with the goggles on?


00:33:17.360 --> 00:33:20.160
So if everybody's doing it, wouldn't everybody just,


00:33:20.160 --> 00:33:22.460
you'd just be able to see people with goggles.


00:33:22.460 --> 00:33:24.740
- That's interesting.


00:33:24.740 --> 00:33:28.560
I think it might scan you and put an avatar of you up there.


00:33:28.560 --> 00:33:30.560
- Oh yeah, it's an AIU, it's not really.


00:33:30.560 --> 00:33:33.160
- I think it's an AIU actually, yeah, I think so.


00:33:33.160 --> 00:33:34.000
(laughing)


00:33:34.000 --> 00:33:35.840
I haven't tried this out.


00:33:35.840 --> 00:33:37.480
- And where's your camera?


00:33:37.480 --> 00:33:38.680
Where do you put your camera?


00:33:38.680 --> 00:33:41.600
Like for, so anyway.


00:33:41.600 --> 00:33:44.040
- Yeah, there's a lot of interesting


00:33:44.040 --> 00:33:46.080
and stuff I'm actually, interesting things


00:33:46.080 --> 00:33:51.080
and stuff I'm actually excited about announced at WWDC.


00:33:51.080 --> 00:33:54.760
Vision Pro, yeah, there's like for example,


00:33:54.760 --> 00:33:59.760
large language model dictation for iOS and Mac.


00:33:59.760 --> 00:34:03.800
So I don't know how many people know who have tried this,


00:34:03.800 --> 00:34:05.800
but I, for multiple reasons,


00:34:05.800 --> 00:34:09.560
have tried to do dictation on the Mac,


00:34:09.560 --> 00:34:12.720
partly because I have like mild grade at this point,


00:34:12.720 --> 00:34:15.440
RSI issues, and so if I can limit typing, that's good.


00:34:15.440 --> 00:34:17.840
And then maybe I've got a lot of stuff I need to blaze


00:34:17.840 --> 00:34:19.680
through like a bunch of email or something,


00:34:19.680 --> 00:34:21.600
I'd love to dictate to it.


00:34:21.600 --> 00:34:26.600
But the dictation system on Mac is like 10 years old


00:34:26.600 --> 00:34:27.860
or something, it's really bad.


00:34:27.860 --> 00:34:30.160
You can't even say new paragraph, for example.


00:34:30.160 --> 00:34:33.240
Like, nope, they don't just write out new paragraph.


00:34:33.240 --> 00:34:35.880
Whereas on iPhone, you can say new paragraph or do this,


00:34:35.880 --> 00:34:38.280
or you can navigate around way better.


00:34:38.280 --> 00:34:39.780
They're not the same systems.


00:34:39.780 --> 00:34:41.440
So both of those are being replaced


00:34:41.440 --> 00:34:44.680
with like ChatGPT level of AIs.


00:34:44.680 --> 00:34:47.320
And so dictation to your computer or your device


00:34:47.320 --> 00:34:49.880
is gonna get way better.


00:34:49.880 --> 00:34:52.240
So that means less typing, less RSI,


00:34:52.240 --> 00:34:54.980
just different input modalities if you need a break.


00:34:54.980 --> 00:34:57.220
Like those kinds of things I'm really psyched about.


00:34:57.220 --> 00:34:58.260
Vision Pro we'll see.


00:34:58.260 --> 00:35:03.720
- Yeah, there's potential there,


00:35:03.720 --> 00:35:07.280
but there's also way more potential for jokes.


00:35:07.280 --> 00:35:08.400
- Yes, it's gonna be good.


00:35:08.400 --> 00:35:09.880
Speaking of jokes, we'll wrap it up


00:35:09.880 --> 00:35:11.340
with one from Kim in the audience.


00:35:11.340 --> 00:35:12.680
If an avatar is an option,


00:35:12.680 --> 00:35:14.720
T-Rexes will be meeting with the elves


00:35:14.720 --> 00:35:17.080
and talking frogs in no time.


00:35:17.080 --> 00:35:19.120
- That would be great.


00:35:19.120 --> 00:35:19.960
I'm here for that.


00:35:19.960 --> 00:35:20.920
Let's do it.


00:35:20.920 --> 00:35:22.480
I'm here for it.


00:35:22.480 --> 00:35:23.560
All right.


00:35:23.560 --> 00:35:24.440
Bye, Brian.


00:35:24.440 --> 00:35:26.480
Bye, everyone.


00:35:26.480 --> 00:35:36.480
[BLANK_AUDIO]

