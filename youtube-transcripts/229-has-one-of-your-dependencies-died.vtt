WEBVTT

00:00:00.000 --> 00:00:05.000
Hello and welcome to Python Bytes.


00:00:05.000 --> 00:00:09.000
This is episode... I missed something.


00:00:09.000 --> 00:00:12.000
Okay, two over.


00:00:12.000 --> 00:00:16.000
Hello and welcome to Python Bytes, where we deliver news and headlines directly to your earbuds.


00:00:16.000 --> 00:00:21.000
This is episode 229, recorded April 14, 2021.


00:00:21.000 --> 00:00:23.000
And I am Brian Okken.


00:00:23.000 --> 00:00:25.000
I'm Michael Kennedy.


00:00:25.000 --> 00:00:28.000
Hi, I'm Gwen Farraday.


00:00:28.000 --> 00:00:31.000
- Hey, Gwen, great to have you here.


00:00:31.000 --> 00:00:32.460
Thanks for coming.


00:00:32.460 --> 00:00:34.380
- Yeah, thanks for having me.


00:00:34.380 --> 00:00:35.940
- Yeah, super to have you here.


00:00:35.940 --> 00:00:38.860
- Cool.


00:00:38.860 --> 00:00:40.840
- So yeah, so I, you know, we invited you


00:00:40.840 --> 00:00:42.600
because you're doing really cool stuff with Python


00:00:42.600 --> 00:00:44.940
and you're doing some neat things on YouTube


00:00:44.940 --> 00:00:47.380
and some, are you doing live streaming as well


00:00:47.380 --> 00:00:48.660
or just videos?


00:00:48.660 --> 00:00:50.740
You know, maybe just tell people real quick about yourself


00:00:50.740 --> 00:00:53.060
before we get into our topics.


00:00:53.060 --> 00:00:53.960
- Yeah, sure.


00:00:53.960 --> 00:00:56.940
So I'm, I work as a senior software developer


00:00:56.940 --> 00:01:03.220
a consulting company. We do almost entirely Django projects there, and I've really loved


00:01:03.220 --> 00:01:08.420
getting to use Django for the past couple years. On the side, I also teach at a coding


00:01:08.420 --> 00:01:15.120
school where we do full stack JavaScript, but most of our backend and computer science


00:01:15.120 --> 00:01:21.740
curriculum is actually Python, and then we also use Django for the final portion of the


00:01:21.740 --> 00:01:24.540
curriculum as well as the final project.


00:01:24.540 --> 00:01:27.020
And then on the side, as Michael mentioned,


00:01:27.020 --> 00:01:31.700
I really like to make videos and content and things like that.


00:01:31.700 --> 00:01:36.380
So I've done a mixture of JavaScript and Python content


00:01:36.380 --> 00:01:38.820
under the name Faraday Academy.


00:01:38.820 --> 00:01:40.940
And I also have Twitch live streams.


00:01:40.940 --> 00:01:43.520
So most recently for Python, I've


00:01:43.520 --> 00:01:47.540
been kind of diving into FastAPI Live


00:01:47.540 --> 00:01:51.060
and trying to learn async Python since I haven't really


00:01:51.060 --> 00:01:51.900
- Yeah, it's awesome.


00:01:51.900 --> 00:01:53.060
- And technology to work with.


00:01:53.060 --> 00:01:55.820
So you sound like you're busy, but in a good way.


00:01:55.820 --> 00:01:59.620
- But I love programming, so it's like my passion.


00:01:59.620 --> 00:02:03.020
It's not burdensome, I guess.


00:02:03.020 --> 00:02:05.860
- Yeah, it doesn't count as work, that's great.


00:02:05.860 --> 00:02:06.700
Brian, what's-- - Yeah, that's it.


00:02:06.700 --> 00:02:08.780
- Yeah, good, yeah, absolutely.


00:02:08.780 --> 00:02:10.300
That's us as well, man.


00:02:10.300 --> 00:02:11.140
- Yeah.


00:02:11.140 --> 00:02:13.140
- So, Brian, you wanna kick us off?


00:02:13.140 --> 00:02:13.980
- Yeah, I'm gonna kick us off.


00:02:13.980 --> 00:02:14.820
- Yeah, I'm gonna kick us off.


00:02:14.820 --> 00:02:15.660
- Yeah, I'm gonna kick us off.


00:02:15.660 --> 00:02:16.500
- Yeah, I'm gonna kick us off.


00:02:16.500 --> 00:02:17.320
- Yeah, I'm gonna kick us off.


00:02:17.320 --> 00:02:18.160
- Yeah, I'm gonna kick us off.


00:02:18.160 --> 00:02:19.000
- Yeah, I'm gonna kick us off.


00:02:19.000 --> 00:02:21.000
Brian, you want to kick us off?


00:02:21.000 --> 00:02:24.000
Yeah, the first story I want to cover is about coverage.


00:02:24.000 --> 00:02:27.000
Couldn't help the bad pun.


00:02:27.000 --> 00:02:32.000
So, Ned Batchelder put a post out just the other day.


00:02:32.000 --> 00:02:35.000
There's a beta out for coverage.


00:02:35.000 --> 00:02:38.000
It's a 5.6 beta 1.


00:02:38.000 --> 00:02:42.000
And it's kind of a big revamp.


00:02:42.000 --> 00:02:46.000
Well, I don't know how much code he changed, but he says it's a big deal.


00:02:46.000 --> 00:02:52.720
So the thing that's exciting about this is it's supposed to exclude third-party packages.


00:02:52.720 --> 00:02:58.560
This is actually amazing because in the workflow, one of the problems I've had before


00:02:58.560 --> 00:03:05.360
is I'm just like, I've just got some, just starting out with a project, say, and I got some code in


00:03:05.360 --> 00:03:10.800
a directory. I've got my virtual environment there also, same directory, throw some test code in there


00:03:11.360 --> 00:03:15.760
And I want to tell you, you have to tell coverage,


00:03:15.760 --> 00:03:19.360
if you don't give it any flags, it just measures everything.


00:03:19.360 --> 00:03:21.360
But now it doesn't.


00:03:21.360 --> 00:03:26.160
Now if you say like coverage run pytest or coverage run


00:03:26.160 --> 00:03:28.960
your, like whatever your module is,


00:03:28.960 --> 00:03:32.360
because you can run coverage without tests too, that's a thing.


00:03:32.360 --> 00:03:35.760
It just grabs everything and reports everything.


00:03:35.760 --> 00:03:38.360
And that's hardly ever what you want.


00:03:38.360 --> 00:03:44.200
So the change in 5.6 Beta 1 is to knock out


00:03:44.200 --> 00:03:47.320
the third-party packages and not collect those.


00:03:47.320 --> 00:03:49.400
I tried it out on a couple of projects,


00:03:49.400 --> 00:03:50.800
I want to try it out on more.


00:03:50.800 --> 00:03:53.720
But for instance, if you do it on your current directory,


00:03:53.720 --> 00:03:54.800
even if you say,


00:03:54.800 --> 00:03:56.640
give it just your current directory,


00:03:56.640 --> 00:03:58.520
it's going to include all your virtual environment


00:03:58.520 --> 00:04:00.780
there if it's there also, and you don't want that.


00:04:00.780 --> 00:04:03.840
So this is a really cool thing.


00:04:03.840 --> 00:04:08.080
It's beta because you'd like to hear from people


00:04:08.080 --> 00:04:09.800
to find out if there's problems.


00:04:09.800 --> 00:04:12.120
So go out and test it out.


00:04:12.120 --> 00:04:15.320
I haven't tried it on pytest plugins yet.


00:04:15.320 --> 00:04:18.920
That's what I'd like to do next, but this is cool.


00:04:18.920 --> 00:04:20.560
- Yeah, that's really nice because obviously


00:04:20.560 --> 00:04:23.000
you wanna have code coverage of your code,


00:04:23.000 --> 00:04:24.680
but you absolutely have no interest


00:04:24.680 --> 00:04:27.440
in testing other people's projects, right?


00:04:27.440 --> 00:04:29.480
There are packages that you're using and whatnot.


00:04:29.480 --> 00:04:30.600
So yeah, that's perfect.


00:04:30.600 --> 00:04:33.120
Do you have to do anything to make this turn on?


00:04:33.120 --> 00:04:36.520
- Well, yes, you have to right now because it's in beta,


00:04:36.520 --> 00:04:40.240
you have to initially, you have to install coverage


00:04:40.240 --> 00:04:42.860
equals equals, we've got it in our show notes,


00:04:42.860 --> 00:04:46.480
but coverage equals equals 5.6b1.


00:04:46.480 --> 00:04:49.400
It's also in the blog post that we linked to.


00:04:49.400 --> 00:04:53.080
But, and it works with, so I tried it also


00:04:53.080 --> 00:04:55.680
with the pytest-cov plugin.


00:04:55.680 --> 00:04:57.880
And if you install pytest-cov,


00:04:57.880 --> 00:05:00.240
and then install this other version of coverage,


00:05:00.240 --> 00:05:03.040
they'll work together and you can use them together too.


00:05:03.040 --> 00:05:03.980
So.


00:05:03.980 --> 00:05:05.520
- Yeah, very nice.


00:05:05.520 --> 00:05:08.280
- Gwyn, what's the coverage story for you all?


00:05:08.280 --> 00:05:11.200
Do you do unit testing, code coverage,


00:05:11.200 --> 00:05:13.360
analysis, things like that?


00:05:13.360 --> 00:05:17.520
- So as far as for our Python and Django projects,


00:05:17.520 --> 00:05:20.460
we do some testing.


00:05:20.460 --> 00:05:22.600
I would say not enough testing.


00:05:22.600 --> 00:05:25.120
So just like most companies I've worked at,


00:05:25.120 --> 00:05:28.960
we always have the discussion, we should do more testing.


00:05:28.960 --> 00:05:31.280
And sometimes we do more testing and sometimes we don't.


00:05:31.280 --> 00:05:34.960
So our development team has been talking about it.


00:05:34.960 --> 00:05:38.480
So actually this package, coverage.py,


00:05:38.480 --> 00:05:39.480
I've never used before,


00:05:39.480 --> 00:05:41.640
but I was reading about it in the show notes


00:05:41.640 --> 00:05:43.720
and looking it up before this episode.


00:05:43.720 --> 00:05:45.720
So I was like, "Oh, that's a really nice tool.


00:05:45.720 --> 00:05:47.280
I think I'm gonna use it."


00:05:47.280 --> 00:05:51.600
But mostly we do unit testing on like really complicated


00:05:51.600 --> 00:05:54.120
areas that we think might break


00:05:54.120 --> 00:05:56.700
or might have edge cases or something like that.


00:05:56.700 --> 00:05:59.080
- That's actually a great use for coverage


00:05:59.080 --> 00:06:01.800
because you can, like if you specify the sort,


00:06:01.800 --> 00:06:06.560
like which source to cover, you can zoom in and say,


00:06:06.560 --> 00:06:08.200
I just have this little directory


00:06:08.200 --> 00:06:10.560
or these few modules of code,


00:06:10.560 --> 00:06:12.640
you can say, just cover those


00:06:12.640 --> 00:06:15.800
and you can check the coverage on that.


00:06:15.800 --> 00:06:17.120
- That's interesting.


00:06:17.120 --> 00:06:21.880
So you could generate reports on different areas even.


00:06:21.880 --> 00:06:24.600
- Yeah. - Nice.


00:06:24.600 --> 00:06:26.120
- Yeah, I only care about this part,


00:06:26.120 --> 00:06:27.320
so just tell me about this part.


00:06:27.320 --> 00:06:28.840
Yeah, that's perfect.


00:06:28.840 --> 00:06:30.040
- Yeah.


00:06:30.040 --> 00:06:30.960
- All right.


00:06:30.960 --> 00:06:32.760
Well, this next one that I want to cover


00:06:32.760 --> 00:06:35.040
has to do with platform as a service.


00:06:35.040 --> 00:06:38.400
So we often hear about Azure and AWS


00:06:38.400 --> 00:06:42.000
and in the Python world, Heroku is very popular,


00:06:42.000 --> 00:06:44.760
but you know, these platform as a service places


00:06:44.760 --> 00:06:47.840
where you get push your code and then it makes servers go


00:06:47.840 --> 00:06:49.520
and new versions get deployed


00:06:49.520 --> 00:06:51.200
and who knows how that happens.


00:06:51.200 --> 00:06:52.500
That's all well and good if you want to run


00:06:52.500 --> 00:06:53.340
in the public cloud,


00:06:53.340 --> 00:06:56.420
but what if you want to run just on your own servers?


00:06:56.420 --> 00:07:00.760
So Ian Maurer sent over this thing called Piku.


00:07:00.760 --> 00:07:04.360
So Piku is the tiniest pass platform as a service


00:07:04.360 --> 00:07:05.960
you've ever seen.


00:07:05.960 --> 00:07:07.800
It allows you to do a Git push deployment


00:07:07.800 --> 00:07:08.800
to your own servers.


00:07:08.800 --> 00:07:09.640
Isn't that cool?


00:07:09.640 --> 00:07:12.280
So yeah, yeah.


00:07:12.280 --> 00:07:15.080
So the idea is you basically set this up on your server


00:07:15.080 --> 00:07:21.080
and then you connect it basically directly through GitHub.


00:07:21.080 --> 00:07:23.600
And then whenever you do a Git push


00:07:23.600 --> 00:07:27.640
that automatically kicks off a new server creation.


00:07:27.640 --> 00:07:29.560
I think it probably is running on Docker


00:07:29.560 --> 00:07:30.400
or something like that.


00:07:30.400 --> 00:07:33.680
but not 100% sure I haven't dug into the internal


00:07:33.680 --> 00:07:34.520
of how it runs.


00:07:34.520 --> 00:07:37.640
But so here you can even see on the right of the homepage,


00:07:37.640 --> 00:07:39.160
which is an animated GIF.


00:07:39.160 --> 00:07:42.520
You can go and check that out,


00:07:42.520 --> 00:07:44.140
but you just can sort of see what it does.


00:07:44.140 --> 00:07:46.040
It says, as soon as you do a git push,


00:07:46.040 --> 00:07:48.560
it'll come along and says, you're remote,


00:07:48.560 --> 00:07:51.720
as opposed to just, you know, writing objects,


00:07:51.720 --> 00:07:53.900
you know, push done, it like continues on.


00:07:53.900 --> 00:07:56.440
It says remote, creating app, deploying app,


00:07:56.440 --> 00:07:57.480
your branch is up to date.


00:07:57.480 --> 00:08:00.240
Now your app is detected, creating virtual environment.


00:08:00.240 --> 00:08:04.080
And you can basically tell it what your requirements files is,


00:08:04.080 --> 00:08:07.360
what the execute file, just like Heroku,


00:08:07.360 --> 00:08:09.360
you give it a like a proc file


00:08:09.360 --> 00:08:10.660
or something, it's called something like that,


00:08:10.660 --> 00:08:13.160
where it just basically says, when you run this project,


00:08:13.160 --> 00:08:15.480
what command do you give it?


00:08:15.480 --> 00:08:16.720
And then it just runs.


00:08:16.720 --> 00:08:18.340
And that's pretty cool.


00:08:18.340 --> 00:08:24.180
So it's really meant to be especially useful


00:08:24.180 --> 00:08:25.440
for low end devices.


00:08:25.440 --> 00:08:27.360
So I think this originates actually


00:08:27.360 --> 00:08:30.320
from working on Raspberry Pi.


00:08:30.320 --> 00:08:33.180
So like Git push deploy to Raspberry Pi,


00:08:33.180 --> 00:08:37.400
which is a Raspberry Pi clusters, which is awesome.


00:08:37.400 --> 00:08:40.480
So one of its, you know, some of its core ideas


00:08:40.480 --> 00:08:42.000
are it's supposed to run on low end devices.


00:08:42.000 --> 00:08:43.940
It's supposed to be accessible for hobbyists


00:08:43.940 --> 00:08:45.840
and, you know, lower school,


00:08:45.840 --> 00:08:49.560
like K through 12 school grade students.


00:08:49.560 --> 00:08:51.480
The whole platform as a service


00:08:51.480 --> 00:08:55.520
is about a thousand lines of code of Python, I think.


00:08:55.520 --> 00:08:57.640
and quite functional.


00:08:57.640 --> 00:09:00.500
It adheres to the 12-factor app of like separation


00:09:00.500 --> 00:09:03.040
of concerns and separation of configuration


00:09:03.040 --> 00:09:05.580
and logging and so on.


00:09:05.580 --> 00:09:09.100
Yeah, it's pretty neat, pretty simple to use.


00:09:09.100 --> 00:09:10.540
And then you just install the client


00:09:10.540 --> 00:09:14.380
and then you just do your Git pushes with this thing.


00:09:14.380 --> 00:09:18.300
So if you've got a bunch of Raspberry Pis


00:09:18.300 --> 00:09:21.980
or other devices you wanna use as a platform as a service,


00:09:21.980 --> 00:09:23.380
here's a pretty interesting option.


00:09:23.380 --> 00:09:27.020
if you just have also plain Linux x86 machines


00:09:27.020 --> 00:09:31.420
and you want to make them be something like Heroku.


00:09:31.420 --> 00:09:33.980
I went through a lot of work over at TalkByThon training


00:09:33.980 --> 00:09:37.820
so we can get push to a production branch


00:09:37.820 --> 00:09:40.540
and that automatically kicks off this whole workflow


00:09:40.540 --> 00:09:43.380
that not just updates the requirements


00:09:43.380 --> 00:09:45.660
and installs the new ones and restarts it,


00:09:45.660 --> 00:09:47.460
but a little bit more than that.


00:09:47.460 --> 00:09:48.380
It was a lot of work.


00:09:48.380 --> 00:09:49.780
This thing sounds really handy


00:09:49.780 --> 00:09:51.880
if you've got a pretty straightforward case,


00:09:51.880 --> 00:09:53.800
but you kind of want that same workflow.


00:09:53.800 --> 00:09:56.320
- Do you know, does it just work with GitHub


00:09:56.320 --> 00:09:58.440
or can I use it with other things too?


00:09:58.440 --> 00:10:00.160
- I think it just works with Git.


00:10:00.160 --> 00:10:02.600
I don't think it has anything to do with GitHub itself.


00:10:02.600 --> 00:10:03.620
- Oh, okay.


00:10:03.620 --> 00:10:04.720
- Yeah, I think it's-- - That's great.


00:10:04.720 --> 00:10:06.320
- Yeah, yeah, it's pretty cool.


00:10:06.320 --> 00:10:07.840
So if you go and you watch,


00:10:07.840 --> 00:10:09.840
if you watch the GIF, the animated GIF,


00:10:09.840 --> 00:10:10.680
and you click on it,


00:10:10.680 --> 00:10:12.680
it becomes like a little movie type thing.


00:10:12.680 --> 00:10:15.400
You can see they start from an empty directory


00:10:15.400 --> 00:10:17.720
with the code that they create,


00:10:17.720 --> 00:10:18.660
or the code is already there,


00:10:18.660 --> 00:10:19.720
but it's not in source control.


00:10:19.720 --> 00:10:21.920
then they get init the local repository,


00:10:21.920 --> 00:10:24.460
then they add a remote, which is not GitHub,


00:10:24.460 --> 00:10:25.960
and then as soon as they push to it,


00:10:25.960 --> 00:10:28.800
it kicks off the creation and running of this thing.


00:10:28.800 --> 00:10:31.700
- I think we're gonna use this


00:10:31.700 --> 00:10:33.960
'cause just for like internal servers,


00:10:33.960 --> 00:10:35.440
so we've got internal projects


00:10:35.440 --> 00:10:40.300
that we can't host them on Heroku or something like that,


00:10:40.300 --> 00:10:41.640
that just ain't gonna work.


00:10:41.640 --> 00:10:45.280
But we could update the website and stuff


00:10:45.280 --> 00:10:48.180
and push to get and have it,


00:10:48.180 --> 00:10:50.240
have it pull it into the server automatically.


00:10:50.240 --> 00:10:52.140
- Yeah, there's all these little internal web apps


00:10:52.140 --> 00:10:53.440
that people run at companies


00:10:53.440 --> 00:10:57.060
that wouldn't make sense necessarily to run


00:10:57.060 --> 00:10:58.760
on a public cloud,


00:10:58.760 --> 00:11:01.360
because maybe they need to talk to local infrastructure


00:11:01.360 --> 00:11:03.240
and you guys even have hardware devices


00:11:03.240 --> 00:11:06.000
where you're working that you actually talk to.


00:11:06.000 --> 00:11:08.400
So yeah, here's a way to get a better deployment story


00:11:08.400 --> 00:11:13.040
without making it your next project to keep maintaining.


00:11:13.040 --> 00:11:14.080
- Nice.


00:11:14.080 --> 00:11:16.080
- Yeah, I was looking at this


00:11:16.080 --> 00:11:19.840
and I have a somewhat clunky setup for personal projects


00:11:19.840 --> 00:11:22.920
where I have different Docker containers and watching


00:11:22.920 --> 00:11:26.900
and Watchman Docker container running on my servers.


00:11:26.900 --> 00:11:29.840
So I was looking at this, I was like, that's so easy.


00:11:29.840 --> 00:11:32.100
Why don't I just use this?


00:11:32.100 --> 00:11:32.940
- Exactly.


00:11:32.940 --> 00:11:35.120
Yeah, I don't know how flexible it is


00:11:35.120 --> 00:11:37.000
and how much of a general solution it is.


00:11:37.000 --> 00:11:38.820
'Cause like I said, I already have a solution


00:11:38.820 --> 00:11:42.260
that is like this, but I'm super glad to be able to just


00:11:42.260 --> 00:11:45.240
get push to a certain branch.


00:11:45.240 --> 00:11:47.280
And that means in 30 seconds,


00:11:47.280 --> 00:11:49.640
it'll be deployed in a consistent, reliable way


00:11:49.640 --> 00:11:51.480
that I don't have to think about it.


00:11:51.480 --> 00:11:52.920
It just makes it so easy to go,


00:11:52.920 --> 00:11:55.320
oh, this part of the code is ready for production,


00:11:55.320 --> 00:11:58.040
get push, as opposed to all the steps


00:11:58.040 --> 00:11:59.400
that a lot of people go through manually


00:11:59.400 --> 00:12:01.360
to do various things.


00:12:01.360 --> 00:12:02.240
So yeah, cool.


00:12:02.240 --> 00:12:04.900
Definitely neat.


00:12:04.900 --> 00:12:07.480
All right, Gwyn, you got the next one?


00:12:07.480 --> 00:12:11.120
Something kind of in the news these days.


00:12:11.120 --> 00:12:19.160
Yes, so I've got this kind of fit in with everything that's going on Reddit and the news and everything.


00:12:19.160 --> 00:12:27.160
So blockchains, I think most of you have heard of blockchains and Bitcoin and Ethereum.


00:12:27.160 --> 00:12:35.160
And there are ways to basically build applications for the blockchain using Python.


00:12:35.160 --> 00:12:48.720
So, for example, web3.py is a popular library where you can interact with the Ethereum blockchain via a Python API.


00:12:48.720 --> 00:12:51.840
So it's basically a wrapper that it gives you.


00:12:51.840 --> 00:12:58.240
And there's also a similar language to Python that was built for the Ethereum blockchain.


00:12:58.240 --> 00:12:59.360
It's called Vypr.


00:12:59.360 --> 00:13:04.880
So it's kind of Python, get it Python and Viper, they're both snakes.


00:13:04.880 --> 00:13:08.000
But it's basically a Pythonic language.


00:13:08.000 --> 00:13:13.120
So you can actually write these smart contracts or applications for the blockchain


00:13:13.120 --> 00:13:19.360
in that language or in Solidity or some other language.


00:13:19.360 --> 00:13:24.080
And you can deploy your applications to the blockchain


00:13:24.080 --> 00:13:28.720
and then you can interact with them or interact with any general blockchain information


00:13:28.720 --> 00:13:31.880
using Python with Web3.py.


00:13:31.880 --> 00:13:36.000
So it's a really robust library and solution,


00:13:36.000 --> 00:13:38.960
and especially with, you know,


00:13:38.960 --> 00:13:43.280
NFTs or non-functionable tokens and things like that


00:13:43.280 --> 00:13:45.600
being so big right now,


00:13:45.600 --> 00:13:48.720
you know, using Web3.py,


00:13:48.720 --> 00:13:51.400
you can also interact with those types of contracts


00:13:51.400 --> 00:13:53.960
that you deploy to the blockchain


00:13:53.960 --> 00:13:57.800
and build applications for people as well and for users.


00:13:57.800 --> 00:14:13.800
Oh, this is really cool. You know, I haven't done nothing with the blockchain and nothing with cryptocurrency. So Ethereum, is this more, this is more a blockchain thing, not a cryptocurrency thing? What's the distinction there? Or is it not?


00:14:13.800 --> 00:14:21.800
So, cryptocurrencies, basically they're built on the blockchain, right?


00:14:21.800 --> 00:14:26.800
Or some other type of post blockchain technology which evolved from blockchain.


00:14:26.800 --> 00:14:33.800
So, you can use this to interact with cryptocurrencies.


00:14:33.800 --> 00:14:37.800
I think people have built trading bots and different things with these.


00:14:37.800 --> 00:14:44.120
with these, but you can also build really any type of application on the blockchain


00:14:44.120 --> 00:14:52.840
and use web3.py to interact with it, whether it's a voting application or some kind of


00:14:52.840 --> 00:14:57.840
exchange or whatever you want to do on the blockchain, you will have the API interface


00:14:57.840 --> 00:14:58.840
with web3.py.


00:14:58.840 --> 00:15:07.040
I just bring up non-fungible tokens because of all the artwork and you know, the hype


00:15:07.040 --> 00:15:09.040
around what is it, Dogecoin.


00:15:09.040 --> 00:15:13.660
Yeah, I'm thinking of taking a screenshot of Brian and we can make it a non-fungible


00:15:13.660 --> 00:15:15.000
token and sell him.


00:15:15.000 --> 00:15:18.520
What do you think we could get from Ryan?


00:15:18.520 --> 00:15:24.120
We could take multiple screenshots and just, you know, sell like hundreds of them.


00:15:24.120 --> 00:15:25.120
Yes, exactly.


00:15:25.120 --> 00:15:30.720
Yeah, I think the non-fungible token stuff is really interesting. It's really far out there.


00:15:30.720 --> 00:15:36.720
But the blockchain seems to be the most concrete, practical, you know, you could build stuff.


00:15:36.720 --> 00:15:42.720
Like you mentioned, voting and other stuff. I could certainly see if the world could ever get it together.


00:15:42.720 --> 00:15:47.120
Some kind of online voting system based on the blockchain.


00:15:48.320 --> 00:15:59.320
Yeah, and some places, some organizations, and also I believe some countries and localities are already using the blockchain for things like that.


00:15:59.320 --> 00:16:00.320
Nice.


00:16:00.320 --> 00:16:03.320
I think it's even being talked about in our own government.


00:16:03.320 --> 00:16:16.320
They have some committees that are talking about using blockchain in different ways, of course, with securities and how it's going to affect securities, but also with other possible future use cases, like things like voting.


00:16:16.320 --> 00:16:22.320
- Awesome. Yeah, I'm going to have a woman from the FEC, Federal Election Commission,


00:16:22.320 --> 00:16:27.320
on Talk Python to talk about using Python for the FEC.


00:16:27.320 --> 00:16:30.320
And I feel like we definitely got to talk about blockchain.


00:16:30.320 --> 00:16:32.320
- That's interesting. - Yeah, that'll be fun.


00:16:32.320 --> 00:16:37.320
- Man, you get some cool hosts or guests on your show. That's great.


00:16:37.320 --> 00:16:38.320
- Thanks. Thanks.


00:16:38.320 --> 00:16:42.320
- Yeah, so I'm really excited with where blockchain is going,


00:16:42.320 --> 00:16:50.880
you know, being used in supply chain, in refugee camps, in pretty much every major bank now,


00:16:50.880 --> 00:16:55.040
every country is looking into blockchain. So I think it's a really good thing to get on board


00:16:55.040 --> 00:17:01.920
with. And Python is a really easy entry way to really to prototype anything in Python. So you'll


00:17:01.920 --> 00:17:07.040
see a lot of people want to find out about blockchain, and they'll build like their own


00:17:07.040 --> 00:17:11.920
test blockchain in Python to understand it. But there are also libraries where you can interact


00:17:11.920 --> 00:17:19.040
with real blockchains like hyperledger SDKs and Python. So you can use different kinds of popular


00:17:19.040 --> 00:17:25.440
blockchains or the most popular blockchain now, which is Ethereum. So you could interact with


00:17:25.440 --> 00:17:32.000
that via web3.py. Yeah. Okay, cool. If people want to check it out, this is a great recommendation.


00:17:32.000 --> 00:17:38.000
Quick question from or comment from the live show. Tuna Army Captain says,


00:17:38.000 --> 00:17:40.240
"At what point does this become about monetizing?"


00:17:40.240 --> 00:17:42.440
Is this Horcruxes?


00:17:42.440 --> 00:17:43.280
- Horcruxes, yes.


00:17:43.280 --> 00:17:45.000
- Horcruxes, Brian, help me out here.


00:17:45.000 --> 00:17:47.580
(Brian laughs)


00:17:47.580 --> 00:17:49.680
- I think so.


00:17:49.680 --> 00:17:50.520
- Yeah.


00:17:50.520 --> 00:17:53.160
- Today, it's gotten there today.


00:17:53.160 --> 00:17:54.000
- Absolutely.


00:17:54.000 --> 00:17:58.360
All right, well, very cool, very cool recommendation.


00:17:58.360 --> 00:18:00.000
What's the next one that you got here, Brian?


00:18:00.000 --> 00:18:01.800
I checked this out, I'm super excited about this.


00:18:01.800 --> 00:18:03.960
This is a great idea.


00:18:03.960 --> 00:18:05.400
- Yeah, so this was,


00:18:05.400 --> 00:18:09.720
So this was a recommendation from Johannes Lipman.


00:18:09.720 --> 00:18:15.200
He mentioned in episode 227, we talked about SNYK.


00:18:15.200 --> 00:18:22.400
- SNYK, SNYK, SNYK package advisor, I think it was.


00:18:22.400 --> 00:18:23.920
- Yeah, it tells you how,


00:18:23.920 --> 00:18:25.960
it gives you a health recommendation


00:18:25.960 --> 00:18:30.440
or health score on any package, Python package.


00:18:30.440 --> 00:18:33.520
Well, this is a similar, well, it's not really similar.


00:18:33.520 --> 00:18:35.880
It's I guess in the same category.


00:18:35.880 --> 00:18:37.880
Dead dependency.


00:18:37.880 --> 00:18:40.360
D-E-A-D dependency.


00:18:40.360 --> 00:18:43.240
This is a tool that's got,


00:18:43.240 --> 00:18:47.080
there's a paid version, but it's free for open-source projects.


00:18:47.080 --> 00:18:52.360
It's a GitHub thing or GitHub application.


00:18:52.360 --> 00:18:54.440
>> Yeah, GitHub app.


00:18:54.440 --> 00:18:59.000
>> What it does is it looks at your dependencies.


00:19:01.000 --> 00:19:04.040
It looks at a lot of stuff.


00:19:04.040 --> 00:19:06.480
I'm just going to bring up an example.


00:19:06.480 --> 00:19:08.880
Somebody wants to add some functionality to


00:19:08.880 --> 00:19:15.000
your project, they change it,


00:19:15.000 --> 00:19:16.880
and it adds a dependency.


00:19:16.880 --> 00:19:18.920
One of the things you'll see in the pull request,


00:19:18.920 --> 00:19:21.440
if you use this,


00:19:21.440 --> 00:19:24.040
is a dependency will go out and look to


00:19:24.040 --> 00:19:26.680
see how healthy that dependency is.


00:19:26.680 --> 00:19:28.120
You've got a new one in there,


00:19:28.120 --> 00:19:34.960
And it's got a whole bunch of configurable options that I really think are pretty cool.


00:19:34.960 --> 00:19:42.560
It checks for things like how recent was wanted to make sure that there's recent releases, recent commits.


00:19:42.560 --> 00:19:46.000
And they're pretty broad. The defaults are like,


00:19:46.000 --> 00:19:50.000
has there been a commit in the last 12 months?


00:19:50.000 --> 00:19:54.080
Yeah, can you scroll down just like one page to the jQuery example?


00:19:54.080 --> 00:19:55.080
Yeah, okay.


00:19:55.080 --> 00:19:57.080
That's a great example right there.


00:19:57.080 --> 00:20:01.920
Yeah. So one of their example is you've got a jQuery UI


00:20:01.920 --> 00:20:04.680
that's added. And what it does is,


00:20:04.680 --> 00:20:08.640
it doesn't just check for one thing, it looks for all your dependencies.


00:20:08.640 --> 00:20:12.280
And it shows that, you know, a couple like jQuery UI


00:20:12.280 --> 00:20:14.960
hasn't been released for over 12 months.


00:20:14.960 --> 00:20:18.560
And then a package called nom nom


00:20:18.560 --> 00:20:21.280
that's no commits for the last nine months.


00:20:21.280 --> 00:20:24.640
And it's been deprecated in the package registry.


00:20:24.640 --> 00:20:30.640
So it checks for deprecations and also things like, yeah,


00:20:30.640 --> 00:20:34.760
if it's been deprecated or if it's gone down to a single author,


00:20:34.760 --> 00:20:37.440
maybe that might be at risk for some projects.


00:20:37.440 --> 00:20:41.000
But all of it's configurable. So this is pretty neat.


00:20:41.000 --> 00:20:42.720
Yeah, I love the idea.


00:20:42.720 --> 00:20:46.720
And it works not just for Python or as JavaScript as you mentioned,


00:20:46.720 --> 00:20:50.360
but also Rust, Ruby, C#, Kotlin, a bunch of stuff.


00:20:50.360 --> 00:20:54.660
>> Yeah. I tried it out and I couldn't get it to work,


00:20:54.660 --> 00:20:57.620
but I know why I couldn't get it to work.


00:20:57.620 --> 00:20:59.980
I'm using Flit now,


00:20:59.980 --> 00:21:04.620
so I'm using pyproject.toml for my dependencies and stuff in my projects,


00:21:04.620 --> 00:21:06.400
and this doesn't support it yet.


00:21:06.400 --> 00:21:09.740
It supports requirements.txt and pip file.


00:21:09.740 --> 00:21:13.180
Last night I was playing with it and I sent him an e-mail and said,


00:21:13.180 --> 00:21:18.020
"It'd be really great if it would support setup.py and pyproject.toml."


00:21:18.020 --> 00:21:21.360
And gosh, within an hour, I got a response back and said,


00:21:21.360 --> 00:21:24.700
yeah, you're right, we should do PyProject.toml.


00:21:24.700 --> 00:21:27.560
It's a simple format and we'll try to support it.


00:21:27.560 --> 00:21:30.680
But setup.py, a little more difficult


00:21:30.680 --> 00:21:34.920
because as we know, setup.py has no real restrictions


00:21:34.920 --> 00:21:35.880
on its formatting.


00:21:35.880 --> 00:21:38.840
So there's a lot of crazy stuff out there for that.


00:21:38.840 --> 00:21:40.940
- Yeah, for sure.


00:21:40.940 --> 00:21:44.700
Quinn, what do you think?


00:21:44.700 --> 00:21:45.680
- Yeah, I was just gonna say,


00:21:45.680 --> 00:21:48.000
I was gonna try this out on a project,


00:21:48.000 --> 00:21:53.760
But I also use Poetry, so use pyproject.toml for the dependencies.


00:21:53.760 --> 00:21:57.360
But like you said, it's an easy format.


00:21:57.360 --> 00:22:00.800
So maybe if they support it soon, I'll try this out.


00:22:00.800 --> 00:22:04.160
It seems like a really good idea.


00:22:04.160 --> 00:22:07.000
Yeah, it's fairly new too.


00:22:07.000 --> 00:22:08.680
It looks really slick.


00:22:08.680 --> 00:22:10.400
Their website's all nice and great.


00:22:10.400 --> 00:22:12.680
I'm like, "Oh, they must have been up for a while."


00:22:12.680 --> 00:22:16.120
As far as I can tell, it looks like at least their defect tracker,


00:22:16.120 --> 00:22:21.080
They've got a GitHub defect tracker that's only been alive since last September.


00:22:21.080 --> 00:22:24.420
So, and they already support a whole bunch of stuff.


00:22:24.420 --> 00:22:27.220
So hopefully, we'll get some new features here soon.


00:22:27.220 --> 00:22:30.220
Yeah, fantastic. And I just came up with a new idea for a GitHub bot.


00:22:30.220 --> 00:22:36.760
So you have a GitHub bot that if you put a pyproject.toml or a pip file,


00:22:36.760 --> 00:22:40.060
it'll automatically create the others and keep them in sync.


00:22:40.060 --> 00:22:42.860
So if you check in your pyproject.toml,


00:22:42.860 --> 00:22:45.920
it'll automatically generate a requirements.txt that's in sync.


00:22:45.920 --> 00:22:47.920
And if you make changes, it'll update it.


00:22:47.920 --> 00:22:50.480
So you can work with whatever tools you want.


00:22:50.480 --> 00:22:52.480
That's my new idea.


00:22:52.480 --> 00:22:54.480
[laughter]


00:22:54.480 --> 00:22:56.480
Isn't everything switching over to


00:22:56.480 --> 00:22:59.480
pyproject.toml now, then?


00:22:59.480 --> 00:23:01.920
Well, for packages,


00:23:01.920 --> 00:23:03.920
not everything is.


00:23:03.920 --> 00:23:05.920
Setup is going to be supported for a long time.


00:23:05.920 --> 00:23:07.920
But you can use setup tools with


00:23:07.920 --> 00:23:11.680
pyproject.toml, so there is a lot of people converting.


00:23:11.680 --> 00:23:15.040
But that's for packages and stuff and libraries.


00:23:15.040 --> 00:23:17.920
A lot of applications don't use anything like that.


00:23:17.920 --> 00:23:20.240
They just use a requirements file.


00:23:20.240 --> 00:23:21.240
So.


00:23:21.240 --> 00:23:24.640
Yeah, I used to use a requirements file and then I


00:23:24.640 --> 00:23:26.840
switched to using poetry like a year ago.


00:23:26.840 --> 00:23:29.120
I was like, what have I been doing all this time?


00:23:29.120 --> 00:23:30.120
So much nicer.


00:23:30.120 --> 00:23:31.320
Yeah, poetry is nice.


00:23:31.320 --> 00:23:32.320
Very cool.


00:23:32.320 --> 00:23:33.320
Yeah.


00:23:33.320 --> 00:23:36.320
Speaking of switching to new things,


00:23:36.320 --> 00:23:41.720
I wanted to talk about all the important changes and features in Python 3.10.


00:23:41.720 --> 00:23:43.520
So excited.


00:23:43.520 --> 00:23:44.240
So exciting.


00:23:44.240 --> 00:23:49.040
Yeah, so this is a blog post by Martin Hines,


00:23:49.040 --> 00:23:51.320
apparently blog post number 47,


00:23:51.320 --> 00:23:53.960
look at the URL here, which is interesting.


00:23:53.960 --> 00:23:56.240
And basically what it does, it just walks you through


00:23:56.240 --> 00:23:58.640
like all the stuff coming in Python 3.10.


00:23:58.640 --> 00:24:02.360
So Python 3.10 has been in alpha for a little while.


00:24:02.360 --> 00:24:04.800
That means features changing, but now it's about to go beta.


00:24:04.800 --> 00:24:07.420
So it's about to stabilize and it's time to start thinking


00:24:07.420 --> 00:24:09.160
about what features are coming,


00:24:09.160 --> 00:24:12.740
because they're most likely gonna be fixed as they are.


00:24:13.600 --> 00:24:15.960
First thing it talks about is how to go through


00:24:15.960 --> 00:24:18.280
installing the alpha or the beta,


00:24:18.280 --> 00:24:20.160
whatever the latest version is.


00:24:20.160 --> 00:24:21.280
It's pretty simple.


00:24:21.280 --> 00:24:23.240
So you just do the, you know,


00:24:23.240 --> 00:24:24.920
download and install from source,


00:24:24.920 --> 00:24:29.280
except for it has this comment to say, make install.


00:24:29.280 --> 00:24:30.480
You're welcome to run make install,


00:24:30.480 --> 00:24:32.440
but that will make your Python 3 on your system


00:24:32.440 --> 00:24:36.520
be the alpha Python 3.10, which you might not wanna do.


00:24:36.520 --> 00:24:38.120
I mean, you may, but you might not.


00:24:38.120 --> 00:24:40.640
If you say make alt, A-L-T, install,


00:24:40.640 --> 00:24:42.960
alt install is one word,


00:24:42.960 --> 00:24:44.880
then it'll just install it so you can refer to it


00:24:44.880 --> 00:24:48.440
as Python 3.10, but it won't replace your system Python,


00:24:48.440 --> 00:24:50.240
which I would recommend.


00:24:50.240 --> 00:24:54.520
So there's some interesting improvements for type checking.


00:24:54.520 --> 00:24:57.880
One of the things that's really nice about Python


00:24:57.880 --> 00:25:00.360
is you have this optional type hint, type checking,


00:25:00.360 --> 00:25:03.180
type hints, type annotation stuff,


00:25:03.180 --> 00:25:07.160
but it can get kind of crazy with the generics.


00:25:07.160 --> 00:25:11.440
Like if I have a generator that returns a list of integer,


00:25:11.440 --> 00:25:13.920
I mean, it's just like the way you express that


00:25:13.920 --> 00:25:16.260
and kind of almost like generic syntax,


00:25:16.260 --> 00:25:20.780
like generic from C++ style, it gets a little wild.


00:25:20.780 --> 00:25:23.440
So one of the improvements is around union,


00:25:23.440 --> 00:25:26.020
'cause you can say, well, this thing will either take an int


00:25:26.020 --> 00:25:28.060
or a float, and I can just deal with it


00:25:28.060 --> 00:25:29.480
as basically a number.


00:25:29.480 --> 00:25:35.140
So you used to have to say from typing import union,


00:25:35.140 --> 00:25:39.260
and then you would say union bracket int, float bracket,


00:25:39.260 --> 00:25:40.660
and that was the thing.


00:25:40.660 --> 00:25:43.440
So now you can just use the pipe or the or,


00:25:43.440 --> 00:25:44.860
the bitwise or operator.


00:25:44.860 --> 00:25:47.780
So int or, you know, vertical pipe float,


00:25:47.780 --> 00:25:49.980
and that tells you it's a int or a float.


00:25:49.980 --> 00:25:52.740
What do you think of this?


00:25:52.740 --> 00:25:53.840
Yeah, you all like it?


00:25:53.840 --> 00:25:56.940
- I think it's nice.


00:25:56.940 --> 00:25:58.580
- That seems cleaner to me.


00:25:58.580 --> 00:25:59.420
- Yeah, I didn't really like it.


00:25:59.420 --> 00:26:00.760
- The union stuff is wonky.


00:26:00.760 --> 00:26:02.180
- Yeah, I didn't like the union before.


00:26:02.180 --> 00:26:04.780
I mean, I was glad it was there 'cause we needed it,


00:26:04.780 --> 00:26:07.500
but the or makes it nice and clean.


00:26:07.500 --> 00:26:09.220
- Yeah, I almost never used the union


00:26:09.220 --> 00:26:11.500
'cause it was just messy.


00:26:11.500 --> 00:26:12.620
So anyway, this is pretty nice.


00:26:12.620 --> 00:26:17.620
There's also some stuff about is instance.


00:26:17.620 --> 00:26:22.860
That exists already, but you can pass this int or string,


00:26:22.860 --> 00:26:25.020
int pipe string in, and it'll tell you


00:26:25.020 --> 00:26:27.460
if it's either an int or a string as an instance,


00:26:27.460 --> 00:26:29.580
which is kind of a cool thing as well.


00:26:29.580 --> 00:26:30.420
- Oh, wow.


00:26:30.420 --> 00:26:33.340
- Yeah, you can also create type aliases,


00:26:33.340 --> 00:26:34.780
and you could do that previously.


00:26:34.780 --> 00:26:37.100
So if I have a thing I wanna call a file name,


00:26:37.100 --> 00:26:37.980
and right now it's a string,


00:26:37.980 --> 00:26:40.100
but maybe it becomes a class later


00:26:40.100 --> 00:26:41.380
'cause we're gonna upgrade it.


00:26:41.380 --> 00:26:43.780
And I just wanna refer to it as this,


00:26:43.780 --> 00:26:45.780
right now as a file name, right?


00:26:45.780 --> 00:26:49.340
So you used to say file name equals str, S-T-R,


00:26:49.340 --> 00:26:53.140
and there's no real way to understand that I'm just,


00:26:53.140 --> 00:26:54.860
I'm trying to create a type definition,


00:26:54.860 --> 00:26:57.140
but in fact, it just tells me,


00:26:57.140 --> 00:26:59.980
well, there's this other name for the string class, right?


00:26:59.980 --> 00:27:02.980
And that worked, but there was no way for the tools


00:27:02.980 --> 00:27:04.780
to know what your intention was.


00:27:04.780 --> 00:27:09.340
So now there's going to be a file name colon type alias equals string.


00:27:09.340 --> 00:27:14.260
And that will tell you file name is an actual alias for the class string, not just it happens


00:27:14.260 --> 00:27:16.020
to be a thing that looks a whole lot like it.


00:27:16.020 --> 00:27:18.660
So that's kind of cool.


00:27:18.660 --> 00:27:24.020
There's some stuff about knowing on integers to figure out how many bits are involved.


00:27:24.020 --> 00:27:26.780
That's not super applicable or useful.


00:27:26.780 --> 00:27:30.840
Disk details, speaking of, I mean, you may want to know, but it's like not, I doubt it's


00:27:30.840 --> 00:27:33.660
a big question people want to know often.


00:27:33.660 --> 00:27:36.900
details are being deprecated. They've pretty much been


00:27:36.900 --> 00:27:40.580
deprecated for a while. And you should be using setup tools and


00:27:40.580 --> 00:27:44.300
packaging. But you know, they were officially deprecated in


00:27:44.300 --> 00:27:48.500
310 and will be gone in 312. Just so you all know, this next


00:27:48.500 --> 00:27:52.580
one I'm excited about quite a bit. It's super common to want


00:27:52.580 --> 00:27:58.460
to have more than one thing that is tied to a context block like


00:27:58.460 --> 00:28:02.600
a with statement. So if I'm going to open two files, and I


00:28:02.600 --> 00:28:04.360
I want to make sure I close them both,


00:28:04.360 --> 00:28:05.520
even if there's an error,


00:28:05.520 --> 00:28:08.520
it would make a lot of sense to say with file one,


00:28:08.520 --> 00:28:10.360
with file two.


00:28:10.360 --> 00:28:11.760
And so what were your options?


00:28:11.760 --> 00:28:13.840
You could have one with block and then indent another one


00:28:13.840 --> 00:28:17.200
just to have the second file, which is weird.


00:28:17.200 --> 00:28:19.680
You could create the files separately,


00:28:19.680 --> 00:28:20.920
the file objects separately,


00:28:20.920 --> 00:28:23.440
and then say with file one, comma file two,


00:28:23.440 --> 00:28:25.320
and then use them, that actually worked.


00:28:25.320 --> 00:28:29.440
But what if file two crashed when you tried to create it,


00:28:29.440 --> 00:28:30.560
then file one would leak,


00:28:30.560 --> 00:28:32.440
and there's just like all these weird situations.


00:28:32.440 --> 00:28:37.440
So now, with blocks support multiple lines with parentheses.


00:28:37.440 --> 00:28:40.040
So I can say with parentheses,


00:28:40.040 --> 00:28:42.280
thing one that has to be managed in the context,


00:28:42.280 --> 00:28:45.000
thing two that has to be managed in the context and so on,


00:28:45.000 --> 00:28:47.240
and then work with them and they're treated as a block,


00:28:47.240 --> 00:28:48.400
which I think is sweet.


00:28:48.400 --> 00:28:52.240
- That's gonna be very useful 'cause I've had times


00:28:52.240 --> 00:28:55.680
where I've had two or three levels all the time, so.


00:28:55.680 --> 00:28:58.620
- Yeah, yeah, so you're usually juggling some edge case


00:28:58.620 --> 00:29:00.160
that might not quite work, but usually works.


00:29:00.160 --> 00:29:02.380
And this is just make it part of the language,


00:29:02.380 --> 00:29:04.460
Make sure it always works, I love it.


00:29:04.460 --> 00:29:06.260
Also, performance.


00:29:06.260 --> 00:29:09.980
So it brings some performance improvements


00:29:09.980 --> 00:29:15.420
for constructors like strings, bytes, byte arrays, and so on.


00:29:15.420 --> 00:29:19.300
And then also, working with functions


00:29:19.300 --> 00:29:21.220
that have type annotations, I think,


00:29:21.220 --> 00:29:22.820
are something like two times faster.


00:29:22.820 --> 00:29:25.140
'Cause they are now, the type annotations


00:29:25.140 --> 00:29:29.220
are evaluated at compilation time.


00:29:29.220 --> 00:29:30.820
They usually evaluate at runtime,


00:29:30.820 --> 00:29:32.160
which would slow them down.


00:29:32.160 --> 00:29:33.360
So that's nice.


00:29:33.360 --> 00:29:36.760
And then the big one is the switch statement,


00:29:36.760 --> 00:29:38.020
which we're not calling switch statement,


00:29:38.020 --> 00:29:39.120
it's pattern matching.


00:29:39.120 --> 00:29:42.960
And we actually talked a lot with Brett Cannon about that.


00:29:42.960 --> 00:29:44.680
And I think people appreciated that episode


00:29:44.680 --> 00:29:46.880
where we got to dig into that, right?


00:29:46.880 --> 00:29:47.720
- Yeah.


00:29:47.720 --> 00:29:48.560
- Yeah, that was fun.


00:29:48.560 --> 00:29:51.120
So there's some nice examples of what you can do,


00:29:51.120 --> 00:29:53.360
like basically how it works, you know,


00:29:53.360 --> 00:29:56.020
match on day, case Monday, case Friday,


00:29:56.020 --> 00:29:58.720
case Saturday or Sunday and so on.


00:29:58.720 --> 00:30:01.920
And then some more interesting ones about matching objects,


00:30:01.920 --> 00:30:05.800
like classes where you're looking at multiple fields.


00:30:05.800 --> 00:30:10.800
So you can match on age and you could match on gender.


00:30:10.800 --> 00:30:13.200
This is like a person example, name, age, gender,


00:30:13.200 --> 00:30:15.000
and you could match on different things.


00:30:15.000 --> 00:30:16.480
And depending on how it matches,


00:30:16.480 --> 00:30:18.200
you kind of fall into these case statements.


00:30:18.200 --> 00:30:20.040
So we've gone over that a lot.


00:30:20.040 --> 00:30:22.080
I don't wanna dive into it too much,


00:30:22.080 --> 00:30:25.400
but pretty neat to see these examples here.


00:30:25.400 --> 00:30:28.440
So that's, I would say that's the big change that's coming.


00:30:28.440 --> 00:30:29.540
Don't you think?


00:30:31.560 --> 00:30:34.360
- Do the case statements fall through like JavaScript?


00:30:34.360 --> 00:30:39.320
- There is a fall through, it's not in these examples,


00:30:39.320 --> 00:30:41.320
but there is a fall through mechanism.


00:30:41.320 --> 00:30:43.280
- Okay, but not by default.


00:30:43.280 --> 00:30:45.780
- Well, it's not called default,


00:30:45.780 --> 00:30:48.260
but I think there's, I can't remember the syntax.


00:30:48.260 --> 00:30:53.760
- I mean like, so from the first case.


00:30:53.760 --> 00:30:54.600
- Oh, right, yeah.


00:30:54.600 --> 00:30:55.960
- Yeah, you don't have to say break.


00:30:55.960 --> 00:30:57.300
I don't think it falls through.


00:30:57.300 --> 00:30:58.800
- Yeah, it doesn't fall through.


00:30:58.800 --> 00:31:00.920
- Yeah, yeah, 'cause in C++,


00:31:00.920 --> 00:31:03.480
if you don't say break, you're gonna print all,


00:31:03.480 --> 00:31:05.900
it's gonna run every case top to bottom, right?


00:31:05.900 --> 00:31:06.920
Well, depending where it matches,


00:31:06.920 --> 00:31:09.980
from where it matches onward, basically, yeah.


00:31:09.980 --> 00:31:12.600
Now, I don't think it falls through in that sense.


00:31:12.600 --> 00:31:15.320
But there's a default, yeah.


00:31:15.320 --> 00:31:19.280
- But the fall through mechanism in C++ and C and Java,


00:31:19.280 --> 00:31:22.600
other type language, C-like languages,


00:31:22.600 --> 00:31:26.240
it's caused me more problems than it ever solved.


00:31:26.240 --> 00:31:28.840
I mean, I've actually wanted to fall through.


00:31:28.840 --> 00:31:30.760
I'd rather have a fall through keyword


00:31:30.760 --> 00:31:34.240
then have it be, have to put a break everywhere.


00:31:34.240 --> 00:31:35.280
- Yeah, I agree.


00:31:35.280 --> 00:31:37.360
- Yeah, I just use my go-to statements and we're good.


00:31:37.360 --> 00:31:38.200
So, it's so fun.


00:31:38.200 --> 00:31:41.320
Dean out there in the live stream says,


00:31:41.320 --> 00:31:43.880
"Can't wait for 3.10 now with a double context


00:31:43.880 --> 00:31:45.300
or multi-line context."


00:31:45.300 --> 00:31:48.680
I agree, those are quite awesome.


00:31:48.680 --> 00:31:49.960
I think that's a really good feature


00:31:49.960 --> 00:31:53.160
and it's super simple, so I like that a lot.


00:31:53.160 --> 00:31:55.600
- I wanted to add a couple things.


00:31:55.600 --> 00:31:58.000
I just found out today that one of the things


00:31:58.000 --> 00:32:05.880
that's going in 3.10 is some better error messages


00:32:05.880 --> 00:32:07.940
if you use an attribute error,


00:32:07.940 --> 00:32:15.340
if you try to access from name tuple import something else,


00:32:15.340 --> 00:32:17.580
and you get something wrong,


00:32:17.580 --> 00:32:21.100
it tries to give you a suggestion for what the right thing is,


00:32:21.100 --> 00:32:23.340
and that'll be really cool,


00:32:23.340 --> 00:32:26.400
especially for working on the REPL and stuff.


00:32:26.480 --> 00:32:28.280
And I also wanted to point out that


00:32:28.280 --> 00:32:31.640
I don't think I would build Python.


00:32:31.640 --> 00:32:32.880
I would just download it.


00:32:32.880 --> 00:32:37.520
If you Google Python 3.10 download,


00:32:37.520 --> 00:32:40.200
you can get it just from python.org.


00:32:40.200 --> 00:32:41.280
You can download it there.


00:32:41.280 --> 00:32:42.920
- Without compiling it?


00:32:42.920 --> 00:32:44.400
- Yeah, it's just the installer.


00:32:44.400 --> 00:32:46.080
I'll put a link in the show notes.


00:32:46.080 --> 00:32:46.920
- Yeah.


00:32:46.920 --> 00:32:47.740
- Or use pyenv.


00:32:47.740 --> 00:32:52.440
- Right, yeah, you can use pyenv, yeah, sure.


00:32:52.440 --> 00:32:53.400
Cool.


00:32:53.400 --> 00:32:57.180
- All right, well, that brings us to the next item,


00:32:57.180 --> 00:32:58.680
but I don't have the link to it.


00:32:58.680 --> 00:32:59.520
That's yours, Gwen.


00:32:59.520 --> 00:33:01.060
So you wanna tell us about it?


00:33:01.060 --> 00:33:02.260
I think I can just Google it.


00:33:02.260 --> 00:33:04.980
I'm not gonna Google, I'm gonna DuckDuckGo, but carry on.


00:33:04.980 --> 00:33:07.380
- Good, I use DuckDuckGo too.


00:33:07.380 --> 00:33:08.220
- Nice.


00:33:08.220 --> 00:33:10.940
- So yeah, I wanted to give a shout out


00:33:10.940 --> 00:33:13.900
to Free Code Camp's Python curriculum.


00:33:13.900 --> 00:33:18.620
So last year, they launched a Python curriculum


00:33:18.620 --> 00:33:21.400
with, I think it's almost a thousand hours


00:33:21.400 --> 00:33:26.400
of curriculum material between challenges, lessons,


00:33:26.400 --> 00:33:34.500
and of course, projects and certifications as well


00:33:34.500 --> 00:33:37.900
on topics from Python basics to data science,


00:33:37.900 --> 00:33:40.740
machine learning, algorithms, all sorts of things.


00:33:40.740 --> 00:33:43.460
And that's in addition to the thousands of hours


00:33:43.460 --> 00:33:46.180
they already had learning JavaScript


00:33:46.180 --> 00:33:49.340
and basic programming skills and algorithms


00:33:49.340 --> 00:33:50.460
and other types of things.


00:33:50.460 --> 00:33:55.220
So that Python curriculum was in the works for a few years.


00:33:55.220 --> 00:33:58.140
I've been a top contributor with Free Code Camp


00:33:58.140 --> 00:33:59.060
for a couple of years.


00:33:59.060 --> 00:34:00.700
So I got to go to their summit


00:34:00.700 --> 00:34:02.940
before the whole COVID thing hit.


00:34:02.940 --> 00:34:06.000
And I remember everyone getting together,


00:34:06.000 --> 00:34:08.540
kind of talking excitedly several years ago


00:34:08.540 --> 00:34:09.760
about Python coming out.


00:34:09.760 --> 00:34:12.740
So it was definitely in the works for a long time


00:34:12.740 --> 00:34:15.060
and a lot of people put a lot of effort into it.


00:34:15.060 --> 00:34:18.340
So I think it's a really good curriculum.


00:34:18.340 --> 00:34:21.720
And Free Code Camp has also done a really good job


00:34:21.720 --> 00:34:25.500
of putting out a lot of supplementary material


00:34:25.500 --> 00:34:26.820
in Python and data science.


00:34:26.820 --> 00:34:29.100
So you can see on their YouTube channel,


00:34:29.100 --> 00:34:34.100
I believe they have over a hundred hours of Python content,


00:34:34.100 --> 00:34:38.900
including this one 12 hour Python data science crash course


00:34:38.900 --> 00:34:40.500
on their YouTube channel.


00:34:40.500 --> 00:34:42.940
And they also have one of the most popular


00:34:42.940 --> 00:34:45.340
developer blogs on the internet.


00:34:45.340 --> 00:34:46.900
I'm also a writer for them.


00:34:46.900 --> 00:34:53.060
So recently I wrote one Django article and I have a whole bunch more Django articles


00:34:53.060 --> 00:34:56.340
that I'm planning to write when I get around to it.


00:34:56.340 --> 00:35:06.820
So as far as Python education, I think this is a really good option that's free, accessible


00:35:06.820 --> 00:35:10.040
to anybody, even on mobile devices.


00:35:10.040 --> 00:35:11.900
And one that stayed true to its mission.


00:35:11.900 --> 00:35:14.780
It didn't just build to kind of sell out to another company.


00:35:14.780 --> 00:35:22.700
But since I believe the end of 2014, when it's launched, it's kept this mission of making


00:35:22.700 --> 00:35:24.740
coding education accessible to everyone.


00:35:24.740 --> 00:35:30.180
So I think they've done a really good comprehensive job of now adding Python onto that.


00:35:30.180 --> 00:35:37.140
Oh, and they're also adding on, right now they're working on an even bigger expanded


00:35:37.140 --> 00:35:43.020
curriculum for that data science and machine learning that they have right now in Python.


00:35:43.020 --> 00:35:49.020
It's going to include all the different math and a lot more elements of machine learning


00:35:49.020 --> 00:35:50.460
than it currently covers.


00:35:50.460 --> 00:35:53.340
So yeah, I'm excited for that.


00:35:53.340 --> 00:35:56.500
They were raising money for it this year, and they've been working on it since last


00:35:56.500 --> 00:35:57.500
year.


00:35:57.500 --> 00:36:02.620
So I'm hoping we'll see at least the initial stages of that soon.


00:36:02.620 --> 00:36:04.300
Yeah, very cool.


00:36:04.300 --> 00:36:09.460
I put my, I worked with them to put my free MongoDB course up there, which is a Python


00:36:09.460 --> 00:36:10.460
course.


00:36:10.460 --> 00:36:11.460
Oh, awesome.


00:36:11.460 --> 00:36:12.660
A little bit up there.


00:36:12.660 --> 00:36:15.660
What were you using with MongoDB?


00:36:15.660 --> 00:36:18.000
It was just some...


00:36:18.000 --> 00:36:19.500
It wasn't even a real web framework.


00:36:19.500 --> 00:36:22.260
It was something that kind of was just a simple CLI app


00:36:22.260 --> 00:36:25.260
that talked to it to keep it not complex.


00:36:25.260 --> 00:36:26.400
Oh, okay.


00:36:26.400 --> 00:36:27.400
Yeah.


00:36:27.400 --> 00:36:29.660
Very cool.


00:36:29.660 --> 00:36:31.500
I've been using Django


00:36:31.500 --> 00:36:33.860
for Django and MongoDB.


00:36:33.860 --> 00:36:35.600
Okay, that's cool.


00:36:35.600 --> 00:36:38.260
It actually works pretty well,


00:36:38.260 --> 00:36:40.860
except the migrations are a little bit funky.


00:36:40.860 --> 00:36:45.080
- Okay. - So it's not easy


00:36:45.080 --> 00:36:49.320
to roll back the migrations like it is if you use Postgres.


00:36:49.320 --> 00:36:50.920
But overall it works really well


00:36:50.920 --> 00:36:54.240
and you can use the same ORM you use in Django.


00:36:54.240 --> 00:36:55.060
- Oh, that's fantastic.


00:36:55.060 --> 00:36:57.240
I use Mongo engine for my main stuff,


00:36:57.240 --> 00:36:59.880
which is very much modeled on Django,


00:36:59.880 --> 00:37:02.180
but it's not, you know, not Django itself.


00:37:02.180 --> 00:37:04.560
Nice.


00:37:04.560 --> 00:37:08.440
Let's see, really quick, a couple of fallbacks.


00:37:08.440 --> 00:37:09.520
Robert Robertson says,


00:37:09.520 --> 00:37:13.680
they should create an error message package that breaks down your error into plain English.


00:37:13.680 --> 00:37:15.360
- That's a good idea. - Cool.


00:37:15.360 --> 00:37:16.320
Yeah, that's a great idea.


00:37:16.320 --> 00:37:19.200
And then Dean says there are third-party packages that do it nicely.


00:37:19.200 --> 00:37:20.560
Brian, do you remember if we've covered any?


00:37:20.560 --> 00:37:22.720
I don't. I mean, Dean, if you got some ideas, throw them out there.


00:37:22.720 --> 00:37:25.680
I think we do, but I think we did cover them, but I don't remember them.


00:37:25.680 --> 00:37:30.400
I know we've covered stuff that do things like pretty print the message


00:37:30.400 --> 00:37:32.560
or highlight certain parts so it's clear.


00:37:32.560 --> 00:37:38.080
But I feel like it would be cool if it would just print the first stack overflow response


00:37:38.080 --> 00:37:42.640
accepted response, like underneath the crash.


00:37:42.640 --> 00:37:44.160
That would be fantastic.


00:37:44.160 --> 00:37:48.560
- Oh, and we talked about possibly just formatting


00:37:48.560 --> 00:37:51.520
your error message nicely so that you could Google it


00:37:51.520 --> 00:37:55.160
or duck, duck, go it of like how to search for this


00:37:55.160 --> 00:37:56.400
on the internet.


00:37:56.400 --> 00:37:59.240
So like escaping quotes and things like that.


00:37:59.240 --> 00:38:01.240
- Exactly.


00:38:01.240 --> 00:38:02.640
- That'd be cool.


00:38:02.640 --> 00:38:04.720
Somebody else, let's see, PyLang mentioned,


00:38:04.720 --> 00:38:06.200
and I think this is right,


00:38:06.200 --> 00:38:11.120
that the fall through on the pattern matching


00:38:11.120 --> 00:38:12.600
is the underscore, I think that's correct.


00:38:12.600 --> 00:38:13.440
- Is that the default?


00:38:13.440 --> 00:38:15.920
I think that's the default case, not the fall through.


00:38:15.920 --> 00:38:16.760
Is that right?


00:38:16.760 --> 00:38:18.520
- Right, right, not the fall through, the default case.


00:38:18.520 --> 00:38:19.360
Yeah. - Okay.


00:38:19.360 --> 00:38:20.920
- Thanks.


00:38:20.920 --> 00:38:23.920
So I don't think there is a way to, I don't know.


00:38:23.920 --> 00:38:25.480
There might be a way to fall through.


00:38:25.480 --> 00:38:28.520
There's like always, yeah, I don't know.


00:38:28.520 --> 00:38:30.260
I haven't played with it yet.


00:38:30.260 --> 00:38:32.120
- Yeah, Dean points out that we covered the one


00:38:32.120 --> 00:38:34.480
that has, you can ask why.


00:38:34.480 --> 00:38:36.360
Remember you'd ask like, why, what?


00:38:36.360 --> 00:38:37.720
There's a bunch of Ws


00:38:37.720 --> 00:38:40.220
and we were kind of coming up with the name of,


00:38:40.220 --> 00:38:42.760
like a name for the, a better name


00:38:42.760 --> 00:38:44.840
or for another what we could ask,


00:38:44.840 --> 00:38:46.680
like a WTF or something like that.


00:38:46.680 --> 00:38:49.120
I don't remember what that's called though, sadly.


00:38:49.120 --> 00:38:50.120
That was a fun one.


00:38:50.120 --> 00:38:53.760
- Oh, that'd be a great package name, Python WTF.


00:38:53.760 --> 00:38:58.920
- All right, Brian, is that it for our main topics?


00:38:58.920 --> 00:39:00.240
- Yeah.


00:39:00.240 --> 00:39:01.600
- Yeah, all right.


00:39:01.600 --> 00:39:03.240
You got any extras you want to cover?


00:39:03.240 --> 00:39:06.360
Yeah, I do as always, but yeah, how about you?


00:39:06.360 --> 00:39:08.920
- Well, I don't know when it'll get released,


00:39:08.920 --> 00:39:09.800
but I just recorded it.


00:39:09.800 --> 00:39:14.000
But a few episodes ago, we talked about Python Adventure.


00:39:14.000 --> 00:39:17.720
So an adventure game, a text-based adventure in Python.


00:39:17.720 --> 00:39:19.160
- Yeah, that's right.


00:39:19.160 --> 00:39:23.880
- Yeah, I got to talk to the creator on the testing code.


00:39:23.880 --> 00:39:26.240
So there'll be a upcoming testing code.


00:39:26.240 --> 00:39:27.920
I'll go in depth into that.


00:39:27.920 --> 00:39:28.960
So that'll be good.


00:39:28.960 --> 00:39:31.680
- Yeah, yeah, very fun.


00:39:31.680 --> 00:39:33.080
- How about you?


00:39:33.080 --> 00:39:35.120
Let's see, I got a couple of things.


00:39:35.120 --> 00:39:37.620
Let's see this one.


00:39:37.620 --> 00:39:42.340
We talked about the Supreme Court ruling on Java,


00:39:42.340 --> 00:39:43.760
the Google versus Oracle,


00:39:43.760 --> 00:39:45.480
or maybe for the Oracle versus Google


00:39:45.480 --> 00:39:47.560
is maybe how it should be said.


00:39:47.560 --> 00:39:49.880
But I think it's just in passing interesting


00:39:49.880 --> 00:39:53.440
that Microsoft has now unveiled its own Java distribution,


00:39:53.440 --> 00:39:56.000
the Microsoft version of OpenJDK


00:39:56.000 --> 00:39:58.800
to compete with Oracle in the Java distribution space.


00:39:59.800 --> 00:40:03.160
- Yeah, I know that we're not really a Java podcast


00:40:03.160 --> 00:40:04.280
for sure, and I don't do any Java,


00:40:04.280 --> 00:40:06.600
but I think it's an interesting open source follow on


00:40:06.600 --> 00:40:08.820
to covering that last time.


00:40:08.820 --> 00:40:10.600
What do you think?


00:40:10.600 --> 00:40:15.040
- I think this is gonna be big.


00:40:15.040 --> 00:40:17.400
A lot of people already have Microsoft distributions


00:40:17.400 --> 00:40:19.440
all over their workplace, so.


00:40:19.440 --> 00:40:20.520
- Yeah, Gwen?


00:40:20.520 --> 00:40:24.120
- Yes.


00:40:24.120 --> 00:40:25.520
- Any comments, any thoughts?


00:40:25.520 --> 00:40:27.680
- Oh, comments on Java?


00:40:27.680 --> 00:40:29.880
- Yeah, yeah, yeah, I was just saying, no, okay.


00:40:29.880 --> 00:40:31.720
I got a couple more and then I know you have some things


00:40:31.720 --> 00:40:32.560
to throw out there as well.


00:40:32.560 --> 00:40:35.980
PyCharm 2021.1 is out.


00:40:35.980 --> 00:40:39.180
It has a very colorful splash screen, which is always fun.


00:40:39.180 --> 00:40:42.460
But its main thing is it has much better support


00:40:42.460 --> 00:40:44.800
for a Windows subsystem for Linux.


00:40:44.800 --> 00:40:48.960
It has better indexing, so much faster indexing.


00:40:48.960 --> 00:40:52.520
It does cool things like if you need to type,


00:40:52.520 --> 00:40:55.320
let's say you have requests installed,


00:40:55.320 --> 00:40:58.000
but you haven't imported it into the file.


00:40:58.000 --> 00:41:01.600
If you type RG,


00:41:01.600 --> 00:41:04.120
it very likely may propose to you


00:41:04.120 --> 00:41:07.880
request.get as an auto-complete option.


00:41:07.880 --> 00:41:10.440
If you choose it, it'll write import request


00:41:10.440 --> 00:41:12.320
and then auto-complete request.get


00:41:12.320 --> 00:41:15.260
all like in one tab completion.


00:41:15.260 --> 00:41:16.840
So they've like done some really cool stuff


00:41:16.840 --> 00:41:18.880
with the auto-complete to like kind of ramp that up.


00:41:18.880 --> 00:41:21.560
And there's a few other things as well, but yeah.


00:41:21.560 --> 00:41:23.960
Anyway, if people are into that, check that out.


00:41:24.980 --> 00:41:27.560
We covered Beanie a couple times.


00:41:27.560 --> 00:41:29.320
We covered Beanie the first time introducing it,


00:41:29.320 --> 00:41:33.080
which is an ODM for MongoDB based on Pydantic,


00:41:33.080 --> 00:41:36.320
which is super cool, by Roman Wright.


00:41:36.320 --> 00:41:40.680
And then I said, I reached out to him and said,


00:41:40.680 --> 00:41:43.060
oh, that's great, but you should have a way to add indexes.


00:41:43.060 --> 00:41:45.240
So he did, which was really cool.


00:41:45.240 --> 00:41:47.000
And Gwyn just mentioned migration.


00:41:47.000 --> 00:41:51.280
So he just added migrations for Beanie as well.


00:41:51.280 --> 00:41:52.600
And there's some really interesting ways


00:41:52.600 --> 00:41:54.820
to like write your migrations


00:41:54.820 --> 00:41:58.020
and convert from one schema to another.


00:41:58.020 --> 00:42:00.080
So basically you say, here's the old model,


00:42:00.080 --> 00:42:02.060
here's the new model, fix it.


00:42:02.060 --> 00:42:04.860
Is more or less the way that you say that.


00:42:04.860 --> 00:42:07.080
So yeah, that's pretty cool.


00:42:07.080 --> 00:42:11.620
We already covered it, but definitely just anything


00:42:11.620 --> 00:42:13.180
to see that he's adding it.


00:42:13.180 --> 00:42:15.500
So congrats on that, seeing that thing grow.


00:42:15.500 --> 00:42:17.900
Gwyn, I know you got a couple of things


00:42:17.900 --> 00:42:19.660
you wanna talk about mem.dev.


00:42:19.660 --> 00:42:21.100
That's a really cool thing.


00:42:21.100 --> 00:42:24.300
I didn't know about this before, but I checked it out when you put it in the show notes.


00:42:24.300 --> 00:42:29.420
Yeah, it's basically a space repetition learning system,


00:42:29.420 --> 00:42:31.980
but built specifically for developers.


00:42:31.980 --> 00:42:35.420
So a lot of people use Anki, which is its own algorithm.


00:42:35.420 --> 00:42:40.300
I also use Anki synced across my desktop and mobile phone and everything


00:42:40.300 --> 00:42:45.980
to learn different concepts, mostly programming, computer science, all of that stuff.


00:42:45.980 --> 00:42:49.140
But one thing I like about also using mem.dev


00:42:49.740 --> 00:42:53.260
is that there's a browser plugin,


00:42:53.260 --> 00:42:58.300
and I can directly copy snippets from places like Stack Overflow.


00:42:58.300 --> 00:43:02.500
In all those coding boxes, it will have a mem.dev icon


00:43:02.500 --> 00:43:04.660
in the corner of any coding box,


00:43:04.660 --> 00:43:11.020
and I can just copy the snippet to make into a card later on mem.dev.


00:43:11.020 --> 00:43:13.060
Another really cool feature


00:43:13.060 --> 00:43:16.180
is it lets you practice keyboard shortcuts now.


00:43:16.180 --> 00:43:17.900
- So... - Okay.


00:43:17.900 --> 00:43:20.400
to get faster and better as a developer,


00:43:20.400 --> 00:43:24.520
it's really good to practice different kinds of keyboard shortcuts.


00:43:24.520 --> 00:43:30.000
Also, I find it helpful because things like Django have a massive API.


00:43:30.000 --> 00:43:34.960
And as a consultant, I feel like I'm being pulled in so many directions,


00:43:34.960 --> 00:43:39.360
it's really hard for me to keep up with everything I'm doing


00:43:39.360 --> 00:43:43.640
and still feel like I'm really good at the technologies I'm using.


00:43:43.640 --> 00:43:47.000
So that's why I'm using supplementary resources.


00:43:47.840 --> 00:43:50.020
like these spaced repetition learning systems.


00:43:50.020 --> 00:43:53.820
So I don't forget different parts of the API,


00:43:53.820 --> 00:43:55.460
even if I haven't used it in a couple months,


00:43:55.460 --> 00:43:58.520
'cause I'll have to recall that for a future project


00:43:58.520 --> 00:43:59.680
or something like that.


00:43:59.680 --> 00:44:04.580
- Yeah, so I looked at this and you can go to places


00:44:04.580 --> 00:44:07.680
and sort of save these web snippets


00:44:07.680 --> 00:44:09.540
and then turn them into stuff you want to remember


00:44:09.540 --> 00:44:11.100
and practice almost like flashcards.


00:44:11.100 --> 00:44:13.420
So one example is if I'm on Stack Overflow


00:44:13.420 --> 00:44:15.740
and I see some code, I can go to that code thing


00:44:15.740 --> 00:44:17.380
and say, make this a snippet.


00:44:17.380 --> 00:44:18.780
And then I could even upgrade that


00:44:18.780 --> 00:44:21.300
to this like repetition practice.


00:44:21.300 --> 00:44:22.400
Yeah, that's pretty neat.


00:44:22.400 --> 00:44:23.240
- Yeah.


00:44:23.240 --> 00:44:26.180
- Cool.


00:44:26.180 --> 00:44:30.340
- And then what about graphing Django?


00:44:30.340 --> 00:44:35.340
- Yeah, so this probably isn't a secret to anybody.


00:44:35.340 --> 00:44:40.020
So it's basically the kind of the standard package


00:44:40.020 --> 00:44:43.320
to be able to use GraphQL with Django.


00:44:43.320 --> 00:44:45.180
But as I've been using it more and more,


00:44:45.180 --> 00:44:48.260
because I use mostly Django REST framework.


00:44:48.260 --> 00:44:51.680
But now that I'm using Graphene Django,


00:44:51.680 --> 00:44:53.680
it's like, "Oh, this is so nice."


00:44:53.680 --> 00:44:58.400
I don't have to update and manage all of these different endpoints.


00:44:58.400 --> 00:45:00.400
I just have one endpoint,


00:45:00.400 --> 00:45:07.300
and then I'm managing how my data gets sent back


00:45:07.300 --> 00:45:10.640
from my different schemas and stuff.


00:45:10.640 --> 00:45:13.240
I feel like as your application grows,


00:45:13.240 --> 00:45:18.980
it's much more easy to manage and maintain with GraphQL


00:45:18.980 --> 00:45:21.280
than with the standard REST interface.


00:45:21.280 --> 00:45:24.240
So that's something that I've been playing around with a lot.


00:45:24.240 --> 00:45:26.820
I want to, before I use it in a professional project,


00:45:26.820 --> 00:45:31.660
I want to kind of get better with using authentication with it.


00:45:31.660 --> 00:45:36.420
So there is kind of a standard library for Graphene Django.


00:45:36.420 --> 00:45:38.420
I think it's called Graphene Django Auth.


00:45:38.420 --> 00:45:41.400
And it uses JWT tokens.


00:45:41.400 --> 00:45:45.500
So I'm gonna play around with that a little bit soon.


00:45:45.500 --> 00:45:46.580
- Yeah, very cool.


00:45:46.580 --> 00:45:51.460
Yeah, so it's Django enhancement built upon Graphene itself.


00:45:51.460 --> 00:45:52.300
- Yes.


00:45:52.300 --> 00:45:54.860
- Very cool.


00:45:54.860 --> 00:45:58.620
And Brian out in the live stream,


00:45:58.620 --> 00:46:00.180
who was it that told us?


00:46:00.180 --> 00:46:01.340
It was Dean.


00:46:01.340 --> 00:46:04.740
Dean told us that we did in fact cover Friendly,


00:46:04.740 --> 00:46:08.280
the Friendly library, which allows you to ask,


00:46:09.900 --> 00:46:13.380
It gives you, when it crashes, you get like,


00:46:13.380 --> 00:46:15.820
what is it?


00:46:15.820 --> 00:46:16.640
Like a little rebel type thing


00:46:16.640 --> 00:46:18.380
that you can go ask questions about.


00:46:18.380 --> 00:46:20.340
- Yeah, that's the one where you're gonna ask


00:46:20.340 --> 00:46:21.860
who, what, why, where.


00:46:21.860 --> 00:46:23.500
- Yeah, exactly, yeah.


00:46:23.500 --> 00:46:25.420
- I guess maybe not who, but.


00:46:25.420 --> 00:46:26.880
- Yeah, perfect.


00:46:26.880 --> 00:46:33.100
And then Dichron definitely thinks space repetition


00:46:33.100 --> 00:46:35.620
is a powerful technique for learning.


00:46:35.620 --> 00:46:36.540
Yeah, very cool.


00:46:36.540 --> 00:46:39.600
All right.


00:46:39.600 --> 00:46:40.800
I think we need a joke.


00:46:40.800 --> 00:46:43.480
- We do need a joke.


00:46:43.480 --> 00:46:45.520
Oh, I put a joke up here.


00:46:45.520 --> 00:46:46.420
It's kind of a long one.


00:46:46.420 --> 00:46:48.080
And now I feel like it's a little longer


00:46:48.080 --> 00:46:50.400
than I had necessarily wanted to commit to.


00:46:50.400 --> 00:46:53.780
But it's a silly joke and I don't know why I chose it,


00:46:53.780 --> 00:46:56.660
but 'cause we have a lot of jokes we've already been through.


00:46:56.660 --> 00:46:58.360
So maybe my supply is getting short,


00:46:58.360 --> 00:47:01.440
but this is one of these things where, you know,


00:47:01.440 --> 00:47:04.320
maybe as a developer,


00:47:04.320 --> 00:47:08.480
you're kind of frustrated with your manager


00:47:08.480 --> 00:47:10.620
and you find yourself in funky situations,


00:47:10.620 --> 00:47:12.240
maybe 'cause all this work from home stuff.


00:47:12.240 --> 00:47:14.080
Well, anyway, it's a funny little story.


00:47:14.080 --> 00:47:15.000
I'll tell it to you.


00:47:15.000 --> 00:47:18.600
And it has a part where a guy kisses a girl,


00:47:18.600 --> 00:47:21.040
but I think it could go either way and it'll work.


00:47:21.040 --> 00:47:21.880
So here we go.


00:47:21.880 --> 00:47:22.700
I'll read it.


00:47:22.700 --> 00:47:24.880
You guys can tell me what you think.


00:47:24.880 --> 00:47:27.320
So it's called "The Kiss."


00:47:27.320 --> 00:47:30.480
A young programmer and his project manager board a train,


00:47:30.480 --> 00:47:33.000
headed through the mountains on the way to Wichita.


00:47:33.000 --> 00:47:35.520
They can find no place to sit except two seats


00:47:35.520 --> 00:47:36.520
right across the aisle


00:47:36.520 --> 00:47:39.040
from a young woman and her grandmother.


00:47:39.040 --> 00:47:40.840
After a while, it's obvious the young woman


00:47:40.840 --> 00:47:43.120
and the young programmer are interested in each other


00:47:43.120 --> 00:47:46.200
because they've given, they're giving each other looks.


00:47:46.200 --> 00:47:50.160
Soon the train passes into a tunnel and it's pitch black.


00:47:50.160 --> 00:47:53.080
There's a sound of a kiss followed by a slap.


00:47:53.080 --> 00:47:54.980
When the train emerges from the tunnel,


00:47:54.980 --> 00:47:57.440
the four sit there without saying a word.


00:47:57.440 --> 00:47:59.280
The grandmother is thinking to herself,


00:47:59.280 --> 00:48:02.240
I was very brash of that young man to kiss my granddaughter,


00:48:02.240 --> 00:48:04.560
but I'm glad she slapped him.


00:48:04.560 --> 00:48:06.960
the project manager's sitting there thinking,


00:48:06.960 --> 00:48:08.820
I didn't know that young tech was brave enough


00:48:08.820 --> 00:48:11.400
to kiss the girl, but I'm sure,


00:48:11.400 --> 00:48:14.120
I sure wish she hadn't missed and slapped me


00:48:14.120 --> 00:48:16.280
when she tried to slap him.


00:48:16.280 --> 00:48:18.080
The young woman was sitting and thinking,


00:48:18.080 --> 00:48:19.240
I'm glad that guy kissed me,


00:48:19.240 --> 00:48:21.260
but I wish my grandmother hadn't slapped him.


00:48:21.260 --> 00:48:23.240
While the young programmer sat there


00:48:23.240 --> 00:48:26.000
with a satisfied smile thinking, life is good.


00:48:26.000 --> 00:48:28.400
How often does a guy get a chance to kiss a beautiful girl


00:48:28.400 --> 00:48:30.600
and slap his project manager at the same time?


00:48:30.600 --> 00:48:32.840
(laughing)


00:48:32.840 --> 00:48:35.100
(laughing)


00:48:35.100 --> 00:48:37.580
- Oh man. - That's fun.


00:48:37.580 --> 00:48:38.980
- Yep, yep.


00:48:38.980 --> 00:48:41.620
Anyway, silly, silly jokes.


00:48:41.620 --> 00:48:43.820
So that's it for this one.


00:48:43.820 --> 00:48:45.540
Yeah.


00:48:45.540 --> 00:48:48.860
- Okay.


00:48:48.860 --> 00:48:52.100
Well, thanks a lot for joining us, Gwen.


00:48:52.100 --> 00:48:53.480
- Yeah, thank you. - It was a lot of fun.


00:48:53.480 --> 00:48:54.740
- Yeah, Gwen, it was great to have you here.


00:48:54.740 --> 00:48:55.740
Thanks so much for being here


00:48:55.740 --> 00:48:59.660
and keep up the good work on YouTube and everywhere else.


00:48:59.660 --> 00:49:00.860
- Yeah, thanks, Michael.


00:49:00.860 --> 00:49:02.260
Thanks, Brian.


00:49:02.260 --> 00:49:04.460
But alright everyone


00:49:04.460 --> 00:49:05.300
Bye.


00:49:05.300 --> 00:49:15.300
[BLANK_AUDIO]

