WEBVTT

00:00:00.000 --> 00:00:07.360
Hey, everyone out there on the live stream. Thanks for watching. Thank you for being here.


00:00:07.360 --> 00:00:11.520
Great to have you. Chris, Brian, good to see you too. You all about ready to kick this


00:00:11.520 --> 00:00:12.520
off?


00:00:12.520 --> 00:00:13.520
I'm ready.


00:00:13.520 --> 00:00:21.400
All right. So let's go ahead and get started. Hello, and welcome to Python Bytes, where


00:00:21.400 --> 00:00:26.920
we deliver Python news and headlines directly to your earbuds. This is episode 240, recorded


00:00:26.920 --> 00:00:30.640
July 1st, 2021, how time does fly.


00:00:30.640 --> 00:00:32.160
I'm Michael Kennedy.


00:00:32.160 --> 00:00:34.080
- And I'm Brian Okken.


00:00:34.080 --> 00:00:35.680
- And I'm Chris Moffett.


00:00:35.680 --> 00:00:38.040
- Hey, Chris, welcome to the show.


00:00:38.040 --> 00:00:39.880
- Thank you, great to be here.


00:00:39.880 --> 00:00:40.860
- Yeah, it's great to have you here.


00:00:40.860 --> 00:00:45.860
We've had you talking about the missteps of Excel


00:00:45.860 --> 00:00:49.060
and how the Python data tools chain can make that better


00:00:49.060 --> 00:00:50.360
over on Talk Python a few times.


00:00:50.360 --> 00:00:52.600
This is your first time on Python Bytes, right?


00:00:52.600 --> 00:00:54.240
- It is, yes.


00:00:54.240 --> 00:00:56.680
- Yeah, exciting to have you here.


00:00:56.680 --> 00:00:57.760
- Definitely, definitely.


00:00:57.760 --> 00:01:02.760
I already see some local messages in the live chat


00:01:02.760 --> 00:01:05.480
that we'll come to near the end, I think.


00:01:05.480 --> 00:01:07.760
We'll make that an extra one, Brian.


00:01:07.760 --> 00:01:10.000
But maybe you wanna go ahead and kick us off?


00:01:10.000 --> 00:01:12.200
- Yeah, sure.


00:01:12.200 --> 00:01:15.760
So we, let's see.


00:01:15.760 --> 00:01:16.800
Yeah, there we go.


00:01:16.800 --> 00:01:22.720
We're talking about, actually, subclassing and,


00:01:22.720 --> 00:01:25.040
we wanna talk about subclassing today,


00:01:25.040 --> 00:01:29.340
but Hinnick wrote an article called Subclassing in Python.


00:01:29.340 --> 00:01:34.600
And dealing with classes is just everywhere in Python.


00:01:34.600 --> 00:01:37.600
Even if you're not using classes,


00:01:37.600 --> 00:01:41.180
Python itself has all sorts of classes and objects


00:01:41.180 --> 00:01:44.100
that you're using all the time, whether you know it or not.


00:01:44.100 --> 00:01:47.780
But when you start getting into larger design,


00:01:47.780 --> 00:01:54.480
there is a question around composition versus inheritance and stuff.


00:01:54.540 --> 00:01:58.780
So I really like this article that Hinnick put together


00:01:58.780 --> 00:02:03.680
because I think people should think about the ramifications more.


00:02:03.680 --> 00:02:08.840
So the general gist is he prefers composition over inheritance,


00:02:08.840 --> 00:02:10.780
and I do too.


00:02:10.780 --> 00:02:15.440
And but then goes through, if you have to do inheritance,


00:02:15.440 --> 00:02:18.720
and sometimes you do in Python, for instance,


00:02:18.720 --> 00:02:23.980
the greatest example I know of is when you're having


00:02:24.040 --> 00:02:30.040
exception hierarchies. And it's really easy to build up exception hierarchies


00:02:30.040 --> 00:02:36.440
in Python. And there's like nothing there except for like the class definitions and their inheritance.


00:02:36.440 --> 00:02:36.940
And that's it.


00:02:36.940 --> 00:02:40.640
Easiest class you've ever created. Class, exception name, pass.


00:02:40.640 --> 00:02:45.840
Yeah. But it's useful to do that. But then if you want to go further,


00:02:45.840 --> 00:02:52.300
there's other design patterns and stuff, especially from the C++ world,


00:02:52.380 --> 00:02:56.980
where people might be thinking, well, I want to do something similar in Python and stuff.


00:02:56.980 --> 00:03:00.140
And so this is actually kind of a really great


00:03:00.140 --> 00:03:02.780
article, the discussion about it. It's pretty long.


00:03:02.780 --> 00:03:05.860
I don't want to summarize it too much, but I'll jump into the three types.


00:03:05.860 --> 00:03:10.060
So he talks about three types of subclassing that often happens.


00:03:10.060 --> 00:03:12.660
Subclassing for code sharing.


00:03:12.660 --> 00:03:15.780
And the short answer is, it's just,


00:03:15.780 --> 00:03:19.660
people are trying to do the dry principle and try to share code.


00:03:19.660 --> 00:03:23.180
And it's just it ends up being a bad idea, essentially.


00:03:23.180 --> 00:03:25.300
And there's a bunch of references for it.


00:03:25.300 --> 00:03:27.580
And if you don't, I think if you don't believe me,


00:03:27.580 --> 00:03:31.620
or him, read this article and read a bunch,


00:03:31.620 --> 00:03:34.780
he's got a whole bunch of linked articles too that discuss it.


00:03:34.780 --> 00:03:37.740
But I kind of agree.


00:03:37.740 --> 00:03:40.260
The second type is inherited,


00:03:40.260 --> 00:03:43.260
is abstract data types or interfaces


00:03:43.260 --> 00:03:45.740
in a lot of languages are called interfaces.


00:03:45.740 --> 00:03:49.220
And this is kind of a neat use of it.


00:03:49.220 --> 00:03:50.820
And there's a bunch of things.


00:03:50.820 --> 00:03:55.220
But it's, it's a, and I thought, okay, yeah, you definitely will use


00:03:55.220 --> 00:04:00.620
inheritance and composition for, for data type stuff.


00:04:00.620 --> 00:04:04.160
But there's, in his discussion,


00:04:04.160 --> 00:04:07.320
he talks about some of the cool things that Python has


00:04:07.320 --> 00:04:13.180
that allow you to have these sort of hierarchies


00:04:13.180 --> 00:04:15.380
without actually doing subclassing.


00:04:15.380 --> 00:04:17.380
So there's some cool features of Python,


00:04:17.460 --> 00:04:22.200
like the protocol syntax that came in recently


00:04:22.200 --> 00:04:24.740
in typing that protocol.


00:04:24.740 --> 00:04:27.560
>> Protocols like formal duck typing,


00:04:27.560 --> 00:04:29.860
which is an odd thing to combine, but yes.


00:04:29.860 --> 00:04:35.180
>> Yeah. But it's really cool how it's put together in Python, so I like that.


00:04:35.180 --> 00:04:37.880
Then lastly is specialization,


00:04:37.880 --> 00:04:40.420
and that's where exception hierarchies come in.


00:04:40.420 --> 00:04:43.180
But also, he's got a great discussion


00:04:43.180 --> 00:04:47.260
about structuring data classes that have common elements.


00:04:47.260 --> 00:04:50.300
And I think that's an interesting discussion too.


00:04:50.300 --> 00:04:53.420
And I think I already said this,


00:04:53.420 --> 00:04:55.340
the summary really,


00:04:55.340 --> 00:04:56.980
it's really hard to summarize this article


00:04:56.980 --> 00:05:00.180
other than it's good to think about your design,


00:05:00.180 --> 00:05:02.860
especially if you're gonna try to bring subclassing into it.


00:05:02.860 --> 00:05:05.260
So please do that.


00:05:05.260 --> 00:05:06.100
- Yeah, awesome.


00:05:06.100 --> 00:05:07.340
I haven't had a chance to dive into this article,


00:05:07.340 --> 00:05:09.720
but I do wanna read it and explore it.


00:05:09.720 --> 00:05:12.380
You know, it touches on a couple of things,


00:05:12.380 --> 00:05:14.700
like it touches on namespaces and modules,


00:05:14.700 --> 00:05:16.380
which I think is pretty interesting.


00:05:16.380 --> 00:05:19.740
so many people coming from C++, C#, Java, et cetera,


00:05:19.740 --> 00:05:22.860
like all these really strongly OOP,


00:05:22.860 --> 00:05:25.860
especially C# and Java, where everything has to be a class.


00:05:25.860 --> 00:05:29.120
You'll see people creating classes


00:05:29.120 --> 00:05:32.880
just for things like static variables and so on, right?


00:05:32.880 --> 00:05:33.980
Or static functions.


00:05:33.980 --> 00:05:35.320
If you just have a bunch of static functions,


00:05:35.320 --> 00:05:37.400
you know what works really well for that?


00:05:37.400 --> 00:05:39.240
A module that has functions in it, right?


00:05:39.240 --> 00:05:40.420
That's the same thing.


00:05:40.420 --> 00:05:43.080
You import module, then you say module.functionName


00:05:43.080 --> 00:05:45.820
is the same as from module import class,


00:05:45.820 --> 00:05:48.260
class.static function name, right?


00:05:48.260 --> 00:05:51.920
Like it's just a layer that doesn't really need to be there.


00:05:51.920 --> 00:05:54.140
So the article touches on that, which I think is neat.


00:05:54.140 --> 00:05:56.140
Like sometimes you just don't need those.


00:05:56.140 --> 00:06:00.760
And then also the composition over inheritance.


00:06:00.760 --> 00:06:02.620
I think composition over inheritance


00:06:02.620 --> 00:06:04.100
is a really important thing to think about


00:06:04.100 --> 00:06:06.780
'cause so often people say, well, you can't use OOP


00:06:06.780 --> 00:06:08.380
because it's horrible in all these ways.


00:06:08.380 --> 00:06:11.140
And you end up with like a robotic duck that can't quack.


00:06:11.140 --> 00:06:13.460
I don't know, like you end up with these weird situations.


00:06:13.460 --> 00:06:15.140
If you like derive too many things,


00:06:15.140 --> 00:06:17.760
and you put a weird specialty on the end.


00:06:17.760 --> 00:06:21.240
You're like a duck is an animal, but it has wings,


00:06:21.240 --> 00:06:22.360
but wait, now it's a robot.


00:06:22.360 --> 00:06:23.440
Now, why does it eat water?


00:06:23.440 --> 00:06:25.280
You know, it's like what happened to it, right?


00:06:25.280 --> 00:06:26.800
But the composition allows for you


00:06:26.800 --> 00:06:30.240
to keep things much more tight and small


00:06:30.240 --> 00:06:31.220
in the inheritance stack,


00:06:31.220 --> 00:06:33.040
but still put them together in meaningful ways.


00:06:33.040 --> 00:06:34.940
So anyway, yeah, I wanna see more about this.


00:06:34.940 --> 00:06:35.780
This looks great.


00:06:35.780 --> 00:06:38.520
- And I'm coming from a standpoint of,


00:06:38.520 --> 00:06:42.600
I'm a C++ person as well, and I've done both extremes.


00:06:42.600 --> 00:06:46.320
I've gone way down the inheritance hierarchy thing


00:06:46.320 --> 00:06:48.800
and had like seven deep in the hierarchy,


00:06:48.800 --> 00:06:51.040
maybe not seven, but like five deep


00:06:51.040 --> 00:06:53.040
and it gets to be a nightmare.


00:06:53.040 --> 00:06:55.400
So then I went to the other direction


00:06:55.400 --> 00:06:58.860
and didn't do any inheritance at all in a design,


00:06:58.860 --> 00:07:00.600
but there's problems there too.


00:07:00.600 --> 00:07:04.040
So thinking about it and doing it smartly


00:07:04.040 --> 00:07:06.360
is you just need to.


00:07:06.360 --> 00:07:08.560
- It's often like salt.


00:07:08.560 --> 00:07:11.200
I could see, it's really good when you have some.


00:07:11.200 --> 00:07:12.320
Try to go like salt's great,


00:07:12.320 --> 00:07:13.220
I'm gonna have that for dinner.


00:07:13.220 --> 00:07:15.120
Like, no, no, you shouldn't do that.


00:07:15.120 --> 00:07:16.600
(laughing)


00:07:16.600 --> 00:07:19.440
- I think the other thing that's really important


00:07:19.440 --> 00:07:21.960
about this is depending on how long you've been working


00:07:21.960 --> 00:07:24.660
in Python, sometimes you kind of get stuck in a rut


00:07:24.660 --> 00:07:26.120
and you're always doing the same thing


00:07:26.120 --> 00:07:29.000
and the language has evolved and grown over time.


00:07:29.000 --> 00:07:31.720
And so I think articles like this kind of force you


00:07:31.720 --> 00:07:34.640
to take a step back and see if you're using


00:07:34.640 --> 00:07:39.640
all the new features in a way that maybe aren't idiomatic.


00:07:39.720 --> 00:07:41.960
- Yeah, yeah, absolutely, absolutely.


00:07:41.960 --> 00:07:44.840
Also quick comment out there from the live stream.


00:07:44.840 --> 00:07:46.960
Paul says, "First time watching the live stream."


00:07:46.960 --> 00:07:49.920
Hey Paul, weird seeing everyone when they say the intro.


00:07:49.920 --> 00:07:51.120
Indeed, it is kind of weird,


00:07:51.120 --> 00:07:53.960
but I wanna highlight this one to say hi to Paul.


00:07:53.960 --> 00:07:54.800
Thanks for being here.


00:07:54.800 --> 00:07:55.920
But also if you're listening and you're like,


00:07:55.920 --> 00:07:57.700
hey, I'd kind of like to see what's on the screen


00:07:57.700 --> 00:07:59.040
while you're all talking about this,


00:07:59.040 --> 00:08:00.200
you'll follow us on YouTube.


00:08:00.200 --> 00:08:02.980
There's like a live stream menu right on Python by Sod FM.


00:08:02.980 --> 00:08:05.560
So it's easy to sign up for that.


00:08:05.560 --> 00:08:07.040
And also Sam out there in the live stream


00:08:07.040 --> 00:08:07.880
following up on that says,


00:08:07.880 --> 00:08:12.380
I'm currently maintaining a library with a deep templated class and hierarchies.


00:08:12.380 --> 00:08:14.380
It's very hard to keep track of it all.


00:08:14.380 --> 00:08:17.380
Yeah, I hear you that. That's for sure.


00:08:17.380 --> 00:08:21.380
All right, let's switch over to the next one.


00:08:21.380 --> 00:08:25.880
Now, I tried to resist this, Brian. I promise I did.


00:08:25.880 --> 00:08:30.880
But I've ended up with an extra extra with seven more extras here all about it.


00:08:30.880 --> 00:08:34.880
And it just had to become a main item because otherwise we'd be here for hours,


00:08:34.880 --> 00:08:36.380
which is not the idea of the show.


00:08:36.380 --> 00:08:40.780
So we've got an extra extra, you know about it, nine extras.


00:08:40.780 --> 00:08:42.780
Let's pull them up.


00:08:42.780 --> 00:08:45.420
Action number one, we've talked about Pyodide.


00:08:45.420 --> 00:08:47.980
I had a whole talk Python episode on Pyodide,


00:08:47.980 --> 00:08:49.420
which is an interesting thing.


00:08:49.420 --> 00:08:51.340
It is this project by Mozilla,


00:08:51.340 --> 00:08:55.100
where you take Python and you run it in the browser,


00:08:55.100 --> 00:08:57.580
and then you take many of the data science packages


00:08:57.580 --> 00:08:59.740
like NumPy and Matplotlib and stuff


00:08:59.740 --> 00:09:03.340
and compile them into the browser.


00:09:03.340 --> 00:09:07.100
And then you basically have client-side Python data science,


00:09:07.100 --> 00:09:08.420
which is really interesting.


00:09:08.420 --> 00:09:11.500
This project is being spun out as its own topic,


00:09:11.500 --> 00:09:13.100
as its own project.


00:09:13.100 --> 00:09:14.780
It's no longer under Mozilla.


00:09:14.780 --> 00:09:17.580
Usually, that doesn't sound good to me.


00:09:17.580 --> 00:09:19.260
It kind of sounds like it's been orphaned.


00:09:19.260 --> 00:09:22.660
I have no idea what the status of PyOdyte is.


00:09:22.660 --> 00:09:25.700
People can check that out, but it's no longer under Mozilla.


00:09:25.700 --> 00:09:28.260
It's its own separate thing, as they say.


00:09:28.260 --> 00:09:31.020
So it's cruising out there.


00:09:31.540 --> 00:09:33.980
And also it didn't get compiled to JavaScript,


00:09:33.980 --> 00:09:35.780
it got compiled to WebAssembly,


00:09:35.780 --> 00:09:38.540
which is interesting 'cause that's much faster.


00:09:38.540 --> 00:09:39.540
All right, that's number one.


00:09:39.540 --> 00:09:42.080
Number two, I just, as in a couple hours ago,


00:09:42.080 --> 00:09:43.180
released a brand new course,


00:09:43.180 --> 00:09:46.920
Python-powered chat apps with Twilio and SendGrid.


00:09:46.920 --> 00:09:49.860
So the idea is if you wanna have some kind of chat bot,


00:09:49.860 --> 00:09:52.620
but a lot of that conversation has to involve


00:09:52.620 --> 00:09:56.640
your database and your data and verifying things,


00:09:56.640 --> 00:10:01.460
like the app that we built here is a tech-savvy bakery


00:10:01.460 --> 00:10:04.520
where you can order cakes by sending it a WhatsApp message.


00:10:04.520 --> 00:10:06.140
And then it'll say, "Hey, you want a cake?


00:10:06.140 --> 00:10:07.400
Well, here's the menu."


00:10:07.400 --> 00:10:10.380
And it actually gets the menu from our Flask app.


00:10:10.380 --> 00:10:12.040
And then they pick something off the menu.


00:10:12.040 --> 00:10:14.260
And then once they pick all the details,


00:10:14.260 --> 00:10:16.140
they said like this, "Okay, great."


00:10:16.140 --> 00:10:17.920
We send it back to our website


00:10:17.920 --> 00:10:19.860
and figure out how much that's gonna cost.


00:10:19.860 --> 00:10:22.420
They order it, goes back, we send them a,


00:10:22.420 --> 00:10:23.380
if once they accept it,


00:10:23.380 --> 00:10:26.780
they get like a customized pretty email.


00:10:26.780 --> 00:10:29.060
It goes back to the backend, the bakers bake it.


00:10:29.060 --> 00:10:30.660
It sends them another message to let them know.


00:10:30.660 --> 00:10:33.700
So if you wanna build kind of like that workflow,


00:10:33.700 --> 00:10:36.700
if Twilio and SyncGrid, check it out.


00:10:36.700 --> 00:10:37.800
This course is super fun.


00:10:37.800 --> 00:10:40.100
It's six hours and it's 100% free.


00:10:40.100 --> 00:10:42.100
So people can check that out.


00:10:42.100 --> 00:10:44.540
That I think if you're trying to build that kind of thing,


00:10:44.540 --> 00:10:45.700
that'll be a lot of fun.


00:10:45.700 --> 00:10:47.340
So links in the show notes there.


00:10:47.340 --> 00:10:49.380
I had something.


00:10:49.380 --> 00:10:50.220
Yes.


00:10:50.220 --> 00:10:52.860
- If I can't afford free, can I get a discount code?


00:10:52.860 --> 00:10:55.960
- Dude, I will give anyone listening 50% off that.


00:10:55.960 --> 00:10:59.420
So I have this really cool tweet.


00:10:59.420 --> 00:11:05.420
And Twitter is broken from what I can tell for everything that's not the home page.


00:11:05.420 --> 00:11:08.420
So something went wrong, but let me describe it.


00:11:08.420 --> 00:11:11.420
So when you look at it in the show notes, you'll be able to see


00:11:11.420 --> 00:11:17.420
there's a really cool tweet from Nick Moll, who was the guest on the show last week.


00:11:17.420 --> 00:11:21.420
Oh, you got it? How can you get this to work?


00:11:21.420 --> 00:11:23.420
You've got some sort of magic. All right.


00:11:23.420 --> 00:11:25.420
So thanks for putting it on your screen.


00:11:25.420 --> 00:11:30.080
Here we have Will McGuinn,


00:11:30.080 --> 00:11:33.840
Gugin, showing an animation of basically


00:11:33.840 --> 00:11:37.840
this really cool, like collapsible sidebar


00:11:37.840 --> 00:11:41.720
and like scrolling within sub windows


00:11:41.720 --> 00:11:43.720
inside of Textual, right?


00:11:43.720 --> 00:11:45.840
We talked about Textual as well.


00:11:45.840 --> 00:11:48.120
And it's just such a cool graphic that says like,


00:11:48.120 --> 00:11:51.120
wow, you can build some pretty amazing applications there.


00:11:51.120 --> 00:11:52.840
What do you think?


00:11:52.840 --> 00:11:55.280
- Will's just docking out of the park with this.


00:11:55.280 --> 00:11:57.600
It's fun to watch him go so fast.


00:11:57.600 --> 00:11:58.680
Absolutely.


00:11:58.680 --> 00:11:59.640
Well done there.


00:11:59.640 --> 00:12:02.840
Well, I'll switch back to mine for a moment.


00:12:02.840 --> 00:12:03.280
Okay.


00:12:03.280 --> 00:12:05.540
ours tech network works on my computer.


00:12:05.540 --> 00:12:10.720
So remember we did an episode and I titled it something like


00:12:10.720 --> 00:12:12.760
flock no or something like that.


00:12:12.760 --> 00:12:19.960
So flock federated learning of cohorts is something that Google was trying to do.


00:12:21.760 --> 00:12:25.140
so that they can replace third party cookies.


00:12:25.140 --> 00:12:25.980
Why?


00:12:25.980 --> 00:12:28.660
Because people are running ad blockers


00:12:28.660 --> 00:12:32.480
or like I am right now, a VPN that at the network level


00:12:32.480 --> 00:12:36.880
blocks all the ad tracking and third party cookies.


00:12:36.880 --> 00:12:40.020
So they're just basically not working very well anymore.


00:12:40.020 --> 00:12:42.920
So they need to, they're gonna cancel third party cookies


00:12:42.920 --> 00:12:44.640
with Chrome, which means they're canceling


00:12:44.640 --> 00:12:46.840
for the net, the internet.


00:12:46.840 --> 00:12:48.760
And, but because they're Google


00:12:48.760 --> 00:12:50.880
and they're based on ad revenue primarily,


00:12:50.880 --> 00:12:53.420
They can't just go, and we canceled tracking.


00:12:53.420 --> 00:12:56.640
Hooray, we're all winning on privacy.


00:12:56.640 --> 00:13:01.080
It has to be replaced with some other form of tracking,


00:13:01.080 --> 00:13:03.240
which they call this federated learning of cohorts.


00:13:03.240 --> 00:13:05.000
But the federated learning of cohorts


00:13:05.000 --> 00:13:09.680
has all these almost more negative consequences.


00:13:09.680 --> 00:13:11.080
And I don't wanna go too much into that


00:13:11.080 --> 00:13:14.040
because we went into quite a lot of detail.


00:13:14.040 --> 00:13:15.480
But for example, you can say,


00:13:15.480 --> 00:13:20.240
I would like to target lesbians who just got divorced.


00:13:20.240 --> 00:13:23.080
You run an ad on that, people show up on your site,


00:13:23.080 --> 00:13:26.120
they sign up, you have an email, and now guess what?


00:13:26.120 --> 00:13:27.880
Not only do you know what their email is,


00:13:27.880 --> 00:13:29.560
you know that they're in this group


00:13:29.560 --> 00:13:30.880
and maybe this is the very first time


00:13:30.880 --> 00:13:31.800
you've ever met them, right?


00:13:31.800 --> 00:13:34.320
So really weird, creepy stuff


00:13:34.320 --> 00:13:37.160
that you could like pull out with this.


00:13:37.160 --> 00:13:40.520
Anyway, the big news is Google delays the rollout till 2023


00:13:40.520 --> 00:13:41.500
because you know what?


00:13:41.500 --> 00:13:43.160
People don't like it.


00:13:43.160 --> 00:13:44.760
They're not super keen about it.


00:13:45.680 --> 00:13:50.680
So there's a whole bunch of people who are against that.


00:13:50.680 --> 00:13:53.340
- But you're saying they're just delaying it,


00:13:53.340 --> 00:13:54.600
not stopping it?


00:13:54.600 --> 00:13:56.700
- Yes, for now.


00:13:56.700 --> 00:14:00.020
This is a great RSTack article that people should check out.


00:14:00.020 --> 00:14:02.300
Let me read the first sentence or two.


00:14:02.300 --> 00:14:04.780
Google's plan to upend web advertising and user tracking


00:14:04.780 --> 00:14:06.720
by dropping third-party cookie support in Chrome


00:14:06.720 --> 00:14:07.940
has been delayed.


00:14:07.940 --> 00:14:10.820
Most browsers block third-party tracking cookies now,


00:14:10.820 --> 00:14:12.740
as do VPNs, like I mentioned.


00:14:12.740 --> 00:14:14.820
But Google, the world's largest advertising company,


00:14:14.820 --> 00:14:16.060
It wasn't going to follow suit


00:14:16.060 --> 00:14:19.020
without protecting its business model first.


00:14:19.020 --> 00:14:22.060
But there's a lot of challenges with this.


00:14:22.060 --> 00:14:24.100
A lot of people have come out against it.


00:14:24.100 --> 00:14:28.900
And yeah, it's not gonna work out super well.


00:14:28.900 --> 00:14:31.620
So they decided to delay it.


00:14:31.620 --> 00:14:32.940
That's what they said.


00:14:32.940 --> 00:14:35.240
Stage two starts mid 2023.


00:14:35.240 --> 00:14:40.140
- Google says it's received substantial feedback.


00:14:40.140 --> 00:14:41.180
- Including from us.


00:14:44.140 --> 00:14:46.060
Other companies out there are like,


00:14:46.060 --> 00:14:47.580
"We kind of want to keep tracking too,


00:14:47.580 --> 00:14:49.580
but we're not really excited about this,


00:14:49.580 --> 00:14:51.020
so we're just going to not say anything."


00:14:51.020 --> 00:14:53.900
Like Apple, Opera, Mozilla, Microsoft,


00:14:53.900 --> 00:14:56.140
yeah, they're like, "Ah, we're not so sure about this."


00:14:56.140 --> 00:14:59.020
Anyway, yeah, they've received substantial feedback.


00:14:59.020 --> 00:15:00.620
So hooray, I think, for now.


00:15:00.620 --> 00:15:05.260
One thing that we don't talk very often about in Python is,


00:15:05.260 --> 00:15:10.460
what if you want to ship your code to somebody


00:15:10.460 --> 00:15:13.340
and it has sensitive algorithms in it?


00:15:13.340 --> 00:15:23.340
It's not that common, but you could get py2exe or py2app bundle up your code and give it to somebody, for example, Dropbox does something to this effect, right?


00:15:23.340 --> 00:15:26.340
You've got your Python code running up in your little menu bar.


00:15:26.340 --> 00:15:27.340
And there's other ones as well.


00:15:27.340 --> 00:15:30.340
But you might want to encrypt how that works or protect how that works.


00:15:30.340 --> 00:15:34.340
So people can't just open the py files and look around.


00:15:34.340 --> 00:15:36.340
So there's this thing called Source Defender.


00:15:36.340 --> 00:15:39.340
I'll be clear, this is a paid commercial product.


00:15:39.340 --> 00:15:42.540
I have no affiliation, but they pointed out, they sent me a message.


00:15:42.540 --> 00:15:44.540
Hey, we're doing this thing. What do you think?


00:15:44.540 --> 00:15:47.740
It looks kind of interesting. I think it's going to be a pretty limited


00:15:47.740 --> 00:15:50.040
set of people who actually care about this.


00:15:50.040 --> 00:15:53.440
Like if you're running on Docker, you're running on the server, you probably don't care.


00:15:53.440 --> 00:15:56.540
Maybe you do, but probably not. But if you'd like to be able to encrypt


00:15:56.540 --> 00:15:59.640
your source code, so it's much harder to see,


00:15:59.640 --> 00:16:03.140
and then ship that to somebody, you can use this thing as part of their paid service.


00:16:03.140 --> 00:16:05.640
So that's kind of cool. People can check that out.


00:16:05.640 --> 00:16:09.640
Let's see. Oh, this is going to play noise. I want that.


00:16:09.640 --> 00:16:14.640
So I was recently interviewed on a day in the life and a work from home Pythonista, which is a cool


00:16:14.640 --> 00:16:18.640
series being done by the folks in the Philippines.


00:16:18.640 --> 00:16:23.640
If you want a tour of the behind the scenes studio and all the work from home stuff, people can check that out.


00:16:23.640 --> 00:16:30.640
Python 3.9.6 was just released. We can check out the changelog and see what's happening there. There's a security


00:16:30.640 --> 00:16:35.640
HTTP client about what I think is like a denial of service.


00:16:35.640 --> 00:16:39.640
It sounds like it avoids an infinite loop sort of thing.


00:16:39.640 --> 00:16:43.640
So that might matter to people.


00:16:43.640 --> 00:16:45.640
Probably not, but maybe it does.


00:16:45.640 --> 00:16:48.640
Then a bunch of changes that are happening here,


00:16:48.640 --> 00:16:51.640
including platform specific ones.


00:16:51.640 --> 00:16:54.640
So if you're running Python 3.9, and why wouldn't you be?


00:16:54.640 --> 00:16:56.640
Update that.


00:16:56.640 --> 00:16:58.640
Because you're running 3.10.


00:16:58.640 --> 00:16:59.480
- 10.


00:16:59.480 --> 00:17:00.320
- Yes, that's right.


00:17:00.320 --> 00:17:01.760
You're already ahead of the world.


00:17:01.760 --> 00:17:02.760
You're in the future.


00:17:02.760 --> 00:17:07.760
So also we had Calvin on from six feet up a while ago.


00:17:07.760 --> 00:17:12.120
And we talked about the conference


00:17:12.120 --> 00:17:13.560
that he was putting together.


00:17:13.560 --> 00:17:14.860
Well, the videos from that conference


00:17:14.860 --> 00:17:16.520
are out as a YouTube playlist.


00:17:16.520 --> 00:17:18.320
So people can check that out.


00:17:18.320 --> 00:17:19.960
I don't remember how many videos there are.


00:17:19.960 --> 00:17:21.000
Let's click on it and see.


00:17:21.000 --> 00:17:22.760
There are 61 videos,


00:17:22.760 --> 00:17:26.780
including one on the Python memory deep dive talk


00:17:26.780 --> 00:17:27.620
that I gave.


00:17:27.620 --> 00:17:29.920
So if people wanna check that out, they can.


00:17:29.920 --> 00:17:32.480
Let's see.


00:17:32.480 --> 00:17:36.120
Check this out, Brian.


00:17:36.120 --> 00:17:36.940
Have you seen this?


00:17:36.940 --> 00:17:39.480
Did you know you can pip install Python bytes?


00:17:39.480 --> 00:17:40.320
- Yeah.


00:17:40.320 --> 00:17:41.520
(laughing)


00:17:41.520 --> 00:17:44.040
- You can literally pip install Python bytes


00:17:44.040 --> 00:17:49.040
because of Scott Stoltzman created this for us as a joke.


00:17:49.040 --> 00:17:52.520
He was listening to one of our episodes.


00:17:52.520 --> 00:17:54.160
I can't remember what we talked about.


00:17:54.160 --> 00:17:55.800
This was episode 239,


00:17:55.800 --> 00:17:58.440
but we must have talked about packaging and pip


00:17:58.440 --> 00:17:59.920
and things like that.


00:17:59.920 --> 00:18:02.120
So he created a package called Python bytes.


00:18:02.120 --> 00:18:04.760
And what it does is basically you give it a number


00:18:04.760 --> 00:18:08.040
like 240 and it would download this version


00:18:08.040 --> 00:18:10.240
as an MP3 file and put it right next to,


00:18:10.240 --> 00:18:12.320
you know, whatever the working directory is.


00:18:12.320 --> 00:18:14.600
So if you want to pip install Python bytes


00:18:14.600 --> 00:18:17.680
and then pythonbytes.downloadepisode,


00:18:17.680 --> 00:18:20.480
instead of using a podcast player,


00:18:20.480 --> 00:18:21.720
we're all for that.


00:18:21.720 --> 00:18:22.880
You can check that out.


00:18:22.880 --> 00:18:24.640
Yeah, that's it.


00:18:24.640 --> 00:18:27.920
- It's extra, extra, extra, extra, well, many, many extras.


00:18:27.920 --> 00:18:30.240
- Yeah, so the Python bytes package is just sort of,


00:18:30.240 --> 00:18:34.100
was for fun, but it also, it's really small.


00:18:34.100 --> 00:18:37.080
And one of the things I like about it is


00:18:37.080 --> 00:18:40.640
it's just a really cool example of like with Python,


00:18:40.640 --> 00:18:43.640
you got something that downloads MP3 files


00:18:43.640 --> 00:18:46.520
off of a feed somewhere.


00:18:46.520 --> 00:18:47.360
It's that easy.


00:18:47.360 --> 00:18:48.920
It's just, that's pretty cool.


00:18:48.920 --> 00:18:51.520
- Yeah, that's fantastic.


00:18:51.520 --> 00:18:52.800
Absolutely. - Absolutely.


00:18:52.800 --> 00:18:57.800
All right, let's see a couple things from the live stream.


00:18:57.800 --> 00:19:01.300
Sam says, "Things have happened with Mozilla


00:19:01.300 --> 00:19:02.360
"the last two years that really shook


00:19:02.360 --> 00:19:03.460
"my confidence with them."


00:19:03.460 --> 00:19:06.700
I am still a big fan of Firefox and I support their mission


00:19:06.700 --> 00:19:10.100
but yeah, I wanna see them succeed.


00:19:10.100 --> 00:19:13.300
Let's see, another one from the live stream.


00:19:13.300 --> 00:19:15.700
Antonio said, "Hey guys, have you mentioned Kibbe before?"


00:19:15.700 --> 00:19:17.860
Hey, GUIs and Kibbe, there you go.


00:19:17.860 --> 00:19:19.460
I watched a video about it this week.


00:19:19.460 --> 00:19:22.060
It's a GUI that's compatible with many things,


00:19:22.060 --> 00:19:23.380
including the mobile devices.


00:19:23.380 --> 00:19:27.060
I do, my feeling is that Kivy is a lot about,


00:19:27.060 --> 00:19:33.080
it's more about building almost game-like interactions,


00:19:33.080 --> 00:19:34.960
whereas a lot of GUIs people want,


00:19:34.960 --> 00:19:36.420
they want like, here's a text box,


00:19:36.420 --> 00:19:38.780
I type in the text box, here's a button I drop in.


00:19:38.780 --> 00:19:41.020
So, but yeah, pretty cool.


00:19:41.020 --> 00:19:44.800
Well, let's see.


00:19:44.800 --> 00:19:47.060
Kim VanWijk says, "As an aside,


00:19:47.060 --> 00:19:49.780
"shipping a Docker image won't obfuscate the Python.


00:19:49.780 --> 00:19:52.200
the image can be taken apart and files like that.


00:19:52.200 --> 00:19:53.920
That's true, they absolutely can.


00:19:53.920 --> 00:19:55.880
I was just thinking like you're probably just running on


00:19:55.880 --> 00:19:56.840
like a container service.


00:19:56.840 --> 00:19:59.760
But yeah, if you're shipping it to someone, it's the same.


00:19:59.760 --> 00:20:01.520
Nick Harvey on the live stream says,


00:20:01.520 --> 00:20:05.480
could just send the PYC files with no PY.


00:20:05.480 --> 00:20:07.740
It's not foolproof, but it does require more work.


00:20:07.740 --> 00:20:10.760
You're right, you'd basically be down to like dis.dis


00:20:10.760 --> 00:20:12.620
and like reading the bytecode.


00:20:12.620 --> 00:20:15.500
Yeah, for sure.


00:20:15.500 --> 00:20:18.200
Let's see.


00:20:19.040 --> 00:20:21.240
- Final one, Rayhan says,


00:20:21.240 --> 00:20:22.880
"If it ends up running code on your machine,


00:20:22.880 --> 00:20:23.720
"you can read it.


00:20:23.720 --> 00:20:24.680
"It's about putting enough barriers


00:20:24.680 --> 00:20:26.400
"that people won't bother."


00:20:26.400 --> 00:20:27.840
Yeah, that's definitely true.


00:20:27.840 --> 00:20:29.880
I mean, you think of C++ and things like that


00:20:29.880 --> 00:20:31.080
being completely opaque,


00:20:31.080 --> 00:20:33.180
and yet people take that apart all the time.


00:20:33.180 --> 00:20:34.440
But there is also a difference


00:20:34.440 --> 00:20:37.140
from I'm literally shipping you the source files here,


00:20:37.140 --> 00:20:40.200
to, you know, 'cause then you could go in like,


00:20:40.200 --> 00:20:41.720
oh, here's where the license check is.


00:20:41.720 --> 00:20:44.760
Let's just, you know, command slash, comment that out.


00:20:44.760 --> 00:20:46.440
All right, now we're ready to run.


00:20:46.440 --> 00:20:47.280
- Yeah.


00:20:47.280 --> 00:20:48.280
- Right, you wanna make it a little bit


00:20:48.280 --> 00:20:50.720
of a challenge at least I suspect.


00:20:50.720 --> 00:20:53.320
Anyway, thanks for all the feedback out there everyone.


00:20:53.320 --> 00:20:57.320
That's the everything extra, extra nine times.


00:20:57.320 --> 00:20:59.760
All right, Chris, what's your first one here?


00:20:59.760 --> 00:21:04.640
- All right, so the first one is from Andreas Kahns,


00:21:04.640 --> 00:21:06.300
I think is how you pronounce it.


00:21:06.300 --> 00:21:09.560
And it's a library called Clib, I believe.


00:21:09.560 --> 00:21:12.520
I wasn't sure if it's Caleb or Clib, but I think it's Clib.


00:21:12.520 --> 00:21:17.440
And it's for automated cleaning of pandas data frames.


00:21:17.440 --> 00:21:19.320
I guess I should even say it's a little bit more


00:21:19.320 --> 00:21:22.000
than just cleaning, it's automated analysis.


00:21:22.000 --> 00:21:25.960
And I'll be the first to say, I'm a little skeptical


00:21:25.960 --> 00:21:29.120
about some things that try and automate the process,


00:21:29.120 --> 00:21:30.360
but I was playing around with it.


00:21:30.360 --> 00:21:33.960
And there's some pretty cool things that it does.


00:21:33.960 --> 00:21:37.120
The documentation, probably the best way to learn about it


00:21:37.120 --> 00:21:41.960
is the Towards Data Science article that he wrote,


00:21:41.960 --> 00:21:45.260
which gives a pretty nice overview of what it does.


00:21:45.260 --> 00:21:47.400
It has some, as I mentioned,


00:21:47.400 --> 00:21:50.160
some pretty nice cleaning features


00:21:50.160 --> 00:21:52.240
as well as analysis features.


00:21:52.240 --> 00:21:56.420
So I was going to kind of go through a couple of the,


00:21:56.420 --> 00:21:59.120
describe a couple of things.


00:21:59.120 --> 00:22:02.400
The first one that I thought was really interesting is


00:22:02.400 --> 00:22:06.800
there's this function called data cleaning


00:22:06.800 --> 00:22:10.140
and it essentially does, you can control what it does.


00:22:10.140 --> 00:22:13.200
So it can clean column names, it can convert data types,


00:22:13.200 --> 00:22:14.760
it can drop missing.


00:22:14.760 --> 00:22:19.500
So one of the things that pandas does is,


00:22:19.500 --> 00:22:22.680
it's not really aggressive about the size


00:22:22.680 --> 00:22:24.680
or the data types that it uses.


00:22:24.680 --> 00:22:25.880
So when you read in data,


00:22:25.880 --> 00:22:29.200
it will just kind of assign it maybe to a float


00:22:29.200 --> 00:22:32.000
or an object.


00:22:32.000 --> 00:22:34.280
But if you want, you can get in there


00:22:34.280 --> 00:22:36.880
and if it's a value, if it's a column,


00:22:36.880 --> 00:22:41.000
let's say that it has only values from less than 100,


00:22:41.000 --> 00:22:43.960
if you convert it to an integer, it saves memory.


00:22:43.960 --> 00:22:45.200
if you save enough memory,


00:22:45.200 --> 00:22:47.120
then you can actually speed up your code.


00:22:47.120 --> 00:22:48.780
And so this goes behind the scenes


00:22:48.780 --> 00:22:50.500
and takes your data frame


00:22:50.500 --> 00:22:54.360
and converts it essentially to the smallest value,


00:22:54.360 --> 00:22:56.760
NumPy value that it can store.


00:22:56.760 --> 00:23:00.040
And then, you know, I took a random data set


00:23:00.040 --> 00:23:03.780
and sure enough, it did reduce the memory footprint


00:23:03.780 --> 00:23:06.280
quite a bit, which I thought was pretty interesting


00:23:06.280 --> 00:23:08.960
'cause it's one of those things that is very tedious


00:23:08.960 --> 00:23:10.700
to do on your own by hand.


00:23:10.700 --> 00:23:13.040
- Does it do, like if you have the same string,


00:23:13.040 --> 00:23:15.200
does it just create a pointer to one copy


00:23:15.200 --> 00:23:17.260
instead of having that many times, stuff like that?


00:23:17.260 --> 00:23:20.800
- It can do that by converting it to a category type.


00:23:20.800 --> 00:23:22.520
That's essentially what pandas is doing.


00:23:22.520 --> 00:23:23.680
When you create a category,


00:23:23.680 --> 00:23:28.680
it does that to kind of string to like a list conversion


00:23:28.680 --> 00:23:31.200
and it's pretty effective.


00:23:31.200 --> 00:23:34.640
And yeah, I've used the category piece before,


00:23:34.640 --> 00:23:37.280
but I haven't actually gone in and tried to,


00:23:37.280 --> 00:23:42.280
shorten up the numeric columns, which is really useful.


00:23:42.280 --> 00:23:44.060
- You just convert them to all the integers


00:23:44.060 --> 00:23:45.180
and then it'll just be shorter.


00:23:45.180 --> 00:23:47.180
So you don't have to worry about the size.


00:23:47.180 --> 00:23:48.020
I'm just teasing.


00:23:48.020 --> 00:23:48.840
- Yeah, yeah.


00:23:48.840 --> 00:23:50.100
- You probably need a 20 point.


00:23:50.100 --> 00:23:50.940
- Yeah, no.


00:23:50.940 --> 00:23:53.180
But I mean, it does even do,


00:23:53.180 --> 00:23:56.820
it's like it can do even like int 16s or int 32s or--


00:23:56.820 --> 00:23:57.660
- Oh yeah, interesting.


00:23:57.660 --> 00:23:59.500
Like it'll shrink to the size,


00:23:59.500 --> 00:24:01.340
oh, these are all under 256,


00:24:01.340 --> 00:24:02.980
so we'll go to like one byte.


00:24:02.980 --> 00:24:04.860
- Exactly, exactly.


00:24:04.860 --> 00:24:06.500
You know, and I haven't looked at the code to see,


00:24:06.500 --> 00:24:08.220
you know, how it actually figures it out,


00:24:08.220 --> 00:24:10.020
but I had a fairly large data frame


00:24:10.020 --> 00:24:11.780
and it was pretty quick.


00:24:11.780 --> 00:24:15.540
The other one that was interesting is the clean column names.


00:24:15.540 --> 00:24:21.980
So I think there are some other libraries out there that will like strip spaces or special characters from column names.


00:24:21.980 --> 00:24:27.940
But what this one will actually do is actually, if you have a column name that has, let's say camel case,


00:24:27.940 --> 00:24:35.940
it'll convert it to all underscore, or it will just essentially normalize all of your column names,


00:24:35.940 --> 00:24:40.660
which, you know, you could have a debate about whether you want to do that.


00:24:40.660 --> 00:24:43.940
but when you have a data frame that has a lot of columns


00:24:43.940 --> 00:24:45.680
and you're just looking at it the first time,


00:24:45.680 --> 00:24:47.860
that can really be helpful.


00:24:47.860 --> 00:24:50.880
And then the other function that it does


00:24:50.880 --> 00:24:55.880
that works pretty well is for cleaning duplicate data


00:24:55.880 --> 00:24:58.160
or empty data.


00:24:58.160 --> 00:25:02.260
So if you have a lot of columns that have no values in it


00:25:02.260 --> 00:25:05.680
or just maybe 90% of the values are empty,


00:25:05.680 --> 00:25:09.200
you can set thresholds and just clean that all out.


00:25:09.200 --> 00:25:12.700
So I was playing around with it and I was pretty impressed.


00:25:12.700 --> 00:25:14.480
And I kind of wanted to call it out


00:25:14.480 --> 00:25:18.260
because the documentation right now


00:25:18.260 --> 00:25:23.260
is mostly around the Jupyter notebooks that he has.


00:25:23.260 --> 00:25:27.660
So I think it would be nice if we could get some,


00:25:27.660 --> 00:25:30.140
get some more docs in there and some more examples.


00:25:30.140 --> 00:25:33.900
But overall, I was really impressed with the library


00:25:33.900 --> 00:25:36.580
and I think people should kind of take a look at it


00:25:36.580 --> 00:25:39.040
and see if it's something they wanna use


00:25:39.040 --> 00:25:42.360
for some of their own processes.


00:25:42.360 --> 00:25:45.520
- Yeah, some of them sound interesting,


00:25:45.520 --> 00:25:47.140
even if you don't have to trust it, right?


00:25:47.140 --> 00:25:50.480
Like the shrink to the smallest data set,


00:25:50.480 --> 00:25:54.000
data type, for example, or normalized column names,


00:25:54.000 --> 00:25:57.020
those don't seem as risky as, you know, clean it up.


00:25:57.020 --> 00:26:00.000
- Exactly. - Find the wrong data.


00:26:00.000 --> 00:26:02.120
- Exactly, and then I forgot to mention,


00:26:02.120 --> 00:26:05.520
it also has some nice correlation plots.


00:26:05.520 --> 00:26:07.520
And some of these things you can already do


00:26:07.520 --> 00:26:09.800
with Seaborn or Matplotlib,


00:26:09.800 --> 00:26:12.400
but I found that it gives you a little more control


00:26:12.400 --> 00:26:14.920
and it's just a little bit easier to do it.


00:26:14.920 --> 00:26:16.960
There are certainly other tools out there


00:26:16.960 --> 00:26:19.040
that do this as well.


00:26:19.040 --> 00:26:23.400
Oh, and then the categorical data plots,


00:26:23.400 --> 00:26:28.000
I thought was a nice summary of the data


00:26:28.000 --> 00:26:29.560
and gives you some nice graphs


00:26:29.560 --> 00:26:30.880
and it helps you understand


00:26:30.880 --> 00:26:32.720
where you've got some missing values.


00:26:32.720 --> 00:26:34.880
But yeah.


00:26:34.880 --> 00:26:36.280
- Yeah, the visualizing the missing data


00:26:36.280 --> 00:26:37.980
It's a really interesting feature.


00:26:37.980 --> 00:26:41.480
Yeah, and there is another pandas data frame called missing no


00:26:41.480 --> 00:26:43.420
that does this and does it well.


00:26:43.420 --> 00:26:45.720
But I think this is a unique combination,


00:26:45.720 --> 00:26:48.460
especially some of the data,


00:26:48.460 --> 00:26:52.120
the memory saving features that it has are pretty neat.


00:26:52.120 --> 00:26:57.000
Yeah, so the cleaning features, though, have a lot of


00:26:57.000 --> 00:27:00.400
there's a lot of parameters to it, so it looks like you have a lot of control.


00:27:00.400 --> 00:27:04.640
And one of the I mean, again, this is open source,


00:27:04.640 --> 00:27:06.400
So it isn't that magical.


00:27:06.400 --> 00:27:08.940
You can just look at the source and see what it's doing.


00:27:08.940 --> 00:27:10.220
So it looks--


00:27:10.220 --> 00:27:11.320
>>Exactly, yeah.


00:27:11.320 --> 00:27:13.560
And that was one of the things I was looking at is


00:27:13.560 --> 00:27:15.960
like data cleaning, I think is kind of the top level


00:27:15.960 --> 00:27:18.600
and you can just run that wide open and it'll do everything.


00:27:18.600 --> 00:27:20.880
And it actually prints out a pretty nice summary


00:27:20.880 --> 00:27:23.580
of what it does, but you can also go in there


00:27:23.580 --> 00:27:27.240
and specify parameters, like you said, to control it.


00:27:27.240 --> 00:27:29.680
So that maybe it doesn't rename the columns


00:27:29.680 --> 00:27:32.320
or drop some of the missing data.


00:27:32.320 --> 00:27:34.980
The other thing that I tried to play with


00:27:34.980 --> 00:27:36.160
that seemed really interesting


00:27:36.160 --> 00:27:38.880
is this pool duplicate subsets.


00:27:38.880 --> 00:27:41.820
And essentially what it tries to do,


00:27:41.820 --> 00:27:44.980
and I had a little bit of trouble with this


00:27:44.980 --> 00:27:46.860
'cause I think I put too much data at it,


00:27:46.860 --> 00:27:51.180
but it tries to, maybe if you have 10 columns of data,


00:27:51.180 --> 00:27:52.400
it says, well, you know what?


00:27:52.400 --> 00:27:54.860
Four or five of them are very heavily correlated.


00:27:54.860 --> 00:27:58.900
So we're gonna drop them and just give you the four or five


00:27:58.900 --> 00:28:00.900
that are actually most useful.


00:28:00.900 --> 00:28:07.340
And so I think that's some interesting tools to use when you get some data that maybe you haven't worked with before.


00:28:07.340 --> 00:28:08.340
Yeah.


00:28:08.340 --> 00:28:10.340
Yeah, very nice.


00:28:10.340 --> 00:28:12.340
What a good find. Awesome.


00:28:12.340 --> 00:28:14.340
Brian, you got the next one?


00:28:14.340 --> 00:28:16.340
Sure, yeah.


00:28:16.340 --> 00:28:18.340
Just a second.


00:28:18.340 --> 00:28:23.840
So I wanted to remind people to every once in a while look at funk tools.


00:28:23.840 --> 00:28:30.840
Because I've experienced FuncTools as kind of an interesting library,


00:28:30.840 --> 00:28:36.680
or a library that's built in, that is, it kind of grows with you.


00:28:36.680 --> 00:28:40.680
So if you're new to Python and you look at it, it's going to be confusing.


00:28:40.680 --> 00:28:43.680
It's like all intermediate stuff in there.


00:28:43.680 --> 00:28:51.180
But as you learn and experience more Python programming,


00:28:51.180 --> 00:28:55.020
come back to it every once in a while, because there's stuff in there that you'll use


00:28:55.020 --> 00:28:57.020
that you didn't think about before.


00:28:57.020 --> 00:28:59.700
So I'm going to go through a few things.


00:28:59.700 --> 00:29:01.700
And actually, I wanted to call out,


00:29:01.700 --> 00:29:04.580
there was an article by Martin Hines that


00:29:04.580 --> 00:29:08.020
I read that kind of reminded me to go through and look this.


00:29:08.020 --> 00:29:10.020
So I want to shout out to him. Thanks.


00:29:10.020 --> 00:29:13.020
We've talked about some of this stuff before.


00:29:13.020 --> 00:29:15.860
We talked about function overloading


00:29:15.860 --> 00:29:19.100
and using single dispatch as part of,


00:29:19.100 --> 00:29:22.600
is one of the ways you can do function overloading in Python,


00:29:22.600 --> 00:29:24.800
which is cool, and that's part of FuncTools.


00:29:24.800 --> 00:29:28.500
And hopefully people are familiar with wraps.


00:29:28.500 --> 00:29:34.400
Wraps is a way to create decorators that act like the thing that you decorated.


00:29:34.400 --> 00:29:39.160
And so if you're writing decorators, make sure you check out wraps.


00:29:39.160 --> 00:29:40.900
And then caching as well.


00:29:40.900 --> 00:29:43.860
I think, I'm sure we've talked about LRU cache, but...


00:29:43.860 --> 00:29:46.700
- I'm sure we have, yeah. - Yeah, so...


00:29:46.760 --> 00:29:54.440
That's in func tools, the caching and new in three nine, there's a there's a just a simple cache.


00:29:54.440 --> 00:29:59.480
You don't have to say or you cache and it's just a convenience wrapper around LRU cache.


00:29:59.480 --> 00:30:02.640
But it also there's no max size.


00:30:02.640 --> 00:30:08.080
So you don't want to do that for things that you actually want to throw throw items away.


00:30:08.080 --> 00:30:10.920
But caching is super cool.


00:30:10.920 --> 00:30:12.440
So check that out.


00:30:12.440 --> 00:30:14.280
And then I first saw the LRU cache.


00:30:14.280 --> 00:30:16.720
I'm like, "Whoa, I got to go figure out what this LRU is."


00:30:16.720 --> 00:30:19.480
And it's not like rather than just like cache the response.


00:30:19.480 --> 00:30:22.960
I guess the other question though you might be is like,


00:30:22.960 --> 00:30:26.320
"Well, what if you pass two variable or two arguments or sets of arguments?


00:30:26.320 --> 00:30:26.920
How did those?"


00:30:26.920 --> 00:30:27.240
Yeah.


00:30:27.240 --> 00:30:30.960
So either way, it's kind of not 100% totally obvious what's going to happen.


00:30:30.960 --> 00:30:32.240
But yeah, it's very cool.


00:30:32.240 --> 00:30:32.760
Yeah.


00:30:32.760 --> 00:30:36.440
So there's a bunch of caching stuff in there like the LRU cache,


00:30:36.440 --> 00:30:38.440
but then you can also cache a property.


00:30:38.440 --> 00:30:41.680
And actually, the property one I hadn't used before,


00:30:41.680 --> 00:30:46.440
but I was playing with it this morning and it's really cool.


00:30:46.440 --> 00:30:52.820
For instance, if you've got a data class or any class that has a bunch of stuff,


00:30:52.820 --> 00:30:55.460
and some of the things,


00:30:55.460 --> 00:31:00.080
you have an expensive read on one of those because you have to calculate the value.


00:31:00.080 --> 00:31:07.280
You can throw a cache property on it and it looks pretty cool.


00:31:07.280 --> 00:31:09.960
One of the neat things about it is,


00:31:09.960 --> 00:31:14.160
So it only reads it once, and then it caches the value of the property.


00:31:14.160 --> 00:31:18.200
And if you need it to refresh, you call delete on it,


00:31:18.200 --> 00:31:22.160
which is kind of weird, but kind of cool also.


00:31:22.160 --> 00:31:26.760
But it's odd to call delete on something that you want to still be there,


00:31:26.760 --> 00:31:29.640
and it'll just reread it next time. So that's how that works.


00:31:29.640 --> 00:31:31.840
That is weird. That's definitely weird.


00:31:31.840 --> 00:31:34.800
Total ordering I didn't realize was there.


00:31:34.800 --> 00:31:39.060
You can, so if you have something that you,


00:31:39.060 --> 00:31:41.960
some data type that you want to be able to compare,


00:31:41.960 --> 00:31:45.720
you can use total ordering to define equal in one other operator,


00:31:45.720 --> 00:31:49.520
and then you get all of the comparison operators to show up.


00:31:49.520 --> 00:31:51.520
You can use that.


00:31:51.520 --> 00:31:54.720
And then the last one I wanted to highlight is partial method,


00:31:54.720 --> 00:31:56.720
which partial and partial method,


00:31:56.720 --> 00:31:59.600
which these are kind of neat in that,


00:31:59.600 --> 00:32:02.960
like, let's say, you've got


00:32:02.960 --> 00:32:07.920
a function that takes a whole bunch of arguments, but you want to


00:32:07.920 --> 00:32:13.520
pre-fill some of those in and create a new function that has some of the arguments pre-filled in.


00:32:13.520 --> 00:32:17.920
You can do that with this and it's pretty neat.


00:32:17.920 --> 00:32:24.160
Yeah, okay, interesting. I see you partially supply some of the arguments but not all of them.


00:32:24.160 --> 00:32:29.280
Yeah, so just a shout out to this that


00:32:29.280 --> 00:32:41.860
Yeah, these are intermediate or advanced topics, but they're, so as you learn more Python, come back to this every once in a while, and you might just find it useful.


00:32:41.860 --> 00:32:54.020
Yep, indeed. I was like, how did I miss this cached property thing? Like, surely I would have paid attention to that. Because what, so often these properties that are like computed things, but they often don't change.


00:32:54.020 --> 00:32:56.740
You get something back from the database, you want to,


00:32:56.740 --> 00:32:59.620
it has time stored in seconds, you want to know how many days it is


00:32:59.620 --> 00:33:01.940
so something happens, you might have a days property, right?


00:33:01.940 --> 00:33:03.460
But that's probably not going to change.


00:33:03.460 --> 00:33:05.860
So having that cache is cool,


00:33:05.860 --> 00:33:07.700
if you're sure it's not going to change.


00:33:07.700 --> 00:33:10.500
But I'm like, how did I miss it? It's new in 3.8.


00:33:10.500 --> 00:33:12.740
It's not super old.


00:33:12.740 --> 00:33:17.860
And like Chris said, one of the reasons to revisit a lot of these things


00:33:17.860 --> 00:33:20.100
and pay attention to the news on Python


00:33:20.100 --> 00:33:23.300
is because the language changes like this.


00:33:23.300 --> 00:33:24.900
Yeah, for sure.


00:33:24.900 --> 00:33:26.200
Kim out there in live stream says,


00:33:26.200 --> 00:33:29.200
"Also worth looking at inner tools from time to time."


00:33:29.200 --> 00:33:30.200
Definitely.


00:33:30.200 --> 00:33:33.800
Indeed. It's in the same level of complexity,


00:33:33.800 --> 00:33:35.500
but for collections.


00:33:35.500 --> 00:33:36.500
It's kind of like that.


00:33:36.500 --> 00:33:38.000
You wouldn't first go there, but eventually like,


00:33:38.000 --> 00:33:40.000
"Oh, yeah, this is what I wanted. I just didn't know it."


00:33:40.000 --> 00:33:43.300
Speaking of things you didn't know it,


00:33:43.300 --> 00:33:45.600
let me scare you all a little, make you all delighted.


00:33:45.600 --> 00:33:47.900
I don't know. You tell me how you take to this.


00:33:47.900 --> 00:33:51.000
So let me set the stage.


00:33:51.000 --> 00:33:53.000
GitHub has a little bit of source code,


00:33:53.000 --> 00:33:55.000
much of it actually public, right?


00:33:55.000 --> 00:33:59.000
Like it's public repos and whatnot.


00:33:59.000 --> 00:34:02.000
So it can be analyzed and talked about and shared


00:34:02.000 --> 00:34:04.000
or used to train an artificial intelligence,


00:34:04.000 --> 00:34:06.000
which is pretty crazy.


00:34:06.000 --> 00:34:08.000
And if you look at the artificial intelligence around text,


00:34:08.000 --> 00:34:10.000
there's the GPT-3 stuff,


00:34:10.000 --> 00:34:14.000
which is like scary, good text-based AI.


00:34:14.000 --> 00:34:16.000
Well, they decided,


00:34:16.000 --> 00:34:19.000
what if, you know, our parent company


00:34:19.000 --> 00:34:20.000
also makes this editor?


00:34:20.000 --> 00:34:23.960
what if we created an AI based on understanding


00:34:23.960 --> 00:34:25.660
the source code from GitHub,


00:34:25.660 --> 00:34:27.860
like all the source code from GitHub,


00:34:27.860 --> 00:34:31.860
and put it into VS Code, and then it did stuff?


00:34:31.860 --> 00:34:32.780
Have you all seen this?


00:34:32.780 --> 00:34:34.180
It's called GitHub Copilot.


00:34:34.180 --> 00:34:36.360
- Yeah.


00:34:36.360 --> 00:34:37.200
- Yeah.


00:34:37.200 --> 00:34:38.040
- Yeah?


00:34:38.040 --> 00:34:41.120
- I was gonna put the link in there and you beat me to it.


00:34:41.120 --> 00:34:43.280
- Oh yeah, I was on top of it.


00:34:43.280 --> 00:34:44.120
So if you go over here,


00:34:44.120 --> 00:34:48.180
there actually works for TypeScript, Go, Ruby, Python,


00:34:48.180 --> 00:34:49.940
a couple other languages.


00:34:49.940 --> 00:34:53.680
It says it works for many languages, but it's best on those, of course.


00:34:53.680 --> 00:34:58.420
But if you just look at their homepage, the copilot.github.com,


00:34:58.420 --> 00:35:01.420
they've got this little animation and it says,


00:35:01.420 --> 00:35:03.620
I'm going to write a function that says parse expenses,


00:35:03.620 --> 00:35:06.420
and it takes some kind of text, and you put a doc string,


00:35:06.420 --> 00:35:09.860
literally a doc string in Python, it says parse the list of expenses


00:35:09.860 --> 00:35:13.340
and return the list of tuples, date, value, currency,


00:35:13.340 --> 00:35:16.640
ignore lines starting with hash, parse using date time,


00:35:16.640 --> 00:35:18.240
Here are some examples.


00:35:18.240 --> 00:35:23.240
Tab, and then it writes the code that does that.


00:35:23.240 --> 00:35:27.320
And let's see, what is it gonna do?


00:35:27.320 --> 00:35:29.240
It says, it's in the middle of animation,


00:35:29.240 --> 00:35:31.080
it creates a list of expenses.


00:35:31.080 --> 00:35:33.620
It goes through each line on split.


00:35:33.620 --> 00:35:35.360
It says if the line starts with hash,


00:35:35.360 --> 00:35:38.320
this is all Python code, continue on your loop.


00:35:38.320 --> 00:35:41.340
Otherwise, date value currency equals split it.


00:35:41.340 --> 00:35:44.040
And then it knows how to parse the date one,


00:35:44.040 --> 00:35:46.080
convert the value to a float,


00:35:46.080 --> 00:35:48.440
and then store the currency as a string.


00:35:48.440 --> 00:35:50.720
It's not just that sometimes it'll do this,


00:35:50.720 --> 00:35:54.000
you can actually get alternate implementations by tabbing


00:35:54.000 --> 00:35:58.720
through its recommended solution, which is pretty crazy.


00:35:58.720 --> 00:36:02.440
This is powered by OpenAIs.


00:36:02.440 --> 00:36:06.520
What's it called? It's called Codex or something like that.


00:36:06.520 --> 00:36:07.960
I don't see it right here right now.


00:36:07.960 --> 00:36:09.920
Anyway, I'll try to run across it in a second.


00:36:09.920 --> 00:36:11.880
That's what it's powered by.


00:36:11.880 --> 00:36:13.880
It says things like,


00:36:13.880 --> 00:36:15.060
like you're the pilot.


00:36:15.060 --> 00:36:17.360
So with GitHub Copilot, you're always in charge.


00:36:17.360 --> 00:36:19.800
You can cycle through alternative suggestions


00:36:19.800 --> 00:36:22.160
and choose which to accept or reject


00:36:22.160 --> 00:36:25.280
and then manually edit the suggested code.


00:36:25.280 --> 00:36:26.880
Oh yeah, and it learns from you.


00:36:26.880 --> 00:36:31.080
So I don't know, this is wild.


00:36:31.080 --> 00:36:33.000
Y'all, this is pretty wild stuff here.


00:36:33.000 --> 00:36:35.080
What do you think?


00:36:35.080 --> 00:36:39.080
- Yeah, I think it's really impressive.


00:36:39.080 --> 00:36:42.080
I mean, it will be interesting to see what it's like


00:36:42.080 --> 00:36:43.920
and use it in real life.


00:36:43.920 --> 00:36:47.780
And I think that there could certainly be limitations,


00:36:47.780 --> 00:36:50.080
but I don't know about you,


00:36:50.080 --> 00:36:51.800
but whenever I'm programming,


00:36:51.800 --> 00:36:54.040
there's always these things I just need to go


00:36:54.040 --> 00:36:55.600
and look at the documentation


00:36:55.600 --> 00:36:57.280
or look at stack overflow to refresh.


00:36:57.280 --> 00:36:59.120
- Like I got to connect the SQLAlchemy


00:36:59.120 --> 00:37:01.280
and I totally forgot how to do those three steps


00:37:01.280 --> 00:37:03.680
for that connection strings sequence, right?


00:37:03.680 --> 00:37:04.640
- Exactly.


00:37:04.640 --> 00:37:05.800
- Yeah.


00:37:05.800 --> 00:37:08.240
- And I've seen, I saw on Twitter


00:37:08.240 --> 00:37:11.440
where someone was throwing a little shade


00:37:11.440 --> 00:37:13.080
at that example that you're walking through.


00:37:13.080 --> 00:37:13.900
'Cause they said,


00:37:13.900 --> 00:37:16.320
"Well, why are you storing the currency as a float?


00:37:16.320 --> 00:37:17.200
It should be a decimal


00:37:17.200 --> 00:37:19.060
because if you store a currency as a float,


00:37:19.060 --> 00:37:21.280
you're gonna have all the rounding issues."


00:37:21.280 --> 00:37:22.120
So-


00:37:22.120 --> 00:37:23.720
- Well, that's how Superman makes all his money


00:37:23.720 --> 00:37:25.000
or the evil villain in Superman.


00:37:25.000 --> 00:37:25.840
What was it?


00:37:25.840 --> 00:37:26.720
One of those shows.


00:37:26.720 --> 00:37:28.200
- Yeah, Richard Pryor


00:37:28.200 --> 00:37:30.680
and one of the original Superman.


00:37:30.680 --> 00:37:31.520
Yeah.


00:37:31.520 --> 00:37:34.280
(laughing)


00:37:34.280 --> 00:37:36.120
- Yeah, and it's not just based on the docstring.


00:37:36.120 --> 00:37:38.160
Like the example I first spoke about


00:37:38.160 --> 00:37:41.080
was you wrote a complex doc string


00:37:41.080 --> 00:37:43.160
and then say do that thing,


00:37:43.160 --> 00:37:46.440
but you can do it based just on function name.


00:37:46.440 --> 00:37:49.000
You can just type a meaningful function name.


00:37:49.000 --> 00:37:52.200
What was the example they use?


00:37:52.200 --> 00:37:53.920
I can't remember, but yeah.


00:37:53.920 --> 00:37:56.840
So you basically just write a doc string,


00:37:56.840 --> 00:37:58.400
a comment, a function name,


00:37:58.400 --> 00:38:01.480
or even some code to give more context to it,


00:38:01.480 --> 00:38:02.600
and then off it goes.


00:38:02.600 --> 00:38:04.320
So yeah, pretty neat.


00:38:04.320 --> 00:38:08.360
Codex, that's the name of the AI system behind it.


00:38:08.360 --> 00:38:13.360
So basically this is a plugin for VS Code,


00:38:13.360 --> 00:38:14.280
but a really nice one.


00:38:14.280 --> 00:38:16.520
So here's some examples we'll all be familiar with.


00:38:16.520 --> 00:38:17.840
So fetch tweets.


00:38:17.840 --> 00:38:21.040
And the example here is you literally write


00:38:21.040 --> 00:38:25.860
def fetch_tweets_from_user tab.


00:38:25.860 --> 00:38:27.640
And then what it auto completes with is,


00:38:27.640 --> 00:38:29.080
oh, you're gonna need to pass the username in,


00:38:29.080 --> 00:38:31.940
and then here's how you authorize with TweetBee,


00:38:31.940 --> 00:38:33.920
set up the API credentials.


00:38:33.920 --> 00:38:35.520
And then here's the code you write.


00:38:35.520 --> 00:38:37.260
Oh yeah, and here's your return.


00:38:37.260 --> 00:38:40.820
Or I wanna do a scatter plot.


00:38:40.820 --> 00:38:44.480
And you write import matplotlib.pyplot as plot,


00:38:44.480 --> 00:38:46.960
draw scatter plot tab.


00:38:46.960 --> 00:38:48.800
And then boom, there it is.


00:38:48.800 --> 00:38:50.200
Or memoization.


00:38:50.200 --> 00:38:51.320
I wanted to point this one out


00:38:51.320 --> 00:38:52.360
'cause of what you're covering, Brian.


00:38:52.360 --> 00:38:54.880
It says, oh, here's how you memoize a function,


00:38:54.880 --> 00:38:58.960
which is to, if it's passed a set of arguments,


00:38:58.960 --> 00:39:00.600
it's always gonna return the same answer.


00:39:00.600 --> 00:39:01.960
So just give that answer.


00:39:01.960 --> 00:39:04.960
Remember, these arguments equal this return value once it's run.


00:39:04.960 --> 00:39:08.360
And it shows how to create a complex decorator


00:39:08.360 --> 00:39:12.080
that is going to have a function that remembers the values using caching.


00:39:12.080 --> 00:39:16.960
It could just go @functools.cache.


00:39:16.960 --> 00:39:19.960
You know what I mean? So there's things like that that it's missing.


00:39:19.960 --> 00:39:22.960
Because you could achieve the exact same outcome


00:39:22.960 --> 00:39:26.560
with functools.cache.decorators


00:39:26.560 --> 00:39:29.560
instead of trying to write a bunch of code that re-implements that.


00:39:29.560 --> 00:39:36.560
Anyway, pretty wild thing. I don't know really how to feel about that. But thinking about this today, it's kind of freaking me out, but it's also kind of cool.


00:39:36.560 --> 00:39:57.560
Yeah, I wanted to point out a comment that people have been pointing out with relation to this is, is the, you know, I wish we could have just specify what we wanted to do, the computer to do and, and it just does it. And we already have that. It's called code. So anyway,


00:39:57.560 --> 00:40:02.240
- Yeah, I don't think this, you know,


00:40:02.240 --> 00:40:04.180
people often say things like,


00:40:04.180 --> 00:40:07.920
I remember hearing this 20 years ago.


00:40:07.920 --> 00:40:10.520
Oh, this low code thing where you create these little boxes


00:40:10.520 --> 00:40:12.720
that do stuff and you drag and drop between them.


00:40:12.720 --> 00:40:14.260
We're not gonna need programmers anymore.


00:40:14.260 --> 00:40:16.320
We're all just gonna become dragger droppies.


00:40:16.320 --> 00:40:18.380
And then like you programmers won't be needed.


00:40:18.380 --> 00:40:20.040
The business people will just drag and drop


00:40:20.040 --> 00:40:21.440
either way to the future.


00:40:21.440 --> 00:40:24.000
And that never ever happened, right?


00:40:24.000 --> 00:40:26.800
Because well, people got to put them in production.


00:40:26.800 --> 00:40:27.800
They've got to debug them.


00:40:27.800 --> 00:40:29.880
They've got to scale them and so on.


00:40:29.880 --> 00:40:31.400
Yeah.


00:40:31.400 --> 00:40:32.080
Yeah.


00:40:32.080 --> 00:40:34.120
I think the same thing here, like sure.


00:40:34.120 --> 00:40:38.800
It wrote it once, but you can't have a right only experience for your code.


00:40:38.800 --> 00:40:42.120
You have to understand your code and be able to evolve your code and work with.


00:40:42.120 --> 00:40:48.440
So this might power you into a solution faster, but I don't think it escapes the


00:40:48.440 --> 00:40:50.320
need of people doing meaningful software work.


00:40:50.320 --> 00:40:55.840
The person that pointed out, and several people pointed out the example of using


00:40:55.840 --> 00:40:58.640
of money, of floats and money.


00:40:58.640 --> 00:41:01.440
That does highlight one of the problems with something like this, though,


00:41:01.440 --> 00:41:05.940
that everybody needs to be careful of, is the code that's generated,


00:41:05.940 --> 00:41:10.200
now you have to like, you were already creating,


00:41:10.200 --> 00:41:12.280
carefully thinking about it when you were creating it,


00:41:12.280 --> 00:41:15.280
but if something else creates it, you've got to scrutinize that


00:41:15.280 --> 00:41:18.080
to make sure that's really doing the right thing.


00:41:18.080 --> 00:41:22.140
And so you're code reviewing some AI code


00:41:22.140 --> 00:41:24.440
while you're coding your own stuff.


00:41:24.500 --> 00:41:26.020
It's just a different part of your brain.


00:41:26.020 --> 00:41:28.600
You gotta make sure that you're really paying attention.


00:41:28.600 --> 00:41:29.440
- Yeah. - Yeah.


00:41:29.440 --> 00:41:32.780
And even I was looking at that matplotlib example


00:41:32.780 --> 00:41:34.900
and I would even argue that's not really the way


00:41:34.900 --> 00:41:36.940
you should do a scatterplot in matplotlib


00:41:36.940 --> 00:41:40.660
because you should use the object oriented interface


00:41:40.660 --> 00:41:41.500
in matplotlib.


00:41:41.500 --> 00:41:43.380
I mean, the code will work,


00:41:43.380 --> 00:41:46.300
but I wouldn't advocate that you use that code.


00:41:46.300 --> 00:41:48.340
And so to your point,


00:41:48.340 --> 00:41:50.700
I think it will be interesting to see


00:41:50.700 --> 00:41:53.780
if it does learn on your own coding style.


00:41:53.780 --> 00:41:57.140
So does it start to recognize those things that you're always,


00:41:57.140 --> 00:42:00.780
you know, like you said, connecting to a database or fetching a file


00:42:00.780 --> 00:42:03.340
or doing a certain pandas function?


00:42:03.340 --> 00:42:06.080
Will it start to learn that?


00:42:06.080 --> 00:42:09.620
I thought I read something about it adapting to you


00:42:09.620 --> 00:42:11.080
and it learning from what you're doing,


00:42:11.080 --> 00:42:13.780
but I have no idea what that actually means.


00:42:13.780 --> 00:42:15.280
Yeah, hopefully it's paying attention.


00:42:15.280 --> 00:42:19.920
So if it generates something and you change it to the different method,


00:42:19.920 --> 00:42:21.680
and everybody else is doing that also,


00:42:21.680 --> 00:42:24.560
maybe they'll stop suggesting the old one


00:42:24.560 --> 00:42:26.320
and start suggesting the new one.


00:42:26.320 --> 00:42:28.280
- Yeah, I'll, you know, Chris, to your point


00:42:28.280 --> 00:42:32.640
about having to like, or maybe it was you, Brian, sorry.


00:42:32.640 --> 00:42:35.440
Whoever said about you've got to like criticize this


00:42:35.440 --> 00:42:37.360
and you didn't write it, so you basically have to study it


00:42:37.360 --> 00:42:40.920
and then understand or understand it and study it


00:42:40.920 --> 00:42:43.800
to make sure it's doing the right thing.


00:42:43.800 --> 00:42:46.120
You know, I, a couple of years ago, I don't know,


00:42:46.120 --> 00:42:48.320
a while ago, I was river floating


00:42:48.320 --> 00:42:50.820
and broke my hand on some rocks,


00:42:50.820 --> 00:42:52.960
broke my finger in a bunch of places.


00:42:52.960 --> 00:42:56.560
My fingers were completely wrapped up all the way to the very tip.


00:42:56.560 --> 00:42:58.260
There was no little pecking,


00:42:58.260 --> 00:42:59.720
typing while my hand healed.


00:42:59.720 --> 00:43:01.200
It was like, "Nope, no."


00:43:01.200 --> 00:43:03.440
One-handed, really slow.


00:43:03.440 --> 00:43:07.200
So to keep things going, I used voice-to-text to try


00:43:07.200 --> 00:43:11.960
to at least keep email flowing for a month or something.


00:43:11.960 --> 00:43:15.760
What I found was, I could write pretty decent emails.


00:43:15.760 --> 00:43:18.200
It's hard to stop and think in whole sentences the way


00:43:18.200 --> 00:43:19.500
the little tools like it to work,


00:43:19.500 --> 00:43:21.500
but you can get it to work pretty well.


00:43:21.500 --> 00:43:24.740
But the mistakes it makes that are phonetically correct,


00:43:24.740 --> 00:43:27.300
but actually what you mean wrong,


00:43:27.300 --> 00:43:28.820
like they and they,


00:43:28.820 --> 00:43:31.580
or something that sounds like what you said,


00:43:31.580 --> 00:43:34.060
but is actually not what you mean to say,


00:43:34.060 --> 00:43:35.360
is incredibly hard.


00:43:35.360 --> 00:43:38.060
It's much harder to understand and edit


00:43:38.060 --> 00:43:39.420
than you would think.


00:43:39.420 --> 00:43:40.580
And so things like this,


00:43:40.580 --> 00:43:42.500
like, well, I wanted it to do that and I hit tab,


00:43:42.500 --> 00:43:43.420
and okay, it's doing,


00:43:43.420 --> 00:43:46.260
I feel like there's gonna be a lot of blind spots.


00:43:47.140 --> 00:43:48.540
Yeah, well, it did what it says it did.


00:43:48.540 --> 00:43:50.380
And I typed the thing and it seems right.


00:43:50.380 --> 00:43:52.260
And like, how do you really, really know?


00:43:52.260 --> 00:43:55.660
I, it just seems like in the same type of situation,


00:43:55.660 --> 00:43:57.760
it's gonna be harder than normal code to check


00:43:57.760 --> 00:44:00.220
'cause you didn't have to think through it to create it.


00:44:00.220 --> 00:44:01.060
You know?


00:44:01.060 --> 00:44:06.220
Yeah, a couple of comments from the live stream.


00:44:06.220 --> 00:44:08.580
Rehan, don't give him ideas.


00:44:08.580 --> 00:44:12.260
Says, "Greetings Dr. Falcon."


00:44:12.260 --> 00:44:15.420
Joshua, where have you been?


00:44:15.420 --> 00:44:18.440
let's play thermonuclear war as a doc string.


00:44:18.440 --> 00:44:23.060
And Nick says, I can't help but think of Microsoft Tay,


00:44:23.060 --> 00:44:24.860
which Microsoft Tay was this really cool bot


00:44:24.860 --> 00:44:26.900
that was super good at adapting to stuff.


00:44:26.900 --> 00:44:28.140
And they put it on Twitter,


00:44:28.140 --> 00:44:32.140
but people decided to like be mean to it


00:44:32.140 --> 00:44:33.540
instead of teach it.


00:44:33.540 --> 00:44:36.680
I think in like Japanese Twitter,


00:44:36.680 --> 00:44:39.040
it became a very kind and intelligent bot,


00:44:39.040 --> 00:44:40.580
but on like English Twitter,


00:44:40.580 --> 00:44:44.200
it got turned into like a racist, horrible creature,


00:44:44.200 --> 00:44:46.540
like right away and they actually had to cancel the project.


00:44:46.540 --> 00:44:47.380
So yeah.


00:44:47.380 --> 00:44:50.540
And then Arthur says,


00:44:50.540 --> 00:44:55.180
the next April Fool's Day prank,


00:44:55.180 --> 00:44:57.500
everyone start writing terrible code that influences AI.


00:44:57.500 --> 00:45:00.860
And this is why English Day went down the tubes.


00:45:00.860 --> 00:45:04.480
Let's see.


00:45:04.480 --> 00:45:06.280
And then Sam, for goodness sakes,


00:45:06.280 --> 00:45:07.940
don't trade it on GitHub code.


00:45:07.940 --> 00:45:10.820
It'll arbitrarily turn on debug mode.


00:45:10.820 --> 00:45:11.720
Yeah, perhaps.


00:45:13.340 --> 00:45:16.980
Yeah, Kim thinks this is both very impressive and vaguely unsettling.


00:45:16.980 --> 00:45:18.980
And that captures what I was thinking.


00:45:18.980 --> 00:45:23.180
Rehan, will you go and talk to the marketing people for me?


00:45:23.180 --> 00:45:28.380
I'm good with people. That's what I do.


00:45:28.380 --> 00:45:29.420
Yeah, okay.


00:45:29.420 --> 00:45:33.940
Another thing that's not mentioned here explicitly,


00:45:33.940 --> 00:45:38.180
but I think is interesting is this code is coming from GitHub.


00:45:38.180 --> 00:45:38.740
Yeah.


00:45:40.260 --> 00:45:56.060
When I go and I'm saying like, I'm working on super secret commercial projects for large organization that has lots of people trying to scrutinize it, and I hit memoize tab, it's going to write some amazing code. Oh, by the way, was that GPL?


00:45:58.420 --> 00:45:59.700
Where did that code come from?


00:45:59.700 --> 00:46:03.220
Right? Like, what's the license of the code that was on GitHub?


00:46:03.220 --> 00:46:08.340
Did I just now all of a sudden grab something that turned,


00:46:08.340 --> 00:46:10.860
you know, like if I was doing this on Windows and I hit tab,


00:46:10.860 --> 00:46:12.460
is Windows now open source?


00:46:12.460 --> 00:46:13.460
I don't know.


00:46:13.460 --> 00:46:15.460
That's a really interesting point.


00:46:15.460 --> 00:46:17.860
And you would think if it was a small startup,


00:46:17.860 --> 00:46:19.580
someone will probably sue them.


00:46:19.580 --> 00:46:22.380
But, you know, this is Microsoft now.


00:46:22.380 --> 00:46:24.820
Yeah, exactly. Yeah. Yeah.


00:46:25.700 --> 00:46:28.060
- Anyway, so I agree with Kim.


00:46:28.060 --> 00:46:30.060
This is both very impressive.


00:46:30.060 --> 00:46:31.980
If this is the start, like where will it go?


00:46:31.980 --> 00:46:32.900
It'd be very amazing,


00:46:32.900 --> 00:46:36.100
but it's also vaguely unsettling at the same time.


00:46:36.100 --> 00:46:38.380
And I don't know how I feel about it,


00:46:38.380 --> 00:46:39.700
other than I wish it was in PyCharm


00:46:39.700 --> 00:46:41.460
so I could play with it more often.


00:46:41.460 --> 00:46:46.780
All right, Chris, you got the last one?


00:46:46.780 --> 00:46:48.100
- I do.


00:46:48.100 --> 00:46:52.340
So this is another library called Cats


00:46:52.340 --> 00:46:55.900
And it's a time series analysis library


00:46:55.900 --> 00:46:59.380
and it's made by the same, well, it's from Facebook.


00:46:59.380 --> 00:47:02.320
And a lot of people may have heard of Profit,


00:47:02.320 --> 00:47:05.500
which is a library for time series forecasting.


00:47:05.500 --> 00:47:08.400
And one of the things that's interesting to me


00:47:08.400 --> 00:47:13.400
about Profit and Cats is I think time series forecasting


00:47:13.400 --> 00:47:16.780
is something that's really common in the business world.


00:47:16.780 --> 00:47:19.580
I mean, you think about trying to forecast sales


00:47:19.580 --> 00:47:23.980
or maybe inventory movements or stock prices,


00:47:23.980 --> 00:47:26.420
a whole bunch of different use cases for it.


00:47:26.420 --> 00:47:28.100
And I think in general,


00:47:28.100 --> 00:47:31.660
most organizations don't have a group of PhDs


00:47:31.660 --> 00:47:36.060
that are really sophisticated in their analysis.


00:47:36.060 --> 00:47:37.400
So people use Excel


00:47:37.400 --> 00:47:40.140
and kind of come up with their own approaches.


00:47:40.140 --> 00:47:42.300
And that's why I thought Profit was interesting.


00:47:42.300 --> 00:47:43.780
And I think this is interesting


00:47:43.780 --> 00:47:46.700
because it does come from Facebook


00:47:46.700 --> 00:47:49.100
and you have to assume that they've got a lot of smart people


00:47:49.100 --> 00:47:51.660
that are doing a lot of forecasting.


00:47:51.660 --> 00:47:53.640
And they've taken some of the things


00:47:53.640 --> 00:47:58.640
that Profit was good at and added some additional tools.


00:47:58.640 --> 00:48:03.060
So before I go too much into cats,


00:48:03.060 --> 00:48:05.220
one thing I wanted to mention is,


00:48:05.220 --> 00:48:07.300
I did write an article about Profit,


00:48:07.300 --> 00:48:12.300
but I think other people, this gentleman, Peter Cotton,


00:48:12.300 --> 00:48:15.780
wrote an article about Profit


00:48:15.780 --> 00:48:19.340
and essentially questioning how good it was.


00:48:19.340 --> 00:48:24.100
And this is a really long, really well thought out article


00:48:24.100 --> 00:48:26.220
and some of the math and some of the concepts


00:48:26.220 --> 00:48:28.340
are way over my head, but I do encourage people


00:48:28.340 --> 00:48:30.660
if you're looking at time series forecasting,


00:48:30.660 --> 00:48:32.420
take a look at this.


00:48:32.420 --> 00:48:36.060
But what CATS does is instead of just doing forecasting


00:48:36.060 --> 00:48:39.260
with profit, it has a couple of different models


00:48:39.260 --> 00:48:40.740
that you can use.


00:48:40.740 --> 00:48:45.280
You can also do some more just basic time series analysis


00:48:45.280 --> 00:48:48.480
with it to detect seasonality patterns


00:48:48.480 --> 00:48:50.640
and change points and other trends.


00:48:50.640 --> 00:48:53.440
There's also, if you want to incorporate this


00:48:53.440 --> 00:48:55.920
in some of your other machine learning algorithms


00:48:55.920 --> 00:48:58.860
to pull out features from your time series data,


00:48:58.860 --> 00:49:01.160
you can do that with this library as well.


00:49:01.160 --> 00:49:04.160
And there's a whole bunch of other libraries


00:49:04.160 --> 00:49:07.640
or utilities to build like ensemble models


00:49:07.640 --> 00:49:11.320
and other approaches for time series forecasting.


00:49:11.320 --> 00:49:15.660
This is another one where it is relatively new.


00:49:15.660 --> 00:49:17.420
So there's not a whole lot of documentation,


00:49:17.420 --> 00:49:21.660
but it's a whole bunch of different Python notebooks,


00:49:21.660 --> 00:49:23.060
Jupyter notebooks, I mean.


00:49:23.060 --> 00:49:25.580
And like one of the things I think is interesting


00:49:25.580 --> 00:49:27.260
is from a forecasting perspective,


00:49:27.260 --> 00:49:30.340
you can use Profit, but use the same API


00:49:30.340 --> 00:49:35.340
and use Sarama, I think, Sarama, and a whole winners,


00:49:35.340 --> 00:49:37.740
as well as some other ensemble models.


00:49:37.740 --> 00:49:41.100
You can back test, you can tune your hyperparameters.


00:49:41.100 --> 00:49:44.620
And then you can also, it's got several of these other


00:49:44.620 --> 00:49:48.340
algorithms for change point detection.


00:49:48.340 --> 00:49:50.900
And a lot of this, like I said,


00:49:50.900 --> 00:49:53.620
I'm not an expert on the math,


00:49:53.620 --> 00:49:56.140
but I am interested in how you figure out


00:49:56.140 --> 00:49:58.900
how to take these tools and apply them


00:49:58.900 --> 00:50:00.780
to those real world business problems.


00:50:00.780 --> 00:50:03.380
And so I think it's really great when we have


00:50:03.380 --> 00:50:04.780
some of these libraries out there


00:50:04.780 --> 00:50:06.780
that are developed by really smart people


00:50:06.780 --> 00:50:08.660
that do understand the state of the art,


00:50:08.660 --> 00:50:11.300
that can maybe make it a little simpler for others


00:50:11.300 --> 00:50:13.460
to apply to their own unique challenges.


00:50:13.460 --> 00:50:17.180
- Yeah, this looks really nice to bundle these all together.


00:50:17.180 --> 00:50:22.180
What's a type of problem you might answer with this?


00:50:22.180 --> 00:50:26.380
- I think, so one example could be,


00:50:26.380 --> 00:50:30.100
help me figure out what my blog or my website traffic


00:50:30.100 --> 00:50:32.780
is gonna look like in six months from now.


00:50:32.780 --> 00:50:36.820
So I need to figure out, do I need to resize my servers


00:50:36.820 --> 00:50:41.820
or upgrade my disk space or--


00:50:41.820 --> 00:50:44.500
- What's my AWS bandwidth bill gonna be?


00:50:44.500 --> 00:50:45.500
- Exactly.


00:50:45.500 --> 00:50:48.740
The other one that I think


00:50:48.740 --> 00:50:51.060
it's probably used a lot in inventory.


00:50:51.060 --> 00:50:52.460
So trying to figure out,


00:50:52.460 --> 00:50:54.540
okay, what do I think sales is gonna look like?


00:50:54.540 --> 00:50:56.980
What do I need to reorder


00:50:56.980 --> 00:50:59.460
so that I actually have enough product


00:50:59.460 --> 00:51:01.220
so that we don't stock out?


00:51:01.220 --> 00:51:05.100
I think those are some pretty common use cases.


00:51:05.100 --> 00:51:09.840
A lot of the examples here are the airline flight data.


00:51:09.840 --> 00:51:13.260
So anything that you have that's over a period of time,


00:51:13.260 --> 00:51:17.080
typically kind of on a daily basis over multiple years,


00:51:17.080 --> 00:51:18.780
you can then start to forecast out


00:51:18.780 --> 00:51:22.860
what those future numbers would look like.


00:51:22.860 --> 00:51:25.280
- Then you have this magic prediction power


00:51:25.280 --> 00:51:26.480
for the executives.


00:51:26.480 --> 00:51:28.760
- Exactly, and I think what's interesting about it


00:51:28.760 --> 00:51:31.720
is most of these, I think most times


00:51:31.720 --> 00:51:33.900
when people do prediction in Excel,


00:51:33.900 --> 00:51:35.580
let's kind of put the numbers in there


00:51:35.580 --> 00:51:38.740
and kind of do your linear line.


00:51:38.740 --> 00:51:41.980
But these tend to give you more error bars


00:51:41.980 --> 00:51:43.460
so you can give a range.


00:51:43.460 --> 00:51:46.300
So I think a prediction like this is much more valuable


00:51:46.300 --> 00:51:50.340
when you say it could be between 100 and 110


00:51:50.340 --> 00:51:53.940
versus it's gonna be 101.5.


00:51:53.940 --> 00:51:55.060
And when you do that,


00:51:55.060 --> 00:51:58.860
it conveys a lot more precision than is really there.


00:51:58.860 --> 00:52:01.380
- Yeah, that makes a lot of sense.


00:52:01.380 --> 00:52:03.780
Comment from the live stream, Sam Morley says,


00:52:03.780 --> 00:52:05.740
When I was experimenting with time series data,


00:52:05.740 --> 00:52:07.060
I managed to get better results


00:52:07.060 --> 00:52:09.780
with a fairly simple naive Sarma model


00:52:09.780 --> 00:52:11.580
than I did using profit.


00:52:11.580 --> 00:52:14.940
- Yep, and I think that's exactly what this article,


00:52:14.940 --> 00:52:16.740
I don't know if he's read this article,


00:52:16.740 --> 00:52:20.700
but this, the article from Dr. Cotton,


00:52:20.700 --> 00:52:22.300
that's essentially what he says


00:52:22.300 --> 00:52:26.300
is some of the more simple models did outperform profit.


00:52:26.300 --> 00:52:28.380
- Yeah, interesting.


00:52:28.380 --> 00:52:31.780
Cool, cool.


00:52:31.780 --> 00:52:34.460
All right, Brian, is that it for all of our items?


00:52:34.460 --> 00:52:35.820
- It is.


00:52:35.820 --> 00:52:38.980
- Got any extra stuff you want to throw out there?


00:52:38.980 --> 00:52:41.940
- Oh, I just had a, just a quick one.


00:52:41.940 --> 00:52:44.540
Somebody on Twitter last week asked,


00:52:44.540 --> 00:52:46.620
why did I write a second edition of the book?


00:52:46.620 --> 00:52:49.900
And so I thought, well, that's a reasonable question.


00:52:49.900 --> 00:52:52.460
So at pytestbook.com, you can go


00:52:52.460 --> 00:52:55.500
and I've added a, why a second edition section.


00:52:55.500 --> 00:52:56.820
So you can go read that.


00:52:56.820 --> 00:52:59.020
- Your built-in fixtures, new flags,


00:52:59.020 --> 00:53:03.260
package scope features, f-strings, types,


00:53:03.260 --> 00:53:04.940
all sorts of good things are available


00:53:04.940 --> 00:53:06.660
that weren't available then, right?


00:53:06.660 --> 00:53:09.660
- Yep, yeah, there's all sorts of reasons.


00:53:09.660 --> 00:53:11.460
- Always good to see Pathlib there.


00:53:11.460 --> 00:53:12.380
I love Pathlib.


00:53:12.380 --> 00:53:15.180
It makes my life so much easier when dealing with files.


00:53:15.180 --> 00:53:17.420
- I finally made the move.


00:53:17.420 --> 00:53:21.580
I put down OS.path and I'm now all about the Pathlib.


00:53:21.580 --> 00:53:22.400
Loving it.


00:53:22.400 --> 00:53:23.460
- That's good.


00:53:23.460 --> 00:53:24.540
- Yeah.


00:53:24.540 --> 00:53:26.540
Chris, anything else you want to throw out there?


00:53:26.540 --> 00:53:28.820
- I was just going to throw out one other,


00:53:28.820 --> 00:53:33.820
I was doing some research for working with units of measure.


00:53:33.820 --> 00:53:38.100
And there's a library called UNIT.


00:53:38.100 --> 00:53:40.180
- U-N-Y-T.


00:53:40.180 --> 00:53:43.760
- U-N-Y-T that allows you to do things


00:53:43.760 --> 00:53:47.380
like convert kilometers to miles,


00:53:47.380 --> 00:53:49.220
but it works with NumPy.


00:53:49.220 --> 00:53:51.940
It works with all the scientific stack.


00:53:51.940 --> 00:53:54.980
And that was, I hadn't heard of that one.


00:53:54.980 --> 00:53:56.300
I thought it was kind of interesting


00:53:56.300 --> 00:53:57.500
and wanted to put that out there.


00:53:57.500 --> 00:54:00.660
and next time you need to actually do something with units


00:54:00.660 --> 00:54:02.780
and convert back and forth,


00:54:02.780 --> 00:54:03.980
might wanna consider that.


00:54:03.980 --> 00:54:04.820
And then the other-- - Yeah, it looks like


00:54:04.820 --> 00:54:08.460
there's a lot of like physics and chemistry type things


00:54:08.460 --> 00:54:09.900
like the mass of the earth,


00:54:09.900 --> 00:54:12.060
the radius of the earth as constants,


00:54:12.060 --> 00:54:14.140
probably pi and E and all those things.


00:54:14.140 --> 00:54:15.380
- Yes, exactly.


00:54:15.380 --> 00:54:17.820
And I think it's, when you start getting into it,


00:54:17.820 --> 00:54:20.860
there's probably a temptation just to code it all yourself,


00:54:20.860 --> 00:54:22.340
just put those constants in there.


00:54:22.340 --> 00:54:24.720
But when it starts to get more complicated,


00:54:24.720 --> 00:54:27.880
I think something like this could be really useful.


00:54:27.880 --> 00:54:30.760
And then there's another approach called Pint,


00:54:30.760 --> 00:54:33.720
which also works, there we go,


00:54:33.720 --> 00:54:35.320
which also works with units


00:54:35.320 --> 00:54:38.000
and it has a little bit different approach.


00:54:38.000 --> 00:54:40.560
And so I think it's good to take a look at both of them.


00:54:40.560 --> 00:54:41.520
And if you have a need,


00:54:41.520 --> 00:54:43.920
then you can decide which API is gonna work best


00:54:43.920 --> 00:54:45.880
for your unique situation.


00:54:45.880 --> 00:54:46.720
- Yeah, that's cool.


00:54:46.720 --> 00:54:48.920
I haven't looked at unit, but I love Pint.


00:54:48.920 --> 00:54:51.160
And I think the name is so good.


00:54:51.160 --> 00:54:52.000
- It is.


00:54:52.000 --> 00:54:54.160
- Because my wife asked me like,


00:54:54.160 --> 00:54:56.480
how many ounces are in a pound


00:54:56.480 --> 00:54:58.760
or how many pints are in a liter?


00:54:58.760 --> 00:55:01.400
I'll be like, or even in, I don't know,


00:55:01.400 --> 00:55:02.680
a quart or vice versa.


00:55:02.680 --> 00:55:04.440
I'm like, I have no idea.


00:55:04.440 --> 00:55:07.640
These are such messed up volume measures.


00:55:07.640 --> 00:55:09.560
And so it's like, here's the thing that takes the thing


00:55:09.560 --> 00:55:11.240
you don't really know about


00:55:11.240 --> 00:55:13.400
and allows you to convert it to the others in a safe way.


00:55:13.400 --> 00:55:14.240
It's good.


00:55:14.240 --> 00:55:15.640
- Exactly.


00:55:15.640 --> 00:55:17.380
- I got one more quick extra throughout as well


00:55:17.380 --> 00:55:18.220
for you, Chris there.


00:55:18.220 --> 00:55:20.160
I forgot to mention that you are the author


00:55:20.160 --> 00:55:23.000
of the "Move from Excel to Python"


00:55:23.000 --> 00:55:24.920
with Pandas course over at Talk Python Trainings,


00:55:24.920 --> 00:55:26.680
which is a really popular course.


00:55:26.680 --> 00:55:30.240
Basically, it's a intro to Pandas course


00:55:30.240 --> 00:55:33.160
disguised as solving problems you might with Excel, right?


00:55:33.160 --> 00:55:35.280
- Exactly, yeah, yeah, no, thanks.


00:55:35.280 --> 00:55:37.640
And I've had a lot of good feedback from folks.


00:55:37.640 --> 00:55:41.080
So hopefully it's interesting to the listeners


00:55:41.080 --> 00:55:42.920
that haven't had a chance to check it out.


00:55:42.920 --> 00:55:44.080
- Yeah. - I might have to buy that


00:55:44.080 --> 00:55:44.920
for my boss.


00:55:44.920 --> 00:55:47.280
(laughing)


00:55:47.280 --> 00:55:49.880
- Maybe you can get that discount code.


00:55:49.880 --> 00:55:52.320
- Yeah, yeah, I'll get you the discount code.


00:55:52.320 --> 00:55:53.440
All right, you ready for some jokes?


00:55:53.440 --> 00:55:56.400
My Twitter came back so I can show the Twitter joke now.


00:55:56.400 --> 00:55:57.240
- Yeah.


00:55:57.240 --> 00:55:58.320
- All right.


00:55:58.320 --> 00:56:03.320
So Dean, who is often,


00:56:03.320 --> 00:56:06.160
but I don't see him today on the live stream,


00:56:06.160 --> 00:56:08.320
sent a joke over and said,


00:56:08.320 --> 00:56:12.060
"Do you know how they say async in Italian?"


00:56:12.060 --> 00:56:15.600
Asyncio, or asyncio.


00:56:15.600 --> 00:56:18.040
Which I thought was a pretty good one.


00:56:18.040 --> 00:56:20.120
Asyncio, asyncio.


00:56:20.120 --> 00:56:20.980
I love Italian.


00:56:20.980 --> 00:56:26.900
All right. You guys got another one out there? I saw one in the notes, another joke, but


00:56:26.900 --> 00:56:28.400
I didn't see you put it there.


00:56:28.400 --> 00:56:34.940
I've got one. So does anyone know why cryptocurrency engineers aren't allowed to vote?


00:56:34.940 --> 00:56:36.980
No, I don't know.


00:56:36.980 --> 00:56:37.980
Because they're miners.


00:56:37.980 --> 00:56:41.980
That's a good dad joke.


00:56:41.980 --> 00:56:44.980
Yeah, it is.


00:56:44.980 --> 00:56:48.500
>> Absolutely. Well, on that high note,


00:56:48.500 --> 00:56:51.280
let's call it a show. What do you say?


00:56:51.280 --> 00:56:51.860
>> Yeah.


00:56:51.860 --> 00:56:53.460
>> Brian, thanks as always.


00:56:53.460 --> 00:56:54.700
Chris, thanks for joining us this time.


00:56:54.700 --> 00:56:56.580
>> Thank you very much. Really appreciate it.


00:56:56.580 --> 00:56:58.540
>> Yeah. Bye, everyone.


00:56:58.540 --> 00:57:08.540
[BLANK_AUDIO]

