WEBVTT

00:00:00.000 --> 00:00:02.320
Hello, YouTube. Hello, Brian. Hello, Calvin.


00:00:02.320 --> 00:00:03.720
Hey, hello.


00:00:03.720 --> 00:00:05.680
Hey, it's fantastic to have you both here.


00:00:05.680 --> 00:00:08.360
I'm so excited to do another show.


00:00:08.360 --> 00:00:12.120
So without further ado, let's kick it off.


00:00:12.120 --> 00:00:16.560
Hello and welcome to Python Bytes, where we deliver Python news


00:00:16.560 --> 00:00:18.400
and headlines directly to your earbud.


00:00:18.400 --> 00:00:24.640
This is episode 272, recorded February 23rd, 2022.


00:00:24.640 --> 00:00:25.760
I'm Michael Kennedy.


00:00:25.760 --> 00:00:27.280
And I'm Brian Okken.


00:00:27.280 --> 00:00:29.080
And I'm Calvin Hendryx-Parker.


00:00:29.080 --> 00:00:31.640
Hey, Calvin, so good to have you here.


00:00:31.640 --> 00:00:32.540
- I'm excited to be back.


00:00:32.540 --> 00:00:33.800
- Yeah, it's great to have you back.


00:00:33.800 --> 00:00:35.160
I also wanna say this episode is brought to you


00:00:35.160 --> 00:00:37.080
by Fusion Auth, a new sponsor.


00:00:37.080 --> 00:00:39.240
Thank you so much to them for supporting the show.


00:00:39.240 --> 00:00:41.840
Check them out at pythonbytes.fm/fusionauth.


00:00:41.840 --> 00:00:43.080
More on that later.


00:00:43.080 --> 00:00:45.480
Calvin, it's been a while since you've been here,


00:00:45.480 --> 00:00:48.400
but you're a frequent guest.


00:00:48.400 --> 00:00:52.000
How about just tell quickly people about yourself.


00:00:52.000 --> 00:00:55.480
- Sure, I've been a almost, I guess,


00:00:55.480 --> 00:00:57.980
nearly lifelong Pythonista at this point,


00:00:57.980 --> 00:01:01.060
going back a long ways, but started a company back in 1999


00:01:01.060 --> 00:01:03.900
called Six Feet Up, where I am the CTO and co-founder


00:01:03.900 --> 00:01:06.500
and we are all things Python and all things cloud.


00:01:06.500 --> 00:01:08.620
So we're doing some cool stuff there.


00:01:08.620 --> 00:01:10.660
I've been very involved in some open source projects


00:01:10.660 --> 00:01:13.620
like the Plone Foundation for the Plone CMS.


00:01:13.620 --> 00:01:16.620
We're very involved in Django as well,


00:01:16.620 --> 00:01:18.740
sponsoring the Django Software Foundation.


00:01:18.740 --> 00:01:20.660
So super excited to be involved in open source


00:01:20.660 --> 00:01:22.180
and all things Python.


00:01:22.180 --> 00:01:24.500
- Right on, so if I was a company, a person said,


00:01:24.500 --> 00:01:26.420
"I need a Python app, I need some help with it,"


00:01:26.420 --> 00:01:27.600
or maybe someone even build it,


00:01:27.600 --> 00:01:30.120
I might reach out to you all and you might build it for me.


00:01:30.120 --> 00:01:31.400
- Yeah, no, we'd love to talk


00:01:31.400 --> 00:01:33.240
about those kinds of opportunities.


00:01:33.240 --> 00:01:35.880
The harder and more challenging, the better.


00:01:35.880 --> 00:01:37.620
- Yeah, those are the fun ones.


00:01:37.620 --> 00:01:39.400
- Yeah, I agree.


00:01:39.400 --> 00:01:40.440
I completely agree.


00:01:40.440 --> 00:01:42.480
- I like easy.


00:01:42.480 --> 00:01:43.720
- All right.


00:01:43.720 --> 00:01:47.000
Well, I think this one you got here


00:01:47.000 --> 00:01:49.760
in this for the first one, Brian, maybe not so easy.


00:01:49.760 --> 00:01:50.600
- Not so easy.


00:01:50.600 --> 00:01:52.720
- You're mocking, why is it not working?


00:01:52.720 --> 00:01:54.080
- Well, you're mocks.


00:01:54.080 --> 00:01:56.780
So this is a great, actually, this is a rabbit hole,


00:01:56.780 --> 00:01:59.580
but well, mocks are a rabbit hole.


00:01:59.580 --> 00:02:03.220
So Ned Batchelder, great guy wrote,


00:02:03.220 --> 00:02:05.180
he writes a lot of great stuff,


00:02:05.180 --> 00:02:08.380
but also maintains coverage.


00:02:08.380 --> 00:02:10.420
But he wrote an article called,


00:02:10.420 --> 00:02:12.820
"Why Your Mocks Still Don't Work,"


00:02:12.820 --> 00:02:17.700
which is a reference to an earlier article he wrote


00:02:17.700 --> 00:02:20.060
called "Why Your Mock Doesn't Work,"


00:02:20.060 --> 00:02:22.280
and he wrote that in 2019.


00:02:22.280 --> 00:02:24.700
So if you haven't read this first,


00:02:24.700 --> 00:02:26.860
So I'm going to go back and recommend both of these.


00:02:26.860 --> 00:02:29.420
So why your mocks don't work,


00:02:29.420 --> 00:02:34.420
or why your mock doesn't work is an excellent article.


00:02:34.420 --> 00:02:37.660
It starts talking about just like,


00:02:37.660 --> 00:02:39.880
well, to think about how mocks work,


00:02:39.880 --> 00:02:43.020
you really have to understand Python name spaces


00:02:43.020 --> 00:02:46.660
and names and how imports work and all of that stuff.


00:02:46.660 --> 00:02:49.120
And it, maybe you don't think you should have to,


00:02:49.120 --> 00:02:50.380
but you kind of do.


00:02:50.380 --> 00:02:54.480
- So imports, those are not entirely obvious.


00:02:54.480 --> 00:02:57.920
Like the way that that happens compared to other languages,


00:02:57.920 --> 00:02:59.460
right, where you just say, I'm using this library.


00:02:59.460 --> 00:03:02.400
There's like, it's way more direct.


00:03:02.400 --> 00:03:05.860
- So Ned starts off with like this really great example


00:03:05.860 --> 00:03:09.800
of just basically two variables, X and Y pointing to a


00:03:09.800 --> 00:03:12.760
number and if you assign to each other,


00:03:12.760 --> 00:03:14.560
you don't really point at another variable.


00:03:14.560 --> 00:03:17.240
You point at the thing that the variable is pointing to,


00:03:17.240 --> 00:03:20.520
if you assign X to Y or Y to X or something.


00:03:20.520 --> 00:03:24.420
And this does have to do with importing because


00:03:24.420 --> 00:03:27.580
the names that you import are just kind of variable names


00:03:27.580 --> 00:03:28.920
that point to something.


00:03:28.920 --> 00:03:33.880
So he talks about namespaces and where things point to,


00:03:33.880 --> 00:03:35.980
talks about importing and the difference,


00:03:35.980 --> 00:03:40.980
mostly the difference between from foo import thing


00:03:40.980 --> 00:03:45.740
instead of import foo and reference it as foo thing.


00:03:45.740 --> 00:03:48.700
Those are completely different names


00:03:48.700 --> 00:03:51.680
within your Python application.


00:03:51.680 --> 00:03:53.940
So walks through that, talks about it


00:03:53.940 --> 00:03:58.780
and why, so if you've got a value from one module


00:03:58.780 --> 00:04:00.480
pointing to an original value,


00:04:00.480 --> 00:04:04.440
and then another one pointing to the same thing,


00:04:04.440 --> 00:04:06.300
if you mock the wrong place,


00:04:06.300 --> 00:04:09.840
you're not going to get what you think is right.


00:04:09.840 --> 00:04:14.840
So basically, and this is terrible to discuss over podcast.


00:04:14.840 --> 00:04:17.040
So I recommend looking at this


00:04:17.040 --> 00:04:21.340
because it's a really great example of how mocks work


00:04:21.340 --> 00:04:24.960
and why they act the way they do.


00:04:24.960 --> 00:04:27.460
And you'll be able to fix a lot of your problems.


00:04:27.460 --> 00:04:29.180
So this is a good recommendation.


00:04:29.180 --> 00:04:32.060
But the one that we're trying to talk about right now,


00:04:32.060 --> 00:04:33.860
why your mock still doesn't work,


00:04:33.860 --> 00:04:37.340
has to do with this cool decorator thing that mock,


00:04:37.340 --> 00:04:40.560
I don't remember when a unit test mock added this,


00:04:40.560 --> 00:04:42.500
but there's a patch decorator.


00:04:42.500 --> 00:04:45.980
Actually, I'm gonna link to the show notes somewhere.


00:04:45.980 --> 00:04:49.540
We talk about the patch decorator and it's pretty neat.


00:04:49.540 --> 00:04:51.500
Actually, I'm jumping all around, sorry.


00:04:51.500 --> 00:04:55.180
But if you just say like patch something,


00:04:55.180 --> 00:04:57.520
what happens on your test,


00:04:57.520 --> 00:04:59.860
like in this example, he's got two,


00:04:59.860 --> 00:05:04.680
you got a patch cool feature dot expensive preparation


00:05:04.680 --> 00:05:07.560
and patch cool feature dot logger.


00:05:07.560 --> 00:05:09.040
And you're not patching it with anything


00:05:09.040 --> 00:05:10.040
with this decorator.


00:05:10.040 --> 00:05:13.540
What happens is you get these like other variables


00:05:13.540 --> 00:05:15.900
that you can add as parameters,


00:05:15.900 --> 00:05:17.900
mock prep and mock logger,


00:05:17.900 --> 00:05:19.700
that you can use those to change it.


00:05:19.700 --> 00:05:23.420
You can change the behavior, you can use asserts on it.


00:05:23.420 --> 00:05:27.660
You can change the return values on these through that.


00:05:27.660 --> 00:05:30.100
It's just a, this is a way to get a handle


00:05:30.100 --> 00:05:31.180
into your mock object.


00:05:31.180 --> 00:05:32.140
It's pretty cool.


00:05:32.140 --> 00:05:38.060
And, but the trick is they have to be in the right order.


00:05:38.060 --> 00:05:40.720
And this example looks like it's fine,


00:05:40.720 --> 00:05:43.420
but you've got logger at the bottom decorator,


00:05:43.420 --> 00:05:45.080
which is really the first,


00:05:45.080 --> 00:05:48.080
and prep as the above decorator.


00:05:48.080 --> 00:05:49.720
- It's the first one, Brian.


00:05:49.720 --> 00:05:52.120
It says the first line says this prep one.


00:05:52.120 --> 00:05:53.720
The second one says logger.


00:05:53.720 --> 00:05:55.840
- Yeah, but that's not the way it happens.


00:05:55.840 --> 00:06:00.840
So the catch here and the punch line is it goes,


00:06:00.840 --> 00:06:04.440
when you're reading decorators, it goes bottom up


00:06:04.440 --> 00:06:06.320
and left to right.


00:06:06.320 --> 00:06:07.800
- Like onions.


00:06:07.800 --> 00:06:08.680
- Sure.


00:06:08.680 --> 00:06:10.920
- Right, like there's layers around your code


00:06:10.920 --> 00:06:13.600
and like the inner layers, the first one it sees.


00:06:13.600 --> 00:06:17.120
The second, so if you, the way he has it originally written


00:06:17.120 --> 00:06:19.120
it just fails, it doesn't work.


00:06:19.120 --> 00:06:21.200
The second punchline is,


00:06:21.200 --> 00:06:25.120
unless you've got a real good reason to use AutoSpec


00:06:25.120 --> 00:06:27.240
because AutoSpec would have caught this problem


00:06:27.240 --> 00:06:28.080
like right away.


00:06:28.080 --> 00:06:31.780
And what AutoSpec does is it says the thing


00:06:31.780 --> 00:06:33.960
that you're mocking, you have to call it


00:06:33.960 --> 00:06:36.520
with the same interface that the thing had


00:06:36.520 --> 00:06:37.520
in the first place.


00:06:39.240 --> 00:06:43.820
And so if you've got a class or a module


00:06:43.820 --> 00:06:46.880
that has a function in it, you can't call other functions.


00:06:46.880 --> 00:06:49.480
Whereas normal mocks, you can call whatever you want.


00:06:49.480 --> 00:06:52.800
So the default is free for all.


00:06:52.800 --> 00:06:55.360
What you really should do is auto spec equals true.


00:06:55.360 --> 00:06:58.000
And really a lot of people, me included,


00:06:58.000 --> 00:07:00.120
wish that that was the default to begin with,


00:07:00.120 --> 00:07:02.600
but for historical reasons, it can't be


00:07:02.600 --> 00:07:04.160
because it would break other stuff.


00:07:04.160 --> 00:07:05.200
But anyway.


00:07:05.200 --> 00:07:06.040
- Yeah.


00:07:07.040 --> 00:07:09.900
- Yeah, if it's not the default to start with,


00:07:09.900 --> 00:07:12.680
if you put that in to say now only behave


00:07:12.680 --> 00:07:16.100
as if you are the thing that I say you're pretending to be,


00:07:16.100 --> 00:07:17.660
that's gonna crash a ton of stuff.


00:07:17.660 --> 00:07:18.700
- Yeah. - Yeah.


00:07:18.700 --> 00:07:21.100
- And then the third and final punchline is


00:07:21.100 --> 00:07:23.340
just don't use mocks.


00:07:23.340 --> 00:07:26.000
(both laughing)


00:07:26.000 --> 00:07:29.500
He mentions it in both articles,


00:07:29.500 --> 00:07:31.440
avoid using mocks if you can.


00:07:31.440 --> 00:07:33.700
- Absolutely.


00:07:33.700 --> 00:07:34.700
Felix out in the audience says,


00:07:34.700 --> 00:07:37.020
with a lot of power, this auto spec,


00:07:37.020 --> 00:07:38.340
very much like Yoda would put it.


00:07:38.340 --> 00:07:39.180
I love it.


00:07:39.180 --> 00:07:41.300
All right.


00:07:41.300 --> 00:07:42.120
- What do we got next?


00:07:42.120 --> 00:07:44.660
- Thoughts on mocking real quick before we move on.


00:07:44.660 --> 00:07:48.100
- We are just diving into that


00:07:48.100 --> 00:07:50.300
and I don't do a lot of the test work myself.


00:07:50.300 --> 00:07:52.540
So I'm sure Brian is the super expert


00:07:52.540 --> 00:07:54.940
on all things pytest, of course.


00:07:54.940 --> 00:07:59.380
So I don't have a huge opinion here on specific mocking,


00:07:59.380 --> 00:08:01.560
although I think it is important for folks to realize


00:08:01.560 --> 00:08:04.720
that yeah, decorators go from like that closest


00:08:04.720 --> 00:08:05.780
to the function out.


00:08:05.780 --> 00:08:07.840
It was an important call out there.


00:08:07.840 --> 00:08:08.680
- Yeah.


00:08:08.680 --> 00:08:11.340
The other one was from thing import something


00:08:11.340 --> 00:08:13.260
and then you patch the thing inside there.


00:08:13.260 --> 00:08:15.540
It's kind of that, that I actually, that was news to me.


00:08:15.540 --> 00:08:17.380
That's very interesting.


00:08:17.380 --> 00:08:18.220
All right.


00:08:18.220 --> 00:08:21.700
Also news to me, please, please tell me about this.


00:08:21.700 --> 00:08:24.780
Chris may, thank you, Chris May for sending this over.


00:08:24.780 --> 00:08:26.060
And wow.


00:08:26.060 --> 00:08:29.740
I don't know if you've heard about please folks, PLS


00:08:29.740 --> 00:08:33.080
as an LS replacement for Linux and macOS,


00:08:33.080 --> 00:08:34.560
but wow, this thing is cool.


00:08:34.560 --> 00:08:38.600
Was this, have either of you heard about this?


00:08:38.600 --> 00:08:40.640
- Not until today, and I went and installed it


00:08:40.640 --> 00:08:42.400
as part of my demo so I could see it


00:08:42.400 --> 00:08:44.400
'cause it looks pretty darn awesome.


00:08:44.400 --> 00:08:46.040
- So this is an LS replacement,


00:08:46.040 --> 00:08:48.060
and I know there are other LS replacements


00:08:48.060 --> 00:08:50.240
that already exist so you can do more things,


00:08:50.240 --> 00:08:53.360
but this is a developer-focused one written in Python


00:08:53.360 --> 00:08:55.080
that's pretty darn awesome.


00:08:55.080 --> 00:08:58.680
So if you go look at the image I linked to


00:08:58.680 --> 00:09:00.640
or just go check out the site,


00:09:00.640 --> 00:09:02.000
you can see that if you say,


00:09:02.000 --> 00:09:04.580
so I've aliased LS to PLS.


00:09:04.580 --> 00:09:07.000
And if I just say LS,


00:09:07.000 --> 00:09:11.680
it shows you the contents of your directory,


00:09:11.680 --> 00:09:12.520
folders on top,


00:09:12.520 --> 00:09:15.800
and then it has icons for the types of files that they are.


00:09:15.800 --> 00:09:18.240
So I did an LS, there's a git ignore,


00:09:18.240 --> 00:09:19.800
so it has a git branch icon.


00:09:19.800 --> 00:09:21.540
There's a license with the law.


00:09:21.540 --> 00:09:22.760
There's a markdown file.


00:09:22.760 --> 00:09:24.760
There's a Python file, the Python logo,


00:09:24.760 --> 00:09:25.680
but it goes beyond that.


00:09:25.680 --> 00:09:28.520
Like it understands your git ignore,


00:09:28.520 --> 00:09:30.840
and the files that are considered hidden


00:09:30.840 --> 00:09:33.480
are the gitignored ones as well.


00:09:33.480 --> 00:09:34.440
And it won't show you,


00:09:34.440 --> 00:09:37.220
even if you do like a hidden file listing,


00:09:37.220 --> 00:09:42.220
it won't show you things like the .ts_store on macOS


00:09:42.220 --> 00:09:46.680
because that's in the gitignore.


00:09:46.680 --> 00:09:49.140
So the structure that it gives you is related to that.


00:09:49.140 --> 00:09:52.360
Also for Python, if you have a virtual environment,


00:09:52.360 --> 00:09:54.440
it'll treat that directory as hidden.


00:09:54.440 --> 00:09:56.080
And because the directory is hidden,


00:09:56.080 --> 00:09:59.400
like it's sort of suppressed in its visibility.


00:09:59.400 --> 00:10:01.700
So there's really cool features around this


00:10:01.700 --> 00:10:05.160
that have to do with basically saying,


00:10:05.160 --> 00:10:06.120
all right, you're a developer,


00:10:06.120 --> 00:10:09.920
you're listing files that are probably developer-like.


00:10:09.920 --> 00:10:11.980
Now what, now what do we do?


00:10:11.980 --> 00:10:14.600
So another part that's cool is you can do


00:10:14.600 --> 00:10:19.400
an please --details, which I alias to L


00:10:19.400 --> 00:10:21.520
'cause that's the LS-like equivalent.


00:10:21.520 --> 00:10:24.120
And in this world, it shows you the same types of things,


00:10:24.120 --> 00:10:28.800
but it also shows you the size in human terms.


00:10:28.800 --> 00:10:33.080
So instead of like 101121171112,


00:10:33.080 --> 00:10:36.040
it would say that's 10.2 gigabytes, which is nice,


00:10:36.040 --> 00:10:38.200
but it also shows you the get status in the listing.


00:10:38.200 --> 00:10:42.960
So like it has a dash M next to a file I modified and so on.


00:10:42.960 --> 00:10:44.360
What do you all think of this?


00:10:44.360 --> 00:10:47.440
- I think it's excellent.


00:10:47.440 --> 00:10:49.920
I tried to use it and failed


00:10:49.920 --> 00:10:52.240
and you helped me understand why,


00:10:52.240 --> 00:10:55.340
because you have to have fonts,


00:10:55.340 --> 00:10:57.340
like some special fonts installed, right?


00:10:57.340 --> 00:11:00.140
- So one of the questions when I posted this tweet


00:11:00.140 --> 00:11:03.260
was people like, "How does it have custom icons?


00:11:03.260 --> 00:11:04.980
"What magic is this?"


00:11:04.980 --> 00:11:06.140
'Cause this'll work over,


00:11:06.140 --> 00:11:07.940
like if I SSH into somewhere and install,


00:11:07.940 --> 00:11:09.180
please on the server,


00:11:09.180 --> 00:11:12.460
long as my local terminal is set up correctly,


00:11:12.460 --> 00:11:13.300
this will work.


00:11:13.300 --> 00:11:14.340
And they're like, "How does this work?"


00:11:14.340 --> 00:11:16.840
Well, the way it works is you have to have


00:11:16.840 --> 00:11:19.240
your terminal font set to a nerd font.


00:11:19.240 --> 00:11:21.760
So I've talked about nerd fonts before,


00:11:21.760 --> 00:11:24.900
but all these nerd fonts have all these special icons


00:11:24.900 --> 00:11:25.740
in them.


00:11:25.740 --> 00:11:29.520
And long as your active terminal font is one


00:11:29.520 --> 00:11:31.860
of the nerd fonts, then you get all these cool behaviors.


00:11:31.860 --> 00:11:35.420
If you don't, you get squares, which are less than awesome.


00:11:35.420 --> 00:11:40.400
- My only complaint with this is that I wish it would have


00:11:40.400 --> 00:11:43.080
emulated more of the flags from standard LS


00:11:43.080 --> 00:11:44.800
so that it just kind of work alike.


00:11:44.800 --> 00:11:47.400
So I installed it and the first thing I did was like,


00:11:47.400 --> 00:11:48.960
please dash AL.


00:11:48.960 --> 00:11:49.800
- Yeah.


00:11:49.800 --> 00:11:51.800
- Yeah, no L flag.


00:11:51.800 --> 00:11:52.640
- Yeah, that's what it is, yeah.


00:11:52.640 --> 00:11:54.700
- Yeah, I didn't know what that was.


00:11:54.700 --> 00:11:55.940
- Yeah, it's kind of its own thing.


00:11:55.940 --> 00:11:57.220
That's why I did the alias on it.


00:11:57.220 --> 00:11:59.860
And I'm like, okay, well, I'll just, I'll do these things.


00:11:59.860 --> 00:12:01.020
Another thing that's interesting,


00:12:01.020 --> 00:12:03.320
it has a, you can set up these,


00:12:03.320 --> 00:12:09.420
these YAML configuration files that control how it looks.


00:12:09.420 --> 00:12:12.700
And then you can put those kind of like Node.js does


00:12:12.700 --> 00:12:13.560
with Node modules.


00:12:13.560 --> 00:12:16.340
Like you can put it at different, or the project.json,


00:12:16.340 --> 00:12:18.340
you can put it at different levels.


00:12:18.340 --> 00:12:21.060
And if you go into a certain project


00:12:21.060 --> 00:12:23.020
that you've had of a configuration file


00:12:23.020 --> 00:12:25.740
on there somewhere, it'll pick up that configuration


00:12:25.740 --> 00:12:28.860
and then use that to like customize how it looks for those.


00:12:28.860 --> 00:12:31.580
So that's kind of an interesting thing as well.


00:12:31.580 --> 00:12:33.020
So anyway. - That is awesome.


00:12:33.020 --> 00:12:35.660
I mean, we need more like fun stuff


00:12:35.660 --> 00:12:37.140
in our terminals as developers.


00:12:37.140 --> 00:12:39.220
I totally love this.


00:12:39.220 --> 00:12:41.660
This is absolutely the way to get people hooked


00:12:41.660 --> 00:12:44.340
on using the terminal in the console.


00:12:44.340 --> 00:12:46.780
- Yes, and I was thinking about like server management,


00:12:46.780 --> 00:12:49.140
which we'll get to later, right Calvin?


00:12:49.140 --> 00:12:49.980
- Yeah, yeah.


00:12:49.980 --> 00:12:51.300
- But if you wanna go into the server,


00:12:51.300 --> 00:12:54.540
and so I'm gonna SSH in and do a thing,


00:12:54.540 --> 00:12:58.620
like this is your entire user interface to that place.


00:12:58.620 --> 00:12:59.460
- It's your world.


00:12:59.460 --> 00:13:00.660
- Yeah, yeah, this is your world.


00:13:00.660 --> 00:13:03.900
So this is a way to bring like a little bit more


00:13:03.900 --> 00:13:07.860
UI information rather than just raw white text


00:13:07.860 --> 00:13:09.420
listing of files.


00:13:09.420 --> 00:13:12.260
I feel like there's like actually a lot of value in this.


00:13:12.260 --> 00:13:13.100
- Oh, totally.


00:13:13.100 --> 00:13:16.260
- Awesome, let's see, a Dean out in the audience


00:13:16.260 --> 00:13:18.520
and former guest.


00:13:18.520 --> 00:13:20.140
I thought my life was complete until today.


00:13:20.140 --> 00:13:23.460
I didn't know this was missing from my life, but it is.


00:13:23.460 --> 00:13:24.300
- Yes.


00:13:24.300 --> 00:13:27.220
Please more terminal stuff.


00:13:27.220 --> 00:13:28.280
- Absolutely.


00:13:28.280 --> 00:13:31.580
- Well, speaking of more terminal stuff.


00:13:31.580 --> 00:13:33.180
- Yeah. Speaking of more terminal stuff,


00:13:33.180 --> 00:13:35.380
yeah, take it away.


00:13:35.380 --> 00:13:36.220
- All right.


00:13:36.220 --> 00:13:38.540
So we over at Six Feet Up,


00:13:38.540 --> 00:13:40.860
we've been very focused on the developer experience.


00:13:40.860 --> 00:13:44.660
And so once a week we get together and talk about just,


00:13:44.660 --> 00:13:45.780
we could do a cold code review,


00:13:45.780 --> 00:13:47.700
but really it's more of a show and tell.


00:13:47.700 --> 00:13:49.940
And this is something I showed off last week


00:13:49.940 --> 00:13:51.860
at our code and review in show and tell,


00:13:51.860 --> 00:13:55.540
which is a terminal that is GPU based


00:13:55.540 --> 00:13:56.780
and written in Python.


00:13:56.780 --> 00:13:58.020
It's called KITTY.


00:13:58.020 --> 00:13:58.940
If you've not used it,


00:13:58.940 --> 00:14:01.700
it actually is a super awesome, super fast,


00:14:01.700 --> 00:14:04.020
basically, I don't know,


00:14:04.020 --> 00:14:05.980
I found it to just be a super smooth experience.


00:14:05.980 --> 00:14:08.180
And the reason I had revisited it was


00:14:08.180 --> 00:14:09.620
I'd been using Tmux forever


00:14:09.620 --> 00:14:12.020
and before that I was using Screen


00:14:12.020 --> 00:14:14.460
and I wanted to like just have the ultimate power tools


00:14:14.460 --> 00:14:18.780
available to me as a developer and as my primary mode


00:14:18.780 --> 00:14:20.340
of operation is basically hanging out


00:14:20.340 --> 00:14:22.340
in the shell or an editor all day long.


00:14:22.340 --> 00:14:23.980
So I want the best tools possible.


00:14:23.980 --> 00:14:26.860
So I'd highly recommend folks check out KITTI.


00:14:26.860 --> 00:14:29.260
It is absolutely tuned for performance.


00:14:29.260 --> 00:14:30.780
And you may ask, why the heck would I


00:14:30.780 --> 00:14:32.460
want a GPU-enabled terminal?


00:14:32.460 --> 00:14:34.420
It's just showing me text.


00:14:34.420 --> 00:14:36.860
It's because I want the most performance possible out


00:14:36.860 --> 00:14:38.900
of my system when I'm using it.


00:14:38.900 --> 00:14:41.740
And so I'm actually going to give a quick little demo here


00:14:41.740 --> 00:14:43.100
of KITTI.


00:14:43.100 --> 00:14:45.100
This is actually using PLS.


00:14:45.100 --> 00:14:45.940
- Yeah, I see it.


00:14:45.940 --> 00:14:46.760
Fantastic.


00:14:46.760 --> 00:14:47.600
- I have a right.


00:14:47.600 --> 00:14:50.040
- What is this, oh my, is this oh my posh also?


00:14:50.040 --> 00:14:51.060
What do you got for the?


00:14:51.060 --> 00:14:53.100
- Oh, for the bullet train down there.


00:14:53.100 --> 00:14:55.460
So it's actually bullet train core.


00:14:55.460 --> 00:14:56.700
It's not maintained anymore.


00:14:56.700 --> 00:14:59.900
That's probably my next venture


00:14:59.900 --> 00:15:02.500
is gonna be replacing that line with some new.


00:15:02.500 --> 00:15:03.460
Yeah, exactly.


00:15:03.460 --> 00:15:08.060
Some new system for showing my awesome prompt up there.


00:15:08.060 --> 00:15:11.100
But yeah, if you get the right fonts installed


00:15:11.100 --> 00:15:12.380
and all that, kitty supports,


00:15:12.380 --> 00:15:13.980
all that stuff seamlessly.


00:15:13.980 --> 00:15:15.540
It's very, very fast.


00:15:15.540 --> 00:15:18.660
And one really cool thing, since we're all like Pythonistas


00:15:18.660 --> 00:15:21.340
and people who are listening to this would totally relate,


00:15:21.340 --> 00:15:25.180
you can extend Kitty with kittens


00:15:25.180 --> 00:15:27.900
that are basically Python plugins for Kitty.


00:15:27.900 --> 00:15:30.260
So if you actually, I'll give you a quick example.


00:15:30.260 --> 00:15:31.580
- It's terrible.


00:15:31.580 --> 00:15:32.420
- It is, I love it.


00:15:32.420 --> 00:15:34.140
- I kind of love it actually.


00:15:34.140 --> 00:15:37.340
- So you just, you invoke Kitty with the kitten flag


00:15:37.340 --> 00:15:39.340
and say like what kitten you wanna use.


00:15:39.340 --> 00:15:40.940
In this case, I'm gonna use iCat.


00:15:40.940 --> 00:15:44.860
I'm gonna just basically echo out a Slack emoji


00:15:44.860 --> 00:15:46.860
that we use for Python.


00:15:46.860 --> 00:15:48.780
Oops.


00:15:48.780 --> 00:15:49.620
Oh.


00:15:49.620 --> 00:15:55.500
Oh no, this is gonna be like the total demo guys


00:15:55.500 --> 00:15:57.220
not being very kind to me now.


00:15:57.220 --> 00:16:00.940
- Oh, I love that your prompt has the Python version


00:16:00.940 --> 00:16:03.580
and stuff in there, that's great.


00:16:03.580 --> 00:16:06.260
- But yeah, if you're in a specific like PyEnv area,


00:16:06.260 --> 00:16:08.180
it definitely shows up.


00:16:08.180 --> 00:16:09.980
Let me just try it here.


00:16:09.980 --> 00:16:12.020
iCat, Python.


00:16:12.020 --> 00:16:13.700
Oh, there we go.


00:16:13.700 --> 00:16:15.140
So I must've just been in the wrong directory,


00:16:15.140 --> 00:16:18.180
but so you can actually show graphics on the screen.


00:16:18.180 --> 00:16:19.980
So if I want to look at an image real quick,


00:16:19.980 --> 00:16:22.100
I don't need to go to Finder and open up Preview


00:16:22.100 --> 00:16:24.260
and like do a quick look on an image.


00:16:24.260 --> 00:16:25.220
I can actually like, you know,


00:16:25.220 --> 00:16:27.180
quick look on any image I want.


00:16:27.180 --> 00:16:29.380
And one of the things I did want to show off,


00:16:29.380 --> 00:16:30.580
if I go back to the director--


00:16:30.580 --> 00:16:31.660
- For people who are listening,


00:16:31.660 --> 00:16:34.820
this looks like a full high res image in the terminal.


00:16:34.820 --> 00:16:35.660
- Yeah, yeah.


00:16:35.660 --> 00:16:36.480
- Based on a PNG.


00:16:36.480 --> 00:16:37.940
- So I used iCat, which is a kitten,


00:16:37.940 --> 00:16:40.020
to display an image directly in the terminal.


00:16:40.020 --> 00:16:42.420
And now if I wanted to do show even some coolers,


00:16:42.420 --> 00:16:43.620
'cause one of the features of KITTI


00:16:43.620 --> 00:16:46.300
is it's basically got a graphic subsystem in here.


00:16:46.300 --> 00:16:49.180
And if I wanted to like look at my markdown files,


00:16:49.180 --> 00:16:51.480
normally if I'd use bat to look at my markdown,


00:16:51.480 --> 00:16:53.420
like for the readme that's in here,


00:16:53.420 --> 00:16:56.940
you get the kind of content highlighted markdown,


00:16:56.940 --> 00:16:59.180
kind of cool, not super great.


00:16:59.180 --> 00:17:02.340
But if I do MDKAT, which is KITTI enabled,


00:17:02.340 --> 00:17:05.300
it actually leverages the KITTI subsystem here.


00:17:05.300 --> 00:17:07.900
I can actually review my markdown file


00:17:07.900 --> 00:17:09.920
with images in line.


00:17:09.920 --> 00:17:12.520
So you can see that the XKCD cartoon


00:17:12.520 --> 00:17:15.580
is actually embedded into the readme of that document.


00:17:15.580 --> 00:17:17.460
And it does a little better job of like coloring


00:17:17.460 --> 00:17:19.020
and highlighting the syntax.


00:17:19.020 --> 00:17:20.660
So if you wanna preview Markdown documents


00:17:20.660 --> 00:17:22.140
without again, not going to preview


00:17:22.140 --> 00:17:24.380
or not going to like rendering it to HTML


00:17:24.380 --> 00:17:25.620
and viewing your browser,


00:17:25.620 --> 00:17:28.060
you can actually view it right in your terminal


00:17:28.060 --> 00:17:32.020
with the images shown in line, which is super awesome.


00:17:32.020 --> 00:17:34.560
And one last thing, one more trick I'll show you.


00:17:34.560 --> 00:17:37.440
There is a kitty kitten for viewing diffs


00:17:37.440 --> 00:17:38.280
in a rich tool.


00:17:38.280 --> 00:17:41.340
So if I do git diff tool,


00:17:41.340 --> 00:17:43.980
I've configured with my .git config


00:17:43.980 --> 00:17:48.000
to configure an alternate diff tool for diff.


00:17:48.000 --> 00:17:50.420
And now I get this really beautiful,


00:17:50.420 --> 00:17:53.980
high res graphic representation of my diff, my files.


00:17:53.980 --> 00:17:55.700
So really kind of pretty.


00:17:55.700 --> 00:17:58.100
You can see there's two diffs, two different files.


00:17:58.100 --> 00:17:59.780
I can page through the different files


00:17:59.780 --> 00:18:02.500
and it shows me side by side.


00:18:02.500 --> 00:18:04.220
- Is that still in the terminal?


00:18:04.220 --> 00:18:05.060
- That is still in terminal.


00:18:05.060 --> 00:18:06.300
I did not leave my terminal.


00:18:06.300 --> 00:18:07.540
It looks like a new window.


00:18:07.540 --> 00:18:08.780
>>It did. It looked like a new window,


00:18:08.780 --> 00:18:09.980
but it's actually all in terminal.


00:18:09.980 --> 00:18:12.740
So you can stay in your terminal, stay at your keyboard,


00:18:12.740 --> 00:18:15.820
and all the shortcuts are super nice.


00:18:15.820 --> 00:18:17.140
One last thing.


00:18:17.140 --> 00:18:19.180
>>Oh, the diff just sold me.


00:18:19.180 --> 00:18:20.740
So yeah.


00:18:20.740 --> 00:18:22.180
>>You can split your windows, obviously,


00:18:22.180 --> 00:18:25.480
like other kinds of terminal emulators,


00:18:25.480 --> 00:18:27.060
like if you're using Tmux,


00:18:27.060 --> 00:18:28.480
but then it's got all the layouts built in.


00:18:28.480 --> 00:18:31.800
So if I wanted horizontal or vertical or a grid,


00:18:31.800 --> 00:18:35.360
or if I wanted to just get to the current one I'm on,


00:18:35.360 --> 00:18:36.500
You've got all that available to you


00:18:36.500 --> 00:18:38.400
with nice shortcut keys and you can just,


00:18:38.400 --> 00:18:41.460
I got rid of TMUX and started just going all in


00:18:41.460 --> 00:18:42.920
on KDE only.


00:18:42.920 --> 00:18:44.180
- Okay, I got a question.


00:18:44.180 --> 00:18:45.960
So I've always been confused about this whole


00:18:45.960 --> 00:18:48.880
windowing thing because I just opened another terminal.


00:18:48.880 --> 00:18:52.060
So--


00:18:52.060 --> 00:18:52.960
- Oh, I see what your question is.


00:18:52.960 --> 00:18:55.380
I don't wanna open another terminal.


00:18:55.380 --> 00:18:57.880
I don't wanna reach for my mouse when I have to like


00:18:57.880 --> 00:18:59.160
go between terminal windows.


00:18:59.160 --> 00:19:02.840
So I'd rather have like multiple tabs and then have splits.


00:19:02.840 --> 00:19:04.800
And so I can have like a paging going on in one window


00:19:04.800 --> 00:19:07.720
or another window, I can edit these things,


00:19:07.720 --> 00:19:11.560
make them shorter or taller or split them in a different way.


00:19:11.560 --> 00:19:13.640
So I feel like just keeping my hands on a keyboard


00:19:13.640 --> 00:19:16.800
keeps me more productive as a developer,


00:19:16.800 --> 00:19:18.600
as opposed to reaching over to the mouse.


00:19:18.600 --> 00:19:20.080
I know it's not that far away,


00:19:20.080 --> 00:19:21.600
but I feel like it breaks that flow.


00:19:21.600 --> 00:19:24.760
If you're typing away at code and you wanna quickly


00:19:24.760 --> 00:19:28.240
open up a tail for a log in a same window right below


00:19:28.240 --> 00:19:30.240
where you're running the process,


00:19:30.240 --> 00:19:31.880
you're just a couple of keystrokes away


00:19:31.880 --> 00:19:33.940
and you've got that open and going.


00:19:33.940 --> 00:19:35.260
- Cool, nice.


00:19:35.260 --> 00:19:36.180
Yeah. - Yeah.


00:19:36.180 --> 00:19:37.220
Oh, that's really cool.


00:19:37.220 --> 00:19:39.100
So I know we're not to the joke section yet,


00:19:39.100 --> 00:19:40.100
but you know the joke about


00:19:40.100 --> 00:19:41.540
how do you generate a random string,


00:19:41.540 --> 00:19:44.980
put a new computer science student inside of them


00:19:44.980 --> 00:19:46.220
and ask them to exit?


00:19:46.220 --> 00:19:47.060
- Yeah.


00:19:47.060 --> 00:19:49.020
- So I think the new version is


00:19:49.020 --> 00:19:52.060
put four of them in these different panes controlled here


00:19:52.060 --> 00:19:54.020
and ask them to exit the top right one.


00:19:54.020 --> 00:19:57.140
- Here, I can do it on my own.


00:19:57.140 --> 00:20:00.340
- An even more random number or word.


00:20:00.340 --> 00:20:01.700
- Here we go, boom, did it.


00:20:03.700 --> 00:20:04.700
I'm going to try KITTY.


00:20:04.700 --> 00:20:05.700
This looks great.


00:20:05.700 --> 00:20:06.700
It's super configurable.


00:20:06.700 --> 00:20:11.020
It supports all the nerd fonts, all the color schemes.


00:20:11.020 --> 00:20:12.540
There's a bunch of cool plugins for it.


00:20:12.540 --> 00:20:16.100
I've got a search plugin, which searches back through your terminal.


00:20:16.100 --> 00:20:18.980
And so if I was-- there's nothing in that specific one.


00:20:18.980 --> 00:20:23.980
But if I search through here and wanted to search backward, it uses FZF to do searching


00:20:23.980 --> 00:20:24.980
backwards.


00:20:24.980 --> 00:20:29.460
So if I was looking for, like, LS, you see it highlighted the word LS or 2020.


00:20:29.460 --> 00:20:32.740
And then if I had multiple ones, then I could just arrow back up between them.


00:20:32.740 --> 00:20:34.740
That's all built in.


00:20:34.740 --> 00:20:36.740
Yeah, now really cool.


00:20:36.740 --> 00:20:41.740
Also really cool is our new sponsor, FusionAuth.


00:20:41.740 --> 00:20:43.740
Thank you to them for sponsoring this episode.


00:20:43.740 --> 00:20:46.740
So let me just tell you really quickly about them.


00:20:46.740 --> 00:20:51.740
They're an authentication and authorization platform built for devs by devs.


00:20:51.740 --> 00:20:54.740
It solves the problem of building essential user security


00:20:54.740 --> 00:20:57.740
without adding the risk and distraction from your main app.


00:20:57.740 --> 00:21:05.740
Fusion Auth has all the features you need for great support at a price that won't break the bank.


00:21:05.740 --> 00:21:10.740
And you can either do self-hosting or you can get a fully managed solution running in any AWS region.


00:21:10.740 --> 00:21:15.740
So if you've got a side project that needs a custom login registration or multi-factor authentication,


00:21:15.740 --> 00:21:21.740
social logins or user management, you can download Fusion Auth and get the Community Edition for free.


00:21:21.740 --> 00:21:25.100
And the best part is you can have unlimited users


00:21:25.100 --> 00:21:28.760
and there's no credit card or subscription required for that.


00:21:28.760 --> 00:21:32.080
So check them out at pythonbytes.fm/fusionauth


00:21:32.080 --> 00:21:35.200
or just click the link in your podcast player show notes


00:21:35.200 --> 00:21:37.980
and let them know you came from us.


00:21:37.980 --> 00:21:39.320
So thank you for joining. - I love that t-shirt.


00:21:39.320 --> 00:21:40.320
That's cool. - I know.


00:21:40.320 --> 00:21:45.320
Yeah, you get a cool t-shirt, cat/etc/passwordD.


00:21:45.320 --> 00:21:47.860
Very cool.


00:21:48.760 --> 00:21:52.420
I love when you get a cool t-shirt from our sponsors.


00:21:52.420 --> 00:21:54.280
All right.


00:21:54.280 --> 00:21:55.800
- Well, Sue doesn't like cats.


00:21:55.800 --> 00:21:57.400
- I know, and kitties.


00:21:57.400 --> 00:22:00.200
I mean, I can tell that you're already a fan of kitties.


00:22:00.200 --> 00:22:06.540
- Well, so I don't know if a kitty is parallelized,


00:22:06.540 --> 00:22:10.060
but yeah, so I want to talk about parallels


00:22:10.060 --> 00:22:13.060
and parallelization, say that three times.


00:22:14.420 --> 00:22:19.420
Anyway, I found this article by Jamie Welta,


00:22:19.420 --> 00:22:22.060
cool last name actually,


00:22:22.060 --> 00:22:24.780
but it's called Futures and Easy Parallelization.


00:22:24.780 --> 00:22:27.940
And I was like, you know, it was a pretty short article


00:22:27.940 --> 00:22:29.900
and I was like, it can't be that easy.


00:22:29.900 --> 00:22:34.900
But, so this isn't talking about AIO stuff or asyncio.


00:22:34.900 --> 00:22:38.780
It's talking about,


00:22:38.780 --> 00:22:42.260
this one is talking about thread futures with threads.


00:22:42.260 --> 00:22:45.800
And this is, it's pretty cool.


00:22:45.800 --> 00:22:48.540
The idea is you've got just, maybe you've got,


00:22:48.540 --> 00:22:50.800
and it starts off with a simple example.


00:22:50.800 --> 00:22:52.920
I just have some work that I want done


00:22:52.920 --> 00:22:55.500
and I want it done on different threads


00:22:55.500 --> 00:22:56.920
or different processors.


00:22:56.920 --> 00:23:01.920
So this example brings up a thread pool,


00:23:01.920 --> 00:23:03.960
a thread pool executor,


00:23:03.960 --> 00:23:06.260
and then runs them all at the same time.


00:23:06.260 --> 00:23:08.000
Does an executor submit?


00:23:08.000 --> 00:23:10.360
And it's just a small snippet of code,


00:23:10.360 --> 00:23:11.920
just a handful of lines.


00:23:11.920 --> 00:23:13.080
And then I tried this out.


00:23:13.080 --> 00:23:15.500
So this example actually is kind of boring.


00:23:15.500 --> 00:23:19.060
It's just doing like a power X to the power of two


00:23:19.060 --> 00:23:21.660
or X squared on a couple of things.


00:23:21.660 --> 00:23:23.600
I think that's what star star is, isn't it?


00:23:23.600 --> 00:23:26.120
Is that power of, I don't remember.


00:23:26.120 --> 00:23:29.400
- X to the power of two, yeah, X squared.


00:23:29.400 --> 00:23:30.240
- X squared.


00:23:30.240 --> 00:23:35.000
So the other example seems a bit more down to earth


00:23:35.000 --> 00:23:38.920
and that's, and yes, on our screen,


00:23:38.920 --> 00:23:43.920
on the YouTube screen is just, it's the entire program here.


00:23:43.920 --> 00:23:48.240
It's just, you're taking a few websites


00:23:48.240 --> 00:23:50.280
and a couple of pages to go to,


00:23:50.280 --> 00:23:55.280
and then actually just slurping those down with requests


00:23:55.280 --> 00:23:57.040
and grabbing something about them.


00:23:57.040 --> 00:23:59.280
And this example, just as the result,


00:23:59.280 --> 00:24:01.440
whether it's a 200 or something like that.


00:24:01.440 --> 00:24:03.360
But it's a really short example


00:24:03.360 --> 00:24:05.620
and you've got parallelization going on.


00:24:05.620 --> 00:24:07.700
And I played with this, just downloaded it.


00:24:07.700 --> 00:24:09.740
The only, we'll have it in our show notes.


00:24:09.740 --> 00:24:13.260
The only error on this that I had to do is it's using,


00:24:13.260 --> 00:24:16.780
it's using time in here as just like a debug thing.


00:24:16.780 --> 00:24:19.020
And in the example, it doesn't import time.


00:24:19.020 --> 00:24:21.520
So you have to add that import time


00:24:21.520 --> 00:24:23.340
and it runs just fine like this.


00:24:23.340 --> 00:24:26.220
And this is a pretty quick way to add parallelization


00:24:26.220 --> 00:24:27.740
for some quick task.


00:24:27.740 --> 00:24:29.260
So I kind of like it.


00:24:29.260 --> 00:24:32.340
There's occasionally, especially like I would do it.


00:24:32.340 --> 00:24:35.100
There's a lot of huge log files I have to parse


00:24:35.100 --> 00:24:38.860
or big data files that I'm looking for stuff on,


00:24:38.860 --> 00:24:42.820
or grabbing error logs off of different systems.


00:24:42.820 --> 00:24:45.500
And this would be a great example to just grab them all


00:24:45.500 --> 00:24:47.260
at the same time and pull them in.


00:24:47.260 --> 00:24:49.500
- Yeah, yeah, this is nice.


00:24:49.500 --> 00:24:54.500
The one thing that's cool about the futures you get back


00:24:54.500 --> 00:24:56.740
from the ThreadPool executor,


00:24:56.740 --> 00:25:00.740
is you can say .result and it blocks,


00:25:00.740 --> 00:25:02.740
whereas on async.io it throws an exception


00:25:02.740 --> 00:25:05.220
says it's not done rather than just blocking.


00:25:05.220 --> 00:25:06.140
- Oh yeah.


00:25:06.140 --> 00:25:08.500
Yeah, and that's the article kind of talks about that.


00:25:08.500 --> 00:25:12.060
It's one of the simplest things is you tell the executors,


00:25:12.060 --> 00:25:15.460
you call executors submit and that gets the jobs ready,


00:25:15.460 --> 00:25:16.580
but that doesn't block.


00:25:16.580 --> 00:25:20.060
Those are, you can submit as many as you want.


00:25:20.060 --> 00:25:24.260
And then in the example, he's just using like future.result


00:25:24.260 --> 00:25:29.140
in a list comprehension.


00:25:29.140 --> 00:25:30.980
And that for each of those results,


00:25:30.980 --> 00:25:33.140
that'll block until the next one's done.


00:25:33.140 --> 00:25:35.220
And you know, this one's doing it in an order


00:25:35.220 --> 00:25:36.680
of which one you submitted it.


00:25:36.680 --> 00:25:38.880
That might not be the order they finish in,


00:25:38.880 --> 00:25:41.540
but you don't really care because you just wanna wait


00:25:41.540 --> 00:25:43.220
till they're all done anyway, so.


00:25:43.220 --> 00:25:44.180
- Yeah, exactly.


00:25:44.180 --> 00:25:46.100
If you block on the first one and it's not done,


00:25:46.100 --> 00:25:47.860
the second one might finish first,


00:25:47.860 --> 00:25:50.260
but they'll both be done by the time you get to them.


00:25:50.260 --> 00:25:51.640
Like, you know.


00:25:51.640 --> 00:25:53.900
- Yeah, and this is a lot more natural


00:25:53.900 --> 00:25:56.400
for folks who may not be used to like AsyncIO too.


00:25:56.400 --> 00:25:59.780
- Oh, I've been deep in the AsyncIO world.


00:25:59.780 --> 00:26:03.180
- Well, but I'll build natural you.


00:26:03.180 --> 00:26:04.020
- And that's exactly-


00:26:04.020 --> 00:26:06.560
- And I have scars now, let me tell you.


00:26:06.560 --> 00:26:08.600
- That's exactly why I wanted to bring up this article


00:26:08.600 --> 00:26:09.720
is 'cause there's a lot of stuff,


00:26:09.720 --> 00:26:13.360
we're like maybe a DevOps person or something.


00:26:13.360 --> 00:26:15.640
They're not writing async programs,


00:26:15.640 --> 00:26:20.040
but they might have async need or asynchronous needs


00:26:20.040 --> 00:26:22.740
that can be solved with a simpler code.


00:26:22.740 --> 00:26:24.720
So.


00:26:24.720 --> 00:26:27.840
- Yeah, this is very elegant, easy to understand.


00:26:27.840 --> 00:26:30.680
- Yeah, nice article, good one.


00:26:30.680 --> 00:26:33.520
All right, well, I wanna talk about databases


00:26:33.520 --> 00:26:34.340
and more tools.


00:26:34.340 --> 00:26:36.760
I feel like this is just the tool focused.


00:26:36.760 --> 00:26:38.320
- It's a tool episode.


00:26:38.320 --> 00:26:39.460
- It is, it's tool time.


00:26:39.460 --> 00:26:43.740
All right, so I did an episode on Talk Python


00:26:43.740 --> 00:26:46.880
with Emily Morehouse, Glyph and Henik.


00:26:46.880 --> 00:26:51.600
And Henik pointed out this thing called pg-mustard.


00:26:51.600 --> 00:26:52.880
Have you heard of this?


00:26:52.880 --> 00:26:54.600
- No. - Have you?


00:26:54.600 --> 00:26:57.400
- Oh, well, I just listened to that excellent episode.


00:26:57.400 --> 00:26:59.840
- Well, thank you, because now you know,


00:26:59.840 --> 00:27:00.760
like I had not heard of it,


00:27:00.760 --> 00:27:04.520
but one of the challenges, so many websites,


00:27:04.520 --> 00:27:06.920
I just don't understand why the world works this way,


00:27:06.920 --> 00:27:10.180
but you go to the website and it just spins and spins.


00:27:10.180 --> 00:27:13.320
And the clunkier, the more internal the thing looks,


00:27:13.320 --> 00:27:15.680
the more likely it is to take 10 seconds


00:27:15.680 --> 00:27:17.160
to do whatever it's doing.


00:27:17.160 --> 00:27:19.800
Right, but you know, it's doing some database query,


00:27:19.800 --> 00:27:21.920
probably without an index.


00:27:21.920 --> 00:27:23.160
Maybe they gave it an index,


00:27:23.160 --> 00:27:24.720
but the index is not being used


00:27:24.720 --> 00:27:26.300
'cause it's actually filtering first


00:27:26.300 --> 00:27:28.380
on some other random thing or whatever.


00:27:28.380 --> 00:27:31.260
So databases have this cool feature to say,


00:27:31.260 --> 00:27:35.900
given a query, explain how you're gonna execute this.


00:27:35.900 --> 00:27:39.460
MongoDB has this, Postgres has this and so on.


00:27:39.460 --> 00:27:42.500
Okay, so that comes out as text.


00:27:42.500 --> 00:27:44.500
What if you could have a better way that gave you advice?


00:27:44.500 --> 00:27:48.260
And that's what this tool here is, which does cost money.


00:27:48.260 --> 00:27:49.900
It's just to be clear, it's a commercial thing,


00:27:49.900 --> 00:27:50.780
but I thought it was cool enough


00:27:50.780 --> 00:27:53.120
that I wanted to point it out to people.


00:27:53.120 --> 00:27:56.340
So what you do is you give it your,


00:27:56.340 --> 00:28:00.820
basically a select statement


00:28:00.820 --> 00:28:02.600
and you ask it to explain it.


00:28:02.600 --> 00:28:05.960
And it'll break down the explain statement


00:28:05.960 --> 00:28:08.860
into different sections and tell you,


00:28:08.860 --> 00:28:10.440
this part is really good,


00:28:10.440 --> 00:28:14.220
this part of the query could be improved and so on.


00:28:14.220 --> 00:28:15.480
And then it gives you,


00:28:15.480 --> 00:28:18.680
so like it'll show you this beautiful visual way


00:28:18.680 --> 00:28:21.760
of explaining it and then you can dive into it.


00:28:21.760 --> 00:28:23.680
And if you click on it, it'll tell you things like,


00:28:23.680 --> 00:28:25.000
okay, this is a nested loop.


00:28:25.000 --> 00:28:28.640
And on this part of the query, it took 152 milliseconds.


00:28:28.640 --> 00:28:30.480
You got a hundred rows back.


00:28:30.480 --> 00:28:33.480
And then it actually describes the situation,


00:28:33.480 --> 00:28:35.060
why it's good or bad.


00:28:35.060 --> 00:28:37.280
So for example, it says you got five stars


00:28:37.280 --> 00:28:41.320
because you discarded 1.3 million rows.


00:28:41.320 --> 00:28:43.120
That makes it faster.


00:28:43.120 --> 00:28:44.800
But you only got 3.2 stars


00:28:44.800 --> 00:28:49.000
because the row estimate was out by a factor of 42.


00:28:49.000 --> 00:28:51.680
You know, try to get that from text, right?


00:28:51.680 --> 00:28:55.320
This is super helpful if you've got a slow site


00:28:55.320 --> 00:28:58.640
that you wanna say, okay, this page is slow.


00:28:58.640 --> 00:29:01.760
These are the three queries that run when we pull this page.


00:29:01.760 --> 00:29:02.760
Why are they slow?


00:29:02.760 --> 00:29:03.720
How can I make them better?


00:29:03.720 --> 00:29:06.440
So it's, you know, we talked about the Regex 101 thing,


00:29:06.440 --> 00:29:08.040
how it like kind of guided you through


00:29:08.040 --> 00:29:09.300
and gave you recommendations.


00:29:09.300 --> 00:29:11.160
This is like the database equivalent.


00:29:11.160 --> 00:29:14.200
- This is nice.


00:29:14.200 --> 00:29:15.280
- This is awesome.


00:29:15.280 --> 00:29:17.760
I can't believe I've never seen this before.


00:29:17.760 --> 00:29:19.400
- I know, I can't either.


00:29:19.400 --> 00:29:20.720
I've never seen it either.


00:29:20.720 --> 00:29:24.900
Now from the interview, it sounded like it would recommend


00:29:24.900 --> 00:29:27.340
how you could change your query to make it better.


00:29:27.340 --> 00:29:28.900
Is that something that has in there?


00:29:28.900 --> 00:29:30.140
Or did I imagine that?


00:29:30.140 --> 00:29:30.980
- I believe so.


00:29:30.980 --> 00:29:31.800
And I believe so.


00:29:31.800 --> 00:29:35.400
If you like open up this 3.2 stars,


00:29:35.400 --> 00:29:37.500
I think it'll give you descriptions


00:29:37.500 --> 00:29:39.700
about what could be better in there.


00:29:39.700 --> 00:29:41.740
So it can give you performance advice,


00:29:41.740 --> 00:29:44.140
including high index potentials,


00:29:44.140 --> 00:29:47.080
poor index efficiency, disk operations.


00:29:47.080 --> 00:29:48.660
So like you've got to read too much off disk


00:29:48.660 --> 00:29:49.520
to answer this question.


00:29:49.520 --> 00:29:54.020
poor cache performance, excessive heap fetches,


00:29:54.020 --> 00:29:58.680
read efficiencies, glossy bitmap scans


00:29:58.680 --> 00:30:00.280
and on and on and on, right?


00:30:00.280 --> 00:30:02.280
So it's pretty cool.


00:30:02.280 --> 00:30:06.000
It runs on Postgres 9.6 or newer.


00:30:06.000 --> 00:30:07.840
- I hope you're newer than that 9.6.


00:30:07.840 --> 00:30:09.440
That's pretty great.


00:30:09.440 --> 00:30:10.840
It supports that far back.


00:30:10.840 --> 00:30:12.040
- Yeah, yeah.


00:30:12.040 --> 00:30:14.600
Anyway, it is a paid tool, but man,


00:30:14.600 --> 00:30:18.980
if you could for $95, make your website 10 times faster


00:30:18.980 --> 00:30:20.860
and people have been complaining and complaining.


00:30:20.860 --> 00:30:21.920
You don't have to rewrite anything.


00:30:21.920 --> 00:30:25.860
You just put in like a slightly different hint or index


00:30:25.860 --> 00:30:28.220
or change the order of a query.


00:30:28.220 --> 00:30:30.060
Like that's worth a lot, I think.


00:30:30.060 --> 00:30:32.720
- I think I'm just gonna try to learn this


00:30:32.720 --> 00:30:35.260
and then set up a page to say


00:30:35.260 --> 00:30:37.500
I'm a database optimization consultant


00:30:37.500 --> 00:30:40.260
and just run this in the background.


00:30:40.260 --> 00:30:41.980
- Yeah, look, $500 an hour.


00:30:41.980 --> 00:30:44.020
I will absolutely come in there.


00:30:44.020 --> 00:30:44.860
- Yeah.


00:30:44.860 --> 00:30:47.500
- And I have this proprietary set of tools


00:30:47.500 --> 00:30:49.700
that I just, I can't talk about it,


00:30:49.700 --> 00:30:52.920
but you let me in there and magic's gonna happen.


00:30:52.920 --> 00:30:55.340
- I shouldn't have said that out loud.


00:30:55.340 --> 00:30:59.980
- Yeah, well, the market will be swamped with these folks.


00:30:59.980 --> 00:31:01.420
- Yeah.


00:31:01.420 --> 00:31:02.740
- Anyway, I thought this was cool,


00:31:02.740 --> 00:31:04.720
so I wanted to give it a shout out.


00:31:04.720 --> 00:31:05.660
- Cool.


00:31:05.660 --> 00:31:06.780
- That is super cool.


00:31:06.780 --> 00:31:08.020
- Yeah.


00:31:08.020 --> 00:31:10.060
All right, Calvin, you got the last one?


00:31:10.060 --> 00:31:13.180
- All right, last one up, continuing the tools parade.


00:31:13.180 --> 00:31:15.900
Another tool, this is also cross-platform.


00:31:15.900 --> 00:31:17.020
I didn't mention that before.


00:31:17.020 --> 00:31:18.260
One of the reasons I really like KITTY


00:31:18.260 --> 00:31:19.820
was the fact I can use it anywhere.


00:31:19.820 --> 00:31:23.020
Linux, DSD, Windows, Mac,


00:31:23.020 --> 00:31:25.700
there are downloads for all those platforms.


00:31:25.700 --> 00:31:27.000
This one doesn't support Windows,


00:31:27.000 --> 00:31:30.380
but it does support Linux, Mac, and FreeBSD.


00:31:30.380 --> 00:31:32.220
It's BPyTop.


00:31:32.220 --> 00:31:34.940
I used to be a long time user of Glances.


00:31:34.940 --> 00:31:36.300
And if you didn't know what Glances was,


00:31:36.300 --> 00:31:37.660
you were also missing out.


00:31:37.660 --> 00:31:39.020
Because Glances is an awesome way


00:31:39.020 --> 00:31:41.020
to see what's going on in your system.


00:31:41.020 --> 00:31:42.260
Like what I/O is being used,


00:31:42.260 --> 00:31:43.220
how much memory is being used,


00:31:43.220 --> 00:31:45.060
how much swaps being used.


00:31:45.060 --> 00:31:47.660
And BPyTop is kind of the next generation of that.


00:31:47.660 --> 00:31:51.580
So I will show a quick little demo of this one as well.


00:31:51.580 --> 00:31:53.900
So for those of you who weren't familiar with Glances,


00:31:53.900 --> 00:31:55.540
this is what Glances looks like.


00:31:55.540 --> 00:32:01.020
I got, sorry, a little interruption there.


00:32:01.020 --> 00:32:04.080
But while I'm live here on the podcast, this is Glances.


00:32:04.080 --> 00:32:06.820
It's kind of like more tech, very techsy,


00:32:06.820 --> 00:32:08.680
kind of old school looking.


00:32:08.680 --> 00:32:10.900
But if you just pipx install,


00:32:10.900 --> 00:32:13.580
and that's how I typically install these kinds of tools.


00:32:13.580 --> 00:32:15.280
- Sorry about that.


00:32:15.280 --> 00:32:20.780
- PIPX is the homebrew.


00:32:20.780 --> 00:32:21.980
- Oh man, it's amazing.


00:32:21.980 --> 00:32:26.180
You just PIPX installed, BPyTOP.


00:32:26.180 --> 00:32:29.640
If you don't have PIPX installed, you should install PIPX


00:32:29.640 --> 00:32:32.160
because that'll get you access to all the stuff


00:32:32.160 --> 00:32:33.800
and your path all set up.


00:32:33.800 --> 00:32:35.440
But now I just use BPyTOP


00:32:35.440 --> 00:32:40.000
and you get this like nice colorized,


00:32:40.000 --> 00:32:45.160
view of a dashboard all really just laid out well.


00:32:45.160 --> 00:32:48.060
Then all of the, you can see on here,


00:32:48.060 --> 00:32:52.040
there's characters that are shaded in a different color.


00:32:52.040 --> 00:32:54.500
If you hit those characters,


00:32:54.500 --> 00:32:58.120
you'll be able to resort or if you see the little numbers,


00:32:58.120 --> 00:33:02.140
I can hide and show the CPU or the memory graph.


00:33:02.140 --> 00:33:03.960
I don't care about that one so much.


00:33:03.960 --> 00:33:05.340
>> For people who are just listening,


00:33:05.340 --> 00:33:09.580
here's a terminal app that has like,


00:33:09.580 --> 00:33:11.220
like task manager,


00:33:11.220 --> 00:33:15.940
or activity monitor levels of sort of graphs going on


00:33:15.940 --> 00:33:17.540
of like, here's the CPU over time,


00:33:17.540 --> 00:33:20.260
here's the running processes sort of by CPU.


00:33:20.260 --> 00:33:21.980
Here's the network.


00:33:21.980 --> 00:33:24.320
This is probably more useful than activity monitor,


00:33:24.320 --> 00:33:25.160
honestly.


00:33:25.160 --> 00:33:26.000
- Oh, I think it is.


00:33:26.000 --> 00:33:28.660
I mean, what's nice is you get that trending metrics


00:33:28.660 --> 00:33:29.500
over time.


00:33:29.500 --> 00:33:31.540
So you can see by CPU core


00:33:31.540 --> 00:33:34.700
or by like kind of aggregated CPU view,


00:33:34.700 --> 00:33:37.420
how you're seeing spikes or what--


00:33:37.420 --> 00:33:39.580
this is really useful if you're on a server


00:33:39.580 --> 00:33:41.580
and something's periodically happening,


00:33:41.580 --> 00:33:45.180
you're not sure what, and you can track down either I/O issues


00:33:45.180 --> 00:33:47.740
or CPU spikes, and you can see if they're


00:33:47.740 --> 00:33:49.860
becoming very periodic.


00:33:49.860 --> 00:33:52.500
Maybe they're happening every minute or every five minutes


00:33:52.500 --> 00:33:54.260
on the dot, and you're like, oh, that's weird.


00:33:54.260 --> 00:33:55.840
There's something like maybe it's this cron job,


00:33:55.840 --> 00:33:58.300
so it helps you track those kinds of things down.


00:33:58.300 --> 00:34:00.180
You can also inspect the processes.


00:34:00.180 --> 00:34:02.620
So you can arrow up and down, and you can actually


00:34:02.620 --> 00:34:06.220
and see what CPU specifically or memory,


00:34:06.220 --> 00:34:07.700
like a specific processes,


00:34:07.700 --> 00:34:09.900
you can like dig down into a specific process


00:34:09.900 --> 00:34:12.060
and see what core it's actually running on.


00:34:12.060 --> 00:34:15.340
It's just, again, for tracking down performance issues,


00:34:15.340 --> 00:34:18.100
I'm just using it locally on my own laptop right here,


00:34:18.100 --> 00:34:19.300
but I've used this numerous,


00:34:19.300 --> 00:34:21.820
every machine I log into for customer


00:34:21.820 --> 00:34:22.820
or production type stuff,


00:34:22.820 --> 00:34:25.300
if they're still using virtual machines,


00:34:25.300 --> 00:34:27.380
this is absolutely installed so that when they're like,


00:34:27.380 --> 00:34:29.620
oh, something's slow or something's doing weird,


00:34:29.620 --> 00:34:32.600
I just go fire these up and take a look real quick


00:34:32.600 --> 00:34:35.400
to get kind of a snapshot in real time what's going on.


00:34:35.400 --> 00:34:37.800
- I've done that with glances.


00:34:37.800 --> 00:34:38.640
So-- - Yeah.


00:34:38.640 --> 00:34:40.240
That was my go-to,


00:34:40.240 --> 00:34:42.000
but I just found Beefy Top was like


00:34:42.000 --> 00:34:43.720
the super powered version of glances.


00:34:43.720 --> 00:34:44.920
- Interesting, you've moved over.


00:34:44.920 --> 00:34:47.160
You have the graphs that are way better.


00:34:47.160 --> 00:34:48.000
- Yeah.


00:34:48.000 --> 00:34:51.160
- Like you have progress bars or like meter bars


00:34:51.160 --> 00:34:53.720
that are graphical in glances if you make it wide enough,


00:34:53.720 --> 00:34:56.480
but they don't have over time, they're just like snapshots.


00:34:56.480 --> 00:34:58.560
- And this is like beautiful gradient colors.


00:34:58.560 --> 00:35:00.180
Like I kind of just expanded the net one


00:35:00.180 --> 00:35:03.920
so you can see the traffic going across my card.


00:35:03.920 --> 00:35:05.100
You can also switch back and forth


00:35:05.100 --> 00:35:07.360
between different interfaces on the system.


00:35:07.360 --> 00:35:08.840
So if you've got multiple network interfaces,


00:35:08.840 --> 00:35:13.120
you can see the aggregate or just for a specific interface.


00:35:13.120 --> 00:35:15.440
Yeah, super helpful when trying to track down


00:35:15.440 --> 00:35:18.360
weird, in quotes, weird issues.


00:35:18.360 --> 00:35:19.640
- How's it run on Kitty?


00:35:19.640 --> 00:35:21.600
- It runs great on Kitty.


00:35:21.600 --> 00:35:23.560
The performance is amazing.


00:35:23.560 --> 00:35:24.760
There's another thing I didn't show you.


00:35:24.760 --> 00:35:28.000
You can actually see with the NVIDIA SMI tool,


00:35:28.000 --> 00:35:31.660
There is Kitty using up 20 megabytes of my GPU memory.


00:35:31.660 --> 00:35:36.180
- No, that's pretty awesome.


00:35:36.180 --> 00:35:38.220
Speaking of beautiful, Alvaro says,


00:35:38.220 --> 00:35:40.180
BPyTOP has themes.


00:35:40.180 --> 00:35:41.020
- Yes.


00:35:41.020 --> 00:35:42.580
- They use the dark yellow theme.


00:35:42.580 --> 00:35:45.480
- Yeah, I love the fact that anything's got themes


00:35:45.480 --> 00:35:48.860
I can customize like Kitty or even BPyTOP


00:35:48.860 --> 00:35:50.980
or whatever my IDE is.


00:35:50.980 --> 00:35:52.780
I just, I trick that stuff out.


00:35:52.780 --> 00:35:53.700
This is my environment.


00:35:53.700 --> 00:35:56.260
I wanna be as comfortable and as productive as possible.


00:35:56.260 --> 00:35:58.580
So the more customizable, the better.


00:35:58.580 --> 00:35:59.740
And the more emojis, the better.


00:35:59.740 --> 00:36:00.580
Love emojis.


00:36:00.580 --> 00:36:01.420
- Yes.


00:36:01.420 --> 00:36:03.060
(laughing)


00:36:03.060 --> 00:36:04.060
There's something to be said about it.


00:36:04.060 --> 00:36:05.980
If you sit down and you're like, I am excited.


00:36:05.980 --> 00:36:06.940
Look how cool this is.


00:36:06.940 --> 00:36:08.060
I'm excited. - Look how cool it is.


00:36:08.060 --> 00:36:10.180
- Yeah, you're like, oh, I'm using like an old version


00:36:10.180 --> 00:36:11.660
of Bash with nothing else installed.


00:36:11.660 --> 00:36:13.940
This is not as much fun as I envisioned it to be.


00:36:13.940 --> 00:36:16.260
- Well, the only issue is when you sit down


00:36:16.260 --> 00:36:19.180
with someone who's like, they fire up text edit


00:36:19.180 --> 00:36:20.180
to like edit some text.


00:36:20.180 --> 00:36:21.180
You're like, what are you doing?


00:36:21.180 --> 00:36:23.980
Like, come on, like, let me show you some cool tools.


00:36:23.980 --> 00:36:25.820
Like, let me get you up to speed on here.


00:36:25.820 --> 00:36:28.420
- Yeah, yeah, text edit being the notepad equivalent


00:36:28.420 --> 00:36:30.900
if you're not a Mac person, but that's,


00:36:30.900 --> 00:36:32.740
maybe it's a WordPad, you know,


00:36:32.740 --> 00:36:34.020
maybe it's a WordPad level.


00:36:34.020 --> 00:36:36.220
Like that's probably where, which is worse.


00:36:36.220 --> 00:36:37.460
I think that's worse than notepad


00:36:37.460 --> 00:36:39.300
'cause you're gonna get corrupted characters


00:36:39.300 --> 00:36:41.380
that you're not gonna know.


00:36:41.380 --> 00:36:42.200
- Yeah.


00:36:42.200 --> 00:36:43.040
- Oh man.


00:36:43.040 --> 00:36:46.940
- Especially with working from home now,


00:36:46.940 --> 00:36:50.700
a lot of people are working with kids around that walk by


00:36:50.700 --> 00:36:52.700
and you want your job to look awesome


00:36:52.700 --> 00:36:55.220
so that they're interested in what you're doing.


00:36:55.220 --> 00:36:56.340
- Just saying.


00:36:56.340 --> 00:36:58.340
- Yeah, I'm sure my kids think I'm a hacker.


00:36:58.340 --> 00:37:00.600
(laughing)


00:37:00.600 --> 00:37:03.780
- Wait, you're not a hacker?


00:37:03.780 --> 00:37:05.180
- Well, I hack on code, yes.


00:37:05.180 --> 00:37:08.900
- The original, the original meaning.


00:37:08.900 --> 00:37:10.740
- Exactly, the original meaning of that word.


00:37:10.740 --> 00:37:11.580
- OG hacker.


00:37:11.580 --> 00:37:15.820
- Brian, time for some extras.


00:37:15.820 --> 00:37:19.180
- I do have a big extra that I'm really excited about.


00:37:19.180 --> 00:37:21.220
Yes, the book is,


00:37:21.220 --> 00:37:23.260
which I've been talking about for about 18 months.


00:37:23.260 --> 00:37:25.660
And if you add that to the previous 18 months,


00:37:25.660 --> 00:37:27.220
about three years of this podcast


00:37:27.220 --> 00:37:28.380
has been talking about this book.


00:37:28.380 --> 00:37:33.380
But anyway, so it's, there's no longer a beta flag on it.


00:37:33.380 --> 00:37:35.260
It's not in beta anymore.


00:37:35.260 --> 00:37:37.060
So it's off to the printers.


00:37:37.060 --> 00:37:42.020
And then to celebrate it being officially released,


00:37:42.020 --> 00:37:45.440
there's a coupon code that will link


00:37:45.440 --> 00:37:48.580
to this page in the show notes, but it's a coupon code.


00:37:48.580 --> 00:37:50.940
I don't know how long this is going to be good for,


00:37:50.940 --> 00:37:53.580
but this is for 40% off the ebook.


00:37:53.580 --> 00:37:55.580
So this is exciting.


00:37:55.580 --> 00:37:57.720
And I don't have a physical copy yet.


00:37:57.720 --> 00:37:59.640
I'm still waiting for mine to get delivered.


00:37:59.640 --> 00:38:02.060
Hopefully it'll be in the next couple of weeks.


00:38:02.060 --> 00:38:06.220
So yeah, anyway, that's one of my extras.


00:38:06.220 --> 00:38:10.620
The other extra I wanted to bring up is a PyCamp Spain


00:38:10.620 --> 00:38:14.220
is happening April 15th through the 18th.


00:38:14.220 --> 00:38:16.260
And man, this looks fun.


00:38:16.260 --> 00:38:18.420
- It's like actual camping.


00:38:18.420 --> 00:38:19.980
I love the idea.


00:38:19.980 --> 00:38:22.620
- Well, like, I don't know if it's actual camping,


00:38:22.620 --> 00:38:27.620
but there's admission includes four days and three nights,


00:38:27.620 --> 00:38:30.500
including accommodations and breakfast,


00:38:30.500 --> 00:38:31.740
lunch and dinner provided.


00:38:31.740 --> 00:38:33.700
This is pretty amazing.


00:38:33.700 --> 00:38:36.620
- I know, Brian, I see karaoke on that list too.


00:38:36.620 --> 00:38:37.980
- Karaoke talks?


00:38:37.980 --> 00:38:38.800
- Yeah.


00:38:38.800 --> 00:38:40.420
- Board games, ping pong?


00:38:40.420 --> 00:38:41.260
This is great.


00:38:41.260 --> 00:38:43.900
- You have to give your talk in song form.


00:38:43.900 --> 00:38:44.720
- Yeah.


00:38:44.720 --> 00:38:47.180
- Oh man, no one would want to see me do that.


00:38:47.180 --> 00:38:48.260
- Or me either.


00:38:48.260 --> 00:38:50.560
So this looks great.


00:38:50.560 --> 00:38:52.160
That does look like a lot of fun.


00:38:52.160 --> 00:38:54.480
- Fantastic.


00:38:54.480 --> 00:38:56.240
Calvin, you got anything extra you wanna throw out there?


00:38:56.240 --> 00:38:57.440
- I do.


00:38:57.440 --> 00:39:00.400
Coming up next month in just a little over a month


00:39:00.400 --> 00:39:01.840
is the Python web conference.


00:39:01.840 --> 00:39:03.840
Oh, I've got the, let me pull up the slide for it.


00:39:03.840 --> 00:39:04.680
- You've got the screen if you want it.


00:39:04.680 --> 00:39:07.160
- I do have the screen for it.


00:39:07.160 --> 00:39:10.480
I had even pre-planned for this to be ready to roll.


00:39:10.480 --> 00:39:12.280
So it is Python web conference time.


00:39:12.280 --> 00:39:13.360
This is our fourth-- - Got any good speakers?


00:39:13.360 --> 00:39:14.180
Or what?


00:39:14.180 --> 00:39:15.480
- Fourth annual event.


00:39:15.480 --> 00:39:17.960
We've got some amazing speakers


00:39:17.960 --> 00:39:19.600
who are gonna join us this year.


00:39:19.600 --> 00:39:20.960
So I'll actually bring that up


00:39:20.960 --> 00:39:23.720
because I'm really proud of this group.


00:39:23.720 --> 00:39:25.840
If you scroll down through here,


00:39:25.840 --> 00:39:28.920
there is just a amazing bunch of people


00:39:28.920 --> 00:39:31.360
who have signed on for this amazing adventure


00:39:31.360 --> 00:39:33.600
with all of us over here.


00:39:33.600 --> 00:39:34.900
So definitely check it out.


00:39:34.900 --> 00:39:37.200
It's gonna be way bigger than it has been in previous years.


00:39:37.200 --> 00:39:39.480
So this is the fourth year we've run it.


00:39:39.480 --> 00:39:42.240
And I believe we've got 90 speakers this year.


00:39:42.240 --> 00:39:46.960
We're doing five tracks across five days.


00:39:46.960 --> 00:39:49.560
So there's two app dev tracks, a culture track,


00:39:49.560 --> 00:39:52.500
a cloud track, and a Pi data track.


00:39:52.500 --> 00:39:54.720
So there is something for everybody.


00:39:54.720 --> 00:39:56.200
Get your tickets now.


00:39:56.200 --> 00:39:57.880
It is gonna be a ton of fun.


00:39:57.880 --> 00:39:59.820
We will start getting things cranked up


00:39:59.820 --> 00:40:00.740
a couple of days beforehand.


00:40:00.740 --> 00:40:02.840
We're getting the Slack channels all set up


00:40:02.840 --> 00:40:04.900
and people can start basically hanging out


00:40:04.900 --> 00:40:06.680
and we're gonna have some cool socials.


00:40:06.680 --> 00:40:08.360
I know we've got one of our speakers


00:40:08.360 --> 00:40:11.040
is gonna give a mindfulness social.


00:40:11.040 --> 00:40:13.800
So if you wanna come and learn how to decompress


00:40:13.800 --> 00:40:15.600
as a developer, and she's gonna actually be one


00:40:15.600 --> 00:40:19.040
our keynotes about burnout, but she's gonna give


00:40:19.040 --> 00:40:21.720
a practical example during one of the socials


00:40:21.720 --> 00:40:23.360
that I'm super excited to try out.


00:40:23.360 --> 00:40:24.360
- Fantastic.


00:40:24.360 --> 00:40:26.080
Yeah, I see a bunch of the people in the speaker list


00:40:26.080 --> 00:40:28.360
have been here on the show.


00:40:28.360 --> 00:40:30.720
- Yeah, these should not be strangers to,


00:40:30.720 --> 00:40:32.320
especially this guy right here.


00:40:32.320 --> 00:40:33.400
- Yeah, I don't know about that guy.


00:40:33.400 --> 00:40:34.400
- He's shady.


00:40:34.400 --> 00:40:35.600
- Definitely shady.


00:40:35.600 --> 00:40:37.880
- Well, I'm noticing a lot of these speakers


00:40:37.880 --> 00:40:42.480
from either this show or Talk Python or Test and Code.


00:40:42.480 --> 00:40:44.560
They've been, a lot of people have been on one of those.


00:40:44.560 --> 00:40:47.120
- A lot of friendly faces, a lot of friendly faces on here.


00:40:47.120 --> 00:40:49.460
And again, great, great group of people.


00:40:49.460 --> 00:40:51.540
They're all super excited to participate in the conference.


00:40:51.540 --> 00:40:54.060
They're all super excited to like hang out with everybody


00:40:54.060 --> 00:40:55.780
and like just be a part.


00:40:55.780 --> 00:40:58.260
- Yeah, I like that you're putting the social links


00:40:58.260 --> 00:41:00.940
up on the page so that people can check that out


00:41:00.940 --> 00:41:02.700
instead of having to Google for them or something.


00:41:02.700 --> 00:41:04.780
- Yeah, it's all about the people for me.


00:41:04.780 --> 00:41:06.860
I mean, I love being a community builder


00:41:06.860 --> 00:41:09.380
and putting this together for folks.


00:41:09.380 --> 00:41:10.980
Oh, look, there's another amazing speakers


00:41:10.980 --> 00:41:12.460
in the audience right now.


00:41:14.100 --> 00:41:15.660
- Fantastic, yeah.


00:41:15.660 --> 00:41:16.820
- Sure. - That was awesome.


00:41:16.820 --> 00:41:20.140
- Well, how about, no, I don't mean to cut you off,


00:41:20.140 --> 00:41:23.060
but I was just curious if Michael had any extras.


00:41:23.060 --> 00:41:24.100
- You know that I do.


00:41:24.100 --> 00:41:26.460
I got a couple.


00:41:26.460 --> 00:41:29.300
Let me tell you about this little app I got,


00:41:29.300 --> 00:41:32.420
which I meant to do a little video so I could show you.


00:41:32.420 --> 00:41:34.600
I'm a huge fan of macOS,


00:41:34.600 --> 00:41:36.540
and I really enjoy working there.


00:41:36.540 --> 00:41:40.480
I love that like the terminal tools are like server stuff,


00:41:40.480 --> 00:41:42.840
but it's not, you know,


00:41:42.840 --> 00:41:44.840
you got all the nice little tools and whatnot.


00:41:44.840 --> 00:41:48.200
One of the things that I absolutely just don't understand


00:41:48.200 --> 00:41:53.120
is switching between windows is like nearly impossible


00:41:53.120 --> 00:41:54.640
if it's the same app.


00:41:54.640 --> 00:41:57.200
So if I got one web browser set of tabs and another,


00:41:57.200 --> 00:41:58.800
I'm gonna cycle between them,


00:41:58.800 --> 00:42:01.760
like command tab, the alt tab equivalent


00:42:01.760 --> 00:42:03.120
has no effect on that, right?


00:42:03.120 --> 00:42:04.040
Like what is this?


00:42:04.040 --> 00:42:05.880
So I found this cool app called Witch


00:42:05.880 --> 00:42:07.880
that lets you do all sorts of stuff like,


00:42:08.760 --> 00:42:12.180
you map it like alt tab instead of command tab.


00:42:12.180 --> 00:42:15.060
And it'll pull up, it's very similar,


00:42:15.060 --> 00:42:17.460
but then you can even like switch between tabs


00:42:17.460 --> 00:42:18.300
within a browser.


00:42:18.300 --> 00:42:20.980
So I wanna switch to Vivaldi,


00:42:20.980 --> 00:42:23.420
but onto this tab of that Vivaldi.


00:42:23.420 --> 00:42:26.500
So wherever it lives on what Vivaldi window,


00:42:26.500 --> 00:42:27.940
I don't care, I just wanna go to that tab,


00:42:27.940 --> 00:42:28.980
stuff like that. - Oh, nice.


00:42:28.980 --> 00:42:30.220
- Super, super cool.


00:42:30.220 --> 00:42:33.180
Just cycle between the last used window


00:42:33.180 --> 00:42:34.300
instead of last used app.


00:42:34.300 --> 00:42:35.740
And there's just a,


00:42:35.740 --> 00:42:38.400
the customizability of it is insane.


00:42:38.400 --> 00:42:40.720
Like it's truly crazy.


00:42:40.720 --> 00:42:41.800
And what does it cost?


00:42:41.800 --> 00:42:43.080
It costs $14 once.


00:42:43.080 --> 00:42:46.100
So if that frustrated you, check that out.


00:42:46.100 --> 00:42:51.520
Number two is I did this video called Don't Use Loops.


00:42:51.520 --> 00:42:53.160
Or do you actually need loops in Python?


00:42:53.160 --> 00:42:54.480
I was really just saying like some of the time


00:42:54.480 --> 00:42:58.200
you can use comprehensions of various types.


00:42:58.200 --> 00:42:59.360
That I already talked about.


00:42:59.360 --> 00:43:01.560
But in response to that, someone said,


00:43:01.560 --> 00:43:03.720
oh, I don't really think there's any difference


00:43:03.720 --> 00:43:06.880
between using a list comprehension and a for loop.


00:43:06.880 --> 00:43:08.000
they're the same.


00:43:08.000 --> 00:43:10.120
Like, how could you even tell me that they're different?


00:43:10.120 --> 00:43:14.080
Well, one, import dis, from dis import dis,


00:43:14.080 --> 00:43:16.600
dis like a dis assemble, and you'll see a big difference.


00:43:16.600 --> 00:43:19.880
But two, I put together an example that for 10 million times


00:43:19.880 --> 00:43:24.140
basically adds the numbers one to 10 million,


00:43:24.140 --> 00:43:27.920
even numbers one to 10 million to a list


00:43:27.920 --> 00:43:30.380
using a for loop and then using list comprehension.


00:43:30.380 --> 00:43:34.840
And it is about 25% faster to do the list comprehension


00:43:34.840 --> 00:43:38.520
then the loop, which isn't going to change people's world


00:43:38.520 --> 00:43:41.040
probably, but it's, you know, something to consider.


00:43:41.040 --> 00:43:43.240
- Yeah.


00:43:43.240 --> 00:43:45.480
- I'll link into a very small gist there.


00:43:45.480 --> 00:43:50.960
- I just, my, that people of mine,


00:43:50.960 --> 00:43:53.200
if you're going to do a loop at the very least,


00:43:53.200 --> 00:43:56.620
don't do for I in length of something.


00:43:56.620 --> 00:43:59.400
That's C, that's not Python.


00:43:59.400 --> 00:44:00.240
So.


00:44:00.240 --> 00:44:01.200
- Yes, please.


00:44:01.200 --> 00:44:05.200
or create a number, count equal, you know,


00:44:05.200 --> 00:44:07.460
I equals zero while I less than this,


00:44:07.460 --> 00:44:09.100
I plus plus on the inside, right?


00:44:09.100 --> 00:44:11.560
Like there's a lot of bad variations.


00:44:11.560 --> 00:44:13.800
- Yeah, those are, those are,


00:44:13.800 --> 00:44:17.600
I intentionally put things like that in interview questions


00:44:17.600 --> 00:44:20.240
to try to see if people are really Python programmers


00:44:20.240 --> 00:44:23.080
or if they're just C programmers.


00:44:23.080 --> 00:44:24.500
- And it might be fine that you're a C programmer


00:44:24.500 --> 00:44:25.440
coming into Python,


00:44:25.440 --> 00:44:28.280
but sometimes people will be dishonest with you


00:44:28.280 --> 00:44:29.120
during the interviews.


00:44:29.120 --> 00:44:30.940
Like, oh yes, I use Flask all the time.


00:44:30.940 --> 00:44:33.860
All right, how about you create a hello world view


00:44:33.860 --> 00:44:34.700
and run that?


00:44:34.700 --> 00:44:36.980
Like, I can't do that.


00:44:36.980 --> 00:44:38.100
Like, okay, well,


00:44:38.100 --> 00:44:39.820
then you probably don't use Flask all the time.


00:44:39.820 --> 00:44:40.820
You might use it sometimes,


00:44:40.820 --> 00:44:44.060
but not eight hours a day, like you told me.


00:44:44.060 --> 00:44:46.900
All right, another thing,


00:44:46.900 --> 00:44:48.900
another similar little gist thing is


00:44:48.900 --> 00:44:55.060
I was working on using a database API that is async only,


00:44:55.060 --> 00:44:57.260
but I want to use it in the web app


00:44:57.260 --> 00:44:59.420
that is not async at all.


00:45:00.460 --> 00:45:01.540
How do you do that?


00:45:01.540 --> 00:45:03.460
All right, we talked about like the result and blocking


00:45:03.460 --> 00:45:04.380
and all how painful that is.


00:45:04.380 --> 00:45:05.660
So I came up with this little gist


00:45:05.660 --> 00:45:09.420
that was working great in production, in dev.


00:45:09.420 --> 00:45:10.760
So this really simple thing,


00:45:10.760 --> 00:45:15.580
you can just wrap up an async call and say, run it.


00:45:15.580 --> 00:45:18.420
It internally manages a little loop


00:45:18.420 --> 00:45:19.340
and it calls run async.


00:45:19.340 --> 00:45:23.340
So if you've got like a database async call,


00:45:23.340 --> 00:45:24.400
you can just say,


00:45:24.400 --> 00:45:30.080
you know, go to the call and just say run,


00:45:30.080 --> 00:45:32.320
whatever, get the thing async with the parameters, right?


00:45:32.320 --> 00:45:34.700
So it's not like a decorator, you just call it.


00:45:34.700 --> 00:45:35.540
Really simple.


00:45:35.540 --> 00:45:38.420
In practice, what I found trying to deploy this


00:45:38.420 --> 00:45:43.400
to a website was the database backend was doing weird stuff


00:45:43.400 --> 00:45:45.300
with like what thread it's running on.


00:45:45.300 --> 00:45:49.100
The web server, microWSGI was like shuffling around


00:45:49.100 --> 00:45:51.380
like the order of when stuff ran on different threads


00:45:51.380 --> 00:45:52.900
and it was freaking out the event loop


00:45:52.900 --> 00:45:55.120
and you get all these errors about like,


00:45:55.120 --> 00:45:59.180
this thing has become detached from its asyncio loop


00:45:59.180 --> 00:46:01.340
where it came from one loop and is trying to continue


00:46:01.340 --> 00:46:03.940
on another loop, just like, oh no, what is all this?


00:46:03.940 --> 00:46:07.900
So I ended up coming up with a massively crazier version


00:46:07.900 --> 00:46:10.820
that people can check out that basically coordinates


00:46:10.820 --> 00:46:12.180
all the work to a background thread,


00:46:12.180 --> 00:46:15.420
runs it all in the same place and then puts it back.


00:46:15.420 --> 00:46:18.000
It works fabulously, it is horrifying.


00:46:18.000 --> 00:46:20.220
So you can take it for what it is, anyway.


00:46:20.220 --> 00:46:23.020
As part of this conversation,


00:46:23.020 --> 00:46:26.340
it worked really well, but it looks really bad.


00:46:27.700 --> 00:46:32.140
Bill Jones, so from court, I believe,


00:46:32.140 --> 00:46:34.220
sent over a thing that said,


00:46:34.220 --> 00:46:35.700
"One of the problems with async I/O


00:46:35.700 --> 00:46:37.180
is if it's already running,


00:46:37.180 --> 00:46:39.040
and then you call async version,


00:46:39.040 --> 00:46:42.020
which internally happens to use the same pattern,


00:46:42.020 --> 00:46:44.900
it's gonna crash and say it's already running,


00:46:44.900 --> 00:46:46.060
which is weird."


00:46:46.060 --> 00:46:48.300
So there's this thing called nest I/O,


00:46:48.300 --> 00:46:53.220
which allows you to basically have a re-entrancy.


00:46:53.220 --> 00:46:54.660
So if you get the runtime error,


00:46:54.660 --> 00:46:56.580
this event loop is already running.


00:46:56.580 --> 00:46:58.580
if it is just run, you know, whatever.


00:46:58.580 --> 00:47:01.780
But that's the error you get. So this will allow you to basically


00:47:01.780 --> 00:47:03.300
re-


00:47:03.300 --> 00:47:05.300
like continue on in the same loop.


00:47:05.300 --> 00:47:08.260
All right, those are all my extras. I thought those were all a little fun.


00:47:08.260 --> 00:47:11.700
Nice.


00:47:11.700 --> 00:47:16.420
Combining threading and async I/O in the same little sub-module is brave.


00:47:16.420 --> 00:47:20.760
I did not get to that position willingly.


00:47:23.700 --> 00:47:30.260
Not at all like but everything I had tried it didn't matter and people say oh you should use async io. Run that managed it for you


00:47:30.260 --> 00:47:36.180
Uh, yeah, except for that. It wasn't working in the weird web servers that are doing all sorts of threading tricks


00:47:36.180 --> 00:47:39.860
Right, like it was the only thing that worked and so


00:47:39.860 --> 00:47:42.660
There it was


00:47:42.660 --> 00:47:46.260
All right, that was not funny, but maybe i've got something funny for you


00:47:46.260 --> 00:47:49.220
You guys ready for a joke?


00:47:49.220 --> 00:47:50.900
Yes, always


00:47:50.900 --> 00:47:52.900
Okay, definitely so


00:47:52.900 --> 00:48:04.780
This one is about mistakes that people make with testing for truthiness versus assignment.


00:48:04.780 --> 00:48:08.900
And so it's a cartoon and there's these humans being ripped apart by robots.


00:48:08.900 --> 00:48:11.820
It says, "Oh no, the robots are killing us."


00:48:11.820 --> 00:48:13.220
And someone asks, "Why?


00:48:13.220 --> 00:48:14.220
But why?


00:48:14.220 --> 00:48:15.780
We never programmed to do this."


00:48:15.780 --> 00:48:19.420
And then there's like a computer with some code on the screen.


00:48:19.420 --> 00:48:21.560
In the background, you see robots killing people.


00:48:21.560 --> 00:48:24.540
And it says, it has actually the code for the robot.


00:48:24.540 --> 00:48:28.620
It says, "Void, interact with humans.


00:48:28.620 --> 00:48:31.980
If is crazy robot equals true, kill humans.


00:48:31.980 --> 00:48:33.720
Else be nice to humans."


00:48:33.720 --> 00:48:34.900
(laughs)


00:48:34.900 --> 00:48:36.460
- But it's an assignment, not a quality.


00:48:36.460 --> 00:48:38.660
- It's a single equals instead of a double equals.


00:48:38.660 --> 00:48:40.940
(laughs)


00:48:40.940 --> 00:48:42.180
End of the world has come.


00:48:42.180 --> 00:48:45.020
- You've just assigned it to be a crazy killer robot.


00:48:45.020 --> 00:48:46.300
Crazy murdering robot.


00:48:46.300 --> 00:48:47.420
- Yes, exactly.


00:48:47.420 --> 00:48:48.260
(laughs)


00:48:48.260 --> 00:48:49.080
- Nice.


00:48:49.080 --> 00:48:54.560
Anthony would save us from this cartoon apocalypse by saying,


00:48:54.560 --> 00:48:56.760
remember your unit tests.


00:48:56.760 --> 00:49:00.360
>> Yeah, and beta testers.


00:49:00.360 --> 00:49:02.160
>> Why do we keep losing QA people?


00:49:02.160 --> 00:49:04.480
I just don't understand.


00:49:04.480 --> 00:49:05.320
Where do they go?


00:49:05.320 --> 00:49:07.920
I don't know.


00:49:07.920 --> 00:49:09.400
>> Just ship it to beta.


00:49:09.400 --> 00:49:10.320
>> Exactly.


00:49:10.320 --> 00:49:11.440
Exactly.


00:49:11.440 --> 00:49:12.880
>> Segment your population.


00:49:12.880 --> 00:49:13.960
A/B test this stuff.


00:49:13.960 --> 00:49:17.960
Nice.


00:49:17.960 --> 00:49:21.120
But thank you, Calvin, for coming on the show this time.


00:49:21.120 --> 00:49:21.960
It was totally fun.


00:49:21.960 --> 00:49:22.680
Love it.


00:49:22.680 --> 00:49:23.440
Yeah, absolutely.


00:49:23.440 --> 00:49:24.880
Brian, good to be here as always.


00:49:24.880 --> 00:49:25.380
Thank you.


00:49:25.380 --> 00:49:26.360
That was a good time.


00:49:26.360 --> 00:49:26.860
Always.


00:49:26.860 --> 00:49:27.360
All right.


00:49:27.360 --> 00:49:28.120
See you later.


00:49:28.120 --> 00:49:30.120
Bye, everyone.

