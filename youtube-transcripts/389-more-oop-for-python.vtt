WEBVTT

00:00:00.001 --> 00:00:07.240
>> Oh, hey, Michael.

00:00:07.240 --> 00:00:09.160
I forgot I was on point.

00:00:09.160 --> 00:00:10.640
>> Hey, Brian.

00:00:10.640 --> 00:00:11.400
>> Hey.

00:00:11.400 --> 00:00:12.680
>> What are we doing today anyway?

00:00:12.680 --> 00:00:15.440
>> Yeah, well, I'm a little out of it.

00:00:15.440 --> 00:00:17.600
Still, it must be jet lag still.

00:00:17.600 --> 00:00:20.920
So I'm in a hotel room recording from Munich,

00:00:20.920 --> 00:00:23.120
and that's why I don't sound that great.

00:00:23.120 --> 00:00:24.600
So sorry, everybody.

00:00:24.600 --> 00:00:26.200
>> You sound plenty good.

00:00:26.200 --> 00:00:28.000
We're happy you could make it and happy

00:00:28.000 --> 00:00:30.080
we didn't have to skip a week or something.

00:00:30.080 --> 00:00:33.800
>> Yeah. Nice, cool backlighting though in the hotel room.

00:00:33.800 --> 00:00:38.160
>> Yeah. We're going to get the German news perspective,

00:00:38.160 --> 00:00:40.560
not the North American news perspective,

00:00:40.560 --> 00:00:43.800
because that's where you're in the zeitgeist of that land.

00:00:43.800 --> 00:00:45.400
>> I've been here for a day.

00:00:45.400 --> 00:00:48.080
>> It happens quick, Brian. It happens quick.

00:00:48.080 --> 00:00:49.720
>> Let's kick it off.

00:00:49.720 --> 00:00:50.880
>> Let's do it.

00:00:50.880 --> 00:00:53.280
>> Hello and welcome to Python Bytes where we deliver

00:00:53.280 --> 00:00:55.840
Python news and headlines directly to your earbuds.

00:00:55.840 --> 00:00:58.480
This is Episode 389,

00:00:58.480 --> 00:01:01.520
recorded June 24th. I'm Brian Okken.

00:01:01.520 --> 00:01:03.480
>> I'm Michael Kennedy.

00:01:03.480 --> 00:01:06.320
>> This episode is brought to you by Scout APM.

00:01:06.320 --> 00:01:08.600
Listen to their spot later in the show

00:01:08.600 --> 00:01:12.200
and check them out by going to the show notes and clicking it.

00:01:12.200 --> 00:01:15.120
You can connect with us on Mastodon.

00:01:15.120 --> 00:01:16.840
We love hearing from you.

00:01:16.840 --> 00:01:19.920
If you're listening to this later,

00:01:19.920 --> 00:01:23.240
join us live every once in a while if you want.

00:01:23.240 --> 00:01:27.160
Go to pythonbytes.fm/live to be part of the audience,

00:01:27.160 --> 00:01:30.520
and it'll tell you when the next episode is.

00:01:30.520 --> 00:01:33.760
I'd like to say thank you to everybody that signed up

00:01:33.760 --> 00:01:36.960
for the mailing list to get our show notes.

00:01:36.960 --> 00:01:42.240
It's nice to see that little creeping up in listeners.

00:01:42.240 --> 00:01:46.560
I actually find it quite handy to find those notes later.

00:01:46.560 --> 00:01:48.640
>> Absolutely. Brian, I would like to add,

00:01:48.640 --> 00:01:50.960
we're coming up on a milestone number there,

00:01:50.960 --> 00:01:55.360
and I feel like we should probably do some giveaway or some contest.

00:01:55.360 --> 00:01:58.960
It'll probably happen in about the next month to six weeks.

00:01:58.960 --> 00:02:01.520
So you got to be on the list to win

00:02:01.520 --> 00:02:04.800
the prize that we invent for the thing that we'll talk about later.

00:02:04.800 --> 00:02:06.640
So sign up. By the way,

00:02:06.640 --> 00:02:10.040
my side of them click on "Newsletter" to put your info in.

00:02:10.040 --> 00:02:13.120
>> All right. Well, why don't you kick us off with,

00:02:13.120 --> 00:02:14.600
it's a nice sunny day,

00:02:14.600 --> 00:02:16.960
maybe some solar topic.

00:02:16.960 --> 00:02:18.800
>> Yes, let's do it.

00:02:18.800 --> 00:02:20.560
>> How about this, Brian?

00:02:20.560 --> 00:02:22.560
Let's talk about Solara.

00:02:22.560 --> 00:02:25.840
This one comes to us as a recommendation from a listener.

00:02:25.840 --> 00:02:28.960
So thank you to Florian for sending this in.

00:02:28.960 --> 00:02:39.640
Solara is a pure Python framework,

00:02:39.640 --> 00:02:41.240
but in React style.

00:02:41.240 --> 00:02:45.200
So it is a rapid application development,

00:02:45.200 --> 00:02:49.240
somewhat data science-y focused front-end framework,

00:02:49.240 --> 00:02:53.480
a framework for building front-end UIs that's like React,

00:02:53.480 --> 00:02:58.760
that allows you to write better Jupyter and web apps.

00:02:58.760 --> 00:03:01.600
So it does this by basically integrating

00:03:01.600 --> 00:03:07.240
IPy widgets and other types of React-based APIs,

00:03:07.240 --> 00:03:11.280
programmable like code, not APIs you call,

00:03:11.280 --> 00:03:13.240
on top of IPython widgets.

00:03:13.240 --> 00:03:14.520
So that's super cool.

00:03:14.520 --> 00:03:17.040
It can either be stuff that runs inside notebooks

00:03:17.040 --> 00:03:19.320
that makes them better interactive things,

00:03:19.320 --> 00:03:23.600
or it can just be standalone web apps,

00:03:23.600 --> 00:03:25.920
like FastAPI or stuff like that.

00:03:25.920 --> 00:03:27.720
Yeah? Pretty neat, huh?

00:03:27.720 --> 00:03:28.520
>> Yeah.

00:03:28.520 --> 00:03:33.520
>> So we always need more UI frameworks in Python, I believe.

00:03:33.520 --> 00:03:39.840
I would put this if I was considering Streamlit or Dash

00:03:39.840 --> 00:03:42.760
or something along those lines.

00:03:42.760 --> 00:03:44.920
It's kind of in that realm, okay?

00:03:44.920 --> 00:03:46.280
So let's see.

00:03:46.280 --> 00:03:49.040
It talks about the benefits of putting things together,

00:03:49.040 --> 00:03:52.120
but the most important thing I would recommend to you

00:03:52.120 --> 00:03:56.200
is you could probably check out their examples to start.

00:03:56.200 --> 00:03:59.080
So let's check out their examples.

00:03:59.080 --> 00:04:02.160
So in this area, we've got a whole bunch

00:04:02.160 --> 00:04:04.800
of different examples that don't want to scroll.

00:04:04.800 --> 00:04:05.920
Why won't you scroll?

00:04:05.920 --> 00:04:07.440
Hold on.

00:04:07.440 --> 00:04:08.280
There we go.

00:04:08.280 --> 00:04:09.120
Now it scrolls.

00:04:09.120 --> 00:04:09.960
Yay, browser.

00:04:11.880 --> 00:04:14.440
So let's pick one of these.

00:04:14.440 --> 00:04:15.520
Here are the full-screen ones.

00:04:15.520 --> 00:04:16.480
These are fun.

00:04:16.480 --> 00:04:19.400
Jesus, really doesn't like to scroll, does it?

00:04:19.400 --> 00:04:20.280
Full screen.

00:04:20.280 --> 00:04:22.960
Okay, so we've got different ones here.

00:04:22.960 --> 00:04:23.800
You can just pull these up,

00:04:23.800 --> 00:04:27.480
and let's just say the scatter one's kind of interesting.

00:04:27.480 --> 00:04:28.320
Check this out, right?

00:04:28.320 --> 00:04:29.520
This is how this works.

00:04:29.520 --> 00:04:34.520
So you take your iPython widgets,

00:04:34.520 --> 00:04:38.280
your notebook-like stuff,

00:04:38.280 --> 00:04:40.200
and look what you would see on the screen

00:04:40.200 --> 00:04:41.040
if you load this up.

00:04:41.040 --> 00:04:43.280
It's like a full UI.

00:04:43.280 --> 00:04:47.360
It fills the screen here, right?

00:04:47.360 --> 00:04:49.480
And you can either upload a dataset and figure out,

00:04:49.480 --> 00:04:50.320
I don't know how to figure out

00:04:50.320 --> 00:04:51.360
what the dataset's supposed to be,

00:04:51.360 --> 00:04:53.440
but probably a CSV or something.

00:04:53.440 --> 00:04:56.880
And then you can also just click Show Me the Sample Data.

00:04:56.880 --> 00:04:57.800
And check it out.

00:04:57.800 --> 00:05:00.520
You get this cool, interactive, probably plotly,

00:05:00.520 --> 00:05:04.080
yes, plotly UI here.

00:05:04.080 --> 00:05:07.200
And I can change the size of all these things

00:05:07.200 --> 00:05:08.480
that it works on.

00:05:08.480 --> 00:05:10.120
I can say I would like to see,

00:05:10.120 --> 00:05:13.800
this talks about GDP, life expectancy by country.

00:05:13.800 --> 00:05:18.040
So I could say I wanna see the life expectancy by country,

00:05:18.040 --> 00:05:19.360
and pull that up.

00:05:19.360 --> 00:05:23.320
Continent, rather, I think is how they have data.

00:05:23.320 --> 00:05:24.160
Where is this?

00:05:24.160 --> 00:05:25.200
It was working just a minute ago.

00:05:25.200 --> 00:05:27.040
Why is this not running for me?

00:05:27.040 --> 00:05:29.000
Maybe I made the size too weird for it.

00:05:29.000 --> 00:05:33.000
Don't know.

00:05:33.000 --> 00:05:37.160
Let's go.

00:05:37.160 --> 00:05:39.680
Country.

00:05:39.680 --> 00:05:42.360
I guess I'm picking the wrong thing.

00:05:42.360 --> 00:05:43.200
Continent.

00:05:43.200 --> 00:05:44.160
- That's just the live demo, Chris.

00:05:44.160 --> 00:05:45.000
It just won't work.

00:05:45.000 --> 00:05:45.840
- It totally is.

00:05:45.840 --> 00:05:46.680
I don't know why it's not working.

00:05:46.680 --> 00:05:47.680
Anyway, there we go.

00:05:47.680 --> 00:05:49.200
I have to do, I just have to reverse it.

00:05:49.200 --> 00:05:50.040
There we are.

00:05:50.040 --> 00:05:50.880
This is looking good.

00:05:50.880 --> 00:05:55.280
So you can say, show me the life expectancy by country.

00:05:55.280 --> 00:05:57.720
And then you get all these really interesting,

00:05:57.720 --> 00:05:58.840
interactive bits.

00:05:58.840 --> 00:05:59.680
You can resize it.

00:05:59.680 --> 00:06:04.680
So this is all a super easy UI to build, Brian,

00:06:04.680 --> 00:06:06.200
with this UI framework.

00:06:06.200 --> 00:06:09.200
- That's pretty cool.

00:06:09.200 --> 00:06:11.040
- And if you go back and look at the example,

00:06:11.040 --> 00:06:14.760
they'll show you one of the cells in a Jupyter notebook

00:06:14.760 --> 00:06:17.480
can just be this graph here.

00:06:17.480 --> 00:06:18.920
And it has a full screen option,

00:06:18.920 --> 00:06:21.040
or it can just be the output of a cell.

00:06:21.040 --> 00:06:23.440
It's one of these interactive apps.

00:06:23.440 --> 00:06:24.520
How wild is that, huh?

00:06:24.520 --> 00:06:26.120
Isn't that crazy?

00:06:26.120 --> 00:06:27.080
Yeah.

00:06:27.080 --> 00:06:29.280
And then you can also go and see,

00:06:29.280 --> 00:06:31.180
what does a tutorial look like?

00:06:31.180 --> 00:06:34.040
Somewhere.

00:06:34.040 --> 00:06:38.280
I gotta go to the get started, quick start.

00:06:38.280 --> 00:06:39.360
So if you go to the quick start,

00:06:39.360 --> 00:06:44.360
it'll show you basically how to program this stuff.

00:06:44.360 --> 00:06:46.680
And it's super easy.

00:06:46.680 --> 00:06:50.240
Just put a decorator, say this is a component,

00:06:50.240 --> 00:06:53.520
and it shows up in your page.

00:06:53.520 --> 00:06:55.360
It's really focused on building these little

00:06:55.360 --> 00:06:57.480
reasonable and composable components.

00:06:57.480 --> 00:06:59.920
So it's a little bit like Shiny, actually, I think.

00:06:59.920 --> 00:07:00.760
Actually.

00:07:00.760 --> 00:07:05.680
So anyway, super cool way to build these interactive

00:07:05.680 --> 00:07:07.720
dashboards and stuff that's more than just a picture,

00:07:07.720 --> 00:07:09.960
but a thing you can actually play with

00:07:09.960 --> 00:07:11.120
and publish to the web.

00:07:11.120 --> 00:07:14.320
- Yeah, especially, I love stuff like this,

00:07:14.320 --> 00:07:16.680
especially if you don't really know how you wanna

00:07:16.680 --> 00:07:17.780
look at the data yet.

00:07:17.780 --> 00:07:23.000
You can give people lots of options.

00:07:23.000 --> 00:07:23.840
- Absolutely.

00:07:23.840 --> 00:07:27.000
I don't see a price.

00:07:27.000 --> 00:07:28.760
All I see is Starus on GitHub.

00:07:28.760 --> 00:07:32.280
So I think it's just a open source project

00:07:32.280 --> 00:07:33.680
that you can use for your stuff,

00:07:33.680 --> 00:07:36.920
not a commercial thing, from what I can tell.

00:07:36.920 --> 00:07:38.880
- So one of the things, I was looking at this

00:07:38.880 --> 00:07:41.320
the other day, and I don't know if you came across

00:07:41.320 --> 00:07:44.240
an answer to this question, but it said,

00:07:44.240 --> 00:07:46.640
a pure Python React style framework for scaling

00:07:46.640 --> 00:07:49.680
Jupyter and web apps.

00:07:49.680 --> 00:07:53.720
The and is, I was a little bit confused.

00:07:53.720 --> 00:07:57.880
Do I have to be a Jupyter type programmer to do this?

00:07:57.880 --> 00:07:58.720
Or do you know?

00:07:58.720 --> 00:08:02.760
- No, if you wanna use FastAPI, it can.

00:08:02.760 --> 00:08:05.200
And there's a thing called, what do they call it?

00:08:06.080 --> 00:08:09.120
Solaris server or something like that.

00:08:09.120 --> 00:08:10.840
So you can run that, and it says, look,

00:08:10.840 --> 00:08:14.200
it'll run on FastAPI, Starlet, Flask, and so on.

00:08:14.200 --> 00:08:15.040
- Okay.

00:08:15.040 --> 00:08:16.160
- I imagine you just create,

00:08:16.160 --> 00:08:21.040
basically serve up some common template

00:08:21.040 --> 00:08:23.160
that starts it all, those kind of things.

00:08:23.160 --> 00:08:24.400
The other thing that's worth pointing out

00:08:24.400 --> 00:08:25.880
in this whole discussion is,

00:08:25.880 --> 00:08:28.760
it says it's built on top of Reacton.

00:08:28.760 --> 00:08:33.640
And Reacton is this interesting project here.

00:08:35.320 --> 00:08:38.200
It says, it's like React for, yeah, it is.

00:08:38.200 --> 00:08:40.120
It's a really good logo.

00:08:40.120 --> 00:08:45.080
It's a Python logo as the nucleus of an atom,

00:08:45.080 --> 00:08:47.400
and then a bunch of little small Python logos

00:08:47.400 --> 00:08:49.360
circling it like electrons, it's good.

00:08:49.360 --> 00:08:53.560
So this basically lets you create code

00:08:53.560 --> 00:08:57.040
for IPython widgets that is in the style of React.

00:08:57.040 --> 00:08:58.240
So if you go down here,

00:08:58.240 --> 00:09:03.040
here, you can create, for example,

00:09:03.880 --> 00:09:06.320
a component which is a clickable button,

00:09:06.320 --> 00:09:08.840
and you basically initialize the state,

00:09:08.840 --> 00:09:10.440
and then you write the handler.

00:09:10.440 --> 00:09:14.120
- And just like a handful of widget code.

00:09:14.120 --> 00:09:15.840
- Yeah, yeah, it's pretty neat.

00:09:15.840 --> 00:09:17.760
So that's what this thing is all about,

00:09:17.760 --> 00:09:19.560
is creating these little widget-type things,

00:09:19.560 --> 00:09:21.960
or components, and then building up your UI out of it.

00:09:21.960 --> 00:09:25.160
So I say, certainly worth checking out.

00:09:25.160 --> 00:09:28.760
- I kind of want to just do one of those,

00:09:28.760 --> 00:09:30.600
like just a button that just tells you

00:09:30.600 --> 00:09:32.200
how many times you've clicked it.

00:09:32.720 --> 00:09:34.160
(laughing)

00:09:34.160 --> 00:09:35.480
- Exactly.

00:09:35.480 --> 00:09:37.080
- I'm not gonna do anything.

00:09:37.080 --> 00:09:40.480
- After it gets past 100, it'll be like,

00:09:40.480 --> 00:09:41.640
what are you doing with your life?

00:09:41.640 --> 00:09:43.200
Leave and go do something else.

00:09:43.200 --> 00:09:44.280
Stop clicking me.

00:09:44.280 --> 00:09:46.560
- Yeah.

00:09:46.560 --> 00:09:48.600
- All right. - Nice.

00:09:48.600 --> 00:09:49.480
- Yeah, people check that out.

00:09:49.480 --> 00:09:50.320
Thanks, Florian.

00:09:50.320 --> 00:09:56.200
- Next up, I wanted to talk about coverage a little bit.

00:09:56.200 --> 00:09:59.720
I think, no, I'm on the wrong page.

00:09:59.720 --> 00:10:01.440
I do want to talk about coverage.

00:10:01.440 --> 00:10:04.120
So Ned Batchelder wrote an article called

00:10:04.120 --> 00:10:08.280
Coverage at a Crossroads.

00:10:08.280 --> 00:10:09.600
And so there's a couple of things

00:10:09.600 --> 00:10:11.280
I wanted to point out about this.

00:10:11.280 --> 00:10:16.200
So the gist of it is,

00:10:16.200 --> 00:10:22.680
Ned wants to make coverage.py faster.

00:10:22.680 --> 00:10:24.480
And one of the issues is,

00:10:24.480 --> 00:10:29.000
with the way coverage is written right now,

00:10:29.000 --> 00:10:30.560
and the way it's composed.

00:10:30.560 --> 00:10:33.680
So he starts the conversation

00:10:33.680 --> 00:10:36.360
discussing really how coverage works.

00:10:36.360 --> 00:10:37.800
And that's the part where I really,

00:10:37.800 --> 00:10:39.640
like, even if you don't care whether

00:10:39.640 --> 00:10:40.960
coverage is fast or not,

00:10:40.960 --> 00:10:45.520
this is a nice, fun article to realize how coverage works.

00:10:45.520 --> 00:10:48.640
And so coverage uses a thing called a trace function.

00:10:48.640 --> 00:10:50.160
So it takes your code

00:10:50.160 --> 00:10:52.440
and adds these trace functions to every line,

00:10:52.440 --> 00:10:56.000
so that coverage can know when any line gets hit.

00:10:56.000 --> 00:10:58.160
And then coverage also does branch coverage.

00:10:58.160 --> 00:11:00.440
So coverage does branch coverage

00:11:00.440 --> 00:11:03.440
with allowing a thing called the arcs.

00:11:03.440 --> 00:11:07.040
So it generates these four lines that look like branches,

00:11:07.040 --> 00:11:10.920
these arcs of like, it could go,

00:11:10.920 --> 00:11:13.520
like you could go from line one to line two,

00:11:13.520 --> 00:11:16.680
or line two to line three, things like that.

00:11:16.680 --> 00:11:18.600
And so it keeps track of all that.

00:11:18.600 --> 00:11:23.600
And the reason why things could be faster is because,

00:11:23.600 --> 00:11:26.360
like, let's say you hit line two already.

00:11:26.360 --> 00:11:27.640
You don't have to,

00:11:27.640 --> 00:11:29.600
and there's no branches in there or anything.

00:11:29.600 --> 00:11:30.920
It's just a line of code.

00:11:30.920 --> 00:11:35.600
You wouldn't need to actually hit the trace function

00:11:35.600 --> 00:11:37.920
every time you hit that,

00:11:37.920 --> 00:11:40.280
but there's no way to take it out.

00:11:40.280 --> 00:11:44.200
So there's some ideas around making it faster.

00:11:44.200 --> 00:11:46.560
And slipcover, for instance, has a bunch of ways.

00:11:46.560 --> 00:11:50.400
So it uses a bytecode thing that,

00:11:50.400 --> 00:11:52.160
there's a discussion around slipcover

00:11:52.160 --> 00:11:54.160
as a different coverage tool.

00:11:54.160 --> 00:11:57.640
There's also discussion around sys.monitoring

00:11:57.640 --> 00:11:59.560
that came in in Python 3.12.

00:11:59.560 --> 00:12:01.760
And with sys.monitoring,

00:12:01.760 --> 00:12:04.200
you can do something like a trace function,

00:12:04.200 --> 00:12:06.640
but it's something that you can take away later.

00:12:06.640 --> 00:12:09.240
So the idea, like for line coverage,

00:12:09.240 --> 00:12:10.560
this would work just great.

00:12:10.560 --> 00:12:13.800
So you could just say with sys.monitoring,

00:12:13.800 --> 00:12:16.840
every time, if I hit this line, great.

00:12:16.840 --> 00:12:18.120
Now I can take that out.

00:12:18.120 --> 00:12:20.720
So I don't have to worry about that line ever again.

00:12:23.240 --> 00:12:27.600
But there's some discussion that Ned has around,

00:12:27.600 --> 00:12:31.360
how do you deal with branching for that?

00:12:31.360 --> 00:12:36.360
And it's an interesting take on kind of an interesting idea.

00:12:36.360 --> 00:12:38.240
There's an interesting problem set

00:12:38.240 --> 00:12:41.800
for how to deal with it.

00:12:41.800 --> 00:12:43.840
Kind of like, maybe arcs aren't the right way to do it.

00:12:43.840 --> 00:12:47.800
Maybe there's some other way to deal with branch coverage.

00:12:47.800 --> 00:12:51.920
And it's not trivial because there's an example

00:12:51.920 --> 00:12:56.920
of a try finally block with a return statement

00:12:56.920 --> 00:12:58.640
happening in the try.

00:12:58.640 --> 00:13:02.480
So you don't necessarily hit,

00:13:02.480 --> 00:13:05.720
you always will hit the finally, even with the return,

00:13:05.720 --> 00:13:09.160
but you don't know if you'll hit the line after.

00:13:09.160 --> 00:13:11.080
You'd have to look at the code.

00:13:11.080 --> 00:13:13.560
But really fun discussion.

00:13:13.560 --> 00:13:15.720
There's a call out of where, if you wanna get involved,

00:13:15.720 --> 00:13:18.480
you'd like to offer some solutions

00:13:18.480 --> 00:13:20.880
or just help with the discussion.

00:13:20.880 --> 00:13:21.720
There's that too.

00:13:21.720 --> 00:13:23.000
But even if you're not gonna help,

00:13:23.000 --> 00:13:28.000
I think it's a cool discussion of how coverage works.

00:13:28.000 --> 00:13:31.480
And I also just wanted to thank Ned

00:13:31.480 --> 00:13:33.840
for putting time and effort into making sure

00:13:33.840 --> 00:13:35.120
coverage is an awesome tool.

00:13:35.120 --> 00:13:35.960
So thanks, Ned.

00:13:35.960 --> 00:13:38.160
- Yeah, that's pretty excellent.

00:13:38.160 --> 00:13:41.240
And of course there's gonna be functions

00:13:41.240 --> 00:13:45.240
and branches of execution that are in some kind of tight loop

00:13:45.240 --> 00:13:47.760
and run a million times.

00:13:47.760 --> 00:13:49.600
But after the third time,

00:13:49.600 --> 00:13:52.320
you've already realized it's 100% covered.

00:13:52.320 --> 00:13:54.160
So if you could just,

00:13:54.160 --> 00:13:57.200
'cause running with coverage and stuff like that,

00:13:57.200 --> 00:13:59.840
all this profiling and code coverage stuff

00:13:59.840 --> 00:14:01.440
puts a serious hurting on the performance.

00:14:01.440 --> 00:14:03.680
So if you could say, all right, that part's done,

00:14:03.680 --> 00:14:07.160
100%, stop slowing it down, that'd be cool.

00:14:07.160 --> 00:14:13.120
- Yeah, I did like this cool idea with the other ones

00:14:13.120 --> 00:14:16.880
of creating, like adding no op statements in

00:14:16.880 --> 00:14:18.280
just so that for branches,

00:14:18.280 --> 00:14:21.320
so you just like check to see,

00:14:21.320 --> 00:14:24.720
if I hit that, then that branch was taken.

00:14:24.720 --> 00:14:25.680
That's kind of a neat idea.

00:14:25.680 --> 00:14:30.240
You could add these extra little hooks, but anyway.

00:14:30.240 --> 00:14:32.560
- Cool.

00:14:32.560 --> 00:14:33.600
Awesome, awesome.

00:14:33.600 --> 00:14:43.240
Up next, thank you to Scout APM.

00:14:44.200 --> 00:14:48.320
So let me tell you real quick about Scout APM.

00:14:48.320 --> 00:14:50.040
They're big supporters of Python Bytes,

00:14:50.040 --> 00:14:51.760
so we appreciate that very much.

00:14:51.760 --> 00:14:56.040
So if you are tired of spending hours

00:14:56.040 --> 00:14:58.040
trying to find the root cause of issues

00:14:58.040 --> 00:14:59.280
impacting your performance,

00:14:59.280 --> 00:15:03.080
then you owe it to yourself to check out Scout APM.

00:15:03.080 --> 00:15:05.000
They're a leading Python application

00:15:05.000 --> 00:15:08.000
performance monitoring tool, APM,

00:15:08.000 --> 00:15:09.600
that helps you identify and solve

00:15:09.600 --> 00:15:12.440
performance abnormalities faster and easier.

00:15:12.440 --> 00:15:15.440
Scout APM ties bottlenecks such as memory leaks,

00:15:15.440 --> 00:15:17.400
slow database queries, background jobs,

00:15:17.400 --> 00:15:19.240
and the dreaded N plus one queries

00:15:19.240 --> 00:15:23.520
that you can end up if you do lazy loading in your ORM,

00:15:23.520 --> 00:15:25.800
then you say, "Oh no, why is it so slow?

00:15:25.800 --> 00:15:27.120
"Why are you doing 200 database queries

00:15:27.120 --> 00:15:28.840
"for what should be one?"

00:15:28.840 --> 00:15:31.040
So you can find out things like that.

00:15:31.040 --> 00:15:32.760
And it links it back directly to the source code,

00:15:32.760 --> 00:15:34.960
so you can spend less time in the debugger

00:15:34.960 --> 00:15:38.040
and peeling logs and just finding the problems

00:15:38.040 --> 00:15:39.520
and moving on.

00:15:39.520 --> 00:15:40.920
And you'll love it because it's built

00:15:40.920 --> 00:15:42.480
for developers by developers.

00:15:42.480 --> 00:15:44.280
It makes it easy to get set up.

00:15:44.280 --> 00:15:46.560
Seriously, you can do it in less than four minutes.

00:15:46.560 --> 00:15:47.520
So that's awesome.

00:15:47.520 --> 00:15:51.080
And the best part is the pricing is straightforward.

00:15:51.080 --> 00:15:52.520
You only pay for the data that you use

00:15:52.520 --> 00:15:56.680
with no hidden overage fees or per seat pricing.

00:15:56.680 --> 00:15:58.640
And I just learned this, Brian,

00:15:58.640 --> 00:16:02.240
they also have, they provide the pro version for free

00:16:02.240 --> 00:16:03.840
to all open source projects.

00:16:03.840 --> 00:16:05.680
So if you're an open source maintainer

00:16:05.680 --> 00:16:09.480
and you want to have Scout APM for that project,

00:16:09.480 --> 00:16:10.920
just shoot them a message or something

00:16:10.920 --> 00:16:12.600
on their pricing page about that.

00:16:12.600 --> 00:16:14.120
So you can start your free trial

00:16:14.120 --> 00:16:16.960
and get instant insights today.

00:16:16.960 --> 00:16:19.480
Visit pythonbytes.fm/scout.

00:16:19.480 --> 00:16:21.920
The link is in your podcast player show notes as well.

00:16:21.920 --> 00:16:22.840
And please use that link.

00:16:22.840 --> 00:16:26.200
Don't just search for them because otherwise

00:16:26.200 --> 00:16:27.520
they don't think you came from us.

00:16:27.520 --> 00:16:28.960
And then they'd stop supporting the show.

00:16:28.960 --> 00:16:31.680
So please use our link, pythonbytes.fm/scout.

00:16:31.680 --> 00:16:32.520
Check them out.

00:16:32.520 --> 00:16:34.600
It really supports the show.

00:16:34.600 --> 00:16:37.520
Indeed, thank you.

00:16:37.520 --> 00:16:42.520
Now, this one, Brian, comes to us from another Brian.

00:16:42.520 --> 00:16:46.160
Way in the past though.

00:16:46.160 --> 00:16:50.160
This is Brian Skin that back in January said,

00:16:50.160 --> 00:16:51.000
"Hey, guess what?

00:16:51.000 --> 00:16:53.480
"PEP 698 has been accepted.

00:16:53.480 --> 00:16:55.160
"How awesome is that?"

00:16:55.160 --> 00:17:00.160
And it hasn't bubbled to the top of my list until now,

00:17:00.160 --> 00:17:01.720
but I think it's worth talking about.

00:17:01.720 --> 00:17:04.160
This is in Python 3.12.

00:17:04.160 --> 00:17:07.480
And yeah, let's check it out.

00:17:07.480 --> 00:17:09.720
So if we go over to the PEP,

00:17:09.720 --> 00:17:14.560
it is an override decorator for static typing.

00:17:14.560 --> 00:17:16.360
So you know, some languages,

00:17:16.360 --> 00:17:22.840
C#, I think C++, but it's been a while since I messed with it,

00:17:22.840 --> 00:17:26.760
have explicit override keywords and virtual methods.

00:17:26.760 --> 00:17:28.320
I know C++ has virtual methods.

00:17:28.320 --> 00:17:30.600
I just don't know if you indicate that you're overriding it.

00:17:30.600 --> 00:17:32.640
Tell me, Brian, do you use the override keyword

00:17:32.640 --> 00:17:35.480
or do you just write the function?

00:17:35.480 --> 00:17:37.200
- You just write it, but you can--

00:17:37.200 --> 00:17:39.160
- Yeah, that's what I thought.

00:17:39.160 --> 00:17:40.880
Yeah, and in C#, you actually say

00:17:40.880 --> 00:17:42.680
there's a virtual function in the base class

00:17:42.680 --> 00:17:45.800
which is intended to have a potential people overriding it.

00:17:45.800 --> 00:17:49.480
And then in the derived classes,

00:17:49.480 --> 00:17:51.120
you say override instead of virtual

00:17:51.120 --> 00:17:53.280
to indicate that you have to say that, right?

00:17:53.280 --> 00:17:55.520
To say that you're replacing this behavior

00:17:55.520 --> 00:17:57.840
and you might need to call the base class version

00:17:57.840 --> 00:17:58.680
and all that kind of stuff.

00:17:58.680 --> 00:18:02.240
Well, basically Python gets that if you want it.

00:18:02.240 --> 00:18:03.880
As a lot of things with typing,

00:18:03.880 --> 00:18:06.360
it's optional in multiple ways.

00:18:06.360 --> 00:18:09.040
So let's jump over.

00:18:09.040 --> 00:18:12.040
If you scroll down, it's kind of weird to me.

00:18:12.040 --> 00:18:15.320
The PEP says, this PEP is here for historical reasons.

00:18:15.320 --> 00:18:16.560
It's now part of Python.

00:18:16.560 --> 00:18:19.320
So please see override.

00:18:19.320 --> 00:18:20.160
When you click it, though,

00:18:20.160 --> 00:18:22.400
it doesn't take you to the Python documentation.

00:18:22.400 --> 00:18:25.600
It takes you a separate typing documentation for Python

00:18:25.600 --> 00:18:28.200
but is also in the Python documentation.

00:18:28.200 --> 00:18:29.040
- Interesting.

00:18:29.040 --> 00:18:30.640
- Which one wins, I don't know, but whatever.

00:18:30.640 --> 00:18:33.600
The example here in the link from the PEP is super clear.

00:18:33.600 --> 00:18:35.360
So you got a parent class.

00:18:36.360 --> 00:18:39.880
And you don't say virtual because we don't have that

00:18:39.880 --> 00:18:42.520
but you can say at override.

00:18:42.520 --> 00:18:46.400
So the parent class, the base class has a foo function

00:18:46.400 --> 00:18:50.080
that takes no parameters and returns an integer.

00:18:50.080 --> 00:18:53.240
And here you, in the child class, you say override

00:18:53.240 --> 00:18:56.760
and that has a decorator and then foo, same signature.

00:18:56.760 --> 00:19:01.400
And if you were to say override something that didn't exist,

00:19:01.400 --> 00:19:03.960
type checking will say there's no signature.

00:19:03.960 --> 00:19:06.560
Your intention is to override this thing

00:19:06.560 --> 00:19:07.640
but it doesn't exist.

00:19:07.640 --> 00:19:12.000
Maybe you meant to type, I don't like these examples

00:19:12.000 --> 00:19:12.880
but this is what's written here.

00:19:12.880 --> 00:19:13.720
So here we go.

00:19:13.720 --> 00:19:16.720
You override foo because that existed

00:19:16.720 --> 00:19:20.760
but you tried to override baz but it's bar

00:19:20.760 --> 00:19:23.240
and you misspelled it or something like that.

00:19:23.240 --> 00:19:27.720
Now I don't know what happens if you mismatch the parameters

00:19:27.720 --> 00:19:29.040
but you get the name right.

00:19:29.040 --> 00:19:29.880
You know what I mean?

00:19:29.880 --> 00:19:31.200
Like I'm overriding, it takes two parameters.

00:19:31.200 --> 00:19:32.400
Like no, it takes one.

00:19:33.720 --> 00:19:34.920
I don't know, I have to test that out.

00:19:34.920 --> 00:19:39.920
But anyway, if you want to have a little bit more validation

00:19:39.920 --> 00:19:48.320
in your Python typing for your classes and your inheritance,

00:19:48.320 --> 00:19:49.160
check this out.

00:19:49.160 --> 00:19:50.000
It's part of Python.

00:19:50.000 --> 00:19:51.760
It's nothing special that you add.

00:19:51.760 --> 00:19:56.240
It only executes at definition time for the class.

00:19:56.240 --> 00:19:58.600
So it's not like a runtime type thing.

00:19:58.600 --> 00:20:00.460
So it should be low overhead.

00:20:00.460 --> 00:20:01.300
Yeah, pretty neat.

00:20:01.300 --> 00:20:02.200
Why not use it, right?

00:20:03.040 --> 00:20:06.960
- Yeah, low overhead, high override.

00:20:06.960 --> 00:20:09.120
- High override, low overhead.

00:20:09.120 --> 00:20:10.520
That's right, there you go.

00:20:10.520 --> 00:20:12.920
All right, well, thanks Brian Skin for sending this in

00:20:12.920 --> 00:20:14.880
and yeah, interesting.

00:20:14.880 --> 00:20:16.940
- Cool.

00:20:16.940 --> 00:20:23.800
One of the other things that's neat is speeding up,

00:20:23.800 --> 00:20:26.280
speeding up Python bits.

00:20:26.280 --> 00:20:29.440
And so there's a, there's kind of a neat article

00:20:29.440 --> 00:20:32.180
called from Gage.

00:20:32.180 --> 00:20:34.880
Oh, that must be the group that makes this stuff.

00:20:34.880 --> 00:20:39.880
Anyway, called "Parsing Python ASTs 20 Times Faster With Rust."

00:20:39.880 --> 00:20:45.320
So this article is talking about speeding up

00:20:45.320 --> 00:20:47.500
a tool called TAC.

00:20:47.500 --> 00:20:51.120
Now TAC is a CLI, it says it's a CLI tool

00:20:51.120 --> 00:20:53.800
that lets you define and enforce import boundaries

00:20:53.800 --> 00:20:56.720
between Python modules in your project.

00:20:56.720 --> 00:20:58.880
- Yeah, and remember, I talked about that a few weeks ago,

00:20:58.880 --> 00:20:59.720
actually, right?

00:20:59.720 --> 00:21:02.400
- Yeah, episode 384, you talked about it.

00:21:02.400 --> 00:21:06.040
So yeah, that was just May 21st,

00:21:06.040 --> 00:21:09.840
just a couple of months ago, last month, nice.

00:21:09.840 --> 00:21:14.840
Anyway, at first I'm like, okay, you sped up with Rust.

00:21:14.840 --> 00:21:16.880
We're kind of hearing that.

00:21:16.880 --> 00:21:18.280
Why I'm calling this out though,

00:21:18.280 --> 00:21:22.480
is that I'm not just the TAC seems cool,

00:21:22.480 --> 00:21:26.540
is that I really liked the methodology

00:21:26.540 --> 00:21:28.100
that they're talking through here.

00:21:28.100 --> 00:21:31.040
So they talk about not just how they made it faster,

00:21:31.040 --> 00:21:33.360
but like the process they went through

00:21:33.360 --> 00:21:34.480
to figure out which parts.

00:21:34.480 --> 00:21:39.480
So they used profiling, but in specific,

00:21:39.480 --> 00:21:44.480
I think they used a tool called PySpy and SpeedScope

00:21:44.480 --> 00:21:49.480
to visualize and get flame graphs for performance.

00:21:49.480 --> 00:21:52.640
- Interesting, I've not heard of either of those.

00:21:52.640 --> 00:21:55.080
- I have not, or maybe I have,

00:21:55.080 --> 00:21:58.480
we cover a lot of tools, man.

00:21:58.480 --> 00:22:03.480
Anyway, these look slick, but the output of it

00:22:03.480 --> 00:22:07.320
showed that there was roughly 90% of the total time

00:22:07.320 --> 00:22:11.680
was taken by a function called get project imports.

00:22:11.680 --> 00:22:14.480
And in that it spent about two thirds of the time

00:22:14.480 --> 00:22:17.760
parsing the ASTs and the remaining one third

00:22:17.760 --> 00:22:20.600
traverting them.

00:22:20.600 --> 00:22:23.840
So some great information and some great examples

00:22:23.840 --> 00:22:26.640
of instead of trying to just throw rust at it

00:22:26.640 --> 00:22:30.440
to speed things up, or even just using Python

00:22:30.440 --> 00:22:33.400
to optimize your own Python,

00:22:33.400 --> 00:22:36.160
taking a look at exactly what you're doing

00:22:36.160 --> 00:22:41.240
and only speeding up the little bits that are slow,

00:22:41.240 --> 00:22:44.160
which is, I love that aspect of this.

00:22:44.160 --> 00:22:47.240
So, okay, so they took those bits,

00:22:47.240 --> 00:22:52.240
also went by and there's a discussion of why the ASTs

00:22:53.080 --> 00:22:55.440
parsing was slow anyway,

00:22:55.440 --> 00:22:59.420
'cause that should have been some C code as well.

00:22:59.420 --> 00:23:06.040
But there's a little bit of a deep dive into there,

00:23:06.040 --> 00:23:12.640
but then they jumped into just rewriting it in rust.

00:23:12.640 --> 00:23:16.200
And then we've covered these tools before

00:23:16.200 --> 00:23:21.200
using a PIO3 and Maturin to help get,

00:23:22.200 --> 00:23:26.120
quickly develop some rust for a couple of functions.

00:23:26.120 --> 00:23:29.240
And yeah, so that was it.

00:23:29.240 --> 00:23:34.240
And it like went from, the example they had was a code base,

00:23:34.240 --> 00:23:36.720
it was a common code base, which was it?

00:23:36.720 --> 00:23:41.440
The Sentry code base, about 3000 lines of Python files

00:23:41.440 --> 00:23:46.040
that took like 10 seconds to test.

00:23:46.040 --> 00:23:49.520
And with this speed up, it dropped it down to one second.

00:23:49.520 --> 00:23:53.800
So yeah, 20, that seems like a pretty fast speed up.

00:23:53.800 --> 00:23:54.640
So, nice.

00:23:54.640 --> 00:23:56.080
- Yeah, that's real nice.

00:23:56.080 --> 00:24:00.360
- Also just kind of a great use for example,

00:24:00.360 --> 00:24:04.720
and a short write up on using profiling

00:24:04.720 --> 00:24:07.600
to really look at where your bottlenecks are,

00:24:07.600 --> 00:24:10.400
and then maybe throwing rust at it there.

00:24:10.400 --> 00:24:12.400
- Yeah, and it looks like they just basically

00:24:12.400 --> 00:24:15.760
re-implemented that one function in rust

00:24:15.760 --> 00:24:19.520
and then just used it as a dependency, right?

00:24:19.520 --> 00:24:21.800
With their PIO3 extension.

00:24:21.800 --> 00:24:24.040
- Yeah, so I totally wanna try that.

00:24:24.040 --> 00:24:27.120
Like just, that'd be a great way to get into rust

00:24:27.120 --> 00:24:30.920
a little bit is to just not try to make a rust application,

00:24:30.920 --> 00:24:34.000
but just replacing like one function.

00:24:34.000 --> 00:24:37.800
- Right, this one algorithm is called a ton of times.

00:24:37.800 --> 00:24:39.760
It's super slow, relatively.

00:24:39.760 --> 00:24:41.160
It's where we spend all our time,

00:24:41.160 --> 00:24:42.480
but it's not that big, right?

00:24:42.480 --> 00:24:44.080
Like we could write it,

00:24:44.080 --> 00:24:45.880
probably figure it out in a day or two in rust,

00:24:45.880 --> 00:24:47.400
and then off you go.

00:24:47.400 --> 00:24:49.120
- Yeah, I don't need to learn all the rust.

00:24:49.120 --> 00:24:51.220
I just need to make this thing faster.

00:24:51.220 --> 00:24:52.760
- Tell me how to do a for loop in rust.

00:24:52.760 --> 00:24:53.680
Tell me, okay.

00:24:53.680 --> 00:24:58.040
Well, tell me Brian, you got extras?

00:24:58.040 --> 00:25:00.400
- Do I have extras?

00:25:00.400 --> 00:25:02.240
Let me check.

00:25:02.240 --> 00:25:03.760
Yeah, I do.

00:25:03.760 --> 00:25:05.100
Last, when was it?

00:25:05.100 --> 00:25:07.660
Let's go ahead.

00:25:07.660 --> 00:25:09.120
Episode 388.

00:25:09.120 --> 00:25:11.280
That was just last week, wasn't it?

00:25:11.280 --> 00:25:12.280
- It was last week,

00:25:12.280 --> 00:25:14.560
where we talked about not deleting all the repos.

00:25:14.560 --> 00:25:18.420
- Yeah, well, one of the things I talked about was,

00:25:18.420 --> 00:25:20.520
they talked about,

00:25:20.520 --> 00:25:23.280
I talked about import by string

00:25:23.280 --> 00:25:26.120
with packageUtil.resolveName.

00:25:26.120 --> 00:25:29.640
Bad on me for not doing my homework a little bit.

00:25:29.640 --> 00:25:33.760
Brett Cannon notes that discussions around this

00:25:33.760 --> 00:25:35.920
are maybe not really great things

00:25:35.920 --> 00:25:39.400
because packageUtil is deprecated,

00:25:40.360 --> 00:25:42.320
or it's going to be, or something.

00:25:42.320 --> 00:25:48.160
So Brett's recommending not using packageUtil, just FYI.

00:25:48.160 --> 00:25:50.480
- If it doesn't give you a deprecation warning now,

00:25:50.480 --> 00:25:51.720
it will someday.

00:25:51.720 --> 00:25:52.820
Don't go that way.

00:25:52.820 --> 00:25:57.120
- Okay, next up, really quickly,

00:25:57.120 --> 00:25:58.440
kind of a fun thing.

00:25:58.440 --> 00:26:02.920
At the Python Language Summit,

00:26:02.920 --> 00:26:03.960
there was a discussion,

00:26:03.960 --> 00:26:07.960
should Python adopt calendar versioning?

00:26:07.960 --> 00:26:10.960
And this kind of fun discussion.

00:26:10.960 --> 00:26:15.580
So we have like Python 3.12 right now.

00:26:15.580 --> 00:26:18.560
Should somehow it be like,

00:26:18.560 --> 00:26:19.760
Cal versioning?

00:26:19.760 --> 00:26:22.400
And if we went to Cal versioning, what would it be?

00:26:22.400 --> 00:26:27.120
And fun, I think it was Carol Willing.

00:26:27.120 --> 00:26:30.860
Yeah, Carol Willing brought up

00:26:30.860 --> 00:26:34.080
that we want to at least keep our current versioning

00:26:34.080 --> 00:26:37.280
through 3.14, because then it would be the Py version.

00:26:37.280 --> 00:26:40.680
- Yes, we got to do 3.14 now.

00:26:40.680 --> 00:26:45.680
- Yeah, so a lot of this boils into a PEP 2026,

00:26:45.680 --> 00:26:50.600
which is also nice numbering

00:26:50.600 --> 00:26:55.600
because the shout out of 2026 is when we would switch.

00:26:55.600 --> 00:26:59.480
So the idea would be what we've got.

00:26:59.480 --> 00:27:01.720
Oh, there's a table here.

00:27:03.920 --> 00:27:08.920
3.14, no change, that comes out in 2025, if we go to this.

00:27:08.920 --> 00:27:14.000
And instead of 315, we just make the 2026 version 3.26.

00:27:14.000 --> 00:27:19.720
- No, we're gonna end up with a year 3K problem.

00:27:19.720 --> 00:27:24.560
- That's okay.

00:27:24.560 --> 00:27:27.760
But that's like 75 years in the future

00:27:27.760 --> 00:27:29.280
that we have to care about that.

00:27:29.280 --> 00:27:31.520
- I guess they could put a 126,

00:27:31.520 --> 00:27:33.800
then it'll be a thousand years.

00:27:33.800 --> 00:27:36.280
Probably doesn't matter at that point.

00:27:36.280 --> 00:27:38.720
- Oh yeah, we can add it, yeah.

00:27:38.720 --> 00:27:42.240
So I think we're okay.

00:27:42.240 --> 00:27:44.960
Well, actually, I'm not sure, that would be weird.

00:27:44.960 --> 00:27:45.800
Wouldn't it?

00:27:45.800 --> 00:27:46.620
I don't know.

00:27:46.620 --> 00:27:47.460
- You could have 126.

00:27:47.460 --> 00:27:51.520
I think you can get to year 2099

00:27:51.520 --> 00:27:54.360
without going too bizarrely out of sequence.

00:27:54.360 --> 00:27:57.680
- Maybe we're ready for Python 4 by then.

00:27:57.680 --> 00:28:00.200
- No, we're not ready.

00:28:00.200 --> 00:28:02.400
Too soon.

00:28:03.360 --> 00:28:04.200
- Too soon.

00:28:04.200 --> 00:28:05.880
So what do you think of this?

00:28:05.880 --> 00:28:08.080
Should we do the calendar?

00:28:08.080 --> 00:28:09.000
- It's a little weird to me.

00:28:09.000 --> 00:28:13.480
Why not just 3.2026, 3.2027?

00:28:13.480 --> 00:28:19.560
Because to me, this doesn't communicate calendar versioning.

00:28:19.560 --> 00:28:21.640
We already have calendar versioning

00:28:21.640 --> 00:28:23.320
if you don't care about what the number is,

00:28:23.320 --> 00:28:26.080
'cause it's yearly release cycles, right?

00:28:26.080 --> 00:28:31.080
3/12 means 2024, 3/13 means 2025.

00:28:31.640 --> 00:28:34.400
And so if you're not using the calendar numbers,

00:28:34.400 --> 00:28:39.920
I know 26 is closer to 2026 than 15,

00:28:39.920 --> 00:28:43.360
but there's still, to me, it's like, well, 16, 27.

00:28:43.360 --> 00:28:44.200
I don't know.

00:28:44.200 --> 00:28:46.160
It's just, here's the next year's version.

00:28:46.160 --> 00:28:47.360
- I, yeah.

00:28:47.360 --> 00:28:48.920
Okay, I'm all for it.

00:28:48.920 --> 00:28:50.120
I think we should switch,

00:28:50.120 --> 00:28:53.400
'cause I think that since we've gone

00:28:53.400 --> 00:28:55.760
to a one-year release cycle anyway,

00:28:55.760 --> 00:29:00.640
why not somehow encode that in the numbers?

00:29:00.640 --> 00:29:01.640
- I totally agree with that.

00:29:01.640 --> 00:29:02.480
I agree with that.

00:29:02.480 --> 00:29:06.240
I just, my vote's for 3.2026,

00:29:06.240 --> 00:29:08.720
like most calendar versioning things.

00:29:08.720 --> 00:29:10.480
- Oh, yeah, just do four digits?

00:29:10.480 --> 00:29:11.400
- Yeah, exactly, that's all I'm saying.

00:29:11.400 --> 00:29:12.240
It's just put four digits

00:29:12.240 --> 00:29:13.600
so it really is the year on the end,

00:29:13.600 --> 00:29:16.280
and it's really clear that it means the year.

00:29:16.280 --> 00:29:17.880
You don't have to know the code.

00:29:17.880 --> 00:29:20.680
That's all I'm saying.

00:29:20.680 --> 00:29:25.440
But I'm also with Carol on leaving 3.14.

00:29:25.440 --> 00:29:29.480
- Yeah, I mean, there's nothing saying,

00:29:29.480 --> 00:29:31.080
since it's bigger, there's nothing saying

00:29:31.080 --> 00:29:33.320
we could go to two digits and then at some point go,

00:29:33.320 --> 00:29:35.680
you know, let's just throw four digits in there.

00:29:35.680 --> 00:29:37.200
- Yeah. - Anyway.

00:29:37.200 --> 00:29:40.960
Okay, last thing I wanted, last extra,

00:29:40.960 --> 00:29:45.800
is Brett Cannon wrote an article called

00:29:45.800 --> 00:29:48.240
"Saying Thanks to Open Source Maintainers."

00:29:48.240 --> 00:29:51.000
I just want to shout out, this is a really good idea.

00:29:51.000 --> 00:29:54.280
Quickly, what are our ideas?

00:29:54.280 --> 00:29:56.680
First of all, just be nice to the maintainers.

00:29:58.280 --> 00:29:59.480
This is great advice.

00:29:59.480 --> 00:30:05.200
If you disagree with something, be polite, be nice.

00:30:05.200 --> 00:30:06.640
It's good, great advice.

00:30:06.640 --> 00:30:07.920
Start with being nice.

00:30:07.920 --> 00:30:08.760
Be an advocate.

00:30:08.760 --> 00:30:10.400
You don't have to actually thank them directly,

00:30:10.400 --> 00:30:12.400
but you could advocate for the thing.

00:30:12.400 --> 00:30:15.040
So Brett's involvement with byproject.toml.

00:30:15.040 --> 00:30:16.760
He sees other people promoting it,

00:30:16.760 --> 00:30:18.760
makes him feel good, it's a good thing.

00:30:18.760 --> 00:30:21.640
Produce your own open source code

00:30:21.640 --> 00:30:24.400
because maybe some of the maintainer

00:30:24.400 --> 00:30:26.040
might use your stuff now.

00:30:26.040 --> 00:30:27.760
And then actually say thanks.

00:30:28.320 --> 00:30:30.240
Nothing wrong with saying thanks to people.

00:30:30.240 --> 00:30:32.160
And then there's financial support,

00:30:32.160 --> 00:30:35.400
which is good for some projects have open source.

00:30:35.400 --> 00:30:40.160
Ways to help fund the maintainers, those are good too.

00:30:40.160 --> 00:30:41.440
But you don't have to fund them.

00:30:41.440 --> 00:30:43.560
You can just be nice to them, say thanks,

00:30:43.560 --> 00:30:44.920
advocate their thing.

00:30:44.920 --> 00:30:46.360
That's good.

00:30:46.360 --> 00:30:50.200
So in that end, I kind of always forget

00:30:50.200 --> 00:30:53.720
that Brett was involved with byproject.toml,

00:30:53.720 --> 00:30:56.800
and we might not be using it as we are today without Brett.

00:30:56.800 --> 00:30:58.200
So thank you, Brett.

00:30:58.200 --> 00:31:00.560
I love byproject.toml.

00:31:00.560 --> 00:31:03.320
I promote it and encourage everybody to use it.

00:31:03.320 --> 00:31:05.600
- Awesome.

00:31:05.600 --> 00:31:06.440
Yeah, thanks, Brett.

00:31:06.440 --> 00:31:07.280
Thanks everyone.

00:31:07.280 --> 00:31:08.560
There's a lot of people I have to thank in this community

00:31:08.560 --> 00:31:09.840
for this kind of stuff.

00:31:09.840 --> 00:31:10.680
- Yeah.

00:31:10.680 --> 00:31:12.240
Do you have any extras?

00:31:12.240 --> 00:31:13.080
- I do.

00:31:13.080 --> 00:31:15.360
Let us check them out.

00:31:15.360 --> 00:31:17.520
I think I only one extra.

00:31:17.520 --> 00:31:18.600
Extra.

00:31:18.600 --> 00:31:20.680
In that is last week, I talked about the Shiny

00:31:20.680 --> 00:31:22.760
for Python Reactive Web Dashboards

00:31:22.760 --> 00:31:26.360
with Shiny, that course over at Talk Python.

00:31:26.360 --> 00:31:28.160
I said it was going to be available soon.

00:31:28.160 --> 00:31:30.680
It is now available 100%.

00:31:30.680 --> 00:31:33.000
You can go sign up for it and take that course.

00:31:33.000 --> 00:31:36.080
The course is completely free, no strings attached.

00:31:36.080 --> 00:31:38.640
So just click the link and take the course

00:31:38.640 --> 00:31:41.840
if you wanna learn about building interactive dashboards.

00:31:41.840 --> 00:31:44.040
A little bit actually like the Solara stuff,

00:31:44.040 --> 00:31:46.680
but more full featured, I suppose.

00:31:46.680 --> 00:31:49.680
And a little more packaged,

00:31:49.680 --> 00:31:51.000
a little more like Streamlit in that sense.

00:31:51.000 --> 00:31:56.000
And then also I talked about working with PyCharm

00:31:56.040 --> 00:31:59.040
to get people six months of PyCharm Pro for free,

00:31:59.040 --> 00:32:01.400
as long as you don't already have an account

00:32:01.400 --> 00:32:03.040
that would have to renew.

00:32:03.040 --> 00:32:05.240
With this course, you could just go to your account page

00:32:05.240 --> 00:32:07.960
after signing up for this and get that as well.

00:32:07.960 --> 00:32:10.920
So two extras on one tab.

00:32:10.920 --> 00:32:11.920
How about that?

00:32:11.920 --> 00:32:12.760
- Nice.

00:32:12.760 --> 00:32:13.600
Yeah.

00:32:13.600 --> 00:32:16.760
- All right, Brian, I need you to put yourself

00:32:16.760 --> 00:32:19.680
in like a calm and centered place

00:32:19.680 --> 00:32:21.520
for what is coming next, okay?

00:32:21.520 --> 00:32:22.360
Are you ready?

00:32:23.840 --> 00:32:25.960
This has been recommended to us.

00:32:25.960 --> 00:32:27.160
Oh my gosh, who sent it in?

00:32:27.160 --> 00:32:28.800
I'm so sorry if I don't have the name here.

00:32:28.800 --> 00:32:29.640
I don't.

00:32:29.640 --> 00:32:31.920
Cohen, I believe it was.

00:32:31.920 --> 00:32:34.680
If I got it wrong, I'll correct it next time.

00:32:34.680 --> 00:32:38.040
This is the Tao of programming.

00:32:38.040 --> 00:32:43.040
This is a big, long book here that covers many things,

00:32:43.040 --> 00:32:46.400
but I will, 'cause we may come back to this, right?

00:32:46.400 --> 00:32:49.600
But I wanna start with book one, "The Silent Void"

00:32:49.600 --> 00:32:51.840
and just read you a few bits of it.

00:32:51.840 --> 00:32:54.480
And if you visit this webpage, folks,

00:32:54.480 --> 00:32:59.480
this is best viewed in Netscape Navigator 4.0 or older,

00:32:59.480 --> 00:33:03.800
because it's got like the digital noise background

00:33:03.800 --> 00:33:05.120
and all sorts of like,

00:33:05.120 --> 00:33:08.200
whoever thought like this arts and craft paper

00:33:08.200 --> 00:33:11.280
was the proper background for reading, but here we are.

00:33:11.280 --> 00:33:14.200
Oh, and it also has a frame.

00:33:14.200 --> 00:33:15.440
There's a frame inside of it.

00:33:15.440 --> 00:33:17.240
So it's just missing the blink tag.

00:33:17.240 --> 00:33:19.920
Nonetheless, here we go.

00:33:19.920 --> 00:33:20.960
- Banner.

00:33:21.040 --> 00:33:22.920
- Here's the introduction for the chapter.

00:33:22.920 --> 00:33:25.480
"Thus spake the master programmer.

00:33:25.480 --> 00:33:27.600
When you have learned to snatch the error code

00:33:27.600 --> 00:33:30.480
from the trap frame, it will be your time.

00:33:30.480 --> 00:33:32.480
It'll be time for you to leave."

00:33:32.480 --> 00:33:35.000
So let me just read you a couple little sections from this.

00:33:35.000 --> 00:33:38.840
1.1, "Something mysterious is formed,

00:33:38.840 --> 00:33:42.360
born in the silent void, waiting alone and unmoving.

00:33:42.360 --> 00:33:46.320
It is at once still and yet in constant motion.

00:33:46.320 --> 00:33:48.680
It is the source of all programs.

00:33:48.680 --> 00:33:49.760
I do not know its name,

00:33:49.760 --> 00:33:52.520
so I will call it the Tau of programming.

00:33:52.520 --> 00:33:55.520
If the Tau is great, the operating system is great.

00:33:55.520 --> 00:33:58.840
If the operating system is great, the compiler is great.

00:33:58.840 --> 00:34:03.280
If the compiler is great, then the application is great.

00:34:03.280 --> 00:34:05.880
The user is pleased and there is harmony in the world.

00:34:05.880 --> 00:34:07.640
The Tau of programming flows far

00:34:07.640 --> 00:34:09.720
and returns on the wind of morning."

00:34:09.720 --> 00:34:10.560
(laughing)

00:34:10.560 --> 00:34:11.400
What do you think?

00:34:11.400 --> 00:34:12.240
- Oh dear.

00:34:12.240 --> 00:34:13.080
(laughing)

00:34:13.080 --> 00:34:13.920
- This one's bad.

00:34:13.920 --> 00:34:14.760
- I think it's a little cheesy.

00:34:14.760 --> 00:34:16.680
- This one's good, I like that.

00:34:16.680 --> 00:34:17.760
This is one, two.

00:34:17.760 --> 00:34:19.160
This is the last one.

00:34:19.160 --> 00:34:21.880
"The Tau gave birth to machine language.

00:34:21.880 --> 00:34:24.240
Machine language gave birth to the assembler.

00:34:24.240 --> 00:34:26.320
The assembler gave birth to the compiler.

00:34:26.320 --> 00:34:28.320
Now there are 10,000 languages.

00:34:28.320 --> 00:34:31.440
Each language has its purpose, however humble.

00:34:31.440 --> 00:34:34.920
Each language expresses the yin and the yang of software.

00:34:34.920 --> 00:34:37.440
Each language has its place within the Tau.

00:34:37.440 --> 00:34:40.080
But do not program in Cobalt if you can avoid it."

00:34:40.080 --> 00:34:41.520
(laughing)

00:34:41.520 --> 00:34:43.360
- And Fortran and--

00:34:43.360 --> 00:34:44.880
- Exactly.

00:34:44.880 --> 00:34:46.040
Anyway, this goes on and on.

00:34:46.040 --> 00:34:48.000
There's books of this stuff.

00:34:48.000 --> 00:34:49.040
People check it out, it's fun.

00:34:49.040 --> 00:34:49.880
- Nine books.

00:34:49.880 --> 00:34:50.880
(laughing)

00:34:50.880 --> 00:34:51.720
- Exactly.

00:34:51.720 --> 00:34:53.120
(laughing)

00:34:53.120 --> 00:34:53.960
- Dear.

00:34:53.960 --> 00:34:58.120
- Well, that's the joke for today.

00:34:58.120 --> 00:35:00.680
If you will, it's the entertainment segment, Liz.

00:35:00.680 --> 00:35:02.440
I'm not sure it's a joke.

00:35:02.440 --> 00:35:03.800
- Yeah, no, it's good.

00:35:03.800 --> 00:35:04.640
I like it.

00:35:04.640 --> 00:35:07.440
- It's the meditation section, Brian.

00:35:07.440 --> 00:35:10.000
(laughing)

00:35:10.000 --> 00:35:11.000
- All right.

00:35:11.000 --> 00:35:15.600
So with that, I'd like to encourage everyone out there

00:35:15.600 --> 00:35:17.320
to send us good programming jokes

00:35:17.320 --> 00:35:18.560
because we're running dry.

00:35:18.560 --> 00:35:20.800
(laughing)

00:35:20.800 --> 00:35:23.120
- No, that was good.

00:35:23.120 --> 00:35:26.200
But also, yeah, I always love good programming jokes

00:35:26.200 --> 00:35:27.440
and dad jokes all together.

00:35:27.440 --> 00:35:28.280
So keep them coming.

00:35:28.280 --> 00:35:29.640
- Yeah, they're always good.

00:35:29.640 --> 00:35:33.320
- As always, really enjoyed talking with you.

00:35:33.320 --> 00:35:35.680
Enjoy talking with everybody in the community

00:35:35.680 --> 00:35:39.840
and yeah, keep on coding, having fun.

00:35:39.840 --> 00:35:40.680
Thanks.

00:35:40.680 --> 00:35:41.520
- Thanks.

00:35:41.520 --> 00:35:42.360
See you next time.

00:35:42.360 --> 00:35:45.560
And Brian, really quick before we leave,

00:35:45.560 --> 00:35:47.960
I just wanna encourage people watching on YouTube here.

00:35:47.960 --> 00:35:50.080
If you're watching but have not yet subscribed

00:35:50.080 --> 00:35:52.040
to the channel, you know what to do.

00:35:52.040 --> 00:35:53.440
Smash that subscribe button.

00:35:53.440 --> 00:35:54.280
See ya.

00:35:54.280 --> 00:35:56.320
- Smash that subscribe button.

00:35:56.320 --> 00:35:57.160
Yes.

00:35:57.160 --> 00:35:58.000
Bye.

