WEBVTT

00:00:03.400 --> 00:00:11.580
hey brian hey youtube how we doing i'm doing great good it's not hot yet it's not hot yet

00:00:11.840 --> 00:00:20.280
it's gonna be hot it's gonna be hot yeah so it was uh they just had the indycar grand prix

00:00:21.310 --> 00:00:25.740
yesterday here in portland at the portland international raceway it was the hottest

00:00:26.700 --> 00:00:30.280
IndyCar race in history. Like the track was 125 degrees or something like that.

00:00:31.719 --> 00:00:36.740
So that's how it is. Good thing we record in the morning. All right, let's do it. Let's jump in.

00:00:38.500 --> 00:00:41.940
Hello and welcome to Python Bytes, where we deliver Python news and headlines

00:00:42.620 --> 00:00:52.880
directly to your earbuds. This is episode 444, recorded August 11th, 2025. I am Michael Kennedy.

00:00:53.540 --> 00:00:54.200
And I'm Brian Okken.

00:00:54.580 --> 00:00:57.440
And this episode is brought to you by DigitalOcean

00:00:57.820 --> 00:01:01.780
and their generative AI features and tools,

00:01:02.520 --> 00:01:03.760
and DigitalOcean more generally,

00:01:03.980 --> 00:01:06.720
but specifically by their Gen AI tools,

00:01:06.920 --> 00:01:07.880
which we're going to talk about.

00:01:08.400 --> 00:01:09.340
Brian's going to tell you about them.

00:01:10.600 --> 00:01:12.120
So check that out at pythonbytes.fm

00:01:12.320 --> 00:01:15.140
slash digitalocean-gen-ai

00:01:15.280 --> 00:01:18.200
and use the code DO4bytes, all caps,

00:01:18.880 --> 00:01:21.140
and get a $200 credit.

00:01:21.380 --> 00:01:26.220
So if you're looking to try out DigitalOcean, you might as well use our code and get plenty of credits.

00:01:26.920 --> 00:01:32.060
Also, connect with us on the socials, Mastodon, Blue Sky, YouTube, all of those things.

00:01:32.200 --> 00:01:34.340
Links are in the show notes at the top.

00:01:35.620 --> 00:01:38.160
And I highly recommend that you subscribe to our newsletter,

00:01:39.100 --> 00:01:44.480
which Brian sends out a really nice email pretty soon after the show is out,

00:01:45.160 --> 00:01:47.580
diving further into the stuff that we talked about,

00:01:47.760 --> 00:01:50.940
maybe some additional resources and links and insights and tools and all that.

00:01:51.060 --> 00:01:53.540
It's not just an email version of the show notes.

00:01:53.720 --> 00:01:54.080
It's really cool.

00:01:54.700 --> 00:01:55.860
I enjoy getting it as well.

00:01:56.140 --> 00:01:56.400
Thanks, Ryan.

00:01:57.740 --> 00:01:58.980
I enjoy putting it together.

00:01:59.640 --> 00:02:00.080
Yes.

00:02:00.720 --> 00:02:04.120
I enjoy hearing about whatever you've got to cover first.

00:02:04.400 --> 00:02:07.760
So let's jump in there.

00:02:09.200 --> 00:02:12.160
So speaking of coverage, let's talk about coverage.

00:02:13.239 --> 00:02:20.680
So Ned Batchelder released, I guess this was in July, but just recently.

00:02:20.760 --> 00:02:25.940
a blog post called coverage.py regex pragmas.

00:02:26.780 --> 00:02:28.400
So that seems like a mouthful.

00:02:29.280 --> 00:02:32.600
And probably, please don't run away because this is powerful.

00:02:33.000 --> 00:02:37.900
I know that pragmas and regex isn't everybody's favorite topic.

00:02:37.940 --> 00:02:40.500
I'm feeling like C++ is back again.

00:02:42.180 --> 00:02:43.180
So what does pragma mean?

00:02:43.460 --> 00:02:45.140
It's the pound thing.

00:02:45.260 --> 00:02:58.780
So let's say if you say like pragma exclude or something like that to say or no cov to say, hey, for coverage for this particular line of code, don't worry about measuring the coverage on that.

00:03:00.340 --> 00:03:07.000
However, so this is a great article and I did not realize I've been using coverage for years and I did not realize it was this powerful.

00:03:09.240 --> 00:03:12.660
Coverage uses regexes to define pragma syntax.

00:03:12.970 --> 00:03:15.020
And you don't really have to care about it

00:03:15.020 --> 00:03:17.560
if you just want to just for each individual thing

00:03:17.590 --> 00:03:18.920
you want to pop in.

00:03:19.420 --> 00:03:23.440
And there is a way to say particular files,

00:03:23.570 --> 00:03:24.640
just ignore the whole file.

00:03:25.180 --> 00:03:27.080
However, this is pretty cool.

00:03:27.170 --> 00:03:28.160
So what is he talking about?

00:03:28.320 --> 00:03:31.260
He's talking about a couple things around it.

00:03:32.239 --> 00:03:35.280
You can extend it using regular expressions

00:03:35.910 --> 00:03:38.280
and you don't necessarily have to figure this out.

00:03:38.460 --> 00:03:39.660
Other people have figured it out for you.

00:03:40.250 --> 00:03:44.940
For instance, there are plugins for coverage that do a lot of this.

00:03:44.990 --> 00:03:46.380
So there's cov defaults.

00:03:47.110 --> 00:03:51.080
And this one's brought to us by, oh, Anthony Satili.

00:03:51.840 --> 00:03:51.920
Cool.

00:03:52.960 --> 00:03:55.820
So Anthony has cov defaults.

00:03:56.000 --> 00:04:04.020
And so there's a whole bunch of defaults already in there to do things like exclude your dundermain.py file.

00:04:04.360 --> 00:04:07.240
because if you're distributing a package,

00:04:07.530 --> 00:04:09.200
that might be just so you can test things.

00:04:09.840 --> 00:04:10.860
You're probably not going,

00:04:11.280 --> 00:04:13.540
it's okay if coverage doesn't hit it.

00:04:14.020 --> 00:04:15.140
A lot of stuff like that.

00:04:15.190 --> 00:04:16.900
And then a whole bunch of regular expressions

00:04:17.260 --> 00:04:18.600
for things like type relating,

00:04:19.359 --> 00:04:21.700
typing relating code and excluding that.

00:04:21.940 --> 00:04:22.380
That's pretty cool.

00:04:22.380 --> 00:04:23.240
I didn't know that was there.

00:04:23.400 --> 00:04:23.660
That's neat.

00:04:24.760 --> 00:04:27.540
Another one is coverage conditional plugin,

00:04:28.240 --> 00:04:31.700
which does things like if you've got certain,

00:04:32.140 --> 00:04:32.840
what does it do?

00:04:32.970 --> 00:04:33.720
He talks about it.

00:04:34.100 --> 00:04:40.020
it gives you a way to create common syntaxes for entire files or entire packages,

00:04:40.420 --> 00:04:43.820
whether a package is installed or different operating systems, things like that.

00:04:44.360 --> 00:04:45.220
That's pretty neat also.

00:04:46.700 --> 00:04:49.520
But a change happened apparently recently.

00:04:49.840 --> 00:04:52.960
This was, well, recently for me, last year,

00:04:53.320 --> 00:04:57.520
but a change to coverage that allowed multi-line,

00:04:57.700 --> 00:04:59.840
and this was contributed by Daniel Diniz,

00:05:01.740 --> 00:05:08.020
multi-line pragmas or multi-line regular expressions so that it like compares it for

00:05:08.020 --> 00:05:14.360
the whole file so one of the neat things about this is you can do things like with this with

00:05:14.640 --> 00:05:21.500
this regular expression that you can put in your your no coverage stuff you can pop in pragma

00:05:22.120 --> 00:05:28.719
exclude file and and define a file there instead of trying to figure out how to find the file in

00:05:28.740 --> 00:05:34.640
your directory structure, you can just pop this in and say, this particular file, I don't

00:05:34.700 --> 00:05:38.160
want to delete it yet, but don't worry about this for testing.

00:05:38.880 --> 00:05:39.400
That's pretty cool.

00:05:39.600 --> 00:05:39.720
Right.

00:05:39.830 --> 00:05:43.280
My boss has been on me about getting that code coverage percentage up.

00:05:45.580 --> 00:05:47.180
I wouldn't do it for that.

00:05:47.720 --> 00:05:49.220
Oh, is that not what it's for?

00:05:49.420 --> 00:05:49.520
Okay.

00:05:49.720 --> 00:05:50.400
No, I like that.

00:05:50.540 --> 00:05:51.040
I'm just teasing.

00:05:51.110 --> 00:05:51.660
I like the idea.

00:05:51.780 --> 00:05:58.980
I actually like, I mean, I've heard a lot of people say hitting 100% isn't worthwhile.

00:05:59.610 --> 00:06:02.240
But I think it is because coverage is so powerful.

00:06:02.920 --> 00:06:08.600
You can, with all of this stuff, you can say, I want to hit 100% of the code that I care about.

00:06:09.060 --> 00:06:18.660
Not the stuff I don't care about, but the things that the problem area is you can define this so that you can just focus on the files and areas where you really want coverage.

00:06:19.240 --> 00:06:20.839
And that needs to be 100%.

00:06:20.960 --> 00:06:24.860
So that's where, that's where, that's my caveat for why I like 100%.

00:06:25.520 --> 00:06:28.420
A couple other cool pragmas, start and stop.

00:06:28.470 --> 00:06:33.940
So you can just say at the start and stop, like add a comment to the top of a code block

00:06:34.010 --> 00:06:40.100
to say, yeah, this junk, we're not, I'm leaving it in here, but it's not, it's not running

00:06:40.300 --> 00:06:40.780
during testing.

00:06:41.420 --> 00:06:42.100
So don't cover it.

00:06:43.080 --> 00:06:44.260
So really powerful.

00:06:44.680 --> 00:06:48.540
I really love a couple, all of these, they're pretty great.

00:06:48.890 --> 00:06:49.980
Oh, this is a neat one.

00:06:50.420 --> 00:06:59.200
So have you ever had like these default, like a placeholder method where you just use three dots or something?

00:06:59.900 --> 00:07:04.500
I'm using three dots a lot better, more than pass, because it kind of does the same thing.

00:07:05.960 --> 00:07:14.060
And you can just say, yeah, this is here because it has to for some structural reason, but it's never going to run.

00:07:14.300 --> 00:07:16.340
So don't worry about trying to cover that.

00:07:16.680 --> 00:07:17.400
So that's pretty neat.

00:07:17.420 --> 00:07:17.900
Yeah, that's cool.

00:07:18.200 --> 00:07:18.600
Yeah, very cool.

00:07:19.320 --> 00:07:24.400
Anyway, thanks, Ned, for teaching us how to use regular expressions for coverage.

00:07:24.880 --> 00:07:26.220
Yeah, that's very neat.

00:07:26.890 --> 00:07:27.120
All right.

00:07:27.790 --> 00:07:35.820
I want to take you back to the times of knights, maidens, to the land of your...

00:07:35.820 --> 00:07:36.640
No, this is totally different.

00:07:36.670 --> 00:07:38.020
This comes to us from Matthias.

00:07:38.070 --> 00:07:39.820
It is a package called your, however.

00:07:40.460 --> 00:07:40.780
Okay.

00:07:40.940 --> 00:07:43.840
It's quite new.

00:07:44.100 --> 00:07:46.020
It's like an undiscovered gem sort of thing.

00:07:46.820 --> 00:07:49.640
So when I first saw this, I'm like, do I care about this?

00:07:49.670 --> 00:07:50.680
I don't know if I care about this.

00:07:51.440 --> 00:07:52.220
And then I looked more carefully.

00:07:52.230 --> 00:07:53.440
I'm like, that is kind of interesting.

00:07:54.020 --> 00:07:57.480
It starts with a quote from ChatGPT, the sage, which is always good.

00:07:58.080 --> 00:08:01.280
But it's more productive to just jump down to some examples.

00:08:02.080 --> 00:08:07.580
So basically what this is, is it is a tool a little bit like Ruff or Flint or one of those

00:08:07.760 --> 00:08:13.180
things that works on, basically it looks at your code, tells you if there are issues.

00:08:13.760 --> 00:08:15.960
But this one is focused specifically on,

00:08:17.160 --> 00:08:20.760
have you previously supported unsupported versions of Python

00:08:22.759 --> 00:08:25.240
by doing stuff the old way?

00:08:26.220 --> 00:08:32.800
Be that typing, or the example is the abstract--

00:08:34.819 --> 00:08:36.560
the ASTune parser?

00:08:36.560 --> 00:08:37.260
I don't know what that is.

00:08:37.860 --> 00:08:40.080
Or the AST parser, yeah, abstract syntax tree.

00:08:42.560 --> 00:08:46.160
If you want to use that and you're using 3.8 or before,

00:08:46.840 --> 00:08:50.800
you had to use the astunepars, I guess, from unpars.

00:08:51.799 --> 00:08:56.960
Or if you're in 3.9 or above, you can use ast from unpars.

00:08:57.260 --> 00:08:59.960
So you probably have this comment,

00:09:00.320 --> 00:09:02.500
if the version of Python that I'm running on

00:09:02.660 --> 00:09:04.480
it's less than this, I'm going to do this one thing.

00:09:05.200 --> 00:09:06.160
Otherwise, I'm going to do the other.

00:09:06.940 --> 00:09:09.320
And so what you do here is you still write that code,

00:09:10.640 --> 00:09:11.640
because that's how it is.

00:09:12.360 --> 00:09:18.560
However, you put a comment kind of like PyCharm and VS Code,

00:09:19.180 --> 00:09:22.800
if you put a capital to do colon as a comment--

00:09:22.880 --> 00:09:24.880
I don't know if you've noticed this, but probably--

00:09:25.480 --> 00:09:28.880
if you say capital to do colon and you write something,

00:09:29.200 --> 00:09:31.260
that shows up in a separate window, at least in PyCharm.

00:09:31.270 --> 00:09:32.420
You say, show me my to do's.

00:09:32.420 --> 00:09:33.940
And when you try to do a commit, it'll say, hey,

00:09:34.030 --> 00:09:35.960
you added some new to do's that are not done.

00:09:36.640 --> 00:09:37.380
You sure you want to commit?

00:09:37.540 --> 00:09:39.980
Like, there's a whole integration with the tooling like that.

00:09:40.420 --> 00:09:41.760
So this is the same type of deal.

00:09:41.900 --> 00:09:45.360
So you say, put a comment that is capital your colon.

00:09:46.860 --> 00:09:50.940
And then you say EOL, in this case, EOL 3.8,

00:09:51.080 --> 00:09:51.720
and you put a comment.

00:09:53.540 --> 00:09:57.460
And then a thing like replace block with line four.

00:09:58.660 --> 00:09:59.100
OK.

00:09:59.440 --> 00:10:03.780
OK, so you say, once 3.8 is gone and we stop supporting it,

00:10:04.000 --> 00:10:05.060
just do the straight import.

00:10:05.780 --> 00:10:06.940
We don't have to do this test.

00:10:07.230 --> 00:10:07.940
We don't have to do anything.

00:10:08.580 --> 00:10:10.760
And then later, you can run in your code,

00:10:10.940 --> 00:10:14.020
you say your check EOL within five months.

00:10:14.780 --> 00:10:17.600
And it says, whenever you run it at the right time,

00:10:17.800 --> 00:10:20.460
Python 3 will reach its end of life approximately four months.

00:10:21.260 --> 00:10:24.260
So it uses the comments to say, you've

00:10:24.360 --> 00:10:26.080
got sections of your code that depend

00:10:26.400 --> 00:10:29.740
are complicated because of Python versioning breaking changes.

00:10:31.480 --> 00:10:31.920
Oh, cool.

00:10:31.940 --> 00:10:32.460
Here they are.

00:10:32.660 --> 00:10:35.600
And you can look for them much like you can use rough check

00:10:35.760 --> 00:10:37.860
to say, show me issues with my code.

00:10:38.360 --> 00:10:40.900
But what's even better, rough check has a --fix,

00:10:41.100 --> 00:10:41.720
and so does your.

00:10:41.740 --> 00:10:44.960
So you can say your fix within five months.

00:10:47.380 --> 00:10:50.920
It'll actually rewrite that code and replace the block with line

00:10:51.160 --> 00:10:52.820
four and just go back to the straight import.

00:10:53.280 --> 00:10:58.020
Remove the your comment, remove the version checks, all that.

00:10:58.800 --> 00:10:59.280
Hmm.

00:10:59.840 --> 00:11:00.280
What do you think?

00:11:00.380 --> 00:11:00.540
OK.

00:11:01.960 --> 00:11:02.700
I like it.

00:11:03.200 --> 00:11:05.860
For such a simple idea, I like it too.

00:11:07.020 --> 00:11:10.440
Now, I'll have to play with this a little bit

00:11:10.670 --> 00:11:13.700
because it totally makes sense for Python

00:11:14.959 --> 00:11:16.860
deprecating Python versions and stuff.

00:11:18.440 --> 00:11:21.620
And one of the cool things about looking into the future

00:11:21.900 --> 00:11:25.160
is you might be working on a release

00:11:25.170 --> 00:11:27.640
that you're not planning on releasing for another month.

00:11:28.010 --> 00:11:30.080
So you're getting started cleaning those up.

00:11:32.280 --> 00:11:34.360
But that might be your own stuff.

00:11:34.360 --> 00:11:36.980
You might be deprecating your own features

00:11:37.000 --> 00:11:43.100
So I'm wondering if you can put like your for your own features,

00:11:43.210 --> 00:11:45.420
or is it just a Python EOL thing?

00:11:45.820 --> 00:11:47.620
Yeah, that's what I've been thinking about as well.

00:11:47.780 --> 00:11:51.260
It's like, I would like it not just necessarily for my features,

00:11:51.500 --> 00:11:54.520
but hey, Pydantic went from V1 to V2,

00:11:54.650 --> 00:11:59.820
and that had super big deprecations for certain really common functions, right?

00:11:59.920 --> 00:12:01.460
Like dumping to JSON and so on.

00:12:01.980 --> 00:12:02.140
Yeah.

00:12:04.060 --> 00:12:06.120
Is it just the Python release cycle?

00:12:06.270 --> 00:12:06.600
I don't know.

00:12:06.680 --> 00:12:07.460
I'll have to look into that.

00:12:07.990 --> 00:12:08.120
Yeah.

00:12:08.870 --> 00:12:12.700
I think it's just Python version itself, but who knows?

00:12:13.360 --> 00:12:13.560
Okay.

00:12:14.720 --> 00:12:14.820
Neat.

00:12:15.840 --> 00:12:15.980
Yeah.

00:12:17.100 --> 00:12:17.680
Very, very neat.

00:12:18.080 --> 00:12:18.280
All right.

00:12:18.740 --> 00:12:22.160
Also, also neat is DigitalOcean.

00:12:23.080 --> 00:12:23.240
Yeah.

00:12:23.350 --> 00:12:24.440
Let me tell you about DigitalOcean.

00:12:25.660 --> 00:12:28.960
This episode of Python Bytes is brought to you by DigitalOcean.

00:12:29.600 --> 00:12:33.360
DigitalOcean is a comprehensive cloud infrastructure that's simple to spin up,

00:12:33.550 --> 00:12:35.020
even for the most complex workloads.

00:12:35.520 --> 00:12:38.780
and it's a way better value than most cloud providers.

00:12:39.340 --> 00:12:43.100
At DigitalOcean, companies can save up to 30% off their cloud bill.

00:12:43.740 --> 00:12:48.400
DigitalOcean boasts 99.99% uptime SLAs

00:12:49.020 --> 00:12:51.120
and industry-leading pricing on bandwidth.

00:12:51.760 --> 00:12:55.960
It's built to be the cloud backbone of businesses small and large.

00:12:57.000 --> 00:13:01.520
And with GPU-powered virtual machines plus storage databases

00:13:01.760 --> 00:13:04.800
and network capabilities all in one platform,

00:13:05.180 --> 00:13:13.280
AI developers can confidently create apps using a platform that the users love.

00:13:14.860 --> 00:13:23.600
Devs have access to the complete set of infrastructure tools they need for both training and inference so they can build anything they dream up.

00:13:23.980 --> 00:13:33.720
DigitalOcean provides full-service cloud infrastructure that's simple to use, reliable, no matter the use case, scalable for any size business, and affordable at any budget.

00:13:34.460 --> 00:13:38.660
VMs start at just $4 a month and GPUs under $1 per hour.

00:13:38.860 --> 00:13:39.080
Wow.

00:13:39.780 --> 00:13:44.600
Easy to spin up infrastructure built to simplify even the most intense business demands.

00:13:45.000 --> 00:13:45.800
That's DigitalOcean.

00:13:46.660 --> 00:13:57.560
And if you use DO4 bytes, DO the number four and BYTES, you get $200 in free credit to get started.

00:13:58.800 --> 00:14:01.160
DigitalOcean is the cloud that's got you covered.

00:14:01.760 --> 00:14:04.140
Please use our link when checking out.

00:14:04.340 --> 00:14:10.080
our offer. You'll find it in the podcast player show notes. It's a click and it's a clickable

00:14:10.370 --> 00:14:14.880
chapter URL as you're hearing this segment. And it's also at the top of the episode page in

00:14:15.160 --> 00:14:21.520
pythonbytes.fm. And why wouldn't you? It's $200 credit. Thank you to DigitalOcean for supporting

00:14:21.710 --> 00:14:29.760
Python Bytes. Indeed. Indeed. Thank you. Over to you. What's next? Wait, no, over to me.

00:14:30.320 --> 00:14:30.840
Over to me.

00:14:31.000 --> 00:14:33.040
Sorry, I'm retracting that statement.

00:14:33.050 --> 00:14:34.100
I got the order wrong, Brian.

00:14:34.810 --> 00:14:37.980
So we've talked about Knox before, right?

00:14:38.560 --> 00:14:38.700
Yeah.

00:14:38.820 --> 00:14:39.480
You're a fan of Knox, aren't you?

00:14:39.820 --> 00:14:40.040
Yeah.

00:14:40.760 --> 00:14:44.800
So Knox is a command line tool like pytest or Tox

00:14:45.600 --> 00:14:48.980
that allows you to test against multiple versions of Python.

00:14:50.580 --> 00:14:51.680
So super cool.

00:14:51.730 --> 00:14:52.360
You can run it.

00:14:52.360 --> 00:14:59.099
You can say this might depend on whatever particular version

00:14:59.120 --> 00:15:04.760
Python or whatever, right? So the thing I want to tell you about is something

00:15:05.020 --> 00:15:11.480
called uv no sorry nox - uv and this comes to us from John Hagan and this is

00:15:11.520 --> 00:15:19.300
this facilitates Knox integration with uv for Python projects. So remember uv is

00:15:19.560 --> 00:15:25.859
awesome at installing different versions of Python rapidly like you can install

00:15:26.700 --> 00:15:28.600
go to a machine that has no Python whatsoever

00:15:28.970 --> 00:15:30.560
and you can pick your version of Python

00:15:30.690 --> 00:15:33.420
and have it installed and ready to use in under two seconds

00:15:35.960 --> 00:15:38.300
versus PyEV, which builds it and takes minutes

00:15:39.240 --> 00:15:40.400
or downloading the installer

00:15:40.600 --> 00:15:41.700
and making sure you have all the versions

00:15:41.900 --> 00:15:43.620
you're going to test with or whatever, right?

00:15:44.160 --> 00:15:45.200
So that's really awesome.

00:15:45.450 --> 00:15:47.220
And then also installing the dependencies

00:15:47.620 --> 00:15:49.060
for these different versions of Python.

00:15:50.360 --> 00:15:52.220
UV is ultra fast at that as well.

00:15:52.380 --> 00:15:56.840
So there's huge advantages to speeding up testing and CI

00:15:57.780 --> 00:15:58.160
with uv.

00:15:58.980 --> 00:16:02.380
And if you're using Nox to create a combinatorial matrix

00:16:02.800 --> 00:16:04.960
of all the different versions of Python you might work with,

00:16:05.540 --> 00:16:08.220
well, then uv speed is only going to multiply across that,

00:16:08.360 --> 00:16:08.460
right?

00:16:09.020 --> 00:16:09.200
Yeah.

00:16:09.500 --> 00:16:10.880
Yeah, so super cool.

00:16:10.890 --> 00:16:14.100
So you can just say uv add group Nox and Nox uv.

00:16:15.200 --> 00:16:15.980
And it'll add that in there.

00:16:16.040 --> 00:16:18.320
And then within your Nox file, you import the session.

00:16:18.860 --> 00:16:21.040
Instead of from Knox, you do it from Knox uv.

00:16:22.680 --> 00:16:23.940
Set the back end to be uv.

00:16:24.400 --> 00:16:26.900
And then for your session, you specify which versions of Python,

00:16:27.780 --> 00:16:28.940
which groups, et cetera.

00:16:29.520 --> 00:16:29.860
Off it goes.

00:16:30.020 --> 00:16:32.100
I feel like this should be your topic, honestly, Brian.

00:16:32.140 --> 00:16:34.300
I think I stole it from you somehow, effectively.

00:16:35.680 --> 00:16:36.180
Why is that?

00:16:36.820 --> 00:16:40.060
Just because you're so into testing, and this is right at the heart of it.

00:16:40.860 --> 00:16:41.260
Okay.

00:16:41.940 --> 00:16:42.480
What do you think?

00:16:42.800 --> 00:16:42.860
Cool?

00:16:43.520 --> 00:16:44.560
I think that's as neat.

00:16:44.640 --> 00:16:47.280
Yeah, I'm using uv almost everywhere now.

00:16:47.660 --> 00:17:01.780
And actually, I used to recommend people, like just average folks that are just starting Python or that just need it for work, I would recommend them just go to python.org and download it.

00:17:02.420 --> 00:17:14.939
And I'm kind of doing that, but I'm leaning towards trying to teach people how to use uv and virtual environments because it's not going to be that long after they start using Python that they're going to want to use that anyway.

00:17:16.459 --> 00:17:16.819
Yeah.

00:17:18.079 --> 00:17:20.260
Yeah, and recently we just covered this,

00:17:20.319 --> 00:17:26.720
that one of the main things uv did is now there's a Python version in your path

00:17:26.829 --> 00:17:29.520
if you install a Python via uv,

00:17:29.780 --> 00:17:32.440
which it used to just be in like some obscure place hidden

00:17:33.130 --> 00:17:34.660
in like your user profile sort of thing.

00:17:34.660 --> 00:17:37.000
It was hard to run it outside of a virtual environment.

00:17:37.680 --> 00:17:37.940
Yeah.

00:17:38.450 --> 00:17:38.580
Yeah.

00:17:40.560 --> 00:17:41.180
Yeah, anyway.

00:17:41.570 --> 00:17:42.220
Okay, cool.

00:17:42.460 --> 00:17:43.000
Yeah, very cool.

00:17:43.300 --> 00:17:44.140
Thanks, John, for sending that in.

00:17:44.820 --> 00:17:45.580
Now over to you, Brian.

00:17:46.640 --> 00:17:47.000
All right.

00:17:47.360 --> 00:17:49.360
So let's take a look.

00:17:49.480 --> 00:17:52.860
I've got a couple short-ish Django items,

00:17:52.920 --> 00:17:54.860
so I thought I'd cover them together.

00:17:55.440 --> 00:17:58.900
So the first comes from Johnny Metz,

00:17:59.680 --> 00:18:03.280
and it's stop using Django squash migrations.

00:18:03.700 --> 00:18:04.580
There's a better way.

00:18:05.020 --> 00:18:07.000
And actually, I didn't know about squash migrations.

00:18:07.140 --> 00:18:09.920
I'm kind of new to Django, the Django world, new-ish.

00:18:10.900 --> 00:18:23.500
But I like this article because I watched a pro, kind of an old hat, when I was watching, doing a session with somebody that knows Django way better than I do.

00:18:24.200 --> 00:18:32.060
And I had a whole bunch of migrations because I was fiddling with the database structure and everything.

00:18:32.180 --> 00:18:33.760
And I was going back and forth, changing things.

00:18:33.920 --> 00:18:35.260
And I had a bunch of migrations.

00:18:36.240 --> 00:18:38.320
And he said, wait a second, just a second.

00:18:38.380 --> 00:18:39.280
Let me do something.

00:18:39.480 --> 00:18:41.540
And he just like, he did this.

00:18:41.740 --> 00:18:42.500
So what am I doing?

00:18:42.580 --> 00:18:43.480
What am I talking about?

00:18:44.820 --> 00:18:47.100
So this is Johnny Metz.

00:18:47.200 --> 00:18:49.920
He's recommending doing a clean reset.

00:18:50.720 --> 00:18:53.720
So you fully migrate all your environments,

00:18:53.960 --> 00:18:55.260
make sure everything's running well.

00:18:55.720 --> 00:18:58.220
And then you delete all your migration files.

00:18:58.980 --> 00:19:01.840
Seems crazy, but you delete them all

00:19:01.880 --> 00:19:03.800
and generate a fresh migrations.

00:19:04.680 --> 00:19:07.920
And then you've got just a new one.

00:19:08.580 --> 00:19:14.060
So this creates a new 0001 initial for each app.

00:19:14.760 --> 00:19:21.700
And then some apps might get 002 or higher.

00:19:21.790 --> 00:19:25.420
So you do this on different, it's going to do it on different apps.

00:19:25.990 --> 00:19:28.760
But then you, so, okay, I'll just walk through it.

00:19:29.160 --> 00:19:32.000
Fully migrate all your environments, delete all your migrations,

00:19:32.480 --> 00:19:37.640
generate fresh migrations, then add data migrations.

00:19:38.420 --> 00:19:42.500
temporarily just okay temporarily disable automatic migrations during deployment

00:19:42.930 --> 00:19:47.640
reset migrations okay so it's not trivial then re-enable automatic migrations so

00:19:48.740 --> 00:19:55.960
why would you do all of this seem this seems more complicated however um you get you end up with

00:19:56.100 --> 00:20:03.039
like a really clean set so you've got like a very clean migration set at the end uh and

00:20:03.060 --> 00:20:06.580
And I think, I don't know if this is, I'm not a Django pro,

00:20:06.740 --> 00:20:09.900
but so I'm not sure if this is appropriate later on,

00:20:10.400 --> 00:20:14.820
but especially after you've like hashed through the initial development,

00:20:15.000 --> 00:20:19.500
this is a great time to start clean and then work from there.

00:20:19.780 --> 00:20:21.620
So interesting Django article.

00:20:21.880 --> 00:20:23.080
It is an interesting idea.

00:20:23.220 --> 00:20:26.860
And certainly I think if you've not pushed it to production,

00:20:27.840 --> 00:20:31.600
you know, you just like, instead of having the 100 migrations,

00:20:31.700 --> 00:20:34.040
you may have built over time as you built up the app

00:20:34.260 --> 00:20:35.380
before you push it out live.

00:20:35.540 --> 00:20:39.320
Like just get that down to a single migration,

00:20:40.160 --> 00:20:41.860
get the database up and running and go from there.

00:20:42.360 --> 00:20:42.620
Yeah.

00:20:44.240 --> 00:20:46.380
I'm not sure if it mentions it in here too,

00:20:46.620 --> 00:20:50.520
but I have been, I guess, yeah,

00:20:50.600 --> 00:20:51.820
I think it sets it up in here,

00:20:51.920 --> 00:20:54.360
but having migrations per application.

00:20:54.640 --> 00:20:57.620
Anyway, the other one is,

00:20:58.160 --> 00:21:01.040
this comes from Adam Hill, is DJ Lite.

00:21:01.160 --> 00:21:02.940
And this is a fairly new project.

00:21:04.120 --> 00:21:09.660
And it is how to use SQLite in production with Django.

00:21:10.060 --> 00:21:14.700
So, yes, you can use SQLite with Django, but there's some tricks.

00:21:14.860 --> 00:21:23.660
So he wrote an article called The Definitive Guide to Using Django with SQLite in Production.

00:21:24.380 --> 00:21:30.680
And then he decided to go ahead and he's still recommending that.

00:21:30.920 --> 00:21:32.740
but there's this plugin to make it easier.

00:21:33.160 --> 00:21:36.120
So with this plugin, you've got a couple of settings

00:21:37.280 --> 00:21:39.140
that you can change and it just runs with it.

00:21:39.460 --> 00:21:42.060
So it's way easier setup if you want to use Django Lite

00:21:42.320 --> 00:21:44.160
or SQLite with Django.

00:21:45.780 --> 00:21:48.780
And this little blurbs here at the top says

00:21:50.560 --> 00:21:54.000
that simplify deploying and maintaining production

00:21:54.240 --> 00:21:56.500
Django websites using SQLite in production.

00:21:57.060 --> 00:21:59.759
DJ Lite helps enable the best performance

00:21:59.760 --> 00:22:02.680
for SQLite for small to medium-sized projects.

00:22:03.370 --> 00:22:05.520
It requires Django 5.1 or above,

00:22:06.130 --> 00:22:12.180
but I think SQLite is appropriate for a lot of Django.

00:22:12.660 --> 00:22:16.420
A lot of people just start with Postgres, but anyway.

00:22:17.520 --> 00:22:18.720
Yeah, definitely.

00:22:19.250 --> 00:22:23.480
I think there's certainly defaults you can change

00:22:23.480 --> 00:22:25.100
or behaviors you can change about SQLite

00:22:25.100 --> 00:22:27.020
to make it way more high performance,

00:22:27.500 --> 00:22:30.280
especially with concurrent read-write sort of things.

00:22:30.820 --> 00:22:30.880
Yeah.

00:22:31.000 --> 00:22:32.320
So, yeah, very cool.

00:22:32.960 --> 00:22:38.080
And following up on the squash migrations,

00:22:38.560 --> 00:22:39.160
Pat Decker says,

00:22:39.560 --> 00:22:41.640
sounds like a similar familiar to Git Rebase maybe.

00:22:42.020 --> 00:22:43.080
Yeah, it does to me for sure.

00:22:43.680 --> 00:22:43.940
Yeah.

00:22:44.020 --> 00:22:44.420
Squashing.

00:22:44.720 --> 00:22:44.880
Yeah.

00:22:45.780 --> 00:22:46.200
Very similar.

00:22:47.180 --> 00:22:47.340
Okay.

00:22:48.120 --> 00:22:49.860
While you have the stage, how extra do you feel?

00:22:50.620 --> 00:22:53.360
I got a couple extras, so we can just cover them.

00:22:53.600 --> 00:22:59.300
So the first up is I've got a testing code episode in the queue.

00:22:59.560 --> 00:23:00.640
It's in draft mode currently.

00:23:01.920 --> 00:23:04.520
FastAPI Cloud with Sebastian Ramirez.

00:23:05.340 --> 00:23:07.480
And it was a real fun talk with Sebastian.

00:23:07.720 --> 00:23:08.500
This was recorded.

00:23:08.640 --> 00:23:09.960
I can't even remember when it was recorded.

00:23:10.160 --> 00:23:12.060
Maybe it was a few weeks ago at least.

00:23:12.620 --> 00:23:15.040
I feel bad getting so slow to get it out.

00:23:15.300 --> 00:23:21.040
But a really interesting article about FastAPI and about FastAPI Cloud.

00:23:21.360 --> 00:23:23.560
And Sebastian's just a joy to talk with.

00:23:23.820 --> 00:23:25.740
So that'll be out later today.

00:23:26.060 --> 00:23:28.500
I only have to rerecord the ad for it,

00:23:28.540 --> 00:23:30.460
but not much left to do.

00:23:31.840 --> 00:23:35.100
And then next up, pythontest.com,

00:23:35.140 --> 00:23:35.820
a couple of things.

00:23:36.640 --> 00:23:39.940
I released a, I had a fixture.

00:23:40.520 --> 00:23:40.860
When was this?

00:23:41.260 --> 00:23:42.540
2013 that I started.

00:23:43.120 --> 00:23:45.140
So this is what, over 10 years ago?

00:23:46.280 --> 00:23:47.640
That I wrote a four-part series

00:23:48.000 --> 00:23:49.260
on pytest fixtures.

00:23:50.140 --> 00:23:55.540
And I had been talking that I was looking at analytics,

00:23:56.150 --> 00:23:57.840
and some of this stuff is still getting hit.

00:23:58.100 --> 00:24:01.880
So I went and reviewed it, and this series was a mess.

00:24:02.500 --> 00:24:06.840
And so I went ahead and, like, I didn't rewrite it,

00:24:07.130 --> 00:24:12.380
but I went through everything and split it up into a more multi-part series.

00:24:12.470 --> 00:24:13.600
A lot of these are really short.

00:24:13.730 --> 00:24:18.219
I just wanted to keep one topic per blog post

00:24:18.700 --> 00:24:20.180
and make sure that it runs.

00:24:20.260 --> 00:24:21.680
A lot of the stuff didn't even run

00:24:21.940 --> 00:24:23.420
on current pytest and current Python.

00:24:24.040 --> 00:24:25.940
Now it all runs with current pytest and Python.

00:24:26.260 --> 00:24:28.740
So there's a nice fixture tutorial there.

00:24:29.900 --> 00:24:32.140
The other thing I wanted to bring up with Python test

00:24:32.380 --> 00:24:35.560
is there is a bunch of stuff.

00:24:36.120 --> 00:24:38.100
So 2013 up through this year,

00:24:38.960 --> 00:24:41.400
there was a bunch of stuff that was like formatted badly.

00:24:41.740 --> 00:24:43.020
And I have gone through

00:24:43.260 --> 00:24:46.120
and made sure everything is mostly correct.

00:24:46.620 --> 00:24:47.460
So if you see any,

00:24:47.640 --> 00:24:48.920
I think everything's working now.

00:24:49.360 --> 00:24:51.020
So if you see anything weird, let me know.

00:24:51.540 --> 00:24:53.680
I just, as I was reviewing this morning,

00:24:54.180 --> 00:24:56.300
I realized that in this particular post,

00:24:57.080 --> 00:25:00.260
I refer to a fixture as fixture B,

00:25:00.640 --> 00:25:02.020
and it's really resource B.

00:25:02.180 --> 00:25:03.040
So I'll have to fix that.

00:25:03.340 --> 00:25:05.280
But things like that shouldn't be too bad.

00:25:05.780 --> 00:25:06.860
Anyway, that's all up to date.

00:25:07.800 --> 00:25:08.300
Do you have any updates?

00:25:09.240 --> 00:25:11.420
I have three extras,

00:25:11.840 --> 00:25:12.820
and I think they're really exciting.

00:25:12.980 --> 00:25:14.280
They're going to be really cool for people.

00:25:14.580 --> 00:25:15.480
So let me tell you about it.

00:25:15.560 --> 00:25:18.600
First, brand new course over at Talk Python.

00:25:18.740 --> 00:25:20.220
I'm really excited about this one.

00:25:20.460 --> 00:25:22.940
Some of the most impactful courses that we create there

00:25:24.360 --> 00:25:26.880
are ones that take people from like zero to one

00:25:27.040 --> 00:25:29.740
or like one and 1.5 to two,

00:25:30.160 --> 00:25:31.840
like the first sort of steps, right?

00:25:32.420 --> 00:25:33.840
And so this new course is called

00:25:34.140 --> 00:25:36.220
Just Enough Python for Data Scientists.

00:25:37.160 --> 00:25:37.480
- Oh, nice.

00:25:37.580 --> 00:25:38.780
- Python is kind of a stand-in

00:25:38.800 --> 00:25:41.500
for software engineering with Python, right?

00:25:41.660 --> 00:25:44.219
So the idea of this course is

00:25:44.240 --> 00:25:46.800
If you've done work in Jupyter Notebooks,

00:25:47.560 --> 00:25:50.140
but you kind of feel like, well, I just learned notebooks

00:25:50.520 --> 00:25:52.840
and a little bit of Python because I was at this research lab

00:25:53.720 --> 00:25:55.140
or in this course I took.

00:25:55.230 --> 00:25:57.820
But I don't really know Git very well.

00:25:58.700 --> 00:26:00.540
I don't know refactoring super well.

00:26:00.780 --> 00:26:04.160
Reproducibility is still an issue, those kinds of things.

00:26:04.620 --> 00:26:08.340
So it covers what do you need to pay attention

00:26:08.500 --> 00:26:10.820
to in the dev world or the software world?

00:26:10.890 --> 00:26:12.340
And what can you safely ignore?

00:26:13.120 --> 00:26:16.360
Like, don't try to boil the ocean when you're getting started.

00:26:16.520 --> 00:26:18.040
What can you just not pay attention to?

00:26:19.640 --> 00:26:20.740
How do you write functions?

00:26:21.180 --> 00:26:24.100
Create importable modules and packages

00:26:24.300 --> 00:26:26.860
to split up notebooks from one large notebook cell

00:26:26.930 --> 00:26:30.960
into a bunch of usable, testable, more readable pieces.

00:26:33.520 --> 00:26:35.680
Debugging, reproducibility with Docker and uv,

00:26:36.000 --> 00:26:39.120
and even a little bit of agentic AI for data analysis

00:26:39.290 --> 00:26:40.380
to jumpstart your work.

00:26:40.580 --> 00:26:44.200
So if people are interested in this, I highly recommend it.

00:26:44.300 --> 00:26:47.360
It's an awesome course that I wrote over the last three or four weeks,

00:26:47.760 --> 00:26:48.980
and I'm really happy to have it out.

00:26:50.660 --> 00:26:51.540
That's pretty exciting.

00:26:52.070 --> 00:26:52.720
I like the topic.

00:26:53.400 --> 00:26:53.740
Yeah, thanks.

00:26:54.210 --> 00:26:54.340
Yeah.

00:26:55.120 --> 00:26:55.300
All right.

00:26:56.720 --> 00:27:00.180
Speaking of uv, I was just on with Will Vincent from Django Chat.

00:27:01.180 --> 00:27:01.620
When was this?

00:27:01.740 --> 00:27:04.320
This was live streamed four days ago.

00:27:05.320 --> 00:27:11.700
And we did a whole one hour paired presenting sort of thing on uv,

00:27:12.080 --> 00:27:14.780
why people might use it, compatibility, what's new.

00:27:16.280 --> 00:27:19.860
I even did a thing like how to make your Docker builds five times faster sort of thing.

00:27:20.440 --> 00:27:22.640
Or 30 times faster, depending on what you're using.

00:27:22.660 --> 00:27:24.380
If you're using pip, it'll be 30 times faster.

00:27:25.000 --> 00:27:25.880
So super neat.

00:27:26.940 --> 00:27:28.360
Super neat stuff that people can check out.

00:27:28.500 --> 00:27:29.100
And that's just on YouTube.

00:27:29.220 --> 00:27:29.920
So I'm going to link to that.

00:27:31.040 --> 00:27:38.300
And then last is I'm a fan of cursor when I'm doing like super heavy AI programming.

00:27:39.460 --> 00:27:43.380
Obviously a big fan of PyCharm when I'm doing like focused development work, right?

00:27:43.540 --> 00:27:47.440
But if I'm just like, I just need some heavy duty AI tools, cursor.

00:27:48.639 --> 00:27:52.960
And Claude Code has been getting a lot of traction lately because it's like this terminal based thing.

00:27:52.980 --> 00:27:53.660
You can use it anywhere.

00:27:54.340 --> 00:28:00.000
Well, Cursor just came out with a Cursor CLI that you can set up.

00:28:00.120 --> 00:28:01.160
That's pretty neat.

00:28:01.180 --> 00:28:03.240
So use it in your IDE or any terminal.

00:28:03.520 --> 00:28:07.000
Cursor, JetBrains, Android Studio, Xcode, whatever.

00:28:08.000 --> 00:28:09.040
So pretty neat.

00:28:10.540 --> 00:28:15.380
If you kind of like Cursor, but you also kind of prefer the terminal side of things,

00:28:15.480 --> 00:28:15.880
check this out.

00:28:16.000 --> 00:28:18.520
It's in beta, but so far it seems pretty neat.

00:28:18.540 --> 00:28:21.140
If you have a subscription, it just integrates with that.

00:28:22.400 --> 00:28:22.600
Neat.

00:28:23.080 --> 00:28:24.060
Yeah, those are my extras.

00:28:25.780 --> 00:28:26.840
I have a joke for us as well.

00:28:27.440 --> 00:28:27.980
Oh, good.

00:28:28.640 --> 00:28:28.720
Yes.

00:28:29.720 --> 00:28:34.720
And I think this AI thing I just gave a shout out to perfectly, perfectly blends into this.

00:28:34.880 --> 00:28:34.980
Okay.

00:28:35.840 --> 00:28:37.740
Control C, Control V remains eternal.

00:28:38.020 --> 00:28:40.200
But what kind of dev are you?

00:28:40.300 --> 00:28:41.360
This means something different, Brian.

00:28:41.820 --> 00:28:45.120
If you're a new school developer, you copy and paste from ChatGPT.

00:28:45.780 --> 00:28:50.260
If you're old school, you copy and paste from Stack Overflow.

00:28:50.760 --> 00:28:54.820
And if you're ancient like you and me, you copy and paste from the documentation.

00:28:58.000 --> 00:29:00.380
Wait, how do I copy and paste from a book?

00:29:00.960 --> 00:29:03.840
Okay, I guess I'm so ancient that I'm not even on the chart.

00:29:03.980 --> 00:29:07.300
Oh, that one takes a while because that's when you remember people talk about,

00:29:07.600 --> 00:29:11.160
oh, I saw that code in the magazine that I typed it in.

00:29:11.700 --> 00:29:12.480
Yeah, that was me.

00:29:12.920 --> 00:29:13.680
That's how you do it.

00:29:13.900 --> 00:29:14.540
That's how you do it.

00:29:15.300 --> 00:29:17.920
You copy and paste with the fingers one character at a time.

00:29:19.780 --> 00:29:19.940
Yeah.

00:29:20.040 --> 00:29:20.660
Yeah, yeah.

00:29:21.180 --> 00:29:23.920
Anyway, copy, Control Z, Control V is still important,

00:29:24.300 --> 00:29:25.260
but changing over time.

00:29:25.920 --> 00:29:26.320
Yeah.

00:29:28.520 --> 00:29:31.560
All right, well, thanks for the episode.

00:29:31.960 --> 00:29:32.540
Thanks for being here.

00:29:32.740 --> 00:29:34.020
And thanks everyone else for listening.

00:29:34.820 --> 00:29:35.260
Thanks, bye.

00:29:36.020 --> 00:29:36.200
Bye all.

