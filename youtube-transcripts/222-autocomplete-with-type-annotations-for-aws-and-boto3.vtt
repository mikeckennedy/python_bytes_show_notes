WEBVTT

00:00:00.000 --> 00:00:06.720
Hello, hello, everyone out there.


00:00:06.720 --> 00:00:09.280
Excited to have you here on the live stream.


00:00:09.280 --> 00:00:12.800
If you're listening in and you want to be part of the show, just throw a comment into


00:00:12.800 --> 00:00:14.160
the live chat.


00:00:14.160 --> 00:00:19.280
And with that, we'll kick this off.


00:00:19.280 --> 00:00:23.360
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:23.360 --> 00:00:24.400
to your earbuds.


00:00:24.400 --> 00:00:29.880
This is episode 222, recorded February 24th, 2021.


00:00:29.880 --> 00:00:31.160
I'm Michael Kennedy.


00:00:31.160 --> 00:00:32.320
- And I'm Brian Okken.


00:00:32.320 --> 00:00:34.520
- And I'm Greg.


00:00:34.520 --> 00:00:35.360
- Hey, Greg. - And I'm Greg Guerrero.


00:00:35.360 --> 00:00:36.600
- Hey, Greg Guerrero.


00:00:36.600 --> 00:00:37.440
Welcome, welcome.


00:00:37.440 --> 00:00:38.600
We have a special guest.


00:00:38.600 --> 00:00:39.600
- Thank you.


00:00:39.600 --> 00:00:41.200
- Yeah, as we have been doing lately.


00:00:41.200 --> 00:00:42.040
Welcome.


00:00:42.040 --> 00:00:44.460
Part of the Talk Python team,


00:00:44.460 --> 00:00:46.200
and now part of the Python Bytes podcast.


00:00:46.200 --> 00:00:47.440
It's great to have you here.


00:00:47.440 --> 00:00:49.000
- Happy to be here, thank you.


00:00:49.000 --> 00:00:50.440
- Yeah, it's great.


00:00:50.440 --> 00:00:53.120
Also making us happy is,


00:00:53.120 --> 00:00:55.240
and many users throughout the world, is Linode.


00:00:55.240 --> 00:00:56.920
Linode is sponsoring this episode,


00:00:56.920 --> 00:00:59.800
and you can get $100 credit for your next project


00:00:59.800 --> 00:01:01.920
at pythonbytes.fm/lanode.


00:01:01.920 --> 00:01:04.320
Check them out, it really helps support the show.


00:01:04.320 --> 00:01:08.580
So Greg, you wanna just tell people really quickly


00:01:08.580 --> 00:01:11.080
about yourself before we dive into the topics?


00:01:11.080 --> 00:01:14.280
- Yeah, before I joined the team at Python Bytes,


00:01:14.280 --> 00:01:17.760
I had run a data analytics consulting firm


00:01:17.760 --> 00:01:19.400
where we built data warehouses


00:01:19.400 --> 00:01:22.520
and did data science type things.


00:01:22.520 --> 00:01:25.520
So it was called business intelligence at the time.


00:01:25.520 --> 00:01:30.520
And as I was learning, we started running into a lot


00:01:30.520 --> 00:01:34.480
of open source users in particular Python.


00:01:34.480 --> 00:01:37.480
And so I dove into the Python ecosystem


00:01:37.480 --> 00:01:40.300
when I sold that company to get up to speed


00:01:40.300 --> 00:01:44.000
on how things are gonna be done in the future.


00:01:44.000 --> 00:01:44.840
- That's awesome.


00:01:44.840 --> 00:01:46.560
One of those Wayne Gretzky moments, right?


00:01:46.560 --> 00:01:47.960
- Yes, exactly.


00:01:47.960 --> 00:01:51.300
- Cool.


00:01:51.300 --> 00:01:52.120
Well, awesome.


00:01:52.120 --> 00:01:52.960
It's great to have you here.


00:01:52.960 --> 00:01:55.440
So I want to jump right into our first topic.


00:01:55.440 --> 00:02:00.640
We have a lot of things to cover today, so I'll try to not delay too long.


00:02:00.640 --> 00:02:06.400
But I've got to tell you, I'm a big fan of AWS S3.


00:02:06.400 --> 00:02:10.400
I'm a big fan of some of the services of AWS in general, right?


00:02:10.400 --> 00:02:14.640
Don't run the main stuff over there, but many of the things,


00:02:14.640 --> 00:02:16.640
many of the services and APIs I use.


00:02:16.640 --> 00:02:23.840
That said, I feel like the S3 or the Boto API,


00:02:23.840 --> 00:02:30.040
the Boto3 API rather, is one of the worst programming


00:02:30.040 --> 00:02:32.080
interfaces I've ever used in my life.


00:02:32.080 --> 00:02:38.080
I mean, it is so frustratingly bad.


00:02:38.080 --> 00:02:41.720
The way you work with it is you go through and you say,


00:02:41.720 --> 00:02:44.840
I'd like to talk to Amazon.


00:02:44.840 --> 00:02:46.840
And then you say, I would like to get a service.


00:02:46.840 --> 00:02:51.400
And instead of creating a class or a submodule or something


00:02:51.400 --> 00:02:53.820
like that, that would be very natural in Python, what you do


00:02:53.820 --> 00:02:55.780
you go to a function and say, give me the service


00:02:55.780 --> 00:02:58.620
and you give it a string like I want quote S3


00:02:58.620 --> 00:03:03.460
or I want quote EC2 or quote some other thing.


00:03:03.460 --> 00:03:06.020
And then you get a generic object back


00:03:06.020 --> 00:03:07.580
and you have no idea what you got back,


00:03:07.580 --> 00:03:09.120
what you can do to it.


00:03:09.120 --> 00:03:10.520
You start passing stuff over to it.


00:03:10.520 --> 00:03:12.760
Sometimes it takes keyword arguments,


00:03:12.760 --> 00:03:15.400
but sometimes you just put dictionaries,


00:03:15.400 --> 00:03:17.580
which are one of the values of a keyword.


00:03:17.580 --> 00:03:19.340
There's just all this weirdness around it.


00:03:19.340 --> 00:03:20.700
So every time I interact with them,


00:03:20.700 --> 00:03:22.580
I'm like, I'm just probably doing this wrong.


00:03:22.580 --> 00:03:26.800
I have no idea of even what type I'm working with


00:03:26.800 --> 00:03:28.680
'cause it's like this bizarro API


00:03:28.680 --> 00:03:31.400
that is like levels of indirection.


00:03:31.400 --> 00:03:35.520
'Cause it's generated at runtime or at least dynamically.


00:03:35.520 --> 00:03:37.320
There's not static Python that is it,


00:03:37.320 --> 00:03:39.460
it like looks at the service you're asking for


00:03:39.460 --> 00:03:42.700
and then like dynamic ups the thing.


00:03:42.700 --> 00:03:44.920
So I feel like there's a lot of work over there


00:03:44.920 --> 00:03:47.680
that could be done to just put a proper wrapper


00:03:47.680 --> 00:03:50.320
at a minimum on top of those types of things.


00:03:50.320 --> 00:03:55.320
That said, wouldn't it be nice if your editor knew better


00:03:55.320 --> 00:03:58.440
than AWS is willing to help you with?


00:03:58.440 --> 00:04:00.620
So we've got this really cool library


00:04:00.620 --> 00:04:01.480
that I wanna talk about.


00:04:01.480 --> 00:04:03.320
This was sent over by Michael Lerner.


00:04:03.320 --> 00:04:09.100
And the idea is you can add type annotations


00:04:09.100 --> 00:04:12.460
as an add-on to the Bodo library.


00:04:12.460 --> 00:04:15.060
So then you get full-on autocomplete.


00:04:15.060 --> 00:04:16.740
So let me give you a little example here.


00:04:16.740 --> 00:04:18.540
For those who are in the live stream, you can see it,


00:04:18.540 --> 00:04:21.080
but those are not, you can just like, I'll just describe it.


00:04:21.080 --> 00:04:23.800
So for example, if I want to talk to S3, like I said,


00:04:23.800 --> 00:04:28.520
I say boto3.client quote S3, as opposed to quote EC2.


00:04:28.520 --> 00:04:32.120
And what comes back is a base client, figure it out.


00:04:32.120 --> 00:04:35.320
It can do things, it can get a waiter and a paginator,


00:04:35.320 --> 00:04:38.840
and it has the possibility to see exceptions about it.


00:04:38.840 --> 00:04:39.920
And that's it, right?


00:04:39.920 --> 00:04:41.240
That's all you know.


00:04:41.240 --> 00:04:43.520
And this is the API you get when you're working


00:04:43.520 --> 00:04:46.600
with things like PyCharm and VS Code,


00:04:46.600 --> 00:04:51.480
and mypy and other type annotation validators,


00:04:51.480 --> 00:04:54.020
lynchers and whatnot, they get nothing.


00:04:54.020 --> 00:04:58.600
So if you go and use this Bodo library,


00:04:58.600 --> 00:05:02.240
this Bodo type annotations, there's no runtime behavior.


00:05:02.240 --> 00:05:05.000
It just creates, I think they're PYI files.


00:05:05.000 --> 00:05:07.440
I can't remember what the final letter is,


00:05:07.440 --> 00:05:10.000
but it's like these kind of like a C++ header file.


00:05:10.000 --> 00:05:12.400
Just says these things have these fields


00:05:12.400 --> 00:05:13.720
but no implementation.


00:05:13.720 --> 00:05:16.200
They actually come from the Bodo library.


00:05:16.200 --> 00:05:18.520
So we just go and import, you know,


00:05:18.520 --> 00:05:22.640
from Boto3 type annotations.s3 import client,


00:05:22.640 --> 00:05:27.640
and we say s3 colon client equals this weird factory thing.


00:05:27.640 --> 00:05:31.080
Boom, all of a sudden you get all the features of S3.


00:05:31.080 --> 00:05:34.140
You can say s3. and it says create bucket,


00:05:34.140 --> 00:05:36.160
get object, create multi-part upload.


00:05:36.160 --> 00:05:37.000
Hey, guess what?


00:05:37.000 --> 00:05:38.840
Here's all the parameters that are super hard to find


00:05:38.840 --> 00:05:40.640
in the documentation.


00:05:40.640 --> 00:05:41.880
Thank you, Michael, for sending this over.


00:05:41.880 --> 00:05:44.800
I already rewrote one of my apps to use this.


00:05:44.800 --> 00:05:45.780
It's glorious.


00:05:45.780 --> 00:05:49.280
- Nice.


00:05:49.280 --> 00:05:50.340
- What do you guys think?


00:05:50.340 --> 00:05:52.840
- So does it, you said you rewrote the app,


00:05:52.840 --> 00:05:54.420
does it really change?


00:05:54.420 --> 00:05:57.420
- No, well, let me rephrase that.


00:05:57.420 --> 00:06:00.040
I wanted to make a change in the way one of my apps


00:06:00.040 --> 00:06:01.960
that was extremely S3 heavy,


00:06:01.960 --> 00:06:03.640
it basically shuffles a bunch of stuff around


00:06:03.640 --> 00:06:07.800
and like on using S3 and some other stuff.


00:06:07.800 --> 00:06:10.120
And I wanted to change it, but before I changed it,


00:06:10.120 --> 00:06:14.200
I'm like, well, let me fancy it up with all these types.


00:06:14.200 --> 00:06:17.000
and then it'll tell me whether I'm doing it right


00:06:17.000 --> 00:06:17.920
or wrong and whatnot.


00:06:17.920 --> 00:06:20.240
So now if I have a function,


00:06:20.240 --> 00:06:23.480
I can say it takes an S3.client


00:06:23.480 --> 00:06:25.520
and my Pi will say, no, no, no,


00:06:25.520 --> 00:06:28.720
you gave that an S3 service locator or whatever the heck.


00:06:28.720 --> 00:06:30.040
There's like all these different things


00:06:30.040 --> 00:06:31.920
you can sort of get that will do similar


00:06:31.920 --> 00:06:33.320
but not the same stuff.


00:06:33.320 --> 00:06:37.520
So yeah, anyway, fantastic, fantastic addition


00:06:37.520 --> 00:06:40.440
because this really should be coming from Boto3.


00:06:40.440 --> 00:06:42.960
I just don't, I feel, you know,


00:06:42.960 --> 00:06:44.700
Maybe it was a little bit harsh on them at the beginning,


00:06:44.700 --> 00:06:47.220
but the reason, it's like one of these things


00:06:47.220 --> 00:06:48.980
where you write a function, you just say,


00:06:48.980 --> 00:06:51.300
well, take star args, star star, kw args,


00:06:51.300 --> 00:06:52.980
and you don't bother to write the documentation.


00:06:52.980 --> 00:06:54.960
You're like, well, how in the world


00:06:54.960 --> 00:06:56.260
am I supposed to know what to do with this?


00:06:56.260 --> 00:06:58.860
Like, it could so easily help me,


00:06:58.860 --> 00:07:00.940
and it's just like not, right?


00:07:00.940 --> 00:07:03.460
Like, those could be keyword arguments


00:07:03.460 --> 00:07:05.440
with default values or whatever.


00:07:05.440 --> 00:07:09.860
So, like, I feel like, you know, a company as large as Amazon,


00:07:09.860 --> 00:07:11.860
they could probably justify writing, like,


00:07:11.860 --> 00:07:14.080
typed wrappers around these things


00:07:14.080 --> 00:07:16.960
that really help people and help mypy


00:07:16.960 --> 00:07:19.480
and all these other validation tools.


00:07:19.480 --> 00:07:22.000
But until then, Bota 3 type annotations.


00:07:22.000 --> 00:07:22.840
It's awesome.


00:07:22.840 --> 00:07:23.660
- Yeah, nice.


00:07:23.660 --> 00:07:30.400
- Oh, and Dean also threw out really quick


00:07:30.400 --> 00:07:32.860
before we move on to the next item, Brian,


00:07:32.860 --> 00:07:34.240
that Bota types can literally,


00:07:34.240 --> 00:07:36.640
well, not literally, save my life.


00:07:36.640 --> 00:07:37.680
Yes, I agree, Dean.


00:07:37.680 --> 00:07:41.820
It's like, oh, sorry, did I take down that EC2 machine?


00:07:41.820 --> 00:07:43.680
I didn't mean that, I wanted something else.


00:07:43.680 --> 00:07:45.520
I wanted to delete the bucket, sorry.


00:07:45.520 --> 00:07:46.360
Anyway, awesome.


00:07:46.360 --> 00:07:50.200
- Interesting, literally translate, translate.


00:07:50.200 --> 00:07:51.840
- Yes, yes, indeed.


00:07:51.840 --> 00:07:57.000
- So yeah, so I wanna cover code reviews.


00:07:57.000 --> 00:07:58.360
- You're such a romantic.


00:07:58.360 --> 00:08:03.960
- So this was suggested by Milos, I think,


00:08:03.960 --> 00:08:06.560
and written by Michael Lynch.


00:08:06.560 --> 00:08:08.240
And it's an article called


00:08:10.520 --> 00:08:13.400
how to make your code reviewer fall in love with you.


00:08:13.400 --> 00:08:16.420
And just, oh my gosh, it's got great content,


00:08:16.420 --> 00:08:17.860
but the title, yuck.


00:08:17.860 --> 00:08:20.960
- Maybe you're not a romantic.


00:08:20.960 --> 00:08:23.200
(laughing)


00:08:23.200 --> 00:08:28.760
- I like my coworkers, but you know, anyway,


00:08:28.760 --> 00:08:32.940
even in the article, it says even your reviewer


00:08:32.940 --> 00:08:35.060
will literally fall in love with you.


00:08:35.060 --> 00:08:38.940
They won't literally fall in love with you.


00:08:38.940 --> 00:08:42.140
they might figuratively appreciate your code review.


00:08:42.140 --> 00:08:44.540
>> Yeah, I mean, they may, but it could be an HR issue.


00:08:44.540 --> 00:08:47.700
>> Yeah, I don't want to go there.


00:08:47.700 --> 00:08:50.060
Anyway, but I do want to cover,


00:08:50.060 --> 00:08:51.700
there's some really great tips in here,


00:08:51.700 --> 00:08:56.420
because actually being nice to your reviewers


00:08:56.420 --> 00:08:59.500
will help you immensely.


00:08:59.500 --> 00:09:01.100
And one of the things he covers is,


00:09:01.100 --> 00:09:03.580
just value your reviewers' time.


00:09:03.580 --> 00:09:06.580
And I just put a code review in this morning


00:09:06.580 --> 00:09:09.420
just to try this out, try some of these techniques.


00:09:09.420 --> 00:09:12.140
And it only takes like an extra 30 seconds,


00:09:12.140 --> 00:09:14.580
maybe a minute to do it right.


00:09:14.580 --> 00:09:17.700
And it saves everybody on your team time.


00:09:17.700 --> 00:09:19.380
So it's worth it.


00:09:19.380 --> 00:09:23.220
So let's cover a few of these.


00:09:23.220 --> 00:09:26.580
One of them is don't just check for mistakes.


00:09:26.580 --> 00:09:32.100
Imagine that you're reading the code review for the first time.


00:09:32.100 --> 00:09:35.580
So you need to be the reviewer of your code first.


00:09:35.580 --> 00:09:37.660
So that's actually really important.


00:09:37.660 --> 00:09:40.100
And I encourage that with everybody on my team


00:09:40.100 --> 00:09:43.940
because there's times where it just doesn't,


00:09:43.940 --> 00:09:46.260
there's stuff in there that doesn't make sense.


00:09:46.260 --> 00:09:49.060
And why is that related to the thing?


00:09:49.060 --> 00:09:50.660
I guess we'll get there.


00:09:50.660 --> 00:09:53.900
- Well, and you can also, if you're in a rush,


00:09:53.900 --> 00:09:58.900
what you say can come across feeling unkind or inconsiderate.


00:09:58.900 --> 00:09:59.760
And you're just like,


00:09:59.760 --> 00:10:00.600
"I didn't really mean to be inconsiderate.


00:10:00.600 --> 00:10:01.620
"I just like, I've got four of these


00:10:01.620 --> 00:10:03.620
"and I have 20 minutes, I just gotta get it."


00:10:03.620 --> 00:10:06.340
but that's not how it's received.


00:10:06.340 --> 00:10:07.980
It may be received really differently.


00:10:07.980 --> 00:10:10.840
So from that perspective, right?


00:10:10.840 --> 00:10:13.340
- Yeah, and even if the code review itself


00:10:13.340 --> 00:10:14.780
only takes somebody a few minutes


00:10:14.780 --> 00:10:16.780
to review your code change,


00:10:16.780 --> 00:10:20.060
it's interrupted their day by a half an hour at least.


00:10:20.060 --> 00:10:22.000
So respect that entire time.


00:10:22.000 --> 00:10:26.220
One of the next suggestions is


00:10:26.220 --> 00:10:29.300
write clear change log description.


00:10:29.300 --> 00:10:31.940
So write it and


00:10:31.940 --> 00:10:35.780
And he describes this a little bit.


00:10:35.780 --> 00:10:38.780
One of the things is it's not just what you changed,


00:10:38.780 --> 00:10:42.260
but it's what your change achieves


00:10:42.260 --> 00:10:44.280
and why you made the change.


00:10:44.280 --> 00:10:47.080
That's the why is always way more important than what you did.


00:10:47.080 --> 00:10:48.820
I can look at the code change.


00:10:48.820 --> 00:10:50.260
I should be able to look at the code change


00:10:50.260 --> 00:10:52.060
and know what you changed.


00:10:52.060 --> 00:10:55.900
So don't describe that too much in the list at the top.


00:10:55.900 --> 00:10:59.420
Next, narrowly that I want to talk about,


00:10:59.420 --> 00:11:01.740
narrowly scope your changes.


00:11:01.740 --> 00:11:04.500
So I think I skipped down.


00:11:04.500 --> 00:11:05.900
Here's what I did this week.


00:11:05.900 --> 00:11:06.780
Have a look.


00:11:06.780 --> 00:11:09.020
Yeah.


00:11:09.020 --> 00:11:10.460
Now--


00:11:10.460 --> 00:11:11.380
It's easy to do that.


00:11:11.380 --> 00:11:13.140
I haven't checked in for a while, so here's what I did.


00:11:13.140 --> 00:11:13.860
Yeah.


00:11:13.860 --> 00:11:14.700
No, no, no, no.


00:11:14.700 --> 00:11:16.500
And actually, this is something that I even


00:11:16.500 --> 00:11:18.220
caught myself doing yesterday.


00:11:18.220 --> 00:11:22.660
I noticed that a test really kind of needed refactored


00:11:22.660 --> 00:11:26.420
because I needed to add a test to a test module.


00:11:26.420 --> 00:11:32.820
and there was the way the entire test module was arranged,


00:11:32.820 --> 00:11:36.820
I could rearrange the fixtures


00:11:36.820 --> 00:11:39.020
so that it would run like three times faster


00:11:39.020 --> 00:11:43.780
if I changed the setup and common setup and stuff like that.


00:11:43.780 --> 00:11:45.400
I really wanted to do that,


00:11:45.400 --> 00:11:47.220
but that's not what I really needed to do.


00:11:47.220 --> 00:11:49.500
What I really needed to do was just add a test.


00:11:49.500 --> 00:11:52.220
So I added the test and that code review


00:11:52.220 --> 00:11:54.180
went through this morning


00:11:54.180 --> 00:11:57.860
and then today I'm going to do a cleanup of trying to make things faster.


00:11:57.860 --> 00:12:00.340
So separating them is important.


00:12:00.340 --> 00:12:05.660
Also, another thing is separating functional and non-functional changes.


00:12:05.660 --> 00:12:10.140
So, like in this case, you're adding a test to a module,


00:12:10.140 --> 00:12:16.700
you got like, you notice that the formatting is just a nightmare.


00:12:16.700 --> 00:12:20.620
Just write that down on your to-do list.


00:12:20.620 --> 00:12:23.820
Either do that merge first, clean it up and then merge it,


00:12:23.820 --> 00:12:27.040
and then add your change or add your change


00:12:27.040 --> 00:12:29.420
and then clean it up, do them in two merge requests.


00:12:29.420 --> 00:12:31.820
It'll be a lot easier for people to figure out.


00:12:31.820 --> 00:12:34.480
Break up large change lists.


00:12:34.480 --> 00:12:36.420
If you've been working for a while,


00:12:36.420 --> 00:12:38.420
maybe you should merge them in a few,


00:12:38.420 --> 00:12:43.500
in pieces if it's like a thousand lines of code


00:12:43.500 --> 00:12:45.500
and 80 files, that's too big.


00:12:45.500 --> 00:12:46.740
It's just way too big.


00:12:46.740 --> 00:12:51.520
And then there's actually quite a few chunks in there


00:12:51.520 --> 00:12:54.400
that talk about basically being a nice person.


00:12:54.400 --> 00:12:56.760
So respond gracious.


00:12:56.760 --> 00:12:58.160
I'm just gonna pick out one,


00:12:58.160 --> 00:13:00.080
respond graciously to critiques.


00:13:00.080 --> 00:13:01.880
And that's the hardest one for me.


00:13:01.880 --> 00:13:04.160
If somebody picks apart your code,


00:13:04.160 --> 00:13:06.000
they're not attacking you,


00:13:06.000 --> 00:13:07.280
they're talking about the code


00:13:07.280 --> 00:13:09.140
and they wanna own the code also.


00:13:09.140 --> 00:13:14.140
So think about those as the reviewer wanting


00:13:14.140 --> 00:13:18.240
to make the code theirs as well as yours


00:13:18.240 --> 00:13:21.240
and try to respond well


00:13:21.240 --> 00:13:22.840
and don't get too defensive about it


00:13:22.840 --> 00:13:25.140
'cause fights in code reviews are not fun.


00:13:25.140 --> 00:13:30.520
- Yeah, and often there's a power differential, right?


00:13:30.520 --> 00:13:33.680
A senior person is reviewing a junior person's type of work.


00:13:33.680 --> 00:13:35.760
So that's always tricky.


00:13:35.760 --> 00:13:37.060
- Yeah.


00:13:37.060 --> 00:13:38.000
- Yeah, for sure.


00:13:38.000 --> 00:13:42.640
Greg, as someone who's relative to say Brian and me,


00:13:42.640 --> 00:13:47.640
a little bit newer at Python,


00:13:49.360 --> 00:13:51.220
What are your thoughts on this code review stuff?


00:13:51.220 --> 00:13:53.760
I mean, I know you don't necessarily write a lot of code


00:13:53.760 --> 00:13:55.200
in teams that gets reviewed,


00:13:55.200 --> 00:13:58.360
but do you see this as helpful, stressful?


00:13:58.360 --> 00:13:59.580
- Yeah, yeah.


00:13:59.580 --> 00:14:03.280
It's important to do that.


00:14:03.280 --> 00:14:05.720
If you have the interpersonal part of it, right?


00:14:05.720 --> 00:14:08.080
Like the both, they trust each other,


00:14:08.080 --> 00:14:11.120
the reviewer and the reviewee,


00:14:11.120 --> 00:14:12.720
it's gonna go a lot more smoothly.


00:14:12.720 --> 00:14:16.000
We're in this together, a shared fate,


00:14:16.000 --> 00:14:20.680
and it'll go as opposed to a conflict,


00:14:20.680 --> 00:14:22.960
it's gonna be much easier.


00:14:22.960 --> 00:14:24.000
- Yeah, for sure.


00:14:24.000 --> 00:14:27.440
Brian, quick comment from Magnus.


00:14:27.440 --> 00:14:29.400
I believe a code review should really review


00:14:29.400 --> 00:14:31.880
the current code, not just the diffed lines,


00:14:31.880 --> 00:14:35.160
so the whole code comes out better after review, yeah?


00:14:35.160 --> 00:14:36.120
- Yeah, definitely.


00:14:36.120 --> 00:14:39.200
- It depends on how big it is, right?


00:14:39.200 --> 00:14:42.280
Like maybe like that little sub-module or something, right?


00:14:42.280 --> 00:14:45.120
It could be too massive, but yeah.


00:14:45.120 --> 00:14:47.360
- Yeah, and actually this is one of the times


00:14:47.360 --> 00:14:50.040
where I kind of put on the brakes and just say,


00:14:50.040 --> 00:14:51.760
you're right, we do need to fix that


00:14:51.760 --> 00:14:53.580
and put it on the to-do list.


00:14:53.580 --> 00:14:58.480
But it shouldn't stop a merge just because things are--


00:14:58.480 --> 00:14:59.440
- Yeah.


00:14:59.440 --> 00:15:03.180
Brian, does your team do internal PRs?


00:15:03.180 --> 00:15:05.320
Or do you just make changes?


00:15:05.320 --> 00:15:07.200
- No, everything goes through a PR.


00:15:07.200 --> 00:15:08.500
- Yeah, cool, cool.


00:15:08.500 --> 00:15:10.840
I vary, right?


00:15:10.840 --> 00:15:12.480
Sometimes I do, sometimes I don't.


00:15:12.480 --> 00:15:14.880
All right, Greg, you're up next on--


00:15:14.880 --> 00:15:17.640
- Yeah, thank you.


00:15:17.640 --> 00:15:21.340
- Speaking of repos and merges and PRs and all that stuff.


00:15:21.340 --> 00:15:24.760
- We thank Hector Munoz for sending this suggestion in.


00:15:24.760 --> 00:15:29.760
It started with a response to a blog on Tidelift


00:15:29.760 --> 00:15:35.480
by Tidelift about, hey, if I'm making a decision


00:15:35.480 --> 00:15:38.880
on which library to use,


00:15:38.880 --> 00:15:43.480
how could I gauge the maturity of that library?


00:15:43.480 --> 00:15:44.320
So--


00:15:44.320 --> 00:15:45.640
- Yeah, this is a question I get all the time


00:15:45.640 --> 00:15:47.720
from people like, "Hey, I'm new to Python.


00:15:47.720 --> 00:15:49.600
I want to know which library I should use.


00:15:49.600 --> 00:15:53.160
How do I know if the library is a good choice


00:15:53.160 --> 00:15:54.000
or a bad choice?"


00:15:54.000 --> 00:15:56.140
And so there's a lot of different metrics you might use,


00:15:56.140 --> 00:15:57.900
but maybe they're hard to find, right?


00:15:57.900 --> 00:15:58.960
- Exactly.


00:15:58.960 --> 00:16:03.960
So Lawrence Malloy made this library RepoDash available


00:16:05.720 --> 00:16:08.560
so that you can track the metrics


00:16:08.560 --> 00:16:12.200
about, you know, that give a clear indication


00:16:12.200 --> 00:16:15.320
of the health of the project.


00:16:15.320 --> 00:16:18.840
You got your opened issues over any timeframe.


00:16:18.840 --> 00:16:21.360
This actually captures it, you know,


00:16:21.360 --> 00:16:24.700
within the time range that the user specifies.


00:16:24.700 --> 00:16:28.320
So how many items were open, how many issues are open,


00:16:28.320 --> 00:16:31.840
how many closed in that timeframe, still open.


00:16:31.840 --> 00:16:33.960
And it will give you a much better feel


00:16:33.960 --> 00:16:38.960
for the level of maturity and activity.


00:16:38.960 --> 00:16:41.000
- Yeah, this is cool.


00:16:41.000 --> 00:16:45.900
Like how long issues have been setting their open


00:16:45.900 --> 00:16:49.620
or total number of open issues over time,


00:16:49.620 --> 00:16:51.940
how fast should it be enclosed versus being opened


00:16:51.940 --> 00:16:52.820
versus unassigned.


00:16:52.820 --> 00:16:54.460
Yeah, all those kinds of things are really important.


00:16:54.460 --> 00:16:56.740
Another one that is probably in here somewhere,


00:16:56.740 --> 00:16:58.340
I just haven't seen it yet,


00:16:58.340 --> 00:17:01.860
is the number of PRs that are open.


00:17:01.860 --> 00:17:05.100
Like a real red flag to me is I go to a project


00:17:05.100 --> 00:17:09.740
and there's significant number of PRs that are both open


00:17:09.740 --> 00:17:11.140
and maybe even not responded to.


00:17:11.140 --> 00:17:12.500
And they've been there for like six months.


00:17:12.500 --> 00:17:14.300
You're like, okay, whoever's working on this,


00:17:14.300 --> 00:17:16.100
they've kind of lost the love for it.


00:17:16.100 --> 00:17:18.340
- Yeah.


00:17:18.340 --> 00:17:21.940
Yeah, and tied it together,


00:17:21.940 --> 00:17:25.820
it might be the signal of where you need code reviews


00:17:25.820 --> 00:17:28.300
if you're stuck somewhere.


00:17:28.300 --> 00:17:29.140
- Yeah, that's right.


00:17:29.140 --> 00:17:30.420
I mean, that's basically what a PR is.


00:17:30.420 --> 00:17:33.780
is like a, it's waiting on a code review more or less.


00:17:33.780 --> 00:17:34.940
Yeah. - Yep.


00:17:34.940 --> 00:17:35.820
- Yeah, awesome.


00:17:35.820 --> 00:17:36.900
All right, well, this is really cool.


00:17:36.900 --> 00:17:41.140
And I think it'll help people who create repos


00:17:41.140 --> 00:17:44.060
or create projects, make sure that their repo


00:17:44.060 --> 00:17:46.460
is getting sort of the health of what they're doing.


00:17:46.460 --> 00:17:49.600
But then also for people who are new or new to a project,


00:17:49.600 --> 00:17:51.260
they could quickly look at it and go,


00:17:51.260 --> 00:17:54.740
"red flags or green flags?"


00:17:54.740 --> 00:17:55.740
Which is it? - Yeah.


00:17:55.740 --> 00:17:59.180
Yeah, certainly if you're doing the things


00:17:59.180 --> 00:18:03.740
that are making your, it's all part of transparency.


00:18:03.740 --> 00:18:08.000
This is, we're the real deal over here on this team.


00:18:08.000 --> 00:18:10.940
- Yeah, and they even have a cool little categorization


00:18:10.940 --> 00:18:13.100
bar chart of the types of issues that are open,


00:18:13.100 --> 00:18:17.140
like feature requests versus good first issue


00:18:17.140 --> 00:18:19.180
versus bugs and so on, that's cool.


00:18:19.180 --> 00:18:20.180
Brian, what do you think?


00:18:20.180 --> 00:18:22.900
- Well, I guess I don't know if you covered this already,


00:18:22.900 --> 00:18:24.820
but I'm a little lost.


00:18:24.820 --> 00:18:28.100
Is this a service or is that something I add to my repo?


00:18:28.100 --> 00:18:30.020
- Do you know?


00:18:30.020 --> 00:18:31.540
- I think it's something you run,


00:18:31.540 --> 00:18:34.340
you point it at a repo and you run it.


00:18:34.340 --> 00:18:35.180
- Okay.


00:18:35.180 --> 00:18:36.620
- That's my understanding.


00:18:36.620 --> 00:18:38.860
I don't totally, yeah, I haven't used it,


00:18:38.860 --> 00:18:40.140
but I believe so.


00:18:40.140 --> 00:18:41.140
Yeah.


00:18:41.140 --> 00:18:45.900
Yeah, so it's a command, a CLI thing.


00:18:45.900 --> 00:18:48.640
So you just point it at like some GitHub repo


00:18:48.640 --> 00:18:50.600
and you say, tell me how they're doing.


00:18:50.600 --> 00:18:53.180
Would I want to depend on this thing?


00:18:53.180 --> 00:18:54.460
Yes or no?


00:18:54.460 --> 00:18:55.780
- No, I think that's cool.


00:18:55.780 --> 00:18:56.700
Like it.


00:18:56.700 --> 00:18:58.500
- Yeah, you know what else is cool?


00:18:58.500 --> 00:19:00.600
- Sponsors.


00:19:00.600 --> 00:19:03.160
- Sponsors that keep us going, thank you.


00:19:03.160 --> 00:19:04.600
Thank you, and Linode is very cool


00:19:04.600 --> 00:19:06.800
because not only are they sponsoring the show,


00:19:06.800 --> 00:19:10.520
but they're giving everyone a bunch of credit,


00:19:10.520 --> 00:19:14.160
a hundred dollars credit for just using our link.


00:19:14.160 --> 00:19:16.160
And you know, you wanna build something on Kubernetes,


00:19:16.160 --> 00:19:19.440
you wanna build some virtual servers or something like that.


00:19:19.440 --> 00:19:20.760
Here you go.


00:19:20.760 --> 00:19:22.240
So you can simplify your infrastructure


00:19:22.240 --> 00:19:24.240
and cut your cloud bills in half


00:19:24.240 --> 00:19:26.680
with Linode's Linux virtual machines.


00:19:26.680 --> 00:19:30.520
develop, deploy, and scale your modern applications faster and easier.


00:19:30.520 --> 00:19:33.820
And whether you're working on a personal project


00:19:33.820 --> 00:19:36.120
or some of those larger workloads,


00:19:36.120 --> 00:19:40.460
you really should be thinking about something affordable and usable


00:19:40.460 --> 00:19:43.460
and just focused on the job like Linode.


00:19:43.460 --> 00:19:46.000
So as I said, you'll get $100 free credit,


00:19:46.000 --> 00:19:48.600
so be sure to use the link in your podcast player.


00:19:48.600 --> 00:19:50.640
We've got data centers around the world.


00:19:50.640 --> 00:19:53.240
It's the same pricing no matter where you are.


00:19:53.240 --> 00:19:56.080
Just sign up, tell them where your customers are,


00:19:56.080 --> 00:19:57.460
and you wanna create your stuff there


00:19:57.460 --> 00:19:59.600
and that's, you pay the same price.


00:19:59.600 --> 00:20:03.720
You also get 24/7, 365 human support.


00:20:03.720 --> 00:20:05.480
Oh my gosh, I'm working on another,


00:20:05.480 --> 00:20:06.840
something else with someone else


00:20:06.840 --> 00:20:10.160
and this would be so appreciated right now.


00:20:10.160 --> 00:20:12.880
But not, and if it was Lenovo, they'd be helping me out,


00:20:12.880 --> 00:20:16.360
but oh my gosh, don't get me on a rant about other things.


00:20:16.360 --> 00:20:19.440
Anyway, so you can choose shared or dedicated,


00:20:19.440 --> 00:20:22.920
compute and scale the price with your need and so on


00:20:22.920 --> 00:20:24.280
and use your $100 credit,


00:20:24.280 --> 00:20:26.220
even on S3 compatible storage.


00:20:26.220 --> 00:20:27.060
How about that?


00:20:27.060 --> 00:20:31.160
You could use Boto3 and the type annotations


00:20:31.160 --> 00:20:33.880
that both change where it's going and point it over there.


00:20:33.880 --> 00:20:35.360
So yeah, if it runs a Linode,


00:20:35.360 --> 00:20:37.040
or if it runs a Linux, it runs a Linode.


00:20:37.040 --> 00:20:39.360
So use pythonbytes.fm/linode,


00:20:39.360 --> 00:20:42.560
click the create free account button to get started.


00:20:42.560 --> 00:20:47.560
So Brian, I'm not covering two topics this week like normal.


00:20:47.560 --> 00:20:49.280
- You're not?


00:20:49.280 --> 00:20:50.280
- No, because I have so many.


00:20:50.280 --> 00:20:52.300
I can't even possibly deal with it.


00:20:52.300 --> 00:20:56.220
So it's all about extra, extra, extra, extra,


00:20:56.220 --> 00:20:57.920
hear all about it.


00:20:57.920 --> 00:21:02.560
The first one, you may know what a CVE is.


00:21:02.560 --> 00:21:05.160
If it applies to your software, you don't like that.


00:21:05.160 --> 00:21:09.640
So this sounds more scary than I believe it is,


00:21:09.640 --> 00:21:11.920
but let me just do a quick little statement here,


00:21:11.920 --> 00:21:15.300
a reading from nist.gov.


00:21:15.300 --> 00:21:18.240
Python 3 up through 3.9.1,


00:21:18.240 --> 00:21:20.200
which was the latest version of Python


00:21:20.200 --> 00:21:25.120
until five days ago has a buffer overflow


00:21:25.120 --> 00:21:29.480
in PyCRGrepper, C types,


00:21:29.480 --> 00:21:32.480
which may lead to remote code execution.


00:21:32.480 --> 00:21:34.120
Remote code execution sounds bad.


00:21:34.120 --> 00:21:36.640
That sounds like the internet taking my things


00:21:36.640 --> 00:21:39.360
and my data and other bad stuff.


00:21:39.360 --> 00:21:42.100
When you're accepting a floating point number.


00:21:42.100 --> 00:21:43.780
Oh, wait a minute.


00:21:43.780 --> 00:21:46.200
A floating point number,


00:21:46.200 --> 00:21:49.120
like I might get at a JSON API,


00:21:49.120 --> 00:21:51.440
somebody posts some data and here's my floating point number


00:21:51.440 --> 00:21:53.760
but this one hacks my Python web app


00:21:53.760 --> 00:21:54.960
with remote code execution.


00:21:54.960 --> 00:21:56.200
That sounds bad, right?


00:21:56.200 --> 00:21:57.040
- Yeah.


00:21:57.040 --> 00:21:57.860
- Yeah.


00:21:57.860 --> 00:22:00.440
Now, it turns out the way it has to be used


00:22:00.440 --> 00:22:02.580
is like, it's a very narrow thing.


00:22:02.580 --> 00:22:05.120
It shouldn't send people's like hair on fire running like,


00:22:05.120 --> 00:22:07.300
I've got to update the server, right?


00:22:07.300 --> 00:22:11.120
But you should still probably update the server.


00:22:11.120 --> 00:22:13.520
So what do I do?


00:22:13.520 --> 00:22:17.440
I log into the various servers, Linux servers,


00:22:17.440 --> 00:22:18.960
Ubuntu, latest version of Ubuntu


00:22:18.960 --> 00:22:23.040
that I want and I say, oh my goodness, I heard about this.


00:22:23.040 --> 00:22:27.060
Please update, you know, do an apt update.


00:22:27.060 --> 00:22:29.580
There better be a update for Python three.


00:22:29.580 --> 00:22:32.080
Oh no, no, there's no update for Python three.


00:22:32.080 --> 00:22:36.720
In fact, it's still running 385 where this was fixed.


00:22:36.720 --> 00:22:39.840
I think in 388 or something like that.


00:22:39.840 --> 00:22:42.080
And a week's gone by and there's still no update


00:22:42.080 --> 00:22:45.840
for Python on Ubuntu by default.


00:22:45.840 --> 00:22:48.040
Now what I can do is I can go to this like place


00:22:48.040 --> 00:22:50.300
that seems semi-official, but not really official,


00:22:50.300 --> 00:22:53.620
called dead snakes and add that as a package manager


00:22:53.620 --> 00:22:55.540
endpoint for apt.


00:22:55.540 --> 00:22:56.820
But I don't really want to do that either.


00:22:56.820 --> 00:23:01.100
That sounds like maybe even worse than running old Python.


00:23:01.100 --> 00:23:05.140
So that sends me down item number two


00:23:05.140 --> 00:23:08.260
of my extra, extra, extra, extra.


00:23:08.260 --> 00:23:13.460
And that is building Python from source on Ubuntu.


00:23:13.460 --> 00:23:15.740
(laughing)


00:23:15.740 --> 00:23:20.740
Because I really don't want to be running the old Python


00:23:20.740 --> 00:23:25.740
in production, even if it is unlikely, you know, unlikely.


00:23:25.740 --> 00:23:27.740
- You trust yourself over dead snakes?


00:23:27.740 --> 00:23:28.580
Okay.


00:23:28.580 --> 00:23:34.580
- Well, no, what I originally wanted to do, maybe, yes,


00:23:34.580 --> 00:23:39.060
but originally what I wanted to do was use pyenv


00:23:39.060 --> 00:23:40.180
'cause pyenv lets you install


00:23:40.180 --> 00:23:41.740
all sorts of different versions, right?


00:23:41.740 --> 00:23:42.580
- Yeah.


00:23:42.580 --> 00:23:45.100
- Well, the only one available that was 3.9 was 3.9.1,


00:23:45.100 --> 00:23:47.100
which was the one with the bug still.


00:23:47.100 --> 00:23:48.660
It's like, ah.


00:23:48.660 --> 00:23:51.140
And then locally, I use Homebrew on my machine,


00:23:51.140 --> 00:23:54.460
and it just updated yesterday, I think it was.


00:23:54.460 --> 00:23:57.180
But it was a little bit behind, but that's updated.


00:23:57.180 --> 00:23:58.900
So yeah, I guess I do.


00:23:58.900 --> 00:24:00.540
Anyway, so I've found a cool article


00:24:00.540 --> 00:24:02.780
that walks you through all the building, the stuff,


00:24:02.780 --> 00:24:06.060
and then the thing that makes me willing to try this


00:24:06.060 --> 00:24:08.300
and trust this, but also related to the next extra,


00:24:08.300 --> 00:24:12.220
extra, extra, is you can go, instead of doing make install,


00:24:12.220 --> 00:24:14.580
which is the compile step, takes a while,


00:24:14.580 --> 00:24:18.060
but then magic Python comes out the other side.


00:24:18.060 --> 00:24:19.780
You can say make alt install.


00:24:19.780 --> 00:24:21.980
And what it'll do is it'll install


00:24:21.980 --> 00:24:26.440
the version of Python under like a version name.


00:24:26.440 --> 00:24:29.740
So I can type Python 3.9


00:24:29.740 --> 00:24:32.860
and get Python 3.9.2 with no vulnerabilities.


00:24:32.860 --> 00:24:34.500
But if I just type Python or Python 3,


00:24:34.500 --> 00:24:35.640
it's just the system one.


00:24:35.640 --> 00:24:37.980
So that one didn't seem too dangerous to me.


00:24:37.980 --> 00:24:38.820
- Oh, yeah.


00:24:38.820 --> 00:24:39.640
- Yeah.


00:24:39.640 --> 00:24:41.500
And then I just create a virtual environment


00:24:41.500 --> 00:24:43.660
for my stuff that runs on the server.


00:24:43.660 --> 00:24:48.660
Python 3.9-mvenv, create that, and then off it goes.


00:24:48.660 --> 00:24:50.460
And then it's just running this one from here.


00:24:50.460 --> 00:24:52.980
So pretty good.


00:24:52.980 --> 00:24:54.020
That worked out quite well.


00:24:54.020 --> 00:24:55.940
So anyway, I've been doing that for a week


00:24:55.940 --> 00:24:58.380
and the world hasn't crashed or blown up or anything.


00:24:58.380 --> 00:24:59.700
So apparently this works.


00:24:59.700 --> 00:25:03.140
Yeah, one heads up though is like,


00:25:03.140 --> 00:25:04.540
I have a bunch of machines


00:25:04.540 --> 00:25:06.500
that are all the same version of Linux.


00:25:06.500 --> 00:25:10.300
They all seem to have different dependencies


00:25:10.300 --> 00:25:11.660
and ways of dealing with this.


00:25:11.660 --> 00:25:14.780
Like one said, oh, the SSL module is not installed


00:25:14.780 --> 00:25:19.040
as a system library, like apt install libssl type thing.


00:25:19.040 --> 00:25:20.140
Another one, it had that,


00:25:20.140 --> 00:25:22.500
but it didn't have some other thing,


00:25:22.500 --> 00:25:24.300
some other aspect that I forgot.


00:25:24.300 --> 00:25:25.820
But like, they all seem to have different stuff


00:25:25.820 --> 00:25:26.780
that you also got to add in.


00:25:26.780 --> 00:25:29.380
So that was a little bit wonky in the beginning,


00:25:29.380 --> 00:25:30.480
but it's all good now.


00:25:30.480 --> 00:25:33.920
All right, that's extra number two.


00:25:33.920 --> 00:25:38.180
Extra number three,


00:25:38.180 --> 00:25:40.660
it really probably should have preceded that


00:25:40.660 --> 00:25:44.660
Because to make all that work, I wanted to make sure that I had it just right.


00:25:44.660 --> 00:25:49.660
And so I wanted to do this on Ubuntu 2004 LTS.


00:25:49.660 --> 00:25:53.540
And yet I cannot run Docker,


00:25:53.540 --> 00:25:57.740
which is exactly the place where you would do this sort of thing to test it out.


00:25:57.740 --> 00:26:00.140
I couldn't do Docker on my Apple M1.


00:26:00.140 --> 00:26:02.240
Oh, no. OK.


00:26:02.240 --> 00:26:04.340
Now, Docker says it runs.


00:26:04.340 --> 00:26:07.880
Docker says you can run Apple Docker prototype on your M1,


00:26:08.220 --> 00:26:13.620
But I've installed it and all it does is sit there and say starting, starting, starting, starting, starting indefinitely,


00:26:13.620 --> 00:26:14.820
and it will never run.


00:26:14.820 --> 00:26:18.540
I've uninstalled it, I've done different versions of it, like it just won't run.


00:26:18.540 --> 00:26:23.220
People who are listening said, "Oh, what you got to do is you probably installed parallels or this other thing,


00:26:23.220 --> 00:26:25.620
and it caused this problem and you could fix it this way."


00:26:25.620 --> 00:26:30.740
Nope, the problem isn't there because I didn't install any of those things and I can't change the stuff that's not there.


00:26:30.740 --> 00:26:33.940
So long story short, I... Go ahead.


00:26:33.940 --> 00:26:35.780
No, I was just laughing.


00:26:35.780 --> 00:26:40.600
Yeah, yeah, and so what I ended up doing is I saw a really cool trick


00:26:40.600 --> 00:26:45.820
Trick not trick technique. I put this in the show notes. You can just say


00:26:45.820 --> 00:26:51.760
basically two lines on the command line prompt or to docker to say


00:26:51.760 --> 00:26:57.160
You know what if you want to just do docker stuff don't do it here do it over there. And so I have my Intel


00:26:59.660 --> 00:27:03.860
MacBook Pro that's running Ubuntu in a virtual machine.


00:27:03.860 --> 00:27:05.400
So I just turned that on and I just said,


00:27:05.400 --> 00:27:08.240
"Docker context create," that thing over there,


00:27:08.240 --> 00:27:09.580
and then Docker context use.


00:27:09.580 --> 00:27:11.280
And after that, every Docker command,


00:27:11.280 --> 00:27:12.620
without thinking about it,


00:27:12.620 --> 00:27:16.340
or remember it just automatically runs over on that machine.


00:27:16.340 --> 00:27:20.920
And I know it's working because my Mac M1 Mini


00:27:20.920 --> 00:27:22.720
is super quiet, you never hear it or anything.


00:27:22.720 --> 00:27:23.760
But when I work with Docker,


00:27:23.760 --> 00:27:25.920
I can hear that thing grinding away over in the corner.


00:27:25.920 --> 00:27:27.460
So I know it's working.


00:27:29.260 --> 00:27:33.660
All right, really quick. I know I'm running low on time. The last one is people have heard me whinge on about


00:27:33.660 --> 00:27:36.680
Dependabot and how it's such a pain


00:27:36.680 --> 00:27:41.200
And I'm sure they're thinking like, oh michael. Why are you whinging about this? Why are you like just complaining?


00:27:41.200 --> 00:27:45.660
You know, it can't be that bad


00:27:45.660 --> 00:27:48.720
Yeah, so look what is on the screen here dependabot


00:27:48.720 --> 00:27:51.580
merge conflict


00:27:51.580 --> 00:27:52.840
with


00:27:52.840 --> 00:27:54.840
itself like so


00:27:56.060 --> 00:27:59.340
These are the things I have to do on Monday morning. I have to log in and it says,


00:27:59.340 --> 00:28:02.060
"There's a merge conflict. Dependabot put


00:28:02.060 --> 00:28:04.900
cryptography == 346


00:28:04.900 --> 00:28:08.900
when it had unchanged for months


00:28:08.900 --> 00:28:12.260
cryptography == 3.4.3." It's like,


00:28:12.260 --> 00:28:14.740
though it's one line, it's


00:28:14.740 --> 00:28:18.580
it's conflicting with itself. Like, this is crazy. So,


00:28:18.580 --> 00:28:21.980
anyway, this is not a big deal, but people are like, "Why does Michael keep


00:28:21.980 --> 00:28:24.260
complaining about Dependabot and merges?" Like,


00:28:24.260 --> 00:28:27.300
Because I have to go and like the one line it changes merges with itself.


00:28:27.300 --> 00:28:28.580
Like this is not productive.


00:28:28.580 --> 00:28:29.580
All right.


00:28:29.580 --> 00:28:32.580
Oh, no, we're not looking at that one yet.


00:28:32.580 --> 00:28:33.580
That's for later.


00:28:33.580 --> 00:28:34.860
All right, I guess that's it.


00:28:34.860 --> 00:28:37.740
Final shout out though, I'll put this in the link in the show notes.


00:28:37.740 --> 00:28:42.180
Anthony Shaw along with one of his co-workers whose name I'm sorry, I forgot, built a GitHub


00:28:42.180 --> 00:28:47.340
bot that will automatically merge all those things for you for specifically for Dependabot.


00:28:47.340 --> 00:28:50.300
So I'll cover that more later when he writes it up, but he did like a little shout out


00:28:50.300 --> 00:28:51.340
about it on Twitter.


00:28:51.340 --> 00:28:53.340
So link to that since it's related.


00:28:53.340 --> 00:28:54.340
Yeah.


00:28:54.340 --> 00:28:56.340
Whew, that was a lot of extras.


00:28:56.340 --> 00:28:57.340
Yeah.


00:28:57.340 --> 00:29:00.380
I got a short one.


00:29:00.380 --> 00:29:01.820
It's an extra tool also.


00:29:01.820 --> 00:29:03.980
So it's also about Docker.


00:29:03.980 --> 00:29:05.660
So yeah, this is quite related.


00:29:05.660 --> 00:29:06.660
Nice follow on.


00:29:06.660 --> 00:29:12.940
So Josh Peek suggested, and I'm not sure what he was listening to, but he or just wondering


00:29:12.940 --> 00:29:18.840
if we'd heard about it, that if one of the things people talk about with testing is whether


00:29:18.840 --> 00:29:23.040
or not they should mock or stub activities to the database.


00:29:23.040 --> 00:29:27.680
And even if, and then I've talked with a lot of people about that.


00:29:27.680 --> 00:29:33.840
And even if you've got a database that has in-memory setup,


00:29:33.840 --> 00:29:36.080
so you can configure it to be in-memory


00:29:36.080 --> 00:29:37.520
during your testing and stuff,


00:29:37.520 --> 00:29:39.560
it's still a different configuration.


00:29:39.560 --> 00:29:43.240
So one of the suggestions that we've gotten from a lot of people


00:29:43.240 --> 00:29:47.280
is stick your database in a Docker container and then test it.


00:29:47.880 --> 00:29:51.720
So, and then Josh Peek suggested this library


00:29:51.720 --> 00:29:54.320
called testcontainers-python.


00:29:54.320 --> 00:29:56.320
And this is slick.


00:29:56.320 --> 00:29:58.920
I mean, this thing really is.


00:29:58.920 --> 00:30:02.560
You've got, you just install this thing and you can,


00:30:02.560 --> 00:30:06.120
so it covers what, Selenium grid containers,


00:30:06.120 --> 00:30:10.480
standalone containers, MySQL database containers,


00:30:10.480 --> 00:30:14.700
MySQL, MariaDB, Neo4j, Oracle DB, Postgres,


00:30:14.700 --> 00:30:16.960
Microsoft SQL Server even, wow.


00:30:16.960 --> 00:30:19.400
and then just normal Docker containers.


00:30:19.400 --> 00:30:21.480
- Yeah, it also even does MongoDB,


00:30:21.480 --> 00:30:22.440
even though it's not listed.


00:30:22.440 --> 00:30:24.880
I saw some of the examples that had Mongo as well.


00:30:24.880 --> 00:30:26.000
- Oh, that's great.


00:30:26.000 --> 00:30:27.300
I was curious about that.


00:30:27.300 --> 00:30:29.160
So after you install this thing,


00:30:29.160 --> 00:30:32.000
you can just, it provides context managers.


00:30:32.000 --> 00:30:33.120
It probably has other stuff too.


00:30:33.120 --> 00:30:34.440
I didn't read all of it,


00:30:34.440 --> 00:30:36.800
but this is just really not that much code


00:30:36.800 --> 00:30:40.080
to create a Docker container


00:30:40.080 --> 00:30:42.920
that you can throw your connect


00:30:42.920 --> 00:30:45.560
and fill your dummy data in or whatever.


00:30:45.560 --> 00:30:46.400
- I love it.


00:30:46.400 --> 00:30:51.400
I want to use Docker to help test stuff in isolation,


00:30:51.400 --> 00:30:54.460
but I don't want to know about Docker


00:30:54.460 --> 00:30:56.900
or be able to use Docker or care about Docker, right?


00:30:56.900 --> 00:30:57.740
- Right.


00:30:57.740 --> 00:30:58.640
- I don't know Python.


00:30:58.640 --> 00:31:00.100
- What it gives you is,


00:31:00.100 --> 00:31:04.380
it gives you a SQLAlchemy friendly URL


00:31:04.380 --> 00:31:09.380
that you can just connect to your,


00:31:09.380 --> 00:31:14.660
connect to my SQLAlchemy or whatever,


00:31:14.660 --> 00:31:16.700
but you just get this URL out.


00:31:16.700 --> 00:31:20.620
So if you're configuring where your database is


00:31:20.620 --> 00:31:23.420
through a URL, you can throw that


00:31:23.420 --> 00:31:24.980
in whatever configuration environment


00:31:24.980 --> 00:31:26.580
or variable or whatever,


00:31:26.580 --> 00:31:29.340
and test as you run with that.


00:31:29.340 --> 00:31:30.260
And it's pretty neat.


00:31:30.260 --> 00:31:31.220
- That's so cool, yeah.


00:31:31.220 --> 00:31:33.060
Just with MySQL container,


00:31:33.060 --> 00:31:34.880
give it some connection string you want,


00:31:34.880 --> 00:31:38.860
or some host IP address or whatever,


00:31:38.860 --> 00:31:41.100
as MySQL, and then you just, off you go, right?


00:31:41.100 --> 00:31:45.120
just the Docker thing exists while the context is open.


00:31:45.120 --> 00:31:47.520
- Yeah, and I didn't specifically see any documentation


00:31:47.520 --> 00:31:51.200
in here talking about pytest, but if anybody's curious,


00:31:51.200 --> 00:31:52.440
I'm sure it'll work with that


00:31:52.440 --> 00:31:56.400
because even if you have to write your own fixture,


00:31:56.400 --> 00:32:01.400
you can return the context manager items in a fixture.


00:32:01.400 --> 00:32:03.480
So that'll work for you.


00:32:03.480 --> 00:32:05.480
- Yeah, yeah, yeah, super cool.


00:32:05.480 --> 00:32:07.520
You know, that's exactly what I was thinking


00:32:07.520 --> 00:32:09.360
when you were talking about as a pytest fixture


00:32:09.360 --> 00:32:12.420
that maybe loads it and then fills it with test data


00:32:12.420 --> 00:32:14.560
and then hands it off to the test or something like that.


00:32:14.560 --> 00:32:15.400
- Yeah.


00:32:15.400 --> 00:32:16.220
- Yeah.


00:32:16.220 --> 00:32:17.720
Greg, what do you think?


00:32:17.720 --> 00:32:19.120
- I like it.


00:32:19.120 --> 00:32:20.360
- Yeah, it's neat, right?


00:32:20.360 --> 00:32:24.800
Hey, I got a quick follow-up from the last one.


00:32:24.800 --> 00:32:26.400
Magnus on the live stream asks,


00:32:26.400 --> 00:32:28.240
"Will using Pydantic mitigate


00:32:28.240 --> 00:32:30.000
"the floating point overflow bug?"


00:32:30.000 --> 00:32:33.960
Using Pydantic definitely makes


00:32:33.960 --> 00:32:36.520
exchanging JSON data really nice and does some validation,


00:32:36.520 --> 00:32:39.000
but I suspect it probably doesn't.


00:32:39.000 --> 00:32:42.440
That said, people, I really wish I could find this conversation.


00:32:42.440 --> 00:32:45.640
There was a conversation with Dustin Ingram and I think Brett Cannon


00:32:45.640 --> 00:32:49.440
talking about this and how it's really not that severe because


00:32:49.440 --> 00:32:53.120
I believe you've got to take the input and directly hand it off


00:32:53.120 --> 00:32:56.040
at the C layer in Python, like passing it to float


00:32:56.040 --> 00:33:00.200
parentheses in Python, I don't think is enough to trigger.


00:33:00.200 --> 00:33:02.640
You've got to like go down into something like NumPy


00:33:02.640 --> 00:33:04.840
or something super low level.


00:33:04.840 --> 00:33:08.280
So it's not as dangerous, but you know, there's a lot of things


00:33:08.280 --> 00:33:11.560
that use C layers, so who knows what's going on down there.


00:33:11.560 --> 00:33:14.720
So that's why I'm building from source for the moment.


00:33:14.720 --> 00:33:17.340
Anyway, I should also throw out there really quick.


00:33:17.340 --> 00:33:19.760
I was also just frustrated that the latest version


00:33:19.760 --> 00:33:22.160
I can get is 3.8, which is over a year old.


00:33:22.160 --> 00:33:24.700
And I was like, why am I on a year old version of Python


00:33:24.700 --> 00:33:27.440
when I could just take an hour


00:33:27.440 --> 00:33:28.680
and be on the new version of Python?


00:33:28.680 --> 00:33:30.760
So there's more to it than just the bug.


00:33:30.760 --> 00:33:34.760
All right, I guess Greg, we'll throw it back to you


00:33:34.760 --> 00:33:36.120
for this last one.


00:33:36.120 --> 00:33:36.960
Don't have a graph.


00:33:36.960 --> 00:33:39.080
>> Yeah, thank you.


00:33:39.080 --> 00:33:44.080
The context on this was, I had been in data science


00:33:44.080 --> 00:33:47.400
in pretty much the proprietary world.


00:33:47.400 --> 00:33:52.280
So proprietary software using SQL Server and Tableau


00:33:52.280 --> 00:33:55.920
and Cognos and those different tools.


00:33:55.920 --> 00:33:58.160
We started noticing, we're a Bay Area based company.


00:33:58.160 --> 00:34:02.240
We started noticing that customers were leaving


00:34:02.240 --> 00:34:06.000
that proprietary world and going to Python.


00:34:06.000 --> 00:34:09.760
And that actually is one of the things that led me to myself


00:34:09.760 --> 00:34:13.120
to start going in and understanding the industry.


00:34:13.120 --> 00:34:15.800
And just in the time that I've been with Talk Python,


00:34:15.800 --> 00:34:19.520
which is a bit, just a short of a year now,


00:34:19.520 --> 00:34:22.640
I'm seeing a relentless march


00:34:22.640 --> 00:34:27.180
towards more and more adoption in the Python ecosystem


00:34:27.180 --> 00:34:30.040
for businesses that had traditionally


00:34:30.040 --> 00:34:33.080
always relied on proprietary software.


00:34:33.080 --> 00:34:38.080
And it's reaching top of mind to a level


00:34:38.080 --> 00:34:44.020
that I didn't expect that it was gonna happen so fast.


00:34:44.020 --> 00:34:48.000
You know, you followed the Jeffrey Moore, the adoption,


00:34:48.000 --> 00:34:49.460
you know, the early adopters


00:34:49.460 --> 00:34:51.200
and then hitting the main street.


00:34:51.200 --> 00:34:54.680
This one is moving really fast.


00:34:54.680 --> 00:34:59.680
We're seeing like some of the largest corporations


00:35:00.800 --> 00:35:04.260
in the world, looking at Python as a means


00:35:04.260 --> 00:35:07.440
of moving away from Excel even.


00:35:07.440 --> 00:35:12.000
And it's just, it's reaching top of mind


00:35:12.000 --> 00:35:13.820
because more and more decision makers


00:35:13.820 --> 00:35:15.560
are hearing from their technology teams


00:35:15.560 --> 00:35:17.760
that they can deliver solutions


00:35:17.760 --> 00:35:19.840
at unprecedented price performance.


00:35:19.840 --> 00:35:21.120
And that's always--


00:35:21.120 --> 00:35:23.000
- Well, I mean, you were talking this realm,


00:35:23.000 --> 00:35:24.560
like we should talk Gartner, right?


00:35:24.560 --> 00:35:29.520
So there was a Gartner study about why companies


00:35:29.520 --> 00:35:30.560
are moving to open source.


00:35:30.560 --> 00:35:32.360
It was really interesting because a lot of people say,


00:35:32.360 --> 00:35:33.840
well, you've got to move to open source


00:35:33.840 --> 00:35:36.360
because it doesn't cost money, so it helps the bottom line.


00:35:36.360 --> 00:35:38.160
And so many of the companies that


00:35:38.160 --> 00:35:39.700
were interviewed by Gartner were like,


00:35:39.700 --> 00:35:41.480
it has nothing to do with price.


00:35:41.480 --> 00:35:43.280
I mean, price, it's a benefit.


00:35:43.280 --> 00:35:44.520
We'll take not paying less.


00:35:44.520 --> 00:35:45.120
That's fine.


00:35:45.120 --> 00:35:49.040
This is about higher quality, higher visibility, and so on.


00:35:49.040 --> 00:35:52.680
And I think that's a real interesting inherent advantage


00:35:52.680 --> 00:35:53.880
in the community.


00:35:53.880 --> 00:35:54.380
Right.


00:35:54.380 --> 00:35:57.800
And in the case of Excel, you're hitting up


00:35:57.800 --> 00:36:00.440
against limitations in Excel,


00:36:00.440 --> 00:36:02.840
the size limitations most notably.


00:36:02.840 --> 00:36:05.200
Now you're able to handle it.


00:36:05.200 --> 00:36:07.600
It happens to be open-source, the solution,


00:36:07.600 --> 00:36:11.400
but really the pain was the limitations.


00:36:11.400 --> 00:36:13.280
Now you're able to do without it.


00:36:13.280 --> 00:36:15.360
>> There's got to also be maintenance too.


00:36:15.360 --> 00:36:19.920
Sometimes I've heard Perl referred to as a write-only language.


00:36:19.920 --> 00:36:23.520
>> Also regular expressions.


00:36:23.520 --> 00:36:26.720
- Yeah, it's got nothing over trying to edit


00:36:26.720 --> 00:36:30.520
somebody else's spreadsheet full of macros.


00:36:30.520 --> 00:36:31.360
- Right.


00:36:31.360 --> 00:36:32.720
- Oh yeah, yeah.


00:36:32.720 --> 00:36:35.840
They put some VBA in there, it's the kiss of death for sure.


00:36:35.840 --> 00:36:36.680
- Yeah.


00:36:36.680 --> 00:36:39.880
- I mean, those are like go-to statements, it's insane.


00:36:39.880 --> 00:36:40.800
(laughing)


00:36:40.800 --> 00:36:43.480
- Yeah, and so what we're seeing is,


00:36:43.480 --> 00:36:47.360
even though it feels like there's heavy adoption,


00:36:47.360 --> 00:36:49.260
it's still relatively small in road


00:36:49.260 --> 00:36:51.600
compared to what we're gonna see in the future,


00:36:51.600 --> 00:36:52.440
it's like this.


00:36:52.440 --> 00:36:57.080
water rapidly collecting behind a weak dam.


00:36:57.080 --> 00:37:01.240
And we've seen that happen in the industry before.


00:37:01.240 --> 00:37:03.280
- I think that's a really great thing to highlight, Greg.


00:37:03.280 --> 00:37:05.760
I talked with Mahmoud Hashemi,


00:37:05.760 --> 00:37:07.160
who at the time was at PayPal,


00:37:07.160 --> 00:37:12.160
about Python for enterprise software development.


00:37:12.160 --> 00:37:14.680
I think this is the fourth episode at Talk Python.


00:37:14.680 --> 00:37:16.920
I was certainly right at the beginning in 2015.


00:37:16.920 --> 00:37:17.760
- Yeah, I remember that one.


00:37:17.760 --> 00:37:18.640
- Yeah, thanks.


00:37:18.640 --> 00:37:21.640
And it was like a big question.


00:37:21.640 --> 00:37:22.480
"Well, does it make sense?


00:37:22.480 --> 00:37:24.780
"Should people be using Python for these company stuff?


00:37:24.780 --> 00:37:25.980
"Does that make it like?"


00:37:25.980 --> 00:37:28.340
Now it just seems, well, yeah.


00:37:28.340 --> 00:37:30.140
I mean, it seems just like so obvious.


00:37:30.140 --> 00:37:32.100
There's one thing, I was actually gonna cover this


00:37:32.100 --> 00:37:33.900
and I'll cover it again in more depth


00:37:33.900 --> 00:37:36.220
'cause I had so many extras already.


00:37:36.220 --> 00:37:37.660
So I made room.


00:37:37.660 --> 00:37:38.660
But one of the interesting things


00:37:38.660 --> 00:37:41.340
that Google came on to sponsor the PSF at,


00:37:41.340 --> 00:37:42.600
gosh, do they say?


00:37:42.600 --> 00:37:44.300
They probably don't say, this is like a friendly one.


00:37:44.300 --> 00:37:46.820
But there was another article.


00:37:46.820 --> 00:37:49.180
This is just the sort of press release from the PSF.


00:37:49.180 --> 00:37:53.140
But they came on and they're now sponsoring the PSF


00:37:53.140 --> 00:37:56.940
as a visionary sponsor, which I think is over 300,000


00:37:56.940 --> 00:38:01.820
in terms of how much there's,


00:38:01.820 --> 00:38:04.140
and they're also sponsoring a core developer,


00:38:04.140 --> 00:38:06.660
particularly for things around like security


00:38:06.660 --> 00:38:08.720
and PyPI and whatnot.


00:38:08.720 --> 00:38:09.700
So a lot of interesting stuff.


00:38:09.700 --> 00:38:12.480
I'll come back to that later, but in another show.


00:38:12.480 --> 00:38:16.540
Yeah, seems worth giving a little shout out about that.


00:38:16.540 --> 00:38:17.780
- Yep.


00:38:17.780 --> 00:38:20.420
And then a quick comment, Greg, from Magnus.


00:38:20.420 --> 00:38:23.700
I read an article about the reinsurance industry


00:38:23.700 --> 00:38:25.660
also moving from Excel to Python.


00:38:25.660 --> 00:38:26.480
- Yeah.


00:38:26.480 --> 00:38:28.700
- Yeah, I can imagine.


00:38:28.700 --> 00:38:29.820
Awesome.


00:38:29.820 --> 00:38:31.180
- Thank you, Magnus.


00:38:31.180 --> 00:38:32.020
- Yeah.


00:38:32.020 --> 00:38:34.120
All right.


00:38:34.120 --> 00:38:35.180
I guess that's it for items.


00:38:35.180 --> 00:38:37.500
Now, Brian, how about some extras?


00:38:37.500 --> 00:38:41.780
- Well, I know that you've been using Firefox


00:38:41.780 --> 00:38:42.620
for a while, right?


00:38:42.620 --> 00:38:45.080
- I did notice over on your stream


00:38:45.080 --> 00:38:46.460
that looks a little Firefoxy over there.


00:38:46.460 --> 00:38:47.300
What happened, man?


00:38:47.300 --> 00:38:51.740
Yeah, so the thing that convinced me is this announcement.


00:38:51.740 --> 00:38:54.540
They just released Firefox 86, and it's


00:38:54.540 --> 00:38:57.700
got this enhanced cookie protection.


00:38:57.700 --> 00:39:00.060
And I don't understand the gist of it,


00:39:00.060 --> 00:39:05.420
but mostly it seems like they just said,


00:39:05.420 --> 00:39:07.620
whatever site you're on, they can--


00:39:07.620 --> 00:39:10.660
because sometimes I've heard people say, I turn off cookies.


00:39:10.660 --> 00:39:13.540
Well, sites don't work without-- some of them just don't work.


00:39:13.540 --> 00:39:14.180
Yeah.


00:39:14.180 --> 00:39:15.060
You want to log in?


00:39:15.060 --> 00:39:16.580
Well, you're going to need a cookie.


00:39:16.580 --> 00:39:20.220
Yeah, so or just saving stuff.


00:39:20.220 --> 00:39:22.820
There's times where I just don't, there's nothing private there.


00:39:22.820 --> 00:39:24.620
I don't want to log in every time.


00:39:24.620 --> 00:39:26.620
But I don't want you to share it with other people either.


00:39:26.620 --> 00:39:31.180
So this enhancement is just keep the site's cookies to themselves.


00:39:31.180 --> 00:39:36.060
So they have like a cookie jar or a storage area for cookies that's individual to each


00:39:36.060 --> 00:39:44.100
site and you can save as many as you want for your site and then another site gets another


00:39:44.100 --> 00:39:45.100
one.


00:39:45.100 --> 00:39:47.780
The obvious, like you were saying, login stuff.


00:39:47.780 --> 00:39:51.220
I used different login providers.


00:39:51.220 --> 00:39:52.580
There is an exception for that.


00:39:52.580 --> 00:39:57.020
So you can use login providers, and it allows that.


00:39:57.020 --> 00:40:01.300
But these are non-tracking cookie uses.


00:40:01.300 --> 00:40:01.940
Yeah.


00:40:01.940 --> 00:40:05.900
I'm super excited about this as well.


00:40:05.900 --> 00:40:11.820
Basically, if you were to go to cnn.com,


00:40:11.820 --> 00:40:13.340
and then you were to go--


00:40:13.340 --> 00:40:14.820
I'm not for sure about this, right?


00:40:14.820 --> 00:40:18.260
but likely, then you would go to the Verge,


00:40:18.260 --> 00:40:20.380
and then you're going to go to Chewy.com


00:40:20.380 --> 00:40:22.260
and buy something for your pet.


00:40:22.260 --> 00:40:25.620
Like, very likely, they're using some ad network that's


00:40:25.620 --> 00:40:28.180
put a cookie that knows you did that sequence of events.


00:40:28.180 --> 00:40:30.260
And oh, by the way, you're logged in as so-and-so


00:40:30.260 --> 00:40:30.900
over on that one.


00:40:30.900 --> 00:40:32.300
So on all the other sites, we now


00:40:32.300 --> 00:40:35.620
know that so-and-so is really interested in Chew toys


00:40:35.620 --> 00:40:39.540
for a medium-sized dog, but a puppy, not a full--


00:40:39.540 --> 00:40:40.040
right?


00:40:40.040 --> 00:40:41.920
And it gets to the point where people think,


00:40:41.920 --> 00:40:45.000
"Oh, well, all these things are listening to us on our phone,


00:40:45.000 --> 00:40:48.320
but they just track us so insanely deeply."


00:40:48.320 --> 00:40:52.120
And so the idea is, yeah, let that third-party thing,


00:40:52.120 --> 00:40:53.120
let it set a cookie.


00:40:53.120 --> 00:40:56.880
But when they get to Chewy.com from CNN.com


00:40:56.880 --> 00:40:58.160
and they ask for the cookies there,


00:40:58.160 --> 00:41:00.120
like, yeah, sure, you can have your third-party cookie,


00:41:00.120 --> 00:41:02.820
but it's a completely unrelated brand new one,


00:41:02.820 --> 00:41:06.020
as if you deleted your history and started over,


00:41:06.020 --> 00:41:06.860
which is beautiful.


00:41:06.860 --> 00:41:08.720
I'm super excited about this as well.


00:41:08.720 --> 00:41:09.560
- Yeah.


00:41:10.420 --> 00:41:13.900
And Robert Robinson says that CNN better not try to sell him dog toys.


00:41:13.900 --> 00:41:17.020
I'm with you, man.


00:41:17.020 --> 00:41:17.520
I'm with you.


00:41:17.520 --> 00:41:20.700
Doggy toys from the doggy toy site.


00:41:20.700 --> 00:41:22.220
News from the new site.


00:41:22.220 --> 00:41:24.420
Sometimes they're hard to tell apart, but you never know.


00:41:24.420 --> 00:41:25.540
Stay in your lane.


00:41:25.540 --> 00:41:26.780
Stay in your lane.


00:41:26.780 --> 00:41:28.860
All right.


00:41:28.860 --> 00:41:29.240
Yeah.


00:41:29.240 --> 00:41:30.860
So that was the one thing you wanted to cover, right?


00:41:30.860 --> 00:41:31.300
Yeah.


00:41:31.300 --> 00:41:31.900
Yeah.


00:41:31.900 --> 00:41:33.940
I did my extra, extra, extra, extra.


00:41:33.940 --> 00:41:34.980
So I've already covered that.


00:41:34.980 --> 00:41:37.500
So I feel like, Greg, anything you want to throw out there before we,


00:41:37.500 --> 00:41:39.580
uh, move on to a joke?


00:41:39.980 --> 00:41:42.380
- No, can't get in the way of a joke.


00:41:42.380 --> 00:41:44.020
- No, I know this is good.


00:41:44.020 --> 00:41:49.020
So sometimes we find an interesting joke


00:41:49.020 --> 00:41:50.540
or a funny thing out there


00:41:50.540 --> 00:41:53.780
and sometimes we strike gold, right?


00:41:53.780 --> 00:41:58.000
Like Brian pie jokes, I mean, pipx install pie joke.


00:41:58.000 --> 00:42:02.420
Come on, like the CLI is now full of dad developer jokes.


00:42:02.420 --> 00:42:04.660
Well, I kind of feel like I got one of those here as well.


00:42:04.660 --> 00:42:06.920
So there's this place called,


00:42:08.100 --> 00:42:10.520
article called 56 Funny Code Comments


00:42:10.520 --> 00:42:11.820
that people actually wrote.


00:42:11.820 --> 00:42:12.780
(laughing)


00:42:12.780 --> 00:42:13.620
- Nice.


00:42:13.620 --> 00:42:14.540
- I don't know if they're 56,


00:42:14.540 --> 00:42:15.960
but I feel like we may revisit this.


00:42:15.960 --> 00:42:17.380
So I wanna go through four here.


00:42:17.380 --> 00:42:18.220
- Okay.


00:42:18.220 --> 00:42:19.660
- I linked to the real article in there,


00:42:19.660 --> 00:42:21.040
but I pulled them out separately,


00:42:21.040 --> 00:42:24.020
so I'm just showing on the screen here.


00:42:24.020 --> 00:42:25.620
Like I'll read the first one,


00:42:25.620 --> 00:42:27.220
and we can take turns reading.


00:42:27.220 --> 00:42:28.820
There's only four or five here.


00:42:28.820 --> 00:42:30.700
So the first one is,


00:42:30.700 --> 00:42:33.700
it's a big like header at the top of a function


00:42:33.700 --> 00:42:34.540
in a comment.


00:42:34.540 --> 00:42:35.360
It says, "Dear maintainer,


00:42:35.360 --> 00:42:40.920
Once you're done trying to optimize this routine and you realize what a terrible mistake that


00:42:40.920 --> 00:42:45.640
was, please increment the following counters, a warning to the next guy.


00:42:45.640 --> 00:42:48.160
Total hours wasted here equals 73.


00:42:48.160 --> 00:42:51.840
Is that awesome or what?


00:42:51.840 --> 00:42:52.840
Yeah.


00:42:52.840 --> 00:42:53.840
Oh, man.


00:42:53.840 --> 00:42:56.840
That's beautiful, isn't it?


00:42:56.840 --> 00:42:57.840
Yeah.


00:42:57.840 --> 00:42:59.200
That's beautiful, isn't it?


00:42:59.200 --> 00:43:05.440
Yeah, I've had code that one out of five developer that gets to it says,


00:43:05.440 --> 00:43:08.000
"Oh, I think we can make this cleaner," and they don't.


00:43:08.000 --> 00:43:12.400
Nope. They just make it stop working, then they have to fix it, and then it goes back like it was.


00:43:12.400 --> 00:43:14.720
All right, Brian, you want to do the next one?


00:43:14.720 --> 00:43:19.760
Sure. Sometimes I believe compiler ignores all my comments. Huh?


00:43:19.760 --> 00:43:21.600
That's a comment.


00:43:21.600 --> 00:43:24.960
[LAUGHTER]


00:43:24.960 --> 00:43:30.360
Sometimes I believe the compiler ignores all your comments.


00:43:30.360 --> 00:43:32.120
Like, probably all the time, hopefully.


00:43:32.120 --> 00:43:34.240
[LAUGHTER]


00:43:34.240 --> 00:43:35.920
Oh, this next one's my favorite.


00:43:35.920 --> 00:43:36.420
Yeah.


00:43:36.420 --> 00:43:37.480
All right, that was you.


00:43:37.480 --> 00:43:37.980
Great.


00:43:37.980 --> 00:43:38.480
Drunk.


00:43:38.480 --> 00:43:38.960
Drunk.


00:43:38.960 --> 00:43:39.680
Fix later.


00:43:39.680 --> 00:43:43.800
[LAUGHTER]


00:43:43.800 --> 00:43:45.960
I can totally see that one.


00:43:45.960 --> 00:43:46.720
Honesty.


00:43:46.720 --> 00:43:49.160
Honesty.


00:43:49.160 --> 00:43:50.640
Also, this one is nice.


00:43:50.640 --> 00:43:52.440
Probably this came from stack overflow,


00:43:52.440 --> 00:43:54.600
a partial level of understanding.


00:43:54.600 --> 00:43:57.040
The comment is, "Magic, do not touch."


00:43:57.040 --> 00:43:58.960
- Yeah, definitely, yeah.


00:43:58.960 --> 00:44:01.240
- Brian, you wanna round us out with this last one?


00:44:01.240 --> 00:44:03.200
Because sometimes the best part about comments


00:44:03.200 --> 00:44:04.400
is if they're accurate or not.


00:44:04.400 --> 00:44:06.320
- Is they're wrong, yeah.


00:44:06.320 --> 00:44:08.920
I've heard people refer to comments as future lives.


00:44:08.920 --> 00:44:13.400
In this one, there's a routine called,


00:44:13.400 --> 00:44:15.560
it's a Boolean, it returns a Boolean.


00:44:15.560 --> 00:44:17.640
It's called isAvailable.


00:44:17.640 --> 00:44:19.520
And it returns false.


00:44:19.520 --> 00:44:21.440
It's just a single statement, return false.


00:44:21.440 --> 00:44:23.840
With a comment that says, always returns true.


00:44:23.840 --> 00:44:26.100
(laughing)


00:44:26.100 --> 00:44:28.280
- I love it.


00:44:28.280 --> 00:44:30.240
I'm telling you, there's gonna be a lot of good jokes


00:44:30.240 --> 00:44:32.720
coming from this article here.


00:44:32.720 --> 00:44:34.400
- Nice. - So, yeah, pretty good.


00:44:34.400 --> 00:44:37.520
All right, well, thank you, Brian, as always.


00:44:37.520 --> 00:44:38.840
Greg, thank you for being here.


00:44:38.840 --> 00:44:40.200
- Thank you for having me.


00:44:40.200 --> 00:44:41.220
- Yeah, it was definitely great.


00:44:41.220 --> 00:44:42.480
And thanks everyone for listening.


00:44:42.480 --> 00:44:43.320
See y'all later.


00:44:43.320 --> 00:44:53.320
[BLANK_AUDIO]

