WEBVTT

00:00:00.000 --> 00:00:07.800
Welcome everybody to our live stream.


00:00:07.800 --> 00:00:09.360
Python Bytes here.


00:00:09.360 --> 00:00:12.400
So we're going to kick it off.


00:00:12.400 --> 00:00:15.920
Hello and welcome to Python Bytes,


00:00:15.920 --> 00:00:19.300
where we deliver Python news and headlines directly to your earbuds.


00:00:19.300 --> 00:00:21.120
This is episode 237,


00:00:21.120 --> 00:00:25.280
recorded June 9, 2021. I'm Brian Okken.


00:00:25.280 --> 00:00:26.680
>> I'm Michael Kennedy.


00:00:26.680 --> 00:00:28.240
>> I'm Mike Rhoades.


00:00:28.240 --> 00:00:30.240
Hey, Mike, thanks for showing up today.


00:00:30.240 --> 00:00:32.980
Tell us a little bit about yourself.


00:00:32.980 --> 00:00:34.480
Yeah, well, thank you guys for having me.


00:00:34.480 --> 00:00:36.840
This is actually really fun to be here.


00:00:36.840 --> 00:00:38.380
My name is Mike Groves.


00:00:38.380 --> 00:00:42.860
I am leading the engineering at a company called Assembly AI.


00:00:42.860 --> 00:00:45.880
We are mainly a Python shop,


00:00:45.880 --> 00:00:47.340
but we do a lot.


00:00:47.340 --> 00:00:51.420
We do speech to text for developers.


00:00:51.420 --> 00:00:53.360
We're an API company.


00:00:53.360 --> 00:00:57.700
You can really think of us as we are trying to


00:00:57.700 --> 00:01:01.660
make speech to text and all of the ways


00:01:01.660 --> 00:01:03.500
you can take that text and do things with it


00:01:03.500 --> 00:01:07.100
really easy for developers so that they can


00:01:07.100 --> 00:01:09.700
integrate this value into their products


00:01:09.700 --> 00:01:11.480
and make their customers happier.


00:01:11.480 --> 00:01:12.320
- Yeah, that's really cool.


00:01:12.320 --> 00:01:16.580
I had somebody who, I had spoken to guys


00:01:16.580 --> 00:01:19.440
at Assembly AI for some talk Python stuff,


00:01:19.440 --> 00:01:20.980
but someone else that I'm working with


00:01:20.980 --> 00:01:21.800
reached out to me and said,


00:01:21.800 --> 00:01:25.180
"Hey, I'm doing this stuff with this Assembly AI API,


00:01:25.180 --> 00:01:27.320
"and I don't know how to save the file that well.


00:01:27.320 --> 00:01:31.160
Can you help me? I'm like, Oh, this looks really simple. This is really nice. So yeah, you guys are doing good work.


00:01:31.160 --> 00:01:35.040
Yeah, we try to make it really simple. Yeah. Yeah. Fantastic.


00:01:35.040 --> 00:01:44.200
Right, shall we kick it off? I think we should. With the to we


00:01:44.200 --> 00:01:46.440
heard of a GUI,


00:01:46.440 --> 00:01:53.320
a GUI, a graphical user interface, and this new trend of taking


00:01:54.640 --> 00:01:57.600
stuff that happens in the terminal and making it nicer.


00:01:57.600 --> 00:02:00.240
We've covered things like rich and stuff before, right?


00:02:00.240 --> 00:02:02.600
Yeah, a lot. I love rich.


00:02:02.600 --> 00:02:05.360
Yeah, I do too. I'm super, super big fan.


00:02:05.360 --> 00:02:09.960
So I want to cover something that's like a derivative of rich from will McGann.


00:02:09.960 --> 00:02:15.200
I've got gogan. See, here we are messing up names already. Sorry, well,


00:02:15.200 --> 00:02:23.920
and the idea is, if I wanted to create, like EMAX or a richer UI with some like


00:02:23.920 --> 00:02:26.680
rich, I can sort of control stuff on the screen and how it


00:02:26.680 --> 00:02:30.680
prints. But it's not full on curses, right? It's not, I want


00:02:30.680 --> 00:02:32.800
to write in this section over here. And I want to dock this


00:02:32.800 --> 00:02:35.400
other bit to the right and have rich automatically put stuff


00:02:35.400 --> 00:02:41.720
into it, and so on. So I introduce you to textual, it was


00:02:41.720 --> 00:02:46.600
called rich dot to a TUI, as in text, terminal user interface,


00:02:46.600 --> 00:02:50.680
but it's now called textual. And the idea is we can have these


00:02:50.680 --> 00:02:55.120
cool things like I would like a thing to be a header of my


00:02:55.120 --> 00:02:57.280
terminal app and the footer of my terminal app and I want to


00:02:57.280 --> 00:03:01.840
dock a 30 column wide section to the left and then just fill out


00:03:01.840 --> 00:03:04.320
the rest in a little area that just takes the rest of the


00:03:04.320 --> 00:03:05.840
space. How cool is that?


00:03:05.840 --> 00:03:08.320
Yeah, this is great.


00:03:08.320 --> 00:03:12.800
Yeah, and then each one of these areas is written to and controlled


00:03:12.800 --> 00:03:15.800
by rich. So all the nice stuff that we've already talked about


00:03:15.800 --> 00:03:19.840
with rich, and the really nice things you get from there. So


00:03:20.440 --> 00:03:24.040
you know, if people remember, like, Regolith, you have


00:03:24.040 --> 00:03:26.040
spectrums and


00:03:26.040 --> 00:03:30.600
like, centered text or right aligned text and tables and just


00:03:30.600 --> 00:03:32.600
all sorts of good stuff. So,


00:03:32.600 --> 00:03:34.600
think of doing that, but on top of this, like,


00:03:34.600 --> 00:03:37.320
it's almost like a layout for terminals.


00:03:37.320 --> 00:03:41.360
Yeah, he's kind of rethinking how to do terminal stuff.


00:03:41.360 --> 00:03:43.360
So, this,


00:03:43.360 --> 00:03:47.200
I know you can do all of this stuff with Cursus libraries and things like that, but


00:03:47.200 --> 00:03:50.760
Curses isn't always easy on all platforms.


00:03:50.760 --> 00:03:56.000
So he's rethinking all of it, and I think it's really kind of fun.


00:03:56.000 --> 00:03:59.680
Yeah, I do want to point out something here really quick.


00:03:59.680 --> 00:04:02.960
There's a comment in the readme that says,


00:04:02.960 --> 00:04:06.880
"This project is currently a work in progress and may not be usable for a while."


00:04:06.880 --> 00:04:10.720
So, you know, just kind of maybe watch the repo


00:04:10.720 --> 00:04:15.400
and get notifications and stuff and keep your eye out for it.


00:04:15.400 --> 00:04:20.600
On the other hand, this kind of thing, these early stages, a lot of people contact us and say,


00:04:20.600 --> 00:04:25.080
"I really want to get into open source. I want to contribute to some project.


00:04:25.080 --> 00:04:27.080
What should I work on? Should I work on Django?"


00:04:27.080 --> 00:04:29.080
It's like, "Well, that's going to be a little bit complicated.


00:04:29.080 --> 00:04:31.640
It's highly polished, and there's a ton of dependencies."


00:04:31.640 --> 00:04:34.360
Like projects like this that are in their early stages


00:04:34.360 --> 00:04:38.200
are really good for jumping in and getting involved if it sparks your interest.


00:04:38.200 --> 00:04:38.700
So...


00:04:38.700 --> 00:04:41.880
Yeah, there's a lot of room for people to do things like


00:04:43.320 --> 00:04:45.360
added the testing, do documentation,


00:04:45.360 --> 00:04:47.760
test on different platforms and really help it


00:04:47.760 --> 00:04:50.880
so that Will can concentrate on doing more features.


00:04:50.880 --> 00:04:51.880
- Yeah, yeah, exactly.


00:04:51.880 --> 00:04:54.440
Even documentation, like a little tutorial or whatever.


00:04:54.440 --> 00:04:57.120
And Kim out in the live stream, hey Kim,


00:04:57.120 --> 00:04:59.780
says, "I would argue Cursus isn't easy anywhere."


00:04:59.780 --> 00:05:01.320
I agree, it's always feels like,


00:05:01.320 --> 00:05:04.240
oh boy, we're going down this path.


00:05:04.240 --> 00:05:05.580
Mike, what do you think?


00:05:05.580 --> 00:05:08.800
- Well, it looks like a really cool library.


00:05:08.800 --> 00:05:11.640
And I think for me, I try to think of what would I use it for


00:05:11.640 --> 00:05:13.920
and certainly a lot of internal tooling


00:05:13.920 --> 00:05:17.480
that we could use this for to,


00:05:17.480 --> 00:05:20.120
so that we can make better ways of monitoring


00:05:20.120 --> 00:05:23.120
our machine learning systems and how that all works.


00:05:23.120 --> 00:05:25.100
And so, yeah, I think that would be something


00:05:25.100 --> 00:05:26.760
I would like to look at.


00:05:26.760 --> 00:05:29.400
And yeah, and also just a lot of times too,


00:05:29.400 --> 00:05:31.200
is just trying something out,


00:05:31.200 --> 00:05:33.080
even if you have like a day or two to just try it out


00:05:33.080 --> 00:05:35.280
and hit the bug so you can really communicate that


00:05:35.280 --> 00:05:37.440
with the community on what is broken


00:05:37.440 --> 00:05:40.140
and what could be fixed.


00:05:40.140 --> 00:05:42.540
Yeah, absolutely. I'm excited to see where this goes.


00:05:42.540 --> 00:05:48.740
Yeah, so next up, we want to talk about pip-tools.


00:05:48.740 --> 00:05:54.340
So, actually, one of the listeners, John Hagen, contacted us a while ago and said,


00:05:54.340 --> 00:05:58.420
"Hey, have you covered this?" And we thought we had, but I don't think we have.


00:05:58.420 --> 00:06:00.320
So, I'm going to cover it now.


00:06:00.320 --> 00:06:05.220
pip-tools, so we've talked about other things around PIP, like poetry,


00:06:05.280 --> 00:06:08.280
and there's other ways to,


00:06:08.280 --> 00:06:11.220
and some virtual environment controllers and stuff.


00:06:11.220 --> 00:06:14.040
This isn't that, this isn't an all-in-one thing.


00:06:14.040 --> 00:06:15.780
But one of the things that,


00:06:15.780 --> 00:06:18.280
like for instance, Poetry gives you is,


00:06:18.280 --> 00:06:23.280
and a couple of other packaging things is lock files and stuff.


00:06:23.280 --> 00:06:28.640
A lock file really isn't what it does.


00:06:28.640 --> 00:06:31.920
I don't know if it's a lock file or pinned requirements.


00:06:31.920 --> 00:06:33.920
But the idea around,


00:06:33.920 --> 00:06:36.280
pip-tools does a whole bunch of stuff,


00:06:36.280 --> 00:06:39.160
but right now I'm just going to concentrate on the compile part.


00:06:39.160 --> 00:06:41.120
The problem it solves is,


00:06:41.120 --> 00:06:42.520
let's say I've got,


00:06:42.520 --> 00:06:46.360
I'm going to give an example of I've got a requirement,


00:06:46.360 --> 00:06:48.440
my dependency is rich and


00:06:48.440 --> 00:06:51.480
typer is two libraries I'm depending on.


00:06:51.480 --> 00:06:56.160
I could just have a simple requirements.in file that has this,


00:06:56.160 --> 00:06:58.640
just those two labels in it.


00:06:58.640 --> 00:07:00.520
Then with pip-tools,


00:07:00.520 --> 00:07:05.700
I can take that and take that requirements in file and compile it.


00:07:05.700 --> 00:07:07.080
I run pip compile,


00:07:07.080 --> 00:07:11.140
and then I get a pinned list,


00:07:11.140 --> 00:07:15.340
and it actually just goes in and writes the requirements.txt file.


00:07:15.340 --> 00:07:17.220
Just from an easy,


00:07:17.220 --> 00:07:23.620
I require these things and it'll pop out the actual pinned dependencies.


00:07:23.620 --> 00:07:27.700
Now I can deploy this and all the other developers and stuff


00:07:27.700 --> 00:07:29.820
can use it and be okay with it.


00:07:29.820 --> 00:07:35.300
Of course, before you do the deployment,


00:07:35.300 --> 00:07:36.480
please test this.


00:07:36.480 --> 00:07:40.600
That's the idea, is you update your requirements


00:07:40.600 --> 00:07:43.860
and then test it before you deploy it.


00:07:43.860 --> 00:07:45.820
But this little extra step of taking,


00:07:45.820 --> 00:07:48.820
I've got a loose list of requirements,


00:07:48.820 --> 00:07:51.820
and I want to create a pinned list.


00:07:51.820 --> 00:07:56.220
pip-tools also has a way to just say,


00:07:56.220 --> 00:07:58.700
let me get the syntax right, upgrade.


00:07:58.700 --> 00:08:02.240
So you say --upgrade, and it updates your requirements.


00:08:02.240 --> 00:08:05.840
One of the things I love about it also is it doesn't just do one file.


00:08:05.840 --> 00:08:10.140
So if you've got a requirements.txt and a dev requirements.txt,


00:08:10.140 --> 00:08:14.200
for instance, with your testing tools, pytest and such,


00:08:14.200 --> 00:08:17.780
you can throw that in a different file and it'll update those too.


00:08:17.780 --> 00:08:21.840
So you can have actually as many requirements files as you want,


00:08:21.840 --> 00:08:23.440
and it handles it just fine.


00:08:23.440 --> 00:08:25.820
So this is a really cool thing.


00:08:25.820 --> 00:08:29.420
Jonathan also gave us an example project,


00:08:29.420 --> 00:08:35.060
this Python blueprint that has example code in it,


00:08:35.060 --> 00:08:38.060
and it uses this workflow and it has the readme.


00:08:38.060 --> 00:08:41.720
If you want to check out a project that uses this, go and do that.


00:08:41.720 --> 00:08:44.700
I don't really, actually to be honest,


00:08:44.700 --> 00:08:47.480
I don't use the pip-tools for anything other than this.


00:08:47.480 --> 00:08:49.540
This is what I use pip-tools for, is just this.


00:08:49.540 --> 00:08:50.940
I know it does other things too,


00:08:50.940 --> 00:08:52.860
but this is what I use it for.


00:08:52.860 --> 00:08:55.380
>> I'm psyched about this. This looks fantastic.


00:08:55.380 --> 00:09:00.100
I have a requirements.txt and a dev,


00:09:00.100 --> 00:09:02.620
requirements-dev.txt.


00:09:02.620 --> 00:09:05.540
And in there, I've been putting like at the top,


00:09:05.540 --> 00:09:08.780
here's the stuff that I really wanted to install.


00:09:08.780 --> 00:09:11.260
And below it, these are the things I want to pin,


00:09:11.260 --> 00:09:12.940
not because I actually care about them


00:09:12.940 --> 00:09:14.820
or you would actually need to mention them,


00:09:14.820 --> 00:09:16.660
but I want things like to pin the bot


00:09:16.660 --> 00:09:19.500
to see that there's a security problem in the dependency


00:09:19.500 --> 00:09:21.420
I'm using, not the thing itself.


00:09:21.420 --> 00:09:23.980
And so it'll bump the version and fix it, right?


00:09:23.980 --> 00:09:25.060
- Yeah.


00:09:25.060 --> 00:09:28.060
And that means, I just noticed a couple days ago


00:09:28.060 --> 00:09:29.820
that there's these other libraries.


00:09:29.820 --> 00:09:31.660
I'm like, where did this come from?


00:09:31.660 --> 00:09:33.060
This is in my virtual environment,


00:09:33.060 --> 00:09:36.460
and I didn't, it's not in either of those scenarios, right?


00:09:36.460 --> 00:09:39.140
Well, some new dependency was added to the main dependency


00:09:39.140 --> 00:09:40.400
that I didn't pay attention to.


00:09:40.400 --> 00:09:42.420
So now I'm like babysitting the bottom half


00:09:42.420 --> 00:09:43.780
of my requirements.txt file,


00:09:43.780 --> 00:09:47.340
which seems like a thing I don't want to do with life.


00:09:47.340 --> 00:09:48.180
This is beautiful.


00:09:48.180 --> 00:09:49.040
I'm all about this.


00:09:49.040 --> 00:09:51.060
I'm very much thinking that this is going to be


00:09:51.060 --> 00:09:53.420
something I'm using out there.


00:09:53.420 --> 00:09:54.800
Mike, you seem to agree.


00:09:54.800 --> 00:10:02.080
Yeah, I absolutely agree. And I actually have we do not use this. I do not use this, but I will be looking into this right after this podcast.


00:10:02.080 --> 00:10:05.600
Why am I not doing more of this?


00:10:05.600 --> 00:10:08.800
This will make my life a lot easier. And I'm definitely gonna look into it.


00:10:08.800 --> 00:10:09.440
Yeah.


00:10:09.440 --> 00:10:12.000
Now, Juergen brings up, oh, you can.


00:10:12.000 --> 00:10:15.240
The pip to PIPtools is awesome.


00:10:15.240 --> 00:10:20.840
Yes, it is. And he also brings up that it's all about the app first library story.


00:10:20.840 --> 00:10:23.300
So PivotTools is definitely on the app side.


00:10:23.300 --> 00:10:29.040
So you wouldn't want completely pinned dependencies in a library


00:10:29.040 --> 00:10:32.500
because it might conflict with the rest of the application.


00:10:32.500 --> 00:10:34.100
>> Right. Or pin you to say,


00:10:34.100 --> 00:10:36.900
I have to have the one that has the vulnerability in it,


00:10:36.900 --> 00:10:38.780
rather than the newer one that fixes it.


00:10:38.780 --> 00:10:39.620
You don't want that.


00:10:39.620 --> 00:10:40.100
>> Yeah.


00:10:40.100 --> 00:10:40.500
>> Right.


00:10:40.500 --> 00:10:41.180
>> Yeah.


00:10:41.180 --> 00:10:44.660
>> Awesome. Yeah.


00:10:44.660 --> 00:10:46.460
So I think.


00:10:46.460 --> 00:10:47.980
>> Yeah, I think you're up, Mike.


00:10:47.980 --> 00:10:48.860
>> I'm up. All right.


00:10:48.860 --> 00:10:52.700
Okay, so here's a hint on the pronunciation, but you're gonna have to give this a shot


00:10:52.700 --> 00:10:53.700
on your own.


00:10:53.700 --> 00:10:58.020
Yeah, so I'm gonna say it's penguin, but I guess you could call it penguin.


00:10:58.020 --> 00:11:02.540
I don't know what the proper pronunciation there is.


00:11:02.540 --> 00:11:08.940
But so penguin is a library for automating the generation of tests.


00:11:08.940 --> 00:11:17.660
So basically what you do is it's CLI, you set this up, you point it at your code, you


00:11:17.660 --> 00:11:26.300
sometimes give it hints and then it goes off and it processes the your files and produces


00:11:26.300 --> 00:11:31.440
tests. Just disclaimer here, they mentioned this several times and this is very important.


00:11:31.440 --> 00:11:38.460
It will run your code so and it will try many different inputs. So you have to be very careful


00:11:38.460 --> 00:11:43.020
with what that code is doing. So they suggest wrapping it in a Docker container to prevent


00:11:43.020 --> 00:11:48.020
it from affecting or poisoning your file system.


00:11:48.020 --> 00:11:49.260
- Yeah, maybe don't give it access


00:11:49.260 --> 00:11:51.620
to the production database, something like that.


00:11:51.620 --> 00:11:53.020
- Yes, exactly, exactly.


00:11:53.020 --> 00:11:58.020
So, yes, I didn't go deep into it,


00:11:58.020 --> 00:11:59.860
but I know that they're using


00:11:59.860 --> 00:12:02.620
some interesting search techniques.


00:12:02.620 --> 00:12:05.940
This is actually developed by a colleague at a university


00:12:05.940 --> 00:12:07.140
and there's a white paper behind it.


00:12:07.140 --> 00:12:09.780
I don't think it's here, but if you look it up,


00:12:09.780 --> 00:12:12.940
I'm sure you could find the white paper


00:12:12.940 --> 00:12:17.780
that's associated, but it's supposed to be a very interesting technique around searching


00:12:17.780 --> 00:12:27.620
for the inputs that would find good edge cases. So it does take a while to run, they say,


00:12:27.620 --> 00:12:32.460
so you can give it some hints and they talk about that within the documentation. But I


00:12:32.460 --> 00:12:35.780
really think this is something for me, when I look at tools, I'm like, "Well, what would


00:12:35.780 --> 00:12:41.380
I use it for?" And I think a lot of times we're busy and we don't get the coverage that


00:12:41.380 --> 00:12:45.620
really want to get because you know deadlines and you know we want to land this customer and


00:12:45.620 --> 00:12:49.860
and so we have to get we have to you know work really quick to get this one feature done and


00:12:49.860 --> 00:12:56.020
we don't we only get half coverage instead of getting you know uh 90 or plus so um so


00:12:56.020 --> 00:13:03.940
I think this tool could help maybe bridge that gap in those cases and maybe give you a jump a


00:13:03.940 --> 00:13:09.220
jump start to to getting the coverage that you're looking for on your projects uh so that's what I'm


00:13:09.220 --> 00:13:12.780
I'm looking at it for and I think it's a cool project.


00:13:12.780 --> 00:13:15.660
- It looks like one of those systems


00:13:15.660 --> 00:13:17.060
a little bit like hypothesis.


00:13:17.060 --> 00:13:19.020
Are you familiar with hypothesis?


00:13:19.020 --> 00:13:21.780
- Only by name, I haven't actually looked into it.


00:13:21.780 --> 00:13:23.500
- Where it kind of tries to determine,


00:13:23.500 --> 00:13:25.460
oh, what are some edge cases and some,


00:13:25.460 --> 00:13:26.780
like you give it bounds of data


00:13:26.780 --> 00:13:29.600
and it'll test different scenarios for you.


00:13:29.600 --> 00:13:30.820
It looks quite interesting.


00:13:30.820 --> 00:13:32.460
Brian, are you familiar with this?


00:13:32.460 --> 00:13:33.500
- I'm not.


00:13:33.500 --> 00:13:37.520
I'm actually often leery of test generators,


00:13:38.420 --> 00:13:41.380
But I don't know if people find it useful


00:13:41.380 --> 00:13:43.260
and maybe it's worth checking out.


00:13:43.260 --> 00:13:44.860
- Yeah. - Yeah.


00:13:44.860 --> 00:13:46.220
- Yeah, it looks neat.


00:13:46.220 --> 00:13:47.040
- Yeah, I'm the same.


00:13:47.040 --> 00:13:48.580
I would say I'm the same, Brian.


00:13:48.580 --> 00:13:51.380
I did, you know, I was a little bit leery, I guess,


00:13:51.380 --> 00:13:53.180
about the idea of it.


00:13:53.180 --> 00:13:56.900
For me, as I said, I think it's just really that gap that,


00:13:56.900 --> 00:13:58.380
you know, if you have a gap in coverage


00:13:58.380 --> 00:14:01.580
and you're really just trying to get a quick jumpstart


00:14:01.580 --> 00:14:05.300
on your coverage, this might be a good tool to start with.


00:14:05.300 --> 00:14:07.180
That's my thought.


00:14:07.180 --> 00:14:09.380
- Yeah, yeah, very cool.


00:14:09.380 --> 00:14:10.220
That's good.


00:14:10.220 --> 00:14:11.060
Although Brian, I don't know


00:14:11.060 --> 00:14:13.340
if you really wanna encourage it too much.


00:14:13.340 --> 00:14:14.580
You're getting out there.


00:14:14.580 --> 00:14:15.900
If I had known about Penguin earlier,


00:14:15.900 --> 00:14:18.460
I might not have bought Brian's testing book.


00:14:18.460 --> 00:14:20.260
- You didn't need to highlight that.


00:14:20.260 --> 00:14:22.500
(laughing)


00:14:22.500 --> 00:14:24.840
- Indeed, indeed.


00:14:24.840 --> 00:14:27.700
All right, you got the next one?


00:14:27.700 --> 00:14:32.020
- Well, I wanted to, I think we're at the sponsor bit.


00:14:32.020 --> 00:14:33.540
- I believe we are.


00:14:33.540 --> 00:14:35.980
- Yeah, so let's, yeah.


00:14:35.980 --> 00:14:38.980
So I don't have our sponsor up.


00:14:38.980 --> 00:14:40.780
I got you.


00:14:40.780 --> 00:14:41.840
There we go.


00:14:41.840 --> 00:14:45.380
This episode of Python Bytes is brought to you by Sentry.


00:14:45.380 --> 00:14:48.180
How would you like to remove a little stress from your life?


00:14:48.180 --> 00:14:52.940
Well, do you worry that users may be having difficulties


00:14:52.940 --> 00:14:54.540
or encountering errors in your app?


00:14:54.540 --> 00:14:58.580
Right now, would you even know until they sent you a support email?


00:14:58.580 --> 00:15:02.620
How much better would it be to have the error


00:15:02.620 --> 00:15:04.740
and performance details immediately sent to you,


00:15:04.820 --> 00:15:07.680
including the call stack and values of local variables


00:15:07.680 --> 00:15:10.620
in the active user recorded in the report.


00:15:10.620 --> 00:15:11.700
That'd be awesome.


00:15:11.700 --> 00:15:14.220
With Sentry, it's not only possible but simple.


00:15:14.220 --> 00:15:16.580
In fact, Michael uses Sentry on all of


00:15:16.580 --> 00:15:19.860
his web properties including Python bytes here.


00:15:19.860 --> 00:15:23.100
He actually fixed a bug triggered by a user and had


00:15:23.100 --> 00:15:27.180
the upgrade ready to roll out as he got the support email.


00:15:27.180 --> 00:15:28.860
That's also Sentry,


00:15:28.860 --> 00:15:30.260
but also because Michael's awesome.


00:15:30.260 --> 00:15:33.580
But anyway, surprise and delight your users today,


00:15:33.580 --> 00:15:37.220
create your Sentry account at pythonbytes.fm/sentry.


00:15:37.220 --> 00:15:40.920
And please, when signing up, click the "Got a promo code"


00:15:40.920 --> 00:15:45.860
and redeem and enter "pythonbytes," all one word.


00:15:45.860 --> 00:15:49.320
It's good for two free months of Sentry's team plan,


00:15:49.320 --> 00:15:52.980
which will give you up to 20 times as many monthly events,


00:15:52.980 --> 00:15:54.320
as well as other features.


00:15:54.320 --> 00:15:59.320
That's pythonbytes/sentry and promo code "pythonbytes."


00:16:01.520 --> 00:16:02.520
Yep, thanks, Sentry.


00:16:02.520 --> 00:16:06.480
All right, I guess I got the next one.


00:16:06.480 --> 00:16:10.000
This one is sent in by a friend of the show, Brian Skin.


00:16:10.000 --> 00:16:11.680
Thank you, Brian.


00:16:11.680 --> 00:16:15.320
And he let us know that there is something out there


00:16:15.320 --> 00:16:19.440
for all of us who love these external packages


00:16:19.440 --> 00:16:21.980
and all of these amazing Lego building blocks


00:16:21.980 --> 00:16:26.880
that are PyPI, and yet that's running other people's code


00:16:26.880 --> 00:16:29.780
with dependencies on them getting things right.


00:16:31.040 --> 00:16:36.240
And it's this is under the pipe. So this is sort of pretty neat


00:16:36.240 --> 00:16:40.080
in terms of, you know, being officially the Python packaging


00:16:40.080 --> 00:16:45.200
authority group, right? I believe. And so it's called the


00:16:45.200 --> 00:16:49.240
advisory dash DB. It's a security advisory database for


00:16:49.240 --> 00:16:55.160
Python packages published on pipey.org. And the idea is, if


00:16:55.160 --> 00:16:59.120
somebody finds some major problem with the package, or


00:16:59.120 --> 00:17:02.680
or maybe even worse, maybe it's like a type of squatting scenario,


00:17:02.680 --> 00:17:07.920
but more like, you know that part where they were supposed to check the input in that form,


00:17:07.920 --> 00:17:10.280
and then they did this direct SQL query?


00:17:10.280 --> 00:17:13.360
They didn't do that. Now they are. You really, really should change that


00:17:13.360 --> 00:17:17.080
so that they're using like parameterized queries now.


00:17:17.080 --> 00:17:22.880
And so there's a vulnerabilities directory that is just a bunch of YAML files.


00:17:24.280 --> 00:17:30.120
You come over here like, let's take one here that maybe is security conscious, Bleach.


00:17:30.120 --> 00:17:32.120
I love the name of this package.


00:17:32.120 --> 00:17:36.600
The idea is you take user input and you sanitize it by putting bleach on it, which is fantastic.


00:17:36.600 --> 00:17:39.400
But even the sanitizers can have problems, right?


00:17:39.400 --> 00:17:42.120
So we checked this out back apparently in 2020.


00:17:42.120 --> 00:17:47.000
There's a problem with bleach in PyPI.


00:17:47.000 --> 00:17:53.880
It said in Mozilla bleach before 3.12, a mutation XSS cross site scripted in bleach.clean


00:17:53.880 --> 00:18:00.260
when RC data and either the SVG or math tags are whitelisted


00:18:00.260 --> 00:18:02.260
and such and such is set like, oh my gosh,


00:18:02.260 --> 00:18:03.660
but here's all the version it affects,


00:18:03.660 --> 00:18:05.220
and here's the fixed version.


00:18:05.220 --> 00:18:07.440
And then there's some more info about like,


00:18:07.440 --> 00:18:08.900
where that was spoken about,


00:18:08.900 --> 00:18:11.900
like where the problem was discovered and so on.


00:18:11.900 --> 00:18:12.740
This is really cool.


00:18:12.740 --> 00:18:14.240
So if you depend on these packages,


00:18:14.240 --> 00:18:15.440
and we already spoke at the beginning


00:18:15.440 --> 00:18:18.900
about how having a tracking your dependencies,


00:18:18.900 --> 00:18:20.800
not just the things you directly install,


00:18:20.800 --> 00:18:22.580
lets you be more aware of this, right?


00:18:22.580 --> 00:18:25.920
that you could look at that pip-tools generated


00:18:25.920 --> 00:18:28.700
requirements.txt file and see this problem.


00:18:28.700 --> 00:18:31.480
And then very likely GitHub through dependent bot


00:18:31.480 --> 00:18:33.560
would even be proposing a fix.


00:18:33.560 --> 00:18:34.720
What do you guys think?


00:18:34.720 --> 00:18:37.000
- Yeah, that's great.


00:18:37.000 --> 00:18:38.160
- I think this is cool.


00:18:38.160 --> 00:18:40.800
So how do you use it?


00:18:40.800 --> 00:18:43.560
Do you just look stuff up or?


00:18:43.560 --> 00:18:44.560
- You let it help you.


00:18:44.560 --> 00:18:47.400
I mean, you can come over here and obviously look it up.


00:18:47.400 --> 00:18:49.060
It depends on what's going on.


00:18:49.060 --> 00:18:51.200
I think more if you're maintaining a package,


00:18:51.200 --> 00:18:55.000
you can do a PR to let people know.


00:18:55.000 --> 00:18:59.680
There's a triage service, which goes through the NIST.


00:18:59.680 --> 00:19:01.920
It pulls a lot of data from the NIST,


00:19:01.920 --> 00:19:02.960
what the heck is this called?


00:19:02.960 --> 00:19:06.440
The National Vulnerability Database Data Feed.


00:19:06.440 --> 00:19:07.320
Say that again.


00:19:07.320 --> 00:19:09.000
So like if it gets submitted there,


00:19:09.000 --> 00:19:11.720
it gets a lot of the data gets pulled back in.


00:19:11.720 --> 00:19:14.900
They have a tool to perform some heuristics


00:19:14.900 --> 00:19:16.160
to match that back up.


00:19:16.160 --> 00:19:18.000
And then you can do, most importantly,


00:19:18.000 --> 00:19:20.200
is there's an API that you can use.


00:19:20.200 --> 00:19:24.500
So these vulnerabilities when submitted to this GitHub repository


00:19:24.500 --> 00:19:30.040
are then submitted outwardly to this place called the open source vulnerability


00:19:30.040 --> 00:19:32.040
or the database for open source vulnerabilities.


00:19:32.040 --> 00:19:37.880
And then this has an API that people can call to learn about these problems.


00:19:37.880 --> 00:19:40.560
So if you ran, I don't know, if you were an API company,


00:19:40.560 --> 00:19:44.420
you wanted to make sure your API wasn't getting hacked by having a bad dependency,


00:19:44.420 --> 00:19:48.600
maybe you make this part of your CI/CD or something, Mike.


00:19:48.600 --> 00:19:54.920
Yeah, absolutely. I have to tell our DevOps, our DevOps guru, Mitch, to look into this.


00:19:54.920 --> 00:20:03.240
Exactly. So I mean, for the most part, having stuff pinned in GitHub will trigger an immediate


00:20:03.240 --> 00:20:08.440
security notification to you when GitHub finds out about it when that makes it out. But if you


00:20:08.440 --> 00:20:12.040
want to be a little more proactive, or you're a security researcher or something like that,


00:20:12.040 --> 00:20:17.880
this looks like a good one. So in the longer term, we're looking, we're working with a


00:20:17.880 --> 00:20:23.240
PyPI team to build a pipeline to automatically get these vulnerabilities into PyPI. So maybe


00:20:23.240 --> 00:20:28.040
like you could see it or something like that. I'm not exactly sure what the story is there, but


00:20:28.040 --> 00:20:34.440
it's a start for basically storing that data and sharing that data and then hopefully like it


00:20:34.440 --> 00:20:40.920
it makes its way over to PyPI and such. Sam Morley, welcome. Glad you made the live show, man.


00:20:40.920 --> 00:20:47.560
Said, is there a tool that can run like a pre-commit hook? I feel like maybe with just a tiny bit of


00:20:47.560 --> 00:20:51.560
Wrapper, you could call that api over at the open source vulnerabilities project


00:20:51.560 --> 00:20:54.360
And get some information back


00:20:54.360 --> 00:20:58.280
Yeah, that'd be cool. Yeah, that would be a cool thing. Like don't check that in it's got a problem


00:20:58.280 --> 00:21:02.040
Don't don't push it. Yeah, exactly


00:21:02.040 --> 00:21:07.640
Exactly. So anyway, I think this is a pretty cool one. Thanks brian skin for sending it in


00:21:07.640 --> 00:21:11.960
Yeah, so, I don't know


00:21:13.160 --> 00:21:16.600
Sorry, but I was gonna say, yeah, you're a C++ developer, right?


00:21:16.600 --> 00:21:20.600
And C++ is all about overriding functions by type.


00:21:20.600 --> 00:21:22.100
Like, oh, it takes an int, it takes a float.


00:21:22.100 --> 00:21:23.900
This one takes a string, and it's totally different.


00:21:23.900 --> 00:21:25.160
Python doesn't have that.


00:21:25.160 --> 00:21:28.700
Yeah, what's funny is I don't actually use it that much in C++.


00:21:28.700 --> 00:21:30.940
I mean, you learn about it a lot,


00:21:30.940 --> 00:21:34.700
but I don't, I mean, I normally don't write a whole bunch of functions


00:21:34.700 --> 00:21:37.700
that have the same name but take different parameters.


00:21:37.700 --> 00:21:41.560
But you can do, yes, you can do that, definitely do it in C++ and C.


00:21:41.640 --> 00:21:44.960
And there's probably other languages you can do that in,


00:21:44.960 --> 00:21:47.320
but those are the two main languages that I work with.


00:21:47.320 --> 00:21:48.960
C#, for example, does it.


00:21:48.960 --> 00:21:49.760
Okay.


00:21:49.760 --> 00:21:50.760
That's well.


00:21:50.760 --> 00:21:52.760
The Python, you cannot.


00:21:52.760 --> 00:21:56.760
So Python, if you try to do that,


00:21:56.760 --> 00:21:59.960
the second one wins and you just have another name that


00:21:59.960 --> 00:22:01.360
is attached to the function.


00:22:01.360 --> 00:22:04.720
So I was, and I never really thought that


00:22:04.720 --> 00:22:07.040
I had a problem with this, but there are definitely times


00:22:07.040 --> 00:22:09.040
where it would be simpler to not try to


00:22:09.040 --> 00:22:11.040
put a switch in place or something.


00:22:11.040 --> 00:22:18.880
and just have several functions that dealt with related things, but in different functions.


00:22:18.880 --> 00:22:24.880
So there's an article called "The Correct Way to Overload Functions in Python."


00:22:24.880 --> 00:22:31.880
And maybe it is, but I'm not somebody that likes to use the phrase "the correct way"


00:22:31.880 --> 00:22:33.880
because somebody will tell me I'm wrong.


00:22:33.880 --> 00:22:35.880
But anyway, it's an interesting article.


00:22:35.880 --> 00:22:38.880
You might, for example, hear like, "You shouldn't overload functions in Python.


00:22:38.880 --> 00:22:41.020
You're doing it wrong if you do it at all, for example, right?


00:22:41.020 --> 00:22:42.320
Yeah, exactly.


00:22:42.320 --> 00:22:44.720
Although this is a cool solution. I totally like it.


00:22:44.720 --> 00:22:46.320
Definitely, it's a cool solution.


00:22:46.320 --> 00:22:51.520
So there's this, there's apparently a built-in way with FuncTools.


00:22:51.520 --> 00:22:58.520
So there's a, FuncTools has a decorator called single dispatch.


00:22:58.520 --> 00:23:05.720
And what it does is you can decorate a, basically a function signature with a single function.


00:23:05.720 --> 00:23:09.060
you say, "I'm going to single dispatch this function."


00:23:09.060 --> 00:23:12.660
And then you register all, you do the name of the function,


00:23:12.660 --> 00:23:18.660
dot register as decorators around other functions.


00:23:18.660 --> 00:23:23.420
And the example shown in the article just uses underscore.


00:23:23.420 --> 00:23:26.120
I'm guessing that's just because you don't care what the name is.


00:23:26.120 --> 00:23:28.720
I don't know. But that seems like a good way to do it.


00:23:28.720 --> 00:23:33.460
And then you've got, then after that, you just have, that works.


00:23:33.520 --> 00:23:35.760
It works like you've done function overloading.


00:23:35.760 --> 00:23:37.360
It's awesome.


00:23:37.360 --> 00:23:39.360
So in the example it takes,


00:23:39.360 --> 00:23:42.680
you can call this format function with a string,


00:23:42.680 --> 00:23:45.920
with a date, with a date time and a time,


00:23:45.920 --> 00:23:47.520
and you actually get,


00:23:47.520 --> 00:23:49.520
there's like three different functions that get called.


00:23:49.520 --> 00:23:51.360
One for a string, one for a date,


00:23:51.360 --> 00:23:53.600
one that just falls back or something, right?


00:23:53.600 --> 00:23:57.320
Yeah. I mean, it's a pretty simple example,


00:23:57.320 --> 00:23:59.800
and it's pretty clean code.


00:23:59.800 --> 00:24:02.560
So I would definitely try to keep


00:24:02.560 --> 00:24:06.480
all these things together in one module.


00:24:06.480 --> 00:24:08.920
>> You would be mean to put them in different places.


00:24:08.920 --> 00:24:10.240
That would be so wrong.


00:24:10.240 --> 00:24:13.640
>> Or even spread out in the same function would be terrible.


00:24:13.640 --> 00:24:18.120
But keeping them together, this is great.


00:24:18.120 --> 00:24:22.240
One of the things that the article mentions is that,


00:24:22.240 --> 00:24:30.720
it's called single dispatch because it's based on the type of the first parameter.


00:24:30.720 --> 00:24:33.880
If you want to do multi-parameter ones,


00:24:33.880 --> 00:24:39.240
there's a third-party plugin called multiple dispatch.


00:24:39.240 --> 00:24:40.120
>> Wow.


00:24:40.120 --> 00:24:42.000
>> You can just pip install.


00:24:42.000 --> 00:24:44.520
Then it works the same, although.


00:24:44.520 --> 00:24:46.320
>> I like this one better, honestly.


00:24:46.320 --> 00:24:48.440
>> The syntax is a little different.


00:24:48.440 --> 00:24:52.200
It probably does single dispatch too, I'm guessing.


00:24:52.200 --> 00:24:54.680
>> Yeah, it's just one parameter.


00:24:54.680 --> 00:24:58.880
>> This one, similar thing.


00:24:58.880 --> 00:25:01.640
It just kind of works on multiple parameters.


00:25:01.640 --> 00:25:05.120
I'm digging the multiple dispatch style where you just say dispatch.


00:25:05.120 --> 00:25:07.120
This is arguments are list stir.


00:25:07.120 --> 00:25:11.720
You know, we're going to maybe get to where Mike is going at the end of the show,


00:25:11.720 --> 00:25:16.920
but it would be even cooler if you could just say at dispatch and then put a type


00:25:16.920 --> 00:25:20.180
like a colon list B colon stir.


00:25:20.180 --> 00:25:24.920
So I want to dispatch on types and stuff like that and have the dispatch


00:25:25.580 --> 00:25:28.500
decorator, look at the function that's passed in and look at the


00:25:28.500 --> 00:25:32.300
type parameters and then just do that. So you don't have to say


00:25:32.300 --> 00:25:37.260
the types more than once. Anyway, I know we'll come back


00:25:37.260 --> 00:25:37.940
to that as well.


00:25:37.940 --> 00:25:42.620
Yeah, so so I, you know, I'm in a past life, I was I was a Java


00:25:42.620 --> 00:25:48.260
engineer. So we, you know, but we call it dynamic dispatch in


00:25:48.260 --> 00:25:51.060
Java. And it's, it's actually there's a lot of patterns,


00:25:51.060 --> 00:25:54.700
object oriented patterns that that kind of are derived from


00:25:54.700 --> 00:25:58.280
that from that feature from the you know, from again, from the


00:25:58.280 --> 00:26:04.680
C++. Well, from the old days. And yeah, no, I, to me, this


00:26:04.680 --> 00:26:07.580
actually, you know, when I saw it, I was like, Okay, I could


00:26:07.580 --> 00:26:11.240
definitely use this for a lot of a lot of cases. I know that like


00:26:11.240 --> 00:26:14.160
when you want might want to build, when you have like a


00:26:14.160 --> 00:26:16.540
piece of code that has to work with a variety of different


00:26:16.540 --> 00:26:20.240
types, but they're very similar types, maybe. And you want to do


00:26:20.240 --> 00:26:23.920
something with with that family of types. You know, I think that


00:26:23.940 --> 00:26:28.260
that would be something I would think to look at,


00:26:28.260 --> 00:26:30.260
to solve with something like this.


00:26:30.260 --> 00:26:31.500
Yeah.


00:26:31.500 --> 00:26:32.940
I kind of had the same thought,


00:26:32.940 --> 00:26:35.340
and I do not think I would make this


00:26:35.340 --> 00:26:38.500
any sort of normal workflow use case for my code.


00:26:38.500 --> 00:26:41.020
But there are times where you have some code that says,


00:26:41.020 --> 00:26:46.020
if argument is the type of this is a list, do this thing.


00:26:46.020 --> 00:26:48.300
If it's not a list, then make an empty list,


00:26:48.300 --> 00:26:49.820
put it in and then do this other thing.


00:26:49.820 --> 00:26:52.980
You know, like if you're doing that type switching already,


00:26:52.980 --> 00:26:56.020
like this dispatch thing might actually make it more clear.


00:26:56.020 --> 00:26:58.020
Right? It's not common to do it in Python,


00:26:58.020 --> 00:27:01.020
but there are times like I kind of want to be able to take a string or a date time


00:27:01.020 --> 00:27:04.020
and then just parse the string of it, you know, those kinds of things.


00:27:04.020 --> 00:27:08.020
So as an API company, this is actually kind of interesting,


00:27:08.020 --> 00:27:10.020
it fits into what we do as an API company.


00:27:10.020 --> 00:27:13.020
We have to, a lot of times, you know, we're not very,


00:27:13.020 --> 00:27:15.020
we're not overly strict on our input types.


00:27:15.020 --> 00:27:19.020
We allow like truthy and falsy kind of types to come in for like Booleans.


00:27:19.020 --> 00:27:23.180
And I could see us using this for that, right?


00:27:23.180 --> 00:27:25.860
So that way, instead of using all the helper code


00:27:25.860 --> 00:27:28.300
we've already written for that, have it more along lines of,


00:27:28.300 --> 00:27:30.540
okay, if it's this type of input,


00:27:30.540 --> 00:27:32.260
you know, then you can convert it this way.


00:27:32.260 --> 00:27:34.420
If it's this type of input, you can convert it that way.


00:27:34.420 --> 00:27:36.740
And I think we could probably write some code


00:27:36.740 --> 00:27:40.540
to handle our inputs differently using this pattern.


00:27:40.540 --> 00:27:43.140
- Yeah, yeah, very neat insight there.


00:27:43.140 --> 00:27:44.980
Brian, you blew up our chat with this.


00:27:47.460 --> 00:27:49.060
- Well, you wanna pull out some highlights?


00:27:49.060 --> 00:27:49.900
- Yeah, all right.


00:27:49.900 --> 00:27:51.720
So John Cian says, "Function overloading


00:27:51.720 --> 00:27:53.600
"was one of those things like switch statements


00:27:53.600 --> 00:27:55.280
"that I missed when I first started Python,


00:27:55.280 --> 00:27:57.260
"but then I found I rarely needed it."


00:27:57.260 --> 00:27:59.580
Yeah, I'm kind of with you on that.


00:27:59.580 --> 00:28:01.400
Like I said, there's a few cases for me


00:28:01.400 --> 00:28:03.420
that I'm like, where I'm doing a type check


00:28:03.420 --> 00:28:06.020
or is instance of, that I think is the one time.


00:28:06.020 --> 00:28:09.260
But that's, you know, a couple times in a whole program.


00:28:09.260 --> 00:28:10.380
What do you think, Bray?


00:28:10.380 --> 00:28:14.620
- Yeah, I definitely missed it at first,


00:28:14.620 --> 00:28:16.580
and now I just don't even really notice it.


00:28:16.580 --> 00:28:19.220
- Yeah. (laughs)


00:28:19.220 --> 00:28:21.340
Then you've got, you're gonna get it says,


00:28:21.340 --> 00:28:26.020
Luciano Romano, Romano also explains this in Fluent Python.


00:28:26.020 --> 00:28:28.780
I just read the pre-version of the second edition.


00:28:28.780 --> 00:28:31.180
Getting some polish, yeah, very nice.


00:28:31.180 --> 00:28:33.900
That's a really good book, Fluent Python as well.


00:28:33.900 --> 00:28:34.740
- Yeah.


00:28:34.740 --> 00:28:36.520
- Came out there says,


00:28:36.520 --> 00:28:38.060
"That's the kind of thing I was thinking of."


00:28:38.060 --> 00:28:40.820
Yeah, oh, sorry, that's a different comment.


00:28:40.820 --> 00:28:42.060
We'll come back to that in a minute.


00:28:42.060 --> 00:28:44.560
And then, Sam Morley,


00:28:44.560 --> 00:28:47.240
I don't tend to find this kind of dispatching that useful.


00:28:47.240 --> 00:28:48.600
I generally just write a master function


00:28:48.600 --> 00:28:51.200
that takes star args, star kdivy args,


00:28:51.200 --> 00:28:53.100
and dispatch to other functions, yeah.


00:28:53.100 --> 00:28:56.880
Yep, but if you're switching on this instance,


00:28:56.880 --> 00:28:58.620
it could be a time.


00:28:58.620 --> 00:29:03.120
And then stepping back one quick topic,


00:29:03.120 --> 00:29:05.640
Kim VanWijk says, "Would be handy if some pip tooling


00:29:05.640 --> 00:29:07.760
"could automatically check the PyPA advisory


00:29:07.760 --> 00:29:10.080
"before downloading a package."


00:29:10.080 --> 00:29:11.720
Oh, that would be slick, yeah.


00:29:11.720 --> 00:29:16.280
I just did a typo squatting and PyPI security episode over on Talk Python and


00:29:16.280 --> 00:29:21.800
we had a lot of interesting ideas like almost like a have I been pwned like remember what I


00:29:21.800 --> 00:29:24.760
installed and if you ever see I installed something out of vulnerability quick shoot


00:29:24.760 --> 00:29:29.000
me a note let me know hey a few weeks ago you installed this thing you might want to get rid


00:29:29.000 --> 00:29:32.920
of it now stuff like that I think this is another interesting thing along those lines


00:29:32.920 --> 00:29:38.120
all right like kind of cache that data and then just say you know I know you want to install it


00:29:38.120 --> 00:29:41.720
And maybe this is what they're talking about with integrating that into pypi.org itself.


00:29:41.720 --> 00:29:49.160
Who knows? Very cool. All right, Mike, you got the last one.


00:29:49.160 --> 00:29:57.160
Some SQL. Yeah. So, AIO SQL is a, as it says, simple SQL in Python. It's a SQL templating


00:29:57.160 --> 00:30:05.320
framework or library that really you, what you do is you give it some SQL files with some,


00:30:05.320 --> 00:30:08.440
and has some conventions around how you define queries.


00:30:08.440 --> 00:30:11.240
And then it essentially gives you a query mapping


00:30:11.240 --> 00:30:13.040
that you can then use in your code.


00:30:13.040 --> 00:30:15.120
And this is kind of a, it's a minimalistic way


00:30:15.120 --> 00:30:17.900
of accessing your database.


00:30:17.900 --> 00:30:21.000
It is, you know, with the A in front of it,


00:30:21.000 --> 00:30:23.900
it's natively asynchronous.


00:30:23.900 --> 00:30:27.020
It works really well with async-pg.


00:30:27.020 --> 00:30:29.540
I know that we use Postgres.


00:30:29.540 --> 00:30:33.980
So that was a good, that was a highlight for us


00:30:33.980 --> 00:30:36.060
to look at it.


00:30:36.060 --> 00:30:40.380
And I think we all have worked with ORMs.


00:30:40.380 --> 00:30:43.740
I've come back and forth on ORMs over the years.


00:30:43.740 --> 00:30:47.660
I think this is a nice fit for when you have,


00:30:47.660 --> 00:30:50.500
when you don't have to do a lot of,


00:30:50.500 --> 00:30:53.380
touch a lot of different tables or do a lot of joins,


00:30:53.380 --> 00:30:54.780
maybe you have a small microservice


00:30:54.780 --> 00:30:59.780
that just needs to do a couple reads and writes updates.


00:30:59.780 --> 00:31:03.340
And also I think this really helps


00:31:03.340 --> 00:31:07.060
because ORMs, especially when you're dealing at scale,


00:31:07.060 --> 00:31:09.780
you have to really know the ORM at a very deep level


00:31:09.780 --> 00:31:11.240
to understand what it's doing.


00:31:11.240 --> 00:31:13.180
And this kind of exposes all of,


00:31:13.180 --> 00:31:15.220
it really just brings you down to the SQL level.


00:31:15.220 --> 00:31:16.780
So now you know exactly what you're doing


00:31:16.780 --> 00:31:19.280
and you can be a little bit more direct


00:31:19.280 --> 00:31:22.340
on what you wanna do with your data.


00:31:22.340 --> 00:31:23.180
- Yeah, sometimes you're like,


00:31:23.180 --> 00:31:27.300
well, I want to do the join and then the filter,


00:31:27.300 --> 00:31:28.660
not the filter, then the adding it.


00:31:28.660 --> 00:31:30.580
Like if you're really good at SQL,


00:31:30.580 --> 00:31:33.060
you can put these little tricks and like,


00:31:33.060 --> 00:31:36.980
it actually likes it better if we do it this way rather than that way and the ORM is probably not


00:31:36.980 --> 00:31:41.540
going to let you do that. So let me just describe this to people out there because it's breaking


00:31:41.540 --> 00:31:48.980
some paradigms for me. So this is a library that allows you to write queries against a database,


00:31:48.980 --> 00:31:56.660
but you do it almost with data access layer style of things. So you don't do a


00:31:57.380 --> 00:31:59.500
quote select star from such and such,


00:31:59.500 --> 00:32:03.700
you would say like query dot get all greetings


00:32:03.700 --> 00:32:05.300
or get user by username,


00:32:05.300 --> 00:32:07.660
and you pass a like username equals such and such


00:32:07.660 --> 00:32:11.620
in an asynchronous way, which is pretty interesting.


00:32:11.620 --> 00:32:13.660
But the way that that has meaning


00:32:13.660 --> 00:32:15.980
is you create a dot SQL file


00:32:15.980 --> 00:32:18.060
that has like a doc string like thing,


00:32:18.060 --> 00:32:19.620
and you write a bunch of SQL,


00:32:19.620 --> 00:32:22.460
almost like stored procedures, but just in a text file,


00:32:22.460 --> 00:32:23.540
this thing parses it,


00:32:23.540 --> 00:32:27.900
and then it becomes like a smart query data access layer.


00:32:27.900 --> 00:32:28.740
- Correct, yeah.


00:32:28.740 --> 00:32:31.820
So it basically builds out other data access layer


00:32:31.820 --> 00:32:33.420
or data access object kind of for you


00:32:33.420 --> 00:32:38.420
where you can basically map in these queries.


00:32:38.420 --> 00:32:40.380
It's not just queries, you can do mutations


00:32:40.380 --> 00:32:42.660
and you can do DTL and all of that.


00:32:42.660 --> 00:32:44.700
So yeah, it gives you--


00:32:44.700 --> 00:32:47.980
- Like create, whatever, it could be a function call, yeah.


00:32:47.980 --> 00:32:48.900
- Absolutely, so--


00:32:48.900 --> 00:32:49.740
- Brian, what do you think?


00:32:49.740 --> 00:32:52.040
Do you touch SQL much these days?


00:32:52.040 --> 00:32:56.020
I'm touching it more and more and I love this actually.


00:32:56.020 --> 00:32:59.020
'Cause I always assume if there's a bug,


00:32:59.020 --> 00:33:00.760
it's probably in my SQL statement.


00:33:00.760 --> 00:33:03.140
But this looks pretty cool.


00:33:03.140 --> 00:33:06.220
So get your selects and stuff figured out


00:33:06.220 --> 00:33:09.100
what kind of queries you wanna do ahead of time


00:33:09.100 --> 00:33:11.420
and then use them in your code.


00:33:11.420 --> 00:33:12.400
This is cool.


00:33:12.400 --> 00:33:17.100
- Yeah, I mean, I'm very repelled


00:33:17.100 --> 00:33:20.980
by writing raw SQL statements in my code.


00:33:20.980 --> 00:33:23.300
- Very much like Kim Van Wijk, others like that.


00:33:23.300 --> 00:33:25.060
This looks exactly what I like,


00:33:25.060 --> 00:33:28.140
like not writing SQL, but not using ORM.


00:33:28.140 --> 00:33:29.900
So it's no secret to the world out there


00:33:29.900 --> 00:33:31.260
that I'm a MongoDB fan.


00:33:31.260 --> 00:33:34.460
So I don't have like direct use for this a lot,


00:33:34.460 --> 00:33:36.180
but I do find this super valuable,


00:33:36.180 --> 00:33:39.900
especially if people on the team are really good at SQL,


00:33:39.900 --> 00:33:42.620
and they're like, "Oh, this library is inhibiting me


00:33:42.620 --> 00:33:45.500
from like using my superpower on the database."


00:33:45.500 --> 00:33:46.540
Right, Mike? - Exactly.


00:33:46.540 --> 00:33:47.380
Yeah, that's exactly.


00:33:47.380 --> 00:33:48.820
And I was just about to say that, you know,


00:33:48.820 --> 00:34:13.420
if you have a DBA or you have someone who is, you know, basically they are focused or concentrated on the database and optimizing those queries, you know, I think what this allows you to do, then you can go define your queries, you can write them yourself how they are, as developer, and then maybe you can take that to your to the expert and have him refine them for you. Without actually changing the abstraction, right? Like, without Yeah, you still get that. Yeah.


00:34:14.020 --> 00:34:19.100
Yeah, there's also times where, like, let's say I've got an internal tool that I want to put together and it needs a database.


00:34:19.100 --> 00:34:24.860
And it's really not that big of a deal to tell, like, your IT department and your supervisor and stuff,


00:34:24.860 --> 00:34:30.900
you're going to throw up a MySQL database or something and interact with it or Postgres.


00:34:30.900 --> 00:34:37.900
But to say, hey, I'm going to throw Mongo in there, that might bring up just a discussion that you're just not ready to have.


00:34:37.900 --> 00:34:40.300
So...


00:34:40.300 --> 00:35:07.540
Yeah, for sure. Let me suggest a pairing, you know, kind of like as you pair wines, a pairing with this library. I think pydantic might go fantastic with this, right? So you get these results back as tuples. And then you could just, you know, star args that into your pydantic models, and you get your validation and all sorts of like stuff. And then you get a list of pydantic, like your one list comprehension away from something beautiful here.


00:35:07.620 --> 00:35:31.740
Yeah, this is that's exactly what we're doing. You know, we're using, you know, I think right now we're building out a new stack. And it's basically it's it's it's FastAPI, gigantic, you know, AIO SQL. Oh, interesting. And you're finding it works well. Oh, it's Yeah, it's very performant. So it's, you know, because it's asynchronous, right? We're using asyncpg all the way down to the database, too. So it's pretty much asynchronous from end to end.


00:35:32.780 --> 00:35:34.100
- Fantastic.


00:35:34.100 --> 00:35:35.620
This is a really good recommendation.


00:35:35.620 --> 00:35:36.940
Yeah. You like it too, right Brian?


00:35:36.940 --> 00:35:37.780
It's pretty sweet.


00:35:37.780 --> 00:35:39.020
- Yeah, this is great.


00:35:39.020 --> 00:35:41.060
- Yeah, I do.


00:35:41.060 --> 00:35:43.140
I really like the separation of concerns


00:35:43.140 --> 00:35:46.000
of the SQL statements and the Python code,


00:35:46.000 --> 00:35:49.420
but the flexibility of having both, it's pretty cool.


00:35:49.420 --> 00:35:50.260
- Awesome.


00:35:50.260 --> 00:35:55.220
- Brian, is that it for us?


00:35:55.220 --> 00:35:56.060
- Yeah.


00:35:56.060 --> 00:35:59.780
- Are there any other topics they want to bring up?


00:35:59.780 --> 00:36:01.500
- Oh, you know I do.


00:36:01.500 --> 00:36:02.980
It's kind of crazy.


00:36:02.980 --> 00:36:05.100
So it's not quite an extra, extra, extra, extra


00:36:05.100 --> 00:36:05.940
here all about it.


00:36:05.940 --> 00:36:09.380
But a couple of things sent in from some listeners.


00:36:09.380 --> 00:36:12.120
So let me make sure I credit these.


00:36:12.120 --> 00:36:17.120
So Daniel Mulkey sent this one in and said,


00:36:17.120 --> 00:36:20.980
there is now, has been for a little while


00:36:20.980 --> 00:36:22.380
from Science Direct.


00:36:22.380 --> 00:36:26.580
There's a journal for academics called Software X


00:36:26.580 --> 00:36:28.560
and this library is pretty cool.


00:36:28.560 --> 00:36:31.920
So it aims to acknowledge the impact of software


00:36:31.920 --> 00:36:32.920
in today's research.


00:36:32.920 --> 00:36:36.720
So if you're in academics, one of the big challenges


00:36:36.720 --> 00:36:38.880
is that whole publish or perish sort of thing.


00:36:38.880 --> 00:36:41.040
And it would be great to take this cool library


00:36:41.040 --> 00:36:44.040
and make it a thing that's out on PyPI


00:36:44.040 --> 00:36:45.660
or Conda that people can use.


00:36:45.660 --> 00:36:48.440
Oh, but that's gonna take a week and a half


00:36:48.440 --> 00:36:52.120
and you really only get credit for your citations


00:36:52.120 --> 00:36:54.520
in articles, not in code, right?


00:36:54.520 --> 00:36:56.920
So this kind of addresses that to try to give people


00:36:56.920 --> 00:37:00.960
place to publish their projects in a meaningful way.


00:37:00.960 --> 00:37:04.320
And I just want to point out that there's a special issue


00:37:04.320 --> 00:37:07.480
on the software that contributed to the LIGO experiment,


00:37:07.480 --> 00:37:10.280
the gravitational wave discovery, which pretty sure


00:37:10.280 --> 00:37:11.200
got the Nobel Prize.


00:37:11.200 --> 00:37:13.160
I don't totally remember.


00:37:13.160 --> 00:37:15.320
But if you just start poking around here,


00:37:15.320 --> 00:37:20.720
you might find the word Python periodically in this thing


00:37:20.720 --> 00:37:21.200
here.


00:37:21.200 --> 00:37:24.960
So over in this one, we got some Python.


00:37:24.960 --> 00:37:26.720
I'm just randomly clicking articles,


00:37:26.720 --> 00:37:28.280
and they're all coming up Python.


00:37:28.280 --> 00:37:29.800
So I think that that's pretty sweet.


00:37:29.800 --> 00:37:31.980
If people are in science


00:37:31.980 --> 00:37:34.180
and they do this computational side of thing,


00:37:34.180 --> 00:37:35.020
check this out.


00:37:35.020 --> 00:37:38.200
- Very cool.


00:37:38.200 --> 00:37:39.320
- Yeah, that's number one.


00:37:39.320 --> 00:37:43.560
Number two, PyCon has been finished for a little while


00:37:43.560 --> 00:37:46.000
and we were able to go through some like


00:37:46.000 --> 00:37:48.120
medium platform type thing


00:37:48.120 --> 00:37:50.040
where we could watch the replays,


00:37:50.040 --> 00:37:52.560
but it's a little bit wonky


00:37:52.560 --> 00:37:53.920
in the way that the playback work.


00:37:53.920 --> 00:37:55.540
Like I had to do some weird stuff


00:37:55.540 --> 00:37:58.040
to actually get logged back in after a while.


00:37:58.040 --> 00:38:00.020
Anyway, it was fine for live stuff,


00:38:00.020 --> 00:38:01.480
but it was weird for playback.


00:38:01.480 --> 00:38:03.120
YouTube is pretty awesome for playback.


00:38:03.120 --> 00:38:05.880
And here's the, I put in the show notes,


00:38:05.880 --> 00:38:10.880
the playlist for all of PyCon 2021 US.


00:38:10.880 --> 00:38:13.340
So that's pretty cool.


00:38:13.340 --> 00:38:14.360
I don't know how many videos are in here.


00:38:14.360 --> 00:38:15.580
It looks like 86 videos.


00:38:15.580 --> 00:38:18.000
So if you wanna catch up on the PyCon talks,


00:38:18.000 --> 00:38:19.300
there's a really good way.


00:38:19.300 --> 00:38:25.360
- Nice, it looks like Juergen had a lightning talk there.


00:38:25.360 --> 00:38:27.840
- Oh yeah. - It's cool.


00:38:27.840 --> 00:38:29.040
- Yeah, very cool.


00:38:29.040 --> 00:38:30.040
Well done.


00:38:30.040 --> 00:38:35.040
And also wanna make sure I get the credit


00:38:35.040 --> 00:38:36.360
for this one right.


00:38:36.360 --> 00:38:40.200
Madison Swain Bowden, who we both met, I believe,


00:38:40.200 --> 00:38:42.840
at PyCascades, shared this with us,


00:38:42.840 --> 00:38:47.840
that AICS ImageIO, which is used all over


00:38:47.840 --> 00:38:54.500
biological imaging and microscopy and that kind of stuff


00:38:54.500 --> 00:38:56.100
from the Allen Institute,


00:38:56.100 --> 00:38:57.940
Allen Brain Institute, I'm guessing,


00:38:57.940 --> 00:38:59.900
is, was just released.


00:38:59.900 --> 00:39:02.220
So if you're doing anything with like graphics


00:39:02.220 --> 00:39:04.940
and pictures and file formats and stuff for that,


00:39:04.940 --> 00:39:05.780
check that out.


00:39:05.780 --> 00:39:09.260
And yeah, that's it for me.


00:39:09.260 --> 00:39:11.740
I think Mike, you got one as well, right, at least?


00:39:11.740 --> 00:39:15.020
- Yeah, so yeah,


00:39:15.020 --> 00:39:19.340
so it's PEP 563 was,


00:39:19.340 --> 00:39:20.220
I think it's proposed,


00:39:20.220 --> 00:39:22.900
postponed evaluation of annotations


00:39:22.900 --> 00:39:26.540
And basically there was some,


00:39:26.540 --> 00:39:28.120
as I think I mentioned before,


00:39:28.120 --> 00:39:32.260
I'm a big fan of FastAPI and Pydantic.


00:39:32.260 --> 00:39:36.260
And there was some worry a couple of months ago


00:39:36.260 --> 00:39:40.380
that this change would effectively break these projects


00:39:40.380 --> 00:39:42.620
in 3.10 if it was introduced.


00:39:42.620 --> 00:39:44.180
And so I just wanted to give a shout out


00:39:44.180 --> 00:39:45.940
to the community for jumping on this


00:39:45.940 --> 00:39:49.740
and just being really open-minded about this


00:39:49.740 --> 00:39:53.060
and basically postponing this a little further


00:39:53.060 --> 00:39:55.300
so that better decisions can be made


00:39:55.300 --> 00:39:58.860
on how to navigate this change.


00:39:58.860 --> 00:40:01.180
So I don't wanna go too deep into it,


00:40:01.180 --> 00:40:03.540
but I read some of the threads on this


00:40:03.540 --> 00:40:05.140
and it was just really positive,


00:40:05.140 --> 00:40:09.300
really positive exchange within the community.


00:40:09.300 --> 00:40:11.020
And I think it turned out really well.


00:40:11.020 --> 00:40:12.660
There was like a unanimous decision, I believe,


00:40:12.660 --> 00:40:15.260
to postpone it and it saved these projects


00:40:15.260 --> 00:40:18.020
from having to, well, basically--


00:40:18.020 --> 00:40:20.340
- At a minimum scramble, right?


00:40:20.340 --> 00:40:22.240
Worst case, not work.


00:40:22.240 --> 00:40:24.840
Yeah, let me see if I can give the elevator pitch.


00:40:24.840 --> 00:40:28.960
There was a proposal in Python 3.10, I guess 5.3.8,


00:40:28.960 --> 00:40:31.580
I know, sorry, 5.6.3.


00:40:31.580 --> 00:40:33.380
Don't know where that came from.


00:40:33.380 --> 00:40:35.560
5.6.3, PEP 5.6.3, where


00:40:35.560 --> 00:40:40.420
there's an attempt to simplify and speed up


00:40:40.420 --> 00:40:43.180
type annotations.


00:40:43.180 --> 00:40:44.540
And by, 'cause right now,


00:40:44.540 --> 00:40:45.820
if you wanna do a type annotation,


00:40:45.820 --> 00:40:47.620
if I'm gonna say I've created a Pydanic model,


00:40:47.620 --> 00:40:51.540
called user and I'm going to say this thing returns a user I have to import user at the top


00:40:51.540 --> 00:40:56.660
and it was like well you're not going to get those evaluated or really dealt with unless you're doing


00:40:56.660 --> 00:41:04.820
type annotation analysis so we're going to treat those as strings basically right and things like


00:41:04.820 --> 00:41:09.620
fast api and pydantic and others were going they would actually get the type information


00:41:09.620 --> 00:41:17.060
standard python style and then use that to modify behavior right like to do oh it says it's a list


00:41:17.060 --> 00:41:19.060
So we're going to convert from this list of those,


00:41:19.060 --> 00:41:23.060
or maybe a list of user, we're going to convert these JSON things to users.


00:41:23.060 --> 00:41:25.060
But with this change, it would have said,


00:41:25.060 --> 00:41:27.060
"Well, it's a string, and what does user mean?"


00:41:27.060 --> 00:41:29.060
If you don't know the actual type where it's coming from,


00:41:29.060 --> 00:41:31.060
there could be multiple users.


00:41:31.060 --> 00:41:33.060
It could be a user it couldn't track down,


00:41:33.060 --> 00:41:36.060
has it been imported yet, all sorts of weirdness around it.


00:41:36.060 --> 00:41:39.060
So the runtime behavior of these type annotated things


00:41:39.060 --> 00:41:42.060
like typer, pydantic, fastAPI,


00:41:42.060 --> 00:41:45.060
we're not sure how they were going to keep working


00:41:45.060 --> 00:41:49.460
with this being adopted. And it sounds like it's postponed at least till 311.


00:41:49.460 --> 00:41:53.780
Yeah, exactly. Yeah, thanks for bringing this up. That's a good one.


00:41:53.780 --> 00:42:03.780
All right. Well, okay, into the show. Do we have any jokes?


00:42:03.780 --> 00:42:10.740
Uh, I got some of the for you. I'll tell you, let me know if it qualifies. This is from Zach


00:42:11.300 --> 00:42:18.180
RMRF on Twitter says, "Did you hear about the four Pythonistas that robbed a bank?


00:42:18.180 --> 00:42:22.980
Three got caught and when questioned, they all stated that the fourth would never be caught,


00:42:22.980 --> 00:42:27.940
couldn't be caught because he knew RegX and was something of an escape artist."


00:42:27.940 --> 00:42:32.660
That's funny.


00:42:32.660 --> 00:42:35.220
Yeah, I think that's pretty good. Well done, Zach. Thanks for sending that in.


00:42:35.220 --> 00:42:37.300
Brian, you got anything as well?


00:42:37.860 --> 00:42:47.860
Yeah, let me pull it up. So, Rich, not Rich, Will McCougan asked about Rich and said,


00:42:47.860 --> 00:42:54.900
said, "Hey, if I wrote a book about Rich, what should, how much money would you pay for it? But


00:42:54.900 --> 00:43:01.380
also what should be in the book?" Of course, I said, "It should cover how fast it is to install


00:43:01.380 --> 00:43:03.380
Kind of a get rich quick guide.


00:43:03.380 --> 00:43:05.640
(laughing)


00:43:05.640 --> 00:43:09.720
- Love it, love it.


00:43:09.720 --> 00:43:12.220
And I believe the response was something like get out.


00:43:12.220 --> 00:43:14.720
- Get out, yeah, definitely.


00:43:14.720 --> 00:43:15.560
- Oh, nice.


00:43:15.560 --> 00:43:17.300
Will's getting a lot of coverage this week.


00:43:17.300 --> 00:43:18.140
That's beautiful.


00:43:18.140 --> 00:43:19.100
He's doing good work.


00:43:19.100 --> 00:43:21.460
All right, speed of coverage.


00:43:21.460 --> 00:43:23.940
Yeah, thanks for being here, Mike.


00:43:23.940 --> 00:43:24.860
- Well, thank you guys for having me.


00:43:24.860 --> 00:43:25.860
This was really fun.


00:43:25.860 --> 00:43:28.100
- Yeah, thank you.


00:43:28.100 --> 00:43:31.100
Thanks for everybody for joining on the live stream as well.


00:43:31.100 --> 00:43:34.100
Bye all.


00:43:34.100 --> 00:43:34.940
Bye.


00:43:34.940 --> 00:43:44.940
[BLANK_AUDIO]

