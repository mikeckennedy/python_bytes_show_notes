WEBVTT

00:00:00.000 --> 00:00:09.000
Hey, Brian. Hey, you ready to kick this show off? I am. Awesome. Everyone out there. Thanks


00:00:09.000 --> 00:00:14.200
for being here. Put your thoughts and comments in the live stream. If you're watching live


00:00:14.200 --> 00:00:20.040
and we'll see what we can do about making that part of the show. And with that, hello


00:00:20.040 --> 00:00:24.600
and welcome to Python bites where we deliver Python news and headlines directly to your


00:00:24.600 --> 00:00:31.880
earbuds. This is episode 340 recorded June 13th, 2023. I'm Michael Kennedy.


00:00:31.880 --> 00:00:33.400
And I'm Brian Okken.


00:00:33.400 --> 00:00:40.600
And this episode is brought to you by InfluxDV from InfluxData. Awesome. Real-time DV. So


00:00:40.600 --> 00:00:45.240
time series database. So we're excited to tell you about that later. If you want to connect with us,


00:00:45.240 --> 00:00:50.840
you can find us all on fosterdom.org@mkennedy@brianocken and at Python Bytes. Join us for


00:00:50.840 --> 00:00:53.640
for the live show at pythonbytes.fm/live.


00:00:53.640 --> 00:00:56.280
If you want to be part of the live stream


00:00:56.280 --> 00:00:57.920
and be in the audience,


00:00:57.920 --> 00:01:00.760
all the older video versions are there as well.


00:01:00.760 --> 00:01:04.320
And Brian, before we jump into your first topic,


00:01:04.320 --> 00:01:09.320
I've got some ideas, a request from the audience.


00:01:09.320 --> 00:01:10.760
- Okay.


00:01:10.760 --> 00:01:15.760
- Okay, so we are going to do an ask me anything episode.


00:01:15.760 --> 00:01:18.840
And really that should be ask us anything,


00:01:18.840 --> 00:01:22.480
but the EWA is not typically how people announce it.


00:01:22.480 --> 00:01:25.720
It's the AMA, not EWA.


00:01:25.720 --> 00:01:30.200
So following convention standard acronyms there,


00:01:30.200 --> 00:01:32.480
ask us anything.


00:01:32.480 --> 00:01:35.000
And I put together a Google form.


00:01:35.000 --> 00:01:36.080
It is super short.


00:01:36.080 --> 00:01:37.160
It says, what is your name?


00:01:37.160 --> 00:01:38.360
What is your question?


00:01:38.360 --> 00:01:40.680
And if you want, there's a few other fields for like,


00:01:40.680 --> 00:01:43.160
second question, and things like that.


00:01:43.160 --> 00:01:44.440
But they're optional.


00:01:44.440 --> 00:01:47.120
So if you're listening and you've ever wondered,


00:01:47.120 --> 00:01:51.720
I wonder if Brian has a thought, an opinion on this.


00:01:51.720 --> 00:01:53.720
Does he have an opinion on pytest plugins?


00:01:53.720 --> 00:01:55.720
I don't know, maybe.


00:01:55.720 --> 00:01:58.440
Does Michael have a thought on PyCast?


00:01:58.440 --> 00:02:01.440
Whatever, please take the time and put that in there,


00:02:01.440 --> 00:02:04.120
and we'll give you credit on the show as well.


00:02:04.120 --> 00:02:06.120
If you don't want to have your name in there,


00:02:06.120 --> 00:02:08.120
just put "Anonymous" or something.


00:02:08.120 --> 00:02:12.120
Everyone check that out.


00:02:12.120 --> 00:02:15.520
It is at... I created a short URL for it.


00:02:15.520 --> 00:02:20.520
Let's see, pythonbytes.fm/ama2023.


00:02:20.520 --> 00:02:23.920
So people can just go over there and check it out.


00:02:23.920 --> 00:02:25.600
So that's gonna be a lot of fun, Brian.


00:02:25.600 --> 00:02:27.120
I don't know when we're scheduling it.


00:02:27.120 --> 00:02:30.200
I'm probably pretty much when we get enough questions.


00:02:30.200 --> 00:02:31.400
Thank you.


00:02:31.400 --> 00:02:32.400
- Okay.


00:02:32.400 --> 00:02:35.720
And that link will be in the show notes, right?


00:02:35.720 --> 00:02:36.560
- Absolutely.


00:02:36.560 --> 00:02:38.940
- Nice.


00:02:38.940 --> 00:02:41.240
- And so, yeah, let's talk GUIs.


00:02:41.240 --> 00:02:43.400
We haven't been on a GUI rant for a while.


00:02:43.400 --> 00:02:45.440
- Yeah, I don't know if we've ever talked


00:02:45.440 --> 00:02:47.360
about GUIs, I think maybe you have.


00:02:47.360 --> 00:02:48.880
(laughing)


00:02:48.880 --> 00:02:49.880
It's been a while.


00:02:49.880 --> 00:02:55.400
So I ran across this website called Python GUIs


00:02:55.400 --> 00:02:58.800
and it's like a whole website dedicated to Python GUIs.


00:02:58.800 --> 00:03:03.800
And it's from a fellow named Martin Fitzpatrick.


00:03:03.800 --> 00:03:07.320
He does consulting and some other stuff.


00:03:07.320 --> 00:03:08.840
And this is pretty kind of cool.


00:03:08.840 --> 00:03:10.780
This is fairly comprehensive.


00:03:12.960 --> 00:03:15.720
He has tutorials and references to books


00:03:15.720 --> 00:03:16.560
and everything like that.


00:03:16.560 --> 00:03:18.680
But it's kind of a neat walkthrough,


00:03:18.680 --> 00:03:20.360
just the website itself.


00:03:20.360 --> 00:03:22.440
Like for instance, where do I begin?


00:03:22.440 --> 00:03:26.880
His recommendation is doing PyQt6 to start with,


00:03:26.880 --> 00:03:28.600
if you don't have a preference.


00:03:28.600 --> 00:03:32.340
However, there's, so let's like walk through a couple.


00:03:32.340 --> 00:03:35.080
So if you just kind of walk through,


00:03:35.080 --> 00:03:37.760
he talks about what you should look about,


00:03:37.760 --> 00:03:40.300
look, learn what tutorials are available.


00:03:41.360 --> 00:03:44.240
And then it says continue.


00:03:44.240 --> 00:03:47.440
So if you continue on with the PyQt6,


00:03:47.440 --> 00:03:50.120
you just sort of walk through a tutorial


00:03:50.120 --> 00:03:54.120
around how to get Qt Designer up and everything.


00:03:54.120 --> 00:03:56.800
But there's a lot more than just Qt here.


00:03:56.800 --> 00:04:01.800
He's got tutorials on PyQt6, Qt5, PySide, TkAndr.


00:04:01.800 --> 00:04:07.760
There's even a tutorial, most recent tutorial I saw


00:04:07.760 --> 00:04:10.300
was getting started with Kivy.


00:04:10.300 --> 00:04:15.820
for GUI development and it's a pretty lengthy getting started with Kibbe thing.


00:04:15.820 --> 00:04:19.820
So, and it covers Mac, Windows, Linux.


00:04:19.820 --> 00:04:23.820
So, it's pretty comprehensive. It's kind of nice.


00:04:23.820 --> 00:04:27.820
Yeah, this looks really nice.


00:04:27.820 --> 00:04:31.820
I think choosing, I always feel like there's this paradox of choice


00:04:31.820 --> 00:04:35.820
and when I'm thinking about Python GUIs and there's like, well, there's no real


00:04:35.820 --> 00:04:39.820
clear answer and they're all kind of got their own oddities into them or their own


00:04:39.820 --> 00:04:42.740
and restrictions, but this is really cool


00:04:42.740 --> 00:04:44.340
to see them put all side by side


00:04:44.340 --> 00:04:47.580
and then different tutorials helping you get started.


00:04:47.580 --> 00:04:50.700
- Yeah, and yeah, I kind of like it.


00:04:50.700 --> 00:04:53.900
I think a lot of people start with like Tkinter,


00:04:53.900 --> 00:04:57.500
it's not Tk in there, it's a, you know, whatever,


00:04:57.500 --> 00:05:01.460
Tinker, I forget what they call it with Python,


00:05:01.460 --> 00:05:06.540
but it's not, I don't think that's a great place to start.


00:05:06.540 --> 00:05:08.220
If you want something to look really nice,


00:05:08.220 --> 00:05:10.980
if you're gonna support it.


00:05:10.980 --> 00:05:13.020
I think I kind of agree with them.


00:05:13.020 --> 00:05:16.220
Maybe starting with Qt or Qt, sorry.


00:05:16.220 --> 00:05:22.060
I grew up using Qt without knowing how to pronounce it.


00:05:22.060 --> 00:05:26.120
People do pronounce it Qt, but yeah, anyway.


00:05:26.120 --> 00:05:29.140
So if you wanna learn about Python GUIs,


00:05:29.140 --> 00:05:31.900
maybe check out pythonguis.com.


00:05:31.900 --> 00:05:34.680
So what do you got for us?


00:05:34.680 --> 00:05:37.620
Oh, you're muted.


00:05:37.620 --> 00:05:46.660
- Before we move on, Brian, I do want to also just sort of second that, that I think, Qt,


00:05:46.660 --> 00:05:50.560
those look like native applications that belong on your platform, right?


00:05:50.560 --> 00:05:55.960
You're not going to like, "Oh, clearly some funky cross-platform API is what we're working


00:05:55.960 --> 00:05:56.960
with here right now."


00:05:56.960 --> 00:05:59.000
This stuff looks pretty solid, right?


00:05:59.000 --> 00:06:00.000
- Yeah.


00:06:00.000 --> 00:06:01.000
It is TK-Enter.


00:06:01.000 --> 00:06:04.000
Why do we call it TK-Enter?


00:06:04.000 --> 00:06:05.000
Or Tkinter?


00:06:05.000 --> 00:06:06.000
I don't know.


00:06:06.000 --> 00:06:07.080
I don't know.


00:06:07.080 --> 00:06:08.040
'Cause it's not TK.


00:06:08.040 --> 00:06:09.960
Oh, 'cause it's from the TK toolkit.


00:06:09.960 --> 00:06:10.800
Got it.


00:06:10.800 --> 00:06:11.920
- Ah, makes sense.


00:06:11.920 --> 00:06:13.560
Got it. - Yeah, that makes sense.


00:06:13.560 --> 00:06:15.240
- All right, I have something


00:06:15.240 --> 00:06:16.980
for all the data scientists out there.


00:06:16.980 --> 00:06:18.200
How about that?


00:06:18.200 --> 00:06:19.040
- Okay.


00:06:19.040 --> 00:06:24.200
- JupyterLab, which is the more capable,


00:06:24.200 --> 00:06:28.160
the more IDE-like experience for Jupyter Notebooks,


00:06:28.160 --> 00:06:32.260
4.0 is here, and it looks like a pretty mega release.


00:06:33.680 --> 00:06:36.900
So they say, they being Jason Weil,


00:06:36.900 --> 00:06:40.020
say the next major release


00:06:40.020 --> 00:06:42.800
of the full feature development environment


00:06:42.800 --> 00:06:45.100
for Jupyter is here.


00:06:45.100 --> 00:06:49.600
It is available for install right off PyPI in Conda Forge.


00:06:49.600 --> 00:06:51.880
So if you have it, all you gotta do is pip install


00:06:51.880 --> 00:06:53.880
--upgrade JupyterLab


00:06:53.880 --> 00:06:57.560
or conda install dash C Conda Forge JupyterLab.


00:06:57.560 --> 00:07:00.320
And it'll just upgrade in place for you.


00:07:00.320 --> 00:07:01.240
So that's pretty excellent.


00:07:01.240 --> 00:07:04.440
That's low maintenance, low effort upgrade.


00:07:04.440 --> 00:07:06.000
I suspect there's a lot of stuff happening


00:07:06.000 --> 00:07:08.360
when you run those commands.


00:07:08.360 --> 00:07:11.320
One of the big deals is JupyterLab is now faster.


00:07:11.320 --> 00:07:13.280
There's a bunch of different ways


00:07:13.280 --> 00:07:16.000
in which they made that happen,


00:07:16.000 --> 00:07:17.040
where that's happening.


00:07:17.040 --> 00:07:19.240
Notebook windowing is one of them,


00:07:19.240 --> 00:07:21.520
where for a long notebook,


00:07:21.520 --> 00:07:24.240
instead of trying to process and load the whole thing,


00:07:24.240 --> 00:07:27.880
it'll just show the web browser viewport


00:07:27.880 --> 00:07:29.080
in terms of rendering,


00:07:29.080 --> 00:07:32.160
which will make some of the rendering faster.


00:07:32.160 --> 00:07:36.120
Got CSS rule optimizations, CodeMirror.


00:07:36.120 --> 00:07:40.200
CodeMirror is the editor, text editor of the cell.


00:07:40.200 --> 00:07:44.360
So CodeMirror 6 is out and MathJax 2 as well.


00:07:44.360 --> 00:07:47.980
So if you're working with large notebooks,


00:07:47.980 --> 00:07:50.440
it should be much more efficient


00:07:50.440 --> 00:07:51.920
than JupyterLab 3, they say.


00:07:51.920 --> 00:07:54.000
- Awesome. - That's encouraging, right?


00:07:54.000 --> 00:07:55.200
Yeah. - Yeah.


00:07:55.200 --> 00:07:56.860
- Yeah, so cool.


00:07:56.860 --> 00:07:58.520
Let's see what else.


00:07:58.520 --> 00:08:00.660
There's additional performance improvements,


00:08:00.660 --> 00:08:02.320
but you have to turn these on.


00:08:02.320 --> 00:08:06.660
So you can get faster tab switching


00:08:06.660 --> 00:08:08.740
on Chromium-based browsers,


00:08:08.740 --> 00:08:11.180
which is unfortunately almost all of them,


00:08:11.180 --> 00:08:13.380
but that's the world we live in.


00:08:13.380 --> 00:08:18.340
So you can do, but you gotta go settings,


00:08:18.340 --> 00:08:23.340
JupyterLab Shell, switch hidden mode to content visibility.


00:08:23.340 --> 00:08:27.500
And for even more better performance with long notebooks,


00:08:27.500 --> 00:08:28.500
you're gonna go Settings, Notebooks,


00:08:28.500 --> 00:08:31.820
switch on a windowing mode to full.


00:08:31.820 --> 00:08:34.280
Okay, so those are all options.


00:08:34.280 --> 00:08:37.820
I told you there's a new CodeMirror.


00:08:37.820 --> 00:08:40.900
That's the text editor for cells and file editors.


00:08:40.900 --> 00:08:42.780
And it's upgraded to CodeMirror 6,


00:08:42.780 --> 00:08:44.660
which has a bunch of accessibility


00:08:44.660 --> 00:08:46.120
and performance improvements.


00:08:46.120 --> 00:08:48.900
So people can check that out.


00:08:48.900 --> 00:08:50.620
Let's change there.


00:08:50.620 --> 00:08:52.940
Also, JupyterLab, I'm not sure I knew this,


00:08:52.940 --> 00:08:54.580
comes with a real-time collaboration,


00:08:54.580 --> 00:08:58.540
AKA Google Docs style of collaboration.


00:08:58.540 --> 00:09:01.180
- Okay, I didn't know that they do that.


00:09:01.180 --> 00:09:02.020
- I did not either.


00:09:02.020 --> 00:09:04.060
I knew there were some notebook platforms that did,


00:09:04.060 --> 00:09:06.580
but I didn't realize JupyterLab did.


00:09:06.580 --> 00:09:09.300
So they moved this RTC, real-time collaboration,


00:09:09.300 --> 00:09:12.780
to a separate package, JupyterCollaboration,


00:09:12.780 --> 00:09:15.980
and that's available, it's its own sort of thing,


00:09:15.980 --> 00:09:19.040
includes support for multiple cursors and selections,


00:09:19.040 --> 00:09:22.380
new shared types, and yeah.


00:09:22.380 --> 00:09:26.760
There's also a new extension manager for JupyterLab extensions.


00:09:26.760 --> 00:09:30.460
Improved document search, UI enhancements,


00:09:30.460 --> 00:09:34.120
like more hotkeys and other styles,


00:09:34.120 --> 00:09:37.660
accessibility improvements, DevTool updates,


00:09:37.660 --> 00:09:42.960
like how they build JupyterLab, so TypeScript v5 and React v18.


00:09:42.960 --> 00:09:46.340
Most people won't care about that, but if you work on or try to customize


00:09:46.340 --> 00:09:51.040
the JupyterLab itself, then you create an extension or something,


00:09:51.040 --> 00:09:52.420
then you probably care.


00:09:52.420 --> 00:09:54.340
And finally, finally, finally,


00:09:54.340 --> 00:09:57.100
more than 100 bugs have been addressed and resolved,


00:09:57.100 --> 00:09:58.900
making it more stable and faster.


00:09:58.900 --> 00:10:01.300
So that sounds like a pretty big deal, doesn't it?


00:10:01.300 --> 00:10:03.340
- Yeah, yes.


00:10:03.340 --> 00:10:06.340
I think addressed means fixed


00:10:06.340 --> 00:10:09.220
and not just said hello to.


00:10:09.220 --> 00:10:10.180
- Exactly.


00:10:10.180 --> 00:10:11.140
Hello, bug.


00:10:11.140 --> 00:10:12.940
How shall I address you?


00:10:12.940 --> 00:10:15.780
You shall call me a CVE, remote code execution.


00:10:15.780 --> 00:10:17.500
Oh, hey, nice to meet you.


00:10:17.500 --> 00:10:18.900
No, probably not like that, right?


00:10:18.900 --> 00:10:19.860
- Yeah.


00:10:19.860 --> 00:10:21.900
So that's cool, yeah.


00:10:21.900 --> 00:10:22.940
- Yeah, that is cool.


00:10:22.940 --> 00:10:26.140
Getting some thumbs up from the audience as well.


00:10:26.140 --> 00:10:27.860
Now, before we move on,


00:10:27.860 --> 00:10:32.580
I wanna just talk about our sponsor real quick, InfluxDB.


00:10:32.580 --> 00:10:37.480
So thanks to Influx for supporting the show.


00:10:37.480 --> 00:10:43.660
So this episode of Python Bytes is brought to you


00:10:43.660 --> 00:10:47.140
by InfluxData, the makers of InfluxDB.


00:10:48.060 --> 00:10:52.160
InfluxDB is the database purpose-built for handling time series data


00:10:52.160 --> 00:10:55.160
at a massive scale for real-time analytics.


00:10:55.160 --> 00:10:58.860
And developers can ingest, store, and analyze all types of time series data,


00:10:58.860 --> 00:11:03.000
metrics, events, traces in a single platform.


00:11:03.000 --> 00:11:06.460
So how would boundless cardinality and lightning-fast SQL queries


00:11:06.460 --> 00:11:09.160
impact the way you develop real-time applications?


00:11:09.160 --> 00:11:10.360
Check out Influx.


00:11:10.360 --> 00:11:14.620
InfluxDB processes large time series data sets


00:11:14.620 --> 00:11:18.460
and provides low latency SQL queries,


00:11:18.460 --> 00:11:20.380
making it the go-to choice for developers


00:11:20.380 --> 00:11:23.660
building real-time apps and seeking crucial insights.


00:11:23.660 --> 00:11:26.060
For developer efficiency, InfluxDB


00:11:26.060 --> 00:11:29.300
helps you create IoT, analytics, and cloud applications


00:11:29.300 --> 00:11:32.420
using timestamped data rapidly and at scale.


00:11:32.420 --> 00:11:34.780
It's designed to ingest billions of data points


00:11:34.780 --> 00:11:38.180
from real-time with unlimited cardinality.


00:11:38.180 --> 00:11:40.460
InfluxDB streamlines building ones


00:11:40.460 --> 00:11:43.500
and deploying across the various platforms and environments


00:11:43.500 --> 00:11:46.580
from the edge on-premises and to the cloud.


00:11:46.580 --> 00:11:51.220
So try them for free at pythonbytes.fm/influxdb.


00:11:51.220 --> 00:11:53.660
The link is in your podcast player show notes.


00:11:53.660 --> 00:11:57.080
Thank you to Influx Data for supporting the show.


00:11:57.080 --> 00:11:59.440
- Yeah, thank you.


00:11:59.440 --> 00:12:04.500
I would like to talk about data,


00:12:04.500 --> 00:12:09.020
but not databases, but data types.


00:12:09.020 --> 00:12:12.740
So this is kind of early to talk about,


00:12:12.740 --> 00:12:16.620
But hey, Brett Cannon can write about it on his blog.


00:12:16.620 --> 00:12:18.980
I think it's fair game to talk about.


00:12:18.980 --> 00:12:23.980
So Brett Cannon had a proposal for a new kind of data type


00:12:23.980 --> 00:12:27.140
in Python called a struct.


00:12:27.140 --> 00:12:29.900
Structs are new things.


00:12:29.900 --> 00:12:32.660
We've lived with them in C for a long time


00:12:32.660 --> 00:12:35.100
and other languages have other types.


00:12:35.100 --> 00:12:39.620
I wanna take a slight detour before I talk about


00:12:40.580 --> 00:12:43.980
the struct proposal from Brett.


00:12:43.980 --> 00:12:46.640
And by proposal, I don't mean it's a pep.


00:12:46.640 --> 00:12:47.820
I don't think it's a PEP yet.


00:12:47.820 --> 00:12:50.500
I think it's just an idea that he had,


00:12:50.500 --> 00:12:52.260
but I think it's a cool idea.


00:12:52.260 --> 00:12:53.620
But one of the things he talked about


00:12:53.620 --> 00:12:55.660
was algebraic data types.


00:12:55.660 --> 00:12:59.320
And I gotta admit, I haven't run across that term,


00:12:59.320 --> 00:13:03.040
algebraic data types, before like a week ago or so.


00:13:03.040 --> 00:13:05.580
And then I've read two articles referring to it.


00:13:05.580 --> 00:13:09.540
I'm used to ADTs being abstract data types,


00:13:09.540 --> 00:13:14.540
which are data, you know, user defined data types.


00:13:14.540 --> 00:13:18.080
In, I don't know what the abstract means, but anyway,


00:13:18.080 --> 00:13:23.180
algebraic ones are things that you can compose.


00:13:23.180 --> 00:13:24.820
They're like abstract data types,


00:13:24.820 --> 00:13:28.460
but they're the things that you can compose like a,


00:13:28.460 --> 00:13:32.100
you know, a list is a nil plus,


00:13:32.100 --> 00:13:34.380
I don't know what that means, but anyway,


00:13:34.380 --> 00:13:38.540
or trees either is composed of empty or leaf or a node


00:13:38.540 --> 00:13:42.500
or something, I don't, I'm still not quite sure


00:13:42.500 --> 00:13:45.580
how this makes anything to do with it,


00:13:45.580 --> 00:13:47.280
side diversion, anyway.


00:13:47.280 --> 00:13:50.940
So what does this look like?


00:13:50.940 --> 00:13:52.460
And it's kind of a neat idea.


00:13:52.460 --> 00:13:55.540
So jumping down to an example,


00:13:55.540 --> 00:13:57.240
with a struct you could just say,


00:13:57.240 --> 00:14:02.260
a point is a struct that takes X and Y


00:14:02.260 --> 00:14:03.900
and they're both integers, say.


00:14:03.900 --> 00:14:08.400
And they have to be named or either positional or named,


00:14:08.400 --> 00:14:10.840
but they cannot be unnamed only.


00:14:10.840 --> 00:14:13.160
I don't know why, but,


00:14:13.160 --> 00:14:15.480
and then it'd be kind of like named classes


00:14:15.480 --> 00:14:18.520
or named tuples to access it.


00:14:18.520 --> 00:14:20.600
So you just access the stuff.


00:14:20.600 --> 00:14:24.400
So you just declare this point, it takes X and Y,


00:14:24.400 --> 00:14:28.920
and then you can get at it with like, say, P.X or P.Y.


00:14:28.920 --> 00:14:30.740
And that's it really.


00:14:30.740 --> 00:14:32.600
So what is this?


00:14:32.600 --> 00:14:33.560
Why would we need this?


00:14:33.560 --> 00:14:36.120
And I think it'd be really pretty cool


00:14:36.120 --> 00:14:37.800
to have something that simple.


00:14:37.800 --> 00:14:42.800
And these structs would be, they not allow inheritance.


00:14:42.800 --> 00:14:46.260
They would have no methods currently.


00:14:46.260 --> 00:14:51.240
No methods, no inheritance, and they're not mutable.


00:14:51.240 --> 00:14:53.080
So you can't change the thing in it.


00:14:53.080 --> 00:14:53.920
Why is that important?


00:14:53.920 --> 00:14:56.960
Well, then you can use these things for keys


00:14:56.960 --> 00:14:58.980
and dictionaries and things like that.


00:14:58.980 --> 00:15:01.160
And I just think this would be kind of cool


00:15:01.160 --> 00:15:05.200
because I still with data types, even with data types


00:15:05.200 --> 00:15:09.220
and all the other goodies and adders


00:15:09.220 --> 00:15:11.920
and other goodies we have within Python.


00:15:11.920 --> 00:15:13.740
I still use named tuple a lot


00:15:13.740 --> 00:15:16.040
and I would totally use this for a lot of stuff


00:15:16.040 --> 00:15:19.180
and make it, especially if it was super fast.


00:15:19.180 --> 00:15:20.300
So that's the idea.


00:15:20.300 --> 00:15:23.300
Got any ideas? - It looks interesting.


00:15:23.300 --> 00:15:27.320
And the defining syntax,


00:15:27.320 --> 00:15:29.760
it's kind of a one liner a little bit,


00:15:29.760 --> 00:15:32.540
as you pointed out, like a named tuple,


00:15:32.540 --> 00:15:36.440
but it actually, it defines a class-like thing


00:15:36.440 --> 00:15:39.440
with these optimizations, for example, Dunder slots.


00:15:39.440 --> 00:15:41.580
And kind of a data classes type thing


00:15:41.580 --> 00:15:44.480
with Dunder equal and Dunder hash.


00:15:44.480 --> 00:15:47.060
So for people listening, you just say,


00:15:47.060 --> 00:15:51.040
all in one line, struct, point a capital B for the type,


00:15:51.040 --> 00:15:54.300
parenthesis X comma Y, that's the whole thing, right?


00:15:54.300 --> 00:15:55.140
- Yeah.


00:15:55.140 --> 00:15:58.740
- Tony out in the audience does wonder


00:15:58.740 --> 00:16:00.700
if it actually requires type annotations


00:16:00.700 --> 00:16:02.340
or if those are optional.


00:16:02.340 --> 00:16:05.920
>> Yes, they're optional, but I like them, so I don't know.


00:16:05.920 --> 00:16:09.000
>> No, Brett says in his article,


00:16:09.000 --> 00:16:11.240
he would propose that they would be


00:16:11.240 --> 00:16:14.680
optional if you just had two elements in something.


00:16:14.680 --> 00:16:15.400
I mean, it's-


00:16:15.400 --> 00:16:18.680
>> Yeah, it seems consistent with Python that it would be optional, right?


00:16:18.680 --> 00:16:19.560
>> Yeah.


00:16:19.560 --> 00:16:21.420
>> Tony also says, "Oh boy,


00:16:21.420 --> 00:16:23.400
I just started writing some Rust code at work,


00:16:23.400 --> 00:16:25.860
so I'm interested in this for Python."


00:16:25.860 --> 00:16:30.680
>> Yeah, and the example that Brett gave of this point,


00:16:30.680 --> 00:16:35.680
He then showed the example of what under the hood


00:16:35.680 --> 00:16:39.440
that would give you that you don't have to write.


00:16:39.440 --> 00:16:44.000
And this example of like being able to convert it


00:16:44.000 --> 00:16:48.320
to a dictionary and replace parameters and using slots.


00:16:48.320 --> 00:16:50.760
And I mean, there's a lot of code here


00:16:50.760 --> 00:16:52.320
that you don't need to write.


00:16:52.320 --> 00:16:55.760
And yes, we do kind of have data type,


00:16:55.760 --> 00:16:57.860
data classes that sort of do this,


00:16:57.860 --> 00:17:00.640
but data classes are not,


00:17:00.640 --> 00:17:03.540
they're not optimized for data,


00:17:03.540 --> 00:17:05.180
for having lots and lots of them.


00:17:05.180 --> 00:17:07.060
So this would be like an optimization


00:17:07.060 --> 00:17:10.540
to have just like huge, huge data structure


00:17:10.540 --> 00:17:13.820
full of these things and have it still be fast.


00:17:13.820 --> 00:17:15.760
So I think it'd be cool.


00:17:15.760 --> 00:17:18.260
- And having it be part of the language,


00:17:18.260 --> 00:17:22.060
you know, maybe they could do optimizations around it


00:17:22.060 --> 00:17:27.060
for Python 3.14 or whatever, you know,


00:17:27.060 --> 00:17:29.060
or whatever, you know, the faster CPython story.


00:17:29.060 --> 00:17:31.060
Like, for example, if you know it's immutable,


00:17:31.060 --> 00:17:35.060
could you make it allocate on just the stack


00:17:35.060 --> 00:17:37.060
and not actually go to the heap or things like this, right?


00:17:37.060 --> 00:17:39.060
It'd be interesting.


00:17:39.060 --> 00:17:41.060
Maybe that's a bridge too far, but...


00:17:41.060 --> 00:17:45.060
- I'm also interested in how this maps to, like, hardware.


00:17:45.060 --> 00:17:49.060
Because dealing with registers and hardware interfaces,


00:17:49.060 --> 00:17:53.060
there's--using C, we often have structs that we overlay


00:17:53.060 --> 00:17:56.060
over the top of, like, shared memory systems.


00:17:56.060 --> 00:18:01.060
systems and this might be great use for something like that.


00:18:01.060 --> 00:18:04.380
- A few more thoughts out there.


00:18:04.380 --> 00:18:07.460
Grant says, "This is in line with what Mojo expresses.


00:18:07.460 --> 00:18:09.060
"We recently spoke about them.


00:18:09.060 --> 00:18:10.860
"Would love to have a struct in Python."


00:18:10.860 --> 00:18:13.740
And Blaze points out, "Waiting for Hanik's opinion."


00:18:13.740 --> 00:18:15.460
Maybe something like this will get into Adders.


00:18:15.460 --> 00:18:16.300
Yeah, we'll see.


00:18:16.300 --> 00:18:23.700
Sometimes, Brian, it's about putting new stuff,


00:18:23.700 --> 00:18:25.300
new things into Python.


00:18:25.300 --> 00:18:28.860
Sometimes, however, it's about ripping it out.


00:18:28.860 --> 00:18:29.700
Yes.


00:18:29.700 --> 00:18:34.700
So my next item is the realization of PEP 594.


00:18:34.700 --> 00:18:39.380
So PEP 594, for those of you who don't know,


00:18:39.380 --> 00:18:44.380
I interviewed Christian Himes and Brett Cannon,


00:18:44.380 --> 00:18:47.420
speaking of Brett Cannon,


00:18:47.420 --> 00:18:50.140
he gets a back-to-back mention here


00:18:50.140 --> 00:18:52.820
about removing Python's dead batteries.


00:18:52.820 --> 00:18:56.300
and this pep594.


00:18:56.300 --> 00:18:58.700
And the idea is there's stuff in Python


00:18:58.700 --> 00:19:00.540
that makes no sense to be in Python.


00:19:00.540 --> 00:19:03.640
It made sense when we had a world without the internet,


00:19:03.640 --> 00:19:08.040
when there was no concept of pip install,


00:19:08.040 --> 00:19:10.660
and you really needed to kind of have Python


00:19:10.660 --> 00:19:13.100
come with a lot of its capabilities.


00:19:13.100 --> 00:19:17.140
But now, if you go over to pypi.org,


00:19:17.140 --> 00:19:19.260
what is the current number?


00:19:19.260 --> 00:19:23.180
we have 460,000 packages.


00:19:23.180 --> 00:19:25.380
They're revolving, like a larger definition


00:19:25.380 --> 00:19:28.100
of what Python is really, really fast, right?


00:19:28.100 --> 00:19:29.300
- Yeah.


00:19:29.300 --> 00:19:31.860
- So for example, do you think it would make sense


00:19:31.860 --> 00:19:34.960
potentially to have an implementation


00:19:34.960 --> 00:19:37.740
of an async chat client built into the standard library


00:19:37.740 --> 00:19:38.580
of Python?


00:19:38.580 --> 00:19:40.820
Maybe not.


00:19:40.820 --> 00:19:42.260
- I didn't know we had that.


00:19:42.260 --> 00:19:46.060
- Well, apparently we did until 3.12.


00:19:46.060 --> 00:19:48.220
So that's not actually out yet,


00:19:48.220 --> 00:19:53.220
but it's gone or like an SMTP daemon built into Python.


00:19:53.220 --> 00:19:58.360
Who should be running their own mail client


00:19:58.360 --> 00:20:00.980
as part of Python itself?


00:20:00.980 --> 00:20:02.860
Not even a separate package.


00:20:02.860 --> 00:20:06.480
But more importantly, as was discussed over on the podcast,


00:20:06.480 --> 00:20:09.220
like this is overhead for all the core devs.


00:20:09.220 --> 00:20:11.560
Do we want them working on things like the struct


00:20:11.560 --> 00:20:14.140
or do we want them still managing--


00:20:14.140 --> 00:20:16.940
- CGS. - Yeah.


00:20:16.940 --> 00:20:20.220
I like audio parsing for expired.


00:20:20.220 --> 00:20:23.740
Nobody uses any more audio formats or CGI


00:20:23.740 --> 00:20:29.180
or telnet libraries or, you know, like chat clients.


00:20:29.180 --> 00:20:35.420
So this basically is the announcement


00:20:35.420 --> 00:20:39.220
by Victor Stinner, I believe, saying,


00:20:39.220 --> 00:20:44.220
we just removed 19 modules from Python 3.13


00:20:44.220 --> 00:20:46.260
standard library.


00:20:46.260 --> 00:20:48.460
These are the ones that have already been deprecated


00:20:48.460 --> 00:20:51.700
in 3.11 by pep594.


00:20:51.700 --> 00:20:55.100
So yeah, it's a big long list of them.


00:20:55.100 --> 00:20:59.180
Like I said, like you pointed out some CGI image header,


00:20:59.180 --> 00:21:01.940
you know, male stuff.


00:21:01.940 --> 00:21:04.820
Also talks a little bit about the 3.12 and 3.11 ones


00:21:04.820 --> 00:21:06.420
which are gone.


00:21:06.420 --> 00:21:09.700
And then finally it does say like, if this affects you,


00:21:09.700 --> 00:21:11.620
here's what you can do.


00:21:11.620 --> 00:21:14.000
Do nothing, just stay on 3.11.


00:21:14.900 --> 00:21:18.660
It says, "In my opinion, it is a dangerous long-term choice.


00:21:18.660 --> 00:21:20.380
However, you can do nothing.


00:21:20.380 --> 00:21:24.420
You could create a group of volunteers


00:21:24.420 --> 00:21:26.580
to give life to this module, right?"


00:21:26.580 --> 00:21:29.180
The module is open source in the sense


00:21:29.180 --> 00:21:32.240
that Python's standard library is open source.


00:21:32.240 --> 00:21:38.260
So you go in there, you copy the files out,


00:21:38.260 --> 00:21:40.280
you make a PyPI package for it,


00:21:40.280 --> 00:21:42.580
and you find people who want to keep it going.


00:21:43.860 --> 00:21:45.580
- Yeah, or you vendor it.


00:21:45.580 --> 00:21:47.400
You could copy the removed module


00:21:47.400 --> 00:21:50.180
just into your code itself, right?


00:21:50.180 --> 00:21:52.220
Often it's just a .py file,


00:21:52.220 --> 00:21:54.620
so you just vendor it in if you have to.


00:21:54.620 --> 00:21:57.180
Honestly, that kind of seems like a pretty decent idea


00:21:57.180 --> 00:21:58.500
if you're like going low key


00:21:58.500 --> 00:22:00.860
and you don't wanna take on an open source project


00:22:00.860 --> 00:22:02.820
to remain, to maintain CGI.


00:22:02.820 --> 00:22:04.860
You just like, I just need this to run.


00:22:04.860 --> 00:22:06.900
So you can copy that over.


00:22:06.900 --> 00:22:11.540
And then there's a whole discussion on stuff around this,


00:22:11.540 --> 00:22:12.380
right, if you want.


00:22:12.380 --> 00:22:17.380
Anyway, 20 standard lib modules, they're out.


00:22:17.380 --> 00:22:19.380
- Yeah, I think it's a good thing.


00:22:19.380 --> 00:22:22.380
Just like, yeah, changing your batteries,


00:22:22.380 --> 00:22:24.380
kind of like your smoke detectors.


00:22:24.380 --> 00:22:26.380
- Yeah, exactly.


00:22:26.380 --> 00:22:28.380
One more audience comment on this before we move on.


00:22:28.380 --> 00:22:30.380
Grant says, "Happy for the Python core devs


00:22:30.380 --> 00:22:32.380
"to kill all these modules.


00:22:32.380 --> 00:22:34.380
"Nothing makes senior engineers happier


00:22:34.380 --> 00:22:36.380
"than calling bodies of code that aren't worth their weight."


00:22:36.380 --> 00:22:38.380
I totally agree.


00:22:38.380 --> 00:22:41.380
I would be happy, honestly, to see even a thinner,


00:22:41.380 --> 00:22:44.340
thinner, smaller Python standard library,


00:22:44.340 --> 00:22:47.340
and then have more of these as pip installs.


00:22:47.340 --> 00:22:48.940
But then when you install Python,


00:22:48.940 --> 00:22:51.640
it could like kind of come pre-installed


00:22:51.640 --> 00:22:52.940
with 20 or 30 packages


00:22:52.940 --> 00:22:54.580
that if you want to upgrade them separately,


00:22:54.580 --> 00:22:56.500
or I don't know.


00:22:56.500 --> 00:23:00.300
So for things like if I want to run this on MicroPython,


00:23:00.300 --> 00:23:02.500
I wouldn't run it on WebAssembly under PyScript.


00:23:02.500 --> 00:23:04.180
Like those situations are like,


00:23:04.180 --> 00:23:06.420
you don't, the whole huge standard library is a problem.


00:23:06.420 --> 00:23:08.900
So I don't know, I feel like


00:23:08.900 --> 00:23:10.420
there's interesting stuff happening here,


00:23:10.420 --> 00:23:12.380
But this is a good start.


00:23:12.380 --> 00:23:13.660
>>Yeah, definitely.


00:23:13.660 --> 00:23:17.340
I think it is.


00:23:17.340 --> 00:23:18.340
>>It is.


00:23:18.340 --> 00:23:19.540
And is that all of our items?


00:23:19.540 --> 00:23:20.740
I believe it is, isn't it?


00:23:20.740 --> 00:23:21.420
>>It is.


00:23:21.420 --> 00:23:23.060
And so some of these decisions are


00:23:23.060 --> 00:23:28.700
made by some of the core Python people, maybe on the Python


00:23:28.700 --> 00:23:32.580
board, have something to do with some of this, perhaps.


00:23:32.580 --> 00:23:35.580
So if the elections for--


00:23:35.580 --> 00:23:37.500
so one of our extras, I'd like to mention


00:23:37.500 --> 00:23:41.900
that the PSF announced that you need,


00:23:41.900 --> 00:23:44.440
if you care about elections,


00:23:44.440 --> 00:23:48.000
you kind of need to affirm your PSF membership


00:23:48.000 --> 00:23:50.520
voting status before the 15th.


00:23:50.520 --> 00:23:52.840
So the cutoff is only a couple days from now.


00:23:52.840 --> 00:23:57.600
And I'm glad somebody mentioned this.


00:23:57.600 --> 00:23:58.680
I can't remember where I saw it


00:23:58.680 --> 00:24:02.160
because it sort of went to my email inbox


00:24:02.160 --> 00:24:03.560
and I forgot to look.


00:24:03.560 --> 00:24:08.620
So I just affirmed my voting status this morning.


00:24:08.620 --> 00:24:09.120
Excellent.


00:24:09.120 --> 00:24:14.640
Well, I definitely affirmed mine a couple of days ago.


00:24:14.640 --> 00:24:16.040
So it's all good.


00:24:16.040 --> 00:24:17.720
But yeah, thanks for pointing out here.


00:24:17.720 --> 00:24:18.320
This is great.


00:24:18.320 --> 00:24:18.820
OK.


00:24:18.820 --> 00:24:20.000
Do you have any extras?


00:24:20.000 --> 00:24:21.760
I do.


00:24:21.760 --> 00:24:26.680
I just released a video collab with Shulian Saquir


00:24:26.680 --> 00:24:30.360
and Bob Belderbose from the PyBytes guys,


00:24:30.360 --> 00:24:34.400
about five tips for budding Python developers,


00:24:34.400 --> 00:24:37.080
five career tips for budding Python developers


00:24:37.080 --> 00:24:39.240
as a 25 minute YouTube video.


00:24:39.240 --> 00:24:41.840
So people can check that out.


00:24:41.840 --> 00:24:43.480
That link is in your show notes


00:24:43.480 --> 00:24:45.480
if that sounds interesting to you.


00:24:45.480 --> 00:24:47.160
- It looks like Julian and Iron Man


00:24:47.160 --> 00:24:48.680
are looking at the same thing.


00:24:48.680 --> 00:24:53.200
- Julian has an Iron Man painting


00:24:53.200 --> 00:24:54.280
in the background behind him


00:24:54.280 --> 00:24:57.040
and they've got the same basic expression.


00:24:57.040 --> 00:24:58.680
Pretty awesome.


00:24:58.680 --> 00:25:00.400
So people can check that out.


00:25:00.400 --> 00:25:04.840
Also, PyCon US 2023.


00:25:04.840 --> 00:25:05.680
Remember that Brian?


00:25:05.680 --> 00:25:06.800
It was a while ago.


00:25:06.800 --> 00:25:09.180
- Yeah, all the videos are out.


00:25:09.180 --> 00:25:10.240
- The videos are out.


00:25:10.240 --> 00:25:11.360
- Yay.


00:25:11.360 --> 00:25:15.920
- Yay, so there are some that are unavailable


00:25:15.920 --> 00:25:16.980
that are hidden.


00:25:16.980 --> 00:25:18.320
I'm wondering if that's intentional


00:25:18.320 --> 00:25:21.000
or if that's like they were uploaded and hidden


00:25:21.000 --> 00:25:22.840
and they're just forgot to be set to public.


00:25:22.840 --> 00:25:25.320
So whoever's in charge of this might wanna look


00:25:25.320 --> 00:25:28.360
why there's hidden videos published to this playlist.


00:25:28.360 --> 00:25:30.200
But I don't know how many there are.


00:25:30.200 --> 00:25:33.920
There's 142 videos, possibly some others as well


00:25:33.920 --> 00:25:35.860
that are hidden on this playlist.


00:25:35.860 --> 00:25:37.080
So people can check it out.


00:25:37.080 --> 00:25:39.480
This is basically all of PyCon,


00:25:39.480 --> 00:25:41.100
including the tutorials,


00:25:41.100 --> 00:25:45.640
if you wanna go and kind of be part of that side of PyCon,


00:25:45.640 --> 00:25:47.240
which is excellent.


00:25:47.240 --> 00:25:48.080
- Nice.


00:25:48.080 --> 00:25:51.280
So some are white and some are kind of this gray color.


00:25:51.280 --> 00:25:53.680
Do you know what the difference is?


00:25:53.680 --> 00:25:54.920
No.


00:25:54.920 --> 00:25:55.760
- No idea.


00:25:55.760 --> 00:25:56.960
I think it's just the font,


00:25:56.960 --> 00:26:01.960
just the opening slide they use for their presentation.


00:26:01.960 --> 00:26:06.000
I don't know if there's more to read into it than that.


00:26:06.000 --> 00:26:09.420
I would like to maybe, I don't know if the people


00:26:09.420 --> 00:26:14.000
who are organizing next year's PyCon are listening.


00:26:14.000 --> 00:26:17.760
I would like to propose just some kind of suggestion


00:26:17.760 --> 00:26:22.600
that might make this a little easier for them


00:26:22.600 --> 00:26:25.080
because this seems to be like a huge challenge


00:26:25.080 --> 00:26:26.320
from what I can tell, right?


00:26:26.320 --> 00:26:30.000
PyCon was in April, it's the middle of June


00:26:30.000 --> 00:26:32.200
and now the videos have come out.


00:26:32.200 --> 00:26:36.600
So somebody has spent, you know,


00:26:36.600 --> 00:26:39.520
like a month and a half working on these videos


00:26:39.520 --> 00:26:42.200
and the community has been waiting a month and a half


00:26:42.200 --> 00:26:43.680
to get them, right?


00:26:43.680 --> 00:26:46.280
Brian, how quickly is our video for Python Bytes out


00:26:46.280 --> 00:26:47.720
when we're done with it?


00:26:47.720 --> 00:26:49.880
- Like right when we're done.


00:26:49.880 --> 00:26:52.120
- I mean, like literally you could seek around in it


00:26:52.120 --> 00:26:54.260
as you like part of the stream, right?


00:26:54.260 --> 00:26:56.140
We're just live streaming this using something


00:26:56.140 --> 00:26:57.900
like StreamYard.


00:26:57.900 --> 00:27:01.340
And I know that there's a pay to attend virtually.


00:27:01.340 --> 00:27:04.220
So maybe you don't want to have a public stream


00:27:04.220 --> 00:27:05.060
that people can use.


00:27:05.060 --> 00:27:08.760
Maybe there's, but this kind of just live streaming it


00:27:08.760 --> 00:27:10.920
to YouTube, even if that's an unlisted URL


00:27:10.920 --> 00:27:12.820
that you then, when the conference is over,


00:27:12.820 --> 00:27:13.780
is flipped to public.


00:27:13.780 --> 00:27:17.660
'Cause I know that kind of, you don't necessarily


00:27:17.660 --> 00:27:19.060
don't want that to be going,


00:27:19.060 --> 00:27:21.660
have that whole live experience


00:27:21.660 --> 00:27:22.940
if you're not part of the,


00:27:22.940 --> 00:27:25.940
I signed up for the virtual pass, which is great, it's fine.


00:27:25.940 --> 00:27:29.540
But I think we could get these videos in a lot quicker


00:27:29.540 --> 00:27:32.260
and help people a lot if you did something like,


00:27:32.260 --> 00:27:34.460
you just kind of live streamed it.


00:27:34.460 --> 00:27:37.500
I know people might worry about the connectivity


00:27:37.500 --> 00:27:39.860
and it cutting out the quality, but with, for example,


00:27:39.860 --> 00:27:44.140
StreamYard, it records local video, it's maximum quality.


00:27:44.140 --> 00:27:47.420
So there's, if they had a stream deck


00:27:47.420 --> 00:27:48.580
where they can switch the views


00:27:48.580 --> 00:27:50.500
and they had this going and recording locally,


00:27:50.500 --> 00:27:53.760
these videos would be out as quick as you could click from


00:27:53.760 --> 00:27:55.200
unlisted to public on YouTube.


00:27:55.200 --> 00:28:00.700
I do want to, I guess disagree with you on that. Okay. So


00:28:00.700 --> 00:28:05.080
Pike, so Pike cascades, for one did the, the I don't know if it


00:28:05.080 --> 00:28:08.680
was available right away, but it was available soon after the


00:28:08.680 --> 00:28:13.300
entire day recordings, she had the day recordings. So if you if


00:28:13.300 --> 00:28:15.880
you wanted to find yours or something or find somebody's you


00:28:15.880 --> 00:28:19.960
could kind of scroll through and find it. It was a little it was a


00:28:19.960 --> 00:28:22.240
a little, it was just sort of going,


00:28:22.240 --> 00:28:23.800
there wasn't any editing.


00:28:23.800 --> 00:28:25.680
So it was kind of hard to deal with.


00:28:25.680 --> 00:28:28.280
I don't know how many people really watched those,


00:28:28.280 --> 00:28:33.280
but the PyCon US videos,


00:28:33.280 --> 00:28:36.700
I didn't realize this at first, somebody corrected me.


00:28:36.700 --> 00:28:39.720
They were available to people that either attended live


00:28:39.720 --> 00:28:42.840
or attended virtually,


00:28:42.840 --> 00:28:45.460
but didn't get to go to all the videos.


00:28:46.840 --> 00:28:51.840
the online experience included being able to go in and watch videos,


00:28:51.840 --> 00:28:56.400
the other videos that you missed. So those were available right away.


00:28:56.400 --> 00:28:59.520
I didn't know about it, so maybe advertising it more.


00:28:59.520 --> 00:29:03.160
And also it was a little hard to get to, I gotta say it wasn't,


00:29:03.160 --> 00:29:06.800
it wasn't easy. I, I kind of would like to have,


00:29:06.800 --> 00:29:10.920
like the schedule that you go into if you're logged in,


00:29:10.920 --> 00:29:13.160
and you can see the schedule.


00:29:13.200 --> 00:29:17.020
why not have that be able to just link to the video


00:29:17.020 --> 00:29:19.080
that you missed or something like that?


00:29:19.080 --> 00:29:20.920
I don't know, there's better ways


00:29:20.920 --> 00:29:22.360
to make it a little bit easier.


00:29:22.360 --> 00:29:25.600
It was a little hard to deal with, but it was available.


00:29:25.600 --> 00:29:28.400
And I also think like, for instance,


00:29:28.400 --> 00:29:31.760
going back to "Pike Cascades," I did a talk.


00:29:31.760 --> 00:29:36.760
The recording, the full day one had like glitches


00:29:36.760 --> 00:29:38.160
and had me up there at the beginning


00:29:38.160 --> 00:29:39.520
trying to get the audio ready.


00:29:39.520 --> 00:29:42.040
And there's this getting started stuff,


00:29:42.040 --> 00:29:45.400
Whereas having somebody be able to clean that up a bit


00:29:45.400 --> 00:29:46.240
would be good.


00:29:46.240 --> 00:29:47.640
It's just, I do also,


00:29:47.640 --> 00:29:50.440
but I don't think that this is a long time


00:29:50.440 --> 00:29:55.040
from when PyCon really was to now that's,


00:29:55.040 --> 00:29:55.880
that's what month and a half?


00:29:55.880 --> 00:29:57.000
- I think it's too long.


00:29:57.000 --> 00:29:57.840
- That's too long.


00:29:57.840 --> 00:29:58.660
- Yeah, I think it's too long.


00:29:58.660 --> 00:29:59.500
- So.


00:29:59.500 --> 00:30:01.960
- Last year, 2022 was three months, I believe.


00:30:01.960 --> 00:30:03.040
I mean, it's a long time.


00:30:03.040 --> 00:30:04.200
- And I know it's a lot of work,


00:30:04.200 --> 00:30:06.800
but maybe we could do something,


00:30:06.800 --> 00:30:10.720
either having rough cut ones out there initially,


00:30:10.720 --> 00:30:13.360
or maybe have some of us volunteer.


00:30:13.360 --> 00:30:15.200
I mean, I think we could have some volunteers


00:30:15.200 --> 00:30:18.920
to help clean them up for like good enough for now


00:30:18.920 --> 00:30:20.480
or sort of things.


00:30:20.480 --> 00:30:21.820
I don't know, something.


00:30:21.820 --> 00:30:23.040
- Yeah, I agree.


00:30:23.040 --> 00:30:24.600
We should have made this a whole item, I suppose,


00:30:24.600 --> 00:30:25.440
if we're talking this much.


00:30:25.440 --> 00:30:27.160
Final thought is like with StreamYard,


00:30:27.160 --> 00:30:28.080
I don't know about the other ones.


00:30:28.080 --> 00:30:29.960
You can literally go in before you hit publish,


00:30:29.960 --> 00:30:31.040
you can just say, "Trim this end,"


00:30:31.040 --> 00:30:33.680
and go to click, click, okay, put it on YouTube now.


00:30:33.680 --> 00:30:37.520
And then like, that would be, you know, not very much.


00:30:37.520 --> 00:30:39.440
I agree that you don't want all the setup in that chunk.


00:30:39.440 --> 00:30:44.640
are like welcome i'm brian i'm talking about extensions etc right like straight away and i


00:30:44.640 --> 00:30:48.720
can't get the slides to work and you know yeah exactly i know you want to skip all that crap


00:30:48.720 --> 00:30:59.040
okay um but good news the videos are out and people can check them out okay next uh next next next uh


00:30:59.040 --> 00:31:09.440
couple version updates for Python Python 3 11 4 3 10 12 3 9 17 3 8 17 3 7 17 and


00:31:09.440 --> 00:31:16.320
Importantly 3 12 beta 2 are all out and you might be


00:31:16.320 --> 00:31:24.880
Interested to know that both the 311 and 310 I suppose the others include security fixes. Oh and nice to meet you. Mr


00:31:24.880 --> 00:31:25.840
CVE


00:31:25.840 --> 00:31:27.320
for example


00:31:27.320 --> 00:31:32.960
Some some problems that were solved in open SSL are now included


00:31:32.960 --> 00:31:35.880
There's a one two, three, four five six seven


00:31:35.880 --> 00:31:38.840
eight maybe seven or eight


00:31:38.840 --> 00:31:46.420
CVS that were addressed on open SSL and some URL parsing and you you decode and things that might look


00:31:46.420 --> 00:31:49.960
Like you want to get fixed so check that out and you know upgrade if you can


00:31:49.960 --> 00:31:55.400
Play them bites is already running 311 for so hooray for that by the by set of them. I


00:31:56.400 --> 00:31:59.680
I had a friend say they were working on upgrading to 3.10


00:31:59.680 --> 00:32:01.680
and I'm like, I don't even remember 3.10.


00:32:01.680 --> 00:32:04.640
I've been like on 3.11 for so long.


00:32:04.640 --> 00:32:05.760
Yeah, absolutely.


00:32:05.760 --> 00:32:07.240
Absolutely.


00:32:07.240 --> 00:32:09.160
All right, and then final call.


00:32:09.160 --> 00:32:12.200
Just remember the Python Bytes AMA form.


00:32:12.200 --> 00:32:15.400
Please get out there and submit that one more time.


00:32:15.400 --> 00:32:16.960
Link's in the show notes.


00:32:16.960 --> 00:32:18.120
Yes.


00:32:18.120 --> 00:32:19.560
Yes, right at the top.


00:32:19.560 --> 00:32:20.960
Yes.


00:32:20.960 --> 00:32:22.040
Ready for a joke?


00:32:22.040 --> 00:32:24.520
I am.


00:32:24.520 --> 00:32:27.360
This one comes to us from Ken Van Wick


00:32:27.360 --> 00:32:31.760
and it's a follow on from the apple.com.


00:32:31.760 --> 00:32:36.540
Where's there, there it is, their vision pro.


00:32:36.540 --> 00:32:41.580
Right, yeah, this thing is super expensive.


00:32:41.580 --> 00:32:43.640
It looks really amazing.


00:32:43.640 --> 00:32:45.840
I just, I don't, I've not got faith


00:32:45.840 --> 00:32:47.540
that it's gonna take off.


00:32:47.540 --> 00:32:50.240
But the ability to say like, I wanna sit,


00:32:50.240 --> 00:32:53.120
I wanna stand on the sideline right at the goal line


00:32:53.120 --> 00:32:57.280
at the Super Bowl and be able to look around and watch that as if I was there, like that


00:32:57.280 --> 00:32:59.080
would be epic.


00:32:59.080 --> 00:33:03.760
Is that worth a $3,500 device?


00:33:03.760 --> 00:33:09.000
Now Brian, it's expensive, but did you know, just like the Mac Pro, which was also recently


00:33:09.000 --> 00:33:14.640
announced the Mac Pro, super expensive, $7,000 minimum, but it doesn't come with the wheels.


00:33:14.640 --> 00:33:17.800
If you buy it with the wheels, the wheels are $400 separate, right?


00:33:17.800 --> 00:33:20.200
You have to get the wheel for your case.


00:33:20.200 --> 00:33:22.800
So this is kind of like that.


00:33:22.800 --> 00:33:25.420
- This comes to us from Kim Benwick


00:33:25.420 --> 00:33:29.420
and he says, actually this is Paul Mason's thing.


00:33:29.420 --> 00:33:30.260
So you got,


00:33:30.260 --> 00:33:36.380
so you've got your $3,499 Vision Pro


00:33:36.380 --> 00:33:40.820
and it comes with the Apple branded $899 snorkel.


00:33:40.820 --> 00:33:42.340
(laughing)


00:33:42.340 --> 00:33:43.580
What do you think of that?


00:33:43.580 --> 00:33:44.980
- I think that's cool.


00:33:44.980 --> 00:33:46.100
And actually, - I love it.


00:33:46.100 --> 00:33:47.460
- No, I think, yeah.


00:33:47.460 --> 00:33:49.860
If you could, if this would actually work,


00:33:49.860 --> 00:33:52.260
would work underwater so that you could go back out


00:33:52.260 --> 00:33:55.460
in your swimming pool and you could look like


00:33:55.460 --> 00:33:58.500
you're actually on a coral reef, that'd be cool.


00:33:58.500 --> 00:33:59.500
- That would be awesome.


00:33:59.500 --> 00:34:02.700
Imagine you were in here playing something like Subnautica,


00:34:02.700 --> 00:34:08.780
one of those types of games, which is just amazing.


00:34:08.780 --> 00:34:12.180
Like a game where you're underwater and exploring.


00:34:12.180 --> 00:34:15.700
But in VR with your Apple snorkel on,


00:34:15.700 --> 00:34:16.820
think how real that would be.


00:34:16.820 --> 00:34:19.300
- Yeah, but actually underwater, like,


00:34:19.300 --> 00:34:21.060
but they're probably not. - Yes, exactly.


00:34:21.060 --> 00:34:23.700
- Yeah. (laughs)


00:34:23.700 --> 00:34:24.540
That's pretty cool.


00:34:24.540 --> 00:34:25.540
- Oh boy.


00:34:25.540 --> 00:34:27.220
Well, that's what I got for you all.


00:34:27.220 --> 00:34:30.940
$899 Apple Snorkel, not included.


00:34:30.940 --> 00:34:32.660
- Yeah.


00:34:32.660 --> 00:34:34.700
Cool.


00:34:34.700 --> 00:34:35.520
- All right. - Nice.


00:34:35.520 --> 00:34:36.420
- Well, yeah, very fun.


00:34:36.420 --> 00:34:39.420
Thank you everyone for the active chat in the live stream.


00:34:39.420 --> 00:34:40.980
Thank you for everyone who listened,


00:34:40.980 --> 00:34:42.100
no matter how you listen.


00:34:42.100 --> 00:34:44.420
And Brian, thanks as always.


00:34:44.420 --> 00:34:45.940
- Thank you.

