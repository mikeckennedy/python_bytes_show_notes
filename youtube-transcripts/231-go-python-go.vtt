WEBVTT

00:00:00.000 --> 00:00:04.200
Hello and welcome to Python Bytes.


00:00:04.200 --> 00:00:08.040
This is episode 231 recorded April 28th.


00:00:08.040 --> 00:00:08.640
Is that right?


00:00:08.640 --> 00:00:10.320
Yeah, 2021.


00:00:10.320 --> 00:00:11.720
I'm Brian Okken.


00:00:11.720 --> 00:00:13.120
I'm Michael Kennedy.


00:00:13.120 --> 00:00:15.400
I'm Cecil Philip.


00:00:15.400 --> 00:00:17.000
Yay.


00:00:17.000 --> 00:00:18.080
Hey, welcome.


00:00:18.080 --> 00:00:18.480
Cecil.


00:00:18.480 --> 00:00:20.920
Hey, thanks for having me on.


00:00:20.920 --> 00:00:23.240
It's always good to come back on this podcast.


00:00:23.240 --> 00:00:27.120
This, you know, unbiasedly is probably one of my favorite podcasts to listen to,


00:00:27.120 --> 00:00:27.880
to be honest with you.


00:00:27.880 --> 00:00:29.400
Mine too.


00:00:29.400 --> 00:00:30.240
- Yeah.


00:00:30.240 --> 00:00:31.060
(laughing)


00:00:31.060 --> 00:00:31.900
- Thanks so much.


00:00:31.900 --> 00:00:32.740
(laughing)


00:00:32.740 --> 00:00:34.640
We get to learn so much stuff by studying


00:00:34.640 --> 00:00:36.060
and just getting ready for each week


00:00:36.060 --> 00:00:39.020
and it's always fun to just see the new and exciting.


00:00:39.020 --> 00:00:41.420
Developers, we love the shiny new things, right?


00:00:41.420 --> 00:00:43.720
- Yeah.


00:00:43.720 --> 00:00:44.600
- Absolutely.


00:00:44.600 --> 00:00:46.100
Well, before we jump into the topic,


00:00:46.100 --> 00:00:48.860
I thought maybe we could let Cecil


00:00:48.860 --> 00:00:49.980
introduce himself real quick.


00:00:49.980 --> 00:00:51.300
I know you've been on the show before,


00:00:51.300 --> 00:00:53.180
but it's been a little while.


00:00:53.180 --> 00:00:55.940
- Yeah, it has been a little while since I've been on.


00:00:55.940 --> 00:00:57.620
But hi everyone, I'm Cecil Philip.


00:00:57.620 --> 00:00:59.620
I'm a Cloud Advocate at Microsoft.


00:00:59.620 --> 00:01:03.580
That pretty much just means I spend a lot of time in the community,


00:01:03.580 --> 00:01:06.400
working with different companies and students,


00:01:06.400 --> 00:01:09.080
and just really creating content around


00:01:09.080 --> 00:01:12.660
how developer can start using our tools.


00:01:12.660 --> 00:01:14.020
One of the things that I do,


00:01:14.020 --> 00:01:15.860
Michael is showing you one of


00:01:15.860 --> 00:01:18.480
the pages from our Channel 9 video site.


00:01:18.480 --> 00:01:20.660
I helped run the On.NET show.


00:01:20.660 --> 00:01:23.920
It's not Python, but it is.NET,


00:01:23.920 --> 00:01:27.500
and we do talk about just a lot of different things in the ecosystem.


00:01:27.500 --> 00:01:28.500
So about-


00:01:28.500 --> 00:01:31.300
- You also do Python stuff on some live stream on Twitch


00:01:31.300 --> 00:01:32.140
and so on, right?


00:01:32.140 --> 00:01:34.580
Just not on the official .NET channel.


00:01:34.580 --> 00:01:35.420
- Yeah, yeah, yeah.


00:01:35.420 --> 00:01:37.420
So we do do, the live streaming stuff happens


00:01:37.420 --> 00:01:39.020
on Twitch and YouTube.


00:01:39.020 --> 00:01:41.100
And you could always go back and check out


00:01:41.100 --> 00:01:44.620
like the recordings of those too, if you want.


00:01:44.620 --> 00:01:46.700
- But really quickly, before we jump to Brian's item,


00:01:46.700 --> 00:01:48.360
I do wanna point out on the screen


00:01:48.360 --> 00:01:52.260
that's top level statements that C# has added,


00:01:52.260 --> 00:01:54.740
which is like, let's be more like Python.


00:01:54.740 --> 00:01:57.340
I just think that's kind of interesting thing, right?


00:01:57.340 --> 00:01:59.980
I think with the last set of like in C# 9,


00:01:59.980 --> 00:02:01.460
a lot of the things that came out of


00:02:01.460 --> 00:02:03.900
the last language feature set,


00:02:03.900 --> 00:02:06.220
everyone is just like, "This looks a lot like Python.


00:02:06.220 --> 00:02:08.140
This looks a lot like Python."


00:02:08.140 --> 00:02:12.380
Wait till .NET 6 and C# 10 come out,


00:02:12.380 --> 00:02:14.780
then I'll have to see what you did.


00:02:14.780 --> 00:02:17.140
>> You were going to use the def keyword and all that,


00:02:17.140 --> 00:02:18.980
typing is optional. Got it.


00:02:18.980 --> 00:02:21.620
>> I don't know. We'll see. We'll see what happens.


00:02:21.620 --> 00:02:26.340
>> I might check out C# again if it gets close to Python.


00:02:26.340 --> 00:02:29.500
- I mean, it's not a bad time to jump in.


00:02:29.500 --> 00:02:30.780
- Yeah, yeah.


00:02:30.780 --> 00:02:32.100
It's definitely one of the better languages out there.


00:02:32.100 --> 00:02:33.500
I certainly think so.


00:02:33.500 --> 00:02:34.340
All right, Brian, take us away.


00:02:34.340 --> 00:02:35.740
What's your first item here?


00:02:35.740 --> 00:02:37.900
Are you gonna tell us or else what?


00:02:37.900 --> 00:02:40.540
- (laughs) Yeah, or else.


00:02:40.540 --> 00:02:43.380
So I actually was intrigued by this


00:02:43.380 --> 00:02:46.500
because this is, it's an article called the basic,


00:02:46.500 --> 00:02:48.140
wait, what's the article called?


00:02:48.140 --> 00:02:52.340
For else, a weird but useful feature in Python.


00:02:52.340 --> 00:02:54.980
Plus there's a cute avocado stuffy.


00:02:54.980 --> 00:03:03.220
But I'm not used to using else or break in my Python code.


00:03:03.220 --> 00:03:05.940
I just don't do it that much.


00:03:05.940 --> 00:03:08.580
Yes, hello, birds.


00:03:08.580 --> 00:03:19.420
Interesting article about the else block.


00:03:19.420 --> 00:03:22.660
What it does is if you've got a for loop


00:03:22.660 --> 00:03:26.060
and there's no break inside of it,


00:03:26.060 --> 00:03:27.780
well, then your else will get hit.


00:03:27.780 --> 00:03:32.020
The only way to use else effectively is to maybe have


00:03:32.020 --> 00:03:37.060
a break so that you at some times don't hit it.


00:03:37.060 --> 00:03:40.020
It's still a little confusing to me.


00:03:40.020 --> 00:03:41.820
I was reading more.


00:03:41.820 --> 00:03:44.020
The article goes on about


00:03:44.020 --> 00:03:47.100
talking about some examples where you'd want to do it.


00:03:47.100 --> 00:03:50.860
It does explain, it explains it way better than I just did.


00:03:50.860 --> 00:03:53.100
If you're interested about that, read the article.


00:03:53.100 --> 00:03:57.220
But the explanation of why you would use it,


00:03:57.220 --> 00:04:01.780
my favorite is if you're going to iterate to find an item.


00:04:01.780 --> 00:04:05.340
You would normally maybe use


00:04:05.340 --> 00:04:07.860
a found flag or something to say that you found it.


00:04:07.860 --> 00:04:10.180
You don't need to with this.


00:04:10.180 --> 00:04:12.060
Once you find the item,


00:04:12.060 --> 00:04:17.620
you can break and then you'll hop out,


00:04:17.620 --> 00:04:20.580
and the else block will only get run if you


00:04:20.580 --> 00:04:21.820
did not find the item.


00:04:21.820 --> 00:04:25.220
So that's really pretty much the use case


00:04:25.220 --> 00:04:26.620
that I think is neat.


00:04:26.620 --> 00:04:28.020
- Yeah, I agree with that one.


00:04:28.020 --> 00:04:30.700
And I love the break out of these loops early,


00:04:30.700 --> 00:04:34.900
you know, because we end up so often


00:04:34.900 --> 00:04:37.020
with super indented code, right?


00:04:37.020 --> 00:04:39.140
It's like, if this is true, and if this is true,


00:04:39.140 --> 00:04:40.780
and if this is true, and you could put those


00:04:40.780 --> 00:04:43.400
into a couple of breaks or continues in your loop,


00:04:43.400 --> 00:04:46.740
and then, oh boy, it's nice and flat-ish.


00:04:46.740 --> 00:04:49.700
- Yeah, the other, one of the other use cases


00:04:49.700 --> 00:04:53.820
he brought up was using it with an exception.


00:04:53.820 --> 00:04:57.640
So if you've got an exception,


00:04:57.640 --> 00:05:00.040
try accept block within a for loop


00:05:00.040 --> 00:05:04.440
and you kind of want to know outside


00:05:04.440 --> 00:05:06.620
whether or not any exceptions were caught,


00:05:06.620 --> 00:05:10.040
you can use the else block to find out if you've--


00:05:10.040 --> 00:05:11.180
- Man, I can't get behind that.


00:05:11.180 --> 00:05:14.600
Like I know that's the use case, try this else.


00:05:14.600 --> 00:05:17.440
I can't get behind it.


00:05:17.440 --> 00:05:21.320
It's just, it's too, it's too weird for me to think about.


00:05:21.320 --> 00:05:24.240
I, I would, I just never use it


00:05:24.240 --> 00:05:26.480
because it just seems a little unusual.


00:05:26.480 --> 00:05:29.000
And I know I've talked with some folks on the internet.


00:05:29.000 --> 00:05:31.320
They're like, oh, but this is a way to add


00:05:31.320 --> 00:05:34.240
like a continuation to your try block


00:05:34.240 --> 00:05:36.280
that you won't over catch errors.


00:05:36.280 --> 00:05:38.400
And I'm, yeah, I don't know.


00:05:38.400 --> 00:05:41.080
I hear you, but I, but this, this else one on the loop,


00:05:41.080 --> 00:05:43.720
I could, I can see this as a, you know,


00:05:43.720 --> 00:05:46.040
not too bad compared to found flag.


00:05:46.040 --> 00:05:50.240
And then what I want to express before we leave this is,


00:05:50.240 --> 00:05:51.520
if you're going to either put a,


00:05:51.520 --> 00:05:54.540
I think both break or else, if that's in your code,


00:05:54.540 --> 00:05:56.640
there should be a comment explaining what it does


00:05:56.640 --> 00:05:58.360
because there's a lot of Python developers


00:05:58.360 --> 00:06:00.760
that won't know what's going on.


00:06:00.760 --> 00:06:01.880
So.


00:06:01.880 --> 00:06:03.800
- Yeah. So what do you think?


00:06:03.800 --> 00:06:07.040
- Yeah, I actually really like both of them,


00:06:07.040 --> 00:06:11.000
like both the for else and the try else,


00:06:11.000 --> 00:06:13.320
only because I think about how much code


00:06:13.320 --> 00:06:16.600
would I have had to have written otherwise?


00:06:16.600 --> 00:06:20.200
For me, it just makes those situations a little bit more succinct.


00:06:20.200 --> 00:06:23.440
I completely understand what you're saying because a part of me


00:06:23.440 --> 00:06:26.040
also on the other half is like, well,


00:06:26.040 --> 00:06:29.400
I could just put the rest of the code inside the try block.


00:06:29.400 --> 00:06:31.560
>> Yeah, exactly. Whatever that else is,


00:06:31.560 --> 00:06:34.040
that just continue on. Exactly.


00:06:34.040 --> 00:06:36.840
>> Yeah, my continuation happens in the same block of code.


00:06:36.840 --> 00:06:39.800
I completely understand it from that perspective too.


00:06:39.800 --> 00:06:42.080
I guess I'm 50-50 on it.


00:06:42.080 --> 00:06:43.080
I kind of like it.


00:06:43.080 --> 00:06:46.080
I kind of-- I'm like, well, we could do it another way.


00:06:46.080 --> 00:06:47.280
So I don't know.


00:06:47.280 --> 00:06:47.880
Yeah.


00:06:47.880 --> 00:06:50.640
And just jumping back a tiny bit, Cecil,


00:06:50.640 --> 00:06:53.120
Dean has a bit of foreshadowing for you in the live stream.


00:06:53.120 --> 00:06:55.800
John posted in 2022, looking for PySharp developers


00:06:55.800 --> 00:06:56.920
with 10 years of experience.


00:06:56.920 --> 00:06:58.360
[LAUGHTER]


00:06:58.360 --> 00:07:00.440
Wow.


00:07:00.440 --> 00:07:04.200
And Rob is out there giving a shout out to Brian's birds.


00:07:04.200 --> 00:07:06.200
I don't know how accurate that emoji is,


00:07:06.200 --> 00:07:07.360
but it looks pretty legit.


00:07:07.360 --> 00:07:08.240
That's pretty good.


00:07:08.240 --> 00:07:09.680
Yeah, I got three here.


00:07:09.680 --> 00:07:12.480
So nice.


00:07:12.480 --> 00:07:12.760
All right.


00:07:12.760 --> 00:07:13.840
I think I got the next one.


00:07:13.840 --> 00:07:14.120
Right.


00:07:14.120 --> 00:07:18.000
So let's talk.


00:07:18.000 --> 00:07:18.920
You were done with this one, right?


00:07:18.920 --> 00:07:19.760
And I didn't steal it from you.


00:07:19.760 --> 00:07:21.720
Yeah.


00:07:21.720 --> 00:07:24.040
And I'm going to, I'm going to step out and cover the birds.


00:07:24.040 --> 00:07:24.920
So, okay.


00:07:24.920 --> 00:07:27.760
Well, I'll tell you about the ORM while we're doing that.


00:07:27.760 --> 00:07:33.920
So probably the two most popular ORMs we have out there are Django ORM.


00:07:33.920 --> 00:07:38.120
And if you're, which really only makes sense if you're actually doing Django or


00:07:38.120 --> 00:07:39.340
or SQLAlchemy.


00:07:39.340 --> 00:07:40.700
And those are both really interesting,


00:07:40.700 --> 00:07:43.340
but I wanna give a shout out to TortoiseORM.


00:07:43.340 --> 00:07:46.260
I think these names are always interesting.


00:07:46.260 --> 00:07:48.120
Like naming things is hard.


00:07:48.120 --> 00:07:51.180
I always think of databases and database libraries


00:07:51.180 --> 00:07:53.020
to be awesome if they're fast,


00:07:53.020 --> 00:07:55.420
and less awesome if they're slow,


00:07:55.420 --> 00:07:58.060
but Tortoise doesn't scream speedy.


00:07:58.060 --> 00:08:00.420
But I think you should think of it more in the speedy side


00:08:00.420 --> 00:08:05.420
because it's primarily an asyncio object relational mapper


00:08:07.140 --> 00:08:08.100
inspired by Django.


00:08:08.100 --> 00:08:10.620
So if you were like, I love what Django does,


00:08:10.620 --> 00:08:14.740
but what I really want is an async version of that,


00:08:14.740 --> 00:08:16.820
Tortoise ORM is a really good example.


00:08:16.820 --> 00:08:19.760
And it uses the active record design pattern


00:08:19.760 --> 00:08:24.500
instead of unit of work, which SQLAlchemy uses.


00:08:24.500 --> 00:08:25.340
So it's pretty neat.


00:08:25.340 --> 00:08:26.700
They have a bunch of performance stuff.


00:08:26.700 --> 00:08:28.340
And I really like that they show the performance


00:08:28.340 --> 00:08:30.180
against many different ORMs,


00:08:30.180 --> 00:08:31.740
not just Django and SQLAlchemy,


00:08:31.740 --> 00:08:34.540
but other ones like Pony and PeeWee


00:08:34.540 --> 00:08:35.860
and a lot of different use cases.


00:08:35.860 --> 00:08:38.320
You can get a sense, it's pretty fast, it's not raging fast,


00:08:38.320 --> 00:08:43.040
but it's async, so that's a really, really good option there.


00:08:43.040 --> 00:08:46.860
Super simple to use.


00:08:46.860 --> 00:08:49.020
When you install it, you typically need to install


00:08:49.020 --> 00:08:51.520
the underlying database driver that it's gonna use.


00:08:51.520 --> 00:08:54.640
So if you're gonna use it with Postgres,


00:08:54.640 --> 00:08:56.240
you install async-pg.


00:08:56.240 --> 00:08:57.360
If you're gonna use it with MySQL,


00:08:57.360 --> 00:09:01.280
you install aio-mysql and so on along with it.


00:09:01.280 --> 00:09:03.460
But if you look at the code, it's super simple.


00:09:03.460 --> 00:09:05.900
And if you're familiar with Django,


00:09:05.900 --> 00:09:10.220
you go and create the fields as members of a class


00:09:10.220 --> 00:09:12.860
equal to some descriptor like fields.inField


00:09:12.860 --> 00:09:17.860
or field.textField, set them to have indexes and so on.


00:09:17.860 --> 00:09:21.380
What's really nice is there's like really good modeling


00:09:21.380 --> 00:09:22.540
of relationships.


00:09:22.540 --> 00:09:24.820
So there's like fields.foreignKeyField,


00:09:24.820 --> 00:09:26.900
fields.minitominifield,


00:09:26.900 --> 00:09:30.260
and it talks about the relations and so on.


00:09:30.260 --> 00:09:32.440
So yeah, this is a really nice ORM.


00:09:32.440 --> 00:09:35.240
If you're looking for something async that is like Django,


00:09:35.240 --> 00:09:36.080
give this a shot.


00:09:36.080 --> 00:09:36.960
It's pretty popular.


00:09:36.960 --> 00:09:40.880
It has almost 2000 GitHub stars, was updated two days ago.


00:09:40.880 --> 00:09:44.120
So yeah, it seems like a nice, happy project.


00:09:44.120 --> 00:09:46.160
- This looks pretty cool.


00:09:46.160 --> 00:09:48.240
When you were showing that installation section just now,


00:09:48.240 --> 00:09:52.260
so you still have to install like the async versions of,


00:09:52.260 --> 00:09:54.180
I guess that particular database is driver.


00:09:54.180 --> 00:09:58.360
So async MySQL, async Postgres and things of that nature.


00:09:58.360 --> 00:09:59.720
So I'm guessing what this adds,


00:09:59.720 --> 00:10:01.160
kind of like what you said is that,


00:10:01.160 --> 00:10:03.440
that active record programming model, right?


00:10:03.440 --> 00:10:06.120
Like, so if you want to write your code, that's well,


00:10:06.120 --> 00:10:06.960
you know what I mean?


00:10:06.960 --> 00:10:08.480
I can write it and then now I could just switch,


00:10:08.480 --> 00:10:10.800
swap out the database driver and I could point


00:10:10.800 --> 00:10:13.600
to a different database implementation if I wanted to.


00:10:13.600 --> 00:10:14.560
- Yeah, exactly.


00:10:14.560 --> 00:10:16.120
I think it does two things.


00:10:16.120 --> 00:10:18.520
One is, you know, there's always like database dialects,


00:10:18.520 --> 00:10:20.480
like how do you express parameters?


00:10:20.480 --> 00:10:23.200
Question mark or at parameter name or whatever, right?


00:10:23.200 --> 00:10:24.640
I think it handles that.


00:10:24.640 --> 00:10:27.280
And then a lot of those drivers, they're async,


00:10:27.280 --> 00:10:29.240
but they only work in raw SQL.


00:10:29.240 --> 00:10:32.880
So select star from such and such and so on.


00:10:32.880 --> 00:10:36.760
So this just gives you the ORM wrapper on top of it.


00:10:36.760 --> 00:10:41.120
But I think it does this dependency thing


00:10:41.120 --> 00:10:43.320
because otherwise it would have to install


00:10:43.320 --> 00:10:45.000
every driver it supports.


00:10:45.000 --> 00:10:47.000
That would be a hassle, right?


00:10:47.000 --> 00:10:47.840
'Cause you only want one.


00:10:47.840 --> 00:10:49.800
- Yeah, that would be a little messy.


00:10:49.800 --> 00:10:51.240
- Yeah, why does it take so long to install?


00:10:51.240 --> 00:10:54.040
Well, it's installing every database driver it can think of.


00:10:54.040 --> 00:10:55.320
No, this is pretty cool, I like it.


00:10:55.320 --> 00:10:57.080
Brian, what do you think?


00:10:57.080 --> 00:10:58.800
- Actually, I think it's pretty great.


00:10:58.800 --> 00:11:03.960
And I was actually starting to look at an ORM for a new project.


00:11:03.960 --> 00:11:05.880
So I might check this out.


00:11:05.880 --> 00:11:06.920
Yeah, I like it pretty well.


00:11:06.920 --> 00:11:09.440
It's got some really simple ways to program it.


00:11:09.440 --> 00:11:14.000
You can create one of these objects, and then you just await tournament.save,


00:11:14.000 --> 00:11:18.920
if it's a tournament in this case, or it has a factory create method.


00:11:18.920 --> 00:11:21.840
For queries, you go do some kind of query,


00:11:21.840 --> 00:11:25.480
and then you just await a class.filter type of thing.


00:11:25.480 --> 00:11:27.400
And it even does the join, so you don't end up


00:11:27.400 --> 00:11:29.880
n plus one performance problems.


00:11:29.880 --> 00:11:31.800
One thing I guess I would throw out there is


00:11:31.800 --> 00:11:35.160
it seems to me like this is 100% async.


00:11:35.160 --> 00:11:36.520
So if you're gonna use it,


00:11:36.520 --> 00:11:39.160
you have to create an event loop and just run it in there.


00:11:39.160 --> 00:11:41.680
And if your app is not very asynchy,


00:11:41.680 --> 00:11:43.320
then it might be kind of a hassle to use.


00:11:43.320 --> 00:11:44.920
I'm not totally sure about that.


00:11:44.920 --> 00:11:47.920
It used to be that there were these wrappers


00:11:47.920 --> 00:11:51.480
you could get that would take non-async libraries


00:11:51.480 --> 00:11:53.000
and database libraries and stuff


00:11:53.000 --> 00:11:54.760
and make them async by putting them on threads.


00:11:54.760 --> 00:11:56.920
I can see a world where we get back to wrappers


00:11:56.920 --> 00:11:58.820
that make them sync so they're easier to use


00:11:58.820 --> 00:12:00.320
if you don't want to do async.


00:12:00.320 --> 00:12:02.200
- Yeah, anyway.


00:12:02.200 --> 00:12:03.260
- I know one thing for me that's always been


00:12:03.260 --> 00:12:05.100
a little challenging is when you have


00:12:05.100 --> 00:12:07.780
like these async database things,


00:12:07.780 --> 00:12:09.460
like how do I test them?


00:12:09.460 --> 00:12:10.300
You know what I mean?


00:12:10.300 --> 00:12:11.780
I always find like testing,


00:12:11.780 --> 00:12:13.860
at least when it comes to unit testing,


00:12:13.860 --> 00:12:18.860
testing asyncio things is relatively non-trivial.


00:12:18.860 --> 00:12:20.100
You know what I mean?


00:12:20.100 --> 00:12:21.900
Like I have a thing that uses motor,


00:12:21.900 --> 00:12:25.020
like so the MongoDB async library,


00:12:25.020 --> 00:12:30.020
And I'm using FastAPI and FastAPI does this injection thing.


00:12:30.020 --> 00:12:31.020
- Right.


00:12:31.020 --> 00:12:33.900
- My code is clean 'cause I'm separating concerns


00:12:33.900 --> 00:12:35.140
and doing all this thing.


00:12:35.140 --> 00:12:36.180
Man, how do I test?


00:12:36.180 --> 00:12:38.540
- Exactly.


00:12:38.540 --> 00:12:41.740
Brian, do you got any advice on testing async things?


00:12:41.740 --> 00:12:42.820
- Well, I don't right now,


00:12:42.820 --> 00:12:44.820
but I think that'd be a great topic to explore


00:12:44.820 --> 00:12:47.780
and try to get some people on the podcast.


00:12:47.780 --> 00:12:49.060
- Yeah, yeah, I agree.


00:12:49.060 --> 00:12:51.420
I think there's a PI test.


00:12:51.420 --> 00:12:52.980
- If you ever write a part two of your book,


00:12:52.980 --> 00:12:53.940
I'd love to see it.


00:12:53.940 --> 00:13:00.500
Well, there's a second edition coming out, but it doesn't include async.


00:13:00.500 --> 00:13:03.060
It hasn't published yet, has it?


00:13:03.060 --> 00:13:05.180
There's still time for another chapter.


00:13:05.180 --> 00:13:09.020
There you go.


00:13:09.020 --> 00:13:17.300
Jumping back, I did see that Brett Cannon had an interesting comment about the else


00:13:17.300 --> 00:13:18.300
clause.


00:13:18.300 --> 00:13:23.780
One of the benefits is that it makes you look like a Python expert in code reviews when


00:13:23.780 --> 00:13:25.580
and you suggest people use it.


00:13:25.580 --> 00:13:30.100
So I think that's funny.


00:13:30.100 --> 00:13:31.220
- Yeah, that is funny.


00:13:31.220 --> 00:13:36.380
Yeah, a lot of thoughts here on the else clause.


00:13:36.380 --> 00:13:37.660
I do think it's one of these things.


00:13:37.660 --> 00:13:38.700
It's a little unusual.


00:13:38.700 --> 00:13:40.220
Like a lot of languages have like,


00:13:40.220 --> 00:13:41.680
oh, we all have the while loop.


00:13:41.680 --> 00:13:42.580
We all have the for loop.


00:13:42.580 --> 00:13:43.460
We all have statements.


00:13:43.460 --> 00:13:44.700
They all look like this.


00:13:44.700 --> 00:13:46.140
And this is kind of a little bit different.


00:13:46.140 --> 00:13:47.540
So it's kind of interesting.


00:13:47.540 --> 00:13:50.340
All right, cool.


00:13:50.340 --> 00:13:52.100
Cecil, you're up next, right?


00:13:52.100 --> 00:13:53.180
- Yeah, I am.


00:13:53.180 --> 00:13:57.460
I ran into this post about Faster Python with Go Shared Objects,


00:13:57.460 --> 00:14:00.740
which I thought was a really interesting read.


00:14:00.740 --> 00:14:05.900
Mainly for me, I'm really into language interop.


00:14:05.900 --> 00:14:07.900
The fast part is cool when I get it.


00:14:07.900 --> 00:14:10.760
Fast is always a relative thing that we could consider,


00:14:10.760 --> 00:14:12.820
what do we really consider to be fast or not?


00:14:12.820 --> 00:14:15.580
But it's always interesting for me to see how we can


00:14:15.580 --> 00:14:18.540
take one language and another and plug them together.


00:14:18.540 --> 00:14:24.780
because I'm a big believer in let the thing do what it's best at.


00:14:24.780 --> 00:14:28.100
For instance, Python is really good at doing certain things,


00:14:28.100 --> 00:14:30.920
let Python do that, or Go is really good at doing certain things,


00:14:30.920 --> 00:14:34.580
let Go do that, but now how do we plug these worlds together?


00:14:34.580 --> 00:14:38.860
This arrow goes through talking about how within Go,


00:14:38.860 --> 00:14:42.080
you can create these things called shared libraries.


00:14:42.080 --> 00:14:47.060
I believe what it does is that it outputs a .so file or a .dll file.


00:14:47.060 --> 00:14:47.820
>> Yeah.


00:14:47.820 --> 00:14:51.120
Based on that in Python, you could use something like C types.


00:14:51.120 --> 00:14:55.400
This article actually even references something called CFFI.


00:14:55.400 --> 00:14:56.860
I've never heard about CFFI.


00:14:56.860 --> 00:14:58.740
I don't know if you all have spoken about it before.


00:14:58.740 --> 00:15:03.700
>> Yeah, it's a more modern interop layer between C libraries.


00:15:03.700 --> 00:15:05.060
>> Yeah, I think they mentioned it.


00:15:05.060 --> 00:15:06.620
>> Yeah, right there.


00:15:06.620 --> 00:15:09.700
>> Yeah. It mentions using things like CFFI, for instance,


00:15:09.700 --> 00:15:12.660
to be able to load some of these files and do interop,


00:15:12.660 --> 00:15:14.980
which I think is actually pretty cool.


00:15:14.980 --> 00:15:18.200
It does also talk about some of the pros and cons,


00:15:18.200 --> 00:15:20.160
which I think are very important to discuss.


00:15:20.160 --> 00:15:21.520
For instance, this says, well,


00:15:21.520 --> 00:15:25.160
it's really good if you're just passing around primitive types.


00:15:25.160 --> 00:15:27.720
But now when you want to pass around more complex types


00:15:27.720 --> 00:15:30.680
like dictionaries and classes and things of that nature,


00:15:30.680 --> 00:15:33.360
then it becomes a little bit more tricky to do.


00:15:33.360 --> 00:15:35.400
But again, just in terms of,


00:15:35.400 --> 00:15:39.320
hey, I have this thing that I want to pass on to Go.


00:15:39.320 --> 00:15:42.960
Maybe Go runs it in the background or runs


00:15:42.960 --> 00:15:46.800
this microservice thing that does Docker and Kubernetes


00:15:46.800 --> 00:15:48.080
or whatever the case is.


00:15:48.080 --> 00:15:50.820
We could leverage both ecosystems to, again,


00:15:50.820 --> 00:15:52.200
have them do what they're good at


00:15:52.200 --> 00:15:53.880
and just plug them together.


00:15:53.880 --> 00:15:55.680
So I think this is a pretty cool read.


00:15:55.680 --> 00:15:57.080
I'd love to hear what folks think about it


00:15:57.080 --> 00:15:59.080
after they read through it.


00:15:59.080 --> 00:16:00.800
- Yeah, I think it looks really interesting.


00:16:00.800 --> 00:16:04.720
One of the powers of Python is this interoperability,


00:16:04.720 --> 00:16:06.960
mostly around C, but also other things,


00:16:06.960 --> 00:16:10.040
like weird things like Fortran and so on.


00:16:10.040 --> 00:16:12.360
People say, "Oh, well, doing math with Python


00:16:12.360 --> 00:16:14.920
is super slow relative to C++ or whatever.


00:16:14.920 --> 00:16:19.320
And yet data science is so popular where it's almost all math, right?


00:16:19.320 --> 00:16:23.320
How do you square these two things? How do you make them work?


00:16:23.320 --> 00:16:25.320
And it's because a lot of that gets pushed down


00:16:25.320 --> 00:16:28.840
into some more native layer, like a C layer.


00:16:28.840 --> 00:16:30.840
You just hand off the data and then zip it.


00:16:30.840 --> 00:16:32.120
The real work happens there.


00:16:32.120 --> 00:16:36.600
And this seems like another really cool way to do that, right?


00:16:36.600 --> 00:16:38.600
Something that works really well in Go,


00:16:38.600 --> 00:16:42.600
write a package, wrap up the Go bits, put them in a wheel,


00:16:42.600 --> 00:16:45.100
pip install them, and people don't have to know.


00:16:45.100 --> 00:16:48.940
It's also not just what the language can do best,


00:16:48.940 --> 00:16:50.600
it's what the developers can do best.


00:16:50.600 --> 00:16:54.100
And if you've got somebody that's really good at Go


00:16:54.100 --> 00:16:56.100
working on part of the problem,


00:16:56.100 --> 00:16:58.600
being able to connect them together is a good idea.


00:16:58.600 --> 00:17:03.600
I think that we're far away from the time


00:17:03.600 --> 00:17:07.600
where people just had one language that they knew anyway.


00:17:07.600 --> 00:17:24.600
And I don't know if we ever were there, but definitely, you know, when early in my career, there were some C++ developers that that's all they knew a little, a little shell scripting, but I don't find that anymore. And I think most Python developers know some other language as well.


00:17:24.600 --> 00:17:28.340
- Yeah, like CSS, they typically program in CSS.


00:17:28.340 --> 00:17:31.080
No, that's just the bad, that's what the bad surveys ask.


00:17:31.080 --> 00:17:31.920
No, but you're right.


00:17:31.920 --> 00:17:35.360
And it's also not just about knowing the language,


00:17:35.360 --> 00:17:36.940
it's about, well, we've spent two years


00:17:36.940 --> 00:17:39.560
building this other library and it works.


00:17:39.560 --> 00:17:41.000
Can we just use that over here?


00:17:41.000 --> 00:17:43.320
I like this interop for just reuse


00:17:43.320 --> 00:17:45.200
is really powerful as well.


00:17:45.200 --> 00:17:46.840
- Yeah, definitely.


00:17:46.840 --> 00:17:49.400
- Yeah, I was found when I was growing up,


00:17:49.400 --> 00:17:51.120
when I went through college,


00:17:51.120 --> 00:17:52.640
my professors always told me


00:17:52.640 --> 00:17:56.960
Any good programmer knows three or four different languages.


00:17:56.960 --> 00:17:59.320
That's what they kept drilling into us.


00:17:59.320 --> 00:18:02.160
It's funny, we always talked about learning different languages,


00:18:02.160 --> 00:18:05.400
but we never ever spoke about putting them together.


00:18:05.400 --> 00:18:07.120
Kind of like what you were saying,


00:18:07.120 --> 00:18:08.920
I feel like that's where we are.


00:18:08.920 --> 00:18:11.840
No one knows one language.


00:18:11.840 --> 00:18:13.920
No one that works in a company in


00:18:13.920 --> 00:18:16.860
a really productive ecosystem does one thing.


00:18:16.860 --> 00:18:19.360
You probably know some JavaScript and some Python


00:18:19.360 --> 00:18:22.400
and some Go and Rust and SQL.


00:18:22.400 --> 00:18:24.160
like there's stuff in there.


00:18:24.160 --> 00:18:26.040
But how do we put that stuff together


00:18:26.040 --> 00:18:29.440
in a very clean and like maintainable way?


00:18:29.440 --> 00:18:31.400
- Yeah, another thing, you know,


00:18:31.400 --> 00:18:34.140
thinking back to the times when we were all in college,


00:18:34.140 --> 00:18:36.600
so much of what we did was like really low level,


00:18:36.600 --> 00:18:39.300
like, oh, I need to load this file.


00:18:39.300 --> 00:18:42.760
So I got to write the binary bits to parse this file, right?


00:18:42.760 --> 00:18:44.980
It was like super low level and it took a long time.


00:18:44.980 --> 00:18:46.760
And these days it's more about Lego blocks,


00:18:46.760 --> 00:18:48.400
get this thing, that thing, click them together


00:18:48.400 --> 00:18:50.320
and make that piece go over there, right?


00:18:50.320 --> 00:18:53.200
And this whole interop for that is also,


00:18:53.200 --> 00:18:54.840
you know, makes sense in that world.


00:18:54.840 --> 00:18:58.800
- Yeah.


00:18:58.800 --> 00:19:04.840
Well, we have some,


00:19:04.840 --> 00:19:07.960
you have some cool, I want to plug your stuff.


00:19:07.960 --> 00:19:08.920
So we don't have a sponsor.


00:19:08.920 --> 00:19:09.760
- Okay.


00:19:09.760 --> 00:19:10.580
- So we'll plug your entry.


00:19:10.580 --> 00:19:11.440
- Yeah, okay, so yeah.


00:19:11.440 --> 00:19:12.280
Thanks, man.


00:19:12.280 --> 00:19:13.100
I appreciate it.


00:19:13.100 --> 00:19:15.840
Yeah, well, let me, I'll be specific about something.


00:19:15.840 --> 00:19:17.920
Something that I think if you dug


00:19:17.920 --> 00:19:18.880
through the course catalog,


00:19:18.880 --> 00:19:20.520
there's a little coming soon graphic,


00:19:20.520 --> 00:19:21.880
but people probably don't know is


00:19:21.880 --> 00:19:24.720
we're about to release a course on Dask.


00:19:24.720 --> 00:19:28.320
So Dask is a way to do like pandas type stuff.


00:19:28.320 --> 00:19:30.640
But if it needs to load 10 terabytes of data


00:19:30.640 --> 00:19:32.640
and it won't fit even on your hard drive,


00:19:32.640 --> 00:19:36.760
or you wanna run it across 16 cores on your machine,


00:19:36.760 --> 00:19:39.480
across 10 machines, you just write pandas code,


00:19:39.480 --> 00:19:41.200
but you point it somewhere else


00:19:41.200 --> 00:19:43.240
and it just parallelizes that beautifully


00:19:43.240 --> 00:19:44.440
with this cool little dashboard.


00:19:44.440 --> 00:19:46.840
So anyway, there's a free course coming on Dask


00:19:46.840 --> 00:19:48.940
that people will be able to take really, really soon.


00:19:48.940 --> 00:19:49.780
That'd be fun.


00:19:49.780 --> 00:19:50.620
- No, it's good.


00:19:50.620 --> 00:19:52.680
I think everybody should check out your course catalog.


00:19:52.680 --> 00:19:54.040
And one of the best things that happened


00:19:54.040 --> 00:19:56.180
to the Python community was when you quit


00:19:56.180 --> 00:19:59.400
your full-time job and started working on this full-time.


00:19:59.400 --> 00:20:01.940
- Thanks, a short four or five years ago.


00:20:01.940 --> 00:20:04.960
It's awesome, it's crazy it's been so long.


00:20:04.960 --> 00:20:06.520
- I definitely concur with that.


00:20:06.520 --> 00:20:08.120
I'm curious about DAS too,


00:20:08.120 --> 00:20:11.040
'cause I remember you all speaking about it


00:20:11.040 --> 00:20:13.940
in a previous podcast and I always wondered,


00:20:13.940 --> 00:20:16.040
oh wow, is this only for pandas


00:20:16.040 --> 00:20:19.800
or can I use Dask to just run remote Python


00:20:19.800 --> 00:20:20.640
anywhere I want?


00:20:20.640 --> 00:20:21.960
- I think you can actually,


00:20:21.960 --> 00:20:25.080
I do think you can make it run remote Python.


00:20:25.080 --> 00:20:28.720
The simple use case is sort of import something different


00:20:28.720 --> 00:20:31.200
that looks like pandas and use it, you know?


00:20:31.200 --> 00:20:32.520
But I think there's a way,


00:20:32.520 --> 00:20:34.760
there's like a lower level set of libraries


00:20:34.760 --> 00:20:36.000
that do that orchestration.


00:20:36.000 --> 00:20:37.040
You probably could use,


00:20:37.040 --> 00:20:38.800
I'm trying to remember a mixture that's the right one,


00:20:38.800 --> 00:20:40.840
but I think that's what Matthew Rockland


00:20:40.840 --> 00:20:43.080
pointed out when we were talking about it.


00:20:43.080 --> 00:20:45.040
So yeah, quite cool.


00:20:45.040 --> 00:20:49.960
Yeah, that would make for me makes Python really interesting from a distributed systems perspective.


00:20:49.960 --> 00:20:56.760
Yeah, I mean, we think about like containers and multiple VM's and even just talking across boundaries of networks, right?


00:20:56.760 --> 00:20:57.760
Yeah.


00:20:57.760 --> 00:21:02.160
Yeah, and just being able to import my library and run it. You know what I mean?


00:21:02.160 --> 00:21:03.520
Yeah, absolutely.


00:21:03.520 --> 00:21:06.520
Super cool. Alright, Brian, you got the next one?


00:21:06.520 --> 00:21:09.840
Yeah. So speaking of learning to code,


00:21:09.840 --> 00:21:14.120
As you go on with your learning to code,


00:21:14.120 --> 00:21:15.240
there's tutorials and stuff,


00:21:15.240 --> 00:21:18.440
but then you want to get into really finding out how things,


00:21:18.440 --> 00:21:21.560
people are really solving problems all over the place.


00:21:21.560 --> 00:21:25.240
A great discussion around that is to,


00:21:25.240 --> 00:21:28.120
and good recommendations is to just go read some code.


00:21:28.120 --> 00:21:29.920
You need to read a lot of code.


00:21:29.920 --> 00:21:32.760
There's problems with that though.


00:21:32.760 --> 00:21:35.780
This is an interesting article I'm going to link to.


00:21:35.780 --> 00:21:38.000
Learning to read code, Python,


00:21:38.000 --> 00:21:42.340
standard library design decisions explained for advanced beginners.


00:21:42.340 --> 00:21:45.220
That's an interesting term, advanced beginners.


00:21:45.220 --> 00:21:48.420
There's an interesting discussion around this.


00:21:48.420 --> 00:21:49.780
The standard library is there,


00:21:49.780 --> 00:21:51.400
so that's a great thing to go look at.


00:21:51.400 --> 00:21:55.420
It's available and all of it's there,


00:21:55.420 --> 00:21:56.640
so you can read all of it.


00:21:56.640 --> 00:21:58.500
But there's some interesting caveats,


00:21:58.500 --> 00:22:01.740
and both good and bad.


00:22:01.740 --> 00:22:02.940
There's pros and cons.


00:22:02.940 --> 00:22:05.220
One of the pros is all the peps are around,


00:22:05.220 --> 00:22:07.260
so you can read the design decisions of


00:22:07.260 --> 00:22:09.760
why things are the way they are,


00:22:09.760 --> 00:22:13.160
and some of the history and what problem they're trying to solve.


00:22:13.160 --> 00:22:16.160
That's actually an incredible benefit because


00:22:16.160 --> 00:22:20.760
I don't even get that with internal code often with a company.


00:22:20.760 --> 00:22:24.860
It's often just the code that was left to me that I have to maintain.


00:22:24.860 --> 00:22:26.560
So this is kind of neat.


00:22:26.560 --> 00:22:29.760
And usually it was done just enough to work and then we're done with it.


00:22:29.760 --> 00:22:31.560
Yeah.


00:22:31.560 --> 00:22:35.660
And Python gets to improve on itself, which is nice.


00:22:35.660 --> 00:22:40.780
The downside is there's a lot of it and a lot of it's really old.


00:22:40.780 --> 00:22:43.320
So there's some code in there from 10 to 20 years ago,


00:22:43.320 --> 00:22:48.260
and what's Pythonic now might not have been Pythonic then.


00:22:48.260 --> 00:22:50.780
So maybe not best practices.


00:22:50.780 --> 00:22:52.460
I don't know this firsthand,


00:22:52.460 --> 00:22:54.720
but this is a comment from the article.


00:22:54.720 --> 00:22:56.820
So I think that's fair.


00:22:56.820 --> 00:22:59.940
Also, you don't really want to learn.


00:22:59.940 --> 00:23:03.440
This isn't necessarily from the Python Center library,


00:23:03.440 --> 00:23:08.080
but just picking some thing that you use on GitHub,


00:23:08.080 --> 00:23:10.240
it could be incredibly useful.


00:23:10.240 --> 00:23:12.140
It doesn't mean that it's coded well though,


00:23:12.140 --> 00:23:14.640
so it might not be a good example for coding.


00:23:14.640 --> 00:23:20.600
The author has three or four different standard libraries


00:23:20.600 --> 00:23:24.220
that he recommends, which is pretty interesting.


00:23:24.220 --> 00:23:28.660
The statistics module, he says the code is simple,


00:23:28.660 --> 00:23:31.760
and it's fairly well-documented.


00:23:31.760 --> 00:23:33.600
- And the PEP describes-- - I think it's also pretty new,


00:23:33.600 --> 00:23:36.200
which is kind of a-- - Oh, really?


00:23:36.200 --> 00:23:38.000
- I think, I'm not sure when the statistics for that,


00:23:38.000 --> 00:23:40.000
but it was added, it didn't come originally,


00:23:40.000 --> 00:23:41.840
and it's been added after a while.


00:23:41.840 --> 00:23:43.880
- But there's other things around


00:23:43.880 --> 00:23:46.820
that people use statistics for, use for statistics.


00:23:46.820 --> 00:23:50.760
So there's, the PEP apparently talks about design decisions


00:23:50.760 --> 00:23:53.280
about not trying to re-implement NumPy


00:23:53.280 --> 00:23:56.600
or something like that within the standard library,


00:23:56.600 --> 00:23:58.560
but just have basic statistics.


00:23:58.560 --> 00:24:01.560
3.4, by the way, is when statistics showed up.


00:24:01.560 --> 00:24:02.560
Oh, yeah.


00:24:02.560 --> 00:24:04.560
So it's not that old, right?


00:24:04.560 --> 00:24:07.560
And actually, the next two are fairly recent as well.


00:24:07.560 --> 00:24:12.560
Pathlib is recommended because it's extremely well documented.


00:24:12.560 --> 00:24:18.560
And it's a good object-oriented example.


00:24:18.560 --> 00:24:21.560
There's not a lot of object-oriented examples out there in Python


00:24:21.560 --> 00:24:23.560
because a lot of people don't use it.


00:24:23.560 --> 00:24:24.560
So that's good.


00:24:24.560 --> 00:24:28.560
Also, a nice comparative study because we already had OSPath,


00:24:28.560 --> 00:24:32.060
so you can look at how OSPath solved it versus Pathlib


00:24:32.060 --> 00:24:34.360
solving the same problem. That's kind of neat.


00:24:34.360 --> 00:24:42.560
Data classes is apparently very well documented.


00:24:42.560 --> 00:24:44.720
And I'm not sure what else I was going to say


00:24:44.720 --> 00:24:47.420
because I wrote down it's a good example of data classes.


00:24:47.420 --> 00:24:49.020
That doesn't make sense, but...


00:24:49.020 --> 00:24:53.420
It may be the very best example of data classes implementation.


00:24:53.500 --> 00:24:54.220
>> Yeah.


00:24:54.220 --> 00:24:55.380
>> Or the only.


00:24:55.380 --> 00:24:59.860
>> Then GraphLib, which says it's a bonus,


00:24:59.860 --> 00:25:03.060
but it's interesting because it does one thing.


00:25:03.060 --> 00:25:06.940
It's an implementation of a topological sort algorithm,


00:25:06.940 --> 00:25:09.860
which I'm not exactly 100 percent sure what that is,


00:25:09.860 --> 00:25:12.180
but it's a narrow problem.


00:25:12.180 --> 00:25:14.860
There's no PEP, but apparently there's


00:25:14.860 --> 00:25:20.180
an issue that the article links to with a long thread discretion.


00:25:20.180 --> 00:25:22.340
The interesting thing about this isn't


00:25:22.340 --> 00:25:24.740
the discussion about how it should be implemented,


00:25:24.740 --> 00:25:27.860
it's the discussion of what the API should look like.


00:25:27.860 --> 00:25:32.260
So how it should be used from a user perspective.


00:25:32.260 --> 00:25:34.380
That actually seems fascinating to me


00:25:34.380 --> 00:25:36.980
because I think we need to talk about that more.


00:25:36.980 --> 00:25:43.780
People, how designing APIs and coming to terms with that


00:25:43.780 --> 00:25:47.780
is almost more important than what the code looks like.


00:25:47.780 --> 00:25:49.940
Because you have to live with the API,


00:25:49.940 --> 00:25:52.220
you can change the code later if you need to.


00:25:52.220 --> 00:25:53.340
- Yeah, that's a good point.


00:25:53.340 --> 00:25:54.860
'Cause you can refactor internally,


00:25:54.860 --> 00:25:57.300
but yeah, the API you're stuck with,


00:25:57.300 --> 00:25:59.260
unless you're like one of the packages I use


00:25:59.260 --> 00:26:01.060
for security on the website today,


00:26:01.060 --> 00:26:03.660
that just completely changed a bunch of the module names


00:26:03.660 --> 00:26:05.440
and sub modules and move classes around.


00:26:05.440 --> 00:26:10.440
And then my website in dev, not in production,


00:26:10.440 --> 00:26:11.940
wouldn't start after I updated it.


00:26:11.940 --> 00:26:13.860
I'm like, well, I don't understand,


00:26:13.860 --> 00:26:15.580
shouldn't there be at least a deprecation warning


00:26:15.580 --> 00:26:16.700
for a little bit or something?


00:26:16.700 --> 00:26:18.140
Nope. - Yeah.


00:26:18.140 --> 00:26:18.960
- Oh, well.


00:26:18.960 --> 00:26:21.300
So what do you think?


00:26:21.300 --> 00:26:25.420
>> I'm sorry. I was going to say,


00:26:25.420 --> 00:26:28.000
one of the things I really like about articles like this is,


00:26:28.000 --> 00:26:31.580
we often talk about the beginner path,


00:26:31.580 --> 00:26:33.580
how do I get started with a thing?


00:26:33.580 --> 00:26:38.680
But after we've brought all these beginners together,


00:26:38.680 --> 00:26:41.360
how do I take you from beginner plus plus?


00:26:41.360 --> 00:26:43.560
What is the next step look like?


00:26:43.560 --> 00:26:47.640
You always hear folks talk about just you got to read code,


00:26:47.640 --> 00:26:49.420
like go to GitHub and click


00:26:49.420 --> 00:26:52.020
browse and just dig around projects that you're interested in


00:26:52.020 --> 00:26:53.820
and things you want to learn about and just


00:26:53.820 --> 00:26:55.980
try and understand how it works.


00:26:55.980 --> 00:26:57.740
If you want to understand how Flask works,


00:26:57.740 --> 00:27:00.140
if you want to see how folks use different things in


00:27:00.140 --> 00:27:02.460
FastAPI or Django or even Tortoise


00:27:02.460 --> 00:27:04.460
that Michael was showing a little while ago.


00:27:04.460 --> 00:27:07.340
It's open source and that's the beauty about it.


00:27:07.340 --> 00:27:10.300
You could just go on GitHub and just read the code.


00:27:10.300 --> 00:27:14.540
Then change it on your machine and see what it does.


00:27:14.540 --> 00:27:15.900
See, does it get faster?


00:27:15.900 --> 00:27:19.020
Is it slower? Is it more or less readable?


00:27:19.020 --> 00:27:20.660
Do you understand it a little better?


00:27:20.660 --> 00:27:21.860
Did the test make sense?


00:27:21.860 --> 00:27:23.280
Brian can tell you about writing


00:27:23.280 --> 00:27:26.100
good tests for all these different packages and stuff.


00:27:26.100 --> 00:27:28.660
But I think we need to do more of this,


00:27:28.660 --> 00:27:30.260
and we as an industry,


00:27:30.260 --> 00:27:33.220
because I feel like we're drowning


00:27:33.220 --> 00:27:36.660
in how to get started content now at this level.


00:27:36.660 --> 00:27:40.420
You know what I mean? Let's go one step above that now and start to


00:27:40.420 --> 00:27:43.340
talk about what is the step 2,


00:27:43.340 --> 00:27:46.940
3, 4 look like between junior and senior.


00:27:46.940 --> 00:27:48.940
Yeah, there's definitely that cliff.


00:27:48.940 --> 00:27:51.940
Brian, you got a learning curve here to back this up?


00:27:51.940 --> 00:27:55.940
Oh, yeah, I think you muted Brian.


00:27:55.940 --> 00:28:02.940
Yeah, I saw this interesting graphic and I kind of related to it really well.


00:28:02.940 --> 00:28:08.940
In production, I'm not sure about the early parts of the learning curve.


00:28:08.940 --> 00:28:12.940
But the end part is welcome to production programming,


00:28:12.940 --> 00:28:18.380
programming where there's strange mission critical code left behind by the last developer.


00:28:18.380 --> 00:28:26.620
And I mean, actually, this is, you know, funny, but also it's true. In, you know, production code in a


00:28:26.620 --> 00:28:32.060
company, you often have to support code that you don't know what the decisions are. You don't,


00:28:32.060 --> 00:28:37.580
it's just it's working, but you're not sure why it's working. And yeah, there's some strange stuff.


00:28:38.300 --> 00:28:41.960
- Yeah, it can definitely get weird in that stage.


00:28:41.960 --> 00:28:45.360
But Cecil, I agree that going from like,


00:28:45.360 --> 00:28:48.440
oh, I learned the language so I can actually do stuff.


00:28:48.440 --> 00:28:50.760
That there's a huge gap right there.


00:28:50.760 --> 00:28:52.360
Dean out in the live stream says,


00:28:52.360 --> 00:28:55.400
I wonder if some design decisions that were best


00:28:55.400 --> 00:28:57.280
in the '90s are less optimal today.


00:28:57.280 --> 00:28:59.280
I feel like in the '90s, it was all about


00:28:59.280 --> 00:29:03.280
object-orienting all the things.


00:29:03.280 --> 00:29:04.600
And then there was like a push,


00:29:04.600 --> 00:29:06.200
like, you know, maybe that's not the best way


00:29:06.200 --> 00:29:09.280
to just develop everything, like maybe a little bit mixed,


00:29:09.280 --> 00:29:11.440
a little bit of composition and so on.


00:29:11.440 --> 00:29:13.500
That's fun. And then John says,


00:29:13.500 --> 00:29:14.940
"Coming from a number of other languages,


00:29:14.940 --> 00:29:16.740
when I first started using Python,


00:29:16.740 --> 00:29:18.600
I took a conscious effort to seek out learning


00:29:18.600 --> 00:29:21.680
the idiomatic Python way of doing things."


00:29:21.680 --> 00:29:22.780
I think that's really important,


00:29:22.780 --> 00:29:24.640
because it's so easy to just get it to work


00:29:24.640 --> 00:29:25.700
and then leave it there.


00:29:25.700 --> 00:29:27.800
You're like, "No one would ever do this."


00:29:27.800 --> 00:29:30.200
You would just create a number and a fake for loop


00:29:30.200 --> 00:29:31.980
that increments that.


00:29:31.980 --> 00:29:33.180
And it goes the other way, too.


00:29:33.240 --> 00:29:40.280
So like Cecil mentioned, real developers,


00:29:40.280 --> 00:29:42.680
if you work a professional developer,


00:29:42.680 --> 00:29:44.840
is going to know several languages.


00:29:44.840 --> 00:29:49.720
But it's not just knowing three languages


00:29:49.720 --> 00:29:53.760
and knowing how to code C in three different languages.


00:29:53.760 --> 00:29:58.560
It's about learning the idiomatic way to do Python.


00:29:58.560 --> 00:30:03.100
It's learning how to do C# the way other C# developers do it.


00:30:03.160 --> 00:30:06.960
It's not just about trying to translate your own language


00:30:06.960 --> 00:30:09.320
into three languages or something.


00:30:09.320 --> 00:30:11.400
- And it's even simple stuff like variable naming


00:30:11.400 --> 00:30:12.920
and function naming, right?


00:30:12.920 --> 00:30:14.920
In Java, you start with a lowercase letter


00:30:14.920 --> 00:30:18.360
then have camel case, in Python it's all lowercase.


00:30:18.360 --> 00:30:20.760
C#, I mean, it's just like this person clearly


00:30:20.760 --> 00:30:22.880
is not of this ecosystem.


00:30:22.880 --> 00:30:24.080
Like you can just tell straight away


00:30:24.080 --> 00:30:25.400
just by weird things like naming


00:30:25.400 --> 00:30:27.040
that are so easy to change.


00:30:27.040 --> 00:30:27.880
- Yeah.


00:30:27.880 --> 00:30:30.360
- All right.


00:30:30.360 --> 00:30:32.480
- That's one of the things you see a lot when people do


00:30:32.480 --> 00:30:34.960
those auto-generated libraries.


00:30:34.960 --> 00:30:37.480
I know some folks are familiar with things like


00:30:37.480 --> 00:30:40.460
OpenAPI and Autoress and things of that nature.


00:30:40.460 --> 00:30:43.080
Like you point a thing at your API definition,


00:30:43.080 --> 00:30:45.520
it just generates stuff.


00:30:45.520 --> 00:30:48.120
But what if the casing doesn't match?


00:30:48.120 --> 00:30:50.320
If I generate a Java library


00:30:50.320 --> 00:30:53.040
and a JavaScript library and a Python library,


00:30:53.040 --> 00:30:55.360
but the casing is going to be


00:30:55.360 --> 00:30:57.400
different across all those idiomatically.


00:30:57.400 --> 00:31:00.840
But now these code-generated things have to take


00:31:00.840 --> 00:31:03.640
that is a consideration as they're building up these libraries.


00:31:03.640 --> 00:31:06.640
Your classes like Pydantic that automatically map them over


00:31:06.640 --> 00:31:09.040
now have to look like Java classes or whatever.


00:31:09.040 --> 00:31:12.040
I did see in Pydantic that you can now have an alias.


00:31:12.040 --> 00:31:14.640
So it's like this is what it looks like in JavaScript,


00:31:14.640 --> 00:31:17.040
but it has this other proper name,


00:31:17.040 --> 00:31:20.240
like this Python name in Python, which I think is kind of cool.


00:31:20.240 --> 00:31:25.040
All right, let's talk about something that's really fun and visual.


00:31:25.040 --> 00:31:26.640
So there's this thing called


00:31:28.040 --> 00:31:31.200
Gradio, something.


00:31:31.200 --> 00:31:33.520
I'm messing up the pronunciation, I'm sure.


00:31:33.520 --> 00:31:35.440
This comes to us from David Smith,


00:31:35.440 --> 00:31:37.440
so thanks for sending that over.


00:31:37.440 --> 00:31:40.280
And this is a really cool way to add simple,


00:31:40.280 --> 00:31:44.480
interactive UIs to your machine learning scripts.


00:31:44.480 --> 00:31:46.760
So it says, "Generate an easy to use UI


00:31:46.760 --> 00:31:48.920
"for your ML model function or API


00:31:48.920 --> 00:31:50.380
"with only a few lines of code


00:31:50.380 --> 00:31:52.980
"and integrate it directly into your Python notebook


00:31:52.980 --> 00:31:54.680
"or share a link with anyone."


00:31:54.680 --> 00:31:57.880
So here, like all beautiful user interface things,


00:31:57.880 --> 00:32:00.920
that actually has not just graphics,


00:32:00.920 --> 00:32:03.040
but interactive graphics.


00:32:03.040 --> 00:32:06.760
So you might import Gradio


00:32:06.760 --> 00:32:08.600
and then write the code to implement it


00:32:08.600 --> 00:32:11.200
and then just give it the function that it wants to use


00:32:11.200 --> 00:32:14.080
and say the input is a sketch pad


00:32:14.080 --> 00:32:15.680
and the output is a label run


00:32:15.680 --> 00:32:17.760
and that's the implementation.


00:32:17.760 --> 00:32:19.940
So here's a machine learning model


00:32:19.940 --> 00:32:23.120
that allows me to draw in ink


00:32:23.120 --> 00:32:24.580
and then tell me what letter it is.


00:32:24.580 --> 00:32:25.980
So if I did like this,


00:32:26.880 --> 00:32:28.680
I should tell you, oh, I think that's a seven.


00:32:28.680 --> 00:32:29.960
That's not a seven.


00:32:29.960 --> 00:32:31.640
Let's see, what about a one?


00:32:31.640 --> 00:32:33.360
You think that's a four?


00:32:33.360 --> 00:32:34.760
This model is not very good.


00:32:34.760 --> 00:32:38.520
But that's not the point, right?


00:32:38.520 --> 00:32:39.620
That should be a five.


00:32:39.620 --> 00:32:42.960
I'm gonna draw, I'm gonna do a zero.


00:32:42.960 --> 00:32:45.760
There we go, yes, I nailed it with a zero.


00:32:45.760 --> 00:32:49.120
Two, yeah, two knows two, I don't know.


00:32:49.120 --> 00:32:50.840
The point is not that the model's accurate,


00:32:50.840 --> 00:32:52.760
but this is a really cool UI


00:32:52.760 --> 00:32:56.160
that you can build in a couple of lines of code, right?


00:32:56.160 --> 00:32:57.400
- I think that's super.


00:32:57.400 --> 00:32:59.520
- Yeah, this is pretty nice.


00:32:59.520 --> 00:33:02.060
- Yeah, let's see what other examples they got in here.


00:33:02.060 --> 00:33:04.160
Question and answer with a paragraph.


00:33:04.160 --> 00:33:07.680
So here's the text that the source text is,


00:33:07.680 --> 00:33:11.600
Victoria has written a constitution enacted in 1975,


00:33:11.600 --> 00:33:12.440
et cetera, et cetera.


00:33:12.440 --> 00:33:14.160
And then you could ask the model the question,


00:33:14.160 --> 00:33:17.480
when did Victoria enact its constitution?


00:33:17.480 --> 00:33:19.720
Holy moly, wait for it.


00:33:19.720 --> 00:33:25.440
1975, like that is insane, right?


00:33:25.440 --> 00:33:28.320
And you can cool this, you can build this cool UI here,


00:33:28.320 --> 00:33:30.360
a face segmentation.


00:33:30.360 --> 00:33:31.560
I'm not gonna do my webcam,


00:33:31.560 --> 00:33:34.280
it's gonna break stuff for the live stream.


00:33:34.280 --> 00:33:35.640
Yeah, all sorts of things though,


00:33:35.640 --> 00:33:38.360
like little sliders and whatnot.


00:33:38.360 --> 00:33:39.560
Do we need social distancing?


00:33:39.560 --> 00:33:40.680
Yes, there we go.


00:33:40.680 --> 00:33:45.120
So pretty neat way to really simply add UIs


00:33:45.120 --> 00:33:46.960
and integrate them both onto websites


00:33:46.960 --> 00:33:48.340
and into Jupyter Notebooks.


00:33:48.340 --> 00:33:51.600
- Nice, I like it.


00:33:51.600 --> 00:33:52.440
- I like it.


00:33:53.560 --> 00:33:56.280
- I love too that it's just running in the browser too.


00:33:56.280 --> 00:33:57.340
- I know.


00:33:57.340 --> 00:33:58.500
- That's awesome.


00:33:58.500 --> 00:34:01.020
- Yeah, I mean, that's proper JavaScript work


00:34:01.020 --> 00:34:03.140
to be putting on like a little sketch pad


00:34:03.140 --> 00:34:05.700
and then taking that image and sending it back up.


00:34:05.700 --> 00:34:07.640
Dean is helping us with the naming.


00:34:07.640 --> 00:34:11.780
So ML models usually use gradients.


00:34:11.780 --> 00:34:16.700
So called grade in slang terms, I guess, grade IO.


00:34:16.700 --> 00:34:18.660
Yeah, that sounds good.


00:34:18.660 --> 00:34:19.500
Cool, thanks.


00:34:19.500 --> 00:34:22.780
All right, so you're gonna take us out of here


00:34:22.780 --> 00:34:26.780
last one you got? Yeah, sure. Let's take a look.


00:34:26.780 --> 00:34:34.420
Alright, so my screen should be up now. So there's this movie


00:34:34.420 --> 00:34:38.740
that's coming out later this summer. 2021 called Space Jam. I


00:34:38.740 --> 00:34:42.460
don't know if you ever heard about Space Jam. But I heard


00:34:42.460 --> 00:34:46.260
about it. I don't really I don't know enough. What's that? I only


00:34:46.260 --> 00:34:49.300
heard of it. I haven't seen it. Yeah, I mean, you know, I know


00:34:49.300 --> 00:34:52.700
if anyone that's born born after like the year 2000, probably


00:34:52.700 --> 00:34:54.700
>> I'm going to go ahead and start.


00:34:54.700 --> 00:34:55.700
>> Okay.


00:34:55.700 --> 00:34:57.700
>> I'm going to go ahead and start.


00:34:57.700 --> 00:34:58.700
>> Okay.


00:34:58.700 --> 00:35:00.700
>> I'm going to go ahead and start.


00:35:00.700 --> 00:35:01.700
>> Okay.


00:35:01.700 --> 00:35:03.700
>> I'm going to go ahead and start.


00:35:03.700 --> 00:35:04.700
>> Okay.


00:35:04.700 --> 00:35:06.700
>> I'm going to go ahead and start.


00:35:06.700 --> 00:35:07.700
>> Okay.


00:35:07.700 --> 00:35:09.700
>> I'm going to go ahead and start.


00:35:09.700 --> 00:35:10.700
>> Okay.


00:35:10.700 --> 00:35:12.700
>> I'm going to go ahead and start.


00:35:12.700 --> 00:35:13.700
>> Okay.


00:35:13.700 --> 00:35:15.700
>> I'm going to go ahead and start.


00:35:15.700 --> 00:35:16.700
>> Okay.


00:35:16.700 --> 00:35:18.700
>> I'm going to go ahead and start.


00:35:18.700 --> 00:35:19.700
>> Okay.


00:35:19.700 --> 00:35:21.700
>> I'm going to go ahead and start.


00:35:21.700 --> 00:35:24.680
and you can use that to start predicting the outcomes of


00:35:24.680 --> 00:35:27.560
games and player performance and all this cool stuff.


00:35:27.560 --> 00:35:28.960
But it uses Python,


00:35:28.960 --> 00:35:31.420
it uses Pandas, uses VS Code.


00:35:31.420 --> 00:35:36.300
There is some JavaScript in there and there's some NBA data in there,


00:35:36.300 --> 00:35:37.620
there's some basketball data in there.


00:35:37.620 --> 00:35:40.420
You use and explore and play around with.


00:35:40.420 --> 00:35:41.860
I think this is really cool.


00:35:41.860 --> 00:35:45.140
Again, going back to the conversation we had before about,


00:35:45.140 --> 00:35:47.100
okay, I know some Python,


00:35:47.100 --> 00:35:49.300
how do I do some cool stuff with it?


00:35:49.300 --> 00:35:50.640
What's the next step?


00:35:50.640 --> 00:35:53.320
I thought this was a great example of us showing,


00:35:53.320 --> 00:35:55.920
"Hey, let me take something that I actually care about."


00:35:55.920 --> 00:35:57.400
Maybe some of you care about basketball,


00:35:57.400 --> 00:36:00.480
maybe some of you don't. But whether it's sports or racing,


00:36:00.480 --> 00:36:02.700
or maybe you like to listen to podcasts,


00:36:02.700 --> 00:36:04.760
how can I take podcast data and run


00:36:04.760 --> 00:36:07.280
some machine learning and different things around it?


00:36:07.280 --> 00:36:10.640
I think these are all really cool projects for you to think about.


00:36:10.640 --> 00:36:14.580
But this one specifically is about using basketball stats,


00:36:14.580 --> 00:36:17.740
inspired by Space Jam and using Python and Pandas,


00:36:17.740 --> 00:36:20.380
and just creating some really cool projects out of it.


00:36:20.380 --> 00:36:21.600
So I thought this was cool.


00:36:21.600 --> 00:36:24.100
Hopefully, folks check it out and let us know what you think.


00:36:24.100 --> 00:36:28.400
>> So this is a free learning thing that people can go check out, right?


00:36:28.400 --> 00:36:30.540
>> Yeah, this is 100 percent free.


00:36:30.540 --> 00:36:32.740
Excuse me. It's 100 percent free.


00:36:32.740 --> 00:36:37.740
Free as in I don't need your address and information.


00:36:37.740 --> 00:36:41.320
>> It's just a credit card. You can cancel anytime. It's totally free.


00:36:41.320 --> 00:36:42.820
>> One thing I would tell you,


00:36:42.820 --> 00:36:44.980
if you do decide to create an account,


00:36:44.980 --> 00:36:46.640
so I have an account here.


00:36:46.640 --> 00:36:49.720
You'll notice you'll get points, you get XP points.


00:36:49.720 --> 00:36:52.480
This one is worth 4,000 XP.


00:36:52.480 --> 00:36:55.600
If I get that, hopefully I'll bump up and I'll be out of line.


00:36:55.600 --> 00:36:58.220
>> You're going to go to level nine if you finish this one.


00:36:58.220 --> 00:37:00.520
>> Yeah. I want to make sure I


00:37:00.520 --> 00:37:04.040
get to make some time to go through this learning path.


00:37:04.040 --> 00:37:06.280
But if you do want to sign up,


00:37:06.280 --> 00:37:08.340
it's a good way to keep score,


00:37:08.340 --> 00:37:10.520
you get badges and all kinds of stuff.


00:37:10.520 --> 00:37:13.860
We do have other Python related courses in here too.


00:37:13.860 --> 00:37:18.000
We just released a intro to Django on here.


00:37:18.000 --> 00:37:18.600
>> That's nice.


00:37:18.600 --> 00:37:20.500
>> As well, if folks are interested in that.


00:37:20.500 --> 00:37:22.920
>> Did you guys do something with Dr. Becky


00:37:22.920 --> 00:37:26.020
around like NASA or something or is that?


00:37:26.020 --> 00:37:30.820
>> Yeah. We do have one that's around the moon landing.


00:37:30.820 --> 00:37:34.200
Then also, if you remember that Netflix movie,


00:37:34.200 --> 00:37:37.260
I think it's called Over the Moon or something like that.


00:37:37.260 --> 00:37:39.940
There's also a Learn module,


00:37:39.940 --> 00:37:41.340
I believe that's also associated with


00:37:41.340 --> 00:37:43.700
that movie that we partner with Netflix on.


00:37:43.700 --> 00:37:45.700
- That was super cool. - So that was awesome.


00:37:45.700 --> 00:37:47.700
- Nice, what I really like about this is


00:37:47.700 --> 00:37:49.700
when people are trying to get into programming,


00:37:49.700 --> 00:37:51.700
especially taking that next step of like,


00:37:51.700 --> 00:37:53.700
"Okay, I've learned what a loop is,"


00:37:53.700 --> 00:37:55.700
it's so hard to know,


00:37:55.700 --> 00:37:57.700
"What can I build?"


00:37:57.700 --> 00:37:59.700
Because you have these, like, "Well, I'd love to build a game."


00:37:59.700 --> 00:38:01.700
Like, well, building a game takes a team of people


00:38:01.700 --> 00:38:03.700
in a year. Like, that's not a good next step.


00:38:03.700 --> 00:38:05.700
It's just like knowing what the next thing


00:38:05.700 --> 00:38:07.700
to build that's a little more complicated


00:38:07.700 --> 00:38:09.700
that you're really actually interested in and you want to build.


00:38:09.700 --> 00:38:11.700
Like, this is the type of thing,


00:38:11.700 --> 00:38:16.080
you know, if you had a, like a coding club at a high school,


00:38:16.080 --> 00:38:17.760
maybe COVID times is not the best for this,


00:38:17.760 --> 00:38:20.360
but you could say, let's build an app that will do like


00:38:20.360 --> 00:38:22.520
statistics for our basketball team


00:38:22.520 --> 00:38:24.680
and like all sorts of interesting things.


00:38:24.680 --> 00:38:28.240
Like you could build really neat stuff and put it together


00:38:28.240 --> 00:38:31.040
in ways I think people will care about.


00:38:31.040 --> 00:38:32.320
- Yeah, exactly.


00:38:32.320 --> 00:38:34.960
And I'm just, like I said, just in general,


00:38:34.960 --> 00:38:37.860
I think the best way for you to go from beginner


00:38:37.860 --> 00:38:39.760
to whatever that next level is,


00:38:39.760 --> 00:38:41.740
is just find something that you really care about


00:38:41.740 --> 00:38:45.040
and see if you can attach technology to it.


00:38:45.040 --> 00:38:46.600
I care about basketball.


00:38:46.600 --> 00:38:48.320
I've been watching basketball for years.


00:38:48.320 --> 00:38:50.320
When I heard Space Jam and Python,


00:38:50.320 --> 00:38:51.440
I'm like, "Oh, that's easy."


00:38:51.440 --> 00:38:52.200
>> Yes.


00:38:52.200 --> 00:38:54.120
>> Yes, that's something that I care about.


00:38:54.120 --> 00:38:55.360
That's something I want to do.


00:38:55.360 --> 00:38:56.000
>> That's awesome.


00:38:56.000 --> 00:38:58.020
>> Like we mentioned before, we have ones on NASA,


00:38:58.020 --> 00:38:59.880
but maybe you're into some other stuff.


00:38:59.880 --> 00:39:03.400
Maybe you're into agriculture and flowers and plants.


00:39:03.400 --> 00:39:04.400
Maybe you want to do something that


00:39:04.400 --> 00:39:06.220
categorizes that type of stuff.


00:39:06.220 --> 00:39:07.240
Maybe you're into cars,


00:39:07.240 --> 00:39:08.840
maybe you like racing or


00:39:08.840 --> 00:39:13.520
you know, some other activity, you know, find a way that you can integrate what you're doing with,


00:39:13.520 --> 00:39:18.400
um, you know, in your real world life with what you're doing in your computer life, right?


00:39:18.400 --> 00:39:19.920
And see if we can put those together.


00:39:19.920 --> 00:39:21.320
I think that'd be awesome.


00:39:21.320 --> 00:39:24.160
Iot stuff to do with agriculture.


00:39:24.160 --> 00:39:26.160
Yeah, for sure.


00:39:26.160 --> 00:39:26.920
I think so too.


00:39:26.920 --> 00:39:32.840
you know, I've heard about like a lot of different, projects that, you know, use IOT,


00:39:32.840 --> 00:39:37.640
you know, particularly outside of the United States to do things like detecting diseases and,


00:39:37.920 --> 00:39:41.540
letting them know when's the right time to manage crops,


00:39:41.540 --> 00:39:45.640
and getting information from weather APIs,


00:39:45.640 --> 00:39:47.240
and using it inside of


00:39:47.240 --> 00:39:50.400
their IoT devices and stuff like that to help make decisions,


00:39:50.400 --> 00:39:52.480
which I think is really cool.


00:39:52.480 --> 00:39:55.800
>> You could look at the crops and say, "How wet is this?


00:39:55.800 --> 00:39:58.160
Could it hold out 12 more hours because I


00:39:58.160 --> 00:40:00.040
see it's going to rain in 12 hours,


00:40:00.040 --> 00:40:03.520
so let's not waste the water now, save some money."


00:40:03.520 --> 00:40:07.560
>> Yeah, exactly. Little micro-optimizations like that,


00:40:07.560 --> 00:40:11.000
that'll probably one, save you a lot of money and resources


00:40:11.000 --> 00:40:14.180
and also make sure that you can control your environment.


00:40:14.180 --> 00:40:17.840
Yeah, I think those are all really cool use cases


00:40:17.840 --> 00:40:19.760
that we should definitely encourage more folks


00:40:19.760 --> 00:40:21.200
to get involved in.


00:40:21.200 --> 00:40:22.760
- Yeah, so I don't know if we should go down it,


00:40:22.760 --> 00:40:25.480
but Dean is calling Jordan the goat.


00:40:25.480 --> 00:40:27.280
I don't know what's going on here.


00:40:27.280 --> 00:40:28.720
- I agree with him 100%.


00:40:28.720 --> 00:40:30.200
I would defend that any day.


00:40:30.200 --> 00:40:33.440
It goes Jordan, Colby, LeBron.


00:40:33.440 --> 00:40:34.880
That's how it goes in my head.


00:40:34.880 --> 00:40:35.720
- Awesome.


00:40:36.600 --> 00:40:39.640
All right, well, that's all of our main items.


00:40:39.640 --> 00:40:41.060
Brian, do you have anything extra


00:40:41.060 --> 00:40:43.160
you wanna give a shout out to?


00:40:43.160 --> 00:40:44.400
- No, but I just wanted to say,


00:40:44.400 --> 00:40:46.040
I thought it was a trick question when you said,


00:40:46.040 --> 00:40:48.320
does, do you know what Space Jam is?


00:40:48.320 --> 00:40:50.640
I mean, I thought everybody knew what Space Jam was.


00:40:50.640 --> 00:40:51.600
I had to look it up.


00:40:51.600 --> 00:40:53.240
I didn't realize it came out in '96.


00:40:53.240 --> 00:40:55.200
So it's been a while.


00:40:55.200 --> 00:40:56.160
So.


00:40:56.160 --> 00:40:57.000
- Absolutely.


00:40:57.000 --> 00:40:57.820
- Yeah, that's what I said.


00:40:57.820 --> 00:41:00.200
If you're born after 2000, like you're not,


00:41:00.200 --> 00:41:01.120
what Space Jam is.


00:41:01.120 --> 00:41:04.000
- If you've got good parents, you'll know,


00:41:04.000 --> 00:41:05.640
'cause they would have shown you.


00:41:05.640 --> 00:41:07.520
(laughing)


00:41:07.520 --> 00:41:08.360
- That sometimes works.


00:41:08.360 --> 00:41:10.720
- I actually made my son watch it a couple weeks ago.


00:41:10.720 --> 00:41:12.440
- Yeah, did he enjoy it?


00:41:12.440 --> 00:41:13.280
- Yeah, he loved it.


00:41:13.280 --> 00:41:15.680
Now, one day I came home, he's just like,


00:41:15.680 --> 00:41:17.480
"Daddy, what are we gonna watch tonight?"


00:41:17.480 --> 00:41:19.120
I'm like, "I don't know, what do you wanna watch?"


00:41:19.120 --> 00:41:20.120
"Let's watch Space Jam."


00:41:20.120 --> 00:41:21.760
I'm like, "Yes, I'm a good father."


00:41:21.760 --> 00:41:22.600
- Yes.


00:41:22.600 --> 00:41:23.420
- He's done it.


00:41:23.420 --> 00:41:27.120
- My wife and I tried to have our daughters


00:41:27.120 --> 00:41:29.800
watch all the James Bond 007 stuff.


00:41:29.800 --> 00:41:31.200
And I said, "Well, the natural way would be


00:41:31.200 --> 00:41:32.880
"to start at the very first one with Sean Connery


00:41:32.880 --> 00:41:34.400
"and make your way up to Daniel Craig."


00:41:34.400 --> 00:41:38.240
today. They watched like 10 minutes like this is so fake. I can't watch this. Like, all right, well,


00:41:38.240 --> 00:41:44.640
different generation, different generation. Yeah. All right. So, let's see. It's also got


00:41:44.640 --> 00:41:47.600
anything you want to give a quick shout out to that didn't land in the main topics.


00:41:47.600 --> 00:41:55.440
I feel like I should have prepared for this. Yeah, no, I don't be bothered. Are you still doing


00:41:55.440 --> 00:41:58.800
the Twitch streams, Brian? Yeah, we're still doing this. Other Brian, Brian Clark.


00:41:59.760 --> 00:42:03.800
My co-host Brian had taken some time off because Brian had a baby.


00:42:03.800 --> 00:42:05.400
So congratulations to Brian and his family.


00:42:05.400 --> 00:42:06.640
>> Congratulations.


00:42:06.640 --> 00:42:08.760
>> But he will be back.


00:42:08.760 --> 00:42:12.640
Well, he is back, but we'll be live-streaming again starting next week.


00:42:12.640 --> 00:42:15.060
Now that he's back and settled and stuff like that.


00:42:15.060 --> 00:42:19.120
But yeah, we do a weekly live stream on Twitch.


00:42:19.120 --> 00:42:25.280
You can go to twitch.tv/MicrosoftDeveloper.


00:42:25.280 --> 00:42:29.080
It's every Wednesday at 1.30 PM Eastern Standard Time.


00:42:29.080 --> 00:42:32.240
>> We talk all things Python.


00:42:32.240 --> 00:42:34.280
We do different projects.


00:42:34.280 --> 00:42:36.360
I believe both of you gentlemen have been on.


00:42:36.360 --> 00:42:38.280
We've had Brian come on to talk about


00:42:38.280 --> 00:42:41.480
testing and solve some problems that I was having.


00:42:41.480 --> 00:42:45.000
Michael, you came on too, which was great.


00:42:45.000 --> 00:42:50.640
Yeah, we try and take a beginner's perspective.


00:42:50.640 --> 00:42:51.840
>> Yeah.


00:42:51.840 --> 00:42:52.840
>> My Brian and Brian.


00:42:52.840 --> 00:42:53.600
>> Very exploratory.


00:42:53.600 --> 00:42:55.960
>> But my co-host Brian and myself,


00:42:55.960 --> 00:42:57.680
we try to take it from the perspective of,


00:42:57.680 --> 00:43:00.560
"Okay, well, he knows JavaScript, I know C#.


00:43:00.560 --> 00:43:03.840
Let's come together and play around with Python


00:43:03.840 --> 00:43:06.440
and show all the mistakes and the typos


00:43:06.440 --> 00:43:09.720
and the things that happen that we don't always see


00:43:09.720 --> 00:43:12.200
on video and live streams and show people like,


00:43:12.200 --> 00:43:14.880
"Well, anyone can really just take the time to learn.


00:43:14.880 --> 00:43:16.800
You just gotta put in the effort."


00:43:16.800 --> 00:43:17.840
- Yeah, awesome.


00:43:17.840 --> 00:43:19.040
Yeah, people should definitely check that out.


00:43:19.040 --> 00:43:20.120
That's well done.


00:43:20.120 --> 00:43:26.080
So before I give my quick one item that I wanna share,


00:43:26.080 --> 00:43:27.940
Dean says, "PyCon Israel is next week,


00:43:27.940 --> 00:43:29.840
"May 2nd and 3rd, it's free and virtual,


00:43:29.840 --> 00:43:30.840
"so all are welcome."


00:43:30.840 --> 00:43:33.180
Yeah, thanks for that real-time update.


00:43:33.180 --> 00:43:37.840
And then, Brian, people are loving our,


00:43:37.840 --> 00:43:44.600
what you call it, the absolute privacy updates to the site.


00:43:44.600 --> 00:43:47.920
Check this out, 154 people liked some random update


00:43:47.920 --> 00:43:50.540
about removing analytics from the website.


00:43:50.540 --> 00:43:52.560
- I think that's great.


00:43:52.560 --> 00:43:56.120
- Yeah, so now if you go to like pythonbytes.fm


00:43:56.120 --> 00:44:00.680
in Firefox and you look, there's a perfect security shield,


00:44:00.680 --> 00:44:04.240
perfect privacy shield, and we happen to be live streaming.


00:44:04.240 --> 00:44:06.640
- So did you just remove Google Analytics from it?


00:44:06.640 --> 00:44:11.360
- We were using GetClicky, which is like a more real time,


00:44:11.360 --> 00:44:14.080
but I think Google Analytics basically the same.


00:44:14.080 --> 00:44:16.640
The thing I liked about GetClicky is it was a paid service


00:44:16.640 --> 00:44:18.520
that didn't share your data with advertisers.


00:44:18.520 --> 00:44:20.500
So it was better, at least in that regard,


00:44:20.500 --> 00:44:21.840
but all the ad blockers and everything


00:44:21.840 --> 00:44:26.000
already degrading the data so badly that it was kind of like,


00:44:26.000 --> 00:44:28.280
well, it's maybe half of that population.


00:44:28.280 --> 00:44:29.960
I don't know that we get information about it,


00:44:29.960 --> 00:44:31.440
so let's just take it out.


00:44:31.440 --> 00:44:32.000
>> Right. >> Yeah.


00:44:32.000 --> 00:44:34.200
>> Okay. Got it, got it, got it.


00:44:34.200 --> 00:44:38.920
>> All right, I wish we would have had this joke last week, maybe two weeks ago,


00:44:38.920 --> 00:44:41.120
but I've got a good joke for us.


00:44:41.120 --> 00:44:47.480
There was that giant evergreen shipping container thing that clogged up the canals


00:44:47.480 --> 00:44:52.480
at the Suez Canal, cost like $400 million an hour,


00:44:52.480 --> 00:44:58.620
lost commerce with the Middle East and Europe, right?


00:44:58.620 --> 00:45:00.860
That was bad.


00:45:00.860 --> 00:45:02.740
So there's this great joke here


00:45:02.740 --> 00:45:06.360
about Linux containers and Kubernetes.


00:45:06.360 --> 00:45:11.700
So it's got the evergreen ship stuck sideways


00:45:11.700 --> 00:45:13.900
and like another shipping container clearly stopped


00:45:13.900 --> 00:45:15.980
like this is blocked, we can't make it through.


00:45:15.980 --> 00:45:19.340
And then the title is Linux containers and Kubernetes for beginners.


00:45:19.340 --> 00:45:20.140
Like containers.


00:45:20.140 --> 00:45:20.940
Yeah, that'll fix it.


00:45:20.940 --> 00:45:25.860
That's hilarious.


00:45:25.860 --> 00:45:27.940
By the way, did you ever get that thing out?


00:45:27.940 --> 00:45:29.780
It got out like a week ago.


00:45:29.780 --> 00:45:30.500
I think, yeah.


00:45:30.500 --> 00:45:33.940
Eventually they had to dig the sand out underneath it until it


00:45:33.940 --> 00:45:35.140
could float again, basically.


00:45:35.140 --> 00:45:36.460
Oh my gosh.


00:45:36.460 --> 00:45:37.540
That's ridiculous.


00:45:37.540 --> 00:45:38.180
And then.


00:45:38.180 --> 00:45:40.060
So, so are you a fan of the, Oh really?


00:45:40.060 --> 00:45:40.940
Covers.


00:45:40.940 --> 00:45:42.120
I am.


00:45:42.120 --> 00:45:42.380
Yeah.


00:45:42.380 --> 00:45:42.860
Yeah.


00:45:42.860 --> 00:45:43.020
Yeah.


00:45:43.020 --> 00:45:44.300
So we've got the, Oh really?


00:45:44.900 --> 00:45:46.200
instead of O'Reilly.


00:45:46.200 --> 00:45:48.000
Kubernetes for beginners, what could go wrong?


00:45:48.000 --> 00:45:48.840
DevOops.


00:45:48.840 --> 00:45:50.180
- Nice, I like it.


00:45:50.180 --> 00:45:51.640
- DevOops.


00:45:51.640 --> 00:45:53.400
- But I love the evergreen containership.


00:45:53.400 --> 00:45:54.800
Containers, that'll fix it.


00:45:54.800 --> 00:46:02.200
All right, Brian, is that it?


00:46:02.200 --> 00:46:03.040
- Yeah.


00:46:03.040 --> 00:46:03.860
- That a show?


00:46:03.860 --> 00:46:04.900
Put a wrap on it?


00:46:04.900 --> 00:46:06.860
- Nice bow, yeah.


00:46:06.860 --> 00:46:07.840
Good joke.


00:46:07.840 --> 00:46:09.040
Good guest.


00:46:09.040 --> 00:46:10.220
- Yeah.


00:46:10.220 --> 00:46:11.680
Great guest, Cecil.


00:46:11.680 --> 00:46:12.600
Super to catch up with you.


00:46:12.600 --> 00:46:14.500
Thank you for being on the show again.


00:46:14.500 --> 00:46:15.340
- Thanks everybody for coming.


00:46:15.340 --> 00:46:17.460
- Thank you both for having me come on, man.


00:46:17.460 --> 00:46:18.900
Again, it's always a fun time.


00:46:18.900 --> 00:46:20.120
I'm trying to break the record.


00:46:20.120 --> 00:46:23.280
I wanna know who your most frequent guest is


00:46:23.280 --> 00:46:25.120
and whatever that is, I wanna break the record.


00:46:25.120 --> 00:46:27.600
- Oh, I'm gonna get one of those great I/O type things


00:46:27.600 --> 00:46:29.960
and point it at our site and then I'll ask it.


00:46:29.960 --> 00:46:32.900
- Yeah. (laughs)


00:46:32.900 --> 00:46:35.640
- No, I think actually probably you're near the top.


00:46:35.640 --> 00:46:36.640
I have to do some counting.


00:46:36.640 --> 00:46:39.000
We'll have to see, but yeah, for sure.


00:46:39.000 --> 00:46:39.820
- Yeah, let me know.


00:46:39.820 --> 00:46:42.200
I gotta make sure I keep, I gotta keep standards high.


00:46:42.200 --> 00:46:43.040
- That's right.


00:46:43.040 --> 00:46:46.800
out there in the live stream if he's still there. He's definitely one he's one of the contenders as


00:46:46.800 --> 00:46:57.920
well so I'll let you know. Okay yeah cool well bye everybody. Bye everyone take care. See ya.

