WEBVTT

00:00:00.000 --> 00:00:05.000
- Everyone out there in the live stream,


00:00:05.000 --> 00:00:06.720
thank you so much for being here,


00:00:06.720 --> 00:00:09.280
for either being part of the live show,


00:00:09.280 --> 00:00:14.140
Pradvan, Dean, Teddy, great to see you all here again.


00:00:14.140 --> 00:00:17.160
And if you're watching later, thanks for watching.


00:00:17.160 --> 00:00:19.000
All right, Brian, shall we do this thing?


00:00:19.000 --> 00:00:20.200
- Yeah, let's do it.


00:00:20.200 --> 00:00:21.020
- All right.


00:00:21.020 --> 00:00:23.840
Hello and welcome to Python Bytes,


00:00:23.840 --> 00:00:25.460
where we deliver Python news and headlines


00:00:25.460 --> 00:00:26.760
directly to your earbuds.


00:00:26.760 --> 00:00:31.240
This is episode 246 recorded August 11th, 2021.


00:00:31.240 --> 00:00:32.560
I'm Michael Kennedy.


00:00:32.560 --> 00:00:33.720
- And I'm Brian Okken.


00:00:33.720 --> 00:00:36.260
- And I'm David Smith.


00:00:36.260 --> 00:00:38.880
- Hey, David Smith, welcome.


00:00:38.880 --> 00:00:40.120
So good to have you here.


00:00:40.120 --> 00:00:42.840
- It's good to be here.


00:00:42.840 --> 00:00:46.440
- Yeah, you've been a suggester of topics, I believe.


00:00:46.440 --> 00:00:48.360
You've sent in some ideas and thoughts for us


00:00:48.360 --> 00:00:51.360
and well, we're gonna get a good dose


00:00:51.360 --> 00:00:52.720
of that today for sure.


00:00:52.720 --> 00:00:55.440
- Quite honestly, if I'd known


00:00:55.440 --> 00:00:56.560
that you were gonna open this up,


00:00:56.560 --> 00:00:57.900
I probably would have ordered some of those


00:00:57.900 --> 00:01:00.200
'cause it was a little bit of a scramble to like,


00:01:00.200 --> 00:01:02.640
oh yeah, I already gave them that tip.


00:01:02.640 --> 00:01:04.240
So yeah, had to dig a little bit.


00:01:04.240 --> 00:01:05.800
- Yeah, you've already shared all your favorites.


00:01:05.800 --> 00:01:08.200
Well, your losses are gained


00:01:08.200 --> 00:01:10.000
because you've made it easier for us in the past.


00:01:10.000 --> 00:01:11.280
So thanks for sharing those things.


00:01:11.280 --> 00:01:13.640
And yeah, thanks for being here.


00:01:13.640 --> 00:01:15.080
It's gonna be great to have you.


00:01:15.080 --> 00:01:15.920
- Definitely.


00:01:15.920 --> 00:01:18.520
- Yeah, wanna give the quick elevator pitch on you?


00:01:18.520 --> 00:01:21.640
People, what do people, what do they know about you?


00:01:21.640 --> 00:01:24.680
- Well, I'm a recent tech convert, I'll say.


00:01:24.680 --> 00:01:27.680
Over the last 10 years, I've been working in the manufacturing space,


00:01:27.680 --> 00:01:30.080
either in quality engineering or manufacturing engineering.


00:01:30.080 --> 00:01:35.760
And over the last couple of years, I've been using Python a lot more heavily.


00:01:35.760 --> 00:01:40.840
I used to do a lot of BBA and Excel, which it was painful.


00:01:40.840 --> 00:01:44.000
And I had got a suggestion from one of our equipment suppliers to say, "Hey,


00:01:44.000 --> 00:01:45.280
you know, use Python.


00:01:45.280 --> 00:01:46.120
It's really, really nice."


00:01:46.120 --> 00:01:48.360
I kind of resisted doing it because I didn't want to learn something new.


00:01:48.360 --> 00:01:50.880
It seemed intimidating because it's, you know, it's a programming language.


00:01:50.880 --> 00:01:52.240
I'm not a programmer, right?


00:01:52.720 --> 00:01:57.200
I finally caved when it came to trying to automate plotting,


00:01:57.200 --> 00:01:59.520
which is pretty painful in Excel.


00:01:59.520 --> 00:02:04.000
And yeah, once I started on it and had something useful,


00:02:04.000 --> 00:02:05.760
but working in a couple hours, I was hooked.


00:02:05.760 --> 00:02:08.160
And then I started looking for more and more resources,


00:02:08.160 --> 00:02:10.680
found your show and got more and more into it from there.


00:02:10.680 --> 00:02:13.160
I started digging into the web and it's just been a,


00:02:13.160 --> 00:02:14.960
I'd say an upward spiral from there.


00:02:14.960 --> 00:02:18.180
And about, probably about two and a half weeks ago,


00:02:18.180 --> 00:02:21.200
I started in my first, I guess, official tech role


00:02:21.200 --> 00:02:24.680
on a similar kind of domain for an automotive supplier,


00:02:24.680 --> 00:02:27.520
doing data engineering work.


00:02:27.520 --> 00:02:30.640
So it's been really exciting to be able to use Python


00:02:30.640 --> 00:02:32.680
full-time as part of my job,


00:02:32.680 --> 00:02:36.020
'cause the bits and times I got to use Python before,


00:02:36.020 --> 00:02:37.680
that's always the parts I like the most.


00:02:37.680 --> 00:02:41.160
So I'm happy to be doing it on purpose.


00:02:41.160 --> 00:02:42.480
- Awesome, congratulations.


00:02:42.480 --> 00:02:44.560
- I wish I could do it full-time.


00:02:44.560 --> 00:02:47.000
(laughing)


00:02:47.000 --> 00:02:49.560
- I remember my first full-time software development job,


00:02:49.560 --> 00:02:51.540
I was like, I can't believe they're paying me to do this.


00:02:51.540 --> 00:02:53.480
I better figure this stuff out before they fire me.


00:02:53.480 --> 00:02:54.560
I can't believe I'm doing this.


00:02:54.560 --> 00:02:55.760
It was so great.


00:02:55.760 --> 00:02:56.600
So good.


00:02:56.600 --> 00:02:58.840
All right, well, congratulations and happy to have you here.


00:02:58.840 --> 00:03:01.120
Ryan, I feel like we should document this.


00:03:01.120 --> 00:03:03.720
- Definitely should document it and test our docs too.


00:03:03.720 --> 00:03:07.040
So one of the things I'd like to try,


00:03:07.040 --> 00:03:08.640
did I just try to edit?


00:03:08.640 --> 00:03:09.480
There we go.


00:03:09.480 --> 00:03:14.560
Something that came up recently was Vincent Wormerdam.


00:03:14.560 --> 00:03:16.480
I think we've had him on the show.


00:03:16.480 --> 00:03:18.600
- We have a couple episodes ago, yeah?


00:03:18.600 --> 00:03:23.840
>> Vincent announced that he's got a library called


00:03:23.840 --> 00:03:28.240
MakeTestDocs and I love this.


00:03:28.240 --> 00:03:33.120
The idea is it's a bunch of utilities that you can


00:03:33.120 --> 00:03:37.000
use to help test your documentation.


00:03:37.000 --> 00:03:38.800
It doesn't do it right out of the box.


00:03:38.800 --> 00:03:42.240
You have to create your own test files to do this.


00:03:42.240 --> 00:03:49.760
But the first example that he shows on his readme


00:03:49.760 --> 00:03:53.480
is that you've got a Markdown file,


00:03:53.480 --> 00:03:58.840
and it's got some Python code blocks in it.


00:03:58.840 --> 00:04:01.440
You can make a test that goes through,


00:04:01.440 --> 00:04:05.960
reads the Markdown, grabs the Python code and runs it.


00:04:05.960 --> 00:04:07.880
If there's any problems with it,


00:04:07.880 --> 00:04:10.000
if there's any exceptions,


00:04:10.000 --> 00:04:11.800
it fails the test.


00:04:11.800 --> 00:04:19.440
This is just brilliant. There's examples in here for doing it with docstrings and even class docstrings.


00:04:19.440 --> 00:04:28.520
And then Vincent even did the com code and he did a little com code video on how to use this.


00:04:28.520 --> 00:04:31.520
Yeah, and you put that in the show notes for people to check out.


00:04:31.520 --> 00:04:35.080
Yep, there's a link to the tutorial with the video.


00:04:35.080 --> 00:04:40.360
The suggestion, or the use case that he was talking about at first was


00:04:40.360 --> 00:04:43.720
that maybe you're using make docs for documentation.


00:04:43.720 --> 00:04:45.560
Therefore, you've got a bunch of markdown.


00:04:45.560 --> 00:04:49.960
But my use case is going to be blogs.


00:04:49.960 --> 00:04:53.000
So I think that's a huge use case, actually.


00:04:53.000 --> 00:04:56.920
Yeah, I've got Python code in my blog source code.


00:04:56.920 --> 00:04:58.280
It's markdown files.


00:04:58.280 --> 00:05:01.880
I totally want this one on my to do list is to try this


00:05:01.880 --> 00:05:04.680
to make sure that the blog content is accurate.


00:05:04.680 --> 00:05:05.960
So that is super cool.


00:05:06.600 --> 00:05:10.680
You know, one more thing that you might find interesting,


00:05:10.680 --> 00:05:16.920
I think this is a more true software engineering type of solution.


00:05:16.920 --> 00:05:22.280
But another sort of WYSIWYG as you work style of solution is PyCharm.


00:05:22.280 --> 00:05:25.480
If you have a markdown file and you have Python code in there,


00:05:25.480 --> 00:05:30.120
will highlight the errors and actually show you if like symbols are missing and stuff.


00:05:30.120 --> 00:05:34.680
So if you had the markdown associated with the sample code,


00:05:34.680 --> 00:05:40.280
and then you do stuff, a few little examples, it may actually show you the errors live as well.


00:05:40.280 --> 00:05:41.960
Oh, that's cool.


00:05:41.960 --> 00:05:46.520
Yeah, I mean, that's not like a CI, sort of keep it fixed, but that's a as you type kind of thing.


00:05:46.520 --> 00:05:53.320
Yeah, and the other comment that he had is, I normally don't put asserting things are valid


00:05:53.320 --> 00:06:00.120
in documentation, but the comment in the readme is that if you put asserts in there,


00:06:00.120 --> 00:06:03.800
it'll get checked also. So you've got like unit tests built into your documentation.


00:06:03.800 --> 00:06:07.320
So super cool. David, what do you think?


00:06:07.320 --> 00:06:14.320
It's interesting, I'm just trying to figure out is a are you doing like a parameterized test and?


00:06:14.320 --> 00:06:21.440
Looking at your inputs versus outputs for the code that's in the documentation or how do you actually know it's testing correctly?


00:06:21.440 --> 00:06:33.520
It's a valid Python or what is the little code snippet we've got in that we're showing on the screen in the chat, but also there's a link in the readme to the read in the show notes.


00:06:33.520 --> 00:06:42.400
to the README. The parameterize is that it uses the, like in this example, I'm saying,


00:06:42.400 --> 00:06:48.080
go look in my docs folder and for everything that it finds in there that's a markdown file,


00:06:48.080 --> 00:06:54.640
that'll show up as a parameterized, the parameterization of the test. So if I've got,


00:06:54.640 --> 00:07:01.760
this test will run once per file. So if I've got three markdown files in there,


00:07:01.760 --> 00:07:07.440
It'll the test will run three times. This is the most comprehensive and yet extremely short test I've seen


00:07:07.440 --> 00:07:16.000
Long time it's three lines and it will basically work traverse a tree of markdown file hierarchy type thing


00:07:16.000 --> 00:07:19.840
Oh, I do tons of really tiny tests. So yeah


00:07:19.840 --> 00:07:23.120
Yeah, nice


00:07:23.120 --> 00:07:25.120
Nice. Nice. All right


00:07:25.120 --> 00:07:29.600
Alvaro welcome to live stream happy to have you here. let's see. Let's move on to the next one. I think


00:07:30.320 --> 00:07:36.240
Speaking of users giving us listeners giving us ideas and helping us out here


00:07:36.240 --> 00:07:39.760
I want to talk about something that i've been hanging on to for a little while


00:07:39.760 --> 00:07:45.280
since march but i've finally decided it's time to talk about it and that is


00:07:45.280 --> 00:07:48.080
creating queues


00:07:48.080 --> 00:07:51.780
Out of process sort of asynchronous queue processing


00:07:51.780 --> 00:07:54.560
so if i've got


00:07:54.560 --> 00:07:59.040
say a web app or an API, or even if I'm testing a bunch of hardware,


00:07:59.040 --> 00:08:03.840
and I want to kick off a bunch of jobs, eventually, I don't want to, you know, necessarily block


00:08:03.840 --> 00:08:07.840
on all of them. I might want to push them down so other things can work on them.


00:08:07.840 --> 00:08:13.760
You know, if I'm going to send a bunch of emails, if you've ever tried to send a thousand emails


00:08:13.760 --> 00:08:18.800
in order, synchronously, it turns out that times out your web request. Don't do that. So a better


00:08:18.800 --> 00:08:21.920
idea would be to like push them to a queue and have some sort of background process go, oh,


00:08:21.920 --> 00:08:23.000
Oh, there's new emails to send.


00:08:23.000 --> 00:08:25.440
Let me jam those on down the line.


00:08:25.440 --> 00:08:30.160
So Scott Hacker sent over this pointer to this library,


00:08:30.160 --> 00:08:33.520
that small but cool little one called,


00:08:33.520 --> 00:08:34.400
what is this thing called?


00:08:34.400 --> 00:08:36.640
It is called QR3.


00:08:36.640 --> 00:08:40.840
And QR3 is a Q for Redis, and the three means Python 3,


00:08:40.840 --> 00:08:43.740
'cause there used to be a QR that wasn't three,


00:08:43.740 --> 00:08:45.240
that's not Python 3 compatible.


00:08:45.240 --> 00:08:49.720
So here's like a re-imagining of that for Python 3,


00:08:49.720 --> 00:08:53.480
or just a compatibility that got moved over.


00:08:53.480 --> 00:08:55.040
So it's pretty cool.


00:08:55.040 --> 00:08:56.680
We check it out.


00:08:56.680 --> 00:09:00.880
The API and implementation or the usage is quite simple


00:09:00.880 --> 00:09:02.440
as you could imagine.


00:09:02.440 --> 00:09:04.600
So all you gotta do is you gotta,


00:09:04.600 --> 00:09:06.520
it's built upon Redis Pi.


00:09:06.520 --> 00:09:07.800
You've gotta have Redis installed.


00:09:07.800 --> 00:09:09.160
That could be wherever.


00:09:09.160 --> 00:09:10.440
It could even be Redis as a service


00:09:10.440 --> 00:09:12.760
on some of these cloud platforms.


00:09:12.760 --> 00:09:14.200
Run it in Docker, run it locally.


00:09:14.200 --> 00:09:17.040
You have Redis Pi, and then you just go over


00:09:17.040 --> 00:09:19.480
and you create a queue.


00:09:19.480 --> 00:09:22.100
So you just say queue and you give it a name


00:09:22.100 --> 00:09:23.860
and then some server connect info


00:09:23.860 --> 00:09:26.940
like location, authentication and whatnot.


00:09:26.940 --> 00:09:30.580
And then all you've got to do is you push items to it.


00:09:30.580 --> 00:09:32.520
They could be just really simple things


00:09:32.520 --> 00:09:34.900
like a bunch of email addresses you're gonna send,


00:09:34.900 --> 00:09:37.440
but it could also be really complicated.


00:09:37.440 --> 00:09:39.980
Like for example, it could be say,


00:09:39.980 --> 00:09:42.340
Pydantic models that store all the data


00:09:42.340 --> 00:09:44.940
that you need to process that request.


00:09:44.940 --> 00:09:45.900
So that's pretty cool.


00:09:45.900 --> 00:09:50.620
It has the default way of getting data over to it


00:09:50.620 --> 00:09:51.840
is through CPickle.


00:09:51.840 --> 00:09:55.260
And CPickle is better than Pickle,


00:09:55.260 --> 00:09:59.060
but still has issues and other restrictions.


00:09:59.060 --> 00:10:01.980
Some of the restrictions are you can't put


00:10:01.980 --> 00:10:02.980
certain types of objects.


00:10:02.980 --> 00:10:05.100
Like it wouldn't make sense to serialize


00:10:05.100 --> 00:10:07.420
a database connection that has an open socket


00:10:07.420 --> 00:10:10.200
or a thread or some weird thing like that, right?


00:10:10.200 --> 00:10:12.140
But most of the sort of message,


00:10:12.140 --> 00:10:13.580
here's the data you need to process,


00:10:13.580 --> 00:10:16.020
you would send over, all that stuff would work.


00:10:16.020 --> 00:10:21.020
And you can also create your own serializer


00:10:21.020 --> 00:10:23.520
on a per-key basis, which is kind of cool.


00:10:23.520 --> 00:10:26.940
So if you said, I want to only work with Pydantic models,


00:10:26.940 --> 00:10:30.060
you could put the sort of from dictionary to dictionary


00:10:30.060 --> 00:10:32.240
transformation with the validation


00:10:32.240 --> 00:10:33.780
and all that kind of stuff.


00:10:33.780 --> 00:10:36.260
I personally would not use CPickle


00:10:36.260 --> 00:10:38.460
because one of the things you can run into


00:10:38.460 --> 00:10:41.340
is if you upgrade your version of Python on one server,


00:10:41.340 --> 00:10:42.180
but not the other,


00:10:42.180 --> 00:10:45.220
'cause you're in the process of going from one to the other.


00:10:45.220 --> 00:10:47.820
And some thing has a different structure and memory


00:10:47.820 --> 00:10:49.500
and gets put over there.


00:10:49.500 --> 00:10:50.860
The other ones can't read it.


00:10:50.860 --> 00:10:54.300
There's always these challenges of pure binary matches.


00:10:54.300 --> 00:10:55.340
I don't know, I would do that.


00:10:55.340 --> 00:10:58.300
Probably serialize as JSON or something


00:10:58.300 --> 00:10:59.180
and serialize it back.


00:10:59.180 --> 00:11:01.300
But anyway, it's pretty cool.


00:11:01.300 --> 00:11:02.380
What do you guys think?


00:11:02.380 --> 00:11:05.220
- This looks nice.


00:11:05.220 --> 00:11:08.300
I actually haven't used queues in Python before,


00:11:08.300 --> 00:11:10.180
but it's on my to-do list.


00:11:10.180 --> 00:11:13.100
Because I mean, designing complex systems,


00:11:13.100 --> 00:11:15.740
breaking it up into different processes


00:11:15.740 --> 00:11:19.700
with queues back and forth is a cool way to do it.


00:11:19.700 --> 00:11:21.420
- Yeah, I'm kind of inspired by this.


00:11:21.420 --> 00:11:23.860
I kind of want to do more stuff with queues as well.


00:11:23.860 --> 00:11:24.700
David?


00:11:24.700 --> 00:11:27.060
- Oh, it seems like a really clean, simple way to use queues.


00:11:27.060 --> 00:11:28.780
I'm with Brian, I haven't really used it


00:11:28.780 --> 00:11:30.940
in a Python context before,


00:11:30.940 --> 00:11:33.180
but like the examples you gave are perfect.


00:11:33.180 --> 00:11:35.340
You know, emails are, they take a long time.


00:11:35.340 --> 00:11:37.940
So you don't want to be binding up your main application,


00:11:37.940 --> 00:11:39.620
you need to dump those off into a background task.


00:11:39.620 --> 00:11:42.020
And this looks really, really simple to use.


00:11:42.020 --> 00:11:46.620
So, you know, I seem like it'd be worth a try for sure.


00:11:46.620 --> 00:11:47.460
- Yeah, for sure.


00:11:47.460 --> 00:11:49.840
Other things are like, you need to generate a report


00:11:49.840 --> 00:11:51.580
that takes 30 seconds, you know,


00:11:51.580 --> 00:11:54.080
pick off the generation and see if it's in the database


00:11:54.080 --> 00:11:56.620
and just do some sort of like Ajax poll


00:11:56.620 --> 00:11:59.460
until it's there or whatever.


00:11:59.460 --> 00:12:00.440
It has some more features.


00:12:00.440 --> 00:12:03.360
So it has a queue, which is first in first out,


00:12:03.360 --> 00:12:05.140
as you can imagine.


00:12:05.140 --> 00:12:07.740
It has a capped, I call it a capped collection.


00:12:07.740 --> 00:12:09.940
I don't feel like it should be a captive queue


00:12:09.940 --> 00:12:11.740
because it's implemented behind the scenes


00:12:11.740 --> 00:12:13.380
as a captive collection.


00:12:13.380 --> 00:12:15.260
They also say a bounded queue is another,


00:12:15.260 --> 00:12:19.380
aka, so the idea is if you're doing like analytics


00:12:19.380 --> 00:12:23.820
and logging and you're trying to eventually process that


00:12:23.820 --> 00:12:24.860
and save it to the database,


00:12:24.860 --> 00:12:26.160
but you wanna say, you know what?


00:12:26.160 --> 00:12:27.940
We really don't want this queue to get more


00:12:27.940 --> 00:12:30.660
than 100,000 items at a time


00:12:30.660 --> 00:12:32.180
'cause we should be writing this to the database


00:12:32.180 --> 00:12:33.380
and if something goes wrong,


00:12:33.380 --> 00:12:35.460
it could completely wreck the server.


00:12:35.460 --> 00:12:36.700
So you can create these captive queues


00:12:36.700 --> 00:12:38.380
where you're like, I'm gonna start throwing away old stuff


00:12:38.380 --> 00:12:40.140
if we don't get to it in time.


00:12:40.140 --> 00:12:43.500
Here's a DQ, which to me sounds like getting stuff


00:12:43.500 --> 00:12:46.100
out of a queue, but oh no, it's a double ended queue.


00:12:46.100 --> 00:12:48.500
A double ended queue.


00:12:48.500 --> 00:12:51.780
It should be a, yeah.


00:12:51.780 --> 00:12:52.780
Anyway, it should be,


00:12:52.780 --> 00:12:56.540
the idea is you can basically put stuff


00:12:56.540 --> 00:12:57.900
onto the front or the back


00:12:57.900 --> 00:12:59.980
and you can pop stuff off the front and the back.


00:12:59.980 --> 00:13:03.860
So you could, for example, put low priority items


00:13:03.860 --> 00:13:06.260
on the back or something's really important,


00:13:06.260 --> 00:13:08.120
you could kick it up to the front,


00:13:08.120 --> 00:13:09.160
right to the front of the queue.


00:13:09.160 --> 00:13:11.960
And then finally, you also do a stack.


00:13:11.960 --> 00:13:13.680
You can also do a priority queue,


00:13:13.680 --> 00:13:16.600
which is like sort of pretty close to what I described,


00:13:16.600 --> 00:13:18.800
but you can't jump ahead of the things


00:13:18.800 --> 00:13:21.240
that have a similar priority, right?


00:13:21.240 --> 00:13:24.520
Like if there's super urgent and then low,


00:13:24.520 --> 00:13:26.700
you can put like a super urgent new thing


00:13:26.700 --> 00:13:28.520
at the front of the super urgent ones,


00:13:28.520 --> 00:13:31.360
but it would appear before all the others, things like that.


00:13:31.360 --> 00:13:33.120
So this is all pretty neat.


00:13:33.120 --> 00:13:34.720
What I really like about this is obviously


00:13:34.720 --> 00:13:37.120
Python has queues built in, right?


00:13:37.120 --> 00:13:38.640
Like that's just a data type.


00:13:38.640 --> 00:13:40.360
List itself could basically be a queue.


00:13:40.360 --> 00:13:43.360
You can pop stuff off the front and shazam, you have a queue.


00:13:43.360 --> 00:13:46.240
But this is out of process, right?


00:13:46.240 --> 00:13:47.920
This means if you have to scale out


00:13:47.920 --> 00:13:51.440
for your worker processes in any sort of API,


00:13:51.440 --> 00:13:54.600
or you want it to be able to be durable


00:13:54.600 --> 00:13:56.920
across app restarts, things like that.


00:13:56.920 --> 00:13:59.400
And if you think, oh, I'm not gonna scale out across,


00:13:59.400 --> 00:14:00.600
I'm not having multiple servers.


00:14:00.600 --> 00:14:02.840
Like almost every Python web app and web API


00:14:02.840 --> 00:14:05.240
runs with multiple worker processes at a minimum.


00:14:05.240 --> 00:14:07.240
So yeah, you're scaling up.


00:14:07.240 --> 00:14:08.680
Anyway, I think this is pretty useful.


00:14:08.680 --> 00:14:10.920
And if you're all about Redis, this is cool.


00:14:10.920 --> 00:14:11.680
Redis seems nice.


00:14:11.680 --> 00:14:13.880
I'm kind of inspired to do something like this with MongoDB,


00:14:13.880 --> 00:14:14.880
but I'm also busy.


00:14:14.880 --> 00:14:16.920
So probably not right away.


00:14:16.920 --> 00:14:19.480
[LAUGHS]


00:14:19.480 --> 00:14:21.080
And John Sheehan out there in the live stream


00:14:21.080 --> 00:14:23.080
is telling me that--


00:14:23.080 --> 00:14:26.640
learned a few years ago that DQ is pronounced "deck."


00:14:26.640 --> 00:14:28.160
So yeah, double-ended.


00:14:28.160 --> 00:14:30.200
Yeah, all right, so deck.


00:14:30.200 --> 00:14:32.400
Thanks.


00:14:32.400 --> 00:14:34.000
And then Teddy on live stream says,


00:14:34.000 --> 00:14:35.900
I'm not too familiar with queues,


00:14:35.900 --> 00:14:40.320
but how would it work if you were a queue process


00:14:40.320 --> 00:14:41.680
that execute Python code,


00:14:41.680 --> 00:14:44.160
it would end up being a process sequentially


00:14:44.160 --> 00:14:46.020
because of the Python GIL.


00:14:46.020 --> 00:14:51.500
Yeah, so are you ending up with like a serial process


00:14:51.500 --> 00:14:53.960
because of this, a serial processing?


00:14:53.960 --> 00:14:56.580
I think it depends on just how you create the workers, right?


00:14:56.580 --> 00:14:58.360
So there's two ends that you build.


00:14:58.360 --> 00:15:00.160
One end is the put stuff in the queue,


00:15:00.160 --> 00:15:02.520
then you literally build the end that goes to the queue


00:15:02.520 --> 00:15:04.220
and says, give me the next item.


00:15:04.220 --> 00:15:06.840
And that's stored in Redis,


00:15:06.840 --> 00:15:08.760
which obviously can support multiple clients.


00:15:08.760 --> 00:15:13.480
So if you just scaled out the consumers of the queue messages,


00:15:13.480 --> 00:15:15.440
the things running the jobs,


00:15:15.440 --> 00:15:17.760
then you would escape the gill, right?


00:15:17.760 --> 00:15:20.520
Because you would have multiple processes.


00:15:20.520 --> 00:15:22.400
- You can do, you can have multiple things


00:15:22.400 --> 00:15:24.160
feeding the queue as well.


00:15:24.160 --> 00:15:25.080
- Yes.


00:15:25.080 --> 00:15:27.000
- Multiple web requests or something.


00:15:27.000 --> 00:15:27.960
- Yeah, absolutely.


00:15:27.960 --> 00:15:28.800
Absolutely.


00:15:28.800 --> 00:15:32.800
All right, David, what you got for us?


00:15:32.800 --> 00:15:38.800
All right, well, are either of you heavy Pandas users?


00:15:38.800 --> 00:15:44.800
I'm a Pandas admirer, and I use it a little bit, but I always feel like


00:15:44.800 --> 00:15:48.800
when I come to Pandas, I know there's way more I should be doing with this, and this is so cool, but


00:15:48.800 --> 00:15:52.800
not as much as I should be.


00:15:52.800 --> 00:15:56.800
And I use Pandas pretty heavily in my previous job to do a lot of analysis,


00:15:56.800 --> 00:15:59.680
especially on the one-dimensional data sets.


00:15:59.680 --> 00:16:02.600
And it always happened.


00:16:02.600 --> 00:16:04.120
When I first started using Pandas,


00:16:04.120 --> 00:16:06.320
I was doing a lot of really bad things like it arose


00:16:06.320 --> 00:16:06.840
and that type of thing.


00:16:06.840 --> 00:16:09.720
And the more you learn about it, the better you get


00:16:09.720 --> 00:16:12.800
at doing setup type operations.


00:16:12.800 --> 00:16:16.000
But even in the last couple of months,


00:16:16.000 --> 00:16:17.540
you'd think I'd have everything down.


00:16:17.540 --> 00:16:19.240
But the API is huge.


00:16:19.240 --> 00:16:21.320
And I always had these, ah, moments


00:16:21.320 --> 00:16:23.960
because I learned about something like Transform.


00:16:23.960 --> 00:16:26.600
And once I realized what you could do with Transform,


00:16:26.600 --> 00:16:28.560
It simplified so many things that I was doing.


00:16:28.560 --> 00:16:32.200
And the first item I have is an article that says,


00:16:32.200 --> 00:16:34.720
25 Panda functions you didn't know existed.


00:16:34.720 --> 00:16:36.880
I don't normally like these articles


00:16:36.880 --> 00:16:38.400
'cause they almost feel a little bit clickbaity,


00:16:38.400 --> 00:16:41.680
but this one actually had a handful of awe moments for me.


00:16:41.680 --> 00:16:43.360
So I thought I would go ahead and share it.


00:16:43.360 --> 00:16:45.900
So I have them listed in the show notes,


00:16:45.900 --> 00:16:47.160
kind of the awe moments for me,


00:16:47.160 --> 00:16:49.520
but between is a really nice,


00:16:49.520 --> 00:16:53.020
really nice, I think it would consider it a method


00:16:53.020 --> 00:16:55.040
on the data frame or a series,


00:16:55.040 --> 00:16:57.460
and basically allows you to simplify logic.


00:16:57.460 --> 00:17:00.280
Instead of trying to say greater than or equal to blank


00:17:00.280 --> 00:17:01.980
and less than or equal to blank,


00:17:01.980 --> 00:17:03.220
you can just say between values,


00:17:03.220 --> 00:17:05.240
very similar to the operation


00:17:05.240 --> 00:17:07.980
that you would do in a SQL transaction.


00:17:07.980 --> 00:17:11.200
Styler, I had no idea existed.


00:17:11.200 --> 00:17:12.820
You can actually apply styles


00:17:12.820 --> 00:17:16.420
to the tables coming out of Pandas.


00:17:16.420 --> 00:17:20.280
I do a lot to try to make my notebooks really, really pretty


00:17:20.280 --> 00:17:23.620
so that I can convert them to HTML or another format


00:17:23.620 --> 00:17:25.120
and share them with the business.


00:17:25.120 --> 00:17:27.040
The business isn't typically like Notebooks,


00:17:27.040 --> 00:17:30.120
but I'm trying because I can't stand the intermediate step


00:17:30.120 --> 00:17:31.280
of copying to a PowerPoint.


00:17:31.280 --> 00:17:33.760
But this would definitely help.


00:17:33.760 --> 00:17:35.040
You can do gradients.


00:17:35.040 --> 00:17:37.800
You may have a bunch of different functions


00:17:37.800 --> 00:17:39.080
behind that.


00:17:39.080 --> 00:17:44.400
Options is another one I've kind of already


00:17:44.400 --> 00:17:45.880
played with a little bit.


00:17:45.880 --> 00:17:48.380
But there's one in here that I wanted to try before the show.


00:17:48.380 --> 00:17:49.300
I hadn't had a chance.


00:17:49.300 --> 00:17:51.400
You can change the graphing back end on pandas


00:17:51.400 --> 00:17:52.960
from @plotlib to something else.


00:17:52.960 --> 00:17:57.200
So at some point I'm going to try changing it to plot because that's my preferred plotting


00:17:57.200 --> 00:17:59.500
library for most things.


00:17:59.500 --> 00:18:04.280
Convert D types is really nice if you know you have a categorical type set of information.


00:18:04.280 --> 00:18:08.040
You can dramatically reduce how much memory is taken.


00:18:08.040 --> 00:18:10.520
Mask was a nice one.


00:18:10.520 --> 00:18:15.480
It basically allows you to quickly convert somewhere down here.


00:18:15.480 --> 00:18:20.680
Quickly convert certain particular values or values that meet a criteria to another


00:18:20.680 --> 00:18:21.680
value.


00:18:21.680 --> 00:18:24.760
this oftentimes in multiple stages,


00:18:24.760 --> 00:18:27.520
this would clean up that code significantly.


00:18:27.520 --> 00:18:31.840
Any smallest and any largest also could have been very helpful.


00:18:31.840 --> 00:18:35.100
Essentially, it's similar to a max or a min,


00:18:35.100 --> 00:18:36.800
but instead of just pulling a single,


00:18:36.800 --> 00:18:40.040
you could pull, in this case, five.


00:18:40.040 --> 00:18:42.800
Clip at time.


00:18:42.800 --> 00:18:45.080
>> Cool. If I want to see


00:18:45.080 --> 00:18:49.960
the five largest revenue producing customers in my data frame,


00:18:49.960 --> 00:18:51.880
I could just quick do that, yeah.


00:18:51.880 --> 00:18:53.840
- Yep, and there are ways you can,


00:18:53.840 --> 00:18:55.000
like with anything else, pandas,


00:18:55.000 --> 00:18:57.840
you could use a couple other methods to get that done too,


00:18:57.840 --> 00:19:00.320
but it's just so much cleaner to do diamonds


00:19:00.320 --> 00:19:02.840
and largest five and then price.


00:19:02.840 --> 00:19:04.400
It's just very clean and fast


00:19:04.400 --> 00:19:06.600
instead of having multiple lines to do a transformation


00:19:06.600 --> 00:19:09.360
and then a transformation and then another chain.


00:19:09.360 --> 00:19:12.120
So I wanted to suggest this article, like I said,


00:19:12.120 --> 00:19:14.160
I'd been doing pandas for a couple of years


00:19:14.160 --> 00:19:16.760
and I still have these ah moments.


00:19:16.760 --> 00:19:18.480
And this article,


00:19:18.480 --> 00:19:20.920
Well, some of them are maybe quite odd moments for me.


00:19:20.920 --> 00:19:22.600
They may be odd moments for someone else


00:19:22.600 --> 00:19:25.680
because everybody probably knows 20%


00:19:25.680 --> 00:19:28.280
and maybe a slightly different 20% of the Pandas API.


00:19:28.280 --> 00:19:30.800
- Yeah, this is really neat.


00:19:30.800 --> 00:19:32.240
I love these types of things that,


00:19:32.240 --> 00:19:34.320
I mean, it's super easy to just scan through


00:19:34.320 --> 00:19:37.720
and decide whether or not it's really helpful to you.


00:19:37.720 --> 00:19:39.960
The one for me, the Pandas one that had the biggest,


00:19:39.960 --> 00:19:44.800
like, oh my goodness, was web scraping


00:19:44.800 --> 00:19:47.440
and like pulling HTML tables


00:19:47.440 --> 00:19:49.400
and turning those into data frames.


00:19:49.400 --> 00:19:51.600
So like, obviously I can go, yeah,


00:19:51.600 --> 00:19:53.440
you go with like requests and beautiful soup


00:19:53.440 --> 00:19:55.800
and do something, but then you still end up


00:19:55.800 --> 00:19:57.720
with just a table of HTML.


00:19:57.720 --> 00:20:01.320
But with pandas, you can say, read HTML


00:20:01.320 --> 00:20:04.080
and then just give me table three as a data frame.


00:20:04.080 --> 00:20:05.480
Like it's ridiculous, right?


00:20:05.480 --> 00:20:09.960
- Now pandas has some really nice I/O tools too


00:20:09.960 --> 00:20:14.240
around CSVs, Parquet, the most common data format types


00:20:14.240 --> 00:20:16.320
and even some of the lesser common ones.


00:20:16.320 --> 00:20:18.820
It's a really nice library overall.


00:20:18.820 --> 00:20:22.100
But yeah, like I said, there's always some odd moments,


00:20:22.100 --> 00:20:23.780
and it's nice to have an article that


00:20:23.780 --> 00:20:25.540
highlights several odd moments for me.


00:20:25.540 --> 00:20:29.340
>> Yeah, super cool. Go ahead, Brian.


00:20:29.340 --> 00:20:33.580
>> The one that jumps right out at me was the number one one.


00:20:33.580 --> 00:20:37.500
I didn't know that you could just write Excel with Pandas.


00:20:37.500 --> 00:20:38.820
That's pretty cool.


00:20:38.820 --> 00:20:41.760
>> I think there's a wrapper around write Excel


00:20:41.760 --> 00:20:45.520
that simplifies converting a DataFrame to Excel.


00:20:45.520 --> 00:20:48.840
But I think, right, Excel lets you do some more intricate


00:20:48.840 --> 00:20:50.840
things with Excel.


00:20:50.840 --> 00:20:52.240
- Yeah, that's pretty cool.


00:20:52.240 --> 00:20:54.520
- Yeah, that's super cool.


00:20:54.520 --> 00:20:55.820
All right, before we move on really quick


00:20:55.820 --> 00:21:00.520
from the live stream, I liked when you asked


00:21:00.520 --> 00:21:02.600
if anyone uses Pandas and likes it,


00:21:02.600 --> 00:21:05.840
Dean Langston just said, "Yes, all caps, beautiful."


00:21:05.840 --> 00:21:08.240
But then also suggested, pointed out this project


00:21:08.240 --> 00:21:11.440
that he built that is like a give you live tips


00:21:11.440 --> 00:21:13.380
while you work with Pandas in notebooks type thing


00:21:13.380 --> 00:21:14.820
called Dove Panda.


00:21:14.820 --> 00:21:17.380
So I literally am just checking this out now,


00:21:17.380 --> 00:21:19.380
but as you work with it, you can see here,


00:21:19.380 --> 00:21:21.060
like it gives you like little tips, like,


00:21:21.060 --> 00:21:23.580
oh, by the way, do you know, you can concatenate like this.


00:21:23.580 --> 00:21:25.940
If you specify to access one, you get, you know,


00:21:25.940 --> 00:21:27.820
such and such and gives you a little,


00:21:27.820 --> 00:21:29.980
little tips and tricks as you work with it.


00:21:29.980 --> 00:21:31.060
So people can check that out.


00:21:31.060 --> 00:21:31.900
- Indeed.


00:21:31.900 --> 00:21:32.720
- Yeah.


00:21:32.720 --> 00:21:34.260
- So it's a good reading on moments.


00:21:34.260 --> 00:21:37.260
- Exactly, exactly.


00:21:37.260 --> 00:21:40.460
Thanks, Dean, Brian.


00:21:40.460 --> 00:21:42.880
I do love some FastAPI and I love Rich


00:21:42.880 --> 00:21:44.700
and I'm looking forward to what you're gonna do


00:21:44.700 --> 00:21:46.300
by trying to put these together?


00:21:46.300 --> 00:21:50.260
>> Yeah. We've been watching Rich,


00:21:50.260 --> 00:21:53.620
of course, and FastAPI a lot.


00:21:53.620 --> 00:21:59.300
This article is by Hayden Kodelman, I think.


00:21:59.300 --> 00:22:04.500
It's FastAPI and Rich Tracebacks in Development.


00:22:04.500 --> 00:22:08.540
The idea is that one of the cool things that Rich has is


00:22:08.540 --> 00:22:11.180
like these awesome tracebacks and logging.


00:22:11.180 --> 00:22:12.940
They're just beautiful.


00:22:12.940 --> 00:22:15.420
If you can say a traceback is beautiful,


00:22:15.420 --> 00:22:17.660
it's because of rich probably.


00:22:17.660 --> 00:22:21.300
They look pretty great and the logging is pretty good.


00:22:21.300 --> 00:22:26.260
I'm just going to scroll down to some of these examples at the bottom.


00:22:26.260 --> 00:22:30.700
It's tiny, but the logging is nice and colorized and stuff.


00:22:30.700 --> 00:22:32.300
Then the exceptions,


00:22:32.300 --> 00:22:34.580
one of the things with the tracebacks and exceptions


00:22:34.580 --> 00:22:36.580
is there's a highlighted line number,


00:22:36.580 --> 00:22:41.780
it highlights the actual file name and puts in lower,


00:22:41.780 --> 00:22:45.940
more muted colors, the stuff you don't really need to care about right away.


00:22:45.940 --> 00:22:48.660
And it's just kind of a nice way to do it.


00:22:48.660 --> 00:22:51.780
>> It gives you syntax highlighting in your,


00:22:51.780 --> 00:22:53.980
like keyword highlighting in your code.


00:22:53.980 --> 00:22:54.740
>> Yeah.


00:22:54.740 --> 00:22:59.740
>> In the code that is the stack trace of the crash in the traceback.


00:22:59.740 --> 00:23:08.900
>> And so we've seen some examples of how to use the rich tracebacks from other programs.


00:23:08.900 --> 00:23:11.980
but I haven't seen it actually written up by somebody else.


00:23:11.980 --> 00:23:15.940
So this is nice. Using FastAPI,


00:23:15.940 --> 00:23:20.860
FastAPI is awesome for building web APIs.


00:23:20.860 --> 00:23:25.260
But how do you do this? How do you get your application to do this?


00:23:25.260 --> 00:23:27.540
I'm not going to scroll through all of this,


00:23:27.540 --> 00:23:30.020
but the gist of it is,


00:23:30.020 --> 00:23:32.140
there's really only a few steps.


00:23:32.140 --> 00:23:36.380
So this post walks through all of it with all the code.


00:23:36.380 --> 00:23:39.560
For the most part, you create a database,


00:23:39.560 --> 00:23:42.480
a data class with the logger configuration.


00:23:42.480 --> 00:23:45.560
Then you need a function that will either install


00:23:45.560 --> 00:23:48.760
rich as a handler or the production log configuration.


00:23:48.760 --> 00:23:51.780
I like that he puts the switch in place.


00:23:51.780 --> 00:23:53.480
The idea around this is,


00:23:53.480 --> 00:23:58.760
when you're debugging, you're going to use these nice tracebacks.


00:23:58.760 --> 00:24:01.060
But when it's in production,


00:24:01.060 --> 00:24:06.080
it's not going to use that, it's just going to do the default logging.


00:24:06.080 --> 00:24:10.400
Then you have to call logging basic config with the new settings.


00:24:10.400 --> 00:24:13.280
Then a little note that if you're using UVA Corn,


00:24:13.280 --> 00:24:15.920
you probably want to override the logger for that.


00:24:15.920 --> 00:24:19.600
That's it. Really sets it up and it's got all the code in place so that


00:24:19.600 --> 00:24:22.760
your FastAPI application can have


00:24:22.760 --> 00:24:26.280
these lovely logs and tracebacks during development.


00:24:26.280 --> 00:24:28.720
>> Yeah, that's super neat. David,


00:24:28.720 --> 00:24:31.640
are you a fan of either of these frameworks?


00:24:31.640 --> 00:24:34.200
>> I haven't had a chance to use Rich too much.


00:24:34.200 --> 00:24:38.880
I have been watching textual pretty closely on Twitter because it's just phenomenal.


00:24:38.880 --> 00:24:39.880
What he's able to do.


00:24:39.880 --> 00:24:40.880
Fascinating, right?


00:24:40.880 --> 00:24:44.160
And how do you have a document scrolling side thing in a terminal window?


00:24:44.160 --> 00:24:46.800
What's going on here?


00:24:46.800 --> 00:24:47.800
I love FastAPI.


00:24:47.800 --> 00:24:53.960
I built my wife's website using Flask and I liked how FastAPI was similar to Flask in


00:24:53.960 --> 00:24:54.960
a lot of ways.


00:24:54.960 --> 00:24:59.440
But some of the syntax was a little bit cleaner, although with the newer version of Flask,


00:24:59.440 --> 00:25:01.280
it kind of borrows some of the same syntax.


00:25:01.280 --> 00:25:08.280
And it's just got a lot of really good nested built in the API documentation was really


00:25:08.280 --> 00:25:12.280
I think that's kind of clutch when you're learning a new framework too, because you're


00:25:12.280 --> 00:25:14.080
not having to do like curl commands or anything like that.


00:25:14.080 --> 00:25:17.440
You can just bring up a web page and poke at it, you know, visually, which is which


00:25:17.440 --> 00:25:18.440
is pretty nice.


00:25:18.440 --> 00:25:20.280
So no, I really like fast.


00:25:20.280 --> 00:25:24.040
I just, you know, other than, you know, kind of building some small toy things haven't


00:25:24.040 --> 00:25:25.960
had a really compelling reason to use it yet.


00:25:25.960 --> 00:25:29.800
So yeah, yeah, very cool.


00:25:29.800 --> 00:25:33.400
These are compelling reasons, I think.


00:25:33.400 --> 00:25:35.720
- Definitely, definitely.


00:25:35.720 --> 00:25:38.480
Maybe some Arduino thing could run a FastAPI server,


00:25:38.480 --> 00:25:39.520
who knows?


00:25:39.520 --> 00:25:42.700
All right, so let me talk about some good news.


00:25:42.700 --> 00:25:43.880
Good news, good news.


00:25:43.880 --> 00:25:46.880
We've had a couple of things we've covered


00:25:46.880 --> 00:25:49.480
about some visionary sponsors coming on


00:25:49.480 --> 00:25:52.800
to support Python and the PSF and so on.


00:25:52.800 --> 00:25:54.600
It's fantastic, right?


00:25:54.600 --> 00:25:58.480
I've certainly whinged a lot about people


00:25:58.480 --> 00:26:02.060
running multi-billion dollar revenue companies


00:26:02.060 --> 00:26:04.220
and doing nothing really to give back


00:26:04.220 --> 00:26:06.120
than maybe a PR or something.


00:26:06.120 --> 00:26:08.020
But we've got Microsoft, we've got Bloomberg,


00:26:08.020 --> 00:26:10.540
we've got Google as visionary sponsors, right?


00:26:10.540 --> 00:26:15.020
And one of the things that that made possible


00:26:15.020 --> 00:26:18.700
is the CPython developer in residence.


00:26:18.700 --> 00:26:20.460
I don't know if it's directly related to one of those


00:26:20.460 --> 00:26:21.700
or if it's just sort of like that,


00:26:21.700 --> 00:26:22.760
sort of brought it all together.


00:26:22.760 --> 00:26:26.060
But recently the PSF said they're going to have


00:26:26.060 --> 00:26:28.560
a developer in residence position.


00:26:28.560 --> 00:26:32.660
And a well-known community member,


00:26:32.660 --> 00:26:34.660
friend of the show, Lucas Lenga,


00:26:34.660 --> 00:26:38.000
has applied and got hired.


00:26:38.000 --> 00:26:40.740
He's now the developer in residence.


00:26:40.740 --> 00:26:43.240
This is a little bit old news, it's from last month,


00:26:43.240 --> 00:26:46.240
but I wanted to make sure we gave it a quick shout out


00:26:46.240 --> 00:26:48.740
because I think it's going to be pretty interesting


00:26:48.740 --> 00:26:52.480
to know that there's a developer side person


00:26:52.480 --> 00:26:55.280
inside the PSF making sure things are going.


00:26:55.280 --> 00:26:58.340
So the PSF has seven, eight, nine,


00:26:58.340 --> 00:26:59.180
I don't know, something like this.


00:26:59.180 --> 00:27:02.380
I haven't got recent updates including this,


00:27:02.380 --> 00:27:07.380
but include this position, full-time employees, right?


00:27:07.380 --> 00:27:09.220
So there's a bunch of people who work there,


00:27:09.220 --> 00:27:13.660
but to my knowledge, this is the first like developer person


00:27:13.660 --> 00:27:17.460
rather than marketing, legal, whatever, right?


00:27:17.460 --> 00:27:21.260
All that sort of business director, administrative side.


00:27:21.260 --> 00:27:22.100
So this is pretty interesting.


00:27:22.100 --> 00:27:23.700
- Apologies to everybody that works at the PSF


00:27:23.700 --> 00:27:26.500
that's like, don't forget me.


00:27:26.500 --> 00:27:28.380
- Yeah, no, no, no, those are super important,


00:27:28.380 --> 00:27:31.100
but it's interesting that there's not been


00:27:31.100 --> 00:27:35.860
a Python developer type of role within that group,


00:27:35.860 --> 00:27:36.800
is all I'm saying.


00:27:36.800 --> 00:27:42.300
So they put that out, LucasLinga is now part of it,


00:27:42.300 --> 00:27:44.460
and there's some interesting takeaways here.


00:27:44.460 --> 00:27:49.460
So basically, let me do the,


00:27:50.860 --> 00:27:56.060
I'll just give a bit of a quote here for how Lucas decided


00:27:56.060 --> 00:27:57.820
to position this and how he sees it.


00:27:57.820 --> 00:27:59.860
He said, I don't really want this to be like,


00:27:59.860 --> 00:28:03.220
hey, I am the appointed CEO of Python.


00:28:03.220 --> 00:28:06.100
So listen to what I have to say, right?


00:28:06.100 --> 00:28:10.820
He said, no, he's incredibly hopeful for Python


00:28:10.820 --> 00:28:14.980
because of this and wanted to apply for it and so on.


00:28:14.980 --> 00:28:19.700
He says, I think it's a role with transformational potential


00:28:19.700 --> 00:28:20.740
for the project.


00:28:20.740 --> 00:28:23.660
In short, I believe the mission of the developer in residence,


00:28:23.660 --> 00:28:27.020
the DIR, is to accelerate the developer


00:28:27.020 --> 00:28:29.340
experience of everybody else.


00:28:29.340 --> 00:28:32.500
And that not includes just the core team, but most importantly,


00:28:32.500 --> 00:28:36.020
the drive-by contributors submitting pull requests


00:28:36.020 --> 00:28:37.820
and creating issues on the tracker.


00:28:37.820 --> 00:28:40.740
So he's hoping that with this role,


00:28:40.740 --> 00:28:44.220
he can do things like make sure that there's


00:28:44.220 --> 00:28:46.940
a steady review of the stream of PRs and issues


00:28:46.940 --> 00:28:48.300
so they don't get stale.


00:28:48.300 --> 00:28:51.900
and there's not a backlog, triage the issues,


00:28:51.900 --> 00:28:54.060
be present in the official communication channels


00:28:54.060 --> 00:28:57.020
to unblock people if they get stuck trying to contribute,


00:28:57.020 --> 00:28:59.900
keeping CI and test suites in a usable state,


00:28:59.900 --> 00:29:01.620
making them run quick,


00:29:01.620 --> 00:29:04.260
and keeping tabs on where the work is most needed


00:29:04.260 --> 00:29:06.140
in the projects that are most important.


00:29:06.140 --> 00:29:07.300
So he's sort of the,


00:29:07.300 --> 00:29:13.020
it sounds to me almost like the technical person in the room


00:29:13.020 --> 00:29:15.700
to help the community keep moving


00:29:15.700 --> 00:29:17.100
and just making sure,


00:29:17.100 --> 00:29:19.220
Oh, everyone's having a problem.


00:29:19.220 --> 00:29:21.340
Many people having a problem trying to do a PR


00:29:21.340 --> 00:29:23.220
'cause they can't get CPython to build.


00:29:23.220 --> 00:29:25.020
Let's make that incredibly simple for them


00:29:25.020 --> 00:29:26.060
and things like that.


00:29:26.060 --> 00:29:33.740
- Yeah, I like his attitude of where he's going with this.


00:29:33.740 --> 00:29:34.580
So.


00:29:34.580 --> 00:29:36.140
- Yep, yep.


00:29:36.140 --> 00:29:37.300
If I didn't point out,


00:29:37.300 --> 00:29:40.260
Lucas is also the creator of Black, the Black Formatter,


00:29:40.260 --> 00:29:42.140
which I know we've talked about


00:29:42.140 --> 00:29:44.020
in a hundred thousand variations here.


00:29:44.020 --> 00:29:44.860
So that's great.


00:29:46.020 --> 00:29:47.780
David, how do you feel about this?


00:29:47.780 --> 00:29:48.780
I think it's great.


00:29:48.780 --> 00:29:52.140
Any full-time person they can have working for the PSF


00:29:52.140 --> 00:29:55.220
or on Python directly is going to help increase stability.


00:29:55.220 --> 00:29:59.260
And I like his approach too, where he's going to try to increase throughput


00:29:59.260 --> 00:30:02.060
by maximizing everybody else's efficiency.


00:30:02.060 --> 00:30:03.220
I think that's a...


00:30:03.220 --> 00:30:06.500
Because it'd be easy to say, "Oh, I'm going to work on these features or on this."


00:30:06.500 --> 00:30:09.620
But he's most concerned about making development for Python


00:30:09.620 --> 00:30:10.980
as ergonomic as possible,


00:30:10.980 --> 00:30:13.940
which I think ultimately will create more throughput


00:30:13.940 --> 00:30:17.100
and a better Python in the long run.


00:30:17.100 --> 00:30:20.660
- Yeah, and absolutely props to the PSF


00:30:20.660 --> 00:30:22.700
because it's easy to hire somebody and say,


00:30:22.700 --> 00:30:24.980
here's what I want you to produce for us.


00:30:24.980 --> 00:30:26.900
It's harder to hire somebody and say,


00:30:26.900 --> 00:30:29.660
I want you to be an enabler of other people


00:30:29.660 --> 00:30:31.700
'cause it's hard to measure that, right?


00:30:31.700 --> 00:30:34.060
Yep.


00:30:34.060 --> 00:30:35.220
- One of the interesting things


00:30:35.220 --> 00:30:37.260
that I think that he's doing is,


00:30:37.260 --> 00:30:38.760
I'm not sure if he's gonna keep this up,


00:30:38.760 --> 00:30:40.580
but it looks like he has so far,


00:30:40.580 --> 00:30:44.460
is he puts out weekly report posts of what he's been doing.


00:30:44.460 --> 00:30:48.940
So this, I can't imagine having that much public scrutiny


00:30:48.940 --> 00:30:51.940
over what my work week looks like, but I mean--


00:30:51.940 --> 00:30:54.260
- Brian, why did you spend so much time working on CI?


00:30:54.260 --> 00:30:55.100
Come on.


00:30:55.100 --> 00:31:00.340
- So it's pretty impressive


00:31:00.340 --> 00:31:02.700
and it's cool that he's doing that.


00:31:02.700 --> 00:31:06.780
The entire Python world is watching,


00:31:06.780 --> 00:31:08.780
no pressure or anything.


00:31:08.780 --> 00:31:11.340
- Yeah, he did say he was a little nervous about this


00:31:11.340 --> 00:31:14.640
because this is the first year of this position.


00:31:14.640 --> 00:31:18.260
And so the success or failure he has will influence


00:31:18.260 --> 00:31:22.700
whether it continues and what happens in the future.


00:31:22.700 --> 00:31:24.220
So super cool.


00:31:24.220 --> 00:31:26.720
Let me get a little feedback from the audience here.


00:31:26.720 --> 00:31:30.700
So Sam Morley says, "Good for Lucas, he's great.


00:31:30.700 --> 00:31:32.540
"I watched a bunch of videos he did on YouTube


00:31:32.540 --> 00:31:34.740
"about making music with AsyncIO."


00:31:34.740 --> 00:31:36.780
I haven't seen those, I'll have to check them out.


00:31:36.780 --> 00:31:38.920
And Dean out in the live stream says,


00:31:38.920 --> 00:31:42.700
CEO of Python reminds me of a known joke in my country


00:31:42.700 --> 00:31:46.060
where this famous newscaster was shouting,


00:31:46.060 --> 00:31:48.140
get me the person in charge of the internet,


00:31:48.140 --> 00:31:50.340
get me the person in charge of the internet.


00:31:50.340 --> 00:31:52.660
- That's great.


00:31:52.660 --> 00:31:56.920
- Being out to let us know what country that is.


00:31:56.920 --> 00:31:57.760
That's awesome.


00:31:57.760 --> 00:32:01.060
All right, Brian, you want the next one?


00:32:01.060 --> 00:32:03.420
- What's that?


00:32:03.420 --> 00:32:04.260
- You're next.


00:32:04.260 --> 00:32:06.180
No, you already did yours, right?


00:32:06.180 --> 00:32:07.540
- Yeah, David's next.


00:32:07.540 --> 00:32:09.060
I gotta keep track of what's happening here.


00:32:09.060 --> 00:32:11.060
David, you're next.


00:32:11.060 --> 00:32:16.060
- Yep, so my next item is a library or framework.


00:32:16.060 --> 00:32:19.440
I'm not sure which one it falls under called Dagster.


00:32:19.440 --> 00:32:21.700
It is a data orchestrator


00:32:21.700 --> 00:32:25.140
for machine learning analytics and ETL.


00:32:25.140 --> 00:32:28.820
It's one of the first attempts I tried


00:32:28.820 --> 00:32:31.140
for any kind of data pipeline.


00:32:31.140 --> 00:32:32.820
And it's based in Python.


00:32:32.820 --> 00:32:35.500
So you programmatically build up your pipeline


00:32:35.500 --> 00:32:39.200
using Python and different decorators


00:32:39.200 --> 00:32:42.000
depending on what kind of... if you're building a solid


00:32:42.000 --> 00:32:45.080
or depending on what you're building in the pipeline


00:32:45.080 --> 00:32:47.560
or if you're doing configuration, use different decorators.


00:32:47.560 --> 00:32:50.400
And it took a little bit to wrap my head around it.


00:32:50.400 --> 00:32:52.640
I think it had more to do with the...


00:32:52.640 --> 00:32:57.260
just understanding how pipelines are typically constructed in industry.


00:32:57.260 --> 00:32:59.380
But once I got my head wrapped around it,


00:32:59.380 --> 00:33:00.640
it was really simple to use.


00:33:00.640 --> 00:33:02.640
I felt like I could produce things pretty quickly.


00:33:03.600 --> 00:33:07.840
One really nice thing that they do is they allow you to essentially


00:33:07.840 --> 00:33:10.680
work on your pipeline locally,


00:33:10.680 --> 00:33:13.800
then deploy to production to like a Kubernetes,


00:33:13.800 --> 00:33:16.440
or you can deploy to Airflow or Dask or whatever


00:33:16.440 --> 00:33:19.640
underlying engine you want to run your pipeline in.


00:33:19.640 --> 00:33:23.400
There's very little transition there.


00:33:23.400 --> 00:33:28.240
You're not developing something local and having to completely change it for


00:33:28.240 --> 00:33:31.840
like a cluster or larger scale.


00:33:32.440 --> 00:33:37.160
And another really nice feature it has is a UI called Daggett.


00:33:37.160 --> 00:33:39.840
So you could do everything via the command line if you want to,


00:33:39.840 --> 00:33:43.480
but it does come with a really nice UI


00:33:43.480 --> 00:33:46.240
that allows you to see an overview of your pipeline.


00:33:46.240 --> 00:33:49.360
It allows you to test it using the Playground.


00:33:49.360 --> 00:33:53.240
You can update your configuration in the Playground.


00:33:53.240 --> 00:33:56.280
You can look at previous runs to see if they passed or failed.


00:33:56.280 --> 00:33:59.160
It gives detailed logging and error messaging.


00:33:59.160 --> 00:34:05.480
So this by itself is pretty nice on top of an already very nice tool.


00:34:05.480 --> 00:34:10.060
So I can give a quick demo too.


00:34:10.060 --> 00:34:14.160
So this is the... I think it's the first part of this tutorial


00:34:14.160 --> 00:34:16.160
they have you where you have multiple solids.


00:34:16.160 --> 00:34:20.160
So these represent different pieces of processing.


00:34:20.160 --> 00:34:22.660
And then like I said, you can use the Playground.


00:34:22.660 --> 00:34:25.820
It'll check all of your configuration, everything to make sure it's correct


00:34:25.820 --> 00:34:27.820
before it lets you run anything.


00:34:27.820 --> 00:34:32.260
So if you have something misconfigured, it's not going to blow up halfway through a 30-minute


00:34:32.260 --> 00:34:33.260
job.


00:34:33.260 --> 00:34:34.260
And then when you...


00:34:34.260 --> 00:34:35.260
Oh, no.


00:34:35.260 --> 00:34:36.260
That's nice.


00:34:36.260 --> 00:34:37.260
Like that?


00:34:37.260 --> 00:34:38.260
Oh, no.


00:34:38.260 --> 00:34:39.260
That's unfortunate.


00:34:39.260 --> 00:34:40.260
No.


00:34:40.260 --> 00:34:44.140
So I'll probably forego the real-time demonstration.


00:34:44.140 --> 00:34:46.580
I think my terminal probably died is what that was.


00:34:46.580 --> 00:34:53.800
But yeah, it'll actually show a run in sequence and show the different pieces that are completing


00:34:53.800 --> 00:34:55.380
and feeding into the other piece too.


00:34:55.380 --> 00:35:00.780
So it's not so much for this because it's a very small, quick pipeline,


00:35:00.780 --> 00:35:03.120
but if you have longer SQL queries or something like that,


00:35:03.120 --> 00:35:06.660
it'll actually show in real time how it's processing.


00:35:06.660 --> 00:35:10.000
So you can get a visual intuition to what's going on


00:35:10.000 --> 00:35:12.000
on top of everything else too.


00:35:12.000 --> 00:35:13.600
Yeah.


00:35:13.600 --> 00:35:15.600
A couple of the resources around this too,


00:35:15.600 --> 00:35:18.400
if you want someone that explains it a little bit better than I do.


00:35:18.400 --> 00:35:21.200
The Data Engineering Podcast had an episode,


00:35:21.200 --> 00:35:24.140
and Software Engineering Daily also did an episode about Dagster.


00:35:24.140 --> 00:35:27.060
So, you know, that's kind of where I first learned about it.


00:35:27.060 --> 00:35:29.060
And there's a lot of really good information in those podcasts.


00:35:29.060 --> 00:35:36.100
Yeah, these data pipeline frameworks are super interesting.


00:35:36.100 --> 00:35:38.340
I've certainly realized just how valuable they can be.


00:35:38.340 --> 00:35:42.620
Dean asks, David, how is this compared to Airflow?


00:35:42.620 --> 00:35:44.820
Do you have any idea? Have you tried? Have you looked at either?


00:35:44.820 --> 00:35:47.260
This was I haven't used Airflow.


00:35:47.260 --> 00:35:51.180
This is the first my first stab at any kind of data pipeline.


00:35:51.180 --> 00:35:53.860
And in my current job, we're not using Airflow or Dagster.


00:35:53.860 --> 00:35:56.260
or using one of the cloud-based tools.


00:35:56.260 --> 00:36:01.260
So it's, I think Airflow is more draggy, droppy,


00:36:01.260 --> 00:36:03.340
more visual, but I could be wrong about that.


00:36:03.340 --> 00:36:05.660
One thing I really liked about Dexter


00:36:05.660 --> 00:36:09.020
is at least compared to what I'm currently using


00:36:09.020 --> 00:36:10.340
is that you could programmatically


00:36:10.340 --> 00:36:12.020
create these interfaces.


00:36:12.020 --> 00:36:14.260
And technically the tool I'm using now


00:36:14.260 --> 00:36:17.220
has an API that you can throw JSON against


00:36:17.220 --> 00:36:19.820
to create your different resources and everything.


00:36:19.820 --> 00:36:22.420
But it's nice having Python code


00:36:22.420 --> 00:36:24.180
'cause that works a little bit better with my brain


00:36:24.180 --> 00:36:26.300
than a lot of the draggy, droppy stuff.


00:36:26.300 --> 00:36:27.140
- Yeah, yeah.


00:36:27.140 --> 00:36:28.300
- But we're just--


00:36:28.300 --> 00:36:32.140
- I did have the Airflow folks on the show,


00:36:32.140 --> 00:36:35.580
on Talk Python, not the show, a little while ago.


00:36:35.580 --> 00:36:38.480
It's not out yet, but last week maybe.


00:36:38.480 --> 00:36:40.580
And they pointed out that it's mostly,


00:36:40.580 --> 00:36:42.300
it's like pretty much all Python here as well.


00:36:42.300 --> 00:36:45.460
So you program it in Python over on Airflow,


00:36:45.460 --> 00:36:49.780
and then you have similar visual tools


00:36:49.780 --> 00:36:52.680
to actually see what's happening,


00:36:52.680 --> 00:36:54.800
but you can't interact with it through those things.


00:36:54.800 --> 00:36:57.800
You can just kind of watch it and debug it and stuff,


00:36:57.800 --> 00:36:58.640
from my understanding.


00:36:58.640 --> 00:37:00.600
So I would put them in a pretty similar category.


00:37:00.600 --> 00:37:03.360
I would say one thing that's pretty interesting is there's,


00:37:03.360 --> 00:37:04.360
that's not an old plot, actually,


00:37:04.360 --> 00:37:06.640
I wanted to, Airflow, GitHub is what I wanted


00:37:06.640 --> 00:37:08.760
to sort of point out.


00:37:08.760 --> 00:37:12.400
I was really surprised to learn that Airflow has 22,000 stars


00:37:12.400 --> 00:37:13.800
on GitHub, which kind of blew my mind.


00:37:13.800 --> 00:37:15.080
I thought of it as like a,


00:37:15.080 --> 00:37:16.960
it's not this little framework that people might use.


00:37:16.960 --> 00:37:17.880
Apparently it's popular.


00:37:17.880 --> 00:37:19.400
I'm not really sure about Dagster.


00:37:19.400 --> 00:37:20.840
I guess I could look as well.


00:37:20.840 --> 00:37:22.880
- I think it's relatively new, so I'd be surprised


00:37:22.880 --> 00:37:24.960
if it were quite as popular as Airflow.


00:37:24.960 --> 00:37:29.080
But one nice thing that Dagster can do,


00:37:29.080 --> 00:37:33.380
if you're running, or if you have Airflow pipelines


00:37:33.380 --> 00:37:36.320
that you're using, you can use that server


00:37:36.320 --> 00:37:37.320
to run Dagster 2.


00:37:37.320 --> 00:37:39.720
It can basically pilot you something


00:37:39.720 --> 00:37:41.800
that's compatible with Airflow if you need to do that.


00:37:41.800 --> 00:37:44.400
So, and there's a couple of different,


00:37:44.400 --> 00:37:47.360
I think, translation, ways you can translate it too.


00:37:47.360 --> 00:37:53.920
So it's it seems like a pretty interesting tool. And like I said, I had developed a small pipeline in my previous job


00:37:53.920 --> 00:37:55.280
It's kind of my first


00:37:55.280 --> 00:38:00.160
stab at pipelines to to eliminate it in excel sheet that was doing a bunch of horrible awful


00:38:00.160 --> 00:38:05.440
SQL queries I could just imagine that people are trying to do this with excel and it was probably wrong


00:38:05.440 --> 00:38:10.640
It well, it was not necessarily incorrect, but it was wrong to do it. Well, it was well it was


00:38:10.640 --> 00:38:13.600
It was an interesting


00:38:14.720 --> 00:38:17.020
Excel's just very interesting to reverse engineering.


00:38:17.020 --> 00:38:19.020
It's a lot of go-to statements.


00:38:19.020 --> 00:38:22.140
It's ubiquitous, but it's definitely,


00:38:22.140 --> 00:38:25.500
as far as programming production systems, not a good tool.


00:38:25.500 --> 00:38:28.380
Yeah, very cool.


00:38:28.380 --> 00:38:30.700
All right, so I got some more real-time updates here.


00:38:30.700 --> 00:38:33.260
Teddy says, "I know one of the big differences with Airflow


00:38:33.260 --> 00:38:35.100
is that you can use the output of a task


00:38:35.100 --> 00:38:37.300
as the input of the next task.


00:38:37.300 --> 00:38:39.900
From what I understand, Dagster is kind of a second-generation


00:38:39.900 --> 00:38:40.820
data orchestration.


00:38:40.820 --> 00:38:44.740
I'm unsure which generation Airflow would be,


00:38:44.740 --> 00:38:46.220
but here we go.


00:38:46.220 --> 00:38:48.700
And then Airflow mostly assumes you store


00:38:48.700 --> 00:38:50.180
and load data in each task,


00:38:50.180 --> 00:38:53.540
even though Airflow has something called Xcom,


00:38:53.540 --> 00:38:56.260
which allows you to pass the output as input of the next.


00:38:56.260 --> 00:38:57.860
Okay, interesting.


00:38:57.860 --> 00:39:00.740
Yeah, thanks for all that background info there.


00:39:00.740 --> 00:39:01.580
I haven't used either,


00:39:01.580 --> 00:39:03.660
but I definitely think they're both neat.


00:39:03.660 --> 00:39:07.740
And I feel there's a lot of places that are just like,


00:39:07.740 --> 00:39:08.660
well, how else are we going to do it?


00:39:08.660 --> 00:39:10.460
Of course we're going to use that spreadsheet, right?


00:39:10.460 --> 00:39:13.140
And if they had tools like this, it would be very empowering.


00:39:13.140 --> 00:39:15.580
One of the things I find very interesting about these frameworks


00:39:15.580 --> 00:39:17.940
is usually what you end up building is like the little piece,


00:39:17.940 --> 00:39:20.700
like load the CSV into the database,


00:39:20.700 --> 00:39:24.460
or run the report that gets me the revenue for the day,


00:39:24.460 --> 00:39:28.020
or what you end up building are very, very small pieces,


00:39:28.020 --> 00:39:30.300
and you don't have to worry about the reusability,


00:39:30.300 --> 00:39:33.060
the reproducibility, the durability.


00:39:33.060 --> 00:39:35.780
You just go, "I'm going to build an incredibly small bit of Python,


00:39:35.780 --> 00:39:38.620
and we'll just click it in as part of this workflow,"


00:39:38.620 --> 00:39:41.160
which really seems to empower people,


00:39:41.160 --> 00:39:43.480
almost like the microservices story,


00:39:43.480 --> 00:39:45.120
but for data processing,


00:39:45.120 --> 00:39:47.480
without all the hard deployment side of things.


00:39:47.480 --> 00:39:52.280
- I hope that they, if they don't already have it,


00:39:52.280 --> 00:39:55.920
I hope that they put a tool connected with Degster


00:39:55.920 --> 00:39:59.840
called DegDabit, 'cause it needs to be there, I think.


00:39:59.840 --> 00:40:04.320
Maybe some sort of capture tool or something.


00:40:04.320 --> 00:40:05.480
DegDabit would be good.


00:40:06.360 --> 00:40:09.100
- Yeah, yeah, I love the UI bit of it as well.


00:40:09.100 --> 00:40:12.060
All right, quick bit of followup.


00:40:12.060 --> 00:40:13.060
I guess, Brian, you wanna start?


00:40:13.060 --> 00:40:14.260
You got any extras today?


00:40:14.260 --> 00:40:18.700
- I've got just a vanity extra.


00:40:18.700 --> 00:40:22.900
So one of the things that we noticed


00:40:22.900 --> 00:40:27.500
Will mentioned about textual,


00:40:27.500 --> 00:40:29.800
we talked about textual briefly.


00:40:29.800 --> 00:40:34.220
The stars on textual is just going through the roof.


00:40:34.220 --> 00:40:35.140
- I love the graph.


00:40:35.140 --> 00:40:39.500
What like, is this the XKCD format of Matplotlib


00:40:39.500 --> 00:40:41.140
or something, what is this?


00:40:41.140 --> 00:40:44.100
- It's a, I have no idea.


00:40:44.100 --> 00:40:44.940
- It looks great though.


00:40:44.940 --> 00:40:46.380
Anyway, show us the other pictures.


00:40:46.380 --> 00:40:47.780
Yeah, the stars are insane.


00:40:47.780 --> 00:40:50.660
It's like a vertical line on a graph.


00:40:50.660 --> 00:40:53.380
- One of my own projects has a similar trajectory.


00:40:53.380 --> 00:40:55.400
So I wanted to just highlight that.


00:40:55.400 --> 00:40:58.420
It's looking up too.


00:40:58.420 --> 00:41:00.980
Of course, I only have 16 stars.


00:41:00.980 --> 00:41:02.860
Will has like 3000.


00:41:02.860 --> 00:41:05.980
So a little different, but still look,


00:41:05.980 --> 00:41:07.020
it's done. - Wow.


00:41:07.020 --> 00:41:09.900
Now that's, yeah, that's awesome.


00:41:09.900 --> 00:41:12.320
(indistinct)


00:41:12.320 --> 00:41:15.900
Hey, you just got to extrapolate a little bit.


00:41:15.900 --> 00:41:17.140
No, that's really cool.


00:41:17.140 --> 00:41:17.980
Awesome.


00:41:17.980 --> 00:41:21.140
David, you got any extra stuff you wanna throw out?


00:41:21.140 --> 00:41:23.140
- Yeah, I have one extra.


00:41:23.140 --> 00:41:25.700
I didn't load it on my screen over here.


00:41:25.700 --> 00:41:28.780
Let me see if I can pop it over real quick.


00:41:28.780 --> 00:41:31.980
But, and this isn't Python,


00:41:31.980 --> 00:41:33.780
but I know SQL and Python--


00:41:33.780 --> 00:41:37.660
- Are you gonna go back to some nostalgic time


00:41:37.660 --> 00:41:39.620
on the internet where you open up a DOS prompt


00:41:39.620 --> 00:41:41.220
and type Win to start Windows?


00:41:41.220 --> 00:41:42.820
What is this?


00:41:42.820 --> 00:41:44.380
- This is a modern SQL.


00:41:44.380 --> 00:41:47.100
It's a really fantastic slideshow


00:41:47.100 --> 00:41:49.500
that goes through a lot of updates.


00:41:49.500 --> 00:41:51.740
So if you're still doing SQL the old fashioned way,


00:41:51.740 --> 00:41:54.820
it shows you how you can replace that with,


00:41:54.820 --> 00:41:58.980
you know, better, cleaner, more concise versions of it.


00:41:58.980 --> 00:42:00.260
There are so many things in here


00:42:00.260 --> 00:42:04.100
that I was doing a lot of horrible hacky tricks to get to work


00:42:04.100 --> 00:42:07.220
that you could take care of in one line for SQL.


00:42:07.220 --> 00:42:09.220
Even with some of the newer things I've learned,


00:42:09.220 --> 00:42:12.060
there's just so many great...


00:42:12.060 --> 00:42:14.460
I don't know if you call them tools or methods or what,


00:42:14.460 --> 00:42:18.860
but Python and SQL tend to work together a lot,


00:42:18.860 --> 00:42:20.220
especially in the data space.


00:42:20.220 --> 00:42:24.700
So if you're like me, where you have some, I guess,


00:42:24.700 --> 00:42:27.660
self-taught SQL experience, something like this can be very helpful


00:42:27.660 --> 00:42:31.060
to kind of learn some of the, I guess, better practices


00:42:31.060 --> 00:42:32.740
for different things that you might want to try to do


00:42:32.740 --> 00:42:33.900
with SQL, so.


00:42:33.900 --> 00:42:38.060
- No, this is great because I learned SQL like in the 90s.


00:42:38.060 --> 00:42:40.540
So it's changed a lot since then.


00:42:40.540 --> 00:42:43.740
- And I was just thinking the same thing, Brian.


00:42:43.740 --> 00:42:47.060
It's been at least 10 years since I've tried to refresh


00:42:47.060 --> 00:42:48.720
my SQL skill.


00:42:48.720 --> 00:42:51.580
So there's probably a lot of stuff that's,


00:42:51.580 --> 00:42:52.900
oh, you shouldn't do this.


00:42:52.900 --> 00:42:53.860
Like, why do you do this?


00:42:53.860 --> 00:42:55.740
If you use this other keyword, it's more efficient,


00:42:55.740 --> 00:42:57.180
safer, faster, come on.


00:42:57.180 --> 00:42:59.180
Hmm


00:42:59.180 --> 00:43:01.180
Yeah, that's like it


00:43:01.180 --> 00:43:03.500
jealous of the people learning sequel now


00:43:03.500 --> 00:43:10.860
Yeah, how about you Michael got anything extra? I got some follow-up some follow-up from last time


00:43:10.860 --> 00:43:15.500
this comes to us from John Hagen and I


00:43:15.500 --> 00:43:19.500
Think I probably is going to said this so I said, oh, there's really cool time


00:43:19.500 --> 00:43:24.380
but if I would like about being able to use lowercase d dick and lowercase L list as


00:43:24.740 --> 00:43:28.880
type hints rather than from typing import capital L list


00:43:28.880 --> 00:43:31.220
or capital D dict, right?


00:43:31.220 --> 00:43:32.860
So, oh, that's coming in 3.10, fantastic.


00:43:32.860 --> 00:43:35.260
He's like, "Oh, you know, that's in 3.9,


00:43:35.260 --> 00:43:36.860
"so it's kind of already out."


00:43:36.860 --> 00:43:38.500
Oh, right, okay.


00:43:38.500 --> 00:43:39.940
But he did point out some things


00:43:39.940 --> 00:43:40.940
that are coming that are neat.


00:43:40.940 --> 00:43:42.260
So for example,


00:43:42.260 --> 00:43:45.900
previously we had to say,


00:43:45.900 --> 00:43:48.220
if I want a potentially optional,


00:43:48.220 --> 00:43:49.500
it could be none or it could be a list,


00:43:49.500 --> 00:43:51.060
and the list, if it is a list, has strings,


00:43:51.060 --> 00:43:55.420
you have say optional bracket list bracket str,


00:43:55.420 --> 00:43:56.460
and those are all capital


00:43:56.460 --> 00:43:58.740
'cause they have this parallel type implementation


00:43:58.740 --> 00:44:00.500
over in typing, right?


00:44:00.500 --> 00:44:03.540
In Python 3.9, I can now say optional


00:44:03.540 --> 00:44:06.340
of lowercase l list bracket str,


00:44:06.340 --> 00:44:07.180
and you might think,


00:44:07.180 --> 00:44:09.740
who cares if it's lowercase or uppercase L?


00:44:09.740 --> 00:44:11.780
Well, the difference is you don't have to do an import


00:44:11.780 --> 00:44:14.220
and explain to people who don't know that code,


00:44:14.220 --> 00:44:16.540
like, oh, you've got to go import this other type things


00:44:16.540 --> 00:44:17.380
to save the type.


00:44:17.380 --> 00:44:19.660
Yes, I know list is right there, but you can't use list.


00:44:19.660 --> 00:44:20.660
You got to do something else, right?


00:44:20.660 --> 00:44:24.740
So that's the feature that I was excited about that I said was in 3.10.


00:44:24.740 --> 00:44:26.740
It's in 3.9, so hooray.


00:44:26.740 --> 00:44:32.420
But he also pointed out that the union operators were simplified.


00:44:32.420 --> 00:44:35.620
It used to be you would have a similar syntax for union as optional.


00:44:35.620 --> 00:44:39.620
You would say union of bracket one thing comma bracket the other thing.


00:44:39.620 --> 00:44:45.620
But now you can say just type one pipe vertibar type two,


00:44:45.620 --> 00:44:49.380
and this actually allows us to model optional without importing optional.


00:44:49.380 --> 00:44:52.580
So instead of optional of list of string,


00:44:52.580 --> 00:44:55.540
we can just have list of string, pipe, none.


00:44:55.540 --> 00:44:57.340
>> Yeah, this is cool.


00:44:57.340 --> 00:44:58.820
I'm glad somebody pointed it out because


00:44:58.820 --> 00:45:02.920
the 3.10 announcements don't say anything about optional.


00:45:02.920 --> 00:45:05.780
But in effect, they do.


00:45:05.780 --> 00:45:08.420
You don't have to use this anymore.


00:45:08.420 --> 00:45:11.380
Are you going to start using this?


00:45:11.380 --> 00:45:13.240
>> The pipe thing?


00:45:13.240 --> 00:45:15.300
>> Well, yeah, and the optional thing.


00:45:15.300 --> 00:45:18.980
Because I started to and then I realized that if I start using that,


00:45:18.980 --> 00:45:20.980
then my code is 3.10 only.


00:45:20.980 --> 00:45:22.980
Yes, exactly.


00:45:22.980 --> 00:45:26.980
Which, it depends on the scenarios, right?


00:45:26.980 --> 00:45:28.980
So, for say, TalkByThon training,


00:45:28.980 --> 00:45:30.980
the code all behind that, I control the server.


00:45:30.980 --> 00:45:32.980
Yeah, nobody's looking at it.


00:45:32.980 --> 00:45:34.980
It's easy for me to make it the brand new thing.


00:45:34.980 --> 00:45:36.980
If I were to say, generate,


00:45:36.980 --> 00:45:38.980
if I were going to build an example app


00:45:38.980 --> 00:45:40.980
for a course,


00:45:40.980 --> 00:45:42.980
then I would be hesitant to use this right away.


00:45:42.980 --> 00:45:44.980
I might wait a year or two.


00:45:44.980 --> 00:45:46.980
Because I don't want to have to have people


00:45:46.980 --> 00:45:47.820
have a bad experience.


00:45:47.820 --> 00:45:48.780
Like, well, I have three nine.


00:45:48.780 --> 00:45:49.340
That's pretty new.


00:45:49.340 --> 00:45:51.860
That should be where like, nope, that doesn't work because of, I didn't want to


00:45:51.860 --> 00:45:52.820
say that word optional, right?


00:45:52.820 --> 00:45:53.820
Yeah.


00:45:53.820 --> 00:45:59.580
Um, if it was an open source project, I guess it would depend on how, if I wanted


00:45:59.580 --> 00:46:02.780
to support older versions, probably even longer there.


00:46:02.780 --> 00:46:03.660
Wait, I don't know.


00:46:03.660 --> 00:46:04.140
What do you think?


00:46:04.140 --> 00:46:10.620
Yeah, I was thinking a library specifically, you'd probably want to almost stick with


00:46:10.620 --> 00:46:14.820
the three, five to three, at least for a while to kind of flush out people that are


00:46:14.820 --> 00:46:16.700
using some of the older versions of Python.


00:46:16.700 --> 00:46:21.700
I'm using 3.9 on everything now, but I think for a lot of people,


00:46:21.700 --> 00:46:26.700
it's still pretty aggressive to have a 3.9 or higher requirement for a library.


00:46:26.700 --> 00:46:31.700
Yeah, I agree. A couple of bit of real-time feedback out there.


00:46:31.700 --> 00:46:36.700
Sam and Dean both say there are Dunder Future Imports that you can do now


00:46:36.700 --> 00:46:41.700
that will enable some of this stuff already.


00:46:41.700 --> 00:46:46.660
of this stuff already. So like from Dunder Future import pipe.


00:46:46.660 --> 00:46:50.660
>> I don't know if that's true or if it's a joke.


00:46:50.660 --> 00:46:59.220
>> Well, I do know that the Dunder Future stuff does support the newer type information.


00:46:59.220 --> 00:47:01.380
I don't know about for pipe. >> Okay.


00:47:01.380 --> 00:47:09.780
>> Yeah. Yeah. Okay. We can do some after coding on this. Coding after the recording.


00:47:09.780 --> 00:47:11.320
and we'll all know.


00:47:11.320 --> 00:47:14.180
Oh, Dean's kidding, yeah.


00:47:14.180 --> 00:47:17.180
So, but you really can, thank you.


00:47:17.180 --> 00:47:20.880
You really can do some of these other type information


00:47:20.880 --> 00:47:23.500
with the import under features.


00:47:23.500 --> 00:47:24.340
Okay.


00:47:24.340 --> 00:47:26.980
Ready for a joke?


00:47:26.980 --> 00:47:28.820
- Yeah.


00:47:28.820 --> 00:47:30.520
- All right, Brian.


00:47:30.520 --> 00:47:32.620
So you're gonna have to help me along here.


00:47:32.620 --> 00:47:34.660
- Okay.


00:47:34.660 --> 00:47:38.980
- So there's two developers staring very worried


00:47:38.980 --> 00:47:40.480
- Let's see the screen.


00:47:40.480 --> 00:47:45.480
You have one section, then a big long quiet section,


00:47:45.480 --> 00:47:46.700
and then some more.


00:47:46.700 --> 00:47:48.100
So you be the very first person


00:47:48.100 --> 00:47:49.820
and I'll be the second person here.


00:47:49.820 --> 00:47:51.140
- Okay.


00:47:51.140 --> 00:47:53.020
Okay, I hope it works.


00:47:53.020 --> 00:47:55.820
- Do not hope.


00:47:55.820 --> 00:47:56.660
Pray.


00:47:56.660 --> 00:47:59.580
Pray it works.


00:47:59.580 --> 00:48:01.380
Have you ever been there and just in this situation


00:48:01.380 --> 00:48:05.060
where you're just like, oh, it must work.


00:48:05.060 --> 00:48:06.780
If this doesn't work, we're done.


00:48:06.780 --> 00:48:07.740
- Yeah.


00:48:07.740 --> 00:48:09.860
Yeah, not so much in the software side of things,


00:48:09.860 --> 00:48:11.780
but when I was a manufacturing engineer,


00:48:11.780 --> 00:48:14.440
there was so many times we'd be troubleshooting a machine


00:48:14.440 --> 00:48:16.200
on a Saturday for eight hours straight,


00:48:16.200 --> 00:48:17.660
and you'd think you made it,


00:48:17.660 --> 00:48:19.700
and everybody's just holding their breath,


00:48:19.700 --> 00:48:21.980
crossing their fingers, "Work, work!"


00:48:21.980 --> 00:48:23.980
because we want to go home someday.


00:48:23.980 --> 00:48:25.200
So...


00:48:25.200 --> 00:48:27.900
Yeah, I remember how... Go ahead, Brian.


00:48:27.900 --> 00:48:30.620
No, I definitely feel this when I'm using it,


00:48:30.620 --> 00:48:32.700
when I'm working on C++ code,


00:48:32.700 --> 00:48:35.320
because you have to wait for it to compile


00:48:35.320 --> 00:48:38.520
and then load it and then test it and stuff like that.


00:48:38.520 --> 00:48:40.440
But even with Python stuff,


00:48:40.440 --> 00:48:43.340
I still feel this when I'm working on CI tools,


00:48:43.340 --> 00:48:44.600
because the continuous integration,


00:48:44.600 --> 00:48:48.360
you're not sure if you got the syntax right,


00:48:48.360 --> 00:48:52.040
the YAML right or whatever until you push it and see what happens.


00:48:52.040 --> 00:48:54.720
>> Yeah. Yeah, CI is a good point.


00:48:54.720 --> 00:48:56.320
You have so little visibility in there.


00:48:56.320 --> 00:49:00.280
If it's not working, there's one better real-time follow-up on mine here.


00:49:00.280 --> 00:49:05.280
It's like if you come over here and you look at the PEP 585,


00:49:05.280 --> 00:49:11.120
it does say the implementation of some of these new features


00:49:11.120 --> 00:49:13.800
under typing, this is the one that's coming out,


00:49:13.800 --> 00:49:14.720
that came out in 3.9.


00:49:14.720 --> 00:49:18.200
So as you can say from future import annotations


00:49:18.200 --> 00:49:20.840
and then start using lowercase L and things like that


00:49:20.840 --> 00:49:21.700
and lowercase D.


00:49:21.700 --> 00:49:25.160
Who knows, I know Dean said he was joking,


00:49:25.160 --> 00:49:26.400
but maybe you really can't get the pipe


00:49:26.400 --> 00:49:29.120
to come out that way, but at least you can do


00:49:29.120 --> 00:49:32.880
like these sort of three nine level changes


00:49:32.880 --> 00:49:35.280
using a back to three seven, it looks like.


00:49:35.280 --> 00:49:37.600
- Okay, cool.


00:49:37.600 --> 00:49:38.760
- All right, cool, cool.


00:49:38.760 --> 00:49:42.240
Well, that was a lot of fun.


00:49:42.240 --> 00:49:44.020
- Yeah, it was.


00:49:44.020 --> 00:49:46.680
I have another one, but I'm gonna save it, so.


00:49:46.680 --> 00:49:47.500
- Good.


00:49:47.500 --> 00:49:49.680
All right, well, I'm looking forward


00:49:49.680 --> 00:49:51.240
to hear about it next week.


00:49:51.240 --> 00:49:52.920
David, thank you for joining us.


00:49:52.920 --> 00:49:54.560
- Well, thank you for having me.


00:49:54.560 --> 00:49:56.200
- Yeah, yeah, and thanks for all the tips


00:49:56.200 --> 00:49:57.620
and stuff you've had throughout the years.


00:49:57.620 --> 00:49:58.840
And yeah, it's really good to be,


00:49:58.840 --> 00:50:02.880
Have you here and congratulations on your first dev job.


00:50:02.880 --> 00:50:04.360
That's fantastic.


00:50:04.360 --> 00:50:05.480
- It is fantastic.


00:50:05.480 --> 00:50:12.460
Thanks Dean for correcting us in real time.


00:50:12.460 --> 00:50:13.300
That's awesome.


00:50:13.300 --> 00:50:15.400
It's good.


00:50:15.400 --> 00:50:17.160
- So yeah, absolutely.


00:50:17.160 --> 00:50:18.400
Yeah, thank you everyone.


00:50:18.400 --> 00:50:22.320
And oh, Sam does sadly show us the import pipe


00:50:22.320 --> 00:50:24.600
from the future doesn't work, but yeah.


00:50:24.600 --> 00:50:25.680
Thanks everyone.


00:50:25.680 --> 00:50:26.520
See you all later.


00:50:26.520 --> 00:50:27.680
- Bye. - Well, thank you.


00:50:27.680 --> 00:50:37.680
[BLANK_AUDIO]

