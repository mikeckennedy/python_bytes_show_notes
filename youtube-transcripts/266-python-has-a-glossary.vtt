WEBVTT

00:00:00.000 --> 00:00:04.680
- Hello, everyone. Thanks for being here in the live stream. We're going to kick this


00:00:04.680 --> 00:00:05.680
off. Hi, Brian.


00:00:05.680 --> 00:00:06.680
- Hey.


00:00:06.680 --> 00:00:11.400
- Hey. Let's do this. Hello, and welcome to Python Bytes, where we deliver Python news


00:00:11.400 --> 00:00:19.880
and headlines directly to your earbuds. This is episode 266, recorded January 12, 2022.


00:00:19.880 --> 00:00:20.880
I'm Michael Kennedy.


00:00:20.880 --> 00:00:23.400
- And I'm Brian Okken.


00:00:23.400 --> 00:00:29.520
- So great to be here again. And we had this whole survey about having guests, Brian. And


00:00:29.520 --> 00:00:31.120
- This week we don't have a guest, it's just you and me,


00:00:31.120 --> 00:00:32.160
which I think is cool.


00:00:32.160 --> 00:00:33.400
- That's all right, it's good.


00:00:33.400 --> 00:00:35.080
- Yeah, yeah.


00:00:35.080 --> 00:00:35.900
People out there listening,


00:00:35.900 --> 00:00:36.800
if they really wanna be a guest,


00:00:36.800 --> 00:00:38.860
they can shoot us a message, right?


00:00:38.860 --> 00:00:42.400
But for now, we've got so much cool things,


00:00:42.400 --> 00:00:44.740
so many cool things to speak about.


00:00:44.740 --> 00:00:47.320
We're gonna need like a glossary or an FAQ,


00:00:47.320 --> 00:00:49.480
or I mean, something.


00:00:49.480 --> 00:00:53.800
- Yeah, well, actually, I don't know how I missed this


00:00:53.800 --> 00:00:58.080
for so long, but there was a tweet by, who was it?


00:00:58.080 --> 00:01:01.240
- Trey Hunter had a tweet that it mentioned


00:01:01.240 --> 00:01:03.240
and actually referred to the glossary.


00:01:03.240 --> 00:01:05.760
And I'm like, what, we have a glossary?


00:01:05.760 --> 00:01:07.420
I never checked it out before.


00:01:07.420 --> 00:01:10.960
So on the python.org website,


00:01:10.960 --> 00:01:13.980
there at docs.python.org, there's a glossary.


00:01:13.980 --> 00:01:15.980
And it's actually pretty cool.


00:01:15.980 --> 00:01:17.280
There's a whole bunch of stuff.


00:01:17.280 --> 00:01:21.480
Like if you forget what abstract base classes are,


00:01:21.480 --> 00:01:22.320
it's there.


00:01:22.320 --> 00:01:24.600
And there's, so there's Python stuff,


00:01:24.600 --> 00:01:26.020
there's programming stuff.


00:01:26.860 --> 00:01:29.260
- Even defines what the three arrows mean.


00:01:29.260 --> 00:01:33.540
- Yeah, like the three arrows, that's the first one.


00:01:33.540 --> 00:01:36.260
Default Python prompt, but also the dot, dot, dot.


00:01:36.260 --> 00:01:37.260
What is that?


00:01:37.260 --> 00:01:38.100
The ellipses.


00:01:38.100 --> 00:01:41.460
And two to three, see this threw me off once


00:01:41.460 --> 00:01:42.300
when I first started.


00:01:42.300 --> 00:01:44.260
I was like, what's this two to three thing?


00:01:44.260 --> 00:01:45.580
Is this a third party package?


00:01:45.580 --> 00:01:48.460
And it wasn't obvious to me that it was built in.


00:01:48.460 --> 00:01:49.940
So that's kind of neat.


00:01:49.940 --> 00:01:52.220
But it shouldn't be an issue anymore


00:01:52.220 --> 00:01:54.740
because everybody's on Python three now, right?


00:01:54.740 --> 00:01:57.780
So anyway, so the glossary,


00:01:57.780 --> 00:02:00.580
I just, just as just a shout out that this is here,


00:02:00.580 --> 00:02:03.140
it's fun, so check it out.


00:02:03.140 --> 00:02:05.700
The other thing that this refers to


00:02:05.700 --> 00:02:08.140
the other documentation in Python a lot.


00:02:08.140 --> 00:02:13.100
And one of the things that refers to sometimes is the FAQ.


00:02:13.100 --> 00:02:15.260
And also didn't know that was there.


00:02:15.260 --> 00:02:16.420
- We have an FAQ.


00:02:16.420 --> 00:02:19.220
- Yeah, and it's split into a whole bunch of stuff


00:02:19.220 --> 00:02:21.060
like general Python and programming


00:02:21.060 --> 00:02:24.100
and history and design and stuff.


00:02:24.100 --> 00:02:27.160
And like, and I ran across it because one of the things


00:02:27.160 --> 00:02:29.760
I looked up when I followed from the glossary


00:02:29.760 --> 00:02:32.500
was this question of what's the difference


00:02:32.500 --> 00:02:35.380
between arguments and parameters.


00:02:35.380 --> 00:02:37.480
And it's something that I've always messed up.


00:02:37.480 --> 00:02:39.780
And now I think I have it.


00:02:39.780 --> 00:02:42.760
Parameters are the names of things


00:02:42.760 --> 00:02:44.820
that are appearing in the function definition


00:02:44.820 --> 00:02:47.960
and the arguments are the values that get passed in.


00:02:47.960 --> 00:02:48.800
Neat.


00:02:48.800 --> 00:02:50.200
Don't know why I didn't--


00:02:50.200 --> 00:02:51.640
- Sometimes people use them interchangeably,


00:02:51.640 --> 00:02:55.920
but they kind of talk about different ways


00:02:55.920 --> 00:02:57.680
of working with that data.


00:02:57.680 --> 00:02:59.600
- Yeah, but like, let's say you're new,


00:02:59.600 --> 00:03:02.420
either new to Python or new to programming,


00:03:02.420 --> 00:03:06.120
some of these perusals, some of these are great things.


00:03:06.120 --> 00:03:10.720
Like why did my changing list Y also change list X?


00:03:10.720 --> 00:03:12.720
Well, this will help you understand


00:03:12.720 --> 00:03:17.120
why there's the naming system in Python


00:03:17.120 --> 00:03:17.960
and stuff like that.


00:03:17.960 --> 00:03:20.140
So it's pretty great.


00:03:21.160 --> 00:03:23.200
- Yeah, it talks about references and all sorts of stuff.


00:03:23.200 --> 00:03:24.240
Yeah, quite cool.


00:03:24.240 --> 00:03:28.560
I did know that we had it, but yeah, that's cool.


00:03:28.560 --> 00:03:29.840
- You did know it was there?


00:03:29.840 --> 00:03:30.880
- No, I did not know it was there.


00:03:30.880 --> 00:03:31.720
That's great.


00:03:31.720 --> 00:03:32.560
- Okay, yeah.


00:03:32.560 --> 00:03:35.600
- I didn't know anything about it.


00:03:35.600 --> 00:03:37.120
So I wanna talk about something else.


00:03:37.120 --> 00:03:39.160
I wanna talk about any IO.


00:03:39.160 --> 00:03:41.280
As I'm sure you and a lot of listeners know,


00:03:41.280 --> 00:03:44.800
I'm a big fan of asyncio and async in a wait.


00:03:44.800 --> 00:03:46.840
I think it really unlocks a lot of potential


00:03:46.840 --> 00:03:48.900
when you're waiting on things.


00:03:48.900 --> 00:03:50.560
There's been a lot of analysis saying,


00:03:50.560 --> 00:03:52.720
oh, I did this computational thing


00:03:52.720 --> 00:03:54.360
and it didn't make it any faster, it made it slower.


00:03:54.360 --> 00:03:56.560
It's like, yeah, 'cause it only scales waiting


00:03:56.560 --> 00:03:57.960
and you're not waiting.


00:03:57.960 --> 00:04:01.200
So when you're talking about waiting,


00:04:01.200 --> 00:04:04.160
it's usually has to do with IO with external systems, right?


00:04:04.160 --> 00:04:06.480
I'm waiting on the file system, I'm waiting on the database,


00:04:06.480 --> 00:04:07.760
I'm waiting on whatever.


00:04:07.760 --> 00:04:10.640
So there's this cool library called AnyIO.


00:04:10.640 --> 00:04:15.040
So I indirectly learned about this from Sebastian Ramirez


00:04:15.040 --> 00:04:20.040
from FastAPI, because he talks about the same thing


00:04:20.040 --> 00:04:24.440
about this thing called Asyncr which extends a few things that are ultimately probably going to make


00:04:24.440 --> 00:04:31.000
it back to any I/O. So any I/O is an asynchronous networking and concurrency library that works on


00:04:31.000 --> 00:04:38.040
top of either Async I/O which is the one we all know and love or Trio which is similar to Async


00:04:38.040 --> 00:04:45.640
I/O but it has a larger it has more of an understanding of dependencies between tasks


00:04:46.280 --> 00:04:51.000
And things how you can say, I'm going to create a set of work that is made up of these tasks,


00:04:51.000 --> 00:04:53.680
and this task is actually a child of that other task.


00:04:53.680 --> 00:04:56.880
So if I cancel the top level one, cancel its children,


00:04:56.880 --> 00:05:01.760
it's a little bit more complicated, but it solves this structured concurrency story


00:05:01.760 --> 00:05:03.760
that people sometimes need.


00:05:03.760 --> 00:05:07.480
So you can use this to get some libraries that will do


00:05:07.480 --> 00:05:11.680
nice things with stuff you might wait on, right?


00:05:11.680 --> 00:05:14.560
So some of the features include there's task groups.


00:05:14.560 --> 00:05:18.560
That's the thing I was describing with parent-child relationship type of things.


00:05:18.560 --> 00:05:23.040
With Trio, it has high-level networking, TCP, UDP,


00:05:23.040 --> 00:05:27.240
an API for byte streams and object streams,


00:05:27.240 --> 00:05:30.040
inter-task synchronization and communication,


00:05:30.040 --> 00:05:32.940
like locks and conditions and events and semaphores,


00:05:32.940 --> 00:05:35.920
worker threads, step processes, all kinds of stuff.


00:05:35.920 --> 00:05:40.760
So you go over and you can sort of see some real simple ways for it to run.


00:05:40.760 --> 00:05:44.960
So one of the things that's sometimes not entirely obvious


00:05:44.960 --> 00:05:47.160
is how do you run something on async.io


00:05:47.160 --> 00:05:54.840
because you've got to make sure you've got an async.io event loop running.


00:05:54.840 --> 00:05:57.340
And if there's already one, you should call get loop,


00:05:57.340 --> 00:05:59.480
but if it's not one, you should create one.


00:05:59.480 --> 00:06:01.980
So this is just, I have an async method,


00:06:01.980 --> 00:06:05.780
which can be a task and just say, trio.run,


00:06:05.780 --> 00:06:09.280
or you can run and just say the back end is trio,


00:06:09.280 --> 00:06:10.060
which is pretty cool.


00:06:10.060 --> 00:06:11.740
So all sorts of cool stuff like that.


00:06:11.740 --> 00:06:15.940
And it just sort of simplifies working with these different things.


00:06:15.940 --> 00:06:18.240
If we go and look at the sockets example,


00:06:18.240 --> 00:06:22.740
you can just say await async with await


00:06:22.740 --> 00:06:29.480
connect TCP, and that's allow you to do like a wait, receive a wait, send and so on.


00:06:29.480 --> 00:06:33.460
So some nice libraries that come out of any IO for doing TCP,


00:06:33.460 --> 00:06:36.360
UDP, all that kind of stuff, you know, the things you would wait on.


00:06:36.360 --> 00:06:37.560
Yeah.


00:06:38.960 --> 00:06:43.360
So if you know you're going to use AsyncIO,


00:06:43.360 --> 00:06:45.440
would this buy you anything?


00:06:45.440 --> 00:06:49.040
I think that it has those additional higher level libraries


00:06:49.040 --> 00:06:53.760
for talking to TCP and byte streams and stuff like that,


00:06:53.760 --> 00:06:56.480
and also the subprocess thing.


00:06:56.480 --> 00:07:00.160
So I think it does have some utility stuff on top of it.


00:07:00.160 --> 00:07:01.000
But it's pretty cool.


00:07:01.000 --> 00:07:05.080
You can say a wait run subprocess, which is pretty cool.


00:07:05.080 --> 00:07:07.480
That's actually, that's really cool.


00:07:07.480 --> 00:07:08.680
I've not seen this one before,


00:07:08.680 --> 00:07:11.160
and that one kind of makes me excited now.


00:07:11.160 --> 00:07:13.160
- Yeah, that's cool.


00:07:13.160 --> 00:07:14.000
- Yeah, cool.


00:07:14.000 --> 00:07:15.480
So not a whole lot more to say about it than that,


00:07:15.480 --> 00:07:17.720
but if those are the types of things you're doing,


00:07:17.720 --> 00:07:19.040
then come check it out.


00:07:19.040 --> 00:07:20.040
It's a cool library.


00:07:20.040 --> 00:07:24.520
- Do you know what else is cool?


00:07:24.520 --> 00:07:25.920
- I do not, tell me about it.


00:07:25.920 --> 00:07:27.280
(laughing)


00:07:27.280 --> 00:07:29.780
- Thought we were doing something else.


00:07:29.780 --> 00:07:32.120
- Wait, oh yes, I've got one more thing to talk about


00:07:32.120 --> 00:07:32.940
before we move on,


00:07:32.940 --> 00:07:36.180
because we have a different number of things.


00:07:36.180 --> 00:07:38.420
I'm not sure where I'll slide it in here.


00:07:38.420 --> 00:07:41.060
So what else is cool is that this episode


00:07:41.060 --> 00:07:43.700
is brought to you by Datadog.


00:07:43.700 --> 00:07:45.260
Thank you Datadog for supporting the show.


00:07:45.260 --> 00:07:47.340
They've been big supporters of Python Bytes


00:07:47.340 --> 00:07:48.380
for a really long time.


00:07:48.380 --> 00:07:50.580
So that's fantastic. - Really appreciate it.


00:07:50.580 --> 00:07:52.460
Plus really great t-shirts.


00:07:52.460 --> 00:07:54.660
- Exactly, they've got cool t-shirts.


00:07:54.660 --> 00:07:56.860
I mean, I definitely wanna get one of those.


00:07:56.860 --> 00:08:01.220
So Datadog does a lot of things.


00:08:01.220 --> 00:08:03.240
One of their things they're focusing on now


00:08:03.240 --> 00:08:04.620
is real-time monitoring.


00:08:04.620 --> 00:08:09.080
So they have a real-time monitoring platform that unifies metrics, traces, logs


00:08:09.080 --> 00:08:11.780
into one tightly integrated platform.


00:08:11.780 --> 00:08:14.520
Their APM empowers developers


00:08:14.520 --> 00:08:19.020
to identify anomalies, resolve issues, and improve application performance.


00:08:19.020 --> 00:08:23.220
We just finished the Talk Python episode talking about running production


00:08:23.220 --> 00:08:24.980
and everyone there on the panel was like,


00:08:24.980 --> 00:08:28.980
you need to make sure you're monitoring in production


00:08:28.980 --> 00:08:31.680
for things that change in your performance profile


00:08:31.680 --> 00:08:36.000
because you get too much data as your infrastructure changes,


00:08:36.000 --> 00:08:38.960
as the way your app is being used changed.


00:08:38.960 --> 00:08:42.720
It could hit these scenarios and run into problems


00:08:42.720 --> 00:08:44.600
that you would just never see in testing.


00:08:44.600 --> 00:08:47.780
So if you had Datadog APM, you would have caught it.


00:08:47.780 --> 00:08:50.040
So you can begin collecting stack traces,


00:08:50.040 --> 00:08:52.120
visualize them as flame graphs,


00:08:52.120 --> 00:08:54.040
organize them into profile types,


00:08:54.040 --> 00:08:56.640
such as these are the CPU metrics,


00:08:56.640 --> 00:08:58.000
these are IO and so on.


00:08:58.000 --> 00:09:01.040
Teams can search for specific profiles,


00:09:01.040 --> 00:09:05.120
correlate them with distributed traces if you're doing microservices


00:09:05.120 --> 00:09:09.580
and identify slower underperforming code for analysis and optimization.


00:09:09.580 --> 00:09:12.420
Plus, with Datadog's APM live search,


00:09:12.420 --> 00:09:16.460
you can perform searches across the full stream of ingest traces


00:09:16.460 --> 00:09:18.960
generated by your app over the last 15 minutes.


00:09:18.960 --> 00:09:23.500
So try Datadog APM for free with a 14-day trial.


00:09:23.500 --> 00:09:27.140
And if you do, you get that t-shirt that Brian mentioned.


00:09:27.140 --> 00:09:29.900
So just go to pythonbytes.fm/datadog


00:09:29.900 --> 00:09:32.540
or click the link in your podcast player show notes


00:09:32.540 --> 00:09:33.660
or in this chapter.


00:09:33.660 --> 00:09:35.820
Remember we talked about chapters and links.


00:09:35.820 --> 00:09:37.580
I'll have this have a chapter as well.


00:09:37.580 --> 00:09:40.580
So thank you Datadog for supporting the show.


00:09:40.580 --> 00:09:43.300
Now let's talk about your next item, Brian.


00:09:43.300 --> 00:09:47.700
- Yeah, I think it's Vax, Vex, Vex, I don't know.


00:09:47.700 --> 00:09:48.540
- Vex?


00:09:48.540 --> 00:09:49.380
- Vex.


00:09:49.380 --> 00:09:52.780
- Oh, people are gaining traction for the idea


00:09:52.780 --> 00:09:55.380
of putting a pronunciation on a GitHub repo


00:09:55.380 --> 00:09:57.180
for projects that are not obvious.


00:09:57.180 --> 00:09:58.020
- Yeah.


00:09:58.020 --> 00:09:58.860
- I saw this on Twitter.


00:09:58.860 --> 00:09:59.800
Let's do it, let's make it happen.


00:09:59.800 --> 00:10:02.740
So this was suggested by Glenn Ferguson.


00:10:02.740 --> 00:10:07.700
This is a library that's a high performance Python library


00:10:07.700 --> 00:10:10.940
for lazy out of core data frames.


00:10:10.940 --> 00:10:13.300
I don't know what out of core is.


00:10:13.300 --> 00:10:15.840
So I looked it up in a glossary.


00:10:15.840 --> 00:10:19.240
So out of--


00:10:19.240 --> 00:10:20.220
- After the FAQ.


00:10:20.220 --> 00:10:24.560
- Yeah, out of core typically refers to processing data


00:10:24.560 --> 00:10:27.580
that is too large to fit in the computer's memory.


00:10:27.580 --> 00:10:29.780
So yeah, that's what this is.


00:10:29.780 --> 00:10:32.680
So for data processing, often you're trying to do


00:10:32.680 --> 00:10:35.780
some analysis, do some statistics,


00:10:35.780 --> 00:10:37.920
maybe explore the data a little bit,


00:10:37.920 --> 00:10:41.380
but you don't wanna read it because they're huge data sets


00:10:41.380 --> 00:10:44.440
and you've got like maybe a limited computer.


00:10:44.440 --> 00:10:48.160
And so that's what this is set up to do.


00:10:48.160 --> 00:10:51.800
The main features of it, so you've got like big data sets.


00:10:51.800 --> 00:10:55.640
It also has statistics like mean and sum and count


00:10:55.640 --> 00:10:57.560
and standard deviation, et cetera,


00:10:57.560 --> 00:11:00.040
but it also has some visualizations that are sped up


00:11:00.040 --> 00:11:03.060
from how they've sped things up


00:11:03.060 --> 00:11:04.420
and not kept things in memory.


00:11:04.420 --> 00:11:09.040
And they're using memory mapping and some tricks inside


00:11:09.040 --> 00:11:12.300
to try to avoid any memory copies


00:11:12.300 --> 00:11:16.180
and try to do it as lazy as computation as possible.


00:11:16.180 --> 00:11:17.760
And this is actually pretty impressive.


00:11:17.760 --> 00:11:22.760
I was watching some of the demos.


00:11:22.760 --> 00:11:26.500
So there's a SciPy 2019 video.


00:11:26.500 --> 00:11:31.500
where it's the person that started this library,


00:11:31.500 --> 00:11:36.120
which is now a company also, but does a demo of this.


00:11:36.120 --> 00:11:39.260
And it's really impressive how fast things are.


00:11:39.260 --> 00:11:42.100
He's pulling things up because of the memory mapping.


00:11:42.100 --> 00:11:45.920
You can even have multiple, you know, multiple


00:11:45.920 --> 00:11:49.980
Jupyter notebooks.


00:11:49.980 --> 00:11:50.820
Yeah, that's it.


00:11:50.820 --> 00:11:53.780
Multiple Jupyter notebooks looking at the same huge dataset


00:11:53.780 --> 00:11:55.100
and it doesn't slow things down


00:11:55.100 --> 00:11:57.420
even when things are working on it, it's pretty neat.


00:11:57.420 --> 00:11:58.260
- Oh, that's cool.


00:11:58.260 --> 00:12:02.140
- So I definitely think this is worth checking out.


00:12:02.140 --> 00:12:04.300
One of the things on the readme that I like


00:12:04.300 --> 00:12:05.620
is the key features.


00:12:05.620 --> 00:12:08.140
So it's a instant opening of huge data files


00:12:08.140 --> 00:12:10.500
because it's memory mapping the data file.


00:12:10.500 --> 00:12:11.460
It actually doesn't read,


00:12:11.460 --> 00:12:14.220
it doesn't do any reads when you read it.


00:12:14.220 --> 00:12:16.380
But when you pull some data out,


00:12:16.380 --> 00:12:18.820
it does lazy reads, jumps ahead,


00:12:18.820 --> 00:12:20.620
and it's pretty impressive.


00:12:20.620 --> 00:12:23.380
So this also has an expression system


00:12:23.380 --> 00:12:27.300
so that it's kind of a, there is a little bit of a,


00:12:27.300 --> 00:12:29.520
so you can lazy transforms of data.


00:12:29.520 --> 00:12:30.560
So that's neat.


00:12:30.560 --> 00:12:33.020
Out of core data frames, like we said,


00:12:33.020 --> 00:12:36.780
fast group by an aggregations, a whole bunch of,


00:12:36.780 --> 00:12:39.520
the fast and efficient joins are interesting.


00:12:39.520 --> 00:12:42.280
I was watching, looking at another comparison


00:12:42.280 --> 00:12:47.280
of pandas and Dask and other things versus Vax.


00:12:47.280 --> 00:12:52.380
And it, the joins of huge tables are pretty fast


00:12:52.620 --> 00:12:56.900
and seamless here, and those will blow up some projects.


00:12:56.900 --> 00:13:00.180
So yeah, this is--


00:13:00.180 --> 00:13:01.700
yes, it is similar to Dask.


00:13:01.700 --> 00:13:05.780
Somebody asked, lazy like Dask?


00:13:05.780 --> 00:13:06.620
Yes.


00:13:06.620 --> 00:13:07.380
But--


00:13:07.380 --> 00:13:08.380
>>That's a good thing.


00:13:08.380 --> 00:13:10.260
>>Yeah.


00:13:10.260 --> 00:13:12.260
Oops.


00:13:12.260 --> 00:13:15.020
But yeah, a bunch of fun things.


00:13:15.020 --> 00:13:17.420
It's good to have--


00:13:17.420 --> 00:13:19.260
it isn't the same as Dask, so it's


00:13:19.260 --> 00:13:21.820
worth checking out to see if maybe this one might


00:13:21.820 --> 00:13:23.060
be a good fit for you.


00:13:23.060 --> 00:13:23.900
- Yeah, that's cool.


00:13:23.900 --> 00:13:26.060
It's the lazy that makes the magic, right?


00:13:26.060 --> 00:13:27.880
You don't have to load it all from disk.


00:13:27.880 --> 00:13:28.740
You can distribute it.


00:13:28.740 --> 00:13:30.700
There's all kinds of interesting things.


00:13:30.700 --> 00:13:35.460
In the a billion sample per row operation per second,


00:13:35.460 --> 00:13:37.740
that sounds pretty good.


00:13:37.740 --> 00:13:41.420
- Yeah, watching the demo,


00:13:41.420 --> 00:13:44.420
it's incredible how fast he's popping up things


00:13:44.420 --> 00:13:48.420
and loading, even to be able to visualize things


00:13:48.420 --> 00:13:51.500
by pulling out samples out of the set.


00:13:51.500 --> 00:13:53.120
- Wait a minute, Brian, I heard people told me


00:13:53.120 --> 00:13:55.420
that Python was slow, so it didn't make sense


00:13:55.420 --> 00:13:56.400
to do this kind of stuff with it.


00:13:56.400 --> 00:13:57.400
What's going on here?


00:13:57.400 --> 00:13:59.160
(laughing)


00:13:59.160 --> 00:14:01.660
- No, no, no, Python's fast.


00:14:01.660 --> 00:14:02.500
- I know.


00:14:02.500 --> 00:14:05.260
So pick the right libraries.


00:14:05.260 --> 00:14:08.700
All right, one of the things that is definitely well-known


00:14:08.700 --> 00:14:10.860
in the Python world is Django.


00:14:10.860 --> 00:14:14.140
I've even had people tell me I came to become


00:14:14.140 --> 00:14:17.020
a Django developer, and so I had to learn Python,


00:14:17.020 --> 00:14:19.220
which is a really interesting perspective.


00:14:19.220 --> 00:14:20.220
- Yeah. - So I wanna talk about


00:14:20.220 --> 00:14:24.620
the Django developer survey results for the 2021 survey,


00:14:24.620 --> 00:14:26.080
'cause that just recently happened.


00:14:26.080 --> 00:14:29.260
So I'll highlight a couple of things


00:14:29.260 --> 00:14:30.500
that are interesting over here.


00:14:30.500 --> 00:14:31.580
One of the questions was,


00:14:31.580 --> 00:14:33.740
what is the main reason you use Django?


00:14:33.740 --> 00:14:36.540
Is it both for work, personal or for work?


00:14:36.540 --> 00:14:40.220
Only 15% said just for work.


00:14:40.220 --> 00:14:42.580
Does that seem like a lower number than you expect?


00:14:42.580 --> 00:14:43.820
- Yeah.


00:14:43.820 --> 00:14:45.120
- Yeah, I thought more people would just like,


00:14:45.120 --> 00:14:46.820
they'd go to work and do Django and they'd go home


00:14:46.820 --> 00:14:50.820
and they'd, I don't know, watch Game of Thrones or something.


00:14:50.820 --> 00:14:53.900
But Django developers love it, and they use it a lot


00:14:53.900 --> 00:14:54.940
for all sorts of things.


00:14:54.940 --> 00:14:58.500
So by far, the biggest group here, 66%,


00:14:58.500 --> 00:15:00.020
is for using it for both.


00:15:00.020 --> 00:15:02.980
So that stood out to me.


00:15:02.980 --> 00:15:05.540
Another one that's interesting is how many people


00:15:05.540 --> 00:15:08.780
are on the latest version.


00:15:08.780 --> 00:15:11.300
So web apps often sort of get stuck in the past,


00:15:11.300 --> 00:15:12.540
because once you get them up and running,


00:15:12.540 --> 00:15:14.000
like people don't want to touch it.


00:15:14.000 --> 00:15:21.400
75% of the people are using the three two, which at the time of asking, I believe was


00:15:21.400 --> 00:15:22.400
the latest version.


00:15:22.400 --> 00:15:25.000
Okay, I'm like, I thought we were up to four now.


00:15:25.000 --> 00:15:26.000
What's going on?


00:15:26.000 --> 00:15:27.000
I think four is in beta.


00:15:27.000 --> 00:15:28.000
I'm not 100% sure.


00:15:28.000 --> 00:15:29.000
I don't think it's totally released.


00:15:29.000 --> 00:15:31.000
But yeah, this is still members from 2021.


00:15:31.000 --> 00:15:33.760
Okay, to 2021.


00:15:33.760 --> 00:15:39.080
And then also, Django has this concept of the latest stable release, and then a long


00:15:39.080 --> 00:15:40.560
term support release.


00:15:40.560 --> 00:15:43.200
So if you go to just the latest stable release,


00:15:43.200 --> 00:15:45.920
and it's not LTS, you may have to upgrade sooner


00:15:45.920 --> 00:15:48.400
if you want security fixes and so on.


00:15:48.400 --> 00:15:51.020
And yet 71% of the people use the latest stable release


00:15:51.020 --> 00:15:53.160
because they're upgrading frequently, I'm guessing.


00:15:53.160 --> 00:15:56.120
And then 27% are on the latest LTS,


00:15:56.120 --> 00:15:59.440
and 2% are just like, how do I upgrade this again?


00:15:59.440 --> 00:16:00.280
I don't know.


00:16:00.280 --> 00:16:03.180
But that's pretty interesting.


00:16:03.180 --> 00:16:06.400
And then the next question was how often.


00:16:06.400 --> 00:16:10.920
So 44% of the people upgrade every stable release,


00:16:10.920 --> 00:16:14.120
other people less so, and it kind of breaks down.


00:16:14.120 --> 00:16:16.760
5%, I use an unsupported version of Django.


00:16:16.760 --> 00:16:17.760
I'm okay with that.


00:16:17.760 --> 00:16:24.040
Databases for people doing Django is a very strong bias


00:16:24.040 --> 00:16:26.120
to use a relational database


00:16:26.120 --> 00:16:28.240
because much of the magic of Django


00:16:28.240 --> 00:16:30.060
depends upon the Django models, right?


00:16:30.060 --> 00:16:32.040
Like the admin section is driven by that


00:16:32.040 --> 00:16:34.640
and so many things, and those are all relational.


00:16:34.640 --> 00:16:38.320
So with that mind, the most common database,


00:16:38.320 --> 00:16:42.240
77% of the time is Postgres SQL, which is cool.


00:16:42.240 --> 00:16:46.280
And then, does number two there surprise you, Brian?


00:16:46.280 --> 00:16:48.000
- No, not really, SQLite.


00:16:48.000 --> 00:16:49.900
- SQLite, yeah.


00:16:49.900 --> 00:16:53.520
If you got very simple deployment stories,


00:16:53.520 --> 00:16:56.120
you're just gonna put it on one server,


00:16:56.120 --> 00:16:58.800
not much data, you just wanna need something relational,


00:16:58.800 --> 00:16:59.640
SQLite.


00:16:59.640 --> 00:17:01.440
- Well, a lot of internal tools and stuff too.


00:17:01.440 --> 00:17:02.880
- Exactly.


00:17:02.880 --> 00:17:05.720
I mean, you wouldn't run like a major tech company


00:17:05.720 --> 00:17:09.960
on SQLite, get away with it, without scars and tears,


00:17:09.960 --> 00:17:12.320
but for simple internal apps,


00:17:12.320 --> 00:17:13.720
that might just be what you need.


00:17:13.720 --> 00:17:16.440
- You're gonna make some SQLite enemies by saying that.


00:17:16.440 --> 00:17:18.960
- But if you had a hundred thousand users


00:17:18.960 --> 00:17:22.480
concurrently using SQLite, that might be bad.


00:17:22.480 --> 00:17:24.760
- Oh, somebody else said possibly


00:17:24.760 --> 00:17:27.720
because SQLite is the default setting.


00:17:27.720 --> 00:17:30.200
- Yeah, certainly that's a big push.


00:17:31.040 --> 00:17:34.880
The other one is, do you do caching?


00:17:34.880 --> 00:17:38.920
So caching is another layer between the database


00:17:38.920 --> 00:17:41.320
and your web app where you get the database stuff back


00:17:41.320 --> 00:17:43.680
and then you stash it in the memory somewhere


00:17:43.680 --> 00:17:46.620
so that you don't have to do queries again.


00:17:46.620 --> 00:17:50.000
So they said, do you do that?


00:17:50.000 --> 00:17:51.360
And if so, what do you use?


00:17:51.360 --> 00:17:56.120
47% Redis, 43%, I don't do that.


00:17:56.120 --> 00:17:58.120
And then the only other really notable thing


00:17:58.120 --> 00:17:58.960
is memcached.


00:17:58.960 --> 00:18:03.360
So interesting there.


00:18:03.360 --> 00:18:06.840
And I guess people, if they're really interested,


00:18:06.840 --> 00:18:08.720
they come through and look, there's a lot of,


00:18:08.720 --> 00:18:10.440
I don't wanna go through it 'cause there's so many details,


00:18:10.440 --> 00:18:12.340
but it's like, what are your favorite components?


00:18:12.340 --> 00:18:14.240
Like models or admins or auth,


00:18:14.240 --> 00:18:18.800
or what contrib apps do you find most useful?


00:18:18.800 --> 00:18:21.040
Like humanized or whatever.


00:18:21.040 --> 00:18:23.340
So pretty interesting.


00:18:23.340 --> 00:18:25.780
No surprise, people are using Django templates,


00:18:25.780 --> 00:18:27.720
not Jinja as their main templates.


00:18:27.720 --> 00:18:31.960
And then look, it's a race between pytest and UnitTest


00:18:31.960 --> 00:18:34.480
as the top two most common frameworks.


00:18:34.480 --> 00:18:38.080
- With pytest above UnitTest, that's pretty cool.


00:18:38.080 --> 00:18:40.840
Especially since UnitTest is the default.


00:18:40.840 --> 00:18:42.640
- Yeah, yeah, absolutely.


00:18:42.640 --> 00:18:45.520
Let's see, I'll just wrap it up with some front end stuff.


00:18:45.520 --> 00:18:48.120
What JavaScript front end frameworks do you most use?


00:18:48.120 --> 00:18:51.000
jQuery, number one.


00:18:51.000 --> 00:18:52.960
And I don't mean that with a negative way.


00:18:52.960 --> 00:18:55.160
Like sometimes you just got some simple problems


00:18:55.160 --> 00:18:58.060
and you don't need a whole CLI to build a spot


00:18:58.060 --> 00:19:01.160
to like, you know, focus the text box.


00:19:01.160 --> 00:19:03.960
All right, React is tied at 37% as well.


00:19:03.960 --> 00:19:05.260
And then Vue and then Angular.


00:19:05.260 --> 00:19:07.400
And then wow, HTMX made the list.


00:19:07.400 --> 00:19:08.240
Look at this.


00:19:08.240 --> 00:19:09.440
- That's pretty cool actually.


00:19:09.440 --> 00:19:11.840
- That's brand new shininess getting in there.


00:19:11.840 --> 00:19:12.680
That's pretty cool.


00:19:12.680 --> 00:19:14.020
- I appreciate it still.


00:19:14.020 --> 00:19:15.260
- Yeah.


00:19:15.260 --> 00:19:18.120
And then CSS, we got Bootstrap way out front


00:19:18.120 --> 00:19:20.500
and then Tailwind and then pure CSS.


00:19:20.500 --> 00:19:21.340
All right.


00:19:21.340 --> 00:19:23.360
So that's the survey results.


00:19:23.360 --> 00:19:24.580
Pretty interesting.


00:19:24.580 --> 00:19:25.420
- Nice.


00:19:25.420 --> 00:19:28.340
- All right, what do you got next for us?


00:19:28.340 --> 00:19:31.820
- next we've got more extras.


00:19:31.820 --> 00:19:33.420
- We got extras, okay.


00:19:33.420 --> 00:19:36.460
Yes, extra, extra, extra, extra, extra, extra.


00:19:36.460 --> 00:19:39.260
So I've got so many extras,


00:19:39.260 --> 00:19:43.040
I decided to make it one of my topics.


00:19:43.040 --> 00:19:46.460
Brian, got anything else before I go on another rant?


00:19:46.460 --> 00:19:49.340
- No, I'm just ready to listen to all these extras.


00:19:49.340 --> 00:19:50.780
- All right, I got a bunch of good stuff.


00:19:50.780 --> 00:19:55.300
So don't let the bad guys into your web apps.


00:19:55.300 --> 00:19:59.020
Django just had secured releases for 4.01,


00:19:59.020 --> 00:20:03.580
sorry, 4.01, 3.2 and 2.6.6.


00:20:03.580 --> 00:20:05.940
Oh, does that mean 4.0 is out?


00:20:05.940 --> 00:20:06.780
- Yeah.


00:20:06.780 --> 00:20:07.900
- It does look like it. - Nobody's using it.


00:20:07.900 --> 00:20:09.580
- Yeah, well, they didn't use it in the past


00:20:09.580 --> 00:20:10.420
and it wasn't out.


00:20:10.420 --> 00:20:14.700
Paul Everett and I teamed up to create a course


00:20:14.700 --> 00:20:17.020
over at Talk Python called Static Sites


00:20:17.020 --> 00:20:19.340
with Sphinx and Markdown.


00:20:19.340 --> 00:20:21.620
So this course is free, everyone can go take it.


00:20:21.620 --> 00:20:23.400
All you gotta do is have an account and go here


00:20:23.400 --> 00:20:25.760
and it teaches you how to do Markdown and Sphinx


00:20:25.760 --> 00:20:27.460
and generate static sites.


00:20:27.460 --> 00:20:31.140
There's a cool little demo app that we build over here


00:20:31.140 --> 00:20:34.060
that you can go and do search and click around


00:20:34.060 --> 00:20:35.820
and see how you like, you document your code


00:20:35.820 --> 00:20:36.660
and do all kinds of stuff.


00:20:36.660 --> 00:20:39.180
It's nothing too complicated,


00:20:39.180 --> 00:20:41.980
but sort of neat to see how to use Markdown with Sphinx


00:20:41.980 --> 00:20:45.020
'cause typically Sphinx is about restructured text.


00:20:45.020 --> 00:20:46.780
So check out the course over there.


00:20:46.780 --> 00:20:48.220
I'll put that in the show notes.


00:20:48.220 --> 00:20:51.660
I'm going to definitely check that out because I've got a project that I wanted to use Sphinx


00:20:51.660 --> 00:20:53.820
for but I was a little intimidated.


00:20:53.820 --> 00:20:54.820
Cool.


00:20:54.820 --> 00:20:57.020
Yeah, Paul does a great job with it.


00:20:57.020 --> 00:21:02.840
It's only an hour and 25 minutes or something so it's not a huge investment in time.


00:21:02.840 --> 00:21:10.020
Something that's bothered me basically ever since USB-C, what is this, four years or something?


00:21:10.020 --> 00:21:15.820
Is I need more ports on my computer and I want them to be USB-C ports because I have


00:21:15.820 --> 00:21:17.180
of USB things these days,


00:21:17.180 --> 00:21:20.000
'cause I want them to go into the ports that I already have.


00:21:20.000 --> 00:21:23.420
Until Thunderbolt 4, you've not been able to get a dock


00:21:23.420 --> 00:21:27.740
that has more than one USB-C or Thunderbolt port,


00:21:27.740 --> 00:21:30.140
which is super weird to me.


00:21:30.140 --> 00:21:35.540
But recently, they've come out with Thunderbolt 4,


00:21:35.540 --> 00:21:36.940
and I just got this thing called


00:21:36.940 --> 00:21:40.980
the CalDigit Thunderbolt 4 USB4 Element Hub.


00:21:40.980 --> 00:21:42.180
And this thing is fantastic.


00:21:42.180 --> 00:21:44.140
Brian, I'm talking to you on my computer here,


00:21:44.140 --> 00:21:49.140
And I have my 4k monitor, my 1080p camera, my microphone,


00:21:49.140 --> 00:21:53.300
my stream deck, the lights, keyboard, mouse, track,


00:21:53.300 --> 00:21:55.580
like seven different things, including the monitor


00:21:55.580 --> 00:21:57.860
plugged in with one cable through this thing.


00:21:57.860 --> 00:21:59.180
- That's really pretty cool.


00:21:59.180 --> 00:22:00.020
- It's so sweet.


00:22:00.020 --> 00:22:05.020
So basically it has on the front,


00:22:05.020 --> 00:22:10.060
it has three USB-C Thunderbolt 4 and a power in.


00:22:10.060 --> 00:22:11.860
And then on the side,


00:22:11.860 --> 00:22:15.780
It has the Thunderbolt that goes to the computer and then also for USB,


00:22:15.780 --> 00:22:18.620
high-speed USB, A, but the good ones.


00:22:18.620 --> 00:22:21.300
So really, really cool.


00:22:21.300 --> 00:22:25.460
If you need to expand out your new newish computer,


00:22:25.460 --> 00:22:27.220
what are you using to plug into the monitor?


00:22:27.220 --> 00:22:32.540
I have a Thunderbolt two display port adapter.


00:22:32.540 --> 00:22:35.620
And so that way, if I come with my new Mac book, I can just unplug one thing


00:22:35.620 --> 00:22:38.500
from my mini, click it over and then boom, I'm ready to go.


00:22:38.500 --> 00:22:39.540
Everything's configured.


00:22:39.540 --> 00:22:40.980
I'm going to get one of these then.


00:22:41.060 --> 00:22:42.940
Yeah, they're not super cheap.


00:22:42.940 --> 00:22:45.260
They've been out for about four or five months,


00:22:45.260 --> 00:22:48.820
but they've been sold out supply chains,


00:22:48.820 --> 00:22:49.940
you know, what time of,


00:22:49.940 --> 00:22:53.300
what's going on with supply chains and everything,


00:22:53.300 --> 00:22:54.940
but they finally came out there on Amazon.


00:22:54.940 --> 00:22:56.900
So I linked to it over on Amazon.


00:22:56.900 --> 00:23:00.100
Also linked to this video that by Doc Rock


00:23:00.100 --> 00:23:01.540
talking about like, what the heck is this thing


00:23:01.540 --> 00:23:04.280
and why is it different?


00:23:04.280 --> 00:23:05.380
All right.


00:23:05.380 --> 00:23:07.960
I also tweeted about how we use the stream deck


00:23:07.960 --> 00:23:10.860
to do our live stream, which was fun.


00:23:10.860 --> 00:23:14.900
So I shared a bunch of pictures of that,


00:23:14.900 --> 00:23:17.100
like how we like put the website.


00:23:17.100 --> 00:23:20.380
So it says how it's streaming, how we tweet automatically,


00:23:20.380 --> 00:23:23.460
how we do the sharing and all that kind of stuff.


00:23:23.460 --> 00:23:26.180
I'm now gonna be working on how to use that thing


00:23:26.180 --> 00:23:27.300
for software development.


00:23:27.300 --> 00:23:29.380
Like how do you use it for Jupyter Notebooks?


00:23:29.380 --> 00:23:31.000
So every button on the stream deck,


00:23:31.000 --> 00:23:34.000
which is 14 free buttons basically,


00:23:34.000 --> 00:23:38.420
like what are the 14 Jupyter operations you like to have?


00:23:38.420 --> 00:23:40.180
Like run all cells, give you a button.


00:23:40.180 --> 00:23:43.080
or format with black could be a button, all sorts of stuff.


00:23:43.080 --> 00:23:44.320
So very cool.


00:23:44.320 --> 00:23:47.640
- Oh, you just have a black button, like with no logo.


00:23:47.640 --> 00:23:50.360
- Yes, yes, that should absolutely be black as well.


00:23:50.360 --> 00:23:53.400
So anyway, people are interested in that, that's there.


00:23:53.400 --> 00:23:57.320
I did a talk at PyBay quite a while ago.


00:23:57.320 --> 00:23:58.980
Now the talk is out.


00:23:58.980 --> 00:24:02.760
Carson was kind enough to retweet that


00:24:02.760 --> 00:24:04.840
and pointed out that, hey, the talk is actually out.


00:24:04.840 --> 00:24:06.880
So I'm linking to my PyBay talk,


00:24:06.880 --> 00:24:10.040
which was an in-person talk at a conference.


00:24:10.040 --> 00:24:13.120
imagine that in San Francisco.


00:24:13.120 --> 00:24:13.960
It was really fun.


00:24:13.960 --> 00:24:16.040
People can check that out.


00:24:16.040 --> 00:24:18.120
Speaking of conferences,


00:24:18.120 --> 00:24:21.320
we are a media sponsor of Python web conference.


00:24:21.320 --> 00:24:24.460
And so you can definitely check that out.


00:24:24.460 --> 00:24:25.760
This is one of the, honestly,


00:24:25.760 --> 00:24:27.480
becoming one of the bigger online conferences.


00:24:27.480 --> 00:24:29.600
It's five days all day.


00:24:29.600 --> 00:24:30.920
You know, a lot of these online conferences are like,


00:24:30.920 --> 00:24:32.200
well, half day, a little thing here.


00:24:32.200 --> 00:24:33.920
So a lot of tracks,


00:24:33.920 --> 00:24:36.000
a lot of things going on with the Python web conference.


00:24:36.000 --> 00:24:37.520
I'm also speaking there as well.


00:24:37.520 --> 00:24:38.560
Are you speaking there?


00:24:38.560 --> 00:24:43.560
- I'm off to get you pie testing something up there.


00:24:43.560 --> 00:24:46.240
- Well, I should probably do some web stuff.


00:24:46.240 --> 00:24:47.680
- Yeah, absolutely.


00:24:47.680 --> 00:24:48.520
Absolutely.


00:24:48.520 --> 00:24:50.840
And so there's a code that you can use.


00:24:50.840 --> 00:24:55.160
It's in the show notes, Python bytes at PWC 2022


00:24:55.160 --> 00:24:58.160
and I'll give you 15% off.


00:24:58.160 --> 00:25:00.440
Also in our neighborhood,


00:25:00.440 --> 00:25:03.400
sort of because it's virtual, does that still have meaning?


00:25:03.400 --> 00:25:05.400
We have pie cascades coming up


00:25:05.400 --> 00:25:08.920
in PyCascades is February 5th and 6th.


00:25:08.920 --> 00:25:10.240
So that's gonna be remote.


00:25:10.240 --> 00:25:14.120
So it's not really local until things settle down.


00:25:14.120 --> 00:25:15.800
So people wherever can take it.


00:25:15.800 --> 00:25:17.080
- Well, it's in our time zone.


00:25:17.080 --> 00:25:18.080
So it's good.


00:25:18.080 --> 00:25:18.920
- That's true.


00:25:18.920 --> 00:25:19.760
Time zone still matters.


00:25:19.760 --> 00:25:21.400
It absolutely still matters.


00:25:21.400 --> 00:25:25.440
All right, that's it for all of my extras.


00:25:25.440 --> 00:25:27.160
And we have Patrick out in the audience


00:25:27.160 --> 00:25:30.300
pointing out PyCon Italy is also happening in June.


00:25:30.300 --> 00:25:31.840
So that's fantastic.


00:25:31.840 --> 00:25:32.680
- Yeah.


00:25:35.140 --> 00:25:35.980
- Awesome.


00:25:35.980 --> 00:25:37.220
- So before we get to the joke,


00:25:37.220 --> 00:25:40.220
I wanted to like ask you this brain teaser


00:25:40.220 --> 00:25:42.740
that like my daughter brought up.


00:25:42.740 --> 00:25:43.940
- On the spot.


00:25:43.940 --> 00:25:46.660
- So she, yeah, I'm totally putting you on the spot.


00:25:46.660 --> 00:25:51.460
So she came home, I don't know, she's in junior high.


00:25:51.460 --> 00:25:52.300
She came home and she said,


00:25:52.300 --> 00:25:54.540
"We have this cool brain teaser, just wanna ask you,


00:25:54.540 --> 00:25:56.300
just tell me what you think."


00:25:56.300 --> 00:25:58.500
So it's a math problem.


00:25:58.500 --> 00:25:59.900
So I'm gonna go out,


00:25:59.900 --> 00:26:02.620
I'm gonna buy a baseball bat and a baseball.


00:26:02.620 --> 00:26:06.020
The total for both the baseball bat and the baseball


00:26:06.020 --> 00:26:07.340
are $1.10.


00:26:07.340 --> 00:26:08.380
It's pretty cheap.


00:26:08.380 --> 00:26:12.840
The difference is the baseball,


00:26:12.840 --> 00:26:17.320
the baseball bat is $1 more than the baseball.


00:26:17.320 --> 00:26:19.780
So how much is the baseball?


00:26:19.780 --> 00:26:26.960
So I'm not gonna, you don't have to answer it right now,


00:26:26.960 --> 00:26:29.420
but it tripped me up for a little bit.


00:26:29.420 --> 00:26:30.740
I'm like, why is this difficult?


00:26:30.740 --> 00:26:33.260
It turns out it's like five cents


00:26:33.260 --> 00:26:36.660
because of five cents plus a dollar five is dollar 10.


00:26:36.660 --> 00:26:38.620
But my brain went, it's a dollar.


00:26:38.620 --> 00:26:39.660
It's a dollar and a dollar.


00:26:39.660 --> 00:26:40.820
- That's what mine said, yeah.


00:26:40.820 --> 00:26:42.780
- Yeah, but that's a 90 cent difference.


00:26:42.780 --> 00:26:43.980
I don't know why this is difficult,


00:26:43.980 --> 00:26:46.500
but it's a fun brain teaser to ask people.


00:26:46.500 --> 00:26:48.960
- Indeed, ha, funny.


00:26:48.960 --> 00:26:51.400
Very cool, well, you know what else is funny?


00:26:51.400 --> 00:26:57.500
That feeling of joy that we get as software developers.


00:26:59.420 --> 00:27:01.600
But it's mixed in with,


00:27:01.600 --> 00:27:05.780
I kind of remember myself screaming at my computer


00:27:05.780 --> 00:27:07.620
yesterday, like out loud,


00:27:07.620 --> 00:27:09.780
'cause something was so frustrating.


00:27:09.780 --> 00:27:12.640
I was just like, how is it possible that this is not working?


00:27:12.640 --> 00:27:14.180
Like, what is going on?


00:27:14.180 --> 00:27:15.220
It wasn't actually about programming,


00:27:15.220 --> 00:27:16.460
it was with some app or something.


00:27:16.460 --> 00:27:17.300
It was--


00:27:17.300 --> 00:27:18.780
- It's always something else.


00:27:18.780 --> 00:27:20.300
- Yes.


00:27:20.300 --> 00:27:22.160
Sometimes it's my fault, but anyway.


00:27:22.160 --> 00:27:25.220
So the joke is expressing that feeling.


00:27:25.220 --> 00:27:27.980
And it's, the sticker says, I hate programming.


00:27:27.980 --> 00:27:29.260
I hate programming.


00:27:29.260 --> 00:27:30.740
I hate programming.


00:27:30.740 --> 00:27:31.580
It works.


00:27:31.580 --> 00:27:32.400
I love programming.


00:27:32.400 --> 00:27:33.240
This is amazing.


00:27:33.240 --> 00:27:34.060
Look at it.


00:27:34.060 --> 00:27:35.580
It's like childbirth.


00:27:35.580 --> 00:27:37.660
Like you forget all the horror and pain.


00:27:37.660 --> 00:27:39.060
Like, oh, look at my amazing app.


00:27:39.060 --> 00:27:41.140
Like, do you remember like you cried for two days


00:27:41.140 --> 00:27:44.020
because like you couldn't get it to query the database


00:27:44.020 --> 00:27:45.860
right in production.


00:27:45.860 --> 00:27:46.700
- Yeah.


00:27:46.700 --> 00:27:47.520
- And you love, right.


00:27:47.520 --> 00:27:49.060
But you love it because now it works.


00:27:49.060 --> 00:27:51.920
- So I love this.


00:27:51.920 --> 00:27:53.000
I was there this morning.


00:27:53.000 --> 00:27:54.700
I was like fighting Jenkins


00:27:54.700 --> 00:27:59.700
of trying to create a Jenkins job with four repos


00:27:59.700 --> 00:28:02.260
and different branches.


00:28:02.260 --> 00:28:06.280
And I just like, I hate Jenkins, but.


00:28:06.280 --> 00:28:08.260
- If it works or when it works.


00:28:08.260 --> 00:28:09.620
- When it works, I'm like, sweet.


00:28:09.620 --> 00:28:11.420
I am the smartest person in the world.


00:28:11.420 --> 00:28:12.620
I'm ready to do this all the time.


00:28:12.620 --> 00:28:13.460
- Fantastic.


00:28:13.460 --> 00:28:14.280
All right.


00:28:14.280 --> 00:28:15.340
Well, it never ends.


00:28:15.340 --> 00:28:16.180
It never ends.


00:28:16.180 --> 00:28:17.300
We've been doing this a long time


00:28:17.300 --> 00:28:18.980
and we still have these feelings, don't we?


00:28:18.980 --> 00:28:19.820
- Yeah.


00:28:19.820 --> 00:28:20.980
So.


00:28:20.980 --> 00:28:21.820
- Well.


00:28:21.820 --> 00:28:23.700
- Yeah.


00:28:23.700 --> 00:28:26.100
Thanks a lot, Michael, for another great show.


00:28:26.100 --> 00:28:27.180
- Yeah, you as well.


00:28:27.180 --> 00:28:28.020
It's always fun.


00:28:28.020 --> 00:28:29.420
Thank you everyone for listening.


00:28:29.420 --> 00:28:30.980
Catch you all later.


00:28:30.980 --> 00:28:31.820
- Bye.


00:28:31.820 --> 00:28:32.640
- Bye.

