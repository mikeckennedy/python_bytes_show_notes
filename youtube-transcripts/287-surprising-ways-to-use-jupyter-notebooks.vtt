WEBVTT

00:00:00.000 --> 00:00:03.920
- Hey everybody, welcome to Python Bytes.


00:00:03.920 --> 00:00:07.200
And hey, let's just kick it off.


00:00:07.200 --> 00:00:08.500
It's Michael and me today.


00:00:08.500 --> 00:00:11.040
Hello and welcome to Python Bytes


00:00:11.040 --> 00:00:13.520
where we deliver Python news and headlines


00:00:13.520 --> 00:00:15.080
directly to your earbuds.


00:00:15.080 --> 00:00:19.080
This is episode 287 recorded June 7th


00:00:19.080 --> 00:00:21.040
and I am Brian Okken.


00:00:21.040 --> 00:00:22.320
- Michael Kennedy.


00:00:22.320 --> 00:00:24.120
- It's good to talk to you, Michael.


00:00:24.120 --> 00:00:25.840
- Yeah, good to see you again, Brian.


00:00:25.840 --> 00:00:29.720
Again, we've got our wardrobe matching our background here,


00:00:29.720 --> 00:00:31.120
which is fantastic.


00:00:31.120 --> 00:00:32.440
- Yeah, we like, you know,


00:00:32.440 --> 00:00:34.800
texted each other in the morning to make sure.


00:00:34.800 --> 00:00:36.120
(laughing)


00:00:36.120 --> 00:00:38.040
- I'm purple, I'm gonna get a new shirt now.


00:00:38.040 --> 00:00:38.880
No, it's great.


00:00:38.880 --> 00:00:40.220
Good to see you as always.


00:00:40.220 --> 00:00:42.760
Lots of fun Python things to talk about here.


00:00:42.760 --> 00:00:45.720
- Yeah, yeah, well, let's jump into the first one.


00:00:45.720 --> 00:00:47.600
- All right, let's do it.


00:00:47.600 --> 00:00:51.040
Well, the first thing that I wanna talk about here


00:00:51.040 --> 00:00:54.560
is distributing Python applications.


00:00:54.560 --> 00:00:59.560
Now, this is a little bit in the Python GUIs side of thing.


00:00:59.560 --> 00:01:02.460
Something you just can't get enough of in terms of like,


00:01:02.460 --> 00:01:06.460
hey, could we have more ways to do this that are like awesome?


00:01:06.460 --> 00:01:09.960
How about if we had ways that were automatic?


00:01:09.960 --> 00:01:11.460
Yeah.


00:01:11.460 --> 00:01:16.460
So I want to talk about this thing by Brent Foley-Bregret


00:01:16.460 --> 00:01:19.160
called autopy2exe.


00:01:19.160 --> 00:01:22.860
And it basically does what it says right in the name there.


00:01:22.860 --> 00:01:29.060
Converts a .py file to a .exe using a simple graphical


00:01:29.060 --> 00:01:35.540
interface. Now this GitHub description is a bit of a Windows bias because it will


00:01:35.540 --> 00:01:40.900
also create it to Mac apps as well to .app files so it's not just a Windows


00:01:40.900 --> 00:01:47.300
thing. It's pretty popular has 2,000 stars 400 forks and what it is a


00:01:47.300 --> 00:01:54.860
UI on top of things like Py2App or PyInstaller, specifically PyInstaller.


00:01:54.860 --> 00:01:57.960
So what you do is you fire this thing up


00:01:57.960 --> 00:02:01.200
and out pops this user interface


00:02:01.200 --> 00:02:03.880
that if you're watching the YouTube stream,


00:02:03.880 --> 00:02:05.240
you can see there's a user interface here


00:02:05.240 --> 00:02:06.440
and it just says,


00:02:06.440 --> 00:02:10.160
pick the starting Python file for your application.


00:02:10.160 --> 00:02:14.360
And you can say, what do you want the output to be?


00:02:14.360 --> 00:02:16.760
One file or one directory?


00:02:16.760 --> 00:02:21.220
I think we all want it to be one file, probably generally,


00:02:21.220 --> 00:02:23.080
but maybe a directory, I don't know.


00:02:23.080 --> 00:02:23.920
What else you're gonna,


00:02:23.920 --> 00:02:25.800
you wanna do some other things there.


00:02:25.800 --> 00:02:30.240
But what I did is I tried this against my


00:02:30.240 --> 00:02:35.700
URLify little appy thing, which let me pull that up.


00:02:35.700 --> 00:02:40.080
This is something I built a while ago with rumps,


00:02:40.080 --> 00:02:42.880
which is fantastic, ridiculously uncomplicated


00:02:42.880 --> 00:02:47.080
menu bar apps or something like that for Mac.


00:02:47.080 --> 00:02:49.680
And all it is a little thing that goes up in your Mac bar


00:02:49.680 --> 00:02:53.560
and it has like, you know, slugify text or trim it


00:02:53.560 --> 00:02:58.560
or lowercase is just, I'm constantly taking names


00:02:58.560 --> 00:03:01.120
of like file names and turning them into something


00:03:01.120 --> 00:03:06.120
I could put as a URL or like a title of a video


00:03:06.120 --> 00:03:08.020
or something and turning it into something


00:03:08.020 --> 00:03:09.940
that would be a good URL.


00:03:09.940 --> 00:03:11.320
So that's what this little app is for.


00:03:11.320 --> 00:03:12.860
But here's the thing is it's a Python app


00:03:12.860 --> 00:03:17.300
that runs in the menu bar on my Mac with no terminal view


00:03:17.300 --> 00:03:19.660
and I wanted to be able to distribute it to people.


00:03:19.660 --> 00:03:23.540
And so the way you get it is you just download a zip file


00:03:23.540 --> 00:03:28.060
which is just the zip up.app executable.


00:03:28.060 --> 00:03:30.500
Right, so I had done a bunch of stuff with the setup


00:03:30.500 --> 00:03:31.940
and all those kinds of things


00:03:31.940 --> 00:03:34.320
with PyInstaller to build this.


00:03:34.320 --> 00:03:37.980
So my test case was, well, let me take this auto


00:03:37.980 --> 00:03:41.740
py2exe thing and just point it at that


00:03:41.740 --> 00:03:44.340
and see what happens.


00:03:44.340 --> 00:03:45.780
And what happened was good things.


00:03:45.780 --> 00:03:47.100
It was really interesting.


00:03:47.100 --> 00:03:51.660
There's an app.py, but there's dependent Python files


00:03:51.660 --> 00:03:52.900
that it uses.


00:03:52.900 --> 00:03:57.500
I mean, I'm not a beast, I don't write my entire application in one file.


00:03:57.500 --> 00:04:01.500
Like there's other things broken apart in there that gets bundled up.


00:04:01.500 --> 00:04:05.260
And it somehow discovered that, pulled those all in.


00:04:05.260 --> 00:04:09.780
So I just picked the top level file and it found the dependencies,


00:04:09.780 --> 00:04:14.100
you know, the requirements.txt type dependencies and so on.


00:04:14.100 --> 00:04:19.100
And it created a .app file that, as far as I could tell, ran just fine.


00:04:19.100 --> 00:04:21.100
- That's cool. - Isn't that cool?


00:04:21.100 --> 00:04:22.280
>> Yeah, I like it.


00:04:22.280 --> 00:04:25.300
>> You can decide if it's a window-based application,


00:04:25.300 --> 00:04:26.640
so hide the console,


00:04:26.640 --> 00:04:29.220
which is what I said because I want it to run in the menu bar.


00:04:29.220 --> 00:04:30.680
But if it was a console-based app,


00:04:30.680 --> 00:04:34.300
but you just wanted to distribute it as a single thing with no Python,


00:04:34.300 --> 00:04:36.460
well, no Python requirements,


00:04:36.460 --> 00:04:38.440
you could create a console-based app.


00:04:38.440 --> 00:04:39.760
You set the icon,


00:04:39.760 --> 00:04:41.940
you can add in additional files.


00:04:41.940 --> 00:04:46.980
So if there's JSON configuration files,


00:04:46.980 --> 00:04:49.660
or YAML files, or images,


00:04:49.660 --> 00:04:51.260
or something like that you need to take along,


00:04:51.260 --> 00:04:52.420
you can configure that there.


00:04:52.420 --> 00:04:54.500
And then there's an advanced section that expands out


00:04:54.500 --> 00:04:56.460
to be like pages of stuff that I don't remember.


00:04:56.460 --> 00:04:57.980
Same thing for settings.


00:04:57.980 --> 00:05:02.060
And then you just click the big convert to py to exe button


00:05:02.060 --> 00:05:05.440
and you get ironically not an exe, but a .app file.


00:05:05.440 --> 00:05:06.340
And there you go.


00:05:06.340 --> 00:05:08.340
- That's cool.


00:05:08.340 --> 00:05:09.180
- Isn't that cool?


00:05:09.180 --> 00:05:10.500
So for people who are playing around with this,


00:05:10.500 --> 00:05:12.300
I think they even have,


00:05:12.300 --> 00:05:15.900
let's be listening to us here.


00:05:15.900 --> 00:05:17.660
They even have a little animated GIF


00:05:17.660 --> 00:05:22.660
of how this all works right on the GitHub thing.


00:05:22.660 --> 00:05:24.180
So if you wanna see how it works,


00:05:24.180 --> 00:05:26.180
I guess there's not a whole lot,


00:05:26.180 --> 00:05:27.380
but you browse for the icon,


00:05:27.380 --> 00:05:30.180
you go in there and you check off some things


00:05:30.180 --> 00:05:31.420
and then you just hit build.


00:05:31.420 --> 00:05:33.020
And it takes a little while, but you know,


00:05:33.020 --> 00:05:35.260
that's Py2.exe, that's how it goes.


00:05:35.260 --> 00:05:38.300
And it just sits there and it cranks away for a while,


00:05:38.300 --> 00:05:42.900
bundles it all up and yeah, you've got a little executable.


00:05:42.900 --> 00:05:45.420
So if this is something you wanna play with,


00:05:45.420 --> 00:05:47.660
but you're like, ah, it's kind of a real pain


00:05:47.660 --> 00:05:52.660
to go and figure out, you know, all the setup py commands


00:05:52.660 --> 00:05:56.300
in order to get it to do the py installer commands


00:05:56.300 --> 00:05:58.020
and whatnot, then, you know,


00:05:58.020 --> 00:06:00.820
you can definitely give this a shot.


00:06:00.820 --> 00:06:02.060
I think it's pretty neat.


00:06:02.060 --> 00:06:04.600
I think with mine, I didn't use py to installer.


00:06:04.600 --> 00:06:06.120
I think I used py to app.


00:06:06.120 --> 00:06:08.080
Yeah, that's what I used.


00:06:08.080 --> 00:06:09.320
So pretty neat.


00:06:09.320 --> 00:06:11.660
Yeah, check that out.


00:06:11.660 --> 00:06:13.340
I think people will find it helpful


00:06:13.340 --> 00:06:15.900
for ways to distribute Python apps.


00:06:15.900 --> 00:06:17.300
- Yeah, and I liked it.


00:06:17.300 --> 00:06:19.140
It looks pretty professional looking.


00:06:19.140 --> 00:06:21.860
And then also, especially, I mean,


00:06:21.860 --> 00:06:24.340
especially with internal, like internal company stuff,


00:06:24.340 --> 00:06:27.300
that happens a lot where you want to share something.


00:06:27.300 --> 00:06:29.220
- Yeah, like just download this and run it.


00:06:29.220 --> 00:06:30.940
Please don't ask me how to set up a path


00:06:30.940 --> 00:06:34.440
so that your Python that's not Python 3.3,


00:06:34.440 --> 00:06:37.340
whatever, right, is the one that runs it.


00:06:37.340 --> 00:06:40.340
- Nobody needs to know that it's Python underneath, so.


00:06:40.340 --> 00:06:42.140
- Yeah, exactly.


00:06:42.140 --> 00:06:44.140
So I really like it.


00:06:44.140 --> 00:06:46.340
Oh, one other thing, by the way,


00:06:46.340 --> 00:06:48.260
it's a GUI application.


00:06:48.260 --> 00:06:49.660
It's self-written in Python.


00:06:49.660 --> 00:06:53.020
So you may wonder, well,


00:06:53.020 --> 00:06:54.460
what is it doing?


00:06:54.460 --> 00:06:56.340
Maybe it's bundled itself.


00:06:56.340 --> 00:06:57.980
Obviously, that'd be very meta.


00:06:57.980 --> 00:07:01.820
If autopy2xe could deliver an autopy2xe itself,


00:07:01.820 --> 00:07:04.020
that's obviously lovely.


00:07:04.020 --> 00:07:07.180
It reminded me that I have Chrome


00:07:07.180 --> 00:07:09.880
installed when I ran it.


00:07:09.880 --> 00:07:11.380
So what it does is it,


00:07:11.380 --> 00:07:12.880
it runs something in the background,


00:07:12.880 --> 00:07:15.540
then it fires up Chrome, which becomes


00:07:15.540 --> 00:07:21.540
the UI in this kind of Windows-looking Chrome window.


00:07:21.540 --> 00:07:23.960
And it's not quite an Electron app,


00:07:23.960 --> 00:07:26.460
but it's Electron in a style.


00:07:26.460 --> 00:07:30.460
So anyway, it's an interesting little UI app itself.


00:07:30.460 --> 00:07:33.660
I'm not sure what it's doing, but it works.


00:07:33.660 --> 00:07:35.660
>>Nice.


00:07:35.660 --> 00:07:39.380
All right, well, I'd like to talk about Jupyter.


00:07:39.380 --> 00:07:41.300
So Jupyter Networks.


00:07:41.300 --> 00:07:43.980
So how do you use it?


00:07:43.980 --> 00:07:46.860
So like, I was just fascinated


00:07:46.860 --> 00:07:49.740
by the click baitiness of this, but it's okay.


00:07:49.740 --> 00:07:51.780
Eight surprising ways to,


00:07:51.780 --> 00:07:55.220
eight surprising ways how to use Jupyter notebooks.


00:07:55.220 --> 00:07:57.460
And I gotta say, I didn't know you could do some


00:07:57.460 --> 00:07:59.900
of this stuff with Jupyter, so it's pretty cool.


00:07:59.900 --> 00:08:03.740
So the first one, package development.


00:08:03.740 --> 00:08:06.460
Why would you, I don't know why, but you know,


00:08:06.460 --> 00:08:08.580
some people that are more comfortable in Jupyter


00:08:08.580 --> 00:08:12.260
than they are an IDE or something, if it's good.


00:08:12.260 --> 00:08:16.220
So there's a package called mbdev that you can use to,


00:08:16.220 --> 00:08:20.560
it's by a company called Fast AI,


00:08:20.560 --> 00:08:25.560
that you can use to help with package development,


00:08:25.560 --> 00:08:29.220
including, you know, trying to get your CI working


00:08:29.220 --> 00:08:32.720
and your tests all in one place


00:08:32.720 --> 00:08:34.460
and demos and documentation and stuff.


00:08:34.460 --> 00:08:37.340
So that's kind of neat, I like that idea.


00:08:37.340 --> 00:08:39.380
Oh, I definitely should try to play with that


00:08:39.380 --> 00:08:40.580
to see how that works.


00:08:40.580 --> 00:08:45.140
Apparently there's a video,


00:08:45.140 --> 00:08:47.140
somebody gave a talk around it.


00:08:47.140 --> 00:08:48.100
- Yes, lovely.


00:08:48.100 --> 00:08:48.940
Yeah.


00:08:48.940 --> 00:08:50.700
- Build a web app.


00:08:50.700 --> 00:08:54.300
So building a web app with Jupyter,


00:08:54.300 --> 00:08:56.740
I think that's actually a pretty cool idea.


00:08:56.740 --> 00:08:59.060
There's several suggestions using Voila.


00:08:59.060 --> 00:09:00.900
I think we covered that.


00:09:00.900 --> 00:09:02.260
- Think, yeah, we've covered that before,


00:09:02.260 --> 00:09:03.900
but the other one I don't think we have.


00:09:03.900 --> 00:09:04.880
Hi, pie widgets.


00:09:04.880 --> 00:09:08.380
I'm not sure what that one is.


00:09:08.380 --> 00:09:10.940
So I haven't looked at the widgets thing,


00:09:10.940 --> 00:09:13.660
but you know, more widgets within your window.


00:09:13.660 --> 00:09:15.020
Sure, why not?


00:09:15.020 --> 00:09:16.780
Why are there no, it's a widgets thing.


00:09:16.780 --> 00:09:21.260
You think there'd be images on the readme, but anyway.


00:09:21.260 --> 00:09:23.260
And then a framework called Mercury,


00:09:23.260 --> 00:09:25.460
and this shows up several times in this.


00:09:25.460 --> 00:09:30.460
So Mercury is, does a lot of stuff


00:09:30.460 --> 00:09:33.880
around Jupyter notebooks and doing extra things.


00:09:33.880 --> 00:09:36.540
So this shows up several times in this list.


00:09:36.540 --> 00:09:42.320
So for one, for creating a web app,


00:09:42.320 --> 00:09:44.720
which is kind of neat, especially if you're sharing data


00:09:44.720 --> 00:09:45.840
and have interactive stuff,


00:09:45.840 --> 00:09:50.840
you might have doing stuff with a web application, be cool.


00:09:50.840 --> 00:09:53.800
Slide deck, gotta love it.


00:09:53.800 --> 00:09:56.520
I definitely didn't want to try this out


00:09:56.520 --> 00:10:00.400
because using NB convert or Mercury,


00:10:00.400 --> 00:10:02.880
apparently Mercury does that too,


00:10:02.880 --> 00:10:04.160
uses reveal.js.


00:10:04.160 --> 00:10:06.840
I think a lot of people have tried reveal.js before


00:10:06.840 --> 00:10:10.080
for slides, but having, building it within notebooks,


00:10:10.080 --> 00:10:12.200
building your slide decks within notebooks,


00:10:12.200 --> 00:10:17.200
and then having that just run, that's cool.


00:10:17.200 --> 00:10:18.120
Building a book.


00:10:18.120 --> 00:10:20.000
This is something else that sounds pretty interesting.


00:10:20.000 --> 00:10:24.760
I'd like to try doing some code, a notebook,


00:10:24.760 --> 00:10:25.960
a book-like thing.


00:10:25.960 --> 00:10:28.640
Now I don't have, I'm curious about this.


00:10:28.640 --> 00:10:32.560
So the book, you build a website that looks like a book,


00:10:32.560 --> 00:10:33.900
but that's not a book.


00:10:33.900 --> 00:10:38.100
So it says it can be exported to a PDF file,


00:10:38.100 --> 00:10:44.040
but I don't see anywhere you're exporting to an EPUB or OB.


00:10:44.040 --> 00:10:49.400
So, you know, I call BS on whether that this is a book.


00:10:49.400 --> 00:10:51.240
This is a website that holds book contents


00:10:51.240 --> 00:10:53.560
as far as I could tell.


00:10:53.560 --> 00:10:54.800
Still cool though.


00:10:54.800 --> 00:10:55.680
Running a blog.


00:10:55.680 --> 00:10:58.540
This is something I had no idea Nicola could do.


00:10:58.540 --> 00:11:00.920
So Nicola, Nicola?


00:11:00.920 --> 00:11:03.220
I don't know how to pronounce that.


00:11:03.220 --> 00:11:04.480
I've ran across it before.


00:11:04.480 --> 00:11:06.620
I'm not sure what we, if we've covered it,


00:11:06.620 --> 00:11:09.520
but it's a static site generator


00:11:09.520 --> 00:11:14.280
and it apparently can take a notebook files


00:11:14.280 --> 00:11:17.080
and just run notebooks as a blog.


00:11:17.080 --> 00:11:18.880
So that's pretty cool.


00:11:18.880 --> 00:11:21.980
- Notebooks as a blog, oh, that's interesting.


00:11:21.980 --> 00:11:23.140
- Well, yeah, especially if you're gonna write


00:11:23.140 --> 00:11:24.940
about like some Python technique or something,


00:11:24.940 --> 00:11:26.640
you just do a little demo of it


00:11:26.640 --> 00:11:29.500
and then publish that as a text thing,


00:11:29.500 --> 00:11:31.280
or I don't know if it outputs,


00:11:31.280 --> 00:11:33.220
I didn't read it close enough.


00:11:33.220 --> 00:11:36.300
Outputs the exports every notebook to an HTML file


00:11:36.300 --> 00:11:39.700
and then publish all the files on a static website.


00:11:39.700 --> 00:11:40.600
That's pretty neat.


00:11:40.600 --> 00:11:44.640
Doing reports and dashboards,


00:11:44.640 --> 00:11:47.220
that's kind of like Jupyter would rock at that.


00:11:47.220 --> 00:11:50.220
And I think we've covered stuff like this before, but.


00:11:50.220 --> 00:11:52.020
One of the things in the dashboard section


00:11:52.020 --> 00:11:54.560
that I thought was neat was this Mercury tool


00:11:54.560 --> 00:11:56.220
has a schedule option.


00:11:56.220 --> 00:11:57.780
So once you set up the report,


00:11:57.780 --> 00:12:00.700
you can schedule it to execute, you know,


00:12:00.700 --> 00:12:03.900
like once a day or every hour or something like that.


00:12:03.900 --> 00:12:07.140
And that's pretty neat to not have it do constantly,


00:12:07.140 --> 00:12:11.220
but update, you know, update your dashboard.


00:12:11.220 --> 00:12:12.380
- I do like that.


00:12:12.380 --> 00:12:13.220
That's really cool.


00:12:13.220 --> 00:12:14.740
So you could have some kind of dashboard


00:12:14.740 --> 00:12:18.300
instead of creating it in the full web app.


00:12:18.300 --> 00:12:19.460
You just publish this,


00:12:19.460 --> 00:12:21.420
but obviously you want it to refresh, right?


00:12:21.420 --> 00:12:22.260
So.


00:12:22.260 --> 00:12:23.340
- Yeah.


00:12:23.340 --> 00:12:24.180
Yep.


00:12:24.180 --> 00:12:27.140
So anyway, that, oh, last one,


00:12:27.140 --> 00:12:31.500
- The rest API, this is interesting.


00:12:31.500 --> 00:12:34.340
I wouldn't have thought to build a rest API with Jupyter.


00:12:34.340 --> 00:12:37.940
So I guess you can do all this stuff,


00:12:37.940 --> 00:12:40.440
whether or not you should, I guess it's up to you.


00:12:40.440 --> 00:12:43.460
- Yeah, for sure.


00:12:43.460 --> 00:12:44.820
Anthony on the audience says,


00:12:44.820 --> 00:12:48.140
Nicola works well as a static blog generator,


00:12:48.140 --> 00:12:49.260
preferred over Pelican.


00:12:49.260 --> 00:12:53.100
- Well, that's saying something, nice.


00:12:53.100 --> 00:12:53.940
- That is.


00:12:53.940 --> 00:12:55.860
- Yeah.


00:12:55.860 --> 00:12:57.180
Brian, wouldn't it be good to know


00:12:57.180 --> 00:12:58.780
which ones are like more popular


00:12:58.780 --> 00:13:01.220
or which ones maybe you should depend upon?


00:13:01.220 --> 00:13:02.340
- Yeah.


00:13:02.340 --> 00:13:04.060
- All right, well, let's...


00:13:04.060 --> 00:13:04.900
- Let's do this.


00:13:04.900 --> 00:13:06.580
- Yeah, that's all right.


00:13:06.580 --> 00:13:10.300
So this one is from, let me get it right here.


00:13:10.300 --> 00:13:13.900
This is from Tancala Ashok,


00:13:13.900 --> 00:13:18.060
and they brought this thing called PipTrends.


00:13:18.060 --> 00:13:21.540
It's modeled a little bit after npm-trends,


00:13:21.540 --> 00:13:25.640
and it just lets you compare the popularity of packages


00:13:25.640 --> 00:13:27.520
based on their GitHub statistics.


00:13:27.520 --> 00:13:31.820
So GitHub statistics, that's one metric of popularity,


00:13:31.820 --> 00:13:34.140
but let's give it a bit of a run.


00:13:34.140 --> 00:13:36.800
So what about if we type Flask?


00:13:36.800 --> 00:13:40.360
It says, it immediately pulls up a nice little autocomplete


00:13:40.360 --> 00:13:42.320
that says Flask, a simple web framework


00:13:42.320 --> 00:13:44.980
for building complex web applications.


00:13:44.980 --> 00:13:48.720
But then all the other ones like Flask to Postman and so on,


00:13:48.720 --> 00:13:49.560
this is kind of interesting.


00:13:49.560 --> 00:13:53.640
I didn't really know about Flask to Postman.


00:13:53.640 --> 00:13:54.960
Maybe that we'll talk about that next time,


00:13:54.960 --> 00:13:57.100
but let's pick Flask and then immediately,


00:13:57.100 --> 00:14:00.720
immediately says, well,


00:14:00.720 --> 00:14:02.680
what else might you consider along with this?


00:14:02.680 --> 00:14:06.220
Like, well, how about FastAPI and Django?


00:14:06.220 --> 00:14:09.080
And what do we have?


00:14:09.080 --> 00:14:11.320
It also suggested bottle for a little while.


00:14:11.320 --> 00:14:14.240
So we'll do a bottle in there maybe, and let's do a search.


00:14:14.240 --> 00:14:18.400
And it comes up with a graph that honestly surprised me


00:14:18.400 --> 00:14:19.340
a fair amount.


00:14:19.340 --> 00:14:24.060
There's different levels of popularity,


00:14:24.060 --> 00:14:27.040
but that's not the first thing that surprised me.


00:14:27.040 --> 00:14:31.340
The first thing that surprised me is the regular cycles


00:14:31.340 --> 00:14:33.780
that all of these packages seem to go through.


00:14:33.780 --> 00:14:35.580
Does that seem strange to you?


00:14:35.580 --> 00:14:38.620
- Well, I've noticed it before


00:14:38.620 --> 00:14:40.300
and I don't really know what's going on.


00:14:40.300 --> 00:14:41.540
Is it the weekends?


00:14:41.540 --> 00:14:42.820
- Yes, very good.


00:14:42.820 --> 00:14:44.940
So four or five was the weekend,


00:14:44.940 --> 00:14:47.820
six, four, six, five, and that's where the dip is.


00:14:47.820 --> 00:14:49.980
So people download stuff less on the weekends


00:14:49.980 --> 00:14:51.660
because there's less.


00:14:51.660 --> 00:14:53.640
Create me a new environment, create me a new project,


00:14:53.640 --> 00:14:56.840
check it out, set it up, right, all that kind of stuff.


00:14:56.840 --> 00:14:58.640
Which is healthy, but there's still a decent number


00:14:58.640 --> 00:15:00.840
of downloads going on the weekend there.


00:15:00.840 --> 00:15:02.920
- Yeah, I kind of wish that I'd like to see


00:15:02.920 --> 00:15:07.800
like a seven day moving window, moving average for PyPI.


00:15:07.800 --> 00:15:10.760
- Yeah, yeah, like a different window averaging


00:15:10.760 --> 00:15:13.240
or predicted function.


00:15:13.240 --> 00:15:17.000
Anyway, what we get here is we see that Flask, sorry,


00:15:17.000 --> 00:15:20.600
FastAPI and Django are super similar,


00:15:20.600 --> 00:15:25.400
like almost tied according to GitHub statistics.


00:15:25.400 --> 00:15:26.240
And these are downloads.


00:15:26.240 --> 00:15:28.180
I don't think you get downloads from GitHub.


00:15:28.180 --> 00:15:32.400
I think this is probably from PyPI or BigQuery or something.


00:15:32.400 --> 00:15:34.400
I'm not sure where those numbers are coming from


00:15:34.400 --> 00:15:38.020
because I don't know where those are on,


00:15:38.020 --> 00:15:41.380
these like time series download numbers are on GitHub.


00:15:41.380 --> 00:15:44.480
So they're probably coming from somewhere else.


00:15:44.480 --> 00:15:47.100
But yeah, you can throw different projects in here


00:15:47.100 --> 00:15:49.480
and say, ah, this one's relatively, you know,


00:15:49.480 --> 00:15:51.500
popular compared to that or whatever.


00:15:51.500 --> 00:15:53.120
What do you think?


00:15:53.120 --> 00:15:55.380
- I think it's kind of neat, especially with comparing.


00:15:55.380 --> 00:15:57.660
I mean, I've used, there's other ways to get the stats,


00:15:57.660 --> 00:16:01.340
but having, being able to grab a few related ones,


00:16:01.340 --> 00:16:04.000
having suggestions is kind of neat too.


00:16:04.000 --> 00:16:04.840
- Yeah.


00:16:04.840 --> 00:16:08.260
It also has some more information about the package.


00:16:08.260 --> 00:16:11.100
Like if you go to Flask, it's 12 years old.


00:16:11.100 --> 00:16:13.420
It has 45 versions.


00:16:13.420 --> 00:16:15.900
Its last release was one month ago.


00:16:15.900 --> 00:16:17.540
Its dev status is stable.


00:16:17.540 --> 00:16:20.140
It requires Python 3.7, gives the license


00:16:20.140 --> 00:16:22.220
and who it's intended for.


00:16:22.220 --> 00:16:25.420
And you can see similarly for FastAPI,


00:16:25.420 --> 00:16:27.980
for Django and Bottle and so on.


00:16:27.980 --> 00:16:30.460
- Huh, cool.


00:16:30.460 --> 00:16:32.260
- Also down here in the GitHub stats,


00:16:32.260 --> 00:16:37.140
you can see for like Flask, there's 59,000 stars.


00:16:37.140 --> 00:16:39.500
For Django, there's 64,000 stars.


00:16:39.500 --> 00:16:41.020
Number of open PRs.


00:16:41.020 --> 00:16:45.700
Wow, FastAPI has a lot of open PRs and issues.


00:16:45.700 --> 00:16:47.020
That's crazy.


00:16:47.020 --> 00:16:48.360
Oh, wait, it was last update and so on.


00:16:48.360 --> 00:16:50.920
So yeah, and it also gives you more comparisons down here.


00:16:50.920 --> 00:16:52.660
Like, well, that was fun.


00:16:52.660 --> 00:16:55.400
What about Flask versus Django versus FastAPI,


00:16:55.400 --> 00:16:56.240
which is what we did,


00:16:56.240 --> 00:16:58.200
but or NumPy versus Pandas, for example,


00:16:58.200 --> 00:16:59.680
you can see them and so on.


00:16:59.680 --> 00:17:03.640
- That's pretty neat.


00:17:03.640 --> 00:17:04.480
I like it.


00:17:04.480 --> 00:17:05.300
- Yeah, yeah.


00:17:05.300 --> 00:17:07.380
So piptrends.com, you can check it out.


00:17:07.380 --> 00:17:13.080
- So I want to talk about,


00:17:13.080 --> 00:17:13.920
what do I want to talk about?


00:17:13.920 --> 00:17:16.160
Class, being classy.


00:17:16.160 --> 00:17:18.720
actually been callable.


00:17:18.720 --> 00:17:21.680
So Trey Hunter put this blog post out called,


00:17:21.680 --> 00:17:24.520
is it a class or a function?


00:17:24.520 --> 00:17:25.960
It's a callable.


00:17:25.960 --> 00:17:29.520
And this is actually something that I guess I realized,


00:17:29.520 --> 00:17:31.720
I just sort of got used to with Python.


00:17:31.720 --> 00:17:33.040
It's a lot more,


00:17:33.040 --> 00:17:35.720
if you call something,


00:17:35.720 --> 00:17:39.680
like as if you would call a function,


00:17:39.680 --> 00:17:41.040
it might not be a function.


00:17:41.040 --> 00:17:41.920
It might be a class.


00:17:41.920 --> 00:17:44.360
It might be an object that's callable.


00:17:44.360 --> 00:17:45.720
it might be a class object.


00:17:45.720 --> 00:17:47.920
All sorts of stuff you could do.


00:17:47.920 --> 00:17:52.280
Like for, just to be clear, we were talking about,


00:17:52.280 --> 00:17:55.520
or he talks about classes or callables.


00:17:55.520 --> 00:17:59.720
So in like some, in like JavaScript or C++,


00:17:59.720 --> 00:18:02.040
you'd have to say new something.


00:18:02.040 --> 00:18:05.480
So you'd have to say like a new data object or something.


00:18:05.480 --> 00:18:08.680
But in Python, you just call date time with some parameters


00:18:08.680 --> 00:18:11.440
and you get back a date time object.


00:18:11.440 --> 00:18:12.280
That's neat.


00:18:13.520 --> 00:18:18.240
But so it's just, I guess this is a good article


00:18:18.240 --> 00:18:19.680
to go through just to realize


00:18:19.680 --> 00:18:21.480
that you don't really have to care.


00:18:21.480 --> 00:18:25.180
There's a whole bunch of stuff that act like functions


00:18:25.180 --> 00:18:27.440
and it's okay if they're not functions.


00:18:27.440 --> 00:18:29.200
You just have to know if it's callable.


00:18:29.200 --> 00:18:34.200
And he talks a little bit about using a knit,


00:18:34.200 --> 00:18:37.880
a Dunder knit to make something callable that works.


00:18:37.880 --> 00:18:41.520
Properties are like decorators or a thing


00:18:41.520 --> 00:18:43.420
that are a callable item.


00:18:43.420 --> 00:18:48.660
There's some, it's just a good discussion


00:18:48.660 --> 00:18:51.120
about all of this.


00:18:51.120 --> 00:18:52.720
I thought this was a fascinating article


00:18:52.720 --> 00:18:55.660
and I'm not sure I ever really thought


00:18:55.660 --> 00:18:57.020
about partials before.


00:18:57.020 --> 00:19:00.260
Like a partial function is like a function


00:19:00.260 --> 00:19:04.020
that creates a, almost creates an object


00:19:04.020 --> 00:19:05.580
and then you call it with some more stuff


00:19:05.580 --> 00:19:09.140
and then it creates the rest of it or creates an, anyway.


00:19:09.140 --> 00:19:10.620
Maybe I got that wrong.


00:19:10.620 --> 00:19:13.260
- Yeah, from functuals, I'd never used partial before.


00:19:13.260 --> 00:19:14.140
Okay.


00:19:14.140 --> 00:19:18.580
- Yeah, and then there's a call decorator


00:19:18.580 --> 00:19:21.060
or a call dunder method that you can use


00:19:21.060 --> 00:19:24.380
that is helps out with making partials.


00:19:24.380 --> 00:19:31.100
And talks about iterators and decorators


00:19:31.100 --> 00:19:33.100
and all sorts of stuff like that,


00:19:33.100 --> 00:19:34.700
that actually act like callables,


00:19:34.700 --> 00:19:36.700
but they're not, they're like objects.


00:19:36.700 --> 00:19:39.620
The thing that I don't know where this is,


00:19:39.620 --> 00:19:43.620
but there's a statement in here that I thought was amazing.


00:19:43.620 --> 00:19:48.420
So there's a page on the PyPI documentation


00:19:48.420 --> 00:19:51.380
of the built-in functions within Python.


00:19:51.380 --> 00:19:55.420
And Trey points out that of the 69,


00:19:55.420 --> 00:20:00.380
there's 69 listed built-in functions within Python,


00:20:00.380 --> 00:20:03.740
only 42 are actually implemented as functions.


00:20:03.740 --> 00:20:06.660
26 of them are, 26 are classes.


00:20:06.660 --> 00:20:11.040
And one is a instance of a callable class.


00:20:11.040 --> 00:20:14.880
So like, and some of them in Python two,


00:20:14.880 --> 00:20:18.060
there were more and some of them got converted.


00:20:18.060 --> 00:20:22.440
Like map and filter and range and zip used to be functions


00:20:22.440 --> 00:20:26.860
and now they're objects or classes or something.


00:20:26.860 --> 00:20:30.560
The len function, I use that all the time, right?


00:20:30.560 --> 00:20:31.520
It's not a function.


00:20:31.520 --> 00:20:33.520
It's a callable class.


00:20:33.520 --> 00:20:35.440
- Okay.


00:20:35.440 --> 00:20:37.480
- Yeah, I mean, I think it's interesting to know


00:20:37.480 --> 00:20:39.520
that you don't need to know or be aware of.


00:20:39.520 --> 00:20:41.320
So I call this thing.


00:20:41.320 --> 00:20:43.160
- Yes, maybe ignore this article.


00:20:43.160 --> 00:20:44.000
- No, no, no.


00:20:44.000 --> 00:20:45.040
I mean, it's interesting to know.


00:20:45.040 --> 00:20:45.880
I'm just saying like,


00:20:45.880 --> 00:20:46.720
it's a little bit of a mystery.


00:20:46.720 --> 00:20:48.040
I mean, I think it's interesting to know.


00:20:48.040 --> 00:20:49.880
- Yeah, I mean, I think it's interesting to know.


00:20:49.880 --> 00:20:51.200
I mean, I think it's interesting to know.


00:20:51.200 --> 00:20:52.520
- Yeah, I mean, I think it's interesting to know.


00:20:52.520 --> 00:20:53.840
- Yeah, I mean, I think it's interesting to know.


00:20:53.840 --> 00:20:55.160
- Yeah, I mean, I think it's interesting to know.


00:20:55.160 --> 00:20:56.480
- Yeah, I mean, I think it's interesting to know.


00:20:56.480 --> 00:20:57.800
- Yeah, I mean, I think it's interesting to know.


00:20:57.800 --> 00:20:59.240
need to know or be aware of.


00:20:59.240 --> 00:21:01.280
So I call this thing--


00:21:01.280 --> 00:21:03.080
- Yes, maybe ignore this article.


00:21:03.080 --> 00:21:03.920
- No, no, no.


00:21:03.920 --> 00:21:04.740
I mean, it's interesting to know.


00:21:04.740 --> 00:21:07.320
I'm just saying like, it's not necessarily a problem


00:21:07.320 --> 00:21:09.500
that it's not super clear whether it's a class or function


00:21:09.500 --> 00:21:12.040
'cause you call it and it does the thing you want it to do.


00:21:12.040 --> 00:21:13.680
So you're good to go.


00:21:13.680 --> 00:21:17.480
- Yeah, like Sam Morley pointed out here,


00:21:17.480 --> 00:21:19.640
partial is useful.


00:21:19.640 --> 00:21:23.400
I think it can be pickled unlike typical closures


00:21:23.400 --> 00:21:25.640
that can't, might be wrong.


00:21:25.640 --> 00:21:26.960
But it just made me think about,


00:21:26.960 --> 00:21:29.820
We, in other languages, they really do talk


00:21:29.820 --> 00:21:32.240
about closures a lot and things like that.


00:21:32.240 --> 00:21:33.680
And we just don't have to care.


00:21:33.680 --> 00:21:34.520
It just works.


00:21:34.520 --> 00:21:35.340
I don't know.


00:21:35.340 --> 00:21:36.180
It just works.


00:21:36.180 --> 00:21:37.020
- Yep.


00:21:37.020 --> 00:21:37.840
- So.


00:21:37.840 --> 00:21:39.800
- Very nice.


00:21:39.800 --> 00:21:41.160
Very nice.


00:21:41.160 --> 00:21:42.620
- Well, we're at least.


00:21:42.620 --> 00:21:43.960
- Yeah, we flew through those.


00:21:43.960 --> 00:21:45.620
- We did fly through them.


00:21:45.620 --> 00:21:47.920
So, and we forgot to plug our stuff.


00:21:47.920 --> 00:21:51.760
So instead of a sponsor today, we've got,


00:21:51.760 --> 00:21:53.160
we're sponsored by us.


00:21:53.160 --> 00:21:56.280
So I want to make sure that everybody that is thinking


00:21:56.280 --> 00:21:59.120
about trying to learn something new in Python,


00:21:59.120 --> 00:22:01.900
first check out Talk Python Training


00:22:01.900 --> 00:22:04.960
because Michael has a whole bunch of awesome courses


00:22:04.960 --> 00:22:08.720
and I'm sure you can learn something for just a few bucks.


00:22:08.720 --> 00:22:11.240
So good prices.


00:22:11.240 --> 00:22:14.200
- And the new book version two, edition two.


00:22:14.200 --> 00:22:16.560
- Yeah, I've had a lot of good feedback.


00:22:16.560 --> 00:22:18.840
I love, one of the things I love is getting pictures.


00:22:18.840 --> 00:22:22.040
I don't know why, but having somebody take a picture


00:22:22.040 --> 00:22:24.800
either of themselves holding the Python testing


00:22:24.800 --> 00:22:27.240
or a Pi test, second edition, heck,


00:22:27.240 --> 00:22:29.440
you can do the first edition too, if that's what you got.


00:22:29.440 --> 00:22:31.360
But either holding it somewhere unique,


00:22:31.360 --> 00:22:34.440
like out in a park or at, you know,


00:22:34.440 --> 00:22:36.540
near a monument or something, that would be so cool.


00:22:36.540 --> 00:22:38.600
I love it when people send me pictures, so.


00:22:38.600 --> 00:22:39.740
- Yeah, that's awesome.


00:22:39.740 --> 00:22:43.020
- Got any extras for us? - Do I have extras?


00:22:43.020 --> 00:22:44.400
Yes, you know that I do.


00:22:44.400 --> 00:22:48.200
All right, so this first one here, let's check this out.


00:22:48.200 --> 00:22:50.040
So this is interesting.


00:22:50.040 --> 00:22:52.820
This comes by way of Dan Bader,


00:22:52.820 --> 00:22:55.380
And it's the Orion browser.


00:22:55.380 --> 00:22:57.820
Just when you thought there was no more room


00:22:57.820 --> 00:23:00.640
for new browsers, here's a new browser.


00:23:00.640 --> 00:23:01.520
This one is different.


00:23:01.520 --> 00:23:03.780
So you can see I'm running Vivaldi these days,


00:23:03.780 --> 00:23:05.260
I'm loving that.


00:23:05.260 --> 00:23:07.980
Other people are using Brave, right?


00:23:07.980 --> 00:23:11.920
And so all of those browsers take the Chromium engine,


00:23:11.920 --> 00:23:16.220
strip off the Google stuff, and then put their own shell,


00:23:16.220 --> 00:23:21.220
many times more privacy protecting and so on around them.


00:23:21.220 --> 00:23:24.020
around them, right?


00:23:24.020 --> 00:23:26.520
And we've got Firefox, which is awesome.


00:23:26.520 --> 00:23:29.180
It's got its own engine, it doesn't do that.


00:23:29.180 --> 00:23:31.180
But almost every other browser is,


00:23:31.180 --> 00:23:33.980
let's take Chrome and Chromium and wrap it up


00:23:33.980 --> 00:23:36.100
in our own flavor of our thing,


00:23:36.100 --> 00:23:39.700
with our own philosophy on how the web should be.


00:23:39.700 --> 00:23:43.780
So this Orion browser is that, but for Safari.


00:23:43.780 --> 00:23:45.900
- Okay.


00:23:45.900 --> 00:23:48.380
- Interesting, so if you're into Safari,


00:23:48.380 --> 00:23:50.100
you know it has things like on your Mac,


00:23:50.100 --> 00:23:52.920
It has better battery life and so on.


00:23:52.920 --> 00:23:54.640
But think of it as like,


00:23:54.640 --> 00:23:57.040
I think Brave is probably the closest analogy.


00:23:57.040 --> 00:23:59.880
It's like Brave for Safari without the crypto,


00:23:59.880 --> 00:24:02.880
but it's got built-in ad blocking,


00:24:02.880 --> 00:24:07.480
it's got built-in tracker blocking and all that.


00:24:07.480 --> 00:24:10.480
One of the big drawbacks of Safari


00:24:10.480 --> 00:24:13.600
is you don't get access to the Firefox


00:24:13.600 --> 00:24:16.440
or the Chrome extensions, right?


00:24:16.440 --> 00:24:17.940
You just get the Safari ones.


00:24:19.560 --> 00:24:23.960
But this one has compatibility both for Firefox


00:24:23.960 --> 00:24:26.760
and Chrome extensions in there.


00:24:26.760 --> 00:24:28.080
So you can, isn't that cool?


00:24:28.080 --> 00:24:31.120
So you can run this privacy protecting


00:24:31.120 --> 00:24:36.320
anti-tracker Safari with Chrome extensions.


00:24:36.320 --> 00:24:39.840
So it's just out in beta, I believe it's not yet.


00:24:39.840 --> 00:24:40.840
It's out in beta right now.


00:24:40.840 --> 00:24:44.640
So I'm not sure where it is or where it's gonna go,


00:24:44.640 --> 00:24:47.320
but it's a pretty interesting take, isn't it?


00:24:47.320 --> 00:24:49.760
- Yeah, it's certified snappy.


00:24:49.760 --> 00:24:50.940
- Certified snappy.


00:24:50.940 --> 00:24:56.920
Indeed, and it's, I really like its privacy aspect.


00:24:56.920 --> 00:24:58.520
So, it says--


00:24:58.520 --> 00:25:01.680
- I think the privacy space, and you brought this up,


00:25:01.680 --> 00:25:06.120
the privacy space is, there's convenience and there's speed,


00:25:06.120 --> 00:25:09.720
but I think that's the place where people can,


00:25:09.720 --> 00:25:11.960
we can open up the browser wars again.


00:25:11.960 --> 00:25:16.120
Because in a good way to try to,


00:25:17.200 --> 00:25:20.960
limit some of the privacy concerns or minimize them.


00:25:20.960 --> 00:25:25.960
- So yeah, nobody at Mozilla asked me, but I'll give it.


00:25:25.960 --> 00:25:29.240
You know, Firefox is having trouble


00:25:29.240 --> 00:25:30.720
sort of keeping its market share.


00:25:30.720 --> 00:25:34.480
I think if it could triple down as the browser


00:25:34.480 --> 00:25:36.120
that you cannot be tracked with,


00:25:36.120 --> 00:25:39.960
the browser that will absolutely preserve your privacy


00:25:39.960 --> 00:25:41.720
and then add services around that,


00:25:41.720 --> 00:25:42.960
I think that would be great.


00:25:42.960 --> 00:25:45.120
The big challenge is, well, guess, you know,


00:25:45.120 --> 00:25:48.820
they're 99, 90% funded by Google,


00:25:48.820 --> 00:25:50.940
an ad company who doesn't want that.


00:25:50.940 --> 00:25:53.480
So there's this, this interesting tension,


00:25:53.480 --> 00:25:55.940
but I think, you know, that's a path that I think Firefox


00:25:55.940 --> 00:25:58.020
should be taking as well, but this--


00:25:58.020 --> 00:25:59.460
- I guess I forgot about that,


00:25:59.460 --> 00:26:04.460
that Google was so, such a big stake in Firefox.


00:26:04.460 --> 00:26:06.700
- Right, I think that limits their playbook.


00:26:06.700 --> 00:26:08.180
I think they can't do things like,


00:26:08.180 --> 00:26:10.660
we're gonna make it so we're invisible


00:26:10.660 --> 00:26:12.060
if you use Firefox, basically,


00:26:12.060 --> 00:26:17.220
because their biggest supporter would not totally love that,


00:26:17.220 --> 00:26:18.180
would they?


00:26:18.180 --> 00:26:23.020
So anyway, this is a zero telemetry browser and whatnot.


00:26:23.020 --> 00:26:24.460
And you can go and download it.


00:26:24.460 --> 00:26:29.500
Apparently, it works on Apple Silicon and Intel.


00:26:29.500 --> 00:26:32.540
But obviously, being a Safari wrapper,


00:26:32.540 --> 00:26:38.900
I believe it only works on Mac and iOS things.


00:26:38.900 --> 00:26:41.500
iThings, iOS, iPad, and macOS.


00:26:41.500 --> 00:26:44.120
But if you're on those, it's a pretty interesting take.


00:26:44.120 --> 00:26:46.100
And just from the browser wars in general,


00:26:46.100 --> 00:26:48.580
I think it's pretty interesting to track.


00:26:48.580 --> 00:26:49.980
- Yeah, definitely.


00:26:49.980 --> 00:26:50.900
It's cool.


00:26:50.900 --> 00:26:53.960
- All right, one more quick extra and then off to you.


00:26:53.960 --> 00:26:57.060
So last year we all did the PSF


00:26:57.060 --> 00:26:59.660
plus JetBrains developer survey,


00:26:59.660 --> 00:27:04.660
which is supported by and analyzed by JetBrains,


00:27:04.660 --> 00:27:07.380
but is really a PSF survey.


00:27:07.380 --> 00:27:10.980
and we had 23,000 Python developers


00:27:10.980 --> 00:27:12.780
and enthusiasts participate.


00:27:12.780 --> 00:27:14.140
Well, the results are out,


00:27:14.140 --> 00:27:15.760
so people can go check those out.


00:27:15.760 --> 00:27:19.620
Now, I've got a whole lot more analysis


00:27:19.620 --> 00:27:21.540
that I'd like to do before I talk about it,


00:27:21.540 --> 00:27:23.260
but they're already out,


00:27:23.260 --> 00:27:25.300
so people can start looking around there,


00:27:25.300 --> 00:27:27.340
and I'll give you more details next week.


00:27:27.340 --> 00:27:29.340
- Yeah, cool.


00:27:29.340 --> 00:27:30.820
Yeah, we should definitely cover it next week.


00:27:30.820 --> 00:27:31.780
That'd be fun.


00:27:31.780 --> 00:27:32.700
- Absolutely.


00:27:32.700 --> 00:27:33.700
All right, how about you?


00:27:33.700 --> 00:27:35.380
I've got a small thing.


00:27:35.380 --> 00:27:40.460
I'm not sure, really needed an entire section,


00:27:40.460 --> 00:27:44.140
but Ned Batchelder did, what's in which Python?


00:27:44.140 --> 00:27:49.140
So it's a page that has basically everything from,


00:27:49.140 --> 00:27:50.720
what did he have?


00:27:50.720 --> 00:27:55.300
From 2.1 to 3.11, just a hand,


00:27:55.300 --> 00:27:57.860
not like everything that's in every version,


00:27:57.860 --> 00:28:02.000
but some of the big hitters that you might know.


00:28:02.000 --> 00:28:05.680
So like 3.10 has union types and structure


00:28:05.680 --> 00:28:06.600
and pattern matching.


00:28:06.600 --> 00:28:09.720
And what do you get with 3.11?


00:28:09.720 --> 00:28:13.200
Well, we know it's faster, but do we get like how much?


00:28:13.200 --> 00:28:16.240
It's 10 to 60% faster than 3.10.


00:28:16.240 --> 00:28:17.200
That's amazing.


00:28:17.200 --> 00:28:19.160
And then exactly-


00:28:19.160 --> 00:28:21.880
- That's really amazing that after 30 years,


00:28:21.880 --> 00:28:22.720
they're like, oh, you know,


00:28:22.720 --> 00:28:24.740
this year we're gonna make it 50% faster.


00:28:24.740 --> 00:28:26.000
Like that's incredible.


00:28:26.000 --> 00:28:27.200
I'm glad that's happening.


00:28:27.200 --> 00:28:30.220
- Yeah, and then a new module Tomolib is coming.


00:28:30.220 --> 00:28:33.860
So like, which is interesting that we've got


00:28:33.860 --> 00:28:38.860
pyproject.toml and it wasn't part of the standard library yet.


00:28:38.860 --> 00:28:42.820
So, but a whole bunch of things, like if you can't remember,


00:28:42.820 --> 00:28:47.020
like if for some reason you forgot f strings came in


00:28:47.020 --> 00:28:47.960
and what was it?


00:28:47.960 --> 00:28:50.700
The three, six, apparently I forgot.


00:28:50.700 --> 00:28:53.220
So they came in in three, six, 'cause it's on the list.


00:28:53.220 --> 00:28:55.880
Unless Ned got it wrong, which probably didn't.


00:28:55.880 --> 00:28:57.940
So. - No, I think three, six.


00:28:57.940 --> 00:29:01.100
I think that's the biggest mover for 3.6 there.


00:29:01.100 --> 00:29:02.260
- Yeah, yep.


00:29:02.260 --> 00:29:05.940
And data classes in 3.7, yeah.


00:29:05.940 --> 00:29:07.820
So lots of cool stuff.


00:29:07.820 --> 00:29:09.180
- Fantastic.


00:29:09.180 --> 00:29:10.540
Henry Schreiner out in the audience says


00:29:10.540 --> 00:29:15.080
it's the top features from each of the versions since 3.0.


00:29:15.080 --> 00:29:17.340
So not everything, not extensive,


00:29:17.340 --> 00:29:19.180
but like sort of the big hitters.


00:29:19.180 --> 00:29:21.460
- Yeah, I wasn't gonna say top because you know,


00:29:21.460 --> 00:29:22.780
there's a lot of people that worked


00:29:22.780 --> 00:29:24.580
on a whole bunch of other stuff that aren't on the list


00:29:24.580 --> 00:29:26.660
and I appreciate them as well.


00:29:26.660 --> 00:29:27.860
- Yeah, absolutely.


00:29:27.860 --> 00:29:30.220
Some of it's just setting the groundwork


00:29:30.220 --> 00:29:32.620
for the next amazing thing.


00:29:32.620 --> 00:29:33.660
- Yeah.


00:29:33.660 --> 00:29:36.620
Well, let's wrap up the show with something funny.


00:29:36.620 --> 00:29:38.180
- All right, ready for a joke?


00:29:38.180 --> 00:29:41.540
All right, this is a joke by Jen Gentleman,


00:29:41.540 --> 00:29:44.520
but called to our attention by Luke Morley.


00:29:44.520 --> 00:29:49.780
And it says, Jen says, "A programmer had a problem.


00:29:49.780 --> 00:29:52.320
"He thought, 'I know, I'll solve it with async.'


00:29:52.320 --> 00:29:54.380
"Has problems now, period, to he."


00:29:54.380 --> 00:29:56.580
(both laughing)


00:29:56.580 --> 00:29:58.480
because of race conditions, of course.


00:29:58.480 --> 00:30:02.580
- Yeah, I like it.


00:30:02.580 --> 00:30:03.420
- I like it too.


00:30:03.420 --> 00:30:05.080
Quick and simple, but yeah.


00:30:05.080 --> 00:30:08.420
There's a lot of variations on that joke


00:30:08.420 --> 00:30:09.980
and they're all good.


00:30:09.980 --> 00:30:11.540
Most of them, I guess.


00:30:11.540 --> 00:30:12.380
- So.


00:30:12.380 --> 00:30:14.460
- Yep.


00:30:14.460 --> 00:30:16.380
- Anyway, well, thanks again, Michael,


00:30:16.380 --> 00:30:19.260
for joining me today and it's a great episode.


00:30:19.260 --> 00:30:20.100
- Yeah, as always.


00:30:20.100 --> 00:30:22.460
- Thanks everybody in the show for showing up.


00:30:22.460 --> 00:30:23.700
- Yeah, thanks, Brian.


00:30:23.700 --> 00:30:24.900
Thanks everyone for coming.


00:30:24.900 --> 00:30:25.740
Bye.


00:30:25.740 --> 00:30:35.740
[BLANK_AUDIO]

