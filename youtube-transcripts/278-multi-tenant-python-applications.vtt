WEBVTT

00:00:00.000 --> 00:00:01.000
Hey, YouTube.


00:00:01.000 --> 00:00:02.000
Hey, Brian.


00:00:02.000 --> 00:00:03.000
Hey, Bruce.


00:00:03.000 --> 00:00:04.000
See you later.


00:00:04.000 --> 00:00:05.000
>> Hi.


00:00:05.000 --> 00:00:06.000
>> Hi.


00:00:06.000 --> 00:00:07.000
It's great to have you here.


00:00:07.000 --> 00:00:08.000
So it's going to be a lot of fun.


00:00:08.000 --> 00:00:09.000
You ready to kick this show off?


00:00:09.000 --> 00:00:10.000
>> Yep.


00:00:10.000 --> 00:00:11.000
Yeah.


00:00:11.000 --> 00:00:12.000
>> All right.


00:00:12.000 --> 00:00:21.160
Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:21.160 --> 00:00:22.160
to your earbuds.


00:00:22.160 --> 00:00:27.760
This is episode 278, recorded April 6, 2022.


00:00:27.760 --> 00:00:28.760
I'm Michael Kennedy.


00:00:28.760 --> 00:00:30.280
- And I'm Brian Okken.


00:00:30.280 --> 00:00:33.520
- And I'm Vuisile Ndobu.


00:00:33.520 --> 00:00:36.160
- Welcome Vuisile, it's really great to have you here.


00:00:36.160 --> 00:00:39.240
- You know, I'm really excited and I feel honored


00:00:39.240 --> 00:00:42.080
to be here, so thanks for the opportunity.


00:00:42.080 --> 00:00:43.480
- Yeah, it's gonna be great to share


00:00:43.480 --> 00:00:45.000
some Python news with you.


00:00:45.000 --> 00:00:47.480
Now, before we jump into all those things,


00:00:47.480 --> 00:00:49.120
tell us a bit about yourself.


00:00:49.120 --> 00:00:50.880
What do you do, what are you into?


00:00:50.880 --> 00:00:53.720
- All right, firstly, I'd like to say


00:00:53.720 --> 00:00:56.440
I'm still relatively early on in my career


00:00:56.440 --> 00:00:58.700
and I'm from Zimbabwe,


00:00:58.700 --> 00:01:01.760
and we have a small but growing Python community here.


00:01:01.760 --> 00:01:05.860
And for the long time, I didn't have any community.


00:01:05.860 --> 00:01:08.600
So podcasts like your Talk Python podcast


00:01:08.600 --> 00:01:12.060
was the only way I got to connect with community members.


00:01:12.060 --> 00:01:13.900
So it's really great to be here.


00:01:13.900 --> 00:01:16.140
But on the question about me,


00:01:16.140 --> 00:01:20.060
as I'm a software developer, I work in the backend.


00:01:20.060 --> 00:01:23.060
I work for a company called Ideation.ai.


00:01:23.060 --> 00:01:25.080
It's a health tech startup


00:01:25.080 --> 00:01:26.960
that's building information systems


00:01:26.960 --> 00:01:31.960
that help clinicians manage patients and hospitals better.


00:01:31.960 --> 00:01:36.120
So I work mostly on APIs and microservices


00:01:36.120 --> 00:01:39.100
using Python, Django, Postgres mostly.


00:01:39.100 --> 00:01:40.880
- Right on, that sounds like a really fun project.


00:01:40.880 --> 00:01:43.060
And we know that healthcare needs help


00:01:43.060 --> 00:01:45.980
in automation and modernization.


00:01:45.980 --> 00:01:47.760
So thanks, that's awesome.


00:01:47.760 --> 00:01:49.440
- Yeah, yeah.


00:01:49.440 --> 00:01:50.280
- Very cool.


00:01:50.280 --> 00:01:51.920
All right, Brian, should we kick it off?


00:01:51.920 --> 00:01:52.760
- Yeah, sure.


00:01:52.760 --> 00:01:54.760
- Are you talking about getting drunk or what is this?


00:01:54.760 --> 00:01:55.600
getting dunk.


00:01:55.600 --> 00:01:56.440
- Oh, sorry.


00:01:56.440 --> 00:01:57.260
I wasn't expecting that.


00:01:57.260 --> 00:01:59.680
(laughing)


00:01:59.680 --> 00:02:02.160
- So this was just announced a few days ago


00:02:02.160 --> 00:02:03.560
from Darren Burns.


00:02:03.560 --> 00:02:07.560
He's the engineer that's helping William,


00:02:07.560 --> 00:02:10.720
is it Will?


00:02:10.720 --> 00:02:15.560
Will, with Rich and everything textualized.


00:02:15.560 --> 00:02:16.840
- The Rich Empire.


00:02:16.840 --> 00:02:17.680
- Yeah.


00:02:17.680 --> 00:02:19.720
So this is just really cool


00:02:19.720 --> 00:02:22.160
'cause I often wanted the dunk,


00:02:22.160 --> 00:02:23.320
he released Dunk.


00:02:23.320 --> 00:02:28.320
So dunk is a prettier get diff tool


00:02:28.320 --> 00:02:34.560
and it uses rich and it's just a command line tool


00:02:34.560 --> 00:02:36.240
and it's beautiful.


00:02:36.240 --> 00:02:39.400
So you just install it


00:02:39.400 --> 00:02:42.160
and then you do a get diff on something.


00:02:42.160 --> 00:02:44.440
It could be one file or it could be,


00:02:44.440 --> 00:02:45.680
it's usually a commit, right?


00:02:45.680 --> 00:02:49.280
So you do a diff of whatever you have now or other stuff.


00:02:49.280 --> 00:02:52.200
And it just, instead of doing the weird,


00:02:52.200 --> 00:02:54.600
like the hard to read command line.


00:02:54.600 --> 00:02:55.680
- Minus plus.


00:02:55.680 --> 00:02:56.520
- Yeah.


00:02:56.520 --> 00:02:57.420
- Yeah, that thing.


00:02:57.420 --> 00:02:58.940
- It's got these nice,


00:02:58.940 --> 00:03:02.040
just this nice colors with rich of like,


00:03:02.040 --> 00:03:02.980
you know, what was added,


00:03:02.980 --> 00:03:05.720
what was green for added, red for taken out.


00:03:05.720 --> 00:03:09.760
And the line numbers, it's beautiful.


00:03:09.760 --> 00:03:11.480
And it's still a work in progress,


00:03:11.480 --> 00:03:12.880
but I'm using it already.


00:03:12.880 --> 00:03:14.160
It's just great.


00:03:14.160 --> 00:03:15.060
- This is fantastic.


00:03:15.060 --> 00:03:15.960
When I first looked at this,


00:03:15.960 --> 00:03:19.400
I thought it was like a gooey window that was showing,


00:03:19.400 --> 00:03:20.920
but no, there's just the terminal.


00:03:20.920 --> 00:03:21.960
- Yeah.


00:03:21.960 --> 00:03:23.480
- Yeah, yeah.


00:03:23.480 --> 00:03:24.320
- It's pretty cool.


00:03:24.320 --> 00:03:27.040
- It's something you'd expect to see in a text editor,


00:03:27.040 --> 00:03:27.960
right?


00:03:27.960 --> 00:03:29.400
- Yeah, definitely.


00:03:29.400 --> 00:03:32.360
Some text editors have something that like this nice,


00:03:32.360 --> 00:03:34.660
but just on the command line, it's super cool.


00:03:34.660 --> 00:03:37.640
One of my first questions with it was,


00:03:37.640 --> 00:03:39.520
sometimes I have a lot of diff stuff,


00:03:39.520 --> 00:03:41.560
so does this have a pager?


00:03:41.560 --> 00:03:46.000
And the answer from Darren was, it does not have a pager,


00:03:46.000 --> 00:03:50.440
but you can use last-R.


00:03:50.440 --> 00:03:51.720
I don't know what the R does,


00:03:51.720 --> 00:03:56.000
But anyway, if you pipe get diff to dunk


00:03:56.000 --> 00:03:57.660
and then pipe it to less dash R,


00:03:57.660 --> 00:03:59.640
you've got a diff with a pager.


00:03:59.640 --> 00:04:00.480
That works for me.


00:04:00.480 --> 00:04:02.160
I'll just alias that to something.


00:04:02.160 --> 00:04:05.760
- Yeah, yeah, that's really cool.


00:04:05.760 --> 00:04:08.820
- Anyway, pretty quick, pretty short topic,


00:04:08.820 --> 00:04:12.080
but for people that are looking at get diffs a lot,


00:04:12.080 --> 00:04:14.480
this is a super handy thing to look at.


00:04:14.480 --> 00:04:15.300
- Yeah, this is neat.


00:04:15.300 --> 00:04:17.720
I usually do a lot of my diffs in PyCharm


00:04:17.720 --> 00:04:19.920
and it actually looks real similar to that UI.


00:04:19.920 --> 00:04:21.200
- Busile, what about you?


00:04:21.200 --> 00:04:23.680
How do you see your diffs?


00:04:23.680 --> 00:04:27.000
- Yeah, I do most of my coding in Visual Studio Code


00:04:27.000 --> 00:04:30.160
and I use the Visual Studio diff viewer for that.


00:04:30.160 --> 00:04:31.880
Same, it's pretty similar to this.


00:04:31.880 --> 00:04:35.040
- Nice, yeah, this looks great, I think.


00:04:35.040 --> 00:04:36.880
Very nice.


00:04:36.880 --> 00:04:37.840
- It's a good job here.


00:04:37.840 --> 00:04:39.320
- Yeah, very nice one.


00:04:39.320 --> 00:04:41.020
How about we start with some memes?


00:04:41.020 --> 00:04:45.600
So, we all heard about Log4j.


00:04:46.700 --> 00:04:51.060
And my favorite one was the take on the XKCD


00:04:51.060 --> 00:04:52.500
about little Bobby Tables,


00:04:52.500 --> 00:04:55.900
the little little little Jindy we call him


00:04:55.900 --> 00:04:58.300
or something like that, I can't remember.


00:04:58.300 --> 00:05:01.540
But, you know, all the jokes aside,


00:05:01.540 --> 00:05:03.140
like, you know, here's Homer Simpson,


00:05:03.140 --> 00:05:06.700
zero days without log4j CVE.


00:05:06.700 --> 00:05:10.140
Maybe the best one was that this guy right here,


00:05:10.140 --> 00:05:12.860
this guy, he looks like he's probably about 75 retiring,


00:05:12.860 --> 00:05:16.100
says, "Upgraded log, upgraded log4j three times,


00:05:16.100 --> 00:05:19.160
"It wasn't that stressful," says Dave, 28 years old.


00:05:19.160 --> 00:05:21.980
(both laughing)


00:05:21.980 --> 00:05:26.140
But in all seriousness, is there a log for Pi?


00:05:26.140 --> 00:05:27.500
Is this something that we should consider?


00:05:27.500 --> 00:05:30.660
And my first thought was, yeah, no, we're good.


00:05:30.660 --> 00:05:34.060
We don't have this stupid remote method invocation


00:05:34.060 --> 00:05:37.260
where you can inject a function call


00:05:37.260 --> 00:05:41.300
as a string inside of your log message.


00:05:41.300 --> 00:05:42.220
- Oh, no.


00:05:42.220 --> 00:05:45.660
- But here's Ari Bovenberg, who wrote an article


00:05:45.660 --> 00:05:47.940
it says, yeah, it's not anywhere near as severe as that,


00:05:47.940 --> 00:05:51.060
but there are some things you should consider.


00:05:51.060 --> 00:05:53.020
And so for your consideration,


00:05:53.020 --> 00:05:54.580
I present this article and some ideas.


00:05:54.580 --> 00:05:57.340
So it says, look, here's the basics of logging.


00:05:57.340 --> 00:05:59.540
And this is using Python's built-in logger.


00:05:59.540 --> 00:06:03.620
I'm a fan of Logbook and Loguru


00:06:03.620 --> 00:06:05.860
and the sort of higher level, nicer things,


00:06:05.860 --> 00:06:08.340
but nonetheless, here's the basics, right?


00:06:08.340 --> 00:06:12.580
And so you can log, like say, logger.info or trace


00:06:12.580 --> 00:06:14.020
or whatever, and then put out a message like,


00:06:14.020 --> 00:06:16.060
hello world, there's no injection there.


00:06:16.060 --> 00:06:18.500
You can also do this thing,


00:06:18.500 --> 00:06:21.520
which is really the crux of the problem across the board.


00:06:21.520 --> 00:06:24.260
Is you can say, here's a formatted string


00:06:24.260 --> 00:06:26.380
and the data that formats it.


00:06:26.380 --> 00:06:28.640
So you can put in,


00:06:28.640 --> 00:06:31.580
the problem with log4j was,


00:06:31.580 --> 00:06:34.180
even if the string was fully evaluated


00:06:34.180 --> 00:06:37.440
as user input or something,


00:06:37.440 --> 00:06:41.140
you take some user input and you fully validate it,


00:06:41.140 --> 00:06:44.340
it still could have, it'll still get like reinterpreted


00:06:44.340 --> 00:06:46.700
for these remote, like trying to find you,


00:06:46.700 --> 00:06:47.940
what machine am I running on?


00:06:47.940 --> 00:06:49.120
Or am I production or debug?


00:06:49.120 --> 00:06:51.140
Like, let me go call this function and find out


00:06:51.140 --> 00:06:53.560
or just call it to hack you.


00:06:53.560 --> 00:06:57.740
But so the Python version doesn't have that,


00:06:57.740 --> 00:06:59.760
but you can do this like format string


00:06:59.760 --> 00:07:01.580
and pass this context variable thing,


00:07:01.580 --> 00:07:03.820
like pass a data structure in.


00:07:03.820 --> 00:07:08.540
And in that case, some bad stuff can actually happen here.


00:07:08.540 --> 00:07:09.380
Right?


00:07:09.380 --> 00:07:10.200
So that's fine.


00:07:10.200 --> 00:07:14.120
What if I wrote my, as my name,


00:07:14.120 --> 00:07:16.160
instead of, or my message, instead of hello,


00:07:16.160 --> 00:07:20.400
I wrote hello, quote, backslash,


00:07:20.400 --> 00:07:24.220
and info main user Alice commented something else,


00:07:24.220 --> 00:07:25.920
and you would pass that over,


00:07:25.920 --> 00:07:28.160
and what you would end up with is a log message


00:07:28.160 --> 00:07:31.200
that was supposed to be one line that ends up like two.


00:07:31.200 --> 00:07:34.080
So that could cause some confusion, right?


00:07:34.080 --> 00:07:36.480
That might be problematic.


00:07:36.480 --> 00:07:38.920
It's not gonna result you in being hacked.


00:07:38.920 --> 00:07:42.100
But there's more like denial of service type of thing.


00:07:42.100 --> 00:07:43.320
So like one thing you could say is,


00:07:43.320 --> 00:07:46.820
well, just don't use backslash n, like take those out.


00:07:46.820 --> 00:07:50.320
But there are all sorts of freaky Unicode ways


00:07:50.320 --> 00:07:53.600
to like restructure similar meanings and stuff.


00:07:53.600 --> 00:07:57.920
So another one has to do with formatting.


00:07:57.920 --> 00:08:00.860
So if you're logging in some information


00:08:00.860 --> 00:08:04.860
and it's just a regular F string, that's probably fine.


00:08:04.860 --> 00:08:07.180
But if what you're logging into the F string,


00:08:07.180 --> 00:08:09.980
You can later get evaluated again,


00:08:09.980 --> 00:08:12.100
passing this like data structure,


00:08:12.100 --> 00:08:16.900
asking the logger to fill out the format string.


00:08:16.900 --> 00:08:18.660
Then you can pass interesting stuff.


00:08:18.660 --> 00:08:21.660
One of the more interesting ones was,


00:08:21.660 --> 00:08:23.100
you could say percent,


00:08:23.100 --> 00:08:28.140
parentheses, variable name, close parentheses,


00:08:28.140 --> 00:08:32.500
9999999999s.


00:08:32.500 --> 00:08:34.600
And what that'll do is it'll pad the username


00:08:34.600 --> 00:08:36.180
with a gigabyte of white space


00:08:36.180 --> 00:08:38.680
and then try to have you write it to the log file.


00:08:38.680 --> 00:08:39.520
(laughing)


00:08:39.520 --> 00:08:40.360
- Okay.


00:08:40.360 --> 00:08:43.380
- So that's bad, right?


00:08:43.380 --> 00:08:45.020
- Right, yeah.


00:08:45.020 --> 00:08:47.300
- You could also do things if you knew the data structure


00:08:47.300 --> 00:08:51.020
that was being passed in to fill out the log string,


00:08:51.020 --> 00:08:52.900
had, you could sort of try to reach out


00:08:52.900 --> 00:08:56.700
and get variable names out of it


00:08:56.700 --> 00:08:59.220
by putting a formatted string in there.


00:08:59.220 --> 00:09:03.060
And if you marry that with the huge piece of text,


00:09:03.060 --> 00:09:05.640
that'll make the login really slow.


00:09:05.640 --> 00:09:07.600
So you could put in like different things


00:09:07.600 --> 00:09:09.720
and if you see, oh, this message actually makes


00:09:09.720 --> 00:09:12.220
the request really slow, you could infer


00:09:12.220 --> 00:09:15.160
that maybe that data is actually in


00:09:15.160 --> 00:09:16.740
the variable being passed over.


00:09:16.740 --> 00:09:18.840
So then you could try to get it to write it to a file


00:09:18.840 --> 00:09:21.600
if you have say file access, but not other types of access.


00:09:21.600 --> 00:09:23.520
Anyway, so there's a bunch of things.


00:09:23.520 --> 00:09:26.600
So basically the long story short is


00:09:26.600 --> 00:09:29.160
don't mix like F string formatting


00:09:29.160 --> 00:09:32.040
along with passing more data to the log file,


00:09:32.040 --> 00:09:34.600
kind of one or the other, because the logger knows


00:09:34.600 --> 00:09:36.480
how to look for some of these things


00:09:36.480 --> 00:09:38.560
when it takes the data and puts it in the format,


00:09:38.560 --> 00:09:41.080
but it doesn't do that for the original string.


00:09:41.080 --> 00:09:43.400
So, careful about mix and match.


00:09:43.400 --> 00:09:46.200
Final thing, there's actually,


00:09:46.200 --> 00:09:48.340
it's been included in a pep,


00:09:48.340 --> 00:09:50.900
and there's a discussion on discuss.python.org.


00:09:50.900 --> 00:09:54.760
And there's actually a pretty interesting discussion


00:09:54.760 --> 00:09:55.860
with a bunch of core devs there.


00:09:55.860 --> 00:09:59.020
So you can see, that's maybe a better follow up there.


00:09:59.020 --> 00:10:01.080
But pretty interesting.


00:10:01.080 --> 00:10:03.040
There's no log for py,


00:10:03.040 --> 00:10:06.600
but there doesn't mean you can just completely go crazy


00:10:06.600 --> 00:10:08.780
with unverified user input.


00:10:08.780 --> 00:10:13.000
- You should trust your users though.


00:10:13.000 --> 00:10:13.840
- I know.


00:10:13.840 --> 00:10:16.240
Why not?


00:10:16.240 --> 00:10:17.840
They're so friendly and considerate.


00:10:17.840 --> 00:10:19.240
- Yeah, why not?


00:10:19.240 --> 00:10:20.160
- The real ones are.


00:10:20.160 --> 00:10:21.960
- You know, when this,


00:10:21.960 --> 00:10:24.600
when this blog 4J vulnerability came out


00:10:24.600 --> 00:10:27.680
and I realized that it wasn't really a big problem in Python,


00:10:27.680 --> 00:10:29.000
I didn't pay any attention to it.


00:10:29.000 --> 00:10:31.080
And now I'm actually shocked


00:10:31.080 --> 00:10:34.260
that you could do a denial of service attack using that.


00:10:34.260 --> 00:10:35.100
- Yeah, exactly.


00:10:35.100 --> 00:10:37.920
I think that's what it basically becomes is,


00:10:37.920 --> 00:10:38.960
there's two aspects.


00:10:38.960 --> 00:10:41.100
One is you can sort of crush the server


00:10:41.100 --> 00:10:43.160
by having it write so much data.


00:10:43.160 --> 00:10:45.540
The other that they pointed out here was,


00:10:45.540 --> 00:10:50.540
if your goal is to try to obscure regular hacking,


00:10:50.540 --> 00:10:53.600
if you could wreck the log file with so much data


00:10:53.600 --> 00:10:57.640
that it's really difficult for people to parse the log file,


00:10:57.640 --> 00:10:58.900
you might be able to hide yourself


00:10:58.900 --> 00:11:00.220
a little bit better for longer.


00:11:00.220 --> 00:11:02.720
So anyway, there's some interesting stuff there.


00:11:02.720 --> 00:11:05.260
All right, Vusile, over to you.


00:11:05.260 --> 00:11:08.720
- Yep, thanks.


00:11:08.720 --> 00:11:13.100
So if you're building a software as a service platform


00:11:13.100 --> 00:11:17.220
in Python and Django, there are a few things to think about,


00:11:17.220 --> 00:11:18.860
you know, like the architecture you're gonna use,


00:11:18.860 --> 00:11:21.380
what type of database you're gonna use,


00:11:21.380 --> 00:11:23.820
whether you use a single database or multiple databases


00:11:23.820 --> 00:11:25.260
and all these things.


00:11:25.260 --> 00:11:27.540
So while I was getting ready for this call,


00:11:27.540 --> 00:11:29.680
I found this book, it's called


00:11:29.680 --> 00:11:32.740
Building Multi-Tenant Applications with Django.


00:11:32.740 --> 00:11:34.820
And it's by an author that you've actually covered


00:11:34.820 --> 00:11:37.420
on the show, it's a company I think called Agile.


00:11:37.420 --> 00:11:42.460
This book is free, it's open source,


00:11:42.460 --> 00:11:45.080
anyone's free to read it, download it.


00:11:45.080 --> 00:11:47.240
And it goes through the different approaches


00:11:47.240 --> 00:11:49.860
that you'd have to follow, I mean,


00:11:49.860 --> 00:11:52.660
the different architecture designs that you should consider


00:11:52.660 --> 00:11:54.040
when building software as a service


00:11:54.040 --> 00:11:56.180
or multi-tenant applications.


00:11:56.180 --> 00:11:58.660
And so one of the things they cover here is,


00:11:58.660 --> 00:12:07.660
so for instance, if this all depends on what sort of,


00:12:07.660 --> 00:12:16.460
how you feel, so you can have one database


00:12:16.460 --> 00:12:24.040
with a shared email where you're using queries


00:12:24.040 --> 00:12:27.920
to isolate the data, or if you're using a database,


00:12:27.920 --> 00:12:31.400
use a database support, something like Postgres,


00:12:31.400 --> 00:12:32.580
schemas can do that.


00:12:32.580 --> 00:12:36.120
And then if you're not, like how you do that in Docker.


00:12:36.120 --> 00:12:36.960
So,


00:12:36.960 --> 00:12:43.080
it goes through


00:12:43.080 --> 00:12:46.120
different ways you can


00:12:51.840 --> 00:12:54.920
build these multi-tenancy applications.


00:12:54.920 --> 00:13:12.480
- Ussili, we lost you for a second there.


00:13:12.480 --> 00:13:17.280
Let's, gonna hold on for a second.


00:13:17.280 --> 00:13:19.040
Oh no, we'd lost him for sure.


00:13:19.040 --> 00:13:20.160
- Oh no.


00:13:20.160 --> 00:13:21.000
- Oh no.


00:13:21.000 --> 00:13:24.000
Fabio, cool topic too.


00:13:24.000 --> 00:13:30.800
>> It is. He'll be back. Hey Fabio, out in the audience.


00:13:30.800 --> 00:13:45.040
Fuseli, we lost you for a second there. Are you okay now?


00:13:45.040 --> 00:13:48.880
>> Yeah, I'm back now. What are the last things I heard?


00:13:48.880 --> 00:13:52.000
You were talking about the two different ways


00:13:52.000 --> 00:13:53.420
in which you could do multi-tenancy.


00:13:53.420 --> 00:13:55.560
One is like with queries and stuff like that.


00:13:55.560 --> 00:13:56.680
So maybe just pick it up there


00:13:56.680 --> 00:13:58.380
and we'll edit it in, no problem.


00:13:58.380 --> 00:14:03.960
- Okay, can I just share the screen?


00:14:03.960 --> 00:14:04.800
- Yeah, go ahead.


00:14:04.800 --> 00:14:07.220
- Screen, one second.


00:14:07.220 --> 00:14:13.520
Okay, can you see my screen?


00:14:13.520 --> 00:14:16.300
- Yes, we can.


00:14:17.760 --> 00:14:18.600
Take two.


00:14:18.600 --> 00:14:20.800
- All right.


00:14:20.800 --> 00:14:23.240
So I was saying, yeah, I was saying,


00:14:23.240 --> 00:14:25.400
this book goes over the different approaches


00:14:25.400 --> 00:14:28.680
you can use to build multi-tenancy apps, right?


00:14:28.680 --> 00:14:31.560
And then it also covers some third party packages


00:14:31.560 --> 00:14:34.360
that you can install that help do a lot


00:14:34.360 --> 00:14:36.240
of the boilerplate code for you.


00:14:36.240 --> 00:14:38.640
- Oh, that's really nice.


00:14:38.640 --> 00:14:39.640
'Cause I've considered this.


00:14:39.640 --> 00:14:41.920
It'd be so great if you're doing some sort of software


00:14:41.920 --> 00:14:45.100
as a service type thing where people log in


00:14:45.100 --> 00:14:46.920
and you want like that group just to see


00:14:46.920 --> 00:14:49.520
all their data and all their records and stuff.


00:14:49.520 --> 00:14:52.560
But it's so scary because if you just forget the where clause


00:14:52.560 --> 00:14:57.320
on just one, on just one, they get everybody's data,


00:14:57.320 --> 00:14:58.680
which is really bad, right?


00:14:58.680 --> 00:15:00.740
And so this is really cool.


00:15:00.740 --> 00:15:03.520
- Yeah, this is neat.


00:15:03.520 --> 00:15:07.640
- The book covers things like using HTTP headers


00:15:07.640 --> 00:15:12.640
or subdomains in the request to identify different tenants


00:15:13.280 --> 00:15:15.020
and how you'd do that,


00:15:15.020 --> 00:15:17.520
how you'd capture that using middleware in Django.


00:15:17.520 --> 00:15:19.480
- That's cool.


00:15:19.480 --> 00:15:23.160
So some of the middleware is Django multi-tenant,


00:15:23.160 --> 00:15:27.620
Django tenant schemas or Django DB multi-tenant.


00:15:27.620 --> 00:15:29.500
Not a ton of variation in the name in there,


00:15:29.500 --> 00:15:32.140
but it's still pretty cool, right?


00:15:32.140 --> 00:15:33.880
And some of them use schemas


00:15:33.880 --> 00:15:36.240
and some of them use isolated databases, right?


00:15:36.240 --> 00:15:38.300
- Yeah, yeah.


00:15:38.300 --> 00:15:42.400
So it will always depend on what your tolerance


00:15:42.400 --> 00:15:45.960
for cost is and database management.


00:15:45.960 --> 00:15:48.680
So if you don't mind having a database for each client,


00:15:48.680 --> 00:15:49.520
you could do that.


00:15:49.520 --> 00:15:51.880
And then you'd have to do migrations on each database


00:15:51.880 --> 00:15:54.540
wherever you make updates to the application.


00:15:54.540 --> 00:15:56.360
Or if you just wanna have a single shared database,


00:15:56.360 --> 00:15:58.520
you can do that and isolate using schemas.


00:15:58.520 --> 00:16:02.480
- Yeah, I hadn't thought about having to migrate


00:16:02.480 --> 00:16:05.840
every separate database, but yeah, that's a ton of work.


00:16:05.840 --> 00:16:07.560
The deployment all of a sudden looks really rough,


00:16:07.560 --> 00:16:08.400
doesn't it?


00:16:08.400 --> 00:16:10.040
- Yeah, yeah.


00:16:10.040 --> 00:16:11.800
But that's true isolation there, right?


00:16:11.800 --> 00:16:13.240
- Yeah, exactly, there's no way


00:16:13.240 --> 00:16:15.400
you're gonna make a mistake there.


00:16:15.400 --> 00:16:17.120
Do you guys do anything like this


00:16:17.120 --> 00:16:19.060
with your healthcare products?


00:16:19.060 --> 00:16:21.900
- Yeah, yeah, we use one of these approaches.


00:16:21.900 --> 00:16:24.700
I can't tell you which one, but we use,


00:16:24.700 --> 00:16:28.720
our software is a software, what do you call it?


00:16:28.720 --> 00:16:29.840
Software as a service.


00:16:29.840 --> 00:16:32.000
We have a number of clients.


00:16:32.000 --> 00:16:34.360
They need to have a central login,


00:16:34.360 --> 00:16:36.760
like the single application that they can all log in


00:16:36.760 --> 00:16:37.920
and view only their data,


00:16:37.920 --> 00:16:40.360
and we can't have information from one client


00:16:40.360 --> 00:16:42.280
and then you can move it into another.


00:16:42.280 --> 00:16:43.720
- Yeah, cool.


00:16:43.720 --> 00:16:44.620
All right, well, really neat.


00:16:44.620 --> 00:16:48.220
I'm sure that'll be super valuable to people indeed.


00:16:48.220 --> 00:16:49.060
- Yeah.


00:16:49.060 --> 00:16:52.020
- Now, Brian, before we move on,


00:16:52.020 --> 00:16:53.620
how about I tell you about our sponsor?


00:16:53.620 --> 00:16:55.260
Once again, Microsoft is here,


00:16:55.260 --> 00:16:57.580
so let's hear from them before we carry on.


00:16:57.580 --> 00:16:59.700
This episode of Python Bytes is brought to you


00:16:59.700 --> 00:17:02.860
by Microsoft for Startups Founders Hub.


00:17:02.860 --> 00:17:04.580
Starting a business is hard.


00:17:04.580 --> 00:17:07.100
By some estimates, over 90% of startups


00:17:07.100 --> 00:17:09.940
will go out of business in just their first year.


00:17:09.940 --> 00:17:12.340
With that in mind, Microsoft for Startups set out


00:17:12.340 --> 00:17:15.300
to understand what startups need to be successful


00:17:15.300 --> 00:17:17.100
and to create a digital platform


00:17:17.100 --> 00:17:19.100
to help them overcome those challenges.


00:17:19.100 --> 00:17:21.700
Microsoft for Startups Founders Hub was born.


00:17:21.700 --> 00:17:24.660
Founders Hub provides all founders at any stage


00:17:24.660 --> 00:17:28.640
with free resources to solve their startup challenges.


00:17:28.640 --> 00:17:31.060
The platform provides technology benefits,


00:17:31.060 --> 00:17:33.940
access to expert guidance and skilled resources,


00:17:33.940 --> 00:17:37.240
mentorship and networking connections, and much more.


00:17:37.240 --> 00:17:38.740
Unlike others in the industry,


00:17:38.740 --> 00:17:40.940
Microsoft for Startups Founders Hub


00:17:40.940 --> 00:17:43.940
doesn't require startups to be investor backed


00:17:43.940 --> 00:17:46.780
or third party validated to participate.


00:17:46.780 --> 00:17:49.260
Founders Hub is truly open to all.


00:17:49.260 --> 00:17:50.860
So what do you get if you join them?


00:17:50.860 --> 00:17:52.940
You speed up your development with free access


00:17:52.940 --> 00:17:55.820
to GitHub and Microsoft Cloud computing resources


00:17:55.820 --> 00:17:59.060
and the ability to unlock more credits over time.


00:17:59.060 --> 00:18:00.300
To help your startup innovate,


00:18:00.300 --> 00:18:02.700
Founders Hub is partnering with innovative companies


00:18:02.700 --> 00:18:06.180
like OpenAI, a global leader in AI research and development


00:18:06.180 --> 00:18:09.140
to provide exclusive benefits and discounts.


00:18:09.140 --> 00:18:11.440
Through Microsoft for Startups Founders Hub,


00:18:11.440 --> 00:18:14.220
becoming a founder is no longer about who you know.


00:18:14.220 --> 00:18:16.000
You'll have access to their mentorship network,


00:18:16.000 --> 00:18:18.080
giving you a pool of hundreds of mentors


00:18:18.080 --> 00:18:20.720
across a range of disciplines and areas


00:18:20.720 --> 00:18:23.140
like idea validation, fundraising,


00:18:23.140 --> 00:18:25.260
management and coaching, sales and marketing,


00:18:25.260 --> 00:18:27.880
as well as specific technical stress points.


00:18:27.880 --> 00:18:29.540
You'll be able to book a one-on-one meeting


00:18:29.540 --> 00:18:30.380
with the mentors,


00:18:30.380 --> 00:18:33.160
many of whom are former founders themselves.


00:18:33.160 --> 00:18:34.760
Make your idea a reality today


00:18:34.760 --> 00:18:38.260
with the critical support you'll get from Founder's Hub.


00:18:38.260 --> 00:18:42.360
To join the program, just visit pythonbytes.fm/foundershub.


00:18:42.360 --> 00:18:44.840
All one word, no links in your show notes.


00:18:44.840 --> 00:18:47.200
Thank you to Microsoft for supporting the show.


00:18:47.200 --> 00:18:51.960
This episode.


00:18:51.960 --> 00:18:52.800
- Hey Ryan.


00:18:52.800 --> 00:18:53.640
- Hey.


00:18:53.640 --> 00:18:55.120
- Did I hit that twice?


00:18:55.120 --> 00:18:59.480
So, this is a topic that has been very interesting to me,


00:18:59.480 --> 00:19:02.920
sort of this memory story around Python lists.


00:19:02.920 --> 00:19:03.760
- Yeah.


00:19:03.760 --> 00:19:06.040
- I'm looking forward to this one you got to share.


00:19:06.040 --> 00:19:07.520
- So I was interested,


00:19:07.520 --> 00:19:09.560
this is a, we're gonna present an article


00:19:09.560 --> 00:19:11.800
called Pre-Allocated Lists in Python


00:19:11.800 --> 00:19:14.560
by Redouane Delaware, I think.


00:19:14.560 --> 00:19:18.200
Anyway, I've thought about this before


00:19:18.200 --> 00:19:20.280
because one of the things that happens


00:19:20.280 --> 00:19:23.620
with when you allocate a list in Python, if it's empty,


00:19:23.620 --> 00:19:25.200
it's not really empty.


00:19:25.200 --> 00:19:26.640
There's some data there already.


00:19:26.640 --> 00:19:28.800
And one of the first things the article talks about


00:19:28.800 --> 00:19:32.000
is this data structure that a C struct


00:19:32.000 --> 00:19:36.400
that Python uses to store basically the info about the list.


00:19:36.400 --> 00:19:38.340
But it's still space, but it's, you know,


00:19:38.340 --> 00:19:40.860
it's still, it's empty supposedly.


00:19:40.860 --> 00:19:44.000
And then when you, and normally you kind of just append


00:19:44.000 --> 00:19:47.280
to it, so you, or one way to add things to a list


00:19:47.280 --> 00:19:50.680
is to just append one thing after another.


00:19:50.680 --> 00:19:54.280
And what Python does, it's kind of a neat algorithm


00:19:54.280 --> 00:19:56.440
is it allocates more than it needs.


00:19:56.440 --> 00:19:59.840
So if you add, if it, if you add like five things


00:19:59.840 --> 00:20:02.600
or six things or something and there's not enough space,


00:20:02.600 --> 00:20:05.660
it'll, and I don't remember the real algorithm,


00:20:05.660 --> 00:20:07.980
but it chunks a bigger portion.


00:20:07.980 --> 00:20:10.040
And then if you run out of space again,


00:20:10.040 --> 00:20:12.700
you get more space added to it.


00:20:12.700 --> 00:20:14.100
- Right, 'cause the last thing you wanna do


00:20:14.100 --> 00:20:18.420
is reallocate one byte at a time


00:20:18.420 --> 00:20:21.020
and copy the whole list as you're adding 1,000 items.


00:20:21.020 --> 00:20:22.380
That would be super bad.


00:20:22.380 --> 00:20:25.580
- Right, so this article talks about three different ways.


00:20:25.580 --> 00:20:26.860
Like let's say if you know,


00:20:26.860 --> 00:20:29.500
you know you're gonna have 10,000 elements in a list.


00:20:29.500 --> 00:20:33.900
And in this example, it's just counting, you know,


00:20:33.900 --> 00:20:38.020
zero through, you know, 9,999


00:20:38.020 --> 00:20:40.420
and filling it into the list.


00:20:40.420 --> 00:20:45.420
But there's, that's, I think that that's irrelevant.


00:20:45.420 --> 00:20:48.520
It's the same sort of work for each kind of list,


00:20:48.520 --> 00:20:49.740
but it takes three kinds.


00:20:49.740 --> 00:20:52.300
Well, the first kind is starting with an empty list


00:20:52.300 --> 00:20:54.340
and just appending every time.


00:20:54.340 --> 00:20:56.660
And that seems like it would be slow,


00:20:56.660 --> 00:20:58.860
but it's not actually not that bad.


00:20:58.860 --> 00:21:00.660
The other two ways are to preallocate.


00:21:00.660 --> 00:21:03.100
And I'm like, how would you preallocate?


00:21:03.100 --> 00:21:08.100
But his technique was to take like none


00:21:08.100 --> 00:21:14.160
and just assign your list, none times 10,000.


00:21:14.160 --> 00:21:17.460
So you had a 10,000 element list of nones.


00:21:17.460 --> 00:21:18.460
That's fine.


00:21:18.460 --> 00:21:19.680
And then--


00:21:19.680 --> 00:21:22.340
- Long as that's not a valid value, you're fine.


00:21:22.340 --> 00:21:23.180
- Yeah.


00:21:24.360 --> 00:21:29.360
And then the third way was to take,


00:21:29.360 --> 00:21:31.580
let's see, where is it?


00:21:31.580 --> 00:21:35.820
Is to do a list comprehension


00:21:35.820 --> 00:21:40.820
and just assign your list, the list comprehension


00:21:40.820 --> 00:21:45.400
and then put a for loop for I in range 10,000


00:21:45.400 --> 00:21:47.000
in the middle of it.


00:21:47.000 --> 00:21:51.080
And in this case, if you weren't really just counting


00:21:51.080 --> 00:21:53.200
to a 10,000 and doing something else,


00:21:53.200 --> 00:21:56.600
would be a similar sort of thing if you'd have a for loop to fill this in.


00:21:56.600 --> 00:22:05.040
And I actually had no guesses as to what would be fastest. So the final


00:22:05.040 --> 00:22:11.240
say when he was doing timing on this was that the append method actually was


00:22:11.240 --> 00:22:17.280
the slowest but not terrible. It's pretty efficient. And the preallocate method it


00:22:17.280 --> 00:22:21.460
It shaved, so we had 499 microseconds on his machine.


00:22:21.460 --> 00:22:27.120
And then 321 on the pre-allocate.


00:22:27.120 --> 00:22:28.960
So that's not even half as,


00:22:28.960 --> 00:22:32.560
I mean, it's not an order of magnitude, but it is faster.


00:22:32.560 --> 00:22:35.640
And the list comprehension was 225.


00:22:35.640 --> 00:22:37.000
So that was about half,


00:22:37.000 --> 00:22:40.240
it was about twice as fast as the append


00:22:40.240 --> 00:22:42.160
was to use the list comprehension.


00:22:42.160 --> 00:22:44.760
And list comprehension is actually the most readable


00:22:44.760 --> 00:22:45.960
of the three, I think.


00:22:45.960 --> 00:22:50.120
So it's just sort of a, I guess,


00:22:50.120 --> 00:22:52.920
it's an interesting article to look at like how,


00:22:52.920 --> 00:22:57.080
to discuss like how this allocating


00:22:57.080 --> 00:23:00.940
and allocating extra memory happens with append.


00:23:00.940 --> 00:23:04.280
But it also is interesting that the preallocate,


00:23:04.280 --> 00:23:06.080
it seems like that would be the fast,


00:23:06.080 --> 00:23:08.560
one of the faster ones and it's not.


00:23:08.560 --> 00:23:09.860
So interesting.


00:23:11.560 --> 00:23:12.400
- Yeah.


00:23:12.400 --> 00:23:16.440
- I wonder if, I don't think the list has this.


00:23:16.440 --> 00:23:17.800
I know in other languages it does.


00:23:17.800 --> 00:23:19.720
Where you, when you create the list empty,


00:23:19.720 --> 00:23:21.520
you can say, I would like to initialize you


00:23:21.520 --> 00:23:22.840
with this capacity.


00:23:22.840 --> 00:23:25.100
- Yeah.


00:23:25.100 --> 00:23:25.920
- Right?


00:23:25.920 --> 00:23:26.760
And if it was like a built-in way to say


00:23:26.760 --> 00:23:31.760
when you allocate your inner C level array pointers,


00:23:31.760 --> 00:23:33.760
make it this big to start with,


00:23:33.760 --> 00:23:35.160
but still sort of fill into it


00:23:35.160 --> 00:23:37.160
before you start your growing algorithm.


00:23:37.160 --> 00:23:39.120
- Yeah.


00:23:39.120 --> 00:23:40.680
- Maybe that'd be a cool PEP for some of the containers


00:23:40.680 --> 00:23:43.440
if it's not there, but yeah, I think it's natural


00:23:43.440 --> 00:23:45.240
that the list comprehension is fastest.


00:23:45.240 --> 00:23:47.120
And also it means you don't end up


00:23:47.120 --> 00:23:50.240
with a weird programming model where you have a list,


00:23:50.240 --> 00:23:51.420
it's linked as one thing,


00:23:51.420 --> 00:23:53.240
but that's not what you should actually work with.


00:23:53.240 --> 00:23:55.400
I think that's probably not worth it


00:23:55.400 --> 00:23:57.160
except for extreme cases.


00:23:57.160 --> 00:24:00.880
- A couple of things that I found interesting about this


00:24:00.880 --> 00:24:02.760
that I'd like to pursue a little further


00:24:02.760 --> 00:24:04.480
is it didn't talk about memory space.


00:24:04.480 --> 00:24:06.600
So one of the benefits of pre-allocating


00:24:06.600 --> 00:24:08.600
is you're not allocating more than you need,


00:24:08.600 --> 00:24:10.680
but I don't know if you're not allocating.


00:24:10.680 --> 00:24:13.800
I don't know what the Python algorithm is.


00:24:13.800 --> 00:24:20.960
So I'd like to see this with space.


00:24:20.960 --> 00:24:24.120
So how much memory is being used by the three methods?


00:24:24.120 --> 00:24:26.040
The other thing that would be interesting to see


00:24:26.040 --> 00:24:28.880
is to throw NumPy in the mix


00:24:28.880 --> 00:24:31.600
because I know NumPy has some more efficient.


00:24:31.600 --> 00:24:34.760
I mean, it's a completely different beast, but still.


00:24:34.760 --> 00:24:36.160
- You work with homogeneous data,


00:24:36.160 --> 00:24:38.640
that's numbers or something or strings, yeah.


00:24:38.640 --> 00:24:39.800
Waseelay, what do you think about this?


00:24:39.800 --> 00:24:42.200
Do you have to worry about these little details?


00:24:42.200 --> 00:24:45.700
Are you guys under like heavy performance pressure?


00:24:45.700 --> 00:24:48.240
- No, not right now, at least.


00:24:48.240 --> 00:24:50.600
I've never had to think about like C level things


00:24:50.600 --> 00:24:53.680
and I'm actually taken aback that so much goes


00:24:53.680 --> 00:24:57.080
into allocating stuff to a list because in Python,


00:24:57.080 --> 00:24:59.000
allocating stuff to a list is just create the list


00:24:59.000 --> 00:25:00.520
and put stuff in there, you know?


00:25:00.520 --> 00:25:02.880
So this is eye-opening to me.


00:25:02.880 --> 00:25:05.800
- Yeah, it's pretty cool.


00:25:05.800 --> 00:25:07.660
It's not like C where you have to pre-allocate it


00:25:07.660 --> 00:25:10.460
and then fill it out or something funky like that.


00:25:10.460 --> 00:25:13.300
- So Will McGugan is saying,


00:25:13.300 --> 00:25:15.460
"I think the list comprehension will pre-allocate


00:25:15.460 --> 00:25:19.040
"because the range object has a dunder length hint method


00:25:19.040 --> 00:25:21.140
"that reports its size."


00:25:21.140 --> 00:25:24.740
And so I think maybe the time saving we're getting


00:25:24.740 --> 00:25:27.820
is that we're not filling it in with nones to begin with,


00:25:27.820 --> 00:25:30.420
but actually filling it in with the data we want.


00:25:30.420 --> 00:25:32.900
- Okay, yeah, good to know.


00:25:32.900 --> 00:25:33.900
Thank you, Will.


00:25:33.900 --> 00:25:38.300
I've more than once had a, not argument,


00:25:38.300 --> 00:25:41.360
but a disagreement where somebody said,


00:25:41.360 --> 00:25:44.600
but you need to show me because,


00:25:44.600 --> 00:25:47.160
and it's, oh, you have a for loop


00:25:47.160 --> 00:25:48.620
and you just append to the list.


00:25:48.620 --> 00:25:49.980
That's the same as a list comprehension.


00:25:49.980 --> 00:25:51.440
They're doing the same thing.


00:25:51.440 --> 00:25:55.260
The outcome, the final result is the same,


00:25:55.260 --> 00:25:58.380
but the information that Python has to work with


00:25:58.380 --> 00:25:59.780
is more much like RIT.


00:25:59.780 --> 00:26:02.560
Will was saying here, sorry, Will,


00:26:02.560 --> 00:26:09.740
is saying here, it can take all the information it has


00:26:09.740 --> 00:26:11.860
to work with and say, oh, look, it's going to be this long


00:26:11.860 --> 00:26:12.540
as we loop.


00:26:12.540 --> 00:26:14.140
And you're going to just add stuff to the list,


00:26:14.140 --> 00:26:15.700
not use it in other interesting ways.


00:26:15.700 --> 00:26:18.940
So just go and jam on it, right?


00:26:18.940 --> 00:26:19.980
Yeah.


00:26:19.980 --> 00:26:20.860
Yeah.


00:26:20.860 --> 00:26:24.900
All right, speaking of working with some data,


00:26:24.900 --> 00:26:26.380
we're going to get this right.


00:26:26.380 --> 00:26:31.300
So let me tell you about this cool project called Mockaroo.


00:26:31.300 --> 00:26:32.820
You guys familiar with this?


00:26:32.820 --> 00:26:33.740
- No. - No.


00:26:33.740 --> 00:26:34.860
- No?


00:26:34.860 --> 00:26:35.780
So here's the story.


00:26:35.780 --> 00:26:38.420
Imagine you needed some data


00:26:38.420 --> 00:26:42.300
and you want this for testing


00:26:42.300 --> 00:26:44.980
or this could be testing like unit testing.


00:26:44.980 --> 00:26:46.880
This could be development.


00:26:46.880 --> 00:26:49.700
Like one of the big problems with UI apps


00:26:49.700 --> 00:26:52.100
is having something to display


00:26:52.100 --> 00:26:54.820
just so that it fills it out.


00:26:54.820 --> 00:26:56.620
If I'm gonna like fill out a webpage


00:26:56.620 --> 00:26:59.860
and I say I wanna work on the CSS of this table


00:26:59.860 --> 00:27:04.000
or the CSS of this list, if there's nothing in the list,


00:27:04.000 --> 00:27:05.340
what are you gonna do, right?


00:27:05.340 --> 00:27:08.500
So you want to have some realistic data to work with.


00:27:08.500 --> 00:27:10.060
So this mockery is this free thing


00:27:10.060 --> 00:27:12.780
that has all these different types of data


00:27:12.780 --> 00:27:14.060
that you can work with.


00:27:14.060 --> 00:27:17.380
So I can come over here and just say, I want some data


00:27:17.380 --> 00:27:20.980
and I want it in a CSV format or SQL table


00:27:20.980 --> 00:27:25.060
or Firebase or Excel or XML,


00:27:25.060 --> 00:27:27.480
or my favorite probably is JSON.


00:27:27.480 --> 00:27:29.540
And then you can say, all right,


00:27:29.540 --> 00:27:30.580
Well, I'm gonna have an ID here.


00:27:30.580 --> 00:27:31.900
We have like a customer table.


00:27:31.900 --> 00:27:33.740
So ID, first name, last name,


00:27:33.740 --> 00:27:35.340
but it has also things like gender.


00:27:35.340 --> 00:27:38.380
And one of the types you can pick is gender.


00:27:38.380 --> 00:27:42.200
So it has all these well-known beta types.


00:27:42.200 --> 00:27:44.120
So if I go and type in, I want a gender,


00:27:44.120 --> 00:27:46.300
not only will it say male, female or something,


00:27:46.300 --> 00:27:48.020
it gives you like a list.


00:27:48.020 --> 00:27:50.900
So I can have gender written out as female,


00:27:50.900 --> 00:27:51.940
male, or non-binary.


00:27:51.940 --> 00:27:56.180
I could have gender abbreviated as M or F or just binary.


00:27:56.180 --> 00:27:58.000
So you can have like lots of control.


00:27:58.000 --> 00:28:01.200
So if I wanted to like, you say auto or car,


00:28:01.200 --> 00:28:02.040
what do I got to type in?


00:28:02.040 --> 00:28:05.520
A car, you can do like car makes, models,


00:28:05.520 --> 00:28:08.040
registration numbers, all of these things.


00:28:08.040 --> 00:28:11.000
So you can say this one is a gender abbreviated


00:28:11.000 --> 00:28:12.480
and like you fill it out.


00:28:12.480 --> 00:28:16.680
Then you can just say, generate me this data


00:28:16.680 --> 00:28:19.160
exactly like you want and then download it


00:28:19.160 --> 00:28:20.080
in whatever format.


00:28:20.080 --> 00:28:23.280
Like I said, CSV, SQL, insert statements,


00:28:23.280 --> 00:28:26.280
JSON, Excel, isn't that cool?


00:28:27.160 --> 00:28:29.080
- That is pretty cool.


00:28:29.080 --> 00:28:31.720
- So I've used this more than once.


00:28:31.720 --> 00:28:33.560
- I can see a use case for this already.


00:28:33.560 --> 00:28:34.400
It works.


00:28:34.400 --> 00:28:35.480
- Awesome, yeah, right?


00:28:35.480 --> 00:28:36.480
- Yeah, yeah.


00:28:36.480 --> 00:28:40.360
- I kind of liked the first option


00:28:40.360 --> 00:28:42.920
when you were selecting the gender type,


00:28:42.920 --> 00:28:45.640
having it be animal names.


00:28:45.640 --> 00:28:46.560
That'd be fun.


00:28:46.560 --> 00:28:49.040
- Yeah, I mean, there's all these,


00:28:49.040 --> 00:28:50.400
there's all these, that's crazy.


00:28:50.400 --> 00:28:52.040
There's all these different data formats.


00:28:52.040 --> 00:28:56.760
So you've got like cars,


00:28:56.760 --> 00:28:58.060
What else we got here?


00:28:58.060 --> 00:29:02.040
Credit cards, GUIDs, ISBNs for books,


00:29:02.040 --> 00:29:05.020
numbers on a normal distribution, passwords.


00:29:05.020 --> 00:29:07.480
>> Even MongoDB object IDs. That's cool.


00:29:07.480 --> 00:29:11.440
>> That is pretty cool. Yeah. So you have e-commerce stuff,


00:29:11.440 --> 00:29:15.400
money, stock market symbols, locations,


00:29:15.400 --> 00:29:18.040
health care, how about that?


00:29:18.040 --> 00:29:20.300
You got your drug companies,


00:29:20.300 --> 00:29:22.920
your NHS numbers, and all those different things.


00:29:22.920 --> 00:29:24.280
It's because I'm searching for car.


00:29:24.280 --> 00:29:25.800
Why is car keep showing up?


00:29:25.800 --> 00:29:33.320
Animal common names. Yeah. Yes, you could have a wombat or a jungle kangaroo. I mean, these are all some fun, right? Yeah


00:29:33.320 --> 00:29:35.520
So these are all super neat


00:29:35.520 --> 00:29:39.200
You can get up to like a thousand rows for free and then I think you have to pay if you need more than that


00:29:39.200 --> 00:29:40.320
I


00:29:40.320 --> 00:29:45.720
Then a follow-on I believe this from the same company full disclosure these guys sponsored talk Python


00:29:45.720 --> 00:29:48.340
But I've wanted to talk about this even before so


00:29:48.340 --> 00:29:52.600
They have this thing the service called tonic


00:29:53.640 --> 00:29:58.040
that you can then point at your production database,


00:29:58.040 --> 00:30:01.400
and it'll do things like generate me something


00:30:01.400 --> 00:30:03.460
that looks exactly like production data,


00:30:03.460 --> 00:30:06.360
but doesn't have any personally identifiable information


00:30:06.360 --> 00:30:09.360
so that I can give it to the developers


00:30:09.360 --> 00:30:12.440
to test with real looking data with real variations


00:30:12.440 --> 00:30:15.800
from our clients, but is sort of safe.


00:30:15.800 --> 00:30:18.040
Like if they lose their laptop or whatever,


00:30:18.040 --> 00:30:19.160
or they just leave it open,


00:30:19.160 --> 00:30:20.920
it's not gonna destroy something, right?


00:30:20.920 --> 00:30:21.760
- Yeah.


00:30:21.760 --> 00:30:23.440
That's pretty cool.


00:30:23.440 --> 00:30:27.480
So you basically connect it to your database,


00:30:27.480 --> 00:30:32.480
and then it will go along and sort of create data


00:30:32.480 --> 00:30:35.280
that looks more like what you actually have


00:30:35.280 --> 00:30:37.320
instead of just this mockery data.


00:30:37.320 --> 00:30:38.220
So pretty neat.


00:30:38.220 --> 00:30:41.120
Anyway, if you need to do some testing,


00:30:41.120 --> 00:30:42.840
you need to generate fake data,


00:30:42.840 --> 00:30:44.700
not just for like pytest testing,


00:30:44.700 --> 00:30:48.200
but also UI development and just something to work with,


00:30:48.200 --> 00:30:49.600
these are both good options.


00:30:49.600 --> 00:30:52.880
- Very cool.


00:30:52.880 --> 00:30:54.300
Yeah, cool, cool.


00:30:54.300 --> 00:30:57.280
Sam out in the audience says, "This is fantastic."


00:30:57.280 --> 00:30:58.120
I agree.


00:30:58.120 --> 00:30:59.760
And Will says, "Yeah, super useful.


00:30:59.760 --> 00:31:03.020
"I could see even using this for testing development


00:31:03.020 --> 00:31:04.640
"of rich and textual out there."


00:31:04.640 --> 00:31:05.480
So very cool.


00:31:05.480 --> 00:31:09.340
All right, Vusile, off to you, last one.


00:31:09.340 --> 00:31:13.240
- All right, so this is a fun project


00:31:13.240 --> 00:31:15.880
that a good friend of mine, Daniele Procida, made.


00:31:15.880 --> 00:31:18.120
He's demoed it at a couple of conferences.


00:31:18.120 --> 00:31:20.320
It's called the BrachioGraph.


00:31:21.720 --> 00:31:25.520
So the goal for this project is to make a pin plotter


00:31:25.520 --> 00:31:28.040
powered by Python and make it as cheap as possible


00:31:28.040 --> 00:31:31.080
using common things you can find in the house.


00:31:31.080 --> 00:31:34.680
So it's a plotter, it uses a raspberry pie,


00:31:34.680 --> 00:31:37.880
an ice cream stick and a clothespin to draw


00:31:37.880 --> 00:31:39.220
and a pencil of course.


00:31:39.220 --> 00:31:45.920
So it's got Python code that turns an image into,


00:31:45.920 --> 00:31:47.960
I think it's called a raster,


00:31:47.960 --> 00:31:52.600
rasterizes an image into points, coordinates


00:31:52.600 --> 00:31:53.680
on a piece of paper.


00:31:53.680 --> 00:31:55.280
>>I could have used this yesterday.


00:31:55.280 --> 00:31:57.160
Oh my gosh, this is great.


00:31:57.160 --> 00:31:59.160
>>Yeah, so I don't know if I can play video here,


00:31:59.160 --> 00:32:03.200
but it looks pretty cool when it's actually printing out


00:32:03.200 --> 00:32:04.880
or plotting out an image.


00:32:04.880 --> 00:32:07.160
Let me see if I can get it to work here.


00:32:07.160 --> 00:32:11.880
But it has a motor that does everything,


00:32:11.880 --> 00:32:16.000
and it can draw very basic images.


00:32:16.000 --> 00:32:19.760
It's a fun project that you can work on it.


00:32:19.760 --> 00:32:25.840
I mean, the setup for this cost less than 50 US dollars,


00:32:25.840 --> 00:32:28.360
and it's a pretty fun project.


00:32:28.360 --> 00:32:32.600
- Oh, I would have gotten an A in art class if I had this.


00:32:32.600 --> 00:32:35.960
(both laughing)


00:32:35.960 --> 00:32:36.800
No, I love it.


00:32:36.800 --> 00:32:37.640
This is really good.


00:32:37.640 --> 00:32:39.200
People should definitely play the video and watch it


00:32:39.200 --> 00:32:40.400
'cause it's fascinating.


00:32:40.400 --> 00:32:44.000
- Yeah, yeah, yeah.


00:32:45.320 --> 00:32:49.600
The website has how-to guides and documentation


00:32:49.600 --> 00:32:52.240
on how to build this, what things you need,


00:32:52.240 --> 00:32:55.720
what sources to the software and everything.


00:32:55.720 --> 00:32:57.520
And it's also an open source project


00:32:57.520 --> 00:33:00.080
that anyone can contribute to if you're interested.


00:33:00.080 --> 00:33:02.720
- This is really neat.


00:33:02.720 --> 00:33:04.560
This is, one of the things I like


00:33:04.560 --> 00:33:08.840
about simple things like this is they're great projects


00:33:08.840 --> 00:33:12.600
to start kids with because it's very real and physical.


00:33:12.600 --> 00:33:14.060
- Yeah, I was thinking this would be awesome


00:33:14.060 --> 00:33:16.420
in a teaching scenario as well.


00:33:16.420 --> 00:33:18.820
Cool.


00:33:18.820 --> 00:33:19.640
All right, this is a great one.


00:33:19.640 --> 00:33:20.480
And I love it.


00:33:20.480 --> 00:33:22.660
Very neat to do with Python and stuff.


00:33:22.660 --> 00:33:25.900
All right, well, I think that's it for our main items.


00:33:25.900 --> 00:33:28.420
Brian, you got anything you'd like to share?


00:33:28.420 --> 00:33:30.500
- Oh, we covered last,


00:33:30.500 --> 00:33:31.580
I think we covered last week


00:33:31.580 --> 00:33:35.180
that the Python issues were migrating to GitHub


00:33:35.180 --> 00:33:39.180
and it might be on April Fool's Day and it was not.


00:33:39.180 --> 00:33:42.140
So next plan looks like April 8th.


00:33:43.580 --> 00:33:44.940
next one more week.


00:33:44.940 --> 00:33:48.100
- If we keep talking about it, it's never gonna happen.


00:33:48.100 --> 00:33:49.980
- Like a watch pot sort of a thing.


00:33:49.980 --> 00:33:50.940
- Exactly, yes.


00:33:50.940 --> 00:33:52.860
- Well, I'm waiting for it to happen.


00:33:52.860 --> 00:33:54.260
I want it to happen.


00:33:54.260 --> 00:33:56.980
- I know, the transformation will be complete


00:33:56.980 --> 00:33:57.820
at that point, right?


00:33:57.820 --> 00:33:59.980
- So next week, we won't cover it at all


00:33:59.980 --> 00:34:01.180
unless it's already happened.


00:34:01.180 --> 00:34:02.340
But if it's delayed again,


00:34:02.340 --> 00:34:04.740
we won't cover it again until then.


00:34:04.740 --> 00:34:05.560
- Yeah, exactly.


00:34:05.560 --> 00:34:07.580
We're not getting roped into this three times.


00:34:07.580 --> 00:34:10.260
We see there, anything else you wanna give a shout out to?


00:34:10.260 --> 00:34:14.440
[AUDIO OUT]


00:34:14.440 --> 00:34:19.080
Yeah, just one thing is a project that I found recently.


00:34:19.080 --> 00:34:21.200
It's called Thunder Client.


00:34:21.200 --> 00:34:24.280
It's an alternative video code extension.


00:34:24.280 --> 00:34:25.400
And it's lightweight.


00:34:25.400 --> 00:34:28.440
You download it and install it in less than a second.


00:34:28.440 --> 00:34:31.520
And you can get started sending requests.


00:34:31.520 --> 00:34:34.280
And it has lists set up then, Postman.


00:34:34.280 --> 00:34:39.680
And it's easy to install.


00:34:39.680 --> 00:34:41.320
- Yeah, so if you were testing APIs,


00:34:41.320 --> 00:34:44.000
like constructed JSON thing, put this header in,


00:34:44.000 --> 00:34:46.560
you wanna call it, yeah, ThunderClient for VS Code.


00:34:46.560 --> 00:34:47.400
Very nice.


00:34:47.400 --> 00:34:48.220
- Yeah. - Thunder, Thunder.


00:34:48.220 --> 00:34:49.600
- And if you're using VS Code.


00:34:49.600 --> 00:34:52.240
Exactly, yeah.


00:34:52.240 --> 00:34:53.080
- Nice.


00:34:53.080 --> 00:34:55.320
- You'd just switch tabs, you know,


00:34:55.320 --> 00:34:56.600
instead of switching applications.


00:34:56.600 --> 00:34:58.880
So that saves a few microseconds off your workload.


00:34:58.880 --> 00:35:00.840
- Yeah, exactly.


00:35:00.840 --> 00:35:02.160
That's cool.


00:35:02.160 --> 00:35:03.000
I love it.


00:35:03.000 --> 00:35:03.820
All right, nice.


00:35:03.820 --> 00:35:06.360
I've got just one thing I believe today


00:35:06.360 --> 00:35:07.200
that's really short.


00:35:07.200 --> 00:35:10.240
I've spoken about ngrok at ngrok.com before,


00:35:10.240 --> 00:35:12.280
about how it's really cool for exposing,


00:35:12.280 --> 00:35:16.700
if you're like wanting to expose an API


00:35:16.700 --> 00:35:18.540
to the outside world that you're developing


00:35:18.540 --> 00:35:21.860
or you need to debug it, I've used this for like webhooks.


00:35:21.860 --> 00:35:25.160
So this company, I need to integrate with their webhook.


00:35:25.160 --> 00:35:27.240
So I need them to call this, but it's not working.


00:35:27.240 --> 00:35:29.580
So I want like a break point on my machine,


00:35:29.580 --> 00:35:31.740
but how do they get to my machine?


00:35:31.740 --> 00:35:34.620
Just run ngrok and it'll tunnel it right through


00:35:34.620 --> 00:35:37.060
the firewalls using SSH reverse tunnels.


00:35:37.060 --> 00:35:39.300
That's all good.


00:35:39.300 --> 00:35:43.020
What I discovered working on yet another integration project


00:35:43.020 --> 00:35:47.420
was that there's actually this super rich inspector


00:35:47.420 --> 00:35:49.180
that I think people haven't noticed in there.


00:35:49.180 --> 00:35:50.500
If you fire up an ngrok thing


00:35:50.500 --> 00:35:52.940
and then you go to look host 4040,


00:35:52.940 --> 00:35:54.220
every request comes through.


00:35:54.220 --> 00:35:57.860
You can see the summary, the HTTP headers,


00:35:57.860 --> 00:36:00.940
the cookies, the response, the status codes,


00:36:00.940 --> 00:36:02.320
the duration, all that.


00:36:04.100 --> 00:36:08.340
So if you want to, if you're using ngrok


00:36:08.340 --> 00:36:10.860
for that sort of use case, be sure to check out this


00:36:10.860 --> 00:36:13.300
like live web view that lets you dive into,


00:36:13.300 --> 00:36:16.180
it's almost like the dev tools,


00:36:16.180 --> 00:36:17.900
the network tab of the dev tools,


00:36:17.900 --> 00:36:20.540
but for just people coming in


00:36:20.540 --> 00:36:22.180
rather than you consuming stuff.


00:36:22.180 --> 00:36:23.460
So it's pretty cool.


00:36:23.460 --> 00:36:24.980
- That's neat.


00:36:24.980 --> 00:36:25.820
- All right.


00:36:25.820 --> 00:36:29.420
Are you guys ready for a joke?


00:36:29.420 --> 00:36:30.240
- Yes.


00:36:30.240 --> 00:36:33.060
- Shall we finish it out with a joke?


00:36:33.060 --> 00:36:38.700
So you may have heard recently that the Microsoft source code


00:36:38.700 --> 00:36:43.020
for Bing was got by the Lazarus group.


00:36:43.020 --> 00:36:47.620
And people thought this was some folks in Brazil


00:36:47.620 --> 00:36:49.300
or somewhere in South America.


00:36:49.300 --> 00:36:52.260
It turns out it was a bunch of British teenagers


00:36:52.260 --> 00:36:56.500
who had like $14 million in Bitcoin, whatever.


00:36:56.500 --> 00:37:01.100
So they had gotten a hold of some of the Windows and Bing


00:37:01.100 --> 00:37:02.340
source code, I believe it was.


00:37:02.340 --> 00:37:04.100
And there was like, oh my gosh,


00:37:04.100 --> 00:37:06.100
is this gonna reveal a bunch of zero days


00:37:06.100 --> 00:37:08.340
because people can go through the source code?


00:37:08.340 --> 00:37:11.820
Well, we don't do that much Windows,


00:37:11.820 --> 00:37:13.500
at least on the server in Python.


00:37:13.500 --> 00:37:15.000
There's some, but not as much.


00:37:15.000 --> 00:37:18.200
But we use a lot of Linux, right?


00:37:18.200 --> 00:37:21.620
And I mean, for all the talk by the Python byte stuff,


00:37:21.620 --> 00:37:24.100
we've got like a fleet of eight Linux servers.


00:37:24.100 --> 00:37:26.900
Now, Brian, when I saw this headline,


00:37:26.900 --> 00:37:29.480
I really began to worry that maybe


00:37:29.480 --> 00:37:31.040
some vulnerabilities would be discovered


00:37:31.040 --> 00:37:37.920
some kind of problem would happen here. So the headline is Linus Torvalds confirms the Lapsus


00:37:37.920 --> 00:37:43.520
breach after hackers publish the Linux kernel source code to the internet.


00:37:43.520 --> 00:37:46.660
Okay.


00:37:46.660 --> 00:37:54.000
In a blog post on Tuesday, published hours after the Lapsus posted a torrent file containing


00:37:54.000 --> 00:37:59.360
partial source code from the Linux kernel, the geek man himself revealed that his branch was


00:37:59.360 --> 00:38:05.360
cloned by the hacking group granting attackers unlimited power to the article stops there.


00:38:05.360 --> 00:38:08.640
Oh man, how many times do you have to read?


00:38:08.640 --> 00:38:15.440
Exactly. I think being open sourced, it's probably okay.


00:38:15.440 --> 00:38:17.840
Yeah, yeah, yeah.


00:38:17.840 --> 00:38:22.080
Oh no, publish the source.


00:38:22.080 --> 00:38:24.800
They published the source to Linux. What are we going to do?


00:38:24.800 --> 00:38:26.160
What was that?


00:38:26.160 --> 00:38:27.000
- Programming.


00:38:27.000 --> 00:38:28.320
(laughing)


00:38:28.320 --> 00:38:31.320
- Programming humor just never stops.


00:38:31.320 --> 00:38:32.760
I love it.


00:38:32.760 --> 00:38:35.240
- So they published the Bing source code?


00:38:35.240 --> 00:38:38.120
- I think they got some of the Bing source code,


00:38:38.120 --> 00:38:40.240
maybe Cortana, I can't remember exactly what it was,


00:38:40.240 --> 00:38:42.400
but it was some of these services.


00:38:42.400 --> 00:38:44.680
And I think the Windows source code as well.


00:38:44.680 --> 00:38:47.200
- I was surprised, so I don't pay too much attention


00:38:47.200 --> 00:38:48.820
to the blog traffic stuff,


00:38:48.820 --> 00:38:50.400
but I was looking the other day


00:38:50.400 --> 00:38:52.640
after I'd put up a bunch of the transcripts


00:38:52.640 --> 00:38:53.760
for testing code,


00:38:53.760 --> 00:38:56.840
I was curious how much we're getting hit.


00:38:56.840 --> 00:39:02.120
And for pythontest.com, I'm getting more traffic from Bing


00:39:02.120 --> 00:39:04.120
than from Google, which is--


00:39:04.120 --> 00:39:05.160
How interesting.


00:39:05.160 --> 00:39:05.960
Interesting, yeah.


00:39:05.960 --> 00:39:09.640
All of a sudden, Bing's pretty awesome, isn't it?


00:39:09.640 --> 00:39:12.680
Well, it's got nice pictures, I'll tell you that.


00:39:12.680 --> 00:39:14.320
It's got nice background pictures.


00:39:14.320 --> 00:39:14.960
It does.


00:39:14.960 --> 00:39:17.540
Actually, in terms of beauty, it's really nice.


00:39:17.540 --> 00:39:21.880
And I end up using DuckDuckGo.


00:39:21.880 --> 00:39:23.920
So when you've seen DuckDuckGo,


00:39:23.920 --> 00:39:25.880
I know they've got a ton of different sources,


00:39:25.880 --> 00:39:27.480
but one of the sources they use for data,


00:39:27.480 --> 00:39:29.040
I believe is also Bing.


00:39:29.040 --> 00:39:30.240
And yeah, it's all right.


00:39:30.240 --> 00:39:32.320
- It's all right.


00:39:32.320 --> 00:39:33.160
- It's all right.


00:39:33.160 --> 00:39:35.120
(laughing)


00:39:35.120 --> 00:39:36.520
Well, Vasilis, it was really great


00:39:36.520 --> 00:39:38.640
to have you here with us.


00:39:38.640 --> 00:39:39.480
And Brian.


00:39:39.480 --> 00:39:40.720
- It was mine.


00:39:40.720 --> 00:39:44.200
- Yeah, it's great to have a chat with you as always.


00:39:44.200 --> 00:39:45.040
- All right.


00:39:45.040 --> 00:39:45.880
- Bye everyone.

