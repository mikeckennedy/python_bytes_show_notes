WEBVTT

00:00:00.000 --> 00:00:09.040
>> Everyone out there in the live stream, great to be here with you all. Thanks for


00:00:09.040 --> 00:00:13.400
showing up and watching the recording or coming to the YouTube channel and watching it later.


00:00:13.400 --> 00:00:19.760
If you have comments or thoughts, please put them into the chat. And with that, we will


00:00:19.760 --> 00:00:26.160
get started. Hello and welcome to Python Bytes, where we deliver Python news and headlines


00:00:26.160 --> 00:00:34.240
directly to your earbuds. This is episode 242, recorded July 14th, 2021. I'm Michael Kennedy.


00:00:34.240 --> 00:00:38.320
And I'm Brian Arquette. Hi, and I'm Al Swigert.


00:00:38.320 --> 00:00:43.120
Hey, Al. Welcome. Welcome. Before we get to introduction with you, I just want to say this


00:00:43.120 --> 00:00:51.120
is brought to you by our courses over Talk Python Training and Brian's book. But first, let's just


00:00:51.120 --> 00:00:54.160
hear about you, Al. Tell people who you are if they don't know.


00:00:55.040 --> 00:01:00.080
Hey, I'm Al Sweigart. I'm mostly known as the author of Automate the Boring Stuff with Python


00:01:00.080 --> 00:01:06.480
and a bunch of other Python and programming books for beginners. So all my books are released under


00:01:06.480 --> 00:01:10.400
a Creative Commons license. So it's free to download and share them. You can get them at


00:01:10.400 --> 00:01:16.560
inventwithpython.com. - Nice. - Yeah, yeah, fantastic. I would say the Automate the Boring


00:01:16.560 --> 00:01:19.780
and stuff has certainly been well-received.


00:01:19.780 --> 00:01:22.740
- Yeah.


00:01:22.740 --> 00:01:24.640
- I hear it quoted a lot, for sure.


00:01:24.640 --> 00:01:28.180
Brian, just get us started or what?


00:01:28.180 --> 00:01:30.020
- Yeah, I'll just get us started.


00:01:30.020 --> 00:01:35.020
So no, so just, I saw a tweet by Jeff Triplett


00:01:35.020 --> 00:01:40.220
that mentioned Just and as a replacement for Make.


00:01:40.220 --> 00:01:42.160
So I needed to check it out.


00:01:42.160 --> 00:01:43.940
So it's like super cool.


00:01:43.940 --> 00:01:45.960
- Make for people who don't know is a thing


00:01:45.960 --> 00:01:48.400
that you can type, basically type make,


00:01:48.400 --> 00:01:50.440
and then it automates a bunch of commands.


00:01:50.440 --> 00:01:52.120
Like if you've got a seriously complicated


00:01:52.120 --> 00:01:55.160
build link process, it could be embedded into a make file


00:01:55.160 --> 00:01:57.240
and then you just type make and that happens, right?


00:01:57.240 --> 00:01:58.080
- Right, right.


00:01:58.080 --> 00:02:01.480
And I don't know what the history of make really is,


00:02:01.480 --> 00:02:02.880
but I used it a long time.


00:02:02.880 --> 00:02:04.760
I've been using it for decades for,


00:02:04.760 --> 00:02:08.280
one of the things that does well is convert,


00:02:08.280 --> 00:02:12.040
like if you've got, take all your .c files


00:02:12.040 --> 00:02:13.920
and convert them to .o files


00:02:13.920 --> 00:02:15.520
and then combine your .o files


00:02:15.520 --> 00:02:19.480
and all the build process for the C toolchain.


00:02:19.480 --> 00:02:20.680
But you can do it for,


00:02:20.680 --> 00:02:22.320
you can really do it with any language.


00:02:22.320 --> 00:02:23.800
But people have like abused it,


00:02:23.800 --> 00:02:27.160
and so have I, even Python projects often use makefiles


00:02:27.160 --> 00:02:32.920
because make is often around on Unix-like environments.


00:02:32.920 --> 00:02:35.720
And so having makefile around,


00:02:35.720 --> 00:02:37.560
you can use it just sort of to automate


00:02:37.560 --> 00:02:38.680
some of your common tasks,


00:02:38.680 --> 00:02:41.200
like make release or something like that,


00:02:41.200 --> 00:02:43.800
to push your, to do all the commands you need to do


00:02:43.800 --> 00:02:47.000
to do a new release of a project or something.


00:02:47.000 --> 00:02:49.280
But there's problems with it.


00:02:49.280 --> 00:02:53.760
Just is a replacement for it.


00:02:53.760 --> 00:02:57.720
It's written in Rust,


00:02:57.720 --> 00:02:59.960
so it's pretty fast and clean.


00:02:59.960 --> 00:03:01.800
Well, actually, I don't know if it's clean.


00:03:01.800 --> 00:03:03.080
I haven't looked at the source code,


00:03:03.080 --> 00:03:05.480
but it's really easy to use.


00:03:05.480 --> 00:03:07.280
>> It's not C, it's got to be better.


00:03:07.280 --> 00:03:08.600
>> It's Rusty.


00:03:08.600 --> 00:03:08.840
>> It's clean.


00:03:08.840 --> 00:03:10.640
>> It's like main files.


00:03:10.880 --> 00:03:16.220
>> I went ahead and installed it both on a Mac and Windows today to try it out.


00:03:16.220 --> 00:03:19.420
One of the things I really love about it is,


00:03:19.420 --> 00:03:23.480
it's not the main part of it is to try to automate commands.


00:03:23.480 --> 00:03:28.740
It's not about, you can use it to build things


00:03:28.740 --> 00:03:34.100
and have recipes to make all your.c files into.o files if you want.


00:03:34.100 --> 00:03:39.200
But the real power is to use it in the way we've been abusing make before.


00:03:39.200 --> 00:03:41.520
because you can do some cool things.


00:03:41.520 --> 00:03:44.960
Like one of the problems with make always has been


00:03:44.960 --> 00:03:49.040
the rules have to be on the,


00:03:49.040 --> 00:03:53.480
or the recipes have to be defined on the left column,


00:03:53.480 --> 00:03:59.720
leftmost column, and then you have to have a tab for the commands.


00:03:59.720 --> 00:04:04.360
Well, I mean, often I have my editor set up,


00:04:04.360 --> 00:04:08.120
except for make files to replace tabs with spaces,


00:04:08.120 --> 00:04:11.580
just works just fine with spaces.


00:04:11.580 --> 00:04:14.580
I love that. Also, you can pass


00:04:14.580 --> 00:04:16.600
commands, pass arguments to


00:04:16.600 --> 00:04:19.000
commands through the command line and stuff like that.


00:04:19.000 --> 00:04:20.420
>> That's cool.


00:04:20.420 --> 00:04:23.060
>> It's super cool. One of the neat things,


00:04:23.060 --> 00:04:27.280
I don't know where it is in the documentation here.


00:04:27.280 --> 00:04:29.560
You can use arbitrary languages.


00:04:29.560 --> 00:04:35.360
You can even do Python command within the just file.


00:04:35.360 --> 00:04:36.900
>> That's cool.


00:04:36.900 --> 00:04:39.060
you can do some neat things.


00:04:39.060 --> 00:04:40.500
>> So for people listening,


00:04:40.500 --> 00:04:43.900
you basically declare the languages you want to use,


00:04:43.900 --> 00:04:46.820
and then you can implement.


00:04:46.820 --> 00:04:47.500
>> Yes.


00:04:47.500 --> 00:04:51.900
>> Code, like print or console.log for JavaScript or whatever.


00:04:51.900 --> 00:04:54.900
>> Right. This actually seems like a bad example because it's actually


00:04:54.900 --> 00:04:58.660
listing the recipe name as the language name,


00:04:58.660 --> 00:04:59.700
and you don't have to do that.


00:04:59.700 --> 00:05:02.300
So this Python here could just be foo or something.


00:05:02.300 --> 00:05:06.340
>> I see. So the thing that's important is the shebang.


00:05:06.340 --> 00:05:11.340
- Yep, the shebang tells just which language to use.


00:05:11.340 --> 00:05:15.120
So this is pretty neat.


00:05:15.120 --> 00:05:16.560
I've started using it right away


00:05:16.560 --> 00:05:18.560
and I think I'm gonna keep using it.


00:05:18.560 --> 00:05:19.400
It's great.


00:05:19.400 --> 00:05:21.200
- One thing that I got out of this that's interesting,


00:05:21.200 --> 00:05:23.640
scroll down to where it has like the how to get it.


00:05:23.640 --> 00:05:25.160
You'll see like a whole bunch of links.


00:05:25.160 --> 00:05:28.760
If you go down that page a little more, keep going.


00:05:28.760 --> 00:05:29.840
- Installation.


00:05:29.840 --> 00:05:31.120
- Yeah, I think so.


00:05:31.120 --> 00:05:31.960
There's a section.


00:05:31.960 --> 00:05:33.040
Oh, no, yeah, there you go.


00:05:33.040 --> 00:05:34.120
There's a bunch of,


00:05:34.120 --> 00:05:36.520
It shows you all these different package managers


00:05:36.520 --> 00:05:37.360
that'll give it to you.


00:05:37.360 --> 00:05:39.880
So if you wanna get it from Rust, you can use Cargo


00:05:39.880 --> 00:05:42.440
or on macOS there's Homebrew and Mac ports.


00:05:42.440 --> 00:05:43.600
If you want it on Windows,


00:05:43.600 --> 00:05:47.000
they interestingly recommend Scoop, which I've never used.


00:05:47.000 --> 00:05:48.200
I've only used Chocolaty.


00:05:48.200 --> 00:05:49.680
So I don't know.


00:05:49.680 --> 00:05:51.480
I feel like there's like ice cream themes


00:05:51.480 --> 00:05:52.960
or something for the Windows world,


00:05:52.960 --> 00:05:54.800
but yeah, those are pretty interesting.


00:05:54.800 --> 00:05:55.840
- I was gonna be snarky and say,


00:05:55.840 --> 00:05:59.000
do you require make to install Just?


00:05:59.000 --> 00:06:01.040
(laughing)


00:06:01.040 --> 00:06:02.000
Yeah.


00:06:02.000 --> 00:06:05.940
So I got no problem using brew install for on my Mac,


00:06:05.940 --> 00:06:09.140
but I'm not going to install Scoop for Windows.


00:06:09.140 --> 00:06:11.380
I don't have any other need for it.


00:06:11.380 --> 00:06:13.640
So there is pre-built binaries.


00:06:13.640 --> 00:06:16.420
So I just use the pre-built binary for Windows.


00:06:16.420 --> 00:06:17.420
It worked fine.


00:06:17.420 --> 00:06:21.120
Yeah, this looks really great because my experience with Make


00:06:21.120 --> 00:06:25.060
has been to just run the basic Make command to build something.


00:06:25.060 --> 00:06:26.360
And if it works, that's great.


00:06:26.360 --> 00:06:28.860
And if it doesn't, I have no idea what to do


00:06:28.860 --> 00:06:33.260
because I feel like my knowledge of make is sort of like my knowledge of CSS,


00:06:33.260 --> 00:06:37.060
where it's just been built up from little bits of knowledge over the years,


00:06:37.060 --> 00:06:41.360
and I've never formally sat down and read through all the documentation.


00:06:41.360 --> 00:06:46.360
100% JIT learning, like just enough time that you needed.


00:06:46.360 --> 00:06:47.860
Yeah, exactly.


00:06:47.860 --> 00:06:53.560
Yeah, like, I actually have never really understood why phony targets were needed.


00:06:53.560 --> 00:06:57.000
And this discussion in the readme of this,


00:06:57.000 --> 00:07:00.640
of Just actually talks about why phony is needed


00:07:00.640 --> 00:07:02.720
in the first place for make files


00:07:02.720 --> 00:07:05.440
and why you don't need them for Just.


00:07:05.440 --> 00:07:08.000
So it's kind of interesting.


00:07:08.000 --> 00:07:10.880
- Yeah, very cool, very cool.


00:07:10.880 --> 00:07:12.960
Before we move on to the next item,


00:07:12.960 --> 00:07:15.080
couple of comments for Al out there.


00:07:15.080 --> 00:07:16.600
Teddy, hey, Teddy in the live stream says,


00:07:16.600 --> 00:07:18.880
"Love the automate the boring stuff.


00:07:18.880 --> 00:07:20.240
"It's how I learned Python."


00:07:20.240 --> 00:07:23.000
Dean says, "Always recommend it to get started."


00:07:23.000 --> 00:07:25.000
Great fan. So yeah, that's pretty cool.


00:07:25.000 --> 00:07:28.760
Awesome. Hey, thanks. I always love hearing that.


00:07:28.760 --> 00:07:30.760
You bet.


00:07:30.760 --> 00:07:34.900
All right. I love to hear from our fans of the show.


00:07:34.900 --> 00:07:39.400
And so Roman Wright, who works on Beanie,


00:07:39.400 --> 00:07:47.020
the, I believe, pedantic-based model query for ODM for MongoDB,


00:07:47.020 --> 00:07:48.860
recommended something else this time.


00:07:48.860 --> 00:07:50.520
We already covered Beanie.


00:07:51.480 --> 00:07:53.600
something called strong typing.


00:07:53.600 --> 00:07:57.480
So this is a decorator, this is from Felix the C.


00:07:57.480 --> 00:07:59.760
It's a decorator which checks whether a function


00:07:59.760 --> 00:08:01.960
is called with the correct arguments.


00:08:01.960 --> 00:08:07.760
So if somebody goes and puts type annotations


00:08:07.760 --> 00:08:09.980
on their code, that's cool.


00:08:09.980 --> 00:08:13.680
The editors like PyCharm will say,


00:08:13.680 --> 00:08:15.320
you're doing it wrong when you're doing it wrong,


00:08:15.320 --> 00:08:16.680
or they'll give you autocomplete


00:08:16.680 --> 00:08:19.040
and information on the arguments and so on.


00:08:19.040 --> 00:08:21.980
But Python, that's like a hint, right?


00:08:21.980 --> 00:08:24.520
It's called type hints often.


00:08:24.520 --> 00:08:27.360
Because it's a hint, it is not a requirement.


00:08:27.360 --> 00:08:31.400
And so if you want to make sure that certain type,


00:08:31.400 --> 00:08:36.460
types match up basically, you can use this decorator.


00:08:36.460 --> 00:08:38.720
And there's not a lot to this one,


00:08:38.720 --> 00:08:41.440
but if you go over to the read the docs,


00:08:41.440 --> 00:08:44.820
there's a cool stay strong little character there.


00:08:44.820 --> 00:08:47.860
But the idea is if you had this thing


00:08:47.860 --> 00:08:51.020
that was like a multiplier, took an a int and a b int,


00:08:51.020 --> 00:08:52.900
you could pass other stuff.


00:08:52.900 --> 00:08:54.820
But if you passed,


00:08:54.820 --> 00:08:56.740
like if you could pass like three or four to multiply,


00:08:56.740 --> 00:08:58.260
but if you pass like hello world,


00:08:58.260 --> 00:09:00.540
it's just gonna try string times string,


00:09:00.540 --> 00:09:05.260
which there's probably a cool Watt outcome


00:09:05.260 --> 00:09:06.460
that we could get there.


00:09:06.460 --> 00:09:08.060
But that's not what happens in Python,


00:09:08.060 --> 00:09:10.660
we get a type error, right?


00:09:10.660 --> 00:09:12.860
If you do a string times a number,


00:09:12.860 --> 00:09:15.020
you get a pretty interesting outcome.


00:09:15.020 --> 00:09:16.360
And this is something of a Watt,


00:09:16.360 --> 00:09:18.140
If you do like hello times four,


00:09:18.140 --> 00:09:20.900
you get hello, hello, hello, hello four times,


00:09:20.900 --> 00:09:22.140
which has always been weird.


00:09:22.140 --> 00:09:23.520
When I learned you can multiply strings,


00:09:23.520 --> 00:09:24.800
it kind of freaked me out,


00:09:24.800 --> 00:09:27.140
but I've come to find it useful.


00:09:27.140 --> 00:09:28.340
So what do people do?


00:09:28.340 --> 00:09:30.400
Well, they're like, well, this won't stand.


00:09:30.400 --> 00:09:32.000
We need to check the type.


00:09:32.000 --> 00:09:34.580
So we're gonna say, if is instance,


00:09:34.580 --> 00:09:36.120
the first parameter and an int,


00:09:36.120 --> 00:09:38.900
and is instance the second one, we can do it.


00:09:38.900 --> 00:09:41.180
Otherwise we're gonna report an error.


00:09:41.180 --> 00:09:42.260
Don't do that.


00:09:42.260 --> 00:09:45.300
Instead, what you can do is you can use


00:09:45.300 --> 00:09:47.460
this match typing decorator.


00:09:47.460 --> 00:09:49.420
And you could just say @matchtyping,


00:09:49.420 --> 00:09:53.540
and it's going to take the arguments


00:09:53.540 --> 00:09:56.020
based on the type hints and validate them.


00:09:56.020 --> 00:09:58.340
So if you pass in the right one, great,


00:09:58.340 --> 00:09:59.760
it'll give you an answer.


00:09:59.760 --> 00:10:03.060
If you pass in something that does not match


00:10:03.060 --> 00:10:05.340
the type annotations described,


00:10:05.340 --> 00:10:08.620
it'll say, it'll raise a type mismatch exception.


00:10:08.620 --> 00:10:10.020
And this can be nested down.


00:10:10.020 --> 00:10:14.140
So for example, one of the examples is it takes a list


00:10:14.140 --> 00:10:21.140
And let's see, takes a list which is a union of strings, ints, and tuples.


00:10:21.140 --> 00:10:26.140
So if you give it a list that has either a string, int, or a tuple


00:10:26.140 --> 00:10:30.140
mixed heterogeneously into the arguments, it'll take that just fine.


00:10:30.140 --> 00:10:34.140
But if you give it some other type like a list that happens to contain


00:10:34.140 --> 00:10:36.140
one of the elements as a date time, it'll give you this exception.


00:10:36.140 --> 00:10:39.140
So it's not just, "Oh, it took a list."


00:10:39.140 --> 00:10:47.140
it has, you know, like the transitive sort of property of analyzing the types is validated there. So pretty interesting. What do you think?


00:10:47.140 --> 00:10:54.140
Yeah, so the difference between this and something like mypy is that this operates at runtime, right?


00:10:54.140 --> 00:11:01.140
Right, exactly. Because you could do all the mypy stuff you want. And if people don't run it, well, you're not going to get any information out of it, right?


00:11:01.140 --> 00:11:04.260
bit, right? Yeah, that was something that I was really surprised to learn when I first


00:11:04.260 --> 00:11:10.420
learned type hinting was that really, Python's type hints don't don't really affect your


00:11:10.420 --> 00:11:17.460
runtime code at all. It's it's just set up for static source code checkers like my pi.


00:11:17.460 --> 00:11:22.460
So it doesn't turn Python magically into a statically typed language. It's it's just


00:11:22.460 --> 00:11:29.380
for these static source tools. Yeah, exactly. That's my bias. And this is kind of the other


00:11:29.380 --> 00:11:34.220
side of that, right? This is the right. So maybe you would use


00:11:34.220 --> 00:11:36.860
this in the case where you're building a package or library.


00:11:36.860 --> 00:11:40.540
And it's, you've done everything correctly, but someone else is


00:11:40.540 --> 00:11:43.260
consuming it potentially incorrectly. And you can't


00:11:43.260 --> 00:11:47.220
control whether the world uses my pie or not, right? Yeah, you


00:11:47.220 --> 00:11:50.140
just wrote a library. And so you could use this on say, the


00:11:50.140 --> 00:11:53.700
boundary of your library, not everywhere, just on the boundary


00:11:53.700 --> 00:11:56.460
to make sure the stuff that goes in and out is valid.


00:11:56.460 --> 00:11:59.300
And this would be really helpful for stuff that I work on,


00:11:59.300 --> 00:12:02.160
Because usually I'm just writing code ad hoc


00:12:02.160 --> 00:12:04.840
that does this runtime checking.


00:12:04.840 --> 00:12:08.540
But it's really nice that I could just throw in a function decorator


00:12:08.540 --> 00:12:12.640
and just add that capability, and that's all I have to do.


00:12:12.640 --> 00:12:14.340
- Yeah, absolutely. - Oh, man, yeah.


00:12:14.340 --> 00:12:15.780
Yeah, this is great.


00:12:15.780 --> 00:12:19.980
Well, so clearly, this is adding code to your code, right?


00:12:19.980 --> 00:12:24.020
- So I was curious about the performance here. - Yeah, got to be.


00:12:24.020 --> 00:12:26.160
Yeah, so Teddy, he out there in the live stream asked,


00:12:26.160 --> 00:12:28.840
Do you know if there's any potential loss performance


00:12:28.840 --> 00:12:30.540
since it's running at runtime?


00:12:30.540 --> 00:12:34.280
I'm going to say I am certain there is loss performance.


00:12:34.280 --> 00:12:36.880
Unfortunately, in Python,


00:12:36.880 --> 00:12:40.780
calling a function is a relatively slow operation,


00:12:40.780 --> 00:12:44.160
and doing a decorator is effectively calling a function.


00:12:44.160 --> 00:12:45.380
So it's got to be slower.


00:12:45.380 --> 00:12:47.920
That's why I would say put it just on the boundaries,


00:12:47.920 --> 00:12:50.720
you know, something like that.


00:12:50.720 --> 00:12:51.900
But I mean, the alternative is


00:12:51.900 --> 00:12:53.700
if you actually want to do these tests,


00:12:53.700 --> 00:12:55.940
if you actually want to do that validation,


00:12:55.940 --> 00:13:01.940
It's an if statement and multiple is instance of all over the play, right?


00:13:01.940 --> 00:13:05.780
So if you're going to do that validation anyway, you're already calling, it's just not on the outside.


00:13:05.780 --> 00:13:06.580
It's on the inside.


00:13:06.580 --> 00:13:07.020
Right.


00:13:07.020 --> 00:13:08.900
So, good question.


00:13:08.900 --> 00:13:09.300
I don't know.


00:13:09.300 --> 00:13:10.900
Yeah.


00:13:10.900 --> 00:13:16.860
Another question, from Ben Lindsay, do you know how this compares with Pydantic's validate arguments decorator?


00:13:16.860 --> 00:13:17.940
I have no idea.


00:13:17.940 --> 00:13:25.140
I don't know, but I'm a big fan of Pydantic and the validate arguments decorator is exactly the same type of thing.


00:13:25.860 --> 00:13:27.620
that we're talking about.


00:13:27.620 --> 00:13:29.900
So for example, like you should put the


00:13:29.900 --> 00:13:31.340
at validate arguments.


00:13:31.340 --> 00:13:34.720
The thing is that I did notice somewhere that,


00:13:34.720 --> 00:13:35.560
yeah, here it is.


00:13:35.560 --> 00:13:38.060
Like this validate arguments decorator is in beta


00:13:38.060 --> 00:13:39.260
for whatever that means.


00:13:39.260 --> 00:13:45.000
It won't be concrete until V2 of Pydantic,


00:13:45.000 --> 00:13:51.500
but that may well be more concrete


00:13:51.500 --> 00:13:54.820
and more formalized than this one, right?


00:13:54.820 --> 00:13:56.560
Although this is more standalone, right?


00:13:56.560 --> 00:13:58.560
So you don't necessarily,


00:13:58.560 --> 00:14:00.240
it feels like a little tiny thing


00:14:00.240 --> 00:14:01.320
that you just plug in on there.


00:14:01.320 --> 00:14:04.560
Pydantic is doing a lot, but I'm a fan of Pydantic.


00:14:04.560 --> 00:14:06.400
So yeah, good question, Ben.


00:14:06.400 --> 00:14:12.180
All right, Al, you got the next one, right?


00:14:12.180 --> 00:14:15.340
- Yeah, so I have a new book out.


00:14:15.340 --> 00:14:17.280
It just came out at the end of June.


00:14:17.280 --> 00:14:20.860
It's called "The Big Book of Small Python Projects."


00:14:20.860 --> 00:14:24.360
So a lot of my books have been for people


00:14:24.360 --> 00:14:27.900
who are total beginners or relatively new to not just Python,


00:14:27.900 --> 00:14:29.740
but to programming in general.


00:14:29.740 --> 00:14:31.860
- Generally people who have boring stuff?


00:14:31.860 --> 00:14:32.700
- Yes.


00:14:32.700 --> 00:14:36.080
Oh man, so much boring stuff.


00:14:36.080 --> 00:14:39.580
- Actually you have books on games and things as well.


00:14:39.580 --> 00:14:42.300
- Yeah, that's the two approaches I have


00:14:42.300 --> 00:14:44.620
to tricking people into learning how to program


00:14:44.620 --> 00:14:46.540
is getting away from Excel


00:14:46.540 --> 00:14:49.140
and then also learning how to make video games.


00:14:49.140 --> 00:14:54.140
Seems to be really common pathways into programming.


00:14:54.140 --> 00:14:57.260
So I've also noticed that with a lot of beginner tutorials,


00:14:57.260 --> 00:15:00.420
people learn the syntax and they learn all the concepts


00:15:00.420 --> 00:15:02.180
like loops and variables and things like that.


00:15:02.180 --> 00:15:06.020
But when it comes to actually working on their own projects,


00:15:06.020 --> 00:15:08.740
they're sort of stuck and they're just left staring


00:15:08.740 --> 00:15:11.300
at a blank editor and not really knowing


00:15:11.300 --> 00:15:12.940
how to proceed from there.


00:15:12.940 --> 00:15:14.740
And a lot of people will give them,


00:15:14.740 --> 00:15:17.980
usually the two bits of advice that people get are,


00:15:17.980 --> 00:15:20.340
oh, you should work on open source projects


00:15:20.340 --> 00:15:22.380
or just read the code for open source projects,


00:15:22.380 --> 00:15:25.300
which is actually pretty terrible advice for beginners


00:15:25.300 --> 00:15:28.200
because a lot of open source projects


00:15:28.200 --> 00:15:30.340
might not be well documented.


00:15:30.340 --> 00:15:33.140
They're written for professional software engineers.


00:15:33.140 --> 00:15:35.280
There's a lot of conflict.


00:15:35.280 --> 00:15:37.340
- Yeah, there's a huge difference between something


00:15:37.340 --> 00:15:40.380
that is absolutely polished and meant to be used


00:15:40.380 --> 00:15:42.140
in many situations in the real world.


00:15:42.140 --> 00:15:44.980
Like you might learn a lot by working, looking at Django,


00:15:44.980 --> 00:15:47.060
but most of the time you'll probably just be confused.


00:15:47.060 --> 00:15:48.540
You're like, why is this so complicated?


00:15:48.540 --> 00:15:50.860
Oh, it's so complicated because, you know,


00:15:50.860 --> 00:15:53.940
million websites use it in weird ways. And that's why it's


00:15:53.940 --> 00:15:56.460
complicated. That's not a good learning tool per se.


00:15:56.460 --> 00:15:59.300
Yeah, especially for someone who just learned about, you know,


00:15:59.300 --> 00:16:02.700
how to call functions and how to create classes and pretty basic


00:16:02.700 --> 00:16:07.980
things like that. So I spent I think, I think I was working on


00:16:07.980 --> 00:16:11.460
this on and off again for about two or three years, but I wanted


00:16:11.460 --> 00:16:15.420
to create a collection of small little programs, mostly like


00:16:15.420 --> 00:16:19.620
games or puzzles, or little simulations or things like that,


00:16:20.140 --> 00:16:25.260
where they were all just really simple and easy for beginners to read through and then they can understand,


00:16:25.260 --> 00:16:31.180
"Oh, this is how all of these concepts I learned get applied to an actual program that does something."


00:16:31.180 --> 00:16:35.420
So these aren't code snippets. They're not just like tiny little functions or things like this.


00:16:35.420 --> 00:16:42.140
This is programs that you can actually copy the code yourself and then figure out how they work.


00:16:42.140 --> 00:16:46.060
So I have about 81 of these projects altogether.


00:16:46.060 --> 00:16:54.220
They're all under, I set a limit of 256 lines of code, just as an arbitrary power of eight to set it to.


00:16:54.220 --> 00:16:58.940
And they are all text-based games. So they're fairly old school looking,


00:16:58.940 --> 00:17:04.720
like a lot of the games that people were programming in BASIC in the 1980s and 90s.


00:17:04.720 --> 00:17:11.980
But the plus side of that is that all of the games are really simple and you don't have to install


00:17:11.980 --> 00:17:15.020
additional libraries or modules or things like that.


00:17:15.660 --> 00:17:23.500
You can pretty much just type the code in and it just uses the Python standard library


00:17:23.500 --> 00:17:28.260
for all of this. I have a few of these programs that use a few other modules as well. But


00:17:28.260 --> 00:17:34.620
for the most part, you can get pretty far with just text and just ASCII art. And also,


00:17:34.620 --> 00:17:39.620
even if you already know Python, these programs are great just for ideas of if you want to


00:17:39.620 --> 00:17:43.940
learn another programming language and just get used to how things work in that. You could


00:17:43.940 --> 00:17:52.340
find the idea for a blackjack game from this collection of programs or this birthday paradox


00:17:52.340 --> 00:17:57.500
calculator and all sorts of these little projects right here.


00:17:57.500 --> 00:18:05.100
Of course, this book is also freely available online at inventwithpython.com/bigbookpython.


00:18:05.100 --> 00:18:08.860
I'm starting to get reviews coming in on Amazon and they seem to be pretty positive.


00:18:08.860 --> 00:18:14.320
So I'm really hopeful about people just being able to take the next step in learning to


00:18:14.320 --> 00:18:16.320
code with this book.


00:18:16.320 --> 00:18:18.320
Yeah, cool.


00:18:18.320 --> 00:18:19.320
Cool.


00:18:19.320 --> 00:18:20.320
Yeah.


00:18:20.320 --> 00:18:25.720
And then the other book that I had that came out in November is Beyond the Basic Stuff


00:18:25.720 --> 00:18:30.720
with Python, which is sort of the follow-up book to Automate the Boring Stuff with Python.


00:18:30.720 --> 00:18:34.720
I had a lot of people who were asking me, like, oh, I really like to automate.


00:18:34.720 --> 00:18:36.480
What should I read next?


00:18:36.480 --> 00:18:43.080
And I had some things I would tell them, like Fluent Python is a really great book, but


00:18:43.080 --> 00:18:47.640
it's also 800 pages or 800 pounds or something.


00:18:47.640 --> 00:18:49.080
It's a really huge book.


00:18:49.080 --> 00:18:54.600
And the information in it is great, but it's really intimidating to take this book and


00:18:54.600 --> 00:18:57.360
it's like, "Okay, read this one next."


00:18:57.360 --> 00:19:05.080
So I wanted to cover a book that had sort of the best practices for a lot of software


00:19:05.080 --> 00:19:06.080
engineers.


00:19:06.080 --> 00:19:11.280
There's sections on how to name your variables or how to do code formatting.


00:19:11.280 --> 00:19:13.980
And I talk about the black code formatting tool.


00:19:13.980 --> 00:19:17.680
I talk about type hints and how to write documentation.


00:19:17.680 --> 00:19:26.080
I have a very superficial coverage of Git and GitHub and how to use version control.


00:19:26.080 --> 00:19:31.480
And just, you know, I even dive into what exactly does Pythonic mean?


00:19:31.480 --> 00:19:38.320
Spoiler alert, Python basically means anything the person you're talking to wants it to mean


00:19:38.320 --> 00:19:40.320
at the time.


00:19:40.320 --> 00:19:43.900
But yeah, just sort of a lot of the things that you don't really get in your typical


00:19:43.900 --> 00:19:49.680
hello world tutorial, these are the sort of tidbits that you would pick up with experience


00:19:49.680 --> 00:19:53.000
over years of experience, I guess.


00:19:53.000 --> 00:19:57.200
But I just wanted to collect all of that advice and information and best practices into a


00:19:57.200 --> 00:19:58.200
single book.


00:19:58.200 --> 00:20:00.120
Yeah, that's also available online


00:20:00.120 --> 00:20:03.080
at the inventwithpython.com website.


00:20:03.080 --> 00:20:03.920
- Cool.


00:20:03.920 --> 00:20:05.120
A couple of comments from the live stream.


00:20:05.120 --> 00:20:08.000
John Sheehan says, "Beyond the basic stuff


00:20:08.000 --> 00:20:11.280
"was great for learning to do things the Python way."


00:20:11.280 --> 00:20:13.800
And wow, great to see Mr. Stoigart.


00:20:13.800 --> 00:20:16.060
"Seems like only yesterday I was promoting your last book


00:20:16.060 --> 00:20:17.880
"at Bay Piggies from--"


00:20:17.880 --> 00:20:19.560
- Oh, hey Neil, how's it going?


00:20:19.560 --> 00:20:22.320
- Cool.


00:20:22.320 --> 00:20:23.240
- Yeah, very cool.


00:20:23.240 --> 00:20:25.500
Congrats on the books.


00:20:26.840 --> 00:20:29.520
Brian, let's talk about something completely different


00:20:29.520 --> 00:20:30.360
than books.


00:20:30.360 --> 00:20:33.820
- Like notebooks.


00:20:33.820 --> 00:20:37.160
Yes, let's talk about notebooks.


00:20:37.160 --> 00:20:38.520
Thanks for popping that up.


00:20:38.520 --> 00:20:42.200
Yeah, so this was another suggestion.


00:20:42.200 --> 00:20:44.760
This suggestion came from David Nicholson.


00:20:44.760 --> 00:20:46.360
Thanks, David.


00:20:46.360 --> 00:20:48.800
I thought we'd covered this already,


00:20:48.800 --> 00:20:50.720
but then I looked in, but we haven't,


00:20:50.720 --> 00:20:53.280
and I looked into it and it's,


00:20:53.280 --> 00:20:55.120
and I obviously haven't played with it yet,


00:20:55.120 --> 00:20:58.420
But okay, so test book is very cool.


00:20:58.420 --> 00:21:02.640
Test book, the idea is to test your Jupyter Notebooks.


00:21:02.640 --> 00:21:05.340
I think we've covered a couple things, ways to do that,


00:21:05.340 --> 00:21:07.560
but this is kind of a neat perspective.


00:21:07.560 --> 00:21:12.380
So the perspective of this is you've got a notebook


00:21:12.380 --> 00:21:14.660
with maybe let's say functions in it,


00:21:14.660 --> 00:21:16.460
and you want to check those.


00:21:16.460 --> 00:21:17.660
You want to make sure that those,


00:21:17.660 --> 00:21:20.200
you want to write tests against those functions.


00:21:20.200 --> 00:21:23.960
Instead of putting the tests in your notebook,


00:21:23.960 --> 00:21:29.960
put them in like just a test file and run it with pytest or UnitTest or something.


00:21:29.960 --> 00:21:37.160
And so to do that, though, like, let's say I want to run a function foo


00:21:37.160 --> 00:21:43.260
and I want to do it from another file, I've got to get that definition of foo into my test code.


00:21:43.260 --> 00:21:50.860
And so what TestBook does is it has a decorator that you can either put it on your test


00:21:50.860 --> 00:21:54.380
or a fixture that goes ahead and runs the,


00:21:54.380 --> 00:21:57.100
one of the things you can do is run your notebook


00:21:57.100 --> 00:21:58.320
before the test runs.


00:21:58.320 --> 00:22:00.820
And then you can pull out the definitions.


00:22:00.820 --> 00:22:02.160
- So you have a decorator,


00:22:02.160 --> 00:22:06.720
which has a path to the IPYNB file and execute equals true.


00:22:06.720 --> 00:22:08.620
And by the time it gets to your code,


00:22:08.620 --> 00:22:09.940
it's already gonna run that,


00:22:09.940 --> 00:22:11.820
the things defined in like a function


00:22:11.820 --> 00:22:13.860
or variables defined within the notebook


00:22:13.860 --> 00:22:17.980
will just be accessible through the input parameter there.


00:22:17.980 --> 00:22:18.820
- Yep.


00:22:18.820 --> 00:22:20.500
And the test gets a fix,


00:22:20.500 --> 00:22:25.000
you can have a fixture to be able to grab values, references.


00:22:25.000 --> 00:22:30.000
So the example we're showing right now shows pulling a function in,


00:22:30.000 --> 00:22:32.500
but I imagine you can pull in really anything,


00:22:32.500 --> 00:22:36.300
any name that exists within the notebook to be able to test it.


00:22:36.300 --> 00:22:41.400
Some of the neat things that it includes right off the bat is


00:22:41.400 --> 00:22:44.640
it's nice that it isn't just pytest.


00:22:44.640 --> 00:22:46.200
You can use it with unit test,


00:22:46.200 --> 00:22:48.600
apparently also with Nose, but don't do that.


00:22:48.600 --> 00:22:53.060
One of the things you can do also is,


00:22:53.060 --> 00:22:56.060
in the original example of decorating a test,


00:22:56.060 --> 00:23:00.560
it's going to run that notebook for every test it's decorated.


00:23:00.560 --> 00:23:03.060
You might not want that. You might.


00:23:03.060 --> 00:23:05.620
But if you want to run it all just once,


00:23:05.620 --> 00:23:09.060
you can put it in a fixture and then return the fixture.


00:23:09.060 --> 00:23:10.420
That's a cool thing.


00:23:10.420 --> 00:23:13.860
One reason why you might want to run it multiple times


00:23:13.860 --> 00:23:17.200
is if there are interactions between the different parts


00:23:17.260 --> 00:23:20.300
and you want to completely isolate those tests.


00:23:20.300 --> 00:23:22.460
Another thing that's built into it is patching.


00:23:22.460 --> 00:23:24.460
So you don't have to import mock,


00:23:24.460 --> 00:23:28.220
you can patch different parts of your Python code,


00:23:28.220 --> 00:23:33.660
your Python notebook code with like mock,


00:23:33.660 --> 00:23:36.220
you can patch it right through this.


00:23:36.220 --> 00:23:37.740
So that's pretty neat.


00:23:37.740 --> 00:23:39.420
Yeah, that's pretty neat. I like it.


00:23:39.420 --> 00:23:42.060
Al, what do you think?


00:23:42.060 --> 00:23:44.620
Nice, yeah.


00:23:44.620 --> 00:23:46.860
I haven't had a lot of experience with Jupyter notebooks,


00:23:46.860 --> 00:23:51.420
but it's sort of becoming the main way that a lot of people are being introduced to Python,


00:23:51.420 --> 00:23:54.540
especially if they're coming from the sciences or academia.


00:23:54.540 --> 00:24:01.100
Yeah. Yeah. And so getting like sort of a lot of informally trained software engineers


00:24:01.100 --> 00:24:06.700
up to speed with like unit testing and other practices like that, it's definitely something


00:24:06.700 --> 00:24:12.700
I can get behind. Yeah, that's cool. And the getting the ability to call those pieces or


00:24:12.700 --> 00:24:16.940
interact with those pieces outside the notebook is quite tricky.


00:24:16.940 --> 00:24:18.840
So this is a neat way to do it.


00:24:18.840 --> 00:24:21.300
I mean, we've got paper mill, but I'm not sure exactly how that folds


00:24:21.300 --> 00:24:23.000
into testing and stuff like that.


00:24:23.000 --> 00:24:23.260
Right.


00:24:23.260 --> 00:24:24.940
Right.


00:24:24.940 --> 00:24:25.320
Actually.


00:24:25.320 --> 00:24:25.780
Yeah.


00:24:25.780 --> 00:24:26.900
Yeah, I don't think so.


00:24:26.900 --> 00:24:30.600
I don't think it's more like inputs and outputs as a whole notebook.


00:24:30.600 --> 00:24:34.900
Not like, let me get ahold of the function in the cell seven and try to call that.


00:24:34.900 --> 00:24:36.900
Yeah.


00:24:36.900 --> 00:24:39.400
Also, the target audience is different.


00:24:39.400 --> 00:24:43.240
So the target audience for your notebook itself


00:24:43.240 --> 00:24:45.880
is different than you trying to test your code.


00:24:45.880 --> 00:24:50.020
So keeping the test code out of the notebook,


00:24:50.020 --> 00:24:54.100
I think is a nice thing to keep it clean.


00:24:54.100 --> 00:24:55.420
- Yeah, I totally agree.


00:24:55.420 --> 00:24:58.000
Taking a step back real quick,


00:24:58.000 --> 00:25:01.200
Neil also asks, are the small programs in your book, Al,


00:25:01.200 --> 00:25:04.760
compatible with MicroPython or CircuitPython?


00:25:04.760 --> 00:25:07.480
- Probably not.


00:25:09.300 --> 00:25:12.660
I don't know. I haven't taken too much of a look at MicroPython.


00:25:12.660 --> 00:25:18.700
But I do try to keep all the source code as simple as possible


00:25:18.700 --> 00:25:23.580
and not really rely on the file system or making network connections.


00:25:23.580 --> 00:25:29.260
Mostly, it's just standard I/O input/output streams for text.


00:25:29.260 --> 00:25:34.860
So, if it can run print and input, then likely it can run these programs.


00:25:35.820 --> 00:25:37.980
Yeah, maybe you just have to make the little lights blink


00:25:37.980 --> 00:25:39.500
and some sort of Morse code.


00:25:39.500 --> 00:25:42.700
Yeah, perfect.


00:25:42.700 --> 00:25:44.020
Nice.


00:25:44.020 --> 00:25:46.620
All right, something that is a little bit mysterious


00:25:46.620 --> 00:25:49.020
to a lot of folks, I think, partly


00:25:49.020 --> 00:25:52.340
because it's somewhat discouraged, but not always,


00:25:52.340 --> 00:25:57.820
is from package import star.


00:25:57.820 --> 00:26:01.020
Well, sometimes discouraged because you probably shouldn't.


00:26:01.020 --> 00:26:03.500
There probably are situations where you want to do that.


00:26:03.500 --> 00:26:07.180
Like if I've got three sub-modules and I want to take the elements in them


00:26:07.180 --> 00:26:11.740
and then drop them into the top-level dunder init for a package


00:26:11.740 --> 00:26:13.940
so that I can just say package name.items


00:26:13.940 --> 00:26:16.740
but not organize them into one giant file, for example.


00:26:16.740 --> 00:26:18.740
That might be reasonable.


00:26:18.740 --> 00:26:24.740
The way that you control that is you work on the dunder all


00:26:24.740 --> 00:26:28.140
definition at the top of your package, right?


00:26:28.140 --> 00:26:30.540
And in there, you can say, "Here are the names of the things


00:26:30.540 --> 00:26:34.540
that I would like to export if you import star,


00:26:34.540 --> 00:26:37.580
rather than everything, give them these, right?


00:26:37.580 --> 00:26:42.820
So maybe you define some weird thing called Django


00:26:42.820 --> 00:26:44.340
and it's not meant to override Django


00:26:44.340 --> 00:26:45.660
or something like that, right?


00:26:45.660 --> 00:26:47.700
You wanna leave that out.


00:26:47.700 --> 00:26:50.140
So how do you manage that?


00:26:50.140 --> 00:26:53.740
Well, there's this project over on GitHub


00:26:53.740 --> 00:26:57.740
called auto-all, auto-all,


00:26:57.740 --> 00:27:01.020
And the idea is that it somewhat automagically


00:27:01.020 --> 00:27:04.400
manages the dunderall variable for Python modules.


00:27:04.400 --> 00:27:08.300
So there's a couple of ways in which you can do it.


00:27:08.300 --> 00:27:12.940
You can exclude certain things.


00:27:12.940 --> 00:27:16.320
You can clearly differentiate what's meant to be treated


00:27:16.320 --> 00:27:18.540
as an external item and what's meant to be treated


00:27:18.540 --> 00:27:20.540
as an internal item.


00:27:20.540 --> 00:27:23.960
You don't have to worry about continuing to update


00:27:23.960 --> 00:27:26.080
the dunderall and so on.


00:27:27.000 --> 00:27:31.640
So you just pip install it, and then the most...


00:27:31.640 --> 00:27:34.140
it seems like the recommended way, I guess,


00:27:34.140 --> 00:27:38.180
is you would call somewhere in your script at the top level,


00:27:38.180 --> 00:27:40.680
like at the function or class level, right?


00:27:40.680 --> 00:27:43.720
No tab space, no spaces, no indentation.


00:27:43.720 --> 00:27:46.600
You say start all, then you write a bunch of code,


00:27:46.600 --> 00:27:48.520
functions and so on, and then you say--


00:27:48.520 --> 00:27:51.020
- You mean auto all dot start all?


00:27:51.020 --> 00:27:52.600
- Yeah, yeah, if you-- - Oh, right.


00:27:52.600 --> 00:27:55.440
- Yeah, if you-- exactly, if you import it from there, right?


00:27:55.440 --> 00:27:57.440
I guess you could even import star from there.


00:27:57.440 --> 00:27:59.440
But you say start all,


00:27:59.440 --> 00:28:01.440
and then you write a bunch of code,


00:28:01.440 --> 00:28:03.440
and you say end all, and basically between those


00:28:03.440 --> 00:28:05.440
two markers, those are the


00:28:05.440 --> 00:28:07.440
things that go into your


00:28:07.440 --> 00:28:09.440
dunderall variable.


00:28:09.440 --> 00:28:11.440
There's something about classes


00:28:11.440 --> 00:28:13.440
that will not work for classes


00:28:13.440 --> 00:28:15.440
or variables as...


00:28:15.440 --> 00:28:17.440
Sorry, take it back. It will with


00:28:17.440 --> 00:28:19.440
the start all, end all, but there's also another


00:28:19.440 --> 00:28:21.440
way that only works on


00:28:21.440 --> 00:28:23.440
functions, and that is to


00:28:23.440 --> 00:28:26.720
put a decorator onto the function, which I think,


00:28:26.720 --> 00:28:28.580
I like this a lot, but the fact that it doesn't work


00:28:28.580 --> 00:28:31.100
with classes, it sounds like that should actually


00:28:31.100 --> 00:28:34.360
be a PR, folks, a little thing that,


00:28:34.360 --> 00:28:37.000
an extra one, like public class, or I don't know, whatever.


00:28:37.000 --> 00:28:37.840
But that seems pretty cool.


00:28:37.840 --> 00:28:40.520
So you just say @public on a function,


00:28:40.520 --> 00:28:43.680
and then that will add it to the dunderall.


00:28:43.680 --> 00:28:47.420
So if you want to export three functions from your module,


00:28:47.420 --> 00:28:49.080
you just put @public on those, and that way,


00:28:49.080 --> 00:28:50.880
when you're looking at it, it's like really clear.


00:28:50.880 --> 00:28:52.920
These are the public functions, and the rest aren't.


00:28:52.920 --> 00:28:57.460
I mean, you could still from module import name,


00:28:57.460 --> 00:29:00.220
but not through the all, right?


00:29:00.220 --> 00:29:02.260
- Yeah. - Yeah.


00:29:02.260 --> 00:29:04.540
- Okay, anyway, it looks pretty cool, right?


00:29:04.540 --> 00:29:07.520
- Yeah, that is actually a really nice way


00:29:07.520 --> 00:29:10.440
to just have this automatically taken care of.


00:29:10.440 --> 00:29:13.360
I mean, ideally, you're not really doing


00:29:13.360 --> 00:29:16.600
the from module import star all too often,


00:29:16.600 --> 00:29:20.020
or rather, ideally, I'm the only person in the entire world


00:29:20.020 --> 00:29:21.220
that should be allowed to do that,


00:29:21.220 --> 00:29:24.220
and everybody else will have to do it the proper way.


00:29:24.220 --> 00:29:25.720
- It's a bad idea, don't do it.


00:29:25.720 --> 00:29:27.220
But it's very handy.


00:29:27.220 --> 00:29:28.820
- Yeah, this is really handy.


00:29:28.820 --> 00:29:30.500
- Yeah, Dean out there in the live stream says,


00:29:30.500 --> 00:29:32.340
"This should work with a context manager."


00:29:32.340 --> 00:29:33.760
Yeah, it probably should.


00:29:33.760 --> 00:29:35.820
I think the challenge would be then you'd have like


00:29:35.820 --> 00:29:38.780
all of your implementation indented, but still pretty cool.


00:29:38.780 --> 00:29:44.180
- Yeah, so actually I'm reminded of one of the places


00:29:44.180 --> 00:29:48.100
I do do import all or import star


00:29:48.100 --> 00:29:52.260
is in dunder init files for packages.


00:29:52.260 --> 00:29:53.140
Yes, exactly.


00:29:53.140 --> 00:29:56.180
In those cases, I often do pull in.


00:29:56.180 --> 00:29:58.500
I've got a couple modules that have my interface,


00:29:58.500 --> 00:30:00.100
and I pull everything in from there.


00:30:00.100 --> 00:30:06.980
So those are cases where that is something that happens.


00:30:06.980 --> 00:30:09.140
And then you're faced with,


00:30:09.140 --> 00:30:10.660
well, what if I want to put another function


00:30:10.660 --> 00:30:12.180
that isn't part of my public interface?


00:30:12.180 --> 00:30:13.620
Then you have to jump through hoops.


00:30:13.620 --> 00:30:15.540
So I would probably use it in those cases.


00:30:16.500 --> 00:30:18.180
Yeah, I don't think it's broadly applicable,


00:30:18.180 --> 00:30:20.420
but for the people who are really trying to carefully


00:30:20.420 --> 00:30:23.740
manage their thunder all, seems nice.


00:30:23.740 --> 00:30:25.740
Straightforward, simple.


00:30:25.740 --> 00:30:26.780
Yeah.


00:30:26.780 --> 00:30:28.380
Yep.


00:30:28.380 --> 00:30:29.260
All right.


00:30:29.260 --> 00:30:32.620
Al, I think you got the last one, right?


00:30:32.620 --> 00:30:37.380
Yeah, so I am working on another book.


00:30:37.380 --> 00:30:39.180
I have a really bad book writing problem.


00:30:39.180 --> 00:30:41.420
I keep thinking that this will be the last one,


00:30:41.420 --> 00:30:45.620
and then I have ideas for 10 or 20 more.


00:30:45.620 --> 00:30:51.940
But the book that I'm currently working on and I'm down to the drafts of the last two chapters is a book on recursion.


00:30:51.940 --> 00:30:54.940
So this is currently my untitled recursion book.


00:30:54.940 --> 00:31:04.900
But yeah, I gave a talk at North Bay Python, I believe in 2018 or 2019, that was an introduction to recursion.


00:31:04.900 --> 00:31:13.580
And recursion is one of those things where a lot of people find it very intimidating, or even just outright magical.


00:31:13.740 --> 00:31:19.020
And it's this thing that seems to be like only for advanced programmers or something like that


00:31:19.020 --> 00:31:21.740
But I started taking a look at it.


00:31:21.740 --> 00:31:23.100
Or beginner programmers who make a mistake.


00:31:23.100 --> 00:31:25.740
Oh, yeah, right, exactly.


00:31:25.740 --> 00:31:27.420
Accidentally, as you keep calling it.


00:31:27.420 --> 00:31:33.580
Yeah, just for some general background, recursion is when you have a function that calls itself.


00:31:33.580 --> 00:31:38.540
And this is, it sounds like it won't work and oftentimes it won't.


00:31:38.540 --> 00:31:42.060
You'll get a sort of an infinite loop of recursive function calls


00:31:42.060 --> 00:31:49.060
and then it crashes your program. But there are recursive algorithms where this is a really


00:31:49.060 --> 00:31:53.860
handy technique and allows you to do really sophisticated things in not that much code.


00:31:53.860 --> 00:31:58.780
However, a lot of people find it really confusing. But more than anything, I found that it's


00:31:58.780 --> 00:32:04.980
just poorly taught. Most people will probably learn this from a computer science professor,


00:32:04.980 --> 00:32:10.860
or they'll be studying it as a way to prepare for job interviews for the coding section.


00:32:10.860 --> 00:32:14.700
There's a lot of times where people will be writing out an algorithm on a whiteboard and


00:32:14.700 --> 00:32:19.100
their interviewer will say, "Okay, and now can you do the recursive version of this algorithm?"


00:32:19.100 --> 00:32:27.500
As a quick gotcha. But yeah, the short of it is I realized that a lot of times people don't really


00:32:27.500 --> 00:32:33.260
teach the concept of the call stack and without explicitly knowing about what a call stack is and


00:32:33.260 --> 00:32:38.540
how it works, a lot of what recursion does just seems magical because you're missing this huge


00:32:38.540 --> 00:32:44.300
piece and I found out so many other things about this. And so I thought, hey, I could write a quick


00:32:44.300 --> 00:32:50.540
little tutorial on recursive functions and make a talk. And then that just kind of ballooned into


00:32:50.540 --> 00:32:55.660
a giant book now. - That's how I end up with courses. I'm like, oh, that'd be a neat little thing to play


00:32:55.660 --> 00:33:02.860
around with. Why have I spent the last month doing this? - Yes. So I'm hoping to have this book


00:33:02.860 --> 00:33:10.380
probably done at either at the end of this year or early next year in 2022. But yeah,


00:33:10.380 --> 00:33:17.260
so a book that just covers recursive algorithms and why people find recursion to be so intimidating


00:33:17.260 --> 00:33:24.300
and how it really isn't and even how oftentimes it's actually not the best technique to use.


00:33:24.300 --> 00:33:28.780
You just want to write straightforward, simple code. But if you really want to show off


00:33:28.780 --> 00:33:33.100
how smart you are and annoy your co-workers that way.


00:33:33.100 --> 00:33:35.580
Recursions also really create for that.


00:33:35.580 --> 00:33:39.220
>> What I like about it is if you have hierarchical data,


00:33:39.220 --> 00:33:41.540
it matches that really cleanly.


00:33:41.540 --> 00:33:41.860
>> Yes.


00:33:41.860 --> 00:33:43.220
>> If you want to traverse a tree,


00:33:43.220 --> 00:33:44.660
but in a real simple way,


00:33:44.660 --> 00:33:48.860
you want to work with an algorithm that is iterative in the sense,


00:33:48.860 --> 00:33:52.060
like the previous step naturally,


00:33:52.060 --> 00:33:53.520
the answer that leads to the next one,


00:33:53.520 --> 00:33:54.720
those types of things,


00:33:54.720 --> 00:33:57.060
it's like a super elegant answer.


00:33:57.060 --> 00:34:03.300
Yeah, I found that recursive algorithms are really great when your problem has a tree-like


00:34:03.300 --> 00:34:11.180
structure and also involves backtracking. Otherwise, you probably just need a loop or


00:34:11.180 --> 00:34:14.100
some iterative way of solving it.


00:34:14.100 --> 00:34:20.040
You can also come up with a cool joke, like the one we had on episode 236.


00:34:20.040 --> 00:34:25.700
There are so many recursive jokes. I actually opened up my talk at North Bay Python with


00:34:25.700 --> 00:34:30.340
Just like okay, we could just got to get that out of our systems do the whole you know


00:34:30.340 --> 00:34:36.340
In order to learn about recursion you first have to learn about recursion these jokes that we've heard like millions of times


00:34:36.340 --> 00:34:42.040
Yeah, people can check out the little cartoon graphic thing on episode 236


00:34:42.040 --> 00:34:46.140
Nice. All right, Brian. You got anything you want to just throw out there at the end?


00:34:46.140 --> 00:34:50.940
No, I've just been working a lot


00:34:51.300 --> 00:34:57.980
I was just one question. I was just gonna think that maybe Al's book was about how to write a book about recursion


00:34:57.980 --> 00:35:02.300
The making of is something I've also been thinking of


00:35:02.300 --> 00:35:08.060
I feel like a book on meta classes and meta programming might be very relevant in that sense


00:35:08.060 --> 00:35:14.440
All right. I got a couple things to cover for my extras. Okay first I had talked about oh my posh


00:35:14.440 --> 00:35:18.440
Posh which I think is a really cool


00:35:19.340 --> 00:35:24.340
like oh my Z shell type of thing, but for PowerShell.


00:35:24.340 --> 00:35:26.180
And if you use the new Windows terminal


00:35:26.180 --> 00:35:27.740
and you get the new PowerShell seven


00:35:27.740 --> 00:35:29.500
and set that to be the default,


00:35:29.500 --> 00:35:32.340
then you get these really beautiful, nice


00:35:32.340 --> 00:35:38.940
shell, basically the prompts and auto-complete


00:35:38.940 --> 00:35:40.660
and all those kinds of things.


00:35:40.660 --> 00:35:41.820
So those are really neat.


00:35:41.820 --> 00:35:45.660
People can check that out for all the posh shell stuff.


00:35:45.660 --> 00:35:49.620
But someone was asking for something that would do


00:35:49.620 --> 00:35:52.140
a thing that is really cool.


00:35:52.140 --> 00:35:57.140
Like what if, what if when I, and oh, by the way,


00:35:57.140 --> 00:35:58.860
'cause we gave it a shout out, right?


00:35:58.860 --> 00:36:02.220
I was dreaming of something that would automatically


00:36:02.220 --> 00:36:06.340
activate virtual environments when I CD'd into a structure


00:36:06.340 --> 00:36:10.320
that contained in the tree somewhere a virtual environment,


00:36:10.320 --> 00:36:12.060
which is cool.


00:36:12.060 --> 00:36:14.420
So they dug around and said,


00:36:14.420 --> 00:36:19.420
I found this thing called posh-derenv, which does that.


00:36:19.420 --> 00:36:22.300
So as you change into the directory,


00:36:22.300 --> 00:36:27.300
it will automatically activate virtual environments.


00:36:27.300 --> 00:36:29.260
- Nice. - Nice.


00:36:29.260 --> 00:36:31.800
- Yeah, so that's pretty neat.


00:36:31.800 --> 00:36:34.140
So people can check that out as a sort of follow-up.


00:36:34.140 --> 00:36:36.220
Another thing, one of our listeners,


00:36:36.220 --> 00:36:41.220
Einstein Finson, I believe was the one who sent it over.


00:36:41.220 --> 00:36:42.040
Thank you for that.


00:36:42.040 --> 00:36:43.220
Just said, "Hey, quick shout out.


00:36:43.220 --> 00:36:45.300
Your show has been super helpful to us.


00:36:45.300 --> 00:36:48.060
It's been inspiring a bunch of us scientists.


00:36:48.060 --> 00:36:50.900
We're here in Iceland, and I believe also at Harvard,


00:36:50.900 --> 00:36:52.740
if I recall correctly.


00:36:52.740 --> 00:36:56.260
And they now published an article


00:36:56.260 --> 00:36:58.740
using Python, a scalable method of determining


00:36:58.740 --> 00:37:03.980
physiological endotypes for basically a sleep apnea study,


00:37:03.980 --> 00:37:05.940
of trying to turn this into more of a continuum,


00:37:05.940 --> 00:37:07.900
rather than yes or no, you have--


00:37:07.900 --> 00:37:11.340
yes or no, you yes, do or don't have sleep apnea.


00:37:11.340 --> 00:37:13.720
So really cool just to see listeners listening to the show,


00:37:13.720 --> 00:37:14.740
using some of the packages


00:37:14.740 --> 00:37:16.700
and doing cool stuff that help people.


00:37:16.700 --> 00:37:17.700
- Yeah, that's good.


00:37:17.700 --> 00:37:21.420
- One more follow-up, two, three more follow-ups actually,


00:37:21.420 --> 00:37:23.180
but next one, really quickly,


00:37:23.180 --> 00:37:27.620
I've been having such a challenge with email for two years


00:37:27.620 --> 00:37:32.620
and I have finally, I think, solved it, the beast,


00:37:32.620 --> 00:37:34.340
I believe.


00:37:34.340 --> 00:37:37.900
I have had hundreds of emails from years ago


00:37:37.900 --> 00:37:39.180
that needed action.


00:37:39.180 --> 00:37:42.380
And finally, I've gotten back to almost everybody.


00:37:42.380 --> 00:37:43.860
I'm down to just a handful of emails


00:37:43.860 --> 00:37:44.700
and I'll have them all done.


00:37:44.700 --> 00:37:46.660
But anyway, I wanna recommend two email clients.


00:37:46.660 --> 00:37:48.220
One for the Mac is Newton.


00:37:48.220 --> 00:37:49.060
It's pretty cool.


00:37:49.060 --> 00:37:50.920
And then I'm gonna give Superhuman a try,


00:37:50.920 --> 00:37:53.620
but it takes a while to get set up on that.


00:37:53.620 --> 00:37:55.580
Just if you're out there struggling with email,


00:37:55.580 --> 00:37:56.420
check those out.


00:37:56.420 --> 00:38:01.380
And so we've heard about cloud computing.


00:38:01.380 --> 00:38:03.460
That's where you might run your program in the cloud.


00:38:03.460 --> 00:38:05.140
You've heard about virtual environment,


00:38:05.140 --> 00:38:06.340
or sorry, virtual machines.


00:38:06.340 --> 00:38:07.740
That's where you might fire up a computer


00:38:07.740 --> 00:38:12.540
that runs in a container or a virtual hypervisor.


00:38:12.540 --> 00:38:13.900
And then you can interact with that


00:38:13.900 --> 00:38:15.260
in like its own little way.


00:38:15.260 --> 00:38:16.900
But Microsoft, apparently, I was just reading


00:38:16.900 --> 00:38:19.060
like 15 minutes before we started.


00:38:19.060 --> 00:38:20.180
I thought I'd throw this in there.


00:38:20.180 --> 00:38:22.420
They just revealed not just Windows 11,


00:38:22.420 --> 00:38:27.260
but Windows 365, which is basically you buy Windows


00:38:27.260 --> 00:38:29.740
and the thing hosted in the cloud.


00:38:29.740 --> 00:38:30.820
So you just like, I don't know,


00:38:30.820 --> 00:38:32.100
web browser to it or something.


00:38:32.100 --> 00:38:34.420
And then you have a computer with all your files


00:38:34.420 --> 00:38:35.420
that's instantly on.


00:38:36.260 --> 00:38:38.000
So I don't know, I thought that was kind of interesting.


00:38:38.000 --> 00:38:38.840
Throw that out there.


00:38:38.840 --> 00:38:40.500
- Yeah, it's like Office 365


00:38:40.500 --> 00:38:42.580
except the entire operating system.


00:38:42.580 --> 00:38:45.100
- The entire computer with all your files like saved there.


00:38:45.100 --> 00:38:46.060
Yeah, exactly.


00:38:46.060 --> 00:38:48.380
It's probably expensive, I have no idea.


00:38:48.380 --> 00:38:53.380
Last thing, we talked about Flock No, right?


00:38:53.380 --> 00:38:56.140
We talked about Flock and the vanishing


00:38:56.140 --> 00:38:57.600
of third-party cookies


00:38:57.600 --> 00:38:59.220
and the stuff that Google was trying to do.


00:38:59.220 --> 00:39:00.560
And then remember that Brian,


00:39:00.560 --> 00:39:02.600
you pointed out they received significant feedback


00:39:02.600 --> 00:39:05.020
that was not totally positive for them.


00:39:05.020 --> 00:39:06.500
- Yeah.


00:39:06.500 --> 00:39:08.740
- So, you know, parallel to that,


00:39:08.740 --> 00:39:11.620
I think is really interesting is that Apple also had their


00:39:11.620 --> 00:39:13.980
do not track thing that they put on their phone,


00:39:13.980 --> 00:39:17.820
which is fine, but I think it just needs to be


00:39:17.820 --> 00:39:18.660
way more than that.


00:39:18.660 --> 00:39:20.180
But yeah, so they have that.


00:39:20.180 --> 00:39:22.900
Would you be surprised that only 25% of the people said,


00:39:22.900 --> 00:39:24.660
"Yes, please track me."


00:39:24.660 --> 00:39:27.580
I'm actually surprised that 25% of the people said yes.


00:39:27.580 --> 00:39:30.900
Like I, if it's over five, it's blowing my mind, right?


00:39:30.900 --> 00:39:31.820
Like, yeah, please.


00:39:31.820 --> 00:39:33.300
- Who's saying yes?


00:39:33.300 --> 00:39:36.500
- Exactly, so here's an article,


00:39:36.500 --> 00:39:39.700
Facebook and its advertisers are panicking


00:39:39.700 --> 00:39:42.260
as the majority of iPhone users opt out of tracking.


00:39:42.260 --> 00:39:46.260
And I saw that 20% of ad spend is now moved away from iPhone


00:39:46.260 --> 00:39:48.740
and towards Android because Android doesn't,


00:39:48.740 --> 00:39:51.820
you know, they're happy to track you 'cause that's Google.


00:39:51.820 --> 00:39:54.260
But also just, I think it's very meta and funny.


00:39:54.260 --> 00:39:58.240
So I have my VPN that has a ad blocker plus cyber,


00:39:58.240 --> 00:40:01.900
like basically virus malware detector at the network layer.


00:40:01.900 --> 00:40:04.700
Notice there's a big gap in me showing you this article up here.


00:40:04.700 --> 00:40:06.100
That's...


00:40:06.100 --> 00:40:08.500
I was just trying to show me the ad about the advertisers


00:40:08.500 --> 00:40:12.200
and my network, my VPN is blocking it, which I just love it.


00:40:12.200 --> 00:40:16.600
So, anyway, those are all the things that I had to share there.


00:40:16.600 --> 00:40:18.800
Al, you got anything else you want to throw out there for everyone?


00:40:18.800 --> 00:40:20.700
Yeah.


00:40:20.700 --> 00:40:25.300
Outside of the books, I'm also working on my open source project called PyAutoGUI.


00:40:25.300 --> 00:40:28.400
This is a GUI automation module for Python


00:40:28.400 --> 00:40:30.960
where it's a module that lets your Python scripts


00:40:30.960 --> 00:40:32.460
control the mouse and keyboard.


00:40:32.460 --> 00:40:35.040
So if you have some software that you wanna automatically


00:40:35.040 --> 00:40:36.920
click and type things into,


00:40:36.920 --> 00:40:39.720
you can write a script using PyAutoGUI to do that.


00:40:39.720 --> 00:40:41.880
It works on Python 2 and 3,


00:40:41.880 --> 00:40:44.760
and also on Windows, macOS, and Linux.


00:40:44.760 --> 00:40:47.600
I feel like I've been neglecting this project


00:40:47.600 --> 00:40:48.740
for the longest time,


00:40:48.740 --> 00:40:50.480
but more and more people are using it.


00:40:50.480 --> 00:40:53.980
So I really wanna start adding more and more features


00:40:53.980 --> 00:40:56.640
to bring it up to speed with a lot of other


00:40:56.640 --> 00:40:59.060
GUI automation libraries that are out there.


00:40:59.060 --> 00:41:02.020
So if anybody is interested in contributing,


00:41:02.020 --> 00:41:05.940
I have the GitHub link and you can also just Google


00:41:05.940 --> 00:41:09.900
for a Pi Auto GUI to find more information about that.


00:41:09.900 --> 00:41:10.740
- That's cool.


00:41:10.740 --> 00:41:13.220
I found out by DuckDuck, Googling with DuckDuckGo.


00:41:13.220 --> 00:41:14.060
- Yes.


00:41:14.060 --> 00:41:14.880
(laughs)


00:41:14.880 --> 00:41:18.180
I still have a problem saying Google as the verb.


00:41:18.180 --> 00:41:19.860
- No, no, I do too, all the time.


00:41:19.860 --> 00:41:23.420
- I finally got over using guys as a general neutral pronoun


00:41:23.420 --> 00:41:26.020
but now I still have problems saying Google all the time.


00:41:26.020 --> 00:41:28.820
- Yeah, it's all hard.


00:41:28.820 --> 00:41:30.820
By the way, notice over here.


00:41:30.820 --> 00:41:32.660
- I still have trouble not telling people


00:41:32.660 --> 00:41:33.980
the map quest something.


00:41:33.980 --> 00:41:36.020
(laughing)


00:41:36.020 --> 00:41:37.540
- It's good except those little arrows


00:41:37.540 --> 00:41:39.580
to move each around on the map


00:41:39.580 --> 00:41:41.020
of the little bars on each side.


00:41:41.020 --> 00:41:43.420
It's so clunky and you got to print the thing out


00:41:43.420 --> 00:41:46.220
for like five pages and follow the pictures.


00:41:46.220 --> 00:41:48.220
No, but so one thing I do want to give a quick shout out


00:41:48.220 --> 00:41:51.580
to the guys that read the docs, Eric and crew over there.


00:41:51.580 --> 00:41:53.700
Like they have an ad right here and it says,


00:41:53.700 --> 00:41:56.180
sponsored ads serve ethically.


00:41:56.180 --> 00:41:57.260
You know what that's based on?


00:41:57.260 --> 00:41:58.940
Not tracking and retargeting.


00:41:58.940 --> 00:42:01.140
That's just, hey, there's something to do


00:42:01.140 --> 00:42:02.540
with this Python project.


00:42:02.540 --> 00:42:06.180
So this ad has to do with the context of what is here.


00:42:06.180 --> 00:42:09.060
It's relevant to the content I'm already looking at.


00:42:09.060 --> 00:42:10.380
- Good old fashioned. - It would not be nice.


00:42:10.380 --> 00:42:11.620
- Astounding.


00:42:11.620 --> 00:42:14.460
- Just like magazines and newspapers and stuff.


00:42:14.460 --> 00:42:17.300
- And it's not about finding hot singles in my local area.


00:42:17.300 --> 00:42:19.220
(laughing)


00:42:19.220 --> 00:42:20.340
- That's great.


00:42:20.340 --> 00:42:21.700
- Exactly.


00:42:21.700 --> 00:42:22.540
All right.


00:42:22.540 --> 00:42:24.580
- Cool.


00:42:24.580 --> 00:42:25.420
- Yeah, cool.


00:42:25.420 --> 00:42:29.860
Thanks, Al for joining us today and Brian as always.


00:42:29.860 --> 00:42:31.300
- Thanks for having me.


00:42:31.300 --> 00:42:32.580
- Yeah, you bet.


00:42:32.580 --> 00:42:33.740
Thanks everyone for listening.


00:42:33.740 --> 00:42:34.580
See y'all later.


00:42:34.580 --> 00:42:44.580
[BLANK_AUDIO]

