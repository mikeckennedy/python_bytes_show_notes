WEBVTT

00:00:00.001 --> 00:00:03.640
- Hello, everyone.

00:00:03.640 --> 00:00:04.680
Hello, Brian.

00:00:04.680 --> 00:00:06.000
- Hello.

00:00:06.000 --> 00:00:09.900
- Thank you everyone being here on the YouTube live stream.

00:00:09.900 --> 00:00:13.160
And if you're watching later, thanks for watching back

00:00:13.160 --> 00:00:14.480
as always.

00:00:14.480 --> 00:00:15.920
So we appreciate that.

00:00:15.920 --> 00:00:18.840
And Brian, you ready to kick off another fine

00:00:18.840 --> 00:00:23.840
around a highly dense, high density version of Python Bytes.

00:00:23.840 --> 00:00:25.560
Many times. - Yes.

00:00:25.560 --> 00:00:26.380
- Let's do it.

00:00:26.380 --> 00:00:29.200
All right.

00:00:29.200 --> 00:00:30.040
Another day.

00:00:30.040 --> 00:00:31.360
Okay.

00:00:31.360 --> 00:00:33.320
Hello and welcome to Python Bytes,

00:00:33.320 --> 00:00:35.280
where we deliver Python news and headlines

00:00:35.280 --> 00:00:36.600
directly to your earbuds.

00:00:36.600 --> 00:00:41.600
This is episode 364, recorded December 12th, 2021.

00:00:41.600 --> 00:00:44.060
I'm Michael Kennedy.

00:00:44.060 --> 00:00:47.760
- 2023, but I'm Brian Okken.

00:00:47.760 --> 00:00:49.080
- 2023.

00:00:49.080 --> 00:00:51.880
And you are Brian Okken.

00:00:51.880 --> 00:00:54.640
And this episode is brought to you by all the things

00:00:54.640 --> 00:00:56.280
that we're doing that many of you support

00:00:56.280 --> 00:00:57.440
and we really appreciate that.

00:00:57.440 --> 00:01:02.040
Courses over at Talk Python, mine, Brian's, other folks,

00:01:02.040 --> 00:01:05.480
the complete pytest course over at Brian's site,

00:01:05.480 --> 00:01:09.080
Patreon supporters, connect with us on Fosted On,

00:01:09.080 --> 00:01:14.080
we're all over there, including the podcasts.

00:01:14.080 --> 00:01:16.600
And many of you who are listening at this very moment,

00:01:16.600 --> 00:01:18.480
no, but many who are listening later may not.

00:01:18.480 --> 00:01:21.040
If you hear us say, "Hey, so-and-so said this

00:01:21.040 --> 00:01:22.160
"in the audience."

00:01:22.160 --> 00:01:23.640
If you would like to be in the audience,

00:01:23.640 --> 00:01:26.160
check out pythonbytes.fm/live.

00:01:26.160 --> 00:01:31.160
Usually Tuesdays at 11 a.m. Pacific time, just as it is now.

00:01:31.160 --> 00:01:34.620
We typically link from each show notes on the website,

00:01:34.620 --> 00:01:39.000
not as easily in the podcast player show notes,

00:01:39.000 --> 00:01:41.160
but on the website, you can get to the video version

00:01:41.160 --> 00:01:42.880
if you ever want to.

00:01:42.880 --> 00:01:45.640
Although, certainly not intended to be required.

00:01:45.640 --> 00:01:48.360
Brian, let's kick it off.

00:01:48.360 --> 00:01:52.760
- Yeah, let's talk about one of the things

00:01:52.760 --> 00:01:57.400
that is often around is,

00:01:57.400 --> 00:01:58.640
this was gonna be one of my extras,

00:01:58.640 --> 00:02:00.280
but I'll just bring it up anyway,

00:02:00.280 --> 00:02:02.960
is the advent of code.

00:02:02.960 --> 00:02:05.400
So this, we've covered this in years past,

00:02:05.400 --> 00:02:08.120
but at adventofcode.com,

00:02:08.120 --> 00:02:11.600
there are a bunch of things you can do

00:02:11.600 --> 00:02:15.360
to a programming exercise,

00:02:15.360 --> 00:02:17.160
and you can pick any language you want.

00:02:17.160 --> 00:02:20.280
And a lot of people do this, and it's so much fun.

00:02:20.280 --> 00:02:23.560
But there's other ways to do advent of code.

00:02:23.560 --> 00:02:27.200
And I really liked, I saw James Bennett

00:02:27.200 --> 00:02:31.080
is doing a Python Django advent calendar.

00:02:31.080 --> 00:02:32.800
And this is super cool.

00:02:32.800 --> 00:02:37.280
He's just decided to do a short blog post,

00:02:37.280 --> 00:02:39.600
possibly short, some not so short,

00:02:39.600 --> 00:02:42.200
blog post about Python or Django every day

00:02:42.200 --> 00:02:45.080
during the 2023 advent.

00:02:45.080 --> 00:02:46.880
And it's pretty nice.

00:02:46.880 --> 00:02:49.480
The first one is talking about enums,

00:02:49.480 --> 00:02:53.200
and just a little, I mean, it's a good reminder

00:02:53.200 --> 00:02:57.320
that Python has enums, but also you can make them nicer

00:02:57.320 --> 00:02:59.320
by making sure that you assign values,

00:02:59.320 --> 00:03:02.640
and it's easier, instead of just using enum

00:03:02.640 --> 00:03:05.400
to derive a class from enum enum.

00:03:05.400 --> 00:03:10.320
And so that they're like, you know,

00:03:10.320 --> 00:03:12.680
they're printable and stuff like that easier.

00:03:12.680 --> 00:03:13.800
The values are good.

00:03:13.800 --> 00:03:16.040
So that's good.

00:03:16.040 --> 00:03:18.480
I really loved seeing a couple of his posts

00:03:18.480 --> 00:03:19.600
were around testing.

00:03:19.600 --> 00:03:21.920
So there is, this is pretty great.

00:03:21.920 --> 00:03:25.520
This is a don't mock Python's HTTPX.

00:03:25.520 --> 00:03:30.800
And I don't, I have a plans to use HTTPX on the project,

00:03:30.800 --> 00:03:32.240
but I'm not using it right now,

00:03:32.240 --> 00:03:35.800
but I really thought this was a pretty cool little write-up.

00:03:35.800 --> 00:03:40.720
There is a discussion really about different ways

00:03:40.720 --> 00:03:45.720
you might be able to mock using your HTTPX part,

00:03:47.880 --> 00:03:49.880
but there's the obvious ways

00:03:49.880 --> 00:03:51.760
are probably not the really the best.

00:03:51.760 --> 00:03:56.160
His recommendation is to, is a couple of things,

00:03:56.160 --> 00:03:57.920
refactoring your code a little bit

00:03:57.920 --> 00:04:00.880
so that you can pass in a HTTPX client,

00:04:00.880 --> 00:04:05.480
but then also using HTTPX's built-in mock transport.

00:04:05.480 --> 00:04:09.000
I didn't know HTTPX had a mock transport in there.

00:04:09.000 --> 00:04:09.840
You're grinning.

00:04:09.840 --> 00:04:11.160
Did you already know this, or do you have an opinion?

00:04:11.160 --> 00:04:12.000
- I did not.

00:04:12.000 --> 00:04:14.200
I'm just thinking that Kim in the audience

00:04:14.200 --> 00:04:17.120
has identified the fact that HTTPX is very sensitive

00:04:17.120 --> 00:04:19.040
and we should not mock or tease it.

00:04:19.040 --> 00:04:22.120
That's why I'm laughing.

00:04:22.120 --> 00:04:22.960
- Okay, okay.

00:04:22.960 --> 00:04:27.040
- That concludes the joke segment of the podcast.

00:04:27.040 --> 00:04:28.960
No, I didn't know this actually.

00:04:28.960 --> 00:04:29.800
This is really cool.

00:04:29.800 --> 00:04:31.240
I'm all about HTTPX.

00:04:31.240 --> 00:04:34.840
It is my default go-to HTTP client these days.

00:04:34.840 --> 00:04:37.480
When you do it request-like, it's like requests,

00:04:37.480 --> 00:04:40.560
but it also has async and it's very fine.

00:04:40.560 --> 00:04:43.400
- And yeah, this mock transport is pretty neat.

00:04:43.400 --> 00:04:46.920
Anyway, it's a little over my head right now

00:04:46.920 --> 00:04:48.560
'cause I don't do this yet,

00:04:48.560 --> 00:04:51.160
but I think it's a cool thing to point out.

00:04:51.160 --> 00:04:54.360
And also, I think it's a good idea, a cool idea.

00:04:54.360 --> 00:04:58.000
I mean, a lot of people do like writing a novel in November,

00:04:58.000 --> 00:05:01.920
but writing a little blog post during Advent,

00:05:01.920 --> 00:05:03.360
that's a pretty neat idea also.

00:05:03.360 --> 00:05:04.200
So good job.

00:05:04.200 --> 00:05:06.520
- Yeah, that's a very interesting idea.

00:05:06.520 --> 00:05:08.040
I also think it's an interesting idea

00:05:08.040 --> 00:05:10.880
that library creators may decide

00:05:10.880 --> 00:05:15.040
to provide their own mock stub API

00:05:15.040 --> 00:05:16.920
rather than just forcing you to guess

00:05:16.920 --> 00:05:19.160
what the internals might need.

00:05:19.160 --> 00:05:20.680
- That's true, yeah.

00:05:20.680 --> 00:05:22.160
- Right, 'cause as a provider of the library,

00:05:22.160 --> 00:05:23.920
like, well, really, this is the thing you need.

00:05:23.920 --> 00:05:25.680
And really, there's these three things you should change,

00:05:25.680 --> 00:05:27.040
but if you call this function, we'll do that,

00:05:27.040 --> 00:05:27.880
or whatever, right?

00:05:27.880 --> 00:05:29.720
Like they just know the internals better

00:05:29.720 --> 00:05:31.240
and let them do it.

00:05:31.240 --> 00:05:35.440
- Yeah, and there's an example of having a mock transport

00:05:35.440 --> 00:05:38.160
that just returns a not found,

00:05:38.160 --> 00:05:39.720
and being able to do that

00:05:39.720 --> 00:05:43.160
without going outside of the library.

00:05:43.160 --> 00:05:45.320
I think that's a really cool idea.

00:05:45.320 --> 00:05:47.160
I mean, and we are seeing that more,

00:05:47.160 --> 00:05:49.200
more frameworks deciding,

00:05:49.200 --> 00:05:50.840
well, people are gonna have to test this.

00:05:50.840 --> 00:05:52.320
How do they do that?

00:05:52.320 --> 00:05:53.960
And I think it's a good trend.

00:05:53.960 --> 00:05:55.760
- Nice.

00:05:55.760 --> 00:05:57.240
Tony Sherman points out,

00:05:57.240 --> 00:05:59.960
saw a similar thing in Bota 3 for AWS.

00:05:59.960 --> 00:06:01.080
So very cool.

00:06:01.080 --> 00:06:02.560
- Right, okay.

00:06:02.560 --> 00:06:06.560
There's the other one that I thought is a short one

00:06:06.560 --> 00:06:10.760
is tester documentation, talking about doc test.

00:06:10.760 --> 00:06:14.880
And I love throwing stuff like this in.

00:06:14.880 --> 00:06:21.000
You have a little doc string in your code

00:06:21.000 --> 00:06:23.440
to show how it's used.

00:06:23.440 --> 00:06:24.480
Why not test those?

00:06:24.480 --> 00:06:25.840
So you can use either doc test,

00:06:25.840 --> 00:06:30.000
or pytest can run your doc test tests as well.

00:06:30.000 --> 00:06:31.800
- Because of course it can.

00:06:31.800 --> 00:06:32.640
- Yeah.

00:06:32.640 --> 00:06:33.800
- It does all the things.

00:06:33.800 --> 00:06:35.680
Awesome. - All right.

00:06:35.680 --> 00:06:37.080
What you got?

00:06:37.080 --> 00:06:39.160
- I'm gonna drop into this next one here.

00:06:39.160 --> 00:06:41.480
This next one is DropBase.

00:06:41.480 --> 00:06:45.040
Now this, from what I can tell,

00:06:45.040 --> 00:06:47.400
right at the top, it has a pricing.

00:06:47.400 --> 00:06:51.320
So it's not a free type of thing for you.

00:06:51.320 --> 00:06:54.120
However, I think it's interesting enough

00:06:54.120 --> 00:06:55.040
to talk about it anyway.

00:06:55.040 --> 00:06:57.800
Not a sponsorship, just something Michael thinks cool.

00:06:57.800 --> 00:07:01.760
So it says, build internal tools with just Python.

00:07:01.760 --> 00:07:04.400
So you can build, it says full stack.

00:07:04.400 --> 00:07:07.000
Let's call them forms over data web apps

00:07:07.000 --> 00:07:08.160
for your internal teams.

00:07:08.160 --> 00:07:09.600
Import existing Python scripts

00:07:09.600 --> 00:07:11.240
and quickly build layered UIs

00:07:11.240 --> 00:07:13.000
with gradient permissions.

00:07:13.000 --> 00:07:15.560
So when you look at the thing itself,

00:07:15.560 --> 00:07:17.440
you're like, huh, I don't really know what this means

00:07:17.440 --> 00:07:18.960
or if this is interesting.

00:07:18.960 --> 00:07:22.160
Like they don't have a bunch of great screenshots

00:07:22.160 --> 00:07:23.240
or whatever on their homepage.

00:07:23.240 --> 00:07:27.840
So what you'll see is like, you can go write a query.

00:07:27.840 --> 00:07:29.840
It's all sort of starts from a database,

00:07:29.840 --> 00:07:32.960
which is why I'm calling it forms over data.

00:07:32.960 --> 00:07:33.800
Okay.

00:07:33.800 --> 00:07:35.040
And that is like a user interface

00:07:35.040 --> 00:07:37.280
that lets you basically access the database

00:07:37.280 --> 00:07:39.920
with a little bit of rules and such.

00:07:39.920 --> 00:07:43.120
So the idea, if I recall correctly,

00:07:43.120 --> 00:07:44.640
I looked at this last week is what you do

00:07:44.640 --> 00:07:48.240
is you write a SQL query against a database

00:07:48.240 --> 00:07:50.480
like Postgres or something, okay?

00:07:50.480 --> 00:07:51.880
And that will give you a result

00:07:51.880 --> 00:07:56.680
that looks kind of like Excel-ish,

00:07:56.680 --> 00:07:58.000
static, doesn't do anything,

00:07:58.000 --> 00:07:59.040
but then you can click and say,

00:07:59.040 --> 00:08:04.040
make this a smart table type thing, okay?

00:08:04.120 --> 00:08:08.000
So then it becomes sortable, editable and so on, right?

00:08:08.000 --> 00:08:10.840
So all the results, you can just turn that into a grid

00:08:10.840 --> 00:08:13.840
that people can edit and it goes back to the database.

00:08:13.840 --> 00:08:17.920
You can create a so-called master detail type of view.

00:08:17.920 --> 00:08:21.000
So in the example on the homepage, they have a workspaces

00:08:21.000 --> 00:08:24.400
and then each user belongs to a particular,

00:08:24.400 --> 00:08:26.240
there's a bunch of users that belong to each workspace.

00:08:26.240 --> 00:08:31.160
So you can do a relationship where you say,

00:08:31.160 --> 00:08:33.560
I'm gonna, if you click on one part of the screen,

00:08:33.560 --> 00:08:35.600
fill the other part of the screen with say,

00:08:35.600 --> 00:08:37.040
the users of that workspace.

00:08:37.040 --> 00:08:41.440
So if you like select the workspace in the top grid,

00:08:41.440 --> 00:08:43.520
it'll like fill it out all the users at the bottom.

00:08:43.520 --> 00:08:46.120
You turn that into a smart thing that you can edit it

00:08:46.120 --> 00:08:50.400
and you can do things like click a button to whatever.

00:08:50.400 --> 00:08:51.960
In their example, it says,

00:08:51.960 --> 00:08:55.080
if you assign somebody to a workspace or change their role,

00:08:55.080 --> 00:08:57.080
you can click a button to send them an email,

00:08:57.080 --> 00:08:59.800
like their new status in that workspace.

00:08:59.800 --> 00:09:02.880
That code is written in Python, right?

00:09:02.880 --> 00:09:06.440
And you can plug in functions behind all this stuff

00:09:06.440 --> 00:09:08.840
and all that code there is written in Python.

00:09:08.840 --> 00:09:13.440
So you want kind of a real quick way to,

00:09:13.440 --> 00:09:15.920
if you've got a little SQL skill, a little Python skill,

00:09:15.920 --> 00:09:18.480
build this cascading UI type thing.

00:09:18.480 --> 00:09:20.120
There you go, it's pretty cool.

00:09:20.120 --> 00:09:21.960
- That's pretty neat.

00:09:21.960 --> 00:09:23.000
- Yeah, pretty neat.

00:09:23.000 --> 00:09:27.280
And they also have some widgets and stuff, I believe,

00:09:27.280 --> 00:09:30.440
like sidebar, search bars, et cetera.

00:09:31.480 --> 00:09:33.920
Yeah, then you write a bunch of that in Python

00:09:33.920 --> 00:09:36.240
and it's super cool.

00:09:36.240 --> 00:09:39.440
So I think that could be quite useful for folks

00:09:39.440 --> 00:09:41.600
if they wanna go and check that out.

00:09:41.600 --> 00:09:43.960
And you're not trying to build

00:09:43.960 --> 00:09:46.320
some new super fancy looking app.

00:09:46.320 --> 00:09:48.200
You just like, I just need to provide

00:09:48.200 --> 00:09:50.200
kind of this relationship stuff

00:09:50.200 --> 00:09:52.920
and a little bit of Python to do a little bit of work

00:09:52.920 --> 00:09:55.240
on my UI so people can check that out.

00:09:55.240 --> 00:09:57.880
I think there's a free tier, let me look.

00:09:59.360 --> 00:10:02.560
Yeah, there's a free tier that has up to three users.

00:10:02.560 --> 00:10:05.000
And then for teams, like if you want teams,

00:10:05.000 --> 00:10:05.840
you can pay more.

00:10:05.840 --> 00:10:06.960
So again, not an advertisement,

00:10:06.960 --> 00:10:10.600
but UIs built with Python,

00:10:10.600 --> 00:10:12.000
even though we go on and on about them,

00:10:12.000 --> 00:10:13.760
they're often a rarity.

00:10:13.760 --> 00:10:15.480
So when we get a chance to talk about them,

00:10:15.480 --> 00:10:16.720
it's kind of cool.

00:10:16.720 --> 00:10:18.320
- Yeah, that's neat.

00:10:18.320 --> 00:10:21.920
- Yeah, and semi-related sort of,

00:10:21.920 --> 00:10:23.600
I'm going to have Samuel.

00:10:23.600 --> 00:10:26.000
Remember last week we talked about Fast UI?

00:10:26.000 --> 00:10:26.840
- Yeah.

00:10:26.840 --> 00:10:29.520
- Samuel Coleman from Pydantic reached out and said,

00:10:29.520 --> 00:10:31.800
"Hey, we should talk more about this.

00:10:31.800 --> 00:10:32.960
"It's a brand new thing we're trying

00:10:32.960 --> 00:10:34.680
"to do interesting things with."

00:10:34.680 --> 00:10:37.000
So I'm going to have him on Talk Python

00:10:37.000 --> 00:10:38.400
technically next week,

00:10:38.400 --> 00:10:41.240
but it's going to be recorded next week

00:10:41.240 --> 00:10:42.760
and then released later.

00:10:42.760 --> 00:10:43.600
So anyway.

00:10:43.600 --> 00:10:44.720
- Like in April or something like that.

00:10:44.720 --> 00:10:46.360
- Yeah, something like that, right?

00:10:46.360 --> 00:10:48.320
Something, probably January.

00:10:48.320 --> 00:10:49.160
- Okay.

00:10:49.160 --> 00:10:51.720
- Anyway, more on that over there,

00:10:51.720 --> 00:10:53.840
but drop base people and check that out.

00:10:55.520 --> 00:10:56.680
- And if people do, it'd be cool

00:10:56.680 --> 00:10:58.080
if they could shoot us a note

00:10:58.080 --> 00:11:01.600
and see if it turns out to be cool or not.

00:11:01.600 --> 00:11:03.960
- Yeah, I would love to hear back.

00:11:03.960 --> 00:11:05.280
Yeah.

00:11:05.280 --> 00:11:07.560
So maybe Kim could save some time

00:11:07.560 --> 00:11:10.600
because Kim says, "The description of this tool

00:11:10.600 --> 00:11:12.280
"pretty much describes my job."

00:11:12.280 --> 00:11:14.920
- Yep, very cool.

00:11:14.920 --> 00:11:17.920
- Anyway, I'd like to talk about

00:11:17.920 --> 00:11:23.400
the structural pattern matching a little bit.

00:11:23.400 --> 00:11:25.720
So we have covered structural pattern matching

00:11:25.720 --> 00:11:27.600
and talked about it before this came out,

00:11:27.600 --> 00:11:29.320
when in, I can't remember,

00:11:29.320 --> 00:11:33.000
which 3.10 brought us structural pattern matching.

00:11:33.000 --> 00:11:34.440
Way back in 3.10.

00:11:34.440 --> 00:11:38.240
- How young were we then, Brian?

00:11:38.240 --> 00:11:39.080
So young.

00:11:39.080 --> 00:11:40.040
- It was a different world.

00:11:40.040 --> 00:11:44.720
Anyway, the tutorial's pretty good.

00:11:44.720 --> 00:11:46.160
So this is from Ned Batchelder,

00:11:46.160 --> 00:11:48.120
real world match case.

00:11:48.120 --> 00:11:52.040
So he comments that the tutorial's pretty good,

00:11:52.040 --> 00:11:52.880
and it is.

00:11:52.880 --> 00:11:57.880
However, the example is a little bit of a toy example,

00:11:57.880 --> 00:12:03.200
and it's nice to see this really in action.

00:12:03.200 --> 00:12:06.400
So here's a real world use case.

00:12:06.400 --> 00:12:10.400
Ned's got a GitHub bot installed as a webhook,

00:12:10.400 --> 00:12:11.880
and it returns back.

00:12:11.880 --> 00:12:14.400
So every time something happens on a repo,

00:12:14.400 --> 00:12:17.280
it sends back a payload of JSON data to the bot,

00:12:17.280 --> 00:12:19.920
and the bot's gotta figure out what to do with it.

00:12:19.920 --> 00:12:24.920
And so it turns that JSON into a nested set of dictionaries,

00:12:24.920 --> 00:12:30.280
and anybody that's dealt with JSON return data,

00:12:30.280 --> 00:12:31.400
that's what you get.

00:12:31.400 --> 00:12:34.000
You get a bunch of nested dictionaries.

00:12:34.000 --> 00:12:35.120
So how do you deal with that?

00:12:35.120 --> 00:12:40.120
Well, this example shows that the match case,

00:12:40.120 --> 00:12:45.560
or the structural pattern matching match case

00:12:45.560 --> 00:12:47.240
works really great to match this.

00:12:47.240 --> 00:12:51.720
So this example looks for events that happen,

00:12:51.720 --> 00:12:53.200
and for each event,

00:12:53.200 --> 00:12:56.160
they matches it to look to see if there's an issue

00:12:56.160 --> 00:12:57.000
in a comment.

00:12:57.000 --> 00:13:01.560
And so one of the cases is looking at the content of that.

00:13:01.560 --> 00:13:03.440
So you've got these nested dictionaries,

00:13:03.440 --> 00:13:06.400
and you can dig deep into the nested.

00:13:06.400 --> 00:13:08.440
Here, it's just one layer down,

00:13:08.440 --> 00:13:10.180
a couple layers of nested dictionaries,

00:13:10.180 --> 00:13:12.640
but still you could go deeper if you wanted to,

00:13:12.640 --> 00:13:14.400
to match that.

00:13:14.400 --> 00:13:16.440
And then not only matching the dictionary

00:13:16.440 --> 00:13:19.080
and pulling out bits of the data,

00:13:19.080 --> 00:13:21.960
like he's looking at closed ad and created ad

00:13:21.960 --> 00:13:24.680
and comparing those, but using a comparison.

00:13:24.680 --> 00:13:27.160
So you grab the stuff and then say,

00:13:27.160 --> 00:13:30.160
if two things are equal,

00:13:30.160 --> 00:13:35.160
and in another example of if the login is the bot name,

00:13:35.160 --> 00:13:38.640
that's different.

00:13:38.640 --> 00:13:42.620
I don't wanna do events that are based on my own actions.

00:13:42.620 --> 00:13:45.480
Do something else.

00:13:45.480 --> 00:13:47.200
But then proceed with it.

00:13:47.200 --> 00:13:49.080
So kind of a couple of cases

00:13:49.080 --> 00:13:50.580
where he doesn't wanna do anything,

00:13:50.580 --> 00:13:53.600
but other cases where some action is required.

00:13:53.600 --> 00:13:57.360
So these are, is a pretty cool use case of,

00:13:57.360 --> 00:13:59.720
I just wanted to highlight that.

00:13:59.720 --> 00:14:02.720
It's really cool use case of using structural pattern

00:14:02.720 --> 00:14:05.880
matching to make some code that might be complicated

00:14:05.880 --> 00:14:07.620
other ways, a little simpler.

00:14:07.620 --> 00:14:09.680
So this isn't too bad to read.

00:14:09.680 --> 00:14:12.980
- So much more interesting than the normal switch

00:14:12.980 --> 00:14:15.360
type statements I write with match these days.

00:14:15.360 --> 00:14:16.280
- Yeah.

00:14:16.280 --> 00:14:19.300
- It's like, we're looking for multiple things

00:14:19.300 --> 00:14:24.300
within the document and then applying a conditional

00:14:24.300 --> 00:14:28.380
on part of the matched things and it's pretty wild.

00:14:28.380 --> 00:14:32.400
- Yeah, I'm actually thinking about this in a,

00:14:32.400 --> 00:14:36.400
I've got sets of data where for each element,

00:14:36.400 --> 00:14:39.640
I'm look, yeah, it's a bunch of nested if clauses

00:14:39.640 --> 00:14:42.700
to say if this is true, if that's true

00:14:42.700 --> 00:14:46.100
and something like this might work really pretty good.

00:14:46.100 --> 00:14:49.620
- Indeed, I'm gonna try to make that the conditions here,

00:14:49.620 --> 00:14:53.520
like the chapter art for this chapter.

00:14:53.520 --> 00:14:55.960
We have chapter items for all their topics, right?

00:14:55.960 --> 00:14:57.140
People can use that throughout the show.

00:14:57.140 --> 00:14:59.440
So yeah, very neat.

00:14:59.440 --> 00:15:03.200
Look nice to look down at your podcast player before now.

00:15:03.200 --> 00:15:06.660
- I love that we don't mention that a lot,

00:15:06.660 --> 00:15:10.260
but a lot of people do appreciate the chapters.

00:15:10.260 --> 00:15:12.620
So we jump around, we do multiple topics

00:15:12.620 --> 00:15:14.820
and you can use the chapters to get to them.

00:15:14.820 --> 00:15:17.260
- Absolutely, or use them as reference.

00:15:17.260 --> 00:15:19.220
All right, speaking of reference, Brian,

00:15:19.220 --> 00:15:23.060
I have extra, extra, extra, extra, extra times 10.

00:15:23.060 --> 00:15:23.900
- Okay.

00:15:23.900 --> 00:15:25.600
- I know you've got a lot of things as well.

00:15:25.600 --> 00:15:27.700
So I have so many extras that my next topic

00:15:27.700 --> 00:15:29.540
is the extra, extra, extra,

00:15:29.540 --> 00:15:31.500
rather than having some follow-up stuff.

00:15:31.500 --> 00:15:32.400
Ready for it?

00:15:32.400 --> 00:15:33.700
- Yeah.

00:15:33.700 --> 00:15:36.380
- All right, follow-up number one.

00:15:36.380 --> 00:15:39.020
We talked about switching DNS

00:15:39.020 --> 00:15:41.520
and how much of a pain that was last time

00:15:41.520 --> 00:15:44.700
and all the hassles that we could run into.

00:15:44.700 --> 00:15:45.780
And it occurred to me,

00:15:45.780 --> 00:15:47.380
and there's some people out there like,

00:15:47.380 --> 00:15:50.660
Michael, obviously we do this all the time.

00:15:50.660 --> 00:15:52.340
I suspect many people don't though.

00:15:52.340 --> 00:15:57.340
It occurred to me that there is your domain registrar,

00:15:57.340 --> 00:16:02.740
like GoDaddy, Hover, whatever, Namecheap.

00:16:02.740 --> 00:16:05.460
And they often have all the DNS settings for you.

00:16:05.460 --> 00:16:08.180
But you can create, you can use,

00:16:08.180 --> 00:16:11.740
there are services that are way better, it turns out,

00:16:11.740 --> 00:16:14.000
that host your actual DNS settings

00:16:14.000 --> 00:16:15.800
that have nothing to do with your register.

00:16:15.800 --> 00:16:17.160
All you gotta do is just go to your register

00:16:17.160 --> 00:16:18.920
and say, use this.

00:16:18.920 --> 00:16:23.160
So I use bunny.net for delivering the podcasts,

00:16:23.160 --> 00:16:24.600
or the courses, all sorts of things.

00:16:24.600 --> 00:16:26.680
And they have a DNS section that is super cool.

00:16:26.680 --> 00:16:27.920
So check this out, Brian.

00:16:27.920 --> 00:16:32.080
We've done, in the last week I set this up,

00:16:32.080 --> 00:16:34.600
we've done over half a million DNS queries,

00:16:34.600 --> 00:16:36.280
not requests to the page, but like,

00:16:36.280 --> 00:16:37.760
hey, tell me who this is.

00:16:37.760 --> 00:16:40.780
And we'll remember that for a while for your ISP.

00:16:40.780 --> 00:16:42.440
That's a lot of DNS queries.

00:16:42.440 --> 00:16:45.460
A lot of people wanna know what pythonbytes.fm is.

00:16:45.460 --> 00:16:46.580
That's exciting.

00:16:46.580 --> 00:16:48.300
But why is this so, why am I so excited?

00:16:48.300 --> 00:16:50.740
Like, look how nice and readable this is

00:16:50.740 --> 00:16:53.140
for people who are watching.

00:16:53.140 --> 00:16:54.500
Fear not, it's like, it'll create,

00:16:54.500 --> 00:16:58.900
if you have a TXT record, it'll like create nested sections,

00:16:58.900 --> 00:17:01.460
go all of these records apply to this domain

00:17:01.460 --> 00:17:04.060
or that domain, and so on.

00:17:04.060 --> 00:17:05.620
And then look over here at,

00:17:05.620 --> 00:17:07.220
you can edit all these here, but check this out.

00:17:07.220 --> 00:17:09.640
If I wanna say like this, the CDN setting,

00:17:09.640 --> 00:17:11.520
maybe I'm working on it.

00:17:11.520 --> 00:17:13.280
And you know what's a super hassle with DNS?

00:17:13.280 --> 00:17:16.640
Like I make a change, please wait a couple hours

00:17:16.640 --> 00:17:17.640
and you can try it.

00:17:17.640 --> 00:17:19.960
If it doesn't work, it will be broken for a few hours

00:17:19.960 --> 00:17:21.280
and then you can fix it, right?

00:17:21.280 --> 00:17:23.000
What a hassle.

00:17:23.000 --> 00:17:24.860
'Cause I migrated 25 domains.

00:17:24.860 --> 00:17:28.160
I know I messed some of them up, not badly, but a little.

00:17:28.160 --> 00:17:29.120
So check this out.

00:17:29.120 --> 00:17:32.200
If you click here, you've got your one day,

00:17:32.200 --> 00:17:34.200
one hour typical time to live.

00:17:34.200 --> 00:17:36.400
It goes down to every 15 seconds.

00:17:36.400 --> 00:17:39.060
So if you're like working on something

00:17:39.060 --> 00:17:41.660
and you want to be able to like try,

00:17:41.660 --> 00:17:43.560
oh no, go ahead to quick, switch it back.

00:17:43.560 --> 00:17:45.340
Just set it to that for a while.

00:17:45.340 --> 00:17:46.360
Isn't that awesome?

00:17:46.360 --> 00:17:47.200
- Yeah.

00:17:47.200 --> 00:17:50.200
- The other thing you can do with this is you can write,

00:17:50.200 --> 00:17:52.380
unfortunately JavaScript, but you can write JavaScript

00:17:52.380 --> 00:17:55.020
that runs on every DNS request.

00:17:55.020 --> 00:17:57.740
So you can say things like, I know you asked what this is,

00:17:57.740 --> 00:17:59.080
but you're in Asia.

00:17:59.080 --> 00:18:00.860
So we're gonna tell you that it's this server

00:18:00.860 --> 00:18:01.780
rather than that server.

00:18:01.780 --> 00:18:03.980
So you get a faster local machine

00:18:03.980 --> 00:18:05.960
and all sorts of interesting stuff here.

00:18:05.960 --> 00:18:07.960
This is free.

00:18:07.960 --> 00:18:10.920
- What?

00:18:10.920 --> 00:18:14.900
- This is free for the first 20 million DNS lookups.

00:18:14.900 --> 00:18:17.280
And then it's like 10 cents per million.

00:18:17.280 --> 00:18:18.820
So for us, right, we're gonna do,

00:18:18.820 --> 00:18:21.340
it looks like 2 million free, right?

00:18:21.340 --> 00:18:23.100
We can get be 10 times more popular

00:18:23.100 --> 00:18:24.420
before we pay a few cents.

00:18:24.420 --> 00:18:29.260
So the reason this is cool is you can set this up

00:18:29.260 --> 00:18:30.940
and then switch your domain.

00:18:30.940 --> 00:18:32.660
And then as soon as you just change the name,

00:18:32.660 --> 00:18:33.820
you can get it all dialed in

00:18:33.820 --> 00:18:35.060
and you don't have to have this kind of like

00:18:35.060 --> 00:18:36.300
awkward downtime in the middle.

00:18:36.300 --> 00:18:38.320
So people can check this out.

00:18:38.320 --> 00:18:39.160
There's other ones.

00:18:39.160 --> 00:18:40.620
CloudFlare has something similar.

00:18:40.620 --> 00:18:41.820
DigitalOcean has something similar,

00:18:41.820 --> 00:18:44.340
but this one is super, super neat.

00:18:44.340 --> 00:18:45.520
- That's pretty cool.

00:18:45.520 --> 00:18:46.780
- Yeah, and Tony says similar

00:18:46.780 --> 00:18:47.700
what you can do in CloudFlare.

00:18:47.700 --> 00:18:49.200
Yeah, they're both CDN providers.

00:18:49.200 --> 00:18:51.340
They both have like similar stories.

00:18:51.340 --> 00:18:54.660
Okay, I'm gonna go faster now 'cause I have more.

00:18:54.660 --> 00:18:57.700
I wrote a cool essay,

00:18:57.700 --> 00:19:03.380
blog post type thing that shows you how to use

00:19:03.380 --> 00:19:06.100
warp to hide all your terminal secrets.

00:19:06.100 --> 00:19:06.940
Look at this Brian.

00:19:06.940 --> 00:19:08.100
So here, welcome to Ubuntu.

00:19:08.100 --> 00:19:09.820
I'm not gonna say what version.

00:19:09.820 --> 00:19:11.780
And here's your IP addresses.

00:19:11.780 --> 00:19:12.780
We're not gonna say what those are,

00:19:12.780 --> 00:19:15.940
but so if you're doing presentations that somehow involve

00:19:15.940 --> 00:19:21.820
with terminal stuff that might accidentally reveal

00:19:21.820 --> 00:19:24.220
something like what is an IP address that you shouldn't have

00:19:24.220 --> 00:19:26.420
or what is an API key or something.

00:19:26.420 --> 00:19:29.220
If you use warp, all you gotta do is check a box and say,

00:19:29.220 --> 00:19:30.580
obscure all my secrets.

00:19:30.580 --> 00:19:32.740
And now your presentations are safer.

00:19:32.740 --> 00:19:33.660
Isn't that cool?

00:19:33.660 --> 00:19:35.060
- Yeah, that's pretty neat.

00:19:35.060 --> 00:19:38.460
- Yeah, so talked about warp before, but that is new.

00:19:38.460 --> 00:19:41.020
I think it's a new feature, but anyways, cool.

00:19:41.020 --> 00:19:43.740
We also have a supporting developer in residence.

00:19:43.740 --> 00:19:45.700
Lukas Langa says, welcome.

00:19:45.700 --> 00:19:50.700
We have Peter Victorin now as a supporting developer

00:19:50.700 --> 00:19:53.140
in residence working with Lukas.

00:19:53.140 --> 00:19:57.660
So we now have two times the help over there

00:19:57.660 --> 00:20:00.140
'cause Lukas has been so successful

00:20:00.140 --> 00:20:01.860
keeping Python moving forward.

00:20:01.860 --> 00:20:02.980
They're now getting more folks.

00:20:02.980 --> 00:20:04.420
So that's pretty awesome, right?

00:20:04.420 --> 00:20:07.020
- Yeah, they successfully cloned him.

00:20:07.020 --> 00:20:08.060
- Yeah, they did.

00:20:08.060 --> 00:20:08.980
He's now an AI.

00:20:08.980 --> 00:20:09.820
No, just kidding.

00:20:09.820 --> 00:20:13.460
Also that was sponsored by Bloomberg.

00:20:13.460 --> 00:20:15.980
So shout out to Bloomberg for being excellent.

00:20:15.980 --> 00:20:22.100
Joe sent us two things that are pretty funny.

00:20:22.100 --> 00:20:24.340
They're almost worthy of like a joke type of thing,

00:20:24.340 --> 00:20:26.140
but I thought I would just share them.

00:20:26.140 --> 00:20:31.140
So he decided to embody various songs through Python.

00:20:31.980 --> 00:20:34.460
So we have the "Bohemian Rhapsody"

00:20:34.460 --> 00:20:38.100
and we have "Money for Nothing" by Dire Straits.

00:20:38.100 --> 00:20:41.500
So remember it's like, I just want my MTV, right?

00:20:41.500 --> 00:20:43.380
Money for nothing, all that.

00:20:43.380 --> 00:20:45.540
So they've got the class MTV.

00:20:45.540 --> 00:20:48.820
I'm linking to the show notes, of course you can pull up.

00:20:48.820 --> 00:20:51.260
Starts out with self.want equals nothing,

00:20:51.260 --> 00:20:53.180
print money for nothing.

00:20:53.180 --> 00:20:58.180
Look at what, and then it goes, all I want is my MTV.

00:20:58.180 --> 00:21:00.300
And it sort of cycles through that.

00:21:00.300 --> 00:21:02.900
Look at those yo-yos, that ain't working.

00:21:02.900 --> 00:21:05.980
Maybe get a blister on your little finger, right?

00:21:05.980 --> 00:21:09.740
It's got like working false, do true, money cost is zero.

00:21:09.740 --> 00:21:14.020
Guy's dumb, little blister, you know,

00:21:14.020 --> 00:21:15.380
guy's dumb is false, right?

00:21:15.380 --> 00:21:20.300
So if you kind of want to enjoy this musical melody here.

00:21:20.300 --> 00:21:21.540
- Does it run?

00:21:21.540 --> 00:21:23.020
I'll have to try it out.

00:21:23.020 --> 00:21:25.100
- I'm sure that it does run, yeah.

00:21:25.100 --> 00:21:30.100
So well, OS dot system, install microwave dash ovens.

00:21:30.620 --> 00:21:31.460
- Oh yeah.

00:21:31.460 --> 00:21:35.020
- Echo, I mean, you know, custom kitchen deliveries,

00:21:35.020 --> 00:21:37.220
refrigerators, moving color TVs.

00:21:37.220 --> 00:21:39.580
I don't know if I'd run it actually,

00:21:39.580 --> 00:21:42.660
but there's a similar one for Bohemian Rhapsody.

00:21:42.660 --> 00:21:43.780
It's pretty funny.

00:21:43.780 --> 00:21:45.340
So people can check that out.

00:21:45.340 --> 00:21:48.540
- Don't you regularly just download random code and run it?

00:21:48.540 --> 00:21:50.860
- Well, when I see OS move, maybe not.

00:21:50.860 --> 00:21:55.820
By Cascades is coming to Seattle in 2024.

00:21:55.820 --> 00:21:57.500
Their call for proposals is out,

00:21:57.500 --> 00:21:59.380
so people can check that out.

00:21:59.380 --> 00:22:00.340
It's a fun conference.

00:22:00.340 --> 00:22:01.540
If you're in the Pacific Northwest

00:22:01.540 --> 00:22:03.620
or want to go to the Pacific Northwest,

00:22:03.620 --> 00:22:08.620
you can see the little banner wrapper thing, CFP is open.

00:22:08.620 --> 00:22:09.980
Okay.

00:22:09.980 --> 00:22:14.260
So some interesting nomenclature coming for us

00:22:14.260 --> 00:22:17.100
in the world is free threaded Python.

00:22:17.100 --> 00:22:18.420
Have you heard this?

00:22:18.420 --> 00:22:20.100
Free threaded Python?

00:22:20.100 --> 00:22:22.420
- I didn't know we were charging for threads.

00:22:22.420 --> 00:22:26.380
- I know, this one is like, it's a total freemium model.

00:22:26.380 --> 00:22:31.140
So with the no-gil work, with the sub-interpreter work,

00:22:31.140 --> 00:22:32.300
all these different ways

00:22:32.300 --> 00:22:35.160
in which Python runs more concurrently,

00:22:35.160 --> 00:22:38.100
especially the no-gil stuff,

00:22:38.100 --> 00:22:42.020
there's a plan to basically call it free threaded Python,

00:22:42.020 --> 00:22:44.660
not no-gil, because no-gil is how it's free threaded,

00:22:44.660 --> 00:22:46.460
but free threaded is the point.

00:22:46.460 --> 00:22:51.460
You know, it's like, I have a gas exploding mobile,

00:22:51.460 --> 00:22:53.140
like I have a thing that drives.

00:22:53.140 --> 00:22:54.140
I don't care about the driving,

00:22:54.140 --> 00:22:55.340
not the gas exploding, right?

00:22:55.340 --> 00:22:56.740
Similar type thing here.

00:22:56.740 --> 00:23:00.860
So Seth Michael Larson points out

00:23:00.860 --> 00:23:03.380
that this has been blocked on PyPI.

00:23:03.380 --> 00:23:05.900
To make way for, this is interesting,

00:23:05.900 --> 00:23:08.680
redistributions of the Python runtime

00:23:08.680 --> 00:23:12.360
compiled with the free threaded mode, i.e. no-gil.

00:23:12.360 --> 00:23:15.140
So one, we're calling it free threaded Python.

00:23:15.140 --> 00:23:18.740
Two, you might be able to pip install Python.

00:23:18.740 --> 00:23:19.580
I don't know.

00:23:19.580 --> 00:23:24.380
Okay, so that's that one.

00:23:25.340 --> 00:23:29.780
Next, there's a very interesting letter,

00:23:29.780 --> 00:23:31.940
open letter to the Python South for a foundation

00:23:31.940 --> 00:23:34.700
from Python Africa.

00:23:34.700 --> 00:23:36.660
And apparently there's been a lot of,

00:23:36.660 --> 00:23:40.260
I don't know what the right way to point it,

00:23:40.260 --> 00:23:44.740
but it is basically not that great a support

00:23:44.740 --> 00:23:46.780
for Python in Africa.

00:23:46.780 --> 00:23:49.460
I just wanna sort of put this out there.

00:23:49.460 --> 00:23:50.300
They wrote it.

00:23:50.300 --> 00:23:52.540
People can check it out and read it,

00:23:52.540 --> 00:23:56.780
but just would like to see better support

00:23:56.780 --> 00:23:58.300
for reaching out to folks in Africa

00:23:58.300 --> 00:24:00.620
and have the PSF maybe be a little bit

00:24:00.620 --> 00:24:01.860
better supporter for it.

00:24:01.860 --> 00:24:04.500
There's been a lot of contention around it.

00:24:04.500 --> 00:24:05.820
So check that out, people.

00:24:05.820 --> 00:24:07.220
It's-

00:24:07.220 --> 00:24:08.220
- Okay.

00:24:08.220 --> 00:24:09.100
- Okay.

00:24:09.100 --> 00:24:11.380
And then we have, oh yeah.

00:24:11.380 --> 00:24:13.540
It's not super congruent with the mission

00:24:13.540 --> 00:24:16.660
of the PSF on a couple of levels.

00:24:16.660 --> 00:24:21.660
On one, PSF is there to promote the Python language

00:24:22.060 --> 00:24:24.700
and this is a lot of like,

00:24:24.700 --> 00:24:26.340
we need you to make this social change

00:24:26.340 --> 00:24:29.060
or you're not going to have a conference in Africa.

00:24:29.060 --> 00:24:33.140
Seems a little incongruent with the mission

00:24:33.140 --> 00:24:34.940
about supporting Python.

00:24:34.940 --> 00:24:35.780
I don't know.

00:24:35.780 --> 00:24:38.220
Python, moving on.

00:24:38.220 --> 00:24:43.220
Python 3.12.1, the first major update of 3.12 is out.

00:24:43.220 --> 00:24:46.860
So people can check that out.

00:24:46.860 --> 00:24:49.620
It contains many new features and optimizations

00:24:49.620 --> 00:24:53.060
with over more than 400 bug fixes.

00:24:53.060 --> 00:24:55.280
So we don't like bugs in our code and 400 of them,

00:24:55.280 --> 00:24:57.180
we definitely don't want that many.

00:24:57.180 --> 00:24:58.020
- Yeah.

00:24:58.020 --> 00:25:02.180
- Along with that came the 3.11.7 release.

00:25:02.180 --> 00:25:04.340
Okay.

00:25:04.340 --> 00:25:05.900
- All right.

00:25:05.900 --> 00:25:07.420
Update your Pythons.

00:25:07.420 --> 00:25:08.660
- Update your Pythons.

00:25:08.660 --> 00:25:10.220
Everybody gets their new Pythons.

00:25:10.220 --> 00:25:11.060
Final one.

00:25:11.060 --> 00:25:14.500
And this one could be a joke, but it's just too visual.

00:25:14.500 --> 00:25:15.700
It's really awesome.

00:25:15.700 --> 00:25:19.500
Let me make sure I credit this one correctly.

00:25:19.500 --> 00:25:24.300
So Johannes Lipman, when he heard you talk

00:25:24.300 --> 00:25:27.020
about the Obfuscated Python Code Contest,

00:25:27.020 --> 00:25:29.540
this is the first international one, by the way.

00:25:29.540 --> 00:25:30.500
- Okay.

00:25:30.500 --> 00:25:31.340
- Okay.

00:25:31.340 --> 00:25:34.100
The Obfuscated Python Code Contest,

00:25:34.100 --> 00:25:35.700
he's like, I gotta be part of this.

00:25:35.700 --> 00:25:38.380
So not only was he part of it, but he won.

00:25:38.380 --> 00:25:42.020
He won the most introspective of them all.

00:25:42.020 --> 00:25:43.500
- It's beautiful too.

00:25:43.500 --> 00:25:44.340
- Check this out.

00:25:44.340 --> 00:25:48.020
So if we go here, it's literally the letters P-Y

00:25:48.020 --> 00:25:49.980
and a bunch of insane symbols

00:25:49.980 --> 00:25:55.420
in the most wild, wild way possible.

00:25:55.420 --> 00:26:00.420
Like this, if you open it up, it's just like ASCII art P-Y.

00:26:00.420 --> 00:26:02.580
- Yeah.

00:26:02.580 --> 00:26:05.140
- What this does when you run it, is it annotates,

00:26:05.140 --> 00:26:07.700
go back, when it annotates, there's always,

00:26:07.700 --> 00:26:08.540
like, so you don't have to run it,

00:26:08.540 --> 00:26:09.700
you can just click the image,

00:26:09.700 --> 00:26:14.700
is it basically annotates and colorizes the Xenopython.

00:26:14.700 --> 00:26:18.000
- Oh, that's so cool.

00:26:18.000 --> 00:26:20.140
- Yeah, and so you can check out other ones too, right?

00:26:20.140 --> 00:26:22.620
I haven't even looked at the most roundabout one.

00:26:22.620 --> 00:26:28.940
- He's also highlighting which portions of the Xenopython

00:26:28.940 --> 00:26:31.000
his code is completely ignoring.

00:26:31.000 --> 00:26:33.420
- Yes, exactly, yeah.

00:26:33.420 --> 00:26:35.140
So these are fun and people can check them out.

00:26:35.140 --> 00:26:36.260
You've got the image.

00:26:36.260 --> 00:26:37.700
Well, this one has a movie even,

00:26:37.700 --> 00:26:41.060
so instead of just a picture, the first, the winner,

00:26:41.060 --> 00:26:42.240
I guess it's not the number one winner.

00:26:42.240 --> 00:26:43.260
There's just different categories.

00:26:43.260 --> 00:26:45.900
The most puzzling is by Moshé.

00:26:45.900 --> 00:26:47.660
- Oh, wow.

00:26:47.660 --> 00:26:51.020
- And it's like a maze, which is insane.

00:26:51.020 --> 00:26:52.460
- That's amazing.

00:26:52.460 --> 00:26:53.700
- That is amazing.

00:26:53.700 --> 00:26:56.460
Oh, that was well done, very well done.

00:26:56.460 --> 00:26:59.020
Okay, so that's it for all of my extras.

00:26:59.020 --> 00:26:59.980
- Okay. - Over to you.

00:26:59.980 --> 00:27:01.940
That's my extra, extra, extra segment,

00:27:01.940 --> 00:27:03.720
which was very extra.

00:27:03.720 --> 00:27:06.040
- I just have a couple extras.

00:27:06.040 --> 00:27:08.080
We've covered this before.

00:27:08.080 --> 00:27:13.080
Microsoft Python for VS Code has a December 23 release.

00:27:13.080 --> 00:27:15.940
Actually, we haven't covered that,

00:27:15.940 --> 00:27:19.020
but looking in the, that came out on the 7th.

00:27:19.020 --> 00:27:23.660
And the, within this December release

00:27:23.660 --> 00:27:28.660
has an announcement that, oh, there's a,

00:27:28.660 --> 00:27:32.320
oh yeah, I had it already highlighted.

00:27:32.320 --> 00:27:36.060
The Python test adapter rewrite experiment.

00:27:36.060 --> 00:27:39.820
If you don't remember this, it was back in,

00:27:39.820 --> 00:27:42.860
it started in June.

00:27:42.860 --> 00:27:47.180
They did a change where they were working on,

00:27:47.180 --> 00:27:52.180
you had to opt in to the change of how VS Code's test,

00:27:52.180 --> 00:27:55.680
how test discovery was working.

00:27:55.680 --> 00:27:57.980
Anyway, I reckon, I always, we covered it

00:27:57.980 --> 00:28:00.140
because I recommended everybody turn it on.

00:28:00.140 --> 00:28:04.560
Now that is being rolled out to 100% of the users.

00:28:04.560 --> 00:28:06.860
So now you have to opt out of it if you want to,

00:28:06.860 --> 00:28:10.060
if you don't want it, but don't opt out of it.

00:28:10.060 --> 00:28:12.140
The test discovery, just update your VS Code

00:28:12.140 --> 00:28:14.580
and you'll have better test discovery now.

00:28:14.580 --> 00:28:15.540
Super cool.

00:28:15.540 --> 00:28:18.860
The test discovery is so much better now than it was before.

00:28:18.860 --> 00:28:21.500
Thank you, everybody that worked on Python for VS Code

00:28:21.500 --> 00:28:23.560
or worked on this part of it.

00:28:23.560 --> 00:28:24.660
So that's pretty cool.

00:28:24.660 --> 00:28:31.020
The other extra I wanted to mention was,

00:28:31.020 --> 00:28:33.780
was Daniel Roy Greenfield wrote a little tip

00:28:33.780 --> 00:28:36.620
and I always, I kept meaning to do this

00:28:36.620 --> 00:28:37.840
and I've always forgotten.

00:28:37.840 --> 00:28:40.160
So now this, I'm gonna do it this time,

00:28:40.160 --> 00:28:45.160
is set in my shell script RC files,

00:28:45.160 --> 00:28:49.540
set pip require virtualenv to true

00:28:49.540 --> 00:28:51.740
and that will make it so that if you try

00:28:51.740 --> 00:28:53.220
to pip install something

00:28:53.220 --> 00:28:55.080
and you're not in a virtual environment,

00:28:55.080 --> 00:28:57.900
it will not do it and it will just complain.

00:28:57.900 --> 00:29:02.020
So I never mean to pip install anything

00:29:02.020 --> 00:29:03.400
unless I'm in a virtual environment.

00:29:03.400 --> 00:29:05.100
So this is good.

00:29:05.100 --> 00:29:07.260
I like this.

00:29:07.260 --> 00:29:08.740
- Yeah, that's cool.

00:29:08.740 --> 00:29:13.700
There's a lot of these sort of environmental settings

00:29:13.700 --> 00:29:16.620
that can control things that are not entirely obvious, right?

00:29:16.620 --> 00:29:19.100
- Yeah, be a good blog post

00:29:19.100 --> 00:29:21.820
is to write up some of the ones you should really know about.

00:29:21.820 --> 00:29:23.580
- Absolutely, well, there you go.

00:29:23.580 --> 00:29:25.140
Fire up your Hugo, let's go.

00:29:25.140 --> 00:29:29.660
- Yeah, so those are my extras.

00:29:29.660 --> 00:29:30.940
- Would you say you got to do a lot of research

00:29:30.940 --> 00:29:34.480
to maybe find all those particular environment variables?

00:29:34.480 --> 00:29:35.780
Stuff might really be overwhelming.

00:29:35.780 --> 00:29:37.380
So here, check out this joke, Brian.

00:29:37.380 --> 00:29:38.220
- Okay.

00:29:38.220 --> 00:29:39.880
- From Ray on Mastodon.

00:29:39.880 --> 00:29:42.660
It's a sticker and I kind of want this sticker.

00:29:42.660 --> 00:29:44.500
It's got a bunch of tabs at the top.

00:29:44.500 --> 00:29:46.780
It says, "My brain has too many tabs open.

00:29:46.780 --> 00:29:47.800
"Four of them are frozen

00:29:47.800 --> 00:29:50.260
"and I have no idea where the music is coming from."

00:29:50.260 --> 00:29:51.420
- Oh my gosh.

00:29:51.420 --> 00:29:52.820
- It's amazing.

00:29:52.820 --> 00:29:53.660
- Yeah.

00:29:53.660 --> 00:29:57.180
- I have no idea where the music is coming from.

00:29:57.180 --> 00:29:58.820
- That happens to me so often.

00:29:58.820 --> 00:30:00.660
I guess it must happen to everybody so often.

00:30:00.660 --> 00:30:02.220
It's like, there's music playing

00:30:02.220 --> 00:30:04.660
and I have no idea which tab is playing music.

00:30:05.580 --> 00:30:06.420
- You know what?

00:30:06.420 --> 00:30:09.940
It has a little speaker icon

00:30:09.940 --> 00:30:11.820
that you can see if it's going.

00:30:11.820 --> 00:30:13.620
- Yeah, I feel like this little sticker

00:30:13.620 --> 00:30:15.380
describes both my Monday mornings

00:30:15.380 --> 00:30:18.020
and my Friday evenings or afternoons.

00:30:18.020 --> 00:30:19.580
It's like, "Oh, I can't deal.

00:30:19.580 --> 00:30:21.620
"It's like, what is going on here?"

00:30:21.620 --> 00:30:23.060
Too much in life.

00:30:23.060 --> 00:30:24.860
- Yeah, that's funny.

00:30:24.860 --> 00:30:26.140
I need this sticker.

00:30:26.140 --> 00:30:26.980
- I do too.

00:30:26.980 --> 00:30:32.620
All right, well, thank you for the episode as always

00:30:32.620 --> 00:30:34.020
and thank you everyone for listening.

00:30:34.020 --> 00:30:35.500
- Yes, thank you.

00:30:35.500 --> 00:30:36.900
Yep, bye all.

