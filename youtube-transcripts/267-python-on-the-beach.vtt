WEBVTT

00:00:00.000 --> 00:00:05.560
- Hello, everybody. Welcome to the live stream. Glad to have you here. We're going to kick


00:00:05.560 --> 00:00:11.280
off the show. It's awesome to have you here. Hello, and welcome to Python Bytes, where


00:00:11.280 --> 00:00:17.560
we deliver Python news and headlines directly to your earbuds. This is episode 267, recorded


00:00:17.560 --> 00:00:22.960
January 19th, 2022. That's it. I'm Brian Okken.


00:00:22.960 --> 00:00:25.680
- I'm Michael Kennedy.


00:00:25.680 --> 00:00:30.680
And we've got kind of a, I've got a cool green screen today.


00:00:30.680 --> 00:00:31.880
- Oh my God.


00:00:31.880 --> 00:00:35.160
I know some days we have cool stuff to talk about


00:00:35.160 --> 00:00:38.080
and cool things to share, but you're taking it


00:00:38.080 --> 00:00:38.920
to the next level.


00:00:38.920 --> 00:00:41.980
You are live streaming and recording right


00:00:41.980 --> 00:00:43.200
from the beach in Hawaii.


00:00:43.200 --> 00:00:44.320
So.


00:00:44.320 --> 00:00:45.160
- Yeah, I'm looking at it.


00:00:45.160 --> 00:00:45.980
- I'm so jealous.


00:00:45.980 --> 00:00:46.820
- Surfers right now.


00:00:46.820 --> 00:00:48.120
So it's nice.


00:00:48.120 --> 00:00:50.240
- It's, you could probably handle doing it more


00:00:50.240 --> 00:00:51.080
than one week, right?


00:00:51.080 --> 00:00:52.680
You could just do this for a while.


00:00:52.680 --> 00:00:54.760
- Yeah, we should, I should move here


00:00:54.760 --> 00:00:56.920
about a month every year, that'd be great.


00:00:56.920 --> 00:00:57.760
- Yeah.


00:00:57.760 --> 00:01:00.880
- But anyway, let's move on to our topics.


00:01:00.880 --> 00:01:03.240
Michael, you wanna talk about boxes?


00:01:03.240 --> 00:01:06.960
- I, you know, I really do wanna talk about boxes.


00:01:06.960 --> 00:01:11.080
This is such a cool library that I found


00:01:11.080 --> 00:01:12.800
and I don't remember where I saw it.


00:01:12.800 --> 00:01:13.880
I think I just discovered,


00:01:13.880 --> 00:01:16.040
I don't think this was sent in by a guest.


00:01:16.040 --> 00:01:17.500
So here's the thing.


00:01:17.500 --> 00:01:21.520
We have Python classes and we have dictionaries.


00:01:21.520 --> 00:01:24.400
Where is all the data stored for most classes?


00:01:24.400 --> 00:01:26.660
in the dunder dict, right?


00:01:26.660 --> 00:01:29.280
Which is a dictionary of what is your field?


00:01:29.280 --> 00:01:30.440
Here's its value.


00:01:30.440 --> 00:01:31.520
Each instance of the class,


00:01:31.520 --> 00:01:35.560
each object gets its own instance of that dictionary, right?


00:01:35.560 --> 00:01:36.400
- Yeah.


00:01:36.400 --> 00:01:37.480
- And yet when we have a dictionary,


00:01:37.480 --> 00:01:39.160
we can't treat it,


00:01:39.160 --> 00:01:42.240
we can't get the values of the dictionary


00:01:42.240 --> 00:01:43.920
in the same way that we do have a class.


00:01:43.920 --> 00:01:47.360
A class you say thing.field.


00:01:47.360 --> 00:01:50.080
Well, wouldn't it be nice if you could go to your dictionary


00:01:50.080 --> 00:01:53.600
and say it has a key.name, so just d.name.


00:01:53.600 --> 00:01:56.240
and access it.


00:01:56.240 --> 00:01:59.080
That's the basic idea behind this thing called Box


00:01:59.080 --> 00:02:00.740
by C.D. Griffith.


00:02:00.740 --> 00:02:04.920
And that was enough to get me interested


00:02:04.920 --> 00:02:07.180
and think, all right, this is a cool idea


00:02:07.180 --> 00:02:09.840
that I would love to play with


00:02:09.840 --> 00:02:11.080
and maybe I should use it more.


00:02:11.080 --> 00:02:13.480
But then I started to look a little bit further.


00:02:13.480 --> 00:02:17.120
So if you go down here, it says, all right,


00:02:17.120 --> 00:02:19.680
well, sometimes these keys,


00:02:19.680 --> 00:02:23.800
they have a structure that won't allow you


00:02:23.800 --> 00:02:24.640
to treat them that way,


00:02:24.640 --> 00:02:29.400
like a space or a colon in the example of spaces and colon.


00:02:29.400 --> 00:02:33.640
So for example, they have a key that is the name of a movie


00:02:33.640 --> 00:02:35.520
and then data about that movie.


00:02:35.520 --> 00:02:40.480
So Robin Hood spaces, colon men in tights with spaces.


00:02:40.480 --> 00:02:42.680
And by default, it'll actually convert that


00:02:42.680 --> 00:02:45.560
into something that you can use


00:02:45.560 --> 00:02:48.100
by just replacing spaces with underscores


00:02:48.100 --> 00:02:50.640
and colons just go away and stuff like that.


00:02:50.640 --> 00:02:51.480
- Oh, that's awesome.


00:02:51.480 --> 00:02:54.040
- You can still do that, which is cool.


00:02:54.040 --> 00:02:55.060
But there's a lot more stuff.


00:02:55.060 --> 00:02:58.420
It says, check out the Box GitHub Wiki,


00:02:58.420 --> 00:02:59.620
which is right on the homepage,


00:02:59.620 --> 00:03:01.760
the GitHub that I linked to.


00:03:01.760 --> 00:03:03.460
And there's all sorts of things.


00:03:03.460 --> 00:03:07.220
So they start by showing just the basic stuff,


00:03:07.220 --> 00:03:08.940
like here's a box and you just,


00:03:08.940 --> 00:03:10.900
you can create it through keyword values


00:03:10.900 --> 00:03:13.820
or pass it a dictionary, it'll initialize out of that.


00:03:13.820 --> 00:03:15.740
So they've got like funny movie equals something


00:03:15.740 --> 00:03:18.020
and you just say my box dot funny movie,


00:03:18.020 --> 00:03:19.180
just like it was a class.


00:03:19.180 --> 00:03:21.460
And that was like I described the first thing.


00:03:21.460 --> 00:03:25.100
However, there's more that you can do with it.


00:03:25.100 --> 00:03:27.100
So if you go over to the types of boxes,


00:03:27.100 --> 00:03:29.500
they have conversion box, default boxes,


00:03:29.500 --> 00:03:33.900
box dots, camel killer box, which is awesome.


00:03:33.900 --> 00:03:35.580
Frozen boxes, converters.


00:03:35.580 --> 00:03:37.780
So not just only will it work in all these ways,


00:03:37.780 --> 00:03:39.300
which I'm about to describe,


00:03:39.300 --> 00:03:41.260
it will convert to and from dictionaries,


00:03:41.260 --> 00:03:43.100
to and from JSON, to and from YAML,


00:03:43.100 --> 00:03:45.920
to and from message pack and CSV.


00:03:47.420 --> 00:03:49.500
Okay, so let's go to the types of boxes and check this out.


00:03:49.500 --> 00:03:53.340
So by default, you get the conversion box,


00:03:53.340 --> 00:03:55.580
which is what I described where there's a space,


00:03:55.580 --> 00:03:57.300
it'll put an underscore.


00:03:57.300 --> 00:03:58.140
- Yeah.


00:03:58.140 --> 00:03:59.700
- All of them you can access in this key value way.


00:03:59.700 --> 00:04:02.220
It's just a matter of what happens to the keys


00:04:02.220 --> 00:04:03.940
if there's a way to make them more accessible.


00:04:03.940 --> 00:04:05.800
But you can turn that off.


00:04:05.800 --> 00:04:08.740
You can have, you know, a default dictionary, right?


00:04:08.740 --> 00:04:10.860
Where if the thing is not there,


00:04:10.860 --> 00:04:12.860
instead of throwing a key or it'll create


00:04:12.860 --> 00:04:14.300
whatever you say the default is like,


00:04:14.300 --> 00:04:16.060
create a list 'cause I wanna add up things


00:04:16.060 --> 00:04:18.060
We're going to start with the number zero


00:04:18.060 --> 00:04:20.060
because we're trying to count each one of those


00:04:20.060 --> 00:04:22.060
as we build it up or something like that.


00:04:22.060 --> 00:04:24.060
It can also be a default dictionary.


00:04:24.060 --> 00:04:28.060
They call that a default box, which is cool.


00:04:28.060 --> 00:04:32.060
It can also do what it calls box dots.


00:04:32.060 --> 00:04:37.060
In a string, you can traverse the hierarchy


00:04:37.060 --> 00:04:40.060
of the stuff contained in the box


00:04:40.060 --> 00:04:42.060
through the dot notation.


00:04:42.060 --> 00:04:45.060
You could say, myBox.a.b.c,


00:04:45.060 --> 00:04:49.060
and it has this fluent interface where the thing that it returns from each level


00:04:49.060 --> 00:04:51.060
is either a primitive thing like a number,


00:04:51.060 --> 00:04:56.060
but if it's a sub dictionary, it'll return a sub box, I guess, right?


00:04:56.060 --> 00:04:58.060
So you can keep going on it.


00:04:58.060 --> 00:05:03.060
You can also then just say "a.b.c" to traverse that hierarchy as a string


00:05:03.060 --> 00:05:05.060
if that's more programmable.


00:05:05.060 --> 00:05:06.060
This one is great.


00:05:06.060 --> 00:05:11.060
Are you working against an API or some data source


00:05:11.060 --> 00:05:14.060
that is written in a different language style?


00:05:14.060 --> 00:05:18.560
So especially I'm thinking C# here where it's not lowercase


00:05:18.560 --> 00:05:20.020
and underscores as a separator,


00:05:20.020 --> 00:05:22.180
but it's capitalization camel case.


00:05:22.180 --> 00:05:26.220
Like the example they have is pesky and annoying keys,


00:05:26.220 --> 00:05:30.020
which is capital P, capital A, capital A, capital K,


00:05:30.020 --> 00:05:31.780
all one thing.


00:05:31.780 --> 00:05:33.820
And like, if you're gonna say dot the thing,


00:05:33.820 --> 00:05:34.660
well, guess what?


00:05:34.660 --> 00:05:37.460
You're gonna have to write that in your code, right?


00:05:37.460 --> 00:05:38.300
- Yeah.


00:05:38.300 --> 00:05:39.940
- Unless you make it a camel killer box


00:05:39.940 --> 00:05:42.140
and then it converts it to snake case,


00:05:42.140 --> 00:05:46.180
pesky underscore and underscore and annoying and keys.


00:05:46.180 --> 00:05:47.620
So if you program against an API


00:05:47.620 --> 00:05:48.860
that's written in another language,


00:05:48.860 --> 00:05:50.500
you can still do this Pythonic code,


00:05:50.500 --> 00:05:52.020
which is that's amazing, right?


00:05:52.020 --> 00:05:53.220
- Yeah, I like that.


00:05:53.220 --> 00:05:54.060
That's great.


00:05:54.060 --> 00:05:57.420
- I know it's a good, a good name.


00:05:57.420 --> 00:05:58.260
Frozen box.


00:05:58.260 --> 00:06:01.180
- I mean, I wouldn't, it's a fun thing.


00:06:01.180 --> 00:06:02.340
I personally wouldn't recommend it


00:06:02.340 --> 00:06:04.300
because then your code,


00:06:04.300 --> 00:06:06.740
it's hard to look up the documentation


00:06:06.740 --> 00:06:07.980
'cause it would be wrong.


00:06:07.980 --> 00:06:08.820
Things like that.


00:06:08.820 --> 00:06:10.420
- Yeah, maybe something more in the affirmative


00:06:10.420 --> 00:06:14.420
like snake case converted or I don't know, whatever.


00:06:14.420 --> 00:06:17.980
They've a frozen box, so it's unmutable and hashable,


00:06:17.980 --> 00:06:19.020
which is pretty cool.


00:06:19.020 --> 00:06:24.220
A recast, so if you put in strings to this key


00:06:24.220 --> 00:06:25.540
and you want it to be numbers,


00:06:25.540 --> 00:06:27.900
it'll always convert it to a float or whatever.


00:06:27.900 --> 00:06:30.820
So those are all pretty awesome.


00:06:30.820 --> 00:06:33.620
And then it'll even do things like put a prefix


00:06:33.620 --> 00:06:35.940
for stuff that couldn't be valid,


00:06:35.940 --> 00:06:40.020
non-quoted symbols, right?


00:06:40.020 --> 00:06:45.020
You can say .name, but you can't say .327 name, right?


00:06:45.020 --> 00:06:49.320
So you can say an X, so it's X317 or whatever.


00:06:49.320 --> 00:06:52.320
All those things are pretty awesome.


00:06:52.320 --> 00:06:53.300
Let me go back here.


00:06:53.300 --> 00:06:55.420
The other thing is just the converters, right?


00:06:55.420 --> 00:06:57.500
So there's all the converters you might,


00:06:57.500 --> 00:07:00.820
so two dictionary, two YAML, two TOML,


00:07:00.820 --> 00:07:02.820
and also from all those things,


00:07:02.820 --> 00:07:04.900
which I think is pretty neat.


00:07:04.900 --> 00:07:06.700
So what do you think, like it?


00:07:06.700 --> 00:07:07.540
- Yeah, I do.


00:07:07.540 --> 00:07:10.420
- And there's times where I've really had a,


00:07:10.420 --> 00:07:13.180
wanted to conveniently just create something


00:07:13.180 --> 00:07:16.700
with a dictionary, but I wanted to use dot notation.


00:07:16.700 --> 00:07:19.900
So I've used like a name tuple or something like that.


00:07:19.900 --> 00:07:23.560
And this is actually, this does it for you.


00:07:23.560 --> 00:07:24.880
So nice.


00:07:24.880 --> 00:07:25.720
- It's really nice.


00:07:25.720 --> 00:07:27.780
And I've done stuff like that as well, where I'm like,


00:07:27.780 --> 00:07:29.040
all right, I'm gonna create a new class.


00:07:29.040 --> 00:07:31.900
It derives from dictionary and just give it a set adder,


00:07:31.900 --> 00:07:34.940
get adder, so you can do the dot thing on it.


00:07:34.940 --> 00:07:37.620
but this seems to have just so many more other features


00:07:37.620 --> 00:07:39.700
on top of it that I don't think I'll ever do that again.


00:07:39.700 --> 00:07:41.260
I'm just gonna use this box thing.


00:07:41.260 --> 00:07:42.460
Seems so much better.


00:07:42.460 --> 00:07:43.300
- Nice.


00:07:43.300 --> 00:07:44.340
- Yeah. - It's cool.


00:07:44.340 --> 00:07:46.380
- So I think there's just a few comments


00:07:46.380 --> 00:07:48.020
that I gotta bring in.


00:07:48.020 --> 00:07:49.220
- Yeah.


00:07:49.220 --> 00:07:50.600
- Roman Wright out there points out


00:07:50.600 --> 00:07:54.500
that the setting default box is not the default setting,


00:07:54.500 --> 00:07:55.940
which is pretty awesome.


00:07:55.940 --> 00:07:56.780
- Yeah.


00:07:56.780 --> 00:07:58.540
- Chris May points out that for this,


00:07:58.540 --> 00:08:01.260
someone needs to think outside this package


00:08:01.260 --> 00:08:04.060
to get something outside the box, right?


00:08:04.060 --> 00:08:07.760
to get to the really amazing and just, you know,


00:08:07.760 --> 00:08:12.580
random brainer is a little bit jealous of your green screen.


00:08:12.580 --> 00:08:15.460
- Hey, that Brandon's the one I had on as a guest


00:08:15.460 --> 00:08:17.100
for testing code recently.


00:08:17.100 --> 00:08:18.260
So, hi Brandon.


00:08:18.260 --> 00:08:19.160
- Yeah, very cool.


00:08:19.160 --> 00:08:26.020
- So, well, what's next is a mocking, sort of mocking.


00:08:26.020 --> 00:08:29.980
So Adam Johnson has an article called


00:08:29.980 --> 00:08:32.260
making simple mocks with simple,


00:08:32.260 --> 00:08:34.500
making simple mocks with simple namespace.


00:08:34.500 --> 00:08:36.300
And I had never heard of this.


00:08:36.300 --> 00:08:37.800
So I'm really glad he wrote this article.


00:08:37.800 --> 00:08:39.120
It's really pretty great.


00:08:39.120 --> 00:08:41.620
Oh, do I have the wrong?


00:08:41.620 --> 00:08:44.020
Oh yeah, let's just cover this one.


00:08:44.020 --> 00:08:44.860
Need my notes.


00:08:44.860 --> 00:08:45.940
Nevermind.


00:08:45.940 --> 00:08:48.060
So Adam's actually been crushing it lately.


00:08:48.060 --> 00:08:50.300
He's got a lot of recent blog posts.


00:08:50.300 --> 00:08:51.720
So good job, Adam.


00:08:51.720 --> 00:08:56.980
The simple namespace is pretty neat.


00:08:56.980 --> 00:08:58.580
It comes from the type standard library.


00:08:58.580 --> 00:09:01.660
So it's not an extra package you have to bring in.


00:09:01.660 --> 00:09:03.520
which that's cool.


00:09:03.520 --> 00:09:04.360
But one of the things,


00:09:04.360 --> 00:09:07.680
so it's like normally we use unit test mock


00:09:07.680 --> 00:09:10.840
or you can to mock something.


00:09:10.840 --> 00:09:14.580
But one of the problems with mocks is by default,


00:09:14.580 --> 00:09:18.240
if you misspell something, it's gonna be fine.


00:09:18.240 --> 00:09:21.840
Mock just lets you do whatever attribute access you want.


00:09:21.840 --> 00:09:24.560
And that's usually not something you want.


00:09:24.560 --> 00:09:25.760
- Right, usually the mock is like,


00:09:25.760 --> 00:09:27.800
let me just get in the way


00:09:27.800 --> 00:09:30.680
and just let things keep working no matter what, right?


00:09:30.680 --> 00:09:33.300
and does not do anything unless you say return this value


00:09:33.300 --> 00:09:34.820
for this function call or something.


00:09:34.820 --> 00:09:37.500
- Right, you can pass in specs.


00:09:37.500 --> 00:09:41.100
And if you have a known object that you're mocking,


00:09:41.100 --> 00:09:43.220
you use specs and that works.


00:09:43.220 --> 00:09:46.680
But sometimes you don't need that much of stuff.


00:09:46.680 --> 00:09:48.720
So simple namespace is a thing


00:09:48.720 --> 00:09:51.640
that just lets you fill in attributes.


00:09:51.640 --> 00:09:53.620
And then it works to access them.


00:09:53.620 --> 00:09:56.100
It works kind of like a name tuple or something like that.


00:09:56.100 --> 00:09:58.820
But the usage of it is super simple.


00:09:58.820 --> 00:10:01.540
And then you can pass this around.


00:10:01.540 --> 00:10:05.260
And so in the parlance of like testing,


00:10:05.260 --> 00:10:08.040
this would be for a fake or a stub,


00:10:08.040 --> 00:10:10.500
not really a mock 'cause you don't interrogate it.


00:10:10.500 --> 00:10:11.880
But if you just need to fill it,


00:10:11.880 --> 00:10:14.700
have something that walks like a duck


00:10:14.700 --> 00:10:16.020
and quacks like a duck,


00:10:16.020 --> 00:10:18.940
you can use one of these to create a duck


00:10:18.940 --> 00:10:20.220
and have it get passed in.


00:10:20.220 --> 00:10:21.040
It's pretty cool.


00:10:21.040 --> 00:10:22.680
And super simple and really easy.


00:10:22.680 --> 00:10:24.500
- Yeah. - Love it.


00:10:24.500 --> 00:10:26.340
- It seems a lot like just what people


00:10:26.340 --> 00:10:29.340
would have expected mocks to do if you described it.


00:10:29.340 --> 00:10:30.180
- Yeah.


00:10:30.180 --> 00:10:33.660
So he has a great quote.


00:10:33.660 --> 00:10:35.740
"It's as simple as possible with no faff


00:10:35.740 --> 00:10:38.760
"around being callable or tracking usage or something."


00:10:38.760 --> 00:10:41.740
So in a lot of, sometimes with mocks,


00:10:41.740 --> 00:10:43.860
you try to interrogate.


00:10:43.860 --> 00:10:46.020
So you have a function call and you interrogate the mocks


00:10:46.020 --> 00:10:48.580
to say, did it get called by my code?


00:10:48.580 --> 00:10:49.580
These don't do that.


00:10:49.580 --> 00:10:50.420
You can't do that.


00:10:50.420 --> 00:10:52.920
But as long as, but you set it up


00:10:52.920 --> 00:10:55.940
with the attributes you want, pass it through.


00:10:55.940 --> 00:10:58.120
And it's pretty, just pretty neat.


00:10:58.120 --> 00:10:59.760
I'm gonna use these all the time now.


00:10:59.760 --> 00:11:01.500
- Yeah, it looks fantastic.


00:11:01.500 --> 00:11:03.140
Very nice find.


00:11:03.140 --> 00:11:06.220
All right, for the next one that I wanna talk about,


00:11:06.220 --> 00:11:07.720
let's go to space.


00:11:07.720 --> 00:11:10.000
- Space.


00:11:10.000 --> 00:11:11.740
- And embedded things in space.


00:11:11.740 --> 00:11:13.140
So this is pretty fun.


00:11:13.140 --> 00:11:18.900
This is an article on ZDNet talking about Raspberry Pi.


00:11:18.900 --> 00:11:22.860
So apparently the European Space Agency


00:11:22.860 --> 00:11:27.860
has uploaded and installed and configured


00:11:27.860 --> 00:11:31.460
two new Raspberry Pis.


00:11:31.460 --> 00:11:33.820
And not just any Raspberry Pis,


00:11:33.820 --> 00:11:37.380
they're these, is it Astro Pi?


00:11:37.380 --> 00:11:38.280
That's what it is.


00:11:38.280 --> 00:11:44.180
These are regular Raspberry Pi 4 boards,


00:11:44.180 --> 00:11:46.220
Model Bs with eight gigs of memory


00:11:46.220 --> 00:11:49.420
that have been hardened for space, okay?


00:11:49.420 --> 00:11:50.260
- Wow, okay.


00:11:50.260 --> 00:11:52.220
- And the whole goal of having them up here


00:11:52.220 --> 00:11:56.320
is so that students and kids can write code


00:11:56.320 --> 00:11:58.940
and run experiments and just play with automation,


00:11:58.940 --> 00:12:01.340
but literally using the sensors


00:12:01.340 --> 00:12:02.940
of the International Space Station


00:12:02.940 --> 00:12:07.020
and actually writing Python code and machine learning stuff


00:12:07.020 --> 00:12:09.300
that runs up there in space.


00:12:09.300 --> 00:12:10.140
Isn't that cool?


00:12:10.140 --> 00:12:11.380
- That's incredible.


00:12:11.380 --> 00:12:13.060
- Yeah, yeah.


00:12:13.060 --> 00:12:16.660
So apparently there's 500 student programming teams


00:12:16.660 --> 00:12:19.060
in Europe who are all participating


00:12:19.060 --> 00:12:22.720
in this thing called the European Astro Pi Challenge,


00:12:22.720 --> 00:12:26.860
which is like an education focused competition


00:12:26.860 --> 00:12:28.700
or startup or whatever.


00:12:28.700 --> 00:12:29.540
- Okay.


00:12:29.540 --> 00:12:30.360
- Yeah.


00:12:30.360 --> 00:12:31.200
- Very cool.


00:12:31.200 --> 00:12:32.020
Out of this world.


00:12:32.020 --> 00:12:33.620
- It's out of this world, absolutely.


00:12:33.620 --> 00:12:35.740
It's really cool to see Python in space, right?


00:12:35.740 --> 00:12:38.060
And here's just more of it, right?


00:12:38.060 --> 00:12:39.460
- And Raspberry Pis.


00:12:39.460 --> 00:12:40.300
- I know.


00:12:40.300 --> 00:12:42.260
- Because you can practice your stuff at home


00:12:42.260 --> 00:12:44.700
and then have it go up there, neat.


00:12:44.700 --> 00:12:46.020
- Yeah, very cool.


00:12:46.020 --> 00:12:48.740
So you have things like the humidity reading


00:12:48.740 --> 00:12:51.300
and the various sensors and things on there


00:12:51.300 --> 00:12:54.980
that you can work with and then just do sciencey things.


00:12:54.980 --> 00:12:59.980
I mean, when I was a kid, the science fair was like,


00:12:59.980 --> 00:13:03.060
well, let's make a little volcano that erupts


00:13:03.060 --> 00:13:05.060
and like oozes stuff out of paper mache.


00:13:05.060 --> 00:13:06.620
And you know, these kids get to write code


00:13:06.620 --> 00:13:09.260
that runs in space, that's next level.


00:13:09.260 --> 00:13:11.100
- Yeah, I admit that I've never done


00:13:11.100 --> 00:13:12.580
the volcano thing though.


00:13:12.580 --> 00:13:14.420
I kind of, I should do that.


00:13:14.420 --> 00:13:15.980
- Yeah, I haven't either very much.


00:13:15.980 --> 00:13:17.300
I mean, I'm not a scientist.


00:13:17.300 --> 00:13:18.500
I haven't either very much.


00:13:18.500 --> 00:13:20.380
I mean, I did some paper mache thing


00:13:20.380 --> 00:13:22.140
and I think I had a failed volcano once,


00:13:22.140 --> 00:13:23.980
but that's about it.


00:13:23.980 --> 00:13:25.940
Anyway, I just think this is really cool


00:13:25.940 --> 00:13:28.900
and it's a neat use of Raspberry Pis.


00:13:28.900 --> 00:13:30.460
It's a cool way to take


00:13:30.460 --> 00:13:33.780
like a semi-modern computing environment,


00:13:33.780 --> 00:13:36.260
put it somewhere neat where it has access to real,


00:13:36.260 --> 00:13:37.980
the real world and let kids


00:13:37.980 --> 00:13:41.100
and other researchers write code on it without going,


00:13:41.100 --> 00:13:43.860
yeah, we're not gonna install your program on the ISS.


00:13:43.860 --> 00:13:44.800
No thanks to that.


00:13:44.800 --> 00:13:46.700
- This is so neat.


00:13:46.700 --> 00:13:48.060
I'm blown away.


00:13:48.060 --> 00:13:49.660
I would have never thought that something like this


00:13:49.660 --> 00:13:51.060
was gonna happen in my lifetime.


00:13:51.060 --> 00:13:51.900
It's nice.


00:13:51.900 --> 00:13:52.720
- Yeah, yeah.


00:13:52.720 --> 00:13:53.560
So many neat things.


00:13:53.560 --> 00:13:55.020
All right, well, that's all I gotta say about that,


00:13:55.020 --> 00:13:56.060
but definitely fun.


00:13:56.060 --> 00:14:02.400
- So one of the things that new coders have to deal with,


00:14:02.400 --> 00:14:07.340
and unfortunately it's hard to tell them ahead of time


00:14:07.340 --> 00:14:09.820
how to deal with it, is tracebacks.


00:14:09.820 --> 00:14:14.820
So tracebacks, they're just part of life with coding.


00:14:14.980 --> 00:14:17.000
And Trey Hunter has a article called


00:14:17.000 --> 00:14:18.860
reading Tracebacks in Python.


00:14:18.860 --> 00:14:21.380
And it's a really great, simple introduction.


00:14:21.380 --> 00:14:22.220
I love it.


00:14:22.220 --> 00:14:25.920
One of the things I want to comment on is


00:14:25.920 --> 00:14:29.380
just the order in which we teach people things.


00:14:29.380 --> 00:14:31.940
And teaching people how to do Tracebacks


00:14:31.940 --> 00:14:34.340
is something that it really needs to be early.


00:14:34.340 --> 00:14:36.500
Maybe like right before testing


00:14:36.500 --> 00:14:38.500
and right after the hello world.


00:14:38.500 --> 00:14:41.780
But seriously, Tracebacks happen so fast


00:14:41.780 --> 00:14:44.100
And when you start coding,


00:14:44.100 --> 00:14:46.460
an assertion happens that you don't catch


00:14:46.460 --> 00:14:49.220
and you get a trace back and people panic and go,


00:14:49.220 --> 00:14:51.100
"Oh my God, I suck as a programmer."


00:14:51.100 --> 00:14:53.420
And you don't, it's not overwhelming,


00:14:53.420 --> 00:14:55.360
just kind of walk through it simply.


00:14:55.360 --> 00:14:56.740
And that's what this article is about


00:14:56.740 --> 00:14:58.460
is how to walk through it simply.


00:14:58.460 --> 00:14:59.460
And so we're gonna,


00:14:59.460 --> 00:15:04.760
if people are new to Python listening to this


00:15:04.760 --> 00:15:06.580
or how to teach people,


00:15:06.580 --> 00:15:08.180
just teach people to start at the bottom.


00:15:08.180 --> 00:15:09.420
You read the last line first.


00:15:09.420 --> 00:15:11.300
So the last line in a trace back


00:15:11.300 --> 00:15:12.780
is the error message.


00:15:12.780 --> 00:15:15.660
Let's scroll to one on here.


00:15:15.660 --> 00:15:17.340
- Which is good to know because that's not true


00:15:17.340 --> 00:15:19.100
for other programming languages.


00:15:19.100 --> 00:15:21.980
The errors at the top and it's kind of inverted.


00:15:21.980 --> 00:15:22.800
- Oh, really?


00:15:22.800 --> 00:15:23.640
- Yeah.


00:15:23.640 --> 00:15:25.660
- I forget, but yeah.


00:15:25.660 --> 00:15:28.220
So the last line is the exception


00:15:28.220 --> 00:15:32.740
and then also the message for the exception if it's there.


00:15:32.740 --> 00:15:37.420
And then you read up and the next two lines up are,


00:15:37.420 --> 00:15:39.820
you've got a file name and a line number


00:15:39.820 --> 00:15:43.460
and then a copy of what the line is.


00:15:43.460 --> 00:15:47.060
And that's the place where the exception actually happened.


00:15:47.060 --> 00:15:49.300
And these two double things, these two lines,


00:15:49.300 --> 00:15:52.780
the line is called, what do you call it?


00:15:52.780 --> 00:15:56.860
They're the stack trace, the stack, whatever.


00:15:56.860 --> 00:15:58.060
- Oh, call stack?


00:15:58.060 --> 00:15:59.940
- Yeah, this is the call stack.


00:15:59.940 --> 00:16:04.180
- Even more so, 'cause you get lines within functions,


00:16:04.180 --> 00:16:05.380
right, not just the-


00:16:05.380 --> 00:16:06.220
- Yeah.


00:16:06.220 --> 00:16:07.060
- Yeah.


00:16:07.060 --> 00:16:11.020
And then if you don't understand why you have an exception


00:16:11.020 --> 00:16:12.180
there, you just keep going up.


00:16:12.180 --> 00:16:15.700
You keep going up to, and sometimes the exception happened,


00:16:15.700 --> 00:16:18.820
not in your code, but in some library call


00:16:18.820 --> 00:16:21.060
that you went called.


00:16:21.060 --> 00:16:22.940
So you're not gonna debug that.


00:16:22.940 --> 00:16:25.100
So you have to debug your code.


00:16:25.100 --> 00:16:29.100
So it's good to go up enough to where it's in your code.


00:16:29.100 --> 00:16:32.380
And then if you can't figure it out, you just keep going up.


00:16:32.380 --> 00:16:35.500
And this example is actually not obvious to me


00:16:35.500 --> 00:16:36.360
what was going on.


00:16:36.360 --> 00:16:37.840
So I'm glad he walks through it.


00:16:37.840 --> 00:16:41.360
So Trey walks through how to read this


00:16:41.360 --> 00:16:44.060
and it goes up to the fact that,


00:16:44.060 --> 00:16:47.060
so this is the example has a type error


00:16:47.060 --> 00:16:50.720
because you can't concatenate a string to an integer.


00:16:50.720 --> 00:16:53.760
And that's weird because it doesn't look like


00:16:53.760 --> 00:16:55.160
it's trying to do that.


00:16:55.160 --> 00:16:58.040
But then he walks up to find out that


00:16:58.040 --> 00:17:01.840
the function is actually taking the standard input


00:17:01.840 --> 00:17:05.040
and passing it in as a number.


00:17:05.040 --> 00:17:07.960
and one of the argv's and you have to convert it


00:17:07.960 --> 00:17:09.240
to an int first.


00:17:09.240 --> 00:17:12.280
But so that's a, I'm glad you used that example


00:17:12.280 --> 00:17:16.320
because people new to command line interface coding


00:17:16.320 --> 00:17:19.920
often forget that, that the input is usually a string,


00:17:19.920 --> 00:17:21.600
even though if you pass in a five,


00:17:21.600 --> 00:17:24.000
it's still gonna be a string with a five in it.


00:17:24.000 --> 00:17:26.440
- Right, it looks like a number, but it's not a number.


00:17:26.440 --> 00:17:28.380
- Yeah, so you have to convert those.


00:17:28.380 --> 00:17:33.120
And a reminder here, this is user input, even in,


00:17:33.120 --> 00:17:35.060
So in this case, it's not gonna be harmful


00:17:35.060 --> 00:17:36.620
just to convert it to an int,


00:17:36.620 --> 00:17:40.720
but even command line input is input from a user.


00:17:40.720 --> 00:17:43.420
So you have to sanitize it if you need,


00:17:43.420 --> 00:17:46.080
if you're doing anything like with a database or something.


00:17:46.080 --> 00:17:47.400
- Absolutely.


00:17:47.400 --> 00:17:48.240
Oh, that's great.


00:17:48.240 --> 00:17:50.260
I think definitely that's the kind of thing


00:17:50.260 --> 00:17:53.940
you need to start with when you're teaching people Python,


00:17:53.940 --> 00:17:56.020
like almost before you teach them to code,


00:17:56.020 --> 00:17:58.420
like how to, if you run into an error,


00:17:58.420 --> 00:18:01.540
here's how you understand it a little bit


00:18:01.540 --> 00:18:02.640
and here's how you Google it


00:18:02.640 --> 00:18:05.160
or go about finding some way to fix it.


00:18:05.160 --> 00:18:06.260
- Yeah, and if you start,


00:18:06.260 --> 00:18:07.400
especially if you start at the top,


00:18:07.400 --> 00:18:08.240
it's gonna be a mess


00:18:08.240 --> 00:18:11.080
'cause if you've got a call stack like 50 functions deep,


00:18:11.080 --> 00:18:13.880
hopefully not, it's gonna be a really big trace back


00:18:13.880 --> 00:18:17.000
and you don't wanna try to untangle all of it.


00:18:17.000 --> 00:18:18.480
Just start at the bottom.


00:18:18.480 --> 00:18:20.080
- Yeah, absolutely.


00:18:20.080 --> 00:18:22.520
And Dean out in the live stream says,


00:18:22.520 --> 00:18:25.240
you know, when you use some Python wrapper


00:18:25.240 --> 00:18:26.960
on top of a Java microservice


00:18:26.960 --> 00:18:28.600
and you get a 500 line exception,


00:18:28.600 --> 00:18:30.520
you're like, what have I done wrong to deserve this?


00:18:30.520 --> 00:18:33.020
- Yeah, that's like the advanced version of this.


00:18:33.020 --> 00:18:33.860
- Yeah.


00:18:33.860 --> 00:18:36.260
- Speaking of advanced, how about some intrigue?


00:18:36.260 --> 00:18:37.980
- Ooh, nice picture.


00:18:37.980 --> 00:18:38.980
- Yes.


00:18:38.980 --> 00:18:43.980
So you and the listeners may have heard of this person


00:18:43.980 --> 00:18:49.220
who turned out to go a little bit bonkers


00:18:49.220 --> 00:18:50.460
on their open source code,


00:18:50.460 --> 00:18:55.000
luckily in npm and not Python, so JavaScript space.


00:18:55.000 --> 00:18:56.700
So there's colors and JS,


00:18:56.700 --> 00:19:01.100
which are two widely used no padding margin npm libraries


00:19:01.100 --> 00:19:03.660
used for JavaScript and Node.js.


00:19:03.660 --> 00:19:06.380
Well, this developer, Marek Squires,


00:19:06.380 --> 00:19:10.820
first they thought it was a supply chain vulnerability


00:19:10.820 --> 00:19:11.980
and somebody hacked the account,


00:19:11.980 --> 00:19:13.620
but it turns out, no, no, no,


00:19:13.620 --> 00:19:17.020
Marek intentionally corrupted both of his libraries.


00:19:17.020 --> 00:19:19.300
So they ran an endless loop,


00:19:19.300 --> 00:19:22.260
spitting out random political messages


00:19:22.260 --> 00:19:23.580
while it would loop around


00:19:23.580 --> 00:19:26.180
and just fill the screen with garbage.


00:19:26.180 --> 00:19:27.640
So initially thought to be a hack,


00:19:27.640 --> 00:19:30.860
but political and personal messages included in the code


00:19:30.860 --> 00:19:33.020
and on his related websites indicate


00:19:33.020 --> 00:19:35.540
that it may be the work of a disgruntled


00:19:35.540 --> 00:19:37.940
lashing out developer.


00:19:37.940 --> 00:19:38.780
- Wacky.


00:19:38.780 --> 00:19:39.660
- Wacky, okay.


00:19:39.660 --> 00:19:42.220
So that's not, I was not gonna cover that.


00:19:42.220 --> 00:19:45.240
I saw that and I thought that that was pretty interesting.


00:19:45.240 --> 00:19:50.860
And then Mike LaFontaine points out,


00:19:50.860 --> 00:19:53.460
oh, Brian Krebs, the security guy,


00:19:53.460 --> 00:19:55.780
I just noticed that this Myrec Squires


00:19:55.780 --> 00:19:58.620
seems to be the same fellow who sabotaged


00:19:58.620 --> 00:20:01.740
two of his own popular open source libraries next week.


00:20:01.740 --> 00:20:04.980
And he links to an article in my post,


00:20:04.980 --> 00:20:07.860
residents of Queen homes


00:20:07.860 --> 00:20:10.180
with suspected bomb making materials


00:20:10.180 --> 00:20:15.180
charged for some sort of like terrorism type of thing.


00:20:15.180 --> 00:20:23.060
So the same person who sabotaged their npm packages,


00:20:23.980 --> 00:20:26.260
than was it like in the process of making bombs.


00:20:26.260 --> 00:20:30.780
And it just kind of shows you an interesting spectrum


00:20:30.780 --> 00:20:31.920
of where all this stuff lands.


00:20:31.920 --> 00:20:32.900
That's crazy, huh?


00:20:32.900 --> 00:20:34.620
- Yeah.


00:20:34.620 --> 00:20:36.700
Weird.


00:20:36.700 --> 00:20:37.540
- Yeah, very weird.


00:20:37.540 --> 00:20:38.620
Oh, I also forgot to point out,


00:20:38.620 --> 00:20:41.080
this is an extra, extra, extra section.


00:20:41.080 --> 00:20:43.460
So, short.


00:20:43.460 --> 00:20:45.660
I got more stuff, but the first one is,


00:20:45.660 --> 00:20:48.500
the guy that went and messed up all the stuff on NPM


00:20:48.500 --> 00:20:50.900
and everybody's dependencies recently


00:20:50.900 --> 00:20:53.940
has now been charged with creating bombs in Queens.


00:20:53.940 --> 00:20:54.940
New York.


00:20:54.940 --> 00:20:57.160
So yeah, there's that.


00:20:57.160 --> 00:20:58.900
- Okay.


00:20:58.900 --> 00:21:00.180
- Here's one that's really positive.


00:21:00.180 --> 00:21:02.280
Andy Griffiths, don't know this person,


00:21:02.280 --> 00:21:05.740
but they posted something incredibly simple


00:21:05.740 --> 00:21:07.840
that is super helpful when you're building websites


00:21:07.840 --> 00:21:09.140
and trying to design them.


00:21:09.140 --> 00:21:11.660
You know, you can go to inspect element


00:21:11.660 --> 00:21:15.220
and you can like hover over different parts of your page


00:21:15.220 --> 00:21:16.340
and highlight and it'll show,


00:21:16.340 --> 00:21:18.540
okay, this is actually the div here


00:21:18.540 --> 00:21:21.020
that is containing this and it has a margin


00:21:21.020 --> 00:21:23.300
and so that's why it looks like that.


00:21:23.300 --> 00:21:24.140
- Yeah.


00:21:24.140 --> 00:21:27.100
- This guy posted, "Hey, struggling with layout?


00:21:27.100 --> 00:21:30.300
"Turn on CSS outlines, it's a superpower.


00:21:30.300 --> 00:21:34.620
"And all you have to do is write this incredibly simple CSS.


00:21:34.620 --> 00:21:39.340
"* is the CSS selector, outline colon 1px solid red."


00:21:39.340 --> 00:21:43.940
And what you get is your entire site now highlights


00:21:43.940 --> 00:21:45.180
all the elements on the page


00:21:45.180 --> 00:21:47.160
so you can figure out how to style them.


00:21:47.160 --> 00:21:48.860
And how they're laid. - Oh, that's pretty cool.


00:21:48.860 --> 00:21:52.300
- Given the amount of work, isn't that amazing?


00:21:52.300 --> 00:21:55.060
- Yeah, yeah.


00:21:55.060 --> 00:21:57.300
- So I definitely think this is something


00:21:57.300 --> 00:22:00.700
I'm gonna try to use when I'm working on design and stuff


00:22:00.700 --> 00:22:04.400
'cause it's just so much easier than trying to hunt around


00:22:04.400 --> 00:22:07.900
with the debug tools and then you reload the page


00:22:07.900 --> 00:22:09.220
and it changes and all that.


00:22:09.220 --> 00:22:12.340
So quick tip for people there who do web stuff.


00:22:12.340 --> 00:22:17.780
Python 3.10.2 is out and there's actually a decent amount


00:22:17.780 --> 00:22:19.780
of stuff shipped in it.


00:22:19.780 --> 00:22:21.620
If I do some quick scrolly-scrolly,


00:22:21.620 --> 00:22:26.620
I would say that's like 30, 40 changes and bug fixes


00:22:26.620 --> 00:22:28.340
and so on.


00:22:28.340 --> 00:22:29.180
- Wow.


00:22:29.180 --> 00:22:32.740
- So things like fix hang in run test underscore MP


00:22:32.740 --> 00:22:36.420
due to race condition or fix this thing in documentation


00:22:36.420 --> 00:22:40.100
or fixed hash lib used for security option


00:22:40.100 --> 00:22:43.660
to work correctly with the new version of OpenSSL.


00:22:43.660 --> 00:22:46.660
Fix memory leak in pyval.evalcodex.


00:22:46.660 --> 00:22:49.620
That sounds like it might be used a lot of places


00:22:49.620 --> 00:22:52.780
and used in conjunction with the word memory leak.


00:22:52.780 --> 00:22:54.660
That might be good to fix.


00:22:54.660 --> 00:22:57.020
Anyway, I already installed this on all my servers


00:22:57.020 --> 00:22:58.040
and have it running production


00:22:58.040 --> 00:23:01.260
and nothing seemed to catch fire, so that's good.


00:23:01.260 --> 00:23:02.460
- Yeah, very good.


00:23:02.460 --> 00:23:05.780
- Yeah, so Python 3.10.2 is out, that's cool.


00:23:05.780 --> 00:23:10.120
All right, one, I think one more thing.


00:23:10.120 --> 00:23:12.920
Two more things.


00:23:12.920 --> 00:23:15.220
Related, I'm doing a YouTube series


00:23:15.220 --> 00:23:17.460
on a bunch of little short Python lessons


00:23:17.460 --> 00:23:20.180
and I've got about 100 videos I want to make,


00:23:20.180 --> 00:23:22.180
and I've made five of them,


00:23:22.180 --> 00:23:25.740
and published or scheduled them to go out already.


00:23:25.740 --> 00:23:29.500
So I've got a list, don't show me this thing.


00:23:29.500 --> 00:23:32.260
Anyway, a bunch of little tips,


00:23:32.260 --> 00:23:33.600
like parsing data with PyDandic,


00:23:33.600 --> 00:23:36.100
or counting the number of occurrences of items in a list,


00:23:36.100 --> 00:23:37.980
or you've got foreign loops,


00:23:37.980 --> 00:23:39.340
convert them to list comprehensions.


00:23:39.340 --> 00:23:41.540
These are all like four minute videos


00:23:41.540 --> 00:23:43.180
that just teach you something really quick in Python.


00:23:43.180 --> 00:23:44.500
So if people are interested in that,


00:23:44.500 --> 00:23:45.340
they can click the link


00:23:45.340 --> 00:23:47.100
and then subscribe to my personal channel,


00:23:47.100 --> 00:23:49.980
not the Python Bytes YouTube channel, which is awesome,


00:23:49.980 --> 00:23:53.180
but doesn't have this content to get more of those.


00:23:53.180 --> 00:23:54.620
So that's fun.


00:23:54.620 --> 00:23:59.060
- How do you find time for all this stuff, Michael?


00:23:59.060 --> 00:24:00.220
You're like everywhere.


00:24:00.220 --> 00:24:04.180
- I've been wanting to do some of these YouTube videos


00:24:04.180 --> 00:24:05.940
and just try and explore some of the ways


00:24:05.940 --> 00:24:09.220
in which people are like presenting and teaching coding


00:24:09.220 --> 00:24:10.660
for like six months.


00:24:10.660 --> 00:24:13.300
And I've just decided I'm just gonna take some days


00:24:13.300 --> 00:24:16.580
and just gonna do it because I've been putting off


00:24:16.580 --> 00:24:18.800
for like months, so there's that.


00:24:18.800 --> 00:24:22.840
Speaking of time, I also am controlling our stream


00:24:22.840 --> 00:24:24.160
and doing all sorts of fun stuff


00:24:24.160 --> 00:24:27.200
with like this device called a Stream Deck,


00:24:27.200 --> 00:24:29.000
which you may have heard of.


00:24:29.000 --> 00:24:31.800
So the Stream Deck, you have one too, right?


00:24:31.800 --> 00:24:32.960
But it's not in Hawaii.


00:24:32.960 --> 00:24:36.600
Stream Deck is this little device here


00:24:36.600 --> 00:24:39.480
that lets you basically set up a bunch of buttons


00:24:39.480 --> 00:24:41.560
and control things, which is super fun.


00:24:41.560 --> 00:24:43.920
And it's built for streamers and whatnot.


00:24:43.920 --> 00:24:46.080
I decided to see what you could do


00:24:46.080 --> 00:24:51.080
if, let's see, I pulled up the wrong link.


00:24:51.080 --> 00:24:57.640
I decided to see what you could do around the stream deck


00:24:57.640 --> 00:24:59.240
and software development.


00:24:59.240 --> 00:25:01.280
So, so far I have two profiles,


00:25:01.280 --> 00:25:03.160
one for PyCharm where you can control


00:25:03.160 --> 00:25:04.960
all sorts of things like click a button


00:25:04.960 --> 00:25:07.280
on your little device and it'll show your PRs


00:25:07.280 --> 00:25:09.320
or switch the select modes.


00:25:09.320 --> 00:25:11.040
You can write and call it multi-columns


00:25:11.040 --> 00:25:11.880
and all sorts of stuff.


00:25:11.880 --> 00:25:14.640
And then also one for Jupyter that are like launch Jupyter


00:25:14.640 --> 00:25:18.280
and insert your standard imports and add cells above and below


00:25:18.280 --> 00:25:21.780
and rerun them or show me the command palette and stuff.


00:25:21.780 --> 00:25:25.880
So, yeah, that also has a video on it as well,


00:25:25.880 --> 00:25:27.880
and people can check that out.


00:25:27.880 --> 00:25:30.380
I've got this YouTube profile, not YouTube,


00:25:30.380 --> 00:25:34.920
GitHub profile repository


00:25:34.920 --> 00:25:38.860
where it has all the profiles for the Stream Deck.


00:25:38.860 --> 00:25:41.360
So if you want to download it, play with it, customize it,


00:25:41.360 --> 00:25:43.360
those are up there as well.


00:25:43.840 --> 00:25:47.160
All right, that's it for all of my extras.


00:25:47.160 --> 00:25:48.840
You got any yourself?


00:25:48.840 --> 00:25:50.680
- Yeah, so I wanted to talk about,


00:25:50.680 --> 00:25:54.560
so this is a cool article by David Amos.


00:25:54.560 --> 00:25:56.080
So David's awesome.


00:25:56.080 --> 00:25:58.960
He's one of the gang, the people at RealPython.


00:25:58.960 --> 00:26:03.200
But the article's three things you might not know


00:26:03.200 --> 00:26:06.320
about numbers in Python.


00:26:06.320 --> 00:26:08.600
And one of the, I don't know where the line is.


00:26:08.600 --> 00:26:09.640
Oh, it's near the top.


00:26:09.640 --> 00:26:10.560
It's so awesome.


00:26:10.560 --> 00:26:12.260
he's got a line that says,


00:26:12.260 --> 00:26:17.780
there's a good chance that you've used a number


00:26:17.780 --> 00:26:18.980
in one of your programs.


00:26:18.980 --> 00:26:20.960
I think so.


00:26:20.960 --> 00:26:22.760
- I could get behind that statement.


00:26:22.760 --> 00:26:26.600
- Yeah, so one of the things that like strings have,


00:26:26.600 --> 00:26:30.040
strings have functions attached to them.


00:26:30.040 --> 00:26:31.320
They've got methods.


00:26:31.320 --> 00:26:34.840
And I, you know, we know that it's kind of different


00:26:34.840 --> 00:26:37.480
than other languages, but numbers do too.


00:26:37.480 --> 00:26:40.000
And this is something actually I didn't,


00:26:40.000 --> 00:26:42.000
didn't occur to me that,


00:26:42.000 --> 00:26:43.880
that you can do like two bytes and stuff.


00:26:43.880 --> 00:26:48.080
So there's, there's functions that you can call on a number.


00:26:48.080 --> 00:26:49.560
There's a trick though.


00:26:49.560 --> 00:26:54.000
You can't do like 255 dot two bytes.


00:26:54.000 --> 00:26:56.240
You have to put it in a variable name


00:26:56.240 --> 00:26:58.600
so that it doesn't think it's a decimal point.


00:26:58.600 --> 00:27:02.480
And you also, or you can put parentheses around it.


00:27:02.480 --> 00:27:04.840
So you can do 255 with parentheses around it


00:27:04.840 --> 00:27:07.680
and then call to bytes or something like that.


00:27:07.680 --> 00:27:10.680
So there's integers have two bytes,


00:27:10.680 --> 00:27:12.780
so you can convert it to bytes.


00:27:12.780 --> 00:27:17.060
You can use the class method from bytes,


00:27:17.060 --> 00:27:19.360
and you can also do like bit length


00:27:19.360 --> 00:27:22.460
and a bunch of other functions that are pretty cool


00:27:22.460 --> 00:27:24.640
around integers, which is neat.


00:27:24.640 --> 00:27:26.680
And then floats have their own methods.


00:27:26.680 --> 00:27:31.440
Floats have like a, is an integer or is integer ratio,


00:27:31.440 --> 00:27:34.560
or as integer ratio, so it'll convert it to an integer ratio.


00:27:34.560 --> 00:27:35.660
So that's pretty cool.


00:27:35.660 --> 00:27:36.500
- Oh, wow.


00:27:36.500 --> 00:27:40.460
Like some sort of approximation in rational numbers like.


00:27:40.460 --> 00:27:42.700
- Yeah.


00:27:42.700 --> 00:27:46.980
So yeah, I don't have that example pulled up.


00:27:46.980 --> 00:27:48.020
- No, that's cool.


00:27:48.020 --> 00:27:48.860
- There's some, I'm-


00:27:48.860 --> 00:27:50.180
- I have no idea about this stuff.


00:27:50.180 --> 00:27:51.260
- Yeah, I've got a bunch,


00:27:51.260 --> 00:27:53.940
there'll be some links in the show notes


00:27:53.940 --> 00:27:56.620
to the Python documentation for these.


00:27:56.620 --> 00:27:59.140
It's pretty nice.


00:27:59.140 --> 00:28:02.460
Okay, so that's the first thing


00:28:02.460 --> 00:28:04.500
that you should know about numbers is there's methods there.


00:28:04.500 --> 00:28:06.660
So look them up in the documentation


00:28:06.660 --> 00:28:09.480
and we'll have links to the documentation.


00:28:09.480 --> 00:28:12.420
And then the second thing you should know about numbers,


00:28:12.420 --> 00:28:15.180
second over the third is numbers have hierarchy.


00:28:15.180 --> 00:28:20.180
So there's four abstract types in Python for numbers.


00:28:20.180 --> 00:28:25.900
There's complex, real, rational, and integral.


00:28:25.900 --> 00:28:28.460
So complex is the complex,


00:28:28.460 --> 00:28:30.820
that most of them only have one type in it,


00:28:30.820 --> 00:28:35.660
complex, the abstract type of complex has complex,


00:28:35.660 --> 00:28:38.500
real has float, rational has fraction,


00:28:38.500 --> 00:28:40.780
but integral has both int and bool.


00:28:40.780 --> 00:28:42.120
So that's neat.


00:28:42.120 --> 00:28:45.220
They're bool and int are related.


00:28:45.220 --> 00:28:49.720
And then, but then we also have these decimals.


00:28:49.720 --> 00:28:53.720
Yeah, so there's, I wanted to find his stuff on decimal.


00:28:53.720 --> 00:28:55.540
Decimals don't fit.


00:28:55.540 --> 00:28:56.940
So decimals have their,


00:28:56.940 --> 00:29:00.660
they're not really part of this hierarchy at all,


00:29:00.660 --> 00:29:02.700
but they're their own decimal class.


00:29:02.700 --> 00:29:06.480
So there's not an abstract class, but that's okay.


00:29:06.480 --> 00:29:07.320
Decimals are great.


00:29:07.320 --> 00:29:10.040
And people should remember decimal is around


00:29:10.040 --> 00:29:13.560
if you're working with money or something like that.


00:29:13.560 --> 00:29:15.360
- Or super precise science.


00:29:15.360 --> 00:29:17.780
- So these are good.


00:29:17.780 --> 00:29:22.080
Also, because these are just normal types,


00:29:22.080 --> 00:29:24.560
numbers are extensible.


00:29:24.560 --> 00:29:26.880
Oh yeah, a comment about floats are weird.


00:29:26.880 --> 00:29:28.140
Yeah.


00:29:28.140 --> 00:29:29.240
- Floats are always weird on computers.


00:29:29.240 --> 00:29:30.360
- Floats are weird.


00:29:30.360 --> 00:29:32.280
- Yeah, the numbers are extensible.


00:29:32.280 --> 00:29:36.620
Since these are classes, you can derive from them,


00:29:36.620 --> 00:29:39.520
but he comments, which is good.


00:29:39.520 --> 00:29:41.080
You have to be really careful


00:29:41.080 --> 00:29:43.980
because if you want to extend a class,


00:29:43.980 --> 00:29:45.880
there's a whole bunch of dunder methods


00:29:45.880 --> 00:29:47.400
that you have to make sure work right.


00:29:47.400 --> 00:29:50.800
So maybe you don't want to extend it, but you can.


00:29:50.800 --> 00:29:52.320
You can make your own numeric types.


00:29:52.320 --> 00:29:55.240
So this is the third thing.


00:29:55.240 --> 00:29:56.440
Anyway, kind of a neat-


00:29:56.440 --> 00:29:58.440
- I kind of wonder what you might actually


00:29:58.440 --> 00:30:00.080
create those for.


00:30:00.080 --> 00:30:02.960
I mean, maybe you might, well, maybe we'll create an integer


00:30:02.960 --> 00:30:04.980
that has a bounds and is an error


00:30:04.980 --> 00:30:08.100
if you try to make one too large or something.


00:30:08.100 --> 00:30:10.060
- Yeah, I'm not sure.


00:30:10.060 --> 00:30:12.600
- I'm thinking on the spot here, yeah.


00:30:12.600 --> 00:30:16.500
Another thing that's amazing is a complex numbers


00:30:16.500 --> 00:30:19.020
are natively built in the Python.


00:30:19.020 --> 00:30:21.140
- Yeah, and that's really great.


00:30:21.140 --> 00:30:23.500
And that's essential for a lot of scientific


00:30:23.500 --> 00:30:27.540
and measurement work and stuff


00:30:27.540 --> 00:30:29.540
is to have complex numbers around.


00:30:29.540 --> 00:30:30.820
They're truly amazing.


00:30:30.820 --> 00:30:33.580
All right.


00:30:33.580 --> 00:30:35.780
Well, I think that's all.


00:30:35.780 --> 00:30:37.680
I mean, I already did my extras.


00:30:37.680 --> 00:30:39.980
I skipped your set here, your articles.


00:30:39.980 --> 00:30:40.820
I asked you about extras.


00:30:40.820 --> 00:30:42.660
Do you have any actual extras you want to cover?


00:30:42.660 --> 00:30:44.340
- I don't have any actual extras.


00:30:44.340 --> 00:30:46.040
- Have you had any dangerous encounters


00:30:46.040 --> 00:30:48.780
with like warm water?


00:30:48.780 --> 00:30:50.520
Have you maybe stubbed your toe on a rock


00:30:50.520 --> 00:30:53.500
or was there a turtle that came by or?


00:30:53.500 --> 00:30:54.900
You could run into like an eel.


00:30:54.900 --> 00:30:57.300
There are eels in the reefs there


00:30:57.300 --> 00:30:58.500
that you might want to stay away.


00:30:58.500 --> 00:31:00.700
- So I've only been here a couple of days so far.


00:31:00.700 --> 00:31:03.160
We've been, I've been swimming a couple of times right out.


00:31:03.160 --> 00:31:06.480
Right, like you can, you have to look down,


00:31:06.480 --> 00:31:10.160
not across to see the beach from where I'm staying.


00:31:10.160 --> 00:31:12.400
And so I went swimming right here.


00:31:12.400 --> 00:31:14.920
It's kind of fun because it drops off right away.


00:31:14.920 --> 00:31:16.880
So there's a little beach and then it drops,


00:31:16.880 --> 00:31:18.760
it drops deeper right away.


00:31:18.760 --> 00:31:21.060
And that's, but it's not like a big current.


00:31:21.060 --> 00:31:24.240
So you can swim really with only going out a few feet,


00:31:24.240 --> 00:31:25.320
which is nice.


00:31:25.320 --> 00:31:27.800
And then we went to another beach that was like shallow


00:31:27.800 --> 00:31:30.760
for a long time, but then it had coral and stuff.


00:31:30.760 --> 00:31:33.920
And that was really fun to scuba dive or to not scuba,


00:31:33.920 --> 00:31:37.160
but a snorkel over and look around.


00:31:37.160 --> 00:31:40.320
But if you're just wanting to walk out,


00:31:40.320 --> 00:31:43.800
that coral's like tough to walk on and it hurts.


00:31:43.800 --> 00:31:46.520
- Yeah, that stuff's super sharp, but beautiful.


00:31:46.520 --> 00:31:48.700
- But having a lot of fun.


00:31:48.700 --> 00:31:49.680
- Awesome, good to hear.


00:31:49.680 --> 00:31:51.920
Well, I think we should round it out


00:31:51.920 --> 00:31:53.380
with one or two things here.


00:31:53.380 --> 00:31:55.380
We got some jokes.


00:31:55.380 --> 00:31:57.160
Now I saw Josh out in the audience


00:31:57.160 --> 00:31:59.920
and he sent in some jokes, which we'll make part of this soon,


00:31:59.920 --> 00:32:01.920
but I didn't have time for this episode.


00:32:01.920 --> 00:32:06.120
So we got four O'Reilly book covers.


00:32:06.120 --> 00:32:07.360
I love these.


00:32:07.360 --> 00:32:09.920
Not the O'Reilly, because you know the O'Reilly books,


00:32:09.920 --> 00:32:13.320
they always have an animal and a title and whatnot.


00:32:13.320 --> 00:32:19.120
So O'Reilly takes that and kind of puts a funny spin on it.


00:32:19.120 --> 00:32:20.200
I'll do this first one.


00:32:20.200 --> 00:32:20.720
We got four.


00:32:20.720 --> 00:32:21.840
Maybe we could do two each.


00:32:21.840 --> 00:32:24.240
So the first one here has a platypus on the screen.


00:32:24.240 --> 00:32:28.380
It says the little subtitle is, the quote is,


00:32:28.380 --> 00:32:31.000
"The original developer isn't here for a reason."


00:32:31.000 --> 00:32:31.840
And the title is,


00:32:31.840 --> 00:32:34.640
"Losing your will to live, a code maintenance guide."


00:32:34.640 --> 00:32:35.840
(laughing)


00:32:35.840 --> 00:32:36.680
- Yes.


00:32:36.680 --> 00:32:39.240
- Written by the intern.


00:32:39.240 --> 00:32:40.080
- The intern.


00:32:40.080 --> 00:32:44.440
- All right, you wanna take this one?


00:32:44.440 --> 00:32:46.720
- So the title is,


00:32:46.720 --> 00:32:50.080
"Expert vague understanding of computer science,


00:32:50.080 --> 00:32:53.040
probably be able to explain a sorting algorithm


00:32:53.040 --> 00:32:54.340
if it ever comes up.


00:32:54.340 --> 00:32:58.320
- Why? - By the practical dev?


00:32:58.320 --> 00:32:59.280
- Yeah, by the practical dev.


00:32:59.280 --> 00:33:00.920
Very good, very good, okay.


00:33:00.920 --> 00:33:03.680
The next one is an elephant.


00:33:03.680 --> 00:33:06.120
Very proud speaking out loudly.


00:33:06.120 --> 00:33:09.440
It depends, the definitive guide.


00:33:09.440 --> 00:33:12.240
The answer to every programming question ever conceived.


00:33:12.240 --> 00:33:14.480
- It's a short book.


00:33:14.480 --> 00:33:20.920
- All right, bring us home with this last one.


00:33:20.920 --> 00:33:25.360
Okay, so works on my machine, the definitive guide,


00:33:25.360 --> 00:33:26.820
how to convince your manager.


00:33:26.820 --> 00:33:29.320
Yeah.


00:33:29.320 --> 00:33:30.160
- I love it.


00:33:30.160 --> 00:33:32.920
Very good, very good.


00:33:32.920 --> 00:33:36.560
Well, Brian, everyone listening,


00:33:36.560 --> 00:33:37.820
almost everyone is jealous.


00:33:37.820 --> 00:33:40.080
I'm sure there's some people in Hawaii like, yeah,


00:33:40.080 --> 00:33:41.000
I just go there every day,


00:33:41.000 --> 00:33:43.320
but most of the people are probably jealous


00:33:43.320 --> 00:33:45.280
where you get to record from today.


00:33:45.280 --> 00:33:46.880
So thanks for making the time.


00:33:46.880 --> 00:33:48.040
- Thank you.


00:33:48.040 --> 00:33:48.880
- Yeah, it's fun.


00:33:48.880 --> 00:33:51.680
Always fun to be here with the Python Bytes people.


00:33:51.680 --> 00:33:53.320
- Yeah, absolutely.


00:33:53.320 --> 00:33:55.320
Hey, before we end the stream,


00:33:55.320 --> 00:33:56.560
the people in the audience are asking


00:33:56.560 --> 00:33:58.240
if you can turn around your camera.


00:33:58.240 --> 00:33:59.680
Is that possible or will it disconnect you?


00:33:59.680 --> 00:34:00.520
- Do what?


00:34:00.520 --> 00:34:02.200
- Turn the camera around. - They wanna see your view.


00:34:02.200 --> 00:34:03.020
- Oh yeah.


00:34:03.020 --> 00:34:06.720
- Oh man.


00:34:06.720 --> 00:34:07.560
(laughs)


00:34:07.560 --> 00:34:08.600
Dude, that makes it worse.


00:34:08.600 --> 00:34:10.600
That doesn't make it better.


00:34:10.600 --> 00:34:11.560
- Yeah.


00:34:11.560 --> 00:34:12.480
- Yeah, that's awesome.


00:34:12.480 --> 00:34:13.880
- We picked up Liz, of course.


00:34:13.880 --> 00:34:16.240
First time to Hawaii, had to.


00:34:16.240 --> 00:34:17.640
- Yeah, cool.


00:34:17.640 --> 00:34:19.780
All right, well, thanks again for taking the time


00:34:19.780 --> 00:34:21.880
and thanks everyone for being here.


00:34:21.880 --> 00:34:23.380
- Yeah, thanks everybody, bye.

