WEBVTT

00:00:00.000 --> 00:00:08.000
Hey, Brian. Hey, YouTube. How you doing?


00:00:08.000 --> 00:00:13.400
I'm great. Back from PyCon and back to the grind.


00:00:13.400 --> 00:00:18.920
Back to the grind. All right. Well, you want to grind out a couple of Python news items


00:00:18.920 --> 00:00:20.920
here for everyone? Yeah, let's.


00:00:20.920 --> 00:00:28.000
All right. Let's kick it off. Hello, and welcome to Python Bytes, where we deliver Python news


00:00:28.000 --> 00:00:36.880
and headlines directly to your earbuds. This is episode 334 recorded May 3rd, 2023. I'm


00:00:36.880 --> 00:00:37.880
Michael Kennedy.


00:00:37.880 --> 00:00:39.560
And I'm Brian Okken.


00:00:39.560 --> 00:00:44.680
This episode is brought to you this time by us. Support our work through our courses over


00:00:44.680 --> 00:00:48.700
at Talk Python Training. Check out Brian's pytest course. Check out a lot of the other


00:00:48.700 --> 00:00:53.160
courses I did there. Check out the Test and Code podcasts. And we have Patreon supporters


00:00:53.160 --> 00:00:56.440
as well, link on the episode pages on the website.


00:00:56.440 --> 00:01:01.560
Connect with us over on Fosstodon@mkennedy@brianhawkin@pythonbytes over there.


00:01:01.560 --> 00:01:05.600
And if you're not part of the YouTube live stream and you want to be,


00:01:05.600 --> 00:01:11.000
we generally do this on Tuesdays at 11 Pacific time in the morning.


00:01:11.000 --> 00:01:15.200
But today we had to move it, so plus one, plus 23 hours.


00:01:15.200 --> 00:01:16.240
- Yep. - All right.


00:01:16.240 --> 00:01:18.920
- Yeah, Brian. - Sometimes life happens.


00:01:18.920 --> 00:01:21.920
Life does happen, and sometimes PyCons happen.


00:01:21.920 --> 00:01:22.420
Yeah.


00:01:22.420 --> 00:01:23.040
Oh, yeah.


00:01:23.040 --> 00:01:24.640
That was a lot of fun to see you there.


00:01:24.640 --> 00:01:26.720
It was a blast.


00:01:26.720 --> 00:01:29.960
I guess I had a great time.


00:01:29.960 --> 00:01:30.540
How about you?


00:01:30.540 --> 00:01:32.160
You got a lot of work done.


00:01:32.160 --> 00:01:33.920
I got a lot of recording done.


00:01:33.920 --> 00:01:36.200
I'm looking forward to releasing some of those episodes.


00:01:36.200 --> 00:01:37.880
Met a bunch of great people.


00:01:37.880 --> 00:01:39.000
Saw some old friends.


00:01:39.000 --> 00:01:40.400
Got to hang out with you.


00:01:40.400 --> 00:01:43.160
You brought the staff of-- the Python staff of power


00:01:43.160 --> 00:01:48.880
and battled the snake, which was the episode album


00:01:48.880 --> 00:01:50.680
art from last time, which was a lot of fun.


00:01:50.680 --> 00:01:53.560
So yeah, it's starting to come back, isn't it?


00:01:53.560 --> 00:01:57.200
I mean, but still quite as many people or as vendors,


00:01:57.200 --> 00:02:00.040
but it's good to see it coming back to life.


00:02:00.040 --> 00:02:02.040
- Yeah, I really enjoyed it.


00:02:02.040 --> 00:02:04.040
So should we kick in?


00:02:04.040 --> 00:02:05.320
- Let's do it.


00:02:05.320 --> 00:02:06.160
Yeah, jump in.


00:02:06.160 --> 00:02:07.120
What do you got?


00:02:07.120 --> 00:02:09.880
- Well, I was actually talking with one of our friends


00:02:09.880 --> 00:02:14.080
from PyCon that I'm blanking right now.


00:02:14.080 --> 00:02:17.400
So somebody from PyCon, so thank you


00:02:17.400 --> 00:02:19.960
and apologies for forgetting your name right now.


00:02:19.960 --> 00:02:24.960
But I came across actually from several people mentioned Rye


00:02:24.960 --> 00:02:31.180
because we had talked about Hwok, I think Hwok, anyway,


00:02:31.180 --> 00:02:35.200
H-U-A-K, and I think I got corrected


00:02:35.200 --> 00:02:40.200
that the intended pronunciation is Hwok, I think.


00:02:40.200 --> 00:02:41.100
Anyway.


00:02:41.100 --> 00:02:43.020
- I'm on board with that, let's do it.


00:02:43.020 --> 00:02:47.940
- So a similar, so that's what it was,


00:02:47.940 --> 00:02:51.700
was a Rust-based Python project workflow tool.


00:02:51.700 --> 00:02:52.940
So now we have another one.


00:02:52.940 --> 00:02:54.140
This one's called Rye.


00:02:54.140 --> 00:02:57.100
And I don't know what came first,


00:02:57.100 --> 00:02:59.700
but actually this doesn't look that old.


00:02:59.700 --> 00:03:02.060
This is from Armin Ronacher.


00:03:02.060 --> 00:03:04.140
Ronacher, Ronacher, I'm, okay.


00:03:04.140 --> 00:03:05.980
I gotta practice this stuff.


00:03:05.980 --> 00:03:07.940
The dude from Flask that started Flask.


00:03:07.940 --> 00:03:10.700
So I was curious about it


00:03:10.700 --> 00:03:13.500
because he usually kind of knows what he's doing.


00:03:13.500 --> 00:03:17.180
And this is a really pretty interesting project.


00:03:17.180 --> 00:03:19.400
So I tried it out this morning.


00:03:19.400 --> 00:03:22.260
Rye, it says it's Armin's personal one-stop shop


00:03:22.260 --> 00:03:24.460
for all of his Python needs.


00:03:24.460 --> 00:03:27.520
So that, and there's a video which I didn't watch,


00:03:27.520 --> 00:03:29.320
but it's a nine minute intro video.


00:03:29.320 --> 00:03:32.820
So what am I excited about with this?


00:03:32.820 --> 00:03:37.820
So it's more than just project.toml workflow tools.


00:03:37.820 --> 00:03:38.780
It does that.


00:03:38.780 --> 00:03:41.620
So you can do things like initializing a project,


00:03:41.620 --> 00:03:43.260
adding a dependency, removing.


00:03:43.260 --> 00:03:44.700
You can remove a dependency.


00:03:44.700 --> 00:03:46.100
That's kind of a neat trick.


00:03:46.100 --> 00:03:50.380
and then build a wheel and even add lock files,


00:03:50.380 --> 00:03:51.700
which is kind of nice.


00:03:51.700 --> 00:03:55.520
So the other thing that,


00:03:55.520 --> 00:03:57.960
one of the things that I thought was really kind of cool


00:03:57.960 --> 00:03:59.880
is it also manages,


00:03:59.880 --> 00:04:02.980
I'm not gonna find all the details here,


00:04:02.980 --> 00:04:04.740
but it manages Python.


00:04:04.740 --> 00:04:08.780
So you can, what are people using for Pion


00:04:08.780 --> 00:04:10.860
for something to install Python?


00:04:10.860 --> 00:04:12.360
This installs Python also.


00:04:12.360 --> 00:04:13.600
So you can say,


00:04:14.740 --> 00:04:19.740
you could say what, Rai fetch, and then give it like 3.9


00:04:19.740 --> 00:04:25.420
and it'll download and install Python 3.9 for you,


00:04:25.420 --> 00:04:27.500
which like, wow, that's kind of cool.


00:04:27.500 --> 00:04:29.780
And it does it in an interesting way.


00:04:29.780 --> 00:04:35.620
So it uses these IndieGreg Python build standalone releases,


00:04:35.620 --> 00:04:38.120
which I was not familiar with.


00:04:38.120 --> 00:04:43.140
But so there's these different standalone distributions,


00:04:43.140 --> 00:04:47.700
builds of Python. So neat. I forgot to add,


00:04:47.700 --> 00:04:51.180
this is not a windows thing yet. It's just Linux and macOS.


00:04:51.180 --> 00:04:55.300
So I tried it on Mac. So installing a bunch of stuff,


00:04:55.300 --> 00:04:58.140
but where does it install it? It doesn't install it in the normal place.


00:04:58.140 --> 00:05:02.660
It installs it in in your home directory under dot Rye


00:05:02.660 --> 00:05:07.420
RYE. And that, that was surprising to me at first,


00:05:07.420 --> 00:05:11.380
but it's kind of neat that everything's there. So, okay. So it does pie in V,


00:05:11.620 --> 00:05:13.180
PIE and V sort of stuff.


00:05:13.180 --> 00:05:15.040
It can install Pythons for you,


00:05:15.040 --> 00:05:16.620
which is kind of cool with the command line.


00:05:16.620 --> 00:05:18.680
You can install a Python.


00:05:18.680 --> 00:05:20.280
And it's pretty fast.


00:05:20.280 --> 00:05:22.060
It also handles virtual environments.


00:05:22.060 --> 00:05:26.940
So you can do things like add, run,


00:05:26.940 --> 00:05:28.320
run within your virtual environment.


00:05:28.320 --> 00:05:30.420
You can run a command without actually going into it.


00:05:30.420 --> 00:05:33.080
You can say like, Rai run black


00:05:33.080 --> 00:05:35.680
and it'll run black on your project.


00:05:35.680 --> 00:05:38.940
You can say sync and it'll take all of the dependencies


00:05:38.940 --> 00:05:41.600
in your project.toml and install them


00:05:41.600 --> 00:05:42.680
in your virtual environment.


00:05:42.680 --> 00:05:44.180
That's kind of neat.


00:05:44.180 --> 00:05:46.500
And also it's kind of like PIPX also.


00:05:46.500 --> 00:05:50.300
So you can do things like install a global tool,


00:05:50.300 --> 00:05:54.140
like, you know, PIPX install cards


00:05:54.140 --> 00:05:56.240
or PIPX install really whatever you want,


00:05:56.240 --> 00:05:59.020
or black, for instance, if you wanted to,


00:05:59.020 --> 00:06:02.660
if you're gonna like have any global tools


00:06:02.660 --> 00:06:05.380
on your, you know, on your machine.


00:06:05.380 --> 00:06:08.540
It confused me at first, 'cause I tried it


00:06:08.540 --> 00:06:11.200
and I couldn't get it in the thing to run,


00:06:11.200 --> 00:06:14.180
but it doesn't really, it doesn't, it isn't invasive.


00:06:14.180 --> 00:06:19.180
So it's not modifying your .zhrc or your RC files itself.


00:06:19.180 --> 00:06:21.440
You have to do that.


00:06:21.440 --> 00:06:26.440
So it's all going into a home directory.ry.


00:06:26.440 --> 00:06:29.960
And then I think there's a, there's a bin directory


00:06:29.960 --> 00:06:32.120
in there or something like that,


00:06:32.120 --> 00:06:34.100
that you just add to your path.


00:06:34.100 --> 00:06:35.160
So it's doing that.


00:06:35.160 --> 00:06:36.620
The kind of neat thing about that,


00:06:36.620 --> 00:06:39.620
that all that isolation in the dot rye directory


00:06:39.620 --> 00:06:42.100
is that if you decide you don't like it,


00:06:42.100 --> 00:06:46.740
you can just delete it and then delete that directory


00:06:46.740 --> 00:06:48.540
and all that stuff's gone.


00:06:48.540 --> 00:06:49.940
So kind of cool.


00:06:49.940 --> 00:06:52.300
- Yeah, I do like that it just blow away the directory


00:06:52.300 --> 00:06:56.720
and it's gone or it's reset, you know, that's pretty cool.


00:06:56.720 --> 00:07:02.700
It's also interesting to see that this is not a package


00:07:02.700 --> 00:07:06.000
or tool within Python, but outside of Python.


00:07:06.000 --> 00:07:09.880
- Yeah, I mean, it says it uses like,


00:07:09.880 --> 00:07:12.160
it uses virtual environment and it uses,


00:07:12.160 --> 00:07:14.780
actually uses virtual end,


00:07:14.780 --> 00:07:17.640
which is a third-party package that's a little faster


00:07:17.640 --> 00:07:22.440
than the ENV, but it also uses a pip,


00:07:22.440 --> 00:07:23.980
but it doesn't expose any of those.


00:07:23.980 --> 00:07:26.580
So it is kind of interesting that it's outside.


00:07:26.580 --> 00:07:28.000
I kind of like that it's outside


00:07:28.000 --> 00:07:32.400
because you can do things like pipX and PIEENV.


00:07:32.400 --> 00:07:34.800
And for me, it like just worked better.


00:07:34.800 --> 00:07:36.720
I've still had trouble getting,


00:07:36.720 --> 00:07:38.820
pyenv is a cool idea,


00:07:38.820 --> 00:07:41.540
but it mucks with everything in your environment.


00:07:41.540 --> 00:07:43.180
And I don't like that part of it.


00:07:43.180 --> 00:07:44.100
- Yeah, exactly.


00:07:44.100 --> 00:07:45.980
Yeah, I don't like that either.


00:07:45.980 --> 00:07:48.380
So I think the trend I've been talking,


00:07:48.380 --> 00:07:52.560
you know, I did the Python packaging discussion


00:07:52.560 --> 00:07:54.720
on Talk Python a while ago.


00:07:54.720 --> 00:07:57.420
And there's been a lot of talk about this,


00:07:57.420 --> 00:08:01.020
talked to Ofec about Hatch.


00:08:01.020 --> 00:08:05.560
And it's looking like there's a little more interest


00:08:05.560 --> 00:08:09.480
in saying, OK, what if we had a tool that actually not just


00:08:09.480 --> 00:08:11.160
manages environments and packages,


00:08:11.160 --> 00:08:14.160
but actually manages Python?


00:08:14.160 --> 00:08:16.760
For example, like this one, install the version of Python


00:08:16.760 --> 00:08:20.800
you want and do a bunch of other things along those lines.


00:08:20.800 --> 00:08:24.680
So yeah, it's interesting.


00:08:24.680 --> 00:08:27.840
Just a side note, Simon Willison wrote up some notes


00:08:27.840 --> 00:08:29.360
on his "When He Tried Rye."


00:08:29.360 --> 00:08:32.040
So we'll link that article as well.


00:08:32.040 --> 00:08:33.280
- Okay, excellent.


00:08:33.280 --> 00:08:37.800
All right, what is next?


00:08:37.800 --> 00:08:39.600
PyPI is next.


00:08:39.600 --> 00:08:40.760
- Okay.


00:08:40.760 --> 00:08:45.760
- Okay, so remarkably PyPI has 452,000 packages.


00:08:45.760 --> 00:08:51.520
That is insane.


00:08:51.520 --> 00:08:54.820
But what is more insane is the traffic, right?


00:08:54.820 --> 00:08:59.120
So there's some, one of the themes from PyCon this year


00:08:59.120 --> 00:09:03.280
was about sustainability and building for the future.


00:09:03.280 --> 00:09:06.320
Carol Willing gave a great keynote talking about,


00:09:06.320 --> 00:09:09.680
let's make sure that we're investing


00:09:09.680 --> 00:09:12.960
in the front end story for Python,


00:09:12.960 --> 00:09:16.280
investing in the mobile and deployment story for Python.


00:09:16.280 --> 00:09:21.280
And PyPI and the Python Packaging Authority,


00:09:21.280 --> 00:09:22.960
it's kind of there as well, right?


00:09:22.960 --> 00:09:27.960
As we grow in traffic, we need things like


00:09:27.960 --> 00:09:35.880
somebody to watch over the security and somebody to make sure all this stuff is developed and


00:09:35.880 --> 00:09:39.800
polished and people have been doing that but to a large degree in a volunteer way.


00:09:39.800 --> 00:09:48.360
But how does Python pay somebody to work on this? Well, there's been some grants, I think,


00:09:48.360 --> 00:09:53.000
I don't want to say the wrong company, it was from some of the big tech companies are hiring people to


00:09:53.000 --> 00:09:55.920
to do specifically security work,


00:09:55.920 --> 00:09:59.000
like a supply chain type of security for PyPI,


00:09:59.000 --> 00:10:00.640
which is great, right?


00:10:00.640 --> 00:10:03.640
But those are year by year things.


00:10:03.640 --> 00:10:05.920
So what could be done?


00:10:05.920 --> 00:10:08.480
Well, right now, if I go over here on PyPI


00:10:08.480 --> 00:10:10.680
and I search for like Vodacore,


00:10:10.680 --> 00:10:15.680
this is the way to talk to AWS basically,


00:10:15.680 --> 00:10:18.200
from Python to a large degree.


00:10:18.200 --> 00:10:19.020
Who's it run by?


00:10:19.020 --> 00:10:23.300
Oh, it's Garnot amongst others.


00:10:23.300 --> 00:10:26.340
Wait a minute, this is like the official AWS thing.


00:10:26.340 --> 00:10:30.500
Shouldn't this somehow be kind of more official than that?


00:10:30.500 --> 00:10:33.600
And how do I find the other AWS projects?


00:10:33.600 --> 00:10:36.240
I can like email the person or something.


00:10:36.240 --> 00:10:37.400
I don't know, I guess I could go over here


00:10:37.400 --> 00:10:41.120
and see this, the projects if I go to their user account,


00:10:41.120 --> 00:10:43.580
but it's kind of just, you know,


00:10:43.580 --> 00:10:46.020
AWS sort of hacked the system


00:10:46.020 --> 00:10:48.380
by creating an account named AWS,


00:10:48.380 --> 00:10:50.560
but it's not really official.


00:10:50.560 --> 00:10:55.020
You don't get like a branded sort of story, right?


00:10:55.020 --> 00:10:56.420
You just get a, you know, use your profile.


00:10:56.420 --> 00:10:58.620
So GitHub has something like this.


00:10:58.620 --> 00:11:01.180
Like if you went to github.com/talkpython,


00:11:01.180 --> 00:11:04.220
this is the official organization.


00:11:04.220 --> 00:11:06.240
We have 47 repositories.


00:11:06.240 --> 00:11:10.100
We have six people involved and you can sort of see, right?


00:11:10.100 --> 00:11:14.660
You can put this together officially as not Michael,


00:11:14.660 --> 00:11:16.060
but like this group, right?


00:11:16.980 --> 00:11:21.980
So the big announcement is introducing PyPI organizations


00:11:21.980 --> 00:11:23.740
by Idoren.


00:11:23.740 --> 00:11:28.280
So today we are rolling out, today being a few days ago,


00:11:28.280 --> 00:11:31.020
today we are rolling out the first step in our plan


00:11:31.020 --> 00:11:34.740
to build financial support and long-term sustainability


00:11:34.740 --> 00:11:37.300
for the Python Packaging Index,


00:11:37.300 --> 00:11:39.560
while simultaneously giving our users


00:11:39.560 --> 00:11:44.560
one of the most requested features, organization accounts.


00:11:44.680 --> 00:11:46.840
So these are self-managed teams


00:11:46.840 --> 00:11:49.820
with their own exclusive branded web addresses.


00:11:49.820 --> 00:11:51.760
And the goal is to make PyPI easier


00:11:51.760 --> 00:11:55.760
for large community projects, organizations, and companies


00:11:55.760 --> 00:11:59.120
to manage multiple sub teams and multiple packages, right?


00:11:59.120 --> 00:12:04.080
So much like the GitHub org that I was talking about,


00:12:04.080 --> 00:12:06.320
you can say, okay, this person is an admin of it.


00:12:06.320 --> 00:12:08.800
And this person can have right access to that thing,


00:12:08.800 --> 00:12:10.040
but not this thing, right?


00:12:10.040 --> 00:12:13.880
So kind of those types of things instead of,


00:12:13.880 --> 00:12:15.960
"Hey, everyone in the company,


00:12:15.960 --> 00:12:20.960
here's the one and only username and password for PyPI Go."


00:12:20.960 --> 00:12:22.520
- Interesting.


00:12:22.520 --> 00:12:27.440
- Yeah, yeah, and it's like I opened this conversation,


00:12:27.440 --> 00:12:29.920
the idea is to increase sustainability.


00:12:29.920 --> 00:12:34.920
It says, "Last year, PyPI served 235 billion downloads


00:12:34.920 --> 00:12:40.280
for those packages and saw 57% year-over-year growth


00:12:40.280 --> 00:12:43.280
on download counts and bandwidth alike."


00:12:43.280 --> 00:12:46.960
That's great, but it also means costs and effort


00:12:46.960 --> 00:12:49.980
and infrastructure and all that is just going up.


00:12:49.980 --> 00:12:54.020
Also, these organizations are not required.


00:12:54.020 --> 00:12:58.120
AWS can still manage it however they are now if they want.


00:12:58.120 --> 00:13:02.000
So these are opt-in and it does cost, it says a small fee.


00:13:02.000 --> 00:13:05.680
I would love to see small fee equals $100 a month


00:13:05.680 --> 00:13:06.760
or a dollar a month.


00:13:06.760 --> 00:13:08.200
I don't know what this is.


00:13:08.200 --> 00:13:11.520
Maybe it says somewhere, maybe I gotta go in a tiny scale.


00:13:11.520 --> 00:13:12.880
Yes, exactly.


00:13:12.880 --> 00:13:14.420
If you gotta ask, no, just kidding.


00:13:14.420 --> 00:13:15.260
It says small fee.


00:13:15.260 --> 00:13:16.180
(laughing)


00:13:16.180 --> 00:13:18.620
If you gotta ask, it's not for you.


00:13:18.620 --> 00:13:23.620
Anyway, PyPI organizations coming now, check it out.


00:13:23.620 --> 00:13:25.820
- Okay.


00:13:25.820 --> 00:13:28.220
So is it just, okay, we don't know this yet,


00:13:28.220 --> 00:13:33.220
but is it just for things like companies,


00:13:33.220 --> 00:13:36.500
or could it be for like pytest or something like that?


00:13:36.500 --> 00:13:37.780
- Sure, it could be like for pytest.


00:13:37.780 --> 00:13:38.980
I mean, you talked about,


00:13:38.980 --> 00:13:42.580
it says for large community projects,


00:13:42.580 --> 00:13:45.820
For example, you talked about Flask,


00:13:45.820 --> 00:13:46.800
well, you talked about Armin,


00:13:46.800 --> 00:13:49.140
who was the original creator of Flask,


00:13:49.140 --> 00:13:51.080
but that's now under the Pallets project,


00:13:51.080 --> 00:13:52.940
which runs a bunch of different projects


00:13:52.940 --> 00:13:54.520
and has a bunch of contributors.


00:13:54.520 --> 00:13:56.340
Like I think a Pallets organization


00:13:56.340 --> 00:13:58.900
would be potentially reasonable.


00:13:58.900 --> 00:14:02.820
- It's gonna be tough to come up with pricing


00:14:02.820 --> 00:14:03.660
for something like this,


00:14:03.660 --> 00:14:04.700
because like we said,


00:14:04.700 --> 00:14:07.640
some of it is a bunch of volunteer organizations


00:14:07.640 --> 00:14:11.180
and some of it is, yeah, companies.


00:14:11.180 --> 00:14:12.340
So, interesting.


00:14:12.340 --> 00:14:13.340
Yeah, I don't know.


00:14:13.340 --> 00:14:16.020
I've, it probably says somewhere,


00:14:16.020 --> 00:14:19.900
but I didn't see it in this article on the PyPI.


00:14:19.900 --> 00:14:21.260
So. - Nice.


00:14:21.260 --> 00:14:22.100
- Cool.


00:14:22.100 --> 00:14:28.260
- Well, should we jump into the next topic?


00:14:28.260 --> 00:14:29.100
- Yeah, go.


00:14:29.100 --> 00:14:32.420
- Okay, well, I just, we,


00:14:32.420 --> 00:14:35.260
I like this article by Bob Belderbos.


00:14:35.260 --> 00:14:40.100
It's "Five Tips to Learn Any New Python Library Faster."


00:14:40.100 --> 00:14:43.200
And this is actually near and dear to my heart


00:14:43.200 --> 00:14:45.820
because we do this on a weekly basis.


00:14:45.820 --> 00:14:50.220
You know, trying something new.


00:14:50.220 --> 00:14:53.720
And I think I have a condensed version of this,


00:14:53.720 --> 00:14:55.400
but let's kind of walk through,


00:14:55.400 --> 00:14:56.920
these are pretty good tips on,


00:14:56.920 --> 00:14:59.160
if you're thinking about using something


00:14:59.160 --> 00:15:02.040
or just wanna learn, you hear something cool,


00:15:02.040 --> 00:15:04.900
you wanna learn about it, what do you do?


00:15:04.900 --> 00:15:09.600
So his first step is quickly read the main docs.


00:15:09.600 --> 00:15:14.600
So read the manual, RTFM, especially I,


00:15:14.600 --> 00:15:17.520
I like things like if they have a quick start


00:15:17.520 --> 00:15:21.560
or getting started, like I like to read that.


00:15:21.560 --> 00:15:23.560
If there's a video, go ahead and watch it,


00:15:23.560 --> 00:15:27.520
especially if it's a short video, go ahead and try that.


00:15:27.520 --> 00:15:29.720
So, okay, so you know what it does, great.


00:15:29.720 --> 00:15:31.640
And you kind of know how it works.


00:15:31.640 --> 00:15:34.640
And then you install, number two is install it.


00:15:34.640 --> 00:15:35.880
I think this is funny.


00:15:35.880 --> 00:15:37.880
I mean, obviously you have to install it


00:15:37.880 --> 00:15:40.280
in order to play with it, but okay, install it.


00:15:40.280 --> 00:15:44.320
Number three is explore the library,


00:15:44.320 --> 00:15:49.160
essentially play with it, play around, see what you do.


00:15:49.160 --> 00:15:53.360
Bob has a great idea of doing this within Jupyter Notebooks


00:15:53.360 --> 00:15:56.540
to just kind of explore what it does.


00:15:56.540 --> 00:15:57.540
That's pretty great.


00:15:57.540 --> 00:16:01.300
And then you have to kind of make it more deliberate.


00:16:01.300 --> 00:16:02.760
So instead of just playing around


00:16:02.760 --> 00:16:05.160
with like maybe the things it does,


00:16:05.160 --> 00:16:07.400
try to do something with it, try to have a task.


00:16:07.400 --> 00:16:10.680
And this is called deliberate practice.


00:16:10.680 --> 00:16:14.760
But this is where I think you're really


00:16:14.760 --> 00:16:18.080
gonna start learning something is actually trying


00:16:18.080 --> 00:16:18.920
to get something done.


00:16:18.920 --> 00:16:22.140
Because often there'll be extra features


00:16:22.140 --> 00:16:24.040
you don't need right away.


00:16:24.040 --> 00:16:27.760
With a lot of projects, most people use 20%


00:16:27.760 --> 00:16:29.720
of the functionality.


00:16:29.720 --> 00:16:32.160
So you don't learn 100% of the functionality,


00:16:32.160 --> 00:16:35.400
you learn the 20% that you need to get something done.


00:16:35.400 --> 00:16:38.040
So deliver it at exercise.


00:16:38.040 --> 00:16:41.520
And then maybe actually build something or change something.


00:16:41.520 --> 00:16:43.960
So number five is build something.


00:16:43.960 --> 00:16:47.460
So going into a deeper level is actually incorporate


00:16:47.460 --> 00:16:49.200
this library in a project of yours.


00:16:49.200 --> 00:16:52.400
Or if it's similar to another project


00:16:52.400 --> 00:16:53.320
that you're already using,


00:16:53.320 --> 00:16:54.880
and you're just thinking about switching,


00:16:54.880 --> 00:16:56.320
go ahead and try switching it.


00:16:56.320 --> 00:16:57.480
You might not stick with it,


00:16:57.480 --> 00:17:01.500
but kind of feel how easy it is to change over


00:17:01.500 --> 00:17:04.020
to this new project.


00:17:04.020 --> 00:17:05.220
And you might not publish it,


00:17:05.220 --> 00:17:07.620
but you might, it might be great.


00:17:07.620 --> 00:17:09.700
Build, building something small is a good idea


00:17:09.700 --> 00:17:12.620
to just kind of get your hands dirty.


00:17:12.620 --> 00:17:16.200
And then the bonus number six,


00:17:16.200 --> 00:17:17.740
I always like it when the people lie


00:17:17.740 --> 00:17:19.400
about how many tips there are.


00:17:19.400 --> 00:17:20.940
The real bonus is teaching it.


00:17:20.940 --> 00:17:26.020
So, and this, this is like massive,


00:17:26.020 --> 00:17:28.860
and it just ties the bow on the whole learning process


00:17:28.860 --> 00:17:32.540
is trying to teach it back to somebody.


00:17:32.540 --> 00:17:34.700
And this could be a today I learned thing


00:17:34.700 --> 00:17:37.960
on your blog or an actual longer blog post


00:17:37.960 --> 00:17:40.340
or maybe a little tutorial video or something


00:17:40.340 --> 00:17:42.660
or actually just sit down with somebody


00:17:42.660 --> 00:17:44.840
and try to talk to them about it.


00:17:44.840 --> 00:17:49.420
One of the things that I find even just for ourselves


00:17:49.420 --> 00:17:54.380
for this podcast, trying to look at it and go,


00:17:54.380 --> 00:17:55.940
if I was trying to teach this to somebody


00:17:55.940 --> 00:17:58.520
or tell somebody why they should use it, why?


00:17:58.520 --> 00:17:59.940
I mean, what are the different points?


00:17:59.940 --> 00:18:02.220
So like just earlier when I was talking about Rye,


00:18:02.220 --> 00:18:03.460
what's different about that?


00:18:03.460 --> 00:18:06.060
Well, it's different because it's a,


00:18:06.060 --> 00:18:09.140
it handles the Python installs also.


00:18:09.140 --> 00:18:10.780
And it also kind of works like PIPX.


00:18:10.780 --> 00:18:12.660
I mean, the different things about it.


00:18:12.660 --> 00:18:15.420
And then think about like, and then actually try it.


00:18:15.420 --> 00:18:16.240
So I tried it out.


00:18:16.240 --> 00:18:21.240
I went through, set up an extra little project directory


00:18:21.240 --> 00:18:23.820
and tried it out a few times and saw what it did,


00:18:23.820 --> 00:18:26.060
looked at the project Tomo output.


00:18:26.060 --> 00:18:29.300
So yeah, and then just doing that.


00:18:29.300 --> 00:18:32.180
So some great things.


00:18:32.180 --> 00:18:35.460
- Yeah, I think, you know, teach it is really cool.


00:18:35.460 --> 00:18:37.740
You don't have to be an expert at something


00:18:37.740 --> 00:18:41.100
to give a presentation on it, if you structure,


00:18:41.100 --> 00:18:42.940
long as you're genuine about it, right?


00:18:42.940 --> 00:18:45.660
If you said, "Hey, I'm gonna teach you


00:18:45.660 --> 00:18:48.820
"everything you need to know and how awesome this thing is."


00:18:48.820 --> 00:18:51.780
And really you just learned it last week


00:18:51.780 --> 00:18:53.660
at a conference talk, people might call you out,


00:18:53.660 --> 00:18:56.560
like, "You don't seem to really know as much as you came."


00:18:56.560 --> 00:19:01.560
But if you say, "I'm excited about this thing,


00:19:01.960 --> 00:19:07.400
I just learned it. I wanted to share my excitement and just, you know, show you a quick getting started thing.


00:19:07.400 --> 00:19:12.520
Then people won't go like, well, why doesn't he know it? Like you start out, well, I just learned it, but I'm,


00:19:12.520 --> 00:19:18.600
I'm excited. And I think you'll be excited too, if you, you know, so I do think those presentations are awesome.


00:19:18.600 --> 00:19:26.040
I mean, there's plenty of places there's user groups and meetups, regional conferences, like online meetups.


00:19:26.040 --> 00:19:31.640
There, those people are always looking for presenters. They're like, gosh, it's a week away and we don't have a speaker yet.


00:19:31.640 --> 00:19:34.520
So reach out, there's a ton of opportunity to do that,


00:19:34.520 --> 00:19:37.080
or even brown bags at your company.


00:19:37.080 --> 00:19:41.920
- Yeah, I like that you brought up that be honest about it,


00:19:41.920 --> 00:19:45.120
that you can even say,


00:19:45.120 --> 00:19:48.780
I just got excited about this, learned a little bit,


00:19:48.780 --> 00:19:50.980
and I wanna show you what it is.


00:19:50.980 --> 00:19:55.800
Yeah, don't make yourself out to be an expert in the field,


00:19:55.800 --> 00:19:58.120
but that's great.


00:19:58.120 --> 00:20:02.560
This process actually is like exactly how I got started


00:20:02.560 --> 00:20:06.860
blogging about testing is just learning something new,


00:20:06.860 --> 00:20:08.800
writing an article about it and then writing a bunch.


00:20:08.800 --> 00:20:13.800
So if you really want to deep dive into a module or package,


00:20:13.800 --> 00:20:16.040
you can write a series of them.


00:20:16.040 --> 00:20:17.360
Write your getting started one,


00:20:17.360 --> 00:20:21.560
I've done my first thoughts and then move on to like,


00:20:21.560 --> 00:20:23.720
well, how do I do this other thing with it?


00:20:23.720 --> 00:20:24.880
How do I do authentication?


00:20:24.880 --> 00:20:26.680
Well, do a little article on that.


00:20:27.720 --> 00:20:30.620
And then the whole thing could end up being a book.


00:20:30.620 --> 00:20:32.300
I mean, you could make a book or a course


00:20:32.300 --> 00:20:34.280
or something out of it eventually.


00:20:34.280 --> 00:20:36.140
But if you just wanna do a quick one,


00:20:36.140 --> 00:20:37.740
this is a great way.


00:20:37.740 --> 00:20:38.580
- Yeah. - All right.


00:20:38.580 --> 00:20:41.260
- And speaking of just like,


00:20:41.260 --> 00:20:43.460
Bob opened his conversation here with like,


00:20:43.460 --> 00:20:45.260
and some of the things I'm learning are PyScript,


00:20:45.260 --> 00:20:49.220
Flet, PySimple, GUI, Pyright, HTMX, Redis, Leaflet.


00:20:49.220 --> 00:20:50.180
Those are all awesome.


00:20:50.180 --> 00:20:52.780
So I can see why you would wanna learn those.


00:20:52.780 --> 00:20:54.060
And Liz out there says,


00:20:54.060 --> 00:20:56.780
I'm excited about this type of presentations


00:20:56.780 --> 00:21:02.140
tend to be more to the point, I think, which is indeed.


00:21:02.140 --> 00:21:04.900
All right, what's next?


00:21:04.900 --> 00:21:07.380
We have GPUs next.


00:21:07.380 --> 00:21:10.220
So Brian, I know you heard that we


00:21:10.220 --> 00:21:13.340
can do all sorts of amazing things by programming GPUs.


00:21:13.340 --> 00:21:17.620
And if we want to process tons of data,


00:21:17.620 --> 00:21:19.980
maybe we're doing medical research on protein folding,


00:21:19.980 --> 00:21:22.620
we're running around a cluster of GPUs,


00:21:22.620 --> 00:21:27.020
and we could solve some kind of huge computational


00:21:27.020 --> 00:21:29.940
biological problem and make a big impact.


00:21:29.940 --> 00:21:31.820
But if you're gonna do that,


00:21:31.820 --> 00:21:33.420
you sure better hope that you,


00:21:33.420 --> 00:21:34.620
if you're gonna do something like CUDA,


00:21:34.620 --> 00:21:37.820
you better hope that you have not just GPUs,


00:21:37.820 --> 00:21:39.140
that's way too broad, no, no, no,


00:21:39.140 --> 00:21:42.380
you have NVIDIA GPUs.


00:21:42.380 --> 00:21:46.220
And NVIDIA GPUs are sometimes hard to come by.


00:21:46.220 --> 00:21:49.180
A couple of years ago, they were very hard to come by,


00:21:49.180 --> 00:21:50.180
unless you're using the cloud


00:21:50.180 --> 00:21:52.140
where you can go get them, right?


00:21:52.140 --> 00:21:55.000
I have an awesome Mac here.


00:21:55.000 --> 00:21:58.840
I've got my M2 Pro Mac mini now.


00:21:58.840 --> 00:22:03.840
And that thing has 16 GPU cores on it.


00:22:03.840 --> 00:22:09.160
Can I do CUDA or use PyCUDA on it?


00:22:09.160 --> 00:22:12.300
No, 'cause that's not an NVIDIA one.


00:22:12.300 --> 00:22:14.760
And so like on Mac especially,


00:22:14.760 --> 00:22:17.280
it's been extremely hard to do any sort


00:22:17.280 --> 00:22:19.640
of GPU computation, right?


00:22:19.640 --> 00:22:23.400
We had the afterburner cards and those weird external graphics cards


00:22:23.400 --> 00:22:26.780
on the older Intel ones, but those are not even an option


00:22:26.780 --> 00:22:28.780
in the last four years.


00:22:28.780 --> 00:22:31.640
So that's a drawback.


00:22:31.640 --> 00:22:38.000
And on Mac, the graphics language like DirectX on Windows


00:22:38.000 --> 00:22:40.880
or OpenGL and a lot of things is called Metal.


00:22:40.880 --> 00:22:45.180
And so I want to introduce you to a library and an article


00:22:45.180 --> 00:22:47.180
called Python Gets Down to the Metal.


00:22:48.220 --> 00:22:51.340
not like CPU, but GPU.


00:22:51.340 --> 00:22:54.340
And it says, "Are you a Mac and Python person?


00:22:54.340 --> 00:22:56.660
Do you have a trillion numbers to multiply together?


00:22:56.660 --> 00:22:58.660
You don't have all day to wait for them?"


00:22:58.660 --> 00:23:00.660
It says, "Well, Python is quite slow."


00:23:00.660 --> 00:23:02.980
Although the person acknowledges, I've been a happy Python user


00:23:02.980 --> 00:23:04.980
for quite a while.


00:23:04.980 --> 00:23:08.820
You know, for pure number crunching,


00:23:08.820 --> 00:23:11.180
Python is not as fast as the compiled languages


00:23:11.180 --> 00:23:13.180
like C and Rust, which is totally true.


00:23:13.180 --> 00:23:15.940
"Is it plenty fast to drive your web API?"


00:23:15.940 --> 00:23:17.940
Probably. It's probably really fast for that.


00:23:17.940 --> 00:23:19.700
If you literally have a trillion numbers,


00:23:19.700 --> 00:23:22.420
you wanna just crunch them in a loop.


00:23:22.420 --> 00:23:24.360
The advice is not to do that, right?


00:23:24.360 --> 00:23:27.560
The advice is to use something like Pandas or NumPy


00:23:27.560 --> 00:23:32.200
or Dask or something like that, which are really all C-base.


00:23:32.200 --> 00:23:37.200
Or if you had a NVIDIA G graphics card,


00:23:37.200 --> 00:23:41.400
maybe you could use some kind of thing like PyCuda.


00:23:41.400 --> 00:23:45.520
But again, on the super powerful computer,


00:23:45.520 --> 00:23:47.320
it is just, you can't do it.


00:23:47.320 --> 00:23:49.680
There's no way to get an NVIDIA graphics card.


00:23:49.680 --> 00:23:54.800
However, if you could somehow program this metal,


00:23:54.800 --> 00:23:57.000
it says metal does have a way to program it.


00:23:57.000 --> 00:23:59.840
It's just, there's not a lot of things for it.


00:23:59.840 --> 00:24:04.160
And it says there's a language to do on GPU computation


00:24:04.160 --> 00:24:06.100
that looks very C++ like.


00:24:06.100 --> 00:24:09.760
And it says on an M2, this is not the pro,


00:24:09.760 --> 00:24:12.080
but the regular one has eight GP cores,


00:24:12.080 --> 00:24:15.840
which means, let's see,


00:24:15.840 --> 00:24:17.520
that gives some numbers here.


00:24:17.520 --> 00:24:21.040
Yeah.


00:24:21.040 --> 00:24:24.500
Says on the 8GPU core version,


00:24:24.500 --> 00:24:26.080
you could do about a trillion


00:24:26.080 --> 00:24:28.320
floating point operations a second.


00:24:28.320 --> 00:24:31.380
And that's the base version, right?


00:24:31.380 --> 00:24:34.360
And so the bigger models like mine,


00:24:34.360 --> 00:24:36.880
closer up towards 10 trillion, right?


00:24:36.880 --> 00:24:39.800
So mine's probably like six or seven trillion,


00:24:39.800 --> 00:24:42.200
but, you know, the,


00:24:42.200 --> 00:24:44.680
the high, the, was it ultra max?


00:24:44.680 --> 00:24:47.560
I don't know, whatever, the bigger ones can do even more than that, right?


00:24:47.560 --> 00:24:50.760
So that is a ton of power.


00:24:50.760 --> 00:24:53.880
And so we introduce Metal Compute.


00:24:53.880 --> 00:24:56.400
So pip install Metal Compute.


00:24:56.400 --> 00:25:01.760
And with this, it's a little bit like doing SQL, like raw SQL database stuff,


00:25:01.760 --> 00:25:08.000
in that you define a thing that you want to run on the graphics card


00:25:08.000 --> 00:25:13.560
that looks a lot like C++, I think you would imagine, Brian.


00:25:13.560 --> 00:25:15.040
What do you say?


00:25:15.040 --> 00:25:15.960
Yeah.


00:25:15.960 --> 00:25:18.600
Yeah, it's just #include MetalStandardLib,


00:25:18.600 --> 00:25:22.880
using namespace Metal, write a function, do the operations.


00:25:22.880 --> 00:25:27.720
There's a lot of const device float star buffer.


00:25:27.720 --> 00:25:28.880
I mean, it's not easy, right?


00:25:28.880 --> 00:25:33.880
But it's also not that easy on CUDA and other things


00:25:33.880 --> 00:25:35.560
as well, generally speaking.


00:25:35.560 --> 00:25:38.280
So they come up and say, all right, what we're going to do


00:25:38.280 --> 00:25:42.360
is kind of come up with a bunch of a vector and a matrix.


00:25:42.360 --> 00:25:44.400
then we're gonna multiply them and do a bunch of work


00:25:44.400 --> 00:25:47.900
and get the answers out and boom, off it goes.


00:25:47.900 --> 00:25:49.480
Print out the answer.


00:25:49.480 --> 00:25:50.320
Very cool.


00:25:50.320 --> 00:25:53.600
- It's kind of cool that you don't have to,


00:25:53.600 --> 00:25:55.560
you don't have to compile it or anything though.


00:25:55.560 --> 00:25:58.280
I mean, or have it in a separate file.


00:25:58.280 --> 00:25:59.920
It's just a string there.


00:25:59.920 --> 00:26:01.360
That's neat.


00:26:01.360 --> 00:26:02.200
- It is.


00:26:02.200 --> 00:26:04.360
And if I was a, if this was my job


00:26:04.360 --> 00:26:06.240
and someone said, Michael, you're writing this program,


00:26:06.240 --> 00:26:09.240
I would not do what they are doing in this example


00:26:09.240 --> 00:26:12.220
and then put triple quotes and put metal code,


00:26:12.220 --> 00:26:17.220
which is like C++ in there, I would write a metal file


00:26:17.220 --> 00:26:21.680
or call it CPP or whatever's gonna give you


00:26:21.680 --> 00:26:25.180
the best auto-complete and color syntax highlighting


00:26:25.180 --> 00:26:30.180
and then just do path read text and get that,


00:26:30.180 --> 00:26:33.220
in one line, get that out, but have that in a separate file


00:26:33.220 --> 00:26:37.080
so you could sort of more properly reason about it.


00:26:37.080 --> 00:26:39.780
But anyway, it says, look, we run this together


00:26:39.780 --> 00:26:43.340
and did a whole bunch of work.


00:26:43.340 --> 00:26:47.160
Took 70 milliseconds to do 10 multiplications,


00:26:47.160 --> 00:26:49.660
not that impressive 'cause there's a startup cost.


00:26:49.660 --> 00:26:51.220
What if we gave it a billion,


00:26:51.220 --> 00:26:55.080
a billion multiplications to multiply that vector,


00:26:55.080 --> 00:26:55.920
that matrix?


00:26:55.920 --> 00:26:57.260
Oh, that takes 0.3 seconds.


00:26:57.260 --> 00:27:00.320
A billion times, that's a lot.


00:27:00.320 --> 00:27:01.160
- Yeah.


00:27:01.160 --> 00:27:02.960
- So that's pretty good.


00:27:02.960 --> 00:27:06.420
It does say though, look like part of the speed


00:27:06.420 --> 00:27:09.880
Part of the challenge is moving data into memory


00:27:09.880 --> 00:27:11.880
and then out of memory.


00:27:11.880 --> 00:27:13.880
And so the more you move stuff in and out


00:27:13.880 --> 00:27:15.880
rather than load it up with the data


00:27:15.880 --> 00:27:17.880
and then do operations on it, it will be slower.


00:27:17.880 --> 00:27:19.880
So it talks a bit about some of the performance


00:27:19.880 --> 00:27:23.080
things that you can do to make it faster.


00:27:23.080 --> 00:27:25.080
It gives some examples on how to do that.


00:27:25.080 --> 00:27:27.800
There's probably some interesting trade-offs


00:27:27.800 --> 00:27:30.680
with the Apple Silicon having a shared memory


00:27:30.680 --> 00:27:33.940
between memory-memory and GPU memory.


00:27:33.940 --> 00:27:35.940
You don't have to copy it between there.


00:27:35.940 --> 00:27:39.940
But I suspect that you're going from Python to C++ memory


00:27:39.940 --> 00:27:41.940
and back to some kind of serialization.


00:27:41.940 --> 00:27:44.940
That's going to have some kind of cost. Who knows?


00:27:44.940 --> 00:27:48.940
Anyway, there's some cool examples of a Mandelbrot set


00:27:48.940 --> 00:27:52.940
being computed with this, or Julia set, rather.


00:27:52.940 --> 00:27:56.940
But yeah, if people have been dreaming of doing GPU processing


00:27:56.940 --> 00:27:59.940
on their Macs, well, this might be worth checking out.


00:27:59.940 --> 00:28:00.940
Nice.


00:28:00.940 --> 00:28:02.940
The other thing that's kind of cool about it is


00:28:02.940 --> 00:28:08.940
It's not a library that takes Python code


00:28:08.940 --> 00:28:13.280
and compiles it or transpiles it to run on the GPU,


00:28:13.280 --> 00:28:16.020
which would be awesome, but at the same time,


00:28:16.020 --> 00:28:19.020
if it doesn't quite get it right, how much control do you have?


00:28:19.020 --> 00:28:21.520
How useful is it? You don't know.


00:28:21.520 --> 00:28:26.060
Here, if you can just give it the data as an array,


00:28:26.060 --> 00:28:28.760
then you're just writing straight metal, which is a bit of a pain


00:28:28.760 --> 00:28:30.760
if you don't know it, but at the same time,


00:28:30.760 --> 00:28:35.760
it means that it's super flexible, kind of like a DB API.


00:28:35.760 --> 00:28:38.520
You open a connection, you say, here's a string,


00:28:38.520 --> 00:28:41.760
run that on the database, you can give it a selector,


00:28:41.760 --> 00:28:43.680
some kind of query or update,


00:28:43.680 --> 00:28:45.940
and it kind of gets out of the way.


00:28:45.940 --> 00:28:48.800
So it seems pretty flexible in that regard.


00:28:48.800 --> 00:28:50.040
- Yeah. - Yeah.


00:28:50.040 --> 00:28:53.840
- Interesting, and this is Mac only, right?


00:28:53.840 --> 00:28:56.680
So this is- - Yeah, it's Mac only.


00:28:56.680 --> 00:28:59.880
Take that NVIDIA, you can't run Mac, no, just kidding.


00:28:59.880 --> 00:29:02.880
I have both an NVIDIA card and this, but I don't really have--


00:29:02.880 --> 00:29:04.440
I would like to do more GPU stuff,


00:29:04.440 --> 00:29:06.960
but I just don't have a trillion numbers that


00:29:06.960 --> 00:29:09.520
need multiplying right now.


00:29:09.520 --> 00:29:10.920
>>Tom: Well, it's not a bad thing.


00:29:10.920 --> 00:29:13.360
>>Kyle: Someday.


00:29:13.360 --> 00:29:15.840
All right, over to you.


00:29:15.840 --> 00:29:18.400
>>Tom: So we're on to extras.


00:29:18.400 --> 00:29:21.160
I've got just one extra that I wanted to bring up,


00:29:21.160 --> 00:29:25.400
and that was just the textual.


00:29:25.400 --> 00:29:30.760
So Will McGugan posted this picture


00:29:30.760 --> 00:29:32.160
with no explanation.


00:29:32.160 --> 00:29:34.480
Apparently, it's the weird--


00:29:34.480 --> 00:29:37.360
I'm showing a weird bird with a large mouth.


00:29:37.360 --> 00:29:40.160
It's kind of an ugly thing, I think.


00:29:40.160 --> 00:29:42.760
But it's the logo for Frogmouth.


00:29:42.760 --> 00:29:44.120
And what is Frogmouth?


00:29:44.120 --> 00:29:46.680
Frogmouth is the first-- apparently,


00:29:46.680 --> 00:29:48.760
first of possibly more to come--


00:29:48.760 --> 00:29:52.000
applications that the textual team is releasing


00:29:52.000 --> 00:29:53.360
that are built on Textual.


00:29:53.360 --> 00:29:56.280
So Frogmouth is a markdown viewer and browser


00:29:56.280 --> 00:29:57.960
for your terminal.


00:29:57.960 --> 00:30:00.080
And it looks pretty clean.


00:30:00.080 --> 00:30:02.280
I tried it out as well.


00:30:02.280 --> 00:30:05.480
I haven't been able to get these menu bar


00:30:05.480 --> 00:30:08.120
or the tree things on the side.


00:30:08.120 --> 00:30:12.520
But it's like a navigation thing with like--


00:30:12.520 --> 00:30:16.600
you can browse your markdown within textual.


00:30:16.600 --> 00:30:18.240
So it's kind of fun.


00:30:18.240 --> 00:30:20.760
Yeah.


00:30:20.760 --> 00:30:22.720
- Continues to impress with what they can build


00:30:22.720 --> 00:30:23.560
with that stuff.


00:30:23.560 --> 00:30:25.600
- Yeah, and this is the application that I tried


00:30:25.600 --> 00:30:27.220
when I was talking about Rai.


00:30:27.220 --> 00:30:31.160
I tried installing this as a global application


00:30:31.160 --> 00:30:33.120
and it worked just fine.


00:30:33.120 --> 00:30:33.960
- Yeah, cool.


00:30:33.960 --> 00:30:38.740
All right, I would like to serenade the audience, Brian.


00:30:38.740 --> 00:30:40.060
- Oh, yay.


00:30:40.060 --> 00:30:41.920
- Yeah, I was gonna talk about this as a main item.


00:30:41.920 --> 00:30:45.520
This thing called Serenade at serenade.ai


00:30:45.520 --> 00:30:47.640
and it's really neat.


00:30:47.640 --> 00:30:52.640
What it does is you install a plugin for your editor,


00:30:52.640 --> 00:30:57.380
where your editor equals VS Code or JetBrains IDs,


00:30:57.380 --> 00:30:58.800
one of them too.


00:30:58.800 --> 00:31:00.200
And then you run this in the background


00:31:00.200 --> 00:31:01.520
and you can speak to it,


00:31:01.520 --> 00:31:03.440
like you hit a hot key or whatever.


00:31:03.440 --> 00:31:09.280
And you basically start speaking code-oriented operations.


00:31:09.280 --> 00:31:15.220
So there's a cool example that it shows somewhere in here.


00:31:15.220 --> 00:31:17.460
Let's see.


00:31:17.460 --> 00:31:19.620
Yeah, if you go and click on the docs,


00:31:19.620 --> 00:31:24.060
you'll see a bit of a video thing here.


00:31:24.060 --> 00:31:27.560
And basically, you can, I don't know,


00:31:27.560 --> 00:31:30.900
you can go into it and you can say,


00:31:30.900 --> 00:31:34.720
teach you to do tests.


00:31:34.720 --> 00:31:35.980
You can navigate around.


00:31:35.980 --> 00:31:36.820
This is kind of cool.


00:31:36.820 --> 00:31:40.260
So if you're typing in the editor, you're kind of good.


00:31:40.260 --> 00:31:43.020
I mean, I know if you have RSI and stuff, that's not ideal,


00:31:43.020 --> 00:31:45.940
but one of the challenges is like,


00:31:45.940 --> 00:31:48.120
"Okay, I need to leave this and navigate over there."


00:31:48.120 --> 00:31:52.040
So you can say things like, "Open some file name,"


00:31:52.040 --> 00:31:54.940
and it'll actually go through your editor and say,


00:31:54.940 --> 00:31:56.560
"Oh, that's over in this directory.


00:31:56.560 --> 00:31:59.440
"You need to expand the section," and it'll jump to it.


00:31:59.440 --> 00:32:01.360
Or you can say, "Go to this function,"


00:32:01.360 --> 00:32:05.080
or those kinds of things, you can speak to it,


00:32:05.080 --> 00:32:06.600
and it'll do it.


00:32:06.600 --> 00:32:08.680
So anyway, it's really cool.


00:32:08.680 --> 00:32:10.280
Why is it not the main item?


00:32:10.280 --> 00:32:13.560
Because I'm super excited about these kinds of things.


00:32:13.560 --> 00:32:16.760
The reason it's not is it hasn't really been touched


00:32:16.760 --> 00:32:18.720
for coming up on a year.


00:32:18.720 --> 00:32:21.800
And that was just a merge of some PR.


00:32:21.800 --> 00:32:23.080
Is it still going?


00:32:23.080 --> 00:32:23.960
I don't know.


00:32:23.960 --> 00:32:26.440
It was kind of working pretty good.


00:32:26.440 --> 00:32:28.280
But then it was throwing errors.


00:32:28.280 --> 00:32:29.480
So I don't know.


00:32:29.480 --> 00:32:30.480
I love the idea.


00:32:30.480 --> 00:32:33.200
If this thing comes back to life, someone out there,


00:32:33.200 --> 00:32:33.800
let us know.


00:32:33.800 --> 00:32:35.600
Because this is super cool.


00:32:35.600 --> 00:32:39.180
But it doesn't quite seem to be getting kept up


00:32:39.180 --> 00:32:42.320
with the editors and tools and so on.


00:32:42.320 --> 00:32:44.560
I liked your comment in the show notes.


00:32:44.560 --> 00:32:47.960
Serenade has seemed to gone silent.


00:32:47.960 --> 00:32:49.800
It has gone silent.


00:32:49.800 --> 00:32:52.560
Thank you.


00:32:52.560 --> 00:32:54.080
But it's still worth checking out.


00:32:54.080 --> 00:32:54.840
It's kind of cool.


00:32:54.840 --> 00:32:55.880
And then Brian Skin is--


00:32:55.880 --> 00:33:03.160
we've been talking a lot about packaging on this episode.


00:33:03.160 --> 00:33:06.560
And I did my packaging discussion,


00:33:06.560 --> 00:33:10.280
and sort of inspired by that, or maybe just the discussion


00:33:10.280 --> 00:33:13.920
that I was also inspired by.


00:33:13.920 --> 00:33:19.160
They're setting up a Python distribution packaging round


00:33:19.160 --> 00:33:25.600
table, not just of the people inside Python Core Devs world,


00:33:25.600 --> 00:33:30.680
but in a broader ecosystem for like Anaconda and data science


00:33:30.680 --> 00:33:32.160
and that.


00:33:32.160 --> 00:33:35.840
So they have 13 maintainers across nine projects lined up


00:33:35.840 --> 00:33:38.960
for Tuesday, May 9.


00:33:38.960 --> 00:33:42.040
And a link to go attend it.


00:33:42.040 --> 00:33:47.400
So if you're interested, you can go check that out.


00:33:47.400 --> 00:33:51.920
Yeah, so I'll put a link in the show notes, yeah?


00:33:51.920 --> 00:33:52.880
Cool.


00:33:52.880 --> 00:33:54.640
Yeah.


00:33:54.640 --> 00:33:56.560
That's it for the extras on my end.


00:33:56.560 --> 00:33:58.840
How about a joke?


00:33:58.840 --> 00:34:01.040
Yeah, but before we go there, I just


00:34:01.040 --> 00:34:04.000
wanted to say I just remembered the person that told me


00:34:04.000 --> 00:34:05.240
about Rye in the first place.


00:34:05.240 --> 00:34:06.720
And now I feel like a dork.


00:34:06.720 --> 00:34:08.160
It was Paul Everett.


00:34:08.160 --> 00:34:10.320
So thanks, Paul, from JetBrains.


00:34:10.320 --> 00:34:11.680
Awesome, yeah.


00:34:11.680 --> 00:34:13.480
Paul was quite the host at PyCon


00:34:13.480 --> 00:34:16.360
and did a bunch of awesome stuff for many people.


00:34:16.360 --> 00:34:18.480
So much appreciated.


00:34:18.480 --> 00:34:20.600
All right, how about a joke?


00:34:20.600 --> 00:34:23.320
All right, before I put this on the screen,


00:34:23.320 --> 00:34:24.440
I'll tell you about it.


00:34:24.440 --> 00:34:30.760
Sometimes programming is just amazing.


00:34:30.760 --> 00:34:32.240
You just get in the zone and you just go,


00:34:32.240 --> 00:34:34.200
look what I built, boom, boom, boom, boom.


00:34:34.200 --> 00:34:37.400
Other times you end up with a bald patch


00:34:37.400 --> 00:34:38.800
where you've been tearing your hair out.


00:34:38.800 --> 00:34:40.960
You're like, no, why?


00:34:40.960 --> 00:34:42.960
You may end up yelling at the computer, right?


00:34:42.960 --> 00:34:44.360
There's just like a bunch of stuff.


00:34:44.360 --> 00:34:49.320
And this joke highlights the small wins


00:34:49.320 --> 00:34:52.020
you might make in this situation, okay?


00:34:52.020 --> 00:34:57.020
So it's just a person with two monitors,


00:34:57.020 --> 00:35:01.680
a bunch of energy drinks crushed next to them,


00:35:01.680 --> 00:35:03.860
bunch of wrappers, empty coffee.


00:35:03.860 --> 00:35:06.040
They've clearly been here for a while.


00:35:06.040 --> 00:35:08.880
And the arms are up like, "Yes! Wow!


00:35:08.880 --> 00:35:11.640
A different error message. Finally, some progress."


00:35:11.640 --> 00:35:13.800
[LAUGHS]


00:35:13.800 --> 00:35:14.880
Yes.


00:35:14.880 --> 00:35:20.440
Have I mentioned that I've been working with a guy named Lauren


00:35:20.440 --> 00:35:22.640
on a Flutter mobile app?


00:35:22.640 --> 00:35:26.000
Let me tell you, there are a lot of tools in that tool chain.


00:35:26.000 --> 00:35:29.080
And more than once, here I have been like,


00:35:29.080 --> 00:35:32.040
"Yes! That's not the same error. We're making progress."


00:35:32.040 --> 00:35:33.240
[LAUGHS]


00:35:33.240 --> 00:35:34.240
Yeah.


00:35:34.240 --> 00:35:36.500
(laughing)


00:35:36.500 --> 00:35:40.960
- This was me yesterday for half the day.


00:35:40.960 --> 00:35:45.960
Working with a Docker compile that used Docker


00:35:45.960 --> 00:35:48.320
and artifactory and a whole bunch of other.


00:35:48.320 --> 00:35:49.240
- Yeah, yeah.


00:35:49.240 --> 00:35:50.880
- Simple stuff.


00:35:50.880 --> 00:35:52.480
- Indeed.


00:35:52.480 --> 00:35:57.440
All right, well, let's hope for different error messages


00:35:57.440 --> 00:35:58.720
for anyone out there struggling


00:35:58.720 --> 00:36:01.960
and then eventually, more error messages.


00:36:01.960 --> 00:36:03.440
- That's a good one.


00:36:03.440 --> 00:36:06.640
Like, may you have a different error message tomorrow.


00:36:06.640 --> 00:36:07.480
- Exactly.


00:36:07.480 --> 00:36:09.440
May you live in interesting times


00:36:09.440 --> 00:36:12.920
and may you have different error messages.


00:36:12.920 --> 00:36:14.320
All right, well, thanks for being here, Brian.


00:36:14.320 --> 00:36:15.720
Thanks everyone for listening.


00:36:15.720 --> 00:36:17.240
- All right, bye.


00:36:17.240 --> 00:36:18.080
- Bye, y'all.


00:36:18.080 --> 00:36:28.080
[BLANK_AUDIO]

