WEBVTT

00:00:00.001 --> 00:00:06.700
Hey, Brian. Hey, everyone out there in the live stream or the live stream, rewind

00:00:06.700 --> 00:00:09.300
or whatever you call it when you watch it. It's not a live stream, but it used to be

00:00:09.300 --> 00:00:18.220
welcome. Shall we kick this off? Yeah, let's let's do it. Hello, and welcome to Python

00:00:18.220 --> 00:00:23.160
bytes where we deliver Python news and headlines directly to your earbuds. This is episode

00:00:23.160 --> 00:00:33.460
418 recorded January 27th, 2025. And I am Michael Kennedy and I'm Brian Okken. And this episode

00:00:33.460 --> 00:00:39.620
is brought to you by us. Check out Brian's pie test course, check out his course and a bunch

00:00:39.620 --> 00:00:44.240
of my courses over at Talk Python Training. And thank you to Patrion subscriber, subscriber

00:00:44.240 --> 00:00:48.960
supporters there. We appreciate all of you. And even if you don't do any of those things,

00:00:48.960 --> 00:00:52.840
we appreciate that you listen. That's why we get to do this stuff. If you want to connect

00:00:52.840 --> 00:01:00.360
with us, we're blue sky masted on mostly these days links for Brian, me and the show all

00:01:00.360 --> 00:01:06.200
in the show notes. You can join us live Python by set of him slash live. A few of you are

00:01:06.200 --> 00:01:11.800
most of you aren't. That's fine. But we do that if you want to join usually Monday at 10

00:01:11.800 --> 00:01:16.920
a.m. Pacific time. Sometimes things go a little haywire. You can always watch the video replay

00:01:16.920 --> 00:01:24.440
on the episode page if it's available. And finally, Brian and I are crafting. We're continuing

00:01:24.440 --> 00:01:34.840
to hone our artisan craft Brian for the artisan newsletter. So if, if people want to get the

00:01:34.840 --> 00:01:38.600
newsletter, they can go right to Python by set of them click on newsletter. It's the very center

00:01:38.600 --> 00:01:44.360
of the five buttons in the hero image. And all you got to do is give us your name and email,

00:01:44.360 --> 00:01:51.880
and we will send you summaries, insights, the joke, and a couple of things we're doing different

00:01:51.880 --> 00:01:55.880
now. Brian's trying to put the TLDR stuff at the front so you can skim it really quick as well as

00:01:55.880 --> 00:02:01.960
the joke so people can have fun with that kind of stuff. So if they want that, they can check it out.

00:02:03.000 --> 00:02:05.880
And with that, what would you like to talk about first today?

00:02:05.880 --> 00:02:09.640
Brian Smith: I actually want to talk about something that's not really

00:02:09.640 --> 00:02:16.280
wonderful, but I think we should talk about it anyway. So this last weekend, we lost Michael Ford.

00:02:16.280 --> 00:02:25.240
And many of you might not know who that is, but he was influential. He's a core Python dev and influential

00:02:25.240 --> 00:02:32.600
with a lot of the early stuff in Python and PyCon, at least early in my perspective. So

00:02:33.240 --> 00:02:41.080
one of the things that he is known for is one of the contributors to the unit test library within

00:02:41.080 --> 00:02:52.040
Python. And then also he wrote a package called mock that was separate for a while, but then I think it

00:02:52.040 --> 00:03:02.200
was 3.3 or something early in the three X's got incorporated into the standard library as unit test.mock. So if you're mocking

00:03:02.200 --> 00:03:08.120
anything, even if you use so py test mock is where I usually use often, but it's a wrapper around that

00:03:08.120 --> 00:03:16.360
library. So a lot of great stuff from Michael. He was a larger than life character. There is an in memoriam

00:03:18.680 --> 00:03:26.440
Brian Smith: That's up on the python.org discuss site started by Guido and a couple of things that Guido

00:03:26.440 --> 00:03:34.280
mentioned is that that Michael's an original thinker started the tradition of having the language summit

00:03:34.280 --> 00:03:42.760
events at PyCon. That's pretty big. And if I recall, the IRC was that if I recall correctly together

00:03:42.760 --> 00:03:53.880
with Barry Warsaw. So he also wrote the mock library. And in the in memoriam. So Guido suggests that to feel

00:03:53.880 --> 00:04:03.160
free to post positive memories of Michael and perhaps maybe he's got kids 10 and 13. So hopefully

00:04:03.160 --> 00:04:10.600
later they can look back and see how influential he was. And I'm I really had a hard time with this.

00:04:10.600 --> 00:04:19.080
actually. I had a couple losses in my family and and recently and just I wasn't really close to Michael, but

00:04:19.080 --> 00:04:25.960
I kind of wish I would have been. I did interview him. I tried to interview him early and

00:04:28.120 --> 00:04:36.360
eventually did in 2021 get to talk to him about mocking on for the testing code podcast. So

00:04:36.360 --> 00:04:42.040
just listen to this. It's a great again. It's a great episode. He's got some great advice towards

00:04:42.040 --> 00:04:48.200
software development and testing. So check that out also. There's also a really great write up from

00:04:48.200 --> 00:04:50.840
so Nicholas Toller V

00:04:51.800 --> 00:04:57.320
who I've also had on the testing code podcast. Also a great guy. He's a he's the dude from the

00:04:57.320 --> 00:05:08.520
MU or MU editor. He wrote up my friend, Michael, a post about losing losing Michael. And there's some great pictures.

00:05:08.520 --> 00:05:15.400
He was a larger than life. That's a great one. Larger than life character. There's a paragraph in here

00:05:15.400 --> 00:05:21.480
I wanted to read. He was a walking paradox, both completely certain of himself and yet always

00:05:21.480 --> 00:05:28.920
questioning everything. He didn't shy away from fiercely independent thinking often about the oddest of subjects and through

00:05:28.920 --> 00:05:35.320
and through the most extraordinary original and I dare say weird lines of argument anyway.

00:05:35.320 --> 00:05:38.920
Goodbye, Michael. You will be missed. So

00:05:38.920 --> 00:05:41.560
Yeah, thoughts out to

00:05:41.560 --> 00:05:46.440
the whole community friends family. I didn't get a chance to meet Michael, but

00:05:46.440 --> 00:05:50.280
certainly it looks like he was very influential

00:05:51.160 --> 00:05:51.480
Yeah.

00:05:51.480 --> 00:05:51.480
Yeah.

00:05:51.480 --> 00:05:54.280
All right.

00:05:54.280 --> 00:05:54.680
All right.

00:05:54.680 --> 00:05:54.680
All right.

00:05:54.680 --> 00:05:57.720
Hopefully you got something a little less depressing next for us.

00:05:57.720 --> 00:06:02.360
Yes. I well, it starts with a real smiley picture. So it's going to start out pretty well.

00:06:02.360 --> 00:06:05.880
I had Calvin Hendrix Parker from six feet up on

00:06:05.880 --> 00:06:10.440
talk Python and we talked about this deployment

00:06:10.440 --> 00:06:15.880
system kind of like cookie cutter, but way more more than that.

00:06:16.600 --> 00:06:23.080
So it's going to be like a whole infrastructure for initially Django apps, but growing from there.

00:06:23.080 --> 00:06:27.880
Anyway, during that, we talked about a bunch of the building blocks of those tools and of that

00:06:27.880 --> 00:06:31.720
framework. And that's how we get to the next one.

00:06:31.720 --> 00:06:39.360
something called valky do you remember um i mean you know redis right so redis key value stores

00:06:39.360 --> 00:06:47.280
people sometimes group it in the database category for when you're doing uh like surveys

00:06:47.280 --> 00:06:54.360
and what database you use redis json or sql server like huh i wonder which one i should

00:06:54.360 --> 00:06:59.440
pick which of these which of these fit which of these don't or whatever but it you know redis is

00:06:59.440 --> 00:07:04.240
kind of a key value store mostly in memory cache high speed but can be used for other things for

00:07:04.240 --> 00:07:12.060
queues i believe it can persist well anyway it's gone through some funky licensing this is not new

00:07:12.060 --> 00:07:18.000
by the way that's not new but it's been that way for a little while and i don't know i've always had

00:07:18.000 --> 00:07:27.680
prickly reactions with the folks from redis but whatever um i ran across this thing called valky

00:07:27.680 --> 00:07:36.560
like value key key value store and valky is a truly open source no license no cost no nothing

00:07:36.560 --> 00:07:44.880
alternative to redis so an open source in-memory data store that can kind of be a primary database

00:07:44.880 --> 00:07:49.040
if you want it to be but it's not its main goal so here i'll just give you the quick

00:07:49.040 --> 00:07:56.480
uh first paragraph valky is an open source high performance key value data store that supports a

00:07:56.480 --> 00:08:02.160
variety of workloads such as caching primarily right message queues and can act as a primary database

00:08:02.160 --> 00:08:07.440
valky can run either as a standalone daemon or in a cluster which is pretty awesome with replication

00:08:07.440 --> 00:08:13.600
and high availability options it even has native support for well strings obviously numbers probably

00:08:13.600 --> 00:08:19.040
but hashes list sets so you can ask for probably like i want to query into this dictionary type of thing

00:08:19.040 --> 00:08:27.760
pretty cool people can check it out if you go to the github somewhere there's got to be a github right here we go

00:08:30.400 --> 00:08:32.400
and you go to the repositories

00:08:32.400 --> 00:08:44.240
somewhere oh there it is right there finally found it 18 000 github stars 700 forks so it's it's got a lot of life to it and

00:08:46.000 --> 00:08:52.080
let's see does it tell you how old it was about a year old i think anyway isn't that cool i think it's

00:08:52.080 --> 00:08:59.120
really neat yeah you'll definitely check this out i do too i'm pretty excited about it i'm not using

00:08:59.120 --> 00:09:04.160
anything like this yet but there's some situations where i might be able to use this recently and

00:09:04.160 --> 00:09:09.040
certainly this is something i would give a hard look at if i was doing a key value in memory cache type

00:09:09.040 --> 00:09:15.600
of thing especially with the failover and the replication because a lot of times you've got to

00:09:15.600 --> 00:09:20.240
restart these things they have to repopulate the cache and that can be really kind of slow and you know

00:09:20.240 --> 00:09:24.960
like c systems fall down then they can't quite get back up because the cache isn't there and they keep

00:09:24.960 --> 00:09:30.960
getting killed and anyway these are pretty neat technologies if you need them and valky yeah check it out

00:09:32.880 --> 00:09:42.160
cool all right back to you uh let's see doing this again okay um there i'm gonna go back to michael

00:09:42.160 --> 00:09:48.800
ford again because um actually in 2017 he wrote an article called 30 best practices for software

00:09:48.800 --> 00:09:58.160
development and testing and i think i didn't didn't talk about it on this podcast because my intent was to

00:09:58.160 --> 00:10:04.240
talk about it on testing code and interview michael and um and that was a long story as to why we

00:10:04.240 --> 00:10:09.840
didn't talk about this but i i can't believe we haven't covered this yet so a really great article

00:10:09.840 --> 00:10:14.960
30 best practices um i'm not going to read all of them but i want to read like a few of them

00:10:14.960 --> 00:10:21.440
uh yagni uh it's not the only place i've listened to heard the term yagni but yagni is number one

00:10:21.440 --> 00:10:26.320
yagni stands for you ain't gonna need it so don't write code that you think that you might need in

00:10:26.320 --> 00:10:32.080
the future but don't need yet just don't do that you write it in the future because you might not

00:10:32.080 --> 00:10:36.160
need it yeah people stress so much about this like oh we got a plan for the future we got to get just

00:10:36.160 --> 00:10:41.840
right or just embrace refactoring just in factoring right like write it so it works now and if you need

00:10:41.840 --> 00:10:45.840
to change it there's all sorts of amazing tools to change it source control doesn't

00:10:45.840 --> 00:10:52.160
not break it so you can save it tools through factor just test to make sure it works yep um

00:10:52.160 --> 00:11:00.080
gonna jump down a little bit a bunch of great stuff in here uh oh i love this when uh when it comes to

00:11:00.080 --> 00:11:07.040
api design simple things should be simple complex things should be possible um i can't remember i don't

00:11:07.040 --> 00:11:13.200
remember if i got this from him or not but i live by this uh trying to keep the easy things easy

00:11:13.760 --> 00:11:21.040
and uh it can be complicated for the not easy things that's okay um number six is um unit test

00:11:21.040 --> 00:11:30.400
tests uh unit tests test to the unit of behavior not the unit of implement implementation and these are

00:11:30.400 --> 00:11:37.440
kind of fighting words uh uh this is pretty much the difference between classical versus

00:11:37.440 --> 00:11:42.400
macus test driven development but um i stand by michael's side on this one

00:11:43.520 --> 00:11:48.960
number eight we got a couple more that i want to hit number eight um code is the enemy it can go wrong

00:11:48.960 --> 00:11:55.280
it needs maintenance write less code delete code don't write code you don't need um the less code it's

00:11:55.280 --> 00:12:01.280
true the less code you got the less bugs could be in there um for the most part as a general rule

00:12:01.280 --> 00:12:09.600
uh last one that i want more about nine as well by the way oh nine yeah inevitably code comments become

00:12:09.600 --> 00:12:16.080
lies over time yeah definitely in practice few people update comments i i still remember that i had a

00:12:16.080 --> 00:12:21.360
code base that there's so many comments in them and there were boilerplate comments that in order to

00:12:21.360 --> 00:12:28.400
understand the code i wrote a script to copy the entire code base into a different directory structure

00:12:28.400 --> 00:12:34.000
and strip all the comments out and it was so much easier to deal with um gosh i feel that way about help

00:12:34.000 --> 00:12:40.640
help docs help strings doc strings sometimes yeah it's like there's three lines of code and 18 lines

00:12:40.640 --> 00:12:45.520
of doc string like wow if that just weren't there i could read it yeah and then that can blow up like

00:12:45.520 --> 00:12:51.040
the entire file if each function is like that you've got this exactly um a few hundred lines of code and

00:12:51.040 --> 00:12:59.840
two thousand lines of file anyway anyway um 15 we'll jump to 15 uh the more you have the more you have

00:12:59.840 --> 00:13:06.800
to mock out your test to mock out to test your code the worse your code is um and that was one of the

00:13:06.800 --> 00:13:13.600
things that surprises me coming from him this is the dude that wrote the mock library um and uh and one of

00:13:13.600 --> 00:13:19.920
the things he discusses in the episode where uh i got to interview him is he was developing this when he

00:13:19.920 --> 00:13:27.280
was on a team that was doing uh mockus test you know a mockus isolation test driven development uh philosophy

00:13:27.280 --> 00:13:35.120
and uh and they ran into the issues that i i've run into before also is if you're testing the

00:13:35.120 --> 00:13:41.440
implementation that means when you have to refactor your code your tests don't help at all they just they

00:13:41.440 --> 00:13:48.880
they just all break so testing behavior uh is better and then also um just um trying to not

00:13:48.880 --> 00:13:54.240
uh have to mock your code that's not a hard and fast rule sometimes it's the easiest thing so yeah

00:13:54.240 --> 00:13:59.760
and plus you're gonna hurt its feelings if you mock it it's just not nice i mean sometimes you got to

00:13:59.760 --> 00:14:08.400
just not nice come on yeah that's funny anyway uh great article uh go have a go have a read i've already

00:14:08.400 --> 00:14:14.560
i've reposted it on uh on social media and a lot of people have said uh hey this is great so awesome

00:14:14.560 --> 00:14:22.080
that's good all right i got a question for you brian okay if you're working on a web project and i've

00:14:22.080 --> 00:14:30.480
been working on some web projects and you have to do direct requests like say for example over on python bytes

00:14:32.720 --> 00:14:39.360
if i go to say like our latest which is very very close to being not true but our latest episode

00:14:39.360 --> 00:14:46.480
bugs hide from the light you can see there's a image here and that's the thumbnail from youtube and we have

00:14:46.480 --> 00:14:53.760
stuff in python by set of m that when you load this page it'll look for the youtube link and then it'll talk to youtube

00:14:54.320 --> 00:15:00.080
pull that and get thumbnail now you might think why don't you just put the youtube in bed right there

00:15:00.080 --> 00:15:09.600
because google is parasitic and when you embed a youtube video it puts tracking cookies onto you

00:15:09.600 --> 00:15:15.360
which means we would have to have a cookie banner do you accept our cookies because we're making our

00:15:15.360 --> 00:15:19.360
website better for you by tracking you like i'm pretty sure you're not but okay

00:15:20.880 --> 00:15:26.880
or you could download the image put it in your database and then serve it out of court or flask

00:15:26.880 --> 00:15:32.480
or pyramid or whatever it is you're using right yeah when you do that kind of stuff you need to know what

00:15:32.480 --> 00:15:38.080
the mime type is or the content type more importantly like you need to tell the browser this is not just

00:15:38.080 --> 00:15:42.960
binary stuff but this is an image i know it came from a database and doesn't have a file name but it's a

00:15:42.960 --> 00:15:46.720
png or it's a jpeg or whatever right so back to my item

00:15:48.320 --> 00:15:54.320
mime type.io which i would prefer to say is content type.io but you know for example tell me

00:15:54.320 --> 00:16:00.240
what is the content type of a jpeg well it's probably image slash jpeg but is there a

00:16:00.240 --> 00:16:09.760
e in there like jpeg or is it jpg but you better not get it wrong right so there's the site mime type.io

00:16:09.760 --> 00:16:15.360
and you just type in whatever file extension you think you can imagine it'll tell you

00:16:16.000 --> 00:16:21.600
it's image slash jpeg with any not without and it shows you all the file type extensions for which

00:16:21.600 --> 00:16:27.840
this applies and it gives you like the history of it what if there's other things it's known as

00:16:27.840 --> 00:16:36.400
like sometimes i think if i put in json there might be like json as application slash json but it's

00:16:36.400 --> 00:16:43.600
there's a deprecated text slash json it might also appear as isn't this cool yeah yeah so if you're doing

00:16:43.600 --> 00:16:50.480
web projects and you need to send files you need to specify the content type and here you go this is

00:16:50.480 --> 00:16:58.000
how you do it so i really like this i ran across this in hat tip to a very very similar project for

00:16:58.000 --> 00:17:05.920
http status codes at http statuses.io so for example you've seen 200 201 like 200 is good

00:17:06.480 --> 00:17:14.560
201 is created if you did like a post a new thing or whatever but what is about 203 i don't know man

00:17:14.560 --> 00:17:19.680
but if you click on it it says this is a you know lets you dive into them it's a 203 non-authoritative

00:17:19.680 --> 00:17:25.600
information this request was successful but enclosed but the enclosed payload has been modified from that

00:17:25.600 --> 00:17:33.360
of the origin server's 200 okay response by a transforming proxy whoo but it also shows you like how to get to

00:17:33.360 --> 00:17:40.240
these as enumerations in say python or the new new python and so on right so you're not programming

00:17:40.240 --> 00:17:45.120
with magic numbers like 203 or quote 203 sometimes these are representative strings and i don't know why

00:17:45.120 --> 00:17:52.240
but yeah anyway we're going to come back to this for our joke but the takeaway is mime type.io which i wish

00:17:52.240 --> 00:17:59.760
were called content type.io but whatever it still works okay i like my types yeah like that

00:17:59.760 --> 00:18:06.560
that are stuck in a bubble like i can't get out i know yeah they really they really do act it out

00:18:06.560 --> 00:18:07.680
they do act it out

00:18:07.680 --> 00:18:16.080
sorry no it's all right all right that's it for our main items right yeah i think so you got any extras

00:18:16.080 --> 00:18:23.520
i just noticed just one i noticed um some i'm sorry i noticed somebody posted online today that uh

00:18:23.520 --> 00:18:36.080
uh that um python 1.1 is out actually 31 years ago as of today uh python on january 27th 1994 guido posted

00:18:36.080 --> 00:18:42.720
1.00 is out so anyway tired of deciphering that pearl code you got last week

00:18:44.080 --> 00:18:51.920
sick of cgi let's go frustrated with born shell syntax yeah yeah yeah yeah yeah yeah yeah funny cool

00:18:51.920 --> 00:18:55.200
well i don't know we'll see if that thing takes off

00:18:55.200 --> 00:19:03.520
hope so it's got our future yeah we'll see all right cool i got a few extras i'll keep it quick i don't got a

00:19:03.520 --> 00:19:13.920
lot um speaking of releases python 3 14 0 alpha 4 came out last week minutes after we recorded our

00:19:13.920 --> 00:19:20.560
last episode so since last time something to announce people can check it out it's coming along

00:19:20.560 --> 00:19:25.200
this is alpha 4 that means there's three more alpha releases then we hit beta then you can start to treat

00:19:25.200 --> 00:19:33.840
it seriously as a fixed item right chances are no new features just bug fixes and polish before it goes

00:19:33.840 --> 00:19:38.080
although i'm sure they could decide you know this is too rough we're not going to make it we'll

00:19:38.080 --> 00:19:45.200
take a feature out but the idea is that the betas are fixed yeah and actually so i i usually haven't been

00:19:45.200 --> 00:19:53.760
testing new stuff until like we had to betas but uv has made it so easy to load up uh pre-release stuff

00:19:53.760 --> 00:20:00.400
that i'm testing with for 3.14 already so that's awesome and it's not just easy it's also low impact

00:20:00.400 --> 00:20:06.560
it's not like it you're taking over your machines latest python is now this alpha thing yeah right

00:20:06.560 --> 00:20:14.560
the same goes true for free threaded python right you can get that with uh pretty cool all right uh this

00:20:14.560 --> 00:20:17.600
wasn't even going to be here but then i was thinking about it as we were setting up i just

00:20:17.600 --> 00:20:23.360
set up a fast mail account and wow fast mail is so much better than Proton Mail for what i've been

00:20:23.360 --> 00:20:30.000
doing these days like Proton Mail is always slow and clunky and even things like archiving

00:20:30.000 --> 00:20:34.000
like they have a hot key to archive your mail and you're viewing the mail and you press archive

00:20:34.000 --> 00:20:40.080
it's like three seconds later before it archives it and it goes away like what is it doing so i've

00:20:40.080 --> 00:20:46.640
switched my personal mail over to fast mail and so far i highly recommend it yeah i've been using it for

00:20:46.640 --> 00:20:54.240
a while i love it you like it yeah i'm really enjoying it as well okay well that brings us to our joke

00:20:54.240 --> 00:21:05.280
okay and back to http status codes what episode is it brian i don't remember 418 418. well let's go down to

00:21:05.280 --> 00:21:11.520
that status code 418 and there was somebody in one of the socials mastodon or blue sky i can't remember

00:21:11.520 --> 00:21:17.200
i believe who said it's coming up it's coming up you gotta you gotta do this and oh yeah right they were

00:21:17.200 --> 00:21:21.280
still right and they gave us a picture i can't find the post again so i'm sorry i can't shout out credit

00:21:21.280 --> 00:21:31.520
but thank you for sending that in http statuses.io slash 418 418 client error 418 i'm a teapot this is

00:21:31.520 --> 00:21:37.840
literally in the http spec you can return it for whatever value it serves 418 i'm a teapot any

00:21:37.840 --> 00:21:43.360
attempt to brew coffee with a teapot should result in an error code 418 i'm a teapot the resulting entity

00:21:43.360 --> 00:21:52.960
body may be short and stout i am quite disappointed in python i am disappointed there's a dot net

00:21:52.960 --> 00:22:00.080
enumeration status code status status 418 i'm a teapot there's a rust i'm a teapot there's a go

00:22:00.080 --> 00:22:06.400
status teapot there's no python i'm a teapot they didn't implement all of the status codes come on people

00:22:06.400 --> 00:22:12.320
oh dear this could be my first pet brian yeah i think you should do this as a pet i gotta get this

00:22:12.320 --> 00:22:21.440
i gotta get this accepted um yeah so so one it's funny but also do you think it's like in place just

00:22:21.440 --> 00:22:27.680
you know for something for people to like debug their status codes yeah yeah possibly i'm pretty sure

00:22:27.680 --> 00:22:33.600
it was an april fool's joke that got into this the spec and people are like we're doing it yeah we just

00:22:33.600 --> 00:22:40.720
have to keep it i'm a teapot this is a perfect status code so this is i'm a teapot episode i mean

00:22:41.280 --> 00:22:46.880
show title right there what do you think yeah definitely number 418 i'm a teapot let's go

00:22:46.880 --> 00:22:54.160
all right hopefully the rss readers will still get it i know will they read the 200 okay on the rss or

00:22:54.160 --> 00:23:00.400
will they read the title the 418 i'm a teapot we'll see we're sorry your podcast letter is not short and

00:23:00.400 --> 00:23:10.240
short and stout yeah i hope so well i hope it actually works uh awesome we'll see where it goes

00:23:10.240 --> 00:23:15.120
but that was a lot of fun as has been doing this show for 418 episodes so thanks for being here

00:23:15.120 --> 00:23:21.520
yeah thank you yeah thanks to everyone who listens bye bye

