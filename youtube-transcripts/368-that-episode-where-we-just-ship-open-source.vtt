WEBVTT

00:00:00.001 --> 00:00:01.960
- Hello, Brian.

00:00:01.960 --> 00:00:03.240
Hello, everyone.

00:00:03.240 --> 00:00:04.080
- Hello.

00:00:04.080 --> 00:00:07.060
- Awesome, as always, to be here.

00:00:07.060 --> 00:00:09.560
And I'm pretty excited about stuff

00:00:09.560 --> 00:00:10.680
that we got going on today.

00:00:10.680 --> 00:00:13.120
So looking forward to our show together.

00:00:13.120 --> 00:00:14.080
- Yeah, me too.

00:00:14.080 --> 00:00:16.320
- Shall we kick it off?

00:00:16.320 --> 00:00:17.160
- Yeah, let's.

00:00:17.160 --> 00:00:20.440
- All right, what is the day?

00:00:20.440 --> 00:00:21.680
That's an important part.

00:00:21.680 --> 00:00:24.480
Hello, and welcome to Python Bytes,

00:00:24.480 --> 00:00:26.360
where we deliver Python news and headlines

00:00:26.360 --> 00:00:28.280
directly to your earbuds.

00:00:28.280 --> 00:00:33.280
This is episode 368, recorded January 23rd, 2024.

00:00:33.280 --> 00:00:38.080
I'm Michael Kennedy.

00:00:38.080 --> 00:00:39.200
- And I'm Brian Okken.

00:00:39.200 --> 00:00:43.040
- This episode is sponsored by us.

00:00:43.040 --> 00:00:46.020
Support us by checking out our work.

00:00:46.020 --> 00:00:47.040
We do lots of things.

00:00:47.040 --> 00:00:49.720
We have many, many courses over at Talk Python Training.

00:00:49.720 --> 00:00:52.000
We have the complete pytest course.

00:00:52.000 --> 00:00:53.760
We have Patreon supporters,

00:00:53.760 --> 00:00:57.120
which you can become one in the show page,

00:00:57.120 --> 00:01:00.000
the episode page, and connect with all of us,

00:01:00.000 --> 00:01:02.240
all three of us, Brian, me, and the show

00:01:02.240 --> 00:01:04.440
over on fosseton.org.

00:01:04.440 --> 00:01:06.640
And if you wanna be part of the live episode,

00:01:06.640 --> 00:01:08.880
it's pythonbytes.fm/live.

00:01:08.880 --> 00:01:12.720
Usually, Tuesdays at 10 a.m., we've changed it.

00:01:12.720 --> 00:01:14.000
We have a new time, Brian.

00:01:14.000 --> 00:01:15.000
- New time, yes.

00:01:15.000 --> 00:01:18.400
- New time, so that's the plan for now

00:01:18.400 --> 00:01:20.240
until, it's not the plan,

00:01:20.240 --> 00:01:22.260
but we love it when people show up for the show.

00:01:22.260 --> 00:01:25.640
And now let's dive right in.

00:01:25.640 --> 00:01:27.840
Go for it, Brian, what you got?

00:01:27.840 --> 00:01:30.280
- Well, I wanted to talk about debugging a little bit

00:01:30.280 --> 00:01:34.360
'cause we've got a blog post.

00:01:34.360 --> 00:01:39.360
Actually, it's a blog post and really a newsletter episode

00:01:39.360 --> 00:01:41.840
from Unis.

00:01:41.840 --> 00:01:44.720
It's a site called Syntax Error,

00:01:44.720 --> 00:01:49.720
and it looks like it's a collection of,

00:01:49.800 --> 00:01:52.420
it's a newsletter about debugging, which is kinda nice,

00:01:52.420 --> 00:01:55.540
and somehow I missed it in the past year.

00:01:55.540 --> 00:01:59.700
It started, it looks like February of 2023,

00:01:59.700 --> 00:02:02.060
but we're on episode 11 or issue 11,

00:02:02.060 --> 00:02:04.500
and it's kind of a summary, so it's pretty neat.

00:02:04.500 --> 00:02:06.300
Talking about debugging Python,

00:02:06.300 --> 00:02:10.700
I really love just the concept of this, of the newsletter,

00:02:10.700 --> 00:02:14.420
but also just, it's really good content in a small thing.

00:02:14.420 --> 00:02:16.520
So what is he talking about?

00:02:16.520 --> 00:02:18.540
So if you're debugging some code,

00:02:18.840 --> 00:02:20.880
the first thing you gotta do

00:02:20.880 --> 00:02:22.960
is you gotta get in the right mindset,

00:02:22.960 --> 00:02:25.080
and then you can use some tools.

00:02:25.080 --> 00:02:28.040
So I'm glad that he starts that with the mindset.

00:02:28.040 --> 00:02:32.720
So he's talking about mindset, take a break, stop, breathe,

00:02:32.720 --> 00:02:34.440
and then come back to it.

00:02:34.440 --> 00:02:38.240
And this breaking away from you're frustrated with your code

00:02:38.240 --> 00:02:41.000
to clearing your head is really important.

00:02:41.000 --> 00:02:42.760
I don't skip that.

00:02:42.760 --> 00:02:44.440
I think it's essential.

00:02:44.440 --> 00:02:46.240
Go grab a cup of coffee or something.

00:02:47.160 --> 00:02:49.820
And then using a step-by-step process.

00:02:49.820 --> 00:02:54.100
Don't just, I mean, it's hard to say not to just jump

00:02:54.100 --> 00:02:55.620
to the thing that you think might be broken

00:02:55.620 --> 00:02:56.780
and try to fix it.

00:02:56.780 --> 00:02:58.900
Okay, after you did that and it didn't work,

00:02:58.900 --> 00:03:00.440
then come back to this,

00:03:00.440 --> 00:03:03.300
and then do a step-by-step methodical process.

00:03:03.300 --> 00:03:05.400
And I think it's very helpful.

00:03:05.400 --> 00:03:08.340
There's a little comic here, which is great,

00:03:08.340 --> 00:03:13.340
of Gru from, oh, I forget the name of the movie,

00:03:15.500 --> 00:03:18.880
but he says, "Need to debug an issue,

00:03:18.880 --> 00:03:20.740
"set a break point to get started.

00:03:20.740 --> 00:03:22.300
"The break point never hits.

00:03:22.300 --> 00:03:23.480
"The break point never hits."

00:03:23.480 --> 00:03:24.800
It's pretty funny.

00:03:24.800 --> 00:03:28.040
Anyway, so being methodical about it will help.

00:03:28.040 --> 00:03:32.120
And then I'm glad he brought this up,

00:03:32.120 --> 00:03:35.400
talking about rubber ducking or talking to ducks.

00:03:35.400 --> 00:03:38.520
And this is an age old,

00:03:38.520 --> 00:03:40.520
and I don't know if it ever actually happened

00:03:40.520 --> 00:03:43.360
in my computer science classes.

00:03:43.360 --> 00:03:46.700
In our lab, we had a stuffed monkey

00:03:46.700 --> 00:03:49.180
that if you asked the TAs

00:03:49.180 --> 00:03:54.180
or the grad students that were hanging out in the lab

00:03:54.180 --> 00:03:57.800
for help, they would say, ask the monkey first.

00:03:57.800 --> 00:04:03.020
And so this is just essentially getting a description

00:04:03.020 --> 00:04:06.660
of the bug, the situation, the background information

00:04:06.660 --> 00:04:09.660
in your mind in a way that you can say it out loud

00:04:09.660 --> 00:04:12.840
will sometimes completely solve the problem.

00:04:12.840 --> 00:04:16.180
It's incredible, incredible tool.

00:04:16.180 --> 00:04:18.840
And one of the things that was interesting

00:04:18.840 --> 00:04:22.180
is he talks about brain dump as an alternative solution

00:04:22.180 --> 00:04:24.140
is write it on paper.

00:04:24.140 --> 00:04:26.700
If you're not the kind of person that verbalizing helps,

00:04:26.700 --> 00:04:28.260
writing it on paper might help.

00:04:28.260 --> 00:04:31.020
Okay, now let's get into the tools,

00:04:31.020 --> 00:04:33.140
the tools that help with debugging.

00:04:33.140 --> 00:04:36.660
And I used to feel guilty about this all the time,

00:04:36.660 --> 00:04:38.820
but I reached for print all the time.

00:04:38.820 --> 00:04:42.060
So, or some sort of-

00:04:42.060 --> 00:04:44.600
- Brian, they said, don't do print, come on.

00:04:44.600 --> 00:04:48.160
- So his technique is to start with print

00:04:48.160 --> 00:04:50.780
'cause it's low friction, everybody knows how to do it.

00:04:50.780 --> 00:04:52.580
Plus we have f-strings now.

00:04:52.580 --> 00:04:56.460
And with the equal sign, if you do like curly braces

00:04:56.460 --> 00:04:58.720
and then their variable name with the equal,

00:04:58.720 --> 00:05:01.020
it just says, it's great.

00:05:01.020 --> 00:05:06.020
So anyway, it's really easy to debug print, which is good.

00:05:06.020 --> 00:05:08.420
And it's low friction, it's easy to add.

00:05:09.700 --> 00:05:14.260
Snoop is an interesting, cool toolkit that he talks about

00:05:14.260 --> 00:05:16.000
for helping to see what's going on

00:05:16.000 --> 00:05:18.600
within your code at each step.

00:05:18.600 --> 00:05:20.860
It's pretty cool tool as well.

00:05:20.860 --> 00:05:22.980
Let's just quickly go through some of the other two.

00:05:22.980 --> 00:05:26.340
Those are the two like printing, logging sort of things.

00:05:26.340 --> 00:05:28.340
There's also ice cream that he mentions.

00:05:28.340 --> 00:05:32.380
And there's debuggers.

00:05:32.380 --> 00:05:35.780
So talking about debuggers, this is not,

00:05:35.780 --> 00:05:38.860
interestingly, he hasn't mentioned like IDEs,

00:05:38.860 --> 00:05:41.260
which that's what I usually reach for

00:05:41.260 --> 00:05:44.540
is like either PyCharm or VS Code debugger.

00:05:44.540 --> 00:05:48.580
But sometimes you don't have access to those

00:05:48.580 --> 00:05:51.200
if you've like, if you're SSH'd into something or whatever.

00:05:51.200 --> 00:05:54.860
So invoking, being able to use PDB,

00:05:54.860 --> 00:05:58.340
I think he talks about PDB, which is the Python debugger.

00:05:58.340 --> 00:06:01.780
I learned how to, actually had learned how to do this

00:06:01.780 --> 00:06:06.780
mostly just to talk about using PDB with pytest for the book.

00:06:06.780 --> 00:06:08.660
And now I use it once in a while

00:06:08.660 --> 00:06:11.800
because sometimes it's even more convenient,

00:06:11.800 --> 00:06:14.300
especially when using PDB with talks, it's great.

00:06:14.300 --> 00:06:19.300
So PDB, IPDB, which is an interactive REPL sort of thing.

00:06:19.300 --> 00:06:24.460
PUDB, which is kind of like, it got panels and stuff.

00:06:24.460 --> 00:06:26.640
It's a nice terminal UI.

00:06:26.640 --> 00:06:30.620
Web PDB, which the same thing within a browser.

00:06:30.620 --> 00:06:31.640
It's kind of nice.

00:06:31.640 --> 00:06:33.580
Birdseye is something I hadn't seen before,

00:06:33.580 --> 00:06:35.980
which is kind of cool talking about Birdseye.

00:06:35.980 --> 00:06:39.180
It has these kind of neat diagrams

00:06:39.180 --> 00:06:43.500
with like boxes around stuff as things change.

00:06:43.500 --> 00:06:46.580
It's a interesting interface.

00:06:46.580 --> 00:06:47.780
- It's pretty, yeah.

00:06:47.780 --> 00:06:49.780
- Yeah, I don't know if it's for me,

00:06:49.780 --> 00:06:52.900
but if it resonates with you, that's great.

00:06:52.900 --> 00:06:57.320
Might be worth trying on a project, kind of neat.

00:06:57.320 --> 00:07:02.060
Anyway, and then a quick shout out to some Django tools.

00:07:02.060 --> 00:07:04.100
So if you're debugging Django,

00:07:04.100 --> 00:07:07.700
there's the Django debug toolbar

00:07:07.700 --> 00:07:11.740
and an extension for VS Code called Colo.

00:07:11.740 --> 00:07:15.540
So anyway, some great advice about debugging,

00:07:15.540 --> 00:07:18.300
specifically Python, but really kind of a lot

00:07:18.300 --> 00:07:20.820
of this advice applies to everything.

00:07:20.820 --> 00:07:23.420
So nice, and kind of nice

00:07:23.420 --> 00:07:25.020
that there's a newsletter around that.

00:07:25.020 --> 00:07:26.180
- Yeah, it is a nice newsletter.

00:07:26.180 --> 00:07:27.340
There's something kind of good

00:07:27.340 --> 00:07:29.920
about the permanency of written stuff,

00:07:29.920 --> 00:07:32.660
rather than, I mean, what we do is great.

00:07:32.660 --> 00:07:34.420
And I think it connects with a lot of people,

00:07:34.420 --> 00:07:38.840
but it's harder to go back to it and search it.

00:07:38.840 --> 00:07:41.780
- Yeah, and I kind of like the idea of,

00:07:41.780 --> 00:07:46.220
I know that a lot of newsletter software,

00:07:46.220 --> 00:07:48.420
like Substack and things like that,

00:07:48.420 --> 00:07:51.580
can keep it around for you in Medium.

00:07:51.580 --> 00:07:53.700
But I like the idea of somebody doing a newsletter

00:07:53.700 --> 00:07:56.900
and putting the newsletter things on blog posts

00:07:56.900 --> 00:08:00.020
at the same time for people to reach out to.

00:08:00.020 --> 00:08:00.980
So.

00:08:00.980 --> 00:08:01.820
- Neat.

00:08:01.820 --> 00:08:04.540
- So I might have more to say about that later.

00:08:04.540 --> 00:08:06.220
But I also have something to say

00:08:06.220 --> 00:08:09.780
about what you just pointed out,

00:08:09.780 --> 00:08:11.180
what you just talked about.

00:08:11.180 --> 00:08:13.900
And I have just done a new project.

00:08:13.900 --> 00:08:16.340
I have some things that I've been working on.

00:08:16.340 --> 00:08:18.120
You know, I already talked about the leave in the cloud

00:08:18.120 --> 00:08:20.380
and the interview with Mark Prasenovic

00:08:20.380 --> 00:08:23.180
and how that inspired me to kind of rethink

00:08:23.180 --> 00:08:24.380
how our infrastructure goes.

00:08:24.380 --> 00:08:26.620
And it is just paying so many dividends.

00:08:26.620 --> 00:08:29.740
I'm gonna talk about it in some interesting ways.

00:08:29.740 --> 00:08:30.780
And as part of that,

00:08:30.780 --> 00:08:33.340
I've had to write a little bit of new software

00:08:33.340 --> 00:08:35.460
and I need some logging.

00:08:35.460 --> 00:08:37.580
I'm gonna try Log Guru.

00:08:37.580 --> 00:08:38.740
Log Guru?

00:08:38.740 --> 00:08:41.020
No, no, the G is combined.

00:08:41.020 --> 00:08:43.780
And wow, is this a nice piece of logging software.

00:08:43.780 --> 00:08:45.540
So what I would suggest, Brian,

00:08:45.540 --> 00:08:47.300
if you're feeling the print coming on,

00:08:47.300 --> 00:08:48.500
if you're like, "Oh, I'm gonna print this.

00:08:48.500 --> 00:08:52.420
"I'm gonna print my way to this bug, solving this problem."

00:08:52.420 --> 00:08:55.780
Maybe consider Log Guru-ing your way.

00:08:55.780 --> 00:08:58.060
You just create the Log Guru thing

00:08:58.060 --> 00:09:01.460
and you can say use color and all of that.

00:09:01.460 --> 00:09:04.900
And it will also do print statements just to sys out, right?

00:09:04.900 --> 00:09:08.460
But you can see like right here on their homepage,

00:09:08.460 --> 00:09:11.480
it says like how to do like color and stuff like that.

00:09:11.480 --> 00:09:17.420
And then if you just logger.info or whatever,

00:09:17.420 --> 00:09:20.220
it'll print it out, but way more structured and with color.

00:09:20.220 --> 00:09:21.700
And then if there's an exception,

00:09:21.700 --> 00:09:25.400
you're gonna like say print E, print the exception.

00:09:25.400 --> 00:09:27.540
You could just say logger.exception

00:09:27.540 --> 00:09:30.460
and it will create the trace back

00:09:30.460 --> 00:09:33.240
showing the local variables at every step.

00:09:33.240 --> 00:09:35.020
So instead of having to jump into the debugger,

00:09:35.020 --> 00:09:36.340
you can just print your way to like,

00:09:36.340 --> 00:09:38.940
oh, here's the entire call stack and all the values.

00:09:38.940 --> 00:09:41.460
- So that's pretty cool.

00:09:41.460 --> 00:09:42.980
- I super, super recommend it.

00:09:42.980 --> 00:09:44.320
I've been using Logbook.

00:09:44.320 --> 00:09:47.220
I'm a Log Guru fan.

00:09:47.220 --> 00:09:50.020
I'm resisting the urge to go and rewrite all my logging

00:09:50.020 --> 00:09:53.320
for all of my things because it's not that productive,

00:09:53.320 --> 00:09:55.020
but boy, did my logging look cool.

00:09:56.940 --> 00:09:58.620
All right, that's not what I wanna talk about,

00:09:58.620 --> 00:10:00.140
but I wanna talk about things

00:10:00.140 --> 00:10:01.660
that were kind of inspired by that.

00:10:01.660 --> 00:10:04.180
So first I wanna talk about Umami

00:10:04.180 --> 00:10:08.340
and this has a Python loopback really, really quickly here,

00:10:08.340 --> 00:10:11.940
but let's start from the outside in, okay?

00:10:11.940 --> 00:10:12.780
- Okay.

00:10:12.780 --> 00:10:17.060
- So Brian, I set up Umami at umami.is,

00:10:17.060 --> 00:10:21.980
which is like Google Analytics, but not evil.

00:10:21.980 --> 00:10:23.100
That's awesome, right?

00:10:24.140 --> 00:10:27.620
So the idea is it's privacy preserving.

00:10:27.620 --> 00:10:31.460
It is GDPR and CCPA compliant.

00:10:31.460 --> 00:10:36.180
It's open source and you can buy it as a service, right?

00:10:36.180 --> 00:10:39.240
I can go over here and say pricing for nine bucks.

00:10:39.240 --> 00:10:44.580
Some period I will get some number of websites

00:10:44.580 --> 00:10:47.700
and it'll give me analytics,

00:10:47.700 --> 00:10:50.820
like Google Analytics for my site, right?

00:10:50.820 --> 00:10:51.720
That's pretty cool.

00:10:53.380 --> 00:10:56.100
What's better, the problem with that is

00:10:56.100 --> 00:10:58.780
it's still third-party JavaScript,

00:10:58.780 --> 00:11:00.340
even if they don't use cookies,

00:11:00.340 --> 00:11:01.820
but it's still third-party JavaScript

00:11:01.820 --> 00:11:05.340
and by way of that, it gets blocked a lot,

00:11:05.340 --> 00:11:08.620
especially by the developer crowd, right?

00:11:08.620 --> 00:11:10.820
And that's not a criticism.

00:11:10.820 --> 00:11:12.780
I'm like on the high end of blocking, right?

00:11:12.780 --> 00:11:15.080
Like, no, no, we're not doing this.

00:11:15.080 --> 00:11:18.580
No, you don't need this kind of stuff, right?

00:11:18.580 --> 00:11:20.820
But if you run it on your own infrastructure,

00:11:20.820 --> 00:11:25.420
under your own domain, the app is doing nothing nefarious.

00:11:25.420 --> 00:11:26.860
It's talking to itself for some things

00:11:26.860 --> 00:11:28.060
and it's going back and talking to itself

00:11:28.060 --> 00:11:29.420
for other forward tracking.

00:11:29.420 --> 00:11:32.860
So this is really, really easy to run under Docker

00:11:32.860 --> 00:11:36.380
as a multi-tier Docker app on your own domain,

00:11:36.380 --> 00:11:37.860
which is what I'm doing.

00:11:37.860 --> 00:11:40.380
And so now I can have some really nice insights

00:11:40.380 --> 00:11:42.980
into what are happening on pythonbytes.fm,

00:11:42.980 --> 00:11:45.100
the courses, all that,

00:11:45.100 --> 00:11:48.600
without sharing any data with anyone ever

00:11:48.600 --> 00:11:49.840
and without being blocked

00:11:49.840 --> 00:11:53.020
because it's just code running on our own server,

00:11:53.020 --> 00:11:55.220
just like everything else on the website.

00:11:55.220 --> 00:11:56.300
- That's cool.

00:11:56.300 --> 00:11:57.140
- Awesome, right?

00:11:57.140 --> 00:11:58.700
The problem is if you go over here and you're like,

00:11:58.700 --> 00:12:00.820
awesome, okay, developers, this is me, I'm a developer.

00:12:00.820 --> 00:12:02.860
Let's go, let's take me to the docs.

00:12:02.860 --> 00:12:07.280
And cool, look, there's an API section at the end down here.

00:12:07.280 --> 00:12:09.060
Okay, and now look, there's an API client.

00:12:09.060 --> 00:12:11.220
I don't wanna write code, that's great.

00:12:11.220 --> 00:12:13.580
NPM install API client.

00:12:13.580 --> 00:12:17.160
Oh, crap.

00:12:17.160 --> 00:12:22.160
The only API client for Umami is JavaScript or TypeScript.

00:12:22.160 --> 00:12:23.780
I don't know, it doesn't matter.

00:12:23.780 --> 00:12:25.700
It runs in JavaScript, it's not Python, right?

00:12:25.700 --> 00:12:26.980
Actually TypeScript.

00:12:26.980 --> 00:12:29.220
This whole app is basically TypeScript, right?

00:12:29.220 --> 00:12:34.380
That was until this week.

00:12:34.380 --> 00:12:36.740
So some guy down here named Michael

00:12:36.740 --> 00:12:40.700
released this thing called Umami-Analytics,

00:12:40.700 --> 00:12:43.640
put it on PyPI, go over to the homepage.

00:12:45.020 --> 00:12:48.520
And you can see it talks about how it works.

00:12:48.520 --> 00:12:50.560
Basically, one of the things that's really nice

00:12:50.560 --> 00:12:54.740
about Umami over certain other systems,

00:12:54.740 --> 00:12:59.760
like plausible.io is one that has been thrown around

00:12:59.760 --> 00:13:01.780
in the same space and it's similar,

00:13:01.780 --> 00:13:06.500
is that with Umami, you can send custom events

00:13:06.500 --> 00:13:09.080
that have nothing to do with direct web actions.

00:13:09.080 --> 00:13:14.040
So for example, suppose somebody

00:13:14.860 --> 00:13:18.620
signs up for an account and then opts into your newsletter,

00:13:18.620 --> 00:13:19.720
you just talked about newsletters,

00:13:19.720 --> 00:13:21.340
and then that's a double opt-in.

00:13:21.340 --> 00:13:23.200
So they get an email, which then goes back

00:13:23.200 --> 00:13:26.020
to some other place where they actually say,

00:13:26.020 --> 00:13:28.900
yes, I really, really do wanna get this.

00:13:28.900 --> 00:13:31.880
It'd be cool if you could know, okay, that happened, right?

00:13:31.880 --> 00:13:35.280
And so the whole point of this Python library

00:13:35.280 --> 00:13:38.640
is to add Python-based events to your analytics

00:13:38.640 --> 00:13:40.980
on top of just what the JavaScript is.

00:13:40.980 --> 00:13:42.940
Like you're on this page and then you went to that page

00:13:42.940 --> 00:13:45.220
and you came from this place and you're on this browser.

00:13:45.220 --> 00:13:48.620
It'll let you send in things like somebody bought a course,

00:13:48.620 --> 00:13:51.260
somebody confirmed their email address,

00:13:51.260 --> 00:13:54.940
somebody logged in with the mobile app for the first time.

00:13:54.940 --> 00:13:58.020
Like all of these things that have no straight

00:13:58.020 --> 00:14:00.740
HTML JavaScript experience, you can just pump those in

00:14:00.740 --> 00:14:03.060
right alongside all of your other analytics.

00:14:03.060 --> 00:14:04.860
Still all privacy preserving,

00:14:04.860 --> 00:14:06.900
not sharing data with anybody,

00:14:06.900 --> 00:14:09.380
no retargeting, no cookies, none of that crap.

00:14:09.380 --> 00:14:12.060
Just I wanna view and know what's happening in my app.

00:14:12.060 --> 00:14:14.740
So this thing lets you add a custom events

00:14:14.740 --> 00:14:16.980
and also you can like register multiple sites.

00:14:16.980 --> 00:14:18.640
You can list them out.

00:14:18.640 --> 00:14:23.740
It has both synchronous and asynchronous programming models

00:14:23.740 --> 00:14:26.580
based on Pydantic and HCPX.

00:14:26.580 --> 00:14:28.580
And yeah, super easy to use.

00:14:28.580 --> 00:14:29.700
- Very cool.

00:14:29.700 --> 00:14:30.540
- Isn't that neat?

00:14:30.540 --> 00:14:31.860
- Yeah.

00:14:31.860 --> 00:14:35.220
- So recommend Umami, but one of the problems with Umami

00:14:35.220 --> 00:14:37.940
is there's not really a great client to like round that out.

00:14:37.940 --> 00:14:40.220
So check out the one that I created.

00:14:40.220 --> 00:14:41.060
- Nice.

00:14:41.060 --> 00:14:42.060
- It's gonna be a theme this week.

00:14:42.060 --> 00:14:43.260
So.

00:14:43.260 --> 00:14:45.660
- Apparently, we didn't plan this.

00:14:45.660 --> 00:14:46.540
- No.

00:14:46.540 --> 00:14:47.540
- Yeah.

00:14:47.540 --> 00:14:50.340
If we did, we would have both worn blue shirts.

00:14:50.340 --> 00:14:51.820
Oh, wait, we're both wearing blue shirts.

00:14:51.820 --> 00:14:53.180
- We are wearing blue shirts.

00:14:53.180 --> 00:14:54.540
Oh, my tent is off though.

00:14:54.540 --> 00:14:56.900
All right, over to you.

00:14:56.900 --> 00:14:57.740
- Okay.

00:14:57.740 --> 00:15:00.100
What am I talking about next?

00:15:00.100 --> 00:15:05.100
Oh, actually I had an extra from the last one

00:15:05.100 --> 00:15:09.780
'cause there was a link from Eunice

00:15:09.780 --> 00:15:13.780
about fstrings.help, which I think I've seen before,

00:15:13.780 --> 00:15:14.820
but I kind of forgot about,

00:15:14.820 --> 00:15:18.580
but just looks like a Jupyter notebook

00:15:18.580 --> 00:15:21.140
about fstrings, which is fun.

00:15:21.140 --> 00:15:23.900
Okay, well, I'll have a link of that in the show notes.

00:15:23.900 --> 00:15:27.700
I wanted to mention that,

00:15:27.700 --> 00:15:31.820
so I did an open source thing also.

00:15:31.820 --> 00:15:33.900
So I released a thing called--

00:15:33.900 --> 00:15:35.780
- Oh, you did, okay.

00:15:35.780 --> 00:15:38.220
- pytest suite timeout.

00:15:38.220 --> 00:15:41.500
And there's a little, I guess, a story around it.

00:15:41.500 --> 00:15:45.580
So what happened was I recorded an episode of Python test

00:15:45.580 --> 00:15:47.580
about repeating tests.

00:15:47.580 --> 00:15:51.220
And I noted that pytest repeat doesn't have a timeout,

00:15:51.220 --> 00:15:53.780
but pytest Flake Finder does have a timeout.

00:15:53.780 --> 00:15:57.700
And it'd be kind of neat if repeat had a timeout also.

00:15:57.700 --> 00:16:02.260
And by timeout, I mean, there's like the entire suite.

00:16:02.260 --> 00:16:05.540
So if I want to say like, hey, I want to run like,

00:16:05.540 --> 00:16:06.380
I have an example.

00:16:06.380 --> 00:16:08.700
I want to run my suite like a thousand times

00:16:08.700 --> 00:16:11.060
or a test thousand times,

00:16:11.060 --> 00:16:14.540
'cause I'm looking for flaky behavior or something.

00:16:14.540 --> 00:16:17.460
But I want to make sure that it only runs like 10 minutes.

00:16:17.460 --> 00:16:20.900
Then I want, that's the behavior I wanted.

00:16:20.900 --> 00:16:23.340
I like the entire suite, not individual tests,

00:16:23.340 --> 00:16:25.220
but the entire suite to only be like 10 minutes

00:16:25.220 --> 00:16:26.500
or an hour or whatever.

00:16:26.500 --> 00:16:29.420
That's the behavior I want.

00:16:29.420 --> 00:16:30.900
And I couldn't figure it out.

00:16:30.900 --> 00:16:33.260
And so I wrote this.

00:16:33.260 --> 00:16:36.860
Now it could have been in pytest repeat,

00:16:36.860 --> 00:16:39.660
but while I was thinking about it, I thought,

00:16:39.660 --> 00:16:41.900
well, I have other times where like,

00:16:41.900 --> 00:16:45.460
I've got parameterized tests that are like big lists,

00:16:45.460 --> 00:16:47.260
like 20 different waveforms or something

00:16:47.260 --> 00:16:49.020
that I'm passing through something.

00:16:49.020 --> 00:16:51.620
And sometimes I don't really know

00:16:51.620 --> 00:16:52.980
how long those are gonna take.

00:16:52.980 --> 00:16:54.740
It'd be kind of nice to be able to say,

00:16:54.740 --> 00:16:56.940
hey, I want to make sure that the whole suite

00:16:56.940 --> 00:16:58.620
isn't longer than so much.

00:16:58.620 --> 00:17:02.460
So I made it its own plugin.

00:17:02.460 --> 00:17:04.900
So here it is, pytest suite timeout.

00:17:04.900 --> 00:17:07.420
You just pass it a flag.

00:17:07.420 --> 00:17:10.660
It's still, I just sort of did this a couple of days ago

00:17:10.660 --> 00:17:13.100
and I think there might be bugs in it.

00:17:13.100 --> 00:17:16.420
So I guess don't put it in production yet.

00:17:16.420 --> 00:17:17.260
That's why I never--

00:17:17.260 --> 00:17:18.340
- Well, production.

00:17:18.340 --> 00:17:19.180
- Yeah.

00:17:19.180 --> 00:17:23.540
- It's a little lower bar for test production

00:17:23.540 --> 00:17:25.420
rather than I took down the website.

00:17:25.420 --> 00:17:28.500
I just took down CI/CD is possibly what you might take down,

00:17:28.500 --> 00:17:30.100
which is still a problem.

00:17:30.100 --> 00:17:33.740
- Yeah, well, I think I just ran across this morning

00:17:33.740 --> 00:17:35.020
I was playing with it.

00:17:35.020 --> 00:17:38.220
At least one use case, the word doesn't actually timeout.

00:17:38.220 --> 00:17:41.420
But so that's the behavior when it fails

00:17:41.420 --> 00:17:45.700
is it won't timeout, but we'll work with it and fix it.

00:17:45.700 --> 00:17:46.540
- That's super cool.

00:17:46.540 --> 00:17:49.620
- One of the, I announced it on Mastodon

00:17:49.620 --> 00:17:54.620
and Mike Felder said, that's pretty cool,

00:17:54.620 --> 00:17:58.860
but have you tried pytest-timeout?

00:17:58.860 --> 00:18:01.500
Which, yeah, there's another one called timeout.

00:18:01.500 --> 00:18:04.500
And it seems like that should be like what I want.

00:18:04.500 --> 00:18:08.580
It's just the timeout is, the pytest-timeout is per test.

00:18:08.580 --> 00:18:12.660
It just makes sure that individual tests themselves

00:18:12.660 --> 00:18:16.500
don't run longer than a certain amount.

00:18:16.500 --> 00:18:20.260
And this is kind of like, you should know this, right?

00:18:20.260 --> 00:18:23.260
Probably about how long your tests run,

00:18:23.260 --> 00:18:26.700
but it's Python and software.

00:18:26.700 --> 00:18:28.540
So sometimes infinite loops happen

00:18:28.540 --> 00:18:31.340
or some use case that you never break out of.

00:18:31.340 --> 00:18:36.340
- Well, also just the fact that it's taking way longer

00:18:36.340 --> 00:18:41.700
than it should might be something you want to trigger

00:18:41.700 --> 00:18:43.380
as an error, right?

00:18:43.380 --> 00:18:48.380
Like if for some reason you'd want to talk to a database

00:18:48.380 --> 00:18:51.340
or an API directly and you're not stubbing it out,

00:18:51.340 --> 00:18:56.540
if those things are down, it could take 20 seconds for them

00:18:56.540 --> 00:18:58.700
to say, nope, every single time.

00:18:58.700 --> 00:18:59.660
And you might want to say,

00:18:59.660 --> 00:19:01.180
if this ever takes more than five seconds,

00:19:01.180 --> 00:19:02.980
something's wrong and just kill it.

00:19:02.980 --> 00:19:03.820
You know what I mean?

00:19:03.820 --> 00:19:05.500
Right?

00:19:05.500 --> 00:19:07.060
I think that would even be reasonable.

00:19:07.060 --> 00:19:09.820
- Yeah, so that's the idea around pytest-timeout

00:19:09.820 --> 00:19:11.940
is if it takes longer than a certain amount,

00:19:11.940 --> 00:19:13.020
attempts to kill it.

00:19:13.020 --> 00:19:15.380
And it does, it does like SIG events and stuff

00:19:15.380 --> 00:19:19.220
to try to kill the process that's taking too long.

00:19:19.220 --> 00:19:20.980
So. - Excellent.

00:19:20.980 --> 00:19:23.500
- Whereas the new one, sweet-timeout is nice.

00:19:23.500 --> 00:19:25.140
It won't kill anything,

00:19:26.300 --> 00:19:28.500
but it also, it won't stop something like that,

00:19:28.500 --> 00:19:31.940
but it'll just between tests say,

00:19:31.940 --> 00:19:35.100
hey, this is taking kind of too long, let's stop now.

00:19:35.100 --> 00:19:37.340
So that's. - Okay.

00:19:37.340 --> 00:19:41.900
Well, you might not want to SIG kill either

00:19:41.900 --> 00:19:45.500
because what if it's going to put something in a database,

00:19:45.500 --> 00:19:47.180
do some stuff and then take it back out

00:19:47.180 --> 00:19:49.580
or make a file change and then clean up the temporary files

00:19:49.580 --> 00:19:50.640
or whatever, right?

00:19:50.640 --> 00:19:55.780
- Yeah, the other part of this though,

00:19:55.780 --> 00:19:58.260
is I think it's too nice so far.

00:19:58.260 --> 00:20:01.780
It doesn't throw any exceptions or errors or anything.

00:20:01.780 --> 00:20:03.660
It just stops the counting.

00:20:03.660 --> 00:20:05.940
So if you normally like in this example,

00:20:05.940 --> 00:20:10.540
if I had a thousand and I only get through like 150,

00:20:10.540 --> 00:20:12.620
it just stops, passes everything,

00:20:12.620 --> 00:20:15.620
but it only ran 150 instead of a thousand.

00:20:15.620 --> 00:20:18.860
I'm trying to figure out a way to like alert the user

00:20:18.860 --> 00:20:21.460
a little bit more that there's something wrong.

00:20:21.460 --> 00:20:25.460
So we'll see, it'll grow a little bit after,

00:20:25.460 --> 00:20:26.620
after this. - Cool.

00:20:26.620 --> 00:20:27.620
Oh, excellent.

00:20:27.620 --> 00:20:29.340
Excellent.

00:20:29.340 --> 00:20:30.940
This is a crazy episode of where it's just,

00:20:30.940 --> 00:20:32.780
we all created a bunch of things.

00:20:32.780 --> 00:20:34.820
So let's go back to things we created, huh?

00:20:34.820 --> 00:20:36.300
- Okay. - Excellent.

00:20:36.300 --> 00:20:40.920
This one, also a thing I didn't create,

00:20:40.920 --> 00:20:43.440
but outside in again.

00:20:43.440 --> 00:20:46.500
So I've been using MailChimp for years.

00:20:46.500 --> 00:20:48.140
And when I first started using MailChimp,

00:20:48.140 --> 00:20:51.540
MailChimp is I want to let you subscribe to my newsletter

00:20:51.540 --> 00:20:54.260
and put you into groups so that if I only want to talk

00:20:54.260 --> 00:20:56.140
to the talk Python people, I can send that message.

00:20:56.140 --> 00:20:57.740
If I only want to talk to the Python Bytes people,

00:20:57.740 --> 00:20:59.880
I can send that message, right?

00:20:59.880 --> 00:21:02.120
And the price has just been going up and up and up,

00:21:02.120 --> 00:21:04.540
like hundreds of, $100 this month,

00:21:04.540 --> 00:21:05.860
the next one, another $100.

00:21:05.860 --> 00:21:07.740
And like, what is going on with these people?

00:21:07.740 --> 00:21:09.600
You know, Intuit bought it and it used to be like

00:21:09.600 --> 00:21:11.300
kind of a cute little company.

00:21:11.300 --> 00:21:14.860
And now it's just a accounting firm grinding its users.

00:21:14.860 --> 00:21:16.820
And I kind of don't want anything else to do with it.

00:21:16.820 --> 00:21:21.820
And I would much prefer to not share all of the people,

00:21:22.380 --> 00:21:25.380
customers, people who just want to subscribe their data

00:21:25.380 --> 00:21:27.020
with a third party either, right?

00:21:27.020 --> 00:21:29.580
So I went on, I think I talked about this before.

00:21:29.580 --> 00:21:32.140
Remember I talked about the 10 different options

00:21:32.140 --> 00:21:35.220
that people had sent out of possible newsletter places?

00:21:35.220 --> 00:21:36.060
- Yeah.

00:21:36.060 --> 00:21:37.860
- I wish I remember who told me I'm asset on,

00:21:37.860 --> 00:21:40.300
but somebody said, well, there's these five open source ones

00:21:40.300 --> 00:21:41.500
like, wait a minute.

00:21:41.500 --> 00:21:43.480
Okay, that's interesting.

00:21:43.480 --> 00:21:45.440
And so after a bunch of research,

00:21:45.440 --> 00:21:48.380
I decided to turn on ListMonk.

00:21:48.380 --> 00:21:51.900
And ListMonk is written in Go

00:21:51.900 --> 00:21:54.440
and it's an open source.

00:21:54.440 --> 00:21:55.780
There's not even a SaaS version.

00:21:55.780 --> 00:22:00.060
It's just self-hosted version of basically MailChimp.

00:22:00.060 --> 00:22:00.900
Right?

00:22:00.900 --> 00:22:01.740
You can have different lists,

00:22:01.740 --> 00:22:02.780
people can subscribe to them.

00:22:02.780 --> 00:22:03.620
You can put them into groups,

00:22:03.620 --> 00:22:06.240
you send them emails, all that kind of stuff, right?

00:22:06.240 --> 00:22:07.080
- Yeah.

00:22:07.080 --> 00:22:08.780
- So I, again, 'cause I have all this cool

00:22:08.780 --> 00:22:11.040
Docker infrastructure stuff set up now,

00:22:11.040 --> 00:22:13.500
it was super easy to just move that over

00:22:13.500 --> 00:22:16.180
and run that in Docker, right?

00:22:16.180 --> 00:22:18.100
Just like you, mom, you're like, okay,

00:22:18.100 --> 00:22:20.580
how do I talk to it?

00:22:20.580 --> 00:22:22.740
Go, there's not even an official API client.

00:22:22.740 --> 00:22:25.900
The ones you find are like, well, here's one for PHP.

00:22:25.900 --> 00:22:29.300
There's actually several for Python,

00:22:29.300 --> 00:22:31.020
but they're really bad and they don't work.

00:22:31.020 --> 00:22:32.620
I mean, really bad.

00:22:32.620 --> 00:22:36.860
So some of them, for example,

00:22:36.860 --> 00:22:39.040
are just, they look at the Swagger docs

00:22:39.040 --> 00:22:41.780
or the open API docs and they just auto-generate it.

00:22:41.780 --> 00:22:43.860
But somehow it's like stuck in time,

00:22:43.860 --> 00:22:46.220
auto-generated on an old version that doesn't work anymore.

00:22:46.220 --> 00:22:47.060
I don't know.

00:22:47.060 --> 00:22:48.700
It's like even the auto-generate one doesn't work.

00:22:48.700 --> 00:22:50.860
I'm like, ah, man, I really need this.

00:22:50.860 --> 00:22:54.380
Even more than the umami thing, I need code to be written.

00:22:54.380 --> 00:22:57.540
So like someone creates an account where they buy a course

00:22:57.540 --> 00:22:59.220
and they say, yes, I wanna be, you know,

00:22:59.220 --> 00:23:00.540
I asked them, do you wanna be in the middle of this?

00:23:00.540 --> 00:23:01.660
Yes, I wanna be in there.

00:23:01.660 --> 00:23:03.920
How do I make that happen, right?

00:23:03.920 --> 00:23:05.580
Well, Python, of course.

00:23:05.580 --> 00:23:09.220
So over the next project,

00:23:09.220 --> 00:23:12.060
ListMonk email app API client for Python

00:23:12.060 --> 00:23:15.300
or just pip install a ListMonk.

00:23:15.300 --> 00:23:16.180
- Okay.

00:23:16.180 --> 00:23:18.340
- So over here, this is the next one.

00:23:18.340 --> 00:23:19.180
Super nice.

00:23:19.180 --> 00:23:21.540
You can add a subscriber, get details about them.

00:23:21.540 --> 00:23:22.860
One of the things that's cool in ListMonk

00:23:22.860 --> 00:23:27.860
is there's a arbitrary JSON Python dictionary type thing

00:23:27.860 --> 00:23:31.380
associated with each user.

00:23:31.380 --> 00:23:33.780
So whatever data you wanna put in there, you can.

00:23:33.780 --> 00:23:35.020
And with this thing, you can manage it.

00:23:35.020 --> 00:23:38.140
Like for example, if one thing that's common

00:23:38.140 --> 00:23:41.940
is you have a rating or things along those lines or actions.

00:23:41.940 --> 00:23:43.720
So you could put that into the user

00:23:43.720 --> 00:23:44.780
as part of their user record.

00:23:44.780 --> 00:23:46.340
So you can manage it with that.

00:23:46.340 --> 00:23:47.660
You can search them,

00:23:47.660 --> 00:23:49.820
check the health of your self-hosted thing,

00:23:49.820 --> 00:23:50.960
segment your list.

00:23:50.960 --> 00:23:53.740
Obviously you gotta unsubscribe and delete users.

00:23:53.740 --> 00:23:55.460
You can even send transactional emails.

00:23:55.460 --> 00:23:57.780
So super, super cool stuff.

00:23:57.780 --> 00:24:02.460
Again, one more nice open source thing

00:24:02.460 --> 00:24:07.460
that's not some big super expensive privacy

00:24:07.460 --> 00:24:10.660
questionable SaaS service.

00:24:10.660 --> 00:24:14.540
And instead running good over here.

00:24:14.540 --> 00:24:15.820
It does take a little bit of work.

00:24:15.820 --> 00:24:19.140
It's, Umami is like perfect.

00:24:19.140 --> 00:24:23.000
This is a little clunky in some little edge cases,

00:24:23.000 --> 00:24:24.140
but it's still quite nice.

00:24:24.140 --> 00:24:26.820
So that's the next project.

00:24:26.820 --> 00:24:29.300
Also available on PyPI today.

00:24:29.300 --> 00:24:31.320
- Nice.

00:24:31.320 --> 00:24:35.680
- Oh, well, that's it for our items.

00:24:35.680 --> 00:24:37.940
- Cool. - Hopefully,

00:24:37.940 --> 00:24:38.900
between all these things,

00:24:38.900 --> 00:24:41.940
we can help people write one a little bit better test.

00:24:41.940 --> 00:24:44.420
And two, depend a little bit less

00:24:44.420 --> 00:24:48.260
on just giving up a little bit of privacy

00:24:48.260 --> 00:24:49.980
to trade it in convenience,

00:24:49.980 --> 00:24:52.540
like Google Analytics, for example,

00:24:52.540 --> 00:24:55.340
or to a lesser degree, some of these mail platforms.

00:24:55.340 --> 00:24:56.980
- Yeah. - Yeah.

00:24:56.980 --> 00:24:59.100
And save some money while you got it.

00:24:59.100 --> 00:25:00.380
All right.

00:25:00.380 --> 00:25:03.740
- Well, normally we would jump into some extras

00:25:03.740 --> 00:25:06.420
and I don't have any extras this week.

00:25:06.420 --> 00:25:08.500
So do you have any extras?

00:25:08.500 --> 00:25:09.900
- I do have extras.

00:25:09.900 --> 00:25:12.200
Well, let's see what have I got here.

00:25:12.200 --> 00:25:13.040
Yeah, okay.

00:25:13.040 --> 00:25:14.160
So the first one is, if I'm running,

00:25:14.160 --> 00:25:15.640
self-hosting these things, right?

00:25:15.640 --> 00:25:17.060
I'm running them in a Docker cluster.

00:25:17.060 --> 00:25:21.100
So it's really easy to basically just do a Docker pull,

00:25:21.100 --> 00:25:26.520
restart, you know, relaunch the app, off it goes, right?

00:25:26.520 --> 00:25:27.680
So that's awesome.

00:25:27.680 --> 00:25:30.440
That's one of the reasons I'm willing to run like Umami

00:25:30.440 --> 00:25:33.640
rather than like FS server and all these database things.

00:25:33.640 --> 00:25:35.020
I get a patch and whatever, right?

00:25:35.020 --> 00:25:38.040
Just literally one command to manage

00:25:38.040 --> 00:25:40.320
like 15 multi-tier apps.

00:25:40.320 --> 00:25:41.360
It's awesome.

00:25:41.360 --> 00:25:43.920
But how do you know when there's a new one, right?

00:25:43.920 --> 00:25:44.980
Obviously you could just set it up

00:25:44.980 --> 00:25:46.760
to just do it continuously.

00:25:46.760 --> 00:25:49.960
But what I realized is every GitHub repository,

00:25:49.960 --> 00:25:52.160
this has nothing to do with Umami, just an example.

00:25:52.160 --> 00:25:56.280
Every GitHub repository, if they use releases, right?

00:25:56.280 --> 00:26:00.240
If you go over here and you say like the releases,

00:26:00.240 --> 00:26:04.280
like I have a V01.10 for my Umami thing

00:26:04.280 --> 00:26:06.160
and there's actually two of them.

00:26:06.160 --> 00:26:08.660
If you have that for any project,

00:26:08.660 --> 00:26:13.620
you can just go to the GitHub URL for the web,

00:26:13.620 --> 00:26:17.640
not the dot get thing and just do slash releases.atom.

00:26:17.640 --> 00:26:20.500
And that's an RSS feed for the releases

00:26:20.500 --> 00:26:23.640
for any GitHub project, even if they don't have a blog.

00:26:23.640 --> 00:26:25.040
- Wow.

00:26:25.040 --> 00:26:26.240
- That's cool, right?

00:26:26.240 --> 00:26:27.080
- Yeah.

00:26:27.080 --> 00:26:29.740
I can put this in Feedly then.

00:26:29.740 --> 00:26:31.440
- Yes, I put it in Reader for me.

00:26:31.440 --> 00:26:35.080
And now I have ListMonk and Umami and a few other things.

00:26:35.080 --> 00:26:36.440
And I'm like, if this gets changed,

00:26:36.440 --> 00:26:38.420
I probably wanna just go take a little action

00:26:38.420 --> 00:26:39.260
on that real quick.

00:26:39.260 --> 00:26:41.580
And now it's in my RSS feed.

00:26:41.580 --> 00:26:42.580
- That's pretty cool.

00:26:42.580 --> 00:26:44.020
- Yeah, so very simple.

00:26:44.020 --> 00:26:47.020
Anyone can just watch whatever they want.

00:26:47.020 --> 00:26:49.140
Brian, we both tried to do this one.

00:26:49.140 --> 00:26:50.140
- Yeah.

00:26:50.140 --> 00:26:52.060
- Colo, you mentioned that in your article,

00:26:52.060 --> 00:26:53.660
I ran across this 'cause I,

00:26:53.660 --> 00:26:54.740
sorry, I don't remember the last name,

00:26:54.740 --> 00:26:59.740
but I saw one of my Mastodon followers, Lily.

00:26:59.740 --> 00:27:02.220
She somehow interacted with me

00:27:02.220 --> 00:27:04.980
and like her profile like came by in my app.

00:27:04.980 --> 00:27:08.940
And I saw that she works on this thing called Colo,

00:27:08.940 --> 00:27:10.460
debugging for Django apps.

00:27:10.460 --> 00:27:11.300
I'm like, huh, that's interesting.

00:27:11.300 --> 00:27:12.180
What is this?

00:27:12.180 --> 00:27:14.140
So this is a thing that's in beta.

00:27:14.140 --> 00:27:16.700
It says, "See everything happening

00:27:16.700 --> 00:27:19.060
"in your running Django app."

00:27:19.060 --> 00:27:24.060
And they have a really nice design of their webpage here.

00:27:24.060 --> 00:27:27.680
So probably best to see it visually.

00:27:27.680 --> 00:27:29.680
It says, "Debug your Django app 10 times faster,

00:27:29.680 --> 00:27:31.620
"get instant access, et cetera, et cetera."

00:27:31.620 --> 00:27:34.820
So this is a plugin or extension for VS Code.

00:27:34.820 --> 00:27:39.060
And it just has tons of information all available to you.

00:27:39.060 --> 00:27:42.500
So it has a tab or whatever the thing on the left is,

00:27:42.500 --> 00:27:45.180
you expand like extensions and files

00:27:45.180 --> 00:27:48.500
and it plugs into that thing, a little pane, I guess.

00:27:48.500 --> 00:27:50.940
And it shows you the request response,

00:27:50.940 --> 00:27:53.880
like kind of like a dev tools in a web browser.

00:27:53.880 --> 00:27:58.300
So you can see headers, HTTP requests, responses,

00:27:58.300 --> 00:28:02.420
as kind of a running history of the HTTP exchange

00:28:02.420 --> 00:28:04.820
your browser is having with your Django app.

00:28:04.820 --> 00:28:05.740
That's cool, right?

00:28:05.740 --> 00:28:06.580
- Yeah.

00:28:06.580 --> 00:28:11.020
- And I think it's showing you, not entirely sure,

00:28:11.020 --> 00:28:14.560
but I think it might be showing you even Python code,

00:28:14.560 --> 00:28:16.420
not just web things, right?

00:28:16.420 --> 00:28:19.160
It has local variables, arguments,

00:28:19.160 --> 00:28:21.260
and then it has even like this tree thing

00:28:21.260 --> 00:28:24.660
for visualizing code execution paths.

00:28:24.660 --> 00:28:26.020
So yeah.

00:28:26.020 --> 00:28:29.660
So you click on the, sorry, you click on the request,

00:28:29.660 --> 00:28:30.580
it shows you the code,

00:28:30.580 --> 00:28:32.500
and then it actually shows you the local variables

00:28:32.500 --> 00:28:33.620
that were passed around as well.

00:28:33.620 --> 00:28:34.500
It's pretty neat.

00:28:34.500 --> 00:28:36.620
- Yeah.

00:28:36.620 --> 00:28:38.020
I don't know that the tree,

00:28:38.020 --> 00:28:40.140
that the visual thing is super pretty,

00:28:40.140 --> 00:28:43.220
but I don't know how it is, but I haven't played with it.

00:28:43.220 --> 00:28:44.060
- I agree with you.

00:28:44.060 --> 00:28:44.940
It's awesome.

00:28:44.940 --> 00:28:45.780
Wouldn't use it.

00:28:45.780 --> 00:28:53.620
Yeah, you can do, what is it?

00:28:53.620 --> 00:28:55.940
Inspect all the outbound HTTP requests made.

00:28:55.940 --> 00:28:56.940
That's kind of neat.

00:28:57.940 --> 00:29:00.220
And SQL queries, you can,

00:29:00.220 --> 00:29:03.580
it'll track all the SQL queries that were made.

00:29:03.580 --> 00:29:05.420
Really good for understanding what's happening.

00:29:05.420 --> 00:29:06.260
What's up, Brian?

00:29:06.260 --> 00:29:07.100
Good.

00:29:07.100 --> 00:29:07.940
- That's just really nice

00:29:07.940 --> 00:29:11.140
because you never know when your queries get out of hand

00:29:11.140 --> 00:29:13.220
and you're making way more than you need to.

00:29:13.220 --> 00:29:14.060
- Exactly.

00:29:14.060 --> 00:29:16.620
Especially in the ORM space,

00:29:16.620 --> 00:29:19.180
because it's so easy to do lazy loading and say,

00:29:19.180 --> 00:29:20.180
give me all the customers.

00:29:20.180 --> 00:29:23.420
For each customer, get me this thing about them.

00:29:23.420 --> 00:29:25.380
And that's a relationship.

00:29:25.380 --> 00:29:26.780
So every time through the loop,

00:29:26.780 --> 00:29:27.940
it's another database query,

00:29:27.940 --> 00:29:31.220
the so-called N plus one performance problem.

00:29:31.220 --> 00:29:32.060
And you would just see like,

00:29:32.060 --> 00:29:34.100
whoa, the SQL thing is full.

00:29:34.100 --> 00:29:35.980
I thought there were like two or three requests

00:29:35.980 --> 00:29:37.380
and now it's just full.

00:29:37.380 --> 00:29:39.180
What is happening here?

00:29:39.180 --> 00:29:40.700
So that's great.

00:29:40.700 --> 00:29:41.940
Yeah, anyway.

00:29:41.940 --> 00:29:43.300
- Ooh, background jobs.

00:29:43.300 --> 00:29:46.460
- Yeah, even contract your celery background tasks.

00:29:46.460 --> 00:29:47.420
So right now it's in beta.

00:29:47.420 --> 00:29:48.540
I'm pretty sure this is a thing

00:29:48.540 --> 00:29:50.180
that costs money at some point.

00:29:50.180 --> 00:29:53.980
Yeah, so if you VS Code,

00:29:53.980 --> 00:29:55.580
check this out, it's kind of interesting.

00:29:55.580 --> 00:29:56.940
- Yeah, definitely.

00:29:56.940 --> 00:29:57.780
Neat.

00:29:57.780 --> 00:29:58.620
- Neat, all right.

00:29:58.620 --> 00:30:01.940
Another thing that's cool is I've talked about

00:30:01.940 --> 00:30:07.260
warp before and I've been using warp at the terminal a lot.

00:30:07.260 --> 00:30:11.100
One of the drawbacks of warp for all of its beauty

00:30:11.100 --> 00:30:14.460
and cool features is that it doesn't,

00:30:14.460 --> 00:30:16.380
it only works on Mac for now,

00:30:16.380 --> 00:30:19.900
which is a limitation, let's call it.

00:30:19.900 --> 00:30:20.860
- Not for me.

00:30:20.860 --> 00:30:22.940
For other people.

00:30:22.940 --> 00:30:24.620
- Yeah, not for me, but for a good chunk.

00:30:24.620 --> 00:30:26.740
Now I say it's only somewhat of a limitation.

00:30:26.740 --> 00:30:31.740
So like on my Mac, if I SSH into my Docker cluster thing

00:30:31.740 --> 00:30:33.340
that I've been talking about,

00:30:33.340 --> 00:30:37.340
warp will like inject the warp behaviors

00:30:37.340 --> 00:30:39.860
into the Linux shell over there.

00:30:39.860 --> 00:30:44.060
So I get like end-to-end warp as a Mac user.

00:30:44.060 --> 00:30:46.340
But if I was actually a Linux user,

00:30:46.340 --> 00:30:49.100
I couldn't use warp 'cause it's a Mac app

00:30:49.100 --> 00:30:50.140
until pretty much now, right?

00:30:50.140 --> 00:30:53.220
So coming soon is warp on Linux.

00:30:53.220 --> 00:30:54.580
So people wanna sign up for that.

00:30:54.580 --> 00:30:58.580
I put a link for in the Linux terminal signup page

00:30:58.580 --> 00:30:59.460
to get on the wait list.

00:30:59.460 --> 00:31:03.820
And warp is just a super neat way to work

00:31:03.820 --> 00:31:07.100
with your terminals, more like an editor.

00:31:07.100 --> 00:31:10.860
It's got AI built in, which most AI built in things I hate.

00:31:10.860 --> 00:31:12.700
They're really bad, but you can say things like,

00:31:12.700 --> 00:31:15.300
just say hash, and then it'll say something like,

00:31:15.300 --> 00:31:20.580
search this directory for all files with this pattern,

00:31:20.580 --> 00:31:21.620
except that directory.

00:31:21.620 --> 00:31:24.260
And then it'll go, here's the command that you type.

00:31:24.260 --> 00:31:26.220
That kind of stuff that I'm like,

00:31:26.220 --> 00:31:28.420
what's the parameter to this?

00:31:28.420 --> 00:31:29.580
How do I grep that again?

00:31:29.580 --> 00:31:31.180
I have no idea.

00:31:31.180 --> 00:31:32.860
So anyway, it's pretty cool.

00:31:32.860 --> 00:31:35.940
- I wonder if it's set up, I'm just curious if it's,

00:31:35.940 --> 00:31:38.420
since they're doing different platforms,

00:31:38.420 --> 00:31:41.700
if they've got a UI layer and then a warp core.

00:31:41.700 --> 00:31:44.740
- Oh my God, they probably do have a warp core.

00:31:44.740 --> 00:31:46.300
And if they didn't name it that,

00:31:46.300 --> 00:31:48.660
they've really lost a chance here, right?

00:31:48.660 --> 00:31:50.660
- Yeah, hopefully.

00:31:50.660 --> 00:31:53.620
- So I talked about this before I realized

00:31:53.620 --> 00:31:56.420
through search about two and a half years ago,

00:31:56.420 --> 00:32:00.300
something called BPyTOP.

00:32:00.300 --> 00:32:02.780
So BPyTOP is an awesome,

00:32:02.780 --> 00:32:04.100
over, if it gets too small,

00:32:04.100 --> 00:32:06.380
it thinks it's gonna hide all of its graphics,

00:32:06.380 --> 00:32:10.860
way to look at how your server is going.

00:32:10.860 --> 00:32:15.300
And it is so neat, the way that this app works.

00:32:15.300 --> 00:32:17.620
I definitely, let me just, I'll put it up.

00:32:17.620 --> 00:32:20.300
Here's the live running version

00:32:21.180 --> 00:32:25.460
of the one that I've been messing with lately.

00:32:25.460 --> 00:32:27.820
And Brian, you can see you've got your memory.

00:32:27.820 --> 00:32:29.580
There's not a whole lot of action going on right now.

00:32:29.580 --> 00:32:31.020
So it's kind of flat graphs,

00:32:31.020 --> 00:32:33.620
but like if the memory jumped up, you would see it go up.

00:32:33.620 --> 00:32:35.980
It shows you how much memory is free,

00:32:35.980 --> 00:32:38.020
how much is being used,

00:32:38.020 --> 00:32:41.500
how much of that is being cached, disk activity.

00:32:41.500 --> 00:32:44.700
You can see the network traffic,

00:32:44.700 --> 00:32:47.300
the multiple, it has four CPUs

00:32:47.300 --> 00:32:50.180
and it shows you graphs for all four CPUs

00:32:50.180 --> 00:32:52.340
as well as like the combined.

00:32:52.340 --> 00:32:53.820
And I'm not gonna show the processes

00:32:53.820 --> 00:32:57.100
'cause they might show command arguments

00:32:57.100 --> 00:32:58.780
that I just don't wanna share.

00:32:58.780 --> 00:33:02.460
But it seems like it probably somehow could be a bad idea

00:33:02.460 --> 00:33:05.860
that I'm not aware of, but we'll learn later in a hard way.

00:33:05.860 --> 00:33:08.820
But isn't that an amazing way to just,

00:33:08.820 --> 00:33:11.700
this is over an SSH session.

00:33:11.700 --> 00:33:12.820
- Oh, that's pretty cool.

00:33:12.820 --> 00:33:13.780
That's amazing.

00:33:13.780 --> 00:33:15.300
- Yeah, and watch this.

00:33:15.300 --> 00:33:18.500
So if I just hit escape, you get even,

00:33:18.500 --> 00:33:20.620
it's like an old video game options

00:33:20.620 --> 00:33:23.140
with mouse support and everything.

00:33:23.140 --> 00:33:24.140
- Oh, that's pretty cool.

00:33:24.140 --> 00:33:27.500
- Yeah, so another thing to sort of announce here

00:33:27.500 --> 00:33:33.700
is there's BPyTOP, which you can pipx install,

00:33:33.700 --> 00:33:35.820
but they've also, as part of this,

00:33:35.820 --> 00:33:40.820
released a BTOP rewritten and I think it must be C++.

00:33:40.820 --> 00:33:45.420
So anyway, that's cool, right?

00:33:45.420 --> 00:33:46.740
People can, I think that's supposed to be

00:33:46.740 --> 00:33:48.220
a little bit more high performance,

00:33:48.220 --> 00:33:50.940
although to me, they kind of seem like

00:33:50.940 --> 00:33:53.740
the same type of thing.

00:33:53.740 --> 00:33:54.980
Anyway, really cool.

00:33:54.980 --> 00:33:58.820
If you've been using like TOP or something like this,

00:33:58.820 --> 00:34:01.380
there's a really much better way.

00:34:01.380 --> 00:34:05.100
And Glance is as good, but BTOP is the new winner

00:34:05.100 --> 00:34:05.940
in my world here.

00:34:05.940 --> 00:34:10.500
- And those sort of graphs, even if you don't need them,

00:34:10.500 --> 00:34:11.620
you can have a second monitor

00:34:11.620 --> 00:34:12.660
and have one of those running.

00:34:12.660 --> 00:34:15.500
Everybody in your life will think you do something cooler

00:34:15.500 --> 00:34:16.340
than you actually do. - Exactly.

00:34:16.340 --> 00:34:18.020
- Oh, you're a hacker, aren't you?

00:34:18.020 --> 00:34:18.860
That's a terminal.

00:34:18.860 --> 00:34:20.780
(laughing)

00:34:20.780 --> 00:34:22.220
Yeah, I am, okay.

00:34:22.220 --> 00:34:23.500
- Yeah. - Don't cross me.

00:34:23.500 --> 00:34:24.340
Don't cross me.

00:34:24.340 --> 00:34:26.260
All right.

00:34:26.260 --> 00:34:32.220
- Right, I think that's our extras.

00:34:32.220 --> 00:34:36.020
- Chris Tyler, just real quick, has a recommendation,

00:34:36.020 --> 00:34:38.460
switch to bottom BTM, which is similar,

00:34:38.460 --> 00:34:40.860
but written in Rust and a little more performant.

00:34:40.860 --> 00:34:44.460
Also cross-platform like BPyTOP.

00:34:44.460 --> 00:34:46.500
- Okay, well, maybe,

00:34:46.500 --> 00:34:48.340
maybe that needs to be checked out as well.

00:34:48.340 --> 00:34:49.940
Maybe my time with BTOP was short

00:34:49.940 --> 00:34:52.540
and I'll be over to bottom before I know it.

00:34:52.540 --> 00:34:55.020
- Top and bottom, it's just terrible.

00:34:55.020 --> 00:34:56.540
- Yeah, these are funny.

00:34:56.540 --> 00:34:57.540
Yeah, thanks Christopher.

00:34:57.540 --> 00:34:59.820
All right, I think I'm ready for a joke.

00:34:59.820 --> 00:35:01.380
- Yes. - And I got something,

00:35:01.380 --> 00:35:05.340
I've been talking about consolidating all these servers

00:35:05.340 --> 00:35:06.540
and running different things.

00:35:06.540 --> 00:35:10.620
We just talked about the monitoring your server and Docker.

00:35:10.620 --> 00:35:14.540
So I thought it might be fun to share this post

00:35:14.540 --> 00:35:18.780
on InfoSec Exchange Mastodon from Jeff Hall.

00:35:18.780 --> 00:35:21.620
And he's got this, describe this for us, Brian.

00:35:21.620 --> 00:35:24.980
- It's just a mess of cables coming out of the back

00:35:24.980 --> 00:35:28.100
of what, a bunch of, I don't know.

00:35:28.100 --> 00:35:30.340
- Network equipment? - Yeah.

00:35:30.340 --> 00:35:31.180
- It's just like the world,

00:35:31.180 --> 00:35:35.540
you couldn't imagine a worse set of tangled wire.

00:35:35.540 --> 00:35:36.740
And they're dirty too, right?

00:35:36.740 --> 00:35:39.780
It's not just like, they're covered in,

00:35:39.780 --> 00:35:43.300
it's all these routers and they're white,

00:35:43.300 --> 00:35:46.260
but they're most, they're significantly brown as well.

00:35:46.260 --> 00:35:47.500
- With like a whole bunch of hubs

00:35:47.500 --> 00:35:48.820
hanging in between and stuff.

00:35:48.820 --> 00:35:51.580
- Yeah, a lot of these pieces are just suspended

00:35:51.580 --> 00:35:53.940
by the wires and it just says the cloud.

00:35:53.940 --> 00:35:58.020
- Yeah, yeah.

00:35:58.020 --> 00:36:01.100
- It's very nice, I love it.

00:36:01.100 --> 00:36:02.220
- That's very cool.

00:36:02.220 --> 00:36:04.260
- Indeed, all right, well,

00:36:04.260 --> 00:36:07.340
that's it for the show, I suppose.

00:36:07.340 --> 00:36:10.540
And we don't normally have a final call to action,

00:36:10.540 --> 00:36:15.020
but go check out your new pytest thing, your timeout,

00:36:15.020 --> 00:36:18.900
and check out some of these other self-hosted things.

00:36:18.900 --> 00:36:20.060
Yeah, it's really cool.

00:36:20.060 --> 00:36:23.540
A lot of stuff people can adopt in.

00:36:23.540 --> 00:36:25.380
Yeah, well, thanks for being here

00:36:25.380 --> 00:36:26.820
and chat with you all later.

