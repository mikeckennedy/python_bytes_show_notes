WEBVTT

00:00:00.001 --> 00:00:11.420
Hey, everybody. And we'll get started in a moment. I guess we can cover it then. But

00:00:11.420 --> 00:00:17.200
Michael is in a hotel, I think. Yeah, I'm just living large, man. I'm just staying in

00:00:17.200 --> 00:00:24.280
hotels in my own city. It's fine. We'll talk about that during the show. Yeah. Okay. Well,

00:00:24.280 --> 00:00:31.080
let's kick it off and then we'll do a little bit of a bit of that. So hello and welcome

00:00:31.080 --> 00:00:35.620
to Python Bytes where we deliver Python news and headlines directly to your earbuds. This

00:00:35.620 --> 00:00:46.440
is episode 367, recorded January 16, 2024. And I am Brian Okken. And I'm Michael Kennedy.

00:00:46.440 --> 00:00:56.240
And I guess we do have a sponsor today. So that's awesome. But Michael, do you want to

00:00:56.240 --> 00:01:02.120
tell us why you're not? Yeah, for people who are listening, maybe they hear a slightly

00:01:02.120 --> 00:01:07.840
different setup for me. For people who might watch the video, well, that right there in

00:01:07.840 --> 00:01:15.480
the background is lovely and very icy Portland, Oregon. And so I'll go ahead and put this

00:01:15.480 --> 00:01:21.160
on the screen and people can check out if they feel like they can check out the YouTube

00:01:21.160 --> 00:01:25.520
stream at like one minute 19 seconds. This is the entrance to my house, Brian. And it

00:01:25.520 --> 00:01:31.560
looks like an apocalypse. Just every I would say every block or so there's like a hundred

00:01:31.560 --> 00:01:38.480
foot tree that's fallen somewhere. And it's just taken out the power in so many ways.

00:01:38.480 --> 00:01:44.600
It's like it was now it's 13 now it's 18 degrees Fahrenheit. So negative nine, something like

00:01:44.600 --> 00:01:49.640
that Celsius, no power for five days, not a place for podcasting. So I'm hanging out

00:01:49.640 --> 00:01:55.840
here in downtown in a hotel with the family until the power comes back on. Hopefully today,

00:01:55.840 --> 00:02:00.840
fingers crossed. Well, hopefully. Yeah, hopefully. There's actually quite a few people in Portland

00:02:00.840 --> 00:02:08.440
without power and that did experience power outages and pipes bursting and things like

00:02:08.440 --> 00:02:12.640
that. And, you know, for people that are in parts of the country where they get like way

00:02:12.640 --> 00:02:22.480
colder than us it might seem like we're just being wusses. But what we get here is often

00:02:22.480 --> 00:02:28.080
very heavy rain or heavy snow or freezing rain. And the freezing rain just weighs down

00:02:28.080 --> 00:02:33.000
trees and bricks, power lines and stuff like that. Absolutely. And this had up to a hundred

00:02:33.000 --> 00:02:38.160
mile an hour winds with these really old trees. And also just the city is not really built

00:02:38.160 --> 00:02:41.720
for it. We don't get it enough that they have infrastructures for it. So it's like, oh,

00:02:41.720 --> 00:02:45.920
it snowed three inches. So just good luck with that. We're not going to do anything,

00:02:45.920 --> 00:02:51.120
right? No salt, no gravel. Just hope that works out. So anyway, it's been all right,

00:02:51.120 --> 00:02:58.400
but yeah, different setup, Brian. So thanks everyone for the understanding. Indeed. And

00:02:58.400 --> 00:03:03.760
also I want to say thanks to Bright Data. We'll talk more about them for sponsoring

00:03:03.760 --> 00:03:11.640
the show, but yeah, let's, let's talk about something contrarian, I guess you would say,

00:03:11.640 --> 00:03:18.280
Brian. Okay. You know, many people I'm sure heard of 37 signals, right? David Hennemeier

00:03:18.280 --> 00:03:23.120
Hanson. He's the guy who created Ruby on Rails most notably, but there's also Basecamp and

00:03:23.120 --> 00:03:28.920
Heymail and all that kind of stuff. Right? Yeah. So needless to say, they run a ton of

00:03:28.920 --> 00:03:35.240
SaaS products in the cloud and they, I came across what I guess was more or less some

00:03:35.240 --> 00:03:42.240
kind of like conclusion to a bunch of conversations and stuff they've been working on. And so

00:03:42.240 --> 00:03:47.120
I'll work my way backwards just a little bit, but it's pretty fascinating. And the headline

00:03:47.120 --> 00:03:54.400
on the post is we have left the cloud. Brian, I thought we were all told to go to the cloud.

00:03:54.400 --> 00:03:58.200
I mean, we saw the picture of what happens when the clouds get angry. So I understand

00:03:58.200 --> 00:04:04.000
why you might leave the clouds, but more seriously, like clouds are supposed to save us. They

00:04:04.000 --> 00:04:10.280
save us money. They give us agility, et cetera, et cetera. Right. Yeah. So hence the contrarian

00:04:10.280 --> 00:04:20.480
aspect, right? Yeah. Like I guess it's not like 37 signals is the same sort of places

00:04:20.480 --> 00:04:25.880
of like a lot of startups, but you know, that's true. If you were in, in, they do make

00:04:25.880 --> 00:04:31.720
that point. Like if, if you are an early stage startup where the costs are low, by all means

00:04:31.720 --> 00:04:39.960
cloud it up. But as I guess one of the big lessons here is the more that you get like

00:04:39.960 --> 00:04:48.120
the cloud hooks and the sort of abstract sense into your app, the more it might set

00:04:48.120 --> 00:04:52.280
you up for a tough time as you get bigger. Right. So let me get to this and we can, we

00:04:52.280 --> 00:05:01.800
can talk a bit more about that. So, let's, so they say we stand to save over $7 million

00:05:01.800 --> 00:05:07.520
in five years from our cloud exit. And so why do they not just say, well, that's 1.2

00:05:07.520 --> 00:05:13.100
or 1. whatever it is, 1.1 million per year because of our cloud exit, because what they

00:05:13.100 --> 00:05:16.640
did is they went and they bought. So when they said they left the cloud, they didn't

00:05:16.640 --> 00:05:24.760
mean just like we're not using Kubernetes or we're not using a Lambdas and serverless.

00:05:24.760 --> 00:05:31.800
Like they are, they bought physical hardware. Okay. So they've got these, these big pallets

00:05:31.800 --> 00:05:40.840
and what they did is they bought this Dell, 20 Dell R7625 servers, which don't mean

00:05:40.840 --> 00:05:46.400
a lot to me, maybe due to some people, but it basically takes up like two server racks.

00:05:46.400 --> 00:05:56.720
And that means 4,000 CPUs, 7.7 terabytes of Ram and almost a half a petabyte of high speed

00:05:56.720 --> 00:06:06.640
SSD storage. And that costs them $600,000 to buy that, which is a lot of money. However,

00:06:06.640 --> 00:06:16.640
they were paying like 1.2 million a year in cloud prices and cloud to AWS basically. And

00:06:16.640 --> 00:06:21.240
so after six months it's paid for in the five years part is they expect this hardware to

00:06:21.240 --> 00:06:28.560
last them five years. And apparently it's super, super fast. So, it's, it's pretty

00:06:28.560 --> 00:06:34.120
interesting. I would really recommend people go through and read this, what some of

00:06:34.120 --> 00:06:38.760
the values were. And basically what they did is they said, we're going to buy like a really

00:06:38.760 --> 00:06:43.840
big server. I know it's a bunch of kind of CPUs and stuff, but they kind of clustered

00:06:43.840 --> 00:06:49.800
into like one compute cluster. And then they, they came up with this thing called, it's

00:06:49.800 --> 00:06:54.520
kind of like Kubernetes called Camel, which would work for Python, but I think originally

00:06:54.520 --> 00:07:01.200
they're deploying rails apps on it and basically gives you zero downtime slices of this giant

00:07:01.200 --> 00:07:13.360
server. And the reason this really fascinates me is this, this whole philosophy here, it's,

00:07:13.360 --> 00:07:18.680
it's also not just, Hey, they're leaving the cloud because, you know, many people are

00:07:18.680 --> 00:07:26.000
running to the cloud, but it's also, they're getting a really huge server, like one huge

00:07:26.000 --> 00:07:30.240
server rather than a whole bunch of small distributed servers, which also was like a

00:07:30.240 --> 00:07:36.000
little bit the way that, the cloud was initially sold, right? We'll get commodity

00:07:36.000 --> 00:07:40.400
hardware. You buy a bunch of little small slices all over the place. You can buy more

00:07:40.400 --> 00:07:46.920
small slices with auto scaling if you need. And instead they're like, now this and sort

00:07:46.920 --> 00:07:52.200
of along those same lines is I little while ago interviewed Mark Russinovich, the CTO

00:07:52.200 --> 00:07:59.900
of Azure at Microsoft, super cool guy, really, really smart, but also CTO of Azure. And he

00:07:59.900 --> 00:08:03.320
talked about how they started out with a bunch of small machines as well, and they're just

00:08:03.320 --> 00:08:09.240
getting bigger and bigger ones and slicing them up for tenants to be using them. So I

00:08:09.240 --> 00:08:16.200
think this is also a really interesting trend that we're going to see more of is like more,

00:08:16.200 --> 00:08:21.660
more big machines rather than a bunch of small machines that then maybe you slice up with

00:08:21.660 --> 00:08:26.920
Docker or Kubernetes or other things. And Brian, we've hardly even talked about this

00:08:26.920 --> 00:08:38.040
yet. But that has changed the way I got to type holding, holding the mic in the wrong

00:08:38.040 --> 00:08:42.620
hand here for typing. That's changed the way that I'm running a lot of our infrastructure.

00:08:42.620 --> 00:08:46.920
So I've been thinking about this for a while and reading this stuff. I thought I'd make

00:08:46.920 --> 00:08:54.160
the first topic of our show. But also, I had eight servers for all the talk Python and

00:08:54.160 --> 00:08:59.480
Python bytes infrastructure, you know, some database server stuff, one that ran Python

00:08:59.480 --> 00:09:02.920
bytes, a bunch of services and a bunch of small machines, right? And I'm like, you know,

00:09:02.920 --> 00:09:07.360
why am I messing with all these small machines? So I ended up consolidating like last week,

00:09:07.360 --> 00:09:16.340
all of that into one big, big server, just running a bunch of multi tier Docker setups

00:09:16.340 --> 00:09:22.240
over there. And it's glorious, right? One machine runs great. There's a single command

00:09:22.240 --> 00:09:28.160
I typed upgrade, like 13 different web apps all at once. That means upgrade their server

00:09:28.160 --> 00:09:33.520
infrastructure, upgrade their potentially to ship their new dependencies to rebuild

00:09:33.520 --> 00:09:39.600
them all of that kind of stuff. One command. It's interesting. So yeah, it's really interesting.

00:09:39.600 --> 00:09:43.440
It's really different. It let me like, quickly and easily throw in some more things. And

00:09:43.440 --> 00:09:49.720
also, I think it's better for security, right? Like I had, like little FastAPI apps that

00:09:49.720 --> 00:09:55.080
were just like little utility things running that I didn't pay this much attention to as

00:09:55.080 --> 00:10:02.000
I did the other apps. And so you know, they just didn't, they didn't get their dependencies

00:10:02.000 --> 00:10:07.880
updated as frequently, frequently, and their Python versions revved as frequently. And

00:10:07.880 --> 00:10:11.480
if something happened to them, right, it's on technically on the same VM, right? That's

00:10:11.480 --> 00:10:16.080
an issue. But now they're, they're all locked up behind like a Docker container. So it's

00:10:16.080 --> 00:10:20.120
a little more isolation as well. Anyway, it's this whole, I encourage people to read through

00:10:20.120 --> 00:10:28.080
I put a bunch of different parts of this story in for the 37 signals we've left the cloud.

00:10:28.080 --> 00:10:31.440
It's worth reading. I'll just go through really quick the five values. And then this is kind

00:10:31.440 --> 00:10:37.080
of a long segment. So I'll, I'll move us on. But here are the five values guiding our cloud

00:10:37.080 --> 00:10:45.720
exit. We value independence above all else and being trapped in Amazon cloud is not great.

00:10:45.720 --> 00:10:52.200
We serve the internet. This business owes its entire existence to the societal and economic

00:10:52.200 --> 00:10:58.320
aberration that is the internet in a positive way. And we don't want to just be locked up

00:10:58.320 --> 00:11:04.040
behind a few hyperscalers. We want to be kind of just on the internet on our own terms,

00:11:04.040 --> 00:11:07.160
spend money wisely, even if you have lots of money, you know, they're getting better

00:11:07.160 --> 00:11:14.280
value for money. Leading the way, the cloud has been sold as the answer to SAS companies

00:11:14.280 --> 00:11:20.240
want it so sure. And they seek adventure and you bet they do. So anyway, it's not leaving

00:11:20.240 --> 00:11:23.640
data centers. They have that in a managed data center. They just have it on hardware

00:11:23.640 --> 00:11:27.920
that they own. So anyway, what do you think about all this?

00:11:27.920 --> 00:11:34.600
So a lot of this is I think it's interesting that it affects you even like that you that

00:11:34.600 --> 00:11:39.240
you're you're not okay. When you said you put them all on one machine, you're not it's

00:11:39.240 --> 00:11:42.840
you don't have like a server in your basement or something.

00:11:42.840 --> 00:11:47.040
No, no. So what I did is I instead of having a bunch of small VMs at DigitalOcean, I bought

00:11:47.040 --> 00:11:52.480
one big VM. Okay, what I have right now is like eight gigs, four CPUs, but I'm pretty

00:11:52.480 --> 00:11:56.760
sure I'm going to switch to like 16 gigs and eight CPUs. And even that would be cheaper

00:11:56.760 --> 00:12:03.080
than what I was doing before. And it's still it. And the other thing that's interesting,

00:12:03.080 --> 00:12:06.920
we're in danger of going super long on this, but but because all those different apps are

00:12:06.920 --> 00:12:13.320
sharing, let's say the final destination of eight CPUs, their spikes in performance are

00:12:13.320 --> 00:12:18.840
not at the same time. Like what makes talk Python or Python bytes spike in load is not

00:12:18.840 --> 00:12:23.560
the same that what makes the courses spike on load, like a new course release or like

00:12:23.560 --> 00:12:28.520
Black Friday or something like that is very unlikely to intersect with when a podcast

00:12:28.520 --> 00:12:33.400
is released, because I'm busy doing one or the other, right. And so they basically has

00:12:33.400 --> 00:12:37.960
access to all eight cores instead of that one gets two cores, that one gets one core.

00:12:37.960 --> 00:12:42.080
And even though they're sharing, like basically in aggregate, it's the same number, because

00:12:42.080 --> 00:12:48.560
the spikes don't line up, they get more capacity for whatever they're doing. It's pretty interesting.

00:12:48.560 --> 00:12:57.480
Yeah. Okay. It is interesting. Well, let's, let's completely go to a short topic.

00:12:57.480 --> 00:13:05.840
And I'd like to talk about little tiny scripts, or maybe big scripts, but single file applications.

00:13:05.840 --> 00:13:13.640
So single file scripts. So I wanted to talk about PEP 723. And that is inline script metadata.

00:13:13.640 --> 00:13:20.400
And one of the things that we've noticed come recently in this, this is authored, it's interesting

00:13:20.400 --> 00:13:25.360
author. So the author is effect love, I think that's how you say his name. He's the dude

00:13:25.360 --> 00:13:33.640
from hatch. So hatches, I guess, in packaging, so this is around packaging. And the idea

00:13:33.640 --> 00:13:41.160
is that you've got a script has depend might have dependencies also, and it also might

00:13:41.160 --> 00:13:48.920
depend on Python. And how we can't really tell Python, currently, that a script needs

00:13:48.920 --> 00:13:54.720
a dependency or a particular version of Python. So this is an attempt to kind of fix that.

00:13:54.720 --> 00:13:59.520
And there's some motivation and stuff at the top that I like, you know, kind of

00:13:59.520 --> 00:14:07.000
skimmed through a little bit. No, I read it. But the, the real at the end is we're

00:14:07.000 --> 00:14:12.320
going to put stuff like pyproject.toml. But in you can do it in a script. And this isn't

00:14:12.320 --> 00:14:19.920
there yet. But there's an example where you just sort of do a pound sign and then like

00:14:19.920 --> 00:14:26.560
a few slashes and then say script. And then after that, you can put a little bit of like

00:14:26.560 --> 00:14:31.800
toml right in your as a comment. And the idea is something like,

00:14:31.800 --> 00:14:38.440
right, like the world's craziest docstring sort of thing, right? Almost Yeah, I don't

00:14:38.440 --> 00:14:44.240
understand. So supposedly, there's there's reasons behind the syntax. It's the weirdest

00:14:44.240 --> 00:14:48.960
syntax I've ever seen. But maybe it's not quite shebang, but it's kind of shebang ish.

00:14:48.960 --> 00:14:53.880
Yeah. But like they in their example, they're saying, okay, well, you've got a little a

00:14:53.880 --> 00:14:57.880
little script that just requires, you know, that and this is going to be common, I think

00:14:57.880 --> 00:15:04.640
actually, requires requests, and rich. So because it's going to like, grab something

00:15:04.640 --> 00:15:08.360
off the internet, and it's going to print some stuff and wants to do it with color and

00:15:08.360 --> 00:15:15.440
whatever. But how do you do that without packaging it? And, and here's one way is to just tell

00:15:15.440 --> 00:15:23.240
Python that it needs these other things. So there's a, it's, I don't really completely

00:15:23.240 --> 00:15:28.120
understand this, like how what are the back end? What's going to happen? What is

00:15:28.120 --> 00:15:33.560
I think the different tools will treat this different? Because my question is really where

00:15:33.560 --> 00:15:40.000
are these dependencies going to be installed? That is it? Like, if I just say, I guess it

00:15:40.000 --> 00:15:44.440
depends on the thing. So if you're going to do if it hatch, for instance, or pip X might

00:15:44.440 --> 00:15:49.600
handle this. So if I say pip X, you know, run this script, and it finds this, it'll

00:15:49.600 --> 00:15:54.800
probably create a pip X virtual environment area. And hatch will do the same thing in

00:15:54.800 --> 00:16:00.800
a different manner. But behind the scenes, grab, like create a little virtual environment.

00:16:00.800 --> 00:16:05.680
This kind of it mostly it seems like it's hiding virtual environment and dependency

00:16:05.680 --> 00:16:11.920
installs from users, but it's probably needed. So anyway, what do you think of this?

00:16:11.920 --> 00:16:19.720
I think it's interesting. Similar to installed, as Liz is pointing out, sounds very similar

00:16:19.720 --> 00:16:26.240
to installed that we talked about not too long ago. And I think it solves an interesting

00:16:26.240 --> 00:16:32.160
problem. All of these do have that, that little bit of a bootstrap that has to happen, right?

00:16:32.160 --> 00:16:40.400
For or something. For this to work, it's not built into Python, right? And so you've got

00:16:40.400 --> 00:16:45.680
to have like one library installed that then you can use to run and kick off all the other

00:16:45.680 --> 00:16:52.880
runs. But if you somehow make that happen, or get your company to agree, like, we're

00:16:52.880 --> 00:16:57.520
all going to have this foundation, and then it just runs. I think that's pretty excellent.

00:16:57.520 --> 00:17:04.600
So yeah, very cool. And I think Ofek is killing it, right? He's being really creative and

00:17:04.600 --> 00:17:08.920
working a lot of different things. And this is a pep, right? So if this was built into

00:17:08.920 --> 00:17:18.160
Python, then all of a sudden, yeah, we can have it run. So okay, for some reason, I flew

00:17:18.160 --> 00:17:22.800
right over my head that it's a PEP and not just an extension to hatch. So yeah, this

00:17:22.800 --> 00:17:28.160
is going to be, this could be super, super important.

00:17:28.160 --> 00:17:32.880
And it was last updated in December. It's accepted now. I'm not sure how long it's been

00:17:32.880 --> 00:17:37.920
accepted, but it's around the packaging. So peps with packaging are interesting because

00:17:37.920 --> 00:17:43.120
we don't really have to wait for once they're accepted, we don't really have to wait for

00:17:43.120 --> 00:17:50.640
a release of Python. Because things like pip and hatch and other things don't have the

00:17:50.640 --> 00:17:57.480
same release cadence as Python. So this could be like, there's a note here that says, it's

00:17:57.480 --> 00:18:04.000
not going to be declared final until at least a couple of tools utilize it. So far, there's

00:18:04.000 --> 00:18:11.800
no tools that utilize it. But their example is possibly pip run and pip X. So and probably

00:18:11.800 --> 00:18:15.080
hatch as well. It's considering who wrote it.

00:18:15.080 --> 00:18:19.720
Yeah, yeah, I would imagine it might show up and might get support from hatch as well.

00:18:19.720 --> 00:18:25.160
Yeah, funny, good, funny comments out there in the audience. He is about being rust inspired

00:18:25.160 --> 00:18:26.160
indeed.

00:18:26.160 --> 00:18:29.960
Brian, you know, you want to know what else is inspiring?

00:18:29.960 --> 00:18:30.960
What?

00:18:30.960 --> 00:18:34.440
Our sponsor, bright data.

00:18:34.440 --> 00:18:35.440
Yeah.

00:18:35.440 --> 00:18:40.840
Indeed. So I just want to say thank you to bright data for supporting the show. Check

00:18:40.840 --> 00:18:47.960
them out at Python bytes.fm slash bright data. And there's good. Yeah.

00:18:47.960 --> 00:18:49.840
Do we want to put their stuff on the

00:18:49.840 --> 00:18:58.200
show? We do. And somehow I did not quite. We did quite. There we go. Awesome. Yeah.

00:18:58.200 --> 00:19:05.720
So there's tons and tons of data out on the internet, unimaginable amounts of data, right?

00:19:05.720 --> 00:19:10.120
And we're lucky to live in a time where so much of this is behind structured API's. And

00:19:10.120 --> 00:19:15.720
you can go and access it with HTTPS requests or whatever. But the truth is that most of

00:19:15.720 --> 00:19:22.160
the data is not served up over a clean API's. It's just sitting there on a web page as gnarly

00:19:22.160 --> 00:19:27.200
HTML. Maybe it's even worse than that. Maybe it's obscured behind some front end framework

00:19:27.200 --> 00:19:32.720
like react, where when you actually look at the HTML, it just says, pull in the react

00:19:32.720 --> 00:19:36.560
app. Good luck with that. And then something else happens somewhere along the way, right?

00:19:36.560 --> 00:19:42.520
So getting access that data can be hard. What's the answer? Well, web scraping, everyone says,

00:19:42.520 --> 00:19:47.000
true, but just like you wouldn't want to set up your production infrastructure in your

00:19:47.000 --> 00:19:52.040
home office, running web scraping jobs on a single computer, even in a data center can

00:19:52.040 --> 00:19:59.400
lead to your program being potentially unreliable with data pinned where whatever access source

00:19:59.400 --> 00:20:03.360
source you're accessing thinks you're located, right? So maybe there's different data if

00:20:03.360 --> 00:20:08.600
you're in the EU than if you're in Ohio, but your computer is in Ohio. So there you go.

00:20:08.600 --> 00:20:12.800
Or you know, it gets blocked because of rate limiting or other types of things like that,

00:20:12.800 --> 00:20:17.540
right? So if you need to do professional web scraping, check out bright data have award

00:20:17.540 --> 00:20:24.280
winning proxy network with millions of different places to access data from and powerful web

00:20:24.280 --> 00:20:30.120
scrapers. They have even ready to go data sets you can download. So they've already

00:20:30.120 --> 00:20:34.640
like curated these data sets, and you can just access them and get updates from them

00:20:34.640 --> 00:20:39.520
and not even do web scraping, which is awesome. So they got a whole marketplace for that.

00:20:39.520 --> 00:20:44.040
And everyone knows, we're probably going to come back to it some more and privacy conscious

00:20:44.040 --> 00:20:50.240
stuff that I really care about. And they are both CCPA and GDPR compliant. They have low

00:20:50.240 --> 00:20:54.920
code solutions as well as Python programming models with asyncio and playwrights. So if

00:20:54.920 --> 00:20:59.920
you have serious data needs, and those websites that have the data don't offer an API, then

00:20:59.920 --> 00:21:06.000
you need to check out bright data. Give them a try at Python bytes, data fam slash bright

00:21:06.000 --> 00:21:10.000
data. And please use that URL so you know that they heard from us. Thank you to bright

00:21:10.000 --> 00:21:16.760
data for supporting the show links in your podcast player show notes. So pretty awesome.

00:21:16.760 --> 00:21:23.640
All right, back to the next thing. So this is super exciting. And it came I believe this

00:21:23.640 --> 00:21:27.920
was sent in by blahs. Let me check. Yeah, blahs. So this over Thank you, blahs for pointing

00:21:27.920 --> 00:21:36.960
this out. So I've had Fedor fitsner on Python before. And we've talked about flat. And flat

00:21:36.960 --> 00:21:45.000
is basically flutter, but with a Python programming API, right? flutter is actually how we built

00:21:45.000 --> 00:21:51.320
the apps at talk Python, right for courses. Super cool framework, but you're writing Dart

00:21:51.320 --> 00:21:57.880
and Dart is good, but it's not Python. Right. And so it'd be great to be able to write that

00:21:57.880 --> 00:22:02.640
kind of code. Here's an example. By the way, Brian, we talked about fast UI. And I said,

00:22:02.640 --> 00:22:10.960
oh, that reminds me this sort of hierarchical code structure reminds me of of flutter. Right.

00:22:10.960 --> 00:22:17.200
And so here's the same thing, the flutter UI, but in Python code instead of Dart. And

00:22:17.200 --> 00:22:21.760
the link for this code is in the show notes, you can check it out. Right. So the big news

00:22:21.760 --> 00:22:27.400
is you can now build a PKs for Android. And for those of you who have not suffered the

00:22:27.400 --> 00:22:33.480
indignity of the app stores, the way you get something into the Google Play Stores, you

00:22:33.480 --> 00:22:38.260
build what's called an APK. And then you send them that they process it. And then that's

00:22:38.260 --> 00:22:44.920
what gets shipped out to run on the phones on Android. So this means, even though flat

00:22:44.920 --> 00:22:50.240
built flutter apps, you couldn't really deploy it, you could kind of get the flat app and

00:22:50.240 --> 00:22:55.200
then put your Python code on there. But that's not like your app that's like Jupyter or something

00:22:55.200 --> 00:23:01.320
like that kind of. So this is awesome. This means that people can now build apps that

00:23:01.320 --> 00:23:07.200
go in the app store, at least for Android with flutter, with flutter and flat and Python

00:23:07.200 --> 00:23:18.120
in particular. We'll see about iOS. It's on the roadmap. So super exciting. Yeah. I mean,

00:23:18.120 --> 00:23:23.720
I would have used I would have used flat if I was sure I could get it to build and ship

00:23:23.720 --> 00:23:29.160
and on front things. I'd much rather done that than use flutter or a dart, you know,

00:23:29.160 --> 00:23:33.400
for flutter. But you got to work with the building blocks you got. And this one just

00:23:33.400 --> 00:23:40.200
got better. So exciting. Yeah. Oh, also really quick in the show notes. There's a video by

00:23:40.200 --> 00:23:45.280
this guy called neural nine is called neural nine, walking through the steps to do that

00:23:45.280 --> 00:23:49.920
all that built. So you want to see how it works. You can watch that eight minute video.

00:23:49.920 --> 00:23:57.600
Cool. Neat. So for that, that's for Android apps for command line, normal command line

00:23:57.600 --> 00:24:05.600
stuff. I was going to talk about Harlequin. So there's a lot of people that use a sequel

00:24:05.600 --> 00:24:13.200
and SQLite for different purposes, of course, for databases. But to take a look at your

00:24:13.200 --> 00:24:22.240
SQLite data, there is a an ID called Harlequin. I don't think we've covered it. But but it's

00:24:22.240 --> 00:24:30.200
a it's an open source Python project that it looks like it's it looks pretty cool. It's

00:24:30.200 --> 00:24:38.720
got on the we're showing on the screen the little snippet or screenshot. You've got

00:24:38.720 --> 00:24:45.040
kind of your tables, your data catalog on the left left panel. They've got a query editor

00:24:45.040 --> 00:24:51.480
and then some query results at the bottom right. And it actually looks pretty slick

00:24:51.480 --> 00:24:58.280
for for like quickly going through some data. I don't it looks like it has hooks to go into

00:24:58.280 --> 00:25:05.040
Duck TV and SQLite. That's why I brought up SQLite. And I'd probably use it for SQLite.

00:25:05.040 --> 00:25:11.320
I haven't used it. People don't know. Duck TV is also in process very much like SQLite,

00:25:11.320 --> 00:25:17.200
but it's columnar instead of row based. So they're kind of in the same. OK, I guess.

00:25:17.200 --> 00:25:24.560
Yeah. OK. Yeah, I haven't used it, but definitely SQLite use that a lot. So this is this is

00:25:24.560 --> 00:25:30.840
a kind of fun. I like command line tools. This is neat. I wanted to it's kind of a short

00:25:30.840 --> 00:25:38.000
topic. Just hey, if there's a command line interface for SQLite or Duck TV and and that's

00:25:38.000 --> 00:25:45.720
fun. It looks like it runs on Linux, Mac and Windows, which is cool. But I was also one

00:25:45.720 --> 00:25:52.560
of the things I've noticed is in like, for instance, a lot of Django tutorials, Django

00:25:52.560 --> 00:25:57.880
starts with SQLite and you I mean, by default it does that. And I think that you can and

00:25:57.880 --> 00:26:04.200
then you can specify other databases. But I noticed today a discussion on Mastodon that

00:26:04.200 --> 00:26:12.280
I wanted to bring up kind of SQLite related. Jeff Triplett posted a post by somebody else

00:26:12.280 --> 00:26:20.240
on Anze. But OK, Jeff's comment is this is a nice write up about using SQLite in production

00:26:20.240 --> 00:26:26.440
with pitfalls and open questions. I cringe whenever I see some Django Python luminary

00:26:26.440 --> 00:26:31.800
recommending people use SQLite in production. I don't care how good you are. You won't get

00:26:31.800 --> 00:26:38.440
it right, even if you think you did. Anyway, so interesting, interesting commentary there.

00:26:38.440 --> 00:26:43.760
So Anze's post was I wrote a blog post about using SQLite in production in dealing with

00:26:43.760 --> 00:26:53.520
DB. DB is closed errors. Happy to hear your thoughts. So the article is called Django

00:26:53.520 --> 00:26:59.840
SQLite and databases locked error and walks through those. And the kind of the reality

00:26:59.840 --> 00:27:06.280
is Django doesn't, I guess, lock the database when it reads correctly. The transactions

00:27:06.280 --> 00:27:13.880
are weird. And and a lot of the discussion around this really is if you're using if you're

00:27:13.880 --> 00:27:20.400
using SQLite for a database that's mostly read only, most people are just reading stuff.

00:27:20.400 --> 00:27:24.200
It'll probably work fine and it might work great and it might be way less hassle than

00:27:24.200 --> 00:27:29.880
doing Postgres or something else. But if there are a lot of a lot of transactions that are

00:27:29.880 --> 00:27:35.560
writing to it, if you have multiple multiple writers, then you've got you've got issues.

00:27:35.560 --> 00:27:42.560
So just just thought this was an interesting discussion. I wanted to bring it up. Yeah,

00:27:42.560 --> 00:27:49.000
it was interesting. I think it really depends on the type of app you got. Is it an analytics

00:27:49.000 --> 00:27:55.640
thing that's writing like crazy or is it basically like the database here blog right where it's

00:27:55.640 --> 00:28:01.560
really just you make an entry once a week if you're a good blogger? I mean, that kind

00:28:01.560 --> 00:28:06.840
of thing. And then then it's all reads. Probably fine. Right. So somewhere in the middle, I

00:28:06.840 --> 00:28:13.040
guess, like you can sort of turn that that bar or watch that gauge turn from green to

00:28:13.040 --> 00:28:17.520
red as it gets closer to like a full analytics system. But yeah, it's pretty interesting.

00:28:17.520 --> 00:28:25.920
Yeah. Hey, interesting discussion. So. Indeed. All right. What you got? Oh, we're done. We're

00:28:25.920 --> 00:28:30.480
done. We're done. But we're not doing as I have many extras. Do you have extra? I've

00:28:30.480 --> 00:28:36.560
got just a couple extras. So since I've got my screen up, I'll run through a couple extras.

00:28:36.560 --> 00:28:44.160
I've been I've kind of start I started Python People podcast last summer and then kind of

00:28:44.160 --> 00:28:50.720
ran out of time trying to get the Pytest course done. And so now I'm coming back and cleaning

00:28:50.720 --> 00:28:56.320
up some things. So there's there's a few recent episodes that finally came out. So like I

00:28:56.320 --> 00:29:00.800
stopped in October and then picked it up in January. So we've got Will Vincent and Julian

00:29:00.800 --> 00:29:08.280
Sequeira and Pamela Fox episodes out now. So check those out. Oh, excellent. Yeah, those

00:29:08.280 --> 00:29:15.760
are all great people. Many of them have been on this show as well. So very cool. Yeah.

00:29:15.760 --> 00:29:20.160
Nice to see these go in there. They provide a really interesting look, like really out

00:29:20.160 --> 00:29:26.120
of bounds looks into what people are doing. You know, like you and Paul talked a lot about

00:29:26.120 --> 00:29:35.160
lacrosse, right. And empowering women and and not not the next pep. And that was really

00:29:35.160 --> 00:29:41.440
interesting. And that's the fun. Some of the fun bits are to try to try to talk to kind

00:29:41.440 --> 00:29:48.200
of dig deeper into stuff that like I normally don't ask about in like in like, for instance,

00:29:48.200 --> 00:29:52.600
Julian Sequeira. Julian's a really pretty positive person. So I poked at that a bit

00:29:52.600 --> 00:29:57.280
and tried to ask him, like, really, how did you get this mindset? I mean, clearly bad

00:29:57.280 --> 00:30:03.000
stuff must happen to you. And so we talk about his his, you know, how does he get through

00:30:03.000 --> 00:30:09.520
it and keep maintaining a positive mindset? So it's good. Anyway, what are your extras

00:30:09.520 --> 00:30:14.920
for us? Let's see if I can find him here. OK, page find. Yes, that's the first one.

00:30:14.920 --> 00:30:24.280
Page find. Brian, you and I, we both Hugo, right? Yeah. Hugo is awesome. Go Hugo for

00:30:24.280 --> 00:30:31.200
people who don't know. Go Hugo dot IO. That's right. Super, super cool way to build static

00:30:31.200 --> 00:30:37.600
websites, not just blogs, but static websites that are really, really powerful. And I learned

00:30:37.600 --> 00:30:44.480
about this one from Mark Little. He also does a ton of stuff with Hugo and said, hey, you

00:30:44.480 --> 00:30:49.880
should check out page find. So what what is this? I have no idea. So page find. This is

00:30:49.880 --> 00:30:56.360
not just a Hugo thing, but for all static sites, it's a fully static search library.

00:30:56.360 --> 00:31:03.240
Right. So for static sites, whether this is Flask, Freeze or Hugo or Pelican or whatever

00:31:03.240 --> 00:31:09.320
you this is like a post build step thing that runs and it indexes all of your HTML or the

00:31:09.320 --> 00:31:14.960
parts that you tell it to index or tell it to, you know, you can basically say don't

00:31:14.960 --> 00:31:21.440
include this part or whatever. And that's no configuration. It has rich filtering. It

00:31:21.440 --> 00:31:27.600
has custom sorting attributes in the way it structures. It's what it does basically is

00:31:27.600 --> 00:31:32.520
JavaScript and it has an index that the JavaScript reads in. But the index broken into a bunch

00:31:32.520 --> 00:31:36.920
of pieces. So the front end stuff can pull just little bits of it and not pull all the

00:31:36.920 --> 00:31:44.520
results back basically. Right. So I added this over to my website where if you're over

00:31:44.520 --> 00:31:49.040
here like Brian, we could see what I said about AI and check that out. Isn't that awesome?

00:31:49.040 --> 00:31:54.320
So it finds all the different things that we could be talking about. But it also like

00:31:54.320 --> 00:32:01.960
in my markdown I have like H1, H2, H3 and it will actually subdivide the results into

00:32:01.960 --> 00:32:10.240
sections like what is in this section demarked by H2 on this one page. Oh, that's pretty

00:32:10.240 --> 00:32:14.640
cool. That's really cool. Right. And it also does things like I don't know if I can see

00:32:14.640 --> 00:32:22.880
any examples here, but if you if you type Y O it'll do like you yourself, etc. So it's

00:32:22.880 --> 00:32:27.480
not even just like exact word matching. It's like a really smart search engine. And all

00:32:27.480 --> 00:32:32.000
it takes is just running a script for like a couple of seconds after you build your static

00:32:32.000 --> 00:32:37.680
site and then dropping the output into a like a known location. Is that cool or what? That's

00:32:37.680 --> 00:32:41.480
very cool. It's one of the one of the issues I've had when switching to a static site is

00:32:41.480 --> 00:32:46.240
not not knowing how to deal with the search part. Yeah. So I was psyched when Mark sent

00:32:46.240 --> 00:32:52.560
this. Like, yes, this is going in. Yeah. The other part that that I'm trying to figure

00:32:52.560 --> 00:32:58.840
out is how to get a decent contact form. So that's still still to be determined. Yeah.

00:32:58.840 --> 00:33:01.560
I don't think page finds got help with that. But this is cool. This is really cool. So

00:33:01.560 --> 00:33:07.840
it's very cool. I'll add it to my stuff to meet. It's it's incredibly fast. Like search

00:33:07.840 --> 00:33:14.840
for AI and I'm on like hotel Wi Fi and it's nearly instant. Right. So that's that is super,

00:33:14.840 --> 00:33:19.080
super cool. There's a lot of sites, even static sites. So like searching, searching, you'll

00:33:19.080 --> 00:33:22.480
see the little spinner. You're like, what is it doing? Why is this search slow? No,

00:33:22.480 --> 00:33:26.840
it should be instant. Right. And that's, you know, very much in line with like plugging

00:33:26.840 --> 00:33:31.200
something like this into Hugo means like it's still instant. All right. I got a few more.

00:33:31.200 --> 00:33:38.200
Let's let's blaze them. Okay. This is not to encourage people like more of a just interesting.

00:33:38.200 --> 00:33:45.480
Hey, careful. We've got pi pi and pip. The JavaScript world has NPM. There's an article

00:33:45.480 --> 00:33:53.800
called when everything becomes too much. The NPM package chaos of 2024. An NPM user named

00:33:53.800 --> 00:33:59.680
pick JS launched a troll campaign with a package called everything that depended on every NPM

00:33:59.680 --> 00:34:08.080
package there. So when you install it, it tries to install the, you know, millions of

00:34:08.080 --> 00:34:15.480
NPM packages and it just, it destroyed it. Like, cause people were installing it and

00:34:15.480 --> 00:34:22.000
it was just taking too much resources and so on. So the follies of package management,

00:34:22.000 --> 00:34:27.800
how's that? Yeah. Nice. All right. I'll get a little out of order here. So Matthew Fikert

00:34:27.800 --> 00:34:35.240
wanted us and we're happy to do so announce that the sci pi conference is coming and will

00:34:35.240 --> 00:34:41.120
be in beautiful Tacoma, Washington this year. So if you're interested, check that out and

00:34:41.120 --> 00:34:48.000
put a link to that. And the last thing is I wrote an essay called unsolicited advice

00:34:48.000 --> 00:34:52.160
from Mozilla and Firefox about four things. I think, you know, three things I think they

00:34:52.160 --> 00:34:59.240
did wrong and four things I think they could do to like absolutely both change the way

00:34:59.240 --> 00:35:09.040
that the place of Firefox in the market and alleviate their, their insane dependency on

00:35:09.040 --> 00:35:15.760
Google. Like not anti Google. I do stuff with Google. I love YouTube, things like that necessarily,

00:35:15.760 --> 00:35:22.440
but I don't think they're congruent with Python with a Firefox is focused on privacy very

00:35:22.440 --> 00:35:29.560
much. And also 95% of your company's revenue from one deal with one company that's kind

00:35:29.560 --> 00:35:33.080
of at a whim could just change their mind. That's not a great place to be. I'd like to

00:35:33.080 --> 00:35:36.520
see Firefox doing well. So I thought a lot about it and wrote about it, including they

00:35:36.520 --> 00:35:41.160
should just lie about the agent, right? Like when a website says this site runs best on

00:35:41.160 --> 00:35:45.520
Chrome and using this crappy old browser, we don't know about, you know why you never

00:35:45.520 --> 00:35:50.200
see that on Vivaldi or brave because their user agent is identical to Chrome. So when

00:35:50.200 --> 00:35:54.200
you get to the website, like, Oh, this is my favorite one. Perfect. We're good to go.

00:35:54.200 --> 00:35:58.320
Right. How many people leave Firefox? Cause when they get to a site, it says, this doesn't

00:35:58.320 --> 00:36:02.400
work well, you need to go get this other browser. They would stop saying that if Firefox just

00:36:02.400 --> 00:36:07.600
said, Hey, our more Chrome, you know, things like that. Right. And sure it would hurt a

00:36:07.600 --> 00:36:12.440
little, it would hurt their pride, but people leave Firefox because the website will refuse

00:36:12.440 --> 00:36:18.720
to run. Right. Yeah. And if, if it, it probably would work, but if it's going to refuse to

00:36:18.720 --> 00:36:21.960
work, then it's not going to work. Right. Things like that. So anyway, this is, I think

00:36:21.960 --> 00:36:25.040
is a really fun article. I had a lot of fun thinking about it. So people can check that

00:36:25.040 --> 00:36:31.680
out. And I think, don't want to dwell on this too much, but the, there are like

00:36:31.680 --> 00:36:37.040
a lot of internal sites stuff. So a lot of people, do internal tools at companies

00:36:37.040 --> 00:36:43.560
and the, they'll do that. It'll be like, it should use Chrome and somebody will try it

00:36:43.560 --> 00:36:49.280
with Firefox and they'll be like, Oh, it doesn't work. And it probably does. It just, it just

00:36:49.280 --> 00:36:53.920
blocks it for the heck of it. So exactly. And no one's going to update that site. Right.

00:36:53.920 --> 00:36:58.680
That's just, yeah. Another thing that's just maybe interesting to put on people's radar

00:36:58.680 --> 00:37:07.040
is another thing. a friend of mine, co-founded Queens is this thing called Island, which

00:37:07.040 --> 00:37:13.480
is like a enterprise browser meant just for like giving enterprises super interesting

00:37:13.480 --> 00:37:16.680
control over things like that. You're just talking about. So this is actually a super

00:37:16.680 --> 00:37:19.680
interesting one of the things I think Firefox could do, but also it's just really interesting.

00:37:19.680 --> 00:37:23.320
Island.io. People want to check that out. It sounds weird. Like why would you ever want

00:37:23.320 --> 00:37:26.600
that? And then you watch the video or listen to it and you're like, actually, that's awesome.

00:37:26.600 --> 00:37:36.160
So, okay. Like installed. Yeah. All right. Shall we joke? Yeah, let's do a joke. All

00:37:36.160 --> 00:37:42.960
right. Well, this is a Linux joke is more than a Python joke, honestly. So Brian, have

00:37:42.960 --> 00:37:46.800
you ever had a bike lock when there's really a combination lock for anything, but in this

00:37:46.800 --> 00:37:51.880
case it's a bike lock, right? Okay. So here's a little character says my new bicycle lock

00:37:51.880 --> 00:37:57.800
to keep my new bicycle secure. It has three digits. Let's see. So that's a thousand combinations

00:37:57.800 --> 00:38:03.280
of what we could have. And then they start to rule out where the ridiculous ones, right?

00:38:03.280 --> 00:38:08.280
Like one, two, three and stuff like, Hmm, nine, nine, eight. Maybe I am not silly enough

00:38:08.280 --> 00:38:13.560
to use six, six, six, or seven, seven, seven to give full access to everyone. You know,

00:38:13.560 --> 00:38:18.760
change a mod seven, seven, seven. Just gives it full access to the read, write access to

00:38:18.760 --> 00:38:22.440
whatever you change mod.

00:38:22.440 --> 00:38:23.440
That is funny.

00:38:23.440 --> 00:38:24.440
Yeah.

00:38:24.440 --> 00:38:29.880
Yeah. And obviously you wouldn't use seven, seven, seven.

00:38:29.880 --> 00:38:36.680
I may be the wrong target market for this because it's sort of funny, but also I'm thinking

00:38:36.680 --> 00:38:40.720
did bike locks really have three combinations, three numbers or were there four?

00:38:40.720 --> 00:38:47.400
You're being way too practical. Like four or six or something like that. I had a smartphone

00:38:47.400 --> 00:38:51.720
smart lock once and it was awesome. You would hold your phone up to it and it wouldn't lock.

00:38:51.720 --> 00:38:58.240
I got it from my electric bike before my knees decided electric biking wasn't for me. And

00:38:58.240 --> 00:39:03.680
one time I was out biking with a friend and I parked it in the summer in the sun and like

00:39:03.680 --> 00:39:08.640
the electronics bit of it got direct sunlight and it's a black because it's a lock, right?

00:39:08.640 --> 00:39:13.160
Got super hot, like so hot you couldn't hardly touch it, but also so hot that like the electronics

00:39:13.160 --> 00:39:16.200
wouldn't run and I couldn't unlock. I had to like put it in the shade for an hour before

00:39:16.200 --> 00:39:19.640
I could go home. I was so frustrated. I like covered it with my shirt or something and

00:39:19.640 --> 00:39:22.160
just sat there until it cooled off so I could go home.

00:39:22.160 --> 00:39:28.520
Oh, that's, that's bad. And then also I've seen like the combination to really kind

00:39:28.520 --> 00:39:33.120
of doesn't matter. It's how thick the rest of the lock is because I've seen people just

00:39:33.120 --> 00:39:39.120
come up with these like a battery powered just cutters and just cut the lock off.

00:39:39.120 --> 00:39:44.960
Yeah, exactly. It's probably not the combination, but if you do have one, don't use seven, seven,

00:39:44.960 --> 00:39:52.040
cause clearly that's going to, it'll just fall right off if you do that.

00:39:52.040 --> 00:39:54.040
Just go with one, two, three, four.

00:39:54.040 --> 00:39:55.040
Yeah, exactly.

00:39:55.040 --> 00:40:00.440
That's fine. Anyway, well, thanks a lot. I hope you get power back at your house soon.

00:40:00.440 --> 00:40:06.920
Thanks. I hope so too. Probably the power people said probably today, but you never

00:40:06.920 --> 00:40:07.920
know. You never know.

00:40:07.920 --> 00:40:10.920
All right. Well, good to be here with you.

00:40:10.920 --> 00:40:11.920
Talk to everybody later. Bye.

00:40:11.920 --> 00:40:13.480
Yeah. Bye everyone. Bye Brian.

