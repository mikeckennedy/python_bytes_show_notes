WEBVTT

00:00:02.020 --> 00:00:02.300
Hey, everyone.

00:00:04.120 --> 00:00:05.160
Let's just jump into the show.

00:00:05.220 --> 00:00:07.160
I'm excited to get all of our topics today.

00:00:09.100 --> 00:00:13.900
Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:14.760 --> 00:00:18.980
This is episode 439, recorded July 6, 2025.

00:00:19.700 --> 00:00:20.600
And I am Brian Otkin.

00:00:21.160 --> 00:00:22.360
And I am Michael Kennedy.

00:00:23.700 --> 00:00:26.300
And this episode is sponsored by Sentry.

00:00:26.560 --> 00:00:28.260
Listen to their spot later in the show.

00:00:28.700 --> 00:00:29.180
Thanks, Sentry.

00:00:29.880 --> 00:00:40.260
Also connect with us if you'd like to send us items or just say, hey, we are on Bluesky and Mastodon and Michael's even on X still.

00:00:40.520 --> 00:00:47.800
So the links to all of us, all of us are in the show notes and at pythonbytes.fm.

00:00:48.420 --> 00:00:58.540
And also speaking of pythonbytes.fm, why don't you head on over there and sign up for the mailing list because we will send an email to you.

00:01:00.260 --> 00:01:12.640
soon after, hopefully soon after, we release the episode and we send out all the links for everything we cover, plus extra information and some background information. That's really good.

00:01:13.340 --> 00:01:26.900
We're pretty proud of the email. So please sign up for that. And if you'd like to watch us live or just watch the video post live, after live, whatever that is, the afterlife.

00:01:27.160 --> 00:01:27.300
No,

00:01:27.580 --> 00:01:39.840
later on, you can go to pythonbytes.fm/live and there's a link to our YouTube stuff. So that'd be awesome. So thanks. Let's kick it off, Michael.

00:01:40.719 --> 00:01:47.140
Let's do it. I want to start by saying thank you. ty, I don't know if it means thank you or not.

00:01:47.620 --> 00:01:55.240
TY, the type checker, and also prefix this, Brian, that this is kind of going to be the astral show, just so people are aware.

00:01:55.900 --> 00:01:56.000
Yeah.

00:01:56.140 --> 00:01:56.380
There's

00:01:56.380 --> 00:01:59.400
a couple of topics that we're going to cover.

00:01:59.900 --> 00:02:04.200
And this first and second one comes to us from Skylar Casco.

00:02:04.320 --> 00:02:05.720
So thank you, Skylar, for sending this in.

00:02:05.760 --> 00:02:08.920
We always appreciate when people are like, hey, have you seen this?

00:02:09.539 --> 00:02:10.000
Probably no.

00:02:10.679 --> 00:02:11.760
Sometimes yes, but probably no.

00:02:14.660 --> 00:02:25.660
Everyone knows, not everyone, many people know that the astral folks who make Ruff and uv have released ty, which is a type checker for Python built in Rust.

00:02:26.020 --> 00:02:32.640
And much like what Ruff did for linting, ty does for type checking.

00:02:32.950 --> 00:02:35.940
I think those are probably the closest analogies of the two.

00:02:36.599 --> 00:02:41.420
Yes, you could run previous linters against your code, but it might take 30 seconds.

00:02:41.980 --> 00:02:44.540
Whereas with rough, you're like, wait a minute.

00:02:58.920 --> 00:02:59.500
I'm back, Brian.

00:02:59.510 --> 00:03:00.020
What just happened?

00:03:00.070 --> 00:03:00.880
My browser crashed.

00:03:01.800 --> 00:03:02.620
I don't know.

00:03:03.200 --> 00:03:06.200
Well, I apologize, everyone.

00:03:07.160 --> 00:03:10.240
Let me put this back on the screen, and then we will carry on.

00:03:14.240 --> 00:03:16.160
All right. What was the last thing you heard me say, Brian?

00:03:17.490 --> 00:03:19.320
You know, why don't we

00:03:19.320 --> 00:03:20.820
just kick off this section again?

00:03:21.180 --> 00:03:26.160
We'll just kick off. Thank you. See, this is, this is how they know this is the real recording.

00:03:27.560 --> 00:03:27.680
Yeah.

00:03:29.440 --> 00:03:33.260
All right. So I want to talk about ty from the astral folks.

00:03:35.800 --> 00:05:28.640
ty is very similar and what it brings to the table is what rough did so you know astral they make uv rough and now ty and rough didn't fundamentally change how we check our code right we had black which honestly kind of did and a bunch of tools that that brought together but the real difference here was that rough makes linting almost instant and it's like when you run ruff you got to double check and make sure it's actually on the director you're like did that you know I just hit enter and it's done but there were 20,000 lines of code like how did this did it actually do anything I'm not sure it did anything but in fact it did and it's very similar with ty but for type checking so we've had type checking type checkers like my pie and so on but they've they really struggled on super large code bases and being faster in general is also really nice right so we've talked about ty before I've actually had Charlie and Carl Meyer on talk Python and we dove into it so if you all want like the super detailed dive you can go check that out but what is the news the news is the documentation for ty is up so people want to check out the docs and learn more about ty they can to docs.astral.sh/ty. And there's even an online playground. And of course, there's a bit of a crossover here in the sense that you can say, uv tool install ty to have astral install ty, just like I do. Or if you just want to simply run it and say uvx, and that'll install it in like a ephemeral virtual environment sort of thing.

00:05:29.990 --> 00:05:31.680
But there's also an online playground.

00:05:32.090 --> 00:05:37.160
And this is pretty interesting because the online playground here is written in WebAssembly.

00:05:38.000 --> 00:05:38.520
So

00:05:38.520 --> 00:05:39.900
it's TY

00:05:39.900 --> 00:05:43.780
running against your Python code in the browser in WebAssembly.

00:05:44.420 --> 00:05:45.600
So that's quite neat as well.

00:05:45.630 --> 00:05:47.220
But that's not exactly the news.

00:05:47.830 --> 00:05:49.640
The news is the documentation is up.

00:05:49.920 --> 00:06:01.040
And along with that, they also have unrelated to ty exactly, but in the documentation from Astral side, migrating from a pip to a uv project.

00:06:01.190 --> 00:06:10.620
And it's a walkthrough on how you might go about using uv in its idiomatic way, I guess you would say, right?

00:06:10.730 --> 00:06:18.520
For example, like if you use pip, you probably use pip and pip compile to generate requirements like txt and so on, right?

00:06:18.760 --> 00:06:21.580
How do you do this kind of stuff using UV?

00:06:22.360 --> 00:06:23.820
So people can check that out

00:06:23.820 --> 00:06:25.120
as well.

00:06:26.400 --> 00:06:56.440
yeah i really like the uh the migrating thing um i actually want to i read through it and if you're not migrating if you're just going to use uv i would not recommend reading this because i actually got confused a little bit i've already moved on but um yeah uh uv all the way so indeed um what am i going to talk about let's see um i am going to talk let's just we have a little bit of news from uh from uv from uh astral

00:06:58.920 --> 00:07:01.140
it's the astral show yeah

00:07:01.140 --> 00:07:27.640
so um i actually picked this up from from uh oh tim tim tim i'm blanking right now tim hopper sorry tim uh tim hopper and his python developer tooling handbook uh he posted the uv bail the uv build back end is now stable and actually I'm pretty sure I heard about the uv build backend, but I don't remember playing with it.

00:07:27.700 --> 00:07:28.480
So I played with it.

00:07:29.580 --> 00:07:35.120
So the announcement is that for about a year, uv has had a uv build command.

00:07:36.300 --> 00:07:45.080
And it's kind of like an alternative of, what do we have, Hatchling or Flit or something like that.

00:07:45.740 --> 00:07:50.140
But now it's one of those build backends for pyproject.toml based projects.

00:07:50.920 --> 00:08:37.280
and it's pretty exciting that uv build is here so that's the announcement and it's also that it's stable and also fast so Charlie Marsh posted that he posted that it's 10 to 35 times faster than alternatives so what is he looking at he's looking at comparing uv to hatchling to set up tools and to flip the thing that we don't have an answer on is what is he timing because this is just sort of posting the times for what he calls the backend sync. That is not a command that you can send to hatchling or flit. And you actually hatchling isn't a command line thing. So, I mean, I'm not sure what's going on, but I believe him that it's faster.

00:08:38.919 --> 00:09:05.780
So it would be kind of cool to find out what he's measuring anyway, but uv build is now available and that's cool. I'm pretty excited about that. Along those lines, if you're switching kind of along the lines of with that, that Michael brought up, if you're switching to uv and you'd kind of like to know what's so great about all of this, I recommend checking out Hinnick's video series.

00:09:06.080 --> 00:09:19.040
So he just released the second part in a uv series. And this one is making Python local workflows fast and boring in 2025. And he's talking about uv workflows. So it's a great video.

00:09:19.600 --> 00:09:26.880
I mean, I assume it's a great video. It's 40 minutes long. I haven't actually watched it yet, but I watched the first one. Yeah,

00:09:27.040 --> 00:09:28.800
his videos are great. So yeah, check them out.

00:09:30.840 --> 00:09:38.820
Indeed. And Brian, our sponsor, also very great. Let me tell you about them. How about that?

00:09:39.760 --> 00:09:40.140
That'd be great.

00:09:40.680 --> 00:09:41.040
Yeah.

00:09:41.170 --> 00:09:44.000
So this episode is brought to you by Sentry.

00:09:45.140 --> 00:09:47.040
And I'm a huge fan of Sentry.

00:09:47.410 --> 00:09:49.100
I use them with all of our software.

00:09:49.800 --> 00:09:54.600
And they've been incredibly valuable for tracking down errors in our web apps and other code that we've run.

00:09:55.380 --> 00:09:56.360
I think everything's fine.

00:09:56.450 --> 00:09:57.100
You get a notification.

00:09:57.920 --> 00:09:58.840
There is an error.

00:09:59.020 --> 00:10:01.520
You're like, hmm, I guess that is a problem.

00:10:02.640 --> 00:10:04.040
You know, and it doesn't have to be in your code.

00:10:04.040 --> 00:10:09.260
It could be something like you've upgraded a dependency and now there's some kind of problem that's occurred.

00:10:09.900 --> 00:10:11.860
I've certainly got that notification as well.

00:10:13.160 --> 00:10:18.800
And I've learned about users encountering bugs over at Talk Python and for the courses and stuff.

00:10:19.920 --> 00:10:26.480
And then I'll reach out to them and say, sorry, I saw you ran into this bug that we fixed and they haven't even contacted me yet.

00:10:26.560 --> 00:10:30.280
They're like, okay, awesome, kind of creepy, but amazing.

00:10:30.520 --> 00:10:31.660
No, it's good to know, right?

00:10:32.060 --> 00:10:34.200
Right away and be able to be on top of things.

00:10:35.060 --> 00:10:36.660
So how might you set this up?

00:10:36.760 --> 00:10:40.280
well, they've been adding more and more capabilities and features.

00:10:40.440 --> 00:10:56.800
So I want to walk everyone really quickly through the idea of setting up monitoring and distributed tracing for a Python web app, which means like across API calls or across the JavaScript front end and the Python back end, you can correlate errors.

00:10:57.020 --> 00:10:59.280
So you can see like the whole operation, right?

00:10:59.780 --> 00:11:04.920
So let's imagine we have a Flask app with a React front end and we want to make sure there's no errors during the checkout process.

00:11:06.660 --> 00:11:19.880
I don't know about you, but anytime money and payments are involved, I get a little extra nervous writing that code. So knowing what's going on, very good. So you start by enabling distributed tracing and error monitoring on your Flask backend and your React frontend.

00:11:20.440 --> 00:11:31.080
Super easy, just a few lines of code. Next, you want to add enough context to the frontend and backend actions that you can correlate them into a single request. So add a little bit of information to know what's happening.

00:11:32.780 --> 00:11:43.260
You enrich the spans, this is the sentry construct across these calls, with business contacts like a session ID or a user or whatever.

00:11:44.000 --> 00:11:46.000
And then you can see the requests live in a dashboard.

00:11:46.110 --> 00:11:47.960
So you build a real-time sentry dashboard.

00:11:48.110 --> 00:11:58.480
You spin up one using span metrics to track key attributes like cart size, checkout duration, and you have just one pane for performance and error data.

00:11:58.690 --> 00:11:59.240
And that's it.

00:12:00.220 --> 00:12:12.760
If an error happens, you open the error at Sentry and you get end-to-end request data and error tracebacks to easily spot what's going on both on the JavaScript and the Python side.

00:12:13.700 --> 00:12:29.000
So if your app and your customers matter to you, you'll definitely want to set up Sentry like we have. Visit pythonbytes.fm/sentry and use the code pythonbytes, all caps, just one word, That's pythonbytes.fm/century, code pythonbytes.

00:12:29.350 --> 00:12:31.100
The link is in your podcast player show notes.

00:12:31.130 --> 00:12:33.740
And thank you to Century for supporting the show.

00:12:36.540 --> 00:12:36.720
Awesome.

00:12:40.360 --> 00:12:46.660
I want to move on to something that is sort of, I guess, maybe nerdy, Boolean expressions.

00:12:47.339 --> 00:12:49.140
As if the show wasn't already nerdy.

00:12:52.260 --> 00:12:57.140
So we've got Trey Hunter's article, and I kind of love what Trey Hunter's been doing lately.

00:12:57.220 --> 00:12:58.640
He's been writing some good stuff.

00:12:59.260 --> 00:13:01.520
So refactoring long Boolean expressions.

00:13:03.180 --> 00:13:08.660
And there's lots of reasons why I love this article, but we'll just walk through a little bit of it.

00:13:09.920 --> 00:13:13.320
First of all, he's introducing people to Morgan's Law, which I love.

00:13:13.580 --> 00:13:16.420
Anyway, so here's the idea.

00:13:16.660 --> 00:13:20.220
You've got a Boolean expression.

00:13:20.600 --> 00:13:29.500
And his example, it's a great, pretty good example, is if you've got like, you've got events and users, you've got sort of a web app sort of a thing going on.

00:13:29.980 --> 00:13:38.120
And you want to check to see if a user is verified and the event they're looking at, the date of the event is in the future.

00:13:38.280 --> 00:13:39.360
So it's greater than now.

00:13:40.040 --> 00:13:41.140
And maybe it's not full.

00:13:41.200 --> 00:13:44.360
So maybe you're doing like people signing up for something.

00:13:45.720 --> 00:13:49.140
And this is a reasonable Boolean expression.

00:13:49.900 --> 00:13:51.900
But how do I, it's not that readable.

00:13:52.080 --> 00:13:53.940
So let's, let's try to make it more readable.

00:13:54.060 --> 00:13:56.260
And that's, that's what he's looking at.

00:13:56.400 --> 00:13:57.380
Here's how to break this up.

00:13:58.040 --> 00:14:03.380
And one of the things that I love about this is this seems it's just just sort of basic math.

00:14:03.800 --> 00:14:11.140
If you, if by basic math, your math includes Boolean algebra and things like that.

00:14:11.380 --> 00:14:18.060
And, but a lot of people come from Python from not from a CS background, which is totally valid, of course.

00:14:18.820 --> 00:14:28.640
And but how to manipulate and and an or when I say bullying expression, it's just things, truthy things, true and false things with and an or and things like that.

00:14:30.260 --> 00:14:32.720
So he walks through some of the things you could do.

00:14:32.850 --> 00:14:35.200
You could you could just split up the line.

00:14:35.300 --> 00:14:41.840
So you could just use parentheses around your expression and then you can split the different expressions up on multiple lines.

00:14:42.380 --> 00:15:11.480
and then he's also saying you could either do it like this where at the end at the beginning or you could say user verified and and they go to the next line the event date is less than or is greater than now and you go into the next line not full okay so you can put the and in the beginning or the end it's really up to you however i didn't realize that pep8 had made a call on this pep8 It recommends putting things like and and or at the beginning of the line.

00:15:13.220 --> 00:15:14.540
And just so it's consistent.

00:15:14.730 --> 00:15:20.160
I don't know if it really matters, but I guess I kind of agree that it's a little more readable this way.

00:15:20.670 --> 00:15:21.560
So I like that.

00:15:22.800 --> 00:15:34.860
The other thing that's kind of neat about this that we will lose a little bit is that Boolean operations and expressions are short-circuited in Python.

00:15:35.320 --> 00:15:43.100
So with the ands, that means that all of these expressions have to be true for this to be the entire thing to be true.

00:15:43.340 --> 00:15:50.320
So if I get to user verified and that's false, if the user is not verified, I don't evaluate the rest of it.

00:15:50.330 --> 00:15:53.820
I just know that this is going to be false that Python does.

00:15:54.680 --> 00:15:56.020
And so Python won't run it.

00:15:58.020 --> 00:15:58.720
Hold that thought.

00:15:58.940 --> 00:16:00.640
It's going to make sense later.

00:16:01.280 --> 00:16:12.740
One of the things we can do to make this simpler is to just go ahead and evaluate all of the expressions and assign those to variables like user is verified and then combine those with ands.

00:16:14.000 --> 00:16:15.120
That's easier to read.

00:16:15.440 --> 00:16:26.700
But if any of these evaluations are lengthy things, we don't want to do this because we lose the short circuiting.

00:16:26.980 --> 00:16:34.820
We've evaluated all of the expressions, and then we short circuit just in the ands expression, and we don't get that.

00:16:35.320 --> 00:16:41.020
However, Trey says, you still can get this if you throw everything in functions.

00:16:41.320 --> 00:16:50.200
So he's got these little is verified, is in future, things like that, naming the expressions into different little functions.

00:16:51.100 --> 00:16:51.940
And this is usable.

00:16:52.880 --> 00:16:56.880
I don't think this is that readable, though, but that's just me, I think.

00:16:59.899 --> 00:17:04.540
he makes it kind of all on one line, so the entire function on one line.

00:17:05.300 --> 00:17:08.560
I think that a lot of people, style guides, would kind of hate that.

00:17:09.100 --> 00:17:09.620
You know what?

00:17:10.140 --> 00:17:13.520
I think it looks really neat, the way he's got it written like this, where it's just one line.

00:17:13.579 --> 00:17:15.040
You kind of call the function as the

00:17:15.040 --> 00:17:15.319
test.

00:17:15.860 --> 00:17:16.600
But here's the thing.

00:17:16.780 --> 00:17:20.240
If you run ruff against it, keeping it the astral show, or you

00:17:20.240 --> 00:17:22.959
command alt L it

00:17:22.959 --> 00:17:25.720
in PyCharm, it's going to wrap it into spaces.

00:17:26.240 --> 00:17:27.459
It's just going to keep wrecking it.

00:17:27.600 --> 00:17:33.000
So then you've got to wrap that in a no format command, like directive.

00:17:33.320 --> 00:17:37.100
And then you're like, okay, maybe it's too much to bridge too far.

00:17:37.130 --> 00:17:37.960
But yeah, I get it.

00:17:38.880 --> 00:17:39.000
Okay.

00:17:39.880 --> 00:17:40.020
Yeah.

00:17:40.700 --> 00:17:43.280
So these are cool methods.

00:17:44.140 --> 00:17:46.560
And then let's jump through the math part.

00:17:46.960 --> 00:18:41.820
the math part is kind of, kind of nice. that, is the, there's, you can distribute knots and oars and stuff. And so if you, if you're thinking that I, either a few things are like a or B is true and I want to make sure that that's not the case, whatever that means, that's the same as not a and not B. So there's these, these distributive properties of and and or um and he shows both uh whether you want neither one to be true or um what never both you want one of them to be true but or neither but not both so those sorts of things are distributed why does this matter it matters because like this he shows an example as a multi-line expression and that is confusing to have a not and then a parentheses of a bunch of stuff.

00:18:42.560 --> 00:18:51.860
But if you do not one thing and not another thing and not the third thing, that's actually pretty easy to read, I think.

00:18:52.140 --> 00:18:57.500
So this is a cool intro to Morgan's Law for some people when they're breaking things up.

00:18:57.780 --> 00:18:57.940
So

00:18:57.940 --> 00:18:59.500
anyway.

00:19:00.640 --> 00:19:01.100
Yeah, very nice.

00:19:01.240 --> 00:19:03.900
This is the kind of stuff I like to geek out on as well.

00:19:05.220 --> 00:19:09.840
How many variations or how can you restructure stuff to be so much more readable?

00:19:10.560 --> 00:19:13.120
yeah it's good yeah

00:19:13.120 --> 00:19:28.380
and um i encourage people to look all the way to the end because you have to you you gotta give it to them that some of this stuff is really hard to understand to glance at but um because like the first one the knots just sort of hidden up at the top but anyway yeah all right i

00:19:28.380 --> 00:19:37.820
would also add that you know even though you might evaluate two or three things performance usually is way less important than readability,

00:19:38.220 --> 00:19:39.020
maintainability, and so

00:19:39.020 --> 00:19:39.260
on.

00:19:39.880 --> 00:19:41.760
Yeah, I have to say, even though

00:19:41.760 --> 00:19:47.000
there's like one, sorry, maybe there's like one or two functions, but the rest of them, performance doesn't matter. Go ahead, Brian.

00:19:47.670 --> 00:20:08.780
Yeah, exactly. Don't prematurely optimize because I have to admit that the example that I sort of poo-pooed on because it doesn't allow you to short circuit of just naming the expressions, I do this all the time for quick things because it's very readable to do this.

00:20:09.620 --> 00:20:09.760
Yeah.

00:20:10.300 --> 00:20:10.400
Yeah.

00:20:10.640 --> 00:20:12.100
And we have profilers that can tell us

00:20:12.100 --> 00:20:14.160
if it's

00:20:14.160 --> 00:20:14.820
a problem, right?

00:20:15.380 --> 00:20:15.560
Yeah.

00:20:15.920 --> 00:20:16.500
Usually it's not.

00:20:17.990 --> 00:20:18.280
All right.

00:20:19.820 --> 00:20:19.920
What

00:20:19.920 --> 00:20:20.540
you got for us?

00:20:21.060 --> 00:20:22.400
I have just an extra.

00:20:22.930 --> 00:20:23.680
I have some extras

00:20:23.680 --> 00:20:24.220
to throw

00:20:24.220 --> 00:20:24.640
out here.

00:20:25.480 --> 00:20:25.780
Oh, wait, no.

00:20:25.780 --> 00:20:26.680
I have one more item, don't I?

00:20:27.080 --> 00:20:29.100
And then I have an extra.

00:20:29.580 --> 00:20:36.240
So my last main item is this thing called FastAPI Machine Learning or ML Skeleton.

00:20:37.739 --> 00:20:51.160
So this is speaking to all the data science folks out there that have some kind of data science model or engine or something they want to expose as an API, right?

00:20:51.440 --> 00:20:57.600
Maybe you're not a web developer or you're not really writing a lot of API type of things.

00:20:58.460 --> 00:21:00.480
So which framework do you choose?

00:21:00.800 --> 00:21:01.800
How do you structure it?

00:21:01.800 --> 00:21:02.320
And so on.

00:21:02.560 --> 00:21:14.940
So this person whose name I honestly don't know is just 8BEC, the number 8BEC, B-E-C, created this thing called FastAPI ML Skeletons.

00:21:15.180 --> 00:21:28.200
So what it is it's a template that you can start with and adapt for serving machine learning models in a production ready fast and easy way powered by FastAPI.

00:21:29.080 --> 00:21:31.340
But it doesn't exactly have to be machine learning models.

00:21:31.480 --> 00:21:37.080
Anything that's sort of data science you can put behind an API I think would fit here.

00:21:39.140 --> 00:21:43.580
So it's tested with talks, and it has example code for that.

00:21:44.370 --> 00:21:45.600
And super easy to get started.

00:21:46.240 --> 00:21:56.040
There's a few-- I'll come back to some few little interesting tips and tricks, but it comes with a sample machine learning model that predicts home prices just to have something to work with.

00:21:56.620 --> 00:21:56.940
And

00:21:56.940 --> 00:22:02.180
then over here, come through and go over to the API.

00:22:02.290 --> 00:22:03.520
And they're pretty well structured, right?

00:22:03.700 --> 00:22:09.880
It uses API router and so on instead of jamming it all into just one file like so many of the demos do.

00:22:09.940 --> 00:22:12.380
You're like, oh, look, it's only 10 lines of code.

00:22:12.520 --> 00:22:16.520
You're like, yeah, but if you keep expanding that way, it's going to be terrible.

00:22:17.900 --> 00:22:24.980
It comes with open API documentation by using Pydantic models for all the exchanges.

00:22:25.400 --> 00:22:28.120
It's nice and typed and all these things.

00:22:28.260 --> 00:22:32.760
So if you're getting-- it's not super new, but if you're getting into it, I ran across this.

00:22:32.780 --> 00:22:34.060
And I thought, this is pretty neat.

00:22:34.240 --> 00:22:36.220
This will be a real valuable to some folks.

00:22:36.400 --> 00:22:40.160
And Brian, I learned something.

00:22:40.760 --> 00:22:42.480
Because when it says, how do you start your app?

00:22:42.700 --> 00:22:48.940
Well, what you do is you say set dash a, and then you source your env file, which is your environment variable settings.

00:22:49.080 --> 00:22:50.500
And then you set plus a.

00:22:50.620 --> 00:22:53.920
I'm like, OK, what does that do?

00:22:54.960 --> 00:22:55.760
Yeah, what does that do?

00:22:56.020 --> 00:22:56.880
Are you familiar with this?

00:22:57.280 --> 00:22:57.660
No.

00:22:58.060 --> 00:22:59.100
I wasn't even.

00:22:59.220 --> 00:23:01.720
I'm like, what in the heck is that?

00:23:01.920 --> 00:23:06.600
And that alone might be worth price of entry for this, like learning about this project.

00:23:07.160 --> 00:23:25.860
So what set dash A does, it says anything that you basically set as a variable in your environment basically stays set for you, which is pretty cool.

00:23:26.720 --> 00:23:33.080
So here, what's the right-- so set dash a turns on the all export option.

00:23:33.600 --> 00:23:35.260
Set dash o all export.

00:23:35.450 --> 00:23:40.480
From that point, every variable you assign is automatically exported to the environment.

00:23:41.360 --> 00:23:51.260
So if you just said set dash a, then foo equals bar, then it's as if you had created a script and sourced it and all that kind of stuff.

00:23:52.460 --> 00:23:56.120
So it's a cool way to quickly set some environment variables.

00:23:58.820 --> 00:23:59.040
Yeah.

00:23:59.820 --> 00:24:02.900
I think that's so getting more and more.

00:24:03.600 --> 00:24:09.160
This came up last week of possibly using Dura-in for that as well.

00:24:09.700 --> 00:24:10.280
Yeah, for sure.

00:24:11.880 --> 00:24:12.240
Yeah,

00:24:12.560 --> 00:24:16.100
that's more a structured way, right, to do it for sure.

00:24:16.780 --> 00:24:20.340
But I'm glad to know how to do it manually.

00:24:20.620 --> 00:24:20.920
That's cool.

00:24:21.500 --> 00:24:22.540
Yeah, yeah, exactly.

00:24:25.140 --> 00:24:29.680
If you're creating a little alias or something, right, you could put that at the beginning and just set a bunch of variables or

00:24:29.680 --> 00:24:30.100
whatever.

00:24:30.160 --> 00:24:30.220
Yeah.

00:24:30.300 --> 00:24:30.500
Pretty

00:24:30.500 --> 00:24:30.660
sweet.

00:24:31.600 --> 00:24:37.060
Anyway, if you're looking for a FastAPI skeleton to get started with, yeah, it could be pretty cool.

00:24:39.900 --> 00:24:40.180
All right.

00:24:40.400 --> 00:24:41.480
Do you want to do your extras?

00:24:41.590 --> 00:24:42.440
I only have one extra.

00:24:42.780 --> 00:24:44.860
Sure, me too, because I tried to jump ahead anyway.

00:24:45.460 --> 00:24:57.320
Okay, so this one comes to us from Wee Lee, and I'm going to cover this as sort of a gateway to talk about even more stuff.

00:24:57.980 --> 00:25:01.700
It's pretty specific, but it's an example of something that's pretty neat.

00:25:01.840 --> 00:25:08.760
So keeping with the Astral Show, Ruff has a bunch of rules for how your code should be formatted, right?

00:25:08.820 --> 00:25:14.200
And then things you should do, things you shouldn't do, maybe certain things are deprecated, you should stop doing them, right?

00:25:14.460 --> 00:25:16.660
Doctor, it hurts when I do this. Okay, well, stop.

00:25:19.279 --> 00:25:23.740
But there are things like airflow-specific rules.

00:25:24.020 --> 00:25:27.600
So airflow is a workflow engine type of thing.

00:25:28.899 --> 00:25:34.820
And if you pass, where is the settings? I guess I don't have it in the docs there, but I have it in the show notes.

00:25:35.000 --> 00:25:54.660
So if you pass certain commands to it, such as select Airflow 3, when you run ruff check --fix, it will rewrite old code that was bad into new code automatically having to do with the Airflow framework.

00:25:55.440 --> 00:26:01.020
For example, in Airflow 2, you used to say from Airflow.models import DAG.

00:26:01.960 --> 00:26:08.660
In Airflow 3, you say from Airflow.sdk import DAG, and similarly for other imports.

00:26:09.010 --> 00:26:14.880
So if you were to say that, it will actually rewrite the import statements to use the non-deprecated style.

00:26:16.280 --> 00:26:16.680
Cool, right?

00:26:17.310 --> 00:26:17.480
Yeah.

00:26:17.620 --> 00:26:23.940
Well, if you scroll down a bit, you can see there's similar things for FastAPI.

00:26:25.220 --> 00:26:50.300
bringing our two topics together, right? So there are certain things that have changed with the way you work with like response model or annotated or so on. So it'll go through and it'll change all those. So we have a Pydantic. No, no Pydantic. We should have a Pydantic because that one changed and it's used everywhere. But anyway, there's like framework specific stuff that I think is pretty neat in the rough rule set.

00:26:50.680 --> 00:26:53.000
So thanks to Weave for sending that in.

00:26:53.400 --> 00:26:53.700
And

00:26:53.700 --> 00:26:54.960
yeah, if

00:26:54.960 --> 00:27:01.740
you do Airflow or FastAPI or other things, you can turn that on to do migration across semi-breaking changes.

00:27:03.640 --> 00:27:12.540
And I actually would just encourage people to look through the rough rules because a lot of these things used to be different tools and are different tools.

00:27:12.840 --> 00:27:18.360
But Ruff has pulled in rules and checks for lots of different stuff.

00:27:20.520 --> 00:27:28.060
It's worth perusing around on a regular basis to see what's around and new to see if maybe you should be checking things a little bit more.

00:27:29.160 --> 00:27:33.680
Yeah, they also have NumPy and Pandas rules

00:27:33.680 --> 00:27:34.200
and so on.

00:27:34.260 --> 00:27:34.880
They're pretty cool.

00:27:35.720 --> 00:27:36.720
I just noticed that

00:27:36.720 --> 00:27:37.780
there's a pytest section.

00:27:38.170 --> 00:27:39.660
I haven't looked through that.

00:27:39.820 --> 00:27:40.620
I'd like to see what they've got.

00:27:40.620 --> 00:27:40.620
Oh,

00:27:40.670 --> 00:27:41.060
very cool.

00:27:42.300 --> 00:27:43.000
So one

00:27:43.000 --> 00:27:44.040
of the things that's neat is

00:27:44.040 --> 00:27:58.320
when you go into these rules and stuff, each one of these, it's not just, oh, here's the rule, but it actually tells you what it does, why you should stop doing it, an example how it's bad, and what it fixes.

00:27:58.780 --> 00:28:03.780
So this is actually a really good resource, which I've actually covered the rule set before.

00:28:03.900 --> 00:28:07.860
It's like, hey, you should go check this out just to see what is going on with these.

00:28:08.100 --> 00:28:09.400
Do it this way, not that way.

00:28:10.040 --> 00:28:14.620
But yeah, the framework-specific stuff and pytest-specific stuff is cool.

00:28:15.340 --> 00:28:20.940
And that's also one of the reasons why they don't recommend turning everything on, because that's ridiculous.

00:28:21.170 --> 00:28:21.320
If

00:28:21.320 --> 00:28:22.220
you're not using Airflow,

00:28:22.400 --> 00:28:23.540
you don't need to turn on Airflow.

00:28:24.300 --> 00:28:25.180
Yeah, exactly.

00:28:25.480 --> 00:28:25.980
Things like that.

00:28:27.060 --> 00:28:27.340
All right.

00:28:28.380 --> 00:28:37.980
I have something completely unrelated to Python that I just wanted to bring up, because I'm going to head to Oregon Country Fair this Friday, and I'm totally excited about it.

00:28:38.440 --> 00:28:39.420
Oh, that's awesome.

00:28:39.700 --> 00:28:40.220
What is it?

00:28:41.360 --> 00:28:41.640
What?

00:28:42.300 --> 00:28:43.020
Don't you live

00:28:43.020 --> 00:28:43.240
here?

00:28:43.880 --> 00:28:44.160
I do.

00:28:45.180 --> 00:28:53.500
Oregon Country Fair is a three-day celebration of art, music, and food in Veneta, Oregon, once a year.

00:28:53.600 --> 00:28:55.420
And it's been going on since 1969.

00:28:56.300 --> 00:28:57.420
They have their own property.

00:28:57.840 --> 00:29:04.220
Well, they originally rented it or something, but now they own the property or have for a long time.

00:29:05.310 --> 00:29:06.300
So it can't get shut down.

00:29:07.600 --> 00:29:09.960
Anyway, it's not a county fair.

00:29:10.140 --> 00:29:11.160
It is a country fair.

00:29:11.380 --> 00:29:19.800
So it's music, art vendors, food, and all waste-free.

00:29:19.960 --> 00:29:25.100
So the only garbage that they take out is stuff that people bring in.

00:29:26.000 --> 00:29:28.460
You can throw away your candy bar wrappers if you're there.

00:29:28.700 --> 00:29:35.240
But all the food vendors are all doing containers that are biodegradable.

00:29:35.560 --> 00:29:37.600
So it's a fun event.

00:29:38.660 --> 00:29:39.060
Yeah, very

00:29:39.060 --> 00:29:39.240
cool.

00:29:39.540 --> 00:29:40.300
I might even check it out.

00:29:40.840 --> 00:29:44.060
I missed it last year, and I'm going to go this year.

00:29:45.120 --> 00:29:46.400
So some big games.

00:29:47.240 --> 00:29:47.540
It's fun.

00:29:48.280 --> 00:29:48.480
All right.

00:29:50.060 --> 00:29:50.980
That's our extras.

00:29:51.320 --> 00:29:52.180
Are you ready for a joke?

00:29:53.140 --> 00:29:53.560
I'm ready.

00:29:54.080 --> 00:29:57.600
This is a short joke, but I just can't stop giggling about it.

00:29:58.560 --> 00:29:59.960
I saw this mic.

00:30:01.480 --> 00:30:02.800
Was it on Bluesky?

00:30:03.160 --> 00:30:03.600
I don't know.

00:30:04.640 --> 00:30:05.380
No, Mastodon.

00:30:05.940 --> 00:30:09.240
So somebody named Mike, SCC equals official.

00:30:10.860 --> 00:30:22.100
So he said it's based on an idea of somebody else, Daedalus, and pending the release of some kind of official sticker to use, I now have applied a handy reminder label to my keyboard.

00:30:22.740 --> 00:30:23.520
What is the label?

00:30:24.500 --> 00:30:25.280
Front towards enemy.

00:30:29.300 --> 00:30:30.040
That's amazing.

00:30:30.600 --> 00:30:35.280
So it's a picture of the keyboard facing away from the developer.

00:30:37.000 --> 00:30:38.740
yeah towards the computer

00:30:38.740 --> 00:30:41.520
or towards whoever you're talking to or whatever

00:30:42.490 --> 00:30:44.940
exactly pm maybe and

00:30:44.940 --> 00:30:56.860
if you um if you if you're thinking i've seen that before wherever i seen that front towards enemy that's usually on the front of the claymore mines that are directional minds.

00:30:57.540 --> 00:30:58.340
Oh my gosh.

00:30:59.780 --> 00:31:00.560
Crazy. I love it.

00:31:02.080 --> 00:31:02.400
All right.

00:31:04.600 --> 00:31:06.400
That is the show for us today.

00:31:07.600 --> 00:31:07.860
Awesome.

00:31:08.900 --> 00:31:09.300
Thanks for

00:31:09.300 --> 00:31:10.360
being here as always.

00:31:11.320 --> 00:31:22.220
Yeah, thanks Brian. And I want to encourage people who are listening, if you're not subscribed to the podcast, subscribe in your podcast player. And if you're watching the YouTube version, be sure to subscribe and like the video.

00:31:22.860 --> 00:31:23.360
Helps a lot.

