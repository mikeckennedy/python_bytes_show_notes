WEBVTT

00:00:00.000 --> 00:00:09.120
>> Hello, hello. Hey, Brian. Hey, YouTube. Good to be here with you as always. Thanks


00:00:09.120 --> 00:00:13.800
to people who are dropping by to watch the live stream or check out the recording later.


00:00:13.800 --> 00:00:16.480
And yeah, ready to kick off, Brian? >> I am. Yeah.


00:00:16.480 --> 00:00:22.280
>> All right. Let's do it. Hello, and welcome to Python Bytes, where we deliver Python news


00:00:22.280 --> 00:00:32.040
and headlines directly to your earbuds. This is episode 338, recorded May 30th, 2023. I'm


00:00:32.040 --> 00:00:33.040
Michael Kennedy.


00:00:33.040 --> 00:00:35.760
And I am Brian Okken.


00:00:35.760 --> 00:00:40.160
And this episode is brought to you by us, our courses and books and things like that.


00:00:40.160 --> 00:00:46.480
Talk to you more about that later. Also connect with us on Mastodon or all over on Fossadon


00:00:46.480 --> 00:00:51.960
@mkennedy, @brianokken and @pythonbytes. And we love it when people join the live show.


00:00:51.960 --> 00:00:53.220
If you want to be part of that,


00:00:53.220 --> 00:00:55.880
you can see the next scheduled upcoming one


00:00:55.880 --> 00:00:59.320
at pythonbytes.fm/live and click that notify me


00:00:59.320 --> 00:01:00.660
and YouTube and guess what?


00:01:00.660 --> 00:01:02.260
It'll notify you when it's live.


00:01:02.260 --> 00:01:06.960
So that's the front matter, Brian.


00:01:06.960 --> 00:01:08.960
I think we should start it off with some basics.


00:01:08.960 --> 00:01:09.800
What do you think?


00:01:09.800 --> 00:01:12.040
- Yeah, let's go back to the basics.


00:01:12.040 --> 00:01:15.220
So there is, add to the stream,


00:01:15.220 --> 00:01:18.560
basics of Python packaging.


00:01:18.560 --> 00:01:20.680
So actually this is something near and dear


00:01:20.680 --> 00:01:23.480
to what I've been paying a lot of attention to lately


00:01:23.480 --> 00:01:27.640
is packaging and just how it's changed.


00:01:27.640 --> 00:01:29.240
And it's kind of in the,


00:01:29.240 --> 00:01:32.380
most people have switched over to pyproject.toml now,


00:01:32.380 --> 00:01:34.960
and that's really what this is about.


00:01:34.960 --> 00:01:39.740
So when you're packaging, especially a pure Python package,


00:01:39.740 --> 00:01:41.440
well, one of the things I like about this is,


00:01:41.440 --> 00:01:44.980
it's not just for pure Python, but that's the easy part.


00:01:44.980 --> 00:01:48.080
If we're using pure Python packaging,


00:01:48.080 --> 00:01:50.360
you're probably using a pyproject.toml now,


00:01:50.360 --> 00:01:54.000
And there has been several write-ups of it,


00:01:54.000 --> 00:01:57.560
but some of them are kind of tool-centric.


00:01:57.560 --> 00:02:02.240
So I like this write-up from Jake, or Jake, not sure,


00:02:02.240 --> 00:02:07.040
that talks about just sort of the easy,


00:02:07.040 --> 00:02:08.960
a fairly standard setup.


00:02:08.960 --> 00:02:13.960
So it does talk about the peps in this article,


00:02:13.960 --> 00:02:16.680
but you don't really need to know much about that.


00:02:16.680 --> 00:02:19.640
You can just kind of skip to how do I do it.


00:02:19.640 --> 00:02:24.640
So using the peps and using pyproject.toml,


00:02:24.640 --> 00:02:30.800
you do have to specify what your build backend is.


00:02:30.800 --> 00:02:34.560
So in the top example of this article,


00:02:34.560 --> 00:02:37.160
it talks about using a flit core,


00:02:37.160 --> 00:02:39.840
and that's one I've used a lot of that.


00:02:39.840 --> 00:02:43.160
But then what else do you put in there?


00:02:43.160 --> 00:02:48.160
So within the rest of the pyproject.toml


00:02:48.160 --> 00:02:49.280
is mostly metadata.


00:02:49.280 --> 00:02:51.340
You can have other stuff too, like black and everything,


00:02:51.340 --> 00:02:55.020
but for your project building, the project metadata,


00:02:55.020 --> 00:02:56.660
there's not a lot that goes in it.


00:02:56.660 --> 00:02:58.920
I mean, it looks like a lot when you just glance,


00:02:58.920 --> 00:03:01.860
but it's really, you know, it's your name,


00:03:01.860 --> 00:03:05.480
the name of the project, the version, description of it,


00:03:05.480 --> 00:03:08.880
your author, I will point out that this is not minimal


00:03:08.880 --> 00:03:11.100
because it includes the email.


00:03:11.100 --> 00:03:12.460
You don't have to include the email.


00:03:12.460 --> 00:03:15.260
If you don't want to, you can just put the name.


00:03:15.260 --> 00:03:18.020
And where your license and readme and classifiers are.


00:03:18.020 --> 00:03:19.600
One of the things I want to highlight


00:03:19.600 --> 00:03:22.600
is make sure you have the--


00:03:22.600 --> 00:03:25.960
at the very least, have your license classifier listed,


00:03:25.960 --> 00:03:31.920
because that's how the license shows up on the PyPI.


00:03:31.920 --> 00:03:33.860
So when PyPI is looking at projects,


00:03:33.860 --> 00:03:35.880
it looks at the classifier.


00:03:35.880 --> 00:03:39.560
And then try to throw in which Python is required,


00:03:39.560 --> 00:03:42.500
and then any of your dependencies that you're using.


00:03:42.500 --> 00:03:43.560
And then some links.


00:03:43.560 --> 00:03:45.880
I mean, it's really--


00:03:45.880 --> 00:03:48.560
When you just talk about it as a stream of conscious,


00:03:48.560 --> 00:03:50.800
it seems like a lot, but it's really not that much.


00:03:50.800 --> 00:03:52.260
And you're pretty much done.


00:03:52.260 --> 00:03:55.000
You can do a build now with this.


00:03:55.000 --> 00:03:56.760
This is--


00:03:56.760 --> 00:03:58.080
- One thing, Brian, before you move on from that,


00:03:58.080 --> 00:03:59.800
that I just noticed that I really like,


00:03:59.800 --> 00:04:02.880
if you do like a setup.py,


00:04:02.880 --> 00:04:07.360
what you've got to put is like the readme


00:04:07.360 --> 00:04:10.760
and details and the descriptions


00:04:10.760 --> 00:04:11.920
and all those kinds of things,


00:04:11.920 --> 00:04:13.440
but at least a long description,


00:04:13.440 --> 00:04:15.320
you've got to actually load the file


00:04:15.320 --> 00:04:17.400
and inject the content to the file.


00:04:17.400 --> 00:04:20.440
And here you just put the file names for the license


00:04:20.440 --> 00:04:22.800
and for the readme, and it'll just pull those in, right?


00:04:22.800 --> 00:04:23.320
That's cool.


00:04:23.320 --> 00:04:24.280
Yeah.


00:04:24.280 --> 00:04:27.120
It is one of the things I've harassed people about before,


00:04:27.120 --> 00:04:30.760
is it's weird that the readme and license are specified


00:04:30.760 --> 00:04:32.440
completely different.


00:04:32.440 --> 00:04:37.120
So the license has this, like, what, curly braces,


00:04:37.120 --> 00:04:38.360
and then file equals license.


00:04:38.360 --> 00:04:39.000
Dictionary-ish.


00:04:39.000 --> 00:04:40.480
Yeah, it's a dictionary.


00:04:40.480 --> 00:04:44.120
Whereas the readme is just a text string with the name of the readme.


00:04:44.120 --> 00:04:47.080
It's odd.


00:04:47.080 --> 00:04:53.080
I think that maybe we could have it so the license could just be a string with the license file on it also.


00:04:53.080 --> 00:04:57.760
But anyway, there's probably reasons, I'm sure.


00:04:57.760 --> 00:05:02.840
The thing that I also want to point out is you can put as many URLs as you want in here.


00:05:02.840 --> 00:05:05.560
You can have like this example as homepage and bug tracker.


00:05:06.400 --> 00:05:11.400
A lot of people just list home that lists the GitHub link,


00:05:11.400 --> 00:05:14.200
but you can have your documentation and other stuff.


00:05:14.200 --> 00:05:16.840
And all of these show up in PyPI also,


00:05:16.840 --> 00:05:18.880
when you're, if you're published to PyPI.


00:05:18.880 --> 00:05:21.640
And if you don't want to publish to PyPI,


00:05:21.640 --> 00:05:26.560
one extra is to, that Kim reminds us of,


00:05:26.560 --> 00:05:29.000
is another classifier I learned about,


00:05:29.000 --> 00:05:31.600
is private do not upload,


00:05:31.600 --> 00:05:34.520
which tells PyPI to not upload it.


00:05:34.520 --> 00:05:36.560
So this is all great.


00:05:36.560 --> 00:05:38.320
And a lot of this also,


00:05:38.320 --> 00:05:39.960
if you want to watch it in video form


00:05:39.960 --> 00:05:43.800
is covered in the sharing is caring video.


00:05:43.800 --> 00:05:46.280
It's a talk I gave in PyCascades.


00:05:46.280 --> 00:05:47.800
The video is now online.


00:05:47.800 --> 00:05:49.560
We'll put a link in the show notes.


00:05:49.560 --> 00:05:54.840
But this document or this article goes through


00:05:54.840 --> 00:05:55.880
some of the different,


00:05:55.880 --> 00:05:57.720
make sure that you understand the build step


00:05:57.720 --> 00:06:00.720
of Python-inbuild is one way to do it.


00:06:00.720 --> 00:06:01.680
There's other ways.


00:06:02.680 --> 00:06:06.980
But then it talks about some of the discussion


00:06:06.980 --> 00:06:11.020
around why pyproduct.toml is there instead of setup.py.


00:06:11.020 --> 00:06:13.260
I think we're all convinced, hopefully.


00:06:13.260 --> 00:06:15.260
But then also some choices of backends.


00:06:15.260 --> 00:06:18.560
So this article used Flick Core to start with,


00:06:18.560 --> 00:06:23.560
but there's also Hatchling and Setup Tools and Poetry Core.


00:06:23.560 --> 00:06:26.720
So why would you choose different ones?


00:06:26.720 --> 00:06:30.180
And one of the, and it's 'cause there's extra features.


00:06:30.180 --> 00:06:33.540
Some of them allow extra tags to go in there.


00:06:33.540 --> 00:06:35.340
And the example they're using,


00:06:35.340 --> 00:06:38.900
and that's one of the reasons why I use Hatch a lot,


00:06:38.900 --> 00:06:43.900
is you can have include and exclude things to say,


00:06:43.900 --> 00:06:47.100
you know, the normal stuff that you'd probably include


00:06:47.100 --> 00:06:49.140
in a source distribution,


00:06:49.140 --> 00:06:53.220
also add the tests, for instance, or something else.


00:06:53.220 --> 00:06:56.300
The test is one that like distributors,


00:06:56.300 --> 00:06:59.620
redistributors like Linux distros


00:06:59.620 --> 00:07:01.640
like to have your tests in the source distribution.


00:07:01.640 --> 00:07:05.000
So throwing those in there is a good idea.


00:07:05.000 --> 00:07:09.440
I'm not sure why they're in there by default, but anyway,


00:07:09.440 --> 00:07:11.920
cool discussion.


00:07:11.920 --> 00:07:14.580
One of the things I also love is it talks about


00:07:14.580 --> 00:07:17.000
what happens if you're not just Python.


00:07:17.000 --> 00:07:18.780
What if you have to include C?


00:07:18.780 --> 00:07:21.140
Well, it doesn't really discuss it too much.


00:07:21.140 --> 00:07:22.580
It just points you in the right direction.


00:07:22.580 --> 00:07:25.300
So if you have C or C++ extension,


00:07:25.300 --> 00:07:28.420
there's a scikit-build core that you can use.


00:07:28.420 --> 00:07:30.260
I haven't tried any of these.


00:07:30.260 --> 00:07:34.260
If you're into Mason, you can use Mason Python.


00:07:34.260 --> 00:07:36.540
And then also SetupTool supports it.


00:07:36.540 --> 00:07:39.900
So there's a direction for that sort of stuff.


00:07:39.900 --> 00:07:42.900
- Yeah, straight forward.


00:07:42.900 --> 00:07:45.140
Back to the basics, I like it.


00:07:45.140 --> 00:07:47.340
Definitely demystifies some of that.


00:07:47.340 --> 00:07:49.420
Henry points out in the audience,


00:07:49.420 --> 00:07:53.740
the license key will likely change via PEP 649.


00:07:53.740 --> 00:07:56.220
And currently Flit just ignores whatever you put there.


00:07:56.220 --> 00:07:59.660
the Trove classifiers are the canonical location


00:07:59.660 --> 00:08:01.380
for the license.


00:08:01.380 --> 00:08:03.020
So just FYI.


00:08:03.020 --> 00:08:04.260
Thanks for that, Henry.


00:08:04.260 --> 00:08:07.700
He always has such excellent extra information,


00:08:07.700 --> 00:08:08.700
background information.


00:08:08.700 --> 00:08:10.660
- And we're so lucky to have some smart people


00:08:10.660 --> 00:08:12.860
show up on the chat, so thank you.


00:08:12.860 --> 00:08:13.780
- Yes, absolutely.


00:08:13.780 --> 00:08:17.500
All right, let's talk vectors.


00:08:17.500 --> 00:08:19.420
So I wanna talk about VEX,


00:08:19.420 --> 00:08:23.340
and this project comes to us from Ollie,


00:08:23.340 --> 00:08:25.180
who open sourced this, Ollie Rice.


00:08:26.180 --> 00:08:28.140
Now, before I actually tell you about what VEX is


00:08:28.140 --> 00:08:31.380
and what it does, let's take a step back


00:08:31.380 --> 00:08:34.940
and talk about the PG vector extension


00:08:34.940 --> 00:08:37.560
for Postgres, the database.


00:08:37.560 --> 00:08:39.580
So this is an open source,


00:08:39.580 --> 00:08:42.180
because VEX has to like builds on top of this.


00:08:42.180 --> 00:08:45.460
So this is an open source vector similarity search


00:08:45.460 --> 00:08:49.520
extension for Postgres.


00:08:49.520 --> 00:08:54.520
So you can do things like given a bunch of points


00:08:54.980 --> 00:08:56.180
in different dimensions.


00:08:56.180 --> 00:09:02.020
This could be xy, could be xyz, could be temperature and time.


00:09:02.020 --> 00:09:02.940
I don't know.


00:09:02.940 --> 00:09:05.780
It could be whatever you come up with.


00:09:05.780 --> 00:09:09.380
It'll give you the exact and approximate nearest neighbors,


00:09:09.380 --> 00:09:10.460
allow you to query that.


00:09:10.460 --> 00:09:12.660
Like given some measurement, what other measurement


00:09:12.660 --> 00:09:13.300
is closest?


00:09:13.300 --> 00:09:16.740
Or give me the five measurements or positions


00:09:16.740 --> 00:09:18.260
that are closest to this.


00:09:18.260 --> 00:09:20.220
Gives you L2 distance.


00:09:20.220 --> 00:09:22.500
It'll do the inner product and cosine distance,


00:09:22.500 --> 00:09:24.140
so different metrics.


00:09:24.140 --> 00:09:25.500
That makes sense.


00:09:25.500 --> 00:09:29.820
And any language with a Postgres client can speak to it.


00:09:29.820 --> 00:09:31.060
It's pretty cool, right?


00:09:31.060 --> 00:09:31.940
- Yeah.


00:09:31.940 --> 00:09:34.340
- Yeah, so let me see if I can find some examples.


00:09:34.340 --> 00:09:39.340
So I can say, get me the nearest neighbor by L2 distance.


00:09:39.340 --> 00:09:42.300
And it says, the way you would do that directly


00:09:42.300 --> 00:09:45.540
is you say select star from items,


00:09:45.540 --> 00:09:50.020
order by embedding, whatever the value is,


00:09:50.020 --> 00:09:53.380
is closest to, in this case, the vector value


00:09:53.380 --> 00:09:55.940
three, one, two, and then limit five,


00:09:55.940 --> 00:09:57.360
just like you do in databases, you know,


00:09:57.360 --> 00:09:58.200
give me the first five.


00:09:58.200 --> 00:10:00.380
So order by closest to farthest,


00:10:00.380 --> 00:10:01.380
and then just give me five,


00:10:01.380 --> 00:10:03.180
that'll give you the five nearest, right?


00:10:03.180 --> 00:10:05.620
You could do things like sort by distance,


00:10:05.620 --> 00:10:08.300
you can find exact matches,


00:10:08.300 --> 00:10:11.180
and you can also do other database things.


00:10:11.180 --> 00:10:13.160
Let's see, like,


00:10:13.160 --> 00:10:16.400
give me like where the ID is,


00:10:16.400 --> 00:10:20.100
or is not equal to some value, and so on, right?


00:10:20.100 --> 00:10:21.380
So pretty neat.


00:10:21.380 --> 00:10:26.860
Now, that's the pgVector extension just for Postgres.


00:10:26.860 --> 00:10:32.540
So you're speaking to it in a special flavor of SQL, sort of.


00:10:32.540 --> 00:10:38.660
In Python, you can talk to this using this thing called vex.


00:10:38.660 --> 00:10:40.940
So with vex, you just pip install it,


00:10:40.940 --> 00:10:43.980
and then you insert a bunch of vectors.


00:10:43.980 --> 00:10:50.060
And then you can write queries that are more API-based,


00:10:50.060 --> 00:10:53.020
I guess, not just direct SQL statements.


00:10:53.020 --> 00:10:55.380
So you give it the vector that you want to query against


00:10:55.380 --> 00:10:59.300
and then, you know, like how many you want back.


00:10:59.300 --> 00:11:01.620
If there's a filter to say,


00:11:01.620 --> 00:11:03.900
I only want the ones for a certain year, right?


00:11:03.900 --> 00:11:05.740
Filter it down and then do that query


00:11:05.740 --> 00:11:08.380
based on distance or whatever.


00:11:08.380 --> 00:11:10.220
So pretty cool.


00:11:10.220 --> 00:11:12.700
If people are out there doing that kind of work,


00:11:12.700 --> 00:11:15.380
I think they might find this pretty helpful.


00:11:15.380 --> 00:11:17.780
- Yeah, very.


00:11:17.780 --> 00:11:18.620
Oops.


00:11:18.620 --> 00:11:24.380
It's not something that I have exact direct use for these days,


00:11:24.380 --> 00:11:27.220
but a lot of scientific or geospatial type of things


00:11:27.220 --> 00:11:28.880
seems relevant.


00:11:28.880 --> 00:11:31.380
Yeah, I've been spending more and more time in SQL queries


00:11:31.380 --> 00:11:34.700
lately, so anything to help with that is good.


00:11:34.700 --> 00:11:35.740
Yeah, absolutely.


00:11:35.740 --> 00:11:37.580
Now, one final thing, it says--


00:11:37.580 --> 00:11:40.020
in here, it says you've got to have--


00:11:40.020 --> 00:11:41.420
I can't remember which one talked


00:11:41.420 --> 00:11:43.220
about getting Postgres.


00:11:43.220 --> 00:11:45.240
One of them-- yeah, this one says,


00:11:45.240 --> 00:11:46.860
if you don't have a Postgres database,


00:11:46.860 --> 00:11:47.940
see some hosting options.


00:11:47.940 --> 00:11:49.660
And if you're on Mac, I just wanna throw out there


00:11:49.660 --> 00:11:53.780
really quick, postgresapp.com.


00:11:53.780 --> 00:11:56.340
All you do for this one is, it's super awesome.


00:11:56.340 --> 00:11:59.700
You download it, you unzip it or un-DMG,


00:11:59.700 --> 00:12:01.540
whatever its packaging format is,


00:12:01.540 --> 00:12:03.220
and it's just a postgres.app.


00:12:03.220 --> 00:12:04.940
You double click it, Postgres is running.


00:12:04.940 --> 00:12:06.740
You close it, Postgres is not running.


00:12:06.740 --> 00:12:08.060
It auto-updates itself. - Oh, nice.


00:12:08.060 --> 00:12:10.140
- Yeah, so pretty sweet.


00:12:10.140 --> 00:12:11.380
And it's open source too.


00:12:11.380 --> 00:12:15.260
- Cool, neat. - Yeah, yeah, very neat.


00:12:15.260 --> 00:12:17.540
- I'll be needing that very soon.


00:12:17.540 --> 00:12:19.260
- Yeah, so, yeah, cool.


00:12:19.260 --> 00:12:20.100
Check it out.


00:12:20.100 --> 00:12:20.940
Yeah, that one's, that's pretty nice.


00:12:20.940 --> 00:12:23.120
Okay, now before we move on, Brian,


00:12:23.120 --> 00:12:27.660
brought to you by us, this episode is.


00:12:27.660 --> 00:12:29.540
So I wanted to remind people to, you know,


00:12:29.540 --> 00:12:33.260
please check out the brand new Talk Python Training apps.


00:12:33.260 --> 00:12:35.960
They're rebuilt for iOS and Android.


00:12:35.960 --> 00:12:37.180
Really think it's a cool experience


00:12:37.180 --> 00:12:38.140
for people to take it.


00:12:38.140 --> 00:12:41.580
It has offline playback and obviously way better


00:12:41.580 --> 00:12:44.260
on the mobile and tablet type of things.


00:12:44.260 --> 00:12:46.540
And it comes with six free courses


00:12:46.540 --> 00:12:49.420
that you can just tap on and join the free courses


00:12:49.420 --> 00:12:50.820
plus anything you might've gotten.


00:12:50.820 --> 00:12:51.980
So check that out.


00:12:51.980 --> 00:12:55.340
And I wanna shout out your book


00:12:55.340 --> 00:12:57.180
or what do you wanna shout out today?


00:12:57.180 --> 00:13:00.020
- Yeah, well, time is running out,


00:13:00.020 --> 00:13:04.580
but the book is still on a promo.


00:13:04.580 --> 00:13:07.940
So Python Testing with pytest,


00:13:07.940 --> 00:13:10.700
there is, what is the promo?


00:13:10.700 --> 00:13:15.700
It is spring 2023, all caps, all one word,


00:13:15.780 --> 00:13:18.660
and you get 50% off and it's just for like today


00:13:18.660 --> 00:13:21.940
and tomorrow I think it runs out at the end of May.


00:13:21.940 --> 00:13:26.740
But anytime you want it, there's a 25, that's 50% off.


00:13:26.740 --> 00:13:30.840
But if you want to sign up and get to their email list,


00:13:30.840 --> 00:13:33.620
you can get 25% off normally.


00:13:33.620 --> 00:13:37.580
So anyway, that's a good thing.


00:13:37.580 --> 00:13:38.420
- Excellent.


00:13:38.420 --> 00:13:40.440
Also really quick follow up.


00:13:40.440 --> 00:13:44.020
Henry points out that it was actually PEP 639,


00:13:44.020 --> 00:13:46.440
not 649, typo there.


00:13:46.440 --> 00:13:49.240
- Yeah, so 639 is improved license clarity


00:13:49.240 --> 00:13:52.420
with better package metadata.


00:13:52.420 --> 00:13:55.680
It's in draft, but hopefully there'll be,


00:13:55.680 --> 00:13:57.000
it's a draft, really?


00:13:57.000 --> 00:14:01.960
Anyway, some changes to how you specify the license,


00:14:01.960 --> 00:14:02.960
which would be good.


00:14:02.960 --> 00:14:07.600
- All right, let's talk about plagues next.


00:14:07.600 --> 00:14:11.560
- Plagues, like locusts and grasshoppers.


00:14:11.560 --> 00:14:12.960
- Yes, exactly.


00:14:12.960 --> 00:14:13.800
- Nice.


00:14:13.800 --> 00:14:15.560
- I don't know, I like these kind of plugs.


00:14:15.560 --> 00:14:16.600
These are awesome tools.


00:14:16.600 --> 00:14:19.280
- So I've used Locust before.


00:14:19.280 --> 00:14:21.280
I think you've used Locust for-


00:14:21.280 --> 00:14:23.120
- I love Locust, yeah, for load testing.


00:14:23.120 --> 00:14:24.480
So good.


00:14:24.480 --> 00:14:29.480
- So there's a company, AlterX, maybe?


00:14:29.480 --> 00:14:34.080
Any, anyway, they've introduced Grasshopper.


00:14:34.080 --> 00:14:36.040
So it's Locust Grasshopper.


00:14:36.040 --> 00:14:39.200
It's a open source Python library for load testing,


00:14:39.200 --> 00:14:41.600
but it's built on Locust.


00:14:41.600 --> 00:14:44.640
So what's the difference?


00:14:44.640 --> 00:14:48.240
So we're linking to an article that discusses


00:14:48.240 --> 00:14:50.720
the introduction and discusses why they love Locust


00:14:50.720 --> 00:14:55.720
and everything, which is great, but they have a check,


00:14:55.720 --> 00:14:58.400
like a Grasshopper, what does it add?


00:14:58.400 --> 00:15:00.600
Well, it adds a whole bunch of really cool features


00:15:00.600 --> 00:15:02.240
that you might need if you're load testing


00:15:02.240 --> 00:15:06.000
and developing a package and keeping track


00:15:06.000 --> 00:15:07.840
of your load testing over time.


00:15:07.840 --> 00:15:10.380
So it has these extra checks in here


00:15:10.380 --> 00:15:12.600
And checks, if I get this right,


00:15:12.600 --> 00:15:16.400
are things like special validation functions,


00:15:16.400 --> 00:15:19.600
Boolean functions that can run


00:15:19.600 --> 00:15:21.760
and you can tell different checks


00:15:21.760 --> 00:15:24.120
whether or not they're passing or failing over time,


00:15:24.120 --> 00:15:24.960
which is based on--


00:15:24.960 --> 00:15:28.240
- I see, like the document had this text in it


00:15:28.240 --> 00:15:32.040
to make sure it wasn't insane in the response or something.


00:15:32.040 --> 00:15:33.760
- Yeah, actually I'm not quite sure.


00:15:33.760 --> 00:15:35.440
So I'd have to dig into that more.


00:15:35.440 --> 00:15:39.520
But one of the things I really like is these custom trends,


00:15:39.520 --> 00:15:43.160
which custom trends and timing thresholds


00:15:43.160 --> 00:15:47.120
and integration with pytest, of course, that's awesome.


00:15:47.120 --> 00:15:50.000
Time series, database integration and reporting.


00:15:50.000 --> 00:15:51.120
This all sounds great.


00:15:51.120 --> 00:15:54.000
One of the things I really love that's talked about


00:15:54.000 --> 00:15:55.760
in the read me a little bit more


00:15:55.760 --> 00:15:59.640
is this idea of like tagging your test suite.


00:15:59.640 --> 00:16:01.440
So tag-based suites.


00:16:01.440 --> 00:16:06.440
So you can see your load test results


00:16:06.440 --> 00:16:08.040
based on different versions.


00:16:08.040 --> 00:16:12.180
So if you're tagging with using version tagging on your repo,


00:16:12.180 --> 00:16:14.080
you can see what the progression is


00:16:14.080 --> 00:16:16.780
and how well your application is doing


00:16:16.780 --> 00:16:19.500
based on different load requirements.


00:16:19.500 --> 00:16:22.380
And you can have thresholds like with this load,


00:16:22.380 --> 00:16:27.260
you need to have like 90% the speeds of things.


00:16:27.260 --> 00:16:29.220
The other thing is some speed thresholds.


00:16:29.220 --> 00:16:34.220
Like you can have multiple timing little functions


00:16:36.660 --> 00:16:41.560
that have multiple time, multiple HTTP requests.


00:16:41.560 --> 00:16:45.780
So an action that really is like a user action


00:16:45.780 --> 00:16:47.380
often is several interactions,


00:16:47.380 --> 00:16:50.340
like how fast can somebody log in or something like that,


00:16:50.340 --> 00:16:51.820
or go through the checkout,


00:16:51.820 --> 00:16:54.660
that's gonna be a multiple sequence thing.


00:16:54.660 --> 00:16:57.660
You can time that under load and under stress.


00:16:57.660 --> 00:17:00.240
And that's a pretty cool addition.


00:17:00.240 --> 00:17:04.220
- Or even to load this page, we're going to,


00:17:04.220 --> 00:17:07.740
it's probably some complicated JavaScript front end.


00:17:07.740 --> 00:17:10.220
So it's gonna call this API and that API and that API


00:17:10.220 --> 00:17:13.220
just to load this HTML page.


00:17:13.220 --> 00:17:16.060
So you kind of want to treat that as like the page is loaded


00:17:16.060 --> 00:17:19.280
when these seven API calls finish, right?


00:17:19.280 --> 00:17:20.660
Something like that.


00:17:20.660 --> 00:17:22.700
'Cause they're not using HTMX like they should.


00:17:22.700 --> 00:17:29.860
Also a nice shout out to a sponsor there, InfluxDB.


00:17:29.860 --> 00:17:32.020
So pythonbytes.fm/influxdb.


00:17:32.020 --> 00:17:35.180
is the time series database that it integrates into.


00:17:35.180 --> 00:17:37.020
When I looked at this, Brian, I'm like,


00:17:37.020 --> 00:17:38.620
yeah, but Locust is pretty awesome.


00:17:38.620 --> 00:17:41.860
Why would somebody go create another one of these


00:17:41.860 --> 00:17:43.820
for the Python world when Locust exists?


00:17:43.820 --> 00:17:46.660
And then I read it, it's like, oh, we've extended Locust.


00:17:46.660 --> 00:17:47.940
Oh, and here's why.


00:17:47.940 --> 00:17:49.140
And they give some pretty good reasons.


00:17:49.140 --> 00:17:51.300
Another trend that would be cool,


00:17:51.300 --> 00:17:53.260
I don't know if you can actually measure it here,


00:17:53.260 --> 00:17:55.460
but it talks about custom trends


00:17:55.460 --> 00:17:57.220
is one of the things you can track.


00:17:58.500 --> 00:18:03.500
Things like CPU load and memory load on the server


00:18:03.500 --> 00:18:04.900
would be really interesting.


00:18:04.900 --> 00:18:09.900
Or maybe CPU load on the database server


00:18:09.900 --> 00:18:11.900
while we're hammering the web server.


00:18:11.900 --> 00:18:13.700
If you could pull those kinds of things in,


00:18:13.700 --> 00:18:15.780
that would be really cool.


00:18:15.780 --> 00:18:17.220
- Yeah, maybe you can.


00:18:17.220 --> 00:18:20.120
- Yeah, I kind of get the sense that it might be possible,


00:18:20.120 --> 00:18:21.500
but let's see.


00:18:21.500 --> 00:18:25.140
Not sure.


00:18:25.140 --> 00:18:28.260
Very cool.


00:18:28.260 --> 00:18:29.860
This looks nice.


00:18:29.860 --> 00:18:30.700
It's definitely worth checking out.


00:18:30.700 --> 00:18:31.980
- Some of the check functions,


00:18:31.980 --> 00:18:36.100
you might be able to abuse that for that purposes too.


00:18:36.100 --> 00:18:39.120
While your load test is running,


00:18:39.120 --> 00:18:43.300
check CPU levels and stuff like that.


00:18:43.300 --> 00:18:44.140
I don't know. - Yeah, exactly.


00:18:44.140 --> 00:18:44.960
- Utilization.


00:18:44.960 --> 00:18:49.140
So anyway, neat project.


00:18:49.140 --> 00:18:50.100
- Yeah, that's a good project.


00:18:50.100 --> 00:18:52.460
So Grasshopper, right?


00:18:52.460 --> 00:18:53.300
- Yeah.


00:18:53.300 --> 00:18:57.100
Oh, one of the things that they talk about in the,


00:18:57.100 --> 00:18:59.580
I wasn't clear on it because I went and looked at PyPI


00:18:59.580 --> 00:19:02.960
and looked for Grasshopper and I found the wrong one.


00:19:02.960 --> 00:19:05.780
So it's Locust-grasshopper.


00:19:05.780 --> 00:19:08.940
So that's the GitHub repos under that.


00:19:08.940 --> 00:19:10.540
And that's what you pip install also


00:19:10.540 --> 00:19:12.860
is Locust-grasshopper.


00:19:12.860 --> 00:19:13.700
Just to be clear.


00:19:13.700 --> 00:19:14.520
- Got it.


00:19:14.520 --> 00:19:18.980
I wonder if it's like a superset probably,


00:19:18.980 --> 00:19:20.660
you know, so if I have already written


00:19:20.660 --> 00:19:22.260
a bunch of Locust tests,


00:19:22.260 --> 00:19:26.540
could I run them or how easy is it to?


00:19:26.540 --> 00:19:30.180
I don't know, but I imagine it's not that bad to convert.


00:19:30.180 --> 00:19:32.860
- Yeah, it looks like the code is super similar.


00:19:32.860 --> 00:19:35.140
So worst case, you maybe change the base class,


00:19:35.140 --> 00:19:37.560
but possibly the base class is like derived


00:19:37.560 --> 00:19:40.360
from the locus base class that you use for your test cases


00:19:40.360 --> 00:19:41.940
or test suites.


00:19:41.940 --> 00:19:44.300
Yeah, anyway, I haven't played with it yet,


00:19:44.300 --> 00:19:45.140
but it looks cool.


00:19:45.140 --> 00:19:46.980
- The readme has got tons of information too.


00:19:46.980 --> 00:19:51.940
Good job on loading up the readme with lots of examples.


00:19:51.940 --> 00:19:52.780
- Indeed.


00:19:52.780 --> 00:19:56.320
And before we move on, Kim says,


00:19:56.320 --> 00:19:59.520
could possibly hook into telemetry tooling like Prometheus,


00:19:59.520 --> 00:20:01.440
which would enable metrics from other servers


00:20:01.440 --> 00:20:02.280
and stuff like that.


00:20:02.280 --> 00:20:04.260
Yeah, that's kind of what I was talking about,


00:20:04.260 --> 00:20:07.120
but not with actually concrete ways of doing it,


00:20:07.120 --> 00:20:08.960
like Prometheus, so cool.


00:20:08.960 --> 00:20:09.880
- Neat.


00:20:09.880 --> 00:20:14.120
- Yeah, and I wanna talk to you about something


00:20:14.120 --> 00:20:17.520
that is near and dear to this podcast.


00:20:17.520 --> 00:20:20.600
We talk about a lot of topics, right, Brian?


00:20:20.600 --> 00:20:22.880
- Yeah.


00:20:22.880 --> 00:20:25.560
- And if you go over to Python Bytes


00:20:25.560 --> 00:20:27.760
and you pick a particular episode


00:20:27.760 --> 00:20:28.920
and you scroll through here,


00:20:28.920 --> 00:20:33.080
you can see it is chock full of links.


00:20:33.080 --> 00:20:36.080
So one of the things you might wanna do,


00:20:36.080 --> 00:20:37.960
you might wanna say, "Oh, I'm listening to this.


00:20:37.960 --> 00:20:40.120
"I wanna remember not all of them,


00:20:40.120 --> 00:20:43.440
"but just three things that I can come back to."


00:20:43.440 --> 00:20:47.760
And if you're on your iThing, your iPhone, iPad, et cetera,


00:20:47.760 --> 00:20:50.080
or even on your Mac, technically,


00:20:50.080 --> 00:20:52.260
if you've got an Apple Silicon Mac,


00:20:53.200 --> 00:20:57.000
you can use this thing called MemoCast.


00:20:57.000 --> 00:21:02.000
So MemoCast was created by Daniel Engvall.


00:21:02.000 --> 00:21:06.340
It's interesting on its own,


00:21:06.340 --> 00:21:07.880
but it's also interesting in a way


00:21:07.880 --> 00:21:11.380
to kind of script iOS with Python,


00:21:11.380 --> 00:21:12.900
which I hadn't really thought about doing.


00:21:12.900 --> 00:21:14.960
So first of all, let me tell you about MemoCast


00:21:14.960 --> 00:21:16.960
and then you can think how this might apply to you.


00:21:16.960 --> 00:21:19.700
So this is a small iOS app


00:21:19.700 --> 00:21:22.960
that allows you to add links heard about in a podcast


00:21:22.960 --> 00:21:26.800
as a reminder, so you can check them off your reminder list,


00:21:26.800 --> 00:21:30.160
you know, the @reminder app, when you're done with them.


00:21:30.160 --> 00:21:31.360
So check this out.


00:21:31.360 --> 00:21:35.040
Imagine, this is reading the website,


00:21:35.040 --> 00:21:38.040
imagine you just as often as I,


00:21:38.040 --> 00:21:40.720
imagine that you just as often as I do listen to a podcast


00:21:40.720 --> 00:21:43.020
such as Python Bytes, a fantastic one.


00:21:43.020 --> 00:21:43.960
Thank you, thank you. - Nice.


00:21:43.960 --> 00:21:46.480
- Using Google Podcasts, walk around,


00:21:46.480 --> 00:21:48.500
you know, you're doing it while you're out


00:21:48.500 --> 00:21:52.040
and maybe busy like mowing the lawn or something, right?


00:21:52.040 --> 00:21:54.860
And then there's some thing talked about,


00:21:54.860 --> 00:21:56.220
you wish you had more time to check out.


00:21:56.220 --> 00:21:58.040
Thankfully, the reference in the show notes,


00:21:58.040 --> 00:22:00.140
but you'd have to look it up and go through it


00:22:00.140 --> 00:22:02.480
and copy paste and all that.


00:22:02.480 --> 00:22:07.480
So there's a little video here, notice this on this page.


00:22:07.480 --> 00:22:11.120
And it shows all you gotta do is say, share,


00:22:11.120 --> 00:22:14.980
go to the podcast player, say share, click memo cast.


00:22:14.980 --> 00:22:16.360
And it gives it a second,


00:22:16.360 --> 00:22:18.140
then it has a list of all the links


00:22:18.140 --> 00:22:20.580
that it's discovered in there.


00:22:20.580 --> 00:22:21.620
Isn't that cool, Brian?


00:22:21.620 --> 00:22:22.460
- That is neat.


00:22:22.460 --> 00:22:24.900
- Yeah, I can't really zoom that without the,


00:22:24.900 --> 00:22:27.300
here we go, I can't really zoom it without the


00:22:27.300 --> 00:22:30.620
responsive design only making it smaller, but.


00:22:30.620 --> 00:22:32.580
So, how is this possible?


00:22:32.580 --> 00:22:34.420
The thing you share it to is you don't share it


00:22:34.420 --> 00:22:37.540
directly to MemoCast, you say run in Pythonista.


00:22:37.540 --> 00:22:43.700
And so this is a Python script that Daniel wrote


00:22:43.700 --> 00:22:47.660
that basically you run it through Pythonista,


00:22:47.660 --> 00:22:49.940
Python 10 on iOS.


00:22:49.940 --> 00:22:52.380
It does a guessing request or something


00:22:52.380 --> 00:22:56.440
called over to our website and parses out all the links


00:22:56.440 --> 00:22:59.180
and then turns that into a UI that you can interact with.


00:22:59.180 --> 00:23:00.680
Cool, right?


00:23:00.680 --> 00:23:02.540
- That's all done on the phone then?


00:23:02.540 --> 00:23:03.640
- Yeah. - That's pretty cool.


00:23:03.640 --> 00:23:05.580
- Yeah, it's pretty cool.


00:23:05.580 --> 00:23:08.740
And so basically this is an example,


00:23:08.740 --> 00:23:11.100
supports Python by StockPython and RealPython


00:23:11.100 --> 00:23:12.900
as the three supported podcasts,


00:23:12.900 --> 00:23:15.060
but you can integrate new ones if you wish.


00:23:15.060 --> 00:23:18.660
And you install it once you have Python Nista,


00:23:18.660 --> 00:23:22.260
which I think cost $10 US one time,


00:23:22.260 --> 00:23:23.780
but then you can install it,


00:23:23.780 --> 00:23:26.500
scanning the QR code here with Pythonista


00:23:26.500 --> 00:23:27.620
and that will download it.


00:23:27.620 --> 00:23:29.900
Then you can just turn it into a thing that you can run.


00:23:29.900 --> 00:23:32.120
It also talks about how you add new podcasts


00:23:32.120 --> 00:23:34.140
if you wanna add a different one,


00:23:34.140 --> 00:23:36.840
but that's somewhat interesting.


00:23:36.840 --> 00:23:40.220
I think what's more interesting is he took this Python code


00:23:40.220 --> 00:23:44.300
and the code is right here to build kind of a scriptable


00:23:44.300 --> 00:23:47.320
GUI for iOS, which I think is pretty cool.


00:23:48.180 --> 00:23:51.220
- Yeah, that is nice.


00:23:51.220 --> 00:23:52.060
- Yeah. - Cool.


00:23:52.060 --> 00:23:54.680
- So talked about like, I did try to do this with Kivy


00:23:54.680 --> 00:23:57.080
and other stuff, but let me tell you the build chain


00:23:57.080 --> 00:24:00.500
and code signing and all of that is like a nightmare.


00:24:00.500 --> 00:24:02.200
And so here you just write a Python script


00:24:02.200 --> 00:24:05.500
and just run it inside of this app that already exists.


00:24:05.500 --> 00:24:09.540
And final bonus before I call the time on this one.


00:24:09.540 --> 00:24:16.020
Daniel also discovered that if you're on a Mac


00:24:16.020 --> 00:24:20.980
with Apple Silicon, then you can run Pythonista


00:24:20.980 --> 00:24:23.380
as an iOS app within macOS.


00:24:23.380 --> 00:24:26.200
You go to the App Store, search for it on Mac,


00:24:26.200 --> 00:24:27.900
and it doesn't come up, but then you click,


00:24:27.900 --> 00:24:32.020
say, show me tablet, iPad apps, and then it'll come up.


00:24:32.020 --> 00:24:34.140
And then it integrates with your favorite IDEs


00:24:34.140 --> 00:24:37.260
such as PyCharm, and you can run it.


00:24:37.260 --> 00:24:40.640
So you can develop these little things on your Mac


00:24:40.640 --> 00:24:43.300
with a proper keyboard and everything,


00:24:43.300 --> 00:24:47.000
and then just deploy it to Pythonista on iOS.


00:24:47.000 --> 00:24:48.940
- Yeah, that's pretty cool.


00:24:48.940 --> 00:24:52.100
- So yeah, people can check that out, memo cast.


00:24:52.100 --> 00:24:54.400
It's kind of cool that it's about our podcast in this way,


00:24:54.400 --> 00:24:56.740
but it's also more cool that it just kind of shows you


00:24:56.740 --> 00:25:00.640
how to take Python and leverage Pythonista


00:25:00.640 --> 00:25:02.900
a little bit more than maybe I realized you could,


00:25:02.900 --> 00:25:05.180
like an OS integration level.


00:25:05.180 --> 00:25:06.580
- Yeah, I didn't know you could do that.


00:25:06.580 --> 00:25:07.420
That's cool.


00:25:07.420 --> 00:25:08.860
- I did not either.


00:25:08.860 --> 00:25:09.700
- Nice.


00:25:10.540 --> 00:25:13.900
And I guess before we jump out of here as well,


00:25:13.900 --> 00:25:15.420
Kim points out on Android,


00:25:15.420 --> 00:25:17.220
I have some but not tons of experience with,


00:25:17.220 --> 00:25:20.020
you can run Python code with QPython


00:25:20.020 --> 00:25:23.780
should someone want to emulate this for Android.


00:25:23.780 --> 00:25:24.620
Thanks, Kim.


00:25:24.620 --> 00:25:26.860
- Cool.


00:25:26.860 --> 00:25:28.740
- All right, is that all of our topics, Brian?


00:25:28.740 --> 00:25:30.700
- That is all of our main topics, yes.


00:25:30.700 --> 00:25:33.580
- Yes, of course, 'cause we always have extras.


00:25:33.580 --> 00:25:34.420
And jokes.


00:25:34.420 --> 00:25:36.620
Any extras for you though?


00:25:36.620 --> 00:25:38.620
- Yeah, I can kick this off.


00:25:38.620 --> 00:25:43.620
So just a few, a shout out from,


00:25:43.620 --> 00:25:45.780
oh, who wrote this?


00:25:45.780 --> 00:25:46.740
I'm not sure.


00:25:46.740 --> 00:25:49.480
- Hugo Van Kimenad.


00:25:49.480 --> 00:25:54.420
- Wrote, "Help test Python 3.12 beta."


00:25:54.420 --> 00:25:56.520
So 3.12 is in beta.


00:25:56.520 --> 00:25:58.660
If you are a package maintainer


00:25:58.660 --> 00:26:00.360
or just your own application,


00:26:00.360 --> 00:26:02.300
you may as well start testing to make sure


00:26:02.300 --> 00:26:04.220
that you don't have any surprises.


00:26:04.220 --> 00:26:08.180
So this article does talk through


00:26:08.180 --> 00:26:10.260
basically how to hook up your GitHub actions


00:26:10.260 --> 00:26:14.340
so that you're testing 3.12 also.


00:26:14.340 --> 00:26:18.980
And then whether it's the official Ubuntu latest


00:26:18.980 --> 00:26:22.180
or the dead snakes version, a couple of ways to do it.


00:26:22.180 --> 00:26:25.060
And then even if you're using Travis CI still,


00:26:25.060 --> 00:26:29.780
fine, anyway, you can do that with that as well.


00:26:29.780 --> 00:26:31.500
So that's the first.


00:26:31.500 --> 00:26:34.740
Secondly, I wanted to say that


00:26:34.740 --> 00:26:38.560
at the Python Software Foundation blog.


00:26:38.560 --> 00:26:40.620
There is a whole bunch of new articles.


00:26:40.620 --> 00:26:43.020
They basically wrote up, there's articles writing up


00:26:43.020 --> 00:26:44.700
all the different things that happened


00:26:44.700 --> 00:26:47.120
at the Python Language Summit.


00:26:47.120 --> 00:26:49.380
I haven't gone through these, they're just available.


00:26:49.380 --> 00:26:51.260
Wanted to shout that out.


00:26:51.260 --> 00:26:52.940
It's some interesting stuff though.


00:26:52.940 --> 00:26:54.920
- There is, I just interviewed Brett Cannon


00:26:54.920 --> 00:26:56.900
over on Talk Python about this.


00:26:56.900 --> 00:26:59.940
He gave us the walkthrough of all the presentations


00:26:59.940 --> 00:27:03.580
and thoughts at the Language Summit.


00:27:03.580 --> 00:27:06.420
- Okay, and then from the news from the weird,


00:27:06.420 --> 00:27:08.100
I don't have much information about this


00:27:08.100 --> 00:27:12.820
other than on the Python package index blog,


00:27:12.820 --> 00:27:14.820
they say, "Hey, PyPI was subpoenaed."


00:27:14.820 --> 00:27:18.180
And this thing happened and we complied


00:27:18.180 --> 00:27:20.060
and talked to lawyers and it's weird,


00:27:20.060 --> 00:27:23.500
but it's just odd.


00:27:23.500 --> 00:27:24.340
- Yeah.


00:27:24.340 --> 00:27:26.660
- So how about you, any extras?


00:27:26.660 --> 00:27:27.780
- Yeah, I wonder if this has to do


00:27:27.780 --> 00:27:30.020
with some of the malware or crypto jacking.


00:27:30.020 --> 00:27:30.860
- Maybe.


00:27:30.860 --> 00:27:31.980
- Stuff that was uploaded to it.


00:27:31.980 --> 00:27:32.900
And they're like, "All right, we're gonna try


00:27:32.900 --> 00:27:36.500
of these people. There are certain places that are not


00:27:36.500 --> 00:27:40.900
allowed to say whether. They received a request and I think


00:27:40.900 --> 00:27:44.500
this is not a subpoena this is more of a- was it Fossa like


00:27:44.500 --> 00:27:51.460
the more- international crime. Investigation laws. So have us


00:27:51.460 --> 00:27:55.220
subpoena canaries. That it'll it'll be like the canary will


00:27:55.220 --> 00:27:57.940
be here unless we are subpoenaed then the canaries gone we won't


00:27:57.940 --> 00:28:01.220
say anything. But we'll just this bird won't be on the page


00:28:01.220 --> 00:28:04.460
on the page or something anymore, so you can kind of know.


00:28:04.460 --> 00:28:06.060
But yeah, it's kind of cool there.


00:28:06.060 --> 00:28:07.740
They're being transparent about that.


00:28:07.740 --> 00:28:08.580
- Yeah, one of the--


00:28:08.580 --> 00:28:09.980
- #transparency it says right there.


00:28:09.980 --> 00:28:11.900
- Yeah, and one of the things that was interesting


00:28:11.900 --> 00:28:13.660
is that they got asked for addresses,


00:28:13.660 --> 00:28:15.720
including mailing and residential addresses,


00:28:15.720 --> 00:28:17.620
but they don't collect that.


00:28:17.620 --> 00:28:22.460
They just, I mean, that information isn't saved, so.


00:28:22.460 --> 00:28:23.700
- Yeah, I'm sure it's a form,


00:28:23.700 --> 00:28:25.100
and like, we would like this information.


00:28:25.100 --> 00:28:27.780
Well, we don't have that, so we'll give you what we got.


00:28:27.780 --> 00:28:29.360
- Yeah, okay.


00:28:30.340 --> 00:28:33.260
- Nice, all right, I got a couple of real quick ones here.


00:28:33.260 --> 00:28:36.580
Not Python needs, one I wrote something called,


00:28:36.580 --> 00:28:38.020
"You can ignore this post."


00:28:38.020 --> 00:28:40.060
Trying to get a lot of attention, of course.


00:28:40.060 --> 00:28:45.060
What it actually was is I just wrote about the github.com/github/ignore repo,


00:28:45.060 --> 00:28:51.300
which has all, like when you go to GitHub


00:28:51.300 --> 00:28:52.780
and you say, "Create a new project,"


00:28:52.780 --> 00:28:55.180
and it says, "Do you want an ignore file?"


00:28:55.180 --> 00:28:56.600
And it gives you a list.


00:28:56.600 --> 00:28:59.660
These are all the ignore files for every language


00:28:59.660 --> 00:29:02.080
supported there, including Python,


00:29:02.080 --> 00:29:05.480
which is in here somewhere right there.


00:29:05.480 --> 00:29:08.800
And so you can actually see what they all are.


00:29:08.800 --> 00:29:09.760
You could even do a PR,


00:29:09.760 --> 00:29:11.920
like we really need to start ignoring,


00:29:11.920 --> 00:29:14.480
if there's a new file format that's like a build output


00:29:14.480 --> 00:29:17.520
of some new pyproject.toml tooling,


00:29:17.520 --> 00:29:19.560
and it starts to, it needs to be ignored,


00:29:19.560 --> 00:29:21.840
you could say do a PR against this.


00:29:21.840 --> 00:29:24.260
So every repo on GitHub starts to adopt it.


00:29:24.260 --> 00:29:29.260
but also if you're doing say Python and front end stuff,


00:29:29.260 --> 00:29:32.860
you can go look for node and you could select one


00:29:32.860 --> 00:29:35.860
and then copy some stuff out of another


00:29:35.860 --> 00:29:37.900
to kind of create a combined one, right?


00:29:37.900 --> 00:29:39.900
So you're not like, well, is it node or is it Python?


00:29:39.900 --> 00:29:41.340
I really want the ignore for.


00:29:41.340 --> 00:29:46.420
So anyway, that article is just sort of about that


00:29:46.420 --> 00:29:48.700
really short so people can check that out.


00:29:48.700 --> 00:29:51.980
- I use that all the time because I'm also on GitLab


00:29:51.980 --> 00:29:55.420
and GitLab doesn't fill those out for you.


00:29:55.420 --> 00:29:56.660
- Oh yeah, I hadn't really thought about it,


00:29:56.660 --> 00:29:59.060
but you can nab it for other purposes as well, right?


00:29:59.060 --> 00:29:59.900
- Yeah, yep.


00:29:59.900 --> 00:30:03.380
- And then someone on Mastodon pointed out


00:30:03.380 --> 00:30:06.020
you can do Knox Python ignore,


00:30:06.020 --> 00:30:08.260
and I think it'll generate that file for you


00:30:08.260 --> 00:30:10.020
and uses that as the backend.


00:30:10.020 --> 00:30:11.580
I think, I think so.


00:30:11.580 --> 00:30:13.380
Some of the Knox and some incantation


00:30:13.380 --> 00:30:16.220
will generate an ignore file for you.


00:30:16.220 --> 00:30:18.620
- And if we have that wrong, somebody will correct us.


00:30:18.620 --> 00:30:20.220
- They sure will, and we appreciate it.


00:30:20.220 --> 00:30:21.780
And speaking of incantations,


00:30:21.780 --> 00:30:23.080
Are you ready for the joke?


00:30:23.080 --> 00:30:24.120
- Yes.


00:30:24.120 --> 00:30:27.020
- Okay, so here's the joke for developers.


00:30:27.020 --> 00:30:30.260
It says, "Careful, or you might end up summoning a demon."


00:30:30.260 --> 00:30:35.220
And it has two categories, what you do in programming


00:30:35.220 --> 00:30:37.780
and what you do in demon summoning.


00:30:37.780 --> 00:30:40.500
So first one is, "You must know a language unspoken


00:30:40.500 --> 00:30:41.940
"by mankind."


00:30:41.940 --> 00:30:43.300
Programming, check.


00:30:43.300 --> 00:30:45.420
The demon summoning, check.


00:30:45.420 --> 00:30:49.860
"Requires that you be exact or suffer dire consequences."


00:30:49.860 --> 00:30:51.020
Programming, check.


00:30:51.020 --> 00:30:53.080
Demon summoning, check.


00:30:53.080 --> 00:30:56.260
Involves much cursing, swearing of oaths,


00:30:56.260 --> 00:30:57.920
and pleading with a higher power.


00:30:57.920 --> 00:30:59.120
Programming, check.


00:30:59.120 --> 00:31:01.760
Demon summoning, check.


00:31:01.760 --> 00:31:04.960
Another one is not understanding the true power you wield


00:31:04.960 --> 00:31:06.840
or the consequences of your actions.


00:31:06.840 --> 00:31:08.160
Programming, check.


00:31:08.160 --> 00:31:10.000
Demon summoning, check.


00:31:10.000 --> 00:31:11.640
The only differentiation,


00:31:11.640 --> 00:31:14.640
which I think is debatable, is candles.


00:31:14.640 --> 00:31:16.920
Do you use candles to accomplish this job?


00:31:16.920 --> 00:31:18.800
Programming, no.


00:31:18.800 --> 00:31:20.240
Demon summoning, yes.


00:31:20.240 --> 00:31:22.440
And if you look over on Reddit,


00:31:22.440 --> 00:31:24.700
the comments are pretty glorious.


00:31:24.700 --> 00:31:26.720
- That's funny.


00:31:26.720 --> 00:31:29.680
- Let me see if I'm finding these good ones just here.


00:31:29.680 --> 00:31:33.280
Someone has said something like,


00:31:33.280 --> 00:31:37.200
I've been trying for hours to get this daemon to run


00:31:37.200 --> 00:31:38.280
and I just can't get it to work.


00:31:38.280 --> 00:31:39.720
That's what I'm writing on.


00:31:39.720 --> 00:31:43.240
Well, daemon, not daemon, right?


00:31:43.240 --> 00:31:44.080
Of course.


00:31:44.080 --> 00:31:44.900
- Daemon.


00:31:44.900 --> 00:31:47.000
- And then someone else points out,


00:31:47.000 --> 00:31:49.780
you know, there actually is a candle app platform,


00:31:49.780 --> 00:31:52.380
which sounds truly demonic to me.


00:31:52.380 --> 00:31:54.220
So let me describe, this is like a real thing.


00:31:54.220 --> 00:31:55.060
This is not a joke.


00:31:55.060 --> 00:31:56.960
Candlescript.org, somebody created this.


00:31:56.960 --> 00:32:00.700
Let me lay out the beautiful technologies


00:32:00.700 --> 00:32:02.780
that Candlescript combines.


00:32:02.780 --> 00:32:05.360
Are you ready to use the new open source platform


00:32:05.360 --> 00:32:10.360
that unifies core features of XSLT, XQuery, XML Schema,


00:32:10.360 --> 00:32:13.780
RelaxNG, BNF, and XQuery update


00:32:13.780 --> 00:32:17.420
and more into a single language called Candle?


00:32:17.420 --> 00:32:18.500
No, please, no.


00:32:18.500 --> 00:32:21.140
XSLT, no.


00:32:21.140 --> 00:32:22.820
Yeah, that sounds pretty demonic already.


00:32:22.820 --> 00:32:25.900
So I'm a little suspicious of that one.


00:32:25.900 --> 00:32:29.900
Yeah, and I think actual demon summoning,


00:32:29.900 --> 00:32:32.300
they're probably worried about climate change


00:32:32.300 --> 00:32:36.740
and probably switching to low carbon lighting.


00:32:36.740 --> 00:32:40.260
So probably LEDs now instead of actual candles.


00:32:40.260 --> 00:32:41.100
Yep, LEDs.


00:32:41.100 --> 00:32:43.340
Got to be careful about home automation.


00:32:43.340 --> 00:32:47.340
You might complete all the check boxes.


00:32:47.340 --> 00:32:50.100
Yeah, I think sometimes you have to execute a child.


00:32:50.100 --> 00:32:50.940
That's funny.


00:32:50.940 --> 00:32:53.500
- Yeah, they both execute children, right?


00:32:53.500 --> 00:32:55.940
I mean, that's one's a pretty rough one.


00:32:55.940 --> 00:32:59.380
Kim, I believe maybe has done enough XSLT as I have


00:32:59.380 --> 00:33:01.220
to know that it should never ever be done.


00:33:01.220 --> 00:33:04.020
And says, "CandleScript has just triggered my PTSD."


00:33:04.020 --> 00:33:06.700
(both laughing)


00:33:06.700 --> 00:33:07.700
- Yeah, funny.


00:33:07.700 --> 00:33:09.100
- The battle XML days.


00:33:09.100 --> 00:33:13.020
Well, that's it, Brian.


00:33:13.020 --> 00:33:13.940
Great show as always.


00:33:13.940 --> 00:33:14.980
Thank you for being here.


00:33:14.980 --> 00:33:15.900
- Well, thank you.


00:33:16.900 --> 00:33:18.220
Thanks to you everyone for listening


00:33:18.220 --> 00:33:20.700
and those of you who joined live, it's great.


00:33:20.700 --> 00:33:21.660
- Bye.


00:33:21.660 --> 00:33:22.500
- Bye.

