WEBVTT

00:00:00.000 --> 00:00:03.640
- Everyone out there in the live stream.


00:00:03.640 --> 00:00:05.360
Hello, hello.


00:00:05.360 --> 00:00:06.400
We're about to get started.


00:00:06.400 --> 00:00:09.200
In fact, I'm gonna kick it over to Brian in just a second


00:00:09.200 --> 00:00:11.000
to start the podcast section.


00:00:11.000 --> 00:00:14.000
But for you, if you've got thoughts or comments


00:00:14.000 --> 00:00:15.480
you want featured on the show,


00:00:15.480 --> 00:00:19.440
be sure to put them into the live stream comments here


00:00:19.440 --> 00:00:21.340
and we'll try to have you be part of that.


00:00:21.340 --> 00:00:25.400
So without further ado, Brian, let's do this.


00:00:25.400 --> 00:00:26.720
- All right.


00:00:26.720 --> 00:00:28.340
Hello and welcome to Python Bytes


00:00:28.340 --> 00:00:30.500
where we deliver Python news and headlines


00:00:30.500 --> 00:00:33.140
directly to your earbuds.


00:00:33.140 --> 00:00:38.140
This is episode 223, recorded March 3rd, 2021.


00:00:38.140 --> 00:00:39.780
I'm Brian Okken.


00:00:39.780 --> 00:00:41.340
- I'm Michael Kennedy.


00:00:41.340 --> 00:00:43.220
- And I'm Sebastian Ramirez.


00:00:43.220 --> 00:00:44.420
(laughing)


00:00:44.420 --> 00:00:47.180
- Cool, we did that without talking over the top.


00:00:47.180 --> 00:00:49.220
- Hey, we're getting good at it.


00:00:49.220 --> 00:00:51.020
Welcome Sebastian, great to see you.


00:00:51.020 --> 00:00:52.340
- Thank you very much for inviting me.


00:00:52.340 --> 00:00:54.140
It's a pleasure to be here with you.


00:00:56.340 --> 00:00:59.500
- All right, well, let's start it off.


00:00:59.500 --> 00:01:02.260
Oh, I wanted to mention, we'll talk about them later,


00:01:02.260 --> 00:01:05.300
but thanks to Datadog for sponsoring this episode.


00:01:05.300 --> 00:01:06.300
- Yeah, yeah.


00:01:06.300 --> 00:01:08.300
And Sebastian, people maybe know you,


00:01:08.300 --> 00:01:11.200
but they definitely know your API framework, right?


00:01:11.200 --> 00:01:14.220
- I hope so, at least some of them.


00:01:14.220 --> 00:01:18.700
Yeah, should I say who I am or not yet?


00:01:18.700 --> 00:01:20.380
- Yeah, yeah, sure, give us a quick little introduction


00:01:20.380 --> 00:01:22.300
and then we'll jump over to the items.


00:01:22.300 --> 00:01:25.420
- Awesome, so hello everyone, I'm Sebastian Ramirez.


00:01:25.420 --> 00:01:30.140
the creator of FastAPI, which is a web API framework


00:01:30.140 --> 00:01:33.260
for Python based on type annotations.


00:01:33.260 --> 00:01:38.260
That, yeah, well it has been used by quite a bunch


00:01:38.260 --> 00:01:41.380
of interesting organizations and products recently.


00:01:41.380 --> 00:01:44.540
I'm a software developer at Explosion in Berlin, Germany,


00:01:44.540 --> 00:01:47.500
but I'm actually from Colombia, that's why the accent.


00:01:47.500 --> 00:01:49.180
And yeah, that's about me.


00:01:49.180 --> 00:01:51.180
- Yeah, and you have the best mustache


00:01:51.180 --> 00:01:53.420
of anyone that's ever been on the show.


00:01:53.420 --> 00:01:54.580
- Thank you very much.


00:01:54.580 --> 00:01:59.280
>> Definitely. Well, let's jump in.


00:01:59.280 --> 00:02:05.300
I wanted to cover the Python Developer Survey 2020 results.


00:02:05.300 --> 00:02:07.260
This is pretty exciting.


00:02:07.260 --> 00:02:10.720
We'll get a little bit in a minute,


00:02:10.720 --> 00:02:13.820
talk about one of the things I wanted to talk about, of course.


00:02:13.820 --> 00:02:15.340
But let's look at it a little bit.


00:02:15.340 --> 00:02:22.540
The Python Developer Survey is put on by the PSF,


00:02:22.540 --> 00:02:24.940
Isn't it joint PSF and JetBrains?


00:02:24.940 --> 00:02:27.500
- Yeah, I think it's put on by, yeah, the PSF.


00:02:27.500 --> 00:02:30.580
It's like hosted and analyzed by JetBrains,


00:02:30.580 --> 00:02:32.740
but it's not collected by JetBrains.


00:02:32.740 --> 00:02:34.820
They make a point of not, you know,


00:02:34.820 --> 00:02:37.340
it's put on python.org and maybe even PyPI,


00:02:37.340 --> 00:02:41.300
but not on jetbrains.com.


00:02:41.300 --> 00:02:43.740
So they try to not slant it in that regard.


00:02:43.740 --> 00:02:48.740
- Yeah, so, but yeah, it's hard to, yeah, anyway.


00:02:48.740 --> 00:02:50.300
There's a whole bunch of cool stuff in here.


00:02:50.300 --> 00:02:51.660
One of the things that, takeaway,


00:02:51.660 --> 00:02:58.220
that I was confused by a little bit at first was the use. What do you use Python for? And


00:02:58.220 --> 00:03:04.300
you've got a lot of reductions in percentages. But if you look at what increased, so you kind


00:03:04.300 --> 00:03:10.380
of see that people are using Python for more stuff and it's spreading out. So there's increases in


00:03:10.380 --> 00:03:16.940
education and in desktop apps. Games increased quite a bit. Mobile, which was interesting.


00:03:17.820 --> 00:03:24.300
and other. So the long tail has gotten fatter and that's good. We're using Python for a lot of stuff.


00:03:24.300 --> 00:03:32.300
Another good sign is Python 3 is increased. So last year we had 90% usage of Python 3


00:03:32.300 --> 00:03:37.820
and now it's up to 94%. I'm not sure why it's not at 100% yet, but I think there's


00:03:37.820 --> 00:03:43.660
some probably some legacy stuff. There's some projects out there that are in the


00:03:43.660 --> 00:03:46.180
"Please don't touch it, it's working.


00:03:46.180 --> 00:03:48.940
"Nobody knows how it works, just leave it alone," category.


00:03:48.940 --> 00:03:52.100
And that's probably that last 5% or so.


00:03:52.100 --> 00:03:52.940
- Yeah.


00:03:52.940 --> 00:03:57.220
What are people using for environment isolation?


00:03:57.220 --> 00:04:01.060
We've got virtualenv at 54%,


00:04:01.060 --> 00:04:04.220
but I assume that also includes venv,


00:04:04.220 --> 00:04:06.220
or the built-in, there's like two--


00:04:06.220 --> 00:04:09.020
- Yeah, I saw there was no mention of venv,


00:04:09.020 --> 00:04:12.140
so just virtualenv probably is that as well.


00:04:12.140 --> 00:04:12.980
I had that same question.


00:04:12.980 --> 00:04:17.060
like, wait, surely somebody uses Pip, you know,


00:04:17.060 --> 00:04:20.980
or Python-BNV, 'cause I answered that question.


00:04:20.980 --> 00:04:22.780
- So we kind of use those interchangeably.


00:04:22.780 --> 00:04:25.100
So I guess that maybe that's what it is.


00:04:25.100 --> 00:04:29.100
But one of the things that surprised me was that the,


00:04:29.100 --> 00:04:31.260
I've heard, I know a lot of people use Conda


00:04:31.260 --> 00:04:33.980
for data science stuff, that's at 22%,


00:04:33.980 --> 00:04:37.500
but 32% are just using Docker for isolation,


00:04:37.500 --> 00:04:40.540
which that surprised me, that's an interesting thing.


00:04:40.540 --> 00:04:42.300
- That's a hardcore isolation.


00:04:42.300 --> 00:04:43.300
- Yeah, yeah.


00:04:43.300 --> 00:04:47.020
Although I think more and more people are just using it


00:04:47.020 --> 00:04:50.720
all the time for a lot of stuff, so I guess why not?


00:04:50.720 --> 00:04:51.600
- Sebastian, what about you?


00:04:51.600 --> 00:04:56.600
Are you a Poetry, are you a Python-M VNV, are you a Docker?


00:04:56.600 --> 00:04:57.600
- I'm all over the place.


00:04:57.600 --> 00:04:59.560
Actually, I'm quite a fan of Poetry


00:04:59.560 --> 00:05:04.440
and I think it's a great tool because it puts a lot


00:05:04.440 --> 00:05:08.100
of functionality in the same place, handling dependencies,


00:05:08.100 --> 00:05:11.920
handling environments, and handling pinning versions.


00:05:11.920 --> 00:05:14.000
when you add a new package with Poetry,


00:05:14.000 --> 00:05:16.400
it automatically detects what is the latest version


00:05:16.400 --> 00:05:19.160
and has the right ranges of versions.


00:05:19.160 --> 00:05:21.040
So I think that's very, very cool.


00:05:21.040 --> 00:05:23.400
And creating a package with Poetry


00:05:23.400 --> 00:05:25.440
is super straightforward to create a package


00:05:25.440 --> 00:05:28.160
that can be later published directly.


00:05:28.160 --> 00:05:32.840
So it's more similar to NPM in the Node.js world.


00:05:32.840 --> 00:05:35.080
- Right, 'cause you can publish from it as well, right?


00:05:35.080 --> 00:05:36.840
You can create the package and then publish from it.


00:05:36.840 --> 00:05:38.920
- Yeah, and have all the configurations together.


00:05:38.920 --> 00:05:43.580
but at the same time, I'm using a vanilla Python VM


00:05:43.580 --> 00:05:45.600
in a bunch of projects at work and things


00:05:45.600 --> 00:05:47.580
and a bunch of Docker as well.


00:05:47.580 --> 00:05:50.640
So yeah, it's many different things.


00:05:50.640 --> 00:05:52.960
I will think that for local development


00:05:52.960 --> 00:05:56.640
is always one type of a virtual environment


00:05:56.640 --> 00:05:59.800
being a VM for poetry and then for deployment,


00:05:59.800 --> 00:06:01.920
sometimes it's just like pure Docker,


00:06:01.920 --> 00:06:04.640
sometimes poetry inside of Docker,


00:06:04.640 --> 00:06:06.960
but not even using the virtual environment.


00:06:06.960 --> 00:06:09.720
But yeah, I will think Docker for deployment


00:06:09.720 --> 00:06:13.280
and then locally, virtual environments, at least for me.


00:06:13.280 --> 00:06:14.360
- Yeah, and that was the majority.


00:06:14.360 --> 00:06:17.600
I think most people are primarily using VNV for that,


00:06:17.600 --> 00:06:18.960
but I can't remember exactly.


00:06:18.960 --> 00:06:20.240
Hey, Brian, quick comment.


00:06:20.240 --> 00:06:25.280
- What's that?


00:06:25.280 --> 00:06:29.680
- Is VNV versus virtual ENV a Python 2 versus 3 thing?


00:06:29.680 --> 00:06:32.920
- Oh, yeah, I guess maybe it is.


00:06:32.920 --> 00:06:35.320
- I think, you know, VNV was added, I believe,


00:06:35.320 --> 00:06:40.640
Python 3, but, and I had kind of forgotten about virtual env, but there's some interesting


00:06:40.640 --> 00:06:45.560
stuff. I think we covered it a while ago, the release of version 20, because it actually


00:06:45.560 --> 00:06:50.040
does a lot of interesting stuff. And then Magnuson has a comment on poetry, "Use it


00:06:50.040 --> 00:06:58.280
to create the virtual environment manually in order to use --prompt," which is, so it's


00:06:58.280 --> 00:07:04.000
not called venv when your prompt changes, but project name in parentheses when your


00:07:04.000 --> 00:07:08.080
your project changes, which is the question Gandalf had.


00:07:08.080 --> 00:07:12.520
And then Dean is a fan of the virtual ENV wrapper as well.


00:07:12.520 --> 00:07:13.400
So awesome.


00:07:13.400 --> 00:07:16.560
This, I mean, yeah, I haven't either.


00:07:16.560 --> 00:07:18.880
I feel like this is one of the areas where


00:07:18.880 --> 00:07:20.720
there's just so many different ways


00:07:20.720 --> 00:07:22.320
people are doing this stuff.


00:07:22.320 --> 00:07:25.520
But yeah, with our special guest here, Brian,


00:07:25.520 --> 00:07:26.480
but how about you touch on this one?


00:07:26.480 --> 00:07:28.080
This is big news here.


00:07:28.080 --> 00:07:30.200
- Yeah, so this is big news.


00:07:30.200 --> 00:07:33.600
So frameworks and libraries under web frameworks,


00:07:33.600 --> 00:07:37.040
We've got Flask at 46%, Django at 43,


00:07:37.040 --> 00:07:41.000
and then, dun, dun, dun, FastAPI at 12%.


00:07:41.000 --> 00:07:42.840
It's the first time it was on the survey


00:07:42.840 --> 00:07:44.840
and it's already up at number three.


00:07:44.840 --> 00:07:46.760
So that's cool. - Whoa.


00:07:46.760 --> 00:07:47.880
- Way to go.


00:07:47.880 --> 00:07:49.720
The growth is super, super interesting there.


00:07:49.720 --> 00:07:52.280
And yeah, congratulations, Sebastian.


00:07:52.280 --> 00:07:54.720
And I actually think that this is gonna grow


00:07:54.720 --> 00:07:55.540
quite a bit more.


00:07:55.540 --> 00:07:57.520
If you look at the first derivative,


00:07:57.520 --> 00:08:00.720
it's higher for the numbers for FastAPI,


00:08:00.720 --> 00:08:03.640
like the rate of growth or just the growth.


00:08:03.640 --> 00:08:06.760
Also, I feel like a lot of people


00:08:06.760 --> 00:08:10.480
are not necessarily leveraging,


00:08:10.480 --> 00:08:12.080
I mean, I'd like to hear your thoughts on this, Sebastian,


00:08:12.080 --> 00:08:17.080
leveraging FastAPI's ability to deliver HTML as well.


00:08:17.080 --> 00:08:22.240
- Yeah, absolutely, because if you're rendering HTML


00:08:22.240 --> 00:08:26.880
in the back end, the benefits of FastAPI are not as obvious.


00:08:26.880 --> 00:08:31.880
So I guess people probably will use it more for APIs,


00:08:31.880 --> 00:08:36.160
but then there's actually a bunch of people using it


00:08:36.160 --> 00:08:41.160
for very different stuff than what I initially thought of.


00:08:41.160 --> 00:08:44.440
- Yeah, I think you can basically get down


00:08:44.440 --> 00:08:46.200
to the Starlette type features and stuff,


00:08:46.200 --> 00:08:50.440
and then you can build an equivalent of Flask or Django.


00:08:50.440 --> 00:08:52.520
And what I think's interesting about that is


00:08:52.520 --> 00:08:53.960
a lot of people are like, well, I could do this


00:08:53.960 --> 00:08:55.360
really cool API with FastAPI,


00:08:55.360 --> 00:08:57.640
and then do we use Flask or Django for the web part?


00:08:57.640 --> 00:08:59.940
It's like, well, if you've already got the FastAPI part


00:08:59.940 --> 00:09:01.980
and you've got like 10 pages you wanna serve,


00:09:01.980 --> 00:09:04.600
just, you know, don't juggle two apps,


00:09:04.600 --> 00:09:05.440
just like put them in there.


00:09:05.440 --> 00:09:06.260
- Yeah. - It's actually


00:09:06.260 --> 00:09:07.100
not that hard.


00:09:07.100 --> 00:09:08.480
So I think there's some really interesting stuff.


00:09:08.480 --> 00:09:11.340
And I think as people learn those and leverage those,


00:09:11.340 --> 00:09:12.880
it's only gonna grow because they're like,


00:09:12.880 --> 00:09:16.000
oh, I actually don't have to have Flask plus FastAPI,


00:09:16.000 --> 00:09:17.760
I could just have FastAPI.


00:09:17.760 --> 00:09:18.880
- Yeah, actually-- - Not that Flask is bad,


00:09:18.880 --> 00:09:19.700
but yeah.


00:09:19.700 --> 00:09:22.280
- Yeah, of course, and like FastAPI is actually,


00:09:23.600 --> 00:09:26.520
FastAPI owes and was inspired a lot


00:09:26.520 --> 00:09:28.860
by all of these frameworks that paved the way.


00:09:28.860 --> 00:09:30.880
Like all of these designs, all of these ideas


00:09:30.880 --> 00:09:32.320
came before FastAPI.


00:09:32.320 --> 00:09:34.820
FastAPI just putting them together


00:09:34.820 --> 00:09:37.920
with the new type annotations from modern Python.


00:09:37.920 --> 00:09:41.720
But yeah, it's all the work that has been done


00:09:41.720 --> 00:09:43.200
by a lot of people.


00:09:43.200 --> 00:09:44.040
- Yeah, yeah.


00:09:44.040 --> 00:09:45.960
Standing on the shoulders of giants type thing.


00:09:45.960 --> 00:09:47.840
- Exactly, exactly.


00:09:47.840 --> 00:09:48.800
- Yeah, awesome.


00:09:48.800 --> 00:09:51.000
But yeah, I've got some stuff to add to that as well


00:09:51.000 --> 00:09:52.920
for my next item, by the way.


00:09:52.920 --> 00:09:54.000
- Oh, cool. - Nice.


00:09:54.000 --> 00:09:54.840
- Yeah.


00:09:54.840 --> 00:09:56.880
- No, before we move on,


00:09:56.880 --> 00:09:59.640
one of the things in the survey that was interesting to me


00:09:59.640 --> 00:10:04.400
was the use of continuous integration.


00:10:04.400 --> 00:10:08.440
So I use CI or continuous integration all the time,


00:10:08.440 --> 00:10:10.720
but one of the, let me see if I can find it.


00:10:10.720 --> 00:10:13.100
CI.


00:10:13.100 --> 00:10:20.440
The CI systems in use, GitLab was top,


00:10:20.440 --> 00:10:22.460
which was interesting to me.


00:10:22.460 --> 00:10:26.580
I mean, I use GitLab at work, but I use GitHub.


00:10:26.580 --> 00:10:30.420
I use, I guess, GitLab CI, but I'm using GitHub Actions a lot.


00:10:30.420 --> 00:10:32.740
And I don't see GitHub Actions even here.


00:10:32.740 --> 00:10:37.060
So I wonder if it just wasn't listed or I'm not sure.


00:10:37.060 --> 00:10:38.060
That's quite interesting.


00:10:38.060 --> 00:10:40.660
Yeah, I have noticed that GitHub Actions is not there.


00:10:40.660 --> 00:10:44.580
Yeah, I expected to see it as well, yeah.


00:10:44.580 --> 00:10:47.540
But what I did not see, I just want to throw this out, like, well done on building the


00:10:47.540 --> 00:10:48.540
survey.


00:10:48.540 --> 00:10:50.620
Because what I didn't see is what platform are you on?


00:10:50.620 --> 00:10:55.020
do you use Python or do you use SQL or do you use Vue.js?


00:10:55.020 --> 00:10:58.140
Like they did a good job of comparing


00:10:58.140 --> 00:11:00.460
apples to apples in this one.


00:11:00.460 --> 00:11:01.900
And that was nice.


00:11:01.900 --> 00:11:02.900
- Yeah, absolutely.


00:11:02.900 --> 00:11:07.920
- Yeah, I guess, but like, I guess what you brought up


00:11:07.920 --> 00:11:12.780
before on the web frameworks though, the, like why,


00:11:12.780 --> 00:11:16.480
I mean, it depends on what you're using the web for.


00:11:16.480 --> 00:11:21.480
So like the early use of FastAPI was just APIs.


00:11:21.480 --> 00:11:25.560
So I don't know, that's not apples to apples.


00:11:25.560 --> 00:11:28.360
- Right, you may be doing Flask plus FastAPI.


00:11:28.360 --> 00:11:30.400
- Yeah. - Yeah, perhaps.


00:11:30.400 --> 00:11:32.320
- And the survey allows that.


00:11:32.320 --> 00:11:34.220
You can, if you add these numbers up,


00:11:34.220 --> 00:11:35.520
they are over a hundred.


00:11:35.520 --> 00:11:39.040
So I wanted to bring up one more thing.


00:11:39.040 --> 00:11:42.400
I guess unit testing is at 49% for pytest.


00:11:42.400 --> 00:11:44.400
So pytest is in the lead.


00:11:44.400 --> 00:11:47.280
- Yeah, I also saw there's a really interesting number two


00:11:47.280 --> 00:11:48.920
in that list there.


00:11:48.920 --> 00:11:52.220
- 28% of using unit test, yeah.


00:11:52.220 --> 00:11:53.400
- No, that's not the one I was thinking of.


00:11:53.400 --> 00:11:54.480
That's number three.


00:11:54.480 --> 00:11:55.620
- Oh, was it number three?


00:11:55.620 --> 00:11:57.020
- Number two is none. - What's number two?


00:11:57.020 --> 00:11:59.400
- Number two is, so, you know, in Python,


00:11:59.400 --> 00:12:02.160
like a lot of languages have null or nil,


00:12:02.160 --> 00:12:04.600
but apparently people just like do stuff


00:12:04.600 --> 00:12:08.040
with the none type to test here a lot, so.


00:12:08.040 --> 00:12:11.280
(all laughing)


00:12:11.280 --> 00:12:12.480
- None testing.


00:12:12.480 --> 00:12:14.520
- Yeah. - Oh yeah, that is number two.


00:12:14.520 --> 00:12:15.560
- Yeah, it's crushing it.


00:12:15.560 --> 00:12:16.400
Yeah, none is pretty, I mean,


00:12:16.400 --> 00:12:18.040
there do get a lot of exceptions


00:12:18.040 --> 00:12:21.080
and it's easy to like fail first and then, yeah, anyway.


00:12:21.080 --> 00:12:23.000
- So I got to talk to-- - None type has no attribute


00:12:23.000 --> 00:12:23.840
such and such.


00:12:23.840 --> 00:12:27.640
- I got to talk to the PSF and JetBrains about this


00:12:27.640 --> 00:12:29.480
because I'm not sure why they call it


00:12:29.480 --> 00:12:31.040
unit testing frameworks.


00:12:31.040 --> 00:12:33.680
We got to get, we got to drop the unit off there.


00:12:33.680 --> 00:12:35.320
Just call them testing frameworks.


00:12:35.320 --> 00:12:37.160
- Yeah, Brian, I hope you don't mind.


00:12:37.160 --> 00:12:38.360
I'm considering writing a book


00:12:38.360 --> 00:12:40.160
on this new none framework, by the way.


00:12:40.160 --> 00:12:41.200
I just--


00:12:42.080 --> 00:12:45.280
I think you should, that would be funny.


00:12:45.280 --> 00:12:50.040
- Actually, yeah, it's really short.


00:12:50.040 --> 00:12:51.340
It's really, really short.


00:12:51.340 --> 00:12:54.600
All right, it's probably one page book.


00:12:54.600 --> 00:12:56.960
Okay, all right, next item.


00:12:56.960 --> 00:12:57.800
I gotta keep moving along


00:12:57.800 --> 00:12:59.560
or we're gonna have a two hour show here.


00:12:59.560 --> 00:13:01.080
Is I like ninjas.


00:13:01.080 --> 00:13:02.800
Do you like ninjas guys?


00:13:02.800 --> 00:13:03.640
Ninjas are cool.


00:13:03.640 --> 00:13:06.180
- Oh yeah, well, I mean, I don't know any, but.


00:13:06.180 --> 00:13:08.400
- Well, I mean, if you are a ninja,


00:13:08.400 --> 00:13:09.360
you can't really speak about it


00:13:09.360 --> 00:13:11.720
because it's something about the secrecy.


00:13:11.720 --> 00:13:14.900
Anyway, Sebastian was just talking about how FastAPI


00:13:14.900 --> 00:13:18.100
was inspired by many of the frameworks that were on there.


00:13:18.100 --> 00:13:21.540
And there's a cool framework called Django Ninja,


00:13:21.540 --> 00:13:23.260
Fast Django REST framework.


00:13:23.260 --> 00:13:26.180
And I'm not a super expert in Django,


00:13:26.180 --> 00:13:28.540
but I think Django REST framework has been primarily


00:13:28.540 --> 00:13:30.940
the way to do APIs in Django these days


00:13:30.940 --> 00:13:31.800
and to layer that on.


00:13:31.800 --> 00:13:34.820
And if you look at the very bottom of this,


00:13:34.820 --> 00:13:35.860
there's a little bit here that says,


00:13:35.860 --> 00:13:38.660
this project was heavily inspired by FastAPI


00:13:38.660 --> 00:13:40.780
developed by some guy named Sebastian.


00:13:40.780 --> 00:13:41.860
So that's pretty cool.


00:13:41.860 --> 00:13:43.860
Have you checked this out, Sebastian?


00:13:43.860 --> 00:13:46.700
- I have seen it and actually the author


00:13:46.700 --> 00:13:48.940
was quite active in the FastAPI community.


00:13:48.940 --> 00:13:52.740
And like, yeah, like I haven't been able to play around


00:13:52.740 --> 00:13:54.500
with the framework itself.


00:13:54.500 --> 00:13:58.060
But yeah, like I think it could be a very nice idea


00:13:58.060 --> 00:13:59.660
and a very nice middle ground for people


00:13:59.660 --> 00:14:02.100
that is already having a lot of work,


00:14:02.100 --> 00:14:05.260
already a lot of code with Django Rest Framework.


00:14:05.260 --> 00:14:07.020
- Yeah, exactly, exactly.


00:14:07.020 --> 00:14:11.040
So this was sent over by Marcus Sharp and Adam Parkin,


00:14:11.040 --> 00:14:13.320
who goes by Codependent Coder independently.


00:14:13.320 --> 00:14:15.780
So thank you both for sending this in.


00:14:15.780 --> 00:14:20.220
And the idea is that it's a framework for building APIs


00:14:20.220 --> 00:14:24.360
primarily based on type hints, but also with async support.


00:14:24.360 --> 00:14:26.080
And it makes use of Pydantic.


00:14:26.080 --> 00:14:27.920
And those are many of the important ingredients


00:14:27.920 --> 00:14:29.880
that make FastAPI special as well.


00:14:29.880 --> 00:14:32.480
So some of the key features are,


00:14:32.480 --> 00:14:34.680
it's pretty easy to work with.


00:14:34.680 --> 00:14:38.200
It has a similar feel as FastAPI.


00:14:38.200 --> 00:14:40.860
It's high performance, partly because of Pydantic,


00:14:40.860 --> 00:14:43.320
partly because it has native async support,


00:14:43.320 --> 00:14:45.840
and partly just because they did a good job there.


00:14:45.840 --> 00:14:47.260
It's also fast to code.


00:14:47.260 --> 00:14:52.400
The type hints let you know what you're working with


00:14:52.400 --> 00:14:54.840
and automatically get conversions along with Pydantic,


00:14:54.840 --> 00:14:56.800
of course, does massive levels


00:14:56.800 --> 00:14:58.500
of like validation and conversion.


00:14:58.500 --> 00:15:03.400
And then it also has automatic docs with OpenAPI,


00:15:03.400 --> 00:15:06.900
formerly known as Swagger, similar to FastAPI in that regard.


00:15:06.900 --> 00:15:10.040
And the reason this is interesting, I think,


00:15:10.040 --> 00:15:12.040
is because it's Django-friendly.


00:15:12.040 --> 00:15:13.700
So it has integration with Django Core,


00:15:13.700 --> 00:15:15.300
it has integration with Django ORM.


00:15:15.300 --> 00:15:19.140
So if you already got all of your stuff done in Django,


00:15:19.140 --> 00:15:23.140
and you were thinking, well, I really want to have this style of API


00:15:23.140 --> 00:15:27.300
that FastAPI brings, but I don't want to leave Django,


00:15:27.300 --> 00:15:29.540
I don't want to have to rewrite everything in SQLAlchemy


00:15:29.540 --> 00:15:32.940
and learn the async API over there, that kind of stuff.


00:15:32.940 --> 00:15:35.820
Well, here's a way to kind of like layer on APIs


00:15:35.820 --> 00:15:39.640
to your Django app, but in the zen of what Sebastian's built.


00:15:39.640 --> 00:15:42.760
So yeah, I think it's pretty cool.


00:15:42.760 --> 00:15:47.520
And if you check out the performance here,


00:15:47.520 --> 00:15:51.100
you can see it's slightly faster


00:15:51.100 --> 00:15:52.860
in the single threaded version,


00:15:52.860 --> 00:15:54.620
but once you bust out async and await


00:15:54.620 --> 00:15:56.100
and it starts just crushing it.


00:15:56.100 --> 00:15:58.860
So here you can see like with 50 operations,


00:15:58.860 --> 00:15:59.980
50 workers and so on.


00:15:59.980 --> 00:16:00.820
And what's really interesting


00:16:00.820 --> 00:16:03.460
is you see like this graph at the bottom


00:16:03.460 --> 00:16:05.180
of as you add more workers,


00:16:05.180 --> 00:16:06.660
things like Django REST framework


00:16:06.660 --> 00:16:09.540
or Flask, Marshmallow start to catch up.


00:16:09.540 --> 00:16:11.820
And my theory, looking at this graph,


00:16:11.820 --> 00:16:13.900
my intuition is what this means is


00:16:13.900 --> 00:16:16.340
the thing that it's talking to in the backend,


00:16:16.340 --> 00:16:18.860
like the database that it was talking to


00:16:18.860 --> 00:16:21.820
or something like that is starting to


00:16:21.820 --> 00:16:24.260
like not be able to take it anymore.


00:16:24.260 --> 00:16:28.020
Or the overall CPU level is just starting to like


00:16:28.020 --> 00:16:31.100
to hit a limit where it can't scale.


00:16:31.100 --> 00:16:33.620
'Cause it's really interesting that it's kind of just like


00:16:33.620 --> 00:16:37.700
a linear number of things for flat for the Django Ninja.


00:16:37.700 --> 00:16:41.940
And as the scale increases, it kind of,


00:16:41.940 --> 00:16:43.720
I guess it's normalized on that, so it would be flat.


00:16:43.720 --> 00:16:46.500
But anyway, it's a pretty interesting graph, I think there.


00:16:46.500 --> 00:16:52.900
Yeah, and then last thing, just a super quick example of here


00:16:54.900 --> 00:16:59.220
is you gotta do is create a ninja, API ninja,


00:16:59.220 --> 00:17:02.300
and then you do an API.get, give it a URL.


00:17:02.300 --> 00:17:03.980
You give it some parameters.


00:17:03.980 --> 00:17:06.460
Those parameters have types like a colon int,


00:17:06.460 --> 00:17:09.180
b colon int, and then you return a dictionary,


00:17:09.180 --> 00:17:12.780
and off you go, and then you've got an API.


00:17:12.780 --> 00:17:16.620
And presumably you could make this async def add,


00:17:16.620 --> 00:17:18.700
although there's really no reason to do it.


00:17:18.700 --> 00:17:21.540
You could, right, 'cause it supports async anyway.


00:17:21.540 --> 00:17:23.300
Anyway, I think that's a pretty cool thing


00:17:23.300 --> 00:17:25.300
And then we have a lot of stuff that we can do.


00:17:25.300 --> 00:17:27.300
So we have a lot of things that we can do.


00:17:27.300 --> 00:17:30.300
So I think it's a great way to just kind of get to know the team.


00:17:30.300 --> 00:17:32.300
And I think that's a great way to get to know the team.


00:17:32.300 --> 00:17:34.300
And I think that's a great way to get to know the team.


00:17:34.300 --> 00:17:36.300
And I think that's a great way to get to know the team.


00:17:36.300 --> 00:17:38.300
And I think that's a great way to get to know the team.


00:17:38.300 --> 00:17:40.300
And I think that's a great way to get to know the team.


00:17:40.300 --> 00:17:42.300
And I think that's a great way to get to know the team.


00:17:42.300 --> 00:17:44.300
And I think that's a great way to get to know the team.


00:17:44.300 --> 00:17:46.300
And I think that's a great way to get to know the team.


00:17:46.300 --> 00:17:48.300
And I think that's a great way to get to know the team.


00:17:48.300 --> 00:17:50.300
And I think that's a great way to get to know the team.


00:17:50.300 --> 00:17:54.220
It was released one or two weeks ago.


00:17:54.220 --> 00:17:55.820
It's the latest version.


00:17:55.820 --> 00:17:57.540
And it has a bunch of interesting things.


00:17:57.540 --> 00:18:02.540
It has a hypothesis plugin for doing property-based testing,


00:18:02.540 --> 00:18:08.340
which I haven't been able to try out yet a lot.


00:18:08.340 --> 00:18:10.260
But I have heard a lot of good things


00:18:10.260 --> 00:18:13.940
about this idea of property-based testing.


00:18:13.940 --> 00:18:16.940
And in fact, there's a package for doing


00:18:16.940 --> 00:18:21.940
this type of testing, integrating hypothesis with OpenAPI.


00:18:21.940 --> 00:18:25.020
So you can test like it was made to test FastAPI actually


00:18:25.020 --> 00:18:26.080
with these ideas.


00:18:26.080 --> 00:18:30.660
But then now there's an integrated plugin in Pydantic.


00:18:30.660 --> 00:18:33.220
So I think that can be quite interesting.


00:18:33.220 --> 00:18:36.700
And also there's now support in Pydantic directly


00:18:36.700 --> 00:18:39.640
for named tuples and for typed dicts.


00:18:39.640 --> 00:18:44.640
So typed dicts are these new types or type declarations


00:18:44.660 --> 00:18:48.760
to say what is the shape of a dictionary inside of Python.


00:18:48.760 --> 00:18:50.460
If you have played with TypeScript,


00:18:50.460 --> 00:18:53.020
it will be comparable to an interface


00:18:53.020 --> 00:18:55.060
or I guess in other languages too.


00:18:55.060 --> 00:18:58.220
But then these type dicts,


00:18:58.220 --> 00:19:01.760
the thing is that they are the official


00:19:01.760 --> 00:19:03.820
or standard way inside of Python


00:19:03.820 --> 00:19:08.540
that are part of Python to define the types of dictionaries.


00:19:08.540 --> 00:19:10.700
Because Pydantic is actually a class.


00:19:10.700 --> 00:19:12.020
So this could be,


00:19:12.020 --> 00:19:15.420
I think these tactics will be interesting, for example,


00:19:15.420 --> 00:19:18.700
for declaring the parameters of a function that


00:19:18.700 --> 00:19:20.420
are actually a dictionary and declaring


00:19:20.420 --> 00:19:23.740
where the types that that dictionary should take,


00:19:23.740 --> 00:19:24.860
things like that.


00:19:24.860 --> 00:19:28.740
And I will expect editors to be able to have support for that.


00:19:28.740 --> 00:19:33.700
So imagine that you are passing a parameter to a dictionary--


00:19:33.700 --> 00:19:35.140
sorry, a parameter to a function.


00:19:35.140 --> 00:19:36.640
And the parameter is a dictionary.


00:19:36.640 --> 00:19:38.980
And then the editor can give you completion


00:19:38.980 --> 00:19:42.620
for the dictionary inside of the parameter


00:19:42.620 --> 00:19:43.820
that you're passing or the argument


00:19:43.820 --> 00:19:45.420
that you're passing to the function, things like that.


00:19:45.420 --> 00:19:47.780
I think typed it will help a lot.


00:19:47.780 --> 00:19:50.820
And then now you can use them inside of Pydantic models.


00:19:50.820 --> 00:19:52.100
And I think that's pretty cool.


00:19:52.100 --> 00:19:55.540
And this other one is the Pydantic has support


00:19:55.540 --> 00:19:59.660
for annotated types, which is another of these types.


00:19:59.660 --> 00:20:02.700
So annotated is one of these things


00:20:02.700 --> 00:20:05.580
that you import from typing the same way


00:20:05.580 --> 00:20:07.260
that you will import a optional


00:20:07.260 --> 00:20:09.440
or that you will import a union,


00:20:09.440 --> 00:20:12.340
or that you will import the type for lists.


00:20:12.340 --> 00:20:15.200
- This is cool, I was wondering how


00:20:15.200 --> 00:20:16.440
you would do stuff like this.


00:20:16.440 --> 00:20:18.960
If you could say, add a default value


00:20:18.960 --> 00:20:23.320
to a Pydantic model, or to add simple constraints.


00:20:23.320 --> 00:20:24.160
- Yeah, so the thing is that--


00:20:24.160 --> 00:20:25.720
- Along with default values.


00:20:25.720 --> 00:20:28.080
- With Pydantic and with FastAPI,


00:20:28.080 --> 00:20:29.440
you have a way to declare,


00:20:29.440 --> 00:20:31.040
like before annotated existed,


00:20:31.040 --> 00:20:33.400
you had a way to declare those things


00:20:33.400 --> 00:20:36.320
by setting the default value


00:20:36.320 --> 00:20:41.320
as a call to Pydantic's field, which is a special function.


00:20:41.320 --> 00:20:43.480
Or in FastAPI, you could call, for example,


00:20:43.480 --> 00:20:47.480
the function query, which is a special function


00:20:47.480 --> 00:20:50.080
that returns a special object that has all the information,


00:20:50.080 --> 00:20:52.120
including metadata for validation,


00:20:52.120 --> 00:20:54.440
and maybe like the title or the description


00:20:54.440 --> 00:20:56.880
of their specific parameter, things like that.


00:20:56.880 --> 00:20:59.880
But then the issue with that approach


00:20:59.880 --> 00:21:04.880
is that we are taking the place in the declaration


00:21:04.960 --> 00:21:06.600
of the parameter inside of the function,


00:21:06.600 --> 00:21:08.360
we are taking the place that will be used


00:21:08.360 --> 00:21:10.040
by the default value.


00:21:10.040 --> 00:21:14.440
And we are like playing around with that default value


00:21:14.440 --> 00:21:16.880
inside of the function signature,


00:21:16.880 --> 00:21:19.600
inside of the function declaration of parameters.


00:21:19.600 --> 00:21:23.600
So it's actually not like the most correct way to do it.


00:21:23.600 --> 00:21:26.520
It's kind of intuitive and it works quite well


00:21:26.520 --> 00:21:28.480
with identical FastAPI,


00:21:28.480 --> 00:21:32.640
but in terms of types, it's not very explicit.


00:21:32.640 --> 00:21:35.760
And now with these new annotated type,


00:21:35.760 --> 00:21:39.200
you can put the actual type that the parameter has,


00:21:39.200 --> 00:21:41.640
like let's say it's a string,


00:21:41.640 --> 00:21:45.160
and then you can also put the extra metadata


00:21:45.160 --> 00:21:47.760
that will go for Python or for FastAPI


00:21:47.760 --> 00:21:52.760
inside of the same annotated generic type is the name.


00:21:52.760 --> 00:21:55.480
So the same way that you will put,


00:21:55.480 --> 00:21:58.720
they say annotate a type that is additional,


00:21:58.720 --> 00:22:00.800
that has strings as keys,


00:22:00.800 --> 00:22:03.680
and then as values it has integers,


00:22:03.680 --> 00:22:06.360
then instead of that, you will put this annotated thing


00:22:06.360 --> 00:22:09.640
and declare the type of the parameter


00:22:09.640 --> 00:22:11.360
and this extra metadata that will include


00:22:11.360 --> 00:22:13.200
like validation and a bunch of things.


00:22:13.200 --> 00:22:15.120
And then the default value can be kept


00:22:15.120 --> 00:22:19.220
for the actual default value of the parameter.


00:22:19.220 --> 00:22:21.720
So that will be very useful,


00:22:21.720 --> 00:22:24.200
especially if you are calling the same functions,


00:22:24.200 --> 00:22:26.760
for example, for FastAPI dependencies,


00:22:26.760 --> 00:22:28.900
and you're calling the same functions in other places.


00:22:28.900 --> 00:22:31.420
And I think that can be very powerful


00:22:31.420 --> 00:22:35.860
and very useful for reusing code in even more places.


00:22:35.860 --> 00:22:37.960
- Yeah, when I first looked at this,


00:22:37.960 --> 00:22:40.380
I thought it was this annotated thing


00:22:40.380 --> 00:22:41.840
was the value you were setting,


00:22:41.840 --> 00:22:44.800
like SQLAlchemy would be, or Django ORM or something,


00:22:44.800 --> 00:22:48.340
where you say, like, name equals an annotated thing,


00:22:48.340 --> 00:22:49.900
but that's actually the type.


00:22:49.900 --> 00:22:52.740
It's name colon, this really interesting annotated thing


00:22:52.740 --> 00:22:54.340
with lots of constraints,


00:22:54.340 --> 00:22:56.140
equals some potential default value,


00:22:56.140 --> 00:22:57.260
or equals nothing, right?


00:22:57.260 --> 00:22:59.300
you just don't even have to set a value.


00:22:59.300 --> 00:23:01.640
- Yeah, yeah, I don't know,


00:23:01.640 --> 00:23:04.940
I feel the syntax might look a little bit weird.


00:23:04.940 --> 00:23:09.260
It's not necessarily like the most intuitive,


00:23:09.260 --> 00:23:12.100
but it's like the most correct at the same time.


00:23:12.100 --> 00:23:16.180
So in cases where like the strict type correctness


00:23:16.180 --> 00:23:19.880
is important, I think this could be quite useful.


00:23:19.880 --> 00:23:23.180
- Yeah, so another thing that I,


00:23:23.180 --> 00:23:24.780
this is not in the new release,


00:23:24.780 --> 00:23:26.700
but I'd like to hear your thoughts on it.


00:23:26.700 --> 00:23:27.900
- I, what is it called?


00:23:27.900 --> 00:23:28.980
Validation?


00:23:28.980 --> 00:23:29.980
Is that what it's?


00:23:29.980 --> 00:23:34.200
There's a type with like runtime validation.


00:23:34.200 --> 00:23:38.200
I think this thing here is you say at validate arguments.


00:23:38.200 --> 00:23:41.400
Have you seen this for actually going, you know,


00:23:41.400 --> 00:23:44.840
instead of just suggesting that it's a string


00:23:44.840 --> 00:23:46.720
and an integer, it will actually make sure


00:23:46.720 --> 00:23:49.040
that it's a string and an integer at runtime.


00:23:49.040 --> 00:23:49.880
Have you played with this?


00:23:49.880 --> 00:23:51.120
What are your thoughts?


00:23:51.120 --> 00:23:52.120
- I haven't played with it.


00:23:52.120 --> 00:23:54.680
Like I remember when Samuel Komol was talking about it


00:23:54.680 --> 00:23:56.160
and it was super exciting


00:23:56.160 --> 00:23:59.200
because it's also a very,


00:23:59.200 --> 00:24:03.060
it's the same idea of what FastAPI is doing


00:24:03.060 --> 00:24:04.800
or similarly what Typer,


00:24:04.800 --> 00:24:06.720
which is like the equivalent of FastAPI


00:24:06.720 --> 00:24:08.620
for building command line applications.


00:24:08.620 --> 00:24:10.320
The equivalent of what they do,


00:24:10.320 --> 00:24:13.240
which is take a signature in the parameters


00:24:13.240 --> 00:24:18.240
from the function and use those parameters to do validation.


00:24:18.240 --> 00:24:22.280
I think that's very interesting and very powerful.


00:24:22.280 --> 00:24:25.240
I just haven't used it yet because I use Pydantic


00:24:25.240 --> 00:24:27.380
most of the time with FastAPI,


00:24:27.380 --> 00:24:29.400
and in FastAPI there's no need


00:24:29.400 --> 00:24:31.440
to add the specific decorator


00:24:31.440 --> 00:24:33.940
because FastAPI is already doing that.


00:24:33.940 --> 00:24:38.040
But for other use cases where it's not really using FastAPI


00:24:38.040 --> 00:24:39.800
but just Pydantic standalone,


00:24:39.800 --> 00:24:41.880
because Pydantic is awesome by itself,


00:24:41.880 --> 00:24:45.280
I think this will be very, very powerful.


00:24:45.280 --> 00:24:46.680
- Yeah, yeah, totally agree.


00:24:46.680 --> 00:24:47.520
Okay, cool.


00:24:47.520 --> 00:24:51.280
Anything else you wanna add on this before we move on?


00:24:51.280 --> 00:24:52.480
I kick it back to Brian.


00:24:53.480 --> 00:24:57.640
- I think that was the highlight I had.


00:24:57.640 --> 00:24:58.480
Just I think this is--


00:24:58.480 --> 00:24:59.300
- Nice.


00:24:59.300 --> 00:25:01.800
- We rushed by this quickly, but I was curious,


00:25:01.800 --> 00:25:03.760
not about this, but you mentioned


00:25:03.760 --> 00:25:05.700
FastAPI does validation.


00:25:05.700 --> 00:25:09.660
Just, we went by that quickly, but is that true?


00:25:09.660 --> 00:25:13.720
Can you, for FastAPI, can I say that this data,


00:25:13.720 --> 00:25:16.400
or this data point that's coming in


00:25:16.400 --> 00:25:18.640
has to be in a certain range of integers


00:25:18.640 --> 00:25:20.580
or something like that?


00:25:20.580 --> 00:25:21.420
- Absolutely.


00:25:21.420 --> 00:25:25.100
All the validations that you can do with Pydantic,


00:25:25.100 --> 00:25:26.820
you can do them with FastAPI.


00:25:26.820 --> 00:25:31.260
It's actually quite extensive, the things that you can do.


00:25:31.260 --> 00:25:33.260
You can say that you want to validate


00:25:33.260 --> 00:25:35.460
against a regular expression, or that you


00:25:35.460 --> 00:25:38.380
want to have a minimum number and a maximum number,


00:25:38.380 --> 00:25:39.900
or that you want to have--


00:25:39.900 --> 00:25:40.460
I don't know.


00:25:40.460 --> 00:25:43.860
You could even write custom types of validations


00:25:43.860 --> 00:25:45.620
for the things that you receive.


00:25:45.620 --> 00:25:49.020
And because Pydantic is based on the same standard Python type


00:25:49.020 --> 00:25:52.620
annotations, you could do these validations even for deeply


00:25:52.620 --> 00:25:53.940
nested data structures.


00:25:53.940 --> 00:25:58.880
So you can say, my request of this endpoint


00:25:58.880 --> 00:26:02.160
is going to receive a list that contains dictionaries, that


00:26:02.160 --> 00:26:05.720
inside contain this key tag that contains strings,


00:26:05.720 --> 00:26:08.600
and this other one that has sub-dictionaries and sub-lists,


00:26:08.600 --> 00:26:13.740
and a very complex, deeply nested tree of data.


00:26:13.740 --> 00:26:16.420
And you can declare all that and have all that validated.


00:26:16.420 --> 00:26:16.980
So that--


00:26:16.980 --> 00:26:17.780
That's awesome.


00:26:17.780 --> 00:26:20.820
When your code executes, when the code that you wrote


00:26:20.820 --> 00:26:25.500
executes, it's FastAPI already took care of making sure


00:26:25.500 --> 00:26:29.020
that the data that you do there is the data that you receive.


00:26:29.020 --> 00:26:32.820
Your code will never execute with invalid data.


00:26:32.820 --> 00:26:34.460
That's it, that's it, yeah.


00:26:34.460 --> 00:26:35.720
- It's so nice in that regard.


00:26:35.720 --> 00:26:37.980
You just like, by the time it gets here,


00:26:37.980 --> 00:26:40.860
I know it's all been converted and validated


00:26:40.860 --> 00:26:43.380
at least as much as the model is gonna validate it for me.


00:26:43.380 --> 00:26:44.660
You don't have to worry about that.


00:26:44.660 --> 00:26:47.500
So it's great to push that to somewhere else.


00:26:47.500 --> 00:26:49.820
- Yeah, and on the other side,


00:26:49.820 --> 00:26:53.220
because which is also a great feature of Pydantic,


00:26:53.220 --> 00:26:56.060
the validation shows the errors


00:26:56.060 --> 00:26:58.620
exactly in the place where they are.


00:26:58.620 --> 00:27:00.220
And when you get that, it's like,


00:27:00.220 --> 00:27:03.780
yes, I can see exactly where is my data wrong.


00:27:03.780 --> 00:27:07.220
So you can see which index in the list was incorrect.


00:27:07.220 --> 00:27:09.900
And inside of that index, which key was incorrect.


00:27:09.900 --> 00:27:12.340
And inside of that, what was the exact error?


00:27:12.340 --> 00:27:14.780
And see like, oh, I had to put a string,


00:27:14.780 --> 00:27:17.380
not an object here, not a JSON object.


00:27:17.380 --> 00:27:22.580
And what you mean is, like, if I have a PyDandic model and it says it has a list of customers


00:27:22.580 --> 00:27:27.780
and there's three customers in the list, but the third customer that was submitted as part of the JSON body


00:27:27.780 --> 00:27:29.780
has an error, it'll say


00:27:29.780 --> 00:27:34.480
in the customers in index three on this field is the problem.


00:27:34.480 --> 00:27:37.480
Not just the name is required, like, oh great, what does this mean?


00:27:37.480 --> 00:27:40.480
- Right? - Exactly, I'll tell you.


00:27:40.480 --> 00:27:44.380
I don't know how you do to make these examples


00:27:44.380 --> 00:27:47.100
I will be able and understand that one at the same time.


00:27:47.100 --> 00:27:49.300
It's so difficult.


00:27:49.300 --> 00:27:51.580
That's such a skill.


00:27:51.580 --> 00:27:57.620
Yeah, we've been doing it for 223 episodes, I guess.


00:27:57.620 --> 00:27:59.220
All right, Brian?


00:27:59.220 --> 00:28:02.060
Yeah, so something else that's awesome is Datadog.


00:28:02.060 --> 00:28:06.420
So this episode of Python Bytes is brought to you by Datadog.


00:28:06.420 --> 00:28:10.220
Are you having trouble visualizing latency, CPU,


00:28:10.220 --> 00:28:11.700
and memory bottlenecks in your app


00:28:11.700 --> 00:28:13.860
and not sure where the issue is coming from


00:28:13.860 --> 00:28:19.380
how to solve it? Well, Datadog seamlessly correlates logs and traces at the level of


00:28:19.380 --> 00:28:24.580
individual requests, allowing you to quickly troubleshoot your Python application. Plus,


00:28:24.580 --> 00:28:29.220
their continuous profiler allows you to find the most resource-consuming parts in your production


00:28:29.220 --> 00:28:35.620
code all the time, at scale, at any scale, with minimal overhead. Be the hero that got the app


00:28:35.620 --> 00:28:40.820
back on track at your company. Get started today with a free trial at pythonbytes.fm/datadog,


00:28:42.340 --> 00:28:45.540
Or just click the link in your podcast player show notes.


00:28:45.540 --> 00:28:47.220
Yes, check out our show notes.


00:28:47.220 --> 00:28:49.140
And thank you, Datadog.


00:28:49.140 --> 00:28:50.020
Yeah, thanks, Datadog.


00:28:50.020 --> 00:28:52.420
And get a cool little Datadog t-shirt as well.


00:28:52.420 --> 00:28:57.140
Speaking of cool, let me talk about the next item here.


00:28:57.140 --> 00:28:59.380
I guess I'm next up on the list here.


00:28:59.380 --> 00:29:04.660
So this item comes to us partially from Will Shanks.


00:29:04.660 --> 00:29:06.180
He sent me the Python side.


00:29:06.180 --> 00:29:08.340
But I wanted to highlight this sort of broader thing,


00:29:08.340 --> 00:29:10.900
because I think it's pretty interesting.


00:29:10.900 --> 00:29:14.220
And the first part, well, let me just tell you the title of the article, the piece of


00:29:14.220 --> 00:29:20.060
news is Google and Microsoft back Python and Rust programming languages.


00:29:20.060 --> 00:29:25.980
And they both, I believe, do stuff with each, but it's primarily Google backs Python, Microsoft


00:29:25.980 --> 00:29:27.140
backs Rust.


00:29:27.140 --> 00:29:32.300
But the overall trend is part of the story that I think is interesting.


00:29:32.300 --> 00:29:39.600
So they both come along to make significant contributions to the various languages.


00:29:39.600 --> 00:29:46.980
And part of the trade-off I believe there is that they'll have some say or some ability


00:29:46.980 --> 00:29:50.900
to influence where the direction of these projects are going.


00:29:50.900 --> 00:29:58.300
Like hey, for example, Google donated $350,000 or it's not quite the right way to put it.


00:29:58.300 --> 00:29:59.300
That's what the article says.


00:29:59.300 --> 00:30:04.300
Google sponsored the PSF at the visionary sponsor level,


00:30:04.300 --> 00:30:08.840
which has a price tag of $350,000.


00:30:08.840 --> 00:30:10.640
And the goal is,


00:30:10.640 --> 00:30:13.100
this is the first company to do so by the way.


00:30:13.100 --> 00:30:18.020
And so they're investing in improved PyPI malware detection


00:30:18.020 --> 00:30:20.880
and better foundational tools and services


00:30:20.880 --> 00:30:23.740
like pip type of things and so on.


00:30:23.740 --> 00:30:26.580
And they're hiring a CPython developer


00:30:26.580 --> 00:30:28.380
in residence for 2021.


00:30:28.380 --> 00:30:30.320
I don't know if that position's still open


00:30:30.320 --> 00:30:32.060
or if there's applications, but anyway,


00:30:32.060 --> 00:30:33.560
I think that's pretty awesome.


00:30:33.560 --> 00:30:40.280
So yeah, I'm really happy for this.


00:30:40.280 --> 00:30:43.260
I do feel like there's a hundred other companies


00:30:43.260 --> 00:30:45.080
that should be doing the same thing.


00:30:45.080 --> 00:30:47.680
You know, Bank of America, hello.


00:30:47.680 --> 00:30:51.120
5,000 people working on a Python project there.


00:30:51.120 --> 00:30:53.800
5,000 Python developers, surely some of their well-being


00:30:53.800 --> 00:30:55.720
depends on the well-being of Python.


00:30:55.720 --> 00:30:57.400
And your banks and places like that


00:30:57.400 --> 00:31:01.320
have at least $300,000 to spend on IT per year,


00:31:01.320 --> 00:31:02.160
I'm pretty sure.


00:31:02.160 --> 00:31:05.440
- You know what I find funny about that?


00:31:05.440 --> 00:31:08.960
That, you know, these huge companies,


00:31:08.960 --> 00:31:10.120
these huge corporations,


00:31:10.120 --> 00:31:12.960
they are depending on Python and other stuff.


00:31:12.960 --> 00:31:16.840
And they, for example, they are for sure running Python


00:31:16.840 --> 00:31:20.120
in CI and deep install a bunch of things.


00:31:20.120 --> 00:31:22.320
And they are probably having some issues


00:31:22.320 --> 00:31:24.600
with the new resolver and deep install


00:31:24.600 --> 00:31:25.880
and taking a bunch of time


00:31:25.880 --> 00:31:29.380
and having a lot of time by their developers


00:31:29.380 --> 00:31:32.260
waiting for their resolver to handle things.


00:31:32.260 --> 00:31:36.340
And the resolver is having to download all the packages


00:31:36.340 --> 00:31:40.860
that match some range to be able to extract the metadata


00:31:40.860 --> 00:31:43.820
to be able to compute and to be able to do all the backtrack


00:31:43.820 --> 00:31:45.160
and all this stuff.


00:31:45.160 --> 00:31:50.160
And if the PSF was better funded,


00:31:50.160 --> 00:31:52.300
they already have the feature request


00:31:52.300 --> 00:31:53.580
and they already have the idea


00:31:53.580 --> 00:32:00.380
the objective to include the metadata of those packages in PyPI


00:32:00.380 --> 00:32:03.860
so that people could ask the API, "What are the versions?"


00:32:03.860 --> 00:32:05.860
instead of downloading all the packages.


00:32:05.860 --> 00:32:07.860
- Yeah. - So, it's like...


00:32:07.860 --> 00:32:12.260
It seems more efficient, like a 100-byte JSON document


00:32:12.260 --> 00:32:14.260
instead of megs of packages.


00:32:14.260 --> 00:32:16.260
Exactly, and it's just like, you know,


00:32:16.260 --> 00:32:19.460
it will probably just be like a little funding,


00:32:19.460 --> 00:32:23.260
just, I don't know, a couple of full-time developers


00:32:23.260 --> 00:32:28.260
working a lot more on that than a lot of volunteering.


00:32:28.260 --> 00:32:34.260
Yeah, I feel if it was better for them,


00:32:34.260 --> 00:32:38.580
that they will save a ton of money and time


00:32:38.580 --> 00:32:43.580
spent by their developers if the whole PSF was better.


00:32:43.580 --> 00:32:45.060
- Absolutely.


00:32:45.060 --> 00:32:47.460
I mean, that's just one small example, right?


00:32:47.460 --> 00:32:49.660
- Yeah. - Yeah, yeah.


00:32:49.660 --> 00:32:52.100
- Another one is maybe we want higher performance,


00:32:52.100 --> 00:32:57.660
Like the survey that Brian covered was one of the top requested features was better performance.


00:32:57.660 --> 00:33:06.140
Well, if we had, you know, 20 companies each donate a million dollars, I bet we could get a pretty awesome jet built or something like that.


00:33:06.140 --> 00:33:06.460
Right.


00:33:06.460 --> 00:33:11.180
I mean, there's, there's like clear links back to the wellbeing.


00:33:11.180 --> 00:33:16.540
So anyway, awesome Google and Microsoft as well for the rust side of things.


00:33:16.540 --> 00:33:17.580
Absolutely.


00:33:17.600 --> 00:33:24.280
But I think part of the story is that this is a story.


00:33:24.280 --> 00:33:26.120
Like that this is big news.


00:33:26.120 --> 00:33:26.760
It's awesome.


00:33:26.760 --> 00:33:29.880
But it should be like, oh, yeah, and the other 20,


00:33:29.880 --> 00:33:31.800
or the other 100 companies, right?


00:33:31.800 --> 00:33:32.320
Yeah.


00:33:32.320 --> 00:33:34.040
So the people that listen to--


00:33:34.040 --> 00:33:36.240
I mean, Microsoft and Google know


00:33:36.240 --> 00:33:39.720
that they use Python and Rust.


00:33:39.720 --> 00:33:41.560
But I think there's a lot of people


00:33:41.560 --> 00:33:44.280
listening to this podcast that know there's a need there.


00:33:44.280 --> 00:33:46.440
But they're just engineers.


00:33:46.440 --> 00:33:48.980
And there's the people at the top of the company


00:33:48.980 --> 00:33:51.740
really might not know how much their company depends


00:33:51.740 --> 00:33:53.660
on these languages.


00:33:53.660 --> 00:33:57.420
And so I actually, nice.


00:33:57.420 --> 00:33:59.460
I actually would like to,


00:33:59.460 --> 00:34:00.900
I'd like to have some sort of


00:34:00.900 --> 00:34:03.000
how to start that conversation document.


00:34:03.000 --> 00:34:05.660
Something like, if I'm at a company,


00:34:05.660 --> 00:34:09.420
how do I start that conversation with my leaders


00:34:09.420 --> 00:34:13.380
to say how, you know, how do I talk to that?


00:34:13.380 --> 00:34:15.220
To say, hey, we use Python a lot.


00:34:15.220 --> 00:34:17.320
Can we contribute to the PSF?


00:34:17.320 --> 00:34:23.040
- Yeah, I spoke to, I think it was Peter Yang about this.


00:34:23.040 --> 00:34:27.620
No, sorry, Peter Wang from Anaconda.


00:34:27.620 --> 00:34:31.820
He has such a good insight and ideas on this whole topic.


00:34:31.820 --> 00:34:38.220
One of the challenges is, I think it was him who said this,


00:34:38.220 --> 00:34:42.940
like they don't have, there's not a place on a,


00:34:42.940 --> 00:34:47.040
you know, a profits and loss accounting system for charity.


00:34:47.040 --> 00:34:50.180
There's a place for sponsorship


00:34:50.180 --> 00:34:51.460
where you get something back.


00:34:51.460 --> 00:34:52.880
There's a place for advertising.


00:34:52.880 --> 00:34:54.400
There's a place for IT,


00:34:54.400 --> 00:34:57.080
but just charity alone doesn't quite work.


00:34:57.080 --> 00:34:57.920
So I don't know.


00:34:57.920 --> 00:35:00.020
I think that's part of the story is like,


00:35:00.020 --> 00:35:01.580
you kind of got to fit into that world where like,


00:35:01.580 --> 00:35:04.660
well, we could support it.


00:35:04.660 --> 00:35:06.260
And in this sense that we've been talking about,


00:35:06.260 --> 00:35:07.260
yeah, you'll get something back,


00:35:07.260 --> 00:35:09.820
but we need a tangible, we get something back.


00:35:09.820 --> 00:35:10.660
I don't know what that is,


00:35:10.660 --> 00:35:13.360
but I think there's a little bit of a mismatch there.


00:35:13.360 --> 00:35:16.900
Anyway, just a couple of shout outs to some more.


00:35:16.900 --> 00:35:19.840
We got Salesforce, we got Fastly, Bloomberg,


00:35:19.840 --> 00:35:22.060
Azure, Microsoft, Capital One.


00:35:22.060 --> 00:35:23.460
You'll even find TalkByThon training


00:35:23.460 --> 00:35:25.500
down near the bottom of that list,


00:35:25.500 --> 00:35:27.060
sponsoring the PSF over there.


00:35:27.060 --> 00:35:27.900
So that's cool.


00:35:27.900 --> 00:35:30.860
But also just to round this out,


00:35:30.860 --> 00:35:34.860
Microsoft is doing interesting stuff with Rust


00:35:34.860 --> 00:35:37.700
around using it to basically replace


00:35:37.700 --> 00:35:40.460
where they're using C and low level stuff like that.


00:35:40.460 --> 00:35:45.240
So they've joined Mozilla, AWS, Huawei, and Google


00:35:45.240 --> 00:35:47.580
as founding members of the Rust Foundation as well.


00:35:47.580 --> 00:35:49.780
And I think they donated something.


00:35:49.780 --> 00:35:51.920
And I don't know the numbers there, what that means.


00:35:51.920 --> 00:35:54.580
But anyway, thanks Will Shanks for sending that over


00:35:54.580 --> 00:35:58.180
and thank you Google and Microsoft and other companies


00:35:58.180 --> 00:36:00.180
we gave a shout out to for supporting


00:36:00.180 --> 00:36:02.260
these projects and communities.


00:36:09.080 --> 00:36:12.000
- Semantic versions, let's talk about that.


00:36:12.000 --> 00:36:17.000
So, yeah, so I actually don't know


00:36:17.000 --> 00:36:20.400
if FastAPI is using Semver or Calver.


00:36:20.400 --> 00:36:23.160
Sebastian, what do you got?


00:36:23.160 --> 00:36:27.280
- I think FastAPI will match in what


00:36:27.280 --> 00:36:32.280
Henix describes as the YOLO zone in that article.


00:36:32.280 --> 00:36:36.100
- Okay, so what version are you on?


00:36:36.100 --> 00:36:37.680
- So it's 0.something.


00:36:37.680 --> 00:36:44.360
The thing is that I'm managing it as if it was like very strict same version where I'm


00:36:44.360 --> 00:36:53.240
handling the bumps in the versions, but it's all zero point something still.


00:36:53.240 --> 00:37:00.000
Because I want to add some features and do some, the freedom to do some changes to the


00:37:00.000 --> 00:37:02.840
API to have like the best design possible.


00:37:02.840 --> 00:37:08.200
because I want to release the one version after Ubicorn


00:37:08.200 --> 00:37:10.840
and install it as the one version.


00:37:10.840 --> 00:37:14.240
But yeah, I think it's what he describes as best.


00:37:14.240 --> 00:37:16.760
>> So yeah, so what we're talking about is an article


00:37:16.760 --> 00:37:21.840
from Hinnick saying semantic versioning will not save you.


00:37:21.840 --> 00:37:25.680
So the idea with semantic, with versions,


00:37:25.680 --> 00:37:29.320
is you've got like a three-digit number,


00:37:29.320 --> 00:37:34.240
and there's a major, minor, micro.


00:37:34.240 --> 00:37:39.240
And the idea is, as long as the major number doesn't change


00:37:39.240 --> 00:37:44.960
and you're using this package or this library or this tool,


00:37:44.960 --> 00:37:47.420
it's not gonna break you if it goes up.


00:37:47.420 --> 00:37:52.420
So if you go from 1.9 to 1.10, you can upgrade, it's fine,


00:37:52.420 --> 00:37:54.900
and nothing will break.


00:37:54.900 --> 00:37:58.120
But there's a whole bunch of problems with that.


00:37:58.960 --> 00:38:06.440
for one, that implication is just, it's not really true all the time.


00:38:06.440 --> 00:38:11.160
You don't really know, it's often there's no new features but there'll be something


00:38:11.160 --> 00:38:14.760
fixes, there'll be fixes and things and you might actually depend on the broken


00:38:14.760 --> 00:38:21.240
behaviors. So there's, in practice you can't really just upgrade willy-nilly. So


00:38:21.240 --> 00:38:25.040
in practice you have to be, like if you're depending on a package and it


00:38:25.040 --> 00:38:30.520
changes its version, you have to test and have good coverage


00:38:30.520 --> 00:38:32.560
for your own code to start with.


00:38:32.560 --> 00:38:34.000
And you should pin your dependencies


00:38:34.000 --> 00:38:37.720
so you don't just automatically update to the newest one.


00:38:37.720 --> 00:38:41.080
But you should also try to regularly keep updated


00:38:41.080 --> 00:38:43.240
to the new changes.


00:38:43.240 --> 00:38:46.880
And you have to do it in a try and a try basis.


00:38:46.880 --> 00:38:51.960
So you update the new version and then try it and run


00:38:51.960 --> 00:38:52.560
your tests.


00:38:52.560 --> 00:38:55.240
And if they pass, then repin the new versions.


00:38:55.240 --> 00:38:57.600
And if they don't pass, well, you've


00:38:57.600 --> 00:39:00.960
going to have to either pin below it


00:39:00.960 --> 00:39:04.360
or block that version or something.


00:39:04.360 --> 00:39:06.840
There are messy things that happen.


00:39:06.840 --> 00:39:07.340
Yeah.


00:39:07.340 --> 00:39:08.600
And it's getting more complicated


00:39:08.600 --> 00:39:09.600
with the new resolver.


00:39:09.600 --> 00:39:14.000
If you say, I must have Pydantic below some version,


00:39:14.000 --> 00:39:15.680
and then FastAPI comes along and says,


00:39:15.680 --> 00:39:17.720
I must have Pydantic above a higher version,


00:39:17.720 --> 00:39:20.680
well, whatever that other thing needed can't be used with FastAPI.


00:39:20.680 --> 00:39:23.300
there's these intervals that no longer intersect


00:39:23.300 --> 00:39:24.780
that can become challenging.


00:39:24.780 --> 00:39:27.380
>> Yes. Let's say you've got an application,


00:39:27.380 --> 00:39:28.420
you're in the application,


00:39:28.420 --> 00:39:30.940
you're the only user of it or other people are,


00:39:30.940 --> 00:39:33.060
but nobody's importing it.


00:39:33.060 --> 00:39:35.560
Then you can pin directly all of


00:39:35.560 --> 00:39:38.080
your dependencies and you can test it and it's great.


00:39:38.080 --> 00:39:43.340
But if you're a library and somebody is going to import you,


00:39:43.340 --> 00:39:46.800
you can't really just actually just pin everything


00:39:46.800 --> 00:39:52.800
because somebody might, like, let's say I'm pulling in requests.


00:39:52.800 --> 00:39:55.540
Somebody else might be pulling in me and requests.


00:39:55.540 --> 00:40:00.840
So, pinning it hardcore is, like you said,


00:40:00.840 --> 00:40:06.040
with the dependency manager or the dependency resolver,


00:40:06.040 --> 00:40:08.800
that will break, so you got to be a little bit broad


00:40:08.800 --> 00:40:10.680
so that these overlaps happen.


00:40:10.680 --> 00:40:16.120
But, okay, so the consequences of this just nightmare is mayhem,


00:40:16.120 --> 00:40:18.680
and version conflicts like we described.


00:40:18.680 --> 00:40:23.260
Let's say my package says I have to have requests something


00:40:23.260 --> 00:40:25.080
and somebody else X and somebody else says,


00:40:25.080 --> 00:40:28.080
oh, well, I need to request version Y in mine.


00:40:28.080 --> 00:40:31.240
And that's just going to be a mess.


00:40:31.240 --> 00:40:37.520
So, all these promises, the other subheading


00:40:37.520 --> 00:40:41.680
for the promises for SemVer is that if you're on zero


00:40:41.680 --> 00:40:44.520
at the beginning, you can change it all you want.


00:40:44.520 --> 00:40:46.760
So there's no promises on zero over.


00:40:46.760 --> 00:40:49.600
If it's zero dot something, all bets are off.


00:40:49.600 --> 00:40:51.240
You can change the API.


00:40:51.240 --> 00:40:53.440
You can completely break things.


00:40:53.440 --> 00:40:55.440
You can completely change the API.


00:40:55.440 --> 00:40:58.200
So nothing before worked.


00:40:58.200 --> 00:41:02.800
And in practice, that doesn't happen.


00:41:02.800 --> 00:41:08.360
But there are times where a lot of people


00:41:08.360 --> 00:41:10.040
are stuck in the zero over.


00:41:10.040 --> 00:41:15.320
But in reality, the first few releases really are up in the air.


00:41:15.320 --> 00:41:18.680
You're not sure what's going to work and what's going to not work.


00:41:18.680 --> 00:41:24.720
But after a while, Zerover just starts to be just there.


00:41:24.720 --> 00:41:28.840
And you really should have been at one because everybody's using it.


00:41:28.840 --> 00:41:30.640
But anyway, so--


00:41:30.640 --> 00:41:32.480
>>Yeah, and we covered that whole thing.


00:41:32.480 --> 00:41:34.400
I think it was Momoto Shami, I can't remember,


00:41:34.400 --> 00:41:35.800
about the whole Zerover thing.


00:41:35.800 --> 00:41:37.520
>>Yeah.


00:41:37.520 --> 00:41:39.340
calling places out.


00:41:39.340 --> 00:41:42.120
Anyway, yeah, I mean, it's fine to have it,


00:41:42.120 --> 00:41:44.420
but like some of these projects had been out for 15 years


00:41:44.420 --> 00:41:46.080
and they're still zero dot something, right?


00:41:46.080 --> 00:41:46.920
- Yeah.


00:41:46.920 --> 00:41:49.880
React was used by everyone


00:41:49.880 --> 00:41:52.680
before they released the first one beta.


00:41:52.680 --> 00:41:55.800
- Exactly, exactly.


00:41:55.800 --> 00:41:57.320
Interesting, yeah.


00:41:57.320 --> 00:42:02.320
- You know, it's quite fun that,


00:42:02.320 --> 00:42:03.680
I don't know, some months ago,


00:42:03.680 --> 00:42:08.680
I updated a little piece in FastAPI of some corner case


00:42:08.680 --> 00:42:14.720
that I had for some specific workaround for SQLAlchemy


00:42:14.720 --> 00:42:18.080
that didn't import SQLAlchemy but excluded so much,


00:42:18.080 --> 00:42:20.440
we have some little thing over there.


00:42:20.440 --> 00:42:24.240
And it was like deprecated, not used in the latest versions


00:42:24.240 --> 00:42:26.240
and not anything and I just removed it


00:42:26.240 --> 00:42:30.720
because it was there for a long time and hell break loose.


00:42:30.720 --> 00:42:35.720
I have an issue that had like, I don't know,


00:42:35.720 --> 00:42:38.480
tens of thumbs up.


00:42:38.480 --> 00:42:42.240
I tracked the issue connected to the repository


00:42:42.240 --> 00:42:47.240
at Netflix that was using FastAPI for the, yeah.


00:42:47.240 --> 00:42:49.520
Anyway, I had to release something quickly


00:42:49.520 --> 00:42:53.800
to get the book back because people were already


00:42:53.800 --> 00:42:55.200
depending on that.


00:42:55.200 --> 00:42:56.040
And it's like, yeah.


00:42:56.040 --> 00:42:59.240
- You have this problem that you have so many consumers


00:42:59.240 --> 00:43:03.760
of, I mean, 12% of all web frameworks


00:43:03.760 --> 00:43:05.080
are FastAPI at the moment.


00:43:05.080 --> 00:43:07.300
That's a lot of people using your library,


00:43:07.300 --> 00:43:08.920
touching the corners.


00:43:08.920 --> 00:43:10.640
- Yeah, absolutely.


00:43:10.640 --> 00:43:11.480
- Yeah.


00:43:11.480 --> 00:43:13.520
- So the last thing I wanted to touch on with this is


00:43:13.520 --> 00:43:17.220
I do like Hennig's instructions


00:43:17.220 --> 00:43:19.880
on what you should do about this, of testing.


00:43:19.880 --> 00:43:22.840
But one of the things that we didn't bring up yet so far is


00:43:22.840 --> 00:43:27.420
if you test something against a update and it doesn't work,


00:43:27.420 --> 00:43:30.080
it might not be an intentional break in the API


00:43:30.080 --> 00:43:31.880
or the behavior.


00:43:31.880 --> 00:43:34.400
Look into it and maybe notify the maintainers


00:43:34.400 --> 00:43:38.760
that you are depending on some behavior that it broke.


00:43:38.760 --> 00:43:40.520
- Almost all the stuff is on GitHub


00:43:40.520 --> 00:43:44.360
and you can file an issue potentially or something like that.


00:43:44.360 --> 00:43:45.680
- And don't just get mad.


00:43:45.680 --> 00:43:47.480
People didn't break you on purpose.


00:43:47.480 --> 00:43:49.320
So be nice.


00:43:49.320 --> 00:43:53.280
- At least start out with a generosity in your thoughts.


00:43:53.280 --> 00:43:55.080
So there's a whole bunch of comments in the live stream.


00:43:55.080 --> 00:43:55.920
Thank you.


00:43:55.920 --> 00:43:58.280
I like circle back on a few things.


00:43:58.280 --> 00:44:01.640
One, Magnus asks, how do you say or talk about,


00:44:01.640 --> 00:44:04.160
you know, verbally the square brackets in Pydentic


00:44:04.160 --> 00:44:07.920
or even typing just iterable, square bracket, int bracket.


00:44:07.920 --> 00:44:09.960
I've always said interval of int,


00:44:09.960 --> 00:44:12.760
just like you would use for generics or templates


00:44:12.760 --> 00:44:14.440
in C++ like iterable of int.


00:44:14.440 --> 00:44:16.200
I don't know, what do you guys say?


00:44:16.200 --> 00:44:19.000
- I have no idea.


00:44:19.000 --> 00:44:23.200
I would ask Ivan Levinsky or maybe Luca Lange


00:44:23.200 --> 00:44:25.040
I could say like, what is the actual term?


00:44:25.040 --> 00:44:26.640
I think it's one of those down there


00:44:26.640 --> 00:44:28.240
that doesn't have a name yet.


00:44:28.240 --> 00:44:30.080
- Yeah, yeah, yeah.


00:44:30.080 --> 00:44:35.080
And then Dean has an interesting comment on versioning.


00:44:35.080 --> 00:44:37.440
Brian.


00:44:37.440 --> 00:44:40.920
Talking about versioning.


00:44:40.920 --> 00:44:42.200
Why is Brian not updating his Chrome?


00:44:42.200 --> 00:44:44.320
There's a big update button right there.


00:44:44.320 --> 00:44:46.880
And then this one for you, Sebastian.


00:44:46.880 --> 00:44:49.040
Although I believe we touched on this, RJL,


00:44:49.040 --> 00:44:50.120
a little bit ago.


00:44:50.120 --> 00:44:53.360
Any chance to ask a FastAPI question?


00:44:53.360 --> 00:44:55.440
Will it ever become a web server like Django


00:44:55.440 --> 00:44:57.000
or Flask more than API engine?


00:44:57.000 --> 00:44:59.440
Yeah, absolutely.


00:44:59.440 --> 00:45:03.240
- So the FastAPI, you can use,


00:45:03.240 --> 00:45:05.120
you can do everything that you can do


00:45:05.120 --> 00:45:07.520
with Flask or Django with FastAPI.


00:45:07.520 --> 00:45:10.920
You can render Jinja templates in the backend if you want.


00:45:10.920 --> 00:45:14.920
FastAPI will not include an ORM by default


00:45:14.920 --> 00:45:19.200
because that will compromise on tying it to a database


00:45:19.200 --> 00:45:20.680
and to a type of database.


00:45:20.680 --> 00:45:22.300
- Well, Flask doesn't as well, right?


00:45:22.300 --> 00:45:24.900
like Flask says, go pick Mongo.


00:45:24.900 --> 00:45:25.740
- You're right, you're right.


00:45:25.740 --> 00:45:27.580
- Go pick SQLAlchemy, something like that.


00:45:27.580 --> 00:45:28.540
- You're right.


00:45:28.540 --> 00:45:31.660
Actually, I don't know, comparing to Flask,


00:45:31.660 --> 00:45:34.740
Fastidia will be pretty much comparable.


00:45:34.740 --> 00:45:36.580
- I think it's super comparable.


00:45:36.580 --> 00:45:39.060
And you know, I also, I created the decorators


00:45:39.060 --> 00:45:41.780
that you can put on the templates to,


00:45:41.780 --> 00:45:45.060
on the points to have like a chameleon template


00:45:45.060 --> 00:45:48.940
or a flat, I'm sorry, Jinja2 template.


00:45:48.940 --> 00:45:50.820
And then, yeah, I'm actually working on a course.


00:45:50.820 --> 00:45:51.660
I haven't told you, Sebastian,


00:45:51.660 --> 00:45:55.300
course I'm gonna release is building proper web apps


00:45:55.300 --> 00:45:59.220
with FastAPI plus APIs, like sort of factoring that stuff in


00:45:59.220 --> 00:46:01.540
and like doing forums and stuff like that.


00:46:01.540 --> 00:46:02.780
- Nice, that's very cool.


00:46:02.780 --> 00:46:03.880
- Yeah, that'd be fun.


00:46:03.880 --> 00:46:07.260
Yeah, all right, so cool.


00:46:07.260 --> 00:46:09.860
RJL likes the ORM news.


00:46:09.860 --> 00:46:11.060
Yeah, you can pick that.


00:46:11.060 --> 00:46:14.780
And then also, Sebastian, you had such a good tweet


00:46:14.780 --> 00:46:18.420
a while ago and Robert Robinson wants to just touch on that.


00:46:18.420 --> 00:46:20.260
When will it be possible to have four years of experience


00:46:20.260 --> 00:46:23.780
with FastAPIs as companies are still yearning for it.


00:46:23.780 --> 00:46:25.280
Tell people about your tweet.


00:46:25.280 --> 00:46:26.620
(laughing)


00:46:26.620 --> 00:46:30.060
- It's well, I tweeted something for those


00:46:30.060 --> 00:46:31.820
that maybe probably didn't see it.


00:46:31.820 --> 00:46:34.540
I tweeted something half a year ago.


00:46:34.540 --> 00:46:39.140
It was saying, I saw a job post requiring four close years


00:46:39.140 --> 00:46:40.620
of experience of FastAPI.


00:46:40.620 --> 00:46:43.500
I couldn't apply because I only have 1.5 years


00:46:43.500 --> 00:46:45.740
of experience since I created the thing.


00:46:45.740 --> 00:46:49.580
So maybe it's time to reevaluate the experience


00:46:49.580 --> 00:46:52.620
is equal to skill set.


00:46:52.620 --> 00:46:55.980
But a bunch of people seem to have liked it,


00:46:55.980 --> 00:46:58.700
because they tweeted it like crazy.


00:46:58.700 --> 00:47:02.180
My Twitter app broke.


00:47:02.180 --> 00:47:04.340
And now recently, I don't know why


00:47:04.340 --> 00:47:07.940
they started with tweeting it again and sharing screenshots


00:47:07.940 --> 00:47:11.340
of it on LinkedIn and tagging me.


00:47:11.340 --> 00:47:14.340
And by this point, I have two years of experience


00:47:14.340 --> 00:47:15.620
with FastAPI.


00:47:15.620 --> 00:47:18.540
So that is no longer true.


00:47:18.540 --> 00:47:22.980
So now it'll be like 20, what, 2023.


00:47:22.980 --> 00:47:24.660
- 2023, these things will be legit.


00:47:24.660 --> 00:47:25.780
Then you could apply for that job.


00:47:25.780 --> 00:47:26.620
That'd be fantastic.


00:47:26.620 --> 00:47:28.620
- Yeah, I will get a job there.


00:47:28.620 --> 00:47:29.700
Hey.


00:47:29.700 --> 00:47:32.060
- All right, we are getting a little long in the show.


00:47:32.060 --> 00:47:33.880
So maybe our next two items should be kind of short,


00:47:33.880 --> 00:47:35.740
but Sebastian, next one's yours.


00:47:35.740 --> 00:47:37.340
- Yeah, this will be short.


00:47:37.340 --> 00:47:41.980
OpenAPI 3.1.0 was released recently.


00:47:41.980 --> 00:47:43.860
FastAPI is based on OpenAPI,


00:47:43.860 --> 00:47:46.220
so it's important for FastAPI


00:47:46.220 --> 00:47:48.780
and for whoever you see in particular.


00:47:48.780 --> 00:47:51.940
OpenAPI 3.1.0 doesn't change much.


00:47:51.940 --> 00:47:55.300
It adds more compatibility underneath.


00:47:55.300 --> 00:47:59.260
So now it's based on the latest version of a JSON schema,


00:47:59.260 --> 00:48:02.300
which means that if you do things like, for example,


00:48:02.300 --> 00:48:05.700
automatic react components based on JSON schema,


00:48:05.700 --> 00:48:09.220
now they will be able to share the same schema as OpenAPI.


00:48:09.220 --> 00:48:13.580
The previous OpenAPI was based on a very old version


00:48:13.580 --> 00:48:15.340
of JSON schema and the new one is based


00:48:15.340 --> 00:48:17.700
on the latest version, so we will have like


00:48:17.700 --> 00:48:19.500
all the compatibility all around the place


00:48:19.500 --> 00:48:22.480
in all the different tools.


00:48:22.480 --> 00:48:24.500
So that's great.


00:48:24.500 --> 00:48:26.980
And it will allow like a lot of interoperability


00:48:26.980 --> 00:48:29.760
and integration with other tools.


00:48:29.760 --> 00:48:31.820
- Yeah.


00:48:31.820 --> 00:48:33.340
Yeah, for people who don't know,


00:48:33.340 --> 00:48:37.900
if you run a FastAPI site and you go to /docs,


00:48:37.900 --> 00:48:40.100
it'll generate a whole form that gives you information


00:48:40.100 --> 00:48:42.140
about the Pydantic models that are exchanged,


00:48:42.140 --> 00:48:43.220
the validation that happens,


00:48:43.220 --> 00:48:44.820
even lets you try it out, right?


00:48:44.820 --> 00:48:47.820
- Yeah, and-- - That's related to this, yeah.


00:48:47.820 --> 00:48:52.820
Yeah, and OpenAPI is an open standard that is held by the Linux Foundation


00:48:52.820 --> 00:48:55.820
and it uses JSON Schema, which is another open standard,


00:48:55.820 --> 00:49:00.820
which is an in-progress RFC, an internet standard.


00:49:00.820 --> 00:49:03.820
And OpenAPI also uses OAuth2, which is another standard,


00:49:03.820 --> 00:49:05.820
so it's all based on standards.


00:49:05.820 --> 00:49:09.820
When you build an application with FastAPI, it's all based on standards


00:49:09.820 --> 00:49:12.820
and you get an application built on standards.


00:49:12.820 --> 00:49:16.180
Having this compatibility between these different standards


00:49:16.180 --> 00:49:20.460
and having all them synchronized now will improve a lot


00:49:20.460 --> 00:49:23.740
on all that interaction between those different things.


00:49:23.740 --> 00:49:25.740
Yeah, that's really cool.


00:49:25.740 --> 00:49:28.940
Awesome, very nice.


00:49:28.940 --> 00:49:32.820
So, Brian, that's our items, right? Anything you want to throw out there?


00:49:32.820 --> 00:49:37.260
I am wearing this lovely NOAA shirt


00:49:37.260 --> 00:49:42.100
from National Oceanic and Atmospheric Administration.


00:49:42.100 --> 00:49:47.100
Thanks to Matthew Kasari and Noah for the great shirt.


00:49:47.100 --> 00:49:49.460
They sent it as a thank you for speaking to them


00:49:49.460 --> 00:49:51.460
a couple of weeks ago, and that's really cool.


00:49:51.460 --> 00:49:53.260
They also sent a couple of shirts for my daughters,


00:49:53.260 --> 00:49:55.100
and that was nice, so cool, thanks.


00:49:55.100 --> 00:49:56.580
- Yeah, fantastic.


00:49:56.580 --> 00:49:57.880
That's really cool.


00:49:57.880 --> 00:50:00.300
I'm sure there's neat Python stuff there.


00:50:00.300 --> 00:50:03.700
- Yeah, so anybody want me to speak at their company


00:50:03.700 --> 00:50:07.100
and send me a shirt, I'll wear it online.


00:50:07.100 --> 00:50:08.380
(laughing)


00:50:08.380 --> 00:50:09.220
- Fantastic.


00:50:09.220 --> 00:50:10.900
Sebastian, we always throw out just little extra items


00:50:10.900 --> 00:50:13.980
if you got anything extra you wanna let people know about,


00:50:13.980 --> 00:50:15.380
anything you wanna share?


00:50:15.380 --> 00:50:17.660
- I just got curious recently about item,


00:50:17.660 --> 00:50:20.500
which is a kind of react in Python,


00:50:20.500 --> 00:50:22.940
and you can use it through Jupyter.


00:50:22.940 --> 00:50:25.340
That's, it seems quite interesting.


00:50:25.340 --> 00:50:27.340
I haven't played much with it.


00:50:27.340 --> 00:50:30.620
I know I just checked the first day that it works.


00:50:30.620 --> 00:50:32.940
It's a bit mind bending,


00:50:32.940 --> 00:50:35.740
but it's quite an interesting experiment.


00:50:35.740 --> 00:50:36.580
- Yeah, awesome.


00:50:36.580 --> 00:50:37.400
Okay, very cool.


00:50:37.400 --> 00:50:38.240
People should check that out.


00:50:38.240 --> 00:50:40.180
And Brian, it's true.


00:50:40.180 --> 00:50:42.780
Everyone has a price, everyone has a price.


00:50:42.780 --> 00:50:44.660
Some people it's just a t-shirt, it's awesome.


00:50:44.660 --> 00:50:46.940
All right, I got four things I want to throw out there


00:50:46.940 --> 00:50:49.680
and then joke, I'll make these all super, super quick.


00:50:49.680 --> 00:50:53.180
So, first of all, I wrote, I've been,


00:50:53.180 --> 00:50:54.500
with all of my courses, it's always like,


00:50:54.500 --> 00:50:55.340
oh, do you need Python?


00:50:55.340 --> 00:50:56.360
Do you have the right version of Python?


00:50:56.360 --> 00:50:57.740
Are you on Windows?


00:50:57.740 --> 00:51:00.180
Oh, then here's what you're gonna need to do to get,


00:51:00.180 --> 00:51:01.020
here's how you check it.


00:51:01.020 --> 00:51:02.660
You don't type Python three, that will never work.


00:51:02.660 --> 00:51:03.500
You type Python.


00:51:03.500 --> 00:51:05.300
Unless you are on a certain version of Windows 10,


00:51:05.300 --> 00:51:06.860
then it'll report that it's not there.


00:51:06.860 --> 00:51:09.140
Like, there's just like, oh my God, what is happening?


00:51:09.140 --> 00:51:10.220
I just couldn't take it anymore.


00:51:10.220 --> 00:51:12.220
So I finally broke down and wrote a,


00:51:12.220 --> 00:51:14.620
I don't have Python, I need Python.


00:51:14.620 --> 00:51:15.460
What do I do?


00:51:15.460 --> 00:51:16.280
Oh, I'm on macOS.


00:51:16.280 --> 00:51:18.820
Okay, so then here's how you find out if you have Python


00:51:18.820 --> 00:51:19.640
and is a good version.


00:51:19.640 --> 00:51:22.500
If not, here's three or four options for each OS,


00:51:22.500 --> 00:51:24.540
the benefits, the pros and the cons


00:51:24.540 --> 00:51:26.580
of potentially say using Homebrew


00:51:26.580 --> 00:51:29.060
and then how you install if you wanna go down that path.


00:51:29.060 --> 00:51:31.460
And so anyway, I'll put a link into the show notes


00:51:31.460 --> 00:51:33.100
so people care about that.


00:51:33.100 --> 00:51:34.900
- Nice, thanks for doing that.


00:51:34.900 --> 00:51:36.980
- Yeah, yeah, you're absolutely welcome.


00:51:36.980 --> 00:51:40.780
Last time I was so excited, still am excited, about Bodo3 type notations.


00:51:40.780 --> 00:51:44.300
But someone pointed out that this, you noticed the last updated two years ago,


00:51:44.300 --> 00:51:46.300
there's a deprecated, oh, there's a fork over here.


00:51:46.300 --> 00:51:48.300
And if you go to that, it goes, you go down like,


00:51:48.300 --> 00:51:50.900
oh, no, no, no, this is deprecated, it's over here.


00:51:50.900 --> 00:51:53.940
Eventually, you end up with this mypy Bodo3 builder


00:51:53.940 --> 00:51:58.100
that uses mypy to dynamically generate the type stubs


00:51:58.100 --> 00:52:02.180
that are compatible with VS Code and PyCharm and so on


00:52:02.180 --> 00:52:04.180
for the Bodo library.


00:52:04.180 --> 00:52:06.460
So if you're really super interested


00:52:06.460 --> 00:52:07.820
in that thing I covered last time,


00:52:07.820 --> 00:52:10.540
check this out, follow the GitHub thing.


00:52:10.540 --> 00:52:12.620
- But use it fast before it's deprecated.


00:52:12.620 --> 00:52:14.580
- Yes, exactly, exactly.


00:52:14.580 --> 00:52:16.740
And that comes from Dean Langsom,


00:52:16.740 --> 00:52:17.820
who is also on the livestream.


00:52:17.820 --> 00:52:18.860
So thank you for that, Dean.


00:52:18.860 --> 00:52:19.700
That's awesome.


00:52:19.700 --> 00:52:21.980
We had Brett Cannon on the show.


00:52:21.980 --> 00:52:23.780
Was that last time or time before?


00:52:23.780 --> 00:52:25.860
That was the last time, right?


00:52:25.860 --> 00:52:28.140
Very, very recently, we had Brett Cannon come talk


00:52:28.140 --> 00:52:31.420
about various things, including the pattern matching stuff.


00:52:31.420 --> 00:52:33.340
He also talked about Python Launcher,


00:52:33.340 --> 00:52:37.480
and we threw out like, hey, if I'm in a sub directory


00:52:37.480 --> 00:52:38.980
of some project and somewhere up


00:52:38.980 --> 00:52:41.200
there's a virtual environment and I just try to run it,


00:52:41.200 --> 00:52:43.440
it should automatically find the whole project


00:52:43.440 --> 00:52:45.680
sort of ambient virtual environment.


00:52:45.680 --> 00:52:47.680
So he apparently added that for us.


00:52:47.680 --> 00:52:49.040
- Yeah, I just tried it this morning.


00:52:49.040 --> 00:52:49.880
It's awesome.


00:52:49.880 --> 00:52:50.800
- Yeah, fantastic.


00:52:50.800 --> 00:52:51.640
- Nice.


00:52:51.640 --> 00:52:54.080
- Then last thing, I'm thinking of doing


00:52:54.080 --> 00:52:56.400
an Ask Me Anything Talk Python episode


00:52:56.400 --> 00:52:59.160
where I get some people in the audience to interview me


00:52:59.160 --> 00:53:01.920
and ask the questions of the audience just about the show.


00:53:01.920 --> 00:53:03.160
So I'll put a link in the show notes.


00:53:03.160 --> 00:53:05.880
If you have a question you would like to ask on Talk Python


00:53:05.880 --> 00:53:08.440
and make it part of the Ask Me Anything, we'll do that.


00:53:08.440 --> 00:53:10.760
And we'll live stream it on YouTube as well.


00:53:10.760 --> 00:53:12.760
All right, so that's all my extra items.


00:53:12.760 --> 00:53:15.240
- We need a joke.


00:53:15.240 --> 00:53:16.400
- We need a joke, all right.


00:53:16.400 --> 00:53:19.000
Well, last time I really enjoyed this one.


00:53:19.000 --> 00:53:22.960
So I thought the funny code comments.


00:53:22.960 --> 00:53:24.800
So I thought we might come back to this.


00:53:24.800 --> 00:53:29.480
So I think I'll kick it off, I guess,


00:53:29.480 --> 00:53:31.600
and then Brian, you're next, and then Sebastian,


00:53:31.600 --> 00:53:33.040
you can pick up the third one.


00:53:33.040 --> 00:53:34.360
How's that sound?


00:53:34.360 --> 00:53:35.640
- Sure.


00:53:35.640 --> 00:53:36.920
- Awesome, all right.


00:53:36.920 --> 00:53:39.560
So here's a comment that kind of misunderstands


00:53:39.560 --> 00:53:42.360
exception handling constructs.


00:53:42.360 --> 00:53:46.960
So try finally comment in the finally block,


00:53:46.960 --> 00:53:48.020
should never happen.


00:53:48.020 --> 00:53:52.840
Surely try exception never happen.


00:53:52.840 --> 00:53:56.120
No, no, no, try finally, that probably almost always happens.


00:53:56.120 --> 00:53:59.000
- Yeah.


00:53:59.000 --> 00:53:59.840
- It's a good one, right?


00:53:59.840 --> 00:54:01.040
All right, Brian, you're up next.


00:54:01.040 --> 00:54:01.960
- Oh, okay.


00:54:01.960 --> 00:54:04.440
So comment that says,


00:54:04.440 --> 00:54:06.600
looks like C code cause of the comment style,


00:54:06.600 --> 00:54:09.400
but you may think, you know,


00:54:09.400 --> 00:54:12.160
what's the following code does, but you don't trust me.


00:54:12.160 --> 00:54:15.200
Fiddle with it and you'll spend many a sleepless night


00:54:15.200 --> 00:54:18.080
cursing the moment you thought you'd be clever enough


00:54:18.080 --> 00:54:20.000
to optimize the code below.


00:54:20.000 --> 00:54:22.920
Now close this file and go play with something else.


00:54:22.920 --> 00:54:25.200
(laughing)


00:54:25.200 --> 00:54:27.480
- All right, Sebastian, the next one's yours.


00:54:27.480 --> 00:54:31.560
So there's this declaration of a constant integer


00:54:31.560 --> 00:54:35.600
with a name of capitals T-E-N, so 10,


00:54:35.600 --> 00:54:37.760
and the value is the number 10.


00:54:37.760 --> 00:54:38.880
And the comment says,


00:54:38.880 --> 00:54:41.240
as if the value of 10 will float to eight.


00:54:41.240 --> 00:54:43.280
(both laughing)


00:54:43.280 --> 00:54:45.300
- You know, you don't want magic numbers in your code,


00:54:45.300 --> 00:54:49.140
like blue might be better than some hexadecimal number,


00:54:49.140 --> 00:54:51.960
or like max limit might be 10.


00:54:51.960 --> 00:54:54.480
But just the word 10, there's no reason for that.


00:54:54.480 --> 00:54:55.640
That's awesome.


00:54:55.640 --> 00:54:57.520
All right, I'll do the next one here.


00:54:57.520 --> 00:55:00.860
I am not responsible for this code.


00:55:00.860 --> 00:55:02.800
They made me write it against my will.


00:55:02.800 --> 00:55:05.380
(all laughing)


00:55:05.380 --> 00:55:10.100
- I like the last, this is the next one.


00:55:10.100 --> 00:55:14.180
So if this code works, it was written by Paul.


00:55:14.180 --> 00:55:16.300
If not, we don't know who wrote it.


00:55:16.300 --> 00:55:18.880
(all laughing)


00:55:18.880 --> 00:55:23.780
- And then the last one says,


00:55:23.780 --> 00:55:27.420
Option, so is the declaration of options.batch_size


00:55:27.420 --> 00:55:29.420
is equal to 300.


00:55:29.420 --> 00:55:31.460
And then the comment says, "Madness?"


00:55:31.460 --> 00:55:34.300
And then screams, "This is Sparta!"


00:55:34.300 --> 00:55:35.900
- This is Sparta!


00:55:35.900 --> 00:55:37.960
From the movie 300, fantastic.


00:55:37.960 --> 00:55:39.740
Oh my goodness.


00:55:39.740 --> 00:55:42.180
- Nice.


00:55:42.180 --> 00:55:43.020
- That's funny.


00:55:43.020 --> 00:55:47.100
- Also, ZDax says that,


00:55:47.100 --> 00:55:49.700
"This is like a real Python article about installing Python."


00:55:49.700 --> 00:55:51.100
Yeah, they have a good article as well,


00:55:51.100 --> 00:55:52.500
and I've leaked to it for a long time,


00:55:52.500 --> 00:55:54.940
I wanted a little more control of like the advice


00:55:54.940 --> 00:55:57.220
I was giving for the people taking my courses.


00:55:57.220 --> 00:55:59.700
So I decided I'm gonna take the time


00:55:59.700 --> 00:56:01.060
and like get that down, right?


00:56:01.060 --> 00:56:03.580
But yeah, there's an actual Python article as well.


00:56:03.580 --> 00:56:04.840
- So I'll have to write my own


00:56:04.840 --> 00:56:06.900
so I don't have to send people to your site.


00:56:06.900 --> 00:56:07.900
- Yeah, exactly.


00:56:07.900 --> 00:56:10.900
Exactly.


00:56:10.900 --> 00:56:14.180
Awesome, well, those are some really good,


00:56:14.180 --> 00:56:15.740
important comments, all of them.


00:56:15.740 --> 00:56:17.700
I think the Sparta one kind of inspires.


00:56:17.700 --> 00:56:19.460
You're like, we're gonna go to batch size 300.


00:56:19.460 --> 00:56:20.580
Let's do this.


00:56:20.580 --> 00:56:22.780
The others, I don't know about them so much.


00:56:22.780 --> 00:56:26.300
- No, I'm gonna start doing the,


00:56:26.300 --> 00:56:28.400
if this code works, it's written by me.


00:56:28.400 --> 00:56:31.260
We have version control.


00:56:31.260 --> 00:56:33.420
You can just look it up.


00:56:33.420 --> 00:56:34.240
- Yeah, that's true.


00:56:34.240 --> 00:56:35.080
There is a blame.


00:56:35.080 --> 00:56:39.700
- Well, that was fun.


00:56:39.700 --> 00:56:40.800
We're done.


00:56:40.800 --> 00:56:42.440
Thanks everybody for joining us.


00:56:42.440 --> 00:56:45.500
Thank you, Sebastian, for joining us.


00:56:45.500 --> 00:56:46.700
This was great.


00:56:46.700 --> 00:56:47.980
- Thank you for the invitation.


00:56:47.980 --> 00:56:51.200
Thanks everyone for listening to my weird voice.


00:56:51.200 --> 00:56:52.040
(laughing)


00:56:52.040 --> 00:56:53.820
- No, especially it was great to have you here.


00:56:53.820 --> 00:56:54.660
Thank you.


00:56:54.660 --> 00:56:55.500
- It was awesome, thank you.


00:56:55.500 --> 00:56:57.740
- Yep, bye everyone, bye Brian.


00:56:57.740 --> 00:56:58.580
- Bye.


00:56:58.580 --> 00:57:08.580
[BLANK_AUDIO]

