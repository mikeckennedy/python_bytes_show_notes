WEBVTT

00:00:00.000 --> 00:00:07.000
>> Everyone out there in the live stream. Hey, Brian. Hey, Anastasia.


00:00:07.000 --> 00:00:09.000
>> Hello. >> Hello.


00:00:09.000 --> 00:00:19.000
>> Hey, great to be here with you both and everyone out there listening. Please put some comments and thoughts into the live stream and we'll try to make it part of the show. And with that, let's kick this off.


00:00:19.000 --> 00:00:24.560
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:24.560 --> 00:00:31.000
to your earbuds. This is episode 236, recorded June 2, 2021. I'm Michael Kennedy.


00:00:31.000 --> 00:00:32.000
And I'm Brian Okken.


00:00:32.000 --> 00:00:34.000
And I'm Anastasia Timoshevsky.


00:00:34.000 --> 00:00:39.520
Hey, Anastasia. So great to have you here. Nice to have you on the show.


00:00:39.520 --> 00:00:41.520
Yeah, it's nice.


00:00:41.520 --> 00:00:47.400
Yeah, why don't you tell people a little bit about yourself before we get into the topics?


00:00:47.400 --> 00:00:54.160
- Yes, sure, of course. So I'm joining from Germany, Berlin, remotely right now, and I


00:00:54.160 --> 00:01:01.920
have a little one, a baby dog, joining as well. You might hear him on the stream. I


00:01:01.920 --> 00:01:06.320
am originally from Ukraine, I'm not German, I moved to Germany around five years ago,


00:01:06.320 --> 00:01:13.160
maybe five and a half, and my passion is Python. I used to be a C++ developer, a game developer,


00:01:13.160 --> 00:01:14.540
and so many more languages,


00:01:14.540 --> 00:01:17.440
but the best one I think for me is Python.


00:01:17.440 --> 00:01:21.680
So I decided to stick with it for around eight years now.


00:01:21.680 --> 00:01:22.800
- Oh, how cool.


00:01:22.800 --> 00:01:26.200
I started out doing my professional programming in C++


00:01:26.200 --> 00:01:28.240
and I know Brian still touches a little bit of C


00:01:28.240 --> 00:01:30.920
and C++ in his world, so that's cool.


00:01:30.920 --> 00:01:33.040
- Yeah, it's half my life.


00:01:33.040 --> 00:01:33.880
Yep.


00:01:33.880 --> 00:01:35.720
So.


00:01:35.720 --> 00:01:37.120
- Nice, and what kind of games?


00:01:38.640 --> 00:01:43.520
- Well, they were adapted first for iPad.


00:01:43.520 --> 00:01:46.080
There were like two and a half D games.


00:01:46.080 --> 00:01:51.080
And then later on, it was mostly 3D games with Unreal Engine.


00:01:51.080 --> 00:01:53.560
So yeah, that was fun. - Wow, how cool.


00:01:53.560 --> 00:01:55.820
Yeah, that's awesome.


00:01:55.820 --> 00:01:57.640
All right, well, once again, welcome.


00:01:57.640 --> 00:02:00.140
Welcome, so glad to have you here.


00:02:00.140 --> 00:02:01.940
Brian, do I have the first item this time around?


00:02:01.940 --> 00:02:03.680
No, you do, go for it.


00:02:03.680 --> 00:02:05.440
- Okay, well-- - What do you got for us?


00:02:05.440 --> 00:02:07.920
- Well, accessibility isn't really something,


00:02:07.920 --> 00:02:12.120
I probably should think about accessibility more, but I don't really,


00:02:12.120 --> 00:02:13.380
but I probably should.


00:02:13.380 --> 00:02:18.240
So I was excited to see there was a tweet recently by Matthew Fickert


00:02:18.240 --> 00:02:21.320
that said, "I need to give some serious praise


00:02:21.320 --> 00:02:26.380
to a fellow scikit-hep dev, Hans Dembinski,


00:02:26.380 --> 00:02:28.280
on his excellent monolens tool


00:02:28.280 --> 00:02:31.980
for interactive simulations of color blindness."


00:02:31.980 --> 00:02:33.280
So I checked this out.


00:02:33.280 --> 00:02:37.380
So monolens is a Python package, and you can pip install it.


00:02:37.440 --> 00:02:41.940
And as Matthew said, you can pipx install it.


00:02:41.940 --> 00:02:45.140
So you just always have it around, which is nice.


00:02:45.140 --> 00:02:50.140
And it just pops up this really cool window.


00:02:50.140 --> 00:02:56.180
And you can just drag it around


00:02:56.180 --> 00:02:59.460
and it makes the whatever the windows over,


00:02:59.460 --> 00:03:00.620
all over your desktop,


00:03:00.620 --> 00:03:03.660
it just makes it black and white instead of color.


00:03:03.660 --> 00:03:07.380
So you can see what it looks like in grayscale.


00:03:07.380 --> 00:03:11.220
So one of the things I really liked about this


00:03:11.220 --> 00:03:18.940
is the example showing it with Matplotlib and plots,


00:03:18.940 --> 00:03:22.420
because plots are really where you're using color


00:03:22.420 --> 00:03:26.740
to distinguish between two different sets of data.


00:03:26.740 --> 00:03:30.300
So you really want that data to look different,


00:03:30.300 --> 00:03:32.180
even if people don't see color.


00:03:32.180 --> 00:03:34.620
So that's an important thing.


00:03:34.620 --> 00:03:35.660
So that was neat.


00:03:35.660 --> 00:03:38.360
And then somebody that replied to that and said,


00:03:38.360 --> 00:03:43.860
"Hey, I always try to use Cmasher,


00:03:43.860 --> 00:03:46.600
Smasher, I'm not sure,


00:03:46.600 --> 00:03:50.160
to make sure they're colorblind friendly."


00:03:50.160 --> 00:03:51.600
So I'm like, "I've never heard of this."


00:03:51.600 --> 00:03:54.660
So I went and checked out Smasher.


00:03:54.660 --> 00:03:59.760
And what it is, is it's a bunch of color maps.


00:03:59.760 --> 00:04:01.700
So you don't really have to think about it.


00:04:01.700 --> 00:04:05.560
So there's all these great named color maps.


00:04:05.560 --> 00:04:10.200
and they're actually fairly attractive color changes.


00:04:10.200 --> 00:04:14.600
But it shows you what they look like in black and white also.


00:04:14.600 --> 00:04:19.260
So this is kind of a little demo at the top


00:04:19.260 --> 00:04:21.260
that we're looking at on the stream.


00:04:21.260 --> 00:04:23.840
But the code that you have to,


00:04:23.840 --> 00:04:26.660
it's just kind of built into Matplotlib already.


00:04:26.660 --> 00:04:30.060
It's also kind of an extension to Matplotlib


00:04:30.060 --> 00:04:32.100
and other things that use color maps.


00:04:32.100 --> 00:04:33.700
So you can just say when you're plotting,


00:04:33.760 --> 00:04:37.360
you can just specify a color map like rainforest or something.


00:04:37.360 --> 00:04:40.600
And it automatically is a colorblind,


00:04:40.600 --> 00:04:43.520
friendly color map.


00:04:43.520 --> 00:04:48.200
So you can do your plots and have it still look nice everywhere.


00:04:48.200 --> 00:04:50.020
Oh, yeah, this is really cool.


00:04:50.020 --> 00:04:53.560
And Matthew, friend of the show, thanks for sending that in.


00:04:53.560 --> 00:04:58.360
I never really thought about this and I should have, you know, I mean,


00:04:58.360 --> 00:05:01.720
I feel like maybe I should go over my websites and go,


00:05:02.260 --> 00:05:08.260
Do they look terrible for people who have color, vision impairments and whatnot?


00:05:08.260 --> 00:05:09.260
Yeah.


00:05:09.260 --> 00:05:10.260
So really cool.


00:05:10.260 --> 00:05:13.260
And it looks like it's this independent thing that will just go over.


00:05:13.260 --> 00:05:15.260
You just move your mouse around. It works on anything.


00:05:15.260 --> 00:05:20.260
It doesn't necessarily have to do with Jupyter or Matplotlib or something like that, right?


00:05:20.260 --> 00:05:23.260
Right. So the monolens is just something that works on anything.


00:05:23.260 --> 00:05:30.260
I drug it over even my desktop, my background, and it showed the picture in black and white.


00:05:30.260 --> 00:05:32.760
So it is cool.


00:05:32.760 --> 00:05:35.100
- The other thing is, wait, there's a color maps.


00:05:35.100 --> 00:05:38.380
I can just add to a map plot live.


00:05:38.380 --> 00:05:39.340
That's cool.


00:05:39.340 --> 00:05:40.420
Like rain forest and stuff.


00:05:40.420 --> 00:05:41.300
I don't need.


00:05:41.300 --> 00:05:42.940
- I didn't know you could just do that.


00:05:42.940 --> 00:05:44.540
So that's a, that's kind of a neat thing.


00:05:44.540 --> 00:05:46.740
And then you can, like, for instance,


00:05:46.740 --> 00:05:49.700
one of the examples that they have on the C mash


00:05:49.700 --> 00:05:53.860
or read me is just, just sort of a simple plot.


00:05:53.860 --> 00:05:55.940
And when you're in map plot,


00:05:55.940 --> 00:05:58.780
lib kind of just picks colors for you


00:05:58.780 --> 00:06:02.560
unless you specify colors for different plot lines.


00:06:02.560 --> 00:06:05.220
But you can just, you can give it a color map


00:06:05.220 --> 00:06:10.220
instead of a specific list for each item.


00:06:10.220 --> 00:06:13.900
So, and that just kind of, that's nice.


00:06:13.900 --> 00:06:15.140
Why not do it?


00:06:15.140 --> 00:06:16.420
- Yeah, why not do it?


00:06:16.420 --> 00:06:17.860
Anastasia, what do you think?


00:06:17.860 --> 00:06:21.100
- Oh, it looks amazing, really.


00:06:21.100 --> 00:06:22.680
And it's super helpful.


00:06:22.680 --> 00:06:25.860
- Yeah.


00:06:25.860 --> 00:06:27.020
- Never thought of that,


00:06:27.020 --> 00:06:29.520
but that would be great to use it as well.


00:06:29.520 --> 00:06:30.860
- For sure, when you were doing games,


00:06:30.860 --> 00:06:33.060
did you have to think about this kind of stuff?


00:06:33.060 --> 00:06:36.240
- No, actually we were not that far at that time.


00:06:36.240 --> 00:06:40.200
It was around seven years ago, eight.


00:06:40.200 --> 00:06:41.040
- Yeah.


00:06:41.040 --> 00:06:41.960
- So, yeah.


00:06:41.960 --> 00:06:46.440
- On the Monolens site, one of the examples they show


00:06:46.440 --> 00:06:51.440
is having one of the plots use some sort


00:06:51.440 --> 00:06:54.160
of pattern underneath and not just color.


00:06:54.160 --> 00:06:56.300
And I'm not sure how to do that.


00:06:56.300 --> 00:06:58.240
Some people that are great at Matplotlib


00:06:58.240 --> 00:07:00.560
probably know how to do that really right away.


00:07:00.560 --> 00:07:02.960
But that's kind of a neat idea also to have like,


00:07:02.960 --> 00:07:06.260
one of the graphs has hashes versus stars


00:07:06.260 --> 00:07:08.400
or slant lines or something like that.


00:07:08.400 --> 00:07:09.960
- Oh yeah, I have it like


00:07:09.960 --> 00:07:12.680
some sort of ASCII differentiator, yeah.


00:07:12.680 --> 00:07:13.840
- Yeah, so.


00:07:13.840 --> 00:07:16.620
- Something nice.


00:07:16.620 --> 00:07:17.760
Yeah, this is super helpful.


00:07:17.760 --> 00:07:18.600
I'm Matthew again.


00:07:18.600 --> 00:07:20.040
Thanks for sending in.


00:07:20.040 --> 00:07:23.640
And Joy, yeah, welcome to the live stream.


00:07:23.640 --> 00:07:25.600
Thanks for being here for the recording.


00:07:25.600 --> 00:07:32.160
So the next one I want to talk about is something called RapidFuzz.


00:07:32.160 --> 00:07:42.400
Yeah, so last time I talked when we had Vincent on, I saw the fuzzy wuzzy fuzzy text matching for


00:07:42.400 --> 00:07:50.560
that chatbot that he was showing off. I thought, oh, fuzzy wuzzy is cool. So Mikhail Honkala sent in


00:07:51.520 --> 00:07:59.520
rapidfuzz. And it's very much like fuzzy wuzzy, but it turns out to be a whole lot faster. And it


00:07:59.520 --> 00:08:03.360
uses some of the same ideas, but you know, coming back to the some of the things we were talking


00:08:03.360 --> 00:08:09.840
about, it is basically written in C++ using the Levenstein distance algorithm for words


00:08:09.840 --> 00:08:14.560
similarities, but obviously has a Python API that we all work with.


00:08:14.560 --> 00:08:21.200
And so yeah, it's pretty neat. It's really easy to work with. You just, again, pip install it,


00:08:21.200 --> 00:08:25.240
And then you come down here and do things like fuzz.ratio.


00:08:25.240 --> 00:08:27.280
And you can give it two sentences.


00:08:27.280 --> 00:08:31.080
This is a test, or this is a test, exclamation mark.


00:08:31.080 --> 00:08:34.560
And it says that's 96.5% the same.


00:08:34.560 --> 00:08:38.680
Or you have fuzzy, wuzzy, wuzzabear.


00:08:38.680 --> 00:08:41.240
I guess these are-- yeah, fuzzy, wuzzy, wuzzabear,


00:08:41.240 --> 00:08:43.320
I guess those are-- are those the same?


00:08:43.320 --> 00:08:44.720
No, wuzzy, fuzzy.


00:08:44.720 --> 00:08:46.240
Oh, wuzzy, fuzzy, yeah, I got it.


00:08:46.240 --> 00:08:47.200
I got to read better.


00:08:47.200 --> 00:08:49.640
Wuzzy, fuzzy, wuzzabear versus fuzzy, wuzzy, wuzzabear.


00:08:49.640 --> 00:08:51.120
Oh, my goodness.


00:08:51.120 --> 00:08:52.520
That's 90% the same.


00:08:52.520 --> 00:08:57.760
Given a bunch of phrases, you can sort them by similarity.


00:08:57.760 --> 00:09:00.320
You can say, kind of use selection,


00:09:00.320 --> 00:09:03.120
like, you know, to call in,


00:09:03.120 --> 00:09:05.240
sort of call center type of automation,


00:09:05.240 --> 00:09:08.100
given three choices and given some text,


00:09:08.100 --> 00:09:10.060
you can say, find which one,


00:09:10.060 --> 00:09:12.680
you know, like Atlanta Falcons, New York Jets,


00:09:12.680 --> 00:09:14.560
New York Giants, and so on.


00:09:14.560 --> 00:09:16.840
Somebody says, you know, lowercase New York Jets


00:09:16.840 --> 00:09:18.200
instead of uppercase, it'll say,


00:09:18.200 --> 00:09:22.480
well. Here's the likelihood that that's a match, but here's another possible match


00:09:22.480 --> 00:09:26.200
that's you know and it gives you the ratios of how good of a match it is. So


00:09:26.200 --> 00:09:30.400
if you've got a select set of choices and you're asking for input on it, you


00:09:30.400 --> 00:09:34.000
can just say well give me the closest match and if it's anywhere close you can


00:09:34.000 --> 00:09:42.360
just run with that. So yeah pretty neat right? That is pretty cool. Yeah and the


00:09:42.360 --> 00:09:47.520
other thing that's interesting is the performance and before people tell me


00:09:47.520 --> 00:09:51.240
that all benchmarks are broken and they don't work.


00:09:51.240 --> 00:09:52.840
Sometimes at least they give you a sense.


00:09:52.840 --> 00:09:56.680
So here's some of the things that they've got


00:09:56.680 --> 00:09:58.640
in terms of performance, say, versus Fuzzy Wuzzy,


00:09:58.640 --> 00:10:01.700
and the numbers are like 10 or 20 times faster.


00:10:01.700 --> 00:10:05.080
- Yeah, probably. - It's definitely broken.


00:10:05.080 --> 00:10:06.160
- It's definitely broken.


00:10:06.160 --> 00:10:08.040
I think it's because it's written in C++


00:10:08.040 --> 00:10:11.960
instead of Python at most of its core, probably.


00:10:11.960 --> 00:10:15.760
But anyway, if you're looking for fuzzy text matching,


00:10:15.760 --> 00:10:17.160
Fuzzy Wuzzy is a good option,


00:10:17.160 --> 00:10:20.600
And apparently, thanks to Mikko, RapidFuzz is as well.


00:10:20.600 --> 00:10:22.560
So yeah, pretty neat.


00:10:22.560 --> 00:10:23.840
- Yeah, we probably should do a segment


00:10:23.840 --> 00:10:26.040
on benchmarks at some point.


00:10:26.040 --> 00:10:27.280
- No, no.


00:10:27.280 --> 00:10:29.400
- No. (laughs)


00:10:29.400 --> 00:10:30.600
- No, we should do it,


00:10:30.600 --> 00:10:32.560
but I've written blog posts and stuff on it,


00:10:32.560 --> 00:10:34.600
and it's just an endless battle of,


00:10:34.600 --> 00:10:35.800
you're doing it wrong.


00:10:35.800 --> 00:10:37.680
Your situation is not my situation,


00:10:37.680 --> 00:10:39.440
and in my situation, it's not as good,


00:10:39.440 --> 00:10:42.160
or it's worse, or it's better, or you're...


00:10:42.160 --> 00:10:43.400
Yeah, no, I hear you.


00:10:43.400 --> 00:10:45.680
It would be interesting, but at the same time, yeah.


00:10:45.680 --> 00:10:46.520
- Okay, there we go.


00:10:46.520 --> 00:10:48.920
- I just had a section on the benchmarks.


00:10:48.920 --> 00:10:50.800
- Yeah, I've already just explained


00:10:50.800 --> 00:10:52.440
like the emotional trauma that I'll go through


00:10:52.440 --> 00:10:54.960
from receiving all the feedback notes.


00:10:54.960 --> 00:10:59.520
Ines Cezo, what do you think about this fuzzy text matching?


00:10:59.520 --> 00:11:01.040
- Well, maybe next time we can organize


00:11:01.040 --> 00:11:02.200
a battle between them.


00:11:02.200 --> 00:11:05.080
- That's right, yeah, we'll bring some in.


00:11:05.080 --> 00:11:06.280
- Yeah, sure.


00:11:06.280 --> 00:11:08.160
- Do you have any use for this fuzzy text matching,


00:11:08.160 --> 00:11:09.600
string matching stuff?


00:11:09.600 --> 00:11:11.520
- Well, actually, yes, at work,


00:11:11.520 --> 00:11:15.080
we have lots of matching algorithms,


00:11:15.080 --> 00:11:18.260
but we're using different tools


00:11:18.260 --> 00:11:20.400
and I'm not a data scientist person,


00:11:20.400 --> 00:11:22.860
but I would love to try that actually.


00:11:22.860 --> 00:11:25.300
Looks super cool.


00:11:25.300 --> 00:11:27.400
Yeah, we use some C++ libraries.


00:11:27.400 --> 00:11:28.720
- Cool.


00:11:28.720 --> 00:11:32.080
Yeah, Robert out there in the live stream says


00:11:32.080 --> 00:11:33.920
we would have to benchmark the episode


00:11:33.920 --> 00:11:36.120
if we had an episode about benchmarking.


00:11:36.120 --> 00:11:37.800
You see, it's like recursion.


00:11:37.800 --> 00:11:40.200
Save that thought for the end of the show, by the way.


00:11:40.200 --> 00:11:42.960
All right, Anastasia, you're up next.


00:11:42.960 --> 00:11:44.760
Structured logging, tell us about it.


00:11:44.760 --> 00:11:52.940
Well, a few years ago, I went to a meetup and I heard a talk from Markus Holterman about


00:11:52.940 --> 00:11:54.340
StructLog.


00:11:54.340 --> 00:11:58.260
That's the first time when I heard about this, and I decided to give it a try.


00:11:58.260 --> 00:12:04.500
And actually, I fell in love with it, and I'm using it since at least two and a half


00:12:04.500 --> 00:12:07.100
years, maybe two.


00:12:07.100 --> 00:12:13.020
It's an awesome way to bring a bit of structure to your logs to make them more visible and


00:12:13.020 --> 00:12:20.860
more usable because usually how we log, it's like just one huge sentence which is readable


00:12:20.860 --> 00:12:23.720
by humans, but it's not machine readable.


00:12:23.720 --> 00:12:31.440
And the idea is here to bring more structure to build some dashboards based on different


00:12:31.440 --> 00:12:36.940
keys and then values and then see what's actually happening with the system without touching


00:12:36.940 --> 00:12:42.460
the logs without scrolling through the whole log and then just reading a whole bunch of


00:12:42.460 --> 00:12:45.460
things.


00:12:45.460 --> 00:12:47.980
And I already used it in production.


00:12:47.980 --> 00:12:49.460
It looks pretty well.


00:12:49.460 --> 00:12:54.420
If you try using JSON format, it's just fantastic.


00:12:54.420 --> 00:12:55.420
How cool.


00:12:55.420 --> 00:13:00.740
Yeah, you can pass it all these like processors and type stuff.


00:13:00.740 --> 00:13:02.940
So you can say, render out the print,


00:13:02.940 --> 00:13:07.940
the stack info, the log level, timestamp,


00:13:07.940 --> 00:13:09.260
all those kinds of things.


00:13:09.260 --> 00:13:10.220
That's neat.


00:13:10.220 --> 00:13:13.100
- We added a bunch of processors like custom made,


00:13:13.100 --> 00:13:16.900
which were specifically designed for our applications,


00:13:16.900 --> 00:13:21.900
which made a life of our DevOps parsing the logs way easier


00:13:21.900 --> 00:13:25.740
because they didn't have to write them by hand.


00:13:25.740 --> 00:13:29.980
And if you use structured logs for all applications,


00:13:29.980 --> 00:13:34.940
just one, but for example microservices and you pass


00:13:34.940 --> 00:13:39.740
the key id or like trace id or something that will identify the path


00:13:39.740 --> 00:13:45.340
which the log goes through, then you might see what happened before


00:13:45.340 --> 00:13:51.980
the bug happened. Or maybe because if you want to see how the system


00:13:51.980 --> 00:13:55.900
is working, you also need to be either one of the


00:13:55.900 --> 00:13:59.940
of the detectives of the system or use the struct log.


00:13:59.940 --> 00:14:02.600
- Yeah, it's interesting when you log out stuff,


00:14:02.600 --> 00:14:06.540
it looks like you can just do key keyword arguments


00:14:06.540 --> 00:14:10.340
and those will add to the log really nice.


00:14:10.340 --> 00:14:13.740
You don't have to create a message that you're going to send


00:14:13.740 --> 00:14:16.860
that embeds, you know, the value,


00:14:16.860 --> 00:14:18.980
you know, variable equals valuable, variable equals value.


00:14:18.980 --> 00:14:20.700
You just pass them to the log message


00:14:20.700 --> 00:14:24.420
and they become part of the message like that, that's cool.


00:14:24.420 --> 00:14:27.180
- Yeah, and you can also use the initial message,


00:14:27.180 --> 00:14:32.180
which is an event like greeted here as some kind of key,


00:14:32.180 --> 00:14:35.140
which would give more clues where this message


00:14:35.140 --> 00:14:37.820
is coming from and what type of event happened


00:14:37.820 --> 00:14:40.940
instead of a usual message.


00:14:40.940 --> 00:14:42.340
- Yeah, nice.


00:14:42.340 --> 00:14:43.180
Very cool.


00:14:43.180 --> 00:14:46.020
The other thing it says is if you have Colorama installed,


00:14:46.020 --> 00:14:48.340
it will automatically render in nice colors.


00:14:48.340 --> 00:14:49.660
And that's very neat.


00:14:49.660 --> 00:14:52.580
I love Colorama and I love having colors


00:14:52.580 --> 00:14:55.740
in the code that we look at,


00:14:55.740 --> 00:14:57.260
it really makes a nice difference.


00:14:57.260 --> 00:15:00.200
So yeah, you get things like the colored,


00:15:00.200 --> 00:15:04.100
whether it's an info message or an error and whatnot.


00:15:04.100 --> 00:15:05.620
Yeah, very neat, I like it.


00:15:05.620 --> 00:15:10.300
- I keep meaning to use this more and I know,


00:15:10.300 --> 00:15:11.120
I'm glad you brought it up


00:15:11.120 --> 00:15:12.820
'cause I definitely wanna try this.


00:15:12.820 --> 00:15:15.100
- Definitely try this.


00:15:15.100 --> 00:15:17.180
- Yeah, yeah, this is a really good one.


00:15:17.180 --> 00:15:19.180
This is new to me, but quite neat.


00:15:19.180 --> 00:15:22.500
All right, not new to me, but also quite neat


00:15:22.500 --> 00:15:23.980
is our sponsor for this episode.


00:15:23.980 --> 00:15:28.360
So this episode is brought to you by Sentry.


00:15:28.360 --> 00:15:29.860
So how would you like to remove


00:15:29.860 --> 00:15:31.380
a little stress from your life?


00:15:31.380 --> 00:15:33.760
Do you worry that users may be having difficulties


00:15:33.760 --> 00:15:36.260
and encountering errors with your app right now?


00:15:36.260 --> 00:15:38.780
Would you even know until they send that support email?


00:15:38.780 --> 00:15:40.100
Yes, maybe using StruckLog,


00:15:40.100 --> 00:15:42.020
but are you watching the StruckLog now?


00:15:42.020 --> 00:15:43.380
You don't know, right?


00:15:43.380 --> 00:15:46.980
So how much better would it be if you had that error


00:15:46.980 --> 00:15:49.460
or performance details immediately sent to you


00:15:49.460 --> 00:15:51.860
with the call stack and local variables


00:15:51.860 --> 00:15:53.260
an active user and all that stuff.


00:15:53.260 --> 00:15:56.300
And with Sentry, it's not just possible, it's easy.


00:15:56.300 --> 00:15:58.100
We use Sentry on all of our web apps,


00:15:58.100 --> 00:16:00.020
pythonbytes.fm, Talk Python Training,


00:16:00.020 --> 00:16:01.460
all those kinds of things.


00:16:01.460 --> 00:16:04.460
And we know if there's some kind of problem.


00:16:04.460 --> 00:16:05.900
It's unfortunate if someone hits a problem,


00:16:05.900 --> 00:16:07.740
but it's better to know and be able to fix it right away.


00:16:07.740 --> 00:16:10.500
In fact, one time, somebody ran into a problem


00:16:10.500 --> 00:16:13.420
over at Talk Python Training, getting a course,


00:16:13.420 --> 00:16:15.580
and I got the message.


00:16:15.580 --> 00:16:17.740
I could see who was logged in when they had the problem,


00:16:17.740 --> 00:16:19.020
and I actually fixed the bug


00:16:19.020 --> 00:16:20.380
and was about to push out the changes,


00:16:20.380 --> 00:16:22.020
and I got an email, "Hey, I'm having a problem


00:16:22.020 --> 00:16:23.340
"with your site."


00:16:23.340 --> 00:16:25.380
I'm like, "Yeah, I know, I just fixed it.


00:16:25.380 --> 00:16:26.260
"Try again, please."


00:16:26.260 --> 00:16:28.340
And they were quite surprised.


00:16:28.340 --> 00:16:30.380
So surprise and delight your users today.


00:16:30.380 --> 00:16:33.580
Create your Sentry account at pythonbytes.fm/sentry.


00:16:33.580 --> 00:16:34.860
And please, when you're signing up,


00:16:34.860 --> 00:16:36.580
click the "Got a promo code?"


00:16:36.580 --> 00:16:38.940
redeem option and enter Python bytes.


00:16:38.940 --> 00:16:40.540
It's not automatic.


00:16:40.540 --> 00:16:43.400
So make sure that you enter Python bytes as the promo code,


00:16:43.400 --> 00:16:45.700
otherwise they won't know it's from us.


00:16:45.700 --> 00:16:46.660
You'll get a bunch of cool stuff,


00:16:46.660 --> 00:16:48.060
two free months of the team plan


00:16:48.060 --> 00:16:51.020
with many more errors and events and other features as well.


00:16:51.020 --> 00:16:54.320
So check them out at pythonbytes.fm/sentry.


00:16:54.320 --> 00:16:55.420
That's pretty awesome.


00:16:55.420 --> 00:16:58.620
Brian, I guess you should probably also test your code


00:16:58.620 --> 00:17:01.580
maybe before you end up with errors.


00:17:01.580 --> 00:17:02.500
What do you think?


00:17:02.500 --> 00:17:03.340
- Definitely.


00:17:03.340 --> 00:17:05.180
And actually before we go on,


00:17:05.180 --> 00:17:06.300
I think I've mentioned this before,


00:17:06.300 --> 00:17:09.700
but the graphic on that is on the Sentry page is so cool.


00:17:09.700 --> 00:17:11.380
- I know, I really like it too.


00:17:11.380 --> 00:17:15.180
I love the upset console terminal reading of paper.


00:17:15.180 --> 00:17:16.620
- Yeah.


00:17:16.620 --> 00:17:21.080
So this is kind of like inside baseball, maybe.


00:17:21.080 --> 00:17:23.480
But I don't know, maybe three people might care about this.


00:17:23.480 --> 00:17:25.340
But anyway, I'm one of them.


00:17:25.340 --> 00:17:31.380
So XFail now works with pytest subtests.


00:17:31.380 --> 00:17:36.280
So it's neat, but I got to explain it a little bit.


00:17:36.280 --> 00:17:40.540
So subtests are kind of this weird feature of unit tests


00:17:40.540 --> 00:17:42.820
that came along in Python 3.4,


00:17:42.880 --> 00:17:46.720
And it's a way, it's a context manager so that you can have


00:17:46.720 --> 00:17:50.620
possibly several places where your test might fail,


00:17:50.620 --> 00:17:54.480
but continue, it doesn't stop if it fails.


00:17:54.480 --> 00:17:57.680
And that was within unit test.


00:17:57.680 --> 00:18:00.760
pytest had, well, pytest had pytest-check,


00:18:00.760 --> 00:18:02.620
the plugin that I wrote,


00:18:02.620 --> 00:18:05.320
that allows something similar context manager.


00:18:05.320 --> 00:18:08.480
But then pytest Subtests came out,


00:18:08.480 --> 00:18:12.620
which was a plugin in about 2019 that started


00:18:12.680 --> 00:18:19.320
that allowed you to run the unit tests subtests from pytest,


00:18:19.320 --> 00:18:22.820
but there's also a pytest style of doing subtests also.


00:18:22.820 --> 00:18:24.960
They're a bit quirky.


00:18:24.960 --> 00:18:30.720
So I'm linking to two resources,


00:18:30.720 --> 00:18:33.360
an article by Paul Gansel


00:18:33.360 --> 00:18:38.380
and an episode of Testing Code where he and I talk about subtests.


00:18:38.380 --> 00:18:41.480
And so before you jump in and use them right away,


00:18:41.560 --> 00:18:45.400
You should know some of the quirks about them, but they're still cool if they work for you.


00:18:45.400 --> 00:18:49.300
But one of the quirks that was around for a long time was that XFail didn't work.


00:18:49.300 --> 00:18:52.600
And XFail is a way to say, "I know my test is going to fail,


00:18:52.600 --> 00:18:59.600
but, you know, and then you get to decide whether or not you want to mark it as an XPass


00:18:59.600 --> 00:19:01.800
or mark it as a fail if it fails."


00:19:01.800 --> 00:19:04.700
And the...


00:19:04.700 --> 00:19:10.060
Anyway, XFail didn't work with subtests,


00:19:10.120 --> 00:19:13.340
but it does now as of like the start of the month.


00:19:13.340 --> 00:19:17.000
So somebody named maybe Sibber on GitHub.


00:19:17.000 --> 00:19:19.140
Maybe.


00:19:19.140 --> 00:19:23.400
Merged a fix or submitted a fix as a pull request


00:19:23.400 --> 00:19:26.560
and it got merged and it's now in version 0.5.0.


00:19:26.560 --> 00:19:29.640
So XFail, if you wanted to use subtests,


00:19:29.640 --> 00:19:30.780
XFail now works with them.


00:19:30.780 --> 00:19:32.300
So that's the good news.


00:19:32.300 --> 00:19:35.440
- Yeah, yeah, this is really interesting.


00:19:35.440 --> 00:19:39.780
So the basic idea is I wanna loop over a bunch of scenarios


00:19:39.780 --> 00:19:42.780
or whatever, maybe test them all and then have the test fail,


00:19:42.780 --> 00:19:45.980
if any of them did, but actually just go through them all before.


00:19:45.980 --> 00:19:51.880
Yeah, so like on the subtests site, there's a little example.


00:19:51.880 --> 00:19:55.680
So like, let's say you're looping through a range and you want to run all of them


00:19:55.680 --> 00:20:00.380
within not a parameterized, just within the test, you're doing like several things.


00:20:00.380 --> 00:20:05.580
And you can, yeah, and if something fails, you want to actually report all of the failures.


00:20:05.580 --> 00:20:10.120
And this is sort of helpful with loops,


00:20:10.120 --> 00:20:12.420
but why not just use parameterization?


00:20:12.420 --> 00:20:16.520
But the one part where it does really help


00:20:16.520 --> 00:20:19.920
is if you really are checking four or five different things


00:20:19.920 --> 00:20:21.420
and you really want to know,


00:20:21.420 --> 00:20:24.020
like let's say you're measuring something


00:20:24.020 --> 00:20:28.120
or you're checking several dimensions of something,


00:20:28.120 --> 00:20:32.220
and having all of the failures together


00:20:32.220 --> 00:20:34.620
would help you determine what the real problem is.


00:20:34.680 --> 00:20:37.340
So it's a, it's, it's, it's, it's,


00:20:37.340 --> 00:20:40.180
when you have all the information, this is a good idea.


00:20:40.180 --> 00:20:43.920
- Very cool.


00:20:43.920 --> 00:20:47.320
Anastasia, what's the testing story in your world?


00:20:47.320 --> 00:20:50.120
- Well, we use mostly parameterized testing


00:20:50.120 --> 00:20:52.480
because we don't have the sub test need.


00:20:52.480 --> 00:20:54.860
We don't need to test it multiple times,


00:20:54.860 --> 00:20:58.320
maybe in the future.


00:20:58.320 --> 00:20:59.160
- Yeah.


00:20:59.160 --> 00:21:00.000
- And be useful.


00:21:00.000 --> 00:21:03.360
- Parameterized works, so I'd stick with it.


00:21:03.360 --> 00:21:04.200
- Yeah.


00:21:04.200 --> 00:21:06.060
Yeah, it's definitely good.


00:21:06.060 --> 00:21:08.500
All right, another thing that I think


00:21:08.500 --> 00:21:10.060
is really neat to talk about,


00:21:10.060 --> 00:21:12.820
but I feel like it's almost down


00:21:12.820 --> 00:21:15.900
to the benchmark type of situation is,


00:21:15.900 --> 00:21:19.700
what do you do with the secrets in your application?


00:21:19.700 --> 00:21:24.700
There's shget, SSH get, which is always terrifying.


00:21:24.700 --> 00:21:28.100
If you go here, you can see,


00:21:28.100 --> 00:21:30.500
oh, here's all the code that we found


00:21:30.500 --> 00:21:32.540
in this branch of this GitHub repository.


00:21:32.540 --> 00:21:36.780
For example, here's your database connection string


00:21:36.780 --> 00:21:38.780
with username and password right there.


00:21:38.780 --> 00:21:43.480
So you can see all kinds of issues if you go over here.


00:21:43.480 --> 00:21:46.300
There's like even a live stream.


00:21:46.300 --> 00:21:47.620
If it doesn't feel bad enough,


00:21:47.620 --> 00:21:49.060
you can watch the live stream


00:21:49.060 --> 00:21:51.380
of all the things that are coming in.


00:21:51.380 --> 00:21:53.380
Like right now, apparently there's some username


00:21:53.380 --> 00:21:56.260
and password and a URI and some kind of private key


00:21:56.260 --> 00:21:58.020
and whatnot.


00:21:58.020 --> 00:21:59.000
So you don't want that.


00:21:59.000 --> 00:21:59.840
So what do you do?


00:21:59.840 --> 00:22:01.620
Well, there's all kinds of things you can do.


00:22:01.620 --> 00:22:05.780
Do you encrypt those secrets and put them in source code?


00:22:05.780 --> 00:22:08.060
Well, then where do you store the encryption key?


00:22:08.060 --> 00:22:10.220
There's some kind of certain types of vaults


00:22:10.220 --> 00:22:11.660
you can install on your server,


00:22:11.660 --> 00:22:14.720
kind of like one password, but for servers,


00:22:14.720 --> 00:22:16.760
you could do that kind of thing.


00:22:16.760 --> 00:22:21.240
There's just leave it in there and hoping for the best.


00:22:21.240 --> 00:22:23.760
There's putting it in environment variables.


00:22:23.760 --> 00:22:26.000
That's a very, very common one, right?


00:22:26.000 --> 00:22:28.220
But still, no matter what you pick,


00:22:28.220 --> 00:22:30.940
you kind of got to get that data back and deal with it.


00:22:30.940 --> 00:22:35.140
So I want to introduce you to Pydantic.


00:22:35.140 --> 00:22:37.180
Brian, you've heard of Pydantic, right?


00:22:37.180 --> 00:22:38.020
- Yeah.


00:22:38.020 --> 00:22:42.100
I didn't know this had anything to do with secrets.


00:22:42.100 --> 00:22:47.100
- Yeah, if you go to Pydantic right here at the top,


00:22:47.100 --> 00:22:52.420
I believe there might be some nice little comment here.


00:22:52.420 --> 00:22:56.540
Oh, yeah, I thought you were in here,


00:22:56.540 --> 00:22:57.760
but apparently I'm in here right now.


00:22:57.760 --> 00:22:58.900
I think it toggles between us.


00:22:58.900 --> 00:23:01.340
Anyway, yeah, so we've known,


00:23:01.340 --> 00:23:04.400
the point is we really talked about pedantic a lot.


00:23:04.400 --> 00:23:06.920
It's a really cool way to create these classes


00:23:06.920 --> 00:23:08.660
that are kind of like data classes,


00:23:08.660 --> 00:23:10.160
point them at some data source,


00:23:10.160 --> 00:23:13.060
and then they validate it and adapt it, right?


00:23:13.060 --> 00:23:14.860
So if I've got like a JSON document,


00:23:14.860 --> 00:23:16.120
it has a field in it,


00:23:16.120 --> 00:23:18.120
and that field is a list of something,


00:23:18.120 --> 00:23:20.360
I could say in my model,


00:23:20.360 --> 00:23:22.160
this thing has a list of integers.


00:23:22.160 --> 00:23:24.440
And if it happens to be quote a string,


00:23:24.440 --> 00:23:26.960
or a number that has quotes on it,


00:23:26.960 --> 00:23:30.440
it'll just automatically do the int parse type of thing


00:23:30.440 --> 00:23:32.280
to get it fixed, or it'll tell us


00:23:32.280 --> 00:23:34.720
that it couldn't figure out what to do with the third value,


00:23:34.720 --> 00:23:37.640
something like that, it's really fantastic.


00:23:37.640 --> 00:23:41.080
But what I also didn't know was that it has built-in support


00:23:41.080 --> 00:23:43.000
for working with these user secrets.


00:23:43.000 --> 00:23:46.240
So Dennis Roy pointed this out to me,


00:23:46.240 --> 00:23:47.360
and there's all kinds of things.


00:23:47.360 --> 00:23:52.360
You can have the .env file, you can have Docker secrets,


00:23:52.360 --> 00:23:56.200
you can have environment variables,


00:23:56.200 --> 00:23:58.460
and all of these things has your secrets.


00:23:58.460 --> 00:24:01.380
And if you just derive from, instead of base model,


00:24:01.380 --> 00:24:03.340
you derive from base settings,


00:24:03.340 --> 00:24:05.940
then this will automatically determine


00:24:05.940 --> 00:24:08.780
any of the fields that are not passed to it


00:24:08.780 --> 00:24:12.020
from the environment or from .env files.


00:24:12.020 --> 00:24:14.360
What do you think?


00:24:14.360 --> 00:24:16.420
- Well, that's cool.


00:24:16.420 --> 00:24:18.740
Where did the .env files go?


00:24:18.740 --> 00:24:20.460
- Not in GitHub.


00:24:20.460 --> 00:24:21.380
(laughing)


00:24:21.380 --> 00:24:22.220
- Okay.


00:24:22.220 --> 00:24:24.980
- You know, you store them somewhere else, right?


00:24:24.980 --> 00:24:31.780
probably what ideally I think you do is you would store like an env template file that has you know


00:24:31.780 --> 00:24:35.460
put this value and then the real value here this value and the real value there and then you of


00:24:35.460 --> 00:24:39.380
course uh ignore .gitignore the other one the real one right so you at least have a structure


00:24:39.380 --> 00:24:46.180
but so the idea is you come down here and say I've got these settings and we've got like an API key


00:24:46.180 --> 00:24:54.500
and auth key we've got a redis connection all those kinds of things and you can even say I'm


00:24:54.500 --> 00:24:56.340
I'm going to put a prefix on it.


00:24:56.340 --> 00:24:58.460
So in your environment variables,


00:24:58.460 --> 00:25:01.140
it's fine if you've got one app and one server,


00:25:01.140 --> 00:25:03.620
but if you've got 10 apps running,


00:25:03.620 --> 00:25:06.460
or 10 APIs running on your server,


00:25:06.460 --> 00:25:08.300
what does the API key refer to?


00:25:08.300 --> 00:25:10.060
What does the database connection string


00:25:10.060 --> 00:25:12.380
with the database name in it refer to?


00:25:12.380 --> 00:25:13.960
Which one of those 10 apps, right?


00:25:13.960 --> 00:25:15.100
So you can put a prefix,


00:25:15.100 --> 00:25:20.060
so you could have like login app API key,


00:25:20.060 --> 00:25:24.080
or, you know, logging app API key.


00:25:24.080 --> 00:25:30.560
And you put that in there and it automatically will just let you access it as if it's API key.


00:25:30.560 --> 00:25:32.880
So you can sort of configure an environment a little bit better.


00:25:32.880 --> 00:25:36.960
There's just lots of really neat things that you can do in here to make that work.


00:25:36.960 --> 00:25:39.360
You can say whether it's case sensitive.


00:25:39.360 --> 00:25:45.360
Let's see, let me pull up, I had to take some notes, some other things I thought were super cool.


00:25:45.360 --> 00:25:51.600
So it's a regular Pydantic model, which means it will do all the conversions and the validation.


00:25:51.600 --> 00:25:53.820
And so if something is missing that's required


00:25:53.820 --> 00:25:54.660
from your environment,


00:25:54.660 --> 00:25:57.180
it'll let you know exactly what's missing.


00:25:57.180 --> 00:25:58.700
It'll do those conversions.


00:25:58.700 --> 00:26:01.620
Yeah, all sorts of stuff.


00:26:01.620 --> 00:26:05.100
It has support for raw sequence files as well,


00:26:05.100 --> 00:26:07.480
which is like a slightly different way to do it.


00:26:07.480 --> 00:26:10.680
You can have differently named ENV files,


00:26:10.680 --> 00:26:15.680
like a prod.env versus qnad.env or whatever.


00:26:15.680 --> 00:26:17.640
All sorts of settings.


00:26:17.640 --> 00:26:19.980
So I've always thought Pydantic is amazing


00:26:19.980 --> 00:26:22.420
and I had no idea it had this built-in support


00:26:22.420 --> 00:26:24.300
for working with this.


00:26:24.300 --> 00:26:26.740
The other thing that's really cool about this is


00:26:26.740 --> 00:26:28.660
if you go back to the top where it describes it,


00:26:28.660 --> 00:26:30.940
it says it will try to get these values


00:26:30.940 --> 00:26:33.380
from the environment if you don't pass them over.


00:26:33.380 --> 00:26:36.220
So if you're in say a testing environment


00:26:36.220 --> 00:26:39.660
and you wanna actually pass values that would control it,


00:26:39.660 --> 00:26:42.240
you could just explicitly pass them along


00:26:42.240 --> 00:26:44.580
instead of having them come from the environment.


00:26:44.580 --> 00:26:46.060
So it's really easy to test,


00:26:46.060 --> 00:26:49.180
set the test values instead of trying


00:26:49.180 --> 00:26:50.700
configuring test environment.


00:26:50.700 --> 00:26:52.380
Nice.


00:26:52.380 --> 00:26:56.900
We do use it by the way, base settings, but we didn't use


00:26:56.900 --> 00:26:59.820
prefixes. Yes. Yeah, which is a good idea.


00:26:59.820 --> 00:27:03.020
Yeah, the prefixes are cool. If you have a bunch of apps, if you


00:27:03.020 --> 00:27:06.060
just have one, it doesn't really matter, right? Yeah, of course.


00:27:06.060 --> 00:27:08.340
Cool. You like this? It's working well for you?


00:27:08.340 --> 00:27:11.860
Yeah, it's working perfectly well. And we are committing on


00:27:11.860 --> 00:27:14.740
the development version with some dummy keys just to have


00:27:14.740 --> 00:27:16.660
them around. Of course.


00:27:17.340 --> 00:27:20.260
Of course. Oh wow. How neat. OK.


00:27:20.260 --> 00:27:23.560
Cool cool well that's neat that using it.


00:27:23.560 --> 00:27:26.340
Brian, you got the next one, is that right?


00:27:26.340 --> 00:27:30.300
You already know, but I just wanted to mention the wait.


00:27:30.300 --> 00:27:38.980
Nevermind that the wrong thing. Oh here we go.


00:27:38.980 --> 00:27:42.980
The quote I think you were looking for was from FastAPI was not.


00:27:42.980 --> 00:27:45.580
Yes, yes of course of course.


00:27:45.580 --> 00:27:50.780
Yeah, it is. I'm over the moon. Yeah, super excited about it. Yeah fast. Thanks


00:27:50.780 --> 00:27:53.020
We use it


00:27:53.020 --> 00:27:55.020
I love fast api as well and to me like


00:27:55.020 --> 00:27:59.020
Pydantic and fast api they go together because I learned about them at the same time


00:27:59.020 --> 00:28:01.900
I know there are different people in different projects, but you know


00:28:01.900 --> 00:28:06.620
It works like magic. Yeah. Yeah, absolutely. It is. Yeah


00:28:06.620 --> 00:28:12.380
And if it's not magic, maybe you should document it or maybe it is magic. You should document it


00:28:12.380 --> 00:28:14.940
definitely


00:28:14.940 --> 00:28:16.460
- Definitely.


00:28:16.460 --> 00:28:19.500
Actually, I'm the one who is usually bringing this topic


00:28:19.500 --> 00:28:22.660
to the team, how to write documentation.


00:28:22.660 --> 00:28:25.440
And first, the question is why to write documentation?


00:28:25.440 --> 00:28:27.660
Everyone knows that we need documentation,


00:28:27.660 --> 00:28:31.440
but it's hard, it's time consuming, it's annoying.


00:28:31.440 --> 00:28:35.700
And how it usually happens, someone leaves the team


00:28:35.700 --> 00:28:40.700
and then the last days are about handing over everything.


00:28:40.700 --> 00:28:43.620
- Oh my gosh, I remember I've had this experience


00:28:43.620 --> 00:28:45.620
twice at least.


00:28:45.620 --> 00:28:46.460
- Writing?


00:28:46.460 --> 00:28:49.740
- Oh, you said you're going to,


00:28:49.740 --> 00:28:51.560
you've given me your two weeks.


00:28:51.560 --> 00:28:52.900
So your next two weeks,


00:28:52.900 --> 00:28:54.380
your two weeks notice that you're going to leave,


00:28:54.380 --> 00:28:57.300
your next two weeks will be to start writing documentation


00:28:57.300 --> 00:28:59.300
for everything you've ever worked on


00:28:59.300 --> 00:29:01.060
and anything that people might need to do.


00:29:01.060 --> 00:29:04.380
So your next two weeks are to begin writing documentation


00:29:04.380 --> 00:29:06.140
that you should have been doing the whole time.


00:29:06.140 --> 00:29:08.740
- In Germany, you will have a notice period of three months.


00:29:08.740 --> 00:29:09.620
So like it's three months.


00:29:09.620 --> 00:29:11.300
- Oh, that's a lot of documentation writing.


00:29:11.300 --> 00:29:16.160
- Yeah, just kidding, but normally,


00:29:16.160 --> 00:29:18.380
even if you leave the team, like you, for example,


00:29:18.380 --> 00:29:20.520
move from one team to another,


00:29:20.520 --> 00:29:23.140
it doesn't mean that you have to leave the company.


00:29:23.140 --> 00:29:26.060
Still, you have to hand over everything that you worked for,


00:29:26.060 --> 00:29:29.940
let's say in a year or even half of the year.


00:29:29.940 --> 00:29:32.900
And for example, in my experience,


00:29:32.900 --> 00:29:35.180
when I started with Python, I didn't know any Python.


00:29:35.180 --> 00:29:36.300
I had to learn it.


00:29:36.300 --> 00:29:39.220
And of course I didn't know about Sphinx or Read-a-Dox


00:29:39.220 --> 00:29:44.620
any kind of documentation for Python. And what did I do? Nothing. I didn't write it.


00:29:44.620 --> 00:29:49.540
And half a year later, I was wondering who wrote this code. So I did git blame. And of


00:29:49.540 --> 00:29:56.900
course, it was me. And I was like... What a stupid person. So, yeah. And I suggest to


00:29:56.900 --> 00:30:02.900
start writing documentation now. Even if you're not leaving the team. The reason why I'm bringing


00:30:02.900 --> 00:30:09.140
up the Sphinx and read the docs is that it will allow to have continuous documentation.


00:30:09.140 --> 00:30:17.220
And with Sphinx, you can easily write just some doc strings which will explain what the


00:30:17.220 --> 00:30:24.900
function does, what the class is doing, add some input/output parameters, and then you will


00:30:24.900 --> 00:30:31.620
automatically generate it. So there's no need to write it somewhere on Confluence or any other


00:30:31.620 --> 00:30:34.180
source because if there are too many sources


00:30:34.180 --> 00:30:39.780
That's where the documentation will die because no one will go and check it and during the handover


00:30:39.780 --> 00:30:45.220
Usually it happens like that. You write documentation somewhere where nobody knows where and nobody reads it


00:30:45.220 --> 00:30:51.940
Yeah, you pointed out that you've got it in jira and you've got it in github. Yeah, you've got it in all different places


00:30:51.940 --> 00:30:54.180
Google docs. Yes. Yeah


00:30:54.180 --> 00:30:56.240
Especially google docs. Oh, yes


00:30:57.460 --> 00:31:04.740
And then you share like 10 Google Docs with different people and then they lose the links and people are leaving


00:31:04.740 --> 00:31:08.180
It's nice when people are leaving the team


00:31:08.180 --> 00:31:14.420
But it's not nice to the people who are leaving the team to another team because they are getting all the questions for a year


00:31:14.420 --> 00:31:20.340
Where to find this how can I get this function how to get this data?


00:31:20.340 --> 00:31:26.500
Yeah. Yeah, very good advice, you know, uh for a long time sphinx was like


00:31:27.040 --> 00:31:28.620
synonymous with restructured text,


00:31:28.620 --> 00:31:31.360
but now we've also got the Markdown


00:31:31.360 --> 00:31:33.440
with the mist parser there.


00:31:33.440 --> 00:31:35.360
So that's very cool as well.


00:31:35.360 --> 00:31:38.000
I'm a fan of Markdown instead.


00:31:38.000 --> 00:31:40.800
- And also it supports the Sphinx itself.


00:31:40.800 --> 00:31:44.640
It supports different types of documentation.


00:31:44.640 --> 00:31:47.140
For example, you can write code reference,


00:31:47.140 --> 00:31:49.040
then you can go through all the code,


00:31:49.040 --> 00:31:52.560
and then you can also write extra documentation,


00:31:52.560 --> 00:31:54.720
like Markdown, even readme can be included


00:31:54.720 --> 00:31:56.440
into documentation.


00:31:56.440 --> 00:31:58.660
and you can also style it.


00:31:58.660 --> 00:31:59.500
- Oh, nice.


00:31:59.500 --> 00:32:01.200
Yeah, yeah, very cool.


00:32:01.200 --> 00:32:03.520
- Yeah, there's lots of great themes to it too now.


00:32:03.520 --> 00:32:05.080
Really looks attractive.


00:32:05.080 --> 00:32:06.700
- Yeah, you did recently cover that, right, Brian?


00:32:06.700 --> 00:32:08.560
The Sphinx themes.


00:32:08.560 --> 00:32:11.480
- Yeah, and actually when the Markdown,


00:32:11.480 --> 00:32:13.320
the support came on,


00:32:13.320 --> 00:32:16.200
that's when I went back and started looking at Sphinx.


00:32:16.200 --> 00:32:20.440
So some of our documentation is done in Sphinx now


00:32:20.440 --> 00:32:22.640
because it does Markdown.


00:32:22.640 --> 00:32:25.240
And you can even make it do,


00:32:25.240 --> 00:32:29.000
it's not built in, but you can make it read doc strings


00:32:29.000 --> 00:32:31.720
and interpret doc strings as Markdown.


00:32:31.720 --> 00:32:32.720
So it's cool.


00:32:32.720 --> 00:32:34.240
- Yeah, very cool, very cool.


00:32:34.240 --> 00:32:37.920
Robert on the live stream has an interesting addition


00:32:37.920 --> 00:32:41.200
to continuous integration and continuous delivery.


00:32:41.200 --> 00:32:44.880
So can we deploy it only if the documentation is complete?


00:32:44.880 --> 00:32:46.120
Very cool. - Definitely.


00:32:46.120 --> 00:32:48.960
(laughing)


00:32:48.960 --> 00:32:50.240
- Very cool.


00:32:50.240 --> 00:32:53.120
All right, well, that's it for our main topics.


00:32:53.120 --> 00:32:54.320
Brian, you got anything you wanna share?


00:32:54.320 --> 00:32:56.320
any extra stuff you want to throw out there?


00:32:56.320 --> 00:33:00.400
Mostly, I'm curious about pytest uses.


00:33:00.400 --> 00:33:02.320
So I'll drop a link in the show notes,


00:33:02.320 --> 00:33:07.240
but basically I've got a pinned tweet on my Twitter.


00:33:07.240 --> 00:33:14.360
I'd like to have people tell me where they're using pytest.


00:33:14.360 --> 00:33:17.380
So I've got some examples.


00:33:17.380 --> 00:33:20.520
Then I went, my first question was people,


00:33:20.520 --> 00:33:22.240
projects that have switched.


00:33:22.240 --> 00:33:27.240
But I was looking at just the guts of how Python works.


00:33:27.240 --> 00:33:30.360
There's some amazing projects that use pytest,


00:33:30.360 --> 00:33:33.000
like wheel, pip, setup tools,


00:33:33.000 --> 00:33:35.400
warehouse, those all use pytest. That's pretty cool.


00:33:35.400 --> 00:33:37.080
>> Wow. How interesting. Yeah.


00:33:37.080 --> 00:33:39.560
Those are almost inside of Python,


00:33:39.560 --> 00:33:42.120
which is interesting because they're not using unit test, right?


00:33:42.120 --> 00:33:44.280
>> Yeah. Then I just learned about recently,


00:33:44.280 --> 00:33:46.880
even if it's proprietary, that'd be interesting.


00:33:46.880 --> 00:33:48.840
I just learned that Stripe and Lyft went through


00:33:48.840 --> 00:33:51.240
a pytest conversion recently,


00:33:51.240 --> 00:33:52.080
So that's kind of neat.


00:33:52.080 --> 00:33:52.920
- Yeah, that's cool.


00:33:52.920 --> 00:33:54.480
Yeah, yeah, very cool.


00:33:54.480 --> 00:33:56.320
Anastasia, anything else you wanna throw out there


00:33:56.320 --> 00:33:58.400
or let people know about while we're here?


00:33:58.400 --> 00:34:04.640
- Yeah, maybe using exceptions.


00:34:04.640 --> 00:34:07.080
Don't use space exception.


00:34:07.080 --> 00:34:09.320
- Yeah, Greek custom exception.


00:34:09.320 --> 00:34:10.720
Like for your app or have a certain,


00:34:10.720 --> 00:34:12.960
absolutely, I definitely second that idea.


00:34:12.960 --> 00:34:17.160
All right, this didn't deign to almost be


00:34:17.160 --> 00:34:19.360
in an extra, extra, extra, extra, extra,


00:34:19.360 --> 00:34:21.860
I don't care all about it, so I'll just go quick.


00:34:21.860 --> 00:34:26.800
So Matthew Fikert's getting a couple of shout outs


00:34:26.800 --> 00:34:29.000
on this show, so he also pointed out,


00:34:29.000 --> 00:34:31.600
said, "Whoa, super cool, pipx,"


00:34:31.600 --> 00:34:32.920
which we've talked about on the show before,


00:34:32.920 --> 00:34:34.600
it lets you install Python tools,


00:34:34.600 --> 00:34:36.640
kind of like Homebrew or Apt.


00:34:36.640 --> 00:34:37.700
They're not part of a project,


00:34:37.700 --> 00:34:39.780
but you wanna have them managed and installed


00:34:39.780 --> 00:34:41.200
in their own isolated environment,


00:34:41.200 --> 00:34:44.200
so you pipx instead of pip install a thing, which is great.


00:34:44.200 --> 00:34:46.120
That is now officially part of PyPA,


00:34:46.120 --> 00:34:48.320
the Python Packaging Authority.


00:34:48.320 --> 00:34:53.280
So yeah, pretty cool. So PipX is now sort of officially part of Python,


00:34:53.280 --> 00:34:55.840
not Python distribution, but the group, you know.


00:34:55.840 --> 00:35:04.240
Next, I will be presenting-ish. It's recorded, but then there's like a live Q&A afterwards.


00:35:04.240 --> 00:35:08.320
Manning is having a conference on developer productivity.


00:35:08.320 --> 00:35:13.600
I don't honestly remember what my talk is going to be about. Oh, yes, here it is.


00:35:13.600 --> 00:35:17.320
It's 10 tips and tools you can adopt in 15 minutes or less


00:35:17.320 --> 00:35:19.040
to level up your developer productivity.


00:35:19.040 --> 00:35:20.640
So I'm going to be speaking on that.


00:35:20.640 --> 00:35:22.760
- Who knew? - All sorts of fun things.


00:35:22.760 --> 00:35:24.760
So if you want to check that out, it's free to register for.


00:35:24.760 --> 00:35:26.760
It's later this month, I guess.


00:35:26.760 --> 00:35:30.240
Here's just a thought I would throw out there for you.


00:35:30.240 --> 00:35:34.480
I don't expect an answer, but yikes, cloud bills can pile up.


00:35:34.480 --> 00:35:39.400
Alex Chan, who is teaching, I guess.


00:35:39.400 --> 00:35:41.800
I could figure out exactly the context of this,


00:35:41.800 --> 00:35:47.640
But she put out a tweet that said, I have a panicked student in my DMs who accidentally


00:35:47.640 --> 00:35:51.040
racked up an $8,000 AWS bill.


00:35:51.040 --> 00:35:53.160
My suggestion of talk to support is no good.


00:35:53.160 --> 00:35:56.360
Apparently, they won't issue a billing adjustment.


00:35:56.360 --> 00:35:57.840
Anyone got ideas out there?


00:35:57.840 --> 00:35:58.840
Help?


00:35:58.840 --> 00:35:59.840
Oh, no.


00:35:59.840 --> 00:36:00.840
Could you imagine as a student?


00:36:00.840 --> 00:36:03.900
I mean, as a professional, it's still a lot of money.


00:36:03.900 --> 00:36:07.800
But as a student, $8,000 is like a ton of money.


00:36:07.800 --> 00:36:11.720
Yeah, it's like a term of bills.


00:36:11.720 --> 00:36:12.560
but it depends on--


00:36:12.560 --> 00:36:13.400
- Yes, exactly.


00:36:13.400 --> 00:36:15.880
Yeah, like a semester of studies or something.


00:36:15.880 --> 00:36:20.520
So maybe other students and basically all people out there,


00:36:20.520 --> 00:36:24.660
put up billing alerts on whatever cloud thing you're doing,


00:36:24.660 --> 00:36:30.320
on whatever places I have, including AWS,


00:36:30.320 --> 00:36:33.000
I get periodically, I get an announcement.


00:36:33.000 --> 00:36:34.840
It's like, your bill is now at $50.


00:36:34.840 --> 00:36:35.960
Your bill is at $100.


00:36:35.960 --> 00:36:37.280
Your bill is now at $500.


00:36:37.280 --> 00:36:39.160
Your bill is now at $1,000.


00:36:39.160 --> 00:36:40.200
And if it goes beyond that,


00:36:40.200 --> 00:36:42.560
I'm gonna have to start paying a lot of attention


00:36:42.560 --> 00:36:44.340
to what's going on with my AWS account.


00:36:44.340 --> 00:36:46.440
So just put these alerts on there.


00:36:46.440 --> 00:36:49.280
It's usually easy with whatever platform you're on.


00:36:49.280 --> 00:36:51.780
Anyway, don't be that poor student.


00:36:51.780 --> 00:36:55.640
All right, what's next?


00:36:55.640 --> 00:36:59.400
Brian Skin shot it out.


00:36:59.400 --> 00:37:01.560
Hey, this might not be a total new item,


00:37:01.560 --> 00:37:02.400
but maybe we can mention it.


00:37:02.400 --> 00:37:03.480
Maybe it's interesting.


00:37:03.480 --> 00:37:05.040
Developed a Flake,


00:37:05.040 --> 00:37:06.240
mentioned a Flake,


00:37:06.240 --> 00:37:07.560
he didn't develop it, I don't believe.


00:37:07.560 --> 00:37:10.300
a Flake 8 plugin for FastAPI.


00:37:10.300 --> 00:37:12.680
So if you're doing FastAPI,


00:37:12.680 --> 00:37:15.360
there's different ways to do things like routes and whatnot.


00:37:15.360 --> 00:37:17.600
And there's like the natural way


00:37:17.600 --> 00:37:18.860
and there's sort of a clumsy way.


00:37:18.860 --> 00:37:20.560
And so here's a Flake 8 thing


00:37:20.560 --> 00:37:22.680
to make sure you're doing FastAPI.


00:37:22.680 --> 00:37:23.720
Nice.


00:37:23.720 --> 00:37:24.800
- Interesting.


00:37:24.800 --> 00:37:25.640
- Yup.


00:37:25.640 --> 00:37:26.600
- That would be useful.


00:37:26.600 --> 00:37:27.440
- Yeah, yeah.


00:37:27.440 --> 00:37:28.540
And I think this is my last one.


00:37:28.540 --> 00:37:30.000
It is my last one here.


00:37:30.000 --> 00:37:33.620
So, Sal Shannonbrook tweeted,


00:37:35.040 --> 00:37:37.440
JupyterLab 3 will have localization.


00:37:37.440 --> 00:37:41.760
So localization means like the menus and the help text


00:37:41.760 --> 00:37:44.360
and the button hover tips and all that kind of stuff


00:37:44.360 --> 00:37:47.160
are localized for different languages.


00:37:47.160 --> 00:37:50.760
So JupyterLab 3 will have localization making


00:37:50.760 --> 00:37:56.040
it more approachable for people who don't want to work in an English UI.


00:37:56.040 --> 00:37:58.960
And they're crowdsourcing translations.


00:37:58.960 --> 00:38:01.760
So if you wanted to contribute to Jupyter


00:38:01.760 --> 00:38:06.440
And you were good at programming and in a language that's not English because it's already done in English


00:38:06.440 --> 00:38:08.680
You know go check that out. That would be kind of cool


00:38:08.680 --> 00:38:16.680
What if anybody just messes with people and like does it wrong translations just for fun I'm so afraid of that yeah


00:38:16.680 --> 00:38:18.680
I think they do


00:38:18.680 --> 00:38:22.840
But they do I bet they do and maybe not really obvious maybe in real subtle ways


00:38:22.840 --> 00:38:30.400
Yeah, yeah, yeah, never mind don't don't don't don't give people ideas this is not


00:38:30.400 --> 00:38:31.240
- Yeah.


00:38:31.240 --> 00:38:32.240
(laughing)


00:38:32.240 --> 00:38:33.240
- That's a good one.


00:38:33.240 --> 00:38:35.000
(laughing)


00:38:35.000 --> 00:38:36.700
- All right, well, that's all the extras as well.


00:38:36.700 --> 00:38:38.440
So how about a joke?


00:38:38.440 --> 00:38:40.420
- Yeah.


00:38:40.420 --> 00:38:41.360
- Okay.


00:38:41.360 --> 00:38:44.400
So imagine you're learning programming,


00:38:44.400 --> 00:38:45.920
you're learning Python,


00:38:45.920 --> 00:38:48.400
take one of these computer science courses


00:38:48.400 --> 00:38:52.160
where they talk about weird things like recursion.


00:38:52.160 --> 00:38:55.680
So recursion is the idea that the function calls itself


00:38:55.680 --> 00:38:57.160
with different parameters, right?


00:38:57.160 --> 00:38:59.600
Like a really common example would be factorial.


00:38:59.600 --> 00:39:05.600
So if I'm going to calculate a factorial, it's just n times n minus 1 times n minus 2.


00:39:05.600 --> 00:39:09.600
So that's just n times factorial of the smaller number.


00:39:09.600 --> 00:39:11.600
You just like work your way back, right?


00:39:11.600 --> 00:39:16.600
But there should be an exit condition like if n equals 1, return.


00:39:16.600 --> 00:39:18.600
Don't keep recursing.


00:39:18.600 --> 00:39:23.600
So here's a nice little graphic under the banner of only programmers who would understand.


00:39:23.600 --> 00:39:25.600
And it's got the four squares.


00:39:25.600 --> 00:39:26.600
It's kind of like screen sharing.


00:39:26.600 --> 00:39:27.600
We got that infinite view.


00:39:27.600 --> 00:39:29.600
So learn a program in one corner.


00:39:29.600 --> 00:39:31.600
Next corner, make recursive function.


00:39:31.600 --> 00:39:33.600
Third corner, no exit condition.


00:39:33.600 --> 00:39:35.600
And then it just repeats and repeats and repeats


00:39:35.600 --> 00:39:37.600
down to smaller and smaller and smaller. I love it.


00:39:37.600 --> 00:39:41.600
This is bad.


00:39:41.600 --> 00:39:43.600
No, this is good.


00:39:43.600 --> 00:39:45.600
That's how you learn.


00:39:45.600 --> 00:39:47.600
That's right. No.


00:39:47.600 --> 00:39:49.600
Yeah, exactly. It's like when you share your screen


00:39:49.600 --> 00:39:51.600
in Zoom or maybe


00:39:51.600 --> 00:39:53.600
Google Meet, but you've still got the window up or something


00:39:53.600 --> 00:39:55.600
like that, but it's about recursion. It's beautiful.


00:39:55.600 --> 00:39:59.120
And then you silence base exceptions and you cannot exit the program.


00:39:59.120 --> 00:40:00.520
Yes, that's right.


00:40:00.520 --> 00:40:06.320
Do you know if, yeah, do you know if Python has a tail recursion optimization?


00:40:06.320 --> 00:40:11.240
I'm thinking, I'm thinking no.


00:40:11.240 --> 00:40:14.800
Like, so the whole point is here, Brian, that we would run out of a call stack


00:40:14.800 --> 00:40:18.160
space really quickly, and that's usually the error stack overflow error.


00:40:18.160 --> 00:40:19.800
If you recurse too deep type of thing.


00:40:19.800 --> 00:40:20.480
Yeah.


00:40:20.480 --> 00:40:23.400
But with trail recursion, it basically becomes an infinite loop.


00:40:23.400 --> 00:40:25.240
So you run out of time instead of memory.


00:40:25.240 --> 00:40:26.240
Okay.


00:40:26.240 --> 00:40:30.320
So, but I don't, so that would be the advantage of Taylor recursion.


00:40:30.320 --> 00:40:32.120
I have no idea if it is there or not.


00:40:32.120 --> 00:40:33.120
Yeah.


00:40:33.120 --> 00:40:37.240
I mean, there's some languages that do the optimization, so they don't, they don't generate


00:40:37.240 --> 00:40:40.120
a new call stack because there's nothing to save.


00:40:40.120 --> 00:40:41.120
So yeah.


00:40:41.120 --> 00:40:42.120
Anyway.


00:40:42.120 --> 00:40:43.120
Yeah.


00:40:43.120 --> 00:40:44.120
I don't know.


00:40:44.120 --> 00:40:45.120
I'm sure we will find out before next week.


00:40:45.120 --> 00:40:46.120
Yeah.


00:40:46.120 --> 00:40:50.320
One of the reasons why I like asking open-ended questions on the podcast.


00:40:50.320 --> 00:40:52.320
Yeah, that's awesome.


00:40:52.320 --> 00:40:53.320
Yep.


00:40:53.320 --> 00:40:55.000
Well, Brian, thank you as always.


00:40:55.000 --> 00:40:56.600
And Anastasia, thank you for being here.


00:40:56.600 --> 00:40:58.200
It was great to have you as a guest.


00:40:58.200 --> 00:40:59.360
- Thanks. - Thank you for inviting.


00:40:59.360 --> 00:41:00.240
Thank you.


00:41:00.240 --> 00:41:01.560
- Yeah.


00:41:01.560 --> 00:41:02.400
Bye.


00:41:02.400 --> 00:41:03.920
And bye everyone out there in the live stream.

