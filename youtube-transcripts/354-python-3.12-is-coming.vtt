WEBVTT

00:00:00.000 --> 00:00:02.000
>> Hello. >> Hey.


00:00:02.000 --> 00:00:07.000
>> Hey, hey. Looking forward to another fun show today, Brian. Let's kick this off, huh?


00:00:07.000 --> 00:00:09.000
>> Okay. Yeah.


00:00:09.000 --> 00:00:15.000
>> Thanks, everyone, for being on the live stream. If you're watching live, throw your thoughts out there as well.


00:00:15.000 --> 00:00:22.000
Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:22.000 --> 00:00:27.000
This is episode 354, recording from the Python Studio.


00:00:27.000 --> 00:00:35.000
This is episode 354, recorded September 26th, 2023. I'm Michael Kennedy.


00:00:35.000 --> 00:00:37.000
>> And I'm Brian Okken.


00:00:37.000 --> 00:00:38.000
>> Brian, how you doing?


00:00:38.000 --> 00:00:41.000
>> I am good. It's been a busy week.


00:00:41.000 --> 00:00:43.000
>> It has been. >> And it's only Tuesday.


00:00:43.000 --> 00:00:46.000
>> I know, and it's starting strong.


00:00:46.000 --> 00:00:50.000
You know, if you want to follow the show, stay in touch with us.


00:00:50.000 --> 00:00:55.000
Be sure to check out Fostadon over on Mastodon. We've got all the links for that in the show notes.


00:00:55.000 --> 00:01:01.000
I was just thinking today, I just booked a couple of episodes through Mastodon for Talk Python.


00:01:01.000 --> 00:01:09.000
I just was working on another, like, video presentation thing on Mastodon, like how much work gets actually done on Mastodon.


00:01:09.000 --> 00:01:12.000
So people should be there with us, Brian.


00:01:12.000 --> 00:01:14.000
>> Yeah, I think so.


00:01:14.000 --> 00:01:15.000
>> Yeah, for sure, for sure.


00:01:15.000 --> 00:01:18.000
>> It's the place where all the cool kids are.


00:01:18.000 --> 00:01:25.000
>> Indeed, indeed. So hopefully you'll connect with us over there as well. Very exciting stuff.


00:01:25.000 --> 00:01:31.000
See some people in the audience here. I'm going to have to give them a shout out later because some things that we're sharing.


00:01:31.000 --> 00:01:33.000
And so that's going to be very exciting.


00:01:33.000 --> 00:01:37.000
So speaking of exciting, what's the first thing you got for us?


00:01:37.000 --> 00:01:46.000
>> I'm actually really excited. I may be jumping the gun on this, but Log Merger is from Paul McGuire.


00:01:46.000 --> 00:01:51.000
And it's a project that he's working on, and it's pretty fun.


00:01:51.000 --> 00:02:00.000
So I don't know, maybe I'm not -- I think more people, a lot of people deal with log files that they have to deal with more than one.


00:02:00.000 --> 00:02:05.000
So you have maybe two processes or three that are all time stamping and saving.


00:02:05.000 --> 00:02:19.000
Well, so this is a project that is a textual-based project, but it combines them all and sorts the multiple logs based on time stamp.


00:02:19.000 --> 00:02:34.000
So you've got -- maybe you've got a time stamp and then content, and it splits it out and shows you the time stamp on the left and then the different log files in columns.


00:02:34.000 --> 00:02:38.000
And the example just shows two, but I think you can pass it more than two.


00:02:38.000 --> 00:02:40.000
I think you can do multiples.


00:02:40.000 --> 00:02:49.000
So it's called Log Merger, but it's not -- I don't know if it actually merges them, but it makes this combined output thing, and it's really fun.


00:02:49.000 --> 00:02:57.000
>> Right. It's more look at them in what a merge view with time stamps would look like rather than actually trying to unify them or something, huh?


00:02:57.000 --> 00:03:05.000
>> And I had some concerns right away, and they were already like -- I downloaded it, and I'm trying this out.


00:03:05.000 --> 00:03:09.000
You can pipe the output to standard output, or you can use the textual thing.


00:03:09.000 --> 00:03:11.000
So you can do either one.


00:03:11.000 --> 00:03:13.000
So the output is nice.


00:03:13.000 --> 00:03:17.000
But sometimes, you know, log files can be huge, and you only want to look at a part of it.


00:03:17.000 --> 00:03:21.000
So there's a cool -- there's some nice flags that are included.


00:03:21.000 --> 00:03:23.000
There's a start and end time stamp.


00:03:23.000 --> 00:03:29.000
So you can say, yeah, start here and then go to here and don't do the rest of it.


00:03:29.000 --> 00:03:37.000
There's an interactive mode, which is I think the default, yeah, that shows you the little two-way, and you can do error boxes and stuff.


00:03:37.000 --> 00:03:39.000
You can save them to a CSV.


00:03:39.000 --> 00:03:43.000
I don't -- I think that would be great if you want to throw it in Excel or something like that.


00:03:43.000 --> 00:03:46.000
And then multiple time stamp formats are supported.


00:03:46.000 --> 00:03:53.000
So you've got like -- there's a handful that I think this is pretty good.


00:03:53.000 --> 00:03:55.000
This is the standard ones.


00:03:55.000 --> 00:04:00.000
I didn't even pass in a time stamp when I tried it out, and it just worked fine.


00:04:00.000 --> 00:04:04.000
So I'm going to be using this a lot.


00:04:04.000 --> 00:04:06.000
I'm excited about some of the upcoming work.


00:04:06.000 --> 00:04:11.000
So there's possibly -- oh, maybe it's not here, but somewhere else.


00:04:11.000 --> 00:04:14.000
There's a possibility of using PCAP files.


00:04:14.000 --> 00:04:23.000
I think that's in working on -- those are -- I don't even remember what that stands for, but I deal with them for protocol analysis.


00:04:23.000 --> 00:04:29.000
But the -- I maybe jumped the gun because you can't pip install it yet.


00:04:29.000 --> 00:04:35.000
You have to -- right now you download the code, but it's totally usable and runnable.


00:04:35.000 --> 00:04:37.000
So I think it's worth checking out.


00:04:37.000 --> 00:04:39.000
But it's -- oh, gosh, it's new.


00:04:39.000 --> 00:04:42.000
>> You probably could pip install with a git.


00:04:42.000 --> 00:04:44.000
>> Oh, yeah, with the git plus, exactly.


00:04:44.000 --> 00:04:46.000
>> Yeah, the git plus, exactly.


00:04:46.000 --> 00:04:47.000
>> I forgot about that.


00:04:47.000 --> 00:04:49.000
So you can do -- yeah.


00:04:49.000 --> 00:04:53.000
So I guess, Paul, people are using this.


00:04:53.000 --> 00:04:54.000
At least I am already.


00:04:54.000 --> 00:05:00.000
So maybe like a little -- maybe I'll do a merge request to add the readme to say how to install it for now.


00:05:00.000 --> 00:05:02.000
So cool fun.


00:05:02.000 --> 00:05:03.000
>> Yeah, nice.


00:05:03.000 --> 00:05:09.000
And prior guest on the show, Seth Michael Larson says, "Whoa, packet capture files.


00:05:09.000 --> 00:05:10.000
Is that the extension you're looking for?


00:05:10.000 --> 00:05:11.000
That's awesome.


00:05:11.000 --> 00:05:12.000
I want to check that out."


00:05:12.000 --> 00:05:13.000
>> Yeah.


00:05:13.000 --> 00:05:18.000
>> And Jeff out in the audience says, "Does it support time zones?"


00:05:18.000 --> 00:05:26.000
It does have a time zone display feature, but I don't know if the sort considers time zones or not.


00:05:26.000 --> 00:05:35.000
>> Well, my thing is going to be that they're going to be a little off anyway because sometimes the different --


00:05:35.000 --> 00:05:41.000
I've got log files getting generated by multiple computers that are the time stamps off by a little bit.


00:05:41.000 --> 00:05:42.000
But it's close.


00:05:42.000 --> 00:05:45.000
It's usually close enough to line them up.


00:05:45.000 --> 00:05:46.000
>> Close enough.


00:05:46.000 --> 00:05:54.000
Yeah, I do stuff like this as well, like for all the talk Python web properties.


00:05:54.000 --> 00:06:01.000
You get lots of requests, and the NGINX files have like a two-week rolling average.


00:06:01.000 --> 00:06:08.000
The most recent one is a straight log file, but the rest are gzipped by day.


00:06:08.000 --> 00:06:09.000
>> Oh, my God.


00:06:09.000 --> 00:06:10.000
>> Okay.


00:06:10.000 --> 00:06:16.000
So I have a Python script that downloads all of those, unzips the ones that are zipped, puts them all together,


00:06:16.000 --> 00:06:23.000
then loads all of those files, sorts them by time stamp, and then like creates one super log file,


00:06:23.000 --> 00:06:25.000
maybe appending onto a previous one.


00:06:25.000 --> 00:06:31.000
So you get single log text log files that are the full month, month by month for analytics


00:06:31.000 --> 00:06:36.000
because we turned off Google Analytics and all sorts of other things because those are evil.


00:06:36.000 --> 00:06:45.000
You still want to know how many requests were there to this page or to this episode page or stuff like that.


00:06:45.000 --> 00:06:47.000
Those kinds of things are relevant.


00:06:47.000 --> 00:06:50.000
So yeah, this looks interesting.


00:06:50.000 --> 00:06:53.000
I had to write a bunch of code to do similar stuff.


00:06:53.000 --> 00:06:56.000
For 14 log files, you wouldn't try to visualize them.


00:06:56.000 --> 00:07:03.000
I just want to turn them into one mega log file so that I can run analytics across them.


00:07:03.000 --> 00:07:09.000
>> It's not on this readme, but I think when I was looking at it, I think there's recent stuff being done,


00:07:09.000 --> 00:07:11.000
and I think that you can pass it gzip files.


00:07:11.000 --> 00:07:14.000
I think it pulls them out.


00:07:14.000 --> 00:07:15.000
>> It seems reasonable.


00:07:15.000 --> 00:07:18.000
Those are frequent formats, I suppose.


00:07:18.000 --> 00:07:20.000
>> Anyway.


00:07:20.000 --> 00:07:21.000
>> All right.


00:07:21.000 --> 00:07:22.000
Good find.


00:07:22.000 --> 00:07:25.000
People in the audience like it as well.


00:07:25.000 --> 00:07:31.000
This next one comes to us from Hugo VK, and not sent in.


00:07:31.000 --> 00:07:32.000
I just discovered it, I believe.


00:07:32.000 --> 00:07:35.000
It says, "Hello, Python library maintainers."


00:07:35.000 --> 00:07:43.000
So if you have a PyPI thing, if you twine or upload those types of things,


00:07:43.000 --> 00:07:49.000
you probably want to pay attention because everyone was so good at finding bugs last time


00:07:49.000 --> 00:07:53.000
in the Python 3.11 release candidate.


00:07:53.000 --> 00:07:56.000
The third and final release candidate is now out.


00:07:56.000 --> 00:07:57.000
Please give it a spin.


00:07:57.000 --> 00:08:03.000
It's your last chance to find significant problems, critical problems.


00:08:03.000 --> 00:08:10.000
And goes on to point out, "Here is a nice article on how to test it, how you can get the release candidate,


00:08:10.000 --> 00:08:14.000
and basically how do you test your libraries with this?"


00:08:14.000 --> 00:08:22.000
And it goes through, like, how do you set up a GitHub action so that it will use the 3.12 pre-release, right?


00:08:22.000 --> 00:08:24.000
How do you do it from Dead Snakes?


00:08:24.000 --> 00:08:29.000
How do you do it for Travis CI or other CIs and different things in here?


00:08:29.000 --> 00:08:30.000
So that's cool.


00:08:30.000 --> 00:08:33.000
That will help some people set it up into their CI.


00:08:33.000 --> 00:08:36.000
There's also a big, long discussion here.


00:08:36.000 --> 00:08:40.000
So Thomas Worters points out that release candidate 3 is here.


00:08:40.000 --> 00:08:49.000
As a reminder, until the final release of 3.12.0, the release 3.12 branch is set up


00:08:49.000 --> 00:08:52.000
so the release manager has to merge the changes, right?


00:08:52.000 --> 00:08:54.000
So reach out.


00:08:54.000 --> 00:09:00.000
At this point, unless something critical comes up, it should really only be documentation.


00:09:00.000 --> 00:09:03.000
Other changes will be pushed to 3.12.1.


00:09:03.000 --> 00:09:08.000
And somewhere in here, there is--yeah.


00:09:08.000 --> 00:09:10.000
The intent--this is exciting.


00:09:10.000 --> 00:09:16.000
The intent is for the final release of 3.12.0 scheduled for Monday, October 2nd.


00:09:16.000 --> 00:09:19.000
That is, like, the coming Monday.


00:09:19.000 --> 00:09:26.000
Unless you--if you're on top of your Python Bytes playlist, don't let that thing fall behind.


00:09:26.000 --> 00:09:31.000
Then the coming Monday, October 2nd, is going to be when this thing releases.


00:09:31.000 --> 00:09:32.000
So that's pretty excellent.


00:09:32.000 --> 00:09:39.000
I guess bringing back to the first part, this is--basically, you have a couple days to make sure


00:09:39.000 --> 00:09:44.000
that your library will have no hiccups when Python 3.11 ships.


00:09:44.000 --> 00:09:46.000
So--or, see, 3.12.


00:09:46.000 --> 00:09:47.000
I kind of get used to saying 3.12.


00:09:47.000 --> 00:09:52.000
When that ships in a week, you want to make sure that your stuff just works.


00:09:52.000 --> 00:09:55.000
So here's your chance and a few steps on how to do that.


00:09:55.000 --> 00:09:58.000
Yeah, because you know how nice people are in GitHub.


00:09:58.000 --> 00:09:59.000
You'll get issues right away.


00:09:59.000 --> 00:10:03.000
"Hey, your stuff doesn't work on 3.12."


00:10:03.000 --> 00:10:09.000
You might even get, like, some hot October amazingness, like, "Hey, you were using the wrong preposition here.


00:10:09.000 --> 00:10:10.000
I changed it."


00:10:10.000 --> 00:10:14.000
Like, "Well, that was not wrong, but this is not a real commit."


00:10:14.000 --> 00:10:18.000
Seth is back to say, "Highly recommend the setup Python allow prereleases feature.


00:10:18.000 --> 00:10:25.000
That lets you set up a forever prerelease testing job if you use Python version 3.x."


00:10:25.000 --> 00:10:27.000
That's pretty good advice there.


00:10:27.000 --> 00:10:29.000
Yeah.


00:10:29.000 --> 00:10:31.000
Cool.


00:10:31.000 --> 00:10:32.000
Neat.


00:10:32.000 --> 00:10:33.000
I don't think I use that at all, so check it out.


00:10:33.000 --> 00:10:36.000
Well, now you know you can.


00:10:36.000 --> 00:10:37.000
All right.


00:10:37.000 --> 00:10:39.000
What else you got that is exciting for us?


00:10:39.000 --> 00:10:41.000
What other good advice do you have?


00:10:41.000 --> 00:10:42.000
What do I got?


00:10:42.000 --> 00:10:45.000
I got--oh, good advice.


00:10:45.000 --> 00:10:50.000
I think I have questionable advice, but I like this pattern.


00:10:50.000 --> 00:10:58.000
So I'm linking to James' coffee blog with the Python dictionary dispatch pattern.


00:10:58.000 --> 00:11:05.000
And I just like this because I don't know if--it's not discussed much in, like, beginning teaching Python stuff.


00:11:05.000 --> 00:11:09.000
But, you know, if you're a C programmer, use jump tables.


00:11:09.000 --> 00:11:13.000
Or maybe you shouldn't use jump tables, but jump tables are fun in C.


00:11:13.000 --> 00:11:18.000
And you can kind of use them in Python, too, but they're a little bit easier to use.


00:11:18.000 --> 00:11:21.000
You just have dictionaries.


00:11:21.000 --> 00:11:25.000
Dictionaries can store anything, and they can include functions.


00:11:25.000 --> 00:11:32.000
So he has an example of just add, subtract, and multiply, which you couldn't really use for that, but it's just an example.


00:11:32.000 --> 00:11:41.000
And I kind of forget that you can throw lambdas in because you can assign--lambdas have a value, so you can put a lambda in as a function.


00:11:41.000 --> 00:11:48.000
But you can use a function also, and just--then you can call them later.


00:11:48.000 --> 00:11:53.000
So you could just dereference the--or dereference--we don't call it like that.


00:11:53.000 --> 00:12:00.000
You look up the element in the dictionary and then actually just call it with parameters, and it works.


00:12:00.000 --> 00:12:04.000
So kind of a fun thing to do in Python.


00:12:04.000 --> 00:12:12.000
A little bit of a--he said as part of a VisionScript programming language does that.


00:12:12.000 --> 00:12:13.000
Interesting.


00:12:13.000 --> 00:12:19.000
But, I mean, there's a lot--there are times where you just have lots of things that you're switching on,


00:12:19.000 --> 00:12:24.000
and an easy way to do the switch is just to have a dictionary lookup.


00:12:24.000 --> 00:12:27.000
So.


00:12:27.000 --> 00:12:28.000
Yeah, exactly.


00:12:28.000 --> 00:12:30.000
It is pretty interesting.


00:12:30.000 --> 00:12:42.000
It's a--traditionally it has been a way to do switch statements, which at the time it was pretty much all you had to work with, right?


00:12:42.000 --> 00:12:49.000
Since then, we've had the match statement added to the language, right, which is a little bit better.


00:12:49.000 --> 00:12:56.000
So not switch, but match because it's this whole parser mechanism on top of just the switch statement.


00:12:56.000 --> 00:13:02.000
But people used to traditionally say, "Okay, well, we'll just make a dictionary," and then your case is the key,


00:13:02.000 --> 00:13:06.000
and then what you do is the function that gets returned from that.


00:13:06.000 --> 00:13:17.000
One thing that's really missing from that pattern, that dictionary dispatch pattern, is that the default case gets clunky looking, right?


00:13:17.000 --> 00:13:19.000
Like if none of the cases match, then what happens?


00:13:19.000 --> 00:13:25.000
Like you just get none and exception, like none type is not callable or some weird thing like that, right?


00:13:25.000 --> 00:13:27.000
Oh, yeah, you do.


00:13:27.000 --> 00:13:29.000
So you could upgrade it.


00:13:29.000 --> 00:13:37.000
You could upgrade it with a default dict where the default dict returns the default case, right?


00:13:37.000 --> 00:13:42.000
For a while, I don't remember when I added this, but I added switchlang, which was fun.


00:13:42.000 --> 00:13:51.000
And switchlang uses context managers to simulate a switch with a default case sort of thing.


00:13:51.000 --> 00:14:00.000
Seth is pointing out, if you use get instead of a dictionary lookup, you can give it a default.


00:14:00.000 --> 00:14:08.000
You can, but you got to give it the default every time you use it, which is kind of -- you can, but it is a little bit weird, right?


00:14:08.000 --> 00:14:13.000
That's why the default dict makes it a little clearer because if you're going to use it more than once -- I don't know.


00:14:13.000 --> 00:14:15.000
If you use it more than once, it gets janky, right?


00:14:15.000 --> 00:14:21.000
So I've used this, and I don't put a fall through.


00:14:21.000 --> 00:14:24.000
But the reason is because it's all my code.


00:14:24.000 --> 00:14:29.000
It's all -- I don't -- it isn't something that's coming in from the outside world.


00:14:29.000 --> 00:14:34.000
And I have test cases around all paths.


00:14:34.000 --> 00:14:37.000
Right, so you know there's not going to be a missing case.


00:14:37.000 --> 00:14:39.000
And if you do an exception, it's probably a good idea.


00:14:39.000 --> 00:14:46.000
But it's not something you like ask a user, which function would you like to call and then, you know, pass it through.


00:14:46.000 --> 00:14:47.000
>> Indeed.


00:14:47.000 --> 00:14:48.000
>> Yeah, don't do that.


00:14:48.000 --> 00:14:51.000
Anyway, I -- oh, reason why I wanted to bring it up.


00:14:51.000 --> 00:14:58.000
Not just because -- I didn't want to bring this up because I wanted more people to use dictionary dispatch.


00:14:58.000 --> 00:14:59.000
You don't have to do that.


00:14:59.000 --> 00:15:04.000
What I brought it up for, which is -- it's still kind of cool to reference just to let people know you can do it.


00:15:04.000 --> 00:15:07.000
But this guy's got a blog role.


00:15:07.000 --> 00:15:08.000
How cool is that?


00:15:08.000 --> 00:15:10.000
When's the last time you've seen a blog role?


00:15:10.000 --> 00:15:12.000
>> Dude, a blog role.


00:15:12.000 --> 00:15:13.000
Yes.


00:15:13.000 --> 00:15:15.000
>> Should we bring blog roles back?


00:15:15.000 --> 00:15:16.000
I don't know.


00:15:16.000 --> 00:15:17.000
>> Maybe.


00:15:17.000 --> 00:15:20.000
I don't know.


00:15:20.000 --> 00:15:21.000
>> Anyway.


00:15:21.000 --> 00:15:23.000
>> That was when your blog was your little home on the internet.


00:15:23.000 --> 00:15:24.000
>> Yeah.


00:15:24.000 --> 00:15:25.000
>> Yeah, yeah.


00:15:25.000 --> 00:15:26.000
How interesting.


00:15:26.000 --> 00:15:29.000
>> There's no like hit counter, though.


00:15:29.000 --> 00:15:30.000
So, you know.


00:15:30.000 --> 00:15:32.000
>> Oh, does it have a little dig?


00:15:32.000 --> 00:15:33.000
Like a little digging?


00:15:33.000 --> 00:15:35.000
This part is under construction, Digger.


00:15:35.000 --> 00:15:36.000
>> That would be cool.


00:15:36.000 --> 00:15:38.000
No, sorry, James, if you're listening.


00:15:38.000 --> 00:15:39.000
We're not dissing you.


00:15:39.000 --> 00:15:40.000
It's just fun.


00:15:40.000 --> 00:15:41.000
>> No, no, no.


00:15:41.000 --> 00:15:42.000
It's awesome.


00:15:42.000 --> 00:15:43.000
It's nostalgia is what it is.


00:15:43.000 --> 00:15:44.000
>> Yeah.


00:15:44.000 --> 00:15:45.000
>> It is.


00:15:45.000 --> 00:15:47.000
>> So, anyway.


00:15:47.000 --> 00:15:48.000
>> All right.


00:15:48.000 --> 00:15:52.000
Back to the Seth Michael Larson show.


00:15:52.000 --> 00:15:53.000
>> Yeah.


00:15:53.000 --> 00:16:00.000
>> So, his article is very timely that he just put out a little couple weeks ago.


00:16:00.000 --> 00:16:06.000
But I finally got around to featuring it now, given everything that's coming together.


00:16:06.000 --> 00:16:09.000
Called "Visualizing the CPython Release Process."


00:16:09.000 --> 00:16:11.000
So, it was awesome.


00:16:11.000 --> 00:16:22.000
He's the Python security manager, security dev, as opposed to Mike Fiedler, who is the PyPI.


00:16:22.000 --> 00:16:25.000
Both of these roles are somewhat new, which are awesome, right?


00:16:25.000 --> 00:16:30.000
This one is made possible by funding from OpenSSF, Alpha Omega Project.


00:16:30.000 --> 00:16:32.000
So, very, very cool.


00:16:32.000 --> 00:16:37.000
And Seth is pointing out, "Security Developer in Residence" is the official title.


00:16:37.000 --> 00:16:38.000
Yes.


00:16:38.000 --> 00:16:39.000
Right?


00:16:39.000 --> 00:16:40.000
Right?


00:16:40.000 --> 00:16:41.000
There.


00:16:41.000 --> 00:16:44.000
And then we also have the developer in residence, which is Lukas Schlenker.


00:16:44.000 --> 00:16:50.000
So, anyway, they planned out, or he went out and wrote out what it actually looks like


00:16:50.000 --> 00:16:51.000
to release Python.


00:16:51.000 --> 00:16:59.000
And boy, oh boy, this is more than just some build CI at GitHub to make sure that the wheels


00:16:59.000 --> 00:17:01.000
or the binaries get built.


00:17:01.000 --> 00:17:04.000
So, here's the process.


00:17:04.000 --> 00:17:06.000
See how close I can get this right.


00:17:06.000 --> 00:17:11.000
And also, Seth is going to be on Talk Python on Thursday in terms of live stream.


00:17:11.000 --> 00:17:17.000
And then a little bit later, we'll talk about this and a bunch of other security things.


00:17:17.000 --> 00:17:22.000
Anyway, so start out, freeze the release branch.


00:17:22.000 --> 00:17:31.000
And then the CPython upstream repo goes along and the release manager forks the repo, takes


00:17:31.000 --> 00:17:35.000
that, feeds it into the release tool manually.


00:17:35.000 --> 00:17:38.000
All these things have a, there's a bunch of colors in this diagram.


00:17:38.000 --> 00:17:45.000
So, each color, there's a legend, like the yellow ones are human tasks, the blue ones


00:17:45.000 --> 00:17:47.000
are release artifacts.


00:17:47.000 --> 00:17:54.000
Interesting from a security perspective, there's a source of risk is red and so on.


00:17:54.000 --> 00:18:01.000
All right, so the release tool goes along and git commit, git tags things to set the


00:18:01.000 --> 00:18:06.000
tag to version 3.12.0.


00:18:06.000 --> 00:18:10.000
Also, it creates the source ball, the tarballs from that.


00:18:10.000 --> 00:18:12.000
And where do we go now?


00:18:12.000 --> 00:18:15.000
We go over here to Azure Pipelines for the Windows people.


00:18:15.000 --> 00:18:18.000
The Azure Pipeline, there's a Windows release manager.


00:18:18.000 --> 00:18:24.000
The Azure Pipeline over there builds out the Windows embeddable packages, the Windows installers,


00:18:24.000 --> 00:18:29.000
updates NuGet, Windows Store, maybe even Winget, I don't know about that.


00:18:29.000 --> 00:18:34.000
There's also an equivalent for the macOS release manager, who does the Mac build and


00:18:34.000 --> 00:18:35.000
Mac installer.


00:18:35.000 --> 00:18:42.000
And all of these things come back into testing artifacts and creates the, they all get a


00:18:42.000 --> 00:18:44.000
GPG signature.


00:18:44.000 --> 00:18:47.000
And then we get everything signed and ready to go.


00:18:47.000 --> 00:18:49.000
That gets dropped on python.org.


00:18:49.000 --> 00:18:50.000
Pretty cool, huh?


00:18:50.000 --> 00:18:52.000
- That is, wow.


00:18:52.000 --> 00:18:53.000
- Yeah.


00:18:53.000 --> 00:18:54.000
- It's a lot.


00:18:54.000 --> 00:19:01.000
- Last year, they live streamed this and all the people involved were on Zoom, I think


00:19:01.000 --> 00:19:02.000
it was, I'm not sure.


00:19:02.000 --> 00:19:05.000
They live streamed to YouTube though.


00:19:05.000 --> 00:19:08.000
And you could actually see step by step.


00:19:08.000 --> 00:19:11.000
But I don't know how well people really knew what was happening.


00:19:11.000 --> 00:19:14.000
You could be like, "All right, we're on step five, everyone.


00:19:14.000 --> 00:19:15.000
Let's go, let's go."


00:19:15.000 --> 00:19:20.000
So I think if you're going to watch that live stream, if it exists, I'm not sure it does.


00:19:20.000 --> 00:19:24.000
People in the audience, if they know it's going to be live streamed, shoot out a message.


00:19:24.000 --> 00:19:26.000
Yeah.


00:19:26.000 --> 00:19:28.000
- Okay, so it's too early, too...


00:19:28.000 --> 00:19:32.000
- Yeah, it's too early to release this year, but maybe next year we could have this graph,


00:19:32.000 --> 00:19:36.000
but animated with little things, what's going on.


00:19:36.000 --> 00:19:41.000
- Yeah, have little video cutouts of people in the different sections and they're talking.


00:19:41.000 --> 00:19:42.000
Yeah, that'd be fun.


00:19:42.000 --> 00:19:43.000
Why not?


00:19:43.000 --> 00:19:44.000
- Why not?


00:19:44.000 --> 00:19:45.000
- No, this is cool.


00:19:45.000 --> 00:19:47.000
And then there's more about...


00:19:47.000 --> 00:19:53.000
There's more of a description below that Seth put together, as well as the sources of supply


00:19:53.000 --> 00:19:58.000
and examples of that happening outside of Python primarily.


00:19:58.000 --> 00:20:00.000
So pretty cool.


00:20:00.000 --> 00:20:02.000
Thanks for the visualization, Seth.


00:20:02.000 --> 00:20:03.000
This is great.


00:20:03.000 --> 00:20:07.000
- Yeah, this is cool.


00:20:07.000 --> 00:20:08.000
Nice.


00:20:08.000 --> 00:20:09.000
- Yep, over to you.


00:20:09.000 --> 00:20:10.000
Oh, wait, that's it.


00:20:10.000 --> 00:20:12.000
Over to you for extras.


00:20:12.000 --> 00:20:13.000
- We are in extras.


00:20:13.000 --> 00:20:16.000
Do you want to do your extras first or...?


00:20:16.000 --> 00:20:17.000
- Yeah, sure.


00:20:17.000 --> 00:20:18.000
They're easy.


00:20:19.000 --> 00:20:23.000
I'm going to be at PyBay over in San Francisco October 8th.


00:20:23.000 --> 00:20:27.000
So all I want to say is, if you're around, come say hi.


00:20:27.000 --> 00:20:30.000
That's primarily the reason that I go to conferences.


00:20:30.000 --> 00:20:36.000
I don't go to that many talks or that many other things, but these kind of get-to-know people


00:20:36.000 --> 00:20:38.000
and open spaces and so on.


00:20:38.000 --> 00:20:44.000
So this is all one giant open space, this PyBay thing.


00:20:44.000 --> 00:20:45.000
- Yeah, I went last year.


00:20:45.000 --> 00:20:46.000
It was fun.


00:20:46.000 --> 00:20:48.000
- I'm going to bounce back and forth and do every other...


00:20:48.000 --> 00:20:50.000
- Yeah, absolutely.


00:20:50.000 --> 00:20:54.000
The HTMX plus Django course is going really well.


00:20:54.000 --> 00:20:55.000
People are loving it.


00:20:55.000 --> 00:21:00.000
So if you want to do HTMX with your Django code, it will make it so much better.


00:21:00.000 --> 00:21:04.000
Like, you don't have to do front-end frameworks unless you really, really want to.


00:21:04.000 --> 00:21:08.000
So HTMX is awesome.


00:21:08.000 --> 00:21:09.000
This is how you use it with Django.


00:21:09.000 --> 00:21:10.000
Each framework has its kind of own thing.


00:21:10.000 --> 00:21:15.000
The reason I bring this up is we are closing in at the end of the early bird discount.


00:21:15.000 --> 00:21:22.000
So if you think you're going to get it anyway, you've got until September 29th, until the price goes up.


00:21:22.000 --> 00:21:23.000
- A few more days.


00:21:23.000 --> 00:21:24.000
- So check that out.


00:21:24.000 --> 00:21:25.000
Yeah, that's it for my extras.


00:21:25.000 --> 00:21:26.000
- Nice.


00:21:26.000 --> 00:21:30.000
I'll try to go through mine a little quickly.


00:21:30.000 --> 00:21:39.000
Anyway, of course, the complete pytest course, I just updated part three has started.


00:21:39.000 --> 00:21:44.000
It's not part three, part two I've started with chapter seven, testing strategy.


00:21:44.000 --> 00:21:47.000
So that's going along strong.


00:21:47.000 --> 00:21:51.000
I wanted to mention some podcast names.


00:21:51.000 --> 00:21:55.000
So, of course, you're here with Python Bytes, that's us.


00:21:55.000 --> 00:22:03.000
And my other one, a couple others, Python People, I've got a lot of great interviews coming up.


00:22:03.000 --> 00:22:07.000
And then Test & Code is now Python Test.


00:22:07.000 --> 00:22:11.000
So you get the just here we got Python Bytes, Python People, and Python Test.


00:22:11.000 --> 00:22:14.000
And then now Talk Python to Me is the odd man out.


00:22:14.000 --> 00:22:17.000
So we have to get, you got to change your name to Python Talk.


00:22:17.000 --> 00:22:18.000
- Python Talk.


00:22:18.000 --> 00:22:19.000
Python Talk.


00:22:19.000 --> 00:22:20.000
- Anyway.


00:22:20.000 --> 00:22:21.000
- I can do that.


00:22:21.000 --> 00:22:22.000
I can change it.


00:22:22.000 --> 00:22:24.000
I can change it to whatever I want.


00:22:24.000 --> 00:22:25.000
- It's working great.


00:22:25.000 --> 00:22:26.000
Don't change it.


00:22:26.000 --> 00:22:28.000
If it's not broken, don't fix it.


00:22:28.000 --> 00:22:30.000
- No, it's going pretty good.


00:22:30.000 --> 00:22:35.000
Speaking of broken, let's talk about the final thing, a joke here.


00:22:35.000 --> 00:22:36.000
- Okay.


00:22:36.000 --> 00:22:37.000
- Maybe this has happened to you.


00:22:37.000 --> 00:22:44.000
Here's a woman developer trying to sleep, but her mind is running.


00:22:44.000 --> 00:22:46.000
And she's like, "Okay, mind, stop.


00:22:46.000 --> 00:22:47.000
I need to sleep.


00:22:47.000 --> 00:22:48.000
Leave me alone."


00:22:48.000 --> 00:22:50.000
There's like a little conversation.


00:22:50.000 --> 00:22:53.000
Brain, woman in bed, right?


00:22:53.000 --> 00:22:55.000
Says, "Hey, are you sleeping?"


00:22:55.000 --> 00:22:56.000
"Yes."


00:22:56.000 --> 00:22:58.000
"Now shut up," she says to her brain.


00:22:58.000 --> 00:23:01.000
The brain says, "I know how to fix the bug on line 255."


00:23:01.000 --> 00:23:02.000
Boom.


00:23:02.000 --> 00:23:03.000
Eyes wide open.


00:23:03.000 --> 00:23:04.000
No more sleep.


00:23:04.000 --> 00:23:07.000
"I can't sleep."


00:23:07.000 --> 00:23:08.000
We've probably all been there, right?


00:23:08.000 --> 00:23:09.000
You're just like, "Somewhere else.


00:23:09.000 --> 00:23:11.000
I know what it is.


00:23:11.000 --> 00:23:13.000
I know what it is."


00:23:13.000 --> 00:23:15.000
"Forgot the database index.


00:23:15.000 --> 00:23:16.000
No."


00:23:16.000 --> 00:23:20.000
- It's one of the downsides, but also one of the upsides of having a setup for


00:23:20.000 --> 00:23:24.000
working from home so that you can just run in and actually fix it and then go


00:23:24.000 --> 00:23:26.000
back to sleep.


00:23:26.000 --> 00:23:28.000
- Or you can sleep at your desk, and then when this happens, you just wake back up


00:23:28.000 --> 00:23:31.000
and keep typing.


00:23:31.000 --> 00:23:32.000
Okay, there we go.


00:23:32.000 --> 00:23:35.000
- Yeah.


00:23:35.000 --> 00:23:36.000
- Awesome.


00:23:36.000 --> 00:23:38.000
- Well, I mean, I have a standing desk.


00:23:38.000 --> 00:23:41.000
Why not a sleeping desk?


00:23:41.000 --> 00:23:42.000
- Yeah, why?


00:23:42.000 --> 00:23:45.000
You know, they go from sitting to standing.


00:23:45.000 --> 00:23:48.000
It could just go one more level, and you're like a lazy boy just drops you into


00:23:48.000 --> 00:23:50.000
like sleeping position.


00:23:50.000 --> 00:23:51.000
- Yeah, with a lazy boy.


00:23:51.000 --> 00:23:54.000
- White noise kicks in as it gets below a certain height.


00:23:54.000 --> 00:23:57.000
- Yeah, monitor goes up to the ceiling.


00:23:57.000 --> 00:23:58.000
- Exactly.


00:23:58.000 --> 00:24:00.000
- Yeah, be good.


00:24:00.000 --> 00:24:04.000
- Anyway, well, awesome podcast again, Michael.


00:24:04.000 --> 00:24:06.000
- Yeah, thank you.


00:24:06.000 --> 00:24:09.000
Thank you, as always, and thanks, everyone, for listening and some of you for


00:24:09.000 --> 00:24:11.000
attending.


00:24:11.000 --> 00:24:12.000
- Bye.


00:24:12.000 --> 00:24:13.000
- Bye.


00:24:13.000 --> 00:24:13.820
Bye.


00:24:13.820 --> 00:24:19.800
[ Silence ]

