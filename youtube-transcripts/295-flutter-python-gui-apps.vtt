WEBVTT

00:00:00.000 --> 00:00:02.400
- Hey everybody.


00:00:02.400 --> 00:00:05.280
- Hey Brian.


00:00:05.280 --> 00:00:06.120
- Yeah, it's good.


00:00:06.120 --> 00:00:07.760
It's good to have you back.


00:00:07.760 --> 00:00:10.040
You're on vacation.


00:00:10.040 --> 00:00:11.040
- I'm back.


00:00:11.040 --> 00:00:12.920
I'm rested, but not rested.


00:00:12.920 --> 00:00:14.560
You know, sometimes you have a,


00:00:14.560 --> 00:00:16.880
go on vacation, you get back,


00:00:16.880 --> 00:00:19.160
you're like, man, I need a vacation from my vacation.


00:00:19.160 --> 00:00:20.240
I'm wiped.


00:00:20.240 --> 00:00:21.080
- Yeah.


00:00:21.080 --> 00:00:21.900
- But it was fun.


00:00:21.900 --> 00:00:22.740
We had a lot of good times.


00:00:22.740 --> 00:00:24.720
- International travel, do that to you.


00:00:24.720 --> 00:00:29.240
So I guess let's get started with the show.


00:00:29.240 --> 00:00:30.880
All right, let's do it.


00:00:30.880 --> 00:00:32.460
- Hello and welcome to Python Bytes


00:00:32.460 --> 00:00:34.840
where we deliver Python news and headlines


00:00:34.840 --> 00:00:36.160
directly to your earbuds.


00:00:36.160 --> 00:00:41.000
This is episode 295 recorded August 4th, 2022.


00:00:41.000 --> 00:00:42.800
And I am Brian Okken.


00:00:42.800 --> 00:00:43.900
- I'm Michael Kennedy.


00:00:43.900 --> 00:00:47.580
- Well, like we said, it's good to have you back.


00:00:47.580 --> 00:00:50.800
It's kind of fun to do this show.


00:00:50.800 --> 00:00:51.960
- Good to be back.


00:00:51.960 --> 00:00:53.920
For people out there listening,


00:00:53.920 --> 00:00:55.920
we kind of batched some stuff up


00:00:55.920 --> 00:00:58.160
so that you could be on vacation for a couple of weeks,


00:00:58.160 --> 00:01:02.040
but now our news items will be more closely related in time


00:01:02.040 --> 00:01:04.000
to the release of the episode.


00:01:04.000 --> 00:01:05.680
- Oh, we didn't do that.


00:01:05.680 --> 00:01:06.520
It was live.


00:01:06.520 --> 00:01:09.320
- No, it was always live, always live.


00:01:09.320 --> 00:01:10.160
- Yeah.


00:01:10.160 --> 00:01:16.080
Well, I'm glad you got back quickly.


00:01:16.080 --> 00:01:20.080
And speaking of fast, you've got a fast story for us.


00:01:20.080 --> 00:01:22.880
- Yeah, how about we make things faster?


00:01:22.880 --> 00:01:27.320
So I wanna talk about Flask and Court.


00:01:27.320 --> 00:01:30.040
So Flask is, Flask is one of the most popular


00:01:30.040 --> 00:01:31.420
web frameworks out there.


00:01:31.420 --> 00:01:36.420
Cort is the API compatible async version of Flask,


00:01:36.420 --> 00:01:40.960
originally done by Philip Jones.


00:01:40.960 --> 00:01:45.300
But I think that Philip has joined David Lord


00:01:45.300 --> 00:01:49.120
in at least in support of the Pallets organization.


00:01:49.120 --> 00:01:51.680
I feel like Flask and Cort are working much closer


00:01:51.680 --> 00:01:53.560
together these days.


00:01:53.560 --> 00:01:55.660
So I don't know exactly what the relationship is,


00:01:55.660 --> 00:01:58.980
but Flask and Core are very closely tied together right now.


00:01:58.980 --> 00:02:02.880
What I wanna talk about is routing,


00:02:02.880 --> 00:02:06.100
or for those UK friends, rooting if you prefer,


00:02:06.100 --> 00:02:08.960
but the idea of taking a URL


00:02:08.960 --> 00:02:11.400
and figuring out what function to call.


00:02:11.400 --> 00:02:15.440
All right, so what you do is you set up in Flask,


00:02:15.440 --> 00:02:20.440
you say @app.get, app.post, and you give it URL patterns.


00:02:20.440 --> 00:02:23.000
Sometimes that's just like slash about,


00:02:23.000 --> 00:02:25.800
Other times it's like slash categories,


00:02:25.800 --> 00:02:30.520
bracket category name, or even more general stuff,


00:02:30.520 --> 00:02:31.940
like where you might say,


00:02:31.940 --> 00:02:35.640
it's category, maybe a category ID


00:02:35.640 --> 00:02:38.120
and it has to be an integer, so convert that for me.


00:02:38.120 --> 00:02:42.480
Or I wanna just capture arbitrary path,


00:02:42.480 --> 00:02:47.280
arbitrary URLs slash edit, whatever that happens to be.


00:02:47.280 --> 00:02:50.400
So that's the idea of routing.


00:02:50.400 --> 00:02:54.000
And the whole article here, something,


00:02:54.000 --> 00:02:59.000
the big news is that Philip Jones has worked on VEXOIG,


00:02:59.000 --> 00:03:02.300
the HTTP router that is the foundation


00:03:02.300 --> 00:03:05.320
of doing the routing in Flask and Quart.


00:03:05.320 --> 00:03:08.700
And it's something like five times faster


00:03:08.700 --> 00:03:09.640
than it was before.


00:03:09.640 --> 00:03:11.760
I think five times the number.


00:03:11.760 --> 00:03:12.800
- Wow. - Much faster.


00:03:12.800 --> 00:03:16.280
So for very small little toy apps,


00:03:16.280 --> 00:03:19.880
if you have a couple of routes, whatever, it's no big deal.


00:03:19.880 --> 00:03:22.400
However, if you've got a production app,


00:03:22.400 --> 00:03:23.880
like say TalkByDone training,


00:03:23.880 --> 00:03:27.980
where you've got hundreds, at least hundreds of routes,


00:03:27.980 --> 00:03:28.880
when a URL comes in,


00:03:28.880 --> 00:03:31.560
you could spend a decent amount of time checking,


00:03:31.560 --> 00:03:34.560
is it get or is it post?


00:03:34.560 --> 00:03:36.160
Is it this URL?


00:03:36.160 --> 00:03:37.360
And actually this thing here,


00:03:37.360 --> 00:03:38.760
can we convert it to an integer?


00:03:38.760 --> 00:03:41.180
'Cause if not, that's a 404, it's a different route.


00:03:41.180 --> 00:03:43.880
And you know, like all the stuff that goes on there.


00:03:43.880 --> 00:03:46.760
So the way that it worked previously


00:03:46.760 --> 00:03:49.040
is it just, when you would specify these routes,


00:03:49.040 --> 00:03:54.040
like app.get/api/id,


00:03:54.040 --> 00:03:56.320
those types of things,


00:03:56.320 --> 00:03:58.400
it would just come up with a table that just says,


00:03:58.400 --> 00:04:02.840
okay, here's the get verb, here's the path,


00:04:02.840 --> 00:04:05.040
and here's the function that it goes to.


00:04:05.040 --> 00:04:06.680
And it was using regular expressions.


00:04:06.680 --> 00:04:11.680
So /api or /api and then /d+,


00:04:11.680 --> 00:04:15.680
the regular expression for a number.


00:04:15.680 --> 00:04:16.520
- Okay.


00:04:16.520 --> 00:04:19.000
- And the way it works is it just says,


00:04:19.000 --> 00:04:24.000
Okay, we're gonna run the verb test, the regex test,


00:04:24.000 --> 00:04:26.960
all those things one at a time, top to bottom.


00:04:26.960 --> 00:04:32.920
Well, Brian, I know you studied a lot of computer stuff.


00:04:32.920 --> 00:04:38.600
This is not something that's good that grows with time,


00:04:38.600 --> 00:04:41.960
right, as you add more of these, it's complexity.


00:04:41.960 --> 00:04:43.420
What is it, something like O of N,


00:04:43.420 --> 00:04:48.420
or maybe a little bit O of N squared, maybe?


00:04:48.860 --> 00:04:51.060
I'm not sure, something like that, where you're,


00:04:51.060 --> 00:04:52.300
'cause you're testing the verbs


00:04:52.300 --> 00:04:53.540
and you're testing the things, right?


00:04:53.540 --> 00:04:55.340
So as you get these larger and larger,


00:04:55.340 --> 00:04:58.500
you're like running through them every single request.


00:04:58.500 --> 00:05:02.600
And the world is full of interesting data structures


00:05:02.600 --> 00:05:04.340
and algorithms that you might consider.


00:05:04.340 --> 00:05:08.340
So the idea was, this is gonna get rewritten


00:05:08.340 --> 00:05:12.060
into something that's not just the sort of brute force test


00:05:12.060 --> 00:05:15.580
at top to bottom in the order that is defined here.


00:05:16.700 --> 00:05:20.280
And so I think one thing it's interesting the news


00:05:20.280 --> 00:05:23.300
that routing in Flask and Cort is five times faster.


00:05:23.300 --> 00:05:24.540
That's fantastic.


00:05:24.540 --> 00:05:26.340
But also just thinking about the algorithms.


00:05:26.340 --> 00:05:28.900
I think it's a cool problem solver,


00:05:28.900 --> 00:05:32.220
problem solving, you know, thing to go look at, right?


00:05:32.220 --> 00:05:33.860
An example.


00:05:33.860 --> 00:05:36.940
So Philip thought about different ways


00:05:36.940 --> 00:05:39.420
in which you might do this and how it works.


00:05:39.420 --> 00:05:43.820
So the first algorithm that he looked at was a Radix tree.


00:05:44.820 --> 00:05:47.940
And this is an interesting tree structure that gets defined


00:05:47.940 --> 00:05:52.220
where instead of having a table, you have all the verbs.


00:05:52.220 --> 00:05:57.220
And then under each verb, you've got the path pattern.


00:05:57.220 --> 00:06:00.220
- Okay.


00:06:00.220 --> 00:06:03.340
- And one of the things that's interesting here is


00:06:03.340 --> 00:06:06.300
they have a path type.


00:06:06.300 --> 00:06:09.220
So if you were building a CMS


00:06:09.220 --> 00:06:13.660
or something that would handle arbitrary URLs, right?


00:06:13.660 --> 00:06:15.940
So you could build, say, a database thing that says,


00:06:15.940 --> 00:06:18.840
here's a URL and here's the content to show for that URL.


00:06:18.840 --> 00:06:23.260
How do you express all the variations of that


00:06:23.260 --> 00:06:26.660
in the routing of Flask or other frameworks?


00:06:26.660 --> 00:06:30.660
Is you just say, it's a path type instead of an integer


00:06:30.660 --> 00:06:32.980
or something along those lines.


00:06:32.980 --> 00:06:34.780
All right, so there's kind of this wildcard thing


00:06:34.780 --> 00:06:36.480
that makes it a little bit harder.


00:06:36.480 --> 00:06:41.020
So you've got this get and you've got this post,


00:06:41.020 --> 00:06:44.520
You've got API, remember we had slash API


00:06:44.520 --> 00:06:47.600
and we had slash API slash ID.


00:06:47.600 --> 00:06:50.760
So what gets created is there's a get node in the tree,


00:06:50.760 --> 00:06:54.120
then an API node that if it matches exactly terminates


00:06:54.120 --> 00:06:57.680
but at that call, but if not, then it also has the,


00:06:57.680 --> 00:07:00.760
well, keep going and match the next part of the path


00:07:00.760 --> 00:07:01.600
as a number.


00:07:01.600 --> 00:07:02.860
And if that matches,


00:07:02.860 --> 00:07:04.960
then you're gonna get this next segment.


00:07:04.960 --> 00:07:07.360
Otherwise you'll go to the next part of the tree


00:07:07.360 --> 00:07:08.440
and cruise through it.


00:07:08.440 --> 00:07:09.260
What do you think of that?


00:07:09.260 --> 00:07:10.960
That looks cool, right?


00:07:10.960 --> 00:07:13.560
- Yeah, and also, I mean, yeah, it looks good


00:07:13.560 --> 00:07:18.560
and also faster 'cause you don't look at everything.


00:07:18.560 --> 00:07:20.440
- Right, exactly.


00:07:20.440 --> 00:07:21.600
You say, is it a get or post?


00:07:21.600 --> 00:07:24.000
Boom, you've like, you're down to like one segment


00:07:24.000 --> 00:07:25.960
then you're like, well, what's this next path?


00:07:25.960 --> 00:07:29.200
And you really quickly cruise through,


00:07:29.200 --> 00:07:33.280
cruise through the various possibilities.


00:07:33.280 --> 00:07:35.600
And this looks really great


00:07:35.600 --> 00:07:38.360
until you get down to this wild card thing.


00:07:38.360 --> 00:07:40.560
And it turns out with all the variations


00:07:40.560 --> 00:07:45.560
and whatnot of like the wildcard matching


00:07:45.560 --> 00:07:48.120
and the sub wildcard matching.


00:07:48.120 --> 00:07:50.600
It didn't really work that well.


00:07:50.600 --> 00:07:54.120
So, but one benefit is the performance


00:07:54.120 --> 00:07:59.120
is now described as O of N, which is pretty good.


00:07:59.120 --> 00:08:01.860
Better than N squared or something like that.


00:08:01.860 --> 00:08:04.040
- Yeah, or yeah.


00:08:04.040 --> 00:08:07.600
And N is the depth now, not the.


00:08:07.600 --> 00:08:09.120
- Right, and it's, that's very important.


00:08:09.120 --> 00:08:11.840
it's the depth rather than just the number,


00:08:11.840 --> 00:08:13.120
which is even better, right?


00:08:13.120 --> 00:08:14.200
Because--


00:08:14.200 --> 00:08:17.640
- I think I'm still confused if like,


00:08:17.640 --> 00:08:19.360
if they're all gets, for instance,


00:08:19.360 --> 00:08:22.280
if you like most of your API is retrieval,


00:08:22.280 --> 00:08:25.840
are they all gonna be falling into that wildcard thing then?


00:08:25.840 --> 00:08:27.080
- Yeah, I think they would,


00:08:27.080 --> 00:08:29.680
but then they would just be one,


00:08:29.680 --> 00:08:30.960
I think it'd be one more step.


00:08:30.960 --> 00:08:33.600
Like it splits pretty quick on the second part,


00:08:33.600 --> 00:08:36.680
but still it's not that relevant


00:08:36.680 --> 00:08:38.840
because that's that turned out to not work.


00:08:38.840 --> 00:08:42.480
what works is something I would have never,


00:08:42.480 --> 00:08:47.020
never thought should apply to this path finding,


00:08:47.020 --> 00:08:48.660
path determining algorithm.


00:08:48.660 --> 00:08:52.040
And that's a state machine.


00:08:52.040 --> 00:08:52.880
- Awesome.


00:08:52.880 --> 00:08:55.400
- Are you a fan of state machines?


00:08:55.400 --> 00:08:56.220
- Yes, I am.


00:08:56.220 --> 00:08:57.120
I love them.


00:08:57.120 --> 00:08:57.960
Yeah.


00:08:57.960 --> 00:08:59.800
- Yeah. State machines are pretty wild.


00:08:59.800 --> 00:09:02.420
You know, I'm in the current editing state.


00:09:02.420 --> 00:09:04.140
Now, what are my options?


00:09:04.140 --> 00:09:05.120
Where can I go from here?


00:09:05.120 --> 00:09:06.200
Things like that.


00:09:06.200 --> 00:09:08.180
So you define the same set of routes,


00:09:08.180 --> 00:09:09.840
but what you get is a state machine


00:09:09.840 --> 00:09:11.400
that has these transitions.


00:09:11.400 --> 00:09:14.500
And for example, state one says,


00:09:14.500 --> 00:09:18.100
if you go to API, we'll go to state two.


00:09:18.100 --> 00:09:19.980
Or if you do some wildcard slash edit,


00:09:19.980 --> 00:09:21.780
then the answer is you just do the edit,


00:09:21.780 --> 00:09:23.700
or you just do the true wildcard thing,


00:09:23.700 --> 00:09:26.740
and then you do some other step there, right?


00:09:26.740 --> 00:09:28.940
Pretty interesting.


00:09:28.940 --> 00:09:31.540
And then say for this API where it says go to state two,


00:09:31.540 --> 00:09:34.540
state two says, well, if there's nothing else,


00:09:34.540 --> 00:09:36.160
you've already gone through API,


00:09:36.160 --> 00:09:39.500
then you call the function create API you're looking for.


00:09:39.500 --> 00:09:42.000
Otherwise, if it's a number, go to state three


00:09:42.000 --> 00:09:44.200
and state three says, well, if that's it, then you're done.


00:09:44.200 --> 00:09:47.280
Otherwise you're in this wildcard state and so on.


00:09:47.280 --> 00:09:50.560
And the way that you kind of bounce between these states,


00:09:50.560 --> 00:09:52.040
it's pretty fascinating.


00:09:52.040 --> 00:09:57.040
- Yeah, and also like, how is this faster?


00:09:57.040 --> 00:10:00.800
- Exactly, yes, it doesn't.


00:10:00.800 --> 00:10:02.820
That's like I said, I would have never thought about it


00:10:02.820 --> 00:10:05.600
'cause it also doesn't seem faster.


00:10:05.600 --> 00:10:09.180
However, you get to the benchmarking section


00:10:09.180 --> 00:10:14.180
and it says, I think by having 20 routes here or something,


00:10:14.180 --> 00:10:18.120
it came out to be quite a bit faster.


00:10:18.120 --> 00:10:18.960
Let's see.


00:10:18.960 --> 00:10:24.760
Ratio of, this one says 50% better.


00:10:24.760 --> 00:10:26.760
I said five times and maybe it's not that much faster,


00:10:26.760 --> 00:10:30.720
but somewhere I know there's a five.


00:10:30.720 --> 00:10:31.920
There's gotta be, yeah, here we go.


00:10:31.920 --> 00:10:34.960
Factor up to five times speed increase.


00:10:34.960 --> 00:10:38.120
And the more routes you have, the faster,


00:10:38.120 --> 00:10:40.600
the bigger the increase is.


00:10:40.600 --> 00:10:43.280
So the more complicated and big your application is,


00:10:43.280 --> 00:10:45.920
the more it's going to benefit from this, right?


00:10:45.920 --> 00:10:48.760
I think it says that if you're looking at just


00:10:48.760 --> 00:10:52.320
like a toy example, you can run the benchmarks all you want.


00:10:52.320 --> 00:10:54.080
It's not gonna make any difference.


00:10:54.080 --> 00:10:56.640
But for realistic ones, it'll be quite a bit faster.


00:10:56.640 --> 00:10:59.040
So pretty cool.


00:10:59.040 --> 00:11:01.240
If you're using Flask record,


00:11:01.240 --> 00:11:03.080
be sure to use the latest version


00:11:03.080 --> 00:11:06.460
because the version that's coming out with this,


00:11:06.460 --> 00:11:08.660
'cause this is gonna make it a lot faster for you.


00:11:08.660 --> 00:11:11.300
And just an interesting example


00:11:11.300 --> 00:11:15.380
of how you might have a non-obvious solution to a problem,


00:11:15.380 --> 00:11:18.080
like a state machine for finding the URL matches.


00:11:18.080 --> 00:11:19.820
- Yeah.


00:11:19.820 --> 00:11:22.820
- And Brandon out there, he says,


00:11:22.820 --> 00:11:24.980
"I agree, I don't see how this is faster."


00:11:24.980 --> 00:11:28.220
Well, I hear you.


00:11:28.220 --> 00:11:29.060
- Yeah.


00:11:29.060 --> 00:11:30.020
- But the cool thing about computers


00:11:30.020 --> 00:11:32.340
is you push the button and then it does a thing


00:11:32.340 --> 00:11:35.780
and then, you know, right?


00:11:35.780 --> 00:11:37.980
It's not like you gotta have a theory


00:11:37.980 --> 00:11:41.420
and then you debate the theory and I guess it's measurable.


00:11:41.420 --> 00:11:43.420
- One of the interesting things around this also


00:11:43.420 --> 00:11:48.420
is that you can't assume much for Flask or Quart


00:11:48.420 --> 00:11:51.220
because there are frameworks


00:11:51.220 --> 00:11:52.940
that other people build up websites with.


00:11:52.940 --> 00:11:57.940
So some people are gonna have like big, thick foresty trees


00:11:57.940 --> 00:12:00.540
that have lots of branching and everything


00:12:00.540 --> 00:12:02.260
for their routes.


00:12:02.260 --> 00:12:03.900
And some people are gonna have like,


00:12:03.900 --> 00:12:07.220
oh, let's just throw half the stuff in one directory


00:12:07.220 --> 00:12:09.100
or one bucket or something like that.


00:12:09.100 --> 00:12:10.540
- Right, that's true.


00:12:10.540 --> 00:12:12.260
A lot of people have different variations


00:12:12.260 --> 00:12:16.020
of how they construct the URLs that map into your site.


00:12:16.020 --> 00:12:18.220
And that also affects it, that's true.


00:12:18.220 --> 00:12:22.100
- So you kind of have to have both be like one,


00:12:22.100 --> 00:12:24.380
you know, faster or not.


00:12:24.380 --> 00:12:28.420
You just have to not be slower in really any case.


00:12:28.420 --> 00:12:29.620
So interesting.


00:12:29.620 --> 00:12:30.460
- Yeah, yeah.


00:12:30.460 --> 00:12:31.580
- So looking at the state machine,


00:12:31.580 --> 00:12:33.220
there's only four states.


00:12:33.220 --> 00:12:38.220
Most things terminate in one or two steps.


00:12:38.220 --> 00:12:41.140
So instead of testing four or five,


00:12:41.140 --> 00:12:44.040
six different regular expressions, doing one or two.


00:12:44.040 --> 00:12:46.580
But yeah, it is interesting.


00:12:46.580 --> 00:12:48.220
All right, what do you got next for us?


00:12:48.220 --> 00:12:52.080
- Well, speaking of Court, we've got Court O or Courto.


00:12:52.080 --> 00:12:53.500
And actually it's funny,


00:12:53.500 --> 00:12:55.860
I have no idea if this is built on Court or not.


00:12:55.860 --> 00:12:58.460
Probably not, but I don't know.


00:12:58.460 --> 00:13:02.620
So Quarto, this was, oh, somebody suggested it,


00:13:02.620 --> 00:13:03.500
Paul McKenzie.


00:13:03.500 --> 00:13:09.520
This is a thing to build documents and stuff,


00:13:09.520 --> 00:13:12.300
but it's open source and it's,


00:13:12.300 --> 00:13:15.860
they say open source scientific


00:13:15.860 --> 00:13:19.220
and technical publishing system built on Pandoc.


00:13:19.220 --> 00:13:22.340
So we love Pandoc, at least I do.


00:13:22.340 --> 00:13:25.540
It converts Markdown to really anything else


00:13:25.540 --> 00:13:27.420
or REST to other stuff.


00:13:27.420 --> 00:13:30.540
like a whole bunch of stuff.


00:13:30.540 --> 00:13:34.340
You can convert things to like PDFs or even eBooks


00:13:34.340 --> 00:13:37.480
and HTML documents, all sorts of things.


00:13:37.480 --> 00:13:40.580
So this is, and then Jupyter, of course,


00:13:40.580 --> 00:13:45.580
Jupyter's great for a lot of scientific Python research


00:13:45.580 --> 00:13:48.860
and data science, and even just learning Python


00:13:48.860 --> 00:13:49.740
and playing and stuff.


00:13:49.740 --> 00:13:53.900
And I've kind of liked to see lately


00:13:53.900 --> 00:13:55.900
some people doing presentations,


00:13:55.900 --> 00:14:00.860
even with just right within Jupyter Notebooks,


00:14:00.860 --> 00:14:01.820
just kind of fun.


00:14:01.820 --> 00:14:04.260
And I know people are teaching that way with tutorials,


00:14:04.260 --> 00:14:08.120
but anyway, so Quarto is a system where you can do,


00:14:08.120 --> 00:14:11.180
you can have documents be either Markdown documents


00:14:11.180 --> 00:14:13.740
or Jupyter Notebooks and have a combination


00:14:13.740 --> 00:14:16.660
of these things around and then build up stuff.


00:14:16.660 --> 00:14:20.440
So you can, so you know, you've got like a Jupyter Notebook


00:14:20.440 --> 00:14:23.960
and a demo and some Markdown and stuff,


00:14:23.960 --> 00:14:27.260
and then you can convert the whole thing to a website


00:14:27.260 --> 00:14:32.260
or a journal entry or a publication ready for a journal


00:14:32.260 --> 00:14:36.840
or a website or an ebook or really anything.


00:14:36.840 --> 00:14:38.420
So this is pretty exciting.


00:14:38.420 --> 00:14:42.740
- I think it's very neat.


00:14:42.740 --> 00:14:45.140
The idea you can take a notebook,


00:14:45.140 --> 00:14:47.940
put a little extra metadata into it


00:14:47.940 --> 00:14:51.140
and then publish it to all these different sources.


00:14:51.140 --> 00:14:53.100
Have you seen how much you can do?


00:14:53.100 --> 00:14:54.340
this is based on Pandoc.


00:14:54.340 --> 00:14:55.860
Have you seen how much you can do with Pandoc?


00:14:55.860 --> 00:14:57.740
Have you seen the conversion?


00:14:57.740 --> 00:15:01.280
Like here, I'll pull up their homepage here.


00:15:01.280 --> 00:15:03.660
You just go to pandoc.org.


00:15:03.660 --> 00:15:04.740
See on the right,


00:15:04.740 --> 00:15:08.820
that thing that looks like gray shading?


00:15:08.820 --> 00:15:09.660
- Yeah.


00:15:09.660 --> 00:15:10.820
- Those are the different formats


00:15:10.820 --> 00:15:13.420
that it can convert from or to.


00:15:13.420 --> 00:15:14.700
- Yeah, it's incredible.


00:15:14.700 --> 00:15:17.260
- It's like unbelievable, yeah, yeah.


00:15:17.260 --> 00:15:18.740
So when you say, okay, well,


00:15:18.740 --> 00:15:20.380
if I could take my notebook


00:15:20.380 --> 00:15:22.580
and then power it through Pandoc to do these things,


00:15:22.580 --> 00:15:25.480
like the output possibilities are insane.


00:15:25.480 --> 00:15:28.040
- Yeah.


00:15:28.040 --> 00:15:30.300
And it even does like one of the things


00:15:30.300 --> 00:15:33.880
that was unexpected for me is the presentation.


00:15:33.880 --> 00:15:37.560
So you can convert one of these to like a--


00:15:37.560 --> 00:15:38.840
- PowerPoint?


00:15:38.840 --> 00:15:41.040
- Yeah, even to PowerPoint.


00:15:41.040 --> 00:15:46.040
Or I was excited about reveal.js, I like reveal.


00:15:46.040 --> 00:15:49.040
But, and then Beamer, I don't know what Beamer is, but--


00:15:49.040 --> 00:15:51.360
- I've never heard of Beamer either.


00:15:51.360 --> 00:15:53.380
- It's gonna be our new favorite way to present.


00:15:53.380 --> 00:15:54.220
Oh, I see.


00:15:54.220 --> 00:15:56.300
You can create Beamer LaTeX.


00:15:56.300 --> 00:15:57.140
I see.


00:15:57.140 --> 00:16:00.100
So is Beamer maybe is a little more


00:16:00.100 --> 00:16:02.620
like scientific mathematical where you have to,


00:16:02.620 --> 00:16:04.480
you know, here's the integral of this


00:16:04.480 --> 00:16:08.400
or like where you've got really specific things possibly.


00:16:08.400 --> 00:16:09.240
I don't know.


00:16:09.240 --> 00:16:10.460
Specific formulas.


00:16:10.460 --> 00:16:12.300
- And then within each of these formats,


00:16:12.300 --> 00:16:16.040
there's things like, so I use reveal.js for instance,


00:16:16.040 --> 00:16:20.420
but you can, there's, the documentation is great.


00:16:20.420 --> 00:16:24.260
It talks about using this to create code blocks


00:16:24.260 --> 00:16:25.780
and line highlighting.


00:16:25.780 --> 00:16:27.020
And check this out.


00:16:27.020 --> 00:16:31.780
You've got line highlighting that goes incremental.


00:16:31.780 --> 00:16:34.380
So you could have stages.


00:16:34.380 --> 00:16:38.660
You can, instead of creating three slides, for instance,


00:16:38.660 --> 00:16:41.220
that have just slightly different highlighted texts,


00:16:41.220 --> 00:16:44.440
you can say what order you want things highlighted in


00:16:44.440 --> 00:16:45.860
as you step through them.


00:16:45.860 --> 00:16:49.420
So I'm gonna try this for a presentation.


00:16:49.420 --> 00:16:50.700
I might try this as well.


00:16:50.700 --> 00:16:52.580
This is pretty neat, actually.


00:16:52.580 --> 00:16:56.000
- I was excited also about the eBooks feature.


00:16:56.000 --> 00:16:58.700
You can even publish EPUB.


00:16:58.700 --> 00:17:01.220
I was talking to Matt Harrison about this


00:17:01.220 --> 00:17:03.420
and Matt pointed out that he'd seen this,


00:17:03.420 --> 00:17:07.380
but he was, if you really care about like indexing


00:17:07.380 --> 00:17:09.840
or the front matter or the back matter,


00:17:09.840 --> 00:17:14.580
this doesn't quite get there for generating that stuff.


00:17:14.580 --> 00:17:17.220
But there's cross-references


00:17:17.220 --> 00:17:19.140
and all sorts of things that it does do.


00:17:19.140 --> 00:17:22.900
So if you're just starting out a publication,


00:17:22.900 --> 00:17:23.860
this would be kind of fun.


00:17:23.860 --> 00:17:26.020
So I'm excited about this.


00:17:26.020 --> 00:17:28.580
The reason, one of the reasons why I brought up EPUB


00:17:28.580 --> 00:17:33.580
is I read all my eBooks on a Kindle.


00:17:33.580 --> 00:17:37.460
And whenever I used to see this, I was like,


00:17:37.460 --> 00:17:39.140
but do Mobi also,


00:17:39.140 --> 00:17:40.900
'cause I wanna be able to read it on my Kindle.


00:17:40.900 --> 00:17:41.820
- Yes, exactly.


00:17:41.820 --> 00:17:43.980
- But I don't have the link here,


00:17:43.980 --> 00:17:48.220
but Kindle, Amazon is doing a conversion this year.


00:17:48.220 --> 00:17:50.700
So right now the mail to,


00:17:50.700 --> 00:17:54.060
the last time I sent a Mobi document to my Kindle


00:17:54.060 --> 00:17:55.300
through the email feature,


00:17:55.300 --> 00:17:58.420
it emailed me back and said, we did this,


00:17:58.420 --> 00:18:01.820
but EPUB is preferred now.


00:18:01.820 --> 00:18:03.700
So- - Oh, interesting.


00:18:03.700 --> 00:18:06.900
- They're kind of moving away from the Mobi format


00:18:06.900 --> 00:18:09.060
and back into EPUB.


00:18:09.060 --> 00:18:10.900
So that's really cool.


00:18:10.900 --> 00:18:14.140
- Cool, yeah, I use the Send to Kindle app.


00:18:14.140 --> 00:18:16.620
It's some weird old archaic kind of app format.


00:18:16.620 --> 00:18:18.360
- Yeah, I try.


00:18:18.360 --> 00:18:19.780
- Really?


00:18:19.780 --> 00:18:23.700
- Yeah, I can't, it's some weird sort of install an app


00:18:23.700 --> 00:18:26.540
on off the web that's not a progressive web app.


00:18:26.540 --> 00:18:27.460
I can't remember what it is.


00:18:27.460 --> 00:18:29.540
It's something I think from Adobe.


00:18:29.540 --> 00:18:32.260
It's some bizarre format, but yeah, that's what I use.


00:18:32.260 --> 00:18:35.660
- I just, you get a free, you get like this email address


00:18:35.660 --> 00:18:36.760
that you can send stuff to


00:18:36.760 --> 00:18:38.660
and it just goes right to your Kindle.


00:18:38.660 --> 00:18:39.700
- Yeah, nice.


00:18:39.700 --> 00:18:41.260
- So that's what I use usually.


00:18:41.260 --> 00:18:43.780
Anyway, so that's-- - I would probably use that


00:18:43.780 --> 00:18:46.720
if I didn't have so many Kindles over the years


00:18:46.720 --> 00:18:49.860
and I don't know which is the real email.


00:18:49.860 --> 00:18:50.700
- Which one it is.


00:18:50.700 --> 00:18:53.560
- I have like five Kindles over and I lost some of them.


00:18:53.560 --> 00:18:56.460
- You gotta like unregister them, man.


00:18:56.460 --> 00:18:57.600
- Oh, come on.


00:18:57.600 --> 00:18:58.700
Yes, I should do that.


00:18:58.700 --> 00:19:02.640
- But so for the website stuff, it's kind of fun too.


00:19:02.640 --> 00:19:04.880
So this will generate websites for you.


00:19:04.880 --> 00:19:09.560
And then it has publishes.


00:19:09.560 --> 00:19:12.440
Yeah, it has publishing input, publishing in it too.


00:19:12.440 --> 00:19:15.400
So you can hook this up to a GitHub action


00:19:15.400 --> 00:19:17.200
and just say Quattro publish


00:19:17.200 --> 00:19:19.520
and be using this to publish stuff too.


00:19:19.520 --> 00:19:22.320
So this is really kind of cool,


00:19:22.320 --> 00:19:26.960
the whole infrastructure around documentation


00:19:26.960 --> 00:19:29.660
and publishing around scientific computing.


00:19:29.660 --> 00:19:31.840
So I'm pretty excited about this.


00:19:31.840 --> 00:19:32.880
- Yeah, I love it.


00:19:32.880 --> 00:19:33.700
It's great.


00:19:33.700 --> 00:19:38.980
Now, before we move on, Brian.


00:19:38.980 --> 00:19:41.200
- Yes, another thing I'm excited about


00:19:41.200 --> 00:19:46.160
is Microsoft for Startups.


00:19:46.160 --> 00:19:49.800
It's the Microsoft for Startups Founders Hub.


00:19:49.800 --> 00:19:52.160
So this episode of Python Bytes is brought to you


00:19:52.160 --> 00:19:53.800
by Microsoft for Startups.


00:19:53.800 --> 00:19:55.160
Starting a business is hard,


00:19:55.160 --> 00:19:56.560
but by some estimates,


00:19:56.560 --> 00:19:59.080
over 90% of startups will go out of business


00:19:59.080 --> 00:20:00.040
in the first year.


00:20:00.040 --> 00:20:01.000
Ouch.


00:20:01.000 --> 00:20:01.840
With this in mind,


00:20:01.840 --> 00:20:04.260
Microsoft for Startups set out to understand


00:20:04.260 --> 00:20:06.440
what startups need to be successful


00:20:06.440 --> 00:20:07.920
and create a digital platform


00:20:07.920 --> 00:20:10.000
to help overcome those challenges.


00:20:10.000 --> 00:20:13.040
Microsoft for Startups Founders Hub.


00:20:13.040 --> 00:20:16.200
It provides all founders at any stage with


00:20:16.200 --> 00:20:20.200
free resources to help solve startup challenges.


00:20:20.200 --> 00:20:23.160
The platform provides technology benefits,


00:20:23.160 --> 00:20:24.660
access to expert guidance,


00:20:24.660 --> 00:20:26.520
and skilled resources,


00:20:26.520 --> 00:20:29.200
mentorship, and networking connections, and so much more.


00:20:29.200 --> 00:20:30.680
Unlike others in the industry,


00:20:30.680 --> 00:20:33.920
Microsoft for Startups Founders Hub doesn't require


00:20:33.920 --> 00:20:36.200
startups to be investor-backed


00:20:36.200 --> 00:20:38.760
or third-party validated to participate.


00:20:38.760 --> 00:20:41.040
Founders Hub is truly open to all.


00:20:41.040 --> 00:20:45.060
What do you get? Speed up development with free access to GitHub and


00:20:45.060 --> 00:20:48.640
Microsoft Cloud with the ability to unlock credits over time.


00:20:48.640 --> 00:20:50.320
To help your startup innovate,


00:20:50.320 --> 00:20:54.880
Founders Hub is partnering with innovative companies like OpenAI,


00:20:54.880 --> 00:20:57.120
a global leader in AI research and development


00:20:57.120 --> 00:20:59.940
to provide exclusive benefits and discounts.


00:20:59.940 --> 00:21:01.640
Through Microsoft for Startups,


00:21:01.640 --> 00:21:05.780
Founders Hub, becoming a founder is no longer about who you know.


00:21:05.780 --> 00:21:08.520
You'll have access to their mentorship network,


00:21:08.520 --> 00:21:13.160
giving you access to a pool of hundreds of mentors across a range of disciplines,


00:21:13.160 --> 00:21:17.160
across areas like validation, fundraising, management, and coaching,


00:21:17.160 --> 00:21:21.240
sales and marketing, as well as specific technical stress points.


00:21:21.240 --> 00:21:24.680
You'll be able to book a one-on-one meeting with mentors,


00:21:24.680 --> 00:21:27.480
many of whom are former founders themselves.


00:21:27.480 --> 00:21:31.000
Make your idea a reality today with the critical support


00:21:31.000 --> 00:21:33.800
you'll get from Microsoft for Startups Founders Hub.


00:21:33.800 --> 00:21:39.960
To join the program, visit pythonbytes.fm/foundershub2022.


00:21:39.960 --> 00:21:41.160
The link is in your show notes.


00:21:41.160 --> 00:21:47.960
Awesome. Yeah, thanks, Microsoft, for supporting the show. They're big backers of Python Bytes and


00:21:47.960 --> 00:21:53.960
definitely help amplify what we're doing here. I think the most awesome thing is the mentors


00:21:53.960 --> 00:21:55.960
and the advice and the support you get.


00:21:55.960 --> 00:22:01.400
Yeah. Well, one of the things I think is awesome is when I read about this, I think about


00:22:02.600 --> 00:22:09.400
Like the startup access that people get if they're in like Silicon Valley or--


00:22:09.400 --> 00:22:11.240
>> Y Combinator or something like that.


00:22:11.240 --> 00:22:15.720
>> Yeah, something like that. But you only get a handful of those a year.


00:22:15.720 --> 00:22:18.680
And this is open to way more people. So that's cool.


00:22:18.680 --> 00:22:23.560
>> Awesome. Yeah. Very cool. All right. Can I take you on a diversion


00:22:23.560 --> 00:22:24.840
to show you something pretty cool?


00:22:24.840 --> 00:22:25.560
>> Yeah.


00:22:25.560 --> 00:22:30.560
- Ah, all right, so Dart is a programming language


00:22:30.560 --> 00:22:37.040
that we don't usually talk about on Python Bytes, right?


00:22:37.040 --> 00:22:40.840
And Dart is a language that came out from Google


00:22:40.840 --> 00:22:46.720
and I felt like it was trying to compete with JavaScript


00:22:46.720 --> 00:22:51.720
to a large degree and didn't really gain a lot of traction


00:22:51.720 --> 00:22:55.240
until Flutter came along.


00:22:55.240 --> 00:22:58.760
And Flutter is a really cool way to design


00:22:58.760 --> 00:23:04.640
mobile and desktop native applications using Dart.


00:23:04.640 --> 00:23:10.920
Think of it as an alternative to Cordova, PhoneGap,


00:23:10.920 --> 00:23:16.880
Xamarin, Ionic, all these different sort of generic ways


00:23:16.880 --> 00:23:20.200
to build apps that run on different platforms.


00:23:20.200 --> 00:23:23.180
So with Flutter, I can build an app that runs


00:23:23.180 --> 00:23:26.240
on iOS and Android, but I can also compile it


00:23:26.240 --> 00:23:29.600
as a target to macOS, Linux and Windows.


00:23:29.600 --> 00:23:32.320
And I can even compile it to a target for the web


00:23:32.320 --> 00:23:34.400
where it'll run as a progressive web app.


00:23:34.400 --> 00:23:36.140
Okay, and you get some really cool apps.


00:23:36.140 --> 00:23:40.640
Like by far the most well known one is the BMW car.


00:23:40.640 --> 00:23:44.880
If you have a BMW, this is like the app that is your car.


00:23:44.880 --> 00:23:46.400
But there's other ones as well.


00:23:46.400 --> 00:23:49.040
It's used a lot within Google, obviously, right?


00:23:49.040 --> 00:23:51.960
Now you may be wondering-- - That would be ticked


00:23:51.960 --> 00:23:54.160
- If I bought a car and all I got was an app.


00:23:54.160 --> 00:23:56.360
- I know, I would be too.


00:23:56.360 --> 00:23:58.880
By the way, sidebar, BMW's doing all sorts of weird stuff,


00:23:58.880 --> 00:24:01.640
like charging you subscriptions to use your seat heaters.


00:24:01.640 --> 00:24:04.680
$18 a month subscription to turn on the seat heater


00:24:04.680 --> 00:24:06.360
that's already in your car.


00:24:06.360 --> 00:24:10.200
So the least thing I'd be upset about is the app.


00:24:10.200 --> 00:24:11.040
- Okay.


00:24:11.040 --> 00:24:12.760
- But that's something else.


00:24:12.760 --> 00:24:16.240
Now, why in the world am I talking about Flutter and Dart?


00:24:16.240 --> 00:24:18.800
I'm actually looking into using Flutter and Dart


00:24:18.800 --> 00:24:22.240
to rebuild the Talk Python Training apps


00:24:22.240 --> 00:24:26.760
so that we can have macOS, Windows and Linux


00:24:26.760 --> 00:24:30.000
in addition to the iOS and Android version


00:24:30.000 --> 00:24:31.120
and give it like a refresh.


00:24:31.120 --> 00:24:32.520
And it's a really cool technology


00:24:32.520 --> 00:24:35.960
that I'm pretty excited about.


00:24:35.960 --> 00:24:40.960
So let me introduce you to something called Flet.


00:24:40.960 --> 00:24:43.720
Have you heard of Flet?


00:24:43.720 --> 00:24:46.160
- Well, just because Brandon just mentioned it.


00:24:46.160 --> 00:24:48.820
(both laughing)


00:24:48.820 --> 00:24:51.000
- Tell me about Flutter.


00:24:51.000 --> 00:24:52.520
- Yes, yes.


00:24:52.520 --> 00:24:54.480
Very timely, Brandon.


00:24:54.480 --> 00:24:59.480
So Flutter comes, was sent over to us from Mikhail Honkala.


00:24:59.480 --> 00:25:04.140
And Flutter is the fastest way to build Flutter apps,


00:25:04.140 --> 00:25:06.920
but instead of using the Dart programming language,


00:25:06.920 --> 00:25:08.600
use Python.


00:25:08.600 --> 00:25:09.440
- Oh, perfect.


00:25:09.440 --> 00:25:12.600
- So let me see if I can, I'll go to the get started.


00:25:12.600 --> 00:25:14.360
I'll pull up a little example here.


00:25:14.360 --> 00:25:19.120
So there's an app here, check it out, it's a calculator.


00:25:19.120 --> 00:25:21.900
And look at it, it's got a nice little animated,


00:25:21.900 --> 00:25:24.880
animated GIF showing how it works.


00:25:24.880 --> 00:25:27.720
And you know, this looks like a proper calculator app


00:25:27.720 --> 00:25:30.320
you'd see on a mobile phone or something, right?


00:25:30.320 --> 00:25:32.300
- Yeah, it looks like my info calculator.


00:25:32.300 --> 00:25:33.140
- Yeah, exactly.


00:25:33.140 --> 00:25:35.940
And you can even go see interactive version


00:25:35.940 --> 00:25:38.960
that is running in your browser,


00:25:38.960 --> 00:25:43.720
because one of the six or seven compile targets


00:25:43.720 --> 00:25:44.920
is your browser.


00:25:44.920 --> 00:25:45.920
And I don't know if you noticed,


00:25:45.920 --> 00:25:47.640
but how quick did that load?


00:25:47.640 --> 00:25:50.280
Way faster than PyScript or any of these other things.


00:25:50.280 --> 00:25:51.820
It was like nearly instant.


00:25:51.820 --> 00:25:56.160
So if you go through and you look at how you build it,


00:25:56.160 --> 00:25:59.160
you just create a main method in Python


00:25:59.160 --> 00:26:02.120
and it's provided a page.


00:26:02.120 --> 00:26:04.960
You say, flat.app,


00:26:04.960 --> 00:26:06.600
and you just give it the function to call.


00:26:06.600 --> 00:26:07.560
And here you say,


00:26:07.560 --> 00:26:09.700
I'm just gonna add some text called hello world, right?


00:26:09.700 --> 00:26:11.100
So you get your hello world here,


00:26:11.100 --> 00:26:11.940
but you don't want that.


00:26:11.940 --> 00:26:13.740
you want some controls.


00:26:13.740 --> 00:26:17.700
So I'm gonna add a bunch of elevated buttons


00:26:17.700 --> 00:26:20.860
with like the buttons that are on the calculator,


00:26:20.860 --> 00:26:24.420
like one, two, three, star, plus, minus, and so on.


00:26:24.420 --> 00:26:27.180
And you end up with this column of that.


00:26:27.180 --> 00:26:28.340
That's kind of interesting,


00:26:28.340 --> 00:26:32.140
but you want these in rows and columns.


00:26:32.140 --> 00:26:34.900
So you would say, I'm creating a row,


00:26:34.900 --> 00:26:37.140
which has some controls for elevated buttons,


00:26:37.140 --> 00:26:38.040
another row, right?


00:26:38.040 --> 00:26:40.780
So these are the rows of the calculators.


00:26:40.780 --> 00:26:45.020
Look at that already, how cool it is to define that UI


00:26:45.020 --> 00:26:47.300
with just that in Python.


00:26:47.300 --> 00:26:48.940
- Yeah. - Right, it's pretty neat.


00:26:48.940 --> 00:26:52.060
And because it's Flutter,


00:26:52.060 --> 00:26:55.860
all of these things have native representations


00:26:55.860 --> 00:26:57.180
on their platforms, right?


00:26:57.180 --> 00:27:01.140
In macOS, it looks like a macOS button


00:27:01.140 --> 00:27:03.820
and Windows looks like a Windows button and so on.


00:27:03.820 --> 00:27:07.260
You gotta put styles to make it look like,


00:27:07.260 --> 00:27:09.820
you know, the calculator app type of thing.


00:27:09.820 --> 00:27:12.100
So yeah, that's pretty much it.


00:27:12.100 --> 00:27:14.700
You just go and you put all these controls together


00:27:14.700 --> 00:27:17.100
like this and you say go.


00:27:17.100 --> 00:27:18.740
And then somewhere in here,


00:27:18.740 --> 00:27:22.100
there's a place where it talks about handling the input.


00:27:22.100 --> 00:27:23.620
But yeah, so here,


00:27:23.620 --> 00:27:29.180
you just say I have, I create a class


00:27:29.180 --> 00:27:32.620
and then on click itself dot button clicked


00:27:32.620 --> 00:27:35.780
or whatever it is, whatever you're interested in.


00:27:35.780 --> 00:27:39.420
And what it's gonna pass over is the actual button,


00:27:39.420 --> 00:27:40.900
the elevated button that was clicked,


00:27:40.900 --> 00:27:45.020
the event source or whatever you call it.


00:27:45.020 --> 00:27:45.700
>> Right.


00:27:45.700 --> 00:27:47.440
>> So you just say,


00:27:47.440 --> 00:27:51.460
"Hook into these different button click events like you would with


00:27:51.460 --> 00:27:56.200
any UI reactive framework and now you have a calculator."


00:27:56.200 --> 00:27:57.560
Or you've got a,


00:27:57.560 --> 00:28:00.640
what other app you want to build? Isn't that cool?


00:28:00.640 --> 00:28:02.960
>> It's very neat.


00:28:06.200 --> 00:28:10.200
I think some people would use this for iOS or Android,


00:28:10.200 --> 00:28:11.520
a mobile device.


00:28:11.520 --> 00:28:13.520
But you said there's other things too,


00:28:13.520 --> 00:28:14.660
like you can test it out.


00:28:14.660 --> 00:28:19.200
Would you realistically use this to develop a web app?


00:28:19.200 --> 00:28:21.380
>> I think developing a web app


00:28:21.380 --> 00:28:23.520
seems like it would be totally reasonable.


00:28:23.520 --> 00:28:25.380
One of the things if you look here,


00:28:25.380 --> 00:28:27.440
if you go to the roadmap,


00:28:27.440 --> 00:28:33.920
the mobile story is not yet complete actually.


00:28:33.920 --> 00:28:34.520
>> Okay.


00:28:34.520 --> 00:28:39.880
So right now I would think of it as more of a desktop type of thing.


00:28:39.880 --> 00:28:42.360
But as you saw with that example, there's also a web.


00:28:42.360 --> 00:28:47.240
So desktop and sort of progressive web app story, right?


00:28:47.240 --> 00:28:51.120
The mobile story is not yet finished, but that's what's on the roadmap.


00:28:51.120 --> 00:28:56.480
And I would love to see it come along and make good progress.


00:28:56.480 --> 00:28:59.120
There's also the possibility of other languages.


00:28:59.120 --> 00:29:01.800
That's not super interesting to me.


00:29:01.800 --> 00:29:12.200
But because I want to write Python anyway, but you have like go and C# and stuff as possible other programming languages.


00:29:12.200 --> 00:29:12.700
Yeah.


00:29:12.700 --> 00:29:20.700
But things like having a built in database with a simple ORM, it sounds way more, it's way more powerful than it sounds.


00:29:20.700 --> 00:29:24.600
Because if you're in the web, well, how do you do database stuff?


00:29:24.600 --> 00:29:29.600
if the web has local storage and it has like a SQL,


00:29:29.600 --> 00:29:32.540
a wimpy SQL thing that's embedded in


00:29:32.540 --> 00:29:34.980
like offline storage for your app.


00:29:34.980 --> 00:29:38.600
If you're on iOS, you've got SQL lite built in and stuff,


00:29:38.600 --> 00:29:41.180
but figuring out all those variations is a pain.


00:29:41.180 --> 00:29:43.020
But if you can just say, create a database


00:29:43.020 --> 00:29:45.300
and do queries against it with an ORM,


00:29:45.300 --> 00:29:47.540
all of a sudden that gives you a super cool


00:29:47.540 --> 00:29:51.500
offline data access story, right?


00:29:51.500 --> 00:29:52.900
And so on.


00:29:52.900 --> 00:29:56.400
So anyway, yeah, I think there's a lot of neat things


00:29:56.400 --> 00:29:58.340
that are coming here.


00:29:58.340 --> 00:30:01.380
This is created by, let me see if I got the name,


00:30:01.380 --> 00:30:05.220
by Fedora, Fitzner.


00:30:05.220 --> 00:30:09.140
I'm actually having Fedora on Talk Python next week


00:30:09.140 --> 00:30:09.980
to talk about this.


00:30:09.980 --> 00:30:12.340
So we're gonna be diving even more into it.


00:30:12.340 --> 00:30:13.320
- Okay.


00:30:13.320 --> 00:30:14.580
- Yeah. - Cool.


00:30:14.580 --> 00:30:15.420
- But.


00:30:15.420 --> 00:30:17.220
- Nice.


00:30:17.220 --> 00:30:21.620
- I don't know how ready this is for producing


00:30:21.620 --> 00:30:23.380
actual finished applications,


00:30:23.380 --> 00:30:25.560
Flutter is absolutely ready to go, right?


00:30:25.560 --> 00:30:26.900
It's been around for many years


00:30:26.900 --> 00:30:30.020
and there's lots of things being put out in production for it.


00:30:30.020 --> 00:30:31.520
Flut on top of Flutter?


00:30:31.520 --> 00:30:35.780
Don't totally know, I'll ask for later, next week,


00:30:35.780 --> 00:30:36.900
and we'll know a little bit more.


00:30:36.900 --> 00:30:40.620
But when I look at this, this is really exciting


00:30:40.620 --> 00:30:43.860
because it looks like it builds applications


00:30:43.860 --> 00:30:45.140
that I would really want to use,


00:30:45.140 --> 00:30:48.420
using modern paradigms and all sorts of cool stuff.


00:30:49.740 --> 00:30:50.980
and you should be able to integrate


00:30:50.980 --> 00:30:53.300
with all the Flutter things, which is great.


00:30:53.300 --> 00:30:55.060
- Neat.


00:30:55.060 --> 00:30:56.980
- Yeah, anyway, very cool.


00:30:56.980 --> 00:30:59.140
Thank you, Mikhail, for sending that over.


00:30:59.140 --> 00:31:03.500
- So that's a UI thing.


00:31:03.500 --> 00:31:06.400
I'd like to switch gears to the command line.


00:31:06.400 --> 00:31:09.700
So I-- - To the TUI.


00:31:09.700 --> 00:31:11.980
- To the, to the Kali?


00:31:11.980 --> 00:31:14.180
- The TUI, the text user interface.


00:31:14.180 --> 00:31:15.620
- Oh yeah, text user interface.


00:31:15.620 --> 00:31:19.500
Yeah, that's, anyway, so like with rich and textual


00:31:19.500 --> 00:31:20.860
and things like that.


00:31:20.860 --> 00:31:23.880
So I was really excited about this article actually,


00:31:23.880 --> 00:31:25.060
and now I'm a little confused.


00:31:25.060 --> 00:31:27.220
So I'm glad I'm gonna talk it through


00:31:27.220 --> 00:31:30.420
and you can let, I'd like to hear what you think.


00:31:30.420 --> 00:31:34.880
So, I ran across this article,


00:31:34.880 --> 00:31:38.960
it's called "Building an Authenticated Python CLI"


00:31:38.960 --> 00:31:43.960
and it's from Notia, Notia.ai, N-O-T-I-A, anyway.


00:31:43.960 --> 00:31:47.900
It's a blog post about building this.


00:31:47.900 --> 00:31:49.460
So here's the idea.


00:31:49.460 --> 00:31:54.460
So if you got a, and for this application,


00:31:54.460 --> 00:31:55.680
you need Twitter authentication.


00:31:55.680 --> 00:32:00.580
So if they're developing a command line application


00:32:00.580 --> 00:32:03.840
that has to use the Twitter API,


00:32:03.840 --> 00:32:05.380
to get that, we've got some secrets.


00:32:05.380 --> 00:32:10.000
You've got a client ID and a secret that you've set up


00:32:10.000 --> 00:32:14.020
and you need to store the Twitter token somewhere.


00:32:14.020 --> 00:32:16.420
- You've got to do that OAuth exchange where you say,


00:32:16.420 --> 00:32:18.600
we're gonna connect to Twitter and Twitter says,


00:32:18.600 --> 00:32:20.600
this app is gonna have, you know,


00:32:20.600 --> 00:32:23.540
interact with your account this way and whatnot, right?


00:32:23.540 --> 00:32:26.020
- Right, so I wanna be able to just,


00:32:26.020 --> 00:32:28.700
but I'd like to be able to have the application


00:32:28.700 --> 00:32:31.620
keep that around and not have to do that,


00:32:31.620 --> 00:32:33.820
not really build it into the app,


00:32:33.820 --> 00:32:36.740
like I don't wanna compile it into the app


00:32:36.740 --> 00:32:39.020
or copy that token there.


00:32:39.020 --> 00:32:40.420
I wanna be able to put that somewhere else.


00:32:40.420 --> 00:32:44.180
So the idea around this article is to take that,


00:32:44.180 --> 00:32:45.660
use the Twitter API.


00:32:46.500 --> 00:32:49.460
they talk about using click and rich a little bit,


00:32:49.460 --> 00:32:53.600
but for the command line stuff and click is cool.


00:32:53.600 --> 00:32:56.260
And we both love rich.


00:32:56.260 --> 00:33:00.260
And anyway, so the idea is to use a,


00:33:00.260 --> 00:33:03.100
once you have, so you use the OAuth


00:33:03.100 --> 00:33:04.980
and you come back and it's, you've got a bear,


00:33:04.980 --> 00:33:06.900
what they call it a--


00:33:06.900 --> 00:33:08.280
- A bear token.


00:33:08.280 --> 00:33:09.740
- A bear token.


00:33:09.740 --> 00:33:13.660
And then saving that in a file called a net RC file.


00:33:13.660 --> 00:33:18.600
And instead of telling somebody to just go put it there,


00:33:18.600 --> 00:33:21.300
they're reading, like asking the user


00:33:21.300 --> 00:33:23.580
for the client ID and the secret


00:33:23.580 --> 00:33:26.500
from the Twitter API website stuff.


00:33:26.500 --> 00:33:28.780
So copy it and paste it here.


00:33:28.780 --> 00:33:31.260
And then they're storing that bearer,


00:33:31.260 --> 00:33:36.260
the bearer token in the net RSC file.


00:33:36.260 --> 00:33:41.860
And then the next time the application runs,


00:33:41.860 --> 00:33:42.700
it just reads that.


00:33:42.700 --> 00:33:44.740
and you don't have to do it every time.


00:33:44.740 --> 00:33:49.020
And then that stuff isn't stored with the client code,


00:33:49.020 --> 00:33:53.580
but it's stored within the user net RC file or something.


00:33:53.580 --> 00:33:56.520
So at first I thought this was something


00:33:56.520 --> 00:34:00.300
that you could use for like, okay,


00:34:00.300 --> 00:34:03.100
so I don't know whether or not this is a good idea


00:34:03.100 --> 00:34:07.220
for that even, whether you wanna store your barrier stuff.


00:34:07.220 --> 00:34:11.800
But you probably don't wanna store,


00:34:11.800 --> 00:34:15.120
You don't want to ask the user for username and password


00:34:15.120 --> 00:34:16.440
and store that there,


00:34:16.440 --> 00:34:18.720
'cause it's just a text file, I think.


00:34:18.720 --> 00:34:22.160
But maybe there's some other way around getting,


00:34:22.160 --> 00:34:23.000
I was kind of hoping that--


00:34:23.000 --> 00:34:25.220
- I'd rather lose an OAuth token


00:34:25.220 --> 00:34:27.360
than I would my actual username and password,


00:34:27.360 --> 00:34:29.080
'cause at least you can revoke the tokens


00:34:29.080 --> 00:34:31.460
or expire them and stuff, you know?


00:34:31.460 --> 00:34:34.120
- Okay, so for token stuff, for saving tokens,


00:34:34.120 --> 00:34:36.020
is this a reasonable thing to do


00:34:36.020 --> 00:34:38.480
to keep that in the user's directory or something?


00:34:40.000 --> 00:34:42.560
- It seems like it's all right.


00:34:42.560 --> 00:34:47.560
I'm a little suspicious of storing straight plain text,


00:34:47.560 --> 00:34:51.780
even if it is just an OAuth token.


00:34:51.780 --> 00:34:53.120
- Yeah, okay.


00:34:53.120 --> 00:34:54.560
- I might, you know, I don't know,


00:34:54.560 --> 00:34:56.180
'cause I haven't read the article all the way through,


00:34:56.180 --> 00:35:00.920
but I might encrypt the token and then store it.


00:35:00.920 --> 00:35:01.920
- Yeah.


00:35:01.920 --> 00:35:02.760
- You know?


00:35:02.760 --> 00:35:04.680
- Yeah, so actually, so I wanted to,


00:35:04.680 --> 00:35:07.520
I start this conversation and then ask people


00:35:07.520 --> 00:35:10.860
because either for Tok,


00:35:10.860 --> 00:35:13.540
I know there's other password ways to like store,


00:35:13.540 --> 00:35:16.060
store them locally safely, but you,


00:35:16.060 --> 00:35:19.340
is it something that can you do that with, anyway,


00:35:19.340 --> 00:35:22.340
I'm just, I'd love to hear people's thoughts on,


00:35:22.340 --> 00:35:26.460
on this, on, on where, like how,


00:35:26.460 --> 00:35:30.020
what's the best way to store people's secret information


00:35:30.020 --> 00:35:32.180
so they don't have to enter it every time.


00:35:32.180 --> 00:35:36.380
But so storing in their user directory


00:35:36.380 --> 00:35:38.880
might not be terrible, but maybe there's a better way.


00:35:38.880 --> 00:35:42.780
So it's probably operating system specific too,


00:35:42.780 --> 00:35:43.620
but I don't know.


00:35:43.620 --> 00:35:48.180
- Right, well, your user profile is protected in general,


00:35:48.180 --> 00:35:51.220
right, from other users.


00:35:51.220 --> 00:35:52.060
- Right.


00:35:52.060 --> 00:35:53.820
- But is it protected if you run an app


00:35:53.820 --> 00:35:55.740
that decides it's just gonna go cruising


00:35:55.740 --> 00:35:57.540
through your user profile?


00:35:57.540 --> 00:35:59.060
You know, something that you ran


00:35:59.060 --> 00:36:01.900
and you shouldn't have trusted it, but you did.


00:36:01.900 --> 00:36:06.220
I mean, SSH token, SSH keys, private keys are there, right?


00:36:06.220 --> 00:36:07.980
in the .ssh folder.


00:36:07.980 --> 00:36:09.820
- Yeah, that's true.


00:36:09.820 --> 00:36:12.960
- Yeah, probably worse than losing an OAuth token as well.


00:36:12.960 --> 00:36:16.140
- So if you can guess, I'm thinking of,


00:36:16.140 --> 00:36:19.060
I'm in the design process for a command line application


00:36:19.060 --> 00:36:21.020
that has to store user credentials.


00:36:21.020 --> 00:36:23.460
So that's where I have this little runny request.


00:36:23.460 --> 00:36:26.140
- Yeah, I mean, isn't that one of the benefits


00:36:26.140 --> 00:36:27.300
of doing this podcast?


00:36:27.300 --> 00:36:33.260
A byproduct of our natural just working on new projects,


00:36:33.260 --> 00:36:35.420
like Flutter for me on the previous one, right?


00:36:35.420 --> 00:36:36.900
- Yeah, this is interesting.


00:36:36.900 --> 00:36:38.700
And I see where it goes from here.


00:36:38.700 --> 00:36:39.540
- Yeah.


00:36:39.540 --> 00:36:42.180
- Yeah, I would probably at least encrypt the token.


00:36:42.180 --> 00:36:43.620
I don't know.


00:36:43.620 --> 00:36:44.460
- Okay, thanks.


00:36:44.460 --> 00:36:46.300
- Maybe it doesn't matter.


00:36:46.300 --> 00:36:49.640
- Well, we're done with our normal items.


00:36:49.640 --> 00:36:54.220
So the extra stuff that I had,


00:36:54.220 --> 00:36:57.260
that I was gonna let you go first, but I'm super excited.


00:36:57.260 --> 00:36:59.220
That I'm getting a whole bunch done on the-


00:36:59.220 --> 00:37:01.540
- Really quick before you go on,


00:37:01.540 --> 00:37:03.740
just Sam Morley says,


00:37:03.740 --> 00:37:05.400
That's why you should encrypt your secret keys


00:37:05.400 --> 00:37:07.940
and system tool chain is probably the correct


00:37:07.940 --> 00:37:09.160
in quotes answer.


00:37:09.160 --> 00:37:11.560
- Okay, system tool chain.


00:37:11.560 --> 00:37:12.500
Okay.


00:37:12.500 --> 00:37:14.320
I don't even know what that means, but I'll look it up.


00:37:14.320 --> 00:37:16.480
- Yes, this is something that go Kaggy


00:37:16.480 --> 00:37:19.280
or DuckDuckGo or maybe Google.


00:37:19.280 --> 00:37:20.120
- Okay.


00:37:20.120 --> 00:37:22.640
- I'm excited to hear about this pytest course


00:37:22.640 --> 00:37:23.720
because people have been asking


00:37:23.720 --> 00:37:26.120
and progress has been significantly made, right?


00:37:26.120 --> 00:37:26.960
Awesome.


00:37:26.960 --> 00:37:27.780
How's it going?


00:37:27.780 --> 00:37:28.680
- Yeah, it's going great.


00:37:28.680 --> 00:37:32.280
So I've got, it's really seven chapters,


00:37:32.280 --> 00:37:37.040
broken up into seven sections or chapters, but it's a video course.


00:37:37.040 --> 00:37:41.240
So, but I'm really excited about it because the, the,


00:37:41.240 --> 00:37:45.520
the Pytest book has received a lot of a lot of people of it, which is great.


00:37:45.520 --> 00:37:49.560
I love that. I got great feedback, but it's,


00:37:49.560 --> 00:37:53.940
it's detailed, right? So we jump into a whole bunch of the details.


00:37:53.940 --> 00:37:57.600
And with a book, you can kind of get to some section that you're like, yeah,


00:37:57.600 --> 00:38:00.840
I don't need that right now. And you can skip over it. And yes,


00:38:00.840 --> 00:38:02.720
you can do that with a course, but it's a little harder.


00:38:02.720 --> 00:38:07.360
So the goal for this is really for people new to pytest


00:38:07.360 --> 00:38:11.600
or that are used to using a little piece of it


00:38:11.600 --> 00:38:13.680
and unfamiliar with some of the powers


00:38:13.680 --> 00:38:17.320
is to introduce people to like the full power of pytest


00:38:17.320 --> 00:38:19.520
but quickly and not overwhelm them.


00:38:19.520 --> 00:38:21.960
So I think I've done a good job, but we'll see,


00:38:21.960 --> 00:38:24.520
we'll get it edited and get it available to people


00:38:24.520 --> 00:38:25.640
as soon as we can.


00:38:25.640 --> 00:38:27.400
- Yeah, I'm excited.


00:38:27.400 --> 00:38:28.240
- Yeah.


00:38:28.240 --> 00:38:29.060
- I'm excited to check it out.


00:38:29.060 --> 00:38:29.960
That's gonna be awesome.


00:38:29.960 --> 00:38:31.260
All right, how about you?


00:38:31.260 --> 00:38:33.820
Do you have anything extra?


00:38:33.820 --> 00:38:37.140
- Good lead in, so brand new course


00:38:37.140 --> 00:38:39.060
over at Talk Python Training,


00:38:39.060 --> 00:38:41.500
Django getting started, which is awesome.


00:38:41.500 --> 00:38:44.300
This is put together by Chris Trudeau.


00:38:44.300 --> 00:38:47.740
And this is a six hour course on Django.


00:38:47.740 --> 00:38:50.060
And right now people, hurry, hurry,


00:38:50.060 --> 00:38:51.420
there's an early bird discount


00:38:51.420 --> 00:38:54.220
to save 10% that you can get as well.


00:38:54.220 --> 00:38:58.420
So that just came out Wednesday, Wednesday is yesterday.


00:38:58.420 --> 00:39:00.420
So came out yesterday, I think,


00:39:00.420 --> 00:39:02.140
that or the day before, very recently.


00:39:02.140 --> 00:39:04.700
Anyway, if you've been wanting to do,


00:39:04.700 --> 00:39:05.860
getting started in Django,


00:39:05.860 --> 00:39:07.380
if you wanna get into Django,


00:39:07.380 --> 00:39:09.580
this gives our Django course is really good.


00:39:09.580 --> 00:39:12.260
If you've been dabbling, you're like,


00:39:12.260 --> 00:39:14.540
I really need to see how the pieces fit together better.


00:39:14.540 --> 00:39:15.540
Also, check it out.


00:39:15.540 --> 00:39:17.060
It's definitely good stuff.


00:39:17.060 --> 00:39:19.780
Django, one of the top two web frameworks


00:39:19.780 --> 00:39:21.780
these days still in Python.


00:39:21.780 --> 00:39:22.620
- Yeah.


00:39:22.620 --> 00:39:27.700
Do you know how many courses you've got on the platform now?


00:39:27.700 --> 00:39:32.040
43 courses and about that platform tells me in


00:39:32.040 --> 00:39:38.920
233 hours of content, so there's more than that in there, but there are a couple are not published yet


00:39:38.920 --> 00:39:40.920
There's some exciting ones coming


00:39:40.920 --> 00:39:43.380
Cool. Nice. Yeah, yeah


00:39:43.380 --> 00:39:49.200
All right. Well, those are all the extras I have for now. I do have a joke for you though. Oh good


00:39:49.200 --> 00:39:51.660
Are you a fan of the Lion King?


00:39:51.660 --> 00:39:57.540
You ever watched that show the Lion King the cartoon Disney. It was a Disney. I don't know


00:39:57.540 --> 00:40:03.220
I've saw it. I don't know if I call me a fan, but no. Oh, did you enjoy watching? I guess at all. Yeah


00:40:03.220 --> 00:40:09.500
Yeah, yeah, so I watched it with my kids. And yeah, we enjoyed it as well. And so I


00:40:09.500 --> 00:40:17.760
Don't even remember the name of the father. Remember the name of the father the actual Lion King. No


00:40:17.760 --> 00:40:20.540
Whatever. Yeah, exactly


00:40:20.540 --> 00:40:25.420
I don't either but the little kid that was supposed to be the kid lion who was supposed to be


00:40:26.020 --> 00:40:29.660
Being room to be the king. It's talking to his father and they're looking over


00:40:29.660 --> 00:40:32.340
the vast kingdom


00:40:32.340 --> 00:40:40.880
Simba every language that light touches has a garbage collector and symbolist is but what's that shadow?


00:40:40.880 --> 00:40:43.260
shadowy place over there


00:40:43.260 --> 00:40:45.580
That's a C++. You must know


00:40:45.580 --> 00:40:52.380
Yes, sorry C++ but yeah, that was fun and Mufasa


00:40:53.180 --> 00:40:55.180
- Mufasa, yes, thank you.


00:40:55.180 --> 00:40:56.020
Yes, we got it.


00:40:56.020 --> 00:40:59.920
Mufasa says, "That's a C++, you must never go there."


00:40:59.920 --> 00:41:01.100
- No, but you should.


00:41:01.100 --> 00:41:05.280
- Don't take it too seriously, it's a joke, but it was fun.


00:41:05.280 --> 00:41:07.420
(laughing)


00:41:07.420 --> 00:41:10.280
- That's a garbage collector, yeah, I know.


00:41:10.280 --> 00:41:12.420
- What's that shadowy place over there?


00:41:12.420 --> 00:41:15.520
You must never go there.


00:41:15.520 --> 00:41:19.160
- What about Rust?


00:41:19.160 --> 00:41:20.180
- What about Rust?


00:41:21.520 --> 00:41:22.360
- Nice.


00:41:22.360 --> 00:41:25.200
- I don't even know enough about Rust


00:41:25.200 --> 00:41:26.700
to make this part of the joke.


00:41:26.700 --> 00:41:30.340
- Yeah.


00:41:30.340 --> 00:41:31.820
- I'm busy learning Dart and Flutter.


00:41:31.820 --> 00:41:33.500
Maybe I don't have to learn Dart though,


00:41:33.500 --> 00:41:34.520
'cause I can do it in Python.


00:41:34.520 --> 00:41:36.520
I could just learn Flutter, we'll see.


00:41:36.520 --> 00:41:39.000
- So that would be like, that is Rust.


00:41:39.000 --> 00:41:41.840
You can go there, but come back quickly.


00:41:41.840 --> 00:41:44.520
- Exactly, just short visits.


00:41:44.520 --> 00:41:45.720
Short visits, Simba.


00:41:45.720 --> 00:41:46.860
- Yeah.


00:41:46.860 --> 00:41:48.800
- Just to focus. - Awesome.


00:41:48.800 --> 00:41:51.520
- Well, thanks for having this great episode.


00:41:51.520 --> 00:41:53.320
- Yeah, it's great to be back with you.


00:41:53.320 --> 00:41:58.080
- Yeah, so, and I guess we'll talk next week.


00:41:58.080 --> 00:41:59.400
- Yeah, you bet.


00:41:59.400 --> 00:42:00.320
See ya.


00:42:00.320 --> 00:42:01.160
- Bye.


00:42:01.160 --> 00:42:11.160
[BLANK_AUDIO]

