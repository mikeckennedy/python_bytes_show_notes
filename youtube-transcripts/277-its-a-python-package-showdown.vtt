WEBVTT

00:00:00.000 --> 00:00:05.000
Hey everybody, welcome to the live show of Python Bytes.


00:00:05.000 --> 00:00:06.640
Glad you could all join us.


00:00:06.640 --> 00:00:09.840
Let's just jump in.


00:00:09.840 --> 00:00:11.320
Hello and welcome to Python Bytes,


00:00:11.320 --> 00:00:13.080
where we deliver Python news and headlines


00:00:13.080 --> 00:00:14.480
directly to your earbuds.


00:00:14.480 --> 00:00:19.480
This is episode 277, recorded March 28th, 2022.


00:00:19.480 --> 00:00:22.040
And I am Brian Okken.


00:00:22.040 --> 00:00:23.300
- I am Michael Kennedy.


00:00:23.300 --> 00:00:25.760
- And I'm Thomas Geiger.


00:00:25.760 --> 00:00:27.720
- Welcome Thomas, welcome to the show.


00:00:27.720 --> 00:00:29.720
Thanks for coming on and being a guest.


00:00:29.720 --> 00:00:32.840
Can you tell us a little bit about you?


00:00:32.840 --> 00:00:34.440
- Thanks Brian and thanks Michael.


00:00:34.440 --> 00:00:36.920
Big fan, so it's an honor being here.


00:00:36.920 --> 00:00:40.200
I'm the creator and maintainer of the Piper Task Runner,


00:00:40.200 --> 00:00:42.200
which it so happens you discussed last week.


00:00:42.200 --> 00:00:45.480
So I come in riding on that wave.


00:00:45.480 --> 00:00:47.320
- Yeah.


00:00:47.320 --> 00:00:48.560
- Yeah, very cool projects.


00:00:48.560 --> 00:00:49.680
Congrats on it.


00:00:49.680 --> 00:00:51.560
- Thank you very much.


00:00:51.560 --> 00:00:53.880
- Well, so Michael, it's March.


00:00:53.880 --> 00:00:55.520
- It is March.


00:00:55.520 --> 00:00:57.400
It's like March madness, right?


00:00:57.400 --> 00:00:58.240
- Yeah.


00:00:58.240 --> 00:01:00.960
- So Chris May sent in this thing.


00:01:00.960 --> 00:01:03.040
This is, "Hey, Python Bytes people,


00:01:03.040 --> 00:01:05.080
here's a fun thing to cover, March Madness,


00:01:05.080 --> 00:01:07.080
but for Python."


00:01:07.080 --> 00:01:11.320
And for those of you who are not college basketball fans


00:01:11.320 --> 00:01:13.840
and follow it carefully,


00:01:13.840 --> 00:01:16.320
March Madness is basically the playoffs


00:01:16.320 --> 00:01:18.040
for the college basketball.


00:01:18.040 --> 00:01:19.760
And it's single elimination.


00:01:19.760 --> 00:01:22.320
You start with 16, I think,


00:01:22.320 --> 00:01:24.360
and then every team plays another one,


00:01:24.360 --> 00:01:25.920
then it's down to eight, then down to four, and so on.


00:01:25.920 --> 00:01:28.420
So that's the idea, but for Python.


00:01:28.420 --> 00:01:31.400
And check it here, we have round one.


00:01:31.400 --> 00:01:34.360
I guess it starts with 32 and then 16 and so on.


00:01:34.360 --> 00:01:36.720
So we've got these different rounds


00:01:36.720 --> 00:01:38.800
and some of the rounds have already occurred,


00:01:38.800 --> 00:01:42.360
but the winner, the champion is still yet to be crowned.


00:01:42.360 --> 00:01:45.000
So you'll need to get out there and vote.


00:01:45.000 --> 00:01:46.640
I'll tell you how in a second.


00:01:46.640 --> 00:01:50.040
- I'm a bit amazed NumPy is out doing pytest there.


00:01:50.040 --> 00:01:52.680
- It's out doing it pretty handily.


00:01:52.680 --> 00:01:54.160
I mean, it did outdo it, right?


00:01:54.160 --> 00:01:57.400
So if you go here, what you see is this tournament bracket.


00:01:57.400 --> 00:02:00.120
And the first ones were like NumPy versus Redis,


00:02:00.120 --> 00:02:02.960
and NumPy won.


00:02:02.960 --> 00:02:05.880
And then pytest versus LXML,


00:02:05.880 --> 00:02:08.480
Parser and pytest won that one handily.


00:02:08.480 --> 00:02:12.120
And then NumPy and pytest had to face off.


00:02:12.120 --> 00:02:14.760
And as Thomas says, surprisingly,


00:02:14.760 --> 00:02:18.680
NumPy pretty badly beat up on pytest.


00:02:18.680 --> 00:02:19.880
Brian, are you okay with this?


00:02:19.880 --> 00:02:21.280
How are you feeling?


00:02:21.280 --> 00:02:22.840
- I didn't get to vote,


00:02:22.840 --> 00:02:24.800
So I'm not sure how this was done.


00:02:24.800 --> 00:02:25.640
- Yeah.


00:02:25.640 --> 00:02:28.360
- This is gonna be the start of a long blood feud.


00:02:28.360 --> 00:02:29.200
- It is.


00:02:29.200 --> 00:02:31.620
- The non-black community and vice versa.


00:02:31.620 --> 00:02:33.760
- Well, and the other part of this story I'm telling


00:02:33.760 --> 00:02:35.760
is the other side of the bracket was


00:02:35.760 --> 00:02:37.400
Scikit-learn versus Beautiful Soup.


00:02:37.400 --> 00:02:39.100
And Beautiful Soup, oh my gosh,


00:02:39.100 --> 00:02:40.460
I think it was a buzzer beater.


00:02:40.460 --> 00:02:44.560
Came in at the last second and it's like 52% to 48%,


00:02:44.560 --> 00:02:46.240
Beautiful Soup won.


00:02:46.240 --> 00:02:50.440
And so now this week we're in the elite eight.


00:02:50.440 --> 00:02:52.280
And so you can come and vote.


00:02:52.280 --> 00:02:55.780
I'm gonna vote like my metric here,


00:02:55.780 --> 00:02:58.120
sort of how useful and how impactful is this thing?


00:02:58.120 --> 00:03:00.080
Not necessarily do I like it better.


00:03:00.080 --> 00:03:00.920
So I'm gonna vote over here.


00:03:00.920 --> 00:03:03.880
I'm gonna say for NumPy versus BeautifulSoup, NumPy.


00:03:03.880 --> 00:03:05.580
I actually would use BeautifulSoup probably more,


00:03:05.580 --> 00:03:08.360
but I think NumPy is more impactful.


00:03:08.360 --> 00:03:11.320
Pip versus Matplotlib, I'll pip all day long.


00:03:11.320 --> 00:03:12.360
Same reason.


00:03:12.360 --> 00:03:13.800
Pandas versus Docker.


00:03:13.800 --> 00:03:16.440
Ooh, I do like me some Docker.


00:03:16.440 --> 00:03:17.480
I'm gonna go with Pandas.


00:03:17.480 --> 00:03:19.220
And then wheel versus requests,


00:03:19.220 --> 00:03:20.160
I'm gonna go with requests.


00:03:20.160 --> 00:03:21.960
I know wheel is important under the covers,


00:03:21.960 --> 00:03:26.000
I don't see it. So I I don't want to think about it. So request top of mind. He's at all the time


00:03:26.000 --> 00:03:28.000
so here you can see I voted and


00:03:28.000 --> 00:03:32.040
everyone else who would like to you can just click the link in the show notes and you can vote to and


00:03:32.040 --> 00:03:36.920
These are basically open for a week and then the elimination happens and it moves on


00:03:36.920 --> 00:03:40.940
So we're gonna see what happens in the final four coming real soon actually, so


00:03:40.940 --> 00:03:44.900
Okay, we're gonna have to like highlight this earlier in the month


00:03:44.900 --> 00:03:47.800
next year so that


00:03:47.960 --> 00:03:49.460
People can vote.


00:03:49.460 --> 00:03:51.260
>>You want to create some voting blocks,


00:03:51.260 --> 00:03:53.760
like in the reality TV shows.


00:03:53.760 --> 00:03:55.560
The one on the island, Survivor.


00:03:55.560 --> 00:03:57.660
>>Yeah, Survivor, exactly.


00:03:57.660 --> 00:04:01.360
Oh, I'm sad to say Scikit-Learn's torch


00:04:01.360 --> 00:04:02.860
has been extinguished.


00:04:02.860 --> 00:04:03.360
>>Oh, no.


00:04:03.360 --> 00:04:05.060
>>We're going to have to leave the island.


00:04:05.060 --> 00:04:06.260
Yes, that's right.


00:04:06.260 --> 00:04:08.260
Anyway, thank you, Chris, for sending this in.


00:04:08.260 --> 00:04:09.160
This is fun.


00:04:09.160 --> 00:04:11.760
And it's very low stakes.


00:04:11.760 --> 00:04:13.260
It's just sort of--


00:04:13.260 --> 00:04:13.860
people can just--


00:04:13.860 --> 00:04:14.660
>>Bragging rights.


00:04:14.660 --> 00:04:17.260
>>Yeah, bragging rights and whatnot.


00:04:17.260 --> 00:04:21.160
So we'll send out a tweet or something about it.


00:04:21.160 --> 00:04:23.160
You can get in there and check this out.


00:04:23.160 --> 00:04:24.960
>> Definitely.


00:04:24.960 --> 00:04:27.160
>> How about you, Brian? What's your next one?


00:04:27.160 --> 00:04:29.860
>> I'd like to talk about NB Preview,


00:04:29.860 --> 00:04:31.260
which actually I thought we covered,


00:04:31.260 --> 00:04:32.680
but I couldn't find it anywhere.


00:04:32.680 --> 00:04:36.540
So NB Preview is a notebook previewer.


00:04:36.540 --> 00:04:39.580
So IPython or Jupyter Notebook.


00:04:39.580 --> 00:04:43.340
It's neat. It's a command line thing,


00:04:43.340 --> 00:04:46.200
and I like to spend a lot of time on the command line.


00:04:46.200 --> 00:04:50.040
>> So once you pip install it,


00:04:50.040 --> 00:04:53.000
or since it's not really part of your project,


00:04:53.000 --> 00:04:56.280
I used pipx installs of this.


00:04:56.280 --> 00:05:02.040
You say in the preview and then you can give it some options,


00:05:02.040 --> 00:05:06.880
but then a notebook file name and it just


00:05:06.880 --> 00:05:13.680
previews your notebook in ASCII, which is awesome.


00:05:13.680 --> 00:05:16.000
But it's not just ASCII,


00:05:16.000 --> 00:05:16.840
It's rich.


00:05:16.840 --> 00:05:19.640
So it's, we've got colors and nice colors


00:05:19.640 --> 00:05:20.960
and tables and stuff.


00:05:20.960 --> 00:05:22.420
There's actually quite a few features


00:05:22.420 --> 00:05:23.800
that I want to run down.


00:05:23.800 --> 00:05:26.640
One of the things I loved right away,


00:05:26.640 --> 00:05:29.520
it was, it's not just a file.


00:05:29.520 --> 00:05:32.400
I said, I tried it out on some local files,


00:05:32.400 --> 00:05:36.240
but you can give it like a URL or something.


00:05:36.240 --> 00:05:37.820
There's a great way to,


00:05:37.820 --> 00:05:39.080
you can get a whole bunch of stuff.


00:05:39.080 --> 00:05:41.520
You don't have to have local notebook files.


00:05:41.520 --> 00:05:42.420
- Oh, that's cool.


00:05:43.400 --> 00:05:47.240
>> Yeah, here it's showing even you


00:05:47.240 --> 00:05:49.280
can curl something and pipe it to it.


00:05:49.280 --> 00:05:51.680
It'll take inputs as pipes.


00:05:51.680 --> 00:05:55.000
The fact that it's a command line tool and it deals


00:05:55.000 --> 00:05:57.400
with pipes correctly is what I really like about it.


00:05:57.400 --> 00:05:59.080
You can pipe a notebook to it.


00:05:59.080 --> 00:06:00.580
I don't know if you do that or not,


00:06:00.580 --> 00:06:02.760
but you might want to pipe output.


00:06:02.760 --> 00:06:05.200
By default, you get these nice colors,


00:06:05.200 --> 00:06:07.740
but if you pipe it to output,


00:06:07.740 --> 00:06:09.760
you can pipe it to grep or something,


00:06:09.760 --> 00:06:11.920
and you can grep for things.


00:06:11.920 --> 00:06:14.000
So this is kind of great.


00:06:14.000 --> 00:06:16.040
I don't know if you've ever tried to grep


00:06:16.040 --> 00:06:17.720
for something in a notebook,


00:06:17.720 --> 00:06:19.560
but there's a lot of junk around it.


00:06:19.560 --> 00:06:21.600
There's a lot of formatting stuff that,


00:06:21.600 --> 00:06:23.120
and if that's not really what you're looking for,


00:06:23.120 --> 00:06:23.960
it's not helpful.


00:06:23.960 --> 00:06:27.560
So having this tool to strip that out, it's pretty nice.


00:06:27.560 --> 00:06:28.840
- Oh yeah, that's really nice.


00:06:28.840 --> 00:06:31.160
I love the ability to just pull this up and view them.


00:06:31.160 --> 00:06:32.960
And given that it's based on Rich,


00:06:32.960 --> 00:06:35.920
like it has formatting for all the cells.


00:06:35.920 --> 00:06:39.640
I mean, Jupyter is like Markdown plus code


00:06:39.640 --> 00:06:42.720
and Rich does rich highlighting for both of those.


00:06:42.720 --> 00:06:43.540
So that's cool.


00:06:43.540 --> 00:06:44.380
- Yeah.


00:06:44.380 --> 00:06:47.380
- It looks like it's got some pigments under the hood also.


00:06:47.380 --> 00:06:50.240
Which happens Ian brought up last week, I think.


00:06:50.240 --> 00:06:51.580
- Yeah, exactly.


00:06:51.580 --> 00:06:53.840
A lot of continuations said this week.


00:06:53.840 --> 00:06:55.620
- So a lot of cool stuff that you would expect


00:06:55.620 --> 00:06:56.900
like code highlighting and stuff.


00:06:56.900 --> 00:06:59.000
But the thing that like really stood out to me


00:06:59.000 --> 00:07:00.720
is what does it do with images?


00:07:00.720 --> 00:07:03.680
Like graphs and stuff.


00:07:03.680 --> 00:07:05.880
And the images are kind of amazing.


00:07:05.880 --> 00:07:10.320
they're like these, by default, these block things,


00:07:10.320 --> 00:07:15.120
which not that clear to use for utilities,


00:07:15.120 --> 00:07:17.560
but it's kind of shows you what it's gonna do.


00:07:17.560 --> 00:07:19.080
And there's a few options.


00:07:19.080 --> 00:07:24.080
You can do this block level thing.


00:07:24.080 --> 00:07:25.800
And I like the characters.


00:07:25.800 --> 00:07:30.320
So it does like old ASCII art stuff of your images,


00:07:30.320 --> 00:07:33.400
or it uses the braille stuff.


00:07:33.400 --> 00:07:35.120
I don't know if there's an example here,


00:07:35.120 --> 00:07:39.660
but you can do braille for all the dots to show up,


00:07:39.660 --> 00:07:41.240
which is kind of neat.


00:07:41.240 --> 00:07:43.260
It even does like cool data frame rendering.


00:07:43.260 --> 00:07:47.500
So if you've got a data frame printed out there


00:07:47.500 --> 00:07:51.020
in your notebook, it'll format it nicely.


00:07:51.020 --> 00:07:54.840
So even late LaTeX is a formatted,


00:07:54.840 --> 00:07:56.220
which is kind of a surprise.


00:07:56.220 --> 00:07:57.220
I didn't expect that.


00:07:57.220 --> 00:07:58.840
So that's kind of neat.


00:07:58.840 --> 00:08:04.740
Anyway, I specifically, oh, cool, hyperlinks too.


00:08:04.740 --> 00:08:07.060
so you can click on HTML that's in there.


00:08:07.060 --> 00:08:08.240
That's kind of neat.


00:08:08.240 --> 00:08:11.700
The thing that I really liked that is the simple part though


00:08:11.700 --> 00:08:14.480
is to be able to strip stuff and pipe it to grep


00:08:14.480 --> 00:08:15.320
and things like that.


00:08:15.320 --> 00:08:16.520
So this is handy.


00:08:16.520 --> 00:08:19.300
- Nice. Thomas, what do you think?


00:08:19.300 --> 00:08:21.260
- Oh, this is great.


00:08:21.260 --> 00:08:24.140
I don't really use notebooks all that much


00:08:24.140 --> 00:08:24.960
to be honest with you.


00:08:24.960 --> 00:08:26.260
So it's a little bit lost on me,


00:08:26.260 --> 00:08:29.460
but more command line is absolutely good.


00:08:29.460 --> 00:08:32.180
It looks delicious.


00:08:32.180 --> 00:08:33.260
- Yeah, it does.


00:08:33.260 --> 00:08:37.100
- The terminal, the TUIs, the terminal user interfaces


00:08:37.100 --> 00:08:39.940
are definitely coming on strong these days.


00:08:39.940 --> 00:08:42.340
We forgot to ask you, what kind of Python do you do?


00:08:42.340 --> 00:08:44.100
What's your flavor of Python?


00:08:44.100 --> 00:08:47.420
Like, are you building APIs or are you--


00:08:47.420 --> 00:08:49.780
- Oh, yes. - What kind?


00:08:49.780 --> 00:08:53.260
- Well, the Piper project is what consumes most of my hours.


00:08:53.260 --> 00:08:55.660
So I guess that's normal-ish Python


00:08:55.660 --> 00:08:57.780
as opposed to notebook-ish Python.


00:09:00.340 --> 00:09:03.060
Data science, I don't really do too much either.


00:09:03.060 --> 00:09:07.940
So it's mostly traditional style Python programming.


00:09:07.940 --> 00:09:09.460
- Yeah, got it.


00:09:09.460 --> 00:09:10.980
All right, well, your topic is up next.


00:09:10.980 --> 00:09:12.040
Tell us about it.


00:09:12.040 --> 00:09:12.880
- Well, funnily enough,


00:09:12.880 --> 00:09:15.220
this is very traditional programming.


00:09:15.220 --> 00:09:20.220
What I bring for you for your delectation is PyFakeFS,


00:09:20.220 --> 00:09:26.060
which I think is a sadly, relatively unknown


00:09:26.060 --> 00:09:27.220
open source library.


00:09:27.220 --> 00:09:29.340
And I'd like to give them some props and recognition


00:09:29.340 --> 00:09:31.300
because I think it's amazing.


00:09:31.300 --> 00:09:33.220
And it's made a huge difference to me


00:09:33.220 --> 00:09:35.300
and my own code and the Piper project.


00:09:35.300 --> 00:09:38.000
So hopefully this helps out some other people.


00:09:38.000 --> 00:09:41.540
Now, what it is, is a fake file system.


00:09:41.540 --> 00:09:47.440
So in a nutshell, it intercepts all calls from Python


00:09:47.440 --> 00:09:49.200
to the actual file system.


00:09:49.200 --> 00:09:51.500
So if you think of the open function,


00:09:51.500 --> 00:09:55.420
the built-in open that is, or shutil or pathlib,


00:09:55.420 --> 00:09:58.120
all of those that might have real world side effects


00:09:58.120 --> 00:10:02.200
in terms of the disk, the fake file system will intercept these.


00:10:02.200 --> 00:10:07.320
And this is completely transparent, which is to say that your functional code doesn't


00:10:07.320 --> 00:10:08.840
need to know about this.


00:10:08.840 --> 00:10:13.200
So the patching happens without you needing to inject something or without you needing


00:10:13.200 --> 00:10:19.240
to go and alter your actual code to take countenance of the system.


00:10:19.240 --> 00:10:25.480
Now what's great about this is the moment you start talking about testing a file system,


00:10:25.480 --> 00:10:30.160
almost by definition in integration testing or functional testing terrain. It's not a


00:10:30.160 --> 00:10:36.800
unit test anymore, which comes with its own disadvantages. So if you do want a unit test,


00:10:36.800 --> 00:10:42.000
then let's consider a simplistic example, right? If you want to -- if the code under


00:10:42.000 --> 00:10:47.160
test writes an output file. So first of all, you need to patch out that if you're in your


00:10:47.160 --> 00:10:51.320
unit testing framework with something like mock open. But secondly, you probably have


00:10:51.320 --> 00:10:56.000
a pathlib in there somewhere where you're either creating the parent directories for


00:10:56.000 --> 00:11:00.800
the path to check that they exist before you try and write to that location. So now we


00:11:00.800 --> 00:11:06.240
already have two things we have to patch out. And then on top of that, you might be doing


00:11:06.240 --> 00:11:10.640
it in a loop. You might be writing more than one file. And the testing becomes very clumsy


00:11:10.640 --> 00:11:19.280
very quickly. Whereas once you use the PyFake FS library, you can just write as normal,


00:11:19.280 --> 00:11:22.360
against that file system using the standard Python inputs.


00:11:22.360 --> 00:11:26.120
And what you end up with is-- and once the test finishes,


00:11:26.120 --> 00:11:28.240
it all just goes out of scope, and you don't even


00:11:28.240 --> 00:11:30.200
need to bother cleaning it up.


00:11:30.200 --> 00:11:31.000
>>Yeah, that's cool.


00:11:31.000 --> 00:11:32.600
And you can specify the string that


00:11:32.600 --> 00:11:33.800
is the content of the file.


00:11:33.800 --> 00:11:36.960
So when the thing reads it, you can control what it sees.


00:11:36.960 --> 00:11:37.800
>>Absolutely.


00:11:37.800 --> 00:11:40.480
So it comes with a-- and Brian, you're going to love this.


00:11:40.480 --> 00:11:43.960
It comes with a super handy pytest fixture.


00:11:43.960 --> 00:11:47.000
So if you are using pytest, which you should,


00:11:47.000 --> 00:11:50.460
You can just add the FS fixture to your unit test.


00:11:50.460 --> 00:11:53.460
And now everything in your unit test


00:11:53.460 --> 00:11:55.960
will be going to the fake file system


00:11:55.960 --> 00:11:58.900
rather than the real underlying fake file system.


00:11:58.900 --> 00:12:01.500
That's pretty cool.


00:12:01.500 --> 00:12:04.000
Yeah, and the helper functions allows you,


00:12:04.000 --> 00:12:07.640
like you were hinting at, Mike, you can specify encodings,


00:12:07.640 --> 00:12:10.440
you can write in binary, it's super useful.


00:12:10.440 --> 00:12:13.480
Something else that I use quite a lot is the ability to switch


00:12:13.480 --> 00:12:15.980
between Linux, Mac, and Windows file systems,


00:12:16.480 --> 00:12:18.960
which again, for Piper, is such a boon


00:12:18.960 --> 00:12:21.360
to be able to test the cross-platform compatibility.


00:12:21.360 --> 00:12:25.400
Oh, interesting. So if it asks for the representation


00:12:25.400 --> 00:12:27.560
from a pathlib thing, it'll do C colon backslash


00:12:27.560 --> 00:12:29.080
instead of forward slash.


00:12:29.080 --> 00:12:31.080
Yeah, exactly right.


00:12:31.080 --> 00:12:33.080
So all of these things are achieved...


00:12:33.080 --> 00:12:35.400
You know, I'm relatively conservative


00:12:35.400 --> 00:12:37.560
when it comes to pulling in new libraries


00:12:37.560 --> 00:12:40.960
because I'm... especially if the library feels heavy,


00:12:40.960 --> 00:12:44.920
and I feel I can do it just using standard lib functionality.


00:12:44.920 --> 00:12:50.420
And also with some libraries, I'm a little bit worried that they might stop being maintained or something like that.


00:12:50.420 --> 00:12:55.920
But PyFakeFS has been around since 2006, developed by Google.


00:12:55.920 --> 00:12:58.720
It was open sourced in 2011.


00:12:58.720 --> 00:13:00.720
The maintainers are really on it.


00:13:00.720 --> 00:13:07.420
I submitted and had a PR merged earlier this year within an afternoon on a Saturday,


00:13:07.420 --> 00:13:10.920
which for open source is very quick.


00:13:10.920 --> 00:13:12.920
So they're on top of it.


00:13:12.920 --> 00:13:14.600
Great project, check it out on GitHub,


00:13:14.600 --> 00:13:17.920
check out the documentation too, it's well documented.


00:13:17.920 --> 00:13:20.440
And it's super useful.


00:13:20.440 --> 00:13:21.920
- And I was looking at the toxini,


00:13:21.920 --> 00:13:25.360
it looks like it's tested to be compatible with PyPI also,


00:13:25.360 --> 00:13:26.800
which is kind of nice.


00:13:26.800 --> 00:13:29.120
- Yeah, yeah, absolutely.


00:13:29.120 --> 00:13:33.080
Especially for what I'm doing in Piper,


00:13:33.080 --> 00:13:35.000
where wrangling configuration files


00:13:35.000 --> 00:13:37.840
is a lot of the functionality as a task runner,


00:13:37.840 --> 00:13:40.640
you're forever reading JSON, writing out YAML,


00:13:40.640 --> 00:13:43.800
converting between formats, converting between encodings,


00:13:43.800 --> 00:13:46.640
swapping out values inside configuration files,


00:13:46.640 --> 00:13:49.080
merging configuration files,


00:13:49.080 --> 00:13:52.640
and I'm now able to test all of this stuff


00:13:52.640 --> 00:13:54.560
without having to write integration tests


00:13:54.560 --> 00:13:58.260
for each and every permutation, which has been such a boon.


00:13:58.260 --> 00:14:01.560
- This actually does way more than I thought it did.


00:14:01.560 --> 00:14:03.240
This is, I'm gonna check this out.


00:14:03.240 --> 00:14:04.080
This is neat.


00:14:04.080 --> 00:14:06.720
- Yeah, there's a lot of cool stuff there, absolutely.


00:14:06.720 --> 00:14:08.600
And--


00:14:08.600 --> 00:14:09.960
- Yeah, and also if you have--


00:14:09.960 --> 00:14:13.760
Chris and Alvaro both think pretty, pretty neat out there.


00:14:13.760 --> 00:14:14.960
They're digging it.


00:14:14.960 --> 00:14:17.320
Yeah, and I see the comment there.


00:14:17.320 --> 00:14:19.960
It is like temp path with the difference


00:14:19.960 --> 00:14:23.960
that it's not actually writing to the desk itself, of course.


00:14:23.960 --> 00:14:26.200
And what's also a little bit difficult


00:14:26.200 --> 00:14:28.480
when you're using the temp directory and the temp file


00:14:28.480 --> 00:14:31.640
modules is depending on how you're testing,


00:14:31.640 --> 00:14:33.280
it doesn't always help you very much


00:14:33.280 --> 00:14:35.600
because the thing that might be generating the file


00:14:35.600 --> 00:14:37.680
might be the code under test.


00:14:37.680 --> 00:14:40.040
So you're effectively going to have to intercept that


00:14:40.040 --> 00:14:42.680
and create a temp file to attach to it.


00:14:42.680 --> 00:14:45.000
And then the temp file will clean itself up.


00:14:45.000 --> 00:14:48.880
But that starts interrupting the flow


00:14:48.880 --> 00:14:51.040
of the functional code so much that I start questioning


00:14:51.040 --> 00:14:53.320
whether it's even a useful unit test anymore.


00:14:53.320 --> 00:14:55.360
- Yeah, absolutely.


00:14:55.360 --> 00:14:58.240
Well, very, very cool.


00:14:58.240 --> 00:15:00.520
So Brian, before we move on,


00:15:00.520 --> 00:15:02.200
let me tell you about our sponsor, all right?


00:15:02.200 --> 00:15:03.760
- All right.


00:15:03.760 --> 00:15:05.880
- This episode of Python Bytes is brought to you


00:15:05.880 --> 00:15:09.040
by Microsoft for Startups Founders Hub.


00:15:09.040 --> 00:15:10.760
Starting a business is hard.


00:15:10.760 --> 00:15:13.280
By some estimates, over 90% of startups


00:15:13.280 --> 00:15:16.120
will go out of business in just their first year.


00:15:16.120 --> 00:15:18.080
With that in mind, Microsoft for Startups


00:15:18.080 --> 00:15:21.480
set out to understand what startups need to be successful


00:15:21.480 --> 00:15:23.280
and to create a digital platform


00:15:23.280 --> 00:15:25.280
to help them overcome those challenges.


00:15:25.280 --> 00:15:27.920
Microsoft for Startups Founders Hub was born.


00:15:27.920 --> 00:15:30.860
Founders Hub provides all founders at any stage


00:15:30.860 --> 00:15:34.840
with free resources to solve their startup challenges.


00:15:34.840 --> 00:15:37.260
The platform provides technology benefits,


00:15:37.260 --> 00:15:40.160
access to expert guidance and skilled resources,


00:15:40.160 --> 00:15:43.440
mentorship and networking connections, and much more.


00:15:43.440 --> 00:15:44.960
Unlike others in the industry,


00:15:44.960 --> 00:15:47.140
Microsoft for Startups Founders Hub


00:15:47.140 --> 00:15:50.120
doesn't require startups to be investor-backed


00:15:50.120 --> 00:15:52.960
or third-party validated to participate.


00:15:52.960 --> 00:15:55.440
Founders Hub is truly open to all.


00:15:55.440 --> 00:15:57.040
So what do you get if you join them?


00:15:57.040 --> 00:15:59.120
You speed up your development with free access


00:15:59.120 --> 00:16:02.000
to GitHub and Microsoft Cloud computing resources


00:16:02.000 --> 00:16:05.260
and the ability to unlock more credits over time.


00:16:05.260 --> 00:16:06.500
To help your startup innovate,


00:16:06.500 --> 00:16:08.900
Founders Hub is partnering with innovative companies


00:16:08.900 --> 00:16:12.380
like OpenAI, a global leader in AI research and development


00:16:12.380 --> 00:16:15.340
to provide exclusive benefits and discounts.


00:16:15.340 --> 00:16:17.620
Through Microsoft for Startups Founders Hub,


00:16:17.620 --> 00:16:20.400
becoming a founder is no longer about who you know.


00:16:20.400 --> 00:16:22.180
You'll have access to their mentorship network,


00:16:22.180 --> 00:16:24.260
giving you a pool of hundreds of mentors


00:16:24.260 --> 00:16:26.900
across a range of disciplines and areas


00:16:26.900 --> 00:16:29.340
like idea validation, fundraising,


00:16:29.340 --> 00:16:31.460
management and coaching, sales and marketing,


00:16:31.460 --> 00:16:34.060
as well as specific technical stress points.


00:16:34.060 --> 00:16:35.720
You'll be able to book a one-on-one meeting


00:16:35.720 --> 00:16:36.560
with the mentors,


00:16:36.560 --> 00:16:39.340
many of whom are former founders themselves.


00:16:39.340 --> 00:16:40.940
Make your idea a reality today


00:16:40.940 --> 00:16:44.460
with the critical support you'll get from Founders Hub.


00:16:44.460 --> 00:16:45.420
To join the program,


00:16:45.420 --> 00:16:48.540
just visit pythonbytes.fm/foundershub.


00:16:48.540 --> 00:16:51.020
All one word, no links in your show notes.


00:16:51.020 --> 00:16:53.380
Thank you to Microsoft for supporting the show.


00:16:53.380 --> 00:16:59.340
- Awesome, thank you, Microsoft.


00:16:59.340 --> 00:17:04.100
Now, let me tell you about something that sounds incredibly simple,


00:17:04.100 --> 00:17:07.600
but as you kind of unwind it, you're like, "Wait, it does that too?


00:17:07.600 --> 00:17:09.600
Oh, it does that too? Oh, that's kind of cool."


00:17:09.600 --> 00:17:13.600
It's pretty similar to the fake file system that Thomas was just telling us about.


00:17:13.600 --> 00:17:15.600
This thing called Sternum.


00:17:15.600 --> 00:17:19.600
Sternum is a fantastic name.


00:17:19.600 --> 00:17:22.100
It's short for string enum, right?


00:17:22.100 --> 00:17:25.100
Enums, when were enums added? Was that 3.4?


00:17:25.100 --> 00:17:27.600
Something like that? A little while ago.


00:17:28.400 --> 00:17:31.240
So enums have been in Python for a while,


00:17:31.240 --> 00:17:34.980
pretty much pre-history now that those are


00:17:34.980 --> 00:17:36.940
no longer supported.


00:17:36.940 --> 00:17:39.080
And with enums, you can write cool code


00:17:39.080 --> 00:17:42.420
that says this class, its fields are enumerations,


00:17:42.420 --> 00:17:46.720
and then you can say, you know, enum type.enum value,


00:17:46.720 --> 00:17:48.920
and you can use that instead of magic words.


00:17:48.920 --> 00:17:53.240
So for example, you might have HTTP method


00:17:53.240 --> 00:17:55.960
or something like that, or let's say HTTP status,


00:17:55.960 --> 00:17:57.720
start with that one, 'cause that's like a built-in type


00:17:57.720 --> 00:18:05.880
you could do easily. You could have a 200, a 201, a 400, a 500, a 404, those kinds of things.


00:18:05.880 --> 00:18:11.000
You could have like HTTP statuses dot and then those types with those numbers, right?


00:18:11.000 --> 00:18:19.560
But there's a couple of challenges to working with those. Their natural representation is a number,


00:18:19.560 --> 00:18:25.320
not a string. And I know you can derive from enum and then also derive from string, but like I said,


00:18:25.320 --> 00:18:27.320
more stuff happening than just that.


00:18:27.320 --> 00:18:33.760
So this sternum allows you to create enums like that


00:18:33.760 --> 00:18:36.880
and use the enum auto, enum.auto field.


00:18:36.880 --> 00:18:38.760
So I can say, here's an HTTP method,


00:18:38.760 --> 00:18:41.160
but like verbs is really probably what it should be.


00:18:41.160 --> 00:18:44.680
So you have a get, you have a head and a post and a put,


00:18:44.680 --> 00:18:47.120
and you just say auto, auto, auto, auto.


00:18:47.120 --> 00:18:50.760
But the actual representation is that the get


00:18:50.760 --> 00:18:53.040
is the string get.


00:18:53.040 --> 00:18:58.040
And the like, put one or post is, you know, put or post.


00:18:58.040 --> 00:19:05.380
Yeah, and Alvaro is out there pointing out,


00:19:05.380 --> 00:19:08.220
thank you that sternum was temporarily part of 3.10,


00:19:08.220 --> 00:19:09.280
but that it was dropped.


00:19:09.280 --> 00:19:10.600
Yeah, so there was--


00:19:10.600 --> 00:19:13.680
- I saw a note that it might be included in 3.11 again.


00:19:13.680 --> 00:19:15.300
- Okay, that'd be fantastic.


00:19:15.300 --> 00:19:16.140
- It would be.


00:19:16.140 --> 00:19:18.280
- Yeah, so there's some really neat stuff in here.


00:19:18.280 --> 00:19:20.480
For example, one of the things that's nice


00:19:20.480 --> 00:19:23.900
is because this thing basically has the value string,


00:19:23.900 --> 00:19:25.640
where you're using it,


00:19:25.640 --> 00:19:28.320
you can actually use it where a string would be accepted.


00:19:28.320 --> 00:19:30.620
So here, if you're doing a request to a URL


00:19:30.620 --> 00:19:32.060
and you got to say method equals,


00:19:32.060 --> 00:19:35.500
here you can say method equals http method.head


00:19:35.500 --> 00:19:37.260
or whatever from the enum


00:19:37.260 --> 00:19:41.660
and it directly passes just the string head to the method.


00:19:41.660 --> 00:19:45.260
So it's a really nice way to like gather up string values


00:19:45.260 --> 00:19:47.780
that are like part of a group, right?


00:19:47.780 --> 00:19:50.140
Like HTTP verbs or something like that.


00:19:50.140 --> 00:19:52.380
>> Wow.


00:19:52.380 --> 00:19:53.880
>> So that's pretty neat.


00:19:53.880 --> 00:19:56.520
>> Okay. The side question is,


00:19:56.520 --> 00:19:58.200
I don't really use auto much.


00:19:58.200 --> 00:20:01.120
Is auto used anywhere else or is auto just a-


00:20:01.120 --> 00:20:03.480
>> It comes out of the enum module.


00:20:03.480 --> 00:20:04.240
>> Okay.


00:20:04.240 --> 00:20:05.000
>> Part of it.


00:20:05.000 --> 00:20:07.440
>> So it's part of the enum thing.


00:20:07.440 --> 00:20:10.440
One of the things I really like about this that is


00:20:10.440 --> 00:20:13.120
super tricky with enums is databases.


00:20:13.120 --> 00:20:19.640
So for example, imagine we had get, head, and post.


00:20:19.640 --> 00:20:21.840
So we just had auto, but it was an integer based one.


00:20:21.840 --> 00:20:23.740
So it was like one, two, three,


00:20:23.740 --> 00:20:25.860
and we store it in the database, right?


00:20:25.860 --> 00:20:29.020
As a one or two or three, and then you parse it back fine.


00:20:29.020 --> 00:20:32.900
But then somebody adds another auto thing in there


00:20:32.900 --> 00:20:34.060
and they don't put it at the end.


00:20:34.060 --> 00:20:35.740
They're like, oh, this one starts with a D.


00:20:35.740 --> 00:20:37.700
So it goes after delete.


00:20:37.700 --> 00:20:40.380
Well, all the stuff after that one


00:20:40.380 --> 00:20:43.140
is now off by one in the database, right?


00:20:43.140 --> 00:20:45.260
Like, so this, if it goes into the database,


00:20:45.260 --> 00:20:48.700
it goes in as a string and it'll parse back as the string.


00:20:48.700 --> 00:20:51.420
It also has cool stuff like lowercase sternum


00:20:51.420 --> 00:20:54.220
and uppercase stringenum.


00:20:54.220 --> 00:20:55.700
So you can derive from that instead.


00:20:55.700 --> 00:20:58.540
And then no matter how you define your fields,


00:20:58.540 --> 00:21:00.460
you get a lowercase string version


00:21:00.460 --> 00:21:02.300
or an uppercase string version.


00:21:02.300 --> 00:21:05.880
And there's other cases as well.


00:21:05.880 --> 00:21:09.500
There's Pascal case, snake case, kebab case,


00:21:09.500 --> 00:21:11.180
macro case and camel case.


00:21:11.180 --> 00:21:13.520
Woo, go crazy on them people.


00:21:13.520 --> 00:21:15.340
And you can have the same code,


00:21:15.340 --> 00:21:18.860
but then like the string representation varies.


00:21:18.860 --> 00:21:21.380
So that's pretty awesome.


00:21:21.380 --> 00:21:22.980
- I think I'm gonna go with kebab case


00:21:22.980 --> 00:21:23.820
just because that's what it's like.


00:21:23.820 --> 00:21:25.980
- It's so fun, I know.


00:21:25.980 --> 00:21:30.980
And then, yeah, you can also directly assign the value.


00:21:30.980 --> 00:21:34.140
So, you know, enum value equals some string


00:21:34.140 --> 00:21:36.220
and then it like, right,


00:21:36.220 --> 00:21:37.380
you don't have to worry about a casing


00:21:37.380 --> 00:21:39.020
that's exactly the string that you put.


00:21:39.020 --> 00:21:40.540
- Yeah. - Right?


00:21:40.540 --> 00:21:42.020
So there it is.


00:21:42.020 --> 00:21:44.500
It's like regular enum but strings.


00:21:44.500 --> 00:21:48.540
And as people pointed out that it's not that different


00:21:48.540 --> 00:21:50.900
from what people have been considering for CPython.


00:21:50.900 --> 00:21:53.020
I'm pretty sure I'd heard about it as well


00:21:53.020 --> 00:21:55.620
and being in there, but the fact that it's not there,


00:21:55.620 --> 00:21:57.260
maybe it'll be there, maybe not, we'll see.


00:21:57.260 --> 00:21:59.300
It's interesting, but this has a lot of cool features.


00:21:59.300 --> 00:22:02.560
And if you're not using 3.11 or want to depend upon it,


00:22:02.560 --> 00:22:06.140
this is a small little project.


00:22:06.140 --> 00:22:07.580
- Yeah, it's nice.


00:22:07.580 --> 00:22:08.860
- Yeah. - Cool.


00:22:08.860 --> 00:22:10.740
- Thomas, what do you think?


00:22:10.740 --> 00:22:12.060
- This is great.


00:22:12.060 --> 00:22:16.660
I especially like how it's smart enough to auto-cast


00:22:16.660 --> 00:22:18.540
so that we use the enum,


00:22:18.540 --> 00:22:21.860
it will end up translating to a string


00:22:21.860 --> 00:22:23.400
when you're actually hitting the database


00:22:23.400 --> 00:22:24.980
or your underlying API.


00:22:24.980 --> 00:22:26.380
- Yeah, it makes it actually usable


00:22:26.380 --> 00:22:28.260
in those situations just directly.


00:22:28.260 --> 00:22:30.060
Yeah, which I think is great.


00:22:30.060 --> 00:22:31.860
- And funnily enough, the example they chose


00:22:31.860 --> 00:22:34.020
is so great by way of great documentation


00:22:34.020 --> 00:22:36.540
because HTTP verbs are just almost


00:22:36.540 --> 00:22:39.940
the example of magic strings, right?


00:22:39.940 --> 00:22:41.740
- Yeah, exactly, exactly.


00:22:41.740 --> 00:22:46.020
>> Quite cool. All right, Ryan, over to you.


00:22:46.020 --> 00:22:48.400
>> I'd like to review your code a little bit.


00:22:48.400 --> 00:22:51.020
No. I don't know.


00:22:51.020 --> 00:22:53.220
I was trying to do a transition thing going.


00:22:53.220 --> 00:22:57.060
Tim Hopper wrote this article which I absolutely love,


00:22:57.060 --> 00:23:02.060
and it's called Code Review Guidelines for Data Science Teams.


00:23:02.060 --> 00:23:04.440
I just recommend everybody go read it.


00:23:04.440 --> 00:23:06.260
It's short, it's good.


00:23:06.260 --> 00:23:11.460
But one of the things I really like that he highlighted is,


00:23:11.460 --> 00:23:14.180
before he got into the code review


00:23:14.180 --> 00:23:16.020
or the code review guidelines,


00:23:16.020 --> 00:23:20.420
he started with why are we doing a code review?


00:23:20.420 --> 00:23:22.460
What is a code review for?


00:23:22.460 --> 00:23:25.140
And this is something I think that is important


00:23:25.140 --> 00:23:27.980
just to talk with whoever, whatever team is going on


00:23:27.980 --> 00:23:29.860
and talking, maybe even sticking it


00:23:29.860 --> 00:23:34.300
in a participation guideline in a project,


00:23:34.300 --> 00:23:37.860
open source project even, is that it's not just,


00:23:37.860 --> 00:23:39.820
it's not just so that we can look at the code


00:23:39.820 --> 00:23:41.700
or check it to merge it.


00:23:41.700 --> 00:23:46.180
So his reasons for a code review are first code correctness.


00:23:46.180 --> 00:23:47.700
And that's what we think about


00:23:47.700 --> 00:23:49.580
is making sure the code's correct,


00:23:49.580 --> 00:23:53.900
but also code familiarity.


00:23:53.900 --> 00:23:56.860
So you might be the expert on a project


00:23:56.860 --> 00:23:59.380
and everybody else is only kind of new on it.


00:23:59.380 --> 00:24:02.460
You still should have code reviews for your code changes


00:24:02.460 --> 00:24:05.340
so that everybody else can watch also


00:24:05.340 --> 00:24:08.780
and get familiar with the changes going on.


00:24:08.780 --> 00:24:10.260
So that's nice.


00:24:10.260 --> 00:24:11.700
Design feedback, of course,


00:24:11.700 --> 00:24:14.900
and mutual learning and regression protection


00:24:14.900 --> 00:24:17.780
are all the reasons why he did a code review.


00:24:17.780 --> 00:24:21.980
And the other thing I also love


00:24:21.980 --> 00:24:23.940
is what to leave out of code review.


00:24:23.940 --> 00:24:26.900
So code reviews are not about trying to impose


00:24:26.900 --> 00:24:29.140
your guidelines on somebody else.


00:24:29.140 --> 00:24:35.300
And they're also not a reason to push off responsibility.


00:24:35.300 --> 00:24:37.700
So as long as your code's getting reviewed,


00:24:37.700 --> 00:24:39.260
it does not be correct, right?


00:24:39.260 --> 00:24:41.780
'Cause everybody, somebody will catch any problems.


00:24:41.780 --> 00:24:43.900
It's a bad thing to do in a code review.


00:24:43.900 --> 00:24:46.180
So make sure your code's correct,


00:24:46.180 --> 00:24:49.380
that as far, it's all cleaned up as soon as you,


00:24:49.380 --> 00:24:52.680
what you think is it's ready, and then submit it,


00:24:52.680 --> 00:24:54.180
but then also be nice.


00:24:54.180 --> 00:24:57.140
So being nice is important.


00:24:57.140 --> 00:24:58.500
- Yeah, very cool.


00:24:58.500 --> 00:25:00.340
- So then it goes, he goes through,


00:25:00.340 --> 00:25:01.660
I'm not gonna go through all these here,


00:25:01.660 --> 00:25:03.820
but he goes through different things about


00:25:04.900 --> 00:25:09.140
what to think about before you do a creative pull request


00:25:09.140 --> 00:25:12.940
and then what to do if you're reviewing a pull request.


00:25:12.940 --> 00:25:14.700
And a lot of these are just,


00:25:14.700 --> 00:25:17.500
they're just around being a kind human


00:25:17.500 --> 00:25:18.700
to the person on the other end.


00:25:18.700 --> 00:25:21.580
So that's really kind of what it's about.


00:25:21.580 --> 00:25:26.340
- I saw a mention in there somewhere that I really liked,


00:25:26.340 --> 00:25:28.540
which is, I mean, by nature,


00:25:28.540 --> 00:25:30.220
a code review is sort of nitpicky, right?


00:25:30.220 --> 00:25:32.280
You're paying attention to flaws,


00:25:32.280 --> 00:25:34.420
but it's nice to compliment also.


00:25:34.420 --> 00:25:37.420
Like if there's something nifty or cool or cute,


00:25:37.420 --> 00:25:40.420
acknowledge, compliment, call attention to it.


00:25:40.420 --> 00:25:41.860
- Oh, that's a good point.


00:25:41.860 --> 00:25:42.860
And I really like that.


00:25:42.860 --> 00:25:44.780
I also think, so one of the things


00:25:44.780 --> 00:25:47.940
that you don't wanna do in a code review


00:25:47.940 --> 00:25:50.740
is like one of the guidelines is,


00:25:50.740 --> 00:25:52.460
we're not looking for perfection.


00:25:52.460 --> 00:25:57.700
That isn't one of the things we're looking for.


00:25:57.700 --> 00:26:00.980
But so what happens if you notice something


00:26:00.980 --> 00:26:02.780
and you're like, it's a little weird.


00:26:03.740 --> 00:26:05.060
I'd like to say something about it,


00:26:05.060 --> 00:26:07.060
but I don't know how to say that.


00:26:07.060 --> 00:26:08.940
His comment is to have,


00:26:08.940 --> 00:26:11.860
if you've got a minor thing that you want to comment on,


00:26:11.860 --> 00:26:13.340
go ahead and sort of tag it.


00:26:13.340 --> 00:26:16.860
He recommends tagging it with knit in IT,


00:26:16.860 --> 00:26:19.060
or a nitpick or something.


00:26:19.060 --> 00:26:21.840
Just to be clear that I'm,


00:26:21.840 --> 00:26:23.220
I don't know if I like the word knit,


00:26:23.220 --> 00:26:25.980
but to be clear, hey, I noticed this,


00:26:25.980 --> 00:26:28.100
maybe we want to change this in the future,


00:26:28.100 --> 00:26:29.580
somehow indicate to the person


00:26:29.580 --> 00:26:31.180
that they don't need to fix this


00:26:31.180 --> 00:26:33.060
before the PR gets merged.


00:26:33.060 --> 00:26:34.220
you're just noticed it.


00:26:34.220 --> 00:26:37.380
So, and it might be something that the person


00:26:37.380 --> 00:26:40.460
that's submitting the PR didn't realize in the first place


00:26:40.460 --> 00:26:41.980
and went, oh yeah, I don't like that either.


00:26:41.980 --> 00:26:42.820
I'm gonna fix it.


00:26:42.820 --> 00:26:46.500
Or yes, I do know about that and I do plan on fixing it later


00:26:46.500 --> 00:26:47.540
or whatever.


00:26:47.540 --> 00:26:50.820
So just an interesting guideline.


00:26:50.820 --> 00:26:54.540
And I think it can just, I'm kind of,


00:26:54.540 --> 00:26:57.700
I've been on a kick lately of reading things about community


00:26:57.700 --> 00:27:00.860
and creating cohesive teams.


00:27:00.860 --> 00:27:03.380
And the review process is definitely somewhere


00:27:03.380 --> 00:27:07.100
that you need to have attention to for most teams.


00:27:07.100 --> 00:27:10.180
So anyway, that's it.


00:27:10.180 --> 00:27:12.280
- Yeah, I like it.


00:27:12.280 --> 00:27:13.820
This is really handy.


00:27:13.820 --> 00:27:18.700
I love the idea of having as much as possible


00:27:18.700 --> 00:27:21.020
have the automation make the complaints.


00:27:21.020 --> 00:27:23.340
And like Thomas said, have the people give the compliments


00:27:23.340 --> 00:27:25.300
and the sort of interesting discussion, right?


00:27:25.300 --> 00:27:27.220
But like if black can just take care of the formatting


00:27:27.220 --> 00:27:29.860
like you shouldn't have to debate the formatting.


00:27:29.860 --> 00:27:32.500
And if the linter can tell you, you know what?


00:27:32.500 --> 00:27:33.700
There's something wrong with this.


00:27:33.700 --> 00:27:36.340
Just like let the linter be the bad guy.


00:27:36.340 --> 00:27:38.060
- Yeah, it was one of the guidelines that he brought up,


00:27:38.060 --> 00:27:40.660
which is interesting is, especially with CI


00:27:40.660 --> 00:27:44.340
and we're pushing a lot of things on black or linters


00:27:44.340 --> 00:27:48.660
that to wait, so wait a little bit.


00:27:48.660 --> 00:27:52.380
So don't like review a code review right away,


00:27:52.380 --> 00:27:55.300
especially not if the CI hasn't finished.


00:27:55.300 --> 00:27:58.900
Let the CI finish and let the person creating it


00:27:58.900 --> 00:28:01.500
fix anything before you jump in.


00:28:01.500 --> 00:28:05.500
I also, pet peeve of mine, don't comment on it right away.


00:28:05.500 --> 00:28:07.940
I might, one of the things I do frequently


00:28:07.940 --> 00:28:12.940
is I'll create a PR, especially in a work setting.


00:28:12.940 --> 00:28:16.660
I'll create a PR and then there's some complicated things.


00:28:16.660 --> 00:28:19.620
So I plan on going through and writing some comments


00:28:19.620 --> 00:28:21.980
around some of the complicated bits,


00:28:21.980 --> 00:28:24.340
like why did I do certain things?


00:28:24.340 --> 00:28:28.420
And so if you see a PR right away,


00:28:28.420 --> 00:28:31.180
especially from me, wait 10 minutes or so


00:28:31.180 --> 00:28:32.540
before commenting on it.


00:28:32.540 --> 00:28:34.660
'Cause I might have answered your question


00:28:34.660 --> 00:28:35.900
before you had a chance to ask it.


00:28:35.900 --> 00:28:37.900
- An exclamation might be coming, yeah.


00:28:37.900 --> 00:28:39.520
- Yeah, anyway.


00:28:39.520 --> 00:28:44.700
- Awesome, all right, Thomas, over to you.


00:28:44.700 --> 00:28:47.580
- We're about to head into controversy


00:28:47.580 --> 00:28:49.380
because there's been some--


00:28:49.380 --> 00:28:50.500
- Are you gonna bash on something?


00:28:50.500 --> 00:28:51.660
Come on, don't do that.


00:28:51.660 --> 00:28:53.700
- I'm gonna bash it over the head with a,


00:28:53.700 --> 00:28:57.060
like a K-phone. - Bash it with Python.


00:28:57.060 --> 00:29:03.460
So, partly inspired on the continuation of last week's discussion you had about running


00:29:03.460 --> 00:29:11.940
subprocesses from Python. And Itamar Turner-Trowering wrote an article this week called "Please,


00:29:11.940 --> 00:29:18.700
please, emphasis mine, stop writing shell scripts." Now, this, as you might imagine,


00:29:18.700 --> 00:29:26.460
raised a bit of questions on the usual places like Reddit and Twitter. But if nothing else,


00:29:26.460 --> 00:29:34.620
aside, the article is a very good and succinct summary of the most common gotchas and problems


00:29:34.620 --> 00:29:41.460
with Bash, which we can almost all summarize as that error handling is strange if you're


00:29:41.460 --> 00:29:46.700
used to other programming languages, like Bash is a kingdom unto its own when it comes


00:29:46.700 --> 00:29:53.100
to programming languages. So he also gives a great recommendation for if you really,


00:29:53.100 --> 00:29:56.740
you really have to write in Bash what you might want to do.


00:29:56.740 --> 00:30:01.420
And that would be to use the unofficial Bash strict mode,


00:30:01.420 --> 00:30:06.380
which basically involves setting that boilerplate on top of your Bash.


00:30:06.380 --> 00:30:09.180
I'm not going to cover all the details, but basically,


00:30:09.180 --> 00:30:12.940
the E and the U option will fail immediately on error.


00:30:12.940 --> 00:30:14.940
It will fail on unset variables.


00:30:14.940 --> 00:30:19.420
And if you add the pipe fail option, errors won't pass between pipes.


00:30:19.420 --> 00:30:22.280
a pipe will actually fail immediately


00:30:22.280 --> 00:30:24.280
if there's an error processing.


00:30:24.280 --> 00:30:26.280
Awesome. Like it should.


00:30:26.280 --> 00:30:28.280
Like it should, indeed.


00:30:28.280 --> 00:30:30.280
But the point is,


00:30:30.280 --> 00:30:32.920
there's batches on all technology,


00:30:32.920 --> 00:30:34.920
and there's a lot of problems here.


00:30:34.920 --> 00:30:38.100
And let me add, although this article mostly aims at batch,


00:30:38.100 --> 00:30:42.200
I am very happy including Born and SSH


00:30:42.200 --> 00:30:44.200
and Phish and Techupick


00:30:44.200 --> 00:30:46.200
underneath the same dictum.


00:30:46.200 --> 00:30:54.400
Now, he goes on to talk about the typical reasons we hear of why we should be using Bash,


00:30:54.400 --> 00:30:58.720
of which the top one is, well, it's the most common,


00:30:58.720 --> 00:31:04.920
you're guaranteed to have an SH runtime at least on any given machine that you're going to be using.


00:31:04.920 --> 00:31:12.400
But the point is, not really, because when we're doing code automation,


00:31:12.400 --> 00:31:15.760
almost by definition, the programming language you're coding in,


00:31:15.760 --> 00:31:17.760
its runtime is on the server.


00:31:17.760 --> 00:31:22.800
So this argument that somehow it's good to go to the lowest common denominator,


00:31:22.800 --> 00:31:24.800
aka SH or Bash,


00:31:24.800 --> 00:31:28.240
when you already have Python on the machine is sort of, well, why?


00:31:28.240 --> 00:31:30.880
And especially when we're talking about Python,


00:31:30.880 --> 00:31:32.880
which is so great at automation,


00:31:32.880 --> 00:31:35.200
it just baffles the mind.


00:31:35.200 --> 00:31:39.680
That's a good point. You don't have to set up a compiler or any of that kind of business.


00:31:39.680 --> 00:31:41.560
I'd say the same thing about Golang.


00:31:41.560 --> 00:31:44.320
I mean, by definition, when you're compiling Go,


00:31:44.320 --> 00:31:45.560
the Go compiler is right there.


00:31:45.560 --> 00:31:48.320
You might as well be writing a Go script


00:31:48.320 --> 00:31:50.400
or whichever your programming language is.


00:31:50.400 --> 00:31:55.400
I mean, maybe if you're starting to talk about C or C++,


00:31:55.400 --> 00:31:59.480
there's maybe a different argument that we can have there.


00:31:59.480 --> 00:32:01.520
The second point it brings up


00:32:01.520 --> 00:32:05.120
is what I'm gonna paraphrase as get good,


00:32:05.120 --> 00:32:07.720
which is this Bash guru response,


00:32:07.720 --> 00:32:09.860
which we saw a bit of in the last week,


00:32:09.860 --> 00:32:12.020
that, "Oh, you're just bad at Bash."


00:32:12.020 --> 00:32:13.500
Like, if you were better at Bash,


00:32:13.500 --> 00:32:16.100
you wouldn't be complaining about these things,


00:32:16.100 --> 00:32:19.940
which is not a great reason.


00:32:19.940 --> 00:32:24.940
It's just because it's not better because it's hard, right?


00:32:24.940 --> 00:32:28.140
We have better tools available.


00:32:28.140 --> 00:32:30.860
We have tools that behave more responsibly.


00:32:30.860 --> 00:32:33.580
And something that I think is very important


00:32:33.580 --> 00:32:35.220
in line with what you've been talking about, Brian,


00:32:35.220 --> 00:32:36.480
about building teams,


00:32:36.480 --> 00:32:38.980
is very often your automation activities


00:32:38.980 --> 00:32:42.000
start becoming this specialized zone


00:32:42.000 --> 00:32:44.940
that only two or three people on the team can even look at


00:32:44.940 --> 00:32:46.620
because they're the Bash gurus


00:32:46.620 --> 00:32:48.960
and everyone else is too afraid to touch it.


00:32:48.960 --> 00:32:50.840
Whereas if you keep your automation activities


00:32:50.840 --> 00:32:52.360
within the language you're coding in,


00:32:52.360 --> 00:32:54.160
suddenly everyone on the team


00:32:54.160 --> 00:32:56.880
can start carrying their weight, right?


00:32:56.880 --> 00:33:00.400
- Yeah, I kind of relate to this a lot.


00:33:00.400 --> 00:33:02.420
I've been on projects where we've had a lot


00:33:02.420 --> 00:33:04.240
of our automation in Bash


00:33:04.240 --> 00:33:07.380
and others that have been other languages.


00:33:07.380 --> 00:33:11.820
Right now, it was one of those things of,


00:33:11.820 --> 00:33:15.540
especially if you're not looking on a Windows environment,


00:33:15.540 --> 00:33:18.000
Bash isn't there all automatically.


00:33:18.000 --> 00:33:20.860
So, and a lot of the team members


00:33:20.860 --> 00:33:22.540
might not be familiar with it.


00:33:22.540 --> 00:33:25.780
So the thing that, I don't know if he addresses this,


00:33:25.780 --> 00:33:27.820
the thing that I was thinking about was,


00:33:27.820 --> 00:33:31.700
we all know Python, if we're programming Python,


00:33:31.700 --> 00:33:36.700
but we might not all know the automation parts of it.


00:33:36.700 --> 00:33:40.860
The way to do like file manipulation or--


00:33:40.860 --> 00:33:43.980
- SH, util and that kind of stuff.


00:33:43.980 --> 00:33:46.700
- Stuff that we might be familiar with with Bash


00:33:46.700 --> 00:33:50.200
because if we're using it all the time on the command line,


00:33:50.200 --> 00:33:51.660
I already know how to do it.


00:33:51.660 --> 00:33:55.740
But I might not know how to do that sort of stuff in Python


00:33:55.740 --> 00:33:57.820
because I'm not using Python like that.


00:33:57.820 --> 00:33:59.220
But anyway.


00:33:59.220 --> 00:34:01.780
Well, my response to that would be that


00:34:01.780 --> 00:34:03.840
(laughs)


00:34:03.840 --> 00:34:06.060
whatever the thing is that you don't know how to do


00:34:06.060 --> 00:34:09.720
in Python, your chances of running into trouble with Bash


00:34:09.720 --> 00:34:13.220
are to my mind, a lot higher than they are with Python.


00:34:13.220 --> 00:34:14.060
- Yeah.


00:34:14.060 --> 00:34:15.500
- Or at least when things misbehave in Python,


00:34:15.500 --> 00:34:17.540
your control of flow is better


00:34:17.540 --> 00:34:20.660
so that you probably will have a,


00:34:20.660 --> 00:34:23.180
especially as the scripts start getting bigger,


00:34:23.180 --> 00:34:27.100
you will have better control over where the issues might be


00:34:27.100 --> 00:34:29.820
or you would be better able to isolate those areas


00:34:29.820 --> 00:34:31.940
that you're not exactly sure of.


00:34:31.940 --> 00:34:34.780
I saw someone in chat last week raise the specter


00:34:34.780 --> 00:34:38.980
of make files that call shell scripts, that call make files.


00:34:38.980 --> 00:34:42.060
And I mean, this is not uncommon.


00:34:42.060 --> 00:34:44.260
I'm sure we've all seen these things.


00:34:44.260 --> 00:34:45.980
And I'm actually very interested


00:34:45.980 --> 00:34:47.860
in the psychology around this


00:34:47.860 --> 00:34:50.780
because we're all coders, right?


00:34:50.780 --> 00:34:53.780
I assume we're here because we enjoy automating things.


00:34:53.780 --> 00:34:55.700
We enjoy solving problems.


00:34:55.700 --> 00:35:00.700
we probably have a certain problem solving sort of mindset


00:35:00.700 --> 00:35:03.200
that got us into this to begin with.


00:35:03.200 --> 00:35:05.600
Yet, it seems like we spend so much time


00:35:05.600 --> 00:35:08.140
automating our customer's business processes


00:35:08.140 --> 00:35:11.040
that we forget to automate our own coding processes.


00:35:11.040 --> 00:35:15.300
Or when we do, we deallocate the priority, we debudget it,


00:35:15.300 --> 00:35:17.720
we end up focusing on all sorts of other things


00:35:17.720 --> 00:35:19.520
other than this essential housekeeping.


00:35:19.520 --> 00:35:21.480
- Or treat it like a throwaway code


00:35:21.480 --> 00:35:23.900
instead of code that needs to be carefully factored


00:35:23.900 --> 00:35:25.160
and put together.


00:35:25.160 --> 00:35:26.220
exactly right.


00:35:26.220 --> 00:35:28.540
And I would argue it's a bit like housekeeping.


00:35:28.540 --> 00:35:29.660
You know, no one likes doing it,


00:35:29.660 --> 00:35:31.220
but if you don't want to live in a pigsty,


00:35:31.220 --> 00:35:32.740
you got to do it.


00:35:32.740 --> 00:35:34.460
You know, instead.


00:35:34.460 --> 00:35:36.420
- Well, also to be honest,


00:35:36.420 --> 00:35:37.740
I was there once of like,


00:35:37.740 --> 00:35:41.020
I don't know how to do this automation stuff in Python,


00:35:41.020 --> 00:35:43.480
but it bugged me that I didn't know how.


00:35:43.480 --> 00:35:46.580
So I'm like, okay, well, what do I need to learn?


00:35:46.580 --> 00:35:49.560
Like the few things like searching for stuff,


00:35:49.560 --> 00:35:52.140
like I normally would have used Perl for Regex


00:35:52.140 --> 00:35:54.140
or something like that, or said.


00:35:54.140 --> 00:35:55.580
all that stuff you can do with Python.


00:35:55.580 --> 00:35:57.380
And actually there's tons of articles on it.


00:35:57.380 --> 00:35:59.140
It's really not that hard to go,


00:35:59.140 --> 00:36:02.420
okay, the pieces I'm missing, how do I do that?


00:36:02.420 --> 00:36:03.580
And just go learn it.


00:36:03.580 --> 00:36:06.460
And then it's not that hard to switch


00:36:06.460 --> 00:36:08.060
a lot of automation to Python.


00:36:08.060 --> 00:36:10.220
- Yeah, definitely not.


00:36:10.220 --> 00:36:12.340
And I mean, so much other automation


00:36:12.340 --> 00:36:13.940
happens in Python anyway.


00:36:13.940 --> 00:36:17.220
I mean, in fact, kind of compiled programming languages


00:36:17.220 --> 00:36:19.780
will often use Python as an automation language.


00:36:19.780 --> 00:36:22.240
It's so handy for the automation process.


00:36:23.180 --> 00:36:28.540
There is another psychological thing which I find, or I think psychological thing, that I find quite curious here


00:36:28.540 --> 00:36:35.040
which is this dealing with complex shell scripts almost becomes this technocratic rite of passage


00:36:35.040 --> 00:36:41.740
where when you couple that with imposter syndrome, it's very easy to be intimidated by the bash bros


00:36:41.740 --> 00:36:46.980
when they do these really clever one-liner bashisms that you can't make head or tail of


00:36:46.980 --> 00:36:50.980
and it's like, "Yeah, look how clever this is," but it's very hard to maintain


00:36:50.980 --> 00:36:53.780
and it's almost hard to call that to account


00:36:53.780 --> 00:36:56.380
unless you're very sure of yourself.


00:36:56.380 --> 00:36:58.420
Because you almost have to justify yourself


00:36:58.420 --> 00:37:00.020
as to why you dislike it.


00:37:00.020 --> 00:37:02.260
Like you first have to prove your bona fides.


00:37:02.260 --> 00:37:05.980
I think it's sort of the tech equivalent of,


00:37:05.980 --> 00:37:09.420
back in my day, we didn't have X.


00:37:09.420 --> 00:37:12.580
Like whatever X is, shoe or shoes or toilet paper,


00:37:12.580 --> 00:37:15.700
like whatever.


00:37:15.700 --> 00:37:17.660
Just because something used to be difficult


00:37:17.660 --> 00:37:20.380
doesn't mean it needs to be difficult forevermore.


00:37:20.380 --> 00:37:24.260
The extra difficulty doesn't make it better.


00:37:24.260 --> 00:37:26.260
It's not a video game like Elden Ring.


00:37:26.260 --> 00:37:30.540
The easier this is, the more quickly and effectively


00:37:30.540 --> 00:37:33.340
you can do the housekeeping, the more you can get up


00:37:33.340 --> 00:37:35.340
with the features that actually pay the bills,


00:37:35.340 --> 00:37:37.340
which is to say the shiny, functional stuff


00:37:37.340 --> 00:37:40.140
that you can demo and put in front of customers.


00:37:40.140 --> 00:37:42.140
Yeah, absolutely.


00:37:42.140 --> 00:37:46.060
I have some real-time feedback and also a comment for you.


00:37:46.060 --> 00:37:50.460
Alvaro says there's a VS Code plugin called Shellshock,


00:37:50.460 --> 00:37:52.540
if he's remembering it correctly.


00:37:52.540 --> 00:37:54.380
Tells me when I'm doing something wrong or might blow up.


00:37:54.380 --> 00:37:55.980
There's also a plugin for PyCharm.


00:37:55.980 --> 00:37:59.040
So if you're gonna do it, have those things for sure.


00:37:59.040 --> 00:38:00.480
- Yeah, funnily enough,


00:38:00.480 --> 00:38:02.660
we've got immediate feedback to that,


00:38:02.660 --> 00:38:04.940
which is the author of the original article


00:38:04.940 --> 00:38:07.660
mentions Shellshock, which is effectively,


00:38:07.660 --> 00:38:11.280
like the commenter mentioned, a linter for Bash.


00:38:11.280 --> 00:38:13.460
But the article also mentions


00:38:13.460 --> 00:38:16.400
but it doesn't actually catch all things either.


00:38:16.400 --> 00:38:19.060
So like all linters, it can very easily lull you


00:38:19.060 --> 00:38:20.720
into a false sense of security,


00:38:20.720 --> 00:38:24.480
while it's not really necessarily addressing


00:38:24.480 --> 00:38:25.840
the underlying problems.


00:38:25.840 --> 00:38:30.480
And I almost feel like I don't even need to say this


00:38:30.480 --> 00:38:35.060
because anyone who's ever tried to debug a long bash script


00:38:35.060 --> 00:38:37.600
should know this, they're tricky.


00:38:37.600 --> 00:38:39.380
They fail in mysterious places


00:38:39.380 --> 00:38:41.680
and it's very hard to figure out why and how.


00:38:42.680 --> 00:38:46.460
- Yeah, but I do like this article pointing out


00:38:46.460 --> 00:38:49.080
how if you have to, to set up those flags


00:38:49.080 --> 00:38:52.600
to make it fail quicker, 'cause that helps a lot.


00:38:52.600 --> 00:38:54.040
So it's nice.


00:38:54.040 --> 00:38:54.880
Yeah.


00:38:54.880 --> 00:38:56.320
- Yeah, for sure.


00:38:56.320 --> 00:38:59.480
And also just to give the author massive amounts of credit,


00:38:59.480 --> 00:39:00.860
this isn't clickbait.


00:39:00.860 --> 00:39:04.720
He didn't position this as never ever use a bash.


00:39:04.720 --> 00:39:06.040
In fact, he explicitly says that,


00:39:06.040 --> 00:39:08.320
and okay, if you're doing something super simplistic,


00:39:08.320 --> 00:39:11.600
like the typical sort of things that goes into a get hook,


00:39:11.600 --> 00:39:14.160
a pre-commit hook where you're just running a command or two,


00:39:14.160 --> 00:39:16.840
then yeah, sure, of course, shell script's fine.


00:39:16.840 --> 00:39:20.320
But I would say as soon as you're running loops,


00:39:20.320 --> 00:39:22.560
as soon as you're doing conditional branching,


00:39:22.560 --> 00:39:24.240
as soon as you're worried about retries,


00:39:24.240 --> 00:39:25.560
as soon as you're doing--


00:39:25.560 --> 00:39:27.680
- Definitely, switch to Python.


00:39:27.680 --> 00:39:28.580
- Absolutely.


00:39:28.580 --> 00:39:31.520
- Yeah, and then another quick question,


00:39:31.520 --> 00:39:32.360
just a quick follow up.


00:39:32.360 --> 00:39:36.280
Have you considered Conch or--


00:39:36.280 --> 00:39:38.760
- I have not even heard of Conch, nevermind considered it.


00:39:38.760 --> 00:39:41.160
- So it's, I haven't done much with,


00:39:41.160 --> 00:39:42.280
I've sort of looked at it.


00:39:42.280 --> 00:39:46.600
It is a shell, like a competitor to bash or Z shell


00:39:46.600 --> 00:39:47.920
or something like that,


00:39:47.920 --> 00:39:52.280
where it's a proper Python environment


00:39:52.280 --> 00:39:53.680
directly in the shell.


00:39:53.680 --> 00:39:56.800
- That's almost PowerShell-esque.


00:39:56.800 --> 00:39:57.920
- Yeah, it's a little bit like PowerShell,


00:39:57.920 --> 00:40:00.760
where PowerShell is like kind of .NET C#-like,


00:40:00.760 --> 00:40:02.440
kind of, but not really.


00:40:02.440 --> 00:40:04.720
I suspect it's similar here, but.


00:40:04.720 --> 00:40:06.840
- And I know it's supposed to be pronounced conch,


00:40:06.840 --> 00:40:10.960
but my brain says zonch, because it's funner to say.


00:40:10.960 --> 00:40:13.240
- I know, but it has the shell, it has the conch shell.


00:40:13.240 --> 00:40:14.080
- Yeah.


00:40:14.080 --> 00:40:14.900
- That's how you gotta say it.


00:40:14.900 --> 00:40:15.740
- Yeah.


00:40:15.740 --> 00:40:16.580
- All right.


00:40:16.580 --> 00:40:19.080
- They even have the ASCII art going on for the logo.


00:40:19.080 --> 00:40:21.520
- They do indeed, they do indeed.


00:40:21.520 --> 00:40:23.720
All right, well, cool Thomas, that was a good conversation.


00:40:23.720 --> 00:40:24.920
- It was good.


00:40:24.920 --> 00:40:27.360
So do we have any extras?


00:40:27.360 --> 00:40:28.920
Michael, do you have any extras?


00:40:28.920 --> 00:40:31.040
- You know I got extras, right?


00:40:31.040 --> 00:40:33.360
I also, first real quick follow up,


00:40:33.360 --> 00:40:34.760
real time follow up from Henry Schreiner


00:40:34.760 --> 00:40:38.120
and the audience that PEP 663 was the PEP


00:40:38.120 --> 00:40:40.000
around string enum.


00:40:40.000 --> 00:40:40.840
- Oh, okay.


00:40:40.840 --> 00:40:43.080
And he's not sure if removing the support for that pet


00:40:43.080 --> 00:40:45.240
means removing stringing in from the standard lib or not,


00:40:45.240 --> 00:40:46.280
though.


00:40:46.280 --> 00:40:48.760
Doesn't do all the other stuff like the casing


00:40:48.760 --> 00:40:50.640
and the various other things that that cool package


00:40:50.640 --> 00:40:51.480
I talked about does.


00:40:51.480 --> 00:40:54.320
So maybe that package is, no matter what, relevant still


00:40:54.320 --> 00:40:57.200
or inspiration for the next one or whatever, right?


00:40:57.200 --> 00:41:01.520
In terms of extras, I do have some extras.


00:41:01.520 --> 00:41:03.920
Let me see what order I wanted to cover them in.


00:41:03.920 --> 00:41:06.920
I had two, but then one got rescheduled.


00:41:08.280 --> 00:41:11.100
This was supposed to be the transformation


00:41:11.100 --> 00:41:13.800
from bugs.python.org over to GitHub,


00:41:13.800 --> 00:41:14.860
but that got pushed back a week,


00:41:14.860 --> 00:41:16.460
so I'm not gonna talk about that.


00:41:16.460 --> 00:41:19.140
- You just did.


00:41:19.140 --> 00:41:21.140
- Well, I was gonna say it's happening.


00:41:21.140 --> 00:41:22.620
It should have happened by the time you hear this.


00:41:22.620 --> 00:41:24.020
Go check it out, but no, that's not true.


00:41:24.020 --> 00:41:25.940
- Well, now we can get ready.


00:41:25.940 --> 00:41:27.420
- Okay, just if you're curious,


00:41:27.420 --> 00:41:29.180
supposedly it's moved to April 1st,


00:41:29.180 --> 00:41:30.980
but it's April Fool's Day,


00:41:30.980 --> 00:41:33.220
so I'm not sure if it's really gonna happen or not.


00:41:33.220 --> 00:41:34.460
(laughing)


00:41:34.460 --> 00:41:36.380
- Maybe it's a long con,


00:41:36.380 --> 00:41:39.060
- The joke is being set up for an advance.


00:41:39.060 --> 00:41:40.020
- We're actually never doing this.


00:41:40.020 --> 00:41:41.860
No, I'm looking forward to that happening.


00:41:41.860 --> 00:41:42.700
That's great.


00:41:42.700 --> 00:41:45.140
All right, I just have like a general theme


00:41:45.140 --> 00:41:46.740
of sort of stuff that's like,


00:41:46.740 --> 00:41:48.740
they're all together,


00:41:48.740 --> 00:41:51.060
kind of a changing of the guard, if you will.


00:41:51.060 --> 00:41:52.300
- Okay.


00:41:52.300 --> 00:41:53.520
- Let's see here.


00:41:53.520 --> 00:41:56.860
So I have been switching so much of my software stuff around


00:41:56.860 --> 00:41:58.180
I've started using Vivaldi.


00:41:58.180 --> 00:41:59.780
Now I've been using Firefox for a long time,


00:41:59.780 --> 00:42:00.940
but started using Vivaldi,


00:42:00.940 --> 00:42:04.100
which I think is a really neat take on a browser.


00:42:04.100 --> 00:42:07.900
So switched over to Vivaldi and started using that.


00:42:07.900 --> 00:42:10.100
You know, there's a bunch of different things


00:42:10.100 --> 00:42:15.100
like Mozilla laid off 250 people recently.


00:42:15.100 --> 00:42:17.460
- And they're axing the developer tools team too.


00:42:17.460 --> 00:42:20.060
- Exactly, cut the developer tools team.


00:42:20.060 --> 00:42:24.060
They cut the threat team, the team that looks for like,


00:42:24.060 --> 00:42:24.900
- Yeah.


00:42:24.900 --> 00:42:27.700
- Attack to get like, I don't know.


00:42:27.700 --> 00:42:29.100
It's starting to make me a little nervous.


00:42:29.100 --> 00:42:30.260
So I'm trying out Vivaldi.


00:42:30.260 --> 00:42:31.980
I've been doing that for like a month or so


00:42:31.980 --> 00:42:34.400
and I'm enjoying that, right?


00:42:34.400 --> 00:42:38.020
- Mike, you said it's a different take on a browser.


00:42:38.020 --> 00:42:40.140
So it sounds like there's something


00:42:40.140 --> 00:42:42.500
conceptually different about it.


00:42:42.500 --> 00:42:43.900
- It's just super customizable.


00:42:43.900 --> 00:42:44.820
I think that's the thing.


00:42:44.820 --> 00:42:47.140
It's like, there's just all sorts of stuff.


00:42:47.140 --> 00:42:49.460
It comes with a built-in ad blockers and tracker blockers.


00:42:49.460 --> 00:42:51.000
I know some of them do tracker blockers,


00:42:51.000 --> 00:42:52.400
but built-in ad blockers, nice.


00:42:52.400 --> 00:42:54.180
I mean, Brave is the other one that kind of does that,


00:42:54.180 --> 00:42:56.320
but Brave's like, well, let's just trade those ads


00:42:56.320 --> 00:42:59.060
for our cryptocurrency ads that we'll put in there for you.


00:42:59.060 --> 00:43:00.520
And you get a little bit of cryptocurrency.


00:43:00.520 --> 00:43:02.680
This is like, no, we'll just block the ads.


00:43:02.680 --> 00:43:06.320
So anyway, I switched over to that,


00:43:06.320 --> 00:43:09.160
partly motivated by just concern around this,


00:43:09.160 --> 00:43:11.060
but also just wanting to try some stuff out


00:43:11.060 --> 00:43:13.360
from Google Docs over to Zoho for other stuff


00:43:13.360 --> 00:43:15.400
and for like business email.


00:43:15.400 --> 00:43:16.960
There's so interesting stuff going on there.


00:43:16.960 --> 00:43:18.800
And then like also DuckDuckGo,


00:43:18.800 --> 00:43:19.920
I've been using that for a while


00:43:19.920 --> 00:43:21.920
and I tried that a while ago


00:43:21.920 --> 00:43:23.980
and I didn't feel like you switched.


00:43:23.980 --> 00:43:26.720
To me now, there's just like almost no difference


00:43:26.720 --> 00:43:30.320
in the quality compared to Google these days.


00:43:30.320 --> 00:43:32.520
where it used to be I'd try and like,


00:43:32.520 --> 00:43:33.760
I might have to go to Google for that.


00:43:33.760 --> 00:43:35.580
Like, you know, it's several times a day.


00:43:35.580 --> 00:43:37.920
Now I don't really, if I get stuck here,


00:43:37.920 --> 00:43:39.520
usually I'd try to go to Google and get it


00:43:39.520 --> 00:43:40.400
and I get still stuck.


00:43:40.400 --> 00:43:42.520
So just, just got to deal with it.


00:43:42.520 --> 00:43:44.560
So that's it for all my items.


00:43:44.560 --> 00:43:46.080
I'm just down to telling a joke.


00:43:46.080 --> 00:43:48.200
Thomas, you got anything extra you want to share


00:43:48.200 --> 00:43:50.200
throughout the rest of the world?


00:43:50.200 --> 00:43:51.120
- Not particularly.


00:43:51.120 --> 00:43:53.440
- Give a quick shout out to Piper real quick.


00:43:53.440 --> 00:43:54.260
- Oh yeah.


00:43:54.260 --> 00:43:57.480
- I know we covered it last week, but yeah.


00:43:57.480 --> 00:43:59.920
- Michael actually did as good an introduction


00:43:59.920 --> 00:44:00.920
to Piper as I could give.


00:44:00.920 --> 00:44:03.880
So congratulations and well done.


00:44:03.880 --> 00:44:05.240
If you do want to check it out,


00:44:05.240 --> 00:44:08.080
support open source software, do the usual,


00:44:08.080 --> 00:44:10.360
share, like, subscribe, all the rest of it.


00:44:10.360 --> 00:44:11.680
You can check it out on GitHub.


00:44:11.680 --> 00:44:15.800
It is the Piper Task Runner, P-Y-P-Y-R.


00:44:15.800 --> 00:44:19.480
And incidentally, if you don't want to run bash scripts,


00:44:19.480 --> 00:44:24.480
then a task runner might be a good way of not doing so.


00:44:24.480 --> 00:44:27.440
- Yeah, I was thinking about your project


00:44:27.440 --> 00:44:30.040
while you were talking about this shell stuff.


00:44:30.040 --> 00:44:31.600
- I didn't want to show too horribly,


00:44:31.600 --> 00:44:34.880
so I tried to keep that to the end.


00:44:34.880 --> 00:44:35.720
- That's our job.


00:44:35.720 --> 00:44:38.760
We only show, we basically just show cool stuff all week.


00:44:38.760 --> 00:44:40.040
That's our podcast.


00:44:40.040 --> 00:44:40.880
Brian, how about you?


00:44:40.880 --> 00:44:43.320
Got anything extra you wanna shout out there?


00:44:43.320 --> 00:44:44.320
- I've got some stuff,


00:44:44.320 --> 00:44:46.720
but there's nothing I can share right now, so.


00:44:46.720 --> 00:44:48.160
- Well, we'll be waiting.


00:44:48.160 --> 00:44:50.120
How about we share a joke then and wrap it up there?


00:44:50.120 --> 00:44:50.960
- Sounds good.


00:44:50.960 --> 00:44:53.960
- So I feel like this is a missed opportunity


00:44:53.960 --> 00:44:56.400
'cause we had Ian on last week


00:44:56.400 --> 00:44:58.840
and he was all about cybersecurity


00:44:58.840 --> 00:45:02.040
and using notebooks to track threats and stuff.


00:45:02.040 --> 00:45:04.320
Well, has he considered this?


00:45:04.320 --> 00:45:07.560
(laughing)


00:45:07.560 --> 00:45:11.640
- That wasn't a James Bond movie, right?


00:45:11.640 --> 00:45:14.440
- It could have been.


00:45:14.440 --> 00:45:16.160
So here's like a big server rack


00:45:16.160 --> 00:45:19.040
with just like a hundred ethernet cables


00:45:19.040 --> 00:45:21.160
and then a big printed sign on it says,


00:45:21.160 --> 00:45:24.420
in case of cyber attack, break glass, pull cables.


00:45:24.420 --> 00:45:26.860
[LAUGHTER]


00:45:26.860 --> 00:45:28.460
I'll also say what surprises me.


00:45:28.460 --> 00:45:31.260
The internet is going soft in its old age,


00:45:31.260 --> 00:45:35.200
because back in my day, ha ha, the first comments


00:45:35.200 --> 00:45:39.260
would have been complaining that the cables aren't tidy enough.


00:45:39.260 --> 00:45:41.460
Well, you've got to get a good grip on them.


00:45:41.460 --> 00:45:42.100
Yeah, exactly.


00:45:42.100 --> 00:45:42.940
That's why you need to--


00:45:42.940 --> 00:45:44.780
One zippy move with your arm, and you give it a yank,


00:45:44.780 --> 00:45:45.620
and all 100 come out.


00:45:45.620 --> 00:45:46.700
You need good cable management.


00:45:46.700 --> 00:45:47.260
This is exactly why.


00:45:47.260 --> 00:45:48.260
There's a lot of cables.


00:45:48.260 --> 00:45:50.300
They should put orange tags on the ones that are


00:45:50.300 --> 00:45:51.860
important to pull or something.


00:45:51.860 --> 00:45:52.620
Yeah.


00:45:52.620 --> 00:45:53.120
See?


00:45:53.120 --> 00:45:53.700
Yeah.


00:45:53.700 --> 00:45:55.300
- Exactly, this is the sort of criticism


00:45:55.300 --> 00:45:56.140
that I would have expected.


00:45:56.140 --> 00:46:00.180
- Actually, the entire thing has a power switch,


00:46:00.180 --> 00:46:02.220
just to power off the whole thing.


00:46:02.220 --> 00:46:05.660
- No one has data, I mean, come on, no, just kidding.


00:46:05.660 --> 00:46:07.700
- Also, where's the ax?


00:46:07.700 --> 00:46:08.980
How do you break the glass?


00:46:08.980 --> 00:46:09.820
- Exactly.


00:46:09.820 --> 00:46:12.620
- Oh, there, or just open the door handle.


00:46:12.620 --> 00:46:14.260
- Very not very thought through.


00:46:14.260 --> 00:46:15.700
It reminds me a little bit of that,


00:46:15.700 --> 00:46:18.380
in case fire, get commit, get push, run.


00:46:18.380 --> 00:46:22.900
- I mean, you know, also we're talking about IT people


00:46:22.900 --> 00:46:25.620
who generally probably aren't that much


00:46:25.620 --> 00:46:26.780
into the pushing regime.


00:46:26.780 --> 00:46:31.580
- Or lifting axes, that might be a strength.


00:46:31.580 --> 00:46:33.220
(laughing)


00:46:33.220 --> 00:46:35.140
I'm gonna get hate mail for that.


00:46:35.140 --> 00:46:36.100
- We are, yeah.


00:46:36.100 --> 00:46:37.660
- Yes, indeed.


00:46:37.660 --> 00:46:39.260
Wow.


00:46:39.260 --> 00:46:41.420
I thought it was fine, right?


00:46:41.420 --> 00:46:46.220
- So, well, thanks everybody for having a fun episode again.


00:46:46.220 --> 00:46:47.740
Thank you, Thomas, for showing up.


00:46:47.740 --> 00:46:48.580
Thanks, Michael.


00:46:48.580 --> 00:46:50.860
And thank you, everybody in the chat for showing up.


00:46:50.860 --> 00:46:52.820
So we'll see you all next week.


00:46:52.820 --> 00:46:54.220
Bye everyone.

