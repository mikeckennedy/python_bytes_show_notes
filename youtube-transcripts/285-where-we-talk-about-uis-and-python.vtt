WEBVTT

00:00:00.000 --> 00:00:03.760
- Hello, welcome everybody on the live stream.


00:00:03.760 --> 00:00:06.640
We've got two guests today, so it's pretty exciting.


00:00:06.640 --> 00:00:08.040
So let's just jump into it.


00:00:08.040 --> 00:00:10.840
Hello and welcome to Python Bytes,


00:00:10.840 --> 00:00:12.920
where we deliver Python news and headlines


00:00:12.920 --> 00:00:14.520
directly to your earbuds.


00:00:14.520 --> 00:00:18.640
This is episode 285, recorded May 24th.


00:00:18.640 --> 00:00:19.760
And I'm Brian Okken.


00:00:19.760 --> 00:00:21.800
- I am Michael Kennedy.


00:00:21.800 --> 00:00:23.860
- And I'm Mark Little.


00:00:23.860 --> 00:00:25.740
- I'm Ben Cosby.


00:00:25.740 --> 00:00:29.840
- Nice, welcome Ben, welcome Mark.


00:00:29.840 --> 00:00:34.840
So Michael, you have this story why you brought Mark and Ben on.


00:00:34.840 --> 00:00:40.840
I did bring Mark and Ben on. Mark and I have been really good friends for a long time,


00:00:40.840 --> 00:00:48.840
but that's not why he's here. He's here because he's been sharing this Python journey that he and Ben have both been on.


00:00:48.840 --> 00:00:56.840
They come from law, like being lawyers and bankers and stuff, and they've found their way over to writing software in Python.


00:00:56.840 --> 00:00:59.280
It's been so fun to watch you guys come along.


00:00:59.280 --> 00:01:01.520
And you recently showed me the release


00:01:01.520 --> 00:01:04.260
of one of your SaaS products built with Python


00:01:04.260 --> 00:01:05.460
and Pyramid and other things.


00:01:05.460 --> 00:01:06.760
And I thought it was just super cool.


00:01:06.760 --> 00:01:09.740
So I thought you could maybe share just a little bit


00:01:09.740 --> 00:01:11.420
of that before we kick off the main topics


00:01:11.420 --> 00:01:14.320
to kind of inspire people who are not, you know,


00:01:14.320 --> 00:01:16.240
traditional CS folks,


00:01:16.240 --> 00:01:17.720
and they can still build amazing things.


00:01:17.720 --> 00:01:20.380
You want to tell us both a bit about yourself


00:01:20.380 --> 00:01:22.640
and then tell us a bit about your thing?


00:01:22.640 --> 00:01:25.760
- I'll say first that I'm strictly the hobbyist.


00:01:25.760 --> 00:01:30.760
So it's definitely been a collaboration and quite a journey.


00:01:30.760 --> 00:01:33.080
And I'll talk a little bit about how we got started


00:01:33.080 --> 00:01:35.360
'cause you played an instrumental role in that, Michael.


00:01:35.360 --> 00:01:38.560
But so we released this product called X-Chart


00:01:38.560 --> 00:01:41.880
that builds corporate organizational structures


00:01:41.880 --> 00:01:42.720
automatically.


00:01:42.720 --> 00:01:45.520
And these charts are kind of weird.


00:01:45.520 --> 00:01:50.520
They're sort of like human resources organizational charts


00:01:50.520 --> 00:01:54.360
except that for legal entities, they're much more complicated.


00:01:54.360 --> 00:01:59.160
And so we've built some automation in Python,


00:01:59.160 --> 00:02:00.600
principally in the server side,


00:02:00.600 --> 00:02:03.960
that generates these hierarchies automatically,


00:02:03.960 --> 00:02:05.560
and they can be quite elaborate.


00:02:05.560 --> 00:02:09.180
So for example, some of that we release publicly,


00:02:09.180 --> 00:02:11.720
and we've been building these things with our own app


00:02:11.720 --> 00:02:12.540
and releasing them.


00:02:12.540 --> 00:02:14.800
So here's one for Elon Musk, for example,


00:02:14.800 --> 00:02:19.280
this is before the early stages of his Twitter acquisition,


00:02:19.280 --> 00:02:23.800
but our app does a lot of this layering automatically.


00:02:23.800 --> 00:02:28.120
And those things can be quite stunningly complicated.


00:02:28.120 --> 00:02:32.400
So here's one, for example, with thousands of legal entities


00:02:32.400 --> 00:02:34.360
in the corporate structure of Blackstone.


00:02:34.360 --> 00:02:36.960
And so we've actually got some Python


00:02:36.960 --> 00:02:39.600
that sort of automates the presentation


00:02:39.600 --> 00:02:40.760
and structure of all that.


00:02:40.760 --> 00:02:44.640
And then, as you say, it's using Pyramid and Chameleon


00:02:44.640 --> 00:02:48.880
and SQLAlchemy, and then a lot of legal


00:02:48.880 --> 00:02:51.740
and business finance expertise as well.


00:02:51.740 --> 00:02:53.860
But it's been quite an exciting journey.


00:02:53.860 --> 00:02:56.780
And so we were excited to share this with you


00:02:56.780 --> 00:02:59.420
and look forward to sort of talking about some


00:02:59.420 --> 00:03:01.260
of the piece parts that are in the product


00:03:01.260 --> 00:03:04.260
that might be useful to the broader community as well.


00:03:04.260 --> 00:03:05.100
- Yeah, yeah, exactly.


00:03:05.100 --> 00:03:06.660
Some of the stuff you guys are gonna cover today


00:03:06.660 --> 00:03:08.700
as our main topic sort of were extracted


00:03:08.700 --> 00:03:10.900
out of the building of the SRA.


00:03:10.900 --> 00:03:11.740
- Yeah.


00:03:11.740 --> 00:03:13.060
- All right, Ben, anything you wanna add to that


00:03:13.060 --> 00:03:15.580
and maybe just tell people about yourself real quick?


00:03:15.580 --> 00:03:16.420
- Sure, yeah.


00:03:16.420 --> 00:03:20.740
No, well, as you pointed out and Mark too,


00:03:20.740 --> 00:03:24.100
whenever I'm trying to explain to somebody what I do now,


00:03:24.100 --> 00:03:27.420
I always say, well, I'm a reformed barbarian at the gate.


00:03:27.420 --> 00:03:32.140
And I traded buyouts and IPOs and a suit on Wall Street


00:03:32.140 --> 00:03:35.020
for code and in my office at home


00:03:35.020 --> 00:03:38.660
and in my pajamas kind of thing.


00:03:38.660 --> 00:03:40.140
But as Mark talked about,


00:03:40.140 --> 00:03:42.700
we've kind of merged those couple of things together.


00:03:42.700 --> 00:03:45.400
And so these days I spend a lot of my time


00:03:45.400 --> 00:03:48.020
with Python on the front end and JavaScript,


00:03:48.020 --> 00:03:52.820
JavaScript on the front end and Python on the back end, and DevOps and all sorts of things,


00:03:52.820 --> 00:03:59.620
you know, we sort of have to do it all here. But I also wanted to say kind of as part of


00:03:59.620 --> 00:04:05.380
our journey for your listeners, I'd be remiss if I didn't, even though I didn't warn you beforehand,


00:04:05.380 --> 00:04:12.580
I was going to do this, but along this way of kind of going from suits and deals and IPOs and


00:04:12.580 --> 00:04:16.560
and things like that, Michael's Talk Python Training


00:04:16.560 --> 00:04:18.560
for I'm sure lots of people on this podcast are familiar,


00:04:18.560 --> 00:04:22.080
but if you're not, those courses were pretty instrumental


00:04:22.080 --> 00:04:27.080
for us and for those we've worked with in evolving


00:04:27.080 --> 00:04:29.120
and making Python.


00:04:29.120 --> 00:04:33.000
Python now is completely central to our business


00:04:33.000 --> 00:04:33.840
and what we do.


00:04:33.840 --> 00:04:35.920
So it's been fun to get here.


00:04:35.920 --> 00:04:37.640
- Thanks for the shout out, man.


00:04:37.640 --> 00:04:38.480
- And I would say we've been able to leverage that.


00:04:38.480 --> 00:04:39.320
- I appreciate it.


00:04:39.320 --> 00:04:40.480
- Yeah, I would just say too,


00:04:40.480 --> 00:04:41.800
we've been able to leverage that


00:04:41.800 --> 00:04:46.400
And we've got some pretty complex math and graph theory


00:04:46.400 --> 00:04:47.920
in the core of our app.


00:04:47.920 --> 00:04:52.040
So we've been able to take Michael's classes


00:04:52.040 --> 00:04:56.000
and really sort of leverage them in a much bigger way


00:04:56.000 --> 00:04:58.940
than I think a lot of people expect or imagine they can


00:04:58.940 --> 00:05:01.400
when they start some of these online classes.


00:05:01.400 --> 00:05:04.200
So your training in particular has been exceptional.


00:05:04.200 --> 00:05:06.160
- Thanks, Mark.


00:05:06.160 --> 00:05:07.480
I just think what you guys have built


00:05:07.480 --> 00:05:09.520
looks so much more polished than some of the other,


00:05:09.520 --> 00:05:11.360
couple of guys who taught themself programming


00:05:11.360 --> 00:05:12.960
a few years ago and I just, I love it.


00:05:12.960 --> 00:05:14.720
So super good work.


00:05:14.720 --> 00:05:16.200
Brian, should we, should we kick it off?


00:05:16.200 --> 00:05:17.900
Yeah, this is just great.


00:05:17.900 --> 00:05:19.720
I'm I'm, I'm blown away.


00:05:19.720 --> 00:05:20.600
It looks awesome.


00:05:20.600 --> 00:05:22.680
So yeah, let's kick it off.


00:05:22.680 --> 00:05:24.620
Yeah, I was too.


00:05:24.620 --> 00:05:26.940
And I think some of the stuff that we're going to talk about is going


00:05:26.940 --> 00:05:29.600
to, certainly be part of that.


00:05:29.600 --> 00:05:30.720
So let's talk.


00:05:30.720 --> 00:05:32.480
Oh, yeah, nope.


00:05:32.480 --> 00:05:33.080
Wrong one.


00:05:33.080 --> 00:05:35.540
Ah, I'm up next.


00:05:35.540 --> 00:05:35.920
Right, Brian.


00:05:35.920 --> 00:05:36.600
Yeah.


00:05:36.600 --> 00:05:37.180
Sorry.


00:05:37.180 --> 00:05:37.720
All right.


00:05:37.720 --> 00:05:40.600
I have, I have a whole bunch of extras folks.


00:05:40.640 --> 00:05:44.720
So let me just start a quick one for one of our main topics


00:05:44.720 --> 00:05:45.960
here that maybe--


00:05:45.960 --> 00:05:48.200
We may have to cut you off.


00:05:48.200 --> 00:05:49.600
You might have to cut me off.


00:05:49.600 --> 00:05:50.680
So check this out, Brian.


00:05:50.680 --> 00:05:54.800
If I go over to pypi.org, and I go look for something like--


00:05:54.800 --> 00:05:56.280
let me look at Beanie.


00:05:56.280 --> 00:05:57.560
I don't know if I get that right.


00:05:57.560 --> 00:05:58.900
Actually, I don't think that's going to help.


00:05:58.900 --> 00:06:01.120
Let me look for switch lang, which


00:06:01.120 --> 00:06:03.800
is my switch implementation I added to Python,


00:06:03.800 --> 00:06:06.000
I don't know, a couple years ago.


00:06:06.000 --> 00:06:07.680
So if you look over here on the left--


00:06:07.680 --> 00:06:09.000
oh, I think it's being blocked.


00:06:09.000 --> 00:06:17.800
here, there it says, here's your avatar from Gravatar for M. Kennedy. But my little browser


00:06:17.800 --> 00:06:23.680
settings are blocking that or whatever. But so this is a thing you see a lot of the times


00:06:23.680 --> 00:06:27.840
and like where do you get where do you get these little Gravatar? So if you have users,


00:06:27.840 --> 00:06:32.200
you have users who have emails, you want to show something about them, there's a chance


00:06:32.200 --> 00:06:36.280
that over in Gravatar,


00:06:36.280 --> 00:06:40.680
there's going to be some profile for them,


00:06:40.680 --> 00:06:43.160
different images, things like that.


00:06:43.160 --> 00:06:44.600
So if you're in Python


00:06:44.600 --> 00:06:48.600
and you want to add Gravatar features to your site,


00:06:48.600 --> 00:06:52.120
it is ridiculous using this thing called libGravatar.


00:06:52.120 --> 00:06:55.640
So all you got to do with libGravatar


00:06:55.640 --> 00:06:58.040
is you go and you create an instance


00:06:58.040 --> 00:07:00.160
of one of these objects, Gravatars,


00:07:00.160 --> 00:07:02.320
You pass in an email and you can say, get image,


00:07:02.320 --> 00:07:06.560
you give it a size and potentially a file extension


00:07:06.560 --> 00:07:08.960
if you want to control that or anything,


00:07:08.960 --> 00:07:10.520
or whether or not you wanna use SSL.


00:07:10.520 --> 00:07:15.240
And then it gives you back this non-reversible URL


00:07:15.240 --> 00:07:19.000
that is the image of that person based on the size


00:07:19.000 --> 00:07:21.000
that you asked for, who they are and so on.


00:07:21.000 --> 00:07:25.200
And if they don't exist, you get the standard Gravatar logo,


00:07:25.200 --> 00:07:27.560
just like a little circle type thing.


00:07:27.560 --> 00:07:29.640
And so this is some kind of hash algorithm


00:07:29.640 --> 00:07:31.440
you have to follow based on their email address


00:07:31.440 --> 00:07:33.180
to pull them back and so on.


00:07:33.180 --> 00:07:36.560
But if you wanna add that kind of Gravatar look and feel,


00:07:36.560 --> 00:07:39.040
then like literally Gravatar object,


00:07:39.040 --> 00:07:41.160
give it the email address dot get image.


00:07:41.160 --> 00:07:43.320
And that's pretty neat.


00:07:43.320 --> 00:07:46.840
It goes from one to 248 pixels on the image size.


00:07:46.840 --> 00:07:48.580
So I'm not sure one's super useful,


00:07:48.580 --> 00:07:50.460
like you get one dot,


00:07:50.460 --> 00:07:53.560
but maybe you want it to be kind of like a particular,


00:07:53.560 --> 00:07:57.320
like a shade of the person is all you're gonna get, I guess.


00:07:57.320 --> 00:07:59.400
- Even like a five by five would be fun,


00:07:59.400 --> 00:08:01.000
just a few pixels.


00:08:01.000 --> 00:08:04.000
- So you can do a get profile,


00:08:04.000 --> 00:08:05.920
which will then give you access to the user


00:08:05.920 --> 00:08:07.640
and see all of their email addresses,


00:08:07.640 --> 00:08:10.100
all of their information about them and so on.


00:08:10.100 --> 00:08:13.240
So there's a little bit of (indistinct)


00:08:13.240 --> 00:08:15.600
Oh yeah, yeah, there's a whole shadow profile


00:08:15.600 --> 00:08:18.920
that's built up by like surveillance ad tech industry.


00:08:18.920 --> 00:08:21.000
It's only five bucks a use, no, just kidding.


00:08:21.000 --> 00:08:23.360
But you can get like more details about them


00:08:23.360 --> 00:08:24.880
through their profile if you really want.


00:08:24.880 --> 00:08:27.540
But basically the main use case is given an email,


00:08:27.540 --> 00:08:29.860
Can I get a picture without hassling this person


00:08:29.860 --> 00:08:31.200
to upload a picture?


00:08:31.200 --> 00:08:32.380
Maybe.


00:08:32.380 --> 00:08:35.460
- And just, if anybody's not familiar with Gravatar,


00:08:35.460 --> 00:08:37.900
it's owned by Automatic who does WordPress.


00:08:37.900 --> 00:08:40.200
So all the WordPress people use it


00:08:40.200 --> 00:08:42.460
and that's why it's like well supported


00:08:42.460 --> 00:08:44.780
and it's not too evil or anything like that.


00:08:44.780 --> 00:08:46.980
- Yeah, and like I said, pypi.org uses it.


00:08:46.980 --> 00:08:48.940
So that's, that's a start.


00:08:48.940 --> 00:08:49.980
Mark, Ben, what do you guys think?


00:08:49.980 --> 00:08:52.220
Do you have user pictures in your app?


00:08:52.220 --> 00:08:54.160
Are you worried about this kind of stuff?


00:08:54.160 --> 00:08:55.000
- We don't.


00:08:56.300 --> 00:09:00.040
We don't in LexChart, but it's funny because we,


00:09:00.040 --> 00:09:02.200
at the very beginning of our journey,


00:09:02.200 --> 00:09:04.120
we implemented a little question and answer app


00:09:04.120 --> 00:09:06.000
as like a demo to make sure that, you know,


00:09:06.000 --> 00:09:08.200
we could like justify going down to Python.


00:09:08.200 --> 00:09:10.120
And I used Gravatar in there.


00:09:10.120 --> 00:09:12.600
This actually is a pretty cool library


00:09:12.600 --> 00:09:13.560
because I remember in that app,


00:09:13.560 --> 00:09:15.280
I really was just focused on Python,


00:09:15.280 --> 00:09:17.560
but I had to fall back on some JavaScript


00:09:17.560 --> 00:09:20.960
in order to put the Gravatar icons in there.


00:09:20.960 --> 00:09:23.320
But it is a great, Gravatar is really useful.


00:09:23.320 --> 00:09:25.560
I'd encourage your listeners,


00:09:25.560 --> 00:09:26.400
if you're looking for something.


00:09:26.400 --> 00:09:27.480
'Cause the nice thing, as you said,


00:09:27.480 --> 00:09:30.280
is it'll just generate like this automatic little drawing,


00:09:30.280 --> 00:09:31.240
even if they don't have an image.


00:09:31.240 --> 00:09:34.040
So you can kind of create a nice look and feel


00:09:34.040 --> 00:09:35.440
for your site, for your user profiles,


00:09:35.440 --> 00:09:37.600
where everybody gets some sort of a graphic,


00:09:37.600 --> 00:09:38.920
even if they haven't uploaded anything.


00:09:38.920 --> 00:09:42.000
It's kind of a nice little tool.


00:09:42.000 --> 00:09:43.240
- Yeah, absolutely.


00:09:43.240 --> 00:09:45.080
Kim Van Wick out in the audience said,


00:09:45.080 --> 00:09:47.840
one pixel Gravitars might be useful for building images,


00:09:47.840 --> 00:09:50.520
like displaying contributors and stuff.


00:09:50.520 --> 00:09:52.680
Maybe not one, but you could do like 10 by 10


00:09:52.680 --> 00:09:56.360
And then you could build up to a montage of all the people


00:09:56.360 --> 00:09:58.760
or something that'd be cool.


00:09:58.760 --> 00:10:03.080
Ben, you also have some cheering folks in the audience,


00:10:03.080 --> 00:10:05.640
which is lovely.


00:10:05.640 --> 00:10:06.880
So go, Ben.


00:10:06.880 --> 00:10:07.760
Good to have you here.


00:10:07.760 --> 00:10:08.920
All right.


00:10:08.920 --> 00:10:10.880
Brian, over to you.


00:10:10.880 --> 00:10:12.080
I'm very excited about--


00:10:12.080 --> 00:10:14.480
when I first saw this, I'm like, oh, you don't really need that.


00:10:14.480 --> 00:10:15.800
Pydantic does this on--


00:10:15.800 --> 00:10:17.160
oh, wait, no, this is amazing.


00:10:17.160 --> 00:10:18.000
Tell me to tell you.


00:10:18.000 --> 00:10:20.120
So this is so cool.


00:10:20.120 --> 00:10:23.840
It's a little thing that was suggested by Chun Li.


00:10:23.840 --> 00:10:26.040
It's a JSON to Pydantic converter.


00:10:26.040 --> 00:10:31.960
And Chun said, "This awesome JSON to Pydantic is so useful.


00:10:31.960 --> 00:10:35.420
"It literally saves me days of work


00:10:35.420 --> 00:10:38.400
"with complex nested JSON schema."


00:10:38.400 --> 00:10:39.720
So the idea is you've got,


00:10:39.720 --> 00:10:41.960
basically it's just this website with like,


00:10:41.960 --> 00:10:45.440
JSON side and a Pydantic side.


00:10:45.440 --> 00:10:47.120
And I've got one prepared.


00:10:47.120 --> 00:10:49.600
I went and copied one from somewhere.


00:10:49.600 --> 00:10:52.720
And so if we go over and just replace the simple one


00:10:52.720 --> 00:10:55.760
with like a more complex one, paste it in there,


00:10:55.760 --> 00:10:58.960
and then it just generates the Pydantic model


00:10:58.960 --> 00:11:01.840
and it's pretty awesome.


00:11:01.840 --> 00:11:03.280
There's a couple of options you can give it.


00:11:03.280 --> 00:11:04.280
- So for people who are listening,


00:11:04.280 --> 00:11:07.520
it's not that it converts JSON to Pydantic,


00:11:07.520 --> 00:11:09.960
it converts JSON to Pydantic code.


00:11:09.960 --> 00:11:11.640
- Yeah.


00:11:11.640 --> 00:11:13.000
- It writes the code that you would have to write


00:11:13.000 --> 00:11:15.520
for the Pydantic to understand what you put.


00:11:15.520 --> 00:11:17.720
It's amazing, I love it.


00:11:17.720 --> 00:11:20.240
- Right, and then some of the options are cool.


00:11:20.240 --> 00:11:21.700
You might not use it for everything,


00:11:21.700 --> 00:11:23.440
but just knowing the syntax for it.


00:11:23.440 --> 00:11:26.880
So if you drop a, give them optional,


00:11:26.880 --> 00:11:29.760
it'll tell you where to put optional in your model


00:11:29.760 --> 00:11:30.760
to make it all work right.


00:11:30.760 --> 00:11:32.940
And it's like, this one's only just showing up


00:11:32.940 --> 00:11:35.640
at the bottom, so anyway.


00:11:35.640 --> 00:11:39.380
And then the last one is aliasing camel case.


00:11:39.380 --> 00:11:40.940
I didn't know you could do this.


00:11:40.940 --> 00:11:42.960
Aliasing camel case for snake case.


00:11:42.960 --> 00:11:45.640
So if you're using, I guess,


00:11:45.640 --> 00:11:47.440
both camel case and snake case,


00:11:47.440 --> 00:11:49.240
you can have a more, I don't know what this is really.


00:11:49.240 --> 00:11:51.280
- A lot of times if you're consuming a JSON API


00:11:51.280 --> 00:11:53.120
that's written in another language,


00:11:53.120 --> 00:11:56.280
the variable names are idiomatic to that language.


00:11:56.280 --> 00:12:00.960
So like C# would be, or JavaScript would represent this one


00:12:00.960 --> 00:12:02.760
where you've got like the camel casing,


00:12:02.760 --> 00:12:05.240
but that would not be how you would wanna call it in Python.


00:12:05.240 --> 00:12:07.100
So you can say, well, give me the Python version,


00:12:07.100 --> 00:12:10.160
but allow Pythonic to find the other size.


00:12:10.160 --> 00:12:11.540
- Okay, cool.


00:12:11.540 --> 00:12:16.080
One of the neat things about this that I really love


00:12:16.080 --> 00:12:17.580
is it's an open source project.


00:12:17.580 --> 00:12:20.420
So at the bottom, there's a link.


00:12:20.420 --> 00:12:24.060
It takes you to the, just the open source page.


00:12:24.060 --> 00:12:28.560
And this is built with FastAPI and create React app,


00:12:28.560 --> 00:12:29.580
which is pretty cool.


00:12:29.580 --> 00:12:31.740
And then a data model code generator.


00:12:31.740 --> 00:12:34.520
So it's like, that's doing the most of the work.


00:12:34.520 --> 00:12:38.540
So if you want to do this yourself somewhere else,


00:12:38.540 --> 00:12:41.260
like, you know, embed it within your tool chain


00:12:41.260 --> 00:12:43.320
or something like that, you can do this.


00:12:43.320 --> 00:12:46.680
So I don't know why you'd regenerate it all the time though,


00:12:46.680 --> 00:12:50.600
but it's just super kind of fun to just drop,


00:12:50.600 --> 00:12:51.440
drop some Jason,


00:12:51.440 --> 00:12:55.520
a Jason example of a good one in there and drop it in.


00:12:55.520 --> 00:12:56.340
- It's fantastic.


00:12:56.340 --> 00:12:58.360
If you're going to consume an API and you say,


00:12:58.360 --> 00:13:01.040
here's a specification of what I'm going to get back.


00:13:01.040 --> 00:13:03.600
Boom, you're halfway there or you're a consultant.


00:13:03.600 --> 00:13:05.200
You pick up somebody else's code and you're like,


00:13:05.200 --> 00:13:06.480
I want to use Pythonic here.


00:13:06.480 --> 00:13:07.620
This is great.


00:13:07.620 --> 00:13:09.420
Anthony, the artist says, oh, come on.


00:13:09.420 --> 00:13:11.080
I could have used this last week.


00:13:11.080 --> 00:13:13.340
(laughing)


00:13:13.340 --> 00:13:16.400
- Guys, what do you think of this?


00:13:16.400 --> 00:13:17.240
- That's really cool.


00:13:17.240 --> 00:13:19.600
We have a project where we're looking at migrating


00:13:19.600 --> 00:13:22.400
from a different tech stack to Python


00:13:22.400 --> 00:13:25.000
and one of our output sources there is JSON.


00:13:25.000 --> 00:13:27.160
So I'm looking at this and wondering,


00:13:27.160 --> 00:13:28.640
Ben, this might be an opportunity for us


00:13:28.640 --> 00:13:33.640
to get there a little quicker for some of that data.


00:13:33.640 --> 00:13:36.120
- That is cool, especially for prototyping


00:13:36.120 --> 00:13:38.280
or something where you just wanna see


00:13:38.280 --> 00:13:41.560
and you wanna spend three days seeing


00:13:41.560 --> 00:13:43.960
what it's gonna look like, this is pretty cool.


00:13:43.960 --> 00:13:47.080
- Yeah, it's very cool.


00:13:47.080 --> 00:13:50.760
- Also another, I mean, we get this all the time,


00:13:50.760 --> 00:13:51.840
but I just wanna remind people,


00:13:51.840 --> 00:13:54.080
this was a suggestion from a listener.


00:13:54.080 --> 00:13:56.280
And that's one of the neat things about the podcast


00:13:56.280 --> 00:13:58.640
is people can find cool things and send them in


00:13:58.640 --> 00:14:01.200
and then we can share it with everybody, it's nice.


00:14:01.200 --> 00:14:02.980
- Absolutely.


00:14:02.980 --> 00:14:06.280
That's like half of our topics are that, right?


00:14:06.280 --> 00:14:08.560
All right, Mark, you're up with the next one.


00:14:08.560 --> 00:14:12.040
- Awesome, so this is not a Python library


00:14:12.040 --> 00:14:14.720
and it's probably well known to most of your listeners,


00:14:14.720 --> 00:14:19.720
but I wanted to just talk about a few Tailwind CSS things


00:14:19.720 --> 00:14:22.240
that people, if you're only sort of casually aware


00:14:22.240 --> 00:14:25.560
of Tailwind, might help you jumpstart.


00:14:25.560 --> 00:14:28.880
We are an aggressive user of Tailwind


00:14:28.880 --> 00:14:30.520
and some of the components.


00:14:30.520 --> 00:14:33.880
The other piece I wanna talk about is Tailwind UI,


00:14:33.880 --> 00:14:35.800
which is not open source.


00:14:35.800 --> 00:14:40.400
So Tailwind CSS is completely free from Tailwind Labs.


00:14:40.400 --> 00:14:45.840
But Tailwind UI is behind a paywall.


00:14:45.840 --> 00:14:47.520
But these are pre-built components


00:14:47.520 --> 00:14:49.060
by the creators of Tailwind.


00:14:49.060 --> 00:14:51.600
So there are lots of people building components for Tailwind.


00:14:51.600 --> 00:14:53.320
But Tailwind UI is specifically built


00:14:53.320 --> 00:14:57.400
by the people who created Tailwind in the first instance.


00:14:57.400 --> 00:14:59.080
And it's interesting to me--


00:14:59.080 --> 00:15:01.320
I know that both of you have a lot of interest


00:15:01.320 --> 00:15:05.480
in user interface design around Python and web apps


00:15:05.480 --> 00:15:08.360
and Tailwind certainly is a part of that theme.


00:15:08.360 --> 00:15:11.620
And it's also interesting for the business model piece


00:15:11.620 --> 00:15:13.660
about how to turn sort of open source


00:15:13.660 --> 00:15:15.680
into sort of a revenue generating model.


00:15:15.680 --> 00:15:18.840
So you can use Tailwind and never need Tailwind UI,


00:15:18.840 --> 00:15:21.940
but if you need examples or references,


00:15:21.940 --> 00:15:25.540
Tailwind UI is a fantastic resource.


00:15:25.540 --> 00:15:28.460
And so I thought I would just show,


00:15:28.460 --> 00:15:31.380
they've got widgets, basically prebuilt components


00:15:31.380 --> 00:15:33.220
around marketing or app UIs,


00:15:33.220 --> 00:15:35.700
and then a new sort of e-commerce section.


00:15:35.700 --> 00:15:36.580
And to give you an example,


00:15:36.580 --> 00:15:38.780
there's really low level granular stuff.


00:15:38.780 --> 00:15:42.100
Like if you want a little stats component,


00:15:42.100 --> 00:15:44.260
you can come in here, they'll show you what it looks like.


00:15:44.260 --> 00:15:47.200
They've designed several options.


00:15:47.200 --> 00:15:49.740
You can see what they are like responsively,


00:15:49.740 --> 00:15:51.860
and then you can actually see the code


00:15:51.860 --> 00:15:56.540
and they'll give you the code in raw HTML, React or Vue.


00:15:56.540 --> 00:15:59.580
And some of them need JavaScript as well.


00:15:59.580 --> 00:16:01.700
They'll give you hints around what to do


00:16:01.700 --> 00:16:03.820
with the JavaScript if that's necessary.


00:16:03.820 --> 00:16:06.980
But this is an example of that little stats widget


00:16:06.980 --> 00:16:10.300
with all of the sort of Tailwind classes built in there


00:16:10.300 --> 00:16:12.380
that you can grab and reuse.


00:16:12.380 --> 00:16:16.260
And we have found it really useful


00:16:16.260 --> 00:16:18.780
for creating this sort of really professional


00:16:18.780 --> 00:16:20.660
sort of user interface experience.


00:16:20.660 --> 00:16:23.300
And our app, so for example,


00:16:23.300 --> 00:16:26.380
if I just quickly create one,


00:16:26.380 --> 00:16:29.540
like our toolbar here is a couple of chameleon templates


00:16:29.540 --> 00:16:32.880
with Tailwind running around each of these buttons


00:16:32.880 --> 00:16:35.560
to keep them consistent, which also means


00:16:35.560 --> 00:16:38.640
that at different resolutions, the buttons will look different.


00:16:38.640 --> 00:16:40.360
So if I'm on a larger screen, there


00:16:40.360 --> 00:16:42.120
will actually be help text underneath each


00:16:42.120 --> 00:16:42.880
of these buttons.


00:16:42.880 --> 00:16:43.640
They get smaller.


00:16:43.640 --> 00:16:45.920
All that's done really nicely in Tailwind.


00:16:45.920 --> 00:16:48.200
And then because it's a Chameleon template running


00:16:48.200 --> 00:16:51.680
in our Python stack, we can use those toolbars


00:16:51.680 --> 00:16:53.880
in a variety of circumstances and have


00:16:53.880 --> 00:16:57.200
really granular, nice, intuitive control of them.


00:16:57.200 --> 00:17:01.040
So between Tailwind CSS and Tailwind UI,


00:17:01.040 --> 00:17:03.340
these are sort of great resources to get familiar


00:17:03.340 --> 00:17:05.140
and up and running with it.


00:17:05.140 --> 00:17:07.140
There have been a few people grumbling--


00:17:07.140 --> 00:17:08.140
- Mark, this is so nice.


00:17:08.140 --> 00:17:10.400
I just to give people a sense of like some of the size


00:17:10.400 --> 00:17:12.320
of the building blocks is,


00:17:12.320 --> 00:17:14.680
we've all gone to the websites where you click pricing,


00:17:14.680 --> 00:17:17.060
for example, and it's got like three columns


00:17:17.060 --> 00:17:18.300
and one's a little bigger and it says,


00:17:18.300 --> 00:17:20.460
this is the most common or whatever.


00:17:20.460 --> 00:17:23.100
Like that is just a drop in element.


00:17:23.100 --> 00:17:23.940
- Yes, this is the price you want.


00:17:23.940 --> 00:17:27.160
- And it's styled to be so beautiful, right?


00:17:27.160 --> 00:17:29.960
- Yeah, and this is the best thing about Tailwind


00:17:29.960 --> 00:17:33.160
from my perspective is it's built principally


00:17:33.160 --> 00:17:35.400
by Adam Wathen and Steve Schroeger.


00:17:35.400 --> 00:17:39.200
And Adam, I'm probably grossly oversimplifying this,


00:17:39.200 --> 00:17:41.760
would be the technical component of this,


00:17:41.760 --> 00:17:43.320
and Steve is the design element.


00:17:43.320 --> 00:17:44.800
And they have some great resources.


00:17:44.800 --> 00:17:47.240
If you just, Steve Schroeger has some wonderful videos


00:17:47.240 --> 00:17:50.220
where he sort of recomposes user interfaces


00:17:50.220 --> 00:17:54.040
and he's got a book out on refactoring UI


00:17:54.040 --> 00:17:55.540
that I think you can add to the show notes.


00:17:55.540 --> 00:17:59.540
But you're basically standing on the shoulders of these giants.


00:17:59.540 --> 00:18:01.780
These are fantastic design principles.


00:18:01.780 --> 00:18:04.340
Yes, I'm sure there are people that are better than me


00:18:04.340 --> 00:18:05.100
at doing this.


00:18:05.100 --> 00:18:07.940
But I know that Steve and Adam have done a fantastic job


00:18:07.940 --> 00:18:09.020
in using these components.


00:18:09.020 --> 00:18:11.620
Even if I need to tweak them, I learn a lot.


00:18:11.620 --> 00:18:13.240
There are a lot of comments that people


00:18:13.240 --> 00:18:16.860
will learn a lot about CSS just watching them work and seeing


00:18:16.860 --> 00:18:20.380
how these components are built. Tailwind automatically


00:18:20.380 --> 00:18:22.300
handles lots of cool edge cases.


00:18:22.300 --> 00:18:25.280
And you see that when you look at these components.


00:18:25.280 --> 00:18:28.560
And everything is built to be responsive from the beginning,


00:18:28.560 --> 00:18:32.520
and they're just lovely to work with.


00:18:32.520 --> 00:18:35.080
It's also super fast, so there are a bunch of components.


00:18:35.080 --> 00:18:38.720
Their latest release has made their just-in-time compiler


00:18:38.720 --> 00:18:41.760
native, so it's built in.


00:18:41.760 --> 00:18:45.160
It does generate a lot of CSS, but it will only


00:18:45.160 --> 00:18:50.640
do that if you're actually using certain classes or components.


00:18:50.640 --> 00:18:53.320
And so it's just been fantastic to work with.


00:18:53.320 --> 00:18:56.400
I will also say we use this in a recent project.


00:18:56.400 --> 00:19:00.120
You can actually drop Tailwind into an existing project


00:19:00.120 --> 00:19:02.800
and avoid conflicts with existing CSS.


00:19:02.800 --> 00:19:04.940
There's a way to have a custom prefix


00:19:04.940 --> 00:19:06.840
on all the Tailwind classes.


00:19:06.840 --> 00:19:09.880
And both PyCharm and VS Code,


00:19:09.880 --> 00:19:13.280
their Tailwind plugins will adapt to that prefixing.


00:19:13.280 --> 00:19:16.040
So for example, instead of it,


00:19:16.040 --> 00:19:21.000
if you need padding, you just append or prepend TW-


00:19:21.000 --> 00:19:24.880
to the classes, to the Tailwind classes,


00:19:24.880 --> 00:19:28.320
and VS Code and PyCharm will pick up that prefix.


00:19:28.320 --> 00:19:29.960
They'll still give you all the helps and prompts


00:19:29.960 --> 00:19:32.320
for Tailwind, and you'll avoid all the conflicts


00:19:32.320 --> 00:19:33.740
with your existing CSS.


00:19:33.740 --> 00:19:36.120
- Yeah, it's amazing.


00:19:36.120 --> 00:19:37.380
- And then finally, I'd say it's just,


00:19:37.380 --> 00:19:39.560
it's great with template languages.


00:19:39.560 --> 00:19:42.920
So whether it's Chameleon or Jinja or Mako,


00:19:42.920 --> 00:19:45.480
it's really nice because you're just looking


00:19:45.480 --> 00:19:47.920
at that little bit of HTML in those templates,


00:19:47.920 --> 00:19:51.100
and you can just put the classes right there in the HTML


00:19:51.100 --> 00:19:53.780
and have a high confidence


00:19:53.780 --> 00:19:55.320
of what that's gonna look like.


00:19:55.320 --> 00:19:58.800
- Brian, have you played with this any?


00:19:58.800 --> 00:20:03.140
- No, but one of the things I was having a,


00:20:03.140 --> 00:20:06.660
I did a little consult with somebody


00:20:06.660 --> 00:20:08.660
trying to get a startup off the ground.


00:20:08.660 --> 00:20:10.700
And I was looking at their site and I was like,


00:20:10.700 --> 00:20:11.900
man, your site looks awesome.


00:20:11.900 --> 00:20:13.220
Did you hire somebody?


00:20:13.220 --> 00:20:15.880
And they said, no, I'd use Tailwind UI.


00:20:16.820 --> 00:20:20.140
And actually, so that's the thing,


00:20:20.140 --> 00:20:21.600
the sweet spot I think,


00:20:21.600 --> 00:20:23.560
is somebody that like maybe took


00:20:23.560 --> 00:20:27.100
the Michael's entrepreneurial course or something,


00:20:27.100 --> 00:20:28.580
just like one or two people


00:20:28.580 --> 00:20:30.560
that are trying to get a business off the ground,


00:20:30.560 --> 00:20:33.580
you don't have any money, you can't hire somebody,


00:20:33.580 --> 00:20:36.140
or maybe you do, but often you don't.


00:20:36.140 --> 00:20:37.780
So having that-- - Or it might just be


00:20:37.780 --> 00:20:39.780
too early to worry about that, right?


00:20:39.780 --> 00:20:41.740
- Yeah, so starting off the ground


00:20:41.740 --> 00:20:43.480
with a professional looking site,


00:20:43.480 --> 00:20:46.660
I think that's a great way to start.


00:20:46.660 --> 00:20:49.780
So, and yes, it's free, but it's also not out of the realm


00:20:49.780 --> 00:20:52.100
of a small startup.


00:20:52.100 --> 00:20:54.860
- Yeah, I would add, we've used a lot of frameworks.


00:20:54.860 --> 00:20:57.780
We've used Bootstrap, of course, Semantic.


00:20:57.780 --> 00:20:59.300
We've used a lot of these things.


00:20:59.300 --> 00:21:01.780
And what Tailwind is nice, particularly Tailwind UI,


00:21:01.780 --> 00:21:04.220
Tailwind in general, but Tailwind UI as well,


00:21:04.220 --> 00:21:06.700
is they will give you full page references.


00:21:06.700 --> 00:21:09.900
So if I scroll down here, you'll see, for example,


00:21:09.900 --> 00:21:11.120
there's this page example.


00:21:11.120 --> 00:21:13.260
So if you need a landing page,


00:21:13.260 --> 00:21:17.040
they will show you what an entire landing page looks like,


00:21:17.040 --> 00:21:20.260
but you don't have to take the entire page.


00:21:20.260 --> 00:21:23.720
If you want to assemble these components individually


00:21:23.720 --> 00:21:27.060
into your own page structure, you can certainly do that.


00:21:27.060 --> 00:21:29.820
So, you know, here's a feature section.


00:21:29.820 --> 00:21:31.420
It doesn't include any of the other stuff,


00:21:31.420 --> 00:21:33.860
but these are, if you like this feature presentation,


00:21:33.860 --> 00:21:36.420
you can go grab just this bit and mix and match it.


00:21:36.420 --> 00:21:39.220
So unlike a lot of the theme kind of frameworks


00:21:39.220 --> 00:21:41.340
where you have this entire theme


00:21:41.340 --> 00:21:43.860
just sort of stomps all over your design,


00:21:43.860 --> 00:21:47.860
you can actually get a custom looking output


00:21:47.860 --> 00:21:49.860
with Tailwind that's still consistent.


00:21:49.860 --> 00:21:52.200
So it's a nice balance between, you know,


00:21:52.200 --> 00:21:53.780
pretty modular granular control,


00:21:53.780 --> 00:21:57.580
but still a consistent look of the entire app or website.


00:21:57.580 --> 00:22:00.500
- And I have no doubt that like the stuff behind it,


00:22:00.500 --> 00:22:02.920
like how much CSS is there, the size,


00:22:02.920 --> 00:22:04.840
it's probably gonna be a heavier site


00:22:04.840 --> 00:22:08.020
than having somebody custom write all this stuff,


00:22:08.020 --> 00:22:10.100
but it's also gonna be cheaper, so.


00:22:10.100 --> 00:22:12.140
Yeah, and that is true.


00:22:12.140 --> 00:22:14.540
What they have done, they have a just-in-time compiler


00:22:14.540 --> 00:22:17.300
that really minimizes the amount of CSS they produce.


00:22:17.300 --> 00:22:18.860
And then, of course, you can do--


00:22:18.860 --> 00:22:21.420
they recommend using post-CSS and a number of other things


00:22:21.420 --> 00:22:25.460
like CSS Nano to reduce the size of those files.


00:22:25.460 --> 00:22:27.140
We still get very high performance.


00:22:27.140 --> 00:22:30.140
So keep in mind, our app is built entirely with Tailwind.


00:22:30.140 --> 00:22:33.700
Plus, we're doing a lot of math on the server side.


00:22:33.700 --> 00:22:38.820
And we get very small sub-second returns on our pages


00:22:38.820 --> 00:22:40.820
as a result, even with all that stuff.


00:22:40.820 --> 00:22:43.180
- Yeah. - Oh no.


00:22:43.180 --> 00:22:44.160
- That's cool.


00:22:44.160 --> 00:22:45.420
You've definitely inspired me, Mark,


00:22:45.420 --> 00:22:49.340
to think about rewriting a lot of what I've been doing


00:22:49.340 --> 00:22:50.780
in Tailwind, and it'll get there.


00:22:50.780 --> 00:22:52.180
I'm just not there yet.


00:22:52.180 --> 00:22:54.000
Got other stuff to work on first.


00:22:54.000 --> 00:22:58.180
All right, before we move on, Brian,


00:22:58.180 --> 00:23:01.380
can I take a moment and tell you all about our sponsor?


00:23:01.380 --> 00:23:02.740
- Yes.


00:23:02.740 --> 00:23:05.140
- Yeah, so this week, the show is brought to you


00:23:05.140 --> 00:23:08.160
by Compiler, the Compiler podcast from Red Hat.


00:23:08.160 --> 00:23:14.160
Just like everyone on the show and everyone listening, Brian and I are fans of podcasts.


00:23:14.160 --> 00:23:17.160
And I'm super happy to share Compiler with you.


00:23:17.160 --> 00:23:23.160
It comes to you from Red Hat, a well-respected open source company we all know of, I'm sure.


00:23:23.160 --> 00:23:28.160
So with more and more of us working from home, it's important to keep our human connection with technology.


00:23:28.160 --> 00:23:35.160
And Compiler unravels industry topics and trends, things you've always wanted to know about in tech,


00:23:35.160 --> 00:23:38.760
all the way up to interviews with people who know it best.


00:23:38.760 --> 00:23:41.640
So on Compiler, you'll hear a course of perspectives


00:23:41.640 --> 00:23:44.600
from diverse communities behind the code.


00:23:44.600 --> 00:23:46.400
Conversations include questions like,


00:23:46.400 --> 00:23:47.480
what is technical debt?


00:23:47.480 --> 00:23:50.540
Or what are tech managers actually looking for?


00:23:50.540 --> 00:23:53.760
And do you have to know how to code to get an open source?


00:23:53.760 --> 00:23:56.680
I was actually a guest on Red Hat's previous podcast,


00:23:56.680 --> 00:23:59.880
Command Line Heroes, and Compiler is following along


00:23:59.880 --> 00:24:01.640
in that same tradition of being an excellent,


00:24:01.640 --> 00:24:03.240
produced, and polished show.


00:24:03.240 --> 00:24:05.960
So actually the show that they just released,


00:24:05.960 --> 00:24:07.560
When Should Data Die?


00:24:07.560 --> 00:24:11.860
I think is one of those cool sort of philosophical questions


00:24:11.860 --> 00:24:14.800
of should data have a lifetime?


00:24:14.800 --> 00:24:16.480
Should your data be able to outlive you?


00:24:16.480 --> 00:24:17.960
All those kinds of things are pretty interesting.


00:24:17.960 --> 00:24:19.920
So I recommend people check it out.


00:24:19.920 --> 00:24:22.320
Just visit pythonbytes.fm/compiler.


00:24:22.320 --> 00:24:24.700
The link is in your podcast show notes.


00:24:24.700 --> 00:24:29.040
I know we're all smart developers who are listening.


00:24:29.040 --> 00:24:30.920
You can just search for compiler in your podcast player,


00:24:30.920 --> 00:24:32.660
but please sign up by clicking that link


00:24:32.660 --> 00:24:34.120
and then clicking your podcast player.


00:24:34.120 --> 00:24:35.660
It'll help them know it came from us.


00:24:35.660 --> 00:24:38.100
So thank you to Red Hat and Compiler


00:24:38.100 --> 00:24:41.500
for supporting the show.


00:24:41.500 --> 00:24:43.380
All right, I guess I'm still up, huh, Brian?


00:24:43.380 --> 00:24:45.580
So let's talk peps.


00:24:45.580 --> 00:24:47.540
This PEP is pretty interesting.


00:24:47.540 --> 00:24:50.340
This comes to us from Ijmar.


00:24:50.340 --> 00:24:54.540
It's by Jermaine Bravo and Karl Mayer,


00:24:54.540 --> 00:24:55.740
sponsored by Barry Warsaw.


00:24:55.740 --> 00:24:58.620
And it's something, honestly, I'm


00:24:58.620 --> 00:25:02.720
I'm surprised it hasn't been covered or addressed yet.


00:25:02.720 --> 00:25:06.640
I think this comes out of Meta's Cinder project,


00:25:06.640 --> 00:25:08.640
where they're trying to do a whole bunch


00:25:08.640 --> 00:25:11.560
of performance improvements, but I'm not 100% sure.


00:25:11.560 --> 00:25:13.800
So take that with a grain of salt.


00:25:13.800 --> 00:25:17.040
Basically, the idea is right now what happens


00:25:17.040 --> 00:25:19.500
when I write some Python code, I'll write at the top,


00:25:19.500 --> 00:25:23.800
import requests, import Beanie, import FastAPI.


00:25:23.800 --> 00:25:25.380
What happens when I import Beanie?


00:25:25.380 --> 00:25:28.280
Well, inside Beanie, it says import motor,


00:25:28.280 --> 00:25:31.000
import, Pydantic, what happens inside motor?


00:25:31.000 --> 00:25:34.400
It says import-- there's just this transitive closure


00:25:34.400 --> 00:25:37.000
of at the top of all of these projects, each one of them


00:25:37.000 --> 00:25:40.560
is importing something and parsing and compiling


00:25:40.560 --> 00:25:45.320
the Python code as in abstract syntax trees into memory


00:25:45.320 --> 00:25:47.240
and stuff like that.


00:25:47.240 --> 00:25:49.880
All of that happens when I write one import line, right?


00:25:49.880 --> 00:25:52.080
That's a lot.


00:25:52.080 --> 00:25:55.160
But what if there's different paths in my code


00:25:55.160 --> 00:25:58.060
and only some of the time maybe I'm using Pydantic


00:25:58.060 --> 00:26:01.740
or only later in the app am I actually using FastAPI,


00:26:01.740 --> 00:26:03.020
but not right away.


00:26:03.020 --> 00:26:05.700
And sometimes you might not use them at all, right?


00:26:05.700 --> 00:26:08.220
I could do a bunch of data science imports,


00:26:08.220 --> 00:26:10.980
but only if a certain function runs do I care.


00:26:10.980 --> 00:26:15.980
So this pep, this pep-9-690 says,


00:26:15.980 --> 00:26:17.700
well, let's not do that.


00:26:17.700 --> 00:26:22.500
Let's not preload every possible path that you might run


00:26:22.500 --> 00:26:23.860
when you're gonna use a library.


00:26:23.860 --> 00:26:25.060
Let's wait until you use it.


00:26:25.060 --> 00:26:28.460
So that import FastAPI kind of just hangs there


00:26:28.460 --> 00:26:31.180
until I say FastAPI dot.


00:26:31.180 --> 00:26:33.380
And soon as the first line of code runs there,


00:26:33.380 --> 00:26:35.020
then the import happens.


00:26:35.020 --> 00:26:37.380
So you don't have this transitive closure


00:26:37.380 --> 00:26:42.300
of all these imports if you're not actually gonna use them.


00:26:42.300 --> 00:26:43.940
So it helps with startup time


00:26:43.940 --> 00:26:47.020
and it also maybe helps with overall performance


00:26:47.020 --> 00:26:48.960
if not every bit of code runs.


00:26:48.960 --> 00:26:52.220
- I want this.


00:26:52.220 --> 00:26:53.460
(laughing)


00:26:53.460 --> 00:26:54.300
- Me too.


00:26:54.300 --> 00:26:56.100
- It looks cool, right?


00:26:56.100 --> 00:26:57.780
- One of the things that--


00:26:57.780 --> 00:26:58.820
- You can spend a lot of time at startup


00:26:58.820 --> 00:27:00.940
just because of all the import statements.


00:27:00.940 --> 00:27:04.100
- Yeah, one of the things that I face a lot


00:27:04.100 --> 00:27:06.420
with helping people is with pytest.


00:27:06.420 --> 00:27:08.840
So pytest imports your code.


00:27:08.840 --> 00:27:12.980
So it does, when it's, well, it imports your tests


00:27:12.980 --> 00:27:16.420
and then the tests, it'll import your code to run your code.


00:27:16.420 --> 00:27:19.260
But if you're running, if you're gonna like,


00:27:19.260 --> 00:27:22.240
for instance, Ray, stop on the first failure,


00:27:22.240 --> 00:27:24.820
you're not gonna hit a whole bunch of that code.


00:27:24.820 --> 00:27:29.220
And so avoiding those and getting to start earlier,


00:27:29.220 --> 00:27:30.880
it would help that.


00:27:30.880 --> 00:27:35.060
And that's just one example of startup time being helped.


00:27:35.060 --> 00:27:37.860
Now, I'm curious about how it helped,


00:27:37.860 --> 00:27:42.860
if it'll affect runtime early on, otherwise,


00:27:42.860 --> 00:27:43.820
app host startup.


00:27:43.820 --> 00:27:47.140
- There's some conversations about compatibility.


00:27:47.140 --> 00:27:52.140
So what could happen is there could be side effects


00:27:52.140 --> 00:27:54.200
that happen because of the import.


00:27:54.200 --> 00:27:57.240
You're not supposed to make changes to the system,


00:27:57.240 --> 00:27:59.080
but that's arbitrary code writing


00:27:59.080 --> 00:28:00.360
during your import statement.


00:28:00.360 --> 00:28:03.720
So it could have an effect.


00:28:03.720 --> 00:28:06.280
So theoretically, this could change things.


00:28:06.280 --> 00:28:11.160
And they refer to the not the lazy ones as eager imports.


00:28:11.160 --> 00:28:13.760
But they do talk about how some of these--


00:28:13.760 --> 00:28:18.320
you'll have to pass a runtime flag to the Python interpreter


00:28:18.320 --> 00:28:21.040
or set an environment variable for this to happen by default.


00:28:21.040 --> 00:28:23.680
it won't happen by default, it's off by default.


00:28:23.680 --> 00:28:28.640
So for better or worse, maybe someday that'll change,


00:28:28.640 --> 00:28:29.660
but right now.


00:28:29.660 --> 00:28:34.080
- That's pretty cool, I like it.


00:28:34.080 --> 00:28:34.900
- Yeah.


00:28:34.900 --> 00:28:37.780
Yep, indeed.


00:28:37.780 --> 00:28:40.920
Ben, Mark, you guys have thoughts on this?


00:28:40.920 --> 00:28:42.640
- Yeah, I agree.


00:28:42.640 --> 00:28:44.560
I think this is really interesting


00:28:44.560 --> 00:28:47.360
from the front end world where I spend a lot of time too.


00:28:47.360 --> 00:28:49.700
I mean, there's a billion analogs for this.


00:28:49.700 --> 00:28:53.060
We do all kinds of jumping through hoops from the old days,


00:28:53.060 --> 00:28:54.460
code splitting in the old days,


00:28:54.460 --> 00:28:58.420
and all kinds of webpack and a million other rollup


00:28:58.420 --> 00:29:02.020
and all sorts of ways of trying to take advantage of this


00:29:02.020 --> 00:29:03.820
on the client side because of the browser.


00:29:03.820 --> 00:29:06.860
But I can actually imagine a lot of situations


00:29:06.860 --> 00:29:10.940
using Python where what in one app,


00:29:10.940 --> 00:29:13.980
maybe it is just limited to that moment of startup,


00:29:13.980 --> 00:29:15.920
but I can imagine a lot of situations


00:29:15.920 --> 00:29:18.620
where the way that your app or your service is being used


00:29:18.620 --> 00:29:23.220
is causing that initial run event


00:29:23.220 --> 00:29:27.860
to be an experience that the user is having


00:29:27.860 --> 00:29:30.580
on a more frequent basis based on what you're doing


00:29:30.580 --> 00:29:31.660
or what you've constructed.


00:29:31.660 --> 00:29:33.460
And so that's actually really cool.


00:29:33.460 --> 00:29:34.740
And I haven't thought much about this,


00:29:34.740 --> 00:29:36.060
but I kind of agree with you.


00:29:36.060 --> 00:29:39.260
Sort of surprised now that I see it that this hasn't been--


00:29:39.260 --> 00:29:40.260
>>It should have always done that.


00:29:40.260 --> 00:29:42.100
>>--a conversation before.


00:29:42.100 --> 00:29:43.180
>>Yeah, absolutely.


00:29:43.180 --> 00:29:45.780
And I also wonder if it allows you


00:29:45.780 --> 00:29:48.700
to have code that can be less,


00:29:48.700 --> 00:29:51.780
have more optional dependencies installed.


00:29:51.780 --> 00:29:56.460
So like, for example, I think it was a FastAPI.


00:29:56.460 --> 00:30:00.260
There's some support for forum stuff you have to install


00:30:00.260 --> 00:30:02.300
as a separate pip dependency.


00:30:02.300 --> 00:30:04.420
And here you could just write that code


00:30:04.420 --> 00:30:05.940
and unless you actually run it,


00:30:05.940 --> 00:30:07.700
it doesn't matter if you have import that thing


00:30:07.700 --> 00:30:11.820
that's missing because not until does it try to use it,


00:30:11.820 --> 00:30:12.660
is it gonna be a problem.


00:30:12.660 --> 00:30:15.020
So it might allow you to write simpler code.


00:30:15.020 --> 00:30:17.460
Let's see, out in the audience, Eddie Bergman says,


00:30:17.460 --> 00:30:20.340
I feel like with it opt-in, many people won't know to use it,


00:30:20.340 --> 00:30:23.260
but making it opt-out could break so many systems


00:30:23.260 --> 00:30:24.260
depending on the behavior.


00:30:24.260 --> 00:30:27.260
So yeah, I don't know what the right choice is,


00:30:27.260 --> 00:30:29.420
so I guess the safe one is to just opt-out,


00:30:29.420 --> 00:30:32.260
or to make people opt-in.


00:30:32.260 --> 00:30:33.140
Yeah.


00:30:33.140 --> 00:30:35.580
And Beanie, the author of--


00:30:35.580 --> 00:30:37.740
sorry, Roman Wright, the author of Beanie,


00:30:37.740 --> 00:30:40.060
gives it definitely a thumbs up for this idea as well.


00:30:40.060 --> 00:30:42.420
So good support for some framework authors there


00:30:42.420 --> 00:30:43.660
as well.


00:30:43.660 --> 00:30:47.340
All right, Brian, what do you got for your last one here?


00:30:47.340 --> 00:30:49.340
Hope it's something rich for us.


00:30:49.340 --> 00:30:50.980
- Well, I've got a couple of things that,


00:30:50.980 --> 00:30:52.020
a couple of these are small,


00:30:52.020 --> 00:30:55.460
so it's sort of a multi-grab bag.


00:30:55.460 --> 00:31:00.320
pytest Rich, so this is a plugin for pytest that uses Rich.


00:31:00.320 --> 00:31:02.420
Not much more to say other than it's kind of cool


00:31:02.420 --> 00:31:05.520
to use Rich to have some nice output.


00:31:05.520 --> 00:31:10.020
This was done by Bruno Oliveira,


00:31:10.020 --> 00:31:12.540
who is, he's one of the core people on pytest,


00:31:12.540 --> 00:31:15.960
And also the only other person on the planet that I know of


00:31:15.960 --> 00:31:20.000
that has written a book focused on pytest, but cool guy.


00:31:20.000 --> 00:31:24.240
He said this is a proof of concept


00:31:24.240 --> 00:31:26.580
and he'd love for somebody else to take it over,


00:31:26.580 --> 00:31:29.120
but it doesn't look like it's like dead or anything.


00:31:29.120 --> 00:31:30.440
It's got some activity.


00:31:30.440 --> 00:31:32.800
So anyway, I think this is fun.


00:31:32.800 --> 00:31:37.720
So cool opportunity for people to jump in if they want to.


00:31:37.720 --> 00:31:40.360
- Thanks.


00:31:40.360 --> 00:31:41.560
Question from the audience, Ryan,


00:31:41.560 --> 00:31:43.520
How's it compared to pytest Sugar?


00:31:43.520 --> 00:31:47.880
- I haven't used Sugar for a really long time,


00:31:47.880 --> 00:31:49.480
but you can look at the image.


00:31:49.480 --> 00:31:52.840
So it looks like similar to Sugar,


00:31:52.840 --> 00:31:56.520
but Sugar doesn't have these cool rich tracebacks in it.


00:31:56.520 --> 00:31:58.560
So there's that.


00:31:58.560 --> 00:31:59.400
- Yeah, indeed.


00:31:59.400 --> 00:32:02.300
- So the next thing I wanted to talk about


00:32:02.300 --> 00:32:04.240
before we move on to somebody else


00:32:04.240 --> 00:32:06.600
is a short little thing.


00:32:06.600 --> 00:32:09.040
This was a recommended by,


00:32:09.040 --> 00:32:11.040
actually the pytest Rich was recommended


00:32:11.040 --> 00:32:12.520
by Brian Skin, thanks Brian.


00:32:12.520 --> 00:32:16.720
And then this is recommended by Henrik Finsberg


00:32:16.720 --> 00:32:20.320
is a video by Anthony Sotili


00:32:20.320 --> 00:32:23.760
on how to get images in readmes.


00:32:23.760 --> 00:32:25.240
And I guess I didn't know how to do this.


00:32:25.240 --> 00:32:27.600
We encourage, and I wanted to bring this up


00:32:27.600 --> 00:32:29.840
'cause we encourage everybody to put pictures


00:32:29.840 --> 00:32:31.600
and animated GIFs and all that sort of stuff


00:32:31.600 --> 00:32:34.360
in your readme so that when we re-review stuff


00:32:34.360 --> 00:32:36.440
we can see what it does.


00:32:36.440 --> 00:32:39.080
It helps, but it's not hard.


00:32:40.160 --> 00:32:42.100
So Anthony goes through this whole thing of like,


00:32:42.100 --> 00:32:45.000
you don't have to put the image in your repo.


00:32:45.000 --> 00:32:48.040
You just have to drop it into a comment field


00:32:48.040 --> 00:32:50.440
or in a repo edit field.


00:32:50.440 --> 00:32:55.440
And then GitHub will just put it on a CDN somewhere.


00:32:55.440 --> 00:32:56.960
So the image is just there.


00:32:56.960 --> 00:32:59.220
So some magic there.


00:32:59.220 --> 00:33:01.440
- You kind of trick GitHub into uploading it


00:33:01.440 --> 00:33:02.720
and then not actually.


00:33:02.720 --> 00:33:06.920
- Well, I mean, since the readme supports it,


00:33:06.920 --> 00:33:07.760
it's interesting.


00:33:07.760 --> 00:33:12.760
Anthony talks about using a comment field of your issues


00:33:12.760 --> 00:33:20.120
to drop a picture in and then you get the URL from that.


00:33:20.120 --> 00:33:24.140
But if you just go into your readme within GitHub


00:33:24.140 --> 00:33:26.900
on the web interface and edit there,


00:33:26.900 --> 00:33:31.020
you can also drop it there and it just works fine.


00:33:31.020 --> 00:33:32.620
I guess maybe he's thinking that you're probably


00:33:32.620 --> 00:33:34.760
not gonna edit your readme directly,


00:33:34.760 --> 00:33:37.400
you'll probably edit it locally and push it in.


00:33:37.400 --> 00:33:38.400
You can still do that.


00:33:38.400 --> 00:33:40.840
But anyway, just neat.


00:33:40.840 --> 00:33:41.340
That's cool.


00:33:41.340 --> 00:33:43.200
Very nice.


00:33:43.200 --> 00:33:46.440
Yeah, people should definitely have pictures and explanations


00:33:46.440 --> 00:33:49.120
and charts and all that sort of stuff in their readme.


00:33:49.120 --> 00:33:50.240
So that's great.


00:33:50.240 --> 00:33:54.280
I would just add more generally, docs and tutorials


00:33:54.280 --> 00:33:57.480
can be a strategic asset when done well.


00:33:57.480 --> 00:33:59.000
Tailwind does this amazingly well.


00:33:59.000 --> 00:34:00.260
EdgeDB does it really well.


00:34:00.260 --> 00:34:03.580
DigitalOcean is off the chart in the comprehensiveness


00:34:03.580 --> 00:34:04.800
and thoroughness of there.


00:34:04.800 --> 00:34:06.880
And those things become an asset for the business.


00:34:06.880 --> 00:34:08.520
of an annoyance that you have to do,


00:34:08.520 --> 00:34:10.360
that the docs actually become valuable


00:34:10.360 --> 00:34:12.000
for the project or the business.


00:34:12.000 --> 00:34:14.920
- Yeah, do you want to be there


00:34:14.920 --> 00:34:17.600
or do you regret that you have to go there, right?


00:34:17.600 --> 00:34:18.840
- Right, exactly.


00:34:18.840 --> 00:34:21.840
- All right, Ben, you want to take us out of here


00:34:21.840 --> 00:34:23.560
with your final main topic?


00:34:23.560 --> 00:34:27.200
- Yeah, so as you mentioned,


00:34:27.200 --> 00:34:30.840
part of our latest project,


00:34:30.840 --> 00:34:33.040
LexChart that Mark's talked a little bit about,


00:34:33.040 --> 00:34:34.160
one of the things that we had to do,


00:34:34.160 --> 00:34:37.600
despite the fact that as we were getting close to it,


00:34:37.600 --> 00:34:40.340
I realized you can use LexChart for a lot of things


00:34:40.340 --> 00:34:42.600
that maybe we didn't think about


00:34:42.600 --> 00:34:44.820
when my 12 year old daughter sent me,


00:34:44.820 --> 00:34:48.580
I spun her up an account so she could tinker with it


00:34:48.580 --> 00:34:51.460
so I could kind of get an interesting test case


00:34:51.460 --> 00:34:53.200
out of somebody that has like no connection


00:34:53.200 --> 00:34:54.040
to what we're doing.


00:34:54.040 --> 00:34:57.480
And she sent me a little organization chart


00:34:57.480 --> 00:35:00.800
of Encanto characters and their family tree


00:35:00.800 --> 00:35:03.600
from the movie Encanto, which I wasn't expecting,


00:35:03.600 --> 00:35:08.600
but she's not really our typical user.


00:35:08.600 --> 00:35:11.400
And with our target audience,


00:35:11.400 --> 00:35:14.240
who looks a lot like I did in my former life,


00:35:14.240 --> 00:35:18.720
security is a big, big deal with our clients.


00:35:18.720 --> 00:35:21.480
And so one of the things we obviously had to look at is,


00:35:21.480 --> 00:35:25.200
we need to implement some multi-factor authentication.


00:35:25.200 --> 00:35:29.600
And initially my knee-jerk reaction to that was,


00:35:29.600 --> 00:35:31.680
okay, yeah, we'll just do what everybody does


00:35:31.680 --> 00:35:35.600
and we'll set it up and you'll get an SMS message


00:35:35.600 --> 00:35:38.100
on your phone and all that kind of stuff.


00:35:38.100 --> 00:35:41.240
But as I looked at that more and thought about


00:35:41.240 --> 00:35:44.040
some of the conversations we'd had with clients


00:35:44.040 --> 00:35:48.000
of some of our other software,


00:35:48.000 --> 00:35:51.520
I wondered how long is that really gonna last?


00:35:51.520 --> 00:35:55.160
Because there's a number of kind of real security issues


00:35:55.160 --> 00:35:59.760
with SMS, not least of which is just the way


00:35:59.760 --> 00:36:00.680
voice networks are built.


00:36:00.680 --> 00:36:02.600
everything's sent in clear text,


00:36:02.600 --> 00:36:06.520
it's actually really not that hard to, you know.


00:36:06.520 --> 00:36:08.800
- It works, but people do look down upon it a little bit.


00:36:08.800 --> 00:36:11.600
They're like, "Ah, this is not quite real security.


00:36:11.600 --> 00:36:13.720
This is better than nothing but," right?


00:36:13.720 --> 00:36:14.680
- Yeah, exactly, right?


00:36:14.680 --> 00:36:17.400
And it's not to say, you know, you're making a point.


00:36:17.400 --> 00:36:20.560
It's everywhere, everyone's using it.


00:36:20.560 --> 00:36:23.800
And, you know, by the way, yeah, absolutely.


00:36:23.800 --> 00:36:28.800
You know, password plus MFA, even with SMS is great.


00:36:28.880 --> 00:36:30.880
is so much better than password only


00:36:30.880 --> 00:36:32.360
from a security standpoint.


00:36:32.360 --> 00:36:33.720
So it's not a knock on it.


00:36:33.720 --> 00:36:36.400
I just thought, well, maybe we need to step one more step


00:36:36.400 --> 00:36:39.360
forward here and see if there's some other things.


00:36:39.360 --> 00:36:42.160
And so I was looking for a library that could help us


00:36:42.160 --> 00:36:44.900
with one-time password stuff, and specifically one


00:36:44.900 --> 00:36:47.800
that could help us with time-based


00:36:47.800 --> 00:36:49.620
one-time password implementations,


00:36:49.620 --> 00:36:52.440
which is something that I think Google really ultimately


00:36:52.440 --> 00:36:54.600
started this way back.


00:36:54.600 --> 00:36:56.800
And that's why a lot of people associate this


00:36:56.800 --> 00:36:59.760
with the Google Authenticator app.


00:36:59.760 --> 00:37:01.320
But there's actually a lot of authenticators.


00:37:01.320 --> 00:37:02.600
It's an open standard.


00:37:02.600 --> 00:37:06.400
And it really is closely connected to what's happening


00:37:06.400 --> 00:37:09.320
when you do it with SMS or with email.


00:37:09.320 --> 00:37:11.320
Both of those are similar in that,


00:37:11.320 --> 00:37:12.800
both of these approaches,


00:37:12.800 --> 00:37:16.460
they just lean on a moving factor.


00:37:16.460 --> 00:37:18.320
So in the case of your SMS,


00:37:18.320 --> 00:37:20.360
that moving factor is just usually like a counter


00:37:20.360 --> 00:37:21.200
in the database, right?


00:37:21.200 --> 00:37:23.120
You're just kind of clicking forward and whatever.


00:37:23.120 --> 00:37:26.260
And that's along with all the other secret sauce


00:37:26.260 --> 00:37:31.260
is generating these temporary codes, if you will.


00:37:31.260 --> 00:37:34.180
In time-based, the moving factor is time.


00:37:34.180 --> 00:37:36.540
And so what that allows you to do is


00:37:36.540 --> 00:37:38.620
have an authenticator app


00:37:38.620 --> 00:37:39.860
where you don't actually have to communicate


00:37:39.860 --> 00:37:44.260
with that at all, but based on a shared secret,


00:37:44.260 --> 00:37:46.300
again, same as how you do with SMS,


00:37:46.300 --> 00:37:50.980
you're able to sync up these passwords


00:37:50.980 --> 00:37:52.700
and then they have like kind of a,


00:37:52.700 --> 00:37:54.460
they sort of explode, if you will, right?


00:37:54.460 --> 00:37:57.540
so they last for like 30 seconds and all that kind of thing.


00:37:57.540 --> 00:38:01.780
>> The library you're highlighting here is PyOTP,


00:38:01.780 --> 00:38:04.060
which I guess lets you do this really easy in Python.


00:38:04.060 --> 00:38:07.940
>> It does. Yeah, it makes it really, really straightforward.


00:38:07.940 --> 00:38:11.900
I've in the notes,


00:38:11.900 --> 00:38:13.860
people will be able to see I put a couple of


00:38:13.860 --> 00:38:19.580
representative functions that you could use to do this,


00:38:19.580 --> 00:38:21.940
but it's very small amount of code.


00:38:21.940 --> 00:38:23.640
Basically, you generate a secret,


00:38:23.640 --> 00:38:25.980
you store it with your user credentials.


00:38:25.980 --> 00:38:31.000
Then when you're actually verifying somebody,


00:38:31.000 --> 00:38:34.040
they come in, you have the shared secret in there,


00:38:34.040 --> 00:38:39.960
they pull up their little authenticator app on their phone.


00:38:39.960 --> 00:38:42.700
I think most people know what this looks like,


00:38:42.700 --> 00:38:47.600
but we'll do this there.


00:38:47.600 --> 00:38:50.480
That's the Google Authenticator app.


00:38:50.480 --> 00:38:55.780
and so it gives you a little code and you can see it ticking down and all that kind of stuff.


00:38:55.780 --> 00:39:02.480
And so instead of getting your SMS, you just pull up your code, you hit your app, you type it in, and then your users are voting that,


00:39:02.480 --> 00:39:08.480
and then you're just running that through the verifier and based on this share secret, it says, "Yep, you're the real guy, great,"


00:39:08.480 --> 00:39:13.480
and every 30 seconds those go away. So even if somebody, you know, just looked at mine for my Google Authenticator,


00:39:13.480 --> 00:39:16.480
you know, you got, you know, 30 seconds to figure out my password.


00:39:16.480 --> 00:39:20.880
- Exactly. - See if you can get into that test account


00:39:20.880 --> 00:39:22.880
that I'm showing you that for.


00:39:22.880 --> 00:39:25.720
But yeah, it's super, super simple to implement.


00:39:25.720 --> 00:39:31.200
The only thing, you know, for the Python crowd here is that it is helpful


00:39:31.200 --> 00:39:36.920
from a setup standpoint to do a little bit of front-end work because the easiest way


00:39:36.920 --> 00:39:39.720
for users to set this up is to scan a QR code.


00:39:39.720 --> 00:39:44.040
And so we have that implement on the front end


00:39:44.040 --> 00:39:49.040
where you can see that QR code and scan it from a setup.


00:39:49.040 --> 00:39:52.400
But those little functions I put in the show notes,


00:39:52.400 --> 00:39:54.440
you just spin up a little URI,


00:39:54.440 --> 00:39:58.120
that you can put that into any kind of QR code generator,


00:39:58.120 --> 00:40:00.340
including Python based generators.


00:40:00.340 --> 00:40:01.360
If you actually wanna do that,


00:40:01.360 --> 00:40:03.560
store the image on the server and then serve it up.


00:40:03.560 --> 00:40:06.040
In our case, I actually do that on the JavaScript side


00:40:06.040 --> 00:40:08.240
and I put a little link to QR code


00:40:08.240 --> 00:40:10.920
which is kind of one of the most widely used,


00:40:10.920 --> 00:40:14.520
you know, npm packages for that purpose.


00:40:14.520 --> 00:40:16.560
Display that to user, they scan it, they set it up,


00:40:16.560 --> 00:40:18.920
they pair that first time, and then, you know,


00:40:18.920 --> 00:40:20.540
takes a little getting used to for the user.


00:40:20.540 --> 00:40:21.720
I think, you know, at the end of the day,


00:40:21.720 --> 00:40:24.320
SMS a little more user-friendly,


00:40:24.320 --> 00:40:26.160
just 'cause people are a little bit more familiar with it,


00:40:26.160 --> 00:40:28.280
but this isn't a big leap.


00:40:28.280 --> 00:40:31.040
So we went here instead of something like WebAuthn,


00:40:31.040 --> 00:40:33.620
which is, you know, even probably better


00:40:33.620 --> 00:40:34.840
from a security standpoint,


00:40:34.840 --> 00:40:37.040
but I think a bigger leap for users.


00:40:37.040 --> 00:40:39.120
So we just think it's a cool little library.


00:40:39.120 --> 00:40:41.040
It's easy, it's purpose-built.


00:40:41.040 --> 00:40:43.000
Literally those few lines of code that I put in the show notes,


00:40:43.000 --> 00:40:45.000
it's almost everything that you would need


00:40:45.000 --> 00:40:46.320
to implement this on the back end.


00:40:46.320 --> 00:40:48.440
There really isn't anything else.


00:40:48.440 --> 00:40:49.280
- It's amazing.


00:40:49.280 --> 00:40:50.460
I've always avoided doing this


00:40:50.460 --> 00:40:52.520
because I'm like, ah, it's probably kind of complicated.


00:40:52.520 --> 00:40:54.240
I don't want to screw it up and unlock people out,


00:40:54.240 --> 00:40:57.640
but it looks really simple and fantastic


00:40:57.640 --> 00:40:58.640
and straightforward.


00:40:58.640 --> 00:41:01.560
So yeah, this is a great suggestion for people.


00:41:01.560 --> 00:41:02.640
- Yeah, cool.


00:41:02.640 --> 00:41:05.400
- Brian, have you had to do any of this?


00:41:05.400 --> 00:41:09.400
- No, but I do have like a SaaS app in the works


00:41:09.400 --> 00:41:12.000
that I don't think I'll get that complicated.


00:41:12.000 --> 00:41:14.880
'Cause I think for somebody like with GitHub,


00:41:14.880 --> 00:41:17.880
we have to use it like something like that for GitHub now,


00:41:17.880 --> 00:41:20.120
or you can, and I have set it up.


00:41:20.120 --> 00:41:25.440
But some people, for some kind of apps,


00:41:25.440 --> 00:41:26.600
it depends on your audience.


00:41:26.600 --> 00:41:28.600
Some audiences aren't really gonna want that.


00:41:28.600 --> 00:41:29.760
- Sure.


00:41:29.760 --> 00:41:32.040
- Also depends on what you're protecting.


00:41:32.040 --> 00:41:32.880
- Yeah, exactly.


00:41:32.880 --> 00:41:36.680
of our clients are B2B large corporations all over the world.


00:41:36.680 --> 00:41:39.160
And many of them already have these authenticator apps.


00:41:39.160 --> 00:41:41.040
And the nice thing about this solution


00:41:41.040 --> 00:41:42.240
is it works with any of them.


00:41:42.240 --> 00:41:44.400
So you don't have to, as a business,


00:41:44.400 --> 00:41:46.360
you don't have to direct your clients


00:41:46.360 --> 00:41:48.360
to use a particular authenticator app.


00:41:48.360 --> 00:41:52.200
So if you're using Microsoft or Google or Twilio's Authy


00:41:52.200 --> 00:41:57.160
or any others, you can just plug this in and just use it.


00:41:57.160 --> 00:41:59.000
We test and validate on those three,


00:41:59.000 --> 00:42:01.480
but it'll likely work on any of them.


00:42:01.480 --> 00:42:04.840
So it's really nice in that corporate environment just to slide in.


00:42:04.840 --> 00:42:07.160
>> Yeah, and I should have emphasized for this audience,


00:42:07.160 --> 00:42:11.000
one of the great things about this is SMS is not expensive,


00:42:11.000 --> 00:42:12.380
but this is free.


00:42:12.380 --> 00:42:16.000
It's free for you from a developer standpoint and it's free for your users.


00:42:16.000 --> 00:42:18.600
These Authenticator apps are free downloads.


00:42:18.600 --> 00:42:22.240
You're not imposing any friction on your users from that standpoint,


00:42:22.240 --> 00:42:24.940
just a tiny bit of a learning curve for them.


00:42:24.940 --> 00:42:26.280
But I think what you find, like you said,


00:42:26.280 --> 00:42:30.660
GitHub, you can link an Authenticator app to GitHub if you want to add


00:42:30.660 --> 00:42:35.300
MFA to your GitHub login, which I would say most of your listeners probably are familiar with.


00:42:35.300 --> 00:42:39.380
And so if you're wondering about it, I'd encourage you, just try that. Download Google Authenticator


00:42:39.380 --> 00:42:43.780
or Microsoft Authenticator, implement their MFA, you'll see what the experience is like. And you'll


00:42:43.780 --> 00:42:49.380
probably find that not really probably a big hard sell with your clients. If in fact, MFA is


00:42:49.380 --> 00:42:53.220
something you need, as you say, you don't need it, you don't need it. But if you do, you know you do.


00:42:53.220 --> 00:42:58.500
and this is a solution I think people should consider because I think SMS


00:42:58.500 --> 00:43:03.060
is fine and great but obviously the more widespread it becomes,


00:43:03.060 --> 00:43:08.780
the more likely people are to attack it and the hacks on this are


00:43:08.780 --> 00:43:13.340
not hard. My favorite one is using a cell signal booster which some


00:43:13.340 --> 00:43:16.180
of you heard of, especially some of your listeners that don't live in urban


00:43:16.180 --> 00:43:20.900
areas and whatever and I'm not encouraging this but if you


00:43:20.900 --> 00:43:24.260
poke around just a little bit. It's not going to be very hard for you to figure out how to hack a


00:43:24.260 --> 00:43:27.780
cell signal booster and people don't even know they're attached to it. And you can listen to


00:43:27.780 --> 00:43:33.220
everything and record all their texts and all that. So, yeah, that's a nervous.


00:43:33.220 --> 00:43:34.100
Brian's getting ideas.


00:43:34.100 --> 00:43:43.940
I got to go guys. I love having this. I used Authy and I just checked my Authy has 45 different


00:43:43.940 --> 00:43:48.900
accounts doing 2FA, MFA, which is fantastic. Yeah. I like Authy as well.


00:43:50.740 --> 00:43:53.140
Brian, what else we got?


00:43:53.140 --> 00:43:55.200
>> Well, I've got a few extras.


00:43:55.200 --> 00:43:57.440
Do you have any extras?


00:43:57.440 --> 00:44:02.560
>> You know I do. All right. Yeah, I'll do mine first.


00:44:02.560 --> 00:44:05.680
So let's start with some real quick ones.


00:44:05.680 --> 00:44:11.660
First of all, MacRumors points out that the machine learning framework,


00:44:11.660 --> 00:44:16.660
PyTorch, traditionally these have been mainstream GPU,


00:44:16.660 --> 00:44:19.180
these machine learning training frameworks,


00:44:19.180 --> 00:44:22.080
and especially focused on NVIDIA,


00:44:22.080 --> 00:44:23.580
which if you're on a Mac is a problem


00:44:23.580 --> 00:44:24.940
because you don't have NVIDIA,


00:44:24.940 --> 00:44:27.220
not even before the M1 stuff,


00:44:27.220 --> 00:44:30.260
you had Radeon chips and stuff.


00:44:30.260 --> 00:44:33.220
So doing hardware-based machine acceleration


00:44:33.220 --> 00:44:34.380
was really tricky.


00:44:34.380 --> 00:44:36.820
They are now supporting Metal on Apple,


00:44:36.820 --> 00:44:39.180
which means you get GPU-accelerated training


00:44:39.180 --> 00:44:40.940
on the new Apple Silicon Macs,


00:44:40.940 --> 00:44:43.940
including the M1 Ultra and all that stuff.


00:44:43.940 --> 00:44:46.780
So if people are on M1,


00:44:46.780 --> 00:44:49.100
they may check that out, that sounds good.


00:44:49.100 --> 00:44:50.900
Let's see.


00:44:50.900 --> 00:44:53.380
Got a message from Harry.


00:44:53.380 --> 00:44:56.740
This is a 15-year-old kid who said, hey,


00:44:56.740 --> 00:44:59.460
I built this learning platform and a bunch of tutorials


00:44:59.460 --> 00:45:02.060
with my cousin, Anna, who's 14.


00:45:02.060 --> 00:45:04.380
And they built this app, which I'll link into,


00:45:04.380 --> 00:45:05.660
called Mission Encodable.


00:45:05.660 --> 00:45:08.840
And you come in, and you can do little tutorials.


00:45:08.840 --> 00:45:11.300
And you've got little lessons and achievements


00:45:11.300 --> 00:45:12.700
to do after and stuff.


00:45:12.700 --> 00:45:14.900
So anyway, I just thought I'd give him a shout out,


00:45:14.900 --> 00:45:17.380
because it's really cool that a 15- and 14-year-old put


00:45:17.380 --> 00:45:18.900
this together for people.


00:45:18.900 --> 00:45:20.900
Yeah, very cool.


00:45:20.900 --> 00:45:21.940
Yeah.


00:45:21.940 --> 00:45:23.020
All right.


00:45:23.020 --> 00:45:25.140
Two real quick things as well.


00:45:25.140 --> 00:45:26.380
I use Calendly.


00:45:26.380 --> 00:45:28.420
Calendly, not misstating that.


00:45:28.420 --> 00:45:29.780
That's how it's supposed to be.


00:45:29.780 --> 00:45:34.060
Calendly.com, which is great for sharing your available free time.


00:45:34.060 --> 00:45:36.340
People can sign up and book slots with you.


00:45:36.340 --> 00:45:41.780
I recently learned about Cal.com, which is an open source parallel


00:45:41.780 --> 00:45:44.020
or equivalent to Calendly.com.


00:45:44.020 --> 00:45:47.340
So if you can self-host it, or you have a free version,


00:45:47.340 --> 00:45:50.980
You can even have them host it for more pro things if you want.


00:45:50.980 --> 00:45:52.620
But I just thought it was kind of cool.


00:45:52.620 --> 00:45:55.860
There's an open source cal.com, which is Calendly.


00:45:55.860 --> 00:45:58.940
And on the same vein, if you've heard about Firebase,


00:45:58.940 --> 00:46:04.420
which is kind of like the back end platform for so many mobile apps


00:46:04.420 --> 00:46:07.260
and stuff, so you don't have to have a website and an API


00:46:07.260 --> 00:46:11.140
and a database and users, this would handle all of those things


00:46:11.140 --> 00:46:12.580
for Firebase.


00:46:12.580 --> 00:46:16.860
I also heard about Supabase, like super but without the R, Supabase,


00:46:16.860 --> 00:46:18.980
which is the open source equivalent of that.


00:46:18.980 --> 00:46:22.260
So you can have sort of like the backend cloud for free


00:46:22.260 --> 00:46:25.940
for your, an open source for your mobile things,


00:46:25.940 --> 00:46:27.740
if you care about that.


00:46:27.740 --> 00:46:31.060
And yeah, so those are my,


00:46:31.060 --> 00:46:33.780
oh, I have one more extra I wanna share with you.


00:46:33.780 --> 00:46:39.320
So we've all heard about PyScript, right?


00:46:39.320 --> 00:46:40.320
PyScript is awesome.


00:46:40.320 --> 00:46:41.900
This comes from Anaconda.


00:46:41.900 --> 00:46:45.780
It takes the CPython runtime and turns it into WebAssembly


00:46:45.780 --> 00:46:48.160
and then runs it in your browser.


00:46:48.160 --> 00:46:52.140
And I've been looking at the pyscript.net website


00:46:52.140 --> 00:46:53.860
and they've got all sorts of cool stuff in there.


00:46:53.860 --> 00:46:56.980
And if you go to pyscript/examples,


00:46:56.980 --> 00:46:59.140
there's actually a bunch of examples.


00:46:59.140 --> 00:47:01.340
You showed the one, you covered this last time,


00:47:01.340 --> 00:47:03.340
I think it was last time or time before,


00:47:03.340 --> 00:47:05.220
you covered the anti-gravity one


00:47:05.220 --> 00:47:06.820
and those kinds of things, right?


00:47:06.820 --> 00:47:08.800
What's lacking from here is anything that looks like


00:47:08.800 --> 00:47:10.960
a regular application, right?


00:47:10.960 --> 00:47:12.940
- Yeah.


00:47:12.940 --> 00:47:14.580
- So I said, well--


00:47:14.580 --> 00:47:22.380
the to do app. The to do app is not a regular you got to come on now. No, no, it's you're


00:47:22.380 --> 00:47:27.700
right though. That is the absolute closest by far. But everything here says data science,


00:47:27.700 --> 00:47:33.300
data science, I want Jupyter in the browser, but not with a server run it in the browser.


00:47:33.300 --> 00:47:41.180
And that's fine. But that comes I think, far short of the potential. Okay. Yeah. So I this


00:47:41.180 --> 00:47:44.620
This weekend I'm like, I'm going to fix this.


00:47:44.620 --> 00:47:47.980
And the way I'm fixing it is with this project in a video that I was working on right before


00:47:47.980 --> 00:47:54.740
we jumped on, I'll publish it later today, called the PyScript PWA Weather App.


00:47:54.740 --> 00:47:55.740
So check this out.


00:47:55.740 --> 00:47:57.700
See this thing here on the screen?


00:47:57.700 --> 00:48:01.060
This is an application that installs in your dock offline.


00:48:01.060 --> 00:48:04.500
It installs in your dock.


00:48:04.500 --> 00:48:09.740
It's written in Python and PyScript and with Python on the front end and has no back end


00:48:09.740 --> 00:48:12.220
and stuff locally, like Electron or something like that.


00:48:12.220 --> 00:48:14.940
It's a progressive web app.


00:48:14.940 --> 00:48:16.860
It downloads all the files, including


00:48:16.860 --> 00:48:22.300
the 15 megabytes of the Pyodide runtime in PyScript,


00:48:22.300 --> 00:48:23.140
puts it offline.


00:48:23.140 --> 00:48:26.620
And when you run it, it just starts instantly.


00:48:26.620 --> 00:48:30.640
So from a cold launch until you have this thing up and running,


00:48:30.640 --> 00:48:33.220
it's about two seconds.


00:48:33.220 --> 00:48:35.740
And it goes out and it talks to an API


00:48:35.740 --> 00:48:37.560
and gets this cool weather here.


00:48:37.560 --> 00:48:38.940
And you can have a little button.


00:48:38.940 --> 00:48:42.860
press this refresh button, it goes pop, pop, pop, refresh.


00:48:42.860 --> 00:48:45.260
As you click it, it's instantaneous,


00:48:45.260 --> 00:48:46.580
the way it interacts with it.


00:48:46.580 --> 00:48:49.700
And all of it is written on the front end using stuff


00:48:49.700 --> 00:48:53.100
that you would recognize, stuff that looks like requests,


00:48:53.100 --> 00:48:58.300
and JSON, and Python classes, and try, accept, and everything.


00:48:58.300 --> 00:48:59.500
That's pretty cool.


00:48:59.500 --> 00:49:00.000
It is.


00:49:00.000 --> 00:49:01.260
Here, let me actually pull up a little bit of code


00:49:01.260 --> 00:49:02.900
really quick just to show you all.


00:49:02.900 --> 00:49:03.660
So check it out.


00:49:03.660 --> 00:49:04.780
We've got our regular code.


00:49:04.780 --> 00:49:05.660
Here's our Flask bit.


00:49:05.660 --> 00:49:07.140
But if I go to Static, there's now


00:49:07.140 --> 00:49:10.340
a Python folder in static.


00:49:10.340 --> 00:49:12.820
And you can go to the weather API.


00:49:12.820 --> 00:49:15.060
And let me make that bigger for the screen.


00:49:15.060 --> 00:49:17.300
See this code right here?


00:49:17.300 --> 00:49:20.540
It's download a report, type in, it goes to report.


00:49:20.540 --> 00:49:23.860
It has this thing that comes back from calling this URL,


00:49:23.860 --> 00:49:25.500
turns into JSON, does--


00:49:25.500 --> 00:49:27.820
It's hardly any code.


00:49:27.820 --> 00:49:28.320
That--


00:49:28.320 --> 00:49:29.500
Nice.


00:49:29.500 --> 00:49:33.700
That is running in the browser in the CPython runtime,


00:49:33.700 --> 00:49:36.620
all of it locally with no download and no slow startup.


00:49:36.620 --> 00:49:41.340
So anyway, I'm gonna do a video on that.


00:49:41.340 --> 00:49:42.740
Yeah, what do you guys think?


00:49:42.740 --> 00:49:43.980
Neat, huh?


00:49:43.980 --> 00:49:45.500
- Yeah, PyScript is.


00:49:45.500 --> 00:49:46.660
That's cool what you've done too.


00:49:46.660 --> 00:49:48.020
PyScript's interesting to me.


00:49:48.020 --> 00:49:51.260
I'm interested to see how that evolves.


00:49:51.260 --> 00:49:54.700
I'm sure, like you said, I think most people are using it


00:49:54.700 --> 00:49:56.100
maybe from a data science standpoint


00:49:56.100 --> 00:49:58.180
or waiting for it to mature or whatever,


00:49:58.180 --> 00:50:01.180
but there's some kind of odd analogs


00:50:01.180 --> 00:50:04.740
between how React and some of those things got started here.


00:50:04.740 --> 00:50:07.020
Obviously, angled at a different audience.


00:50:07.020 --> 00:50:09.940
But I think there's some really cool things that


00:50:09.940 --> 00:50:13.860
could be done with this as you evolve.


00:50:13.860 --> 00:50:16.460
And interesting that you mentioned this on the show


00:50:16.460 --> 00:50:20.540
today, because if you look in the repo for PyScript,


00:50:20.540 --> 00:50:23.780
Tailwind is one of their core dependencies.


00:50:23.780 --> 00:50:24.460
>> How nice.


00:50:24.460 --> 00:50:25.180
How interesting.


00:50:25.180 --> 00:50:26.460
Yeah, it's all coming together.


00:50:26.460 --> 00:50:27.540
It's all coming together.


00:50:27.540 --> 00:50:29.940
So I'll talk more about when I release the video later.


00:50:29.940 --> 00:50:32.340
But I think that this, and the source code is out,


00:50:32.340 --> 00:50:33.460
it's linking to GitHub,


00:50:33.460 --> 00:50:34.980
people can check it out and install it.


00:50:34.980 --> 00:50:38.500
It's really neat and I think it opens the door.


00:50:38.500 --> 00:50:40.900
I can see people writing like a Vue.js wrapper,


00:50:40.900 --> 00:50:43.900
so you create a Python class that sort of parallels Vue


00:50:43.900 --> 00:50:45.140
or React or something like that,


00:50:45.140 --> 00:50:47.700
and you could create really neat stuff


00:50:47.700 --> 00:50:50.420
in this offline sort of progressive web app mode.


00:50:50.420 --> 00:50:51.260
So we'll see.


00:50:51.260 --> 00:50:55.740
All right, that's it for my extras.


00:50:55.740 --> 00:50:57.780
- Okay, I've got a few.


00:50:57.780 --> 00:51:02.780
The videos for PyCon US 2022 are up.


00:51:02.780 --> 00:51:04.800
So yay, you can watch them now.


00:51:04.800 --> 00:51:07.320
So I'll have a link to the show notes,


00:51:07.320 --> 00:51:08.880
but you can also just look on YouTube


00:51:08.880 --> 00:51:11.060
and search for PyCon US.


00:51:11.060 --> 00:51:13.720
Yeah, so I'm looking forward to,


00:51:13.720 --> 00:51:16.200
I've got a whole stack of ones I wanna watch.


00:51:16.200 --> 00:51:18.560
I unfortunately didn't get a chance to make it this year.


00:51:18.560 --> 00:51:21.820
So I'm looking forward to participating in this way.


00:51:21.820 --> 00:51:26.720
Second thing I wanted to bring up is another podcast.


00:51:26.720 --> 00:51:28.240
There's another Python podcast out there


00:51:28.240 --> 00:51:30.360
called the Sad Python Girls Club.


00:51:30.360 --> 00:51:33.880
So far they have two episodes.


00:51:33.880 --> 00:51:36.600
The second episode, they interviewed Brett Cannon.


00:51:36.600 --> 00:51:37.440
And it's good.


00:51:37.440 --> 00:51:39.600
They're not actually sad.


00:51:39.600 --> 00:51:43.360
The sad comes from that they used to be emo people


00:51:43.360 --> 00:51:44.400
when they were young.


00:51:44.400 --> 00:51:46.320
So I thought that was interesting.


00:51:46.320 --> 00:51:49.660
So I listened to a lot of the same music.


00:51:49.660 --> 00:51:51.840
- Nice.


00:51:51.840 --> 00:51:52.680
All right, congrats to them for starting that.


00:51:52.680 --> 00:51:53.640
That's cool.


00:51:53.640 --> 00:51:55.000
- Yeah.


00:51:55.000 --> 00:51:57.480
Third thing was, is I'm gonna do this publicly


00:51:57.480 --> 00:51:59.860
to try to get me motivated to finish it,


00:51:59.860 --> 00:52:01.520
the pytest course.


00:52:01.520 --> 00:52:05.920
So yes, I've started work on a pytest course


00:52:05.920 --> 00:52:09.480
and it will be through the talk Python,


00:52:09.480 --> 00:52:12.800
Michael Kennedy thing, unless it's really terrible


00:52:12.800 --> 00:52:14.800
then he probably won't want to think that.


00:52:14.800 --> 00:52:16.120
(laughing)


00:52:16.120 --> 00:52:17.160
- No, it'll be great, Brian.


00:52:17.160 --> 00:52:19.220
I'm looking forward to it.


00:52:19.220 --> 00:52:23.280
- Yeah, so, man, a couple of days ago,


00:52:23.280 --> 00:52:27.600
I recorded like 20 minutes for the video with the mic off.


00:52:27.600 --> 00:52:29.860
(laughing)


00:52:29.860 --> 00:52:33.420
- I've done that or two mics on where there's a weird echo


00:52:33.420 --> 00:52:35.720
it's offset by 20 milliseconds.


00:52:35.720 --> 00:52:39.240
- But I'm looking forward to getting that out


00:52:39.240 --> 00:52:40.700
because a lot of people have asked for it.


00:52:40.700 --> 00:52:42.420
So that's in the works.


00:52:42.420 --> 00:52:44.240
- Fantastic.


00:52:44.240 --> 00:52:45.060
- I think that's cool, Brian.


00:52:45.060 --> 00:52:45.900
You need to finish it.


00:52:45.900 --> 00:52:49.480
We're all a little, none of us write enough tests.


00:52:49.480 --> 00:52:51.320
We need more.


00:52:51.320 --> 00:52:53.120
We could use the course.


00:52:53.120 --> 00:52:53.960
- Cool.


00:52:53.960 --> 00:52:57.160
That's all for me.


00:52:57.160 --> 00:52:58.520
- Either you guys, yeah, you got anything else


00:52:58.520 --> 00:53:01.400
you wanna give a shout out to before we wrap it up?


00:53:01.400 --> 00:53:03.080
- I guess I better shout out.


00:53:03.080 --> 00:53:04.360
Go ahead, Mark.


00:53:04.360 --> 00:53:05.720
I said I better shout out


00:53:05.720 --> 00:53:08.320
since you highlighted the cheerleaders earlier.


00:53:08.320 --> 00:53:10.720
I'm pretty sure that was my daughter, Isabel,


00:53:10.720 --> 00:53:12.360
and her friend Olivia and Jess listening.


00:53:12.360 --> 00:53:13.960
So if they've hung with us this long


00:53:13.960 --> 00:53:17.160
through Python podcast, then I better shout out to them.


00:53:17.160 --> 00:53:18.000
Thanks.


00:53:18.000 --> 00:53:18.820
(Mark laughs)


00:53:18.820 --> 00:53:20.280
- Right on, that's cool.


00:53:20.280 --> 00:53:21.120
- And I would just say,


00:53:21.120 --> 00:53:26.840
in any sort of public company, complicated organizational structures like Tesla or Apple


00:53:26.840 --> 00:53:32.020
or anything, we have some of them on our website on LexChart. And if you want others, just


00:53:32.020 --> 00:53:34.000
drop us a line and we'll build them.


00:53:34.000 --> 00:53:39.840
Nice. Yeah, that's pretty cool. All right. So we close out with the joke, Brian.


00:53:39.840 --> 00:53:40.840
Yes.


00:53:40.840 --> 00:53:44.440
I wanted to come up with something that I felt was a little bit associated with learning


00:53:44.440 --> 00:53:48.320
to code and being somewhat beginner, even though what these guys built is not at all


00:53:48.320 --> 00:53:50.640
but I know that they've been on that path recently.


00:53:50.640 --> 00:53:52.200
So here we go.


00:53:52.200 --> 00:53:54.840
So this one is an animated GIF


00:53:54.840 --> 00:53:57.120
of a very frustrated person,


00:53:57.120 --> 00:53:58.520
carry their computer out,


00:53:58.520 --> 00:54:00.420
throwing it in the dumpster, the back.


00:54:00.420 --> 00:54:02.720
It says programmers,


00:54:02.720 --> 00:54:05.600
when they finally fix all their syntax errors in their code,


00:54:05.600 --> 00:54:08.200
just to be confronted with a bug.


00:54:08.200 --> 00:54:09.040
I don't know about you,


00:54:09.040 --> 00:54:11.080
but I remember when I was learning C++,


00:54:11.080 --> 00:54:14.000
I was so happy when I got my complicated code to compile.


00:54:14.000 --> 00:54:15.560
And then I realized, no,


00:54:15.560 --> 00:54:18.360
That's just the beginning of the hair pulling part.


00:54:18.360 --> 00:54:22.080
- Yeah, it's Ron Swanson.


00:54:22.080 --> 00:54:24.660
(all laughing)


00:54:24.660 --> 00:54:27.040
Love that show.


00:54:27.040 --> 00:54:29.160
- Yeah, yeah, absolutely.


00:54:29.160 --> 00:54:30.280
All right.


00:54:30.280 --> 00:54:31.120
- Thanks a lot.


00:54:31.120 --> 00:54:31.940
- That's all I got, Brian.


00:54:31.940 --> 00:54:33.080
- Excellent, that was fun.


00:54:33.080 --> 00:54:36.240
- Thanks Ben and Mark for showing up


00:54:36.240 --> 00:54:37.920
and thanks Michael as always.


00:54:37.920 --> 00:54:38.840
It's been fun.


00:54:38.840 --> 00:54:39.660
- Yeah.


00:54:39.660 --> 00:54:40.500
- You bet.


00:54:40.500 --> 00:54:41.440
- Bye everyone.


00:54:41.440 --> 00:54:42.280
- Bye.


00:54:42.280 --> 00:54:43.100
- Cheers.


00:54:43.100 --> 00:54:43.940
- Bye.


00:54:43.940 --> 00:54:53.940
[BLANK_AUDIO]

