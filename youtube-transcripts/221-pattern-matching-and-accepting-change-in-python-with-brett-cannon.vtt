WEBVTT

00:00:00.000 --> 00:00:08.960
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:08.960 --> 00:00:17.000
to your earbuds. This is episode 221, I think, recorded, when is it? February 17th, 2021.


00:00:17.000 --> 00:00:18.480
I am Brian Okken.


00:00:18.480 --> 00:00:21.360
I'm Michael Kennedy.


00:00:21.360 --> 00:00:27.240
And we also have Brett Cannon. Yeah. I always talk over the third person. I'm not sure why.


00:00:27.240 --> 00:00:28.360
- You're always going like,


00:00:28.360 --> 00:00:29.400
is there gonna be an introduction


00:00:29.400 --> 00:00:31.440
or should I just join the Brady Bunch theme?


00:00:31.440 --> 00:00:34.360
Let's just go in a circle and just introduce ourselves.


00:00:34.360 --> 00:00:35.480
- Well, if we're gonna do Brady Bunch,


00:00:35.480 --> 00:00:37.520
we gotta have more people so we can like fill out,


00:00:37.520 --> 00:00:40.960
what is that, like rows of three or whatever in the picture.


00:00:40.960 --> 00:00:43.160
- I'm sure Anthony Shaw and Paul Everett are available


00:00:43.160 --> 00:00:44.520
based on how often they show up here.


00:00:44.520 --> 00:00:46.360
So I'm sure they're waiting in the wings.


00:00:46.360 --> 00:00:48.000
- That's right, we'll just swoop them in here


00:00:48.000 --> 00:00:48.840
for the right picture.


00:00:48.840 --> 00:00:49.660
Well, welcome, Brett.


00:00:49.660 --> 00:00:50.560
It's great to have you here.


00:00:50.560 --> 00:00:52.560
- Thanks, lovely to be back.


00:00:52.560 --> 00:00:53.940
- You know what, Brian,


00:00:53.940 --> 00:00:56.320
I'm impressed with Brett's microphone.


00:00:56.320 --> 00:00:59.200
he has mastered the work from home.


00:00:59.200 --> 00:01:00.960
- Yeah, I love this.


00:01:00.960 --> 00:01:01.840
We're gonna have to put a link


00:01:01.840 --> 00:01:04.000
in the show notes to this thing.


00:01:04.000 --> 00:01:04.880
- Tell people about this.


00:01:04.880 --> 00:01:07.280
So, Brian and I both have good microphones.


00:01:07.280 --> 00:01:09.060
We have many different microphones we've tried,


00:01:09.060 --> 00:01:13.040
but yours has a visual aspect, which is unusual for audio.


00:01:13.040 --> 00:01:17.160
- Yeah, so it's a HyperX Quadcast S specifically,


00:01:17.160 --> 00:01:19.720
and it comes with RGB lighting


00:01:19.720 --> 00:01:21.120
'cause it's really a gamer mic.


00:01:21.120 --> 00:01:25.220
But obviously in pandemic times, I work from home,


00:01:25.220 --> 00:01:27.980
and my wife is also at home because of the pandemic.


00:01:27.980 --> 00:01:30.780
And we always had an issue of her wanting to come in


00:01:30.780 --> 00:01:33.980
and not knowing whether I was actually occupied,


00:01:33.980 --> 00:01:37.700
actually in a meeting, because I'm in them a lot for work,


00:01:37.700 --> 00:01:39.100
or whether or not I was just sitting there


00:01:39.100 --> 00:01:41.020
with my headphones on listening to music or whatever,


00:01:41.020 --> 00:01:42.960
and she could totally just walk in.


00:01:42.960 --> 00:01:45.300
And so the great thing about this microphone


00:01:45.300 --> 00:01:47.580
is if it has a touch sensitive top,


00:01:47.580 --> 00:01:49.780
and if you tap it, the LEDs turn off.


00:01:49.780 --> 00:01:52.980
And so it acts as like an on-air light for the room.


00:01:52.980 --> 00:01:54.400
I mean, it's not that bright specifically,


00:01:54.400 --> 00:01:56.840
but if she opens the door, she can totally just look in


00:01:56.840 --> 00:01:58.420
and go, is the mic lit?


00:01:58.420 --> 00:02:00.720
And if the mic's not lit, she knows she's not going


00:02:00.720 --> 00:02:03.320
to be heard or be directly interrupting me


00:02:03.320 --> 00:02:05.720
and I can just turn and answer any questions she has


00:02:05.720 --> 00:02:08.300
and it's awesome, it works out great that way.


00:02:08.300 --> 00:02:10.740
- That is so fantastic, the whole mic glows


00:02:10.740 --> 00:02:12.720
when it's on and active, different colors,


00:02:12.720 --> 00:02:13.760
it's beautiful, I love it.


00:02:13.760 --> 00:02:15.680
- Yeah, and you can even change which colors it uses.


00:02:15.680 --> 00:02:17.840
This is, I can't remember if it's waterfall or not,


00:02:17.840 --> 00:02:20.400
but you can actually change how the color spectrum changes


00:02:20.400 --> 00:02:22.040
from side to side in terms of colors


00:02:22.040 --> 00:02:23.920
and whether it's top to bottom or not.


00:02:23.920 --> 00:02:24.760
It's very pretty.


00:02:24.760 --> 00:02:27.080
I think I once did Harry Potter color themed


00:02:27.080 --> 00:02:29.320
for a co-worker of mine who's a big Harry Potter fan


00:02:29.320 --> 00:02:30.240
for all the houses.


00:02:30.240 --> 00:02:33.280
And I've purposely not played with it


00:02:33.280 --> 00:02:34.120
and kept with the defaults


00:02:34.120 --> 00:02:35.720
'cause it's definitely one of those things


00:02:35.720 --> 00:02:36.800
I could totally nerd out on


00:02:36.800 --> 00:02:38.400
and play with the colors all day long.


00:02:38.400 --> 00:02:40.080
I tried Python colors once.


00:02:40.080 --> 00:02:42.640
The transitions didn't look quite as nice, but you know.


00:02:42.640 --> 00:02:43.480
- Yeah, no, it's good.


00:02:43.480 --> 00:02:45.000
I have the microphone that matches,


00:02:45.000 --> 00:02:46.880
or sorry, the mouse that matches it.


00:02:46.880 --> 00:02:47.720
- Oh, nice.


00:02:47.720 --> 00:02:49.400
- And it pulses, so.


00:02:49.400 --> 00:02:50.340
I didn't get it for the color,


00:02:50.340 --> 00:02:52.280
but it's the only one I could get that had color.


00:02:52.280 --> 00:02:53.200
I'm like, why is it of color?


00:02:53.200 --> 00:02:54.040
how do I turn this off?


00:02:54.040 --> 00:02:55.720
But no, it just has colors, fine.


00:02:55.720 --> 00:02:57.120
But anyway, great mic.


00:02:57.120 --> 00:02:58.520
I think people should check that out.


00:02:58.520 --> 00:03:01.060
If they have weird work from home situations


00:03:01.060 --> 00:03:04.200
and people are interrupting, it's super cool, I love it.


00:03:04.200 --> 00:03:06.320
- Definitely get a mic stand though.


00:03:06.320 --> 00:03:07.920
The default stand's a little low


00:03:07.920 --> 00:03:12.480
and I have found that getting a cheap $10, $15 stand,


00:03:12.480 --> 00:03:17.040
I got this from Amazon, that pushes it off about seven inches


00:03:17.040 --> 00:03:19.600
I think, I'm trying to do the American units.


00:03:19.600 --> 00:03:22.160
It pushes up about 15 centimeters.


00:03:22.160 --> 00:03:23.000
- Perfect.


00:03:23.000 --> 00:03:25.640
sweet spot in terms of distance while still not completely


00:03:25.640 --> 00:03:27.800
taking up your vision in the screen.


00:03:27.800 --> 00:03:29.240
- Yeah, excellent, excellent.


00:03:29.240 --> 00:03:33.040
Well, Brian, you wanna kick us off here


00:03:33.040 --> 00:03:34.040
with our first topic?


00:03:34.040 --> 00:03:36.920
- Yeah, well, we've got, it's hard to keep up with


00:03:36.920 --> 00:03:40.840
Will McCougan, sorry Will.


00:03:40.840 --> 00:03:46.160
Will wrote Rich, which is a, I forget what he calls it.


00:03:46.160 --> 00:03:49.320
Basically it's a CLI tool, but there's been a whole bunch


00:03:49.320 --> 00:03:54.840
are really cool things he's done recently, like really recently.


00:03:54.840 --> 00:03:59.080
So in December, he added Live View,


00:03:59.080 --> 00:04:02.320
which allows you to just--


00:04:02.320 --> 00:04:04.800
it continually updates whenever an event happens


00:04:04.800 --> 00:04:08.440
or something in that part of the screen, which is cool.


00:04:08.440 --> 00:04:10.120
He didn't write a blog post on that.


00:04:10.120 --> 00:04:13.760
But then in January, Tree View came out.


00:04:13.760 --> 00:04:16.600
And the Tree Views are lovely.


00:04:16.600 --> 00:04:19.840
You can do all sorts of stuff with the tree view.


00:04:19.840 --> 00:04:24.840
And yeah, it's a nice thing to have in a CLI tool.


00:04:24.840 --> 00:04:28.160
And then what's really impressive to me,


00:04:28.160 --> 00:04:29.800
I think was layouts.


00:04:29.800 --> 00:04:33.720
So this month he released layouts


00:04:33.720 --> 00:04:37.800
and it allows you to split the screen up


00:04:37.800 --> 00:04:42.120
and his demo even shows it happening


00:04:42.120 --> 00:04:46.520
like within a VS Code when terminal--


00:04:46.520 --> 00:04:51.640
>> Oh, yeah. Within the bottom terminal part of VS Code.


00:04:51.640 --> 00:04:53.480
Yeah. Brett, you've heard of this, right?


00:04:53.480 --> 00:04:54.800
You've heard of this tool?


00:04:54.800 --> 00:04:58.360
>> How can I not? I'm a fan of the podcast and Brian loves this tool,


00:04:58.360 --> 00:05:00.920
so I've heard about it multiple times.


00:05:00.920 --> 00:05:03.360
>> I guess we've covered it before.


00:05:03.360 --> 00:05:05.920
But one of the reasons why I'm covering it again,


00:05:05.920 --> 00:05:09.240
there's a couple of reasons, is the layout's neat,


00:05:09.240 --> 00:05:13.280
and really, now I want to click on stuff and I want to do entry.


00:05:13.280 --> 00:05:19.480
And he sort of hinted at that, that he's kind of going towards a full TUI, which I had never


00:05:19.480 --> 00:05:21.440
heard of before, text user interface.


00:05:21.440 --> 00:05:22.440
Yeah, TUIs.


00:05:22.440 --> 00:05:23.440
All right.


00:05:23.440 --> 00:05:24.440
Right on.


00:05:24.440 --> 00:05:25.440
That'd be cool.


00:05:25.440 --> 00:05:26.440
So I think that would be neat.


00:05:26.440 --> 00:05:27.560
And I'd like to encourage that.


00:05:27.560 --> 00:05:32.880
So the other thing that's going on with Rich is he's accepting sponsorships now.


00:05:32.880 --> 00:05:39.360
And it's kind of hidden in the demo window, but we're highlighting it on the show so more


00:05:39.360 --> 00:05:42.760
people can know about it.


00:05:42.760 --> 00:05:45.560
So GitHub is doing sponsorships on GitHub,


00:05:45.560 --> 00:05:47.760
and I like how GitHub sponsorships work.


00:05:47.760 --> 00:05:50.500
It's kind of neat.


00:05:50.500 --> 00:05:51.940
So check it out.


00:05:51.940 --> 00:05:53.920
The other thing that I guess when I was playing


00:05:53.920 --> 00:05:55.160
with these layout things,


00:05:55.160 --> 00:05:57.820
that I didn't really realize before


00:05:57.820 --> 00:06:00.080
is you can just say Python-m rich,


00:06:00.080 --> 00:06:03.180
and it shows a little demo of a whole bunch of stuff.


00:06:03.180 --> 00:06:06.160
And then some of the particular parts of it,


00:06:06.160 --> 00:06:08.600
you can demo them individually.


00:06:08.600 --> 00:06:13.240
Like for the layout, you can say Python-mrich.layout,


00:06:13.240 --> 00:06:15.240
and it'll show a demo.


00:06:15.240 --> 00:06:20.240
The tree is also as a demo, and the live one actually,


00:06:20.240 --> 00:06:23.520
I couldn't escape it, I had to kill my window.


00:06:23.520 --> 00:06:26.560
So the live one just continually updates some,


00:06:26.560 --> 00:06:29.360
like some, I think it does,


00:06:29.360 --> 00:06:31.600
I don't know if it's actually doing,


00:06:31.600 --> 00:06:32.640
going out to the internet,


00:06:32.640 --> 00:06:37.640
but it's doing some like conversions of monetary conversions


00:06:38.400 --> 00:06:41.760
and it just kept updating and it doesn't hit Control + C.


00:06:41.760 --> 00:06:42.600
So.


00:06:42.600 --> 00:06:45.280
- Someone's got a bare except somewhere they shouldn't have.


00:06:45.280 --> 00:06:46.160
(laughing)


00:06:46.160 --> 00:06:47.380
- I think it's very reliable.


00:06:47.380 --> 00:06:49.080
I mean, the only way to exit it is Force Quit.


00:06:49.080 --> 00:06:50.020
So we're all.


00:06:50.020 --> 00:06:52.720
- Kill Dash 9.


00:06:52.720 --> 00:06:53.720
Where's your friend?


00:06:53.720 --> 00:06:59.240
- So yeah, I'd love to have Rich continue with this


00:06:59.240 --> 00:07:01.920
and make it a full TUI, that'd be fun.


00:07:01.920 --> 00:07:03.040
- That would be very cool.


00:07:03.040 --> 00:07:05.580
'Cause the presentation is really nice here.


00:07:05.580 --> 00:07:07.500
- I will also fully support Will


00:07:07.500 --> 00:07:08.780
making this a full-on thing,


00:07:08.780 --> 00:07:10.220
'cause actually a couple months ago,


00:07:10.220 --> 00:07:13.020
I did a slight dive on a weekend


00:07:13.020 --> 00:07:15.700
trying to find some Tui libraries,


00:07:15.700 --> 00:07:20.060
'cause I have a personal project for work purposes


00:07:20.060 --> 00:07:21.780
that I've been trying to do a GUI for,


00:07:21.780 --> 00:07:23.900
and two years in a row,


00:07:23.900 --> 00:07:26.980
I've tried to do it during hackathon week at Microsoft,


00:07:26.980 --> 00:07:29.180
and I keep failing 'cause I don't have enough time


00:07:29.180 --> 00:07:32.540
to dive into all the GUI libraries that go from like,


00:07:32.540 --> 00:07:35.060
here's how to do Hello World, here's the reference.


00:07:35.060 --> 00:07:38.100
And it's like, no, no, I need more steps there.


00:07:38.100 --> 00:07:40.500
- Where's that middle ground, come on.


00:07:40.500 --> 00:07:41.340
- Yeah, exactly.


00:07:41.340 --> 00:07:43.020
And then I decided, oh, well,


00:07:43.020 --> 00:07:44.620
I totally could just do this in Curses.


00:07:44.620 --> 00:07:47.420
It's literally just to keep track of what I do every day.


00:07:47.420 --> 00:07:50.660
And it's just like, it's snippets from Google


00:07:50.660 --> 00:07:52.380
is where I picked up the habit of just literally just,


00:07:52.380 --> 00:07:54.300
oh, I did this today that was out of ordinary.


00:07:54.300 --> 00:07:55.940
I did this today that was out of ordinary,


00:07:55.940 --> 00:07:58.140
just to kind of track the high level,


00:07:58.140 --> 00:07:58.980
not just meetings,


00:07:58.980 --> 00:08:01.500
but I actually did something different today.


00:08:01.500 --> 00:08:04.180
And it's like, oh, I could totally do this in the Terminal.


00:08:04.180 --> 00:08:07.060
like suddenly pull up in Cursor's library,


00:08:07.060 --> 00:08:08.540
it's in the Snider library, and it's like,


00:08:08.540 --> 00:08:10.660
oh yes, you need to know the size of your terminal window


00:08:10.660 --> 00:08:11.800
and all this other stuff, and oh,


00:08:11.800 --> 00:08:13.420
how to move the cursor to this specific position.


00:08:13.420 --> 00:08:15.540
It's like, yeah, no, I still don't have time for this.


00:08:15.540 --> 00:08:19.060
So if we're just gonna move this along


00:08:19.060 --> 00:08:21.700
and make input work, I mean,


00:08:21.700 --> 00:08:24.500
I would be totally down for giving it a shot.


00:08:24.500 --> 00:08:26.300
- Yeah, yeah, quite cool.


00:08:26.300 --> 00:08:31.000
And if people don't know, you kind of live an alter ego.


00:08:31.000 --> 00:08:34.520
You've got a BrightCannon open source steering council


00:08:34.520 --> 00:08:38.880
and also work closely with VS Code at Microsoft, right?


00:08:38.880 --> 00:08:43.000
So having the screenshot on the screen is right at home.


00:08:43.000 --> 00:08:44.080
- Yeah, yeah.


00:08:44.080 --> 00:08:44.900
Just for people who don't know,


00:08:44.900 --> 00:08:47.720
I'm the dev manager for the Python extension for VS Code.


00:08:47.720 --> 00:08:52.040
That's how I pay for my open source habit,


00:08:52.040 --> 00:08:55.760
which includes being on the Python steering council


00:08:55.760 --> 00:08:57.080
on the core dev.


00:08:57.080 --> 00:08:58.300
- Yeah, quite cool.


00:08:59.520 --> 00:09:03.920
So, Gendalforf says, "I've been using Prompt Toolkit


00:09:03.920 --> 00:09:05.220
"for the Tui library for a while,


00:09:05.220 --> 00:09:07.760
"but this Rich seems a lot nicer


00:09:07.760 --> 00:09:09.160
"if it actually accepted input,"


00:09:09.160 --> 00:09:11.240
which I agree, it seems very cool.


00:09:11.240 --> 00:09:13.240
- And I've heard some people using them together,


00:09:13.240 --> 00:09:14.780
I just don't know how to do that.


00:09:14.780 --> 00:09:16.880
So, if somebody wants to write a tutorial


00:09:16.880 --> 00:09:20.120
on how to use both Rich and Prompt Toolkit together,


00:09:20.120 --> 00:09:21.080
that'd be cool.


00:09:21.080 --> 00:09:22.920
- Yeah, that would be cool, actually.


00:09:22.920 --> 00:09:25.680
All right, what I wanna talk about


00:09:25.680 --> 00:09:28.120
is this article I ran across


00:09:28.120 --> 00:09:31.040
and some tools that I went to play with afterwards


00:09:31.040 --> 00:09:33.640
after reading it called 12 requests per second.


00:09:33.640 --> 00:09:34.740
Sounds amazing, right?


00:09:34.740 --> 00:09:40.720
So it's a realistic look at a web frameworks


00:09:40.720 --> 00:09:41.600
and Python web frameworks.


00:09:41.600 --> 00:09:44.160
So if you look out there, you'll hear things like,


00:09:44.160 --> 00:09:47.680
oh, we're getting 100,000 requests per second on UV loop


00:09:47.680 --> 00:09:49.120
with a single thread.


00:09:49.120 --> 00:09:54.040
Or, you know, we've got Sanic doing 100,000 requests


00:09:54.040 --> 00:09:58.520
or even to pronto up to 1.2 million requests per second,


00:09:58.520 --> 00:10:00.320
which is amazing.


00:10:00.320 --> 00:10:03.760
And then a lot of these examples are doing


00:10:03.760 --> 00:10:07.840
like really not real type of work.


00:10:07.840 --> 00:10:09.920
They're just doing some little tiny thing like,


00:10:09.920 --> 00:10:11.680
oh, here, let's add two numbers


00:10:11.680 --> 00:10:13.760
and tell you how fast we can do that.


00:10:13.760 --> 00:10:16.360
So this article is a more like,


00:10:16.360 --> 00:10:19.080
well, let's go through a real application


00:10:19.080 --> 00:10:21.800
and see what kind of performance you might expect.


00:10:21.800 --> 00:10:24.200
So I thought it'd be fun to talk about this


00:10:24.200 --> 00:10:27.240
'cause it gives some people some things to think about.


00:10:27.240 --> 00:10:29.880
You know, how can you compare your app


00:10:29.880 --> 00:10:33.920
to these types of quotes that people are getting and so on?


00:10:33.920 --> 00:10:37.160
And would it be better to choose something like


00:10:37.160 --> 00:10:41.560
Depronto or AIOHTP or FastAPI or something like that


00:10:41.560 --> 00:10:43.920
over say Flask or Django,


00:10:43.920 --> 00:10:47.480
which don't have so much support for things like async.


00:10:47.480 --> 00:10:49.140
So I thought this was fun to go through


00:10:49.140 --> 00:10:51.280
and just kind of look at it.


00:10:51.280 --> 00:10:55.340
they start out by profiling just sort of a Hello World app


00:10:55.340 --> 00:10:56.780
and they get, all right, well,


00:10:56.780 --> 00:10:57.800
the Hello World's pretty good.


00:10:57.800 --> 00:11:01.820
If you run Flask on CPython, you get,


00:11:01.820 --> 00:11:06.820
I don't know, some amount here, maybe it was 500 to 1,000.


00:11:06.820 --> 00:11:11.880
You run it on PyPy, they were able to get 3,000.


00:11:11.880 --> 00:11:14.680
You run it, and so that's just, you know, Flask run, right?


00:11:14.680 --> 00:11:15.680
Which is not really the way


00:11:15.680 --> 00:11:17.100
you should probably be doing things.


00:11:17.100 --> 00:11:20.040
You should be running on G-Unicorn or MicroWizGy


00:11:20.040 --> 00:11:20.920
or something like that.


00:11:20.920 --> 00:11:25.160
So if they ran the same thing on unicorn,


00:11:25.160 --> 00:11:27.880
it's up to like 12,000 and you run it on,


00:11:27.880 --> 00:11:28.840
compare that against Sanic,


00:11:28.840 --> 00:11:31.720
you get, Sanic was doing like 24,000 or something.


00:11:31.720 --> 00:11:35.160
So these comparisons I thought would be fun for people.


00:11:35.160 --> 00:11:37.600
You can go through, they've got a bunch of graphs


00:11:37.600 --> 00:11:39.160
that you can check out, but then they write one


00:11:39.160 --> 00:11:42.360
that actually talks to a database doing databasey things.


00:11:42.360 --> 00:11:44.800
And then let me get down to the numbers here,


00:11:44.800 --> 00:11:45.640
the bottom for that.


00:11:45.640 --> 00:11:47.800
And they're like, okay, well, with this one,


00:11:47.800 --> 00:11:52.480
Now we're running at quite a bit lower request per second.


00:11:52.480 --> 00:11:54.440
And I think in the end, they said for our real app,


00:11:54.440 --> 00:11:56.240
what we ended up with is a whopping


00:11:56.240 --> 00:11:58.640
like 12 requests per second.


00:11:58.640 --> 00:11:59.480
Yeah, here we go.


00:11:59.480 --> 00:12:01.160
Here's the graph I was looking for.


00:12:01.160 --> 00:12:05.160
Where like, this is Flask


00:12:05.160 --> 00:12:11.380
running the synchronous Postgres driver there.


00:12:11.380 --> 00:12:14.180
And that's all pretty interesting.


00:12:14.180 --> 00:12:16.900
I think, even be able to answer the question,


00:12:16.900 --> 00:12:22.340
you know, well, what about me? What about my app? How would it do if I were to run these things against it?


00:12:22.340 --> 00:12:24.940
And we've talked about Locust before.


00:12:24.940 --> 00:12:29.540
Locust is a really fantastic way to write


00:12:29.540 --> 00:12:35.060
load testing and user interaction testing against


00:12:35.060 --> 00:12:41.420
websites, web APIs, and so on. And it's all about Python. So what you do with this is you go through and you write


00:12:41.420 --> 00:12:44.620
some kind of class and you say, okay, here's a test


00:12:45.340 --> 00:12:50.340
like a representation of what people might do to my website.


00:12:50.340 --> 00:12:53.820
They might log in, they might go view the episode page


00:12:53.820 --> 00:12:55.940
if we were testing the Python Bytes site,


00:12:55.940 --> 00:12:57.380
or they go check out the episode page,


00:12:57.380 --> 00:13:00.060
they might drill into an episode, they might do a search.


00:13:00.060 --> 00:13:02.300
And what you can do is you write simple little bits


00:13:02.300 --> 00:13:06.980
of Python to say, here's a function that does this action,


00:13:06.980 --> 00:13:08.620
here's a function that does that action,


00:13:08.620 --> 00:13:11.180
like here's one that goes to the episode listing.


00:13:11.180 --> 00:13:12.340
And then you can actually,


00:13:12.340 --> 00:13:13.820
it's not shown in the example here,


00:13:13.820 --> 00:13:18.660
but you can say things like, well, 10 out of 15 times


00:13:18.660 --> 00:13:20.580
I want them to view an episode page,


00:13:20.580 --> 00:13:22.720
one out of the 10 times I want them to do a search,


00:13:22.720 --> 00:13:24.280
and three out of the 10 times


00:13:24.280 --> 00:13:27.180
I want them to actually go to the listing, right?


00:13:27.180 --> 00:13:28.200
So you can sort of break it up


00:13:28.200 --> 00:13:30.780
to what the normal look would be.


00:13:30.780 --> 00:13:35.780
Then you just run Locust and you get like this web UI


00:13:35.780 --> 00:13:38.140
where you enter some information and then it just runs,


00:13:38.140 --> 00:13:40.580
if you want even in a distributed way, against your site


00:13:40.580 --> 00:13:43.720
and then pounds it until it gives up, basically.


00:13:43.720 --> 00:13:47.560
Brett, have you heard of this tool?


00:13:47.560 --> 00:13:48.660
- No, I actually haven't.


00:13:48.660 --> 00:13:51.060
I mean, you hear about different tools


00:13:51.060 --> 00:13:52.640
for different things, but this is pretty,


00:13:52.640 --> 00:13:54.860
looking at this example, it's pretty simple,


00:13:54.860 --> 00:13:56.020
which is pretty great.


00:13:56.020 --> 00:13:57.820
- Yeah, the simplicity is really great.


00:13:57.820 --> 00:14:00.760
And then when you run it, you actually get a web view


00:14:00.760 --> 00:14:03.420
into it, and the web UI lets you basically control


00:14:03.420 --> 00:14:05.620
and monitor the tests in real time.


00:14:05.620 --> 00:14:08.100
So anyway, coming back to some numbers off of that,


00:14:08.100 --> 00:14:12.700
I decided, well, if they're getting 12 to 80 requests


00:14:12.700 --> 00:14:17.220
per second, what does my stuff look like?


00:14:17.220 --> 00:14:19.060
For example, a talk to Python training stuff,


00:14:19.060 --> 00:14:21.360
it's not using any of this async stuff.


00:14:21.360 --> 00:14:22.100
How is it doing?


00:14:22.100 --> 00:14:26.020
So it's Python 3, MicroWizKey, Pyramid, MongoDB on a $20


00:14:26.020 --> 00:14:28.700
server.


00:14:28.700 --> 00:14:30.380
Would it get 12 requests per second?


00:14:30.380 --> 00:14:30.940
I don't know.


00:14:30.940 --> 00:14:35.580
So I turned this thing loose, and it'll


00:14:35.580 --> 00:14:40.340
do about 125 requests per second, which I felt better than.


00:14:40.340 --> 00:14:41.220
That's better than 12.


00:14:41.220 --> 00:14:42.300
I felt pretty good.


00:14:42.300 --> 00:14:46.820
But one of the things that's cool about Locust is you can tell it,


00:14:46.820 --> 00:14:50.020
not just I want you to use this partitioning,


00:14:50.020 --> 00:14:54.460
but also I would like you to have a distribution of how often the user


00:14:54.460 --> 00:14:55.580
actually does something.


00:14:55.580 --> 00:15:00.180
So you can say, well, this user is going to make between every 10 to 60 seconds,


00:15:00.180 --> 00:15:03.620
it's going to do one of these things among this mix.


00:15:03.620 --> 00:15:05.020
So instead of just pounding it, it's like,


00:15:05.020 --> 00:15:07.420
well, an average user doesn't just hit F5


00:15:07.420 --> 00:15:09.580
or Control + Command + R as hard as they can.


00:15:09.580 --> 00:15:11.660
They move around and they pause, right?


00:15:11.660 --> 00:15:12.500
So you can pause that.


00:15:12.500 --> 00:15:16.880
So I don't know, maybe it's 10 to 20,000 realistic users


00:15:16.880 --> 00:15:19.200
I was able to sort of map out with this.


00:15:19.200 --> 00:15:21.840
Anyway, it was just a fun deep dive into like,


00:15:21.840 --> 00:15:23.620
well, what does performance look like?


00:15:23.620 --> 00:15:25.300
How important is async?


00:15:25.300 --> 00:15:27.780
Some of the tools to do it.


00:15:27.780 --> 00:15:30.180
I don't know, if people are, if that's interesting people,


00:15:30.180 --> 00:15:32.780
Definitely check out this 12 requests per second


00:15:32.780 --> 00:15:33.780
article here.


00:15:33.780 --> 00:15:36.220
I think you'll enjoy it.


00:15:36.220 --> 00:15:37.580
Then also check out Locusts


00:15:37.580 --> 00:15:39.740
if you wanna try to answer that question for yourself.


00:15:39.740 --> 00:15:42.820
- So I was curious how, when you're testing your site,


00:15:42.820 --> 00:15:48.300
did anybody else like experience downtime or something


00:15:48.300 --> 00:15:49.220
while you're being on it?


00:15:49.220 --> 00:15:50.620
- Well, so that's the question, right?


00:15:50.620 --> 00:15:52.060
Like with the Locusts thing,


00:15:52.060 --> 00:15:54.700
you can start to see what the like real time,


00:15:54.700 --> 00:15:57.820
what the response times are and everything.


00:15:57.820 --> 00:15:59.020
It never crashed.


00:15:59.020 --> 00:16:00.340
It just got a little bit slow.


00:16:00.340 --> 00:16:03.140
So I ran it locally, and I'm like,


00:16:03.140 --> 00:16:04.980
well, what's it look like in production, right?


00:16:04.980 --> 00:16:07.460
So I'm like, I really want to know.


00:16:07.460 --> 00:16:09.380
With all the way that everything's put together,


00:16:09.380 --> 00:16:10.580
what number will I get?


00:16:10.580 --> 00:16:12.100
So I'm like, I'm just going to turn it loose on it,


00:16:12.100 --> 00:16:13.460
and if it starts to overwhelm it,


00:16:13.460 --> 00:16:14.980
I'll just hit the stop button.


00:16:14.980 --> 00:16:15.820
And it never died.


00:16:15.820 --> 00:16:18.860
It just got to where it took like three or 400 milliseconds


00:16:18.860 --> 00:16:19.700
to get back to me.


00:16:19.700 --> 00:16:21.220
So it was okay.


00:16:21.220 --> 00:16:23.140
- Okay, good.


00:16:23.140 --> 00:16:24.420
- Yeah, so pretty fun.


00:16:24.420 --> 00:16:26.420
Pretty fun example there.


00:16:26.420 --> 00:16:27.580
- I think one other thing I appreciate


00:16:27.580 --> 00:16:28.620
about that blog post actually


00:16:28.620 --> 00:16:31.660
was they pointed out towards the end that at some point,


00:16:31.660 --> 00:16:33.520
scaling is no longer a Python problem


00:16:33.520 --> 00:16:34.780
and it's an infrastructure problem.


00:16:34.780 --> 00:16:36.460
Like, oh, it's probably better to update


00:16:36.460 --> 00:16:38.060
your database and stuff.


00:16:38.060 --> 00:16:40.460
And I've heard this from a lot of people too,


00:16:40.460 --> 00:16:43.540
of there's kind of a misnomer


00:16:43.540 --> 00:16:45.140
if you're not in the Python community that,


00:16:45.140 --> 00:16:48.020
oh, Python's so slow, it's gonna be your bottleneck.


00:16:48.020 --> 00:16:49.660
And instead I've heard it from a lot of people


00:16:49.660 --> 00:16:51.300
in the community that, oh, actually it's not,


00:16:51.300 --> 00:16:54.140
I can get it done, get my work done in a third of a time


00:16:54.140 --> 00:16:55.780
and then the two thirds of time it would have taken me


00:16:55.780 --> 00:16:57.700
to do it in, I don't know, Java,


00:16:57.700 --> 00:16:59.020
just choose a different language.


00:16:59.020 --> 00:17:01.420
I can optimize my infrastructure, and guess what?


00:17:01.420 --> 00:17:02.660
I end up with the same performance


00:17:02.660 --> 00:17:05.220
with more time to bug fix and test


00:17:05.220 --> 00:17:07.720
than I would have in the other platform.


00:17:07.720 --> 00:17:09.180
And the other thing is, is obviously,


00:17:09.180 --> 00:17:11.580
there is always throwing more hardware at the problem


00:17:11.580 --> 00:17:14.420
if you need a horizontally scale.


00:17:14.420 --> 00:17:18.220
But, and honestly, I think when I say this post also,


00:17:18.220 --> 00:17:20.340
I think from what Craig pointed out,


00:17:20.340 --> 00:17:22.900
not everyone needs 1,000 requests a second.


00:17:22.900 --> 00:17:23.940
- Yeah.


00:17:23.940 --> 00:17:24.920
Most people don't.


00:17:24.920 --> 00:17:28.600
Even popular websites are not doing 1,000.


00:17:28.600 --> 00:17:31.400
I mean, that's a lot of requests, 1,000 requests a second.


00:17:31.400 --> 00:17:34.200
- Like, most people measure in queries per minute,


00:17:34.200 --> 00:17:35.680
not per second, right?


00:17:35.680 --> 00:17:40.680
So like even 12 per second, like we're still talking 720,


00:17:40.680 --> 00:17:42.960
if my math is not finding me on the spot,


00:17:42.960 --> 00:17:44.160
requests per minute, right?


00:17:44.160 --> 00:17:45.920
That's still a decent cliff.


00:17:45.920 --> 00:17:47.440
Like, if you're running a business


00:17:47.440 --> 00:17:50.100
that's getting that much traffic every single minute,


00:17:50.100 --> 00:17:52.240
you're probably still doing pretty good for yourself.


00:17:52.240 --> 00:17:55.480
- Yeah, that's 32 million page views per month, right?


00:17:55.480 --> 00:17:56.320
- Yeah.


00:17:56.320 --> 00:17:57.520
- That's like, you're at a limit


00:17:57.520 --> 00:17:59.180
where you got some real stuff going on,


00:17:59.180 --> 00:18:00.160
some real infrastructure at that point.


00:18:00.160 --> 00:18:02.280
- Well, okay, so, but there's also,


00:18:02.280 --> 00:18:03.760
if I've got services running,


00:18:03.760 --> 00:18:06.000
I've got a bunch of services that include this.


00:18:06.000 --> 00:18:10.120
I mean, one user interaction isn't one hit.


00:18:10.120 --> 00:18:13.460
It might be dozens, so.


00:18:13.460 --> 00:18:16.400
- Yeah, so my rule of thumb is honestly,


00:18:16.400 --> 00:18:19.120
don't worry unless you're going over 100 a second.


00:18:19.120 --> 00:18:20.680
Like, you should be able to hit 100 a second


00:18:20.680 --> 00:18:21.780
without too much effort,


00:18:21.780 --> 00:18:22.980
and then after that you might have to start


00:18:22.980 --> 00:18:23.820
doing some planning,


00:18:23.820 --> 00:18:26.080
but I would suspect as a general rule of thumb,


00:18:26.080 --> 00:18:29.180
you can handle hundreds without a whole lot of effort


00:18:29.180 --> 00:18:30.020
in Python.


00:18:30.020 --> 00:18:30.840
- Yeah.


00:18:30.840 --> 00:18:31.680
- And if you get into a thousand,


00:18:31.680 --> 00:18:32.820
you might have to do a bit more planning for it,


00:18:32.820 --> 00:18:36.440
but it's totally serviceable for that kind of thing.


00:18:36.440 --> 00:18:39.220
- Yeah, totally agree.


00:18:39.220 --> 00:18:42.260
Magnus Carlsen has a quick comment.


00:18:42.260 --> 00:18:44.980
Nice, so I can now see if my work


00:18:44.980 --> 00:18:48.880
turning my FastAPI app into async was worth it.


00:18:48.880 --> 00:18:50.060
Yes, you can.


00:18:50.060 --> 00:18:52.520
It's a very good use of that.


00:18:52.520 --> 00:18:53.500
- I'm gonna be biased and just say


00:18:53.500 --> 00:18:54.520
it was totally worth it, Magnus.


00:18:54.520 --> 00:18:55.760
You just don't know yet.


00:18:55.760 --> 00:18:57.520
(both laughing)


00:18:57.520 --> 00:19:00.240
- Because it's got the cool new design patterns, absolutely.


00:19:00.240 --> 00:19:01.640
- Exactly.


00:19:01.640 --> 00:19:02.940
- All right, Brett, you're up next.


00:19:02.940 --> 00:19:05.380
You've got something special for us.


00:19:05.380 --> 00:19:10.380
- Yeah, so the world exclusive news-breaking thing


00:19:10.380 --> 00:19:15.920
is the Python launcher for Unix is probably at RC stage.


00:19:15.920 --> 00:19:19.040
For those of you who don't know about this,


00:19:19.040 --> 00:19:24.040
It's a project I've been working on since May of 2018.


00:19:24.040 --> 00:19:26.360
And if you're a Windows user,


00:19:26.360 --> 00:19:27.640
you probably know what I'm talking about,


00:19:27.640 --> 00:19:30.120
but on Windows, there's a little app


00:19:30.120 --> 00:19:32.880
called the Python Launcher for Windows,


00:19:32.880 --> 00:19:35.660
and it ships with Python and it gives you the py command.


00:19:35.660 --> 00:19:37.440
So sometimes you might see this on websites


00:19:37.440 --> 00:19:38.540
where they say, well, if you're on Windows,


00:19:38.540 --> 00:19:41.240
you run Python using py, and then the command


00:19:41.240 --> 00:19:44.340
and other platforms just run with Python 3.


00:19:45.200 --> 00:19:50.200
And I decided that I kind of wanted this on Unix.


00:19:50.200 --> 00:19:53.220
I had had enough people complain to me


00:19:53.220 --> 00:19:55.360
about like how it's difficult to get started


00:19:55.360 --> 00:19:57.300
where having the Windows instructions


00:19:57.300 --> 00:19:58.800
on how to run something was always different


00:19:58.800 --> 00:20:00.840
from the Unix version and all this.


00:20:00.840 --> 00:20:02.440
- Yeah, that is really annoying.


00:20:02.440 --> 00:20:03.880
The very first thing you gotta do,


00:20:03.880 --> 00:20:05.720
like right at the start, like, oh, it's so easy,


00:20:05.720 --> 00:20:06.680
but there's these two ways.


00:20:06.680 --> 00:20:08.760
There's like this diversion, right?


00:20:08.760 --> 00:20:09.960
- Exactly.


00:20:09.960 --> 00:20:12.520
And I saw some benefit to the Python launcher


00:20:12.520 --> 00:20:16.020
because what it does on Windows is it serves kind of


00:20:16.020 --> 00:20:18.320
two key purposes.


00:20:18.320 --> 00:20:22.680
One is it kind of makes up for the lack of shebang support


00:20:22.680 --> 00:20:25.560
on Windows because the launcher will actually look


00:20:25.560 --> 00:20:28.080
for a shebang line, figure out what version of Python


00:20:28.080 --> 00:20:30.180
is required and then finds the right version of Python


00:20:30.180 --> 00:20:31.260
to run it.


00:20:31.260 --> 00:20:34.080
The other thing is it does away with the need


00:20:34.080 --> 00:20:38.060
of caring about what order you installed your Pythons in.


00:20:38.060 --> 00:20:40.360
'Cause like for instance on Unix, like Python 3,


00:20:40.360 --> 00:20:41.600
what does that point at?


00:20:41.600 --> 00:20:44.360
Well, what it points at is the last version of Python 3


00:20:44.360 --> 00:20:47.960
that you installed, not the newest version of Python.


00:20:47.960 --> 00:20:52.640
So if you installed 3.9 today, but then installed the 3.8


00:20:52.640 --> 00:20:55.740
security release that I think happened yesterday,


00:20:55.740 --> 00:20:59.200
you will get 3.8 as your version for Python 3.


00:20:59.200 --> 00:21:02.320
So if you don't specify Python 3.9, you won't be running it.


00:21:02.320 --> 00:21:04.360
You have to either create your virtual environment


00:21:04.360 --> 00:21:06.440
and be using it that way or remember that.


00:21:06.440 --> 00:21:07.820
Python Launcher takes care of all that.


00:21:07.820 --> 00:21:09.480
It will automatically just figure out


00:21:09.480 --> 00:21:11.280
what versions you have installed and just


00:21:11.280 --> 00:21:13.120
automatically run the newest version.


00:21:13.120 --> 00:21:16.420
And so I really liked that.


00:21:16.420 --> 00:21:19.700
So I decided to implement it in Rust,


00:21:19.700 --> 00:21:22.200
partially as a Rust project of decent size,


00:21:22.200 --> 00:21:24.760
and it's about a thousand lines of Rust code.


00:21:24.760 --> 00:21:27.900
And also 'cause I wanted it, because if this works out,


00:21:27.900 --> 00:21:30.320
hopefully some projects can stop listing


00:21:30.320 --> 00:21:31.980
two different ways to run things.


00:21:31.980 --> 00:21:35.440
So in the Unix version,


00:21:35.440 --> 00:21:36.940
it's a little different from the Windows version,


00:21:36.940 --> 00:21:38.680
and I'll ask for feedback from the two of you


00:21:38.680 --> 00:21:41.080
and anyone in the live stream if they wanna provide it.


00:21:41.080 --> 00:21:44.580
is first it looks to see if a virtual environment is activated.


00:21:44.580 --> 00:21:47.080
So it looks for the virtual under env environment variable,


00:21:47.080 --> 00:21:48.580
and if it's there, it just uses that.


00:21:48.580 --> 00:21:51.580
So automatically, this is a little shorter and easier


00:21:51.580 --> 00:21:53.080
if you have an activated virtual environment.


00:21:53.080 --> 00:21:55.580
It's just py now instead of having to type Python.


00:21:55.580 --> 00:21:57.580
The next one is if you have--


00:21:57.580 --> 00:22:00.080
You're here to save us from RSI already.


00:22:00.080 --> 00:22:02.580
I'm kidding, but this is really interesting. Keep going.


00:22:02.580 --> 00:22:04.580
Yeah, yeah. One third of the typing.


00:22:04.580 --> 00:22:08.580
The other thing is if you create a virtual environment


00:22:08.580 --> 00:22:12.500
in a .venv directory,


00:22:12.500 --> 00:22:15.440
it will also automatically use that without activation.


00:22:15.440 --> 00:22:21.420
So once again, if you use the,


00:22:21.420 --> 00:22:23.020
I personally think standard nomenclature,


00:22:23.020 --> 00:22:24.980
naming your virtual environments .venv,


00:22:24.980 --> 00:22:26.180
you don't have to activate them anymore


00:22:26.180 --> 00:22:30.900
because activation is just a shorthand for the shell


00:22:30.900 --> 00:22:32.300
that honestly I typically just use


00:22:32.300 --> 00:22:34.180
to make Python do the right thing


00:22:34.180 --> 00:22:36.900
because I use -m for everything,


00:22:36.900 --> 00:22:38.300
even when I'm in an activated environment.


00:22:38.300 --> 00:22:39.780
this takes care of that entire step for me.


00:22:39.780 --> 00:22:42.180
So I don't have to activate my environments anymore.


00:22:42.180 --> 00:22:43.660
- Okay, that's super cool.


00:22:43.660 --> 00:22:47.020
- After that, it does the shebang, just like on Windows,


00:22:47.020 --> 00:22:48.500
trying to figure out what the right Python


00:22:48.500 --> 00:22:49.800
might be for that.


00:22:49.800 --> 00:22:51.940
And then after that, it checks some environment variables.


00:22:51.940 --> 00:22:54.380
Like if you wanna, if you have 3.10 installed,


00:22:54.380 --> 00:22:56.520
for instance, for Python, you have an alpha installed,


00:22:56.520 --> 00:22:58.340
but you wanna make sure that if you ever say,


00:22:58.340 --> 00:23:02.340
hey, if I say Python, if I run Pi with no arguments


00:23:02.340 --> 00:23:06.220
or say, hey, I wanna run a Python 3 version of Python,


00:23:06.220 --> 00:23:07.900
you can actually set the environment variables


00:23:07.900 --> 00:23:09.860
to restrict it and basically specify


00:23:09.860 --> 00:23:11.900
the exact version you want.


00:23:11.900 --> 00:23:14.420
And then after that, it just, if none of that triggers,


00:23:14.420 --> 00:23:16.700
it just finds the newest version and runs that.


00:23:16.700 --> 00:23:19.660
I've been running this personally for a while.


00:23:19.660 --> 00:23:23.940
And when I added the .venv support,


00:23:23.940 --> 00:23:24.940
I've completely switched.


00:23:24.940 --> 00:23:26.980
I don't even bother typing Python anymore


00:23:26.980 --> 00:23:28.980
'cause this completely fits my workflow


00:23:28.980 --> 00:23:32.820
of just doing exactly what I think it should do


00:23:32.820 --> 00:23:34.260
whenever I need.


00:23:34.260 --> 00:23:35.700
Now, the question I have for the two of you


00:23:35.700 --> 00:23:37.220
and anyone in the audience who cares to answer


00:23:37.220 --> 00:23:40.060
is do you think prioritizing virtual environments


00:23:40.060 --> 00:23:42.300
over shebangs makes sense?


00:23:42.300 --> 00:23:44.060
Now my argument is yes,


00:23:44.060 --> 00:23:46.360
obviously or else I wouldn't have done it this way.


00:23:46.360 --> 00:23:47.580
But this is supposed to be,


00:23:47.580 --> 00:23:49.660
I don't know how much of this is a Unixism


00:23:49.660 --> 00:23:51.460
versus just in general,


00:23:51.460 --> 00:23:53.720
because I do hope to actually add Windows support


00:23:53.720 --> 00:23:57.320
to this as well and make this a universal Python launcher.


00:23:57.320 --> 00:23:59.300
So the reason I did it this way was,


00:23:59.300 --> 00:24:02.080
on Unix you can just chmod a file


00:24:02.080 --> 00:24:03.380
and add the executable bit


00:24:03.380 --> 00:24:05.400
and that's how you can execute it.


00:24:05.400 --> 00:24:07.060
And honestly, most of my files at this point


00:24:07.060 --> 00:24:08.540
are gonna be in a virtual environment anyway,


00:24:08.540 --> 00:24:11.740
whether installed via PIPX or I create an entry point


00:24:11.740 --> 00:24:13.220
and I install that.


00:24:13.220 --> 00:24:16.220
So once again, I don't need the shebang directly.


00:24:16.220 --> 00:24:19.940
It's just gonna be baked into the executable.


00:24:19.940 --> 00:24:21.700
And Windows will do the exact same thing, right?


00:24:21.700 --> 00:24:24.100
Like set of tools will give you that little shim.


00:24:24.100 --> 00:24:28.100
So to me, if I am running in a project directory


00:24:28.100 --> 00:24:30.900
with a virtual environment, whether activated or not,


00:24:30.900 --> 00:24:32.860
I'm assuming that's what I want.


00:24:32.860 --> 00:24:35.060
Don't try to figure it out for me


00:24:35.060 --> 00:24:36.740
or else I'd be running this somewhere else.


00:24:36.740 --> 00:24:38.860
and I would not have a virtual environment installed.


00:24:38.860 --> 00:24:39.700
- Yeah. - Does that logic


00:24:39.700 --> 00:24:40.520
make sense?


00:24:40.520 --> 00:24:42.940
Do people, do you two think I made the right decision here


00:24:42.940 --> 00:24:45.020
in choosing virtual environments over shebang lines


00:24:45.020 --> 00:24:46.860
or am I crazy?


00:24:46.860 --> 00:24:49.220
- I forgot shebangs were even supported.


00:24:49.220 --> 00:24:51.980
- I'm all about virtual environments, yes.


00:24:51.980 --> 00:24:53.560
- Okay, cool.


00:24:53.560 --> 00:24:54.820
- I think this is fantastic.


00:24:54.820 --> 00:24:58.180
I've long wanted an easy way to just say,


00:24:58.180 --> 00:25:00.300
I'm down inside.


00:25:00.300 --> 00:25:04.380
Maybe you can tell me if it works this way.


00:25:04.380 --> 00:25:07.100
does it traverse up looking for a virtual environment?


00:25:07.100 --> 00:25:11.860
Like if I'm in a sub directory and I try to pie a file,


00:25:11.860 --> 00:25:14.280
but one directory up, there's a virtual environment.


00:25:14.280 --> 00:25:16.620
Will it go up and find that and then use it?


00:25:16.620 --> 00:25:18.100
- No, I did not implement it that way.


00:25:18.100 --> 00:25:20.500
It would not be too difficult to do it that way.


00:25:20.500 --> 00:25:23.720
But for simplicity reasons, when I first plugged this in,


00:25:23.720 --> 00:25:26.580
for my purposes, I'm not an SRC guy


00:25:26.580 --> 00:25:28.180
like Brian is, for instance.


00:25:28.180 --> 00:25:30.380
So I don't need to worry about that as much.


00:25:30.380 --> 00:25:33.820
But that'd be totally reasonable feature request


00:25:33.820 --> 00:25:36.340
NAS Core to build a traverse up a directories


00:25:36.340 --> 00:25:38.260
looking for the .vnv directory.


00:25:38.260 --> 00:25:39.100
- Yeah, very cool.


00:25:39.100 --> 00:25:41.420
- I'm down a level in my SRC,


00:25:41.420 --> 00:25:43.700
go up a level to find the actual--


00:25:43.700 --> 00:25:45.260
- Right, like I have a lot of things


00:25:45.260 --> 00:25:47.740
that will do like maintenance for my website.


00:25:47.740 --> 00:25:49.680
So I'll have like a bin folder


00:25:49.680 --> 00:25:51.480
as one of the sub folders of my website.


00:25:51.480 --> 00:25:53.100
Then I'll go in there and I wanna run something.


00:25:53.100 --> 00:25:54.380
If I like, oh, I should have run


00:25:54.380 --> 00:25:56.180
and gone up and then bin slash, right?


00:25:56.180 --> 00:25:57.100
I think it'd just be really cool.


00:25:57.100 --> 00:25:59.820
Like I'm sort of in the realm of this virtual environment,


00:25:59.820 --> 00:26:02.380
even if it's not at the same working directory.


00:26:03.740 --> 00:26:05.540
- Yeah, and one thing I do wanna clarify here


00:26:05.540 --> 00:26:07.940
is this is very much about simplifying


00:26:07.940 --> 00:26:09.380
running Python manually.


00:26:09.380 --> 00:26:13.020
It is not meant to completely replace running Python, right?


00:26:13.020 --> 00:26:14.460
Like a misnomer I hear from people


00:26:14.460 --> 00:26:16.100
when I tell them about this is like,


00:26:16.100 --> 00:26:18.420
oh, hey, are you gonna add a config file


00:26:18.420 --> 00:26:21.060
to be able to alias to PyPy


00:26:21.060 --> 00:26:23.260
versus specifically, or this thing,


00:26:23.260 --> 00:26:24.860
or a framework builder, that thing is.


00:26:24.860 --> 00:26:29.340
And for me is if you have that kind of specific requirement


00:26:29.340 --> 00:26:31.940
of a specific version of Python you have installed,


00:26:31.940 --> 00:26:34.940
just use the absolute paths of that version of Python.


00:26:34.940 --> 00:26:37.260
I don't think this is purely for,


00:26:37.260 --> 00:26:38.460
I just want the newest version.


00:26:38.460 --> 00:26:41.000
I don't care what it is, just give it to me.


00:26:41.000 --> 00:26:42.240
Or I have a virtual environment,


00:26:42.240 --> 00:26:43.460
just give me the virtual environment.


00:26:43.460 --> 00:26:45.300
I don't wanna have to think about it.


00:26:45.300 --> 00:26:47.740
If you have to put thought into what kind of Python


00:26:47.740 --> 00:26:49.620
you want to run, I think you should be specifying


00:26:49.620 --> 00:26:51.940
that manually, not be using this.


00:26:51.940 --> 00:26:54.280
- Well, so on the side of the,


00:26:54.280 --> 00:26:57.460
being able to go up a couple of directories


00:26:57.460 --> 00:26:59.080
looking for virtual environments,


00:26:59.080 --> 00:27:00.740
I'm often not in the source directory.


00:27:00.740 --> 00:27:03.580
I'm often sitting in the tests directory


00:27:03.580 --> 00:27:05.700
running pytest on stuff, in which case,


00:27:05.700 --> 00:27:09.260
I guess I already am in a virtual environment,


00:27:09.260 --> 00:27:10.380
so it doesn't matter.


00:27:10.380 --> 00:27:12.900
But I might just open up another terminal


00:27:12.900 --> 00:27:17.900
and try to, you know, just run Python.


00:27:17.900 --> 00:27:19.340
So I like this.


00:27:19.340 --> 00:27:21.780
I'm excited to hear that this is eventually


00:27:21.780 --> 00:27:24.060
going to be a Windows thing also, hopefully.


00:27:24.060 --> 00:27:29.820
I don't actually normally use the Python launcher on Windows


00:27:29.820 --> 00:27:34.380
- It doesn't do looking for virtual environments, does it?


00:27:34.380 --> 00:27:38.380
- No, that is exclusive to the Unix version of this launcher.


00:27:38.380 --> 00:27:39.640
(laughing)


00:27:39.640 --> 00:27:44.180
So basically the environment variable it will use,


00:27:44.180 --> 00:27:45.300
it doesn't actually look on path,


00:27:45.300 --> 00:27:47.620
it completely uses the Windows registry.


00:27:47.620 --> 00:27:50.100
It does the shebang and that's it.


00:27:50.100 --> 00:27:55.100
So looking in the .venv folder, that is entirely my edition


00:27:55.100 --> 00:27:59.660
and the order of execution here is kind of tweaked


00:27:59.660 --> 00:28:00.940
to what I think.


00:28:00.940 --> 00:28:04.300
And it doesn't search on path actually.


00:28:04.300 --> 00:28:06.580
So that's a Unix thing specifically.


00:28:06.580 --> 00:28:09.300
But I suspect this actually helped with the Windows Store,


00:28:09.300 --> 00:28:11.260
although I think Steve Dower fixed that issue


00:28:11.260 --> 00:28:12.820
with the Windows Store install.


00:28:12.820 --> 00:28:15.460
But yeah, so,


00:28:15.460 --> 00:28:17.460
yeah, there's slight tweaks.


00:28:17.460 --> 00:28:20.420
But I figure if I have all the logic done already,


00:28:20.420 --> 00:28:22.340
there's no reason not to just make it universal


00:28:22.340 --> 00:28:23.740
to support multiple platforms.


00:28:23.740 --> 00:28:26.460
So, why not?


00:28:26.460 --> 00:28:27.780
- Yeah.


00:28:27.780 --> 00:28:30.540
- So your announcement here has kind of lit up


00:28:30.540 --> 00:28:31.420
the live stream.


00:28:31.420 --> 00:28:35.620
So ZDocs is just a Brett Cannon fan, which is awesome.


00:28:35.620 --> 00:28:40.540
Gendaforth asks, "Is the Rust version cross-platform?"


00:28:40.540 --> 00:28:43.700
Is there a chance of this on Windows?


00:28:43.700 --> 00:28:47.620
- No, I don't really, I've not tried it on Windows.


00:28:47.620 --> 00:28:49.700
It definitely works on Mac and Linux, right?


00:28:49.700 --> 00:28:53.700
So it truly is Unix-based, so it will handle that no problem.


00:28:53.700 --> 00:28:57.300
I have not tried to wire it up into the registry at all,


00:28:57.300 --> 00:28:58.140
So that's not there.


00:28:58.140 --> 00:29:01.540
I have an open enhancement issue to do that.


00:29:01.540 --> 00:29:02.900
I honestly don't know what would happen


00:29:02.900 --> 00:29:04.100
if you tried running on some Windows.


00:29:04.100 --> 00:29:05.020
I haven't tried.


00:29:05.020 --> 00:29:08.940
Like everything's very hard coded to Unix at the moment


00:29:08.940 --> 00:29:09.780
just to get this done.


00:29:09.780 --> 00:29:11.420
Like if you look at the readme,


00:29:11.420 --> 00:29:14.660
you'll notice everything is slash bin.


00:29:14.660 --> 00:29:16.340
- Slash user slash bin, yeah.


00:29:16.340 --> 00:29:19.320
- There's no scripts support here.


00:29:19.320 --> 00:29:22.660
If slash one I do Windows support,


00:29:22.660 --> 00:29:23.660
obviously I'll look at fix,


00:29:23.660 --> 00:29:25.820
but I have tried putting zero effort


00:29:25.820 --> 00:29:27.500
because the Python launcher for Windows


00:29:27.500 --> 00:29:29.640
just comes with the install from python.org, right?


00:29:29.640 --> 00:29:33.040
So there was no real time pressure to try to get that done.


00:29:33.040 --> 00:29:34.820
So I haven't tried it.


00:29:34.820 --> 00:29:35.660
- I'm a big fan.


00:29:35.660 --> 00:29:38.700
I could try this on my macOS and I'd be happy now.


00:29:38.700 --> 00:29:40.020
- Yeah, this is how I do it.


00:29:40.020 --> 00:29:40.860
I have it on my Mac.


00:29:40.860 --> 00:29:41.680
I just install,


00:29:41.680 --> 00:29:43.540
you do have to install Rust to install it right now


00:29:43.540 --> 00:29:45.180
'cause I haven't figured out how to do


00:29:45.180 --> 00:29:48.980
distributable binaries that you can just download.


00:29:48.980 --> 00:29:50.820
But yeah, if you have Rust installed,


00:29:50.820 --> 00:29:54.280
which you can get through RustUp or Humber or whatever,


00:29:54.280 --> 00:29:55.760
it's just a cargo install away.


00:29:55.760 --> 00:29:58.200
So if you want to get a shot, please do so.


00:29:58.200 --> 00:29:59.040
- Fantastic.


00:29:59.040 --> 00:30:02.560
- I kind of forgot that my Mac was Unix-C.


00:30:02.560 --> 00:30:04.640
(laughing)


00:30:04.640 --> 00:30:06.000
- That's right, and then Magnus agrees


00:30:06.000 --> 00:30:07.920
on the VMV over Shebang.


00:30:07.920 --> 00:30:08.760
- Awesome.


00:30:08.760 --> 00:30:10.520
- Gandalf Force is same as well.


00:30:10.520 --> 00:30:12.000
I don't think I've ever seen a Shebang


00:30:12.000 --> 00:30:14.960
that was more specific than user bin Python 3 anyway.


00:30:14.960 --> 00:30:17.000
- Yeah, and I actually suspect the Shebang support


00:30:17.000 --> 00:30:19.880
was partially because the Python launch has been around


00:30:19.880 --> 00:30:21.360
back in Python 2 days, right?


00:30:21.360 --> 00:30:22.640
Where that was much more of a concern.


00:30:22.640 --> 00:30:25.640
So like, as I said, I started this in 2018.


00:30:25.640 --> 00:30:29.240
So it was pre-Python 2 deprecation.


00:30:29.240 --> 00:30:30.920
So it's still supported there.


00:30:30.920 --> 00:30:32.960
But a lot of this, I think, was also partially


00:30:32.960 --> 00:30:34.560
to support the 2 to 3 transition.


00:30:34.560 --> 00:30:36.520
So those little extras here I don't


00:30:36.520 --> 00:30:39.760
think are quite as important, unless Python 4


00:30:39.760 --> 00:30:41.880
happens someday, which there are zero plans for.


00:30:41.880 --> 00:30:42.680
So I don't think so.


00:30:42.680 --> 00:30:45.000
Yeah, don't hold your breath.


00:30:45.000 --> 00:30:48.280
By the way, one extra nicety I want to tell people


00:30:48.280 --> 00:30:53.200
is if you're a Starship user, the Starship cross shell


00:30:53.200 --> 00:30:57.040
prompt, there is a setting in Starship


00:30:57.040 --> 00:30:58.840
that lets you specify how it figures out


00:30:58.840 --> 00:31:00.200
what version of Python you have.


00:31:00.200 --> 00:31:01.840
Now, it does look for virtualenv,


00:31:01.840 --> 00:31:03.800
but otherwise it has a list of binaries


00:31:03.800 --> 00:31:05.680
that it will execute to try to figure out what


00:31:05.680 --> 00:31:07.960
version of Python you have.


00:31:07.960 --> 00:31:11.720
If you set it to Pi using this, it will always


00:31:11.720 --> 00:31:14.280
tell you either what the virtual environments Python


00:31:14.280 --> 00:31:16.720
version is in the prompt or whatever the newest


00:31:16.720 --> 00:31:18.640
version of Python is installed.


00:31:18.640 --> 00:31:20.120
So it has a really nice side effect,


00:31:20.120 --> 00:31:22.480
because if you read the docs in Starship,


00:31:22.480 --> 00:31:25.800
there's a big tip saying, hey, if you have a Python installed


00:31:25.800 --> 00:31:29.120
that's default, i.e. macOS, and it'll always say 2.7


00:31:29.120 --> 00:31:31.040
unless you happen to have an activated virtual environment,


00:31:31.040 --> 00:31:32.460
which always threw me, 'cause it's like,


00:31:32.460 --> 00:31:34.520
yeah, I'm not using 2.7 in this project.


00:31:34.520 --> 00:31:37.520
As soon as I added this support for .venv files


00:31:37.520 --> 00:31:39.480
and tweaked my Starship config for this,


00:31:39.480 --> 00:31:41.160
it always tells me the exact version


00:31:41.160 --> 00:31:44.460
that I happen to have set up for my virtual environment.


00:31:44.460 --> 00:31:47.400
It's really handy.


00:31:47.400 --> 00:31:50.160
- For those of us not in the know, what's Starship?


00:31:50.160 --> 00:31:55.160
So Starship is a cross-platform shell prompt tool.


00:31:55.160 --> 00:31:56.740
So it's written in Rust,


00:31:56.740 --> 00:31:59.080
but basically what you do is it has instructions


00:31:59.080 --> 00:32:01.900
for Bash and Zeesh and Phish and PowerShell


00:32:01.900 --> 00:32:02.820
and everything else.


00:32:02.820 --> 00:32:04.720
And basically it just gives you a line.


00:32:04.720 --> 00:32:08.000
Brian's got it pulled up on the screen


00:32:08.000 --> 00:32:09.960
for those on the live stream.


00:32:09.960 --> 00:32:11.900
And it's basically just an easy way to just say like,


00:32:11.900 --> 00:32:13.800
hey, this is how I want my prompt to look.


00:32:13.800 --> 00:32:16.920
Don't worry about whether it being Bash or Zeesh or Phish,


00:32:16.920 --> 00:32:18.480
whatever, like I'm a Phish user.


00:32:18.480 --> 00:32:21.840
I'm sure Michael's property is this user being a macOS user


00:32:21.840 --> 00:32:22.360
like he is.


00:32:22.360 --> 00:32:24.360
Yep.


00:32:24.360 --> 00:32:25.480
But it shouldn't matter.


00:32:25.480 --> 00:32:26.880
My prompts is a prompt.


00:32:26.880 --> 00:32:30.040
And pretty much, they have pretty consistent user support.


00:32:30.040 --> 00:32:33.160
So I just said, yeah, you know what?


00:32:33.160 --> 00:32:35.560
I like some of the niceties it has automatically baked in.


00:32:35.560 --> 00:32:38.680
It does like notification-- it changed the prompt


00:32:38.680 --> 00:32:41.640
for the usual, oh, I edited my Git checkout.


00:32:41.640 --> 00:32:43.180
It'll tell you what branch you're on,


00:32:43.180 --> 00:32:45.760
all these little nice things.


00:32:45.760 --> 00:32:47.980
And setting Firo code as my font gives me


00:32:47.980 --> 00:32:49.540
all the nice little glyphs that I want.


00:32:49.540 --> 00:32:51.660
And so I said, nice, all right, cool.


00:32:51.660 --> 00:32:54.580
It'll tell me what version of Python is currently activated.


00:32:54.580 --> 00:32:57.460
Except for that annoyance of being on Mac,


00:32:57.460 --> 00:33:00.020
it kept saying, oh, you've got 2.7 until I activated.


00:33:00.020 --> 00:33:02.020
And I was like, no, I don't like this.


00:33:02.020 --> 00:33:04.820
So I prioritized getting the .vnv done.


00:33:04.820 --> 00:33:07.420
And then lo and behold, it magically now tells me


00:33:07.420 --> 00:33:09.180
exactly what I want for Python.


00:33:09.180 --> 00:33:10.020
- Nice.


00:33:10.020 --> 00:33:10.860
- Wow, that's super cool.


00:33:10.860 --> 00:33:12.940
Yeah, now we know, Starship, fantastic.


00:33:17.420 --> 00:33:21.420
- Yeah, so before we move on, I'd like to thank our sponsor.


00:33:21.420 --> 00:33:24.020
So this episode of Python Bytes is brought to you


00:33:24.020 --> 00:33:25.380
by Datadog.


00:33:25.380 --> 00:33:27.380
Are you having trouble visualizing latency,


00:33:27.380 --> 00:33:30.220
CPU and memory bottlenecks in your apps


00:33:30.220 --> 00:33:32.700
and not sure where the issue is coming from


00:33:32.700 --> 00:33:34.140
or how to solve it?


00:33:34.140 --> 00:33:37.820
Datadog seamlessly correlates logs and traces


00:33:37.820 --> 00:33:40.140
at the level of individual requests,


00:33:40.140 --> 00:33:41.720
allowing you to quickly troubleshoot


00:33:41.720 --> 00:33:43.260
your Python application.


00:33:43.260 --> 00:33:46.540
Plus their continuous profiler allows you to find


00:33:46.540 --> 00:33:53.060
most resource consuming parts in your production code all the time at any scale with minimal


00:33:53.060 --> 00:33:54.060
overhead.


00:33:54.060 --> 00:33:58.160
Be the hero that got your app back on track at your company.


00:33:58.160 --> 00:34:05.860
Get started today with a free trial at pythonbytes.fm/datadog or just click the link in your podcast player


00:34:05.860 --> 00:34:06.860
show notes.


00:34:06.860 --> 00:34:07.860
Ooh, that's neat.


00:34:07.860 --> 00:34:08.860
Yeah, very cool.


00:34:08.860 --> 00:34:11.520
Thanks, Datadog.


00:34:11.520 --> 00:34:15.240
So Brett, I want to take you down a little bit lower.


00:34:15.240 --> 00:34:17.960
fits turtles all the way down, a few turtles down,


00:34:17.960 --> 00:34:20.600
to this whole TUI world, and talk about this thing


00:34:20.600 --> 00:34:23.820
called Build a Text Editor with Python and Curses.


00:34:23.820 --> 00:34:28.080
Is curses, is that what you do when you get upset


00:34:28.080 --> 00:34:29.780
because it's too low level, or?


00:34:29.780 --> 00:34:31.360
Oh no, it's about the curses, sorry.


00:34:31.360 --> 00:34:32.200
Okay.


00:34:32.200 --> 00:34:34.040
- Gotta remember, I'm on the Python Bytes podcast.


00:34:34.040 --> 00:34:35.720
There are gonna be jokes like that.


00:34:35.720 --> 00:34:37.720
- They're gonna be bad too, by the way.


00:34:37.720 --> 00:34:42.040
So, now here's a really cool article by Wasim Lorgat


00:34:42.040 --> 00:34:46.960
about basically walking you through building a text editor


00:34:46.960 --> 00:34:49.860
like Vim or Emacs in the terminal using Curses,


00:34:49.860 --> 00:34:52.240
which is a library that lets you control


00:34:52.240 --> 00:34:54.520
what happens on the screen much better than like Print


00:34:54.520 --> 00:34:56.440
and Log and Warn and whatnot.


00:34:56.440 --> 00:35:00.320
So there's a couple of just interesting things.


00:35:00.320 --> 00:35:01.880
I thought going through this might just give people


00:35:01.880 --> 00:35:03.920
a sense of like what it's like to work with Curses


00:35:03.920 --> 00:35:06.320
and then there's this context of this text editor


00:35:06.320 --> 00:35:08.040
you can play with.


00:35:08.040 --> 00:35:11.140
So for example, a minimal Curses app,


00:35:11.140 --> 00:35:13.400
All you gotta do is define a function.


00:35:13.400 --> 00:35:14.460
That's your main function.


00:35:14.460 --> 00:35:18.580
And then while true, go to the screen and get the key.


00:35:18.580 --> 00:35:19.420
And that's it.


00:35:19.420 --> 00:35:20.240
You just say get key


00:35:20.240 --> 00:35:22.760
and it just gives you whatever it gets pressed.


00:35:22.760 --> 00:35:24.340
Without any help here,


00:35:24.340 --> 00:35:26.620
there's probably not a way to get out of it.


00:35:26.620 --> 00:35:29.180
No, maybe control C, but yeah,


00:35:29.180 --> 00:35:30.460
there's not like a quit or anything.


00:35:30.460 --> 00:35:33.900
So you can really easily add like some tasks and say,


00:35:33.900 --> 00:35:35.460
well, if they gave me the key,


00:35:35.460 --> 00:35:38.180
escape then show the little colon,


00:35:38.180 --> 00:35:41.020
you can WQ exclamation mark, whatever,


00:35:41.020 --> 00:35:41.860
to get out of it.


00:35:41.860 --> 00:35:45.220
However you wanna exit your text editor


00:35:45.220 --> 00:35:46.220
that you're building.


00:35:46.220 --> 00:35:49.700
And then they talk about how to show stuff on the screen.


00:35:49.700 --> 00:35:51.680
So if you wanna just add a line,


00:35:51.680 --> 00:35:55.100
you can say at this XY screen,


00:35:55.100 --> 00:35:59.140
cursor location, just write this line of text on the screen


00:35:59.140 --> 00:36:02.020
and it'll add that.


00:36:02.020 --> 00:36:04.660
So really easy and one of the things they do


00:36:04.660 --> 00:36:06.800
is they pass over the file name


00:36:06.800 --> 00:36:07.900
and it's kind of meta,


00:36:07.900 --> 00:36:10.180
like they edit the file that is the demo


00:36:10.180 --> 00:36:12.460
for the editor with the editor as they're building it,


00:36:12.460 --> 00:36:13.760
which is always fun to do.


00:36:13.760 --> 00:36:16.880
So you can do that.


00:36:16.880 --> 00:36:20.180
But then through this article,


00:36:20.180 --> 00:36:22.300
they go through and they build out like a window class


00:36:22.300 --> 00:36:24.140
that talks about how big is the screen.


00:36:24.140 --> 00:36:25.460
This is what Brett was talking about.


00:36:25.460 --> 00:36:27.700
Like, ah, I gotta figure out what my screen looks like


00:36:27.700 --> 00:36:28.540
and all that stuff.


00:36:28.540 --> 00:36:31.200
And also a cursor where you are on the screen,


00:36:31.200 --> 00:36:35.260
how to have like a view into the file,


00:36:35.260 --> 00:36:37.740
because you might've like moved to the right a little bit


00:36:37.740 --> 00:36:39.260
and the file might be a thousand lines,


00:36:39.260 --> 00:36:42.900
but you've only got 40 on your screen or whatever.


00:36:42.900 --> 00:36:44.700
So anyway, if this is interesting to you,


00:36:44.700 --> 00:36:46.900
I think you should go through this article and check it out.


00:36:46.900 --> 00:36:49.460
In the end, you end up with a pretty simple


00:36:49.460 --> 00:36:52.640
but non-trivial little text editor that lets you do stuff.


00:36:52.640 --> 00:36:55.340
So I think it's pretty neat.


00:36:55.340 --> 00:36:56.500
What do you guys think?


00:36:56.500 --> 00:37:00.740
- This shows me why I really hope Will grants Brian's wish


00:37:00.740 --> 00:37:03.700
of making Rich a full TUI library.


00:37:03.700 --> 00:37:04.900
- Yeah, I do agree.


00:37:04.900 --> 00:37:07.060
I think if Rich, if something like that


00:37:07.060 --> 00:37:09.500
that has a really beautiful display technology,


00:37:09.500 --> 00:37:11.100
but also has input.


00:37:11.100 --> 00:37:14.060
Like this is cool 'cause it has really great way


00:37:14.060 --> 00:37:16.460
to accept user input and like update the screen,


00:37:16.460 --> 00:37:17.820
but it's very low level.


00:37:17.820 --> 00:37:21.460
It's like, I don't know, it's OpenGL versus Pi game


00:37:21.460 --> 00:37:24.620
or arcade, or you're like at the level of,


00:37:24.620 --> 00:37:27.620
here's what I put at this cursor, this XY coordinate,


00:37:27.620 --> 00:37:28.660
let's put that there.


00:37:28.660 --> 00:37:30.860
- Yeah, I think it's a great showing of actually


00:37:30.860 --> 00:37:34.220
how much work it actually needs to go into making those


00:37:34.220 --> 00:37:37.620
full text-based UIs that you see like you used to see


00:37:37.620 --> 00:37:39.100
at the grocery store on those screen,


00:37:39.100 --> 00:37:39.940
you probably still do it


00:37:39.940 --> 00:37:41.460
some of your grocery stores on that screen.


00:37:41.460 --> 00:37:43.820
And just like, or when they book your airline ticket


00:37:43.820 --> 00:37:45.700
and you're like, oh my God, what the hell are you using?


00:37:45.700 --> 00:37:47.540
- You do this all day.


00:37:47.540 --> 00:37:48.380
- Yeah, exactly.


00:37:48.380 --> 00:37:50.380
It takes a lot of work to make those things happen.


00:37:50.380 --> 00:37:52.500
It's surprising how much work it is


00:37:52.500 --> 00:37:56.240
and hence why getting higher level libraries,


00:37:56.240 --> 00:37:58.820
like I think it was the Prompt Toolkit


00:37:58.820 --> 00:38:00.660
we were told about earlier and rich and all that


00:38:00.660 --> 00:38:03.780
would be very welcome in existing.


00:38:03.780 --> 00:38:05.360
- Yeah, absolutely.


00:38:05.360 --> 00:38:06.820
Do either of you guys know if there's any


00:38:06.820 --> 00:38:08.880
cursors libraries for Windows?


00:38:08.880 --> 00:38:10.220
Magnus is asking.


00:38:10.220 --> 00:38:12.580
That's why he's used Prompt Toolkit before.


00:38:12.580 --> 00:38:14.240
But I'm not sure, actually.


00:38:14.240 --> 00:38:15.360
- Neither am I.


00:38:15.360 --> 00:38:16.760
- Yeah, yeah.


00:38:16.760 --> 00:38:18.920
Cool, cool.


00:38:18.920 --> 00:38:21.040
All right, what's the next one?


00:38:21.040 --> 00:38:23.000
Brian, you got the next one, right?


00:38:23.000 --> 00:38:26.120
- Actually, I skipped, so Brett's next.


00:38:26.120 --> 00:38:27.760
- All right, Brett's next, and I'll pull up Brett's thing.


00:38:27.760 --> 00:38:28.760
All right, Brett.


00:38:28.760 --> 00:38:29.600
- Okay.


00:38:29.600 --> 00:38:33.160
- So there's been a major language feature


00:38:33.160 --> 00:38:36.140
announced that it's coming in 3.10, right?


00:38:36.140 --> 00:38:39.580
- Yes, which actually was in your quick links


00:38:39.580 --> 00:38:41.540
at the end of episode 220,


00:38:41.540 --> 00:38:46.980
which Brian called the five barrel foot gun,


00:38:46.980 --> 00:38:48.320
which is pattern matching.


00:38:48.320 --> 00:38:52.480
So one of the things that always happens


00:38:52.480 --> 00:38:55.620
whenever there's a new Python feature that gets announced,


00:38:55.620 --> 00:38:57.060
and especially one of this size


00:38:57.060 --> 00:38:59.020
that gets out into the general community,


00:38:59.020 --> 00:39:03.880
is some interesting feelings from people.


00:39:03.880 --> 00:39:08.880
And so this is kind of slash, I don't wanna say rant,


00:39:08.880 --> 00:39:12.660
but little, just me as a steering council member,


00:39:12.660 --> 00:39:15.420
just trying to explain how this all came about,


00:39:15.420 --> 00:39:18.900
where we're coming from as a steering council in general.


00:39:18.900 --> 00:39:20.780
I mean, obviously I'm speaking for me directly,


00:39:20.780 --> 00:39:23.420
but in general, I think how the steering council


00:39:23.420 --> 00:39:25.740
kind of thought, but also just kind of helping


00:39:25.740 --> 00:39:27.540
put all this in perspective, 'cause I think


00:39:27.540 --> 00:39:30.060
For a lot of people, this might be the first big feature


00:39:30.060 --> 00:39:32.040
that they've seen because we used to do this


00:39:32.040 --> 00:39:34.140
all the time in Python 2.


00:39:34.140 --> 00:39:36.980
But things kind of slowed down for Python 3.


00:39:36.980 --> 00:39:40.020
So as I said, I've seen around the internet


00:39:40.020 --> 00:39:42.340
a lot of people ranging from, oh, this looks really cool.


00:39:42.340 --> 00:39:44.820
I can't wait till I can use it, to people screaming


00:39:44.820 --> 00:39:47.060
bloody murder that we're killing Python, and oh my god,


00:39:47.060 --> 00:39:50.340
it's the death knell of the language.


00:39:50.340 --> 00:39:51.780
I've been doing this for 17 years.


00:39:51.780 --> 00:39:54.220
Is that stressful for you?


00:39:54.220 --> 00:39:55.540
It used to be?


00:39:55.540 --> 00:39:56.620
It used to be stressful.


00:39:56.620 --> 00:39:59.100
now it's just frustrating.


00:39:59.100 --> 00:40:02.620
So for instance, I gave a talk at PyCon US 2018.


00:40:02.620 --> 00:40:05.540
It was one of the keynotes about participating in open source.


00:40:05.540 --> 00:40:07.180
And one of the key things I said in it


00:40:07.180 --> 00:40:10.300
was people just need to try to be kind to each other.


00:40:10.300 --> 00:40:13.060
It's kind of a very generic thing, I know.


00:40:13.060 --> 00:40:15.140
But it really makes a difference.


00:40:15.140 --> 00:40:19.900
As a project maintainer myself, having people tell me


00:40:19.900 --> 00:40:21.640
what they think I need to be doing


00:40:21.640 --> 00:40:26.100
or what I should be doing is really frustrating.


00:40:26.100 --> 00:40:27.560
I put my personal time and effort


00:40:27.560 --> 00:40:29.080
into helping make this happen.


00:40:29.080 --> 00:40:33.180
And the way you respond to that


00:40:33.180 --> 00:40:35.080
is tell me what I should be doing.


00:40:35.080 --> 00:40:40.500
I can only imagine people who are parents


00:40:40.500 --> 00:40:41.620
having other people tell them


00:40:41.620 --> 00:40:43.720
how they should be raising their children.


00:40:43.720 --> 00:40:45.140
- It's worse than helicopter parents.


00:40:45.140 --> 00:40:47.460
It's like helicopter backseat parenting.


00:40:47.460 --> 00:40:48.300
- Exactly.


00:40:48.300 --> 00:40:51.700
And it's kind of the equivalent for open source maintainers.


00:40:51.700 --> 00:40:53.920
People doing the backseat,


00:40:53.920 --> 00:40:56.260
oh, here's what you really should be doing


00:40:56.260 --> 00:40:57.700
with your free time,


00:40:57.700 --> 00:41:00.300
with what little time you have left on this planet, right?


00:41:00.300 --> 00:41:01.140
- Yeah, yeah.


00:41:01.140 --> 00:41:06.140
- So, it used to get really upsetting,


00:41:06.140 --> 00:41:09.720
and now I'm just frustrated and just disappointed


00:41:09.720 --> 00:41:10.700
that this still happens.


00:41:10.700 --> 00:41:12.120
It's also a little weird too,


00:41:12.120 --> 00:41:14.860
'cause in Python, right?


00:41:14.860 --> 00:41:16.220
I mean, we have tens of millions of people


00:41:16.220 --> 00:41:17.660
using language at this point, right?


00:41:17.660 --> 00:41:20.820
It's immeasurable, it's just cute.


00:41:20.820 --> 00:41:23.680
Which means, even if you assume


00:41:23.680 --> 00:41:26.640
one out of a thousand people are jerks, right?


00:41:26.640 --> 00:41:27.480
Point one percent.


00:41:27.480 --> 00:41:29.500
Let's do point zero one percent, right?


00:41:29.500 --> 00:41:31.380
Like we're still talking tens of thousands


00:41:31.380 --> 00:41:33.800
of people out there who basically know my face,


00:41:33.800 --> 00:41:37.320
name, and address, and feel totally fine


00:41:37.320 --> 00:41:38.560
sending me mail on occasion,


00:41:38.560 --> 00:41:41.080
or just posting out in the comments outside


00:41:41.080 --> 00:41:43.200
where we all congregate about what they think


00:41:43.200 --> 00:41:45.720
I should be doing with my life.


00:41:45.720 --> 00:41:47.880
So it's one of these things where...


00:41:49.360 --> 00:41:51.640
- Yeah, it's just frustrating.


00:41:51.640 --> 00:41:54.000
- I don't know how a lot of people feel about it, sorry.


00:41:54.000 --> 00:41:58.560
But I think when you hear those negative things said to you,


00:41:58.560 --> 00:42:00.560
even if a thousand people are appreciative,


00:42:00.560 --> 00:42:04.320
the one negative thing you get feels so much,


00:42:04.320 --> 00:42:06.400
it makes such a bigger, a disproportionate impact.


00:42:06.400 --> 00:42:07.240
- 10 to one.


00:42:07.240 --> 00:42:08.600
- Yeah, at least, at least.


00:42:08.600 --> 00:42:11.320
- At least, and the problem is it's not relative numbers,


00:42:11.320 --> 00:42:12.760
it's absolute numbers.


00:42:12.760 --> 00:42:14.360
And at the scale that we're at with Python,


00:42:14.360 --> 00:42:17.760
the absolute number of people who just haven't quite,


00:42:17.760 --> 00:42:21.400
Either just, I mean, honestly, some people are just totally ignorant that they are speaking


00:42:21.400 --> 00:42:24.840
this way and that they don't really realize the way they're phrasing things matters or


00:42:24.840 --> 00:42:27.440
even that the way they're phrasing it comes off that way.


00:42:27.440 --> 00:42:30.320
Like not everyone who says should really means for it to come off that way.


00:42:30.320 --> 00:42:31.320
Thank you, Dean.


00:42:31.320 --> 00:42:36.320
I appreciate the awesomeness call out.


00:42:36.320 --> 00:42:41.640
But it's one of these things where I have to bring this up every couple of years and


00:42:41.640 --> 00:42:45.080
then I usually end up doing a blog post, which honestly, this is kind of a rough draft of


00:42:45.080 --> 00:42:46.080
the blog post.


00:42:46.080 --> 00:42:47.320
talking out loud with all of you.


00:42:47.320 --> 00:42:48.600
- Yeah.


00:42:48.600 --> 00:42:51.960
- And bouncing ideas off all of you for the feedback.


00:42:51.960 --> 00:42:54.780
But it's just, it gets a little exhausting


00:42:54.780 --> 00:42:56.080
that this is something I have to bring up


00:42:56.080 --> 00:42:57.120
every couple of years.


00:42:57.120 --> 00:42:59.560
You'd hope that we'd all learn this by now.


00:42:59.560 --> 00:43:01.600
It's not like open source is a newfangled thing


00:43:01.600 --> 00:43:03.000
we've all just discovered.


00:43:03.000 --> 00:43:04.560
But there's still this disconnect


00:43:04.560 --> 00:43:09.080
between the consumer/user/takers of open source


00:43:09.080 --> 00:43:13.520
versus the maintainer/producer/givers of the community.


00:43:13.520 --> 00:43:16.460
and the disconnect of how to kind of just communicate


00:43:16.460 --> 00:43:18.380
with each other is still there.


00:43:18.380 --> 00:43:19.220
- Yeah.


00:43:19.220 --> 00:43:20.580
- And so specifically when it comes to this stuff


00:43:20.580 --> 00:43:22.580
with Python, right, is people go like,


00:43:22.580 --> 00:43:24.860
oh my God, this is crazy.


00:43:24.860 --> 00:43:28.240
And it's like, no, it's not.


00:43:28.240 --> 00:43:30.100
I've been doing this for 17 years.


00:43:30.100 --> 00:43:32.500
Everything is controversial when it comes to syntax.


00:43:32.500 --> 00:43:34.940
True and false were controversial, right?


00:43:34.940 --> 00:43:36.540
Like true and false.


00:43:36.540 --> 00:43:38.180
There were arguments on Python Dev


00:43:38.180 --> 00:43:39.620
and whether or not we should add those keywords


00:43:39.620 --> 00:43:41.140
because they would break code


00:43:41.140 --> 00:43:44.820
that chose to define those constants as one and zero.


00:43:44.820 --> 00:43:47.980
- Is that's why it's capital T?


00:43:47.980 --> 00:43:49.620
- Well, it's also 'cause they're singletons, right?


00:43:49.620 --> 00:43:51.580
And that's just kind of the practice we follow with none.


00:43:51.580 --> 00:43:53.500
So that was really kind of where it tied in.


00:43:53.500 --> 00:43:56.180
I mean, it definitely helped that capital T


00:43:56.180 --> 00:43:57.740
lowered the chances of it being false.


00:43:57.740 --> 00:43:58.860
- It's less likely, yeah, exactly.


00:43:58.860 --> 00:43:59.700
It's less likely, yeah.


00:43:59.700 --> 00:44:01.300
- But that was an actual discussion we had,


00:44:01.300 --> 00:44:04.400
was do we wanna add Booleans to the language?


00:44:04.400 --> 00:44:07.260
Now today, everyone scoffs at that and laughs.


00:44:07.260 --> 00:44:08.700
Like, what, are you kidding me?


00:44:08.700 --> 00:44:09.780
Booleans, really?


00:44:10.660 --> 00:44:14.060
everything in the language gets debated, right?


00:44:14.060 --> 00:44:15.060
And in this too, right?


00:44:15.060 --> 00:44:16.780
Like everyone's going like, oh my God, what are you doing?


00:44:16.780 --> 00:44:20.220
Like, do you understand the timeline of this?


00:44:20.220 --> 00:44:25.220
Guido brought this up, I think in July, maybe,


00:44:25.220 --> 00:44:29.580
and had as one pep, got a massive amount of feedback


00:44:29.580 --> 00:44:32.820
on Python dev on this, went back with his co-authors,


00:44:32.820 --> 00:44:36.820
broke it up into three peps, 634, 635, and 636,


00:44:36.820 --> 00:44:38.540
so that there was a PEP about the design,


00:44:38.540 --> 00:44:40.260
a PEP about the rationale behind the design,


00:44:40.260 --> 00:44:42.580
and the PEPVAX as a tutorial


00:44:42.580 --> 00:44:45.540
to try to make it more easy to consume.


00:44:45.540 --> 00:44:47.300
Brought that out in October.


00:44:47.300 --> 00:44:50.340
We discuss it on Steering Council 2020.


00:44:50.340 --> 00:44:51.440
We made a recommendation


00:44:51.440 --> 00:44:52.880
that probably the next one should accept it,


00:44:52.880 --> 00:44:54.420
but we still didn't feel we had enough time


00:44:54.420 --> 00:44:56.540
to accept such a large thing.


00:44:56.540 --> 00:44:58.060
Fast forward now to today,


00:44:58.060 --> 00:45:00.340
where Steering Council 2021 had a chance to sit down


00:45:00.340 --> 00:45:01.740
and look at the recommendation and the PEPs


00:45:01.740 --> 00:45:03.020
and have a discussion,


00:45:03.020 --> 00:45:06.740
including calling Guido in personally at least two times


00:45:06.740 --> 00:45:08.220
to talk directly to the Steering Council


00:45:08.220 --> 00:45:10.540
help us understand where he was coming from.


00:45:10.540 --> 00:45:12.020
Like this was not a snap decision,


00:45:12.020 --> 00:45:13.580
but everyone acts like it was.


00:45:13.580 --> 00:45:14.420
Like this is literally taking over.


00:45:14.420 --> 00:45:16.300
- Because it finally appears on their radar


00:45:16.300 --> 00:45:17.740
and they're like, "Oh, where'd this come from?"


00:45:17.740 --> 00:45:19.700
- Exactly, "Oh, it's on Hacker News today.


00:45:19.700 --> 00:45:20.540
Suddenly it happened."


00:45:20.540 --> 00:45:21.740
Like, no, no, no, this has been happening.


00:45:21.740 --> 00:45:23.780
This has been in discussion actively


00:45:23.780 --> 00:45:26.060
in public for six months.


00:45:26.060 --> 00:45:28.180
I first heard Guido talking with someone


00:45:28.180 --> 00:45:30.100
at a language summit in 2018


00:45:30.100 --> 00:45:31.660
about the idea of pattern matching.


00:45:31.660 --> 00:45:33.260
Like this has been on people's radar


00:45:33.260 --> 00:45:35.820
as something people have wanted for that long.


00:45:35.820 --> 00:45:37.260
And I'll fully admit, I wanted it.


00:45:37.260 --> 00:45:40.820
Pattern matching is something I've wanted for a long time.


00:45:40.820 --> 00:45:44.580
But it's just one of these things, once again, people just don't stop and think about the


00:45:44.580 --> 00:45:47.020
time and effort that goes into all this behind the scenes.


00:45:47.020 --> 00:45:52.640
It's just, in my world view, this just happened versus, oh, there's probably stuff that happened


00:45:52.640 --> 00:45:55.900
that I'm just not aware of.


00:45:55.900 --> 00:46:00.340
And specifically about this, one thing I always notice about this is people need to understand


00:46:00.340 --> 00:46:01.980
the way the language is designed, right?


00:46:01.980 --> 00:46:05.020
We aim to increase your productivity.


00:46:05.020 --> 00:46:06.900
Now that means different things to different people,


00:46:06.900 --> 00:46:08.300
but in general, it means keeping a language


00:46:08.300 --> 00:46:09.540
that's easy to understand


00:46:09.540 --> 00:46:12.220
and small enough to have in your head,


00:46:12.220 --> 00:46:14.820
but also leads to you being more productive,


00:46:14.820 --> 00:46:16.140
which also means readability, right?


00:46:16.140 --> 00:46:18.580
There's a lot of side effects that we all appreciate


00:46:18.580 --> 00:46:21.300
that come with productivity,


00:46:21.300 --> 00:46:23.340
but that's really the ultimate goal to me.


00:46:23.340 --> 00:46:25.340
It's not that the language is readable.


00:46:25.340 --> 00:46:27.440
Readable makes you productive.


00:46:27.440 --> 00:46:29.620
And for pattern matching, there are certain algorithms


00:46:29.620 --> 00:46:31.620
that are just really difficult to do


00:46:31.620 --> 00:46:33.140
without pattern matching, right?


00:46:33.140 --> 00:46:35.960
Like the classic examples are parsers and compilers.


00:46:35.960 --> 00:46:40.300
And they're not easy to do without having pattern matching.


00:46:40.300 --> 00:46:42.000
There's a reason why functional parting language


00:46:42.000 --> 00:46:44.520
that have had pattern matching for a very long time


00:46:44.520 --> 00:46:46.560
are the best places to right now


00:46:46.560 --> 00:46:48.960
to typically write a parser or compiler


00:46:48.960 --> 00:46:52.560
because the algorithm just works so much better that way.


00:46:52.560 --> 00:46:54.680
So there were reasons why we brought this in.


00:46:54.680 --> 00:46:57.240
There will be increases in productivity for some people.


00:46:57.240 --> 00:46:59.580
We do realize that it is a big lift,


00:46:59.580 --> 00:47:02.520
but we also realize not everyone's gonna see this day one.


00:47:02.520 --> 00:47:05.380
This is not, it is way more than a switch statement,


00:47:05.380 --> 00:47:08.280
which I know a lot of people typically look at it as, right?


00:47:08.280 --> 00:47:10.700
The key point is it matches on structure.


00:47:10.700 --> 00:47:13.680
It's not matching necessarily just on value, right?


00:47:13.680 --> 00:47:14.560
This is the big difference


00:47:14.560 --> 00:47:17.360
between an if statement versus not.


00:47:17.360 --> 00:47:19.440
And so there was a lot of work behind this.


00:47:19.440 --> 00:47:23.000
So there are reasons, like this was not major.


00:47:23.000 --> 00:47:25.040
The other thing I keep seeing about this


00:47:25.040 --> 00:47:27.320
is people going, oh, this is not Pythonic.


00:47:27.320 --> 00:47:29.120
- Well, I hate to break it to people.


00:47:29.120 --> 00:47:30.240
- Well, it is now.


00:47:30.240 --> 00:47:31.640
- Yeah, I hate to break it to people,


00:47:31.640 --> 00:47:34.080
But Guido van Rossum, the creator of Python,


00:47:34.080 --> 00:47:36.800
and thus probably the harbinger of what is Pythonic,


00:47:36.800 --> 00:47:39.680
is a co-author and a big pusher of this pep, right?


00:47:39.680 --> 00:47:41.240
Like Guido helped make this happen.


00:47:41.240 --> 00:47:44.120
So unless you wanna go up to him at PyCon


00:47:44.120 --> 00:47:45.460
and tell Guido that he doesn't know


00:47:45.460 --> 00:47:47.080
what's Pythonic or what's not,


00:47:47.080 --> 00:47:48.460
I think we kind of just have to go with it,


00:47:48.460 --> 00:47:50.640
that this is now what is considered Pythonic.


00:47:50.640 --> 00:47:53.040
And I will say, I have seen people say,


00:47:53.040 --> 00:47:56.180
oh my God, this is what happens when we lose the BDFL.


00:47:56.180 --> 00:47:59.720
Like the person who was the BDFL made this happen, right?


00:47:59.720 --> 00:48:00.640
- Yeah, yeah, it's not that.


00:48:00.640 --> 00:48:02.680
- It's a really funny disconnect with people.


00:48:02.680 --> 00:48:05.760
Like Guido drove this.


00:48:05.760 --> 00:48:07.980
Like Guido talked to the steering council about this.


00:48:07.980 --> 00:48:09.600
Like he was the point person for this.


00:48:09.600 --> 00:48:11.620
Like he really helped make this happen.


00:48:11.620 --> 00:48:14.280
So it's as Pythonic as it can be


00:48:14.280 --> 00:48:17.600
if you consider Guido the creator and head person


00:48:17.600 --> 00:48:18.920
in terms of the design of the language,


00:48:18.920 --> 00:48:21.000
which I will fully admit I still do.


00:48:21.000 --> 00:48:23.280
I kind of view Guido no longer as being BDFL,


00:48:23.280 --> 00:48:26.760
as kind of he relinquished bureaucratic overhead costs


00:48:26.760 --> 00:48:28.440
in his life of the language.


00:48:28.440 --> 00:48:30.520
And the steering council was more or less taking that on.


00:48:30.520 --> 00:48:33.120
but I still trust Guido's gut more or less.


00:48:33.120 --> 00:48:35.240
Like if he really went off the rails, we'd stop him,


00:48:35.240 --> 00:48:36.800
but I don't think this is him going off the rails.


00:48:36.800 --> 00:48:38.280
I think this is us going like,


00:48:38.280 --> 00:48:40.660
he's that one step ahead of us.


00:48:40.660 --> 00:48:44.280
- Yeah, and Eschuleon says,


00:48:44.280 --> 00:48:46.240
I just wrote a horrible if LF statement


00:48:46.240 --> 00:48:48.520
and he's looking forward to pattern matching.


00:48:48.520 --> 00:48:51.080
- Yeah, I mean, there are some real places


00:48:51.080 --> 00:48:52.720
where I think there's gonna be benefits


00:48:52.720 --> 00:48:54.360
to ways to structure things


00:48:54.360 --> 00:48:56.600
that will just make things look better.


00:48:56.600 --> 00:48:58.480
- Yeah, and Magnus says,


00:48:58.480 --> 00:49:00.660
- And it agrees with me that Python's full spectrum language


00:49:00.660 --> 00:49:02.980
and it just extends that spectrum.


00:49:02.980 --> 00:49:04.040
- Yeah, right.


00:49:04.040 --> 00:49:05.560
It's, yeah, thanks for that, Magnus.


00:49:05.560 --> 00:49:08.980
It's one of these things I think some people lose track of


00:49:08.980 --> 00:49:11.940
that being beginner friendly does not mean


00:49:11.940 --> 00:49:13.760
only for beginners.


00:49:13.760 --> 00:49:16.120
And that's where this productivity thing comes in.


00:49:16.120 --> 00:49:19.000
- I think that's actually a huge part of Python success,


00:49:19.000 --> 00:49:19.840
right?


00:49:19.840 --> 00:49:22.640
Visual Basic 6 was awesome for beginners, for example.


00:49:22.640 --> 00:49:23.880
But it just, it stopped.


00:49:23.880 --> 00:49:25.560
Like, well, you can't do that here.


00:49:25.560 --> 00:49:27.040
You're at the limit.


00:49:27.040 --> 00:49:27.880
I'm sorry.


00:49:27.880 --> 00:49:30.560
I wanna be at the limit, I wanna learn C++, don't make me.


00:49:30.560 --> 00:49:31.820
- Hey, if you wanna be beginner friendly,


00:49:31.820 --> 00:49:34.000
go code and scratch.


00:49:34.000 --> 00:49:36.200
No one wants to write production code and scratch.


00:49:36.200 --> 00:49:38.500
It's great to get going, but there's a limit.


00:49:38.500 --> 00:49:42.400
- One of the great quotes that I've heard


00:49:42.400 --> 00:49:44.160
that I think applies to Python is that


00:49:44.160 --> 00:49:47.040
you can do easy things simply,


00:49:47.040 --> 00:49:49.840
but you can do difficult things that are possible.


00:49:49.840 --> 00:49:51.920
And I know I got that quote wrong, but.


00:49:51.920 --> 00:49:55.440
- It's definitely close enough that I'll just go with it.


00:49:55.440 --> 00:49:57.760
That is very true, that is the goal here,


00:49:57.760 --> 00:50:02.080
is to make the common things easy and simple


00:50:02.080 --> 00:50:04.200
and definitely approachable


00:50:04.200 --> 00:50:06.440
and make the hard things at least possible.


00:50:06.440 --> 00:50:07.280
And this is part of it.


00:50:07.280 --> 00:50:09.160
This opens up the possibility for things


00:50:09.160 --> 00:50:11.520
that were really difficult to do in Python before.


00:50:11.520 --> 00:50:12.720
- Yeah, fantastic.


00:50:12.720 --> 00:50:14.440
- So yeah, so I'm thinking of doing a blog post


00:50:14.440 --> 00:50:15.480
about this whole rant called


00:50:15.480 --> 00:50:16.920
the social contract of open source


00:50:16.920 --> 00:50:19.480
to try to harp on this whole shoot versus need


00:50:19.480 --> 00:50:22.120
and just, it's okay.


00:50:22.120 --> 00:50:25.800
Criticism is totally acceptable.


00:50:25.800 --> 00:50:28.200
is just be understanding about how you're delivering it


00:50:28.200 --> 00:50:30.940
because we're all on the internet, we do here,


00:50:30.940 --> 00:50:33.100
and indirectly you will suffer


00:50:33.100 --> 00:50:35.380
because guess what, that project you're using


00:50:35.380 --> 00:50:37.200
is gonna then suffer based on what you say,


00:50:37.200 --> 00:50:38.420
so it does matter.


00:50:38.420 --> 00:50:39.260
- Yeah.


00:50:39.260 --> 00:50:43.300
- And just one aside, I think last podcast,


00:50:43.300 --> 00:50:46.060
Michael said this was influenced from Haskell.


00:50:46.060 --> 00:50:48.860
It's actually, the design comes a lot from Scala,


00:50:48.860 --> 00:50:51.060
specifically for this. - Okay.


00:50:51.060 --> 00:50:54.740
- But we got list comprehensions from Scala,


00:50:54.740 --> 00:50:56.940
So we have actually gotten some nice things out of Scala.


00:50:56.940 --> 00:50:57.780
- Interesting.


00:50:57.780 --> 00:50:59.900
Yeah, okay, very interesting, yeah.


00:50:59.900 --> 00:51:03.260
Yeah, I mean, my feeling is it's a big step, I think.


00:51:03.260 --> 00:51:07.420
It's gonna take a while to really see the value of it


00:51:07.420 --> 00:51:09.620
if you're not working directly in a place


00:51:09.620 --> 00:51:12.460
where it's one of these algorithms that applies a lot,


00:51:12.460 --> 00:51:14.900
but I think it'll be good.


00:51:14.900 --> 00:51:16.400
- Yeah, it's definitely one of those things


00:51:16.400 --> 00:51:17.500
that when you see it for the first time,


00:51:17.500 --> 00:51:20.860
if you're not used to using a language,


00:51:20.860 --> 00:51:23.380
like most functional languages that have pattern matching,


00:51:23.380 --> 00:51:24.500
It goes like, what?


00:51:24.500 --> 00:51:25.000
Why?


00:51:25.000 --> 00:51:26.620
And then when you get exposed to it,


00:51:26.620 --> 00:51:28.580
when you start to use it more, it


00:51:28.580 --> 00:51:30.860
starts much like learning another programming language.


00:51:30.860 --> 00:51:32.740
It starts to tweak your approach to certain algorithms


00:51:32.740 --> 00:51:33.240
and stuff.


00:51:33.240 --> 00:51:36.340
And it's just another tool in your toolbox, really.


00:51:36.340 --> 00:51:37.700
>>Nice.


00:51:37.700 --> 00:51:40.500
Well, Brian, you've got the follow-up, huh?


00:51:40.500 --> 00:51:43.220
>>Yeah, so actually, that's why I thought this


00:51:43.220 --> 00:51:45.540
would be good as a follow-up.


00:51:45.540 --> 00:51:50.860
So Guido announced that he wrote the introduction


00:51:50.860 --> 00:51:52.340
to pattern matching.


00:51:52.340 --> 00:51:57.340
and that it's now part of an appendix A of PEP 636.


00:51:57.340 --> 00:52:01.320
So I went off and looked at it


00:52:01.320 --> 00:52:03.360
and it actually really helped me a lot.


00:52:03.360 --> 00:52:06.800
So this introduction kind of,


00:52:06.800 --> 00:52:09.600
I actually, I've been trying to follow this PEP


00:52:09.600 --> 00:52:11.880
and honestly been confused for a while


00:52:11.880 --> 00:52:14.540
as to like exactly how it's working.


00:52:14.540 --> 00:52:17.340
A lot of people have been focusing on the weird parts,


00:52:17.340 --> 00:52:20.040
but the easy parts actually are really nice.


00:52:20.040 --> 00:52:24.800
So I really, there's an example that it starts off with


00:52:24.800 --> 00:52:27.920
that kind of looks like a switch statement, right?


00:52:27.920 --> 00:52:32.560
So it's a, I want to match a status and like an HTTP status.


00:52:32.560 --> 00:52:37.560
And then I do something different based on 400 or 404, 418.


00:52:37.560 --> 00:52:39.480
And then, of course we're like, well,


00:52:39.480 --> 00:52:40.800
what about default, right?


00:52:40.800 --> 00:52:42.520
So there's going to be some sort of fall through


00:52:42.520 --> 00:52:44.400
that I handle all the other cases.


00:52:44.400 --> 00:52:45.760
And there's an example of that.


00:52:45.760 --> 00:52:46.720
And I was actually curious,


00:52:46.720 --> 00:52:51.520
The example here shows using just a single underscore


00:52:51.520 --> 00:52:57.640
variable, magic variable, as a catch-all.


00:52:57.640 --> 00:52:59.600
And so, Brett, I was just curious,


00:52:59.600 --> 00:53:01.280
can I use any variable here, or does it


00:53:01.280 --> 00:53:02.720
need to be the single underscore?


00:53:02.720 --> 00:53:04.200
Do you know?


00:53:04.200 --> 00:53:06.920
So I was actually going to comment on this


00:53:06.920 --> 00:53:08.280
when you were done.


00:53:08.280 --> 00:53:12.240
So the underscore actually has some special semantics here,


00:53:12.240 --> 00:53:15.320
because in most languages that have pattern matching,


00:53:15.320 --> 00:53:18.080
the underscore represents the wildcard.


00:53:18.080 --> 00:53:20.040
This has actually been one of the most controversial parts


00:53:20.040 --> 00:53:22.560
of PEP 634 was the selection of this


00:53:22.560 --> 00:53:24.560
to stay consistent with other languages.


00:53:24.560 --> 00:53:28.480
While I will not suggest to people


00:53:28.480 --> 00:53:31.160
that there is an opportunity to remove pattern matching


00:53:31.160 --> 00:53:33.360
or to necessarily have massive changes to it,


00:53:33.360 --> 00:53:35.840
one of the things that if people try this out


00:53:35.840 --> 00:53:39.200
in real world code and can get feedback to us


00:53:39.200 --> 00:53:42.260
well before beta one locks in and gets released,


00:53:42.260 --> 00:53:46.060
'cause that's our cutoff for feature changes


00:53:46.060 --> 00:53:49.200
for Python 3.10, which will be in May.


00:53:49.200 --> 00:53:52.400
This is one of those areas where we could actually


00:53:52.400 --> 00:53:53.640
consider changing, right?


00:53:53.640 --> 00:53:58.080
Like fixing up code to change this case wildcard syntax


00:53:58.080 --> 00:54:01.840
of an underscore to something else is totally possible


00:54:01.840 --> 00:54:03.580
if we got feedback from the community that,


00:54:03.580 --> 00:54:05.360
yeah, this really was a nasty sticking point


00:54:05.360 --> 00:54:06.960
and really didn't work out well.


00:54:06.960 --> 00:54:11.120
So I do wanna say that there is still a chance


00:54:11.120 --> 00:54:13.320
to potentially influence the final outcome of how


00:54:13.320 --> 00:54:17.120
the exact thing is, although I don't want to suggest that--


00:54:17.120 --> 00:54:19.560
- 'Cause it's not shipped in 3.10 yet, right?


00:54:19.560 --> 00:54:21.760
- Exactly, it's not shipped in 3.10 yet.


00:54:21.760 --> 00:54:25.220
So we can tweak if necessary, but don't come out,


00:54:25.220 --> 00:54:26.680
I wouldn't suggest people come out


00:54:26.680 --> 00:54:28.760
and try to completely rewrite the entire syntax,


00:54:28.760 --> 00:54:33.200
but in this specific case, yes, it is special.


00:54:33.200 --> 00:54:34.880
Yes, some people don't like it.


00:54:34.880 --> 00:54:38.160
And if enough people really came forward


00:54:38.160 --> 00:54:40.840
and really said this is the one thing I'd want to tweak,


00:54:40.840 --> 00:54:42.320
I think we'd be open to considering.


00:54:42.320 --> 00:54:44.520
- Well, the underscore gets used so much


00:54:44.520 --> 00:54:45.780
for so many interesting things.


00:54:45.780 --> 00:54:47.000
Like why not one more?


00:54:47.000 --> 00:54:49.120
Make it, replace the mystique.


00:54:49.120 --> 00:54:50.820
- I personally, I don't care.


00:54:50.820 --> 00:54:52.920
I just want to know what it is.


00:54:52.920 --> 00:54:57.920
I mean, I didn't like spaces instead of braces


00:54:57.920 --> 00:54:59.080
when I first hit it.


00:54:59.080 --> 00:55:03.600
So anyway, but what happens if I put like X there


00:55:03.600 --> 00:55:05.280
instead of a underscore?


00:55:05.280 --> 00:55:08.500
- If you put X, so the rules here basically are


00:55:08.500 --> 00:55:11.160
if you put a single name that has no dot in it,


00:55:11.160 --> 00:55:12.400
it's a binding.


00:55:12.400 --> 00:55:16.460
If you put a name there with a dot, it will be a binding.


00:55:16.460 --> 00:55:18.640
Now, this is one of the things that I learned from Guido


00:55:18.640 --> 00:55:20.360
in one of our meetings that really helped clarify this


00:55:20.360 --> 00:55:22.360
for me and one of the reasons I ended up


00:55:22.360 --> 00:55:25.880
voting to accept this was let's look at the,


00:55:25.880 --> 00:55:27.400
like consider these cases, right?


00:55:27.400 --> 00:55:28.760
Return codes.


00:55:28.760 --> 00:55:31.320
You're probably not gonna hard code 400 and 404 and 418.


00:55:31.320 --> 00:55:34.680
You're gonna import the HTTP.status module


00:55:34.680 --> 00:55:38.040
and you're gonna specify the constants from there, right?


00:55:38.040 --> 00:55:40.040
Do you really wanna rebind those constants


00:55:40.040 --> 00:55:41.780
by accident in your code?


00:55:41.780 --> 00:55:42.760
- Oh, no.


00:55:42.760 --> 00:55:46.560
- No, but because it's been imported from a module


00:55:46.560 --> 00:55:47.800
or off a class, for instance,


00:55:47.800 --> 00:55:49.360
you're not gonna be wanting to do assignment,


00:55:49.360 --> 00:55:50.600
you're just gonna wanna reference it.


00:55:50.600 --> 00:55:51.840
So if there's a dot in the name,


00:55:51.840 --> 00:55:53.960
it automatically is just a reference.


00:55:53.960 --> 00:55:56.080
Now, some people get really hung up on that


00:55:56.080 --> 00:55:59.240
when they think about the single binding of a name,


00:55:59.240 --> 00:56:01.680
understandably, but here's the thing,


00:56:01.680 --> 00:56:04.360
is while this is a case right now


00:56:04.360 --> 00:56:07.440
where if you had just a bare name, that's a bind,


00:56:07.440 --> 00:56:08.720
where if there's a dot in it,


00:56:08.720 --> 00:56:10.800
it's actually gonna be a reference and a load


00:56:10.800 --> 00:56:13.360
to do a value check.


00:56:13.360 --> 00:56:15.800
There is a potential in the future


00:56:15.800 --> 00:56:18.640
if people come back after trying out the pep


00:56:18.640 --> 00:56:20.480
and having experience with pattern matching


00:56:20.480 --> 00:56:25.280
to add to the language, a leading dot,


00:56:25.280 --> 00:56:27.520
which is actually used in Swift, by the way,


00:56:27.520 --> 00:56:29.280
in the Swift community for something else.


00:56:29.280 --> 00:56:33.100
But the key point is we can make it like a dot X


00:56:33.100 --> 00:56:36.520
to act as a load for comparison for a local--


00:56:36.520 --> 00:56:38.240
- That's an interesting syntactical use.


00:56:38.240 --> 00:56:39.860
Like it's not actually coming from anywhere,


00:56:39.860 --> 00:56:41.360
but treat it as if it were.


00:56:41.360 --> 00:56:42.200
- Exactly.


00:56:42.200 --> 00:56:44.280
Now this was originally in the PEP


00:56:44.280 --> 00:56:47.000
and there was massive pushback from people thinking


00:56:47.000 --> 00:56:48.840
that they would totally miss the dot.


00:56:48.840 --> 00:56:55.320
But Corey Benfield who used to run requests and all that


00:56:55.320 --> 00:56:58.720
and has multiple talks from PyCon,


00:56:58.720 --> 00:57:00.480
person who helped me start pushing


00:57:00.480 --> 00:57:03.920
Sans I/O development of libraries in the community.


00:57:03.920 --> 00:57:05.720
He works at Apple now on Swift stuff


00:57:05.720 --> 00:57:07.560
and he posted something on Twitter and I asked him like,


00:57:07.560 --> 00:57:10.740
hey, does that leading dot have any problems with Swift?


00:57:10.740 --> 00:57:12.120
And they said, actually the whole community


00:57:12.120 --> 00:57:13.120
is totally fine with it.


00:57:13.120 --> 00:57:14.300
There's no readability problems.


00:57:14.300 --> 00:57:15.140
It just totally works.


00:57:15.140 --> 00:57:16.440
Not an issue.


00:57:16.440 --> 00:57:18.780
So we could potentially in the next version of Python


00:57:18.780 --> 00:57:21.880
actually make it so that, have it a dot in the name,


00:57:21.880 --> 00:57:24.360
whether it's just leading or not.


00:57:24.360 --> 00:57:25.480
We could actually generalize that.


00:57:25.480 --> 00:57:27.920
But because it's a forward compatible thing


00:57:27.920 --> 00:57:29.140
and backwards compatible,


00:57:29.140 --> 00:57:30.600
we decided not to do that in this path


00:57:30.600 --> 00:57:32.880
and just try to just keep it simple,


00:57:32.880 --> 00:57:37.880
Keep it simpler than it had to be necessary to go out and then add the opportunity.


00:57:37.880 --> 00:57:45.880
So if I just put a bare X, it's going, will it hit it and will it bind to it and assign the value to X?


00:57:45.880 --> 00:57:46.880
Yes.


00:57:46.880 --> 00:57:53.880
Okay. Actually, that's what I expected because as I go down this little tutorial, it talks about like,


00:57:53.880 --> 00:57:58.880
like unpacking, which is totally cool.


00:57:58.880 --> 00:58:03.040
So let's say you have like the example is a point object,


00:58:03.040 --> 00:58:05.040
which is like just an XY tuple.


00:58:05.040 --> 00:58:09.800
Now I wanna be able to, if I, in the case statements


00:58:09.800 --> 00:58:12.880
are specific points that you're gonna match to,


00:58:12.880 --> 00:58:16.360
or like, let's say you don't care what X is,


00:58:16.360 --> 00:58:19.880
but you want to fix Y at zero.


00:58:19.880 --> 00:58:22.400
In the case block,


00:58:22.400 --> 00:58:25.080
You want to know what the value of X was.


00:58:25.080 --> 00:58:26.400
So you do want that binding.


00:58:26.400 --> 00:58:29.360
And that's really just cool.


00:58:29.360 --> 00:58:30.360
I can't wait to play with this.


00:58:30.360 --> 00:58:33.160
So my follow-up question, I'm glad you showed up here,


00:58:33.160 --> 00:58:34.840
is when can I play with this?


00:58:34.840 --> 00:58:37.800
Is this in one of the alphas now or betas?


00:58:37.800 --> 00:58:38.640
Or do you know?


00:58:38.640 --> 00:58:43.640
- I don't know if it's, I don't think it's landed yet.


00:58:43.640 --> 00:58:46.720
Bram Butcher, who's one of the co-authors of the PEP,


00:58:46.720 --> 00:58:49.440
has a working implementation already,


00:58:49.440 --> 00:58:52.020
which is actually available in a Jupyter,


00:58:52.020 --> 00:58:54.860
was available in a Jupyter notebook somewhere.


00:58:54.860 --> 00:58:56.380
So there's definitely a fork somewhere


00:58:56.380 --> 00:58:57.900
where you can try this out.


00:58:57.900 --> 00:59:01.340
But this is not landed in mainline,


00:59:01.340 --> 00:59:03.180
so it's not out in alpha quite yet.


00:59:03.180 --> 00:59:06.540
One thing I did wanna point out about this


00:59:06.540 --> 00:59:08.580
that's really kind of cool,


00:59:08.580 --> 00:59:11.300
with the example that Brian's showing here,


00:59:11.300 --> 00:59:13.220
is the match against a point argument,


00:59:13.220 --> 00:59:16.140
as he said, that takes a two item tuple.


00:59:16.140 --> 00:59:17.560
You could actually change this


00:59:17.560 --> 00:59:19.220
to also accept a single item tuple


00:59:19.220 --> 00:59:21.320
that represented X and Y with the same value.


00:59:21.320 --> 00:59:23.480
and that would totally match separately as well.


00:59:23.480 --> 00:59:26.360
So once again, this is matching against structure.


00:59:26.360 --> 00:59:29.200
So you could actually pass in tuples of different sizes


00:59:29.200 --> 00:59:31.120
and have it automatically just kind of infer


00:59:31.120 --> 00:59:31.960
based on the shape.


00:59:31.960 --> 00:59:33.680
- Maybe do something different with 2D or 3D.


00:59:33.680 --> 00:59:34.600
- Yeah, exactly.


00:59:34.600 --> 00:59:35.880
Yeah, exactly.


00:59:35.880 --> 00:59:39.240
So because it's a structural thing and not a value thing,


00:59:39.240 --> 00:59:41.320
it opens those very interesting doors.


00:59:41.320 --> 00:59:44.320
- Interesting.


00:59:44.320 --> 00:59:45.360
Yeah, cool, it's really great to have you here


00:59:45.360 --> 00:59:46.760
to talk about all this stuff.


00:59:46.760 --> 00:59:50.800
Final comment, close this one out, I guess.


00:59:50.800 --> 00:59:55.120
ZDoc says, "I think once good syntax highlighting lands,


00:59:55.120 --> 00:59:57.680
this will be as natural as list comparisons."


00:59:57.680 --> 00:59:59.200
- Yeah, and that's actually a good point.


00:59:59.200 --> 01:00:02.080
One of the things we had discussed was,


01:00:02.080 --> 01:00:06.920
Mike, the leading dot, how hard would that be to see


01:00:06.920 --> 01:00:08.160
with or without syntax highlighting?


01:00:08.160 --> 01:00:09.480
And we realized that, honestly,


01:00:09.480 --> 01:00:11.000
syntax highlighting will probably do it.


01:00:11.000 --> 01:00:12.720
One thing some people were a little worried about


01:00:12.720 --> 01:00:15.400
was the reason this is even possible


01:00:15.400 --> 01:00:18.480
was because of the new parser that landed in Python 3.9,


01:00:18.480 --> 01:00:23.120
the new pgem parser, it can do more contextualized parsing.


01:00:23.120 --> 01:00:25.920
So that match, for instance, isn't gonna suddenly make


01:00:25.920 --> 01:00:28.280
all your match keywords or the match method


01:00:28.280 --> 01:00:33.280
on from the RE module on match objects suddenly not work.


01:00:33.280 --> 01:00:35.600
It contextually can tell that that match keyword


01:00:35.600 --> 01:00:37.200
is for a match statement.


01:00:37.200 --> 01:00:39.780
So there might be a little funky coloring for some people


01:00:39.780 --> 01:00:41.240
based on how your syntax highlighting works.


01:00:41.240 --> 01:00:42.880
Like you might suddenly have all your match methods


01:00:42.880 --> 01:00:45.240
highlighted like it was the match keyword,


01:00:45.240 --> 01:00:49.040
but honestly, it'll be from what you're looking at


01:00:49.040 --> 01:00:50.680
in terms of the code, it's gonna be fairly obvious


01:00:50.680 --> 01:00:51.960
that is not a match statement,


01:00:51.960 --> 01:00:55.320
so we weren't too worried about that kind of haziness


01:00:55.320 --> 01:00:56.920
as it were when it comes to syntax.


01:00:56.920 --> 01:00:57.920
- No, this is cool.


01:00:57.920 --> 01:01:00.260
- I know a guy on the VS Code team, so.


01:01:00.260 --> 01:01:02.560
- Yeah, so do I.


01:01:02.560 --> 01:01:04.640
(laughing)


01:01:04.640 --> 01:01:06.760
- You see him every morning in the mirror.


01:01:06.760 --> 01:01:09.320
- A quick plug and thank you to Magic Python,


01:01:09.320 --> 01:01:14.160
which comes from the Magic Python team,


01:01:14.160 --> 01:01:16.520
Magic Stack, the people who do EdgeDB,


01:01:16.520 --> 01:01:20.160
they actually maintain the syntax highlighting


01:01:20.160 --> 01:01:22.160
that we use in VS Code,


01:01:22.160 --> 01:01:25.100
as well as I think is using some blind text and add them,


01:01:25.100 --> 01:01:26.800
like they have a generic grammar that they use


01:01:26.800 --> 01:01:31.080
that they just auto-gen out to various editors


01:01:31.080 --> 01:01:34.320
for their syntax, mostly text format,


01:01:34.320 --> 01:01:36.360
but kudos to them for always maintaining


01:01:36.360 --> 01:01:37.480
that syntax highlighting,


01:01:37.480 --> 01:01:40.000
'cause that's actually what VS Code itself ships in the box.


01:01:40.000 --> 01:01:40.960
- That's awesome.


01:01:40.960 --> 01:01:42.560
- Yeah, nice.


01:01:42.560 --> 01:01:45.040
- Brian, I don't have any extras, do you?


01:01:45.040 --> 01:01:46.960
- I don't know.


01:01:46.960 --> 01:01:48.240
- No?


01:01:48.240 --> 01:01:49.680
Brian, anything else you wanna throw out there


01:01:49.680 --> 01:01:52.280
before we make a bad joke?


01:01:52.280 --> 01:01:53.920
- No, just thanks for having me on.


01:01:53.920 --> 01:01:55.620
Thank you for everyone listening to me rant on


01:01:55.620 --> 01:02:00.160
about how to please try to talk to maintainers


01:02:00.160 --> 01:02:01.460
to help them keep their sanity.


01:02:01.460 --> 01:02:03.400
And that's it.


01:02:03.400 --> 01:02:05.840
I hope people give the Python Launcher a shot


01:02:05.840 --> 01:02:06.680
and it works for them.


01:02:06.680 --> 01:02:07.880
- Yeah, that's very exciting.


01:02:07.880 --> 01:02:08.720
- Let me know.


01:02:08.720 --> 01:02:10.480
I can't make any promises about it shipping


01:02:10.480 --> 01:02:11.720
specifically with Python,


01:02:11.720 --> 01:02:13.640
But at least it's a tool there that I find useful


01:02:13.640 --> 01:02:15.800
and I hope others do as well.


01:02:15.800 --> 01:02:18.360
- Cool, I'll definitely check that one out.


01:02:18.360 --> 01:02:20.280
All right, you guys ready for the joke?


01:02:20.280 --> 01:02:23.160
You know, we're all stuck at home


01:02:23.160 --> 01:02:24.720
and especially if you're single,


01:02:24.720 --> 01:02:29.040
it's really tricky to get out and meet people


01:02:29.040 --> 01:02:30.680
and you know, whatnot.


01:02:30.680 --> 01:02:32.120
See what's gonna make you happy.


01:02:32.120 --> 01:02:33.560
So I got a joke along those lines


01:02:33.560 --> 01:02:35.320
to kind of help people out there.


01:02:35.320 --> 01:02:36.160
Ready?


01:02:36.160 --> 01:02:37.240
- Mm-hmm.


01:02:37.240 --> 01:02:41.040
- All right, so there's this tweet by Christina Zhu.


01:02:41.040 --> 01:02:42.840
says, "If you're not happy single,


01:02:42.840 --> 01:02:44.440
"you won't be happy in a relationship."


01:02:44.440 --> 01:02:45.280
I mean, we've all heard this,


01:02:45.280 --> 01:02:47.340
how important it is to be just like content with yourself.


01:02:47.340 --> 01:02:49.180
She says, "No, true happiness comes


01:02:49.180 --> 01:02:50.880
"from closing 100 Chrome tabs


01:02:50.880 --> 01:02:53.040
"after solving an obscure programming bug,


01:02:53.040 --> 01:02:54.280
"not from other people."


01:02:54.280 --> 01:02:55.120
Come on.


01:02:55.120 --> 01:02:57.800
(laughing)


01:02:57.800 --> 01:02:59.020
- Yeah. - Anyway,


01:02:59.020 --> 01:03:00.800
I thought that was good.


01:03:00.800 --> 01:03:01.640
And kiki.


01:03:01.640 --> 01:03:03.560
(laughing)


01:03:03.560 --> 01:03:04.880
- Are you two the type of folk


01:03:04.880 --> 01:03:07.100
who have like a bazillion tabs open at any one time,


01:03:07.100 --> 01:03:07.940
or are you more like,


01:03:07.940 --> 01:03:09.720
"I'll only keep open exactly what I'm working on,


01:03:09.720 --> 01:03:12.160
And as soon as I'm done, I close them.


01:03:12.160 --> 01:03:16.080
- I am not a 100 tab person, but what I do sometimes,


01:03:16.080 --> 01:03:17.640
I'll like leave the tabs open, like,


01:03:17.640 --> 01:03:18.960
oh, I'm not done with this.


01:03:18.960 --> 01:03:19.960
And so I'll close it.


01:03:19.960 --> 01:03:21.200
If I got to reboot the computer,


01:03:21.200 --> 01:03:23.000
the first thing I do is reopen the browser


01:03:23.000 --> 01:03:24.800
and say history restore previous session.


01:03:24.800 --> 01:03:26.100
Cause I'm like, there were things in there.


01:03:26.100 --> 01:03:28.720
I don't know what I was doing, but I know they're important.


01:03:28.720 --> 01:03:30.840
So I may abuse that a little bit.


01:03:30.840 --> 01:03:34.240
- My daughter came to me once and said,


01:03:34.240 --> 01:03:37.960
I need dad like finals and then my laptop is too slow.


01:03:37.960 --> 01:03:39.440
I need a new laptop.


01:03:39.440 --> 01:03:41.140
"Okay, well, let's talk about what you're doing."


01:03:41.140 --> 01:03:43.240
Well, she was doing like three research projects


01:03:43.240 --> 01:03:45.940
and had like a hundred tabs open.


01:03:45.940 --> 01:03:48.080
And I'm like, "Well, let's just try this first.


01:03:48.080 --> 01:03:52.080
"Can I tell you about this cool thing called bookmarks?"


01:03:52.080 --> 01:03:56.740
Anyway, totally fixed it.


01:03:56.740 --> 01:03:57.580
- Yeah, that's awesome.


01:03:57.580 --> 01:04:00.080
- Hipster dad showing bookmarks to the youngsters.


01:04:00.080 --> 01:04:01.640
(laughing)


01:04:01.640 --> 01:04:04.080
- Yeah, Magnus says, "The number of tabs


01:04:04.080 --> 01:04:06.480
"is a measure of how hard the problem is."


01:04:06.480 --> 01:04:09.180
And Neil's says, "Great rant.


01:04:09.180 --> 01:04:10.020
Love your work, Brett."


01:04:10.020 --> 01:04:11.760
- Thank you very much. - Great to have you


01:04:11.760 --> 01:04:12.600
on the show, Brett.


01:04:12.600 --> 01:04:14.280
- I always happy to be on.


01:04:14.280 --> 01:04:15.960
- Yep.


01:04:15.960 --> 01:04:19.200
All right, well, thanks for being here.


01:04:19.200 --> 01:04:20.040
Thanks everyone.


01:04:20.040 --> 01:04:20.860
Brian. - Thank you.


01:04:20.860 --> 01:04:21.700
- Thanks as always.


01:04:21.700 --> 01:04:22.540
- Bye all.


01:04:22.540 --> 01:04:24.780
(clicking)

