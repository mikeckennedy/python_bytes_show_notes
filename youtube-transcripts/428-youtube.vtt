WEBVTT

00:00:00.919 --> 00:00:02.020
Hey, Brian. Hey, everyone.

00:00:02.779 --> 00:00:03.180
Hey.

00:00:05.260 --> 00:00:05.800
Happy summer.

00:00:07.820 --> 00:00:09.800
It's lovely. Been working in the garden.

00:00:11.080 --> 00:00:11.760
I know. Me too.

00:00:12.360 --> 00:00:14.780
I have six bags of leaves I've piled up outside.

00:00:16.340 --> 00:00:18.380
It's only a tiny corner of my yard.

00:00:20.080 --> 00:00:20.840
Yeah, there's a lot of leaves.

00:00:22.000 --> 00:00:22.400
Welcome to Oregon.

00:00:22.720 --> 00:00:25.500
Okay. Let's do it. Let's kick off the show.

00:00:26.960 --> 00:00:32.419
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:32.640 --> 00:00:38.120
This is episode 428, recorded April 14, 2025.

00:00:38.640 --> 00:00:39.280
I'm Michael Kennedy.

00:00:39.800 --> 00:00:40.300
And I

00:00:40.300 --> 00:00:41.060
am Brian Okken.

00:00:43.160 --> 00:00:46.100
This episode is brought to you by Posit and Posit Connect.

00:00:47.140 --> 00:00:48.600
Thank you to Posit for supporting the show.

00:00:48.720 --> 00:00:50.740
We will tell you more about them later.

00:00:51.560 --> 00:00:58.400
If you're a social type and you want to connect with us socially, you can do so on Mastodon and Blue Sky.

00:01:00.960 --> 00:01:04.500
We also stream live on YouTube a few minutes late today.

00:01:07.960 --> 00:01:11.200
Brian, did I mention that spring and summer come with allergies?

00:01:11.280 --> 00:01:11.740
I apologize.

00:01:13.700 --> 00:01:22.060
So you can join us on YouTube at pythonbytes.fm/live, usually on Monday at 10 today, a few minutes later, but generally around there.

00:01:22.060 --> 00:01:23.400
You could also catch the older episodes.

00:01:23.620 --> 00:01:27.840
Every episode page has YouTube trailer or poster you can click.

00:01:31.360 --> 00:01:48.300
and finally if you want our increasingly cool artisanal handcrafted digest of what's going on put together by the one and only Brian Okken join our friends of the show mailing list go to the website click newsletter sign up more and more people are writing in Brian say they like the newsletter

00:01:49.360 --> 00:01:50.020
that's great

00:01:51.259 --> 00:01:52.280
yeah I think

00:01:52.280 --> 00:01:52.820
it's I like it

00:01:54.220 --> 00:01:59.820
I do too I'm glad we're doing it I wish maybe other people might learn how to write Git commit messages

00:01:59.820 --> 00:02:01.340
better.

00:02:01.520 --> 00:02:05.700
Well, honestly, I'm trying, I'm learning, but let's get going.

00:02:06.980 --> 00:02:10.759
So, let's see, where are we at?

00:02:12.600 --> 00:02:13.040
I got you.

00:02:13.180 --> 00:02:13.580
There we go.

00:02:15.980 --> 00:02:21.560
Uh, so I'm going to cover a, something by Chris beams, how to write a Git commit message.

00:02:21.960 --> 00:02:30.100
And, oh man, I probably write like a dozen Git, commit messages a day maybe, you know, from one to a dozen.

00:02:32.960 --> 00:02:35.820
And so I was interested to see how to do it better.

00:02:36.060 --> 00:02:41.940
So there's an XKCD at the top, which is, you know, just gibberish.

00:02:42.780 --> 00:02:47.200
The first commit message is created main loop and timing control.

00:02:47.300 --> 00:02:47.820
It's pretty good.

00:02:48.240 --> 00:02:53.180
And then by the end, like the most recent is like hands, just something.

00:02:53.760 --> 00:02:55.180
Here I have code, more code.

00:02:55.400 --> 00:02:57.580
Ah, my hands are typing words.

00:02:58.480 --> 00:02:59.080
And one

00:02:59.080 --> 00:03:11.480
of the things that, this isn't part of the article, but one of the things I enjoy is being able to be fun with my commit messages when I'm just doing, when I'm doing it on a branch that I'm just doing it for local saves, essentially.

00:03:12.220 --> 00:03:18.500
And then I squash it into a main branch and then I really want the squashed commit message because that's the one that'll stay there to be really.

00:03:19.080 --> 00:03:22.820
So they're really, when you want to write a good commit message, here's what you have.

00:03:23.340 --> 00:03:28.660
And I would like seven tips, but there's seven rules, but I was intrigued by like the first one.

00:03:28.780 --> 00:03:37.920
So like, for example, at the top, there's an example of kind of a run on commit message that you have to kind of like scroll to the right to see all of it.

00:03:38.240 --> 00:03:40.080
Huge commit message. Not good.

00:03:41.180 --> 00:03:43.200
And then some better ones that are shorter.

00:03:43.940 --> 00:03:45.540
So how do we get that?

00:03:46.140 --> 00:03:49.460
And having included, have like good information.

00:03:50.280 --> 00:04:12.780
Well, one of the things that I didn't really, I didn't know about, and I learned from reading this, is that if you separate the subject and body with a blank line, so the top line is get, and a lot of get tools recognize everything up to the first blank line as the title of your commit message.

00:04:13.740 --> 00:04:25.300
So in the example, there's an example with like just one line, the short line, and then a blank line, and then the rest of it, that your log and everything will just show that one line.

00:04:25.480 --> 00:04:30.180
And then it doesn't show the rest of it unless you should like click for details or something.

00:04:31.020 --> 00:04:31.560
Really cool.

00:04:31.560 --> 00:04:32.680
I didn't know this did this.

00:04:32.780 --> 00:04:33.600
So that's great.

00:04:35.099 --> 00:04:38.100
So separate the subject and body with a blank line.

00:04:38.900 --> 00:04:40.800
Limit subject line to 50 characters.

00:04:41.200 --> 00:04:47.020
I think that's just to keep it because you're, we kind of do like the 80 character thing sometimes.

00:04:48.040 --> 00:04:54.820
And like a bunch of the characters are used for the actual, like the timestamp and stuff like that.

00:04:54.980 --> 00:04:58.440
So, or the hash, like the first few digits of the hash.

00:04:58.580 --> 00:04:59.400
So we want

00:04:59.400 --> 00:05:00.800
to leave some space for that.

00:05:01.020 --> 00:05:04.560
So 50 characters, subject, capitalize the subject line.

00:05:04.920 --> 00:05:08.180
Don't worry about a period because, you know, that's one of your characters.

00:05:08.630 --> 00:05:09.460
So don't worry about it.

00:05:10.260 --> 00:05:12.560
Use imperative mood in the subject line.

00:05:12.610 --> 00:05:20.100
And if you don't know or don't remember what imperative mood is, which I didn't, so I'm glad there's a discussion later.

00:05:20.580 --> 00:05:22.860
There's a discussion about all of these in the article.

00:05:24.080 --> 00:05:26.320
Wrap the body at 72 characters.

00:05:27.360 --> 00:05:28.360
That was an interesting thing.

00:05:29.920 --> 00:05:31.400
It just is interesting.

00:05:31.870 --> 00:05:36.640
So I use tools that wrap it automatically, but a lot of people are using tools that don't.

00:05:36.700 --> 00:05:41.780
And so to store it in approximately two characters.

00:05:42.480 --> 00:05:48.800
And I just think of this as keep lines short-ish and actually using lines that don't depend on wrapping.

00:05:50.080 --> 00:05:52.380
And then the most important is number seven.

00:05:52.450 --> 00:05:53.940
I think this is the most important.

00:05:55.139 --> 00:05:59.260
Use the body to explain what and why and not how.

00:05:59.640 --> 00:06:02.420
The code changes how you did the change.

00:06:02.940 --> 00:06:06.960
So the commit message is what did you do and why did you do it?

00:06:08.060 --> 00:06:10.860
And I really kind of actually just focus on why.

00:06:11.420 --> 00:06:13.200
I don't even really do the what too much.

00:06:15.040 --> 00:06:18.460
So good information about commit messages.

00:06:18.650 --> 00:06:21.100
I also love, there's a lot of people that have talked about this before.

00:06:21.440 --> 00:06:24.260
So he references a handful of this.

00:06:24.330 --> 00:06:25.380
It says, keep this in mind.

00:06:25.540 --> 00:06:26.360
This has all been said before.

00:06:27.040 --> 00:06:33.180
And each one of these words is like this and has are all different links to different articles.

00:06:33.380 --> 00:06:36.320
So it's kind of a fun way to reference other people's work.

00:06:36.700 --> 00:06:36.820
So

00:06:36.820 --> 00:06:37.760
good job.

00:06:39.320 --> 00:06:40.260
Yeah, this is really interesting.

00:06:40.360 --> 00:06:43.620
And I not too long ago learned a thing about one

00:06:43.620 --> 00:06:44.060
sentence

00:06:44.220 --> 00:06:46.480
and then a paragraph or two being extra.

00:06:46.600 --> 00:06:51.720
And I learned it from the JetBrains AI in PyCharm.

00:06:52.180 --> 00:06:52.780
Oh, really?

00:06:53.700 --> 00:07:00.040
Yeah, because it's actually really quite good at writing a commit message if you just press the AI summarize what I did.

00:07:01.320 --> 00:07:01.800
Provided

00:07:01.800 --> 00:07:03.900
that what you're doing is focused.

00:07:04.340 --> 00:07:13.200
So if what you did was run pip compile and update 20 dependencies and then you ran rough and reformatted it, never click that button.

00:07:13.500 --> 00:07:22.240
But if you legitimately did something, you know, that is like a focused thing that it can look at and go not like you removed 700 spaces in these locations.

00:07:22.960 --> 00:07:23.900
And then it comes out really good.

00:07:23.950 --> 00:07:24.840
And it does that.

00:07:25.040 --> 00:07:30.000
It'll put like one sentence and then it'll summarize in detail what it's discovered below.

00:07:31.180 --> 00:07:31.480
Yeah.

00:07:33.100 --> 00:07:33.780
Yeah, so very cool.

00:07:34.680 --> 00:07:34.920
That's it.

00:07:34.920 --> 00:07:35.640
I don't use it that much.

00:07:35.650 --> 00:07:40.840
I probably should use it more, but sometimes end up in hands, just work.

00:07:43.900 --> 00:07:51.440
But usually for me, when I end up writing commit messages like that, I am frantically trying to fix something I just broke in production.

00:07:52.680 --> 00:07:54.040
And I'm like, oh, I got to put it back.

00:07:54.070 --> 00:07:55.460
Just take this.

00:07:55.670 --> 00:08:02.000
I just need you to be able to get pull on the server again and try again before it disrupts too much, you know what I mean?

00:08:03.220 --> 00:08:32.680
Yeah, well, I just realized that there's another thing that I do frequently as well is if I commit and then push everything and then CI breaks for some reason, because I forgot something, like I added a file and I forgot to add it and push that, I will, the second commit, I will try to have the message be identical to the first one so that when people are looking at, it will show up as a different commit, but then it

00:08:32.680 --> 00:08:33.419
makes it obvious

00:08:33.719 --> 00:08:37.380
that it's part of that same commit that is intended to be together.

00:08:38.000 --> 00:08:38.740
Yeah, that makes sense.

00:08:38.849 --> 00:08:39.340
I agree with that.

00:08:39.940 --> 00:08:40.580
This looks really useful.

00:08:41.570 --> 00:08:41.680
Cool.

00:08:41.780 --> 00:08:44.900
Who knew writing a single sentence would be

00:08:44.900 --> 00:08:45.720
so interesting?

00:08:46.050 --> 00:08:46.160
Hands.

00:08:46.160 --> 00:08:46.540
Hands.

00:08:49.380 --> 00:08:49.940
All right.

00:08:50.620 --> 00:08:52.560
Let's talk about caddy.

00:08:53.000 --> 00:08:53.980
Brian, are you familiar with caddy?

00:08:54.920 --> 00:08:56.260
Just caddy people?

00:08:57.100 --> 00:08:58.040
I mean, there's caddy shack.

00:08:58.360 --> 00:08:58.880
What is that?

00:08:59.860 --> 00:09:00.800
But this is not that.

00:09:00.860 --> 00:09:04.400
This is caddy, the ultimate server, ultimate web server.

00:09:05.280 --> 00:09:19.580
So if people are thinking about how do I host my web apps with Python, there are a few now that the thing that runs your Python code could theoretically also be the thing that serves, that talks to the web browsers.

00:09:19.680 --> 00:09:24.480
But typically and certainly traditionally, there's been an interesting divide there.

00:09:24.600 --> 00:09:29.920
We've got static web servers and proxies and firewall type things.

00:09:30.860 --> 00:09:32.360
That's like Nginx and others.

00:09:33.340 --> 00:09:33.480
Yeah.

00:09:33.680 --> 00:09:48.340
And then you've got the stuff that actually runs your Python code, probably scaled out to be like four of them or something in a web farm, with UVicorn, G-Unicorn, uWSGI, which don't use uWSGI anymore.

00:09:48.400 --> 00:09:49.060
We covered that.

00:09:49.260 --> 00:09:52.260
But, you know, Gradient, all those types of things, right?

00:09:52.980 --> 00:10:02.680
So this one I want to cover, this thing I want to cover today called Caddy, is actually sort of a parallel of Nginx.

00:10:03.960 --> 00:10:06.940
So this comes to us from Frederick Melstorm.

00:10:07.600 --> 00:10:10.720
Storm, thank you so much for sending this in.

00:10:11.000 --> 00:10:16.960
But it's something I've been tracking as well, and I've wanted to switch over, but my world is just so complicated.

00:10:17.040 --> 00:10:20.200
I have every line of Nginx.

00:10:20.420 --> 00:10:27.460
You know, you've got to put like a little configuration YAML JSON-like combo file together.

00:10:28.800 --> 00:10:33.760
I have 2,200 lines of JSON or whatever Nginx config files.

00:10:35.740 --> 00:10:36.180
That's a problem.

00:10:36.530 --> 00:10:39.400
And I don't really want to mess with trying to move that, so it's going to stay.

00:10:40.900 --> 00:10:45.400
But if I were starting over, I believe I would be probably choosing Caddy.

00:10:45.500 --> 00:10:51.220
It's a super, super simple way to create web apps that you can run.

00:10:52.100 --> 00:11:01.640
It comes with automatic, internal, no action on your behalf, HTTPS through Let's Encrypt.

00:11:01.800 --> 00:11:03.120
So, for example, you set up a website.

00:11:03.230 --> 00:11:10.400
You say my website is like michaildeploys.com or whatever, and you don't have an SSL certificate.

00:11:11.000 --> 00:11:21.900
you start it up and as long as it's running on the server that actually that domain resolves to, it will just automatically get you a Let's Encrypt certificate and keep it up to date.

00:11:22.580 --> 00:11:23.040
Oh, wow.

00:11:23.360 --> 00:11:23.860
That's

00:11:23.860 --> 00:11:24.440
really cool, right?

00:11:24.960 --> 00:11:25.960
It has 63

00:11:25.960 --> 00:11:27.380
,000 stars on GitHub.

00:11:27.820 --> 00:11:28.640
That's pretty awesome.

00:11:32.240 --> 00:11:40.320
If you want to do development, sometimes you need to have HTTPS and it will automatically do a local trusted certificate for you.

00:11:40.380 --> 00:11:44.040
If you want to run on localhost, it'll just do, like even localhost is over HTTPS.

00:11:44.940 --> 00:11:45.600
It does clusters.

00:11:46.480 --> 00:11:47.260
It has a little test.

00:11:47.290 --> 00:11:52.240
You can like test it out for yourself, like put your domain to this location or whatever and try it out.

00:11:55.900 --> 00:11:56.680
Let's see if I can find the config.

00:11:57.100 --> 00:11:58.660
The config is super, super simple.

00:11:59.140 --> 00:12:02.480
We just write a couple of lines.

00:12:02.860 --> 00:12:07.600
If you've ever worked with HTTP files from PyCharm, it looks a little tiny bit like that.

00:12:07.670 --> 00:12:08.520
But yeah, it's like real simple.

00:12:08.560 --> 00:12:14.780
You just say handle slash blog slash star, and you put the details out of there.

00:12:14.900 --> 00:12:16.380
That's just how that processes that.

00:12:16.820 --> 00:12:33.060
But it can reverse proxy slash API, which actually goes over to another server, and it can reverse proxy another one, which actually does like a round-robin load balancing to yet another cluster of servers.

00:12:33.240 --> 00:12:33.680
Isn't that cool?

00:12:33.700 --> 00:12:34.960
Just like all that stuff is so simple.

00:12:37.960 --> 00:12:39.080
Yeah, it's really cool.

00:12:39.220 --> 00:12:40.500
It still doesn't look simple to me.

00:12:41.779 --> 00:12:43.480
Well, try the alternative, right?

00:12:44.160 --> 00:12:45.520
So people can check this out.

00:12:45.520 --> 00:12:46.380
I think it's really neat.

00:12:48.299 --> 00:12:51.240
The caddy files are super easy to work with here.

00:12:51.860 --> 00:12:52.480
What was I showing?

00:12:52.500 --> 00:12:55.300
I think, yeah.

00:12:56.000 --> 00:12:57.180
Anyway, there's a bunch of different examples.

00:12:57.460 --> 00:13:00.760
Some of them are simpler than others like this.

00:13:03.340 --> 00:13:03.920
Easy to run.

00:13:04.640 --> 00:13:04.940
Yeah, but

00:13:04.940 --> 00:13:17.300
one of the other things that's cool is if you're coming from somewhere else, like I was complaining that I have all this Nginx config, you can actually just pass it an Nginx configuration file and go, I'm not ready to rewrite this in your world, Caddy.

00:13:17.460 --> 00:13:18.820
Just run this Nginx configuration.

00:13:19.670 --> 00:13:20.040
But you'd be

00:13:20.040 --> 00:13:20.620
our server for

00:13:20.620 --> 00:13:20.820
that.

00:13:21.260 --> 00:13:23.800
So you could slowly migrate over into that.

00:13:26.000 --> 00:13:26.100
Yeah.

00:13:26.620 --> 00:13:36.300
Anyway, you can even use apparently a MySQL database as a source of definition of your front-end web server, which

00:13:36.300 --> 00:13:36.940
sounds

00:13:36.940 --> 00:13:55.680
kind of wild, but then again, you can write code and APIs and stuff to control it then, right? Just change the database, and then you change the web server. So, all pretty cool. Anyway, I think people, if they're thinking about Nginx or something like that, should maybe give this a look. I don't remember what it's getting. Oh, it's written in Go. That's what it's written in. So, it's pretty high performance.

00:13:55.870 --> 00:14:04.320
It does HTTP 1, 2, and 3. So, the 2 is most important, but 3 is also interesting. Anyway, 98% go, 2% HTML.

00:14:06.100 --> 00:14:06.540
Nice.

00:14:08.090 --> 00:14:08.220
Indeed.

00:14:09.280 --> 00:14:14.140
So if you ever got stuff to host and you're not doing platform as a service, there you go.

00:14:15.560 --> 00:14:15.700
Cool.

00:14:16.880 --> 00:14:23.420
Speaking of which, let's talk about, before we move on, let's talk about our sponsor, huh?

00:14:24.000 --> 00:14:24.380
Yeah.

00:14:24.940 --> 00:14:28.540
Yeah, so a couple weeks ago, Brian, you told people about Posit Connect.

00:14:29.240 --> 00:14:33.560
And I want to talk about it again, but for a slightly different reason.

00:14:33.900 --> 00:14:35.820
So you talked about how easy it was to use.

00:14:35.880 --> 00:14:44.380
I want to talk about how you can use it to share your data science projects and how you can do that securely with things like single sign-on and so on.

00:14:44.500 --> 00:14:49.180
So this episode is definitely brought to you by the folks at Posit.

00:14:49.800 --> 00:14:54.380
They've made a huge investment in Python, originally known as being an R shop, making RStudio and others.

00:14:55.020 --> 00:15:00.820
They've been putting maybe the majority, certainly a ton of effort into things for Python people these days.

00:15:03.240 --> 00:15:20.280
So if the mentions of words like HIPAA, GDPR, or other privacy policies make the hair on your neck stand up, you'll know you want a trusted partner to help your data become shareable, but also follow those safety rules that we all have to live by.

00:15:20.490 --> 00:15:21.960
So Posit Connect can help.

00:15:22.210 --> 00:16:00.260
And Posit Connect lets you securely develop, deploy, and share what you build with Python, if you build it with Streamlit, Dash, Plotly, Bokeh, FastAPI, Shiny, Flask, Quarto, and other APIs. So here's how it works. You or your team set up Posit Connect on a secure server within your org or behind some VPN in the cloud amongst your cloud servers and using your existing authentication system. Then when you publish a piece of content, Posit Connect lets you set user-level permissions for that content, making it visible to some users, not others.

00:16:00.710 --> 00:16:06.480
But what's even more interesting, I think, here, is that you can set credentials on a per-user basis.

00:16:07.540 --> 00:16:12.460
So imagine you write code that then talks to a database that then accesses a bunch of data.

00:16:13.380 --> 00:16:20.560
Depending on who is doing that, they can see some of the data, but not all of it are different things and so on, different team reports or whatever.

00:16:21.380 --> 00:16:30.500
So in Posit Connect, you can actually, per user, set how they can access other things like your database or your APIs or external APIs or whatever.

00:16:30.600 --> 00:16:31.380
That's pretty cool.

00:16:31.560 --> 00:16:36.060
So if you work on a data science team where security matters, you owe it to you and your org to check out Posit Connect.

00:16:37.220 --> 00:16:43.360
Do that by going to pythonbytes.fm/connect today and get a three-month trial to see if it's a good fit.

00:16:43.540 --> 00:16:45.180
That's pythonbytes.fm/connect.

00:16:45.200 --> 00:16:46.840
The link's in your podcast player's show notes.

00:16:47.760 --> 00:16:56.740
And yes, we all know you can just Google AI, Bing, whatever, Posit Connect, but please use our link so they know that it came from us.

00:16:56.940 --> 00:16:58.460
That way they will continue to support the show.

00:16:58.960 --> 00:17:01.400
Thanks to Posit for supporting Python Bytes.

00:17:03.600 --> 00:17:04.000
Awesome.

00:17:04.720 --> 00:17:04.880
Yeah.

00:17:05.800 --> 00:17:06.040
All right.

00:17:06.100 --> 00:17:06.560
Back to you.

00:17:07.280 --> 00:17:08.100
What's your third item?

00:17:08.500 --> 00:17:09.199
Not third item.

00:17:09.300 --> 00:17:09.819
Your second item.

00:17:12.000 --> 00:17:16.800
I am going to talk about, let's see, I'm going to talk about PEPs.

00:17:17.240 --> 00:17:20.060
So we've got actually a couple of peps coming in.

00:17:21.500 --> 00:17:22.500
That's good because I need a PEP talk.

00:17:25.400 --> 00:17:26.000
Sorry, go ahead.

00:17:27.780 --> 00:17:31.060
So a couple of peps that just recently got accepted.

00:17:31.540 --> 00:17:37.740
So these are one of the peps is for packaging and one is for Python 3.14.

00:17:40.279 --> 00:17:44.340
So let's do the packaging topic first.

00:17:45.020 --> 00:18:12.540
 PEP 770 is improving measurability of python package with software bill of materials and that's a mouthful but it's about s bombs and if you don't know about s bombs you probably ought to know a little bit um so this is a good thing to read and if you do know about s bombs they're stressing you probably um so we're this is something that we're in the corporate world um a lot of people are trying to think about.

00:18:13.180 --> 00:18:25.620
And SBOMs, I'm probably going to massacre this definition, but generally are a way for us to, because we're using a lot of open source projects and third-party libraries, and like a Python package isn't the Python code.

00:18:25.670 --> 00:18:34.080
It's also possibly some Fortran code in it or whatever and some other things inside or Rust that you want to try to track all those dependencies.

00:18:35.700 --> 00:18:43.120
And the SBOM system is a way to get that right so that you can make sure that you know where all of the code's coming from.

00:18:44.100 --> 00:18:48.260
And this was, there were some different ideas about how to do this within Python.

00:18:50.060 --> 00:18:53.660
This 770 came from Seth Larson, sponsored by Brit Cannon.

00:18:54.840 --> 00:19:04.180
Really kind of a neat way to look at, Seth has looked at the different ways that we're already specifying a lot of this stuff with our packaging metadata.

00:19:04.860 --> 00:19:09.560
So how do we use that to try to fill out a lot of the SPOM fields automatically?

00:19:10.700 --> 00:19:13.440
and this is just really some great work.

00:19:16.780 --> 00:19:18.740
So I'm glad this is going in.

00:19:19.320 --> 00:19:25.180
Again, since it's part of packaging, it isn't really attached to a release.

00:19:25.820 --> 00:19:33.660
So I'm not sure when we'll get like, I didn't read through if this is something that's already implemented or not, but it's just accepted.

00:19:34.340 --> 00:19:37.960
So, and even if we do get it, we'll get it through tools and stuff.

00:19:38.100 --> 00:19:41.600
We won't get it through the Python release versions.

00:19:42.480 --> 00:19:50.480
So next one that I'm also a little confused about but excited about is PEP 750 template strings.

00:19:51.420 --> 00:19:52.900
So we've got f-strings.

00:19:53.760 --> 00:19:55.580
These are like f-strings on steroids.

00:19:55.810 --> 00:20:03.040
The T strings will replace the, when you do a template string, you won't say F string, you'll say T string.

00:20:03.780 --> 00:20:13.220
And so it builds, so like for example, if you had hello name with the name in curly braces, with an F string, that would fill in the name with whatever variable.

00:20:13.840 --> 00:20:19.960
But we want it to be like to just hold that thought and we'll fill in the name later sort of a thing.

00:20:20.960 --> 00:20:24.060
And I still like, I'm just sort of getting into this.

00:20:24.170 --> 00:20:29.060
I don't know really how to use these, but I'm really excited that a lot of this has been thought out.

00:20:29.540 --> 00:20:45.040
Now there's a whole bunch of authors, Jim Baker, Greedan Van Rossum, Paul Everett, three other people, Dave Peck, sorry, Lissandro Nicolau, and Caudiano.

00:20:46.040 --> 00:20:48.660
I'm sorry about massacring your name, I'm sure.

00:20:49.280 --> 00:20:51.180
But a lot of people working on this.

00:20:52.180 --> 00:20:53.500
Really well thought out all.

00:20:54.640 --> 00:20:57.140
Some really cool stuff about being able to combine.

00:20:57.840 --> 00:21:04.020
They thought about with F-strings, you can do math on it, or sort of like adding and matinating and stuff like that.

00:21:04.300 --> 00:21:05.440
All that stuff's been thought out.

00:21:05.940 --> 00:21:11.560
How do we deal with displaying them, using them, the whole shebang?

00:21:12.140 --> 00:21:14.240
This is going into Python 3.14.

00:21:16.100 --> 00:21:17.740
So that's just right around the corner.

00:21:18.160 --> 00:21:20.340
So really, really excited about this one.

00:21:21.740 --> 00:21:23.780
So many Pi jokes are coming in that version.

00:21:24.380 --> 00:21:25.460
I think this is really interesting.

00:21:25.620 --> 00:21:31.960
I talked to Paul a few times about this, and I know he's really excited from a web developer perspective.

00:21:32.460 --> 00:21:39.180
So think about Jinja templates, Django templates, Chameleon templates, like that kind of thing.

00:21:39.610 --> 00:21:39.760
Yeah.

00:21:40.040 --> 00:21:50.620
But with more flexibility, and they're being supported by the Python runtime itself, not a third-party library that parses and processes it separately.

00:21:51.290 --> 00:21:52.160
Well, that's what I was thinking.

00:21:52.520 --> 00:21:58.120
With this in place, would you need Jinja templates, or could you just implement your stuff with this?

00:21:58.320 --> 00:21:58.860
Theoretically,

00:21:58.870 --> 00:21:59.920
I think you could just do it with this.

00:22:00.160 --> 00:22:19.100
I mean, I think it's somewhat inspired by components and stuff from the JavaScript libraries where you've got your JavaScript, but then there's a string in there, like some weird HTML fragment in there that's actually the template that you would use.

00:22:19.220 --> 00:22:24.760
And they're just kind of interwoven so they can have a little bit more locality of behavior with each other.

00:22:25.840 --> 00:22:26.280
I think

00:22:26.280 --> 00:22:29.420
that that is a part of the motivation here, I do believe.

00:22:30.380 --> 00:22:34.780
but I'll probably have to have Paul and maybe some of the other folks on Talk Python to talk about it.

00:22:35.560 --> 00:22:41.900
Yeah, I'm sure we're going to have lots of articles about it and everything, so we will talk about it more for sure.

00:22:43.220 --> 00:22:43.660
Indeed.

00:22:47.260 --> 00:22:53.060
Let's round things out with a little data science. Have we spoken about uv before?

00:22:53.550 --> 00:22:56.120
People out there, do you know UV? Have you heard of this?

00:22:56.340 --> 00:22:59.720
It's a library for managing dependencies and projects.

00:23:00.760 --> 00:23:07.380
Actually, I'm probably going to get my jacket signed by Charlie Marsh when I go to PyCon because that's how much we talk about it.

00:23:08.280 --> 00:23:09.500
No, definitely fanboy of uv.

00:23:10.200 --> 00:23:22.480
And I want to talk about a pretty new project called, you want to pronounce it as J-U-V, but I think it's J-U-V is probably the way to say it because it's based on uv.

00:23:22.640 --> 00:23:35.160
And what this is, this is a toolkit for notebooks where the virtual environments and the dependencies and such of it are managed by UV, which is pretty cool.

00:23:35.500 --> 00:23:35.620
So

00:23:35.620 --> 00:23:36.060
what can

00:23:36.060 --> 00:23:36.280
you do?

00:23:36.740 --> 00:23:39.180
By the way, this is a pretty new project, 222 stars.

00:23:41.080 --> 00:23:48.680
It's only been created six months ago, and it's not too well known, but I want to shine a light on it.

00:23:49.160 --> 00:23:54.060
So you can create, manage, and run Jupyter Notebooks along with their dependencies, which is cool.

00:23:54.820 --> 00:24:02.980
You can pin the dependencies with the PEP 723 inline script metadata, which has been accepted.

00:24:03.080 --> 00:24:03.820
It must be, right?

00:24:04.419 --> 00:24:06.040
Yes, final.

00:24:07.920 --> 00:24:15.220
You can launch ephemeral sessions for multiple front ends like JupyterLab or Notebook or MB Classic, okay?

00:24:16.120 --> 00:24:17.040
And it's all powered by uv.

00:24:17.440 --> 00:24:18.160
So pretty cool.

00:24:18.960 --> 00:24:25.620
You can, as you would expect, uvtool install juv, or you can also pipx install it.

00:24:26.900 --> 00:24:31.400
And then once you've done that, you can just say uvx juv, and it'll run.

00:24:31.840 --> 00:24:38.060
But more importantly, if you look at the different things you can do to it, you can say things like juv init some notebook.

00:24:39.040 --> 00:24:43.560
Or you can init a notebook with Python 3 and give it a name, which is cool.

00:24:44.720 --> 00:24:50.380
You can go to that notebook, and you can add a dependency for pandas and numpy to it.

00:24:51.160 --> 00:24:52.740
That's not something you can normally do to notebooks.

00:24:54.080 --> 00:25:01.660
Or you can say I have a requirements.txt file I've created with pin versions using uvpip compile.

00:25:02.980 --> 00:25:09.420
Then I can say juv add --requirements and give it a full-on requirements file.

00:25:09.540 --> 00:25:13.620
So in case you have a ton of requirements with versions and stuff, you want to manage separately.

00:25:13.760 --> 00:25:15.900
You don't have to keep typing them out.

00:25:17.260 --> 00:25:23.820
You can also do interesting things like put a time stamp for reproducibility onto your dependency.

00:25:24.140 --> 00:25:33.600
So I can say JV stamp this thing, and then it won't get dependencies that are released after now, which is pretty cool, I think.

00:25:34.520 --> 00:25:35.920
I don't know of anything else like that.

00:25:36.150 --> 00:25:41.480
I want to just have it, whatever the latest of everything I'm using is, as right now, that's what I want.

00:25:42.180 --> 00:25:45.080
If they ship something new, I don't want it until I change my mind.

00:25:45.400 --> 00:25:45.960
So that's pretty cool.

00:25:46.840 --> 00:25:48.780
But now here or now there?

00:25:50.880 --> 00:25:51.760
I think probably...

00:25:52.320 --> 00:25:52.800
Yeah, I know.

00:25:53.020 --> 00:25:54.900
Time zones don't make you want to cry.

00:25:56.700 --> 00:26:03.940
You can also say run --with, and it'll run those even if you don't want to put them in as a particular dependency.

00:26:05.840 --> 00:26:08.000
And you can lock it to create a lock file.

00:26:08.740 --> 00:26:12.200
All sorts of the uv types of things, but you can have it run there.

00:26:12.820 --> 00:26:20.420
You can also say run notebook with like Jupyter Notebook rather than JupyterLab and give it a notebook, give it a version.

00:26:20.580 --> 00:26:21.900
Like there's a lot of different things you can do.

00:26:22.120 --> 00:26:27.800
So I think I've been talking enough, but there's like quite a bit more.

00:26:28.300 --> 00:26:28.880
You can go on here.

00:26:28.880 --> 00:26:32.400
So this is a pretty comprehensive project for being six months old.

00:26:35.900 --> 00:26:41.800
Anyway, if you notebook and you like UV, consider giving JUV a look.

00:26:41.800 --> 00:26:42.420
It looks pretty cool.

00:26:45.540 --> 00:26:50.120
what else you got that's cool Brian that's it for our main items I just have a couple extras I

00:26:50.120 --> 00:27:38.520
have a feeling we've covered this but I don't remember so I'm going to go ahead and cover it anyway so I'm going to take a look at the status of Python versions so this is on the Python developers guide devguide.python.org and I just there was within the last couple months there was a reformatting of this I think this is memory so the uh the big list is um at the bottom with like the full chart of all of the all the different versions and what's left and what we see about the full chart is most of them are end of life because it starts at like 2627 30 and it's not really that interesting so the new format highlights the ones you might be caring about right now so the last few end of lives there's 2.7 is end of life, but then 3.6, 7.8 are all end of life.

00:27:39.180 --> 00:27:41.340
So hopefully you're not using Python 3.8 anymore.

00:27:42.160 --> 00:27:45.320
But one of the interesting things, so there's a couple of interesting things about here.

00:27:45.520 --> 00:28:02.920
So highlighting, there's where we're at with, so currently 3.9 is still getting security updates, 3.9, 10, and 11, and then like right now, as it looks like right, it's hard to tell where the green and yellow start with blue line.

00:28:02.960 --> 00:28:12.740
So there's dates around, but there's a link in here for endoflifedate.date.python.

00:28:13.190 --> 00:28:18.580
And so I took a look at that, and that is very clear as to the timeline and what we got left.

00:28:19.780 --> 00:28:30.040
So 3.13, the active support, so it was released six months ago, and so these relative times are really nice.

00:28:30.440 --> 00:28:50.180
So it was released six months ago. We have a year and five months left active support and then security update for four more years, four years and six months. So this, the timeline is really nice. This also highlights the, so in the first graph, we just had like this difference between green and yellows. We have bug fix and security.

00:28:50.800 --> 00:29:04.480
It doesn't seem like that big of a deal, but when you look at it with the reality of it is 3.12, which I'm using a lot of lately, that active support ended a week ago.

00:29:06.080 --> 00:29:07.280
We're not like right on the edge.

00:29:07.580 --> 00:29:08.220
We're past it.

00:29:08.400 --> 00:29:10.500
So active support ended for 3.12.

00:29:11.640 --> 00:29:13.780
We still have security supports.

00:29:15.050 --> 00:29:16.440
So there's security problems.

00:29:16.590 --> 00:29:18.200
We still get three years of security.

00:29:18.820 --> 00:29:21.080
But we're not going to get like bug fixes and stuff.

00:29:21.480 --> 00:29:24.220
Like minor bug fixes are not going to go into 3.12.

00:29:24.460 --> 00:29:26.720
So 3.13 is where you probably ought to be.

00:29:27.540 --> 00:29:29.060
Anyway, so I like both these graphs.

00:29:29.800 --> 00:29:37.940
And these are really great graphs to pull out if you want to help convince your management chain that you can switch to a different version sort of thing.

00:29:38.120 --> 00:29:38.660
If you need that.

00:29:38.820 --> 00:29:47.000
Actually, the second one that you link to here, the endoflife.date slash Python, is really good for that sort of motivation.

00:29:47.660 --> 00:29:47.720
Yeah.

00:29:48.000 --> 00:29:50.580
Look, we've got one year and six months.

00:29:52.180 --> 00:29:52.920
How do you feel about that?

00:29:53.160 --> 00:29:53.740
Maybe we should change.

00:29:54.500 --> 00:30:00.820
In the part where if you pull up 2.7, it just goes, what are you reading this for?

00:30:01.300 --> 00:30:02.760
Stop right now and go back to migrating.

00:30:02.960 --> 00:30:04.860
And then 2.8 just says never.

00:30:06.000 --> 00:30:06.580
No, I'm just making

00:30:06.580 --> 00:30:06.680
that up.

00:30:06.700 --> 00:30:06.840
Really?

00:30:08.060 --> 00:30:08.960
No, it should say that.

00:30:08.980 --> 00:30:09.580
I've never done it.

00:30:09.680 --> 00:30:10.260
Oh, okay.

00:30:11.840 --> 00:30:12.520
It should, though.

00:30:12.960 --> 00:30:13.580
Yeah, it should.

00:30:13.660 --> 00:30:14.680
It just goes, stop, what are you doing?

00:30:15.200 --> 00:30:15.920
No, it has all

00:30:15.920 --> 00:30:22.440
the unsupported versions from 3.7 and older just collapsing, like unsupported, go away.

00:30:22.560 --> 00:30:22.760
Yeah.

00:30:23.420 --> 00:30:25.200
Well, you can expand it, but it's collapsed.

00:30:26.340 --> 00:30:27.060
But having

00:30:27.060 --> 00:30:29.020
the relative time is really nice.

00:30:29.050 --> 00:30:29.960
How much time do you

00:30:29.960 --> 00:30:30.140
have left?

00:30:30.180 --> 00:30:30.680
Yeah, I agree.

00:30:30.850 --> 00:30:32.820
I think that's very powerful as a mental model.

00:30:33.500 --> 00:30:33.680
Yeah.

00:30:34.300 --> 00:30:34.400
Anyway.

00:30:35.500 --> 00:30:35.800
Cool.

00:30:35.930 --> 00:30:40.360
Well, let's carry on with that theme because I just want to point out that 3.13.3 is out.

00:30:41.560 --> 00:30:43.560
And some of the changes don't matter too much to you.

00:30:43.920 --> 00:30:45.460
Oh, if you use the Mac installer, this happens.

00:30:45.640 --> 00:30:47.720
Like, okay, well, I install with UV, so next.

00:30:48.340 --> 00:30:52.020
And then Windows has things like updated SSLs.

00:30:53.260 --> 00:31:01.440
Tests have been updated a little bit, but it's got a few security fixes here, which is none of them are like run for your life sort of thing.

00:31:02.580 --> 00:31:04.280
But avoid unbounded buffering.

00:31:04.640 --> 00:31:06.520
That sounds like you want to avoid that and so on.

00:31:07.400 --> 00:31:12.580
If you don't see the word CVE, you're probably safe, but still it's good to have a fix.

00:31:12.660 --> 00:31:14.840
and then a bunch of changes to the library thing is getting better.

00:31:16.280 --> 00:31:19.000
And so might as well upgrade, right?

00:31:19.150 --> 00:31:20.120
Might as well upgrade to the new one.

00:31:21.380 --> 00:31:29.200
I just have to rebuild our base Docker container, and uv will find the new one, download it, and then all the websites, including Python Bytes, will be off to the races.

00:31:30.360 --> 00:31:33.400
I think I'm most excited about the update to TCLTK.

00:31:34.140 --> 00:31:34.460
I know.

00:31:37.140 --> 00:31:39.140
All right, one more really quick.

00:31:40.200 --> 00:31:42.840
I am Yala Marti.

00:31:43.060 --> 00:31:52.380
Thank you so much for sending this in because somebody, I think in the comments, mentioned, oh, we just used.get-blame-ignore-revs

00:31:53.580 --> 00:31:53.980
for

00:31:53.980 --> 00:31:55.280
the Ruff format.

00:31:55.360 --> 00:32:05.400
And we were somehow complaining like, when you're looking at diffs and bases, especially looking at blame, whoever ran Ruff format, and you said, Brian, don't run format on this because you're going to own it then.

00:32:06.240 --> 00:32:14.840
What you can do is you can create this.get-blame-ignore-revs put probably the SHA of the commit, the hash, and then that will not show up.

00:32:14.940 --> 00:32:19.820
Like, okay, we're not going to consider that when we compute the blame.

00:32:21.500 --> 00:32:21.720
Oh,

00:32:21.920 --> 00:32:22.120
okay.

00:32:22.400 --> 00:32:27.400
So in that file, you can do a list of revisions to

00:32:27.400 --> 00:32:28.400
not...

00:32:28.420 --> 00:32:28.480
Yes.

00:32:29.160 --> 00:32:30.240
That makes sense now.

00:32:30.480 --> 00:32:38.340
Yeah, and they also pointed out that get blame has a flag, --ignore res file if you want to pass another one, pass a different file or

00:32:38.340 --> 00:32:38.420
something.

00:32:38.460 --> 00:32:39.340
Oh, it's not automatic.

00:32:40.200 --> 00:32:44.300
or use yeah I guess you got to use it with that probably maybe

00:32:44.300 --> 00:32:44.800
not automatic

00:32:44.800 --> 00:32:49.540
but you can so anyway I am learning about this is all next to me

00:32:50.180 --> 00:32:52.340
yeah interesting cool

00:32:53.210 --> 00:33:10.880
indeed thanks for sending that in that's always appreciated alright so let's close this out with a joke Brian you've heard about BC and AD and sometimes referred to as BCE before the common era in western calendars you know so we don't have negative numbers because

00:33:10.880 --> 00:33:11.460
negative is

00:33:11.460 --> 00:33:12.900
hard in calendars, apparently.

00:33:13.320 --> 00:33:16.440
I never really thought, why don't we just have negative 400?

00:33:17.520 --> 00:33:17.920
But whatever.

00:33:19.880 --> 00:33:20.260
BCE.

00:33:20.880 --> 00:33:28.060
So I want to introduce you to a different calendar, such an important epoch, a different thing here.

00:33:29.339 --> 00:33:32.180
There's BGPT and AGPT.

00:33:32.320 --> 00:33:35.720
So before GPT, ChatGPT, and after ChatGPT.

00:33:36.320 --> 00:33:36.860
So before,

00:33:37.080 --> 00:33:47.280
if you're debugging a problem, the developer's probably sitting there for two hours working really hard and going, oh, okay, how's this going to work? They finally think it's working.

00:33:47.520 --> 00:33:50.620
And then hands to the face six hours of debugging.

00:33:51.520 --> 00:33:53.540
That's before. That's BGPT.

00:33:54.880 --> 00:33:59.680
AGPT is ChatGPT generates code in five minutes, 24 hours

00:33:59.880 --> 00:34:01.060
debugging, even more tiers.

00:34:03.380 --> 00:34:03.860
What do you think?

00:34:04.780 --> 00:34:06.880
Yeah, well, so 24 hours.

00:34:07.380 --> 00:34:13.020
If you're being good with your body and working only eight-hour days, that's three days.

00:34:13.800 --> 00:34:14.000
Yeah.

00:34:15.080 --> 00:34:15.840
See, it saves you time.

00:34:16.220 --> 00:34:17.280
This is how you save time with it.

00:34:19.020 --> 00:34:19.240
Yeah.

00:34:19.800 --> 00:34:20.860
No, I've

00:34:20.860 --> 00:34:23.200
both saved time and lost time with this far.

00:34:24.100 --> 00:34:24.240
Yeah.

00:34:24.860 --> 00:34:30.399
I feel like that's more vibe coding than it is just like I asked GPT for a little help with a function.

00:34:31.600 --> 00:34:32.179
You know what I mean?

00:34:32.260 --> 00:34:32.460
It's like.

00:34:33.760 --> 00:34:35.899
I still haven't jumped on the, I haven't

00:34:35.899 --> 00:34:36.399
tried that yet.

00:34:37.660 --> 00:34:38.060
neither

00:34:38.060 --> 00:34:45.659
have I it's both amazing and terrifying all at the same time but I haven't done anything it's like jumping off a

00:34:45.659 --> 00:34:47.520
cliff just do it it'll be fun for a while

00:34:49.480 --> 00:34:52.720
yeah and Ro out in the audience asks where's the stack overflow step

00:34:53.600 --> 00:34:55.240
oh yeah yeah

00:34:55.240 --> 00:35:08.740
that's got to be in there somewhere probably you're like I'm sorry I left you stack overflow I will not stray from you again I will go back and maybe you can help me get out of this probably not you just find the same answer generated by ChatGPT over there as well.

00:35:09.580 --> 00:35:09.720
All right.

00:35:10.080 --> 00:35:10.520
Stack Overflow

00:35:10.520 --> 00:35:12.200
is changing their name, right?

00:35:12.560 --> 00:35:14.580
They're going to go by training data

00:35:14.580 --> 00:35:14.940
now?

00:35:18.080 --> 00:35:18.800
Training under flow.

00:35:19.440 --> 00:35:19.560
Okay.

00:35:20.320 --> 00:35:20.560
Okay.

00:35:21.020 --> 00:35:22.420
You know what doesn't waste your time though?

00:35:23.560 --> 00:35:23.640
What?

00:35:23.700 --> 00:35:25.220
This show and us.

00:35:25.960 --> 00:35:26.480
In a good way.

00:35:27.060 --> 00:35:27.240
Yeah.

00:35:27.320 --> 00:35:27.980
So let's get out of here.

00:35:28.920 --> 00:35:29.740
Thanks everyone for listening.

00:35:30.180 --> 00:35:31.420
Thanks Brian for being here as always.

