WEBVTT

00:00:00.000 --> 00:00:10.000
Hello, everybody. Welcome to the stream. And welcome to Python Bytes. We'll just jump in.


00:00:10.000 --> 00:00:15.040
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:15.040 --> 00:00:23.120
to your earbuds. This is episode 263, recorded December 15th, 2021. And I'm Brian Okkens.


00:00:23.120 --> 00:00:25.120
I'm Michael Kennedy.


00:00:25.120 --> 00:00:27.520
And I'm Lais Carvalho.


00:00:27.520 --> 00:00:29.340
- Awesome, Lais.


00:00:29.340 --> 00:00:33.000
Before we jump in, could you tell us who you are?


00:00:33.000 --> 00:00:34.340
- Absolutely.


00:00:34.340 --> 00:00:36.240
So first of all, thank you so much for having me.


00:00:36.240 --> 00:00:37.620
Thank you for the invite.


00:00:37.620 --> 00:00:40.180
And so my name is Lais Carvalho,


00:00:40.180 --> 00:00:43.900
and I'm a developer advocate for Quantsite.


00:00:43.900 --> 00:00:47.320
And I also do a little bit of voluntary work


00:00:47.320 --> 00:00:51.520
for Python Ireland and a few other Python things


00:00:51.520 --> 00:00:53.120
around the sphere.


00:00:53.120 --> 00:00:55.060
- Nice. - Cool.


00:00:55.060 --> 00:00:56.060
That sounds really fun.


00:00:56.060 --> 00:00:59.300
The company you work for, I'm not familiar with it.


00:00:59.300 --> 00:01:00.400
What do you guys do there?


00:01:00.400 --> 00:01:03.200
It sounds a little bit like maybe Quant Finance,


00:01:03.200 --> 00:01:04.660
maybe some ML stuff.


00:01:04.660 --> 00:01:07.960
- Yeah, so we do everything.


00:01:07.960 --> 00:01:11.660
So QuantSite is a consultancy company,


00:01:11.660 --> 00:01:15.660
but we do, so basically our CEO is one of the


00:01:15.660 --> 00:01:19.660
main guys behind NumPy.


00:01:19.660 --> 00:01:24.020
And yeah, basically we do consultancy


00:01:24.020 --> 00:01:25.940
and everything you need.


00:01:25.940 --> 00:01:27.440
- Yeah, sounds fun.


00:01:27.440 --> 00:01:28.280
- Cool.


00:01:28.280 --> 00:01:30.240
- Well, Michael, let's go-- - Brian, you know


00:01:30.240 --> 00:01:31.440
what else is fun?


00:01:31.440 --> 00:01:33.240
- What is fun? - Websites.


00:01:33.240 --> 00:01:34.080
- Yeah.


00:01:34.080 --> 00:01:37.280
- Yeah, and if you think about websites,


00:01:37.280 --> 00:01:41.140
what web framework in Python is used more than Django?


00:01:41.140 --> 00:01:44.420
- Flask, maybe? - Maybe Flask.


00:01:44.420 --> 00:01:46.040
I think they're right on the boundary,


00:01:46.040 --> 00:01:48.600
but certainly Django is at the top.


00:01:48.600 --> 00:01:50.680
And I hear so many stories from people


00:01:50.680 --> 00:01:52.680
who say they got into Python


00:01:52.680 --> 00:01:53.920
not because they love Python,


00:01:53.920 --> 00:01:56.560
because they wanted to do Django.


00:01:56.560 --> 00:02:02.600
I even had a guest recently describe themselves as a Django developer who learned Python because


00:02:02.600 --> 00:02:09.440
they just wanted -- they came for the Django and they stayed for Python, which is cool.


00:02:09.440 --> 00:02:13.240
Django has been on a bit of a tear lately in terms of its speed.


00:02:13.240 --> 00:02:15.520
I actually went back and looked.


00:02:15.520 --> 00:02:20.560
If you look at a release for Django 1, that was in May 2010.


00:02:20.560 --> 00:02:25.220
2010 I think it came out before then but that's as far as the release history goes back in dates


00:02:25.220 --> 00:02:27.220
But so 1.0 was in 2010


00:02:27.220 --> 00:02:34.520
Seven years later 2.0 came out in 2017. It seems like that just happened times flying. Yeah, and then


00:02:34.520 --> 00:02:36.480
in


00:02:36.480 --> 00:02:42.600
2020 three years after two was three and then now we have Django 4.0


00:02:42.600 --> 00:02:48.820
So it's going seven years three years one years, you know, who knows so do we get like five in March?


00:02:49.340 --> 00:02:58.020
>> Exactly. Maybe, maybe, but it's cool. Django 4 is out. It's not a super huge release in


00:02:58.020 --> 00:03:02.660
terms of what's covered, but some of the highlights over there include, I think I mentioned this


00:03:02.660 --> 00:03:08.780
that it was coming, but now it is here, the new Redis cache back in. So there have been


00:03:08.780 --> 00:03:14.740
previously ways to plug in or use Redis as a cache back in inside of Django, but now


00:03:14.740 --> 00:03:20.900
Now it's just you just use Django's caching implementation and you tell it, "By the way,


00:03:20.900 --> 00:03:23.860
here's the connection string to Redis," and that happens.


00:03:23.860 --> 00:03:24.860
That's pretty cool, right?


00:03:24.860 --> 00:03:25.860
>> Yes.


00:03:25.860 --> 00:03:26.860
Yeah.


00:03:26.860 --> 00:03:31.220
>> Another thing that Django does for you is it will render forms and stuff based on


00:03:31.220 --> 00:03:35.540
various things like models and whatnot.


00:03:35.540 --> 00:03:39.860
They've changed how that works to ease customizations of forms and form sets and error lists.


00:03:39.860 --> 00:03:44.100
They are now rendered using the template engine, so you have more control over how forms and


00:03:44.100 --> 00:03:49.860
and stuff look, and some changes to do with the time zone as well.


00:03:49.860 --> 00:03:54.180
It's now using Python's time zone, so I guess it used a different one before.


00:03:54.180 --> 00:03:58.980
I never really paid that much attention to which time zone it used.


00:03:58.980 --> 00:04:06.420
So with the release of 4, 3.2 has now reached the end of mainstream support, which is interesting.


00:04:06.420 --> 00:04:09.540
And Liza, what you're going to talk about later, actually this is relevant as well,


00:04:09.540 --> 00:04:10.540
right?


00:04:10.540 --> 00:04:11.540
>> Yes.


00:04:11.540 --> 00:04:15.620
Everything you're covering talks about Django and versions and upgrades and so on.


00:04:15.620 --> 00:04:17.860
So that's it.


00:04:17.860 --> 00:04:23.020
Django 3.2 is a long-term support release, so it will receive security fixes until April


00:04:23.020 --> 00:04:26.040
24, but there's no more features coming to 3.2.


00:04:26.040 --> 00:04:30.380
All the new features and improvements and whatnot are going into 4.0.


00:04:30.380 --> 00:04:31.380
So that's pretty cool.


00:04:31.380 --> 00:04:32.380
And let's see.


00:04:32.380 --> 00:04:40.100
If you go over to the release notes, it now supports only Python 3.8 to 3.10, which I


00:04:40.100 --> 00:04:41.780
I think it's pretty cool.


00:04:41.780 --> 00:04:42.980
- That's interesting.


00:04:42.980 --> 00:04:45.680
- Yeah, that's no messing around, right?


00:04:45.680 --> 00:04:50.540
They're like, nope, we spent too long supporting 2.7.


00:04:50.540 --> 00:04:52.380
We're not doing that anymore, right?


00:04:52.380 --> 00:04:54.100
- Yeah.


00:04:54.100 --> 00:04:57.260
- Yeah, I think most frameworks


00:04:57.260 --> 00:04:58.960
are not supporting 2 anymore.


00:04:58.960 --> 00:05:01.620
- Yeah, it's really good.


00:05:01.620 --> 00:05:03.500
- There's a lot still supporting 3.7 though,


00:05:03.500 --> 00:05:06.340
so it's interesting that 3.7 is out as well.


00:05:06.340 --> 00:05:07.640
- True.


00:05:07.640 --> 00:05:09.400
- Yeah, well, they've got the 3.2 on


00:05:09.400 --> 00:05:12.600
It still supports that if you want to be on the slow burn.


00:05:12.600 --> 00:05:13.600
Let's see what else.


00:05:13.600 --> 00:05:14.600
There's a few things.


00:05:14.600 --> 00:05:16.240
I'm not going to go through it.


00:05:16.240 --> 00:05:21.280
One more highlight maybe is you can create composite indexes really easily with the unique


00:05:21.280 --> 00:05:23.020
constraint.


00:05:23.020 --> 00:05:27.720
You can have a uniqueness constraint that has the first name and the last name.


00:05:27.720 --> 00:05:31.560
You could have the same first name or the same last name as somebody in the database,


00:05:31.560 --> 00:05:33.960
but not the same first and last name.


00:05:33.960 --> 00:05:35.040
That's pretty interesting.


00:05:35.040 --> 00:05:37.600
They upgraded the password hasher to script.


00:05:37.600 --> 00:05:45.320
I have no idea what the script password hasher is, but it's more secure than the PBKDF2 hashing


00:05:45.320 --> 00:05:46.760
algorithm.


00:05:46.760 --> 00:05:50.920
You never want those to be too easy because if you can brute force guess them, that's


00:05:50.920 --> 00:05:52.240
bad news.


00:05:52.240 --> 00:05:57.360
However, if you want to be using this better password hasher, you have to enable it because


00:05:57.360 --> 00:06:04.280
it requires OpenSSL 1.1 or higher on the system.


00:06:04.280 --> 00:06:06.480
They don't assume that you have that.


00:06:06.480 --> 00:06:08.800
You've got to basically do some work to make that happen.


00:06:08.800 --> 00:06:13.240
Then there's a bunch of things about what was added, what was deprecated.


00:06:13.240 --> 00:06:21.840
Again, leading ahead, there's some backwards incompatible changes, things that are breaking


00:06:21.840 --> 00:06:22.840
changes.


00:06:22.840 --> 00:06:27.680
There's also deprecation of some features that were not previously deprecated.


00:06:27.680 --> 00:06:31.920
You want to be on top of that as well.


00:06:31.920 --> 00:06:32.920
Django 4.


00:06:32.920 --> 00:06:35.840
- Yeah, we're gonna get Django 5 in March or something,


00:06:35.840 --> 00:06:37.200
I'm guessing, right, Brian?


00:06:37.200 --> 00:06:38.040
- Yeah.


00:06:38.040 --> 00:06:41.360
- And can we take a moment to just say thank you


00:06:41.360 --> 00:06:44.960
for the amazing documentation that Django has all over?


00:06:44.960 --> 00:06:46.640
It's so good.


00:06:46.640 --> 00:06:49.920
I'm a newbie, and every time I open,


00:06:49.920 --> 00:06:51.560
I don't really use Django that much,


00:06:51.560 --> 00:06:53.400
but every time I open their documentation,


00:06:53.400 --> 00:06:55.320
sometimes I actually use their documentation


00:06:55.320 --> 00:06:58.600
to just check stuff about the web development


00:06:58.600 --> 00:07:01.000
because it's just so, so good.


00:07:01.000 --> 00:07:04.720
So thank you very much maintainers of Django documentation


00:07:04.720 --> 00:07:06.580
'cause it's really, really good.


00:07:06.580 --> 00:07:08.420
- Indeed, indeed.


00:07:08.420 --> 00:07:09.780
Sam Morley on the audience says,


00:07:09.780 --> 00:07:12.780
"I'm always impressed by how much Django managed


00:07:12.780 --> 00:07:14.120
"to cram into each release."


00:07:14.120 --> 00:07:14.960
Indeed.


00:07:14.960 --> 00:07:18.540
And Mark Pender says, "Howdy all from Ireland."


00:07:18.540 --> 00:07:19.380
- Hello.


00:07:19.380 --> 00:07:21.480
- Right on.


00:07:21.480 --> 00:07:22.360
Cool, cool.


00:07:22.360 --> 00:07:23.200
All right.


00:07:23.200 --> 00:07:25.500
Brian, what do you got?


00:07:25.500 --> 00:07:28.440
- I got Python Minifier.


00:07:28.440 --> 00:07:32.320
Actually, so this was a suggestion from Lance Rinesmith.


00:07:32.320 --> 00:07:33.960
So thanks Lance for sending it up.


00:07:33.960 --> 00:07:35.300
But he also sent some reasons.


00:07:35.300 --> 00:07:36.800
My first reaction was,


00:07:36.800 --> 00:07:39.500
we don't need a minifier for Python.


00:07:39.500 --> 00:07:41.040
What's up?


00:07:41.040 --> 00:07:43.080
This isn't Java or something.


00:07:43.080 --> 00:07:46.800
So, but he gave a couple of reasons.


00:07:46.800 --> 00:07:51.800
The docs for minifier have this sort of convoluted reason.


00:07:51.800 --> 00:07:56.240
Apparently AWS cloud formation.


00:07:56.240 --> 00:07:58.060
I don't know any of the details of this,


00:07:58.060 --> 00:08:00.980
but AWS CloudFormation templates


00:08:00.980 --> 00:08:05.020
can have AWS Lambda functions source code embedded in them,


00:08:05.020 --> 00:08:08.540
but only if they're 4K or less.


00:08:08.540 --> 00:08:10.600
So a small amount of code.


00:08:10.600 --> 00:08:13.620
So that's one of the reasons why I wrote this package.


00:08:13.620 --> 00:08:16.700
Lance, the person who sent it in,


00:08:16.700 --> 00:08:21.660
said his reason for using it is Adafruit boards,


00:08:21.660 --> 00:08:22.900
which is a cool idea.


00:08:22.900 --> 00:08:26.020
I didn't think about that with like,


00:08:26.020 --> 00:08:30.240
you know, Adafruit boards or in circuit Python,


00:08:30.240 --> 00:08:33.200
you've got less space to work with.


00:08:33.200 --> 00:08:35.920
So minifying your code might be a good idea.


00:08:35.920 --> 00:08:37.360
That's pretty cool.


00:08:37.360 --> 00:08:38.640
Decent idea.


00:08:38.640 --> 00:08:40.560
So what does this do?


00:08:40.560 --> 00:08:43.560
It's this, like, there's an example on the page


00:08:43.560 --> 00:08:45.720
of just normal Python code.


00:08:45.720 --> 00:08:50.000
It's maybe not the best Python code, but normal-ish.


00:08:50.000 --> 00:08:51.920
And then it replaces it with like, you know,


00:08:51.920 --> 00:08:54.580
or replaces the very old names with A, B, C,


00:08:54.580 --> 00:08:55.420
things like that.


00:08:55.420 --> 00:09:00.360
Some of your typical renaming things.


00:09:00.360 --> 00:09:04.040
So it has like a whole bunch of different techniques


00:09:04.040 --> 00:09:05.160
that it uses.


00:09:05.160 --> 00:09:08.160
I'm gonna go to the docs,


00:09:08.160 --> 00:09:09.800
has a combines imports.


00:09:09.800 --> 00:09:12.400
So instead of on multiple lines,


00:09:12.400 --> 00:09:15.740
you just combine them all together, saves a little space,


00:09:15.740 --> 00:09:17.640
removes passes, which is interesting.


00:09:17.640 --> 00:09:21.660
It removes them to just assigns it to zero.


00:09:21.660 --> 00:09:24.280
in a function, that's interesting.


00:09:24.280 --> 00:09:26.520
I didn't know you could do that.


00:09:26.520 --> 00:09:28.780
Hoist literals, that's an interesting thing.


00:09:28.780 --> 00:09:30.720
And that's just, if you've got a literal


00:09:30.720 --> 00:09:33.200
that's a bunch of different places,


00:09:33.200 --> 00:09:36.680
it just defines a variable and defines it at the top.


00:09:36.680 --> 00:09:38.440
Kind of interesting.


00:09:38.440 --> 00:09:41.320
- It uses a lot of semicolons, that's wild.


00:09:41.320 --> 00:09:42.160
- Yeah.


00:09:42.160 --> 00:09:45.500
Remove annotations, so type annotations,


00:09:45.500 --> 00:09:48.280
you probably don't need at runtime for something like this,


00:09:48.280 --> 00:09:49.440
so you can remove them.


00:09:50.320 --> 00:09:54.320
local renaming, a whole bunch of stuff to,


00:09:54.320 --> 00:09:57.560
and, you know, renaming globals and literals.


00:09:57.560 --> 00:10:00.360
And sometimes you, like if it's an API


00:10:00.360 --> 00:10:02.360
or if something else is using it,


00:10:02.360 --> 00:10:03.720
you don't want to rename the globals


00:10:03.720 --> 00:10:05.480
'cause those are the API.


00:10:05.480 --> 00:10:08.640
So you can turn any or all of this stuff off.


00:10:08.640 --> 00:10:10.960
I guess you wouldn't turn all of it off


00:10:10.960 --> 00:10:11.960
'cause why would you use it?


00:10:11.960 --> 00:10:14.140
But you can turn off stuff that doesn't work.


00:10:14.140 --> 00:10:16.800
So I would suggest if you're using Minify,


00:10:16.800 --> 00:10:23.400
test your code of course and remove what you need and I actually for something


00:10:23.400 --> 00:10:26.600
like a circuit Python and stuff like this might be an interesting idea


00:10:26.600 --> 00:10:32.000
I'm curious let me put out another idea about where it may be useful


00:10:32.000 --> 00:10:35.000
can you go back to the example?


00:10:35.000 --> 00:10:39.120
So just that code sample you had? Yeah. So if you look at it


00:10:39.120 --> 00:10:44.480
one of the things you often have to do and I'm not suggesting this is really a


00:10:44.480 --> 00:10:47.920
a good idea, but it could be applied this way.


00:10:47.920 --> 00:10:50.080
One of the things you have to do if you want to ship your Python


00:10:50.080 --> 00:10:52.080
code around to be used with places


00:10:52.080 --> 00:10:54.600
is to share your source code, right?


00:10:54.600 --> 00:10:57.080
And sure, you could send a PYC file,


00:10:57.080 --> 00:10:59.680
but it's basically the same thing, right?


00:10:59.680 --> 00:11:06.680
So what about if you go in here and run this against something


00:11:06.680 --> 00:11:08.960
that you want just a little bit more obfuscation?


00:11:08.960 --> 00:11:10.680
You don't want people poking around it.


00:11:10.680 --> 00:11:14.280
That definitely looks less easy to read to me.


00:11:14.280 --> 00:11:15.120
- Yeah.


00:11:15.120 --> 00:11:16.480
- I mean, it could go farther, right?


00:11:16.480 --> 00:11:20.000
It could rename like create certain and whatnot,


00:11:20.000 --> 00:11:22.140
but maybe those are like standard library things.


00:11:22.140 --> 00:11:24.940
But certainly if you're trying to obfuscate your code


00:11:24.940 --> 00:11:29.240
as well, there could be some sort of use case there.


00:11:29.240 --> 00:11:31.240
Although it's not super obfuscated, so.


00:11:31.240 --> 00:11:34.800
- Yeah, it seems like that was a Java thing.


00:11:34.800 --> 00:11:37.600
I don't even know if they do that anymore, obfuscators.


00:11:37.600 --> 00:11:39.940
- Yeah, I don't know.


00:11:39.940 --> 00:11:42.600
I haven't been in that world for a long time either.


00:11:42.600 --> 00:11:45.960
- It might help also if you're playing golf,


00:11:45.960 --> 00:11:49.700
you know, coding golf, you know, just write one of these.


00:11:49.700 --> 00:11:52.180
- Yeah, indeed.


00:11:52.180 --> 00:11:54.640
Mark says-- - What is coding golf?


00:11:54.640 --> 00:11:56.900
- Sounds like a thing that black should have,


00:11:56.900 --> 00:11:58.160
maybe a flag, yeah.


00:11:58.160 --> 00:11:59.840
- That's a terrible idea.


00:11:59.840 --> 00:12:02.400
- Yeah, I don't know what coding golf is either, Brian.


00:12:02.400 --> 00:12:03.240
- Really?


00:12:03.240 --> 00:12:04.760
Okay, so you have like a coding--


00:12:04.760 --> 00:12:05.700
- I just go to the driving range,


00:12:05.700 --> 00:12:07.360
I don't actually do any more things with golf,


00:12:07.360 --> 00:12:09.320
so I'm not very advanced.


00:12:09.320 --> 00:12:12.500
- Coding golf is like the lowest scores the best, right?


00:12:12.500 --> 00:12:17.500
in golf. So it's a coding challenges that you solve with


00:12:17.500 --> 00:12:19.740
the minimal characters.


00:12:19.740 --> 00:12:24.740
So minimal lines of code, minimal characters.


00:12:24.740 --> 00:12:27.860
And it's a, yeah, that's what coding golf is.


00:12:27.860 --> 00:12:30.860
- So you just throw the Zen of Python out of the window.


00:12:30.860 --> 00:12:35.220
- Exactly. It's not easy to read code, but.


00:12:35.220 --> 00:12:36.060
- Okay.


00:12:36.060 --> 00:12:36.880
(laughing)


00:12:36.880 --> 00:12:37.720
- Got it.


00:12:37.720 --> 00:12:39.580
- All right. Sounds fair.


00:12:41.340 --> 00:12:43.780
- May the best man win, and the best person win.


00:12:43.780 --> 00:12:45.140
- Sorry. - Indeed.


00:12:45.140 --> 00:12:47.820
- Yeah, also one of the things it does


00:12:47.820 --> 00:12:49.380
is that it doesn't advertise,


00:12:49.380 --> 00:12:51.060
is it throws away all your spaces


00:12:51.060 --> 00:12:52.460
and replaces them with tabs.


00:12:52.460 --> 00:12:55.620
- Oh, interesting.


00:12:55.620 --> 00:12:58.500
Yeah, it does look very tab-filled in the--


00:12:58.500 --> 00:12:59.340
- Well, it makes sense.


00:12:59.340 --> 00:13:01.660
You know, four spaces versus one tab.


00:13:01.660 --> 00:13:04.300
It's a 4X reduction right there, so.


00:13:04.300 --> 00:13:05.140
- Yep.


00:13:05.140 --> 00:13:08.820
Sam says, "Lias, you're in for a treat.


00:13:08.820 --> 00:13:11.880
CodeGolf Stack Exchange is fascinating.


00:13:11.880 --> 00:13:13.940
(laughing)


00:13:13.940 --> 00:13:15.320
- I can only imagine.


00:13:15.320 --> 00:13:18.500
- Indeed.


00:13:18.500 --> 00:13:22.280
All right, well, your topic is up next.


00:13:22.280 --> 00:13:24.180
This is the one I was alluding to earlier,


00:13:24.180 --> 00:13:27.340
talking about Django and support for old things and so on.


00:13:27.340 --> 00:13:29.140
- Yes, yes, indeed.


00:13:29.140 --> 00:13:30.740
And thank you so much for the tip as well.


00:13:30.740 --> 00:13:35.020
So then this is, it's time to stop using Python 3.6.


00:13:35.020 --> 00:13:37.480
So in one week and one day,


00:13:37.480 --> 00:13:42.480
Python is dropping support for Python 3.6.


00:13:42.480 --> 00:13:47.220
So there's not gonna be any more releases after that.


00:13:47.220 --> 00:13:52.000
So basically, well, you should update Python.


00:13:52.000 --> 00:13:57.920
If you are using Ubuntu,


00:13:57.920 --> 00:14:00.680
then you can say, well,


00:14:00.680 --> 00:14:03.560
I don't really have to update right now


00:14:03.560 --> 00:14:08.560
because Ubuntu has long-time support,


00:14:08.560 --> 00:14:11.840
but it doesn't necessarily work like that


00:14:11.840 --> 00:14:16.120
because the Python dev team is not gonna support


00:14:16.120 --> 00:14:21.120
your Python 3.6 anymore, which basically means that--


00:14:21.120 --> 00:14:22.920
- Yeah, that's what we were just talking about


00:14:22.920 --> 00:14:23.920
with Django, right?


00:14:23.920 --> 00:14:26.800
Just because you might be on an LTS version of Ubuntu


00:14:26.800 --> 00:14:29.300
that will still let you use 3.6,


00:14:29.300 --> 00:14:31.040
well, you're gonna have to give up all the new libraries


00:14:31.040 --> 00:14:35.200
like so long to Django 4.0 and probably FastAPI


00:14:35.200 --> 00:14:37.240
and all the things, right?


00:14:37.240 --> 00:14:38.740
- Yes, exactly.


00:14:38.740 --> 00:14:41.880
So you have your dependencies that are gonna need


00:14:41.880 --> 00:14:43.120
to be updated anyhow.


00:14:43.120 --> 00:14:45.080
So you should update.


00:14:45.080 --> 00:14:46.600
But then I have a question.


00:14:46.600 --> 00:14:50.560
So Noopy here, I looked around


00:14:50.560 --> 00:14:52.360
when we were preparing the notes for the show,


00:14:52.360 --> 00:14:54.200
I looked around and I tried to,


00:14:54.200 --> 00:14:57.280
'cause I'm using 3.7, so I'm still okay.


00:14:57.280 --> 00:14:59.720
But I was looking,


00:14:59.720 --> 00:15:02.600
I wanted to try the 3.10 new stuff


00:15:02.600 --> 00:15:05.500
because I listened to a few podcasts ago


00:15:05.500 --> 00:15:09.960
and you were talking about the wonders of Python 3.10.


00:15:09.960 --> 00:15:12.200
And I was like, okay, so let's update.


00:15:12.200 --> 00:15:16.420
But then I couldn't find the best way to update from 3.7


00:15:16.420 --> 00:15:20.560
or let's say 3.6 to 3.10.


00:15:20.560 --> 00:15:22.400
I saw some people saying that it would be better


00:15:22.400 --> 00:15:24.560
to just update gradually.


00:15:24.560 --> 00:15:29.200
So go from 3.6, 3.7, 3.8, 3.9, and then 3.10,


00:15:29.200 --> 00:15:31.820
'cause you could fix the dependencies easier like that.


00:15:31.820 --> 00:15:33.140
But then some other people just say,


00:15:33.140 --> 00:15:34.940
just go straight to the version you want


00:15:34.940 --> 00:15:37.060
and then just deal with the problem when you get there.


00:15:37.060 --> 00:15:38.340
- Just rip the bandaid off.


00:15:38.340 --> 00:15:39.180
Yeah, I don't know.


00:15:39.180 --> 00:15:40.540
- I'm with Brian too.


00:15:40.540 --> 00:15:44.320
Go as far ahead as you can and then see if it works.


00:15:44.320 --> 00:15:46.340
- All right.


00:15:46.340 --> 00:15:48.500
So just go 310 straight away.


00:15:48.500 --> 00:15:49.980
Okay, cool. - That's what I would say.


00:15:49.980 --> 00:15:51.740
But the question is still open.


00:15:51.740 --> 00:15:53.740
How do you do that?


00:15:53.740 --> 00:15:55.180
Right?


00:15:55.180 --> 00:15:57.700
It depends, I think, on what OS you're on.


00:15:57.700 --> 00:16:05.420
For example, on Ubuntu, 3.9 is really about as far as you're going to get without some


00:16:05.420 --> 00:16:06.420
jumping around.


00:16:06.420 --> 00:16:09.900
That's the latest Python 3 that it'll give you.


00:16:09.900 --> 00:16:14.740
On Mac, you only have two, so you got to install something, but you could download the installer


00:16:14.740 --> 00:16:15.840
from python.org.


00:16:15.840 --> 00:16:18.780
You could homebrew it, or you could do other things.


00:16:18.780 --> 00:16:22.820
You could do pyenv like Brandon Brenner out in the audience has suggested.


00:16:22.820 --> 00:16:23.820
I got started with pyenv.


00:16:23.820 --> 00:16:28.920
It makes this kind of thing trivial, true, except for I can't get it to work on my Mac.


00:16:28.920 --> 00:16:33.960
Maybe it's an M1 thing or an Apple Silicon thing, but it just won't install anything.


00:16:33.960 --> 00:16:41.100
So it's not trivial for me, but when it works, you can just say, "Pyenv, give me 3.6."


00:16:41.100 --> 00:16:45.140
You can be very specific, like, "Give me Python 3.11 RC2.


00:16:45.140 --> 00:16:47.140
I want that one."


00:16:47.140 --> 00:16:49.100
And it'll put them all side by side.


00:16:49.100 --> 00:16:51.460
So what do you think, Brian?


00:16:51.460 --> 00:16:54.580
I think I'm on Pioneer V now,


00:16:54.580 --> 00:16:59.140
but it's because I test a lot of things.


00:16:59.140 --> 00:17:03.840
For normal people that have an application and they just want to upgrade.


00:17:03.840 --> 00:17:09.000
I say, unless you're on Ubuntu or Linux,


00:17:09.000 --> 00:17:14.360
I say just go to python.org and download the latest one and install it.


00:17:14.360 --> 00:17:16.920
It works on Windows and Mac usually.


00:17:16.920 --> 00:17:19.600
On Windows, there's the Windows installer.


00:17:19.600 --> 00:17:22.480
you can go to the Windows store, that works.


00:17:22.480 --> 00:17:26.680
But the Python.org one works good too.


00:17:26.680 --> 00:17:28.200
Usually.


00:17:28.200 --> 00:17:28.920
>> Yeah.


00:17:28.920 --> 00:17:29.320
>> All right.


00:17:29.320 --> 00:17:30.280
>> Yeah, indeed.


00:17:30.280 --> 00:17:34.520
>> Of course, I'll try and I'll let you know how it goes on Twitter.


00:17:34.520 --> 00:17:37.440
>> That's hard for what you've made a friend for.


00:17:37.440 --> 00:17:41.040
>> Yes. Because I threw the question on Twitter as well,


00:17:41.040 --> 00:17:42.560
and then I got a bunch of people saying,


00:17:42.560 --> 00:17:43.600
"No, don't go through 10,


00:17:43.600 --> 00:17:46.040
yes, it's not great for production, go through nine."


00:17:46.040 --> 00:17:47.200
Then other people just saying, "No,


00:17:47.200 --> 00:17:49.200
just rip the band-aid as you think."


00:17:49.200 --> 00:17:52.200
- The Aken doctrine.


00:17:52.200 --> 00:17:55.900
- I mean, I only support little tiny projects though.


00:17:55.900 --> 00:18:00.300
So in Python, I support big things in C++,


00:18:00.300 --> 00:18:04.720
but I would run your tests, you know,


00:18:04.720 --> 00:18:06.980
upgrade, run the tests, make sure everything works.


00:18:06.980 --> 00:18:09.500
- Yeah, oh, well, as your conversation's got


00:18:09.500 --> 00:18:11.380
a whole bunch of stuff going off in the audience here.


00:18:11.380 --> 00:18:14.100
Alvaro says NumPy is dropping support for 3.7


00:18:14.100 --> 00:18:16.040
sometime this month, so that should push


00:18:16.040 --> 00:18:19.560
the data science community to update.


00:18:19.560 --> 00:18:24.560
And then also on Ubuntu, you can install the dead snakes PPA


00:18:24.560 --> 00:18:29.320
and you'll get now versions of the latest version of Python.


00:18:29.320 --> 00:18:30.280
Okay, that's interesting.


00:18:30.280 --> 00:18:33.640
- Yes, I saw the dead snakes PPA, yes, indeed.


00:18:33.640 --> 00:18:36.920
And I saw that in Ubuntu that's really easy to do it,


00:18:36.920 --> 00:18:41.320
but still you can find tutorials saying go gradually


00:18:41.320 --> 00:18:43.920
and then in other tutorials, you say just go straight in.


00:18:43.920 --> 00:18:47.380
- Yeah, Sam says just compile from source every time.


00:18:47.380 --> 00:18:48.220
That's what I do.


00:18:48.220 --> 00:18:49.060
That's what I'm doing in production,


00:18:49.060 --> 00:18:51.100
but I'm doing homebrew on my Mac.


00:18:51.100 --> 00:18:52.660
All right, maybe that's enough.


00:18:52.660 --> 00:18:54.700
How do I get the latest version of Python?


00:18:54.700 --> 00:18:56.940
(laughing)


00:18:56.940 --> 00:19:00.420
You were gonna make a comment about Java, is that right?


00:19:00.420 --> 00:19:02.420
- Oh, yes, yes, that's true.


00:19:02.420 --> 00:19:06.900
So, 'cause I saw, I was doing a little bit of research


00:19:06.900 --> 00:19:11.500
for this, and then there was a little bit of a discussion


00:19:11.500 --> 00:19:15.520
of the third-party libraries and the frameworks


00:19:15.520 --> 00:19:18.240
that will drop support for 3.6 soon enough


00:19:18.240 --> 00:19:20.440
as Alvaro just mentioned.


00:19:20.440 --> 00:19:23.760
So then I saw on Twitter,


00:19:23.760 --> 00:19:27.840
someone mentioning, let me put it here,


00:19:27.840 --> 00:19:32.840
that using the Java, the new log4j problem,


00:19:32.840 --> 00:19:35.580
let's put it like that.


00:19:35.580 --> 00:19:40.140
- Log4j, this is so bad.


00:19:40.140 --> 00:19:40.980
- Yes.


00:19:40.980 --> 00:19:46.060
- Yeah, so using it as an example for how,


00:19:46.060 --> 00:19:48.700
like you should upgrade your version,


00:19:48.700 --> 00:19:51.660
the version of the programming language you're using.


00:19:51.660 --> 00:19:55.300
And then they talk about, yeah,


00:19:55.300 --> 00:19:59.020
so they say that you should upgrade as soon as you can.


00:19:59.020 --> 00:20:02.060
- Yeah, what an interesting example they gave


00:20:02.060 --> 00:20:04.520
because this log for shell thing


00:20:04.520 --> 00:20:07.460
that I'm gonna actually talk about a little bit later.


00:20:07.460 --> 00:20:09.940
But the problem is you have to upgrade log for J


00:20:09.940 --> 00:20:11.500
to a patched version.


00:20:11.500 --> 00:20:14.020
The patched version only works on Java 8.


00:20:14.020 --> 00:20:18.780
If you've been dragging your feet, in a sense, and staying on an old version of Java, now


00:20:18.780 --> 00:20:22.900
all of a sudden it's not just replace a library, it's completely upgrade the Java you're running


00:20:22.900 --> 00:20:23.900
on.


00:20:23.900 --> 00:20:26.740
If you were dragging your feet that hard, there's probably some kind of reason that


00:20:26.740 --> 00:20:30.300
it's a pain and not well-maintained or something.


00:20:30.300 --> 00:20:34.820
Instead of just going, "Oh, we got to quick fix this problem because it's a super big


00:20:34.820 --> 00:20:38.580
deal," now all of a sudden you've got to do a major upgrade when you weren't planning


00:20:38.580 --> 00:20:39.580
on it.


00:20:39.580 --> 00:20:40.420
- Yeah.


00:20:40.420 --> 00:20:43.280
- And then you have to have this meme,


00:20:43.280 --> 00:20:45.820
of this wonderful meme.


00:20:45.820 --> 00:20:48.800
- Your next task, this is from the squid game,


00:20:48.800 --> 00:20:51.560
your next task is to figure out which applications


00:20:51.560 --> 00:20:53.860
in your organization is using log4j.


00:20:53.860 --> 00:20:56.180
- Dun dun dun.


00:20:56.180 --> 00:20:57.640
- You have 10 minutes.


00:20:57.640 --> 00:20:59.720
(laughing)


00:20:59.720 --> 00:21:00.560
- Go.


00:21:00.560 --> 00:21:02.240
(laughing)


00:21:02.240 --> 00:21:03.300
- Oh, that's good.


00:21:03.300 --> 00:21:04.500
I didn't catch any meme.


00:21:06.820 --> 00:21:10.180
Yes, so then I think my code did, you know?


00:21:10.180 --> 00:21:13.220
It is, it is awesome.


00:21:13.220 --> 00:21:15.300
Well, yeah, thanks for highlighting that article.


00:21:15.300 --> 00:21:17.980
That's a good one by Itamar Traor-Turning,


00:21:17.980 --> 00:21:20.220
Turning, Traor, Traor-Turning, yes.


00:21:20.220 --> 00:21:23.820
Okay, so what do I got next here?


00:21:23.820 --> 00:21:28.140
Horus, Django, but something fun.


00:21:28.140 --> 00:21:32.260
We just had what was probably the most contentious


00:21:32.260 --> 00:21:37.820
Formula One season in 10 years at least.


00:21:37.820 --> 00:21:41.820
One of the most wild ones for sure.


00:21:41.820 --> 00:21:48.340
The championship was decided on the final lap of the final race.


00:21:48.340 --> 00:21:52.740
Literally the two people who were contending for it, Hamilton and Verstappen, they were


00:21:52.740 --> 00:21:56.100
literally tied on points going into the final one.


00:21:56.100 --> 00:21:58.500
The final move was done on the final lap.


00:21:58.500 --> 00:22:03.860
I wanted to highlight this article here called, "How to Visualize the Formula 1 Championship


00:22:03.860 --> 00:22:10.140
in Python Using the AirGaST API in Seaborn."


00:22:10.140 --> 00:22:15.120
For people who are in data science, I know if you're learning it, one of the challenges


00:22:15.120 --> 00:22:20.340
I have of learning those tools is I don't have a great professional need for them.


00:22:20.340 --> 00:22:24.340
I don't use that kind of stuff to analyze data that I work with that frequently.


00:22:24.340 --> 00:22:29.880
My chance to learn Seaborn, for example, is pretty limited.


00:22:29.880 --> 00:22:35.900
Finding some example or some fun project you can do, that turns out to be super important.


00:22:35.900 --> 00:22:40.180
I thought I'd pull this up as something people could do to learn to play with this kind of


00:22:40.180 --> 00:22:41.180
data.


00:22:41.180 --> 00:22:49.140
If you're not yet into this stuff, check out the Drive to Survive, season three.


00:22:49.140 --> 00:22:50.820
I think I got the wrong link here.


00:22:50.820 --> 00:22:56.140
I put the trailer to it in the show notes.


00:22:56.140 --> 00:23:01.580
Netflix did a great series that is really good for people to get into it.


00:23:01.580 --> 00:23:08.180
Also, there's an eight-minute highlight of the last race, which was absolutely crazy.


00:23:08.180 --> 00:23:12.780
What I want to talk about is some cool stuff that Jasper, just goes by Jasper, no last


00:23:12.780 --> 00:23:17.580
name, over on Medium.


00:23:17.580 --> 00:23:22.280
This is this thing called the AirGAST API, which if you go over there, it's looking a


00:23:22.280 --> 00:23:28.440
little old school, but not very restful, for example.


00:23:28.440 --> 00:23:37.000
For example, you can come over and we could get details about the third race of the 2008


00:23:37.000 --> 00:23:41.320
season by just going API F1 2008-3.


00:23:41.320 --> 00:23:48.080
It's going to come back with a series of tables, which is not necessarily that useful.


00:23:48.080 --> 00:23:53.120
I thought the way you get the JSON, you might do an accept application/JSON type and not


00:23:53.120 --> 00:23:58.400
HTML or something, but no, you say 3.json.


00:23:58.400 --> 00:24:01.840
That gives you the API there.


00:24:01.840 --> 00:24:02.840
That's pretty cool.


00:24:02.840 --> 00:24:09.600
You come through here and basically they talk about how to use Pandas, NumPys, Seaborn,


00:24:09.600 --> 00:24:14.440
that API to just build some cool graphs that actually show you the position of all the


00:24:14.440 --> 00:24:18.960
drivers across the entire season.


00:24:18.960 --> 00:24:23.800
If you want to build this picture, you see right at the top of the article, play around


00:24:23.800 --> 00:24:29.920
with that data from that API, then this is the way to do it.


00:24:29.920 --> 00:24:33.560
One other thing that's pretty interesting from this article that I had no idea about


00:24:33.560 --> 00:24:44.000
is over on PyPI. We have fast F1 as a package, which is a wrapper library for F1 data and


00:24:44.000 --> 00:24:49.160
telemetry APIs with additional data processing capabilities. That's pretty cool.


00:24:49.160 --> 00:24:52.520
>> Yeah. >> Yeah. So you go down here and like, they'll


00:24:52.520 --> 00:24:59.480
show you how to build this really cool graph of like lap by lap, the times, the various


00:24:59.480 --> 00:25:03.240
drivers you can see in the beginning like there's all sorts of chaos because


00:25:03.240 --> 00:25:07.600
there's people jockeying for position the cars are heavy they're full of fuel


00:25:07.600 --> 00:25:12.200
so they go slower you sort of see as as things spread out as the cars lighten up


00:25:12.200 --> 00:25:16.040
and stuff because they burn up 100 kilograms of fuel then they all kind of


00:25:16.040 --> 00:25:19.440
get faster and better times so you can get like cool graphs and exploration of


00:25:19.440 --> 00:25:22.560
all this stuff here and the way you do it is really interesting as you just go


00:25:22.560 --> 00:25:28.040
over to this fast f1 and you enable the cache because it downloads some stuff


00:25:28.040 --> 00:25:29.920
You don't want to have to download it twice.


00:25:29.920 --> 00:25:31.680
You can say, give me this season, this Grand Prix,


00:25:31.680 --> 00:25:33.680
give me the race details, load up the laps,


00:25:33.680 --> 00:25:35.560
and then you can start just working with the data


00:25:35.560 --> 00:25:36.680
in this really interesting way.


00:25:36.680 --> 00:25:38.120
So if I was into data science


00:25:38.120 --> 00:25:39.760
and I wanted to learn some stuff,


00:25:39.760 --> 00:25:42.360
this might be a really cool real world data set


00:25:42.360 --> 00:25:44.120
that you can play with.


00:25:44.120 --> 00:25:45.760
What do y'all think?


00:25:45.760 --> 00:25:46.600
- I like it.


00:25:46.600 --> 00:25:49.840
I think I might actually try to know more about Formula One


00:25:49.840 --> 00:25:53.040
just so that I can talk with Anthony more.


00:25:53.040 --> 00:25:54.280
- Exactly.


00:25:54.280 --> 00:25:55.960
Anthony Shaw's a big fan.


00:25:55.960 --> 00:25:57.440
Yeah.


00:25:57.440 --> 00:26:02.480
Indeed. As am I these days. It's a lot of fun. It was really a cool season this year.


00:26:02.480 --> 00:26:07.840
And yeah, check out the highlights from the last race. It was absolutely off the hook.


00:26:07.840 --> 00:26:12.960
What do you think of the terms of a data science project here?


00:26:12.960 --> 00:26:19.120
A data science project? Wonderful. Like, especially if you actually like this. I have


00:26:19.120 --> 00:26:25.280
no knowledge on F1. I actually worked for a company that was like the, I think the founders


00:26:25.280 --> 00:26:30.960
of the company were in love with F1 and that's how they got together to found the company.


00:26:30.960 --> 00:26:39.720
And I got to talk to them and like a one specific circumstance. It was like, oh, you like F1?


00:26:39.720 --> 00:26:44.320
That's awesome. I know nothing about it. So, please enlighten me.


00:26:44.320 --> 00:26:50.640
>> If you're interested, check out the Netflix Drive to Survive series. That's the easy way


00:26:50.640 --> 00:26:54.600
in. Lots of drama. Not like the boring sort of 30 minutes in between the things that actually


00:26:54.600 --> 00:27:00.200
happen version. What some of the people from the US don't understand is that they can turn


00:27:00.200 --> 00:27:08.040
in two directions. That's odd. However, Brian, just before we're off this, the US Grand Prix


00:27:08.040 --> 00:27:15.880
for the first time, I think was the most attended race ever, certainly for F1, but maybe 400,000


00:27:15.880 --> 00:27:21.320
attendees in Austin, Texas this year. So apparently it's becoming a thing like soccer became a thing


00:27:21.320 --> 00:27:22.760
thing in the US when it didn't used to be.


00:27:22.760 --> 00:27:23.880
And now it is.


00:27:23.880 --> 00:27:25.720
I think this is as well.


00:27:25.720 --> 00:27:26.560
All right.


00:27:26.560 --> 00:27:29.520
Alvaro also says, interesting, about interesting libraries.


00:27:29.520 --> 00:27:31.800
Last week I found DuckDB super interesting


00:27:31.800 --> 00:27:32.880
for data science as well.


00:27:32.880 --> 00:27:33.720
Yeah, definitely.


00:27:33.720 --> 00:27:35.520
We've only touched on that a little bit,


00:27:35.520 --> 00:27:36.760
but yeah, it's a great one.


00:27:36.760 --> 00:27:37.600
- Yeah.


00:27:37.600 --> 00:27:40.680
- DuckDB is like a new database,


00:27:40.680 --> 00:27:42.880
like, I don't know, CockroachDB?


00:27:42.880 --> 00:27:46.940
- A different, but I believe it has integration


00:27:46.940 --> 00:27:48.660
with like pandas and stuff.


00:27:49.680 --> 00:27:53.520
if I recall correctly, I'll have to look it up, but yeah.


00:27:53.520 --> 00:27:59.720
I'll do some real time followup, but Brian, tell us about NBDIME.


00:27:59.720 --> 00:28:02.600
NBDIME. So, a,


00:28:02.600 --> 00:28:07.440
another listener suggestion, Henrik Frinsberg, cool last name.


00:28:07.440 --> 00:28:12.000
he's, he said, we recently covered Jute,


00:28:12.000 --> 00:28:16.720
or Jut, Jupyter notebook. yeah, Jupyter notebook,


00:28:16.720 --> 00:28:20.460
Terminal Viewer, we covered that in episode 258.


00:28:20.460 --> 00:28:22.000
He's correct, but he said,


00:28:22.000 --> 00:28:24.200
"Hey, you should check out MB Dime,


00:28:24.200 --> 00:28:27.040
so because it's been around for a long time


00:28:27.040 --> 00:28:28.840
and it does something similar."


00:28:28.840 --> 00:28:30.120
So I definitely did.


00:28:30.120 --> 00:28:33.560
And I think this is a really cool, a cool set of tools.


00:28:33.560 --> 00:28:36.760
So we've got, not only does it do an MB show,


00:28:36.760 --> 00:28:37.600
which does a-


00:28:37.600 --> 00:28:39.160
- Right, that's the JOOT equivalent


00:28:39.160 --> 00:28:41.320
is the MB show, which is cool.


00:28:41.320 --> 00:28:43.600
- Yeah, but it's, this is a set of tools


00:28:43.600 --> 00:28:48.340
that is around the needs for diffing and merging notebooks.


00:28:48.340 --> 00:28:51.800
So like if you're keeping notebooks in a Git repo,


00:28:51.800 --> 00:28:54.540
you'll have to do things like this.


00:28:54.540 --> 00:28:57.920
And so one of the, it's got a bunch of tools.


00:28:57.920 --> 00:29:00.560
It's got diff, it's got merge, it's got diff web.


00:29:00.560 --> 00:29:05.560
So you can have a rich rendered diff of the notebook


00:29:05.560 --> 00:29:07.600
and in the merge web.


00:29:07.600 --> 00:29:12.060
So web three-way web-based merge of notebook tools.


00:29:12.060 --> 00:29:13.360
This just looks really cool.


00:29:13.360 --> 00:29:15.720
and I definitely think it's worth checking out.


00:29:15.720 --> 00:29:18.760
If you work with notebooks and work with teams,


00:29:18.760 --> 00:29:20.680
you need to do things like this.


00:29:20.680 --> 00:29:22.080
- Oh yeah, this looks great.


00:29:22.080 --> 00:29:27.520
Yeah, diffing and merging notebooks is tricky for sure,


00:29:27.520 --> 00:29:30.880
because the actual on-disk representation


00:29:30.880 --> 00:29:33.200
is basically a JSON document,


00:29:33.200 --> 00:29:38.040
and then it embeds the output in there as well, right?


00:29:38.040 --> 00:29:39.880
So if you ran it against live data


00:29:39.880 --> 00:29:41.240
and you got some output and you run it again,


00:29:41.240 --> 00:29:42.280
of course that's gonna be different,


00:29:42.280 --> 00:29:45.440
but that's a straight get, that's a merge conflict, right?


00:29:45.440 --> 00:29:48.440
- Yeah, I'd be interested to know how they deal with that.


00:29:48.440 --> 00:29:50.960
I haven't looked through this, but you'd probably--


00:29:50.960 --> 00:29:53.560
- Yeah, it looks like it understands the cells


00:29:53.560 --> 00:29:55.560
and then just the cells or something along those lines.


00:29:55.560 --> 00:29:56.640
- Yeah, probably.


00:29:56.640 --> 00:30:00.800
So here-- - Yeah, that is super cool.


00:30:00.800 --> 00:30:01.760
- Yeah, this is a great one.


00:30:01.760 --> 00:30:04.520
Thanks for the recommendation as well.


00:30:04.520 --> 00:30:07.160
All right, Lais, you're up next.


00:30:07.160 --> 00:30:11.440
- Yes, so we found out,


00:30:11.440 --> 00:30:13.920
- Oh, so first of all, this is a recommendation


00:30:13.920 --> 00:30:14.760
from Fridolin.


00:30:14.760 --> 00:30:18.720
He works, he's a software developer at Red Hat,


00:30:18.720 --> 00:30:20.840
so thank you very much for the suggestion.


00:30:20.840 --> 00:30:24.640
And this is Project Doth.


00:30:24.640 --> 00:30:28.080
So basically, this is an open source,


00:30:28.080 --> 00:30:31.000
cloud-based Python dependency resolver.


00:30:31.000 --> 00:30:35.240
So we all know that PyPy just launched


00:30:35.240 --> 00:30:38.620
a new dependencies resolver.


00:30:38.620 --> 00:30:40.680
- Yeah, that was a big deal.


00:30:40.680 --> 00:30:44.680
There were some breaking changes to pip and stuff like that.


00:30:44.680 --> 00:30:45.520
- Yes.


00:30:45.520 --> 00:30:48.120
And well, show the first stone


00:30:48.120 --> 00:30:53.120
who never had dependency resolving issues with PIP.


00:30:53.120 --> 00:30:56.080
Please, I've spent so much time like,


00:30:56.080 --> 00:30:58.640
okay, so it's not this library, it's this other one.


00:30:58.640 --> 00:31:00.640
No, it's not this version, it's this other one.


00:31:00.640 --> 00:31:04.800
So this project dot basically comes to solve this issue


00:31:04.800 --> 00:31:07.480
and it uses reinforcement learning


00:31:07.480 --> 00:31:10.660
to solve these dependency issues.


00:31:10.660 --> 00:31:15.660
So basically from what I understood, it's a smarter PIP.


00:31:15.660 --> 00:31:20.940
So basically it uses a few inputs from the developer


00:31:20.940 --> 00:31:26.100
such as like the speed of the execution of the code


00:31:26.100 --> 00:31:29.260
and if there was any errors


00:31:29.260 --> 00:31:32.380
and your hard drive version, et cetera.


00:31:32.380 --> 00:31:35.340
- It's not just what version do you want


00:31:35.340 --> 00:31:37.160
like greater than 2.1, but you could say,


00:31:37.160 --> 00:31:39.540
I would like one that's relatively stable


00:31:39.540 --> 00:31:43.380
or I would prefer security over recency


00:31:43.380 --> 00:31:44.980
or something along those lines.


00:31:44.980 --> 00:31:46.900
There's a lot of different inputs


00:31:46.900 --> 00:31:48.620
to this machine learning model


00:31:48.620 --> 00:31:50.180
that then will give you the result


00:31:50.180 --> 00:31:52.020
of like pip install a thing.


00:31:52.020 --> 00:31:54.580
- Yes, and then it pre-computes


00:31:54.580 --> 00:31:56.820
this whole dependency information


00:31:56.820 --> 00:31:58.300
and puts in a database


00:31:58.300 --> 00:32:00.380
and then it just keeps track of it.


00:32:00.380 --> 00:32:03.260
And then the logs that result from


00:32:03.260 --> 00:32:05.580
like actually installing the dependencies


00:32:05.580 --> 00:32:06.540
of that environment,


00:32:07.540 --> 00:32:11.060
then I use to go into as input


00:32:11.060 --> 00:32:13.940
into the reinforcement learning algorithm.


00:32:13.940 --> 00:32:18.380
And they use that then to create future resolutions.


00:32:18.380 --> 00:32:20.380
So basically just make the whole process


00:32:20.380 --> 00:32:24.420
of dependency resolving much faster and much easier.


00:32:24.420 --> 00:32:29.860
It sounds like a great thing and I tried testing,


00:32:29.860 --> 00:32:34.860
but well, I got it to a little bit of an issue


00:32:34.860 --> 00:32:36.580
with my Python versions.


00:32:36.580 --> 00:32:39.080
I was like, "Oh, I'll deal with all of this later."


00:32:39.080 --> 00:32:40.220
- Yeah, exactly.


00:32:40.220 --> 00:32:41.900
Can you scroll down to the code sample


00:32:41.900 --> 00:32:44.220
where it's talking about TAMOS or Thamos?


00:32:44.220 --> 00:32:45.940
I don't remember the term exactly.


00:32:45.940 --> 00:32:47.760
It's a little further down.


00:32:47.760 --> 00:32:49.460
It's like a code call out.


00:32:49.460 --> 00:32:51.900
Keep going, keep going.


00:32:51.900 --> 00:32:53.380
- Yes, here. - Right there.


00:32:53.380 --> 00:32:55.020
So yeah, so the way you can use it


00:32:55.020 --> 00:32:57.740
is you pip install this Thamos thing


00:32:57.740 --> 00:32:59.620
and then you configure environment


00:32:59.620 --> 00:33:03.900
and then you add dependencies with some suggested version,


00:33:03.900 --> 00:33:05.720
like approximately Flask one.


00:33:05.720 --> 00:33:10.720
And then you ask it to advise you on your current setup.


00:33:10.720 --> 00:33:14.100
It'll go through and it actually analyzes the code


00:33:14.100 --> 00:33:15.160
and does a whole bunch of stuff,


00:33:15.160 --> 00:33:19.900
and then it'll give you some information.


00:33:19.900 --> 00:33:21.260
I don't remember exactly all the details


00:33:21.260 --> 00:33:23.120
of what it would suggest,


00:33:23.120 --> 00:33:25.340
but it'll give you information about


00:33:25.340 --> 00:33:28.180
the various dependencies that you have installed and on.


00:33:28.180 --> 00:33:29.020
So, pretty cool.


00:33:29.020 --> 00:33:31.140
- And also give you suggestions on hardware


00:33:31.140 --> 00:33:33.260
and OS versions that you should be using.


00:33:33.260 --> 00:33:36.300
And it's quite smart.


00:33:36.300 --> 00:33:37.420
I thought it was quite interesting.


00:33:37.420 --> 00:33:40.240
And it's in beta phase.


00:33:40.240 --> 00:33:44.260
So if anyone that is listening would like to try it


00:33:44.260 --> 00:33:48.700
and then maybe just give some feedback back to Red Hat,


00:33:48.700 --> 00:33:51.060
they'll be very, very, very happy to hear


00:33:51.060 --> 00:33:52.500
from the community as well.


00:33:52.500 --> 00:33:54.100
'Cause it's an open source project.


00:33:54.100 --> 00:33:56.100
So please, collaborate.


00:33:56.100 --> 00:33:57.420
- Check it out.


00:33:57.420 --> 00:33:59.940
Looks like it might have something to do with OpenStack


00:33:59.940 --> 00:34:02.900
and their whole cloud story over there as well.


00:34:02.900 --> 00:34:05.620
although I don't believe it explicitly said it.


00:34:05.620 --> 00:34:06.820
It doesn't seem to be tied to it,


00:34:06.820 --> 00:34:08.780
but it seems maybe motivated by that as well.


00:34:08.780 --> 00:34:10.940
So, yeah, cool. That's a good one.


00:34:10.940 --> 00:34:15.060
Brian, some real-time feedback here.


00:34:15.060 --> 00:34:17.740
So, we covered this article,


00:34:17.740 --> 00:34:21.140
Efficient SQL on Pandas with DuckDB,


00:34:21.140 --> 00:34:24.220
and one of the cool things you could do


00:34:24.220 --> 00:34:26.620
is create a Pandas data frame


00:34:26.620 --> 00:34:31.100
and then do select queries on top of the data frame.


00:34:31.100 --> 00:34:34.020
- That's pretty cool.


00:34:34.020 --> 00:34:37.860
- Yeah, so for example, remember you have like a local


00:34:37.860 --> 00:34:39.740
variable and you say the name of the local variable


00:34:39.740 --> 00:34:43.180
and the query and it like reaches into the call stack


00:34:43.180 --> 00:34:47.160
and grabs that out of the context and then works with it.


00:34:47.160 --> 00:34:50.480
So yeah, anyway, this is one of the data science-y things.


00:34:50.480 --> 00:34:53.320
- Nice.


00:34:53.320 --> 00:34:54.160
- Yep.


00:34:54.160 --> 00:34:54.980
- Fun.


00:34:54.980 --> 00:34:57.740
- Right, is that it for all of our items?


00:34:57.740 --> 00:34:59.300
- I think it is, yeah.


00:34:59.300 --> 00:35:00.700
- I think you might be right.


00:35:00.700 --> 00:35:03.540
>> Well, what about the extras? You got any?


00:35:03.540 --> 00:35:07.200
>> I do. Actually, nice timing for today.


00:35:07.200 --> 00:35:10.040
So Pragmatic Bookshelf,


00:35:10.040 --> 00:35:11.960
they're the publishers of the Playtests book.


00:35:11.960 --> 00:35:13.760
They're running a sale,


00:35:13.760 --> 00:35:16.420
actually 12 days of Christmas sale.


00:35:16.420 --> 00:35:18.460
So every day it's something different.


00:35:18.460 --> 00:35:19.880
You don't know what it is,


00:35:19.880 --> 00:35:21.140
I don't know what it is,


00:35:21.140 --> 00:35:24.020
but today, my book is part of it.


00:35:24.020 --> 00:35:27.780
So you have to enter a promo code and you get


00:35:27.780 --> 00:35:31.900
50% off $50 spend.


00:35:31.900 --> 00:35:33.700
So you gotta order a couple books


00:35:33.700 --> 00:35:35.940
'cause they're not that expensive.


00:35:35.940 --> 00:35:37.500
But anyway, that's pretty cool.


00:35:37.500 --> 00:35:38.340
- Cool, yeah.


00:35:38.340 --> 00:35:40.100
Hopefully that does well.


00:35:40.100 --> 00:35:40.940
Liza, how about you?


00:35:40.940 --> 00:35:42.660
Got anything extra you wanna give a quick shout out


00:35:42.660 --> 00:35:44.280
to while we're here?


00:35:44.280 --> 00:35:45.180
- Oh yes, of course.


00:35:45.180 --> 00:35:49.740
So I am a volunteer for Python Island


00:35:49.740 --> 00:35:54.160
and Python Island has a speaker's coaching session


00:35:54.160 --> 00:35:57.320
happening on the 22nd of January.


00:35:57.320 --> 00:35:59.840
So it's basically we're offering for people


00:35:59.840 --> 00:36:03.400
that would like to be a pro on giving talks,


00:36:03.400 --> 00:36:07.160
we're offering a workshop, it's the entire day.


00:36:07.160 --> 00:36:12.160
And you need to say that you need to just like give us


00:36:12.160 --> 00:36:14.440
your words that you're gonna give us a talk


00:36:14.440 --> 00:36:16.380
as like a practice thing.


00:36:16.380 --> 00:36:22.120
But it's quite, it's a very interesting workshop thing.


00:36:22.120 --> 00:36:25.320
And if you would like to be part of it,


00:36:25.320 --> 00:36:30.320
just go into the meetup.com/pythonireland and it's there.


00:36:30.320 --> 00:36:33.240
So again, it's the 22nd of January.


00:36:33.240 --> 00:36:36.280
- Yeah, that's a cool service, I guess you would call it,


00:36:36.280 --> 00:36:37.800
a cool option for speakers,


00:36:37.800 --> 00:36:39.960
because speaking is one of those things


00:36:39.960 --> 00:36:42.740
that really can open doors and help get you connected,


00:36:42.740 --> 00:36:44.720
but it's also super stressful


00:36:44.720 --> 00:36:47.160
the very first time you do it is in front of the audience


00:36:47.160 --> 00:36:48.560
and it's being broadcast.


00:36:48.560 --> 00:36:52.600
- And also like the tips on how to put a talk together,


00:36:52.600 --> 00:36:54.400
'cause there is that anxiety as well.


00:36:54.400 --> 00:36:58.060
I have a talk, but I don't know if the thing


00:36:58.060 --> 00:37:00.800
that I want to talk about is a good thing,


00:37:00.800 --> 00:37:03.240
or I don't know if my slides are good.


00:37:03.240 --> 00:37:06.880
I don't know if I know how to actually convey the message.


00:37:06.880 --> 00:37:09.360
So we would love to help you with that.


00:37:09.360 --> 00:37:11.920
And I won't be the one giving the workshop.


00:37:11.920 --> 00:37:16.920
There is a proper person that has experience on doing that.


00:37:16.920 --> 00:37:20.220
So yeah, I've done the workshop though,


00:37:20.220 --> 00:37:22.560
and it's a great workshop.


00:37:22.560 --> 00:37:23.540
- Yeah, nice.


00:37:23.540 --> 00:37:27.060
And then I have a few other extras though.


00:37:27.060 --> 00:37:28.460
Can I just go on?


00:37:28.460 --> 00:37:29.420
- Yeah, yeah.


00:37:29.420 --> 00:37:30.660
Cover as many as you want.


00:37:30.660 --> 00:37:32.300
As many as you can.


00:37:32.300 --> 00:37:33.140
- Cool.


00:37:33.140 --> 00:37:35.660
So then I also found,


00:37:35.660 --> 00:37:39.400
I don't know how many newbies we have listening to us today,


00:37:39.400 --> 00:37:41.060
but for people that,


00:37:41.060 --> 00:37:43.060
since we're talking a lot about data science as well,


00:37:43.060 --> 00:37:44.660
there's a bunch of data scientists


00:37:44.660 --> 00:37:46.740
and other people around


00:37:46.740 --> 00:37:49.820
that don't really know how to deal with Git.


00:37:49.820 --> 00:37:51.660
And even for me as a person,


00:37:51.660 --> 00:37:56.660
My personal experience with Git initially was so hard.


00:37:56.660 --> 00:37:58.460
- Why do I have to do it twice?


00:37:58.460 --> 00:37:59.300
Why do I have to do that?


00:37:59.300 --> 00:38:01.260
I just want to commit it.


00:38:01.260 --> 00:38:03.700
What's this push about?


00:38:03.700 --> 00:38:05.980
- And then what do you mean, where am I?


00:38:05.980 --> 00:38:09.200
I am here in front of my computer.


00:38:09.200 --> 00:38:14.300
Yeah, so if you want to learn Git,


00:38:14.300 --> 00:38:18.620
there is this website called learningbranching.js.org


00:38:19.540 --> 00:38:22.700
that gives you a step-by-step with a visual manual


00:38:22.700 --> 00:38:26.440
of how to actually get Git done.


00:38:26.440 --> 00:38:28.100
So you have like the lessons,


00:38:28.100 --> 00:38:29.660
so you can click on the lessons


00:38:29.660 --> 00:38:32.140
and then it gives you like an explanation


00:38:32.140 --> 00:38:35.260
with some best practices


00:38:35.260 --> 00:38:37.580
and that gives you snippets of code as well.


00:38:37.580 --> 00:38:40.640
So you have like a thing that kind of like moves.


00:38:40.640 --> 00:38:45.220
Yeah, it's quite like straightforward


00:38:45.220 --> 00:38:46.700
and it's quite interesting.


00:38:46.700 --> 00:38:48.300
I don't know what happened here.


00:38:49.180 --> 00:38:51.120
My computer, I think, stopped working.


00:38:51.120 --> 00:38:55.560
Yeah, anyhow, so it's very interesting


00:38:55.560 --> 00:39:00.560
and it's a very visual way of learning Git.


00:39:00.560 --> 00:39:03.260
So if you're struggling with Git


00:39:03.260 --> 00:39:05.460
and you don't have time to read the book,


00:39:05.460 --> 00:39:08.020
actually, first thing, read the book.


00:39:08.020 --> 00:39:11.260
I think chapter 10 of the Git book is the most important one.


00:39:11.260 --> 00:39:14.220
It teaches the main things that you need to know.


00:39:14.220 --> 00:39:15.700
But if you don't have time to do that,


00:39:15.700 --> 00:39:19.820
And then if you want to train a little bit with a GUI,


00:39:19.820 --> 00:39:22.220
just this is the most straightforward thing


00:39:22.220 --> 00:39:23.980
that I found around.


00:39:23.980 --> 00:39:24.820
- Yeah, that's cool.


00:39:24.820 --> 00:39:26.940
I like how it's like a little fake shell.


00:39:26.940 --> 00:39:30.860
- Yes, and if everything was working,


00:39:30.860 --> 00:39:32.740
I could show you the like you have.


00:39:32.740 --> 00:39:35.580
So you do, you click here and it's like,


00:39:35.580 --> 00:39:36.740
it's very GUI based,


00:39:36.740 --> 00:39:38.300
but then as soon as you get out of this thing,


00:39:38.300 --> 00:39:40.660
you need to train to pass the phase,


00:39:40.660 --> 00:39:41.940
'cause it's kind of like a game,


00:39:41.940 --> 00:39:43.240
but you need to type it.


00:39:44.380 --> 00:39:48.100
- So it has you do some kind of branch thing or check out


00:39:48.100 --> 00:39:50.500
and then it watches to make sure that say the branch


00:39:50.500 --> 00:39:52.220
was created or something, huh?


00:39:52.220 --> 00:39:54.500
- Yes, yes, like you have a check.


00:39:54.500 --> 00:39:59.940
It's quite interesting and it's quite good for learning.


00:39:59.940 --> 00:40:00.780
Yeah, here.


00:40:00.780 --> 00:40:02.660
- Oh, yeah, nice.


00:40:02.660 --> 00:40:07.660
- Let's see if we can fake, no we can't.


00:40:07.660 --> 00:40:11.020
I don't know what's going on, I'm sorry.


00:40:11.020 --> 00:40:11.860
But it's--


00:40:11.860 --> 00:40:13.380
- No worries, it looks cool, it's a good suggestion.


00:40:13.380 --> 00:40:15.860
People can check that out in the show notes.


00:40:15.860 --> 00:40:19.560
- The, yeah, so here.


00:40:19.560 --> 00:40:22.700
This is the one, so you can type, let's say, git commit,


00:40:22.700 --> 00:40:26.180
and it's here, you can see what happens,


00:40:26.180 --> 00:40:28.660
and it tells you, so, okay, so you did a commit,


00:40:28.660 --> 00:40:32.460
and this is what happens, and then you can go back


00:40:32.460 --> 00:40:35.100
to the instructions if you don't get it.


00:40:35.100 --> 00:40:36.940
It's quite interesting.


00:40:36.940 --> 00:40:39.840
And then, just to close the extras,


00:40:41.180 --> 00:40:46.700
So I started coding with Python for a very short period of time.


00:40:46.700 --> 00:40:51.540
And then I switched when I started IT, I switched to Java, and then I did a few years of Java.


00:40:51.540 --> 00:40:54.580
And then I went back into Python.


00:40:54.580 --> 00:40:59.500
But then when I went back into Python, I was like, well, I know Java now.


00:40:59.500 --> 00:41:00.700
And what's going on?


00:41:00.700 --> 00:41:03.700
What is this language that is not verbose at all?


00:41:03.700 --> 00:41:05.420
And you can do whatever you want with it.


00:41:05.420 --> 00:41:07.780
How do you do objective learning?


00:41:07.780 --> 00:41:08.980
Exactly.


00:41:08.980 --> 00:41:10.940
What's the story?


00:41:10.940 --> 00:41:15.780
And I struggled a lot to find a straightforward tutorial


00:41:15.780 --> 00:41:17.580
and a straightforward manual that would tell me,


00:41:17.580 --> 00:41:20.140
so this is the comparison, this is what Python does,


00:41:20.140 --> 00:41:24.220
the Java doesn't do, or this is how to do things in Python,


00:41:24.220 --> 00:41:25.580
and this is how to do things in Java,


00:41:25.580 --> 00:41:27.860
this is the comparison, and blah, blah, blah.


00:41:27.860 --> 00:41:32.860
So then I found this real Python article


00:41:32.860 --> 00:41:35.060
that was just being published, I think,


00:41:35.060 --> 00:41:37.220
maybe a few weeks ago.


00:41:37.220 --> 00:41:39.820
I wish it was around when I started, but it wasn't.


00:41:39.820 --> 00:41:41.840
- Yeah, it's only like five days old


00:41:41.840 --> 00:41:43.820
or seven days old or something, so.


00:41:43.820 --> 00:41:45.740
- Yes, yes.


00:41:45.740 --> 00:41:47.960
So it tells you like very straight,


00:41:47.960 --> 00:41:49.340
in a very straightforward way,


00:41:49.340 --> 00:41:52.300
the differences, the similarities between the two languages


00:41:52.300 --> 00:41:55.560
and talks about the Python data types


00:41:55.560 --> 00:41:57.620
and talks a little bit about as well,


00:41:57.620 --> 00:42:02.220
the Zen-O Python and how we do things in Python


00:42:02.220 --> 00:42:05.820
and how we do things in Java and then standard library


00:42:07.500 --> 00:42:09.800
and then comments as well as about apps


00:42:09.800 --> 00:42:11.600
and tutorials and documentation.


00:42:11.600 --> 00:42:14.520
So it's very, very, very interesting


00:42:14.520 --> 00:42:17.480
if you're starting with Python


00:42:17.480 --> 00:42:19.600
coming from a Java background.


00:42:19.600 --> 00:42:20.600
- Nice, that's cool.


00:42:20.600 --> 00:42:24.840
I think using your existing skills to level up


00:42:24.840 --> 00:42:27.000
is a much better way.


00:42:27.000 --> 00:42:28.880
Like I wanna know how to talk to a database.


00:42:28.880 --> 00:42:30.160
I can do that in Java.


00:42:30.160 --> 00:42:31.320
How do I do that in Python?


00:42:31.320 --> 00:42:32.140
Oh, I see.


00:42:32.140 --> 00:42:33.480
Okay, now I got it, right?


00:42:33.480 --> 00:42:36.680
- Yes. - Cool, cool.


00:42:36.680 --> 00:42:39.840
All right, I got a few extras as everyone may imagine.


00:42:39.840 --> 00:42:41.740
First, a quick follow-up.


00:42:41.740 --> 00:42:43.720
For people who are getting started with Git


00:42:43.720 --> 00:42:45.640
and you want some more help,


00:42:45.640 --> 00:42:47.200
consider using OhMyZshell.


00:42:47.200 --> 00:42:49.040
Why?


00:42:49.040 --> 00:42:53.240
Because if you go into a Git repository here


00:42:53.240 --> 00:42:55.800
and you type Git, you can hit tab.


00:42:55.800 --> 00:42:58.360
It'll give you all the top-level features of Git.


00:42:58.360 --> 00:43:03.260
So like branch, clone, checkout, commit, whatever.


00:43:03.260 --> 00:43:06.000
So if you type Git branch and hit tab, though,


00:43:06.000 --> 00:43:11.280
It will actually give you tab autocomplete and arrow autocomplete for all the existing


00:43:11.280 --> 00:43:14.920
branches, for example.


00:43:14.920 --> 00:43:19.260
If you're having a hard time on the terminal and you want some help, you can just do ZShell


00:43:19.260 --> 00:43:25.760
and it will give you super deep autocomplete on the terminal, even into, say, your project


00:43:25.760 --> 00:43:27.960
structure, your repo structure.


00:43:27.960 --> 00:43:28.960
That's cool.


00:43:28.960 --> 00:43:32.640
Don't go there without that.


00:43:32.640 --> 00:43:41.220
For my actual things, I gave a talk at FlaskCon, so that talk is up, which is really cool.


00:43:41.220 --> 00:43:46.040
It was on HTMX and Flask and JINJA partials and things like that.


00:43:46.040 --> 00:43:47.920
So people can check that out.


00:43:47.920 --> 00:43:48.920
That's good.


00:43:48.920 --> 00:43:54.480
Brian and I have talked about why Firefox is awesome and people should be using it more


00:43:54.480 --> 00:44:00.580
and not letting it fade into oblivion, as everyone thinks Chromium is the core that


00:44:00.580 --> 00:44:02.320
we should all be building on.


00:44:02.320 --> 00:44:08.940
They just came out with a really cool idea called RLBlocks that would be applicable to


00:44:08.940 --> 00:44:10.280
other browsers as well.


00:44:10.280 --> 00:44:16.260
One of the problems with web browsers is they accept all sorts of input from random strangers


00:44:16.260 --> 00:44:22.100
on the internet, which is generally not a good idea for security, right?


00:44:22.100 --> 00:44:24.280
It's not just the browser, it's the plugins.


00:44:24.280 --> 00:44:33.200
You got things like the og format or wolf is a font, parsing library and all these different


00:44:33.200 --> 00:44:39.040
things that you might need to run inside the browser, but you really get them from somewhere


00:44:39.040 --> 00:44:40.040
else.


00:44:40.040 --> 00:44:45.880
For example, if there's a problem with say the og parser, you load an og file, then the


00:44:45.880 --> 00:44:47.320
browser gets hacked into.


00:44:47.320 --> 00:44:52.760
There's things they've been doing to try to restrict that with sandboxes and stuff.


00:44:52.760 --> 00:44:56.500
This thing, I'll just give a quick shout out to Rblox.


00:44:56.500 --> 00:44:58.140
What they're doing is insane.


00:44:58.140 --> 00:45:00.860
As somebody who does a little C++, tell me what you think about this.


00:45:00.860 --> 00:45:07.300
What they do is they use the llvm, or no, clang here.


00:45:07.300 --> 00:45:15.340
They use clang, and they take these libraries like aug, they compile them to WebAssembly,


00:45:15.340 --> 00:45:19.540
and then there's another thing called WebAssembly to C, and they compile it back to C, and then


00:45:19.540 --> 00:45:25.180
they compile it into the system as if they hadn't done anything to it.


00:45:25.180 --> 00:45:26.720
Which sounds weird, right?


00:45:26.720 --> 00:45:29.260
Why would you do that?


00:45:29.260 --> 00:45:35.060
But what it does is it strips out a bunch of intermediate steps where viruses could


00:45:35.060 --> 00:45:40.340
live and uses WebAssembly to put those checks as part of the system and then puts it back


00:45:40.340 --> 00:45:41.340
into C.


00:45:41.340 --> 00:45:42.340
>> Okay.


00:45:42.340 --> 00:45:43.340
>> Yeah.


00:45:43.340 --> 00:45:47.460
So, anyway, this is a pretty wild thing that they came up with.


00:45:47.460 --> 00:45:50.020
So just worth a quick checking out.


00:45:50.020 --> 00:45:54.460
And then, Liza, you mentioned this log4j thing.


00:45:54.460 --> 00:45:56.060
- Yes.


00:45:56.060 --> 00:45:59.660
- We're all gonna be suffering from this for so long.


00:45:59.660 --> 00:46:00.500
This is so bad.


00:46:00.500 --> 00:46:04.340
So it turned out that log4j, the problem with log4j


00:46:04.340 --> 00:46:09.260
is, let me describe this in Python terms


00:46:09.260 --> 00:46:10.860
and just see what you all think.


00:46:10.860 --> 00:46:13.900
So log4j has this ability


00:46:14.780 --> 00:46:19.620
to parse the strings you put into the log.


00:46:19.620 --> 00:46:21.140
So I want to log out a message.


00:46:21.140 --> 00:46:23.340
But instead of actually getting a user--


00:46:23.340 --> 00:46:26.440
like, say, instead of going to the code


00:46:26.440 --> 00:46:29.020
and getting, say, the machine name or the IP address


00:46:29.020 --> 00:46:32.400
that I'm on, I can put a little symbol in the log file.


00:46:32.400 --> 00:46:35.460
And log4j will go, oh, what you need


00:46:35.460 --> 00:46:39.460
is you want me to, say, pull in the IP address locally


00:46:39.460 --> 00:46:41.780
and then write that in the log.


00:46:41.780 --> 00:46:43.220
That's maybe OK.


00:46:43.220 --> 00:46:47.620
They also have this ability to run code that they don't know.


00:46:47.620 --> 00:46:48.620
You did some Java.


00:46:48.620 --> 00:46:55.040
They have this ability to run code not in the local class library, but on a remote machine


00:46:55.040 --> 00:47:03.300
somewhere else out on the internet called JNDI.


00:47:03.300 --> 00:47:11.220
It turns out you can put the JDNI run code symbol into your log file, and then the log


00:47:11.220 --> 00:47:17.100
message will result in running code from anywhere on the internet in the process of your thing


00:47:17.100 --> 00:47:23.420
that's trying to log. And it can come from anywhere. It is so bad. If it's in a header


00:47:23.420 --> 00:47:27.300
file, if it's in the URL, if it's in the email address where you expect an email address,


00:47:27.300 --> 00:47:33.500
you put in like dollar bracket J NDI colon some path to the virus. Literally the attempt


00:47:33.500 --> 00:47:39.300
to say this user with this email address failed to log in results in running the virus. It's


00:47:39.300 --> 00:47:43.720
Anything that you may ever log, user agents, you name it.


00:47:43.720 --> 00:47:47.720
Run virus remotely in this process.


00:47:47.720 --> 00:47:49.080
On anything you might want to log in,


00:47:49.080 --> 00:47:50.560
you're typically logging bad inputs.


00:47:50.560 --> 00:47:53.280
You can log attempts to hack your system.


00:47:53.280 --> 00:47:56.600
There were like 850,000 hack attempts


00:47:56.600 --> 00:48:00.600
within the first couple, like day or two of this.


00:48:00.600 --> 00:48:04.440
It's going to be not good, which made me think of just


00:48:04.440 --> 00:48:08.200
a quick little fun comment here of an ex-KCD


00:48:08.200 --> 00:48:10.480
that someone put on Twitter after this


00:48:10.480 --> 00:48:12.200
because it's all about this Log4j


00:48:12.200 --> 00:48:13.040
that's not really funded.


00:48:13.040 --> 00:48:16.880
So all modern digital infrastructure


00:48:16.880 --> 00:48:18.460
is like this Jenga tower.


00:48:18.460 --> 00:48:19.960
And then at the very bottom,


00:48:19.960 --> 00:48:22.200
it's a project some random person in Nebraska


00:48:22.200 --> 00:48:24.800
has been thanklessly maintaining since 2003.


00:48:24.800 --> 00:48:26.960
Pull that out, it all comes down.


00:48:26.960 --> 00:48:28.840
So that's the world we live in.


00:48:28.840 --> 00:48:29.680
Yeah?


00:48:29.680 --> 00:48:30.840
- Yeah.


00:48:30.840 --> 00:48:33.120
Especially because there was this thing,


00:48:33.120 --> 00:48:34.760
this movement on Twitter of people


00:48:34.760 --> 00:48:38.920
just blaming the luck for the developers about it.


00:48:38.920 --> 00:48:42.040
And some other people to show up as well,


00:48:42.040 --> 00:48:44.600
they haven't been getting paid for all the work


00:48:44.600 --> 00:48:46.600
that they're doing and everyone is using


00:48:46.600 --> 00:48:50.280
the application throughout, so.


00:48:50.280 --> 00:48:56.560
- There's certainly a conversation to be had about


00:48:56.560 --> 00:49:01.240
how much energy and time should be these large companies


00:49:01.240 --> 00:49:04.540
be putting into supporting open source stuff, right?


00:49:04.540 --> 00:49:06.800
And it's, I think there's so many little things


00:49:06.800 --> 00:49:11.160
like Log4j that nobody feels like they're using.


00:49:11.160 --> 00:49:13.320
Sure, their web framework might use it,


00:49:13.320 --> 00:49:14.760
but they don't actually want to use it.


00:49:14.760 --> 00:49:16.540
It just happens to be what their web framework shows,


00:49:16.540 --> 00:49:19.320
but they are built on top of it as they're learning.


00:49:19.320 --> 00:49:21.760
I'm sure there are many sleepless nights on this.


00:49:21.760 --> 00:49:22.600
I don't know.


00:49:22.600 --> 00:49:23.420
Not good.


00:49:23.420 --> 00:49:25.180
- But there's also--


00:49:25.180 --> 00:49:26.920
- As a Java person, what do you think about this?


00:49:26.920 --> 00:49:31.720
(laughing)


00:49:31.720 --> 00:49:33.520
- As a representative of all Java.


00:49:33.520 --> 00:49:36.040
- Yeah. (laughs)


00:49:36.040 --> 00:49:37.180
- No pressure at all, right?


00:49:37.180 --> 00:49:38.920
No pressure whatsoever. - I'm good.


00:49:38.920 --> 00:49:40.260
(laughs)


00:49:40.260 --> 00:49:42.820
- I can say as someone that has worked for open source


00:49:42.820 --> 00:49:47.340
for a while now, that there is a big discussion


00:49:47.340 --> 00:49:51.940
to be had on that, but there is also a big discussion


00:49:51.940 --> 00:49:56.420
to be had on how do we want open source to be sustained


00:49:56.420 --> 00:50:00.300
from now on, because the way that it's going


00:50:00.300 --> 00:50:02.420
is not sustainable, and we all know it,


00:50:02.420 --> 00:50:04.000
and we have big companies,


00:50:04.000 --> 00:50:06.880
and we don't even need to name the big companies,


00:50:06.880 --> 00:50:08.300
but we have really big companies.


00:50:08.300 --> 00:50:11.940
They have been using, and are starting now,


00:50:11.940 --> 00:50:13.920
to do open source projects


00:50:13.920 --> 00:50:16.320
simply because it's good for business.


00:50:16.320 --> 00:50:21.220
Because it gets people hooked into what they're doing,


00:50:21.220 --> 00:50:22.700
and then, well, you're gonna have to use


00:50:22.700 --> 00:50:24.380
our open source packet now,


00:50:24.380 --> 00:50:27.520
and that's us taking the market.


00:50:27.520 --> 00:50:30.380
But we need open source


00:50:30.380 --> 00:50:33.340
be at least a tiny bit more sustainable


00:50:33.340 --> 00:50:37.180
'cause the way it's going, it's not good for anyone.


00:50:37.180 --> 00:50:39.620
- Yeah, I guess one final thought on this.


00:50:39.620 --> 00:50:41.620
This was not a bug that was found.


00:50:41.620 --> 00:50:43.500
This was a feature that was used


00:50:43.500 --> 00:50:45.540
in a way that people didn't expect.


00:50:45.540 --> 00:50:47.860
I can expand variables, I can run remote code,


00:50:47.860 --> 00:50:50.580
I can run expanded remote code, oops.


00:50:50.580 --> 00:50:54.140
All right, but let's bring it back to Python with a joke.


00:50:54.140 --> 00:50:55.260
What do you guys think?


00:50:55.260 --> 00:50:56.100
- Yeah.


00:50:56.100 --> 00:51:00.100
- Lize, you got the first joke.


00:51:00.100 --> 00:51:01.700
- Hit us with that. - Yes.


00:51:01.700 --> 00:51:05.500
So we were talking about virtual environments


00:51:05.500 --> 00:51:08.580
and how much fun it is to set up Python


00:51:08.580 --> 00:51:10.140
and use all your virtual environments


00:51:10.140 --> 00:51:12.420
'cause you have, well, FAMs and PPAMs


00:51:12.420 --> 00:51:15.020
and Condas and everything else.


00:51:15.020 --> 00:51:17.160
And how much everyone always complains


00:51:17.160 --> 00:51:19.460
about having to set up their environment


00:51:19.460 --> 00:51:20.700
before installing Python.


00:51:20.700 --> 00:51:23.060
So I found this.


00:51:23.060 --> 00:51:25.100
So apparently this would be society


00:51:25.100 --> 00:51:28.060
if you didn't have to use virtual engines


00:51:28.060 --> 00:51:29.660
to install Python packages.


00:51:29.660 --> 00:51:31.700
And it would be wonderful.


00:51:31.700 --> 00:51:34.240
- Let me try to describe this for the world.


00:51:34.240 --> 00:51:36.220
Ooh, it's just listening.


00:51:36.220 --> 00:51:41.220
It's like the most idealistic, futuristic view of the world.


00:51:41.220 --> 00:51:43.700
We've got like monorails


00:51:43.700 --> 00:51:47.220
and there's just shining silver spaceships


00:51:47.220 --> 00:51:48.700
zooming through the sky.


00:51:48.700 --> 00:51:52.940
And it just looks like, oh yeah, here's the perfect future


00:51:52.940 --> 00:51:55.020
we all dreamed we were supposed to have.


00:51:55.020 --> 00:51:58.460
- Yes, that everyone types Python,


00:51:58.460 --> 00:52:02.420
Everyone knows Python, but you don't have to use virtual AMPs


00:52:02.420 --> 00:52:04.260
to install their packages, imagine.


00:52:04.260 --> 00:52:06.260
- Are you telling me that virtual environments


00:52:06.260 --> 00:52:07.620
denied this from us?


00:52:07.620 --> 00:52:10.100
- No, this is the reason why we can't have these things


00:52:10.100 --> 00:52:12.180
is because people don't learn virtual environments.


00:52:12.180 --> 00:52:14.580
That spaceship has its own environment.


00:52:14.580 --> 00:52:15.940
The little house over there,


00:52:15.940 --> 00:52:17.740
that's running a different version.


00:52:17.740 --> 00:52:20.220
Yeah, because of its environment.


00:52:20.220 --> 00:52:22.500
- That's a good way to look at it, Brian, I like it.


00:52:22.500 --> 00:52:24.660
- Yeah, me too.


00:52:24.660 --> 00:52:27.220
Brian always brings the other side of the things first.


00:52:27.220 --> 00:52:29.020
like, oh, the data perspective.


00:52:29.020 --> 00:52:30.220
It's wonderful.


00:52:30.220 --> 00:52:31.500
Thank you, Brian.


00:52:31.500 --> 00:52:32.340
- Yeah, thanks, Ryan.


00:52:32.340 --> 00:52:34.020
All right, the joke I was gonna cover


00:52:34.020 --> 00:52:35.600
is actually that Jenga tower I already showed,


00:52:35.600 --> 00:52:38.540
so I'll just leave it at that.


00:52:38.540 --> 00:52:41.220
One real quick bit of follow-up here,


00:52:41.220 --> 00:52:42.560
'cause I think this will be helpful to people.


00:52:42.560 --> 00:52:46.580
Jeremy Page says, "If you are on Bash instead of ZShell,


00:52:46.580 --> 00:52:49.320
"the package bash-completion will also allow


00:52:49.320 --> 00:52:53.540
"get command tags, branches, et cetera, to auto-complete."


00:52:53.540 --> 00:52:54.760
So, very cool.


00:52:56.020 --> 00:52:57.460
- And I never read a book.


00:52:57.460 --> 00:52:59.580
I just like, I think I read an article


00:52:59.580 --> 00:53:02.060
that's like the 10 Git commands you need.


00:53:02.060 --> 00:53:05.980
And I've been good since, so.


00:53:05.980 --> 00:53:06.820
- Yeah.


00:53:06.820 --> 00:53:09.580
- Oh yeah, okay.


00:53:09.580 --> 00:53:11.500
Mr. Waze Kedge.


00:53:11.500 --> 00:53:12.860
I catch.


00:53:12.860 --> 00:53:15.380
- Exactly, in a sense, you don't need virtual environments


00:53:15.380 --> 00:53:17.820
if you just set up a new virtual machine for every project.


00:53:17.820 --> 00:53:18.660
- That's true.


00:53:18.660 --> 00:53:21.020
- Yeah, Docker will save the world.


00:53:21.020 --> 00:53:22.220
- That's right.


00:53:22.220 --> 00:53:23.060
- I agree.


00:53:23.060 --> 00:53:24.260
- We could have the same picture with Docker,


00:53:24.260 --> 00:53:26.620
but they'd all just be cubes just blowing around.


00:53:26.620 --> 00:53:27.460
- Cubes, yeah.


00:53:27.460 --> 00:53:30.040
(all laughing)


00:53:30.040 --> 00:53:34.140
With those shipping containers everywhere.


00:53:34.140 --> 00:53:36.220
- There's also the pragmatic-- - With wings.


00:53:36.220 --> 00:53:38.700
- Exactly, the pragmatic Mario says,


00:53:38.700 --> 00:53:40.300
"I click buttons on VS Code."


00:53:40.300 --> 00:53:42.980
- Go GUI.


00:53:42.980 --> 00:53:48.020
- All right, Brian, you wanna take us out of here?


00:53:48.020 --> 00:53:49.340
- Yeah, sure.


00:53:49.340 --> 00:53:51.780
Thanks everybody for showing up for the show


00:53:51.780 --> 00:53:53.800
and it was really a lot of fun.


00:53:53.800 --> 00:53:57.720
Thanks, Lea, sorry, Lace, for showing up.


00:53:57.720 --> 00:53:58.720
It's been great.


00:53:58.720 --> 00:53:59.720
Yeah.


00:53:59.720 --> 00:54:00.720
Bye, everyone.


00:54:00.720 --> 00:54:01.720
Thank you.

