WEBVTT

00:00:00.000 --> 00:00:01.000
Hey guys.


00:00:01.000 --> 00:00:02.000
- Hi.


00:00:02.000 --> 00:00:03.000
- Hey everyone out there watching the live stream


00:00:03.000 --> 00:00:05.000
or the playback of the live stream,


00:00:05.000 --> 00:00:07.000
thank you for being here.


00:00:07.000 --> 00:00:09.000
It's great to see so many familiar faces


00:00:09.000 --> 00:00:11.000
in the live chat already, so that's pretty awesome.


00:00:11.000 --> 00:00:13.000
Let's go ahead and kick this off.


00:00:13.000 --> 00:00:15.000
Hello and welcome to Python Bytes


00:00:15.000 --> 00:00:17.000
where we deliver Python news and headlines


00:00:17.000 --> 00:00:18.000
directly to your earbuds.


00:00:18.000 --> 00:00:23.000
This is episode 270, recorded February 9th, 2022.


00:00:23.000 --> 00:00:24.000
I'm Michael Kennedy.


00:00:24.000 --> 00:00:26.000
- And I'm Brian Okken.


00:00:26.000 --> 00:00:27.000
- And I'm Dina.


00:00:27.000 --> 00:00:28.000
- And I'm David.


00:00:28.000 --> 00:00:29.440
- I'm Brian Okken.


00:00:29.440 --> 00:00:30.680
- And I'm Dean Langsam.


00:00:30.680 --> 00:00:34.060
- Dean, so great to have you on the show.


00:00:34.060 --> 00:00:37.280
So often you help me with that start in the live chat


00:00:37.280 --> 00:00:40.140
and I'm a big participant in the show.


00:00:40.140 --> 00:00:44.680
So we pulled you in and now here you are, welcome.


00:00:44.680 --> 00:00:46.040
- Thank you, thank you.


00:00:46.040 --> 00:00:48.600
I've been a fan actually since episode one,


00:00:48.600 --> 00:00:50.120
I've been hearing this weekly.


00:00:50.120 --> 00:00:53.320
- Years, like five years or something.


00:00:53.320 --> 00:00:54.340
- Yeah, it's about five years.


00:00:54.340 --> 00:00:56.720
I remember I moved apartments back then


00:00:56.720 --> 00:00:59.160
And I listened to Python.


00:00:59.160 --> 00:01:01.640
I didn't know Python as well back then.


00:01:01.640 --> 00:01:03.160
And I actually grow with the show.


00:01:03.160 --> 00:01:04.000
So that's very nice.


00:01:04.000 --> 00:01:04.920
- That's fantastic.


00:01:04.920 --> 00:01:05.760
- That's incredible.


00:01:05.760 --> 00:01:07.080
We've heard that from other people


00:01:07.080 --> 00:01:10.160
and that's just like mind blowing to me.


00:01:10.160 --> 00:01:11.400
But yeah.


00:01:11.400 --> 00:01:12.240
- Yeah, totally.


00:01:12.240 --> 00:01:14.640
- I was taking like intro to data science classes


00:01:14.640 --> 00:01:16.800
in Coursera while listening to the show.


00:01:16.800 --> 00:01:20.800
And now other people call me a senior Python.


00:01:20.800 --> 00:01:23.520
So that was very nice.


00:01:23.520 --> 00:01:24.360
- That's fantastic.


00:01:24.360 --> 00:01:25.640
And it does go fast.


00:01:25.640 --> 00:01:27.200
So awesome.


00:01:27.200 --> 00:01:29.760
Thank you so much for joining us on the show.


00:01:29.760 --> 00:01:30.660
It's awesome.


00:01:30.660 --> 00:01:31.760
Before we get into it,


00:01:31.760 --> 00:01:34.800
I also want to say this episode is brought to you by Datadog.


00:01:34.800 --> 00:01:38.040
Check out their awesome stuff at pythonbytes.fm/datadog.


00:01:38.040 --> 00:01:40.560
I'll tell you more about that later.


00:01:40.560 --> 00:01:41.960
Right now, Python,


00:01:41.960 --> 00:01:45.440
I want to hear about a better Pygame loop.


00:01:45.440 --> 00:01:46.920
Brian, tell us about it.


00:01:46.920 --> 00:01:50.040
- Yeah, so this is a article from Glyph


00:01:50.040 --> 00:01:52.600
and this is,


00:01:52.600 --> 00:01:57.480
Pygame is a package that's used for game programming a lot.


00:01:57.480 --> 00:01:59.840
And it's, I mean, a lot.


00:01:59.840 --> 00:02:02.240
And programming games is definitely,


00:02:02.240 --> 00:02:05.160
I think it's one of the things I tried to do early on


00:02:05.160 --> 00:02:06.000
when I was a developer.


00:02:06.000 --> 00:02:08.760
And I think it's something that I think I encourage


00:02:08.760 --> 00:02:12.740
a lot of new developers to try out things like simple games


00:02:12.740 --> 00:02:16.420
because it's fun to learn coding that way.


00:02:16.420 --> 00:02:20.320
And it's a, anyway, it's a big part of learning programming


00:02:20.320 --> 00:02:22.400
and the programming space.


00:02:22.400 --> 00:02:24.860
And with Python, it's pretty easy with my game.


00:02:24.860 --> 00:02:27.360
And there's a lot of tutorials out there.


00:02:27.360 --> 00:02:29.120
But one of the things that Glyph points out


00:02:29.120 --> 00:02:32.840
is a lot of the tutorials have this sort of simple


00:02:32.840 --> 00:02:36.700
while one loop, where you, the main loop of a game


00:02:36.700 --> 00:02:39.160
where you just spin and wait for events


00:02:39.160 --> 00:02:42.400
and then handle the event or draw things or whatever


00:02:42.400 --> 00:02:43.380
and then go back.


00:02:43.380 --> 00:02:46.200
And draw, you know, keep going.


00:02:46.200 --> 00:02:48.020
And this just happens forever.


00:02:48.020 --> 00:02:50.720
Well, while one loop in programming is a busy loop


00:02:50.720 --> 00:02:54.600
And it's generally something that kind of has some issues.


00:02:54.600 --> 00:02:57.440
So Cliff is pointing out that some of the issues with this


00:02:57.440 --> 00:03:02.600
are that it's a waste power, for one.


00:03:02.600 --> 00:03:04.360
Your CPU is just spinning all the time


00:03:04.360 --> 00:03:07.920
when you're really not going to get events that fast.


00:03:07.920 --> 00:03:11.880
And then also, there's a thing that I didn't know about


00:03:11.880 --> 00:03:14.640
called screen tearing, which is when you're


00:03:14.640 --> 00:03:16.440
drawing the screen at the same time you're


00:03:16.440 --> 00:03:18.640
writing to the screen buffer.


00:03:18.640 --> 00:03:21.280
- Right, you're not waiting for the V-sync


00:03:21.280 --> 00:03:23.920
60, 100 frames a second, whatever it is, right?


00:03:23.920 --> 00:03:27.480
- Yeah, and that can cause glitches in the game


00:03:27.480 --> 00:03:30.200
and it doesn't look as good.


00:03:30.200 --> 00:03:32.600
Pygame does allow a V-sync option,


00:03:32.600 --> 00:03:35.960
but apparently there's like some problem with that.


00:03:35.960 --> 00:03:40.960
So really, the article walks through both of these problems


00:03:40.960 --> 00:03:46.520
and the V-sync fix and the problems with that.


00:03:46.520 --> 00:03:50.320
But the end result really is he's got--


00:03:50.320 --> 00:03:54.060
it's actually an interesting discussion about really what's


00:03:54.060 --> 00:03:55.380
going on in Pygame.


00:03:55.380 --> 00:03:58.080
And he talks about that there's really


00:03:58.080 --> 00:04:00.860
three jobs going on, the drawing, and the game logic,


00:04:00.860 --> 00:04:03.220
and the input handling all at once.


00:04:03.220 --> 00:04:04.860
And so this is a three thing.


00:04:04.860 --> 00:04:07.500
It's probably a good idea to do maybe async stuff


00:04:07.500 --> 00:04:10.020
so things can work together.


00:04:10.020 --> 00:04:15.460
And the solution he came up with is still--


00:04:15.460 --> 00:04:17.620
I mean, it's definitely a larger loop,


00:04:17.620 --> 00:04:21.880
but it's not that big of a loop, more complicated.


00:04:21.880 --> 00:04:25.860
And it's an async version to have some sleeps in there


00:04:25.860 --> 00:04:30.860
with some delays possibly, but a better loop for gaming.


00:04:30.860 --> 00:04:32.500
And it's not that complicated.


00:04:32.500 --> 00:04:35.780
And actually, if you're learning gaming while programming,


00:04:35.780 --> 00:04:37.980
hearing about this, these sorts of issues


00:04:37.980 --> 00:04:41.340
and learning how to solve it,


00:04:41.340 --> 00:04:43.740
it's probably just gonna make you a better developer faster.


00:04:43.740 --> 00:04:46.580
So I think it's a good thing to look at this.


00:04:46.580 --> 00:04:50.780
- Yeah, this looks really interesting.


00:04:50.780 --> 00:04:55.700
This Game Loop stuff, it's so often very much the same


00:04:55.700 --> 00:04:59.220
and there's like these core elements like process input,


00:04:59.220 --> 00:05:02.020
if the key's down or if there's a joystick attached,


00:05:02.020 --> 00:05:04.860
draw the scene, do the hit detection


00:05:04.860 --> 00:05:06.800
and AI or game logic.


00:05:06.800 --> 00:05:09.300
And it's almost always the same.


00:05:09.300 --> 00:05:12.580
Like this looks great as a way to tell me


00:05:12.580 --> 00:05:13.740
what I should be doing.


00:05:13.740 --> 00:05:16.820
And maybe the next step would be create a class


00:05:16.820 --> 00:05:20.420
that I just override, do the AI logic, draw the screen


00:05:20.420 --> 00:05:23.140
and just let that like not even be something I ever see.


00:05:23.140 --> 00:05:26.980
So this is ripe for a little bit of a hiding away


00:05:26.980 --> 00:05:28.420
even this cool stuff.


00:05:28.420 --> 00:05:29.240
- That's true.


00:05:29.240 --> 00:05:33.460
Maybe Pygame can extend a better built-in loop


00:05:33.460 --> 00:05:35.260
to hook into or something.


00:05:35.260 --> 00:05:36.100
- Yeah.


00:05:36.100 --> 00:05:42.140
- I'm not actually used to a lot of gaming on Python


00:05:42.140 --> 00:05:44.900
But I always think about browsers,


00:05:44.900 --> 00:05:48.260
which are also kind of a loop that runs forever and renders


00:05:48.260 --> 00:05:49.780
stuff on your screen.


00:05:49.780 --> 00:05:52.900
And I think, well, the front end guys got it so easy.


00:05:52.900 --> 00:05:54.460
They don't-- they just write the code


00:05:54.460 --> 00:05:56.660
and the browser does it for them.


00:05:56.660 --> 00:06:00.820
And I'm not sure if it works exactly the same.


00:06:00.820 --> 00:06:04.500
But maybe if someone manages to implement something that's


00:06:04.500 --> 00:06:10.420
like, just write your game and put it in this thing,


00:06:10.420 --> 00:06:15.300
Maybe this could attract more people into writing small games in Python.


00:06:15.300 --> 00:06:16.700
>> Yeah, absolutely.


00:06:16.700 --> 00:06:21.740
My thought is if you just sort of abstract that away,


00:06:21.740 --> 00:06:25.020
it's just 2D stuff, right, which it's pretty easy to get into.


00:06:25.020 --> 00:06:29.980
I just listened to or watched a Netflix series called High Score,


00:06:29.980 --> 00:06:34.900
which is the history of video games going like way back to the Atari 2600


00:06:34.900 --> 00:06:37.060
and Asteroid and whatnot.


00:06:37.060 --> 00:06:39.900
And there's this woman in here talks about how she got so inspired


00:06:39.900 --> 00:06:41.980
about just text-based games.


00:06:41.980 --> 00:06:44.100
So if you're learning a program,


00:06:44.100 --> 00:06:46.260
I definitely think games are a fun way.


00:06:46.260 --> 00:06:49.820
And often I think people might perceive that as like,


00:06:49.820 --> 00:06:51.780
well, I've got to write, you know,


00:06:51.780 --> 00:06:53.300
Angry Birds or something, which is fine.


00:06:53.300 --> 00:06:54.500
You can write that and that's super fun,


00:06:54.500 --> 00:06:58.300
but you can do a lot of stuff with just sort of text-based


00:06:58.300 --> 00:07:02.500
little fun story adventure type stuff as well.


00:07:02.500 --> 00:07:04.640
- I got to check out that Netflix series.


00:07:04.640 --> 00:07:05.740
That sounds great.


00:07:05.740 --> 00:07:06.980
- Yeah, yeah.


00:07:06.980 --> 00:07:09.900
I was just helping a friend writing this small game


00:07:09.900 --> 00:07:13.140
and he's written this with one thread and everything


00:07:13.140 --> 00:07:15.140
for this school project.


00:07:15.140 --> 00:07:18.940
And then he told me, well, but how do I show a score


00:07:18.940 --> 00:07:21.180
that updates with the game?


00:07:21.180 --> 00:07:23.620
And then I thought, no, for that you'll need


00:07:23.620 --> 00:07:26.940
multiple threads, a PyGame loop maybe, and stuff like that.


00:07:26.940 --> 00:07:29.580
So if that could have been easier on him


00:07:29.580 --> 00:07:32.220
while learning Python, this could have been awesome.


00:07:32.220 --> 00:07:34.420
- Yeah, absolutely.


00:07:34.420 --> 00:07:38.580
There's a lot of nice comments out in the live stream.


00:07:38.580 --> 00:07:42.780
Anthony says, "I teach Pygame in my code club


00:07:42.780 --> 00:07:43.660
"after school class.


00:07:43.660 --> 00:07:45.540
"Smart kids, Pygame is great.


00:07:45.540 --> 00:07:47.420
"So is Arcade, which is an alternative,


00:07:47.420 --> 00:07:49.500
"an OpenGL based alternative to Pygame."


00:07:49.500 --> 00:07:51.220
That's very cool.


00:07:51.220 --> 00:07:53.600
I do think having something visual for people


00:07:53.600 --> 00:07:55.860
when they're learning, it just,


00:07:55.860 --> 00:07:58.900
it reinforces things so much, right?


00:07:58.900 --> 00:07:59.740
- Yeah.


00:07:59.740 --> 00:08:01.940
- Like writing that API back in the Toxin database


00:08:01.940 --> 00:08:04.900
is great when you see the next three steps down the line,


00:08:04.900 --> 00:08:06.420
how it's gonna enable something.


00:08:06.420 --> 00:08:07.660
But when you're getting started,


00:08:07.660 --> 00:08:10.480
you need quick feedback, absolutely.


00:08:10.480 --> 00:08:15.380
All right, well, let's talk about something else


00:08:15.380 --> 00:08:16.520
that's awesome here.


00:08:16.520 --> 00:08:19.300
I wanna talk about SQLAlchemy.


00:08:19.300 --> 00:08:22.340
SQLAlchemy has been getting a lot of attention lately,


00:08:22.340 --> 00:08:24.620
and that's super cool.


00:08:24.620 --> 00:08:27.100
Mike Bayer released SQLAlchemy 2,


00:08:27.100 --> 00:08:30.380
which was the first async API version.


00:08:30.380 --> 00:08:32.420
So now you can use async and await with SQLAlchemy,


00:08:32.420 --> 00:08:34.340
which opens up lots of possibilities.


00:08:34.340 --> 00:08:38.280
Sebastian Ramirez released SQL Model,


00:08:38.280 --> 00:08:41.420
which is like a marriage of Pydantic and SQLAlchemy,


00:08:41.420 --> 00:08:43.200
which is also super neat.


00:08:43.200 --> 00:08:45.400
But there are many other things that you can do


00:08:45.400 --> 00:08:47.560
with SQLAlchemy that are really handy.


00:08:47.560 --> 00:08:50.400
So as all the awesome lists go,


00:08:50.400 --> 00:08:54.900
here's one for a curated list of SQLAlchemy.


00:08:54.900 --> 00:08:57.640
Now, first, just a word of warning.


00:08:57.640 --> 00:08:59.360
From what I can tell,


00:08:59.360 --> 00:09:01.820
including the PR that I added yesterday,


00:09:01.820 --> 00:09:05.260
all the way back to the one in June, 2020,


00:09:05.260 --> 00:09:09.860
it doesn't seem to be getting a whole lot of love,


00:09:09.860 --> 00:09:11.620
which is unfortunate.


00:09:11.620 --> 00:09:14.300
So it seems like it might be sort of stalled out,


00:09:14.300 --> 00:09:16.340
but that said, it's still a really good list of things.


00:09:16.340 --> 00:09:19.800
So I'll pull out a couple that I think are nice here.


00:09:19.800 --> 00:09:21.540
Which ones did I want to highlight?


00:09:21.540 --> 00:09:23.440
The first one is called Continuum,


00:09:23.440 --> 00:09:26.800
SQLAlchemy Continuum.


00:09:26.800 --> 00:09:28.000
And this is versioning.


00:09:28.000 --> 00:09:32.500
So imagine you would like to have a history


00:09:32.500 --> 00:09:35.040
or a record of changes to your database.


00:09:35.040 --> 00:09:37.040
Like maybe this is some sort of financial thing.


00:09:37.040 --> 00:09:39.960
And if you see changes, you want to be able to say,


00:09:39.960 --> 00:09:42.640
this person made this change on this date


00:09:42.640 --> 00:09:47.280
when they said, you know, update, get the record,


00:09:47.280 --> 00:09:51.160
make a change and call commit on the SQL session.


00:09:51.160 --> 00:09:54.440
So what this does is it will create versions


00:09:54.440 --> 00:09:56.320
of inserts, updates and deletes.


00:09:56.320 --> 00:10:00.800
It won't store those if there's not actually a change.


00:10:00.800 --> 00:10:02.400
It supports Olympic migrations,


00:10:02.400 --> 00:10:05.740
you can revert data objects and so on.


00:10:05.740 --> 00:10:08.180
So if you want that, SQLAlchemy Continuum,


00:10:08.180 --> 00:10:11.420
it's just like one of the many, many, many things in here,


00:10:11.420 --> 00:10:12.620
which is pretty awesome.


00:10:12.620 --> 00:10:15.840
Another one I wanted to highlight is UDC.


00:10:15.840 --> 00:10:19.000
So one of the challenges that people often run into


00:10:19.000 --> 00:10:21.640
is when you're storing stuff in the database,


00:10:21.640 --> 00:10:24.480
well, a date in particular, what time is that?


00:10:24.480 --> 00:10:28.680
Is that the time of the user who might be in a different time zone


00:10:28.680 --> 00:10:30.980
than the API endpoint that it was running at?


00:10:30.980 --> 00:10:31.480
Right?


00:10:31.480 --> 00:10:38.380
So it might be nice to be able to store time zone aware things


00:10:38.380 --> 00:10:43.040
and store them as UTC values so they're always the same.


00:10:43.040 --> 00:10:46.420
And then you can convert them back to the time zone, which is pretty cool.


00:10:46.420 --> 00:10:49.120
Another one is a SQLAlchemy Utils is pretty cool.


00:10:49.120 --> 00:10:53.760
So it's got things like choice type, which I'm guessing is basically enum.


00:10:53.760 --> 00:10:57.860
a country, JSON, URL, UUID,


00:10:57.860 --> 00:11:01.520
all of these different data types, data ranges,


00:11:01.520 --> 00:11:02.680
all kinds of stuff,


00:11:02.680 --> 00:11:05.320
your RMHelpers, utility classes,


00:11:05.320 --> 00:11:07.320
and different things like that.


00:11:07.320 --> 00:11:09.840
So that's kind of a grab bag of them.


00:11:09.840 --> 00:11:11.080
Let's see.


00:11:11.080 --> 00:11:13.400
One also is called File Depot.


00:11:13.400 --> 00:11:15.840
There's cool stuff for processing images.


00:11:15.840 --> 00:11:18.320
You've got File Depot,


00:11:18.320 --> 00:11:20.200
which is a framework for easily storing


00:11:20.200 --> 00:11:23.080
and serving files out of your database on the web,


00:11:23.080 --> 00:11:25.060
as well as SQLAlchemy image attach,


00:11:25.060 --> 00:11:28.740
which is specifically about storing images in your database.


00:11:28.740 --> 00:11:31.400
Which by the way, we do pry in on Python bytes.


00:11:31.400 --> 00:11:33.300
- Cool.


00:11:33.300 --> 00:11:36.060
- You know, if you go to any page, any episode page,


00:11:36.060 --> 00:11:38.620
and you see like that, that watch it on YouTube,


00:11:38.620 --> 00:11:40.660
that little thumbnail, we go get that dynamically


00:11:40.660 --> 00:11:41.900
from YouTube and then serve it up


00:11:41.900 --> 00:11:43.800
so we don't have to depend on YouTube.


00:11:43.800 --> 00:11:47.660
So anyway, that's pretty cool.


00:11:47.660 --> 00:11:50.940
Let's see, maybe two more.


00:11:50.940 --> 00:11:53.280
There's searchable.


00:11:53.280 --> 00:11:59.140
So if you want to add full text search to your model,


00:11:59.140 --> 00:12:02.580
you can add, use this, and then only supports Postgres


00:12:02.580 --> 00:12:06.060
'cause I'm sure it depends upon some core element there,


00:12:06.060 --> 00:12:09.020
but you can also do another one from MySQL as well,


00:12:09.020 --> 00:12:09.860
which is pretty cool.


00:12:09.860 --> 00:12:14.380
And then the last one is schema display,


00:12:14.380 --> 00:12:18.500
which generates basically graphs of your models


00:12:18.500 --> 00:12:20.380
and how they relate to each other, stuff like that,


00:12:20.380 --> 00:12:22.000
which is kind of neat.


00:12:22.000 --> 00:12:22.840
- Nice.


00:12:22.840 --> 00:12:23.660
- What do y'all think?


00:12:23.660 --> 00:12:24.500
Cool stuff, right?


00:12:24.500 --> 00:12:25.800
- Yeah, very cool.


00:12:25.800 --> 00:12:28.680
- Yeah.


00:12:28.680 --> 00:12:32.520
So if you're really bought into SQLAlchemy,


00:12:32.520 --> 00:12:34.680
you owe it to yourself to just flip through this list


00:12:34.680 --> 00:12:37.200
to just go like, wait, it can do that?


00:12:37.200 --> 00:12:39.100
I had no idea that it could do that, right?


00:12:39.100 --> 00:12:41.240
And just sort of see what are the other things


00:12:41.240 --> 00:12:42.800
that people built on top of here


00:12:42.800 --> 00:12:46.520
that I think would be super, super helpful.


00:12:46.520 --> 00:12:51.520
And by the way, my PR was really to say,


00:12:51.520 --> 00:12:55.740
there's a layer called thin abstractions.


00:12:55.740 --> 00:12:58.640
And it says, you know, under the thin abstractions,


00:12:58.640 --> 00:13:01.120
we really should have us some SQL model


00:13:01.120 --> 00:13:03.200
because that thing is super popular


00:13:03.200 --> 00:13:05.360
straight out of the gate, right?


00:13:05.360 --> 00:13:06.860
So people should check this out.


00:13:06.860 --> 00:13:09.240
It's already got almost 7,000 stars


00:13:09.240 --> 00:13:10.960
and it's what a month old or something.


00:13:10.960 --> 00:13:12.520
That's crazy.


00:13:12.520 --> 00:13:13.360
- Yeah.


00:13:13.360 --> 00:13:15.160
- Maybe six weeks, but really, really new.


00:13:15.160 --> 00:13:20.160
- Yeah, but the author, I mean, so.


00:13:20.160 --> 00:13:22.280
- Yeah.


00:13:22.280 --> 00:13:23.120
- Just saying.


00:13:23.120 --> 00:13:24.240
- I know.


00:13:24.240 --> 00:13:25.600
Brandon on the audience says,


00:13:25.600 --> 00:13:27.120
"There should be a meta awesome list,


00:13:27.120 --> 00:13:29.200
like an awesome list of awesome lists."


00:13:29.200 --> 00:13:30.040
I totally agree.


00:13:30.040 --> 00:13:30.880
- I'm sure there is.


00:13:30.880 --> 00:13:33.120
(laughing)


00:13:33.120 --> 00:13:35.400
- There is, I'm sure.


00:13:35.400 --> 00:13:38.400
And yeah, quite fun.


00:13:38.400 --> 00:13:40.840
I definitely recommend people check that out.


00:13:40.840 --> 00:13:43.240
All right, Dean, that brings us to your first item.


00:13:43.240 --> 00:13:44.680
Tell us about it.


00:13:44.680 --> 00:13:47.880
- Yeah, so at work I needed to write something


00:13:47.880 --> 00:13:49.300
that required threading.


00:13:49.300 --> 00:13:52.080
And I was very afraid of threading at the beginning.


00:13:52.080 --> 00:13:55.920
Basically what we needed to do, we have some mechanism.


00:13:55.920 --> 00:13:59.280
I'm a data scientist and we need to take many queries


00:13:59.280 --> 00:14:02.520
at once and get them as paint as data frames


00:14:02.520 --> 00:14:05.620
and save them to disk and later take all of them


00:14:05.620 --> 00:14:07.280
and work with them.


00:14:07.280 --> 00:14:10.060
And instead of writing, like sending them sequentially,


00:14:10.060 --> 00:14:13.100
I wanted to send a bunch of them together.


00:14:13.100 --> 00:14:16.260
And the bonus thing I found is that when you release them


00:14:16.260 --> 00:14:19.260
to a threading, if you don't lock the threads


00:14:19.260 --> 00:14:21.100
or you don't wait for the threads,


00:14:21.100 --> 00:14:23.660
you can actually still work with the Jupyter notebook


00:14:23.660 --> 00:14:25.740
while waiting for the queries.


00:14:25.740 --> 00:14:27.420
So that was my main reasoning.


00:14:27.420 --> 00:14:31.060
And eventually after I've written most of the code,


00:14:31.060 --> 00:14:33.620
I got this blog post called


00:14:33.620 --> 00:14:36.300
the Thread Pool Executor in Python, the Complete Guide.


00:14:36.300 --> 00:14:39.300
So this is basically Jason Brownlee.


00:14:39.300 --> 00:14:42.580
He's a guy is also the guy from a machine learning mastery.


00:14:42.580 --> 00:14:44.420
so I'm very familiar with him.


00:14:44.420 --> 00:14:49.340
It's a very long blog post,


00:14:49.340 --> 00:14:51.660
so you could kind of read it as an ebook


00:14:51.660 --> 00:14:53.780
or just access the stuff you need,


00:14:53.780 --> 00:14:55.140
'cause it's like, I don't know what,


00:14:55.140 --> 00:14:56.920
two hour read maybe.


00:14:56.920 --> 00:15:01.780
And he explains everything from the beginning.


00:15:01.780 --> 00:15:04.340
He explains like what are Python threads,


00:15:04.340 --> 00:15:05.540
how to work with them,


00:15:05.540 --> 00:15:08.300
then he introduces the ThreadPool executor,


00:15:08.300 --> 00:15:11.260
which is a more convenient way to use threads.


00:15:11.260 --> 00:15:13.940
He explains about the life cycle of the,


00:15:13.940 --> 00:15:16.800
like what does he do, how to do it then


00:15:16.800 --> 00:15:19.060
with a context manager and stuff like that.


00:15:19.060 --> 00:15:23.380
And eventually what he talks about that other people do not


00:15:23.380 --> 00:15:27.060
in the, when you search for a threading tutorial,


00:15:27.060 --> 00:15:29.300
is actually about like the complete life cycle


00:15:29.300 --> 00:15:31.140
and then the usage patterns.


00:15:31.140 --> 00:15:34.020
And then he explains about IO bound versus CPU bound


00:15:34.020 --> 00:15:34.940
and everything.


00:15:34.940 --> 00:15:38.140
And he finishes up with the common questions.


00:15:38.140 --> 00:15:40.360
So this is like the link I've saved


00:15:40.360 --> 00:15:42.160
because I will forget it in a week,


00:15:42.160 --> 00:15:43.920
but the next time I need to,


00:15:43.920 --> 00:15:46.040
I just know I can come back to this


00:15:46.040 --> 00:15:48.360
and like read the common questions part.


00:15:48.360 --> 00:15:50.120
And yes, there's a questions,


00:15:50.120 --> 00:15:51.800
the questions like, how do you--


00:15:51.800 --> 00:15:52.640
- There's a lot there.


00:15:52.640 --> 00:15:53.980
(laughs)


00:15:53.980 --> 00:15:56.200
There is a lot there in this article, isn't there?


00:15:56.200 --> 00:15:57.520
- Yeah, it's a lot.


00:15:57.520 --> 00:15:59.960
But the thing is you can come back later


00:15:59.960 --> 00:16:01.220
and just take the stuff you need.


00:16:01.220 --> 00:16:03.560
Like I remember, I know I'm working,


00:16:03.560 --> 00:16:06.120
then I can ask myself, how do you set a chunk size in map?


00:16:06.120 --> 00:16:07.740
Well, it says there that you don't


00:16:07.740 --> 00:16:09.440
because that's for the process pool.


00:16:09.440 --> 00:16:10.600
But then I have another question,


00:16:10.600 --> 00:16:12.300
maybe how do you cancel a running test?


00:16:12.300 --> 00:16:14.120
And the answer is that.


00:16:14.120 --> 00:16:17.460
So I think that's a good thing to have,


00:16:17.460 --> 00:16:20.840
like to quickly access when you need to.


00:16:20.840 --> 00:16:22.700
And he finishes off with like,


00:16:22.700 --> 00:16:25.900
what's the difference from asyncIO,


00:16:25.900 --> 00:16:29.820
from threading.thread, from process flow executor.


00:16:29.820 --> 00:16:33.260
So that is a very helpful guide, very complete.


00:16:33.260 --> 00:16:37.660
And the entire blog actually explains,


00:16:37.660 --> 00:16:39.460
Like it's an entire blog dedicated


00:16:39.460 --> 00:16:40.900
to the threading pool executor


00:16:40.900 --> 00:16:43.380
and the process pool executor.


00:16:43.380 --> 00:16:48.340
- I love that it's covering the thread pool


00:16:48.340 --> 00:16:52.340
and process pools because it's easy for things


00:16:52.340 --> 00:16:55.020
to just completely get out of control.


00:16:55.020 --> 00:16:56.540
You know, as you throw more work at it,


00:16:56.540 --> 00:16:57.900
stuff can completely back up.


00:16:57.900 --> 00:17:00.580
So if you just say, create me a new thread and run that,


00:17:00.580 --> 00:17:02.140
and then another place, create me more threads.


00:17:02.140 --> 00:17:03.380
And I got a bunch more, oh look,


00:17:03.380 --> 00:17:05.160
now I have a thousand items of process,


00:17:05.160 --> 00:17:07.100
create a thousand threads.


00:17:07.100 --> 00:17:09.460
Each thread takes a lot of context switching


00:17:09.460 --> 00:17:11.760
to switch between and they take a decent amount of memory


00:17:11.760 --> 00:17:13.420
and all sorts of stuff, right?


00:17:13.420 --> 00:17:14.820
So the thread pool, you can say,


00:17:14.820 --> 00:17:17.520
queue up the work and run 10 at a time.


00:17:17.520 --> 00:17:20.780
Same for processes, which sort of sets an upper bound


00:17:20.780 --> 00:17:25.140
on how much concurrency you can deal with, right?


00:17:25.140 --> 00:17:25.980
- Yep.


00:17:25.980 --> 00:17:29.420
- Yeah, this is cool.


00:17:29.420 --> 00:17:31.280
So you talked about solving some problems


00:17:31.280 --> 00:17:32.820
in Jupyter Notebook using this.


00:17:32.820 --> 00:17:34.860
What in particular were you trying to do?


00:17:36.020 --> 00:17:41.180
So basically, I can send 1,000 queries.


00:17:41.180 --> 00:17:42.260
And once I get--


00:17:42.260 --> 00:17:44.500
we have big data, and then I have a query


00:17:44.500 --> 00:17:49.060
that takes a part of it, after maybe some group


00:17:49.060 --> 00:17:51.060
buys and limitations and stuff like that.


00:17:51.060 --> 00:17:55.260
And I want to take the data frame and save it.


00:17:55.260 --> 00:17:58.460
And then once I have the entire data from all the queries,


00:17:58.460 --> 00:18:03.200
I want to join them or maybe do some processing


00:18:03.200 --> 00:18:05.780
and then join everything.


00:18:05.780 --> 00:18:08.220
The thing is, after like 10 of those came back,


00:18:08.220 --> 00:18:10.420
I have a sample of my data that I can work with


00:18:10.420 --> 00:18:15.420
and try to manage and then have a code written.


00:18:15.420 --> 00:18:17.900
While that stuff are still written,


00:18:17.900 --> 00:18:20.140
I want to have that, like I can play with it.


00:18:20.140 --> 00:18:26.180
So if I release the other things to the threads


00:18:26.180 --> 00:18:28.680
and they work in the background,


00:18:28.680 --> 00:18:31.980
the main thread off the Jupyter notebook is open


00:18:31.980 --> 00:18:34.460
and you can start working on the same notebook.


00:18:34.460 --> 00:18:39.180
Before then, I used to open a notebook that's querying stuff,


00:18:39.180 --> 00:18:40.940
open a notebook that I'm playing with,


00:18:40.940 --> 00:18:45.940
and see that the file paths are the same


00:18:45.940 --> 00:18:48.700
so I'm not confused with some other directory


00:18:48.700 --> 00:18:51.060
of the other versioning of this data.


00:18:51.060 --> 00:18:53.200
And now it just works.


00:18:53.200 --> 00:18:54.260
- Oh, that's really cool.


00:18:54.260 --> 00:18:57.360
- And you can also add a thread for,


00:18:57.360 --> 00:18:59.860
I know with some visualizations of what's finished,


00:18:59.860 --> 00:19:02.880
what's error, what's everything.


00:19:03.780 --> 00:19:04.620
- Fantastic.


00:19:04.620 --> 00:19:06.660
Yeah, that sounds really good.


00:19:06.660 --> 00:19:08.760
I'm sure there's a lot of concurrency and parallelism


00:19:08.760 --> 00:19:10.300
in the data backend.


00:19:10.300 --> 00:19:13.260
It's just how do you sort of access that from Python, right?


00:19:13.260 --> 00:19:15.780
So how do you issue all those commands?


00:19:15.780 --> 00:19:16.780
- Yep.


00:19:16.780 --> 00:19:17.620
- Excellent.


00:19:17.620 --> 00:19:20.020
All right, let's see.


00:19:20.020 --> 00:19:23.620
Brian, anything you wanna add before I talk about Datadog?


00:19:23.620 --> 00:19:27.580
- No, just some comments like Sam,


00:19:27.580 --> 00:19:30.920
morally concurrent futures is a much less painful way


00:19:30.920 --> 00:19:32.860
to work with them at a higher level.


00:19:32.860 --> 00:19:35.580
So maybe we could get some,


00:19:35.580 --> 00:19:38.180
an article on concurrent futures on the upside sometimes.


00:19:38.180 --> 00:19:39.020
- Yeah, for sure.


00:19:39.020 --> 00:19:44.020
- So the thread pool executor gets you back futures.


00:19:44.020 --> 00:19:48.340
And then part of what's explained in the blog post


00:19:48.340 --> 00:19:49.620
is how to work with futures,


00:19:49.620 --> 00:19:52.420
like as completed or sequentially,


00:19:52.420 --> 00:19:54.580
or like you decide your strategy,


00:19:54.580 --> 00:19:56.780
but you work with the futures.


00:19:56.780 --> 00:19:57.740
- Nice.


00:19:57.740 --> 00:19:59.020
Okay, cool.


00:19:59.020 --> 00:19:59.860
- Nice.


00:20:01.780 --> 00:20:04.720
And of course, requisite shout out to Unsync,


00:20:04.720 --> 00:20:08.220
which is all sorts of awesome for this stuff.


00:20:08.220 --> 00:20:10.640
Unifies the API for direct threads


00:20:10.640 --> 00:20:16.740
for processes and AsyncIO.


00:20:16.740 --> 00:20:20.020
But what I wanna tell you all about now is Datadog.


00:20:20.020 --> 00:20:21.100
Datadog is really awesome.


00:20:21.100 --> 00:20:23.540
You should really have insight into your applications


00:20:23.540 --> 00:20:26.540
and that's what Datadog brings you.


00:20:26.540 --> 00:20:30.300
So Datadog is real-time monitoring that unifies metrics,


00:20:30.300 --> 00:20:33.720
traces logs into one tightly integrated platform.


00:20:33.720 --> 00:20:38.720
Their APM empowers developers to identify anomalies


00:20:38.720 --> 00:20:41.500
and resolve issues, especially around performance.


00:20:41.500 --> 00:20:44.860
You can begin collecting stack traces,


00:20:44.860 --> 00:20:46.540
visualize them as flame graphs


00:20:46.540 --> 00:20:48.160
and organizing them into profile types


00:20:48.160 --> 00:20:50.840
such as CPU bound, IO bound, and so on.


00:20:50.840 --> 00:20:53.420
And teams can even search specific profiles


00:20:53.420 --> 00:20:55.180
and correlate them to distributed traces


00:20:55.180 --> 00:20:58.060
to find things across different parts


00:20:58.060 --> 00:21:00.020
of your infrastructure and microservices


00:21:00.020 --> 00:21:02.280
and identify slow or underperforming code


00:21:02.280 --> 00:21:03.940
and then make it faster.


00:21:03.940 --> 00:21:06.260
Plus you can use their APM live search


00:21:06.260 --> 00:21:07.700
and you can search across the full stream


00:21:07.700 --> 00:21:10.380
of all the traces over the last 15 minutes.


00:21:10.380 --> 00:21:15.340
So try Datadog APM for free with a 14 day trial.


00:21:15.340 --> 00:21:17.460
And then Datadog will send you one of these


00:21:17.460 --> 00:21:19.380
very cute doggy t-shirts,


00:21:19.380 --> 00:21:21.380
which who wouldn't want one of those, right?


00:21:21.380 --> 00:21:23.820
So visit pythonbytes.fm/datadog


00:21:23.820 --> 00:21:25.740
or just click the link in your podcast player


00:21:25.740 --> 00:21:27.020
show notes to get started.


00:21:27.020 --> 00:21:27.840
Thanks Datadog.


00:21:29.740 --> 00:21:32.300
And Brian, back to you.


00:21:32.300 --> 00:21:33.140
- Back to me.


00:21:33.140 --> 00:21:38.620
I was, I'm gonna apologize whoever tweeted this,


00:21:38.620 --> 00:21:41.540
but somebody who's tweeted this out,


00:21:41.540 --> 00:21:45.700
linked to this article and talking about chaining operators.


00:21:45.700 --> 00:21:50.700
So this is an article by Rodrigo Serrao.


00:21:50.700 --> 00:21:52.620
- Pie don'ts.


00:21:52.620 --> 00:21:54.740
- Yeah.


00:21:54.740 --> 00:21:59.660
So I don't know what the pie don'ts are about.


00:21:59.660 --> 00:22:02.020
Just, I don't know, maybe he started blogging


00:22:02.020 --> 00:22:05.480
about things you shouldn't do in Python, but anyway


00:22:05.480 --> 00:22:07.740
this article is called "Chaining Comparison Operators"


00:22:07.740 --> 00:22:09.780
and I use chaining all the time.


00:22:09.780 --> 00:22:12.940
Mostly I use it for simple things like,


00:22:12.940 --> 00:22:15.060
oh, let me find one.


00:22:15.060 --> 00:22:17.500
A is less than B equal less than C.


00:22:17.500 --> 00:22:20.860
So ranges like min, you know, my X value


00:22:20.860 --> 00:22:21.900
is between min and max.


00:22:21.900 --> 00:22:23.300
- Yeah, that's really nice.


00:22:23.300 --> 00:22:26.380
- Yeah, my hint on that, like just tip


00:22:26.380 --> 00:22:30.860
for anybody doing that, always do them less than,


00:22:30.860 --> 00:22:34.540
don't do greater than, 'cause it's hard to do that.


00:22:34.540 --> 00:22:36.620
Anyway, so keep them like that.


00:22:36.620 --> 00:22:38.620
But this article is talking about other stuff.


00:22:38.620 --> 00:22:41.260
So this is pretty easy to think about,


00:22:41.260 --> 00:22:42.500
like the less than operator.


00:22:42.500 --> 00:22:44.940
So A is less than B, less than C,


00:22:44.940 --> 00:22:48.420
is really the same as A is less than B,


00:22:48.420 --> 00:22:50.620
and B is less than C.


00:22:50.620 --> 00:22:54.180
It is that combination, that's what chained operators are.


00:22:54.180 --> 00:22:59.180
And the importance there is it doesn't really work


00:22:59.180 --> 00:23:01.120
for some operations.


00:23:01.120 --> 00:23:04.180
And it gets into like the equal operator.


00:23:04.180 --> 00:23:07.340
So you can do A equals B or equals C,


00:23:07.340 --> 00:23:08.980
which means they're all equal.


00:23:08.980 --> 00:23:09.820
Great.


00:23:09.820 --> 00:23:10.800
What about not equal?


00:23:10.800 --> 00:23:12.200
Does that work the same way?


00:23:12.200 --> 00:23:15.460
And it doesn't, because if you've got like,


00:23:15.460 --> 00:23:19.860
A is not equal to B is not equal to C,


00:23:19.860 --> 00:23:21.680
it doesn't mean they're all different


00:23:21.680 --> 00:23:24.440
because A and C still could be the same


00:23:24.440 --> 00:23:25.960
and have that pass.


00:23:25.960 --> 00:23:28.080
So this, this article,


00:23:28.080 --> 00:23:30.040
if you're working with chained expressions,


00:23:30.040 --> 00:23:31.600
which I think you should,


00:23:31.600 --> 00:23:33.200
if you're doing complicated things,


00:23:33.200 --> 00:23:35.480
it's way, I like it better than doing it,


00:23:35.480 --> 00:23:37.120
having a bunch of ands in there,


00:23:37.120 --> 00:23:40.300
as long as you can keep it readable.


00:23:40.300 --> 00:23:44.480
But this article talks through some of the,


00:23:44.480 --> 00:23:46.280
some of the gotchas inside of,


00:23:46.280 --> 00:23:47.640
and things to watch out for,


00:23:47.640 --> 00:23:50.800
like side effects and non-constants and things like that.


00:23:50.800 --> 00:23:53.960
So a great discussion of chained operators.


00:23:53.960 --> 00:23:57.280
- I hadn't even thought of doing this not equal to,


00:23:57.280 --> 00:23:58.240
this seems wrong.


00:23:58.240 --> 00:24:00.100
- It looks wrong.


00:24:00.100 --> 00:24:06.320
- Yeah, but yeah, don't do chain not equal.


00:24:06.320 --> 00:24:09.680
That's just, and even if that's what you meant,


00:24:09.680 --> 00:24:12.880
that like A is not equal to B and B is not equal to C,


00:24:12.880 --> 00:24:14.760
but it's okay for A and C to be equal.


00:24:14.760 --> 00:24:16.120
That would be a terrible expression


00:24:16.120 --> 00:24:17.040
because it's confusing.


00:24:17.040 --> 00:24:18.720
So don't do it. - It is.


00:24:18.720 --> 00:24:22.080
My favorite one of these chainings like X,


00:24:22.080 --> 00:24:25.600
you know, seven less than X less than 10,


00:24:25.600 --> 00:24:26.920
something like that, that's nice.


00:24:26.920 --> 00:24:31.920
My favorite is converting X, if X is not none,


00:24:31.920 --> 00:24:34.500
else Y to just X or Y.


00:24:34.500 --> 00:24:37.760
That's so clean and so nice.


00:24:37.760 --> 00:24:40.840
And I never, coming from a C++ background and C#,


00:24:40.840 --> 00:24:43.480
I never thought that was possible.


00:24:43.480 --> 00:24:44.320
That's great.


00:24:44.320 --> 00:24:47.760
Dean, what do you think about this?


00:24:47.760 --> 00:24:54.640
I love it. I use it a lot. It didn't always work. I think it's still not working with


00:24:54.640 --> 00:25:01.800
a pandas data frames or pandas series and arrays. And I do wait for this to finally


00:25:01.800 --> 00:25:07.800
work. Arrays when you do an arrays like in NumPy or pandas when you do an array is less


00:25:07.800 --> 00:25:14.960
than some number. It returns a new array with true like a Boolean array with true and false.


00:25:14.960 --> 00:25:19.080
And last time I checked was a few months ago, but the last time I checked, it didn't work.


00:25:19.080 --> 00:25:26.200
I couldn't do one is less than the series is less than two and get the Boolean array.


00:25:26.200 --> 00:25:29.520
So I'm waiting for this, but I love the concept a lot.


00:25:29.520 --> 00:25:30.520
Okay.


00:25:30.520 --> 00:25:31.520
Yeah.


00:25:31.520 --> 00:25:34.200
I hadn't really considered the integration into pandas.


00:25:34.200 --> 00:25:35.200
Yeah.


00:25:35.200 --> 00:25:36.200
But of course, it makes sense.


00:25:36.200 --> 00:25:40.080
I'm not sure how would you implement that with the regular data model of like Dunder


00:25:40.080 --> 00:25:43.160
Dunder EQ or something else.


00:25:43.160 --> 00:25:45.440
- Yeah, LTE, yeah, possibly.


00:25:45.440 --> 00:25:46.440
I'm not sure either.


00:25:46.440 --> 00:25:50.200
Yeah, there's probably some magic method


00:25:50.200 --> 00:25:52.680
and it might just expand out to less than


00:25:52.680 --> 00:25:55.760
and then and, you know, like the two tests basically.


00:25:55.760 --> 00:25:56.600
Probably it does.


00:25:56.600 --> 00:25:58.800
Cool, cool.


00:25:58.800 --> 00:26:02.400
- I could ask, we should ask Brett Cannon


00:26:02.400 --> 00:26:05.360
to do a deep dive into what chain operators.


00:26:05.360 --> 00:26:07.080
- He's pulling apart all the different parts


00:26:07.080 --> 00:26:08.560
of Python syntax, right?


00:26:08.560 --> 00:26:09.400
- Yeah.


00:26:09.400 --> 00:26:12.280
- All right, I wanna give a quick shout out to Rich


00:26:12.280 --> 00:26:15.680
because it's one of our episodes.


00:26:15.680 --> 00:26:16.820
So we talk about Rich.


00:26:16.820 --> 00:26:19.240
I was gonna talk about Anthony Shaw,


00:26:19.240 --> 00:26:20.560
but I didn't have enough information.


00:26:20.560 --> 00:26:22.360
So, I mean, he's the other person


00:26:22.360 --> 00:26:24.360
who needs a shout out in every show.


00:26:24.360 --> 00:26:26.600
So I wanna talk about this article,


00:26:26.600 --> 00:26:31.600
highlighting some tools by Martin Hines.


00:26:31.600 --> 00:26:33.480
Yeah, Martin Hines.


00:26:33.480 --> 00:26:34.800
Called "Creating Beautiful Tracebacks


00:26:34.800 --> 00:26:37.640
with Python's Exception Hooks."


00:26:37.640 --> 00:26:39.920
So two things that I wanna point out here.


00:26:39.920 --> 00:26:43.080
One, Python has an exception hook mechanism,


00:26:43.080 --> 00:26:43.920
which is pretty cool.


00:26:43.920 --> 00:26:46.080
So what you can do is you can create a function


00:26:46.080 --> 00:26:50.800
that has this signature of exception type,


00:26:50.800 --> 00:26:53.760
the actual exception and the trace back.


00:26:53.760 --> 00:26:55.600
So three arguments.


00:26:55.600 --> 00:26:57.080
And if you have a function like that,


00:26:57.080 --> 00:27:00.640
you can just go to the sys and say sys.excepthook


00:27:00.640 --> 00:27:03.160
equals that function, not calling it, of course,


00:27:03.160 --> 00:27:05.120
just passing the function as the value.


00:27:05.120 --> 00:27:07.680
And then whenever there's an exception,


00:27:07.680 --> 00:27:08.880
this will be called by Python.


00:27:08.880 --> 00:27:10.600
That's pretty cool, right?


00:27:10.600 --> 00:27:11.440
- Yeah.


00:27:11.440 --> 00:27:12.260
- Yep.


00:27:12.260 --> 00:27:13.560
So depending on what you wanna do,


00:27:13.560 --> 00:27:16.720
like you could say, well, we're gonna store all the errors.


00:27:16.720 --> 00:27:18.680
Like let's imagine here's a scenario


00:27:18.680 --> 00:27:20.660
where you might make use of this.


00:27:20.660 --> 00:27:23.560
I'm gonna create an app and I'm gonna send it out.


00:27:23.560 --> 00:27:25.640
I'm gonna use Py2App or Py2XE


00:27:25.640 --> 00:27:28.560
or just let people install it somehow.


00:27:28.560 --> 00:27:31.240
And then when it runs,


00:27:31.240 --> 00:27:32.320
it's gonna run on their computers,


00:27:32.320 --> 00:27:34.120
but I wanna gather up all the exceptions


00:27:34.120 --> 00:27:37.240
of all the users across the company


00:27:37.240 --> 00:27:39.160
or the research team or whatever,


00:27:39.160 --> 00:27:41.080
you could have this submit this error


00:27:41.080 --> 00:27:42.720
along with other details right back


00:27:42.720 --> 00:27:45.160
to a database over an API, right?


00:27:45.160 --> 00:27:46.560
And then you could do like analytics,


00:27:46.560 --> 00:27:49.040
like, well, here's the most common error and so on.


00:27:49.040 --> 00:27:52.000
Of course you could use Sentry or something like that,


00:27:52.000 --> 00:27:53.520
but maybe you're trying to gather


00:27:53.520 --> 00:27:55.720
some specific information that's different, right?


00:27:55.720 --> 00:27:58.360
So that's one of the types of things you could do with this.


00:27:58.360 --> 00:28:01.080
- So I got a question before I go on.


00:28:01.080 --> 00:28:04.160
So this doesn't catch the exception.


00:28:04.160 --> 00:28:07.160
It just, it doesn't interrupt the flow.


00:28:07.160 --> 00:28:09.520
It just gets called when it happens?


00:28:09.520 --> 00:28:14.280
>> It doesn't catch the exception.


00:28:14.280 --> 00:28:18.640
It lets you basically change what kind of output comes from Python.


00:28:18.640 --> 00:28:20.640
So if you just wanted to print out like,


00:28:20.640 --> 00:28:24.000
here's a file where there was an error and here's the error message.


00:28:24.000 --> 00:28:24.800
>> Okay.


00:28:24.800 --> 00:28:28.000
>> You could do that, or the type and then the message.


00:28:28.000 --> 00:28:31.100
>> I'm just noticing the example doesn't rethrow it.


00:28:31.100 --> 00:28:33.120
So you don't have to do that.


00:28:33.120 --> 00:28:35.440
>> No, I don't believe so. I'm not a 100 percent sure.


00:28:35.440 --> 00:28:39.400
I think the process still ends


00:28:39.400 --> 00:28:44.000
if it's just a regular running script rather than a web app.


00:28:44.000 --> 00:28:47.880
I think it still ends, but you get a different kind of output.


00:28:47.880 --> 00:28:50.600
Yeah, yeah, no, you just don't get the standard print output


00:28:50.600 --> 00:28:51.840
that Python gives you, right?


00:28:51.840 --> 00:28:55.160
So you could say, avoid printing the trace back if you wanted.


00:28:55.160 --> 00:28:57.600
You could just say, this file on this line had this error.


00:28:57.600 --> 00:28:58.120
We exit.


00:28:58.120 --> 00:28:59.600
- Oh, yeah, OK, nice.


00:28:59.600 --> 00:29:03.160
- OK, so it's easy enough to do.


00:29:03.160 --> 00:29:05.480
Like for example, they have this function


00:29:05.480 --> 00:29:06.960
that they call that cause an error.


00:29:06.960 --> 00:29:11.960
And all you see when this crashes is there's a trace back,


00:29:11.960 --> 00:29:14.600
you know, this file, this line, and this module,


00:29:14.600 --> 00:29:15.760
here's the error message, right?


00:29:15.760 --> 00:29:18.720
Instead of the huge stack trace that might scare people.


00:29:18.720 --> 00:29:22.520
Okay, so I mean, obviously you can use try and accept,


00:29:22.520 --> 00:29:23.760
but this is global, right?


00:29:23.760 --> 00:29:26.040
So even if some library's calling something


00:29:26.040 --> 00:29:27.920
and you're not catching it and like, right,


00:29:27.920 --> 00:29:30.160
it's catching everywhere.


00:29:30.160 --> 00:29:31.760
Okay, so then you could do more work


00:29:31.760 --> 00:29:34.360
about breaking that apart and they talk about doing that,


00:29:34.360 --> 00:29:36.800
but the real interesting part is


00:29:36.800 --> 00:29:38.840
if you go and look at some options.


00:29:38.840 --> 00:29:41.360
So there are five, I believe there are five libraries


00:29:41.360 --> 00:29:43.900
mentioned in here that do really cool stuff


00:29:43.900 --> 00:29:44.740
for solving this.


00:29:44.740 --> 00:29:49.160
The first one is by Will McGugan's Rich Library.


00:29:49.160 --> 00:29:52.920
So you can just go from rich.traceback import install


00:29:52.920 --> 00:29:55.480
and then say install show locals as true.


00:29:55.480 --> 00:29:58.120
And then this also basically installs


00:29:58.120 --> 00:29:59.920
one of those global exception hooks.


00:30:00.800 --> 00:30:05.200
with the benefit being when you get the errors,


00:30:05.200 --> 00:30:07.840
what you get is a nice rich output.


00:30:07.840 --> 00:30:09.200
- It's super pretty.


00:30:09.200 --> 00:30:10.840
- It's pretty and it's useful.


00:30:10.840 --> 00:30:12.200
I mean, it's color highlighted


00:30:12.200 --> 00:30:14.240
so you can see where the error happened,


00:30:14.240 --> 00:30:16.840
but it also will print out in a really nice way


00:30:16.840 --> 00:30:20.360
with formatting and highlighting the locals, right?


00:30:20.360 --> 00:30:23.460
So, well, what values were passed to that function


00:30:23.460 --> 00:30:24.300
when it's crashed?


00:30:24.300 --> 00:30:26.640
Well, here's a little table of those and so on.


00:30:26.640 --> 00:30:29.760
So this is really easy to identify


00:30:29.760 --> 00:30:31.880
and at the very bottom, a nice clear way to,


00:30:31.880 --> 00:30:32.760
"Okay, what happened?"


00:30:32.760 --> 00:30:35.880
So you can do this super simple version here.


00:30:35.880 --> 00:30:37.160
There's also some manual ways


00:30:37.160 --> 00:30:39.060
to make rich print this type of stuff.


00:30:39.060 --> 00:30:43.520
Number two is Better Exceptions,


00:30:43.520 --> 00:30:46.480
which does similar stuff.


00:30:46.480 --> 00:30:48.840
You can see that it doesn't quite take over


00:30:48.840 --> 00:30:50.240
how the look and feel is so much,


00:30:50.240 --> 00:30:52.880
but it basically colorizes


00:30:52.880 --> 00:30:55.480
the standard look and feel of errors.


00:30:55.480 --> 00:30:59.520
So you can see which function, which error, and so on.


00:30:59.520 --> 00:31:00.360
So that's pretty good.


00:31:00.360 --> 00:31:01.780
And there's pretty errors.


00:31:01.780 --> 00:31:03.580
Check out pretty errors.


00:31:03.580 --> 00:31:07.300
This looks pretty good, right?


00:31:07.300 --> 00:31:09.060
It's got a lot of like bold and highlights.


00:31:09.060 --> 00:31:11.340
You can really call out the error messages


00:31:11.340 --> 00:31:13.980
and the functions involved and the modules involved.


00:31:13.980 --> 00:31:16.620
Here's one for you, Dean.


00:31:16.620 --> 00:31:18.860
The built-in one to IPython.


00:31:18.860 --> 00:31:23.860
It has Ultra TV for Ultra Traceback.


00:31:23.860 --> 00:31:25.220
And this is pretty nice, right?


00:31:25.220 --> 00:31:27.260
Actually, the IPython one's pretty good.


00:31:28.380 --> 00:31:30.780
- Yeah, the Python one is really nice.


00:31:30.780 --> 00:31:33.620
And also I was planning to talk about it in the extras,


00:31:33.620 --> 00:31:36.700
but on IPython 8, which is pretty new,


00:31:36.700 --> 00:31:39.860
they even have this improved with some color coloring


00:31:39.860 --> 00:31:43.380
of exactly where the error happened.


00:31:43.380 --> 00:31:47.580
I think this uses the 310 part or something like that.


00:31:47.580 --> 00:31:48.420
- Oh, awesome.


00:31:48.420 --> 00:31:49.260
Yeah, that's cool.


00:31:49.260 --> 00:31:51.300
We'll hear more about it when we talk about


00:31:51.300 --> 00:31:52.940
IPython 8 as well.


00:31:52.940 --> 00:31:53.820
- Yeah. - Cool.


00:31:53.820 --> 00:31:55.580
Yeah, so that's built in,


00:31:55.580 --> 00:31:57.940
kind of if you're already on the data science stack.


00:31:57.940 --> 00:32:00.500
And then finally, Stack Printer,


00:32:00.500 --> 00:32:02.140
which you can give it a trace back


00:32:02.140 --> 00:32:03.260
and it will print that out.


00:32:03.260 --> 00:32:04.540
So you can sort of do like rich,


00:32:04.540 --> 00:32:06.660
you can say set exception hook


00:32:06.660 --> 00:32:09.660
and give it a theme like darker or whatever.


00:32:09.660 --> 00:32:12.780
And then it does this pretty nice print out as well.


00:32:12.780 --> 00:32:14.460
So these are all great.


00:32:14.460 --> 00:32:18.680
I'm personally liking the rich trace backs version best,


00:32:18.680 --> 00:32:21.740
but this is really nice.


00:32:21.740 --> 00:32:24.220
Yeah, Connor out there in the audience says,


00:32:24.220 --> 00:32:26.380
"Wow, using show local SQL's true


00:32:26.380 --> 00:32:28.300
It would have saved me hours and hours of time,


00:32:28.300 --> 00:32:29.860
and you and me both.


00:32:29.860 --> 00:32:31.540
- Yeah, I feel the pain.


00:32:31.540 --> 00:32:32.620
- I do too.


00:32:32.620 --> 00:32:33.740
Because a lot of times you're like,


00:32:33.740 --> 00:32:35.660
I know it crashed and it says,


00:32:35.660 --> 00:32:38.100
none type does not have attribute whatever,


00:32:38.100 --> 00:32:39.700
but like, why is it none?


00:32:39.700 --> 00:32:41.340
I need to go back three levels, right?


00:32:41.340 --> 00:32:43.260
Like it's so good.


00:32:43.260 --> 00:32:46.300
- And then you find out you just


00:32:46.300 --> 00:32:48.100
forgot to return from the function.


00:32:48.100 --> 00:32:49.480
- Yes, exactly.


00:32:49.480 --> 00:32:53.940
- I was just debugging a test failure the other day


00:32:53.940 --> 00:32:58.140
and pytest has the option to throw a local,


00:32:58.140 --> 00:33:03.140
you can show locals with a crash or with every failure.


00:33:03.140 --> 00:33:09.060
And the, I forgot that the particular thing I was testing


00:33:09.060 --> 00:33:13.260
had like variables that were storing


00:33:13.260 --> 00:33:16.340
thousand element arrays.


00:33:16.340 --> 00:33:17.740
It just like went on for.


00:33:19.580 --> 00:33:24.140
I believe Rich has a truncate variables


00:33:24.140 --> 00:33:26.400
where it'll do an ellipsis or something like that.


00:33:26.400 --> 00:33:29.740
I think, I mean, yeah, I'm not a hundred percent sure


00:33:29.740 --> 00:33:31.460
'cause I've been looking at all five of these today.


00:33:31.460 --> 00:33:32.300
- Will's in the chat.


00:33:32.300 --> 00:33:33.140
We'll have to ask him. - Will's in the chat.


00:33:33.140 --> 00:33:34.740
You'll have to give us a shout out, Will.


00:33:34.740 --> 00:33:36.860
I think truncate is out there, right?


00:33:36.860 --> 00:33:38.740
I'm not a hundred percent sure.


00:33:38.740 --> 00:33:41.140
- I think about how can I actually,


00:33:41.140 --> 00:33:43.820
so I talk with databases and sometimes the errors


00:33:43.820 --> 00:33:48.820
from the databases are like this big Java trace


00:33:49.460 --> 00:33:54.460
And then you need to like a lot of go, a lot of apps,


00:33:54.460 --> 00:33:57.740
sorry, something, some noise here, sorry.


00:33:57.740 --> 00:34:00.780
You need to get a lot up in the browser


00:34:00.780 --> 00:34:02.660
to actually see the error.


00:34:02.660 --> 00:34:04.700
And if I could just shut it down


00:34:04.700 --> 00:34:06.720
and just give me the Python stuff.


00:34:06.720 --> 00:34:11.540
- Yeah, I don't know what setting you set for that,


00:34:11.540 --> 00:34:13.940
but certainly with this mechanism, you could set it up


00:34:13.940 --> 00:34:16.860
so that like if the word Java appears, you just stop.


00:34:16.860 --> 00:34:18.060
(laughing)


00:34:18.060 --> 00:34:19.900
- I'm gonna stop going back.


00:34:19.900 --> 00:34:21.700
And Will says, yes, that's right.


00:34:21.700 --> 00:34:23.080
Thank you, Brian, for pulling that up.


00:34:23.080 --> 00:34:24.500
Yeah, yeah, you can truncate it


00:34:24.500 --> 00:34:27.100
so that printing won't go completely insane


00:34:27.100 --> 00:34:28.240
because it could be gigabytes.


00:34:28.240 --> 00:34:30.700
I mean, it could be out of control, right?


00:34:30.700 --> 00:34:32.980
- Yeah, but I mean, even if they have


00:34:32.980 --> 00:34:35.020
a like reasonably large limit,


00:34:35.020 --> 00:34:38.100
sometimes it's just like, oh, I forgot that huge array


00:34:38.100 --> 00:34:40.140
was there and it's hard to see stuff.


00:34:40.140 --> 00:34:41.180
- Yeah, absolutely.


00:34:41.180 --> 00:34:44.900
All right, over to you, Dean.


00:34:44.900 --> 00:34:47.420
Speaking of testing, Brian was talking about testing stuff


00:34:47.420 --> 00:34:50.220
and looking at the color and so on.


00:34:50.220 --> 00:34:52.960
- Yes, I thought Brian, this would be a up your alley.


00:34:52.960 --> 00:34:57.420
So it's called "Ways I Use Testing as a Data Scientist."


00:34:57.420 --> 00:35:00.220
It's by Peter Baumgartner.


00:35:00.220 --> 00:35:04.820
And I'm a data scientist, but I also love testing.


00:35:04.820 --> 00:35:07.080
The thing about testing with data science


00:35:07.080 --> 00:35:09.660
is sometimes it's not that clear


00:35:09.660 --> 00:35:12.020
what you should test for, right?


00:35:12.020 --> 00:35:15.820
'Cause some things we do are stochastic


00:35:15.820 --> 00:35:18.300
and then you could not actually test for stuff


00:35:18.300 --> 00:35:20.060
or stuff like that.


00:35:20.060 --> 00:35:24.820
So this blog talks about like the art of testing


00:35:24.820 --> 00:35:27.100
'cause sometimes like the,


00:35:27.100 --> 00:35:28.820
it's not clear what you should test


00:35:28.820 --> 00:35:30.180
and the more experience you get,


00:35:30.180 --> 00:35:32.900
you can actually see what's coming your way.


00:35:32.900 --> 00:35:36.580
And he talks about like data validation


00:35:36.580 --> 00:35:41.580
and he is throwing many packages that could help you,


00:35:41.580 --> 00:35:45.360
packages like Pandera and Great Expectations


00:35:45.360 --> 00:35:48.840
that I think we've talked about before in the podcast.


00:35:48.840 --> 00:35:55.800
And also, the NumPy has some stuff, like isClosed,


00:35:55.800 --> 00:35:57.960
checks for two numbers that are close to each other,


00:35:57.960 --> 00:36:01.960
or array equal, assert data frame equals in pandas data


00:36:01.960 --> 00:36:02.460
frame.


00:36:02.460 --> 00:36:04.360
So he talks a lot about that.


00:36:04.360 --> 00:36:08.360
He also talks about using assert in your code.


00:36:08.360 --> 00:36:11.840
Even if you had some ad hoc stuff of analysis,


00:36:11.840 --> 00:36:13.400
use assert within the code.


00:36:13.400 --> 00:36:15.400
don't think about the tests later.


00:36:15.400 --> 00:36:18.640
Just think like, where does this thing could hurt me?


00:36:18.640 --> 00:36:20.680
He gives an example.


00:36:20.680 --> 00:36:22.920
Maybe if I'm trying to join two data frames


00:36:22.920 --> 00:36:24.800
and they think they have the same shape,


00:36:24.800 --> 00:36:28.360
I want to check if they have the same IDs.


00:36:28.360 --> 00:36:31.520
So that way I know that the join works correctly.


00:36:31.520 --> 00:36:35.120
So he asserts that the length of the IDs


00:36:35.120 --> 00:36:37.720
is the same within the two data frames.


00:36:37.720 --> 00:36:41.040
And this is not even like real testing, we would say.


00:36:41.040 --> 00:36:42.760
He doesn't use some testing framework.


00:36:42.760 --> 00:36:46.120
It just says like, write it within your code.


00:36:46.120 --> 00:36:49.000
And then continues to like hypothesis,


00:36:49.000 --> 00:36:53.020
which basically bombards the functions


00:36:53.020 --> 00:36:56.520
with a lot of ways to actually try to fail it.


00:36:56.520 --> 00:36:59.460
It continues with some other packages


00:36:59.460 --> 00:37:02.280
and eventually goes into a pytest


00:37:02.280 --> 00:37:06.700
and shows like how it would work with pytest


00:37:06.700 --> 00:37:09.000
and with like an approach that I haven't heard of,


00:37:09.000 --> 00:37:11.520
but it sounds good.


00:37:12.440 --> 00:37:14.920
arrange, act, assert.


00:37:14.920 --> 00:37:16.200
Like arrange the data,


00:37:16.200 --> 00:37:19.760
then act on those thing you want to check


00:37:19.760 --> 00:37:23.140
and then just assert if they are equal or almost equal


00:37:23.140 --> 00:37:26.420
in the thing you wanted to check for.


00:37:26.420 --> 00:37:30.760
- Yeah, it's such a easy mistake to make.


00:37:30.760 --> 00:37:33.040
Like this number equal, equal that number.


00:37:33.040 --> 00:37:37.100
But when you do in science or data science.


00:37:37.100 --> 00:37:40.340
- I'm glad he talks about structure


00:37:40.340 --> 00:37:42.640
because a lot of people that get into testing


00:37:42.640 --> 00:37:46.120
get these giant tests that do a little work,


00:37:46.120 --> 00:37:48.380
test something, do a little more work, test something.


00:37:48.380 --> 00:37:50.360
And then if it breaks,


00:37:50.360 --> 00:37:53.000
you're not sure where the failure is.


00:37:53.000 --> 00:37:56.200
So this looks, sounds fascinating.


00:37:56.200 --> 00:37:58.200
And actually I'm not sure how I missed it,


00:37:58.200 --> 00:38:01.100
but I really want a way to compare an array


00:38:01.100 --> 00:38:02.000
for almost equal.


00:38:02.000 --> 00:38:04.960
So I'm going to have to go read that,


00:38:04.960 --> 00:38:05.800
find more information.


00:38:05.800 --> 00:38:09.640
- Yeah, so NumPy and Pandas both have mechanisms for that.


00:38:09.640 --> 00:38:10.840
- It's pretty great.


00:38:10.840 --> 00:38:11.680
- Cool.


00:38:11.680 --> 00:38:13.360
- Yeah.


00:38:13.360 --> 00:38:14.280
Very nice.


00:38:14.280 --> 00:38:15.720
I know this will be helpful people.


00:38:15.720 --> 00:38:17.880
It's really, I always wonder about testing


00:38:17.880 --> 00:38:20.720
data science stuff and machine learning things and so on


00:38:20.720 --> 00:38:24.580
where you get small perturbations, but they're fine, right?


00:38:24.580 --> 00:38:29.580
It's off by one millionth of some unit,


00:38:29.580 --> 00:38:31.080
but like, that's totally good.


00:38:31.080 --> 00:38:32.960
Those are equal, but it's,


00:38:32.960 --> 00:38:35.560
it takes, I think, an extra level of thinking about it.


00:38:35.560 --> 00:38:36.400
Right?


00:38:36.400 --> 00:38:37.520
So much people focus on,


00:38:37.520 --> 00:38:39.000
well, how do you get rid of your dependencies


00:38:39.000 --> 00:38:40.320
And how do you make sure that you don't talk


00:38:40.320 --> 00:38:41.840
to the real database when you do this?


00:38:41.840 --> 00:38:42.880
So it's right.


00:38:42.880 --> 00:38:44.960
And that's one aspect that people focus on,


00:38:44.960 --> 00:38:48.200
but this working with like sciencey type stuff


00:38:48.200 --> 00:38:49.520
is its own specialty.


00:38:49.520 --> 00:38:53.120
- Yeah, I think that the entire community is,


00:38:53.120 --> 00:38:54.640
it's a fairly new community,


00:38:54.640 --> 00:38:56.500
although it's not as new as it was.


00:38:56.500 --> 00:39:00.040
And I'm not sure like we're on top


00:39:00.040 --> 00:39:02.320
of how to do tests in machine learning.


00:39:02.320 --> 00:39:06.000
Like many, we have many packages for that.


00:39:06.000 --> 00:39:08.460
We have many theories for that,


00:39:08.460 --> 00:39:13.460
but I'm not sure that we have actually one solid good way


00:39:13.460 --> 00:39:17.980
and maybe we shouldn't have, but it's a debate.


00:39:17.980 --> 00:39:19.380
- Yeah, for sure.


00:39:19.380 --> 00:39:21.360
- Same with the rest of the software world.


00:39:21.360 --> 00:39:22.360
So welcome.


00:39:22.360 --> 00:39:24.780
(all laughing)


00:39:24.780 --> 00:39:26.420
- Yeah, I see them out in the live stream says,


00:39:26.420 --> 00:39:30.300
NumPy has an assert array almost equal in NumPy.testing.


00:39:30.300 --> 00:39:34.260
I just learned there's a NumPy.testing, that's cool.


00:39:34.260 --> 00:39:35.100
- Yeah.


00:39:35.100 --> 00:39:37.980
- Awesome.


00:39:37.980 --> 00:39:39.740
while you have your screen up,


00:39:39.740 --> 00:39:41.780
do you have any extras you wanna talk about?


00:39:41.780 --> 00:39:44.140
I know IPython 8 was a thing.


00:39:44.140 --> 00:39:46.260
- Yeah, so IPython 8 was released


00:39:46.260 --> 00:39:49.820
like last month after three years


00:39:49.820 --> 00:39:51.820
of waiting for a major version.


00:39:51.820 --> 00:39:54.780
It has a lot of new features,


00:39:54.780 --> 00:39:57.060
but this is the extra part, so it won't go over them.


00:39:57.060 --> 00:40:00.380
Just two and a half things I wanted to mention.


00:40:00.380 --> 00:40:03.940
It says that it's a less code, and I love that.


00:40:03.940 --> 00:40:06.900
Like once you get better in a programming language,


00:40:06.900 --> 00:40:08.740
you understand that you shouldn't write more code,


00:40:08.740 --> 00:40:10.740
you should delete code.


00:40:10.740 --> 00:40:13.340
And that's what those guys do.


00:40:13.340 --> 00:40:16.580
And the way they could have done that


00:40:16.580 --> 00:40:19.980
is by hiring a person through the NumFocus


00:40:19.980 --> 00:40:21.980
small development grants.


00:40:21.980 --> 00:40:23.100
And I think this is important.


00:40:23.100 --> 00:40:25.540
It's actually been talked a lot about


00:40:25.540 --> 00:40:28.420
after the Log4J stuff,


00:40:28.420 --> 00:40:29.580
it's been talked about like,


00:40:29.580 --> 00:40:32.100
well, those are three guys who worked tirelessly.


00:40:32.100 --> 00:40:34.060
They have their full-time jobs


00:40:34.060 --> 00:40:35.960
and they couldn't fix the Log4J stuff


00:40:35.960 --> 00:40:39.540
maybe as quickly as some other people wanted,


00:40:39.540 --> 00:40:42.000
but then you've realized that they got donations


00:40:42.000 --> 00:40:45.080
of like a few hundred dollars within 10 years.


00:40:45.080 --> 00:40:46.880
And then after the log for JSON,


00:40:46.880 --> 00:40:48.640
suddenly they got thousand.


00:40:48.640 --> 00:40:52.360
So this, I think it shows you how the like,


00:40:52.360 --> 00:40:54.100
money could help open source stuff.


00:40:54.100 --> 00:40:57.480
And maybe if you use some package in a company,


00:40:57.480 --> 00:40:59.200
in some corporate,


00:40:59.200 --> 00:41:01.880
maybe try and think how you can give back,


00:41:01.880 --> 00:41:04.080
give back money or even if you give back code,


00:41:04.080 --> 00:41:07.680
if you free up your developers to actually contribute,


00:41:07.680 --> 00:41:10.440
this is awesome.


00:41:10.440 --> 00:41:12.840
And the half thing just mentioned,


00:41:12.840 --> 00:41:16.360
because it talks about the traceback,


00:41:16.360 --> 00:41:20.560
it shows that you can now see it's colored.


00:41:20.560 --> 00:41:23.060
You can see on the screen, the part


00:41:23.060 --> 00:41:27.400
where actually the arrow was, it's colored now.


00:41:27.400 --> 00:41:27.900
So--


00:41:27.900 --> 00:41:28.920
Oh, that's nice.


00:41:28.920 --> 00:41:30.120
Very nice to see.


00:41:30.120 --> 00:41:35.120
The example shows you, you add a function three times,


00:41:35.120 --> 00:41:37.900
but only it fails on just one input of them.


00:41:37.900 --> 00:41:40.000
So it shows you which of the three times


00:41:40.000 --> 00:41:41.040
the function failed.


00:41:41.040 --> 00:41:44.200
- Right, you call it the same thing like foo of zero


00:41:44.200 --> 00:41:46.240
plus foo of one plus foo of two.


00:41:46.240 --> 00:41:49.260
And it's the middle one that failed, not just line seven,


00:41:49.260 --> 00:41:52.660
but the second invocation with the value one where it failed,


00:41:52.660 --> 00:41:53.920
which that's awesome.


00:41:53.920 --> 00:41:55.120
- Yeah, exactly.


00:41:55.120 --> 00:41:57.680
And what, sorry?


00:41:57.680 --> 00:41:59.680
- I was gonna say the same thing for indexing


00:41:59.680 --> 00:42:02.800
into what is that a data frame or something like that?


00:42:02.800 --> 00:42:04.620
Like it's, you're chaining together


00:42:04.620 --> 00:42:06.500
like bracket zero, bracket one, bracket zero.


00:42:06.500 --> 00:42:10.260
It's the second one trying to get to the one of zero.


00:42:10.260 --> 00:42:11.440
That was the one that failed there.


00:42:11.440 --> 00:42:15.000
That's really, those are hard to come back and find.


00:42:15.000 --> 00:42:15.840
- Yep.


00:42:15.840 --> 00:42:16.660
- If you're not in a debugger,


00:42:16.660 --> 00:42:17.700
like, well, which one of these failed?


00:42:17.700 --> 00:42:21.520
Like great, array index out of bounds on line three.


00:42:21.520 --> 00:42:24.020
Well, there's three of those happening, which one?


00:42:24.020 --> 00:42:25.240
(laughs)


00:42:25.240 --> 00:42:26.080
Yeah, that's cool.


00:42:26.080 --> 00:42:26.920
I love it.


00:42:26.920 --> 00:42:29.880
Another thing is a tweet by Victor Stinner,


00:42:29.880 --> 00:42:32.800
he's a core dev, and he says,


00:42:32.800 --> 00:42:37.640
"It's now time to deprecate the standard lib URL lib module."


00:42:37.640 --> 00:42:42.020
And this has brought a lot of haters and fans.


00:42:42.020 --> 00:42:44.920
And I'm not sure what's my opinion yet,


00:42:44.920 --> 00:42:47.400
I'm not a heavy user of URL lib,


00:42:47.400 --> 00:42:52.480
but it opened up a debate, like we know how to do.


00:42:55.200 --> 00:42:57.000
- Yeah, that's really interesting.


00:42:57.000 --> 00:43:00.160
There are certain things in the standard library


00:43:00.160 --> 00:43:01.560
you're like, yeah, yeah, I know what that's there


00:43:01.560 --> 00:43:03.100
and you could use it, but you probably shouldn't use it.


00:43:03.100 --> 00:43:06.800
There's like so many better external choices


00:43:06.800 --> 00:43:09.220
that are so good that it would be kind of silly


00:43:09.220 --> 00:43:10.220
to fight them, right?


00:43:10.220 --> 00:43:12.660
That's sort of the recommendation here.


00:43:12.660 --> 00:43:15.900
- Yeah, but also like some people don't like it.


00:43:15.900 --> 00:43:17.900
They have people there that say,


00:43:17.900 --> 00:43:19.960
like they hate dependencies


00:43:19.960 --> 00:43:22.620
and sometimes you can do most of the work


00:43:23.520 --> 00:43:27.440
with the standard lib and some of the tweets said


00:43:27.440 --> 00:43:32.040
like maybe deprecate the major parts that requests can do


00:43:32.040 --> 00:43:33.720
but there are some other parts


00:43:33.720 --> 00:43:35.960
that are actually really needed.


00:43:35.960 --> 00:43:37.680
So maybe deprecate half of it.


00:43:37.680 --> 00:43:43.240
- Yeah, I'm not sure if I'm about deprecating it,


00:43:43.240 --> 00:43:46.880
but it's one thing to say there are better choices


00:43:46.880 --> 00:43:50.160
and we as a community recommend you probably just


00:43:50.160 --> 00:43:52.800
don't use this, but to deprecate it means


00:43:52.800 --> 00:43:55.880
to people who would rather go with a dependence,


00:43:55.880 --> 00:43:58.060
a lower level of dependencies,


00:43:58.060 --> 00:43:59.480
like you're giving them warnings


00:43:59.480 --> 00:44:00.420
that they shouldn't be doing this,


00:44:00.420 --> 00:44:02.160
when maybe, you know, it's unlikely


00:44:02.160 --> 00:44:04.200
it's gonna actually vanish, right?


00:44:04.200 --> 00:44:05.140
- Yeah.


00:44:05.140 --> 00:44:06.640
- There's like a fallacy though,


00:44:06.640 --> 00:44:09.920
that I think some people have that if it's in this,


00:44:09.920 --> 00:44:12.120
if they don't have dependency and it's in the standard,


00:44:12.120 --> 00:44:13.800
they're using something in the standard library,


00:44:13.800 --> 00:44:14.980
it's more solid.


00:44:14.980 --> 00:44:19.120
But I don't know if there's that many people


00:44:19.120 --> 00:44:21.880
working on URL lib right now.


00:44:21.880 --> 00:44:23.920
and some of the other parts that


00:44:23.920 --> 00:44:28.640
maybe people want to stop supporting.


00:44:28.640 --> 00:44:29.720
That's something very valid.


00:44:29.720 --> 00:44:31.960
Python still is an open source project


00:44:31.960 --> 00:44:34.760
and we can make those decisions.


00:44:34.760 --> 00:44:36.280
- Yeah, Victor actually says


00:44:36.280 --> 00:44:39.680
there are four year old security issues in your relic.


00:44:39.680 --> 00:44:43.460
So maybe it's better to use something outside of it.


00:44:43.460 --> 00:44:49.180
- Yeah, people wanted to say, but there's these issues.


00:44:49.180 --> 00:44:51.640
Yeah, I wonder if there's a way to go,


00:44:51.640 --> 00:44:53.920
well, let's look at some of the libraries that are out there,


00:44:53.920 --> 00:44:57.560
try to bring them in and just use their core


00:44:57.560 --> 00:44:59.480
to replicate that functionality.


00:44:59.480 --> 00:45:01.000
Not to say, you know, like, you could,


00:45:01.000 --> 00:45:01.840
let's just pick on requests,


00:45:01.840 --> 00:45:04.980
like bring a request in, like vendor a little bit of it in


00:45:04.980 --> 00:45:06.780
so it does what URL lib does.


00:45:06.780 --> 00:45:09.960
And just go look, okay, this is the latest,


00:45:09.960 --> 00:45:10.880
greatest that we got,


00:45:10.880 --> 00:45:13.340
and everyone's been looking at requests already.


00:45:13.340 --> 00:45:15.880
I don't know, could be interesting.


00:45:15.880 --> 00:45:16.720
- Yeah.


00:45:16.720 --> 00:45:18.960
- Yeah.


00:45:18.960 --> 00:45:21.000
And then Brandon out in the audience points out,


00:45:21.000 --> 00:45:22.600
there are also maybe environments


00:45:22.600 --> 00:45:25.080
where you can't install dependencies for security reasons.


00:45:25.080 --> 00:45:26.880
And so having things like URL lib


00:45:26.880 --> 00:45:30.920
allows you to do more with Python in those situations.


00:45:30.920 --> 00:45:33.720
- But if there's security problems with URL lib,


00:45:33.720 --> 00:45:34.840
yeah, anyway.


00:45:34.840 --> 00:45:37.040
- Just in some of the functions, you don't call those.


00:45:37.040 --> 00:45:38.080
No, I'm just kidding.


00:45:38.080 --> 00:45:41.640
All right, Brian, how about you, extras?


00:45:41.640 --> 00:45:45.080
- Just one extra, I brought this up last week.


00:45:45.080 --> 00:45:47.280
I'm currently not writing a book.


00:45:47.280 --> 00:45:48.320
- Yay!


00:45:48.320 --> 00:45:51.320
- So I want to write more blog posts.


00:45:51.320 --> 00:45:54.840
So one of the things I wanted to make sure that my blog,


00:45:54.840 --> 00:45:59.840
I migrated to pythontest.com and now it has a blog setting.


00:45:59.840 --> 00:46:03.160
And I-- - I like it,


00:46:03.160 --> 00:46:04.160
it's pretty too.


00:46:04.160 --> 00:46:06.160
- Instead of just pulling everything over


00:46:06.160 --> 00:46:10.480
from my old WordPress blog, I'm trying to edit it.


00:46:10.480 --> 00:46:14.240
So I'm up through 2012.


00:46:14.240 --> 00:46:17.360
I'm gonna go oldest to newest


00:46:17.360 --> 00:46:19.680
and gradually do things, bring things in.


00:46:19.680 --> 00:46:23.000
So that's one of my side projects.


00:46:23.000 --> 00:46:24.360
- That's a great side project.


00:46:24.360 --> 00:46:25.600
- Awesome.


00:46:25.600 --> 00:46:26.560
- Nice.


00:46:26.560 --> 00:46:27.380
What's that running on?


00:46:27.380 --> 00:46:29.440
Is that like some static site generator


00:46:29.440 --> 00:46:31.120
or other hosted thing or?


00:46:31.120 --> 00:46:34.760
- It's Hugo hosted by a free Netlify account.


00:46:34.760 --> 00:46:37.240
- Yeah, Netlify's pretty awesome.


00:46:37.240 --> 00:46:38.580
All right, I got a couple of things.


00:46:38.580 --> 00:46:41.240
I wanna give a quick shout out to, yeah, Brian.


00:46:41.240 --> 00:46:44.400
Brandon had the same question, but we got it.


00:46:44.400 --> 00:46:47.320
First of all, I have two new, my Python shorts,


00:46:47.320 --> 00:46:49.040
two new versions, two videos from there.


00:46:49.040 --> 00:46:50.360
I got beyond the list comprehension,


00:46:50.360 --> 00:46:52.640
so basically set in dictionary comprehensions,


00:46:52.640 --> 00:46:54.200
fun stuff there.


00:46:54.200 --> 00:46:55.160
- Nice picture.


00:46:55.160 --> 00:46:56.000
- Thank you.


00:46:56.000 --> 00:46:58.520
It's a little, it's like just a screenshot


00:46:58.520 --> 00:47:00.200
out of an animation.


00:47:00.200 --> 00:47:02.120
And then combining dictionaries.


00:47:02.120 --> 00:47:03.920
The Python 310 way is the title of the article.


00:47:03.920 --> 00:47:05.400
It really should be 3.9,


00:47:05.400 --> 00:47:06.480
but I kind of want to communicate,


00:47:06.480 --> 00:47:08.040
like if you're on the latest Python,


00:47:08.040 --> 00:47:09.400
how should you be doing it?


00:47:09.400 --> 00:47:13.520
It came out in 3.9, the features that are actually in there.


00:47:13.520 --> 00:47:15.640
Anyway, the pipe stuff.


00:47:15.640 --> 00:47:19.440
Dictionary one, pipe, dictionary two, pipe, dictionary three


00:47:19.440 --> 00:47:20.360
which is all fun.


00:47:20.360 --> 00:47:23.400
And then I wanted to talk about a feature


00:47:23.400 --> 00:47:24.720
over on pypi.org.


00:47:24.720 --> 00:47:25.840
I don't even know how I found this.


00:47:25.840 --> 00:47:27.120
Probably just like an accident,


00:47:27.120 --> 00:47:28.960
like bump the keyboard or something.


00:47:28.960 --> 00:47:30.120
But if I'm over here


00:47:30.120 --> 00:47:31.760
and you just want to search for something,


00:47:31.760 --> 00:47:34.220
forward slash, now you can search.


00:47:34.220 --> 00:47:36.020
What?


00:47:36.020 --> 00:47:39.600
- So now I have a theme in the browser.


00:47:39.600 --> 00:47:40.680
- Exactly.


00:47:40.680 --> 00:47:43.160
So if you're on pypi.org and you want to search,


00:47:43.160 --> 00:47:45.400
forward slash, yes.


00:47:45.400 --> 00:47:47.320
So that's pretty cool.


00:47:47.320 --> 00:47:48.340
- Yep.


00:47:48.340 --> 00:47:49.180
- Yep, all right.


00:47:49.180 --> 00:47:50.540
That's it for the extras.


00:47:50.540 --> 00:47:52.280
- Thanks.


00:47:52.280 --> 00:47:54.440
- I don't even remember what my joke is, so that's good.


00:47:54.440 --> 00:47:55.280
It'll be fine.


00:47:55.280 --> 00:47:57.360
(laughs)


00:47:57.360 --> 00:47:59.040
You all ready?


00:47:59.040 --> 00:47:59.880
- Yeah.


00:47:59.880 --> 00:48:01.280
- All right.


00:48:01.280 --> 00:48:02.480
Yeah, here we go.


00:48:02.480 --> 00:48:04.480
Oh yeah, this is another one of these sort of like


00:48:04.480 --> 00:48:06.680
frustration type of things.


00:48:06.680 --> 00:48:07.560
That's great.


00:48:07.560 --> 00:48:11.440
This comes from the Programming Humor Twitter account,


00:48:11.440 --> 00:48:13.440
you know, twitter.com/programminghumor,


00:48:13.440 --> 00:48:15.360
which is, there's a lot of good stuff in there.


00:48:15.360 --> 00:48:16.600
some that I really liked,


00:48:16.600 --> 00:48:18.320
I didn't want to necessarily put on the show,


00:48:18.320 --> 00:48:22.320
but this one is developers really frustrated


00:48:22.320 --> 00:48:24.560
that they're sucking in on their lips,


00:48:24.560 --> 00:48:25.400
they're pulling on their cheeks,


00:48:25.400 --> 00:48:27.000
they're going, "Oh, I hate this job.


00:48:27.000 --> 00:48:28.040
I hate my life.


00:48:28.040 --> 00:48:30.280
Why is this happening to me?


00:48:30.280 --> 00:48:32.280
Nevermind, I misspelled a variable."


00:48:32.280 --> 00:48:35.400
Good to go.


00:48:35.400 --> 00:48:38.920
- Yeah, linting is good.


00:48:38.920 --> 00:48:40.160
- Indeed, indeed.


00:48:40.160 --> 00:48:42.760
If you just flip through


00:48:44.600 --> 00:48:46.700
the programming humor one, it's pretty good.


00:48:46.700 --> 00:48:49.040
You know, this eight year old is learning Python


00:48:49.040 --> 00:48:51.400
after dealing with the syntax bug, she asked.


00:48:51.400 --> 00:48:53.720
If the computer knows it's missing a semicolon here,


00:48:53.720 --> 00:48:56.220
why won't it add it itself?


00:48:56.220 --> 00:48:58.280
I don't know, I really don't know, yeah?


00:48:58.280 --> 00:49:03.080
- Yeah, and like, so he follows up and says,


00:49:03.080 --> 00:49:06.080
what he meant, he meant colon, not semicolon,


00:49:06.080 --> 00:49:07.400
but so many people are like,


00:49:07.400 --> 00:49:09.920
semicolon, we're using semicolon for Python.


00:49:09.920 --> 00:49:14.480
- Exactly, there are uses, they're rare though.


00:49:14.480 --> 00:49:17.700
All right, well, fantastic.


00:49:17.700 --> 00:49:20.640
- That last one.


00:49:20.640 --> 00:49:25.400
- See, it shall not be spoken, but it's good, right?


00:49:25.400 --> 00:49:26.240
- Yeah. - Okay.


00:49:26.240 --> 00:49:27.060
There's a lot of good stuff.


00:49:27.060 --> 00:49:30.360
I recommend people go flip through that Twitter account.


00:49:30.360 --> 00:49:31.200
- Nice.


00:49:31.200 --> 00:49:32.440
- Brian, thank you as always.


00:49:32.440 --> 00:49:34.040
It's good to be back with you.


00:49:34.040 --> 00:49:35.040
- It's good to be back.


00:49:35.040 --> 00:49:38.360
- And Dean, thanks for coming on this side of


00:49:38.360 --> 00:49:40.600
the presentation and joining us for the show.


00:49:40.600 --> 00:49:42.160
- Yeah. - Thanks for having me.


00:49:42.160 --> 00:49:43.480
- Yeah, it's been great to have you always


00:49:43.480 --> 00:49:45.080
out in the audience and now on the show.


00:49:45.080 --> 00:49:46.760
So thanks.


00:49:46.760 --> 00:49:51.760
And we'll see you next time out on the live stream.


00:49:51.760 --> 00:49:54.720
- All right, bye everybody. - Bye everyone.


00:49:54.720 --> 00:49:55.560
- Bye bye.


00:49:55.560 --> 00:50:05.560
[BLANK_AUDIO]

