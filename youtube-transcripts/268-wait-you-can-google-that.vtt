WEBVTT

00:00:00.000 --> 00:00:04.000
>> Hey, all. >> Hey, Brian. Hey, Madison.


00:00:04.000 --> 00:00:08.080
>> Hey, there. >> Awesome to be streaming here on YouTube.


00:00:08.080 --> 00:00:12.680
And I think we're just going to jump right into it. So let's kick this off.


00:00:12.680 --> 00:00:16.500
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:16.500 --> 00:00:24.600
to your earbuds. This is episode 268, recorded January 26, 2022. I'm Michael Kennedy.


00:00:24.600 --> 00:00:28.640
>> And I'm Brian Aiken. >> And I'm Madison Swain-Bowden.


00:00:28.640 --> 00:00:31.640
Hey, Madison, great to have you here.


00:00:31.640 --> 00:00:33.360
- So fantastic to be here.


00:00:33.360 --> 00:00:36.280
- Yeah, yeah, we talked to you before at PyCascades


00:00:36.280 --> 00:00:39.000
where you were on the hosting side.


00:00:39.000 --> 00:00:39.840
Now we've turned the tables.


00:00:39.840 --> 00:00:41.360
- Right, tables are turned a little bit, yeah.


00:00:41.360 --> 00:00:42.800
- They absolutely have.


00:00:42.800 --> 00:00:44.040
So why don't you tell folks about yourself


00:00:44.040 --> 00:00:45.840
before we jump into the news?


00:00:45.840 --> 00:00:48.740
- Thanks, yeah, I am a senior data engineer


00:00:48.740 --> 00:00:50.800
at a company called Automattic.


00:00:50.800 --> 00:00:55.320
We do WordPress, which is, surprisingly,


00:00:55.320 --> 00:01:00.200
I recently heard that it backs 40% of the internet.


00:01:00.200 --> 00:01:01.040
And so that was really surprising.


00:01:01.040 --> 00:01:02.400
- So much of the world is on WordPress.


00:01:02.400 --> 00:01:05.080
It's unbelievable. - I know, I know.


00:01:05.080 --> 00:01:07.500
Yeah, and I work with the OpenVerse team there,


00:01:07.500 --> 00:01:09.840
which I'll talk about a little bit later in the show.


00:01:09.840 --> 00:01:11.640
- Yeah, fantastic.


00:01:11.640 --> 00:01:12.560
- Cool.


00:01:12.560 --> 00:01:16.000
- Yeah, so Brian, shall you kick us off


00:01:16.000 --> 00:01:17.200
on the first thing?


00:01:17.200 --> 00:01:19.080
- Yeah, sure. - Something about parentheses?


00:01:19.080 --> 00:01:20.720
I like Python 'cause it generally doesn't have


00:01:20.720 --> 00:01:21.560
that many parentheses,


00:01:21.560 --> 00:01:24.560
but you were gonna tell us that it should have more.


00:01:24.560 --> 00:01:27.740
- Yes, well, we have them with function calls, right?


00:01:27.740 --> 00:01:29.180
And tuples.


00:01:29.180 --> 00:01:32.020
So actually because there's function calls and tuples,


00:01:32.020 --> 00:01:34.900
both these parentheses, there's a confusion that happens.


00:01:34.900 --> 00:01:38.320
And so I just saw this the other day,


00:01:38.320 --> 00:01:42.340
a PEP 679 was added,


00:01:42.340 --> 00:01:45.440
submitted by Pablo Salgado


00:01:45.440 --> 00:01:48.440
to allow parentheses in the assert statements.


00:01:48.440 --> 00:01:51.620
So what happens like currently,


00:01:51.620 --> 00:01:52.880
I don't know if there's examples in here,


00:01:52.880 --> 00:01:57.400
but what happens currently is if you call assert,


00:01:57.400 --> 00:01:59.800
you're not supposed to use parentheses.


00:01:59.800 --> 00:02:01.480
Actually, you can't right now.


00:02:01.480 --> 00:02:03.520
You can, but it's wrong.


00:02:03.520 --> 00:02:04.360
So if you-


00:02:04.360 --> 00:02:05.780
- It's one of those princess bride things,


00:02:05.780 --> 00:02:08.000
like that doesn't mean what you think it means.


00:02:08.000 --> 00:02:09.880
- It doesn't mean what you think it means.


00:02:09.880 --> 00:02:12.760
So what happens is you give assert,


00:02:12.760 --> 00:02:16.000
asserts a statement within Python,


00:02:16.000 --> 00:02:19.640
you give it an expression to evaluate,


00:02:19.640 --> 00:02:21.960
and you can also give it a comment,


00:02:21.960 --> 00:02:26.080
like a string to add a message if the failure happens.


00:02:26.080 --> 00:02:28.980
But what happens is sometimes people think it's


00:02:28.980 --> 00:02:32.280
like a function and put those within parentheses


00:02:32.280 --> 00:02:33.600
and it looks like a function call


00:02:33.600 --> 00:02:35.480
and it looks visually fine.


00:02:35.480 --> 00:02:39.520
But what happens is it doesn't matter


00:02:39.520 --> 00:02:42.280
what the expression evaluates to


00:02:42.280 --> 00:02:46.760
because it's a two value tuple


00:02:46.760 --> 00:02:48.320
and especially if you've got a string in there


00:02:48.320 --> 00:02:50.200
the string's not non-zero.


00:02:51.200 --> 00:02:53.880
So the tuple evaluates to a true value


00:02:53.880 --> 00:02:56.200
and your assert never fails.


00:02:56.200 --> 00:02:59.420
- And the tuple is never none.


00:02:59.420 --> 00:03:01.320
And so you're good to go.


00:03:01.320 --> 00:03:03.920
- Well, it is a good way to pass the test.


00:03:03.920 --> 00:03:04.760
- Go ahead.


00:03:04.760 --> 00:03:08.060
- Yeah, I feel like this is one of those like Python gotchas


00:03:08.060 --> 00:03:10.680
like if you have one and if you assign a variable


00:03:10.680 --> 00:03:13.280
to one comma, then you get a tuple


00:03:13.280 --> 00:03:14.920
instead of just the one, right?


00:03:14.920 --> 00:03:15.760
- Yes.


00:03:15.760 --> 00:03:18.440
- And particularly with print being changed


00:03:18.440 --> 00:03:20.840
from a statement to a function,


00:03:20.840 --> 00:03:24.200
I think it like makes a lot of sense for people to assume


00:03:24.200 --> 00:03:25.900
that assert is also a function.


00:03:25.900 --> 00:03:30.400
And it's kind of an odd duckling in the language


00:03:30.400 --> 00:03:32.600
because it is just a keyword.


00:03:32.600 --> 00:03:36.000
- So this PEP is just to say, let's allow both.


00:03:36.000 --> 00:03:39.320
Let's go ahead, because right now there's no real reason


00:03:39.320 --> 00:03:44.320
to pass in a tuple as a full expression.


00:03:44.320 --> 00:03:47.480
It just doesn't, it's always gonna be true.


00:03:47.480 --> 00:03:48.600
It's a no op.


00:03:48.600 --> 00:03:51.360
So let's go ahead and add that to the language


00:03:51.360 --> 00:03:54.080
and allow people to call it as a function if they want to.


00:03:54.080 --> 00:03:56.080
And there's ASTs around it


00:03:56.080 --> 00:03:59.580
to make it like basically be the same thing.


00:03:59.580 --> 00:04:02.240
I think this is a no brainer.


00:04:02.240 --> 00:04:05.100
I think we should just get it done as soon as possible.


00:04:05.100 --> 00:04:06.880
Hopefully we can get it into then,


00:04:06.880 --> 00:04:09.280
3.11 or 3.12 or something like that.


00:04:09.280 --> 00:04:13.600
- I wonder too, if having it as a function


00:04:13.600 --> 00:04:16.520
might help with autocomplete and some IDEs.


00:04:16.520 --> 00:04:18.920
Because I think right now when you do the assert,


00:04:18.920 --> 00:04:22.280
you don't get that suggested arguments


00:04:22.280 --> 00:04:25.400
or suggested parameters that you do with a function.


00:04:25.400 --> 00:04:27.040
And so it might help there, yeah.


00:04:27.040 --> 00:04:29.160
- Yeah.


00:04:29.160 --> 00:04:31.200
- Yeah, or if you're trying to put too many things in there,


00:04:31.200 --> 00:04:32.040
it won't tell you.


00:04:32.040 --> 00:04:33.040
- Exactly, yeah. - That it's wrong,


00:04:33.040 --> 00:04:34.200
all those things, yeah.


00:04:34.200 --> 00:04:38.200
- Yeah, hopefully this will go through.


00:04:38.200 --> 00:04:39.600
- I hope so as well.


00:04:39.600 --> 00:04:43.080
So let's talk about local ghost.


00:04:43.080 --> 00:04:47.920
So Local Ghost is a blog by,


00:04:47.920 --> 00:04:51.280
let me get the name right here, by Sophie Kunin.


00:04:51.280 --> 00:04:55.840
And she blogged or wrote about everything I Googled


00:04:55.840 --> 00:04:58.880
in a week as a professional software engineer.


00:04:58.880 --> 00:04:59.720
- Oh, cool.


00:04:59.720 --> 00:05:01.100
- So I wanted to highlight this


00:05:01.100 --> 00:05:03.080
because there's a lot of folks out there


00:05:03.080 --> 00:05:05.120
who listen to the show and just are in the industry


00:05:05.120 --> 00:05:09.680
who feel like they don't quite add up


00:05:09.680 --> 00:05:11.080
or they don't belong or whatever


00:05:11.080 --> 00:05:12.940
because they feel like they get stuck and lost


00:05:12.940 --> 00:05:16.300
and banging off things, you know, and I can tell you,


00:05:16.300 --> 00:05:18.140
we were just talking about it last time with a joke,


00:05:18.140 --> 00:05:20.380
right, Brian, like, I hate programming,


00:05:20.380 --> 00:05:21.700
I hate programming, I hate programming, it works,


00:05:21.700 --> 00:05:23.340
I love programming, but the hate part,


00:05:23.340 --> 00:05:25.260
there's a lot of searching, a lot of Googling


00:05:25.260 --> 00:05:27.580
and bouncing around from that.


00:05:27.580 --> 00:05:31.880
And so here's just another pro software developer,


00:05:31.880 --> 00:05:34.680
pro in the sense it's her job,


00:05:34.680 --> 00:05:37.100
and she's been doing it for a while,


00:05:37.100 --> 00:05:39.260
and it just talks about like, okay, what did I do?


00:05:39.260 --> 00:05:42.300
So what she searches is slightly different


00:05:42.300 --> 00:05:45.760
than what we would search because she mostly is a front end


00:05:45.760 --> 00:05:49.540
and node, mostly JavaScript type of developer,


00:05:49.540 --> 00:05:50.380
but it doesn't really matter.


00:05:50.380 --> 00:05:52.800
You can sort of see there's some basic stuff.


00:05:52.800 --> 00:05:56.540
NPM React testing library.


00:05:56.540 --> 00:05:58.940
And what's nice is she puts a little comment


00:05:58.940 --> 00:05:59.900
behind a lot of these like,


00:05:59.900 --> 00:06:01.340
why did she search for this?


00:06:01.340 --> 00:06:03.300
Not just the word, like during a React upgrade,


00:06:03.300 --> 00:06:05.380
looking at dependencies to see the latest versions


00:06:05.380 --> 00:06:07.180
and checking for breaking changes.


00:06:07.180 --> 00:06:11.140
And then React Apollo release notes, totally normal.


00:06:11.140 --> 00:06:13.620
And then undo a rebase, oops.


00:06:13.620 --> 00:06:16.260
(both laughing)


00:06:16.260 --> 00:06:17.700
- Or just in there.


00:06:17.700 --> 00:06:18.660
- Yeah, exactly.


00:06:18.660 --> 00:06:21.980
Or just silence warning, or maybe it's undo commit.


00:06:21.980 --> 00:06:23.020
No, what did I do?


00:06:23.020 --> 00:06:25.080
I can't push this.


00:06:25.080 --> 00:06:28.060
Just silence warning.


00:06:28.060 --> 00:06:29.460
Don't judge me, okay?


00:06:29.460 --> 00:06:31.340
So there's a bunch of interesting things


00:06:31.340 --> 00:06:34.140
and it kind of goes along there.


00:06:34.140 --> 00:06:35.220
So you all can look through it.


00:06:35.220 --> 00:06:36.860
I don't wanna go through all the details


00:06:36.860 --> 00:06:38.260
'cause there's just a lot of stuff.


00:06:38.260 --> 00:06:40.380
What were you gonna point out there, Madison?


00:06:40.380 --> 00:06:43.700
- No, it's just a lot of fun and interesting searches.


00:06:43.700 --> 00:06:46.220
And I think like if we were all to do this sort of analysis


00:06:46.220 --> 00:06:47.980
for ourselves, it would be kind of


00:06:47.980 --> 00:06:48.820
an interesting retrospective.


00:06:48.820 --> 00:06:50.620
- It would be super interesting.


00:06:50.620 --> 00:06:53.620
Yeah, like what surprised you most about your search history?


00:06:53.620 --> 00:06:57.820
Let's see, there's a few, I think one on Friday


00:06:57.820 --> 00:07:00.580
down here at the end of the week that was pretty,


00:07:00.580 --> 00:07:02.860
yeah, I put my notes, I'll pull it up down here.


00:07:02.860 --> 00:07:06.820
So one that I thought was interesting was


00:07:06.820 --> 00:07:11.820
She searched for expecting a parsed GraphQL document.


00:07:11.820 --> 00:07:15.940
Perhaps you need to wrap the query in a string,


00:07:15.940 --> 00:07:18.500
quote GQL tag.


00:07:18.500 --> 00:07:21.380
And the content of that's not super interesting,


00:07:21.380 --> 00:07:25.480
but what that is exactly an exception message, right?


00:07:25.480 --> 00:07:27.440
In some sort of code.


00:07:27.440 --> 00:07:29.460
And for people who don't do this,


00:07:29.460 --> 00:07:31.180
you should take the error messages


00:07:31.180 --> 00:07:32.620
and put them straight into Google


00:07:32.620 --> 00:07:34.020
or straight into DuckDuckGo


00:07:34.020 --> 00:07:36.020
or wherever you put search things.


00:07:36.020 --> 00:07:38.900
and it is so good at finding problems.


00:07:38.900 --> 00:07:39.740
- With quotes.


00:07:39.740 --> 00:07:40.560
- Yeah, exactly.


00:07:40.560 --> 00:07:42.300
Maybe quotes on the really important bits, right?


00:07:42.300 --> 00:07:43.900
Like I really wanna make sure it's GraphQL


00:07:43.900 --> 00:07:45.940
and not some other document or something.


00:07:45.940 --> 00:07:48.060
- I would say half the time when I do that,


00:07:48.060 --> 00:07:50.420
it takes me exactly to the GitHub issue


00:07:50.420 --> 00:07:52.660
that describes the problem that I'm experiencing.


00:07:52.660 --> 00:07:55.140
- It's surprisingly effective, isn't it?


00:07:55.140 --> 00:07:56.620
- Yeah, it's absolutely.


00:07:56.620 --> 00:07:58.000
- Why is this works so well?


00:07:58.000 --> 00:08:01.100
The thing that blew my mind most once is I had a friend,


00:08:01.100 --> 00:08:04.500
this is way back, I mean, we're talking like early 2000s.


00:08:04.500 --> 00:08:06.220
that he was using Outlook.


00:08:06.220 --> 00:08:08.980
Don't judge him, it was a long time ago.


00:08:08.980 --> 00:08:11.300
And he was using Outlook and it was just stopped working.


00:08:11.300 --> 00:08:12.580
It gave him some weird error


00:08:12.580 --> 00:08:14.680
that had almost no message, just a number.


00:08:14.680 --> 00:08:17.040
So I just searched Outlook, that number and boom,


00:08:17.040 --> 00:08:18.400
here's the exact fix.


00:08:18.400 --> 00:08:20.140
It's just like, are you kidding me?


00:08:20.140 --> 00:08:21.060
I just love that.


00:08:21.060 --> 00:08:22.420
- Yeah, I love it so much.


00:08:22.420 --> 00:08:26.520
A couple others, semantic HTML contact details.


00:08:26.520 --> 00:08:29.620
Wanted to check if address tag was relevant here.


00:08:29.620 --> 00:08:32.340
I highlight that because here's somebody


00:08:32.340 --> 00:08:34.240
who's a professional HTML developer,


00:08:34.240 --> 00:08:36.860
basically doing front end stuff.


00:08:36.860 --> 00:08:38.460
And still they're Googling to see,


00:08:38.460 --> 00:08:40.000
does this address tag match here?


00:08:40.000 --> 00:08:41.460
Like, should I use this block,


00:08:41.460 --> 00:08:45.320
this HTML tag in this situation, right?


00:08:45.320 --> 00:08:48.160
So it's, even if you work in stuff day to day,


00:08:48.160 --> 00:08:49.620
there's stuff that you just go,


00:08:49.620 --> 00:08:52.340
like, I'm just gonna leave that to the search engine


00:08:52.340 --> 00:08:54.720
and distributed cognition and not have to,


00:08:54.720 --> 00:08:57.460
you know, memorize every detail of what I'm working in.


00:08:57.460 --> 00:09:00.060
And then finally, I just thought this was fun.


00:09:00.060 --> 00:09:01.380
Editing host file.


00:09:01.380 --> 00:09:02.980
This was the search, not the action.


00:09:02.980 --> 00:09:05.080
Desperate times and it didn't even work.


00:09:05.080 --> 00:09:05.920
(laughing)


00:09:05.920 --> 00:09:06.760
That was the comment.


00:09:06.760 --> 00:09:07.580
- No.


00:09:07.580 --> 00:09:09.660
- Anyway, I think this is fun


00:09:09.660 --> 00:09:10.660
and I thought I'd just share it


00:09:10.660 --> 00:09:13.580
because I think it's interesting


00:09:13.580 --> 00:09:15.140
for people to compare notes.


00:09:15.140 --> 00:09:19.340
- One of the things I noticed recently was I don't,


00:09:19.340 --> 00:09:22.620
I don't remember the exact way you're supposed to get


00:09:22.620 --> 00:09:24.420
to GitHub repos.


00:09:24.420 --> 00:09:28.260
So I usually just Google GitHub and then my repo name


00:09:28.260 --> 00:09:29.540
just to get to the repo.


00:09:29.540 --> 00:09:30.840
- Exactly that, yeah.


00:09:30.840 --> 00:09:32.460
(laughing)


00:09:32.460 --> 00:09:33.300
- Nice.


00:09:33.300 --> 00:09:36.460
- Well, a lot of times I search for like a project


00:09:36.460 --> 00:09:38.540
and then it brings up like PyPI


00:09:38.540 --> 00:09:41.020
or some other like the read the docs.


00:09:41.020 --> 00:09:42.900
I was like, no, I want, I want GitHub.


00:09:42.900 --> 00:09:44.500
Take me to GitHub.


00:09:44.500 --> 00:09:45.420
- Yeah, I'm always like, all right, fine.


00:09:45.420 --> 00:09:48.060
I'll click the PyPI so I can click on the source code.


00:09:48.060 --> 00:09:49.260
- Exactly, exactly.


00:09:49.260 --> 00:09:50.380
How many links do I have to go through


00:09:50.380 --> 00:09:51.820
just to get to the repo?


00:09:51.820 --> 00:09:53.000
- I know I'm two clicks away.


00:09:53.000 --> 00:09:53.840
That's good enough.


00:09:53.840 --> 00:09:54.660
Let's do this.


00:09:54.660 --> 00:09:55.860
(laughing)


00:09:55.860 --> 00:09:58.460
- Yeah, I have a couple of thoughts on this.


00:09:58.460 --> 00:10:02.300
First of all, localghost.dev is an amazing domain name.


00:10:02.300 --> 00:10:03.980
I absolutely adore that.


00:10:03.980 --> 00:10:08.220
And the second is, it's really great seeing articles


00:10:08.220 --> 00:10:09.160
and posts like this.


00:10:09.160 --> 00:10:13.380
I see a lot of seniors, particularly like senior women


00:10:13.380 --> 00:10:16.100
and other underrepresented minorities


00:10:16.100 --> 00:10:17.980
talking about this sort of thing.


00:10:17.980 --> 00:10:20.200
And I think it really helps to dispel the myth


00:10:20.200 --> 00:10:23.800
that you have to be an expert who has every command


00:10:23.800 --> 00:10:27.580
for every utility memorized in order to be a senior dev.


00:10:27.580 --> 00:10:30.900
Like a lot of us are doing these sorts of Googles, right?


00:10:30.900 --> 00:10:34.820
We're like looking up the function signature


00:10:34.820 --> 00:10:37.100
for something that's like in the standard library,


00:10:37.100 --> 00:10:38.700
you know, we're all doing this.


00:10:38.700 --> 00:10:40.900
And so I think it's really valuable


00:10:40.900 --> 00:10:43.460
to share something like this,


00:10:43.460 --> 00:10:45.580
particularly for people who are new.


00:10:45.580 --> 00:10:47.860
- Yeah, some of the best skill acquisition


00:10:47.860 --> 00:10:49.660
isn't memorizing things,


00:10:49.660 --> 00:10:52.100
it's remembering that the feature was there.


00:10:52.100 --> 00:10:53.540
- Exactly, yes. - And we look for it.


00:10:53.540 --> 00:10:54.660
- Yes. - Right, exactly.


00:10:54.660 --> 00:10:58.260
I need to know just enough that I can Google it


00:10:58.260 --> 00:11:00.380
to get to where I wanna be, absolutely.


00:11:00.380 --> 00:11:03.020
And Johnny out in the audience also thinks


00:11:03.020 --> 00:11:03.860
this is interesting.


00:11:03.860 --> 00:11:05.740
Yeah, we all think this is great, fantastic.


00:11:05.740 --> 00:11:08.860
All right, I did give a quick shout


00:11:08.860 --> 00:11:10.580
at PyCascades previously, Madison,


00:11:10.580 --> 00:11:12.100
you wanna tell us about your first item?


00:11:12.100 --> 00:11:13.660
- Yeah, I wanted to share about it.


00:11:13.660 --> 00:11:16.420
So PyCascades is coming up in less than two weeks,


00:11:16.420 --> 00:11:17.860
which is really exciting.


00:11:17.860 --> 00:11:21.460
We have another year of just excellent and diverse talks


00:11:21.460 --> 00:11:25.840
from an array of different subjects and expertise levels.


00:11:25.840 --> 00:11:27.840
Last year, we were online, and we're


00:11:27.840 --> 00:11:31.280
going to be online again this year using the same platform


00:11:31.280 --> 00:11:32.200
that we did last year.


00:11:32.200 --> 00:11:34.680
And a lot of people really enjoyed that platform,


00:11:34.680 --> 00:11:36.320
so we're excited to use it again.


00:11:36.320 --> 00:11:39.280
We're hoping to do some watch parties in Seattle, Portland,


00:11:39.280 --> 00:11:40.640
and Vancouver.


00:11:40.640 --> 00:11:45.040
But unfortunately, reality wanted us not to do that.


00:11:45.040 --> 00:11:46.560
So we opted against that.


00:11:46.560 --> 00:11:47.560
Reality intruded, yeah.


00:11:47.560 --> 00:11:48.400
Yeah.


00:11:48.400 --> 00:11:52.400
But we're so excited to be doing this again this year.


00:11:52.400 --> 00:11:54.820
And one of the things that I'm really excited about


00:11:54.820 --> 00:11:58.160
is that we have the PSF's Diversity, Equity,


00:11:58.160 --> 00:12:01.640
and Inclusion Working Group doing a meet and greet


00:12:01.640 --> 00:12:06.000
as sort of our first event on Saturday.


00:12:06.000 --> 00:12:09.000
And so they have a form that they


00:12:09.000 --> 00:12:12.080
are sharing for just trying to understand


00:12:12.080 --> 00:12:15.840
the landscape around diversity in the Python community.


00:12:15.840 --> 00:12:20.880
And so we have that linked in the show notes, if you would like to fill that out.


00:12:20.880 --> 00:12:25.140
And we are going to have socials on Friday and Saturday night.


00:12:25.140 --> 00:12:26.400
And we had a DJ last year.


00:12:26.400 --> 00:12:29.480
We're hoping to have a DJ again this year on Friday night.


00:12:29.480 --> 00:12:31.880
And then we'll be doing sprints on Sunday.


00:12:31.880 --> 00:12:34.760
And tickets are still available.


00:12:34.760 --> 00:12:37.200
We'll be selling them throughout the event too.


00:12:37.200 --> 00:12:40.160
So because it's a virtual event, there's...


00:12:40.160 --> 00:12:41.400
It's not like NFTs.


00:12:41.400 --> 00:12:43.720
There's no digital scarcity with these.


00:12:43.720 --> 00:12:47.160
So please feel free to buy a ticket whenever you have a chance.


00:12:47.160 --> 00:12:48.160
And we hope to see you there.


00:12:48.160 --> 00:12:49.160
>> That's a fun conference.


00:12:49.160 --> 00:12:52.040
I've enjoyed going to it when it was in person.


00:12:52.040 --> 00:12:53.040
So it's cool.


00:12:53.040 --> 00:12:54.040
It's still going.


00:12:54.040 --> 00:12:58.400
I can't wait for it to get back to being actually in person.


00:12:58.400 --> 00:12:59.400
>> I know.


00:12:59.400 --> 00:13:00.400
We were hoping.


00:13:00.400 --> 00:13:02.840
We were hoping to dip our toes into it this year.


00:13:02.840 --> 00:13:04.640
But just wasn't going to happen.


00:13:04.640 --> 00:13:10.760
And I should also mention, too, we're having talks from some well-known folks in the Python


00:13:10.760 --> 00:13:16.280
community like Thursday Prom and Jay Miller who I know you had on Talk Python to me recently.


00:13:16.280 --> 00:13:17.800
Yeah, just very recently.


00:13:17.800 --> 00:13:22.560
Yeah, yeah. And we have some first time speakers as well like Joseph Riddle and Isaac Nga.


00:13:22.560 --> 00:13:27.880
So we're there's a lot of really great talks that that we're looking forward to.


00:13:27.880 --> 00:13:35.560
Yeah, super. Cool. All right. Brian, back to parentheses and stuff.


00:13:35.560 --> 00:13:38.060
- Yeah, well, maybe not parentheses.


00:13:38.060 --> 00:13:40.560
- Stuff that happens between parentheses.


00:13:40.560 --> 00:13:44.600
- So this interesting article by Seth Larson


00:13:44.600 --> 00:13:47.840
that I ran across that says strict Python function


00:13:47.840 --> 00:13:49.880
parameters, and I thought strict,


00:13:49.880 --> 00:13:52.920
what do we mean by strict Python function parameters?


00:13:52.920 --> 00:13:57.440
And the idea is let's put everything together.


00:13:57.440 --> 00:14:01.520
So we have, we've got keyword only parameters


00:14:01.520 --> 00:14:04.920
and that's a little small on screen,


00:14:04.920 --> 00:14:09.920
but keyword only parameters is where you can put an asterisk


00:14:09.920 --> 00:14:13.700
in the middle of your parameter list.


00:14:13.700 --> 00:14:17.020
And it says that everything after that has to be a keyword.


00:14:17.020 --> 00:14:22.020
It can't be, you can't pass that in as positional.


00:14:22.020 --> 00:14:25.420
And I'm not sure exactly how that works really,


00:14:25.420 --> 00:14:27.480
but it's kind of, it's useful.


00:14:27.480 --> 00:14:32.020
And then you can also put defaults in there, of course,


00:14:32.020 --> 00:14:33.140
for things.


00:14:33.140 --> 00:14:35.620
And it's just that separating of where your keyword


00:14:35.620 --> 00:14:37.820
positional and keyword arguments go.


00:14:37.820 --> 00:14:40.140
And it's a cool thing.


00:14:40.140 --> 00:14:43.780
That's helped allow people to add parameters before.


00:14:43.780 --> 00:14:45.480
So this was a nice addition.


00:14:45.480 --> 00:14:47.260
And then also we've got,


00:14:47.260 --> 00:14:48.620
those are keyword only parameters.


00:14:48.620 --> 00:14:50.500
We also have positional only.


00:14:50.500 --> 00:14:51.900
So with the slash,


00:14:51.900 --> 00:14:56.180
you can say everything before the slash


00:14:56.180 --> 00:14:58.300
is a positional only.


00:14:58.300 --> 00:15:03.300
You can't pass it in as a keyword parameter.


00:15:03.300 --> 00:15:08.620
And it's, the natural progression is,


00:15:08.620 --> 00:15:11.500
hey, let's just do both of them at the same time.


00:15:11.500 --> 00:15:13.260
And I didn't actually, for some reason,


00:15:13.260 --> 00:15:14.780
I didn't realize you could do this.


00:15:14.780 --> 00:15:16.460
- I didn't either, yeah.


00:15:16.460 --> 00:15:19.100
- And so what, so then you're gonna have


00:15:19.100 --> 00:15:22.300
your positional parameters first,


00:15:22.300 --> 00:15:25.100
and then a slash, and then a star,


00:15:25.100 --> 00:15:27.320
And then you'll have,


00:15:27.320 --> 00:15:30.820
and then all your keyword parameters after that.


00:15:30.820 --> 00:15:35.480
What happens then is you're, both of them are true.


00:15:35.480 --> 00:15:38.940
So you have to have the positionals first


00:15:38.940 --> 00:15:40.700
and then the keywords after.


00:15:40.700 --> 00:15:43.140
And so what's the benefit?


00:15:43.140 --> 00:15:47.100
This just, it looks like added syntax to confuse people.


00:15:47.100 --> 00:15:48.580
But there are a lot of benefits.


00:15:48.580 --> 00:15:50.680
One of the benefits is really that your documents


00:15:50.680 --> 00:15:55.060
and your code and your example code


00:15:55.060 --> 00:15:56.700
And all examples people look,


00:15:56.700 --> 00:15:58.860
if they look up some other GAP repo


00:15:58.860 --> 00:16:01.080
or something using your API,


00:16:01.080 --> 00:16:03.660
all the examples are gonna look kind of the same.


00:16:03.660 --> 00:16:05.740
And this is sort of something we're used to


00:16:05.740 --> 00:16:07.580
in other languages.


00:16:07.580 --> 00:16:09.340
I was actually surprised in Python


00:16:09.340 --> 00:16:13.500
that you could rearrange your input arguments,


00:16:13.500 --> 00:16:14.740
especially the keyword ones,


00:16:14.740 --> 00:16:16.840
you can rearrange them and they work fine,


00:16:16.840 --> 00:16:18.420
but it's confusing sometimes.


00:16:18.420 --> 00:16:22.700
And I just actually think this is kind of a neat idea.


00:16:23.740 --> 00:16:26.740
I think that especially for API or, you know,


00:16:26.740 --> 00:16:28.740
library API entry points,


00:16:28.740 --> 00:16:31.100
doing something like this might make complete sense.


00:16:31.100 --> 00:16:33.500
And it's something I'm gonna look into considering


00:16:33.500 --> 00:16:38.200
just to make sure people use something consistently.


00:16:38.200 --> 00:16:41.060
The article also goes through a thing


00:16:41.060 --> 00:16:43.100
about empowering library authors


00:16:43.100 --> 00:16:45.820
to have flexibility to change things.


00:16:45.820 --> 00:16:48.220
And it's a good thing to read up on,


00:16:48.220 --> 00:16:50.780
but I was curious what you guys thought about


00:16:50.780 --> 00:16:54.780
If I were having to have an API or you were looking at API


00:16:54.780 --> 00:16:57.060
and it had this slash star in the middle of everything,


00:16:57.060 --> 00:16:58.100
what would you think?


00:16:58.100 --> 00:17:02.940
- I mean, I really like this concept


00:17:02.940 --> 00:17:05.160
and I'm glad that it's a feature of Python


00:17:05.160 --> 00:17:08.700
because of that uniformity that it can create.


00:17:08.700 --> 00:17:12.700
I've never had an opportunity where I felt like


00:17:12.700 --> 00:17:14.500
this was something that I really should use.


00:17:14.500 --> 00:17:15.940
But I think that's a large part


00:17:15.940 --> 00:17:18.180
because all of the stuff that I work on


00:17:18.180 --> 00:17:20.460
is usually internal tools.


00:17:20.460 --> 00:17:23.260
And so even if it is open source,


00:17:23.260 --> 00:17:26.100
there's not like a public API that I'm building.


00:17:26.100 --> 00:17:26.940
And so that--


00:17:26.940 --> 00:17:28.660
- Right, if you're consuming it versus creating it


00:17:28.660 --> 00:17:30.140
for others, it's very different, right?


00:17:30.140 --> 00:17:31.600
- Exactly, exactly, yeah.


00:17:31.600 --> 00:17:33.660
And so I think it's always a good thing


00:17:33.660 --> 00:17:36.500
to keep in the back pocket when you like have


00:17:36.500 --> 00:17:39.180
a particular contract that you really wanna enforce


00:17:39.180 --> 00:17:42.700
with how functions are used and keywords and whatnot.


00:17:42.700 --> 00:17:47.420
- Yeah, I also am glad that it's here.


00:17:47.420 --> 00:17:48.780
And for the same reason as Madison,


00:17:48.780 --> 00:17:51.720
and I don't use it very often because to the extent


00:17:51.720 --> 00:17:54.720
that I do make open source libraries that are pretty basic


00:17:54.720 --> 00:17:58.880
and don't have tons of like tutorials


00:17:58.880 --> 00:17:59.800
or anything about them,


00:17:59.800 --> 00:18:02.480
maybe I should think more about this, honestly.


00:18:02.480 --> 00:18:04.400
But I do like the idea that you can say,


00:18:04.400 --> 00:18:06.200
no, this is going to be like this,


00:18:06.200 --> 00:18:09.920
specifically for certain things.


00:18:09.920 --> 00:18:12.400
And say, this stuff you cannot use as a keyword argument,


00:18:12.400 --> 00:18:13.500
you have to just pass positional.


00:18:13.500 --> 00:18:16.240
This stuff you must, it has to go in this order


00:18:16.240 --> 00:18:17.300
and so on.


00:18:17.300 --> 00:18:18.140
Yeah, I like it.


00:18:18.140 --> 00:18:22.780
- Yeah, one of the things I see is people looking


00:18:22.780 --> 00:18:27.780
at other examples and saying like,


00:18:27.780 --> 00:18:33.360
so if you just have normal arguments,


00:18:33.360 --> 00:18:37.000
you can pass them in as keywords,


00:18:37.000 --> 00:18:39.340
even if most people use positional,


00:18:39.340 --> 00:18:41.060
and then you can reorder the keywords


00:18:41.060 --> 00:18:43.120
and put them in a different order.


00:18:43.120 --> 00:18:45.500
And then somebody else might look at your code,


00:18:45.500 --> 00:18:48.540
copy it and then take off the keywords


00:18:48.540 --> 00:18:50.960
and now they're in the wrong order.


00:18:50.960 --> 00:18:53.140
And that'll mess things up.


00:18:53.140 --> 00:18:56.940
This is a Dean added a comment of,


00:18:56.940 --> 00:19:01.940
so def underscore, yeah, star, this is legit syntax.


00:19:01.940 --> 00:19:04.300
That's funny.


00:19:04.300 --> 00:19:05.620
I can't even read that out loud.


00:19:05.620 --> 00:19:06.700
It's so confusing.


00:19:06.700 --> 00:19:09.000
- Looks like code golf is what it looks like.


00:19:09.000 --> 00:19:10.980
Goodness.


00:19:10.980 --> 00:19:13.580
- Anyway.


00:19:13.580 --> 00:19:19.900
I think it's like typing in the sense that it's a good feature that's there and it can


00:19:19.900 --> 00:19:23.860
be helpful for making things more explicit in Python.


00:19:23.860 --> 00:19:29.160
But part of the power of Python is that it's very versatile and approachable.


00:19:29.160 --> 00:19:34.060
And so it's I think it's nice too that it's not like this is something that you are required


00:19:34.060 --> 00:19:36.420
to do for every function that you write.


00:19:36.420 --> 00:19:37.420
Yeah.


00:19:37.420 --> 00:19:39.820
Yeah, I do like the flexibility there.


00:19:39.820 --> 00:19:41.340
All right.


00:19:41.340 --> 00:19:46.340
Let me tell you about something that seems a little bit


00:19:46.340 --> 00:19:49.100
contrary to the Python way,


00:19:49.100 --> 00:19:51.640
but I think people will find useful.


00:19:51.640 --> 00:19:56.640
So over on pypi.org, we have 350,000 plus packages,


00:19:56.640 --> 00:19:59.180
which is utterly mind blowing.


00:19:59.180 --> 00:20:03.380
I remember when it was 75,000,


00:20:03.380 --> 00:20:06.980
and I'm like, wow, look how many there are, it's insane.


00:20:06.980 --> 00:20:10.900
So a lot of the superpowers of Python


00:20:10.900 --> 00:20:13.180
is the ability to use these packages.


00:20:13.180 --> 00:20:16.320
And people will say, I'm using Python


00:20:16.320 --> 00:20:18.700
because it's really great at working with Excel files.


00:20:18.700 --> 00:20:21.240
Well, Python's not actually good at working with Excel files,


00:20:21.240 --> 00:20:25.460
but there are many libraries for Python, which that's true.


00:20:25.460 --> 00:20:27.380
And so you have this spectrum of,


00:20:27.380 --> 00:20:30.420
what do people mean when they say Python is great?


00:20:30.420 --> 00:20:33.720
But I do think these packages clearly are super important.


00:20:33.720 --> 00:20:36.220
So why do I bring this up to start this section off?


00:20:36.220 --> 00:20:39.340
I want to talk about a way to not use PyPI,


00:20:39.340 --> 00:20:42.180
but still do some cool stuff.


00:20:42.180 --> 00:20:45.980
There's this thing called Murek, as in small requests,


00:20:45.980 --> 00:20:49.780
over here, created by--


00:20:49.780 --> 00:20:53.020
it's got a name.


00:20:53.020 --> 00:20:54.860
Yes, if it pulls up.


00:20:54.860 --> 00:20:57.380
Shriyaram.


00:20:57.380 --> 00:20:59.980
So very cool project here.


00:20:59.980 --> 00:21:02.820
And the idea is it's request-like,


00:21:02.820 --> 00:21:04.420
not a drop-in replacement for requests,


00:21:04.420 --> 00:21:06.860
but like requests with limited features.


00:21:06.860 --> 00:21:10.220
But if you're using a limited subset of what requests could do,


00:21:10.220 --> 00:21:14.320
you could use this library and have zero external dependencies,


00:21:14.320 --> 00:21:20.420
no virtual environments required, no pip install -r or friends required,


00:21:20.420 --> 00:21:24.900
and just have a real simple thing and not have to fall back to just urllib,


00:21:24.900 --> 00:21:26.620
which is pretty cool.


00:21:26.620 --> 00:21:30.360
So it does standard stuff.


00:21:30.360 --> 00:21:35.360
I would recommend maybe even from import mu rec as requests


00:21:35.360 --> 00:21:39.120
and then request.get request.post.


00:21:39.120 --> 00:21:40.440
- See what breaks, yeah.


00:21:40.440 --> 00:21:41.260
- Yeah, exactly.


00:21:41.260 --> 00:21:42.800
I mean, and then see if it works or not.


00:21:42.800 --> 00:21:47.800
So it does have some limitations, quite a few actually.


00:21:47.800 --> 00:21:50.780
Like it doesn't support connection pooling, for example.


00:21:50.780 --> 00:21:52.800
But if you do request.get, neither does that.


00:21:52.800 --> 00:21:54.080
You have to create a client session


00:21:54.080 --> 00:21:56.040
and then use the session to do get and so on


00:21:56.040 --> 00:21:57.920
if you want connection pooling.


00:21:57.920 --> 00:21:59.620
Apparently uses a lot less memory.


00:21:59.620 --> 00:22:02.980
But the main reason besides just convenience of like,


00:22:02.980 --> 00:22:05.460
I want to give you a Python file you can run,


00:22:05.460 --> 00:22:09.600
or a set of Python files you can run the top level one


00:22:09.600 --> 00:22:13.020
without any external dependencies.


00:22:13.020 --> 00:22:14.340
So that's pretty nice.


00:22:14.340 --> 00:22:16.500
The other one is to avoid supply chain


00:22:16.500 --> 00:22:18.380
attack vulnerabilities, right?


00:22:18.380 --> 00:22:23.040
We've talked before about people putting malicious stuff


00:22:23.040 --> 00:22:23.880
into PyPI.


00:22:23.880 --> 00:22:28.180
We talked about the guy, Marek, I believe it was,


00:22:28.180 --> 00:22:32.260
who had sabotaged his NPM packages and those kind of things


00:22:32.260 --> 00:22:37.100
and the cascading change of the super dependencies


00:22:37.100 --> 00:22:40.380
in the JavaScript world meant that was really, really bad.


00:22:40.380 --> 00:22:41.600
So here's a way you could put something


00:22:41.600 --> 00:22:44.080
that does requests like things into your code


00:22:44.080 --> 00:22:46.460
and it doesn't have any dependencies.


00:22:46.460 --> 00:22:49.800
It doesn't have, there's no way someone's going to take over


00:22:49.800 --> 00:22:52.380
that account and put something malicious there


00:22:52.380 --> 00:22:54.580
or even maybe worse is like the dependency


00:22:54.580 --> 00:22:56.080
of the dependency of the dependency


00:22:56.080 --> 00:22:57.980
is where the problem is.


00:22:57.980 --> 00:23:01.180
So, this I think is pretty interesting.


00:23:01.180 --> 00:23:05.020
- Yeah, security is in a lot of people's minds recently


00:23:05.020 --> 00:23:07.700
with the log4j stuff and then, yeah,


00:23:07.700 --> 00:23:10.780
all of these supply chain attacks that are happening,


00:23:10.780 --> 00:23:12.960
particularly in the JavaScript space.


00:23:12.960 --> 00:23:17.780
It seems like a lot more happens in that area


00:23:17.780 --> 00:23:19.560
more so than like Python,


00:23:19.560 --> 00:23:21.580
but I feel like the packaging story


00:23:21.580 --> 00:23:23.260
is really similar in both.


00:23:23.260 --> 00:23:26.100
So it's useful to take the lessons learned


00:23:26.100 --> 00:23:29.980
from the JavaScript ecosystem, pull them back into Python.


00:23:29.980 --> 00:23:31.820
I think something like this is really valuable,


00:23:31.820 --> 00:23:35.740
particularly, I know some companies have just


00:23:35.740 --> 00:23:38.100
very difficult bureaucratic processes


00:23:38.100 --> 00:23:40.460
to like get requirements in.


00:23:40.460 --> 00:23:43.320
And so if you say like, this is just this one file,


00:23:43.320 --> 00:23:45.540
it has this license, we just need this,


00:23:45.540 --> 00:23:46.500
makes it a lot easier.


00:23:46.500 --> 00:23:48.780
- We can review the one file, it won't auto update.


00:23:48.780 --> 00:23:49.820
- Exactly.


00:23:49.820 --> 00:23:52.060
- Yeah, so that's the good news.


00:23:52.060 --> 00:23:53.980
There's a couple of things worth pointing out.


00:23:53.980 --> 00:23:58.900
went over in the PR section is a lot of the stuff inside


00:23:58.900 --> 00:24:01.500
is not PEP 8 compliant or other stuff.


00:24:01.500 --> 00:24:02.980
So if you drop it into your project,


00:24:02.980 --> 00:24:04.480
it'll give you a bunch of warnings.


00:24:04.480 --> 00:24:06.860
So you might want to run black on it


00:24:06.860 --> 00:24:08.280
before you put it in your project.


00:24:08.280 --> 00:24:10.360
I did a PR that's suggesting that that should just


00:24:10.360 --> 00:24:11.300
be part of it.


00:24:11.300 --> 00:24:13.140
There's an ongoing conversation about that.


00:24:13.140 --> 00:24:15.580
Also, it doesn't support a couple of the main methods,


00:24:15.580 --> 00:24:21.580
like .json for consuming APIs and raise for status,


00:24:21.580 --> 00:24:23.380
which if you don't get a successful status,


00:24:23.380 --> 00:24:24.340
that are raising exceptions,


00:24:24.340 --> 00:24:26.580
so you don't carry on with bad data.


00:24:26.580 --> 00:24:28.160
So those two are really good.


00:24:28.160 --> 00:24:31.540
The race for status is supposed to be put in soon.


00:24:31.540 --> 00:24:34.060
The JSON one is up for debate.


00:24:34.060 --> 00:24:36.920
With all that said, I have a branch


00:24:36.920 --> 00:24:39.380
that has all those fixes as F8 compliant,


00:24:39.380 --> 00:24:43.420
f-strings has those two functions that you might use.


00:24:43.420 --> 00:24:47.520
So people can use that as well if they want.


00:24:47.520 --> 00:24:49.660
- Did you put a PR to get those back in?


00:24:49.660 --> 00:24:51.160
- Oh yeah, yeah, that's what I was pointing out before.


00:24:51.160 --> 00:24:52.180
I absolutely, yeah.


00:24:52.180 --> 00:24:55.140
They're not, I'm debating with the author


00:24:55.140 --> 00:24:57.980
whether or not he thinks that those are appropriate


00:24:57.980 --> 00:24:58.800
to add to it.


00:24:58.800 --> 00:25:02.700
- Maybe you could rename it medium rack if.


00:25:02.700 --> 00:25:04.380
(laughing)


00:25:04.380 --> 00:25:05.660
- A medium sized rack.


00:25:05.660 --> 00:25:07.140
So anyway, it's not super important.


00:25:07.140 --> 00:25:09.500
It's not that big of a deal, but I mean,


00:25:09.500 --> 00:25:13.140
you know, the effect of actually adding those,


00:25:13.140 --> 00:25:15.900
they're not huge amounts of code that you've got to add


00:25:15.900 --> 00:25:16.880
to make this happen.


00:25:16.880 --> 00:25:20.860
Like the JSON one is literally one line of code.


00:25:20.860 --> 00:25:23.900
You could take it. I mean, do you count the function definition of the separate line?


00:25:23.900 --> 00:25:27.180
It's two if you got to count the def, but it's like super super small


00:25:27.180 --> 00:25:31.180
So if people can grab mine and they can add it or they can grab theirs and then


00:25:31.180 --> 00:25:33.260
Add it whatever


00:25:33.260 --> 00:25:37.340
So now that's the good news. You're good the project and make mu2 rec


00:25:37.340 --> 00:25:40.780
So much more mu


00:25:40.780 --> 00:25:45.340
Yeah, exactly. Now. Here's the reality of what I found. I have a lot of projects that have


00:25:45.900 --> 00:25:49.500
10, 20 dependencies because there are tens of thousands


00:25:49.500 --> 00:25:52.300
of lines of code, and they do a lot of stuff.


00:25:52.300 --> 00:25:53.860
Every single one of those where I thought,


00:25:53.860 --> 00:25:55.660
oh, this would be kind of fun just to cut down


00:25:55.660 --> 00:25:58.220
on the dependencies and the dependencies of the dependencies


00:25:58.220 --> 00:25:59.860
because what I do with the requests is real simple.


00:25:59.860 --> 00:26:02.580
Usually call an API, get some JSON,


00:26:02.580 --> 00:26:04.460
get some values out of it.


00:26:04.460 --> 00:26:06.220
It'd be nice to do something like this.


00:26:06.220 --> 00:26:10.260
The reality is so many things depend upon requests.


00:26:10.260 --> 00:26:15.500
Sentry, for example, depends on requests.


00:26:15.500 --> 00:26:19.200
MailChimp's API depends on requests,


00:26:19.200 --> 00:26:20.940
and et cetera, et cetera, et cetera.


00:26:20.940 --> 00:26:24.700
So by the time you get a project built up with other stuff,


00:26:24.700 --> 00:26:28.400
it's already got requests required and installed and so on.


00:26:28.400 --> 00:26:30.900
So it's like, this is for like a smallish app


00:26:30.900 --> 00:26:33.300
that doesn't have really many other dependencies


00:26:33.300 --> 00:26:34.780
that I think this makes a lot of sense for,


00:26:34.780 --> 00:26:37.300
'cause if you depend on a lot of things,


00:26:37.300 --> 00:26:38.460
you're gonna end up with requests


00:26:38.460 --> 00:26:39.860
as a dependency real quick.


00:26:39.860 --> 00:26:43.700
- Yeah, that's a really solid point.


00:26:43.700 --> 00:26:44.900
- Yeah, thanks.


00:26:44.900 --> 00:26:47.380
Lastly, for people out there listening,


00:26:47.380 --> 00:26:51.380
wouldn't it be fantastic if a request itself


00:26:51.380 --> 00:26:55.260
offered an official mini request


00:26:55.260 --> 00:26:58.100
and HTTPX offered a single file version


00:26:58.100 --> 00:27:01.340
and AIO HTTP client offered a single file version?


00:27:01.340 --> 00:27:05.780
Like, yeah, it only has 80% of the functions,


00:27:05.780 --> 00:27:09.380
but if those functions don't have dependencies,


00:27:09.380 --> 00:27:11.300
maybe just drop those in and offer,


00:27:11.300 --> 00:27:13.500
I don't know, it would be great.


00:27:13.500 --> 00:27:15.980
One of the things I like about actually alternatives


00:27:15.980 --> 00:27:19.740
either within a project itself as an alternative


00:27:19.740 --> 00:27:22.940
or these forked projects that have the same API


00:27:22.940 --> 00:27:24.180
is they might have benefits.


00:27:24.180 --> 00:27:28.860
And so, but you have to weigh those.


00:27:28.860 --> 00:27:32.860
So it does encourage actually a nice software design


00:27:32.860 --> 00:27:33.780
of a couple of things.


00:27:33.780 --> 00:27:36.020
One of them is isolate your dependencies


00:27:36.020 --> 00:27:39.100
to as few files as possible.


00:27:39.100 --> 00:27:43.500
So if you only have one of your modules accessing requests,


00:27:43.500 --> 00:27:45.300
then you only have one place you need to change it


00:27:45.300 --> 00:27:47.180
to this new module import.


00:27:47.180 --> 00:27:48.300
- Yeah, absolutely.


00:27:48.300 --> 00:27:51.780
- The other thing is testing, testing your behavior.


00:27:51.780 --> 00:27:53.700
So instead of implementation,


00:27:53.700 --> 00:27:56.840
so if you test your behavior and you've got it isolated,


00:27:56.840 --> 00:28:01.080
you can drop in a thing, run your CI, see if it all works,


00:28:01.080 --> 00:28:05.540
throw it to a few beta people and run with it if it works.


00:28:05.540 --> 00:28:08.500
- Yeah, quite cool.


00:28:08.500 --> 00:28:14.140
Yeah, one thing that could be useful and also potentially extremely dangerous is some like


00:28:14.140 --> 00:28:19.360
Python level capacity for shimming a module.


00:28:19.360 --> 00:28:24.360
So like in the situation that you describe, Michael, where you have a ton of dependencies


00:28:24.360 --> 00:28:30.200
that all require requests, you could pull in something like mu rec, and then just say


00:28:30.200 --> 00:28:32.000
like this is a request.


00:28:32.000 --> 00:28:35.580
Python, I want you to think of this as requests.


00:28:35.580 --> 00:28:38.020
But obviously, that has, I mean, it's just an idea.


00:28:38.020 --> 00:28:40.180
It has some pretty bad security implications


00:28:40.180 --> 00:28:43.180
with people being able to usurp that, so.


00:28:43.180 --> 00:28:46.300
- Yeah, it may cause some unexpected behavior,


00:28:46.300 --> 00:28:48.060
but yeah, it's also, could be good.


00:28:48.060 --> 00:28:52.200
All right, just put your entire application


00:28:52.200 --> 00:28:54.180
inside of a patch statement.


00:28:54.180 --> 00:28:55.180
No, I'm just kidding.


00:28:55.180 --> 00:28:58.540
- What I'm hearing is that we need to make


00:28:58.540 --> 00:29:01.500
our entire application one file in every case.


00:29:01.500 --> 00:29:02.340
- Yes, yes.


00:29:02.340 --> 00:29:03.180
- And that will just solve all the problems.


00:29:03.180 --> 00:29:04.260
- And just one function, actually.


00:29:04.260 --> 00:29:05.100
- Just one main.


00:29:05.100 --> 00:29:07.440
- It's perfect.


00:29:07.440 --> 00:29:08.280
- No, I'm just kidding.


00:29:08.280 --> 00:29:10.340
- We don't even need a function in Python, right?


00:29:10.340 --> 00:29:12.260
- Yeah, okay, yeah, no functions.


00:29:12.260 --> 00:29:13.100
- Gotcha.


00:29:13.100 --> 00:29:15.660
- Yeah, it just runs once, top to bottom, let's go.


00:29:15.660 --> 00:29:18.620
Now I was dreaming of a world where like,


00:29:18.620 --> 00:29:21.180
there's a simple use case that you don't have to have


00:29:21.180 --> 00:29:22.820
a bunch of dependencies and dependencies,


00:29:22.820 --> 00:29:25.300
but it's probably a little extreme


00:29:25.300 --> 00:29:26.980
and you don't wanna take it very far at all.


00:29:26.980 --> 00:29:29.280
All right, Brian, what you got for the next one here?


00:29:29.280 --> 00:29:30.120
- Oh, this is--


00:29:30.120 --> 00:29:30.940
- Oh, that's your extra?


00:29:30.940 --> 00:29:33.820
Oh, no, Madison, you're taking us out for our main items.


00:29:33.820 --> 00:29:34.660
Go for it.


00:29:34.660 --> 00:29:37.180
- Yeah, welcome to Openverse.


00:29:37.180 --> 00:29:40.980
This is not the metaverse, but everything is,


00:29:40.980 --> 00:29:43.460
I say call the tech industry a song


00:29:43.460 --> 00:29:45.480
because everything's a verse these days.


00:29:45.480 --> 00:29:51.660
But this is a search engine for openly licensed media.


00:29:51.660 --> 00:29:54.620
This is something that the WordPress community


00:29:54.620 --> 00:29:55.900
is supporting.


00:29:55.900 --> 00:29:58.620
And so what I mean by openly licensed media


00:29:58.620 --> 00:30:01.960
is images and audio.


00:30:01.960 --> 00:30:05.400
That's what we have currently, but we're hoping down the line


00:30:05.400 --> 00:30:12.680
to have things like video, 3D models, text, all assets


00:30:12.680 --> 00:30:16.440
and media that you can use without having to pay for them.


00:30:16.440 --> 00:30:20.640
And just some licenses require attribution, others don't.


00:30:20.640 --> 00:30:24.080
A lot of them are free for remix and reuse.


00:30:24.080 --> 00:30:27.120
And so this used to be called CC Search


00:30:27.120 --> 00:30:29.920
under the Creative Commons purview,


00:30:29.920 --> 00:30:32.520
but they've handed it off to us to help Shepard


00:30:32.520 --> 00:30:33.680
into the future.


00:30:33.680 --> 00:30:38.600
And so if you are looking for content to use on your blog


00:30:38.600 --> 00:30:42.100
or your podcast or anything that you're creating,


00:30:42.100 --> 00:30:43.880
any sort of content that you're creating.


00:30:43.880 --> 00:30:45.520
- Your conference presentations,


00:30:45.520 --> 00:30:47.920
your YouTube, your courses, whatever.


00:30:47.920 --> 00:30:50.880
There's a lot of times I'm like, I need an image


00:30:50.880 --> 00:30:53.440
and I need to be able to use it legally.


00:30:53.440 --> 00:30:55.440
- Or snippet of audio to throw someplace.


00:30:55.440 --> 00:30:56.320
This is awesome.


00:30:56.320 --> 00:30:58.840
- Yeah, so I'll show an example here in the live stream.


00:30:58.840 --> 00:31:01.960
I'm going to type Jupyter, and I have to spell it right.


00:31:01.960 --> 00:31:04.640
I typed Jupyter last time.


00:31:04.640 --> 00:31:08.320
And yeah, you just get a bunch of pictures of Jupyter


00:31:08.320 --> 00:31:10.040
and then also different sound clips


00:31:10.040 --> 00:31:13.320
that we have mixed in if you want all of the results.


00:31:13.320 --> 00:31:16.000
You can also filter by just certain media types,


00:31:16.000 --> 00:31:19.160
like seeing just images or seeing just the audio results.


00:31:19.160 --> 00:31:20.680
And then when you click on an image,


00:31:20.680 --> 00:31:22.720
you'll see the attribution for that image


00:31:22.720 --> 00:31:23.920
right there alongside it.


00:31:23.920 --> 00:31:26.260
And so you can just copy that and put it in your website


00:31:26.260 --> 00:31:28.240
after you link the image.


00:31:28.240 --> 00:31:31.240
And we have over 600 million images in OpenVerse,


00:31:31.240 --> 00:31:35.280
and more audio, and more images, and more just media in general


00:31:35.280 --> 00:31:36.160
to come.


00:31:36.160 --> 00:31:37.400
Fantastic.


00:31:37.400 --> 00:31:37.960
Alvaro asks--


00:31:37.960 --> 00:31:39.220
Oh, and if we search-- sorry.


00:31:39.220 --> 00:31:43.840
If we search Jupyter, there's some fun conference-y screenshots.


00:31:43.840 --> 00:31:44.600
Oh, yeah, right on.


00:31:44.600 --> 00:31:46.920
So there's lots to use here.


00:31:46.920 --> 00:31:48.400
Cool.


00:31:48.400 --> 00:31:50.880
Alvaro asks, can you search by license type?


00:31:50.880 --> 00:31:51.640
Yes.


00:31:51.640 --> 00:31:54.680
So I'm sharing this in the live stream,


00:31:54.680 --> 00:31:57.040
but on the right, the first filter that we have


00:31:57.040 --> 00:31:59.320
is by different license types.


00:31:59.320 --> 00:32:01.560
And a lot of these are, I believe,


00:32:01.560 --> 00:32:04.000
they're Creative Commons license, but not all of them are.


00:32:04.000 --> 00:32:08.560
We have public domain markered licenses as well.


00:32:08.560 --> 00:32:10.900
And then you can search by use too,


00:32:10.900 --> 00:32:12.120
depending on how you're using that.


00:32:12.120 --> 00:32:13.440
So if you're using it commercially,


00:32:13.440 --> 00:32:16.440
that's gonna have different licenses and implications


00:32:16.440 --> 00:32:19.040
for you versus modifying and adapting.


00:32:19.040 --> 00:32:22.480
And then we have, I mean, Openverse serves as like


00:32:22.480 --> 00:32:27.220
an aggregate for different entities that host some


00:32:27.220 --> 00:32:29.680
of this openly licensed media.


00:32:29.680 --> 00:32:34.600
So things like museums, NASA's photos, that sort of thing.


00:32:34.600 --> 00:32:37.000
And so you can also search by provider too.


00:32:37.000 --> 00:32:38.660
So if you're looking for space photos and you say,


00:32:38.660 --> 00:32:41.400
I just want NASA's authority on this,


00:32:41.400 --> 00:32:46.400
then you can sort of filter by that aggregate.


00:32:46.400 --> 00:32:48.640
- Yeah.


00:32:48.640 --> 00:32:51.240
This is a constant challenge and it's great.


00:32:51.240 --> 00:32:52.640
It's a challenge for blogs.


00:32:52.640 --> 00:32:54.720
It's a challenge for all these things, right?


00:32:54.720 --> 00:32:56.400
But it makes perfect sense why WordPress


00:32:56.400 --> 00:32:57.960
would be interested in this.


00:32:57.960 --> 00:32:58.800
- Totally, yeah.


00:32:58.800 --> 00:33:00.800
And we're hoping to have it integrated


00:33:00.800 --> 00:33:02.580
into WordPress down the line.


00:33:02.580 --> 00:33:05.360
So if you're working on a WordPress site


00:33:05.360 --> 00:33:07.040
and you wanna add an image,


00:33:07.040 --> 00:33:08.700
one of the blocks that you can pull up


00:33:08.700 --> 00:33:10.960
is just search on Openverse.


00:33:10.960 --> 00:33:11.800
And then you pull it in


00:33:11.800 --> 00:33:13.480
and it will pull the attribution in with it.


00:33:13.480 --> 00:33:14.400
- Oh, yeah, nice.


00:33:14.400 --> 00:33:16.180
- Don't have to do a whole lot of extra work.


00:33:16.180 --> 00:33:19.420
So we're hoping that that's gonna be coming


00:33:19.420 --> 00:33:20.680
down the line too.


00:33:20.680 --> 00:33:23.860
- And yeah, it's so easy to just like go to Google images


00:33:23.860 --> 00:33:24.840
and find an image,


00:33:24.840 --> 00:33:28.760
but it's harder to find the appropriate attribution for that


00:33:28.760 --> 00:33:32.040
and particularly you can get into some very interesting


00:33:32.040 --> 00:33:34.000
legal spaces if you're making money off of that.


00:33:34.000 --> 00:33:35.640
- Right, I mean, it makes perfect sense


00:33:35.640 --> 00:33:36.920
if you're like a high school student


00:33:36.920 --> 00:33:39.120
doing like a research, who cares, right?


00:33:39.120 --> 00:33:43.440
But it starts to push the limit if you're selling something


00:33:43.440 --> 00:33:45.240
or you're making a book or whatever.


00:33:45.240 --> 00:33:48.140
- Yeah, one of the things I think is interesting


00:33:48.140 --> 00:33:50.580
is that the difference between free,


00:33:50.580 --> 00:33:52.940
like non-commercial and commercial.


00:33:52.940 --> 00:33:57.940
And we think of it like big companies or blogs or something.


00:33:57.940 --> 00:34:02.600
And it's not that cut and dry because like you start,


00:34:02.600 --> 00:34:04.160
say you're starting a podcast,


00:34:04.160 --> 00:34:05.900
you start getting sponsors


00:34:05.900 --> 00:34:07.920
and you're making like five bucks a week.


00:34:07.920 --> 00:34:09.700
That's commercial,


00:34:09.700 --> 00:34:13.140
but it's not like I can afford a huge license.


00:34:13.140 --> 00:34:14.380
So yeah.


00:34:14.380 --> 00:34:15.460
- Yeah, absolutely. - Right, exactly.


00:34:15.460 --> 00:34:17.820
- And maybe you started it non-commercially


00:34:17.820 --> 00:34:19.700
and then it became commercial, right?


00:34:19.700 --> 00:34:22.500
But you had already used it and stuff like that as well.


00:34:22.500 --> 00:34:25.940
How about a real time feature request?


00:34:25.940 --> 00:34:28.820
Dean Langston asks, says,


00:34:28.820 --> 00:34:30.340
I wish it had a,


00:34:30.340 --> 00:34:33.260
this is a ping with a transparent background.


00:34:33.260 --> 00:34:34.220
- I hear it, I hear it.


00:34:34.220 --> 00:34:36.900
I use that feature all the time in Google images.


00:34:36.900 --> 00:34:40.300
Yeah, we actually just finished a redesign of the site.


00:34:40.300 --> 00:34:42.940
We launched yesterday for this redesign,


00:34:42.940 --> 00:34:44.680
which is really exciting.


00:34:44.680 --> 00:34:46.020
But we have, I mean,


00:34:46.020 --> 00:34:51.020
We have lots of stuff that we want to start adding to this.


00:34:51.020 --> 00:34:55.260
Turns out that making a search engine is not easy.


00:34:55.260 --> 00:34:56.460
Surprise.


00:34:56.460 --> 00:34:58.420
So there's a lot of work to be done.


00:34:58.420 --> 00:35:00.180
But that's a great feature request.


00:35:00.180 --> 00:35:02.660
All of this, too, is a great plug.


00:35:02.660 --> 00:35:03.980
So thank you for that comment.


00:35:03.980 --> 00:35:05.620
All of this is open source.


00:35:05.620 --> 00:35:07.700
And so if you just search Openverse GitHub,


00:35:07.700 --> 00:35:09.860
like we had mentioned earlier-- because if you just


00:35:09.860 --> 00:35:12.500
search Openverse, you'll actually get the site--


00:35:12.500 --> 00:35:15.900
you can go and make an issue on any one of the number of repos


00:35:15.900 --> 00:35:17.860
that we have for describing this project.


00:35:17.860 --> 00:35:22.860
And on top of that too, if you know of a content provider,


00:35:22.860 --> 00:35:27.380
like a museum or whatnot that has an API


00:35:27.380 --> 00:35:29.980
that could have its images added to Openverse,


00:35:29.980 --> 00:35:32.360
we're trying to make it really easy to write those,


00:35:32.360 --> 00:35:34.780
we call them provider ingestion scripts.


00:35:34.780 --> 00:35:37.420
So even if you just know of one,


00:35:37.420 --> 00:35:38.500
you can make an issue for us


00:35:38.500 --> 00:35:39.700
and we'll write the provider script.


00:35:39.700 --> 00:35:43.500
But we also love public contributions.


00:35:43.500 --> 00:35:45.180
If you have a source that you wanna add


00:35:45.180 --> 00:35:47.280
and you want to get it into open first.


00:35:47.280 --> 00:35:49.220
- Oh yeah, that's great.


00:35:49.220 --> 00:35:51.360
All right, Brian, now are you ready for your extras?


00:35:51.360 --> 00:35:52.860
- I am, yeah.


00:35:52.860 --> 00:35:54.380
So we were talking about security


00:35:54.380 --> 00:35:58.080
and supply chain for packages.


00:35:58.080 --> 00:36:02.180
And so I noticed this actually, gosh, it just came out.


00:36:02.180 --> 00:36:04.860
Like, was it yesterday?


00:36:04.860 --> 00:36:09.780
Yesterday, Brett Cannon announced that he's got a,


00:36:09.780 --> 00:36:14.780
he has a GitHub action that called a pip secure install.


00:36:14.780 --> 00:36:18.780
that he published and apparently VS Code,


00:36:18.780 --> 00:36:21.760
VS Code Python uses it.


00:36:21.760 --> 00:36:24.520
But the thing is, is, is it just sort of,


00:36:24.520 --> 00:36:27.320
if you pip install something with requirements file,


00:36:27.320 --> 00:36:30.160
it could have, who knows what it all is in there


00:36:30.160 --> 00:36:32.040
and it, and your requirements.


00:36:32.040 --> 00:36:34.440
And then they have dependencies and they have dependencies.


00:36:34.440 --> 00:36:36.600
Well, this, this secure install is,


00:36:36.600 --> 00:36:38.920
allows you to do through GitHub actions,


00:36:38.920 --> 00:36:42.300
use a requirements file, but you have to have,


00:36:43.680 --> 00:36:45.060
you have to have stuff in it.


00:36:45.060 --> 00:36:47.480
So you have to have no,


00:36:47.480 --> 00:36:49.660
it doesn't pick up any dependencies


00:36:49.660 --> 00:36:51.560
and it requires hashes.


00:36:51.560 --> 00:36:55.280
So you have to have a full requirements file


00:36:55.280 --> 00:37:00.080
with all of the dependency tree in there with the hashes


00:37:00.080 --> 00:37:05.080
to eliminate these like supply chain problems.


00:37:05.080 --> 00:37:06.620
It doesn't eliminate them,


00:37:06.620 --> 00:37:08.900
but once you've tested a good package,


00:37:08.900 --> 00:37:10.700
you can just put this in there.


00:37:10.700 --> 00:37:13.120
So I just wanted to give a shout out


00:37:13.120 --> 00:37:15.160
for this project by Brett.


00:37:15.160 --> 00:37:16.440
So that was cool.


00:37:16.440 --> 00:37:19.280
The second thing I wanted to shout out,


00:37:19.280 --> 00:37:20.680
which I'm like totally excited.


00:37:20.680 --> 00:37:23.280
Basically this is a shout out to everybody out there


00:37:23.280 --> 00:37:25.860
listening to this that has supported


00:37:25.860 --> 00:37:28.080
the Python testing with pytest book.


00:37:28.080 --> 00:37:30.600
I was talking right before we started recording


00:37:30.600 --> 00:37:33.720
that today is the last day I get to touch it.


00:37:33.720 --> 00:37:36.520
I get to, my final edits are going in,


00:37:36.520 --> 00:37:38.760
but because of all the beta,


00:37:38.760 --> 00:37:42.200
the beta purchasers, it's supported the rewrite


00:37:42.200 --> 00:37:44.560
and just been awesome support.


00:37:44.560 --> 00:37:46.200
And right now it's at number two


00:37:46.200 --> 00:37:48.120
is the best seller on Pragmatic.


00:37:48.120 --> 00:37:48.960
So that's pretty exciting.


00:37:48.960 --> 00:37:50.320
- Congratulations, that's awesome.


00:37:50.320 --> 00:37:51.640
- That's fantastic, yeah.


00:37:51.640 --> 00:37:56.400
- Madison, back to you.


00:37:56.400 --> 00:37:58.280
Anything you wanna give a quick shout out to?


00:37:58.280 --> 00:38:00.680
- Yeah, a couple quick things.


00:38:00.680 --> 00:38:02.400
One thing I forgot to mention about OpenFirst,


00:38:02.400 --> 00:38:05.120
it's also written mostly in Python too.


00:38:05.120 --> 00:38:06.480
So if you're familiar with Python,


00:38:06.480 --> 00:38:07.600
you can help contribute.


00:38:07.600 --> 00:38:10.200
- Not PHP? - No, no.


00:38:10.200 --> 00:38:11.720
That's, yeah, it's kind of interesting


00:38:11.720 --> 00:38:14.280
'cause most of WordPress is PHP and JavaScript,


00:38:14.280 --> 00:38:19.000
but OpenVerse is a fun little extra blob on the side


00:38:19.000 --> 00:38:20.560
that runs in Python.


00:38:20.560 --> 00:38:21.880
- Yeah, beautiful.


00:38:21.880 --> 00:38:25.200
- Speaking of small Python web apps and whatnot,


00:38:25.200 --> 00:38:27.640
some folks in Seattle recently launched


00:38:27.640 --> 00:38:30.800
a new police accountability and information tool.


00:38:30.800 --> 00:38:35.800
And so this is just a tool, it's spd.watch for the URL.


00:38:35.960 --> 00:38:38.840
And it's a tool that just allows you to search


00:38:38.840 --> 00:38:41.760
for police officers in the Seattle area


00:38:41.760 --> 00:38:43.520
and get information on them.


00:38:43.520 --> 00:38:46.760
So, you know, if you're interacting with an officer,


00:38:46.760 --> 00:38:49.000
sort of what their history is,


00:38:49.000 --> 00:38:50.800
how long they've been with the force, that sort of thing.


00:38:50.800 --> 00:38:53.520
It can be really useful for community safety


00:38:53.520 --> 00:38:55.640
and also just accountability.


00:38:55.640 --> 00:39:00.640
And you all had mentioned JUST in episode 242.


00:39:00.640 --> 00:39:04.160
I just wanted to give a shout out to it.


00:39:04.160 --> 00:39:08.200
I have been using this for every single project that I have touched.


00:39:08.200 --> 00:39:12.800
When I go to a project that doesn't have just, I get very angry.


00:39:12.800 --> 00:39:13.800
It's so fantastic.


00:39:13.800 --> 00:39:18.880
I mean, the fact that you can add comments for different recipes, your recipes can build


00:39:18.880 --> 00:39:21.080
on other recipes.


00:39:21.080 --> 00:39:26.680
There's a lot of complexity that you can have in the just file, which makes it easy for


00:39:26.680 --> 00:39:30.120
new people to come on and start contributing.


00:39:30.120 --> 00:39:32.700
So if you have like lots of Docker containers


00:39:32.700 --> 00:39:35.480
that require certain specialization in some sense,


00:39:35.480 --> 00:39:37.440
you don't have to write this big long read me


00:39:37.440 --> 00:39:39.240
that describes all the steps you say,


00:39:39.240 --> 00:39:41.380
download just and then just run.


00:39:41.380 --> 00:39:42.220
And that's it.


00:39:42.220 --> 00:39:43.640
It's so nice.


00:39:43.640 --> 00:39:45.000
- I totally forgot about just,


00:39:45.000 --> 00:39:45.840
so I'm glad you brought it up.


00:39:45.840 --> 00:39:49.560
- Great, I just, I can't sing his praises enough, honestly.


00:39:49.560 --> 00:39:51.880
Although I do have to say its name does make it


00:39:51.880 --> 00:39:54.420
very difficult to do Google searches.


00:39:54.420 --> 00:39:58.680
And then lastly, I just wanna give a shout out


00:39:58.680 --> 00:40:02.040
to the GitHub package registry.


00:40:02.040 --> 00:40:07.040
That's ghcr.io for GitHub container registry.io.


00:40:07.040 --> 00:40:12.480
They do free Docker image hosting for open source projects.


00:40:12.480 --> 00:40:14.160
And I'm not sure what the pricing is for,


00:40:14.160 --> 00:40:16.320
there's, we could see the pricing,


00:40:16.320 --> 00:40:19.440
but yeah, they do free for open source projects,


00:40:19.440 --> 00:40:22.520
which Openverse is taking advantage of.


00:40:22.520 --> 00:40:24.760
And I've used on a number of personal projects


00:40:24.760 --> 00:40:27.120
and it's been incredibly helpful to just be able


00:40:27.120 --> 00:40:30.140
to build and push an image for free with GitHub Actions


00:40:30.140 --> 00:40:31.560
and then have that hosted for free


00:40:31.560 --> 00:40:33.760
on GitHub Container Registry.


00:40:33.760 --> 00:40:34.800
- Oh, that's cool.


00:40:34.800 --> 00:40:35.960
Yeah, that looks handy.


00:40:35.960 --> 00:40:38.200
- Cool. - Nice.


00:40:38.200 --> 00:40:39.020
- Yeah, good ones.


00:40:39.020 --> 00:40:40.120
I got a couple as well.


00:40:40.120 --> 00:40:41.280
Yeah, I got a couple.


00:40:41.280 --> 00:40:42.800
Let me go back here.


00:40:42.800 --> 00:40:46.000
So very kind message came out on Twitter saying,


00:40:46.000 --> 00:40:48.760
"Here's a really cool way you can go to the transcripts


00:40:48.760 --> 00:40:50.860
"for the podcast, which is on GitHub,


00:40:50.860 --> 00:40:53.500
"and then you can do like a search across them


00:40:53.500 --> 00:40:55.760
"using some nice GitHub search features."


00:40:55.760 --> 00:40:57.080
- Absolutely true.


00:40:57.080 --> 00:40:57.920
Very nice.


00:40:57.920 --> 00:40:59.960
I also wanted to point out a couple of things


00:40:59.960 --> 00:41:01.720
that we actually have some neat features


00:41:01.720 --> 00:41:03.200
that people can play with.


00:41:03.200 --> 00:41:05.000
First of all, we have a search engine.


00:41:05.000 --> 00:41:06.200
You can click on the upper right.


00:41:06.200 --> 00:41:08.020
This is a, look, we're live streaming.


00:41:08.020 --> 00:41:09.060
So the thing you can search for,


00:41:09.060 --> 00:41:11.000
so I could search for like Pytest


00:41:11.000 --> 00:41:13.060
and it would come up with the episodes and whatnot.


00:41:13.060 --> 00:41:14.280
I can search for Hawaii.


00:41:14.280 --> 00:41:15.360
- Every single episode.


00:41:15.360 --> 00:41:16.320
- Yeah, exactly.


00:41:16.320 --> 00:41:17.920
So we get like our Python on the beach.


00:41:17.920 --> 00:41:19.840
So we did recently and whatnot.


00:41:19.840 --> 00:41:21.920
- And search for just was very difficult,


00:41:21.920 --> 00:41:22.760
but through no fault of your own.


00:41:22.760 --> 00:41:23.880
- Yeah, if you search for just,


00:41:23.880 --> 00:41:25.280
we get a whole bunch of stuff back.


00:41:25.280 --> 00:41:27.120
- Yeah, yeah, yeah.


00:41:27.120 --> 00:41:28.960
But pretty neat.


00:41:28.960 --> 00:41:30.880
It also has a JSON API.


00:41:30.880 --> 00:41:32.360
If you want to consume that,


00:41:32.360 --> 00:41:33.680
they can go and search for stuff


00:41:33.680 --> 00:41:35.420
and then it'll come up with,


00:41:35.420 --> 00:41:39.560
you know, a JSON variant of results and whatnot.


00:41:39.560 --> 00:41:40.400
- Nice.


00:41:40.400 --> 00:41:41.220
- Yeah.


00:41:41.220 --> 00:41:42.400
So that has been there for a while.


00:41:42.400 --> 00:41:44.060
So people can check that out and that's cool.


00:41:44.060 --> 00:41:46.620
But I also wanted to point out something brand new, Brian.


00:41:46.620 --> 00:41:48.480
I don't know if you even got a chance to play with this


00:41:48.480 --> 00:41:49.600
'cause I just did this.


00:41:49.600 --> 00:41:51.200
- I did, it's so cool.


00:41:51.200 --> 00:41:52.040
- So good.


00:41:52.040 --> 00:41:53.960
So if you go to a trans, the transcripts,


00:41:53.960 --> 00:41:58.160
So if you're on any episode, usually on the right,


00:41:58.160 --> 00:42:00.720
it'll say, unless the screen is really small,


00:42:00.720 --> 00:42:01.560
then it might be the bottom.


00:42:01.560 --> 00:42:03.400
It'll say full transcript.


00:42:03.400 --> 00:42:05.760
And then you can go in here and there are transcripts


00:42:05.760 --> 00:42:07.240
which are searchable and there's a play thing,


00:42:07.240 --> 00:42:10.480
but there's also now a ability to click


00:42:10.480 --> 00:42:12.920
on any paragraph or sentence,


00:42:12.920 --> 00:42:14.200
the little play button next to it.


00:42:14.200 --> 00:42:17.380
And it'll just start playing the episode at that time.


00:42:17.380 --> 00:42:20.920
So if people wanna go back and use what we've been doing


00:42:20.920 --> 00:42:23.500
for four or five years, whatever it's been,


00:42:23.500 --> 00:42:27.740
has resources, that should make it a little bit easier.


00:42:27.740 --> 00:42:31.860
>> Did you backport this to old episodes also?


00:42:31.860 --> 00:42:35.340
>> Yeah. Let me tell you how I did it.


00:42:35.340 --> 00:42:36.980
Because the transcripts, if you look at them,


00:42:36.980 --> 00:42:39.580
they just have a timestamp there.


00:42:39.580 --> 00:42:40.780
>> Yeah.


00:42:40.780 --> 00:42:44.580
>> I use this really cool regular expressions 101 or


00:42:44.580 --> 00:42:53.340
regx101.com tool website to build up the regx using named groups.


00:42:53.340 --> 00:42:55.980
And let me just check this out, which is on the screen,


00:42:55.980 --> 00:42:58.420
you guys, you'll check out the link if you're listening.


00:42:58.420 --> 00:43:00.200
You can put the thing you wanna search for


00:43:00.200 --> 00:43:02.940
and then the groups and the regex,


00:43:02.940 --> 00:43:04.100
it'll show if it's a match,


00:43:04.100 --> 00:43:08.140
it'll actually highlight and name the different elements


00:43:08.140 --> 00:43:11.580
and color code the syntax of your regular expression


00:43:11.580 --> 00:43:15.020
elements into like name sections


00:43:15.020 --> 00:43:16.340
and all sorts of cool stuff.


00:43:16.340 --> 00:43:18.020
What do you think of that?


00:43:18.020 --> 00:43:18.860
- It's awesome.


00:43:18.860 --> 00:43:22.540
If I'm using, if I'm writing a regular expression


00:43:22.540 --> 00:43:24.940
that's longer than like three or four characters,


00:43:24.940 --> 00:43:26.700
then I'm using Regex 101.


00:43:26.700 --> 00:43:28.380
Like the site is so fantastic.


00:43:28.380 --> 00:43:30.060
- It is absolutely, I totally agree.


00:43:30.060 --> 00:43:30.900
It's kind of new to me.


00:43:30.900 --> 00:43:31.740
Felix-


00:43:31.740 --> 00:43:33.080
- It's just on the right too.


00:43:33.080 --> 00:43:34.920
- Yeah, exactly.


00:43:34.920 --> 00:43:36.500
Yeah, Felix has loved it as well.


00:43:36.500 --> 00:43:37.640
And so it also gives you help.


00:43:37.640 --> 00:43:41.060
So if I put it like on the D plus,


00:43:41.060 --> 00:43:43.800
which means find one or more numbers,


00:43:43.800 --> 00:43:46.460
it'll say exactly, you know,


00:43:46.460 --> 00:43:48.900
what that kind of stuff means and so on.


00:43:48.900 --> 00:43:51.660
So you can say like D down here and it'll tell you,


00:43:51.660 --> 00:43:53.880
you know, what is that doing and so on.


00:43:53.880 --> 00:43:56.540
I don't know, somewhere there's a search.


00:43:56.540 --> 00:43:58.460
But it was nice that it will actually show you


00:43:58.460 --> 00:44:01.380
which sections and give you extra information about it


00:44:01.380 --> 00:44:02.780
and all kinds of neat stuff.


00:44:02.780 --> 00:44:03.620
So--


00:44:03.620 --> 00:44:05.540
- And full descriptions too,


00:44:05.540 --> 00:44:08.700
of like what particular thing is doing is so great.


00:44:08.700 --> 00:44:09.520
- There you go.


00:44:09.520 --> 00:44:12.660
So if you like hover over the backslash D plus


00:44:12.660 --> 00:44:14.140
or whatever I got here, it says,


00:44:14.140 --> 00:44:17.400
Meta escape matches a digit equivalent to bracket zero to


00:44:17.400 --> 00:44:19.260
nine, here's a name group.


00:44:19.260 --> 00:44:20.980
Here's just that matches the character


00:44:20.980 --> 00:44:22.580
And you just, as you hover, you know,


00:44:22.580 --> 00:44:24.980
starts the start of the text, right?


00:44:24.980 --> 00:44:25.820
It broke carrot.


00:44:25.820 --> 00:44:27.300
And as you hover over these things,


00:44:27.300 --> 00:44:30.660
you get real time, like auto-complete


00:44:30.660 --> 00:44:32.820
for like the meaning of that section.


00:44:32.820 --> 00:44:33.660
Because so often-


00:44:33.660 --> 00:44:35.540
- And like a full explanation in the top right too.


00:44:35.540 --> 00:44:36.380
- Yeah.


00:44:36.380 --> 00:44:37.200
- Which can be really helpful.


00:44:37.200 --> 00:44:38.040
- Absolutely.


00:44:38.040 --> 00:44:40.440
Because so often when I look at this kind of stuff,


00:44:40.440 --> 00:44:44.460
it's right only, you know, like I got it working


00:44:44.460 --> 00:44:45.780
and then I can't decipher it again.


00:44:45.780 --> 00:44:47.020
So you can put it back in here


00:44:47.020 --> 00:44:49.220
and come to an understanding, which is cool.


00:44:49.220 --> 00:44:51.900
All right, one more thing real quick,


00:44:51.900 --> 00:44:54.660
a new video on my Python short series that I'm doing,


00:44:54.660 --> 00:44:56.220
do you even need loops in Python?


00:44:56.220 --> 00:44:58.020
People can check that out.


00:44:58.020 --> 00:45:00.380
So it's really about list comprehensions and fun stuff


00:45:00.380 --> 00:45:02.020
you can do with list comprehensions in Python.


00:45:02.020 --> 00:45:03.940
So I've been having a lot of fun with that.


00:45:03.940 --> 00:45:06.220
And the open verse sounds very interesting


00:45:06.220 --> 00:45:08.660
for grabbing content to throw in some of those videos


00:45:08.660 --> 00:45:09.500
as well.


00:45:09.500 --> 00:45:12.020
(thudding)


00:45:12.020 --> 00:45:13.740
Yeah, absolutely.


00:45:13.740 --> 00:45:16.860
All right, well, that brings us to our joke, I do believe.


00:45:18.380 --> 00:45:19.860
Are you all ready for it?


00:45:19.860 --> 00:45:20.700
- I have one.


00:45:20.700 --> 00:45:24.060
There's a video, sorry.


00:45:24.060 --> 00:45:26.780
This got shared in, speaking of Python loops,


00:45:26.780 --> 00:45:28.140
I don't know that I'm gonna be able to show it,


00:45:28.140 --> 00:45:30.120
but we'll, fingers crossed here.


00:45:30.120 --> 00:45:36.780
This video was shared in a work channel recently,


00:45:36.780 --> 00:45:39.220
and I'm not gonna be able to show it,


00:45:39.220 --> 00:45:44.220
but it's a snake that is moving around a box.


00:45:44.220 --> 00:45:45.620
Oh, here we go.


00:45:45.620 --> 00:45:46.460
Perfect.


00:45:46.460 --> 00:45:47.280
(laughs)


00:45:47.280 --> 00:45:48.120
- Oh, I love it.


00:45:48.120 --> 00:45:50.640
- You have Python loops.


00:45:50.640 --> 00:45:53.160
- So it's a snake slithering.


00:45:53.160 --> 00:45:54.240
Yes, exactly.


00:45:54.240 --> 00:45:55.080
Oh my God.


00:45:55.080 --> 00:45:57.360
It's a Python slithering around a box,


00:45:57.360 --> 00:45:59.360
which is rotating in a circle.


00:45:59.360 --> 00:46:00.800
Here's a simple loop with Python.


00:46:00.800 --> 00:46:03.180
- And it also, the snake isn't moving anywhere


00:46:03.180 --> 00:46:05.180
because of the way that it's slithering.


00:46:05.180 --> 00:46:06.440
(laughing)


00:46:06.440 --> 00:46:08.920
So anyway, you really don't need loops.


00:46:08.920 --> 00:46:09.760
- I love it.


00:46:09.760 --> 00:46:10.720
That's awesome.


00:46:10.720 --> 00:46:11.720
Roller out there says,


00:46:11.720 --> 00:46:13.040
"The new Python short channel is great."


00:46:13.040 --> 00:46:13.860
Thanks, Michael.


00:46:13.860 --> 00:46:14.920
And Alvaro says,


00:46:14.920 --> 00:46:18.520
I usually test my regex with sed and grep on the command line.


00:46:18.520 --> 00:46:19.720
This seems easier.


00:46:19.720 --> 00:46:22.120
Regex, yeah, that thing is awesome.


00:46:22.120 --> 00:46:24.600
All right, so I've got a joke that is not my joke,


00:46:24.600 --> 00:46:27.240
but is from, instead, Josh Thurston.


00:46:27.240 --> 00:46:28.440
He sent them in a little while ago.


00:46:28.440 --> 00:46:32.200
So there's kind of three together in sequence.


00:46:32.200 --> 00:46:33.640
So here we go.


00:46:33.640 --> 00:46:36.040
How did the hacker get away from the police?


00:46:36.040 --> 00:46:38.680
He just ransomware.


00:46:38.680 --> 00:46:43.640
Oh, that joke makes me want to cry.


00:46:43.640 --> 00:46:47.540
"Oh, where do you find a hacker?


00:46:47.540 --> 00:46:48.600
Indie Crypt."


00:46:48.600 --> 00:46:50.940
Oh, they're so bad.


00:46:50.940 --> 00:46:53.780
These are full, hold on, I'll add them to the stream as well.


00:46:53.780 --> 00:46:56.580
Those are full-on dad jokes right there.


00:46:56.580 --> 00:46:59.340
- That's two thumbs down in a good way.


00:46:59.340 --> 00:47:00.860
- Absolutely.


00:47:00.860 --> 00:47:03.520
Like overflows the bad buffer and becomes good again.


00:47:03.520 --> 00:47:06.260
- Yeah, wow.


00:47:06.260 --> 00:47:07.500
- Fantastic.


00:47:07.500 --> 00:47:08.600
All right, well, speaking of fantastic,


00:47:08.600 --> 00:47:10.100
great to have you here, Madison and Brian.


00:47:10.100 --> 00:47:10.940
- So much for having me.


00:47:10.940 --> 00:47:11.780
- You as always.


00:47:11.780 --> 00:47:13.300
- It's good.


00:47:13.300 --> 00:47:14.140
- Yep.


00:47:14.140 --> 00:47:15.140
- Talk to everybody later.


00:47:15.140 --> 00:47:16.540
- Yeah, thanks everyone for listening.


00:47:16.540 --> 00:47:17.380
- Have fun.


00:47:17.380 --> 00:47:27.380
[BLANK_AUDIO]

