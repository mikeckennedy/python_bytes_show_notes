WEBVTT

00:00:03.600 --> 00:00:08.240
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:08.960 --> 00:00:14.380
This is episode 427, recorded April 7th, 2025, and I am Brian Okken.

00:00:14.980 --> 00:00:15.680
And I'm Michael Kennedy.

00:00:17.340 --> 00:00:21.380
And this episode is brought to you by Posit Package Manager.

00:00:22.000 --> 00:00:23.940
Check their spot out later in the show.

00:00:24.640 --> 00:00:28.600
Also connect with us if you'd like to on Mastodon or Blue Sky.

00:00:29.200 --> 00:00:30.260
Links are in the show notes.

00:00:31.860 --> 00:00:42.620
And then also, if you'd listen to us through a podcast player or something, occasionally it's fun to stop by and watch us live or at least see past live episodes.

00:00:42.860 --> 00:00:44.840
You can go to pythonbytes.fm.com.

00:00:45.560 --> 00:00:48.780
We usually do it Mondays at 10, but sometimes it changes.

00:00:49.640 --> 00:00:55.080
Anyway, it's fun to have you here, and some people hop in and ask questions, and it's good.

00:00:55.520 --> 00:01:03.880
Anyway, also after the show, when we have everything all the dust settles, we send out links through our newsletter.

00:01:04.260 --> 00:01:15.620
So please go to pythonbytes.fm and add your name to the email newsletter, and you'll get the links and some extra content delivered right to your inbox.

00:01:16.160 --> 00:01:16.820
It's pretty good.

00:01:18.600 --> 00:01:18.820
Absolutely.

00:01:18.920 --> 00:01:20.860
Michael, what

00:01:20.860 --> 00:01:21.980
do you got for us to start with?

00:01:23.460 --> 00:01:24.520
Let's go on a trip, Brian.

00:01:25.340 --> 00:01:26.040
Let's go on a trip.

00:01:26.440 --> 00:01:26.620
Okay.

00:01:27.340 --> 00:01:30.360
I want to go to take a little trip to GitTown.

00:01:31.160 --> 00:01:32.500
GitTown 18.3.

00:01:32.700 --> 00:01:33.120
Let's do it.

00:01:33.780 --> 00:01:36.620
So GitTown is an interesting project.

00:01:38.280 --> 00:01:39.680
I believe it's written in Python.

00:01:39.980 --> 00:01:43.420
I'll double-check that in a second, although it's not totally germane.

00:01:44.080 --> 00:01:45.780
It's a tool that you can use.

00:01:46.160 --> 00:02:03.540
And the idea is, with the Git CLI, or honestly, most of the Git GUIs, Like I'm a big fan of primarily doing Git through GUI operations using source tree, PyCharm, VS Code, whatever I happen to be in, right?

00:02:03.800 --> 00:02:04.020
I don't

00:02:04.020 --> 00:02:04.240
think

00:02:04.240 --> 00:02:09.820
I'm like, well, pretend my editor doesn't know what any of the source control is and go to the terminal and do it and then come back.

00:02:09.929 --> 00:02:19.840
Like I just prefer it that way, especially, you know, that's why I called out that Git branch explorer, that 2E-based one that we talked about last week.

00:02:20.520 --> 00:02:20.720
Yeah.

00:02:20.830 --> 00:02:20.960
In

00:02:20.960 --> 00:02:21.120
Rust.

00:02:22.840 --> 00:02:37.400
So one of the things you'll find with most of these tools, especially the CLI, but often like all of them, is they're great at the atomic operations of Git and source control, but they don't have workflows built into them.

00:02:39.620 --> 00:02:44.700
So by that I mean, I want to create a feature branch off of this branch.

00:02:44.880 --> 00:02:55.380
And as I'm working on the feature branch, I would like to be able to type a single command and have that branch make sure that it's up to date with it without breaking the work that I'm currently doing.

00:02:56.140 --> 00:03:03.160
Maybe in the middle of a feature branch I'm working on, I need to create a bug fix branch and do that, come back, sync them.

00:03:03.400 --> 00:03:05.600
There's like these higher level things that you would like to do.

00:03:06.640 --> 00:03:10.580
So Git town is a CLI, I think it's a plugin.

00:03:10.710 --> 00:03:16.380
I think Git has like plugin type things because the commands are still Git space command, subcommands

00:03:16.380 --> 00:03:16.560
of

00:03:16.560 --> 00:03:17.540
Git, right?

00:03:17.730 --> 00:03:19.200
So it's not a totally separate thing.

00:03:20.080 --> 00:03:50.840
anyway it operates all it sort of brings all those together and so if you're if what i'm about to describe sounds interesting to you you should really really watch this seven minute video at git-town.com and it says please check it out right so just watch this and it talks through the different scenarios shows you how it works and so on however if you jump over to the GitHub repo, it gives you a much better understanding of all the pieces there.

00:03:50.850 --> 00:03:53.040
And by written in Python, I mean written in Go.

00:03:55.580 --> 00:03:57.520
It has a couple of different commands.

00:03:57.590 --> 00:04:04.840
It says, I could type git, like in a git repo, I could type git space hack.

00:04:05.520 --> 00:04:11.860
And that will create a new feature branch that I can explore that will not affect any of the main work.

00:04:12.120 --> 00:04:14.380
and if I need to throw it away or whatever, it's fine.

00:04:14.380 --> 00:04:15.900
It's kind of like the exploratory.

00:04:16.340 --> 00:04:22.920
Hack in a positive sense, not hack, is then the I got a hoodie and it's shady in my room sort of thing.

00:04:24.000 --> 00:04:42.060
Or sync, if I'm on some kind of feature branch, I can update that branch from the main because one of the things you want to do if you have a long-running feature branch is keep periodically pulling from the main branch in there so you are less distant from it, right?

00:04:42.410 --> 00:04:52.000
If for some reason, like when you want to go back, you want that to be just your changes, not your changes plus all of the conflicts that you've been potentially messing with and you've got another round basically.

00:04:52.320 --> 00:04:54.620
So this, you would just type git space sync.

00:04:55.220 --> 00:04:55.620
That's cool.

00:04:56.860 --> 00:04:59.840
You could type git switch to change branches via UI.

00:05:00.900 --> 00:05:07.520
Or once you're happy with your feature branch, you could say git propose and that'll create a merge.

00:05:08.260 --> 00:05:13.160
It'll create a pull or merge request for a feature branch back on GitHub, things like that.

00:05:14.340 --> 00:05:15.880
So there's a bunch of cool things like that.

00:05:17.480 --> 00:05:18.020
I thought it

00:05:18.020 --> 00:05:19.820
was going to ask it to a dance.

00:05:21.600 --> 00:05:21.940
Exactly.

00:05:23.160 --> 00:05:29.920
You know, I mean, I know we haven't talked much, and I know this is seventh grade and we're all really shy, but do you go to the dance with me?

00:05:30.260 --> 00:05:31.120
My dad can drive us.

00:05:33.160 --> 00:05:41.160
Another one is you can do things like git ship, which will merge a completed feature branch and then remove it once it's successfully shipped over and so on.

00:05:41.160 --> 00:05:43.360
So there's like these cool things on top of it.

00:05:43.360 --> 00:05:50.300
But certainly I recommend watching that video, that seven-minute video, to see if this is something that's interesting to you.

00:05:50.960 --> 00:05:51.680
I think I like it.

00:05:51.680 --> 00:05:52.400
I think it's pretty cool.

00:05:52.700 --> 00:05:54.500
I could at least...

00:05:54.560 --> 00:05:58.240
There's some cool ones that I always forget about, like get and rename.

00:06:00.540 --> 00:06:04.719
I mean, renaming is not difficult, but it's nice to have a little...

00:06:04.800 --> 00:06:07.320
Yeah, so absolutely.

00:06:07.540 --> 00:06:18.440
And if you watch the video, you'll see that there's a lot of, really this thing is mostly built around like, yeah, you could, you're like, well, why can't I just do, you know, get merge from this branch and this and that.

00:06:18.440 --> 00:06:19.800
And sure, you can do these things.

00:06:20.300 --> 00:06:20.680
But it

00:06:20.680 --> 00:06:23.680
has a bunch of little steps to kind of catch the edge cases.

00:06:23.960 --> 00:06:30.620
Like it'll use stashing for certain operations when it's sure that you don't want any of your changes changed and other things.

00:06:31.680 --> 00:06:35.800
each one of these commands usually results in five or six or seven Git commands.

00:06:38.120 --> 00:06:41.760
It's neat. It's worth checking out, especially if you like Git via the CLI.

00:06:42.580 --> 00:06:42.900
Or you're

00:06:42.900 --> 00:06:43.060
working

00:06:43.060 --> 00:06:45.720
in a team that wants really structured ways of doing these things.

00:06:46.140 --> 00:07:03.360
I'm definitely going to check it out. And actually, I used the, I can't remember what we called it last week, the SAG or something like that. But I used it this weekend to look at a Git log from a project that I hadn't been familiar with to see what was going on.

00:07:04.220 --> 00:07:05.760
Awesome. Have you tried it on your Windows?

00:07:06.010 --> 00:07:07.560
Like, I want a Windows terminal follow-up.

00:07:09.820 --> 00:07:10.880
What was I using it on?

00:07:11.640 --> 00:07:13.380
Remember, you were wondering if it would work on Windows.

00:07:13.880 --> 00:07:14.080
Yeah.

00:07:14.260 --> 00:07:14.380
Did you

00:07:14.380 --> 00:07:15.020
do this on your Mac?

00:07:15.240 --> 00:07:16.860
I was using it on my Mac laptop.

00:07:17.100 --> 00:07:17.260
Okay.

00:07:17.380 --> 00:07:20.020
Well, the follow-up is still pending.

00:07:21.600 --> 00:07:21.800
Okay.

00:07:22.820 --> 00:07:25.780
And we'll check out GetTown on Windows as well.

00:07:25.980 --> 00:07:27.260
We'll take a little trip to GetTown.

00:07:27.400 --> 00:07:27.660
sure it's

00:07:27.660 --> 00:07:28.400
probably fine.

00:07:29.440 --> 00:07:31.380
Yeah, this just automates Git, which works everywhere.

00:07:32.360 --> 00:07:32.560
Okay.

00:07:33.550 --> 00:07:43.520
Last week, we did, going back to last week, I guess, we did talk about a couple peps, and today I'd like to talk about another pep.

00:07:44.400 --> 00:07:47.020
This one comes to us from Brett Cannon.

00:07:48.640 --> 00:07:50.640
Well, I saw him posted on Blue Sky.

00:07:51.170 --> 00:07:52.400
Pep 5-set pipes.

00:07:53.640 --> 00:07:54.560
Try that one more time.

00:07:56.979 --> 00:08:00.600
PEP 751, not 571, 751 has been accepted.

00:08:01.080 --> 00:08:01.980
So what is this PEP about?

00:08:02.560 --> 00:08:03.360
It's about lock files.

00:08:03.680 --> 00:08:12.320
So Brett says this means Python now has a lock file standard that can act as an export target for tools and create some sort of lock file.

00:08:14.360 --> 00:08:20.740
And for some tools, the format can act as a primary lock file format as well as instead of some proprietary format.

00:08:21.380 --> 00:08:22.820
So we already have lock files.

00:08:23.100 --> 00:08:27.620
A couple, lots of different tools had files, but they weren't the same lock file.

00:08:27.670 --> 00:08:33.400
They were like UV had a lock, and I think Poetry had a lock, and there's a couple others.

00:08:34.640 --> 00:08:39.700
So now we have a standardized one, and actually looking through the standard, it looks pretty great.

00:08:40.169 --> 00:08:46.680
One of the things that you would expect, you could do environments and versions and packages and stuff.

00:08:47.280 --> 00:08:56.880
One of the things I thought was kind of cool, scrolling down to the bottom, was that there's a tool section that is pretty much open-ended.

00:08:57.090 --> 00:08:59.840
And this allows arbitrary tool configuration.

00:09:00.240 --> 00:09:16.280
So if other tools like Poetry or whatever want to try to use this instead or migrate to it, but it doesn't kind of cover some of their own configuration, they can override this and put some extra things in here.

00:09:16.920 --> 00:09:18.260
which I think is pretty cool.

00:09:19.440 --> 00:09:20.620
There's also packages tool.

00:09:20.740 --> 00:09:29.580
I'm not sure which, I don't know, when you would use one or the other, but I'll leave it up to some tutorial writer to figure that one out.

00:09:30.460 --> 00:09:37.040
So this isn't to a, if you wanted to try this out now, let's look at an example first.

00:09:37.680 --> 00:09:46.360
The examples is in the video if you want to check out the live version if you're listening, but we're going to link to it as well.

00:09:46.420 --> 00:10:19.820
it's in the PEP there's an example mostly uh this is fairly readable and i'm i'm pretty on board with how this is set up uh looks looks pretty good it's toml toml syntax um you've even got things like um uh of course hashes and stuff if you want to leave the hashes in for for making sure it's the right thing um so this is all great the other uh the other bit uh scrolling down is well how can i use this right now. There is, there's some stuff, information about how to teach it, of course.

00:10:21.380 --> 00:10:36.360
Some discussion around rejected ideas. Oh, I forgot to mention the name. The name of it is pylock.toml. So, or pylock something.toml. There's, that's just what they came up with.

00:10:36.400 --> 00:10:41.160
It doesn't, doesn't conflict with any other tools right now and it's reasonable. So that's good.

00:10:43.200 --> 00:10:49.580
If you want to try this right now, I thought we had an implementation.

00:10:52.940 --> 00:11:02.800
There was an implementation already that is just an example.

00:11:03.340 --> 00:11:05.360
It's in Brett's tool, Mousebender.

00:11:05.800 --> 00:11:10.120
So Mousebender allows you to play with it if you want to play with it right now.

00:11:10.520 --> 00:11:17.220
So I imagine that some of the other tools will kind of take this up also.

00:11:18.080 --> 00:11:23.340
And I would expect that, for instance, UV or something might, I don't know.

00:11:23.740 --> 00:11:28.980
I'm not involved with UV, but I would expect some of these tools to pick them up pretty quick.

00:11:29.600 --> 00:11:29.980
But we'll

00:11:29.980 --> 00:11:30.160
see.

00:11:30.740 --> 00:11:34.760
Yeah, well, first of all, congratulations, Brett Cannon.

00:11:34.960 --> 00:11:37.540
I know you've been working on this for a long time.

00:11:38.330 --> 00:11:39.620
And here we are.

00:11:40.540 --> 00:12:43.960
super exciting so i'm sure some conversations at pycon will be had about this yeah super neat so one thing that i like is the format i saw like the hash is on the same line as the yeah actual requirement pinned version there so i'm trying to do hashes in my requirements dot txt files and the hashes so overwhelm the version of the thing that you actually have in the diff that it's just like it's a bunch of hash variations when I look at the diff and I got a hunt for the actual new version like what one of these changed because the version changed and what is the new version and so on so the way this looks it looks like it's going to be well it might differ also on the end for the hashes but the first thing that appears on the line is the actual version number wheel and so on.

00:12:43.960 --> 00:12:46.940
So I think that's going to be really nice to look at.

00:12:47.280 --> 00:12:47.460
So

00:12:47.460 --> 00:12:49.860
I might put hashes back in.

00:12:50.380 --> 00:12:52.940
Yeah, I think it's kind of cool that there's an upload time.

00:12:53.110 --> 00:13:00.540
So if you don't want to deal with hashes but you do want to grab the upload time as a way to check for things, it's cool.

00:13:00.820 --> 00:13:02.640
Yeah, you just kind of know how old is that as well.

00:13:03.060 --> 00:13:03.320
Yeah.

00:13:04.100 --> 00:13:04.260
Right.

00:13:04.520 --> 00:13:09.260
For things that are not using Calver or they're abusing Calver.

00:13:11.460 --> 00:13:12.320
Is it five minutes old

00:13:12.320 --> 00:13:13.060
or is it five months old?

00:13:13.090 --> 00:13:14.260
That might matter to you.

00:13:16.220 --> 00:13:16.780
Very cool.

00:13:17.560 --> 00:13:17.780
Awesome.

00:13:18.060 --> 00:13:18.560
I'm here for it.

00:13:22.340 --> 00:13:23.180
Do you know what else is awesome?

00:13:23.800 --> 00:13:24.560
What is that, Brian?

00:13:25.060 --> 00:13:26.320
I think Posit is pretty awesome.

00:13:26.860 --> 00:13:27.660
They are awesome.

00:13:28.300 --> 00:13:28.660
Very much.

00:13:30.240 --> 00:13:33.620
I'd like to take a moment to thank our sponsor.

00:13:34.440 --> 00:13:37.720
This episode of Python Bytes is brought to you by the folks at Posit.

00:13:38.280 --> 00:13:41.260
Posit has made a huge investment in the Python community lately.

00:13:42.060 --> 00:13:47.400
Known originally for RStudio, they have been building out a suite of tools and services for Team Python.

00:13:48.160 --> 00:13:55.680
Over the past few years, we've learned some pretty scary terms like type squatting, supply chain attack, obfuscated code, and more.

00:13:56.340 --> 00:14:00.460
These all orbit around the idea that you install Python packages.

00:14:01.020 --> 00:14:09.460
When you install Python packages, you're effectively running arbitrary code off the internet, on your machine, and usually even your production servers.

00:14:10.320 --> 00:14:12.260
That thought alone makes me shudder.

00:14:13.640 --> 00:14:20.480
This doesn't even touch on the reproducibility issues surrounding external packages, but there are tools to help.

00:14:20.940 --> 00:14:25.720
Posit Package Manager can solve both problems for you.

00:14:26.480 --> 00:14:30.860
Think of Posit Package Manager as your personal package concierge.

00:14:31.260 --> 00:14:38.640
You use it to build your own package repository within your firewall that keep your project safe.

00:14:39.160 --> 00:14:44.220
You can upload your own internal packages to share or import packages directly from PyPI.

00:14:45.180 --> 00:14:50.760
Your team members can install from these repos in the normal ways using tools like PIP, Poetry, and UV.

00:14:51.760 --> 00:14:58.380
Posit Package Manager will help you manage updates, ensuring you're using the latest, most secure version of your packages.

00:14:59.220 --> 00:15:12.480
But Posit Package Manager also takes point-in-time snapshots of your repos, which you can use to rerun your code reproducibility in the future.

00:15:13.360 --> 00:15:21.380
Posit Package Manager reports on packages with known CVEs and other vulnerabilities so you can keep ahead of threats.

00:15:22.060 --> 00:15:28.840
And if you need the highest level of security, you can even run Posit Package Manager in an error-gapped environment.

00:15:29.600 --> 00:15:37.020
If you work on a data science team where security matters, you owe it to you and your org to check out Posit Package Manager.

00:15:37.900 --> 00:15:45.520
Visit pythonbytes.fm/ppm today and get a three-month free trial and see if it's a good fit.

00:15:46.240 --> 00:15:49.020
That's pythonbytes.fm/ppm.

00:15:49.600 --> 00:15:52.080
the link is in your podcast player's show notes.

00:15:52.760 --> 00:15:55.260
Thank you, Posit, for supporting Python Bytes.

00:15:56.990 --> 00:15:57.720
Indeed. Thanks, Posit.

00:15:57.960 --> 00:15:58.640
It's a cool project.

00:15:59.640 --> 00:16:00.080
Having a

00:16:00.080 --> 00:16:01.360
little bit more control over your

00:16:01.360 --> 00:16:02.200
packages

00:16:02.460 --> 00:16:03.480
is always a good thing.

00:16:04.480 --> 00:16:14.260
Well, Brian, I want to carry on with the theme of Git and talk about three more Git topics, I believe, at least.

00:16:15.800 --> 00:16:16.020
Who?

00:16:16.460 --> 00:16:17.380
So we know where.

00:16:17.500 --> 00:16:22.140
This is sort of the thing they teach you in early writing classes.

00:16:23.280 --> 00:16:24.400
All the Ws, right?

00:16:24.630 --> 00:16:27.260
Who, what, where, when, why, how are we covering these things?

00:16:27.780 --> 00:16:32.040
We've gone from where to who, and now we're talking about git-who.

00:16:34.180 --> 00:16:42.620
So I've always enjoyed the git blame, or basically more broadly, like source control blame.

00:16:43.580 --> 00:16:45.420
All right, who did this?

00:16:46.760 --> 00:16:47.660
Do you see that line of code?

00:16:47.960 --> 00:16:49.800
Who do I talk to about this?

00:16:49.920 --> 00:16:56.380
Either they are not very good and we need to talk to them, or there's something way more complicated going on here, and I need to understand it better.

00:16:56.560 --> 00:16:58.960
But who do I talk to about this line of code?

00:16:58.980 --> 00:16:59.480
Do you know what I mean?

00:17:00.380 --> 00:17:07.920
And the way that works is you can run that on a file, and it shows you line by line who made the last change to that particular line, right?

00:17:09.300 --> 00:17:10.339
Editors support that.

00:17:11.760 --> 00:17:12.839
Super easy these days.

00:17:13.140 --> 00:17:19.100
Like in PyCharm, it'll actually put an overlay of who wrote the function or whatever.

00:17:19.220 --> 00:17:21.500
If you click on that, it'll sort of slide out the get blame.

00:17:22.520 --> 00:17:24.680
But that's a line-by-line type of thing.

00:17:25.160 --> 00:17:30.600
What if instead I wanted to know as an entire project?

00:17:30.840 --> 00:17:49.460
Like if I go to the repo and I type get who dash L, it will say who has made how many commits, how many changes, how many lines, when did they last do that as a summary of the project instead of a summary of the line.

00:17:50.120 --> 00:17:50.200
Hmm.

00:17:51.100 --> 00:17:51.380
Cool, right?

00:17:52.440 --> 00:17:53.960
So that's super easy to do.

00:17:56.180 --> 00:18:04.260
you can go into subdirectories and sort of explore those and go who's created changes on this particular subdirectorie or whatever.

00:18:04.660 --> 00:18:05.800
So I think this is really neat.

00:18:06.000 --> 00:18:08.240
It's sort of a natural extension of get blame.

00:18:09.880 --> 00:18:14.600
Okay, so you can give it a particular file even and just say who modified this file?

00:18:15.100 --> 00:18:18.460
Yeah, I would think it would say how many contributions there are to that particular file.

00:18:18.470 --> 00:18:22.600
I don't know if you can give it a file, but if there was a single file in a directory, you sure could.

00:18:23.560 --> 00:18:24.900
But probably you can give it a file as well.

00:18:26.299 --> 00:18:34.280
Yeah, it just sort of shows you who has been active in this repo or this subdirectory of a repo lately, and how much have they

00:18:34.280 --> 00:18:34.460
contributed.

00:18:34.460 --> 00:18:42.540
Yeah, the blame part is one of the reasons why I'm careful if I try to do just a prettying up of code.

00:18:43.840 --> 00:18:45.100
Do you want to break it?

00:18:45.820 --> 00:18:47.520
Well, no, I don't want to be blamed for it.

00:18:47.760 --> 00:18:55.360
So if you're just lining up something to make it look nicer, be careful because you're now the owner of that line of code.

00:18:55.980 --> 00:18:57.340
Yeah, that's an interesting angle.

00:18:57.400 --> 00:19:00.880
I wonder if you should almost create like a formatter account

00:19:01.660 --> 00:19:02.060
and

00:19:02.060 --> 00:19:04.580
just let the formatter do the formatting.

00:19:04.840 --> 00:19:12.520
Well, actually, that's one of the lovely things about separating formatting stuff.

00:19:12.720 --> 00:19:19.560
So that's one of the things I try to teach people is to, if cleaning up is great, do it in a separate commit.

00:19:19.840 --> 00:19:23.100
don't do it in the same commit as a bunch of actual code changes.

00:19:23.100 --> 00:19:23.120
Sure.

00:19:24.760 --> 00:19:26.660
But it doesn't fix the blame part.

00:19:27.260 --> 00:19:28.500
No, it doesn't really fix the blame part.

00:19:28.680 --> 00:19:36.900
But another thing that that Git Town thing does is it uses squashing pretty aggressively.

00:19:37.200 --> 00:19:42.120
So when you do all your feature branches and you make 20 changes, you can squash that into a single commit

00:19:42.800 --> 00:19:43.080
as

00:19:43.080 --> 00:19:45.340
part of the publication PR flow.

00:19:46.120 --> 00:19:49.680
And so then at least when people go look at the blame, it's like all part of it.

00:19:49.780 --> 00:19:54.040
one commit that has to do with this feature rather than Ruff formatting.

00:19:55.780 --> 00:19:57.480
Adjusted space, you know, like random.

00:19:57.960 --> 00:20:02.740
Like if you get it too small, your comments are like really, really not historically relevant.

00:20:03.000 --> 00:20:04.660
You know, like this is the formatting statement.

00:20:04.740 --> 00:20:05.140
Like, great.

00:20:06.860 --> 00:20:08.340
And when were we doing this?

00:20:08.400 --> 00:20:08.900
You know what I mean?

00:20:10.140 --> 00:20:10.380
Yeah.

00:20:10.940 --> 00:20:12.940
Actually, I kind of forget that not everybody does that.

00:20:13.140 --> 00:20:15.460
I always do a squash workflow.

00:20:15.640 --> 00:20:16.920
I see you're a natural squasher.

00:20:17.020 --> 00:20:17.140
Okay.

00:20:17.320 --> 00:20:18.680
Natural squasher, yeah.

00:20:19.320 --> 00:20:20.300
Well, mostly

00:20:20.300 --> 00:20:22.560
because it's way easier to roll back stuff.

00:20:22.710 --> 00:20:29.440
So if there's something that really causes a downstream problem, you kind of want to roll back all the work together.

00:20:29.610 --> 00:20:29.740
Yeah,

00:20:30.080 --> 00:20:31.060
that's a good point.

00:20:32.620 --> 00:20:33.140
So

00:20:33.140 --> 00:20:35.460
next up is watch-ga.

00:20:36.120 --> 00:20:36.440
Okay.

00:20:37.040 --> 00:20:41.020
Watch, G-H-A, but there's no capitalization, so watch-ga.

00:20:42.640 --> 00:20:47.420
This comes to us from Ned Batchelder, as in not he sent it to us, but he created it.

00:20:48.220 --> 00:20:50.060
And this is just another Git thing real quick.

00:20:50.160 --> 00:20:51.360
I think people will find it relevant.

00:20:51.600 --> 00:21:05.860
So what you can do is you can install this, and then it will allow you to watch in real time the status of your GitHub actions.

00:21:06.720 --> 00:21:08.900
So imagine there's a bunch of changes that have come in.

00:21:09.420 --> 00:21:12.420
You're running talks for different versions of Python on your thing.

00:21:12.620 --> 00:21:20.120
There's some pending other requests that are queued up, and you're waiting for them to run, and you just want to know, like, well, when are these done?

00:21:20.170 --> 00:21:20.860
How long are they taking?

00:21:21.360 --> 00:21:24.140
So you can just point this at a GitHub repo that has a GitHub action.

00:21:24.840 --> 00:21:25.000
This

00:21:25.000 --> 00:21:25.560
is awesome.

00:21:26.340 --> 00:21:27.160
That's pretty cool, right?

00:21:27.620 --> 00:21:27.800
Yeah.

00:21:29.900 --> 00:21:30.140
Yes,

00:21:30.180 --> 00:21:36.800
I often have, like, a Git tab open to watch this stuff, but having it right in the command line, nice.

00:21:37.380 --> 00:21:41.040
Yeah, and it's like a live updating, very TUI feel, right?

00:21:41.160 --> 00:21:41.520
It's a very

00:21:41.520 --> 00:21:42.260
advanced

00:21:42.260 --> 00:21:43.100
sort of UI.

00:21:43.320 --> 00:21:50.840
It's not just a stream of text, but the UI is updating and changing with progress bars for each action and so on.

00:21:53.020 --> 00:21:53.140
Yeah.

00:21:53.600 --> 00:21:53.660
Cool.

00:21:53.880 --> 00:21:54.540
So, yeah.

00:21:55.160 --> 00:21:56.280
Well done on that, Ned.

00:21:56.620 --> 00:21:57.820
That's super cool.

00:21:58.200 --> 00:21:58.360
All right.

00:21:59.100 --> 00:22:00.060
That's it for my main items.

00:22:00.180 --> 00:22:00.560
Over to you, Brian.

00:22:01.940 --> 00:22:02.140
Okay.

00:22:02.520 --> 00:22:03.240
So are we

00:22:03.240 --> 00:22:03.900
on?

00:22:03.940 --> 00:22:04.200
No, for

00:22:04.200 --> 00:22:04.640
your last one.

00:22:04.640 --> 00:22:05.220
You got one more, don't you?

00:22:05.440 --> 00:22:06.240
Oh, I got one more?

00:22:06.380 --> 00:22:06.760
Yeah, I do.

00:22:06.760 --> 00:22:07.040
I think you do.

00:22:08.380 --> 00:22:08.480
Yeah.

00:22:08.880 --> 00:22:13.920
So next up is I'd like to talk about UVA a little bit.

00:22:17.880 --> 00:22:33.280
Yes. So this is Dave J. So Dave Johnson article. It's called Share Python Scripts Like a Pro, UV and PEP 723 for easy deployment.

00:22:34.100 --> 00:22:42.820
And we've talked about a lot of these pieces in different episodes, but I really like this write-up.

00:22:43.060 --> 00:22:53.160
It's a sort of kind of, if you want to write Python scripts with dependencies, that was an issue before and now it's not.

00:22:53.680 --> 00:22:55.980
But all the different parts of how to do this.

00:22:56.100 --> 00:23:02.640
So start with talking about what UV is and PEP 723.

00:23:03.200 --> 00:23:10.000
And that's the PEP that allowed you to put like some stuff at the top of a file to include your dependencies and stuff.

00:23:10.600 --> 00:23:25.860
So to set the stage, we don't have to dig into what this is, but he gives a command line script called Word Lookup that has some things like arg parse that's built in, but it also uses HTTPX.

00:23:25.910 --> 00:23:30.540
So that's an extra dependency that's outside of the script.

00:23:31.640 --> 00:23:36.620
And this is if you're doing a web scraping script, you're going to often have some extra dependency or something.

00:23:38.000 --> 00:23:40.180
And so then that's the script.

00:23:40.560 --> 00:23:44.800
It teaches you how to install UV, but you probably already haven't installed.

00:23:45.420 --> 00:23:48.120
And then how do I add that thing?

00:23:48.120 --> 00:24:00.380
You don't have to memorize the format of how to put that up at the top because if you say you add script and then you give it your script name and then what your dependency is, it automatically fills that out for you.

00:24:00.450 --> 00:24:05.860
So it sticks that script block at the top of your code, which is awesome.

00:24:07.920 --> 00:24:09.880
And I think I knew that, but forgot about it.

00:24:09.960 --> 00:24:12.920
So I'm glad it's in to just that little script tag.

00:24:13.500 --> 00:24:23.980
And then talks about how this is different and similar to the PyProject.toml and the relation to that, which I kind of like the extra teaching.

00:24:24.580 --> 00:24:31.720
It isn't necessary that you know that for scripts, but it's good for people to have that knowledge about the whole ecosystem.

00:24:32.980 --> 00:24:36.220
Talks about running it with UV Run.

00:24:37.260 --> 00:24:45.540
And then jumps down and saying things like you can do UV run, but you can also just add that UV run as a shebang for Linux and Mac users.

00:24:45.680 --> 00:24:46.820
You can add that to the top.

00:24:47.500 --> 00:24:53.260
And it gives the specific environment-esque UV run script that you have to

00:24:53.260 --> 00:24:54.440
stick to the

00:24:54.440 --> 00:24:54.460
top.

00:24:54.680 --> 00:24:56.720
That is super interesting, actually.

00:24:57.800 --> 00:25:00.060
And then you don't have to run Python or UV run.

00:25:00.060 --> 00:25:04.980
You can just save the script name if it's executable, and it'll just work, which is awesome.

00:25:05.740 --> 00:25:16.300
And I didn't get into trying this with Windows, but apparently you can kind of do some of this around how to get this invocable on Windows as well.

00:25:17.800 --> 00:25:20.600
I haven't tried this, but you can use Pi and other things.

00:25:21.330 --> 00:25:21.480
So

00:25:21.480 --> 00:25:21.860
there's some help.

00:25:21.860 --> 00:25:27.440
I think the Pi launcher respects shebangs on Windows, which is something it adds.

00:25:28.200 --> 00:25:28.380
Okay,

00:25:29.010 --> 00:25:29.180
cool.

00:25:29.620 --> 00:25:31.300
And then he

00:25:31.300 --> 00:25:40.140
recommends creating an extra script with a command line, a CMD script to launch your script with.

00:25:40.180 --> 00:25:43.040
So how to do this, how to complete the loop with Windows.

00:25:43.660 --> 00:25:49.500
So really great write-up for people writing utility scripts in Python.

00:25:51.520 --> 00:25:52.380
That's actually really nice.

00:25:52.860 --> 00:25:53.040
Yeah.

00:25:53.660 --> 00:25:54.040
Well done.

00:25:55.800 --> 00:25:55.920
Yeah.

00:25:56.020 --> 00:25:59.920
So that's all for our main topic.

00:26:01.760 --> 00:26:03.160
We both have extras.

00:26:04.240 --> 00:26:05.640
Do you want to jump into your extras first?

00:26:06.680 --> 00:26:07.120
I'll

00:26:07.120 --> 00:26:07.800
do mine real quick.

00:26:07.930 --> 00:26:08.040
Sure.

00:26:08.360 --> 00:26:08.820
I

00:26:08.820 --> 00:26:09.120
got a few.

00:26:09.200 --> 00:26:10.240
I'm going to try to go quick through them.

00:26:10.780 --> 00:27:06.180
One, I talked about PySQL Scribe, which if you're writing raw SQL for your code, but you don't, you want to have some kind of tooling support to help you in Python, this PySQL scribe lets you express through code the structure of your tables and their relationships and then you can ask it like hey what would the query of this be and then it will generate it based on like what database scheme or dialect like SQLite versus Microsoft SQL server query syntax you wanted to generate and so on and I proposed when we talked about it that hey would it be cool if there was an ability to just point it at a bunch of create scripts that defines your 100 tables and it just knows that? Well, Daniel, who runs a project, said that is a good idea and just released a version that you can just point it at a directory of create scripts and it'll use them to understand your entire data structure.

00:27:06.680 --> 00:28:13.700
Good job, Daniel. So a little bonus there. We talked about, this is a long-running one, we talked about formatting Markdown with MD format, which I've started to adopt. I will talk about that next but hugo uh points out like hey i use prettier which has been around for a long time it now has a markdown format so that's really cool from 2017 people can check that out and i'll link to that in the show notes if you want to use that i however am continuing on with md format and i ran it against the entire markdown structure of my upcoming talk python and production book and like I said all markdown one of the things I discovered I don't know if you knew it Brian but I definitely did not this is a really interesting linting philosophy would you run it against markdown it will render the markdown to HTML then pretty it then you know clean it up and then it'll run it through the markdown parser again and if the HTML differs it will roll back that change

00:28:14.320 --> 00:28:15.259
oh that's cool

00:28:15.940 --> 00:28:30.700
yeah so one of my chapters I put a whole bunch of plugins and goes one of the plugins is like not great because it changed the format and I'm like oh which one is it but I like them all I don't know maybe I need to debug it right now I'm just not formatting one chapter you know what chapter is?

00:28:31.280 --> 00:28:32.400
13 obviously

00:28:33.260 --> 00:28:33.960
obviously it's

00:28:33.960 --> 00:29:15.300
13 anyway what I found the command that I think is really really good is to use I wrote it down it's in the show notes but I must find it. It is to get say MD format --number so it renumbers those things which is great and then this one I thought I would like it to wrap it but all of my editors actually preserve the wrapping format so that it can kind of help you see the structure a little better even though markdown render doesn't and so that looked really crappy so if you say --wrap no it will actually explicitly unwrap if you've accidentally got some in there.

00:29:15.800 --> 00:29:23.160
So I like number and wrap no, not just not change it, but actually unravel the wrapping, which I thought was really cool.

00:29:23.880 --> 00:29:28.360
And as part of that, we did talk about UV, sorry, we talked about PIPX Inject.

00:29:29.360 --> 00:29:35.340
And last time you pointed out correctly that UV tool install --width is the equivalent.

00:29:35.450 --> 00:29:45.680
But I wanted to point out that when you, and I put it in the show notes, if you want to use width and UV tool install like inject, you have to say with as many times as there are extras.

00:29:46.020 --> 00:29:55.660
So UV tool install, MD format with, MD format, GFM, --with, MD format front matter, --with, and so on.

00:29:55.660 --> 00:30:01.800
So if you want to get that inject feel, you've got to like with separately every single parameter,

00:30:02.080 --> 00:30:02.500
every

00:30:02.500 --> 00:30:03.540
single extra or whatever.

00:30:04.720 --> 00:30:07.380
So anyway, that's a thing.

00:30:08.320 --> 00:30:17.260
Another one you can see right now that if you're watching the live stream or see the pictures that I'm using the Zen browser, which I really come to love.

00:30:17.380 --> 00:30:20.380
It's built on top of Firefox, which is great.

00:30:20.640 --> 00:30:23.240
And I really want this like nice clean format.

00:30:23.300 --> 00:30:27.120
We just have the tabs as icons on the side and everything's just at the top.

00:30:27.260 --> 00:30:29.080
It gives you more space, right?

00:30:30.060 --> 00:30:43.460
Well, Firefox, if you are a Firefox purist, has now come up with this tabs on the left side of things, which is a brand new feature that they just released last week, I think it was.

00:30:44.460 --> 00:30:56.880
But if you grab that little width of the tab and you slide it over until they're icon-sized, it looks exactly like what I have on the screen right now, Brian, where it has just icons on the left for the tabs and a dress bar across the top.

00:30:57.440 --> 00:30:58.960
The new Firefox is pretty good.

00:30:59.080 --> 00:30:59.860
There's still stuff missing.

00:30:59.980 --> 00:31:01.140
that Zen brings that's really cool.

00:31:01.340 --> 00:31:04.040
But anyway, I wanted to point people that that's an option now.

00:31:04.560 --> 00:31:04.660
Nice.

00:31:05.380 --> 00:31:05.500
Yeah.

00:31:06.700 --> 00:31:12.300
Finally, last thing on my end is a follow-up on UV from James Falcon.

00:31:13.900 --> 00:31:14.620
Sorry, James Falcon.

00:31:15.120 --> 00:31:15.920
Thanks for sending us in.

00:31:15.920 --> 00:31:18.220
He says, hey, I'm also a UV enthusiast.

00:31:18.720 --> 00:31:22.100
And I was holding out to using UV because there's one case it hasn't solved.

00:31:22.780 --> 00:31:25.660
However, you guys convinced me to work through it and get it figured out.

00:31:25.800 --> 00:31:32.420
So he maintains a library supported across multiple Python versions and needs to deal with bugs and specific ones.

00:31:32.620 --> 00:31:36.020
So like, it doesn't work this way in 3.8, but it works fine in 3.10.

00:31:36.820 --> 00:31:49.260
So the idea was to have, originally it was using PyE and V, because you can create virtual environments with those different ones, and then activate them by name, but the way UV worked originally, it didn't.

00:31:49.680 --> 00:32:07.080
So what he said, hey, look, I'm creating just a location for virtual environments on my profile, maybe a subfolder for the project, And then I use now, use UV to create version-specific virtual environments, you know, 3.11, 3.12, 3.13, and so on for that project.

00:32:08.300 --> 00:32:19.180
And then he includes a batch file that you can just say, work on this virtual environment project name, and it will automatically find it and activate for you and so on.

00:32:19.660 --> 00:32:26.180
So kind of gives us an example of like how you might sort of pyv, env your way around different versions using UV.

00:32:27.340 --> 00:32:27.860
that's pretty cool

00:32:28.370 --> 00:32:32.660
yeah so there's a little bash script that people can check out if they want to use it

00:32:33.290 --> 00:32:34.060
nice okay

00:32:34.370 --> 00:32:37.000
in the show notes that's it for my extras

00:32:38.620 --> 00:32:57.460
so for my extras so it's April right and one of the things we do in April on April 1st sometimes there's April Fool's pranks that happen and one of the things so there's good April Fool's and then there's bad April from the Springs.

00:32:57.750 --> 00:32:59.020
So I'm going to cover both.

00:32:59.580 --> 00:33:08.600
So first off, I think a good one is a video put out by, well, it was forwarded by the PS, but it says CultRepo.

00:33:08.850 --> 00:33:09.320
I'm not sure.

00:33:09.900 --> 00:33:14.600
I looked and I'm like, that is a really weird thing to kind of do an official joke from the PSF.

00:33:14.900 --> 00:33:15.300
That

00:33:15.300 --> 00:33:26.900
CultRepo group, they make a bunch of documentaries about, about, like highly produced documentaries about programming languages and their origins or

00:33:26.900 --> 00:33:27.760
programming frameworks.

00:33:27.890 --> 00:33:30.320
Like they have some on Vue.js and they have some on Angular.

00:33:31.700 --> 00:33:32.640
That's where it's from.

00:33:33.100 --> 00:33:38.000
Okay, so the video is breaking Guido Van Rossum returns Python's BDFL.

00:33:38.600 --> 00:33:41.020
And it's a two-minute video, or almost two minutes.

00:33:41.420 --> 00:33:41.840
Hilarious.

00:33:42.170 --> 00:33:42.720
I loved it.

00:33:43.900 --> 00:33:53.680
It shows him typing of the saying that everybody, what is the standards people?

00:33:53.820 --> 00:33:55.200
Oh, the boards.

00:33:55.400 --> 00:33:55.940
Steering council.

00:33:56.220 --> 00:33:58.480
Steering council is no longer necessary.

00:34:00.360 --> 00:34:02.760
A couple of things I wanted to point out that I loved about this video.

00:34:03.800 --> 00:34:12.139
Brett Cannon, he's in it and he's listed as famous Python quotationist is his title.

00:34:12.419 --> 00:34:23.399
And then Guido goes ahead and says, one of the things that he said, Guido says, as I always say, come for the language, stay for the community.

00:34:24.139 --> 00:34:26.899
And that's not a Guido quote, that's a Brett quote.

00:34:27.159 --> 00:34:32.179
So the famous Python quotation is gets crossed out after

00:34:32.179 --> 00:34:33.399
Guido

00:34:33.399 --> 00:34:35.340
says that, which is pretty funny.

00:34:37.200 --> 00:34:40.340
And then a little later, who was this?

00:34:40.419 --> 00:34:45.980
Barry Warsaw walks in and says, Guido, are you ready to release Python 2.8?

00:34:46.620 --> 00:34:48.240
Which is never going to happen.

00:34:48.679 --> 00:34:51.100
So that's pretty good.

00:34:52.860 --> 00:34:55.220
Guido says, indentation is enlightenment.

00:34:55.659 --> 00:35:07.580
And Barry gives him credit for saying that being Pythonic means becoming one with white space, which is good.

00:35:08.340 --> 00:35:16.900
Anyway, and then it kind of wraps it up with Guido announcing that he's going to implement a new keyword.

00:35:17.940 --> 00:35:18.200
Maybe.

00:35:18.940 --> 00:35:21.660
It's kind of like if, but way more Pythonic.

00:35:22.140 --> 00:35:23.180
So maybe something.

00:35:23.760 --> 00:35:28.960
And it gives an example of maybe print Python the documentary coming this summer.

00:35:29.560 --> 00:35:31.600
And I kind of hope that one is real.

00:35:31.660 --> 00:35:34.000
I hope we get a documentary.

00:35:34.900 --> 00:35:36.620
I mean, well, it's already this summer.

00:35:37.020 --> 00:35:37.820
Or it's almost this summer.

00:35:38.560 --> 00:35:38.980
If we get

00:35:38.980 --> 00:35:39.240
it done.

00:35:39.400 --> 00:35:40.840
Well, we're going to get it soon, then that'll be great.

00:35:41.380 --> 00:35:42.440
And if this

00:35:42.440 --> 00:35:45.560
cult repo company makes it, I think it'll be pretty good, yeah.

00:35:46.280 --> 00:35:48.840
When I first saw this, I saw a tweet come on.

00:35:48.880 --> 00:35:49.360
I'm like, yeah, whatever.

00:35:49.880 --> 00:35:51.080
Funny little joke.

00:35:51.280 --> 00:35:52.640
I just thought it was a tweet.

00:35:53.420 --> 00:35:56.740
And then Nick Wall sent it over and like, wait, you should check this out.

00:35:56.780 --> 00:35:57.120
It's funny.

00:35:57.220 --> 00:35:57.880
And I'm like, watch.

00:35:57.980 --> 00:36:00.620
I'm like, oh, there's way more here than I realized.

00:36:01.220 --> 00:36:01.540
This

00:36:01.540 --> 00:36:02.240
is well done.

00:36:02.680 --> 00:36:03.320
This is good.

00:36:03.940 --> 00:36:04.100
Okay,

00:36:04.160 --> 00:36:07.480
so that's a good way to do an April Fool's prank.

00:36:07.900 --> 00:36:36.700
I've never done one. I've never done like a tech prank. So I decided to try my hand at that this year. it did not go that well. So, I'm, and you know how, you know, this, have you ever heard, like, if you have to explain a joke and it's not funny, this is me explaining a joke. So it's not funny. so, there's pytest Repeat. So I've been doing on testing code, I've been doing a series on, pytest plugins and, pytest Repeat is one that I use all the time.

00:36:36.880 --> 00:36:41.700
And I noticed that it hadn't been being tested on, it only was tested on 3.12.

00:36:41.920 --> 00:36:44.520
It's not tested on 3.13 yet or 3.14.

00:36:45.400 --> 00:36:49.000
And, okay, so 3.14 is 3.14.

00:36:49.920 --> 00:36:56.320
Pi starts with 3.14, but pi is an irrational number, and it doesn't repeat.

00:36:56.780 --> 00:37:01.660
So the joke I was trying to make was I put out an episode on testing code.

00:37:01.750 --> 00:37:05.940
On April 1st, Python 3.4 won't repeat with pytestRepeat.

00:37:07.240 --> 00:37:20.520
and I guess it was and I even tried to make it I thought obvious to say unfortunately it doesn't seem to work on 3.14 even though there's no rational like irrational

00:37:21.170 --> 00:37:24.740
yeah that was nice I listened to that and said it was well done anyway

00:37:25.520 --> 00:37:37.820
I got some feedback of people confused and wondering why I was testing 3.14 anyway since it was an alpha anyway I had to explain like to five different people that it's actually fine.

00:37:38.040 --> 00:37:44.720
So the TLDR is, pytestRepeat works fine with Python 3.0.

00:37:45.260 --> 00:37:46.960
So don't worry about it.

00:37:49.080 --> 00:37:51.560
Anyway, how not to do an April Fullspring.

00:37:53.400 --> 00:37:56.960
So I guess that's all of our extra items, right?

00:37:58.300 --> 00:37:58.880
It sure is.

00:38:00.040 --> 00:38:00.880
We'll see how much

00:38:00.880 --> 00:38:02.220
I got to explain this joke, huh?

00:38:03.740 --> 00:38:04.880
No, I think this one is fine.

00:38:04.920 --> 00:38:05.760
This one is good.

00:38:07.360 --> 00:38:16.780
So this comes to us from the Programming Humor Twitter feed, and it says, what's the best thing you found in code?

00:38:16.820 --> 00:38:21.400
And they are almost always about comments in this thread.

00:38:21.560 --> 00:38:24.900
So here's actually Python.

00:38:26.280 --> 00:38:30.260
So this is a comment that somebody found in the code, and they posted it.

00:38:31.360 --> 00:39:32.920
But if you look through and you look at the comments below, there's a glorious set of 132 comments of similar they're not all great but here's what it says at the top of this thread it says as a comment you may think that this function is obsolete and it doesn't seem to do anything and you would be correct but when we remove this function for some reason the whole program crashes and we can't figure out why so here it will stay so I entitled the joke so here it will stay and let me see if I can find a few. This is my favorite one, though. This probably should have been the top line one, but this came to us as a response from the original. Somebody named Jeppe pointed out and said, not mine, but I find this kind of funny. And this is a C-based type of language, because it's slash slash for the comment. Dear programmer, when I wrote this code, only God and I knew how it worked. Now only God knows it. Therefore, if you're trying to optimize this routine and it fails, most surely it will.

00:39:33.660 --> 00:39:36.740
Please increase the counter as a warning to the next person.

00:39:37.000 --> 00:39:41.080
And then there's a variable below that says, total hours wasted here, 254.

00:39:42.980 --> 00:39:43.800
That's so good.

00:39:47.480 --> 00:39:48.880
And on and on it goes.

00:39:49.160 --> 00:39:58.080
If you don't want the rest of your, if you want to lose maybe a half hour, you can go right down here and there's a bunch of good stuff in there.

00:39:58.180 --> 00:40:01.180
So there it is.

00:40:02.260 --> 00:40:02.660
That's good.

00:40:03.220 --> 00:40:03.340
Yeah,

00:40:03.440 --> 00:40:04.340
I think that's a good one.

00:40:05.520 --> 00:40:05.780
Yeah.

00:40:06.980 --> 00:40:15.240
I've only have a couple times have, actually, at least I have at least one memory of some code that didn't look like it did anything, except

00:40:15.240 --> 00:40:15.800
for obviously

00:40:15.800 --> 00:40:19.240
it was getting run, and the timing, I'm sure it was just timing.

00:40:19.600 --> 00:40:24.240
Like, if you took it out, it changed the timing of the rest of the program, and then it did it.

00:40:24.600 --> 00:40:25.540
So, yeah,

00:40:25.640 --> 00:40:26.680
I've actually run into it.

00:40:26.700 --> 00:40:30.640
cover some kind of concurrency bug that it was defensive against.

00:40:31.400 --> 00:40:31.760
Yeah.

00:40:32.800 --> 00:40:34.060
C codes are like that.

00:40:35.900 --> 00:40:37.680
It's hard to see the errors. That's true.

00:40:39.100 --> 00:40:40.380
Hard to see the errors.

00:40:41.560 --> 00:40:42.160
It was good.

00:40:42.450 --> 00:40:43.300
No, it wasn't.

00:40:43.870 --> 00:40:45.480
We better quit. We better just call it an episode.

00:40:46.010 --> 00:40:47.360
Okay. Alright. Thanks a lot.

00:40:48.040 --> 00:40:48.200
Bye.

00:40:48.600 --> 00:40:48.700
Bye.

