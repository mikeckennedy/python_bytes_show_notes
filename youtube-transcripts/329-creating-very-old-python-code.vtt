WEBVTT

00:00:00.000 --> 00:00:01.000
Hey everybody.


00:00:01.000 --> 00:00:02.000
Hello.


00:00:02.000 --> 00:00:07.920
Let's, let's just kick it off and get started.


00:00:07.920 --> 00:00:12.360
Hello and welcome to Python bites where we deliver Python news and headlines directly


00:00:12.360 --> 00:00:14.320
to your earbuds.


00:00:14.320 --> 00:00:18.960
This is episode 328 and I am Brian Okken.


00:00:18.960 --> 00:00:19.960
329.


00:00:19.960 --> 00:00:21.640
Oh, it's 329.


00:00:21.640 --> 00:00:26.000
Okay, let's do it again.


00:00:26.000 --> 00:00:33.520
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:33.520 --> 00:00:41.920
to your earbuds. This is episode 329, recorded March 30th, 2023. And I'm Brian Okken.


00:00:41.920 --> 00:00:43.840
>> I'm Michael Kennedy.


00:00:43.840 --> 00:00:49.520
>> And before we get started, I want to do a couple of things. I want to thank Microsoft


00:00:49.520 --> 00:00:53.280
for Startup Founders Hub for sponsoring this episode. Please listen to their spot. We've


00:00:53.280 --> 00:00:58.280
We've got a very special random guest appearance or voice


00:00:58.280 --> 00:01:00.500
for that ad read.


00:01:00.500 --> 00:01:02.220
So that'll be fun.


00:01:02.220 --> 00:01:04.480
I also, if you're listening to this,


00:01:04.480 --> 00:01:06.400
I'd like to encourage you to,


00:01:06.400 --> 00:01:08.540
and you've never watched the live show,


00:01:08.540 --> 00:01:11.800
I'd like to encourage you to watch our live show


00:01:11.800 --> 00:01:13.560
on YouTube or streaming.


00:01:13.560 --> 00:01:16.620
We usually, today's Thursday,


00:01:16.620 --> 00:01:19.420
but we usually record Tuesday at noon or 11.


00:01:19.420 --> 00:01:20.580
No, Tuesday at 11.


00:01:20.580 --> 00:01:22.300
Yeah, I should have practiced this.


00:01:22.300 --> 00:01:26.820
Anyway, but welcome and people that are here today


00:01:26.820 --> 00:01:29.060
are watching on YouTube.


00:01:29.060 --> 00:01:30.540
Thanks for watching.


00:01:30.540 --> 00:01:32.820
And why don't you kick us off, Michael?


00:01:32.820 --> 00:01:35.720
- I got something.


00:01:35.720 --> 00:01:37.860
I think it'll resonate with you folks.


00:01:37.860 --> 00:01:39.180
Maybe you already are aware of this.


00:01:39.180 --> 00:01:40.540
This is news to me.


00:01:40.540 --> 00:01:45.140
Comes to us from Brandon Hannigan.


00:01:45.140 --> 00:01:46.700
So thanks for sending that in.


00:01:46.700 --> 00:01:49.620
And it's an environment variable


00:01:49.620 --> 00:01:51.660
and in and of itself, it's interesting


00:01:51.660 --> 00:01:53.620
that it leads to many more environment variables


00:01:53.620 --> 00:01:56.780
you can play with is also pretty awesome.


00:01:56.780 --> 00:02:02.640
So this one is about the Dunder Pi Cache folder.


00:02:02.640 --> 00:02:05.020
So I don't know how you feel about these, Brian.


00:02:05.020 --> 00:02:06.420
I'm glad they exist.


00:02:06.420 --> 00:02:11.020
I'm not necessarily super glad that they're spread out


00:02:11.020 --> 00:02:13.420
a bunch of random folders.


00:02:13.420 --> 00:02:17.140
So a lot of my projects have many different modules


00:02:17.140 --> 00:02:20.260
and different folders, submodule type set up.


00:02:20.260 --> 00:02:23.900
And when I run them, they all get filled up


00:02:23.900 --> 00:02:27.020
with DunderPyCache folders with startup PYC,


00:02:27.020 --> 00:02:29.520
compiled Python, like people might think.


00:02:29.520 --> 00:02:32.220
I think Python is compiled, but yes, Python is compiled.


00:02:32.220 --> 00:02:33.740
It's just then interpreted not,


00:02:33.740 --> 00:02:36.660
all the way to machine instructions, right?


00:02:36.660 --> 00:02:39.100
So those files end up in the DunderPyCache,


00:02:39.100 --> 00:02:42.360
which spread throughout your project structure.


00:02:42.360 --> 00:02:44.820
Sometimes I wanna make a copy of that.


00:02:44.820 --> 00:02:45.700
I wanna move that around.


00:02:45.700 --> 00:02:46.900
I wanna zip it up and share it.


00:02:46.900 --> 00:02:48.260
And I don't want those things in there.


00:02:48.260 --> 00:02:50.220
And so I'll have to go in and search for all those


00:02:50.220 --> 00:02:52.100
and remove them recursively,


00:02:52.100 --> 00:02:53.480
which is not at the end of the world,


00:02:53.480 --> 00:02:55.060
but I'd rather they are not there,


00:02:55.060 --> 00:02:55.900
or if they were there,


00:02:55.900 --> 00:02:59.260
could they just go in a top level thing?


00:02:59.260 --> 00:03:00.100
You know what I mean?


00:03:00.100 --> 00:03:04.140
Like, they just go into a single gender PyCache


00:03:04.140 --> 00:03:05.700
that understands the whole structure,


00:03:05.700 --> 00:03:09.060
not every file being treated as if it's unrelated.


00:03:09.060 --> 00:03:09.900
Anyway.


00:03:09.900 --> 00:03:11.340
- I mean, it's better than it used to be


00:03:11.340 --> 00:03:14.380
of having the PYCs right next to the Python files.


00:03:14.380 --> 00:03:17.260
- Yes, it is an improvement.


00:03:17.260 --> 00:03:19.380
But this thing that Brendan said,


00:03:19.380 --> 00:03:22.880
and you can set the Python PyCache prefix,


00:03:22.880 --> 00:03:26.660
which is a path, maybe it should be called


00:03:26.660 --> 00:03:28.820
Python cache folder, I don't know.


00:03:28.820 --> 00:03:31.660
Anyway, what you do is you set this


00:03:31.660 --> 00:03:34.160
in your environment variable,


00:03:34.160 --> 00:03:35.660
maybe in your user account,


00:03:35.660 --> 00:03:38.840
maybe in the activation of a virtual environment,


00:03:38.840 --> 00:03:42.200
if you want it to be a one-off type thing, I don't know.


00:03:42.200 --> 00:03:44.600
Then when Python goes to create these, it goes,


00:03:44.600 --> 00:03:47.240
oh, they don't want the DunderPy cache,


00:03:47.240 --> 00:03:52.680
it over in this directory over there. And so it'll make you can isolate all of your


00:03:52.680 --> 00:03:58.920
under pi cache stuff into a separate location on your user profile. You can go and blast


00:03:58.920 --> 00:04:03.360
that away whenever you feel like. But most importantly, it's not within your source code.


00:04:03.360 --> 00:04:06.560
If you like zip it up and hand it out or things like that.


00:04:06.560 --> 00:04:12.400
Oh, wow. Okay. Yeah, that's great. Yeah, it says if if this is set, Python will write


00:04:12.400 --> 00:04:17.400
"start.pyc files in a mirror directory tree at this path


00:04:17.400 --> 00:04:19.720
"instead of and under PyCache directories


00:04:19.720 --> 00:04:20.580
"within the source tree.


00:04:20.580 --> 00:04:22.620
"This is equivalent to specifying the -x


00:04:22.620 --> 00:04:26.540
"pycache prefix equals path option."


00:04:26.540 --> 00:04:29.320
So pretty cool, right?


00:04:29.320 --> 00:04:32.000
- Yeah, I also didn't know about the -x though either.


00:04:32.000 --> 00:04:33.540
So that's pretty cool.


00:04:33.540 --> 00:04:35.940
- Yeah, this page that I'm linking to is at the top,


00:04:35.940 --> 00:04:37.240
it has all the command line options


00:04:37.240 --> 00:04:39.440
and then almost all the command line options


00:04:39.440 --> 00:04:42.840
have an environment variable thing


00:04:42.840 --> 00:04:44.800
if you want it to just be the default all the time


00:04:44.800 --> 00:04:46.320
and you don't have to set it.


00:04:46.320 --> 00:04:48.460
So there's a bunch you can come through here.


00:04:48.460 --> 00:04:52.600
So Python path, you can set Python startup.


00:04:52.600 --> 00:04:55.920
So these are the Python commands that'll execute


00:04:55.920 --> 00:04:59.280
whenever you start Python, which is kind of interesting.


00:04:59.280 --> 00:05:03.120
Optimize, breakpoint, debug.


00:05:03.120 --> 00:05:05.860
The one we talked about, you can set up a hash seed


00:05:05.860 --> 00:05:10.300
So you can get repeatable deterministic hashing.


00:05:10.300 --> 00:05:12.460
A bunch of stuff is here people can check out.


00:05:12.460 --> 00:05:14.380
How you look at warnings,


00:05:14.380 --> 00:05:15.420
how much warnings you wanna see,


00:05:15.420 --> 00:05:17.460
whether or not there's buffering.


00:05:17.460 --> 00:05:21.940
So you'll see sometimes things like the standard out


00:05:21.940 --> 00:05:26.420
will come after the standard error,


00:05:26.420 --> 00:05:28.120
but the standard error in time


00:05:28.120 --> 00:05:30.060
actually came after the out, right?


00:05:30.060 --> 00:05:31.820
'Cause the buffering got out of,


00:05:31.820 --> 00:05:34.140
they hit the buffer at different periods.


00:05:34.140 --> 00:05:36.140
So you can do things like turn that off,


00:05:36.140 --> 00:05:38.500
turn on malloc stats if you want to track that.


00:05:38.500 --> 00:05:41.340
So there's like a bunch of things you can come in here


00:05:41.340 --> 00:05:45.500
and play with, but I think the PYC one's an interesting one,


00:05:45.500 --> 00:05:47.340
especially for people who hand out code.


00:05:47.340 --> 00:05:50.120
You know, like if you're doing like a training or a tutorial


00:05:50.120 --> 00:05:51.420
and you're like, "Here, I want to give everybody this."


00:05:51.420 --> 00:05:53.220
You can have the PYC file.


00:05:53.220 --> 00:05:54.060
Again.


00:05:54.060 --> 00:05:56.100
- I was just looking through there


00:05:56.100 --> 00:05:58.900
'cause I'm surprised that you can't specify


00:05:58.900 --> 00:06:01.740
which XKCD comic don't link to, but you know.


00:06:01.740 --> 00:06:02.800
- I know.


00:06:02.800 --> 00:06:05.560
When I import anti-gravity, which one?


00:06:05.560 --> 00:06:06.960
Don't worry, we'll get there.


00:06:06.960 --> 00:06:08.620
- Cool.


00:06:08.620 --> 00:06:10.600
- All right, well, that's what I got for this one.


00:06:10.600 --> 00:06:13.360
The Python PyCache prefix.


00:06:13.360 --> 00:06:14.440
Check it out. - Nice.


00:06:14.440 --> 00:06:15.280
- Yeah.


00:06:15.280 --> 00:06:17.520
- I wanted to talk about GUIs.


00:06:17.520 --> 00:06:20.000
We haven't talked about GUIs for a while.


00:06:20.000 --> 00:06:21.080
Actually, we haven't. - We should have.


00:06:21.080 --> 00:06:22.440
We were on such a kick.


00:06:22.440 --> 00:06:23.720
We were on such a kick.


00:06:23.720 --> 00:06:27.680
- Yeah, but several people have mentioned this to us,


00:06:27.680 --> 00:06:29.720
so we thought we'd cover it.


00:06:29.720 --> 00:06:31.680
It's a package called snicegui.


00:06:31.680 --> 00:06:34.120
And normally, actually, when I think about GUI,


00:06:34.120 --> 00:06:37.160
I think about like actual, not web stuff,


00:06:37.160 --> 00:06:39.780
but user interface stuff that's on the desktop.


00:06:39.780 --> 00:06:42.420
But this is a browser-based thing.


00:06:42.420 --> 00:06:45.360
So this is a package that's,


00:06:45.360 --> 00:06:48.440
it says it's easy to use Python-based UI framework,


00:06:48.440 --> 00:06:50.340
which shows up in your web browser.


00:06:50.340 --> 00:06:53.400
Buttons, dialogues, markdown, 3D plots, and more.


00:06:53.400 --> 00:06:56.160
What's cool is you can play with it all


00:06:56.160 --> 00:06:57.320
before you even try it.


00:06:57.320 --> 00:07:00.020
So the documentation is really great.


00:07:00.020 --> 00:07:05.940
And even just here, I thought this was just like a screenshot or something.


00:07:05.940 --> 00:07:08.020
No, you can just like, this is part of it.


00:07:08.020 --> 00:07:11.820
You can move it and interact with it right here in the first page.


00:07:11.820 --> 00:07:12.820
It's pretty cool.


00:07:12.820 --> 00:07:17.140
The document, full documentation is really pretty great too.


00:07:17.140 --> 00:07:21.660
I actually want to try to play with this because the code really looks pretty easy to write.


00:07:21.660 --> 00:07:28.780
So for some quick, maybe dashboards or some quick control stuff that you're okay with doing through a web browser,


00:07:28.780 --> 00:07:30.780
Why not try it out?


00:07:30.780 --> 00:07:33.180
And some of these are pretty cool.


00:07:33.180 --> 00:07:35.420
I was playing with text input.


00:07:35.420 --> 00:07:38.400
So it's talking about validation stuff.


00:07:38.400 --> 00:07:42.100
So you can have some text and you can just start typing


00:07:42.100 --> 00:07:44.400
and it's saying, oh, that's too long.


00:07:44.400 --> 00:07:47.500
So you can, I mean, this validation is pretty simple


00:07:47.500 --> 00:07:48.580
of just checking length,


00:07:48.580 --> 00:07:50.840
but you can do all sorts of stuff like email validation


00:07:50.840 --> 00:07:52.340
or whatever you want it to do,


00:07:52.340 --> 00:07:54.120
because it's just like a function that's calling.


00:07:54.120 --> 00:07:56.420
So kind of neat.


00:07:56.420 --> 00:07:58.460
You got a validation there.


00:07:58.460 --> 00:07:59.880
knobs, knobs are fun.


00:07:59.880 --> 00:08:02.180
I was playing with the knobs.


00:08:02.180 --> 00:08:07.060
So drag knob and turning.


00:08:07.060 --> 00:08:09.060
Anyway, all sorts of fun things.


00:08:09.060 --> 00:08:11.140
- I like how you use a context manager


00:08:11.140 --> 00:08:13.780
to put it into the page with knob.


00:08:13.780 --> 00:08:15.260
- What?


00:08:15.260 --> 00:08:16.100
With knob.


00:08:16.100 --> 00:08:20.580
Interesting, I wonder why.


00:08:20.580 --> 00:08:21.420
- I don't know.


00:08:21.420 --> 00:08:24.340
Oh, to put the icon inside it.


00:08:24.340 --> 00:08:26.700
So you basically, it looks like you're focusing


00:08:27.660 --> 00:08:31.420
the subsequent commands to be within the container


00:08:31.420 --> 00:08:34.740
of the knob, 'cause the knob is like a circular


00:08:34.740 --> 00:08:36.900
progress bar type thing, and you can put a,


00:08:36.900 --> 00:08:38.800
like a volume up icon inside it.


00:08:38.800 --> 00:08:42.020
- Okay.


00:08:42.020 --> 00:08:45.940
Anyway, just all sorts of cool stuff.


00:08:45.940 --> 00:08:49.380
Joystick, that's really, I don't have a joystick


00:08:49.380 --> 00:08:53.100
to play with this out, but some interesting naming there


00:08:53.100 --> 00:08:57.340
with the joystick, but anyway.


00:08:57.340 --> 00:09:02.340
- So moving on, date pickers and all sorts of things.


00:09:02.340 --> 00:09:04.000
Ooh, that's nice.


00:09:04.000 --> 00:09:05.020
Cool.


00:09:05.020 --> 00:09:08.400
But UI elements, if you're okay with trying something new,


00:09:08.400 --> 00:09:11.540
a nice GUI might be right for you.


00:09:11.540 --> 00:09:13.300
So that's it.


00:09:13.300 --> 00:09:14.540
- It's interesting, isn't it?


00:09:14.540 --> 00:09:18.460
You know, when I look at these types of frameworks


00:09:18.460 --> 00:09:21.120
that a lot of times I feel like what they say is,


00:09:21.120 --> 00:09:25.460
HTML is terrible, the DOM is terrible, CSS is terrible.


00:09:25.460 --> 00:09:27.740
let's create a parallel Python


00:09:27.740 --> 00:09:30.440
or name your language equivalent


00:09:30.440 --> 00:09:33.340
where we put elements in the webpage.


00:09:33.340 --> 00:09:37.140
I'm like, hmm, they may have their drawbacks


00:09:37.140 --> 00:09:39.120
but at least you have a ton of tools and stuff


00:09:39.120 --> 00:09:42.240
that apply to HTML and CSS and all those things, right?


00:09:42.240 --> 00:09:43.260
- Yeah. - But with this one,


00:09:43.260 --> 00:09:44.980
I think there's a lot of cool widgets


00:09:44.980 --> 00:09:45.860
and stuff that are here.


00:09:45.860 --> 00:09:48.380
And it looks more like the, it's not like,


00:09:48.380 --> 00:09:51.940
we don't like HTML so let's make a Python DOM


00:09:51.940 --> 00:09:53.580
that you create the HTML with,


00:09:53.580 --> 00:09:57.880
but rather like how do we make a cool interactive page


00:09:57.880 --> 00:10:00.440
based on these additional things like knobs


00:10:00.440 --> 00:10:03.420
and joysticks and sliders


00:10:03.420 --> 00:10:06.960
and stuff that's not easily part of HTML.


00:10:06.960 --> 00:10:09.840
- Yeah, and the places where I would really use


00:10:09.840 --> 00:10:13.500
something like this are, I mean, this is a short code.


00:10:13.500 --> 00:10:16.940
So especially internal tools where,


00:10:16.940 --> 00:10:18.540
or even just stuff for myself,


00:10:18.540 --> 00:10:21.260
if I want to explore some data control,


00:10:21.260 --> 00:10:24.880
like a database or got a bunch of, you know,


00:10:24.880 --> 00:10:26.680
controlling some system or something,


00:10:26.680 --> 00:10:28.760
and I wanna like quickly throw something together,


00:10:28.760 --> 00:10:32.180
something like this would be great for just doing a,


00:10:32.180 --> 00:10:36.240
like a one pager or something to try it out.


00:10:36.240 --> 00:10:38.520
- I also think these types of frameworks


00:10:38.520 --> 00:10:41.800
would be pretty cool to bring into some kind of


00:10:41.800 --> 00:10:46.440
no electron JS type thing, where you're like,


00:10:46.440 --> 00:10:48.880
and here's how you make it an app


00:10:48.880 --> 00:10:50.520
that doesn't actually look like a webpage


00:10:50.520 --> 00:10:52.160
and give it to someone.


00:10:52.160 --> 00:10:55.560
- Yeah, so one of the things they bring up is like,


00:10:55.560 --> 00:10:59.560
great for micro web apps, dashboards, robotics projects,


00:10:59.560 --> 00:11:01.520
like school robotics, stuff like that.


00:11:01.520 --> 00:11:02.360
Smart home solutions.


00:11:02.360 --> 00:11:03.360
- Oh, that joystick thing, right?


00:11:03.360 --> 00:11:04.920
Could drive you a little.


00:11:04.920 --> 00:11:09.240
- And then one of the nice things that I noticed


00:11:09.240 --> 00:11:13.340
about the documentation is they've got a bunch of demos.


00:11:13.340 --> 00:11:18.840
Oh, these are the actual demos, but there's examples.


00:11:18.840 --> 00:11:19.680
Where did I find those?


00:11:19.680 --> 00:11:22.080
Is it maybe under examples?


00:11:22.080 --> 00:11:24.600
Well, anyway, there's a whole bunch of like actual code.


00:11:24.600 --> 00:11:27.280
So there's repos around that you can try it out


00:11:27.280 --> 00:11:31.280
with different repositories.


00:11:31.280 --> 00:11:32.680
Maybe it's just on the front page.


00:11:32.680 --> 00:11:34.960
Anyway, I was impressed.


00:11:34.960 --> 00:11:36.120
Oh yeah, here we go.


00:11:36.120 --> 00:11:37.400
Down at the bottom of the front page,


00:11:37.400 --> 00:11:38.880
there's like slideshows.


00:11:38.880 --> 00:11:41.840
And even if you want to, will this work with FastAPI?


00:11:41.840 --> 00:11:45.480
Apparently there's a FastAPI example


00:11:45.480 --> 00:11:48.880
for just some quick repositories.


00:11:48.880 --> 00:11:50.840
so you can try it out yourself.


00:11:50.840 --> 00:11:55.040
- Maybe like an admin page type of thing


00:11:55.040 --> 00:11:56.680
that you can play with.


00:11:56.680 --> 00:11:59.480
Yeah, there's some OpenCV webcam.


00:11:59.480 --> 00:12:01.720
- Infinite scroll for galleries.


00:12:01.720 --> 00:12:07.360
And the amount of like demos of components right there,


00:12:07.360 --> 00:12:10.680
but then actually specific examples where you can,


00:12:10.680 --> 00:12:13.280
you know, with the code,


00:12:13.280 --> 00:12:15.720
with repos that you can just copy and get started with,


00:12:15.720 --> 00:12:18.680
that's pretty impressive that they put all that together


00:12:18.680 --> 00:12:20.000
right off the bat.


00:12:20.000 --> 00:12:21.120
- Yeah.


00:12:21.120 --> 00:12:24.160
Yeah, it looks like it's definitely worth checking out.


00:12:24.160 --> 00:12:27.080
- Do you know what else is worth checking out?


00:12:27.080 --> 00:12:28.400
- Our sponsor.


00:12:28.400 --> 00:12:31.600
- Yes, Microsoft for Startups Founders Hub.


00:12:31.600 --> 00:12:33.840
Thank you for sponsoring this episode.


00:12:33.840 --> 00:12:36.720
And what was the key that you,


00:12:36.720 --> 00:12:40.400
how did you generate this code, the text?


00:12:40.400 --> 00:12:42.860
- Well, remember, I don't recall who suggested it


00:12:42.860 --> 00:12:45.960
because I had the American football coach


00:12:45.960 --> 00:12:49.240
motivational speech version, variant last time.


00:12:49.240 --> 00:12:51.440
And somebody said, well, what if it was like Ted Lasso?


00:12:51.440 --> 00:12:55.400
So I said, hey, open AI thing,


00:12:55.400 --> 00:12:58.260
here's the Microsoft ad.


00:12:58.260 --> 00:13:01.900
Could you rewrite it this time in the style of Ted Lasso?


00:13:01.900 --> 00:13:06.840
- Yeah, so it's an odd episode.


00:13:06.840 --> 00:13:09.280
So I get the honor of trying to be Ted Lasso,


00:13:09.280 --> 00:13:12.120
which I'm not gonna get the voice, so apologies.


00:13:12.120 --> 00:13:13.920
And I did not grow up in the Midwest.


00:13:13.920 --> 00:13:15.940
So anyway, let's just get started.


00:13:15.940 --> 00:13:18.600
Hey there team, gather around


00:13:18.600 --> 00:13:20.640
because I've got something real special


00:13:20.640 --> 00:13:22.000
to share with y'all.


00:13:22.000 --> 00:13:24.240
Now, you know how much I believe


00:13:24.240 --> 00:13:26.740
in the power of teamwork and positivity, right?


00:13:26.740 --> 00:13:29.220
Well, this opportunity I'm telling you,


00:13:29.220 --> 00:13:33.200
about to tell you is just like the perfect assist


00:13:33.200 --> 00:13:35.080
to your startup goal.


00:13:35.080 --> 00:13:37.160
I'm talking about the Microsoft for Startups


00:13:37.160 --> 00:13:38.800
Founders Hub, folks.


00:13:38.800 --> 00:13:42.360
Now imagine if you will, a locker room full of support


00:13:42.360 --> 00:13:45.360
for your startup, especially if you're keen


00:13:45.360 --> 00:13:48.080
on that there artificial intelligence stuff.


00:13:48.080 --> 00:13:50.320
We're talking over six figures of benefits


00:13:50.320 --> 00:13:52.600
that'll change the game for your team.


00:13:52.600 --> 00:13:56.640
They're offering you 150K in Azure credits.


00:13:56.640 --> 00:13:59.120
And that my friends is like having the best player


00:13:59.120 --> 00:14:01.240
on the field on your side.


00:14:01.240 --> 00:14:04.080
And what's more, the Founders Hub has given y'all


00:14:04.080 --> 00:14:08.720
a unique chance to access open AIs, APIs,


00:14:08.720 --> 00:14:12.280
and the new Azure Open API,


00:14:12.280 --> 00:14:14.280
The Azure OpenAI service.


00:14:14.280 --> 00:14:17.600
It's like having your own generative AI coach


00:14:17.600 --> 00:14:20.040
to help you come up with game winning strategies


00:14:20.040 --> 00:14:21.440
for your applications.


00:14:21.440 --> 00:14:26.120
Now, I know how important it is to have the right support.


00:14:26.120 --> 00:14:28.080
And that's why the folks at Microsoft


00:14:28.080 --> 00:14:31.720
are also offering one-on-one technical advice,


00:14:31.720 --> 00:14:34.800
helping you with your game plan, scalability and security.


00:14:34.800 --> 00:14:37.000
Plus, you'll be part of a network of mentors


00:14:37.000 --> 00:14:39.800
who know the startup would like,


00:14:41.240 --> 00:14:43.600
Does the startup world like the back of their hand?


00:14:43.600 --> 00:14:45.120
I can't emphasize enough


00:14:45.120 --> 00:14:47.840
how amazing this opportunity is friends.


00:14:47.840 --> 00:14:48.680
And guess what?


00:14:48.680 --> 00:14:49.840
It's open to everyone,


00:14:49.840 --> 00:14:51.960
no matter what stage your startup's at


00:14:51.960 --> 00:14:54.400
and no funding requirements.


00:14:54.400 --> 00:14:56.520
Just take five minutes to apply


00:14:56.520 --> 00:14:59.900
and you'll be on your way to reaping some massive benefits.


00:14:59.900 --> 00:15:00.940
So come on team,


00:15:00.940 --> 00:15:03.280
let's harness the power of AI for your startup


00:15:03.280 --> 00:15:05.800
and join Microsoft for Startup Founders Hub today.


00:15:05.800 --> 00:15:10.640
Head on over to pythonbytes.fm/foundershub2022


00:15:10.640 --> 00:15:11.820
and sign up.


00:15:11.820 --> 00:15:13.640
This is your chance to score big.


00:15:13.640 --> 00:15:16.680
So don't let it slip through your fingers.


00:15:16.680 --> 00:15:17.780
And just so you know,


00:15:17.780 --> 00:15:21.740
the ad you just heard was written by the same AI


00:15:21.740 --> 00:15:23.080
you'll get access to.


00:15:23.080 --> 00:15:24.400
Ain't that something?


00:15:24.400 --> 00:15:26.520
So don't wait any longer and sign up at


00:15:26.520 --> 00:15:31.520
pythonbytes.fm/foundershub2022.


00:15:31.520 --> 00:15:33.640
The big thank you for Microsoft,


00:15:33.640 --> 00:15:36.420
to Microsoft for supporting this show.


00:15:36.420 --> 00:15:39.560
- That open AI, that sure is something.


00:15:39.560 --> 00:15:44.160
All right, speaking of something, let's talk about ngrok.


00:15:44.160 --> 00:15:45.200
- Okay. - Let's talk about Flask.


00:15:45.200 --> 00:15:48.120
Like I can't decide, let's talk about both.


00:15:48.120 --> 00:15:51.280
So this one I wanna cover is an interesting one.


00:15:51.280 --> 00:15:54.960
So I've talked about ngrok before.


00:15:54.960 --> 00:15:55.920
For those of you who don't know,


00:15:55.920 --> 00:15:57.280
like unfortunately their website,


00:15:57.280 --> 00:15:58.200
I don't know what's gone on,


00:15:58.200 --> 00:15:59.480
but they've redesigned it in a way


00:15:59.480 --> 00:16:00.760
they can't really tell what it does,


00:16:00.760 --> 00:16:02.920
but it's just, anyway.


00:16:05.240 --> 00:16:10.240
In Grok, what it does is it lets you run a command locally


00:16:10.240 --> 00:16:15.240
and then share your web app, whether that be for an API,


00:16:15.240 --> 00:16:17.600
someone needs to talk to the API,


00:16:17.600 --> 00:16:19.960
or just the web app itself.


00:16:19.960 --> 00:16:23.560
So for example, Brian, imagine you had created a cool demo


00:16:23.560 --> 00:16:28.560
of that nice GUI thing, and you wanted to let some people


00:16:28.560 --> 00:16:30.120
you're in a meeting with your team,


00:16:30.120 --> 00:16:32.000
like, hey, you guys, y'all should check this out.


00:16:32.000 --> 00:16:33.960
This is really, really cool.


00:16:33.960 --> 00:16:36.540
and what you might do normally would say,


00:16:36.540 --> 00:16:38.760
well, let's just fire up a screen sharing


00:16:38.760 --> 00:16:40.120
and I'll drive it around.


00:16:40.120 --> 00:16:43.320
But the interaction part of those widgets is really cool.


00:16:43.320 --> 00:16:44.640
So it'd be better if you could just say


00:16:44.640 --> 00:16:46.440
and interact with this, right?


00:16:46.440 --> 00:16:49.080
So if you fire up ngrok, you just give them a URL


00:16:49.080 --> 00:16:54.080
that reverse SSH tunnels into your machine


00:16:54.080 --> 00:16:55.680
and then they can access it on the internet


00:16:55.680 --> 00:16:58.560
with their browser and everyone can play with it live.


00:16:58.560 --> 00:16:59.520
Right? - Okay, yeah.


00:16:59.520 --> 00:17:01.520
- So that's really cool.


00:17:01.520 --> 00:17:05.440
I recently used that for, I'm just about to release


00:17:05.440 --> 00:17:08.840
a course called Python Web Apps that fly with CDNs.


00:17:08.840 --> 00:17:11.040
Like basically how do you do really awesome stuff


00:17:11.040 --> 00:17:14.500
with CDNs plus Python and Flask and all those things


00:17:14.500 --> 00:17:16.540
to make your app way, way faster.


00:17:16.540 --> 00:17:17.840
- Nice.


00:17:17.840 --> 00:17:20.960
- Well, in order to put that together and test it,


00:17:20.960 --> 00:17:23.180
you've gotta let a public CDN get access


00:17:23.180 --> 00:17:25.600
to your dev machine, which like, how does that happen?


00:17:25.600 --> 00:17:26.880
In Grok is how that happens.


00:17:26.880 --> 00:17:28.600
Same thing with our mobile apps, like,


00:17:28.600 --> 00:17:30.200
and you can see, like right here,


00:17:31.340 --> 00:17:33.860
we had this problem where some of the data


00:17:33.860 --> 00:17:36.300
wasn't being passed through as headers correctly


00:17:36.300 --> 00:17:38.820
to the server, and we're like,


00:17:38.820 --> 00:17:40.540
we cannot figure out why this is not working.


00:17:40.540 --> 00:17:42.380
It's clearly in the headers collection.


00:17:42.380 --> 00:17:44.260
Why is Python not seeing those?


00:17:44.260 --> 00:17:46.660
And it turns out there was like a weird


00:17:46.660 --> 00:17:48.620
case sensitivity issue or whatever.


00:17:48.620 --> 00:17:51.740
But I just fired up ngrok, pressed debug on PyCharm,


00:17:51.740 --> 00:17:53.420
and said, all right, try it again.


00:17:53.420 --> 00:17:55.220
And then boom, I'm like stepping through,


00:17:55.220 --> 00:17:58.340
like on a mobile device, I'm stepping through


00:17:58.340 --> 00:17:59.700
its interaction with the APIs.


00:17:59.700 --> 00:18:01.140
I'm like, oh, I see, here's what's happening


00:18:01.140 --> 00:18:02.740
and then we fix it, super easy.


00:18:02.740 --> 00:18:08.060
All of that is to set up Flask-ngrok.


00:18:08.060 --> 00:18:10.260
So all of those benefits are awesome,


00:18:10.260 --> 00:18:12.980
but like what I gotta do is I have to go fire up ngrok,


00:18:12.980 --> 00:18:15.940
go over, do the thing, and then come back, right?


00:18:15.940 --> 00:18:18.900
So it'd be cool maybe if I could just press go,


00:18:18.900 --> 00:18:21.460
either run, you know, Flask run,


00:18:21.460 --> 00:18:24.420
or just go in PyCharm or VS Code,


00:18:24.420 --> 00:18:27.460
and it would just, in addition to starting up Flask,


00:18:27.460 --> 00:18:29.500
it would also start up ngrok,


00:18:29.500 --> 00:18:31.900
pointing back to whatever the right port is, right?


00:18:31.900 --> 00:18:33.820
So basically that's what this is.


00:18:33.820 --> 00:18:37.700
You just wrap the app in run with ngrok,


00:18:37.700 --> 00:18:39.740
so you get a run with ngrok app.


00:18:39.740 --> 00:18:42.140
And then when you say flask run,


00:18:42.140 --> 00:18:44.980
it fires up the local version,


00:18:44.980 --> 00:18:47.740
but it also fires up an ngrok URL


00:18:47.740 --> 00:18:49.500
that you can share with people.


00:18:49.500 --> 00:18:50.700
- Oh, cool.


00:18:50.700 --> 00:18:54.660
- Yeah, so not a huge, huge feature,


00:18:54.660 --> 00:18:56.420
'cause sure you can run ngrok on your own,


00:18:56.420 --> 00:18:58.380
but I think it's kind of cool.


00:18:58.380 --> 00:19:03.380
Basically, that means whenever you run your Flask code,


00:19:03.380 --> 00:19:06.880
your Flask app for debugging or for dev or whatever,


00:19:06.880 --> 00:19:09.540
there's always a publicly accessible address


00:19:09.540 --> 00:19:10.880
that you can share with other people


00:19:10.880 --> 00:19:13.580
or you can type into some other tool.


00:19:13.580 --> 00:19:15.500
I want to validate an RSS feed.


00:19:15.500 --> 00:19:19.260
I want to have my API,


00:19:19.260 --> 00:19:23.080
some API client that is not on my machine,


00:19:23.080 --> 00:19:25.460
like a mobile app or some other,


00:19:25.460 --> 00:19:27.160
think if this, then that,


00:19:27.160 --> 00:19:28.440
or one of those types of things,


00:19:28.440 --> 00:19:30.360
all those can just come back right in


00:19:30.360 --> 00:19:32.440
'cause you always have this public address available,


00:19:32.440 --> 00:19:34.160
which I think is pretty cool.


00:19:34.160 --> 00:19:35.280
- That's pretty cool.


00:19:35.280 --> 00:19:38.180
- Yeah, so if that sounds useful, people can check it out.


00:19:38.180 --> 00:19:41.760
- Oh man, okay, so I was just thinking,


00:19:41.760 --> 00:19:44.680
I wonder if random address, 'cause like I need another URL


00:19:44.680 --> 00:19:45.880
that I'm not doing anything with,


00:19:45.880 --> 00:19:48.880
but I was wondering if random address was taken


00:19:48.880 --> 00:19:51.960
and random address is taken, so.


00:19:51.960 --> 00:19:53.120
- Is it random addresses?


00:19:53.120 --> 00:19:55.640
(laughing)


00:19:55.640 --> 00:19:57.100
- No, we have enough.


00:19:57.100 --> 00:20:00.780
I've got several that I'm not using.


00:20:00.780 --> 00:20:01.820
- Yeah, that's awesome.


00:20:01.820 --> 00:20:03.060
All right, cool.


00:20:03.060 --> 00:20:03.900
- Okay.


00:20:03.900 --> 00:20:04.720
- Anyway, people can check this out


00:20:04.720 --> 00:20:06.580
if they are doing a lot with ngrok.


00:20:06.580 --> 00:20:09.660
By the way, one thing that I think would be interesting,


00:20:09.660 --> 00:20:12.500
I didn't see in the docs whether or not this is easy,


00:20:12.500 --> 00:20:14.560
possible, impossible, whatever.


00:20:14.560 --> 00:20:18.680
One of the things you can do is you can set it up


00:20:18.680 --> 00:20:23.000
so that this random address is repeatable.


00:20:23.000 --> 00:20:24.260
Otherwise, if you just rerun it,


00:20:24.260 --> 00:20:25.340
you'll get a new random address,


00:20:25.340 --> 00:20:28.380
which you got to keep typing in by doing like subdomain type


00:20:28.380 --> 00:20:29.580
things and stuff.


00:20:29.580 --> 00:20:32.040
If you've got a paid account, I don't know if it's possible


00:20:32.040 --> 00:20:34.100
to have it do that or not.


00:20:34.100 --> 00:20:36.980
But it would be cool if you could make it random,


00:20:36.980 --> 00:20:39.740
but not completely random.


00:20:39.740 --> 00:20:40.300
Anyway.


00:20:40.300 --> 00:20:41.140
Not completely.


00:20:41.140 --> 00:20:42.260
Just random once.


00:20:42.260 --> 00:20:42.780
And then--


00:20:42.780 --> 00:20:43.500
Yeah, random once.


00:20:43.500 --> 00:20:44.660
And let's stick with that for a while.


00:20:44.660 --> 00:20:45.660
All right.


00:20:45.660 --> 00:20:46.980
What do you got for our last one?


00:20:46.980 --> 00:20:49.260
I want to talk about async.


00:20:49.260 --> 00:20:52.780
So Will McGugan wrote an article


00:20:52.780 --> 00:20:55.540
called no async with Python.


00:20:55.540 --> 00:20:57.620
No async, async.


00:20:57.620 --> 00:21:00.180
And it's, that confused me,


00:21:00.180 --> 00:21:02.900
but it's a really well-written article.


00:21:02.900 --> 00:21:06.940
There's times where if you want to take advantage of async,


00:21:06.940 --> 00:21:10.460
you kind of have to have async


00:21:10.460 --> 00:21:12.380
all the way up and down the call stack, right?


00:21:12.380 --> 00:21:16.260
Or you, maybe, that's what it seems like at least,


00:21:16.260 --> 00:21:18.420
to make things sure this all works.


00:21:18.420 --> 00:21:22.060
But, and so that's actually what I guess Textual did


00:21:22.060 --> 00:21:24.500
at one point has made a synced all the things,


00:21:24.500 --> 00:21:28.660
but textual now is async optional.


00:21:28.660 --> 00:21:32.220
And so this article discusses how they do that.


00:21:32.220 --> 00:21:36.860
And the first part is if you're passing in a callback to,


00:21:36.860 --> 00:21:38.940
if you're providing a mechanism for somebody


00:21:38.940 --> 00:21:41.900
to pass a callback in and that callback can,


00:21:41.900 --> 00:21:44.420
you want it to be either just a normal function


00:21:44.420 --> 00:21:45.900
or an async function,


00:21:45.900 --> 00:21:50.340
he's utilizing the await me maybe pattern


00:21:50.340 --> 00:21:53.180
that he borrowed from Simon Willison.


00:21:53.180 --> 00:21:56.780
So Simon Willison wrote about this a couple of years ago


00:21:56.780 --> 00:22:00.080
and he shows, scroll almost to the bottom.


00:22:00.080 --> 00:22:02.620
There's this, basically there's a way to,


00:22:02.620 --> 00:22:05.900
you have an async function and it calls.


00:22:05.900 --> 00:22:08.940
So the caller is async and you're calling something


00:22:08.940 --> 00:22:10.900
that could be either async or not.


00:22:10.900 --> 00:22:13.600
And you just call something and check to see


00:22:13.600 --> 00:22:16.660
if it's a co-routine and then await it or don't await it.


00:22:16.660 --> 00:22:20.440
And that's pretty much what Will is showing,


00:22:20.440 --> 00:22:23.520
is inspect the callback,


00:22:23.520 --> 00:22:26.560
inspect the result to see if it's awaitable or not.


00:22:26.560 --> 00:22:28.080
Doing it a little bit different method,


00:22:28.080 --> 00:22:30.140
but similar sort of effect.


00:22:30.140 --> 00:22:31.240
So that's neat.


00:22:31.240 --> 00:22:35.080
So you can provide a mechanism to add a callback


00:22:35.080 --> 00:22:37.680
that could be async or not, optional.


00:22:37.680 --> 00:22:40.480
But the other part around is,


00:22:40.480 --> 00:22:45.320
if you're providing an async service


00:22:45.320 --> 00:22:49.080
that could be called in either an async or non-async.


00:22:49.080 --> 00:22:51.040
You want it to be called by anybody


00:22:51.040 --> 00:22:53.960
because sometimes like he gives an example


00:22:53.960 --> 00:22:58.960
of mounting a new widget into textual.


00:22:58.960 --> 00:23:01.240
The caller might want to care,


00:23:01.240 --> 00:23:03.400
might care about when that's actually done.


00:23:03.400 --> 00:23:05.840
So they might wanna wait for that, but they might not.


00:23:05.840 --> 00:23:07.320
They might just like keep going


00:23:07.320 --> 00:23:10.460
because apparently textual handles it all correctly anyway.


00:23:10.460 --> 00:23:13.140
They won't let something happen,


00:23:13.140 --> 00:23:15.560
but the caller might not care about when it's done.


00:23:15.560 --> 00:23:20.340
So to be able to allow both async and non-async callers


00:23:20.340 --> 00:23:22.560
to call an async method,


00:23:22.560 --> 00:23:26.200
that's a little bit yuckier code, but he provides it.


00:23:26.200 --> 00:23:31.200
So there's this class, this await mount option.


00:23:31.200 --> 00:23:34.640
So there's, I'm not gonna walk through all this code,


00:23:34.640 --> 00:23:36.560
but basically there's a way to do it


00:23:36.560 --> 00:23:40.160
and Will has the method to allow you to have.


00:23:40.160 --> 00:23:41.240
And I think that's kind of neat


00:23:41.240 --> 00:23:46.240
to be able to provide services and APIs that can be called


00:23:46.240 --> 00:23:50.320
both in async and non-async ways.


00:23:50.320 --> 00:23:53.300
Now, hopefully, this still is kind of ugly.


00:23:53.300 --> 00:23:55.160
So hopefully as a community,


00:23:55.160 --> 00:23:57.320
we can come up with a little bit cleaner solution,


00:23:57.320 --> 00:23:58.940
but at least there's a solution.


00:23:58.940 --> 00:24:00.340
So it's kind of nice.


00:24:00.340 --> 00:24:03.880
- Yeah, Will did a nice job of this.


00:24:03.880 --> 00:24:06.980
And I think it's really a huge benefit


00:24:06.980 --> 00:24:11.680
that Textual has the ability to be async


00:24:11.680 --> 00:24:13.340
but doesn't force you to be async.


00:24:13.340 --> 00:24:16.320
Because if you're already writing async code,


00:24:16.320 --> 00:24:17.940
you would like it to be because it's a benefit.


00:24:17.940 --> 00:24:21.620
You can do more, parallel, be more responsive.


00:24:21.620 --> 00:24:24.620
But if it means I have to take my non-async code


00:24:24.620 --> 00:24:27.100
and now convert the whole thing to know about


00:24:27.100 --> 00:24:31.020
some of the parts of it being async, well, that's a hassle.


00:24:31.020 --> 00:24:33.260
And I think one of the things that drives me nuts


00:24:33.260 --> 00:24:35.080
about Python's async,


00:24:35.080 --> 00:24:39.200
There's a few little things that just make me crazy about it.


00:24:39.200 --> 00:24:42.760
It's like, well, it's so close to awesome, right?


00:24:42.760 --> 00:24:43.880
And much of it is awesome.


00:24:43.880 --> 00:24:48.000
But for example, if I'm in a function,


00:24:48.000 --> 00:24:51.600
and I want to say, here's some async code.


00:24:51.600 --> 00:24:52.760
I want to just run it here.


00:24:52.760 --> 00:24:56.560
So for example, async io get event loop,


00:24:56.560 --> 00:25:00.200
loop.run sort of thing, or just async io.run to complete.


00:25:00.200 --> 00:25:03.620
If it's already being called within an async function


00:25:03.620 --> 00:25:07.100
with some other event loop and you don't know about it,


00:25:07.100 --> 00:25:08.900
under certain times it'll crash and say,


00:25:08.900 --> 00:25:10.860
there's already an event loop or there is no event loop.


00:25:10.860 --> 00:25:15.860
You're like, well, give me, just, if I don't have one,


00:25:15.860 --> 00:25:16.860
give me one.


00:25:16.860 --> 00:25:18.100
If there is one, just give me that.


00:25:18.100 --> 00:25:18.920
I don't care.


00:25:18.920 --> 00:25:19.900
I just need to run something async.


00:25:19.900 --> 00:25:21.580
And there's always this like weird,


00:25:21.580 --> 00:25:23.220
I'm not really sure what state I am.


00:25:23.220 --> 00:25:25.900
And if I get it wrong, then it gives me a, it crashes.


00:25:25.900 --> 00:25:27.140
And that's just like, ah.


00:25:27.140 --> 00:25:31.540
So I think that makes it challenging to kind of go.


00:25:31.540 --> 00:25:34.960
This part we're just gonna isolate off the async,


00:25:34.960 --> 00:25:38.800
which it sounds like Will did here, which is cool.


00:25:38.800 --> 00:25:40.500
So that's really excellent.


00:25:40.500 --> 00:25:41.340
- Yeah.


00:25:41.340 --> 00:25:43.600
- Really quickly here too,


00:25:43.600 --> 00:25:47.160
I've had a couple of shots at this myself as well.


00:25:47.160 --> 00:25:49.200
Nothing I've published really very much


00:25:49.200 --> 00:25:52.900
in terms of what Will's doing or what Simon talked about.


00:25:52.900 --> 00:25:56.920
But for example, on FastAPI Chameleon


00:25:56.920 --> 00:25:58.320
and the Jinja equivalent,


00:25:58.320 --> 00:26:02.980
let's you just put a decorator on top of a FastAPI function


00:26:02.980 --> 00:26:07.820
and then it returns the HTML view of that and stuff.


00:26:07.820 --> 00:26:09.400
But those FastAPI functions,


00:26:09.400 --> 00:26:12.640
they can be synchronous or they can be asynchronous.


00:26:12.640 --> 00:26:14.920
And so what it has to do is it has to say,


00:26:14.920 --> 00:26:18.360
is this function a coroutine?


00:26:18.360 --> 00:26:21.280
Okay, the decorator has to return also an async one.


00:26:21.280 --> 00:26:22.960
Otherwise, when you say async


00:26:22.960 --> 00:26:25.240
and it becomes non-async, that's wrong.


00:26:25.240 --> 00:26:27.240
But if it's async one, you can't return the async, right?


00:26:27.240 --> 00:26:29.360
Like, so you gotta juggle this a lot,


00:26:29.360 --> 00:26:30.840
which is kind of a pain.


00:26:30.840 --> 00:26:32.840
And then the other one, I created this thing,


00:26:32.840 --> 00:26:34.560
which I put up just as a gist that like,


00:26:34.560 --> 00:26:37.480
just lets you say this async function,


00:26:37.480 --> 00:26:39.200
we're gonna run it in a way that won't have


00:26:39.200 --> 00:26:42.360
a conflicting event loop complaint


00:26:42.360 --> 00:26:44.640
by constantly managing the background thread


00:26:44.640 --> 00:26:45.880
and just pushing the work over there


00:26:45.880 --> 00:26:47.880
and pulling the results back.


00:26:47.880 --> 00:26:51.520
So yeah, it's interesting, but yeah,


00:26:51.520 --> 00:26:54.080
that's a cool article.


00:26:54.080 --> 00:26:54.920
- Yeah.


00:26:54.920 --> 00:26:55.740
- Yeah.


00:26:55.740 --> 00:26:58.440
- And then, do you remember the call me maybe song?


00:26:58.440 --> 00:27:00.360
- Call me maybe.


00:27:00.360 --> 00:27:01.200
Yeah, I do.


00:27:01.200 --> 00:27:02.020
- Yeah.


00:27:02.020 --> 00:27:02.860
- Await me maybe.


00:27:02.860 --> 00:27:04.200
- So Chris May added,


00:27:04.200 --> 00:27:06.780
hey, I just defined you and this may be a sink,


00:27:06.780 --> 00:27:10.080
but here's my variable, await me maybe.


00:27:10.080 --> 00:27:11.040
So nice.


00:27:11.040 --> 00:27:12.220
- Well done, Chris.


00:27:12.220 --> 00:27:14.480
(laughing)


00:27:14.480 --> 00:27:17.520
I love it, I love it.


00:27:17.520 --> 00:27:18.880
Well, I don't have any extras, Brian.


00:27:18.880 --> 00:27:19.720
You got any?


00:27:19.720 --> 00:27:20.760
- I do.


00:27:20.760 --> 00:27:22.000
We'll try to make them quick though.


00:27:22.000 --> 00:27:23.920
So PyPI has a blog now.


00:27:23.920 --> 00:27:26.320
Oh, let's pop over to here.


00:27:26.320 --> 00:27:27.520
PyPI has a blog now.


00:27:27.520 --> 00:27:30.120
So anyway, go check it out.


00:27:30.120 --> 00:27:32.520
There's a welcome article.


00:27:32.520 --> 00:27:34.960
So that's nice.


00:27:34.960 --> 00:27:36.960
Neat.


00:27:36.960 --> 00:27:40.520
And then, okay, so another extra, apparently a Docker.


00:27:40.520 --> 00:27:45.260
No, they're laying off plans of charging people


00:27:45.260 --> 00:27:46.480
for the free team plan,


00:27:46.480 --> 00:27:49.640
which is kind of a bummer for people like me


00:27:49.640 --> 00:27:51.520
that paid for it anyway.


00:27:51.520 --> 00:27:54.820
But, you know, anyway.


00:27:54.820 --> 00:27:56.720
So that's cool.


00:27:56.720 --> 00:27:58.240
Maybe I won't have to pay next year.


00:27:58.240 --> 00:28:00.240
I guess they're offering refunds or something,


00:28:00.240 --> 00:28:02.840
but I'll look into that.


00:28:02.840 --> 00:28:04.360
- I guess there must've been a big backlash.


00:28:04.360 --> 00:28:06.160
I haven't been tracking this, but.


00:28:06.160 --> 00:28:07.000
- Oh yeah.


00:28:07.000 --> 00:28:10.240
I mean, like it's been a scramble all over the place


00:28:10.240 --> 00:28:14.560
of people because there's sometimes


00:28:14.560 --> 00:28:16.480
it's a very minimal interaction with it.


00:28:16.480 --> 00:28:18.320
And then suddenly we have to pay for it


00:28:18.320 --> 00:28:20.080
and you got to figure out how many users


00:28:20.080 --> 00:28:21.720
how many seats and all that sort of stuff.


00:28:21.720 --> 00:28:26.600
And yeah, or if you want to use it without,


00:28:26.600 --> 00:28:29.200
so if you want to use it without the user interface,


00:28:29.200 --> 00:28:30.120
you can use it for free.


00:28:30.120 --> 00:28:34.520
But if you like people asking, are you using it?


00:28:34.520 --> 00:28:35.360
Yes, we are.


00:28:35.360 --> 00:28:37.120
Cause we debug with it and everything.


00:28:37.120 --> 00:28:41.440
So, so I'm glad they're backing off.


00:28:41.440 --> 00:28:44.560
I still want to, I mean, of course it's a great service.


00:28:44.560 --> 00:28:46.800
They should be able to make money somehow,


00:28:46.800 --> 00:28:49.440
but there should be a free anyway.


00:28:49.440 --> 00:28:51.080
- I'm glad, so it's good news.


00:28:51.080 --> 00:28:56.720
I only, the only thing left I have is a joke.


00:28:56.720 --> 00:28:58.760
Do you want to do mine first or yours first?


00:28:58.760 --> 00:29:00.400
- Yeah, let's hear yours first.


00:29:00.400 --> 00:29:04.080
- Okay, it's just sort of, I was looking up,


00:29:04.080 --> 00:29:06.720
I was looking up some documentation for pytestCov


00:29:06.720 --> 00:29:10.640
and noticed at the bottom, so there's a,


00:29:10.640 --> 00:29:14.240
there's mark, it provides a no cover marker,


00:29:14.240 --> 00:29:17.760
which is nice, so you can say, don't cover this test.


00:29:17.760 --> 00:29:19.720
And then there's a fixture.


00:29:19.720 --> 00:29:21.300
You can also use that as a fixture,


00:29:21.300 --> 00:29:23.480
but then there's also the no cover fixture,


00:29:23.480 --> 00:29:27.800
but there's a cuv fixture, which why would you use that?


00:29:27.800 --> 00:29:30.860
Well, it says for reasons that no one can remember,


00:29:30.860 --> 00:29:33.440
there is a cuv fixture that provides access


00:29:33.440 --> 00:29:35.780
to the underlying coverage in an instance.


00:29:35.780 --> 00:29:39.000
Some say this is disguised as a foot gun


00:29:39.000 --> 00:29:40.180
and should be removed.


00:29:40.180 --> 00:29:42.880
And some things, some think mysteries


00:29:42.880 --> 00:29:45.640
make life more interesting and it should be left alone.


00:29:47.000 --> 00:29:50.160
I love finding stuff like that in documentation.


00:29:50.160 --> 00:29:52.160
- Some think mysteries make life more interesting.


00:29:52.160 --> 00:29:54.320
Indeed, indeed they do.


00:29:54.320 --> 00:29:55.160
- Okay.


00:29:55.160 --> 00:29:56.760
- All right.


00:29:56.760 --> 00:29:58.440
I got a quick one for you as well.


00:29:58.440 --> 00:30:01.300
This one, you knew an XKCD was coming.


00:30:01.300 --> 00:30:03.240
Good reference earlier.


00:30:03.240 --> 00:30:06.180
So this has to do with like some deep thinking


00:30:06.180 --> 00:30:09.920
into how to make your code last so long


00:30:09.920 --> 00:30:11.720
that it becomes a legacy code


00:30:11.720 --> 00:30:13.300
and people can use it for a long time


00:30:13.300 --> 00:30:16.160
and maybe even curse its name a little bit.


00:30:16.160 --> 00:30:19.760
So there's two parallel universes here.


00:30:19.760 --> 00:30:23.120
On one, this woman just wrote this code.


00:30:23.120 --> 00:30:25.960
She says, "It took some extra work to build,


00:30:25.960 --> 00:30:29.080
but now we're able to use it for all of our future projects."


00:30:29.080 --> 00:30:30.120
And the caption for that is,


00:30:30.120 --> 00:30:32.320
"How to ensure your code is never reused."


00:30:32.320 --> 00:30:35.160
- Yes.


00:30:35.160 --> 00:30:37.560
- And then the other alternate world is,


00:30:37.560 --> 00:30:38.720
"Let's not overthink it.


00:30:38.720 --> 00:30:41.880
If this code is still in use that far in the future,


00:30:41.880 --> 00:30:42.760
we'll have bigger problems.


00:30:42.760 --> 00:30:44.920
How to ensure that your code lives forever."


00:30:44.920 --> 00:30:45.760
- Yeah.


00:30:45.760 --> 00:30:47.560
- And the hover is surely no one,


00:30:47.560 --> 00:30:49.920
everyone will recognize how flexible and useful


00:30:49.920 --> 00:30:52.400
this architecture is, spend a huge amount of effort


00:30:52.400 --> 00:30:54.520
painstakingly preserving and updating this garbage


00:30:54.520 --> 00:30:55.720
I wrote in 20 minutes.


00:30:55.720 --> 00:30:57.800
(laughs)


00:30:57.800 --> 00:30:59.880
- Yeah.


00:30:59.880 --> 00:31:02.640
Well, I mean, there's so many examples of that,


00:31:02.640 --> 00:31:03.480
isn't there?


00:31:03.480 --> 00:31:04.320
I mean,


00:31:04.320 --> 00:31:05.160
- Oh yeah.


00:31:05.160 --> 00:31:06.000
- Oh yeah.


00:31:06.000 --> 00:31:06.840
- There's always-


00:31:06.840 --> 00:31:08.000
- Internally, there's tons.


00:31:08.000 --> 00:31:09.960
There's like, oh, just this,


00:31:09.960 --> 00:31:12.200
throw this thing together, build script or whatever.


00:31:12.200 --> 00:31:14.200
And I think that's what we're doing.


00:31:14.200 --> 00:31:17.660
or whatever, and it's just, we'll rewrite it later.


00:31:17.660 --> 00:31:21.440
10 years later, we haven't rewritten it, things like that.


00:31:21.440 --> 00:31:25.640
I mean, Flask was like a really quick hack, wasn't it?


00:31:25.640 --> 00:31:27.400
Like a joke at first or something.


00:31:27.400 --> 00:31:29.200
- I think it was an April's fools thing, yeah.


00:31:29.200 --> 00:31:30.040
I think so.


00:31:30.040 --> 00:31:36.840
- Anyway, and the other side is the lesson


00:31:36.840 --> 00:31:41.340
that I think people should learn is planning on reuse


00:31:41.340 --> 00:31:43.800
is just a mistake, I think.


00:31:43.800 --> 00:31:47.360
And I've been in many, many design meetings


00:31:47.360 --> 00:31:51.400
where it's like, let's not plan six years out


00:31:51.400 --> 00:31:52.840
into the future on this.


00:31:52.840 --> 00:31:53.660
That's ridiculous.


00:31:53.660 --> 00:31:54.600
We don't even know,


00:31:54.600 --> 00:31:57.440
because I've also seen people plan for it


00:31:57.440 --> 00:31:59.600
and it is reused and it is maintained,


00:31:59.600 --> 00:32:01.280
but the things that you thought


00:32:01.280 --> 00:32:03.320
you were gonna need to be variable


00:32:03.320 --> 00:32:06.000
are not the things that really need to change in the future.


00:32:06.000 --> 00:32:07.640
It's something else.


00:32:07.640 --> 00:32:09.880
- Yeah, somewhere in the middle there lives a,


00:32:09.880 --> 00:32:11.540
let's not overthink this, get it out there.


00:32:11.540 --> 00:32:13.760
Oh, let's take a moment and refactor it.


00:32:13.760 --> 00:32:17.120
So it's more reasonable in the way we now know it needs to be.


00:32:17.120 --> 00:32:17.920
Carry on.


00:32:17.920 --> 00:32:21.320
>> So my advice, keep the interface simple,


00:32:21.320 --> 00:32:23.840
keep it minimal, document it, and test it.


00:32:23.840 --> 00:32:25.520
And then if it grows, great.


00:32:25.520 --> 00:32:28.000
>> Yeah, excellent.


00:32:28.000 --> 00:32:29.640
>> Thanks for that. That's funny.


00:32:29.640 --> 00:32:30.520
>> Yeah, for sure.


00:32:30.520 --> 00:32:32.040
>> And thanks everybody for showing up,


00:32:32.040 --> 00:32:34.360
and thanks Michael again for showing up.


00:32:34.360 --> 00:32:36.000
>> Yeah, great to be here.


00:32:36.000 --> 00:32:38.800
>> All right. Talk to everybody later.

