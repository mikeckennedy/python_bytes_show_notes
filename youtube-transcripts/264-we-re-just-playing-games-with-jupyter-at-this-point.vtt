WEBVTT

00:00:00.000 --> 00:00:05.000
Hey, guys. Ready to do a podcast?


00:00:05.000 --> 00:00:06.000
>> Yeah.


00:00:06.000 --> 00:00:11.840
>> Yep. Awesome. Everyone out in the live chat, thanks for being here. It's awesome


00:00:11.840 --> 00:00:16.960
to have you on the channel. And we'll go ahead and kick this off.


00:00:16.960 --> 00:00:20.880
Hello and welcome to Python Bytes where we deliver Python news and headlines directly


00:00:20.880 --> 00:00:28.840
to your earbuds. This is episode 264, recorded December 22nd, 2021. I'm Michael Kennedy.


00:00:28.840 --> 00:00:35.460
>> And I am Kim. >> Welcome. You've been on talk Python before


00:00:35.460 --> 00:00:40.340
but not here on Python. >> I've done a couple of talk Pythons with


00:00:40.340 --> 00:00:44.740
you including the one where you bravely submitted yourself to questions from your audience.


00:00:44.740 --> 00:00:49.220
The other one talking some small tools. That was very good fun. I'm very much looking forward


00:00:49.220 --> 00:00:52.700
to this one as well. >> You know, both episodes you were on were


00:00:52.700 --> 00:00:57.020
super popular. One was about little automation tools and just cool stuff that people can


00:00:57.020 --> 00:00:58.380
pick up unusual easily there.


00:00:58.380 --> 00:00:59.220
And that was great.


00:00:59.220 --> 00:01:00.940
And the ask me anything was surprisingly


00:01:00.940 --> 00:01:02.460
one of the more popular episodes as well.


00:01:02.460 --> 00:01:04.180
So thank you for being part of that.


00:01:04.180 --> 00:01:07.100
And you've been part of the audience for sure.


00:01:07.100 --> 00:01:09.780
You've offered comments and feedback


00:01:09.780 --> 00:01:11.700
as we do the live show.


00:01:11.700 --> 00:01:13.660
- Hope you see so, yeah, to be honest.


00:01:13.660 --> 00:01:17.180
- Yeah, but now here you are on stage.


00:01:17.180 --> 00:01:18.020
Thank you for being here.


00:01:18.020 --> 00:01:20.980
Tell people a bit about yourself before we get started.


00:01:20.980 --> 00:01:25.380
- Sure, I am a DevOps engineer at the moment


00:01:25.380 --> 00:01:27.680
and also move engineering based in South Africa,


00:01:27.680 --> 00:01:29.940
working with a home loan provider


00:01:29.940 --> 00:01:33.140
or a mortgage provider in the American sense.


00:01:33.140 --> 00:01:36.620
I've been probably doing Python for close on 20 years.


00:01:36.620 --> 00:01:38.580
So the fact that I've shaved


00:01:38.580 --> 00:01:39.660
means you can't see the gray beard,


00:01:39.660 --> 00:01:41.640
but I have been around a while.


00:01:41.640 --> 00:01:43.820
- I think gray beard.


00:01:43.820 --> 00:01:45.040
We're gonna come back for some good jokes


00:01:45.040 --> 00:01:46.980
at the end about this as well.


00:01:46.980 --> 00:01:49.020
Not your beard, but just beards.


00:01:49.020 --> 00:01:49.860
- Cool, fair enough.


00:01:49.860 --> 00:01:51.180
- Great, great, yeah.


00:01:51.180 --> 00:01:53.900
Awesome, that sounds like really fun stuff.


00:01:53.900 --> 00:01:56.320
So yeah, thanks for being here.


00:01:56.320 --> 00:01:59.760
Now, before we actually get into the main content


00:01:59.760 --> 00:02:01.040
of the show, Brian, I wanna do something


00:02:01.040 --> 00:02:02.280
just a little bit meta.


00:02:02.280 --> 00:02:08.140
So I went and pulled up or created a question air for people.


00:02:08.140 --> 00:02:11.000
When we first created Python Bytes,


00:02:11.000 --> 00:02:12.720
we're like, all right, it's 20 minutes.


00:02:12.720 --> 00:02:14.800
The time of this episode is gonna be 20 minutes.


00:02:14.800 --> 00:02:16.120
So we're just gonna like knock it out,


00:02:16.120 --> 00:02:17.400
you and me real quick.


00:02:17.400 --> 00:02:18.680
And I think it's grown a little bit.


00:02:18.680 --> 00:02:21.240
We've done, we cover a little bit more detail.


00:02:21.240 --> 00:02:22.820
We've added a joke.


00:02:22.820 --> 00:02:25.240
We've added a few like little extra things.


00:02:25.240 --> 00:02:27.200
We brought on guests like Kim.


00:02:27.200 --> 00:02:32.200
And is that still in line with what people want


00:02:32.200 --> 00:02:33.520
when they signed up?


00:02:33.520 --> 00:02:35.740
So I put together a questionnaire here


00:02:35.740 --> 00:02:38.120
that just asks three simple questions.


00:02:38.120 --> 00:02:39.280
And I'd really appreciate if listeners


00:02:39.280 --> 00:02:42.580
could go to the show notes and just click


00:02:42.580 --> 00:02:46.000
on the link that says this three question Google form


00:02:46.000 --> 00:02:48.120
or find it on our Twitter account or wherever,


00:02:48.120 --> 00:02:49.800
but should be in your podcast player show notes


00:02:49.800 --> 00:02:50.920
right near the top.


00:02:50.920 --> 00:02:52.800
And they can just click that and fill it out


00:02:52.800 --> 00:02:56.200
give us some quick feedback on the idea of having a guest


00:02:56.200 --> 00:02:58.960
on the show and so on.


00:02:58.960 --> 00:03:00.280
So anything you wanna add about that, Brian,


00:03:00.280 --> 00:03:03.120
just encourage people to give us feedback.


00:03:03.120 --> 00:03:04.500
- Yeah, I'd love to hear feedback


00:03:04.500 --> 00:03:06.440
because sometimes we feel a little guilty


00:03:06.440 --> 00:03:07.760
that we're running long,


00:03:07.760 --> 00:03:11.120
but I enjoy the a little bit more in-depth conversation.


00:03:11.120 --> 00:03:15.200
We still don't go super deep, but I think it's a good...


00:03:15.200 --> 00:03:19.640
Well, I'm flavoring the survey though,


00:03:19.640 --> 00:03:21.160
so forget what I said.


00:03:21.160 --> 00:03:23.840
- No, I'd love to hear feedback on what people think.


00:03:23.840 --> 00:03:25.360
- Yeah, absolutely.


00:03:25.360 --> 00:03:26.860
Yeah, so people can give us feedback there.


00:03:26.860 --> 00:03:28.160
We'd really appreciate it.


00:03:28.160 --> 00:03:31.560
The way people seem to be feeling so far


00:03:31.560 --> 00:03:33.140
is they kind of like the link.


00:03:33.140 --> 00:03:35.960
They definitely like the guest format.


00:03:35.960 --> 00:03:37.160
So you're welcome here, Kim.


00:03:37.160 --> 00:03:38.760
This, according to listeners, fantastic.


00:03:38.760 --> 00:03:39.600
- Thank you.


00:03:39.600 --> 00:03:42.260
- But yeah, I think people are generally liking,


00:03:42.260 --> 00:03:44.900
but still, let's just hear from everyone


00:03:44.900 --> 00:03:47.600
'cause if a bunch of the people in the audience are like,


00:03:47.600 --> 00:03:50.500
no, we really want no more than 20 minutes,


00:03:50.500 --> 00:03:53.620
and my going on about this is actually making it still longer


00:03:53.620 --> 00:03:55.980
then it'd be great to know, right?


00:03:55.980 --> 00:03:57.700
So we'll go from there.


00:03:57.700 --> 00:04:00.360
And with that, let's play a game.


00:04:00.360 --> 00:04:02.700
- Jump in the first topic, yeah.


00:04:02.700 --> 00:04:04.180
I wanna talk about Jupyter games


00:04:04.180 --> 00:04:09.180
and the idea around this is a iPython canvas


00:04:09.180 --> 00:04:12.060
or iPy canvas with Box2D.


00:04:12.060 --> 00:04:13.580
I'll get a little bit more into it.


00:04:13.580 --> 00:04:18.580
But the gist is making video games


00:04:18.720 --> 00:04:20.560
in small video games is one of the ways


00:04:20.560 --> 00:04:24.200
that a lot of us started programming.


00:04:24.200 --> 00:04:26.720
I know that was the case for me.


00:04:26.720 --> 00:04:28.720
And they were not difficult games,


00:04:28.720 --> 00:04:33.520
but it was difficult enough, these 2D engines.


00:04:33.520 --> 00:04:36.820
And some of that's lacking, and I haven't seen that


00:04:36.820 --> 00:04:37.760
in Jupyter before.


00:04:37.760 --> 00:04:41.760
And Jupyter is an excellent platform for a lot of things,


00:04:41.760 --> 00:04:44.360
especially teaching with people that


00:04:44.360 --> 00:04:47.360
don't have computers if they use an iPad or something like that.


00:04:47.360 --> 00:04:50.320
often they can still get access to Jupyter


00:04:50.320 --> 00:04:52.520
through hosted systems.


00:04:52.520 --> 00:04:54.680
So this is a Jupyter,


00:04:54.680 --> 00:04:59.680
this article talks about writing 2D games


00:04:59.680 --> 00:05:03.400
and mostly it's a 2D physics engine


00:05:03.400 --> 00:05:06.560
around a library called Box2D,


00:05:06.560 --> 00:05:09.660
which is a C++ type engine,


00:05:09.660 --> 00:05:12.680
but it's something that you can access through Python.


00:05:12.680 --> 00:05:14.600
And the author, yeah, the author--


00:05:14.600 --> 00:05:15.720
- There's tons of physics stuff.


00:05:15.720 --> 00:05:16.960
You know, when people think of games,


00:05:16.960 --> 00:05:20.920
they think of, oh, here's what I got to do to get the picture on the screen.


00:05:20.920 --> 00:05:22.880
Oh, that's just to start.


00:05:22.880 --> 00:05:25.000
Like you need physics, you need collisions.


00:05:25.000 --> 00:05:27.320
There's like so much stuff that also gets done.


00:05:27.320 --> 00:05:28.320
So this is really cool.


00:05:28.320 --> 00:05:29.180
I love it.


00:05:29.180 --> 00:05:33.820
Things like physics and gravity and collision detection and, and, like


00:05:33.820 --> 00:05:38.280
the examples on this page are great, but the person that wrote it is,


00:05:38.280 --> 00:05:43.800
uh, Torsten Bier and he's one of the, I think he's, he's got a library called


00:05:43.800 --> 00:05:48.800
Pi B2D, which is one of two different Python accesses


00:05:48.800 --> 00:05:55.800
to this Box2D system, but it's pretty cool.


00:05:55.800 --> 00:06:00.920
One of the things I like about this article is it talk,


00:06:00.920 --> 00:06:02.920
it has like lots of pretty examples,


00:06:02.920 --> 00:06:07.260
but physics engines are, even if they're built for games,


00:06:07.260 --> 00:06:12.260
they can also be used for things like an engine simulation


00:06:12.760 --> 00:06:15.820
or even like airflow simulations.


00:06:15.820 --> 00:06:18.080
So there's a lot of cool uses for this too


00:06:18.080 --> 00:06:20.480
that are outside of games.


00:06:20.480 --> 00:06:22.920
But the incredible things


00:06:22.920 --> 00:06:25.120
is how small the programs can be.


00:06:25.120 --> 00:06:29.480
So this article has a contained,


00:06:29.480 --> 00:06:32.680
like an attached notebook, hosted notebook


00:06:32.680 --> 00:06:35.400
that has things like angry shapes,


00:06:35.400 --> 00:06:39.040
which is like angry birds and a rocket game.


00:06:39.040 --> 00:06:40.480
And there's a color mixing game,


00:06:40.480 --> 00:06:42.240
which I was just fascinated by.


00:06:42.240 --> 00:06:44.480
there's like a bunch of colors drop into it.


00:06:44.480 --> 00:06:47.920
It isn't on the, it isn't listed on the article,


00:06:47.920 --> 00:06:49.200
but if you go to the example,


00:06:49.200 --> 00:06:51.040
it's kind of color mixing thing.


00:06:51.040 --> 00:06:55.060
And it's only like 70 lines of code.


00:06:55.060 --> 00:07:00.060
And with that, you can have some amazing physics examples.


00:07:00.060 --> 00:07:02.600
And I'm pretty excited about this actually.


00:07:02.600 --> 00:07:05.680
So I'd like to give it a try.


00:07:05.680 --> 00:07:07.180
- You know, I think this makes a lot of sense


00:07:07.180 --> 00:07:09.080
in the notebook form,


00:07:09.080 --> 00:07:11.240
because you're trying to visualize certain things.


00:07:11.240 --> 00:07:14.240
Sometimes graphs are fine, but other times,


00:07:14.240 --> 00:07:18.440
they just don't capture like flow and that kind of stuff.


00:07:18.440 --> 00:07:20.880
And it seems like game animation would be great.


00:07:20.880 --> 00:07:22.920
Kim, what do you think?


00:07:22.920 --> 00:07:25.000
- I was also gonna say, if you can get something


00:07:25.000 --> 00:07:27.680
very impressive done in 70 lines of code as a learning tool,


00:07:27.680 --> 00:07:29.520
that's brilliant because that's effectively


00:07:29.520 --> 00:07:31.200
a screen of code.


00:07:31.200 --> 00:07:33.200
Otherwise, you'd be looking at,


00:07:33.200 --> 00:07:34.960
if you're looking at hundreds and hundreds of lines,


00:07:34.960 --> 00:07:36.260
you know, if you're a seasoned developer,


00:07:36.260 --> 00:07:38.880
that's perfectly reasonable, but to a new person,


00:07:38.880 --> 00:07:40.600
that must look overwhelming.


00:07:40.600 --> 00:07:42.800
Yeah, if you can fit a single screen and say,


00:07:42.800 --> 00:07:44.300
here is it, this is everything you need


00:07:44.300 --> 00:07:47.000
to make this thing work, it's quite a powerful tool.


00:07:47.000 --> 00:07:50.040
And it looks like a lot of fun, actually.


00:07:50.040 --> 00:07:51.000
- It does look fun.


00:07:51.000 --> 00:07:54.960
- Yeah, there's some interesting,


00:07:54.960 --> 00:07:57.080
the article talks about some interesting hoops


00:07:57.080 --> 00:07:59.840
he had to jump through using iPie events


00:07:59.840 --> 00:08:04.080
and iPie widgets and Canvas to be able to draw things


00:08:04.080 --> 00:08:07.200
and get events from people.


00:08:07.200 --> 00:08:10.120
But this is just some fun stuff.


00:08:10.120 --> 00:08:13.280
Here's like the, we're showing on the screen,


00:08:13.280 --> 00:08:15.560
the thing like Angry Birds.


00:08:15.560 --> 00:08:19.800
And to be honest, like the playability of it,


00:08:19.800 --> 00:08:23.040
isn't maybe like, it's not on the level of what,


00:08:23.040 --> 00:08:24.960
you know, playing an Xbox or something like that,


00:08:24.960 --> 00:08:25.800
obviously.


00:08:25.800 --> 00:08:28.240
- You probably want to hook up a controller to it.


00:08:28.240 --> 00:08:29.440
- Yeah.


00:08:29.440 --> 00:08:32.360
But that you can do something like this so quickly


00:08:32.360 --> 00:08:33.240
is pretty amazing.


00:08:33.240 --> 00:08:34.080
So I-


00:08:34.080 --> 00:08:35.560
- And also on the other hand, if you write,


00:08:35.560 --> 00:08:36.520
once you write it yourself,


00:08:36.520 --> 00:08:38.360
the playability actually doesn't matter that much.


00:08:38.360 --> 00:08:41.960
You're looking at interacting with the thing you wrote.


00:08:41.960 --> 00:08:42.800
I think, yeah.


00:08:42.800 --> 00:08:45.200
- I love it.


00:08:45.200 --> 00:08:46.020
This is really cool.


00:08:46.020 --> 00:08:46.860
Nice find, Brian.


00:08:46.860 --> 00:08:51.360
All right, let me tell you about


00:08:51.360 --> 00:08:56.040
some really interesting cybersecurity side of things.


00:08:56.040 --> 00:08:58.120
So I'm gonna first tell you about this thing


00:08:58.120 --> 00:09:00.780
called a Think Canary,


00:09:00.780 --> 00:09:02.380
but that's not actually what I wanna talk about.


00:09:02.380 --> 00:09:03.680
It's just to set the stage.


00:09:03.680 --> 00:09:06.760
Okay, so here's a challenge,


00:09:06.760 --> 00:09:10.140
Something that always stresses me out is,


00:09:10.140 --> 00:09:13.120
what if somebody was to break into your app,


00:09:13.120 --> 00:09:16.140
into your systems, into your cloud infrastructure


00:09:16.140 --> 00:09:18.480
or whatever, how would you know?


00:09:18.480 --> 00:09:21.440
Right, like what would be the indicator, right?


00:09:21.440 --> 00:09:25.400
If they don't trash it, they don't lock it


00:09:25.400 --> 00:09:29.100
with crypto lockers or anything like that, ransomware,


00:09:29.100 --> 00:09:32.380
then they could just cruise around there, right?


00:09:32.380 --> 00:09:37.380
So this company Thinkst Canary created this,


00:09:37.380 --> 00:09:39.000
I think you can put it in the cloud


00:09:39.000 --> 00:09:41.220
as like a hosted container type thing,


00:09:41.220 --> 00:09:43.640
or you can get like a little Raspberry Pi like things


00:09:43.640 --> 00:09:45.100
and put them physically on your network


00:09:45.100 --> 00:09:46.660
if you had a physical network.


00:09:46.660 --> 00:09:48.940
And you could say, you act like a SQL server,


00:09:48.940 --> 00:09:50.940
you act like an exchange server,


00:09:50.940 --> 00:09:53.620
you, if somebody tries to search the network and says,


00:09:53.620 --> 00:09:55.900
show me all the active directories, you be that.


00:09:55.900 --> 00:09:57.900
Maybe we're not even using active directory


00:09:57.900 --> 00:09:59.140
'cause we're not on Windows,


00:09:59.140 --> 00:10:01.500
but if somebody breaks in,


00:10:01.500 --> 00:10:03.460
they may well start looking for those types of things.


00:10:03.460 --> 00:10:05.100
And what they'll do is they'll trigger alarms


00:10:05.100 --> 00:10:07.740
if somebody tries to interact with them


00:10:07.740 --> 00:10:09.100
and normal things shouldn't


00:10:09.100 --> 00:10:10.780
because only if you're like trolling around


00:10:10.780 --> 00:10:13.260
looking for them should it be discovered, right?


00:10:13.260 --> 00:10:14.900
So that's what this is.


00:10:14.900 --> 00:10:18.020
And with this whole log for shell stuff that's going on,


00:10:18.020 --> 00:10:20.060
it's just such a nightmare of like,


00:10:20.060 --> 00:10:21.680
well, we installed this app


00:10:21.680 --> 00:10:24.460
that did invoice management for us.


00:10:24.460 --> 00:10:27.220
Did it have a log for shell vulnerability?


00:10:27.220 --> 00:10:29.020
I don't know, maybe they said they fixed it.


00:10:29.020 --> 00:10:29.960
But if somebody gets in,


00:10:29.960 --> 00:10:32.980
It's not just we have to patch the log for shell


00:10:32.980 --> 00:10:35.060
or the log for J version.


00:10:35.060 --> 00:10:38.300
We've also got to then know what else has been run


00:10:38.300 --> 00:10:40.640
'cause they could have installed whatever, right?


00:10:40.640 --> 00:10:44.340
So the thing I actually wanna recommend to Python people


00:10:44.340 --> 00:10:46.540
is this thing called canary tokens.


00:10:46.540 --> 00:10:47.700
So check this out.


00:10:47.700 --> 00:10:49.240
This is fantastic.


00:10:49.240 --> 00:10:51.420
So what you can do is you can get different things


00:10:51.420 --> 00:10:53.300
that will then trigger alarms,


00:10:53.300 --> 00:10:56.300
like emails or other sorts of stuff to you.


00:10:56.300 --> 00:10:58.100
So I can come over here and I can say,


00:10:58.100 --> 00:11:00.060
I would like to get a URL.


00:11:00.060 --> 00:11:02.980
And if anybody visits that URL,


00:11:02.980 --> 00:11:04.900
send me an email and say,


00:11:04.900 --> 00:11:06.300
you know, whatever message I put in here.


00:11:06.300 --> 00:11:07.140
So I could come in and say,


00:11:07.140 --> 00:11:11.380
here's a URL and send me at Michael@talkbython,


00:11:11.380 --> 00:11:16.380
email and say, this is hidden in the admin section unused.


00:11:16.380 --> 00:11:19.780
Something like that.


00:11:19.780 --> 00:11:21.280
If somebody sends me an email,


00:11:21.280 --> 00:11:22.340
if I get that email,


00:11:22.340 --> 00:11:24.020
somebody's gone in and clicked that link


00:11:24.020 --> 00:11:25.440
in the admin section of my site.


00:11:25.440 --> 00:11:27.340
And if I didn't, it gives you like IP address


00:11:27.340 --> 00:11:32.060
all that sort of stuff of what comes back so if I didn't do it or it looks


00:11:32.060 --> 00:11:37.980
like an unknown IP that should be highly concerning right so what else that URL


00:11:37.980 --> 00:11:43.540
is interesting I can get a DNS token somebody requests like does a DNS look


00:11:43.540 --> 00:11:50.540
up on rollouts dot Python bytes dot FM I can get an alert to that that'd be


00:11:50.540 --> 00:11:55.660
pretty interesting a unique email address if somebody ever tries to


00:11:55.660 --> 00:11:57.580
to contact that, a Word document.


00:11:57.580 --> 00:11:59.700
So you get like a Word document and put it in say like


00:11:59.700 --> 00:12:01.900
SharePoint or something dreadful like that.


00:12:01.900 --> 00:12:03.540
And if it gets opened,


00:12:03.540 --> 00:12:05.700
you'll get an email that somebody got that.


00:12:05.700 --> 00:12:09.780
Let's see, you've got VPN wire guards,


00:12:09.780 --> 00:12:11.660
file, you can create a custom EXE.


00:12:11.660 --> 00:12:15.420
If somebody runs your EXE or a SQL server instance,


00:12:15.420 --> 00:12:19.700
or you can even do like directly a log for shell link


00:12:19.700 --> 00:12:21.420
that will run.


00:12:21.420 --> 00:12:24.020
So if you are trying to like figure out,


00:12:24.020 --> 00:12:25.420
just put stuff in there to let you know


00:12:25.420 --> 00:12:27.380
somebody gets a part they're not supposed to be in,


00:12:27.380 --> 00:12:28.440
like this is really cool.


00:12:28.440 --> 00:12:30.680
There's no, it's free, it doesn't cost anything.


00:12:30.680 --> 00:12:32.000
It doesn't require any setup,


00:12:32.000 --> 00:12:34.040
like put a Word document in a folder.


00:12:34.040 --> 00:12:37.040
If it gets opened, let us know.


00:12:37.040 --> 00:12:37.940
What do you think?


00:12:37.940 --> 00:12:42.520
- Well, I was gonna say,


00:12:42.520 --> 00:12:45.320
I've been looking for ways to do exactly this kind of thing


00:12:45.320 --> 00:12:49.160
'cause I'm totally unique in being concerned


00:12:49.160 --> 00:12:50.920
that log for shell has got impacts


00:12:50.920 --> 00:12:53.520
that I can't see on our systems.


00:12:53.520 --> 00:12:56.720
Just because your public facing systems happen not to have used log4shell things


00:12:56.720 --> 00:13:03.040
doesn't mean that you're necessarily safe. All it means is that if by some other means


00:13:03.040 --> 00:13:09.920
somebody's got into one of your internal systems, wouldn't necessarily know that. So I'm very much


00:13:09.920 --> 00:13:16.000
interested in this. I knew about canaries already. I happen to sponsor the local South African


00:13:16.000 --> 00:13:22.320
PyCon ZA conference, but canary tokens are a very funky additional add-on to that.


00:13:22.320 --> 00:13:24.360
- Exactly, I knew about the canaries as well,


00:13:24.360 --> 00:13:25.680
and I'm like, ah, but that doesn't really apply


00:13:25.680 --> 00:13:27.920
to the world that I live in, I'm not like in an enterprise.


00:13:27.920 --> 00:13:29.980
But like this, these make a lot of sense,


00:13:29.980 --> 00:13:31.920
and they're free, which I think is cool.


00:13:31.920 --> 00:13:36.360
Yeah, here's what it looks like if you get a notice.


00:13:36.360 --> 00:13:38.400
It says, this is the email I got,


00:13:38.400 --> 00:13:40.400
"Your canary token was triggered,


00:13:40.400 --> 00:13:43.180
"the channel was HTTP, the token was that,


00:13:43.180 --> 00:13:45.660
"this is a test, the IP address of the person."


00:13:45.660 --> 00:13:47.000
So this was one of those URLs,


00:13:47.000 --> 00:13:48.960
somebody interacts with this URL, let me know.


00:13:48.960 --> 00:13:51.600
Here's their user agent, here's the message,


00:13:51.600 --> 00:13:52.800
there's the IP and so on.


00:13:52.800 --> 00:13:54.240
So you would just get a notice like that,


00:13:54.240 --> 00:13:57.560
that says somebody clicked on something


00:13:57.560 --> 00:13:58.800
they shouldn't have had access to.


00:13:58.800 --> 00:14:00.600
Yeah, so anyway, pretty neat.


00:14:00.600 --> 00:14:01.440
Brian?


00:14:01.440 --> 00:14:04.160
- Yeah, I'm not sure.


00:14:04.160 --> 00:14:06.320
Yeah, it's actually pretty cool.


00:14:06.320 --> 00:14:09.000
Some of the things I didn't think you could,


00:14:09.000 --> 00:14:10.160
I wouldn't even expect,


00:14:10.160 --> 00:14:12.720
like can somebody cloning your website?


00:14:12.720 --> 00:14:14.480
- Yeah.


00:14:14.480 --> 00:14:16.720
- Didn't know that was a thing.


00:14:16.720 --> 00:14:18.240
- I'm scared now, to be honest.


00:14:18.240 --> 00:14:19.080
(laughing)


00:14:19.080 --> 00:14:20.320
I didn't realize that was something


00:14:20.320 --> 00:14:22.200
I should be worrying about.


00:14:22.200 --> 00:14:25.240
- Get an alert when a MySQL dump is loaded.


00:14:25.240 --> 00:14:28.360
Like, okay, like how does that happen?


00:14:28.360 --> 00:14:30.680
I don't know, but that's pretty awesome that it's possible


00:14:30.680 --> 00:14:32.080
and also frightening.


00:14:32.080 --> 00:14:33.120
- Yeah.


00:14:33.120 --> 00:14:33.940
- Yeah.


00:14:33.940 --> 00:14:35.520
And Sam out in the audience says,


00:14:35.520 --> 00:14:36.880
"Ironically, the log for shell


00:14:36.880 --> 00:14:38.680
might have its own vulnerabilities."


00:14:38.680 --> 00:14:40.120
(laughing)


00:14:40.120 --> 00:14:41.800
You know, that thing's been patched a couple of times.


00:14:41.800 --> 00:14:43.320
It's gonna be a big, big problem.


00:14:43.320 --> 00:14:44.640
Anyway, canary tokens,


00:14:44.640 --> 00:14:47.300
I think this is broadly useful for Python people.


00:14:47.300 --> 00:14:50.160
You could put the URL stuff inside of your app.


00:14:50.160 --> 00:14:52.840
You could put an email inside of locations.


00:14:52.840 --> 00:14:54.860
There's lots of stuff that I like this,


00:14:54.860 --> 00:14:57.640
the database restore type things and so on.


00:14:57.640 --> 00:14:58.600
This looks useful.


00:14:58.600 --> 00:15:02.680
- Yeah, so I'm still a little lost.


00:15:02.680 --> 00:15:04.360
You throw this, like for instance,


00:15:04.360 --> 00:15:05.860
like you said in the admin section


00:15:05.860 --> 00:15:08.640
that you shouldn't be using and you just know about it.


00:15:08.640 --> 00:15:10.120
So you don't click it or something.


00:15:10.120 --> 00:15:13.600
- So imagine this, imagine you've got in your admin section,


00:15:13.600 --> 00:15:16.520
you've got a, like a search for user button


00:15:16.520 --> 00:15:19.940
and then next to it, you could just put an export all data.


00:15:19.940 --> 00:15:24.220
And then put one of these URLs at the endpoint at app.


00:15:24.220 --> 00:15:26.380
And nobody who works, you just tell everyone,


00:15:26.380 --> 00:15:27.740
never click the export all data.


00:15:27.740 --> 00:15:28.820
It doesn't do anything.


00:15:28.820 --> 00:15:29.960
But if someone were to break in,


00:15:29.960 --> 00:15:31.100
what's the first thing they're gonna want?


00:15:31.100 --> 00:15:32.700
Oh, well, let's get the export all data.


00:15:32.700 --> 00:15:34.840
Boom, they'll go click it and you'll know.


00:15:34.840 --> 00:15:38.340
They're still in, it's bad, but at least they're not in


00:15:38.340 --> 00:15:41.900
and just have unlimited time to be in, you know?


00:15:41.900 --> 00:15:42.740
- He's a user.


00:15:42.740 --> 00:15:44.260
- And other stuff too, like let's say you've got


00:15:44.260 --> 00:15:46.580
a Django website and you stick,


00:15:46.580 --> 00:15:50.540
you load a like a PHP admin page or something like that,


00:15:50.540 --> 00:15:52.300
just at the same URL,


00:15:52.300 --> 00:15:55.140
in case somebody's trying to grab that.


00:15:55.140 --> 00:15:56.060
- Yep.


00:15:56.060 --> 00:15:58.700
Yeah, a lot of interesting little breadcrumbs


00:15:58.700 --> 00:15:59.540
you can leave in there.


00:15:59.540 --> 00:16:00.360
Okay.


00:16:00.360 --> 00:16:03.420
Kim, that brings us to yours.


00:16:03.420 --> 00:16:04.940
- Sure.


00:16:04.940 --> 00:16:06.980
The first topic I was going to talk about


00:16:06.980 --> 00:16:08.540
are actually two similar,


00:16:08.540 --> 00:16:11.380
but not quite the same pieces of software


00:16:11.380 --> 00:16:14.980
by PyAutoGUI and PyWinAuto


00:16:14.980 --> 00:16:18.260
are both toolkits for automating GUIs,


00:16:18.260 --> 00:16:19.780
effectively, well, automating GUIs


00:16:19.780 --> 00:16:22.300
for interacting programmatically with GUIs.


00:16:22.300 --> 00:16:23.140
- Nice. - Pywin Auto.


00:16:23.140 --> 00:16:24.420
- Which is really, really hard, right?


00:16:24.420 --> 00:16:25.260
- Which is-- - Hey, before we go on,


00:16:25.260 --> 00:16:26.660
before we go on, could you give that


00:16:26.660 --> 00:16:27.860
like three control pluses?


00:16:27.860 --> 00:16:28.700
Just right now. - Oh, sure, sorry.


00:16:28.700 --> 00:16:31.980
I was just seeing that's a little bit on the small side.


00:16:31.980 --> 00:16:33.380
- Thanks. - How's that?


00:16:33.380 --> 00:16:34.220
- A little more.


00:16:34.220 --> 00:16:35.220
- Space to play with.


00:16:35.220 --> 00:16:37.140
- There you go.


00:16:37.140 --> 00:16:37.980
- Fair enough.


00:16:37.980 --> 00:16:40.460
Well, let me just, while I remember,


00:16:40.460 --> 00:16:41.340
do it to this one as well.


00:16:41.340 --> 00:16:44.060
They both happen to be read the docs documents.


00:16:44.060 --> 00:16:50.380
So you're quite right, the programmatically controlling a GUI, it can be quite a pain,


00:16:50.380 --> 00:16:55.340
particularly for GUIs that aren't particularly easy to understand.


00:16:55.340 --> 00:16:59.900
And the reason I bring tools like this up is that there's quite a lot of use cases I


00:16:59.900 --> 00:17:03.740
can think of two examples at the top of my own career, and I'm sure there's hundreds


00:17:03.740 --> 00:17:07.340
more, where this kind of thing is useful, and you might not know it's something you


00:17:07.340 --> 00:17:08.540
can do.


00:17:08.540 --> 00:17:13.700
And the kind of examples I'm thinking of are particularly in, I'm sure, much enterprise


00:17:13.700 --> 00:17:18.900
and in industrial software, when you get a piece of equipment, you frequently get a GUI


00:17:18.900 --> 00:17:20.860
tool that accompanies it.


00:17:20.860 --> 00:17:22.660
Probably no API, right?


00:17:22.660 --> 00:17:24.500
Well, no API whatsoever.


00:17:24.500 --> 00:17:28.100
There's a tool you fire up and you set all the settings, but because the company that


00:17:28.100 --> 00:17:30.500
supplied you the piece of equipment, they don't write software.


00:17:30.500 --> 00:17:31.500
It's not their thing.


00:17:31.500 --> 00:17:38.820
They either outsource the tool or the intern writes it, and it has 50 checkboxes laid out


00:17:38.820 --> 00:17:42.220
in grid form, and you need to set it up every single time you want to use that piece of


00:17:42.220 --> 00:17:43.220
software.


00:17:43.220 --> 00:17:45.900
to remember what you set, there's nothing to do.


00:17:45.900 --> 00:17:47.900
And I've worked with a couple of those systems,


00:17:47.900 --> 00:17:50.620
and I see Brian, I think you probably have as well.


00:17:50.620 --> 00:17:52.460
We basically, there's a piece of paper


00:17:52.460 --> 00:17:53.820
next to the computer the software is on


00:17:53.820 --> 00:17:56.100
with a screen print of what the settings should be.


00:17:56.100 --> 00:17:57.780
So that the person, poor sucker has to come down


00:17:57.780 --> 00:18:00.220
and use it, knows which of the 50 tick boxes to check.


00:18:00.220 --> 00:18:01.380
And then they have to check that the pattern


00:18:01.380 --> 00:18:04.700
effectively matches on screen, and then they hit run.


00:18:04.700 --> 00:18:08.140
And something like PyAutoGUI or PyOneAuto


00:18:08.140 --> 00:18:10.900
are both useful so that you can effectively script


00:18:10.900 --> 00:18:12.180
the startup of that app.


00:18:12.180 --> 00:18:14.320
And you can say to you write a small piece of Python


00:18:14.320 --> 00:18:17.120
that fires this tool up, identifies all the checkboxes,


00:18:17.120 --> 00:18:19.400
ticks the ones you've programmed in,


00:18:19.400 --> 00:18:22.480
and then either leaves it for the human to push go


00:18:22.480 --> 00:18:23.480
or whatever it is the app does,


00:18:23.480 --> 00:18:24.920
or for that matter, pushes go itself


00:18:24.920 --> 00:18:27.780
and then closes the app and records that it did that.


00:18:27.780 --> 00:18:30.420
So that kind of use case is very powerful.


00:18:30.420 --> 00:18:32.200
And I think there are lots of cases,


00:18:32.200 --> 00:18:36.000
particularly in enterprise software or internal software


00:18:36.000 --> 00:18:37.840
that somebody wrote for the company


00:18:37.840 --> 00:18:38.980
to do something very useful,


00:18:38.980 --> 00:18:40.320
but it's been around for 20 years.


00:18:40.320 --> 00:18:42.920
and the guy who wrote it is not around.


00:18:42.920 --> 00:18:45.760
Nobody wants to touch it 'cause the source is terrifying.


00:18:45.760 --> 00:18:48.480
So nobody's going to sit down and change it.


00:18:48.480 --> 00:18:49.560
- How do you even get that Visual Basic 6


00:18:49.560 --> 00:18:50.840
or Visual Basic 5 and stuff?


00:18:50.840 --> 00:18:51.840
- Well, exactly.


00:18:51.840 --> 00:18:53.400
How do you even compile it now?


00:18:53.400 --> 00:18:54.720
Exactly.


00:18:54.720 --> 00:18:56.600
So to be able to wrap it


00:18:56.600 --> 00:18:58.800
is a very powerful thing to be able to do.


00:18:58.800 --> 00:19:01.640
And the other kind of use case that's somewhat related,


00:19:01.640 --> 00:19:03.600
it also comes to mind is,


00:19:03.600 --> 00:19:05.120
I've spent a large amount of my career


00:19:05.120 --> 00:19:08.480
doing industrial automation, factory-based type work.


00:19:08.480 --> 00:19:11.400
And there, the faster you can go and the fewer bits of,


00:19:11.400 --> 00:19:13.560
the fewer steps you need a human to repeatedly do,


00:19:13.560 --> 00:19:16.640
the better for you in many ways that the human's time


00:19:16.640 --> 00:19:18.800
is best spent actually manipulating objects


00:19:18.800 --> 00:19:20.920
and checking things rather than opening pieces of software


00:19:20.920 --> 00:19:23.200
and clicking boxes and closing them again.


00:19:23.200 --> 00:19:28.000
So quite frequently, we've had cases on the production line


00:19:28.000 --> 00:19:30.360
where the vendor of the chip we're using


00:19:30.360 --> 00:19:33.520
has supplied this tool that does some security related thing


00:19:33.520 --> 00:19:35.920
and it's a GUI tool and every single time


00:19:35.920 --> 00:19:37.160
you would have to open it up,


00:19:37.160 --> 00:19:38.680
you'd have to click the same two boxes,


00:19:38.680 --> 00:19:40.840
you'd have to say, yes, secure this chip,


00:19:40.840 --> 00:19:41.960
close it again, repeat,


00:19:41.960 --> 00:19:44.720
wait for another one to arrive at your workstation.


00:19:44.720 --> 00:19:47.480
And if you can automate it again with a wrapping tool,


00:19:47.480 --> 00:19:49.240
nobody need even be involved at all.


00:19:49.240 --> 00:19:51.880
Effectively part of your production process is you wrap it,


00:19:51.880 --> 00:19:52.840
you fire up the tool,


00:19:52.840 --> 00:19:54.720
you click the two buttons programmatically,


00:19:54.720 --> 00:19:57.720
you hit go and you close it again and repeat.


00:19:57.720 --> 00:20:00.620
And again, I personally have encountered situations


00:20:00.620 --> 00:20:02.000
where that's useful and I'd like to,


00:20:02.000 --> 00:20:04.120
I would imagine I'm far from alone in it,


00:20:04.120 --> 00:20:07.040
so I just thought I'd mention these things do exist.


00:20:07.040 --> 00:20:08.400
I suspect.


00:20:08.400 --> 00:20:09.400
Lots of people do use them,


00:20:09.400 --> 00:20:11.240
but for people who don't know that they're there,


00:20:11.240 --> 00:20:13.360
very useful things to be able to do.


00:20:13.360 --> 00:20:15.320
You know, wrapping GUIs is,


00:20:15.320 --> 00:20:17.000
it's a bit tedious up front


00:20:17.000 --> 00:20:19.080
because often these tools aren't very well written.


00:20:19.080 --> 00:20:21.080
So you'll have checkbox one, checkbox four,


00:20:21.080 --> 00:20:23.880
checkbox 27, checkbox 295,


00:20:23.880 --> 00:20:27.080
and no obvious naming consistency with what they do


00:20:27.080 --> 00:20:27.920
or how they work.


00:20:27.920 --> 00:20:29.320
But once you've figured it out,


00:20:29.320 --> 00:20:30.400
let the computer worry,


00:20:30.400 --> 00:20:33.320
let the script worry about what those checkboxes do.


00:20:33.320 --> 00:20:35.160
- I've seen the backside of that code


00:20:35.160 --> 00:20:37.840
where you're like looking at some event handler


00:20:37.840 --> 00:20:42.680
and it's like, if checkbox 24.checked,


00:20:42.680 --> 00:20:44.520
then do this, like what in the world?


00:20:44.520 --> 00:20:46.680
Like who didn't want to name this?


00:20:46.680 --> 00:20:48.240
'Cause they got a program against those names.


00:20:48.240 --> 00:20:49.860
That's insane.


00:20:49.860 --> 00:20:51.440
- Well, they just do one at a time.


00:20:51.440 --> 00:20:52.280
When you're working on-


00:20:52.280 --> 00:20:54.280
- That's exactly it, yeah.


00:20:54.280 --> 00:20:55.560
- Yeah, so you're working on one feature


00:20:55.560 --> 00:20:56.920
and you go, oh, I need a checkbox.


00:20:56.920 --> 00:20:59.520
Oh, the default is checkbox 24.


00:20:59.520 --> 00:21:02.080
Then you look for the, you do the callback handling


00:21:02.080 --> 00:21:05.400
and you just did it, so you know it's 24.


00:21:05.400 --> 00:21:07.560
>> Exactly. Don't want to bother changing it.


00:21:07.560 --> 00:21:08.400
It's cool. >> Exactly.


00:21:08.400 --> 00:21:10.600
>> Is there an automation place in your world?


00:21:10.600 --> 00:21:14.760
>> Yeah, so there's, like Kim said,


00:21:14.760 --> 00:21:15.920
there's places where tools


00:21:15.920 --> 00:21:19.080
that don't necessarily have a user interface.


00:21:19.080 --> 00:21:21.000
The thing that this doesn't,


00:21:21.000 --> 00:21:22.800
I don't think these do like web stuff,


00:21:22.800 --> 00:21:25.160
the web automations, other tools.


00:21:25.160 --> 00:21:27.200
>> Well, I presume you could automate a browser,


00:21:27.200 --> 00:21:28.680
but I mean, by the time you're doing that,


00:21:28.680 --> 00:21:31.560
you might as well be using the tools designed for it.


00:21:31.560 --> 00:21:33.200
>> Yeah, Selenium or something.


00:21:33.200 --> 00:21:40.000
What I'd really hope is anybody that has any sort of tool that they're writing on a web.


00:21:40.000 --> 00:21:44.160
So web frameworks often get -- internal tools get written in web frameworks


00:21:44.160 --> 00:21:47.300
and then people forget to throw IDs in things.


00:21:47.300 --> 00:21:52.240
So the best way to automate a web stuff is to have an ID that you can grab onto,


00:21:52.240 --> 00:21:56.460
but often they're just these nested div nightmares.


00:21:56.520 --> 00:21:59.280
But anyway, yeah, there's a couple of tools


00:21:59.280 --> 00:22:03.400
that we've used by WinAuto for that are, it's pretty nice.


00:22:03.400 --> 00:22:04.840
- Yeah, very nice.


00:22:04.840 --> 00:22:06.560
Yeah, it seems like if you're building a GUI app,


00:22:06.560 --> 00:22:08.000
you could test it with this,


00:22:08.000 --> 00:22:10.680
like write sort of full on integration tests


00:22:10.680 --> 00:22:12.440
from the outside.


00:22:12.440 --> 00:22:14.560
And also I was talking to somebody and they were like,


00:22:14.560 --> 00:22:16.920
"Well, this app that I work on,


00:22:16.920 --> 00:22:19.120
it doesn't have like a concept of a back button.


00:22:19.120 --> 00:22:21.520
So you drive into the menu, hit a thing, go,


00:22:21.520 --> 00:22:25.380
and then it'll take you back home in like 10 steps."


00:22:25.380 --> 00:22:28.820
I could definitely see a little toolbar thing,


00:22:28.820 --> 00:22:29.820
you press a couple of buttons,


00:22:29.820 --> 00:22:32.700
like get me to this scenario and I'll put the last thing in,


00:22:32.700 --> 00:22:33.860
get me to that scenario,


00:22:33.860 --> 00:22:36.620
like do the nine steps, I'll do the 10th.


00:22:36.620 --> 00:22:37.700
- Exactly.


00:22:37.700 --> 00:22:38.820
- Yeah.


00:22:38.820 --> 00:22:41.280
- In many ways, the way I've mainly encountered it


00:22:41.280 --> 00:22:43.340
has been that the first scenario laid out,


00:22:43.340 --> 00:22:45.960
not so much actually automating the full running of the tool,


00:22:45.960 --> 00:22:49.020
but setting the tool up so that it is in the right state


00:22:49.020 --> 00:22:50.420
for what the company needs


00:22:50.420 --> 00:22:52.820
without having somebody have to either consult a document


00:22:52.820 --> 00:22:54.100
and risk getting it wrong


00:22:54.100 --> 00:22:56.000
or not know which of the settings they should have


00:22:56.000 --> 00:22:57.000
'cause that piece of paper


00:22:57.000 --> 00:22:58.620
isn't with the computer anymore,


00:22:58.620 --> 00:23:01.380
all that kind of thing, it shouldn't happen, but it does.


00:23:01.380 --> 00:23:03.540
And it's much easier to have this kind of,


00:23:03.540 --> 00:23:05.800
to have the computer worry about what the settings should be.


00:23:05.800 --> 00:23:07.380
Yeah, I do think the program should remember that,


00:23:07.380 --> 00:23:09.020
but if they don't, they don't.


00:23:09.020 --> 00:23:11.220
It's not much you can do to change that off of the fact.


00:23:11.220 --> 00:23:13.820
- External intelligence for a bad app, that's right.


00:23:13.820 --> 00:23:16.840
- Well, there's also like API stuff


00:23:16.840 --> 00:23:18.140
that people forget about.


00:23:20.620 --> 00:23:23.900
I've got a device that I need to automate


00:23:23.900 --> 00:23:28.260
connecting it to Windows and getting the device set up


00:23:28.260 --> 00:23:30.700
or something every time I plug one in.


00:23:30.700 --> 00:23:34.420
And just automating that works sometimes too.


00:23:34.420 --> 00:23:35.240
So anyway.


00:23:35.240 --> 00:23:39.780
- All right, Brian, over to you.


00:23:39.780 --> 00:23:40.620
- Thanks.


00:23:40.620 --> 00:23:45.300
I saw this, Brett Cannon wrote an article


00:23:45.300 --> 00:23:48.140
called a reverse chronological,


00:23:48.140 --> 00:23:53.980
Reverse chronology of some Python features and I really love this article. It's pretty simple


00:23:53.980 --> 00:24:00.720
One of the things I like about it is just because we cover so much and we've been covering Python releases for quite a while


00:24:00.720 --> 00:24:07.460
I kind of forget which releases got I got which feature in so a a really brief


00:24:07.460 --> 00:24:12.960
You know rundown of some of the different features is nice like last week


00:24:12.960 --> 00:24:16.400
who were talking and saying, well, you're on,


00:24:16.400 --> 00:24:19.120
if you're on 3.7, why would you want to move forward?


00:24:19.120 --> 00:24:21.680
And I can't remember which features in which.


00:24:21.680 --> 00:24:25.720
So having a quick bullet list, like in 3.10,


00:24:25.720 --> 00:24:27.360
we got the match statement, of course,


00:24:27.360 --> 00:24:29.240
we've talked about that recently,


00:24:29.240 --> 00:24:31.200
but also better error messages.


00:24:31.200 --> 00:24:33.980
And I'm gonna pause a little bit.


00:24:33.980 --> 00:24:37.740
Brett brings up in the introduction discussion


00:24:37.740 --> 00:24:40.960
that if you're kind of one of those people that think


00:24:40.960 --> 00:24:43.040
Python's kind of getting bloated


00:24:43.040 --> 00:24:45.640
and they're throwing too much stuff in it.


00:24:45.640 --> 00:24:47.500
And I wish that we had the good old days


00:24:47.500 --> 00:24:49.160
where you could just think about all Python


00:24:49.160 --> 00:24:51.040
in your own head.


00:24:51.040 --> 00:24:53.760
Well, you kind of throw everything out.


00:24:53.760 --> 00:24:57.480
He recommends going down this list


00:24:57.480 --> 00:24:58.820
and picking the first feature


00:24:58.820 --> 00:25:00.920
that you don't think you could live without.


00:25:00.920 --> 00:25:04.280
And everything before that led to that.


00:25:04.280 --> 00:25:06.240
So you can't throw that stuff out either.


00:25:06.240 --> 00:25:07.620
It all kind of goes together.


00:25:07.620 --> 00:25:11.380
And one of the examples is the match statement


00:25:11.380 --> 00:25:14.580
or the, what are they, pattern matching.


00:25:14.580 --> 00:25:17.700
That was sorta controversial,


00:25:17.700 --> 00:25:22.240
but the code to get that to work involved,


00:25:22.240 --> 00:25:25.940
or the process involved even like making a new parser


00:25:25.940 --> 00:25:30.400
for Python or using a new parser for Python.


00:25:30.400 --> 00:25:32.980
And, but with that new parser,


00:25:32.980 --> 00:25:35.860
then things like better error messages are possible.


00:25:35.860 --> 00:25:40.420
So if you like better error messages, which I do,


00:25:40.420 --> 00:25:43.220
that means 310 and everything below kind of has to stay.


00:25:43.220 --> 00:25:47.020
But anyway, it's kind of funny.


00:25:47.020 --> 00:25:50.820
Moving on, like I forgot what the dictionary support


00:25:50.820 --> 00:25:55.820
for like the or and or equal,


00:25:55.820 --> 00:25:58.460
that came in in 3.9.


00:25:58.460 --> 00:26:01.540
So if somebody's thinking, well, why should I upgrade?


00:26:01.540 --> 00:26:04.280
This is a good list to take a look at.


00:26:04.280 --> 00:26:06.920
- Nice, all right, I did the little exercise.


00:26:06.920 --> 00:26:09.160
I've just added three, seven.


00:26:09.160 --> 00:26:10.040
- Three, seven for you.


00:26:10.040 --> 00:26:11.400
So what was the thing in three, seven


00:26:11.400 --> 00:26:13.660
that you can't live without?


00:26:13.660 --> 00:26:17.660
- So the dictionary preserving order stuff


00:26:17.660 --> 00:26:20.040
is really nice for like reading and writing files


00:26:20.040 --> 00:26:23.760
and making sure that they don't diff hard.


00:26:23.760 --> 00:26:24.600
You know what I mean?


00:26:24.600 --> 00:26:26.240
If you try to like, so they're in the order,


00:26:26.240 --> 00:26:27.520
you put them there.


00:26:27.520 --> 00:26:28.860
All the other stuff I'm not hating on it.


00:26:28.860 --> 00:26:30.840
Like I like the walrus operator.


00:26:30.840 --> 00:26:32.280
I like some of the other things.


00:26:32.280 --> 00:26:34.600
like the lowercase list bracket int


00:26:34.600 --> 00:26:36.000
rather than importing types.


00:26:36.000 --> 00:26:36.740
All those are great.


00:26:36.740 --> 00:26:37.520
I'm not knocking them.


00:26:37.520 --> 00:26:39.200
I'm just saying like, where would I go?


00:26:39.200 --> 00:26:41.520
Oh, it starts to hurt where?


00:26:41.520 --> 00:26:44.200
It really starts to hurt me at 3, 7 and below.


00:26:44.200 --> 00:26:49.400
Well, I was trying a Jupyter, an interactive Jupyter system


00:26:49.400 --> 00:26:51.600
the other day, looking at some data science stuff,


00:26:51.600 --> 00:26:52.960
and it was already set up.


00:26:52.960 --> 00:26:58.640
And I tried to throw in the fString value equal thing


00:26:58.640 --> 00:27:02.080
to be able to quickly debug an item, and it didn't work.


00:27:02.080 --> 00:27:06.080
I'm like what the heck and it turned out it was using 3 7 and not 3 8


00:27:06.080 --> 00:27:11.280
And apparently I'm very used to that and I don't think I could live without it


00:27:11.280 --> 00:27:14.880
but and then a reminder also that


00:27:14.880 --> 00:27:18.080
311 when it comes out in a year


00:27:18.080 --> 00:27:20.560
It's just gonna have a lot of speed ups


00:27:20.560 --> 00:27:25.560
So yeah, if that has it comes up a lot of performance stuff and like that's my new number. Yeah, I


00:27:26.280 --> 00:27:28.520
If you forced me to roll back,


00:27:28.520 --> 00:27:30.640
I would refuse to go further than 3.6


00:27:30.640 --> 00:27:32.560
because I must have those f-strings.


00:27:32.560 --> 00:27:33.400
- Yeah.


00:27:33.400 --> 00:27:35.240
- Because they're basically so much,


00:27:35.240 --> 00:27:37.880
they just make your code so much more attractive.


00:27:37.880 --> 00:27:40.840
But that said, while I don't necessarily use


00:27:40.840 --> 00:27:42.360
everything that comes in the new versions,


00:27:42.360 --> 00:27:45.120
I don't particularly have any problem with them being there.


00:27:45.120 --> 00:27:47.200
I'm quite happy to just use the parser Python I want.


00:27:47.200 --> 00:27:49.360
And what really happens to me is that


00:27:49.360 --> 00:27:51.360
I don't necessarily know I can do something


00:27:51.360 --> 00:27:53.120
until two versions later.


00:27:53.120 --> 00:27:56.320
I probably only started doing that value equals on 3.9,


00:27:56.320 --> 00:27:57.160
for example.


00:27:57.160 --> 00:27:58.000
- Yeah.


00:27:58.000 --> 00:27:59.360
- Mainly because that's probably the first time


00:27:59.360 --> 00:28:01.000
I needed it more than anything else.


00:28:01.000 --> 00:28:03.320
I don't particularly rush forward


00:28:03.320 --> 00:28:04.580
and use the new features when they're available,


00:28:04.580 --> 00:28:07.940
but I'm glad they're there when I do ultimately want them.


00:28:07.940 --> 00:28:10.280
- Yeah, 3.6 is an interesting example you bring up


00:28:10.280 --> 00:28:12.560
because it's got f-strings.


00:28:12.560 --> 00:28:14.200
It's got a whole bunch of other stuff too,


00:28:14.200 --> 00:28:17.580
but really we can stop with f-strings.


00:28:17.580 --> 00:28:18.680
- Pretty much, yeah.


00:28:18.680 --> 00:28:19.520
- Yeah, yeah.


00:28:19.520 --> 00:28:20.360
- Yeah.


00:28:20.360 --> 00:28:23.200
And then the debugging stuff, Sam, the audience says,


00:28:23.200 --> 00:28:25.900
yes, f curly bracket name equals


00:28:25.900 --> 00:28:27.640
is indispensable for debugging.


00:28:27.640 --> 00:28:28.520
- I'm with him, as I say,


00:28:28.520 --> 00:28:30.360
I hadn't used it when it first became available,


00:28:30.360 --> 00:28:33.120
but I would really not want to not have it available now.


00:28:33.120 --> 00:28:33.960
- Yeah.


00:28:33.960 --> 00:28:38.120
- I'm a caveman print debugger, so yeah.


00:28:38.120 --> 00:28:39.620
- I like your take on it.


00:28:39.620 --> 00:28:42.640
Like it's not gonna hurt me if I don't care about it.


00:28:42.640 --> 00:28:44.140
I think one of the powers of Python


00:28:44.140 --> 00:28:46.520
is that you can be very successful with Python


00:28:46.520 --> 00:28:49.320
with a partial, quite partial understanding


00:28:49.320 --> 00:28:50.800
of what it even is.


00:28:50.800 --> 00:28:53.280
Like you don't need to know what a generator is,


00:28:53.280 --> 00:28:55.240
what a yield is, like what an expression is,


00:28:55.240 --> 00:28:58.140
what a class is, maybe not even how to create a function,


00:28:58.140 --> 00:29:00.560
just write the code top to bottom


00:29:00.560 --> 00:29:03.040
and it'll probably still do something for you.


00:29:03.040 --> 00:29:03.880
- Exactly.


00:29:03.880 --> 00:29:06.100
- And so you can sort of bring these in


00:29:06.100 --> 00:29:07.220
when it makes sense.


00:29:07.220 --> 00:29:09.920
- Yeah, I would definitely still not teach match statements


00:29:09.920 --> 00:29:12.080
to beginners, it's unnecessary.


00:29:12.080 --> 00:29:12.920
- No, exactly.


00:29:12.920 --> 00:29:15.040
- So, yeah.


00:29:15.040 --> 00:29:15.880
- Totally agree.


00:29:15.880 --> 00:29:17.220
- Whereas I would use if strings, for example,


00:29:17.220 --> 00:29:20.980
a beginner because it's just so much more readable than the other stuff is. But you're right, you


00:29:20.980 --> 00:29:25.940
don't have to magically, you don't have to use it all because it's there. Yeah, I'm sure there's


00:29:25.940 --> 00:29:31.140
people out there who feel like it's I got to use it, it's here. But no, I agree with you. All right.


00:29:31.140 --> 00:29:34.500
How about I don't think I've ever written a Wallace operator, for example, sorry, you're saying


00:29:34.500 --> 00:29:39.540
Yeah, I actually, I actually took down a talk Python website or the train website, one of them


00:29:39.540 --> 00:29:45.300
with the walrus operator, because I put the walrus operator in a utility script that's not actually


00:29:45.300 --> 00:29:49.460
used by the site, but the site scans all the files trying to figure out where the


00:29:49.460 --> 00:29:54.460
handlers, the view methods are, and it killed it because I forgot that this is


00:29:54.460 --> 00:29:59.620
way back when it was still on 3.7. So that was my first really, oh my gosh. But yeah,


00:29:59.620 --> 00:30:03.420
now I use it. It's good. Alright, so I want to talk about something that I've


00:30:03.420 --> 00:30:09.460
actually personally been working on lately. This is a follow-up to a Talk Python


00:30:09.460 --> 00:30:15.780
episode I did where I interviewed Mike Bayer. He came on and did a great job, talked about


00:30:15.780 --> 00:30:22.980
SQLAlchemy 2 and so on. And I mentioned that, you know, just the way that Python's GC is set up


00:30:22.980 --> 00:30:30.980
is it's somewhat hostile to things like ORMs where they have to create a bunch of objects


00:30:30.980 --> 00:30:38.740
and return them to you in one batch. And what do I mean by that? Well, if I'm going to do a query


00:30:38.740 --> 00:30:43.860
and it's going to return a thousand records, like the best case scenario is it has to create a


00:30:43.860 --> 00:30:48.980
thousand classes, SQLAlchemy models, and give them back, right? If I'm asking for them as a list.


00:30:48.980 --> 00:30:56.020
Well, the way the GC in Python works, not the reference counting, but the garbage collector is


00:30:56.020 --> 00:31:03.860
after 700 allocations of container types, classes, dictionaries, lists, etc. that do not get cleaned


00:31:03.860 --> 00:31:08.060
700 surviving over the cleanups over a period of time,


00:31:08.060 --> 00:31:09.900
that's going to trigger a garbage collection.


00:31:09.900 --> 00:31:11.260
And so I said, "Ah, you know, like,


00:31:11.260 --> 00:31:12.760
is there something you could do?


00:31:12.760 --> 00:31:14.260
Is there something we could like kind of think about


00:31:14.260 --> 00:31:15.100
with ORMs?"


00:31:15.100 --> 00:31:17.700
This is not at all specific to SQLAlchemy.


00:31:17.700 --> 00:31:18.540
This just happens.


00:31:18.540 --> 00:31:22.820
I have an example here called "Pythons GC and ORMs"


00:31:22.820 --> 00:31:25.460
as a app and a little conversation on GitHub.


00:31:25.460 --> 00:31:28.420
And I said, "Is there something we maybe can do?


00:31:28.420 --> 00:31:29.540
Or have you guys thought about it?


00:31:29.540 --> 00:31:31.300
'Cause I don't really sure what the answer is."


00:31:31.300 --> 00:31:36.300
and said, "Not so much, sure, but here, check this out."


00:31:36.300 --> 00:31:37.300
So I created this app.


00:31:37.300 --> 00:31:40.180
It creates a thousand records in both a SQLite database


00:31:40.180 --> 00:31:42.300
and a MongoDB database.


00:31:42.300 --> 00:31:44.940
We have like two really different examples.


00:31:44.940 --> 00:31:47.780
And then you run a query that returns 20,000 records.


00:31:47.780 --> 00:31:49.180
It's probably a lot.


00:31:49.180 --> 00:31:52.300
- Just a note, you mean it makes 100,000 records?


00:31:52.300 --> 00:31:53.140
- Yeah, if I didn't say that.


00:31:53.140 --> 00:31:54.660
100,000 records in the database


00:31:54.660 --> 00:31:57.200
and it gets 20,000 of them back, okay?


00:31:57.200 --> 00:31:59.340
It's probably a little extra,


00:31:59.340 --> 00:32:01.340
But for example, if you go to,


00:32:01.340 --> 00:32:07.880
go over to the Talk Python Training site,


00:32:07.880 --> 00:32:09.680
over here we've got a sitemap.


00:32:09.680 --> 00:32:12.320
And in this sitemap,


00:32:12.320 --> 00:32:17.100
there are many, many,


00:32:17.100 --> 00:32:18.860
looking down the page down arrow,


00:32:18.860 --> 00:32:20.140
and you can just barely see it.


00:32:20.140 --> 00:32:22.860
We've got to get like 5,000 records, 6,000 records,


00:32:22.860 --> 00:32:25.980
just to like list out the number of the pages


00:32:25.980 --> 00:32:29.300
that contain transcripts for the sitemap, right?


00:32:29.300 --> 00:32:31.820
So it's not entirely unreasonable


00:32:31.820 --> 00:32:33.340
that you would get a bunch of records back


00:32:33.340 --> 00:32:36.900
and then do something like render a page with it, right?


00:32:36.900 --> 00:32:41.140
Well, under this scenario, if you just run straight Python,


00:32:41.140 --> 00:32:46.140
that single query results in 1,859 garbage collection runs


00:32:46.140 --> 00:32:50.660
just to get one answer back.


00:32:50.660 --> 00:32:51.980
Is that insane?


00:32:51.980 --> 00:32:53.420
- None of which is garbage.


00:32:53.420 --> 00:32:54.700
- Yeah, it's not garbage yet


00:32:54.700 --> 00:32:57.460
because it's just being realized from the database, right?


00:32:57.460 --> 00:33:01.300
Like it hasn't even come into existence all the way yet.


00:33:01.300 --> 00:33:03.180
And it's just like garbage, garbage, garbage, garbage,


00:33:03.180 --> 00:33:04.020
garbage.


00:33:04.020 --> 00:33:07.400
And it takes 900 milliseconds.


00:33:07.400 --> 00:33:10.420
If you go and you tweak it in a way that I described here,


00:33:10.420 --> 00:33:13.060
which you may or may not want to do, but if you did,


00:33:13.060 --> 00:33:15.340
if you tweak the garbage collector,


00:33:15.340 --> 00:33:20.340
it will go from 1,800 collections to 29, 64 times less.


00:33:20.340 --> 00:33:25.860
The speed of the program is 23% faster.


00:33:25.860 --> 00:33:30.580
Okay, but it also uses less memory.


00:33:30.580 --> 00:33:34.180
Okay, less garbage collection.


00:33:34.180 --> 00:33:37.420
Less, a lot less garbage collection.


00:33:37.420 --> 00:33:41.540
And it's not just 1800 versus 29.


00:33:41.540 --> 00:33:47.300
Python has this 100 to 10 to 1 ratio of Gen 0, Gen 1, and Gen 2 collections.


00:33:47.300 --> 00:33:52.100
And Gen 0 collections are pretty cheap because it just touches new memory and looks at it.


00:33:52.100 --> 00:33:55.060
Gen 1 looks at like stuff that's only been inspected once.


00:33:55.060 --> 00:33:58.040
and Gen 2 inspects the entire memory space.


00:33:58.040 --> 00:34:00.060
What to see, right?


00:34:00.060 --> 00:34:02.400
So this one, this one will also trigger,


00:34:02.400 --> 00:34:04.560
what is that?


00:34:04.560 --> 00:34:07.420
- 185.


00:34:07.420 --> 00:34:12.100
- Yeah, 185 Gen 1, so 18 Gen 2s, right?


00:34:12.100 --> 00:34:13.660
So it's not just, oh, there's fewer,


00:34:13.660 --> 00:34:16.260
there's also like this other 29 here,


00:34:16.260 --> 00:34:18.580
this is zero Gen 2 collections, very likely, right?


00:34:18.580 --> 00:34:21.540
So it's not just the number,


00:34:21.540 --> 00:34:24.980
they're also like cheaper than doing that.


00:34:24.980 --> 00:34:27.060
So this is pretty interesting.


00:34:27.060 --> 00:34:28.500
What do you got to do?


00:34:28.500 --> 00:34:32.040
You just say you run less frequently on allocations


00:34:32.040 --> 00:34:34.580
and then leave everything else alone.


00:34:34.580 --> 00:34:37.140
Does it make a lot of sense for absolutely everything?


00:34:37.140 --> 00:34:37.980
Probably not.


00:34:37.980 --> 00:34:40.260
There's probably some scenario with lots of cycles


00:34:40.260 --> 00:34:41.940
that this is a problem.


00:34:41.940 --> 00:34:46.380
But anyway, this is an interesting thing to sort of consider


00:34:46.380 --> 00:34:49.800
if you are doing some kind of API or a website


00:34:49.800 --> 00:34:51.480
or something that queries a lot of data,


00:34:51.480 --> 00:34:54.140
over 700 records, basically.


00:34:54.140 --> 00:34:57.720
you're going to absolutely encourage GC


00:34:57.720 --> 00:35:00.220
when you know it's not garbage, right?


00:35:00.220 --> 00:35:02.260
So I don't know.


00:35:02.260 --> 00:35:03.220
I thought this was interesting.


00:35:03.220 --> 00:35:04.760
I'll put it out there for people to play with


00:35:04.760 --> 00:35:07.620
and get some feedback.


00:35:07.620 --> 00:35:10.060
Should be fun to hear about it.


00:35:10.060 --> 00:35:11.820
- I think this is very interesting.


00:35:11.820 --> 00:35:16.120
And I'm going to, I plan on playing


00:35:16.120 --> 00:35:17.620
with the garbage collection myself.


00:35:17.620 --> 00:35:20.300
So I'm glad you have this little sample app thing up


00:35:20.300 --> 00:35:22.820
to start playing with it.


00:35:22.820 --> 00:35:25.560
One of the things that you can do that a lot of people


00:35:25.560 --> 00:35:30.460
don't mess with too much is not slowing down the frequency,


00:35:30.460 --> 00:35:35.380
but you can disable it and enable it.


00:35:35.380 --> 00:35:36.860
And I'm not sure--


00:35:36.860 --> 00:35:39.400
I'd like to play with that a little bit more to see if you


00:35:39.400 --> 00:35:41.740
can kind of kick it off or something like that, because--


00:35:41.740 --> 00:35:44.900
>>You can disable it, and you can call GC collect


00:35:44.900 --> 00:35:45.740
if you need to.


00:35:45.740 --> 00:35:46.860
So it's there.


00:35:46.860 --> 00:35:48.660
I'm not sure if it makes sense to do it,


00:35:48.660 --> 00:35:52.500
but the switches are there.


00:35:52.500 --> 00:35:54.060
- Yeah, I mean, there's times where,


00:35:54.060 --> 00:35:55.840
I mean, you're not gonna get real time with Python,


00:35:55.840 --> 00:35:59.840
but you can get, there's times where you know


00:35:59.840 --> 00:36:01.520
that you're not doing anything else,


00:36:01.520 --> 00:36:02.660
so garbage collection's fine.


00:36:02.660 --> 00:36:04.620
And there's times where you're doing an event


00:36:04.620 --> 00:36:07.740
and you really wanna get done with this as fast as possible.


00:36:07.740 --> 00:36:10.100
So it might make sense to turn off GC.


00:36:10.100 --> 00:36:13.500
- Sure, and for people who are not super focused on this,


00:36:13.500 --> 00:36:14.760
turning off garbage collection


00:36:14.760 --> 00:36:16.780
or altering garbage collection


00:36:16.780 --> 00:36:20.320
only affects a very small portion of Python's memory,


00:36:20.320 --> 00:36:24.200
because the primary way is reference counting.


00:36:24.200 --> 00:36:26.120
So reference counting, things up referring to it,


00:36:26.120 --> 00:36:27.080
it goes away.


00:36:27.080 --> 00:36:29.320
Only in the case where there are cycles


00:36:29.320 --> 00:36:31.480
does GC even apply, right?


00:36:31.480 --> 00:36:32.320
So that's actually,


00:36:32.320 --> 00:36:34.700
unless you've got really interesting algorithms


00:36:34.700 --> 00:36:37.800
that are super focused on that kind of stuff,


00:36:37.800 --> 00:36:39.440
you know, you probably don't even have cycles


00:36:39.440 --> 00:36:40.640
or very rarely do you.


00:36:40.640 --> 00:36:42.440
- Yeah, interesting.


00:36:42.440 --> 00:36:44.600
- It's not a one size fits all solution,


00:36:44.600 --> 00:36:46.300
but where it does fit,


00:36:46.300 --> 00:36:48.320
it's a fairly simple thing to do


00:36:48.320 --> 00:36:50.160
that really makes a heck of a difference.


00:36:50.160 --> 00:36:51.980
- Yeah, it's quite interesting.


00:36:51.980 --> 00:36:55.300
So my musings was, well, maybe someday Python


00:36:55.300 --> 00:36:58.180
will have an adaptive GC where it runs


00:36:58.180 --> 00:36:59.660
a certain number of times and says,


00:36:59.660 --> 00:37:02.640
oh, I ran, but I didn't actually find any garbage,


00:37:02.640 --> 00:37:05.900
any cycles, so let me back off that threshold


00:37:05.900 --> 00:37:07.340
by a factor or two.


00:37:07.340 --> 00:37:08.500
And then I didn't find any garbage again,


00:37:08.500 --> 00:37:09.340
so I'll back it off.


00:37:09.340 --> 00:37:10.520
And then I'll go, look, I found a bunch,


00:37:10.520 --> 00:37:12.280
so now we gotta start doing this more frequently.


00:37:12.280 --> 00:37:15.840
And I could see like an adaptive garbage collector


00:37:15.840 --> 00:37:18.400
turning these numbers, but until then,


00:37:18.400 --> 00:37:19.440
I just cranked it up.


00:37:19.440 --> 00:37:20.440
Yeah.


00:37:20.440 --> 00:37:21.440
Interesting.


00:37:21.440 --> 00:37:22.440
All right.


00:37:22.440 --> 00:37:23.440
Yeah.


00:37:23.440 --> 00:37:28.440
Kim, you want to take us out of here for our main topics?


00:37:28.440 --> 00:37:29.720
Sure.


00:37:29.720 --> 00:37:34.880
The other topic I was going to talk about is a tool called Docker Slim, which basically


00:37:34.880 --> 00:37:35.880
is-- It already sounds good.


00:37:35.880 --> 00:37:38.880
I don't know what it does, but-- I'm already in.


00:37:38.880 --> 00:37:41.880
I want my Docker to be slim.


00:37:41.880 --> 00:37:42.880
Let's do it.


00:37:42.880 --> 00:37:43.880
Yeah.


00:37:43.880 --> 00:37:48.360
It's effectively, as far as I can tell, not quite magic, but it certainly seems like it.


00:37:48.360 --> 00:37:50.660
I use Docker quite extensively at work,


00:37:50.660 --> 00:37:53.080
and because I use a fair amount of it at work,


00:37:53.080 --> 00:37:55.400
I started using it for a lot of personal stuff as well,


00:37:55.400 --> 00:37:57.880
and to websites I deploy in my own writing.


00:37:57.880 --> 00:37:59.280
Little things running my own systems


00:37:59.280 --> 00:38:01.320
are all in Docker containers.


00:38:01.320 --> 00:38:04.100
And unless you take a lot of care about it,


00:38:04.100 --> 00:38:06.280
your Docker images can end up quite large.


00:38:06.280 --> 00:38:09.360
If you start with just Python in an Ubuntu base,


00:38:09.360 --> 00:38:10.400
for example, you're probably looking at


00:38:10.400 --> 00:38:14.560
about a gig of Docker image before you get anything done.


00:38:14.560 --> 00:38:16.260
Now, the way Docker works,


00:38:16.260 --> 00:38:17.780
unless you have just one of those things,


00:38:17.780 --> 00:38:18.620
if you've got more than one,


00:38:18.620 --> 00:38:20.540
you start to benefit from shared layers.


00:38:20.540 --> 00:38:22.300
So you're not having a gig and another gig


00:38:22.300 --> 00:38:23.140
and another gig, et cetera,


00:38:23.140 --> 00:38:25.260
but still it all kind of adds up.


00:38:25.260 --> 00:38:27.620
Docker slim is a tool to basically look


00:38:27.620 --> 00:38:30.460
at your existing images, do some analysis


00:38:30.460 --> 00:38:32.140
and give you back a much smaller


00:38:32.140 --> 00:38:35.640
and in many ways, much more secure image.


00:38:35.640 --> 00:38:38.440
I have run this, I read earlier today,


00:38:38.440 --> 00:38:40.740
just to kind of check that I wasn't misremembering


00:38:40.740 --> 00:38:42.140
from the last time I used it.


00:38:42.140 --> 00:38:44.140
And I fed it an image I had,


00:38:44.140 --> 00:38:47.700
which was an incredibly simple, small little flask API


00:38:47.700 --> 00:38:51.040
app I had written. And it would had one job it basically


00:38:51.040 --> 00:38:53.360
whenever you send anything to an endpoint, it printed out what


00:38:53.360 --> 00:38:56.960
that was. I forget exactly why I needed that. I think I was


00:38:56.960 --> 00:39:00.000
having trouble figuring out some suppliers that it wasn't


00:39:00.000 --> 00:39:03.280
documented how some suppliers waybook was going to work. So


00:39:03.280 --> 00:39:05.340
basically, I set this up and I said, Talk to me and then look


00:39:05.340 --> 00:39:08.120
at what it said. But exactly. So I've noticed


00:39:08.120 --> 00:39:12.000
you better than trusting their outdated, crappy, inconsistent


00:39:12.000 --> 00:39:14.520
documentation is just alright, why don't you just call it?


00:39:14.640 --> 00:39:16.800
We'll just print out the JSON document.


00:39:16.800 --> 00:39:17.640
- Well, exactly.


00:39:17.640 --> 00:39:19.000
- And then we'll go from there.


00:39:19.000 --> 00:39:19.840
Yeah.


00:39:19.840 --> 00:39:20.680
- So yeah, as a side note,


00:39:20.680 --> 00:39:21.880
that was quite an easy thing to do,


00:39:21.880 --> 00:39:26.240
but that was, I just put that into a Ubuntu-based container


00:39:26.240 --> 00:39:29.320
running, I forget exactly what,


00:39:29.320 --> 00:39:31.560
presumably I was using FastAPI.


00:39:31.560 --> 00:39:34.160
So it would have been Python and Ubuntu and FastAPI


00:39:34.160 --> 00:39:35.000
and et cetera.


00:39:35.000 --> 00:39:37.480
And that was about a gig of image.


00:39:37.480 --> 00:39:40.200
I fed that to Docker slim and I ended up with 48 megs.


00:39:40.200 --> 00:39:42.680
And it still worked.


00:39:42.680 --> 00:39:44.200
It did everything it was supposed to do.


00:39:44.200 --> 00:39:46.340
Granted, I fed the simplest thing I had.


00:39:46.340 --> 00:39:48.620
I mean, it had one endpoint and so forth.


00:39:48.620 --> 00:39:49.460
I have--


00:39:49.460 --> 00:39:50.780
- There's a lot of dependencies.


00:39:50.780 --> 00:39:53.020
There's Python, there's Flask,


00:39:53.020 --> 00:39:55.260
maybe there's even microSD or something running there,


00:39:55.260 --> 00:39:57.300
who knows, but yeah.


00:39:57.300 --> 00:39:58.460
- Well, exactly.


00:39:58.460 --> 00:39:59.980
What it has done is it's closed down


00:39:59.980 --> 00:40:02.340
all sorts of other angles of attack,


00:40:02.340 --> 00:40:03.420
makes it sound a bit dramatic,


00:40:03.420 --> 00:40:05.420
but all sorts of ways that you could interface


00:40:05.420 --> 00:40:07.500
with the container that you don't necessarily need.


00:40:07.500 --> 00:40:09.140
It no longer has, for example,


00:40:09.140 --> 00:40:12.260
it bash is no longer available.


00:40:12.260 --> 00:40:13.740
You can't run it in interactive mode


00:40:13.740 --> 00:40:17.700
and talk to it, which is not necessarily


00:40:17.700 --> 00:40:20.020
a 100% positive thing, it makes debugging a bit harder,


00:40:20.020 --> 00:40:22.600
but they do have some solutions for how you can do that


00:40:22.600 --> 00:40:24.960
with side containers and talk to it in other ways


00:40:24.960 --> 00:40:26.260
and the like.


00:40:26.260 --> 00:40:29.220
And if you go through their documentation,


00:40:29.220 --> 00:40:31.360
effectively, they're doing all the security stuff


00:40:31.360 --> 00:40:33.260
and the app armoring stuff and all sorts of things


00:40:33.260 --> 00:40:34.220
that I know are important,


00:40:34.220 --> 00:40:36.420
but I don't know enough about to do right.


00:40:36.420 --> 00:40:38.160
I don't trust myself to do those things correctly.


00:40:38.160 --> 00:40:40.220
I can basically follow someone's suggestions,


00:40:40.220 --> 00:40:41.500
but I have absolutely no way of knowing


00:40:41.500 --> 00:40:43.420
if the suggestions I'm following are valid.


00:40:43.420 --> 00:40:44.980
I'm not immersed enough in this world


00:40:44.980 --> 00:40:46.220
to know what the best thing is to do.


00:40:46.220 --> 00:40:48.740
So I'm much happier to have somebody come along and say,


00:40:48.740 --> 00:40:50.940
we've written this tool, we get this stuff.


00:40:50.940 --> 00:40:54.620
We'll do the best we can to make it more secure.


00:40:54.620 --> 00:40:56.060
Even if it isn't 100% secure,


00:40:56.060 --> 00:40:58.500
it's far better than I was going to achieve my own.


00:40:58.500 --> 00:41:04.300
And I haven't used it enough to get a 100% recommendation


00:41:04.300 --> 00:41:07.060
that this will fit every use case.


00:41:07.060 --> 00:41:09.100
I'm sure like every tool is there's things that does well,


00:41:09.100 --> 00:41:10.140
there's things that doesn't do well,


00:41:10.140 --> 00:41:13.300
there's some use cases where it's maybe not so suited.


00:41:13.300 --> 00:41:16.360
but just from a little bit of experimentation with it,


00:41:16.360 --> 00:41:18.100
it looks like something I'm gonna be inserting


00:41:18.100 --> 00:41:19.680
into my tool chain where I can,


00:41:19.680 --> 00:41:22.720
because the smaller the images are, the better, really.


00:41:22.720 --> 00:41:24.000
Especially if we're all working from home,


00:41:24.000 --> 00:41:26.720
we're pulling these things down from servers


00:41:26.720 --> 00:41:30.280
that aren't actually in the building that you're in anymore.


00:41:30.280 --> 00:41:32.560
- And if you're doing continuous deployment,


00:41:32.560 --> 00:41:35.200
which means pushing those actual images,


00:41:35.200 --> 00:41:38.680
then you wanna go that way. - Well, exactly, yes.


00:41:38.680 --> 00:41:40.000
- Yeah, cool, very nice.


00:41:40.000 --> 00:41:42.600
- Yeah, one of the things that Docker's used for,


00:41:42.600 --> 00:41:45.200
I think a lot of web people don't think about


00:41:45.200 --> 00:41:47.020
is cross compiling.


00:41:47.020 --> 00:41:50.220
That's one of the places where Docker shows up


00:41:50.220 --> 00:41:52.560
and it's one of the places I use it


00:41:52.560 --> 00:41:56.120
is to compile on a machine that I don't have access to.


00:41:56.120 --> 00:41:57.780
So I can have a Docker image,


00:41:57.780 --> 00:41:59.440
like I can have a Windows machine


00:41:59.440 --> 00:42:01.680
with a Linux Docker image or something.


00:42:01.680 --> 00:42:03.360
And I can do compiling in there.


00:42:03.360 --> 00:42:06.580
So slimming that down speeds up my compiles


00:42:06.580 --> 00:42:08.440
or I conceptually would.


00:42:08.440 --> 00:42:11.540
So I think this is something that definitely to try


00:42:11.540 --> 00:42:13.260
if you're using that.


00:42:13.260 --> 00:42:14.580
- Exactly.


00:42:14.580 --> 00:42:16.740
You've reminded me of in a similar vein,


00:42:16.740 --> 00:42:20.740
Docker is the basis of our continuous integration systems.


00:42:20.740 --> 00:42:25.300
The ultimate end result is built inside a Docker container


00:42:25.300 --> 00:42:26.740
with all the bits we need.


00:42:26.740 --> 00:42:29.140
That can take quite a while because it can be quite large.


00:42:29.140 --> 00:42:30.540
You can slim that down as well.


00:42:30.540 --> 00:42:32.900
The faster you'll see AI is the better for you already.


00:42:32.900 --> 00:42:34.620
- Yeah, always.


00:42:34.620 --> 00:42:35.580
- Yeah, absolutely.


00:42:35.580 --> 00:42:41.140
All right, well, Brian, I think that might be it.


00:42:41.140 --> 00:42:42.040
Time for some extras.


00:42:42.040 --> 00:42:43.440
Oh, I do want to do a quick follow-up.


00:42:43.440 --> 00:42:45.440
I thought these were extras, but they're actually not.


00:42:45.440 --> 00:42:50.120
They're things that I do want to point out really quick.


00:42:50.120 --> 00:42:51.920
I actually gave a talk on this whole memory thing,


00:42:51.920 --> 00:42:55.240
if that GC conversation sounds interesting to you,


00:42:55.240 --> 00:42:56.980
over at the Python web conferences here.


00:42:56.980 --> 00:42:58.100
So people can check that out


00:42:58.100 --> 00:43:00.120
and also have a talk Python class


00:43:00.120 --> 00:43:02.000
that like dives into a whole bunch of this stuff.


00:43:02.000 --> 00:43:02.840
- Okay. - Nice.


00:43:02.840 --> 00:43:05.940
- I'm going to include that in the before thing.


00:43:05.940 --> 00:43:06.840
Now we're at the extras.


00:43:06.840 --> 00:43:07.680
Let's talk about them.


00:43:07.680 --> 00:43:09.020
What do you got?


00:43:09.020 --> 00:43:11.340
The only thing, one of the things I wanna shout out


00:43:11.340 --> 00:43:16.340
is to everybody that supported the pytest book.


00:43:16.340 --> 00:43:21.740
So at Pragmatic, if you just go to the main page,


00:43:21.740 --> 00:43:24.940
there is a best sellers link


00:43:24.940 --> 00:43:30.340
that has had Python testing with pytest on it


00:43:30.340 --> 00:43:33.580
for many weeks now in the top six.


00:43:33.580 --> 00:43:35.820
And I just wanted to thank everybody


00:43:35.820 --> 00:43:39.340
that supported the book and helped the success of this.


00:43:39.340 --> 00:43:43.060
Also the feedback that I got of the technical reviewers


00:43:43.060 --> 00:43:44.980
and plus many other people going through


00:43:44.980 --> 00:43:47.640
and submitting a RADA is gonna make this


00:43:47.640 --> 00:43:49.900
a really solid book and I'm really just happy


00:43:49.900 --> 00:43:52.700
to be part of a community to put this together, so thanks.


00:43:52.700 --> 00:43:54.620
- Yeah, congratulations, that's awesome.


00:43:54.620 --> 00:43:56.640
Kim, you got anything actually


00:43:56.640 --> 00:43:58.280
you wanna throw out there?


00:43:58.280 --> 00:44:00.780
- A couple of small things I was hoping to mention


00:44:00.780 --> 00:44:02.540
if we had the time.


00:44:02.540 --> 00:44:04.880
See, we've actually got Ness with DNS up on screen.


00:44:04.880 --> 00:44:06.240
this is a good place to start.


00:44:06.240 --> 00:44:08.520
I just wanted to mention this little website,


00:44:08.520 --> 00:44:11.520
messwithdns.net, which Julia Evans,


00:44:11.520 --> 00:44:14.160
who on Twitter is Bork,


00:44:14.160 --> 00:44:17.760
and produces a variety of excellent webzines and so forth.


00:44:17.760 --> 00:44:21.200
I think you've actually, you've discussed her Git


00:44:21.200 --> 00:44:22.640
learning webzines before.


00:44:22.640 --> 00:44:25.440
That's the one, yeah.


00:44:25.440 --> 00:44:29.100
And I think there's an HR-friendly one whose name


00:44:29.100 --> 00:44:31.000
I can't remember, 'cause we all remember that.


00:44:31.000 --> 00:44:32.640
The memorable one, yeah, exactly.


00:44:33.600 --> 00:44:36.400
She released something I got, yeah.


00:44:36.400 --> 00:44:39.040
She released messwithdns.net recently


00:44:39.040 --> 00:44:41.280
as effectively a way to play with DNS


00:44:41.280 --> 00:44:43.560
without breaking your actual website,


00:44:43.560 --> 00:44:46.320
which isn't something I'd ever thought to look for,


00:44:46.320 --> 00:44:49.360
but now that it's around, it's actually a brilliant idea.


00:44:49.360 --> 00:44:53.080
There are some hard to understand things based into DNS.


00:44:53.080 --> 00:44:55.000
What is a record in a CNAME?


00:44:55.000 --> 00:44:58.060
And what, you know, if your TTL is a three-digit number


00:44:58.060 --> 00:45:00.200
versus a five-digit number, what's the difference?


00:45:00.200 --> 00:45:01.680
Or for that matter, what does TTL mean?


00:45:01.680 --> 00:45:04.180
It's not necessarily an explainer for all these things,


00:45:04.180 --> 00:45:05.940
but it is a way to make these settings


00:45:05.940 --> 00:45:07.260
and see what they do


00:45:07.260 --> 00:45:09.700
without actually breaking a real website.


00:45:09.700 --> 00:45:13.180
So effectively, she's spun up a sub domain


00:45:13.180 --> 00:45:14.380
with a assigned name.


00:45:14.380 --> 00:45:18.200
This one I happen to be on is goblin61messwithdns.com.


00:45:18.200 --> 00:45:21.420
The worst you can do is break goblin61.messwithdns.com


00:45:21.420 --> 00:45:22.460
and that will then just go away


00:45:22.460 --> 00:45:24.360
for the next person who comes along.


00:45:24.360 --> 00:45:26.960
So it's actually a really smart, really clever idea.


00:45:26.960 --> 00:45:28.540
Typical to Julia's thoroughness,


00:45:28.540 --> 00:45:31.660
she's got a series of experimental suggestions on the side.


00:45:31.660 --> 00:45:33.820
Here are some things you can try, here are some tutorials,


00:45:33.820 --> 00:45:35.580
how about making a CNAME?


00:45:35.580 --> 00:45:37.260
Or here are some weird things you can try.


00:45:37.260 --> 00:45:39.140
What happens if you have a very long TTL?


00:45:39.140 --> 00:45:41.860
Or you convince three different DNS servers


00:45:41.860 --> 00:45:44.340
that your subdomain has three different IPs.


00:45:44.340 --> 00:45:45.820
Why you would do that is a mystery to me,


00:45:45.820 --> 00:45:47.660
but what would happen if you did


00:45:47.660 --> 00:45:49.980
is something you can explore with this site


00:45:49.980 --> 00:45:51.580
without actually breaking your real website.


00:45:51.580 --> 00:45:53.860
And this seems like a very useful learning tool.


00:45:53.860 --> 00:45:54.900
- Yeah, absolutely.


00:45:54.900 --> 00:45:57.760
Cool, I love it, that's fantastic.


00:45:59.940 --> 00:46:02.500
So it would, one other, well, two other small things


00:46:02.500 --> 00:46:03.420
I just wanted to mention.


00:46:03.420 --> 00:46:05.720
One, just because I use it all the time


00:46:05.720 --> 00:46:08.020
and I don't know how common knowledge it is.


00:46:08.020 --> 00:46:09.720
It is possible in Python,


00:46:09.720 --> 00:46:12.260
and I don't have a webpage to open for this,


00:46:12.260 --> 00:46:14.060
to run a small little web server.


00:46:14.060 --> 00:46:17.300
If you do python-m, what's it?


00:46:17.300 --> 00:46:21.660
Http.serve or .server, I've gone blank on which it is now,


00:46:21.660 --> 00:46:23.780
to be honest, .serve, I think.


00:46:23.780 --> 00:46:25.100
- Oh, .server.


00:46:25.100 --> 00:46:26.340
- Yeah, I'm reading your notes.


00:46:26.340 --> 00:46:27.180
I don't actually know.


00:46:27.180 --> 00:46:29.560
- I'm just going back to the notes to have a look myself.


00:46:29.560 --> 00:46:31.960
that effectively fires up a web server


00:46:31.960 --> 00:46:33.600
in the directory you opened it in


00:46:33.600 --> 00:46:35.240
and serves up the files that are there


00:46:35.240 --> 00:46:37.480
or the subdirectories that are in there.


00:46:37.480 --> 00:46:39.360
There's no security, there's no attractiveness,


00:46:39.360 --> 00:46:40.940
there's no styling, there's no anything of the sort.


00:46:40.940 --> 00:46:42.320
You wouldn't serve this to the public.


00:46:42.320 --> 00:46:44.680
But if you wanted to get a file off the machine,


00:46:44.680 --> 00:46:46.680
and I do this quite a lot to get files onto my phone,


00:46:46.680 --> 00:46:50.240
for example, firing up a web server there and then


00:46:50.240 --> 00:46:53.480
and just pointing by that script or your own,


00:46:53.480 --> 00:46:57.520
just to send your browser to the local host


00:46:57.520 --> 00:46:58.600
with the port you gave it


00:46:58.600 --> 00:46:59.800
and just download the files from there.


00:46:59.800 --> 00:47:02.240
It's a useful thing to be able to do.


00:47:02.240 --> 00:47:03.080
- Yeah, that's a cool trick.


00:47:03.080 --> 00:47:04.880
- It's a bit of deep trip.


00:47:04.880 --> 00:47:06.220
- Basically, yeah.


00:47:06.220 --> 00:47:07.880
- Exactly.


00:47:07.880 --> 00:47:10.240
And then the final little extra I just wanted to talk about


00:47:10.240 --> 00:47:12.960
and this is a little more tongue in cheek somewhat.


00:47:12.960 --> 00:47:15.180
In both last week's Python Bytes


00:47:15.180 --> 00:47:16.960
and on recent Talk Python episodes,


00:47:16.960 --> 00:47:18.380
you have been speaking a little bit


00:47:18.380 --> 00:47:20.960
about different ways of doing Git.


00:47:20.960 --> 00:47:23.640
You were discussing doing all your Git on the CLI.


00:47:23.640 --> 00:47:27.280
And I think one of your audience members


00:47:27.280 --> 00:47:28.720
that the last Python byte suggested,


00:47:28.720 --> 00:47:30.800
the way they do Git is just mash all the buttons


00:47:30.800 --> 00:47:32.200
they can find in VS Code.


00:47:32.200 --> 00:47:35.840
There is, I just want to put out there,


00:47:35.840 --> 00:47:37.840
there is a middle ground that you could be looking at.


00:47:37.840 --> 00:47:41.560
There's a tool called Magit, M-A-G-I-T,


00:47:41.560 --> 00:47:45.120
which is effectively, if you're an Emacs user


00:47:45.120 --> 00:47:46.120
and you don't know Magit,


00:47:46.120 --> 00:47:48.120
you should change that immediately.


00:47:48.120 --> 00:47:52.160
Magit is effectively a brilliant way of doing,


00:47:52.160 --> 00:47:53.480
to me, a brilliant, indispensable way


00:47:53.480 --> 00:47:55.160
of doing Git inside Emacs.


00:47:55.160 --> 00:47:56.960
Granted, it doesn't mean you should learn Emacs,


00:47:56.960 --> 00:47:59.340
but in just a couple of short years after that,


00:47:59.340 --> 00:48:01.040
you should be an expert at,


00:48:01.040 --> 00:48:03.160
you should find Magit indispensable.


00:48:03.160 --> 00:48:04.520
It'll take you a couple of years to learn Emacs,


00:48:04.520 --> 00:48:05.840
I'm not disputing that,


00:48:05.840 --> 00:48:08.080
but once you've got the Emacs down,


00:48:08.080 --> 00:48:09.800
Magit really is an excellent option


00:48:09.800 --> 00:48:11.320
to look at doing your Git with.


00:48:11.320 --> 00:48:12.960
So if you're tired of doing it on the CLI,


00:48:12.960 --> 00:48:14.400
just set some years aside,


00:48:14.400 --> 00:48:16.240
learn yourself some Emacs,


00:48:16.240 --> 00:48:18.000
turn to Magit and then wonder


00:48:18.000 --> 00:48:19.800
how you ever did anything else.


00:48:19.800 --> 00:48:21.600
- Set some years aside.


00:48:25.760 --> 00:48:27.200
I don't think that's fair to Emacs,


00:48:27.200 --> 00:48:30.960
but just a little bit of a too much.


00:48:30.960 --> 00:48:33.440
- I'll concede Emacs is a much longer learning curve than VI,


00:48:33.440 --> 00:48:35.560
but it's not here, Scott.


00:48:35.560 --> 00:48:38.680
And I say this, I mean, yeah.


00:48:38.680 --> 00:48:40.600
- Yeah, and Mario and the audience is taking credit


00:48:40.600 --> 00:48:42.980
for the VS Code button matching.


00:48:42.980 --> 00:48:45.080
- Right.


00:48:45.080 --> 00:48:47.000
- Right on.


00:48:47.000 --> 00:48:48.600
Cool, yeah, that's a great recommendation.


00:48:48.600 --> 00:48:54.000
- I should just point out in terms of it being unfair


00:48:54.000 --> 00:48:56.000
I've been using it for more than 20 years


00:48:56.000 --> 00:48:58.040
and I find it almost impossible to use anything else,


00:48:58.040 --> 00:48:59.720
but I'm sure it didn't take me years to learn.


00:48:59.720 --> 00:49:01.080
It's just been a long time.


00:49:01.080 --> 00:49:03.320
- That's right.


00:49:03.320 --> 00:49:07.080
Cool, all right, I got a few throw out there.


00:49:07.080 --> 00:49:08.760
Actually just one.


00:49:08.760 --> 00:49:11.580
I made a comment, I think on the last show, Brian,


00:49:11.580 --> 00:49:14.760
about using emojis in my code.


00:49:14.760 --> 00:49:15.600
- Yeah.


00:49:15.600 --> 00:49:16.480
- I want to bring that example up.


00:49:16.480 --> 00:49:19.820
So here's like a little CMS thing that I got going on.


00:49:19.820 --> 00:49:21.880
And if you return a collection,


00:49:21.880 --> 00:49:23.920
like themes are represented by these little tags


00:49:23.920 --> 00:49:25.720
and if you return a collection,


00:49:25.720 --> 00:49:29.040
the comment has a list of emojis.


00:49:29.040 --> 00:49:31.000
If you return, if they're just like processing


00:49:31.000 --> 00:49:34.360
a single thing, you get that emoji.


00:49:34.360 --> 00:49:38.320
For pages, you get a list of page emojis and so on.


00:49:38.320 --> 00:49:41.600
Anyway, that's what I had in mind when I talked about that.


00:49:41.600 --> 00:49:43.000
- That's pretty cool use.


00:49:43.000 --> 00:49:44.000
- Yeah, you can sort of just scan through,


00:49:44.000 --> 00:49:44.920
oh look, there's a list of these.


00:49:44.920 --> 00:49:46.440
This must be doing a bunch of stuff.


00:49:46.440 --> 00:49:47.800
Or I don't know, I could probably come up with something


00:49:47.800 --> 00:49:50.240
like a modifying, I'm gonna change a theme


00:49:50.240 --> 00:49:53.320
versus read a theme or something like that.


00:49:53.320 --> 00:49:54.440
- Yeah. - Anyway.


00:49:54.440 --> 00:49:57.400
Well, that brings us to the laughs


00:49:57.400 --> 00:49:59.560
and I hope you all enjoy schadenfreude


00:49:59.560 --> 00:50:02.000
because it's bad this time.


00:50:02.000 --> 00:50:07.400
Thank you, Love4J.


00:50:07.400 --> 00:50:10.000
Okay, so let's see.


00:50:10.000 --> 00:50:11.320
First of all, this is not schadenfreude.


00:50:11.320 --> 00:50:12.880
This is just something about the cookies.


00:50:12.880 --> 00:50:15.960
My daughter yesterday gave me this candle.


00:50:15.960 --> 00:50:16.800
It has a website.


00:50:16.800 --> 00:50:19.040
It says, "We use cookies to improve our performance."


00:50:19.040 --> 00:50:21.480
And then me, same, I just eat cookies.


00:50:21.480 --> 00:50:24.520
I thought that was really funny for like a tech candle


00:50:24.520 --> 00:50:25.360
that she's doing.


00:50:25.360 --> 00:50:27.800
- It should be a tin of cookies though.


00:50:27.800 --> 00:50:29.240
- I know it should.


00:50:29.240 --> 00:50:30.080
Absolutely should.


00:50:30.080 --> 00:50:32.680
At least it should smell like cookies.


00:50:32.680 --> 00:50:35.200
It says scented, I have no idea what scent it is,


00:50:35.200 --> 00:50:36.040
but it better smell like cookies.


00:50:36.040 --> 00:50:37.080
- Does it smell like websites?


00:50:37.080 --> 00:50:37.920
Maybe.


00:50:37.920 --> 00:50:38.740
- Maybe.


00:50:38.740 --> 00:50:40.280
And then I just want to point out more practically,


00:50:40.280 --> 00:50:42.400
I have this add-on you can get for all the browsers.


00:50:42.400 --> 00:50:43.400
I don't care about cookies,


00:50:43.400 --> 00:50:45.600
and if it sees one of those cookie warnings,


00:50:45.600 --> 00:50:47.480
it'll try to click it and just accept it.


00:50:47.480 --> 00:50:48.880
- Oh, this is indispensable.


00:50:48.880 --> 00:50:49.720
That's brilliant.


00:50:49.720 --> 00:50:54.720
- And then Brian Skin starts us off with the log4j stuff.


00:50:54.720 --> 00:51:01.400
So if you remember, if you're aware, log4j,


00:51:01.400 --> 00:51:05.120
the problem with log4j is if you try to log a piece of text,


00:51:05.120 --> 00:51:10.120
even as an argument, if that text has J and D I colon L A D


00:51:10.120 --> 00:51:15.880
P L A L D A P colon slash slash to some Java library,


00:51:17.320 --> 00:51:20.560
instead of logging it, it will execute that Java stuff.


00:51:20.560 --> 00:51:22.460
Even if it's remotely on the internet,


00:51:22.460 --> 00:51:25.840
it'll output the result of that,


00:51:25.840 --> 00:51:28.480
like you're hacked or whatever, right?


00:51:28.480 --> 00:51:31.680
And so we've all heard of the little Bobby tables, right?


00:51:31.680 --> 00:51:33.720
Here's the modern day one.


00:51:33.720 --> 00:51:35.680
Hi, this is your son's school.


00:51:35.680 --> 00:51:37.940
We're having computer trouble.


00:51:37.940 --> 00:51:39.800
Oh dear, did he break something?


00:51:39.800 --> 00:51:41.440
Well, in a way.


00:51:41.440 --> 00:51:43.200
Did you really name your son,


00:51:43.200 --> 00:51:49.360
Curly, you know, dollar curly J and D I colon L D A P colon slash slash evil corp


00:51:49.360 --> 00:51:53.880
Parentheses princess e Bobby. Oh, yes little Bobby Jindy we call him


00:51:53.880 --> 00:52:02.840
No, we've got our servers crypto lock I locked I hope you're happy I hope you've learned to say sometimes you're long for J inputs


00:52:02.840 --> 00:52:08.240
Yeah


00:52:09.920 --> 00:52:15.080
This is gonna go on it'll be the neck it isn't log4j. It'll be something else next year


00:52:15.080 --> 00:52:17.480
Yeah, well, I mean it's been it's been there for 10 years


00:52:17.480 --> 00:52:22.720
It's not a new thing. Unfortunately, yeah, it's actually been a vulnerability. It's just


00:52:22.720 --> 00:52:27.000
Feature


00:52:27.000 --> 00:52:31.800
And Brian helpfully suggests this actually came from log4j


00:52:31.800 --> 00:52:34.000
memes calm


00:52:34.000 --> 00:52:35.920
So we got to go there for a second


00:52:35.920 --> 00:52:37.300
- Well, of course that exists.


00:52:37.300 --> 00:52:40.920
- Of course, and oh my gosh, like look at this picture.


00:52:40.920 --> 00:52:42.840
So Brian, would you describe this person for me


00:52:42.840 --> 00:52:43.680
on the screen?


00:52:43.680 --> 00:52:45.440
There's a person in a sane next to him.


00:52:45.440 --> 00:52:46.280
- Old white guy.


00:52:46.280 --> 00:52:49.920
- To me, he looks like a perfect sort of grandpa


00:52:49.920 --> 00:52:51.480
sort of character, right?


00:52:51.480 --> 00:52:53.520
Getting up there, probably 70.


00:52:53.520 --> 00:52:55.320
You know, nothing wrong with the guy,


00:52:55.320 --> 00:52:58.400
but it says upgrading Log4j three times.


00:52:58.400 --> 00:52:59.560
Wasn't that stressful?


00:52:59.560 --> 00:53:01.360
Dave, 28 years old.


00:53:01.360 --> 00:53:04.080
(laughing)


00:53:04.080 --> 00:53:05.460
What else have we got in here?


00:53:05.460 --> 00:53:06.940
- We've got- - I wish that was outrageously


00:53:06.940 --> 00:53:08.940
funny and not just kind of truish, but yeah.


00:53:08.940 --> 00:53:11.500
- I know, here's like a 1940s looking picture,


00:53:11.500 --> 00:53:13.320
like a dad and some kids hanging around.


00:53:13.320 --> 00:53:16.280
Daddy, what did you do during the great war?


00:53:16.280 --> 00:53:18.700
The Log for Shell incident.


00:53:18.700 --> 00:53:20.280
Let's see.


00:53:20.280 --> 00:53:22.320
There's a few of you going here, like,


00:53:22.320 --> 00:53:26.220
there's the, how many days since such and such accident?


00:53:26.220 --> 00:53:29.160
Zero days without Log for JCVE.


00:53:29.160 --> 00:53:30.500
And there's like Homer running around


00:53:30.500 --> 00:53:33.500
with like a nuclear glowing stick.


00:53:33.500 --> 00:53:35.980
You could just spend some time in this place.


00:53:35.980 --> 00:53:38.880
It's probably unhealthy.


00:53:38.880 --> 00:53:40.980
There's like a grim reaper.


00:53:40.980 --> 00:53:43.580
Just going through technology.


00:53:43.580 --> 00:53:46.740
It has a log for J on the grim reaper, you know.


00:53:46.740 --> 00:53:49.020
Let me see if I can find one more of that.


00:53:49.020 --> 00:53:53.020
There's some really good ones.


00:53:53.020 --> 00:53:54.940
This one is probably good.


00:53:54.940 --> 00:53:56.740
There's a picture of a guy in a tuxedo.


00:53:56.740 --> 00:53:59.020
It says, vendor not vulnerable to log for J,


00:53:59.020 --> 00:54:01.340
but there's a mirror and you see the back of him.


00:54:01.340 --> 00:54:02.740
His clothes are just all gone.


00:54:02.740 --> 00:54:04.540
It says, "Use of EOL."


00:54:04.540 --> 00:54:05.620
- Yuck.


00:54:05.620 --> 00:54:06.540
- Yeah, that one's pretty gross.


00:54:06.540 --> 00:54:08.340
I want to get that off.


00:54:08.340 --> 00:54:11.920
But yeah, these are just fantastic here.


00:54:11.920 --> 00:54:15.260
So anyway, people can check out the memes.


00:54:15.260 --> 00:54:16.460
Thanks, Brian, for sending that in.


00:54:16.460 --> 00:54:17.300
Brian Skin.


00:54:17.300 --> 00:54:20.700
- Yeah, I have to say, I am reminded.


00:54:20.700 --> 00:54:21.620
I did see one the other day.


00:54:21.620 --> 00:54:23.060
I don't know that I could put it up now,


00:54:23.060 --> 00:54:24.620
but it's effectively that,


00:54:24.620 --> 00:54:25.980
I've just seen it in various other memes,


00:54:25.980 --> 00:54:28.740
a chap receiving an award from probably his manager.


00:54:28.740 --> 00:54:31.020
So, you know, me receiving an award from the manager


00:54:31.020 --> 00:54:34.580
for not being vulnerable to the log4j vulnerabilities.


00:54:34.580 --> 00:54:35.500
And the inside thinking,


00:54:35.500 --> 00:54:37.060
let's mainly because I chose not to log in.


00:54:37.060 --> 00:54:38.860
I completely forgot to log anything.


00:54:38.860 --> 00:54:40.100
(laughing)


00:54:40.100 --> 00:54:42.340
- Exactly, that's really good.


00:54:42.340 --> 00:54:43.340
Yeah, here's a tweet.


00:54:43.340 --> 00:54:45.880
Today, Java runs on billions of devices.


00:54:45.880 --> 00:54:47.320
It's not a statement of pride,


00:54:47.320 --> 00:54:48.940
but a statement of pure terror.


00:54:48.940 --> 00:54:51.860
(laughing)


00:54:51.860 --> 00:54:56.380
All right, well, I don't wanna hit on Java too hard,


00:54:56.380 --> 00:54:59.100
but the log4j, I just cannot believe somebody thought


00:54:59.100 --> 00:55:02.140
It's a fantastic idea to execute remote code


00:55:02.140 --> 00:55:04.960
that you cannot escape.


00:55:04.960 --> 00:55:08.060
- From a logging system.


00:55:08.060 --> 00:55:09.140
- Yeah, in a logging system.


00:55:09.140 --> 00:55:11.300
It's just, what did you think you would get?


00:55:11.300 --> 00:55:16.300
So here we are with log4jmemes.com


00:55:16.300 --> 00:55:18.240
if you wanna scroll through it.


00:55:18.240 --> 00:55:22.460
- Let's back up and say somebody thought


00:55:22.460 --> 00:55:24.580
writing an application in Java was a good idea.


00:55:24.580 --> 00:55:25.660
No, sorry.


00:55:25.660 --> 00:55:27.920
(laughing)


00:55:27.920 --> 00:55:30.440
I'll get hate mail for that one.


00:55:30.440 --> 00:55:33.160
So don't mail Brian.


00:55:33.160 --> 00:55:33.920
Don't email Brian.


00:55:33.920 --> 00:55:34.480
He knows.


00:55:34.480 --> 00:55:34.960
He knows.


00:55:34.960 --> 00:55:35.240
All right.


00:55:35.240 --> 00:55:38.280
Well, so Brian, that's it for the year, isn't it?


00:55:38.280 --> 00:55:41.760
I mean, we're going to take a little bit of time off.


00:55:41.760 --> 00:55:42.920
Yeah.


00:55:42.920 --> 00:55:44.400
Some well-deserved time off.


00:55:44.400 --> 00:55:45.880
Yeah, absolutely.


00:55:45.880 --> 00:55:49.160
So thank you everyone for listening.


00:55:49.160 --> 00:55:51.600
Kim, thanks for coming to join us this time.


00:55:51.600 --> 00:55:52.540
Brian, as always.


00:55:52.540 --> 00:55:53.040
Thank you.


00:55:53.040 --> 00:55:55.080
And we'll see everybody next year.


00:55:55.080 --> 00:55:55.900
Yeah.


00:55:55.900 --> 00:55:56.760
Thank you for having me guys.


00:55:56.760 --> 00:55:57.720
That was, that was brilliant.


00:55:57.720 --> 00:55:59.000
- Yeah, you're welcome.


00:55:59.000 --> 00:55:59.840
And if you're out there


00:55:59.840 --> 00:56:01.280
and you still haven't filled out that form


00:56:01.280 --> 00:56:02.760
and given us our feedback,


00:56:02.760 --> 00:56:03.640
let us know.


00:56:03.640 --> 00:56:06.640
The Google Form link is at the top of the show notes.


00:56:06.640 --> 00:56:07.860
All right, bye.

