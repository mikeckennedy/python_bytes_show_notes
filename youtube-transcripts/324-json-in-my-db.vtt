WEBVTT

00:00:00.000 --> 00:00:08.960
>> Hey, Brian. Hey, Erin. Hey, YouTube. Good to have you here. Let's kick off the show.


00:00:08.960 --> 00:00:12.760
For those of you watching live, please put your comments and thoughts in the chat and


00:00:12.760 --> 00:00:15.720
we'll try to make that part of the show. And if you're watching the replay, thanks for


00:00:15.720 --> 00:00:24.360
that as well. All right. Hello, and welcome to Python Bytes, where we deliver Python news


00:00:24.360 --> 00:00:32.760
and headlines directly to your earbuds. This is episode 324, recorded February 21st, 2023.


00:00:32.760 --> 00:00:33.760
I'm Michael Kennedy.


00:00:33.760 --> 00:00:36.040
And I'm Brian Okken.


00:00:36.040 --> 00:00:38.360
And I'm Erin Mullaney.


00:00:38.360 --> 00:00:41.960
And this episode is brought to you by Compiler, a podcast from Red Hat. Tell you more about


00:00:41.960 --> 00:00:47.280
them. Erin, it's awesome to have you on the show. Thanks for joining us.


00:00:47.280 --> 00:00:49.600
Thanks for asking me to be on.


00:00:49.600 --> 00:00:50.840
Yeah, you bet.


00:00:50.840 --> 00:00:51.840
Excited.


00:00:51.840 --> 00:00:55.360
tell folks a bit about yourself before we jump into the topics.


00:00:55.360 --> 00:01:02.240
- Sure. Yeah, I'm Erin Mullaney. I've been a web developer since around the year 2000.


00:01:02.240 --> 00:01:08.920
I currently work at Energy Solutions as a code-based lead on a Django project there,


00:01:08.920 --> 00:01:16.000
which means that I write and review a lot of Django and Python code on a day-to-day


00:01:16.000 --> 00:01:21.360
basis. Energy Solutions, where I work, is an energy consulting company that's mission-driven


00:01:21.360 --> 00:01:26.360
to protect the environment through different energy things.


00:01:26.360 --> 00:01:28.800
To be real, not specific.


00:01:28.800 --> 00:01:30.760
I specifically work on a Django project


00:01:30.760 --> 00:01:35.760
that facilitates energy efficiency programs.


00:01:35.760 --> 00:01:39.620
And energy efficiency is actually a super powerful


00:01:39.620 --> 00:01:43.400
and cost-effective way to combat climate change.


00:01:43.400 --> 00:01:46.720
And that's according to the US Department of Energy.


00:01:46.720 --> 00:01:47.640
- Yeah, that's awesome.


00:01:47.640 --> 00:01:50.200
All the wasted energy and bad insulation


00:01:50.200 --> 00:01:51.560
and other things like that.


00:01:51.560 --> 00:01:52.400
That's really cool.


00:01:52.400 --> 00:01:54.520
That's good work.


00:01:54.520 --> 00:01:57.400
Really quickly before we dive into Brian's item here,


00:01:57.400 --> 00:01:59.400
how are you feeling about Django and the recent changes?


00:01:59.400 --> 00:02:01.480
I feel like it's picked up a lot of momentum lately.


00:02:01.480 --> 00:02:04.640
It's picked up some new features like async stuff.


00:02:04.640 --> 00:02:06.960
Is that exciting for you and your team?


00:02:06.960 --> 00:02:08.560
- Yeah, for sure, it's exciting.


00:02:08.560 --> 00:02:13.480
I am coming from a background where I was actually coding


00:02:13.480 --> 00:02:15.880
in a different web framework for years


00:02:15.880 --> 00:02:17.920
and switched over to Django.


00:02:17.920 --> 00:02:21.800
So I'm just happy to hear that more and more people


00:02:21.800 --> 00:02:25.120
are downloading it and using it.


00:02:25.120 --> 00:02:28.360
So yeah, I just, I want it to stick around.


00:02:28.360 --> 00:02:31.040
Cause I like it.


00:02:31.040 --> 00:02:32.080
- Yeah, absolutely.


00:02:32.080 --> 00:02:34.200
All right, Brian, you want to kick us off here?


00:02:34.200 --> 00:02:35.040
- Sure.


00:02:35.040 --> 00:02:37.640
So this one, first one's coming from Brett Cannon.


00:02:37.640 --> 00:02:39.440
So he wrote an article called


00:02:39.440 --> 00:02:43.340
use toml for .env files question mark.


00:02:43.340 --> 00:02:46.600
And I, there's a, so there's the question at the end


00:02:46.600 --> 00:02:47.800
and we'll talk about that.


00:02:47.800 --> 00:02:50.660
But I just ran across, I mean, I don't know,


00:02:50.660 --> 00:02:53.360
because I'm not a web developer very much,


00:02:53.360 --> 00:02:55.520
I mean, I'm getting more so now,


00:02:55.520 --> 00:03:00.120
but I wasn't really familiar with the .env files


00:03:00.120 --> 00:03:01.840
until just recently.


00:03:01.840 --> 00:03:03.760
And so one of the great things about this article


00:03:03.760 --> 00:03:05.840
is it talks about kind of what these are.


00:03:05.840 --> 00:03:10.360
So what these are often is you've got settings


00:03:10.360 --> 00:03:14.560
for your application.


00:03:14.560 --> 00:03:18.100
And there's an idea of a 12-factor app design,


00:03:18.100 --> 00:03:21.460
which I kind of like read about many years ago


00:03:21.460 --> 00:03:23.200
and forgot about.


00:03:23.200 --> 00:03:26.120
But one of the ideas is you don't wanna like


00:03:26.120 --> 00:03:27.280
have too many differences


00:03:27.280 --> 00:03:28.520
between your development environment


00:03:28.520 --> 00:03:29.800
and your live environment.


00:03:29.800 --> 00:03:30.960
And one of the ways you do this


00:03:30.960 --> 00:03:32.760
is using environmental variables


00:03:32.760 --> 00:03:35.280
to store things like login credentials


00:03:35.280 --> 00:03:36.680
and all that sort of junk.


00:03:36.680 --> 00:03:40.220
And in Python, one of the ways we do that


00:03:40.220 --> 00:03:42.260
is through .env files


00:03:42.260 --> 00:03:47.260
and also through a project called python.env,


00:03:47.260 --> 00:03:51.700
which is used by Pydantic and a lot of other projects.


00:03:51.700 --> 00:03:54.540
And what this does is it allows you


00:03:54.540 --> 00:03:55.420
to have defaults in there.


00:03:55.420 --> 00:03:57.380
So you have, so in your development environment,


00:03:57.380 --> 00:04:00.220
you might have something silly, some silly credentials,


00:04:00.220 --> 00:04:02.940
but then, or, you know, look him up somewhere,


00:04:02.940 --> 00:04:04.700
but then in your live environment,


00:04:04.700 --> 00:04:08.700
those are actually set by the production server


00:04:08.700 --> 00:04:10.720
to set those secrets.


00:04:10.720 --> 00:04:15.720
And so the question really is, what's the format of this?


00:04:15.720 --> 00:04:19.140
So, and I kind of never really thought about it before.


00:04:19.140 --> 00:04:25.100
And basically the problem is it's not defined.


00:04:25.100 --> 00:04:26.940
And it's in--


00:04:26.940 --> 00:04:29.060
- There is a text file that has secrets.


00:04:29.060 --> 00:04:35.220
- Yeah, and it's kind of like Bash-ish files or something.


00:04:35.220 --> 00:04:38.380
It's by the, it's a format that's not formally specified


00:04:38.380 --> 00:04:43.380
and improves over time, according to the Python.inv readme.


00:04:43.380 --> 00:04:48.620
But that's not really, what does that mean?


00:04:48.620 --> 00:04:50.900
It kind of means it's your application


00:04:50.900 --> 00:04:53.200
so that you can define it however you want, right?


00:04:53.200 --> 00:04:55.660
But maybe we should have some standardization.


00:04:55.660 --> 00:04:59.860
So Brett was looking further into this.


00:04:59.860 --> 00:05:03.340
And one of the solutions that Adafruit came up with


00:05:03.340 --> 00:05:06.700
was let's not use .env,


00:05:06.700 --> 00:05:08.660
but actually just do a settings.toml.


00:05:08.660 --> 00:05:09.920
It's used for the same thing,


00:05:09.920 --> 00:05:14.080
to store secrets such as passwords and API keys.


00:05:14.080 --> 00:05:15.780
So they're using toml.


00:05:15.780 --> 00:05:19.500
And then basically kind of when you just do


00:05:19.500 --> 00:05:21.180
a normal simple toml file,


00:05:21.180 --> 00:05:22.980
it looks pretty much like a normal,


00:05:22.980 --> 00:05:25.700
any other .env file that people have used.


00:05:25.700 --> 00:05:30.700
So really that's the question that Brett is posing is,


00:05:30.700 --> 00:05:32.340
can we just standardize on this?


00:05:32.340 --> 00:05:33.540
Why don't we just, you know,


00:05:33.540 --> 00:05:38.500
standardized.env as .toml, as toml format.


00:05:38.500 --> 00:05:40.820
And I think, why not?


00:05:40.820 --> 00:05:43.420
Mostly it'll work for everybody already.


00:05:43.420 --> 00:05:46.660
And then you can do cool things if we did toml.


00:05:46.660 --> 00:05:47.860
You could extend it a bit.


00:05:47.860 --> 00:05:50.780
So like in the VS Code code base,


00:05:50.780 --> 00:05:53.340
they're talking about like using categories


00:05:53.340 --> 00:05:55.900
and specific table to hit.


00:05:55.900 --> 00:05:57.580
You'd have multiple tables in there


00:05:57.580 --> 00:05:58.900
instead of just the global one.


00:05:58.900 --> 00:06:01.700
But what do you think?


00:06:01.700 --> 00:06:02.620
- I think that's a cool idea.


00:06:02.620 --> 00:06:05.260
I like the ability to have multiple things like test


00:06:05.260 --> 00:06:08.020
and maybe dev or like a connection string


00:06:08.020 --> 00:06:11.020
to a database or something.


00:06:11.020 --> 00:06:13.940
It wouldn't make me sad if it was JSON as well.


00:06:13.940 --> 00:06:19.500
I know Aaron is going to make a cameo for JSON later.


00:06:19.500 --> 00:06:22.940
But Toml seems to be winning on these things.


00:06:22.940 --> 00:06:24.740
And I would be OK with Toml as well.


00:06:24.740 --> 00:06:28.340
So Aaron, you do web development.


00:06:28.340 --> 00:06:31.960
Do you use dot EMV files or this sort of a setting?


00:06:31.960 --> 00:06:35.300
- We use settings.


00:06:35.300 --> 00:06:38.980
We, yeah, we don't use dot EMV files.


00:06:38.980 --> 00:06:43.980
We have, we do have local settings, but yeah, no.


00:06:43.980 --> 00:06:46.900
- Cool, I'm not really a Django developer.


00:06:46.900 --> 00:06:48.700
So maybe is it built into Django


00:06:48.700 --> 00:06:50.260
to have some solution for this?


00:06:50.260 --> 00:06:55.740
- We, yeah, I'd have to like, I'm not a,


00:06:55.740 --> 00:06:57.900
I get it running on my machine and then I go


00:06:57.900 --> 00:06:59.900
- And I code, yeah.


00:06:59.900 --> 00:07:01.540
So all the OS stuff.


00:07:01.540 --> 00:07:03.980
Yeah, all the OS stuff is not, yeah.


00:07:03.980 --> 00:07:06.420
It's not stuff I worry about


00:07:06.420 --> 00:07:09.140
unless I'm installing a new requirement or something.


00:07:09.140 --> 00:07:12.340
- Yeah, Django does have its way of managing settings


00:07:12.340 --> 00:07:14.620
that predates this stuff, I believe as well.


00:07:14.620 --> 00:07:15.580
- All right.


00:07:15.580 --> 00:07:16.820
- Yeah, that makes sense.


00:07:16.820 --> 00:07:20.100
- Well, Michael, should we switch to pedantic?


00:07:20.100 --> 00:07:22.340
- I have some crazy news for you.


00:07:22.340 --> 00:07:23.300
Yeah, let's do it.


00:07:24.300 --> 00:07:29.300
First, huge, huge congrats over to Samuel Colvin.


00:07:29.300 --> 00:07:35.620
And I've had him on the show to talk about Pydantic before.


00:07:35.620 --> 00:07:38.620
Pydantic is one of the more exciting libraries,


00:07:38.620 --> 00:07:40.860
I think, especially in the API space,


00:07:40.860 --> 00:07:44.900
but also Python bytes itself is powered by Beanie,


00:07:44.900 --> 00:07:48.180
the MongoDB ORM or ODM.


00:07:48.180 --> 00:07:51.580
And that is, uses Pydantic models


00:07:51.580 --> 00:07:53.460
as its validation and an exchange,


00:07:53.460 --> 00:07:56.120
like the things that are mapped to MongoDB are


00:07:56.120 --> 00:07:59.120
Pydantic classes.


00:07:59.120 --> 00:08:00.080
So here's the news.


00:08:00.080 --> 00:08:06.300
The Sequoia, like one of the biggest VC firms in California,


00:08:06.300 --> 00:08:09.520
in the world probably,


00:08:09.520 --> 00:08:11.840
backs open source data validation Pydantic


00:08:11.840 --> 00:08:14.800
to commercialize with cloud services.


00:08:14.800 --> 00:08:17.680
That's crazy, huh?


00:08:17.680 --> 00:08:18.520
- Yeah, wow.


00:08:18.520 --> 00:08:20.940
- We are a long way from the buy me a coffee,


00:08:20.940 --> 00:08:25.180
donate PayPal button that you see on the various projects


00:08:25.180 --> 00:08:26.660
in this.


00:08:26.660 --> 00:08:32.260
And I think it's just a sign of the open source space finding


00:08:32.260 --> 00:08:35.660
its way to support really successful projects


00:08:35.660 --> 00:08:39.940
and to support people whose time and energy and contributions


00:08:39.940 --> 00:08:44.260
to the world would be better spent to further this library


00:08:44.260 --> 00:08:48.260
than, say, potentially, well, how can we get 1% of 1%


00:08:48.260 --> 00:08:53.620
increase on ad clicks by using my library or something like that, you know,


00:08:53.620 --> 00:08:57.180
working for like companies that don't necessarily contribute so much.


00:08:57.180 --> 00:09:04.140
So some of the highlights here, you'll notice when I said we're a long ways


00:09:04.140 --> 00:09:09.280
from buying me a cup of coffee, Pydantic Services Incorporated emerges from stealth


00:09:09.280 --> 00:09:11.940
today with 4.7 million in seed funding.


00:09:11.940 --> 00:09:12.740
Wow.


00:09:12.740 --> 00:09:16.980
So wait, coffee, that is a lot of coffee.


00:09:16.980 --> 00:09:19.820
You could have, that's like coffee for life.


00:09:19.820 --> 00:09:21.540
Some of that fancy kind, you know,


00:09:21.540 --> 00:09:24.740
the weird, weird variations and stuff.


00:09:24.740 --> 00:09:27.180
Yeah, anyway, so there's, it's not just Sequoia,


00:09:27.180 --> 00:09:29.780
it's Pear Tech, it's Irregular Expressions,


00:09:29.780 --> 00:09:32.980
it's Zapier co-founder, Brian Helmig,


00:09:32.980 --> 00:09:35.060
who's also been on, talked about them before,


00:09:35.060 --> 00:09:37.900
and some other folks, co-founder of Sentry,


00:09:37.900 --> 00:09:39.420
David Kramer, so on.


00:09:39.420 --> 00:09:42.980
So let me see, I wrote down some of the highlights


00:09:42.980 --> 00:09:45.620
out of this whole article that I wanted to hit on.


00:09:45.620 --> 00:09:47.940
First of all, also this comes from Mark Little,


00:09:47.940 --> 00:09:51.340
who was a guest on show 285 and also a friend of mine.


00:09:51.340 --> 00:09:53.100
So thanks Mark for sending that in.


00:09:53.100 --> 00:09:56.300
The new, the whole, so you might be wondering,


00:09:56.300 --> 00:09:59.700
okay, well, 4.7 million is amazing.


00:09:59.700 --> 00:10:00.620
It's a lot of support.


00:10:00.620 --> 00:10:03.860
It means Pydantic is only gonna get better and stronger,


00:10:03.860 --> 00:10:08.280
but what the heck are you gonna get for your 4.7 million?


00:10:08.280 --> 00:10:11.580
So the idea is that this new commercial entity,


00:10:11.580 --> 00:10:15.580
it'll incorporate a bunch of tools and services


00:10:15.580 --> 00:10:20.340
that are powered by and inspired by the Pydantic library.


00:10:20.340 --> 00:10:23.580
And from what I can tell, is its primary goal


00:10:23.580 --> 00:10:26.860
is to make Pydantic really, really good further.


00:10:26.860 --> 00:10:29.420
There's already this big project for 2.0,


00:10:29.420 --> 00:10:32.260
for rewriting the core in Rust.


00:10:32.260 --> 00:10:34.260
This is the last time I had Samuel on the show


00:10:34.260 --> 00:10:36.380
on Talk Python to talk about that,


00:10:36.380 --> 00:10:38.860
which is gonna make it a lot faster.


00:10:38.860 --> 00:10:43.020
But something a little bit akin to a platform as a service,


00:10:43.020 --> 00:10:45.380
something a little bit like a Heroku,


00:10:45.380 --> 00:10:50.020
where you can push Python code to production in simple ways,


00:10:50.020 --> 00:10:52.660
but using the validation and the data exchange


00:10:52.660 --> 00:10:56.780
and the understanding that Pydantic has for data


00:10:56.780 --> 00:10:58.300
as part of this.


00:10:58.300 --> 00:11:00.820
So final thing, and I'll get y'all's thoughts on this,


00:11:00.820 --> 00:11:04.520
is you're going to start with an initial team of six.


00:11:04.520 --> 00:11:06.860
The first three engineers are based in Montana, Chicago,


00:11:06.860 --> 00:11:09.420
and Berlin, various places.


00:11:09.420 --> 00:11:13.060
And so, yeah, I wish all the luck to the Pydantic team


00:11:13.060 --> 00:11:16.300
and to Samuel and folks, I think this is great.


00:11:16.300 --> 00:11:18.980
Real thing.


00:11:18.980 --> 00:11:21.040
- I think this is great.


00:11:21.040 --> 00:11:25.020
I like the conversion to Rust.


00:11:25.020 --> 00:11:26.180
That's pretty exciting.


00:11:26.180 --> 00:11:28.580
- Yeah.


00:11:28.580 --> 00:11:33.180
- How's this sit with you?


00:11:33.180 --> 00:11:34.140
Is this surprising?


00:11:34.140 --> 00:11:37.980
- No, it's cool.


00:11:37.980 --> 00:11:39.300
It's very cool.


00:11:39.300 --> 00:11:40.980
I mean, I'm just Googling it


00:11:40.980 --> 00:11:44.320
because I didn't research it this talk,


00:11:44.320 --> 00:11:46.940
but yeah, it sounds like it can be used


00:11:46.940 --> 00:11:48.780
with any Python based framework.


00:11:48.780 --> 00:11:53.480
- Yeah, it came out of FastAPI.


00:11:53.480 --> 00:11:57.560
And it plays many important roles in FastAPI.


00:11:57.560 --> 00:11:58.640
It's the data validation.


00:11:58.640 --> 00:12:00.560
It's also the type hence that does


00:12:00.560 --> 00:12:01.720
the automatic data conversion,


00:12:01.720 --> 00:12:03.560
but it also drives like the swagger,


00:12:03.560 --> 00:12:07.600
open API documentation and all of those things.


00:12:07.600 --> 00:12:09.800
But it's been used way, way more places,


00:12:09.800 --> 00:12:11.680
for example, like Gini, which I mentioned,


00:12:11.680 --> 00:12:13.940
or SQL model and plenty of others.


00:12:13.940 --> 00:12:16.600
And it's just starting to gain a ton of momentum


00:12:16.600 --> 00:12:20.200
as a really solid data exchange for Python


00:12:20.200 --> 00:12:23.000
that's not directly talking to databases.


00:12:23.000 --> 00:12:25.080
So yeah, it should be good to see it grow.


00:12:25.080 --> 00:12:25.920
- So initial--


00:12:25.920 --> 00:12:29.080
- What does that mean not directly talking to databases?


00:12:29.080 --> 00:12:32.520
Meaning it just reads what comes back from the API


00:12:32.520 --> 00:12:33.360
and validates that?


00:12:33.360 --> 00:12:36.280
- Basically, we'll take any JSON,


00:12:36.280 --> 00:12:38.440
or if you could take a Toml document,


00:12:38.440 --> 00:12:40.200
you could turn it into a Python dictionary,


00:12:40.200 --> 00:12:42.560
then you could pass that on and have it validated.


00:12:42.560 --> 00:12:44.040
So you could say things like,


00:12:44.040 --> 00:12:50.800
this class has a list, which is a list of orders,


00:12:50.800 --> 00:12:54.320
and there can be no more than three orders in the list,


00:12:54.320 --> 00:12:55.360
and they have to be orders,


00:12:55.360 --> 00:12:56.760
and this thing has to be a number,


00:12:56.760 --> 00:12:58.200
and just all that kind of logic


00:12:58.200 --> 00:13:00.080
gets expressed in the model there.


00:13:00.080 --> 00:13:03.360
So, yeah, yeah, that's cool.


00:13:03.360 --> 00:13:07.160
- So one, just I guess a random thing,


00:13:07.160 --> 00:13:09.200
So it's a team of six, first three engineers


00:13:09.200 --> 00:13:11.600
based in Montana, Chicago, or Berlin.


00:13:11.600 --> 00:13:14.160
Wonder who's in Montana.


00:13:14.160 --> 00:13:16.840
And I guess if you had to choose


00:13:16.840 --> 00:13:18.680
one of three places to live,


00:13:18.680 --> 00:13:21.080
would you choose Montana, Chicago, or Berlin?


00:13:21.080 --> 00:13:23.240
- Gosh, I could--


00:13:23.240 --> 00:13:25.080
- Think I'd go with Berlin, but--


00:13:25.080 --> 00:13:29.000
- I could make a case for Montana or Berlin.


00:13:29.000 --> 00:13:30.880
They're both awesome in their own separate ways.


00:13:30.880 --> 00:13:35.880
Like, what's your spare time look like, I guess?


00:13:35.880 --> 00:13:37.800
- I do love the theaters in Chicago.


00:13:37.800 --> 00:13:39.520
The theaters in Chicago are beautiful.


00:13:39.520 --> 00:13:40.360
- I do too.


00:13:40.360 --> 00:13:43.440
But I'm thinking of motorcycle riding for days in Montana


00:13:43.440 --> 00:13:45.800
and the cities and all that stuff in Berlin.


00:13:45.800 --> 00:13:47.160
Erin, where would you live?


00:13:47.160 --> 00:13:51.320
- Man, between those, that's really a hard choice.


00:13:51.320 --> 00:13:53.840
I moved to North Carolina for shorter winters.


00:13:53.840 --> 00:13:56.560
So it seems like Chicago would be out for that reason


00:13:56.560 --> 00:13:57.400
'cause they have even longer--


00:13:57.400 --> 00:13:58.720
- Montana might really be out.


00:13:58.720 --> 00:13:59.920
- Winters, yeah.


00:13:59.920 --> 00:14:02.840
So I would need to research what had the shortest winter.


00:14:02.840 --> 00:14:03.680
But I don't know.


00:14:03.680 --> 00:14:04.520
- Yeah, that's a good one.


00:14:04.520 --> 00:14:06.520
- I think Berlin's gonna be your veg.


00:14:06.520 --> 00:14:07.360
- Yeah.


00:14:07.360 --> 00:14:08.180
- Yeah, all right, awesome.


00:14:08.180 --> 00:14:10.520
Well, over to you.


00:14:10.520 --> 00:14:11.960
What's your first topic?


00:14:11.960 --> 00:14:13.520
- Okay, cool.


00:14:13.520 --> 00:14:15.600
Yeah, and I just wanted to go back to the TAML topic


00:14:15.600 --> 00:14:17.680
because I kind of froze on that one.


00:14:17.680 --> 00:14:20.280
So we are using a YAML file for our local settings,


00:14:20.280 --> 00:14:21.320
not a TAML file.


00:14:21.320 --> 00:14:22.920
I haven't actually seen TAML before.


00:14:22.920 --> 00:14:25.280
I don't really know how different looking it is.


00:14:25.280 --> 00:14:29.000
But yeah, I think it's gonna be a good topic.


00:14:29.000 --> 00:14:30.840
- Yeah, I think it's gonna be a good topic.


00:14:30.840 --> 00:14:31.680
- Yeah.


00:14:31.680 --> 00:14:32.520
- Yeah.


00:14:32.520 --> 00:14:33.340
- Yeah.


00:14:33.340 --> 00:14:37.580
But yeah, and settings are kind of baked into Django


00:14:37.580 --> 00:14:40.580
for outside of the local environment stuff.


00:14:40.580 --> 00:14:41.420
- Cool.


00:14:41.420 --> 00:14:44.060
- But yeah, so my next, so my topic was,


00:14:44.060 --> 00:14:47.220
my first topic is JSON fields for performance


00:14:47.220 --> 00:14:50.740
and thinking about JSON fields in terms of what they are,


00:14:50.740 --> 00:14:53.820
which is kind of like denormalized data.


00:14:53.820 --> 00:14:56.900
I'm really interested in the topic of normalization


00:14:56.900 --> 00:15:01.300
and denormalization and specifically how JSON fields


00:15:01.300 --> 00:15:04.940
are basically denormalized and mutable data


00:15:04.940 --> 00:15:09.660
that's probably living in an otherwise normalized database.


00:15:09.660 --> 00:15:11.100
So I was interested in this topic


00:15:11.100 --> 00:15:15.140
and I searched to see if I could find it anywhere online.


00:15:15.140 --> 00:15:18.740
And yeah, so what we're showing here is,


00:15:18.740 --> 00:15:23.740
this was a talk given by David Stokes at PHP UK in 2019,


00:15:23.740 --> 00:15:28.100
called "How Denormalizing Your Data with JSON


00:15:28.100 --> 00:15:30.580
Can Boost Query Performance."


00:15:30.580 --> 00:15:36.840
I always miss do you guys pronounce it Jason or Jason and I'm sure you've talked about this before I


00:15:36.840 --> 00:15:44.060
Guess I had no I say J Jason like on top. Yeah. Yeah


00:15:44.060 --> 00:15:47.780
Brian, what do you like the name Jason?


00:15:47.780 --> 00:15:55.060
Yeah, it it is. It's like it's the name according to the creator. It is Jason. Okay, it's


00:15:55.060 --> 00:15:59.300
But I will mispronounce it a lot


00:15:59.300 --> 00:16:04.100
And it stands for JavaScript Objects Notation.


00:16:04.100 --> 00:16:06.860
But yeah, I think my Philly comes out


00:16:06.860 --> 00:16:08.820
'cause I'm always saying JSON.


00:16:08.820 --> 00:16:12.460
So yeah, so David Stokes gave this talk.


00:16:12.460 --> 00:16:14.620
He is a technology evangelist,


00:16:14.620 --> 00:16:17.460
and a lot of the talk was about MySQL


00:16:17.460 --> 00:16:19.640
as a backend in particular.


00:16:19.640 --> 00:16:22.100
But the parts of the talk that I found really interesting


00:16:22.100 --> 00:16:24.100
are the history lesson,


00:16:24.100 --> 00:16:26.940
and I kind of have it highlighted here.


00:16:26.940 --> 00:16:29.800
It starts at around minute 250,


00:16:29.800 --> 00:16:34.100
where he talked about how Edgar Codd at IBM


00:16:34.100 --> 00:16:36.740
developed the idea of a relational data


00:16:36.740 --> 00:16:39.580
because hardware was expensive at the time.


00:16:39.580 --> 00:16:43.380
So having relational tables and normalized data


00:16:43.380 --> 00:16:46.980
was a way to not have duplication of data.


00:16:46.980 --> 00:16:52.780
And normalized data, just a quick definition is like,


00:16:52.780 --> 00:16:54.700
or example is like taking an address


00:16:54.700 --> 00:16:57.620
and breaking it down into parts.


00:16:57.620 --> 00:17:02.620
So experts had been saying for years at this point,


00:17:02.620 --> 00:17:06.180
like normalizing data is the way to go.


00:17:06.180 --> 00:17:08.500
You wanna normalize your data.


00:17:08.500 --> 00:17:10.060
And then during this history talk,


00:17:10.060 --> 00:17:13.520
you mentioned that then no SQL came in and shook things up.


00:17:13.520 --> 00:17:19.660
And after that, SQL added JSON data types


00:17:19.660 --> 00:17:21.580
for immutable data type.


00:17:21.580 --> 00:17:24.460
So you don't have to define and normalize


00:17:24.460 --> 00:17:27.340
your whole database, you can kind of have


00:17:27.340 --> 00:17:29.200
these mutable fields.


00:17:29.200 --> 00:17:30.500
So, okay.


00:17:30.500 --> 00:17:31.860
So anyway, the history lesson,


00:17:31.860 --> 00:17:36.420
I just found that super interesting as a data person.


00:17:36.420 --> 00:17:37.620
Do you guys find that interesting at all?


00:17:37.620 --> 00:17:38.460
I do.


00:17:38.460 --> 00:17:39.280
- I do, yeah.


00:17:39.280 --> 00:17:46.460
I think that this concept of mutable schema,


00:17:46.460 --> 00:17:48.440
not that mutable data per se,


00:17:48.440 --> 00:17:53.440
but that the schema itself doesn't have to be as controlled


00:17:54.340 --> 00:17:58.340
and that's strictly guarded by a DBA


00:17:58.340 --> 00:18:00.460
that goes through some giant process


00:18:00.460 --> 00:18:02.420
to figure out what you do,


00:18:02.420 --> 00:18:04.940
can add a ton of flexibility


00:18:04.940 --> 00:18:07.040
to the way that you evolve your app.


00:18:07.040 --> 00:18:11.140
So there doesn't necessarily have to be a DBA.


00:18:11.140 --> 00:18:13.740
It could be like, well, how are we going to


00:18:13.740 --> 00:18:16.540
schedule the downtime so that we can do


00:18:16.540 --> 00:18:20.920
the schema migration as we roll out this new feature?


00:18:22.420 --> 00:18:25.420
those kinds of things can get challenging.


00:18:25.420 --> 00:18:28.820
If you roll out the code first,


00:18:28.820 --> 00:18:31.140
and it's some kind of relational thing,


00:18:31.140 --> 00:18:32.880
you're using SQLAlchemy or something like that,


00:18:32.880 --> 00:18:34.360
it's gonna crash saying that the code


00:18:34.360 --> 00:18:35.860
doesn't match the database.


00:18:35.860 --> 00:18:37.900
If you roll out the database first,


00:18:37.900 --> 00:18:40.860
it may no longer match what the code that's running is.


00:18:40.860 --> 00:18:43.060
And there's always this, well, what do I do?


00:18:43.060 --> 00:18:48.240
And having some of this more mutable schema,


00:18:48.240 --> 00:18:50.020
in this case, they're talking about MySQL,


00:18:50.020 --> 00:18:52.180
I believe it's basically the same for Postgres,


00:18:52.180 --> 00:18:55.820
where you can have columns that are JSON,


00:18:55.820 --> 00:18:58.820
and then you can, you just say to the database,


00:18:58.820 --> 00:19:00.660
the schema is JSON, but your code knows,


00:19:00.660 --> 00:19:02.820
well, it's actually a list of these things


00:19:02.820 --> 00:19:04.660
with these properties in it.


00:19:04.660 --> 00:19:06.540
And you want to add a new property?


00:19:06.540 --> 00:19:07.380
Great, you add a new property.


00:19:07.380 --> 00:19:09.380
As long as your code can deal with it, super.


00:19:09.380 --> 00:19:12.780
So I think it's certainly something people should consider.


00:19:12.780 --> 00:19:14.860
It really adds a lot of flexibility.


00:19:14.860 --> 00:19:17.380
You don't need necessarily a normalization table


00:19:17.380 --> 00:19:21.860
because you can just put the stuff in a list, for example.


00:19:21.860 --> 00:19:24.400
- Yeah, and not only flexibility,


00:19:24.400 --> 00:19:27.740
but also quicker querying.


00:19:27.740 --> 00:19:32.100
So yeah, so I really liked starting at around minute 14,


00:19:32.100 --> 00:19:35.700
which is, this is what I was kind of looking for


00:19:35.700 --> 00:19:38.280
when I was looking for this topic.


00:19:38.280 --> 00:19:40.860
So I really liked that he gave this talk about it.


00:19:40.860 --> 00:19:44.380
He goes over an example of a music store


00:19:44.380 --> 00:19:47.540
and you have these items in a music store like guitars


00:19:47.540 --> 00:19:49.020
and you don't wanna have to add field


00:19:49.020 --> 00:19:53.540
every time there's a new guitar feature, right?


00:19:53.540 --> 00:19:58.180
So you have these JSON fields in your database.


00:19:58.180 --> 00:19:59.580
And like you said,


00:19:59.580 --> 00:20:03.180
they're available in lots of different backends.


00:20:03.180 --> 00:20:05.340
We use Postgres and yeah,


00:20:05.340 --> 00:20:07.500
we use JSON fields all over the place.


00:20:07.500 --> 00:20:10.580
So, and he has this really cool diagram where he shows,


00:20:10.580 --> 00:20:14.020
you know, reducing database dives and many to many joins,


00:20:14.020 --> 00:20:16.860
where you're diving from, you know,


00:20:16.860 --> 00:20:18.980
one index into another into another


00:20:18.980 --> 00:20:21.580
to just to get at the data that you can get


00:20:21.580 --> 00:20:24.300
at the top level if you have it in this JSON field.


00:20:24.300 --> 00:20:26.820
- Right, you don't have to do a multi-way


00:20:26.820 --> 00:20:31.020
many to many join when it's just in there directly, right?


00:20:31.020 --> 00:20:32.100
'Cause you have more flexibility.


00:20:32.100 --> 00:20:34.380
It doesn't have to be tabular, yeah.


00:20:34.380 --> 00:20:36.180
- Yeah, so I found it really cool.


00:20:36.180 --> 00:20:40.620
We use JSON fields in one of our big Django projects


00:20:40.620 --> 00:20:43.800
quite a bit and yeah, our data is totally,


00:20:43.800 --> 00:20:46.360
our schemas are normalized.


00:20:46.360 --> 00:20:51.360
but we find it really helpful also for reporting,


00:20:51.360 --> 00:20:53.680
making reporting really, really fast


00:20:53.680 --> 00:20:57.920
because of that database dive that you don't need to do.


00:20:57.920 --> 00:21:02.400
And also for tracking snapshots of data.


00:21:02.400 --> 00:21:05.000
So something happened on this date


00:21:05.000 --> 00:21:08.560
and then the relational record changed,


00:21:08.560 --> 00:21:10.680
but the JSON gives you the snapshot


00:21:10.680 --> 00:21:13.480
of what the user did on that date.


00:21:13.480 --> 00:21:15.320
So that's really useful too. - Right, that's a good point.


00:21:15.320 --> 00:21:17.520
If the snapshot doesn't match the current schema,


00:21:17.520 --> 00:21:19.200
well then, how are you going to store it?


00:21:19.200 --> 00:21:20.280
That gets to be a problem.


00:21:20.280 --> 00:21:21.520
But JSON is JSON.


00:21:21.520 --> 00:21:22.360
That's right.


00:21:22.360 --> 00:21:23.200
- Yeah. - Yeah.


00:21:23.200 --> 00:21:27.760
I guess I've taken this to the far extreme in my world.


00:21:27.760 --> 00:21:28.840
So I'm a huge advocate,


00:21:28.840 --> 00:21:31.520
but I do almost all my work on MongoDB,


00:21:31.520 --> 00:21:34.480
which means it's all JSON.


00:21:34.480 --> 00:21:35.980
All the way down, right?


00:21:35.980 --> 00:21:39.960
But I think it's an absolutely fabulous way to work.


00:21:39.960 --> 00:21:40.800
I love it.


00:21:40.800 --> 00:21:43.760
The operational side of not doing massive migrations


00:21:43.760 --> 00:21:45.280
all the time. It's really, really good.


00:21:45.280 --> 00:21:50.320
Yeah. And I'm actually working on a blog, a blog article about it because I


00:21:50.320 --> 00:21:53.820
couldn't find what I specifically wanted to talk about today.


00:21:53.820 --> 00:21:56.680
So I'm writing up a blog article. It's not published.


00:21:56.680 --> 00:22:01.760
It'll be published next month. But yeah, I'll share it later with you guys.


00:22:01.760 --> 00:22:06.360
Yeah. Yeah, please do. And I think that's, I think that's a great,


00:22:06.360 --> 00:22:09.480
actually a great thing for people to do is just,


00:22:09.920 --> 00:22:13.760
there's a discussion of something and if you can't find


00:22:13.760 --> 00:22:16.440
an article that expresses what you want to express,


00:22:16.440 --> 00:22:17.360
then write one.


00:22:17.360 --> 00:22:18.240
It's great.


00:22:18.240 --> 00:22:19.320
- Yep.


00:22:19.320 --> 00:22:21.720
Indeed, all right, Brian.


00:22:21.720 --> 00:22:23.440
How about I tell everyone about our sponsor


00:22:23.440 --> 00:22:24.440
before we move on?


00:22:24.440 --> 00:22:25.800
- Oh, that's a great idea.


00:22:25.800 --> 00:22:26.640
- Yeah.


00:22:26.640 --> 00:22:29.120
As I said at the beginning,


00:22:29.120 --> 00:22:31.080
this episode is brought to you by


00:22:31.080 --> 00:22:33.640
the Compiler Podcast from Red Hat.


00:22:33.640 --> 00:22:36.320
And just like you out there listening,


00:22:36.320 --> 00:22:39.440
we're big fans of podcasts, Brian and I.


00:22:39.440 --> 00:22:43.600
And we're happy to share one of the most highly respected,


00:22:43.600 --> 00:22:45.040
one from the most highly respected


00:22:45.040 --> 00:22:46.680
open source companies, Compiler,


00:22:46.680 --> 00:22:48.320
original podcast from Red Hat.


00:22:48.320 --> 00:22:50.680
It brings together a curious team of Red Hatters


00:22:50.680 --> 00:22:52.920
to simplify tech topics,


00:22:52.920 --> 00:22:56.840
provide insight for new generation IT professionals.


00:22:56.840 --> 00:22:58.280
And the show covers topics like


00:22:58.280 --> 00:23:00.240
what are the components of a software stack?


00:23:00.240 --> 00:23:01.920
Are big mistakes that big of a deal?


00:23:01.920 --> 00:23:06.000
And do you have to know how to code to contribute


00:23:06.000 --> 00:23:07.720
and get started in open source?


00:23:07.720 --> 00:23:11.440
Hint, not always, depends on how you're trying to contribute.


00:23:11.440 --> 00:23:14.160
So Compiler closes the gap between those


00:23:14.160 --> 00:23:17.800
who are new to technology and those behind the inventions


00:23:17.800 --> 00:23:19.840
and services shaping our world.


00:23:19.840 --> 00:23:21.720
And they bring together stories and perspectives


00:23:21.720 --> 00:23:25.000
from the industry and simplify its language, culture,


00:23:25.000 --> 00:23:27.120
and movements in a way that's fun, informative,


00:23:27.120 --> 00:23:27.960
and guilt-free.


00:23:27.960 --> 00:23:32.480
I recently listened to "Are We As Productive As We Think?"


00:23:32.480 --> 00:23:34.560
And that episode is really fun.


00:23:34.560 --> 00:23:36.800
There's a bunch of good advice in there


00:23:36.800 --> 00:23:39.200
As a developer, owner of a tech company,


00:23:39.200 --> 00:23:42.240
and a technologist, these productivity hacks,


00:23:42.240 --> 00:23:46.400
such as time boxing, focusing on one task at a time,


00:23:46.400 --> 00:23:49.220
and incorporating intentional breaks into your workday


00:23:49.220 --> 00:23:50.820
all stood out as super relevant.


00:23:50.820 --> 00:23:54.820
They suggest that by creating an honest self-image


00:23:54.820 --> 00:23:57.000
of your productivity habits and being intentional


00:23:57.000 --> 00:23:58.120
about how you spend your time,


00:23:58.120 --> 00:24:00.980
you can reduce the overwhelm of multitasking


00:24:00.980 --> 00:24:02.560
that you have to do and increase your focus


00:24:02.560 --> 00:24:07.480
and creativity leading to you being more successful,


00:24:07.480 --> 00:24:08.320
for sure.


00:24:08.320 --> 00:24:12.720
So learn more about Compiler at pythonbytes.fm/compiler.


00:24:12.720 --> 00:24:14.840
The link is in your podcast show notes.


00:24:14.840 --> 00:24:16.400
Thanks to Compiler and Red Hat


00:24:16.400 --> 00:24:18.720
for keeping this podcast going strong.


00:24:18.720 --> 00:24:20.680
Indeed.


00:24:20.680 --> 00:24:21.600
- Awesome. - All right.


00:24:21.600 --> 00:24:22.920
Yeah, thanks.


00:24:22.920 --> 00:24:23.760
Fun show.


00:24:23.760 --> 00:24:27.560
And tell us, you gonna take us to school, Brian?


00:24:27.560 --> 00:24:29.880
- Yeah, so Kevin Markham, who's a friend of the show,


00:24:29.880 --> 00:24:36.260
friend of ours ran into him a lot during when when I was going to conferences


00:24:36.260 --> 00:24:41.400
more that's hopefully coming up again. What are those? Conferences, you know


00:24:41.400 --> 00:24:47.160
people get together in real life. But so Kevin took a little bit of a break


00:24:47.160 --> 00:24:52.480
he's a he used to write a lot and I hadn't I guess I hadn't noticed but


00:24:52.480 --> 00:24:59.160
there's a break between August of 2021 and then now in February of 2023 so a


00:24:59.160 --> 00:25:01.480
So a couple of your break and we all need that.


00:25:01.480 --> 00:25:02.300
That's fine.


00:25:02.300 --> 00:25:03.620
But these articles are great.


00:25:03.620 --> 00:25:05.760
So a couple of new articles that he has,


00:25:05.760 --> 00:25:08.240
I'm gonna pop through a couple of them.


00:25:08.240 --> 00:25:10.840
How to use f-strings with pandas.


00:25:10.840 --> 00:25:14.620
So basically it's a good discussion of f-strings.


00:25:14.620 --> 00:25:17.920
If you're not comfortable with f-strings already,


00:25:17.920 --> 00:25:21.840
this is a good intro to why f-strings are great


00:25:21.840 --> 00:25:24.280
to pop in values.


00:25:24.280 --> 00:25:26.420
I don't know if it's really that panda specific,


00:25:26.420 --> 00:25:29.460
but one of the things I really loved,


00:25:29.460 --> 00:25:32.460
although popped up my favorite part of this article.


00:25:32.460 --> 00:25:34.820
So, and I forget to do this,


00:25:34.820 --> 00:25:36.300
so I'm glad that he points these out.


00:25:36.300 --> 00:25:38.140
So one of the things is you can,


00:25:38.140 --> 00:25:41.660
it's not just taking a value and putting it in brackets


00:25:41.660 --> 00:25:43.420
so that you can print it, but you can do,


00:25:43.420 --> 00:25:44.980
it's an expression in the brackets.


00:25:44.980 --> 00:25:48.940
So you can call like upper for a name variable


00:25:48.940 --> 00:25:50.700
so that you can print it in uppercase


00:25:50.700 --> 00:25:53.620
and not have to do that before you pass it to the F string.


00:25:54.540 --> 00:25:57.300
Or you could do things like a little bit of math.


00:25:57.300 --> 00:26:00.540
So if you've got like his example had days completed


00:26:00.540 --> 00:26:04.340
and he did like 365 minus that divided by,


00:26:04.340 --> 00:26:05.340
so you get a percentage.


00:26:05.340 --> 00:26:08.840
So this is pretty cool to think.


00:26:08.840 --> 00:26:13.100
Remember if the only place you're gonna use the value


00:26:13.100 --> 00:26:14.540
is within the string,


00:26:14.540 --> 00:26:16.360
you could just do it within the expression.


00:26:16.360 --> 00:26:17.740
So this is a good one.


00:26:17.740 --> 00:26:20.740
The part that it really, never really occurred to me to do


00:26:20.740 --> 00:26:23.140
that I wanted to highlight was


00:26:23.140 --> 00:26:27.860
He had different columns of data within a data frame


00:26:27.860 --> 00:26:30.740
and referencing them with a string index


00:26:30.740 --> 00:26:35.740
and then using fstring to pick the index within a loop.


00:26:35.740 --> 00:26:41.580
And it never occurred to me to use fstrings


00:26:41.580 --> 00:26:46.580
to generate the index for a string index.


00:26:46.580 --> 00:26:48.740
This is a cool idea.


00:26:48.740 --> 00:26:49.700
- Yeah, that is wild.


00:26:49.700 --> 00:26:50.540
I like it.


00:26:51.500 --> 00:26:55.440
The other article is a fly through of Jupyter keyboard


00:26:55.440 --> 00:26:56.500
shortcuts.


00:26:56.500 --> 00:27:00.800
And I guess I just have to say I'm a huge fan of the rocket


00:27:00.800 --> 00:27:01.860
emoji.


00:27:01.860 --> 00:27:04.300
>> I wonder why.


00:27:04.300 --> 00:27:05.500
>> Yeah.


00:27:05.500 --> 00:27:09.300
But this is not overwhelming.


00:27:09.300 --> 00:27:12.700
So especially for people that use--


00:27:12.700 --> 00:27:15.100
I mean, if you use it a lot and you don't know keyboard


00:27:15.100 --> 00:27:17.060
shortcuts, this would be a good intro.


00:27:17.060 --> 00:27:19.500
But people like me that just pop in,


00:27:19.500 --> 00:27:22.440
use it every once in a while for something.


00:27:22.440 --> 00:27:24.280
These are useful just for those people, too.


00:27:24.280 --> 00:27:25.600
It's not an overwhelming list.


00:27:25.600 --> 00:27:29.680
There's some great stuff, like just hitting Escape and Enter


00:27:29.680 --> 00:27:32.220
to go back and forth between Command Mode and Edit Mode,


00:27:32.220 --> 00:27:33.400
for instance.


00:27:33.400 --> 00:27:35.200
And then I'm going to tell you, you're


00:27:35.200 --> 00:27:38.320
going to remember this one, A and B for Create a Cell


00:27:38.320 --> 00:27:39.840
Above or Below the Current Cell.


00:27:39.840 --> 00:27:43.980
So these are just some really great little Jupyter tricks


00:27:43.980 --> 00:27:46.400
to make yourself more productive and not


00:27:46.400 --> 00:27:49.160
have to touch the mouse as much.


00:27:49.160 --> 00:27:51.520
So anyway, some good, good things.


00:27:51.520 --> 00:27:52.140
I think it's great.


00:27:52.140 --> 00:27:54.800
I wish actually Jupyter had more hotkeys.


00:27:54.800 --> 00:27:59.400
They're really, there's really a lot more they could do there, but knowing the


00:27:59.400 --> 00:28:01.360
ones that are there, I think is pretty excellent.


00:28:01.360 --> 00:28:09.240
yeah, for me, I often try to use Vim shortcuts and it's just, it doesn't work.


00:28:09.240 --> 00:28:10.080
It's not going to have it.


00:28:10.080 --> 00:28:12.640
Erin, what are your thoughts here?


00:28:12.640 --> 00:28:17.320
the F string articles really was really nice.


00:28:17.440 --> 00:28:22.360
Yeah, it's just, it's hard to find a good F-string article


00:28:22.360 --> 00:28:24.920
that tells you all these different things you can do.


00:28:24.920 --> 00:28:26.240
So I was just scanning through it


00:28:26.240 --> 00:28:29.200
and we use f-strings quite a bit.


00:28:29.200 --> 00:28:34.200
And if we have old format Python strings


00:28:34.200 --> 00:28:37.800
that are in the code that we're updating in a pull request,


00:28:37.800 --> 00:28:39.440
we always ask the developer


00:28:39.440 --> 00:28:43.160
to please update those old ones to use f-strings as well.


00:28:43.160 --> 00:28:44.000
- Oh, that's a good idea.


00:28:44.000 --> 00:28:45.440
- They're just so much more readable.


00:28:45.440 --> 00:28:47.360
- As you're going through it, go ahead and fix them.


00:28:47.360 --> 00:28:49.860
- Yeah, yeah, instead of like fixing them all,


00:28:49.860 --> 00:28:53.000
just go through and fix the ones that you're touching.


00:28:53.000 --> 00:28:55.980
- Does PyUpgrade do that or I can't remember.


00:28:55.980 --> 00:28:58.640
- I can tell you that Flint does.


00:28:58.640 --> 00:29:00.000
- Flint, yeah, that's it.


00:29:00.000 --> 00:29:01.080
- Flint.


00:29:01.080 --> 00:29:04.440
So I've taken Flint and run it against


00:29:04.440 --> 00:29:08.960
large projects that I've done in it.


00:29:08.960 --> 00:29:11.400
In the early days, it introduced one bug


00:29:11.400 --> 00:29:13.120
out of 20,000 lines of code,


00:29:13.120 --> 00:29:17.520
but it rewrote like a thousand print


00:29:17.520 --> 00:29:19.840
or string formats of various versions


00:29:19.840 --> 00:29:22.400
and I found it to be really helpful.


00:29:22.400 --> 00:29:24.620
- And that's F-L-Y-N-T.


00:29:24.620 --> 00:29:26.320
- Yeah, F-L-Y-N-T.


00:29:26.320 --> 00:29:28.440
- For the podcast listeners.


00:29:28.440 --> 00:29:29.280
- Exactly.


00:29:29.280 --> 00:29:32.080
Yeah, so this is really good too.


00:29:32.080 --> 00:29:34.800
If you ask people to do that, you could suggest like,


00:29:34.800 --> 00:29:38.040
and you could try just running this on your code to start


00:29:38.040 --> 00:29:39.720
and just make sure it doesn't break anything.


00:29:39.720 --> 00:29:42.840
But it's been pretty stable since the oddities it hit.


00:29:42.840 --> 00:29:43.680
- Oh, that's cool.


00:29:43.680 --> 00:29:44.800
We'll check that out.


00:29:44.800 --> 00:29:46.240
Cool.


00:29:46.240 --> 00:29:47.080
- Indeed.


00:29:47.080 --> 00:29:48.160
All right, Brian, you all done with yours?


00:29:48.160 --> 00:29:49.000
- Yeah.


00:29:49.000 --> 00:29:50.240
And I just did look it up.


00:29:50.240 --> 00:29:52.380
I think the PyUpgrade also does it.


00:29:52.380 --> 00:29:55.120
- Oh no.


00:29:55.120 --> 00:29:56.640
Anthony Lister out there in the audience


00:29:56.640 --> 00:29:58.880
is just trying to egg us on.


00:29:58.880 --> 00:30:01.440
Single quotes or double quotes with those f-strings?


00:30:01.440 --> 00:30:05.760
- See last episode.


00:30:05.760 --> 00:30:06.600
- Yeah, exactly.


00:30:06.600 --> 00:30:08.400
That's a whole debate last episode.


00:30:08.400 --> 00:30:09.240
All right.


00:30:09.240 --> 00:30:16.560
My next item is BioGPT.


00:30:16.560 --> 00:30:22.400
So we've heard about ChatGPT, and this is similar stuff but applied to biology.


00:30:22.400 --> 00:30:23.400
So Brian said you had to--


00:30:23.400 --> 00:30:25.240
>> I created a cat that barks.


00:30:25.240 --> 00:30:26.240
>> Exactly.


00:30:26.240 --> 00:30:31.160
And now make it mutate into a snake.


00:30:31.160 --> 00:30:32.520
How many generations will this take?


00:30:32.520 --> 00:30:33.520
Three.


00:30:33.520 --> 00:30:34.520
All right.


00:30:34.520 --> 00:30:37.960
So I want to just as a way to, you know, it's not really easy for me to demo this.


00:30:37.960 --> 00:30:39.800
So like, let me as a way of motivation,


00:30:39.800 --> 00:30:41.900
just show you like a chat TV thing,


00:30:41.900 --> 00:30:43.840
since you were just asking about Brian.


00:30:43.840 --> 00:30:44.680
So check this out.


00:30:44.680 --> 00:30:47.600
Here's a cool program that talks about


00:30:47.600 --> 00:30:52.600
how you should never write insanely nested code.


00:30:52.600 --> 00:30:55.920
You should instead use, so the people listening,


00:30:55.920 --> 00:30:58.040
this is like, it says, is this a platypus?


00:30:58.040 --> 00:31:01.960
If self.isManual, and then if self.hasFert,


00:31:01.960 --> 00:31:04.320
then if self.hasBeak and so on and so on,


00:31:04.320 --> 00:31:07.480
it's like nested over, so the code starts in the middle,


00:31:07.480 --> 00:31:09.920
maybe a bit to the right of the screen.


00:31:09.920 --> 00:31:11.160
And it says return true, right?


00:31:11.160 --> 00:31:12.000
Like you shouldn't do that.


00:31:12.000 --> 00:31:12.820
What should you do?


00:31:12.820 --> 00:31:14.160
You should write guarding clauses.


00:31:14.160 --> 00:31:15.360
So check this out, Brian.


00:31:15.360 --> 00:31:17.380
If I go over to chat GP and I say,


00:31:17.380 --> 00:31:22.380
I'm going to give you a program in Python.


00:31:22.380 --> 00:31:25.700
I want you to name it Arrow.


00:31:25.700 --> 00:31:28.920
And it'll say, sure, Arrow sounds like a great name.


00:31:28.920 --> 00:31:29.880
And I give it this.


00:31:29.880 --> 00:31:32.500
And it talks about what it does.


00:31:32.500 --> 00:31:34.200
It checks whether it's a platypus


00:31:34.200 --> 00:31:39.200
and say, "Rewrite arrow to be less nested


00:31:39.200 --> 00:31:41.920
"using guarding clauses."


00:31:41.920 --> 00:31:47.040
Britainly, here you go, it says.


00:31:47.040 --> 00:31:48.080
And what is it right?


00:31:48.080 --> 00:31:52.560
Exactly, the new pattern that you should have used.


00:31:52.560 --> 00:31:53.600
Is that insane?


00:31:53.600 --> 00:31:57.120
What do you think, Brian, Aaron?


00:31:57.120 --> 00:32:04.000
- I wouldn't write the code like this anyway, but okay.


00:32:04.000 --> 00:32:06.960
All right, now, that--


00:32:06.960 --> 00:32:11.600
so arrow checks for a platypus.


00:32:11.600 --> 00:32:14.360
Plat, plat, plat--


00:32:14.360 --> 00:32:15.360
that's it.


00:32:15.360 --> 00:32:16.360
Whatever.


00:32:16.360 --> 00:32:17.680
Oh, here, hold on.


00:32:17.680 --> 00:32:20.680
Platypus.


00:32:20.680 --> 00:32:26.520
Rewrite it to check for crocodiles.


00:32:26.520 --> 00:32:30.440
So sure, no problem.


00:32:30.440 --> 00:32:32.120
We're going to write, is it a crocodile?


00:32:32.120 --> 00:32:34.120
The tests are, is it a reptile?


00:32:34.120 --> 00:32:35.720
Has scales?


00:32:35.720 --> 00:32:37.840
Does it have jaws?


00:32:37.840 --> 00:32:39.600
Does it have a four chamber heart?


00:32:39.600 --> 00:32:40.920
- Wow.


00:32:40.920 --> 00:32:42.120
- Is that insane?


00:32:42.120 --> 00:32:44.000
And all I did is I'm gonna give you this code


00:32:44.000 --> 00:32:46.180
and just start asking questions.


00:32:46.180 --> 00:32:47.020
So, okay.


00:32:47.020 --> 00:32:48.160
So impressive, right?


00:32:48.160 --> 00:32:50.960
So back to bio GPT.


00:32:50.960 --> 00:32:54.640
Think of what this can do for doctors and nurses


00:32:54.640 --> 00:32:58.360
and people trying to understand like written text of this.


00:32:58.360 --> 00:33:03.360
So this BioGPT contains an implementation


00:33:03.360 --> 00:33:09.080
specifically trained for medical analysis.


00:33:09.080 --> 00:33:12.480
Kind of like ChatGP is a general analysis tool,


00:33:12.480 --> 00:33:16.120
this one is specifically for medicine.


00:33:16.120 --> 00:33:16.960
- Okay.


00:33:16.960 --> 00:33:17.860
- So pretty cool.


00:33:17.860 --> 00:33:21.600
Apparently it can do PubMedQA tests.


00:33:21.600 --> 00:33:22.920
I have no idea what that is,


00:33:22.920 --> 00:33:25.600
but if I was a doctor, I'm sure this is like,


00:33:25.600 --> 00:33:26.720
I'll get you interesting questions,


00:33:26.720 --> 00:33:29.840
with 81% accuracy, which might sound like,


00:33:29.840 --> 00:33:31.960
well, that's 19% not good enough,


00:33:31.960 --> 00:33:36.200
but I bet you doctors don't do it at 100% accuracy either.


00:33:36.200 --> 00:33:41.200
There's a lot of examples where AI is predicting cancer


00:33:41.200 --> 00:33:44.120
sooner or better or more accurately than--


00:33:44.120 --> 00:33:46.720
- Right, and I bet it's better than Dr. Google


00:33:46.720 --> 00:33:50.360
and looking up your symptoms and thinking


00:33:50.360 --> 00:33:52.160
you have the worst thing.


00:33:52.160 --> 00:33:53.520
- Yeah, yeah, exactly.


00:33:53.520 --> 00:33:54.920
- Well, that's what I was curious about,


00:33:54.920 --> 00:33:57.420
if it was named like, what am I dying of today?


00:33:57.420 --> 00:33:59.120
(laughing)


00:33:59.120 --> 00:34:00.500
- Will I die GPT?


00:34:00.500 --> 00:34:02.960
- I don't know.


00:34:02.960 --> 00:34:04.600
- Oh, it seems grumpy, I don't know.


00:34:04.600 --> 00:34:05.840
So it comes with different models.


00:34:05.840 --> 00:34:10.040
It has the bio GPT one, but it also has the large one.


00:34:10.040 --> 00:34:11.740
And my experience with this stuff is


00:34:11.740 --> 00:34:13.460
the large models are where it's at.


00:34:13.460 --> 00:34:16.880
The regular ones are quick, but they're not very accurate.


00:34:16.880 --> 00:34:18.000
You wanna go for the large model.


00:34:18.000 --> 00:34:20.020
So there's a bunch of different ones,


00:34:20.020 --> 00:34:27.300
like one trained for fine-tuned for relation extraction task


00:34:27.300 --> 00:34:31.020
on KD DTI, which is a certain type of data set or other ones.


00:34:31.020 --> 00:34:33.300
So you can pick which ones it is.


00:34:33.300 --> 00:34:35.420
And then you just start writing Python code.


00:34:35.420 --> 00:34:38.420
So you can either use a PyTorch-style programming,


00:34:38.420 --> 00:34:41.940
or I think down here there's a hugging face variant as well.


00:34:41.940 --> 00:34:45.900
So it's a little bit cleaner, a little bit nicer.


00:34:45.900 --> 00:34:49.100
So he just, your model is from pre-trained


00:34:49.100 --> 00:34:51.180
Microsoft slash bio GPT.


00:34:51.180 --> 00:34:55.900
And there's even a thing where you can try it out down here.


00:34:55.900 --> 00:35:00.540
There's like a live, yeah, some answering questions.


00:35:00.540 --> 00:35:02.980
For example, he can pull this up


00:35:02.980 --> 00:35:04.600
and you can ask it questions.


00:35:04.600 --> 00:35:08.520
For example, this one,


00:35:08.520 --> 00:35:14.340
should chest wall irradiation be included after...


00:35:14.340 --> 00:35:16.540
Yes, it's just yes.


00:35:16.540 --> 00:35:18.260
I don't know, people can play around with the examples.


00:35:18.260 --> 00:35:19.220
Like I said, I'm not a doctor.


00:35:19.220 --> 00:35:21.520
I don't really know reasonable things to ask it,


00:35:21.520 --> 00:35:25.140
but it's a weird world that we live in


00:35:25.140 --> 00:35:28.340
and it has lots of positives and lots of negatives,


00:35:28.340 --> 00:35:29.980
I'm sure, that we're gonna come to learn about,


00:35:29.980 --> 00:35:33.940
but BioGPT, if you're working on analyzing medical texts,


00:35:33.940 --> 00:35:35.820
check this out, it's from Microsoft.


00:35:35.820 --> 00:35:39.060
- I think anything that would reduce the amount of time


00:35:39.060 --> 00:35:41.300
doctors and medical professionals have to spend


00:35:41.300 --> 00:35:42.820
on the computer is probably good.


00:35:42.820 --> 00:35:46.100
So if this means they need to enter less things in


00:35:46.100 --> 00:35:49.140
because it's just like figuring stuff out for them,


00:35:49.140 --> 00:35:51.300
then that would be really powerful.


00:35:51.300 --> 00:35:53.700
But if it's just another tool that they have to use


00:35:53.700 --> 00:35:57.180
on the internet that makes them not get to be face to face


00:35:57.180 --> 00:36:00.020
with their patients, then I'm just kind of skeptical of it.


00:36:00.020 --> 00:36:02.900
- Yeah, I feel like you could ask it questions like,


00:36:02.900 --> 00:36:06.600
we gave this person, here's their symptoms,


00:36:06.600 --> 00:36:08.220
we gave them this diagnosis,


00:36:08.220 --> 00:36:11.880
is that consistent with historical things?


00:36:11.880 --> 00:36:14.840
and they could do a lot of comparisons and analysis.


00:36:14.840 --> 00:36:17.280
Or do you think this person has this disease?


00:36:17.280 --> 00:36:18.320
Instead of just yes or no,


00:36:18.320 --> 00:36:19.760
it's like, why do you think that?


00:36:19.760 --> 00:36:21.640
You know, you could have this conversation with it


00:36:21.640 --> 00:36:23.880
and it may be able to tell you.


00:36:23.880 --> 00:36:26.080
- Yeah, that's really cool.


00:36:26.080 --> 00:36:27.040
- Indeed.


00:36:27.040 --> 00:36:27.960
All right.


00:36:27.960 --> 00:36:31.360
- Well, I guess I was joking about it a little bit,


00:36:31.360 --> 00:36:33.560
but I think there's a lot of power there.


00:36:33.560 --> 00:36:37.360
I mean, like you said, I don't know,


00:36:37.360 --> 00:36:40.520
if we can get doctors actually seeing people more,


00:36:40.520 --> 00:36:44.160
but also maybe a 911 call could like,


00:36:44.160 --> 00:36:46.440
if we determine it's not an emergency yet,


00:36:46.440 --> 00:36:47.760
but maybe we could direct the person


00:36:47.760 --> 00:36:50.600
to the right place faster.


00:36:50.600 --> 00:36:53.280
I mean, there's lots of places where maybe somebody


00:36:53.280 --> 00:36:55.560
not with like the full degree,


00:36:55.560 --> 00:36:58.240
but somebody that's still like pretty involved


00:36:58.240 --> 00:37:02.680
with medicine can utilize this to ask better questions


00:37:02.680 --> 00:37:05.160
and get somebody to somewhere faster.


00:37:05.160 --> 00:37:06.920
- Right, or even highlight,


00:37:06.920 --> 00:37:10.040
what were the key takeaways from this visit with the doctor?


00:37:10.040 --> 00:37:10.540
Yeah.


00:37:10.540 --> 00:37:11.040
Right?


00:37:11.040 --> 00:37:11.540
Yeah.


00:37:11.540 --> 00:37:12.040
Yeah.


00:37:12.040 --> 00:37:15.200
So anyway, it's cool.


00:37:15.200 --> 00:37:15.700
Yep.


00:37:15.700 --> 00:37:15.980
All right.


00:37:15.980 --> 00:37:17.400
One more bit of feedback out there.


00:37:17.400 --> 00:37:18.140
Will McGugan.


00:37:18.140 --> 00:37:18.980
Hey, Will.


00:37:18.980 --> 00:37:23.700
This is the kind of thing I'd like to see from AI used for not putting artists


00:37:23.700 --> 00:37:25.140
and copywriters out of business.


00:37:25.140 --> 00:37:27.220
Yeah, I agree.


00:37:27.220 --> 00:37:31.780
Amplifying people's good work, not necessarily replacing it.


00:37:31.780 --> 00:37:32.540
Yeah.


00:37:32.540 --> 00:37:34.020
See where it goes.


00:37:34.020 --> 00:37:34.940
All right.


00:37:34.940 --> 00:37:37.300
Erin, got the last one?


00:37:37.300 --> 00:37:37.780
Oh, OK.


00:37:37.780 --> 00:37:39.180
Great.


00:37:39.180 --> 00:37:42.420
So yeah, talking about code mentorship


00:37:42.420 --> 00:37:44.500
and communicating with new developers,


00:37:44.500 --> 00:37:46.640
that's my next topic.


00:37:46.640 --> 00:37:51.640
So Sheena O'Connell gave a talk at DjangoCon last year.


00:37:51.640 --> 00:37:54.680
I attended that conference, but I missed this talk


00:37:54.680 --> 00:37:56.760
and watched it online later.


00:37:56.760 --> 00:37:58.920
And it's about her work at Muzi,


00:37:58.920 --> 00:38:01.160
training unemployed young people


00:38:01.160 --> 00:38:04.000
in underserved communities in Africa.


00:38:04.000 --> 00:38:07.920
So her company had to quickly build


00:38:07.920 --> 00:38:10.360
an online learning management system


00:38:10.360 --> 00:38:12.180
when the pandemic hit in 2020.


00:38:12.180 --> 00:38:16.240
And they built that LMS in Django,


00:38:16.240 --> 00:38:18.940
which is why she was giving a talk at DjangoCon.


00:38:18.940 --> 00:38:21.340
Before then, the learning was all done in person.


00:38:21.340 --> 00:38:26.140
So anyway, you might think like, that's cool and all,


00:38:26.140 --> 00:38:29.300
but how can I apply that to me?


00:38:29.300 --> 00:38:32.320
And I think that this talk is really excellent.


00:38:32.320 --> 00:38:36.020
I also think, I don't know if you all have ever listened


00:38:36.020 --> 00:38:39.680
to the Django chat podcast, they had Sheena on


00:38:39.680 --> 00:38:44.320
and she talked about her work at Umuze


00:38:44.320 --> 00:38:48.840
and she talked about getting learners to review each other


00:38:48.840 --> 00:38:53.080
and also teaching green developers how to use GitHub


00:38:53.080 --> 00:38:55.000
and things like that so they don't quote,


00:38:55.000 --> 00:38:57.960
bother their teammates too much once they get


00:38:57.960 --> 00:39:02.000
into their jobs after they're finished at Umuze.


00:39:02.000 --> 00:39:05.680
And she specifically said, the quote I liked was,


00:39:05.680 --> 00:39:07.800
What sort of thing does a person need to know


00:39:07.800 --> 00:39:09.800
in order to not annoy their coworkers


00:39:09.800 --> 00:39:11.400
in the first three months?


00:39:11.400 --> 00:39:14.980
So I really liked thinking about the learning in that way.


00:39:14.980 --> 00:39:21.200
And yeah, so something we started doing recently


00:39:21.200 --> 00:39:25.120
where I work is we had been doing code reviews,


00:39:25.120 --> 00:39:26.520
me and the other code-based lead


00:39:26.520 --> 00:39:29.560
had been kind of just doing them all ourselves.


00:39:29.560 --> 00:39:33.960
And our project manager, Matt, suggested we take,


00:39:33.960 --> 00:39:37.820
we have a new requirement where two non-code-based leads


00:39:37.820 --> 00:39:40.020
have to review any pull request


00:39:40.020 --> 00:39:42.460
before any code-based lead looks at it.


00:39:42.460 --> 00:39:45.340
So that's something we just implemented.


00:39:45.340 --> 00:39:48.780
And have either of you have familiarity


00:39:48.780 --> 00:39:52.440
with pull requests and code reviews in your day-to-day?


00:39:52.440 --> 00:39:53.280
- Yes.


00:39:53.280 --> 00:39:55.800
(laughing)


00:39:55.800 --> 00:39:59.600
- Yeah, so I have to say it's really like


00:39:59.600 --> 00:40:01.140
been really helpful to us.


00:40:01.140 --> 00:40:05.040
and I liked Sheena talking about that


00:40:05.040 --> 00:40:07.700
on the Django chat podcast.


00:40:07.700 --> 00:40:10.020
She also mentioned that at Umuzee,


00:40:10.020 --> 00:40:12.920
the learners review each other.


00:40:12.920 --> 00:40:15.420
So someone who is further along in her course


00:40:15.420 --> 00:40:17.700
gets to both learn how to review code


00:40:17.700 --> 00:40:22.480
and also review someone else's answer.


00:40:22.480 --> 00:40:24.820
Because with Python,


00:40:24.820 --> 00:40:27.700
there are a lot of different correct answers, right?


00:40:27.700 --> 00:40:32.700
So just like reactivating that part of their brain


00:40:32.700 --> 00:40:36.220
to look back at a previous answer is kind of cool.


00:40:36.220 --> 00:40:39.020
Yeah.


00:40:39.020 --> 00:40:42.800
- I also think that it's cool that


00:40:42.800 --> 00:40:47.420
they're learning more than just loops, variables, functions,


00:40:47.420 --> 00:40:51.900
but how to coexist as a teammate in a software team.


00:40:51.900 --> 00:40:53.220
- Yeah.


00:40:53.220 --> 00:40:54.380
- Yeah, that's cool.


00:40:54.380 --> 00:40:55.220
- Yeah.


00:40:56.540 --> 00:41:01.540
- Yeah, so we're always looking for new ways


00:41:01.540 --> 00:41:03.260
to like onboard developers.


00:41:03.260 --> 00:41:07.540
And another cool idea that Sheena had was


00:41:07.540 --> 00:41:09.900
writing half solutions and leaving gaps


00:41:09.900 --> 00:41:11.020
for others to fill in the blank.


00:41:11.020 --> 00:41:12.000
I thought that was kind of cool


00:41:12.000 --> 00:41:16.320
because when we onboard a new developer to our code base,


00:41:16.320 --> 00:41:17.580
it can be really rocky.


00:41:17.580 --> 00:41:20.340
And I kind of thought like, oh, that might be kind of neat.


00:41:20.340 --> 00:41:22.780
Instead of giving them a whole ticket to work on,


00:41:22.780 --> 00:41:24.400
like half finishing the ticket


00:41:24.400 --> 00:41:26.180
and like letting them fill in the other blanks.


00:41:26.180 --> 00:41:28.280
This is kind of cool.


00:41:28.280 --> 00:41:31.580
And just one more article that I found about this


00:41:31.580 --> 00:41:34.540
was on the Cactus blog.


00:41:34.540 --> 00:41:38.860
I used to work at Cactus as a Django developer there.


00:41:38.860 --> 00:41:42.100
And so I still follow their blog quite often.


00:41:42.100 --> 00:41:45.220
And they had this recent blog post


00:41:45.220 --> 00:41:49.580
from Dimitri Chukin about their new internal mentorship


00:41:49.580 --> 00:41:53.380
program there, where they have three different paths.


00:41:53.380 --> 00:41:58.520
And one is apprenticeship for folks just starting out as developers.


00:41:58.520 --> 00:42:04.420
One is for fellowship, and that's for people who are currently training in one of those coding camps.


00:42:04.420 --> 00:42:09.720
And then the third one, which is really kind of special, is mentorship for high school students.


00:42:09.720 --> 00:42:12.920
So I thought that was kind of neat.


00:42:12.920 --> 00:42:17.360
We're still, where I work, we're still figuring out how to onboard people.


00:42:17.360 --> 00:42:19.600
I feel like that is one of the hardest things.


00:42:19.600 --> 00:42:22.300
Do you both know what I'm talking about?


00:42:22.800 --> 00:42:25.340
- Onboarding is extremely difficult


00:42:25.340 --> 00:42:27.480
and it depends on how much,


00:42:27.480 --> 00:42:30.360
well it depends on the skill set you need people to have.


00:42:30.360 --> 00:42:33.080
I mean, when you have a diverse set of skills,


00:42:33.080 --> 00:42:34.020
we always face that.


00:42:34.020 --> 00:42:38.600
So I need somebody that knows both Python well,


00:42:38.600 --> 00:42:41.560
testing practices well, C++ well,


00:42:41.560 --> 00:42:45.040
and it'd be great if they also knew RF measurements


00:42:45.040 --> 00:42:47.680
and stuff like that, and you just can't find those people.


00:42:47.680 --> 00:42:50.520
So you have to pick where you want somebody


00:42:50.520 --> 00:42:51.920
to complement somebody else with


00:42:51.920 --> 00:42:56.160
and know that you're going to have to help train.


00:42:56.160 --> 00:42:58.320
>> They support them in the other areas, yeah.


00:42:58.320 --> 00:42:59.920
>> Yeah. >> Yeah, cool.


00:42:59.920 --> 00:43:04.120
>> And one of the things you mentioned, like code reviews,


00:43:04.120 --> 00:43:08.840
we use code reviews a lot for communication,


00:43:08.840 --> 00:43:12.200
not necessarily for people to catch


00:43:12.200 --> 00:43:13.640
what somebody else is doing wrong,


00:43:13.640 --> 00:43:15.360
but to make sure that everybody understands


00:43:15.360 --> 00:43:17.280
what the rest of the team is working on.


00:43:17.280 --> 00:43:19.960
So we, especially for long-running things,


00:43:21.000 --> 00:43:23.560
we have a practice of using draft code reviews.


00:43:23.560 --> 00:43:25.960
So code reviews and drafts so that,


00:43:25.960 --> 00:43:27.840
and GitLab won't let you merge it


00:43:27.840 --> 00:43:29.720
if it says draft in the title.


00:43:29.720 --> 00:43:33.860
So then people can just keep updating that


00:43:33.860 --> 00:43:36.900
and then they can get feedback even when it's not ready,


00:43:36.900 --> 00:43:38.100
when the code's not ready yet.


00:43:38.100 --> 00:43:40.340
So good way to do that.


00:43:40.340 --> 00:43:43.240
- Yeah. - Cool.


00:43:43.240 --> 00:43:45.400
Well, nice find, Aaron.


00:43:45.400 --> 00:43:46.240
All right. - Nice.


00:43:46.240 --> 00:43:47.540
- That's all of our items.


00:43:47.540 --> 00:43:49.360
Brian, you got some extras for us to share?


00:43:49.360 --> 00:43:51.080
Anything else you want to throw out there real quick?


00:43:51.080 --> 00:43:52.640
- No, I spent most of my extra time


00:43:52.640 --> 00:43:54.560
getting my talk ready for PyCascades.


00:43:54.560 --> 00:43:56.480
So PyCascades is coming up soon.


00:43:56.480 --> 00:43:57.520
- Yeah, indeed.


00:43:57.520 --> 00:43:59.320
Coming up very soon.


00:43:59.320 --> 00:44:00.560
Excellent.


00:44:00.560 --> 00:44:01.400
Erin, how about you?


00:44:01.400 --> 00:44:02.520
Want to throw anything out there?


00:44:02.520 --> 00:44:05.480
- Yeah, DjangoCon US is in Durham,


00:44:05.480 --> 00:44:07.280
which is 15 minutes from where I live.


00:44:07.280 --> 00:44:08.280
So I'm excited.


00:44:08.280 --> 00:44:10.400
- Nice.


00:44:10.400 --> 00:44:13.400
- North Carolina is a fun place to visit.


00:44:13.400 --> 00:44:15.960
It's generally warm, although not always warm,


00:44:15.960 --> 00:44:17.840
but generally warmer than a lot of places.


00:44:17.840 --> 00:44:23.160
Generally warmer and it's in October, so it'll be kind of a nice time of year, probably.


00:44:23.160 --> 00:44:26.120
Hopefully not boiling hot, but yeah, probably not.


00:44:26.120 --> 00:44:27.140
Cool.


00:44:27.140 --> 00:44:32.200
I'll have to try to see if I can get an excuse to get out there. That'd be fun.


00:44:32.200 --> 00:44:34.840
All right, excellent. Anything else?


00:44:34.840 --> 00:44:36.820
Is that it?


00:44:36.820 --> 00:44:37.640
How about you?


00:44:37.640 --> 00:44:38.760
Yeah, I got one.


00:44:38.760 --> 00:44:40.560
You know I do.


00:44:40.560 --> 00:44:44.080
All right, so an article came out a few days ago.


00:44:44.080 --> 00:44:49.760
security researchers uncover 700 malicious open source packages on npm and PyPI.


00:44:49.760 --> 00:44:52.440
This used to be a thing that could even headline.


00:44:52.440 --> 00:44:55.840
I think we even headlined in like was the title of one of our shows, Brian.


00:44:55.840 --> 00:44:57.800
The news here is not this.


00:44:57.800 --> 00:45:00.880
The news is that this stuff is just not news anymore.


00:45:00.880 --> 00:45:05.000
So people be careful out there when you pip install stuff.


00:45:05.000 --> 00:45:06.640
Make sure you spell it right.


00:45:06.640 --> 00:45:10.800
That's like the that's generally the worst thing is the typo squatting.


00:45:10.800 --> 00:45:13.880
So anyway, the fact that this is not really true.


00:45:13.960 --> 00:45:15.600
I didn't realize that that's how they were.


00:45:15.600 --> 00:45:16.880
Oh, that's so smart.


00:45:16.880 --> 00:45:20.440
- Like I put a virus in request instead of requests


00:45:20.440 --> 00:45:21.960
with the plural, you know what I mean?


00:45:21.960 --> 00:45:24.240
Or if you transpose two letters


00:45:24.240 --> 00:45:27.640
and there's some stuff that the PIPA is trying to do


00:45:27.640 --> 00:45:30.800
to support that, but it's still tricky.


00:45:30.800 --> 00:45:33.280
- Or standard lib stuffs that you don't have to install.


00:45:33.280 --> 00:45:35.680
It's just there, people spot on that.


00:45:35.680 --> 00:45:36.520
- Right, right.


00:45:36.520 --> 00:45:40.480
Yeah, and create a package for that.


00:45:40.480 --> 00:45:43.600
All right, that's not the end of it.


00:45:43.600 --> 00:45:45.760
Another one, Brian, do you remember I announced,


00:45:45.760 --> 00:45:47.280
hey everybody, update your Git.


00:45:47.280 --> 00:45:50.320
There's a security vulnerability in Git.


00:45:50.320 --> 00:45:51.480
This is the first time this has happened


00:45:51.480 --> 00:45:52.720
in a really long time.


00:45:52.720 --> 00:45:53.640
- Yeah.


00:45:53.640 --> 00:45:56.960
- Make sure you apply Git,


00:45:56.960 --> 00:46:01.040
or you install 2.39.1 or higher.


00:46:01.040 --> 00:46:01.880
Well, guess what?


00:46:01.880 --> 00:46:06.880
2.39.1 has a vulnerability that's completely different.


00:46:06.880 --> 00:46:09.520
But if you try to clone from a malicious repository,


00:46:09.520 --> 00:46:10.820
you're gonna be having a bad day.


00:46:10.820 --> 00:46:13.240
So update your Git again.


00:46:13.240 --> 00:46:15.900
All right.


00:46:15.900 --> 00:46:18.340
And then also, I'm working on a project now


00:46:18.340 --> 00:46:22.540
where I needed an ignore file,


00:46:22.540 --> 00:46:25.300
but the project was originally created in one language


00:46:25.300 --> 00:46:27.700
and I wanted the ignore file for another


00:46:27.700 --> 00:46:29.700
and I was basically going to combine them.


00:46:29.700 --> 00:46:32.740
So maybe you all know this, maybe you two know this,


00:46:32.740 --> 00:46:35.900
but GitHub, when you go to create a new project,


00:46:35.900 --> 00:46:37.900
you can choose what kind of project is it.


00:46:37.900 --> 00:46:38.900
Is it C++?


00:46:38.900 --> 00:46:39.740
Is it Python?


00:46:39.740 --> 00:46:40.560
Is it Dart?


00:46:40.560 --> 00:46:46.400
Flutter and you'll get a different ignore for that. Well, there's actually a


00:46:46.400 --> 00:46:51.760
repo github.com/github/gitignore and every single language that you could


00:46:51.760 --> 00:46:56.320
have chosen that drop down has its ignore file here. So for example the


00:46:56.320 --> 00:47:01.840
Python one, this it's checked into this project so when you say create a new


00:47:01.840 --> 00:47:07.080
Python project what comes out as the ignore is actually this file. So if


00:47:07.080 --> 00:47:09.880
if there's people out there who really need a change


00:47:09.880 --> 00:47:12.760
to the default behavior of the Python


00:47:12.760 --> 00:47:14.560
get ignore for projects, you know,


00:47:14.560 --> 00:47:16.000
you could go to a PR for this,


00:47:16.000 --> 00:47:17.860
but the way I use it is I just said,


00:47:17.860 --> 00:47:21.440
I also need one on Flutter or there's not a Flutter one,


00:47:21.440 --> 00:47:22.500
but there's a Dart one.


00:47:22.500 --> 00:47:25.680
So I grabbed the one for Dart and piled that in there as well.


00:47:25.680 --> 00:47:27.320
- You just add it to,


00:47:27.320 --> 00:47:30.000
or even if you're not using GitHub, you can use this for.


00:47:30.000 --> 00:47:30.840
- Yeah, exactly.


00:47:30.840 --> 00:47:31.660
It has nothing to do with GitHub.


00:47:31.660 --> 00:47:34.740
It's just, you have access to every version


00:47:34.740 --> 00:47:38.280
of an ignore file that GitHub thinks is good.


00:47:38.280 --> 00:47:41.880
Related to that is gitignore.io.


00:47:41.880 --> 00:47:43.100
This is another one you come down here


00:47:43.100 --> 00:47:44.020
and search for other stuff.


00:47:44.020 --> 00:47:45.920
Like for example, there was no Flutter,


00:47:45.920 --> 00:47:50.780
but in the GitHub one, but over here I can put Flutter.


00:47:50.780 --> 00:47:53.600
And here's my Flutter one for all the crazy build


00:47:53.600 --> 00:47:55.620
code generation madness you get.


00:47:55.620 --> 00:47:56.940
So this is a project by TopTile,


00:47:56.940 --> 00:47:59.480
but gitignore.io and you just put it in here.


00:47:59.480 --> 00:48:02.180
I'm looking for whatever.


00:48:02.180 --> 00:48:03.940
And then it'll pull up.


00:48:03.940 --> 00:48:06.580
- Let's see, type pytest, see if it'll do.


00:48:06.580 --> 00:48:10.180
No results. - No results found.


00:48:10.180 --> 00:48:12.500
Oh, oh, sad.


00:48:12.500 --> 00:48:14.460
Sad face.


00:48:14.460 --> 00:48:17.620
But anyway, if you're looking for ignores for projects,


00:48:17.620 --> 00:48:18.460
there you go.


00:48:18.460 --> 00:48:20.260
Those are kind of nice.


00:48:20.260 --> 00:48:21.780
- Cool, nice.


00:48:21.780 --> 00:48:25.140
- All right, are you all ready for a joke?


00:48:25.140 --> 00:48:25.980
- Yeah. - Yeah.


00:48:25.980 --> 00:48:28.100
- Brian, I thought about you on this one in particular,


00:48:28.100 --> 00:48:30.740
so we'll see what you think of it.


00:48:30.740 --> 00:48:33.780
So this is one, it's a cartoon,


00:48:33.780 --> 00:48:36.460
and it has a cartoon character looking at two red buttons.


00:48:36.460 --> 00:48:38.340
They're both gonna do something massive.


00:48:38.340 --> 00:48:40.740
One has the star asterisk character


00:48:40.740 --> 00:48:42.980
and one has the ampersand.


00:48:42.980 --> 00:48:45.180
And there's the person there just sweating out,


00:48:45.180 --> 00:48:47.060
like their fingers in the middle,


00:48:47.060 --> 00:48:48.780
doesn't know which one to pick.


00:48:48.780 --> 00:48:51.300
And it said, my C code isn't working.


00:48:51.300 --> 00:48:54.420
No one involves pointers.


00:48:54.420 --> 00:48:56.580
What do you think, Brian?


00:48:56.580 --> 00:48:58.140
- I would not hire this person.


00:48:58.140 --> 00:49:03.100
- So the star will dereference the pointer,


00:49:03.100 --> 00:49:05.900
turning a pointer into one less level of pointing


00:49:05.900 --> 00:49:08.620
and do a value where the ampersand will take a variable


00:49:08.620 --> 00:49:10.300
and make it a pointer, or if it is a pointer,


00:49:10.300 --> 00:49:13.660
make it a pointer to a pointer or even more so.


00:49:13.660 --> 00:49:14.540
Which one do you press?


00:49:14.540 --> 00:49:15.360
Oh my gosh.


00:49:15.360 --> 00:49:18.740
- Should be obvious by context.


00:49:18.740 --> 00:49:21.700
- It says a C++.


00:49:21.700 --> 00:49:24.580
(laughing)


00:49:24.580 --> 00:49:26.620
Erin, do you have to do any of this kind of crazy stuff


00:49:26.620 --> 00:49:29.860
or are you thankfully above and beyond the pointer world?


00:49:29.860 --> 00:49:32.240
- I am, yeah, thankfully not.


00:49:32.240 --> 00:49:36.240
Yeah, no C++ in my world.


00:49:36.240 --> 00:49:37.080
- Yeah.


00:49:37.080 --> 00:49:39.640
All right, well, that's what I got.


00:49:39.640 --> 00:49:40.960
I brought that one for you, Brian.


00:49:40.960 --> 00:49:42.120
- That's good, thanks.


00:49:42.120 --> 00:49:46.240
I'll incorporate that into my next interview.


00:49:46.240 --> 00:49:52.840
- You need to change a string, you're given a variable.


00:49:52.840 --> 00:49:54.400
Which one of these do you push?


00:49:54.400 --> 00:49:56.680
All right. - Nice, all right.


00:49:56.680 --> 00:49:58.360
- Cool, all right.


00:49:58.360 --> 00:50:01.240
Well, Erin, it's been great to have you on the show.


00:50:01.240 --> 00:50:02.280
Thanks for being here.


00:50:02.280 --> 00:50:03.440
- Thanks for having me.


00:50:03.440 --> 00:50:04.800
Nice to meet you both.


00:50:04.800 --> 00:50:05.640
- Yeah, you bet.


00:50:05.640 --> 00:50:06.480
And Brian, thanks as always.


00:50:06.480 --> 00:50:07.320
- See you.


00:50:07.320 --> 00:50:08.140
- Bye.


00:50:08.140 --> 00:50:18.140
[BLANK_AUDIO]

