WEBVTT

00:00:00.001 --> 00:00:10.440
hello everybody hello Michael hey there we really should have kicked off the shift to Monday next

00:00:10.440 --> 00:00:17.340
week instead of this week because this week's a holiday we're on Tuesday but it was a leap Monday

00:00:17.340 --> 00:00:22.080
yeah or the reverse of that or something yes okay so next week we'll be on Monday

00:00:22.080 --> 00:00:27.720
but it's good to be here how should we kick it off let's kick it off all right

00:00:28.680 --> 00:00:34.140
hello and welcome to Python Bytes where we deliver Python news and headlines directly to earbuds this

00:00:34.140 --> 00:00:42.060
is episode 399 recorded September 3rd 2024 and I am Brian Okken and I'm Michael Kennedy

00:00:42.060 --> 00:00:48.000
I always have to check the date because I write down in the notes what the what the date is but

00:00:48.000 --> 00:00:54.060
sometimes I start the notes a day early and I get the day wrong but yeah it is September 3rd anyway

00:00:54.060 --> 00:01:00.120
thanks everybody for joining thank you everybody that has supported our work that this episode is

00:01:00.120 --> 00:01:06.660
sponsored by us so please check out our courses and and also thank you to patreon supporters for helping

00:01:06.660 --> 00:01:12.520
them if you'd like to connect with us you can always connect on Mastodon the links are in the

00:01:12.520 --> 00:01:24.900
show notes and we also you can join us live if you check out pythonbytes.fm/live you can see when we are next it's usually

00:01:24.900 --> 00:01:26.400
upcoming going to be

00:01:26.400 --> 00:01:30.220
on Mondays at 10 a.m. and

00:01:30.820 --> 00:01:49.820
finally if you'd like to join the friends of the show list or what that is the email list so that you get mostly you'll get the show notes with all the links to everything we talk about in your inbox which is a good thing so send that up but let's get on with the show Michael what would you like to start with?

00:01:49.820 --> 00:02:07.820
Michael Leach: I would like to talk about virtual environments how about that yeah actually this is a really fun topic this comes from Hynek he wrote yesterday an article I feel like this is one of the things you write where it's like all right I'll write it down

00:02:07.820 --> 00:02:36.820
Michael Leach: you keep asking me I'll write it down so we can just have it there to point at and the article is entitled why I still use Python virtual environments in Docker I was checking out this thing that Hynek wrote about using UV and its project management features inside of Docker containers and there's a bunch of funkiness if you look at his article he links over to a GitHub post GitHub issue I guess and

00:02:36.820 --> 00:03:03.820
Michael Leach: and there it's you know we've got Hynek jumping in you've got Sebastian from FastAPI jumping in you know I'd like a bunch of pretty significant folks going almost a little more help for us Docker people so as I've talked about for Python bytes and all the talk Python things and other infrastructures running in Docker these days it's glorious

00:03:03.820 --> 00:03:30.820
Michael Leach: we've got we've got one big server with eight CPUs and 17 different multi tier apps running on it's fantastic and I happen to use this as well and I just thought it was really interesting to hear Hynek's recommendations and mostly on on the wise okay because with Docker the Python in the Docker container is really only going to be used for

00:03:30.820 --> 00:03:47.820
Michael Leach: the particular app that's being shipped like usually put just one thing into a Docker container one app and if you need two apps you often run to Docker containers so why why not just blast on the built in Python or something along those lines right.

00:03:47.820 --> 00:03:49.820
Michael Leach: Yeah you're not trying to isolate from anything.

00:03:49.820 --> 00:03:51.820
Michael Leach: So yeah exactly.

00:03:51.820 --> 00:03:52.820
Michael Leach: Well.

00:03:52.820 --> 00:03:58.820
Michael Leach: I can just hear Hynek now going yes but let me write this down.

00:03:58.820 --> 00:04:11.820
Michael Leach: So I let's flip over to Omnivore app because that's what you should be using if you do long form reading and note taking Omnivore is that and this is great for for notes.

00:04:11.820 --> 00:04:13.820
Michael Leach: This is why I still use this right like what's going on here says.

00:04:13.820 --> 00:04:16.820
Michael Leach: As an overarching theme.

00:04:16.820 --> 00:04:26.820
Michael Leach: My goal Hynek's is not mindlessly follow some best practices that add complexity for questionable payoffs because a big tech developer advocates.

00:04:26.820 --> 00:04:43.820
Michael Leach: So at a conference but to spend a lot of time thinking about what secondary effects things that you do and it's not so much about how many keys you got to press but how hard is it to reason about what's going to happen as a consequence of a particular setup you know.

00:04:43.820 --> 00:04:44.820
Michael Leach: Okay.

00:04:44.820 --> 00:04:45.820
Michael Leach: Yeah.

00:04:45.820 --> 00:04:46.820
Michael Leach: So that's fair.

00:04:46.820 --> 00:04:52.820
Michael Leach: And basically this is look people understand virtual environments really really well.

00:04:52.820 --> 00:04:56.820
Michael Leach: It's the whole goal of virtual environments is to hold a single application.

00:04:56.820 --> 00:05:02.820
Michael Leach: If I tell you in documentation or a meeting or a talk or a course or whatever.

00:05:02.820 --> 00:05:05.820
Michael Leach: Hey, what we're deploying is a virtual environment like ah, I know what that is.

00:05:05.820 --> 00:05:07.820
Michael Leach: That's pretty straightforward.

00:05:07.820 --> 00:05:09.820
Michael Leach: And this is Hynek's words.

00:05:09.820 --> 00:05:17.820
Michael Leach: It's the closest thing that we have to an enclosed standardized and well understood application build artifact in Python.

00:05:17.820 --> 00:05:22.820
Michael Leach: The stretch he says, but he thinks of virtual environments as the result of linking.

00:05:22.820 --> 00:05:25.820
Michael Leach: A dynamic binary in compiled languages, which is pretty interesting.

00:05:25.820 --> 00:05:26.820
Michael Leach: Hmm.

00:05:26.820 --> 00:05:27.820
Michael Leach: Kind of.

00:05:27.820 --> 00:05:28.820
Michael Leach: Yeah, I can see the analogy.

00:05:28.820 --> 00:05:29.820
Michael Leach: Yeah, exactly.

00:05:29.820 --> 00:05:30.820
Michael Leach: I do too.

00:05:30.820 --> 00:05:31.820
Totally.

00:05:31.820 --> 00:05:33.820
Michael Leach: So you've got your Python source code, you've got your list of dependencies.

00:05:33.820 --> 00:05:37.820
That's kind of like your statically linked libraries in your in your compiler.

00:05:37.820 --> 00:05:44.820
And then what you get out is the actual libraries, not a list of names, and your code potentially

00:05:44.820 --> 00:05:47.820
Michael Leach: PYC files precompiled, etc.

00:05:47.820 --> 00:05:48.820
And so on.

00:05:48.820 --> 00:05:50.820
Michael Leach: So I think that makes a ton of sense.

00:05:50.820 --> 00:05:53.820
Michael Leach: It certainly seems that way to me.

00:05:53.820 --> 00:05:59.820
Michael Leach: And it's good to use the same tools and primitives that you have in development

00:05:59.820 --> 00:06:00.820
and in production.

00:06:00.820 --> 00:06:01.820
So they're not vastly different.

00:06:01.820 --> 00:06:04.820
And in development, you typically use virtual environments.

00:06:04.820 --> 00:06:06.820
So why not in production?

00:06:06.820 --> 00:06:07.820
Right?

00:06:07.820 --> 00:06:08.820
Michael Leach: Yeah.

00:06:08.820 --> 00:06:13.820
Michael Leach: Moreover, import complexity debugging says, did you know this?

00:06:13.820 --> 00:06:14.820
Michael Leach: You maybe know this.

00:06:14.820 --> 00:06:15.820
I didn't know this, actually.

00:06:15.820 --> 00:06:24.820
Michael Leach: If you pass dash capital I to Python, then it limits where the imports come

00:06:24.820 --> 00:06:30.820
from, and will only import from either the standard library, or the virtual environment,

00:06:30.820 --> 00:06:34.820
and nothing else, as opposed to say falling back to, well, it's not the virtual environment.

00:06:34.820 --> 00:06:42.820
Michael Leach: So it's in the Python path or so it's in the --user version or whatever.

00:06:42.820 --> 00:06:43.820
Right?

00:06:43.820 --> 00:06:44.820
Michael Leach: Hmm.

00:06:44.820 --> 00:06:45.820
Michael Leach: So that's kind of nice.

00:06:45.820 --> 00:06:52.820
Michael Leach: And then finally, as a bonus says, I'll have no fury like how I feel about

00:06:52.820 --> 00:06:54.820
pip install --user.

00:06:54.820 --> 00:06:59.820
Michael Leach: So, you know, anyway, it's, it's an interesting thing.

00:06:59.820 --> 00:07:08.820
Michael Leach: You can check this out and I follow the same philosophy, but I didn't in

00:07:08.820 --> 00:07:11.820
my mind have it as crystallized as what Henning did.

00:07:11.820 --> 00:07:14.820
So I really liked this, this take on it.

00:07:14.820 --> 00:07:18.820
And people who get this podcast, visit the website or even just get the MP3.

00:07:18.820 --> 00:07:22.820
Michael Leach: All that is happening through a virtual environment running Python 312 in

00:07:22.820 --> 00:07:23.820
a Docker container.

00:07:23.820 --> 00:07:24.820
How about that?

00:07:24.820 --> 00:07:25.820
That's pretty cool.

00:07:25.820 --> 00:07:27.820
Michael Leach: It is pretty cool.

00:07:27.820 --> 00:07:28.820
Michael Leach: It is.

00:07:28.820 --> 00:07:29.820
It is.

00:07:29.820 --> 00:07:32.820
Michael Leach: But I'm not trying to convince you to do anything.

00:07:32.820 --> 00:07:35.820
Michael Leach: Kind of is.

00:07:35.820 --> 00:07:37.820
Michael Leach: But, but don't tell me that I'm wrong.

00:07:37.820 --> 00:07:38.820
Michael Leach: Yeah, sure.

00:07:38.820 --> 00:07:39.820
Okay.

00:07:39.820 --> 00:07:41.820
Michael Leach: You think it's the vibes there.

00:07:41.820 --> 00:07:42.820
Michael Leach: Anyway, well done.

00:07:42.820 --> 00:07:43.820
Michael Leach: Okay.

00:07:43.820 --> 00:07:45.820
Michael Leach: People can check that out.

00:07:45.820 --> 00:07:46.820
Michael Leach: Nice.

00:07:46.820 --> 00:07:50.820
Michael Leach: I want to talk about the developer survey.

00:07:50.820 --> 00:07:54.820
Michael Leach: So, I clicked on the wrong thing.

00:07:54.820 --> 00:07:55.820
Michael Leach: Today.

00:07:55.820 --> 00:07:57.820
Michael Leach: Yes, I did.

00:07:57.820 --> 00:07:59.820
Michael Leach: I have to share.

00:07:59.820 --> 00:08:00.820
Michael Leach: So sorry for the delay.

00:08:00.820 --> 00:08:03.820
Michael Leach: I have to share a different screen present.

00:08:03.820 --> 00:08:05.820
Michael Leach: I should have done this beforehand.

00:08:05.820 --> 00:08:06.820
Michael Leach: We'll cut this out.

00:08:06.820 --> 00:08:09.820
Michael Leach: Stop.

00:08:09.820 --> 00:08:11.820
Michael Leach: Sure screen.

00:08:11.820 --> 00:08:12.820
Michael Leach: Sure screen.

00:08:12.820 --> 00:08:14.820
Michael Leach: Sorry, everybody window.

00:08:14.820 --> 00:08:15.820
Michael Leach: There we go.

00:08:15.820 --> 00:08:20.820
Michael Leach: Anyway, now with my topic.

00:08:20.820 --> 00:08:24.820
Michael Leach: So I would like to talk about the Python developer survey results.

00:08:24.820 --> 00:08:27.820
Michael Leach: This is done by the PSF and JetBrains.

00:08:27.820 --> 00:08:30.820
Michael Leach: And this is still not on the screen.

00:08:30.820 --> 00:08:32.820
Michael Leach: Ah, there we go.

00:08:32.820 --> 00:08:33.820
Michael Leach: There you go.

00:08:33.820 --> 00:08:37.820
Michael Leach: The developer survey.

00:08:37.820 --> 00:08:42.820
Michael Leach: With the it's funny developer s is on the next line.

00:08:42.820 --> 00:08:43.820
Michael Leach: That's funny.

00:08:43.820 --> 00:08:46.820
Michael Leach: Anyway, 2023 it's 2024 what's going on?

00:08:46.820 --> 00:08:49.820
Michael Leach: Well, they they do this kind of at the end.

00:08:49.820 --> 00:08:54.820
Michael Leach: It's from November of 2023 to February 2024 is when they're collecting it.

00:08:54.820 --> 00:08:57.820
Michael Leach: So and then they analyze it and come up with this cool thing.

00:08:57.820 --> 00:09:02.820
Michael Leach: And so that's why we get it a few months later, which now we're ready.

00:09:02.820 --> 00:09:05.820
Michael Leach: So anyway, let's let's look at some of the cool results.

00:09:05.820 --> 00:09:06.820
Michael Leach: So this is pretty neat.

00:09:06.820 --> 00:09:09.820
Michael Leach: They've got the contents broken out into all sorts of stuff.

00:09:09.820 --> 00:09:13.820
Michael Leach: Python versions data science, a lot of data science stuff in here now.

00:09:13.820 --> 00:09:16.820
Michael Leach: But there's a bunch of stuff I thought was interesting.

00:09:16.820 --> 00:09:22.820
Michael Leach: We've got 85% of the survey respondents use Python as their main language

00:09:22.820 --> 00:09:23.820
versus secondary.

00:09:23.820 --> 00:09:27.820
Michael Leach: Hey, Brian, before we go on, I've not seen this at all.

00:09:27.820 --> 00:09:28.820
Michael Leach: I didn't even know they were out.

00:09:28.820 --> 00:09:31.820
Michael Leach: So really, whatever I say is first reaction.

00:09:31.820 --> 00:09:32.820
Michael Leach: I'm loving it.

00:09:32.820 --> 00:09:34.820
Michael Leach: I'm getting to experience it this way.

00:09:34.820 --> 00:09:35.820
Michael Leach: Cool.

00:09:35.820 --> 00:09:38.820
Michael Leach: And well, did you did you submit the survey?

00:09:38.820 --> 00:09:39.820
Michael Leach: Yeah, I filled it out.

00:09:39.820 --> 00:09:40.820
Michael Leach: Okay.

00:09:40.820 --> 00:09:41.820
Michael Leach: Long time ago.

00:09:41.820 --> 00:09:46.820
Michael Leach: I believe those numbers, the 85% main 15% secondary is identical to last year.

00:09:46.820 --> 00:09:47.820
Michael Leach: I can't remember.

00:09:47.820 --> 00:09:48.820
Michael Leach: Okay.

00:09:48.820 --> 00:09:49.820
Michael Leach: Sure, but yeah, very, very close.

00:09:49.820 --> 00:09:50.820
Michael Leach: It's interesting.

00:09:50.820 --> 00:09:53.820
Michael Leach: I can't, a lot of these, a lot of the results, they show what the last year's

00:09:53.820 --> 00:09:56.820
Michael Leach: But some of them they don't, they're just highlighted.

00:09:56.820 --> 00:09:59.820
Michael Leach: So maybe if you can probably get the data or something.

00:09:59.820 --> 00:10:04.820
Michael Leach: Anyway, the the Python usage with other languages.

00:10:04.820 --> 00:10:10.820
Michael Leach: I thought it was interesting that the the JavaScript and HTML is down a little

00:10:10.820 --> 00:10:11.820
Michael Leach: bit, just a little bit.

00:10:11.820 --> 00:10:20.820
Michael Leach: It was 37% JavaScript's 37% in 2022 and this times 35.

00:10:20.820 --> 00:10:22.820
Michael Leach: HTML was 36 now 32.

00:10:22.820 --> 00:10:24.820
Michael Leach: So it's gone down a little bit.

00:10:24.820 --> 00:10:25.820
Michael Leach: Right interesting.

00:10:25.820 --> 00:10:31.820
Michael Leach: You wonder if is that an actual decrease in use of HTML and JavaScript?

00:10:31.820 --> 00:10:36.820
Michael Leach: Are there more people coming into Python like on the data science side that don't care

00:10:36.820 --> 00:10:43.820
Michael Leach: about HTML and CSS and JavaScript, you know, maybe they just maybe it's being diluted,

00:10:43.820 --> 00:10:45.820
Michael Leach: but not lessened or maybe it is less.

00:10:45.820 --> 00:10:46.820
Michael Leach: I don't know.

00:10:46.820 --> 00:10:47.820
Michael Leach: Yeah, I don't think it's lessened.

00:10:47.820 --> 00:10:53.820
Michael Leach: I think just more people are using Python and Paul Everett notes that the the drop in HTML

00:10:53.820 --> 00:10:58.820
Michael Leach: and JavaScript might be might show that data science is increasing its share of Python.

00:10:58.820 --> 00:10:59.820
Michael Leach: And I think that's true.

00:10:59.820 --> 00:11:03.820
Michael Leach: The machine learning and data science is taking.

00:11:03.820 --> 00:11:09.820
Michael Leach: There's more more people coming into that than other than web development, I guess.

00:11:09.820 --> 00:11:11.820
Michael Leach: So I think that's there.

00:11:11.820 --> 00:11:15.820
Michael Leach: The rust was interesting because we talk about Python and rust a lot.

00:11:15.820 --> 00:11:25.820
Michael Leach: And still it's in its increased, but it's still 7% of the of this respondents are using rust also.

00:11:25.820 --> 00:11:28.820
Michael Leach: So so but those 7% are doing some cool stuff.

00:11:28.820 --> 00:11:31.820
Michael Leach: So so go rust.

00:11:31.820 --> 00:11:36.820
Michael Leach: Anyway, usage with other languages primary versus secondary.

00:11:36.820 --> 00:11:43.820
Michael Leach: Yeah, it's no surprises JavaScript HTML SQL bash C++ down at the bottom.

00:11:43.820 --> 00:11:45.820
Michael Leach: Let's see.

00:11:45.820 --> 00:11:48.820
Michael Leach: Skip down a little bit.

00:11:48.820 --> 00:11:58.820
Michael Leach: How long this is interesting when when especially when for people like you and me that train other people and teach other people stuff is to remember that.

00:11:58.820 --> 00:12:05.820
Michael Leach: A lot of people have only been using Python for a little while there's there's 25% less than a year.

00:12:05.820 --> 00:12:15.820
Michael Leach: But if you combine the less than a year and one to two years, it's like, you know, it's like 40% have been using it less than two years.

00:12:15.820 --> 00:12:21.820
Michael Leach: So you really can't assume that people know a lot of the Python history and stuff like that.

00:12:21.820 --> 00:12:29.820
Michael Leach: So the other thing that was interesting is absolutely new to coding, even if it's not Python, that's similar.

00:12:29.820 --> 00:12:44.820
Michael Leach: It's like 50% of the populations under two years, so or at least with of the survey respondents, but I would have expected the the survey respondents to be more edge towards experience folks myself, but exactly yeah.

00:12:44.820 --> 00:12:51.820
Michael Leach: 37% Python developers reported contributing to open source.

00:12:51.820 --> 00:12:53.820
Michael Leach: That's awesome in the last year.

00:12:53.820 --> 00:13:04.820
Michael Leach: That's actually higher than I would have expected, but that might be again the population of survey respondents, but yeah interesting.

00:13:04.820 --> 00:13:16.820
Michael Leach: Most contributions are in code 77% 38 documentation only 33 10 tests that's a bummer we got to bring the tests up a bit.

00:13:16.820 --> 00:13:23.820
Michael Leach: third, I don't know what this is 34% of Python developers report practicing collaborative development.

00:13:23.820 --> 00:13:26.820
Michael Leach: Is that like pair programming and stuff like that?

00:13:26.820 --> 00:13:27.820
Michael Leach: Maybe.

00:13:27.820 --> 00:13:30.820
Michael Leach: let's see.

00:13:30.820 --> 00:13:31.820
Michael Leach: Oh, look at this.

00:13:31.820 --> 00:13:33.820
Michael Leach: Favorite Python related resources.

00:13:33.820 --> 00:13:35.820
Michael Leach: I think this is new this year.

00:13:35.820 --> 00:13:40.820
Michael Leach: I've got YouTube channels, podcasts, blogs, of the podcast.

00:13:40.820 --> 00:13:41.820
Michael Leach: We've got talk Python to me.

00:13:41.820 --> 00:13:42.820
Michael Leach: Congrats.

00:13:42.820 --> 00:13:44.820
Michael Leach: It's not ordered.

00:13:44.820 --> 00:13:47.820
Michael Leach: It's just the top, I guess, but I think it might be ordered.

00:13:47.820 --> 00:13:48.820
Michael Leach: Talk Python to me.

00:13:48.820 --> 00:13:49.820
Michael Leach: Lex Friedman.

00:13:49.820 --> 00:13:50.820
Michael Leach: It's a good, good one.

00:13:50.820 --> 00:13:51.820
Michael Leach: Real Python people.

00:13:51.820 --> 00:13:52.820
Michael Leach: Django chat.

00:13:52.820 --> 00:13:53.820
Michael Leach: I love those guys.

00:13:53.820 --> 00:13:54.820
Michael Leach: Core.py.

00:13:54.820 --> 00:13:56.820
Michael Leach: Python bytes.

00:13:56.820 --> 00:13:58.820
Michael Leach: And then Python test.

00:13:58.820 --> 00:14:01.820
Michael Leach: I was, I was not expecting to have that show up.

00:14:01.820 --> 00:14:02.820
Michael Leach: That's awesome.

00:14:02.820 --> 00:14:03.820
Michael Leach: That is awesome.

00:14:03.820 --> 00:14:04.820
Michael Leach: We've got three podcasts in that list.

00:14:04.820 --> 00:14:05.820
Michael Leach: That's a, that's incredible.

00:14:05.820 --> 00:14:12.820
Michael Leach: But I probably, I, I, I changed just this last weekend, I changed Python test back to testing code.

00:14:12.820 --> 00:14:20.820
Michael Leach: Just right click on the page, Brian, and say edit is inspect and then edit HTML and it'd be fine.

00:14:20.820 --> 00:14:23.820
Michael Leach: Yeah, well.

00:14:23.820 --> 00:14:27.820
Michael Leach: I don't know how to save it after that, but it'll look fine for a little while.

00:14:27.820 --> 00:14:28.820
Michael Leach: Well, yeah.

00:14:28.820 --> 00:14:34.820
Michael Leach: Yeah, so if you click on it, it goes to Python test and you can click on testing code at that point.

00:14:34.820 --> 00:14:37.820
Michael Leach: So let's just, I guess I'll leave it at that.

00:14:37.820 --> 00:14:39.820
Michael Leach: I'm not changing it again.

00:14:39.820 --> 00:14:41.820
Michael Leach: It's sticking to testing code for a while.

00:14:41.820 --> 00:14:42.820
Michael Leach: Anyway.

00:14:42.820 --> 00:14:43.820
Michael Leach: Okay.

00:14:43.820 --> 00:14:49.820
Michael Leach: Do you use it for work or fun 51% use it for both work and personal.

00:14:49.820 --> 00:14:51.820
Michael Leach: So that's fun.

00:14:51.820 --> 00:14:57.820
Michael Leach: Only 21% for just for work with just a cool because I Python is so fun.

00:14:57.820 --> 00:15:00.820
Michael Leach: You should do it at home also, I guess.

00:15:00.820 --> 00:15:04.820
Michael Leach: Yeah, once you learn programming, you see the problems at home.

00:15:04.820 --> 00:15:06.820
Michael Leach: You're like, that has to be fixed.

00:15:06.820 --> 00:15:09.820
Michael Leach: There will be some code written that will fix this problem, whatever it is.

00:15:09.820 --> 00:15:10.820
Michael Leach: Yeah, yeah.

00:15:10.820 --> 00:15:14.820
Michael Leach: They added no, what you, what you use Python for.

00:15:14.820 --> 00:15:16.820
Michael Leach: They've added some categories.

00:15:16.820 --> 00:15:20.820
Michael Leach: So some of the, it's hard to compare the numbers year over year because there's

00:15:20.820 --> 00:15:21.820
new categories.

00:15:21.820 --> 00:15:26.820
Michael Leach: Like for instance, data analysis is still at the top at 44%, but it was 51 last year.

00:15:26.820 --> 00:15:34.820
Michael Leach: But there's also data engineering and academic research and ML ops added and they're

00:15:34.820 --> 00:15:35.820
Michael Leach: And data visualization.

00:15:35.820 --> 00:15:36.820
Michael Leach: Yeah.

00:15:36.820 --> 00:15:37.820
Michael Leach: Yeah.

00:15:37.820 --> 00:15:40.820
Michael Leach: So, and oh yeah, design data visualization.

00:15:40.820 --> 00:15:45.820
Michael Leach: Those are all it's, it's like tons of it.

00:15:45.820 --> 00:15:47.820
Michael Leach: That's what's people are using Python for.

00:15:47.820 --> 00:15:55.820
Michael Leach: So we could rename the podcast the the the language that uses that people use data

00:15:55.820 --> 00:15:58.820
Michael Leach: Data analysis for podcast or something.

00:15:58.820 --> 00:15:59.820
Michael Leach: I don't know.

00:15:59.820 --> 00:16:00.820
Michael Leach: Anyway.

00:16:00.820 --> 00:16:02.820
Michael Leach: where's testing?

00:16:02.820 --> 00:16:04.820
Michael Leach: I think testing.

00:16:04.820 --> 00:16:08.820
Michael Leach: Oh, testing is gone down to 23%.

00:16:08.820 --> 00:16:12.820
Michael Leach: It's probably we have so many users now we don't need to test as much.

00:16:12.820 --> 00:16:13.820
Michael Leach: They can do it.

00:16:13.820 --> 00:16:15.820
Michael Leach: I think it's the data analysis people.

00:16:15.820 --> 00:16:16.820
Michael Leach: I don't think they just yeah.

00:16:16.820 --> 00:16:17.820
Michael Leach: Yeah.

00:16:17.820 --> 00:16:19.820
Michael Leach: Well, when you're exploring data, you don't need to write tests.

00:16:19.820 --> 00:16:23.820
Michael Leach: It's not you're not going to keep it throw it away anyway.

00:16:23.820 --> 00:16:26.820
Michael Leach: Yeah, your data doesn't have to actually be right.

00:16:26.820 --> 00:16:28.820
Michael Leach: It could it could be wrong.

00:16:28.820 --> 00:16:31.820
Michael Leach: you're just like making decisions for the country based on it.

00:16:31.820 --> 00:16:33.820
Michael Leach: But you know, whatever.

00:16:33.820 --> 00:16:35.820
Michael Leach: okay.

00:16:35.820 --> 00:16:37.820
Michael Leach: Anyway, a whole bunch of fun stuff through here.

00:16:37.820 --> 00:16:44.820
Michael Leach: oh, there's a whole bunch of stuff around dot, doc, data analysis stuff

00:16:44.820 --> 00:16:49.820
Michael Leach: That I didn't really dig into, but I did think that the type Python version

00:16:49.820 --> 00:16:50.820
Michael Leach: Was interesting.

00:16:50.820 --> 00:16:55.820
Michael Leach: there's still Python to people around there's 6% of the people using Python

00:16:55.820 --> 00:16:57.820
to just I don't know why.

00:16:57.820 --> 00:17:00.820
Michael Leach: But anyway, two will not die.

00:17:00.820 --> 00:17:07.820
Michael Leach: the and I think that's pretty much it's got we went down 1% over last year

00:17:07.820 --> 00:17:11.820
Michael Leach: So that I guess we're making progress that long tail will take a while.

00:17:11.820 --> 00:17:16.820
Michael Leach: of the other versions of the Python 3 looks like 310 311 312 were the tops.

00:17:16.820 --> 00:17:20.820
Michael Leach: which is what you'd expect, I guess.

00:17:20.820 --> 00:17:21.820
Michael Leach: So.

00:17:21.820 --> 00:17:26.820
Michael Leach: It's good 75 almost 75% use the last last three versions.

00:17:26.820 --> 00:17:28.820
Michael Leach: So this is great.

00:17:28.820 --> 00:17:30.820
Michael Leach: and Python door dot orgs.

00:17:30.820 --> 00:17:33.820
Michael Leach: So most reasons most most used way to install.

00:17:33.820 --> 00:17:38.820
Michael Leach: So next year we'll see about UV Python install.

00:17:38.820 --> 00:17:39.820
Michael Leach: That's another one.

00:17:39.820 --> 00:17:40.820
Michael Leach: Yeah.

00:17:40.820 --> 00:17:43.820
Michael Leach: That's because they had some others, right?

00:17:43.820 --> 00:17:45.820
Michael Leach: Yeah, I might have the up to add that.

00:17:45.820 --> 00:17:49.820
Michael Leach: I think that we'll probably see that with, that was like virtual environment

00:17:49.820 --> 00:17:50.820
stuff somewhere.

00:17:50.820 --> 00:17:53.820
Michael Leach: Can we look at web frameworks real quick?

00:17:53.820 --> 00:17:54.820
Michael Leach: I know you just scroll by them.

00:17:54.820 --> 00:17:55.820
Michael Leach: Just scroll by them.

00:17:55.820 --> 00:17:58.820
Michael Leach: Web frameworks, Flask, Django requests, FastAPI.

00:17:58.820 --> 00:18:00.820
Michael Leach: I still don't know how these fit together.

00:18:00.820 --> 00:18:04.820
Michael Leach: It's like, what language do you see plus plus or CSS?

00:18:04.820 --> 00:18:06.820
Michael Leach: Yeah, I don't know.

00:18:06.820 --> 00:18:07.820
Michael Leach: I don't know the question.

00:18:07.820 --> 00:18:09.820
Michael Leach: So I'm gonna say that because we have flask and Django.

00:18:09.820 --> 00:18:14.820
Michael Leach: We also have HTTPX, which is a client on it.

00:18:14.820 --> 00:18:16.820
Michael Leach: It's like, yes, Firefox or flask.

00:18:16.820 --> 00:18:17.820
Michael Leach: It's like, huh?

00:18:17.820 --> 00:18:18.820
Michael Leach: Interesting.

00:18:18.820 --> 00:18:21.820
Michael Leach: Anyway, it's like requests, requests as well.

00:18:21.820 --> 00:18:22.820
Michael Leach: Yeah.

00:18:22.820 --> 00:18:25.820
Michael Leach: I think it's in a web category, but they feel convoluted.

00:18:25.820 --> 00:18:30.820
Michael Leach: But nonetheless, flask, Django and FastAPI, I think it is super interesting.

00:18:30.820 --> 00:18:35.820
Michael Leach: I think flask is gaining a lot of momentum for a second wind or fifth wind

00:18:35.820 --> 00:18:38.820
Michael Leach: or however many winds it's had plus one.

00:18:38.820 --> 00:18:42.820
Michael Leach: It seems like it's getting a lot of momentum these days, because I feel like

00:18:42.820 --> 00:18:46.820
Michael Leach: it had fallen a little bit, certainly relative to FastAPI.

00:18:46.820 --> 00:18:47.820
Michael Leach: So that's interesting.

00:18:47.820 --> 00:18:51.820
Michael Leach: Well, David Lord's been doing a bunch of cool work on it and other people

00:18:51.820 --> 00:18:55.820
Michael Leach: cleaning up and absolutely getting rid of some of the old stuff.

00:18:55.820 --> 00:19:01.820
Michael Leach: So I had him on talk Python to talk about the state of flask and pallets in 2024.

00:19:01.820 --> 00:19:03.820
Michael Leach: Maybe that's where I got my information from.

00:19:03.820 --> 00:19:04.820
Michael Leach: I just listened to that like last week.

00:19:04.820 --> 00:19:05.820
Michael Leach: Did you?

00:19:05.820 --> 00:19:06.820
Michael Leach: Oh, nice.

00:19:06.820 --> 00:19:07.820
Michael Leach: Good episode.

00:19:07.820 --> 00:19:10.820
Michael Leach: Test frameworks, py tests at the top 52%.

00:19:10.820 --> 00:19:11.820
Michael Leach: Yay.

00:19:11.820 --> 00:19:16.820
Michael Leach: Built in default still carries a lot of weight there, though.

00:19:16.820 --> 00:19:17.820
Michael Leach: Unit test.

00:19:17.820 --> 00:19:18.820
Michael Leach: Yeah, 25%.

00:19:18.820 --> 00:19:20.820
Michael Leach: 2% for nose.

00:19:20.820 --> 00:19:24.820
Michael Leach: Yeah, that must be well those Python to people using nose still maybe I don't

00:19:24.820 --> 00:19:25.820
know.

00:19:25.820 --> 00:19:30.820
Michael Leach: Same same with this like hypothesis that's and mock those can be used with any

00:19:30.820 --> 00:19:31.820
of these things.

00:19:31.820 --> 00:19:32.820
Michael Leach: But yeah.

00:19:32.820 --> 00:19:34.820
Michael Leach: Yeah, exactly.

00:19:34.820 --> 00:19:37.820
Michael Leach: And I would like to see the numbers from last year.

00:19:37.820 --> 00:19:38.820
Michael Leach: I can't remember.

00:19:38.820 --> 00:19:39.820
Michael Leach: I'll look those up.

00:19:39.820 --> 00:19:41.820
Michael Leach: I'm hoping that okay is in the list.

00:19:41.820 --> 00:19:46.820
Michael Leach: We haven't talked about that, but we'll try to get okay at 2% but in a couple

00:19:46.820 --> 00:19:47.820
of years.

00:19:47.820 --> 00:19:54.820
Michael Leach: Yeah, more more fun stuff for data analysis, whatever date lots of data science

00:19:54.820 --> 00:19:55.820
half of its data science.

00:19:55.820 --> 00:19:58.820
Michael Leach: But anyway, fun survey.

00:19:58.820 --> 00:19:59.820
Michael Leach: It's good to check out.

00:19:59.820 --> 00:20:03.820
Michael Leach: And especially look around November then.

00:20:03.820 --> 00:20:07.820
Michael Leach: We'll bug you in a couple months to go take the survey for next time.

00:20:07.820 --> 00:20:08.820
Michael Leach: Yep.

00:20:08.820 --> 00:20:11.820
Michael Leach: I always really look forward to this.

00:20:11.820 --> 00:20:12.820
Michael Leach: It's insightful.

00:20:12.820 --> 00:20:13.820
Michael Leach: Yeah.

00:20:13.820 --> 00:20:14.820
Michael Leach: All right.

00:20:14.820 --> 00:20:15.820
Michael Leach: All right.

00:20:15.820 --> 00:20:24.820
Michael Leach: Well, previously, Brian, remember you talked, you had an article that you covered

00:20:24.820 --> 00:20:30.820
that was like Python for Excel was not what I wanted it to be or something like that,

00:20:30.820 --> 00:20:31.820
right?

00:20:31.820 --> 00:20:32.820
Michael Leach: Yeah.

00:20:32.820 --> 00:20:35.820
Michael Leach: Like I wanted a replacement for VBA and what I got was advanced functions

00:20:35.820 --> 00:20:39.820
in cells or I don't know, one of them times of things.

00:20:39.820 --> 00:20:44.820
Michael Leach: And one of the limitations, several of the limitations were somewhat annoying.

00:20:44.820 --> 00:20:51.820
Michael Leach: One limitation was, well, you can pip install or you can import third party

00:20:51.820 --> 00:20:57.820
things from this shorthand list of a couple of them that are common like NumPy and Pandas

00:20:57.820 --> 00:20:59.820
that might make sense.

00:20:59.820 --> 00:21:02.820
Michael Leach: And if it's not there, then c'est la vie.

00:21:02.820 --> 00:21:04.820
Michael Leach: So it goes.

00:21:04.820 --> 00:21:09.820
Michael Leach: The other one was that in order to run your code,

00:21:09.820 --> 00:21:14.820
Michael Leach: You do your Excel things, your Excel had to go and upload and actually execute

00:21:14.820 --> 00:21:20.820
your data and code in Microsoft Azure somewhere in a container somehow.

00:21:20.820 --> 00:21:25.820
Michael Leach: There may be privacy concerns, but even just from a, I'm on an airplane or

00:21:25.820 --> 00:21:29.820
I'm in a place that has crappy internet or I'm at a coffee shop and don't have good internet,

00:21:29.820 --> 00:21:32.820
Michael Leach: but I still would like to do some work.

00:21:32.820 --> 00:21:37.820
Michael Leach: I just, any disconnected scenario whatsoever was not ideal.

00:21:37.820 --> 00:21:43.820
Michael Leach: So the Anaconda folks who were providing some of the foundation for that through

00:21:43.820 --> 00:21:51.820
Michael Leach: Anaconda, the distributable Python environment for that, they came out with this thing called

00:21:51.820 --> 00:21:57.820
Michael Leach: The Anaconda code add in for Excel, which solves some of these problems.

00:21:57.820 --> 00:21:59.820
Michael Leach: It's pretty cool.

00:21:59.820 --> 00:22:06.820
Michael Leach: So what's, I guess for some people, the main takeaway might be that you can run it locally,

00:22:06.820 --> 00:22:07.820
Michael Leach: which is pretty awesome.

00:22:07.820 --> 00:22:14.820
Michael Leach: But I think what's more interesting is that this is based on PyScript.

00:22:14.820 --> 00:22:19.820
Michael Leach: Remember PyScript, the WASM version of Python on the front end?

00:22:19.820 --> 00:22:20.820
Michael Leach: Yeah.

00:22:20.820 --> 00:22:21.820
Michael Leach: Yeah.

00:22:21.820 --> 00:22:28.820
Michael Leach: And I imagine it must be based on the Pyodide, not the micro Python version,

00:22:28.820 --> 00:22:31.820
which would make it pretty robust in terms of what it can do.

00:22:31.820 --> 00:22:35.820
Michael Leach: But what's really cool about that is you can run it locally.

00:22:35.820 --> 00:22:37.820
Michael Leach: Without any setup or install.

00:22:37.820 --> 00:22:43.820
Michael Leach: So you don't even have to have Python locally because it just grabs a WASM thing off the internet

00:22:43.820 --> 00:22:45.820
Michael Leach: or ships with it, probably ships with it.

00:22:45.820 --> 00:22:48.820
Michael Leach: And that's pretty cool.

00:22:48.820 --> 00:22:53.820
Michael Leach: It also says it will run cells independently.

00:22:53.820 --> 00:22:59.820
Michael Leach: So in addition to running Python cells in row major order, which is kind of tricky,

00:22:59.820 --> 00:23:05.820
Michael Leach: meaning any cells with Python code will rerun anytime any Python cells change.

00:23:05.820 --> 00:23:07.820
Michael Leach: It can also run them independently.

00:23:07.820 --> 00:23:12.820
Michael Leach: So cells containing Python are only rerun if the cells cells modify that's kind of interesting.

00:23:12.820 --> 00:23:17.820
Michael Leach: But this is the most interesting, a customizable environment.

00:23:17.820 --> 00:23:25.820
Michael Leach: It allows you to basically pick any package from PyPI that can execute on WASM.

00:23:25.820 --> 00:23:28.820
Michael Leach: So there's certain limitations there, right?

00:23:28.820 --> 00:23:34.820
Michael Leach: Like if it's based on binaries that are not available or something that can't work.

00:23:34.820 --> 00:23:42.820
Michael Leach: But that's a much bigger thing than the four or five packages that came with Microsoft Python for Excel or whatever the official name of that is.

00:23:42.820 --> 00:23:43.820
Michael Leach: Right?

00:23:43.820 --> 00:23:45.820
Michael Leach: So this is really, really cool.

00:23:45.820 --> 00:23:56.820
Michael Leach: On top of that, there's a init.py that fires up whenever you opened up the Microsoft Excel Python variant.

00:23:56.820 --> 00:24:00.820
Michael Leach: With this one, that thing static is just whatever it is, it is.

00:24:00.820 --> 00:24:02.820
Michael Leach: But with this one, you can edit it.

00:24:02.820 --> 00:24:22.820
Michael Leach: So for example, if you have functions that you often call and you want to be able just to quick have them and not retype them into every Excel sheet or whatever, you can write little utility functions and other helper things and import libraries, you know, import whatever library as alias.

00:24:22.820 --> 00:24:24.820
Michael Leach: And then you just have those automatically available.

00:24:24.820 --> 00:24:28.820
Michael Leach: So it kind of sets up your spreadsheet for easy use.

00:24:28.820 --> 00:24:29.820
Michael Leach: So you can do really advanced things.

00:24:29.820 --> 00:24:30.820
Michael Leach: That's pretty cool.

00:24:30.820 --> 00:24:31.820
Michael Leach: Yeah.

00:24:31.820 --> 00:24:32.820
Michael Leach: Yeah.

00:24:32.820 --> 00:24:33.820
Michael Leach: So that's really cool.

00:24:33.820 --> 00:24:35.820
Michael Leach: You can write your own little packages too.

00:24:35.820 --> 00:24:36.820
Michael Leach: Exactly.

00:24:36.820 --> 00:24:43.820
Michael Leach: Like your little, like you could create little helper functions and other types of things and not have to do them in the little editor window of Excel.

00:24:43.820 --> 00:24:52.820
Michael Leach: Also supports better data types for working with NumPy and yeah, I think that's about it.

00:24:52.820 --> 00:25:00.820
Michael Leach: But if you were thinking this was pretty close, but it's not quite, you know, this might actually push it a little bit farther.

00:25:00.820 --> 00:25:02.820
Michael Leach: Runs locally based on PyScript.

00:25:02.820 --> 00:25:06.820
Michael Leach: Install your own libraries long as they run on PyScript.

00:25:06.820 --> 00:25:11.820
Michael Leach: And honestly, this might even push PyScript to be better, right?

00:25:11.820 --> 00:25:14.820
Michael Leach: Getting some people to adapt libraries where they're like, why would I do that before?

00:25:14.820 --> 00:25:16.820
Michael Leach: Like, oh, now it works in Excel.

00:25:16.820 --> 00:25:17.820
Michael Leach: Okay, I'll do that.

00:25:17.820 --> 00:25:22.820
Michael Leach: Now that seems like a big enough reason to work on compatibility with WASM.

00:25:22.820 --> 00:25:23.820
Michael Leach: Yeah.

00:25:23.820 --> 00:25:36.820
Michael Leach: With both of these solutions though, the things that I know you probably don't have the answer, but when sharing a spreadsheet with somebody else, do you have to have like a save or share requirements file or something like that?

00:25:36.820 --> 00:25:37.820
Michael Leach: Sort of.

00:25:37.820 --> 00:25:40.820
Michael Leach: So it does say this here.

00:25:40.820 --> 00:25:51.820
Michael Leach: It does say once an environment is created, this list of PyPI WASM libraries, like a requirements file, it will be pinned.

00:25:51.820 --> 00:25:56.820
Michael Leach: So when users share notebooks, the spreadsheet will retain the exact environment for all of the users.

00:25:56.820 --> 00:25:57.820
Michael Leach: Oh, okay.

00:25:57.820 --> 00:26:04.820
Michael Leach: So I'm imagining if you've got the add in installed and it sees the workbook or whatever it's called.

00:26:04.820 --> 00:26:10.260
called it's probably got a list of some sort of startup code like based on this version of

00:26:10.260 --> 00:26:15.140
py script and python and then here's the list of dependencies and it probably just grabs it

00:26:15.140 --> 00:26:21.460
from the internet like a browser would and then goes yeah but i also don't know what happens if

00:26:21.460 --> 00:26:33.140
you share one of these with two people yeah yeah yeah cool awesome well that's uh i think that's

00:26:33.140 --> 00:26:38.260
it for our main items isn't it um i got one more yes you do keep going

00:26:38.260 --> 00:26:47.300
um and we were talking about david lord and flask already but um now i want to talk about a blog post

00:26:47.300 --> 00:26:53.380
he has so david lord depends he he keeps up a lot of stuff and he released a uh article called

00:26:53.380 --> 00:27:01.860
disabling scheduled dependency updates and i yes please i kind of see that with uh with uh with

00:27:01.860 --> 00:27:06.980
python bytes because you you have a like what depend a bot turned on and stuff i thought i

00:27:06.980 --> 00:27:16.180
turned it off but it won't go off it's driving me nuts so um the what and david's even had so he's

00:27:16.180 --> 00:27:22.980
looked into he's got um like 20 active projects that he is even though they're low activity projects

00:27:22.980 --> 00:27:31.620
there's 20 projects that he's um keeping an eye on and um and there's within those a lot of them are

00:27:31.620 --> 00:27:36.980
like libraries so you're not you're not really you think you you don't have to update the dependencies

00:27:36.980 --> 00:27:42.660
for applications with their requirements.txt file you totally do you have to keep those up but for projects

00:27:43.220 --> 00:27:49.460
for like libraries we usually keep those open we don't pin dependencies but we do pin development

00:27:49.460 --> 00:27:56.420
environment and ci environment and all that stuff and that's a lot of what he's talking about so the

00:27:56.420 --> 00:28:02.900
the environments or what he calls the ecosystems are like the requirements file for develop development

00:28:02.900 --> 00:28:08.100
environment he keeps those up with pip compile and then you've got pre-commit hooks because you're

00:28:08.100 --> 00:28:14.660
testing a lot of stuff and those hooks might update so you have different hook versions and then you also

00:28:14.660 --> 00:28:20.740
have github actions with within ci workflows so there's there's things like checkout and and the

00:28:20.740 --> 00:28:25.860
other there's lots of lots of things you can do with github actions those may have been updated how do

00:28:25.860 --> 00:28:35.300
you keep track of those so he potentially has three commits uh time any but times 20 applications um

00:28:35.860 --> 00:28:44.340
going on because of these these uh dependent bots and things and that's um and that's uh it it could be more

00:28:44.340 --> 00:28:50.820
if you didn't uh pull this down but he set everything up to only notify him once a month for these things

00:28:50.820 --> 00:28:57.380
but still even only once a month that's like 60 emails at once a month and uh having to deal with that

00:28:57.380 --> 00:29:03.780
so um for a lot of these projects what he's done is he's went down to doing it locally the idea is then

00:29:04.580 --> 00:29:10.740
um you've got you use talks or something yeah he's using talks with uh with some labels to do some

00:29:10.740 --> 00:29:21.380
stuff so locally he will run pip compile um to to to do a new development environment and then um also

00:29:21.380 --> 00:29:28.740
github actions and there wasn't a local version available so he wrote gha update which um which is a new

00:29:28.740 --> 00:29:35.860
a little github action updater uh that you can go out and look to see if there's any any updates to

00:29:35.860 --> 00:29:42.740
your github actions so very cool thanks for that um and then also pre-commit um doing an auto update for

00:29:42.740 --> 00:29:49.700
everything so yes this is a like you might be a risk to like just update everything on a project but

00:29:50.420 --> 00:29:54.900
that when should you do this is for development environment so instead of having

00:29:54.900 --> 00:30:01.460
and this is the idea around it also if you've got a project that isn't doing a lot of development it'll

00:30:01.460 --> 00:30:06.180
look like there's a lot of development going on with the github history and it's just these dependency

00:30:06.180 --> 00:30:14.260
updates instead or you look at the prs and i'll save 500 closed prs but there's only one real pr yeah but

00:30:14.260 --> 00:30:21.220
then there's also like it's mind shift to the the shifting you're shifting how things work and

00:30:21.220 --> 00:30:27.380
remembering you know what your test situation is and everything for these projects is jumping around

00:30:27.380 --> 00:30:33.220
so instead it's when like on a day when he's looking at something he'll go oh these haven't been updated

00:30:33.220 --> 00:30:40.100
for a while i'll go um i'll go update while i'm working on it i'll update all of these things and then

00:30:40.100 --> 00:30:46.180
he can do that as one of the one of the commits on a day that he's working on it anyway so they

00:30:46.180 --> 00:30:52.340
so the activity looks is closer to when he's actually working on something um and i you know of course like

00:30:52.340 --> 00:30:57.780
we're talking about this is more important if you're it's less important for development environment

00:30:57.780 --> 00:31:04.980
fixes because that users don't aren't affected by it for libraries if you have runtime dependencies you

00:31:04.980 --> 00:31:11.220
really should be checking that more than once a month but for uh for for development environment

00:31:11.220 --> 00:31:17.140
stuff i think this is cool so i'm gonna take a look at this as well i love it i'm gonna make another

00:31:17.140 --> 00:31:25.300
effort to disable more depend about stuff because it's so so wordy there's uh an issue somewhere on

00:31:25.300 --> 00:31:34.260
github i can't remember on where you go and complain about nevada offer feedback and learnings i believe

00:31:34.260 --> 00:31:43.700
there was one about could we please have a digest instead of a separate email and a separate pr they're

00:31:43.700 --> 00:31:51.220
like no why would you want that because i like i'm not quite as bad off as david because a lot of my

00:31:51.220 --> 00:31:56.900
projects and repos i'm like no i'm not turning depend about on at all but it's the important ones i did and

00:31:56.900 --> 00:32:05.460
i woke up this morning to probably 40 40 prs you know what just tell me i could get some updates for

00:32:05.460 --> 00:32:11.860
this thing i'm not going to do them one at a time i'm not going to say oh you know what let me

00:32:11.860 --> 00:32:16.260
reschedule this week and we're going to go through one at a time and we're going to see how they work

00:32:16.260 --> 00:32:23.940
right it's it's not yeah you know mission or not not flight control software for a spaceship it's like

00:32:23.940 --> 00:32:29.140
it's a website if it doesn't work i'll roll it back and i know what i'm using this stuff for like

00:32:29.140 --> 00:32:36.660
if if uh some of these things update if i got six updates i'll update them all if all the tests pass

00:32:36.660 --> 00:32:45.540
i'll look at it and it's fine if if all if i've got good coverage and i'm really testing the heck out of

00:32:45.540 --> 00:32:51.620
something it should be fine if it breaks then i might you know take go roll look at that more closely but

00:32:51.620 --> 00:32:56.580
it's only usually going to be one dependency that's mucking me up it's not going to be yeah

00:32:56.580 --> 00:33:04.580
breaking it's exceedingly rare that a change in a dependency will cause cause a break because you're

00:33:04.580 --> 00:33:11.540
only using a little bit of the app usually the last time that i got one was mongo engine updated and it

00:33:11.540 --> 00:33:18.340
wasn't dealing with multi-threading correctly and even their testing didn't catch it because

00:33:18.340 --> 00:33:27.140
it only appeared when you're doing like production web servers like granian or micro wizz or something

00:33:27.140 --> 00:33:33.460
and then processing multi multiple requests in a threaded scenario so even doing like web test stuff on it

00:33:34.660 --> 00:33:39.620
it didn't surface those errors you know so it's just like well you know what we're gonna roll that

00:33:39.620 --> 00:33:44.500
one back and wait till they fix it then roll it back you know two two one step back two steps forward

00:33:44.500 --> 00:33:53.140
and we'll be fine and so the way i were i really usually get hit with um with uh deprecations so i'll

00:33:53.140 --> 00:33:58.500
run i'll run the test with uh with all warrant like deprecation warnings turned all all the way up

00:33:58.500 --> 00:34:05.780
um so that um so i can see those and then you can have the have the decision of should i should i deal

00:34:05.780 --> 00:34:11.940
with that deprecation right now or should i i can schedule it then uh turn that off and schedule the

00:34:11.940 --> 00:34:16.740
deprecation notice it's not that it's broken it's just it's not going to run like this forever

00:34:16.740 --> 00:34:22.180
uh i might want to use the new interface or something like that yeah well david i feel your

00:34:22.180 --> 00:34:28.500
pain and thanks for writing the article yeah all right now we're done with our main topics yes now

00:34:28.500 --> 00:34:36.020
indeed we are um and i don't have any extra other than the note that i have decided to switch um so

00:34:36.020 --> 00:34:40.900
okay i'll just go ahead and do this right now uh since i already got my screen up testing code i already

00:34:40.900 --> 00:34:52.260
have it uh testing code.com i had it up there we go okay episode 221 was in june

00:34:52.260 --> 00:34:59.220
and it was a two-parter it's part one of a two-part two-part episode two episode series i don't know why

00:34:59.220 --> 00:35:05.780
i just dropped the ball and didn't do part two so uh this week i'm planning on releasing part two so that

00:35:05.780 --> 00:35:10.740
people can if they want to catch up but it's now a testing code yeah that's my gonna close that loop

00:35:10.740 --> 00:35:17.940
excellent all right well i got a couple some highs and lows if you will brian and all in between

00:35:17.940 --> 00:35:28.180
okay check this is exciting check this uh this merged pr for unidep so unidep manages dependencies

00:35:28.180 --> 00:35:33.380
across conda and pip managed environments it's super cool we talked about in episode 366.

00:35:33.380 --> 00:35:42.820
okay we also talked about uh just path which added a badge you know python bytes 377.

00:35:42.820 --> 00:35:49.300
oh cool pretty cool right remember we talked about that yeah well this pr adds the badge so if you go

00:35:49.300 --> 00:35:58.900
over to unidep you can see it's got pi pi version pi test passing code coverage number stars and python bytes 366

00:35:58.900 --> 00:36:04.900
so we have a another badge signing i would point this out mostly to just say hey people if we talk about your

00:36:04.900 --> 00:36:10.340
stuff and you want to link back to the episode this badge is a cool way to do it okay and where where again

00:36:10.340 --> 00:36:16.820
do people get the code for the badge they can just uh well actually you can look at that pr and it'll

00:36:16.820 --> 00:36:23.700
show you if you go to files changed it's just this link this image shields badge python bytes the number

00:36:23.700 --> 00:36:30.420
the color yeah and then put in the link to where it goes to cool even even links to the time when their

00:36:30.420 --> 00:36:37.060
topic was discussed so it's pretty cool neat so i would i would say base it on the unidep and pr and

00:36:37.060 --> 00:36:43.700
just grab it from there or just grab the code from the the readme cool cool all right uh

00:36:43.700 --> 00:36:50.980
we'll do this one next started using a c called raindrop.io i talked about omnivore have we talked

00:36:50.980 --> 00:36:56.260
about before but it's like reminded people like you should be using omnivore it's awesome but yeah you

00:36:56.260 --> 00:37:01.140
should you should be using it brian you should but if you if you had something like delicious you remember

00:37:01.140 --> 00:37:06.180
delicious yeah or those things things where you would save links and parts saver and i don't i mean i

00:37:06.180 --> 00:37:12.420
don't hardly ever use my bookmarks in my browser because they're so they're so poorly poor to get

00:37:12.420 --> 00:37:20.340
to and stuff uh the only reason i make a bookmark is maybe so autocomplete for my browser address bar

00:37:20.340 --> 00:37:24.980
might pull something from there you know but i started using this thing called raindrop which gives you

00:37:24.980 --> 00:37:30.580
a whole bunch more options and it's kind of like a more modern delicious and from what i can tell

00:37:31.540 --> 00:37:36.900
it's got pretty strong privacy for example i think when you install it as a browser plugin which you

00:37:36.900 --> 00:37:42.340
don't have to even but if you did it doesn't ask ask for access to the page content unless you enable

00:37:42.340 --> 00:37:48.180
certain features like it will completely download the page and save a history for you in case the page

00:37:48.180 --> 00:37:53.700
changes or goes away the website goes away your bookmark will still have the content stuff like that

00:37:53.700 --> 00:37:57.540
anyway people can check that out it's pretty cool i'll have to check it out what i really want is a

00:37:57.540 --> 00:38:04.980
bookmark manager that like automatically deletes junk i haven't visited in like a year yeah exactly

00:38:04.980 --> 00:38:11.060
you don't seem interested in this anymore you know i i before i imported all my bookmarks into it i had to

00:38:11.060 --> 00:38:18.100
do ideally like half of my bookmarks because they were they were bad they were old and duplicates and weird

00:38:18.900 --> 00:38:22.980
all right how about a little bit of drama i don't want to talk too much about this but i think it's

00:38:22.980 --> 00:38:29.860
worth putting out there you can look into it and make from what it uh what what for me well there's an

00:38:29.860 --> 00:38:38.980
incident where uh one of the core developers was suspended given a three-month uh suspension or something like

00:38:38.980 --> 00:38:48.100
that and i'm sure a lot of people have heard about this but then there's a follow-up or gita van rossom

00:38:48.100 --> 00:38:54.900
posted something referring to that person not even by name and their post was removed for violating the guidelines

00:38:54.900 --> 00:38:58.740
for mentioning that and i i don't know this is i feel like this should be

00:38:58.740 --> 00:39:06.420
something people are aware of that this kind of stuff is going on uh but i don't know enough about it to

00:39:06.420 --> 00:39:10.420
take a side or have a strong opinion but it seems important

00:39:11.540 --> 00:39:19.140
um so well okay uh just to to make sure that we're aware that the the post that they're talking about

00:39:19.140 --> 00:39:28.340
here did get put back okay interesting it got put on the post got put on timeout interesting okay

00:39:28.340 --> 00:39:32.500
all right anyway people can check it out it's linked there um

00:39:35.220 --> 00:39:42.900
nearly final call for the coding in the castle in italy we put up a 500 last minute special so

00:39:42.900 --> 00:39:48.180
you still got uh some seats left and i'd love to see you there and talk python for six days and

00:39:48.180 --> 00:39:54.100
enjoy italy together so uh hopefully people can make that i'll put that in the links as well

00:39:54.100 --> 00:40:00.900
and that's all i got brian okay well i want to show you that so the uh the this is the it was a rake

00:40:00.900 --> 00:40:10.260
choice voting thing and and guido said something um and he referred to the banned person and for some

00:40:10.260 --> 00:40:14.980
reason that got hidden for a while and people are like why would you hide that but it's not hidden

00:40:14.980 --> 00:40:19.620
anymore so yeah i'll just read the whole post i don't know much about voting systems but i know

00:40:19.620 --> 00:40:23.540
someone who does unfortunately he's currently banned maybe we can wait until his three-month

00:40:23.540 --> 00:40:30.500
ban expires and ask him for advice it doesn't seem that controversial to me no but anyway yeah

00:40:30.500 --> 00:40:37.380
anyway you know it's not funny though is it it's not very funny it's not well we need something funny

00:40:37.380 --> 00:40:44.180
exactly exactly well do you know i know you do some c programming c's pretty funny right

00:40:44.180 --> 00:40:58.100
yeah yeah so this i believe this is a was sidebar from a rust a rust book and the title is c will

00:40:58.100 --> 00:41:06.260
watch in silence c is a watching you and i can't unsee this image and so on side note other programming

00:41:06.260 --> 00:41:11.140
languages hold on you might say other programming languages don't require me to think about lifetimes

00:41:11.140 --> 00:41:16.980
why does rust make it so complicated the c programming language will happily let you access memory

00:41:16.980 --> 00:41:22.660
has been freed leading to undefined behavior it'll watch in silence as you walk off the edge of a cliff

00:41:22.660 --> 00:41:32.100
he will watch you do you feel when is c watched you have you is it watched you see you do a lot of c

00:41:32.100 --> 00:41:36.500
yeah yeah right i write a lot of c well do you feel like it watches you no

00:41:38.740 --> 00:41:44.340
i don't know that's the joke i got yeah it's an entire tool belt and you can shoot yourself in the

00:41:44.340 --> 00:41:49.060
foot with it if you want but yeah no i mean it's a fair point the book is making but it's

00:41:49.060 --> 00:41:58.100
watch you in silence as you walk off the edge okay i got another funny thing um that that sort of a

00:41:58.100 --> 00:42:07.540
comment from uh marco says um if if i recall correctly in 2022 none was the most second most popular testing

00:42:07.540 --> 00:42:16.580
framework uh cry emoji well i expanded the list and none is still 36 it is still the

00:42:16.580 --> 00:42:23.780
the second most popular i love that they hit it it was like we're just going to put under the show more

00:42:23.780 --> 00:42:37.060
tab 36 of the answer none yikes so in fact it's nearly beating all other true test frameworks i think it is maybe

00:42:37.060 --> 00:42:45.220
all of the true test frameworks other than py tests combined yeah well because mock and and doc tests or

00:42:45.220 --> 00:42:49.780
hypothesis and stuff don't yeah don't combine in that way i guess

00:42:49.780 --> 00:42:59.380
yeah none 36 maybe that's the joke maybe that's the joke the joke is the software you write without tests

00:43:00.180 --> 00:43:04.020
exactly it will watch you walk off the edge of a cliff silently yeah

00:43:04.020 --> 00:43:14.020
so anyway um fun uh day today talking with you about python and as always as a reminder next week it

00:43:14.020 --> 00:43:22.020
will be monday for everybody so but we hope hopefully that's normal hopefully hopefully we'll see what the

00:43:22.020 --> 00:43:24.420
holidays do to us see you later yeah all right bye

00:43:24.420 --> 00:43:25.960
Okay.

