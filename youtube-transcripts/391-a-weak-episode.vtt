WEBVTT

00:00:00.001 --> 00:00:01.000
Hey everyone.

00:00:01.000 --> 00:00:06.200
It's good to be back.

00:00:06.200 --> 00:00:07.680
Back in the United States.

00:00:07.680 --> 00:00:09.640
Last week was in Munich.

00:00:09.640 --> 00:00:10.640
So it's cool.

00:00:10.640 --> 00:00:11.640
Good to be back.

00:00:11.640 --> 00:00:14.080
No more broth bust for you.

00:00:14.080 --> 00:00:15.080
Yeah.

00:00:15.080 --> 00:00:22.000
And I haven't had a beer since like last Thursday or Friday or something.

00:00:22.000 --> 00:00:23.000
That doesn't sound right.

00:00:23.000 --> 00:00:26.040
Anyway, should we have a show today?

00:00:26.040 --> 00:00:27.480
I believe we should.

00:00:27.480 --> 00:00:28.480
All right.

00:00:28.480 --> 00:00:33.480
Hello and welcome to Python Bytes where we deliver Python news and headlines directly

00:00:33.480 --> 00:00:34.920
to your earbuds.

00:00:34.920 --> 00:00:40.080
This is episode 391 recorded July 9, 2024.

00:00:40.080 --> 00:00:41.920
And I am Brian Okken.

00:00:41.920 --> 00:00:43.960
And I am Michael Kennedy.

00:00:43.960 --> 00:00:48.880
This episode is sponsored by Code Comments, an original podcast from Red Hat.

00:00:48.880 --> 00:00:52.340
Listen to their segment later in the show.

00:00:52.340 --> 00:00:56.000
You can connect with us on Mastodon, of course.

00:00:56.000 --> 00:00:57.440
The links are in the show notes.

00:00:57.440 --> 00:01:02.280
They're all on Fosstodon, but you can get to us from any Mastodon.

00:01:02.280 --> 00:01:06.400
You can also join us if you're listening to it later.

00:01:06.400 --> 00:01:12.600
You can join us live by going to pythonbytes.fm/live, be a part of the audience.

00:01:12.600 --> 00:01:18.200
Or if you just want to see the show later, it's all there.

00:01:18.200 --> 00:01:23.560
It's usually 10 a.m. Pacific time on Tuesdays, but sometimes it changes.

00:01:23.560 --> 00:01:27.360
But if you go to that live thing, it'll tell you when the next one is.

00:01:27.360 --> 00:01:32.120
And finally, I'd really like to thank a lot of the people that have subscribed to the

00:01:32.120 --> 00:01:33.120
mailing list, the newsletter.

00:01:33.120 --> 00:01:39.260
If you go to our pythonbytes.fm, there's a newsletter link.

00:01:39.260 --> 00:01:43.600
And we'll send you all of the links of the stuff we cover every week, and we'll just

00:01:43.600 --> 00:01:45.040
send it to your inbox.

00:01:45.040 --> 00:01:48.920
So even if you miss an episode, you won't miss any of the goodness.

00:01:48.920 --> 00:01:54.120
So speaking of goodness, what do you got for us, Michael?

00:01:54.120 --> 00:02:03.120
>> You know how we all love PyPI and the ability to go and just pip install a thing and make

00:02:03.120 --> 00:02:04.880
our apps be so much more, right?

00:02:04.880 --> 00:02:12.080
Programming in Python becomes like Lego block clicking together, not algorithm class.

00:02:12.080 --> 00:02:13.080
Which is amazing.

00:02:13.080 --> 00:02:14.080
It's amazing.

00:02:14.080 --> 00:02:20.680
However, there are issues that you run into if you use third-party packages, not the least

00:02:20.680 --> 00:02:24.200
of which is you now probably should have a virtual environment.

00:02:24.200 --> 00:02:28.760
You definitely require some pip install commands.

00:02:28.760 --> 00:02:31.120
Just stuff all along those lines, right?

00:02:31.120 --> 00:02:35.920
Just the management of setup before you can even run your app.

00:02:35.920 --> 00:02:41.340
Plus then any potential changes if people don't pin their versions, then you're at the

00:02:41.340 --> 00:02:43.800
whims of what potentially can happen there.

00:02:43.800 --> 00:02:51.520
So what some people do is something called vendoring or vendorizing dependencies.

00:02:51.520 --> 00:02:56.420
So for example, if I depend on some functionality from requests, I don't know if that's a super

00:02:56.420 --> 00:02:58.400
good example, but let's say it is.

00:02:58.400 --> 00:03:04.520
I could just download the source code of requests, stick it into my code and use it.

00:03:04.520 --> 00:03:07.800
It's probably not a great example because it itself has a bunch of dependencies, but

00:03:07.800 --> 00:03:11.640
stuff that's kind of like pure Python, no other dependencies, you could have it as a

00:03:11.640 --> 00:03:16.360
third-party package or you could just stick the code of that somewhere into your app and

00:03:16.360 --> 00:03:21.240
refer to it as a relative import within your app, right?

00:03:21.240 --> 00:03:24.960
Then people just pip install your package, pip x install your package, or even just get

00:03:24.960 --> 00:03:27.880
a script and run it or a set of scripts.

00:03:27.880 --> 00:03:34.400
So there's this project from M. Williamson called Python Vendorize that I want to talk

00:03:34.400 --> 00:03:35.540
about.

00:03:35.540 --> 00:03:40.840
So it'll vendorize packages from PyPI as I just described.

00:03:40.840 --> 00:03:44.920
So it allows you pure Python dependencies to be vendorized.

00:03:44.920 --> 00:03:47.920
That is, it'll copy that into your project.

00:03:47.920 --> 00:03:53.520
Best use for small pure Python dependencies to avoid version conflicts with other packages,

00:03:53.520 --> 00:03:55.540
require different versions, and so on.

00:03:55.540 --> 00:04:04.520
So what you do is you set up a vendorize.toml file, and in there you basically set up what

00:04:04.520 --> 00:04:10.800
is your module, what subsection of your module do you want it to go into, what submodule

00:04:10.800 --> 00:04:13.640
and then what PyPI packages you want.

00:04:13.640 --> 00:04:17.020
So example here is like a hello package.

00:04:17.020 --> 00:04:24.160
So they create a underscore vendor folder and then they say the packages are six.

00:04:24.160 --> 00:04:31.760
And once you run it, it'll create that underscore vendor folder and it'll put the six distinfo,

00:04:31.760 --> 00:04:37.720
the dunder initpy, the six.py, all the stuff it needs to basically have that there.

00:04:37.720 --> 00:04:43.560
So then in your app you can say from._vendor import six rather than having an external

00:04:43.560 --> 00:04:44.560
dependency.

00:04:44.560 --> 00:04:45.560
What do you think?

00:04:45.560 --> 00:04:46.560
>> Kind of neat.

00:04:46.560 --> 00:04:47.560
How do you keep up?

00:04:47.560 --> 00:04:48.560
Yeah, I've got questions.

00:04:48.560 --> 00:04:54.360
Like how do you keep up with updates and things like that?

00:04:54.360 --> 00:05:01.360
>> Well, I believe that you just run a command line, right?

00:05:01.360 --> 00:05:04.440
Just run Python vendorize in the directory.

00:05:04.440 --> 00:05:07.680
And I don't know if it'll re-download it, but it will create it.

00:05:07.680 --> 00:05:10.280
So worst case, delete the folder, run it again.

00:05:10.280 --> 00:05:11.280
>> Yeah.

00:05:11.280 --> 00:05:13.300
>> Yeah, and then that'll update it.

00:05:13.300 --> 00:05:17.140
So the whole point of this is like you want less change than normal.

00:05:17.140 --> 00:05:19.760
You want to like kind of freeze it in a place.

00:05:19.760 --> 00:05:23.240
And things like six that don't really change.

00:05:23.240 --> 00:05:26.520
>> Or have gotten kicked out of the standard library.

00:05:26.520 --> 00:05:27.520
>> Yeah, exactly.

00:05:27.520 --> 00:05:31.400
A lot of stuff that's really super stable.

00:05:31.400 --> 00:05:32.400
And it's pretty small, right?

00:05:32.400 --> 00:05:36.320
Because if you do something that's got a bunch of dependencies, you've then got to start

00:05:36.320 --> 00:05:40.000
doing their dependencies, and then it gets really wonky, right?

00:05:40.000 --> 00:05:41.000
>> Yeah.

00:05:41.000 --> 00:05:42.000
>> For small things.

00:05:42.000 --> 00:05:45.120
>> Yeah, actually, it's pretty cool.

00:05:45.120 --> 00:05:46.120
Yeah, neat.

00:05:46.120 --> 00:05:47.120
>> Neat.

00:05:47.120 --> 00:05:48.120
Well, that's what I got for you.

00:05:48.120 --> 00:05:50.680
The first one, I got a bunch of other stuff, as you can see.

00:05:50.680 --> 00:05:53.840
>> No, I like it.

00:05:53.840 --> 00:05:58.640
There's projects that I've open sourced that it really wasn't intended for somebody to

00:05:58.640 --> 00:06:01.080
actually use as a dependency.

00:06:01.080 --> 00:06:05.720
It's like some example code that happens to be pip installable.

00:06:05.720 --> 00:06:11.040
But somebody would probably take it and just copy it and run from there.

00:06:11.040 --> 00:06:13.280
And using something like Vendris would work.

00:06:13.280 --> 00:06:15.400
>> Yeah, for sure.

00:06:15.400 --> 00:06:16.400
>> Cool.

00:06:16.400 --> 00:06:21.040
I would like to talk about something not as strong as this, but weaker.

00:06:21.040 --> 00:06:22.040
>> Weak.

00:06:22.040 --> 00:06:23.040
So weak.

00:06:23.040 --> 00:06:27.040
>> Some weak references.

00:06:27.040 --> 00:06:33.600
So this is an article from Martin Heinz, a guide to Python's weak references using WeakRef

00:06:33.600 --> 00:06:34.600
modules.

00:06:34.600 --> 00:06:38.880
So WeakRef is a built-in standard library module.

00:06:38.880 --> 00:06:42.160
And I actually have never played with it.

00:06:42.160 --> 00:06:46.920
And I kind of knew that Python must have weak references, but I just didn't really explore

00:06:46.920 --> 00:06:48.400
it before now.

00:06:48.400 --> 00:06:51.200
And this is a great introduction to just talk about what they are.

00:06:51.200 --> 00:07:01.640
So I mean, the term weak reference might be new to somebody that's like, I don't know,

00:07:01.640 --> 00:07:03.880
maybe new to you.

00:07:03.880 --> 00:07:09.540
It's a term that we talk about in like C++ and other things a lot because of the using

00:07:09.540 --> 00:07:14.880
-- I use it a lot in C++, but using strong references and weak references.

00:07:14.880 --> 00:07:17.520
Python also has strong references and weak references.

00:07:17.520 --> 00:07:21.640
So strong reference is just sort of a copy of something.

00:07:21.640 --> 00:07:27.440
But a weak reference is a way to point to something else, but not muck up the garbage

00:07:27.440 --> 00:07:28.640
collection.

00:07:28.640 --> 00:07:30.160
So this is a great article.

00:07:30.160 --> 00:07:38.560
It talks about -- starts out with talking about -- sorry.

00:07:38.560 --> 00:07:44.600
Starts out talking about garbage collection and how weak references are used with garbage

00:07:44.600 --> 00:07:49.120
-- how garbage collection and weak references and strong references affect that.

00:07:49.120 --> 00:07:50.480
So why do we care?

00:07:50.480 --> 00:07:56.740
Well, it is used in things like the logging module, for instance.

00:07:56.740 --> 00:08:03.280
So you have named -- this is a cool example because you have named logging modules -- where

00:08:03.280 --> 00:08:04.280
was it?

00:08:04.280 --> 00:08:05.640
This is an example.

00:08:05.640 --> 00:08:06.640
Anyway.

00:08:06.640 --> 00:08:14.320
So you have named modules that you -- named logging module -- named logger.

00:08:14.320 --> 00:08:15.320
Sorry.

00:08:15.320 --> 00:08:18.280
It's been a rough weekend.

00:08:18.280 --> 00:08:22.800
And then like if you wanted another one of the same name, it might be there, it might

00:08:22.800 --> 00:08:23.800
not.

00:08:23.800 --> 00:08:26.520
So it's a caching sort of thing, how logging uses it.

00:08:26.520 --> 00:08:29.920
But there's also ways to use it as a -- like for trees.

00:08:29.920 --> 00:08:37.520
If you're building a data structure where you might want bidirectional links between

00:08:37.520 --> 00:08:42.580
objects, one of the objects -- it shouldn't be really hard links in both directions.

00:08:42.580 --> 00:08:49.400
So one of those links should be a weak reference, like the link between a parent and a child

00:08:49.400 --> 00:08:53.120
and a tree structure would be good like that.

00:08:53.120 --> 00:09:00.160
Or other things like he talks about using an observer -- building an observer pattern

00:09:00.160 --> 00:09:05.000
from the design pattern book using weak references.

00:09:05.000 --> 00:09:06.000
Just some really cool stuff.

00:09:06.000 --> 00:09:08.920
I don't know -- I don't build a lot of data structures.

00:09:08.920 --> 00:09:11.460
There's enough data structures in Python already.

00:09:11.460 --> 00:09:19.760
But if -- especially if you're in a CS class or you have some special needs for data structure,

00:09:19.760 --> 00:09:23.040
weak references are built in and they might help you a lot.

00:09:23.040 --> 00:09:24.640
>> Yeah, they're pretty interesting.

00:09:24.640 --> 00:09:29.040
The only time I've really played with them is for the Python memory course that I created

00:09:29.040 --> 00:09:31.680
at Talk Python to understand.

00:09:31.680 --> 00:09:34.720
Because you want to look at stuff and see, we did this, it's alive, we did this, now

00:09:34.720 --> 00:09:38.840
it's garbage collected or now it's reference count deleted.

00:09:38.840 --> 00:09:44.840
But if you have a planner to it, then obviously it's never going away.

00:09:44.840 --> 00:09:47.200
So weak references allow you to ask questions like that.

00:09:47.200 --> 00:09:50.560
I think you can do interesting stuff with caching too.

00:09:50.560 --> 00:09:56.360
For example, if you've got a cache and you've handed out an instance of the object and it's

00:09:56.360 --> 00:10:00.760
still alive and people are still using it, parts of the app are still using it, you could

00:10:00.760 --> 00:10:05.320
have a weak reference to it and if someone else asks for it, you can upgrade the weak

00:10:05.320 --> 00:10:09.160
reference to a strong reference and hand that out again without recreating it.

00:10:09.160 --> 00:10:13.200
But if no one's using it, it'll get cleaned up because a weak reference won't keep it

00:10:13.200 --> 00:10:14.200
around.

00:10:14.200 --> 00:10:16.920
So it's like sort of a self-managing cache type of structure.

00:10:16.920 --> 00:10:20.320
It could be fun to make too.

00:10:20.320 --> 00:10:25.200
With that said, I was thinking just like you, I don't usually make data structures these

00:10:25.200 --> 00:10:26.200
days.

00:10:26.200 --> 00:10:28.400
Python's pretty much got something for you.

00:10:28.400 --> 00:10:29.400
Right.

00:10:29.400 --> 00:10:35.440
But you know, people are building, well, there's some third-party library data structures they

00:10:35.440 --> 00:10:39.680
use too and they probably use weak references and I just haven't poked into there to find

00:10:39.680 --> 00:10:40.680
out.

00:10:40.680 --> 00:10:41.680
Yeah, exactly.

00:10:41.680 --> 00:10:43.280
Let someone else do cool stuff with it for us.

00:10:43.280 --> 00:10:50.680
But I love the idea of the logging module that uses named items.

00:10:50.680 --> 00:10:53.840
Doing something like a cache named item thing is pretty cool.

00:10:53.840 --> 00:10:55.840
Yeah, very cool.

00:10:55.840 --> 00:10:58.800
Do you know what else is cool?

00:10:58.800 --> 00:11:02.320
Code comments from Red Hat.

00:11:02.320 --> 00:11:06.960
This episode is brought to you by Code Comments, an original podcast from Red Hat.

00:11:06.960 --> 00:11:10.600
You know when you're working on a project and you leave behind a small comment in the

00:11:10.600 --> 00:11:15.760
code, maybe you're hoping to help others learn what isn't clear at first.

00:11:15.760 --> 00:11:20.080
Sometimes that code comment tells a story of a challenging journey to the current state

00:11:20.080 --> 00:11:21.080
of the project.

00:11:21.080 --> 00:11:27.200
Code Comments, the podcast, features technologists who've been through tough tech transitions

00:11:27.200 --> 00:11:29.800
and they share how their teams survived that journey.

00:11:29.800 --> 00:11:34.360
The host, Jamie Parker, is a Red Hatter and an experienced engineer.

00:11:34.360 --> 00:11:39.000
In each episode, Jamie recounts the stories of technologists from across the industry

00:11:39.000 --> 00:11:42.040
who've been on a journey implementing new technologies.

00:11:42.040 --> 00:11:47.360
I recently listened to an episode about DevOps from the folks at Worldwide Technology.

00:11:47.360 --> 00:11:52.040
The hardest challenge turned out to be getting buy-in on the new tech stack rather than using

00:11:52.040 --> 00:11:54.180
that tech stack directly.

00:11:54.180 --> 00:11:58.320
It's a message that we can all relate to, and I'm sure you can take some hard-won lessons

00:11:58.320 --> 00:11:59.920
back to your own team.

00:11:59.920 --> 00:12:01.680
Give Code Comments a listen.

00:12:01.680 --> 00:12:08.400
Search for Code Comments in your podcast player or just use our link, pythonbytes.fm/code-comments.

00:12:08.400 --> 00:12:10.920
The link is in your podcast player's show notes.

00:12:10.920 --> 00:12:13.800
Thank you to Code Comments for supporting the show.

00:12:13.800 --> 00:12:14.800
Awesome.

00:12:15.800 --> 00:12:18.040
All right.

00:12:18.040 --> 00:12:20.680
What is next here?

00:12:20.680 --> 00:12:23.720
This one is Make Time Speak from Preyson.

00:12:23.720 --> 00:12:31.200
Preyson's been on the show before, a friend of the show and also former co-guest, co-host.

00:12:31.200 --> 00:12:37.200
And the idea is it's a little bit of a human-friendly way to refer to time.

00:12:37.200 --> 00:12:45.260
You might know about things like, I think it's Arrow that has a humanized thing that

00:12:45.260 --> 00:12:51.800
says five minutes from now or in 10 minutes or just now, those kinds of things.

00:12:51.800 --> 00:12:57.520
But the way this one works is it talks in sort of colloquial way of saying the time.

00:12:57.520 --> 00:13:07.840
So you create a clock object and you give it a language to use like English, German,

00:13:07.840 --> 00:13:11.280
Swahili I think, all those things, Dutch.

00:13:11.280 --> 00:13:15.800
And then you can ask it, what is 11 colon 15?

00:13:15.800 --> 00:13:19.480
It'll say quarter past 11 or a bunch of different times.

00:13:19.480 --> 00:13:21.200
What is 729?

00:13:21.200 --> 00:13:26.480
And well, it says that in Swahili, which I can't get that.

00:13:26.480 --> 00:13:27.960
I'm not going to get that right.

00:13:27.960 --> 00:13:32.480
But it'll convert time into spoken expressions in multiple languages, super easy to use,

00:13:32.480 --> 00:13:33.480
pure Python.

00:13:33.480 --> 00:13:36.320
So you could vendorize it, I guess.

00:13:36.320 --> 00:13:37.520
And so on, even as plug-ins.

00:13:37.520 --> 00:13:43.200
So super easy to use if people want to check that out and play with it.

00:13:43.200 --> 00:13:44.200
This is pretty fun.

00:13:44.200 --> 00:13:45.200
Yeah.

00:13:45.200 --> 00:13:46.200
I like it.

00:13:46.200 --> 00:13:47.200
Very simple.

00:13:47.200 --> 00:13:51.680
But if you've got a use case like that, you have a date time and you wanted to say it

00:13:51.680 --> 00:13:55.120
in a more human version, well, here you go.

00:13:55.120 --> 00:13:56.120
All right.

00:13:56.120 --> 00:13:57.120
Nice.

00:13:57.120 --> 00:13:58.120
Yeah.

00:13:58.120 --> 00:14:03.520
I am going to cover a topic that I get asked all the time.

00:14:03.520 --> 00:14:09.980
So I talk about testing a lot and machine learning and AI is kind of a big thing now.

00:14:09.980 --> 00:14:14.280
So I get questions like, how do I test machine learning projects?

00:14:14.280 --> 00:14:16.840
And I got to answer, I have no idea.

00:14:16.840 --> 00:14:20.120
So I'm excited that somebody made an attempt at this.

00:14:20.120 --> 00:14:24.600
Here is a article called, How Should You Test Your Machine Learning Project?

00:14:24.600 --> 00:14:27.920
The Beginner's Guide by Francois Porcher.

00:14:27.920 --> 00:14:32.000
So and it's published in the Towards Data Science blog.

00:14:32.000 --> 00:14:37.800
Anyway, kind of a cool intro, talked about some of the simple stuff.

00:14:37.800 --> 00:14:42.720
I mean, there is like, how do you test machine learning?

00:14:42.720 --> 00:14:48.120
It's complex, but there are a lot of pieces that are pretty straightforward to test.

00:14:48.120 --> 00:14:52.880
So cool introduction, had a project.

00:14:52.880 --> 00:14:58.400
This article also includes a repository that you can play with directly, which is nice.

00:14:58.400 --> 00:15:01.380
You just follow along with the code.

00:15:01.380 --> 00:15:04.120
So this is doing, what is it doing?

00:15:04.120 --> 00:15:10.600
It's essentials of testing with a machine learning pipeline focusing on fine tuning

00:15:10.600 --> 00:15:15.120
BERT for text classification on an IMDB dataset.

00:15:15.120 --> 00:15:17.760
So that's just what he's using.

00:15:17.760 --> 00:15:23.040
He's using pytest and pytest-Cov, which are awesome things to start with.

00:15:23.040 --> 00:15:28.160
And so it kind of goes through some of the easy stuff right away is starting with some

00:15:28.160 --> 00:15:34.680
of the simple things like, has a clean text function.

00:15:34.680 --> 00:15:42.000
So a function within the source that takes a string and makes it all lowercase and strips

00:15:42.000 --> 00:15:44.040
it, but it might do other things too.

00:15:44.040 --> 00:15:47.960
But these are great examples in a lot of machine learning stuff.

00:15:47.960 --> 00:15:50.840
You've got a lot of little helper functions along the way.

00:15:50.840 --> 00:15:55.640
You may as well go test those and it'll get you in the habit of writing tests too.

00:15:55.640 --> 00:16:01.480
In this case, it's just giving some examples of some random text input and what the clean

00:16:01.480 --> 00:16:03.280
output should look like.

00:16:03.280 --> 00:16:08.280
And these are your expectations of like, if I pop this data into this function, what should

00:16:08.280 --> 00:16:09.280
the output look like?

00:16:09.280 --> 00:16:11.200
So this is a great way to get started.

00:16:11.200 --> 00:16:16.760
I personally would have put this in a parameterized, but I guess we're trying to teach people slowly.

00:16:16.760 --> 00:16:18.560
These are really three test cases.

00:16:18.560 --> 00:16:23.640
They could be three test functions, but it works.

00:16:23.640 --> 00:16:30.720
And so I'm referring to a test function that does a test for capital letter stripping and

00:16:30.720 --> 00:16:36.480
removing extra spaces and how it should handle the empty string.

00:16:36.480 --> 00:16:38.980
And this is actually a good point.

00:16:38.980 --> 00:16:44.080
One of the things they test with interviews a lot is the edge cases for testing.

00:16:44.080 --> 00:16:53.080
So like what test examples are like derivative small cases that you wouldn't possibly think

00:16:53.080 --> 00:16:54.080
about?

00:16:54.080 --> 00:16:55.240
And it's important to test those too.

00:16:55.240 --> 00:16:58.600
Like what does an empty string get cleaned as?

00:16:58.600 --> 00:17:05.000
Or a good thing, like if I already had the word spaces in lowercase, how would that end

00:17:05.000 --> 00:17:07.000
up showing up in the output?

00:17:07.000 --> 00:17:08.000
Things like that.

00:17:08.000 --> 00:17:09.800
So good start.

00:17:09.800 --> 00:17:12.920
And then jumps up to higher level things.

00:17:12.920 --> 00:17:17.320
He talks about a larger chunk of the script.

00:17:17.320 --> 00:17:25.040
So he's got a tokenized text function that uses a lot of sub pieces, uses the tokenizer

00:17:25.040 --> 00:17:27.320
with certain input.

00:17:27.320 --> 00:17:28.920
And how you test that?

00:17:28.920 --> 00:17:35.680
Well, this is a great example of just figuring out really some examples, some example input

00:17:35.680 --> 00:17:40.120
and how you would expect it to be tokenized on the output.

00:17:40.120 --> 00:17:44.000
Looking at the length and the shape of the result.

00:17:44.000 --> 00:17:51.280
And then making sure that not all values are, I don't know what this would be.

00:17:51.280 --> 00:17:54.920
Oh, he's making sure that all values are PyTorch tensors.

00:17:54.920 --> 00:17:57.240
I don't even really know what that means.

00:17:57.240 --> 00:18:03.200
But thinking about what the output should be, even if you don't know the specifics,

00:18:03.200 --> 00:18:06.960
you can have some way to describe how it should sort of look.

00:18:06.960 --> 00:18:13.080
And these are good enough tests, or they possibly are good tests to have anyway.

00:18:13.080 --> 00:18:20.160
So I think this is a good starting point to start a discussion on your team for how to

00:18:20.160 --> 00:18:23.280
add testing to a machine learning project.

00:18:23.280 --> 00:18:26.280
>> Yeah, it's interesting.

00:18:26.280 --> 00:18:28.600
I really would have no idea how to test machine learning.

00:18:28.600 --> 00:18:31.440
It seems like black box type stuff.

00:18:31.440 --> 00:18:36.480
So yeah, this is a lot more to work with than I would have come up with, I think.

00:18:36.480 --> 00:18:40.400
>> Yeah, just getting started, taking a chunk out of it, and then where to go from there.

00:18:40.400 --> 00:18:44.760
So after you kind of have a sense of some of the easy stuff, some of the middle level

00:18:44.760 --> 00:18:49.840
stuff of testing examples and shapes and whatnot, what's left?

00:18:49.840 --> 00:18:57.000
Well, that's where a quick introduction to how code coverage works and looking at what

00:18:57.000 --> 00:19:02.200
the rest of your code is doing and that maybe you want to add tests to, or maybe those are

00:19:02.200 --> 00:19:06.160
the things that you manually test or something.

00:19:06.160 --> 00:19:07.160
So anyway.

00:19:07.160 --> 00:19:08.160
>> Yeah.

00:19:08.160 --> 00:19:09.160
Excellent.

00:19:09.160 --> 00:19:10.160
Sounds good.

00:19:10.160 --> 00:19:13.520
>> Well, those are our items.

00:19:13.520 --> 00:19:15.960
Do you have any extras for us this week?

00:19:15.960 --> 00:19:17.960
I am running out of extras.

00:19:17.960 --> 00:19:18.960
>> Clean out.

00:19:18.960 --> 00:19:20.560
Well, don't worry, I'll make up for it for you.

00:19:20.560 --> 00:19:24.280
So wonderful news from Authy.

00:19:24.280 --> 00:19:32.080
You know, Authy, the 2FA password thing that you can get for multi-factor authentication,

00:19:32.080 --> 00:19:39.400
super nice because so many of the devices are locked to, or some of the apps are locked

00:19:39.400 --> 00:19:40.400
to one platform.

00:19:40.400 --> 00:19:46.000
Like Google Authenticator, you lose your phone or you have to reformat it or something, sorry,

00:19:46.000 --> 00:19:47.680
good luck now.

00:19:47.680 --> 00:19:51.600
There's no syncing, things like that.

00:19:51.600 --> 00:19:55.960
But with Authy, you have an account, it syncs it across your different devices.

00:19:55.960 --> 00:19:58.920
One device can authenticate another if you want to add a new one.

00:19:58.920 --> 00:20:00.920
It's really nice.

00:20:00.920 --> 00:20:10.400
Except, now Authy is urging users to stay alert after 33 million phone numbers were

00:20:10.400 --> 00:20:11.400
leaked.

00:20:11.400 --> 00:20:12.400
How?

00:20:12.400 --> 00:20:22.120
Well, there's an authenticated API endpoint, but apparently it would return an error that

00:20:22.120 --> 00:20:26.960
would indicate whether the phone number that you passed in to try to authenticate with

00:20:26.960 --> 00:20:28.400
was valid or invalid.

00:20:28.400 --> 00:20:30.520
Like, sorry, that phone number doesn't exist.

00:20:30.520 --> 00:20:34.160
Or sorry, wrong password, something like that, I think is the deal.

00:20:34.160 --> 00:20:39.400
And so somebody just hammered it with every phone number combination they could think

00:20:39.400 --> 00:20:45.960
of and recorded the results when it said, "That phone number exists."

00:20:45.960 --> 00:20:49.880
And we know that Authy has it, and we know that you have 2FA and all of these things.

00:20:49.880 --> 00:20:56.280
And so, from what I could tell, no real information about people was stolen.

00:20:56.280 --> 00:21:02.280
But given that they know you have 2FA and they know that this is your phone number,

00:21:02.280 --> 00:21:08.600
they could start sending you all sorts of spoof things, social engineering type things,

00:21:08.600 --> 00:21:10.560
and all that.

00:21:10.560 --> 00:21:13.920
And Authy recently canceled their desktop apps.

00:21:13.920 --> 00:21:18.840
You know, Authy being Twilio, the parent company, canceled their desktop apps.

00:21:18.840 --> 00:21:24.320
It just seems like it's really in a kind of a state of disrepair and lack of love and

00:21:24.320 --> 00:21:27.560
a lack of confidence in Michael at this point.

00:21:27.560 --> 00:21:35.600
So I went through the super fun experience of resetting about 30 different 2FA logins,

00:21:35.600 --> 00:21:40.160
and boy oh boy, I learned some things, Brian.

00:21:40.160 --> 00:21:46.080
I've learned that some companies make it super easy to reset because my thought was, "Look,

00:21:46.080 --> 00:21:47.480
if this is...

00:21:47.480 --> 00:21:48.920
What else potentially has happened?

00:21:48.920 --> 00:21:55.280
I'm going to revoke all of my 2FA logins and set new secret keys that will generate new

00:21:55.280 --> 00:21:56.520
passwords."

00:21:56.520 --> 00:22:00.640
So even if they were able to get a hold of everything in my account, that stuff doesn't

00:22:00.640 --> 00:22:02.520
work anymore effectively, right?

00:22:02.520 --> 00:22:04.000
That was my plan.

00:22:04.000 --> 00:22:08.320
And it took like six hours or something, five hours.

00:22:08.320 --> 00:22:14.320
You go to different places and you'll see some of them will let you...

00:22:14.320 --> 00:22:16.720
Some have an awesome button, "Reset 2FA.

00:22:16.720 --> 00:22:18.080
Here's a QR code you scan.

00:22:18.080 --> 00:22:21.040
Boom, you're good to go."

00:22:21.040 --> 00:22:24.680
Others say, "Your Google Authenticator is enabled."

00:22:24.680 --> 00:22:27.640
I'm like, "What?

00:22:27.640 --> 00:22:29.200
I don't have a Google Authenticator.

00:22:29.200 --> 00:22:32.760
There's like 50 apps that are 2FA apps.

00:22:32.760 --> 00:22:38.240
T-Mobile and 10 of the other ones say, "Use your Google Authenticator here."

00:22:38.240 --> 00:22:40.760
No, it is not.

00:22:40.760 --> 00:22:43.480
It's like, "Use your Internet Explorer 6 here."

00:22:43.480 --> 00:22:45.600
No, there are other browsers.

00:22:45.600 --> 00:22:49.560
Please don't just say, "Use your Google Authenticator," right?

00:22:49.560 --> 00:22:52.280
But you could just go, "Yep, this is my Google Authenticator.

00:22:52.280 --> 00:22:55.240
It's called something else and it doesn't come from Google, but sure enough, I'm going

00:22:55.240 --> 00:22:57.560
to set this up."

00:22:57.560 --> 00:23:05.560
And like Christopher out in the audience here, that is my next recommendation is, well, if

00:23:05.560 --> 00:23:07.120
not Authy, what?

00:23:07.120 --> 00:23:09.440
Because Google Authenticator is garbage.

00:23:09.440 --> 00:23:13.920
Like I said, if your phone gets messed up, you've lost all logins forever.

00:23:13.920 --> 00:23:14.920
There's not a sync...

00:23:14.920 --> 00:23:18.760
At least last time I used it, there's no way to sync it or export it or any of that stuff,

00:23:18.760 --> 00:23:19.760
right?

00:23:19.760 --> 00:23:20.760
That's bad news.

00:23:20.760 --> 00:23:21.760
So Bitwarden.

00:23:21.760 --> 00:23:22.760
Bitwarden is awesome.

00:23:22.760 --> 00:23:28.120
This is a premium feature, so you have to have the premium version of Bitwarden, which

00:23:28.120 --> 00:23:31.800
is $10 a year or 80 cents a month or something.

00:23:31.800 --> 00:23:33.640
I'm like, "Yeah, fine.

00:23:33.640 --> 00:23:34.640
That seems fair."

00:23:34.640 --> 00:23:35.640
But Bitwarden is cool.

00:23:35.640 --> 00:23:39.160
It's open source, multi-platform.

00:23:39.160 --> 00:23:45.160
You just scan stuff or enter the code that they give you for the 2FA and off it goes.

00:23:45.160 --> 00:23:50.320
And because it has a browser plugin, you can just click on your name when it says, "Type

00:23:50.320 --> 00:23:51.320
in your 2FA code."

00:23:51.320 --> 00:23:52.320
You don't have to go pull it up.

00:23:52.320 --> 00:23:54.640
You just click the button and boom, it auto-fills it, which is great.

00:23:54.640 --> 00:23:59.760
I don't put it in my one password because I'm just not ready to say my 2FA logins and

00:23:59.760 --> 00:24:05.280
my passwords are all stored behind one single platform because then your 2FA is kind of

00:24:05.280 --> 00:24:07.160
toast if somebody breaks into that.

00:24:07.160 --> 00:24:11.840
So Bitwarden for 2FA, one password for logins for me at the moment.

00:24:11.840 --> 00:24:14.040
What do you think?

00:24:14.040 --> 00:24:15.960
Well, I'm using...

00:24:15.960 --> 00:24:20.240
Maybe I shouldn't tell people, but yeah, I'm using Authy.

00:24:20.240 --> 00:24:27.440
So are they still supporting it on anything?

00:24:27.440 --> 00:24:29.400
They're not supporting it on...

00:24:29.400 --> 00:24:31.040
They used to have a desktop app.

00:24:31.040 --> 00:24:32.840
They don't have that anymore.

00:24:32.840 --> 00:24:36.120
They have an iPad and an iOS and an Android app.

00:24:36.120 --> 00:24:45.200
Since you have an Apple Silicon one, you can run the iPad version on your Mac, just like

00:24:45.200 --> 00:24:46.320
a desktop app.

00:24:46.320 --> 00:24:50.080
So it kind of feels the same except for it doesn't have like the keyboards behave weirdly

00:24:50.080 --> 00:24:52.760
and stuff because it doesn't expect you to have a keyboard.

00:24:52.760 --> 00:24:59.200
Maybe you're using it a lot more than I am, but it doesn't bother me to run it on my phone.

00:24:59.200 --> 00:25:00.200
Yeah.

00:25:00.200 --> 00:25:04.000
Well, I mean, it doesn't bother me either, but I've got...

00:25:04.000 --> 00:25:05.760
There's a bunch of different apps that I have.

00:25:05.760 --> 00:25:12.220
For example, the credit card front end system for Talk Python courses.

00:25:12.220 --> 00:25:13.800
It has a Remember Me button.

00:25:13.800 --> 00:25:15.960
It never remembers me.

00:25:15.960 --> 00:25:17.200
Never.

00:25:17.200 --> 00:25:18.420
It has a 2FA.

00:25:18.420 --> 00:25:20.120
It never remembers the 2FA.

00:25:20.120 --> 00:25:25.000
So even if I say, "Remember me," 20 minutes later, I'm putting in the password and the

00:25:25.000 --> 00:25:26.000
2FA.

00:25:26.000 --> 00:25:28.800
And then 20 minutes later, I'm putting the password in the...

00:25:28.800 --> 00:25:33.920
So there's a few places like that that just constantly ask for the 2FA.

00:25:33.920 --> 00:25:37.480
DigitalOcean's a little bit like that.

00:25:37.480 --> 00:25:41.340
Every single time you're putting in the 2FA, there's not a trust this device sort of thing.

00:25:41.340 --> 00:25:42.340
And so I end up...

00:25:42.340 --> 00:25:43.340
I'm probably in...

00:25:43.340 --> 00:25:45.360
I used to be in Authy, now I'm in Bitward.

00:25:45.360 --> 00:25:49.440
And I'm probably in that like five times a day at least, every day.

00:25:49.440 --> 00:25:54.960
So anyway, so one final thing before I move off of this.

00:25:54.960 --> 00:25:58.680
After all of this, they said, I don't know how this helps.

00:25:58.680 --> 00:26:02.740
Doesn't seem like it should help, but somehow they said, "As part of our recommendation

00:26:02.740 --> 00:26:07.880
to users, it's very important that you upgrade to the latest version of Authy."

00:26:07.880 --> 00:26:10.520
Why?

00:26:10.520 --> 00:26:13.680
Because the endpoint had something I don't understand.

00:26:13.680 --> 00:26:15.960
But anyway, it says you must.

00:26:15.960 --> 00:26:18.360
And then if you go and look at the upgrade, all it says for the...

00:26:18.360 --> 00:26:21.440
It says you must get version 26.1.0.

00:26:21.440 --> 00:26:22.680
What does it say here?

00:26:22.680 --> 00:26:23.680
Bug fixes.

00:26:23.680 --> 00:26:27.200
Not, this is an important security update and you need to update because we're trying

00:26:27.200 --> 00:26:29.160
to protect your privacy.

00:26:29.160 --> 00:26:31.480
They're hiding behind bug fixes and it's disgraceful.

00:26:31.480 --> 00:26:32.840
All right, this is bad.

00:26:32.840 --> 00:26:35.880
So all these things taken together, I'm like, you know what?

00:26:35.880 --> 00:26:38.240
It may be safe, it may be not, but I'm out.

00:26:38.240 --> 00:26:41.680
Like this is not where my important things live.

00:26:41.680 --> 00:26:42.680
>> Okay.

00:26:42.680 --> 00:26:47.720
>> Yeah, and OFAC also out there says, "Hey, if you're okay with recommending paid services,"

00:26:47.720 --> 00:26:48.720
which I am.

00:26:48.720 --> 00:26:51.160
"One password is what I migrated away to from Authy."

00:26:51.160 --> 00:26:53.120
Yeah, one password is awesome.

00:26:53.120 --> 00:26:57.360
But like I said, I have my logins at one password, so I put my 2FA in Bitward.

00:26:57.360 --> 00:26:58.360
All right.

00:26:58.360 --> 00:26:59.360
Whew, that was a long extra.

00:26:59.360 --> 00:27:01.040
That should have just been a thing, right?

00:27:01.040 --> 00:27:02.040
Extra.

00:27:02.040 --> 00:27:06.120
Remember a while ago, I did this article, "Unsolicited Advice for Mozilla and Firefox," like your

00:27:06.120 --> 00:27:15.040
AI, your good citizen AI project probably won't save Mozilla.

00:27:15.040 --> 00:27:18.160
It probably needs more than that and it won't really probably help Firefox either.

00:27:18.160 --> 00:27:22.600
So let's do some things that help them because I'm in principle a fan of them.

00:27:22.600 --> 00:27:27.840
Well, I said one of the things, my main recommendation was like a privacy-focused Google Docs.

00:27:27.840 --> 00:27:34.560
Well, they didn't do it, but Proton, the Proton mail people just came up with a Google Docs

00:27:34.560 --> 00:27:39.600
equivalent, but with end-to-end encryption and no AI training and all the kinds of things

00:27:39.600 --> 00:27:43.760
you would like about your data without the negatives.

00:27:43.760 --> 00:27:49.720
So if you have Proton, there's now collaborative docs with it, which is kind of cool.

00:27:49.720 --> 00:27:50.720
It looks pretty.

00:27:50.720 --> 00:27:51.720
I think it looks pretty nice.

00:27:51.720 --> 00:27:55.360
So just want to give that a shout out.

00:27:55.360 --> 00:28:03.680
Do you know, I probably don't want to ask, are Google Docs open to scanning for AI?

00:28:03.680 --> 00:28:12.080
I believe that the freeware versions are, the free versions, but the business ones maybe

00:28:12.080 --> 00:28:13.360
not.

00:28:13.360 --> 00:28:18.680
I think your business workspace stuff is not open to that, but like your personal Gmail

00:28:18.680 --> 00:28:22.680
is open to like scanning for ads and stuff, whereas the business one isn't.

00:28:22.680 --> 00:28:25.480
So that's the price you pay.

00:28:25.480 --> 00:28:30.320
Last thing is the code in a castle thing I'm doing in October 5th.

00:28:30.320 --> 00:28:35.680
The early bird discount closes tomorrow if you listen to this right when it comes out.

00:28:35.680 --> 00:28:38.000
So if you're interested, please check it out.

00:28:38.000 --> 00:28:42.160
It'd be super awesome to spend a week hanging out in Tuscany, doing all sorts of things

00:28:42.160 --> 00:28:43.160
together.

00:28:43.160 --> 00:28:46.400
And yeah, that's it for my extras, Brian.

00:28:46.400 --> 00:28:48.160
That's a lot of extras, Tony.

00:28:48.160 --> 00:28:50.160
I mean, Michael.

00:28:50.160 --> 00:28:51.160
Yeah.

00:28:51.160 --> 00:28:52.160
All right.

00:28:53.160 --> 00:28:55.080
Shall we have a joke?

00:28:55.080 --> 00:28:56.280
Yeah.

00:28:56.280 --> 00:28:59.000
This joke I called, "I Lied."

00:28:59.000 --> 00:29:02.000
It's like a cartoon.

00:29:02.000 --> 00:29:06.680
It's a woman behind an esoteric program and sort of thing.

00:29:06.680 --> 00:29:07.680
She's got a gun.

00:29:07.680 --> 00:29:09.040
It says, "I lied.

00:29:09.040 --> 00:29:10.240
I don't have Netflix.

00:29:10.240 --> 00:29:11.240
Take off your shoes.

00:29:11.240 --> 00:29:12.240
We're going to learn Rust."

00:29:12.240 --> 00:29:17.580
And I just thought about like this, all this like Rust energy, like we're converting that

00:29:17.580 --> 00:29:18.580
to the Rust.

00:29:18.580 --> 00:29:19.580
We're rewriting that in Rust.

00:29:19.580 --> 00:29:21.640
It's just like, you're doing Rust.

00:29:21.640 --> 00:29:23.560
That's what the world's doing.

00:29:23.560 --> 00:29:24.560
Sit down.

00:29:24.560 --> 00:29:26.920
So she invited someone over to like watch Netflix.

00:29:26.920 --> 00:29:27.920
Like, "I lied.

00:29:27.920 --> 00:29:29.320
I don't have Netflix.

00:29:29.320 --> 00:29:30.320
Take off your shoes.

00:29:30.320 --> 00:29:32.080
We're going to learn Rust."

00:29:32.080 --> 00:29:34.000
I thought I would catch the zeitgeist.

00:29:34.000 --> 00:29:35.000
Well, Brian.

00:29:35.000 --> 00:29:36.000
It's bizarre, man.

00:29:36.000 --> 00:29:37.000
It's amazing.

00:29:37.000 --> 00:29:38.000
Okay.

00:29:38.000 --> 00:29:44.640
I'll maybe I'll put that as the chapter art for this one.

00:29:44.640 --> 00:29:46.640
Because the picture, the eyes are amazing.

00:29:46.640 --> 00:29:47.640
The desperation.

00:29:47.640 --> 00:29:48.640
That's pretty good.

00:29:48.640 --> 00:29:49.640
Yeah.

00:29:53.640 --> 00:29:55.320
I've resisted Rust so far.

00:29:55.320 --> 00:30:00.200
I mean, I'm happy that things are getting faster and whatnot, but I haven't learned

00:30:00.200 --> 00:30:01.200
it yet.

00:30:01.200 --> 00:30:02.200
Yeah.

00:30:02.200 --> 00:30:03.200
Same.

00:30:03.200 --> 00:30:04.200
All right.

00:30:04.200 --> 00:30:05.200
Well, cool.

00:30:05.200 --> 00:30:06.200
Nice episode.

00:30:06.200 --> 00:30:08.200
Thanks for joining on today.

00:30:08.200 --> 00:30:09.200
You bet.

00:30:09.200 --> 00:30:10.200
Fun as always.

00:30:10.200 --> 00:30:11.200
Bye, everyone.

00:30:11.200 --> 00:30:11.200
Bye.

00:30:11.200 --> 00:30:13.200
Bye everyone

