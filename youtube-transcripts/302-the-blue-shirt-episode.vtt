WEBVTT

00:00:00.000 --> 00:00:02.100
Hey Brian, hey YouTube.


00:00:02.100 --> 00:00:02.940
- Hey.


00:00:02.940 --> 00:00:06.300
- Hey everyone out there, thanks for being here.


00:00:06.300 --> 00:00:08.580
If you're here live, there's some ideas in the chat


00:00:08.580 --> 00:00:10.180
and we'll try to make them part of the show.


00:00:10.180 --> 00:00:14.620
If you're not, well, we appreciate you watching anyway.


00:00:14.620 --> 00:00:16.300
Brian, you ready to kick this thing off?


00:00:16.300 --> 00:00:17.980
- I am, yeah.


00:00:17.980 --> 00:00:18.820
- All right.


00:00:18.820 --> 00:00:21.620
Hello and welcome to Python Bytes,


00:00:21.620 --> 00:00:23.500
where we deliver Python news and headlines


00:00:23.500 --> 00:00:25.820
directly to your earbuds.


00:00:25.820 --> 00:00:31.660
This is episode 302, recorded September 20th, 2022.


00:00:31.660 --> 00:00:32.740
I'm Michael Kennedy.


00:00:32.740 --> 00:00:34.700
And I'm Brian Okken.


00:00:34.700 --> 00:00:36.100
Hey, Brian, how you doing?


00:00:36.100 --> 00:00:37.620
I'm great.


00:00:37.620 --> 00:00:38.900
It's a nice day.


00:00:38.900 --> 00:00:43.100
Yeah, it is a lovely fall day here in the Pacific Northwest.


00:00:43.100 --> 00:00:44.260
Dry as can be.


00:00:44.260 --> 00:00:46.620
I just had a very nice walk with my dog.


00:00:46.620 --> 00:00:47.860
Nice.


00:00:47.860 --> 00:00:49.860
So it's going to be hard to go back


00:00:49.860 --> 00:00:53.220
to work after this podcast, looking out the window.


00:00:53.220 --> 00:00:55.900
I give myself 50/50 chances of making it.


00:00:55.900 --> 00:00:59.060
- Yeah, I gotta go back to the other screen.


00:00:59.060 --> 00:01:00.180
- That's right.


00:01:00.180 --> 00:01:02.300
I was gonna be looking that way.


00:01:02.300 --> 00:01:03.140
Awesome.


00:01:03.140 --> 00:01:05.020
Well, before we kick off the show,


00:01:05.020 --> 00:01:06.700
I also wanna say thank you once again


00:01:06.700 --> 00:01:08.220
to Microsoft for Startups.


00:01:08.220 --> 00:01:10.140
They're sponsoring this episode again.


00:01:10.140 --> 00:01:11.940
And huge supporters of the show,


00:01:11.940 --> 00:01:13.740
tell you more about that later.


00:01:13.740 --> 00:01:16.740
Brian, could you just whisper to me


00:01:16.740 --> 00:01:18.760
about your next project here?


00:01:18.760 --> 00:01:19.720
- Yeah.


00:01:19.720 --> 00:01:20.560
So,


00:01:21.860 --> 00:01:26.780
Oh, add to the stream. Code Whisperer. So, there's,


00:01:26.780 --> 00:01:30.980
so we've talked about, I think we've talked about GitHub copilot,


00:01:30.980 --> 00:01:35.700
before, and I'm not sure if we talked about Amazon's code whisper yet,


00:01:35.700 --> 00:01:40.180
but, I don't think so. Okay. So code whisper is a similar kind of thing.


00:01:40.180 --> 00:01:43.340
I think I haven't tried it myself actually.


00:01:43.340 --> 00:01:46.820
but there's an article by Brian Tarbox that says,


00:01:46.820 --> 00:01:51.620
can Amazon's code whisper write better Python than you? And,


00:01:51.620 --> 00:01:52.580
It's interesting.


00:01:52.580 --> 00:01:55.220
I brought this up because I've been thinking about it a lot


00:01:55.220 --> 00:01:59.020
about these AI copilot sort of things and stuff.


00:01:59.020 --> 00:02:04.020
So Amazon's offering looks like it's almost,


00:02:04.020 --> 00:02:06.100
I don't know if it's a similar sort of model


00:02:06.100 --> 00:02:08.420
in this example that he's giving.


00:02:08.420 --> 00:02:10.740
He has a bunch of examples.


00:02:10.740 --> 00:02:14.780
He's going through, you write a descript,


00:02:14.780 --> 00:02:16.100
he's writing a description.


00:02:16.100 --> 00:02:17.140
I don't know if this is the only way,


00:02:17.140 --> 00:02:20.060
but basically describe the function you want,


00:02:20.060 --> 00:02:22.700
like function to open an S3 file


00:02:22.700 --> 00:02:26.280
and it writes one for you and even titles it.


00:02:26.280 --> 00:02:28.140
So you give it a code comment


00:02:28.140 --> 00:02:30.740
and it like pops out some code.


00:02:30.740 --> 00:02:35.220
Now for, this is kind of an interesting thing around,


00:02:35.220 --> 00:02:36.780
especially around Amazon services,


00:02:36.780 --> 00:02:38.260
'cause there's a lot of Amazon services


00:02:38.260 --> 00:02:41.220
and you do a lot of API lookups and stuff.


00:02:41.220 --> 00:02:45.300
So some help directly around APIs.


00:02:45.300 --> 00:02:49.300
Actually, I think that that area makes kind of some sense,


00:02:49.300 --> 00:02:52.340
Although if you need an AI to figure out the API,


00:02:52.340 --> 00:02:54.260
maybe the API is a little complicated.


00:02:54.260 --> 00:02:55.080
Just saying.


00:02:55.080 --> 00:02:55.920
- Exactly.


00:02:55.920 --> 00:03:01.260
- But the discussion is an interesting one through here


00:03:01.260 --> 00:03:04.780
about basically about the code that it gets out.


00:03:04.780 --> 00:03:07.700
And it's really not talking about the morals of it


00:03:07.700 --> 00:03:09.020
or anything.


00:03:09.020 --> 00:03:11.540
It's just really talking about using it


00:03:11.540 --> 00:03:12.560
and how good it is.


00:03:12.560 --> 00:03:16.600
The punchline at the end.


00:03:16.600 --> 00:03:23.440
So the author admits that the title was intended


00:03:23.440 --> 00:03:27.640
to be clickbaity, which is cool.


00:03:27.640 --> 00:03:28.280
I'm glad that--


00:03:28.280 --> 00:03:29.720
>>Luis: Because it's the internet.


00:03:29.720 --> 00:03:30.960
>>Tom: Yeah.


00:03:30.960 --> 00:03:35.640
But despite that, in walking through it,


00:03:35.640 --> 00:03:39.720
he thinks that it's actually just making him


00:03:39.720 --> 00:03:42.840
a little bit better because it's more efficient.


00:03:42.840 --> 00:03:45.320
And I'd like to quote a little bit.


00:03:45.320 --> 00:03:47.880
Despite the click fade title,


00:03:47.880 --> 00:03:52.200
whether Code Whisperer's code is better or worse than mine


00:03:52.200 --> 00:03:55.560
is at the margins and not really important.


00:03:55.560 --> 00:03:58.520
What is significant is that it has the potential


00:03:58.520 --> 00:04:01.440
to save me a ton of time and mental space


00:04:01.440 --> 00:04:04.560
to focus on improving, refactoring, and testing.


00:04:04.560 --> 00:04:05.840
It makes me a better programmer


00:04:05.840 --> 00:04:10.120
by taking on some of the undifferentiated heavy lifting.


00:04:10.120 --> 00:04:12.600
And I kind of like that idea of,


00:04:13.680 --> 00:04:18.680
it kind of takes away the blank canvas situation of like,


00:04:18.680 --> 00:04:20.940
it might show you how it might,


00:04:20.940 --> 00:04:23.160
one way to do it and you can look at it and go,


00:04:23.160 --> 00:04:24.640
oh no, I wouldn't do it that way.


00:04:24.640 --> 00:04:25.640
And then you can change it,


00:04:25.640 --> 00:04:29.160
but now you're on your second draft already.


00:04:29.160 --> 00:04:33.520
Instead of, so it's letting the AI do the first draft.


00:04:33.520 --> 00:04:34.960
It's kind of a neat idea.


00:04:34.960 --> 00:04:37.880
I was looking, he did this data class one, for instance,


00:04:37.880 --> 00:04:39.880
this kind of blew me away.


00:04:39.880 --> 00:04:42.160
He's got an inventory item.


00:04:42.160 --> 00:04:47.160
And it's already, and he writes a description


00:04:47.160 --> 00:04:50.680
for a function that returns whether or not


00:04:50.680 --> 00:04:52.800
an item costs more than $10.


00:04:52.800 --> 00:05:00.000
And it returns, it writes a function called expensive.


00:05:00.000 --> 00:05:02.380
Like he didn't say expensive in the title at all,


00:05:02.380 --> 00:05:05.660
but in the description, it said expensive,


00:05:05.660 --> 00:05:06.880
and then it returns whether or not


00:05:06.880 --> 00:05:08.560
the unit price is greater than 10.


00:05:08.560 --> 00:05:11.880
- And it realized it was within a class,


00:05:11.880 --> 00:05:15.060
And so it used self dot unit price


00:05:15.060 --> 00:05:17.340
and not just some unassociated function


00:05:17.340 --> 00:05:20.040
that returns greater than 10.


00:05:20.040 --> 00:05:20.880
- Yeah.


00:05:20.880 --> 00:05:25.000
So it is interesting.


00:05:25.000 --> 00:05:28.320
Yeah, anyway, interesting discussion.


00:05:28.320 --> 00:05:30.820
And then also interesting looking at the code.


00:05:30.820 --> 00:05:32.760
He tried it against test code.


00:05:32.760 --> 00:05:35.580
He said, I want a function to test the inventory class.


00:05:35.580 --> 00:05:37.620
Well, one, I think it was probably,


00:05:37.620 --> 00:05:39.780
maybe this was a prompting problem.


00:05:39.780 --> 00:05:43.180
you shouldn't have one function to test an entire class.


00:05:43.180 --> 00:05:46.720
My druthers, but it did a decent job


00:05:46.720 --> 00:05:49.060
of at least giving you a first start of like,


00:05:49.060 --> 00:05:51.020
one of the things to test is you need to test


00:05:51.020 --> 00:05:54.020
the expensive thing, you need to function,


00:05:54.020 --> 00:05:55.580
you need to test the total cost.


00:05:55.580 --> 00:05:57.300
It just did it all in one function though.


00:05:57.300 --> 00:05:59.460
So, I mean, I guess that's what he asked for, but--


00:05:59.460 --> 00:06:01.940
- Coming up with the total cost, which is computed.


00:06:01.940 --> 00:06:03.300
That's kind of interesting.


00:06:03.300 --> 00:06:05.220
- Yeah.


00:06:05.220 --> 00:06:08.500
Yeah, that is interesting.


00:06:08.500 --> 00:06:09.340
Yeah.


00:06:09.340 --> 00:06:12.580
- Because the base item, it has a unit price of $10


00:06:12.580 --> 00:06:13.560
and there's five of them.


00:06:13.560 --> 00:06:16.440
And so in the test it asserted the total cost is 50.


00:06:16.440 --> 00:06:20.260
- Yeah, definitely interesting.


00:06:20.260 --> 00:06:23.180
Interesting to definitely look at and good.


00:06:23.180 --> 00:06:25.940
And it might help you think about other test cases around it


00:06:25.940 --> 00:06:28.580
so I guess cool.


00:06:28.580 --> 00:06:30.460
I wanted to point out while I'm thinking about it,


00:06:30.460 --> 00:06:32.100
one of the reasons why I brought this up


00:06:32.100 --> 00:06:35.420
is I just listened to a ChangeLog episode


00:06:35.420 --> 00:06:37.860
with Simon Willison called


00:06:37.860 --> 00:06:39.780
stable diffusion breaks the internet.


00:06:39.780 --> 00:06:42.640
And this is focused on AI driven artwork,


00:06:42.640 --> 00:06:45.220
which is definitely interesting


00:06:45.220 --> 00:06:47.700
and an interesting conversation.


00:06:47.700 --> 00:06:50.980
But in it, they talk, since these are all programmers,


00:06:50.980 --> 00:06:53.080
they talk about how this,


00:06:53.080 --> 00:06:55.560
the same sort of argument applies around,


00:06:55.560 --> 00:06:59.580
around code generation of the morality of it.


00:06:59.580 --> 00:07:02.340
And then aside, morals aside,


00:07:02.340 --> 00:07:04.900
and legal stuff aside, it's happening.


00:07:04.900 --> 00:07:09.900
So how do you, Simon brings up the term of basically just,


00:07:09.900 --> 00:07:15.960
you need to be one level of abstraction above the AI system.


00:07:15.960 --> 00:07:20.100
So just to make sure that you were still adding value.


00:07:20.100 --> 00:07:22.420
And the original author of this article


00:07:22.420 --> 00:07:23.620
talked about this as well,


00:07:23.620 --> 00:07:28.100
of it's not about really not thinking,


00:07:28.100 --> 00:07:30.580
it's about freeing up some of your brain space


00:07:30.580 --> 00:07:32.100
to do other things.


00:07:32.100 --> 00:07:33.780
So, and interesting.


00:07:33.780 --> 00:07:34.740
- Yeah, it is interesting.


00:07:34.740 --> 00:07:38.140
I mean, there's certain things that you probably don't,


00:07:38.140 --> 00:07:39.820
just don't need to remember.


00:07:39.820 --> 00:07:41.980
You know, I'm thinking of,


00:07:41.980 --> 00:07:45.060
do I really need to remember all the steps


00:07:45.060 --> 00:07:47.460
in the connection string schema


00:07:47.460 --> 00:07:49.460
for connecting to SQLAlchemy?


00:07:49.460 --> 00:07:50.300
Probably not.


00:07:50.300 --> 00:07:52.980
I could just say, connect to SQL,


00:07:52.980 --> 00:07:55.060
you know, connect SQLAlchemy to a Postgres database


00:07:55.060 --> 00:07:57.340
and, boom, it gives me, you know,


00:07:57.340 --> 00:08:01.860
create the metadata base class


00:08:01.860 --> 00:08:04.800
and then create an engine and create a connection


00:08:04.800 --> 00:08:07.320
and bind the engine, all those steps, right?


00:08:07.320 --> 00:08:10.900
Like if you could just kick that kind of stuff out,


00:08:10.900 --> 00:08:13.660
that's something you do once for a project


00:08:13.660 --> 00:08:15.580
and you just never do, it's not like,


00:08:15.580 --> 00:08:18.260
boy, I'm sure I'm not good at connecting to SQLAlchemy.


00:08:18.260 --> 00:08:19.980
I'm just not a good programmer, I guess, right?


00:08:19.980 --> 00:08:21.860
You look it up, you put it in there and you go.


00:08:21.860 --> 00:08:23.620
And so if you didn't have to take the step of looking up,


00:08:23.620 --> 00:08:25.260
that's kind of cool.


00:08:25.260 --> 00:08:28.180
- Yeah, I also like the, I didn't think about this before.


00:08:28.180 --> 00:08:30.500
And I think GitHub actually intended you


00:08:30.500 --> 00:08:33.500
to think about it like this with naming it CoPilot,


00:08:33.500 --> 00:08:35.900
it's not intended to take over your work,


00:08:35.900 --> 00:08:38.000
but it's like sitting down with somebody


00:08:38.000 --> 00:08:39.620
that kinda knows what they're doing


00:08:39.620 --> 00:08:41.760
and pair programming with them.


00:08:41.760 --> 00:08:43.960
You can't turn off your brain,


00:08:43.960 --> 00:08:46.820
but maybe you can ease up a little bit.


00:08:46.820 --> 00:08:49.380
- Wait, before you close this,


00:08:49.380 --> 00:08:51.780
scroll down to this black and white code editor.


00:08:51.780 --> 00:08:55.820
Boy, look at that.


00:08:55.820 --> 00:08:58.820
If you check out this article, there is a,


00:08:58.820 --> 00:09:00.060
I don't even know what to make of it,


00:09:00.060 --> 00:09:03.980
'cause to me it looks like a super retro early macOS,


00:09:03.980 --> 00:09:07.820
like macOS one type of UI,


00:09:07.820 --> 00:09:10.900
but then the file is C colon backslash CD.


00:09:10.900 --> 00:09:13.460
It's just a mix of like beautiful retro.


00:09:13.460 --> 00:09:15.340
- Yeah, well, he was talking about


00:09:15.340 --> 00:09:19.060
the first recorded code completion


00:09:19.060 --> 00:09:23.460
appears in the Pascal editor called Alice in 1985.


00:09:23.460 --> 00:09:27.460
- Yeah, and I guess that's it.


00:09:27.460 --> 00:09:29.980
Well, that's a heck of an editor.


00:09:29.980 --> 00:09:30.820
- Super cool.


00:09:30.820 --> 00:09:34.140
All right, on to the next one.


00:09:34.140 --> 00:09:35.480
- Yeah.


00:09:35.480 --> 00:09:36.320
- Two things real quick.


00:09:36.320 --> 00:09:37.260
I just wanna point out,


00:09:37.260 --> 00:09:40.340
or just sort of make a comment, it's not point out.


00:09:40.340 --> 00:09:41.980
This morning I had to make a new API


00:09:41.980 --> 00:09:44.660
because one thing I've learned about writing courses


00:09:44.660 --> 00:09:47.100
that depend on other people's APIs,


00:09:47.100 --> 00:09:49.660
is other people suck at keeping their APIs running.


00:09:49.660 --> 00:09:53.100
They either decide, you know what,


00:09:53.100 --> 00:09:55.180
this is costing me $10,000 a month


00:09:55.180 --> 00:09:57.020
and I'm gonna have to charge for it, boo hoo.


00:09:57.020 --> 00:09:57.860
No, just kidding.


00:09:57.860 --> 00:09:58.760
That's a reasonable reason to change,


00:09:58.760 --> 00:10:01.200
but it changes like with the open weather API


00:10:01.200 --> 00:10:05.520
or like this one for this Twilio course I was using.


00:10:05.520 --> 00:10:08.840
So I spent the morning a little bit yesterday


00:10:08.840 --> 00:10:11.320
and this morning just doing a complete


00:10:11.320 --> 00:10:13.840
from scratch FastAPI,


00:10:13.840 --> 00:10:17.720
API and what a ton of fun it is to just work with FastAPI


00:10:17.720 --> 00:10:20.880
and get to build out all sorts of neat,


00:10:20.880 --> 00:10:21.780
neat little things.


00:10:21.780 --> 00:10:25.320
And so, you know, I just wanna shout out


00:10:25.320 --> 00:10:27.240
if you're building something with FastAPI


00:10:27.240 --> 00:10:28.200
or you're building an API,


00:10:28.200 --> 00:10:29.680
you can definitely give FastAPI a look.


00:10:29.680 --> 00:10:32.320
There's a lot of neat things you can do to put together,


00:10:32.320 --> 00:10:33.520
like here's a whole little website.


00:10:33.520 --> 00:10:38.520
It even does CSS and images and sort of chameleon templates.


00:10:38.520 --> 00:10:41.400
I mean, it's basically static, but anyway,


00:10:41.400 --> 00:10:43.760
fun stuff and continues to be fun.


00:10:43.760 --> 00:10:46.880
- And so which course is this for?


00:10:46.880 --> 00:10:49.580
- This is for the Python-powered chat apps


00:10:49.580 --> 00:10:52.260
with Twilio and SendGrid, which is actually a free course,


00:10:52.260 --> 00:10:55.220
but it sets up a chat bot that you order


00:10:55.220 --> 00:10:57.280
from like a bakery type thing.


00:10:57.280 --> 00:10:58.120
- Oh, okay.


00:10:58.120 --> 00:10:59.120
for WhatsApp.


00:10:59.120 --> 00:11:03.940
And the problem is, if you go to the APIs that the WhatsApp thing was using, they just


00:11:03.940 --> 00:11:09.320
500 or 404 or one of those two things, but neither of which is super useful for the course.


00:11:09.320 --> 00:11:13.200
So I recreated it in FastAPI this morning, which is cool.


00:11:13.200 --> 00:11:17.040
Now it lives on the internet.


00:11:17.040 --> 00:11:18.200
But that's not what I want to talk about.


00:11:18.200 --> 00:11:21.800
As super as that is, I want to talk about Apache super set.


00:11:21.800 --> 00:11:24.760
Okay, have you heard of super set?


00:11:24.760 --> 00:11:25.760
No.


00:11:25.760 --> 00:11:27.640
Well, the word I know, of course.


00:11:27.640 --> 00:11:32.600
Apache Superset is a modern data exploration and visualization platform.


00:11:32.600 --> 00:11:34.640
I came across that the other day and I'm like,


00:11:34.640 --> 00:11:36.640
"What the heck is this? I haven't even heard of this."


00:11:36.640 --> 00:11:40.640
It has almost 50,000 GitHub stars.


00:11:40.640 --> 00:11:48.760
That's insane and is put together by Max Bushman,


00:11:48.760 --> 00:11:54.360
also the creator of Apache Airflow,


00:11:54.360 --> 00:11:55.720
which is pretty cool.


00:11:55.720 --> 00:11:56.200
>> Yeah.


00:11:56.200 --> 00:12:01.000
>> So this turns out to be a really interesting program,


00:12:01.000 --> 00:12:04.960
and it's written in Python and TypeScript.


00:12:04.960 --> 00:12:06.540
It's really front-end heavy because it has


00:12:06.540 --> 00:12:08.480
a lot of visualizations and stuff.


00:12:08.480 --> 00:12:10.120
But all the back-end stuff,


00:12:10.120 --> 00:12:11.640
it's all the things that you would know.


00:12:11.640 --> 00:12:13.440
It's Flask, it's Redis,


00:12:13.440 --> 00:12:19.120
Celery, many of the pandas and data science tools you would know.


00:12:19.120 --> 00:12:24.560
But it's not exactly a tool for developers like Jupyter.


00:12:24.560 --> 00:12:27.020
So Jupyter would be a way that data scientists


00:12:27.020 --> 00:12:29.840
who know Python would sit down and leverage


00:12:29.840 --> 00:12:33.800
their Python skills to check out data and explore things.


00:12:33.800 --> 00:12:36.720
This one is really almost meant for like people


00:12:36.720 --> 00:12:39.080
who would say, I'm gonna fire up Excel


00:12:39.080 --> 00:12:40.040
and see what's going on,


00:12:40.040 --> 00:12:42.800
or I'm gonna fire up some BI tool like Tableau


00:12:42.800 --> 00:12:44.840
and I wanna look at it a little bit


00:12:44.840 --> 00:12:46.260
and see what's going on.


00:12:46.260 --> 00:12:49.840
And it's also open source and written in Python,


00:12:49.840 --> 00:12:55.400
which means it has APIs and extensions and plugins in Python,


00:12:55.400 --> 00:12:56.960
which is pretty excellent.


00:12:56.960 --> 00:12:59.280
It has a way to explore your data.


00:12:59.280 --> 00:13:01.400
Brian, look at this picture. What do you think?


00:13:01.400 --> 00:13:03.660
>> I don't know what it is, but it's pretty.


00:13:03.660 --> 00:13:08.200
>> It's glorious, right? It's a fantastic way to visualize.


00:13:08.200 --> 00:13:11.360
Here's 25 contributors to a stream over time.


00:13:11.360 --> 00:13:15.400
You can see the growth of their contributions or not.


00:13:15.400 --> 00:13:19.800
The way you generate this is you just connect it to a database.


00:13:19.800 --> 00:13:26.800
It gives you the table, you say, make a chart out of this database and you draggy droppy the pieces over and boom, there it goes.


00:13:26.800 --> 00:13:32.800
And it doesn't have to just be the data in the database, it can be computed fields.


00:13:32.800 --> 00:13:39.800
So you could say I want to graph the sum of this join on to like the orders of each customer,


00:13:39.800 --> 00:13:44.800
or I want to see the max order for each customer, you know, things like that, right? So that's pretty cool.


00:13:44.800 --> 00:13:46.880
So you can explore data like that.


00:13:46.880 --> 00:13:48.520
You can create these dashboards,


00:13:48.520 --> 00:13:53.040
these live dashboards to see what's the state of our business today.


00:13:53.040 --> 00:13:56.680
It even comes with a SQL IDE.


00:13:56.680 --> 00:14:00.280
All of this in the browser are very Jupyter-esque.


00:14:00.280 --> 00:14:02.080
Pretty cool.


00:14:02.080 --> 00:14:03.880
>> Pretty neat. Yeah.


00:14:03.880 --> 00:14:05.560
>> Yeah. Very, very neat.


00:14:05.560 --> 00:14:09.040
It connects to, I told you it's Python,


00:14:09.040 --> 00:14:13.720
it connects to all of its databases using SQLAlchemy.


00:14:13.720 --> 00:14:16.400
And so any database that can be a data source


00:14:16.400 --> 00:14:20.760
for SQLAlchemy, you know, obviously Microsoft SQL Server,


00:14:20.760 --> 00:14:22.600
Postgres, MySQL, but you know,


00:14:22.600 --> 00:14:26.300
things you might not think of like Vertica or Druid


00:14:26.300 --> 00:14:29.760
or Amazon Redshift or Google BigQuery,


00:14:29.760 --> 00:14:31.320
all of these different data sources,


00:14:31.320 --> 00:14:34.440
Databricks are available as a data source


00:14:34.440 --> 00:14:36.960
because SQLAlchemy knows how to talk to it


00:14:36.960 --> 00:14:38.960
and this just leverages SQLAlchemy.


00:14:38.960 --> 00:14:41.560
- Yeah. Hey, hold it there for a sec.


00:14:41.560 --> 00:14:43.000
One of the things I learned recently,


00:14:43.000 --> 00:14:45.480
which I don't know why I never got this before.


00:14:45.480 --> 00:14:48.160
But look at the SQLite logo.


00:14:48.160 --> 00:14:48.980
- Yes.


00:14:48.980 --> 00:14:50.280
- It's got a quill in it.


00:14:50.280 --> 00:14:51.380
Did you- - It does.


00:14:51.380 --> 00:14:52.560
- Did you know that before,


00:14:52.560 --> 00:14:54.840
that it's a quill for SQLite?


00:14:54.840 --> 00:14:57.240
- Oh, quill.


00:14:57.240 --> 00:14:59.000
I did not put that together, no.


00:14:59.000 --> 00:14:59.980
Ha, how funny.


00:14:59.980 --> 00:15:03.080
Now we know.


00:15:03.080 --> 00:15:06.540
Cool, so anyway, yeah, people can check this out.


00:15:06.540 --> 00:15:10.080
It's kind of a little bit intense to run.


00:15:10.080 --> 00:15:11.160
You can pip install it,


00:15:11.160 --> 00:15:13.880
but probably the better way to do it,


00:15:13.880 --> 00:15:15.480
if you wanna just try it out,


00:15:15.480 --> 00:15:18.640
is to install it locally with Docker.


00:15:18.640 --> 00:15:22.340
So for me, for example, I just cloned the GitHub repo,


00:15:22.340 --> 00:15:24.040
and then went in there and said, "Docker compose,"


00:15:24.040 --> 00:15:26.160
gave it the YAML file and said, "Pull,"


00:15:26.160 --> 00:15:28.040
and then up and off it goes.


00:15:28.040 --> 00:15:29.560
- So this is not a service.


00:15:29.560 --> 00:15:32.720
This is just something you can download and you run then?


00:15:32.720 --> 00:15:34.120
- It's something you can download and run,


00:15:34.120 --> 00:15:37.960
but it has a lot of infrastructure bits clicking together.


00:15:37.960 --> 00:15:38.800
- Okay.


00:15:38.800 --> 00:15:42.680
When I interviewed Max Bushman,


00:15:42.680 --> 00:15:46.800
he actually is now the CEO and founder of Preset,


00:15:46.800 --> 00:15:50.440
which is SuperSet as a service.


00:15:50.440 --> 00:15:52.760
So if you want to have someone else host it for you,


00:15:52.760 --> 00:15:54.320
you can go check it out with them.


00:15:54.320 --> 00:15:58.240
But it's also a thing you can just run yourself.


00:15:58.240 --> 00:16:01.120
But look how popular it is, almost 50,000 GitHub stars,


00:16:01.120 --> 00:16:03.720
10,000 forks, and I just learned of it. That's nuts.


00:16:03.720 --> 00:16:05.500
>> Well, I mean, go figure.


00:16:05.500 --> 00:16:07.800
People actually want to know what's in their data.


00:16:07.800 --> 00:16:09.200
- I don't know. - I know.


00:16:09.200 --> 00:16:12.200
- Weirdos.


00:16:12.200 --> 00:16:13.040
- So weird.


00:16:13.040 --> 00:16:15.320
What I think is cool about it is it lets you connect


00:16:15.320 --> 00:16:18.160
into like your live operational data,


00:16:18.160 --> 00:16:19.760
not just like, oh, I downloaded a CSV


00:16:19.760 --> 00:16:21.160
and now I can ask questions, right?


00:16:21.160 --> 00:16:22.960
You can just like, whatever the current data is,


00:16:22.960 --> 00:16:25.040
let's get that and build a dashboard around it.


00:16:25.040 --> 00:16:26.440
- Pretty awesome, yeah.


00:16:26.440 --> 00:16:27.280
- Yeah.


00:16:27.280 --> 00:16:28.280
All right, well, Superset,


00:16:28.280 --> 00:16:32.080
if people need an alternative to Excel or BI or Tableau


00:16:32.080 --> 00:16:33.880
or whatever, check out Superset.


00:16:33.880 --> 00:16:37.340
It's very, very Python friendly and looks pretty nice.


00:16:37.340 --> 00:16:40.900
Do you know what else is nice?


00:16:40.900 --> 00:16:41.900
Tell me.


00:16:41.900 --> 00:16:44.540
Microsoft for Startups.


00:16:44.540 --> 00:16:46.380
Ah, they are.


00:16:46.380 --> 00:16:49.380
They are very nice.


00:16:49.380 --> 00:16:52.660
So yes, it's time to tell everyone about our sponsor, isn't it, Brian?


00:16:52.660 --> 00:16:53.660
Yes.


00:16:53.660 --> 00:16:55.460
Let me tell you all about Microsoft for Startups.


00:16:55.460 --> 00:17:01.220
They created Microsoft for Startups Founders Hub to help give early stage startups the


00:17:01.220 --> 00:17:04.020
support that they need to be successful.


00:17:04.020 --> 00:17:11.540
So if you are dreaming of or in the stages of an early stage startup, you should go apply


00:17:11.540 --> 00:17:17.600
and the link at the bottom in the show notes is by the by set of them slash founders hub


00:17:17.600 --> 00:17:20.640
2022 all one word.


00:17:20.640 --> 00:17:23.400
Go over there and apply is completely free to apply.


00:17:23.400 --> 00:17:25.180
You don't have to be third party verified.


00:17:25.180 --> 00:17:29.860
You don't have to be VC funded if they think your startup has merit.


00:17:29.860 --> 00:17:30.860
You're in the program.


00:17:30.860 --> 00:17:36.140
program comes with many thousands of dollars of cloud credits.


00:17:36.140 --> 00:17:42.940
You can you get some to start and as you make your way through different stages of your life cycle,


00:17:42.940 --> 00:17:49.580
you get a bunch more. But what's maybe even more important is access to their mentorship network.


00:17:49.580 --> 00:17:56.460
So there's a reason that Silicon Valley is the heart of so many startups. And it's not just,


00:17:56.460 --> 00:18:00.620
you know, the nice weather, if anything, that'll encourage people to go outside and not work on


00:18:00.620 --> 00:18:02.340
on their projects, right?


00:18:02.340 --> 00:18:05.220
It's the network and it's the connections.


00:18:05.220 --> 00:18:07.380
And if you live somewhere else,


00:18:07.380 --> 00:18:10.060
or if you're not in that space,


00:18:10.060 --> 00:18:13.260
it's very hard to get connected with the right people


00:18:13.260 --> 00:18:15.340
to make the right steps, right?


00:18:15.340 --> 00:18:18.580
So this program will get you set up there.


00:18:18.580 --> 00:18:21.100
So in addition to all the cloud credits and so on,


00:18:21.100 --> 00:18:23.220
you have access to this founders network


00:18:23.220 --> 00:18:24.740
where you can book one-on-one meetings


00:18:24.740 --> 00:18:26.740
with hundreds of different mentors,


00:18:26.740 --> 00:18:29.740
many of whom are founders themselves.


00:18:29.740 --> 00:18:34.740
They're experts in areas such as idea validation,


00:18:34.740 --> 00:18:37.740
fundraising, management and coaching, sales and marketing.


00:18:37.740 --> 00:18:40.120
That's the one that's the toughest, I think.


00:18:40.120 --> 00:18:41.920
If you can nail that, you're golden.


00:18:41.920 --> 00:18:45.140
So make your idea a reality today


00:18:45.140 --> 00:18:47.860
with their critical support for Microsoft for Startups,


00:18:47.860 --> 00:18:49.020
Founders Hub, check them out at


00:18:49.020 --> 00:18:52.980
pythonbio.fm/foundershub2022.


00:18:52.980 --> 00:18:58.020
Thanks again to Microsoft for supporting our show.


00:18:58.020 --> 00:18:59.660
- Yeah, thank you.


00:18:59.660 --> 00:19:00.500
Yeah, indeed.


00:19:00.500 --> 00:19:03.100
All right, Brian, now what you got?


00:19:03.100 --> 00:19:05.740
- Well, I wanna share something


00:19:05.740 --> 00:19:08.100
that Jeremy Page from the chat says,


00:19:08.100 --> 00:19:10.700
I thought SQL, always thought the SQLite logo


00:19:10.700 --> 00:19:13.980
was an homage to TCL and I've got the logo for TCL.


00:19:13.980 --> 00:19:16.060
So maybe, I don't know.


00:19:16.060 --> 00:19:18.420
- So perhaps.


00:19:18.420 --> 00:19:19.580
- Interesting.


00:19:19.580 --> 00:19:24.580
So, but I wanted to talk about recipes from Python,


00:19:24.580 --> 00:19:28.580
SQLite again, recipes from Python SQLite docs.


00:19:29.500 --> 00:19:34.140
So this is kind of a, there's a, this is an article by,


00:19:34.140 --> 00:19:35.800
I wrote it down, I promise I did.


00:19:35.800 --> 00:19:39.720
Redouane Delaware, cool name.


00:19:39.720 --> 00:19:45.820
So this, he was going through the SQLite three docs


00:19:45.820 --> 00:19:49.600
on the Python docs, and there's a lot of examples,


00:19:49.600 --> 00:19:51.920
but some of them don't have actual examples.


00:19:51.920 --> 00:19:53.600
It just talks about the API.


00:19:53.600 --> 00:19:57.560
And so he decided to write out some of the examples,


00:19:57.560 --> 00:19:59.240
is little code snippets.


00:19:59.240 --> 00:20:00.880
And I really like this.


00:20:00.880 --> 00:20:04.040
If you're learning SQLite or if you just wanna learn


00:20:04.040 --> 00:20:06.480
not SQLite in particular, but databases,


00:20:06.480 --> 00:20:09.200
these are concepts that apply to a lot of things.


00:20:09.200 --> 00:20:12.680
So he's got, of course, whether or not you can execute


00:20:12.680 --> 00:20:14.920
individual statements or batch statements.


00:20:14.920 --> 00:20:18.320
So he's got little examples for that.


00:20:18.320 --> 00:20:20.960
Goes into, this is interesting, I thought,


00:20:20.960 --> 00:20:23.000
was user-defined callbacks.


00:20:23.000 --> 00:20:24.620
I thought this was really cool.


00:20:24.620 --> 00:20:27.360
For instance, a scalar function,


00:20:27.360 --> 00:20:30.520
He defined a, and I knew that like you could put


00:20:30.520 --> 00:20:32.120
user defined functions in databases,


00:20:32.120 --> 00:20:34.560
but I haven't ever done that really.


00:20:34.560 --> 00:20:37.760
He has a hash function, SHA-256,


00:20:37.760 --> 00:20:41.080
that creates a hash for passwords.


00:20:41.080 --> 00:20:44.440
And then he shows how to use that when he passes in


00:20:44.440 --> 00:20:47.200
a username and password into the database,


00:20:47.200 --> 00:20:51.720
how it turns it into a hash, hashes it before it stores it.


00:20:51.720 --> 00:20:53.440
- That's cool, I never knew you could do that.


00:20:53.440 --> 00:20:58.440
here's a Python function passed over as part of,


00:20:58.440 --> 00:21:03.000
passed over to SQLite and then the SQL statement


00:21:03.000 --> 00:21:06.040
can call it, that's real cool.


00:21:06.040 --> 00:21:08.140
- Yeah, I mean, there's a special syntax,


00:21:08.140 --> 00:21:09.920
so that's good that there's these examples


00:21:09.920 --> 00:21:12.300
of like insert into user values,


00:21:12.300 --> 00:21:15.200
users values and then this question mark


00:21:15.200 --> 00:21:17.640
and SHA-256 question mark.


00:21:17.640 --> 00:21:21.000
- Also, that's fantastic that that's being shown


00:21:21.000 --> 00:21:23.160
because that's the parameterized,


00:21:23.160 --> 00:21:26.000
the anti little Bobby Tables version.


00:21:26.000 --> 00:21:28.720
- Okay.


00:21:28.720 --> 00:21:30.400
- Which is the best practice, right?


00:21:30.400 --> 00:21:33.540
The alternative is something worse.


00:21:33.540 --> 00:21:35.800
- Yeah.


00:21:35.800 --> 00:21:39.160
And then, you know, aggregate functions,


00:21:39.160 --> 00:21:40.720
which kind of got lost here,


00:21:40.720 --> 00:21:43.480
but there's a whole bunch of really cool examples


00:21:43.480 --> 00:21:48.120
of using SQLite and they're really tiny examples.


00:21:48.120 --> 00:21:50.760
And so one of the other things I wanted


00:21:50.760 --> 00:21:53.560
to share the reasons I wanted to share this article is,


00:21:53.560 --> 00:21:56.760
I think this is a really great way to learn an API


00:21:56.760 --> 00:22:01.660
or learn a service is to write these little example things


00:22:01.660 --> 00:22:04.360
in little code snippets and try it out.


00:22:04.360 --> 00:22:07.240
Try it out with a table that you're creating


00:22:07.240 --> 00:22:08.860
that only has two or three elements in it


00:22:08.860 --> 00:22:10.760
so that you can play with it.


00:22:10.760 --> 00:22:12.680
And you can get your head around


00:22:12.680 --> 00:22:16.280
what you think the answer should be and what it does.


00:22:16.280 --> 00:22:19.640
The only thing I think I'd probably add, of course,


00:22:19.640 --> 00:22:22.080
is if you're gonna do little code snippets,


00:22:22.080 --> 00:22:25.200
these all have to be in separate files, right?


00:22:25.200 --> 00:22:27.200
Unless you just write test functions.


00:22:27.200 --> 00:22:29.360
So this is a great use for pytest.


00:22:29.360 --> 00:22:30.600
I use it all the time.


00:22:30.600 --> 00:22:31.600
If I'm learning something,


00:22:31.600 --> 00:22:33.080
I just do these little code snippets,


00:22:33.080 --> 00:22:35.500
but I do them within a test function.


00:22:35.500 --> 00:22:36.520
And then it can be,


00:22:36.520 --> 00:22:39.180
it's not really testing anything except my own knowledge,


00:22:39.180 --> 00:22:41.320
but I can run them just by right clicking on the,


00:22:41.320 --> 00:22:43.240
or clicking on the little arrow


00:22:43.240 --> 00:22:46.080
that the editor has for each little function, so.


00:22:46.960 --> 00:22:49.960
Just rerun the failed test until I understand.


00:22:49.960 --> 00:22:52.360
- Until I understand it, yeah.


00:22:52.360 --> 00:22:53.720
- Oh yeah, very cool.


00:22:53.720 --> 00:22:55.680
- Anyway.


00:22:55.680 --> 00:22:58.420
- All right, how about something we don't understand?


00:22:58.420 --> 00:22:59.260
- Okay.


00:22:59.260 --> 00:23:01.300
- Let me take you over to a weird world


00:23:01.300 --> 00:23:04.080
of cascading consequences.


00:23:04.080 --> 00:23:09.560
So there's this guy who is a assistant professor


00:23:09.560 --> 00:23:14.560
at NYU Tandon, security and reverse engineering person


00:23:15.440 --> 00:23:18.980
named Brandon Dolan-Gavit.


00:23:18.980 --> 00:23:23.980
And there's this tweet here over to his blog post saying,


00:23:23.980 --> 00:23:26.040
a new blog post in which I download


00:23:26.040 --> 00:23:28.800
four terabytes of Python packages


00:23:28.800 --> 00:23:32.080
containing native x86 libraries,


00:23:32.080 --> 00:23:36.440
something that's done some C++ thing like G event


00:23:36.440 --> 00:23:40.300
or pandas, one of those, NumPy,


00:23:40.300 --> 00:23:42.000
that then bundles it into a wheel.


00:23:43.560 --> 00:23:47.920
And apparently, there's a bug in one of the C compilers


00:23:47.920 --> 00:23:52.740
that if you pass -f fast-math,


00:23:52.740 --> 00:23:56.120
it will potentially alter the floating point behavior


00:23:56.120 --> 00:23:58.960
of your program if you compile it with that.


00:23:58.960 --> 00:24:01.440
All right, so we're in Python,


00:24:01.440 --> 00:24:04.120
we don't compile things that often, what do we care?


00:24:04.120 --> 00:24:07.100
Well, what this does is it reconfigures


00:24:07.100 --> 00:24:12.100
how the process uses like some low level registers,


00:24:12.400 --> 00:24:17.600
but some feature of the CPU on how it does floating point math.


00:24:17.600 --> 00:24:19.680
And because when the library is loaded,


00:24:19.680 --> 00:24:21.600
it changes that feature, well, it


00:24:21.600 --> 00:24:27.920
changes it for the entire program, aka your program.


00:24:27.920 --> 00:24:29.560
That doesn't sound great, does it?


00:24:29.560 --> 00:24:31.160
No.


00:24:31.160 --> 00:24:33.600
So let's dive in this.


00:24:33.600 --> 00:24:35.520
The article's called "Someone's Been Messing


00:24:35.520 --> 00:24:37.560
With My Subnormals," subnormals, I


00:24:37.560 --> 00:24:42.060
I suppose being an aspect of floating point computations.


00:24:42.060 --> 00:24:45.560
So here he is in Python 3.8,


00:24:45.560 --> 00:24:47.960
and he says, "From transformers,


00:24:47.960 --> 00:24:51.120
import code gen for causal LM."


00:24:51.120 --> 00:24:54.080
And that's all they wanted.


00:24:54.080 --> 00:24:56.160
This is in IPython terminal,


00:24:56.160 --> 00:24:58.440
and it starts bumping out all these warnings.


00:24:58.440 --> 00:25:00.080
NumPy core get limits.


00:25:00.080 --> 00:25:02.780
User warning, the value of the smallest subnormal


00:25:02.780 --> 00:25:06.620
for class numpy.float32 type is zero.


00:25:07.520 --> 00:25:09.520
over and over and over these start popping out.


00:25:09.520 --> 00:25:11.960
It's like, hmm, well,


00:25:11.960 --> 00:25:14.840
warnings about floating point numbers sounds bad.


00:25:14.840 --> 00:25:16.520
What do you think?


00:25:16.520 --> 00:25:17.360
- Yeah.


00:25:17.360 --> 00:25:21.640
- So it turns out that something, not NumPy,


00:25:21.640 --> 00:25:25.080
but something that is in this library


00:25:25.080 --> 00:25:30.080
was compiled with this -ffmath-fast flag.


00:25:30.080 --> 00:25:35.640
When it got imported, it changed how NumPy was working.


00:25:36.520 --> 00:25:39.920
Okay, so it says, "Well, what are the problems?"


00:25:39.920 --> 00:25:42.400
It says, "Well, it changes the floating point


00:25:42.400 --> 00:25:45.880
unit behavior that's on the CPU, the actual FPU."


00:25:45.880 --> 00:25:48.600
I remember when, by the way, CPUs didn't come with that.


00:25:48.600 --> 00:25:51.100
Like I was trying to decide with my first computer


00:25:51.100 --> 00:25:55.200
to get a 486 SX or DX, and I got the DX


00:25:55.200 --> 00:25:58.520
'cause it came with a floating point unit on the CPU.


00:25:58.520 --> 00:26:01.320
Anyway, that thing gets messed with,


00:26:01.320 --> 00:26:03.200
and it says, "For some algorithms


00:26:03.200 --> 00:26:07.000
that depend on the behavior and will fail to converge


00:26:07.000 --> 00:26:09.760
if it's set to treat this as different.


00:26:09.760 --> 00:26:14.760
So it uses the FTZ DAZ flags in the MX CSR register.


00:26:14.760 --> 00:26:17.240
That's part of the part that I understand.


00:26:17.240 --> 00:26:19.880
I don't work that low level,


00:26:19.880 --> 00:26:23.060
but it turns out it's not ideal.


00:26:23.060 --> 00:26:27.280
So I said, well, what is actually going on here?


00:26:27.280 --> 00:26:28.320
And apparently there's a way,


00:26:28.320 --> 00:26:29.320
there's a whole bunch of stuff,


00:26:29.320 --> 00:26:31.840
how you can search through Linux and whatnot


00:26:31.840 --> 00:26:36.340
figure out what processes are doing this weird stuff.


00:26:36.340 --> 00:26:41.760
And also apparently if you compile with a dash OFAST,


00:26:41.760 --> 00:26:45.660
it also like cascades over to having the same behavior.


00:26:45.660 --> 00:26:50.160
So there's some explorations like you wrote some C code


00:26:50.160 --> 00:26:54.960
and then imported it into Python and seemed about fine.


00:26:54.960 --> 00:26:56.960
And then did the same thing with OFAST


00:26:56.960 --> 00:26:58.720
and able to get all these warnings.


00:26:58.720 --> 00:27:01.080
I've never seen this warning, so I guess that's good.


00:27:01.080 --> 00:27:06.080
But it turns out the culprit was G event of all things,


00:27:06.080 --> 00:27:10.480
which is a event-based asyncio networking library.


00:27:10.480 --> 00:27:13.800
But somehow something was using it.


00:27:13.800 --> 00:27:17.100
And when it got imported, it freaked everything out.


00:27:17.100 --> 00:27:19.980
So then the question becomes, well,


00:27:19.980 --> 00:27:23.600
if G event can be causing these problems


00:27:23.600 --> 00:27:26.120
because somebody thought it was awesome


00:27:26.120 --> 00:27:29.280
to compile the fast version, not the slow version,


00:27:29.280 --> 00:27:30.800
what else is out there?


00:27:30.800 --> 00:27:39.680
So Brandon went through and decided to download four terabytes of wheels for all the things that


00:27:39.680 --> 00:27:46.240
might have some kind of x86 binary in them. And then there's a ton of analysis of trying to figure


00:27:46.240 --> 00:27:52.240
out like, well, how do you actually look for and find whether or not this program has this feature


00:27:52.240 --> 00:27:56.400
or not? It turns out to be pretty tricky. So there's a bunch of stuff about going through


00:27:56.400 --> 00:28:04.000
to just check to see like what, how do you test it for this many packages because the


00:28:04.000 --> 00:28:07.880
test he was using before was super slow.


00:28:07.880 --> 00:28:12.880
So anyway, it's not ideal.


00:28:12.880 --> 00:28:16.680
I think there was something like 49 different packages.


00:28:16.680 --> 00:28:17.680
Let's see.


00:28:17.680 --> 00:28:18.680
I wrote it down up here.


00:28:18.680 --> 00:28:23.280
I'll get this number right.


00:28:23.280 --> 00:28:28.280
There's 49 packages on PyPI that were built with this flag.


00:28:28.280 --> 00:28:33.820
However, thousands of packages use those libraries


00:28:33.820 --> 00:28:36.700
and hence we're also subject to that behavior


00:28:36.700 --> 00:28:39.720
with 10 million downloads in the last 30 days.


00:28:39.720 --> 00:28:42.980
So that's pretty nuts, huh?


00:28:42.980 --> 00:28:46.140
- Well, I mean, you're kind of scaring me.


00:28:46.140 --> 00:28:49.200
So how do I know if I need to care, I guess?


00:28:50.000 --> 00:28:54.880
>> You know, are you doing iterative floating point math


00:28:54.880 --> 00:28:56.560
that goes down to like very small things?


00:28:56.560 --> 00:28:58.840
Probably not.


00:28:58.840 --> 00:28:59.880
I don't think I need to care.


00:28:59.880 --> 00:29:04.880
I'm doing like, I need to know what 33% of 69 is.


00:29:04.880 --> 00:29:07.960
Should be fine, right?


00:29:07.960 --> 00:29:10.920
But if you're doing--


00:29:10.920 --> 00:29:12.920
>> Well, you gotta test your code,


00:29:12.920 --> 00:29:15.800
and I guess we have to test our math as well.


00:29:15.800 --> 00:29:18.160
I just sort of trust that a lot of that works.


00:29:18.160 --> 00:29:21.880
Yeah, I suppose you would see those warnings, right,


00:29:21.880 --> 00:29:26.120
about the floating point subnormal coming in.


00:29:26.120 --> 00:29:26.960
- Okay.


00:29:26.960 --> 00:29:31.960
- Yeah, so there's a great long list of here of packages.


00:29:31.960 --> 00:29:35.260
Let's see.


00:29:35.260 --> 00:29:38.600
I'll just read some out that people might know.


00:29:38.600 --> 00:29:39.600
So for example,


00:29:39.600 --> 00:29:44.960
GeoEvent, GeoEventHttpClient,


00:29:44.960 --> 00:29:47.440
FlaskSocketIO, Dagster,


00:29:47.440 --> 00:29:51.040
which is used in data science a lot for data engineering.


00:29:51.040 --> 00:29:56.040
WebSocket, GEvent WebSocket, Locust for testing,


00:29:56.040 --> 00:30:01.800
Interpret, PyKafka, and on and Locust plugins,


00:30:01.800 --> 00:30:03.840
Parallel LSSH, right?


00:30:03.840 --> 00:30:06.040
So it doesn't matter if you're using that library


00:30:06.040 --> 00:30:10.440
for the math, just if it gets imported,


00:30:10.440 --> 00:30:12.400
it changes all the math of the program.


00:30:12.400 --> 00:30:15.360
So anyway, there it is.


00:30:15.360 --> 00:30:17.120
People can check it out.


00:30:17.120 --> 00:30:20.560
The comments are pretty glowing about this research.


00:30:20.560 --> 00:30:23.400
Matthew Adams, for example, says,


00:30:23.400 --> 00:30:24.900
crazy awesome work, bro.


00:30:24.900 --> 00:30:26.500
You should be knighted for this.


00:30:26.500 --> 00:30:31.880
- In our chat, Alvaro says, run your test


00:30:31.880 --> 00:30:35.100
with the -W error, which you should be anyway.


00:30:35.100 --> 00:30:40.000
- So warnings treated as errors, basically.


00:30:40.000 --> 00:30:40.880
- Yeah.


00:30:40.880 --> 00:30:45.080
- Yeah, or set that particular one to be a warning.


00:30:45.080 --> 00:30:48.320
All right, well, I guess that's it for our four items


00:30:48.320 --> 00:30:49.600
that we're covering today, am I right?


00:30:49.600 --> 00:30:53.000
- Yeah, I was just, I was giggling during part of that


00:30:53.000 --> 00:30:55.880
'cause the subnormal just cracking me up.


00:30:55.880 --> 00:30:59.480
Like, why does Brian talk like that?


00:30:59.480 --> 00:31:01.000
I don't understand most of his words.


00:31:01.000 --> 00:31:03.000
Oh, don't worry about him, he's subnormal.


00:31:03.000 --> 00:31:06.000
(both laughing)


00:31:06.000 --> 00:31:06.840
I don't know.


00:31:06.840 --> 00:31:10.520
- I also like the title of the overall blog,


00:31:10.520 --> 00:31:12.080
Push the Red Button.


00:31:12.080 --> 00:31:13.240
- Push the Red Button.


00:31:13.240 --> 00:31:18.240
for a research malware reverse engineering pentesting blog.


00:31:18.240 --> 00:31:19.060
- Yeah.


00:31:19.060 --> 00:31:20.760
- Nice. - Nice.


00:31:20.760 --> 00:31:22.520
- All right, well, how about some extras?


00:31:22.520 --> 00:31:24.440
- Yeah. - You got for us?


00:31:24.440 --> 00:31:26.120
- I don't have anything I wanna show,


00:31:26.120 --> 00:31:30.680
but I was just gonna say a couple of things I've been up to.


00:31:30.680 --> 00:31:33.120
I've been thinking about change logs a lot


00:31:33.120 --> 00:31:35.200
and on test and code,


00:31:35.200 --> 00:31:38.520
instead of doing like a one episode on change logs,


00:31:38.520 --> 00:31:40.600
I thought I would talk to several people


00:31:40.600 --> 00:31:42.760
and do an NPR style combining.


00:31:42.760 --> 00:31:43.600
- Yeah, nice.


00:31:43.600 --> 00:31:44.420
- A whole bunch of stuff.


00:31:44.420 --> 00:31:46.960
So it might end up being a series of episodes


00:31:46.960 --> 00:31:50.320
that I'll release together or one log episode,


00:31:50.320 --> 00:31:51.160
I'm not sure yet.


00:31:51.160 --> 00:31:53.960
But basically I'm thinking about change logs a lot.


00:31:53.960 --> 00:31:57.760
The other thing I've been doing is thinking about,


00:31:57.760 --> 00:31:59.800
so we had that pytest course out, right?


00:31:59.800 --> 00:32:01.360
Last week?


00:32:01.360 --> 00:32:02.200
- We did.


00:32:02.200 --> 00:32:05.340
- It was awesome on Talk Python Training.


00:32:05.340 --> 00:32:10.760
And it's cool.


00:32:10.760 --> 00:32:12.280
Anyway, Talk Python Training,


00:32:12.280 --> 00:32:14.920
I always get to it by just remembering that I switched that


00:32:14.920 --> 00:32:17.520
and just say training.talkpython.fm


00:32:17.520 --> 00:32:18.520
and you can get there.


00:32:18.520 --> 00:32:23.400
But I've had some requests to take some of the content


00:32:23.400 --> 00:32:26.720
and change it for individual teams.


00:32:26.720 --> 00:32:28.960
So, and this is an interesting thing to me


00:32:28.960 --> 00:32:31.180
to think about, to say,


00:32:31.180 --> 00:32:32.140
'cause like in this course,


00:32:32.140 --> 00:32:34.560
we do a database and a command line interface,


00:32:34.560 --> 00:32:36.660
but we're mostly testing through the API.


00:32:36.660 --> 00:32:39.960
So API with the database application.


00:32:39.960 --> 00:32:42.060
So we're doing the layered things,


00:32:42.060 --> 00:32:44.880
but some people are like, well, I don't use a database.


00:32:44.880 --> 00:32:47.460
So maybe we could swap that out with an example


00:32:47.460 --> 00:32:50.360
that uses one of the resources we have.


00:32:50.360 --> 00:32:53.280
And more of our example, we don't do the API.


00:32:53.280 --> 00:32:55.800
We do these little, we're just testing something else.


00:32:55.800 --> 00:32:57.960
So like, okay, we can cover the concept.


00:32:57.960 --> 00:33:01.700
So it's a neat idea to try to focus that towards people.


00:33:01.700 --> 00:33:04.000
So I guess if you're interested in doing that,


00:33:04.000 --> 00:33:09.000
check out pythontest.com and under training, check me out.


00:33:09.640 --> 00:33:11.280
- Yeah, awesome.


00:33:11.280 --> 00:33:12.800
Yeah, there's a lot of ideas in that course


00:33:12.800 --> 00:33:15.160
that can be applied to different industries.


00:33:15.160 --> 00:33:16.000
- Different ways, yeah.


00:33:16.000 --> 00:33:17.880
- Yeah, different ways for sure.


00:33:17.880 --> 00:33:21.200
Awesome, yeah, so the pytest course is going super strong.


00:33:21.200 --> 00:33:23.040
People really love it.


00:33:23.040 --> 00:33:24.240
Great work on that, Brian.


00:33:24.240 --> 00:33:27.040
I have another course to announce 'cause it's been a week.


00:33:27.040 --> 00:33:28.000
- It's been a week.


00:33:28.000 --> 00:33:29.360
- It's been a week.


00:33:29.360 --> 00:33:31.440
Python Data Visualization.


00:33:31.440 --> 00:33:33.520
So this is a course by Chris Moffett


00:33:33.520 --> 00:33:35.680
over at Talk Python Training.


00:33:35.680 --> 00:33:39.840
And the idea is there's all these different choices.


00:33:39.840 --> 00:33:41.680
I mean, we just talked about superset today


00:33:41.680 --> 00:33:45.000
and throw that in as another thing


00:33:45.000 --> 00:33:48.120
in the pile of general visualization tools, right?


00:33:48.120 --> 00:33:49.760
So you might do matplotlib


00:33:49.760 --> 00:33:52.340
or maybe you wanna use something new like Altair.


00:33:52.340 --> 00:33:55.240
So this course goes through and shows you


00:33:55.240 --> 00:33:57.280
what it's like to do visualizations


00:33:57.280 --> 00:33:59.120
in these different frameworks,


00:33:59.120 --> 00:34:02.560
like matplotlib, Seaborn, even pandas


00:34:02.560 --> 00:34:03.920
and plotland and streamlet.


00:34:04.920 --> 00:34:08.880
and then you can build out these different scenarios


00:34:08.880 --> 00:34:10.040
and say, well, in this case,


00:34:10.040 --> 00:34:12.200
it might make more sense to use Matplotlib


00:34:12.200 --> 00:34:13.720
or I might choose Altair.


00:34:13.720 --> 00:34:16.120
It'll help you choose a visualization framework,


00:34:16.120 --> 00:34:18.240
but also it'll show you how to use all of them.


00:34:18.240 --> 00:34:20.160
So it's a nice broad exposure


00:34:20.160 --> 00:34:21.320
to all these different frameworks.


00:34:21.320 --> 00:34:22.440
So people can check that out,


00:34:22.440 --> 00:34:24.880
talkaboutthem.fm, click on courses.


00:34:24.880 --> 00:34:26.600
- Ooh, this is definitely useful.


00:34:26.600 --> 00:34:28.800
I got a project that I need this for.


00:34:28.800 --> 00:34:29.760
- Yeah, this is gonna be a good one.


00:34:29.760 --> 00:34:32.120
It is a good one, I've already seen it.


00:34:32.120 --> 00:34:34.520
I've seen it several times actually, but it's good.


00:34:34.520 --> 00:34:35.620
(laughing)


00:34:35.620 --> 00:34:37.580
Let me see, do I have any more extras


00:34:37.580 --> 00:34:38.900
I wanna give a shout out to?


00:34:38.900 --> 00:34:40.040
No, just those two things.


00:34:40.040 --> 00:34:42.300
And then I have, I have two jokes for you this week


00:34:42.300 --> 00:34:44.000
because one is not enough.


00:34:44.000 --> 00:34:45.120
- No, yeah.


00:34:45.120 --> 00:34:50.220
- The first one here has to do with


00:34:50.220 --> 00:34:54.340
people who maybe learned a different language,


00:34:54.340 --> 00:34:56.240
maybe are hating a little on Python.


00:34:56.240 --> 00:34:59.860
So here's somebody says,


00:34:59.860 --> 00:35:03.660
me laughing at all the Python hate on this sub Reddit.


00:35:03.660 --> 00:35:07.660
as I study C#, silly language, come on.


00:35:07.660 --> 00:35:09.020
We all know C# is better.


00:35:09.020 --> 00:35:12.420
And then, that's like a smiling, laughing person,


00:35:12.420 --> 00:35:15.020
and then a more seriously, somewhat concerned,


00:35:15.020 --> 00:35:17.620
starting a new job and realizing on the job board,


00:35:17.620 --> 00:35:19.980
95% of them are asking for Python.


00:35:19.980 --> 00:35:22.060
(laughs)


00:35:22.060 --> 00:35:25.300
That's very fun.


00:35:25.300 --> 00:35:30.940
- Well, now I wanna go over to the C# subreddit


00:35:30.940 --> 00:35:32.740
and see if I can find some anti-Python jokes.


00:35:32.740 --> 00:35:33.240
I know.


00:35:33.240 --> 00:35:35.620
That'd be good.


00:35:35.620 --> 00:35:36.120
All right.


00:35:36.120 --> 00:35:37.360
Well, that one's pretty good.


00:35:37.360 --> 00:35:41.000
And then were you affected by the recent--


00:35:41.000 --> 00:35:43.880
for people who are not in our area in the Pacific Northwest,


00:35:43.880 --> 00:35:48.760
there was a massive windstorm, like 30, 40 mile an hour wind,


00:35:48.760 --> 00:35:51.160
25% humidity, 100 degrees.


00:35:51.160 --> 00:35:54.640
It was like if somebody threw a cigarette out the window,


00:35:54.640 --> 00:35:56.560
the entire Pacific Northwest would just go,


00:35:56.560 --> 00:35:58.000
whoosh, and instantly catch fire.


00:35:58.000 --> 00:36:00.160
It was like-- it was insanely bad.


00:36:00.160 --> 00:36:06.560
And so we had our power turned off in the West Hills here because the trees were so


00:36:06.560 --> 00:36:10.480
likely to fall over and cause a fire from knocking over.


00:36:10.480 --> 00:36:13.280
So they just cut the power for like a little bit.


00:36:13.280 --> 00:36:15.560
We also did that in California.


00:36:15.560 --> 00:36:21.680
There's like a big, it's a bit of an irony, but like one day they said, we're going to


00:36:21.680 --> 00:36:28.760
only allow the sale of electric cars after 30, 30, 35 or something, or whatever the date


00:36:28.760 --> 00:36:29.760
is.


00:36:29.760 --> 00:36:30.600
I'm gonna support that.


00:36:30.600 --> 00:36:31.520
I'm a fan of electric cars and all,


00:36:31.520 --> 00:36:33.680
but like the next week they said,


00:36:33.680 --> 00:36:36.400
oh, we're gonna turn off your power 'cause,


00:36:36.400 --> 00:36:37.800
actually I think the electric cars


00:36:37.800 --> 00:36:40.040
might help balance it out, but anyway.


00:36:40.040 --> 00:36:40.880
Bit of an irony.


00:36:40.880 --> 00:36:42.600
So this next joke has to do with that.


00:36:42.600 --> 00:36:45.640
So I got a hold of this from Kylie Codes


00:36:45.640 --> 00:36:49.240
and she highlighted this tweet that says,


00:36:49.240 --> 00:36:51.360
the governor has declared, this is for California,


00:36:51.360 --> 00:36:53.600
the governor has declared a state of emergency


00:36:53.600 --> 00:36:57.080
and asked all Californians not to run npm install


00:36:57.080 --> 00:37:01.080
between 4 p.m. and 9 p.m. today in an effort to save energy


00:37:01.080 --> 00:37:03.480
and fight this wildfire danger.


00:37:03.480 --> 00:37:04.640
- That's awesome.


00:37:04.640 --> 00:37:05.480
- Isn't that good?


00:37:05.480 --> 00:37:06.320
- Yeah.


00:37:06.320 --> 00:37:07.800
(laughing)


00:37:07.800 --> 00:37:09.540
- Yeah, I love it.


00:37:09.540 --> 00:37:12.840
So that's the two jokes I got for you.


00:37:12.840 --> 00:37:13.680
- Yeah.


00:37:13.680 --> 00:37:14.500
- Nothing too deep.


00:37:14.500 --> 00:37:19.800
- Well, then also you may have missed one.


00:37:19.800 --> 00:37:23.440
There was like the build on of that.


00:37:23.440 --> 00:37:24.960
- All right, tell us about it.


00:37:24.960 --> 00:37:26.800
- Okay, governor declares the state of emergency


00:37:26.800 --> 00:37:30.280
and asked all Californians to not run a WASM pack build


00:37:30.280 --> 00:37:32.340
between 4 p.m. and 9 p.m.


00:37:32.340 --> 00:37:34.840
- Exactly.


00:37:34.840 --> 00:37:36.720
- Nice, cool.


00:37:36.720 --> 00:37:39.520
- And John Sheehan says, "It's funny because it's true."


00:37:39.520 --> 00:37:42.200
(both laughing)


00:37:42.200 --> 00:37:45.940
Didn't we just talk about the other day about Ruff


00:37:45.940 --> 00:37:49.660
and having our Python tools faster,


00:37:49.660 --> 00:37:51.800
like the JavaScript community is being concerned


00:37:51.800 --> 00:37:52.940
about faster tools?


00:37:52.940 --> 00:37:53.920
Maybe not everywhere.


00:37:53.920 --> 00:37:55.400
Maybe not 100%.


00:37:55.400 --> 00:37:56.240
- Yeah.


00:37:56.240 --> 00:37:57.240
Awesome.


00:37:57.240 --> 00:37:58.240
All right.


00:37:58.240 --> 00:37:59.240
All right.


00:37:59.240 --> 00:38:00.740
Well, good episode as always.


00:38:00.740 --> 00:38:01.740
Thank you.


00:38:01.740 --> 00:38:02.740
Thank you.


00:38:02.740 --> 00:38:04.740
I'll talk to you next week.


00:38:04.740 --> 00:38:05.740
Yeah.


00:38:05.740 --> 00:38:06.740
See you next week.


00:38:06.740 --> 00:38:07.740
Thanks everyone for listening.


00:38:07.740 --> 00:38:08.740
Bye.

