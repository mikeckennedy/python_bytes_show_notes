WEBVTT

00:00:00.000 --> 00:00:08.280
Hey YouTube. Hey Brian. Hey Daniel. Hey. How's it going? Yeah, it's great. Going great. Nice


00:00:08.280 --> 00:00:12.640
to have you here, Daniel. Brian, thank you. See you as always. You guys ready to kick


00:00:12.640 --> 00:00:19.520
off this episode? Definitely. Right on. Hello and welcome to Python Bytes where we deliver


00:00:19.520 --> 00:00:24.600
Python news and headlines directly to your earbuds. This is episode 284 recorded May


00:00:24.600 --> 00:00:27.200
17th, 2022. I'm Michael Kennedy.


00:00:27.200 --> 00:00:29.400
And I am Brian Ruckin.


00:00:29.400 --> 00:00:30.400
And I'm Daniel Mulkey.


00:00:30.400 --> 00:00:33.360
Daniel, great to have you here.


00:00:33.360 --> 00:00:34.360
Thank you. It's an honor.


00:00:34.360 --> 00:00:39.160
Yeah, it's an honor to have you. Now, before we get into our first topic that Brian's going


00:00:39.160 --> 00:00:41.720
to tell us about, just give us a bit of your background.


00:00:41.720 --> 00:00:48.920
Sure. I am a optical engineer in Southern California, but I have a significant amount


00:00:48.920 --> 00:00:54.440
of my time spent using Python for data analysis, instrument control, and other things. So I've


00:00:54.440 --> 00:00:57.080
been doing it for a better part of the last five years.


00:00:57.080 --> 00:00:59.600
And I've had a back and forth relationship with MATLAB


00:00:59.600 --> 00:01:03.040
and I'm finally married to Python, so to speak.


00:01:03.040 --> 00:01:05.120
- Fantastic, you've finally been able to get out


00:01:05.120 --> 00:01:07.320
of your dysfunctional relationship with MATLAB.


00:01:07.320 --> 00:01:08.920
- Yes, exactly.


00:01:08.920 --> 00:01:10.440
- It sounds a little bit like you might live


00:01:10.440 --> 00:01:13.000
in a parallel universe to Brian.


00:01:13.000 --> 00:01:14.240
- Yeah, it sounds like it.


00:01:14.240 --> 00:01:16.160
We should definitely get you on testing code


00:01:16.160 --> 00:01:18.000
and we can BS about that.


00:01:18.000 --> 00:01:19.320
- Sure, yeah, I'd love to.


00:01:19.320 --> 00:01:22.280
- Yeah, so cool.


00:01:22.280 --> 00:01:25.240
Well, Brian, I would love to hear about our first topic.


00:01:25.240 --> 00:01:27.600
You want to talk about it?


00:01:27.600 --> 00:01:29.640
It sounds very distinct, you know?


00:01:29.640 --> 00:01:32.200
- Distinctify, yes, very distinct.


00:01:32.200 --> 00:01:33.720
So I ran across this.


00:01:33.720 --> 00:01:35.480
I can't remember how I ran across it.


00:01:35.480 --> 00:01:36.600
Guess it doesn't matter.


00:01:36.600 --> 00:01:37.880
But one of the things I like,


00:01:37.880 --> 00:01:41.080
it's a Python package called Distinctify.


00:01:41.080 --> 00:01:42.940
And it's very simple.


00:01:42.940 --> 00:01:45.360
It's a lightweight Python package


00:01:45.360 --> 00:01:49.360
to provide functions to generate colors


00:01:49.360 --> 00:01:51.940
that are visually distinct from one another.


00:01:51.940 --> 00:01:55.380
So I was thinking like, you know, you got a,


00:01:55.380 --> 00:01:56.220
you got a chart,


00:01:56.220 --> 00:01:58.420
like maybe you're taking user data or something


00:01:58.420 --> 00:02:00.380
and you don't know how many lines you're going to plot,


00:02:00.380 --> 00:02:02.260
but you're going to plot a whole bunch of lines.


00:02:02.260 --> 00:02:05.620
How do you pick the colors for what the lines are?


00:02:05.620 --> 00:02:06.460
So this was,


00:02:06.460 --> 00:02:09.160
this is a kind of a neat thing to just pick visually


00:02:09.160 --> 00:02:12.380
distinct colors.


00:02:12.380 --> 00:02:15.580
Pretty, pretty focused, but it's pretty cool.


00:02:15.580 --> 00:02:18.740
And all you do is you kind of just give it,


00:02:18.740 --> 00:02:21.060
you give it like the number of colors you want


00:02:21.060 --> 00:02:22.700
and it gives you back the colors.


00:02:22.700 --> 00:02:25.380
And you can, it has display capabilities.


00:02:25.380 --> 00:02:29.180
So you have to install extra stuff to make that happen


00:02:29.180 --> 00:02:32.940
but you can display color swatches too with it.


00:02:32.940 --> 00:02:34.740
And I was looking at some of the different colors


00:02:34.740 --> 00:02:35.580
that are available.


00:02:35.580 --> 00:02:39.460
Like one of the ones was 15 different colors.


00:02:39.460 --> 00:02:42.660
I think it's 15 colors for normal vision


00:02:42.660 --> 00:02:44.780
versus some color blindness.


00:02:44.780 --> 00:02:46.060
So if you have color blind people


00:02:46.060 --> 00:02:49.260
you can pick based on some of that stuff.


00:02:49.260 --> 00:02:51.700
There's a whole bunch of examples in the repo too


00:02:51.700 --> 00:02:54.340
that it's kind of fun to look at.


00:02:54.340 --> 00:02:58.140
One of them was the, like the normal color blind one.


00:02:58.140 --> 00:02:59.880
Oh, was that it?


00:02:59.880 --> 00:03:01.780
No, that wasn't it.


00:03:01.780 --> 00:03:06.180
But there's some really cool examples of different colors.


00:03:06.180 --> 00:03:07.540
So if you just give it a few,


00:03:07.540 --> 00:03:09.060
it just grabs a few of course,


00:03:09.060 --> 00:03:12.220
but there's a whole bunch of neat ones,


00:03:12.220 --> 00:03:13.580
clusters and things.


00:03:13.580 --> 00:03:17.100
So anyway, cool little library.


00:03:17.100 --> 00:03:18.340
- Yeah, I like that they have,


00:03:18.340 --> 00:03:19.600
I noticed when I was looking through it,


00:03:19.600 --> 00:03:21.600
they have a function for generating a color palette.


00:03:21.600 --> 00:03:24.560
And so you can generate a color blind friendly palette.


00:03:24.560 --> 00:03:27.300
So hypothetically that works well for visual color blind.


00:03:27.300 --> 00:03:29.960
And if it's in print and you're doing black and white.


00:03:29.960 --> 00:03:31.440
So that was the most interesting thing to me.


00:03:31.440 --> 00:03:32.280
I know-


00:03:32.280 --> 00:03:33.600
- Oh, it even has black and white.


00:03:33.600 --> 00:03:37.280
- Well, at least I think if you take a color blind palette


00:03:37.280 --> 00:03:38.240
and you make it black and white,


00:03:38.240 --> 00:03:39.840
typically it's still a decent contrast.


00:03:39.840 --> 00:03:42.600
So if you have to worry about printing things out.


00:03:42.600 --> 00:03:43.540
- Oh, that's cool.


00:03:43.540 --> 00:03:44.380
- That's great.


00:03:44.380 --> 00:03:47.580
And one of its functions is to take the color map


00:03:47.580 --> 00:03:50.580
that it generates and turn that into a matplotlib.


00:03:50.580 --> 00:03:51.980
>> Oh, yeah, yeah, yeah. >> Cool.


00:03:51.980 --> 00:03:53.180
>> Mm-hmm.


00:03:53.180 --> 00:03:54.500
>> Oh, that's what I was looking for.


00:03:54.500 --> 00:03:57.020
>> Yeah. Oh, wow.


00:03:57.020 --> 00:03:59.220
>> And there's somebody in the audience


00:03:59.220 --> 00:04:00.460
who just found out they're colorblind.


00:04:00.460 --> 00:04:02.180
>> Go ahead, Dan.


00:04:02.180 --> 00:04:03.220
>> And there's somebody in the audience


00:04:03.220 --> 00:04:05.020
who just found out they're colorblind.


00:04:05.020 --> 00:04:07.780
>> Right. Is there a difference? What is this?


00:04:07.780 --> 00:04:12.260
>> So, yeah, one of my kids found out,


00:04:12.260 --> 00:04:14.660
like, in high school that they were colorblind.


00:04:15.180 --> 00:04:17.540
So interesting.


00:04:17.540 --> 00:04:18.860
>> Yeah, how would you know?


00:04:18.860 --> 00:04:19.940
For a long time, you're just like,


00:04:19.940 --> 00:04:20.900
people tell me that's a color.


00:04:20.900 --> 00:04:22.900
I guess I'm not great at picking out that color.


00:04:22.900 --> 00:04:25.500
>> She gets, an art teacher said,


00:04:25.500 --> 00:04:28.980
I really love how you use both blues and greens in the sky.


00:04:28.980 --> 00:04:32.620
And she was like, I intended to just use blue, but thanks.


00:04:32.620 --> 00:04:35.420
>> I have a friend who went to art school


00:04:35.420 --> 00:04:37.420
and that was essentially his story


00:04:37.420 --> 00:04:39.220
that he always had really vivid color choices


00:04:39.220 --> 00:04:41.620
'cause he didn't see the same as everybody else.


00:04:41.620 --> 00:04:44.220
It was great, it was awesome.


00:04:44.220 --> 00:04:46.100
- That's really cool stuff. - That's pretty cool.


00:04:46.100 --> 00:04:46.940
- Yeah.


00:04:46.940 --> 00:04:49.000
Cool, all right.


00:04:49.000 --> 00:04:50.480
Brian, we ready for the next one?


00:04:50.480 --> 00:04:51.640
- Definitely.


00:04:51.640 --> 00:04:52.780
- Okay.


00:04:52.780 --> 00:04:57.060
So let's talk about SQL Soda, or Soda SQL.


00:04:57.060 --> 00:04:59.980
So this is a open source CLI tool


00:04:59.980 --> 00:05:03.340
that if you're doing like ETL,


00:05:03.340 --> 00:05:06.160
like ingest transform loads type of stuff,


00:05:06.160 --> 00:05:11.520
doing other sort of analysis or exploration of SQL data,


00:05:11.520 --> 00:05:14.440
it allows you to connect to your data source,


00:05:14.440 --> 00:05:17.400
like your database, and then define tests


00:05:17.400 --> 00:05:20.400
for what invalid data looks like, right?


00:05:20.400 --> 00:05:21.760
Does this have to be a number?


00:05:21.760 --> 00:05:25.040
Can it, does it just have to be not null?


00:05:25.040 --> 00:05:26.000
You know, what is it?


00:05:26.000 --> 00:05:29.880
So for an example here, they're talking about,


00:05:29.880 --> 00:05:34.400
here's the YAML file for a warehouse,


00:05:34.400 --> 00:05:38.340
a data warehouse reporting type thing for Postgres.


00:05:38.340 --> 00:05:41.320
So you just set up like your connection and your host


00:05:41.320 --> 00:05:44.560
and all that kind of stuff, and then off it goes.


00:05:44.560 --> 00:05:45.560
So pretty neat.


00:05:45.560 --> 00:05:47.440
And then you can scan your dataset


00:05:47.440 --> 00:05:50.000
to run tests against your data.


00:05:50.000 --> 00:05:51.320
Isn't that cool?


00:05:51.320 --> 00:05:53.320
- That's very, it's soda cool.


00:05:53.320 --> 00:05:56.200
- Soda cool, it is soda cool.


00:05:56.200 --> 00:06:01.800
Yeah, so you just say soda scan


00:06:01.800 --> 00:06:04.340
and you give it the YAML file


00:06:04.340 --> 00:06:05.540
for the connection information,


00:06:05.540 --> 00:06:07.520
and then a YAML file for the types of things


00:06:07.520 --> 00:06:08.960
you wanna test.


00:06:08.960 --> 00:06:11.520
So they've got this example of how you're talking


00:06:11.520 --> 00:06:12.980
to one of the data warehouses


00:06:12.980 --> 00:06:16.060
and it's going and pulling in these config files.


00:06:16.060 --> 00:06:17.900
And it basically, this example,


00:06:17.900 --> 00:06:21.260
it's testing 54 different conditions.


00:06:21.260 --> 00:06:22.940
Three tests were executed.


00:06:22.940 --> 00:06:24.500
Everything's good to go.


00:06:24.500 --> 00:06:27.660
So, you know, if you're getting kind of data dropped on you


00:06:27.660 --> 00:06:29.900
or you're scanning, you know, scraping data


00:06:29.900 --> 00:06:33.100
from other places on some kind of background job


00:06:33.100 --> 00:06:34.940
and you wanna bring it in, you know, if it's all automated,


00:06:34.940 --> 00:06:36.260
how do you know when it goes wrong, right?


00:06:36.260 --> 00:06:38.560
So here's a nice, simple way to express that.


00:06:38.560 --> 00:06:42.340
- Yeah, that's neat.


00:06:42.340 --> 00:06:44.500
- Yeah, and Brandon out in the audience says,


00:06:44.500 --> 00:06:46.460
"I think we're looking at great expectations


00:06:46.460 --> 00:06:47.380
"for this same thing."


00:06:47.380 --> 00:06:50.580
And yeah, this is kind of a, I guess,


00:06:50.580 --> 00:06:54.480
my first impression is this is a less code way


00:06:54.480 --> 00:06:56.820
of doing what great expectations does, right?


00:06:56.820 --> 00:06:59.560
So like you can just put together some YAML files


00:06:59.560 --> 00:07:02.880
that define what you wanna test for, right?


00:07:02.880 --> 00:07:04.520
So for example, in this YAML file,


00:07:04.520 --> 00:07:07.060
I can say the metrics are row count, missing count,


00:07:07.060 --> 00:07:08.200
and missing percentage.


00:07:08.200 --> 00:07:11.480
And then I can test that the row count is greater than zero.


00:07:11.480 --> 00:07:12.560
Right?


00:07:12.560 --> 00:07:16.040
And then another one is for the column, for the ID,


00:07:16.040 --> 00:07:18.080
it's a UUID that it's,


00:07:18.080 --> 00:07:22.400
I'm allowing 0% of the UUID format to be invalid, right?


00:07:22.400 --> 00:07:24.720
You know, that's got like a certain structure to it, right?


00:07:24.720 --> 00:07:27.680
That's like a, either a straight UUID or a string


00:07:27.680 --> 00:07:29.520
that looks, that can be parsable over to one,


00:07:29.520 --> 00:07:31.040
I'm guessing, something like that.


00:07:31.040 --> 00:07:32.920
So pretty cool.


00:07:32.920 --> 00:07:34.740
I think that's probably the biggest difference.


00:07:34.740 --> 00:07:37.320
So if you just want to define kind of like declaratively,


00:07:37.320 --> 00:07:39.880
like here are the conditions of which I want it to test,


00:07:39.880 --> 00:07:41.160
and then you want to just set it up


00:07:41.160 --> 00:07:43.680
to continuously scan it, looks good.


00:07:43.680 --> 00:07:45.920
- The invalid percentage looks interesting


00:07:45.920 --> 00:07:50.840
because it's an interesting addition of like,


00:07:50.840 --> 00:07:53.800
you know, there can be some bad rows,


00:07:53.800 --> 00:07:56.660
but we don't want more than like 20% bad rows


00:07:56.660 --> 00:07:57.500
or something like that.


00:07:57.500 --> 00:07:58.320
- Right, right.


00:07:58.320 --> 00:08:00.760
Maybe you can't have zero errors, right?


00:08:00.760 --> 00:08:03.880
Like you just, sometimes the data is just not there.


00:08:03.880 --> 00:08:05.640
But if it's 100% not there,


00:08:05.640 --> 00:08:07.080
then something's gone terribly wrong


00:08:07.080 --> 00:08:08.920
or the data formats change


00:08:08.920 --> 00:08:11.120
and it's not called that anymore or whatever,


00:08:11.120 --> 00:08:12.080
JSON, who knows?


00:08:12.080 --> 00:08:14.520
Daniel, what do you think?


00:08:14.520 --> 00:08:16.440
- My data is always in CSV files,


00:08:16.440 --> 00:08:19.120
so I have, I guess there are pros and cons


00:08:19.120 --> 00:08:21.720
to never having touched SQL, as I've heard from some.


00:08:21.720 --> 00:08:23.360
(laughing)


00:08:23.360 --> 00:08:24.880
- Much easier to version control.


00:08:24.880 --> 00:08:27.040
Just put the CSV in version control.


00:08:27.040 --> 00:08:29.520
(laughing)


00:08:29.520 --> 00:08:32.160
- Yeah, anyway, I think this one's pretty neat.


00:08:32.160 --> 00:08:33.000
People can check it out


00:08:33.000 --> 00:08:35.160
if they're doing relational data stuff.


00:08:35.160 --> 00:08:39.440
And they, especially if you're doing a lot of on-demand,


00:08:39.440 --> 00:08:40.880
you know, not like you ask for it,


00:08:40.880 --> 00:08:42.480
but it's just on-demand processing,


00:08:42.480 --> 00:08:44.280
or you're given a database and you wanna check it out


00:08:44.280 --> 00:08:46.720
to see how it's doing.


00:08:46.720 --> 00:08:48.200
So I won't go on anymore on that


00:08:48.200 --> 00:08:49.920
'cause I've got a ton of other extras.


00:08:49.920 --> 00:08:52.040
So kick it over to you, Daniel.


00:08:52.040 --> 00:08:52.880
- Cool.


00:08:52.880 --> 00:08:54.840
So let's see.


00:08:54.840 --> 00:08:59.200
There was a review article back in 2020 published


00:08:59.200 --> 00:09:01.560
in the research journal Nature.


00:09:01.560 --> 00:09:06.560
For anyone not in the research articles world,


00:09:06.560 --> 00:09:08.760
nature is one of the top level ones.


00:09:08.760 --> 00:09:10.480
For reference in grad school,


00:09:10.480 --> 00:09:13.360
we had some fancy work we did with quantum entanglement


00:09:13.360 --> 00:09:16.640
and we got rejected by a sub journal of nature.


00:09:16.640 --> 00:09:19.420
So to get anything into nature is highly non-trivial.


00:09:19.420 --> 00:09:21.420
I will add the--


00:09:21.420 --> 00:09:22.480
- It's like the JAMA,


00:09:22.480 --> 00:09:26.240
the Journal of American Medical Association of science.


00:09:26.240 --> 00:09:27.080
Basically.


00:09:27.080 --> 00:09:28.640
- It's absolutely one of the top ones.


00:09:28.640 --> 00:09:30.640
I will say it's a review article.


00:09:30.640 --> 00:09:32.640
So it's easier typically to get a review article


00:09:32.640 --> 00:09:34.640
than to say, "Hey, this is bleeding edge research


00:09:34.640 --> 00:09:36.640
that's going to change the world."


00:09:36.640 --> 00:09:38.640
But still, the big news is two things.


00:09:38.640 --> 00:09:40.640
One, that there's an article


00:09:40.640 --> 00:09:42.640
by Travis Oliphant and others


00:09:42.640 --> 00:09:44.640
on array programming with NumPy


00:09:44.640 --> 00:09:46.640
in nature.


00:09:46.640 --> 00:09:48.640
That's a big enough deal that they chose to publish this


00:09:48.640 --> 00:09:50.640
and it got through and it's


00:09:50.640 --> 00:09:52.640
I think very significant that


00:09:52.640 --> 00:09:54.640
that software was something that was good enough to publish.


00:09:56.640 --> 00:10:01.600
The other and you know they go through and they talk about kind of the fundamentals of it all.


00:10:01.600 --> 00:10:06.040
There's one diagram I really like that sort of shows how the whole ecosystem stacks up.


00:10:06.040 --> 00:10:07.440
You've got an umpire's base.


00:10:07.440 --> 00:10:08.760
That's a cool visualization.


00:10:08.760 --> 00:10:12.880
Yeah and then you got SciPy and Matplotlib and you know the other plotting libraries.


00:10:12.880 --> 00:10:14.280
So there's the foundation.


00:10:14.280 --> 00:10:15.280
Yeah.


00:10:15.280 --> 00:10:20.760
As you can say for people who are listening it's like the tree of life for scientific libraries.


00:10:20.760 --> 00:10:22.520
Sorry go on Daniel.


00:10:22.520 --> 00:10:24.720
That's absolutely right.


00:10:24.720 --> 00:10:27.840
So from that foundation, as far as algorithms and plots,


00:10:27.840 --> 00:10:30.280
you go up to like specific method you're using.


00:10:30.280 --> 00:10:32.000
Are you doing image processing?


00:10:32.000 --> 00:10:33.660
Are you doing machine learning or something else?


00:10:33.660 --> 00:10:36.080
And off to domain specifics like Astropy.


00:10:36.080 --> 00:10:37.980
And I think you've had those guys on talk Python.


00:10:37.980 --> 00:10:39.120
So you've gotten to talk to them.


00:10:39.120 --> 00:10:40.720
And then down to very application specific.


00:10:40.720 --> 00:10:43.360
So NumPy serving almost everybody


00:10:43.360 --> 00:10:46.120
who does anything numerical down to like Qtip,


00:10:46.120 --> 00:10:48.800
which is used for people working on quantum computers.


00:10:48.800 --> 00:10:53.080
So very large breadth being discussed here.


00:10:53.080 --> 00:10:55.280
- Q-tip that's so cute.


00:10:55.280 --> 00:10:56.120
I like it.


00:10:56.120 --> 00:11:03.640
- And yeah, so it's notable that Python got into nature.


00:11:03.640 --> 00:11:05.120
And if you go search for Python,


00:11:05.120 --> 00:11:06.400
there are a lot of other articles.


00:11:06.400 --> 00:11:07.480
But it's also interesting to see


00:11:07.480 --> 00:11:09.260
that they're willing to publish software.


00:11:09.260 --> 00:11:10.680
You guys have talked in the past


00:11:10.680 --> 00:11:13.760
about how you can't always publish the software package


00:11:13.760 --> 00:11:15.000
and any research journal.


00:11:15.000 --> 00:11:17.840
So how do you get credit for that if you're in academia?


00:11:17.840 --> 00:11:19.000
But this is an interesting take


00:11:19.000 --> 00:11:21.040
to see that nature chose to publish it.


00:11:22.360 --> 00:11:23.600
- Yeah, this is super interesting.


00:11:23.600 --> 00:11:27.160
I think it's very valuable to just raise awareness, right?


00:11:27.160 --> 00:11:29.760
It's, you know, this is the water that we swim in,


00:11:29.760 --> 00:11:31.400
but not everyone.


00:11:31.400 --> 00:11:34.320
Everyone is immersed in the Python data science tooling.


00:11:34.320 --> 00:11:35.280
Right?


00:11:35.280 --> 00:11:36.640
- Yeah.


00:11:36.640 --> 00:11:38.000
- There's a lot of authors on here.


00:11:38.000 --> 00:11:38.840
- Yeah.


00:11:38.840 --> 00:11:39.660
I was trying to understand,


00:11:39.660 --> 00:11:42.160
I'm guessing those are the maintainers of the packages


00:11:42.160 --> 00:11:43.000
that were included,


00:11:43.000 --> 00:11:46.320
but I mean, you don't have 20 people write one paper,


00:11:46.320 --> 00:11:47.320
so I don't know how.


00:11:47.320 --> 00:11:49.880
It's kind of like the LIGO papers


00:11:49.880 --> 00:11:51.880
or like the gravitational wave interferometer ones


00:11:51.880 --> 00:11:53.800
where like this crazy list,


00:11:53.800 --> 00:11:55.600
it's like the first page of the articles,


00:11:55.600 --> 00:11:56.440
almost all authors,


00:11:56.440 --> 00:11:57.580
just 'cause there's so many people


00:11:57.580 --> 00:11:59.840
that worked on this for so long.


00:11:59.840 --> 00:12:01.920
So I'm guessing that's what the story is here.


00:12:01.920 --> 00:12:04.600
- And you can access it.


00:12:04.600 --> 00:12:07.520
Some articles, some journals,


00:12:07.520 --> 00:12:10.340
you can't actually read it unless you have a subscription,


00:12:10.340 --> 00:12:11.600
but this one's available.


00:12:11.600 --> 00:12:15.440
- Indeed, yeah, a very cool pick.


00:12:15.440 --> 00:12:18.440
Before we move on, maybe you know, Daniel,


00:12:18.440 --> 00:12:19.640
Alvaro, an audience asked,


00:12:19.640 --> 00:12:21.900
Have any of you come across a way to validate


00:12:21.900 --> 00:12:24.300
Panda's data frames against a schema,


00:12:24.300 --> 00:12:28.680
much like SQL Soda, Soda SQL?


00:12:28.680 --> 00:12:32.060
- Sodomy scope.


00:12:32.060 --> 00:12:32.900
- Yeah, I haven't.


00:12:32.900 --> 00:12:34.940
- I feel like we have, but I don't remember.


00:12:34.940 --> 00:12:38.160
- Yeah, I don't remember either.


00:12:38.160 --> 00:12:42.780
Sorry, maybe something we should seek out for the next one.


00:12:42.780 --> 00:12:44.540
And I think we might get some answers in the audience.


00:12:44.540 --> 00:12:49.060
So we'll let them inform us as we move on.


00:12:49.060 --> 00:12:51.080
So Brian, what's next?


00:12:51.080 --> 00:12:54.520
- Well, this isn't Python specific,


00:12:54.520 --> 00:12:58.460
but I think a lot of Python people are using GitHub actions.


00:12:58.460 --> 00:13:02.060
So GitHub announced, I guess,


00:13:02.060 --> 00:13:05.900
recently a supercharging GitHub actions with job summaries.


00:13:05.900 --> 00:13:07.540
It's an article that we'll link to.


00:13:07.540 --> 00:13:12.260
And basically it's pretty cool.


00:13:12.260 --> 00:13:13.340
I can't wait to try this.


00:13:13.340 --> 00:13:14.940
I'm using GitHub actions.


00:13:14.940 --> 00:13:18.720
And the gist is you can now have Markdown


00:13:18.720 --> 00:13:22.600
go directly into your GitHub job summary sort of thing


00:13:22.600 --> 00:13:26.720
with like this crazy global variable


00:13:26.720 --> 00:13:28.560
called GitHub step summary.


00:13:28.560 --> 00:13:32.560
But it's got marked out to it.


00:13:32.560 --> 00:13:34.440
And I'm like, well, what can you do with this though?


00:13:34.440 --> 00:13:39.440
But Simon Wilson released, was tweeting about it.


00:13:39.440 --> 00:13:44.360
And then said, and then Ned Batchelder said,


00:13:44.360 --> 00:13:45.320
hey, I'm using it too.


00:13:45.320 --> 00:13:50.320
So Ned has a little example on coverage.py that shows,


00:13:50.320 --> 00:13:52.400
what does it show?


00:13:52.400 --> 00:13:56.720
It shows you get this nice total coverage percentage.


00:13:56.720 --> 00:14:01.720
If you want to put that in the coverage for your repo,


00:14:01.720 --> 00:14:03.360
you can do that.


00:14:03.360 --> 00:14:06.980
Interesting that coverage.py is not 100% covered.


00:14:06.980 --> 00:14:08.880
(laughing)


00:14:08.880 --> 00:14:09.720
I don't know why I find that funny.


00:14:09.720 --> 00:14:10.880
- Yeah, I hear you, I love it.


00:14:10.880 --> 00:14:13.120
(laughing)


00:14:13.120 --> 00:14:16.700
But, and then, so Simon also listed Dataset


00:14:16.700 --> 00:14:19.280
is, has an example on Dataset.


00:14:19.280 --> 00:14:24.160
You doing, adding some extra stuff to,


00:14:24.160 --> 00:14:25.280
what is he adding?


00:14:25.280 --> 00:14:26.120
Changed files.


00:14:26.120 --> 00:14:29.560
Oh, he's got a tool that does, looks for


00:14:29.560 --> 00:14:33.780
how many files have changed in recently.


00:14:33.780 --> 00:14:35.360
And he actually just wrote,


00:14:35.360 --> 00:14:37.920
he just wrote a write up for that.


00:14:37.920 --> 00:14:39.520
So we're linked to that as well.


00:14:39.520 --> 00:14:41.560
So GitHub action job summaries,


00:14:41.560 --> 00:14:43.900
and he shows how it works.


00:14:43.900 --> 00:14:45.780
You can pop out stuff.


00:14:45.780 --> 00:14:46.620
And I love Markdown.


00:14:46.620 --> 00:14:48.620
- Yeah, little code fences and all sorts of stuff.


00:14:48.620 --> 00:14:50.020
That's very cool if you want to structure


00:14:50.020 --> 00:14:51.460
something real nice like that.


00:14:51.460 --> 00:14:52.460
- Yeah, it even has,


00:14:52.460 --> 00:14:55.980
so supposedly it's got a whole bunch of stuff.


00:14:55.980 --> 00:14:58.940
It's got like, you can do tables even.


00:14:58.940 --> 00:15:00.260
So that's neat.


00:15:00.260 --> 00:15:02.620
And emojis, why not?


00:15:02.620 --> 00:15:03.460
- Oh yeah.


00:15:03.460 --> 00:15:06.500
If you put a little fire emoji in there.


00:15:06.500 --> 00:15:07.620
Yes, do it.


00:15:07.620 --> 00:15:08.620
- Is there anybody get images?


00:15:08.620 --> 00:15:10.820
Like if you create an image during the action,


00:15:10.820 --> 00:15:11.920
Can you reference it?


00:15:11.920 --> 00:15:14.500
- I don't know.


00:15:14.500 --> 00:15:16.220
- It's a good question.


00:15:16.220 --> 00:15:17.940
- It doesn't mention images, but.


00:15:17.940 --> 00:15:19.740
- Maybe you could base 64 encode it


00:15:19.740 --> 00:15:21.700
and embed it as a data URL.


00:15:21.700 --> 00:15:24.180
- Wow, it even does a mermaid,


00:15:24.180 --> 00:15:28.580
which is a way to do diagrams within it.


00:15:28.580 --> 00:15:30.740
- Yeah, that's very nice, like flowcharts.


00:15:30.740 --> 00:15:31.560
- Yeah.


00:15:31.560 --> 00:15:32.680
- Fantastic.


00:15:32.680 --> 00:15:33.900
This is a good one.


00:15:33.900 --> 00:15:35.900
I need to learn to do more with GitHub actions.


00:15:35.900 --> 00:15:37.660
I don't do very much with them.


00:15:37.660 --> 00:15:38.500
- I love them.


00:15:38.500 --> 00:15:42.000
I used to use Travis back in the day,


00:15:42.000 --> 00:15:45.000
but I think these are way easier.


00:15:45.000 --> 00:15:49.120
- Daniel, do you do any of those sorts of things?


00:15:49.120 --> 00:15:51.360
Any CI automation type stuff?


00:15:51.360 --> 00:15:54.720
- A previous company, we used Azure DevOps


00:15:54.720 --> 00:15:57.060
and set up some stuff to build packages


00:15:57.060 --> 00:16:00.540
and build applications, but not at the moment.


00:16:00.540 --> 00:16:02.880
It doesn't happen to be any code bases I have,


00:16:02.880 --> 00:16:04.800
but I need that.


00:16:04.800 --> 00:16:06.400
- Yeah, very cool.


00:16:06.400 --> 00:16:09.200
All right, well, I've got an interesting one here.


00:16:09.200 --> 00:16:11.040
I wanna dive into it, you guys.


00:16:11.040 --> 00:16:15.280
So this one, let me give some attribution here.


00:16:15.280 --> 00:16:20.560
This one was sent over by Intimar, I believe from Meta.


00:16:20.560 --> 00:16:25.360
And then this is a write-up by Alex Wegged.


00:16:25.360 --> 00:16:29.920
And what it is, is it's basically the notes for all of us


00:16:29.920 --> 00:16:33.220
who were not there for the 2022 Python Language Summit.


00:16:33.220 --> 00:16:35.020
So that's pretty cool.


00:16:35.020 --> 00:16:38.220
There were around 30 core developers, triagers,


00:16:38.220 --> 00:16:43.460
and special guests gathered the day before PyCon.


00:16:43.460 --> 00:16:46.860
And so they had a bunch of different talks and ideas


00:16:46.860 --> 00:16:49.180
they discussed.


00:16:49.180 --> 00:16:52.340
Quick summary, really, it's about-- so much of this


00:16:52.340 --> 00:16:56.460
is about performance and parallelism right now.


00:16:56.460 --> 00:17:01.700
And then there's a lot of maintainability,


00:17:01.700 --> 00:17:03.900
back channels, back flows here.


00:17:03.900 --> 00:17:05.660
All right, so coming through these first,


00:17:05.660 --> 00:17:09.100
Sam Gill made a huge splash last year when he talked


00:17:09.100 --> 00:17:12.540
and he introduced the no-gil work that they had done


00:17:12.540 --> 00:17:15.740
for Python 3.8, I believe.


00:17:15.740 --> 00:17:17.020
I can't remember, 3.8, 3.9.


00:17:17.020 --> 00:17:18.460
No, it was 3.9 for them.


00:17:18.460 --> 00:17:19.840
Cinder was 3.8.


00:17:19.840 --> 00:17:24.840
So for 3.9, and there's a lot of interesting optimizations


00:17:24.840 --> 00:17:28.940
and whatnot in that talk.


00:17:28.940 --> 00:17:30.060
So the idea is,


00:17:30.060 --> 00:17:33.100
can we live without a global interpreter lock?


00:17:33.100 --> 00:17:36.620
Larry Hastings tried the galectomy, sort of said,


00:17:36.620 --> 00:17:38.420
you know, it's too much of a penalty


00:17:38.420 --> 00:17:40.020
to try to live without it.


00:17:40.020 --> 00:17:43.100
But this no-gil work that Sam Gross did actually


00:17:43.100 --> 00:17:46.780
had very small overhead in terms of what it added,


00:17:46.780 --> 00:17:50.620
but potentially removed some of the GIL things.


00:17:50.620 --> 00:17:54.100
So there's a lot of analysis of that.


00:17:54.100 --> 00:17:57.260
People were excited, but how is it written?


00:17:57.260 --> 00:18:00.700
It says, "Robust," there was robust questioning.


00:18:00.700 --> 00:18:02.960
(laughing)


00:18:02.960 --> 00:18:07.020
One, I guess one of the biggest parts that they discussed


00:18:07.020 --> 00:18:09.340
was maybe this should be a fork of CPython.


00:18:09.340 --> 00:18:11.980
There should be a no-gil version of Python.


00:18:11.980 --> 00:18:14.660
And, but Sam is like,


00:18:14.660 --> 00:18:17.900
I really don't wanna have just another separate version


00:18:17.900 --> 00:18:18.740
of Python.


00:18:18.740 --> 00:18:21.220
I really want this to just help everyone.


00:18:21.220 --> 00:18:24.100
So, pretty interesting.


00:18:24.100 --> 00:18:27.780
I think originally it was maybe gonna be a runtime flag


00:18:27.780 --> 00:18:29.940
you could pass to Python,


00:18:29.940 --> 00:18:32.160
but it's looking like it more likely is gonna turn out


00:18:32.160 --> 00:18:33.360
to be a compiler flag,


00:18:33.360 --> 00:18:35.240
so you'd have to have a no-gil build,


00:18:35.240 --> 00:18:37.580
even though it's from the same source code.


00:18:37.580 --> 00:18:40.200
So yeah, a bunch of interesting things,


00:18:40.200 --> 00:18:41.840
concerns about how it's gonna work


00:18:41.840 --> 00:18:45.120
with C libraries and so on.


00:18:45.120 --> 00:18:48.160
But all these are pretty interesting read-ups,


00:18:48.160 --> 00:18:50.320
reads, write-ups.


00:18:50.320 --> 00:18:52.980
So Eric Snow did a presentation


00:18:52.980 --> 00:18:55.660
on his per-interpreter gill,


00:18:57.200 --> 00:19:01.780
which is interesting in how it approaches


00:19:01.780 --> 00:19:04.600
a slightly different problem than, say, Sam Gross.


00:19:04.600 --> 00:19:06.720
So Sam is trying to get it out of Python.


00:19:06.720 --> 00:19:08.800
Eric is saying, well, if we could just have


00:19:08.800 --> 00:19:12.480
a sub-interpreter, like a little mini in-process interpreter


00:19:12.480 --> 00:19:14.840
that runs per thread, then they can all gill


00:19:14.840 --> 00:19:15.800
to their heart's content.


00:19:15.800 --> 00:19:19.260
It doesn't matter, 'cause it's all single-threaded, right?


00:19:19.260 --> 00:19:22.200
But what's interesting, if you go look at this one,


00:19:22.200 --> 00:19:25.600
in here, we've got, this one,


00:19:26.400 --> 00:19:31.160
It says something like, way back in 1997,


00:19:31.160 --> 00:19:35.960
this idea of multiple sub-interpreters was added by Guido,


00:19:35.960 --> 00:19:38.920
but it really hasn't, nothing has been done with it.


00:19:38.920 --> 00:19:41.880
And when somebody tries to do stuff with it,


00:19:41.880 --> 00:19:44.880
there were thousands of global variables.


00:19:44.880 --> 00:19:47.800
And if you're going to have per-interpreters,


00:19:47.800 --> 00:19:49.880
you have to somehow have those not shared


00:19:49.880 --> 00:19:51.840
because then you're going to have the GIL back on them,


00:19:51.840 --> 00:19:53.520
right, you have that locking.


00:19:53.520 --> 00:20:00.360
So due partly to the deprecation of some of the old libraries


00:20:00.360 --> 00:20:02.080
and stuff, it's gotten a little simpler.


00:20:02.080 --> 00:20:04.360
But that was it for the next write-up.


00:20:04.360 --> 00:20:06.760
But anyway, they've reduced this to almost 1,000,


00:20:06.760 --> 00:20:09.960
to 1,200 remaining globals.


00:20:09.960 --> 00:20:15.120
So needless to say, it is not totally solved here.


00:20:15.120 --> 00:20:19.040
So again, one of the possible worries of all this stuff


00:20:19.040 --> 00:20:20.440
is, well, how are the C extensions


00:20:20.440 --> 00:20:21.680
going to deal with this?


00:20:21.680 --> 00:20:24.320
They don't know about multiple sub-interpreters.


00:20:24.320 --> 00:20:27.840
Yeah, so anyway, that's another one


00:20:27.840 --> 00:20:29.400
of the main threads going on there.


00:20:29.400 --> 00:20:31.080
Let's see.


00:20:31.080 --> 00:20:33.720
Then this is probably the biggest deal.


00:20:33.720 --> 00:20:37.520
This is a faster CPython 3.12 and beyond


00:20:37.520 --> 00:20:39.400
by Mark Shannon and Guido Van Rossum.


00:20:39.400 --> 00:20:44.800
So stepping back a release, Python 3.11,


00:20:44.800 --> 00:20:47.080
if you haven't heard, is fast.


00:20:47.080 --> 00:20:50.960
It's supposed to be 1.25 times faster than 3.10.


00:20:50.960 --> 00:20:52.380
How about that?


00:20:52.380 --> 00:20:53.940
- Yikes.


00:20:53.940 --> 00:20:54.780
- This blows me away.


00:20:54.780 --> 00:20:59.780
In one year, they were able to make Python 1.25x faster


00:20:59.780 --> 00:21:01.940
and it's been out for 30 years.


00:21:01.940 --> 00:21:03.900
It's not like, oh, well, we released it last year


00:21:03.900 --> 00:21:04.980
and now we've learned some things.


00:21:04.980 --> 00:21:08.860
You know, it's really, really, really solidified


00:21:08.860 --> 00:21:09.980
in the way that it is.


00:21:09.980 --> 00:21:11.540
And then still there's a lot of work.


00:21:11.540 --> 00:21:13.380
And this apparently is just the beginning.


00:21:13.380 --> 00:21:16.260
This is like a five-year plan to add all sorts


00:21:16.260 --> 00:21:20.580
of optimizing JIT compilers and all sorts of things.


00:21:20.580 --> 00:21:24.820
- How did they quantify that or what subset of the length


00:21:24.820 --> 00:21:25.660
was that tested on?


00:21:25.660 --> 00:21:27.620
That's the tricky thing to say.


00:21:27.620 --> 00:21:30.020
Python is 25% faster.


00:21:30.020 --> 00:21:31.060
- Doesn't matter what you do.


00:21:31.060 --> 00:21:33.780
Even if you just waiting on a database, it's still 25%.


00:21:33.780 --> 00:21:36.060
- Just overclock your computer in the background.


00:21:36.060 --> 00:21:37.380
- It's liquid cools it.


00:21:37.380 --> 00:21:44.380
I believe that number comes from the unit tests.


00:21:44.380 --> 00:21:45.780
I call the tests for CPython.


00:21:45.780 --> 00:21:50.260
I'm not 100% sure, but I believe that was the conversation.


00:21:50.260 --> 00:21:53.740
And so one of the big things coming is possibly a JIT,


00:21:53.740 --> 00:21:55.140
an optimizing JIT compiler.


00:21:55.140 --> 00:21:56.780
So right now they've found a way


00:21:56.780 --> 00:22:00.120
to optimize individual bytecode instructions


00:22:00.120 --> 00:22:03.020
to make the runtime smarter and go,


00:22:03.020 --> 00:22:04.300
oh, I see what you're trying to do.


00:22:04.300 --> 00:22:07.300
We could have a specialized version of that.


00:22:07.300 --> 00:22:10.300
But that's on a per line basis.


00:22:10.300 --> 00:22:12.000
Like how about inlining this method?


00:22:12.000 --> 00:22:13.920
'Cause I only see it called in two places


00:22:13.920 --> 00:22:15.620
or something like that, right?


00:22:15.620 --> 00:22:18.020
So you need something that can look more broadly at the code.


00:22:18.020 --> 00:22:21.540
So that's this idea of the JIT compiler and so on.


00:22:21.540 --> 00:22:23.340
So yeah, this is really good,


00:22:23.340 --> 00:22:26.180
but all three of these things I've talked about are like,


00:22:26.180 --> 00:22:29.780
both they might help each other,


00:22:29.780 --> 00:22:32.340
but they also might inhibit each other, right?


00:22:32.340 --> 00:22:34.900
So like the no-gil work might interfere


00:22:34.900 --> 00:22:37.180
with some of the optimizations that they're doing over here


00:22:37.180 --> 00:22:39.740
and the multiple sub-interpreters also


00:22:39.740 --> 00:22:44.260
might be some interplay that they've gotta be worked out.


00:22:44.260 --> 00:22:46.200
So I'll just summarize the rest.


00:22:46.200 --> 00:22:51.040
WebAssembly, and so we've talked about PyScript last time


00:22:51.040 --> 00:22:53.480
and Pyodide.


00:22:53.480 --> 00:22:58.480
This is the official CPython build target for just CPython.


00:22:58.480 --> 00:23:04.280
So this is really interesting that it's sort of a more


00:23:04.280 --> 00:23:08.680
from the core devs rather than somebody coercing CPython


00:23:08.680 --> 00:23:10.140
into a different build on their own.


00:23:10.140 --> 00:23:11.240
So that's pretty neat.


00:23:11.240 --> 00:23:14.840
Fstrings, apparently the fstring parser


00:23:14.840 --> 00:23:17.520
is kind of this weird side parser thing


00:23:17.520 --> 00:23:20.680
that's not actually part of the Python code parser.


00:23:20.680 --> 00:23:22.960
But now we have PEG, the PEG parser,


00:23:22.960 --> 00:23:25.760
it can support more of this and sort of unify that.


00:23:25.760 --> 00:23:30.400
So yeah, there's something like 1,400 lines


00:23:30.400 --> 00:23:33.120
of customized C code for parsing f-strings.


00:23:33.120 --> 00:23:34.420
Who knew?


00:23:34.420 --> 00:23:36.240
Well, the people who wrote it knew.


00:23:36.240 --> 00:23:37.920
They did a lot of work.


00:23:37.920 --> 00:23:41.040
- There's like 600 of the global variables right there.


00:23:41.040 --> 00:23:43.320
(all laughing)


00:23:43.320 --> 00:23:44.160
- Exactly.


00:23:44.160 --> 00:23:47.920
The most important 1400 lines in all Python right now.


00:23:47.920 --> 00:23:49.920
They have string functionality.


00:23:49.920 --> 00:23:51.920
[LAUGHTER]


00:23:51.920 --> 00:23:55.920
Then two of the big optimizations from Cinder,


00:23:55.920 --> 00:23:59.920
that's the Python 3.8 specialization from Meta.


00:23:59.920 --> 00:24:04.920
One is, this is a presentation by Idmar Osterreicher.


00:24:04.920 --> 00:24:07.920
So this is the person who sent this in actually.


00:24:07.920 --> 00:24:13.160
This is looking at async methods.


00:24:13.160 --> 00:24:16.280
and if you can be sure it's not actually going to a wait,


00:24:16.280 --> 00:24:17.840
treat it like a regular method.


00:24:17.840 --> 00:24:21.440
So, you know, like if you have an async method,


00:24:21.440 --> 00:24:23.520
you might say, do this, do this, do this.


00:24:23.520 --> 00:24:26.120
If I already have the value in the cache,


00:24:26.120 --> 00:24:29.140
return else await database call, right?


00:24:29.140 --> 00:24:31.080
If you already have it in the cache,


00:24:31.080 --> 00:24:33.800
why do you need to create a coroutine,


00:24:33.800 --> 00:24:37.020
schedule it on the loop, wait for the loop to get to it,


00:24:37.020 --> 00:24:39.280
and then return, just boot, just call it,


00:24:39.280 --> 00:24:41.580
like a regular method, just give us the answer.


00:24:41.580 --> 00:24:42.460
That's the idea.


00:24:42.460 --> 00:24:48.060
There's some interesting ideas that it might change runtime ordering,


00:24:48.060 --> 00:24:51.060
although I don't know there was any promises of runtime ordering.


00:24:51.060 --> 00:24:53.060
But yeah, so that one's interesting.


00:24:53.060 --> 00:24:57.060
Also, the issue in PR backlog,


00:24:57.060 --> 00:24:59.060
now that we moved to GitHub,


00:24:59.060 --> 00:25:02.060
apparently there are issues that are still 20 years old,


00:25:02.060 --> 00:25:04.060
that are still open.


00:25:04.060 --> 00:25:06.060
And traditionally,


00:25:06.060 --> 00:25:10.060
the core devs and the triagers and so on have


00:25:10.060 --> 00:25:15.060
approach these things like, well, should we close this?


00:25:15.060 --> 00:25:17.700
Or probably we need to keep it open


00:25:17.700 --> 00:25:19.460
'cause it's important for historical reasons.


00:25:19.460 --> 00:25:21.220
And they're starting to talk about like,


00:25:21.220 --> 00:25:22.920
this is not helpful for anyone.


00:25:22.920 --> 00:25:24.780
Maybe our first question is like,


00:25:24.780 --> 00:25:26.460
why should we keep this open?


00:25:26.460 --> 00:25:28.760
And if the answer is not clear, just close it.


00:25:28.760 --> 00:25:31.980
There's a lot of talk about, well, this historical stuff


00:25:31.980 --> 00:25:33.220
and maybe someone wants to pick it up.


00:25:33.220 --> 00:25:35.160
Well, if it were me, if I got to pick,


00:25:35.160 --> 00:25:37.580
and obviously I don't, so it doesn't really matter.


00:25:37.580 --> 00:25:39.140
I would just go, if it's older than two years,


00:25:39.140 --> 00:25:43.860
close it. There's a script that just says, "Over in two years, select all, close." Now, let's go


00:25:43.860 --> 00:25:48.820
through and figure it out because at some point, if you've got 20 years of, "You should make this


00:25:48.820 --> 00:25:54.820
change." Maybe these things aren't even relevant anymore or things have moved beyond it or it


00:25:54.820 --> 00:26:00.900
doesn't make sense in 2022. I don't know. But mostly what I got out of that article is I'm


00:26:00.900 --> 00:26:03.700
thankful that I don't have to deal with 20 years of issues and peers.


00:26:03.700 --> 00:26:06.220
(laughing)


00:26:06.220 --> 00:26:08.900
- But also they don't go away if you close them.


00:26:08.900 --> 00:26:11.500
They're still there if people really wanna see them.


00:26:11.500 --> 00:26:15.020
So I think they should be,


00:26:15.020 --> 00:26:16.840
maybe two years might be a little extreme,


00:26:16.840 --> 00:26:19.900
but at the very least five or three.


00:26:19.900 --> 00:26:21.500
- There should be a number where that's true.


00:26:21.500 --> 00:26:23.300
That number should be less than 30.


00:26:23.300 --> 00:26:26.360
- And it's a smaller number than 20, right?


00:26:26.360 --> 00:26:27.220
So.


00:26:27.220 --> 00:26:28.060
- Yeah.


00:26:28.060 --> 00:26:28.880
All right.


00:26:28.880 --> 00:26:29.720
This is a long section.


00:26:29.720 --> 00:26:31.940
Last thing, I'll close it out with this.


00:26:31.940 --> 00:26:36.740
Immortal objects the path forward for mortal objects. So let me ask you guys this


00:26:36.740 --> 00:26:39.980
Can you change none or true or false?


00:26:39.980 --> 00:26:42.640
Now, right?


00:26:42.640 --> 00:26:44.480
Does do you think it's ever gonna go away?


00:26:44.480 --> 00:26:50.220
Like are we done using true and then it's just gonna get garbage collected or reference counted out of memory


00:26:50.220 --> 00:26:55.960
Nope, but you know what every time you interact with true and false. It's still incrementing its ref count


00:26:55.960 --> 00:27:01.700
It's an object right yeah


00:27:01.700 --> 00:27:07.220
And so this discussion is like, isn't there some that just shouldn't be participating


00:27:07.220 --> 00:27:15.440
in reference counting because they're just fundamental to the idea of a class, the structure


00:27:15.440 --> 00:27:18.260
of a thing that defines what a class is.


00:27:18.260 --> 00:27:21.460
True, false, the numbers, the low numbers.


00:27:21.460 --> 00:27:25.540
There should be some that are not consuming that memory because they don't need to keep


00:27:25.540 --> 00:27:29.340
track of that section and so on.


00:27:29.340 --> 00:27:32.260
So anyway, this was the proposal.


00:27:32.260 --> 00:27:35.380
Again, it's complicated, is the story.


00:27:35.380 --> 00:27:37.460
But yeah.


00:27:37.460 --> 00:27:40.300
I do something a little bit like this on Talk Python,


00:27:40.300 --> 00:27:41.380
the training site.


00:27:41.380 --> 00:27:44.700
So I've done a lot to tweak the garbage collection around there


00:27:44.700 --> 00:27:49.300
and really change the defaults of what


00:27:49.300 --> 00:27:51.540
are the triggers for garbage collection.


00:27:51.540 --> 00:27:54.180
So if I've got this many allocations and so on.


00:27:54.180 --> 00:27:56.100
And one of the things you can do is


00:27:56.100 --> 00:28:02.860
you can tell it from here on, like what has existed up until now, freeze that and don't


00:28:02.860 --> 00:28:05.460
look at it when you have to look for cycles.


00:28:05.460 --> 00:28:06.460
Right?


00:28:06.460 --> 00:28:07.460
Yeah.


00:28:07.460 --> 00:28:12.540
So I just, in my app startup, when it's kind of imported the things and it's about to start,


00:28:12.540 --> 00:28:16.940
it just says, okay, everything that you've done to come to life, just don't trick that


00:28:16.940 --> 00:28:18.700
anymore.


00:28:18.700 --> 00:28:20.540
Anything else I make from here on out, please clean that up.


00:28:20.540 --> 00:28:24.900
And it seems to, it's kind of a super cheap, cheapo version, but you still get reference


00:28:24.900 --> 00:28:30.140
counting right yeah that's definitely not a reason that I think it's worth it


00:28:30.140 --> 00:28:34.060
for some of these immortal objects yeah why not I mean we shouldn't be reference


00:28:34.060 --> 00:28:38.140
counting on none that's kind of weird unless unless it slows things down by


00:28:38.140 --> 00:28:42.220
having like it does that's the thing that's crazy so over here they're like


00:28:42.220 --> 00:28:46.860
alright here's the deal we shouldn't we shouldn't have to worry about this


00:28:46.860 --> 00:28:49.000
And so where was it?


00:28:49.000 --> 00:28:51.900
The benefits of immortality.


00:28:51.900 --> 00:28:54.780
It adds an if statement to everything, right?


00:28:54.780 --> 00:28:59.780
So it says the naive implementation of this makes it 6%


00:28:59.780 --> 00:29:02.940
slower, not faster, like oh no.


00:29:02.940 --> 00:29:05.700
- Makes sense.


00:29:05.700 --> 00:29:08.220
- And we think we can make it only 2% slower.


00:29:08.220 --> 00:29:12.220
- It's getting slower though, yeah.


00:29:14.500 --> 00:29:16.860
- Well, the thing is, normally you would just


00:29:16.860 --> 00:29:17.820
reference count it.


00:29:17.820 --> 00:29:20.100
You just go none plus equals one, right?


00:29:20.100 --> 00:29:22.540
Or plus plus, minus minus.


00:29:22.540 --> 00:29:24.060
But here you're like, you have to have a test.


00:29:24.060 --> 00:29:27.060
Like if it's an immortal object, do this, else do that.


00:29:27.060 --> 00:29:30.360
And it's just like that bit in the hot loop of the runtime


00:29:30.360 --> 00:29:32.620
is just apparently overhead, you know?


00:29:32.620 --> 00:29:33.580
- Yeah, for everything.


00:29:33.580 --> 00:29:35.420
So everything you reference has to check


00:29:35.420 --> 00:29:38.300
to see whether or not it's an immortal object


00:29:38.300 --> 00:29:40.860
before it does the reference counting, so.


00:29:40.860 --> 00:29:42.460
- Yeah.


00:29:42.460 --> 00:29:45.840
Maybe it has a no op method on it, I don't know.


00:29:45.840 --> 00:29:48.500
I think it probably works straight on the field though.


00:29:48.500 --> 00:29:51.780
Much like Highlander, Alvaro says,


00:29:51.780 --> 00:29:53.860
"There can only be one none."


00:29:53.860 --> 00:29:56.060
(all laughing)


00:29:56.060 --> 00:29:58.020
All right, well. - It's just a trade off.


00:29:58.020 --> 00:30:00.500
- Yeah, yeah, this is definitely an interesting trade off.


00:30:00.500 --> 00:30:02.540
All right, well, I think that's more than enough


00:30:02.540 --> 00:30:04.860
for the language writer, but it was really cool


00:30:04.860 --> 00:30:07.420
that Alex wrote that up and NMR sent it in


00:30:07.420 --> 00:30:09.680
'cause that's a good insight to what's next.


00:30:09.680 --> 00:30:12.660
[AUDIO OUT]


00:30:12.660 --> 00:30:17.160
Cool.


00:30:17.160 --> 00:30:21.000
So it's my turn, right, given that it's John?


00:30:21.000 --> 00:30:23.120
Yes, go ahead, Dana.


00:30:23.120 --> 00:30:24.160
Cool.


00:30:24.160 --> 00:30:26.160
So people in the software community


00:30:26.160 --> 00:30:29.480
are blessed with many options for doing source control.


00:30:29.480 --> 00:30:33.280
You've got Git, SVN, Mercurial, and other historical ones


00:30:33.280 --> 00:30:34.920
that maybe aren't as well used.


00:30:34.920 --> 00:30:37.640
But optical engineers, mechanical engineers,


00:30:37.640 --> 00:30:39.140
electrical engineers, everybody else


00:30:39.140 --> 00:30:41.900
doesn't have it nearly as good as the software community.


00:30:41.900 --> 00:30:46.240
So anytime I see an option for that, it definitely sticks out of my mind.


00:30:46.240 --> 00:30:49.640
So I don't remember how I found this, but came upon all spice


00:30:49.640 --> 00:30:54.120
fairly recently, which is get for people who are doing circuits.


00:30:54.120 --> 00:30:56.120
This is cool.


00:30:56.120 --> 00:30:59.260
So it has it looks exactly like it.


00:30:59.260 --> 00:31:02.220
You've got version control, you've got all the things you expect to have.


00:31:02.220 --> 00:31:07.000
It's compatible with some of the common electrical design programs.


00:31:07.840 --> 00:31:10.000
But it really just gives you the ability


00:31:10.000 --> 00:31:12.400
to do all these sorts of things that you take for granted


00:31:12.400 --> 00:31:15.080
if you're in a sophisticated workflow like software,


00:31:15.080 --> 00:31:19.480
but that you wish dearly you had for any other discipline.


00:31:19.480 --> 00:31:21.120
- So when you put something in source control


00:31:21.120 --> 00:31:22.720
and you diff it, what do you get?


00:31:22.720 --> 00:31:27.520
Are you diffing graphics?


00:31:27.520 --> 00:31:29.880
Are you diffing some sort of definition file


00:31:29.880 --> 00:31:31.960
that defines the circuit?


00:31:31.960 --> 00:31:35.440
- One of the first thing they have is the diff tool,


00:31:35.440 --> 00:31:36.280
'cause they know that that's


00:31:36.280 --> 00:31:37.320
kind of one of the big questions, right?


00:31:37.320 --> 00:31:38.880
is how do you compare the schematics?


00:31:38.880 --> 00:31:40.560
Are we gonna show it?


00:31:40.560 --> 00:31:42.600
So they have a way to do it visually


00:31:42.600 --> 00:31:43.880
and you can look at all the changes


00:31:43.880 --> 00:31:46.280
and it looks like they're highlighting each commit


00:31:46.280 --> 00:31:49.280
to whatever change was made on the schematic.


00:31:49.280 --> 00:31:50.520
- That's cool.


00:31:50.520 --> 00:31:51.360
- Yeah.


00:31:51.360 --> 00:31:53.960
- I love that, it's very cool, yeah.


00:31:53.960 --> 00:31:55.640
- Yeah, so one potential question would be,


00:31:55.640 --> 00:31:58.720
well, great, it's nice that you can do that on the internet


00:31:58.720 --> 00:32:00.520
but I work at a commercial company


00:32:00.520 --> 00:32:02.080
that doesn't wanna do that.


00:32:02.080 --> 00:32:07.080
But they do have both, what they have a,


00:32:07.120 --> 00:32:09.720
They have self hosting and they have a government cloud version.


00:32:09.720 --> 00:32:12.600
If you're subject to things like ITAR, EAR.


00:32:12.600 --> 00:32:18.560
So you can in the same sense that it has an enterprise option, all spice also has an enterprise option.


00:32:18.560 --> 00:32:21.960
Like an on Prem self hosted version.


00:32:21.960 --> 00:32:24.760
Yeah, so I've no your secrets.


00:32:24.760 --> 00:32:36.440
Yes, so I have no personal experience with it, but it's very promising and excited to see somebody trying to come up with better ways to do engineering work besides just software.


00:32:36.440 --> 00:32:40.640
You can even configure it to integrate with Tortoise Git,


00:32:40.640 --> 00:32:43.840
like Windows Explorer, right-click type of Git.


00:32:43.840 --> 00:32:47.320
>> Yeah. So exciting stuff.


00:32:47.320 --> 00:32:49.360
Hopefully, somebody helps out the Mechies


00:32:49.360 --> 00:32:52.640
and the optical engineers as well one day.


00:32:52.640 --> 00:32:56.080
>> Yeah. I mean, there's always large file support,


00:32:56.080 --> 00:32:59.760
but the diff is terrible, right?


00:32:59.760 --> 00:33:01.120
>> Usually.


00:33:01.120 --> 00:33:03.040
>> Yeah. You're looking at binary files or stuff


00:33:03.040 --> 00:33:07.320
that's where humans are so good at processing images


00:33:07.320 --> 00:33:08.640
that if you have a visual comparison


00:33:08.640 --> 00:33:10.280
that that's orders of magnitude better


00:33:10.280 --> 00:33:13.400
than trying to look at lines of your,


00:33:13.400 --> 00:33:16.240
even if it is a plain text file that you can read through.


00:33:16.240 --> 00:33:18.840
- Yeah, definitely.


00:33:18.840 --> 00:33:21.360
Yeah.


00:33:21.360 --> 00:33:23.760
- Here's your XML with its names.


00:33:23.760 --> 00:33:25.960
Good luck.


00:33:25.960 --> 00:33:26.800
- What?


00:33:26.800 --> 00:33:27.720
What does this mean?


00:33:27.720 --> 00:33:29.120
- Yeah.


00:33:29.120 --> 00:33:29.960
- Indeed.


00:33:29.960 --> 00:33:30.800
- Well, cool.


00:33:30.800 --> 00:33:31.620
I like it.


00:33:31.620 --> 00:33:32.460
- All right.


00:33:32.460 --> 00:33:34.460
Brian, you got any extras for us?


00:33:34.460 --> 00:33:37.460
I, yeah, actually, so I've been busy.


00:33:37.460 --> 00:33:40.460
I've got like this back stream of testing code episodes.


00:33:40.460 --> 00:33:45.460
So the most recent one is that I put out was with Will McGugan.


00:33:45.460 --> 00:33:48.460
We're talking about rich and textual and textualized.


00:33:48.460 --> 00:33:50.460
It's really fun, really fun one.


00:33:50.460 --> 00:33:53.460
But actually, so since we talked last Tuesday,


00:33:53.460 --> 00:33:55.460
I've got four extra episodes that have come out.


00:33:55.460 --> 00:34:01.460
So we've got teaching, including testing with web front end stuff.


00:34:01.460 --> 00:34:05.080
which was kind of an interesting story about like,


00:34:05.080 --> 00:34:07.120
basically if you're college level students,


00:34:07.120 --> 00:34:09.600
but they're new to coding,


00:34:09.600 --> 00:34:11.360
when do you include testing?


00:34:11.360 --> 00:34:15.480
And Carl says right away, why not?


00:34:15.480 --> 00:34:19.560
So also a developer and productivity episode.


00:34:19.560 --> 00:34:21.840
I think that's, oh yeah.


00:34:21.840 --> 00:34:25.160
And a Python Django rich and testing articles,


00:34:25.160 --> 00:34:26.800
so or episodes.


00:34:26.800 --> 00:34:29.340
So lots of goodness over on testing code.


00:34:30.520 --> 00:34:34.320
They have a Django rich package, apparently.


00:34:34.320 --> 00:34:38.640
- Yeah, that was just for other, like the CLI,


00:34:38.640 --> 00:34:42.160
the Django CLI stuff, including rich with that,


00:34:42.160 --> 00:34:45.760
which is great, but they've incorporated


00:34:45.760 --> 00:34:47.600
the that into the test runner.


00:34:47.600 --> 00:34:52.200
So the Django test runner can do rich tracebacks,


00:34:52.200 --> 00:34:53.760
which is pretty cool. - Perfect.


00:34:53.760 --> 00:34:54.600
- So.


00:34:54.600 --> 00:34:57.320
- Daniel, you got anything else you wanna give a quick?


00:34:57.320 --> 00:34:58.760
- No.


00:34:58.760 --> 00:35:02.200
- Sure, so Adafruit's a well-known company


00:35:02.200 --> 00:35:06.200
for doing maker electronics and,


00:35:06.200 --> 00:35:08.160
oh yeah, I don't have the links up, sorry.


00:35:08.160 --> 00:35:11.160
But Adafruit's well-known and they do a good job


00:35:11.160 --> 00:35:14.000
of focusing at the first five minute experience


00:35:14.000 --> 00:35:16.440
of getting you up to speed with something on electronics.


00:35:16.440 --> 00:35:18.320
But there are other companies that do the same thing as well


00:35:18.320 --> 00:35:22.080
so I was gonna shout out SparkFun, Seed Studio,


00:35:22.080 --> 00:35:23.960
and then other companies like OpenMV


00:35:23.960 --> 00:35:26.500
who has a focus on machine vision.


00:35:26.500 --> 00:35:29.180
And they're less geared more for the people


00:35:29.180 --> 00:35:30.020
at the entry level.


00:35:30.020 --> 00:35:31.300
So maybe if you're a little more comfortable


00:35:31.300 --> 00:35:34.220
with certain things or a little more comfortable,


00:35:34.220 --> 00:35:35.860
you know, exploring those things on your own,


00:35:35.860 --> 00:35:36.700
they could be good options.


00:35:36.700 --> 00:35:37.520
- Right.


00:35:37.520 --> 00:35:39.700
More specialized maybe for people who are trying to-


00:35:39.700 --> 00:35:42.500
- Or if you go to, yeah, if you go to Adafruit


00:35:42.500 --> 00:35:43.580
and what you want is out of stock,


00:35:43.580 --> 00:35:45.460
you can check some other places too.


00:35:45.460 --> 00:35:47.780
- Which unfortunately happens a lot these days.


00:35:47.780 --> 00:35:50.340
It's, those things come and go.


00:35:50.340 --> 00:35:51.620
A lot of demand.


00:35:51.620 --> 00:35:52.460
- Yes.


00:35:52.460 --> 00:35:54.020
- All right, I do have some.


00:35:54.020 --> 00:35:54.860
- Yeah. - Cool.


00:35:54.860 --> 00:35:55.680
- That's right.


00:35:55.680 --> 00:35:57.680
I've got a bunch of ones, but I kind of got a lot.


00:35:57.680 --> 00:36:00.600
So, all right, let's see.


00:36:00.600 --> 00:36:01.440
I'll go last.


00:36:01.440 --> 00:36:02.260
All right, the first one is,


00:36:02.260 --> 00:36:04.640
I always love a good documentary on tech stuff.


00:36:04.640 --> 00:36:06.600
And sometimes these are super cheesy,


00:36:06.600 --> 00:36:08.840
but there's a documentary called "Power On,


00:36:08.840 --> 00:36:12.400
The Story of Xbox," which is a four hour video,


00:36:12.400 --> 00:36:13.480
which you can watch on YouTube,


00:36:13.480 --> 00:36:16.080
which I'll link directly to the YouTube video.


00:36:16.080 --> 00:36:16.920
And it's really good.


00:36:16.920 --> 00:36:18.980
It's really interesting.


00:36:18.980 --> 00:36:20.520
Whether you love or hate the Xbox,


00:36:20.520 --> 00:36:23.120
honestly don't care that much one way or the other,


00:36:23.120 --> 00:36:24.960
but it's just an interesting sort of view


00:36:24.960 --> 00:36:27.880
of the last 20 years of technology


00:36:27.880 --> 00:36:29.320
from the gaming side.


00:36:29.320 --> 00:36:31.560
So if people are looking for something to watch


00:36:31.560 --> 00:36:33.000
and they want to spend four hours doing it


00:36:33.000 --> 00:36:35.460
or spread it out, they can check this out.


00:36:35.460 --> 00:36:41.560
All right, speaking of videos, not that one, this one.


00:36:41.560 --> 00:36:45.080
I took, so recently I released my Git course


00:36:45.080 --> 00:36:47.920
on sort of a pragmatic introduction to Git.


00:36:47.920 --> 00:36:51.080
And I decided I wanted to share one part of it


00:36:51.080 --> 00:36:52.360
with a broader world.


00:36:52.360 --> 00:36:53.320
So I released a video called


00:36:53.320 --> 00:36:55.600
the four reasons to branch with Git.


00:36:55.600 --> 00:36:58.020
And I put that on YouTube, people can check that out.


00:36:58.020 --> 00:37:00.960
So it's like an hour long video I posted this week.


00:37:00.960 --> 00:37:06.340
And then this one comes to us from Jason Percor,


00:37:06.340 --> 00:37:09.020
saying how cool is it to see Python showing up


00:37:09.020 --> 00:37:11.100
like right on the front page of various places.


00:37:11.100 --> 00:37:13.780
So there's this place called EasyPost, easypost.com,


00:37:13.780 --> 00:37:18.060
which lets you like do labels and track your labels


00:37:18.060 --> 00:37:18.880
and stuff.


00:37:18.880 --> 00:37:20.380
But if you just scroll down just a little bit,


00:37:20.380 --> 00:37:21.220
it says, you know what?


00:37:21.220 --> 00:37:24.540
why don't you just either buy labels


00:37:24.540 --> 00:37:26.740
or you can just use this Python API right here.


00:37:26.740 --> 00:37:29.180
And it doesn't even sort of,


00:37:29.180 --> 00:37:32.140
if your developers click to reveal the secret,


00:37:32.140 --> 00:37:34.820
you know, just like, no, here's your Python code


00:37:34.820 --> 00:37:36.760
for our company.


00:37:36.760 --> 00:37:41.420
So just kind of a cool little thing for that.


00:37:41.420 --> 00:37:44.780
Let's see, Brian Skin pointed out


00:37:44.780 --> 00:37:48.920
that the Stack Overflow 2022 developer survey


00:37:48.920 --> 00:37:53.920
is open for accepting comments, which is cool.


00:37:53.920 --> 00:37:56.240
And I'm gonna put this up here on the screen first.


00:37:56.240 --> 00:37:57.400
So Brian, do you see this?


00:37:57.400 --> 00:37:58.320
It has all of this stuff.


00:37:58.320 --> 00:38:00.000
I can't, if I click it, it'll just go away.


00:38:00.000 --> 00:38:02.080
And like, this is an image, right, right here.


00:38:02.080 --> 00:38:03.360
- Yeah.


00:38:03.360 --> 00:38:05.680
- What if I wanted that as text?


00:38:05.680 --> 00:38:08.720
What if I wanted to somehow grab that?


00:38:08.720 --> 00:38:09.800
So I've got this app,


00:38:09.800 --> 00:38:11.920
which I'm gonna tell you all about next,


00:38:11.920 --> 00:38:14.680
called Text Sniper.


00:38:14.680 --> 00:38:16.040
Watch this, so you can't quite see.


00:38:16.040 --> 00:38:18.000
If I just drag over that,


00:38:18.000 --> 00:38:19.640
just like you would a screenshot.


00:38:19.640 --> 00:38:22.140
And then let's see,


00:38:22.140 --> 00:38:26.760
it's somewhere I can paste this.


00:38:26.760 --> 00:38:31.080
So what I got out of that is, check this out.


00:38:31.080 --> 00:38:34.440
Isn't that cool? - Oh, wow.


00:38:34.440 --> 00:38:35.760
Yeah. - I just control seed


00:38:35.760 --> 00:38:40.760
from like the picture on my screen.


00:38:40.760 --> 00:38:44.120
And it can do PDFs, it can do screenshots.


00:38:44.120 --> 00:38:47.400
Like, so for example, if you're watching a video presentation


00:38:47.400 --> 00:38:48.680
you see a slide, you're like,


00:38:48.680 --> 00:38:50.080
oh, I want to capture those bullet points


00:38:50.080 --> 00:38:52.640
or that, grab it, you got it.


00:38:52.640 --> 00:38:56.480
So that is called text sniper, which is super neat.


00:38:56.480 --> 00:38:59.880
All it does, it's just like the select region


00:38:59.880 --> 00:39:02.960
for screenshot and then boom.


00:39:02.960 --> 00:39:03.960
It doesn't matter what's under it.


00:39:03.960 --> 00:39:07.040
It's just, if it's texted, OCR is it, and then you got it.


00:39:07.040 --> 00:39:08.240
- Yeah.


00:39:08.240 --> 00:39:11.260
So often like a small restaurant will put their address


00:39:11.260 --> 00:39:16.260
or their phone number, like in an image, like, come on.


00:39:16.280 --> 00:39:18.200
I gotta click on that.


00:39:18.200 --> 00:39:19.720
- I wanted to put, just drop this,


00:39:19.720 --> 00:39:21.420
paste it into maps or something.


00:39:21.420 --> 00:39:22.260
- Yeah.


00:39:22.260 --> 00:39:23.100
- I don't know.


00:39:23.100 --> 00:39:24.200
I think for doing research,


00:39:24.200 --> 00:39:25.460
if you're like watching videos,


00:39:25.460 --> 00:39:27.040
you want to get something out of something


00:39:27.040 --> 00:39:28.840
that's on the screen, like a slide or whatever.


00:39:28.840 --> 00:39:30.440
This is pretty awesome.


00:39:30.440 --> 00:39:33.080
And it costs something like $11 once.


00:39:33.080 --> 00:39:34.840
So it's, you know, if it's useful to you,


00:39:34.840 --> 00:39:35.680
it'll be worth it.


00:39:35.680 --> 00:39:37.720
If not, then, you know, it's not,


00:39:37.720 --> 00:39:39.980
there's gotta be worth $11 or zero to you.


00:39:39.980 --> 00:39:43.280
- That was like a good OCR app.


00:39:43.280 --> 00:39:44.120
- Yeah, yeah.


00:39:44.120 --> 00:39:46.280
And it's just the ease of use, right?


00:39:46.280 --> 00:39:48.240
Not take a screenshot and go find your app.


00:39:48.240 --> 00:39:50.180
It's just like, slap, slap, drop.


00:39:50.180 --> 00:39:58.080
Okay, so last one of my extras, Sam Low and Philip Guo


00:39:58.080 --> 00:40:02.920
sent over, Sam Low, sorry, and then sent over that,


00:40:02.920 --> 00:40:06.200
I had them on to talk about Pandas Tutor,


00:40:06.200 --> 00:40:07.620
and they were talking about the challenges


00:40:07.620 --> 00:40:11.060
of running Pandas Tutor on the server side


00:40:11.060 --> 00:40:14.040
and letting people run code, but it's pretty limited


00:40:14.040 --> 00:40:16.480
because you don't want them to hack the various things.


00:40:16.480 --> 00:40:17.560
You don't want to keep it pretty limited


00:40:17.560 --> 00:40:20.760
so they don't take advantage of like your compute resources.


00:40:20.760 --> 00:40:24.560
So now they just posted a message saying,


00:40:24.560 --> 00:40:25.800
Pandas Tutor, if you go over here and say,


00:40:25.800 --> 00:40:27.020
visualize your code,


00:40:27.020 --> 00:40:30.840
it'll go and do all these cool visualizations.


00:40:30.840 --> 00:40:32.780
I know we've spoken about this before,


00:40:32.780 --> 00:40:34.460
but notice what it says here.


00:40:34.460 --> 00:40:36.920
I can scroll a little.


00:40:36.920 --> 00:40:41.320
It says, initializing PyIoDyed,


00:40:41.320 --> 00:40:42.560
Python WASM download,


00:40:42.560 --> 00:40:44.720
- Pandas running, boom.


00:40:44.720 --> 00:40:48.720
And so all of this is running in client side Python,


00:40:48.720 --> 00:40:51.680
which is just, yeah.


00:40:51.680 --> 00:40:53.600
So we talked about that being one of the topics


00:40:53.600 --> 00:40:56.240
of the language summit, the WASM support,


00:40:56.240 --> 00:40:58.200
and here you have it in action.


00:40:58.200 --> 00:40:59.120
So I said on the show, like,


00:40:59.120 --> 00:41:00.240
"Hey, have you guys considered this?"


00:41:00.240 --> 00:41:01.600
Like, "Ah, maybe we should."


00:41:01.600 --> 00:41:03.760
And then like, "This turns out to be a great idea."


00:41:03.760 --> 00:41:06.080
(both laughing)


00:41:06.080 --> 00:41:09.500
Like the message is run code on the server, that's slower.


00:41:09.500 --> 00:41:11.240
We just recommend you run it here.


00:41:11.240 --> 00:41:13.960
- Nice. - All right.


00:41:13.960 --> 00:41:14.800
That's pretty neat.


00:41:14.800 --> 00:41:15.800
Well done, you guys.


00:41:15.800 --> 00:41:18.280
And that's it for my extras as well.


00:41:18.280 --> 00:41:19.600
- That's a lot more real than I thought.


00:41:19.600 --> 00:41:20.840
I guess I thought PyR died


00:41:20.840 --> 00:41:22.200
and WebAssembly were a little bit further off,


00:41:22.200 --> 00:41:24.420
but that's like, hey, there's an application right now


00:41:24.420 --> 00:41:25.920
doing that today.


00:41:25.920 --> 00:41:26.960
- Yeah, yeah.


00:41:26.960 --> 00:41:32.120
Brian, the anti-gravity PyScript thing you showed


00:41:32.120 --> 00:41:34.120
last week was so cool.


00:41:34.120 --> 00:41:36.760
- Yeah, I didn't even know it was doing that


00:41:36.760 --> 00:41:38.440
before we showed it, but it's pretty neat.


00:41:38.440 --> 00:41:41.260
- Yeah, a lot of the interactions are super,


00:41:41.260 --> 00:41:42.580
they're getting, starting to be really,


00:41:42.580 --> 00:41:44.780
yeah, we're getting there, Daniel, we're getting there.


00:41:44.780 --> 00:41:45.940
(Daniel laughs)


00:41:45.940 --> 00:41:49.060
All right, how about a joke to wrap it up?


00:41:49.060 --> 00:41:50.660
- Definitely.


00:41:50.660 --> 00:41:54.140
- So we've all been in, well, maybe we haven't all been,


00:41:54.140 --> 00:41:56.500
we can all imagine being in awkward situations,


00:41:56.500 --> 00:41:59.900
maybe on a weird date, so I don't go on dates,


00:41:59.900 --> 00:42:01.420
really being married for a long time,


00:42:01.420 --> 00:42:04.580
but imagine, imagine that you had,


00:42:04.580 --> 00:42:09.520
Here's a graphic of a woman who's on a date,


00:42:09.520 --> 00:42:11.860
like maybe just woke up in the morning


00:42:11.860 --> 00:42:15.600
after the first time together sort of thing.


00:42:15.600 --> 00:42:17.960
And the guy who's like sculpted, right?


00:42:17.960 --> 00:42:20.560
He's like clearly like a super fake,


00:42:20.560 --> 00:42:22.520
probably a good looking guy, whatever.


00:42:22.520 --> 00:42:23.880
But he's in the shower


00:42:23.880 --> 00:42:25.800
and she's like flipping through his phone and says,


00:42:25.800 --> 00:42:27.400
"When she looks through your phone,


00:42:27.400 --> 00:42:30.320
but all she can find is fork a child and kill it."


00:42:30.320 --> 00:42:31.720
Google search.


00:42:31.720 --> 00:42:33.800
Kill child and fork parent.


00:42:33.800 --> 00:42:35.320
Kill parent with fork.


00:42:35.320 --> 00:42:37.240
Kill parent without killing child.


00:42:37.240 --> 00:42:40.840
Kill child.


00:42:40.840 --> 00:42:42.680
You got this face of like, oh,


00:42:42.680 --> 00:42:43.160
what's that?


00:42:43.160 --> 00:42:45.800
Uh, those are great.


00:42:45.800 --> 00:42:50.520
Yeah, she's got this look like I thought it was going so well and he's a murderer.


00:42:50.520 --> 00:42:54.520
No, he's just trying to figure out Linux.


00:42:54.520 --> 00:42:57.800
Don't don't hold it against kill child without killing grandchild.


00:42:57.800 --> 00:43:01.800
It's so bad.


00:43:03.320 --> 00:43:04.240
- It makes me feel bad for laughing.


00:43:04.240 --> 00:43:05.080
- Can you do that?


00:43:05.080 --> 00:43:06.520
- I don't know, yeah.


00:43:06.520 --> 00:43:07.360
- Well, I don't know.


00:43:07.360 --> 00:43:08.180
I haven't searched it,


00:43:08.180 --> 00:43:11.520
but I'm gonna have to explain that search if I did.


00:43:11.520 --> 00:43:13.240
- Search it in stealth.


00:43:13.240 --> 00:43:15.140
- That's what incognito mode is for.


00:43:15.140 --> 00:43:18.440
This is totally benign,


00:43:18.440 --> 00:43:20.320
but if somebody sees it out of context,


00:43:20.320 --> 00:43:22.960
maybe they won't feel that way about it.


00:43:22.960 --> 00:43:24.840
- There's what will get you on the FBI list,


00:43:24.840 --> 00:43:27.600
and then software engineers search for direct--


00:43:27.600 --> 00:43:30.040
- Yeah, there's like, yeah, a Venn diagram of that.


00:43:30.040 --> 00:43:32.400
- Yeah, there's probably a small intersection there.


00:43:32.400 --> 00:43:35.760
- It's probably pretty big actually.


00:43:35.760 --> 00:43:37.200
- Yeah, it's probably pretty big.


00:43:37.200 --> 00:43:38.320
(laughing)


00:43:38.320 --> 00:43:42.160
- Anyway, well thanks everybody for a fun show again.


00:43:42.160 --> 00:43:43.320
- Yeah, you bet.


00:43:43.320 --> 00:43:45.200
Thanks Brian and Daniel, it's great to have you here.


00:43:45.200 --> 00:43:46.520
- Yep, thanks.


00:43:46.520 --> 00:43:48.320
- Thanks for coming.


00:43:48.320 --> 00:43:49.300
Bye.


00:43:49.300 --> 00:43:51.860
Bye everyone in the audience, thanks for being here.


00:43:51.860 --> 00:43:52.700
- Bye.


00:43:52.700 --> 00:44:02.700
[BLANK_AUDIO]

