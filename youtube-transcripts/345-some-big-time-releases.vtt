WEBVTT

00:00:00.000 --> 00:00:03.160
- Hello, everybody.


00:00:03.160 --> 00:00:04.320
Hello, Michael.


00:00:04.320 --> 00:00:05.160
- Hello.


00:00:05.160 --> 00:00:07.840
- Welcome to Python Bytes.


00:00:07.840 --> 00:00:10.480
But we'll start in a second.


00:00:10.480 --> 00:00:11.560
- You're gonna get confused.


00:00:11.560 --> 00:00:12.520
This is gonna get tricky.


00:00:12.520 --> 00:00:15.460
- It is gonna get tricky, so that's all right.


00:00:15.460 --> 00:00:18.560
Thanks for joining us.


00:00:18.560 --> 00:00:20.800
It's a different date because of stuff,


00:00:20.800 --> 00:00:24.000
but yeah, anyway, let's kick it off.


00:00:24.000 --> 00:00:24.840
You ready?


00:00:24.840 --> 00:00:28.160
Hello and welcome to Python Bytes,


00:00:28.160 --> 00:00:30.120
where we deliver Python news and headlines


00:00:30.120 --> 00:00:31.320
directly to your earbuds.


00:00:31.320 --> 00:00:35.280
This is episode 345 recorded July 26th.


00:00:35.280 --> 00:00:36.120
Is that right?


00:00:36.120 --> 00:00:38.160
July 26th, 2023.


00:00:38.160 --> 00:00:39.920
I am Brian Okken.


00:00:39.920 --> 00:00:41.640
- And I'm Michael Kennedy.


00:00:41.640 --> 00:00:43.480
- And you know, 345 episodes,


00:00:43.480 --> 00:00:44.880
you'd think I wouldn't have to read that,


00:00:44.880 --> 00:00:47.400
but I still do, 'cause I'm messing up.


00:00:47.400 --> 00:00:52.400
Anyway, a lot of fun topics today.


00:00:52.400 --> 00:00:55.800
We, our sponsors today are us,


00:00:55.800 --> 00:00:57.320
courses at Talk Python Training.


00:00:57.320 --> 00:01:00.680
We'll talk about those and the new Python People podcast


00:01:00.680 --> 00:01:02.360
and our Patreon supporters, of course.


00:01:02.360 --> 00:01:05.080
Thank you everybody for continuing to support us.


00:01:05.080 --> 00:01:09.400
And everybody that's listening to this,


00:01:09.400 --> 00:01:12.000
usually, so this is a Wednesday morning,


00:01:12.000 --> 00:01:16.000
but usually it's Tuesday at 11 Pacific


00:01:16.000 --> 00:01:17.240
is when we're recording.


00:01:17.240 --> 00:01:19.280
And if you are around at that time,


00:01:19.280 --> 00:01:20.880
we'd love to have you join the show.


00:01:20.880 --> 00:01:23.880
Just go to pythonbytes.fm/live


00:01:23.880 --> 00:01:25.800
and you can see when the next episode


00:01:25.800 --> 00:01:27.080
is gonna get recorded.


00:01:27.080 --> 00:01:31.720
So yeah, Brian, I usually try to, I'm not always successful.


00:01:31.720 --> 00:01:33.400
Also sometimes I just don't know.


00:01:33.400 --> 00:01:38.960
I usually try to schedule the next live stream soon as we're done with this one.


00:01:38.960 --> 00:01:40.680
Yeah.


00:01:40.680 --> 00:01:44.480
So if you go to YouTube, you can click notify me for just that event.


00:01:44.480 --> 00:01:46.960
If you want to come to the next week's one or something.


00:01:46.960 --> 00:01:50.000
So that's kind of the best way to know when the next live stream is.


00:01:50.000 --> 00:01:50.800
Yeah.


00:01:50.800 --> 00:01:51.400
Yeah.


00:01:51.400 --> 00:01:54.520
Um, and I appreciate people that show up and add comments.


00:01:54.520 --> 00:01:55.120
It's nice.


00:01:55.720 --> 00:01:58.720
So Michael, why don't you kick us off with the first topic?


00:01:58.720 --> 00:02:00.760
- Yes, indeed.


00:02:00.760 --> 00:02:02.400
This is a very, very exciting one.


00:02:02.400 --> 00:02:05.560
So the next topic, the first topic,


00:02:05.560 --> 00:02:10.560
is the third version of Cython, not CPython.


00:02:10.560 --> 00:02:13.980
I didn't drop a P on accident, Cython.


00:02:13.980 --> 00:02:15.640
Many people know what Cython is,


00:02:15.640 --> 00:02:17.960
but I suspect sufficiently many don't


00:02:17.960 --> 00:02:20.920
that it justifies me saying what the heck it is.


00:02:20.920 --> 00:02:25.720
So Cython, let's do a throwback, Brian.


00:02:25.720 --> 00:02:26.560
This'll be fun.


00:02:26.560 --> 00:02:29.960
You've done plenty of C.


00:02:29.960 --> 00:02:31.780
Do you remember inline assembler


00:02:31.780 --> 00:02:34.920
when like little sections of C code


00:02:34.920 --> 00:02:36.880
had to be like really close to the metal


00:02:36.880 --> 00:02:39.960
and so you would write like a little bit of assembly


00:02:39.960 --> 00:02:44.720
inside of a C function or make a function in assembly


00:02:44.720 --> 00:02:46.560
and call it something crazy like that.


00:02:46.560 --> 00:02:48.080
We're talking like 90s.


00:02:48.080 --> 00:02:48.920
- Yeah.


00:02:48.920 --> 00:02:51.120
Python is kind of like that for Python.


00:02:51.120 --> 00:02:56.000
If you've got some part of your code that's not fast enough,


00:02:56.000 --> 00:02:59.000
well, one of the options is to do what a lot of people


00:02:59.000 --> 00:03:01.520
are doing is go like, well, I'm going to go learn Rust,


00:03:01.520 --> 00:03:03.440
and I'm going to write this section in Rust,


00:03:03.440 --> 00:03:05.280
and then I'm going to import it into Python.


00:03:05.280 --> 00:03:09.240
And there are certainly tools for doing so.


00:03:09.240 --> 00:03:14.440
But what if you could write Python and make it as fast as C,


00:03:14.440 --> 00:03:15.560
almost?


00:03:15.560 --> 00:03:16.760
And that's what Cython is.


00:03:16.760 --> 00:03:18.560
And it's kind of like this inline bit,


00:03:18.560 --> 00:03:21.800
like this function or this module,


00:03:21.800 --> 00:03:28.720
I need to be in closer to C speed, farther from Python speed,


00:03:28.720 --> 00:03:32.120
especially in the math type of scenario.


00:03:32.120 --> 00:03:33.640
So that's what Cython is.


00:03:33.640 --> 00:03:37.600
It lets you write Python code that gets compiled to C


00:03:37.600 --> 00:03:42.160
and use very, very slight variations in the Python syntax.


00:03:42.160 --> 00:03:44.360
It used to be way different.


00:03:44.360 --> 00:03:49.360
you have to have your own types, and they were imported from Cython.


00:03:49.360 --> 00:03:57.360
So instead of having a traditional PyObject-derived integer type,


00:03:57.360 --> 00:04:00.860
you would actually have a Cython int, which was like a local int,


00:04:00.860 --> 00:04:03.360
and you would express that in different ways.


00:04:03.360 --> 00:04:08.860
And they've been moving towards what they call pure Python mode,


00:04:08.860 --> 00:04:11.740
where the code that you write for Cython


00:04:11.740 --> 00:04:14.780
is actually still valid Python


00:04:14.780 --> 00:04:16.300
if you wanted to just run it that way.


00:04:16.300 --> 00:04:18.380
And that's pretty cool, right?


00:04:18.380 --> 00:04:19.980
- Yeah.


00:04:19.980 --> 00:04:21.480
- That involves things like type in.


00:04:21.480 --> 00:04:23.660
So if you wanna say, oh, here's a thing that's an int,


00:04:23.660 --> 00:04:27.460
instead of importing some specialized int type from Cython,


00:04:27.460 --> 00:04:31.300
you would just say X colon int, and guess what?


00:04:31.300 --> 00:04:33.260
That's how it works in modern Python.


00:04:33.260 --> 00:04:37.220
So the news for this week is that Cython goes 3.0,


00:04:38.180 --> 00:04:42.880
And this news comes to us from, let's see.


00:04:42.880 --> 00:04:51.100
Oh no, I ran across this with other ones sent over.


00:04:51.100 --> 00:04:53.900
They're both new releases with lots of details, so sorry.


00:04:53.900 --> 00:04:56.100
Yeah, so anyway, this one, the headline here is


00:04:56.100 --> 00:04:58.260
that this is long in development.


00:04:58.260 --> 00:05:01.860
That's in like five years it's been working on this.


00:05:01.860 --> 00:05:05.500
And so it sheds legacy Python support.


00:05:05.500 --> 00:05:07.540
That is Python 2.


00:05:07.540 --> 00:05:10.860
Look, see that legacy Python people are starting


00:05:10.860 --> 00:05:11.900
to adopt our term.


00:05:11.900 --> 00:05:13.420
I don't know if we have anything to do with it,


00:05:13.420 --> 00:05:15.060
but we should have tried to popularize


00:05:15.060 --> 00:05:17.060
that view of Python too, didn't we?


00:05:17.060 --> 00:05:17.900
- Yep.


00:05:17.900 --> 00:05:21.860
- And it has a lot of boost for this pure Python mode


00:05:21.860 --> 00:05:23.040
that I talked about.


00:05:23.040 --> 00:05:27.300
So you might say, okay, well, that's interesting


00:05:27.300 --> 00:05:28.500
that you have this pure Python mode,


00:05:28.500 --> 00:05:30.020
but why would I really care?


00:05:30.020 --> 00:05:33.060
Because if the goal is to make it faster,


00:05:33.060 --> 00:05:34.860
I don't wanna run it in pure Python,


00:05:34.860 --> 00:05:37.380
I wanna run it in Cython.


00:05:37.380 --> 00:05:40.100
So compile it to C and then behind the scenes


00:05:40.100 --> 00:05:43.040
as part of your building of the wheel and all that.


00:05:43.040 --> 00:05:46.060
The reason you might wanna do that is


00:05:46.060 --> 00:05:49.580
what if you care about mypy or you care about rough


00:05:49.580 --> 00:05:53.140
or you care about black or all these other tools


00:05:53.140 --> 00:05:58.140
that are Python tooling to understand the Python code


00:05:58.140 --> 00:06:01.980
or even PyCharm or VS Code, right?


00:06:01.980 --> 00:06:04.540
You want it to look at that and be able to lint it


00:06:04.540 --> 00:06:06.960
and format it and understand it, right?


00:06:06.960 --> 00:06:09.840
So the pure Python mode allows you to do things


00:06:09.840 --> 00:06:12.240
like keep your linting tools, right?


00:06:12.240 --> 00:06:13.340
So.


00:06:13.340 --> 00:06:14.440
- Yeah, and also just,


00:06:14.440 --> 00:06:17.720
there's been discussions basically that


00:06:17.720 --> 00:06:22.080
if we had type hints when Cython started,


00:06:22.080 --> 00:06:23.720
they probably would have used them to start with


00:06:23.720 --> 00:06:25.640
instead of their own thing.


00:06:25.640 --> 00:06:27.240
- Yeah, yeah, they had no alternative.


00:06:27.240 --> 00:06:28.840
So they came up with something.


00:06:28.840 --> 00:06:31.040
It's just interesting that it kind of came,


00:06:31.040 --> 00:06:33.680
I mean, I guess it compiles to C.


00:06:33.680 --> 00:06:36.480
So it makes sense that it had like a really strong C flavor


00:06:36.480 --> 00:06:38.400
in the way that you wrote it.


00:06:38.400 --> 00:06:42.080
Yeah, so what else is notable here?


00:06:42.080 --> 00:06:46.400
Said there's major NumPy support improvements.


00:06:46.400 --> 00:06:48.360
So Cython's worked well with NumPy,


00:06:48.360 --> 00:06:50.840
but now with Cython 3,


00:06:50.840 --> 00:06:54.320
it gives you the ability to write NumPy Ufuncs.


00:06:54.320 --> 00:06:58.340
I don't do enough NumPy to know why I care about Ufuncs,


00:06:58.340 --> 00:07:01.040
but you can write them directly in Cython.


00:07:01.040 --> 00:07:04.600
So my understanding is basically that


00:07:04.600 --> 00:07:07.160
instead of going through the Python API


00:07:07.160 --> 00:07:09.440
and layer to work with NumPy,


00:07:09.440 --> 00:07:11.160
it drops down to the C layer.


00:07:11.160 --> 00:07:14.080
And so it's like C to C interoperability


00:07:14.080 --> 00:07:16.840
when you're doing NumPy within Cython.


00:07:16.840 --> 00:07:17.680
That's pretty cool.


00:07:17.680 --> 00:07:19.360
Another thing that's not mentioned in this article


00:07:19.360 --> 00:07:22.280
that I'm linking to on InfoWorld,


00:07:22.280 --> 00:07:23.880
that's really cool about NumPy,


00:07:23.880 --> 00:07:27.640
about Cython is you can remove the gil.


00:07:27.640 --> 00:07:30.140
You can go no gil.


00:07:30.140 --> 00:07:33.080
There's a context manager that's just called no gil.


00:07:33.080 --> 00:07:35.640
So I can say like, with this section,


00:07:35.640 --> 00:07:38.720
I'm gonna do a bunch of code and I don't want to,


00:07:38.720 --> 00:07:43.080
I wanna release the GIL for other parallel processing stuff.


00:07:43.080 --> 00:07:47.080
So if multiple bits of code call that into that function


00:07:47.080 --> 00:07:49.320
and they're being done within threads,


00:07:49.320 --> 00:07:54.320
they can run truly in parallel on hardware,


00:07:54.320 --> 00:07:55.920
like right on the cores, right?


00:07:55.920 --> 00:07:59.200
True OS thread parallelism, which is pretty excellent.


00:07:59.200 --> 00:08:04.200
Now, the limitation there is that you can't be working


00:08:04.200 --> 00:08:07.760
with directly with the Python API, right?


00:08:07.760 --> 00:08:09.400
Like say list or something,


00:08:09.400 --> 00:08:12.000
'cause those assume that they're thread safe


00:08:12.000 --> 00:08:13.960
because of the GIL, right?


00:08:13.960 --> 00:08:17.640
But if you're just doing like your own algorithm, right?


00:08:17.640 --> 00:08:19.180
Then you can, which is pretty cool.


00:08:19.180 --> 00:08:22.360
And yeah, that's pretty much it.


00:08:22.360 --> 00:08:24.880
So well done folks on that.


00:08:24.880 --> 00:08:27.420
It sounds like a ton of work, but yeah.


00:08:28.280 --> 00:08:31.760
If you are interested in Cython, check this out.


00:08:31.760 --> 00:08:34.440
- Cyril in the audience says Cython is great


00:08:34.440 --> 00:08:38.040
for waiting for HPy output.


00:08:38.040 --> 00:08:40.360
Nice.


00:08:40.360 --> 00:08:44.220
- All right, well that's number one.


00:08:44.220 --> 00:08:45.060
- Okay.


00:08:45.060 --> 00:08:46.620
- Which is actually number three.


00:08:46.620 --> 00:08:51.400
- Oh yeah, 'cause it's Cython three.


00:08:51.400 --> 00:08:52.240
- Exactly.


00:08:52.240 --> 00:08:56.000
- So I wanna talk about reading code.


00:08:56.000 --> 00:08:57.960
And I kind of agree.


00:08:57.960 --> 00:09:00.660
So this is an article by Eric Mathis


00:09:00.660 --> 00:09:04.840
and he's the dude that wrote "Python Crash Course"


00:09:04.840 --> 00:09:07.200
and it's on its third edition now.


00:09:07.200 --> 00:09:08.320
It's a pretty good book.


00:09:08.320 --> 00:09:10.960
Anyway, reading code, an important


00:09:10.960 --> 00:09:12.960
but seldom discussed skill.


00:09:12.960 --> 00:09:14.040
And I have to agree with that.


00:09:14.040 --> 00:09:19.040
I've had many discussions in the past about code,


00:09:19.040 --> 00:09:23.300
oh, standard coding standards within teams.


00:09:23.300 --> 00:09:26.660
And I try to have them be lightweight.


00:09:26.660 --> 00:09:29.160
It's better to just teach people how to read code.


00:09:29.160 --> 00:09:34.100
And so this, it's, I'm mostly bringing this up


00:09:34.100 --> 00:09:36.240
because I definitely agree that we need to talk


00:09:36.240 --> 00:09:39.200
about it more, especially when teaching people


00:09:39.200 --> 00:09:41.600
reading code and reading, like we often tell people


00:09:41.600 --> 00:09:44.040
go out and read the source code


00:09:44.040 --> 00:09:48.280
for some popular third party libraries or packages


00:09:48.280 --> 00:09:53.280
or even the internal Python standards.


00:09:53.280 --> 00:09:57.920
standard Python library, but, but it does take some skill to read code.


00:09:57.920 --> 00:10:00.040
So anyway this,


00:10:00.040 --> 00:10:04.880
he takes an example of a lottery example or something that doesn't really


00:10:04.880 --> 00:10:07.240
matter, but there's a few techniques,


00:10:07.240 --> 00:10:10.360
a couple of techniques that he lists that I really like. So there's a,


00:10:10.360 --> 00:10:14.160
if you just look at code, you've got a whole bunch of comments,


00:10:14.160 --> 00:10:16.120
you've got a whole bunch of stuff going on often.


00:10:16.120 --> 00:10:21.400
And one of the things he says to start with is ignore the function


00:10:21.400 --> 00:10:23.560
definitions, which is interesting because the function


00:10:23.560 --> 00:10:25.800
definition is where the name of the function is,


00:10:25.800 --> 00:10:28.440
but just sort of ignore that for now.


00:10:28.440 --> 00:10:31.760
And he doesn't say this, but in his example,


00:10:31.760 --> 00:10:33.720
he said, ignore all the comments.


00:10:33.720 --> 00:10:35.140
I mean, he took out all the comments


00:10:35.140 --> 00:10:36.600
in the function definition.


00:10:36.600 --> 00:10:39.100
And just so that you can just see the code


00:10:39.100 --> 00:10:40.640
and not everything else.


00:10:40.640 --> 00:10:44.640
And I actually, I had a code base once where I had,


00:10:44.640 --> 00:10:46.960
there were so many comments that I wrote a little script


00:10:46.960 --> 00:10:48.340
that would strip the comments out


00:10:48.340 --> 00:10:50.280
so that I could read the code better.


00:10:50.280 --> 00:10:57.360
Anyway, you can mentally do it when you get used to doing this


00:10:57.360 --> 00:10:59.040
and also IDEs help.


00:10:59.040 --> 00:11:01.720
But that's a great way to just sort of simplify


00:11:01.720 --> 00:11:03.960
what you're looking at so that you can mentally


00:11:03.960 --> 00:11:06.000
see what's going on.


00:11:06.000 --> 00:11:09.000
The second technique is to simplify repetitive blocks.


00:11:09.000 --> 00:11:11.200
Like in the example we're showing,


00:11:11.200 --> 00:11:13.960
there's a couple big print blocks.


00:11:13.960 --> 00:11:18.320
And his example says, mentally, you can just


00:11:18.320 --> 00:11:22.760
to blump this into print a message and that helps you.


00:11:22.760 --> 00:11:25.040
And then there's really not that much code left


00:11:25.040 --> 00:11:26.120
when you're looking at it.


00:11:26.120 --> 00:11:30.400
And so that, he talks about trying to make sense of it.


00:11:30.400 --> 00:11:32.400
I'm not gonna throw any,


00:11:32.400 --> 00:11:36.080
I'm not gonna discuss really what I think of the quality


00:11:36.080 --> 00:11:38.060
of the code he's showing, it's fine.


00:11:38.060 --> 00:11:44.220
But, and then the last thing or one of the next to the last


00:11:44.220 --> 00:11:48.240
is to talk about using an IDE.


00:11:48.240 --> 00:11:52.340
And so I do this a lot with many IDs.


00:11:52.340 --> 00:11:54.000
I think all of them now,


00:11:54.000 --> 00:11:59.000
you can like just instead of hiding the function definition,


00:11:59.000 --> 00:12:01.080
you can hide everything but the function definition


00:12:01.080 --> 00:12:03.440
on a lot of functions.


00:12:03.440 --> 00:12:06.160
And especially if you've got a whole bunch


00:12:06.160 --> 00:12:10.360
of helper functions that are cluttering up your workspace,


00:12:10.360 --> 00:12:12.200
or in weird places, you can just hide them


00:12:12.200 --> 00:12:13.720
so that you can see.


00:12:13.720 --> 00:12:16.360
So like in this example, we've got get winning ticket,


00:12:16.360 --> 00:12:18.380
check ticket and make random ticket.


00:12:18.380 --> 00:12:23.180
And then you kind of see a part of one of the functions,


00:12:23.180 --> 00:12:26.540
but maybe I also want to see like one other function.


00:12:26.540 --> 00:12:28.540
So especially if you're looking at two functions,


00:12:28.540 --> 00:12:30.040
you can hide the rest of them.


00:12:30.040 --> 00:12:30.920
It makes it nice.


00:12:30.920 --> 00:12:35.100
- Yeah, it just goes under the term of code folding.


00:12:35.100 --> 00:12:36.500
- Yeah, code folding, that's it.


00:12:36.500 --> 00:12:37.560
- Yeah.


00:12:37.560 --> 00:12:42.560
- But then off a great discussion of, think about this,


00:12:42.560 --> 00:12:45.240
think about that people are going to read your code


00:12:45.240 --> 00:12:46.240
and try to understand it.


00:12:46.240 --> 00:12:48.360
So think about that when you're writing code.


00:12:48.360 --> 00:12:51.240
So writing readable code.


00:12:51.240 --> 00:12:52.840
One of the things he didn't bring up


00:12:52.840 --> 00:12:54.900
that I wanna make sure about is,


00:12:54.900 --> 00:12:58.060
so this technique of like hiding the function definition,


00:12:58.060 --> 00:13:01.380
one of the things, one of the powerful things about this


00:13:01.380 --> 00:13:05.880
is because we have mentally, when we're reading code,


00:13:05.880 --> 00:13:07.160
at least when I am,


00:13:07.160 --> 00:13:09.480
and I think this applies to a lot of people,


00:13:09.480 --> 00:13:11.840
we believe the function name


00:13:11.840 --> 00:13:14.240
and we believe the variable name


00:13:14.240 --> 00:13:15.760
because somebody chose it.


00:13:15.760 --> 00:13:19.120
But so therefore it really needs to be accurate.


00:13:19.120 --> 00:13:22.880
It should be, it's hard to name functions and variables


00:13:22.880 --> 00:13:24.980
but sometimes they drift.


00:13:24.980 --> 00:13:29.200
Sometimes the, like it'll say like set name or something


00:13:29.200 --> 00:13:30.800
but it does a whole bunch of other stuff.


00:13:30.800 --> 00:13:33.040
So if it does a whole bunch of other stuff


00:13:33.040 --> 00:13:34.720
you're gonna have to change the name of the function


00:13:34.720 --> 00:13:39.140
because if the functions name is not accurate


00:13:39.140 --> 00:13:40.120
people are gonna fold it up


00:13:40.120 --> 00:13:41.760
and just assume that's what it does.


00:13:41.760 --> 00:13:46.000
So I would say, I would add to this,


00:13:46.000 --> 00:13:48.720
make sure your function and variable names are descriptive


00:13:48.720 --> 00:13:53.720
and change them when the body of the function changes.


00:13:53.720 --> 00:13:55.360
So. - Yeah.


00:13:55.360 --> 00:13:56.200
It's interesting.


00:13:56.200 --> 00:13:59.560
I just had Eric on Talk Python, which is not yet out.


00:13:59.560 --> 00:14:01.920
So, you know, time travel, podcasts.


00:14:01.920 --> 00:14:03.360
He was both there and is not there.


00:14:03.360 --> 00:14:06.400
It's sort of a, and Heisen, Eric sort of thing


00:14:06.400 --> 00:14:07.220
going on there.


00:14:07.220 --> 00:14:12.380
So a couple of thoughts on this.


00:14:12.380 --> 00:14:15.300
I think if-- it's kind of a big if,


00:14:15.300 --> 00:14:18.060
and the comments are hinting towards this in the live stream


00:14:18.060 --> 00:14:19.500
as well.


00:14:19.500 --> 00:14:23.480
If the naming is super good, I kind of


00:14:23.480 --> 00:14:25.880
prefer the second way, like collapse all the functions


00:14:25.880 --> 00:14:26.760
and then expand them.


00:14:26.760 --> 00:14:29.180
And you're like, that's not clear what this is doing.


00:14:29.180 --> 00:14:30.140
Let me dive into that.


00:14:30.140 --> 00:14:34.620
But print header, like, OK, well, we're


00:14:34.620 --> 00:14:37.060
going to assume that prints the header and just go on.


00:14:37.060 --> 00:14:41.540
or things like that, where it's pretty straightforward.


00:14:41.540 --> 00:14:44.140
There's not a lot of, I wonder what the algorithm does there.


00:14:44.140 --> 00:14:48.060
It's like, eh, not too much.


00:14:48.060 --> 00:14:49.860
So then I like to kind of fold it down.


00:14:49.860 --> 00:14:54.820
But I'm not sure that I would take away the function names.


00:14:54.820 --> 00:14:59.460
I guess it would be like a unique IDE plug-in,


00:14:59.460 --> 00:15:01.740
where you could say inline everything.


00:15:01.740 --> 00:15:05.060
And even if there's repetition, just inline it, and just like--


00:15:05.060 --> 00:15:07.380
and then work backwards as a way to understand.


00:15:07.380 --> 00:15:08.420
Don't do that in the main branch,


00:15:08.420 --> 00:15:10.900
but that'd be interesting to do.


00:15:10.900 --> 00:15:12.180
But kind of in the reverse,


00:15:12.180 --> 00:15:13.820
a lot of times what you'll end up with


00:15:13.820 --> 00:15:17.140
is a function that's like super long and poorly structured


00:15:17.140 --> 00:15:18.460
if you're trying to understand it.


00:15:18.460 --> 00:15:21.620
If just reading the function name doesn't work,


00:15:21.620 --> 00:15:24.380
it's usually 'cause it's a big glob of a mess, right?


00:15:24.380 --> 00:15:26.060
Not always, but often.


00:15:26.060 --> 00:15:28.620
And so the part where he says,


00:15:28.620 --> 00:15:30.840
comment out this, instead of having all the steps


00:15:30.840 --> 00:15:32.060
of like print the winning thing,


00:15:32.060 --> 00:15:33.800
and here's like the seven things it does,


00:15:33.800 --> 00:15:36.540
you just have a comment, print the winning thing.


00:15:36.540 --> 00:15:40.340
What I like to do for that is, as I'm trying to understand it,


00:15:40.340 --> 00:15:43.600
I'll grab that section and refactor to a function


00:15:43.600 --> 00:15:45.600
and say, "Print the winner."


00:15:45.600 --> 00:15:49.480
Grab the other part, refactor, print loser,


00:15:49.480 --> 00:15:52.220
or something along those lines.


00:15:52.220 --> 00:15:55.420
And it actually will start to have the same effect


00:15:55.420 --> 00:15:58.660
as replacing with a comment, but you end up with running code


00:15:58.660 --> 00:16:00.860
that is still understandable and consistent


00:16:00.860 --> 00:16:02.860
as you play with it.


00:16:02.860 --> 00:16:05.700
I'll go through something big and go, OK, this section,


00:16:05.700 --> 00:16:07.820
this should be its own little thing with a name.


00:16:07.820 --> 00:16:10.620
Hey, how about I make a function that has that name?


00:16:10.620 --> 00:16:13.180
And the IDE, just a highlight, right-click,


00:16:13.180 --> 00:16:17.840
Control-T or whatever, do it, and give it the name


00:16:17.840 --> 00:16:19.500
that you were going to make the comment.


00:16:19.500 --> 00:16:21.860
And that works a little bit better for me


00:16:21.860 --> 00:16:24.500
because it doesn't destroy the running code in case you're


00:16:24.500 --> 00:16:26.040
like, well, but now I need to run it


00:16:26.040 --> 00:16:29.100
to see what this other part does.


00:16:29.100 --> 00:16:30.220
>>Yeah.


00:16:30.220 --> 00:16:34.540
Yeah, another thing that I was thinking of other tips.


00:16:34.540 --> 00:16:38.620
When I so I learned to program mostly doing a lot of C code


00:16:38.620 --> 00:16:40.420
and in there you've got to.


00:16:40.420 --> 00:16:43.700
You've got to have if you're writing helper functions,


00:16:43.700 --> 00:16:46.140
they need to go ahead above the normal.


00:16:46.140 --> 00:16:49.620
The other function so that like because it's not declared


00:16:49.620 --> 00:16:52.220
when it has to be visible to the function,


00:16:52.220 --> 00:16:55.260
that's not true with Python and and so I've liked


00:16:55.260 --> 00:16:56.500
to have the reverse.


00:16:56.500 --> 00:16:59.660
So if I've like one of the suggestions I've heard


00:16:59.720 --> 00:17:03.240
suggestions is to break out if you've got a bunch of helper functions and it's


00:17:03.240 --> 00:17:07.000
confusing you to put them in another file. I don't actually like to do that


00:17:07.000 --> 00:17:12.440
especially if it's only one file using it. I'd rather put it put them below the


00:17:12.440 --> 00:17:19.880
the function that they're helping and especially if there's just a couple main


00:17:19.880 --> 00:17:24.280
functions that are used in this module that are the that are used externally


00:17:24.280 --> 00:17:27.440
but those I'd like to put those at the top and then all the helpers at the


00:17:27.440 --> 00:17:29.440
bottom or something like that.


00:17:29.440 --> 00:17:30.280
- Yeah.


00:17:30.280 --> 00:17:35.080
- I used to have a coding style to do the reverse.


00:17:35.080 --> 00:17:38.740
And I think it was inherited from C code style,


00:17:38.740 --> 00:17:40.900
but Python's different.


00:17:40.900 --> 00:17:45.880
And I don't necessarily, I guess,


00:17:45.880 --> 00:17:49.620
I'm not sure what I feel about the hiding the function name,


00:17:49.620 --> 00:17:53.000
but I guess maybe don't trust the function name.


00:17:53.000 --> 00:17:53.960
- Yeah.


00:17:53.960 --> 00:17:55.560
- Verify.


00:17:55.560 --> 00:17:57.400
- Yeah, there's a couple of comments like that.


00:17:57.400 --> 00:17:59.440
David Poole says, a quote I once read is,


00:17:59.440 --> 00:18:01.840
"If the code and comments disagree, both are wrong."


00:18:01.840 --> 00:18:03.960
It's kind of similar to the function names,


00:18:03.960 --> 00:18:05.840
as well as given sufficient time,


00:18:05.840 --> 00:18:08.920
the code and the comments, maybe function names as well,


00:18:08.920 --> 00:18:11.960
will start to lie, which is interesting.


00:18:11.960 --> 00:18:14.080
- I also see that people are more reluctant


00:18:14.080 --> 00:18:15.680
to change somebody else's comment


00:18:15.680 --> 00:18:17.440
than they are to change their code.


00:18:17.440 --> 00:18:20.280
And I'm like, you gotta get over that.


00:18:20.280 --> 00:18:22.840
If the comment's wrong, feel free to change it.


00:18:22.840 --> 00:18:25.360
That's a perfectly fine refactoring.


00:18:25.360 --> 00:18:27.640
So anyway, let's move to the next.


00:18:27.640 --> 00:18:28.560
>> Yeah, absolutely.


00:18:28.560 --> 00:18:30.680
I totally agree with you about putting the most,


00:18:30.680 --> 00:18:32.800
sort of the organizing, coordinating,


00:18:32.800 --> 00:18:34.240
high-level stuff first.


00:18:34.240 --> 00:18:37.880
You know, maybe what would be in the dunder,


00:18:37.880 --> 00:18:40.880
the if name, dunder name equals dunder main,


00:18:40.880 --> 00:18:43.360
whatever that is, make that a function and put it at the top.


00:18:43.360 --> 00:18:45.680
I totally agree that that's the way to go.


00:18:45.680 --> 00:18:47.160
>> Yeah. Cool.


00:18:47.160 --> 00:18:50.000
>> All right. Next, how about another release?


00:18:50.000 --> 00:18:54.720
This time, something very small with lots of effort.


00:18:54.720 --> 00:18:56.480
So this is the one that I was thinking


00:18:56.480 --> 00:19:00.760
comes from Matt Trentini.


00:19:00.760 --> 00:19:02.040
And let me pull it up


00:19:02.040 --> 00:19:04.280
'cause it has some good stats in it.


00:19:04.280 --> 00:19:05.680
It says, "After 10 months,


00:19:05.680 --> 00:19:09.280
"a thousand mainline commits and over 100 contributors,


00:19:09.280 --> 00:19:12.320
"we have a new version of MicroPython."


00:19:12.320 --> 00:19:15.240
So thank you, Matt, for sending that in to us.


00:19:15.240 --> 00:19:18.120
That's a pretty big release, 100 contributors.


00:19:18.120 --> 00:19:21.800
And so the reason I brought that up


00:19:21.800 --> 00:19:24.480
is that the GitHub announcement for the release


00:19:24.480 --> 00:19:27.080
doesn't point out how big of a release this was,


00:19:27.080 --> 00:19:29.280
like almost a year's worth of work.


00:19:29.280 --> 00:19:33.200
So, MicroPython, the one that runs on embedded devices,


00:19:33.200 --> 00:19:38.200
not phones, but incredibly small and cheap devices,


00:19:38.200 --> 00:19:40.080
you know, like five, $10 chips.


00:19:40.080 --> 00:19:40.920
- Yeah.


00:19:40.920 --> 00:19:42.040
- It's awesome.


00:19:42.040 --> 00:19:44.520
It's awesome that you can run Python there, right?


00:19:44.520 --> 00:19:49.520
And so, MicroPython and CircuitPython are similar projects,


00:19:49.520 --> 00:19:52.480
one forked from the other, I believe,


00:19:52.480 --> 00:19:55.840
They've deviated a little bit, CircuitPython being more


00:19:55.840 --> 00:19:59.760
beginner educational friendly, MicroPython being more


00:19:59.760 --> 00:20:04.280
production device, creating devices to do actual jobs


00:20:04.280 --> 00:20:06.520
type of friendly.


00:20:06.520 --> 00:20:08.320
But I think they're working a lot together.


00:20:08.320 --> 00:20:09.760
There's been a lot of merging back.


00:20:09.760 --> 00:20:11.120
So that's pretty cool.


00:20:11.120 --> 00:20:14.880
So this release of MicroPython introduces a lightweight


00:20:14.880 --> 00:20:17.040
package manager called MIP.


00:20:17.040 --> 00:20:18.680
Instead of PIP, you've got MIP.


00:20:21.320 --> 00:20:24.520
It uses a custom protocol to query and install packages


00:20:24.520 --> 00:20:26.520
that's optimized for embedded systems.


00:20:26.520 --> 00:20:27.560
So that's pretty cool.


00:20:27.560 --> 00:20:31.440
It's easier to get packages involved.


00:20:31.440 --> 00:20:33.280
Like if you've done MicroPython stuff before,


00:20:33.280 --> 00:20:36.480
it's not as easy as just pip install this thing.


00:20:36.480 --> 00:20:38.560
It's a little bit trickier than that.


00:20:38.560 --> 00:20:44.040
Also, the core runtime and built-in types


00:20:44.040 --> 00:20:49.040
have been compressed to only including C-level type structs


00:20:49.680 --> 00:20:51.880
for as much as possible.


00:20:51.880 --> 00:20:53.920
So that's shrunken the size of it.


00:20:53.920 --> 00:20:58.560
Not by a lot, but it's so small that, you know,


00:20:58.560 --> 00:21:02.160
losing kilobytes actually makes a difference,


00:21:02.160 --> 00:21:04.240
which is a pretty interesting way to think about it


00:21:04.240 --> 00:21:06.320
'cause we don't worry about the size varying


00:21:06.320 --> 00:21:08.200
by kilobytes in CPython.


00:21:08.200 --> 00:21:12.300
- Right.


00:21:12.300 --> 00:21:15.120
- Then there's a bunch of small changes


00:21:15.120 --> 00:21:18.680
like Bluetooth low energy changes, SSL settings.


00:21:18.680 --> 00:21:21.180
By the way, SSL is way harder over there


00:21:21.180 --> 00:21:23.320
than you would imagine it would be.


00:21:23.320 --> 00:21:26.160
There's a bunch of different ports, like the ESP32


00:21:26.160 --> 00:21:28.000
is the one that I've worked with.


00:21:28.000 --> 00:21:33.240
And so for each of the different ports that it goes through,


00:21:33.240 --> 00:21:36.760
there's sort of a summary of how has it changed for that one.


00:21:36.760 --> 00:21:40.200
And I'd also like to just remind people,


00:21:40.200 --> 00:21:42.160
while this is awesome for embedded devices,


00:21:42.160 --> 00:21:47.320
you might think, ah, I don't do small chip programming,


00:21:47.320 --> 00:21:49.000
So it doesn't matter to me.


00:21:49.000 --> 00:21:53.080
You also might be interested in PyScript, right?


00:21:53.080 --> 00:21:55.720
And so one of the things that they're trying to do


00:21:55.720 --> 00:21:59.880
is work to get MicroPython to be one


00:21:59.880 --> 00:22:02.800
of the possible foundations, the runtimes


00:22:02.800 --> 00:22:07.120
and WebAssembly for PyScript.


00:22:07.120 --> 00:22:12.040
And when this thing is 100K or 75K, whatever it is,


00:22:12.040 --> 00:22:16.040
all of a sudden, you can run PyScript in the browser


00:22:16.040 --> 00:22:18.180
nearly on par with JavaScript.


00:22:18.180 --> 00:22:24.300
Traditional PyScript used the full CPython,


00:22:24.300 --> 00:22:26.980
at least as much as you can get into WebAssembly,


00:22:26.980 --> 00:22:29.100
which has meant a 10 meg download


00:22:29.100 --> 00:22:30.040
and then in the browser,


00:22:30.040 --> 00:22:32.500
I had to parse and start up that whole thing.


00:22:32.500 --> 00:22:35.100
If that goes to MicroPython,


00:22:35.100 --> 00:22:38.260
that becomes incredibly fast to download 75K.


00:22:38.260 --> 00:22:41.020
That's like JavaScript size.


00:22:41.020 --> 00:22:44.540
So all these changes are not just like,


00:22:44.540 --> 00:22:48.340
I don't do this embedded device programming,


00:22:48.340 --> 00:22:49.600
so it's not for me.


00:22:49.600 --> 00:22:52.040
It may well be for all of us soon,


00:22:52.040 --> 00:22:54.640
instead of JavaScript, which is very exciting.


00:22:54.640 --> 00:22:57.200
So there are many changes, like,


00:22:57.200 --> 00:22:58.520
Ryan, see the scroll bar size


00:22:58.520 --> 00:23:00.720
as I'm going through this list?


00:23:00.720 --> 00:23:02.800
I am not gonna go through them, but if you care,


00:23:02.800 --> 00:23:03.640
I just wanna point out,


00:23:03.640 --> 00:23:06.000
like, there's a massive new release of MicroPython.


00:23:06.000 --> 00:23:08.820
You can go and see what's changed for the different ports,


00:23:08.820 --> 00:23:11.960
and then in the core, right, like, there's just,


00:23:12.860 --> 00:23:15.180
I don't know how many pages that is,


00:23:15.180 --> 00:23:16.500
but it's many, many, many pages.


00:23:16.500 --> 00:23:19.060
So check out the linked release notes


00:23:19.060 --> 00:23:20.140
from the MicroPython team.


00:23:20.140 --> 00:23:23.580
Congrats to them as well, Damian, George, and others.


00:23:23.580 --> 00:23:25.460
- Yeah, this is really cool.


00:23:25.460 --> 00:23:27.740
I love to see that basically also


00:23:27.740 --> 00:23:30.100
that the project is continuing


00:23:30.100 --> 00:23:35.100
and we all benefit from Python-enabled devices and stuff


00:23:35.100 --> 00:23:37.820
and people can invent new things better.


00:23:37.820 --> 00:23:42.500
And yeah, the internet of things being in Python


00:23:42.500 --> 00:23:44.840
is better than having a different language.


00:23:44.840 --> 00:23:46.020
- Absolutely.


00:23:46.020 --> 00:23:47.540
Also, just wanna, you know,


00:23:47.540 --> 00:23:50.860
sort of a time travel sort of thing as well.


00:23:50.860 --> 00:23:53.100
I think Matt sent this over quite a while ago


00:23:53.100 --> 00:23:54.580
and it's been sort of on our list.


00:23:54.580 --> 00:23:56.460
I finally pulled it off our list and made it a topic.


00:23:56.460 --> 00:23:58.100
So this is from end of April.


00:23:58.100 --> 00:24:01.540
It's a couple months old, but still, you know,


00:24:01.540 --> 00:24:03.580
almost a year's worth of work is worth celebrating,


00:24:03.580 --> 00:24:05.980
even if it's, you know, a couple months later.


00:24:05.980 --> 00:24:09.020
- Yeah, pretty cool.


00:24:10.540 --> 00:24:14.460
- All right, ready for our last topic?


00:24:14.460 --> 00:24:16.420
- Yeah, bring it on.


00:24:16.420 --> 00:24:20.300
- I wanted to just, so I'm, I don't,


00:24:20.300 --> 00:24:22.980
I shouldn't even qualify this.


00:24:22.980 --> 00:24:25.620
I was gonna say I'm not a sucker for listicles,


00:24:25.620 --> 00:24:27.260
but I kinda am.


00:24:27.260 --> 00:24:29.700
So this is an article called


00:24:29.700 --> 00:24:31.960
Advanced Python Tips for Development.


00:24:31.960 --> 00:24:33.040
But when I was reading it,


00:24:33.040 --> 00:24:36.500
so this is by Schofield-Iden, Idenhen.


00:24:36.500 --> 00:24:39.940
And when I was reading it, there's 15 tips,


00:24:39.940 --> 00:24:42.180
And some of them don't really seem that advanced.


00:24:42.180 --> 00:24:44.580
Like the top one, use list comprehensions.


00:24:44.580 --> 00:24:46.820
Okay, you should do that.


00:24:46.820 --> 00:24:48.500
But there's a few that I wanted to point out


00:24:48.500 --> 00:24:49.380
that I thought were,


00:24:49.380 --> 00:24:53.140
that I just wanted reminders of to use it more often.


00:24:53.140 --> 00:24:56.020
So list comprehensions are awesome.


00:24:56.020 --> 00:25:00.840
And I kind of forget that they aren't obvious to people now


00:25:00.840 --> 00:25:02.220
because I've been using them for so long.


00:25:02.220 --> 00:25:03.500
So they're great.


00:25:03.500 --> 00:25:05.300
But one of the things, the next step,


00:25:05.300 --> 00:25:08.400
so tip one is use list comprehensions.


00:25:08.400 --> 00:25:11.480
Tip two is leverage generator expressions


00:25:11.480 --> 00:25:13.120
for memory efficiency.


00:25:13.120 --> 00:25:15.940
And I don't use generator expressions enough,


00:25:15.940 --> 00:25:16.880
and I think I should.


00:25:16.880 --> 00:25:19.160
And one of the cool things about this article


00:25:19.160 --> 00:25:21.200
is it shows side by side,


00:25:21.200 --> 00:25:24.040
a list comprehension and a generator expression.


00:25:24.040 --> 00:25:25.880
And they look identical,


00:25:25.880 --> 00:25:30.320
except for there's brackets versus parentheses.


00:25:30.320 --> 00:25:32.680
So parentheses, yeah, parens.


00:25:32.680 --> 00:25:37.440
And I kind of forget about generator expressions.


00:25:37.440 --> 00:25:40.440
So generator expressions, are list comprehensions


00:25:40.440 --> 00:25:41.820
not generators?


00:25:41.820 --> 00:25:43.480
I thought they were.


00:25:43.480 --> 00:25:45.240
- No, no.


00:25:45.240 --> 00:25:48.360
Well, one, the list comprehension executes it


00:25:48.360 --> 00:25:49.920
all into memory.


00:25:49.920 --> 00:25:52.360
And then the generator one, you have to start,


00:25:52.360 --> 00:25:55.000
you know, iterating through it to create it,


00:25:55.000 --> 00:25:58.720
which it's cool that they're so similar,


00:25:58.720 --> 00:26:01.800
but I'm sure it's caused unknown,


00:26:01.800 --> 00:26:06.800
untold amounts of challenges for people to go,


00:26:06.800 --> 00:26:09.240
They look the same.


00:26:09.240 --> 00:26:10.080
You can do both.


00:26:10.080 --> 00:26:12.640
It doesn't seem to matter until it really matters.


00:26:12.640 --> 00:26:13.480
You know?


00:26:13.480 --> 00:26:14.320
- Yeah.


00:26:14.320 --> 00:26:16.960
And also it's not, I mean,


00:26:16.960 --> 00:26:19.620
you can, when you get used to list comprehensions,


00:26:19.620 --> 00:26:23.560
generate expressions kind of looks like a tuple expression.


00:26:23.560 --> 00:26:24.520
- Yeah.


00:26:24.520 --> 00:26:26.160
Well, and then you put curly braces on it


00:26:26.160 --> 00:26:28.760
and it becomes a set comprehension.


00:26:28.760 --> 00:26:29.840
- Yeah.


00:26:29.840 --> 00:26:31.440
The grant reminded us that.


00:26:31.440 --> 00:26:33.320
Don't forget set comprehensions.


00:26:33.320 --> 00:26:34.840
- Yeah, yeah, yeah.


00:26:34.840 --> 00:26:35.680
- Okay.


00:26:35.680 --> 00:26:36.720
So let's hop down.


00:26:36.720 --> 00:26:40.000
The enumerate function, this is just take advantage


00:26:40.000 --> 00:26:41.320
of the enumerate function.


00:26:41.320 --> 00:26:43.820
This is just remember to teach people that are coming


00:26:43.820 --> 00:26:48.820
from C or other for I equals one to 10 sort of languages


00:26:48.820 --> 00:26:50.420
that enumerates around.


00:26:50.420 --> 00:26:53.680
So if you need the index also use enumerate,


00:26:53.680 --> 00:26:56.880
don't be a dork and get the length of a list.


00:26:56.880 --> 00:26:58.160
- Counter equals one.


00:26:58.160 --> 00:26:59.920
- For I equals one to length of list.


00:26:59.920 --> 00:27:00.760
- Yeah, yeah.


00:27:00.760 --> 00:27:01.640
- Don't do that.


00:27:01.640 --> 00:27:05.680
Also enumerate can, if you need it to be a,


00:27:05.680 --> 00:27:08.480
So enumerate does zero through whatever.


00:27:08.480 --> 00:27:10.600
If you need it to be one through whatever,


00:27:10.600 --> 00:27:13.440
you can give it a start.


00:27:13.440 --> 00:27:15.280
Enumerate takes a starting point,


00:27:15.280 --> 00:27:17.520
so you can make it start at one if you need it.


00:27:17.520 --> 00:27:19.400
- Right, if you're working with indexes,


00:27:19.400 --> 00:27:21.680
the default is good, but if you're trying to print


00:27:21.680 --> 00:27:23.120
thing one, thing two, thing three,


00:27:23.120 --> 00:27:25.320
then start equals one is the way to go,


00:27:25.320 --> 00:27:27.080
instead of index plus one. - Yeah, or if you're using it


00:27:27.080 --> 00:27:29.560
to get into some other data structure or something.


00:27:29.560 --> 00:27:33.080
Anyway, I'm gonna hop down to,


00:27:33.080 --> 00:27:36.100
So that's true, hop down to five,


00:27:36.100 --> 00:27:37.500
which is the zip function.


00:27:37.500 --> 00:27:42.460
And I just, so zip is great for parallel iterating


00:27:42.460 --> 00:27:44.180
through parallel lists.


00:27:44.180 --> 00:27:46.020
And you can do more than,


00:27:46.020 --> 00:27:49.580
this is showing name and age as two different lists


00:27:49.580 --> 00:27:51.300
and going through them.


00:27:51.300 --> 00:27:55.460
My tip is just practice this several times


00:27:55.460 --> 00:27:58.340
and unfrequently if you need it,


00:27:58.340 --> 00:28:02.340
because this was a hard one to pound into my brain


00:28:02.340 --> 00:28:06.840
is to remember how zip works because it's not that confusing


00:28:06.840 --> 00:28:08.580
but it's tripped me up for some reason.


00:28:08.580 --> 00:28:11.580
And it's not, so you'll take several lists


00:28:11.580 --> 00:28:14.180
and it just makes, if you zip them,


00:28:14.180 --> 00:28:16.260
you end up with a, what is it?


00:28:16.260 --> 00:28:18.460
A list of tuples or some sort of iterable,


00:28:18.460 --> 00:28:19.820
I don't know if it's an actual list,


00:28:19.820 --> 00:28:23.200
in the iterable of tuples that you can pull out


00:28:23.200 --> 00:28:24.740
different parts of it or something.


00:28:24.740 --> 00:28:27.100
And then you can, in this example,


00:28:27.100 --> 00:28:28.940
it says for name/age,


00:28:28.940 --> 00:28:31.400
so that's unpacking it after you get it.


00:28:31.400 --> 00:28:34.360
And it works great, I just always forget to use it.


00:28:34.360 --> 00:28:35.960
So a good reminder.


00:28:35.960 --> 00:28:39.680
And then I'm now I'm gonna jump down to my 12,


00:28:39.680 --> 00:28:43.200
one of the things 12, but eight is kind of funny


00:28:43.200 --> 00:28:45.920
'cause it's a formatting problem, but anyway,


00:28:45.920 --> 00:28:47.520
use counters, counters are good.


00:28:47.520 --> 00:28:51.840
12 is, what is 12?


00:28:51.840 --> 00:28:56.720
Oh, one of the things, 11 is decorate, use decorate,


00:28:56.720 --> 00:28:59.680
decorate functions with static method and class method.


00:28:59.680 --> 00:29:02.240
I just hardly ever do this.


00:29:02.240 --> 00:29:06.560
Do you use static method or class method that much, Michael?


00:29:06.560 --> 00:29:09.560
- Yeah, quite a bit actually.


00:29:09.560 --> 00:29:10.680
- Oh really, okay.


00:29:10.680 --> 00:29:11.520
- Yeah.


00:29:11.520 --> 00:29:16.280
- And I guess one of the neat things,


00:29:16.280 --> 00:29:18.400
yeah, anyway, I just don't use it much.


00:29:18.400 --> 00:29:22.680
Maybe I'll try to explore where I can use it more often.


00:29:22.680 --> 00:29:26.580
The number 12 is use slots to reduce memory usage.


00:29:26.580 --> 00:29:29.360
And I kind of forget to do this too.


00:29:29.360 --> 00:29:33.280
So this is a good reminder to use slots when you're--


00:29:33.280 --> 00:29:39.320
and this is great, especially if you know ahead of time what--


00:29:39.320 --> 00:29:43.560
your classes aren't going to add new data as it goes on.


00:29:43.560 --> 00:29:44.520
Or it's not going to be--


00:29:44.520 --> 00:29:47.320
>>That could be dynamically generating new fields.


00:29:47.320 --> 00:29:51.160
>>And I guess here, I just use the adders.


00:29:51.160 --> 00:29:55.280
So anyway.


00:29:55.280 --> 00:29:58.560
>>Yeah, it's worth pointing out that slots don't just


00:29:58.560 --> 00:30:02.520
reduced memory, they also make attribute access faster.


00:30:02.520 --> 00:30:05.760
So like thing dot field,


00:30:05.760 --> 00:30:10.760
getting and setting that value is also faster with slots.


00:30:10.760 --> 00:30:12.280
- Okay.


00:30:12.280 --> 00:30:14.800
Yeah, that is, it's good to remember.


00:30:14.800 --> 00:30:17.220
Anyway, some fun tips.


00:30:17.220 --> 00:30:21.480
14, use pytest.


00:30:21.480 --> 00:30:23.320
It says use unit test or pytest.


00:30:23.320 --> 00:30:25.480
Ignore the first part, use pytest.


00:30:26.800 --> 00:30:28.320
And-- - There's a typo there,


00:30:28.320 --> 00:30:29.280
is that what you're saying?


00:30:29.280 --> 00:30:30.120
- There's some typos.


00:30:30.120 --> 00:30:33.240
So use unit test or take out the unit test or,


00:30:33.240 --> 00:30:35.040
and also it says for unit testing,


00:30:35.040 --> 00:30:36.800
just automated testing,


00:30:36.800 --> 00:30:38.680
just for all your automated testing,


00:30:38.680 --> 00:30:40.640
not just unit testing.


00:30:40.640 --> 00:30:41.480
- Yeah.


00:30:41.480 --> 00:30:45.560
- Well, those are our topics.


00:30:45.560 --> 00:30:49.640
Do you wanna talk about some extras, Michael?


00:30:49.640 --> 00:30:50.720
- I do have some.


00:30:50.720 --> 00:30:53.600
So I feel like, Brian, it's not time for a joke yet,


00:30:53.600 --> 00:30:55.360
but there's a pretty good joke on that page


00:30:55.360 --> 00:30:57.200
we might have to come back to.


00:30:57.200 --> 00:30:59.300
- Well, do you want to just explore it now?


00:30:59.300 --> 00:31:01.840
- No, not yet, not yet.


00:31:01.840 --> 00:31:02.760
- We can do it later.


00:31:02.760 --> 00:31:03.600
Okay.


00:31:03.600 --> 00:31:04.420
- Let's do it later.


00:31:04.420 --> 00:31:05.260
All right.


00:31:05.260 --> 00:31:08.880
So, you know, people have different faces, Brian.


00:31:08.880 --> 00:31:12.480
You know, sometimes you got your sort of like neutral face.


00:31:12.480 --> 00:31:15.080
You got your happy face, you got your sad face.


00:31:15.080 --> 00:31:16.480
How about your hugging face?


00:31:16.480 --> 00:31:19.760
What's your hugging face look like?


00:31:19.760 --> 00:31:24.760
So there's this project created by Augustine.


00:31:24.800 --> 00:31:28.040
I pull it up here, the source code's linked at the bottom,


00:31:28.040 --> 00:31:32.400
by Agustin Pekeres, or Agus, as his friends call him,


00:31:32.400 --> 00:31:34.640
sent in, "Hey, I was looking to play


00:31:34.640 --> 00:31:36.400
"with the Hugging Face API."


00:31:36.400 --> 00:31:38.520
And so I'm like, "Well, what could I work with?


00:31:38.520 --> 00:31:42.380
"What if I turn a large language model


00:31:42.380 --> 00:31:45.420
"or semantic search loose on Talk Python to me


00:31:45.420 --> 00:31:46.640
"in their transcripts?"


00:31:46.640 --> 00:31:47.880
That's cool, huh?


00:31:47.880 --> 00:31:48.700
- Yeah.


00:31:48.700 --> 00:31:51.760
- So he created this project,


00:31:51.760 --> 00:31:55.120
you got to go and get a free Hugging Face API token


00:31:55.120 --> 00:31:56.640
because it uses Hugging Face.


00:31:56.640 --> 00:31:57.680
I was joking around.


00:31:57.680 --> 00:31:59.320
But this says you can ask a question.


00:31:59.320 --> 00:32:01.880
For example, what's my advanced options?


00:32:01.880 --> 00:32:04.320
I can see how many things I could get back.


00:32:04.320 --> 00:32:06.560
Let's make that 10.


00:32:06.560 --> 00:32:07.560
Keep it focused, folks.


00:32:07.560 --> 00:32:08.880
Come on.


00:32:08.880 --> 00:32:13.960
So you can go things and say, who uses


00:32:13.960 --> 00:32:17.920
MicroPython in production, for example.


00:32:17.920 --> 00:32:19.480
I can type that into the search field,


00:32:19.480 --> 00:32:21.600
and I can say submit.


00:32:21.600 --> 00:32:23.480
And sometimes it takes a second,


00:32:23.480 --> 00:32:24.640
sometimes it's pretty quick.


00:32:24.640 --> 00:32:26.040
We're gonna see what we get.


00:32:26.040 --> 00:32:30.380
As a little running character,


00:32:30.380 --> 00:32:32.280
although they can't choose their sport.


00:32:32.280 --> 00:32:34.120
It's like rowing and then swimming


00:32:34.120 --> 00:32:36.040
and then it's running and then it's biking.


00:32:36.040 --> 00:32:36.880
That's what they're like on,


00:32:36.880 --> 00:32:37.700
here we go. - What's a,


00:32:37.700 --> 00:32:39.400
it's like a decathlon.


00:32:39.400 --> 00:32:41.080
- I guess you're right.


00:32:41.080 --> 00:32:42.680
And so here comes the answer back.


00:32:42.680 --> 00:32:43.920
It says over on Talk Python,


00:32:43.920 --> 00:32:46.960
you should check out PyScript powered by MicroPython.


00:32:46.960 --> 00:32:49.320
And MicroPython plus CircuitPython,


00:32:49.320 --> 00:32:51.000
you might be thinking, well, it's just searching titles,


00:32:51.000 --> 00:32:54.080
but then empowering developers by embedding Python


00:32:54.080 --> 00:32:57.720
by Nina Zacharenko, and then this weird one by Brian


00:32:57.720 --> 00:33:00.320
called 30 Amazing Python Projects and so on,


00:33:00.320 --> 00:33:01.560
or even the year in review.


00:33:01.560 --> 00:33:02.520
Isn't that cool?


00:33:02.520 --> 00:33:03.360
- That is neat.


00:33:03.360 --> 00:33:06.800
- So if you wanna play with this stuff,


00:33:06.800 --> 00:33:08.600
either because you wanna build a thing like this


00:33:08.600 --> 00:33:10.920
for something else, or you wanna just go


00:33:10.920 --> 00:33:12.840
like ask questions about DocPython,


00:33:12.840 --> 00:33:15.760
you can go and check out this app.


00:33:15.760 --> 00:33:18.360
The source code is linked at the bottom.


00:33:18.360 --> 00:33:23.000
- I guess another comment that maybe it's a good idea


00:33:23.000 --> 00:33:26.340
to have some transcripts for people to be able


00:33:26.340 --> 00:33:28.380
to use as search.


00:33:28.380 --> 00:33:29.340
- Yeah, exactly.


00:33:29.340 --> 00:33:32.040
We didn't have transcripts.


00:33:32.040 --> 00:33:34.160
We wouldn't be able to do this cool project, right?


00:33:34.160 --> 00:33:36.200
So yeah, excellent.


00:33:36.200 --> 00:33:37.580
So that's one.


00:33:37.580 --> 00:33:39.920
And yeah, that's it for me for my extras.


00:33:39.920 --> 00:33:41.040
You got any?


00:33:41.040 --> 00:33:44.640
- Yeah, one, I just wanted to, I guess,


00:33:44.640 --> 00:33:47.120
remind people that Python people is a thing.


00:33:47.120 --> 00:33:51.800
Python people is a new podcast and episode three is out with the Brett Cannon.


00:33:51.800 --> 00:33:54.440
And the, one of the comments,


00:33:54.440 --> 00:33:57.920
I one of the quotes from him is I came for the language,


00:33:57.920 --> 00:34:01.720
but I stayed for the community. We explore that. And,


00:34:01.720 --> 00:34:05.700
what was the situation when he, when he talked about that? And,


00:34:05.700 --> 00:34:09.120
and we talked about a whole bunch of stuff like what is the meaning of back


00:34:09.120 --> 00:34:13.960
baking and to, things like that. So check it out.


00:34:14.460 --> 00:34:17.420
Then, oh, nice.


00:34:17.420 --> 00:34:20.740
I'd forgotten to, for people listening,


00:34:20.740 --> 00:34:25.220
I had forgotten to actually show the episode on the--


00:34:25.220 --> 00:34:27.500
- I could go back and search stock Python again for this


00:34:27.500 --> 00:34:28.780
and see if we find Python people.


00:34:28.780 --> 00:34:30.620
You would find a ton of Brett Cannon over there


00:34:30.620 --> 00:34:33.500
and we have an episode for him coming up very soon.


00:34:33.500 --> 00:34:37.020
But, let's switch it over to yours.


00:34:37.020 --> 00:34:41.860
- Next, I didn't, there's a, oh, that's the wrong thing.


00:34:41.860 --> 00:34:42.700
Oh.


00:34:42.700 --> 00:34:47.700
Oh, I deleted the thing I wanted to talk about.


00:34:47.700 --> 00:34:50.960
So I guess that's it from Extras for me.


00:34:50.960 --> 00:34:53.660
- It's gone from the internet.


00:34:53.660 --> 00:34:55.060
- It is gone.


00:34:55.060 --> 00:34:56.500
So.


00:34:56.500 --> 00:34:59.260
- I have a joke for us.


00:34:59.260 --> 00:35:00.100
- Okay.


00:35:00.100 --> 00:35:03.460
Well, let's, before we can do the joke,


00:35:03.460 --> 00:35:05.220
we didn't do any sponsors.


00:35:05.220 --> 00:35:07.460
One of the sponsors of course is Python People,


00:35:07.460 --> 00:35:10.420
or it's us, but I'd like people to check it out.


00:35:10.420 --> 00:35:12.940
We have like maybe three listeners so far.


00:35:12.940 --> 00:35:15.840
No, it's bigger than that, but I'd like it to grow.


00:35:15.840 --> 00:35:21.200
I also wanted to give a shout out to everybody on Patreon.


00:35:21.200 --> 00:35:26.120
So if you go to any of Python Bytes pages,


00:35:26.120 --> 00:35:28.000
especially ones without any advertising,


00:35:28.000 --> 00:35:30.420
like today's or episode 343,


00:35:30.420 --> 00:35:35.060
you can see Become a Patreon and you can click on it


00:35:35.060 --> 00:35:39.140
and become a member and help support the show for a buck.


00:35:39.140 --> 00:35:40.260
That's great.


00:35:40.260 --> 00:35:41.460
I also wanted to give a shout out


00:35:41.460 --> 00:35:44.180
to all of the amazing courses at Talk Python Training.


00:35:44.180 --> 00:35:45.540
Michael has done a great job,


00:35:45.540 --> 00:35:49.980
plus pulling in amazing other people to teach courses,


00:35:49.980 --> 00:35:52.900
like me, at Talk Python Training.


00:35:52.900 --> 00:35:55.300
There's some great stuff, so check it out.


00:35:55.300 --> 00:35:56.860
- Thanks, Brian.


00:35:56.860 --> 00:35:59.980
Yeah, I got some new courses coming


00:35:59.980 --> 00:36:01.940
from some really awesome people.


00:36:01.940 --> 00:36:03.340
All right, onto the joke.


00:36:03.340 --> 00:36:05.140
Onto the joke.


00:36:06.020 --> 00:36:11.020
So this one is a meme somebody put together.


00:36:11.020 --> 00:36:12.920
Through, I have two jokes here


00:36:12.920 --> 00:36:14.280
that we can even do the third joke


00:36:14.280 --> 00:36:16.700
that you had on screen a little bit ago.


00:36:16.700 --> 00:36:20.400
So HTMX, if you're all familiar with HTMX,


00:36:20.400 --> 00:36:22.360
if you're not, you should definitely check out


00:36:22.360 --> 00:36:23.880
our HTMX and Flask course.


00:36:23.880 --> 00:36:25.880
This thing is so awesome.


00:36:25.880 --> 00:36:27.760
I had so much fun learning it and I'm like,


00:36:27.760 --> 00:36:30.520
where's the next project I can use HTMX on


00:36:30.520 --> 00:36:31.640
because it's great.


00:36:31.640 --> 00:36:33.960
The idea with HTMX is instead of doing JavaScript,


00:36:33.960 --> 00:36:37.080
you just write attributes and then that magically


00:36:37.080 --> 00:36:39.160
through HTMX gets turned into server calls.


00:36:39.160 --> 00:36:44.160
Like if I need to rebuild a table


00:36:44.160 --> 00:36:46.520
as somebody interacts with some other part of the page


00:36:46.520 --> 00:36:48.200
that could just be done on the server


00:36:48.200 --> 00:36:50.260
and just send little fragments back.


00:36:50.260 --> 00:36:51.400
It's incredible, right?


00:36:51.400 --> 00:36:52.880
So it means you don't have to write JavaScript.


00:36:52.880 --> 00:36:57.880
So the joke is, there's a guy who's back in dev


00:36:57.880 --> 00:37:01.160
and then this other dude that's HTMX says,


00:37:01.160 --> 00:37:04.200
Htmx says, look at me, look at me back in dev.


00:37:04.200 --> 00:37:06.100
You're full stack now, you're full stack.


00:37:06.100 --> 00:37:07.160
Stand up for yourself, man.


00:37:07.160 --> 00:37:09.560
Don't let those, don't feel like you can only write it


00:37:09.560 --> 00:37:12.260
back in code, you're full stack now, Htmx.


00:37:12.260 --> 00:37:14.300
(laughing)


00:37:14.300 --> 00:37:15.200
That good?


00:37:15.200 --> 00:37:16.040
- Yeah.


00:37:16.040 --> 00:37:19.840
- The other joke, before we get to the one


00:37:19.840 --> 00:37:21.880
that you had on the page is,


00:37:21.880 --> 00:37:23.640
what is happening to Twitter?


00:37:23.640 --> 00:37:29.440
How did a child try to rebrand this?


00:37:29.440 --> 00:37:32.600
It is so incredibly bad.


00:37:32.600 --> 00:37:36.100
- No, it's like branded by a high school band.


00:37:36.100 --> 00:37:38.960
- It's so bad.


00:37:38.960 --> 00:37:42.640
- Let's call ourselves X, that'd be so cool, man.


00:37:42.640 --> 00:37:43.720
- Yeah, man.


00:37:43.720 --> 00:37:46.680
And so like, for example, people might be thinking,


00:37:46.680 --> 00:37:48.440
I go, you're overreacting.


00:37:48.440 --> 00:37:51.360
They tried to take the Twitter logo down


00:37:51.360 --> 00:37:52.600
and replace it with an X,


00:37:52.600 --> 00:37:54.800
and then the police came and stopped them


00:37:54.800 --> 00:37:57.600
'cause they didn't have the Twitter employees doing it,


00:37:57.600 --> 00:38:01.560
didn't have a permit to drive a crane around downtown San


00:38:01.560 --> 00:38:02.520
Francisco.


00:38:02.520 --> 00:38:07.040
So it's like half the Twitter logo is like half removed.


00:38:07.040 --> 00:38:09.400
There's no X nor their Twitter.


00:38:09.400 --> 00:38:10.560
It says tweet.


00:38:10.560 --> 00:38:13.360
I'm on twitter.com, but there's an X.


00:38:13.360 --> 00:38:18.440
But sometimes, what do you call these?


00:38:18.440 --> 00:38:20.720
Are there supposed to be Xs?


00:38:20.720 --> 00:38:23.480
Usually Xs is kind of a bad--


00:38:23.480 --> 00:38:24.520
I mean, it's just like--


00:38:24.520 --> 00:38:27.800
And if you share another one, is it a re-X?


00:38:27.800 --> 00:38:29.280
- Yes, exactly.


00:38:29.280 --> 00:38:33.820
And there's some random person who has X


00:38:33.820 --> 00:38:35.620
as a handle on Twitter.


00:38:35.620 --> 00:38:37.220
And they're like, "Oh, what's going on?


00:38:37.220 --> 00:38:38.720
Am I gonna be like Twitter?"


00:38:38.720 --> 00:38:42.640
I heard that they don't, I don't know for sure on this one,


00:38:42.640 --> 00:38:47.600
but they don't seem to have the intellectual property rights


00:38:47.600 --> 00:38:50.560
to trademark the letter X.


00:38:50.560 --> 00:38:51.400
- Well, you can't.


00:38:51.400 --> 00:38:53.320
- And, I know.


00:38:53.320 --> 00:38:58.320
And this X looks like, I think the X11 logo.


00:38:58.320 --> 00:39:02.400
If you go look at that, I think that was the one.


00:39:02.400 --> 00:39:07.400
It's like a thick right slanty versus a thin left slanty,


00:39:07.400 --> 00:39:13.040
which is, you know, one's hollow, one's solid.


00:39:13.040 --> 00:39:16.160
Other than that, they're kind of, anyway, there's,


00:39:16.160 --> 00:39:18.320
well, that's sort of a meta joke.


00:39:18.320 --> 00:39:21.780
- On the good side, current employees


00:39:21.780 --> 00:39:24.840
and those that are laid off are all ex-employees now.


00:39:24.840 --> 00:39:29.500
- Exactly, look at all the people that work for Twitter now.


00:39:29.500 --> 00:39:30.800
- They're all ex-employees.


00:39:30.800 --> 00:39:33.340
- All right, so that was just,


00:39:33.340 --> 00:39:34.540
because this came from Twitter,


00:39:34.540 --> 00:39:37.460
I'm gonna open up like, wow, this is getting janky.


00:39:37.460 --> 00:39:40.100
- It's ex-news, so it has to be part of our extras.


00:39:40.100 --> 00:39:43.420
- Absolutely does, all right.


00:39:43.420 --> 00:39:44.740
Do you wanna just give a quick shout out


00:39:44.740 --> 00:39:46.340
to what was on that page before?


00:39:46.340 --> 00:39:49.220
- So what were you referring to?


00:39:50.060 --> 00:39:53.900
only valid measurement of code quality. WTFs per minute.


00:39:53.900 --> 00:39:58.380
>> Oh, yeah. Okay. Yeah. WTFs per minute.


00:39:58.380 --> 00:39:59.100
>> It's true.


00:39:59.100 --> 00:40:00.060
>> Oh, that's the...


00:40:00.060 --> 00:40:00.380
>> Yeah.


00:40:00.380 --> 00:40:01.340
>> You need the full one.


00:40:01.340 --> 00:40:02.220
>> Oh, wow.


00:40:02.220 --> 00:40:04.380
>> I lost it now. It was an ad. It was an ad.


00:40:04.380 --> 00:40:05.180
>> Yeah.


00:40:05.180 --> 00:40:10.460
>> It was a code review and behind the door, you could just hear WTF. What WTF?


00:40:10.460 --> 00:40:14.620
And the good code only had a couple. The bad code was just like,


00:40:14.620 --> 00:40:17.100
overwhelmed with them. That was the joke.


00:40:17.100 --> 00:40:18.620
>> Yeah.


00:40:18.620 --> 00:40:19.460
- Yeah. - All right.


00:40:19.460 --> 00:40:20.340
Well, this episode was no joke.


00:40:20.340 --> 00:40:21.300
It was a lot of fun.


00:40:21.300 --> 00:40:22.300
Thanks, Brian.


00:40:22.300 --> 00:40:23.140
- Thank you.


00:40:23.140 --> 00:40:25.520
And thanks everybody for showing up at a weird time.


00:40:25.520 --> 00:40:26.780
I really appreciate it.


00:40:26.780 --> 00:40:28.520
It's great.


00:40:28.520 --> 00:40:30.560
So, talk to you later.


00:40:30.560 --> 00:40:31.400
- Bye. - Bye.

