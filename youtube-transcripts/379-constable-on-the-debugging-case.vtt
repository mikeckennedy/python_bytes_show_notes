WEBVTT

00:00:00.001 --> 00:00:03.000
Hello, everybody. Welcome, Michael.

00:00:03.000 --> 00:00:05.000
Hello, hello.

00:00:05.000 --> 00:00:11.000
Hey, just everyone, quick note. I can't turn on my camera today. Sorry about that. But thanks for being here.

00:00:11.000 --> 00:00:18.000
Yeah. Thanks, everybody, for showing up to the live stream. We really appreciate it. Let's kick it off.

00:00:18.000 --> 00:00:30.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is episode 379, recorded April 16th. And I am Brian Okken.

00:00:30.000 --> 00:00:32.000
And I'm Michael Kennedy.

00:00:32.000 --> 00:00:46.000
And this week we are sponsored by us, Talk Python training courses, and also the pytest course, and our Patreon supporters. We love everybody that supports us. We really appreciate it.

00:00:46.000 --> 00:00:56.000
And if you'd like to connect with us, we're all on Fostadon, on Mastodon. So it's @mkennedy, @brianakin, and @pythonbytes.

00:00:56.000 --> 00:01:04.000
And I wanted to shout out to myself, I guess, and Michael for we're doing a newsletter now.

00:01:04.000 --> 00:01:11.000
So if you head over to pythonbytes.fm and join the friends of the show list, we will send you an email with all of the tidbits.

00:01:11.000 --> 00:01:16.000
So if you happen to miss an episode, you can catch up on all the links that we share.

00:01:16.000 --> 00:01:22.000
Michael, why don't you kick us off with our first topic?

00:01:22.000 --> 00:01:29.000
Let's get started, huh? All right. So I want to talk about an article by Stephanie Molin.

00:01:29.000 --> 00:01:38.000
And she put together this really nice article on something that I don't use very much, Git pre-commit hooks. Do you use Git pre-commit hooks?

00:01:38.000 --> 00:01:42.000
Not, I guess, on some projects.

00:01:42.000 --> 00:01:50.000
Yeah, and I just think there's a lot of possibility for interesting things there. And, you know, I've considered it.

00:01:50.000 --> 00:01:56.000
But you don't want stuff that takes a long time to run there. So like how much value you get.

00:01:56.000 --> 00:02:04.000
But nowadays with tools like Ruff and others that run really quickly, it's basically you wouldn't even really notice it. Right?

00:02:04.000 --> 00:02:10.000
So it's not a lot of overhead. So maybe it's time to reconsider Git pre-commit hooks.

00:02:10.000 --> 00:02:17.000
And she has a really nice walkthrough here. So I just kind of want to set out some of the motivation and kind of call attention to this article.

00:02:17.000 --> 00:02:20.000
People can come check it out and set up pre-commit hooks for themselves.

00:02:20.000 --> 00:02:26.000
So why do you care about these things? They give developers near instant feedback of code locally.

00:02:26.000 --> 00:02:36.000
So not all but some of the things that would run in continuous integration, like linting checks and other types of checks run.

00:02:36.000 --> 00:02:42.000
And when you try to do a Git commit, and if it for some reason, there's a problem, right?

00:02:42.000 --> 00:02:48.000
Like it won't even let you commit. It'll say, no, can't commit. You got to fix the issue detected by the pre-commit hook.

00:02:48.000 --> 00:02:54.000
So it's kind of a gate before stuff actually gets into the broader source control world.

00:02:54.000 --> 00:02:58.000
And, you know, super valuable if you're on a team, but also if you just want to make sure like,

00:02:58.000 --> 00:03:04.000
I kind of want to make sure I'm doing this for myself for my own project, or I'm working alone at a company,

00:03:04.000 --> 00:03:07.000
and I still want to make sure these things happen, then throw them in there. That's for you.

00:03:07.000 --> 00:03:12.000
Also, the continuous integration side of thing is pretty excellent.

00:03:12.000 --> 00:03:21.000
So here she's using a project, I believe by Anthony Sotili called pre-commit.

00:03:21.000 --> 00:03:28.000
And pre-commit is a Python project, but it's not only for Python things and Git and source control.

00:03:28.000 --> 00:03:33.000
It just happens to run on Python. Like some things run on C, some things run on Rust.

00:03:33.000 --> 00:03:38.000
This one runs on Python. So basically, as long as you can run Python things, you have an interpreter,

00:03:38.000 --> 00:03:42.000
you can use pre-commit for whatever projects. You know, if you're a React native person,

00:03:42.000 --> 00:03:45.000
like you could use pre-commit for it, right?

00:03:45.000 --> 00:03:49.000
So there's a nice example of showing how to set up a bunch of checks.

00:03:49.000 --> 00:03:57.000
And it's super easy. Basically, you set up pre-commit-config-yaml file or .yaml,

00:03:57.000 --> 00:04:03.000
and then you specify different things to run. And so you can say, I want to run the hooks for,

00:04:03.000 --> 00:04:06.000
check the format for the toml file, check the format for yaml files,

00:04:06.000 --> 00:04:14.000
make sure that every file ends with a blank line, trim out all white, trailing white space,

00:04:14.000 --> 00:04:17.000
all those kinds of, those are all pretty simple and pretty nice, right?

00:04:17.000 --> 00:04:20.000
- Yes. - Another one is throw in the rough pre-commit.

00:04:20.000 --> 00:04:28.000
And then I'll just say run rough and run Ruff format, which will fix up the things.

00:04:28.000 --> 00:04:34.000
And you can even pass arguments to it through these pre-commit hooks here, which is pretty cool.

00:04:34.000 --> 00:04:37.000
Yeah, so, you know, that's pretty much it.

00:04:37.000 --> 00:04:42.000
Once you set up your file, you just have to run pre-commit install,

00:04:42.000 --> 00:04:47.000
which will download all the hooks that you've mentioned that you want to run,

00:04:47.000 --> 00:04:52.000
all the checkers, and it'll actually create virtual environments for those and install them in there.

00:04:52.000 --> 00:04:56.000
So the first time it's a little bit slow, but then the next time it's plenty quick.

00:04:56.000 --> 00:05:00.000
And finally, if for some reason you're like, you know what?

00:05:00.000 --> 00:05:06.000
I know it keeps complaining, but this time I just need it to commit because for whatever reason,

00:05:06.000 --> 00:05:13.000
you can use down here, find it, you can specify git commit --no verify.

00:05:13.000 --> 00:05:15.000
And that'll just say it's going in.

00:05:15.000 --> 00:05:19.000
I don't care, it's going in if you need to kind of override it.

00:05:19.000 --> 00:05:25.000
So yeah, pretty straightforward, really nice write up, and people can check that out if the idea appeals.

00:05:25.000 --> 00:05:30.000
This is a great timing for this because I have used it in years past,

00:05:30.000 --> 00:05:33.000
and there's times where I've added like a whole bunch of stuff

00:05:33.000 --> 00:05:36.000
and it kind of slows down my process.

00:05:36.000 --> 00:05:43.000
But with the recent rustification of a lot of our tools, like with rough and stuff,

00:05:43.000 --> 00:05:47.000
things are pretty zippy now, so I don't think it'll slow down things that much.

00:05:47.000 --> 00:05:50.000
Yeah, I doubt you'd really even notice it, you know?

00:05:50.000 --> 00:05:53.000
Yeah, depending on when it fails.

00:05:53.000 --> 00:05:55.000
When it fails, you'll notice.

00:05:55.000 --> 00:05:59.000
Yeah, and I do like the shout out. There's a couple of things I love about this.

00:05:59.000 --> 00:06:03.000
I like the shout out to the no verify because there's times where you're just running off to vacation

00:06:03.000 --> 00:06:08.000
and you have to commit your stuff no matter what to get that in there,

00:06:08.000 --> 00:06:12.000
especially if it's on a developer branch or something.

00:06:12.000 --> 00:06:16.000
Yeah, that's a good point if it's not on the main branch, but you're like, you know what?

00:06:16.000 --> 00:06:20.000
I'm just going to put it here because I want to get it over to my laptop and I'm leaving.

00:06:20.000 --> 00:06:22.000
Yeah, I need it saved.

00:06:22.000 --> 00:06:26.000
The other thing is running down some of the rough settings.

00:06:26.000 --> 00:06:33.000
I love some of the configuration that she's included with how to configure rough.

00:06:33.000 --> 00:06:37.000
Because rough is awesome by default, but there's some cool configuration you can do,

00:06:37.000 --> 00:06:42.000
like setting the quote style to single and stuff like that.

00:06:42.000 --> 00:06:44.000
Neat, indeed. Very, very neat.

00:06:44.000 --> 00:06:49.000
Stephanie's doing a bunch of cool stuff, so people should check out broadly what she's up to.

00:06:49.000 --> 00:06:51.000
But this article is really nice.

00:06:51.000 --> 00:06:52.000
Over to you, Brian.

00:06:52.000 --> 00:06:55.000
Well, I want to talk about something I talked about two years ago.

00:06:55.000 --> 00:07:02.000
So I was researching this Difftastic, and I'm like, I'm really loving this tool.

00:07:02.000 --> 00:07:03.000
I got to cover it.

00:07:03.000 --> 00:07:09.000
And I apparently covered it two years ago, but I haven't started using it until just recently.

00:07:09.000 --> 00:07:16.000
So Diftastic is a tool, and I think it's written in Rust.

00:07:16.000 --> 00:07:17.000
I'm not sure, actually.

00:07:17.000 --> 00:07:24.000
But it's a super fast diff tool, and it does coloring, but there's a lot of stuff I love about it,

00:07:24.000 --> 00:07:26.000
the reasons why I'm using it a lot.

00:07:26.000 --> 00:07:27.000
The colors are great, by the way.

00:07:27.000 --> 00:07:31.000
Awesome, nice red, green, different colors.

00:07:31.000 --> 00:07:40.000
But what I really love is that it's a diff tool that's not a line-by-line, character-by-character diff.

00:07:40.000 --> 00:07:44.000
It understands your syntax, and it only changes things that really change.

00:07:44.000 --> 00:07:49.000
So if you happen to add a new line in there or something, it's not going to show you that diff.

00:07:49.000 --> 00:07:54.000
It's going to do just real changes to your code, which is super helpful.

00:07:54.000 --> 00:08:00.000
I hate it when you have to, like, turn off -- by default, it doesn't show you that.

00:08:00.000 --> 00:08:05.000
So I don't like to see if somebody -- if I messed up some spacing and somebody fixed that.

00:08:05.000 --> 00:08:06.000
That's not a real diff.

00:08:06.000 --> 00:08:08.000
I don't need to see that.

00:08:08.000 --> 00:08:11.000
So having syntax-based is great.

00:08:11.000 --> 00:08:17.000
What I really love is what I'm going to highlight here is there's instructions.

00:08:17.000 --> 00:08:20.000
It tells you how to do it, and I can't remember where the link is.

00:08:20.000 --> 00:08:23.000
But I'm going to show it right here.

00:08:23.000 --> 00:08:30.000
In the manual for a Git-tastic -- or Diff-tastic, it shows you how to set this up for diff, so you can -- for Git diff.

00:08:30.000 --> 00:08:38.000
So if you're using it with Git and you want to just try it out, it shows you how to just set your Git external diff,

00:08:38.000 --> 00:08:40.000
and then you can try it out.

00:08:40.000 --> 00:08:44.000
What I really love is the real winner is doing a log.

00:08:44.000 --> 00:08:50.000
So showing what you've done on the file recently is great with the Git log,

00:08:50.000 --> 00:08:56.000
but if you do that with the external diff of Diff-tastic, it's a fantastic experience,

00:08:56.000 --> 00:09:00.000
especially if you've got a large screen, which I do right now.

00:09:00.000 --> 00:09:03.000
And it just makes things -- working with Git so much easier.

00:09:03.000 --> 00:09:07.000
So definitely, if you haven't tried Diff-tastic yet, try it.

00:09:07.000 --> 00:09:11.000
And try the -- so it shows you how to do it just like one-offs for Git,

00:09:11.000 --> 00:09:18.000
but also it shows you how to set up your Git config so that you can use it all the time.

00:09:18.000 --> 00:09:20.000
So this is fantastic.

00:09:20.000 --> 00:09:22.000
Yeah, very excellent.

00:09:22.000 --> 00:09:23.000
Are you starting to use it?

00:09:23.000 --> 00:09:25.000
I'm using it every day now.

00:09:25.000 --> 00:09:27.000
It's just part of my workflow.

00:09:27.000 --> 00:09:29.000
So, yeah.

00:09:29.000 --> 00:09:30.000
Interesting.

00:09:30.000 --> 00:09:35.000
Mike Feehler out in the audience says, "Diff-tastic is indeed in Rust."

00:09:35.000 --> 00:09:38.000
Yeah, it's one of those -- it's super fast.

00:09:38.000 --> 00:09:42.000
I love -- I'm going to have to start learning Rust, I guess, maybe.

00:09:42.000 --> 00:09:48.000
Or just I just love other people writing Rust for me so that I can write my Python even faster.

00:09:48.000 --> 00:09:51.000
It's like -- it's kind of like when you use Jupyter Notebooks.

00:09:51.000 --> 00:09:54.000
You don't have to learn TypeScript and JavaScript and all those things.

00:09:54.000 --> 00:09:58.000
You can just use them and appreciate that someone else took one for the team.

00:09:58.000 --> 00:10:00.000
Yeah, yeah.

00:10:00.000 --> 00:10:01.000
So, awesome.

00:10:01.000 --> 00:10:04.000
All right, actually, speaking exactly of that kind of stuff,

00:10:04.000 --> 00:10:08.000
the next thing I wanted to give a shout-out to here, the next topic, is Quarto.

00:10:08.000 --> 00:10:10.000
Have you heard of Quarto?

00:10:10.000 --> 00:10:12.000
I don't believe so.

00:10:12.000 --> 00:10:14.000
Yeah, so Quarto is pretty cool.

00:10:14.000 --> 00:10:20.000
It lives solidly in the -- I want to publish stuff for various reasons.

00:10:20.000 --> 00:10:25.000
Maybe because I want a blog or a website or I want to write an e-book

00:10:25.000 --> 00:10:30.000
or I just want to create a web page that shows my research

00:10:30.000 --> 00:10:33.000
or visualizations for my company or something like that.

00:10:33.000 --> 00:10:38.000
So basically, it's an open-source scientific and technical publishing system

00:10:38.000 --> 00:10:40.000
based on Jupyter Notebooks.

00:10:40.000 --> 00:10:44.000
And a lot of people have been talking about this and recommending this lately.

00:10:44.000 --> 00:10:47.000
So I thought I'd give it a look.

00:10:47.000 --> 00:10:53.000
So the idea is you write in Jupyter Notebooks with plain text or markdown

00:10:53.000 --> 00:10:57.000
or whatever you want to use, and then you create the dynamic elements in Python,

00:10:57.000 --> 00:11:00.000
R, Julia, or Observable.

00:11:00.000 --> 00:11:03.000
Observable has always been an adjective.

00:11:03.000 --> 00:11:05.000
I didn't know it was a noun, but okay.

00:11:05.000 --> 00:11:07.000
[laughs]

00:11:07.000 --> 00:11:09.000
Yeah, I may have to check that out later.

00:11:09.000 --> 00:11:13.000
But basically, the most relevant point is you can write your stuff in Python,

00:11:13.000 --> 00:11:20.000
and then you can create production-quality articles, dashboards, websites, blogs,

00:11:20.000 --> 00:11:26.000
and even EPUB books, so HTML, PDF, even Word, EPUB, and so on,

00:11:26.000 --> 00:11:28.000
which is pretty awesome.

00:11:28.000 --> 00:11:31.000
And then it comes out of the Posit folks.

00:11:31.000 --> 00:11:34.000
You can connect it to Posit Connect if you want.

00:11:34.000 --> 00:11:39.000
But then you can write in hand-doc markdown as well

00:11:39.000 --> 00:11:44.000
and get fancy math equation-type things,

00:11:44.000 --> 00:11:47.000
like integral from zero to infinity to that.

00:11:47.000 --> 00:11:51.000
It looks proper, like you would see in calculus class,

00:11:51.000 --> 00:11:55.000
not weird ASCII representations to it.

00:11:55.000 --> 00:11:57.000
So yeah, it looks pretty awesome.

00:11:57.000 --> 00:12:00.000
It has the ability to show or hide the code.

00:12:00.000 --> 00:12:03.000
If you go to their website, you can see there's a little example of,

00:12:03.000 --> 00:12:07.000
"Here's a notebook, and then here's actually the publication of it,"

00:12:07.000 --> 00:12:09.000
which I think is pretty cool.

00:12:09.000 --> 00:12:11.000
What do you think, Brian?

00:12:11.000 --> 00:12:14.000
I think this is excellent. I definitely want to try this out.

00:12:14.000 --> 00:12:17.000
I've been itching to write more long-form.

00:12:17.000 --> 00:12:18.000
Yeah.

00:12:18.000 --> 00:12:21.000
Doing something like this would be great.

00:12:21.000 --> 00:12:26.000
I think it would, especially if you use Python to sort of express

00:12:26.000 --> 00:12:28.000
what you're working on or what you're doing, right?

00:12:28.000 --> 00:12:30.000
It would be super, super cool.

00:12:30.000 --> 00:12:33.000
Yeah, and Pandoc, it's cool they're using Pandoc markdown.

00:12:33.000 --> 00:12:38.000
I mean, markdown's amazing, but the Pandoc's flavors of markdown,

00:12:38.000 --> 00:12:40.000
there's a bunch of cool extensions.

00:12:40.000 --> 00:12:42.000
So that's pretty neat.

00:12:42.000 --> 00:12:43.000
Yeah.

00:12:43.000 --> 00:12:48.000
Also, final thing, you apparently can embed things like Jupyter widgets,

00:12:48.000 --> 00:12:51.000
HTML widgets, and others,

00:12:51.000 --> 00:12:53.000
to let people sort of interact with the page as well,

00:12:53.000 --> 00:12:55.000
which is also cool.

00:12:55.000 --> 00:12:57.000
Yeah, neat.

00:12:57.000 --> 00:12:58.000
Yeah.

00:12:58.000 --> 00:13:01.000
All right, so if this is your world, check it out.

00:13:01.000 --> 00:13:03.000
Definitely.

00:13:03.000 --> 00:13:08.000
Okay, next I want to talk about Constable.

00:13:08.000 --> 00:13:11.000
So this is a simple debugging tool.

00:13:11.000 --> 00:13:13.000
Looks like it's fairly new.

00:13:13.000 --> 00:13:15.000
Look at that.

00:13:15.000 --> 00:13:16.000
Wow.

00:13:16.000 --> 00:13:18.000
Initial commit four days ago.

00:13:18.000 --> 00:13:20.000
[laughter]

00:13:20.000 --> 00:13:23.000
If you find yourself aimlessly adding print statements

00:13:23.000 --> 00:13:27.000
while debugging your code, this might be for you.

00:13:27.000 --> 00:13:29.000
So this is actually pretty neat.

00:13:29.000 --> 00:13:31.000
Oh, I like it.

00:13:31.000 --> 00:13:36.000
So you throw, like in the example, you throw a decorator at constable.trace,

00:13:36.000 --> 00:13:39.000
and then you can throw in which variables you want to trace,

00:13:39.000 --> 00:13:43.000
and it just, like, it shows you some cool output of, like,

00:13:43.000 --> 00:13:47.000
what happens while you're running.

00:13:47.000 --> 00:13:51.000
And you can walk through, and it does the changes to your --

00:13:51.000 --> 00:13:55.000
which line changed your variable, and what did it change it to,

00:13:55.000 --> 00:13:57.000
and all that sort of stuff.

00:13:57.000 --> 00:13:58.000
Yeah.

00:13:58.000 --> 00:14:01.000
Each line that changes, Ryan, it prints out, like,

00:14:01.000 --> 00:14:04.000
as the variables change at any step, it'll say,

00:14:04.000 --> 00:14:06.000
"Here's what the new values are," which is cool.

00:14:06.000 --> 00:14:08.000
But it kind of describes it, which is awesome.

00:14:08.000 --> 00:14:11.000
It'll say, like, "This equation ran, so now it's a new --

00:14:11.000 --> 00:14:13.000
this statement ran, so here's the value.

00:14:13.000 --> 00:14:15.000
This statement ran, so now here's the value."

00:14:15.000 --> 00:14:17.000
It's really good.

00:14:17.000 --> 00:14:21.000
It's fairly verbose, but -- and with a lot of spacing in here.

00:14:21.000 --> 00:14:24.000
But I think that's good, because you're probably going to, like,

00:14:24.000 --> 00:14:27.000
throw it on just a couple functions when you're debugging at the time

00:14:27.000 --> 00:14:28.000
and then pull it out later.

00:14:28.000 --> 00:14:30.000
Use it in production.

00:14:30.000 --> 00:14:32.000
Don't put it in production.

00:14:32.000 --> 00:14:33.000
I was wondering this, too.

00:14:33.000 --> 00:14:36.000
So I forgot the name of the other tool that was kind of like this,

00:14:36.000 --> 00:14:39.000
and Mike Felder, or Fiedler, says,

00:14:39.000 --> 00:14:42.000
"I wonder how constable compares to ice cream."

00:14:42.000 --> 00:14:47.000
And I think I would take this as Mike is volunteering to do a write-up

00:14:47.000 --> 00:14:50.000
of comparing constable and ice cream.

00:14:50.000 --> 00:14:51.000
Definitely.

00:14:51.000 --> 00:14:52.000
Thanks, Mike.

00:14:53.000 --> 00:14:55.000
Yeah, let us know when that's written up, and we'll take a look.

00:14:55.000 --> 00:14:57.000
No.

00:14:57.000 --> 00:15:02.000
I think probably a lot of this is just probably feel,

00:15:02.000 --> 00:15:05.000
like how does it feel to you, if it fits your workflow or not.

00:15:05.000 --> 00:15:08.000
So this looks fun.

00:15:08.000 --> 00:15:09.000
Yeah, this looks very fun.

00:15:09.000 --> 00:15:10.000
And both are new to me.

00:15:10.000 --> 00:15:13.000
So it's worth checking out.

00:15:13.000 --> 00:15:14.000
Okay.

00:15:14.000 --> 00:15:15.000
And if Mike doesn't want to do it,

00:15:15.000 --> 00:15:17.000
maybe I'll take a look at comparing constable.

00:15:17.000 --> 00:15:18.000
Excellent.

00:15:18.000 --> 00:15:19.000
You could write it in Cordo.

00:15:19.000 --> 00:15:20.000
Yeah.

00:15:20.000 --> 00:15:21.000
[Laughter]

00:15:21.000 --> 00:15:22.000
Yeah.

00:15:22.000 --> 00:15:30.000
So apparently Mike was surprised at volunteering.

00:15:30.000 --> 00:15:33.000
So anyway.

00:15:33.000 --> 00:15:36.000
So yeah, constable for debugging print statements,

00:15:36.000 --> 00:15:38.000
or it's easier than print statements.

00:15:38.000 --> 00:15:39.000
Yeah.

00:15:40.000 --> 00:15:41.000
Nice.

00:15:41.000 --> 00:15:42.000
Cool.

00:15:42.000 --> 00:15:44.000
I'm going to work it into my world, I think.

00:15:44.000 --> 00:15:46.000
It looks good.

00:15:46.000 --> 00:15:48.000
What do you got for us next?

00:15:48.000 --> 00:15:50.000
Extra, extra stuff.

00:15:50.000 --> 00:15:52.000
I have only one extra thing.

00:15:52.000 --> 00:15:54.000
Are we done with our topics already?

00:15:54.000 --> 00:15:55.000
I believe so.

00:15:55.000 --> 00:15:56.000
Yeah, we are.

00:15:56.000 --> 00:15:58.000
Time flies when you're having fun, you know, and you're--

00:15:58.000 --> 00:15:59.000
Yeah.

00:15:59.000 --> 00:16:00.000
Time flies.

00:16:00.000 --> 00:16:01.000
All right.

00:16:01.000 --> 00:16:03.000
So at least I'm done.

00:16:03.000 --> 00:16:04.000
I've got nothing else.

00:16:04.000 --> 00:16:05.000
How's that?

00:16:05.000 --> 00:16:06.000
[Laughter]

00:16:06.000 --> 00:16:08.000
So two pieces of news here.

00:16:08.000 --> 00:16:10.000
They're both the same piece of news.

00:16:10.000 --> 00:16:18.000
So Python 3.12.3 final is out, which comes with 1, 2, 3, 4 security updates.

00:16:18.000 --> 00:16:21.000
They don't sound like any sort of big deal.

00:16:21.000 --> 00:16:28.000
So I wouldn't like run and patch it now or anything,

00:16:28.000 --> 00:16:30.000
but there are some things listed under security,

00:16:30.000 --> 00:16:32.000
so that's always worth thinking about.

00:16:32.000 --> 00:16:34.000
But there's also quite a few changes under built-in,

00:16:34.000 --> 00:16:35.000
under library.

00:16:35.000 --> 00:16:41.000
I mean, just gauging by the scrolling, I would say there's probably 50

00:16:41.000 --> 00:16:42.000
or 60 changes.

00:16:42.000 --> 00:16:45.000
That's a big change for a .3, .2 to .3.

00:16:45.000 --> 00:16:47.000
Yeah.

00:16:47.000 --> 00:16:48.000
Yeah.

00:16:48.000 --> 00:16:50.000
And why not?

00:16:50.000 --> 00:16:52.000
Why not upgrade?

00:16:52.000 --> 00:16:53.000
Absolutely.

00:16:53.000 --> 00:16:57.000
And I would-- just the other piece of news is that Python Bytes

00:16:57.000 --> 00:17:03.000
and all the other things are already running on 3.12.3.

00:17:03.000 --> 00:17:09.000
Just bump a number, kick off the Docker update, and boom.

00:17:09.000 --> 00:17:10.000
Sweet.

00:17:10.000 --> 00:17:13.000
Yeah, very nice to have that set up in place.

00:17:13.000 --> 00:17:15.000
Extras for you?

00:17:15.000 --> 00:17:19.000
Just one that I was excited to cover, but then like, okay,

00:17:19.000 --> 00:17:20.000
so I'll just talk about it.

00:17:20.000 --> 00:17:24.000
It's a couple-- oh, you appear to be offline.

00:17:24.000 --> 00:17:28.000
It's a couple weeks old, but pointers are going to be added

00:17:28.000 --> 00:17:31.000
to the standard library with PEP 4.4.

00:17:31.000 --> 00:17:32.000
What?

00:17:32.000 --> 00:17:33.000
Yeah.

00:17:33.000 --> 00:17:37.000
Apparently Guida says, you know, why the hell not?

00:17:37.000 --> 00:17:38.000
Why not add pointers?

00:17:38.000 --> 00:17:43.000
This will also introduce pointer literals, size of operators,

00:17:43.000 --> 00:17:45.000
and memory errors.

00:17:45.000 --> 00:17:50.000
Actually, I was perusing Reddit in Python and noticed this,

00:17:50.000 --> 00:17:51.000
and I'm like, what's going on?

00:17:51.000 --> 00:17:53.000
And then I noticed the date.

00:17:53.000 --> 00:17:54.000
It was 15 days ago.

00:17:54.000 --> 00:17:57.000
That would be April 1st.

00:17:57.000 --> 00:17:58.000
Rough.

00:17:58.000 --> 00:17:59.000
Rough, rough.

00:17:59.000 --> 00:18:01.000
I actually got snagged on this.

00:18:01.000 --> 00:18:03.000
This is sort of funny, though.

00:18:03.000 --> 00:18:04.000
This is funny.

00:18:04.000 --> 00:18:09.000
It even has the C syntax, like ampersand to grab the pointer

00:18:09.000 --> 00:18:11.000
of a variable, a star to dereference the pointer,

00:18:11.000 --> 00:18:12.000
and all sorts of stuff.

00:18:12.000 --> 00:18:13.000
Yeah, malloc.

00:18:13.000 --> 00:18:14.000
Malloc.

00:18:14.000 --> 00:18:15.000
Why not?

00:18:16.000 --> 00:18:18.000
New size of operator.

00:18:18.000 --> 00:18:20.000
The irony is everything in Python is a pointer.

00:18:20.000 --> 00:18:23.000
You just can't directly address them, right?

00:18:23.000 --> 00:18:26.000
You can't work with them that way.

00:18:26.000 --> 00:18:29.000
No pass by-- there's no pass reference, you know,

00:18:29.000 --> 00:18:32.000
with the ampersand operator in C,

00:18:32.000 --> 00:18:34.000
where you can change the value of the pointer

00:18:34.000 --> 00:18:37.000
within somewhere else and stuff.

00:18:37.000 --> 00:18:38.000
I love this example.

00:18:38.000 --> 00:18:41.000
Spam equals star of none.

00:18:41.000 --> 00:18:43.000
That will segfault core dump.

00:18:43.000 --> 00:18:46.000
Good luck, kiddo.

00:18:46.000 --> 00:18:47.000
Fine.

00:18:47.000 --> 00:18:48.000
No, this is good.

00:18:48.000 --> 00:18:49.000
I enjoy it.

00:18:49.000 --> 00:18:50.000
So all right.

00:18:50.000 --> 00:18:52.000
People comments are like, nice one.

00:18:52.000 --> 00:18:53.000
I believed it.

00:18:54.000 --> 00:18:57.000
I believed it for a second, except for--

00:18:57.000 --> 00:18:58.000
anyway.

00:18:58.000 --> 00:19:00.000
But there is an infamous pointers.py.

00:19:00.000 --> 00:19:02.000
So is that a real thing?

00:19:02.000 --> 00:19:05.000
You can-- no.

00:19:05.000 --> 00:19:08.000
Bringing the hell of pointers to Python.

00:19:08.000 --> 00:19:12.000
From pointers import underscore.

00:19:12.000 --> 00:19:14.000
That's funny.

00:19:14.000 --> 00:19:16.000
Anyway.

00:19:16.000 --> 00:19:17.000
All right.

00:19:17.000 --> 00:19:18.000
So--

00:19:18.000 --> 00:19:19.000
This is involved, right?

00:19:19.000 --> 00:19:20.000
Involved.

00:19:20.000 --> 00:19:21.000
This is in depth.

00:19:21.000 --> 00:19:22.000
That wasn't just a Reddit post.

00:19:22.000 --> 00:19:25.000
It's got like a whole GitHub repo.

00:19:25.000 --> 00:19:26.000
Yeah.

00:19:26.000 --> 00:19:27.000
Example.

00:19:27.000 --> 00:19:28.000
I'm not coding here.

00:19:28.000 --> 00:19:31.000
What are they doing?

00:19:31.000 --> 00:19:32.000
This is awesome.

00:19:32.000 --> 00:19:35.000
Why does this exist?

00:19:35.000 --> 00:19:36.000
Anyway.

00:19:36.000 --> 00:19:39.000
Liz out in the audience says, I would have believed it too.

00:19:39.000 --> 00:19:43.000
One of the features is segfaults.

00:19:43.000 --> 00:19:44.000
Always a good time.

00:19:45.000 --> 00:19:46.000
Yeah.

00:19:46.000 --> 00:19:47.000
All right.

00:19:47.000 --> 00:19:48.000
So that was funny.

00:19:48.000 --> 00:19:50.000
But do you have anything else funny for us?

00:19:50.000 --> 00:19:51.000
I do.

00:19:51.000 --> 00:19:53.000
And it's very much in the same vein.

00:19:53.000 --> 00:19:55.000
Although I don't think it's the same date.

00:19:55.000 --> 00:19:56.000
I think it's just more random.

00:19:56.000 --> 00:19:58.000
So check this out.

00:19:58.000 --> 00:20:03.000
Henik from the Python community, who we speak about often, is here.

00:20:03.000 --> 00:20:06.000
Holding this award that is a Hugo.

00:20:06.000 --> 00:20:12.000
You know Hugo, not the static site generator, but the awards for--

00:20:12.000 --> 00:20:14.000
Is it like a sci-fi award or something?

00:20:14.000 --> 00:20:15.000
Yeah.

00:20:15.000 --> 00:20:16.000
For best sci-fi.

00:20:16.000 --> 00:20:17.000
Best science fiction.

00:20:17.000 --> 00:20:18.000
So here's the thing.

00:20:18.000 --> 00:20:23.000
Very happy to accept a Hugo award for my science fiction short story,

00:20:23.000 --> 00:20:29.000
"The Day Python Packaging Made Everyone Happy."

00:20:29.000 --> 00:20:30.000
Good one.

00:20:30.000 --> 00:20:32.000
Good one, Henik.

00:20:32.000 --> 00:20:36.000
That is excellent.

00:20:36.000 --> 00:20:38.000
Someday.

00:20:38.000 --> 00:20:41.000
And science fiction is a good angle here, right?

00:20:41.000 --> 00:20:45.000
Because science fiction is the sort of stuff that's not real now.

00:20:45.000 --> 00:20:52.000
But you can imagine maybe, but probably not, at some point in the future.

00:20:52.000 --> 00:20:57.000
Maybe the year 3000 will all be fine.

00:20:57.000 --> 00:21:01.000
Well, I don't believe anything until I get my hover skateboard.

00:21:01.000 --> 00:21:05.000
I know.

00:21:05.000 --> 00:21:08.000
All it's going to be about is people crashing and falling over backwards

00:21:08.000 --> 00:21:11.000
on YouTube on the hover skateboard once we all get them.

00:21:11.000 --> 00:21:13.000
Yeah.

00:21:13.000 --> 00:21:15.000
Like those ones with wheels now, but now when you hover,

00:21:15.000 --> 00:21:17.000
it'll be even more tippy.

00:21:17.000 --> 00:21:21.000
Still trying to figure out how you turn on something that hovers.

00:21:21.000 --> 00:21:24.000
But anyway.

00:21:24.000 --> 00:21:25.000
All right.

00:21:25.000 --> 00:21:26.000
Well, thanks.

00:21:26.000 --> 00:21:27.000
This was fun.

00:21:27.000 --> 00:21:29.000
Pretty quick episode.

00:21:29.000 --> 00:21:37.000
Oh, Mike says hover skateboard uses pointers and seg faults.

00:21:37.000 --> 00:21:39.000
Yeah.

00:21:39.000 --> 00:21:45.000
And then we can get Devin and our AI to create seg faults for us.

00:21:45.000 --> 00:21:46.000
Yeah, that'd be awesome.

00:21:46.000 --> 00:21:47.000
Not my fault.

00:21:47.000 --> 00:21:48.000
I didn't take down production.

00:21:48.000 --> 00:21:50.000
Devin did.

00:21:50.000 --> 00:21:52.000
I wonder if the segue is written in C.

00:21:52.000 --> 00:21:54.000
I wonder if segways have seg faults.

00:21:54.000 --> 00:21:55.000
I bet they do.

00:21:55.000 --> 00:21:57.000
Yeah.

00:21:57.000 --> 00:21:59.000
It would be fitting.

00:21:59.000 --> 00:22:00.000
All right.

00:22:00.000 --> 00:22:02.000
Well, thanks, everybody, for showing up.

00:22:02.000 --> 00:22:04.000
If you want to--

00:22:04.000 --> 00:22:08.000
and if you're listening and you want to join the fun of talking with us

00:22:08.000 --> 00:22:12.000
while we're doing a podcast, head over to pythonbytes.fm,

00:22:12.000 --> 00:22:16.000
and you can see what the schedule is for the next live episode.

00:22:16.000 --> 00:22:17.000
Indeed.

00:22:17.000 --> 00:22:18.000
Thanks, Brian.

00:22:18.000 --> 00:22:19.000
Thank you.

00:22:19.000 --> 00:22:20.000
Bye.

00:22:20.000 --> 00:22:21.000
Bye all.

