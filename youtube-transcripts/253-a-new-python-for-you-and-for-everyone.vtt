WEBVTT

00:00:00.000 --> 00:00:04.000
Hello, everybody in the stream.


00:00:04.000 --> 00:00:06.000
Thanks for coming and showing up.


00:00:06.000 --> 00:00:10.000
We're going to get started with the Python Bytes episode.


00:00:10.000 --> 00:00:16.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:16.000 --> 00:00:21.000
This is episode 253, recorded October 6, 2021.


00:00:21.000 --> 00:00:23.000
I'm Brian Okken.


00:00:23.000 --> 00:00:25.000
I'm Michael Kennedy.


00:00:25.000 --> 00:00:29.100
And we've got with us,


00:00:29.100 --> 00:00:33.800
yeah, I mean, yes, this is me.


00:00:33.800 --> 00:00:39.640
So welcome. Hey, before we jump into some of our,


00:00:39.640 --> 00:00:42.560
topics, could you tell us a little bit about yourself?


00:00:42.560 --> 00:00:45.160
Um, sure. Of course. first of all,


00:00:45.160 --> 00:00:49.680
I'm super excited to be here a little bit nervous because it's my first


00:00:49.680 --> 00:00:50.960
podcast ever.


00:00:51.440 --> 00:00:55.520
And I'm very happy to be on Python Vites.


00:00:55.520 --> 00:01:00.000
It's a podcast I've been listening to, I think, for the last five years,


00:01:00.000 --> 00:01:03.080
about the same time I got into Python.


00:01:03.080 --> 00:01:09.280
So right now I'm, I started like recently a month ago, I started


00:01:09.280 --> 00:01:14.000
working at a new company, cybersecurity company called Cycognito.


00:01:14.000 --> 00:01:20.200
They're doing some cool stuff, automated network perimeter security


00:01:20.600 --> 00:01:23.480
for Fortune 500 companies.


00:01:23.480 --> 00:01:26.960
Very interesting approach.


00:01:26.960 --> 00:01:31.400
What I do there is I'm a infrastructure


00:01:31.400 --> 00:01:36.200
and internal tools developer in Python, of course.


00:01:36.200 --> 00:01:40.600
And I've been doing Python for the last six years


00:01:40.600 --> 00:01:43.160
as a developer, as a backend developer,


00:01:43.160 --> 00:01:44.480
as an automation developer.


00:01:44.480 --> 00:01:49.480
I actually started my career as a QA engineer.


00:01:49.480 --> 00:01:52.240
I didn't have any coding background,


00:01:52.240 --> 00:01:55.040
so I kind of learned Python on the job,


00:01:55.040 --> 00:01:57.600
starting from little scripts and snippets,


00:01:57.600 --> 00:02:01.920
and then I got into pytest and automation.


00:02:01.920 --> 00:02:05.400
And at some point I just switched to,


00:02:05.400 --> 00:02:07.560
yeah, full-time developer,


00:02:07.560 --> 00:02:12.080
but still, testing is something very precious to me.


00:02:12.080 --> 00:02:14.720
I'm very invested in it, so yeah.


00:02:14.720 --> 00:02:16.840
- It's kind of important to me, too.


00:02:16.840 --> 00:02:17.680
- Yeah, I know.


00:02:17.680 --> 00:02:18.520
(laughing)


00:02:18.520 --> 00:02:19.360
- Yeah, awesome.


00:02:19.360 --> 00:02:22.860
So I had a feeling.


00:02:22.860 --> 00:02:23.700
Thank you.


00:02:23.700 --> 00:02:28.120
- Well, Michael, let's kick it off with some awesomeness.


00:02:28.120 --> 00:02:29.980
- Yeah, I love awesome things.


00:02:29.980 --> 00:02:34.220
So let's kick it off with awesome HTMX.


00:02:34.220 --> 00:02:36.460
So we've covered many awesome lists


00:02:36.460 --> 00:02:39.680
and one of the hottest technologies


00:02:39.680 --> 00:02:41.820
in the Python space these days,


00:02:41.820 --> 00:02:46.660
and at least with the web is over at htmx.org,


00:02:46.660 --> 00:02:49.060
a really cool way to basically create apps


00:02:49.060 --> 00:02:50.980
that you would normally create with Vue or React,


00:02:50.980 --> 00:02:54.020
but just do it all in Python and mostly on the server,


00:02:54.020 --> 00:02:54.860
which is really cool.


00:02:54.860 --> 00:02:58.900
So let's see, make sure I get the name right here.


00:02:58.900 --> 00:03:03.060
Rageshagar, probably messed it up, sorry,


00:03:03.060 --> 00:03:05.820
but put together this list, thank you,


00:03:05.820 --> 00:03:08.580
for keeping track of all the things that are awesome


00:03:08.580 --> 00:03:10.700
that have to do with HTMX.


00:03:10.700 --> 00:03:14.420
So if you look down here, there's like blog posts,


00:03:14.420 --> 00:03:17.740
tools, videos, examples.


00:03:17.740 --> 00:03:21.140
And what's kind of nice about it is it's not just,


00:03:21.140 --> 00:03:23.880
here's a Python list of using this framework,


00:03:23.880 --> 00:03:27.200
but it's this framework in a lot of different situations


00:03:27.200 --> 00:03:28.780
that might be useful to people.


00:03:28.780 --> 00:03:32.360
So for example, if you wanna know how to use it in Django,


00:03:32.360 --> 00:03:35.880
there's an example, or rather a blog post for that.


00:03:35.880 --> 00:03:40.160
There's one for using Tailwind with Flask.


00:03:40.160 --> 00:03:42.440
There's one for doing it with,


00:03:42.440 --> 00:03:45.320
somewhere in here, I don't see it yet,


00:03:45.320 --> 00:03:47.680
but there's a Ruby on Rails one.


00:03:47.680 --> 00:03:51.120
There's plugins for HTMS, like so if you do craft,


00:03:51.120 --> 00:03:54.500
which is a CMS, there's Django integration,


00:03:54.500 --> 00:03:56.800
Rails integration, all kinds of stuff.


00:03:56.800 --> 00:03:58.640
And there's videos, check out number three here,


00:03:58.640 --> 00:04:03.600
Python Bytes, HTMX, Dynamic and Live HTML without JavaScript.


00:04:03.600 --> 00:04:05.520
That's our YouTube live stream that we had,


00:04:05.520 --> 00:04:06.880
I think that was Hannah Stepnik,


00:04:06.880 --> 00:04:09.200
who was on with us on that episode.


00:04:09.200 --> 00:04:11.400
And so there's some videos you can check out about it.


00:04:11.400 --> 00:04:14.080
There's also the Talk Python episode


00:04:14.080 --> 00:04:15.800
where I interviewed Carson Gross, the creator.


00:04:15.800 --> 00:04:18.720
So they're including our stuff,


00:04:18.720 --> 00:04:19.840
which is very much appreciated.


00:04:19.840 --> 00:04:22.520
But then also a bunch of examples for like Node.js


00:04:22.520 --> 00:04:25.120
and ASP.NET and oh my gosh, a Lisp.


00:04:25.120 --> 00:04:26.440
A Lisp is in there, but yeah,


00:04:26.440 --> 00:04:28.280
like plenty of Python ones as well.


00:04:28.280 --> 00:04:31.440
Yeah.


00:04:31.440 --> 00:04:32.280
- This is cool.


00:04:32.280 --> 00:04:37.280
And yeah, I actually gave some try using HTML.


00:04:43.800 --> 00:04:45.240
I don't do a lot of front end.


00:04:45.240 --> 00:04:50.240
Really nice to get rid of some ad hoc JavaScript.


00:04:50.240 --> 00:04:51.880
- Yeah.


00:04:51.880 --> 00:04:52.720
- Stuff I did.


00:04:52.720 --> 00:04:55.320
- It works so well, doesn't it?


00:04:55.320 --> 00:04:56.140
Ah.


00:04:56.140 --> 00:05:01.140
- Yeah, and I really don't enjoy doing JavaScript


00:05:01.140 --> 00:05:04.040
because I'm not a front end developer,


00:05:04.040 --> 00:05:07.760
but sometimes I need to provide some kind of a UI interface


00:05:07.760 --> 00:05:10.280
and then it requires JavaScript.


00:05:10.280 --> 00:05:13.560
and then I usually just take some snippets


00:05:13.560 --> 00:05:16.440
from Stack Overflow and throw it in there.


00:05:16.440 --> 00:05:20.000
And when I tried HTMX,


00:05:20.000 --> 00:05:25.000
it was so much cleaner to understand what's going on there.


00:05:25.000 --> 00:05:26.600
Very, very nice.


00:05:26.600 --> 00:05:30.000
- I think I need a sticker for my laptop


00:05:30.000 --> 00:05:32.540
that says I really don't enjoy using JavaScript.


00:05:32.540 --> 00:05:36.520
- So one thing I would like to throw out there


00:05:36.520 --> 00:05:39.920
that people, when I'm doing a talk in San Francisco


00:05:39.920 --> 00:05:43.920
people heard the title, which is something like, you know,


00:05:43.920 --> 00:05:46.920
interactive Python web apps, hold the JavaScript, something


00:05:46.920 --> 00:05:50.160
like that. And they're like, Oh, why are you always hating on


00:05:50.160 --> 00:05:53.400
JavaScript? I'm not, I don't think that this is so much about


00:05:53.400 --> 00:05:57.200
hating on JavaScript. If you want to do JavaScript, knock


00:05:57.200 --> 00:05:59.700
yourself out, you can write you can like a lot of these


00:05:59.700 --> 00:06:04.600
examples are node json express using HTMX. But the three of us


00:06:04.600 --> 00:06:07.600
on this call, we're not like I can't wait to run out and write


00:06:07.760 --> 00:06:10.900
stuff that runs on node, we'd much rather go write stuff that runs on Python.


00:06:10.900 --> 00:06:18.140
So what this lets us do is still use like Python code on the server, but then it


00:06:18.140 --> 00:06:20.740
just behaves as if it was running on the front end.


00:06:20.740 --> 00:06:21.880
It's super smooth.


00:06:21.880 --> 00:06:24.900
Just like y'all said, like it really cleans things up and makes it simple.


00:06:24.900 --> 00:06:25.940
Yeah.


00:06:25.940 --> 00:06:27.900
So here's a bunch of awesome stuff.


00:06:27.900 --> 00:06:30.180
There's a bunch of other languages I don't want to work in either.


00:06:30.180 --> 00:06:35.500
Awesome.


00:06:35.500 --> 00:06:36.960
Well, there's not a whole lot more to add to this,


00:06:36.960 --> 00:06:39.760
but it's nice when these emerging technologies


00:06:39.760 --> 00:06:41.840
are coming along to get some help


00:06:41.840 --> 00:06:44.040
and examples and other resources.


00:06:44.040 --> 00:06:48.400
So thanks, Raj, for putting together this awesome list.


00:06:48.400 --> 00:06:49.960
- Yeah.


00:06:49.960 --> 00:06:52.200
Well, I can't believe I got this topic.


00:06:52.200 --> 00:06:54.280
You guys, yeah, anyway.


00:06:54.280 --> 00:06:56.400
Python 3.10, so excited.


00:06:56.400 --> 00:06:58.620
Came out two days ago.


00:06:58.620 --> 00:07:00.640
I'm loving it.


00:07:00.640 --> 00:07:02.240
I've switched.


00:07:02.240 --> 00:07:04.640
I'm using it at work, I'm using it at home.


00:07:04.640 --> 00:07:06.360
And it's not like it's new.


00:07:06.360 --> 00:07:09.000
I mean, one of the things there was an article.


00:07:09.000 --> 00:07:11.000
I'll just go through a few topics.


00:07:11.000 --> 00:07:12.680
One, the logo is awesome.


00:07:12.680 --> 00:07:14.560
310 launch logo.


00:07:14.560 --> 00:07:15.160
Super cool.


00:07:15.160 --> 00:07:16.000
Yeah, I love it.


00:07:16.000 --> 00:07:17.800
I want a sticker like that.


00:07:17.800 --> 00:07:19.720
There's a couple of videos that I think


00:07:19.720 --> 00:07:21.640
are good to at least know about.


00:07:21.640 --> 00:07:28.760
There's the launch party that started off with some awesome hats.


00:07:28.760 --> 00:07:30.960
They basically actually walked through


00:07:30.960 --> 00:07:39.040
the entire launch process of going of making 310 live and on on on camera. It's three hours long


00:07:39.040 --> 00:07:44.400
though. I only watched a little bit but uh great hats. This is cool. Yeah so this is by the people


00:07:44.400 --> 00:07:50.320
who are actually releasing. It's not a party celebrating the launch it's the actual launch.


00:07:50.320 --> 00:07:56.880
The actual launch. Right that's awesome. But um uh Jeff Brayans hosted I think that was a


00:07:56.880 --> 00:08:06.560
pre-recorded thing but there was a what's new in Python 3.10 video that I this is more


00:08:06.560 --> 00:08:14.520
consumable at 33 minutes. I watched this while it was live or while it was being broadcast


00:08:14.520 --> 00:08:19.960
at first just a couple days ago and it's really interesting. This one's really great. I thought


00:08:19.960 --> 00:08:24.640
I knew everything that was coming in 3.10. The thing that I really love about this video


00:08:24.640 --> 00:08:32.640
is there's Lucas Lange and I can't remember somebody else talked about, do you know who


00:08:32.640 --> 00:08:33.640
the other person was?


00:08:33.640 --> 00:08:36.840
Sebastian Ramirez and Brant Boucher.


00:08:36.840 --> 00:08:37.840
Okay.


00:08:37.840 --> 00:08:46.840
And Lucas talked about some of the details on, well, a couple of them were talking about


00:08:46.840 --> 00:08:50.200
the, I'm getting this wrong.


00:08:50.200 --> 00:08:51.360
What's the thing?


00:08:51.360 --> 00:08:53.360
The structural pattern matching, that's it.


00:08:53.360 --> 00:08:54.360
Yes.


00:08:54.360 --> 00:08:55.800
Super switch.


00:08:55.800 --> 00:08:58.820
>> Yeah. Is structural pattern matching?


00:08:58.820 --> 00:09:00.200
It's really cool.


00:09:00.200 --> 00:09:02.520
I haven't come up with a reason to use it yet,


00:09:02.520 --> 00:09:05.320
but give me time.


00:09:05.320 --> 00:09:11.240
There was a big discussion on this, which was neat.


00:09:11.240 --> 00:09:13.280
It was a tutorial right there.


00:09:13.280 --> 00:09:18.840
Then also a discussion of why black doesn't work for it yet.


00:09:18.840 --> 00:09:22.640
That was the odd takeaway that I wasn't expecting is,


00:09:22.640 --> 00:09:25.040
If you're really addicted to black,


00:09:25.040 --> 00:09:27.040
you can't use structural pattern


00:09:27.040 --> 00:09:29.200
mashing and black together right now.


00:09:29.200 --> 00:09:32.140
They will catch up, but they have


00:09:32.140 --> 00:09:34.280
two different parsers for Python


00:09:34.280 --> 00:09:37.240
and getting them all cut up will be,


00:09:37.240 --> 00:09:40.080
it'll take a little time, so be patient.


00:09:40.080 --> 00:09:43.280
>> Nice. Yeah, this is big news.


00:09:43.280 --> 00:09:46.000
>> Yeah, that's huge.


00:09:46.000 --> 00:09:51.600
But I guess if you still want to use black,


00:09:51.600 --> 00:09:55.840
you just need to just do formatting off on the block


00:09:55.840 --> 00:09:58.240
when you use pattern matching.


00:09:58.240 --> 00:10:00.840
- You actually have to put it in a different file


00:10:00.840 --> 00:10:05.420
'cause you can't, the format off doesn't work in the file.


00:10:05.420 --> 00:10:07.320
- Oh, really?


00:10:07.320 --> 00:10:08.160
- I tried that.


00:10:08.160 --> 00:10:10.360
- I thought, and it didn't work.


00:10:10.360 --> 00:10:12.160
Interesting. - It didn't work.


00:10:12.160 --> 00:10:14.240
- Oh, that's a bummer.


00:10:14.240 --> 00:10:15.080
Okay.


00:10:15.080 --> 00:10:19.400
- But all the other features of 3TED seem to work fine.


00:10:20.800 --> 00:10:21.920
- Yeah, very nice.


00:10:21.920 --> 00:10:24.000
Some of the things that jump out that are exciting for me


00:10:24.000 --> 00:10:28.600
is X pipe Y versus rather than X,


00:10:28.600 --> 00:10:34.960
you know, union of X comma Y or optional of X


00:10:34.960 --> 00:10:38.680
versus X comma or X pipe none.


00:10:38.680 --> 00:10:39.820
Those are nice.


00:10:39.820 --> 00:10:42.800
The additional type information and better error messages.


00:10:42.800 --> 00:10:44.440
Those are the things that I'm looking forward to.


00:10:44.440 --> 00:10:46.200
Except for I'm not really looking forward to errors.


00:10:46.200 --> 00:10:47.360
I generally don't like that,


00:10:47.360 --> 00:10:50.740
but once you're there, I prefer better error messages.


00:10:50.740 --> 00:10:54.100
I think everybody teaching Python is going to love the error messages.


00:10:54.100 --> 00:10:55.100
So.


00:10:55.100 --> 00:10:59.300
Oh, the error messages are two days ago.


00:10:59.300 --> 00:11:05.260
I was refactoring some code and I had some, well, a bit complex expression.


00:11:05.260 --> 00:11:08.820
It was like, let's do some asserting.


00:11:08.820 --> 00:11:12.980
And so another parenthesis, and I guess I missed something.


00:11:12.980 --> 00:11:18.180
And then I would have, I had this error, like expression is expected.


00:11:18.180 --> 00:11:20.140
And I'm like, what expression?


00:11:20.140 --> 00:11:24.440
So I dare, and I wasted literally like about three minutes


00:11:24.440 --> 00:11:27.160
figuring out what expression it's missing.


00:11:27.160 --> 00:11:30.440
And eventually it ended up like I missed some curly brackets


00:11:30.440 --> 00:11:34.620
and I really expect, I mean, yeah,


00:11:34.620 --> 00:11:36.080
pattern matching is great.


00:11:36.080 --> 00:11:39.940
The type hinting is awesome.


00:11:39.940 --> 00:11:44.840
But those specific like little things, I don't know.


00:11:44.840 --> 00:11:48.200
I think it's like really bumps your dev experience.


00:11:48.200 --> 00:11:49.040
So yeah.


00:11:49.040 --> 00:11:50.380
- Yeah, it definitely does.


00:11:50.380 --> 00:11:53.680
Speaking of better error messages and stuff,


00:11:53.680 --> 00:11:55.600
I'm planning on just integrating a rich,


00:11:55.600 --> 00:11:57.960
like the trace back stuff and all those kinds of things,


00:11:57.960 --> 00:12:00.320
just into all my apps, 'cause it's just better.


00:12:00.320 --> 00:12:04.080
And it's one line of code at the top, so very nice.


00:12:04.080 --> 00:12:05.720
- Yeah, that's cool.


00:12:05.720 --> 00:12:06.840
- Yeah, all right.


00:12:06.840 --> 00:12:07.680
Good one, Brian.


00:12:07.680 --> 00:12:12.260
All right, y'all, you're up with the next one.


00:12:12.260 --> 00:12:18.480
- Yeah, so it's a tool I stumbled upon


00:12:18.600 --> 00:12:23.600
a while ago when I was looking for some kind of a solution


00:12:23.600 --> 00:12:28.840
for bundling all my tools under one umbrella.


00:12:28.840 --> 00:12:35.880
So we have like large code bases,


00:12:35.880 --> 00:12:40.000
we use microservices so that we have a lot of repositories.


00:12:40.000 --> 00:12:43.080
And of course we would like to use some linking


00:12:45.120 --> 00:12:51.800
Python style. And then we added another package because we found it pretty useful called Vulture


00:12:51.800 --> 00:13:00.160
that finds some unused code and points it out that maybe it should be removed or refactored,


00:13:00.160 --> 00:13:02.520
which is quite cool.


00:13:02.520 --> 00:13:09.600
That is a fantastic name for that Lint feature. It goes in Python's dead code. Oh my gosh.


00:13:09.600 --> 00:13:11.600
Yeah, it's pretty cool.


00:13:11.600 --> 00:13:13.200
- Kiran, I just, I love the name.


00:13:13.200 --> 00:13:14.040
- Yeah, yeah.


00:13:14.040 --> 00:13:17.080
That's one of the latest additions.


00:13:17.080 --> 00:13:21.080
And then, because we deal with some security


00:13:21.080 --> 00:13:24.040
and vulnerabilities, we decided also to add


00:13:24.040 --> 00:13:26.120
bandits to the whole party.


00:13:26.120 --> 00:13:29.560
Those are really awesome tools, but


00:13:29.560 --> 00:13:32.320
(audio cuts out)


00:13:32.320 --> 00:13:38.040
in every configuration, like


00:13:39.680 --> 00:13:41.720
Vinter has its own rules, Python style,


00:13:41.720 --> 00:13:43.000
you want to ignore some stuff,


00:13:43.000 --> 00:13:46.640
well, it's kind of a, requires customization.


00:13:46.640 --> 00:13:51.160
So we ended up having like four different customization


00:13:51.160 --> 00:13:53.840
profile files for each tool.


00:13:53.840 --> 00:13:54.920
And that's okay.


00:13:54.920 --> 00:13:56.920
I mean, once you've done it, it's okay.


00:13:56.920 --> 00:14:00.160
But then people started to get really frustrated


00:14:00.160 --> 00:14:03.960
with their CIs because it became a bit slow


00:14:03.960 --> 00:14:06.960
because of the (indistinct)


00:14:08.640 --> 00:14:11.920
And even more so, they become a bit frustrated


00:14:11.920 --> 00:14:14.440
with all the types, all the different outputs.


00:14:14.440 --> 00:14:17.000
So let's say you have issues in piling


00:14:17.000 --> 00:14:19.980
and then you have problems with pipe code style.


00:14:19.980 --> 00:14:24.880
And first we didn't, we just started failing.


00:14:24.880 --> 00:14:27.800
Once you have a failure in piling, you don't proceed.


00:14:27.800 --> 00:14:30.720
So you fix piling and then, okay, yay.


00:14:30.720 --> 00:14:33.280
But then you have errors in pipe code style,


00:14:33.280 --> 00:14:34.120
so on and so on.


00:14:34.120 --> 00:14:36.620
So it was really frustrating.


00:14:36.620 --> 00:14:40.460
So we said, okay, it fails, but let's continue


00:14:40.460 --> 00:14:45.460
and then just speed all the errors done.


00:14:45.460 --> 00:14:49.780
But still people had some issues


00:14:49.780 --> 00:14:51.420
starting reading the outputs


00:14:51.420 --> 00:14:53.980
because it's a different format and they're like,


00:14:53.980 --> 00:14:55.300
okay, what does it want from me?


00:14:55.300 --> 00:14:56.140
What do I do?


00:14:56.140 --> 00:15:01.140
And then the whole thing, the whole experience is,


00:15:01.140 --> 00:15:03.380
okay, I finished working on it,


00:15:03.380 --> 00:15:06.020
I just wanna post it and get a review in it,


00:15:06.020 --> 00:15:07.980
but then I get stuck in this limbo


00:15:07.980 --> 00:15:10.060
fixing all this kind of stuff.


00:15:10.060 --> 00:15:14.940
So we started thinking what can improve the user


00:15:14.940 --> 00:15:18.420
and the dev experience so people won't get frustrated


00:15:18.420 --> 00:15:21.100
with the CI 'cause people want people frustrated with CI


00:15:21.100 --> 00:15:23.780
but they start disabling features


00:15:23.780 --> 00:15:26.180
and that's something that we didn't want.


00:15:26.180 --> 00:15:28.660
- Then your CI starts to lose all its value


00:15:28.660 --> 00:15:30.020
and everything, right?


00:15:30.020 --> 00:15:31.580
- Exactly, exactly.


00:15:31.580 --> 00:15:35.700
So I kind of stumbled on Prospector


00:15:35.700 --> 00:15:39.340
And I say stumble because it was always there.


00:15:39.340 --> 00:15:43.740
It's actually brought by PyCQA, the same guys,


00:15:43.740 --> 00:15:47.420
the same organization that are responsible for piling


00:15:47.420 --> 00:15:48.740
and for PyCon style.


00:15:48.740 --> 00:15:52.540
Somehow I missed the whole bundle thing


00:15:52.540 --> 00:15:54.460
that's called a perfector.


00:15:54.460 --> 00:15:56.820
I guess it's a bit less popular.


00:15:56.820 --> 00:15:59.020
So we started using it.


00:15:59.020 --> 00:16:04.020
It bundled all our analysis tools together in one run


00:16:05.140 --> 00:16:07.620
and in one unified output.


00:16:07.620 --> 00:16:11.020
So it's much easier when you have the output,


00:16:11.020 --> 00:16:15.820
just to read it and understand what's going on.


00:16:15.820 --> 00:16:17.140
And more than that,


00:16:17.140 --> 00:16:21.300
bonuses, we discovered some more tools


00:16:21.300 --> 00:16:24.820
that it provides that we weren't even familiar with,


00:16:24.820 --> 00:16:28.220
such as a McCabe complexity analysis,


00:16:28.220 --> 00:16:32.700
which provides, points out some kind of a,


00:16:32.700 --> 00:16:37.260
like in case you have a very big function


00:16:37.260 --> 00:16:39.260
nested conditions and stuff.


00:16:39.260 --> 00:16:42.540
- Is that like psychromatic complexity and stuff like that?


00:16:42.540 --> 00:16:44.060
- Exactly, yes.


00:16:44.060 --> 00:16:46.860
So there's actually a link there inside


00:16:46.860 --> 00:16:49.020
that takes you to Wikipedia


00:16:49.020 --> 00:16:54.020
and explains how all those things are calculated.


00:16:54.020 --> 00:16:56.100
But it's pretty nice.


00:16:56.100 --> 00:16:59.540
You cannot always follow its rules


00:16:59.540 --> 00:17:02.420
because sometimes you have a complex function


00:17:02.420 --> 00:17:04.900
It's a legacy code and you don't necessarily


00:17:04.900 --> 00:17:08.260
want to mess with it, but it's nice to have this information


00:17:08.260 --> 00:17:10.660
or even put it in backlog.


00:17:10.660 --> 00:17:12.820
So that's something we discovered.


00:17:12.820 --> 00:17:15.100
There's also Pyroma if you do,


00:17:15.100 --> 00:17:21.380
or if you have like some missing, let's say contributor RST


00:17:21.380 --> 00:17:26.380
or so it will point out all the stuff there.


00:17:26.380 --> 00:17:31.500
You have the dodgy package that points out


00:17:31.500 --> 00:17:34.580
if you have like some sensitive data,


00:17:34.580 --> 00:17:37.660
such as passports or like AWS keys


00:17:37.660 --> 00:17:41.700
or things you not necessarily wanna include


00:17:41.700 --> 00:17:43.460
in your code base.


00:17:43.460 --> 00:17:48.460
So a lot of goodies that come with this perspective


00:17:48.460 --> 00:17:52.260
that actually bundles a lot of analysis tools,


00:17:52.260 --> 00:17:57.260
which is cool, but our experience,


00:17:57.260 --> 00:17:59.460
because it's one output,


00:17:59.460 --> 00:18:07.660
And for configuration, which means instead of having like a configuration file for each


00:18:07.660 --> 00:18:11.100
of the tools, you have only one tool, the mode.


00:18:11.100 --> 00:18:17.540
And more than that, you have profiles, which means like, let's say you have at some point


00:18:17.540 --> 00:18:19.540
you would like to run my type.


00:18:19.540 --> 00:18:20.540
Okay.


00:18:20.540 --> 00:18:25.020
But in some point you don't want, like if you are merging to master, maybe you want


00:18:25.020 --> 00:18:28.180
and check vulnerabilities at that point,


00:18:28.180 --> 00:18:31.940
but not on every commit because you're still developing.


00:18:31.940 --> 00:18:35.960
So super useful and surprisingly,


00:18:35.960 --> 00:18:39.660
it runs faster than each tool on its own.


00:18:39.660 --> 00:18:42.780
- Wow, that is super cool.


00:18:42.780 --> 00:18:44.940
- It takes some time, it takes some time.


00:18:44.940 --> 00:18:48.660
I mean, it's not a super fast because first of all,


00:18:48.660 --> 00:18:53.660
it installs all the required tools for just in one bundle


00:18:53.700 --> 00:18:57.100
and the execution is still the same execution


00:18:57.100 --> 00:18:58.900
for all the tools.


00:18:58.900 --> 00:19:01.500
But yeah, it really simplifies things.


00:19:01.500 --> 00:19:03.820
So, high-handed.


00:19:03.820 --> 00:19:06.460
- Cool, good recommendation.


00:19:06.460 --> 00:19:10.100
Out in the live stream, Paul Anzal has a question.


00:19:10.100 --> 00:19:11.100
Not sure if you know the answer.


00:19:11.100 --> 00:19:13.220
Is there a way to add a comment to your code?


00:19:13.220 --> 00:19:15.820
For example, #noprospector,


00:19:15.820 --> 00:19:17.900
to tell it that a given line is actually not a problem,


00:19:17.900 --> 00:19:20.600
similar to how Bandit would disable warnings


00:19:20.600 --> 00:19:21.440
with #nosec?


00:19:22.780 --> 00:19:25.440
- So Prospector is just a bundle.


00:19:25.440 --> 00:19:30.020
It's like behind the scene, it just executes the same tool.


00:19:30.020 --> 00:19:33.900
So you would use the same disabled pylint


00:19:33.900 --> 00:19:36.900
or disabled Python style or no QA.


00:19:36.900 --> 00:19:42.820
So the rules there apply just to each tool differently.


00:19:42.820 --> 00:19:44.460
- Got it, makes sense.


00:19:44.460 --> 00:19:48.020
- Cool.


00:19:48.020 --> 00:19:53.020
- All right, am I up next, Brian?


00:19:53.020 --> 00:19:57.040
- Yes.


00:19:57.040 --> 00:19:58.200
- I think so.


00:19:58.200 --> 00:20:01.780
So another topic on rich,


00:20:01.780 --> 00:20:04.980
I feel like we're always talking about rich now, super fun.


00:20:04.980 --> 00:20:07.780
I actually just had Will McGugan,


00:20:07.780 --> 00:20:08.940
who I see out in the audience,


00:20:08.940 --> 00:20:12.180
hey, Will, on Talk Python, so that was really fun.


00:20:12.180 --> 00:20:15.460
So here's a thing from Avi Pearl,


00:20:15.460 --> 00:20:18.260
Not AviPython, but we'll still accept it.


00:20:18.260 --> 00:20:19.980
Just kidding, that's just last name.


00:20:19.980 --> 00:20:21.460
Thank you Avi for sending this over


00:20:21.460 --> 00:20:22.700
and let us know about it.


00:20:22.700 --> 00:20:28.620
So Kunyan Tran created this cool


00:20:28.620 --> 00:20:32.900
terminal-based visualizer for Panda's data frames.


00:20:32.900 --> 00:20:35.740
So she's into data science and stuff like that.


00:20:35.740 --> 00:20:39.060
And like many things that have to do with rich in UI,


00:20:39.060 --> 00:20:43.180
just having a screen animation is really all you need


00:20:43.180 --> 00:20:45.860
to know whether or not this is useful for you.


00:20:45.860 --> 00:20:48.220
And so you can just go to the website


00:20:48.220 --> 00:20:49.900
that we'll link to, to the GitHub repo,


00:20:49.900 --> 00:20:52.580
and it's got an animated GIF right on the front there.


00:20:52.580 --> 00:20:54.580
Super nice.


00:20:54.580 --> 00:20:57.220
So just imagine you are in a Jupyter notebook


00:20:57.220 --> 00:20:58.820
and you went to a data frame,


00:20:58.820 --> 00:21:01.220
you said df.head or tail, something like that,


00:21:01.220 --> 00:21:02.900
and you get a little table that comes out.


00:21:02.900 --> 00:21:05.780
Well, here's one with animation and color


00:21:05.780 --> 00:21:08.660
and all that stuff as a rich table,


00:21:08.660 --> 00:21:10.900
you know, the rich library,


00:21:10.900 --> 00:21:14.260
generating the table of the data frame right there.


00:21:14.260 --> 00:21:17.860
So if you're creating something in the terminal


00:21:17.860 --> 00:21:20.380
and you want a nice output for a data frame,


00:21:20.380 --> 00:21:21.540
this is pretty simple.


00:21:21.540 --> 00:21:24.660
The code that you gotta write is super easy.


00:21:24.660 --> 00:21:29.660
So for example, you come up with a data frame somehow,


00:21:29.660 --> 00:21:32.820
and then you just say from rich data frame


00:21:32.820 --> 00:21:34.660
and import prettyfy,


00:21:34.660 --> 00:21:38.140
and then just prettyfy your data frame, and that's it.


00:21:38.140 --> 00:21:40.660
Done.


00:21:40.660 --> 00:21:42.740
- Yeah, it's cool, right?


00:21:42.740 --> 00:21:45.940
You can also apply it to just regular dictionaries


00:21:45.940 --> 00:21:46.940
and stuff like that.


00:21:46.940 --> 00:21:50.280
And you can control things like,


00:21:50.280 --> 00:21:52.100
limit the number of rows that come back,


00:21:52.100 --> 00:21:54.060
how many columns will be shown,


00:21:54.060 --> 00:21:56.040
in case there's a ton,


00:21:56.040 --> 00:21:57.180
you don't want it to fill the screen.


00:21:57.180 --> 00:21:59.380
Of course, you can transform your data frame,


00:21:59.380 --> 00:22:00.460
but if you just want a quick, like,


00:22:00.460 --> 00:22:04.080
hey, just show me the first few columns, it'll do that.


00:22:04.080 --> 00:22:07.340
You can either view the head or the tail effectively.


00:22:07.340 --> 00:22:08.180
You know, if you're gonna say,


00:22:08.180 --> 00:22:09.820
give me 20 columns, there's 2000.


00:22:09.820 --> 00:22:12.880
Well, I think that by default it shows the first, the head,


00:22:12.880 --> 00:22:15.280
but you can also show it in reverse.


00:22:15.280 --> 00:22:17.760
You can clear the console so it just fills the screen,


00:22:17.760 --> 00:22:18.600
things like that.


00:22:18.600 --> 00:22:20.560
So even control the animation.


00:22:20.560 --> 00:22:24.360
So not a lot to do with this, but if it's useful to you,


00:22:24.360 --> 00:22:27.980
I think, I mean, like not a lot of gears and ways to use it,


00:22:27.980 --> 00:22:29.280
but I think if it's useful to you,


00:22:29.280 --> 00:22:31.340
you'll really find it interesting.


00:22:31.340 --> 00:22:35.380
- Yeah, all those pretty colors, I like it.


00:22:35.380 --> 00:22:37.920
- Yeah, yeah, yeah, I love the colors.


00:22:37.920 --> 00:22:39.520
So super cool.


00:22:39.520 --> 00:22:41.720
- So Rich has a ton of stuff in it,


00:22:41.720 --> 00:22:45.600
but I mean, I use the tables like all over the place


00:22:45.600 --> 00:22:48.920
because it's just the easiest and prettiest way


00:22:48.920 --> 00:22:52.540
to display a table right now in a CLI application.


00:22:52.540 --> 00:22:54.600
So. - Awesome.


00:22:54.600 --> 00:22:56.240
- I like it, love it.


00:22:56.240 --> 00:22:57.720
- Love it, love it.


00:22:57.720 --> 00:22:59.360
Raw Intel out in the live stream says,


00:22:59.360 --> 00:23:01.080
well, Rich for the win once again,


00:23:01.080 --> 00:23:02.720
looks great for SSH session.


00:23:02.720 --> 00:23:04.880
Yes, it does.


00:23:04.880 --> 00:23:06.680
And I hadn't really even thought about it for that scenario,


00:23:06.680 --> 00:23:08.520
but yeah, it definitely does.


00:23:08.520 --> 00:23:13.520
And Jared says to us, Brian and me,


00:23:13.520 --> 00:23:16.240
I can't thank you enough for all your podcasts


00:23:16.240 --> 00:23:18.760
as great as they are, the video format is even better.


00:23:18.760 --> 00:23:19.800
Jared, thanks for being here.


00:23:19.800 --> 00:23:21.680
We always love having people on the show.


00:23:21.680 --> 00:23:24.200
It gives us a little bit more interactive aspects


00:23:24.200 --> 00:23:27.000
for all the people listening afterwards.


00:23:27.000 --> 00:23:29.880
- Yeah. - With that, Brian, go for it.


00:23:29.880 --> 00:23:34.880
- Oh yeah, I'm gonna go back to 310 for now.


00:23:34.880 --> 00:23:38.340
So I'm like, one of the things I'm excited about


00:23:38.340 --> 00:23:43.020
is the union types like you said for one of the things that was


00:23:43.020 --> 00:23:47.540
released is union types so that you can do X or Y.


00:23:47.540 --> 00:23:50.660
The thing that I really like about this one of the things is


00:23:50.660 --> 00:23:53.980
the optional so you can instead of so if you've got I don't have


00:23:53.980 --> 00:23:58.860
an example here but if you've got a function that takes an


00:23:58.860 --> 00:24:03.940
integer but it might default to none you can now say that the


00:24:03.940 --> 00:24:11.500
type is int or none, and then assign it the default value of none. So it'd be int or none


00:24:11.500 --> 00:24:18.020
equal none. And that's, and it's really clean. One of the nice things about that is you don't


00:24:18.020 --> 00:24:24.420
have to import optional from typing. So that's really clean. But I was I was like, bummed


00:24:24.420 --> 00:24:29.940
because actually a lot of the projects I work on, I have to support more than just 310.


00:24:29.940 --> 00:24:32.020
I've got to support 3.7, 3.8.


00:24:32.020 --> 00:24:34.020
>> What? You haven't already moved to 3.10?


00:24:34.020 --> 00:24:36.220
You guys are such laggards.


00:24:36.220 --> 00:24:38.420
>> It's my application.


00:24:38.420 --> 00:24:40.260
>> You've got two days. Come on.


00:24:40.260 --> 00:24:42.340
>> If you're supporting Python packages,


00:24:42.340 --> 00:24:45.300
you want to support more than just one version of Python,


00:24:45.300 --> 00:24:47.900
a little bit. You don't have to.


00:24:47.900 --> 00:24:48.860
>> No, of course.


00:24:48.860 --> 00:24:50.780
>> If you want to.


00:24:50.780 --> 00:24:55.140
Then I was excited to see that Adam Johnson put out,


00:24:55.140 --> 00:24:59.420
and actually I want to shout out who told me about this.


00:24:59.420 --> 00:25:01.860
Oh, I lost it.


00:25:01.860 --> 00:25:04.440
Somebody else told me about this, so sorry.


00:25:04.440 --> 00:25:07.980
But Adam Johnson wrote an article about type hints,


00:25:07.980 --> 00:25:10.980
how to upgrade syntax with PyUpgrade.


00:25:10.980 --> 00:25:17.740
Anthony Sotile wrote a PyUpgrade tool.


00:25:17.740 --> 00:25:19.420
What it'll do is,


00:25:19.420 --> 00:25:20.540
it does a lot of stuff,


00:25:20.540 --> 00:25:22.300
but one of the things it does is it changes


00:25:22.300 --> 00:25:27.500
this union operator for types.


00:25:27.500 --> 00:25:30.580
And it includes, what does it include?


00:25:30.580 --> 00:25:34.260
The from future import annotations


00:25:34.260 --> 00:25:39.220
that will allow you to use this type,


00:25:39.220 --> 00:25:44.220
union types and none in everything back to Python 3.7.


00:25:44.220 --> 00:25:46.220
So, supposedly. - Very nice.


00:25:46.220 --> 00:25:49.500
- I haven't tried it on 3.7, but that's the claim.


00:25:49.500 --> 00:25:54.520
So there's a nice article on how to upgrade your syntax.


00:25:54.520 --> 00:25:57.140
- This is a tool, like an automatic tool


00:25:57.140 --> 00:26:02.140
- Yeah, it's a pipe grid, so.


00:26:02.140 --> 00:26:03.180
- Very nice.


00:26:03.180 --> 00:26:04.700
Frederick out in the live stream says,


00:26:04.700 --> 00:26:06.740
"The Union Pipe really makes everything


00:26:06.740 --> 00:26:08.300
"a lot less noisy and more readable."


00:26:08.300 --> 00:26:09.140
Love it.


00:26:09.140 --> 00:26:12.120
- Yes.


00:26:12.120 --> 00:26:12.940
- Yael, what are you gonna offer?


00:26:12.940 --> 00:26:13.940
What are you gonna suggest?


00:26:13.940 --> 00:26:20.180
- Oh, the next topic came in.


00:26:20.180 --> 00:26:21.020
- Oh, yeah, sure.


00:26:21.020 --> 00:26:23.340
- Oh, I actually wanted to--


00:26:23.340 --> 00:26:24.180
- Just a comment on that.


00:26:24.180 --> 00:26:25.580
I thought you were gonna have a comment on that,


00:26:25.580 --> 00:26:26.700
the Brian subbing.


00:26:26.700 --> 00:26:29.740
I actually will comment because I really like the


00:26:29.740 --> 00:26:37.460
Upgrade stuff because I kind of feel that lately we have I enjoy type annotations


00:26:37.460 --> 00:26:39.300
but like with each version


00:26:39.300 --> 00:26:46.140
I mean have like a little bit of change and then you have to apply the previous one and then


00:26:46.140 --> 00:26:53.820
Like what I would love to see is like some kind of a convention on how to do type hinting


00:26:54.460 --> 00:26:57.620
correctly because there are so many versions.


00:26:57.620 --> 00:27:00.780
And well, because I'm a bit lazy,


00:27:00.780 --> 00:27:04.660
I don't always use type annotations, but I know I should.


00:27:04.660 --> 00:27:07.220
And then I use some kind of,


00:27:07.220 --> 00:27:10.540
I use the tools like the multi-type


00:27:10.540 --> 00:27:13.020
and sometimes I annotate.


00:27:13.020 --> 00:27:17.920
So they just add type annotations during run time.


00:27:17.920 --> 00:27:23.580
And then it's a kind of a,


00:27:23.580 --> 00:27:28.540
then I kind of have some kind of a convention there


00:27:28.540 --> 00:27:31.940
because I feel like type annotation,


00:27:31.940 --> 00:27:34.420
you can do it in so many ways.


00:27:34.420 --> 00:27:36.860
- Yeah, it's a little bit like string formatting.


00:27:36.860 --> 00:27:40.100
- Exactly, but eventually we all,


00:27:40.100 --> 00:27:42.500
I think we can all agree that f-strings


00:27:42.500 --> 00:27:43.940
is the way to go, right?


00:27:43.940 --> 00:27:47.300
But right now we're kind of in a wild, wild west


00:27:47.300 --> 00:27:50.540
with type annotations because we have those


00:27:50.540 --> 00:27:55.540
since 3.3, I think.


00:27:55.540 --> 00:28:01.060
But they're evolving, like each new Python version,


00:28:01.060 --> 00:28:02.740
you have something new,


00:28:02.740 --> 00:28:06.940
and then the old becomes obsolete or frowned upon,


00:28:06.940 --> 00:28:08.660
and then you're, oh, you shouldn't do it like that.


00:28:08.660 --> 00:28:10.940
But what I would like to see,


00:28:10.940 --> 00:28:14.820
maybe a tool such as PyUpgrade that will tell me,


00:28:14.820 --> 00:28:16.500
okay, this is the convention,


00:28:16.500 --> 00:28:21.300
this is how you should be doing your type hinting


00:28:21.300 --> 00:28:22.660
from now on.


00:28:22.660 --> 00:28:23.480
- So good idea.


00:28:23.480 --> 00:28:24.320
We saw you doing the old way,


00:28:24.320 --> 00:28:25.620
here's the new way, do that.


00:28:25.620 --> 00:28:27.340
- Yeah.


00:28:27.340 --> 00:28:33.100
I'm lazy and I'm gonna do it.


00:28:33.100 --> 00:28:36.240
Not entirely, it's not a built in feature still,


00:28:36.240 --> 00:28:38.620
like you're using type annotation.


00:28:38.620 --> 00:28:40.220
I see a lot of Python users,


00:28:40.220 --> 00:28:42.100
just it's fluent for them,


00:28:42.100 --> 00:28:44.180
and for me it's like, okay, I'll write my code


00:28:44.180 --> 00:28:48.160
and then, okay, I'll start using some type painting.


00:28:48.160 --> 00:28:50.660
- Yeah, sounds good.


00:28:50.660 --> 00:28:52.780
- Yeah, I think PyUpgrade is the trick.


00:28:52.780 --> 00:28:54.300
So it does do a lot of these,


00:28:54.300 --> 00:28:57.940
like going from uppercase list to lowercase list


00:28:57.940 --> 00:29:01.700
and switching away from optional and things like that.


00:29:01.700 --> 00:29:03.620
- I may be running this later today.


00:29:03.620 --> 00:29:04.620
This is looking good.


00:29:04.620 --> 00:29:09.580
- Some kind of a type formatter,


00:29:09.580 --> 00:29:11.900
just make it like it should be.


00:29:12.940 --> 00:29:16.180
That's what I would like to see, yeah.


00:29:16.180 --> 00:29:17.020
- Exactly.


00:29:17.020 --> 00:29:19.900
And you know what time it is?


00:29:19.900 --> 00:29:21.120
- Extra time.


00:29:21.120 --> 00:29:22.740
- Extra time.


00:29:22.740 --> 00:29:24.260
You got anything you wanna put up there?


00:29:24.260 --> 00:29:25.980
Throw out for people?


00:29:25.980 --> 00:29:28.020
- Yeah, actually I don't have any links for it,


00:29:28.020 --> 00:29:30.580
but I should have had links up.


00:29:30.580 --> 00:29:34.580
But I was, this is hard for me to believe actually,


00:29:34.580 --> 00:29:39.580
but in like 2017, a long time ago, 2017, 2018,


00:29:40.100 --> 00:29:44.940
I submitted a defect to pytest, the pytest project,


00:29:44.940 --> 00:29:49.940
and then I also wrote up a test to describe the defect,


00:29:49.940 --> 00:29:51.940
but I didn't know how to fix it.


00:29:51.940 --> 00:29:54.500
So that was my first contribution to pytest


00:29:54.500 --> 00:29:56.820
is adding test code.


00:29:56.820 --> 00:30:01.820
But this last week I added two, had two pull requests,


00:30:01.820 --> 00:30:06.140
and they both got accepted and merged.


00:30:06.140 --> 00:30:07.540
So the next version of pytest


00:30:07.540 --> 00:30:09.900
will actually have my code in it, so.


00:30:09.900 --> 00:30:10.900
- Super cool.


00:30:10.900 --> 00:30:12.660
Very cool.


00:30:12.660 --> 00:30:15.140
Hey, I just realized we skipped Yael's final thing.


00:30:15.140 --> 00:30:15.980
Darker.


00:30:15.980 --> 00:30:16.800
- Oh, right.


00:30:16.800 --> 00:30:17.640
- Yeah, sorry.


00:30:17.640 --> 00:30:18.480
Yeah, tell us about that before we get


00:30:18.480 --> 00:30:19.480
to the rest of the extras.


00:30:19.480 --> 00:30:20.640
- That's fine.


00:30:20.640 --> 00:30:26.300
- I feel like you've got these cool ways


00:30:26.300 --> 00:30:28.260
to like bring together multiple tools.


00:30:28.260 --> 00:30:30.020
Instead of telling people about Bandit,


00:30:30.020 --> 00:30:31.740
you're like, here's how to use Bandit, all these things.


00:30:31.740 --> 00:30:32.860
Or instead of black,


00:30:32.860 --> 00:30:35.300
here's how to like do all these different things.


00:30:35.300 --> 00:30:37.540
- Yeah, yeah.


00:30:37.540 --> 00:30:39.540
I kind of like combining things


00:30:39.540 --> 00:30:42.060
and then make it more general.


00:30:42.060 --> 00:30:46.700
Because, I mean, the Python ecosystem is so rich.


00:30:46.700 --> 00:30:48.660
There are so many things.


00:30:48.660 --> 00:30:49.700
Yeah.


00:30:49.700 --> 00:30:52.940
So it's nice to bring some stuff together, bundled,


00:30:52.940 --> 00:30:55.820
and easy to use.


00:30:55.820 --> 00:30:59.820
So darter is something also I stumble--


00:30:59.820 --> 00:31:02.100
well, I was recommended by a friend


00:31:02.100 --> 00:31:08.420
after describing a problem or my resentment,


00:31:08.420 --> 00:31:10.340
even to black formatter.


00:31:10.340 --> 00:31:15.100
I know it's not a popular take,


00:31:15.100 --> 00:31:16.100
maybe I shouldn't say it,


00:31:16.100 --> 00:31:19.740
but until recently I was kind of,


00:31:19.740 --> 00:31:23.940
it's not that I don't enjoy black formatting.


00:31:23.940 --> 00:31:27.820
I think it looks great, it's more readable, it's nice.


00:31:27.820 --> 00:31:31.060
But I had some major issues with,


00:31:31.060 --> 00:31:33.420
well, with myself and colleagues


00:31:33.420 --> 00:31:36.060
that you get sometimes over-enthusiastic.


00:31:36.060 --> 00:31:38.600
Like, okay, I start to write some code


00:31:38.600 --> 00:31:42.540
and I don't know if it's a bug fix or I'm adding some feature


00:31:42.540 --> 00:31:46.180
and I'm done, but then yay, I wanna make it black


00:31:46.180 --> 00:31:47.680
because it's cool.


00:31:47.680 --> 00:31:49.780
And then I run black on the model


00:31:49.780 --> 00:31:52.820
or sometimes if I really wanna,


00:31:52.820 --> 00:31:57.280
I'll run it on the entire package.


00:31:57.280 --> 00:32:01.300
And then I submit my PR and my PR


00:32:03.300 --> 00:32:08.300
I have like one, I don't know, some hundred changed files


00:32:08.300 --> 00:32:12.220
because I ran black or even if it's in the model,


00:32:12.220 --> 00:32:15.740
like the whole model is like brand new.


00:32:15.740 --> 00:32:19.940
And if I have to review such code, I would say,


00:32:19.940 --> 00:32:21.180
okay, where to start?


00:32:21.180 --> 00:32:22.020
Where do I begin?


00:32:22.020 --> 00:32:22.860
Because I don't know what--


00:32:22.860 --> 00:32:24.700
- Why are there so many changes, right?


00:32:24.700 --> 00:32:25.540
- What changes, right?


00:32:25.540 --> 00:32:26.380
- Yeah, I mean, I don't know.


00:32:26.380 --> 00:32:27.700
I mean, I don't know what's going on.


00:32:27.700 --> 00:32:28.540
I don't know what's going on.


00:32:28.540 --> 00:32:29.380
I don't know what's going on.


00:32:29.380 --> 00:32:30.220
I don't know what's going on.


00:32:30.220 --> 00:32:31.060
I don't know what's going on.


00:32:31.060 --> 00:32:31.900
I don't know what's going on.


00:32:31.900 --> 00:32:34.540
There's so many changes, right?


00:32:34.540 --> 00:32:38.060
Yeah, and it became a real issue because on one hand,


00:32:38.060 --> 00:32:41.980
we had a lot of developers that were really into black,


00:32:41.980 --> 00:32:46.860
let's make everything black, let's make everything beautiful.


00:32:46.860 --> 00:32:50.740
And on the other hand, we would get those huge PRs.


00:32:50.740 --> 00:32:52.260
Like, OK, where do I start?


00:32:52.260 --> 00:32:54.380
Where do I even start?


00:32:54.380 --> 00:32:56.300
So we started restricting black.


00:32:56.300 --> 00:32:59.260
We said, at some point, as a group,


00:32:59.260 --> 00:33:01.940
We decided, okay, no more black.


00:33:01.940 --> 00:33:04.340
But that was also very frustrating.


00:33:04.340 --> 00:33:09.340
And then I had some talks with a friend of mine


00:33:09.340 --> 00:33:13.100
and say, okay, you should use darker.


00:33:13.100 --> 00:33:17.540
Darker is a really tiny, it's not a big package.


00:33:17.540 --> 00:33:20.140
That's a very lightweight.


00:33:20.140 --> 00:33:25.140
And what it does, it takes a little bit more


00:33:25.140 --> 00:33:26.580
conservative approach.


00:33:26.580 --> 00:33:29.140
It doesn't say, okay, just black everything


00:33:29.140 --> 00:33:31.100
and have a huge PR.


00:33:31.100 --> 00:33:36.100
It says, okay, you want to have to convert your code


00:33:36.100 --> 00:33:41.380
being beautiful and black, but let's make it gradually.


00:33:41.380 --> 00:33:46.580
And then you have, and then you eliminate this huge PR


00:33:46.580 --> 00:33:50.940
and this huge mess, just change the stuff you need,


00:33:50.940 --> 00:33:53.820
run a Docker just on the file,


00:33:53.820 --> 00:33:57.220
or even on the entire code base.


00:33:57.220 --> 00:34:00.500
and then it will format only the changes


00:34:00.500 --> 00:34:02.220
you made in the file.


00:34:02.220 --> 00:34:07.820
So here's, I think, let's see.


00:34:07.820 --> 00:34:10.780
- Yeah, that's cool. - Nice example here.


00:34:10.780 --> 00:34:14.980
- I love that it runs on the last Git changes.


00:34:14.980 --> 00:34:18.040
- Exactly, it's actually does, it's very simple.


00:34:18.040 --> 00:34:20.980
I can't believe no one thought of it before.


00:34:20.980 --> 00:34:23.900
It's like so simple because what it does,


00:34:23.900 --> 00:34:27.740
just without git diff, gets the changes,


00:34:27.740 --> 00:34:32.020
and then just runs black formatting on those changes.


00:34:32.020 --> 00:34:36.900
And then you have a normal looking PR with nice formatting.


00:34:36.900 --> 00:34:41.300
And yeah, you won't get the whole beautiful black


00:34:41.300 --> 00:34:42.140
all in one.


00:34:42.140 --> 00:34:51.140
But eventually, I think it's more this way.


00:34:53.780 --> 00:34:57.560
And we started using it a couple of months ago.


00:34:57.560 --> 00:35:00.140
And I think it has a good progress.


00:35:00.140 --> 00:35:04.540
And we just integrated it into our pre-commit hooks.


00:35:04.540 --> 00:35:05.820
So it's kind of seamless.


00:35:05.820 --> 00:35:08.420
It's not that you need to remember running black.


00:35:08.420 --> 00:35:12.880
Of course you can also integrate it in PyCharm or VS Code.


00:35:12.880 --> 00:35:14.220
I think even Vim,


00:35:14.220 --> 00:35:18.380
for people who are fond of Vim and stuff.


00:35:18.380 --> 00:35:19.860
I think that's kind of a flag.


00:35:19.860 --> 00:35:21.820
- I don't know who would do that.


00:35:21.820 --> 00:35:23.300
- Yeah, I don't know.


00:35:23.300 --> 00:35:25.800
Who are those people anyways?


00:35:25.800 --> 00:35:27.820
(laughing)


00:35:27.820 --> 00:35:30.260
But yeah, so it's simple.


00:35:30.260 --> 00:35:35.020
It's really nice and made by,


00:35:35.020 --> 00:35:39.020
I hope I'll get them right.


00:35:39.020 --> 00:35:44.020
Auntie, Auntie Kahoyla, yes.


00:35:44.020 --> 00:35:46.520
- Yeah, awesome.


00:35:46.520 --> 00:35:48.100
I think this is great.


00:35:48.100 --> 00:35:51.280
Paul out in the audience has an interesting bit of feedback.


00:35:51.280 --> 00:35:52.300
This would be super helpful


00:35:52.300 --> 00:35:54.260
if you're starting to enforce code standards


00:35:54.260 --> 00:35:56.260
on an already existent repo,


00:35:56.260 --> 00:35:58.380
which is most kind of code he works with.


00:35:58.380 --> 00:35:59.640
- Right. - So, yeah.


00:35:59.640 --> 00:36:00.480
- Yeah.


00:36:00.480 --> 00:36:02.740
- Yeah, if you're starting like new projects,


00:36:02.740 --> 00:36:07.340
so yeah, black it all the way, that's fine.


00:36:07.340 --> 00:36:11.380
- Yeah, I've heard recommendations before


00:36:11.380 --> 00:36:15.420
to just have one commit that just does the black thing,


00:36:15.420 --> 00:36:16.740
but one of the problems with that


00:36:16.740 --> 00:36:18.640
is you lose sort of the history


00:36:18.640 --> 00:36:22.140
of when the file really was last modified.


00:36:22.140 --> 00:36:24.800
So if a file hasn't been touched in two years,


00:36:24.800 --> 00:36:28.540
it's kind of nice to leave it as not touched for two years


00:36:28.540 --> 00:36:31.940
so that you can kind of see the history.


00:36:31.940 --> 00:36:32.940
- Yeah. - Yeah.


00:36:32.940 --> 00:36:33.780
- For sure.


00:36:33.780 --> 00:36:35.700
- Because if you'll run black


00:36:35.700 --> 00:36:38.500
and on a five year old code base,


00:36:38.500 --> 00:36:43.340
it would look like you did it all from the beginning.


00:36:43.340 --> 00:36:45.560
- On the other hand, if you were up your commit status,


00:36:45.560 --> 00:36:49.100
number of lines changed way more than the rest of the team,


00:36:49.100 --> 00:36:49.940
you can always do that.


00:36:49.940 --> 00:36:51.860
- Yeah, yeah, you could.


00:36:51.860 --> 00:36:52.920
(laughing)


00:36:52.920 --> 00:36:53.760
- All right.


00:36:53.760 --> 00:36:55.320
I know y'all, you have a couple of things


00:36:55.320 --> 00:36:57.640
that you wanna give a shout out to at the end here as well.


00:36:57.640 --> 00:36:59.640
So let's just keep going with those.


00:36:59.640 --> 00:37:01.440
- Yeah, sure.


00:37:01.440 --> 00:37:04.280
So I have two things.


00:37:04.280 --> 00:37:07.760
The first one is actually a colleague of mine


00:37:07.760 --> 00:37:11.160
and he's been writing a book, a very interesting book.


00:37:11.160 --> 00:37:16.160
A bit of a controversial book if you dive into it.


00:37:16.160 --> 00:37:18.920
What he basically says,


00:37:20.600 --> 00:37:29.560
Object-oriented is good for some, but in general, when you deal with complex problems,


00:37:29.560 --> 00:37:39.320
object-oriented programming might even make stuff a lot more complicated in terms of debugging,


00:37:39.320 --> 00:37:43.560
in terms of separation of concerns.


00:37:43.560 --> 00:37:49.280
And then he presents some kind of a new way


00:37:49.280 --> 00:37:53.920
to deal with the data and how we process data.


00:37:53.920 --> 00:37:57.880
So it's data-oriented programming.


00:37:57.880 --> 00:38:04.120
I have to admit, I read some of the chapters.


00:38:04.120 --> 00:38:04.720
Not all.


00:38:04.720 --> 00:38:05.880
I didn't finish the book.


00:38:05.880 --> 00:38:08.520
It's still-- it's also still work in progress,


00:38:08.520 --> 00:38:09.600
but most of it's complete.


00:38:09.600 --> 00:38:13.600
But you don't have to agree on everything,


00:38:13.600 --> 00:38:17.800
but all approaches, the combination


00:38:17.800 --> 00:38:22.760
of data-oriented programming with functional programming,


00:38:22.760 --> 00:38:24.960
I think there are some benefits to it.


00:38:24.960 --> 00:38:30.480
And some complex problems can be solved faster and easier


00:38:30.480 --> 00:38:34.240
and with less debugging strain.


00:38:34.240 --> 00:38:37.920
Like for me, I have this rule of thumb


00:38:37.920 --> 00:38:42.920
that if I have to activate debugger over and over again


00:38:42.920 --> 00:38:46.460
to understand what the code does,


00:38:46.460 --> 00:38:48.500
instead of just reading the code,


00:38:48.500 --> 00:38:53.500
it means that something with the code is not 100% right.


00:38:53.500 --> 00:38:57.740
Because the code should be readable.


00:38:57.740 --> 00:39:00.820
And I encountered this issues when working


00:39:00.820 --> 00:39:05.820
with very heavy object-oriented code bases,


00:39:06.260 --> 00:39:09.300
like a lot of inheritance and multi-inheritance,


00:39:09.300 --> 00:39:11.860
and then I went to Django and they use mixed in.


00:39:11.860 --> 00:39:14.360
It is hard.


00:39:14.360 --> 00:39:18.860
It is hard to design, it is hard to,


00:39:18.860 --> 00:39:20.860
but mostly it is hard to read.


00:39:20.860 --> 00:39:23.340
And this approach, it's interesting.


00:39:23.340 --> 00:39:25.820
As I said, I'm not fully,


00:39:25.820 --> 00:39:27.980
like I'm not fully agree that,


00:39:27.980 --> 00:39:31.220
okay, object-oriented should be gone from the world.


00:39:31.220 --> 00:39:34.540
It's not my stand, but I think--


00:39:34.540 --> 00:39:37.740
Some people have made that stand, but it still is around, isn't it?


00:39:37.740 --> 00:39:43.580
Yeah, but I'm not completely sure.


00:39:43.580 --> 00:39:50.580
But I think in some cases, there are approaches that are much more lightweight


00:39:50.580 --> 00:39:57.860
and the whole thing with data versus code separation, I think it's nice.


00:39:57.860 --> 00:39:59.100
I think it's...


00:39:59.100 --> 00:39:59.580
Nice.


00:39:59.580 --> 00:40:01.940
And it's kind of, yeah, it kind of change,


00:40:01.940 --> 00:40:05.540
rewires your brain a bit after you read the chapter


00:40:05.540 --> 00:40:07.140
to like make you--


00:40:07.140 --> 00:40:09.260
- Maybe it's one of those things like functional programming


00:40:09.260 --> 00:40:10.540
you don't necessarily do it all the time,


00:40:10.540 --> 00:40:12.900
but you read it and it gives you a different perspective


00:40:12.900 --> 00:40:15.420
even if you don't totally adopt it.


00:40:15.420 --> 00:40:16.260
- Yeah, exactly.


00:40:16.260 --> 00:40:17.340
- That's a good thing.


00:40:17.340 --> 00:40:18.180
- Yeah. - Yeah.


00:40:18.180 --> 00:40:22.460
Okay. - All right.


00:40:22.460 --> 00:40:26.180
- Yeah, a little bit self-promotion here.


00:40:26.180 --> 00:40:31.060
So a few months ago, I released my first open source project.


00:40:31.060 --> 00:40:37.420
Cornell was actually covered by Brian, I think,


00:40:37.420 --> 00:40:39.300
two months ago.


00:40:39.300 --> 00:40:43.460
Yeah, so I just wanted to do a little shout out


00:40:43.460 --> 00:40:46.460
to all developers out there who are looking


00:40:46.460 --> 00:40:50.420
to contribute to a little but nice,


00:40:50.420 --> 00:40:55.460
with a very nice documentation project.


00:40:55.460 --> 00:40:57.340
It's only the beginning.


00:40:57.340 --> 00:41:05.020
What it does is it's actually a record and replay server for mock.


00:41:05.020 --> 00:41:09.100
It's a mock server that records the real data


00:41:09.100 --> 00:41:12.980
and then can be used as part of a CI


00:41:12.980 --> 00:41:17.620
and for purposes of end-to-end testing.


00:41:17.620 --> 00:41:21.500
Because if you have some kind of an entry point


00:41:21.500 --> 00:41:25.700
that starts a cascade of events, including salary or whatever.


00:41:25.700 --> 00:41:30.140
And just then, eventually you reach the part


00:41:30.140 --> 00:41:34.700
when you go out and send an HTTP request.


00:41:34.700 --> 00:41:36.940
So here, Cornell comes in handy.


00:41:36.940 --> 00:41:38.740
We use it quite a lot.


00:41:38.740 --> 00:41:44.500
Previous company, and I'm trying to now integrate it


00:41:44.500 --> 00:41:46.740
in my current workplace.


00:41:46.740 --> 00:41:49.080
And I think it has some potential.


00:41:50.660 --> 00:41:52.700
And it's not very mature.


00:41:52.700 --> 00:41:55.300
So I would love, like really, if someone


00:41:55.300 --> 00:42:00.580
wants to contribute even a typo or documentation or whatever,


00:42:00.580 --> 00:42:05.260
we really warmly welcome all contributions.


00:42:05.260 --> 00:42:07.300
Yeah, that's great.


00:42:07.300 --> 00:42:09.060
Brian asked me on that episode where


00:42:09.060 --> 00:42:10.740
I thought the name came from.


00:42:10.740 --> 00:42:14.100
And I thought Chris Cornell from Soundgarden and all that.


00:42:14.100 --> 00:42:15.740
Is that correct?


00:42:15.740 --> 00:42:17.660
Black Hole Sun and all those things?


00:42:17.660 --> 00:42:21.980
- Well, you see the face, what the face reminds you of.


00:42:21.980 --> 00:42:22.820
- Yeah, it does now.


00:42:22.820 --> 00:42:23.940
I don't think I saw it,


00:42:23.940 --> 00:42:25.140
I didn't teach you that before,


00:42:25.140 --> 00:42:26.900
but yeah, now that I see it,


00:42:26.900 --> 00:42:29.500
I'm more confident in my answer.


00:42:29.500 --> 00:42:31.820
- Yeah, you were correct, indeed.


00:42:31.820 --> 00:42:34.260
- Right on, right on.


00:42:34.260 --> 00:42:35.740
All right, well, I got a few more extras


00:42:35.740 --> 00:42:37.580
to share with the world.


00:42:37.580 --> 00:42:41.740
Let's see, I just, like literally midnight last night,


00:42:41.740 --> 00:42:42.660
released a new course,


00:42:42.660 --> 00:42:45.980
"HTMX + Flask, Modern Web Apps Hold the JavaScript."


00:42:45.980 --> 00:42:48.740
So this is a three hour course that like dives into


00:42:48.740 --> 00:42:53.620
cool ways of putting HTMX and Flask together.


00:42:53.620 --> 00:42:56.060
And it also brings together some of the other things


00:42:56.060 --> 00:42:58.140
we've talked about on the podcast before.


00:42:58.140 --> 00:43:00.820
When I was creating this course,


00:43:00.820 --> 00:43:04.820
I didn't really like the way that you would reuse HTML.


00:43:04.820 --> 00:43:06.740
I have a lot of duplication and other crummy stuff.


00:43:06.740 --> 00:43:08.520
So I created the Jinja partials


00:43:08.520 --> 00:43:12.060
and Chameleon partials projects to make this code better.


00:43:12.060 --> 00:43:15.420
But anyone who uses HTMX with Jinja or Chameleon


00:43:15.420 --> 00:43:16.580
So definitely check those out.


00:43:16.580 --> 00:43:17.460
That's covered in the course.


00:43:17.460 --> 00:43:19.700
There's also just links to it.


00:43:19.700 --> 00:43:21.060
Course does cost money, but you can go


00:43:21.060 --> 00:43:24.100
and get the GitHub repo and check out the stuff there.


00:43:24.100 --> 00:43:24.980
So that's really cool.


00:43:24.980 --> 00:43:27.060
We built like a really fun little app there


00:43:27.060 --> 00:43:28.900
and add a bunch of HTMX things to it.


00:43:28.900 --> 00:43:31.000
So link in the show notes, check that out.


00:43:31.000 --> 00:43:35.880
Auto-optional, we've got an update, an update from Dan.


00:43:35.880 --> 00:43:39.140
So Brian, did you cover this?


00:43:39.140 --> 00:43:40.940
I covered this last time, I think.


00:43:40.940 --> 00:43:43.340
But the update is, yeah, we were talking about


00:43:43.340 --> 00:43:54.340
So it'll go and do auto optional stuff where if you say something is like,


00:43:54.340 --> 00:43:58.340
x colon int equals none as a default value, it goes, no, no, no, no, no,


00:43:58.340 --> 00:43:59.340
that doesn't make sense.


00:43:59.340 --> 00:44:05.340
So it'll create an optional of int automatically and correct the typing.


00:44:05.340 --> 00:44:08.340
But we made the comment, Brian, I think maybe you did, I can't remember who,


00:44:08.340 --> 00:44:11.340
but said, "Oh, it'd be really cool if we could use the pipe syntax


00:44:11.340 --> 00:44:13.020
that we just talked about earlier.


00:44:13.020 --> 00:44:16.580
So auto-optional has been updated to create xpipenone


00:44:16.580 --> 00:44:20.060
instead of optional of x, which is really cool.


00:44:20.060 --> 00:44:21.380
Yeah, I love it.


00:44:21.380 --> 00:44:24.020
I love how the podcast helps bring some of this feedback


00:44:24.020 --> 00:44:24.860
to the world.


00:44:24.860 --> 00:44:25.700
- Change the world.


00:44:25.700 --> 00:44:26.780
- That's right.


00:44:26.780 --> 00:44:28.980
We have made a dent in the universe, Brian,


00:44:28.980 --> 00:44:30.660
and it is xpipenone.


00:44:30.660 --> 00:44:34.860
Okay, coverage, Ned Batchelder just released coverage


00:44:34.860 --> 00:44:36.100
on Monday.


00:44:36.100 --> 00:44:38.680
So coverage six, which is a major reason.


00:44:38.680 --> 00:44:41.260
Python 2 has been expelled from coverage,


00:44:41.260 --> 00:44:42.680
which is all good.


00:44:42.680 --> 00:44:45.620
And 30 third-party packages are automatically ignored,


00:44:45.620 --> 00:44:48.060
which could be a big change for some people.


00:44:48.060 --> 00:44:49.020
All right, a bunch of other stuff.


00:44:49.020 --> 00:44:50.540
You can check it out if you care a lot.


00:44:50.540 --> 00:44:53.420
Django 3.2.8 is out with a couple of bug fixes


00:44:53.420 --> 00:44:55.700
about read-only fields and admin


00:44:55.700 --> 00:44:58.380
and some regression bug going on.


00:44:58.380 --> 00:45:00.280
So check that out as well.


00:45:00.280 --> 00:45:03.220
- Sweet.


00:45:03.220 --> 00:45:04.060
- Yep.


00:45:04.060 --> 00:45:07.700
Well, I guess this might be a time for a joke.


00:45:07.700 --> 00:45:09.380
Shall we finish it with a joke?


00:45:09.380 --> 00:45:10.700
- Yes. - As we often do.


00:45:10.700 --> 00:45:14.700
- All right, going back to the very reliable


00:45:14.700 --> 00:45:18.800
Geek and Poke here, we have paired Captcha,


00:45:18.800 --> 00:45:21.660
as in reCaptcha, you know, the little pop up


00:45:21.660 --> 00:45:24.020
and you get the different panels that you gotta say,


00:45:24.020 --> 00:45:26.460
like click all of the crosswalks


00:45:26.460 --> 00:45:30.060
or click all of the dogs or whatever.


00:45:30.060 --> 00:45:35.060
All right, Brian, let's do this together like last time.


00:45:35.060 --> 00:45:40.020
I'll do the first one, the woman developer


00:45:40.020 --> 00:45:43.220
or just computer user trying to get through this.


00:45:43.220 --> 00:45:47.460
So is this a traffic light or just a light?


00:45:47.460 --> 00:45:48.300
- No idea.


00:45:48.300 --> 00:45:51.600
I guess I would guess a traffic light.


00:45:51.600 --> 00:45:55.180
- Nope.


00:45:55.180 --> 00:45:57.880
(laughing)


00:45:57.880 --> 00:45:59.580
Does the gray pixel in the corner


00:45:59.580 --> 00:46:01.860
also belong to the street sign?


00:46:01.860 --> 00:46:03.540
And on and on it goes.


00:46:03.540 --> 00:46:05.800
(laughing)


00:46:06.900 --> 00:46:10.580
- A sad statement on our digital existence.


00:46:10.580 --> 00:46:12.580
- There's been some where I'm stumped.


00:46:12.580 --> 00:46:15.300
I'm like, I don't know.


00:46:15.300 --> 00:46:16.140
- I know.


00:46:16.140 --> 00:46:17.960
- Next question, please.


00:46:17.960 --> 00:46:23.300
- Sometimes I just wrong three times in a row.


00:46:23.300 --> 00:46:24.740
So embarrassing.


00:46:24.740 --> 00:46:26.420
Am I a machine?


00:46:26.420 --> 00:46:30.980
- I couldn't find all the mountains.


00:46:30.980 --> 00:46:33.220
Yeah, the worst is when you find all this stuff correctly,


00:46:33.220 --> 00:46:36.220
then it refreshes and go find some more of them.


00:46:36.220 --> 00:46:37.060
I just found them all.


00:46:37.060 --> 00:46:39.260
Why are you doing this to me?


00:46:39.260 --> 00:46:41.780
- You seem like you like to find traffic lights.


00:46:41.780 --> 00:46:43.580
Here, have some more.


00:46:43.580 --> 00:46:44.660
- You look bored.


00:46:44.660 --> 00:46:46.260
We got some more lights for you.


00:46:46.260 --> 00:46:50.820
All right, well, that's the joke I brought for you all.


00:46:50.820 --> 00:46:52.380
- Well, thanks.


00:46:52.380 --> 00:46:53.740
And I appreciate you finding them.


00:46:53.740 --> 00:46:55.940
That's cool.


00:46:55.940 --> 00:46:57.700
So thanks a lot, everybody.


00:46:57.700 --> 00:46:59.300
And we'll wrap it up for today.


00:46:59.300 --> 00:47:02.740
And thanks everybody on the stream for joining us.


00:47:02.740 --> 00:47:04.580
We really appreciate it.


00:47:04.580 --> 00:47:05.420
- Yeah, thanks.


00:47:05.420 --> 00:47:07.780
- Yeah, thank you especially for being here.


00:47:07.780 --> 00:47:09.860
- Yeah, it was really fun.


00:47:09.860 --> 00:47:10.700
Thank you.


00:47:10.700 --> 00:47:20.700
[BLANK_AUDIO]

