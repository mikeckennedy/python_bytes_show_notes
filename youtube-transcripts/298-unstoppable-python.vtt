WEBVTT

00:00:00.000 --> 00:00:04.120
>> Hey, YouTube. Hey, Brian.


00:00:04.120 --> 00:00:05.240
>> Hey.


00:00:05.240 --> 00:00:08.160
>> Hey, great to be here with you as always.


00:00:08.160 --> 00:00:09.720
>> Good to see you.


00:00:09.720 --> 00:00:11.440
>> Those of you watching live,


00:00:11.440 --> 00:00:12.880
awesome to have you here.


00:00:12.880 --> 00:00:15.280
Those of you watching replay, thanks for that.


00:00:15.280 --> 00:00:17.600
But yeah, for those in live audience,


00:00:17.600 --> 00:00:21.000
please throw your comments and chat and ideas in the live chat.


00:00:21.000 --> 00:00:25.280
We love to focus on them and make them part of the show.


00:00:25.280 --> 00:00:28.720
That makes sense. All right. Let's kick this thing off, Brian.


00:00:28.720 --> 00:00:30.360
- Okay, yeah.


00:00:30.360 --> 00:00:31.200
- Right on.


00:00:31.200 --> 00:00:36.400
Hello and welcome to Python Bytes


00:00:36.400 --> 00:00:38.080
where we deliver Python news and headlines


00:00:38.080 --> 00:00:40.120
directly to your earbuds.


00:00:40.120 --> 00:00:45.120
This is episode 298, just too short of 300 coming in fast,


00:00:45.120 --> 00:00:48.760
recorded August 23rd, 2022.


00:00:48.760 --> 00:00:50.000
I'm Michael Kennedy.


00:00:50.000 --> 00:00:51.160
- And I'm Brian Okken.


00:00:51.160 --> 00:00:53.460
Wow, close to 300.


00:00:53.460 --> 00:00:54.300
That's amazing.


00:00:54.300 --> 00:00:55.400
- Yeah.


00:00:55.400 --> 00:00:56.960
Yeah, that's,


00:00:56.960 --> 00:01:00.100
What is that, coming up on six years here pretty soon?


00:01:00.100 --> 00:01:00.940
That's insane.


00:01:00.940 --> 00:01:01.760
- Really?


00:01:01.760 --> 00:01:02.600
That's amazing.


00:01:02.600 --> 00:01:04.300
- Well, 52 times.


00:01:04.300 --> 00:01:06.820
Yeah, I don't know.


00:01:06.820 --> 00:01:09.100
Yeah, so pretty awesome.


00:01:09.100 --> 00:01:12.400
And got some fun folks we see in the audience


00:01:12.400 --> 00:01:14.740
who are out here frequently.


00:01:14.740 --> 00:01:15.740
Will McGugan is here.


00:01:15.740 --> 00:01:17.980
Will is gonna be a guest on the next episode.


00:01:17.980 --> 00:01:19.100
So if you wanna hear from Will,


00:01:19.100 --> 00:01:22.700
be sure to come at least listen to the next episode


00:01:22.700 --> 00:01:24.940
if you don't come to the live one.


00:01:24.940 --> 00:01:27.540
Also before we, yeah, it'd be fantastic.


00:01:27.540 --> 00:01:30.820
Also, before we get going on the topics,


00:01:30.820 --> 00:01:31.900
I just want to say thank you


00:01:31.900 --> 00:01:33.760
to Microsoft for Startups Founders Hub


00:01:33.760 --> 00:01:37.180
for sponsoring this and so many of the episodes this year.


00:01:37.180 --> 00:01:39.180
Super great to have their support.


00:01:39.180 --> 00:01:44.940
It's uncommon, Brian, to have such great supporters,


00:01:44.940 --> 00:01:45.820
wouldn't you say?


00:01:45.820 --> 00:01:47.180
- It is uncommon.


00:01:47.180 --> 00:01:49.860
Nice, nice segue.


00:01:49.860 --> 00:01:50.900
I like it.


00:01:50.900 --> 00:01:54.220
So I'd like to talk about uncommon uses of Python


00:01:54.220 --> 00:01:56.460
in commonly used libraries.


00:01:56.460 --> 00:01:58.500
Actually, this is just a pretty cool article.


00:01:58.500 --> 00:02:01.900
It's by Eugene Yan and it's,


00:02:01.900 --> 00:02:03.100
he goes through a handful of things.


00:02:03.100 --> 00:02:04.220
I'm just gonna pull out one,


00:02:04.220 --> 00:02:06.180
but it goes through using super classes


00:02:06.180 --> 00:02:07.660
and a whole bunch of things.


00:02:07.660 --> 00:02:11.340
The idea was to learn how to build more maintainable


00:02:11.340 --> 00:02:12.980
and usable Python libraries.


00:02:12.980 --> 00:02:15.340
He's been reading some of the most widely used


00:02:15.340 --> 00:02:19.300
Python packages and learning some things along the way,


00:02:19.300 --> 00:02:21.500
which is, this is an awesome way to learn


00:02:21.500 --> 00:02:23.140
is to read other code.


00:02:23.140 --> 00:02:24.860
I agree, I think it's fantastic.


00:02:24.860 --> 00:02:27.020
>>Yeah, so he goes through Super


00:02:27.020 --> 00:02:29.540
and a handful of other things.


00:02:29.540 --> 00:02:32.300
When to use a mix in, I don't know if I'd use that.


00:02:32.300 --> 00:02:34.620
Anyway, the thing I want to pull out


00:02:34.620 --> 00:02:38.620
is using relative imports all the time.


00:02:38.620 --> 00:02:42.180
And this is something I picked up not too long ago,


00:02:42.180 --> 00:02:44.940
but it really isn't talked about much.


00:02:44.940 --> 00:02:49.940
So the idea is that if you do an import,


00:02:50.260 --> 00:02:54.700
like import something or from some library import.


00:02:54.700 --> 00:02:57.980
If you put a dot in front of, at the beginning


00:02:57.980 --> 00:03:02.500
is like the first dot, then it looks in your path,


00:03:02.500 --> 00:03:07.500
your current search, the directory of the file that it's in.


00:03:07.500 --> 00:03:12.500
So in the example, he has a base.py from scikit-learn


00:03:12.500 --> 00:03:19.160
and it says from.utils.validation import.py


00:03:19.160 --> 00:03:21.360
import something.


00:03:21.360 --> 00:03:25.520
And these are, because it says dot utils,


00:03:25.520 --> 00:03:27.720
it'll look for utils in the current directory


00:03:27.720 --> 00:03:29.340
and not somewhere else,


00:03:29.340 --> 00:03:33.160
because there's probably a utils like somewhere else also


00:03:33.160 --> 00:03:34.880
looking for the search path.


00:03:34.880 --> 00:03:35.720
So this is neat.


00:03:35.720 --> 00:03:39.240
You can do multiple, you can move, do multiple dots also.


00:03:39.240 --> 00:03:41.400
I don't ever, I don't think I ever do that.


00:03:41.400 --> 00:03:43.460
I do the current directory and down


00:03:43.460 --> 00:03:44.800
or the current project and down.


00:03:44.800 --> 00:03:47.040
So this is-


00:03:47.040 --> 00:03:50.200
Dot dot will get you up one and then down a different path


00:03:50.200 --> 00:03:51.120
or something like that, right?


00:03:51.120 --> 00:03:51.960
- It will.


00:03:51.960 --> 00:03:54.780
So if you do dot dot something and you don't do slashes,


00:03:54.780 --> 00:03:58.260
you don't, it's not a, a pat, it's kind of like a path,


00:03:58.260 --> 00:04:01.360
but it's not like dot is the current directory,


00:04:01.360 --> 00:04:06.300
dot dot is like one up and you can do three, but wow.


00:04:06.300 --> 00:04:08.100
I think there's something wrong with your project


00:04:08.100 --> 00:04:12.420
if you're doing that, but maybe not.


00:04:12.420 --> 00:04:15.060
There's a couple of links in there for further reading.


00:04:15.060 --> 00:04:17.640
there's a Guido's decision on relative imports,


00:04:17.640 --> 00:04:22.640
which is part of the PEP 328 write-up.


00:04:22.640 --> 00:04:26.140
And actually this PEP 328 write-up


00:04:26.140 --> 00:04:29.060
is this little bit about Guido's decision


00:04:29.060 --> 00:04:32.940
where he's talked about the leading dot or leading two dots.


00:04:32.940 --> 00:04:35.880
There's a really good, easy way to get a handle


00:04:35.880 --> 00:04:37.380
on how to use this.


00:04:37.380 --> 00:04:42.380
And I use this a lot now and try to put it in projects,


00:04:42.900 --> 00:04:45.580
you know, projects at work and personal projects as well.


00:04:45.580 --> 00:04:48.620
So the dot thing is cool and yeah,


00:04:48.620 --> 00:04:51.220
it isn't talked about much, so I like it.


00:04:51.220 --> 00:04:52.580
- Yeah, it's fantastic.


00:04:52.580 --> 00:04:56.420
It only works in packages and not just a pile


00:04:56.420 --> 00:04:58.820
of module files, right?


00:04:58.820 --> 00:05:00.260
- Oh yeah, yeah.


00:05:00.260 --> 00:05:02.540
So you have to have Dunder and net files


00:05:02.540 --> 00:05:03.900
within the directory.


00:05:03.900 --> 00:05:05.700
And that's, I guess, one of the things


00:05:05.700 --> 00:05:07.700
that I wish we had another name for,


00:05:07.700 --> 00:05:10.900
because in Python, we talk about a package


00:05:11.820 --> 00:05:14.280
or a sub package, these are,


00:05:14.280 --> 00:05:17.320
this could be just a directory with Python files in it


00:05:17.320 --> 00:05:19.040
that has dunder init.


00:05:19.040 --> 00:05:23.560
And that makes it a package in Python,


00:05:23.560 --> 00:05:25.020
but we also- - It's indefinite, yeah.


00:05:25.020 --> 00:05:29.300
- Yeah, we also talk about the package repository in PyPI,


00:05:29.300 --> 00:05:31.580
it's the Python package index.


00:05:31.580 --> 00:05:35.120
Those are not just directories with dunder inits,


00:05:35.120 --> 00:05:37.360
they're packaged up with a whole bunch of other metadata


00:05:37.360 --> 00:05:38.200
and stuff like that.


00:05:38.200 --> 00:05:41.760
So there's two things that we call packages, but yeah,


00:05:41.760 --> 00:05:45.260
They have to have Dunder and it's in them for this to work.


00:05:45.260 --> 00:05:46.500
So anyway.


00:05:46.500 --> 00:05:48.660
- Yeah, Brandon on the audience asked,


00:05:48.660 --> 00:05:51.140
so are we arguing for relative imports?


00:05:51.140 --> 00:05:54.980
- For the current directory I am,


00:05:54.980 --> 00:05:59.200
I think that within a project, if you're,


00:05:59.200 --> 00:06:01.140
like internal stuff, you're not, I mean,


00:06:01.140 --> 00:06:04.820
if it's part of the external API of the project,


00:06:04.820 --> 00:06:08.540
I will always go through the external API


00:06:08.540 --> 00:06:10.300
to get at something.


00:06:10.300 --> 00:06:12.260
But there's a whole, there's a lot of times


00:06:12.260 --> 00:06:13.820
where you're just developing a bunch


00:06:13.820 --> 00:06:16.220
of Python modules together.


00:06:16.220 --> 00:06:18.780
And they're internally,


00:06:18.780 --> 00:06:21.740
they're gonna talk to other sub components


00:06:21.740 --> 00:06:24.540
and that isn't necessarily part of the external API.


00:06:24.540 --> 00:06:26.400
And this is the best way to get at it.


00:06:26.400 --> 00:06:27.500
So, yeah.


00:06:27.500 --> 00:06:29.060
- Yeah. All right.


00:06:29.060 --> 00:06:29.900
Sounds good.


00:06:29.900 --> 00:06:34.840
Next up, let's go to the Skyplane.


00:06:34.840 --> 00:06:39.140
So this one comes to us from,


00:06:39.140 --> 00:06:42.040
Let me make sure I give the proper credit.


00:06:42.040 --> 00:06:49.300
This one comes to us from RMRF, the Soudour.


00:06:49.300 --> 00:06:51.660
Thank you for sending this in.


00:06:51.660 --> 00:06:52.780
Really appreciate it.


00:06:52.780 --> 00:06:54.620
The project is called Skyplane,


00:06:54.620 --> 00:06:58.300
114 times faster cloud transfers.


00:06:58.300 --> 00:07:01.420
At first I was like, what does that mean exactly?


00:07:01.420 --> 00:07:04.220
Like, what's the baseline for this?


00:07:04.220 --> 00:07:06.740
I'll say so probably what they're basing that on


00:07:06.740 --> 00:07:07.580
in a minute.


00:07:08.380 --> 00:07:11.180
This is interesting for two reasons.


00:07:11.180 --> 00:07:13.700
It's interesting because it's a tool


00:07:13.700 --> 00:07:17.660
that I think many Python developers would find useful,


00:07:17.660 --> 00:07:20.900
especially those folks doing a lot of work in the cloud.


00:07:20.900 --> 00:07:23.120
It is also useful or interesting


00:07:23.120 --> 00:07:27.360
because it is itself a Python project, okay?


00:07:27.360 --> 00:07:30.620
So if you want to contribute to it


00:07:30.620 --> 00:07:32.420
or understand it or extend it


00:07:32.420 --> 00:07:35.980
or fork it into other things, that's totally possible.


00:07:35.980 --> 00:07:38.600
It's worked on by a pretty big group of folks.


00:07:38.600 --> 00:07:43.440
The idea is it gives you blazing fast bulk transfers,


00:07:43.440 --> 00:07:46.760
file transfers between any cloud.


00:07:46.760 --> 00:07:50.240
Any, it needs a little like star or an asterisk by it


00:07:50.240 --> 00:07:55.240
that says any means any of the big three providers, okay?


00:07:55.240 --> 00:08:01.000
Whereas, you know, this is like AWS,


00:08:01.000 --> 00:08:05.680
it's Azure and it's Google GCP.


00:08:05.680 --> 00:08:10.240
So those three, however, what I'm not clear on


00:08:10.240 --> 00:08:15.240
is whether you can point it at the S3 compatible places.


00:08:15.240 --> 00:08:19.720
Like Linode and DigitalOcean also have cloud storage


00:08:19.720 --> 00:08:24.720
that are S3 like, but I'm pretty sure it won't work


00:08:24.720 --> 00:08:26.480
based on the way I'm about to tell you


00:08:26.480 --> 00:08:28.360
what's gonna happen next, okay?


00:08:28.360 --> 00:08:32.280
So if you go over, there's an architecture section,


00:08:32.280 --> 00:08:33.120
and if you look in there,


00:08:33.120 --> 00:08:37.160
they've got this Sky Retreat 2022,


00:08:37.160 --> 00:08:41.760
where Paris Jane introduces Skyplane to the folks there.


00:08:41.760 --> 00:08:42.940
It's about a 15 minute video,


00:08:42.940 --> 00:08:44.680
but you really got to watch just two minutes of it


00:08:44.680 --> 00:08:46.100
to get the zen.


00:08:46.100 --> 00:08:49.600
So they laid out a scenario.


00:08:49.600 --> 00:08:51.400
This is, I believe in their world,


00:08:51.400 --> 00:08:53.040
they're doing data science.


00:08:53.040 --> 00:08:55.080
And so what they need is they need the data


00:08:55.080 --> 00:08:56.600
very near to them.


00:08:56.600 --> 00:08:59.560
And there's a woman in the Middle East


00:09:00.440 --> 00:09:04.440
using some AWS S3 endpoint there.


00:09:04.440 --> 00:09:08.160
And she has 80 gigs of data.


00:09:08.160 --> 00:09:11.920
And Paras is on the East Coast of the US


00:09:11.920 --> 00:09:14.680
and wants closer access to that data


00:09:14.680 --> 00:09:16.680
for their other work that they're doing.


00:09:16.680 --> 00:09:19.880
So there's a way with the AWS CLI


00:09:19.880 --> 00:09:24.660
to just copy from Bahrain or wherever it is over to Virginia.


00:09:24.660 --> 00:09:27.920
And they run that and it says,


00:09:27.920 --> 00:09:29.200
after running for a while, it says,


00:09:29.200 --> 00:09:34.200
estimated time to completion one hour. I don't know. Is that good or bad? Like


00:09:34.200 --> 00:09:38.800
it's, it's a lot of data, right? Halfway around the world. It's miraculous that


00:09:38.800 --> 00:09:42.720
this is possible, but is that good or not? So then they say, well, let's try it


00:09:42.720 --> 00:09:47.600
with sky plane. They were getting like 20 megabit. I think they run it with sky


00:09:47.600 --> 00:09:53.880
plane. They're getting 30 gigabit transfers from the middle East and it


00:09:53.880 --> 00:09:55.880
it took 30 seconds instead of an hour.


00:09:55.880 --> 00:09:58.560
- That's quite a bit faster.


00:09:58.560 --> 00:10:01.160
- That is pretty awesome. - No arguing that.


00:10:01.160 --> 00:10:02.280
- Yeah. - Exactly.


00:10:02.280 --> 00:10:06.520
And so instead of going across the open internet,


00:10:06.520 --> 00:10:09.940
it was transferring basically over like dedicated fiber


00:10:09.940 --> 00:10:12.680
for just AWS data center connects


00:10:12.680 --> 00:10:14.240
or something like that, right?


00:10:14.240 --> 00:10:17.900
But what it does is it will spin up a virtual machine


00:10:17.900 --> 00:10:22.440
or many virtual machines in the different data centers.


00:10:22.440 --> 00:10:25.920
So I think what happened here, not 100% sure,


00:10:25.920 --> 00:10:29.620
but I think it fired up some VMs in Virginia,


00:10:29.620 --> 00:10:33.840
copied it from S3 in Bahrain


00:10:33.840 --> 00:10:38.840
directly through the internal data center transfer,


00:10:38.840 --> 00:10:43.200
and then pushed it into like nearly local S3 storage.


00:10:43.200 --> 00:10:47.240
And you can do the same thing from like AWS East Coast


00:10:47.240 --> 00:10:48.920
to Azure West Coast, right?


00:10:48.920 --> 00:10:51.760
You would fire up a VM, I think in that scenario,


00:10:51.760 --> 00:10:53.640
and both of the data centers and those VMs


00:10:53.640 --> 00:10:56.840
would talk directly over the high speed data center network.


00:10:56.840 --> 00:10:58.460
Instead of like the S3 one,


00:10:58.460 --> 00:10:59.720
we'll copy it down to your machine


00:10:59.720 --> 00:11:01.880
and then you push it back out of your machine


00:11:01.880 --> 00:11:03.640
to the new destination.


00:11:03.640 --> 00:11:04.480
- Yeah.


00:11:04.480 --> 00:11:06.320
- So it's basically manages data center


00:11:06.320 --> 00:11:07.700
to data center traffic.


00:11:07.700 --> 00:11:11.240
- That's pretty cool.


00:11:11.240 --> 00:11:12.080
Makes sense.


00:11:12.080 --> 00:11:12.900
- It's pretty cool.


00:11:12.900 --> 00:11:13.740
It has, yeah, yeah, yeah.


00:11:13.740 --> 00:11:16.500
And it's like all the CLI, it's like one CLI command


00:11:16.500 --> 00:11:19.520
and that's creating the various virtual machines,


00:11:19.520 --> 00:11:22.320
provisioning them, setting up the encryption,


00:11:22.320 --> 00:11:25.060
doing all the stuff, and then it shuts back down.


00:11:25.060 --> 00:11:27.500
So, and as far as security goes,


00:11:27.500 --> 00:11:31.300
what you do is you basically install the AWS CLI


00:11:31.300 --> 00:11:36.300
or the Azure CLI, and you just log into those local CLIs


00:11:36.300 --> 00:11:41.500
and it uses those behind the scenes to do the setup


00:11:41.500 --> 00:11:45.180
of like create the VM and then SSH over to it,


00:11:45.180 --> 00:11:47.220
do the work or something like that.


00:11:47.220 --> 00:11:50.480
So it has a lot of integrity checking.


00:11:50.480 --> 00:11:53.940
So it does like checksums and verifies the files are there.


00:11:53.940 --> 00:11:58.300
The file sizes are the same and all that kind of stuff.


00:11:58.300 --> 00:12:01.840
It does end to end encryption, sort of.


00:12:01.840 --> 00:12:05.940
So the VM, as it gets it out of cloud storage encrypts it


00:12:05.940 --> 00:12:07.580
and then sends it over the network.


00:12:07.580 --> 00:12:08.980
And then when it has to decrypt it


00:12:08.980 --> 00:12:11.320
to drop it back into the other place.


00:12:11.320 --> 00:12:14.400
But it also on top of that goes over TLS.


00:12:14.400 --> 00:12:16.860
However, some people might be storing encrypted data


00:12:16.860 --> 00:12:20.420
in the cloud because they don't trust that it is,


00:12:20.420 --> 00:12:22.820
couldn't, you know, it's not gonna get looked at.


00:12:22.820 --> 00:12:26.820
So even the stuff in S3 or wherever Azure Blob Storage


00:12:26.820 --> 00:12:29.580
could be encrypted, in which case you can turn all this off


00:12:29.580 --> 00:12:30.580
and it'll go a lot faster


00:12:30.580 --> 00:12:33.380
because it's already encrypted end to end.


00:12:33.380 --> 00:12:36.220
It'll set up like virtual private networks


00:12:36.220 --> 00:12:38.220
with if it's within a data center


00:12:38.220 --> 00:12:41.340
and there's a bunch of cool things that are kind of nice


00:12:41.340 --> 00:12:42.340
that you don't have to worry about.


00:12:42.340 --> 00:12:44.340
Anyway, this is the sky plane.


00:12:44.340 --> 00:12:47.140
So if you're transferring data between different clouds


00:12:47.140 --> 00:12:51.580
or even different data centers within a single cloud,


00:12:51.580 --> 00:12:54.260
it looks like it'll do a lot of nice work for you.


00:12:54.260 --> 00:12:58.020
- Now, it's believable that it's faster.


00:12:58.020 --> 00:13:00.660
I'm just curious if it's cheaper also.


00:13:00.660 --> 00:13:02.380
Any comments?


00:13:02.380 --> 00:13:04.620
- Oh, that's a really good point, actually.


00:13:04.620 --> 00:13:07.980
If you go and say AWS to Azure or vice versa,


00:13:07.980 --> 00:13:09.820
I think it's the same price.


00:13:09.820 --> 00:13:13.860
But if you're going Azure to Azure, it probably is cheaper


00:13:13.860 --> 00:13:16.500
because I don't know what they really charge you


00:13:16.500 --> 00:13:19.340
for the S3 CLI if you say do a transfer,


00:13:19.340 --> 00:13:20.980
you're still like flowing through,


00:13:20.980 --> 00:13:23.460
but you know, the within data center transfer


00:13:23.460 --> 00:13:27.840
is cheaper than outside of the, yeah, exactly.


00:13:27.840 --> 00:13:29.780
- Cool.


00:13:29.780 --> 00:13:31.160
- So maybe, I don't know.


00:13:31.160 --> 00:13:33.980
They didn't talk about it, but possibly.


00:13:33.980 --> 00:13:35.260
- Yeah.


00:13:35.260 --> 00:13:36.100
Wow, that's awesome.


00:13:36.100 --> 00:13:36.920
- That's what I got for you.


00:13:36.920 --> 00:13:37.760
Yeah, Skyplane.


00:13:37.760 --> 00:13:38.600
- Nice.


00:13:38.600 --> 00:13:42.100
- You know what else is awesome?


00:13:42.100 --> 00:13:43.320
Speaking of Azure.


00:13:43.320 --> 00:13:45.580
- Microsoft for Startups, yeah.


00:13:45.580 --> 00:13:46.860
- Yeah, absolutely.


00:13:46.860 --> 00:13:49.760
They are, like I said, big supporters of the show,


00:13:49.760 --> 00:13:51.500
big fans of the show.


00:13:51.500 --> 00:13:53.040
And this episode, like many of them,


00:13:53.040 --> 00:13:55.840
is brought to you by Microsoft for Startups Founders Hub.


00:13:55.840 --> 00:14:02.140
If you have a startup and you intend to have


00:14:02.140 --> 00:14:04.380
some kind of cloud computing resources


00:14:04.380 --> 00:14:06.700
or you've dreamed of going to something like


00:14:06.700 --> 00:14:09.580
a Y Combinator type of accelerator,


00:14:09.580 --> 00:14:13.160
this is a really great way to get some of the benefits


00:14:13.160 --> 00:14:21.660
of that. So with Microsoft for Startup Founders Hub, they give you a bunch of resources for


00:14:21.660 --> 00:14:28.680
running your startup in the cloud in Azure, but also many other cloud resources like a


00:14:28.680 --> 00:14:35.300
bunch of GitHub credits for automation and actions, as well as access to places like


00:14:35.300 --> 00:14:42.240
OpenAI. But another thing I think is really important is having access to mentors and


00:14:42.240 --> 00:14:45.840
people who have been there and have the right connections.


00:14:45.840 --> 00:14:47.640
Right, like I think honestly that might be


00:14:47.640 --> 00:14:49.320
the hardest thing about doing a startup


00:14:49.320 --> 00:14:52.560
because as developers, we can build it.


00:14:52.560 --> 00:14:55.000
Often we can build it, but then it's,


00:14:55.000 --> 00:14:56.960
well how do you build the right thing?


00:14:56.960 --> 00:14:59.320
How do you, you know, in terms of customer fit,


00:14:59.320 --> 00:15:03.960
how do you get access to the right networks


00:15:03.960 --> 00:15:06.320
so that you can find people for investing


00:15:06.320 --> 00:15:11.320
or get better maybe coaching for like sales and marketing


00:15:11.320 --> 00:15:16.360
and marketing. All those things are incredibly hard, especially if your expertise is in software.


00:15:16.360 --> 00:15:21.320
So through Microsoft for Startup Founders Hub, you get access to their entire mentorship network,


00:15:21.320 --> 00:15:26.680
access a pool of hundreds of mentors across a bunch of disciplines like idea validation,


00:15:26.680 --> 00:15:32.760
fundraising, management, coaching, sales, marketing, and a bunch of technical areas as well.


00:15:32.760 --> 00:15:37.240
So you'll be able to book a one-on-one meetings with these mentors, many of whom are founders


00:15:37.240 --> 00:15:43.240
So make your idea a reality today with the critical support you'll get from Microsoft for Startups Founders Hub.


00:15:43.240 --> 00:15:49.240
To join the program, there are very few restrictions. You don't have to be third-party validated.


00:15:49.240 --> 00:15:55.240
You don't have to necessarily have funding. You just visit pythonbytes.fm/foundershub2022.


00:15:55.240 --> 00:16:00.240
Links in your show notes. You apply for free. If you get accepted, you get all these benefits.


00:16:00.240 --> 00:16:02.240
And it seems like a great program.


00:16:02.240 --> 00:16:05.240
Yeah, I'm excited to see what comes out of this.


00:16:05.240 --> 00:16:08.640
>> Yeah, absolutely. All right.


00:16:08.640 --> 00:16:10.920
What do you got for us here, Brian?


00:16:10.920 --> 00:16:16.040
>> Well, it wouldn't be complete if we didn't


00:16:16.040 --> 00:16:20.880
talk about Will McGugan a little bit.


00:16:20.880 --> 00:16:23.840
>> Absolutely. Hey, Will.


00:16:23.840 --> 00:16:29.960
>> There's an article that is from the textualize.io blog.


00:16:29.960 --> 00:16:32.520
It's seven things I've learned about building


00:16:32.520 --> 00:16:35.120
a modern TUI framework.


00:16:35.120 --> 00:16:37.420
And this is pretty interesting because I think that,


00:16:37.420 --> 00:16:41.660
I mean, Will more than anybody else has went,


00:16:41.660 --> 00:16:44.420
has really thought about like, okay,


00:16:44.420 --> 00:16:46.720
I wanna have something be really responsive


00:16:46.720 --> 00:16:49.220
and really good to work with on the command line,


00:16:49.220 --> 00:16:51.520
which is, it's been there for a long time,


00:16:51.520 --> 00:16:53.140
we just haven't developed it much.


00:16:53.140 --> 00:16:55.320
So there's a whole bunch of cool learnings


00:16:55.320 --> 00:16:57.800
that he talks about, like terminals are fast


00:16:57.800 --> 00:16:59.800
and they're faster than we realize.


00:16:59.800 --> 00:17:04.080
but there's a whole bunch of like things that you can,


00:17:04.080 --> 00:17:06.560
that are different about terminals than other places


00:17:06.560 --> 00:17:08.960
like Flickr and tearing and stuff


00:17:08.960 --> 00:17:10.200
and how to deal with that.


00:17:10.200 --> 00:17:12.260
So there's a whole bunch of learnings in here.


00:17:12.260 --> 00:17:14.560
The thing that like popped out is something


00:17:14.560 --> 00:17:18.420
that everybody can use that I wanted to talk about


00:17:18.420 --> 00:17:20.400
was a little blip that he talked about


00:17:20.400 --> 00:17:23.240
that is dict views are amazing.


00:17:23.240 --> 00:17:28.080
So the thing he talks about here is that,


00:17:28.080 --> 00:17:30.940
So maybe, I don't know if everybody knows the term


00:17:30.940 --> 00:17:33.840
dict views or views into a dictionary,


00:17:33.840 --> 00:17:36.180
but things like if you ask for,


00:17:36.180 --> 00:17:38.340
if you have a dictionary and you ask for the keys


00:17:38.340 --> 00:17:41.000
or you ask for items, that is a view.


00:17:41.000 --> 00:17:43.580
It's called a view into the dictionary


00:17:43.580 --> 00:17:45.980
and they are super fast.


00:17:45.980 --> 00:17:50.720
And one of the things he points out is that they act like,


00:17:50.720 --> 00:17:52.900
they act like sets also.


00:17:52.900 --> 00:17:55.860
And you can use the, you can use set operators.


00:17:55.860 --> 00:17:58.700
Like here's the little carrot symbol and was,


00:17:58.700 --> 00:18:00.120
I can't remember, I'll have to look it up.


00:18:00.120 --> 00:18:03.520
The carrot symbol is a symmetric difference.


00:18:03.520 --> 00:18:07.200
Basically, what's just, give me a set of the stuff


00:18:07.200 --> 00:18:09.040
that's different about the two different sets


00:18:09.040 --> 00:18:10.640
or two dictionaries.


00:18:10.640 --> 00:18:13.600
And you can do this in code,


00:18:13.600 --> 00:18:16.380
but he's doing it using views


00:18:16.380 --> 00:18:21.380
because those operators are happening with C code.


00:18:21.380 --> 00:18:23.840
Python has optimized those.


00:18:23.840 --> 00:18:25.640
So they work super fast.


00:18:25.640 --> 00:18:29.040
and they're way faster than anything you could write


00:18:29.040 --> 00:18:29.880
in Python.


00:18:29.880 --> 00:18:33.960
So this just taking the items of two dictionaries


00:18:33.960 --> 00:18:36.960
and using a set operations on them.


00:18:36.960 --> 00:18:39.280
And then you can go back to dictionaries if you want,


00:18:39.280 --> 00:18:42.160
you don't have to use that, but super cool.


00:18:42.160 --> 00:18:45.560
I didn't know that about dictionaries and views.


00:18:45.560 --> 00:18:47.120
So yeah, super nice.


00:18:47.120 --> 00:18:52.920
- Obviously use dot items and dot keys all the time.


00:18:52.920 --> 00:18:55.540
didn't know they had this name


00:18:55.540 --> 00:18:57.620
and I didn't know you could do set operations on them.


00:18:57.620 --> 00:18:58.460
Quite cool.


00:18:58.460 --> 00:19:00.180
- Right, yeah, super neat.


00:19:00.180 --> 00:19:03.620
Then he goes, covers a whole bunch of other stuff


00:19:03.620 --> 00:19:07.520
like LRU caching and how fast that is.


00:19:07.520 --> 00:19:09.980
One of the things that I thought was great


00:19:09.980 --> 00:19:13.020
where he talks about Unicode in art,


00:19:13.020 --> 00:19:18.020
Unicode art in doc strings of just like a picture says,


00:19:18.020 --> 00:19:20.240
says, you know, a picture gives you a thousand words


00:19:20.240 --> 00:19:24.480
or whatever, but he gives an example here


00:19:24.480 --> 00:19:29.040
for talking about splitting the screen into sub regions.


00:19:29.040 --> 00:19:31.560
And yeah, there's no way to, I mean,


00:19:31.560 --> 00:19:33.520
describing it in text is good,


00:19:33.520 --> 00:19:36.160
but this little picture goes, you can just mentally go,


00:19:36.160 --> 00:19:37.080
oh yeah, I get it.


00:19:37.080 --> 00:19:39.460
If you give it a cut X and a cut Y,


00:19:39.460 --> 00:19:41.640
you end up with four regions, obviously.


00:19:41.640 --> 00:19:45.000
But it isn't obvious just looking at the API,


00:19:45.000 --> 00:19:47.800
but with a little picture, you're like, oh yeah,


00:19:47.800 --> 00:19:48.640
that's cool.


00:19:48.640 --> 00:19:50.560
He's got a little, for people listening,


00:19:50.560 --> 00:19:54.040
he's got a picture showing just spatially


00:19:54.040 --> 00:19:57.160
what it would look like using ASCII characters.


00:19:57.160 --> 00:19:58.800
So neat.


00:19:58.800 --> 00:19:59.640
- Yeah, I love it.


00:19:59.640 --> 00:20:02.360
I love when people put art like that in there.


00:20:02.360 --> 00:20:04.200
I'm looking for where it is.


00:20:04.200 --> 00:20:06.280
I guess I'm gonna have to look this up.


00:20:06.280 --> 00:20:12.160
But in CPython, there's actually this huge diagram


00:20:12.160 --> 00:20:17.480
in the malloc, in the memory management section


00:20:17.480 --> 00:20:18.600
that shows you--


00:20:18.600 --> 00:20:19.160
it's like this.


00:20:19.160 --> 00:20:24.080
It shows you all the different data structures and concepts


00:20:24.080 --> 00:20:28.160
that are used to manage memory, like the pools, the blocks,


00:20:28.160 --> 00:20:31.960
and the arenas, and all that stuff in a huge diagram


00:20:31.960 --> 00:20:32.960
in Code Comets.


00:20:32.960 --> 00:20:33.640
It's perfect.


00:20:33.640 --> 00:20:34.800
>>Nice.


00:20:34.800 --> 00:20:39.480
And he gives a shout out to just one tool that's around.


00:20:39.480 --> 00:20:41.640
You must use it, called Monodraw.


00:20:41.640 --> 00:20:42.600
It's a Mac tool.


00:20:42.600 --> 00:20:44.440
But so there are drawing tools that you


00:20:44.440 --> 00:20:46.480
can use to generate ASCII art.


00:20:46.480 --> 00:20:49.040
So our unit code, okay, that's it.


00:20:49.040 --> 00:20:49.880
We're yeah.


00:20:49.880 --> 00:20:51.400
Yeah, yeah, nice.


00:20:51.400 --> 00:20:53.600
Oh, maybe I'll be able to find it here.


00:20:53.600 --> 00:20:54.520
Let's see.


00:20:54.520 --> 00:20:57.480
I'd love to share it with everyone if I could find it.


00:20:57.480 --> 00:20:59.800
Oh yes, here we go.


00:20:59.800 --> 00:21:01.400
I'll put the link in here.


00:21:01.400 --> 00:21:02.440
You ready for this, Brian?


00:21:02.440 --> 00:21:04.640
Yeah, you can show it.


00:21:04.640 --> 00:21:06.200
Yeah, yeah, I just got it.


00:21:06.200 --> 00:21:07.240
I had to find hold on.


00:21:07.240 --> 00:21:09.440
Go look at this.


00:21:09.440 --> 00:21:14.720
Oh yeah, here's the object allocator.


00:21:15.520 --> 00:21:17.800
And it shows here's the object specific ones,


00:21:17.800 --> 00:21:20.600
and dick and then there's like object specific and then you


00:21:20.600 --> 00:21:21.640
can see these tears.


00:21:21.640 --> 00:21:23.840
Then there's the object, the Python object allocator,


00:21:23.840 --> 00:21:26.240
the raw memory and even goes down to like here's


00:21:26.240 --> 00:21:27.760
the OS in the physical memory.


00:21:27.760 --> 00:21:30.360
And then I think maybe further down we might be


00:21:30.360 --> 00:21:33.040
able to find like some of the stuff about arenas


00:21:33.040 --> 00:21:35.480
or whatever. But isn't that nuts?


00:21:35.480 --> 00:21:37.960
Yeah, but also it's awesome because you mean it.


00:21:37.960 --> 00:21:40.560
You can visually now you can read the text and


00:21:40.560 --> 00:21:42.200
it makes more sense instead.


00:21:42.200 --> 00:21:45.160
It has a short description and then a proper picture.


00:21:45.160 --> 00:21:47.040
of here's what's happening.


00:21:47.040 --> 00:21:49.080
Yeah, absolutely.


00:21:49.080 --> 00:21:49.920
- Very good.


00:21:49.920 --> 00:21:52.360
- Cool, so yeah, yeah, that's a great, great example.


00:21:52.360 --> 00:21:54.160
And great recommendation.


00:21:54.160 --> 00:21:56.760
Sometimes a little bit of ASCII art like this,


00:21:56.760 --> 00:21:59.520
it really does help.


00:21:59.520 --> 00:22:01.200
- Goes a long ways, yeah.


00:22:01.200 --> 00:22:03.440
But there's a whole bunch of other great tips


00:22:03.440 --> 00:22:08.020
in Will's article, so encourage people to check it out.


00:22:08.020 --> 00:22:08.860
- Right on.


00:22:08.860 --> 00:22:14.720
Another thing that goes a long way is Python.


00:22:14.720 --> 00:22:20.880
There's an InfoWorld article that refers to Python as unstoppable.


00:22:20.880 --> 00:22:24.080
The title is Python popularity is still soaring,


00:22:24.080 --> 00:22:27.080
but the subtitle is Unstoppable Python,


00:22:27.080 --> 00:22:29.680
once again, ranked number one in the August updates


00:22:29.680 --> 00:22:34.440
for both the TOB and PYPL indexes.


00:22:34.440 --> 00:22:37.280
I don't know if that's PIPL or I don't know how to say this,


00:22:37.280 --> 00:22:41.280
but it's another secondary programming language index.


00:22:41.280 --> 00:22:43.480
And yeah, how cool is that?


00:22:43.480 --> 00:22:46.680
>> Very cool. Also a really nice rocket image.


00:22:46.680 --> 00:22:47.800
>> I was going to say,


00:22:47.800 --> 00:22:51.980
this characterizes the other programming languages,


00:22:51.980 --> 00:22:54.200
hot air balloons, and Python as a rocket.


00:22:54.200 --> 00:22:55.160
>> Yeah.


00:22:55.160 --> 00:22:59.740
>> So yeah. Some interesting things to take away from here.


00:22:59.740 --> 00:23:09.220
Let's see. Python first took the top spot just last October.


00:23:09.220 --> 00:23:11.320
So that was actually big news.


00:23:11.320 --> 00:23:12.160
- Yeah.


00:23:12.160 --> 00:23:15.840
- Now that makes it the only language besides C and Java


00:23:15.840 --> 00:23:18.680
to ever hold the number one position from the TOV index.


00:23:18.680 --> 00:23:21.960
And not only is it still number one,


00:23:21.960 --> 00:23:25.040
but it's actually gained a couple of percentage points


00:23:25.040 --> 00:23:28.280
on the current rankings year over year.


00:23:28.280 --> 00:23:32.240
So for example, come down here,


00:23:32.240 --> 00:23:36.040
you can see it's actually up 3.56%.


00:23:36.040 --> 00:23:39.040
I think that's year over, yeah, that's year over year.


00:23:39.040 --> 00:23:39.960
- Nice.


00:23:39.960 --> 00:23:41.160
which is pretty awesome.


00:23:41.160 --> 00:23:44.480
Also, even though--


00:23:44.480 --> 00:23:47.040
- But C and Java have gained also.


00:23:47.040 --> 00:23:49.900
So other, I guess we're whittling down,


00:23:49.900 --> 00:23:50.960
taking away from--


00:23:50.960 --> 00:23:53.600
- I think it's taking from the lower languages down here,


00:23:53.600 --> 00:23:55.900
right, like Objective-C or, here we go.


00:23:55.900 --> 00:24:00.000
Would it surprise you that Perl and Fortran have lost?


00:24:00.000 --> 00:24:05.420
By the way, also, it has the ratings,


00:24:05.420 --> 00:24:06.960
I don't know if that's quite


00:24:06.960 --> 00:24:08.360
what you would consider market share,


00:24:08.360 --> 00:24:13.360
but Python is at 15%, C is at 14%.


00:24:13.360 --> 00:24:15.720
Things that sometimes get compared,


00:24:15.720 --> 00:24:20.520
like R is less than 1%, Ruby is less than 1%.


00:24:20.520 --> 00:24:24.680
Those are pretty interesting comparisons.


00:24:24.680 --> 00:24:27.720
- Yeah, they're also not really general purpose languages.


00:24:27.720 --> 00:24:29.840
I mean, R isn't at least, so.


00:24:29.840 --> 00:24:31.640
- Yeah, yeah, yeah, that's for sure.


00:24:31.640 --> 00:24:35.600
Let's see, yeah, the TOB commentary


00:24:35.600 --> 00:24:39.680
company the index was Python seems to be unstoppable. It's


00:24:39.680 --> 00:24:42.160
hard to find a field of programming in which Python is


00:24:42.160 --> 00:24:45.400
not used extensively extensively nowadays, except for safety


00:24:45.400 --> 00:24:49.880
critical embedded systems. So that's, that's pretty cool.


00:24:49.880 --> 00:24:54.240
Let's see rust is now number 22 closing in on the top 20 and


00:24:54.240 --> 00:24:59.040
carbon. Have you been tracking carbon? No, this is I believe


00:24:59.040 --> 00:25:04.940
it's Google who is behind carbon. Yeah, it's a language


00:25:04.940 --> 00:25:08.180
that's intended to be to supplant C++,


00:25:08.180 --> 00:25:09.740
but be very C++ like.


00:25:09.740 --> 00:25:12.060
An experimental successor to C++ strives


00:25:12.060 --> 00:25:14.780
for the C++ performance and compatibility


00:25:14.780 --> 00:25:16.300
while avoiding its technical debt


00:25:16.300 --> 00:25:19.180
and extreme difficulty to improve.


00:25:19.180 --> 00:25:21.860
(both laughing)


00:25:21.860 --> 00:25:24.300
- Ouch.


00:25:24.300 --> 00:25:27.380
- Yeah, yeah, not saying extreme difficulty to use,


00:25:27.380 --> 00:25:29.660
but like, it's just, it's where it is.


00:25:29.660 --> 00:25:30.620
You know what I mean?


00:25:30.620 --> 00:25:31.740
- Yeah.


00:25:31.740 --> 00:25:34.700
- Yeah, it's like a language on top of a language


00:25:34.700 --> 00:25:37.460
on top of 50 years.


00:25:37.460 --> 00:25:44.980
Anyway, so Carbon has entered the index at position 192.


00:25:44.980 --> 00:25:47.020
They've got some work to do.


00:25:47.020 --> 00:25:50.500
But it's still interesting.


00:25:50.500 --> 00:25:53.780
Yeah, and you look at the other programming index,


00:25:53.780 --> 00:25:55.860
again, no idea how to say it.


00:25:55.860 --> 00:25:59.100
PYPL, the popularity of programming language


00:25:59.100 --> 00:26:02.620
is what the acronym stands for.


00:26:02.620 --> 00:26:06.860
It's an index created by analyzing how often


00:26:06.860 --> 00:26:10.400
tutorials, our language tutorials are searched on Google.


00:26:10.400 --> 00:26:12.740
So that's one metric.


00:26:12.740 --> 00:26:19.540
Python is like massively ahead of second place Java,


00:26:19.540 --> 00:26:21.900
third place JavaScript, and then it drops


00:26:21.900 --> 00:26:24.060
quick, quick, quick down from there.


00:26:24.060 --> 00:26:26.900
Like for example, Ruby, 1% people are interested


00:26:26.900 --> 00:26:30.560
in tutorials, how to do it, versus almost 30% for Python.


00:26:32.060 --> 00:26:33.340
- Hmm.


00:26:33.340 --> 00:26:37.680
- Yeah, anyway, that's just another factor


00:26:37.680 --> 00:26:39.480
that was part of this InfoWorld article.


00:26:39.480 --> 00:26:43.860
So, you know, on one of the live streams not too long ago,


00:26:43.860 --> 00:26:46.100
somebody said, "Oh, I heard that there's not a whole lot


00:26:46.100 --> 00:26:47.860
"of jobs or interest in Python.


00:26:47.860 --> 00:26:49.100
"Maybe, what else should I learn?"


00:26:49.100 --> 00:26:50.000
But you know what?


00:26:50.000 --> 00:26:53.860
I'm not so sure you're getting great advice


00:26:53.860 --> 00:26:57.140
if that's where you're thinking.


00:26:57.140 --> 00:26:57.980
- Okay.


00:26:57.980 --> 00:27:00.860
- Popular's not everything, but it's an important part


00:27:00.860 --> 00:27:02.140
of like, can I have a job?


00:27:02.140 --> 00:27:03.500
Can I find developers doing this?


00:27:03.500 --> 00:27:06.100
Will there be a library for my thing X


00:27:06.100 --> 00:27:08.380
I wanna talk to with it and so on?


00:27:08.380 --> 00:27:11.380
- I love Python, obviously,


00:27:11.380 --> 00:27:14.860
but it's hard to answer those like for a job,


00:27:14.860 --> 00:27:16.220
which languages should I,


00:27:16.220 --> 00:27:18.060
whether languages should I learn?


00:27:18.060 --> 00:27:21.260
I don't wanna answer that.


00:27:21.260 --> 00:27:23.580
It depends on what you're trying to get into.


00:27:23.580 --> 00:27:26.860
But just as a roundabout developer,


00:27:26.860 --> 00:27:29.340
I think it is important to learn more than one language.


00:27:29.340 --> 00:27:31.740
I don't think that it would, I wouldn't want somebody


00:27:31.740 --> 00:27:33.700
to just stop with Python and say, oh, I'm good.


00:27:33.700 --> 00:27:34.660
- No, no, no.


00:27:34.660 --> 00:27:35.700
Yeah, yeah.


00:27:35.700 --> 00:27:38.360
Well, and you also, if you want to build mobile apps,


00:27:38.360 --> 00:27:40.020
you might want to look elsewhere.


00:27:40.020 --> 00:27:45.460
Well, except I might have something


00:27:45.460 --> 00:27:47.580
in an extra section for you on that.


00:27:47.580 --> 00:27:49.180
- Okay, cool.


00:27:49.180 --> 00:27:50.620
- But did I switch the order?


00:27:50.620 --> 00:27:51.860
Did I jump in front of you?


00:27:51.860 --> 00:27:52.940
I think I may have.


00:27:52.940 --> 00:27:53.780
- I don't think so.


00:27:53.780 --> 00:27:55.260
- 'Cause you've got one more thing to go.


00:27:55.260 --> 00:27:56.300
- No.


00:27:56.300 --> 00:27:57.660
- Tell us about some magic.


00:27:57.660 --> 00:27:59.880
Oh, no, this is part, one of my extras.


00:27:59.880 --> 00:28:00.720
So.


00:28:00.720 --> 00:28:01.540
- Oh, that's when your extras, okay.


00:28:01.540 --> 00:28:02.380
Well, let's, that's it then.


00:28:02.380 --> 00:28:03.220
- Just jump in the extras.


00:28:03.220 --> 00:28:04.120
- Okay, let's jump into your extras.


00:28:04.120 --> 00:28:05.000
All right on.


00:28:05.000 --> 00:28:05.840
- I didn't want to cover this.


00:28:05.840 --> 00:28:07.480
- A really quick comment just from,


00:28:07.480 --> 00:28:09.880
I think this is kind of amusing from SE Steve


00:28:09.880 --> 00:28:12.280
in the audience, extreme difficulty to use.


00:28:12.280 --> 00:28:14.280
It's just a side benefit of C++.


00:28:14.280 --> 00:28:17.260
- Yeah, I mean, yeah.


00:28:17.260 --> 00:28:20.600
- Yeah, think about all the jobs people get to keep


00:28:20.600 --> 00:28:22.640
without much effort over time.


00:28:22.640 --> 00:28:23.480
Like, you still have to use C++.


00:28:23.480 --> 00:28:26.480
- Exactly, I mean, if there was a lot of competition


00:28:26.480 --> 00:28:31.480
for C++ developers, I don't know what I would do.


00:28:31.480 --> 00:28:34.160
I'm enjoying the lack of competition.


00:28:34.160 --> 00:28:35.000
Yeah.


00:28:35.000 --> 00:28:38.360
I just ran across this,


00:28:38.360 --> 00:28:41.640
the magic of my Matplotlib style sheets article.


00:28:41.640 --> 00:28:43.480
And I just wanted to bring it up for people


00:28:43.480 --> 00:28:46.700
that might wanna to try it out.


00:28:46.700 --> 00:28:51.700
So I've used Matplotlib style sheets before


00:28:51.700 --> 00:28:52.880
and they're just great.


00:28:52.880 --> 00:28:54.400
So you could just say like,


00:28:54.400 --> 00:28:58.300
So let's say you've got a current plot and by default,


00:28:58.300 --> 00:29:00.020
it's just, it's not bad.


00:29:00.020 --> 00:29:02.120
It's just, it is what it is.


00:29:02.120 --> 00:29:05.500
And then if you just drop in one line of code,


00:29:05.500 --> 00:29:08.220
use style, plot style use,


00:29:08.220 --> 00:29:09.900
and then you drop a style sheet name,


00:29:09.900 --> 00:29:12.120
there's a whole bunch of built-in ones you can use.


00:29:12.120 --> 00:29:13.460
It just looks nicer.


00:29:13.460 --> 00:29:14.660
It's got like a lot more style.


00:29:14.660 --> 00:29:16.940
- It's so subtle, but it looks so much better.


00:29:16.940 --> 00:29:18.400
- Yeah.


00:29:18.400 --> 00:29:21.780
But I didn't know that it's pretty easy to write your own.


00:29:21.780 --> 00:29:24.460
I didn't, I mean, I figured maybe style sheets


00:29:24.460 --> 00:29:25.300
were complicated.


00:29:25.300 --> 00:29:27.300
So the rest of this article just talks about


00:29:27.300 --> 00:29:31.360
really how to write your own style sheet.


00:29:31.360 --> 00:29:35.780
So if anybody's interested in customizing the style sheet


00:29:35.780 --> 00:29:38.260
for their group or something,


00:29:38.260 --> 00:29:40.620
might be a good thing to just have,


00:29:40.620 --> 00:29:43.320
be able to roll your own style sheet.


00:29:43.320 --> 00:29:45.300
So here you go. - Yeah, fantastic.


00:29:45.300 --> 00:29:49.680
- One of the things that the 10 year old in me enjoyed


00:29:49.680 --> 00:29:53.840
that if you want the lines to end in a square


00:29:53.840 --> 00:29:56.280
instead of a rounded line,


00:29:56.280 --> 00:29:59.660
you give it a solid cap style of butt.


00:29:59.660 --> 00:30:05.300
It makes it chop off the end, so that's funny.


00:30:05.300 --> 00:30:08.000
- That's funny.


00:30:08.000 --> 00:30:11.400
- All right.


00:30:11.400 --> 00:30:13.360
- Yeah, this is not one of my extras,


00:30:13.360 --> 00:30:16.000
but I might as well add it as a follow on here is,


00:30:17.600 --> 00:30:20.020
- XKCD plots have landed.


00:30:20.020 --> 00:30:21.960
- Yeah.


00:30:21.960 --> 00:30:23.160
- In Matplotlib, right?


00:30:23.160 --> 00:30:25.980
I'm sure this is probably accomplished the same way,


00:30:25.980 --> 00:30:27.360
but look at that.


00:30:27.360 --> 00:30:30.180
Isn't this, aren't these fantastic?


00:30:30.180 --> 00:30:32.660
- I use these at work 'cause they're just,


00:30:32.660 --> 00:30:35.820
it especially, I especially like it


00:30:35.820 --> 00:30:40.820
if I've just made up the data or my sample size is small.


00:30:40.820 --> 00:30:45.140
I don't want anybody to take it as like a research project.


00:30:45.140 --> 00:30:49.260
It's just I'm showing something informally.


00:30:49.260 --> 00:30:52.380
- Right, right.


00:30:52.380 --> 00:30:54.360
Sometimes there's a whole ton of value


00:30:54.360 --> 00:30:57.380
to present it not quite polished.


00:30:57.380 --> 00:30:58.960
There's an app I use called,


00:30:58.960 --> 00:31:01.340
let's see, what is it?


00:31:01.340 --> 00:31:04.740
I wanna make a new, called BALT SOMIC.


00:31:04.740 --> 00:31:06.640
It doesn't let me type it in, oh well.


00:31:06.640 --> 00:31:08.800
It's called BALT SOMIC.


00:31:08.800 --> 00:31:13.540
And it'll generate wireframes of like web browsers


00:31:13.540 --> 00:31:16.060
buttons or to do mobile apps or whatever.


00:31:16.060 --> 00:31:18.100
And it intentionally has this shape.


00:31:18.100 --> 00:31:20.620
Like it looks very XKCD like.


00:31:20.620 --> 00:31:22.620
Like, okay, don't, this is not the answer.


00:31:22.620 --> 00:31:23.560
This is not the final thing.


00:31:23.560 --> 00:31:25.260
It's just to give you an idea of like,


00:31:25.260 --> 00:31:27.220
here's the layout and so on.


00:31:27.220 --> 00:31:28.260
- Yeah.


00:31:28.260 --> 00:31:30.580
And I think it's also I make with a Q


00:31:30.580 --> 00:31:31.420
of people are looking for.


00:31:31.420 --> 00:31:34.100
- Yes, it's funky, small, it's spelled funky.


00:31:34.100 --> 00:31:37.500
I think what happened is that my keyboard's battery died.


00:31:37.500 --> 00:31:39.220
So anyway, that's why I can't type anymore.


00:31:39.220 --> 00:31:40.160
I'm not on a laptop.


00:31:40.160 --> 00:31:42.300
So when the battery dies, that's it.


00:31:42.300 --> 00:31:45.100
But that's fine, because I already got all the stuff I want to talk about anyway.


00:31:45.100 --> 00:31:49.900
We talked about, I wouldn't try to learn Python to write mobile apps,


00:31:49.900 --> 00:31:55.580
and I still stand by that, but we discussed way back on episode,


00:31:55.580 --> 00:31:59.580
which one was it? On 295, a couple weeks ago, we talked about Flit.


00:31:59.580 --> 00:32:03.780
And Flit lets you write Flutter apps in Python.


00:32:03.780 --> 00:32:05.780
It is super neat.


00:32:05.780 --> 00:32:07.780
- Yeah. - Where...


00:32:07.780 --> 00:32:11.220
If you just look at an example or whatever,


00:32:11.220 --> 00:32:14.740
I'll pull up the tutorial, but like the code that you write,


00:32:14.740 --> 00:32:17.580
I mean, if you ever done Flutter,


00:32:17.580 --> 00:32:19.060
it feels very much like that.


00:32:19.060 --> 00:32:22.040
What you write is Python and it's glorious.


00:32:22.040 --> 00:32:25.740
Anyway, the extra that I want to talk about is


00:32:25.740 --> 00:32:30.740
I had Theodor Fitzner, who is the creator of FLET


00:32:30.740 --> 00:32:33.840
on Talk Python last week.


00:32:33.840 --> 00:32:36.420
And if people want to hear what he had to say about it


00:32:36.420 --> 00:32:38.900
in our conversation, they should check that out.


00:32:38.900 --> 00:32:39.980
- Nice.


00:32:39.980 --> 00:32:43.140
Yeah, all right, that's it for my extras, I believe.


00:32:43.140 --> 00:32:45.780
You ready for a joke?


00:32:45.780 --> 00:32:48.940
- I am, but I just, I wanna like pause and just say,


00:32:48.940 --> 00:32:50.200
I think that's one of the cool things


00:32:50.200 --> 00:32:54.500
about how we've done Python Bytes


00:32:54.500 --> 00:32:58.340
and Talk Python and Test and Code of,


00:32:58.340 --> 00:33:00.740
if we do these small segments within Python Bytes,


00:33:00.740 --> 00:33:05.040
but if we wanna just also do like a deep dive,


00:33:05.040 --> 00:33:06.860
we've got the other podcasts to do a deep dive


00:33:06.860 --> 00:33:09.420
into some things, it's good.


00:33:09.420 --> 00:33:10.780
- Absolutely.


00:33:10.780 --> 00:33:12.900
It's super nice and kind of on purpose, right?


00:33:12.900 --> 00:33:14.100
We kind of designed this one


00:33:14.100 --> 00:33:16.140
so we could just quick talk a bunch of fun stuff.


00:33:16.140 --> 00:33:16.960
And then the other one,


00:33:16.960 --> 00:33:18.460
if you really want to spend an hour on something


00:33:18.460 --> 00:33:19.940
like that's what it's for.


00:33:19.940 --> 00:33:20.780
- Yeah.


00:33:20.780 --> 00:33:23.340
- So hopefully people listen to both or all three rather.


00:33:23.340 --> 00:33:24.420
- Three.


00:33:24.420 --> 00:33:26.060
Yeah, exactly.


00:33:26.060 --> 00:33:26.900
- Yeah, yeah, yeah.


00:33:26.900 --> 00:33:28.300
- Yeah. All right.


00:33:28.300 --> 00:33:29.860
Now something funny.


00:33:29.860 --> 00:33:32.540
- Now, you know, we talked about the cloud stuff


00:33:32.540 --> 00:33:34.980
and you specifically ask about price.


00:33:34.980 --> 00:33:36.140
So here's the joke.


00:33:37.580 --> 00:33:42.580
This one has two pictures, one somebody who is new to AWS


00:33:42.580 --> 00:33:46.240
and somebody who is experienced at AWS.


00:33:46.240 --> 00:33:50.180
The new person, it shows this like cartoon character


00:33:50.180 --> 00:33:53.120
walking one step, steps on a rake.


00:33:53.120 --> 00:33:55.380
The rake whacks up and smashes him in the face.


00:33:55.380 --> 00:34:00.120
It's new to AWS, accidental $50,252 monthly bill.


00:34:00.120 --> 00:34:03.960
The experienced one with the rake is like,


00:34:03.960 --> 00:34:05.940
you know how sometimes skateboarders will jump up


00:34:05.940 --> 00:34:08.820
they'll like grind down like a stair railing.


00:34:08.820 --> 00:34:10.020
I'll do something amazing.


00:34:10.020 --> 00:34:11.660
But maybe at the end, it doesn't show.


00:34:11.660 --> 00:34:13.180
And yeah, yeah.


00:34:13.180 --> 00:34:15.660
All the answer off the stairs, the kickflip off the stairs.


00:34:15.660 --> 00:34:17.780
And like that often goes good, but not always.


00:34:17.780 --> 00:34:20.580
So here they're doing like an amazing kickflip with the rake.


00:34:20.580 --> 00:34:21.660
But at the end, they


00:34:21.660 --> 00:34:26.420
they land at the bottom, smacks him in the face is accidental.


00:34:26.420 --> 00:34:28.860
Fifty thousand two hundred fifty two dollars.


00:34:28.860 --> 00:34:32.140
Yeah. Yeah.


00:34:32.140 --> 00:34:35.300
And then down here, there's a funny comment.


00:34:35.300 --> 00:34:39.100
from somebody who how they forgot to turn off something.


00:34:39.100 --> 00:34:41.100
So they just, but luckily their card expired.


00:34:41.100 --> 00:34:45.100
So they just let their EC2 account expire.


00:34:45.100 --> 00:34:46.980
And you know, Amazon was talking about doing


00:34:46.980 --> 00:34:48.220
like healthcare stuff and whatnot.


00:34:48.220 --> 00:34:50.500
So this, this person here, Jess,


00:34:50.500 --> 00:34:54.820
Jess the unstill, she says, just wait soon enough.


00:34:54.820 --> 00:34:57.060
If you don't pay your EC2 AWS bill


00:34:57.060 --> 00:34:59.060
they won't even let you visit your doctor.


00:34:59.060 --> 00:35:01.300
(laughing)


00:35:01.300 --> 00:35:04.020
Sometimes things are funny.


00:35:04.020 --> 00:35:07.920
- Interesting idea though to attach your AWS account


00:35:07.920 --> 00:35:09.820
to a credit card with a low balance.


00:35:09.820 --> 00:35:11.760
So that's one way.


00:35:11.760 --> 00:35:13.220
- Interesting, yes, exactly.


00:35:13.220 --> 00:35:14.860
It might be a benefit.


00:35:14.860 --> 00:35:15.700
- Yeah.


00:35:15.700 --> 00:35:18.980
- It just might be a benefit actually.


00:35:18.980 --> 00:35:20.180
Yeah, quite cool.


00:35:20.180 --> 00:35:22.740
Anyway, I thought this was kind of funny.


00:35:22.740 --> 00:35:24.700
But you also have heard of real stories


00:35:24.700 --> 00:35:26.740
of startups shutting down


00:35:26.740 --> 00:35:29.340
because they accidentally did get like a $60,000 bill


00:35:29.340 --> 00:35:30.860
and they're like, we can't pay this.


00:35:30.860 --> 00:35:32.620
- Well, also just, yeah.


00:35:32.620 --> 00:35:35.140
or somebody just misconfigured it.


00:35:35.140 --> 00:35:38.680
And suddenly they're making like the transfers


00:35:38.680 --> 00:35:40.700
are like, you know, three times larger


00:35:40.700 --> 00:35:42.620
than they're supposed to be or something like that.


00:35:42.620 --> 00:35:43.720
- Yeah, absolutely.


00:35:43.720 --> 00:35:47.040
Every time I run this command,


00:35:47.040 --> 00:35:50.140
it spins up a cool VM to do the test in the cloud.


00:35:50.140 --> 00:35:51.260
I forgot to shut it down.


00:35:51.260 --> 00:35:52.100
Whoops.


00:35:52.100 --> 00:35:53.620
Now I have a hundred VMs running.


00:35:53.620 --> 00:35:56.380
- Yeah.


00:35:56.380 --> 00:35:58.560
- Yeah, so concrete advice,


00:35:58.560 --> 00:36:01.600
you can set up billing alerts at different tiers.


00:36:01.600 --> 00:36:04.400
like once it crosses $100, send me a message.


00:36:04.400 --> 00:36:07.080
Once it crosses $200, send me a message.


00:36:07.080 --> 00:36:09.220
Those numbers will differ for people,


00:36:09.220 --> 00:36:10.640
but I would strongly recommend


00:36:10.640 --> 00:36:12.180
that you set that up at your cloud provider.


00:36:12.180 --> 00:36:15.280
Like if it goes beyond a reasonable amount


00:36:15.280 --> 00:36:18.220
of what I normally would like to pay or expect to pay,


00:36:18.220 --> 00:36:21.040
let me know soon.


00:36:21.040 --> 00:36:26.160
- Yeah, not like tomorrow, let me know right away.


00:36:26.160 --> 00:36:27.440
- Exactly.


00:36:27.440 --> 00:36:29.440
In fact, can you make my smoke alarm go off


00:36:29.440 --> 00:36:31.840
because I really need to get up and get going.


00:36:31.840 --> 00:36:32.680
(laughing)


00:36:32.680 --> 00:36:33.500
- Yeah.


00:36:33.500 --> 00:36:36.080
So anyway.


00:36:36.080 --> 00:36:38.680
- All right, well, fantastic to be here with you, Brian.


00:36:38.680 --> 00:36:39.840
- Good to be with you too.


00:36:39.840 --> 00:36:40.680
Talk to you next week.


00:36:40.680 --> 00:36:42.000
- Yep, yep, see you later.


00:36:42.000 --> 00:36:43.280
Thanks everyone for listening.


00:36:43.280 --> 00:36:45.560
Oh, really quick, one piece of follow up out here


00:36:45.560 --> 00:36:47.040
from Kim in the audience.


00:36:47.040 --> 00:36:49.280
If a huge AWS bill accidentally happens,


00:36:49.280 --> 00:36:53.280
I'd rather I can speak to the AWS directly


00:36:53.280 --> 00:36:55.640
before giving in in despair, yeah, indeed.


00:36:55.640 --> 00:36:56.480
- Yeah, I've heard of it.


00:36:56.480 --> 00:36:57.320
- They might.


00:36:57.320 --> 00:36:58.360
- I've heard of success stories


00:36:58.360 --> 00:37:01.160
where people just talk and they work with them.


00:37:01.160 --> 00:37:04.820
On the other topic, on the drawing topic,


00:37:04.820 --> 00:37:08.580
Will recommends that, where'd it go?


00:37:08.580 --> 00:37:12.040
AccelaDraw has a similar look,


00:37:12.040 --> 00:37:13.660
so I'll have to check that out too.


00:37:13.660 --> 00:37:15.760
- Yeah, I haven't heard of that one, that's cool.


00:37:15.760 --> 00:37:17.040
All right. - All right.


00:37:17.040 --> 00:37:18.280
Talk to you later. - See you all later.


00:37:18.280 --> 00:37:19.120
Bye.


00:37:19.120 --> 00:37:29.120
[BLANK_AUDIO]

