WEBVTT

00:00:00.000 --> 00:00:06.320
>> Well, welcome, everybody, to the live stream. We're excited to have Jay Miller. So let's


00:00:06.320 --> 00:00:10.480
kick the show off. Thanks for showing up for the live stream, though. We really appreciate


00:00:10.480 --> 00:00:17.200
it. Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:17.200 --> 00:00:24.320
to your earbuds. This is episode 241, recorded July 7, 2021. And I'm Brian Okken.


00:00:24.320 --> 00:00:27.160
>> Hey, I'm Michael Kennedy.


00:00:27.160 --> 00:00:28.640
And I'm new here.


00:00:28.640 --> 00:00:29.640
I'm Jay.


00:00:29.640 --> 00:00:30.640
Hi, Jay.


00:00:30.640 --> 00:00:31.640
Thanks for coming.


00:00:31.640 --> 00:00:32.640
Always.


00:00:32.640 --> 00:00:35.640
Tell us about who you are.


00:00:35.640 --> 00:00:36.640
Yeah.


00:00:36.640 --> 00:00:38.760
So, I'm Jay Miller.


00:00:38.760 --> 00:00:45.240
I'm a developer advocate for Elastic, a company that does search using Elasticsearch and many


00:00:45.240 --> 00:00:47.840
other fine tools that we create.


00:00:47.840 --> 00:00:55.160
And I spend a lot of time working on podcasts, shooting video, helping other podcasters,


00:00:55.160 --> 00:01:00.280
which we'll talk about later and yelling at Michael and Brian


00:01:00.280 --> 00:01:02.760
as they're podcasting and they can't hear me.


00:01:02.760 --> 00:01:05.760
So yeah, that's what I do.


00:01:05.760 --> 00:01:07.600
I would totally love to hear one of those.


00:01:07.600 --> 00:01:11.160
Just record yourself yelling at our podcast at the same time.


00:01:11.160 --> 00:01:13.400
That'd be great.


00:01:13.400 --> 00:01:13.920
Welcome.


00:01:13.920 --> 00:01:15.480
Thanks.


00:01:15.480 --> 00:01:17.080
You're kicking us off today, Michael.


00:01:17.080 --> 00:01:19.560
So where are we starting?


00:01:19.560 --> 00:01:22.400
Well, we're going to start with some automation here.


00:01:22.400 --> 00:01:26.400
And I previously had covered that if you go over to GitHub,


00:01:26.400 --> 00:01:28.900
I'm not logged in, I guess it's not going to work,


00:01:28.900 --> 00:01:33.300
but if you go to GitHub and you forked a repo,


00:01:33.300 --> 00:01:36.300
so for example, if you forked CPython,


00:01:36.300 --> 00:01:38.400
if you forked FastAPI,


00:01:38.400 --> 00:01:40.400
or whatever project it is you forked,


00:01:40.400 --> 00:01:43.400
all of those things are under pretty active development.


00:01:43.400 --> 00:01:47.400
And very quickly, your fork will get out of sync


00:01:47.400 --> 00:01:49.400
with what's called the upstream,


00:01:49.400 --> 00:01:51.400
the thing that it was forked from.


00:01:51.400 --> 00:01:54.860
And GitHub recently added this ability,


00:01:54.860 --> 00:01:58.920
which we talked about to go to a repo and press a button.


00:01:58.920 --> 00:02:00.820
It says your fork is behind.


00:02:00.820 --> 00:02:02.420
Would you like to catch it up?


00:02:02.420 --> 00:02:05.700
And you can click a button and boom, it'll catch it up.


00:02:05.700 --> 00:02:09.800
So, well, that's neat, but wouldn't it be nicer


00:02:09.800 --> 00:02:11.460
if you didn't have to do that?


00:02:11.460 --> 00:02:13.340
If it just did that on its own.


00:02:13.340 --> 00:02:15.600
Like sometimes you fork something


00:02:15.600 --> 00:02:18.260
and you're actively making a bunch of changes to it


00:02:18.260 --> 00:02:20.520
and there might be merge conflicts and all sorts of stuff.


00:02:20.520 --> 00:02:23.040
But a lot of times I would bet the majority of the time


00:02:23.040 --> 00:02:26.720
people say that's neat, I wanna save that for myself


00:02:26.720 --> 00:02:28.380
just so I'm sure I've got it


00:02:28.380 --> 00:02:30.640
and I can do whatever I want


00:02:30.640 --> 00:02:32.000
no matter what happens to it, right?


00:02:32.000 --> 00:02:33.620
Maybe we depend on Flask


00:02:33.620 --> 00:02:35.600
and who knows what could happen with Flask?


00:02:35.600 --> 00:02:39.520
Probably nothing, but let's just fork it just in case, right?


00:02:39.520 --> 00:02:41.520
And you just want that to stay in sync.


00:02:41.520 --> 00:02:46.440
So here is an article or walkthrough by Yash Walia.


00:02:46.440 --> 00:02:49.360
Oh, it says three easy steps to auto-sync


00:02:49.360 --> 00:02:52.520
your forked repo with the upstream,


00:02:52.520 --> 00:02:54.800
the origin thing that it came from.


00:02:54.800 --> 00:02:57.240
Now, of course, you could go to


00:02:57.240 --> 00:02:59.760
a command line and run a bunch of steps to do this,


00:02:59.760 --> 00:03:02.400
but what this does is it uses GitHub Actions.


00:03:02.400 --> 00:03:05.520
You come down here and you can go to GitHub Actions.


00:03:05.520 --> 00:03:09.280
Basically, when you're choosing a GitHub Action,


00:03:09.280 --> 00:03:12.060
there's this marketplace or this catalog of


00:03:12.060 --> 00:03:15.800
pre-built actions that you can choose from as templates or whatever,


00:03:15.800 --> 00:03:19.060
and then it opens up a text file that you basically type in


00:03:19.060 --> 00:03:21.840
the bits that you need changed.


00:03:21.840 --> 00:03:26.760
So you go to the GitHub Actions and there's one called


00:03:26.760 --> 00:03:33.300
Fork Sync with Upstream Action from the Actions Marketplace.


00:03:33.300 --> 00:03:36.040
You can see it says, "On the schedule,


00:03:36.040 --> 00:03:39.240
once every day at 7 AM."


00:03:39.240 --> 00:03:43.620
What we're going to do is we're going to run on an Ubuntu,


00:03:43.620 --> 00:03:45.180
I'm guessing Docker image.


00:03:45.180 --> 00:03:50.180
it's going to check out the, your project.


00:03:50.180 --> 00:03:54.020
And then it's going to pull the upstream changes.


00:03:54.020 --> 00:03:56.060
It's gonna add the upstream origin.


00:03:56.060 --> 00:03:58.820
It's gonna line up the branches, do the checkout


00:03:58.820 --> 00:04:01.680
and then just merge that in and push it back.


00:04:01.680 --> 00:04:04.220
So pretty straightforward to do.


00:04:04.220 --> 00:04:07.740
I ran this on some projects and, you know,


00:04:07.740 --> 00:04:10.940
one of the recent changes at GitHub and moves


00:04:10.940 --> 00:04:14.180
is to get away from like master branch terminology.


00:04:14.180 --> 00:04:18.180
And now it's all called main, but I had some that,


00:04:18.180 --> 00:04:21.060
one, I forked it previously and it was master


00:04:21.060 --> 00:04:21.900
and it became main.


00:04:21.900 --> 00:04:23.060
I had some challenges trying to like,


00:04:23.060 --> 00:04:27.380
I think I just chose poor examples to try to work from.


00:04:27.380 --> 00:04:30.020
So I didn't quite get this working perfectly,


00:04:30.020 --> 00:04:33.100
but people with more GitHub action experience than I have,


00:04:33.100 --> 00:04:34.100
I'm sure they can make it work.


00:04:34.100 --> 00:04:36.260
So this seems like a really cool way to just say,


00:04:36.260 --> 00:04:37.540
yes, I want to fork something


00:04:37.540 --> 00:04:40.600
and please just stay up to date.


00:04:42.780 --> 00:04:47.660
This is definitely neat for something where you're actively working on it a lot.


00:04:47.660 --> 00:04:51.360
I think if you're just trying to train something out


00:04:51.360 --> 00:04:55.900
and forking it for a little play yard thing,


00:04:55.900 --> 00:04:58.300
I definitely wouldn't turn this on,


00:04:58.300 --> 00:05:02.340
but with a team where you're all working on the same code,


00:05:02.340 --> 00:05:04.180
you definitely want something like this.


00:05:04.180 --> 00:05:06.620
>> I hadn't really thought about it from the team perspective,


00:05:06.620 --> 00:05:11.100
because a lot of the GitFlow with Teams thing is fork it,


00:05:11.100 --> 00:05:13.860
make changes and do a PR.


00:05:13.860 --> 00:05:19.240
I mean, also sometimes people just create feature branches and do a PR within the repo.


00:05:19.240 --> 00:05:25.060
But if your mode is to create your own repo and then do the PRs back to the main repo,


00:05:25.060 --> 00:05:27.060
I can see that this being really helpful.


00:05:27.060 --> 00:05:31.180
Yeah, we use a method in GitLab where it's on the,


00:05:31.180 --> 00:05:37.020
we have to, the main repo has to know where all the forks are,


00:05:37.020 --> 00:05:41.420
but it does a push every time there's an update to protected branches.


00:05:41.420 --> 00:05:43.420
So I see that's cool.


00:05:43.420 --> 00:05:49.500
I was thinking about using something like this for some of the projects that I do,


00:05:49.500 --> 00:05:54.940
where there are folks that will take datasets and they're just stored as CSV files,


00:05:54.940 --> 00:05:56.300
and they're sitting in repos.


00:05:56.300 --> 00:05:58.940
And I'm like, well, if I have access to this data,


00:05:58.940 --> 00:06:03.580
and I want to do some project with Elon or another tool that I use,


00:06:04.140 --> 00:06:12.900
then I have to then go and just manually download their CSV file and update it every time I'm about to present on that data set.


00:06:12.900 --> 00:06:29.220
Whereas if I just say, hey, I can fork their code, and then build my project off of their repo, and then set this up so that anytime they update that one area, it's just always up to date for me, I don't have to think about it, I don't have to go in and go, oh, hey, was there an update?


00:06:29.220 --> 00:06:31.740
It's just like constantly running in the background.


00:06:31.740 --> 00:06:33.740
And I know you mentioned Mike at the beginning,


00:06:33.740 --> 00:06:37.500
like GitHub is working to make a lot of this easier.


00:06:37.500 --> 00:06:39.820
I mean, I feel like kind of their mission now


00:06:39.820 --> 00:06:44.820
that they control like 90% of the Git surface


00:06:44.820 --> 00:06:47.920
out there on the internet is to just make lives easier


00:06:47.920 --> 00:06:49.900
for the people that are using their products.


00:06:49.900 --> 00:06:52.340
So I think that, you know, stuff like this,


00:06:52.340 --> 00:06:55.200
stuff like having just a simple notification that says,


00:06:55.200 --> 00:07:00.200
"Hey, your upstream branch is ahead of you.


00:07:00.200 --> 00:07:03.120
Click here and we'll get everything merged in."


00:07:03.120 --> 00:07:06.200
And the less GitHub commands I have to try to put in


00:07:06.200 --> 00:07:09.680
to remember that I am going to mess up 100% of the time,


00:07:09.680 --> 00:07:10.520
the better.


00:07:10.520 --> 00:07:13.920
- Yeah, it's so close to having this built in, right?


00:07:13.920 --> 00:07:17.880
You've got the button that says, "Right now, sync this."


00:07:17.880 --> 00:07:19.800
If it just had a checkbox or something,


00:07:19.800 --> 00:07:23.440
and just keep doing that when you see these changes,


00:07:23.440 --> 00:07:25.840
Like basically install this automatically for me.


00:07:25.840 --> 00:07:27.200
That'd be fantastic.


00:07:27.200 --> 00:07:28.440
Maybe when you fork it, right?


00:07:28.440 --> 00:07:31.400
I want to fork it and I want it to stay up to date.


00:07:31.400 --> 00:07:34.960
I guess probably the hesitation is certain things,


00:07:34.960 --> 00:07:36.560
it requires certain behaviors.


00:07:36.560 --> 00:07:40.080
For example, you shouldn't be making direct changes


00:07:40.080 --> 00:07:43.000
to the branch that you're syncing with


00:07:43.000 --> 00:07:44.640
'cause you might end up with merge conflicts.


00:07:44.640 --> 00:07:46.160
You have to work on a separate branch.


00:07:46.160 --> 00:07:47.640
And I don't know, it probably gets complicated,


00:07:47.640 --> 00:07:49.840
but I would love to see this more automatic.


00:07:49.840 --> 00:07:52.240
- Yeah, that's cool.


00:07:52.240 --> 00:07:54.600
I'm trying to remember what the next topic was.


00:07:54.600 --> 00:07:55.720
My memory is not that good.


00:07:55.720 --> 00:07:58.440
What do you, you know, don't you?


00:07:58.440 --> 00:08:00.240
- Yeah, memory usage.


00:08:00.240 --> 00:08:02.280
So you actually have a talk about this,


00:08:02.280 --> 00:08:03.600
don't you, about memory?


00:08:03.600 --> 00:08:05.920
- I do, I've spoken about it before for sure.


00:08:05.920 --> 00:08:09.880
- Yeah, but so this is a cool article by Itamar,


00:08:09.880 --> 00:08:12.840
I think his name is Itamar, is that right?


00:08:12.840 --> 00:08:15.840
Anyway, it's a nice, easy to follow discussion,


00:08:15.840 --> 00:08:20.840
but there's a cool example that goes through


00:08:22.080 --> 00:08:26.240
where it's just, it's kind of a neat one-liner


00:08:26.240 --> 00:08:28.440
to allocate three gigs of memory.


00:08:28.440 --> 00:08:31.800
I didn't, you know, it's kind of a neat thing with NumPy,


00:08:31.800 --> 00:08:36.800
just allocating a byte array


00:08:36.800 --> 00:08:42.300
or three, like a 1024 by 1024 by 1024 by three matrix.


00:08:42.300 --> 00:08:47.760
So some clever math there to get three gigs,


00:08:47.760 --> 00:08:48.800
but it actually works.


00:08:48.800 --> 00:08:53.800
and then he goes through and uses PSUtil to read the memory


00:08:53.800 --> 00:08:57.880
and figure out how much is there.


00:08:57.880 --> 00:09:00.960
So I had to, I actually, I paused at this point


00:09:00.960 --> 00:09:02.720
when I was reading the article to go and find out


00:09:02.720 --> 00:09:04.120
what all this stuff does.


00:09:04.120 --> 00:09:07.880
So it's the, when allocating the, like a ones array,


00:09:07.880 --> 00:09:11.160
you can, NumPy has a way to just pre-allocate


00:09:11.160 --> 00:09:12.960
a bunch of ones, which is neat.


00:09:12.960 --> 00:09:16.800
And you give it a shape of what the vector shape is


00:09:16.800 --> 00:09:18.200
that you're going within.


00:09:18.200 --> 00:09:21.560
But then also this process stuff, it's an RSS,


00:09:21.560 --> 00:09:24.880
and I'm used to RSS being really simple syndication.


00:09:24.880 --> 00:09:28.500
So no, RSS is, what is it?


00:09:28.500 --> 00:09:32.080
Resident set size, which is essentially translates


00:09:32.080 --> 00:09:33.840
to the resident memory,


00:09:33.840 --> 00:09:36.400
which is essentially how much RAM you're using.


00:09:36.400 --> 00:09:38.400
So anyway, how much RAM are you using?


00:09:38.400 --> 00:09:40.920
And we're using three gigs, a little bit more.


00:09:40.920 --> 00:09:46.120
And then he does something that I was surprised by,


00:09:46.120 --> 00:09:48.800
goes out and just opens a couple of browsers,


00:09:48.800 --> 00:09:51.000
Windows, and then goes back and checks again,


00:09:51.000 --> 00:09:53.640
and suddenly it's down, it's like way down.


00:09:53.640 --> 00:09:56.840
And I tried this, and I can't get it to go really far down.


00:09:56.840 --> 00:10:01.440
And that's because your computer is managing memory


00:10:01.440 --> 00:10:05.000
and taking some stuff out of RAM and putting it on disk


00:10:05.000 --> 00:10:06.200
and saving it till later.


00:10:06.200 --> 00:10:08.200
So there's, this is kind of--


00:10:08.200 --> 00:10:09.240
- It's using the memory,


00:10:09.240 --> 00:10:12.640
but it's not currently actively loaded as--


00:10:12.640 --> 00:10:13.480
- As RAM.


00:10:13.480 --> 00:10:15.560
- Yeah, gotcha, okay.


00:10:15.560 --> 00:10:20.800
So basically, this is a little bit of a tutorial on how memory works with your computer


00:10:20.800 --> 00:10:26.900
and what the difference between allocated memory is and peak allocated memory and resident memory.


00:10:26.900 --> 00:10:31.800
And the allocated and peak allocated is like the max that's allocated at the time.


00:10:31.800 --> 00:10:38.700
And it's kind of too much to go into in this conversation, but it's a really interesting discussion.


00:10:38.700 --> 00:10:43.100
And he also talks about how to measure these using what the PSU tell for one,


00:10:43.100 --> 00:10:46.420
And then also for the peak allocated memory,


00:10:46.420 --> 00:10:48.380
he used a profiler called fill.


00:10:48.380 --> 00:10:52.660
So it was, I thought I learned a lot


00:10:52.660 --> 00:10:54.460
in just a few minutes reading this.


00:10:54.460 --> 00:10:57.420
- Yeah, very nice.


00:10:57.420 --> 00:10:59.580
Yeah, NMR is doing all sorts of cool stuff


00:10:59.580 --> 00:11:03.740
with memory analysis and profilers and whatnot.


00:11:03.740 --> 00:11:10.580
- There's a surprise in here of if you fill it with ones,


00:11:10.580 --> 00:11:11.980
you actually get three gigs.


00:11:11.980 --> 00:11:15.420
but if you do the same thing with zeros, you get like nothing.


00:11:15.420 --> 00:11:19.620
So Python and NumPy figure, it's just zeros.


00:11:19.620 --> 00:11:21.860
We'll just remember that they're zeros.


00:11:21.860 --> 00:11:25.420
And until you actually do something with it, we won't allocate it.


00:11:25.420 --> 00:11:27.860
It's like a lazy allocation or something.


00:11:27.860 --> 00:11:29.140
Yeah, I guess.


00:11:29.140 --> 00:11:30.140
Yeah, interesting.


00:11:30.140 --> 00:11:32.140
Yeah, so what I was going to say is,


00:11:32.140 --> 00:11:37.140
another thing that's tricky is like this is using psutil.process.memory


00:11:37.140 --> 00:11:41.140
to analyze it. It's just how much memory is the process using,


00:11:41.140 --> 00:11:47.220
which is not always the right way to think about how much memory you're sort of demanding.


00:11:47.220 --> 00:11:51.860
Because the allocation in Python, you allocate in blocks,


00:11:51.860 --> 00:11:56.860
big blocks of memory, and then the blocks are managed in pools,


00:11:56.860 --> 00:11:58.380
and then the pools are managed in arenas.


00:11:58.380 --> 00:12:01.460
And there's a lot of pre-allocation and then reuse,


00:12:01.460 --> 00:12:06.260
but you end up with over-allocation and then eventually filling those up with things.


00:12:06.260 --> 00:12:10.340
And so it gets pretty interesting


00:12:10.340 --> 00:12:13.460
about actually understanding precisely how much memory


00:12:13.460 --> 00:12:15.020
and what's using it.


00:12:15.020 --> 00:12:16.740
It's not quite as straightforward


00:12:16.740 --> 00:12:19.220
as just how much process memory is being used.


00:12:19.220 --> 00:12:21.460
But that's still a decent proxy, right?


00:12:21.460 --> 00:12:25.700
- I just want to know how I can subscribe to that RSS feed.


00:12:25.700 --> 00:12:30.740
- I know, I had the same thought when I saw it.


00:12:30.740 --> 00:12:33.000
(laughing)


00:12:33.000 --> 00:12:38.540
- All right, Jay, you got the next one.


00:12:38.540 --> 00:12:39.940
What we got here?


00:12:39.940 --> 00:12:42.820
- All right, so this originally came from a video


00:12:42.820 --> 00:12:45.900
that I saw trying to solve a problem that I had,


00:12:45.900 --> 00:12:49.180
and I had to do some deep searching


00:12:49.180 --> 00:12:51.060
to figure out whether or not we'd talked about it before,


00:12:51.060 --> 00:12:52.260
if y'all talked about it before,


00:12:52.260 --> 00:12:55.140
but we all know f-strings now.


00:12:55.140 --> 00:12:56.140
We love f-strings.


00:12:56.140 --> 00:12:58.060
f-strings are awesome.


00:12:58.060 --> 00:13:00.580
f-strings can do a lot.


00:13:00.580 --> 00:13:05.580
Sometimes folks don't realize how much f-strings can do.


00:13:05.580 --> 00:13:07.020
Like for instance, did you know,


00:13:07.020 --> 00:13:09.100
if you put an equal sign after a value,


00:13:09.100 --> 00:13:12.200
it will actually give you the variable


00:13:12.200 --> 00:13:13.940
that you've provided equals,


00:13:13.940 --> 00:13:15.180
and then whatever the value is,


00:13:15.180 --> 00:13:17.380
which I think is awesome when it comes to logging


00:13:17.380 --> 00:13:20.000
and figuring out other information.


00:13:20.000 --> 00:13:24.860
But one thing I did not know is that you could use f-strings


00:13:24.860 --> 00:13:29.860
to format date time objects, just right in the F string.


00:13:29.860 --> 00:13:34.360
string. So you don't have to do, you know, like date, time,


00:13:34.360 --> 00:13:37.760
dot string, F time, or, you know, string F format or all


00:13:37.760 --> 00:13:43.120
that stuff. You can just do F string, the date, time variable,


00:13:43.120 --> 00:13:48.480
and then the F string format code that you would use to


00:13:48.480 --> 00:13:52.660
format it normally. And that's over here in this, you know, if


00:13:52.660 --> 00:13:55.840
I just scroll down, you can see here where in this example,


00:13:55.840 --> 00:13:58.940
they use just datetime, datetime now,


00:13:58.940 --> 00:14:02.640
and then now colon the format.


00:14:02.640 --> 00:14:06.500
And I saw that in my mind was blown


00:14:06.500 --> 00:14:08.380
because that means I now have to go back


00:14:08.380 --> 00:14:13.020
through a bunch of code and remove all of the string format


00:14:13.020 --> 00:14:15.180
like parsing and just throw it directly


00:14:15.180 --> 00:14:16.980
into the datetime field.


00:14:16.980 --> 00:14:19.580
I'm kidding, I'll also just throw out there,


00:14:19.580 --> 00:14:22.820
sometimes you wanna have that stuff separated


00:14:22.820 --> 00:14:24.620
so that it could be used elsewhere


00:14:24.620 --> 00:14:26.720
and you don't have to constantly rewrite it,


00:14:26.720 --> 00:14:31.420
but we now have another way to format our date times,


00:14:31.420 --> 00:14:34.860
but sadly, it's still probably sucks


00:14:34.860 --> 00:14:38.840
with dealing with time zones because date times are hard.


00:14:38.840 --> 00:14:41.360
- They are hard.


00:14:41.360 --> 00:14:43.100
I think it's totally non-obvious


00:14:43.100 --> 00:14:45.540
that you can have variable colon,


00:14:45.540 --> 00:14:48.340
some format string and an F string, but it's really nice.


00:14:48.340 --> 00:14:51.300
The one that I use the most is colon comma


00:14:51.300 --> 00:14:52.620
for digit grouping.


00:14:52.620 --> 00:14:55.380
I'm like, here's, you know, 2 million such and such.


00:14:55.380 --> 00:14:57.840
And I wanted to do two comma, you know,


00:14:57.840 --> 00:15:00.320
three digits comma, three digits.


00:15:00.320 --> 00:15:02.080
- I knew that you could do something like that.


00:15:02.080 --> 00:15:04.000
I didn't know that that was how you did it.


00:15:04.000 --> 00:15:06.700
So thank you for adding that to my list


00:15:06.700 --> 00:15:09.000
of things you can do with f-strings.


00:15:09.000 --> 00:15:10.400
- Yeah, and I know,


00:15:10.400 --> 00:15:13.160
one that you've spoken about, Brian,


00:15:13.160 --> 00:15:15.800
is to do like the variable equals,


00:15:15.800 --> 00:15:18.440
which Jay alluded to where it prints out


00:15:18.440 --> 00:15:21.080
the name of the variable equals the value


00:15:21.080 --> 00:15:23.100
of the variable.


00:15:23.100 --> 00:15:24.740
Do you use that often?


00:15:24.740 --> 00:15:26.300
- I use it all the time


00:15:26.300 --> 00:15:30.300
because I'm a kind of a printf debugger kind of person.


00:15:30.300 --> 00:15:35.500
- Let's see some comments from the live stream.


00:15:35.500 --> 00:15:39.340
Magnus, hey Magnus, fstring is cool.


00:15:39.340 --> 00:15:41.720
I find selecting between repper and string


00:15:41.720 --> 00:15:43.740
and fstring is really useful.


00:15:43.740 --> 00:15:44.580
That's very neat.


00:15:44.580 --> 00:15:47.100
Dean, hey Dean,


00:15:47.100 --> 00:15:50.740
how can I keep the formatting as a variable?


00:15:50.740 --> 00:15:52.260
- That's a good question.


00:15:52.260 --> 00:15:54.460
- Can't you just assign it as a variable?


00:15:54.460 --> 00:15:57.720
Just say, can you use it in the F string?


00:15:57.720 --> 00:16:00.580
Probably.


00:16:00.580 --> 00:16:02.340
- Maybe you've got to call stir of the variable.


00:16:02.340 --> 00:16:03.700
I don't know.


00:16:03.700 --> 00:16:04.540
- Oh man.


00:16:04.540 --> 00:16:06.820
Well, that's where you start getting the bang art,


00:16:06.820 --> 00:16:10.060
like the exclamation point R to like,


00:16:10.060 --> 00:16:14.460
just force it to do a wrapper on whatever you provided.


00:16:14.460 --> 00:16:16.740
Again, not saying that you should do it that way,


00:16:16.740 --> 00:16:20.940
But I mean, you probably could.


00:16:20.940 --> 00:16:23.180
- Yeah, yeah, definitely.


00:16:23.180 --> 00:16:24.540
And Sam out there in live stream says,


00:16:24.540 --> 00:16:25.780
"How have I never heard of these?"


00:16:25.780 --> 00:16:27.800
Yes, I know, it's amazing.


00:16:27.800 --> 00:16:30.820
Amazing, amazing.


00:16:30.820 --> 00:16:33.380
All right, I wanna throw in a quick thing


00:16:33.380 --> 00:16:35.780
I wanna add to that really quick, fstrings.


00:16:35.780 --> 00:16:38.080
If you find yourself with a bunch of code


00:16:38.080 --> 00:16:42.020
that has been around for years, pre 3.6,


00:16:42.020 --> 00:16:44.480
and you're like, "Ah, it's got who knows


00:16:44.480 --> 00:16:47.740
just how many variations of formatting strings in it.


00:16:47.740 --> 00:16:50.680
And you just want them all to be f-strings.


00:16:50.680 --> 00:16:54.020
You can use Flint, F-L-Y-N-T,


00:16:54.020 --> 00:16:56.980
run that against the top level of your directory.


00:16:56.980 --> 00:16:59.100
Boom, everything's f-strings.


00:16:59.100 --> 00:16:59.940
Ah, it looks great.


00:16:59.940 --> 00:17:04.220
I did this on like a 20,000 lines of Python code project.


00:17:04.220 --> 00:17:06.700
It had one error, I submitted it to them, they fixed it.


00:17:06.700 --> 00:17:08.500
And yeah, it was really neat.


00:17:08.500 --> 00:17:11.820
- That's cool.


00:17:11.820 --> 00:17:13.040
- Cool, cool, indeed.


00:17:13.940 --> 00:17:16.220
All right, what's the next one here?


00:17:16.220 --> 00:17:18.500
I guess I got the next one, don't I, Brian?


00:17:18.500 --> 00:17:19.560
- Yeah.


00:17:19.560 --> 00:17:20.540
- Cool.


00:17:20.540 --> 00:17:22.460
Well, this one I went back a little bit,


00:17:22.460 --> 00:17:23.500
back and forth on whether or not


00:17:23.500 --> 00:17:24.980
I actually wanted to feature this


00:17:24.980 --> 00:17:29.560
'cause it's a little bit recursive, I guess.


00:17:29.560 --> 00:17:31.420
So I did a talk for Manning.


00:17:31.420 --> 00:17:34.900
They had a developer productivity conference talk


00:17:34.900 --> 00:17:37.180
or a conference.


00:17:37.180 --> 00:17:38.900
Jay, were you part of that?


00:17:38.900 --> 00:17:40.100
- I was not part.


00:17:40.100 --> 00:17:41.940
I am hearing about this for the first time


00:17:41.940 --> 00:17:42.760
and I'm very upset. - I feel like you should


00:17:42.760 --> 00:17:43.600
have been part of this.


00:17:43.600 --> 00:17:46.480
Like, how did you not get in here with your podcast at all?


00:17:46.480 --> 00:17:50.360
So the conference was interesting.


00:17:50.360 --> 00:17:51.720
There was some really neat talks.


00:17:51.720 --> 00:17:53.880
There were some other talks that I'm not really sure


00:17:53.880 --> 00:17:56.560
abided by the theme of the conference.


00:17:56.560 --> 00:17:57.960
They were just like, well, here's a random tech talk.


00:17:57.960 --> 00:17:59.880
I was like, oh, okay, well, but that's not productivity.


00:17:59.880 --> 00:18:02.120
Anyway, I tried to abide by the theme.


00:18:02.120 --> 00:18:04.920
So I came up with a talk called


00:18:04.920 --> 00:18:08.180
10 Tips and Tools You Can Adopt in 15 Minutes or Less


00:18:08.180 --> 00:18:10.360
to Level Up Your Developer Productivity.


00:18:12.320 --> 00:18:14.660
So really what I want to do is just give a quick shout out


00:18:14.660 --> 00:18:16.820
to like the 10 tips and people can go,


00:18:16.820 --> 00:18:17.660
if they're really interested,


00:18:17.660 --> 00:18:20.480
they can seek around the video and go find that.


00:18:20.480 --> 00:18:22.960
Or email me and I'll send you the slides.


00:18:22.960 --> 00:18:25.520
So one of them is to use a proper shell.


00:18:25.520 --> 00:18:27.880
Like I find every now and then I run into people


00:18:27.880 --> 00:18:29.620
and they're just running, you know,


00:18:29.620 --> 00:18:33.320
the whatever comes out of terminal in macOS,


00:18:33.320 --> 00:18:36.480
or they're just using cmd.exe on Windows.


00:18:36.480 --> 00:18:38.540
And I was like, how can you go day to day?


00:18:38.540 --> 00:18:41.920
Like there's so much possibility there, right?


00:18:41.920 --> 00:18:43.380
So, you know, consider things like,


00:18:43.380 --> 00:18:45.240
OhMyZshell or OhMyPosh.


00:18:45.240 --> 00:18:49.720
I just installed OhMyPosh on the Windows terminal


00:18:49.720 --> 00:18:51.400
with the new PowerShell on Windows.


00:18:51.400 --> 00:18:54.240
And that thing is so much nicer than what you had before.


00:18:54.240 --> 00:18:55.080
That's cool.


00:18:55.080 --> 00:18:58.880
So get a proper terminal with some of those options.


00:18:58.880 --> 00:19:00.680
Use, if you're doing anything on the web,


00:19:00.680 --> 00:19:04.840
use secure.py, which just adds all the OWASP


00:19:04.840 --> 00:19:07.880
secure headers that you're supposed to do.


00:19:07.880 --> 00:19:10.320
Like don't allow your site to be embedded in an iframe


00:19:10.320 --> 00:19:12.160
and cross-site scripting and stuff,


00:19:12.160 --> 00:19:14.080
automatically it supports like 10 different


00:19:14.080 --> 00:19:15.760
Python web frameworks.


00:19:15.760 --> 00:19:17.200
And if you're on some other technology,


00:19:17.200 --> 00:19:18.840
there's things like inWebSec,


00:19:18.840 --> 00:19:20.600
which does the same thing for ASP.NET,


00:19:20.600 --> 00:19:22.560
or I'm sure you can Google another one.


00:19:22.560 --> 00:19:30.240
Tip number three, pick a nice GUI for your get work.


00:19:30.240 --> 00:19:34.900
Sometimes it's fine to do stuff on the command shell,


00:19:34.900 --> 00:19:36.880
but, or on the CLI,


00:19:36.880 --> 00:19:39.540
but it's really nice to have visual views


00:19:39.540 --> 00:19:41.220
of like branching and whatnot.


00:19:41.220 --> 00:19:44.700
So think of like source tree or even PyCharm and VS Code.


00:19:44.700 --> 00:19:46.620
Sync your GitHub forks, just talking about that.


00:19:46.620 --> 00:19:47.980
So keeping that going.


00:19:47.980 --> 00:19:51.580
Use a proper log framework like Loguru or even Sentry.


00:19:51.580 --> 00:19:53.940
Use Let's Encrypt.


00:19:53.940 --> 00:19:57.740
Number seven, you can go and just get your site map


00:19:57.740 --> 00:20:01.900
and request every URL at that destination


00:20:01.900 --> 00:20:02.820
in your site map.


00:20:02.820 --> 00:20:05.060
And that's a way to just like make sure


00:20:05.060 --> 00:20:06.140
your site's not gonna die.


00:20:06.140 --> 00:20:08.620
So you could put that as an integration test.


00:20:08.620 --> 00:20:12.320
Use PageSpeed Insights to make sure your SEO is good


00:20:12.320 --> 00:20:14.040
and your site's responding well.


00:20:14.040 --> 00:20:15.960
Use Homebrew or Chocolaty on Windows.


00:20:15.960 --> 00:20:18.460
And then the very last one is set up Dependabot.


00:20:18.460 --> 00:20:20.840
Or even some of the stuff that we talked about, Brian,


00:20:20.840 --> 00:20:25.840
start using pip compile with a .in file.


00:20:25.840 --> 00:20:28.680
And you can tell it to upgrade the requirements


00:20:28.680 --> 00:20:30.600
whenever you run some CLI command


00:20:30.600 --> 00:20:35.440
and it'll regenerate your requirements.txt


00:20:35.440 --> 00:20:37.560
based on all the dependencies


00:20:37.560 --> 00:20:39.680
and it gives you a really nice organization


00:20:39.680 --> 00:20:42.960
like this sub dependency is here


00:20:42.960 --> 00:20:44.840
because of these three things you've installed


00:20:44.840 --> 00:20:47.260
in your main requirements.in and so on.


00:20:47.260 --> 00:20:52.800
So there's 10 quick tips that people can go play with


00:20:52.800 --> 00:20:55.480
and then check out that short video if they're interested.


00:20:55.480 --> 00:20:57.840
- I mean, I know 11 quick tips


00:20:57.840 --> 00:21:00.880
wouldn't have been an amazing brand,


00:21:00.880 --> 00:21:04.040
but I feel like virtual environments,


00:21:04.040 --> 00:21:06.760
like not brought up at all, that was...


00:21:06.760 --> 00:21:07.760
- Yeah, that's true.


00:21:07.760 --> 00:21:08.600
That's a good point.


00:21:08.600 --> 00:21:10.400
Yeah, I mean, you should have been in the conference.


00:21:10.400 --> 00:21:11.240
I'm pretty sure.


00:21:11.240 --> 00:21:12.560
- Oh man, yeah.


00:21:12.560 --> 00:21:14.440
Only I know about it.


00:21:14.440 --> 00:21:15.280
- Well, Dean-


00:21:15.280 --> 00:21:17.480
- Do some people not use virtual environments?


00:21:17.480 --> 00:21:21.120
- Dean also has an 11, there may be 12 now.


00:21:21.120 --> 00:21:22.560
Close that Facebook tab.


00:21:22.560 --> 00:21:24.680
Yeah.


00:21:24.680 --> 00:21:25.520
- I'm surprised at how many people


00:21:25.520 --> 00:21:27.080
don't use virtual environments still,


00:21:27.080 --> 00:21:31.560
or even I don't wanna say something like using like PIPM


00:21:31.560 --> 00:21:33.360
or poetry or anything like that.


00:21:33.360 --> 00:21:35.720
Mostly just because I don't have a lot of experience


00:21:35.720 --> 00:21:37.720
with them, but what is it?


00:21:37.720 --> 00:21:42.720
Virtual environment wrapper or even Pyenv,


00:21:42.720 --> 00:21:45.780
just really great tools to make sure


00:21:45.780 --> 00:21:48.360
that everyone's operating on the same Python version


00:21:48.360 --> 00:21:53.360
and that if you need to run Python 3.5 on one thing


00:21:53.360 --> 00:21:56.480
because your code isn't set up for it yet


00:21:56.480 --> 00:21:59.600
and then you wanna run 3.9 on something else,


00:21:59.600 --> 00:22:03.240
having tools like that, that once you learn them,


00:22:03.240 --> 00:22:06.600
They're so phenomenal and just so easy to use.


00:22:06.600 --> 00:22:08.960
- Yeah, I wonder if the overlap of the people


00:22:08.960 --> 00:22:10.560
that have a Facebook tab up


00:22:10.560 --> 00:22:14.160
are the same people that don't use virtual environment.


00:22:14.160 --> 00:22:15.440
- Probably.


00:22:15.440 --> 00:22:16.680
- Probably.


00:22:16.680 --> 00:22:18.920
Notifications as well, turn off notifications.


00:22:18.920 --> 00:22:21.280
Like don't let Outlook or other things like that,


00:22:21.280 --> 00:22:23.960
like send you, like don't let your emails send you messages.


00:22:23.960 --> 00:22:25.960
They're like pot toast, right?


00:22:25.960 --> 00:22:27.720
- Turn on, do not disturb.


00:22:27.720 --> 00:22:28.560
- Yeah.


00:22:29.920 --> 00:22:34.420
- Before we move on, Dean mentions in the chat


00:22:34.420 --> 00:22:35.940
for the F string thing,


00:22:35.940 --> 00:22:40.180
you can put layers of curly braces in there.


00:22:40.180 --> 00:22:42.500
- Like F string with an F string, no way.


00:22:42.500 --> 00:22:43.340
- Yeah.


00:22:43.340 --> 00:22:46.420
- I feel like we're reaching a dangerous point.


00:22:46.420 --> 00:22:47.620
- No, that's awesome.


00:22:47.620 --> 00:22:48.940
That's so cool.


00:22:48.940 --> 00:22:49.780
Love it.


00:22:49.780 --> 00:22:51.700
- So for people who are listening,


00:22:51.700 --> 00:22:52.700
not seeing this.


00:22:52.700 --> 00:22:53.540
Yeah, yeah.


00:22:53.540 --> 00:22:54.900
So for people listening,


00:22:54.900 --> 00:22:55.980
you would normally have an F string,


00:22:55.980 --> 00:22:59.100
you say F quote, curly bracket variable, close curly.


00:22:59.100 --> 00:23:00.900
"with the format as a colon."


00:23:00.900 --> 00:23:04.140
So Dean is saying that if you put as the format string,


00:23:04.140 --> 00:23:07.700
curly variable that contains the format curly.


00:23:07.700 --> 00:23:10.180
So like curlies within curlies, that'll do it.


00:23:10.180 --> 00:23:11.020
That's awesome.


00:23:11.020 --> 00:23:11.840
Thanks.


00:23:11.840 --> 00:23:13.580
I had no idea and I have no idea how you found that out,


00:23:13.580 --> 00:23:15.340
but that's good.


00:23:15.340 --> 00:23:17.180
- Yo dog, I heard you like curly braces.


00:23:17.180 --> 00:23:18.180
(laughing)


00:23:18.180 --> 00:23:19.020
- I love them.


00:23:19.020 --> 00:23:21.860
Very cool, very cool.


00:23:21.860 --> 00:23:24.660
- All right.


00:23:24.660 --> 00:23:26.220
Let's see.


00:23:26.220 --> 00:23:27.180
Oh, I'm next.


00:23:27.180 --> 00:23:28.020
Cool.


00:23:28.020 --> 00:23:34.540
I want to cover a cool article from Vitor called,


00:23:34.540 --> 00:23:37.980
"How to Start a Production-Ready Django Project."


00:23:37.980 --> 00:23:41.820
This is just a fun project article


00:23:41.820 --> 00:23:44.920
because it's focused on Django definitely.


00:23:44.920 --> 00:23:48.060
But I think a lot of this advice is just a good idea for


00:23:48.060 --> 00:23:52.500
any web app or I guess it's mostly web app stuff.


00:23:52.500 --> 00:23:55.820
But anyway, it's worth a look


00:23:55.820 --> 00:23:58.460
even if you're using some other framework.


00:23:58.460 --> 00:24:01.620
Well, he starts out, just said at the beginning,


00:24:01.620 --> 00:24:04.180
when you get started project, just start it out right.


00:24:04.180 --> 00:24:07.020
So one of the things that I thought was neat


00:24:07.020 --> 00:24:10.780
was making sure that you set up a local environment,


00:24:10.780 --> 00:24:14.420
a test environment, and a production environment.


00:24:14.420 --> 00:24:17.940
And the easiest and most important is the local environment


00:24:17.940 --> 00:24:22.140
so that new developers can get up really quickly


00:24:22.140 --> 00:24:24.860
and just start, clone, and go.


00:24:24.860 --> 00:24:29.560
and I think that's really important to make sure that that's working well and easy.


00:24:29.560 --> 00:24:32.760
And then almost as important, and I would say maybe more important,


00:24:32.760 --> 00:24:35.300
but is a test environment.


00:24:35.300 --> 00:24:41.600
So if you're swapping out like a different database or something for your test,


00:24:41.600 --> 00:24:44.500
making sure that that's configured and set up so that


00:24:44.500 --> 00:24:48.160
the developers when they're contributing can easily run the tests


00:24:48.160 --> 00:24:50.260
before they submit code to you.


00:24:50.260 --> 00:24:52.400
So that's really important.


00:24:52.400 --> 00:24:56.640
And then a production environment and the setup for that,


00:24:56.640 --> 00:25:00.700
that is an interesting argument, that that can be more complicated.


00:25:00.700 --> 00:25:04.540
That can be a different thing, because most of the people involved in the project


00:25:04.540 --> 00:25:08.040
aren't really going to run that. It's just a handful of experienced developers.


00:25:08.040 --> 00:25:09.540
I think that's cool.


00:25:09.540 --> 00:25:12.340
So after setting up the environment sort of stuff,


00:25:12.340 --> 00:25:17.440
it covers making sure that you have Git or some other version control set up


00:25:17.440 --> 00:25:20.040
and use virtual environments. There you go, Jay.


00:25:20.100 --> 00:25:23.480
Make sure that you're doing virtual environments.


00:25:23.480 --> 00:25:26.360
But then there's a section on


00:25:26.360 --> 00:25:29.320
requirements.txt files that I think is amazing.


00:25:29.320 --> 00:25:30.960
Maybe everybody knew this already,


00:25:30.960 --> 00:25:33.080
but it hadn't occurred to me,


00:25:33.080 --> 00:25:35.720
is to have a directory instead


00:25:35.720 --> 00:25:38.840
of just a file and have several of them.


00:25:38.840 --> 00:25:40.880
The example has a base one,


00:25:40.880 --> 00:25:42.080
a test one, a local one,


00:25:42.080 --> 00:25:43.340
and a production one,


00:25:43.340 --> 00:25:45.560
and they can include each other.


00:25:45.560 --> 00:25:47.420
All of them include the base,


00:25:47.420 --> 00:25:50.060
And like local also includes text.


00:25:50.060 --> 00:25:53.420
So whatever your environment is, you can just install one of these,


00:25:53.420 --> 00:25:54.860
and it's the right one.


00:25:54.860 --> 00:25:58.820
And all the like the project stuff is all in the base.


00:25:58.820 --> 00:26:00.420
So everybody uses that.


00:26:00.420 --> 00:26:02.780
That's a pretty cool idea.


00:26:02.780 --> 00:26:03.620
I've never done that.


00:26:03.620 --> 00:26:05.620
Have you done that?


00:26:05.620 --> 00:26:07.820
Either of you used that sort of a model before?


00:26:07.820 --> 00:26:10.060
No.


00:26:10.060 --> 00:26:11.180
I'm terrible.


00:26:11.180 --> 00:26:13.540
I just put everything in environment variables,


00:26:13.540 --> 00:26:15.580
and then I never have to change my code.


00:26:15.580 --> 00:26:17.420
I just have to change my environment variables


00:26:17.420 --> 00:26:20.740
depending on what area of system I'm in.


00:26:20.740 --> 00:26:24.340
- Yeah, so that was discussion was around


00:26:24.340 --> 00:26:27.200
the requirements, but there's also a similar discussion


00:26:27.200 --> 00:26:28.300
around the settings.


00:26:28.300 --> 00:26:31.680
So the settings set up to make sure that you've got,


00:26:31.680 --> 00:26:34.180
you know, where the database is,


00:26:34.180 --> 00:26:35.600
where your server is and all that stuff


00:26:35.600 --> 00:26:37.460
and to have those set up for


00:26:37.460 --> 00:26:40.380
and switched for local test and production


00:26:40.380 --> 00:26:45.260
and just getting all of that stuff set up ahead of time,


00:26:45.260 --> 00:26:46.860
right at the beginning of the project.


00:26:46.860 --> 00:26:50.620
And included a couple of things I was surprised to see


00:26:50.620 --> 00:26:53.420
was making sure that you've got a consistent set


00:26:53.420 --> 00:26:57.740
of linting and styling tools like Black or Flake 8 or Isort.


00:26:57.740 --> 00:27:01.220
And then also editor configurations.


00:27:01.220 --> 00:27:03.700
It might make the whole team more productive


00:27:03.700 --> 00:27:06.020
if you just go ahead and store your


00:27:06.020 --> 00:27:07.980
editor configurations in the project.


00:27:07.980 --> 00:27:10.280
I never considered doing that.


00:27:10.280 --> 00:27:13.660
- Yeah, one thing that's really cool is for PyCharm,


00:27:13.660 --> 00:27:15.220
I don't know how VS Code works.


00:27:15.220 --> 00:27:16.700
There's maybe something for it as well.


00:27:16.700 --> 00:27:19.340
But in PyCharm, you can go and customize


00:27:19.340 --> 00:27:21.140
like the code cleanup and formatting


00:27:21.140 --> 00:27:24.380
and rules of like what it inspects and how it'll fix them.


00:27:24.380 --> 00:27:27.740
And then instead of saying, save that in my like user profile,


00:27:27.740 --> 00:27:30.980
you can say, save this in the PyCharm project.


00:27:30.980 --> 00:27:33.380
So if other people in the team open it up


00:27:33.380 --> 00:27:35.180
and it won't show squigglies,


00:27:35.180 --> 00:27:37.420
if like your convention is different than PEP 8,


00:27:37.420 --> 00:27:41.420
or if you format it, it won't jump around and stuff.


00:27:41.420 --> 00:27:42.620
- That's cool.


00:27:42.620 --> 00:27:44.900
And then of course there's some Django specific stuff


00:27:44.900 --> 00:27:47.060
like application structure and stuff.


00:27:47.060 --> 00:27:49.940
But I think, like I said, even if you're not using Django,


00:27:49.940 --> 00:27:52.020
this is a good set of things to look through.


00:27:52.020 --> 00:27:52.860
- Yeah, cool.


00:27:52.860 --> 00:27:54.460
I guess I do the thing with the requirements


00:27:54.460 --> 00:27:56.100
have like a dev version that's based


00:27:56.100 --> 00:27:58.780
on the production version and whatnot.


00:27:58.780 --> 00:28:01.140
But yeah, with settings, I hadn't really thought about that.


00:28:01.140 --> 00:28:02.460
That's cool.


00:28:02.460 --> 00:28:03.300
- Yeah.


00:28:03.300 --> 00:28:05.060
- Neat.


00:28:05.060 --> 00:28:07.060
- Indeed, indeed.


00:28:07.060 --> 00:28:10.880
Let's see, Jay, you got the next one?


00:28:10.880 --> 00:28:15.280
- I do, and just as I always try to bring


00:28:15.280 --> 00:28:18.880
some type of productivity app, tip or trick.


00:28:18.880 --> 00:28:20.320
This time it's a Mac app.


00:28:20.320 --> 00:28:24.320
I'm sorry, folks in Windows land, it's Mac only,


00:28:24.320 --> 00:28:27.240
but I'm sure you could do something similar


00:28:27.240 --> 00:28:30.040
with like AutoHotKey or one of the similar tools,


00:28:30.040 --> 00:28:32.680
but I'm talking about a program


00:28:32.680 --> 00:28:36.320
that a friend of mine, Brett Terpstra made called Bunch.


00:28:36.320 --> 00:28:40.840
It is interesting in how simple yet complex it can get.


00:28:40.840 --> 00:28:45.760
So those that don't know, I work on,


00:28:45.760 --> 00:28:48.300
I help Mike out from time to time,


00:28:48.300 --> 00:28:51.420
more specifically with the Talk Python newsletter.


00:28:51.420 --> 00:28:55.100
And this is literally the bunch that I run


00:28:55.100 --> 00:28:59.600
every time I start working on the newsletter.


00:28:59.600 --> 00:29:02.120
So the thing about Bunch that's really cool


00:29:02.120 --> 00:29:04.140
is one, it uses front matter to set up


00:29:04.140 --> 00:29:07.360
a bunch of different settings within the program.


00:29:07.360 --> 00:29:08.440
So that's what you see at the top.


00:29:08.440 --> 00:29:10.120
And now here's the title of the thing.


00:29:10.120 --> 00:29:12.800
I want it to run sequentially, not parallel.


00:29:12.800 --> 00:29:15.080
And then if I want to open an app,


00:29:15.080 --> 00:29:17.040
I just type the name of the app.


00:29:17.040 --> 00:29:19.200
If I want to open windows within that app,


00:29:19.200 --> 00:29:22.520
I just add a dash and provide the URLs


00:29:22.520 --> 00:29:26.080
or the file names for those files.


00:29:26.080 --> 00:29:27.760
- Interesting, so you've got like Safari


00:29:27.760 --> 00:29:31.120
and then it has three nested things that are URLs.


00:29:31.120 --> 00:29:33.040
So what it does is it opens Safari


00:29:33.040 --> 00:29:35.320
and then launches those three tabs?


00:29:35.320 --> 00:29:36.160
- Yep, perfect.


00:29:36.160 --> 00:29:39.960
And I actually don't even have to tell it to run Safari.


00:29:39.960 --> 00:29:43.900
I just kind of do here so people reading it can make sense of it.


00:29:43.900 --> 00:29:47.220
If I just put three URLs on there, it would just open up whatever the default


00:29:47.220 --> 00:29:49.460
browser is and then open those files.


00:29:49.460 --> 00:29:53.420
But by putting Safari in front, I tell it specifically open these in Safari.


00:29:53.420 --> 00:29:57.080
So if you work with, you know, Chrome, or if you want to do something like


00:29:57.080 --> 00:30:01.960
testing on multiple browsers, you could put, you know, each browser and


00:30:01.960 --> 00:30:04.580
then dash, whatever the URL is for that.


00:30:05.060 --> 00:30:11.380
But the thing I like about this is it also supports things like xcallback URLs, which are


00:30:11.380 --> 00:30:18.100
kind of a URL structure for running commands in applications that support it. You can add system


00:30:18.100 --> 00:30:23.220
commands and commands to Bunch itself, like throwing a pause in. If I wanted to actually


00:30:23.220 --> 00:30:29.380
go in and type, like at the end, whenever I finish the newsletter, I open up messages,


00:30:29.380 --> 00:30:32.380
I hit command F, which is that at sign and F.


00:30:32.380 --> 00:30:36.020
Pause for a second because sometimes my Mac is slow.


00:30:36.020 --> 00:30:39.100
And then I type in Michael Kennedy and hit enter.


00:30:39.100 --> 00:30:42.340
And you can even do some conditional stuff.


00:30:42.340 --> 00:30:45.180
Like I have an Apple script that just checks the date.


00:30:45.180 --> 00:30:49.660
If it's in the date range that I need to to make sure that I send bills off


00:30:49.660 --> 00:30:54.940
properly, then it also will open up, you know, Stripe and let me do my processing


00:30:54.940 --> 00:30:58.940
thing. But it supports shell scripts, which means it supports Python.


00:30:58.940 --> 00:31:03.040
I actually do have a couple that I'm running.


00:31:03.040 --> 00:31:06.360
Well, I haven't ran in a while, but it just opens up


00:31:06.360 --> 00:31:08.080
and it kind of does similar to what we were talking about


00:31:08.080 --> 00:31:10.000
in the first topic of like just going in


00:31:10.000 --> 00:31:13.020
and making sure that projects are up to date


00:31:13.020 --> 00:31:16.580
because I will forget the commands or I will mess them up.


00:31:16.580 --> 00:31:18.300
And it's easier if I can just follow along


00:31:18.300 --> 00:31:19.600
with what it's doing.


00:31:19.600 --> 00:31:21.360
And there's a lot of different tools here.


00:31:21.360 --> 00:31:22.960
I don't have enough time to talk about


00:31:22.960 --> 00:31:24.880
all the things it can do.


00:31:24.880 --> 00:31:26.880
One of Michael's tips that he left off


00:31:26.880 --> 00:31:30.320
setting do not disturb, I could do that by just typing in


00:31:30.320 --> 00:31:33.480
parentheses D and D like that.


00:31:33.480 --> 00:31:37.280
And it'll set do not disturb whenever this runs.


00:31:37.280 --> 00:31:42.280
- Can you set something like this as a part of your Z,


00:31:42.280 --> 00:31:44.940
your profile shell setup.


00:31:44.940 --> 00:31:47.560
So when you log in, it like kicks off one of these


00:31:47.560 --> 00:31:51.340
to sort of configure your environment the way you like it.


00:31:51.340 --> 00:31:53.920
So that's for example, I like one to log in


00:31:53.920 --> 00:31:56.320
and I want the first hour to have no notification.


00:31:56.320 --> 00:31:58.640
so I can just focus what I got energy in the morning


00:31:58.640 --> 00:32:01.840
and then like turn off D&D later or something like that.


00:32:01.840 --> 00:32:03.440
- So that's the cool thing with front matter


00:32:03.440 --> 00:32:06.040
is like you could just say, start on.


00:32:06.040 --> 00:32:08.680
And if I start my day at 7 a.m.,


00:32:08.680 --> 00:32:11.040
I just put start on 7 a.m.


00:32:11.040 --> 00:32:14.920
And I would just create a second bunch that says,


00:32:14.920 --> 00:32:17.880
start on whatever I wanted to end


00:32:17.880 --> 00:32:20.240
and then it would turn it off, like D&D off.


00:32:20.240 --> 00:32:22.760
I think you can actually even do like a close on.


00:32:22.760 --> 00:32:26.280
So I could even say like close on like 8 a.m.


00:32:26.280 --> 00:32:27.400
like that.


00:32:27.400 --> 00:32:29.520
And I don't know about that last one.


00:32:29.520 --> 00:32:32.560
I have to test that, but there's start at,


00:32:32.560 --> 00:32:34.760
so you can have it run on certain days of the week.


00:32:34.760 --> 00:32:37.880
There is not a way natively to have it run


00:32:37.880 --> 00:32:38.960
on a certain day of the month.


00:32:38.960 --> 00:32:40.160
It doesn't have cron support,


00:32:40.160 --> 00:32:42.400
but there is a workaround that I've highlighted


00:32:42.400 --> 00:32:45.400
in another video, which speaking of,


00:32:45.400 --> 00:32:47.640
I talked about this on my YouTube channel,


00:32:47.640 --> 00:32:50.680
which is youtube.com/kjmiller,


00:32:50.680 --> 00:32:53.440
my handle on everything that I do.


00:32:53.440 --> 00:32:55.300
- You got a nice YouTube video that walks through this,


00:32:55.300 --> 00:32:56.300
right? People can check that out.


00:32:56.300 --> 00:32:59.620
Yeah. And I break down everything that's happening in this


00:32:59.620 --> 00:33:00.620
particular bunch.


00:33:00.620 --> 00:33:03.900
Like even the Apple's, the Apple script, which is actually


00:33:03.900 --> 00:33:05.940
JavaScript, but it's fine.


00:33:05.940 --> 00:33:11.900
I would have expected D&D to like send out Dungeons and Dragons


00:33:11.900 --> 00:33:13.140
invites to random people.


00:33:13.140 --> 00:33:17.900
Well, funny enough, if you had a bunch called D&D, you could


00:33:17.900 --> 00:33:20.340
just do D&D.bunch like that and it would just run it.


00:33:20.340 --> 00:33:22.700
So that is doable.


00:33:22.700 --> 00:33:24.340
We can make that happen.


00:33:24.500 --> 00:33:25.300
Yeah, all right.


00:33:25.300 --> 00:33:28.060
Everybody get some Mountain Dew, order a pizza, show up.


00:33:28.060 --> 00:33:28.780
And now I know.


00:33:28.780 --> 00:33:29.740
How's this going to go?


00:33:29.740 --> 00:33:30.540
Exactly.


00:33:30.540 --> 00:33:32.220
By the way, Bunch is free.


00:33:32.220 --> 00:33:36.020
If you go to bunchapp.co, you can just install it and run it


00:33:36.020 --> 00:33:37.020
for free.


00:33:37.020 --> 00:33:38.980
Again, the developer, it's a solo developer,


00:33:38.980 --> 00:33:39.740
Brett Terpstra.


00:33:39.740 --> 00:33:43.020
He makes other mad science on the internet.


00:33:43.020 --> 00:33:46.700
And I believe he works for Oracle now, just recently.


00:33:46.700 --> 00:33:48.820
So yeah.


00:33:48.820 --> 00:33:51.780
And then if you're an Alfred user, which I can't really--


00:33:51.780 --> 00:33:54.180
I don't have a good way of showing you what Alfred is.


00:33:54.180 --> 00:33:58.420
but if you know, you know, I am the maintainer.


00:33:58.420 --> 00:34:00.700
- It's like the command space for Mac


00:34:00.700 --> 00:34:05.260
or the PowerShell, like little pop-up search in Windows,


00:34:05.260 --> 00:34:08.380
but like as a dedicated app that does more, right?


00:34:08.380 --> 00:34:12.380
- Exactly, and I am the maintainer of the bunch workflow,


00:34:12.380 --> 00:34:17.380
like the official, unofficial bunch workflow for Alfred.


00:34:17.380 --> 00:34:19.420
So if you ever need help with that,


00:34:19.420 --> 00:34:21.320
you know who to yell at, that'd be me.


00:34:22.820 --> 00:34:25.320
Fantastic. Oh, that's a cool one. A nice find there.


00:34:25.320 --> 00:34:26.620
Cool.


00:34:26.620 --> 00:34:32.120
All right, Brian, is that it for us? Our main items?


00:34:32.120 --> 00:34:35.220
It's that's up for our main items. Do we have anything extra?


00:34:35.220 --> 00:34:42.520
I was thinking no. And then actually, yes. So I just ran across this.


00:34:42.520 --> 00:34:47.820
We talked about GitHub co pilot. In fact, that was the title of last week.


00:34:47.820 --> 00:34:52.320
Yeah, it's like, GitHub, your copy, your pilots begin or something like that.


00:34:52.620 --> 00:34:57.720
and how both mind-blowing and good and possibly kind of crazy,


00:34:57.720 --> 00:35:00.120
not necessarily good ways that the copilot was,


00:35:00.120 --> 00:35:02.320
and it was pretty interesting, right?


00:35:02.320 --> 00:35:05.120
- Yeah. - So there's an article over on The Verge,


00:35:05.120 --> 00:35:10.780
and I had pointed out, like, what is the transit of license here?


00:35:10.780 --> 00:35:13.520
What's the... If you have a GPL license,


00:35:13.520 --> 00:35:16.880
and then you filter it through ML,


00:35:16.880 --> 00:35:21.760
is the transit of a property applied to the GPL, basically, was my question, right?


00:35:21.760 --> 00:35:23.980
And so there's an article over on the Verge call


00:35:23.980 --> 00:35:27.540
that says GitHub's automatic coding tool,


00:35:27.540 --> 00:35:31.260
aka GitHub Copilot rests on untested legal ground.


00:35:31.260 --> 00:35:35.460
So there's one section in here,


00:35:35.460 --> 00:35:37.180
it says, "Despite GitHub's assertion,


00:35:37.180 --> 00:35:39.940
"there's no direct legal precedent in the United States


00:35:39.940 --> 00:35:44.940
"that upholds publicly available training data as fair use."


00:35:44.940 --> 00:35:47.360
So anyway, people are interested in this,


00:35:47.360 --> 00:35:48.460
they can check it out.


00:35:50.380 --> 00:35:58.300
I think there's also a caveat there too of what GitHub is doing is on untested ground


00:35:58.300 --> 00:36:04.380
and your usage of what GitHub is doing is also on untested ground.


00:36:04.380 --> 00:36:11.560
Not saying that you can or can't use this, but just know that even if GitHub wins a lawsuit


00:36:11.560 --> 00:36:17.540
saying that they're good, you may not want to be the person to have to test the lawsuit


00:36:17.540 --> 00:36:20.220
of whether or not you're going to be good.


00:36:20.220 --> 00:36:21.820
So, and again, I'm not a lawyer,


00:36:21.820 --> 00:36:24.300
so I don't even pretend to be one.


00:36:24.300 --> 00:36:25.140
- Yeah.


00:36:25.140 --> 00:36:27.460
(indistinct)


00:36:27.460 --> 00:36:29.340
Yeah, it is quite cool.


00:36:29.340 --> 00:36:30.580
It's quite cool.


00:36:30.580 --> 00:36:32.640
All right, Dean, I always appreciate the help


00:36:32.640 --> 00:36:33.480
in the comments.


00:36:33.480 --> 00:36:36.300
So time for some extra, extra, extra, extra, extra.


00:36:36.300 --> 00:36:38.540
This time actually, no, I almost had no extras at all.


00:36:38.540 --> 00:36:40.900
I was feeling bad, but just the one.


00:36:40.900 --> 00:36:43.780
- Yeah.


00:36:43.780 --> 00:36:46.060
Okay, so I wanted to share something exciting.


00:36:46.060 --> 00:36:46.900
So-


00:36:46.900 --> 00:36:47.720
- Also one more thing.


00:36:47.720 --> 00:36:49.660
I didn't know if I clicked this or you clicked it,


00:36:49.660 --> 00:36:53.160
But Magnus says, "I also saw that CoPilot spouted API keys."


00:36:53.160 --> 00:36:55.460
So we've heard of Shaget and other,


00:36:55.460 --> 00:36:56.460
don't put secrets in here,


00:36:56.460 --> 00:36:58.380
but here's yet another interesting way.


00:36:58.380 --> 00:36:59.980
You want to connect to AWS?


00:36:59.980 --> 00:37:01.460
Here, here's the API key.


00:37:01.460 --> 00:37:03.220
- Here's the API key.


00:37:03.220 --> 00:37:04.260
That's awesome.


00:37:04.260 --> 00:37:05.100
Go ahead and try it.


00:37:05.100 --> 00:37:05.920
Why not?


00:37:05.920 --> 00:37:07.580
You don't know who's paying for that.


00:37:07.580 --> 00:37:08.400
- It's free.


00:37:08.400 --> 00:37:09.240
It's free for you.


00:37:09.240 --> 00:37:12.820
- So I'm continuing to work on the pytest book.


00:37:12.820 --> 00:37:16.540
I just got the configuration chapter turned in.


00:37:16.540 --> 00:37:18.180
It's not available in the beta yet,


00:37:18.180 --> 00:37:20.520
but it will be within the next few days.


00:37:20.520 --> 00:37:23.440
So configuration stuff, it's all fun.


00:37:23.440 --> 00:37:26.760
And then I'm excited to get working the next chapters.


00:37:26.760 --> 00:37:29.240
I'm gonna start working on our talks in CI


00:37:29.240 --> 00:37:30.680
and the search path and debugging


00:37:30.680 --> 00:37:31.880
and those will be fun chapters.


00:37:31.880 --> 00:37:35.140
So I just wanted to share where I'm at there.


00:37:35.140 --> 00:37:37.280
- Awesome, you're almost there.


00:37:37.280 --> 00:37:38.120
- Yeah.


00:37:38.120 --> 00:37:40.840
- And then I had an extra too,


00:37:40.840 --> 00:37:44.040
but it's so silly, but it's just fun.


00:37:44.040 --> 00:37:44.880
I have to stop sharing that


00:37:44.880 --> 00:37:46.480
and I have to share another window now.


00:37:46.480 --> 00:37:47.680
Thanks.


00:37:47.680 --> 00:37:48.520
- Thanks, Dreamy.


00:37:48.520 --> 00:37:52.720
- But I found a new tool to play with.


00:37:52.720 --> 00:37:55.080
It's called Monodraw,


00:37:55.080 --> 00:37:59.320
which is a very, very interesting tool.


00:37:59.320 --> 00:38:02.220
I don't know what most people would use it for,


00:38:02.220 --> 00:38:06.080
but I've been using it as an outline and planning tool,


00:38:06.080 --> 00:38:08.640
and I'm gonna show you what I do with it.


00:38:08.640 --> 00:38:10.240
I'm gonna add a text here,


00:38:10.240 --> 00:38:14.220
and it's gonna say, "Hi, Python Bytes crew."


00:38:16.240 --> 00:38:18.280
And I'm hit done.


00:38:18.280 --> 00:38:19.480
- So for people listening,


00:38:19.480 --> 00:38:22.480
this is like kind of drawing on graph paper.


00:38:22.480 --> 00:38:24.860
- Yep. - Yeah, okay.


00:38:24.860 --> 00:38:28.080
- So what happens if I expand this out


00:38:28.080 --> 00:38:30.960
and I tell it I want it to be a banner?


00:38:30.960 --> 00:38:35.360
- Oh, that's pretty fun. - What?


00:38:35.360 --> 00:38:37.680
- I wonder if I want it to be digital.


00:38:37.680 --> 00:38:40.040
- It turned it into like ASCII art and stuff.


00:38:40.040 --> 00:38:43.960
- Yeah, so this is a way to actually build


00:38:43.960 --> 00:38:46.560
like ASCII art outlines.


00:38:46.560 --> 00:38:49.260
And they have a bunch of different versions.


00:38:49.260 --> 00:38:53.300
And I mean, I've I've used this on a couple of projects.


00:38:53.300 --> 00:38:56.540
I'm trying to see if I have one that I can load up real quick


00:38:56.540 --> 00:38:58.440
for like a video that I've made.


00:38:58.440 --> 00:39:03.040
And when I say it doesn't make sense why this works for my brain,


00:39:03.040 --> 00:39:05.080
like it truly doesn't.


00:39:05.080 --> 00:39:10.060
But when it comes to did it did not move it to there,


00:39:10.060 --> 00:39:11.160
it didn't move to the right window.


00:39:11.160 --> 00:39:13.360
Hold on. Thanks again, StreamYard.


00:39:13.360 --> 00:39:18.800
Okay. I want to use this for my next status report and just do the entire


00:39:18.800 --> 00:39:28.360
status report in ASCII art. Yes. So funny you mentioned that because when I do my video


00:39:28.360 --> 00:39:34.280
planning I do it in this format and it's great because you can you know you can


00:39:34.280 --> 00:39:38.520
move stuff around you can draw arrows you can highlight different sections and


00:39:38.520 --> 00:39:41.680
and know how everything is going to look there.


00:39:41.680 --> 00:39:46.320
And when I say I was able to--


00:39:46.320 --> 00:39:48.720
in the normal time it would take for me to do a video,


00:39:48.720 --> 00:39:53.520
I cut that time in half by just drawing an outline out,


00:39:53.520 --> 00:39:56.440
using the different ASCII art to make things work.


00:39:56.440 --> 00:39:59.080
I'm going to build presentations with this.


00:39:59.080 --> 00:39:59.640
I don't know.


00:39:59.640 --> 00:40:04.200
I'm going to give a conference talk using ASCII art one day.


00:40:04.200 --> 00:40:07.000
You can copy and paste, but you can also


00:40:07.000 --> 00:40:09.880
export it as a PDF.


00:40:09.880 --> 00:40:11.680
Let me see what options I have here.


00:40:11.680 --> 00:40:16.680
You can export as PDF, scalable vector graphics,


00:40:16.680 --> 00:40:20.860
or I'm sorry, ping text or SVG, those three.


00:40:20.860 --> 00:40:22.840
For some reason, I thought there was a PDF version


00:40:22.840 --> 00:40:24.200
in there, but there is not.


00:40:24.200 --> 00:40:26.800
- Yeah, Sean out there was asking


00:40:26.800 --> 00:40:29.800
if you could export the art.


00:40:29.800 --> 00:40:34.120
Hey, Sean, co-host of the Teaching Python podcast.


00:40:35.080 --> 00:40:39.480
And I guess the thing is it is $5


00:40:39.480 --> 00:40:43.520
and I have a link in the show notes for it as well.


00:40:43.520 --> 00:40:44.720
But really fun tool.


00:40:44.720 --> 00:40:46.920
I haven't figured out all of my use cases for it,


00:40:46.920 --> 00:40:48.840
but I know that creating outlines and stuff


00:40:48.840 --> 00:40:52.120
has definitely been a very interesting


00:40:52.120 --> 00:40:54.200
and effective way of using it.


00:40:54.200 --> 00:40:55.280
And it's called Monodraw.


00:40:55.280 --> 00:40:56.640
And again, it's a Mac only app.


00:40:56.640 --> 00:40:57.720
I'm sorry, Windows folks,


00:40:57.720 --> 00:41:00.360
but I'm sure that there's something out there.


00:41:00.360 --> 00:41:02.280
And if not, build it.


00:41:02.280 --> 00:41:04.840
- Yeah, or get one of those weird macOS


00:41:04.840 --> 00:41:07.360
in the cloud as a service.


00:41:07.360 --> 00:41:08.360
- That's true.


00:41:08.360 --> 00:41:12.800
That one was Mac only to my knowledge.


00:41:12.800 --> 00:41:14.560
- Yeah.


00:41:14.560 --> 00:41:17.160
All right.


00:41:17.160 --> 00:41:18.280
Brian, how about you?


00:41:18.280 --> 00:41:19.440
Yeah, I think it's time for a joke.


00:41:19.440 --> 00:41:24.440
Okay, so imagine that we're here meeting for a startup


00:41:24.440 --> 00:41:26.760
and we're trying to figure out,


00:41:26.760 --> 00:41:31.200
we're gonna create some new API here


00:41:31.200 --> 00:41:33.720
and we just are having a bit of a trouble.


00:41:33.720 --> 00:41:38.420
So let's see.


00:41:38.420 --> 00:41:41.760
So this is like a little bit of a comic strip


00:41:41.760 --> 00:41:44.120
and I guess Jay, you wanna be the person at the computer.


00:41:44.120 --> 00:41:45.460
I'll be the bearded dude and Brian,


00:41:45.460 --> 00:41:47.260
you can be the guy with the glasses,


00:41:47.260 --> 00:41:48.300
other guy with glasses.


00:41:48.300 --> 00:41:49.140
All right.


00:41:49.140 --> 00:41:53.600
So they're trying to think of what to name this API, right?


00:41:53.600 --> 00:41:54.440
Or this thing.


00:41:54.440 --> 00:41:56.280
So data?


00:41:56.280 --> 00:41:58.820
- Nah, too generic.


00:41:58.820 --> 00:42:00.820
- How would data DB?


00:42:00.820 --> 00:42:01.920
- Unclear.


00:42:01.920 --> 00:42:05.860
- Let's say list completed.


00:42:05.860 --> 00:42:07.660
- I already used that.


00:42:07.660 --> 00:42:11.080
- Array list data completed then?


00:42:11.080 --> 00:42:12.000
- Nah.


00:42:12.000 --> 00:42:18.140
We must choose now or the client might cancel the project.


00:42:18.140 --> 00:42:21.720
- Well, how about array list completed


00:42:21.720 --> 00:42:24.340
from form without duplicate?


00:42:24.340 --> 00:42:26.780
- Nah, that's too long.


00:42:26.780 --> 00:42:30.360
- And then the next panel has like a newspaper


00:42:30.360 --> 00:42:33.760
clipping that says unable to name variable, they go bust.


00:42:33.760 --> 00:42:34.520
Yeah, exactly.


00:42:34.520 --> 00:42:35.280
Go out of business.


00:42:35.280 --> 00:42:36.160
They couldn't choose naming.


00:42:36.160 --> 00:42:38.660
That is one of the hard problems in computer science, right,


00:42:38.660 --> 00:42:39.680
is naming.


00:42:39.680 --> 00:42:40.640
Yeah.


00:42:40.640 --> 00:42:43.600
Yeah, definitely.


00:42:43.600 --> 00:42:48.000
I didn't see completed form or completed form


00:42:48.000 --> 00:42:49.760
without duplicates.


00:42:49.760 --> 00:42:52.120
Like, that's what I see.


00:42:52.120 --> 00:42:54.180
It's almost like the array list, which, I mean,


00:42:54.180 --> 00:43:00.240
if you're making good readable code,


00:43:00.240 --> 00:43:02.680
you would know that it's an array list.


00:43:02.680 --> 00:43:04.360
So I would say, yeah.


00:43:04.360 --> 00:43:07.120
You don't need to complete it form without duplicate.


00:43:07.120 --> 00:43:09.160
- Yeah, they would have, well, you would have saved them.


00:43:09.160 --> 00:43:10.760
They'd still be in business.


00:43:10.760 --> 00:43:15.040
- Or unique, unique, like completed unique.


00:43:15.040 --> 00:43:17.720
- Just everybody just use foo, bar and baz


00:43:17.720 --> 00:43:19.520
and then nobody will complain.


00:43:19.520 --> 00:43:21.640
(laughing)


00:43:21.640 --> 00:43:24.760
So do you remember those Microsoft isms


00:43:24.760 --> 00:43:27.760
where they would like prefix types,


00:43:27.760 --> 00:43:29.440
variables with their type names?


00:43:29.440 --> 00:43:33.480
- Hungarian notation like SZ for string.


00:43:33.480 --> 00:43:34.680
What the heck was the Z there for?


00:43:34.680 --> 00:43:35.520
- Size, SZ.


00:43:35.520 --> 00:43:38.120
- Size, that's right, yeah.


00:43:38.120 --> 00:43:39.480
Oh my gosh, that was dreadful.


00:43:39.480 --> 00:43:40.580
- Terrible, yeah.


00:43:40.580 --> 00:43:42.960
With like three characters left over


00:43:42.960 --> 00:43:44.400
for the actual variable name.


00:43:44.400 --> 00:43:47.080
Anyway, cool.


00:43:47.080 --> 00:43:48.000
Well, this was fun.


00:43:48.000 --> 00:43:49.800
Thanks Jay for showing up today


00:43:49.800 --> 00:43:51.560
and thanks Michael as always.


00:43:51.560 --> 00:43:52.680
- Yeah, you bet.


00:43:52.680 --> 00:43:53.520
Bye guys.


00:43:53.520 --> 00:43:55.240
Thanks everyone for listening. - Bye.


00:43:55.240 --> 00:44:05.240
[BLANK_AUDIO]

