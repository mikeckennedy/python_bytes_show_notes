WEBVTT

00:00:00.001 --> 00:00:11.440
Hey Michael, hello everybody. Hello, hello. It's a wonderful April now. Happy April. Happy

00:00:11.440 --> 00:00:17.640
April. I hope the Easter bunny has come and laid many chocolate eggs at your house. What

00:00:17.640 --> 00:00:25.080
a weird way to celebrate, but Easter eggs are still good. Yeah, I think I overcooked

00:00:25.080 --> 00:00:30.720
our hard-boiled eggs though and they've got green centers. So I kind of combine combining

00:00:30.720 --> 00:00:38.520
like St. Patrick's Day and Easter together. Perfect. So anyway, let's kick it off.

00:00:38.520 --> 00:00:42.400
Hello and welcome to Python Bytes where we deliver Python news and headlines directly

00:00:42.400 --> 00:00:49.520
to your earbuds. This is episode 377 recorded April 2nd, 2024. So it's not an April Fool's

00:00:49.520 --> 00:00:58.480
joke and I am Brian Okken. I am Michael Kennedy. This episode is sponsored by Scout APM. Please

00:00:58.480 --> 00:01:04.160
listen to their segment later in the show. If you want to connect with us, we're at Fosstodon

00:01:04.160 --> 00:01:13.160
on Mastodon @mkennedy, @brianokken@pythonbytes@fosstodon.org. And if you'd like to join us live for the live

00:01:13.160 --> 00:01:18.960
show, show up at pythonbytes.fm/live. Actually you can just go there anytime and it tells

00:01:18.960 --> 00:01:25.200
you when the next recording is so you can put it on your calendar. And finally, if you

00:01:25.200 --> 00:01:32.060
want an artisanal handcrafted digest of every week of show notes in your email, so maybe

00:01:32.060 --> 00:01:36.480
you don't catch the, you don't want to take notes while you're listening or you miss an

00:01:36.480 --> 00:01:42.120
episode, you can get it right in your email. Just go to the pythonbytes.fm and look for

00:01:42.120 --> 00:01:46.600
friends of the show and you'll get an email.

00:01:46.600 --> 00:01:51.720
Yeah, that's a cool thing we just started doing. So if you want to just, you don't have

00:01:51.720 --> 00:01:56.360
time to listen or you forget to show up for an episode, it'll just show up. And I love

00:01:56.360 --> 00:02:01.160
the artisanal part, Brian. Well done on that. Very, it's very craftsman like.

00:02:01.160 --> 00:02:02.640
Yeah. Anyway.

00:02:02.640 --> 00:02:06.720
I just want to talk about paths today. Can we just talk about paths?

00:02:06.720 --> 00:02:08.720
Yeah. Just paths. Nothing else.

00:02:08.720 --> 00:02:14.720
Nothing. Just paths. Actually, that's what it's called. Just paths. Okay. So here's a

00:02:14.720 --> 00:02:23.040
tool that is built in Python and just, it's just a language. It's 1.2% just. I don't know.

00:02:23.040 --> 00:02:30.120
This is too meta. Anyway, it's a quick CLI tool built with Python. And when you hear

00:02:30.120 --> 00:02:35.460
that, the first thing you should think is pipx install the thing, because that's how

00:02:35.460 --> 00:02:42.380
you install CLI tools for Python, right? It gets managed on its own. It gets, it's upgradable

00:02:42.380 --> 00:02:45.360
through pipx and all the things. They made a little mistake here. Like I should do a

00:02:45.360 --> 00:02:51.480
PR and put an X on the pipx install just path. Okay. So what is this thing? What it does

00:02:51.480 --> 00:03:00.240
is it it's for a windows and macOS, I believe is what it's for. No windows Linux and Mac

00:03:00.240 --> 00:03:06.320
OS as well, because it basically pretends macOS is Linux. And what it does is it will

00:03:06.320 --> 00:03:12.560
look at your path variable and see, help you determine if it's good. So if you want to

00:03:12.560 --> 00:03:17.600
answer questions like when I type Python, I always get Python two. Why is that? When

00:03:17.600 --> 00:03:23.080
I type Python, I get Python three 10, but I have three 12 installed. Why is that? When

00:03:23.080 --> 00:03:27.880
I pip install or pipx install a thing, it claims that stuff that gets installed by it

00:03:27.880 --> 00:03:32.480
won't be in the path. Wait, I thought it was, Oh no, wait, that was three 11, not the three

00:03:32.480 --> 00:03:35.720
12 version of that. All these complicated little weird things that you run into all

00:03:35.720 --> 00:03:41.840
the time. This is just a CLI tool that you just say, tell me how, how am I doing? What

00:03:41.840 --> 00:03:49.040
is my path? What stuff like do it? Do I have something in my path that links to a directory,

00:03:49.040 --> 00:03:54.520
but the directory is no longer there. So for example, if I have Python three 10 in my path,

00:03:54.520 --> 00:03:59.520
but I've uninstalled Python three 10, but it's still in my dot CSHRC or bash RC file

00:03:59.520 --> 00:04:05.320
or, or windows path environment variables, whatever, right? That kind of stuff. Cool,

00:04:05.320 --> 00:04:11.440
huh? Yeah, actually. Yeah. So it does a bunch of different things. It can do just dash dash

00:04:11.440 --> 00:04:16.080
raw to show you what it is. You can just run it by itself and it gives you this colored

00:04:16.080 --> 00:04:21.720
output of each element in your path. So it parses the path and then it goes line by line

00:04:21.720 --> 00:04:27.560
and tells you green. This exists yellow. It's a duplicate of something that was there before.

00:04:27.560 --> 00:04:32.280
So if you have something in your path multiple times, maybe it's earlier than later and you

00:04:32.280 --> 00:04:36.820
thought it should be later. So that's also a weird thing going on or it'll turn it red.

00:04:36.820 --> 00:04:42.360
If there are some that don't exist. Yeah. So that's pretty cool. You can ask for just

00:04:42.360 --> 00:04:47.020
the invalids just for the duplicates. You can ask it to follow some links and then resolve

00:04:47.020 --> 00:04:52.280
whether those are duplicates or not. And then you can say, give me a corrected version as

00:04:52.280 --> 00:04:57.080
a string or not as a string as a list. And then that will let you basically remove the

00:04:57.080 --> 00:05:05.160
duplicates, remove the missings and go from. There's a little video here that's a, is it

00:05:05.160 --> 00:05:09.320
a gif here or something? I don't know. But if you want to watch the video, you can pull

00:05:09.320 --> 00:05:14.520
it up and you'll see like what it looks like when it runs and all the colors and stuff,

00:05:14.520 --> 00:05:21.360
but it's super easy to try out. So I recommend people check out just path. I think it's handy.

00:05:21.360 --> 00:05:26.880
I, my score is not that amazing. I just ran it, Brian, 42 directories in my path, 12 do

00:05:26.880 --> 00:05:31.200
not exist. Fully 12 of them. And four of which that do are duplicates.

00:05:31.200 --> 00:05:39.640
Yeah. I've got a bunch of problems with mine. Okay. Who knew? Right. Well, you know, you

00:05:39.640 --> 00:05:44.240
kind of like, you know, keep things around, you install stuff, change things. Yeah. This

00:05:44.240 --> 00:05:47.640
stuff is right only. Right. Like why would you take stuff out of your path? You know,

00:05:47.640 --> 00:05:52.040
you just keep putting, adding to it and adding to it. But then like you say, you uninstall

00:05:52.040 --> 00:06:02.160
things, stuff changes, et cetera. Yeah. I have like added my user users, Aachen

00:06:02.160 --> 00:06:07.800
dot local slash bin. Apparently that doesn't exist anymore. And I don't even remember ever

00:06:07.800 --> 00:06:16.840
using that. So, okay. Cool. Interesting. Yeah. It's, it's easy to adopt the news. You just

00:06:16.840 --> 00:06:20.360
pip X install it and you just run the thing and it tells you what's up.

00:06:20.360 --> 00:06:29.320
Cool. Well, that's exciting. I have like, you know, doom and gloom next. So, yeah, the,

00:06:29.320 --> 00:06:35.760
the XZ backdoor I'm I don't know if everybody's heard about this. It just really sort of popped

00:06:35.760 --> 00:06:40.440
up last Friday. So it's fairly recent. Have you been keeping up on XZ?

00:06:40.440 --> 00:06:47.040
Yeah, it definitely has caught my attention and makes me quite nervous. I think we just

00:06:47.040 --> 00:06:54.360
missed this in getting released to basically every server on the internet, which is really

00:06:54.360 --> 00:07:00.200
good. Yeah. So if you've just sort of heard about

00:07:00.200 --> 00:07:04.200
it, I'm going to provide a, there's a lot of articles on it and some of it has good

00:07:04.200 --> 00:07:10.920
information. Some of it has dubious, a little bit, maybe opinionated stuff, which is fine,

00:07:10.920 --> 00:07:18.040
but I'm linking to an article from Evan Bowen, but Evan Bowes, B O E H S not sure how to

00:07:18.040 --> 00:07:25.040
pronounce that. Anyway, everything I know about the XZ backdoor, and it's a fairly curated

00:07:25.040 --> 00:07:30.360
timeline of what the backdoor is, but it, well, it's about the timeline of how it happened,

00:07:30.360 --> 00:07:35.720
but the gist, if you haven't heard about it, this is that there was a backdoor added

00:07:35.720 --> 00:07:42.960
to, I think it's XZ utils. XZ is the compression or like an unzipper zipper, unzipper sort

00:07:42.960 --> 00:07:53.520
of thing. And archive tool for Linux and other Unix like distributions. So it's a weird story

00:07:53.520 --> 00:08:01.240
that start this multi-year that's the word, the part that's freaky is a, a little utility

00:08:01.240 --> 00:08:09.160
that's included everywhere that starting in 2021 somebody well, they went by the name

00:08:09.160 --> 00:08:14.960
of Gia Tan, but nobody really believes that that's really their name started contributing

00:08:14.960 --> 00:08:22.160
to open source, added a patch and these patches were added like in long, long times apart

00:08:22.160 --> 00:08:29.720
and then ended up becoming a maintainer of XZ and then creating in part of the test code

00:08:29.720 --> 00:08:37.760
and this, the, there wasn't a vulnerability in the, in github, but there was in the distributed

00:08:37.760 --> 00:08:41.960
tar release. I don't know that there's a lot of details that I didn't quite follow all

00:08:41.960 --> 00:08:48.840
of it. However, yuck and weird. And so the part that I want to talk about really is one,

00:08:48.840 --> 00:08:52.280
you should just be aware of this and we're going to link to a good article. I think it's

00:08:52.280 --> 00:08:56.560
right before, before you go on a little farther, because before we move on to just the real

00:08:56.560 --> 00:09:04.120
basics of it, the I basically, this, this vulnerability was intentionally put there

00:09:04.120 --> 00:09:13.280
as a backdoor to break open SSH connections. So the idea was if you can SSH to your server,

00:09:13.280 --> 00:09:18.080
this was going to give other people acts SSH access to your server, which is extraordinarily

00:09:18.080 --> 00:09:25.360
bad. Yeah. And the SSH into it with root access. So they, they have like full access really.

00:09:25.360 --> 00:09:30.560
Yeah. Terrible would have been a terrible backdoor. Glad it got caught. So it got caught

00:09:30.560 --> 00:09:38.760
by like somebody at Microsoft, Microsoft Postgres team, I think looking at, at some of their

00:09:38.760 --> 00:09:44.920
over like an update of XZ causing, or actually a slowdown in some of their, I think it was

00:09:44.920 --> 00:09:49.720
in their test suite or something. They were running micro benchmarks and they saw like

00:09:49.720 --> 00:09:54.600
a 600 millisecond slowdown or something like, geez, that's weird. How about that testing

00:09:54.600 --> 00:09:59.440
for the wind, Brian? Yeah. And then also I guess Valgrind caught some problems with it

00:09:59.440 --> 00:10:04.840
as well. So I guess good thing that people were paying attention to that and then tracked

00:10:04.840 --> 00:10:14.440
it down rap fairly rapidly to a update of XZ. And then but then some of the unraveling

00:10:14.440 --> 00:10:19.880
of this is just, okay. So there was a vulnerability. It got caught. People are updating. That's

00:10:19.880 --> 00:10:28.040
good because you really don't want this here. However some of the ways in which this happened

00:10:28.040 --> 00:10:34.160
are disturbing. And so that's why I think it's useful to read up on this a little bit

00:10:34.160 --> 00:10:43.120
partly because this XZ utility was not, it's mostly maintained by one person over years.

00:10:43.120 --> 00:10:49.800
Right. So, and then somebody comes along and wants a patch and is sort of, there's some

00:10:49.800 --> 00:10:56.880
sort of kind of not nice things said, including things like clearly don't do patches to this

00:10:56.880 --> 00:11:02.800
because they don't, the current maintainer has lost interest or doesn't care anymore.

00:11:02.800 --> 00:11:08.040
Saying mean things like this kind of pressured, and this is way back in 2022, pressuring the

00:11:08.040 --> 00:11:13.640
person into adding another maintainer, then, Hey, there's another maintainer ready and

00:11:13.640 --> 00:11:16.200
they're adding garbage to it. So.

00:11:16.200 --> 00:11:22.280
>> They just happened to work for some state sponsored hacker group. I'm sure they'll do

00:11:22.280 --> 00:11:24.400
a good job maintaining it for us.

00:11:24.400 --> 00:11:32.880
>> Yeah. So maybe, and there's, you know, basically I guess, watch out for this, but

00:11:32.880 --> 00:11:37.320
also I think, so one of the things I wanted to talk about is how do we, how do we avoid

00:11:37.320 --> 00:11:42.480
stuff like this? This is, I don't have an answer for it, but there's a lot of people

00:11:42.480 --> 00:11:49.000
discussing like, what do we do about it? Including a glyph whose answer may have been just is

00:11:49.000 --> 00:11:55.160
I'm willing to link to his article called software needs to be more expensive. Essentially

00:11:55.160 --> 00:11:59.240
we hit a lot of free software. Maybe we should start paying the maintainers so that people,

00:11:59.240 --> 00:12:04.280
I mean, burnout is a real thing, but you pay people, they will work on stuff or somebody

00:12:04.280 --> 00:12:10.600
else will. However, I don't think that's, that's quite one of the interesting thing,

00:12:10.600 --> 00:12:16.240
his idea. I'll just mention this cause I think it's interesting is he's got an idea called

00:12:16.240 --> 00:12:22.760
just J G M M just give maintainers money. And his idea is not to have companies try

00:12:22.760 --> 00:12:28.200
to figure out who to give money to. It's, it's his idea is just give every software

00:12:28.200 --> 00:12:33.600
engineer with your company a discretionary budget of like say 50 bucks a month or whatever

00:12:33.600 --> 00:12:38.600
you want to do. And, and they can distribute that money to open source maintainers however

00:12:38.600 --> 00:12:44.560
they want. Interesting idea. I don't think if, even if that was in place, I don't think

00:12:44.560 --> 00:12:52.320
that it, which I think is a good idea. I don't think it would be have gone to XZ really.

00:12:52.320 --> 00:12:58.520
Cause I would have thought things like, you know, Django or, you know, Python, but but

00:12:58.520 --> 00:13:06.400
I give money to a little zip utility, probably not. Anyway. So I think this is a good thing

00:13:06.400 --> 00:13:13.600
to keep up on. And, and I do that this idea of like bringing on maintainers, you have

00:13:13.600 --> 00:13:17.600
to be able to do that, but you have to, how do you tell if somebody is going to be malicious

00:13:17.600 --> 00:13:21.520
a couple of years from now? I don't know. That's, that's how do you, I don't think you

00:13:21.520 --> 00:13:24.040
can check for that.

00:13:24.040 --> 00:13:31.200
It is tough. Yeah. That person, that person played the long game for sure.

00:13:31.200 --> 00:13:36.400
Yeah. So I thought, well, okay, well I don't run any servers, so I'm fine. But then I ran

00:13:36.400 --> 00:13:44.480
across Jeff triplets article called upgrade, update and upgrade homebrew and the XZ versions.

00:13:44.480 --> 00:13:49.720
I'm like, what? Yeah. So if you, you should, if you run homebrew on your Mac, you should

00:13:49.720 --> 00:13:59.200
run brew info XZ. And if, if it shows up at five dot six X you need to update. And sure

00:13:59.200 --> 00:14:05.720
enough, I had the vulnerability on my machine. I checked it and I was, I was out of date

00:14:05.720 --> 00:14:08.320
or actually I was, I had upgraded to the new one and

00:14:08.320 --> 00:14:17.120
I just checked, I don't seem to have it, which is very good. I don't know. But the thing

00:14:17.120 --> 00:14:22.800
is you probably didn't install XZ. You probably installed the other thing, which depended

00:14:22.800 --> 00:14:27.840
on something, which depended on XC, which is all parts of the supply chain problems,

00:14:27.840 --> 00:14:28.840
which is scary.

00:14:28.840 --> 00:14:35.240
Yeah. But I guess, thanks dude at Microsoft that found this.

00:14:35.240 --> 00:14:42.120
Yeah, indeed. You know, you say probably would think that the 50 bucks wouldn't go to XC,

00:14:42.120 --> 00:14:46.920
but I really like glyphs article. First of all, well done glyph. That was a very nice

00:14:46.920 --> 00:14:53.600
article you wrote and I enjoyed reading it. It's also a very thoughtful idea. I think

00:14:53.600 --> 00:15:00.480
his idea is basically instead of trying to get large companies to come on and be sponsors

00:15:00.480 --> 00:15:06.080
of open source projects, usually that's a huge negotiation and there's all sorts of

00:15:06.080 --> 00:15:10.880
stuff and right. It's just not easy. Just give everybody 50 bucks a year or a month.

00:15:10.880 --> 00:15:15.120
I can't remember. I think it was maybe a month. Anyway, give people a card and they

00:15:15.120 --> 00:15:21.560
could just donate it to whichever open source project that they would like. And I agree

00:15:21.560 --> 00:15:25.920
if there's a thousand people that did that, Brian, that XC probably wouldn't make it.

00:15:25.920 --> 00:15:31.880
But wouldn't it be awesome if there was a world where there were so many people who

00:15:31.880 --> 00:15:36.240
were just donating to open source that it became super lucrative that second tier projects

00:15:36.240 --> 00:15:42.640
were even potentially full time things like rockstar developers, like ballers are rolling

00:15:42.640 --> 00:15:49.120
up in their Ferrari because they're running FastAPI or Sebastian is doing. That would

00:15:49.120 --> 00:15:53.880
be really cool. Think of how much more open source should get created if it was a gold

00:15:53.880 --> 00:15:56.600
rush as well.

00:15:56.600 --> 00:16:00.960
I think it would be neat and also even not necessarily a full time job, but just to be

00:16:00.960 --> 00:16:08.720
able to say even if I have to take the time unpaid for my normal job, if I took like a

00:16:08.720 --> 00:16:15.480
day a week off and just worked on open source, my open source project instead. And sometimes

00:16:15.480 --> 00:16:20.400
it's not even adding features. It's just going through issues, doing all of the bookkeeping

00:16:20.400 --> 00:16:21.960
and the maintenance and everything.

00:16:21.960 --> 00:16:22.960
Or VPRs.

00:16:22.960 --> 00:16:23.960
Yeah.

00:16:23.960 --> 00:16:29.960
Or maybe you're a consultant, you take one for your clients on something like that. Right?

00:16:29.960 --> 00:16:30.960
Exactly. So thanks.

00:16:30.960 --> 00:16:37.360
Pretty cool. Yeah. Yeah. I'm glad you covered this.

00:16:37.360 --> 00:16:43.480
Well we would like to thank Scout APM for sponsoring this episode. Thanks Scout.

00:16:43.480 --> 00:16:49.440
Let me tell you real quick about Scout APM. They're big supporters of Python Bytes. So

00:16:49.440 --> 00:16:56.000
we appreciate that very much. So if you are tired of spending hours trying to find the

00:16:56.000 --> 00:17:01.040
root cause of issues impacting your performance, then you owe it to yourself to check out Scout

00:17:01.040 --> 00:17:07.600
APM. They're a leading Python application performance monitoring tool, APM, that helps

00:17:07.600 --> 00:17:13.360
you identify and solve performance abnormalities faster and easier. Scout APM ties bottlenecks

00:17:13.360 --> 00:17:17.760
such as memory leaks, slow database queries, background jobs, and the dreaded N plus one

00:17:17.760 --> 00:17:24.080
queries that you can end up if you do lazy loading in your ORM, then you say, "Oh no,

00:17:24.080 --> 00:17:28.280
why is it so slow? Why are you doing 200 database queries for what should be one?" So you can

00:17:28.280 --> 00:17:32.520
find out things like that. And it links it back directly to the source code. So you can

00:17:32.520 --> 00:17:37.440
spend less time in the debugger and peeling logs and just finding the problems and moving

00:17:37.440 --> 00:17:42.120
on. And you'll love it because it's built for developers by developers. It makes it

00:17:42.120 --> 00:17:46.780
easy to get set up. Seriously, you can do it in less than four minutes. So that's awesome.

00:17:46.780 --> 00:17:51.720
And the best part is the pricing is straightforward. You only pay for the data that you use with

00:17:51.720 --> 00:17:58.080
no hidden overage fees or per seat pricing. And I just learned this, Brian, they also

00:17:58.080 --> 00:18:03.400
have, they provide the pro version for free to all open source projects. So if you're

00:18:03.400 --> 00:18:09.080
an open source maintainer and you want to have Scout APM for that project, just shoot

00:18:09.080 --> 00:18:12.560
them a message or something on their pricing page about that. So you can start your free

00:18:12.560 --> 00:18:19.560
trial and get instant insights today. Visit pythonbytes.fm/scout. The link is in your podcast

00:18:19.560 --> 00:18:24.640
player show notes as well. And please use that link. Don't just search for them because

00:18:24.640 --> 00:18:28.160
otherwise they don't think you came from us and then they'd stop supporting the show.

00:18:28.160 --> 00:18:34.000
So please use our link pythonbytes.fm/scout. Check them out. It really supports the show.

00:18:34.000 --> 00:18:43.400
Indeed. All right. Now, Brian, let's talk about some fast stuff. Okay. L Python. Have

00:18:43.400 --> 00:18:51.760
you heard of L Python? No. This is news to me. So L Python is a high performance typed

00:18:51.760 --> 00:18:57.520
Python compiler. So basically if you use type annotations or type hints on your Python code,

00:18:57.520 --> 00:19:04.520
it can aggressively optimize and compile your Python code. And it uses multiple backends,

00:19:04.520 --> 00:19:10.640
which is pretty interesting. So you can compile using LLVM. You can compile it to C, you can

00:19:10.640 --> 00:19:17.960
compile it to C++ or you can compile it to WASM WebAssembly. That's wild, right? Yeah.

00:19:17.960 --> 00:19:22.440
So right now, just a heads up before people get too excited, it's an alpha stage, so it's

00:19:22.440 --> 00:19:28.720
not quite ready for maybe adoption. But if you're curious about it, you should definitely

00:19:28.720 --> 00:19:33.680
check it out. You can play with it and so on. And so it's starting to pick up speed.

00:19:33.680 --> 00:19:40.240
It's got a little over a thousand GitHub stars. And you can try it in your browser. Let's

00:19:40.240 --> 00:19:45.600
try the browser. Before I move on, though, let's say it's fast. It's built from the ground

00:19:45.600 --> 00:19:50.980
up to translate primarily data sciencey code, because that's primarily where things get

00:19:50.980 --> 00:19:56.160
slow and actually matter in Python. But numerical array oriented code into simple, readable

00:19:56.160 --> 00:20:05.120
and fast code, basic math. So it knows about, you know, sized integers, for example, in

00:20:05.120 --> 00:20:13.600
32 and so on. It has just in time compilation, which you can get if you don't want to run

00:20:13.600 --> 00:20:18.720
a compiler itself. You can just put an @lpython decorator onto a function and it'll just compile

00:20:18.720 --> 00:20:22.500
at a runtime, which is kind of cool, because then I guess you probably don't need to distribute

00:20:22.500 --> 00:20:30.840
binary versions on your packages, your wheels and so on. It's interoperable with CPython.

00:20:30.840 --> 00:20:40.720
So basically, you can call all the CPython functions. And it's also, if it works in CPython,

00:20:40.720 --> 00:20:45.920
it works here, it'll work in CPython, basically. Is it a subset, I guess, in a sense, and open

00:20:45.920 --> 00:20:50.460
source. All right, let's play with it for just a second. So if you go to dev.lpython.org,

00:20:50.460 --> 00:20:55.220
it loads up in the browser. And you can notice it loaded pretty quickly, although I have

00:20:55.220 --> 00:20:59.440
gigabit internet, it's still loaded pretty quickly. See this picture here on the screen

00:20:59.440 --> 00:21:04.480
behind? This is the Mandelbrot set, which I don't know how many people have done fractals,

00:21:04.480 --> 00:21:11.240
but it's drawing two different copies of the Mandelbrot set. And what is that a 600 by

00:21:11.240 --> 00:21:20.200
600 image, maybe? It's got a black and white one and a color map one. It says it took a

00:21:20.200 --> 00:21:24.840
little under half a second to compile it and 80 milliseconds to generate those two images.

00:21:24.840 --> 00:21:28.640
And you can come over here and you can say like, all right, what I'm going to do is,

00:21:28.640 --> 00:21:35.120
what is that number? I'm going to make this, let's say 355 iterations, and then we'll run

00:21:35.120 --> 00:21:43.680
it again. And 100 milliseconds, right? If I make that, if I make this something really

00:21:43.680 --> 00:21:50.040
silly here, like, Oh no, why did I go away? Back button is not supposed to, or the delete

00:21:50.040 --> 00:22:00.000
button is not supposed to navigate backwards. Hold on. Ooh, really big. There we go. All

00:22:00.000 --> 00:22:05.040
right, there we go. Okay. So if I run it again, now, watch how fast this is like boom. That's

00:22:05.040 --> 00:22:10.280
it. And then I'll put it back to what was it before? Something real weird the way it's

00:22:10.280 --> 00:22:14.640
like capturing my mouse. But anyway, people can come check this out and see it running.

00:22:14.640 --> 00:22:22.400
It runs super fast as Python. And you think all this, you know, iterative generating a

00:22:22.400 --> 00:22:29.320
ton of paralyzed computation in WebAssembly in the browser with Python. I'm pretty impressed.

00:22:29.320 --> 00:22:36.000
Yeah, that's pretty cool. Hey, who's behind this? Do you know? Mr. L Python? I have no

00:22:36.000 --> 00:22:45.680
idea honestly. It's by L compilers is what it says at the bottom. So what is that? L

00:22:45.680 --> 00:22:57.280
compilers.org. Yeah. Good question. It has no public members, but it is exciting. So

00:22:57.280 --> 00:23:06.240
yeah, nor does it have a web page. Hopefully it's not an APT crew. Anyway, no, seriously,

00:23:06.240 --> 00:23:10.180
it looks like a cool project and people can check it out. There's a lot of these ideas

00:23:10.180 --> 00:23:19.320
happening now, but yeah, that's quite interesting. Yeah. Well, my last topic was kind of dramatic

00:23:19.320 --> 00:23:27.840
with the whole XZ thing. So I'd like to continue the drama with and bring it into Python and

00:23:27.840 --> 00:23:35.120
with the help of Trey Hunter. And he has a way to make your Python more dramatic. Actually

00:23:35.120 --> 00:23:40.600
your Python output more dramatic with a, I'm just kind of joking, but it's kind of fun

00:23:40.600 --> 00:23:48.440
with the name. He's got a tool called dramatic. And what it does is it slows down the print

00:23:48.440 --> 00:23:55.840
output, which, which you know why would you want this? I don't know. It might be kind

00:23:55.840 --> 00:24:01.600
of fun if you're doing a demo or doing a presentation or something, but it does, it's just pretty

00:24:01.600 --> 00:24:06.960
fun. There's a lot of ways you can use dramatic. You can, you can once you install it, you

00:24:06.960 --> 00:24:11.880
can just use a context manager so that it's only around certain print statements. You

00:24:11.880 --> 00:24:18.480
can decorate certain functions. So temporarily does it. And you can even, there's a start

00:24:18.480 --> 00:24:25.680
and start and print that to, to do it targeted. One of the fun things and he's got examples

00:24:25.680 --> 00:24:30.520
on his read me how to do this. One of the fun things you can do, I'm not sure why he

00:24:30.520 --> 00:24:38.160
included this is you can do it outside the whole thing. He's got a dramatic interpreter.

00:24:38.160 --> 00:24:47.520
So if you, if you run like Python dash M dramatic, it just slows down everything. So you can

00:24:47.520 --> 00:24:52.240
turn it off though. He's got a, he's got a way to turn it off as well, but you can do

00:24:52.240 --> 00:24:56.040
do speed ups and make it. Anyway. I think this is

00:24:56.040 --> 00:24:59.640
You want your Python code to look like ChatGPT or something like that. Right?

00:24:59.640 --> 00:25:07.120
Yeah. As is typing out and stuff. I think it's kind of, especially if you're running,

00:25:07.120 --> 00:25:12.240
I think it'd be useful. He gives an example of doing it. Like for instance, I'm like,

00:25:12.240 --> 00:25:16.520
I guess this isn't an example, but if you're, if you're doing command line interface interactions

00:25:16.520 --> 00:25:21.760
with a user I think it is helpful sometimes to have the output go slowly. So that's

00:25:21.760 --> 00:25:28.280
visually interesting to have it, not just pop up with a mountain of text for people

00:25:28.280 --> 00:25:34.320
to read, but don't do it too slow. Cause that's, that's annoying also. But anyway I think it's

00:25:34.320 --> 00:25:42.480
kind of fun, fun thing related to this. I thought it'd be when, when he, he said, submitted

00:25:42.480 --> 00:25:49.560
this the other day, I remembered somebody named Alan submitted a comment to us that

00:25:49.560 --> 00:25:56.880
texture terminal text was a terminal text effects library is pretty cool. And so I'll

00:25:56.880 --> 00:26:04.720
go ahead and link to that also. That's, that's a fun thing. It's very dramatic. That's quite

00:26:04.720 --> 00:26:10.640
dramatic. You've got a whole bunch of cool effects. Like there's a grid one where things

00:26:10.640 --> 00:26:16.720
like show up gradually in a grid. There's a bunch of great examples. There's beams that

00:26:16.720 --> 00:26:21.760
it pops back and forth. This is beautiful. Laser beams. Laser beams. I like that one.

00:26:21.760 --> 00:26:28.600
The binary path kind of looks, looks kind of a, what was it? Matrixy sort of a look.

00:26:28.600 --> 00:26:34.600
I said, Neil, you can't go down there. There was one that I really liked a lot. The fire,

00:26:34.600 --> 00:26:40.880
the burn is neat. Crumble is all animated gifts on the GitHub repo that Brian's linking

00:26:40.880 --> 00:26:47.600
to. Yeah. Yeah. But the so it, I think it'd be cool for your, I wouldn't do it all over

00:26:47.600 --> 00:26:53.360
the place, but like for instance if you had a, like a help, not probably not help, but

00:26:53.360 --> 00:26:59.040
an about where, and that's sort of where it's showing here where you show, you know, the

00:26:59.040 --> 00:27:04.840
credits and who's worked on it and some more info and stuff. That'd be fun to do a, a,

00:27:04.840 --> 00:27:09.240
a fancy, a fancy dramatic output for, for that.

00:27:09.240 --> 00:27:14.600
All right. With this terminal text effects thing. Yeah. I think if you work in the movie

00:27:14.600 --> 00:27:21.800
industry and you need to have a, like a hacker breaking into a thing or somebody jacking

00:27:21.800 --> 00:27:25.360
into cyberspace or whatever, one of these weird things are, where are you going to show

00:27:25.360 --> 00:27:29.600
a terminal and make it dramatic? Oh my goodness. You could just basically do this for Hollywood.

00:27:29.600 --> 00:27:37.120
Yeah. Yeah. Yeah, definitely. What is this language? Oh my gosh, this is VB6. I know

00:27:37.120 --> 00:27:44.440
this. I'm tracking his IP. Like, wait a minute. What? It would be a little bit better. Yeah.

00:27:44.440 --> 00:27:52.600
That'd be great. So anyway, that'd be fun if he, if he used both this and a textual

00:27:52.600 --> 00:28:00.360
to turn it into a, like a, like a Vim clone or something like that with fun effects. Ooh,

00:28:00.360 --> 00:28:06.600
that's fun. Pores. Yeah. It's almost like the Tetris terminal in a sense. Not quite.

00:28:06.600 --> 00:28:14.360
Anyway, I guess that is a fun wrap up of our topics, but we've got, we have some extras.

00:28:14.360 --> 00:28:17.880
Do you have any extras? Yeah. Go do yours first since you got your scram. Yeah. Okay.

00:28:17.880 --> 00:28:23.440
So the only thing I mentioned textual a little bit, I'll go ahead and say that textual has

00:28:23.440 --> 00:28:29.440
released a new version and I'm highlighting this because there's an inline feature, which

00:28:29.440 --> 00:28:35.240
is, which is fun. So with, with the inline feature, let's see if we can get, get an example

00:28:35.240 --> 00:28:47.720
of, you can kind of run textual in a run. It's not running for me. But anyway, you can

00:28:47.720 --> 00:28:53.240
run it in line. So like normally if you run a textual application, it takes up your whole,

00:28:53.240 --> 00:28:59.040
your whole terminal area, but this will just take a subset. So you can have like a, a little

00:28:59.040 --> 00:29:03.320
input screen. So you can have kind of like an input dialogue maybe. But it, and it's

00:29:03.320 --> 00:29:09.840
very visual, but it doesn't take, take over everything. So yeah. Yeah. Anyway, kind of

00:29:09.840 --> 00:29:16.600
fun textual enriched, continue to impress. Yeah. How about you? Any extras? I've got

00:29:16.600 --> 00:29:24.640
a few. Let's see. Let's start with a broadcast straight out of the Philippines. So my keynote,

00:29:24.640 --> 00:29:32.440
which was entitled the state of Python in 2024, I give two weeks ago at PyCon Philippines

00:29:32.440 --> 00:29:38.600
is out and the production quality is super high on this video. So they did a really great

00:29:38.600 --> 00:29:42.400
job. It was a fun conference, but if you would have loved to hear me give a presentation

00:29:42.400 --> 00:29:48.240
on the state of Python in 2024, but you weren't there, then you can still check it out now.

00:29:48.240 --> 00:29:55.080
It's awesome. And I really enjoyed it by the way. Yeah. Yeah. Oh, thanks so much. A bunch

00:29:55.080 --> 00:29:59.000
of the people who, whose projects we talk about on the show actually get a shout out

00:29:59.000 --> 00:30:05.080
there. So, all right. That's, that's thing one thing too. I just want to encourage people.

00:30:05.080 --> 00:30:09.880
I'm not logged in my getups. I can't unfortunately show it here, but Brian, do you go to your

00:30:09.880 --> 00:30:13.120
GitHub and you know, there's that feed in the middle that shows all the stuff that's

00:30:13.120 --> 00:30:19.080
going on and who, who started this and who's doing that and stuff. Do you ever use that

00:30:19.080 --> 00:30:22.640
thing? No, that's what, that's the way I'm like, that's thing's stupid. This is like

00:30:22.640 --> 00:30:27.520
80% of the page and it's in the way. What is this? How do I get, get past this? I've

00:30:27.520 --> 00:30:33.560
started painted. Did you do it? And I've found so many cool projects. So I want to inspire

00:30:33.560 --> 00:30:38.280
people to follow people on GitHub. You can follow Brian and me and see what we're starring,

00:30:38.280 --> 00:30:43.160
but who's starred what he's forked. Well, I found probably three or four really interesting

00:30:43.160 --> 00:30:48.080
projects just last week by just kind of skimming that for five minutes a week, you know? So

00:30:48.080 --> 00:30:53.880
that's pretty cool. Yeah. I was really surprised that that was useful. I guess I need to follow

00:30:53.880 --> 00:30:58.960
more people. I don't know. Exactly. Because I should as well, because I hadn't really

00:30:58.960 --> 00:31:03.680
been following more people because why do you follow them? Well, maybe this is why onto

00:31:03.680 --> 00:31:07.760
a thing that continues to perplex me, which is interesting is that the official way that

00:31:07.760 --> 00:31:13.840
Python works is through blogspot.com. But nonetheless, important stuff for you all.

00:31:13.840 --> 00:31:19.160
If you are living in the past, like when I ran just path earlier, it said your Python

00:31:19.160 --> 00:31:23.160
three 10 thing is stupid because that doesn't exist on your computer anymore. But if you

00:31:23.160 --> 00:31:28.360
have three 10, three nine or three eight, there are security updates for the older versions

00:31:28.360 --> 00:31:33.280
of Python, but not the new one. They call them boring security releases. I never think

00:31:33.280 --> 00:31:39.360
of security releases are boring. They either go from slightly interesting to, oh my gosh,

00:31:39.360 --> 00:31:46.720
you have my full attention like the X thing. Anyway, people can, can check that out and

00:31:46.720 --> 00:31:51.080
should probably upgrade if they're running one of those versions, three 10, three nine

00:31:51.080 --> 00:31:55.400
or three eight. And if you're running three seven or older, too bad, so sad, no updates

00:31:55.400 --> 00:32:00.440
for you. They may be vulnerable. They may be not, I don't know. And that's just the

00:32:00.440 --> 00:32:03.760
way it works. If you're out of support, that's why you should stay on some of the new stuff

00:32:03.760 --> 00:32:04.760
somewhat.

00:32:04.760 --> 00:32:09.720
Like the new stuff's really been fairly easy to upgrade to. I haven't, it has been in a

00:32:09.720 --> 00:32:13.600
lot of most of the part. Well, maybe it's just my projects, but I haven't run into any

00:32:13.600 --> 00:32:19.320
issues really. I think if you stay one version behind it's, it's, there's no effort at all

00:32:19.320 --> 00:32:24.920
almost to do it. Going from three 11 to three 12 was actually the hardest upgrade I've ever

00:32:24.920 --> 00:32:29.920
done because there was quite a few dependencies I had that use something that was removed

00:32:29.920 --> 00:32:34.600
as part of the dead batteries thing or something like that. And I can't, and I just wouldn't

00:32:34.600 --> 00:32:38.880
run and I'm like, Oh my gosh, I got to, I was just waiting until some dependency of

00:32:38.880 --> 00:32:44.520
a dependency got fixed, but it was slow for some reason. I don't know why, but you know,

00:32:44.520 --> 00:32:47.440
that got fixed within a few weeks. Right? So if you waited a little bit longer, it should

00:32:47.440 --> 00:32:53.480
be easy. Yeah. So one of the questions I got while we're looking at this, how many I used

00:32:53.480 --> 00:33:00.120
to run a lot of versions of Python on my, on my Mac. But I got a new Mac recently and

00:33:00.120 --> 00:33:05.880
I decided to mostly push most, I only run a couple and then I pushed the, do most of

00:33:05.880 --> 00:33:13.960
my multi Python version testing in CI instead of locally. How many do you have on your machine

00:33:13.960 --> 00:33:29.120
or regularly? Let's see which Python or one year Python rather, I think. Oh, I'm sorry

00:33:29.120 --> 00:33:36.000
to put you on the spot. No problem. You know, I think I have, I think I have three 11 and

00:33:36.000 --> 00:33:44.040
three 12 and that's it. Okay. Yeah. I think that I don't have three nine, I don't have

00:33:44.040 --> 00:33:50.280
three 10. I definitely have done everything else. So three 11 or yeah, three 11 or three

00:33:50.280 --> 00:33:54.440
12. Those are the ones that I got right now. I'm with you. I tried to, I did not put too

00:33:54.440 --> 00:33:59.080
much stuff on there. The only reason I really have older stuff on there is because I haven't

00:33:59.080 --> 00:34:02.600
gone to the trouble of removing it because there's some, a bunch of virtual environments

00:34:02.600 --> 00:34:07.200
I've created off it that I wanted to deal with. But ideally I would just have the latest.

00:34:07.200 --> 00:34:13.040
Yeah. I think I think my normal, I don't know what I've got, but it's it's the, well with

00:34:13.040 --> 00:34:19.080
the, the packages I maintain, I usually have the newest and the oldest that I maintain.

00:34:19.080 --> 00:34:24.840
And so three 12 and then however far back I wanted to go. And then so that, so that

00:34:24.840 --> 00:34:29.400
talks can find those and I can find those locally, but yeah. Yeah. You know what I might

00:34:29.400 --> 00:34:36.160
do? I'm not doing it because I don't have a huge set of older Pythons I test for. But

00:34:36.160 --> 00:34:39.880
if I was like you where I did that, maybe I'd have Docker, you have some Docker containers

00:34:39.880 --> 00:34:44.560
for the older ones. You can just do Docker run Python. That's command, you know, this

00:34:44.560 --> 00:34:50.120
file or whatever. I don't know. Yeah, maybe. Keep it cleaned up. Yeah. But you can, they

00:34:50.120 --> 00:34:55.000
run side by side pretty well. So yeah, they do. Anyway, just got to keep your path in

00:34:55.000 --> 00:35:02.960
order. So just path, just path, just path, just Jack. So should we have some fun, something

00:35:02.960 --> 00:35:08.240
funny? Yes, this one actually, I got it pulled up, but this one is from you. So I'm going

00:35:08.240 --> 00:35:14.120
to let you take the lead on telling us about this joke here. Okay. So I saw this on on

00:35:14.120 --> 00:35:20.840
LinkedIn actually. It's from Matt Watson. Don't know him. But it's pretty funny. So

00:35:20.840 --> 00:35:27.200
we've got some definitions of some software definitions for you. So starting, I've got

00:35:27.200 --> 00:35:31.480
a whole bunch of them. So try to go through them. Technical debt. What technical debt

00:35:31.480 --> 00:35:38.680
is move fast and don't fix things. Agile development is admitting you have no plan. Test driven

00:35:38.680 --> 00:35:45.100
development, guessing the future one test at a time. I love that. Open source is asking

00:35:45.100 --> 00:35:51.400
somebody else to fix it with. Yeah, it's not always working. Maybe a slightly different

00:35:51.400 --> 00:35:57.200
term based on the topics of this week or running, running someone else's code from the internet.

00:35:57.200 --> 00:36:06.000
Yeah. Right. So CI/CD automating your mistakes into production. That's awesome. API is also

00:36:06.000 --> 00:36:11.160
asking somebody else to do it. DevOps. I love this. DevOps is the belief that more tools

00:36:11.160 --> 00:36:18.840
fix any problem. Microservices are creating enough small problems to avoid one big one.

00:36:18.840 --> 00:36:23.840
Cybersecurity is playing hide and seek with hackers and serverless is pretending servers

00:36:23.840 --> 00:36:30.040
don't exist until the bill comes. Oh yeah. Scrum. I like that. Scrum is group therapy

00:36:30.040 --> 00:36:43.760
for being behind schedule. Hi, my name's Michael. I'm blocked. Hi Michael. I've been blocked

00:36:43.760 --> 00:36:54.600
for two months. Yeah, that's great. Yeah. We have to do that. Next. I'll have to try

00:36:54.600 --> 00:37:01.120
to incorporate that. There you go. Thanks Brian. Well, thanks a lot. Thanks again for

00:37:01.120 --> 00:37:05.880
a wonderful episode and thank you everybody for making, helping to make Python bites a

00:37:05.880 --> 00:37:11.480
wonderful podcast. And we had, we don't ask this much, but if you find this amusing or

00:37:11.480 --> 00:37:16.920
helpful, please share with a friend. And you can sign up for one of the great ways to do

00:37:16.920 --> 00:37:20.960
that is to sign up as a friend of the show, get the newsletter, and then you can send

00:37:20.960 --> 00:37:25.320
that. You can spam your friends with that. We're not going to spam people, but you can.

00:37:25.320 --> 00:37:28.080
So thanks. Indeed. Yeah. Thanks. Bye.

