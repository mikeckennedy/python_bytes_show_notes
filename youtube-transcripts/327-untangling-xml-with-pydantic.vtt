WEBVTT

00:00:00.000 --> 00:00:09.320
Hey, everybody. Thanks for showing up on the feed and watching us afterwards. And so thanks.


00:00:09.320 --> 00:00:15.280
And well, let's just jump into the show. Hello, and welcome to Python Bytes, where we deliver


00:00:15.280 --> 00:00:21.280
Python news and headlines directly to your earbuds. This is episode 327, recorded March


00:00:21.280 --> 00:00:26.440
13th, 2023. And I am Brian Okken.


00:00:26.440 --> 00:00:29.040
And I am Michael Kennedy.


00:00:29.040 --> 00:00:33.100
This week's episode is sponsored by Compiler Podcast from Red Hat.


00:00:33.100 --> 00:00:36.560
Listen to their spot later in the show.


00:00:36.560 --> 00:00:41.740
And connect with the show on Fostadon at pythonbytes@fostadon.org.


00:00:41.740 --> 00:00:45.400
And both Brian and Michael are there also.


00:00:45.400 --> 00:00:49.160
Brian Okken and M. Kennedy.


00:00:49.160 --> 00:00:56.680
You can also join us on YouTube or join us live by going to pythonbytes.fm/live to be


00:00:56.680 --> 00:00:57.680
a part of the audience.


00:00:57.680 --> 00:00:59.020
It's really kind of fun.


00:00:59.020 --> 00:01:01.160
Usually it's Tuesdays at 11.


00:01:01.160 --> 00:01:04.320
This week it's Monday, but usually it's Tuesdays at 11.


00:01:04.320 --> 00:01:09.880
And you can watch older videos on the YouTubes as well.


00:01:09.880 --> 00:01:13.680
So thanks, Michael, for showing up again this week.


00:01:13.680 --> 00:01:16.440
We've got quite a few episodes under our belt.


00:01:16.440 --> 00:01:18.480
So are you excited to get started?


00:01:18.480 --> 00:01:20.400
- We do, I am.


00:01:20.400 --> 00:01:25.400
You know, technology can be a tangled mess sometimes.


00:01:26.260 --> 00:01:30.220
And not long ago, we spoke about Untangle.


00:01:30.220 --> 00:01:34.260
And then, I believe it was Ian sent in and said,


00:01:34.260 --> 00:01:35.140
that was really cool.


00:01:35.140 --> 00:01:35.800
Yeah, it was Ian.


00:01:35.800 --> 00:01:36.500
Thank you.


00:01:36.500 --> 00:01:40.420
Said, I know you're a huge fan of Pydantic.


00:01:40.420 --> 00:01:41.900
It's true.


00:01:41.900 --> 00:01:44.140
And maybe you want to check out something


00:01:44.140 --> 00:01:46.500
that is similar to Untangle, which


00:01:46.500 --> 00:01:50.180
would let you talk to XML through Python


00:01:50.180 --> 00:01:55.020
in an object-oriented style way, a little more dynamic.


00:01:55.020 --> 00:02:00.020
So he sent in the Pydantic-XML extension.


00:02:00.020 --> 00:02:01.880
Have you heard of this, Brian?


00:02:01.880 --> 00:02:03.220
- No.


00:02:03.220 --> 00:02:04.060
- No, I hadn't either.


00:02:04.060 --> 00:02:05.420
It's totally news to me.


00:02:05.420 --> 00:02:07.820
But the idea is basically,


00:02:07.820 --> 00:02:09.620
the way Pydantic traditionally works


00:02:09.620 --> 00:02:14.500
is you point it at a JSON file or a Python dictionary


00:02:14.500 --> 00:02:17.700
and it can create a object graph hierarchy


00:02:17.700 --> 00:02:20.420
of all the pieces that it knows.


00:02:20.420 --> 00:02:23.060
So you can say it has a name and a number,


00:02:23.060 --> 00:02:25.380
but then also as a list of locations


00:02:25.380 --> 00:02:29.220
and the locations model of these PyDantec objects and so on.


00:02:29.220 --> 00:02:31.620
And that's how PyDantec has worked from day one,


00:02:31.620 --> 00:02:32.700
more or less.


00:02:32.700 --> 00:02:36.460
It's based on dictionaries, because that's the way


00:02:36.460 --> 00:02:39.420
that you speak APIs.


00:02:39.420 --> 00:02:42.700
And so it was very closely tied to APIs and JSON exchange


00:02:42.700 --> 00:02:43.620
there.


00:02:43.620 --> 00:02:47.740
So this one does basically the same thing, but for XML.


00:02:47.740 --> 00:02:49.100
And it's glorious.


00:02:49.100 --> 00:02:51.100
It's glorious with the data validation,


00:02:51.100 --> 00:02:54.040
the required versus optional, the type conversion,


00:02:54.040 --> 00:02:55.000
all of those things.


00:02:55.000 --> 00:02:58.880
It supports dictionaries, lists, sets, tuples, unions.


00:02:58.880 --> 00:03:03.880
It has LXML parser support for high speed parser processing.


00:03:03.880 --> 00:03:07.520
You can pass in an element tree as well,


00:03:07.520 --> 00:03:12.280
which is the XML-eTree-ElementTree class,


00:03:12.280 --> 00:03:15.060
which allows you to do parsing traditionally.


00:03:15.060 --> 00:03:17.760
So how do you get going?


00:03:17.760 --> 00:03:20.360
Well, you create a class here.


00:03:20.360 --> 00:03:24.880
With pure Pydantic, you derive from base model.


00:03:24.880 --> 00:03:27.120
Here you derive from base XML model,


00:03:27.120 --> 00:03:30.080
so it's slightly different, but that's fine.


00:03:30.080 --> 00:03:30.880
And check this out.


00:03:30.880 --> 00:03:34.200
In the XML document that they're talking about here,


00:03:34.200 --> 00:03:38.180
the top level node has a thing called status,


00:03:38.180 --> 00:03:42.320
an attribute called status in XML.


00:03:42.320 --> 00:03:46.840
And in the product it does, part of it anyway,


00:03:46.840 --> 00:03:49.660
it has two possible valid values.


00:03:49.660 --> 00:03:51.940
it can either be running or in development.


00:03:51.940 --> 00:03:55.140
It can't be ran or prod or any,


00:03:55.140 --> 00:03:56.420
it has to be those two words.


00:03:56.420 --> 00:03:58.500
So because it's pydantic,


00:03:58.500 --> 00:04:00.220
you can just say the type of this


00:04:00.220 --> 00:04:03.780
is a literal running comma development.


00:04:03.780 --> 00:04:04.760
Isn't that awesome?


00:04:04.760 --> 00:04:05.600
And that's it. - That is pretty good.


00:04:05.600 --> 00:04:06.900
- Like you're done validating that,


00:04:06.900 --> 00:04:08.540
that that is correct.


00:04:08.540 --> 00:04:10.140
And you set that equal to an adder,


00:04:10.140 --> 00:04:13.140
which means it's not coming from the body of the XML node,


00:04:13.140 --> 00:04:17.740
but it's coming from this attribute name status down here.


00:04:17.740 --> 00:04:19.460
So cool, huh?


00:04:19.460 --> 00:04:22.360
Then you can have launched,


00:04:22.360 --> 00:04:25.780
you could have launched, which is a numerical date.


00:04:25.780 --> 00:04:30.100
So the running ones have 2023 and 2019 as launch,


00:04:30.100 --> 00:04:31.300
but the one that's in development,


00:04:31.300 --> 00:04:33.620
well, it doesn't have a launch date, so it's missing.


00:04:33.620 --> 00:04:37.900
So the optional aspect of Pydantic is a play here.


00:04:37.900 --> 00:04:41.860
And then there's a title for that element.


00:04:41.860 --> 00:04:44.220
And that just comes, you say it's string,


00:04:44.220 --> 00:04:46.700
it just comes straight out of the body of the node


00:04:46.700 --> 00:04:48.740
because it's not set to an attribute,


00:04:48.740 --> 00:04:50.140
but it's just the base one.


00:04:50.140 --> 00:04:53.140
I guess, presumably, you can only have one of those per node.


00:04:53.140 --> 00:04:56.220
- Okay, so is title special


00:04:56.220 --> 00:04:58.660
or can you name it whatever you want then?


00:04:58.660 --> 00:05:00.180
- You can name it whatever you want, I'm pretty sure.


00:05:00.180 --> 00:05:01.420
- Okay, okay. - Yeah.


00:05:01.420 --> 00:05:05.820
- Oh yeah, it says extracted from the element text, nice.


00:05:05.820 --> 00:05:06.660
- Yeah, yeah, exactly.


00:05:06.660 --> 00:05:09.380
And so then the overall XML document,


00:05:09.380 --> 00:05:11.260
I had it reversed when I first started talking about this.


00:05:11.260 --> 00:05:13.420
There's a company and the company has products, right?


00:05:13.420 --> 00:05:15.140
So there's a company class.


00:05:15.140 --> 00:05:17.540
It has a trade name from its attribute,


00:05:17.540 --> 00:05:21.940
in this case, and then it has a node which has a website


00:05:21.940 --> 00:05:24.540
as its text value, but the text value is


00:05:24.540 --> 00:05:27.460
HTTPSSpaceX.com, right?


00:05:27.460 --> 00:05:29.580
And so you can say the type is a URL


00:05:29.580 --> 00:05:31.520
and it'll actually parse it out as a URL,


00:05:31.520 --> 00:05:34.580
not just a string, which is really cool.


00:05:34.580 --> 00:05:38.180
And then in standard, pedantic style,


00:05:38.180 --> 00:05:43.040
it has a list of products and you give it the tag name


00:05:43.040 --> 00:05:45.340
that it's product, the node name is product,


00:05:45.340 --> 00:05:47.660
and just loops through that list.


00:05:47.660 --> 00:05:49.340
Isn't that a clever way to parse that


00:05:49.340 --> 00:05:52.180
with validation and data conversion and all that?


00:05:52.180 --> 00:05:54.500
- Not only that, I'm really glad you walked me through it


00:05:54.500 --> 00:05:55.940
because the first time I looked at this,


00:05:55.940 --> 00:06:00.340
I was a little bit like lost on how to think about this


00:06:00.340 --> 00:06:04.980
and how it's building it up from different components


00:06:04.980 --> 00:06:07.460
and attributes and elements.


00:06:07.460 --> 00:06:08.340
It's pretty neat.


00:06:08.340 --> 00:06:12.740
- Yeah, if I've got to do XML again, I'm all over this.


00:06:12.740 --> 00:06:15.780
So there's a bunch of stuff about how you talk about


00:06:15.780 --> 00:06:20.020
heterogeneous collections, aliases, union types, model.


00:06:20.020 --> 00:06:20.860
You can go through it if you want.


00:06:20.860 --> 00:06:23.620
But I think, you know, this little quick getting started bit


00:06:23.620 --> 00:06:25.380
they have right at the top of the website


00:06:25.380 --> 00:06:27.720
that I'm linking to, that's pretty good.


00:06:27.720 --> 00:06:29.940
So. - Yeah, nice, cool.


00:06:29.940 --> 00:06:31.900
- Very good, yeah, anyway, that one's a great one.


00:06:31.900 --> 00:06:32.940
Thanks Ian for sending that in.


00:06:32.940 --> 00:06:34.440
I'm psyched to know about it.


00:06:34.440 --> 00:06:38.340
- Well, next, I kind of want to talk


00:06:38.340 --> 00:06:39.900
about virtual environments.


00:06:41.020 --> 00:06:47.100
So I use the virtual environment, VENV, built into Python.


00:06:47.100 --> 00:06:54.220
I, in the past, have used the virtualenv extra package


00:06:54.220 --> 00:06:55.380
that you can install.


00:06:55.380 --> 00:06:58.940
But since, I don't know, it's been quite a few versions


00:06:58.940 --> 00:07:00.980
of Python, the built-in one's pretty darn good.


00:07:00.980 --> 00:07:03.260
So I'm happy with it.


00:07:03.260 --> 00:07:08.420
Anyway, there's a lot of people that kind of don't really


00:07:08.420 --> 00:07:09.780
get how they work.


00:07:09.780 --> 00:07:12.180
There's trying to get people on board with that.


00:07:12.180 --> 00:07:14.420
They should use them as great, but trying to,


00:07:14.420 --> 00:07:16.060
trying to use them effectively.


00:07:16.060 --> 00:07:18.660
Like one of the mistakes I've seen a lot of people make with the virtual


00:07:18.660 --> 00:07:21.120
environments is, is using them.


00:07:21.120 --> 00:07:26.220
But then when they go to test in CI, actually trying to activate the virtual


00:07:26.220 --> 00:07:31.580
environment and you don't really have to, you can just use the binaries,


00:07:31.580 --> 00:07:34.720
directly. And so I'm really happy.


00:07:34.720 --> 00:07:37.840
This article is around, around. So Brett Cannon wrote,


00:07:38.280 --> 00:07:41.260
an article called "How Virtual Environments Work."


00:07:41.260 --> 00:07:44.220
And this is excellent, and it's a short read.


00:07:44.220 --> 00:07:48.420
So one of the things that starts it with a little history,


00:07:48.420 --> 00:07:50.900
not a lot of history, just a little to remind people


00:07:50.900 --> 00:07:54.780
that back in the day, we had global


00:07:54.780 --> 00:07:57.560
and the working directory, or your current directory,


00:07:57.560 --> 00:07:59.120
and that's it.


00:07:59.120 --> 00:08:00.260
There wasn't anything else.


00:08:00.260 --> 00:08:03.340
And I kind of remember this of trying to find,


00:08:03.340 --> 00:08:06.900
if I'm sharing some code, trying to find some on the web,


00:08:06.900 --> 00:08:09.420
and then just downloading it and sticking it in my directory


00:08:09.420 --> 00:08:10.260
and see if it works.


00:08:10.260 --> 00:08:12.540
It's just part of your code now.


00:08:12.540 --> 00:08:14.260
That's not what we have today.


00:08:14.260 --> 00:08:17.100
And partly in thanks to virtual environments.


00:08:17.100 --> 00:08:19.240
So it's better now.


00:08:19.240 --> 00:08:20.820
You can still complain about them.


00:08:20.820 --> 00:08:23.060
That's fine, but it's better now.


00:08:23.060 --> 00:08:25.860
And then he goes on to talk about the structure.


00:08:25.860 --> 00:08:28.980
So, and it's really, there's really not much there.


00:08:28.980 --> 00:08:31.600
I mean, when you're building a virtual environment,


00:08:31.600 --> 00:08:34.020
it's kind of a lightweight throwaway thing.


00:08:34.020 --> 00:08:36.020
Don't think of it as this huge thing.


00:08:36.020 --> 00:08:38.980
It's just a little directory and it's got a bin


00:08:38.980 --> 00:08:41.860
and an include and the site packages directory


00:08:41.860 --> 00:08:45.140
for the Python that you're using.


00:08:45.140 --> 00:08:47.500
And on Windows, it's a little different,


00:08:47.500 --> 00:08:50.540
but we'll just hand wave around that.


00:08:50.540 --> 00:08:53.780
In the Unix environment, it's mostly symbolic links to,


00:08:53.780 --> 00:08:56.100
I mean, you do have stuff installed there,


00:08:56.100 --> 00:09:00.540
but as far as replicating the Python environment,


00:09:00.540 --> 00:09:02.700
your Python interpreter isn't copied in there,


00:09:02.700 --> 00:09:03.640
it's symbolic linked.


00:09:03.640 --> 00:09:06.780
So you don't have to worry about that too much.


00:09:06.780 --> 00:09:09.900
It's the site packages and the bin and everything


00:09:09.900 --> 00:09:11.680
and how that's there.


00:09:11.680 --> 00:09:13.660
So how does Python deal with that?


00:09:13.660 --> 00:09:18.660
Well, it deals with it through a pyvenv.cfg.


00:09:18.660 --> 00:09:22.020
It's a config file that tells Python


00:09:22.020 --> 00:09:24.560
when you run Python from this virtual environment,


00:09:24.560 --> 00:09:26.620
where the home directory should be,


00:09:26.620 --> 00:09:30.300
where the system, whether or not to include system packages


00:09:30.300 --> 00:09:31.980
in the site packages,


00:09:31.980 --> 00:09:35.180
and then the version and the executable


00:09:35.180 --> 00:09:38.380
and some other stuff like the command,


00:09:38.380 --> 00:09:39.660
if you wanted to recreate it.


00:09:39.660 --> 00:09:43.340
I don't know why that's there, but in general,


00:09:43.340 --> 00:09:45.620
this is enough to tell Python,


00:09:45.620 --> 00:09:50.620
if you just run it from that environment,


00:09:50.620 --> 00:09:53.340
that you just get all the right stuff.


00:09:53.340 --> 00:09:57.500
And so if you're putting it in a script, just use those.


00:09:57.500 --> 00:10:00.000
But if you're using it from the shell,


00:10:00.000 --> 00:10:01.720
then of course you're gonna activate the shell,


00:10:01.720 --> 00:10:05.400
But the activation, he's stressing,


00:10:05.400 --> 00:10:07.960
and this is important to understand, it's optional.


00:10:07.960 --> 00:10:09.640
You don't have to hit activate


00:10:09.640 --> 00:10:12.880
as long as you're calling stuff within the environment.


00:10:12.880 --> 00:10:17.800
And he kind of goes on to talk about really what it's doing.


00:10:17.800 --> 00:10:20.320
What does the activation do though, if you're curious?


00:10:20.320 --> 00:10:21.480
It doesn't do much.


00:10:21.480 --> 00:10:24.240
It sticks some stuff in your path.


00:10:24.240 --> 00:10:27.440
It edits like a virtual environment,


00:10:28.520 --> 00:10:32.280
sets a virtual environment variable


00:10:32.280 --> 00:10:35.640
and it registers a deactivate shell function.


00:10:35.640 --> 00:10:36.680
And that's about it.


00:10:36.680 --> 00:10:37.840
It changes your prompt too,


00:10:37.840 --> 00:10:41.360
to let you know that you've activated it, which is cool.


00:10:41.360 --> 00:10:43.760
And then he goes on to talk about how,


00:10:43.760 --> 00:10:46.560
partly why he's dug into this lately is because


00:10:46.560 --> 00:10:49.480
for VS Code, they're creating a little tiny,


00:10:49.480 --> 00:10:51.280
but you can use it anywhere you want,


00:10:51.280 --> 00:10:55.400
a extra extension called microvenv.


00:10:56.880 --> 00:10:59.040
Microvenv, I don't know.


00:10:59.040 --> 00:11:02.660
So, and this is a single file, less than 100 lines


00:11:02.660 --> 00:11:05.040
to kind of emulate all of that.


00:11:05.040 --> 00:11:08.320
And the reason is because Debian doesn't,


00:11:08.320 --> 00:11:12.200
or Debian doesn't include the virtual environments


00:11:12.200 --> 00:11:13.040
by default.


00:11:13.040 --> 00:11:14.760
So they kind of have to wanna work around that.


00:11:14.760 --> 00:11:17.840
So anyway, really great summary of virtual environments.


00:11:17.840 --> 00:11:21.440
- Yeah, I'm feeling away a little bit of the magic,


00:11:21.440 --> 00:11:23.740
letting you know what's happening in there, right?


00:11:23.740 --> 00:11:26.840
- Yeah, well, and also because it's sort of magical


00:11:26.840 --> 00:11:29.720
to some people, a lot of people are concerned


00:11:29.720 --> 00:11:32.440
about like trying to copy it or something.


00:11:32.440 --> 00:11:34.880
And it's, you shouldn't think,


00:11:34.880 --> 00:11:37.820
you shouldn't have anything kept that you,


00:11:37.820 --> 00:11:40.300
that's important within your virtual environment.


00:11:40.300 --> 00:11:42.620
You should be able to recreate it whenever you want.


00:11:42.620 --> 00:11:44.600
So there should be lightweight thing.


00:11:44.600 --> 00:11:46.640
Though, oh, the one thing I really wanted to highlight,


00:11:46.640 --> 00:11:49.020
and the reason why I really wanted to talk about this


00:11:49.020 --> 00:11:51.080
was because of a flag.


00:11:51.080 --> 00:11:52.840
So where's that flag?


00:11:54.060 --> 00:11:59.060
There's a flag, dash, dash, I gotta find it.


00:11:59.060 --> 00:12:03.520
Do you remember, do you know what I'm talking about?


00:12:03.520 --> 00:12:04.820
Anyway.


00:12:04.820 --> 00:12:06.820
- I'll help you search.


00:12:06.820 --> 00:12:11.500
- There's like no, there's like, like-


00:12:11.500 --> 00:12:12.820
- Without pip?


00:12:12.820 --> 00:12:13.740
- Yeah, without pip.


00:12:13.740 --> 00:12:16.460
- Dash, dash, without dash pip.


00:12:16.460 --> 00:12:21.460
- Okay, so without pip, excellent thing to know about


00:12:22.100 --> 00:12:24.180
because-- oh, here it is--


00:12:24.180 --> 00:12:26.100
VNV without PIP.


00:12:26.100 --> 00:12:31.700
That will get it so that it doesn't ask you to upgrade PIP.


00:12:31.700 --> 00:12:34.900
So especially in CI and other places,


00:12:34.900 --> 00:12:37.380
you don't care about upgrading it right now.


00:12:37.380 --> 00:12:40.860
I mean, I get it if I'm in the development mode.


00:12:40.860 --> 00:12:41.980
I do want to upgrade it.


00:12:41.980 --> 00:12:43.460
I want to use the latest one.


00:12:43.460 --> 00:12:47.380
But in a CI environment or a lot of automated places,


00:12:47.380 --> 00:12:49.100
I don't need to do that.


00:12:49.100 --> 00:12:50.420
I can just use whatever's there.


00:12:50.420 --> 00:12:51.940
It's going to be fine.


00:12:51.940 --> 00:12:53.660
So turning that off is awesome.


00:12:53.660 --> 00:12:55.900
And it saves some time.


00:12:55.900 --> 00:13:00.160
It doesn't say not-- it isn't really not install pip or upgrade.


00:13:00.160 --> 00:13:02.620
It just doesn't try.


00:13:02.620 --> 00:13:04.860
So it assumes pip's already there is all.


00:13:04.860 --> 00:13:06.300
It uses the system pip.


00:13:06.300 --> 00:13:08.500
So that's it.


00:13:08.500 --> 00:13:09.000
Cool.


00:13:09.000 --> 00:13:09.740
That's cool.


00:13:09.740 --> 00:13:11.540
Yeah, it just falls back to the global one,


00:13:11.540 --> 00:13:13.300
but runs it for that environment.


00:13:13.300 --> 00:13:14.460
Yeah.


00:13:14.460 --> 00:13:15.340
Yeah.


00:13:15.340 --> 00:13:18.220
And apparently, it saves a lot of time of that.


00:13:18.220 --> 00:13:21.140
So that's great.


00:13:21.140 --> 00:13:26.140
Very cool. Well, before we move on, our sponsor.


00:13:26.140 --> 00:13:33.140
Oh, yeah, let's cover our sponsor. And I really, really appreciate Red Hat and the Compiler podcast for sponsoring this episode.


00:13:33.140 --> 00:13:43.140
So just like you, both Michael and I are big fans of podcasts and really happy to share a new one from a highly respected open source company.


00:13:43.140 --> 00:13:47.140
Compiler is an original podcast from Red Hat.


00:13:47.140 --> 00:13:52.140
Compiler brings together a curious team of Red Hatters to simplify tech topics


00:13:52.140 --> 00:13:55.940
and provide insight for a new generation of IT professionals.


00:13:55.940 --> 00:14:00.140
The show covers topics like what are the components of a software stack,


00:14:00.140 --> 00:14:02.540
are big mistakes that big of a deal,


00:14:02.540 --> 00:14:06.140
and do you have to know how to code to get started in open source.


00:14:06.140 --> 00:14:11.140
Compiler closes the gap between those who are new to technology


00:14:11.140 --> 00:14:12.840
and those behind the inventions


00:14:12.840 --> 00:14:14.720
and services shaping our world.


00:14:14.720 --> 00:14:17.240
They bring together stories and perspectives


00:14:17.240 --> 00:14:19.360
from the industry and simplifies it,


00:14:19.360 --> 00:14:21.660
its language, culture and movements


00:14:21.660 --> 00:14:25.500
in a way that's fun, informative and guilt-free.


00:14:25.500 --> 00:14:27.440
I recently listened to an episode titled,


00:14:27.440 --> 00:14:31.140
"Testing PDFs and Donkeys" is great.


00:14:31.140 --> 00:14:36.140
It's part of a Stack Unstuck series.


00:14:36.140 --> 00:14:38.440
It's a great series and it talks about


00:14:38.440 --> 00:14:40.940
the entire tech stack, software tech stack,


00:14:40.940 --> 00:14:42.480
especially around web stuff,


00:14:42.480 --> 00:14:45.140
starting with the great stack debate.


00:14:45.140 --> 00:14:46.520
There's episodes on front end,


00:14:46.520 --> 00:14:49.480
frameworks, fundamentals, databases,


00:14:49.480 --> 00:14:53.400
and even OSs and system calls.


00:14:53.400 --> 00:14:55.120
And then it even talks about testing,


00:14:55.120 --> 00:14:57.040
even though testing really isn't part of the,


00:14:57.040 --> 00:14:59.140
you think of as the tech stack,


00:14:59.140 --> 00:15:00.880
it's kind of part of all of it.


00:15:00.880 --> 00:15:02.640
So I'm glad they covered it.


00:15:02.640 --> 00:15:05.440
Especially for people either jumping into software


00:15:05.440 --> 00:15:07.360
or software old hats like me,


00:15:07.360 --> 00:15:10.100
trying on new hats like embedded systems


00:15:10.100 --> 00:15:11.780
or control systems, people learning


00:15:11.780 --> 00:15:13.540
how to do web applications.


00:15:13.540 --> 00:15:15.360
These are great overview episodes,


00:15:15.360 --> 00:15:16.780
and they're timed well.


00:15:16.780 --> 00:15:19.500
They're either, they're timed how they need to be.


00:15:19.500 --> 00:15:22.300
Sometimes some of them are 45 minutes, some of them are 25.


00:15:22.300 --> 00:15:23.980
And I like that flexibility.


00:15:23.980 --> 00:15:29.140
Learn more about the compiler at pythonbytes.fm/compiler.


00:15:29.140 --> 00:15:32.180
The link is in your podcast player show notes.


00:15:32.180 --> 00:15:35.840
And thank you to Compiler for keeping this podcast going.


00:15:35.840 --> 00:15:38.380
- Yes, thank you, Red Hat.


00:15:38.380 --> 00:15:40.220
Thank you, compiler, good show.


00:15:40.220 --> 00:15:41.060
Check it out.


00:15:41.060 --> 00:15:44.140
All right, on to the next one, Brian.


00:15:44.140 --> 00:15:45.460
- Okay.


00:15:45.460 --> 00:15:47.980
- This one is a project by Raid.


00:15:47.980 --> 00:15:53.860
And if you've worked with databases in Python,


00:15:53.860 --> 00:15:56.980
especially if you're using an ORM like SQLAlchemy,


00:15:56.980 --> 00:15:59.700
SQLModel, PUE, any of these things,


00:15:59.700 --> 00:16:00.900
what's really nice about those


00:16:00.900 --> 00:16:03.040
is you create classes in Python,


00:16:03.040 --> 00:16:05.160
and then through some sort of magic,


00:16:05.160 --> 00:16:06.740
somehow there's a startup thing


00:16:06.740 --> 00:16:09.900
that make sure the database exists,


00:16:09.900 --> 00:16:13.620
that the database has tables that map over the classes.


00:16:13.620 --> 00:16:15.420
So for example, if I create a class


00:16:15.420 --> 00:16:17.700
and say it's these three columns and here's an index


00:16:17.700 --> 00:16:19.620
and this one must be unique,


00:16:19.620 --> 00:16:22.660
it'll talk to the database and make that happen.


00:16:22.660 --> 00:16:25.200
But for the rest of database management,


00:16:25.200 --> 00:16:29.460
you've got to go and write stuff in SQL


00:16:29.460 --> 00:16:32.500
or DDL, data definition language, or whatever that is,


00:16:32.500 --> 00:16:35.300
right, the stuff where you create the tables


00:16:35.300 --> 00:16:38.200
and create those types of scripts, create users.


00:16:38.200 --> 00:16:42.280
So, Raid created db declare,


00:16:42.280 --> 00:16:43.980
a declarative layer for your database


00:16:43.980 --> 00:16:47.340
that adds on top of those types of things,


00:16:47.340 --> 00:16:50.420
like SQL alchemies, what I described,


00:16:50.420 --> 00:16:52.480
for that kind of work.


00:16:52.480 --> 00:16:55.100
So it's a pretty new project, people can check it out.


00:16:55.100 --> 00:17:00.520
The idea is, let me find a quick example here.


00:17:00.520 --> 00:17:03.240
So what you can do is you can come and say,


00:17:03.240 --> 00:17:05.520
I want to create a database and it's got this name


00:17:05.520 --> 00:17:08.300
and I want to create a role.


00:17:08.300 --> 00:17:10.760
And here they have the name of the role is a hungry user.


00:17:10.760 --> 00:17:13.080
They have to log in, here's their password.


00:17:13.080 --> 00:17:17.400
They get privileges on this certain database


00:17:17.400 --> 00:17:20.160
and you can model out those types of things.


00:17:20.160 --> 00:17:21.540
And then on top of that,


00:17:21.540 --> 00:17:24.360
you can just use SQLAlchemy itself


00:17:24.360 --> 00:17:25.280
as part of this process.


00:17:25.280 --> 00:17:27.000
You create a SQLAlchemy engine


00:17:27.000 --> 00:17:29.720
and you call run on that.


00:17:29.720 --> 00:17:30.640
And you can also,


00:17:30.640 --> 00:17:33.220
it'll create the SQLAlchemy models.


00:17:33.220 --> 00:17:35.520
There's an example a little bit further,


00:17:35.520 --> 00:17:38.800
also linked to this, that shows how to do


00:17:38.800 --> 00:17:41.400
basically the standard SQLAlchemy stuff


00:17:41.400 --> 00:17:44.720
that will create the tables with the primary keys and so on.


00:17:44.720 --> 00:17:46.880
So this one's just a short one,


00:17:46.880 --> 00:17:51.360
but if you like the way that SQLAlchemy works,


00:17:51.360 --> 00:17:54.240
also with SQLAlchemy you get migrations,


00:17:54.240 --> 00:17:56.440
or with SQLModel through Alembic,


00:17:56.440 --> 00:17:59.000
the idea is that this is going to be extended


00:17:59.000 --> 00:18:02.420
in the future as well to have some of those type


00:18:02.420 --> 00:18:04.060
of transformational behaviors.


00:18:04.060 --> 00:18:06.220
But for now, it's really the extra stuff


00:18:06.220 --> 00:18:10.180
like table creation, database creation, user roles,


00:18:10.180 --> 00:18:11.860
and management.


00:18:11.860 --> 00:18:13.340
So pretty cool.


00:18:13.340 --> 00:18:15.460
People can check that out if they find that useful.


00:18:15.460 --> 00:18:18.820
Want to stay more in Python and less in SQL scripts.


00:18:18.820 --> 00:18:23.180
- Well, especially the roles and permissions,


00:18:23.180 --> 00:18:25.500
having that covered by that, that's pretty cool.


00:18:25.500 --> 00:18:27.900
That's a piece that always trips me up.


00:18:27.900 --> 00:18:29.740
So it's pretty cool.


00:18:29.740 --> 00:18:31.340
- You don't just have like the root users


00:18:31.340 --> 00:18:35.340
have full access, just run as admin.


00:18:35.340 --> 00:18:36.180
Just kidding.


00:18:36.180 --> 00:18:38.540
- Yeah, exactly.


00:18:38.540 --> 00:18:42.740
It always seems like it's covered as like an advanced topic


00:18:42.740 --> 00:18:45.180
but it's almost the first thing you need to figure out


00:18:45.180 --> 00:18:48.540
is how to separate user roles.


00:18:48.540 --> 00:18:51.100
- Right, are we gonna put this on the internet


00:18:51.100 --> 00:18:52.820
and just let people have at it


00:18:52.820 --> 00:18:55.340
or are we gonna put a little data protection in there?


00:18:55.340 --> 00:18:57.860
Anyway, people can check that out, it's a good one.


00:18:57.860 --> 00:19:01.300
Next, let's talk about Knox.


00:19:01.300 --> 00:19:05.340
So I use both talks and Knox on various projects.


00:19:05.340 --> 00:19:09.780
A lot of my open source stuff is talk space for testing,


00:19:09.780 --> 00:19:12.140
just because I'm used to it,


00:19:12.140 --> 00:19:14.220
but I'm starting to use Knox more and more.


00:19:14.220 --> 00:19:17.860
And I want to cover this article by Seth Larson


00:19:17.860 --> 00:19:21.580
called "Testing Multiple Python Versions with Knox"


00:19:21.580 --> 00:19:24.140
and pyenv, P-Y-E-N-V.


00:19:24.140 --> 00:19:27.260
Now I personally don't use pyenv, but I have before.


00:19:27.260 --> 00:19:30.440
And one of the things that's tripped me up before is,


00:19:30.440 --> 00:19:32.820
is how to use it with like talks and knocks.


00:19:32.820 --> 00:19:35.780
So basically even, so check this out,


00:19:35.780 --> 00:19:37.180
if you wanna check this article out,


00:19:37.180 --> 00:19:39.580
if you wanna learn more about talk knocks,


00:19:39.580 --> 00:19:43.600
but also the trick about, even if you're a talks user,


00:19:43.600 --> 00:19:46.820
the trick about how to use PI in with it, with the global,


00:19:46.820 --> 00:19:48.220
there's an example here, it's awesome.


00:19:48.220 --> 00:19:50.300
So let's go over this a little bit.


00:19:50.300 --> 00:19:53.060
So if you want, one of the first things I wanna try to,


00:19:53.060 --> 00:19:55.800
try to do with knocks with it wasn't obvious to me


00:19:55.800 --> 00:19:58.220
from the documentation is just how do I set it up


00:19:58.220 --> 00:20:01.120
like I would talks to just test multiple,


00:20:01.120 --> 00:20:03.700
my stuff with multiple Python versions.


00:20:03.700 --> 00:20:06.260
And that's the example that shows right off the bat.


00:20:06.260 --> 00:20:09.460
You have a Knox file, it's Knox file.py


00:20:09.460 --> 00:20:12.180
and it's Python code.


00:20:12.180 --> 00:20:16.380
So you import Knox and you can set up a session


00:20:16.380 --> 00:20:18.380
for multiple Python versions.


00:20:18.380 --> 00:20:22.500
And then within this defining test,


00:20:22.500 --> 00:20:23.420
this can be anything.


00:20:23.420 --> 00:20:27.000
So the function names of around a session are,


00:20:27.000 --> 00:20:30.100
they're just, they're what you'll use later.


00:20:30.100 --> 00:20:31.600
So we'll cover that in a little bit,


00:20:31.600 --> 00:20:35.900
but then within your session, you do stuff.


00:20:35.900 --> 00:20:38.060
You either install or run.


00:20:38.060 --> 00:20:39.160
There's probably other stuff too,


00:20:39.160 --> 00:20:41.280
but this is what I use is install and run.


00:20:41.280 --> 00:20:44.400
So installing dot means installing the current project


00:20:44.400 --> 00:20:45.700
that you're working on.


00:20:45.700 --> 00:20:48.200
And then there's an example here for requirements files.


00:20:48.200 --> 00:20:49.740
So a dev requirements,


00:20:49.740 --> 00:20:52.520
but if you're using pyproject.toml,


00:20:52.520 --> 00:20:55.980
It could be also part of your dot install if you want.


00:20:55.980 --> 00:20:57.620
And then run test, run a sport.


00:20:57.620 --> 00:20:59.100
And of course run pytest.


00:20:59.100 --> 00:21:00.420
So good job, Seth.


00:21:00.420 --> 00:21:04.420
And then it goes through how to run it.


00:21:04.420 --> 00:21:07.220
So you can either just type Knox and it'll run everything


00:21:07.220 --> 00:21:12.220
or you can say Knox dash S for dash session to run test.


00:21:12.220 --> 00:21:16.620
And if you wanna run a specific one, like just 3.11,


00:21:16.620 --> 00:21:21.100
Python 3.11, you can say test dash 3.11.


00:21:21.100 --> 00:21:23.000
I kind of like that there's a dot in there.


00:21:23.000 --> 00:21:25.640
It's pretty easy to understand.


00:21:25.640 --> 00:21:28.440
So I just really like how simple this is


00:21:28.440 --> 00:21:30.320
to get the basics down.


00:21:30.320 --> 00:21:33.280
The basics of I want to run tests on my project


00:21:33.280 --> 00:21:36.060
on over a multiple Python versions.


00:21:36.060 --> 00:21:37.680
And this is pretty clean.


00:21:37.680 --> 00:21:41.880
This is already a decent argument to switch to Knox


00:21:41.880 --> 00:21:44.840
if you're on the fence between Tox and Knox.


00:21:44.840 --> 00:21:45.660
- I agree.


00:21:45.660 --> 00:21:47.920
And then it looks, it's so nice


00:21:47.920 --> 00:21:51.440
because not only is it clean,


00:21:51.440 --> 00:21:54.640
you get auto-complete support from your editor,


00:21:54.640 --> 00:21:56.600
you get whatever editor you're using


00:21:56.600 --> 00:21:58.560
will tell you if you've done something wrong, right?


00:21:58.560 --> 00:22:00.320
Like there's more support than just,


00:22:00.320 --> 00:22:04.000
well, here's a arbitrary text file I'm typing stuff into.


00:22:04.000 --> 00:22:05.440
Hope it works.


00:22:05.440 --> 00:22:08.960
- Yeah, and then you can, I mean, I've used it also to,


00:22:08.960 --> 00:22:12.400
just like I do these talks with doing something like


00:22:12.400 --> 00:22:17.400
adding linting and coverage checks and all sorts of stuff.


00:22:17.520 --> 00:22:19.280
I do want to actually, that's one of the things


00:22:19.280 --> 00:22:20.880
I'm glad you wrote this 'cause it's a reminder.


00:22:20.880 --> 00:22:23.120
I did want to write a, like an example


00:22:23.120 --> 00:22:27.600
of the workflow differences between using talks and knocks


00:22:27.600 --> 00:22:29.840
and showing a side-by-side comparison of those two.


00:22:29.840 --> 00:22:32.640
So hopefully in the future I can get that written.


00:22:32.640 --> 00:22:34.680
But one of the things that gets me


00:22:34.680 --> 00:22:37.120
is that with the run command,


00:22:37.120 --> 00:22:41.560
you have to separate every little piece of your command by,


00:22:41.560 --> 00:22:44.180
they have to be quoted as quoted strings,


00:22:44.180 --> 00:22:47.620
like pytest tests has to be two different parameters


00:22:47.620 --> 00:22:48.620
to the run argument.


00:22:48.620 --> 00:22:51.220
And if you have a bunch of flags,


00:22:51.220 --> 00:22:54.300
each of the flag needs to be different things.


00:22:54.300 --> 00:22:57.380
Now that's most, some people might not care about this.


00:22:57.380 --> 00:22:59.140
I kind of care and it bugs me


00:22:59.140 --> 00:23:00.740
'cause I don't have to do that with talks.


00:23:00.740 --> 00:23:03.220
So what I do is I just, since it's Python,


00:23:03.220 --> 00:23:07.960
I just write a string with all of the things


00:23:07.960 --> 00:23:09.060
that I want in it.


00:23:09.060 --> 00:23:11.540
And then I use split to create a--


00:23:11.540 --> 00:23:13.020
- Split on space, something like that.


00:23:13.020 --> 00:23:18.020
>> Yeah, I just use split on space to create an array


00:23:18.020 --> 00:23:19.660
with all of the elements.


00:23:19.660 --> 00:23:23.100
And then when I run, I pass it to run and do the star thing


00:23:23.100 --> 00:23:26.260
so that it explodes it and passes it in altogether.


00:23:26.260 --> 00:23:28.460
So. >> Yeah, nice.


00:23:28.460 --> 00:23:31.340
>> And then here's the trick, the magic trick about PyEnv


00:23:31.340 --> 00:23:36.060
at the bottom is that if you say PyEnv global


00:23:36.060 --> 00:23:37.620
and list all of the environments


00:23:37.620 --> 00:23:39.700
that you wanna have available,


00:23:39.700 --> 00:23:43.720
it makes it available if you're using PyEnv.


00:23:43.720 --> 00:23:44.860
It isn't by default.


00:23:44.860 --> 00:23:47.660
So you have to run this for each session


00:23:47.660 --> 00:23:52.660
or shell invocation to get it to work for PyEnv people.


00:23:52.660 --> 00:23:53.660
- Cool.


00:23:53.660 --> 00:23:55.900
- But that trick works with talks also.


00:23:55.900 --> 00:23:57.940
And the other thing I wanted to mention


00:23:57.940 --> 00:24:01.380
was one of the things I really like about Knox


00:24:01.380 --> 00:24:03.200
is that if you don't like it,


00:24:03.200 --> 00:24:08.200
this example has PyPy3 and 3.8.9.10.11.12 all there.


00:24:09.100 --> 00:24:12.200
By default, Knox will not fail


00:24:12.200 --> 00:24:13.860
if you don't have one of these around.


00:24:13.860 --> 00:24:16.740
So if you only have like 3.11 installed,


00:24:16.740 --> 00:24:19.000
it'll just run that and it'll skip the others.


00:24:19.000 --> 00:24:20.920
You can make it fail if it doesn't have it,


00:24:20.920 --> 00:24:24.480
but by default, it just skips them, which is kind of cool.


00:24:24.480 --> 00:24:25.880
The Tox is the reverse.


00:24:25.880 --> 00:24:29.000
Tox is if by default, it'll fail if it's not there,


00:24:29.000 --> 00:24:31.440
but you can tell it to skip if it's not there.


00:24:31.440 --> 00:24:34.460
- Yeah, that's cool.


00:24:34.460 --> 00:24:36.360
One really quick thing if people are copying and pasting


00:24:36.360 --> 00:24:37.200
from that example,


00:24:37.200 --> 00:24:42.080
pretty sure the -r dev requirements needs a -r space dev requirements in there just


00:24:42.080 --> 00:24:49.040
people are copy pasting right because that's the command is installed pip install -r space file.


00:24:49.040 --> 00:24:53.600
This always surprised me I've seen it in multiple tutorials I don't know if that's true I think


00:24:53.600 --> 00:24:56.800
you might be able to get away without the space. I don't know.


00:24:56.800 --> 00:25:02.800
Okay well you may be able to. We'll try. We could try it yeah we can try later.


00:25:03.440 --> 00:25:06.680
All right, quick question for you, Brian,


00:25:06.680 --> 00:25:08.880
'cause I don't know the answer.


00:25:08.880 --> 00:25:10.600
Damien asked, does someone know


00:25:10.600 --> 00:25:13.600
if how Nox or Tox work with poetry?


00:25:13.600 --> 00:25:14.440
Do you know?


00:25:14.440 --> 00:25:15.280
- Nothing works with poetry.


00:25:15.280 --> 00:25:17.720
(laughing)


00:25:17.720 --> 00:25:19.840
I don't know, actually.


00:25:19.840 --> 00:25:24.840
So poetry, I'm sure there's, I don't know.


00:25:24.840 --> 00:25:27.120
- Probably, you talked about


00:25:27.120 --> 00:25:29.200
the PyProject TOML integrations.


00:25:29.200 --> 00:25:32.560
I mean, it probably is more or less.


00:25:32.560 --> 00:25:34.160
- It probably works. - I don't know.


00:25:34.160 --> 00:25:36.560
- Probably. - Yeah, it probably works.


00:25:36.560 --> 00:25:38.480
- So. - I'm sure many people


00:25:38.480 --> 00:25:42.260
listening now, sorry, David, I don't know either.


00:25:42.260 --> 00:25:46.460
All right. - Hold that thought.


00:25:46.460 --> 00:25:47.300
- Yeah. - Hold that thought.


00:25:47.300 --> 00:25:49.080
Yeah, that's all of our things, isn't it, Brian?


00:25:49.080 --> 00:25:52.600
- Dude, the search, yeah, we were quick.


00:25:52.600 --> 00:25:54.600
Do you have any extras for us?


00:25:54.600 --> 00:25:56.300
- Oh, I always got extras.


00:25:56.300 --> 00:25:59.120
So let's go through here.


00:25:59.120 --> 00:26:01.680
Remember when we talked about how much drama


00:26:01.680 --> 00:26:05.840
There was around, I was at Google maybe,


00:26:05.840 --> 00:26:10.440
someone was giving away like two or 4,000 YubiKeys


00:26:10.440 --> 00:26:15.440
to the top 100 or top 1,000 maintainers on PyPI,


00:26:15.440 --> 00:26:19.480
maintainers of the top projects on PyPI.


00:26:19.480 --> 00:26:22.880
And that was 'cause there was gonna be a requirement


00:26:22.880 --> 00:26:27.880
for PyPI that the very top 1% or some small percent


00:26:27.880 --> 00:26:29.780
was required to have 2FA.


00:26:31.040 --> 00:26:37.400
Well guess what? If that caused drama, wait until you hear about this. GitHub makes 2FA


00:26:37.400 --> 00:26:47.360
mandatory next week for anyone who is an active developer. So basically, if you're making


00:26:47.360 --> 00:26:55.160
contributions to projects, public projects, I believe, something like that. So yeah, security


00:26:55.160 --> 00:26:58.100
with accounts of more than 100 million users.


00:26:58.100 --> 00:27:00.840
I'm not sure exactly what the definition


00:27:00.840 --> 00:27:05.280
of an active developer versus an active contributor


00:27:05.280 --> 00:27:06.960
'cause I might contribute to the code


00:27:06.960 --> 00:27:10.320
without writing any actual software,


00:27:10.320 --> 00:27:13.160
but whatever, splitting hairs.


00:27:13.160 --> 00:27:14.760
The only reason I really bring this up


00:27:14.760 --> 00:27:17.160
is not to like go into depth, that's why this is an extra,


00:27:17.160 --> 00:27:20.440
but if it was a big deal that, you know,


00:27:20.440 --> 00:27:24.120
thousand Python developers had to do 2FA


00:27:24.120 --> 00:27:27.540
and it sounded like it was, what about 100 million?


00:27:27.540 --> 00:27:30.480
It's gonna cause some drama.


00:27:30.480 --> 00:27:34.160
And then how many of those people


00:27:34.160 --> 00:27:36.880
who are contributing to PyPI are doing so


00:27:36.880 --> 00:27:38.660
in some way or another through GitHub?


00:27:38.660 --> 00:27:40.560
I would say the majority, probably.


00:27:40.560 --> 00:27:44.200
- Yeah, yeah.


00:27:44.200 --> 00:27:47.040
Actually, so I don't think it's gonna be drama.


00:27:47.040 --> 00:27:49.520
Hopefully people are just cool with it.


00:27:49.520 --> 00:27:52.640
I think the mess up with PyPI was the doggle thing.


00:27:52.640 --> 00:27:56.320
I think people thought they had to have the hardware thing and they don't.


00:27:56.320 --> 00:28:00.520
I mean I use the software to a face system.


00:28:00.520 --> 00:28:04.080
So and it's not, I mean it's not just them. I don't know about you,


00:28:04.080 --> 00:28:06.840
but I got like, I just looked, I got like half a dozen,


00:28:06.840 --> 00:28:10.880
dozen different things I got to log into with the, with Authy. So.


00:28:10.880 --> 00:28:15.600
Yeah, I think I have about 30, 30 accounts or so that are to a Faye.


00:28:15.600 --> 00:28:17.480
Yeah.


00:28:17.480 --> 00:28:21.080
And I'm happy that I do. I, that is not a complaint or me.


00:28:21.080 --> 00:28:21.920
That's not me whining.


00:28:21.920 --> 00:28:23.160
That's me like going, yes.


00:28:23.160 --> 00:28:25.280
Occasionally I'm annoyed by it.


00:28:25.280 --> 00:28:31.560
Like, yes, like right now I went to the look, look at a GitHub thing and you


00:28:31.560 --> 00:28:34.720
had, I have to log in, so I don't have time to do that right now.


00:28:34.720 --> 00:28:36.640
So occasionally it's annoying, but.


00:28:36.640 --> 00:28:40.600
Well here, let, let me tell you why this is annoying so often.


00:28:40.600 --> 00:28:43.040
I'm going to take this and make it a whole episode, aren't I?


00:28:43.040 --> 00:28:47.800
So the reason it is annoying is there's so many places.


00:28:47.800 --> 00:28:50.200
Like, what is the point of the 2FA?


00:28:50.240 --> 00:28:55.240
The 2FA is if somebody steals your account login information


00:28:55.240 --> 00:28:58.120
through some kind of data breach


00:28:58.120 --> 00:29:01.640
or through password reuse or whatever,


00:29:01.640 --> 00:29:04.160
that someone else can't go and use those credentials


00:29:04.160 --> 00:29:05.600
to log in as you.


00:29:05.600 --> 00:29:07.840
They have to have the second factor.


00:29:07.840 --> 00:29:09.360
Well, here's why it's annoying.


00:29:09.360 --> 00:29:14.000
Every time I log into my credit card processor,


00:29:14.000 --> 00:29:17.680
I think almost every time I log into DigitalOcean,


00:29:17.680 --> 00:29:20.400
It's like, "Hey, how you doing?


00:29:20.400 --> 00:29:22.920
What's your 2FA factor?"


00:29:22.920 --> 00:29:25.800
It's like, I've given that to you about 100 times


00:29:25.800 --> 00:29:27.560
in the same browser, right?


00:29:27.560 --> 00:29:28.720
It should at some point go,


00:29:28.720 --> 00:29:29.560
"You know what?


00:29:29.560 --> 00:29:30.720
They've given us the 2FA.


00:29:30.720 --> 00:29:31.880
We trust them."


00:29:31.880 --> 00:29:34.480
I'm not concerned someone is on my computer


00:29:34.480 --> 00:29:36.640
logging into my thing.


00:29:36.640 --> 00:29:39.680
I'm concerned about the seven other billion people


00:29:39.680 --> 00:29:42.120
who might want to log in from somewhere else, right?


00:29:42.120 --> 00:29:44.680
So I think there should be a little bit of like,


00:29:44.680 --> 00:29:47.680
"Hey, if you've already logged in on this device,


00:29:47.680 --> 00:29:50.360
maybe you don't need the 2FA every time."


00:29:50.360 --> 00:29:51.840
Could use refresh monthly,


00:29:51.840 --> 00:29:54.440
but not four times this morning, right?


00:29:54.440 --> 00:29:57.600
That's when I'm like, "Ah, 2FA, it's driving me nuts."


00:29:57.600 --> 00:29:58.440
So that's my--


00:29:58.440 --> 00:29:59.960
- Yeah, but I mean, to be fair,


00:29:59.960 --> 00:30:01.840
GitHub doesn't do that or PyPI.


00:30:01.840 --> 00:30:03.000
- No, GitHub is great.


00:30:03.000 --> 00:30:04.760
GitHub, I have no complaints.


00:30:04.760 --> 00:30:08.600
- Okay, 'cause I don't have to do it every time for GitHub.


00:30:08.600 --> 00:30:09.440
- No.


00:30:09.440 --> 00:30:10.280
- So, and I have--


00:30:10.280 --> 00:30:12.080
- No, no, no, GitHub is really, really good.


00:30:12.080 --> 00:30:14.040
- Yeah, and I've been using 2FA for GitHub


00:30:14.040 --> 00:30:14.880
for quite a long time.


00:30:14.880 --> 00:30:16.680
It's been optional for a long time.


00:30:16.680 --> 00:30:21.240
So, for a while at least, I have a short, very short memory.


00:30:21.240 --> 00:30:22.480
I'm really good with open source


00:30:22.480 --> 00:30:24.480
because I have the same memory span


00:30:24.480 --> 00:30:29.040
as the general technology memory of open source.


00:30:29.040 --> 00:30:31.640
- Nice.


00:30:31.640 --> 00:30:35.440
All right, I have one other really quick thing.


00:30:35.440 --> 00:30:38.000
You know, Brian, we always have good luck


00:30:38.000 --> 00:30:40.160
reaching out to our listeners about things.


00:30:40.160 --> 00:30:41.840
And this one is a little bit different.


00:30:41.840 --> 00:30:46.460
So I recently got a brand new adventure motorcycle as of last week, which is.


00:30:46.460 --> 00:30:47.960
Awesome.


00:30:47.960 --> 00:30:50.760
And I found some fun places to take it and ride.


00:30:50.760 --> 00:30:55.940
Like I rode up into the snow around here in the coastal range and stuff like that.


00:30:55.940 --> 00:31:00.760
I'm looking for somewhere fun in the Northwest to go riding.


00:31:00.760 --> 00:31:07.340
That's like not intense motocross off road, but you know, would be a lot of


00:31:07.340 --> 00:31:08.160
fun type of things.


00:31:08.160 --> 00:31:11.820
So yeah, just get out and get out in the woods and cruise around.


00:31:11.820 --> 00:31:13.620
in the summer or the spring.


00:31:13.620 --> 00:31:16.700
So listeners out there who know where to ride around here,


00:31:16.700 --> 00:31:20.380
that's not one of the couple huge off-road vehicle


00:31:20.380 --> 00:31:22.800
like state sponsored areas around Portland.


00:31:22.800 --> 00:31:24.660
People got it, shoot it in.


00:31:24.660 --> 00:31:28.060
And if you wanna know why I kinda got this bike,


00:31:28.060 --> 00:31:30.180
how much fun it was, there's a cool video I linked to


00:31:30.180 --> 00:31:34.900
with Ben Townley and another guy, something Raymond,


00:31:34.900 --> 00:31:37.580
I can't remember his first name.


00:31:37.580 --> 00:31:38.740
Anyway, you can check that out.


00:31:38.740 --> 00:31:41.300
And yeah, that's all I got for my extras.


00:31:41.300 --> 00:31:42.320
How about you?


00:31:42.320 --> 00:31:44.860
- I mean, while we're asking for contributors,


00:31:44.860 --> 00:31:48.680
we just passed, we were driving around this weekend


00:31:48.680 --> 00:31:53.680
and saw a group of 10, 20 people riding motorcycles.


00:31:53.680 --> 00:31:58.920
And since we've got a couple of Harley places around here,


00:31:58.920 --> 00:32:01.860
so there are Harley groups around.


00:32:01.860 --> 00:32:06.220
But when I was a kid, I was scared of these people.


00:32:06.220 --> 00:32:09.180
And these people, just people with motorcycles,


00:32:09.180 --> 00:32:10.700
mostly wearing black leather.


00:32:10.700 --> 00:32:12.740
But now they're like, I mean,


00:32:12.740 --> 00:32:15.460
it's mostly people my age or older,


00:32:15.460 --> 00:32:18.820
you know, it's 50 to 70 year olds riding motorbikes


00:32:18.820 --> 00:32:20.580
just to hang out with their friends.


00:32:20.580 --> 00:32:21.420
Well, that's cool.


00:32:21.420 --> 00:32:22.900
I mean, at least that's what I see.


00:32:22.900 --> 00:32:26.540
But I think it'd be cool if I could see like,


00:32:26.540 --> 00:32:28.640
are there like e-bike gangs?


00:32:28.640 --> 00:32:30.380
(laughs)


00:32:30.380 --> 00:32:32.900
Or like, are there e-bike groups of people


00:32:32.900 --> 00:32:35.340
like just a bunch of e-bikes riding together?


00:32:35.340 --> 00:32:37.220
Anyway, if somebody's part of that--


00:32:37.220 --> 00:32:38.940
- I bet there are, e-bikes are awesome.


00:32:38.940 --> 00:32:41.180
like electric bicycles, they're so cool.


00:32:41.180 --> 00:32:43.260
And I'm sure there are actually,


00:32:43.260 --> 00:32:44.100
but how are you gonna find them?


00:32:44.100 --> 00:32:46.220
- It'd be cool to see a picture of like a bunch of them.


00:32:46.220 --> 00:32:47.700
Anyway.


00:32:47.700 --> 00:32:48.540
- Do you have to have to get one


00:32:48.540 --> 00:32:50.340
of those club patches for it?


00:32:50.340 --> 00:32:51.180
- Can we get probably.


00:32:51.180 --> 00:32:52.960
- Do you have any extras before?


00:32:52.960 --> 00:32:55.220
- No, I don't have any extras.


00:32:55.220 --> 00:32:56.060
I was just BS.


00:32:56.060 --> 00:32:58.540
And so let's do a joke.


00:32:58.540 --> 00:33:00.140
- All right, let's do a joke.


00:33:00.140 --> 00:33:01.780
And boy, I didn't do this.


00:33:01.780 --> 00:33:04.420
I didn't plan this, but boy, did it line up good.


00:33:04.420 --> 00:33:08.300
So this one comes to us from Programming Humor on Reddit.


00:33:08.300 --> 00:33:10.500
And just check out this picture, Brian, here really quick.


00:33:10.500 --> 00:33:13.460
Describe the picture to folks.


00:33:13.460 --> 00:33:16.900
You see this?


00:33:16.900 --> 00:33:20.020
So it's some sort of logging into GitHub.


00:33:20.020 --> 00:33:20.860
- Okay.


00:33:20.860 --> 00:33:23.460
- And it's somebody's got to do a code review


00:33:23.460 --> 00:33:24.540
here on the morning.


00:33:24.540 --> 00:33:28.260
- Oh, there's over a million lines changed.


00:33:28.260 --> 00:33:29.380
And 20 deletions.


00:33:29.380 --> 00:33:33.060
- 1,094,000 lines changed, 20 removed.


00:33:33.060 --> 00:33:38.020
So not too bad there, but 2,945 files to review.


00:33:38.020 --> 00:33:40.980
and zero of those, it's like, let's get started.


00:33:40.980 --> 00:33:47.300
So the title is, anyone else have this kind of colleague?


00:33:47.300 --> 00:33:48.740
What a way to start a Monday.


00:33:48.740 --> 00:33:53.580
- So, any guesses what they did?


00:33:53.580 --> 00:33:56.540
I'm guessing that they like applied black to their project


00:33:56.540 --> 00:33:59.540
and just changed everything.


00:33:59.540 --> 00:34:01.100
- Yeah, maybe.


00:34:01.100 --> 00:34:04.260
The comments section's pretty good too.


00:34:04.260 --> 00:34:06.660
Someone else suggested that maybe


00:34:06.660 --> 00:34:09.580
the git commit messages, fix typo.


00:34:09.580 --> 00:34:10.420
- Fix typo.


00:34:10.420 --> 00:34:11.860
(laughing)


00:34:11.860 --> 00:34:13.500
- Or something like that.


00:34:13.500 --> 00:34:14.340
- Oh yeah, the commit messages.


00:34:14.340 --> 00:34:15.980
- Small update.


00:34:15.980 --> 00:34:17.300
- Small update, yeah.


00:34:17.300 --> 00:34:19.340
- Yeah, they're...


00:34:19.340 --> 00:34:20.540
- Ugh.


00:34:20.540 --> 00:34:21.980
- Anyway.


00:34:21.980 --> 00:34:22.820
- That's funny.


00:34:22.820 --> 00:34:24.540
Reformatted every line of code.


00:34:24.540 --> 00:34:27.060
- Exactly.


00:34:27.060 --> 00:34:30.340
So, it's a case of the Mondays.


00:34:30.340 --> 00:34:31.900
One of the best shows ever.


00:34:31.900 --> 00:34:33.900
- Replace all spaces with tabs.


00:34:33.900 --> 00:34:36.580
(laughing)


00:34:36.580 --> 00:34:37.860
- Exactly.


00:34:37.860 --> 00:34:39.020
- Nice.


00:34:39.020 --> 00:34:40.700
So anyway, cool.


00:34:40.700 --> 00:34:42.320
- Well, that's what I got for you.


00:34:42.320 --> 00:34:45.220
- For this wonderful episode, I had a lot of fun.


00:34:45.220 --> 00:34:46.060
Hope everybody else did too.


00:34:46.060 --> 00:34:46.900
- Yeah, I did too.


00:34:46.900 --> 00:34:49.580
Thanks everyone for listening.


00:34:49.580 --> 00:34:50.420
See y'all later.


00:34:50.420 --> 00:34:51.540
- Bye.


00:34:51.540 --> 00:34:52.380
- Bye.


00:34:52.380 --> 00:35:02.380
[BLANK_AUDIO]

