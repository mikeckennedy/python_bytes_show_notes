WEBVTT

00:00:00.000 --> 00:00:01.000
- Yeah, do it.


00:00:01.000 --> 00:00:05.480
- Hello and welcome to Python Bytes.


00:00:05.480 --> 00:00:08.600
We're here with Dean and I'm here with ZDax.


00:00:08.600 --> 00:00:09.440
- Hey, guys.


00:00:09.440 --> 00:00:11.600
- We're here to talk about Python Bytes.


00:00:11.600 --> 00:00:12.440
- Yeah.


00:00:12.440 --> 00:00:14.680
- So, we're gonna talk about Python Bytes.


00:00:14.680 --> 00:00:15.520
- Yeah.


00:00:15.520 --> 00:00:18.000
- And we're gonna talk about how to use Python Bytes.


00:00:18.000 --> 00:00:18.840
- Yeah.


00:00:18.840 --> 00:00:20.840
- So, we're gonna talk about how to use Python Bytes.


00:00:20.840 --> 00:00:21.680
- Yeah.


00:00:21.680 --> 00:00:23.800
- And we're gonna talk about how to use Python Bytes.


00:00:23.800 --> 00:00:24.640
- Yeah.


00:00:24.640 --> 00:00:25.480
- So, let's get started.


00:00:25.480 --> 00:00:26.300
- Yeah.


00:00:26.300 --> 00:00:27.140
- So, let's get started.


00:00:27.140 --> 00:00:27.980
- Yeah.


00:00:27.980 --> 00:00:29.880
- So, we're gonna talk about how to use Python Bytes.


00:00:29.880 --> 00:00:32.800
where we deliver Python news and headlines directly to your earbuds.


00:00:32.800 --> 00:00:37.340
This is episode 224, recorded March 10th, 2021.


00:00:37.340 --> 00:00:38.540
I'm Michael Kennedy.


00:00:38.540 --> 00:00:39.840
And I'm Brian Okken.


00:00:39.840 --> 00:00:41.880
And I am Calvin Hendryx-Parker.


00:00:41.880 --> 00:00:44.300
Hey, we have a special guest, Calvin. Welcome to the show.


00:00:44.300 --> 00:00:45.500
Hey, thanks for having me.


00:00:45.500 --> 00:00:48.000
Yeah, it's fantastic to have you here.


00:00:48.000 --> 00:00:49.800
Always great to have a fresh face.


00:00:49.800 --> 00:00:52.840
I believe it's been about a year since you were on the show previously.


00:00:52.840 --> 00:00:53.300
Is that right?


00:00:53.300 --> 00:00:55.880
I think almost exactly a year, yes.


00:00:55.880 --> 00:00:59.300
Yeah, YouTube reminded me that it was one of the first videos


00:00:59.300 --> 00:01:02.980
of this whole Python Bytes that we'd put up there.


00:01:02.980 --> 00:01:03.940
Before we were live streaming,


00:01:03.940 --> 00:01:05.260
we'd record it and then put it up.


00:01:05.260 --> 00:01:07.380
Like, that was so last year.


00:01:07.380 --> 00:01:08.620
- I know, I mean, Python Bytes,


00:01:08.620 --> 00:01:09.780
you guys have really upped your game.


00:01:09.780 --> 00:01:10.820
I'm super proud of y'all.


00:01:10.820 --> 00:01:12.420
- Yeah, it's 2020.


00:01:12.420 --> 00:01:13.260
- Yeah, yeah, yeah.


00:01:13.260 --> 00:01:15.940
We got our broadcast studio working right here


00:01:15.940 --> 00:01:17.140
in Portland, Oregon.


00:01:17.140 --> 00:01:18.740
Super, super nice.


00:01:18.740 --> 00:01:21.580
Speaking of nice, I want to do a follow-up.


00:01:21.580 --> 00:01:22.740
You know what's nice, Brian?


00:01:22.740 --> 00:01:26.860
So often our guests, they send us all these items


00:01:26.860 --> 00:01:32.140
And you know, we'll mention something and we'll think this is like the first time i've heard of this and they're like


00:01:32.140 --> 00:01:35.420
And here's the 10 other amazing things that you've never heard of right? And so this


00:01:35.420 --> 00:01:40.300
this is a little bit of a follow-up along that before actually I realized before I get into that though


00:01:40.300 --> 00:01:44.140
calvin, maybe you want to just do a quick who are you? It has been a year


00:01:44.140 --> 00:01:46.380
It has been a year


00:01:46.380 --> 00:01:48.620
Uh who you are sure sure i'm calvin hendrix parker


00:01:48.620 --> 00:01:52.780
I'm co-founder and cto of six feet up and also the co-founder of the indie pie


00:01:53.020 --> 00:01:55.500
group here in Indianapolis, the Python User Group.


00:01:55.500 --> 00:01:58.100
And we are also the organizers of the Python Web Conference,


00:01:58.100 --> 00:01:59.260
which I'll talk about later.


00:01:59.260 --> 00:02:01.180
So that's kind of a quick rundown of me.


00:02:01.180 --> 00:02:03.060
- You're that company that hands out Python jersey shirts.


00:02:03.060 --> 00:02:05.440
- Oh yeah, we do some killer swag.


00:02:05.440 --> 00:02:06.280
- Yeah, yeah, for sure.


00:02:06.280 --> 00:02:07.820
That's a cool conference.


00:02:07.820 --> 00:02:10.100
Be fun to talk about that in a little bit.


00:02:10.100 --> 00:02:11.340
So the first thing though,


00:02:11.340 --> 00:02:16.340
that I do want to talk about over here is AWS Simple.


00:02:16.340 --> 00:02:20.580
We talked about Bodo type definitions, I think it was.


00:02:20.580 --> 00:02:22.900
And then someone mentioned that Bodo type definitions


00:02:22.900 --> 00:02:26.600
has kind of been deprecated, ignored, and so on.


00:02:26.600 --> 00:02:30.420
And so they pointed us at this mypy live generated version


00:02:30.420 --> 00:02:32.060
that we talked about last week.


00:02:32.060 --> 00:02:36.060
And also we got a message from James Abel,


00:02:36.060 --> 00:02:41.940
who said, "Hey, I built this cool library called AWS Simple."


00:02:41.940 --> 00:02:44.380
Kind of got it all flowed together


00:02:44.380 --> 00:02:47.340
to get all the S's to fit in there, AWS Simple.


00:02:47.340 --> 00:02:52.300
And the idea is that it's a typed wrapper


00:02:52.300 --> 00:02:54.080
around the AWS API.


00:02:54.080 --> 00:02:57.740
And if you recall, I kind of was harsh on the Boto3 API


00:02:57.740 --> 00:03:01.820
and I stand by that because there's just zero discoverability


00:03:01.820 --> 00:03:02.740
on how it works.


00:03:02.740 --> 00:03:05.500
There's like inconsistencies on how you pass parameters.


00:03:05.500 --> 00:03:06.920
Sometimes you pass them by name,


00:03:06.920 --> 00:03:08.620
sometimes you pass them as dictionaries


00:03:08.620 --> 00:03:09.660
with names in the dictionary.


00:03:09.660 --> 00:03:11.500
Just a lot of stuff going on there


00:03:11.500 --> 00:03:12.940
and it's really not discoverable.


00:03:12.940 --> 00:03:16.620
And so this one also is one of those libraries


00:03:16.620 --> 00:03:18.660
that's meant to help with that.


00:03:18.660 --> 00:03:23.660
So it's a simple API for basic services like S3, DynamoDB,


00:03:23.660 --> 00:03:26.240
their hosted NoSQL database,


00:03:26.240 --> 00:03:30.640
simple notification service, simple queuing service.


00:03:30.640 --> 00:03:34.500
I don't know if you guys have been to AWS lately,


00:03:34.500 --> 00:03:35.540
but you go to your console and it says,


00:03:35.540 --> 00:03:37.220
"Here's the two things you've recently visited.


00:03:37.220 --> 00:03:38.060
"See the rest."


00:03:38.060 --> 00:03:40.220
And it like, it scrolls.


00:03:40.220 --> 00:03:41.060
There's a lot.


00:03:41.060 --> 00:03:42.980
So this is clearly not everything,


00:03:42.980 --> 00:03:45.740
but it is some common ones, especially around S3, I think.


00:03:45.740 --> 00:03:48.200
And it's also maybe the kernel of other things, right?


00:03:48.200 --> 00:03:51.200
People often ask me, "Hey, what project could I contribute to?"


00:03:51.200 --> 00:03:54.660
Well, I feel like I would really love to have simple email service integrated with this.


00:03:54.660 --> 00:03:59.060
Like, well, you know, it probably is easy to add like one more service here.


00:03:59.060 --> 00:04:04.800
So some of the features include a nice object-oriented API on top of Boto3


00:04:04.800 --> 00:04:09.140
with proper type definitions and classes and static things


00:04:09.140 --> 00:04:14.100
that all the static type checkers and the editors all know about and love.


00:04:14.100 --> 00:04:16.860
You can write really simple one-liners


00:04:16.860 --> 00:04:19.460
to do S3 read/write deletes.


00:04:19.460 --> 00:04:21.460
It has automatic retry for S3.


00:04:21.460 --> 00:04:22.480
It has caching.


00:04:22.480 --> 00:04:26.940
So for example, when you get a file or upload a file,


00:04:26.940 --> 00:04:29.700
it will hash that result.


00:04:29.700 --> 00:04:32.700
And basically, if you try to get it again,


00:04:32.700 --> 00:04:35.860
it'll say, let me check the E tag.


00:04:35.860 --> 00:04:39.140
That's the way web browsers and servers exchange.


00:04:39.140 --> 00:04:41.620
Like, here's the sort of history


00:04:41.620 --> 00:04:43.220
or the version of the file,


00:04:43.220 --> 00:04:45.740
And it'll check has this thing changed or not.


00:04:45.740 --> 00:04:48.740
And so it'll not download the S3 file if it hasn't changed.


00:04:48.740 --> 00:04:51.020
And you ask, it'll just use the last version it got


00:04:51.020 --> 00:04:53.300
since it touched it, things like that.


00:04:53.300 --> 00:04:56.380
Some DynamoDB full table scans,


00:04:56.380 --> 00:04:58.120
secondary indexes and pagination.


00:04:58.120 --> 00:05:00.740
So there's some simple examples like,


00:05:00.740 --> 00:05:02.380
I'm gonna create my S3 access.


00:05:02.380 --> 00:05:05.860
And then you could, maybe if you could do DynamoDB,


00:05:05.860 --> 00:05:09.040
create a DynamoDB access and just put an item


00:05:09.040 --> 00:05:10.900
or get an item and off it goes.


00:05:10.900 --> 00:05:13.940
Really, really simple, as you would imagine,


00:05:13.940 --> 00:05:15.860
something with a name like AWS Simple has.


00:05:15.860 --> 00:05:19.340
But it's just one more thing around AWS APIs


00:05:19.340 --> 00:05:20.420
that I think is pretty interesting.


00:05:20.420 --> 00:05:21.580
What do you guys think?


00:05:21.580 --> 00:05:23.380
- I kind of expected a bullet to bury in there,


00:05:23.380 --> 00:05:25.740
saying AWS Simple is not simple,


00:05:25.740 --> 00:05:27.700
because this is a massive undertaking


00:05:27.700 --> 00:05:30.220
to try and make something like this simple.


00:05:30.220 --> 00:05:31.040
- Yeah, absolutely.


00:05:31.040 --> 00:05:31.880
I totally agree with that.


00:05:31.880 --> 00:05:34.020
I mean, it's pretty neat.


00:05:34.020 --> 00:05:34.940
Over in their documentation,


00:05:34.940 --> 00:05:37.220
they've got a little more examples


00:05:37.220 --> 00:05:39.660
and a quick start guide and how to use it and so on.


00:05:39.660 --> 00:05:42.100
but yeah, it's pretty easy.


00:05:42.100 --> 00:05:44.120
You just do like S3, create bucket,


00:05:44.120 --> 00:05:46.460
S3, write string to this key and so on.


00:05:46.460 --> 00:05:47.580
It's quite easy.


00:05:47.580 --> 00:05:52.580
So if you're struggling with the AWS APIs,


00:05:52.580 --> 00:05:54.100
this is a cool project.


00:05:54.100 --> 00:05:57.040
And again, I think it's pretty limited


00:05:57.040 --> 00:05:58.300
to just a couple of the services.


00:05:58.300 --> 00:06:00.640
So it's somewhere that if you got your favorite service


00:06:00.640 --> 00:06:02.180
and you want something like this for it,


00:06:02.180 --> 00:06:04.660
reach out to James and add it.


00:06:04.660 --> 00:06:06.380
- Yeah, and all of the services could be added


00:06:06.380 --> 00:06:09.980
and then AWS Simple could be as complex as everything else.


00:06:09.980 --> 00:06:11.100
- Exactly.


00:06:11.100 --> 00:06:12.820
Like I can barely install this thing anymore.


00:06:12.820 --> 00:06:13.940
It's really legit.


00:06:13.940 --> 00:06:18.700
- Yeah, they're trying to become the AWS APIs for humans,


00:06:18.700 --> 00:06:22.220
kind of like requests for HTTP, URL lib.


00:06:22.220 --> 00:06:24.420
- Yeah, maybe.


00:06:24.420 --> 00:06:26.220
I mean, Boto3 was kind of like that too, right?


00:06:26.220 --> 00:06:28.580
- Well, S3, again, the S3 APIs,


00:06:28.580 --> 00:06:30.620
they've changed names, they're inconsistent,


00:06:30.620 --> 00:06:32.820
it's really hard to like parse sometimes as a human,


00:06:32.820 --> 00:06:35.860
like the uploading process of like multi-part uploads.


00:06:35.860 --> 00:06:38.460
If you're not into the web, this could be really daunting.


00:06:38.460 --> 00:06:41.160
Sounds like this is a great way to enter this space


00:06:41.160 --> 00:06:43.140
and not have to learn all that stuff.


00:06:43.140 --> 00:06:44.260
- I can't just do this thing.


00:06:44.260 --> 00:06:45.340
I gotta create a waiter


00:06:45.340 --> 00:06:47.260
and I gotta wait on the thing and so on.


00:06:47.260 --> 00:06:48.700
Yeah, absolutely.


00:06:48.700 --> 00:06:51.340
Dean Langsam out there in the live stream said,


00:06:51.340 --> 00:06:55.500
"It's amazing to me how many of the most accessed APIs


00:06:55.500 --> 00:06:57.300
"in the world need third-party packages


00:06:57.300 --> 00:06:58.260
"to make them useful."


00:06:58.260 --> 00:07:00.180
Yeah, I mean, if it weren't such a small little


00:07:00.180 --> 00:07:01.980
rinky-dink company, if they could hire a bunch


00:07:01.980 --> 00:07:03.980
of developers to work on this, like, oh wait,


00:07:03.980 --> 00:07:04.960
no, it's Amazon.


00:07:04.960 --> 00:07:08.880
- Yeah, I totally agree with you, Dean.


00:07:08.880 --> 00:07:10.360
That's funny.


00:07:10.360 --> 00:07:11.520
All right.


00:07:11.520 --> 00:07:14.400
Yeah, so AWS symbol, check it out if that appeals to you.


00:07:14.400 --> 00:07:16.700
Brian, what you got for us?


00:07:16.700 --> 00:07:19.760
- Well, I was going to, how do we do this?


00:07:19.760 --> 00:07:20.960
Oh, yep.


00:07:20.960 --> 00:07:22.640
- We both clicked, sorry about that.


00:07:22.640 --> 00:07:23.800
It was a race condition.


00:07:23.800 --> 00:07:27.480
- So I learned something new the other day


00:07:27.480 --> 00:07:29.760
and I learned something new about something old.


00:07:29.760 --> 00:07:34.760
So I've used coverage.py a lot.


00:07:34.760 --> 00:07:37.180
over the past several years.


00:07:37.180 --> 00:07:39.000
I've even covered it a lot on


00:07:39.000 --> 00:07:42.800
the Test and Code podcast a couple of times.


00:07:42.800 --> 00:07:45.320
Covered it on the podcast.


00:07:45.320 --> 00:07:47.260
Yeah, that's a meta joke.


00:07:47.260 --> 00:07:50.100
Anyway, there's something I missed the whole time.


00:07:50.100 --> 00:07:53.100
So there's a source thing.


00:07:53.100 --> 00:07:55.460
So you can tell coverage where the source code is,


00:07:55.460 --> 00:07:58.740
where the source is for whatever you're covering.


00:07:58.740 --> 00:08:03.800
Hidden in here is the source can


00:08:03.800 --> 00:08:09.460
be the sources either directories or packages.


00:08:09.460 --> 00:08:12.440
It's the or packages I never saw before.


00:08:12.440 --> 00:08:13.720
>> That's cool.


00:08:13.720 --> 00:08:15.080
>> Why this is significant,


00:08:15.080 --> 00:08:18.400
and apparently this has been here the whole time and I just missed it,


00:08:18.400 --> 00:08:20.840
is there was a workaround.


00:08:20.840 --> 00:08:28.140
So if I'm developing a package and I want to test it as an installed package,


00:08:28.140 --> 00:08:32.760
I install it and then I run the tests against the installed package.


00:08:32.760 --> 00:08:40.000
But how do I run coverage against that? And there was an old trick to and it I guess it still is works is to use


00:08:40.000 --> 00:08:42.000
the paths


00:08:42.000 --> 00:08:48.860
Option within coverage to say these two paths are identical


00:08:48.860 --> 00:08:52.760
so you could say the actual source code directory is identical to the


00:08:52.760 --> 00:08:58.000
Site packages directory so that it it kind of lines everything up and then it reports


00:08:58.340 --> 00:09:01.140
Even though it's measuring the coverage on the installed package


00:09:01.140 --> 00:09:05.180
It reports it as if it was sitting in the source directory


00:09:05.180 --> 00:09:11.320
And so I've been doing that in the past and that still is a good idea so that the output is readable


00:09:11.320 --> 00:09:13.800
But it isn't required


00:09:13.800 --> 00:09:19.980
You can just pass in the name of your package without the dot PI or anything or if it's just a file


00:09:19.980 --> 00:09:24.900
But just the name of the package and it just reports it and yeah


00:09:24.900 --> 00:09:27.800
- Yeah, anyway, I just figured that maybe some people


00:09:27.800 --> 00:09:29.560
out there have missed that also.


00:09:29.560 --> 00:09:31.760
It's very handy. - Yeah, it's pretty cool.


00:09:31.760 --> 00:09:32.680
Well, you might wonder, like,


00:09:32.680 --> 00:09:34.320
why are you testing packages?


00:09:34.320 --> 00:09:36.880
I don't need the coverage of requests when I use it.


00:09:36.880 --> 00:09:38.840
I just know that I use it and we're all good.


00:09:38.840 --> 00:09:40.880
- Well, if you're developing requests,


00:09:40.880 --> 00:09:43.160
you might wanna come. - Yes, exactly.


00:09:43.160 --> 00:09:47.000
Or, you know, it may well be that you're building


00:09:47.000 --> 00:09:50.680
your application out of several packages that you control


00:09:50.680 --> 00:09:52.720
and you kinda wanna keep them separate for reuse,


00:09:52.720 --> 00:09:54.280
but you might also wanna know, like,


00:09:54.280 --> 00:09:56.540
how much am I interacting with that one, right?


00:09:56.540 --> 00:09:58.740
- Oh, that's a cool use to say really


00:09:58.740 --> 00:10:00.960
how much am I interacting with the package?


00:10:00.960 --> 00:10:02.500
You could run coverage on that.


00:10:02.500 --> 00:10:05.260
- Yeah, if it's zero, take it out of your requirements.


00:10:05.260 --> 00:10:07.820
- That would be super nice.


00:10:07.820 --> 00:10:10.140
- Yeah.


00:10:10.140 --> 00:10:11.420
Yeah, this is really cool.


00:10:11.420 --> 00:10:14.800
- Yeah, also, I guess when one of the reasons


00:10:14.800 --> 00:10:17.680
why that might be handy is if they change,


00:10:17.680 --> 00:10:20.620
drastically change an API, like go to a new dot,


00:10:20.620 --> 00:10:24.540
you know, like a three dot something to four dot something,


00:10:24.540 --> 00:10:26.380
what is the API change?


00:10:26.380 --> 00:10:29.620
And you could check to see if you're even using that API


00:10:29.620 --> 00:10:31.060
or that entry point that might be--


00:10:31.060 --> 00:10:31.900
- Oh, that's interesting.


00:10:31.900 --> 00:10:34.060
Yeah, yeah, that part was like a breaking change,


00:10:34.060 --> 00:10:35.180
but I don't care.


00:10:35.180 --> 00:10:36.140
- Yeah.


00:10:36.140 --> 00:10:36.980
- Okay.


00:10:36.980 --> 00:10:37.800
- Like, I can really see,


00:10:37.800 --> 00:10:38.740
this is a huge use case here though,


00:10:38.740 --> 00:10:40.900
for old code bases where the developers


00:10:40.900 --> 00:10:41.780
aren't there anymore,


00:10:41.780 --> 00:10:43.400
and there's been dependencies brought in


00:10:43.400 --> 00:10:45.020
and you don't know exactly what's being used.


00:10:45.020 --> 00:10:48.020
So this is like super nice to be able to do that.


00:10:49.460 --> 00:10:51.620
- And of course, as a reminder,


00:10:51.620 --> 00:10:53.260
you can have as many of these as you want.


00:10:53.260 --> 00:10:56.460
So if you're wanting to measure several packages,


00:10:56.460 --> 00:10:59.860
you can add multiple source flags.


00:10:59.860 --> 00:11:03.660
And if you're using pytest-cov, it's the cov flag,


00:11:03.660 --> 00:11:06.020
so you, which is identical.


00:11:06.020 --> 00:11:08.500
I'm not sure why they used cov and dash-cov


00:11:08.500 --> 00:11:11.460
instead of dash-source, but there you go.


00:11:11.460 --> 00:11:12.540
- Interesting.


00:11:12.540 --> 00:11:14.700
Okay, yeah, yeah, super cool, super cool.


00:11:17.780 --> 00:11:21.260
So Calvin, I didn't know that you were an artist.


00:11:21.260 --> 00:11:23.820
- I wish, maybe more of a machine learning artist,


00:11:23.820 --> 00:11:25.300
but machine learning artist.


00:11:25.300 --> 00:11:27.200
This really interesting article came up


00:11:27.200 --> 00:11:30.140
on my newsfeed last week,


00:11:30.140 --> 00:11:32.700
which was finding Mona Lisa in the game of life with Jax.


00:11:32.700 --> 00:11:35.380
And so there's three interesting things there,


00:11:35.380 --> 00:11:38.340
like Mona Lisa, game of life, and then Jax.


00:11:38.340 --> 00:11:40.840
The author was attempting to find


00:11:40.840 --> 00:11:44.280
if he could start with a starting set of points


00:11:44.280 --> 00:11:45.980
on a game of life.


00:11:45.980 --> 00:11:47.060
If you're not familiar with game of life,


00:11:47.060 --> 00:11:49.940
There's whole Wikipedia articles about that.


00:11:49.940 --> 00:11:54.460
But if you could basically seed an initial game of life


00:11:54.460 --> 00:11:57.640
and after so many generations, have it show you a picture.


00:11:57.640 --> 00:12:00.300
So he actually started with the Mona Lisa


00:12:00.300 --> 00:12:02.220
and kind of went through what it would take


00:12:02.220 --> 00:12:05.120
to go from a game of life running,


00:12:05.120 --> 00:12:07.240
all the kind of constraints that happen in that.


00:12:07.240 --> 00:12:09.060
But this seems like a really interesting


00:12:09.060 --> 00:12:10.540
machine learning problem.


00:12:10.540 --> 00:12:11.380
- That's cool.


00:12:11.380 --> 00:12:15.220
So it like, it randomly runs the game of life,


00:12:15.220 --> 00:12:16.760
But then the ML says,


00:12:16.760 --> 00:12:19.600
oh, that's starting to look like Mona Lisa, more of that.


00:12:19.600 --> 00:12:21.240
- Well, it's more of,


00:12:21.240 --> 00:12:24.340
I'm gonna run a generation of game of life and then reset,


00:12:24.340 --> 00:12:26.800
and I'm gonna invert some pixels again and go again


00:12:26.800 --> 00:12:30.320
until I can generate what is my target picture.


00:12:30.320 --> 00:12:32.480
And it took a lot of CPU cycles.


00:12:32.480 --> 00:12:33.880
So he basically wrote a simple,


00:12:33.880 --> 00:12:35.800
single threaded version of this in Python.


00:12:35.800 --> 00:12:37.520
And there's Python notebooks included


00:12:37.520 --> 00:12:39.720
with the GitHub links in here,


00:12:39.720 --> 00:12:41.960
but it took days of CPU time


00:12:41.960 --> 00:12:44.280
for him to run the initial four generations


00:12:44.280 --> 00:12:47.280
to see if he could even make this be possible.


00:12:47.280 --> 00:12:48.200
And then kind of went,


00:12:48.200 --> 00:12:50.560
and with any machine learning project,


00:12:50.560 --> 00:12:51.880
it's really important to understand


00:12:51.880 --> 00:12:53.280
like the preparation of your data


00:12:53.280 --> 00:12:54.800
before you kind of go dive in.


00:12:54.800 --> 00:12:57.440
So what I also thought was interesting in here


00:12:57.440 --> 00:12:59.400
is it talks about the preparation of the data,


00:12:59.400 --> 00:13:00.920
kind of your pre-processing,


00:13:00.920 --> 00:13:05.400
using Pill to understand how to generate that target first,


00:13:05.400 --> 00:13:06.240
- Yeah.


00:13:06.240 --> 00:13:08.400
- Give the game of life algorithms


00:13:08.400 --> 00:13:10.000
a chance of getting it correct,


00:13:10.000 --> 00:13:10.840
came into like, you know,


00:13:10.840 --> 00:13:12.200
really half tones would work better


00:13:12.200 --> 00:13:14.280
because there's some constraints around game of life


00:13:14.280 --> 00:13:16.740
that the whites can't be too contiguous


00:13:16.740 --> 00:13:18.620
because they'll kill each other


00:13:18.620 --> 00:13:20.260
and it ends up being all black.


00:13:20.260 --> 00:13:23.760
And at the end, the kind of goal of this


00:13:23.760 --> 00:13:26.100
was how fast can we now do it?


00:13:26.100 --> 00:13:28.520
Take the single threaded Python example,


00:13:28.520 --> 00:13:30.800
which took hours or days of CPU.


00:13:30.800 --> 00:13:32.380
Can we actually do it on a GPU?


00:13:32.380 --> 00:13:34.380
And so there's a Jack's library,


00:13:34.380 --> 00:13:37.420
which is a machine learning library in Python


00:13:37.420 --> 00:13:38.660
that allows you to actually like


00:13:38.660 --> 00:13:40.300
super parallelize the problem.


00:13:40.300 --> 00:13:41.960
So if you can actually slice the problem up,


00:13:41.960 --> 00:13:44.240
shows kind of example here in pictures, which is kind of nice


00:13:44.240 --> 00:13:47.080
for a person who doesn't do a lot of machine learning.


00:13:47.080 --> 00:13:49.520
They actually kind of show you what the process looks like


00:13:49.520 --> 00:13:51.800
and hyper-parallelize this.


00:13:51.800 --> 00:13:54.660
Basically, in 40-- he went from days of CPU time


00:13:54.660 --> 00:13:58.440
down to 40 seconds to get through the first--


00:13:58.440 --> 00:13:59.960
>>What was the final time?


00:13:59.960 --> 00:14:01.360
>>40 seconds.


00:14:01.360 --> 00:14:03.320
It was-- yeah, it was ridiculous.


00:14:03.320 --> 00:14:04.920
It was like, so 1,000 iterations.


00:14:04.920 --> 00:14:08.960
So the first one was four generations took days.


00:14:08.960 --> 00:14:10.840
The next one where he did it with Jax


00:14:10.840 --> 00:14:15.600
was 1,000 iterations took 40 seconds on a Google Colab GPU.


00:14:15.600 --> 00:14:18.120
So JAX is basically a Python library.


00:14:18.120 --> 00:14:21.480
I've got a quick little quick start over here.


00:14:21.480 --> 00:14:23.200
Neat library that actually you kind of


00:14:23.200 --> 00:14:26.160
have to alter your brain to a little bit to how you code


00:14:26.160 --> 00:14:28.720
so that you can code in a way that can be hyperparallelized


00:14:28.720 --> 00:14:30.000
across all the GPUs.


00:14:30.000 --> 00:14:32.160
So I mean, for people who aren't familiar with GPUs,


00:14:32.160 --> 00:14:34.680
which you may not be because good luck getting a GPU right


00:14:34.680 --> 00:14:35.160
now.


00:14:35.160 --> 00:14:37.240
They're unobtainium at this point.


00:14:37.240 --> 00:14:40.000
But if you did have a GPU, you can


00:14:40.000 --> 00:14:42.060
take advantage of those, how many cores


00:14:42.060 --> 00:14:43.200
are in some of these modern GPUs,


00:14:43.200 --> 00:14:45.800
like thousands in the new, like NVIDIA ones.


00:14:45.800 --> 00:14:47.280
- Every time that I try to think about


00:14:47.280 --> 00:14:49.040
and try to conceptualize like how fast


00:14:49.040 --> 00:14:50.140
and how much these things can do,


00:14:50.140 --> 00:14:52.240
I'm like, whatever that is, it's probably off by 10


00:14:52.240 --> 00:14:54.960
or many, many more, factor of 10,


00:14:54.960 --> 00:14:57.040
just like ramp that up to beyond


00:14:57.040 --> 00:14:58.400
what you can think is reasonable.


00:14:58.400 --> 00:15:01.220
It's, you think of, we've got a, you know,


00:15:01.220 --> 00:15:03.320
half a million polygons on the screen


00:15:03.320 --> 00:15:04.200
and we're gonna draw that.


00:15:04.200 --> 00:15:07.460
Oh, we're actually gonna do that 200 times a second.


00:15:07.460 --> 00:15:09.640
- Right, so what's interesting is if you


00:15:09.640 --> 00:15:11.960
are doing some machine learning experimentations,


00:15:11.960 --> 00:15:13.960
learning a tool like JAX may actually


00:15:13.960 --> 00:15:15.880
help you speed up your iteration so you actually


00:15:15.880 --> 00:15:17.160
can get some useful results out of it.


00:15:17.160 --> 00:15:18.540
Because a lot of machine learning


00:15:18.540 --> 00:15:21.440
is kind of picking out what your algorithm base algorithm is


00:15:21.440 --> 00:15:22.200
going to be.


00:15:22.200 --> 00:15:24.080
But you have to run it enough to know


00:15:24.080 --> 00:15:25.540
whether your algorithm is getting you


00:15:25.540 --> 00:15:26.560
the results you expect.


00:15:26.560 --> 00:15:28.440
So being able to run through those algorithms


00:15:28.440 --> 00:15:30.080
quicker with a tool like JAX I think


00:15:30.080 --> 00:15:31.800
would be super beneficial.


00:15:31.800 --> 00:15:33.760
Yeah, absolutely.


00:15:33.760 --> 00:15:34.960
That's super neat.


00:15:34.960 --> 00:15:38.040
And I think the biggest takeaway here is JAX, actually.


00:15:38.040 --> 00:15:39.040
Yeah.


00:15:39.040 --> 00:15:40.720
Yeah, that was the end goal was like,


00:15:40.720 --> 00:15:41.720
yeah, can we talk about Jacks?


00:15:41.720 --> 00:15:43.200
'Cause that's a really cool library.


00:15:43.200 --> 00:15:45.040
- Well, and a cool logo, by the way.


00:15:45.040 --> 00:15:45.880
- Yeah.


00:15:45.880 --> 00:15:46.800
- Yeah.


00:15:46.800 --> 00:15:47.640
- Yeah, I love it.


00:15:47.640 --> 00:15:49.300
The logo is super cool, actually, I like it.


00:15:49.300 --> 00:15:51.440
- Yeah, but definitely, and I think they have support


00:15:51.440 --> 00:15:53.800
for tensor processing units as well.


00:15:53.800 --> 00:15:56.040
So not only GPUs, but if you're doing like tensor flow stuff


00:15:56.040 --> 00:15:58.560
with tensor GPUs or tensor processing units,


00:15:58.560 --> 00:16:00.380
so you can take advantage of those as well.


00:16:00.380 --> 00:16:01.220
- Yeah.


00:16:01.220 --> 00:16:03.040
Okay, super neat, super neat.


00:16:03.040 --> 00:16:06.680
I wanna talk about something that's not as neat, maybe.


00:16:06.680 --> 00:16:09.400
It'll get you excited, but in the wrong way.


00:16:09.400 --> 00:16:11.740
This one was sent over by my friend, Mark Little,


00:16:11.740 --> 00:16:15.520
fellow Portlander, and a follow-up related one


00:16:15.520 --> 00:16:16.840
sent over by Tony.


00:16:16.840 --> 00:16:19.780
So link into a couple of articles here.


00:16:19.780 --> 00:16:23.720
And recall, we talked about Google coming on


00:16:23.720 --> 00:16:25.040
as the visionary sponsor.


00:16:25.040 --> 00:16:27.280
One of their primary goals that they wanted


00:16:27.280 --> 00:16:30.640
was to improve the package security.


00:16:30.640 --> 00:16:33.840
You think about, you know, you think about


00:16:33.840 --> 00:16:35.680
some of the things that have happened recently


00:16:35.680 --> 00:16:40.680
that are super scary, one, the Outlook catastrophe


00:16:40.680 --> 00:16:44.420
that 60,000 companies have been like taken over.


00:16:44.420 --> 00:16:47.980
And then the SolarWinds one as well.


00:16:47.980 --> 00:16:49.760
And I think they're somewhat related,


00:16:49.760 --> 00:16:51.360
even though they're not the same origin


00:16:51.360 --> 00:16:52.440
or the same type of hack.


00:16:52.440 --> 00:16:55.200
The SolarWinds one is one of these supply chain


00:16:55.200 --> 00:16:59.080
vulnerabilities and these breaches, right?


00:16:59.080 --> 00:17:01.320
It's one thing to say, I'm gonna protect


00:17:01.320 --> 00:17:03.660
against somebody breaking into my website.


00:17:03.660 --> 00:17:05.520
I'm gonna run the proper firewalls,


00:17:05.520 --> 00:17:08.960
low privileges, everything's patched, et cetera, et cetera.


00:17:08.960 --> 00:17:11.960
That might still not be enough, but that's like a good start.


00:17:11.960 --> 00:17:14.500
But do you think about, well, next time you


00:17:14.500 --> 00:17:19.760
pip install the new version of package whatever,


00:17:19.760 --> 00:17:24.200
what if it was influenced with some kind of negative package


00:17:24.200 --> 00:17:26.600
that had some vulnerability


00:17:26.600 --> 00:17:28.360
that then got into your servers and then went on?


00:17:28.360 --> 00:17:30.480
Like the supply chain story


00:17:30.480 --> 00:17:35.440
around all of these package management places


00:17:35.440 --> 00:17:37.480
is scary, I think.


00:17:37.480 --> 00:17:38.740
That's not what happened to SolarWinds.


00:17:38.740 --> 00:17:41.780
They just had the password SolarWinds123.


00:17:41.780 --> 00:17:43.920
That's a different type of problem.


00:17:43.920 --> 00:17:45.700
- Those darn interns.


00:17:45.700 --> 00:17:47.500
- Exactly, exactly.


00:17:47.500 --> 00:17:51.860
But the problem that it might be untrustworthy


00:17:51.860 --> 00:17:55.860
to install all of our beautiful open source things.


00:17:55.860 --> 00:17:58.300
I don't know, it's very scary.


00:17:58.300 --> 00:17:59.140
Like, what do you guys think about this?


00:17:59.140 --> 00:18:01.340
- It seemed like this went even a level deeper.


00:18:01.340 --> 00:18:04.500
There wasn't even scary to install the open source things.


00:18:04.500 --> 00:18:07.760
it was dangerous to install your own private package names


00:18:07.760 --> 00:18:08.980
if someone knew about them


00:18:08.980 --> 00:18:11.700
and had put them into a public repository


00:18:11.700 --> 00:18:12.920
with a newer version.


00:18:12.920 --> 00:18:15.540
- Yeah, so let me read the titles here


00:18:15.540 --> 00:18:16.820
for people who are listening.


00:18:16.820 --> 00:18:21.240
The Python package index nukes 3,653 malicious libraries


00:18:21.240 --> 00:18:24.780
uploaded soon after a security shortcoming is highlighted.


00:18:24.780 --> 00:18:31.740
And the other one is poison packages, supply chain risks,


00:18:31.740 --> 00:18:35.360
users hit Python community with 4,000 fake modules.


00:18:35.360 --> 00:18:37.640
And these are basically the same,


00:18:37.640 --> 00:18:39.500
I don't know if like one's rounding up or whatever,


00:18:39.500 --> 00:18:42.560
but, or one's counting multiple incidents.


00:18:42.560 --> 00:18:45.760
But the idea is there's this form of type squatting


00:18:45.760 --> 00:18:47.600
that's pretty sketchy.


00:18:47.600 --> 00:18:51.780
So we've covered this before where if you have,


00:18:51.780 --> 00:18:55.680
maybe I want to use the audio library, asteroid singular,


00:18:55.680 --> 00:19:01.220
but then somebody puts asteroids plural, that is a virus,


00:19:01.220 --> 00:19:03.340
And it could just as well have exactly the same code


00:19:03.340 --> 00:19:04.640
plus the virus.


00:19:04.640 --> 00:19:05.700
So it looks like it works.


00:19:05.700 --> 00:19:08.660
You wouldn't even know that it's not working, right?


00:19:08.660 --> 00:19:10.020
And that's quite a problem.


00:19:10.020 --> 00:19:13.420
But here the highlight is, what's it called?


00:19:13.420 --> 00:19:17.500
Like, I think one thing was calling it Evil Twin.


00:19:17.500 --> 00:19:22.500
Another, this is a research by Alex Bearson.


00:19:22.500 --> 00:19:25.860
And basically there's a lot of people


00:19:25.860 --> 00:19:30.860
who are using private package repositories, right?


00:19:30.860 --> 00:19:36.860
right? Like DevPi and things like that, artifactory, where you have a local one, but if you ask for


00:19:36.860 --> 00:19:41.180
something public, you can just ask your local one and the local one will go out and ask the public


00:19:41.180 --> 00:19:47.180
one. So as you were handing that Calvin, the problem is, what if I just have like data layer,


00:19:47.180 --> 00:19:52.860
or ecommerce, or like some random thing that might be an internal package name?


00:19:52.860 --> 00:19:59.260
Maybe if it's what I think the real problem was, they were saying, if you don't secure your server,


00:19:59.260 --> 00:20:06.860
right, you just post a higher version on the public one than on the local one. And it'll


00:20:06.860 --> 00:20:10.500
go, "Oh, well, there's a newer one over there. I better get that." And we'll just go grab


00:20:10.500 --> 00:20:11.500
the virus.


00:20:11.500 --> 00:20:15.260
I'm also surprised that folks aren't pinning the versions of their internal packages as


00:20:15.260 --> 00:20:22.180
well because this would satisfy solving that problem is if you had, like we use pip-tools,


00:20:22.180 --> 00:20:28.380
pip compile to make sure we got hashes and versions for every dependent package. But


00:20:28.380 --> 00:20:31.380
But yeah, if you didn't do that, you were absolutely susceptible to this.


00:20:31.380 --> 00:20:35.000
Yeah. So just people check this out.


00:20:35.000 --> 00:20:37.640
It's it looks a little scary.


00:20:37.640 --> 00:20:41.760
I you guys you do tell me if you think I'm crazy.


00:20:41.760 --> 00:20:45.640
I'm getting to the point where I'm really freaked out about like these kinds of things


00:20:45.640 --> 00:20:48.900
and especially, you know, people send us stuff like, oh, check this out.


00:20:48.900 --> 00:20:49.820
Here you go.


00:20:49.820 --> 00:20:53.240
Like, I'm not pip installing those things locally and trying them.


00:20:53.240 --> 00:20:54.980
No way. Right.


00:20:54.980 --> 00:20:57.280
I'm going to install them in some isolated environment.


00:20:58.160 --> 00:21:01.840
One thing I've been thinking about doing is setting up my own DevPi server,


00:21:01.840 --> 00:21:06.080
which is exactly the problem sort of that we're talking about.


00:21:06.080 --> 00:21:07.520
So that doesn't necessarily solve it.


00:21:07.520 --> 00:21:11.320
But what you can get with your DevPi server is you can get DevPi constrained,


00:21:11.320 --> 00:21:14.800
which will let you not blacklist stuff or exclude stuff,


00:21:14.800 --> 00:21:16.280
but you have to whitelist things.


00:21:16.280 --> 00:21:18.520
So you're like, "All right, I'm going to try to install, set up this project.


00:21:18.520 --> 00:21:20.320
And when it tells me I need these things and they're failing,


00:21:20.320 --> 00:21:22.480
I'll make sure they're good.


00:21:22.480 --> 00:21:23.400
Make sure they're used a lot.


00:21:23.400 --> 00:21:24.800
I'll put them in the whitelist.


00:21:24.800 --> 00:21:28.680
And then I'll be happy to just pip install versions, no versions, whatever.


00:21:28.680 --> 00:21:32.980
Right. But but sort of being more protective about this.


00:21:32.980 --> 00:21:36.180
I don't know. Maybe I'm just paranoid, but this stuff is it's creeping me out.


00:21:36.180 --> 00:21:40.780
I think I'm still just having it.


00:21:40.780 --> 00:21:42.900
Let me I'm still sinking in.


00:21:42.900 --> 00:21:45.040
I'm not sure how I react to it.


00:21:45.040 --> 00:21:47.780
Yeah. My reaction is I think there's still more infrastructure


00:21:47.780 --> 00:21:49.940
security wise that has to happen in the community.


00:21:49.940 --> 00:21:53.200
And there's there's efforts to do signed packages or support


00:21:53.200 --> 00:21:56.560
in the latest version of pip for signed packages.


00:21:56.560 --> 00:21:58.880
And there's also some good hygiene behaviors.


00:21:58.880 --> 00:22:00.720
But it's true, if you wanted to just try out a package


00:22:00.720 --> 00:22:03.200
and you just did pip install from your command line,


00:22:03.200 --> 00:22:06.160
you're typically not gonna specify a specific version


00:22:06.160 --> 00:22:07.680
and you're gonna get whatever just comes off


00:22:07.680 --> 00:22:09.140
of a PyPi with it.


00:22:09.140 --> 00:22:12.960
Yeah, we've gone around and around about it internally


00:22:12.960 --> 00:22:15.360
as well, talking about this because we wanna make sure


00:22:15.360 --> 00:22:18.120
we're not susceptible to this kind of an attack.


00:22:18.120 --> 00:22:20.880
And I think good practices like the pip-tools,


00:22:20.880 --> 00:22:27.840
using that and having pin versions has pretty much given us a comfort level with we're pretty safe.


00:22:27.840 --> 00:22:33.680
I mean, no one's 100% safe. That doesn't exist. But we're feeling pretty good because of the practices.


00:22:33.680 --> 00:22:39.440
Yeah, yeah, I know that sounds good. I mean, there's only so much you can do. But layers,


00:22:39.440 --> 00:22:44.400
layers are good, right? Layers are good. Anyway, this if you are running, I want to highlight this,


00:22:44.400 --> 00:22:48.480
the ultimate problem highlighted here is that if you have a private PyPI server,


00:22:49.600 --> 00:22:54.360
that there were ways to typosquat on your internal names,


00:22:54.360 --> 00:22:55.640
not on the public names.


00:22:55.640 --> 00:22:57.600
And there's no way for the public stuff to go,


00:22:57.600 --> 00:22:58.880
well, you can't have that


00:22:58.880 --> 00:23:00.040
'cause it looks too close to this, right?


00:23:00.040 --> 00:23:02.200
It might not exist publicly.


00:23:02.200 --> 00:23:04.800
So just be really careful about the versions,


00:23:04.800 --> 00:23:07.280
be really careful about like whitelisting things


00:23:07.280 --> 00:23:09.280
if you're doing your own private PyPI.


00:23:09.280 --> 00:23:10.640
- And it's important to also note,


00:23:10.640 --> 00:23:12.400
this is not a Python specific problem.


00:23:12.400 --> 00:23:14.360
So I think some folks may have blown it up a portion,


00:23:14.360 --> 00:23:17.640
but like other packaging distribution tooling


00:23:17.640 --> 00:23:22.920
have some similar problems. Yeah. And I just saw a message on, I think it was on Twitter or somewhere.


00:23:22.920 --> 00:23:28.920
Yeah. This, I mean, obviously npm has this problem. Ruby gems, all these places, NuGet, whatnot.


00:23:28.920 --> 00:23:34.440
Somebody who was involved in like diagnosing and solving these problems was like, please


00:23:34.440 --> 00:23:39.480
don't go post another 4,000 packages to prove your point. Just, we are already aware,


00:23:39.480 --> 00:23:45.560
just send us a message. You're causing a lot of work that is like distracting us from addressing


00:23:45.560 --> 00:23:48.320
So we don't need more examples.


00:23:48.320 --> 00:23:50.960
We need just maybe a notification.


00:23:50.960 --> 00:23:53.120
- Yeah, I guess one of the other things


00:23:53.120 --> 00:23:56.720
is that it is typosquatting.


00:23:56.720 --> 00:23:59.280
So we, in our organization,


00:23:59.280 --> 00:24:01.000
we try to minimize individuals


00:24:01.000 --> 00:24:03.320
having to pip install anything, really.


00:24:03.320 --> 00:24:07.960
We have, all of our projects have requirements files


00:24:07.960 --> 00:24:09.280
with pinned versions.


00:24:09.280 --> 00:24:12.520
So they're not gonna type the name of anything.


00:24:12.520 --> 00:24:15.120
It's gonna have to be in a requirements file first.


00:24:15.120 --> 00:24:20.880
first. So, yeah. Yeah. Alright. Well, check out the articles.


00:24:20.880 --> 00:24:24.640
There's more details in in both of them. Brian, what you got


00:24:24.640 --> 00:24:30.720
for us? Uh my turn again. Okay, cool. Um I want to I wanted to


00:24:30.720 --> 00:24:35.520
talk about uh something new uh adventure tech space adventure


00:24:35.520 --> 00:24:39.760
games. Have you heard of these? I love I used to play. I used to


00:24:39.760 --> 00:24:43.520
play Muds when I was quite younger. Uh those were so fun.


00:24:43.520 --> 00:24:46.440
They weren't so magical, even though they were just text.


00:24:46.440 --> 00:24:48.960
>>So I actually never got into this,


00:24:48.960 --> 00:24:53.480
but I had entered adventure games--


00:24:53.480 --> 00:24:54.640
what was it called?


00:24:54.640 --> 00:25:00.040
The Dungeons of Dagorath was a game that I had on the TRS-80.


00:25:00.040 --> 00:25:04.200
And it wasn't text-based, but the graphics were just lines.


00:25:04.200 --> 00:25:08.640
So you would go through a cave and stuff like that.


00:25:08.640 --> 00:25:11.120
But anyway, a little bit before that--


00:25:11.120 --> 00:25:18.680
we're talking in early 70s so 75 to 77 was a game called adventure and then


00:25:18.680 --> 00:25:24.680
there are colossal cave adventure so you can play colossal cave adventure because


00:25:24.680 --> 00:25:30.640
Brandon Rhodes has Python adventure and this is just awesome I played this the


00:25:30.640 --> 00:25:36.200
other day it's so well I don't know so fun maybe like overselling it but it's


00:25:36.200 --> 00:25:37.940
It's kind of neat.


00:25:37.940 --> 00:25:44.080
It's a faithful port of the adventure game to Python 3 from the original 1977 Fortran


00:25:44.080 --> 00:25:45.080
code.


00:25:45.080 --> 00:25:46.080
>> Whoa.


00:25:46.080 --> 00:25:47.080
>> It sounds awesome.


00:25:47.080 --> 00:25:53.200
If I get distracted, it's because I've actually pip installed this and I'm playing it right


00:25:53.200 --> 00:25:54.200
now.


00:25:54.200 --> 00:25:57.440
>> It lets you explore a colossal cave where others have found fortunes and treasure and


00:25:57.440 --> 00:26:04.480
gold, though it is rumored that some who enter are never seen from again, like maybe Calvin.


00:26:04.480 --> 00:26:07.520
One of the things that I loved is I played in both modes.


00:26:07.520 --> 00:26:10.160
There's two modes you can play.


00:26:10.160 --> 00:26:13.760
In a Python console, you can just run it.


00:26:13.760 --> 00:26:15.880
But you can also--


00:26:15.880 --> 00:26:18.600
I'm going to show for the people watching


00:26:18.600 --> 00:26:20.360
what it looks like.


00:26:20.360 --> 00:26:23.360
You import Adventure, and then you say Adventure.play.


00:26:23.360 --> 00:26:25.840
And it gives you instructions, and you


00:26:25.840 --> 00:26:29.120
have to type things like east, west, get lamp,


00:26:29.120 --> 00:26:30.520
things like that.


00:26:30.520 --> 00:26:33.160
Oh, it's even function call style.


00:26:33.160 --> 00:26:34.640
- Well, it's function call style


00:26:34.640 --> 00:26:37.400
if you do the import on the REPL.


00:26:37.400 --> 00:26:38.640
- I see, okay.


00:26:38.640 --> 00:26:41.200
- If you go through the--


00:26:41.200 --> 00:26:42.840
- Oh, there's traditional mode, okay, got it.


00:26:42.840 --> 00:26:46.920
- The traditional mode is you do Python-M adventure,


00:26:46.920 --> 00:26:48.760
and then it's traditional mode.


00:26:48.760 --> 00:26:52.240
You say get lamp with a space between the get and the lamp.


00:26:52.240 --> 00:26:53.320
And that's how I played it.


00:26:53.320 --> 00:26:56.480
But the fun part about this, the traditional mode,


00:26:56.480 --> 00:26:58.240
it's a 1200 baud.


00:26:58.240 --> 00:27:01.960
So you have to wait for this to type its message to you.


00:27:02.760 --> 00:27:04.840
- You may have to explain that to some of our listeners.


00:27:04.840 --> 00:27:07.260
(both laughing)


00:27:07.260 --> 00:27:09.260
- I don't know if I can, it's slow.


00:27:09.260 --> 00:27:12.440
So it sort of ticker tapes out the message to you


00:27:12.440 --> 00:27:13.280
and you're waiting for it.


00:27:13.280 --> 00:27:15.520
- Yeah, wow, wow, that's impressive.


00:27:15.520 --> 00:27:18.720
I used to be able to identify by sound


00:27:18.720 --> 00:27:21.440
the speed of the connection I would get.


00:27:21.440 --> 00:27:23.740
I could tell you is that 9,600,


00:27:23.740 --> 00:27:27.240
is it like 32, whatever, or is it 56?


00:27:27.240 --> 00:27:29.360
- And whether the error correcting kicked in or not.


00:27:29.360 --> 00:27:30.660
- Yes, exactly, you hear it.


00:27:30.660 --> 00:27:32.300
(imitates beeping)


00:27:32.300 --> 00:27:34.900
But I don't think I even remember what that sounded like.


00:27:34.900 --> 00:27:36.660
That was some slow business.


00:27:36.660 --> 00:27:38.420
- One of the things, so, okay,


00:27:38.420 --> 00:27:42.400
so a little bit tie into my own personal nerdiness.


00:27:42.400 --> 00:27:46.020
I was curious how this related to Zork.


00:27:46.020 --> 00:27:49.700
So Zork, I never played either.


00:27:49.700 --> 00:27:51.940
It was a little bit after Adventure,


00:27:51.940 --> 00:27:56.420
but there was a TV show called Chuck that I really liked.


00:27:56.420 --> 00:27:59.940
And one of the premises is this Chuck and his buddy


00:27:59.940 --> 00:28:03.380
used to play this game, and he met this other guy by both of


00:28:03.380 --> 00:28:04.980
them being Zork nerds.


00:28:04.980 --> 00:28:07.860
And they did their own port of Zork.


00:28:07.860 --> 00:28:10.260
And I'm like, is that a made up thing or real?


00:28:10.260 --> 00:28:11.900
And apparently it is real.


00:28:11.900 --> 00:28:18.300
Zork was a follow on to Adventure from '77 to '79.


00:28:18.300 --> 00:28:20.860
So anyway, so I'm going to ask Brandon.


00:28:20.860 --> 00:28:23.820
So Brandon, can we get a port of Zork also for Python?


00:28:23.820 --> 00:28:25.060
That would be great.


00:28:25.060 --> 00:28:27.420
[LAUGHTER]


00:28:27.420 --> 00:28:29.200
Then we'll get our little IoT devices


00:28:29.200 --> 00:28:31.420
that we can play these adventure games on,


00:28:31.420 --> 00:28:34.040
like a little Nintendo Switch, but super old school,


00:28:34.040 --> 00:28:35.680
like low bod rate, ought to be great.


00:28:35.680 --> 00:28:37.400
- Oh, I want this totally for my Oculus Quest


00:28:37.400 --> 00:28:40.160
so I can do a text adventure in full VR.


00:28:40.160 --> 00:28:42.080
(laughing)


00:28:42.080 --> 00:28:44.200
- Well, the 12 on a bod,


00:28:44.200 --> 00:28:47.120
the bod slow down thing is entertaining


00:28:47.120 --> 00:28:48.960
for about 10 seconds.


00:28:48.960 --> 00:28:51.560
And then I'm like, can I get faster now?


00:28:51.560 --> 00:28:52.980
So, anyway.


00:28:52.980 --> 00:28:54.200
- Yeah, you had the true retro though.


00:28:54.200 --> 00:28:55.040
That was cool.


00:28:55.040 --> 00:28:56.200
Very nice. - That's cool.


00:28:56.200 --> 00:28:58.440
(laughing)


00:28:58.440 --> 00:28:59.280
- Awesome.


00:28:59.280 --> 00:29:03.600
- All right, so for those of you


00:29:03.600 --> 00:29:05.140
who are Django nuts in the audience,


00:29:05.140 --> 00:29:08.320
there is a new long-term support release coming up


00:29:08.320 --> 00:29:10.780
for Django 3.2.


00:29:10.780 --> 00:29:13.140
- That's a big deal because long-term support ones


00:29:13.140 --> 00:29:14.120
are the ones you want.


00:29:14.120 --> 00:29:16.460
- Oh my gosh, and Django's community is really good


00:29:16.460 --> 00:29:17.740
about that long-term support.


00:29:17.740 --> 00:29:19.800
I mean, and they have a very good security policy


00:29:19.800 --> 00:29:21.560
and release revision policy.


00:29:21.560 --> 00:29:23.820
It's very clear, very well documented.


00:29:23.820 --> 00:29:24.940
So the next one coming up,


00:29:24.940 --> 00:29:26.420
which is gonna be released here in April,


00:29:26.420 --> 00:29:28.140
is gonna be 3.2.


00:29:28.140 --> 00:29:30.380
This post specifically that I linked to


00:29:30.380 --> 00:29:33.020
is actually an overview of some highlights


00:29:33.020 --> 00:29:34.900
of interesting features that you may not have noticed.


00:29:34.900 --> 00:29:38.060
You can go read the main Django 3.2 release page


00:29:38.060 --> 00:29:39.820
and see kind of the overall new features


00:29:39.820 --> 00:29:41.380
that are gonna be coming in.


00:29:41.380 --> 00:29:43.060
But this post specifically covered some things


00:29:43.060 --> 00:29:45.000
that I thought were also interesting.


00:29:45.000 --> 00:29:48.840
A lot of them are performance and kind of protections


00:29:48.840 --> 00:29:51.700
against hurting yourself when you're programming.


00:29:51.700 --> 00:29:54.300
So things like, excuse me,


00:29:54.300 --> 00:29:56.780
covering indexes for Postgres.


00:29:56.780 --> 00:29:59.900
So you can actually avoid full table scans


00:29:59.900 --> 00:30:02.620
and do index scans and Postgres for--


00:30:02.620 --> 00:30:03.740
- Indexes are magic.


00:30:03.740 --> 00:30:06.700
- Yeah, and so this is enabling even more


00:30:06.700 --> 00:30:09.980
of the nice magic of those indexes inside of Django.


00:30:09.980 --> 00:30:14.300
It's nice it's making it into a LTS release.


00:30:14.300 --> 00:30:15.120
One second.


00:30:15.120 --> 00:30:17.900
- Yeah, I think it's really cool


00:30:17.900 --> 00:30:20.980
that it's the LTS release, 3.2 is coming out.


00:30:20.980 --> 00:30:23.220
I think there's also some async and await stuff in here


00:30:23.220 --> 00:30:25.300
coming along, which is pretty exciting.


00:30:25.300 --> 00:30:30.440
I know that one of the areas that's still pending to get really the async and await stuff properly,


00:30:30.440 --> 00:30:33.560
like full stack is the ORM stuff.


00:30:33.560 --> 00:30:36.640
Yeah, because if you wait on the database,


00:30:36.640 --> 00:30:39.060
that's the thing you need async for more than anything else.


00:30:39.060 --> 00:30:42.720
Yeah, and that's kind of one of the notable missing items for me in 3.2.


00:30:42.720 --> 00:30:48.400
I mean, the team is doing an amazing job of implementing all the async features for Django.


00:30:48.400 --> 00:30:53.440
I mean, 3.0, 3.1, you started off with the routing, then you got the views.


00:30:53.440 --> 00:30:56.880
3.2 was supposed to be, I think, the ORM included,


00:30:56.880 --> 00:30:58.880
but maybe just due to the fact that we are talking about


00:30:58.880 --> 00:31:00.880
a long-term support release,


00:31:00.880 --> 00:31:03.680
that was maybe too risky of a feature to get included here.


00:31:03.680 --> 00:31:06.180
But look for that coming soon, like in 3.3 or 3.4,


00:31:06.180 --> 00:31:08.640
for the ORM, which will be a big, big deal.


00:31:08.640 --> 00:31:11.040
The other things that are included in this 3.2 release,


00:31:11.040 --> 00:31:13.040
again, kind of focusing on


00:31:13.040 --> 00:31:15.040
security and safety and performance,


00:31:15.040 --> 00:31:17.440
time zones, it's probably one of the


00:31:17.440 --> 00:31:19.440
two hardest things in programming is


00:31:19.440 --> 00:31:22.440
time zones and character encoding and off-by-one errors.


00:31:22.440 --> 00:31:24.660
So there's gonna be some trunk date stuff in here


00:31:24.660 --> 00:31:28.140
that actually helps you assign a default time zone


00:31:28.140 --> 00:31:29.820
in case you didn't put one.


00:31:29.820 --> 00:31:30.740
There's gonna be some cool stuff


00:31:30.740 --> 00:31:32.500
for people who like unstructured data,


00:31:32.500 --> 00:31:34.260
the JSON object DB functions.


00:31:34.260 --> 00:31:36.120
So you'll actually be able to assign some DB functions


00:31:36.120 --> 00:31:40.900
that can produce JSON mapping type objects


00:31:40.900 --> 00:31:42.100
for key value pairs,


00:31:42.100 --> 00:31:46.020
where you pass in database functions to operate on it.


00:31:46.020 --> 00:31:48.100
There's gonna be some cool stuff around signals.


00:31:48.100 --> 00:31:52.140
There's a SYN robust, which didn't log exceptions,


00:31:52.140 --> 00:31:54.140
but now will, so you don't have to.


00:31:54.140 --> 00:31:56.240
- Are there themes for the admin section?


00:31:56.240 --> 00:31:57.440
Is that coming in this one?


00:31:57.440 --> 00:31:58.880
I know that's something they're working on.


00:31:58.880 --> 00:31:59.900
- I don't know on the themes,


00:31:59.900 --> 00:32:02.040
but I know for the admin section,


00:32:02.040 --> 00:32:03.960
and this is a common thing I've done in the admin,


00:32:03.960 --> 00:32:05.780
is sometimes you wanna put computed fields


00:32:05.780 --> 00:32:09.200
into the admin pages for like your objects.


00:32:09.200 --> 00:32:12.720
There's gonna be a new, what is it?


00:32:12.720 --> 00:32:14.880
There's a new value, not a value expression,


00:32:14.880 --> 00:32:16.320
of the display decorator.


00:32:16.320 --> 00:32:18.120
So you can actually make creating admin fields


00:32:18.120 --> 00:32:18.960
a lot cleaner.


00:32:18.960 --> 00:32:20.840
The kind of syntax for it previously


00:32:20.840 --> 00:32:23.760
was just a little convoluted if you were not used to it.


00:32:23.760 --> 00:32:25.400
And so as a new person, you may not figure out


00:32:25.400 --> 00:32:27.200
how to do it very easily.


00:32:27.200 --> 00:32:28.720
So there's a new decorator that actually makes


00:32:28.720 --> 00:32:30.640
that super, super easy to do.


00:32:30.640 --> 00:32:32.200
There's some other performance things around the database


00:32:32.200 --> 00:32:33.880
with query sets, with aliases.


00:32:33.880 --> 00:32:36.080
So you can actually create reusable aliases


00:32:36.080 --> 00:32:38.000
for things that you're selecting against.


00:32:38.000 --> 00:32:39.200
So you can use them as like filters


00:32:39.200 --> 00:32:41.620
or like kind of combined statements.


00:32:41.620 --> 00:32:43.600
So it doesn't do two sub queries instead of,


00:32:43.600 --> 00:32:45.380
it'll do just one.


00:32:45.380 --> 00:32:47.440
So a lot of cool performance.


00:32:47.440 --> 00:32:49.580
And again, these were kind of the less notable,


00:32:49.580 --> 00:32:51.440
but really kind of important features


00:32:51.440 --> 00:32:53.880
that are coming into Django 3.2.


00:32:53.880 --> 00:32:57.920
Yeah, and next year you can see all the other stuff.


00:32:57.920 --> 00:32:59.840
There's a zillion things coming up in 3.2.


00:32:59.840 --> 00:33:01.360
These are just some of the small ones,


00:33:01.360 --> 00:33:03.320
but there's some of the important ones.


00:33:03.320 --> 00:33:05.760
- That's cool.


00:33:05.760 --> 00:33:07.260
- Yeah, when is this coming out?


00:33:07.260 --> 00:33:10.140
- April, so we should see it next month, very soon.


00:33:10.140 --> 00:33:11.400
- Yeah, awesome.


00:33:11.400 --> 00:33:12.240
Well, that's great.


00:33:12.240 --> 00:33:14.760
If you're into Django, that sounds really like a big deal.


00:33:14.760 --> 00:33:16.080
- It is.


00:33:16.080 --> 00:33:17.720
- It is, it is.


00:33:17.720 --> 00:33:20.700
- All right, Brian, anything else


00:33:20.700 --> 00:33:22.180
that you'd like to throw out?


00:33:22.180 --> 00:33:23.600
Those are all of our items.


00:33:23.600 --> 00:33:25.060
Anything extra?


00:33:25.060 --> 00:33:27.220
- No, I don't have anything extra this week.


00:33:27.220 --> 00:33:28.720
How about you?


00:33:28.720 --> 00:33:32.080
- Oh, I've got a couple of things I would like to touch on.


00:33:32.080 --> 00:33:33.340
I heard some amazing stuff.


00:33:33.340 --> 00:33:38.080
I heard that Python open source stuff is on Mars.


00:33:38.080 --> 00:33:39.740
- Yeah.


00:33:39.740 --> 00:33:43.740
- But what I wanna say is Python is on Mars, question mark.


00:33:43.740 --> 00:33:46.300
Because what I found is if you go look at,


00:33:46.300 --> 00:33:50.020
There's this thing called fprime that NASA open sourced.


00:33:50.020 --> 00:33:51.060
Awesome.


00:33:51.060 --> 00:33:52.460
And if you go over here and you look at it,


00:33:52.460 --> 00:33:54.940
this is the flight control thing


00:33:54.940 --> 00:33:57.660
that is for embedded system flying,


00:33:57.660 --> 00:34:01.040
including that little helicopter, which is pretty awesome.


00:34:01.040 --> 00:34:06.040
It has 16% Python and 44% C++.


00:34:06.040 --> 00:34:09.140
But if you look at the Python bits,


00:34:09.140 --> 00:34:13.200
so much of it seems to be around the,


00:34:13.200 --> 00:34:14.820
like the training pipeline.


00:34:15.820 --> 00:34:18.740
So my theory is, I didn't see any stuff


00:34:18.740 --> 00:34:20.820
in like the real, like running regular bits.


00:34:20.820 --> 00:34:25.820
I'm thinking maybe it's trained with Python locally


00:34:25.820 --> 00:34:27.500
and then the models are put on the helicopter


00:34:27.500 --> 00:34:29.580
and flown with C++.


00:34:29.580 --> 00:34:33.260
If somebody knows for sure that Python is on Mars,


00:34:33.260 --> 00:34:35.360
you know, with details, let me know.


00:34:35.360 --> 00:34:36.200
That'd be awesome.


00:34:36.200 --> 00:34:38.940
But I still think it's cool that Python's involved here.


00:34:38.940 --> 00:34:41.680
Yeah.


00:34:41.680 --> 00:34:43.760
All right, so that's one quick one.


00:34:43.760 --> 00:34:46.160
Number two, just released a new course,


00:34:46.160 --> 00:34:47.920
and this one is a little different.


00:34:47.920 --> 00:34:54.100
So it's full web apps with FastAPI.


00:34:54.100 --> 00:34:56.680
And FastAPI is awesome for building APIs,


00:34:56.680 --> 00:34:59.200
but there's like three or four features of FastAPI


00:34:59.200 --> 00:35:01.300
when put together in the right combination,


00:35:01.300 --> 00:35:04.520
make it sort of a equivalent framework


00:35:04.520 --> 00:35:06.240
to what you would get with Flask.


00:35:06.240 --> 00:35:08.080
So if you're thinking, I would love to use


00:35:08.080 --> 00:35:11.540
this beautiful API with really nice decorators,


00:35:11.540 --> 00:35:14.180
with really nice async support with Pydantic


00:35:14.180 --> 00:35:15.940
and all those awesome things that it has.


00:35:15.940 --> 00:35:18.580
But I wanna build a web app with it.


00:35:18.580 --> 00:35:20.140
Well, I just launched a course on that


00:35:20.140 --> 00:35:20.980
that people can check that out.


00:35:20.980 --> 00:35:21.800
That's really awesome.


00:35:21.800 --> 00:35:24.540
Like basically I've built some APIs with FastAPI


00:35:24.540 --> 00:35:26.620
and I need like four or five more pages


00:35:26.620 --> 00:35:28.340
to round out the app.


00:35:28.340 --> 00:35:32.220
Do I have to have a Django plus FastAPI multi deploy thing?


00:35:32.220 --> 00:35:33.260
Like no, actually.


00:35:33.260 --> 00:35:34.860
And this is all about how do you do that.


00:35:34.860 --> 00:35:36.780
So people can check that out.


00:35:36.780 --> 00:35:37.600
That's fun.


00:35:37.600 --> 00:35:38.440
- Super excited about that.


00:35:38.440 --> 00:35:39.260
That's cool.


00:35:39.260 --> 00:35:40.100
- Yeah, thanks.


00:35:40.100 --> 00:35:46.020
I'm giving away five tickets to PyCon, one a week for five weeks. So if people want to


00:35:46.020 --> 00:35:50.580
win a free ticket to PyCon this year, it's virtual, so you can attend from anywhere.


00:35:50.580 --> 00:35:53.540
There's not the challenge of, well, I got the ticket, but I need the thousand dollars for the


00:35:53.540 --> 00:35:58.020
hotel, right? Like that's not a problem this year. So I think it's really cool. Decided to run a


00:35:58.020 --> 00:36:03.380
thing on a contest on that. The link is in the show notes. We got a couple of questions saying,


00:36:03.380 --> 00:36:07.300
"Hey, we heard about this live stream because we're listening to the podcast. How do we get


00:36:07.300 --> 00:36:09.900
- Yeah, we get our listeners who come in


00:36:09.900 --> 00:36:11.740
and give us comments and all this stuff is great.


00:36:11.740 --> 00:36:14.740
So if you just go to pythonbytes.fm/youtube,


00:36:14.740 --> 00:36:16.860
right at the top, there'll be upcoming live streams


00:36:16.860 --> 00:36:19.380
and you can say, click the button to remind me of it


00:36:19.380 --> 00:36:20.220
and so on.


00:36:20.220 --> 00:36:21.740
So that's how you do that.


00:36:21.740 --> 00:36:27.020
Last thing I was on, I got a chance to talk


00:36:27.020 --> 00:36:29.020
to the medical community


00:36:29.020 --> 00:36:30.780
and the medical research community


00:36:30.780 --> 00:36:32.740
and I was on a call with a doctor


00:36:32.740 --> 00:36:34.380
and he was talking about a patient


00:36:34.380 --> 00:36:36.180
who was in a critical condition.


00:36:36.180 --> 00:36:41.700
research community around Python over on this podcast called the Finding Genius podcast.


00:36:41.700 --> 00:36:46.820
And it was just a lot of fun to speak about the advantages of Python for like medical researchers


00:36:46.820 --> 00:36:51.540
and folks like that. So I'll link to that podcast as well if people are interested.


00:36:51.540 --> 00:36:58.100
Yeah, Calvin, anything else you want to throw out? I know you, I do. I wore your, I wore my shirt.


00:36:58.100 --> 00:37:02.980
I know you're fully outfitted. So I've actually got two things. One before I get to Python web


00:37:02.980 --> 00:37:08.740
conference, the DjangoCon Europe 2021 call for papers is open until April 1st. So if you're


00:37:08.740 --> 00:37:13.780
interested in talking at DjangoCon Europe, it'll be a pretty worldwide conference. It was last year,


00:37:13.780 --> 00:37:17.460
it was a lot of fun. We actually did it on the same platform as we did the Python web conference,


00:37:17.460 --> 00:37:22.740
which is the other thing I wanted to mention in the extras. So Python web conf 2021 is coming up


00:37:22.740 --> 00:37:28.660
in about, well, it'll be a week or so after you probably hear this. March 22nd through the 26th,


00:37:29.300 --> 00:37:32.340
We've got an awesome lineup this year again, even better than last year


00:37:32.340 --> 00:37:38.980
Michael's obviously back and and be speaking at the conference. We've got about 60 speakers almost 20 women


00:37:38.980 --> 00:37:44.980
there's 43 new speakers this year. It's like five. Yeah, it's like four or five days or something. It's a big conference


00:37:44.980 --> 00:37:46.900
Yeah, it's it's five days where we're doing half days


00:37:46.900 --> 00:37:52.340
So you don't have to consume your whole day with uh being in a virtual conference because we understand that that is just hard


00:37:52.340 --> 00:37:54.180
I think we're all adjusting to


00:37:54.180 --> 00:37:58.980
What virtual conferences really kind of should be so this is a new experiment which got four tracks


00:37:59.060 --> 00:38:02.340
So there's AppDev, PyData, it's an official PyData track.


00:38:02.340 --> 00:38:04.340
There's a Cloud track and a Culture track.


00:38:04.340 --> 00:38:06.300
So if there's nothing you're interested in,


00:38:06.300 --> 00:38:09.020
I would be hard pressed to believe that.


00:38:09.020 --> 00:38:11.340
There are tickets for 199 for professional,


00:38:11.340 --> 00:38:12.460
99 for student.


00:38:12.460 --> 00:38:15.260
And we do have our grant program back again this year.


00:38:15.260 --> 00:38:19.260
So we are doing, offering up grants for those who,


00:38:19.260 --> 00:38:22.820
we want anybody who wants to truly attend to be able to,


00:38:22.820 --> 00:38:25.580
no matter what the financial piece may be.


00:38:25.580 --> 00:38:27.780
So check out the grant program


00:38:27.780 --> 00:38:29.620
For everyone who buys tickets, we offer up grants


00:38:29.620 --> 00:38:30.980
for those who can't afford tickets.


00:38:30.980 --> 00:38:32.300
And I'm really excited about that.


00:38:32.300 --> 00:38:34.500
You can check that out at pythonwebconf.com.


00:38:34.500 --> 00:38:37.020
Yeah, it's gonna be a ton of fun.


00:38:37.020 --> 00:38:38.460
It was a lot of fun last year.


00:38:38.460 --> 00:38:40.460
We got a bunch of social events planned


00:38:40.460 --> 00:38:41.980
and some really awesome sponsors.


00:38:41.980 --> 00:38:43.860
And I'm just super excited about being able


00:38:43.860 --> 00:38:45.780
to produce something like this for the Python community.


00:38:45.780 --> 00:38:47.900
I feel like the web is an area


00:38:47.900 --> 00:38:49.580
that doesn't always get the attention it should


00:38:49.580 --> 00:38:50.700
in some other conferences,


00:38:50.700 --> 00:38:53.140
and we're hopefully fulfilling that.


00:38:53.140 --> 00:38:53.980
- Yeah, super cool.


00:38:53.980 --> 00:38:54.980
It was a good conference last year,


00:38:54.980 --> 00:38:57.180
so I'm looking forward to being part of this year.


00:38:57.180 --> 00:38:58.120
- Yeah.


00:38:58.120 --> 00:39:00.080
- Brian and I were just on a virtual conference


00:39:00.080 --> 00:39:03.180
at PyCascades, which was a lot of cool fun.


00:39:03.180 --> 00:39:05.760
We were on that panel about podcasting.


00:39:05.760 --> 00:39:06.920
- Yeah, that was great.


00:39:06.920 --> 00:39:09.820
You all might know a thing or two about that.


00:39:09.820 --> 00:39:11.380
- We've done it once or twice.


00:39:11.380 --> 00:39:15.020
Not sure I would laugh at it, but maybe a joke.


00:39:15.020 --> 00:39:15.860
We could laugh at a joke.


00:39:15.860 --> 00:39:16.680
What do you guys think?


00:39:16.680 --> 00:39:17.640
- Yeah. - Yeah.


00:39:17.640 --> 00:39:18.480
- All right.


00:39:18.480 --> 00:39:21.600
So I know we got like two rounds of jokes,


00:39:21.600 --> 00:39:26.640
but let's do another round of these comments.


00:39:26.640 --> 00:39:27.840
(laughing)


00:39:27.840 --> 00:39:29.080
- I'm already laughing.


00:39:29.080 --> 00:39:30.240
- I know, they're so good.


00:39:30.240 --> 00:39:34.480
So I'll do the first one, Brian, you do the next one,


00:39:34.480 --> 00:39:35.360
Calvin, you do the next one.


00:39:35.360 --> 00:39:38.120
We'll just kind of, we got five or six, something like that.


00:39:38.120 --> 00:39:40.360
So it's important to comment your code.


00:39:40.360 --> 00:39:43.280
There's this code, I believe it's Java,


00:39:43.280 --> 00:39:44.920
and it is part of a class.


00:39:44.920 --> 00:39:48.680
It says private logger, capital L class logger,


00:39:48.680 --> 00:39:49.600
variable name logger,


00:39:49.600 --> 00:39:53.500
equals logger class factory method dot get logger.


00:39:53.500 --> 00:39:56.360
So private logger logger equals logger dot get logger.


00:39:56.360 --> 00:39:57.880
What does the comment say?


00:39:57.880 --> 00:39:58.720
- Logger.


00:39:58.720 --> 00:40:01.320
- Quote, yeah, it's just a logger.


00:40:01.320 --> 00:40:03.520
Fantastic, you passed your code review.


00:40:03.520 --> 00:40:05.040
Yes, I guess you have comments.


00:40:05.040 --> 00:40:06.040
- Yeah.


00:40:06.040 --> 00:40:07.720
- All right, Brian, what's the next one?


00:40:07.720 --> 00:40:09.680
- Next one looks like C++ comments,


00:40:09.680 --> 00:40:12.800
but comment this block that says,


00:40:12.800 --> 00:40:16.840
"This is black magic from some stack overflow link.


00:40:16.840 --> 00:40:18.760
Don't play with magic, it can bite."


00:40:18.760 --> 00:40:21.600
(all laughing)


00:40:21.600 --> 00:40:24.440
- All right, Calvin, what do we got next?


00:40:24.440 --> 00:40:27.380
This one obviously is a Python comment in the code.


00:40:27.380 --> 00:40:29.600
It says, "For the sins I am about to commit,


00:40:29.600 --> 00:40:31.500
"may Guido van Rossem forgive me."


00:40:31.500 --> 00:40:33.920
- Yes.


00:40:33.920 --> 00:40:34.760
- I love it.


00:40:34.760 --> 00:40:36.000
- Which I would be hard pressed to know


00:40:36.000 --> 00:40:36.940
what they're getting ready to commit


00:40:36.940 --> 00:40:38.480
if they read this in Python.


00:40:38.480 --> 00:40:40.280
They really should know the guidance already.


00:40:40.280 --> 00:40:41.400
- Yeah.


00:40:41.400 --> 00:40:42.520
- Yeah, yeah.


00:40:42.520 --> 00:40:44.880
Maybe they put a semicolon in there, I don't know.


00:40:44.880 --> 00:40:52.340
The next one is, "Remove this if you want to be fired."


00:40:52.340 --> 00:40:54.640
(laughing)


00:40:54.640 --> 00:40:56.740
- Remove the comment or the code below it?


00:40:56.740 --> 00:40:57.580
We don't know.


00:40:57.580 --> 00:40:58.420
- Yeah.


00:40:58.420 --> 00:40:59.240
- We don't know this.


00:40:59.240 --> 00:41:00.440
- We don't know.


00:41:00.440 --> 00:41:05.440
- Next is a try except block or a catching exception


00:41:05.440 --> 00:41:07.160
with just a comment and it says,


00:41:07.160 --> 00:41:08.520
Houston, we have a problem.


00:41:08.520 --> 00:41:10.880
There's no code there though.


00:41:10.880 --> 00:41:12.600
So you're just, yes, we do have a problem.


00:41:12.600 --> 00:41:14.160
You're just catching a raw exception.


00:41:14.160 --> 00:41:15.000
Don't do that.


00:41:15.000 --> 00:41:15.840
- Exactly, exactly.


00:41:15.840 --> 00:41:18.840
All right, what's the last one?


00:41:18.840 --> 00:41:23.840
The last one here is a definition of int get random number.


00:41:23.840 --> 00:41:28.200
And the body of the function is return four.


00:41:28.200 --> 00:41:29.600
And the comment says,


00:41:29.600 --> 00:41:32.900
chosen by fair dice roll, guaranteed to be random.


00:41:32.900 --> 00:41:35.680
(all laughing)


00:41:35.680 --> 00:41:36.520
- Maybe once.


00:41:36.520 --> 00:41:37.840
- Was this a real code someplace?


00:41:37.840 --> 00:41:38.920
I mean, come on.


00:41:38.920 --> 00:41:40.840
- Yeah, there's all sorts of good ones here.


00:41:40.840 --> 00:41:42.480
Yeah, they're beautiful.


00:41:42.480 --> 00:41:44.840
One of them that's not on the list,


00:41:44.840 --> 00:41:47.320
the comment is just, I need to find a better job.


00:41:47.320 --> 00:41:49.680
(laughing)


00:41:49.680 --> 00:41:51.320
- All right, one more.


00:41:51.320 --> 00:41:52.520
Who put this one in here?


00:41:52.520 --> 00:41:54.840
- I put that in there.


00:41:54.840 --> 00:41:56.560
- I like this one.


00:41:56.560 --> 00:41:58.480
- I'm kind of a card nut.


00:41:58.480 --> 00:42:00.640
So if you kind of exactly like hover over


00:42:00.640 --> 00:42:02.440
just the first half of the picture,


00:42:02.440 --> 00:42:05.640
you see a guy in a Ferrari, like waving and says,


00:42:05.640 --> 00:42:07.320
- Yeah, maybe roll it in the Ferrari.


00:42:07.320 --> 00:42:09.720
- It says using Linux and then dot, dot, dot


00:42:09.720 --> 00:42:11.360
in Windows with WSL.


00:42:11.360 --> 00:42:12.540
And if you scroll down,


00:42:12.540 --> 00:42:15.320
you see that the Ferrari is actually on a tow truck,


00:42:15.320 --> 00:42:18.160
flatbed being driven someplace.


00:42:18.160 --> 00:42:20.440
- And the guy's in it.


00:42:20.440 --> 00:42:21.760
Yeah. Like he's driving.


00:42:21.760 --> 00:42:26.000
Very cool. Very cool.


00:42:26.000 --> 00:42:26.840
- That's funny.


00:42:26.840 --> 00:42:30.880
- Glad ZDax that you guys like the jokes out there


00:42:30.880 --> 00:42:33.240
and Dean as well.


00:42:33.240 --> 00:42:35.680
- Yeah. And just, I mean, I commented in the,


00:42:35.680 --> 00:42:38.880
in the chat that you can increase your odds at winning the,


00:42:38.880 --> 00:42:41.400
the PyCon tickets by laughing at the jokes.


00:42:41.400 --> 00:42:42.240
- Yeah, absolutely.


00:42:42.240 --> 00:42:44.760
We'll put you in the prize if you laugh last for sure.


00:42:44.760 --> 00:42:46.440
That's how it works.


00:42:46.440 --> 00:42:48.800
- It's like the dad jokes of programming here.


00:42:48.800 --> 00:42:50.680
- Oh yeah. - Of course, yeah.


00:42:50.680 --> 00:42:52.160
- That's like half our show.


00:42:52.160 --> 00:42:53.160
- And we all qualify.


00:42:53.160 --> 00:42:56.320
- For sure, for sure.


00:42:56.320 --> 00:42:59.160
All right, well, Brian, thanks for being here as always.


00:42:59.160 --> 00:43:01.000
And Calvin, thanks for joining us.


00:43:01.000 --> 00:43:02.440
- My pleasure, I really enjoyed it.


00:43:02.440 --> 00:43:03.400
- Yeah, good luck on your conference


00:43:03.400 --> 00:43:05.400
and catch you next time. - Thank you.


00:43:05.400 --> 00:43:06.720
- Yep, see y'all later.


00:43:06.720 --> 00:43:08.280
Thanks for joining the live stream.


00:43:08.280 --> 00:43:10.440
(kissing)

