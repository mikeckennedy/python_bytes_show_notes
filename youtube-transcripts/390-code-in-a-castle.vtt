WEBVTT

00:00:00.001 --> 00:00:02.280
>> Hey, Brian.

00:00:02.280 --> 00:00:02.800
>> Hey.

00:00:02.800 --> 00:00:06.040
>> Hello, everyone. Are you ready to kick this thing off?

00:00:06.040 --> 00:00:07.760
>> I am. I'm excited.

00:00:07.760 --> 00:00:10.840
>> I am too. Very, very good.

00:00:10.840 --> 00:00:15.080
So yeah, everyone watching the live stream or the replay of the live stream,

00:00:15.080 --> 00:00:18.720
thanks for being here. With that, let's get going.

00:00:18.720 --> 00:00:21.560
Hello and welcome to Python Bytes,

00:00:21.560 --> 00:00:25.120
where we deliver Python news and headlines directly to your earbuds.

00:00:25.120 --> 00:00:31.880
This is episode 390, recorded July 2nd, 2024.

00:00:31.880 --> 00:00:33.280
I'm Michael Kennedy.

00:00:33.280 --> 00:00:35.120
>> I'm Brian Okken.

00:00:35.120 --> 00:00:39.120
>> This episode is brought to you by Scout APM.

00:00:39.120 --> 00:00:41.160
Thank you so much to them for supporting the show.

00:00:41.160 --> 00:00:42.720
We really appreciate them.

00:00:42.720 --> 00:00:45.640
If you want to attend live,

00:00:45.640 --> 00:00:48.240
get your comments in the episode,

00:00:48.240 --> 00:00:51.600
then check out pythonbytes.fm/live,

00:00:51.600 --> 00:00:54.540
usually Tuesday at 10 AM Pacific Time,

00:00:54.540 --> 00:00:57.080
like we're recording right now, Brian.

00:00:57.080 --> 00:01:01.680
Please visit pythonbytes.fm, right on the homepage,

00:01:01.680 --> 00:01:04.520
click on "Newsletter", subscribe to our newsletter.

00:01:04.520 --> 00:01:08.240
We've got lots of interesting information that we share with you.

00:01:08.240 --> 00:01:12.720
We're going to be doing some kind of giveaway that we have yet to determine,

00:01:12.720 --> 00:01:16.440
and soon when we reach maybe a major milestone there.

00:01:16.440 --> 00:01:18.040
So that'll be awesome.

00:01:18.040 --> 00:01:20.280
>> Yeah. It'll be great.

00:01:20.280 --> 00:01:24.040
>> Yeah. With that, Brian, you want to kick us off?

00:01:24.040 --> 00:01:31.560
>> Sure. Well, let's talk about strings for a minute.

00:01:31.560 --> 00:01:37.840
This one is from an article written by Veronica Olson.

00:01:37.840 --> 00:01:41.440
It's an article called Joining Strings in Python,

00:01:41.440 --> 00:01:43.280
A-ha Moment.

00:01:43.280 --> 00:01:50.000
I actually just really enjoyed this story because it tricked me up.

00:01:50.000 --> 00:01:54.160
She says, "I've been writing Python code for 17 years,

00:01:54.160 --> 00:02:00.080
and I learned something new recently from a Mastodon conversation.

00:02:00.080 --> 00:02:01.640
What is the new thing?"

00:02:01.640 --> 00:02:05.560
The idea is around joining strings.

00:02:05.560 --> 00:02:08.200
Let's say you're like,

00:02:08.200 --> 00:02:10.920
and I do this all the time.

00:02:10.920 --> 00:02:12.880
You've got some input from a file,

00:02:12.880 --> 00:02:14.720
and her example is,

00:02:14.720 --> 00:02:16.720
you've got some input from a file,

00:02:16.720 --> 00:02:21.400
and you're going through and just using the regenerator thing.

00:02:21.400 --> 00:02:22.440
So F equals open,

00:02:22.440 --> 00:02:25.200
and you get this thing that you can read with.

00:02:25.200 --> 00:02:30.720
She's taking X for X,

00:02:30.720 --> 00:02:33.960
or I usually put line for line in F,

00:02:33.960 --> 00:02:38.240
and then also doing some logic on it within a generator,

00:02:38.240 --> 00:02:39.960
which is cool.

00:02:39.960 --> 00:02:43.320
Once I learned this, I use it all the time.

00:02:43.320 --> 00:02:47.640
You go through using the file as a generator to pull out lines,

00:02:47.640 --> 00:02:50.040
and then only collect the lines that you care about,

00:02:50.040 --> 00:02:52.720
and then joining it in at the end.

00:02:52.720 --> 00:02:54.840
This discussion really is,

00:02:54.840 --> 00:02:56.400
when you've got a whole bunch of

00:02:56.400 --> 00:02:58.000
line strings that you want to

00:02:58.000 --> 00:03:00.240
concatenate together with new lines or something,

00:03:00.240 --> 00:03:05.720
is you just create a list of them and then join it.

00:03:05.720 --> 00:03:07.920
But if you're using a generator,

00:03:07.920 --> 00:03:11.440
you can use a generator and pass that to join also.

00:03:11.440 --> 00:03:14.600
So the little trick here is

00:03:14.600 --> 00:03:17.720
whether or not you should use a list comprehension.

00:03:17.720 --> 00:03:23.000
So these two methods is you're joining a generator out of

00:03:23.000 --> 00:03:27.600
the file or you use a list comprehension within it.

00:03:27.600 --> 00:03:31.400
The only difference is these little brackets in

00:03:31.400 --> 00:03:36.600
there to create a list comprehension.

00:03:36.600 --> 00:03:42.560
My first reaction is that it really probably doesn't matter,

00:03:42.560 --> 00:03:45.760
but the list comprehension might be,

00:03:45.760 --> 00:03:48.560
I have no idea which one's slower or faster.

00:03:48.560 --> 00:03:49.920
But the odd thing is-

00:03:49.920 --> 00:03:52.160
>> If it's a huge text file, Brian,

00:03:52.160 --> 00:03:54.080
if it's a huge text file,

00:03:54.080 --> 00:03:56.200
it could be a memory.

00:03:56.200 --> 00:03:59.240
If you had a gig of text,

00:03:59.240 --> 00:04:03.620
then you potentially would be loading more than that in memory,

00:04:03.620 --> 00:04:06.440
with the brackets but not with the parentheses.

00:04:06.440 --> 00:04:08.240
>> That's what I thought.

00:04:08.240 --> 00:04:12.120
So she used a sample file

00:04:12.120 --> 00:04:16.200
like the King James Version of the Bible or something.

00:04:16.200 --> 00:04:25.560
Which is 800,000 words long and a ballpark of 3,000 pages.

00:04:25.560 --> 00:04:29.560
Anyway, 200 million words.

00:04:29.560 --> 00:04:34.600
So did a little timing here as to whether or

00:04:34.600 --> 00:04:39.320
not you want to use a generator or list comprehension for this.

00:04:39.320 --> 00:04:41.400
Looking at the memory output,

00:04:41.400 --> 00:04:44.680
so that the memory itself is as expected.

00:04:44.680 --> 00:04:46.760
The generator uses less memory.

00:04:46.760 --> 00:04:48.560
The list comprehension gradually

00:04:48.560 --> 00:04:51.080
grows and you're using more memory.

00:04:51.080 --> 00:04:56.320
So far, it seems like it's doing what we think it might be doing.

00:04:56.320 --> 00:05:02.240
But the weird bit is when we go down and actually time this stuff,

00:05:02.240 --> 00:05:07.080
is that the generator version,

00:05:07.080 --> 00:05:11.760
and if you compare the times for the generator and the list comprehension,

00:05:11.760 --> 00:05:16.280
the generator one is slower by 16 percent.

00:05:16.280 --> 00:05:18.240
Weird, why?

00:05:18.240 --> 00:05:21.600
>> That is weird, especially since the list has to,

00:05:21.600 --> 00:05:23.520
you allocate the list, you fill the list,

00:05:23.520 --> 00:05:25.040
you reallocate the list,

00:05:25.040 --> 00:05:29.040
you copy it over, growing the list over and over and over.

00:05:29.040 --> 00:05:30.880
Although as a list comprehension,

00:05:30.880 --> 00:05:33.320
maybe it doesn't, I don't know.

00:05:33.320 --> 00:05:34.720
Anyway, that's crazy.

00:05:34.720 --> 00:05:39.240
>> Then adding more mystery to the mystery,

00:05:39.240 --> 00:05:41.960
is that instead of join,

00:05:41.960 --> 00:05:44.760
if you use all as the thing that

00:05:44.760 --> 00:05:49.960
you're using across the entire list or generator,

00:05:49.960 --> 00:05:52.000
it's behaving as expected.

00:05:52.000 --> 00:05:55.540
The generator is faster than the comprehension.

00:05:55.540 --> 00:05:58.880
So what's going on? So the discussion went online and

00:05:58.880 --> 00:06:04.680
Trey Hunter said you should know something about join.

00:06:04.680 --> 00:06:10.400
Join is weird in that the CPython implementation of join is

00:06:10.400 --> 00:06:13.480
a two-pass because generators,

00:06:13.480 --> 00:06:17.120
they get exhausted and you can't use them again.

00:06:17.120 --> 00:06:20.400
So it has some little tricks that it

00:06:20.400 --> 00:06:23.920
uses to do a two-pass over the generator.

00:06:23.920 --> 00:06:27.480
So therefore, it is the same.

00:06:27.480 --> 00:06:32.120
The join is the same as creating a list.

00:06:32.120 --> 00:06:34.440
We know that comprehensions are a little bit

00:06:34.440 --> 00:06:36.360
better than actually just creating a list.

00:06:36.360 --> 00:06:38.480
So that little bit better is the reason

00:06:38.480 --> 00:06:43.740
why the comprehension version is faster.

00:06:43.740 --> 00:06:46.280
Well, wait, I have no idea why.

00:06:46.280 --> 00:06:48.200
I should have read more closely.

00:06:48.200 --> 00:06:51.400
But there's something about this that makes it faster

00:06:51.400 --> 00:06:53.680
in when you're using joins

00:06:53.680 --> 00:06:56.440
to go ahead and use a comprehension faster.

00:06:56.440 --> 00:06:58.000
>> Interesting.

00:06:58.000 --> 00:07:01.640
>> Weird. It's only in CPython.

00:07:01.640 --> 00:07:06.080
Apparently, that's not true for PyPy.

00:07:06.080 --> 00:07:11.760
Yeah, apparently, I don't know how they're doing it without it.

00:07:11.760 --> 00:07:18.160
But PyPy and some others implementations of Python do not use this.

00:07:18.160 --> 00:07:22.440
>> Interesting. Yeah, I don't see it tested here,

00:07:22.440 --> 00:07:25.400
but the WebAssembly one would be quite interesting.

00:07:25.400 --> 00:07:29.840
>> Right, for Pyodide and PyScript and those kinds of things?

00:07:29.840 --> 00:07:30.440
Definitely.

00:07:30.440 --> 00:07:31.640
>> Yeah.

00:07:31.640 --> 00:07:36.320
>> Okay. So interesting inside baseball around,

00:07:36.320 --> 00:07:39.280
I guess, if you want to do memory,

00:07:39.280 --> 00:07:42.440
whether you care about speed or memory efficiency.

00:07:42.440 --> 00:07:45.160
>> It's weird that you got to choose though.

00:07:45.160 --> 00:07:47.440
>> It is weird that you have to choose.

00:07:47.440 --> 00:07:50.480
But also, just in case you haven't seen this,

00:07:50.480 --> 00:07:52.960
this is basically the standard format

00:07:52.960 --> 00:07:56.760
for if you want to iterate through strings and combine them all into one,

00:07:56.760 --> 00:08:00.040
is to either throw them in a list or throw them in a comprehension,

00:08:00.040 --> 00:08:04.600
or throw them in generator and use join to combine them with a new line.

00:08:04.600 --> 00:08:05.920
If you haven't seen that before,

00:08:05.920 --> 00:08:08.160
that's a good thing to stick in your tool belt.

00:08:08.160 --> 00:08:10.440
>> Our Windows friends can put backslash R,

00:08:10.440 --> 00:08:14.760
backslash N, join for their Windows line.

00:08:14.760 --> 00:08:17.040
>> I'm on Windows, I don't do that.

00:08:17.040 --> 00:08:20.960
>> I know. It should still work.

00:08:20.960 --> 00:08:24.840
>> All right. Well, what do you have for us next?

00:08:24.840 --> 00:08:27.280
>> Well, I'm afraid I have some hard truths for you, Brian.

00:08:27.280 --> 00:08:28.480
Just like you've learned,

00:08:28.480 --> 00:08:30.800
it's a hard truth that generator

00:08:30.800 --> 00:08:32.840
doesn't always give you the advantages you thought.

00:08:32.840 --> 00:08:37.080
These are 10 hard truths to swallow that people won't

00:08:37.080 --> 00:08:40.720
tell you about your brand new software engineering jobs.

00:08:40.720 --> 00:08:43.200
So this is focused at students who just recently

00:08:43.200 --> 00:08:46.560
graduated or who are getting into software development.

00:08:46.560 --> 00:08:49.920
That might sound like a somewhat niche crowd,

00:08:49.920 --> 00:08:52.320
but if you look at the PSF JetBrains survey,

00:08:52.320 --> 00:08:56.040
it's like the biggest group of people are like,

00:08:56.040 --> 00:09:00.560
"Well, you've been coding for three years or less," which is crazy.

00:09:00.560 --> 00:09:03.080
All right. Anyway, let's go through the 10.

00:09:03.080 --> 00:09:06.040
This is by Minsur Durevic.

00:09:06.040 --> 00:09:09.320
Pretty good. A pretty good article here.

00:09:09.320 --> 00:09:11.960
Basically, since I was talking with a bunch of students and they were all psyched

00:09:11.960 --> 00:09:15.520
about startup culture, pizza parties and stuff.

00:09:15.520 --> 00:09:19.480
Well, yes, but the thing you're going to do most of the time,

00:09:19.480 --> 00:09:21.080
you're going to be writing code.

00:09:21.080 --> 00:09:22.680
So here are the 10.

00:09:22.680 --> 00:09:25.560
First, college will not prepare you for the job.

00:09:25.560 --> 00:09:30.080
Just imagine you go to college to learn how to swim.

00:09:30.080 --> 00:09:34.600
Your instructor spends a ton of time teaching you about the moves,

00:09:34.600 --> 00:09:37.680
reciting the moves, asking you questions about the moves.

00:09:37.680 --> 00:09:39.920
After five years, you get a piece of paper that proves

00:09:39.920 --> 00:09:43.640
your swimming skills and then you got to go in the pool and you just flail around.

00:09:43.640 --> 00:09:47.120
A little bit like that. Also, a lot of

00:09:47.120 --> 00:09:50.680
the curriculums are pretty far behind.

00:09:50.680 --> 00:09:52.920
I remember when I was in college,

00:09:52.920 --> 00:09:54.440
I said, "Can I please take C++?"

00:09:54.440 --> 00:09:56.920
It's in the '90s. They're like, "No,

00:09:56.920 --> 00:09:58.320
you have to take Fortran.

00:09:58.320 --> 00:10:00.000
It's the most important language you'll ever learn."

00:10:00.000 --> 00:10:01.320
I'm like, "Okay."

00:10:01.320 --> 00:10:03.640
Then I'm like, "Well, let me try some CS classes."

00:10:03.640 --> 00:10:04.840
Like, "Well, you got to do Lisp."

00:10:04.840 --> 00:10:08.920
Like, "Really? Can I please take something more modern?"

00:10:08.920 --> 00:10:09.720
Like, "No."

00:10:09.720 --> 00:10:12.320
You should embrace the Lisp.

00:10:12.320 --> 00:10:15.400
Yeah. I'm still not embracing the Lisp.

00:10:15.400 --> 00:10:17.720
I like parentheses, but not that much.

00:10:17.720 --> 00:10:18.720
Okay.

00:10:18.720 --> 00:10:21.720
Anyway, so it's like a lot of these folks who are professors

00:10:21.720 --> 00:10:26.720
have not been professional software developers in the engineering sense.

00:10:26.720 --> 00:10:29.080
So, the skills that they teach you are valuable,

00:10:29.080 --> 00:10:32.720
but it's not the same as working day to day.

00:10:32.720 --> 00:10:35.720
This one, I think, is probably,

00:10:35.720 --> 00:10:38.080
people probably don't realize that much,

00:10:38.080 --> 00:10:40.680
is you rarely get to work on greenfield projects.

00:10:40.680 --> 00:10:42.800
You get brownfield projects.

00:10:42.800 --> 00:10:47.400
That is, you get some project that is not a three-week project,

00:10:47.400 --> 00:10:50.400
but it's something that's been around since 2003,

00:10:50.400 --> 00:10:53.800
and you're dropped in to work on some features.

00:10:53.800 --> 00:10:58.000
Every time you poke it, it's like a rickety house of cards.

00:10:58.000 --> 00:10:59.400
You got to be super careful.

00:10:59.400 --> 00:11:02.800
How does that fit with your understanding?

00:11:02.800 --> 00:11:03.800
Yeah, definitely true.

00:11:03.800 --> 00:11:08.800
That's one of the reasons why I encourage people to do open...

00:11:08.800 --> 00:11:11.800
contribute to open source projects, even in large ones,

00:11:11.800 --> 00:11:16.400
because you have to get used to huge code bases.

00:11:16.400 --> 00:11:19.800
You have to get used to getting thrown in the deep end and fix a bug,

00:11:19.800 --> 00:11:21.800
and you don't even know what the code does.

00:11:21.800 --> 00:11:24.800
Yeah, this is essential.

00:11:24.800 --> 00:11:27.400
Speaking of which, there's a fantastic picture for this.

00:11:27.400 --> 00:11:30.200
Let me try to zoom that out for a second so we can see.

00:11:30.200 --> 00:11:31.200
Here, Brian.

00:11:31.200 --> 00:11:33.200
Check this link out, folks.

00:11:33.200 --> 00:11:36.200
It's like this crazy Rube Goldbergian thing.

00:11:36.200 --> 00:11:37.800
There's a button to start the app,

00:11:37.800 --> 00:11:40.000
and it's got all these weird wires,

00:11:40.000 --> 00:11:42.400
and there's an elephant that's suspended,

00:11:42.400 --> 00:11:44.400
and the wire cuts the elephant loose,

00:11:44.400 --> 00:11:47.400
which drops off a rock, and there's a security layer.

00:11:47.400 --> 00:11:51.400
There's the core logic since 2003.

00:11:51.400 --> 00:11:56.400
There's all these third-party bits that are largely controlled by aliens.

00:11:56.400 --> 00:11:58.600
And then there's a cloud, and below the cloud,

00:11:58.600 --> 00:12:00.600
you can see just the base of the building.

00:12:00.600 --> 00:12:02.800
There's two new engineers with a little button

00:12:02.800 --> 00:12:05.600
that's supposed to kick this thing off or something.

00:12:05.600 --> 00:12:06.600
It says, "How hard can it be?"

00:12:06.600 --> 00:12:07.600
Come on.

00:12:07.600 --> 00:12:08.600
Yeah.

00:12:08.600 --> 00:12:09.600
Amazing.

00:12:09.600 --> 00:12:10.600
So check that out.

00:12:10.600 --> 00:12:11.600
All right.

00:12:11.600 --> 00:12:13.600
Coming back.

00:12:13.600 --> 00:12:19.600
Nobody gives a blankety-blank about your clean code.

00:12:19.600 --> 00:12:21.600
You may focus on it a lot,

00:12:21.600 --> 00:12:24.600
but really your job is to deliver features.

00:12:24.600 --> 00:12:26.600
You're expected to write clean code,

00:12:26.600 --> 00:12:29.600
but you're not going to get promotions and stuff

00:12:29.600 --> 00:12:32.600
from the business people because you write clean code.

00:12:32.600 --> 00:12:34.600
It's because you deliver value, right?

00:12:34.600 --> 00:12:36.600
Although part of that value is clean code.

00:12:36.600 --> 00:12:38.600
That's true, but you've got to maintain it too.

00:12:38.600 --> 00:12:40.600
Yes, you've got to live with it.

00:12:40.600 --> 00:12:42.600
So here's my experience.

00:12:42.600 --> 00:12:48.600
Not how do you lie, but how do you phrase things like estimates and stuff

00:12:48.600 --> 00:12:54.600
so that you're in a position so you don't have to write terrible code constantly?

00:12:54.600 --> 00:12:59.600
So for example, with testing or a little bit of refactoring,

00:12:59.600 --> 00:13:01.600
I would just work that into my estimates.

00:13:01.600 --> 00:13:02.600
How long is it going to take?

00:13:02.600 --> 00:13:03.600
It's going to take a week.

00:13:03.600 --> 00:13:05.600
Well, it probably takes three and a half days,

00:13:05.600 --> 00:13:07.600
if you were to bust it out, right?

00:13:07.600 --> 00:13:09.600
But if you're going to put in the tests and do it right,

00:13:09.600 --> 00:13:10.600
it'll take a week.

00:13:10.600 --> 00:13:11.600
So how long does it take?

00:13:11.600 --> 00:13:12.600
It takes a week.

00:13:12.600 --> 00:13:13.600
That kind of thing.

00:13:13.600 --> 00:13:15.600
Sometimes you'll work with incompetent people.

00:13:15.600 --> 00:13:17.600
Oh, boy, oh, boy, oh, boy.

00:13:17.600 --> 00:13:19.600
Yes.

00:13:19.600 --> 00:13:21.600
Sometimes that person will be your boss.

00:13:21.600 --> 00:13:23.600
That's even tougher.

00:13:23.600 --> 00:13:25.600
I'll tell you a story, Brian.

00:13:25.600 --> 00:13:28.600
I used to do in-person training classes,

00:13:28.600 --> 00:13:34.600
and there was a person who was in this class as part of a team,

00:13:34.600 --> 00:13:39.600
software development team from a medium-sized company,

00:13:39.600 --> 00:13:44.600
one of these 50 million yearly revenue-type companies or something.

00:13:44.600 --> 00:13:48.600
And during that class, we were doing exercises.

00:13:48.600 --> 00:13:50.600
I'd do a presentation for an hour.

00:13:50.600 --> 00:13:52.600
They'd spend maybe half an hour working on something,

00:13:52.600 --> 00:13:54.600
and round and round it goes.

00:13:54.600 --> 00:14:01.600
So there's this part where you need a variable that has a string value.

00:14:01.600 --> 00:14:04.600
This person has been working for at least six months, I think a lot longer,

00:14:04.600 --> 00:14:07.600
as a professional software developer in this language.

00:14:07.600 --> 00:14:11.600
And I say, "Okay, you've got to create a variable there,

00:14:11.600 --> 00:14:16.600
and you need to assign a string to it that says, you know, xyz.

00:14:16.600 --> 00:14:18.600
The value of the string is xyz."

00:14:18.600 --> 00:14:23.600
So they just write variable name equals xyz with spaces and all sorts of stuff.

00:14:23.600 --> 00:14:26.600
Like, "No, you can't just type it into the editor.

00:14:26.600 --> 00:14:28.600
You have to put quotes around it."

00:14:28.600 --> 00:14:29.600
"What do you mean?"

00:14:29.600 --> 00:14:32.600
"You have to put quotes around this."

00:14:32.600 --> 00:14:38.600
How have you been a professional software developer at a proper company

00:14:38.600 --> 00:14:44.600
for over six months to a year and not know that sentences with spaces,

00:14:44.600 --> 00:14:50.600
you have to have quotes around them to put them into code as a piece of text?

00:14:50.600 --> 00:14:54.600
Could you imagine that person reviewing your code?

00:14:54.600 --> 00:14:57.600
Like, "Oh, my goodness, dude."

00:14:57.600 --> 00:15:00.600
No, that was a rough one.

00:15:00.600 --> 00:15:02.600
Anyway, sometimes, maybe not to that extreme,

00:15:02.600 --> 00:15:05.600
but you will probably end up working with ineffective people,

00:15:05.600 --> 00:15:06.600
or people that don't care about your process,

00:15:06.600 --> 00:15:09.600
or people that don't care about your clean code, or whatever, right?

00:15:09.600 --> 00:15:11.600
All that stuff's there.

00:15:11.600 --> 00:15:14.600
Number five, get used to being in meetings for hours.

00:15:14.600 --> 00:15:17.600
This is an important part of software development job.

00:15:17.600 --> 00:15:21.600
Most meetings are not productive because you're being forced to be there

00:15:21.600 --> 00:15:25.600
by a person whose only job is to have meetings.

00:15:25.600 --> 00:15:28.600
That's their job. That's their work.

00:15:28.600 --> 00:15:32.600
However, other meetings with your team members and stuff,

00:15:32.600 --> 00:15:36.600
planning out code and whatnot is pretty good.

00:15:36.600 --> 00:15:38.600
Yeah, if you're the one responsible for the meeting,

00:15:38.600 --> 00:15:40.600
be okay with cutting it short.

00:15:40.600 --> 00:15:44.600
Getting everybody together and leaving in 10 minutes is fine.

00:15:44.600 --> 00:15:46.600
Remember that.

00:15:46.600 --> 00:15:48.600
100%.

00:15:48.600 --> 00:15:51.600
I feel like you should have done this article.

00:15:51.600 --> 00:15:53.600
No, I'll be the heckler in the background.

00:15:53.600 --> 00:15:56.600
They will ask you for estimates a lot of times.

00:15:56.600 --> 00:15:59.600
I told you about this one. I mentioned this. This is fun.

00:15:59.600 --> 00:16:03.600
Here's a great cartoon for this one, too.

00:16:03.600 --> 00:16:07.600
This is also good, basically the joke segment.

00:16:07.600 --> 00:16:10.600
It says, "Would you rather?"

00:16:10.600 --> 00:16:14.600
For better estimates, we switched from measuring story points

00:16:14.600 --> 00:16:16.600
to a different style.

00:16:16.600 --> 00:16:20.600
We now ask, "How many duck-sized horses are you willing to fight

00:16:20.600 --> 00:16:23.600
rather than implement this task?"

00:16:23.600 --> 00:16:25.600
Isn't that awesome?

00:16:25.600 --> 00:16:29.600
Yeah.

00:16:29.600 --> 00:16:33.600
It sounds silly, but I kind of think of it as it's actually kind of practical.

00:16:33.600 --> 00:16:39.600
It's using your desire to avoid negative stimuli

00:16:39.600 --> 00:16:42.600
more than your ability to predict something.

00:16:42.600 --> 00:16:44.600
I love it.

00:16:44.600 --> 00:16:49.600
That one was only a two duck-sized horse battle.

00:16:49.600 --> 00:16:51.600
All right.

00:16:51.600 --> 00:16:54.600
Bugs will be your archenemy for life because they come from different places.

00:16:54.600 --> 00:16:57.600
It could be your own code, but it could be third-party libraries.

00:16:57.600 --> 00:17:00.600
It could be hardware failure, electricity, all sorts of things.

00:17:00.600 --> 00:17:04.600
Uncertainty will be your toxic friend.

00:17:04.600 --> 00:17:08.600
It could be implementing something you never worked on.

00:17:08.600 --> 00:17:13.600
It could be getting transferred to a new project with new technologies.

00:17:13.600 --> 00:17:15.600
It could be a move to a new company.

00:17:15.600 --> 00:17:18.600
It could be a bug report the day you need to finish the work.

00:17:18.600 --> 00:17:20.600
It could be going to break the deadline.

00:17:20.600 --> 00:17:25.600
Job security, evolution technology, all these things totally resonate.

00:17:25.600 --> 00:17:29.600
Number nine, it will be almost impossible to disconnect from your job.

00:17:29.600 --> 00:17:31.600
Yeah, that's rough.

00:17:31.600 --> 00:17:35.600
But it's true because you're thinking about it, right?

00:17:35.600 --> 00:17:37.600
Yeah.

00:17:37.600 --> 00:17:40.600
A lot of these come with actually good advice on what to do to combat it

00:17:40.600 --> 00:17:42.600
or to counteract it or to deal with it.

00:17:42.600 --> 00:17:44.600
Oh, that's good.

00:17:44.600 --> 00:17:46.600
One of the best things I ever did was not--

00:17:46.600 --> 00:17:50.600
I don't have the ability to get email on my phone now, my work email.

00:17:50.600 --> 00:17:52.600
Oh, that's nice.

00:17:52.600 --> 00:17:57.600
Because I was checking it all the time, even when I was off work, and that was bad.

00:17:57.600 --> 00:17:59.600
Yeah, that's bad.

00:17:59.600 --> 00:18:06.600
Last one, number 10, you will profit more from your soft skills than your coding skills.

00:18:06.600 --> 00:18:10.600
Not that your coding skills aren't important, but--

00:18:10.600 --> 00:18:12.600
Yeah, definitely.

00:18:12.600 --> 00:18:15.600
--they're important stuff, and they're also required.

00:18:15.600 --> 00:18:20.600
Things like teamwork, learning mindset, time management, emotional intelligence and empathy,

00:18:20.600 --> 00:18:25.600
approachability, persistence, confidence, all these things amongst a whole zillion others.

00:18:25.600 --> 00:18:28.600
Anyway, if you're new, I think this is a pretty good article.

00:18:28.600 --> 00:18:32.600
I didn't go through all the little details, but these 10 concepts.

00:18:32.600 --> 00:18:35.600
I don't know, what do you think, Brian?

00:18:35.600 --> 00:18:40.600
I think the soft skills probably would have been at the top.

00:18:40.600 --> 00:18:47.600
Being able to communicate well and stay positive and don't be a jerk is huge.

00:18:47.600 --> 00:18:52.600
The ability to not be a jerk under pressure, that was a struggle for me.

00:18:52.600 --> 00:18:54.600
Also, embracing deadlines.

00:18:54.600 --> 00:18:57.600
People are going to ask you how long it's going to take.

00:18:57.600 --> 00:18:59.600
You just have to learn how to do that.

00:18:59.600 --> 00:19:01.600
Estimating is part of the job.

00:19:01.600 --> 00:19:08.600
It sucks. It's wrong, but you get better at it, and you're also okay about telling it.

00:19:08.600 --> 00:19:13.600
It can be ballparks. Is it going to be two days, or is it going to be two months?

00:19:13.600 --> 00:19:16.600
Pick. People just need to know.

00:19:16.600 --> 00:19:18.600
Yeah, absolutely.

00:19:18.600 --> 00:19:19.600
That's good.

00:19:19.600 --> 00:19:24.600
All right, before we move on to the next one, let's talk about a new sponsor that I'm very excited about.

00:19:24.600 --> 00:19:28.600
This episode is brought to you by Code Comments, an original podcast from Red Hat.

00:19:28.600 --> 00:19:33.600
You know when you're working on a project and you leave behind a small comment in the code?

00:19:33.600 --> 00:19:37.600
Maybe you're hoping to help others learn what isn't clear at first.

00:19:37.600 --> 00:19:43.600
Sometimes that code comment tells a story of a challenging journey to the current state of the project.

00:19:43.600 --> 00:19:49.600
Code Comments, the podcast, features technologists who've been through tough tech transitions,

00:19:49.600 --> 00:19:52.600
and they share how their teams survived that journey.

00:19:52.600 --> 00:19:56.600
The host, Jamie Parker, is a Red Hatter and an experienced engineer.

00:19:56.600 --> 00:20:01.600
In each episode, Jamie recounts the stories of technologists from across the industry

00:20:01.600 --> 00:20:04.600
who've been on a journey implementing new technologies.

00:20:04.600 --> 00:20:09.600
I recently listened to an episode about DevOps from the folks at Worldwide Technology.

00:20:09.600 --> 00:20:13.600
The hardest challenge turned out to be getting buy-in on the new tech stack

00:20:13.600 --> 00:20:16.600
rather than using that tech stack directly.

00:20:16.600 --> 00:20:21.600
It's a message that we can all relate to, and I'm sure you can take some hard-won lessons back to your own team.

00:20:21.600 --> 00:20:23.600
Give Code Comments a listen.

00:20:23.600 --> 00:20:30.600
Search for Code Comments in your podcast player or just use our link, pythonbytes.fm/code-comments.

00:20:30.600 --> 00:20:32.600
The link is in your podcast player's show notes.

00:20:32.600 --> 00:20:35.600
Thank you to Code Comments for supporting the show.

00:20:35.600 --> 00:20:37.600
Cool.

00:20:37.600 --> 00:20:39.600
Yes, thank you indeed. Over to you, Ryan.

00:20:39.600 --> 00:20:46.600
Well, we've talked in the past about Python coming to Excel, but I haven't tried it.

00:20:46.600 --> 00:20:53.600
So I was kind of curious about this person that wrote up an article called "My Thoughts on Python in Excel."

00:20:53.600 --> 00:20:56.600
And this isn't just a rando person.

00:20:56.600 --> 00:21:02.600
Apparently, this is—let's see, or maybe, I don't know.

00:21:02.600 --> 00:21:06.600
They wrote a book on Python in Excel or reported—

00:21:06.600 --> 00:21:09.600
Were they the creator of Excel Wings, maybe? I'm not sure.

00:21:09.600 --> 00:21:17.600
Oh, yeah. As a creator of Excel Wings, the author of the O'Reilly book "Python for Excel," I was obviously curious to try it.

00:21:17.600 --> 00:21:19.600
So, anyway.

00:21:19.600 --> 00:21:24.600
Yeah, okay. Anyway, so somebody tried it out. Great.

00:21:24.600 --> 00:21:34.600
And this is from the Excel Wings blog, so yeah, it's probably somebody that's worthwhile looking at this and tried—actually really wanted it to work.

00:21:34.600 --> 00:21:37.600
So what are their takeaways?

00:21:37.600 --> 00:21:39.600
And I'm just kind of loving this.

00:21:39.600 --> 00:21:41.600
We'll just run through them.

00:21:41.600 --> 00:21:49.600
Wanted it to be an alternative to VBA, but mostly got an alternative to the Excel formula language.

00:21:49.600 --> 00:21:55.600
Okay, so I thought it was going to be a VBA replacement as well.

00:21:55.600 --> 00:21:57.600
Apparently not.

00:21:57.600 --> 00:22:07.600
Integrating the Jupyter notebook cells inside Excel Grid was a mistake, so not sure what they did there, but apparently they didn't like that.

00:22:07.600 --> 00:22:14.600
So, "Python in Excel is not suitable for Python beginners, nor for interactive data analysis."

00:22:14.600 --> 00:22:17.600
That's kind of—that's a bummer.

00:22:17.600 --> 00:22:20.600
So there's that one person left.

00:22:20.600 --> 00:22:22.600
Yeah.

00:22:22.600 --> 00:22:28.600
"Right now there are too many restrictions. You can't use your own packages, you can't connect to the web APIs."

00:22:28.600 --> 00:22:31.600
"So what are the current use cases?"

00:22:31.600 --> 00:22:35.600
Probably computationally intensive things like Monte Carlo simulations.

00:22:35.600 --> 00:22:45.600
AI stuff via the included packages like scikit-learn, NLTK, StatsModel, and BalanceLearn.

00:22:45.600 --> 00:22:48.600
Actually, that makes sense.

00:22:48.600 --> 00:22:57.600
So that's a good use case, I guess, for being able to use AI scikit-learn stuff in Excel. Nice.

00:22:57.600 --> 00:23:01.600
Being able to use Matplotlib and Seaborn for visualizations.

00:23:01.600 --> 00:23:04.600
That's pretty cool because these are great packages.

00:23:04.600 --> 00:23:07.600
Time series analysis.

00:23:07.600 --> 00:23:15.600
But that's really about it. "Not sure about data cleaning or data analysis since you're mostly—almost certainly need Power Query."

00:23:15.600 --> 00:23:18.600
I don't know what this is. Must be an Excel thing.

00:23:18.600 --> 00:23:24.600
It's like a BI Microsoft Office Tableau type of thing, I believe.

00:23:24.600 --> 00:23:27.600
Okay.

00:23:27.600 --> 00:23:32.600
So, what's the conclusion here?

00:23:32.600 --> 00:23:39.600
"Before we dive into details, I want to clarify that this is my personal opinion and not meant to be a rant or critique, but I'm amused by it."

00:23:39.600 --> 00:23:44.600
"I've been in contact with the Excel team a few times, and they're super friendly."

00:23:44.600 --> 00:23:49.600
Okay, so he wants the whole thing to succeed. So we'll just—that's good.

00:23:49.600 --> 00:23:51.600
So these are just interesting takeaways.

00:23:51.600 --> 00:23:59.600
One of the things—and then goes through a bunch of the little bits in more detail.

00:23:59.600 --> 00:24:05.600
The part that wasn't in the summary, which I find is interesting, is Python is not really in Excel.

00:24:05.600 --> 00:24:11.600
It's in the cloud, which I'm surprised by.

00:24:11.600 --> 00:24:20.600
It says, as you've probably heard, but I hadn't, that the Python that you're running runs in an Azure container instance, not inside Excel.

00:24:20.600 --> 00:24:23.600
This is kind of weird, I think.

00:24:23.600 --> 00:24:24.600
Did you know this?

00:24:24.600 --> 00:24:31.600
Yeah, I did, and it's interesting. It means that you can't configure the environment, you can't control which Python is running,

00:24:31.600 --> 00:24:39.600
you can't install third-party packages that are not pre-approved, like you saw that there was a list of a couple of ML ones.

00:24:39.600 --> 00:24:42.600
If you don't like those, then you don't use it.

00:24:42.600 --> 00:24:47.600
Well, can you do it when your laptop's disconnected, like when you're on an airplane or something?

00:24:47.600 --> 00:24:48.600
No, I don't think so.

00:24:48.600 --> 00:24:51.600
Okay.

00:24:51.600 --> 00:24:59.600
To me, I was hoping for some kind of VBA, like true automation that's sort of beyond the cell, this cell, that cell.

00:24:59.600 --> 00:25:09.600
But kind of what you do with notebooks, and then sometimes you bring in Excel writer or something to actually save the stuff out or something.

00:25:09.600 --> 00:25:12.600
A little way to orchestrate bigger.

00:25:12.600 --> 00:25:13.600
Okay.

00:25:13.600 --> 00:25:16.600
But yeah, that also, it's just different.

00:25:16.600 --> 00:25:20.600
It's just stuff within a cell?

00:25:20.600 --> 00:25:22.600
Well, multiple cells, but yes.

00:25:22.600 --> 00:25:28.600
Okay. Well, it's not really what I was hoping for, for Python and Excel.

00:25:28.600 --> 00:25:31.600
It's also not quite in it, right?

00:25:31.600 --> 00:25:32.600
Say that again?

00:25:32.600 --> 00:25:35.600
It's not quite in it. As I said, it's in the cloud.

00:25:35.600 --> 00:25:36.600
Yeah.

00:25:36.600 --> 00:25:39.600
It is weird that it's got to be online only.

00:25:39.600 --> 00:25:47.600
Yeah, that's kind of a deal breaker for me, but maybe I shouldn't care that much, but anyway.

00:25:47.600 --> 00:25:59.600
But one of the comments around that was that it's not really a problem for a lot of people because a lot of people that are using Excel are already sharing their data through OneDrive and SharePoint.

00:25:59.600 --> 00:26:10.600
And I don't know if that's, maybe that's a majority of corporations, but there's a lot of corporations like the one I'm in where we cannot do that because we don't want our stuff to go out anywhere.

00:26:10.600 --> 00:26:12.600
So anyway.

00:26:12.600 --> 00:26:13.600
Yep.

00:26:13.600 --> 00:26:24.600
So just an interesting takeaway of, I guess if you've been hoping and thinking, this might be a good article to peruse just to make sure that it's really your use case before you jump in.

00:26:24.600 --> 00:26:25.600
Yeah, good point.

00:26:25.600 --> 00:26:37.600
Christopher out there says, "It's nice that it doesn't require Python to be installed locally, unlike Power BI, because I wouldn't be able to have my IT department install it."

00:26:37.600 --> 00:26:40.600
So that's an interesting bonus there.

00:26:40.600 --> 00:26:46.600
Navara says, "You gotta fight for your right to sudo."

00:26:46.600 --> 00:26:49.600
There you go.

00:26:49.600 --> 00:26:59.600
Can't you, I mean Python now, can't you install it on Windows machines? I think you can install it in like personal mode that's just in your home directory or something.

00:26:59.600 --> 00:27:00.600
Yeah.

00:27:00.600 --> 00:27:04.600
I don't think you need like administrator privileges anymore.

00:27:04.600 --> 00:27:11.600
Yeah, that's true with, it's actually true with Python in the Windows Store on Windows 10 and 11.

00:27:11.600 --> 00:27:12.600
Yeah.

00:27:12.600 --> 00:27:22.600
Henry Schreiner out there, I didn't say Henry, says, "This feels like the perfect use case for WASM. Sad it wasn't the default." Totally agree. Some Pyodite here would have been awesome.

00:27:22.600 --> 00:27:25.600
Yeah. All right.

00:27:25.600 --> 00:27:27.600
That was awesome. The next thing I'm about to tell you though, Brian.

00:27:27.600 --> 00:27:30.600
Okay, what's the next thing?

00:27:30.600 --> 00:27:36.600
This special live event course that I'm running.

00:27:36.600 --> 00:27:38.600
All right. Cool.

00:27:38.600 --> 00:27:47.600
So this is happening in October and I'm doing a Code in a Castle event in Tuscany.

00:27:47.600 --> 00:27:48.600
Wow.

00:27:48.600 --> 00:28:15.600
So this is a six day luxurious, a course in a luxurious Tuscan villa. And every morning we're going to wake up and we're going to spend four hours working on Python. And then the rest of the day is excursions and winery tours and other stuff around the Italian countryside.

00:28:15.600 --> 00:28:18.600
This looks like fun.

00:28:18.600 --> 00:28:19.600
Sounds awesome, huh?

00:28:19.600 --> 00:28:20.600
Yeah.

00:28:20.600 --> 00:28:33.600
So the course is going to be super fun. The course is, I called it Python Zero to Hero, but you don't have to actually be zero. You got to just, there's probably some areas of this that you haven't had any experience with.

00:28:33.600 --> 00:28:51.600
So basically it takes you from maybe learning Python, maybe I know Python, but then talks about async and await, MongoDB, talks about we cover FastAPI using HTMX. We'll be back to that in just a second.

00:28:51.600 --> 00:29:07.600
And building out awesome web apps and web APIs and then performance testing this and then deploying it to Linux. If we got time, maybe using Docker as well. So yeah, that's what the plan is and it's going to be awesome.

00:29:07.600 --> 00:29:24.600
So if you're interested in being part of this, click the link in your player show notes and show notes there. I think I'll have a Talk Python link. So talkpython.fm/castle is the link.

00:29:24.600 --> 00:29:45.600
And everyone, when they come, they get a room in the villa and the room has up to two beds. So if you wanted to bring your wife or a good friend, there's actually a separate set of events for the people who are not in the course but who are attending the event as a companion or something. So there's morning excursions as well.

00:29:45.600 --> 00:29:59.600
Yeah, I was reading up on that and it sounds really pretty like some good quotes from people from last year enjoying the plus ones, having fun in the mornings.

00:29:59.600 --> 00:30:08.600
Yeah, awesome. Maybe I'll just say the morning track. No, I'm just kidding. So I forgot to mention, this is an extra, extra, extra. So this is number one of the extra, okay?

00:30:08.600 --> 00:30:11.600
Okay, more.

00:30:11.600 --> 00:30:17.600
Okay, more. So first one, Code in a Castle, learn Python, FastAPI, deployment, load testing, all that stuff. Hopefully you can be there.

00:30:17.600 --> 00:30:40.600
Number two, I have this awesome use case for HTMX that is so incredibly clean that I just want to give people a feel for it. So Brian, if you go to Talk Python, click on the courses, including your course here, you can see it has a price that's $59.

00:30:40.600 --> 00:31:00.600
But if you're European, it would have a price in euros. If you were in India, you would have a price in something else. So in order to pull all that information in, this was usually fast, but periodically we'd have to hit our credit card processor for places that are less common.

00:31:00.600 --> 00:31:13.600
I tried to pre-compute all this, but it's combinatorially out of control. So if you're from a certain part of Greece where there's a certain tax that's different than another part of Greece, all of that factors into what shows up on this page.

00:31:13.600 --> 00:31:27.600
So I just showed them without prices. I'm like, "Well, what if I could reload, show the page, and then re-compute the page with prices, and if it takes 10 seconds for 50 API calls to the credit card processor, so be it."

00:31:27.600 --> 00:31:44.600
Maybe you'll see it, maybe you won't. But if it's already seen that and it's saved in the database, we'll just show it to you, basically, really, really quick. So watch this. If I refresh it, you can see that it flickers for a second, and then the prices come back.

00:31:44.600 --> 00:32:02.600
All of that is in HTMX, and if you look at the implementation of it, three lines for that entire client-side implementation of show the page without prices instantly, start a computation to figure them all out, get the answer, and then rebuild the page out of that.

00:32:02.600 --> 00:32:17.600
So just div hx get some URL, hx trigger load, render partial. This is the implementation that both shows it on the first load without prices and then refreshes it and loads it with prices. Those three lines, and one of them is a /div.

00:32:17.600 --> 00:32:19.600
Well, that's pretty cool.

00:32:19.600 --> 00:32:20.600
Is that insane?

00:32:20.600 --> 00:32:21.600
Yeah.

00:32:21.600 --> 00:32:24.600
So yeah, HTMX for the win.

00:32:24.600 --> 00:32:25.600
Nice use.

00:32:25.600 --> 00:32:33.600
Encourage more people to use that. It lets you do more Python and less JavaScript, right? Because most implementations on the server, which is where it's all Python.

00:32:33.600 --> 00:32:39.600
Yeah, and one of those three lines is just the closing of the div. So it's really like two lines of code.

00:32:39.600 --> 00:32:41.600
It's really like two lines. It's incredible.

00:32:41.600 --> 00:32:42.600
Yeah.

00:32:42.600 --> 00:32:54.600
All right. Another one, something I've been recently using, and some people will be like, "Michael, where have you been all this time? Why have you not done this?" I'll put this out to you as my test candidate.

00:32:54.600 --> 00:33:16.600
Did you know that if you find yourself sitting down to the terminal, SSH into a server, running the command, and then leaving often, even if that has text output and all sorts of responses, color text output, like rich or whatever, you can just run that on your machine using SSH to execute a command remotely.

00:33:16.600 --> 00:33:18.600
Is this news to you?

00:33:18.600 --> 00:33:19.600
No.

00:33:19.600 --> 00:33:28.600
So you say SSH, for people who don't know, you say SSH user at host, and then in quotes, some command.

00:33:28.600 --> 00:33:44.600
So if you want to say tail your log and see what's happening on your server, instead of logging into the server over SSH and tailing it, you could just create an alias that says SSH user at host, do the tail log thing, and you just type it locally and just boom, you're tailing log.

00:33:44.600 --> 00:33:45.600
Beautiful.

00:33:45.600 --> 00:33:51.600
And if you want to run multiple commands, just separate them by semicolons, create a little alias for that bad boy, and off you go.

00:33:51.600 --> 00:33:52.600
Yeah, nice.

00:33:52.600 --> 00:33:55.600
So anyway, that's one of my extras.

00:33:55.600 --> 00:34:04.600
I use it for, so the reboot is built in, but we have an extra command that we do for restarting the, we have an application that we often have to restart.

00:34:04.600 --> 00:34:12.600
So doing a single command to SSH and run the restart to restart all the software, do that a lot.

00:34:12.600 --> 00:34:16.600
Yep. Alright, I told you it's extra, extra, extra. There's still more extras, okay?

00:34:16.600 --> 00:34:17.600
Okay.

00:34:17.600 --> 00:34:18.600
Alright.

00:34:18.600 --> 00:34:19.600
We got time.

00:34:19.600 --> 00:34:20.600
Yeah.

00:34:20.600 --> 00:34:21.600
So these are short.

00:34:21.600 --> 00:34:28.600
So polyfill.io is a CDN, I believe, for JavaScript.

00:34:28.600 --> 00:34:35.600
Polyfill is if a browser doesn't support a feature, but you can implement it in JavaScript on top of the features that are there.

00:34:35.600 --> 00:34:42.600
You can include a script that's a polyfill, like add features to an old one, an old browser.

00:34:42.600 --> 00:34:52.600
So apparently, according to Bleeping Computer, this thing has been impacted by a supply chain attack where a Chinese company acquired the domain,

00:34:52.600 --> 00:34:58.600
and then the script was modified to redirect users to malicious and scam sites.

00:34:58.600 --> 00:35:04.600
And everyone who had that in their web app, 100,000 different websites.

00:35:04.600 --> 00:35:07.600
The CDN got a new version of the script for you.

00:35:07.600 --> 00:35:08.600
Oh, geez.

00:35:08.600 --> 00:35:16.600
Which means it's time for required reading from Wesley Apdicker-Castles, "Reasons to Avoid CDNs in JavaScript."

00:35:16.600 --> 00:35:19.600
I'll do my highlighted one here.

00:35:19.600 --> 00:35:22.600
Look, systemic risk.

00:35:22.600 --> 00:35:27.600
It says, "One of the CDNs out there supports 12.5% of all websites."

00:35:27.600 --> 00:35:33.600
If that goes down, having 12.5% of the internet vanish is silly.

00:35:33.600 --> 00:35:38.600
We've swung too far away from resiliency as a society.

00:35:38.600 --> 00:35:45.600
Privacy, obviously, because they can track everyone who makes a request to that and coordinate that across browsers and sites.

00:35:45.600 --> 00:35:50.600
They say speed, but if you're using HTTP/2, it doesn't matter that much.

00:35:50.600 --> 00:35:53.600
You could use your own CDN.

00:35:53.600 --> 00:35:56.600
Security.

00:35:56.600 --> 00:35:59.600
This points out that modern browsers have sub-resource integrity.

00:35:59.600 --> 00:36:03.600
If you're using a CDN, put the hash in there.

00:36:03.600 --> 00:36:07.600
That way, if something like this happens, it won't load the page.

00:36:07.600 --> 00:36:11.600
The browsers are like, "No, it doesn't match. I'm not running this," which is good.

00:36:11.600 --> 00:36:20.600
Unfortunately, this doesn't work for libraries that are split into multiple pieces, where one thing requires another type of deal as part of it.

00:36:20.600 --> 00:36:22.600
What to do instead?

00:36:22.600 --> 00:36:25.600
Just download it, is what they say.

00:36:25.600 --> 00:36:33.600
What we do at Python Bytes is we just download it, but then we serve that content back over our own CDN at bunny.net.

00:36:33.600 --> 00:36:38.600
It's not ours, but the one we use at bunny.net, which still gives it all the global reach.

00:36:38.600 --> 00:36:44.600
But we control whether or not it changes other people, which is awesome.

00:36:44.600 --> 00:36:54.600
Just to keep beating the drum, major ad networks are basically malware delivering.

00:36:54.600 --> 00:36:57.600
Bunnels and don't feel bad about ad blockers.

00:36:57.600 --> 00:37:01.600
Mac users served info-stealer malware through Google Ads, so why not?

00:37:01.600 --> 00:37:04.600
Who wouldn't want that?

00:37:04.600 --> 00:37:08.600
That's an article on ours, technically, you can check out.

00:37:08.600 --> 00:37:12.600
That's my extra, extra, extra, extra, extra cure-all about it.

00:37:12.600 --> 00:37:14.600
You got extras?

00:37:14.600 --> 00:37:18.600
I do, but I've got a link that I can't show.

00:37:18.600 --> 00:37:25.600
I want you to go to either in the notes or the private chat and click on that link.

00:37:25.600 --> 00:37:27.600
We'll talk about it.

00:37:27.600 --> 00:37:31.600
It's called, I will effing pile drive you if you mention AI again.

00:37:31.600 --> 00:37:39.600
It's a funny reaction to all this ChatGPT stuff and AI and everything.

00:37:39.600 --> 00:37:42.600
It's an interesting position.

00:37:42.600 --> 00:37:45.600
This is somebody that was studying data science.

00:37:45.600 --> 00:37:54.600
I think they're in college and they're doing grad school stuff now, doing a master's thesis.

00:37:54.600 --> 00:37:59.600
But he's sick of a lot of the hype around AI.

00:37:59.600 --> 00:38:01.600
It's just an interesting take on it.

00:38:01.600 --> 00:38:06.600
It's so funny.

00:38:06.600 --> 00:38:15.600
If you're tired of all the hype around AI and you'd like to read somebody else's perspective,

00:38:15.600 --> 00:38:20.600
click the link in the show notes and it'll be an interesting read for you.

00:38:20.600 --> 00:38:28.600
The reason why I'm not showing it is because I want to keep this child friendly and safe for the live feed.

00:38:28.600 --> 00:38:29.600
Thanks, Brian.

00:38:29.600 --> 00:38:30.600
We'll check it out.

00:38:30.600 --> 00:38:34.600
That's my only extra.

00:38:34.600 --> 00:38:39.600
Let's close this out with a joke.

00:38:39.600 --> 00:38:40.600
Let's do that.

00:38:40.600 --> 00:38:45.600
By the way, I have this AI fatigue as well.

00:38:45.600 --> 00:38:47.600
Chat GPT is cool.

00:38:47.600 --> 00:38:49.600
Llama 3 is cool.

00:38:49.600 --> 00:38:53.600
But not everything needs to have AI in it.

00:38:53.600 --> 00:39:01.600
Certainly, a lot of times software use has just easy to solve persistent bugs because the whole team is on an AI mission.

00:39:01.600 --> 00:39:04.600
You're like, "I don't want any of this junk.

00:39:04.600 --> 00:39:09.600
Could you just make it when I click this that it works?"

00:39:09.600 --> 00:39:10.600
All right.

00:39:10.600 --> 00:39:13.600
Off to the joke.

00:39:13.600 --> 00:39:18.600
Over on Reddit, we have something called the HTML Hacker.

00:39:18.600 --> 00:39:22.600
We just talked about the malware, right?

00:39:22.600 --> 00:39:26.600
This is two sides of the picture.

00:39:26.600 --> 00:39:30.600
Both people don't see either side, really.

00:39:30.600 --> 00:39:33.600
This woman, she says, "My boyfriend is a programmer.

00:39:33.600 --> 00:39:37.600
He'll hack your world into oblivion.

00:39:37.600 --> 00:39:46.600
Meanwhile, the boyfriend on his computer, Google, how to declare variables in HTML."

00:39:46.600 --> 00:39:52.600
Yeah.

00:39:52.600 --> 00:39:53.600
Both things can be true at the same time.

00:39:53.600 --> 00:39:56.600
He also could be a hacker and still not know how to declare variables in HTML.

00:39:56.600 --> 00:39:57.600
You never know.

00:39:57.600 --> 00:39:59.600
I don't know how to declare variables in HTML.

00:39:59.600 --> 00:40:01.600
Can you declare variables in HTML?

00:40:01.600 --> 00:40:02.600
No.

00:40:03.600 --> 00:40:04.600
Okay.

00:40:04.600 --> 00:40:08.600
But you can in modern CSS.

00:40:08.600 --> 00:40:09.600
Well, okay.

00:40:09.600 --> 00:40:15.600
One of the things I think is funny about this is because sometimes in the movies, you'll see somebody pouring through lines of code.

00:40:15.600 --> 00:40:23.600
Then you look at it, and it's just like the view source of some webpage or something.

00:40:23.600 --> 00:40:26.600
You're not hacking anything.

00:40:26.600 --> 00:40:29.600
You're just looking at the webpage.

00:40:29.600 --> 00:40:31.600
Guys, I found the source to this webpage.

00:40:31.600 --> 00:40:32.600
I'm going in.

00:40:32.600 --> 00:40:37.600
Yeah.

00:40:37.600 --> 00:40:38.600
Wow.

00:40:38.600 --> 00:40:39.600
And I've got the JavaScript next.

00:40:39.600 --> 00:40:40.600
Oh, my gosh.

00:40:40.600 --> 00:40:42.600
I can't believe they just published this.

00:40:42.600 --> 00:40:43.600
Don't hide it.

00:40:43.600 --> 00:40:45.600
Yeah.

00:40:45.600 --> 00:40:48.600
So anyway, that's funny.

00:40:48.600 --> 00:40:49.600
Yeah.

00:40:49.600 --> 00:40:50.600
Anyway.

00:40:50.600 --> 00:40:51.600
All right.

00:40:51.600 --> 00:40:52.600
That's it.

00:40:52.600 --> 00:40:54.600
Well, thanks a lot for a great episode.

00:40:54.600 --> 00:40:55.600
Yeah.

00:40:55.600 --> 00:40:58.600
As always, catch you later.

00:40:58.600 --> 00:40:59.600
Bye, everyone.

