WEBVTT

00:00:00.000 --> 00:00:01.000
Hey, everyone.


00:00:01.000 --> 00:00:02.000
Hey.


00:00:02.000 --> 00:00:03.000
Hey, Brian.


00:00:03.000 --> 00:00:04.000
Hey, Anthony.


00:00:04.000 --> 00:00:09.960
Welcome to the show, you guys.


00:00:09.960 --> 00:00:10.960
This is a big one.


00:00:10.960 --> 00:00:11.960
You about ready to kick it off?


00:00:11.960 --> 00:00:12.960
Yeah.


00:00:12.960 --> 00:00:13.960
Yeah, let's do it.


00:00:13.960 --> 00:00:14.960
All right.


00:00:14.960 --> 00:00:20.080
Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:20.080 --> 00:00:21.080
to your earbuds.


00:00:21.080 --> 00:00:26.920
This is episode 256, or as Anthony Shaw likes to put it, 2 to the 8th, recorded October


00:00:26.920 --> 00:00:32.760
27th 2021 again, unless you're Anthony, which is probably like a totally different day in the future because he's in Australia


00:00:32.760 --> 00:00:38.480
I'm Michael Kennedy and I'm Brian Okken and I'm Anthony Shaw. Hey, hey Anthony


00:00:38.480 --> 00:00:45.080
How is the the 28th is the next day gonna be good or things are okay. Yeah, it's pretty sunny today


00:00:45.080 --> 00:00:51.380
It's nice right on. Okay, so the world hanging that things together for one more day. Fantastic. Welcome to the show


00:00:51.380 --> 00:00:56.280
You've been here before you've been on talk Python a bunch of times friend of the show


00:00:56.280 --> 00:00:58.320
all sorts of stuff.


00:00:58.320 --> 00:00:59.800
So I'm sure many people know you,


00:00:59.800 --> 00:01:02.520
but just tell people a bit about yourself.


00:01:02.520 --> 00:01:05.280
You're doing more techie things these days.


00:01:05.280 --> 00:01:08.160
You're a little closer to the code, maybe?


00:01:08.160 --> 00:01:09.320
- Yeah, so earlier this year,


00:01:09.320 --> 00:01:11.600
I started working at Microsoft


00:01:11.600 --> 00:01:16.600
and worked with Nina Zakharenko on Python inside Microsoft.


00:01:16.600 --> 00:01:19.320
And yeah, a lot of what I'm doing at the moment,


00:01:19.320 --> 00:01:21.760
it's just running around,


00:01:21.760 --> 00:01:24.200
breaking things sometimes on purpose.


00:01:26.040 --> 00:01:27.960
- Yeah, just saying how we can improve our experience


00:01:27.960 --> 00:01:29.760
and working with VS Code and Azure


00:01:29.760 --> 00:01:30.760
and a whole bunch of other stuff.


00:01:30.760 --> 00:01:34.360
So yeah, it's been a while since the last episode


00:01:34.360 --> 00:01:36.680
was episode 100, I think.


00:01:36.680 --> 00:01:39.160
- Wow, you're hitting the big numbers.


00:01:39.160 --> 00:01:41.160
- So yeah, this two to the eighth


00:01:41.160 --> 00:01:44.440
is a significant milestone, I think.


00:01:44.440 --> 00:01:46.000
- It is. - It's pretty cool.


00:01:46.000 --> 00:01:46.840
- Yeah, awesome.


00:01:46.840 --> 00:01:47.660
Well, we're happy to have you here.


00:01:47.660 --> 00:01:48.960
Thanks for being here.


00:01:48.960 --> 00:01:52.280
Also something to do with a puppy I've seen on Twitter.


00:01:52.280 --> 00:01:53.760
- Oh yeah, I got a puppy as well.


00:01:53.760 --> 00:01:54.600
- Oh, how cute.


00:01:54.600 --> 00:01:56.720
- He's not. - Golden something.


00:01:56.720 --> 00:02:01.720
- He's a border collie, but he's kind of golden colored.


00:02:01.720 --> 00:02:03.840
But he's not in the room at the moment.


00:02:03.840 --> 00:02:06.240
He's not allowed in here while I'm recording.


00:02:06.240 --> 00:02:09.000
I thought it would be a bit chaotic.


00:02:09.000 --> 00:02:10.680
- Yeah, my puppy sometimes is here,


00:02:10.680 --> 00:02:14.320
but it's very bizarre the way that puppies


00:02:14.320 --> 00:02:15.920
socialize around COVID.


00:02:15.920 --> 00:02:18.120
Instead of us being gone and then we come home,


00:02:18.120 --> 00:02:21.720
she now knows and understands the expressions I make


00:02:21.720 --> 00:02:22.640
to end a Zoom call.


00:02:22.640 --> 00:02:23.880
So she'll sit quietly for an hour,


00:02:23.880 --> 00:02:25.040
And as soon as I say goodbye on Zoom,


00:02:25.040 --> 00:02:26.200
she's like, we're ready to go, let's go.


00:02:26.200 --> 00:02:29.760
It's super bizarre, but yeah, that's the world we live.


00:02:29.760 --> 00:02:31.380
So enjoy the new puppy.


00:02:31.380 --> 00:02:36.180
Brian, you wanna kick us off with our first topic here?


00:02:36.180 --> 00:02:37.640
- Sure, yeah.


00:02:37.640 --> 00:02:41.280
So Lucas Lange, he's, what is he again?


00:02:41.280 --> 00:02:42.760
The developer in residence?


00:02:42.760 --> 00:02:43.600
- Yes.


00:02:43.600 --> 00:02:44.520
- For Python.


00:02:44.520 --> 00:02:46.280
Anyway, he wrote an article called,


00:02:46.280 --> 00:02:47.920
where does all the effort go?


00:02:47.920 --> 00:02:51.680
Looking at Python core developer activity.


00:02:51.680 --> 00:02:54.180
And I kind of really liked this article.


00:02:54.180 --> 00:02:58.740
He not only talks about really what's going on


00:02:58.740 --> 00:03:00.540
with developers and who's doing what,


00:03:00.540 --> 00:03:05.260
to start off with, he talked about how he got this data.


00:03:05.260 --> 00:03:09.780
So this is also sort of a data processing


00:03:09.780 --> 00:03:13.760
sort of information scraping sort of article.


00:03:13.760 --> 00:03:18.760
He's looking at the GitHub repository data


00:03:18.760 --> 00:03:20.620
for CPython, of course.


00:03:20.620 --> 00:03:23.260
and specifically pull request data.


00:03:23.260 --> 00:03:25.380
So there's a discussion about,


00:03:25.380 --> 00:03:27.880
he's even using data set, which is nice.


00:03:27.880 --> 00:03:30.100
We've covered that on the show


00:03:30.100 --> 00:03:33.140
and even lists the SQL queries that he has


00:03:33.140 --> 00:03:35.520
to try to get some of this data.


00:03:35.520 --> 00:03:38.060
So some of the neat data that he's got,


00:03:38.060 --> 00:03:42.940
oh, also since Git, the data is from the time


00:03:42.940 --> 00:03:44.300
when CPython moved to GitHub.


00:03:44.300 --> 00:03:47.180
So that's February 10, 2017.


00:03:48.300 --> 00:03:51.720
And it's a, he mentions that it's up through October 9th


00:03:51.720 --> 00:03:53.740
is when he pulled the data.


00:03:53.740 --> 00:03:56.780
So, but all the information is there


00:03:56.780 --> 00:03:58.700
so you could grab it yourself if you want.


00:03:58.700 --> 00:04:00.240
Even the little scripts he's got


00:04:00.240 --> 00:04:03.080
for modifying some of the data.


00:04:03.080 --> 00:04:05.600
But so some of the interesting things,


00:04:05.600 --> 00:04:10.220
the top parts of CPython that are modified,


00:04:10.220 --> 00:04:13.100
it's probably not that surprising that cval.c


00:04:13.100 --> 00:04:17.100
is involved in 259 merge requests.


00:04:17.100 --> 00:04:20.020
is the top merged file.


00:04:20.020 --> 00:04:26.380
- C val.c, yeah, that's where the byte code processor is.


00:04:26.380 --> 00:04:29.600
So yeah, that's where all, that's the center point


00:04:29.600 --> 00:04:30.980
or the tunnel everything flows through.


00:04:30.980 --> 00:04:32.060
Does that make sense?


00:04:32.060 --> 00:04:34.580
- Yeah, and then goes on and looks at


00:04:34.580 --> 00:04:38.700
which contributors have merged.


00:04:38.700 --> 00:04:41.060
And this is an interesting thing,


00:04:41.060 --> 00:04:43.380
or had been involved in PRs.


00:04:44.260 --> 00:04:49.260
He lists the top 50 people, but it includes some bots,


00:04:49.260 --> 00:04:51.340
which is interesting.


00:04:51.340 --> 00:04:52.860
- I was gonna ask that.


00:04:52.860 --> 00:04:54.860
I thought Bedivere is probably gonna be up there


00:04:54.860 --> 00:04:56.420
or Mrs. LinkedIn.


00:04:56.420 --> 00:04:57.420
- Yeah. - They're both bots,


00:04:57.420 --> 00:04:58.780
by the way.


00:04:58.780 --> 00:05:01.780
- So this is a, I'd actually love to talk to,


00:05:01.780 --> 00:05:04.540
or either me or Michael or somebody,


00:05:04.540 --> 00:05:06.820
talk to one of the core Python people


00:05:06.820 --> 00:05:08.760
to talk about the different bots that are used


00:05:08.760 --> 00:05:10.180
and why they're used.


00:05:10.180 --> 00:05:12.500
'Cause that's an interesting thing of large projects


00:05:12.500 --> 00:05:14.340
using bots to help out with some of the work.


00:05:14.340 --> 00:05:15.840
- Yeah, that is interesting.


00:05:15.840 --> 00:05:21.620
- And anyway, the non-bots,


00:05:21.620 --> 00:05:23.260
there's a couple of people that stand out,


00:05:23.260 --> 00:05:28.260
Victor Stinner and Serhii Sorkaka,


00:05:28.260 --> 00:05:31.160
so I apologize for messing up your name,


00:05:31.160 --> 00:05:33.980
but they're really up there,


00:05:33.980 --> 00:05:36.780
so that's pretty interesting that they're involved a lot.


00:05:36.780 --> 00:05:40.280
And then there's a description here,


00:05:40.280 --> 00:05:43.440
A nice note that Lucas writes,


00:05:43.440 --> 00:05:45.840
clearly it pays to be a bot or a release manager


00:05:45.840 --> 00:05:49.520
since that's naturally causes you to make a lot of commits.


00:05:49.520 --> 00:05:52.520
Victor and Sarah, he are neither of these things


00:05:52.520 --> 00:05:55.440
and still generate an amazing activity, kudos.


00:05:55.440 --> 00:05:57.660
And also it's not a competition,


00:05:57.660 --> 00:05:59.040
but it's still interesting to see


00:05:59.040 --> 00:06:01.540
who makes all these recent changes.


00:06:01.540 --> 00:06:05.360
By the way, that top PR thing was only since


00:06:05.360 --> 00:06:06.840
the beginning of January, 2020.


00:06:06.840 --> 00:06:09.640
So taking a look at the more recent stuff.


00:06:09.640 --> 00:06:12.960
And then one of the things that's interesting


00:06:12.960 --> 00:06:17.500
in looking at who contributed where, I didn't know this.


00:06:17.500 --> 00:06:18.960
There's an experts index.


00:06:18.960 --> 00:06:23.960
So that was linked, ooh, it's asleep.


00:06:23.960 --> 00:06:28.520
An experts index that is part of the Python developers guide.


00:06:28.520 --> 00:06:29.800
I didn't know this was here.


00:06:29.800 --> 00:06:33.360
It's a kind of lists parts, some parts of the system


00:06:33.360 --> 00:06:35.320
but there's blanks.


00:06:35.320 --> 00:06:40.320
And so there's, so Lucas also, or listed,


00:06:40.320 --> 00:06:46.360
did a script and pulled out the top five contributors


00:06:46.360 --> 00:06:49.920
to each file, which is kind of an amazing list


00:06:49.920 --> 00:06:53.720
of all of the different, of, you know,


00:06:53.720 --> 00:06:57.360
the top five people for every file within CPython.


00:06:57.360 --> 00:06:59.080
So if, this is kind of neat,


00:06:59.080 --> 00:07:00.880
because if you're going to do a PR


00:07:00.880 --> 00:07:03.320
or you're working on a fix or something,


00:07:03.320 --> 00:07:05.040
and you're a little confused by some of the code,


00:07:05.040 --> 00:07:06.980
one of these people might be able to help you out.


00:07:06.980 --> 00:07:08.520
So this is kind of a neat list.


00:07:08.520 --> 00:07:14.420
So there's a, at the bottom of the article also,


00:07:14.420 --> 00:07:18.420
he talks about some of the takeaways from this.


00:07:18.420 --> 00:07:21.860
Don't have this right off the top of my head.


00:07:21.860 --> 00:07:25.940
Merging, how long it takes to merge a PR.


00:07:25.940 --> 00:07:30.620
So it's hard to draw information from this data


00:07:30.620 --> 00:07:32.060
because it's all over the map.


00:07:32.060 --> 00:07:34.500
The standard deviations are pretty large,


00:07:34.500 --> 00:07:37.980
But if a core developer merges their own PR,


00:07:37.980 --> 00:07:39.360
it takes on average about seven days


00:07:39.360 --> 00:07:42.720
to get through the process, give or take 42 days.


00:07:42.720 --> 00:07:47.000
And then core developer authoring a PR,


00:07:47.000 --> 00:07:48.280
which is merged by somebody else,


00:07:48.280 --> 00:07:51.060
it takes longer, about 20 days, give or take 78.


00:07:51.060 --> 00:07:56.360
And then community authors up to 20 days, give or take 80.


00:07:56.360 --> 00:07:58.320
But I mean, I work on commercial projects


00:07:58.320 --> 00:08:01.040
that are not really that much faster than this.


00:08:01.040 --> 00:08:04.160
So it's not too bad.


00:08:04.160 --> 00:08:05.160
Yeah, this is.


00:08:05.160 --> 00:08:08.160
Yeah, Anthony, what do you think of this?


00:08:08.160 --> 00:08:11.160
You spent a lot of time inside the CPython code.


00:08:11.160 --> 00:08:15.160
I mean, you did write a book, CPython Internals, which people can check out, right?


00:08:15.160 --> 00:08:19.160
Yeah, that's how you have to write a book about CPython source code.


00:08:19.160 --> 00:08:20.160
So it's interesting.


00:08:20.160 --> 00:08:25.160
I'm first of all, I'm super excited about Lukasz being the new developer in residence.


00:08:25.160 --> 00:08:32.160
I think he's got the right approach and he's already made, you know, really promising progress.


00:08:32.160 --> 00:08:39.440
I think in terms of trying to make the community contribution process a bit slicker.


00:08:39.440 --> 00:08:46.080
Yeah, that's that at the bottom. Just watching the GitHub repository, core developers


00:08:46.080 --> 00:08:52.880
working on the repository and making changes and stuff from the outside looks fairly seamless.


00:08:52.880 --> 00:09:00.160
My own personal experience has been sometimes it's quite like if your PR gets responded to


00:09:00.720 --> 00:09:05.840
within the first week, then it probably get merged pretty quickly. And then if it doesn't,


00:09:05.840 --> 00:09:12.320
then it just kind of ends up in the pile. And I've had ones in there for like three years.


00:09:12.320 --> 00:09:17.680
Right. The average was seven, but it could go out at like another 40 days. And it's probably


00:09:17.680 --> 00:09:24.240
like really quick or really far. Well, that metric is how long they take to get merged,


00:09:24.240 --> 00:09:26.640
which I guess requires that they are merged.


00:09:26.640 --> 00:09:29.040
- Oh, yeah.


00:09:29.040 --> 00:09:30.040
- So that's a lot of thought.


00:09:30.040 --> 00:09:33.920
I mean, there's basically just like loads of people contributing stuff,


00:09:33.920 --> 00:09:38.480
and there aren't enough people with enough time to sift through it all,


00:09:38.480 --> 00:09:40.400
and it just makes it really tricky.


00:09:40.400 --> 00:09:43.280
And the project needs to continue marching forward,


00:09:43.280 --> 00:09:46.800
and there's people who are dedicated to working on the core developers.


00:09:46.800 --> 00:09:51.760
But, you know, some of the community contributions are really valuable.


00:09:51.760 --> 00:09:57.120
I think that's what's promising to me is that Lukasz is kind of looking at that


00:09:57.120 --> 00:10:02.880
and not just taking this role on as "I'm going to be a 100% core developer."


00:10:02.880 --> 00:10:04.400
Yeah.


00:10:04.400 --> 00:10:08.080
Because, yeah, there's already lots of other people on the team


00:10:08.080 --> 00:10:10.720
who are making some amazing contributions.


00:10:10.720 --> 00:10:15.120
Pablo has been working on the new Pazza


00:10:15.120 --> 00:10:20.080
and now he's working on this stackless changes in 3.11.


00:10:20.080 --> 00:10:25.280
Yeah, there's so many things going on at the moment in in c python. So it's really encouraging to see


00:10:25.280 --> 00:10:30.160
Yeah, it's super encouraging. I think lukash is doing a good job sort of


00:10:30.160 --> 00:10:33.520
Smoothing out the edges to just make it easier for everyone to go faster


00:10:33.520 --> 00:10:37.920
Which I think a lot of times in teams, you know, not specifically here, but in general


00:10:37.920 --> 00:10:40.400
there's these people who are kind of


00:10:40.400 --> 00:10:42.720
Oh, that's the person you can ask to make the ci


00:10:42.720 --> 00:10:44.560
Work again when you break it


00:10:44.560 --> 00:10:48.160
this is the person you asked like you just set up a new machine and remembers how to do that and like


00:10:48.480 --> 00:10:53.600
You don't necessarily get direct credit for doing that work, but without them, it's just way harder.


00:10:53.600 --> 00:10:56.400
And I feel like he's doing that for CPython behind the scenes.


00:10:56.400 --> 00:11:01.200
Yeah, the experts index is really helpful if you want to get involved in bug triaging.


00:11:01.200 --> 00:11:05.200
So that's something that people are open to help with.


00:11:05.200 --> 00:11:09.840
If you go on bugs.python.org and you want to help to triage bugs,


00:11:09.840 --> 00:11:12.400
often what you have to do is kind of look at it,


00:11:12.400 --> 00:11:16.720
make sure that the person who's reported it is filled in all enough information,


00:11:16.720 --> 00:11:19.920
And then basically add people on the experts index


00:11:19.920 --> 00:11:23.920
To something called the nosy list which is like a cc list basically


00:11:23.920 --> 00:11:28.320
On the bug and then yeah, it's just kind of directing it to the right people


00:11:28.320 --> 00:11:30.800
Once you've done that for a while, then you kind of get given


00:11:30.800 --> 00:11:33.200
like a triage


00:11:33.200 --> 00:11:35.200
flag in your user and then


00:11:35.200 --> 00:11:39.520
If you've been doing that for even longer, then you could be promoted up to a core developer


00:11:39.520 --> 00:11:41.760
And there's a few people who've gone through that that rope


00:11:41.760 --> 00:11:44.320
Um over the last couple of years nice


00:11:45.520 --> 00:11:46.680
All right, Anthony, while you're talking,


00:11:46.680 --> 00:11:49.040
I got two things to share out of the audience.


00:11:49.040 --> 00:11:51.760
Dimitri Figal, hey Dimitri, great to see you here.


00:11:51.760 --> 00:11:54.000
Dimitri says, thanks for inviting Anthony.


00:11:54.000 --> 00:11:56.000
He's someone I look up to, very nice.


00:11:56.000 --> 00:11:57.760
- Thanks, Dimitri, good to see you.


00:11:57.760 --> 00:12:00.000
- Yeah, and Waylon, who was recently on Talk Python.


00:12:00.000 --> 00:12:02.120
Hey, Waylon, says what a great lineup here,


00:12:02.120 --> 00:12:04.320
also kind of for you.


00:12:04.320 --> 00:12:06.280
And also Henry Schreiner, hey Henry,


00:12:06.280 --> 00:12:08.200
also recently on Talk Python,


00:12:08.200 --> 00:12:11.520
says both PRs I've been involved with to see Python


00:12:11.520 --> 00:12:13.440
got in in about a day, I believe,


00:12:13.440 --> 00:12:15.480
which that's pretty amazing.


00:12:15.480 --> 00:12:17.200
- That's pretty good, yeah.


00:12:17.200 --> 00:12:18.100
- That's great.


00:12:18.100 --> 00:12:20.720
- Yeah, so before we move off from this one, Brian,


00:12:20.720 --> 00:12:21.560
this is a good pick.


00:12:21.560 --> 00:12:22.820
One thing I just wanna point out as well


00:12:22.820 --> 00:12:25.160
is all of these cool stats and these graphs


00:12:25.160 --> 00:12:27.480
and everything we're seeing here apply to CPython


00:12:27.480 --> 00:12:29.360
because it's on GitHub, right?


00:12:29.360 --> 00:12:30.200
- Yes.


00:12:30.200 --> 00:12:32.100
- But you can run the same code


00:12:32.100 --> 00:12:34.780
and run dataset from Simon Willison against it,


00:12:34.780 --> 00:12:37.280
but against a different repo, I would imagine, right?


00:12:37.280 --> 00:12:38.120
- Oh, yeah.


00:12:38.120 --> 00:12:39.340
- Yeah, so if you run a project,


00:12:39.340 --> 00:12:43.560
you could probably do a similar analysis for your project.


00:12:43.560 --> 00:12:44.480
- That's a good idea.


00:12:44.480 --> 00:12:45.320
- Yeah.


00:12:45.320 --> 00:12:47.320
- Cool. - All right.


00:12:47.320 --> 00:12:49.320
Speaking of good ideas,


00:12:49.320 --> 00:12:51.320
and it's interesting that Henry's out in the audience,


00:12:51.320 --> 00:12:53.320
because I feel like we might have been


00:12:53.320 --> 00:12:55.320
responsible for this article.


00:12:55.320 --> 00:12:57.320
Clearly we did not write it.


00:12:57.320 --> 00:12:59.320
We may have triggered, is what I'm saying.


00:12:59.320 --> 00:13:01.320
Mostly me.


00:13:01.320 --> 00:13:03.320
In not the positive way, right?


00:13:03.320 --> 00:13:07.320
So this is a cool


00:13:07.320 --> 00:13:09.320
article by Paul Gansel, who is also


00:13:09.320 --> 00:13:11.320
over on Talk Python, talking about


00:13:11.320 --> 00:13:13.320
the mysteries of date/time and stuff.


00:13:13.320 --> 00:13:17.320
He maintains the detail package and set up tools, projects,


00:13:17.320 --> 00:13:19.320
and so on.


00:13:19.320 --> 00:13:21.320
Over on episode 271.


00:13:21.320 --> 00:13:24.320
So he wrote an article that said,


00:13:24.320 --> 00:13:27.320
"Why you shouldn't invoke setup.py directly."


00:13:27.320 --> 00:13:30.320
And the reason I think I might have somehow had something


00:13:30.320 --> 00:13:33.320
to do with this is Henry was on talking about CI build wheel


00:13:33.320 --> 00:13:35.320
and all the proper ways to build packages.


00:13:35.320 --> 00:13:39.320
I said, "Oh, you can run setup Python, setup.py, space,


00:13:39.320 --> 00:13:41.320
you know, wheel or bdist or something."


00:13:41.320 --> 00:13:42.520
or BDist or something, and they're like,


00:13:42.520 --> 00:13:44.680
"No, no, no, you could, but please don't do that."


00:13:44.680 --> 00:13:46.360
And then here we have this article like two days later.


00:13:46.360 --> 00:13:48.560
So I don't know if that was part of that conversation,


00:13:48.560 --> 00:13:51.440
but it's a really good article talking about


00:13:51.440 --> 00:13:55.880
the state of building Python packages.


00:13:55.880 --> 00:13:57.840
And it says, "Look, for a long time,


00:13:57.840 --> 00:14:01.740
"setup tools and distutils were the only game in town


00:14:01.740 --> 00:14:04.560
"when it came to creating Python packages."


00:14:04.560 --> 00:14:08.400
Right, so you could do something like invoke Python setup,


00:14:08.400 --> 00:14:10.880
BDist, SDist, wheel, and so on.


00:14:10.880 --> 00:14:15.200
Wait, I see.


00:14:15.200 --> 00:14:17.560
So Paul is actually in the audience, real time.


00:14:17.560 --> 00:14:18.160
Fantastic.


00:14:18.160 --> 00:14:19.120
Hey, Paul.


00:14:19.120 --> 00:14:21.440
Says, I think I did it because Matthew Fikert asked for it


00:14:21.440 --> 00:14:23.160
on Twitter, and I got sniped.


00:14:23.160 --> 00:14:23.720
Yeah, perfect.


00:14:23.720 --> 00:14:24.240
OK, good.


00:14:24.240 --> 00:14:26.240
So just a coincidence.


00:14:26.240 --> 00:14:27.920
Fantastic.


00:14:27.920 --> 00:14:30.440
But yeah, so the reason this is extra interesting to me--


00:14:30.440 --> 00:14:31.980
and thank you, Paul, for writing it--


00:14:31.980 --> 00:14:38.720
is I was still doing this Python setup, PY, various commands.


00:14:38.720 --> 00:14:40.040
And I was talking to Henry.


00:14:40.040 --> 00:14:41.600
He's like, no, you shouldn't do that.


00:14:41.600 --> 00:14:42.480
You should do it this other way.


00:14:42.480 --> 00:14:45.040
I'm like, he said, well, okay, well, how should I do it?


00:14:45.040 --> 00:14:48.040
So you should use build, the build package.


00:14:48.040 --> 00:14:50.660
What is this build package you speak of?


00:14:50.660 --> 00:14:55.000
You know, so we've talked about pyproject.toml


00:14:55.000 --> 00:14:55.860
a bunch of times.


00:14:55.860 --> 00:14:58.160
We've talked about things like flit and stuff


00:14:58.160 --> 00:14:59.960
that will use it, right?


00:14:59.960 --> 00:15:02.040
This all comes from PEP 517.


00:15:02.040 --> 00:15:06.320
And there is a package called build.


00:15:06.320 --> 00:15:07.620
You can pip install build.


00:15:08.760 --> 00:15:13.260
And then you do things like Python-M for module, run build.


00:15:13.260 --> 00:15:16.260
And you can say, I want an S-disk, I want a wheel,


00:15:16.260 --> 00:15:17.980
and things like that.


00:15:17.980 --> 00:15:22.780
And this acts as a front end to things like setup tools,


00:15:22.780 --> 00:15:27.660
to the various back ends that do building for Python.


00:15:27.660 --> 00:15:28.980
Flit, yeah.


00:15:28.980 --> 00:15:31.780
All these different things that understand it, right?


00:15:31.780 --> 00:15:35.860
So it says, all direct invocations,


00:15:35.860 --> 00:15:38.220
Paul says, all direct invocations of setup.py


00:15:38.220 --> 00:15:42.060
are effectively deprecated in favor of purpose-built,


00:15:42.060 --> 00:15:45.680
standard-based CLI tools like pip, build, and talks.


00:15:45.680 --> 00:15:49.860
So this is quite a long article.


00:15:49.860 --> 00:15:51.500
There's a lot to go through.


00:15:51.500 --> 00:15:53.380
It has some interesting history.


00:15:53.380 --> 00:15:56.460
So in the early days, there wasn't even distutils.


00:15:56.460 --> 00:15:59.340
And then in Python 2, distutils got added,


00:15:59.340 --> 00:16:01.740
and then set of tools came along.


00:16:01.740 --> 00:16:03.620
And then there were, there's, you know, while they work,


00:16:03.620 --> 00:16:04.460
there's still problems.


00:16:04.460 --> 00:16:12.860
Like for example, you might have dependencies that you have to install to run the setup.


00:16:12.860 --> 00:16:17.260
But the way you install stuff and figure out what you depend upon is by running the setup.


00:16:17.260 --> 00:16:19.680
So what do you do?


00:16:19.680 --> 00:16:21.480
So an example that would be Cython, right?


00:16:21.480 --> 00:16:26.940
So for in the, you might have to import Cython and then the invocation of calling setup,


00:16:26.940 --> 00:16:30.660
you tell it how to Cythonize the pyx files, right?


00:16:30.660 --> 00:16:32.900
But that's obviously not going to work


00:16:32.900 --> 00:16:36.420
because you're going to have to have Cython installed.


00:16:36.420 --> 00:16:38.100
But how do you express that?


00:16:38.100 --> 00:16:40.460
It's like this chicken and egg problem.


00:16:40.460 --> 00:16:45.460
All right, so let me pull up my notes here.


00:16:45.460 --> 00:16:48.540
Yeah, so basically one of the big questions was


00:16:48.540 --> 00:16:51.260
why am I not seeing deprecation warnings?


00:16:51.260 --> 00:16:52.420
Let me go down a little further.


00:16:52.420 --> 00:16:55.620
Yeah, so if I'm not supposed to do this,


00:16:55.620 --> 00:16:59.220
why isn't screaming from the top of its terminal,


00:16:59.220 --> 00:17:02.680
Stop, stop, stop, why are you doing this, right?


00:17:02.680 --> 00:17:05.960
So there's a lot of commands that still have indirect uses


00:17:05.960 --> 00:17:08.760
of a distutils and stuff.


00:17:08.760 --> 00:17:11.600
So it's a little tricky to deprecate it,


00:17:11.600 --> 00:17:14.680
but basically you should consider it deprecated.


00:17:14.680 --> 00:17:15.520
At the end of the day,


00:17:15.520 --> 00:17:16.880
it's better to replace your set of commands


00:17:16.880 --> 00:17:19.020
with tools like build,


00:17:19.020 --> 00:17:23.780
instead of set up the pysdist or bdist wheel,


00:17:23.780 --> 00:17:26.760
or talks and knocks instead of set up pytest


00:17:26.760 --> 00:17:29.320
and other commands backed by projects


00:17:29.320 --> 00:17:31.120
intended to support that.


00:17:31.120 --> 00:17:32.160
- Yeah. - Yeah.


00:17:32.160 --> 00:17:34.800
So that sound good to you guys?


00:17:34.800 --> 00:17:36.340
Where were you on this?


00:17:36.340 --> 00:17:40.720
- Brian, you go.


00:17:40.720 --> 00:17:42.700
- Well, I don't use--


00:17:42.700 --> 00:17:43.540
- I have opinions.


00:17:43.540 --> 00:17:45.640
- I mean, I indirectly use build,


00:17:45.640 --> 00:17:47.520
but I basically just use flit.


00:17:47.520 --> 00:17:50.760
So I'm not writing things with C extensions.


00:17:50.760 --> 00:17:54.160
So pure Python stuff, I just do a flit build


00:17:54.160 --> 00:17:57.320
or whatever, that works fine.


00:17:57.320 --> 00:17:58.840
- Yeah, so that's kind of,


00:17:58.840 --> 00:18:01.340
I mean, that's using the pyproject.toml stuff, right?


00:18:01.340 --> 00:18:02.180
- Yeah.


00:18:02.180 --> 00:18:03.640
- Yeah, Anthony?


00:18:03.640 --> 00:18:08.060
- Yeah, I mean, I kind of, if I'm starting a project now,


00:18:08.060 --> 00:18:09.840
then I use pyproject.toml,


00:18:09.840 --> 00:18:12.240
and the project doesn't have a setup.py.


00:18:12.240 --> 00:18:17.160
There were some reasons why I had to add one in the past,


00:18:17.160 --> 00:18:18.320
but that's mostly fixed now.


00:18:18.320 --> 00:18:22.960
So I'm either using flit or something similar like poetry.


00:18:22.960 --> 00:18:29.840
Um, yeah, and I've worked on projects years and years ago where the setup.py was like just


00:18:29.840 --> 00:18:34.080
Ended up just being a script to run ad hoc commands. Like there was a test


00:18:34.080 --> 00:18:37.840
Set up.py test and then there's like and lint and


00:18:37.840 --> 00:18:42.880
Yeah, what does that have to do with installing software, right? Why is that? Yeah, nothing


00:18:42.880 --> 00:18:47.760
It was just like yeah, it just ended up being an entry point to to do things


00:18:47.760 --> 00:18:52.880
And one happens to be installed, but there's a bunch of other stuff you might randomly do. Yeah, and that's fine


00:18:52.880 --> 00:18:54.200
- I find that it's being deprecated,


00:18:54.200 --> 00:18:58.140
but it just, you know, CPython still does that.


00:18:58.140 --> 00:19:01.600
Like the setup.py and CPython is still used in that way


00:19:01.600 --> 00:19:05.240
and called and invoked directly in the source code.


00:19:05.240 --> 00:19:09.720
This is so, yeah, it's good that it'll be deprecated,


00:19:09.720 --> 00:19:12.000
but I don't think the tooling is quite ready yet.


00:19:12.000 --> 00:19:14.880
- He's not really saying to get rid of setup.py,


00:19:14.880 --> 00:19:17.080
just don't use it to run it directly.


00:19:17.080 --> 00:19:19.360
- Yeah, find something better.


00:19:19.360 --> 00:19:20.680
- pip should do that.


00:19:20.680 --> 00:19:22.280
Pip should do the discovery for you,


00:19:22.280 --> 00:19:27.280
for PEP 517 and run the correct steps for you.


00:19:27.280 --> 00:19:31.540
- Yeah, absolutely.


00:19:31.540 --> 00:19:33.420
So a couple of comments out in the live stream


00:19:33.420 --> 00:19:35.700
is that while recommending build,


00:19:35.700 --> 00:19:38.920
it's nearly impossible to Google to find it.


00:19:38.920 --> 00:19:40.540
(laughs)


00:19:40.540 --> 00:19:41.980
Henry says, "I love and hate the name.


00:19:41.980 --> 00:19:44.740
"So authoritative, so un-Googleable


00:19:44.740 --> 00:19:46.380
"and a bit hard to use in conversation."


00:19:46.380 --> 00:19:48.940
But yeah, yeah, for sure.


00:19:48.940 --> 00:19:51.580
So I think if you wanna take away from this conversation,


00:19:51.580 --> 00:19:54.620
Right at the top, there's a tldr section that Paul put in.


00:19:54.620 --> 00:19:56.780
Click on the summary, takes you down to a summary,


00:19:56.780 --> 00:19:58.980
and you can go to a table, and it says,


00:19:58.980 --> 00:20:00.860
"I was about to type this.


00:20:00.860 --> 00:20:03.300
"What should I do instead?"


00:20:03.300 --> 00:20:06.880
I was about to type setup.py sdist.


00:20:06.880 --> 00:20:08.300
What should you type?


00:20:08.300 --> 00:20:11.980
Python-m build, having build installed.


00:20:11.980 --> 00:20:14.740
Or if I was gonna type setup.py bdist wheel,


00:20:14.740 --> 00:20:17.400
I should type Python-m build,


00:20:17.400 --> 00:20:19.060
--wheel or something like that.


00:20:19.060 --> 00:20:22.440
Setup.py test, oh, maybe pytest or Tox or Knox.


00:20:22.440 --> 00:20:25.060
We covered Knox recently with Preston,


00:20:25.060 --> 00:20:28.380
which was really fun, I believe, that's the episode.


00:20:28.380 --> 00:20:31.680
Setup.py install, no, that's pip install.


00:20:31.680 --> 00:20:36.260
Python, setup.py develop, no, that's pip install -e.


00:20:36.260 --> 00:20:38.740
And then as well as upload, it goes back to Twine.


00:20:38.740 --> 00:20:43.100
So yeah, anyway, I think this is the most actionable bit here.


00:20:43.100 --> 00:20:44.300
- Yeah, it's good.


00:20:44.300 --> 00:20:46.580
- Yeah, indeed.


00:20:47.820 --> 00:20:51.140
All right, well, Anthony, let's talk about


00:20:51.140 --> 00:20:52.940
keeping an eye on things.


00:20:52.940 --> 00:20:55.640
- Yeah, so I wanted to highlight a project


00:20:55.640 --> 00:20:58.380
which has been in the works for a while,


00:20:58.380 --> 00:21:01.780
but they've just recently finalized the specifications.


00:21:01.780 --> 00:21:03.460
So this is called OpenTelemetry.


00:21:03.460 --> 00:21:08.100
It's a part of the Cloud Native Computing Foundation,


00:21:08.100 --> 00:21:13.100
the CNCF, and it's a cross-language event tracing,


00:21:13.100 --> 00:21:16.840
performance tracing, logging, sampling,


00:21:16.840 --> 00:21:25.320
framework for applications, in particular for distributed applications. So if you've got an application which is spread across


00:21:25.320 --> 00:21:33.000
multiple microservices, and you want to trace things or monitor performance or whatever across all of the stack.


00:21:33.000 --> 00:21:41.480
It's super, it's a super hard problem, right? Maybe you've got a Docker container running this thing that Docker container calls some other service on a different Docker container and


00:21:41.480 --> 00:21:43.600
Maybe the logs are even transient.


00:21:43.600 --> 00:21:46.640
What are you going to do to know if something went wrong?


00:21:46.640 --> 00:21:47.640
Where exactly?


00:21:47.640 --> 00:21:52.320
And if you've got an application that's spread across, well, if it's built into multiple


00:21:52.320 --> 00:21:57.200
microservices, then, and one of those services has a fault, it's really hard to know where


00:21:57.200 --> 00:21:58.360
that fault came from.


00:21:58.360 --> 00:22:02.840
So like, if it just says error, blah, blah, blah, blah, you're like, okay, so what triggered


00:22:02.840 --> 00:22:05.600
that error?


00:22:05.600 --> 00:22:08.000
Which request from a user at the front end?


00:22:08.000 --> 00:22:10.160
Or like, how did the error happen in the first place?


00:22:10.160 --> 00:22:11.160
how can I fix it?


00:22:11.160 --> 00:22:15.640
And also like identifying, I guess, tracking performance across your


00:22:15.640 --> 00:22:17.240
application and looking at that.


00:22:17.240 --> 00:22:20.960
So there's been attempts at doing this in the past.


00:22:20.960 --> 00:22:26.200
Open tracing and open sensors were the two kind of projects beforehand.


00:22:26.200 --> 00:22:31.760
So this new project, open telemetry is a merger of open tracing and open sensors.


00:22:31.760 --> 00:22:37.040
There's engineers from some big companies working on this, including Microsoft,


00:22:37.040 --> 00:22:41.160
but Amazon, Splunk, Google, Elastic, New Relic,


00:22:41.160 --> 00:22:42.960
and a whole bunch of others as well,


00:22:42.960 --> 00:22:45.840
including actually full-time engineers


00:22:45.840 --> 00:22:48.880
from some of those companies working on this.


00:22:48.880 --> 00:22:52.840
So yeah, I've been working with an engineer at Microsoft


00:22:52.840 --> 00:22:54.880
who works full-time on this project.


00:22:54.880 --> 00:22:56.640
He works on, actually there's a few people


00:22:56.640 --> 00:22:57.660
who work full-time on this,


00:22:57.660 --> 00:22:59.640
but the person who works full-time


00:22:59.640 --> 00:23:02.040
just on the Python components to this.


00:23:02.040 --> 00:23:06.040
So the Python SDK basically allows you


00:23:06.040 --> 00:23:07.920
to instrument lots of different frameworks.


00:23:07.920 --> 00:23:11.800
So you can basically drop it into Flask or Django


00:23:11.800 --> 00:23:16.800
or Starlet, so if you're using FastAPI


00:23:16.800 --> 00:23:20.720
and you can sort of instantly get capture


00:23:20.720 --> 00:23:23.760
of what requests are going into the application,


00:23:23.760 --> 00:23:24.960
when there's been a crash,


00:23:24.960 --> 00:23:26.760
like where that exception's gone,


00:23:26.760 --> 00:23:29.040
all the logging information.


00:23:29.040 --> 00:23:30.920
You can look at performance records and stuff.


00:23:30.920 --> 00:23:32.360
I've been sharing some examples


00:23:32.360 --> 00:23:36.280
of where I've wrapped it around a FastAPI app.


00:23:36.280 --> 00:23:38.280
And then I can see like performance


00:23:38.280 --> 00:23:40.600
of what's the average request time


00:23:40.600 --> 00:23:43.460
for each of these parts of the application.


00:23:43.460 --> 00:23:46.800
And where is that time spent even down to like--


00:23:46.800 --> 00:23:48.720
- This is the data layer section


00:23:48.720 --> 00:23:51.400
and this is the business logic and here's the--


00:23:51.400 --> 00:23:53.280
- Yeah, exactly.


00:23:53.280 --> 00:23:56.240
So I can kind of see like almost like a cool stack


00:23:56.240 --> 00:23:58.720
but across the actual components of the app.


00:23:58.720 --> 00:24:01.240
So here's where it came into FastAPI.


00:24:01.240 --> 00:24:03.560
here's where it went into database.


00:24:03.560 --> 00:24:05.160
Like here's how long the query took,


00:24:05.160 --> 00:24:08.360
here's how long the ORM took to remodel it.


00:24:08.360 --> 00:24:11.280
Here's how long Jinja2k to build the template.


00:24:11.280 --> 00:24:13.880
Like, so you can kind of see a breakdown


00:24:13.880 --> 00:24:15.440
of all the different components


00:24:15.440 --> 00:24:17.700
and how things are being pulled together.


00:24:17.700 --> 00:24:20.360
So there's two parts of OpenTelemetry,


00:24:20.360 --> 00:24:22.720
actually more than two parts.


00:24:22.720 --> 00:24:24.960
I am actually really appreciative of,


00:24:24.960 --> 00:24:28.000
even though there are lots of engineers from big companies,


00:24:28.000 --> 00:24:33.000
this hasn't been over-engineered yet.


00:24:33.000 --> 00:24:34.440
And I'm really hoping it doesn't.


00:24:34.440 --> 00:24:36.600
- Is there a factory method in here?


00:24:36.600 --> 00:24:37.600
- Yeah, exactly.


00:24:37.600 --> 00:24:40.280
Especially 'cause it's like so generic.


00:24:40.280 --> 00:24:43.000
There's a real danger of it being just over-engineered.


00:24:43.000 --> 00:24:45.800
So if you go on the website and go to registry


00:24:45.800 --> 00:24:48.120
and then pick Python on the right-hand side,


00:24:48.120 --> 00:24:50.920
you'll see the kind of different extensions you can get.


00:24:50.920 --> 00:24:53.320
So instrumentation is basically like,


00:24:53.320 --> 00:24:55.000
this is the thing I want to monitor


00:24:55.000 --> 00:25:00.000
And it could be like ASCII or async Postgres, for example,


00:25:00.000 --> 00:25:06.200
database, Celery, Django, Elasticsearch, Flask.


00:25:06.200 --> 00:25:08.700
Like there's a stack of app stacks


00:25:08.700 --> 00:25:10.060
that you can just drop it into


00:25:10.060 --> 00:25:12.540
and it will give you all the tracing information.


00:25:12.540 --> 00:25:14.880
And then there's these things called exporters,


00:25:14.880 --> 00:25:17.140
which is basically like once it's got the information,


00:25:17.140 --> 00:25:21.960
it can send it to somewhere like Datadog or New Relic


00:25:21.960 --> 00:25:26.960
for Azure and AWS, obviously, and Google monitoring as well.


00:25:26.960 --> 00:25:32.900
And yeah, actually, I just worked on recently,


00:25:32.900 --> 00:25:34.520
if you just want to hack around with it,


00:25:34.520 --> 00:25:36.240
there's an exporter for rich


00:25:36.240 --> 00:25:39.200
that just basically prints it on the console


00:25:39.200 --> 00:25:41.040
so you can see everything that's happening.


00:25:41.040 --> 00:25:42.820
- And it's color probably, yeah.


00:25:42.820 --> 00:25:43.700
- Yeah, yeah, yeah.


00:25:43.700 --> 00:25:44.900
So it's all kind of color coded.


00:25:44.900 --> 00:25:46.340
It's really nice actually.


00:25:46.340 --> 00:25:47.940
So yeah, I'm really excited about this.


00:25:47.940 --> 00:25:50.780
I've been mostly trying it with FastAPI


00:25:51.900 --> 00:25:54.940
as there aren't really many frameworks


00:25:54.940 --> 00:25:57.860
for setting up like decent monitoring


00:25:57.860 --> 00:26:00.860
and tracing in FastAPI applications.


00:26:00.860 --> 00:26:02.620
And yeah, I think it's really promising.


00:26:02.620 --> 00:26:04.760
So I suggest you check it out.


00:26:04.760 --> 00:26:09.760
And if you see a framework that needs support or something,


00:26:09.760 --> 00:26:13.080
then this is all open source


00:26:13.080 --> 00:26:15.240
and they're all accepting contributions as well.


00:26:15.240 --> 00:26:18.280
And it's fairly straightforward to add support.


00:26:18.280 --> 00:26:21.760
- Yeah, it's got Postgres, MySQL, MongoDB,


00:26:21.760 --> 00:26:24.820
Pyramid, Redis, all sorts of good stuff in here.


00:26:24.820 --> 00:26:29.680
Another thing maybe worth pointing out here


00:26:29.680 --> 00:26:32.140
is because this crosses languages, right?


00:26:32.140 --> 00:26:35.320
There's a Python one, but there's also a .NET one,


00:26:35.320 --> 00:26:37.820
there's a Swift one and so on,


00:26:37.820 --> 00:26:40.180
which means there might be scenarios


00:26:40.180 --> 00:26:44.180
where I've got like say a mobile app written in Swift,


00:26:44.180 --> 00:26:47.220
and then I've got the backend written in Python


00:26:47.220 --> 00:26:48.460
and FastAPI or something,


00:26:48.460 --> 00:26:49.940
and you wanna put those together.


00:26:49.940 --> 00:26:51.700
Like because it goes across those languages,


00:26:51.700 --> 00:26:54.460
Theoretically, that's a thing that could happen.


00:26:54.460 --> 00:26:55.300
- Absolutely, yeah.


00:26:55.300 --> 00:26:56.860
And you can pull that all together


00:26:56.860 --> 00:27:00.460
and it would give a request a trace ID.


00:27:00.460 --> 00:27:03.340
So when a request comes into the front end,


00:27:03.340 --> 00:27:06.860
a trace ID could carry across the different stacks as well,


00:27:06.860 --> 00:27:08.060
which is pretty cool.


00:27:08.060 --> 00:27:09.100
- Yeah, yeah, very cool.


00:27:09.100 --> 00:27:10.620
This is neat.


00:27:10.620 --> 00:27:13.100
Awesome, thanks for covering.


00:27:13.100 --> 00:27:14.220
Now, before we move on,


00:27:14.220 --> 00:27:15.900
Brian, we have a sponsor for this episode.


00:27:15.900 --> 00:27:16.740
That's cool, huh?


00:27:16.740 --> 00:27:18.060
- Yay! - Yay!


00:27:18.060 --> 00:27:19.980
Thanks to Shortcut.


00:27:19.980 --> 00:27:22.740
shortcut formerly known as Clubhouse.


00:27:22.740 --> 00:27:26.260
So they're a really cool project management tool.


00:27:26.260 --> 00:27:27.380
And they asked the question,


00:27:27.380 --> 00:27:30.140
have you ever really been happy with project management?


00:27:30.140 --> 00:27:35.140
You know, how's your JIRA or whatever, right?


00:27:35.140 --> 00:27:37.460
How much are you loving it?


00:27:37.460 --> 00:27:42.260
So they basically say most are either way too simple


00:27:42.260 --> 00:27:44.600
for growing engineering teams to manage everything


00:27:44.600 --> 00:27:47.300
or too complex and just throw in the kitchen sink


00:27:47.300 --> 00:27:49.020
and you don't wanna work with it.


00:27:49.020 --> 00:27:51.620
you've got to constantly tweak it to make it work for you.


00:27:51.620 --> 00:27:53.780
So Shortcut, who used to be known as CloudBounce,


00:27:53.780 --> 00:27:54.320
is different.


00:27:54.320 --> 00:27:55.240
They try to be simple.


00:27:55.240 --> 00:27:57.380
It's project management built specifically


00:27:57.380 --> 00:27:59.100
for software teams.


00:27:59.100 --> 00:28:01.620
It's fast, intuitive, flexible, many other nice positive


00:28:01.620 --> 00:28:03.140
adjectives.


00:28:03.140 --> 00:28:06.300
So some of the highlights are team-based workflows.


00:28:06.300 --> 00:28:09.620
Individual teams can use Shortcuts default workflows


00:28:09.620 --> 00:28:12.300
or customize them to match the way they work.


00:28:12.300 --> 00:28:15.220
Also, organizational-wide goals and roadmaps.


00:28:15.220 --> 00:28:18.300
So these workflows automatically get tied into larger goals.


00:28:18.300 --> 00:28:21.740
and feed into like a bigger system outside the team.


00:28:21.740 --> 00:28:25.580
Good source control integration, GitHub, GitLab, Bitbucket,


00:28:25.580 --> 00:28:27.540
all those types of things.


00:28:27.540 --> 00:28:32.060
One thing that I really love is the web app has hotkeys.


00:28:32.060 --> 00:28:35.260
So it's keyboard friendly, just like PyCharm, VS Code,


00:28:35.260 --> 00:28:36.100
whatever, right?


00:28:36.100 --> 00:28:39.060
I don't know why more web apps don't have hotkeys.


00:28:39.060 --> 00:28:42.580
It's not particularly hard, but they do, which is great.


00:28:42.580 --> 00:28:44.420
Iteration planning, so you can set your priorities


00:28:44.420 --> 00:28:45.980
and let shortcut run the schedule.


00:28:45.980 --> 00:28:47.660
You get nice little burndown charts and so on.


00:28:47.660 --> 00:28:51.380
So check them out at shortcut.com/pythonbytes,


00:28:51.380 --> 00:28:53.860
shortcut.com/pythonbytes,


00:28:53.860 --> 00:28:55.580
because you shouldn't have to project manage


00:28:55.580 --> 00:28:57.140
your project management.


00:28:57.140 --> 00:28:58.140
That does not sound fun.


00:28:58.140 --> 00:28:59.260
So let them do it.


00:28:59.260 --> 00:29:00.740
It's their job.


00:29:00.740 --> 00:29:05.740
Now, before we move off to the next topic,


00:29:05.740 --> 00:29:07.300
Robert Robinson on the audience.


00:29:07.300 --> 00:29:09.860
Hey, Robert, this open telemetry sounds interesting.


00:29:09.860 --> 00:29:10.740
Wants to try it out.


00:29:10.740 --> 00:29:12.160
I do as well.


00:29:12.160 --> 00:29:14.540
I feel like this is the kind of stuff


00:29:14.540 --> 00:29:16.680
that you just keep putting off,


00:29:16.680 --> 00:29:18.180
integrating into your system.


00:29:18.180 --> 00:29:19.760
And then once you finally do, you're like,


00:29:19.760 --> 00:29:20.700
oh, look how awesome this is.


00:29:20.700 --> 00:29:21.680
We can see what's going on.


00:29:21.680 --> 00:29:24.400
And it's actually, did you know this part was crashing?


00:29:24.400 --> 00:29:25.240
No, I didn't know that.


00:29:25.240 --> 00:29:27.720
Nobody looked at the log and it was just eaten,


00:29:27.720 --> 00:29:29.020
even the exception, right?


00:29:29.020 --> 00:29:31.040
- Yeah.


00:29:31.040 --> 00:29:32.320
- Yeah.


00:29:32.320 --> 00:29:33.160
Tricky, tricky.


00:29:33.160 --> 00:29:34.960
All right, Brian, you got the next one.


00:29:34.960 --> 00:29:38.820
- So Python's got a few built-ins.


00:29:38.820 --> 00:29:43.240
Not a ton, but quite a few.


00:29:43.240 --> 00:29:48.240
So this is a, there's an article call from Tushar Sadwani


00:29:48.240 --> 00:29:53.280
called "Understanding all of Python through its built-ins."


00:29:53.280 --> 00:29:55.160
And it's a pretty like,


00:29:55.160 --> 00:29:57.080
he's got a pretty ambitious goal here


00:29:57.080 --> 00:29:59.480
to understand everything.


00:29:59.480 --> 00:30:01.800
But I actually kind of really enjoyed


00:30:01.800 --> 00:30:03.200
even the first part of it.


00:30:03.200 --> 00:30:05.380
So I started reading it.


00:30:05.380 --> 00:30:08.640
I've been, especially giving it a shot.


00:30:08.640 --> 00:30:10.240
I got a shout out to him.


00:30:10.240 --> 00:30:13.140
He's been fairly involved on Twitter


00:30:13.140 --> 00:30:16.020
answering questions and being involved in conversations.


00:30:16.020 --> 00:30:17.860
So that's a good way to get noticed.


00:30:17.860 --> 00:30:21.980
But there's a, there's a,


00:30:21.980 --> 00:30:23.360
starts off talking about scope.


00:30:23.360 --> 00:30:26.100
So what is built-ins are not just things


00:30:26.100 --> 00:30:27.660
that Python has built in,


00:30:27.660 --> 00:30:32.660
but there's also, it has a relevance to the scoping rules.


00:30:32.660 --> 00:30:35.260
And he called it the LEGB scoping rules.


00:30:35.260 --> 00:30:39.700
So it's when Python, if Python sees a symbol,


00:30:39.700 --> 00:30:41.880
first it looks in the local scope,


00:30:41.880 --> 00:30:46.360
then the enclosing scope and the global scope


00:30:46.360 --> 00:30:47.920
and then the built-in.


00:30:47.920 --> 00:30:49.600
And built-ins really are just anything


00:30:49.600 --> 00:30:51.720
that's in the built-in package.


00:30:51.720 --> 00:30:54.520
So, and that actually that discussion,


00:30:54.520 --> 00:30:56.040
it's a really pretty good discussion


00:30:56.040 --> 00:30:58.720
and it helps it kind of, it's good for,


00:30:58.720 --> 00:31:01.040
especially newbies to understand,


00:31:01.040 --> 00:31:03.800
but even advanced beginners sometimes don't quite understand


00:31:03.800 --> 00:31:05.040
what's going on here.


00:31:05.040 --> 00:31:06.160
- Yeah, Brian and Anthony,


00:31:06.160 --> 00:31:10.680
you both come from C style languages historically, right?


00:31:10.680 --> 00:31:12.120
or at least you've spent a lot of time there, right?


00:31:12.120 --> 00:31:13.420
Brian, do a lot of C++,


00:31:13.420 --> 00:31:16.400
Anthony, I know you've done some C# and stuff.


00:31:16.400 --> 00:31:20.240
Did the scoping story of Python confuse you


00:31:20.240 --> 00:31:22.480
and kind of leave you a little uncertain in the beginning?


00:31:22.480 --> 00:31:23.740
- Yes, definitely.


00:31:23.740 --> 00:31:28.520
Especially coming from C++ where it's very well-defined.


00:31:28.520 --> 00:31:30.320
- In the curly braces, it's alive,


00:31:30.320 --> 00:31:31.360
afterwards it's gone, right?


00:31:31.360 --> 00:31:34.240
Like, wait a minute, that's not the story at all.


00:31:34.240 --> 00:31:37.200
- Right, and also you've got so many nested curly braces


00:31:37.200 --> 00:31:40.160
that could be anywhere, and it's not really,


00:31:40.160 --> 00:31:43.540
It seems like, actually, we just don't do that too much


00:31:43.540 --> 00:31:46.440
in Python, but Anthony probably know better than me.


00:31:46.440 --> 00:31:51.440
If I've gotten like multiple nested curly braces,


00:31:51.440 --> 00:31:52.580
we don't have curly braces,


00:31:52.580 --> 00:31:54.700
but multiple nested indentations,


00:31:54.700 --> 00:31:58.920
does the scope sort of look in outer and outer


00:31:58.920 --> 00:31:59.760
and outer ones?


00:31:59.760 --> 00:32:01.080
Is that what non-local means?


00:32:01.080 --> 00:32:06.420
- There's a non-local keyword,


00:32:06.420 --> 00:32:09.500
which is like a whole other thing.


00:32:09.500 --> 00:32:12.080
(all laughing)


00:32:12.080 --> 00:32:13.660
- I think I've ever used that.


00:32:13.660 --> 00:32:16.340
- Closure, variable capture, basically, yeah.


00:32:16.340 --> 00:32:17.180
- Yeah. - Yeah.


00:32:17.180 --> 00:32:20.040
- The difference in global really freaked me out


00:32:20.040 --> 00:32:22.980
because really we were pounded into our heads everywhere


00:32:22.980 --> 00:32:25.260
is to never use global variables.


00:32:25.260 --> 00:32:26.900
But global is different.


00:32:26.900 --> 00:32:29.820
The global namespace is not a global variable.


00:32:29.820 --> 00:32:34.060
It's more like a module level.


00:32:34.060 --> 00:32:37.260
- Yeah, or like a static variable in a class


00:32:37.260 --> 00:32:40.340
maybe would be what other people might call it.


00:32:40.340 --> 00:32:42.940
- Yeah, it's not a dangerous thing in Python.


00:32:42.940 --> 00:32:43.860
So, yeah.


00:32:43.860 --> 00:32:45.100
- So I didn't mean to derail you that much,


00:32:45.100 --> 00:32:46.420
but I think it's interesting to think about


00:32:46.420 --> 00:32:48.140
the built-in scope, the global scope,


00:32:48.140 --> 00:32:48.960
these different scopes,


00:32:48.960 --> 00:32:50.300
because it's such a different world


00:32:50.300 --> 00:32:53.620
from the intuition you get coming from all the C languages.


00:32:53.620 --> 00:32:54.860
- Yeah.


00:32:54.860 --> 00:32:56.500
Also just sort of just really enjoyed


00:32:56.500 --> 00:32:58.780
looking at the language through the scope of built-ins.


00:32:58.780 --> 00:33:01.060
It's an interesting take on it.


00:33:01.060 --> 00:33:04.980
One of the, I will pull out a few things that he mentions,


00:33:04.980 --> 00:33:07.460
and one is all the constants.


00:33:07.460 --> 00:33:09.660
I guess I'd never counted them before, but there's five.


00:33:09.660 --> 00:33:12.100
There's five constants in Python.


00:33:12.100 --> 00:33:16.580
True, false, none, ellipsis, and not implemented.


00:33:16.580 --> 00:33:17.980
I do like ellipsis.


00:33:17.980 --> 00:33:19.460
We talked about that the other day,


00:33:19.460 --> 00:33:22.380
or I guess one or two weeks ago,


00:33:22.380 --> 00:33:24.900
using dot, dot, dot instead of pass.


00:33:24.900 --> 00:33:26.180
- Are you gonna start doing that?


00:33:26.180 --> 00:33:27.500
- I've already started doing that.


00:33:27.500 --> 00:33:28.340
- I'm all about it.


00:33:28.340 --> 00:33:29.940
I think I'm up for it as well.


00:33:29.940 --> 00:33:33.940
- I don't, I guess I don't think I've ever used


00:33:33.940 --> 00:33:35.980
not implemented or even looked for it,


00:33:35.980 --> 00:33:37.800
but interesting discussion.


00:33:37.800 --> 00:33:40.700
Also just liked, I liked looking around.


00:33:40.700 --> 00:33:43.840
So here's a section on compile exec and eval.


00:33:43.840 --> 00:33:46.020
It's not an alphabetical listing of everything.


00:33:46.020 --> 00:33:48.560
It's a more grouping them together.


00:33:48.560 --> 00:33:51.700
It's quite a big article,


00:33:51.700 --> 00:33:54.820
but I would suggest people just like skim through the list


00:33:54.820 --> 00:33:57.300
'cause it's got a good table of contents at the top.


00:33:57.300 --> 00:33:59.220
And you can just sort of skim through


00:33:59.220 --> 00:34:01.700
what he's talking about and pick a couple


00:34:01.700 --> 00:34:02.660
and go read about it.


00:34:02.660 --> 00:34:03.660
you'll probably learn something.


00:34:03.660 --> 00:34:08.660
So anyway, a good shout out to Tushar for writing this.


00:34:08.660 --> 00:34:10.300
- Yeah, this looks super handy.


00:34:10.300 --> 00:34:14.500
- Yeah, some of the built-ins are super handy.


00:34:14.500 --> 00:34:18.640
I often have a Python REPL open just to do things


00:34:18.640 --> 00:34:21.540
that would otherwise be annoying to do on a calculator,


00:34:21.540 --> 00:34:25.540
like converting hex integers and vice versa.


00:34:25.540 --> 00:34:28.300
There's a hex built-in, which is really helpful actually.


00:34:30.300 --> 00:34:35.300
I use X a lot because I'm often looking at data elements


00:34:35.300 --> 00:34:39.700
in a packet or something like that


00:34:39.700 --> 00:34:41.200
and trying to convert those.


00:34:41.200 --> 00:34:44.540
- Yeah, very nice.


00:34:44.540 --> 00:34:45.580
Nice one.


00:34:45.580 --> 00:34:48.580
Before we move on, Anthony, how do you feel about dot dot dot?


00:34:48.580 --> 00:34:52.220
- They should have called it yada yada yada.


00:34:52.220 --> 00:34:54.060
(laughing)


00:34:54.060 --> 00:34:54.900
- Yeah.


00:34:54.900 --> 00:34:55.720
- I think that would be...


00:34:55.720 --> 00:34:57.380
- Wait, wait, wait, let's go on.


00:34:57.380 --> 00:35:00.400
- Yeah, I use it for type stubs and that's it.


00:35:00.400 --> 00:35:01.300
So.


00:35:01.300 --> 00:35:02.400
- Yeah.


00:35:02.400 --> 00:35:04.440
There's times when you use pass, right?


00:35:04.440 --> 00:35:07.080
And I feel like, you know what, dot, dot, dot kind of,


00:35:07.080 --> 00:35:09.000
says I kind of know what,


00:35:09.000 --> 00:35:10.600
I'm not ready to put stuff here yet.


00:35:10.600 --> 00:35:12.160
- I think we should start calling,


00:35:12.160 --> 00:35:15.160
instead of ellipses, we should call it dun, dun, dun.


00:35:15.160 --> 00:35:17.800
(both laughing)


00:35:17.800 --> 00:35:19.160
- Exactly.


00:35:19.160 --> 00:35:22.160
All right, how about we hand out some awards?


00:35:22.160 --> 00:35:23.000
- Okay.


00:35:23.000 --> 00:35:25.640
- To the best open source software of 2021.


00:35:25.640 --> 00:35:29.120
Now, who gets to vote on this?


00:35:29.120 --> 00:35:31.160
Who gets to say, well, InfoWorld in this example.


00:35:31.160 --> 00:35:32.640
So this is according to InfoWorld,


00:35:32.640 --> 00:35:33.680
but there may be other rules,


00:35:33.680 --> 00:35:36.640
but I found this to be pretty interesting, actually.


00:35:36.640 --> 00:35:38.220
I heard about it, learned about it


00:35:38.220 --> 00:35:40.880
because Sebastian Ramirez from FastAPI said,


00:35:40.880 --> 00:35:44.180
"Yay, we've been voted one of the best open source projects."


00:35:44.180 --> 00:35:49.180
So this is called the InfoWorld Bossy 2021 awards.


00:35:49.180 --> 00:35:51.520
But what I thought was interesting is going through here,


00:35:51.520 --> 00:35:54.040
there was 30 different projects that won awards.


00:35:54.040 --> 00:35:55.000
I'm like, "Oh, that's interesting.


00:35:55.000 --> 00:35:55.960
Oh, I didn't know about that.


00:35:55.960 --> 00:35:56.800
Oh, check this out.


00:35:56.800 --> 00:35:57.620
Yeah.


00:35:57.620 --> 00:35:59.320
So I wanted to touch on a couple.


00:35:59.320 --> 00:36:03.600
So there's some things that may or may not be interesting


00:36:03.600 --> 00:36:07.560
to you like Svelte, which is a JavaScript front end,


00:36:07.560 --> 00:36:08.680
you know, like view or react.


00:36:08.680 --> 00:36:10.400
That's not interesting to me.


00:36:10.400 --> 00:36:13.320
But Minikube, Minikube is pretty interesting.


00:36:13.320 --> 00:36:16.860
Minikube is a way to run like a baby Kubernetes cluster


00:36:16.860 --> 00:36:18.260
right on your computer.


00:36:18.260 --> 00:36:21.000
Just say Minikube start and guess what?


00:36:21.000 --> 00:36:23.320
You've got a cool little cluster running.


00:36:23.320 --> 00:36:25.920
So that might be really helpful for Python people.


00:36:25.920 --> 00:36:30.960
Let's see, Pixie, I'm gonna zoom back a little here.


00:36:30.960 --> 00:36:33.640
Number five is FastAPI.


00:36:33.640 --> 00:36:36.680
I know we're all fans of FastAPI.


00:36:36.680 --> 00:36:38.600
I think it's really awesome that it won


00:36:38.600 --> 00:36:41.160
and it's worth maybe just giving a quick shout out


00:36:41.160 --> 00:36:43.160
to how they described it as Django and Flask


00:36:43.160 --> 00:36:45.060
have been leading the Python web frameworks for years.


00:36:45.060 --> 00:36:48.400
FastAPI now deserves to be mentioned in the same breath.


00:36:48.400 --> 00:36:49.240
I agree.


00:36:49.240 --> 00:36:52.360
It calls out the main features,


00:36:52.360 --> 00:36:55.700
which are it's truly modern Python web framework


00:36:55.700 --> 00:36:57.600
written from the ground up using type hinting,


00:36:57.600 --> 00:37:00.560
async and high-speed components by default, that's true.


00:37:00.560 --> 00:37:03.180
And I also really liked that they pointed out


00:37:03.180 --> 00:37:07.700
that while its name indicates it's primarily for APIs,


00:37:07.700 --> 00:37:11.180
it's also really good at writing more conventional websites


00:37:11.180 --> 00:37:13.500
with like Jinja templates or even Chameleon templates.


00:37:13.500 --> 00:37:14.680
So way to go.


00:37:14.680 --> 00:37:17.860
And then you wanna add, or Brian wanna add anything?


00:37:17.860 --> 00:37:20.620
- Oh, I just think that I think you're partly to thank


00:37:20.620 --> 00:37:24.700
for people considering FastAPI for not just APIs


00:37:24.700 --> 00:37:27.660
because you've been beating that drum a little bit as well.


00:37:27.660 --> 00:37:28.480
- Yeah, thanks a bunch.


00:37:28.480 --> 00:37:30.740
I even created some decorators that make it really easy


00:37:30.740 --> 00:37:33.260
to like render templates as response values and stuff.


00:37:33.260 --> 00:37:34.500
Yeah, it's fun.


00:37:34.500 --> 00:37:35.460
Anthony?


00:37:35.460 --> 00:37:38.060
- Oh yeah, I tried out the chameleon thing.


00:37:38.060 --> 00:37:39.420
The one you wrote actually.


00:37:39.420 --> 00:37:41.900
Yeah, 'cause I'm working on this FastAPI course


00:37:41.900 --> 00:37:42.980
with you at the moment.


00:37:42.980 --> 00:37:44.340
- Yeah, that's gonna be fun.


00:37:44.340 --> 00:37:47.180
- So yeah, I'm a big fan of FastAPI.


00:37:47.180 --> 00:37:48.740
I think it's brilliant.


00:37:48.740 --> 00:37:53.780
and testament to Sebastian really, because he really kind of builds on something which


00:37:53.780 --> 00:38:00.260
is quite complicated, but he makes it seem so effortless. And just working with FastAPI,


00:38:00.260 --> 00:38:05.780
like the documentation is excellent. The framework itself is just, is really logical. And,


00:38:05.780 --> 00:38:12.500
you know, it's really easy to use. In terms of like the, I've been keeping an eye on


00:38:12.500 --> 00:38:16.180
the popularity of the different frameworks and stuff over the last few years.


00:38:17.460 --> 00:38:20.820
And Django and Flask are kind of neck and neck and have been for a while.


00:38:20.820 --> 00:38:26.820
And FastAPI now is the third most popular according to the metrics that I've seen.


00:38:26.820 --> 00:38:29.860
Out of nowhere, third most popular, yeah.


00:38:29.860 --> 00:38:36.820
Yeah, and I know JetBrains are doing the latest PSF developer survey. So,


00:38:36.820 --> 00:38:42.340
yeah, we'll see kind of what happens in this year's number. But I'd imagine FastAPI would


00:38:42.340 --> 00:38:44.540
would still be the third most popular.


00:38:44.540 --> 00:38:46.460
So yeah, it's pretty, it's brilliant.


00:38:46.460 --> 00:38:50.460
So yeah, I think it's a good, it's a good solid pick


00:38:50.460 --> 00:38:55.280
in terms of writing like full apps with it at the moment.


00:38:55.280 --> 00:38:57.240
Like there's still a lot you have to do for templating.


00:38:57.240 --> 00:39:00.140
Like you, you pretty much have to like build


00:39:00.140 --> 00:39:02.500
in a whole bunch of other templating stuff


00:39:02.500 --> 00:39:06.180
and picking an ORM at the moment isn't easy


00:39:06.180 --> 00:39:08.900
but there are some brilliant ones to have a play with.


00:39:08.900 --> 00:39:09.740
- Yeah, there's a couple interesting ones.


00:39:09.740 --> 00:39:11.620
- I wanna give a shout out to.


00:39:11.620 --> 00:39:13.420
- Yeah, that give like the similar


00:39:13.420 --> 00:39:14.900
and even integrating with Pydantic,


00:39:14.900 --> 00:39:17.580
which is sort of the natural exchange of FastAPI.


00:39:17.580 --> 00:39:19.860
So you wanna give a shout out to Tortoise you say?


00:39:19.860 --> 00:39:21.140
- Yeah, that's my favorite so far.


00:39:21.140 --> 00:39:24.260
I've used, I've tried out six different ones so far.


00:39:24.260 --> 00:39:25.100
(laughs)


00:39:25.100 --> 00:39:26.060
- Yeah.


00:39:26.060 --> 00:39:29.460
- And Tortoise I think is my favorite at the moment, so.


00:39:29.460 --> 00:39:30.300
- Right on.


00:39:30.300 --> 00:39:32.460
Well, maybe next year we'll be talking about the award


00:39:32.460 --> 00:39:36.180
for SQL model, which is built on top of Pydantic


00:39:36.180 --> 00:39:38.440
plus SQLAlchemy by Sebastian as well.


00:39:38.440 --> 00:39:39.500
So who knows?


00:39:39.500 --> 00:39:41.020
A lot of good ones out there.


00:39:41.020 --> 00:39:42.780
It's good to see a lot of the excitement


00:39:42.780 --> 00:39:44.280
and new ideas coming on there.


00:39:44.280 --> 00:39:46.700
All right, what else we got?


00:39:46.700 --> 00:39:48.500
Crystal, don't care.


00:39:48.500 --> 00:39:50.540
Windows Terminal, I think is actually pretty interesting.


00:39:50.540 --> 00:39:55.020
Windows has traditionally been not on par


00:39:55.020 --> 00:39:56.460
with its terminal experience.


00:39:56.460 --> 00:39:59.100
And I think, you know, the Windows Terminal,


00:39:59.100 --> 00:40:01.000
PowerShell 7, Oh My Posh,


00:40:01.000 --> 00:40:02.300
all these things come together,


00:40:02.300 --> 00:40:05.860
NerdFonts, to make it quite an amazing place to be actually.


00:40:05.860 --> 00:40:08.020
- Windows Terminal is an open source project?


00:40:08.020 --> 00:40:10.380
- It didn't start out that way, but now it is.


00:40:10.380 --> 00:40:12.380
- Yep. - Yeah.


00:40:12.380 --> 00:40:14.020
Yeah, so that's a good one.


00:40:14.020 --> 00:40:16.880
OBS Studio, if you're doing video stuff, that's amazing.


00:40:16.880 --> 00:40:20.220
There's a bunch of stuff in here that may apply to people


00:40:20.220 --> 00:40:22.300
that you can all check out that are interesting,


00:40:22.300 --> 00:40:24.340
but I don't wanna go over them.


00:40:24.340 --> 00:40:27.540
Dask though, Dask is a big data science one.


00:40:27.540 --> 00:40:33.580
Scale, computation, like Pandas operations


00:40:33.580 --> 00:40:36.340
and what not across cores, across clusters,


00:40:36.340 --> 00:40:38.580
across compute that's larger than the RAM you have


00:40:38.580 --> 00:40:42.140
by streaming it off disk and all sorts of interesting stuff.


00:40:42.140 --> 00:40:45.820
I have no idea why my browser is jumping up and down.


00:40:45.820 --> 00:40:46.820
We'll have to ignore that.


00:40:46.820 --> 00:40:48.500
I'm not in control, but I'm sorry.


00:40:48.500 --> 00:40:49.340
- It seems like...


00:40:49.340 --> 00:40:50.500
(laughs)


00:40:50.500 --> 00:40:51.320
- You know what?


00:40:51.320 --> 00:40:52.420
I'll tell you why this is happening.


00:40:52.420 --> 00:40:55.180
I'm looking up and I see I'm not running my VPN,


00:40:55.180 --> 00:40:56.420
which would block ads.


00:40:56.420 --> 00:40:59.260
And so there's some kind of ad off the screen


00:40:59.260 --> 00:41:00.100
that's just running.


00:41:00.100 --> 00:41:01.760
And if I had turned on my VPN, we'd be good.


00:41:01.760 --> 00:41:04.620
All right, Blazing SQL is another great one.


00:41:04.620 --> 00:41:06.060
Rapids from Nvidia.


00:41:06.060 --> 00:41:08.560
And I feel like there's one more I wanna give a shout out


00:41:08.560 --> 00:41:10.260
Hugging face, I don't know anything about that.


00:41:10.260 --> 00:41:11.100
Now that was it.


00:41:11.100 --> 00:41:12.600
So I was going through that list.


00:41:12.600 --> 00:41:14.360
I thought it called out a lot of neat projects


00:41:14.360 --> 00:41:16.140
in addition to just FastAPI.


00:41:16.140 --> 00:41:18.600
- Yeah, it's cool.


00:41:18.600 --> 00:41:21.000
- Yeah, any of those jump out at you guys either


00:41:21.000 --> 00:41:22.360
that I've just screened by?


00:41:22.360 --> 00:41:27.080
- Lots of stacks that I don't use.


00:41:27.080 --> 00:41:27.920
So yeah.


00:41:27.920 --> 00:41:31.720
- There was a bunch of ML stuff though,


00:41:31.720 --> 00:41:33.920
which I don't use, but I think would be relevant


00:41:33.920 --> 00:41:35.620
to people who are listening maybe.


00:41:38.080 --> 00:41:39.680
We're not to extras yet, Michael.


00:41:39.680 --> 00:41:42.480
No, no, I know. I just closed it because the jumping was driving me insane.


00:41:42.480 --> 00:41:48.960
All right. Anthony, you got the last main one, right?


00:41:48.960 --> 00:41:52.560
All right. Yeah. So I think Lukasz is taking up like half of this episode.


00:41:52.560 --> 00:42:00.560
So we're going to get back to Lukasz's blog and evolve the discussion that was started last week.


00:42:03.120 --> 00:42:09.280
Yeah, I'm, to put it mildly, I'm excited about this. I think if this happens, it's probably


00:42:09.280 --> 00:42:14.800
going to be the biggest thing to happen in CPython in the last five years, in my opinion.


00:42:14.800 --> 00:42:16.720
And this being the Gil removal.


00:42:16.720 --> 00:42:18.720
This be the Gil removal.


00:42:18.720 --> 00:42:19.680
Not the Gilectomy.


00:42:19.680 --> 00:42:21.040
Not the Gilectomy.


00:42:21.040 --> 00:42:21.680
Not exactly.


00:42:21.680 --> 00:42:26.880
Yeah, so no Gil or let's just go with no Gil.


00:42:30.080 --> 00:42:40.000
So almost seemingly out of nowhere, Sam Gross, who works at Facebook, basically submitted to the


00:42:40.000 --> 00:42:47.200
core developers this research paper and a working branch of a GIL-less Python.


00:42:47.200 --> 00:42:55.120
Just quickly recap, I guess, on what that means. This article is pretty heavy in technical detail


00:42:55.120 --> 00:43:01.840
and the stuff that's being discussed in the article, again, is pretty complicated and


00:43:01.840 --> 00:43:06.480
I actually didn't understand a lot of it. And I've written a book on the Python compiler.


00:43:06.480 --> 00:43:13.840
If you read this and it's confusing, don't worry. So the GIL is basically the global interpreter


00:43:13.840 --> 00:43:19.840
lock and it exists as a way of making Python thread safe when it comes to keeping reference


00:43:21.680 --> 00:43:30.000
counts of specific objects. So if you create a Python object, for example, there's a counter


00:43:30.000 --> 00:43:36.320
of how many things are referencing it because you don't want to just destroy an object and


00:43:36.320 --> 00:43:40.120
then like you're working through a list of objects, for example, but then one of the


00:43:40.120 --> 00:43:46.520
items in the list just disappears, has been deallocated. Because everything is a pointer


00:43:46.520 --> 00:43:53.180
in Python, like that pointer just goes nowhere. Or actually there's a magic pointer that Python


00:43:53.180 --> 00:43:59.820
uses when it deallocates objects, which I know from a very painful experience. So you


00:43:59.820 --> 00:44:02.600
don't want that to happen. And if you've got multiple threads kind of working with the


00:44:02.600 --> 00:44:08.500
same objects all at once, you don't want them to -- it's incredibly hard to keep track of


00:44:08.500 --> 00:44:13.640
what's happening. Threading is great because you want -- you can have multiple threads


00:44:13.640 --> 00:44:20.920
working on a computer and the operating system can do the scheduling of which threads run


00:44:20.920 --> 00:44:26.040
on which cores and which CPUs, et cetera. So in theory, it's a way of making your Python


00:44:26.040 --> 00:44:31.480
applications a lot faster if you write them to be multi-threaded. But Python's basically


00:44:31.480 --> 00:44:40.060
built in this lock, which says, okay, in the evaluation loop in CEVAL, don't let anyone


00:44:40.060 --> 00:44:45.620
else run an instruction whilst this thread is running the instruction.


00:44:45.620 --> 00:44:48.740
With the exception of wire-bound tasks.


00:44:48.740 --> 00:44:51.540
It seems like this is a thing to control threading.


00:44:51.540 --> 00:44:55.740
And really, it's just a thing to protect memory management, but it has this huge blocking


00:44:55.740 --> 00:44:57.460
effect for threading, right?


00:44:57.460 --> 00:44:58.460
Yeah.


00:44:58.460 --> 00:45:03.460
So it's a thing to basically make the reference counter thread safe.


00:45:03.460 --> 00:45:05.620
Without locking, so it's fast.


00:45:05.620 --> 00:45:06.620
Without locking, yeah.


00:45:06.620 --> 00:45:09.280
So you don't have to wait to add an income.


00:45:09.280 --> 00:45:14.920
So to give you an idea, if you run the GC by hand, you'll just see how many tens of


00:45:14.920 --> 00:45:21.460
thousands of objects are just created all the time in Python applications.


00:45:21.460 --> 00:45:26.660
So what Sam had put together, I say seemingly out of nowhere, but if you go through the


00:45:26.660 --> 00:45:31.280
article and what he proposed, he's actually been working on this almost full time for


00:45:31.280 --> 00:45:34.760
two years, which is astonishing.


00:45:34.760 --> 00:45:38.000
And it's a real feat of engineering, to be honest.


00:45:38.000 --> 00:45:47.760
So kind of what he's proposed is a way of removing the GIL so that there's essentially


00:45:47.760 --> 00:45:51.560
like almost two ways of keeping references into objects.


00:45:51.560 --> 00:45:56.040
And one of them is specific to the local thread.


00:45:56.040 --> 00:46:00.560
And then there's also another reference count, which is for other threads.


00:46:00.560 --> 00:46:02.960
So why is that important?


00:46:02.960 --> 00:46:08.000
Let's say, for example, you've got a Python dictionary with values in it and then you


00:46:08.000 --> 00:46:11.920
have multiple threads all working on the same dictionary.


00:46:11.920 --> 00:46:15.360
Like that's a complicated problem to solve.


00:46:15.360 --> 00:46:20.560
How do you make sure that the keys, like the references to the keys or the values don't


00:46:20.560 --> 00:46:21.560
disappear?


00:46:21.560 --> 00:46:26.760
And it does actually go into detail about how that's been handled.


00:46:26.760 --> 00:46:31.760
And also objects like Python dictionaries are not thread safe at the moment either.


00:46:31.760 --> 00:46:39.420
So if you have two threads working on a dictionary, adding values, for example, to a dictionary,


00:46:39.420 --> 00:46:43.580
do you have to lock the hash table?


00:46:43.580 --> 00:46:47.680
Anyone who's worked with multithreading in low-level languages knows that the complexities


00:46:47.680 --> 00:46:49.760
of doing it.


00:46:49.760 --> 00:46:55.640
So what he's proposing is that, well, in his prototype, he basically replaced the Python


00:46:55.640 --> 00:47:06.520
memory allocator with another one called Mimalloc, which is a thread safe memory allocator.


00:47:06.520 --> 00:47:08.560
It's actually a Microsoft project.


00:47:08.560 --> 00:47:15.160
But I think it could have been any other thread safe memory allocator.


00:47:15.160 --> 00:47:23.960
Writing memory allocators is very involved for them to be performant and efficient.


00:47:23.960 --> 00:47:27.800
And then basically objects get tied to the thread that created them.


00:47:27.800 --> 00:47:32.600
And then there's a non-atomic local reference count with the owner thread.


00:47:32.600 --> 00:47:37.080
And then there's basically a separate mechanism for what would be slower, basically, reference


00:47:37.080 --> 00:47:39.320
counting from other threads.


00:47:39.320 --> 00:47:45.120
So single threaded performance is equivalent with this proposal.


00:47:45.120 --> 00:47:51.200
But there's still a performance impact of multiple threads working on the same object,


00:47:51.200 --> 00:47:52.200
which is to be expected.


00:47:52.200 --> 00:47:54.800
Yeah, there's always a little overhead for that.


00:47:54.800 --> 00:48:04.280
Yeah, but to give you an idea, in his note, he implemented a few common problems as a multi-threaded implementation.


00:48:04.280 --> 00:48:13.480
And he said, if you give it 20 threads, it runs 19.84 times faster than it would in just regular CPython.


00:48:13.480 --> 00:48:20.920
So for certain types of problems, this can have enormous impact in performance.


00:48:20.920 --> 00:48:26.720
But it is really complicated and that's why I think it's an interesting discussion to see


00:48:26.720 --> 00:48:35.040
Okay. How do we how do we get from this is a cool idea to this actually being released and being used by


00:48:35.040 --> 00:48:44.000
You know millions of people and I don't know python's like running on like a satellites in space and stuff like


00:48:44.000 --> 00:48:50.640
How do we go from a fork that someone's been hacking around with to something? That's like production ready and


00:48:50.640 --> 00:48:52.800
And this is what the article goes into.


00:48:52.800 --> 00:48:56.540
So how would this work?


00:48:56.540 --> 00:48:59.040
Would it be a feature flag?


00:48:59.040 --> 00:49:00.720
Which version would we target?


00:49:00.720 --> 00:49:05.580
And so at the moment, it's targeting 3.9 alpha 3, actually.


00:49:05.580 --> 00:49:08.640
So it wasn't even the release of 3.9.


00:49:08.640 --> 00:49:10.840
So he needs to do some work to update that


00:49:10.840 --> 00:49:14.520
to the latest version of 3.9, which is 3.9.7.


00:49:14.520 --> 00:49:16.920
And then I think the target release,


00:49:16.920 --> 00:49:24.040
If the core developers agree to kind of like explore this, if that was 3.11,


00:49:24.040 --> 00:49:30.520
or I don't think anyone wants to touch the Python 4 topic.


00:49:30.520 --> 00:49:37.960
11 is like a year away. Is that even possible or would it most likely be a couple years out?


00:49:37.960 --> 00:49:42.440
Yeah, it seems pretty soon to me. And like sub-interpreters, for example,


00:49:42.440 --> 00:49:49.240
is like an experimental feature. I think the issue with this is that it's that the volume


00:49:49.240 --> 00:49:55.600
of changes is so broad that it's quite hard to kind of like have it in as a feature toggle.


00:49:55.600 --> 00:50:00.360
So like Cyber Interpreters was in as like a like a hidden package that you can use and


00:50:00.360 --> 00:50:07.560
it's experimental. Whereas this is like changing everything. Yeah, well, everything but like


00:50:07.560 --> 00:50:10.360
It's a pretty wide sweeping change


00:50:10.360 --> 00:50:13.760
and changing the memory allocator is a massive change.


00:50:13.760 --> 00:50:19.760
The question is more, how can we introduce this softly, I think,


00:50:19.760 --> 00:50:22.460
and have it either as a feature flag,


00:50:22.460 --> 00:50:24.860
and what would this break?


00:50:24.860 --> 00:50:27.660
And the main thing is that C extensions


00:50:27.660 --> 00:50:30.860
haven't really had to worry about thread safety


00:50:30.860 --> 00:50:33.160
because the GIL kind of handles that for them.


00:50:33.160 --> 00:50:36.860
So C extensions essentially would need to,


00:50:36.860 --> 00:50:39.740
If they use the mechanisms that are here, that's fine.


00:50:39.740 --> 00:50:44.140
But C extensions often have other objects


00:50:44.140 --> 00:50:46.740
which they haven't used the reference count for.


00:50:46.740 --> 00:50:52.020
So they've basically kind of like allocated their own objects


00:50:52.020 --> 00:50:53.620
and variables and stuff like that


00:50:53.620 --> 00:50:55.140
that would not be thread safe.


00:50:55.140 --> 00:50:57.180
And they just not have had these kind of collision issues


00:50:57.180 --> 00:50:58.020
in the past.


00:50:58.020 --> 00:51:02.180
So introducing this would potentially break


00:51:02.180 --> 00:51:03.300
some C extensions.


00:51:03.300 --> 00:51:06.780
So how could that be introduced gently?


00:51:06.780 --> 00:51:13.040
I think what was interesting in the article is there's a mention of NumPy and NumPy has


00:51:13.040 --> 00:51:18.860
actually done a lot of its own work already on basically kind of making it thread safe


00:51:18.860 --> 00:51:22.060
and more scalable.


00:51:22.060 --> 00:51:28.780
But one of the tricky ones is PyBind11 is called out in here as being a, anyone who's


00:51:28.780 --> 00:51:34.460
using PyBind11 potentially might have to make some, do some refactoring to support this


00:51:34.460 --> 00:51:36.380
if it was supported.


00:51:36.380 --> 00:51:41.940
And then in closing, Lukasz, who wrote this review post,


00:51:41.940 --> 00:51:45.540
sort of said, you know, the team had been really impressed


00:51:45.540 --> 00:51:48.660
with Sam's work and invited him to join CPython Project


00:51:48.660 --> 00:51:51.620
as a core developer, and he's interested in,


00:51:51.620 --> 00:51:52.960
Lukasz is gonna mentor him.


00:51:52.960 --> 00:51:54.660
So I think that's brilliant.


00:51:54.660 --> 00:51:55.940
- Oh yeah, that's brilliant.


00:51:55.940 --> 00:51:58.700
- Just to come up with this over like, even two years


00:51:58.700 --> 00:52:01.660
is like a really short amount of time for a problem


00:52:01.660 --> 00:52:02.820
that people have been trying to solve


00:52:02.820 --> 00:52:05.000
for well over a decade.


00:52:05.000 --> 00:52:09.460
So yeah, very exciting.


00:52:09.460 --> 00:52:10.940
- Yeah, this is great.


00:52:10.940 --> 00:52:13.500
I think we have a record number of core developers


00:52:13.500 --> 00:52:15.420
in the audience right now.


00:52:15.420 --> 00:52:16.260
- Yeah.


00:52:16.260 --> 00:52:18.900
- So some great comments from Steve Dower.


00:52:18.900 --> 00:52:20.860
Hey, Steve, the big thing needed here


00:52:20.860 --> 00:52:22.740
is a path forward for native extensions.


00:52:22.740 --> 00:52:24.280
They could all need rewriting


00:52:24.280 --> 00:52:27.900
or else importing them could re-enable the GIL.


00:52:27.900 --> 00:52:30.580
That discussion is happening now, it's very early.


00:52:30.580 --> 00:52:33.760
And Henry Schreiner also has similar comments


00:52:33.760 --> 00:52:36.580
that they're considering that, but yeah.


00:52:36.580 --> 00:52:40.060
And Henry also says,


00:52:40.060 --> 00:52:43.300
"We would be up for refactoring PyBind 11 if needed,


00:52:43.300 --> 00:52:45.300
I believe," which is also interesting.


00:52:45.300 --> 00:52:48.620
This is exciting.


00:52:48.620 --> 00:52:50.980
There's a lot of stuff coming here.


00:52:50.980 --> 00:52:53.580
I think another thing in addition to the no-gil


00:52:53.580 --> 00:52:56.300
is I got the sense that Sam had added


00:52:56.300 --> 00:52:59.860
several other optimizations that were independently


00:52:59.860 --> 00:53:01.600
worth adding to Python.


00:53:01.600 --> 00:53:03.580
- Yeah.


00:53:03.580 --> 00:53:09.160
One of the things I know that there's a lot of tension


00:53:09.160 --> 00:53:11.900
around whether or not to do 4.0,


00:53:11.900 --> 00:53:15.840
but if it ends up being that all of the extensions


00:53:15.840 --> 00:53:19.780
need possibly tweaked, then that might be,


00:53:19.780 --> 00:53:20.980
then it's an API change.


00:53:20.980 --> 00:53:24.820
And I think a shift to 4.0 might be terrible.


00:53:24.820 --> 00:53:26.620
- It would be the right number, yeah.


00:53:26.620 --> 00:53:27.940
Well, we should just go to Python 5.0,


00:53:27.940 --> 00:53:29.140
so no one's worried about 4.0,


00:53:29.140 --> 00:53:32.340
and we'll skip the whole conversation, it'll be fine.


00:53:32.340 --> 00:53:34.700
- We'll do it in AngularJS, we'll just like,


00:53:34.700 --> 00:53:36.740
and make a big fuss about going from one to two,


00:53:36.740 --> 00:53:40.020
and then just all of a sudden they're on like version 10


00:53:40.020 --> 00:53:40.860
or something.


00:53:40.860 --> 00:53:42.260
- Yeah, we'll just go crazy.


00:53:42.260 --> 00:53:44.780
Yeah, no, this is fantastic.


00:53:44.780 --> 00:53:49.040
I'm actually having Guido van Rossum and Mark Shannon,


00:53:49.040 --> 00:53:53.220
I believe, on Monday on Talk Python to talk about


00:53:53.220 --> 00:53:54.700
like performance in the future and stuff,


00:53:54.700 --> 00:53:56.540
and I'm sure we'll talk about this stuff a little bit.


00:53:56.540 --> 00:53:58.020
Yeah, so it should be a lot of fun.


00:53:58.020 --> 00:54:00.500
This was Guido's suggestion when I asked internally


00:54:00.500 --> 00:54:02.740
if anyone wanted to share anything.


00:54:02.740 --> 00:54:05.060
This is what he sent over.


00:54:05.060 --> 00:54:05.880
- Okay, fantastic.


00:54:05.880 --> 00:54:08.280
Yeah, so I'll try to take that up with him again.


00:54:08.280 --> 00:54:13.180
All right, well, Brian, does that bring us to our extras?


00:54:13.180 --> 00:54:14.340
- We are at extras.


00:54:14.340 --> 00:54:15.340
Do you have any extras?


00:54:15.340 --> 00:54:16.580
- Yeah, now you go first.


00:54:16.580 --> 00:54:17.740
Tell us about PyCon.


00:54:17.740 --> 00:54:21.820
- Well, call for proposals is open for US PyCon.


00:54:21.820 --> 00:54:23.260
I'm pretty excited about that.


00:54:23.260 --> 00:54:25.260
I already wrote down like six ideas


00:54:25.260 --> 00:54:27.740
of things I might want to talk about.


00:54:27.740 --> 00:54:30.660
So, and of course, there's no guarantee,


00:54:30.660 --> 00:54:31.500
no matter who you are,


00:54:31.500 --> 00:54:32.940
there's no guarantee that you're gonna get in,


00:54:32.940 --> 00:54:33.980
but it's fun.


00:54:33.980 --> 00:54:36.320
It's fun to come up with proposals anyway.


00:54:36.320 --> 00:54:37.500
And it's fun.


00:54:37.500 --> 00:54:40.260
I'm definitely going, so I'm pretty excited about that.


00:54:40.260 --> 00:54:44.180
And anybody else is gonna propose?


00:54:44.180 --> 00:54:46.820
Anthony, you gonna try to talk there?


00:54:46.820 --> 00:54:48.460
- Yeah, I've been thinking about that


00:54:48.460 --> 00:54:50.540
while I'm gonna put forward.


00:54:50.540 --> 00:54:54.020
I wanna put together a talk on performance anti-patterns.


00:54:54.020 --> 00:54:56.380
- Oh, that'd be fun.


00:54:56.380 --> 00:54:58.420
propose that for next year.


00:54:58.420 --> 00:54:59.900
Yeah.


00:54:59.900 --> 00:55:00.740
- Because of your name?


00:55:00.740 --> 00:55:01.560
Like Ante?


00:55:01.560 --> 00:55:05.740
Also-


00:55:05.740 --> 00:55:07.140
- None of the text section yet, bro.


00:55:07.140 --> 00:55:08.820
(laughs)


00:55:08.820 --> 00:55:11.820
- If anybody doesn't know, I wrote a book


00:55:11.820 --> 00:55:16.820
and then I rewrote it and I'm finished with it actually.


00:55:16.820 --> 00:55:19.740
So it's not out yet, but I'm pretty excited


00:55:19.740 --> 00:55:20.900
that I'm finished.


00:55:20.900 --> 00:55:23.380
All the betas, there's beta seven out,


00:55:23.380 --> 00:55:24.680
has all chapters in it.


00:55:24.680 --> 00:55:28.040
So if you're waiting for it to be done, it's done.


00:55:28.040 --> 00:55:29.160
It's not in print form yet.


00:55:29.160 --> 00:55:30.840
That's gonna happen in January or February.


00:55:30.840 --> 00:55:33.560
So I'm pretty excited to get that done.


00:55:33.560 --> 00:55:35.600
- I'm hoping for my copy at PyCon, Brian.


00:55:35.600 --> 00:55:39.040
I'm pretty sure I paid for the last one as well.


00:55:39.040 --> 00:55:41.040
I actually, I paid you in cash.


00:55:41.040 --> 00:55:43.840
So I'm gonna give you a copy of my book.


00:55:43.840 --> 00:55:45.680
- I'll bring, I'll bring at least bring-


00:55:45.680 --> 00:55:46.520
- Maybe we can do a swap.


00:55:46.520 --> 00:55:48.320
- Swap, yeah.


00:55:48.320 --> 00:55:49.160
That'd be great.


00:55:49.160 --> 00:55:50.640
- Yeah, Anthony, I got your book over there.


00:55:50.640 --> 00:55:52.840
I'm not sure what I can trade it for though.


00:55:52.840 --> 00:55:54.660
(laughing)


00:55:54.660 --> 00:55:56.660
That's awesome. Congratulations, Brian.


00:55:56.660 --> 00:55:57.660
Thanks.


00:55:57.660 --> 00:55:59.660
Anthony, you got any extras you want to share?


00:55:59.660 --> 00:56:06.660
Yeah, I'll be shipping fairly soon the JIT compiler that I've been working on called Pigeon.


00:56:06.660 --> 00:56:11.660
I'll be going version 1 in two weeks.


00:56:11.660 --> 00:56:17.660
So it's a Python 3.10 JIT compiler.


00:56:17.660 --> 00:56:21.660
You basically just drop it into CPython and turn it on


00:56:21.660 --> 00:56:25.420
and then run your code and it just JIT compiles it in the background.


00:56:25.420 --> 00:56:31.820
And in some cases, makes it a lot faster and in other cases, makes no difference.


00:56:31.820 --> 00:56:40.460
But yeah, some of the benchmarks I've been doing, like floating point math and


00:56:40.460 --> 00:56:46.540
integer math, like makes a massive difference. So yeah, like the scientific side of thing, right?


00:56:47.180 --> 00:56:49.980
- Yeah, so stuff that you would otherwise think,


00:56:49.980 --> 00:56:52.940
oh, I'm gonna redo this in Cython or something like,


00:56:52.940 --> 00:56:56.580
yeah, you don't have to add all the extra stuff.


00:56:56.580 --> 00:56:59.500
You just kind of turn it on and, yeah.


00:56:59.500 --> 00:57:04.500
And body benchmarks now 60% faster than standard CPython.


00:57:04.500 --> 00:57:05.900
- That's great.


00:57:05.900 --> 00:57:07.100
- And yeah, some of the other benchmarks


00:57:07.100 --> 00:57:08.720
I've got a 60% upwards.


00:57:08.720 --> 00:57:11.980
- That's super cool.


00:57:11.980 --> 00:57:16.580
So this work with Sam and the NoGIL,


00:57:16.580 --> 00:57:19.940
Does that throw a spinner in the works or span?


00:57:19.940 --> 00:57:24.100
- It would make my life quite hard for a few weeks


00:57:24.100 --> 00:57:25.340
if it gets merged.


00:57:25.340 --> 00:57:30.660
Yeah, so yeah, that could be interesting.


00:57:30.660 --> 00:57:32.340
And I'm also working on a secret project,


00:57:32.340 --> 00:57:35.380
but I'll share that in a few weeks.


00:57:35.380 --> 00:57:37.420
Yeah, Pigeon does, there's a comment in the chat,


00:57:37.420 --> 00:57:39.100
Pigeon does use scikit-build,


00:57:39.100 --> 00:57:43.180
which I did want to call that out


00:57:43.180 --> 00:57:45.660
when we were talking about setup.py earlier,


00:57:45.660 --> 00:57:50.660
'cause yeah, so Pidgin uses C, is all C++


00:57:50.660 --> 00:57:55.700
and it uses CMake, which generates make files.


00:57:55.700 --> 00:57:59.860
So yeah, and it uses scikit-build,


00:57:59.860 --> 00:58:03.560
which is a CMake extension,


00:58:03.560 --> 00:58:07.040
I guess, around Python extension modules.


00:58:07.040 --> 00:58:08.240
So that's how it kind of compiles.


00:58:08.240 --> 00:58:09.660
It's really cool.


00:58:09.660 --> 00:58:11.360
- Yeah, that's cool. - It's scikit-build.


00:58:11.360 --> 00:58:13.820
- Yeah, and I recommended using build earlier.


00:58:13.820 --> 00:58:16.020
Henry on our episode together mentioned


00:58:16.020 --> 00:58:19.220
that if you have external non-Python code,


00:58:19.220 --> 00:58:21.420
like C code or Fortran or whatever,


00:58:21.420 --> 00:58:23.900
then instead of build, scikit-build would be a good option


00:58:23.900 --> 00:58:26.100
to build the binary bits for that.


00:58:26.100 --> 00:58:30.540
This is the other question I wanted to ask


00:58:30.540 --> 00:58:32.020
and Steve Dower beat me to it.


00:58:32.020 --> 00:58:34.660
He says, he states it as an assertion.


00:58:34.660 --> 00:58:35.500
I was gonna ask you the question.


00:58:35.500 --> 00:58:37.940
I bet once Pigeon ships, you'll get people interested


00:58:37.940 --> 00:58:39.500
in helping add optimizations.


00:58:39.500 --> 00:58:42.020
Yeah, so it's one thing to JIT compile.


00:58:42.020 --> 00:58:44.100
It's another to just then straight up run it


00:58:44.100 --> 00:58:45.780
versus go, oh, we can inline this method.


00:58:45.780 --> 00:58:46.900
Oh, and I see we can do this.


00:58:46.900 --> 00:58:49.460
And then like, we could actually reuse this field


00:58:49.460 --> 00:58:52.140
'cause it's not used below and early free,


00:58:52.140 --> 00:58:53.060
all that kind of stuff.


00:58:53.060 --> 00:58:55.660
Where's the optimization of that looking?


00:58:55.660 --> 00:58:57.740
- Yeah, I've got it like on the documentation page


00:58:57.740 --> 00:58:59.420
there's a optimization section


00:58:59.420 --> 00:59:02.420
and I've kind of written up a lot of the optimizations


00:59:02.420 --> 00:59:03.460
and how they work,


00:59:03.460 --> 00:59:06.300
assertions that they make and compromises


00:59:06.300 --> 00:59:07.980
and stuff like that.


00:59:07.980 --> 00:59:11.500
So yeah, if you're interested, there's some info on there.


00:59:11.500 --> 00:59:14.180
But yeah, I'd love more help on this.


00:59:14.180 --> 00:59:16.620
The learning curve on the project is quite steep,


00:59:16.620 --> 00:59:19.220
but I'm trying to make it easier.


00:59:19.220 --> 00:59:21.220
I mean, it is a compiler, so like, yeah.


00:59:21.220 --> 00:59:25.420
And I just added ARM support as well.


00:59:25.420 --> 00:59:30.420
So M1, Apple M1, and I tested Linux ARM 64,


00:59:30.420 --> 00:59:35.060
and in theory, Windows ARM,


00:59:35.060 --> 00:59:37.300
but I don't have access to any machines


00:59:37.300 --> 00:59:38.460
to test the Windows one.


00:59:38.460 --> 00:59:41.060
And I could only test the Apple one.


00:59:41.060 --> 00:59:43.660
- If you need a periodic test, you can reach out.


00:59:43.660 --> 00:59:46.600
I got a Windows 11 running on ARM.


00:59:46.600 --> 00:59:47.440
- Oh, really? Okay.


00:59:47.440 --> 00:59:48.360
- Yeah. - Yeah, maybe I'll take you


00:59:48.360 --> 00:59:49.200
up on that.


00:59:49.200 --> 00:59:51.980
- Very cool.


00:59:51.980 --> 00:59:54.640
All right, I have a couple throughout there as well.


00:59:54.640 --> 00:59:58.020
Python Software Foundation on Twitter, the PSF,


00:59:58.020 --> 00:59:59.220
announces, "We're happy to announce


00:59:59.220 --> 01:00:02.240
"the Python Developer Survey 2021.


01:00:02.240 --> 01:00:03.300
"Take part in it."


01:00:03.300 --> 01:00:05.180
This is the one that is then hosted,


01:00:05.180 --> 01:00:08.060
and then the data analysis is done by JetBrains,


01:00:08.060 --> 01:00:09.400
but not influenced by JetBrains.


01:00:09.400 --> 01:00:11.180
So I'll link to that in the show notes.


01:00:11.180 --> 01:00:13.580
Be sure to get out there and take that.


01:00:13.580 --> 01:00:16.080
Henry, in the audience, I have something as well,


01:00:16.080 --> 01:00:19.380
the feature for what you said the other day on Twitter.


01:00:19.380 --> 01:00:23.340
I said, "After Python's bytes mentioned on yesterday's show,


01:00:23.340 --> 01:00:28.340
"I asked for a new feature and it's already in pipx.


01:00:28.340 --> 01:00:31.980
"pipx run pypi command line wheels."


01:00:31.980 --> 01:00:36.980
And it basically, this is added to pypi command line.


01:00:37.740 --> 01:00:39.740
and it'll tell you all sorts of cool stuff,


01:00:39.740 --> 01:00:41.740
like the details of the wheel.


01:00:41.740 --> 01:00:43.740
So you could run pipx,


01:00:43.740 --> 01:00:47.740
basically run pypi-command-line wheels numpy,


01:00:47.740 --> 01:00:49.740
however you run that, and it'll tell you,


01:00:49.740 --> 01:00:53.740
like for numpy on macOS 10 Universal,


01:00:53.740 --> 01:00:56.740
does it have a signature, is there a binary distribution,


01:00:56.740 --> 01:01:00.740
what versions are supported, how old is it, how big is it?


01:01:00.740 --> 01:01:04.740
Same thing for Linux architecture, ARM on Windows,


01:01:04.740 --> 01:01:05.580
and so on, so on.


01:01:05.580 --> 01:01:08.960
So you get like just this cool graph using rich


01:01:08.960 --> 01:01:11.200
of like tables of tables telling you about


01:01:11.200 --> 01:01:14.720
the status of wheels on different platforms


01:01:14.720 --> 01:01:17.080
straight out of PyPI, which I thought was cool.


01:01:17.080 --> 01:01:19.320
- Nice.


01:01:19.320 --> 01:01:20.960
- Yeah, so that's pretty good.


01:01:20.960 --> 01:01:23.360
So Henry, thanks for making that happen.


01:01:23.360 --> 01:01:26.240
Also on the last episode out in the YouTube,


01:01:26.240 --> 01:01:29.400
not live comments, we got a message from,


01:01:29.400 --> 01:01:31.120
I wanna make sure I get the attribution,


01:01:31.120 --> 01:01:34.300
from Bahram and said,


01:01:34.300 --> 01:01:37.560
we talked about, what is it?


01:01:37.560 --> 01:01:38.400
- T-Bump.


01:01:38.400 --> 01:01:40.560
- T-Bump, that was it, T-Bump for bumping the versions.


01:01:40.560 --> 01:01:42.660
He said, "Oh, that's cool, I use bump to version,"


01:01:42.660 --> 01:01:46.040
which is another option to do some similar types of things.


01:01:46.040 --> 01:01:50.640
Could work with or without source control,


01:01:50.640 --> 01:01:53.500
all kinds of stuff, so fun one to check out.


01:01:53.500 --> 01:01:58.540
And Brian, you sound really good this time.


01:01:58.540 --> 01:01:59.880
Like last time I thought maybe a bee


01:01:59.880 --> 01:02:01.400
had gotten into your microphone?


01:02:01.400 --> 01:02:03.440
What was the story of that?


01:02:03.440 --> 01:02:04.520
- It's a long story.


01:02:04.520 --> 01:02:07.320
Basically, I had to throw away a mic.


01:02:07.320 --> 01:02:10.120
So I had a bad mic and a bad cable,


01:02:10.120 --> 01:02:10.960
but I have a new excellent cable.


01:02:10.960 --> 01:02:13.160
- It's tough when the two things that are connected together


01:02:13.160 --> 01:02:15.220
are both broken at the same time.


01:02:15.220 --> 01:02:17.200
- The buzzing, I think, was definitely my cable.


01:02:17.200 --> 01:02:19.320
I think there was a feedback thing going on.


01:02:19.320 --> 01:02:20.720
- Were you getting an SMS?


01:02:20.720 --> 01:02:26.640
- But then, and then I was examining everything


01:02:26.640 --> 01:02:31.440
in my audio chain and just got rid of the stuff


01:02:31.440 --> 01:02:32.680
that wasn't working.


01:02:32.680 --> 01:02:33.720
- Yeah, you sound great.


01:02:33.720 --> 01:02:35.160
New mics even better than before.


01:02:35.160 --> 01:02:37.600
So like a Phoenix, you're back.


01:02:37.600 --> 01:02:39.360
(laughing)


01:02:39.360 --> 01:02:40.760
- Nice image too.


01:02:40.760 --> 01:02:43.600
- Yeah, and then have you got your Mac Pro yet?


01:02:43.600 --> 01:02:46.840
- No, I just bought a Mac a couple of years ago.


01:02:46.840 --> 01:02:48.440
I'm not gonna buy another one right now.


01:02:48.440 --> 01:02:49.960
- Anthony, are you using one of these


01:02:49.960 --> 01:02:50.920
to test your own version?


01:02:50.920 --> 01:02:51.760
No.


01:02:51.760 --> 01:02:54.120
- I don't have a spare $4,000.


01:02:54.120 --> 01:02:54.960
- Yes.


01:02:54.960 --> 01:02:56.480
- For another laptop.


01:02:56.480 --> 01:02:59.120
And also I was like, I don't really need a laptop


01:02:59.120 --> 01:03:01.820
'cause I never leave the house, so like.


01:03:01.820 --> 01:03:03.320
- Yeah, that is a big problem.


01:03:03.320 --> 01:03:06.920
I mean, I am so loving my Mac mini and my 4K monitor


01:03:06.920 --> 01:03:10.560
that I'm just like, I don't wanna leave, I don't wanna leave.


01:03:10.560 --> 01:03:13.260
All right, well, that's it for the extras.


01:03:13.260 --> 01:03:16.320
I think it's time for a joke.


01:03:16.320 --> 01:03:18.480
Maybe Robert's got the first one out there.


01:03:18.480 --> 01:03:21.720
Can't complain about Brian, it's all about the hair.


01:03:21.720 --> 01:03:23.120
You gotta see the live stream for that one.


01:03:23.120 --> 01:03:24.800
But yeah, I agree with that.


01:03:24.800 --> 01:03:28.800
Next Halloween I want to go as Cousin It, so I got a ways to go.


01:03:28.800 --> 01:03:30.800
[LAUGHTER]


01:03:30.800 --> 01:03:32.800
Anthony, are you up for doing this joke?


01:03:32.800 --> 01:03:34.800
Yeah.


01:03:34.800 --> 01:03:36.800
I got it on my screen.


01:03:36.800 --> 01:03:38.800
Oh, you got it on yours?


01:03:38.800 --> 01:03:40.800
Yeah, I'll put it to yours. All right.


01:03:40.800 --> 01:03:44.800
OK. So, it's a picture, so I'll have to describe it.


01:03:44.800 --> 01:03:46.800
I couldn't stop laughing at this when I saw it.


01:03:46.800 --> 01:03:50.800
So this is Frodo explaining to Gollum.


01:03:50.800 --> 01:03:53.960
And there's Gollum sitting at a computer looking quite confused


01:03:53.960 --> 01:03:58.760
Looking at a picture of the ring and it says buy now one ETH


01:03:58.760 --> 01:04:01.760
And as a very right


01:04:01.760 --> 01:04:02.340
Yeah


01:04:02.340 --> 01:04:09.500
Yeah as in the theorem and photos basically trying to convince Gollum to buy an NFT of the ring instead of actually having the ring


01:04:09.500 --> 01:04:12.680
And underneath my digital precious


01:04:12.680 --> 01:04:16.800
So underneath it says so you can't own the precious


01:04:17.560 --> 01:04:23.480
physically, but you can pay to have your name listed as its owner in an online distributed


01:04:23.480 --> 01:04:24.480
database.


01:04:24.480 --> 01:04:31.880
It's only what is that like 400 US dollars, 500 Australian, something like that.


01:04:31.880 --> 01:04:35.640
I know that's a lot for a listing.


01:04:35.640 --> 01:04:39.600
I don't own any NFTs yet, nor have I sold any.


01:04:39.600 --> 01:04:41.640
I don't plan to either.


01:04:41.640 --> 01:04:43.600
Man I feel like we're totally missing.


01:04:43.600 --> 01:04:49.200
We're missing an opportunity to brand some of our former episodes.


01:04:49.200 --> 01:04:53.480
Maybe like I could just take screenshots of Brian laughing at different times out of the


01:04:53.480 --> 01:04:58.200
live stream and then like turn it into a stream of NFTs that we'll retire upon.


01:04:58.200 --> 01:05:01.200
Oh yeah, let's do that.


01:05:01.200 --> 01:05:02.200
Yeah.


01:05:02.200 --> 01:05:03.680
Oh, fantastic.


01:05:03.680 --> 01:05:05.200
All right.


01:05:05.200 --> 01:05:07.640
Oh, that was a good one.


01:05:07.640 --> 01:05:08.780
Thanks, Anthony.


01:05:08.780 --> 01:05:11.680
And thanks for being here on this big episode.


01:05:11.680 --> 01:05:13.280
- 256.


01:05:13.280 --> 01:05:15.400
- Okay, I feel like we've maybe gone slightly over this.


01:05:15.400 --> 01:05:17.040
This is not really a Python bite.


01:05:17.040 --> 01:05:19.280
This week is more of a Python lunch.


01:05:19.280 --> 01:05:20.120
- Sandwich.


01:05:20.120 --> 01:05:24.460
- Yeah, it's a proper meal, a Python dinner,


01:05:24.460 --> 01:05:25.300
but it was a good one.


01:05:25.300 --> 01:05:26.240
We talked about a lot of stuff


01:05:26.240 --> 01:05:27.860
and a bunch of great people in the audience


01:05:27.860 --> 01:05:30.600
gave us like really good inside information


01:05:30.600 --> 01:05:31.440
on where things are going.


01:05:31.440 --> 01:05:33.640
So, thanks for being here.


01:05:33.640 --> 01:05:34.800
- Thanks, Brian.


01:05:34.800 --> 01:05:35.960
- Yeah, all right.


01:05:35.960 --> 01:05:36.880
Bye y'all.


01:05:36.880 --> 01:05:37.720
- Thank you.


01:05:37.720 --> 01:05:47.720
[BLANK_AUDIO]

