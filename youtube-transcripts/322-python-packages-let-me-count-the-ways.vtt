WEBVTT

00:00:00.000 --> 00:00:01.000
Hey guys.


00:00:01.000 --> 00:00:02.000
Hello.


00:00:02.000 --> 00:00:03.000
Howdy.


00:00:03.000 --> 00:00:04.000
Hello, hello, hello, YouTube.


00:00:04.000 --> 00:00:05.000
Thank you all who are here live or coming back to watch the live recording.


00:00:05.000 --> 00:00:06.000
Of course, thanks for watching.


00:00:06.000 --> 00:00:07.000
And with that, let's just go ahead and kick it off.


00:00:07.000 --> 00:00:08.000
Hello and welcome to Python Bytes where we deliver Python news and headlines directly


00:00:08.000 --> 00:00:09.000
to your earbuds.


00:00:09.000 --> 00:00:10.000
This is episode 322 recorded February 7th, 2023.


00:00:10.000 --> 00:00:11.000
I'm Michael Kennedy.


00:00:11.000 --> 00:00:12.000
And I'm Brian O'Connor.


00:00:12.000 --> 00:00:13.000
And I'm Brian O'Connor.


00:00:13.000 --> 00:00:14.000
And we're here to talk about Python Bytes.


00:00:14.000 --> 00:00:15.000
And we're here to talk about Python Bytes.


00:00:15.000 --> 00:00:16.000
And we're here to talk about Python Bytes.


00:00:16.000 --> 00:00:17.000
And we're here to talk about Python Bytes.


00:00:17.000 --> 00:00:18.000
And we're here to talk about Python Bytes.


00:00:18.000 --> 00:00:19.000
And we're here to talk about Python Bytes.


00:00:19.000 --> 00:00:21.080
where we deliver Python news and headlines


00:00:21.080 --> 00:00:22.760
directly to your earbuds.


00:00:22.760 --> 00:00:27.760
This is episode 322, recorded February 7th, 2023.


00:00:27.760 --> 00:00:29.240
I'm Michael Kennedy.


00:00:29.240 --> 00:00:30.680
- And I'm Brian Okken.


00:00:30.680 --> 00:00:32.380
- And I'm Calvin Hendricks-Parker.


00:00:32.380 --> 00:00:35.360
- Welcome Calvin, awesome to have you here.


00:00:35.360 --> 00:00:36.280
- I'm excited to be back.


00:00:36.280 --> 00:00:38.840
I love it's kind of my annual retreat.


00:00:38.840 --> 00:00:40.240
- That's right, that's right.


00:00:40.240 --> 00:00:43.200
Your annual drop in to share all your ideas with us.


00:00:43.200 --> 00:00:44.720
It's fantastic.


00:00:44.720 --> 00:00:46.440
You got some good ones to talk about, I know.


00:00:46.440 --> 00:00:49.140
Also want to say thank you to Microsoft


00:00:49.140 --> 00:00:52.080
for Startups Founders Hub for sponsoring this episode.


00:00:52.080 --> 00:00:54.640
If you all want to connect with any of us,


00:00:54.640 --> 00:00:57.800
me, Brian, Calvin, or even just the show,


00:00:57.800 --> 00:00:59.560
you can find us over on Fosstodon.


00:00:59.560 --> 00:01:01.960
We're all over there actually on Mastodon.


00:01:01.960 --> 00:01:03.160
So you can find links and show notes.


00:01:03.160 --> 00:01:05.620
And if you're listening, but not watching,


00:01:05.620 --> 00:01:08.520
just go to pythonbytes.fm/stream/live


00:01:08.520 --> 00:01:12.880
where we will be streaming live every Tuesday, usually,


00:01:12.880 --> 00:01:16.120
but you can definitely subscribe to get notified there.


00:01:16.120 --> 00:01:19.800
Calvin, I know you've been here before, multiple times.


00:01:19.800 --> 00:01:23.680
You always come to put us to shame with your fancy camera


00:01:23.680 --> 00:01:25.880
that you got going, we love it.


00:01:25.880 --> 00:01:28.040
Tell people who maybe haven't heard about you


00:01:28.040 --> 00:01:29.900
or met you before who you are.


00:01:29.900 --> 00:01:31.480
- Sure, so I'm Calvin X. Parker.


00:01:31.480 --> 00:01:33.640
I'm co-founder and CTO of Six Feet Up.


00:01:33.640 --> 00:01:36.240
We are a software development company


00:01:36.240 --> 00:01:39.880
that helps digital leaders transform their impact.


00:01:39.880 --> 00:01:41.440
We do a lot of interesting work now


00:01:41.440 --> 00:01:42.680
around impactful projects.


00:01:42.680 --> 00:01:44.400
So it's like climate change,


00:01:44.400 --> 00:01:46.360
making the world a better place.


00:01:46.360 --> 00:01:48.680
In addition, I've started a couple of communities.


00:01:48.680 --> 00:01:51.320
So the IndiePi community here local in Indianapolis,


00:01:51.320 --> 00:01:53.080
and then we kind of branched out from that


00:01:53.080 --> 00:01:55.480
into some little local conferences


00:01:55.480 --> 00:01:57.320
into now Python Web Conference.


00:01:57.320 --> 00:02:00.760
So that's probably the big thing you'll hear from me


00:02:00.760 --> 00:02:02.840
at least this month and next month.


00:02:02.840 --> 00:02:04.600
- Yeah, we'll talk about that at the end of the show,


00:02:04.600 --> 00:02:06.080
but that's an amazing conference.


00:02:06.080 --> 00:02:09.160
You have, I would say, potentially more talks


00:02:09.160 --> 00:02:12.480
or on par as many talks as US PyCon.


00:02:12.480 --> 00:02:14.240
It's really a lot going on there.


00:02:14.240 --> 00:02:16.200
Last year, there were almost too many.


00:02:16.200 --> 00:02:19.640
Like it was so good, I just kept saying yes to everybody.


00:02:19.640 --> 00:02:21.520
This year, we pulled back a little bit.


00:02:21.520 --> 00:02:23.200
We had more submissions.


00:02:23.200 --> 00:02:26.600
We'll talk about this later, but it was really hard to choose.


00:02:26.600 --> 00:02:28.800
- Yeah, it's tough to say no to deserving people.


00:02:28.800 --> 00:02:30.480
- It's so much fun.


00:02:30.480 --> 00:02:31.840
So many great people.


00:02:31.840 --> 00:02:32.680
- Indeed.


00:02:32.680 --> 00:02:34.220
All right, Brian, kick us off.


00:02:34.220 --> 00:02:38.120
- I just wanted to talk about packaging today a little bit.


00:02:38.120 --> 00:02:40.160
I've got, I'm splitting it up into two segments,


00:02:40.160 --> 00:02:42.080
but I really wanna focus on,


00:02:42.080 --> 00:02:45.640
right now on the PyPA has a packaging


00:02:45.640 --> 00:02:48.560
Python projects tutorial page.


00:02:48.560 --> 00:02:51.160
It's linked in the show notes, of course,


00:02:51.160 --> 00:02:53.160
but I think this is a good,


00:02:53.160 --> 00:02:55.000
it's really pretty good, well-written.


00:02:55.000 --> 00:02:57.200
And so I want to point people in this direction.


00:02:57.200 --> 00:02:59.580
If you want to share your Python code


00:02:59.580 --> 00:03:02.160
with somebody else, packaging it is the right way to go,


00:03:02.160 --> 00:03:03.400
I think.


00:03:03.400 --> 00:03:06.760
And this tutorial walks through,


00:03:06.760 --> 00:03:09.360
it's not necessarily trivial to do it.


00:03:09.360 --> 00:03:11.920
So, and it, I wish it was easier,


00:03:11.920 --> 00:03:13.620
but it's not bad.


00:03:13.620 --> 00:03:16.620
So it walks through what you,


00:03:16.620 --> 00:03:19.620
walks through setting up your directory structure.


00:03:19.620 --> 00:03:22.360
It's, and then you have to have some package files with it.


00:03:22.360 --> 00:03:23.700
You've got to have a license file


00:03:23.700 --> 00:03:27.500
and a pyproject.toml now, and a readme.


00:03:27.500 --> 00:03:29.340
And then it talks about your source directory


00:03:29.340 --> 00:03:31.700
and your test directory.


00:03:31.700 --> 00:03:33.100
So you've got the directory set up.


00:03:33.100 --> 00:03:34.620
- Right, I know you're a fan


00:03:34.620 --> 00:03:36.540
of the source directory for packages.


00:03:36.540 --> 00:03:37.460
It looks like--


00:03:37.460 --> 00:03:40.120
- Yeah, IPA is--


00:03:40.120 --> 00:03:42.040
- Exactly, your philosophy is winning out here


00:03:42.040 --> 00:03:44.400
is the official recommendation.


00:03:44.400 --> 00:03:48.840
- Yeah, and I mostly, I used to have good reasons behind it.


00:03:48.840 --> 00:03:53.000
Now I just like having the top level stuff just be packaging


00:03:53.000 --> 00:03:55.800
and having the actual source code be somewhere else


00:03:55.800 --> 00:03:57.000
in the source directory.


00:03:57.000 --> 00:04:01.040
While you're developing, it's nicer.


00:04:01.040 --> 00:04:03.840
If you have a single, there is like caveats though.


00:04:03.840 --> 00:04:06.920
If you have a single file that you're just sharing,


00:04:06.920 --> 00:04:09.000
that might seem like overkill.


00:04:09.000 --> 00:04:12.760
And I'm fine with, of course, I have packages as well


00:04:12.760 --> 00:04:15.000
that are single file that I don't do this with.


00:04:15.000 --> 00:04:18.320
So you don't have to, but most projects


00:04:18.320 --> 00:04:21.480
are gonna have more than one file if you're sharing it.


00:04:21.480 --> 00:04:24.380
So there's this, and then what do you put in it?


00:04:24.380 --> 00:04:27.120
So it talks about what you put in the different things


00:04:27.120 --> 00:04:31.000
in the pyproject.toml and a little bit into the readme


00:04:31.000 --> 00:04:32.240
and some of the metadata.


00:04:32.240 --> 00:04:37.320
One of the things we're gonna jump into a little bit later


00:04:37.320 --> 00:04:40.240
in the show is that there are lots of options


00:04:40.240 --> 00:04:42.960
for what build backend you use.


00:04:42.960 --> 00:04:46.240
This project itself or this document


00:04:46.240 --> 00:04:51.080
talks about hatchling, setup tools, flit and PDM.


00:04:51.080 --> 00:04:53.200
And neither of them look that different


00:04:53.200 --> 00:04:54.980
and they kind of do the same thing,


00:04:54.980 --> 00:04:57.360
but you can have different metadata that goes with it.


00:04:57.360 --> 00:05:00.840
So that's, I think both a good thing that we have options


00:05:00.840 --> 00:05:04.140
and a bad thing that some people don't know how to choose.


00:05:04.140 --> 00:05:05.640
So--


00:05:05.640 --> 00:05:08.640
>> Is it really tough to know why should you do it?


00:05:08.640 --> 00:05:11.880
Maybe set up tools probably shouldn't be the choice.


00:05:11.880 --> 00:05:12.800
I feel like that--


00:05:12.800 --> 00:05:13.400
>> Yeah, I don't know.


00:05:13.400 --> 00:05:15.100
>> --moving a little bit away from that.


00:05:15.100 --> 00:05:16.720
>> The history here is so deep.


00:05:16.720 --> 00:05:20.120
Like, I feel like there's a whole day, a whole college


00:05:20.120 --> 00:05:22.360
course you could give on why these things are


00:05:22.360 --> 00:05:23.680
the way they are now.


00:05:23.680 --> 00:05:24.920
>> Yeah.


00:05:24.920 --> 00:05:28.560
Yeah, so the project, the tutorial


00:05:28.560 --> 00:05:30.880
goes down into even distributing.


00:05:30.880 --> 00:05:35.880
So all the way down to recommending that you use Twine


00:05:35.880 --> 00:05:40.800
to upload to the test repository, test pipe here.


00:05:40.800 --> 00:05:43.980
And you have to get a token and it's not trivial


00:05:43.980 --> 00:05:45.480
and all this sort of stuff.


00:05:45.480 --> 00:05:47.720
So it's still a little daunting,


00:05:47.720 --> 00:05:51.240
but this will walk you through all the steps.


00:05:51.240 --> 00:05:53.080
I have a personal opinion, of course,


00:05:53.080 --> 00:05:57.880
and my opinion is read this and then check out Flit.


00:05:57.880 --> 00:06:01.320
Because for simple projects, Flit is, I think,


00:06:01.320 --> 00:06:03.000
still the easiest.


00:06:03.000 --> 00:06:07.240
It replaces the build step with Flit Build.


00:06:07.240 --> 00:06:10.920
And it replaces the creation of some of these files


00:06:10.920 --> 00:06:11.800
with Flit Init.


00:06:11.800 --> 00:06:16.200
And it replaces the Twine upload with just Flit Publish.


00:06:16.200 --> 00:06:18.520
And I use it on a few projects.


00:06:18.520 --> 00:06:22.920
And I haven't had reason to switch yet.


00:06:22.920 --> 00:06:26.600
It's not perfect, but it's pretty easy for small projects.


00:06:26.600 --> 00:06:28.200
So I would say read both of these


00:06:28.200 --> 00:06:30.160
if you want to share some Python code.


00:06:30.160 --> 00:06:32.560
- Excellent. Yeah.


00:06:32.560 --> 00:06:33.480
Very good recommendation.


00:06:33.480 --> 00:06:35.160
And I think people need guidance here


00:06:35.160 --> 00:06:36.960
because there are so many choices.


00:06:36.960 --> 00:06:38.320
There's going to be a lot of conversation


00:06:38.320 --> 00:06:40.320
in the Python space around this actually.


00:06:40.320 --> 00:06:41.280
- For sure.


00:06:41.280 --> 00:06:42.120
- Yep.


00:06:42.120 --> 00:06:43.880
- All right.


00:06:43.880 --> 00:06:45.640
Let's move on though for right now.


00:06:45.640 --> 00:06:46.480
- Indeed.


00:06:46.480 --> 00:06:49.260
So just real time follow up here.


00:06:49.260 --> 00:06:52.040
As of about 30 minutes ago,


00:06:52.040 --> 00:06:54.760
Ophek, the creator of Hatch


00:06:54.760 --> 00:06:57.440
and I'm gonna have a conversation March 1st on Talk Python.


00:06:57.440 --> 00:07:00.000
So if people wanna hear more about Hatch,


00:07:00.000 --> 00:07:02.940
that's coming up in about three weeks or so.


00:07:02.940 --> 00:07:05.900
But what do I wanna talk about?


00:07:05.900 --> 00:07:07.040
Something fun.


00:07:07.040 --> 00:07:09.720
Last time we had the Unrapple,


00:07:09.720 --> 00:07:11.360
this time we have the Untangle.


00:07:11.360 --> 00:07:17.640
So Untangle by stchris on GitHub


00:07:17.640 --> 00:07:22.360
converts XML to dynamic Python objects.


00:07:22.360 --> 00:07:26.880
So thankfully, we've largely moved past XML.


00:07:26.880 --> 00:07:28.040
And really thankfully,


00:07:28.040 --> 00:07:31.240
we've largely moved past XML namespaces,


00:07:31.240 --> 00:07:32.820
'cause that just is a complication


00:07:32.820 --> 00:07:35.040
that never needed to exist.


00:07:35.040 --> 00:07:37.540
But there's still plenty of XML stuff out there


00:07:37.540 --> 00:07:38.560
that people have to work with.


00:07:38.560 --> 00:07:41.880
So here's a cool little library that people can use.


00:07:41.880 --> 00:07:45.040
So we already have XML support in Python


00:07:45.040 --> 00:07:50.000
through the element tree API, which is, it's pretty nice.


00:07:50.000 --> 00:07:53.580
it works well, you give it a XML document,


00:07:53.580 --> 00:07:56.420
but then you do, you sort of navigate it


00:07:56.420 --> 00:08:01.020
through like child parent or dot attribute.


00:08:01.020 --> 00:08:02.540
There's like some,


00:08:02.540 --> 00:08:06.780
it's not the totally the cleanest, most straightforward API.


00:08:06.780 --> 00:08:08.340
So with this untangle thing,


00:08:08.340 --> 00:08:10.220
you can treat it like a Python object


00:08:10.220 --> 00:08:15.180
that just dynamically adopts the nodes


00:08:15.180 --> 00:08:20.180
as fields of those objects as a hierarchy, right?


00:08:20.180 --> 00:08:25.020
So super simple, you just get it to parse either a URL,


00:08:25.020 --> 00:08:28.280
a file or from a string, just an XML string.


00:08:28.280 --> 00:08:31.580
There's an example that it's just real simple.


00:08:31.580 --> 00:08:34.540
It has a root and it has a child node.


00:08:34.540 --> 00:08:37.180
And on the child node, it has an attribute


00:08:37.180 --> 00:08:39.780
where it says name equals child one, okay?


00:08:39.780 --> 00:08:43.180
So if you were to load that up with this untangle thing,


00:08:43.180 --> 00:08:46.040
you just, whatever you get back, you say dot root


00:08:46.040 --> 00:08:47.840
because that's the first element.


00:08:47.840 --> 00:08:49.760
If you wanted to say, for example, that name attribute,


00:08:49.760 --> 00:08:52.680
say dot root, 'cause that's the name of the root,


00:08:52.680 --> 00:08:53.660
is whatever the first element.


00:08:53.660 --> 00:08:55.620
Then the next element is dot child.


00:08:55.620 --> 00:08:58.760
And then to get the attribute,


00:08:58.760 --> 00:09:00.960
you just treat it like a dictionary and say bracket name


00:09:00.960 --> 00:09:03.360
and outcomes, outcomes at value.


00:09:03.360 --> 00:09:05.620
So that seems really, really clean and nice.


00:09:05.620 --> 00:09:08.120
- It does look clean,


00:09:08.120 --> 00:09:10.000
other than the fact you're still dealing with XML.


00:09:10.000 --> 00:09:10.840
- Yeah, well.


00:09:10.840 --> 00:09:12.400
(both laughing)


00:09:12.400 --> 00:09:15.380
- I was just dealing with XML this morning, yuck.


00:09:15.380 --> 00:09:16.780
- Yeah, absolutely.


00:09:16.780 --> 00:09:22.980
So I suppose there's an API for enumerating things


00:09:22.980 --> 00:09:24.780
where you have multiple ones, right?


00:09:24.780 --> 00:09:27.180
You could have child, child, child, child with name one,


00:09:27.180 --> 00:09:28.500
child with name two, right?


00:09:28.500 --> 00:09:31.980
As a list of things in this XML.


00:09:31.980 --> 00:09:35.860
So it's, there's probably, you know, maybe if


00:09:35.860 --> 00:09:36.860
there's multiple ones, I don't know,


00:09:36.860 --> 00:09:38.380
maybe it's a list or something I have to look,


00:09:38.380 --> 00:09:41.080
actually realize I didn't totally look into that, but.


00:09:41.080 --> 00:09:46.720
It's a pretty cool library if people are doing things like that.


00:09:46.720 --> 00:09:48.760
They can definitely check it out.


00:09:48.760 --> 00:09:50.120
Here we go. Maybe.


00:09:50.120 --> 00:09:53.860
>> I think I will try this out because I have used the elementary,


00:09:53.860 --> 00:09:57.880
and it does the job,


00:09:57.880 --> 00:10:01.440
but I always thought maybe it could be easier.


00:10:01.440 --> 00:10:02.800
>> What's the speed like?


00:10:02.800 --> 00:10:05.440
Do you know anything on if it's fast, slow?


00:10:05.440 --> 00:10:09.080
>> Honestly, I would imagine what it's doing is it's probably using


00:10:09.080 --> 00:10:10.140
an element tree.


00:10:10.140 --> 00:10:10.980
- Yeah.


00:10:10.980 --> 00:10:14.260
- And just like a thin wrapper over top of it.


00:10:14.260 --> 00:10:16.680
But I don't, I don't know, let's see.


00:10:16.680 --> 00:10:23.920
Oh, it's using defused XML, SACS, okay.


00:10:23.920 --> 00:10:27.660
I have no, I don't know anything about SACS XML,


00:10:27.660 --> 00:10:30.540
but yeah, okay, pretty interesting.


00:10:30.540 --> 00:10:33.840
No, I don't know anything.


00:10:33.840 --> 00:10:37.040
It doesn't, unfortunately the readme


00:10:37.040 --> 00:10:40.160
doesn't have a lot of information about, you know,


00:10:40.160 --> 00:10:44.040
like its performance and other things, but yeah.


00:10:44.040 --> 00:10:45.640
They also have a blog post you can check out


00:10:45.640 --> 00:10:47.760
about why they built it, which is kind of neat.


00:10:47.760 --> 00:10:51.960
So also short and sweet, but check it out


00:10:51.960 --> 00:10:55.160
if that sounds like something that would benefit you.


00:10:55.160 --> 00:10:56.200
- That's very cool.


00:10:56.200 --> 00:10:57.040
- Indeed.


00:10:57.040 --> 00:10:58.040
All right, over to you, Calvin.


00:10:58.040 --> 00:11:00.080
- Well, something else that could benefit you


00:11:00.080 --> 00:11:04.520
is gonna be myPy is official 1.0 released.


00:11:04.520 --> 00:11:08.680
I think this was as of about a week and a half ago.


00:11:08.680 --> 00:11:11.560
So it's pretty new news, a ton of stuff here.


00:11:11.560 --> 00:11:12.520
So for those who don't know,


00:11:12.520 --> 00:11:15.560
mypy is the static type checker for Python,


00:11:15.560 --> 00:11:19.160
basically a Python linter on steroids.


00:11:19.160 --> 00:11:20.700
So if you are using type hints,


00:11:20.700 --> 00:11:22.700
this is gonna be a great way for you


00:11:22.700 --> 00:11:26.540
to make sure your code is basically ready to go


00:11:26.540 --> 00:11:27.940
before it even runs.


00:11:27.940 --> 00:11:31.740
Something a lot of developers coming to Python


00:11:31.740 --> 00:11:35.140
from other statically or strongly typed languages


00:11:35.140 --> 00:11:36.260
really appreciate.


00:11:36.260 --> 00:11:38.740
And I think it's something that a lot of Python developers


00:11:38.740 --> 00:11:41.380
are moving to, especially with like the surge


00:11:41.380 --> 00:11:43.740
of populative languages like TypeScript,


00:11:43.740 --> 00:11:47.340
because the IDEs are really supporting this like so well.


00:11:47.340 --> 00:11:49.820
So you get a significant improvement


00:11:49.820 --> 00:11:53.060
in your quality of life if you move to a tool like mypy


00:11:53.060 --> 00:11:55.260
and start using Python and Python hints,


00:11:55.260 --> 00:11:57.620
so type hints in Python.


00:11:57.620 --> 00:11:59.300
There's some things to watch out for.


00:11:59.300 --> 00:12:01.420
So as this new release rolls out,


00:12:01.420 --> 00:12:03.220
they are changing their numbering scheme.


00:12:03.220 --> 00:12:06.060
It used to be like 0.999.


00:12:06.060 --> 00:12:11.380
They kept extending this 0.9 beta release window.


00:12:11.380 --> 00:12:13.460
But it's actually now 1.0.


00:12:13.460 --> 00:12:15.060
It is not Simver.


00:12:15.060 --> 00:12:18.380
So do not count on minor releases not having


00:12:18.380 --> 00:12:20.540
backward incompatibilities, although they


00:12:20.540 --> 00:12:22.980
should be very minimal, is what they claim.


00:12:22.980 --> 00:12:24.740
But something you may want to be aware of,


00:12:24.740 --> 00:12:28.660
if you are upgrading this, and when you go in and pin


00:12:28.660 --> 00:12:32.260
your mypy version, you want to be really explicit about it


00:12:32.260 --> 00:12:33.660
because they're going to make sure they announce


00:12:33.660 --> 00:12:35.660
those significant backward incompatibilities


00:12:35.660 --> 00:12:38.380
in any kind of blog post in the release


00:12:38.380 --> 00:12:39.740
before that feature releases.


00:12:39.740 --> 00:12:40.340
So the idea--


00:12:40.340 --> 00:12:43.140
>>Just say it has a gut feel-ver.


00:12:43.140 --> 00:12:44.020
>>Yeah, yeah, right.


00:12:44.020 --> 00:12:45.940
>>So you can answer, what's the official term?


00:12:45.940 --> 00:12:47.540
Yeah, it feels like a big release.


00:12:47.540 --> 00:12:49.620
Let's go ahead and change this part of the version.


00:12:49.620 --> 00:12:53.140
>>But on that same note, they do have feature flags for this.


00:12:53.140 --> 00:12:55.380
So if there is a new big feature coming


00:12:55.380 --> 00:12:57.900
that is going to be a backward incompatible feature,


00:12:57.900 --> 00:13:00.960
The previous release notes will note it, the release will have it,


00:13:00.960 --> 00:13:03.800
there'll be a flag to turn it on, so you can try it out easily


00:13:03.800 --> 00:13:07.300
in your workflow, see what breaks without having to downgrade,


00:13:07.300 --> 00:13:10.540
re-upgrade, downgrade, re-upgrade, so you can turn it on and off


00:13:10.540 --> 00:13:13.340
and make sure it works inside your workflow and your process.


00:13:13.340 --> 00:13:18.980
Lots of performance improvements, so 1.0 is 40% faster than 0.991.


00:13:18.980 --> 00:13:22.780
There's about 20 optimizations in this list,


00:13:22.780 --> 00:13:27.020
and you can see by my scroll bar, there's a ton of stuff that happened


00:13:27.020 --> 00:13:29.020
when they went to release 1.0.


00:13:29.020 --> 00:13:31.180
But some more things in here that are nice features,


00:13:31.180 --> 00:13:34.180
for example, warning about variables before definition


00:13:34.180 --> 00:13:37.180
kind of goes along with this possibly undefined variables.


00:13:37.180 --> 00:13:40.700
So for example, if B's never true, X never happens,


00:13:40.700 --> 00:13:43.660
you'll never be able to print X. mypy will tell you about that


00:13:43.660 --> 00:13:44.960
before you ever run your code.


00:13:44.960 --> 00:13:47.980
So it's kind of like just a lot of those belts and suspenders,


00:13:47.980 --> 00:13:49.420
nice safety checks.


00:13:49.420 --> 00:13:50.740
Keep your code nice and clean.


00:13:50.740 --> 00:13:53.820
Combine this with tools like Black and things


00:13:53.820 --> 00:13:56.060
like that to just have super tight code that


00:13:56.060 --> 00:13:58.460
is easy to read for everybody.


00:13:58.460 --> 00:14:01.800
Some new features that are supported as of Python 3.11,


00:14:01.800 --> 00:14:04.740
the new self type is supported.


00:14:04.740 --> 00:14:08.180
So if you are having a method that


00:14:08.180 --> 00:14:10.540
returns an instance of the class,


00:14:10.540 --> 00:14:13.860
you can use the self type so that if you have a subclass,


00:14:13.860 --> 00:14:16.260
you get the correct subclass return instead


00:14:16.260 --> 00:14:20.340
of having to explicitly redefine that for every subclass you


00:14:20.340 --> 00:14:20.840
are doing.


00:14:20.840 --> 00:14:22.420
So more convenience methods for those


00:14:22.420 --> 00:14:26.180
or diving deep into the typing system here.


00:14:26.180 --> 00:14:27.680
- The self type is so good.


00:14:27.680 --> 00:14:30.420
- Yeah, it's really, it cleans up a lot of problems.


00:14:30.420 --> 00:14:32.500
- It was really janky to, you know,


00:14:32.500 --> 00:14:35.260
if you're inside the class, you put in quotes,


00:14:35.260 --> 00:14:37.940
the name of the class, well, how's it supposed to find?


00:14:37.940 --> 00:14:38.780
- Right.


00:14:38.780 --> 00:14:39.600
- You know, that one,


00:14:39.600 --> 00:14:41.420
or if it's gonna create a circular dependency,


00:14:41.420 --> 00:14:42.540
you've got to do weird things.


00:14:42.540 --> 00:14:44.620
So yeah, that's really, really nice.


00:14:44.620 --> 00:14:49.620
I do wish that Python had like a two stage parser aspect


00:14:51.460 --> 00:14:53.100
where it would say, go through,


00:14:53.100 --> 00:14:55.120
here's all the stuff that's defined in the class.


00:14:55.120 --> 00:14:57.840
Oh, here's some type things and other reference.


00:14:57.840 --> 00:14:58.820
We might not know what that is.


00:14:58.820 --> 00:15:00.900
Let's go all through and then go back again


00:15:00.900 --> 00:15:02.680
and see if we can figure out what that is, you know.


00:15:02.680 --> 00:15:04.620
But the way it works now is


00:15:04.620 --> 00:15:06.620
when you're in the middle of a class,


00:15:06.620 --> 00:15:08.180
that class doesn't exist yet


00:15:08.180 --> 00:15:10.380
because it's not done defining it till the end.


00:15:10.380 --> 00:15:11.200
But if you gotta say,


00:15:11.200 --> 00:15:13.340
I'm gonna compare this against another one of me,


00:15:13.340 --> 00:15:15.380
well, how do you say that in types?


00:15:15.380 --> 00:15:16.300
Self.


00:15:16.300 --> 00:15:17.140
- Right.


00:15:17.140 --> 00:15:17.980
- That's what we got.


00:15:17.980 --> 00:15:21.060
- And I can see this like being rolled in


00:15:21.060 --> 00:15:23.980
to proper Python, it seems like at some point.


00:15:23.980 --> 00:15:26.580
'Cause I just feel like types went on


00:15:26.580 --> 00:15:28.940
from being this pie in the sky idea


00:15:28.940 --> 00:15:32.300
to a bolted on type feature to,


00:15:32.300 --> 00:15:33.460
it's really getting ironed out


00:15:33.460 --> 00:15:35.660
and really well supported by the community


00:15:35.660 --> 00:15:38.020
and really well supported by all the editors.


00:15:38.020 --> 00:15:40.700
There's some new params back stuff in here


00:15:40.700 --> 00:15:43.580
that I don't know too much about params to backs.


00:15:43.580 --> 00:15:45.980
That I've not, we're not heavy into types yet.


00:15:45.980 --> 00:15:49.120
We're doing a lot with Django and doing some type ends there


00:15:49.120 --> 00:15:50.500
to start making some APIs.


00:15:50.500 --> 00:15:52.820
but that's where we're still diving in.


00:15:52.820 --> 00:15:54.700
A bunch of new miscellaneous features.


00:15:54.700 --> 00:15:57.540
So if you are looking for features galore


00:15:57.540 --> 00:16:00.140
that has happened in mypy 1.0,


00:16:00.140 --> 00:16:01.580
there's a bunch of fixes to crashes.


00:16:01.580 --> 00:16:05.000
So this seems like it's a really robust release.


00:16:05.000 --> 00:16:06.660
Another important one here is gonna be


00:16:06.660 --> 00:16:09.660
the Python 3.10 match statement support.


00:16:09.660 --> 00:16:11.720
So it can compile those as well.


00:16:11.720 --> 00:16:12.940
So they're staying on top of all


00:16:12.940 --> 00:16:15.020
the recent language features,


00:16:15.020 --> 00:16:18.780
which is obviously what's needed to get momentum


00:16:18.780 --> 00:16:20.500
behind a project like this.


00:16:20.500 --> 00:16:22.100
I think anybody who's using TypeHint's better


00:16:22.100 --> 00:16:24.740
of using the mypy stuff.


00:16:24.740 --> 00:16:28.180
For those who don't know, it's also supported by Dropbox.


00:16:28.180 --> 00:16:32.260
So when I said 40%, or no, yeah, the 40% faster,


00:16:32.260 --> 00:16:36.580
that was actually running against the Dropbox main code base.


00:16:36.580 --> 00:16:38.300
So they're actually, that's the benchmark


00:16:38.300 --> 00:16:39.900
against Dropbox itself.


00:16:39.900 --> 00:16:42.260
- Interesting.


00:16:42.260 --> 00:16:43.080
- Yeah.


00:16:43.080 --> 00:16:44.620
- Yeah, mypyc is pretty, an interesting thing


00:16:44.620 --> 00:16:46.740
that opens up once you started to adopt types.


00:16:46.740 --> 00:16:50.860
For me, the main reason I use types in my world,


00:16:50.860 --> 00:16:53.860
and I realize that I live in a different world


00:16:53.860 --> 00:16:55.620
than a lot of folks, but for me,


00:16:55.620 --> 00:16:59.260
it's really about making the editor tell me


00:16:59.260 --> 00:17:02.440
what it should know already and not,


00:17:02.440 --> 00:17:03.740
do I need to go look in that method?


00:17:03.740 --> 00:17:05.660
Does this actually take, when it says user ID,


00:17:05.660 --> 00:17:10.380
is that a string or is that a BSON from MongoDB?


00:17:10.380 --> 00:17:12.580
I can't remember what kind of thing this stores


00:17:12.580 --> 00:17:14.700
for this date it says, you know?


00:17:14.700 --> 00:17:16.260
And then, oh, okay, that's obvious, right?


00:17:16.260 --> 00:17:18.140
just so you don't have to keep bouncing around.


00:17:18.140 --> 00:17:20.620
You just stay in the way you're trying to focus.


00:17:20.620 --> 00:17:21.460
And I love it.


00:17:21.460 --> 00:17:22.280
- Yeah, it's extra smart.


00:17:22.280 --> 00:17:25.100
I mean, you thought if you're using a PyCharm or VS Code


00:17:25.100 --> 00:17:26.940
and you thought it was smart before,


00:17:26.940 --> 00:17:28.900
once you introduce these types in there,


00:17:28.900 --> 00:17:30.380
it gets even smarter.


00:17:30.380 --> 00:17:32.960
- Absolutely.


00:17:32.960 --> 00:17:33.800
All right, awesome.


00:17:33.800 --> 00:17:34.620
Awesome one.


00:17:34.620 --> 00:17:36.580
Now, two pieces of real-time feedback.


00:17:36.580 --> 00:17:39.020
One, I found out with the untangle


00:17:39.020 --> 00:17:42.660
that if you have multiple nodes of the same thing,


00:17:42.660 --> 00:17:43.980
like you would in an RSS feed,


00:17:43.980 --> 00:17:45.580
you have multiple posts or a blog post,


00:17:45.580 --> 00:17:46.840
same thing for the post.


00:17:46.840 --> 00:17:53.520
You just still say root.mainthing.child


00:17:53.520 --> 00:17:55.040
or whatever the name of that node is,


00:17:55.040 --> 00:17:57.540
that becomes a list instead of a single thing


00:17:57.540 --> 00:17:58.920
if there's more than one.


00:17:58.920 --> 00:18:02.880
Okay, so that's pretty interesting.


00:18:02.880 --> 00:18:07.460
And then the other one here is over to you, Brian.


00:18:07.460 --> 00:18:10.680
Jeff asked, can an old project be converted


00:18:10.680 --> 00:18:11.680
to work with Flit?


00:18:12.960 --> 00:18:15.960
And yes, probably, maybe.


00:18:15.960 --> 00:18:17.560
It really depends on the project.


00:18:17.560 --> 00:18:20.560
- Some of it can be re,


00:18:20.560 --> 00:18:21.960
there's not that much to it, right?


00:18:21.960 --> 00:18:24.480
There's a pyproject.toml and a few other things


00:18:24.480 --> 00:18:29.280
and it's probably not that much work to migrate it, I guess.


00:18:29.280 --> 00:18:31.320
- Yeah, but I mean, an old,


00:18:31.320 --> 00:18:33.440
I'm assuming by old project,


00:18:33.440 --> 00:18:37.340
it's a set of two, an old set of .py set of tools project


00:18:37.340 --> 00:18:39.480
and you could do anything in that.


00:18:39.480 --> 00:18:42.760
So if you were going crazy,


00:18:42.760 --> 00:18:44.040
You can't go crazy anymore.


00:18:44.040 --> 00:18:47.840
But if it was a fairly simple, straightforward,


00:18:47.840 --> 00:18:49.760
then yeah, probably.


00:18:49.760 --> 00:18:51.560
- If you were going crazy, you get what you deserve.


00:18:51.560 --> 00:18:52.400
How about that?


00:18:52.400 --> 00:18:55.400
(laughing)


00:18:55.400 --> 00:18:59.320
So, all right, before we move on to our next topic,


00:18:59.320 --> 00:19:02.400
let me tell you about our sponsor for this week,


00:19:02.400 --> 00:19:04.880
Microsoft for Startups Founders Hub.


00:19:04.880 --> 00:19:05.840
Really great program.


00:19:05.840 --> 00:19:09.720
If you have a startup and you wanna get tons of support,


00:19:09.720 --> 00:19:13.820
not just technical support, but also networking


00:19:13.820 --> 00:19:16.540
with people who have founded their own startups,


00:19:16.540 --> 00:19:17.380
then you should check out


00:19:17.380 --> 00:19:19.380
Microsoft for Startup Founders Hub.


00:19:19.380 --> 00:19:21.480
As Brian mentioned last time,


00:19:21.480 --> 00:19:23.740
we heard back from one of our listeners who signed up


00:19:23.740 --> 00:19:25.100
and had done several startups and said,


00:19:25.100 --> 00:19:26.380
"I was a little skeptical,


00:19:26.380 --> 00:19:28.220
but this is a really great program.


00:19:28.220 --> 00:19:29.340
It's fantastic for us.


00:19:29.340 --> 00:19:31.960
And I just wanted to let you know how well it's working out."


00:19:31.960 --> 00:19:34.260
So definitely a good program.


00:19:34.260 --> 00:19:35.460
People should check it out.


00:19:35.460 --> 00:19:38.300
So what it is, is Microsoft created this program


00:19:38.300 --> 00:19:42.820
to help people become successful starting a business.


00:19:42.820 --> 00:19:45.660
By some estimates, 90% of startups go out of business


00:19:45.660 --> 00:19:46.820
within the first year.


00:19:46.820 --> 00:19:48.780
That's not what you want for your startup.


00:19:48.780 --> 00:19:50.680
You want it to succeed.


00:19:50.680 --> 00:19:52.480
So with Microsoft for Startup Founders Hub,


00:19:52.480 --> 00:19:55.540
you get access to free resources.


00:19:55.540 --> 00:20:00.540
So this includes platform technologies like Azure, GitHub,


00:20:00.540 --> 00:20:03.100
they partner with OpenAI.


00:20:03.100 --> 00:20:06.140
I've heard chat GTP is catching on, so that's kind of cool.


00:20:06.140 --> 00:20:09.380
So you get access to some of the resources from them,


00:20:09.380 --> 00:20:10.220
which is fantastic,


00:20:10.220 --> 00:20:13.040
but you also get access to the mentorship network,


00:20:13.040 --> 00:20:15.740
which I think maybe is even the most important part.


00:20:15.740 --> 00:20:18.400
You get access to a pool of hundreds of mentors


00:20:18.400 --> 00:20:19.880
across ranges of disciplines,


00:20:19.880 --> 00:20:23.240
across areas like idea validation, fundraising,


00:20:23.240 --> 00:20:27.300
management and coaching, sales and marketing, and others.


00:20:27.300 --> 00:20:29.120
So you can go and book one-on-one meetings


00:20:29.120 --> 00:20:30.360
with these folks,


00:20:30.360 --> 00:20:32.720
and many of them are former founders themselves.


00:20:32.720 --> 00:20:36.660
So you can make your idea reality today


00:20:36.660 --> 00:20:38.100
with the critical support you get from Microsoft


00:20:38.100 --> 00:20:39.700
for Startups Founders Hub.


00:20:39.700 --> 00:20:44.260
Just visit pythonbytes.fm/foundershub2022


00:20:44.260 --> 00:20:47.460
to go apply, the links in your show notes.


00:20:47.460 --> 00:20:50.580
You don't have to be VC backed.


00:20:50.580 --> 00:20:52.660
You don't have to be third-party validated.


00:20:52.660 --> 00:20:53.740
You just apply.


00:20:53.740 --> 00:20:55.980
If they like what you want, it's free


00:20:55.980 --> 00:20:58.380
and they'll take you under the program and you can get started.


00:20:58.380 --> 00:21:01.860
So thank you to Microsoft for supporting our show


00:21:01.860 --> 00:21:04.660
And with that, Brian, over to you.


00:21:04.660 --> 00:21:10.380
- Yeah, so go back to the same article for a second.


00:21:10.380 --> 00:21:12.060
- Just scroll a little further down the same page.


00:21:12.060 --> 00:21:12.900
I got it.


00:21:12.900 --> 00:21:17.900
- So in within the same packaging Python projects thing,


00:21:17.900 --> 00:21:20.940
there was, I have a reason to bring this up,


00:21:20.940 --> 00:21:23.500
but anyway, it lists a whole bunch of tools you can use


00:21:23.500 --> 00:21:26.220
to for your back, build a backend.


00:21:26.220 --> 00:21:29.300
It's got PDM, flit, set up tools and hatchling.


00:21:29.300 --> 00:21:34.300
There's another page on the same, in PyPI or PyPA,


00:21:34.300 --> 00:21:36.980
that is the packaging flow.


00:21:36.980 --> 00:21:39.960
And this one talks about it as a more of a high level.


00:21:39.960 --> 00:21:42.680
It's not a tutorial, talks about the high level thing.


00:21:42.680 --> 00:21:45.220
And there, it lists all of those,


00:21:45.220 --> 00:21:47.880
flit, hatch, PDM, poetry, subtools,


00:21:47.880 --> 00:21:51.840
and then also trampoline and way, which I've not heard of.


00:21:51.840 --> 00:21:54.640
So this can cause confusion.


00:21:54.640 --> 00:21:56.420
And that's really what we're talking about,


00:21:56.420 --> 00:21:58.700
is I have, and I'm bringing this up


00:21:58.700 --> 00:22:01.780
because just independent of my involvement


00:22:01.780 --> 00:22:05.460
with Python bytes, I've been involved


00:22:05.460 --> 00:22:07.700
with people having trouble figuring out


00:22:07.700 --> 00:22:10.780
how to package their Python code independently.


00:22:10.780 --> 00:22:14.760
I got a web developer doing it, a tools backend person,


00:22:14.760 --> 00:22:16.060
and then somebody that's just trying,


00:22:16.060 --> 00:22:19.100
he's a C# person that just was trying to package


00:22:19.100 --> 00:22:22.320
a front end to his tool, a Python front end.


00:22:22.320 --> 00:22:24.740
And he was like, "I don't know how to do all this."


00:22:24.740 --> 00:22:26.960
And it is confusing.


00:22:26.960 --> 00:22:30.660
And it even is confusing for seasoned Python developers.


00:22:30.660 --> 00:22:34.100
And here we've got, oh, I didn't link it right now,


00:22:34.100 --> 00:22:39.100
but there was a Doug Hellman from module of the week


00:22:39.100 --> 00:22:44.140
posted that he's published lots of packages


00:22:44.140 --> 00:22:47.500
and he went to do it again and was a little lost


00:22:47.500 --> 00:22:48.580
and wanted some advice.


00:22:48.580 --> 00:22:53.380
So new people or people that are outside of the scope


00:22:53.380 --> 00:22:54.860
are confused.


00:22:54.860 --> 00:22:57.940
And I think it's fair to recognize that.


00:22:57.940 --> 00:23:00.940
And so there's a lot of discussion around it.


00:23:00.940 --> 00:23:04.260
And Pradyon put together a blog post,


00:23:04.260 --> 00:23:09.100
was talking about it on Disqus.


00:23:09.100 --> 00:23:11.260
And he put together an article called


00:23:11.260 --> 00:23:14.700
"Thoughts on the Python Packaging Ecosystem."


00:23:14.700 --> 00:23:17.820
And I think it's a kind of a fair discussion around it.


00:23:17.820 --> 00:23:22.820
And one of the points is that a lot of Python users


00:23:23.060 --> 00:23:26.540
are not software engineers.


00:23:26.540 --> 00:23:29.780
But we also have to recognize that a lot are.


00:23:29.780 --> 00:23:32.660
So it's a diverse ecosystem.


00:23:32.660 --> 00:23:35.580
And I think it's going to be a mess.


00:23:35.580 --> 00:23:37.140
It's going to be a mess for a while.


00:23:37.140 --> 00:23:38.820
And I think it's going to be--


00:23:38.820 --> 00:23:41.300
I think it's good that it's a mess in some cases.


00:23:41.300 --> 00:23:45.140
It's good that we don't just have setup tools now.


00:23:45.140 --> 00:23:48.560
We have a lot of ways that are working


00:23:48.560 --> 00:23:53.300
on different pieces of the problem of, you know,


00:23:53.300 --> 00:23:56.540
how to make it easier around PyProject.toml,


00:23:56.540 --> 00:23:58.860
and you're gonna have a different build backend.


00:23:58.860 --> 00:24:02.640
But he breaks down the points.


00:24:02.640 --> 00:24:05.260
It's a big article, but one of the things is


00:24:05.260 --> 00:24:09.100
it kind of unintentionally, the packaging ecosystem


00:24:09.100 --> 00:24:11.780
unintentionally became a competitive space


00:24:11.780 --> 00:24:12.920
that it is today.


00:24:12.920 --> 00:24:15.820
And maybe we need to make,


00:24:16.700 --> 00:24:18.760
the community needs to make an explicit decision


00:24:18.760 --> 00:24:22.240
if we should continue operating under that model


00:24:22.240 --> 00:24:24.580
that led to what we have now.


00:24:24.580 --> 00:24:27.800
We could pick from in different tools


00:24:27.800 --> 00:24:29.900
to do in different things.


00:24:29.900 --> 00:24:33.440
That's a good model according to this,


00:24:33.440 --> 00:24:37.140
or in approximately the same choices


00:24:37.140 --> 00:24:39.720
to get a really bad user experience,


00:24:39.720 --> 00:24:42.520
bad for some people, good for others.


00:24:42.520 --> 00:24:45.220
And then also maybe we should pick a default


00:24:45.220 --> 00:24:46.900
because picking a default doesn't make


00:24:46.900 --> 00:24:50.600
the other approaches illegal, they just aren't the default.


00:24:50.600 --> 00:24:52.220
And I'm kind of leaning towards that.


00:24:52.220 --> 00:24:53.980
I think it would be good to have something,


00:24:53.980 --> 00:24:55.440
but I'm not sure what.


00:24:55.440 --> 00:24:58.700
Down, longer down the line,


00:24:58.700 --> 00:25:03.260
pardon me, of the scroll is PIP.


00:25:03.260 --> 00:25:06.860
One of the ideas is maybe we should have PIP.


00:25:06.860 --> 00:25:09.020
Well, okay, I'll back up a little bit.


00:25:09.020 --> 00:25:13.340
Some of these tools like Poetry and PDM are workflow tools


00:25:13.340 --> 00:25:18.340
And other tools like Flit are more build.


00:25:18.340 --> 00:25:21.700
Flit's more like, I wanna build, just build a wheel.


00:25:21.700 --> 00:25:24.740
It also does publish, but mostly the workload


00:25:24.740 --> 00:25:26.740
is around building the wheel.


00:25:26.740 --> 00:25:31.100
Whereas PDM and Poetry are like this whole workflow thing,


00:25:31.100 --> 00:25:34.660
control your virtual environment, do a whole bunch of stuff.


00:25:34.660 --> 00:25:37.420
And I know a lot of people from other languages


00:25:37.420 --> 00:25:41.740
like JavaScript and other, maybe Go, I don't know,


00:25:41.740 --> 00:25:45.320
are used to these high-end workflow things


00:25:45.320 --> 00:25:46.840
that do everything for you.


00:25:46.840 --> 00:25:49.960
But we're already used to a multi-tool model now,


00:25:49.960 --> 00:25:52.520
so I'm not sure how to get from here to there.


00:25:52.520 --> 00:25:55.300
Interesting, it would be interesting to have pip do it.


00:25:55.300 --> 00:25:57.000
I mean, we already all use Pip,


00:25:57.000 --> 00:26:00.820
so could pip expand to do both the focus thing


00:26:00.820 --> 00:26:02.960
it's doing now, installing a package,


00:26:02.960 --> 00:26:07.240
and then also do some workflow stuff?


00:26:07.240 --> 00:26:11.480
And I guess I'd be kind of open to explore that idea,


00:26:11.480 --> 00:26:14.120
but I was curious what you guys thought.


00:26:14.120 --> 00:26:15.080
- I'd be open to explore it.


00:26:15.080 --> 00:26:17.380
I, not to disparage anything,


00:26:17.380 --> 00:26:18.960
but I personally dislike the things


00:26:18.960 --> 00:26:21.080
that try to put their workflow onto you.


00:26:21.080 --> 00:26:24.280
I'd much rather have something simpler.


00:26:24.280 --> 00:26:26.640
And as someone who teaches Python,


00:26:26.640 --> 00:26:29.520
this is a huge problem for people getting into language.


00:26:29.520 --> 00:26:32.000
They feel like it's a big challenge.


00:26:32.000 --> 00:26:33.600
Why is it so hard?


00:26:33.600 --> 00:26:34.960
Why do I have to learn all these things?


00:26:34.960 --> 00:26:37.440
I picked the wrong thing and now am I screwed?


00:26:37.440 --> 00:26:38.680
No, you're not out of luck.


00:26:38.680 --> 00:26:41.040
You just delete your virtual environment


00:26:41.040 --> 00:26:46.320
start over, but yes, things are a little, I think, I think having


00:26:46.320 --> 00:26:52.440
many of them, one is a problem. Yeah. And I think something that


00:26:52.440 --> 00:26:58.320
have forces workflows on you. I'm not a huge fan of, I feel


00:26:58.320 --> 00:27:01.840
like we've already got lots of tools that solve it pretty well.


00:27:01.840 --> 00:27:04.980
I'm kind of not against pip doing a little bit more I use


00:27:04.980 --> 00:27:09.240
pip-tools for managing my dependencies. And it is so good.


00:27:09.260 --> 00:27:10.960
It is so good.


00:27:10.960 --> 00:27:12.760
You state just your top-level dependencies,


00:27:12.760 --> 00:27:14.660
and when it's time to, "Let's see what new,


00:27:14.660 --> 00:27:16.160
let's make sure we upgrade to the new things,"


00:27:16.160 --> 00:27:18.360
you just run pip-tools upgrade, and it'll regenerate.


00:27:18.360 --> 00:27:20.060
You can evaluate what the changes are.


00:27:20.060 --> 00:27:21.760
I really, really like pip-tools.


00:27:21.760 --> 00:27:26.360
I think it's a much simpler scenario than a lot of--


00:27:26.360 --> 00:27:28.460
And I know other people really like them,


00:27:28.460 --> 00:27:30.260
but anyway, this is what I like.


00:27:30.260 --> 00:27:34.660
We could possibly leave pip alone and expand pip-tools


00:27:34.660 --> 00:27:36.260
to do the rest of the workflow stuff.


00:27:36.260 --> 00:27:37.560
Yes, potentially.


00:27:37.560 --> 00:27:41.840
Yeah, it could, but I kind of agree with that Unix small tools


00:27:41.840 --> 00:27:44.040
do one thing really well, which is


00:27:44.040 --> 00:27:46.800
why I've kind of gone with the pip-tools approach as well.


00:27:46.800 --> 00:27:48.840
Because I really feel like pip-tools does such


00:27:48.840 --> 00:27:51.800
an incredible job at that dependency resolution


00:27:51.800 --> 00:27:54.840
and getting you exactly what you need,


00:27:54.840 --> 00:27:57.560
way better and way faster than pip itself does.


00:27:57.560 --> 00:28:00.120
I think that approach that Flit takes, it seems like--


00:28:00.120 --> 00:28:01.600
I've never used Flit--


00:28:01.600 --> 00:28:04.760
but the fact that it can just wrap around preexisting tools


00:28:04.760 --> 00:28:07.360
to provide a common interface for users


00:28:07.360 --> 00:28:12.480
to be able to build, package, push the whole deal


00:28:12.480 --> 00:28:14.720
seems really nice because it guides them


00:28:14.720 --> 00:28:17.680
through step by step that process until maybe at some


00:28:17.680 --> 00:28:19.600
point they don't need it or they just enjoy it


00:28:19.600 --> 00:28:22.720
and it's using some of the standard tools behind the scenes.


00:28:22.720 --> 00:28:23.720
>> Yeah.


00:28:23.720 --> 00:28:24.680
>> I'm also with Michael.


00:28:24.680 --> 00:28:27.640
I don't like the predefined workflows.


00:28:27.640 --> 00:28:29.600
I'm not a huge fan of poetry necessarily


00:28:29.600 --> 00:28:32.160
because it just doesn't fit the way my brain wants


00:28:32.160 --> 00:28:34.400
to work down a project.


00:28:34.400 --> 00:28:35.640
>> And I'm not surprised.


00:28:35.640 --> 00:28:38.920
So I was thinking an analogy of like,


00:28:38.920 --> 00:28:41.480
if you're gonna have a pocket knife,


00:28:41.480 --> 00:28:43.920
which tools should be in the pocket knife?


00:28:43.920 --> 00:28:46.200
And if you go into like the medium pocket knives


00:28:46.200 --> 00:28:49.100
on the Victoria Knox site, oh no, it won't load.


00:28:49.100 --> 00:28:51.220
You get like even the small ones.


00:28:51.220 --> 00:28:54.200
So the medium ones, you get like tons of different tools,


00:28:54.200 --> 00:28:55.400
which tools should be there?


00:28:55.400 --> 00:28:57.460
Nobody's gonna agree.


00:28:57.460 --> 00:28:59.720
And I thought, well, at least in the small ones,


00:28:59.720 --> 00:29:02.740
maybe people can agree 'cause, oh no,


00:29:02.740 --> 00:29:05.580
not even in the small ones, people can't agree.


00:29:05.580 --> 00:29:07.700
which should go together, so yeah.


00:29:07.700 --> 00:29:11.580
- I want my Swiss Army knife to also have drywall tools


00:29:11.580 --> 00:29:12.920
and something for my car.


00:29:12.920 --> 00:29:14.420
(laughing)


00:29:14.420 --> 00:29:16.220
- But it seems like the combination though


00:29:16.220 --> 00:29:19.540
of really small tools that do one thing really well


00:29:19.540 --> 00:29:22.180
with some tools to layer on top of it,


00:29:22.180 --> 00:29:24.460
whether it's your IDE, whether it's Flit,


00:29:24.460 --> 00:29:27.340
and they can have the opinionated workflows


00:29:27.340 --> 00:29:28.460
layered on top of this.


00:29:28.460 --> 00:29:32.380
They rest on top of a solid set of identical tools


00:29:32.380 --> 00:29:34.580
that produce the identical thing.


00:29:34.580 --> 00:29:35.420
- Yeah.


00:29:35.420 --> 00:29:39.340
I'm in that camp as well, that's where,


00:29:39.340 --> 00:29:42.700
but I totally get that that's confusing for people.


00:29:42.700 --> 00:29:44.300
- Oh, totally confusing.


00:29:44.300 --> 00:29:45.860
The first time I go to explain to someone


00:29:45.860 --> 00:29:48.060
how they're going to manage their dependencies


00:29:48.060 --> 00:29:50.180
on a Django project, I'm like, oh my gosh,


00:29:50.180 --> 00:29:52.880
I had to step back and think about the 20 steps


00:29:52.880 --> 00:29:55.660
that kind of go into how I learned to do this


00:29:55.660 --> 00:29:57.840
that I'm now explaining to some new person.


00:29:57.840 --> 00:30:00.660
I'm like, I'm sorry, this doesn't sound easy at all.


00:30:00.660 --> 00:30:04.300
There's gotta be a better way, but I don't know if there is.


00:30:04.300 --> 00:30:06.720
- Yeah, anyway, okay.


00:30:06.720 --> 00:30:08.760
Rabbit hole, but.


00:30:08.760 --> 00:30:09.600
- Oh, totally.


00:30:09.600 --> 00:30:12.280
I mean, Python packaging is the ultimate rabbit hole


00:30:12.280 --> 00:30:13.800
in the Python community.


00:30:13.800 --> 00:30:14.640
- Yeah.


00:30:14.640 --> 00:30:15.760
- Speaking of packages,


00:30:15.760 --> 00:30:20.080
Michael, do you wanna jump into yours?


00:30:20.080 --> 00:30:21.960
- I do wanna talk about more packages.


00:30:21.960 --> 00:30:23.220
This is the simplified version,


00:30:23.220 --> 00:30:26.560
but also a bit of real-time follow-up as well.


00:30:26.560 --> 00:30:31.040
Again, I'm having many of the folks that were on that


00:30:31.040 --> 00:30:34.480
discuss thread that you mentioned Brian about this topic


00:30:34.480 --> 00:30:37.400
on Talk Python probably in a couple of weeks


00:30:37.400 --> 00:30:38.920
as a big panel discussion about it.


00:30:38.920 --> 00:30:41.500
So if you all want to hear more of this,


00:30:41.500 --> 00:30:44.240
but for a long time with the folks who are participating


00:30:44.240 --> 00:30:45.440
and dive on in.


00:30:45.440 --> 00:30:47.720
Okay.


00:30:47.720 --> 00:30:52.720
Oh, also apparently I said chat GTP


00:30:52.720 --> 00:30:57.440
rather than I meant ChatGPT as Sharaf pointed out.


00:30:57.440 --> 00:30:58.840
So thanks for that.


00:30:58.840 --> 00:31:00.320
That's the one I meant, you know the one.


00:31:00.320 --> 00:31:05.320
All right, so there's this cool GitHub page, I guess,


00:31:05.320 --> 00:31:08.180
called top PyPI packages.


00:31:08.180 --> 00:31:10.940
And so this is a pretty neat place.


00:31:10.940 --> 00:31:14.400
It shows you the top 5,000 most downloaded


00:31:14.400 --> 00:31:17.040
PyPI packages updated monthly.


00:31:17.040 --> 00:31:20.240
So you can scroll down here and you can say,


00:31:20.240 --> 00:31:25.200
show me the top 100, show me the top 1,000, whatever.


00:31:25.200 --> 00:31:27.200
I'll pull up the 1,000 for you, Brian.


00:31:27.200 --> 00:31:28.080
There you go.


00:31:28.080 --> 00:31:30.200
So these are updated over the last 30 days


00:31:30.200 --> 00:31:32.060
And it actually says when it was last updated


00:31:32.060 --> 00:31:33.800
and that was February 1st,


00:31:33.800 --> 00:31:35.960
which is a week ago as of this recording.


00:31:35.960 --> 00:31:38.120
So that's pretty fresh really.


00:31:38.120 --> 00:31:41.640
And so you can find things like pytest-check.


00:31:41.640 --> 00:31:43.080
Is that in here somewhere, Brian?


00:31:43.080 --> 00:31:47.120
- It's in the top 5,000, but not the top 1,000.


00:31:47.120 --> 00:31:48.360
- Oh, okay. Did I do the wrong one?


00:31:48.360 --> 00:31:49.720
Sorry, I tried to pull you up there.


00:31:49.720 --> 00:31:53.160
But you see things like Boto3 and URLlib


00:31:53.160 --> 00:31:55.640
are the most popular.


00:31:55.640 --> 00:32:00.640
So Boto3 is downloaded 522 million times every month,


00:32:00.640 --> 00:32:05.560
every 30 days or so, which is just insane.


00:32:05.560 --> 00:32:07.000
You gotta be careful because some of these


00:32:07.000 --> 00:32:08.800
are really popular dependencies


00:32:08.800 --> 00:32:12.920
rather than directly really important libraries.


00:32:12.920 --> 00:32:16.120
Like I use Boto3 all the time as a dependency,


00:32:16.120 --> 00:32:19.520
less often directly, definitely for YOLO lib3,


00:32:19.520 --> 00:32:20.840
I don't think I've ever used it directly,


00:32:20.840 --> 00:32:23.680
but obviously it gets installed, but I'm gonna use many things.


00:32:23.680 --> 00:32:26.620
So this is pretty cool if people wanna check it out.


00:32:26.620 --> 00:32:27.840
Calvin, what do you think?


00:32:27.840 --> 00:32:29.200
- Oh, I'm excited about this too,


00:32:29.200 --> 00:32:32.320
'cause it's just thinking about the number of times


00:32:32.320 --> 00:32:35.280
the Amazon cloud must go download photo three


00:32:35.280 --> 00:32:39.040
from like Wi-Fi, mind blowing.


00:32:39.040 --> 00:32:43.200
Like does all the serverless that's on server someplace


00:32:43.200 --> 00:32:45.280
downloading packages in the background.


00:32:45.280 --> 00:32:47.920
Now you get a feel for it with a big number.


00:32:47.920 --> 00:32:48.920
- Yeah, it's really nuts,


00:32:48.920 --> 00:32:50.200
which is also a little bit ironic


00:32:50.200 --> 00:32:52.840
'cause it comes from AWS and they sent it over to IPI


00:32:52.840 --> 00:32:54.520
and then it comes back to AWS.


00:32:54.520 --> 00:32:57.840
It's a weird,


00:32:57.840 --> 00:32:59.580
a weird golden world. - They use Fastly,


00:32:59.580 --> 00:33:01.740
don't they use Fastly for their CDN?


00:33:01.740 --> 00:33:03.740
I think they use Fastly.


00:33:03.740 --> 00:33:05.060
- PyPI? - Yeah.


00:33:05.060 --> 00:33:06.100
- I believe so.


00:33:06.100 --> 00:33:06.940
- Yeah, so it's like,


00:33:06.940 --> 00:33:09.540
they have to go to a competitor to get like,


00:33:09.540 --> 00:33:10.380
yes, exactly.


00:33:10.380 --> 00:33:12.540
- Yeah, how interesting.


00:33:12.540 --> 00:33:14.820
So this is interesting in and of itself,


00:33:14.820 --> 00:33:15.980
and it tells you which ones are there.


00:33:15.980 --> 00:33:17.900
And there's an API, which you can hit,


00:33:17.900 --> 00:33:18.880
let's not hit the minified one,


00:33:18.880 --> 00:33:20.740
let's hit the non-minified one.


00:33:20.740 --> 00:33:22.300
And it'll tell you actually returns


00:33:22.300 --> 00:33:25.980
when it was updated, what the query was, et cetera, et cetera.


00:33:25.980 --> 00:33:28.860
And so you actually can get this as a JSON endpoint,


00:33:28.860 --> 00:33:29.700
which is pretty cool.


00:33:29.700 --> 00:33:33.200
It's just a static file that gets updated, you know,


00:33:33.200 --> 00:33:35.420
every couple of days on this GitHub page setup.


00:33:35.420 --> 00:33:38.000
So that's also an interesting way to think of an API.


00:33:38.000 --> 00:33:41.340
My API is a static file that periodically gets refreshed,


00:33:41.340 --> 00:33:42.220
but there it is.


00:33:42.220 --> 00:33:44.420
So you don't think you'll hear much there.


00:33:44.420 --> 00:33:45.380
- I kind of love it though.


00:33:45.380 --> 00:33:46.700
It's just a- - I kind of do too.


00:33:46.700 --> 00:33:48.180
- Just a static file. - Builds with cache.


00:33:48.180 --> 00:33:49.020
- Yeah.


00:33:49.020 --> 00:33:51.220
- Yeah, think how scalable that bad boy is.


00:33:51.220 --> 00:33:53.720
Okay, especially if you put a CDN behind it.


00:33:53.720 --> 00:33:58.900
And then related to that by the same person,


00:33:58.900 --> 00:34:04.660
there is HugoVic top PyPI packages on GitHub,


00:34:04.660 --> 00:34:08.180
which is a regular dump of the most downloaded packages


00:34:08.180 --> 00:34:09.020
from PyPI.


00:34:09.020 --> 00:34:10.800
So that sounds like, yeah, Michael,


00:34:10.800 --> 00:34:13.220
you told us about that, thanks a bunch.


00:34:13.220 --> 00:34:17.220
No, it's not the names, it's all of it.


00:34:17.220 --> 00:34:21.220
It's all of the data that is here.


00:34:21.220 --> 00:34:22.060
Where do they have it?


00:34:22.060 --> 00:34:24.060
This one, I don't know if I want to open this up,


00:34:24.060 --> 00:34:25.420
but it's really big.


00:34:25.420 --> 00:34:27.900
So it's all the XML.


00:34:27.900 --> 00:34:29.660
I'm not sure where it is in here,


00:34:29.660 --> 00:34:32.780
but it's all the XML files of,


00:34:32.780 --> 00:34:35.940
or rather XML, the JSON files,


00:34:35.940 --> 00:34:37.780
that untangle got me thinking XML.


00:34:37.780 --> 00:34:41.780
So it's all the JSON files of what comes out


00:34:41.780 --> 00:34:45.460
of the PyPI API, but all of them.


00:34:45.460 --> 00:34:47.780
It's when I checked it out and unzipped it


00:34:47.780 --> 00:34:50.220
and it was like 22 gigs on disk.


00:34:50.220 --> 00:34:54.740
So this is a big beast right here if you download it.


00:34:54.740 --> 00:34:56.620
Actually, no, this is not the right link.


00:34:56.620 --> 00:34:57.580
I'll have to find it.


00:34:57.580 --> 00:35:02.260
I'll put it in the show notes, but there's this guy.


00:35:02.260 --> 00:35:03.980
Darn it, this is the wrong one.


00:35:03.980 --> 00:35:06.700
But there's also linked off of this.


00:35:06.700 --> 00:35:09.260
There's one where you get all of the packages,


00:35:09.260 --> 00:35:11.660
which is all the JSON for every package.


00:35:11.660 --> 00:35:13.180
I'll have to figure out where I got that from.


00:35:13.180 --> 00:35:16.140
Unfortunately, it's the wrong link I pulled up.


00:35:16.140 --> 00:35:18.260
But anyway, these are both really cool resources


00:35:18.260 --> 00:35:20.900
and you'll have to check the links for that other one.


00:35:20.900 --> 00:35:23.180
- Cool. - Definitely.


00:35:23.180 --> 00:35:25.140
- Yeah, all right.


00:35:25.140 --> 00:35:25.980
- Cowbell.


00:35:25.980 --> 00:35:29.700
- Coming in at 57 on that list for the last 30 days


00:35:29.700 --> 00:35:30.860
is SQL Alchemist.


00:35:30.860 --> 00:35:33.540
So for those of you who aren't familiar


00:35:33.540 --> 00:35:34.940
and do like Swiss Army Knives,


00:35:34.940 --> 00:35:37.780
this is the Swiss Army Knife of database tools.


00:35:37.780 --> 00:35:38.940
It's not only an ORM,


00:35:38.940 --> 00:35:41.820
but it has a whole SQL toolkit built into it.


00:35:41.820 --> 00:35:44.620
So if you've never touched SQLAlchemy, but deal with databases,


00:35:44.620 --> 00:35:46.060
you may want to check this out.


00:35:46.060 --> 00:35:49.020
And more importantly, and this kind of ties in with my previous announcement


00:35:49.020 --> 00:35:51.760
on the mypy 1.0 release,


00:35:51.760 --> 00:35:56.020
there's a lot more support in this release for types and typing.


00:35:56.020 --> 00:36:01.660
So there's kind of native out-of-the-box mypy experience has been improved.


00:36:01.660 --> 00:36:04.760
Now, the author of SQLAlchemy, Mike Bayer,


00:36:04.760 --> 00:36:08.260
is actually going to be joining us in a few weeks here at Python Web Conference


00:36:08.260 --> 00:36:12.260
in giving a tutorial-length session on SQLAlchemy.


00:36:12.260 --> 00:36:15.260
He did this last time two years ago when he released 1.4.


00:36:15.260 --> 00:36:18.800
For those of you who have been following along in the background,


00:36:18.800 --> 00:36:21.700
the 1.4 release was the first half


00:36:21.700 --> 00:36:26.040
of this major revamp of SQLAlchemy into this new world.


00:36:26.040 --> 00:36:29.040
And so 2.0 is the second half of that revamp.


00:36:29.040 --> 00:36:32.340
So it's really been four years coming


00:36:32.340 --> 00:36:34.340
for this major release of SQLAlchemy.


00:36:34.340 --> 00:36:37.540
So if you want to know what's new and hear it from the horse's mouth,


00:36:37.540 --> 00:36:39.540
Mike Bear is going to be joining us,


00:36:39.540 --> 00:36:42.800
and he'll be happy to answer all of your questions.


00:36:42.800 --> 00:36:46.680
Let's see, there's a ton of new things released in here.


00:36:46.680 --> 00:36:48.680
I think if I scroll down...


00:36:48.680 --> 00:36:50.680
Yeah, so plugin-free,


00:36:50.680 --> 00:36:53.680
PEP484-compatible ORM syntaxes,


00:36:53.680 --> 00:36:55.680
so again, ripping out the old stuff.


00:36:55.680 --> 00:37:00.440
All the typing support in here is all fresh.


00:37:00.440 --> 00:37:05.100
If you are using the mypy plugins from before,


00:37:05.100 --> 00:37:07.100
you're going to want to take all those out.


00:37:07.100 --> 00:37:09.340
they're considered deprecated at this point.


00:37:09.340 --> 00:37:12.480
So that's something that's very important for you to consider.


00:37:12.480 --> 00:37:15.980
But now SQLAlchemy 2.0 is using all the new Python 3


00:37:15.980 --> 00:37:20.380
wonderfulness of data classes, enums, inline annotations.


00:37:20.380 --> 00:37:25.420
It's just really a nice modernization of a really powerful package.


00:37:25.420 --> 00:37:27.420
Let's see what else is in here.


00:37:27.420 --> 00:37:29.900
There was a super important-- Oh, yeah, some performance stuff.


00:37:29.900 --> 00:37:34.700
So this all-new fully integrated ORM approach to bulk inserts


00:37:34.700 --> 00:37:36.700
is quite interesting.


00:37:36.700 --> 00:37:40.580
a major speed increase except if you're using MySQL.


00:37:40.580 --> 00:37:45.080
The MySQL folks have not implemented the insert returning syntax,


00:37:45.080 --> 00:37:47.460
but if you're on MariaDB, you're good to go.


00:37:47.460 --> 00:37:49.760
So that's something to pay attention to.


00:37:49.760 --> 00:37:51.880
In addition to that performance,


00:37:51.880 --> 00:37:54.920
there's also the bulk optimized schema reflection.


00:37:54.920 --> 00:37:57.920
So if you were using SQLAlchemy,


00:37:57.920 --> 00:38:01.520
it was basically doing a table by table reflection.


00:38:01.520 --> 00:38:04.480
If you were asking it for metadata about the tables.


00:38:04.480 --> 00:38:09.080
Now in all of the backends, there is basically a--


00:38:09.080 --> 00:38:11.840
oh, sorry, I think it's only for Postgres and Oracle right now.


00:38:11.840 --> 00:38:15.560
So Postgres and Oracle support the bulk schema upgrades.


00:38:15.560 --> 00:38:19.240
You can see right here for Postgres, a 250% improvement,


00:38:19.240 --> 00:38:22.440
and for Oracle, a 900% improvement.


00:38:22.440 --> 00:38:24.160
I'm not sure what it was doing before,


00:38:24.160 --> 00:38:27.680
but it's a heck of a lot faster now at 900% improvement.


00:38:27.680 --> 00:38:29.440
Always a benefit there.


00:38:29.440 --> 00:38:32.120
And in addition, I'll point out some other things


00:38:32.120 --> 00:38:35.560
that were in the migration guide and the what's new in 2.0 guide,


00:38:35.560 --> 00:38:38.520
you're going to want to make sure you check those out here.


00:38:38.520 --> 00:38:42.520
There's like the migration process link from this article or blog post.


00:38:42.520 --> 00:38:43.920
You're going to want to make sure you read through those


00:38:43.920 --> 00:38:47.960
because there's major incompatibilities from 1.4 into 2.0.


00:38:47.960 --> 00:38:54.240
But the migration guide is really similar to like the 2.3 guide Python had,


00:38:54.240 --> 00:38:57.000
tells you how to mechanically go through and make sure


00:38:57.000 --> 00:39:00.160
that you're going to be compatible for the latest version of SQLAlchemy.


00:39:00.160 --> 00:39:04.400
Another speed improvement here is that all the native C extensions


00:39:04.400 --> 00:39:06.400
have been ported to Cython.


00:39:06.400 --> 00:39:10.100
Some of them are all as fast, some of them are slightly faster


00:39:10.100 --> 00:39:12.100
than their previous C extensions,


00:39:12.100 --> 00:39:15.280
but this also removes risks of memory corruption


00:39:15.280 --> 00:39:19.080
and stomping on each other and things that C does really well


00:39:19.080 --> 00:39:21.920
that you don't want, so that's also a nice benefit.


00:39:21.920 --> 00:39:24.380
And then the tying into that same benefit


00:39:24.380 --> 00:39:27.860
is the SQLAlchemy is now PEP 517 enabled,


00:39:27.860 --> 00:39:31.700
So that means the PyProject.toml file that we just saw


00:39:31.700 --> 00:39:34.700
in the last couple of announcements is supported,


00:39:34.700 --> 00:39:37.580
which means when you're on your local machine


00:39:37.580 --> 00:39:39.940
and doing a source build of SQLAlchemy,


00:39:39.940 --> 00:39:42.060
it can automatically go grab some of the dependencies


00:39:42.060 --> 00:39:44.180
such as Cython, which can be tricky


00:39:44.180 --> 00:39:45.300
to get installed for some people.


00:39:45.300 --> 00:39:48.360
So that is simplifying a lot of people's lives


00:39:48.360 --> 00:39:50.500
to go to SQLAlchemy 2.0.


00:39:50.500 --> 00:39:54.900
- Yeah, SQLAlchemy 2.0 is a huge release.


00:39:54.900 --> 00:39:55.740
- Yeah, it's a big deal.


00:39:55.740 --> 00:39:56.580
- It's been years.


00:39:56.580 --> 00:39:57.840
- It's been years in the coming


00:39:57.840 --> 00:40:01.080
and it was in this intermediate 1.4 mode


00:40:01.080 --> 00:40:02.880
where you could choose either API


00:40:02.880 --> 00:40:05.440
and they finally removed some things.


00:40:05.440 --> 00:40:07.760
But to me, the biggest deal is the async.


00:40:07.760 --> 00:40:09.960
- Yeah.


00:40:09.960 --> 00:40:12.480
- Right, it's in the prior versions,


00:40:12.480 --> 00:40:14.520
there was just no way to do any async things,


00:40:14.520 --> 00:40:18.640
which meant on all the scalable areas,


00:40:18.640 --> 00:40:21.520
you were kind of stuck trying to find somewhere else to go.


00:40:21.520 --> 00:40:22.800
Now, if you really like SIGWALK me,


00:40:22.800 --> 00:40:25.020
you can just use the async API.


00:40:25.020 --> 00:40:27.340
(indistinct)


00:40:27.340 --> 00:40:28.180
- Yeah, I think a lot of people


00:40:28.180 --> 00:40:29.340
are gonna benefit from those types,


00:40:29.340 --> 00:40:32.700
all the type support in mypy native support.


00:40:32.700 --> 00:40:34.900
- Yeah, absolutely.


00:40:34.900 --> 00:40:36.660
- Thank you, editor.


00:40:36.660 --> 00:40:40.180
- The bulk inserts have always been a hassle in ORMs.


00:40:40.180 --> 00:40:43.140
So it sounds like that's really gotten a lot of love too.


00:40:43.140 --> 00:40:44.460
- Yeah, definitely.


00:40:44.460 --> 00:40:45.500
I look forward to it.


00:40:45.500 --> 00:40:48.540
- I do as well.


00:40:48.540 --> 00:40:49.740
All right.


00:40:49.740 --> 00:40:51.880
Well, that's all of our topics.


00:40:51.880 --> 00:40:54.140
Brian, what do you got for us as an extra?


00:40:54.140 --> 00:40:58.700
- I guess just one quick extra is like,


00:40:58.700 --> 00:41:00.260
one of the things I've been working on the side


00:41:00.260 --> 00:41:01.340
is I'm gonna build a,


00:41:01.340 --> 00:41:03.940
I'm gonna create a new build backend for Python


00:41:03.940 --> 00:41:05.640
and a new workflow tool.


00:41:05.640 --> 00:41:09.940
No, I'm not.


00:41:09.940 --> 00:41:12.540
- But what will you name it?


00:41:12.540 --> 00:41:16.420
- Well, I think Flick,


00:41:16.420 --> 00:41:18.740
because I always thought Flit should have been Flick.


00:41:18.740 --> 00:41:21.020
So like a little football.


00:41:21.020 --> 00:41:21.860
So yeah.


00:41:21.860 --> 00:41:22.700
- There you go.


00:41:23.740 --> 00:41:26.860
So how about let's go to Calvin's extras?


00:41:26.860 --> 00:41:28.240
- Yeah, sure.


00:41:28.240 --> 00:41:30.200
So I kind of mentioned this in the intro,


00:41:30.200 --> 00:41:32.740
but we are putting on the Python MUB Conference.


00:41:32.740 --> 00:41:34.380
And this will be our fifth annual.


00:41:34.380 --> 00:41:36.800
So big five years.


00:41:36.800 --> 00:41:39.200
I'm wearing one of the jerseys from last year.


00:41:39.200 --> 00:41:42.480
You can't see it, but it was a really awesome last year.


00:41:42.480 --> 00:41:44.220
We had 90 speakers.


00:41:44.220 --> 00:41:48.000
We had, I think it was over 400 attendees,


00:41:48.000 --> 00:41:51.480
something like 23 or 22 time zones.


00:41:51.480 --> 00:41:53.080
Like it was really a global event.


00:41:53.080 --> 00:41:55.440
That's one of the things I'm really proud of.


00:41:55.440 --> 00:41:57.660
This event was meant to fill a hole,


00:41:57.660 --> 00:41:59.380
I felt like, in the Python community


00:41:59.380 --> 00:42:00.960
for folks who couldn't travel,


00:42:00.960 --> 00:42:03.720
couldn't afford to go to an in-person conference,


00:42:03.720 --> 00:42:05.840
or wasn't a regional conference near them.


00:42:05.840 --> 00:42:07.440
I know PSF's doing a lot of work right now


00:42:07.440 --> 00:42:10.000
in getting some regional conferences into other areas,


00:42:10.000 --> 00:42:12.840
but this is still, and will always be virtual,


00:42:12.840 --> 00:42:14.900
and always be accessible to folks.


00:42:14.900 --> 00:42:16.600
So if you go and register


00:42:16.600 --> 00:42:18.360
and you can't afford to pay for this,


00:42:18.360 --> 00:42:20.000
we do have a grant program.


00:42:20.000 --> 00:42:22.200
We wanna make sure that if you have a need


00:42:22.200 --> 00:42:24.200
to be in this room, you should be in this room,


00:42:24.200 --> 00:42:25.560
and everyone is included.


00:42:25.560 --> 00:42:26.920
This year is going to be no exception.


00:42:26.920 --> 00:42:29.360
There's a lot of amazing speakers who have joined us.


00:42:29.360 --> 00:42:32.960
It'll be five half days from the 13th to the 17th.


00:42:32.960 --> 00:42:35.080
There'll be a keynote speaker kick off every day,


00:42:35.080 --> 00:42:37.080
a keynote speaker at the end of every day,


00:42:37.080 --> 00:42:38.920
and there's some awesome speakers coming up.


00:42:38.920 --> 00:42:40.880
We've got some people from GitLab.


00:42:40.880 --> 00:42:44.080
We've been focusing on finding some folks from Climate


00:42:44.080 --> 00:42:46.440
Initiatives to actually come and give some of our talks


00:42:46.440 --> 00:42:49.920
where they're using technology for good in these areas.


00:42:49.920 --> 00:42:51.560
There'll be a set of tutorials as well.


00:42:51.560 --> 00:42:53.560
I mentioned Mike Bair's tutorial already,


00:42:53.560 --> 00:42:57.560
but there'll be three or four other tutorials as well.


00:42:57.560 --> 00:43:00.060
I know Matt Harrison's going to be giving one of the tutorials--


00:43:00.060 --> 00:43:02.800
not tutorial, he'll be giving a keynote this year.


00:43:02.800 --> 00:43:05.600
So he's back again from last year.


00:43:05.600 --> 00:43:07.600
He gave a keynote and a tutorial.


00:43:07.600 --> 00:43:10.100
Man's the hardest working man in Python,


00:43:10.100 --> 00:43:13.600
but we really appreciate him joining us as well.


00:43:13.600 --> 00:43:17.600
If you've got questions, make sure you just go to pythonwebconf.com.


00:43:17.600 --> 00:43:20.800
You can also find me on @CalvinHP on Twitter.


00:43:20.800 --> 00:43:22.960
There's also a Twitter account for Python webconf.


00:43:22.960 --> 00:43:27.280
So you can follow Python webconf on all the socials and join us.


00:43:27.280 --> 00:43:29.600
There'll be socials actually during the event as well.


00:43:29.600 --> 00:43:31.240
So it should be tons of fun.


00:43:31.240 --> 00:43:34.560
We'll have just everything for the community.


00:43:34.560 --> 00:43:36.600
So I have a question right off the bat.


00:43:36.600 --> 00:43:37.880
It says webconf.


00:43:37.880 --> 00:43:39.960
If I'm not a web developer, am I still


00:43:39.960 --> 00:43:40.960
going to be interested in this?


00:43:40.960 --> 00:43:42.520
Or is it primarily web development?


00:43:42.520 --> 00:43:44.360
That's an excellent question, Brian.


00:43:44.360 --> 00:43:48.720
We originally-- the webconf name meant a conference


00:43:48.720 --> 00:43:50.080
for web people.


00:43:50.080 --> 00:43:52.440
But we switched it around because we


00:43:52.440 --> 00:43:55.040
felt like this was an opportunity for the conference


00:43:55.040 --> 00:43:57.040
for Python to be on the web.


00:43:57.040 --> 00:43:59.200
And now we have AppDevTrack, which


00:43:59.200 --> 00:44:00.960
is more than just web.


00:44:00.960 --> 00:44:02.120
We'll have a CloudTrack.


00:44:02.120 --> 00:44:04.440
We will have a PyDataTrack.


00:44:04.440 --> 00:44:09.120
It's actually an officially sanctioned PyData event.


00:44:09.120 --> 00:44:12.200
And we have a CultureTrack in addition to the tutorial.


00:44:12.200 --> 00:44:15.060
So there is actually something for everybody in the Python


00:44:15.060 --> 00:44:16.240
world here.


00:44:16.240 --> 00:44:17.600
We're really trying to-- again, I


00:44:17.600 --> 00:44:19.980
I mentioned filling the gap for people who can't make it


00:44:19.980 --> 00:44:21.340
to specific conferences.


00:44:21.340 --> 00:44:24.100
We're also trying to fill the gap for talks


00:44:24.100 --> 00:44:26.760
that I feel are a little more on the intermediate


00:44:26.760 --> 00:44:28.700
to advanced level.


00:44:28.700 --> 00:44:31.060
If you're looking for very entry-level tutorials,


00:44:31.060 --> 00:44:33.040
this may not be the conference for you.


00:44:33.040 --> 00:44:34.120
I mean, there'll be great community,


00:44:34.120 --> 00:44:36.860
lots of questions you can ask, and there'll be tutorials,


00:44:36.860 --> 00:44:39.040
but I really wanted to make sure that the talks


00:44:39.040 --> 00:44:41.940
kind of scaled up that next notch.


00:44:41.940 --> 00:44:46.260
When I go to a lot of regional conferences or even PyCon,


00:44:46.260 --> 00:44:47.940
There's some entry level stuff there


00:44:47.940 --> 00:44:49.980
that's great for people who are new to Python.


00:44:49.980 --> 00:44:51.860
This is that next step.


00:44:51.860 --> 00:44:53.100
- Cool.


00:44:53.100 --> 00:44:54.240
Don't need to cut you off,


00:44:54.240 --> 00:44:57.560
but can we see if Michael's got any extras?


00:44:57.560 --> 00:44:58.400
- Yeah.


00:44:58.400 --> 00:44:59.960
- I do.


00:44:59.960 --> 00:45:01.500
One while Calvin's thing is up,


00:45:01.500 --> 00:45:04.140
I'm gonna be speaking at their conference


00:45:04.140 --> 00:45:07.460
about making your Python web apps fly with CDNs.


00:45:07.460 --> 00:45:08.540
Speaking of CDNs earlier,


00:45:08.540 --> 00:45:10.020
so I'm really excited about that one.


00:45:10.020 --> 00:45:11.040
That's a fun topic.


00:45:11.040 --> 00:45:14.820
But I wanna tell you a couple of tips and tricks.


00:45:14.820 --> 00:45:15.920
I'll keep these short here,


00:45:15.920 --> 00:45:17.300
but they're kind of fun.


00:45:17.300 --> 00:45:21.880
So I recently discovered that with many of the browsers,


00:45:21.880 --> 00:45:27.620
like Vivaldi or Chrome, sadly not Firefox,


00:45:27.620 --> 00:45:28.620
honestly, that's one of the reasons


00:45:28.620 --> 00:45:30.420
I quit using Firefox.


00:45:30.420 --> 00:45:32.100
They support progressive web apps,


00:45:32.100 --> 00:45:33.320
which many people may know.


00:45:33.320 --> 00:45:34.580
But even if you have a thing


00:45:34.580 --> 00:45:36.140
that is not a progressive web app,


00:45:36.140 --> 00:45:39.460
you can install it as a standalone,


00:45:39.460 --> 00:45:42.740
from your perspective, application that lives in the docs.


00:45:42.740 --> 00:45:44.220
So the thing I got on my screen


00:45:44.220 --> 00:45:46.980
and I link to in the show notes is here's my Vivaldi,


00:45:46.980 --> 00:45:49.740
but then I have my different mail clients.


00:45:49.740 --> 00:45:51.380
I got ProtonMail and Gmail,


00:45:51.380 --> 00:45:53.300
and I got the Google Calendar.


00:45:53.300 --> 00:45:55.000
All of those are just regular web apps.


00:45:55.000 --> 00:45:56.980
I don't think any of them are progressive web apps,


00:45:56.980 --> 00:45:58.180
but if you right click on the tab,


00:45:58.180 --> 00:46:00.380
you say create shortcut and say open in a window,


00:46:00.380 --> 00:46:04.260
they become their own little app


00:46:04.260 --> 00:46:06.780
that you have put in your dock or your taskbar or whatever.


00:46:06.780 --> 00:46:11.220
So for example, like here's ProtonMail running.


00:46:11.220 --> 00:46:14.060
You can see again, link in the show notes to the picture.


00:46:14.060 --> 00:46:15.560
And it just looks like an app,


00:46:15.560 --> 00:46:17.140
like you would know it was an app.


00:46:17.140 --> 00:46:19.840
It does, you'd think it was an electron JS app basically.


00:46:19.840 --> 00:46:22.060
But so if you want to have those as separate things,


00:46:22.060 --> 00:46:25.340
you're gonna run in and alt tab or control tab over to,


00:46:25.340 --> 00:46:26.660
there you go.


00:46:26.660 --> 00:46:28.020
It's like, oh no, I closed my browser


00:46:28.020 --> 00:46:28.860
and my mail's gone again.


00:46:28.860 --> 00:46:30.000
I got to open it back up, right?


00:46:30.000 --> 00:46:32.700
If that ever frustrates you, here's a cool fix for it.


00:46:32.700 --> 00:46:33.980
All right.


00:46:33.980 --> 00:46:36.620
Also speaking of Proton, I started using simple login.


00:46:36.620 --> 00:46:38.940
Have either of you all used this?


00:46:38.940 --> 00:46:39.900
- No. - No.


00:46:39.900 --> 00:46:42.760
- So I have a pro account at Proton, which is like,


00:46:42.760 --> 00:46:45.400
I don't know, a couple of dollars a month


00:46:45.400 --> 00:46:48.120
for a bunch of years, if you pay like way in advance,


00:46:48.120 --> 00:46:51.080
I think it's not very much.


00:46:51.080 --> 00:46:53.560
But along with that comes a single simple log on,


00:46:53.560 --> 00:46:56.400
which every time you go to a website,


00:46:56.400 --> 00:46:57.920
I don't think I have the extension


00:46:57.920 --> 00:46:59.800
in this profile on my browser,


00:46:59.800 --> 00:47:02.160
but if you go to a website, it suggests,


00:47:02.160 --> 00:47:05.580
hey, we'll create an automatic fake one-off email address


00:47:05.580 --> 00:47:08.240
that gets sent to wherever you decide to get sent to,


00:47:08.240 --> 00:47:11.040
and you can reply to it and it goes back through there


00:47:11.040 --> 00:47:12.520
and things like that, it's really cool.


00:47:12.520 --> 00:47:16.680
So like if I went to ars-technica.com and I created


00:47:16.680 --> 00:47:19.040
it would be like some random thing


00:47:19.040 --> 00:47:24.040
at ars-technica-simple-logon-ish.io or whatever.


00:47:24.040 --> 00:47:26.320
So you kind of know where it comes from,


00:47:26.320 --> 00:47:30.000
but if you want to just delete that and make it mailstop


00:47:30.000 --> 00:47:31.720
or you can figure out if it's sold or whatever.


00:47:31.720 --> 00:47:34.640
So anyway, recommendation on checking that as well.


00:47:34.640 --> 00:47:36.560
It's also open source.


00:47:36.560 --> 00:47:40.400
You can host it yourself if you like hosting email.


00:47:40.400 --> 00:47:43.900
I don't really feel like doing that.


00:47:43.900 --> 00:47:46.020
If you've heard about, a new topic,


00:47:46.020 --> 00:47:49.260
if you've heard about all the crazy stuff with chips,


00:47:49.260 --> 00:47:52.840
the Chips Act in the US, similar stuff in Europe.


00:47:52.840 --> 00:47:59.340
If you've heard about Biden banning chips


00:47:59.340 --> 00:48:01.880
or the US government banning chips


00:48:01.880 --> 00:48:06.260
to be used in certain things, primarily in China,


00:48:06.260 --> 00:48:09.660
but there's a bunch of angles


00:48:09.660 --> 00:48:11.100
in which this kind of stuff is heating up,


00:48:11.100 --> 00:48:15.080
not just with the US, but primarily around the US.


00:48:15.080 --> 00:48:17.380
There's an incredibly good documentary


00:48:17.380 --> 00:48:22.380
on YouTube called "US vs. China, The War You Can't See"


00:48:22.380 --> 00:48:24.420
that talks about the history of this.


00:48:24.420 --> 00:48:28.040
And it just reminds me of how much good stuff


00:48:28.040 --> 00:48:29.460
there is on YouTube.


00:48:29.460 --> 00:48:31.420
I mean, I know there's a lot of stupid cats


00:48:31.420 --> 00:48:34.260
falling off of chairs and like idiots,


00:48:34.260 --> 00:48:36.900
but hidden in there, there were some,


00:48:36.900 --> 00:48:38.960
this is a better documentary than you would find


00:48:38.960 --> 00:48:42.520
on professional top tier television networks.


00:48:42.520 --> 00:48:44.480
It's really good.


00:48:44.480 --> 00:48:47.280
So anyway, if that's interesting to you.


00:48:47.280 --> 00:48:50.320
- I will second that documentary note.


00:48:50.320 --> 00:48:52.120
I have a 15 year old here


00:48:52.120 --> 00:48:55.880
who's obsessed with long form YouTube.


00:48:55.880 --> 00:48:57.080
And some of the things he has shown me


00:48:57.080 --> 00:48:57.920
it just blow my mind.


00:48:57.920 --> 00:49:01.000
Like why the super conducting super collider


00:49:01.000 --> 00:49:04.480
didn't succeed eight hours of like documentary on that.


00:49:04.480 --> 00:49:05.920
I was like, what?


00:49:05.920 --> 00:49:07.960
- Yeah, there is no more discovery channel.


00:49:07.960 --> 00:49:09.920
There's no more history channel.


00:49:09.920 --> 00:49:12.320
I know they exist in name, but not in what they were,


00:49:12.320 --> 00:49:15.080
where they actually have real science and real information.


00:49:15.080 --> 00:49:17.400
They're just reality TV and other silly stuff.


00:49:17.400 --> 00:49:18.400
So, all right.


00:49:18.400 --> 00:49:21.160
I know we'll get short on time, Brian, so I'll go quick.


00:49:21.160 --> 00:49:23.480
Talk Python's hiring.


00:49:23.480 --> 00:49:28.480
So I'm looking to hire somebody that does Flutter and Dart,


00:49:28.480 --> 00:49:32.520
not Python, 'cause if it's Python, I'd be doing it myself.


00:49:32.520 --> 00:49:34.000
But if you're out there and you have experience


00:49:34.000 --> 00:49:37.060
with publishing apps and Flutter apps in particular


00:49:37.060 --> 00:49:39.100
to the various app stores.


00:49:39.100 --> 00:49:41.860
If you're used to working on like Android and iOS


00:49:41.860 --> 00:49:43.980
and others with Flutter,


00:49:43.980 --> 00:49:45.740
and you can show me an app in that store,


00:49:45.740 --> 00:49:47.240
I would love to work with you.


00:49:47.240 --> 00:49:49.600
I'm gonna post this somewhere pretty soon,


00:49:49.600 --> 00:49:51.580
but I wanna put it out to the community first


00:49:51.580 --> 00:49:53.700
'cause I'd rather hire somebody from our community


00:49:53.700 --> 00:49:56.420
than just some random person off the internet.


00:49:56.420 --> 00:49:58.900
And it's primarily to do a complete rework


00:49:58.900 --> 00:50:00.780
of our mobile apps for Talk Python Training.


00:50:00.780 --> 00:50:02.620
So that'll be a lot of fun if people are interested,


00:50:02.620 --> 00:50:06.900
just email me, michael@talkpython.fm.


00:50:06.900 --> 00:50:10.900
That's it. Those are all my extras. Yeah.


00:50:10.900 --> 00:50:13.900
Nice.


00:50:13.900 --> 00:50:14.900
Calvin, thanks for being here.


00:50:14.900 --> 00:50:19.900
Thanks for having me. I really enjoy it. It's lots of fun. I get to go learn new things each time I come.


00:50:19.900 --> 00:50:22.900
Yeah, we do every time we show up as well. It's a lot of fun.


00:50:22.900 --> 00:50:23.900
Yep.


00:50:23.900 --> 00:50:24.900
Alright. And Brian, thanks as always.


00:50:24.900 --> 00:50:25.900
Thank you.


00:50:25.900 --> 00:50:26.900
Bye, everyone.


00:50:26.900 --> 00:50:27.900
Bye.


00:50:27.900 --> 00:50:37.900
[BLANK_AUDIO]

