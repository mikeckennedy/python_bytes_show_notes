WEBVTT

00:00:01.860 --> 00:00:02.740
Hey, Michael. Hey, everybody.

00:00:03.299 --> 00:00:03.980
Hello, hello.

00:00:04.640 --> 00:00:06.100
Welcome to Python Pice, everybody.

00:00:06.980 --> 00:00:07.840
I'm excited to...

00:00:08.020 --> 00:00:11.780
It's a hot day in Portland, but I'm in an air-conditioned room.

00:00:13.480 --> 00:00:13.940
I'm not either.

00:00:14.220 --> 00:00:15.980
I'm not, but I left my windows open. It's going to be okay.

00:00:16.760 --> 00:00:16.880
But

00:00:16.880 --> 00:00:17.540
the Python news

00:00:17.540 --> 00:00:18.220
is even hotter.

00:00:19.179 --> 00:00:23.960
It's like 70, a.k.a. 20 for our people that work in C.

00:00:24.640 --> 00:00:28.380
Wow, that's really cool that you can translate that really quickly.

00:00:30.240 --> 00:00:33.700
Anyway. Okay, I cannot. Let's kick it off.

00:00:35.180 --> 00:00:39.840
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:40.920 --> 00:00:45.300
This is episode 435, recorded June 9th, 2025.

00:00:46.180 --> 00:00:47.280
And I am Brian Okken.

00:00:47.760 --> 00:00:48.540
And I'm Michael Kennedy.

00:00:49.420 --> 00:00:51.540
And this episode is sponsored by us.

00:00:51.880 --> 00:01:03.020
So please check out all the awesome courses at Talk Python Training and lots of different options for learning pytest at pythontest.com.

00:01:03.780 --> 00:01:04.480
So check that out.

00:01:04.519 --> 00:01:06.240
And also thank you to our Patreon supporters.

00:01:06.460 --> 00:01:08.940
They've been sticking around for a long time and we really appreciate them.

00:01:10.040 --> 00:01:17.900
If you'd like to connect with us, more about this later, but if you'd like to connect with us, please check out the links in the show notes.

00:01:18.580 --> 00:01:24.120
Links to both Blue Sky and Mastodon are there.

00:01:24.900 --> 00:01:30.180
And if you would like to join us live, you can head on over to pythonbytes.fm/live.

00:01:30.680 --> 00:01:32.720
And it'll show you how to do that.

00:01:32.960 --> 00:01:33.840
There's a link at the top.

00:01:34.020 --> 00:01:34.480
It's really easy.

00:01:36.140 --> 00:01:44.560
And then also, when you're listening and you want to check out all the cool things that we talk about, but don't want to write them down, no worries.

00:01:44.880 --> 00:01:51.200
just go ahead and sign up to be part of the newsletter and we'll send those directly to your inbox.

00:01:51.960 --> 00:01:52.040
So

00:01:52.040 --> 00:01:53.460
with that,

00:01:55.390 --> 00:01:58.000
do you have a cool item for us, Michael?

00:01:58.260 --> 00:01:59.040
I do.

00:01:59.090 --> 00:02:00.400
I have some stuff I want to talk about.

00:02:02.340 --> 00:02:04.940
It's an update on things I've spoken about before.

00:02:06.280 --> 00:02:07.980
But it could have been six years ago.

00:02:08.009 --> 00:02:09.440
I can't remember when we covered this.

00:02:09.500 --> 00:02:11.860
And I, for some reason, didn't do a search.

00:02:12.660 --> 00:02:13.320
So here's the deal.

00:02:13.740 --> 00:02:23.840
You are writing an application and you're doing things like, hey, I need to have my app save some content in a file.

00:02:24.720 --> 00:02:26.040
I don't want the user to access it.

00:02:26.220 --> 00:02:27.900
I want my app to be able to get to it.

00:02:28.280 --> 00:02:29.000
And that's pretty much it.

00:02:29.100 --> 00:02:32.140
Like maybe a SQLite DB file, right?

00:02:32.320 --> 00:02:34.760
That's not a thing that the users should be tracking down.

00:02:34.800 --> 00:02:43.220
You don't want to put it in their My Documents on Windows or somewhere in the user profile on Mac or Linux or something like that, right?

00:02:43.380 --> 00:02:44.820
You need to save it somewhere.

00:02:45.310 --> 00:02:46.560
It needs to be associated with the user.

00:02:46.650 --> 00:02:47.880
They need to have permissions right there.

00:02:48.420 --> 00:03:01.420
So I previously talked about Apters, the Apters package, a small Python module for determining appropriate platform-specific directories like user directories or stuff like that, right?

00:03:02.859 --> 00:03:04.580
So where's your config?

00:03:04.860 --> 00:03:05.760
Where's your cache directory?

00:03:05.870 --> 00:03:12.780
So on macOS, that's like tilde slash capital library, capital L library, cache.

00:03:13.100 --> 00:03:15.260
Then you probably use app name, something like that.

00:03:15.310 --> 00:03:16.180
Those kinds of things, right?

00:03:17.400 --> 00:03:17.500
You

00:03:17.500 --> 00:03:17.860
want to get

00:03:17.860 --> 00:03:19.620
access to that and put things in there.

00:03:20.360 --> 00:03:22.100
And it drives me nuts, Brian.

00:03:22.550 --> 00:03:24.540
I go to my user profile.

00:03:24.870 --> 00:03:34.960
If I want to look at hidden files, there's a ton of.thisapp,.thatapp settings in my user profile.

00:03:35.920 --> 00:03:36.860
And they're not there for me.

00:03:37.340 --> 00:03:47.560
They're there because the designers of those apps were too lazy, usually, too lazy to put that into the appropriate location on that platform, right?

00:03:48.580 --> 00:03:52.020
There's some that maybe I should mess with, like, for example, OhMyZShell.

00:03:53.020 --> 00:03:59.740
You might want to go and tweak, like, your prompt, how that looks, or whatever, and right, you would get to that from there.

00:03:59.770 --> 00:04:03.480
But a lot of things, they just do it because, like, well, we'll just do a dot because it's hidden.

00:04:03.820 --> 00:04:04.540
People won't see that.

00:04:05.430 --> 00:04:06.360
Just drop it right in there.

00:04:06.420 --> 00:04:12.340
So I implore people listening to put stuff in the right place or a better place.

00:04:13.160 --> 00:04:13.740
Well, okay.

00:04:13.960 --> 00:04:17.760
I'm guilty of this, but I don't really think about Windows too much.

00:04:17.760 --> 00:04:24.400
I just think about like in a Linux-y environment, the home directory is usually the right place.

00:04:25.419 --> 00:04:26.840
Well, maybe.

00:04:27.120 --> 00:04:28.460
I mean, let me see what I got in here.

00:04:28.460 --> 00:04:29.420
I don't think so, but

00:04:29.420 --> 00:04:30.440
let

00:04:30.440 --> 00:04:33.040
me do an A.

00:04:38.760 --> 00:04:39.740
How do I do my hidden ones there?

00:04:39.860 --> 00:04:40.580
You know, I'll do it this way.

00:04:41.180 --> 00:04:42.040
Hold on, I'll do it this way.

00:04:42.700 --> 00:04:44.840
So, for example...

00:04:44.940 --> 00:04:46.700
Well, I'm probably doing it the wrong way there, too.

00:04:47.280 --> 00:04:47.740
Well, maybe,

00:04:47.840 --> 00:04:54.060
but there's like Studio 3T, which is a MongoDB GUI management tool.

00:04:54.600 --> 00:04:55.940
It has all of its settings in here.

00:04:56.880 --> 00:04:58.820
Is that something that I should be working with?

00:04:59.020 --> 00:04:59.860
Should I be seeing this?

00:05:00.300 --> 00:05:00.660
Probably not.

00:05:00.740 --> 00:05:03.100
is like a.3t folder and it's got like

00:05:03.100 --> 00:05:04.720
my roaming

00:05:04.720 --> 00:05:10.760
history and crap in there. I've got.android for whenever I have the Android SDK doing something.

00:05:11.620 --> 00:05:12.180
I've got,

00:05:12.380 --> 00:05:19.200
I mean, I can see like I've got a.aws. Maybe it's got things in there, right? But I have a.map plotlib.

00:05:20.010 --> 00:05:32.780
For real. There's a.map plotlib in here. Why? Why is it here? I don't know. There's a pip audit cache. Literally, it's called cache. Should I see the cache? No, the cache is not for reading.

00:05:33.920 --> 00:05:42.920
There's literally a cache folder on all these platforms where it goes. And maybe on Linux, it literally is just like there, but okay, fine. But on the other ones, it shouldn't be, right?

00:05:43.120 --> 00:05:43.200
Anyway,

00:05:43.400 --> 00:05:45.160
maybe I'm

00:05:45.160 --> 00:05:55.660
ranting a bit hard on this, but you should probably do these correct things. And I wasn't even thinking about Windows, although Windows does have a different set of places things go, So this

00:05:55.660 --> 00:05:56.880
thing

00:05:56.880 --> 00:05:58.540
was great, and I recommended appdurs.

00:05:58.970 --> 00:06:04.240
But if you go up a little bit, it says, note, this project has officially been deprecated.

00:06:04.520 --> 00:06:05.120
Oh, no.

00:06:05.580 --> 00:06:05.900
No.

00:06:06.460 --> 00:06:07.640
We were so close.

00:06:08.940 --> 00:06:12.740
So it says, you may want to check out platformdurs, which is my recommendation.

00:06:13.580 --> 00:06:18.760
So moving over to platformdurs, this is under toxdev, T-O-X-dev.

00:06:19.180 --> 00:06:20.960
So cool group there.

00:06:21.380 --> 00:06:27.420
and it's a small Python module for determining the appropriate platform-specific directories, such as I just said.

00:06:28.680 --> 00:06:32.020
However, it's better in some ways.

00:06:33.240 --> 00:06:37.620
So it has, I don't know if you noticed before, but there's maybe three or four directories on app tours.

00:06:37.840 --> 00:06:49.180
This one has documents, downloads, pictures, videos, music, desktop, runtime, etc., etc., lots of different places that you might want to go to, depending on what platform you're on.

00:06:50.200 --> 00:06:52.680
It has better typing.

00:06:53.540 --> 00:06:57.160
It has been rewritten to use path, as in

00:06:57.160 --> 00:06:59.920
objects from pathlib and all

00:06:59.920 --> 00:07:00.260
that.

00:07:00.900 --> 00:07:04.980
It's got CI testing against all the different platforms that it supports.

00:07:05.700 --> 00:07:11.500
So very, very cool that this not only continues to live, but it's actually gotten much better.

00:07:12.500 --> 00:07:16.880
Yeah, and the TOX development group is going to keep it updated.

00:07:18.300 --> 00:07:18.980
So cool.

00:07:19.190 --> 00:07:19.760
Yeah, exactly.

00:07:19.840 --> 00:07:24.220
It can't require that much support over time, right?

00:07:24.290 --> 00:07:24.820
These things are not

00:07:24.820 --> 00:07:25.760
super

00:07:25.760 --> 00:07:29.640
dynamic, but I do really appreciate them modernizing it.

00:07:29.820 --> 00:07:40.300
You know, I think that some of the changes were that basically appters got out of sync with Python rather than out of sync with the platforms, right?

00:07:40.370 --> 00:07:42.060
It was just like, well, it doesn't have types.

00:07:42.190 --> 00:07:44.640
And so now we got, you know, just a bunch of stuff like that.

00:07:44.940 --> 00:07:47.880
So I'm very happy to see it and recommend platform DIRS.

00:07:47.900 --> 00:07:50.640
I already used it to massive success on some projects.

00:07:51.160 --> 00:07:54.580
I was like, I want to use this and some cool caching things, and it made my app so much better.

00:07:54.760 --> 00:07:55.340
And guess what?

00:07:55.500 --> 00:08:01.000
There's not yet another.Michaelsapp cache in my tilde slash.

00:08:03.340 --> 00:08:03.680
Over to you.

00:08:04.520 --> 00:08:07.480
I'll have to do this on some of my applications.

00:08:08.560 --> 00:08:09.360
It's worth considering.

00:08:09.580 --> 00:08:10.720
So I'm glad you brought it up.

00:08:11.180 --> 00:08:11.360
All right.

00:08:12.920 --> 00:08:23.400
I'd like to actually want to do a shout-out to Bob Belderbos because he posted, I think he posted on several platforms, but I saw it on LinkedIn.

00:08:25.570 --> 00:08:26.800
It says, I love make files.

00:08:27.200 --> 00:08:31.340
They save me time and help my team work in a more uniform way.

00:08:31.920 --> 00:08:33.159
I'd love to be able to say this.

00:08:33.320 --> 00:08:34.260
I love make files also.

00:08:34.460 --> 00:08:35.580
Actually, I don't love them.

00:08:35.919 --> 00:08:36.719
I'm just used to them.

00:08:37.240 --> 00:08:40.060
So I've thrown a make file into something that makes sense.

00:08:40.659 --> 00:08:45.540
But for a very long time, nobody else on my projects have been familiar with make files.

00:08:45.620 --> 00:08:46.520
That would be me.

00:08:46.860 --> 00:08:47.640
I'd be like, what's a make file?

00:08:48.040 --> 00:08:48.520
Why do we have this?

00:08:48.980 --> 00:08:49.580
Why do we have Python?

00:08:50.200 --> 00:08:58.780
So some Python projects I use, I use Tox because you can do kind of some similar stuff with Tox, but it is annoying that it creates a virtual environment.

00:08:59.160 --> 00:09:01.020
It's better with uv now because it's fast.

00:09:01.240 --> 00:09:12.180
But still, there is, so there's a new kid on the block, or at least new to me, called, that Bob has introduced, and it's called Poe the Poet.

00:09:13.860 --> 00:09:20.140
And I was a little leery because I thought it maybe was too tied to the poetry project.

00:09:20.500 --> 00:09:23.080
But even if it is, you don't have to use it with it.

00:09:23.460 --> 00:09:25.740
I'm using it without it, of course.

00:09:25.980 --> 00:09:32.800
But anyway, so the thing I love about this is, as an example, I'm leaving this on Bob's post because it's great.

00:09:33.900 --> 00:09:37.240
In your pyproject.toml, that's where you define the tasks.

00:09:37.430 --> 00:09:42.500
And this is great because I don't have to have an extra thing, an extra file in my project.

00:09:42.900 --> 00:09:44.660
this makes sense to just put it there.

00:09:45.800 --> 00:09:52.620
So he has an example of like, so a test action would be, you can just define it as pytest or something.

00:09:53.120 --> 00:09:57.100
Or Cove, you can have pytest running with coverage.

00:09:58.360 --> 00:10:08.980
The linter is rough, which is, it's funny, people still do this, but actually I remember rough better than I remember lint anymore, but it's just me.

00:10:10.180 --> 00:10:13.660
But anyway, some cool type.

00:10:13.980 --> 00:10:16.440
Oh, he has tie check for the ty.

00:10:17.260 --> 00:10:17.620
What?

00:10:18.280 --> 00:10:19.200
Wow, he's on top of

00:10:19.200 --> 00:10:19.440
that.

00:10:19.800 --> 00:10:20.440
That is super new.

00:10:21.320 --> 00:10:22.220
Integrates well with uv.

00:10:22.500 --> 00:10:23.260
I tried it out.

00:10:23.280 --> 00:10:24.120
It is pretty slick.

00:10:24.460 --> 00:10:33.700
So the Poet the Poet documentation says it's a batteries-included task runner that works well with poetry or with uv.

00:10:34.060 --> 00:10:35.640
I'm definitely using it with uv.

00:10:37.660 --> 00:10:40.720
There's a bunch of cool things how to define this.

00:10:40.860 --> 00:10:43.540
So in the documentation, it's pretty good.

00:10:44.740 --> 00:10:54.200
So you can, like Bob said, you just add a section called tool.po.tasks and then define a bunch of actions.

00:10:54.880 --> 00:11:00.440
There's ways to have built-up actions like you would with the makefile or talks.

00:11:01.600 --> 00:11:02.500
Actually, I don't know if you can do this.

00:11:02.940 --> 00:11:06.980
Anyway, you can have multiple actions that run one after another.

00:11:07.520 --> 00:11:08.680
The sequences is pretty cool.

00:11:09.600 --> 00:11:14.220
You can also add help text to things, which is nice.

00:11:14.580 --> 00:11:17.760
Anyway, but having it right in, I just love it.

00:11:17.760 --> 00:11:20.500
It's right in the PyProduct.tomo, and it works well with uv.

00:11:21.740 --> 00:11:22.160
Love that.

00:11:22.680 --> 00:11:25.300
So definitely going to switch it for a lot of projects.

00:11:25.880 --> 00:11:27.080
And there's an example.

00:11:27.660 --> 00:11:34.480
I'm not sure where the example is right now, but in the kind of getting started, or maybe it was Bob.

00:11:34.680 --> 00:11:34.800
Anyway,

00:11:35.020 --> 00:11:55.740
adding it to your development dependencies within your PyProject.toml is slick because then now if you're using, hopefully you're using development dependencies within your project.toml so that new developers can just install all the tools they need to just by using that.

00:11:55.980 --> 00:11:57.320
So pretty cool.

00:11:58.600 --> 00:11:58.960
Love it.

00:11:59.740 --> 00:12:00.540
Yeah, yeah, very cool.

00:12:00.540 --> 00:12:06.340
And by the way, did you catch that the logo of Poe the Poet is Edgar Allan Poe.

00:12:07.080 --> 00:12:07.780
Yeah, he's

00:12:07.780 --> 00:12:08.140
the poet.

00:12:11.120 --> 00:12:11.680
Very interesting.

00:12:12.230 --> 00:12:12.400
Okay.

00:12:15.180 --> 00:12:16.760
Next up is some data science.

00:12:18.260 --> 00:12:27.060
There's an article I'm linking to on the new stack by Jacobs, Jackson rather, sorry.

00:12:27.620 --> 00:12:36.060
And this is that Pandas 3.0 will significantly boost performance by replacing NumPy with PyArrow as the default engine,

00:12:37.400 --> 00:12:38.160
enabling faster

00:12:38.160 --> 00:12:41.240
loading and reading of columnar data.

00:12:43.580 --> 00:13:04.280
So since 2.0, I think Pandas has had possible support for PyArrow, which is more of an analytics-type backend than NumPy, which is more database-y, like traditional rows, like here's an entry in its internal structure,

00:13:05.120 --> 00:13:05.680
making

00:13:05.680 --> 00:13:13.360
it much easier to ask questions like, what's the average or the max of this aspect of the data?

00:13:14.000 --> 00:13:24.100
The average sales price for these million rows is way faster in a columnar orientation because you just go right down the data as it is.

00:13:24.780 --> 00:13:29.260
It makes it slower for row type of operations, but that's less common for data science.

00:13:30.120 --> 00:13:36.000
It also does much, much faster reading and writing of files and all sorts of things.

00:13:37.560 --> 00:13:45.020
So I recently spoke with Reuben Lerner about the PyArrow revolution on Talk Python not too long ago.

00:13:45.940 --> 00:13:46.820
And that was a lot of fun.

00:13:47.260 --> 00:13:50.900
Basically, we talked about all the benefits of PyArrow and why you might consider it.

00:13:50.940 --> 00:13:59.180
But the news here is that this will be the default in 3.0 for Pandas.

00:13:59.640 --> 00:14:00.640
When is that coming out?

00:14:01.090 --> 00:14:01.680
Who knows, right?

00:14:01.960 --> 00:14:10.140
Pandas have been around for like many, many, many years, and it's on version two, so maybe it's going to take another 15 years for version three to come out.

00:14:10.580 --> 00:14:11.180
I don't know.

00:14:11.780 --> 00:14:12.340
Versions are,

00:14:12.500 --> 00:14:23.300
I think the perception of versions is changing over, you know, we talked about zero and all this stuff, but I think versions are starting to go faster these days, right?

00:14:23.440 --> 00:14:27.520
Django is on five, and it was just on four, and it's been around a long time.

00:14:28.400 --> 00:14:29.380
But it should be out pretty soon.

00:14:29.800 --> 00:14:30.900
so I'm not exactly sure on the

00:14:30.900 --> 00:14:42.440
timing I know some people will know better than me but anyway it also may have been like that just switching out the back end is a big enough change that they decided that's a good reason to switch to a 3

00:14:42.720 --> 00:15:01.640
yeah that's a very good point it says over time Pyro is becoming better and better integrated with Pandas but using it as a back end is still experimental and isn't recommended in production presumably until 3.0 where it becomes the default in which it would become recommended because you'd have to work around it to know better, right?

00:15:03.640 --> 00:15:04.660
Anyway, that's my item.

00:15:05.460 --> 00:15:10.980
Check out Pyro. Check out the conversation I had with Reuben about it to see what's coming for

00:15:10.980 --> 00:15:11.320
Pandas.

00:15:12.460 --> 00:15:12.640
Cool.

00:15:15.000 --> 00:15:19.460
All right. I wanted to talk about data science a little bit as well.

00:15:22.500 --> 00:15:27.020
I'm going to point to a project called Point Blank.

00:15:27.720 --> 00:15:31.260
It's data validation made beautiful and powerful.

00:15:31.520 --> 00:15:35.240
At least that's the sales pitch or the sub point.

00:15:35.540 --> 00:15:41.500
Anyway, so I don't do a lot of data science, but I really think this is a cool idea.

00:15:42.010 --> 00:15:54.220
Even without data science, any sort of pipeline stuff of checking data within your pipeline makes sense and what to do with it.

00:15:54.380 --> 00:15:55.340
So here's the idea.

00:15:55.560 --> 00:16:02.540
So it says it's a powerful yet elegant data validation framework for Python that transforms how you ensure data quality.

00:16:03.420 --> 00:16:09.880
There's a chainable API that you can use to validate data against comprehensive quality checks.

00:16:11.200 --> 00:16:15.740
And it says visualize through stunning interactive reports, which I haven't looked at the reports yet.

00:16:15.780 --> 00:16:31.240
But anyway, so just at the top example, you've got import point blank, And then you have these validation features where you can take a data set and validate it.

00:16:31.510 --> 00:16:40.920
In this example, it says, okay, on column D, validate that the values are greater than 100.

00:16:41.580 --> 00:16:43.420
There's more than 100 values there.

00:16:45.180 --> 00:16:54.940
And then actually on column C, validate that there's less than or equal, the values are less than or equal to five.

00:16:55.560 --> 00:16:59.940
And then there's certain columns exist.

00:17:00.000 --> 00:17:02.380
Make sure the date and the time exist in those columns.

00:17:02.900 --> 00:17:13.600
So you get data frames in, or data sets and data frames, and you've got to be able to make sure that they're in the right shape, the data's in the right place.

00:17:14.839 --> 00:17:16.140
And that's awesome.

00:17:16.270 --> 00:17:17.360
And what do you do if they don't?

00:17:17.459 --> 00:17:22.860
Well, there's a REPL with a validation get tabular report.

00:17:23.520 --> 00:17:25.939
That's great for when you're debugging stuff or looking at it.

00:17:26.920 --> 00:17:28.600
But what about in real time?

00:17:29.100 --> 00:17:30.020
You're not going to want to do that.

00:17:30.160 --> 00:17:35.040
And this is something you can use in real time to check all this because it's got these cool actions.

00:17:35.380 --> 00:17:44.420
So there's a bunch of actions as part of this where you can set up callbacks.

00:17:44.640 --> 00:17:49.720
It's got a default one that's built in to notify you on Slack.

00:17:50.600 --> 00:17:51.500
I don't use Slack anymore.

00:17:52.130 --> 00:17:54.100
But there's a function call one.

00:17:54.110 --> 00:18:03.140
So if there's any failures, you can set up your own notify function, which I love this idea of just, like, give me an API to, like, fill this in.

00:18:03.680 --> 00:18:05.920
And I can fill that in with whatever I want.

00:18:05.950 --> 00:18:06.400
I can call

00:18:06.400 --> 00:18:06.540
it rest API.

00:18:06.540 --> 00:18:08.360
I'm going to send myself an email or whatever.

00:18:08.830 --> 00:18:09.240
Yeah, whatever.

00:18:11.640 --> 00:18:12.500
I'll hook it up.

00:18:13.140 --> 00:18:21.180
So this idea of just run this all the time, and then if there's problems with your data chain, let somebody know about it in real time.

00:18:21.700 --> 00:18:22.340
Love that idea.

00:18:22.410 --> 00:18:23.420
You can even log it.

00:18:24.320 --> 00:18:25.240
Lots of stuff there.

00:18:25.780 --> 00:18:28.260
And it looks like the interface is pretty intuitive.

00:18:29.260 --> 00:18:38.200
They've got a roadmap for additional validation methods, advanced logging capabilities, more messaging actions.

00:18:40.179 --> 00:18:42.180
So kind of a neat project.

00:18:42.440 --> 00:18:48.960
I love that it's set up already with a code of conduct and a governance system.

00:18:50.059 --> 00:18:52.100
So pretty promising little project.

00:18:55.400 --> 00:18:56.220
So that's

00:18:56.220 --> 00:18:56.800
it for that.

00:18:57.380 --> 00:18:57.980
I like

00:18:57.980 --> 00:18:59.620
the idea of this a lot.

00:19:00.080 --> 00:19:01.080
Yeah, I like it too.

00:19:01.800 --> 00:19:02.280
I'm not sure.

00:19:02.820 --> 00:19:10.420
It would be fun to hear somebody that's used it and see, Is it something that really can be used in real time?

00:19:12.700 --> 00:19:14.220
Does it slow things down too much?

00:19:14.660 --> 00:19:25.900
I imagine not because you're going to do a little bit of work just after you've done a lot of work in a few places, validate in a few places in the pipeline to make sure everything's still kosher.

00:19:26.940 --> 00:19:27.340
It

00:19:27.340 --> 00:19:30.040
definitely, you know, data

00:19:30.040 --> 00:19:37.480
science has the feel a lot of times of I'm going to do a little bit of work to get things set up and I'm going to do some complex calculations on lots of data.

00:19:38.660 --> 00:19:42.260
rather than a bunch of tiny little function calls.

00:19:43.340 --> 00:19:47.020
Here's a function, a bit of functionality I'm adding to an API.

00:19:47.740 --> 00:19:51.800
It would be totally reasonable to say, I want that to be under 10 milliseconds for this API call.

00:19:53.080 --> 00:19:57.540
No one's going, I need my notebook to process stuff in less than 10 milliseconds.

00:19:58.500 --> 00:20:00.460
If you add a little overhead, it's probably fine.

00:20:00.840 --> 00:20:04.780
This certainly looks like it's going to be useful for unit tests as well, right?

00:20:05.300 --> 00:20:06.600
Yeah, yep.

00:20:06.960 --> 00:20:08.820
And checking to make sure.

00:20:09.950 --> 00:20:19.660
Yeah, and that's the sort of thing is like, okay, you've checked all the pieces, but this is once you put everything together, are we like losing something somewhere?

00:20:19.940 --> 00:20:29.040
Is some part of the process filling in nulls or treating invalid data incorrectly and putting garbage in there or something?

00:20:30.780 --> 00:20:31.380
Yeah, it's

00:20:31.380 --> 00:20:33.080
super easy to lose pieces

00:20:33.080 --> 00:20:35.200
of data on some of these things.

00:20:36.520 --> 00:20:39.620
How's this for a tie-in onto my first extra?

00:20:40.300 --> 00:20:40.500
Okay.

00:20:40.680 --> 00:20:46.180
If you're working with pollers or something, you can say I want to do some calculations, and what you get back is a new data frame.

00:20:47.260 --> 00:20:52.400
By default, what you get back are the columns you've asked for, like the new computed columns.

00:20:53.120 --> 00:21:01.840
But maybe what you intended is I want to add a column to the existing data frame, not take a data frame and transform it into a new data frame that has just the stuff you asked for.

00:21:02.260 --> 00:21:05.200
So instead of doing an operation, you would say dot with columns.

00:21:06.600 --> 00:21:07.060
then do the

00:21:07.060 --> 00:21:10.360
operation and it'll keep the original data frame and then add on to it, right?

00:21:10.890 --> 00:21:15.600
You would maybe like that these columns exist test.

00:21:15.950 --> 00:21:18.460
Then you would be able to say, oh, we've lost some of the columns.

00:21:18.920 --> 00:21:19.900
Who forgot the width columns?

00:21:20.400 --> 00:21:21.500
Why would you know to do that, Brian?

00:21:21.660 --> 00:21:27.160
Because you take our Polars for Power Users course that we just released last week.

00:21:27.740 --> 00:21:28.220
Oh, nice.

00:21:28.750 --> 00:21:31.380
Yeah, so this is out.

00:21:31.590 --> 00:21:33.780
It's by Chris Trudeau.

00:21:33.900 --> 00:21:36.560
It's a really awesome course, Polars for Power Users.

00:21:38.440 --> 00:21:39.220
Three hours, almost.

00:21:40.660 --> 00:21:41.540
Just under three hours.

00:21:41.860 --> 00:21:44.700
And you can go and learn a whole bunch of cool things, how to work with pollers.

00:21:44.900 --> 00:21:48.960
And Polars uses Pi Arrow underneath the covers or Arrow underneath the covers.

00:21:49.779 --> 00:21:52.180
So you can also get some cool experience with that.

00:21:52.280 --> 00:21:53.120
So people, check this out.

00:21:53.320 --> 00:21:55.840
It's been well-received and continuing to go.

00:21:56.440 --> 00:21:57.840
All right, that's my only extra I have.

00:21:57.840 --> 00:22:00.000
I have a joke, but you got any extras before we do that?

00:22:00.100 --> 00:22:00.820
Oh, I'm

00:22:00.820 --> 00:22:02.060
loaded with extras this week.

00:22:02.140 --> 00:22:05.180
So let's load them up.

00:22:05.420 --> 00:22:06.100
So there's my point blank.

00:22:07.360 --> 00:22:07.900
I was interested.

00:22:08.450 --> 00:22:11.640
So I haven't been using rough.

00:22:12.030 --> 00:22:14.800
I use rough a lot, but I don't tweak it very much.

00:22:14.810 --> 00:22:24.520
I haven't put, there's a bunch of new rules or not really new, but there's a lot of rules that you can turn on for rough for checking your code.

00:22:26.640 --> 00:22:31.540
And if you look at the rules list, there's a lot of rules that you could add.

00:22:31.580 --> 00:22:40.540
So I was interested in this discussion on Reddit about, hey, rough users, what are the rules you're using and what are you ignoring?

00:22:42.660 --> 00:22:48.100
This one was amusing to me that said I start every project and select all and ignore none.

00:22:49.320 --> 00:22:53.220
That's not realistic because some of them conflict with each other.

00:22:54.399 --> 00:22:58.100
So I think this was probably a joke, but I'm not sure.

00:22:58.620 --> 00:23:03.680
I do like, so there's some serious people that said, hey, this is my set.

00:23:04.160 --> 00:23:08.260
It had like PyFlakes rules and PyCode style and warnings and errors.

00:23:09.560 --> 00:23:10.700
Seems like a decent set.

00:23:11.300 --> 00:23:18.500
It's just kind of a fun thing to see what other people are using and maybe check out some things.

00:23:19.640 --> 00:23:23.320
Here's somebody else that has a different way.

00:23:23.500 --> 00:23:32.160
Instead of picking which rules they use, It's a select all but ignore certain rules that don't make sense for them.

00:23:32.820 --> 00:23:36.160
And, yeah, just kind of an interesting discussion.

00:23:36.500 --> 00:23:36.580
Anyway,

00:23:36.780 --> 00:23:43.500
I'm not sure if I covered this one already, but this was as of May 26th.

00:23:43.630 --> 00:23:46.760
Python 3.14.0 beta 2 is out.

00:23:47.220 --> 00:23:53.400
So if you're testing new Python versions, make sure to keep up on the new betas that come out.

00:23:55.080 --> 00:23:55.200
Nice.

00:23:55.440 --> 00:23:56.860
Yeah, I don't know. I don't think we covered it.

00:23:57.350 --> 00:23:57.480
Okay.

00:23:59.040 --> 00:24:01.140
And I guess sort of a...

00:24:01.140 --> 00:24:02.540
Oh, I got a couple more topics.

00:24:02.900 --> 00:24:23.720
One of them is if you happen, like, just randomly wanted to switch Mastodon servers and not lose anything, like lose anybody that might be following you already, there is a way to do it, and we'll link to an article on how to do this on FediTips.

00:24:24.520 --> 00:24:31.340
And this is not a trivial action, so I guess don't do it on an empty stomach.

00:24:32.020 --> 00:24:35.740
It looks like a lot of steps, but I'm glad somebody pointed that out.

00:24:36.240 --> 00:24:37.100
Why might you?

00:24:37.650 --> 00:24:54.480
Well, there's been a little bit of drama on Fostadon lately, and I am not the expert on this, but there's enough people I trust that are migrating away from Fostadon that I'm looking into it.

00:24:55.080 --> 00:24:57.760
I just haven't done it yet because, yeah.

00:24:58.220 --> 00:25:00.480
Anyway, thoughts on

00:25:00.480 --> 00:25:00.740
Fossedon?

00:25:00.760 --> 00:25:03.100
You know, I have noticed people who I thought followed me.

00:25:03.740 --> 00:25:10.740
I got notifications on Mastodon that they had followed me, and I think that's why I think they were moving accounts.

00:25:11.560 --> 00:25:11.720
Yeah.

00:25:12.280 --> 00:25:13.160
I got some too.

00:25:13.180 --> 00:25:16.140
I'm like, well, I want to follow them too, and I was already following them.

00:25:18.039 --> 00:25:20.540
So I guess this is public service as well.

00:25:20.600 --> 00:25:29.200
Even if you're not considering switching, if you're getting notifications from people that you're like, I thought they already followed me.

00:25:29.760 --> 00:25:31.660
It's probably because of something around this.

00:25:32.860 --> 00:25:44.640
The last thing I wanted to talk about is I've got some, I think that my Python test.com.

00:25:45.160 --> 00:25:46.300
Is that what I got?

00:25:46.440 --> 00:25:47.300
Yeah, that's my site.

00:25:49.340 --> 00:25:56.920
I don't know if I can trust the analytics that I was using before because I think I'm getting hit hard by AI bots and stuff.

00:25:57.380 --> 00:26:02.780
So I did update my robots.txt, but I'm also checking out a new analytics package.

00:26:03.160 --> 00:26:11.680
I'm trying out Fathom Analytics, and I chose them because they don't collect data on anybody.

00:26:12.940 --> 00:26:17.480
It's just which pages were hit and which pages weren't.

00:26:17.680 --> 00:26:20.080
and they are GDPR compliant.

00:26:20.679 --> 00:26:22.420
So, yeah.

00:26:22.840 --> 00:26:26.840
Anyway, not much more of a plug than that other than I'm trying it out.

00:26:27.400 --> 00:26:28.900
And, yeah, we'll see.

00:26:30.400 --> 00:26:30.520
Yeah,

00:26:30.700 --> 00:26:31.160
very cool.

00:26:31.200 --> 00:26:31.500
That's it.

00:26:32.960 --> 00:26:33.620
Awesome, awesome.

00:26:33.900 --> 00:26:36.900
Yeah, I'm still loving Umami Analytics.

00:26:37.960 --> 00:26:41.920
Again, GDPR, even better than GDPR compliant, like no cookies whatsoever.

00:26:42.460 --> 00:26:42.820
How's that?

00:26:43.880 --> 00:26:48.280
And we self-host it, so we don't have to, We don't share the data with anybody.

00:26:49.340 --> 00:26:51.700
So we don't have to tell you about how we're sharing our data with people.

00:26:52.380 --> 00:26:54.240
But we're not sharing data with people, which I think is great.

00:26:55.500 --> 00:26:55.760
Okay.

00:26:57.380 --> 00:26:58.260
Effortless, it says.

00:26:58.420 --> 00:26:58.760
Effortless.

00:26:58.980 --> 00:26:59.860
I'm not sure it's effortless.

00:26:59.940 --> 00:27:04.300
I've expended effort when the migrations don't work or whatever.

00:27:04.460 --> 00:27:05.280
But you know what?

00:27:05.340 --> 00:27:05.660
It's fine.

00:27:05.780 --> 00:27:06.160
It's still good.

00:27:06.900 --> 00:27:07.900
It's better than Google Analytics.

00:27:08.440 --> 00:27:08.640
All right.

00:27:08.660 --> 00:27:10.380
Are you ready for something fun as well?

00:27:10.840 --> 00:27:10.920
Yes.

00:27:11.120 --> 00:27:11.480
I'm not sure if

00:27:11.480 --> 00:27:11.980
I call this fun.

00:27:12.020 --> 00:27:15.040
I think it's fun E in a sort of sympathy way.

00:27:15.100 --> 00:27:23.240
So this joke is a cartoon called Programming Humor, from Programming Humor, called Emotional Damage.

00:27:23.810 --> 00:27:30.920
And I think, Brian, you want to be the one, you want to act this down, you want to be the one that does the first square?

00:27:32.020 --> 00:27:32.220
Sure.

00:27:33.980 --> 00:27:36.580
Hey, there's two people looking at a dog.

00:27:37.640 --> 00:27:38.460
Does your dog bite?

00:27:39.720 --> 00:27:41.640
No, but it can hurt you in other ways.

00:27:42.760 --> 00:27:43.960
I don't know if I was going to say this.

00:27:44.060 --> 00:27:44.700
I'll do the dog.

00:27:44.820 --> 00:27:47.840
The dog says, the feature you spent hours coding will not be deployed.

00:27:48.240 --> 00:27:49.220
Management finds it unnecessary.

00:27:50.340 --> 00:27:51.420
And the person starts crying.

00:27:51.920 --> 00:27:52.620
That was so bad.

00:27:54.660 --> 00:27:55.460
Does your dog bite?

00:27:55.680 --> 00:27:56.820
No, but it can hurt you.

00:27:59.220 --> 00:27:59.320
Yeah.

00:27:59.900 --> 00:28:04.400
Do you know what's more rough than software having that happen with you?

00:28:05.800 --> 00:28:06.360
Hardware people.

00:28:08.400 --> 00:28:17.980
I remember this was decades ago, but I was working on a team, somebody was retiring and they were kind of roasting him during their retirement.

00:28:18.680 --> 00:28:25.920
But he was an FBJ developer, or no, an ASIC developer, doing custom chips.

00:28:27.560 --> 00:28:34.860
And he'd worked on dozens of projects and only 5% of them ever shipped.

00:28:35.140 --> 00:28:40.820
Most of them got cancelled before the project end date. So that's rough.

00:28:43.300 --> 00:28:44.280
yeah the lead

00:28:44.280 --> 00:28:50.280
time is definitely longer in hardware than it is on software right like how from the time you work on until the time it's out yeah

00:28:50.280 --> 00:28:59.100
it's in like you know single digits or fractional digits of years um instead of weeks or months yeah yeah i

00:28:59.100 --> 00:29:06.260
definitely think about the and i'll watch documentaries about you know like the cassini probe that went to was that saturn it into.

00:29:08.520 --> 00:29:08.760
And these

00:29:08.760 --> 00:29:09.140
people will

00:29:09.140 --> 00:29:14.080
be like, yeah, we started that 25 years ago and now I'm done with this project. Moving on to the next.

00:29:14.200 --> 00:29:16.020
It's like you get two or three projects for your life.

00:29:16.860 --> 00:29:21.300
Crazy. Those things better not burn up in the atmosphere on their way out.

00:29:23.860 --> 00:29:32.680
Well, may the dogs that talk about unshipped features stay away from you all.

00:29:34.360 --> 00:29:34.520
Yep.

00:29:36.520 --> 00:29:36.640
Bye.

