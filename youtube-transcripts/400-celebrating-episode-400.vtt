WEBVTT

00:00:00.001 --> 00:00:03.620
Hey, Brian. Ready to kick things off?

00:00:03.620 --> 00:00:04.160
Yeah.

00:00:04.160 --> 00:00:07.000
Let's do it. Let's do it.

00:00:07.000 --> 00:00:13.180
Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly

00:00:13.180 --> 00:00:19.640
to your earbuds. This is episode 400. Woo! How about that?

00:00:19.640 --> 00:00:20.340
Yay.

00:00:20.340 --> 00:00:22.060
I'm Michael Kennedy.

00:00:22.060 --> 00:00:23.140
And I'm Brian Okken.

00:00:23.140 --> 00:00:28.200
And this episode is brought to you by Scout APM. Check them out. Links in the podcast

00:00:28.200 --> 00:00:32.680
player's show notes are on the website, and we'll tell you more about them later. Connect

00:00:32.680 --> 00:00:37.500
with us over on Mastodon. Links in the show notes. And hopefully you're watching us live.

00:00:37.500 --> 00:00:43.380
Now on Mondays, usually you can find out by going to pythonbytes.fm/live. And usually

00:00:43.380 --> 00:00:49.260
we have the next one scheduled and you get notified about that. And for those of you who would

00:00:49.260 --> 00:00:58.120
like, even if you missed the show, a quick digest, an artisanal handcrafted digest of

00:00:58.120 --> 00:01:01.780
all the things we talked about for the week, just become a friend of the show, sign up

00:01:01.780 --> 00:01:07.200
for the newsletter. Buy them by set of them. Just click on newsletter. Well, before we get

00:01:07.200 --> 00:01:11.980
into the topics, officially, Brian, I think we got to say a little bit something about 400.

00:01:11.980 --> 00:01:14.980
Yeah. It's quite a big number.

00:01:14.980 --> 00:01:17.460
So big that you wore an amazing hat with a butterfly.

00:01:17.460 --> 00:01:18.340
Yeah.

00:01:19.880 --> 00:01:26.540
That's a cool hat. Well, I honestly, I want to start by saying one, thanks to you. Two,

00:01:26.540 --> 00:01:32.520
thanks to the thousands and thousands of people who listen every week. Make this possible,

00:01:32.520 --> 00:01:34.260
honestly. And I really, really appreciate it.

00:01:34.260 --> 00:01:41.420
Yeah. Thanks to you too. Whatever year it was when we started, you reached out to me and said,

00:01:41.500 --> 00:01:46.720
hey, well, do you feel like doing a podcast together? And I really wouldn't have thought

00:01:46.720 --> 00:01:49.340
we would have been at 400 episodes. It was pretty cool.

00:01:49.340 --> 00:01:54.300
It's incredible. And I thought, well, we don't have really any guests or a lot of like,

00:01:54.300 --> 00:02:01.620
you know, forum stuff. So let's celebrate this. I asked ChatGPT to say, I said, look,

00:02:01.620 --> 00:02:06.360
there's this big milestone. Could you just give us a quick celebration sort of thing? And I think

00:02:06.360 --> 00:02:09.380
there's a few things that are notable before I read this off. It's pretty short.

00:02:09.640 --> 00:02:15.280
Okay. But I think it's notable that it knows about you, knows about me, knows about the show,

00:02:15.280 --> 00:02:19.800
knows about what the show is about and the topics we've covered. So anyway, here we go. This is

00:02:19.800 --> 00:02:27.700
ChatGPT celebrates episode 400 of Python Bytes. Welcome to the big 400 Pythonistas. It's hard to

00:02:27.700 --> 00:02:32.580
believe we're celebrating the 400th episode of Python Bytes. From the early days of byte-sized Python

00:02:32.580 --> 00:02:37.620
news to becoming the source of all things Python, it's been a wild ride. We've laughed over the quirks,

00:02:37.960 --> 00:02:43.180
gasped at new libraries, and said farewell to the GIL together. Whether you're a seasoned developer,

00:02:43.180 --> 00:02:47.180
a curious learner, or just here for the witty banter, you've been an essential part of this

00:02:47.180 --> 00:02:52.920
journey. To Michael and Brian, you've built a community that turns import this into more than

00:02:52.920 --> 00:02:58.700
just Zen. It's a family of passionate Pythonistas. Your dedication, insight, and humor makes this show

00:02:58.700 --> 00:03:03.520
more than just tech news. It's a weekly celebration of what we love about Python and why we keep coming

00:03:03.520 --> 00:03:09.960
back for more. Here's to the next 400 episodes. May your code be bug-free, your test pass on the

00:03:09.960 --> 00:03:16.060
first run, and your Python version always be up to date. Rocket snake emoji. That's pretty good,

00:03:16.060 --> 00:03:20.700
isn't it? Actually. Yeah. Yeah. I'm touched. ChatGPT, I didn't know you love me that much.

00:03:20.780 --> 00:03:23.640
I know. Thank you, ChatGPT. And Michael, that's just touching.

00:03:23.640 --> 00:03:31.900
It is. It's pretty cool, actually. I like that. Turns import this into more than just Zen.

00:03:31.900 --> 00:03:38.060
Indeed. I see some thank you out in the audience, and thank you, all you guys out there.

00:03:39.640 --> 00:03:47.100
With that, shall we talk about whatever you want to talk about first? Sure. As we've done 399 other

00:03:47.100 --> 00:03:54.560
times, apparently. Yeah. Let's talk about Python, specifically Python 3.13. It's just right around

00:03:54.560 --> 00:04:04.520
the corner. The official release is scheduled for the 3.13.0. It's supposed to come out on October 1st.

00:04:04.520 --> 00:04:11.640
That's just right around the corner. That's hard to believe. So 3.13.0 candidate release, or RC2,

00:04:11.640 --> 00:04:21.720
is out. So that was released September 6th, a few days ago. And I'm linking to a... Oh, I didn't link

00:04:21.720 --> 00:04:29.140
to the right thing. But there is... Oh, well. I'll just talk about it here. Anyway, it comes out October 1st.

00:04:29.800 --> 00:04:37.080
Lucas Lange, which we will link to his post, has a post to talk about it as well. Also talks about

00:04:37.080 --> 00:04:48.700
a few other releases. There's security releases for 3.12, 3.11, 3.10, 3.9, and 3.8. That's a lot of releases.

00:04:49.400 --> 00:04:56.680
And an interesting thing about the older releases, I'll cover those first, is that 3.12

00:04:56.680 --> 00:05:06.960
has a Mac release. It has binary releases. And the Mac release is only for 10.13 or newer. If you've

00:05:06.960 --> 00:05:12.780
kept up to date fairly recently, it should be fine. Because I looked at mine, and it was way past that.

00:05:13.720 --> 00:05:19.400
But there is a limited... There are limits to the macOS binary version. And all of the...

00:05:19.400 --> 00:05:27.880
All the others, like 3.11 through 3.8, they don't have binary distributions built, which is interesting.

00:05:27.880 --> 00:05:36.360
But anyway, so those... What we're really excited about is 3.13, of course. It's coming out right around the

00:05:36.360 --> 00:05:43.560
corner. There's a call to action here that is a strong encouragement for third-party Python projects.

00:05:44.120 --> 00:05:48.920
And maintainers of third-party projects to prepare your projects. Because people will be upgrading

00:05:48.920 --> 00:05:55.160
in October. Because all the last upgrades have been so easy. People are going to upgrade. So make sure

00:05:55.160 --> 00:06:04.200
your projects are ready. Go ahead and start testing on them. And if there's any issues, submit to the bug

00:06:04.200 --> 00:06:12.840
tracker. And then also, please keep in mind that this is a... The RC2 is a preview release. So it's close to the

00:06:12.840 --> 00:06:17.640
final release. But it's not recommended for production environments. So yes, test with it.

00:06:17.640 --> 00:06:24.840
Don't run in production yet. So that's cool. The one thing that I thought was interesting... So I've kind

00:06:24.840 --> 00:06:33.080
of migrated... We talked about this recently. Is upgrading your local Python with UV Python.

00:06:33.560 --> 00:06:41.160
You can't use that for 3.13. So you still have to use Python.org or some other mechanism to install 3.13. You

00:06:41.160 --> 00:06:43.240
can't do that through UV Python yet.

00:06:43.240 --> 00:06:48.600
Yet. Yeah. Well, we can... Actually, one of my items touches on that. So we'll talk about that shortly.

00:06:48.600 --> 00:06:52.440
Okay. So... Yay. I'm excited.

00:06:52.440 --> 00:06:58.120
Yay. Henry is running around in the audience says, "We're also going to have to change building

00:06:58.120 --> 00:07:05.800
wheels with 3.12 to be 10.13 plus and see how build wheels." Interesting. You know,

00:07:05.800 --> 00:07:12.280
you think about the cascading effects of all these requirements. You know, and 10.13 being the macOS

00:07:12.280 --> 00:07:19.400
version. Yeah. Was that when they split and didn't like the Intel versus whatever the other thing is?

00:07:19.400 --> 00:07:20.600
Or... I don't know. I think...

00:07:22.200 --> 00:07:27.480
It may have been, but the current version does support the Intel ones. I'm pretty sure. It's just...

00:07:27.480 --> 00:07:33.400
Well, as of today, they're supposed to announce a lot of that Apple's... Apple intelligence, their AI.

00:07:33.400 --> 00:07:40.040
Oh boy. So that, I believe, is going to be one of the hard splits as well. It's like that stuff,

00:07:40.040 --> 00:07:42.200
I don't think it's going to work on Intel, but we'll see what they say.

00:07:42.200 --> 00:07:43.160
Okay.

00:07:43.160 --> 00:07:50.120
I think that's literally going on right now as we speak. The Apple keynote thing, which is a weird

00:07:50.920 --> 00:07:55.160
one hour ad that people look forward to. Yeah. Okay. Such is the world we live in.

00:07:55.160 --> 00:08:04.120
All right. Let's carry on with a pretty sweet transition from UV to talking more UV here.

00:08:04.120 --> 00:08:09.960
So I wrote up, you know, we've been talking about UV recently and I... A couple of different... This is

00:08:09.960 --> 00:08:18.120
kind of a little mini extra, extra, extra all around one topic. So I wrote up an article about how I'm using

00:08:18.120 --> 00:08:25.960
the UV Python thing that you just mentioned, Brian, using that to basically dramatically improve how

00:08:25.960 --> 00:08:34.040
we build Docker images, one of which runs or several of which I guess, run Python bytes. Python bytes out of

00:08:34.040 --> 00:08:38.360
M gives you the RSS feed, the files, all that kind of stuff, right? Yeah.

00:08:38.360 --> 00:08:45.400
So people can check that out. But the short and long of it is, if you get down to the bottom one, it comes with an example, a little Flask app, multi...

00:08:45.400 --> 00:08:56.680
multi-tier, well, multi-image, not multi-tier, Flask app that shows how to go from basic Ubuntu image to having whatever version of Python you want with a virtual environment set up

00:08:57.400 --> 00:09:04.040
on it, including setting up your dependencies and a web server and all of that in seven seconds from

00:09:04.040 --> 00:09:11.560
nothing like a dash dash, no cache style, a build. And that gives you a base image. You can just kind of keep

00:09:11.560 --> 00:09:16.920
chilling. And then if you depend, you take an app and you build it on top of that, like Flask app or some

00:09:16.920 --> 00:09:25.880
other kind of Python app. I got it building around 700 to 800 milliseconds. So less than a second, which is awesome.

00:09:25.880 --> 00:09:35.560
So, you know, we talked about this back on 396 and 398, and we've been kind of hitting a lot. But I just recently

00:09:35.560 --> 00:09:42.200
had Charlie Marsh from Astral on, and we talked about this. And I asked him things like,

00:09:43.240 --> 00:09:50.840
"So I see you don't have the... it didn't have the latest 3.12 for a couple of days. And

00:09:50.840 --> 00:10:00.200
I noticed that you don't have a 3.13 and basically his thinking, if I remember it correctly, is more or less

00:10:00.200 --> 00:10:09.560
we plan on supporting a version before it becomes final, before it becomes stable and gets released. So

00:10:10.200 --> 00:10:12.200
by the time 3.13,

00:10:12.200 --> 00:10:16.680
gold, gold master, right, whatever comes after the official

00:10:16.680 --> 00:10:20.200
3.13 zero release, I guess comes out,

00:10:20.200 --> 00:10:28.280
it should be available in UV, but I'm not sure how much before then. Anyway, that's kind of cool. I just checked and

00:10:28.280 --> 00:10:30.840
not that one.

00:10:30.840 --> 00:10:38.440
I just checked and 3.12.6 is already available. I don't know when it was available, but it is now and that was released three days ago.

00:10:38.440 --> 00:10:40.440
So that's pretty quick.

00:10:40.440 --> 00:10:40.760
Okay.

00:10:40.760 --> 00:10:41.480
Yeah.

00:10:41.480 --> 00:10:42.600
Pretty good.

00:10:42.600 --> 00:10:46.600
Yeah. Well, and we also heard from, so Henry Schreiner says,

00:10:47.240 --> 00:11:00.040
3.13 just got merged in the same place, which is that Python built standalone. And also the 3.13 T is now in a PR.

00:11:00.040 --> 00:11:00.520
So it...

00:11:00.520 --> 00:11:01.240
Oh, interesting.

00:11:01.240 --> 00:11:01.240
We should...

00:11:01.240 --> 00:11:02.680
A free-threaded version.

00:11:02.680 --> 00:11:03.400
Yeah.

00:11:03.400 --> 00:11:05.400
So hopefully...

00:11:05.400 --> 00:11:10.040
Yeah, I think, and that was my final thing to point out is if people are like, well, okay,

00:11:10.520 --> 00:11:16.440
when I say UV Python or what I actually... I don't say UV Python necessarily. What I do

00:11:16.440 --> 00:11:23.080
is I create a virtual environment with UV and I just, I want it, I tell it I wanted this version of Python.

00:11:23.080 --> 00:11:24.520
Oh, okay.

00:11:24.520 --> 00:11:28.920
Right. And it goes, oh, you want that version of Python? Either we've already cached it or if we don't,

00:11:28.920 --> 00:11:34.920
we'll just download it from Python build standalone and then put it there for you.

00:11:34.920 --> 00:11:41.080
So if your common working artifact is a virtual environment, then you don't have to necessarily have...

00:11:41.080 --> 00:11:45.640
It doesn't even matter if you have system Python. Like literally you could not have Python on your machine

00:11:45.640 --> 00:11:50.760
and this would still get you a virtual environment with the right version of Python that you ask.

00:11:50.760 --> 00:11:56.920
But the source of all of this, also I learned about this from talking to Charlie last week,

00:11:56.920 --> 00:12:02.600
is Python build standalone. If you look at the releases,

00:12:04.600 --> 00:12:15.320
like, let's see, for example, on the latest release there, 773 different builds or something.

00:12:15.320 --> 00:12:15.640
Wow.

00:12:15.640 --> 00:12:22.520
Look at that. So you can see here, there's CPython 3, 10, 14 with something on x86, 64,

00:12:22.520 --> 00:12:29.640
four PCs on windows with this thing. There's just so many variations. So basically when you say UV,

00:12:29.640 --> 00:12:34.360
create me a virtual environment with this Python, it's going to go through those 773, find the one

00:12:34.360 --> 00:12:39.000
that's the right fit and just download it and put it there if it's not already cached. So anyway,

00:12:39.000 --> 00:12:39.800
that's the whole story.

00:12:39.800 --> 00:12:50.440
Okay. Okay. So that thing has... That one thing has a 3.13. It just hasn't been released yet then.

00:12:50.440 --> 00:12:52.680
So I guess we're waiting on that release.

00:12:52.680 --> 00:12:59.800
Yeah. So thank you, Henry. That gives us some more information. I imagine that it's really down to

00:13:00.520 --> 00:13:07.400
just what Python build standalone is doing. And then UV just give me the list of options and let me find

00:13:07.400 --> 00:13:10.040
things that match this operating system. Something like that.

00:13:10.040 --> 00:13:15.080
Well, it sounds like both of us went down the same rabbit hole, but it is kind of neat to find out where

00:13:15.640 --> 00:13:20.520
the source of this is so that I know that it wasn't that hidden, but it did take a little bit of looking

00:13:20.520 --> 00:13:21.080
to figure out.

00:13:21.080 --> 00:13:25.640
Yeah. Well, they could have been building it themselves. You don't know right now. You don't

00:13:25.640 --> 00:13:31.960
know what setting. There's all sorts of stuff that's interesting. And there's also, if I recall correctly,

00:13:31.960 --> 00:13:38.920
Charlie said there are different build optimization settings for Python build standalone than say what

00:13:38.920 --> 00:13:48.040
you get off of python.org or out of homebrew. It's interesting. For example, profile guided optimizations

00:13:48.040 --> 00:13:52.520
and things like that. And I don't remember which had which, which is better, but I feel like the build

00:13:52.520 --> 00:14:05.240
stand alone came out pretty strongly. Yeah. Cool. Cool. Cool. All right. Now, before we move on, Brian,

00:14:05.240 --> 00:14:14.440
let's hear about Scout. Let me tell you real quick about Scout APM. They're big supporters of Python bytes,

00:14:14.440 --> 00:14:21.960
so we appreciate that very much. So if you are tired of spending hours trying to find the root cause

00:14:21.960 --> 00:14:28.360
of issues impacting your performance, then you owe it to yourself to check out Scout APM. They're a leading

00:14:28.360 --> 00:14:34.600
Python application performance monitoring tool, APM, that helps you identify and solve performance

00:14:34.600 --> 00:14:40.920
abnormalities faster and easier. Scout APM ties bottlenecks such as memory leaks, slow database queries,

00:14:40.920 --> 00:14:46.760
background jobs, and the dreaded N plus one queries that you can end up if you do lazy loading in your

00:14:46.760 --> 00:14:52.520
ORM. And then you say, oh, no, why is it so slow? Why are you doing 200 database queries for what should be one?

00:14:52.520 --> 00:14:58.360
So you can find out things like that. And it links it back directly to source code so you can spend less

00:14:58.360 --> 00:15:04.840
time in the debugger and killing logs and just finding the problems and moving on. And you'll love it because

00:15:04.840 --> 00:15:10.280
it's built for developers by developers. It makes it easy to get set up. Seriously, you can do it in less than

00:15:10.280 --> 00:15:16.200
four minutes. So that's awesome. And the best part is the pricing is straightforward. You only pay for

00:15:16.200 --> 00:15:23.080
the data that you use with no hidden overage fees or per seat pricing. And I just learned this, Brian,

00:15:23.080 --> 00:15:28.920
they also have, they provide the pro version for free to all open source projects. So if you're an

00:15:28.920 --> 00:15:35.080
open source maintainer and you want to have Scout APM for that project, just shoot them a message or

00:15:35.080 --> 00:15:39.880
something on their pricing page about that. So you can start your free trial and get instant insights

00:15:39.880 --> 00:15:46.360
today. Visit by them by set of him slash Scout. The link is in your podcast player show notes as well.

00:15:46.360 --> 00:15:51.880
And please use that link. Don't just search for them because otherwise they don't think you came from us.

00:15:51.880 --> 00:15:58.840
And then they'd stop supporting the show. So please use our link by them by set of him slash Scout. Check them out. It really supports the show.

00:15:58.840 --> 00:16:02.840
All right, over to you.

00:16:02.840 --> 00:16:10.040
Cool, cool. I wanted to talk about Read the Docs for a little bit. So it just seems like, you know,

00:16:10.040 --> 00:16:13.320
Read the Docs has been around forever, right? Apparently not.

00:16:13.320 --> 00:16:13.800
Yeah.

00:16:13.800 --> 00:16:21.480
Yeah. So, so there's an article by Eric Holscher, 10 years of sustainable open source.

00:16:21.480 --> 00:16:30.680
And it's a, it's a little bit of some, some cool history here. so one, I, we totally rely on,

00:16:30.680 --> 00:16:39.240
Read the Docs, and, and the, all the tools around it. So Read the Docs apparently started in a,

00:16:39.240 --> 00:16:46.920
with a 40 hour, 48 hour open source sprint in 2010, 48 hours. Wow. So two days, I guess.

00:16:46.920 --> 00:16:54.280
and it grew to become a successful part of the Python, Python ecosystem and other, open source projects.

00:16:54.280 --> 00:17:01.800
And, yeah, obviously it's just been around 2010. but I guess that's, that's about the time that I

00:17:01.800 --> 00:17:07.320
really started, jumping in and being part of the Python community and not just part of just a user

00:17:07.320 --> 00:17:13.400
of Python, but, but part of the community. So, so that's why it looks like, it seems like it's been

00:17:13.400 --> 00:17:21.080
there forever for me. and in 2014, they created read. So read the docs.org is the open source thing.

00:17:21.080 --> 00:17:30.600
Read the docs.com was the, is in 2014. And there's links to the announcements from 2010 for

00:17:31.400 --> 00:17:37.000
announcing read the docs and the announcement for, read, read the docs for business, the.com.

00:17:37.000 --> 00:17:45.640
So this is kind of an interesting story about how to make a, a, a service that, that helps,

00:17:45.640 --> 00:17:50.600
open source communities all over the place. and how to make that sustainable. So they're still

00:17:50.600 --> 00:17:56.200
sustainable, which is cool. So what is the sustainability model? How do they do that? Because

00:17:56.200 --> 00:18:00.920
there's, there's four full-time people working on this, which is not that big. I mean,

00:18:00.920 --> 00:18:06.920
four people, there's probably a lot of, volunteer volunteers on the open source site also.

00:18:06.920 --> 00:18:13.560
Um, but for full-time people, that's pretty cool. Anyway, there's, the.org side has,

00:18:13.560 --> 00:18:20.200
single non-tracking ads. And I think they were one of the first that I was aware of that did,

00:18:20.840 --> 00:18:26.920
did like a single, just like ethic ad ethical ads or something that just had ads, but it wasn't

00:18:26.920 --> 00:18:32.520
tracking you at all, which is how ads should be, I think. and I, I'm totally okay with that

00:18:32.520 --> 00:18:40.120
to help them sustain their model. And then the.com is a paid service. It helps companies for private

00:18:40.120 --> 00:18:45.640
repos and additional, they have other benefits also, but sort of read the docs for companies.

00:18:46.200 --> 00:18:51.560
Um, and then it also talks about things that didn't work, which I love this. I love the

00:18:51.560 --> 00:18:57.160
discussing the parts that didn't work. I like, have you tried this? one of the things was,

00:18:57.160 --> 00:19:03.480
just trying on trying, donations and other optional support. And it just didn't work at all.

00:19:03.480 --> 00:19:10.440
And it left people with, mental health issues and burnout. This is, that's terrible.

00:19:10.440 --> 00:19:15.160
the other thing was, consulting services where you think about that, like maybe offer services for

00:19:15.160 --> 00:19:21.640
people that to pay. But, the bad downside of that was it took away from, time that they wanted

00:19:21.640 --> 00:19:26.760
to work on the main project. they experimented with grant funding and that was cool. Cause they got

00:19:26.760 --> 00:19:32.440
some, like a blob of money at a time, but it's a one-time thing. And it's not that easy to keep

00:19:32.440 --> 00:19:38.840
going and getting more grants. So the current model is the paid service plus the advertising. And,

00:19:38.840 --> 00:19:45.000
that's cool. talk about some lessons learned, which is neat. basically, you don't get

00:19:45.000 --> 00:19:50.120
extra points for being bootstrapped. people will compare you to VC funded companies anyway, which

00:19:50.120 --> 00:19:57.800
is, it's, it's cool that they call it out because that's obvious, but also sometimes not obvious.

00:19:57.800 --> 00:20:03.160
even if you're community driven bootstrapped, you don't get any points for that. We, we still expect

00:20:03.160 --> 00:20:09.800
you to be perfect. the other thing was, keeping trust in the community was the most

00:20:09.800 --> 00:20:16.440
important thing. and, yeah, it, they said that it's cliche, but trust is hard to earn and easy

00:20:16.440 --> 00:20:23.560
to lose. definitely. and they, they can't, can't maximize profits.

00:20:24.760 --> 00:20:30.120
unless you keep trusting the, with the community, which, definitely, support that.

00:20:30.120 --> 00:20:35.160
Uh, the, the one part that I thought was one of the reasons why I highlighted this is because

00:20:35.160 --> 00:20:41.400
this is a lesson I think that can go, not just for people trying to sustain a funding model,

00:20:41.400 --> 00:20:48.120
but just, lots of open source projects can, can listen to this. And the lesson is contribution

00:20:48.120 --> 00:20:53.480
is easier in less complex parts of the code base. So they've noticed that they've got,

00:20:53.480 --> 00:21:00.680
they've got their core stuff, the read the docs.org repo, the core stuff that is got some complex

00:21:00.680 --> 00:21:05.800
stuff in it. And it's hard to get people to help out, but there's other things like contributions

00:21:05.800 --> 00:21:13.640
to this Sphinx theme or extensions or small Python or JavaScript projects that are work alongside of it

00:21:13.640 --> 00:21:19.880
that are easier to get people to contribute to. Cause they're, they're smaller, less,

00:21:19.880 --> 00:21:25.640
I guess, less complicated bits of code. I think a lot of open source projects probably could do

00:21:25.640 --> 00:21:30.600
something like that of separating out where the code is and say, if you'd like to contribute,

00:21:30.600 --> 00:21:35.560
maybe don't touch this part cause it's kind of hairy and you might, it takes a while to get into.

00:21:35.560 --> 00:21:42.440
You can, but it's going to be difficult. and, I've noticed that with us, lots of projects.

00:21:42.440 --> 00:21:49.160
So anyway, congratulations to all of them for 10 years. That's awesome. And, and then I was reading

00:21:49.160 --> 00:21:56.280
something and I found, I learned something is that there's, there's, I kind of associate read the docs

00:21:56.280 --> 00:22:04.040
with Sphinx only, but that's not true. there is now, there was a, effort to separate some of

00:22:04.040 --> 00:22:09.960
the customization and they have a different build process going on now. And you can, the Sphinx or

00:22:09.960 --> 00:22:16.600
the read the docs build system now supports any documentation tool or it should, which I didn't

00:22:16.600 --> 00:22:23.320
know about. So that's, yeah, that's cool. Almost like a general static site platform probably. Yeah.

00:22:23.320 --> 00:22:30.680
Yeah. Anyway, congratulations. It's a pretty important section of the Python community and

00:22:31.240 --> 00:22:39.080
also got some cool Python, some Portland ties as well, which is cool. Yeah. Yeah. Really helps

00:22:39.080 --> 00:22:47.240
humanize the Python space. Wouldn't you say Brian? Yeah. Which is what I want to talk about next.

00:22:47.240 --> 00:22:54.360
This project by Hugo, I know you've pointed this out before Brian, I believe if I can actually get to

00:22:54.360 --> 00:22:56.600
him. There we go. Hugo van Kenimande,

00:22:58.840 --> 00:23:08.200
CPython core developer and many, many project maintainer. One of the projects is humanize. And I

00:23:08.200 --> 00:23:15.080
recently, when I've written this codes for in ice and, you know, small scale before, because I kind of

00:23:15.080 --> 00:23:23.240
needed it. And if I knew about this, I just wouldn't, but also I recently just started using it and it's

00:23:23.240 --> 00:23:28.680
super simple, super easy to adopt. You see examples of it right here on the GitHub screen. If you've

00:23:28.680 --> 00:23:35.240
visited their GitHub repo, right. And see where it says seven months ago, last week, last year,

00:23:35.240 --> 00:23:40.760
that kind of stuff, instead of just putting a date. Yeah. It's that kind of stuff that humanize does,

00:23:40.760 --> 00:23:45.800
but for different things. So if I go over to, I love all these ties from following up for me,

00:23:45.800 --> 00:23:50.520
from read the docs. If I go over to read the docs for them and I wait, apparently

00:23:52.840 --> 00:24:00.440
in a concept. Okay. So then they basically have four areas that are relevant. It works in different

00:24:00.440 --> 00:24:05.000
languages, many, many different languages, which is cool. It mostly works in numbers,

00:24:05.000 --> 00:24:11.960
but as I pointed out, it also works on time. So if we look at time, it has a natural date. Some of these

00:24:11.960 --> 00:24:20.680
don't have great examples. For example, the time and file size could have really nice dates. So

00:24:20.680 --> 00:24:28.840
the one I mentioned with the GitHub is natural delta. It would say things like a year ago or two years ago,

00:24:28.840 --> 00:24:39.560
or in 13 seconds, stuff like that. It has a similar natural time and precise deltas. If you want,

00:24:39.560 --> 00:24:47.000
those kinds of things. It also has for file size. So it'll say things like 300 bytes, 3.0 megabytes,

00:24:47.000 --> 00:24:56.200
2.9 kilobytes or whatever. Right. So you can just give it a number and tell it, you know, here's how

00:24:56.200 --> 00:25:02.680
many bytes it is. Make this friendly and it'll kind of figure out the right scales, a megabyte, kilobyte.

00:25:02.680 --> 00:25:09.480
That is because you don't want 0.000 megabytes. You just want, you know, switch that to kilobytes or bytes.

00:25:10.200 --> 00:25:15.800
Right. So file size is cool. But the one that has tons of stuff going on is number. So

00:25:15.800 --> 00:25:21.480
you can have an associated press style number. I guess this must be the way they're

00:25:21.480 --> 00:25:27.560
the convention when you're writing articles on how to speak about numbers. So if it's a small number, use

00:25:29.240 --> 00:25:36.760
written out words like F I V E for five. But if it's, you know, one zero zero one two one seven,

00:25:36.760 --> 00:25:40.520
you don't, you don't write that out as a huge long thing. You just put the straight number. Right.

00:25:41.160 --> 00:25:48.920
So I think the cutoff is 10, which is pretty cool. It has clamp. And so you can talk about percentiles.

00:25:48.920 --> 00:25:56.040
For example, if you say a really, really small number and you say the floor is 0.01%,

00:25:57.000 --> 00:26:02.920
it'll, or just that number as a ratio, it'll say the number that you have for this, the value is less

00:26:02.920 --> 00:26:05.480
than 0.01. Oh, nice.

00:26:06.120 --> 00:26:11.560
Or you can do it as a percent here. And then you say this one, this particular value is greater than 99%

00:26:11.560 --> 00:26:18.760
or it's in the top 10%. Or you can just say like under 1 million, which is pretty awesome. Right?

00:26:18.760 --> 00:26:18.840
Yeah.

00:26:18.840 --> 00:26:19.560
Yeah.

00:26:19.560 --> 00:26:24.600
Yeah. So what else have we got here? Fractional. So this just takes, you know,

00:26:24.600 --> 00:26:28.680
floating point numbers and puts them into fractions like one and three tenths or one and a third or

00:26:28.680 --> 00:26:35.880
something like that. Int comma, this one, I would just do with formatting, but you can have it put commas

00:26:35.880 --> 00:26:44.120
in for separators. Int word, this one is really nice. So if I have one with seven zeros, it'll say 1.0

00:26:44.120 --> 00:26:53.640
million or if you put in 1.2 billion, but as like integers, it'll just say 1.2 billion or all kinds

00:26:53.640 --> 00:27:00.520
of things. You can give it precisions, et cetera. Nice. Right? It's very cool. I like the scientific

00:27:00.520 --> 00:27:07.720
stuff. The scientific is good. The metric, this is really nice. If you give it a base measurement,

00:27:08.680 --> 00:27:15.960
like Watts or grams or something. And then you say, give me this number in that unit system. So for

00:27:15.960 --> 00:27:24.840
example, if you say 1500 in terms of volts, it'll give you 1.5 kilovolts. That's pretty fancy. Yeah.

00:27:24.840 --> 00:27:30.440
Or Watts and you give it some huge number or say this many megawatts or really, really small one micro.

00:27:30.440 --> 00:27:35.320
I don't know what F is in metric because to me, that's Fahrenheit. So whatever.

00:27:35.320 --> 00:27:44.360
And the micro stuff is cool because I always have to hunt it down. I have no idea how to type a micro symbol.

00:27:44.360 --> 00:27:54.600
Yeah. So click to the scientific one or the 10 to the powers are pretty cool. The 10 to the minus one

00:27:54.600 --> 00:28:01.960
with a little superscript. That's neat. Yeah. Yeah. Instead of having 10 E three, it actually has 10 superscript

00:28:01.960 --> 00:28:08.680
three. So a thousand is one times 10 to the, you know, three with actual three, like you would write

00:28:08.680 --> 00:28:13.800
it, not the way computers have to write it. So yeah, it's really nice. Anyway, it's just, if you need this

00:28:13.800 --> 00:28:21.480
kind of stuff, really easy to adopt and understand. If not, then, you know, it's still interesting.

00:28:21.480 --> 00:28:25.240
However, if someone is out there looking to contribute to this project, I would say

00:28:25.240 --> 00:28:31.080
more examples, the numbers have awesome examples and all the other ones are kind of, you may or may

00:28:31.080 --> 00:28:35.160
not even know what it's going to do. So, Hey, let's get those some examples as a PR and

00:28:35.160 --> 00:28:37.480
ship them over to you guys. That'd be cool.

00:28:37.480 --> 00:28:38.200
Yeah.

00:28:38.200 --> 00:28:43.800
And, you know, documentation contributions are usually very welcome.

00:28:43.800 --> 00:28:47.800
So, yes, indeed. All right. Extras, Brian.

00:28:47.800 --> 00:28:54.920
I just have one extra. I wanted to shout out. So I talked about that. Python test podcast is going

00:28:54.920 --> 00:29:01.560
to go back to testing code, even though. So it is. So I finally finished that migration and actually

00:29:01.560 --> 00:29:10.600
put out an episode. So 222 is the 222 is the second episode of a two part series that started in June.

00:29:12.200 --> 00:29:20.440
Sorry. Serious cliffhanger. Serious cliffhanger. So, yeah. So that's there. And then I got a question.

00:29:20.440 --> 00:29:24.520
I sent out an email and said, Hey, finally, I have another episode out. And somebody said,

00:29:24.520 --> 00:29:30.760
you should do transcripts. And I guess I hadn't announced that, but transcripts are there. I've

00:29:30.760 --> 00:29:37.160
had transcripts in the last, I don't know, like the last 30 episodes or something. So transcripts are

00:29:37.160 --> 00:29:42.040
AI generated. So they're not perfect. Like, this is great. I got to find one of these.

00:29:42.040 --> 00:29:51.400
DB dot PI. That's fine. But there's like some, some dot pies that show up as dot PI and some dot PIE.

00:29:51.400 --> 00:29:59.800
It's some dot DB, like actually spelling out the DOT. This is terrible. Oh, API dot PIE. This is hilarious.

00:29:59.800 --> 00:30:06.440
So I could go through and try to fix this stuff, but I'm going to probably try to hire my kid to go do it

00:30:06.440 --> 00:30:13.160
for me. But anyway, so they're there. That's all I wanted to say is it's in it. I'm not doing this weekly.

00:30:13.560 --> 00:30:20.520
Um, I actually talked to, to a friend of mine, Michael Kennedy. and he said, he said,

00:30:20.520 --> 00:30:26.200
it'd be kind of cool to, to do seasons. And so I'm kicking around the idea of doing seasons.

00:30:26.200 --> 00:30:31.400
Yeah. Well, themes. I like it. I think it'd be great. Yeah. So anyway, that's just my extra.

00:30:31.400 --> 00:30:36.600
Awesome. I have a couple of quick, code in the castle event is almost

00:30:36.600 --> 00:30:42.920
over. It's almost, booked and happening. So if you want to be part of it, I'll put a link in there,

00:30:42.920 --> 00:30:49.560
please, last kind of last call. So check it out. Yeah, I know. All right. We got some

00:30:49.560 --> 00:30:57.880
interesting email. That's it. I think I covered the Anaconda code plugin for Excel, how it runs locally.

00:30:57.880 --> 00:31:05.880
It runs on PI script, all these good things. Cause you other features. Well, look who sent this

00:31:05.880 --> 00:31:11.800
in. I want to make sure I give some credits. This was by rude Vanderham. Thank you for sending this in.

00:31:11.800 --> 00:31:18.440
The sub project he created. And basically, and when you have these Excel,

00:31:18.440 --> 00:31:26.280
Python bits of code, you have to write all the code in one function and things like that. And there's

00:31:26.280 --> 00:31:32.280
other limitations as well. So basically he made it so you can have a lot more,

00:31:34.920 --> 00:31:40.920
formatting variability, I suppose. And then you just have this bit of code that will just run a whole

00:31:40.920 --> 00:31:47.080
set of different bits of code that you can have into your workbook, which is kind of interesting. So

00:31:47.080 --> 00:31:50.120
as a follow to that, people are interested, they can check that out.

00:31:50.120 --> 00:31:55.640
And just a quick out shout out to I stats menu. Do you I stats menu Brian for your Mac?

00:31:55.640 --> 00:32:04.440
No. If you want a real time stats for what your Mac is up to as they just released a new version,

00:32:04.440 --> 00:32:10.040
looks super cool. I'm just starting to play with it. So obvious things like CPU and stuff,

00:32:10.040 --> 00:32:15.160
but if you hover over them, it'll give you tons of detail. Like macOS is kind of hard to get a lot of

00:32:15.160 --> 00:32:23.400
these pieces of information, but it'll have uptime. It'll have like how much power your CPU is pulling

00:32:23.400 --> 00:32:27.640
out of, or your computer's pulling out of the wall, which is kind of interesting as a, you know, how

00:32:27.640 --> 00:32:33.880
hard is it working? Like how many Watts is it pulling? And so anyway, that's cool. That's cool. Yeah.

00:32:33.880 --> 00:32:35.480
People can check it out. It's pretty nice.

00:32:35.480 --> 00:32:38.840
Nice. Yeah.

00:32:39.560 --> 00:32:45.560
That is it. And do you want to close it out with a joke? Our big episode 400?

00:32:45.560 --> 00:32:46.440
Definitely.

00:32:46.440 --> 00:32:54.200
All right. So this is sort of in the theme of I'm learning new programming languages, right? Mostly

00:32:54.200 --> 00:32:59.880
as beginners says, comes from Dev Humor says, beginner programmers, when they learn a new programming

00:32:59.880 --> 00:33:05.320
language, just a shock. Is this Morty? I don't know. I think so. Anyway, well, that just sounds like

00:33:05.320 --> 00:33:15.320
Python with extra steps. Yeah. Yeah, exactly. Exactly. That's cool. But why all the stuff there?

00:33:15.320 --> 00:33:22.440
Anyway, thanks for episode 400. Thank you everyone for listening. Thank you, Scott APM for supporting

00:33:22.440 --> 00:33:29.080
the show. Check them out as well. Thank you. Yep. See you, Brian. Bye.

