WEBVTT

00:00:00.000 --> 00:00:07.640
>> Hey all. Hey Brian. >> Hey. >> Looking forward to another show as always.


00:00:07.640 --> 00:00:11.120
>> Yeah, me too. >> Happy to see some folks out in the audience,


00:00:11.120 --> 00:00:15.360
the live stream. Thanks for being here. And if you're watching later, also thanks for


00:00:15.360 --> 00:00:20.440
that. So with that, let's kick it off, huh? >> Yeah. >> Hello and welcome to Python Bytes


00:00:20.440 --> 00:00:28.160
where we deliver Python news and headlines directly to your buds. This is episode 350,


00:00:28.160 --> 00:00:32.660
August 29th, 2023. And I'm Michael Kennedy.


00:00:32.660 --> 00:00:34.620
- And I'm Brian Okken.


00:00:34.620 --> 00:00:37.260
- And this episode is brought to you by Sentry.


00:00:37.260 --> 00:00:39.760
Make sure those errors don't go unnoticed


00:00:39.760 --> 00:00:42.560
and you get to them quickly with the right information.


00:00:42.560 --> 00:00:46.420
Check them out at pythonbytes.fm/sentry.


00:00:46.420 --> 00:00:48.260
We'll tell you more about them later.


00:00:48.260 --> 00:00:50.820
And of course, connect with us over on Mastodon


00:00:50.820 --> 00:00:53.760
@mkennedy, @brianokken@pythonbytes,


00:00:53.760 --> 00:00:55.740
all at fosstodon.org.


00:00:55.740 --> 00:00:57.340
And if you want to be part of the live stream,


00:00:57.340 --> 00:00:58.540
part of the live audience.


00:00:58.540 --> 00:01:01.960
That's usually on Tuesdays, 11 AM Pacific time,


00:01:01.960 --> 00:01:03.980
as we are recording today.


00:01:03.980 --> 00:01:06.980
So if you can drop by and be part of the show,


00:01:06.980 --> 00:01:08.020
we would love that.


00:01:08.020 --> 00:01:11.220
If not, well, thanks for listening anyway.


00:01:11.220 --> 00:01:13.460
Brian, let's kick this off.


00:01:13.460 --> 00:01:16.100
All right.


00:01:16.100 --> 00:01:17.620
Oh, I had to stream.


00:01:17.620 --> 00:01:19.300
There we go.


00:01:19.300 --> 00:01:23.540
So just a quick little article from Bob Belderbos


00:01:23.540 --> 00:01:26.140
to remind us to keep things simple.


00:01:26.140 --> 00:01:29.820
And there's a lot of ways in Python


00:01:29.820 --> 00:01:31.980
where you can make elegant looking code,


00:01:31.980 --> 00:01:34.160
but it also is easier to read.


00:01:34.160 --> 00:01:37.080
And that's, I think, some of the emphasis.


00:01:37.080 --> 00:01:41.540
So Bob from PyBytes, and they see a lot of,


00:01:41.540 --> 00:01:42.700
they've got all those challenges.


00:01:42.700 --> 00:01:45.800
So I'm sure they see a lot of examples


00:01:45.800 --> 00:01:49.160
of like not quite elegant code, but it does the trick.


00:01:49.160 --> 00:01:52.060
So I think this is good advice from a good person.


00:01:52.060 --> 00:01:55.460
So like, and there's just a whole,


00:01:55.460 --> 00:01:57.500
but there's just a handful of these here,


00:01:57.500 --> 00:01:58.980
but they're all really good things.


00:01:58.980 --> 00:02:03.180
Like for instance, using the keyword all,


00:02:03.180 --> 00:02:06.060
I don't use that much, but here's an example.


00:02:06.060 --> 00:02:09.580
He's got a function where he wants to know


00:02:09.580 --> 00:02:14.580
if all things in a list are divisible by some number.


00:02:14.580 --> 00:02:22.780
And there's like a function he wrote


00:02:22.780 --> 00:02:27.080
with just like a for loop


00:02:27.080 --> 00:02:28.620
that goes through the whole thing.


00:02:28.620 --> 00:02:33.620
However, he rewrote it as a, what is that called?


00:02:33.620 --> 00:02:39.180
It uses all, but it's comprehension, I believe.


00:02:39.180 --> 00:02:43.580
So all numbers divided by divisor equals zero


00:02:43.580 --> 00:02:44.900
for divisor and divisors.


00:02:44.900 --> 00:02:45.740
So it's kind of neat.


00:02:45.740 --> 00:02:48.140
- I think it actually might be a generator.


00:02:48.140 --> 00:02:49.140
- Is it a generator?


00:02:49.140 --> 00:02:51.100
- I think it might be, but yeah,


00:02:51.100 --> 00:02:52.900
- When it's passed as an argument,


00:02:52.900 --> 00:02:55.660
the parentheses don't really tell you which it is, does it?


00:02:55.660 --> 00:02:57.060
- It doesn't, yeah.


00:02:57.060 --> 00:02:59.080
- I'm gonna find that out for us.


00:02:59.080 --> 00:03:03.380
- Pretty cool to use that generator or whatever


00:03:03.380 --> 00:03:08.380
in as an argument to a function, that's pretty slick.


00:03:08.380 --> 00:03:12.500
And it's pretty easy to read still, I think.


00:03:12.500 --> 00:03:15.220
I still think maybe, well, with the function name,


00:03:15.220 --> 00:03:17.220
you kind of get what it's going at,


00:03:17.220 --> 00:03:19.920
but if it was out of scope of a function,


00:03:19.920 --> 00:03:22.740
both of these methods would have used a,


00:03:22.740 --> 00:03:25.900
could use a comment here or there.


00:03:25.900 --> 00:03:28.280
Dictionary lookups, I love this part.


00:03:28.280 --> 00:03:29.380
I use it all the time.


00:03:29.380 --> 00:03:33.080
Dictionary has a get function.


00:03:33.080 --> 00:03:37.300
So normally you reference a key in a dictionary


00:03:37.300 --> 00:03:39.480
with just brackets,


00:03:39.480 --> 00:03:43.220
but if you want to make, have some default value,


00:03:43.220 --> 00:03:45.600
if it's not there, use get instead.


00:03:45.600 --> 00:03:49.800
So you grab a key and then the second value is the value.


00:03:49.800 --> 00:03:53.640
Anyway, this saves a lot of code


00:03:53.640 --> 00:03:57.640
because I do this all the time for dictionary lookups.


00:03:57.640 --> 00:03:59.760
And then it goes through quite a few others.


00:03:59.760 --> 00:04:01.160
Just it's a good list.


00:04:01.160 --> 00:04:02.600
We've got list comprehensions.


00:04:02.600 --> 00:04:04.000
Don't forget those.


00:04:04.000 --> 00:04:05.260
List comprehensions are wonderful.


00:04:05.260 --> 00:04:06.280
We both love those.


00:04:06.280 --> 00:04:08.920
Looking for unique values.


00:04:08.920 --> 00:04:10.560
This one I had to look at for a while.


00:04:10.560 --> 00:04:11.960
It was interesting.


00:04:11.960 --> 00:04:13.200
If you're looking,


00:04:13.200 --> 00:04:15.680
I actually didn't understand the first one that well,


00:04:15.680 --> 00:04:20.160
but making sure that all items in a set


00:04:20.160 --> 00:04:24.800
or items in a something are unique by taking the length


00:04:24.800 --> 00:04:27.640
and then doing a set of items and then like,


00:04:27.640 --> 00:04:32.640
anyway, just lots of fun tricks to shorten your code


00:04:32.640 --> 00:04:36.760
and make it a little more readable.


00:04:36.760 --> 00:04:39.200
- I love it.


00:04:39.200 --> 00:04:41.720
There's all these non-obvious ways, you know, counter.


00:04:41.720 --> 00:04:44.080
I know Bob is a big fan of the counter last,


00:04:44.080 --> 00:04:47.480
But yeah, that's a really slick way to--


00:04:47.480 --> 00:04:48.880
- What is he trying to do with this last one?


00:04:48.880 --> 00:04:49.720
Counting things.


00:04:49.720 --> 00:04:52.120
Yeah, counters, counters pretty cool.


00:04:52.120 --> 00:04:54.960
- If you've got a paragraph or like some text


00:04:54.960 --> 00:04:57.120
and you wanna say which words appear


00:04:57.120 --> 00:04:58.880
and then how frequently do they appear,


00:04:58.880 --> 00:05:03.880
you could split on space and throw away the punctuation.


00:05:03.880 --> 00:05:04.880
- Yeah.


00:05:04.880 --> 00:05:07.520
- And like just basically a couple of lines,


00:05:07.520 --> 00:05:11.040
right, sentence dot split, and that's it.


00:05:11.040 --> 00:05:11.880
And then you count that.


00:05:11.880 --> 00:05:12.700
It's awesome.


00:05:12.700 --> 00:05:13.540
It says, you know, this word appeared


00:05:13.540 --> 00:05:14.980
many times and even sorts it.


00:05:14.980 --> 00:05:16.840
Yeah, that's pretty cool.


00:05:16.840 --> 00:05:17.420
Yeah.


00:05:17.420 --> 00:05:25.000
And it's just like, did sentence dot lower dot split and then throw it into a counter.


00:05:25.000 --> 00:05:26.540
Interesting.


00:05:26.540 --> 00:05:29.020
Pretty cool.


00:05:29.020 --> 00:05:29.700
Interesting.


00:05:29.700 --> 00:05:30.420
Indeed.


00:05:30.420 --> 00:05:36.820
Also interesting is it turns out that is in fact a generator that comes out of that.


00:05:36.820 --> 00:05:41.660
I did a little quick REPL action on it for some real time follow up there.


00:05:41.660 --> 00:05:42.700
Cool.


00:05:42.700 --> 00:05:43.220
Yeah.


00:05:43.260 --> 00:05:44.100
- Yeah.


00:05:44.100 --> 00:05:46.940
- All right, the first one I wanna cover today


00:05:46.940 --> 00:05:51.660
comes from a foundational element of Scrapy.


00:05:51.660 --> 00:05:56.540
So Scrapy is the project around


00:05:56.540 --> 00:05:59.300
extracting data from websites in a fast, cool way.


00:05:59.300 --> 00:06:02.260
You've got scrapy.org, you've got Scrapy itself.


00:06:02.260 --> 00:06:06.100
But the thing I wanna highlight is Parcel.


00:06:06.100 --> 00:06:08.580
You've probably heard of Beautiful Soup,


00:06:08.580 --> 00:06:11.820
and Beautiful Soup has been around for a really long time,


00:06:11.820 --> 00:06:13.860
and is quite excellent.


00:06:13.860 --> 00:06:15.900
But I was looking for something,


00:06:15.900 --> 00:06:18.260
you know, is there something kind of newer


00:06:18.260 --> 00:06:22.260
that's got some new paradigms, just to try out basically.


00:06:22.260 --> 00:06:24.860
And I ran across Parcel, and it being the foundation


00:06:24.860 --> 00:06:27.220
of Scrapy, kind of gives it some street cred.


00:06:27.220 --> 00:06:33.420
So, Parcel lets you extract data from XML and HTML documents.


00:06:33.420 --> 00:06:37.140
So the fact that it's XML as well,


00:06:37.140 --> 00:06:42.140
because I was working with some RSS data for some things.


00:06:42.140 --> 00:06:47.660
And you can do either CSS selectors, which are my favorite,


00:06:47.660 --> 00:06:49.680
but sometimes you gotta get things


00:06:49.680 --> 00:06:51.900
that CSS doesn't really easily,


00:06:51.900 --> 00:06:52.960
make it easy for you to get,


00:06:52.960 --> 00:06:54.820
so you can use XPath as well.


00:06:54.820 --> 00:06:56.780
It also works on JSON, I believe,


00:06:56.780 --> 00:07:00.020
even though the description doesn't say so.


00:07:00.020 --> 00:07:01.780
Yeah, JSON as well.


00:07:01.780 --> 00:07:04.980
So the CSS in XPath is for HTML and XML,


00:07:04.980 --> 00:07:07.860
and it use jmespath,


00:07:07.860 --> 00:07:11.940
j-m-e-s-e-path expressions for JSON documents,


00:07:11.940 --> 00:07:13.320
which lets you say,


00:07:13.320 --> 00:07:14.720
I've got some big structure,


00:07:14.720 --> 00:07:19.220
so I want to navigate in like you would with a CSS selector.


00:07:19.220 --> 00:07:22.640
Show me all the paragraphs and then get the images and get


00:07:22.640 --> 00:07:24.580
the title of the image out of


00:07:24.580 --> 00:07:27.080
every paragraph on the page no matter how it's structured.


00:07:27.080 --> 00:07:29.780
You can do that with this thing for JSON as well,


00:07:29.780 --> 00:07:31.080
which is pretty awesome.


00:07:31.080 --> 00:07:33.920
Instead of traversing it all over.


00:07:33.920 --> 00:07:38.920
If you want two problems, you can try to solve it with one, with regular expressions.


00:07:38.920 --> 00:07:41.520
Here, I'll give you a quick example.


00:07:41.520 --> 00:07:45.800
If you pull up the page, it says, okay, we're going to take some text.


00:07:45.800 --> 00:07:52.400
The text has a body, an H1, an unordered list, list items in there.


00:07:52.400 --> 00:07:53.880
Those list items are hyperlinks.


00:07:53.880 --> 00:07:57.500
The hyperlinks have URLs and have text.


00:07:57.500 --> 00:08:01.000
There's also some JSON in this thing.


00:08:01.000 --> 00:08:06.360
So if you just create a new selector object, you can say h1 colon colon text, and that


00:08:06.360 --> 00:08:14.540
is a CSS way to speak about the context, the content of that, and that pulls just the value


00:08:14.540 --> 00:08:16.020
out of there.


00:08:16.020 --> 00:08:20.300
So hi, parcel, or hello, parcel is the text inside h1.


00:08:20.300 --> 00:08:23.580
So that simple little selector is a real simple example.


00:08:23.580 --> 00:08:25.540
So maybe it doesn't totally win you over.


00:08:25.540 --> 00:08:30.540
but in a real true complicated HTML document,


00:08:30.540 --> 00:08:32.420
it would be quite awesome.


00:08:32.420 --> 00:08:34.780
They also show how to do that with XPath.


00:08:34.780 --> 00:08:36.060
I don't know XPath very well,


00:08:36.060 --> 00:08:38.580
and then run a regular expression against it


00:08:38.580 --> 00:08:40.760
to break that into pieces.


00:08:40.760 --> 00:08:41.600
That's pretty intense.


00:08:41.600 --> 00:08:42.580
I'm not necessarily doing it,


00:08:42.580 --> 00:08:44.140
but you can do things like, for example,


00:08:44.140 --> 00:08:47.380
I want all the LIs that are only appearing


00:08:47.380 --> 00:08:50.820
in unordered lists, not the ordered list ones.


00:08:50.820 --> 00:08:54.580
So you can say ul greater than li,


00:08:54.580 --> 00:08:56.780
and the greater than means immediate child


00:08:56.780 --> 00:09:00.220
of not somewhere in the hierarchy.


00:09:00.220 --> 00:09:01.820
So you just do that CSS selector


00:09:01.820 --> 00:09:03.180
and it gives you an iterable,


00:09:03.180 --> 00:09:04.300
it gives you all the list elements


00:09:04.300 --> 00:09:07.700
that you can pull out the hyperlinks out of both of those


00:09:07.700 --> 00:09:10.260
by doing slash slash at href, right?


00:09:10.260 --> 00:09:13.580
To grab that out of the thing that comes back.


00:09:13.580 --> 00:09:15.340
And you can also do similar stuff


00:09:15.340 --> 00:09:19.660
for the XML that's in here.


00:09:19.660 --> 00:09:23.080
So you can say, just go find me the thing


00:09:23.080 --> 00:09:24.940
that has the name A no matter where it appears


00:09:24.940 --> 00:09:27.380
in the document or give me all the items


00:09:27.380 --> 00:09:29.260
to the list and so on, pretty cool.


00:09:29.260 --> 00:09:33.460
Again, really simple example, but quite a neat little tool.


00:09:33.460 --> 00:09:35.300
- I definitely need this.


00:09:35.300 --> 00:09:36.140
- Yeah?


00:09:36.140 --> 00:09:39.260
- Yeah, I've got some HTML and parsing that are,


00:09:39.260 --> 00:09:40.980
it's not well-structured stuff.


00:09:40.980 --> 00:09:44.420
It's like, you know, generated from some CMS thing


00:09:44.420 --> 00:09:48.720
and there's no identifiers anywhere.


00:09:48.720 --> 00:09:50.260
There's hardly any classes.


00:09:50.260 --> 00:09:54.860
It just is like purely generated garb, div nightmares.


00:09:54.860 --> 00:09:55.860
(laughing)


00:09:55.860 --> 00:10:00.180
And yeah, and it'll still be lucky


00:10:00.180 --> 00:10:01.740
if I can find what I'm looking for


00:10:01.740 --> 00:10:03.180
with something like this.


00:10:03.180 --> 00:10:04.020
(laughing)


00:10:04.020 --> 00:10:05.660
- Yeah, but it'll help, right?


00:10:05.660 --> 00:10:07.180
- Yeah, yeah.


00:10:07.180 --> 00:10:08.300
That's pretty cool. - Give me.


00:10:08.300 --> 00:10:10.140
I'll see if I can pull up one more example real quick.


00:10:10.140 --> 00:10:11.700
Hold on, let it appear.


00:10:11.700 --> 00:10:13.480
Must appear, I just screenshot it.


00:10:13.480 --> 00:10:15.740
Also in our notes here, I put,


00:10:15.740 --> 00:10:19.740
"The way to get an RSS feed out of a standard webpage."


00:10:19.740 --> 00:10:21.740
So how would you normally do that?


00:10:21.740 --> 00:10:24.860
You would go get the HTML, then you go to the head section.


00:10:24.860 --> 00:10:27.060
And in the head section, there's a bunch of links.


00:10:27.060 --> 00:10:28.740
They mean different things.


00:10:28.740 --> 00:10:34.340
One of them would have the rel type as--


00:10:34.340 --> 00:10:35.780
what is that?


00:10:35.780 --> 00:10:36.500
I can't remember.


00:10:36.500 --> 00:10:39.980
It's like additional or something like that.


00:10:39.980 --> 00:10:44.340
No, that's the rel.


00:10:44.340 --> 00:10:46.980
And then the rel type is something like RSS,


00:10:46.980 --> 00:10:50.580
application plus RSS or whatever the MIME type is.


00:10:50.580 --> 00:10:52.340
So you can just grab those things,


00:10:52.340 --> 00:10:54.400
just say head greater than link.


00:10:54.400 --> 00:10:58.420
Use a little XPath to grab the attributes


00:10:58.420 --> 00:11:00.860
out of the selector or out of the result


00:11:00.860 --> 00:11:02.060
and find which one of those


00:11:02.060 --> 00:11:04.020
and then you've got the URL which is


00:11:04.020 --> 00:11:07.140
where the RSS feed is.


00:11:07.140 --> 00:11:08.780
Like if you're looking,


00:11:08.780 --> 00:11:10.780
if you're writing like a blog engine


00:11:10.780 --> 00:11:12.160
and somebody puts in the domain


00:11:12.160 --> 00:11:13.740
but not the actual RSS entry,


00:11:13.740 --> 00:11:15.780
you could get that page,


00:11:15.780 --> 00:11:20.100
find the RSS entry automatically for them and go on with just a couple lines of code.


00:11:20.100 --> 00:11:21.100
That's pretty cool.


00:11:21.100 --> 00:11:22.100
Very neat.


00:11:22.100 --> 00:11:23.100
Yeah.


00:11:23.100 --> 00:11:24.100
All right.


00:11:24.100 --> 00:11:25.100
What you got next for us?


00:11:25.100 --> 00:11:26.100
Oh, wait.


00:11:26.100 --> 00:11:32.940
Before we move on, Brian, before we move on, let me tell everyone about our sponsor.


00:11:32.940 --> 00:11:38.140
So as I said at the beginning, Sentry is sponsoring this episode and the next.


00:11:38.140 --> 00:11:44.300
So to support the show, it really, really helps if you go and if you're considering


00:11:44.300 --> 00:11:51.820
getting error monitoring or tracing for your application, check out pythonbytes.fm/sentry.


00:11:51.820 --> 00:11:57.180
Yes, you can Google them. We know you can just Google them and sign up. But if you use the code


00:11:57.180 --> 00:12:03.820
pythonbytes or just use the link and click, what is it down here? Try Sentry for free. Then it'll


00:12:03.820 --> 00:12:07.820
apply that code automatically, which will then let them know, "Hey, it's a good idea to sponsor


00:12:07.820 --> 00:12:13.420
the show." So let me tell you about them. So if you want to remove a little bit of stress from


00:12:13.420 --> 00:12:15.460
from your life, if you're worried about errors


00:12:15.460 --> 00:12:18.380
on your website or errors your users are running into


00:12:18.380 --> 00:12:20.460
that you might not even know about,


00:12:20.460 --> 00:12:24.060
you might want to install something like Sentry.


00:12:24.060 --> 00:12:27.980
So if you're waiting for your users to send you an email


00:12:27.980 --> 00:12:30.100
saying, "Hey, I'm running into this problem."


00:12:30.100 --> 00:12:31.980
How many of them got frustrated?


00:12:31.980 --> 00:12:34.860
What was their opinion of your app or your website


00:12:34.860 --> 00:12:35.940
or your API?


00:12:35.940 --> 00:12:37.740
Probably not great.


00:12:37.740 --> 00:12:40.180
How much better it would be if you had error


00:12:40.180 --> 00:12:42.780
or performance details immediately sent to you,


00:12:42.780 --> 00:12:44.800
including things like the call stack,


00:12:44.800 --> 00:12:47.800
the values of the local variables in that call stack,


00:12:47.800 --> 00:12:49.900
the active user who was logged in,


00:12:49.900 --> 00:12:51.380
let's say their email address,


00:12:51.380 --> 00:12:52.660
all in some report and you're like,


00:12:52.660 --> 00:12:54.100
oh, here's the problem,


00:12:54.100 --> 00:12:55.840
here's the data I gotta pass to it


00:12:55.840 --> 00:12:57.700
to write a unit test to reproduce it


00:12:57.700 --> 00:12:59.660
so I make sure it doesn't happen again.


00:12:59.660 --> 00:13:02.740
And here's the email of the user who I email and tell them,


00:13:02.740 --> 00:13:04.620
sorry, we fixed it.


00:13:04.620 --> 00:13:05.460
I know you didn't tell us,


00:13:05.460 --> 00:13:06.860
but we found out anyway,


00:13:06.860 --> 00:13:07.940
'cause we use Sentry.


00:13:07.940 --> 00:13:11.060
So with Sentry, it's not only possible, it's simple.


00:13:11.060 --> 00:13:12.140
We use it on Python bytes,


00:13:12.140 --> 00:13:13.060
use it on Talk Python.


00:13:13.060 --> 00:13:14.720
We use it in the Talk Python mobile apps.


00:13:14.720 --> 00:13:18.140
There's a way to just plug it right into Flutter as well.


00:13:18.140 --> 00:13:18.980
- Nice.


00:13:18.980 --> 00:13:20.460
- So pretty awesome.


00:13:20.460 --> 00:13:23.420
And once I did exactly that,


00:13:23.420 --> 00:13:25.580
we had some user on Talk Python Training,


00:13:25.580 --> 00:13:27.380
they ran into a problem.


00:13:27.380 --> 00:13:30.100
I got a notification, I saw who it was, I fixed it.


00:13:30.100 --> 00:13:30.940
Send them a message, said,


00:13:30.940 --> 00:13:32.760
"Hey, here's the problem, it's fixed."


00:13:32.760 --> 00:13:34.340
They said, "I was about to write you.


00:13:34.340 --> 00:13:36.100
That's weird, but thank you."


00:13:36.100 --> 00:13:36.940
That's awesome.


00:13:36.940 --> 00:13:37.760
(laughing)


00:13:37.760 --> 00:13:38.780
That was a really great email to write.


00:13:38.780 --> 00:13:40.060
Yeah, it was really cool.


00:13:40.060 --> 00:13:42.640
So if you want to have that kind of superpower


00:13:42.640 --> 00:13:47.700
for your web apps, your APIs, mobile apps, whatever,


00:13:47.700 --> 00:13:48.420
check out Sentry.


00:13:48.420 --> 00:13:50.180
So surprise and delight your users.


00:13:50.180 --> 00:13:53.220
Create your Sentry account at pythonbytes.fm/sentry.


00:13:53.220 --> 00:13:56.740
And be sure to sign up with the code pythonbytes, all one word.


00:13:56.740 --> 00:13:59.660
It's good for two months of upgraded options


00:13:59.660 --> 00:14:01.300
for their Sentry business plan, which


00:14:01.300 --> 00:14:03.620
will give you 20 times as many monthly events,


00:14:03.620 --> 00:14:04.900
as well as some other features.


00:14:04.900 --> 00:14:08.780
So thank you to Sentry for sponsoring our show.


00:14:08.780 --> 00:14:14.100
>> Cool. Yeah. Brian, now over to you.


00:14:14.100 --> 00:14:17.260
>> Well, I want to talk about StructLog.


00:14:17.260 --> 00:14:19.420
I'm pretty sure we've covered it before.


00:14:19.420 --> 00:14:26.820
StructLog is a pretty cool way to do some logging in your Python,


00:14:26.820 --> 00:14:28.820
especially if you're logging from


00:14:28.820 --> 00:14:32.980
multiple services or multiple threads.


00:14:32.980 --> 00:14:35.700
It's really great because you can add


00:14:35.700 --> 00:14:38.180
extra detail and it's got coloring and stuff.


00:14:38.180 --> 00:14:42.640
>> StruckLog has some pretty good documentation already,


00:14:42.640 --> 00:14:46.620
which I love and it's a beautiful tool.


00:14:46.620 --> 00:14:49.620
However, I wanted to highlight a new article I saw,


00:14:49.620 --> 00:14:52.780
and it really is pretty fun.


00:14:52.780 --> 00:14:54.540
>> Wait, hold on, go back real quick.


00:14:54.540 --> 00:14:58.740
Is the icon logo of StruckLog,


00:14:58.740 --> 00:15:02.060
is that like Geordi from Star Trek but a beaver?


00:15:02.060 --> 00:15:03.340
>> I think so.


00:15:03.340 --> 00:15:04.500
>> I'm not sure.


00:15:04.500 --> 00:15:05.140
>> All right.


00:15:05.140 --> 00:15:05.940
>> Okay.


00:15:05.940 --> 00:15:07.660
>> He's holding two brackets.


00:15:07.660 --> 00:15:08.660
It's so good.


00:15:08.660 --> 00:15:11.460
>> Our curly braces.


00:15:11.460 --> 00:15:14.180
So the article I wanted to look at was


00:15:14.180 --> 00:15:17.300
a comprehensive guide to Python logging with StructLog.


00:15:17.300 --> 00:15:21.580
One of the things I loved about it was just the beginning example.


00:15:21.580 --> 00:15:25.660
There's a beautiful picture of a whole bunch of logged items.


00:15:25.660 --> 00:15:31.940
But what I liked was just the starting one that just said,


00:15:31.940 --> 00:15:35.340
"Hey, all you have to do is do pip installs StructLog."


00:15:35.340 --> 00:15:40.340
And then if you wanna just start trying it,


00:15:40.340 --> 00:15:42.920
it's just a better logger than you're used to.


00:15:42.920 --> 00:15:47.580
So import struct log, do logger struct log get logger,


00:15:47.580 --> 00:15:50.340
and then you use it just like you normally would,


00:15:50.340 --> 00:15:54.820
logger info, and then you can just,


00:15:54.820 --> 00:15:56.780
here's an example, you can do debug info,


00:15:56.780 --> 00:15:59.180
warning error, critical, all that sort of stuff.


00:15:59.180 --> 00:16:03.420
This is a big article talking about the different ways


00:16:03.420 --> 00:16:08.420
You can set it up with, you can set the default logging level,


00:16:08.420 --> 00:16:11.500
you can configure it, you can set it up for different,


00:16:11.500 --> 00:16:14.100
have different loggers on different applications


00:16:14.100 --> 00:16:17.260
or different services, different formatting,


00:16:17.260 --> 00:16:18.960
you can have different renderers.


00:16:18.960 --> 00:16:20.760
That's all awesome.


00:16:20.760 --> 00:16:22.840
And I'm really glad that it walks through that.


00:16:22.840 --> 00:16:27.740
But what I really like was just this basic tutorial of,


00:16:27.740 --> 00:16:30.660
hey, just do this, do the get logger


00:16:30.660 --> 00:16:32.100
and then just log stuff.


00:16:32.100 --> 00:16:34.620
and you get this beautiful output.


00:16:34.620 --> 00:16:38.220
- Yeah, the color and the weight and alignment


00:16:38.220 --> 00:16:41.220
of all the output is really awesome there.


00:16:41.220 --> 00:16:43.220
So often you like, okay, you wanna do logging?


00:16:43.220 --> 00:16:45.340
Well, okay, so what you do is you set up the logger,


00:16:45.340 --> 00:16:47.140
then you register an output.


00:16:47.140 --> 00:16:52.140
So let's create a standard out stream writer thing


00:16:52.140 --> 00:16:54.580
and then we can push that into it.


00:16:54.580 --> 00:16:57.100
And if you don't do that, then no output shows up.


00:16:57.100 --> 00:16:58.740
You're like, what is going on here?


00:16:58.740 --> 00:17:00.540
Why is this not working?


00:17:00.540 --> 00:17:01.860
Yeah, this is really nice.


00:17:01.860 --> 00:17:04.300
- This does, so it does show the beauty of struct log


00:17:04.300 --> 00:17:05.980
that you can get started really fast.


00:17:05.980 --> 00:17:07.500
It has a lot of complexity


00:17:07.500 --> 00:17:09.660
and it's really not that complicated.


00:17:09.660 --> 00:17:12.260
And like I said, the documentation is awesome


00:17:12.260 --> 00:17:16.560
and configuring it and everything is not that hard,


00:17:16.560 --> 00:17:18.500
but it's a new tool.


00:17:18.500 --> 00:17:23.300
So it's great that it's an easy way to get on board with it,


00:17:23.300 --> 00:17:26.180
start using it, start having these great logs.


00:17:26.180 --> 00:17:29.740
And both it can be for going to output,


00:17:29.740 --> 00:17:32.380
but also you can log to files of course.


00:17:32.380 --> 00:17:35.480
And great tool and I love this tutorial


00:17:35.480 --> 00:17:37.140
that starts super easy


00:17:37.140 --> 00:17:39.020
and then gets into the more complex.


00:17:39.020 --> 00:17:40.500
So check it out.


00:17:40.500 --> 00:17:42.380
- Excellent, excellent.


00:17:42.380 --> 00:17:43.660
- What you got for us?


00:17:43.660 --> 00:17:46.040
- The last one of the main ones.


00:17:46.040 --> 00:17:49.340
This one comes to us from Matias Bach


00:17:49.340 --> 00:17:51.060
and it's created by Henek.


00:17:51.060 --> 00:17:55.260
And I mentioned it before and it's stamina,


00:17:55.260 --> 00:17:56.980
but I didn't know too much about it.


00:17:56.980 --> 00:17:58.540
There were some questions in the audience,


00:17:58.540 --> 00:18:02.700
like how does it relate to tenacity and other things, right?


00:18:02.700 --> 00:18:04.540
So I thought, all right, this is a cool thing.


00:18:04.540 --> 00:18:05.860
I'll focus a little bit more.


00:18:05.860 --> 00:18:08.780
And it has direct StruckLog integration.


00:18:08.780 --> 00:18:11.580
How's that for a segue, Brian?


00:18:11.580 --> 00:18:14.540
- Yeah, well, I think StruckLog's a hinting thing too.


00:18:14.540 --> 00:18:16.620
- Yeah, perhaps it is.


00:18:16.620 --> 00:18:17.580
It seems like it would be.


00:18:17.580 --> 00:18:22.580
So with tenacity, the idea is you can put decorators


00:18:22.580 --> 00:18:27.140
and other things onto functions or operations


00:18:27.140 --> 00:18:28.300
and say if something goes wrong,


00:18:28.300 --> 00:18:32.780
try it again. That's the tenaciousness of that package, right? That like, yeah, errors


00:18:32.780 --> 00:18:40.960
will not stop me. But as Hennig describes it, that tenacity is great, but unopinionated.


00:18:40.960 --> 00:18:45.500
And you can work yourself into ways where you might be using it wrong or causing other


00:18:45.500 --> 00:18:52.060
sorts of, you know, infinite loop type of issues. Okay, so the idea is that stamina


00:18:52.060 --> 00:18:54.580
is an opinionated wrapper around Tenacity.


00:18:54.580 --> 00:18:56.220
So it's not a replacement for,


00:18:56.220 --> 00:19:00.540
but a simplified API for Tenacity


00:19:00.540 --> 00:19:03.000
with the goal of being as ergonomic as possible


00:19:03.000 --> 00:19:04.700
and doing the right thing by default


00:19:04.700 --> 00:19:07.860
with minimizing the potential for doing it wrong.


00:19:07.860 --> 00:19:10.980
So that's pretty cool.


00:19:10.980 --> 00:19:12.980
Basically, Annex says,


00:19:12.980 --> 00:19:14.500
he used to copy and paste


00:19:14.500 --> 00:19:16.500
the way he was working with Tenacity over and over.


00:19:16.500 --> 00:19:18.460
And wouldn't it be cool to just make a package


00:19:18.460 --> 00:19:21.340
that kind of embedded those ways of working with it.


00:19:21.340 --> 00:19:25.120
For example, instead of retrying on an exception,


00:19:25.120 --> 00:19:28.880
retry only on a certain exception,


00:19:28.880 --> 00:19:31.140
you know, a certain type of exception, right?


00:19:31.140 --> 00:19:36.060
I wanna retry only this only on database connection errors,


00:19:36.060 --> 00:19:39.140
not if there's a foreign key constraint error,


00:19:39.140 --> 00:19:41.080
because that's never gonna go away, right?


00:19:41.080 --> 00:19:43.240
That's always gonna be a problem with the data,


00:19:43.240 --> 00:19:45.160
but maybe the database will come back online.


00:19:45.160 --> 00:19:46.420
So let's retry that one.


00:19:46.420 --> 00:19:48.520
There's exponential backoff,


00:19:48.520 --> 00:19:50.660
which comes from tenacity as well.


00:19:50.660 --> 00:19:53.160
But what about with jitter between the retries?


00:19:53.160 --> 00:19:55.260
Instead of just going, I'm gonna go one second,


00:19:55.260 --> 00:19:56.360
three second, five seconds.


00:19:56.360 --> 00:19:59.560
Let's go one second, then three seconds-ish,


00:19:59.560 --> 00:20:02.380
then five seconds-ish, and so on.


00:20:02.380 --> 00:20:04.640
Limit the total number of retries.


00:20:04.640 --> 00:20:07.560
Limit the total amount of time, but all at once, right?


00:20:07.560 --> 00:20:11.300
So not just the number of retries, but the time and retries.


00:20:11.300 --> 00:20:15.280
And this one is very relevant to me right now.


00:20:15.280 --> 00:20:17.920
I've been thinking a lot about Python typing.


00:20:17.920 --> 00:20:18.800
Talk more about that later.


00:20:18.800 --> 00:20:23.800
But with type hints, you get things like mypy and PyCharm


00:20:23.800 --> 00:20:28.580
and other tools that say you're using this function


00:20:28.580 --> 00:20:30.440
correctly or you're using it wrong.


00:20:30.440 --> 00:20:34.020
And with the way the decorators work with stamina


00:20:34.020 --> 00:20:36.480
is it preserves type hint informations


00:20:36.480 --> 00:20:39.480
when you decorate a function that is type hinted.


00:20:39.480 --> 00:20:41.600
Honestly, I don't know how to do that,


00:20:41.600 --> 00:20:44.480
but I'm really glad that it like decorating a function


00:20:44.480 --> 00:20:46.600
with one of these retries doesn't wipe away


00:20:46.600 --> 00:20:49.400
its type information, that's super cool.


00:20:49.400 --> 00:20:54.400
It logs with struct log, retries with basic metadata


00:20:54.400 --> 00:20:56.200
if they happen to be installed.


00:20:56.200 --> 00:20:59.200
And you can, this one you might like, Brian,


00:20:59.200 --> 00:21:02.280
you can easily deactivate it with a fixture


00:21:02.280 --> 00:21:05.540
or something like that, or just globally


00:21:05.540 --> 00:21:08.760
for the whole test run so that you don't retry


00:21:08.760 --> 00:21:10.680
a thousand times while you're doing a unit test


00:21:10.680 --> 00:21:12.700
testing for an exception on purpose.


00:21:12.700 --> 00:21:16.040
- Yeah, that's great.


00:21:16.040 --> 00:21:19.080
Yeah, so super easy to work with.


00:21:19.080 --> 00:21:23.640
Just basically put a decorator, right?


00:21:23.640 --> 00:21:26.340
Stamina at stamina.retry, and in this case,


00:21:26.340 --> 00:21:30.260
you can say only on the HTTPX HTTP errors


00:21:30.260 --> 00:21:31.540
and only try it three times.


00:21:31.540 --> 00:21:33.260
That's pretty cool.


00:21:33.260 --> 00:21:34.660
- That's pretty great.


00:21:34.660 --> 00:21:37.420
- Yeah, so a lot more you can do.


00:21:37.420 --> 00:21:39.980
It's async by default, so you don't,


00:21:39.980 --> 00:21:43.380
you can just decorate an async def function,


00:21:43.380 --> 00:21:45.260
and it does that as well.


00:21:45.260 --> 00:21:46.780
So very, very cool.


00:21:46.780 --> 00:21:48.020
People should certainly check it out.


00:21:48.020 --> 00:21:49.620
And you can also see in the example,


00:21:49.620 --> 00:21:52.660
he's doing reveal type, which I believe comes from mypy.


00:21:52.660 --> 00:21:55.920
And you can reveal type on the example here,


00:21:55.920 --> 00:21:57.220
which is a decorated thing.


00:21:57.220 --> 00:21:59.720
And it shows you that what you get back


00:21:59.720 --> 00:22:04.720
is a coroutine of any, any, and the ACPX response,


00:22:04.720 --> 00:22:09.820
which is basically how it was set up to go, right?


00:22:09.820 --> 00:22:10.800
Set up to work, right?


00:22:10.800 --> 00:22:13.640
Input on an int, and then output on that type of thing.


00:22:14.940 --> 00:22:16.260
So I think it's a pretty cool library.


00:22:16.260 --> 00:22:18.340
It's something I will probably start using.


00:22:18.340 --> 00:22:21.700
I've previously used Tenacity, but you know, why not?


00:22:21.700 --> 00:22:24.180
- Yeah, looks pretty good.


00:22:24.180 --> 00:22:25.020
- Indeed.


00:22:25.020 --> 00:22:29.500
All right, that's it for our main items, isn't it?


00:22:29.500 --> 00:22:30.340
- Yeah.


00:22:30.340 --> 00:22:32.900
- Extras.


00:22:32.900 --> 00:22:34.340
What else have you gathered up?


00:22:34.340 --> 00:22:35.180
- I've got a few.


00:22:35.180 --> 00:22:38.100
Do you wanna run through, we'll run through mine first.


00:22:38.100 --> 00:22:39.380
- Let's do it.


00:22:39.380 --> 00:22:42.620
- So I have a, so the pytest check,


00:22:42.620 --> 00:22:44.660
it's a little pytest plugin I've got.


00:22:44.660 --> 00:22:49.660
I had this weird request and I guess I'm not sure how to deal with it.


00:22:49.660 --> 00:22:53.500
I was curious. I'd like to talk through it to see what,


00:22:53.500 --> 00:22:57.420
what the audience has to say. So somebody said, Hey,


00:22:57.420 --> 00:23:02.340
is it possible to start making GitHub releases? And, I mean, I do,


00:23:02.340 --> 00:23:07.660
I do versions. and so I was, wasn't sure what was going on here.


00:23:07.660 --> 00:23:08.580
And then I,


00:23:08.580 --> 00:23:12.100
and then I thought maybe this is one of those people that have done a lot of


00:23:12.100 --> 00:23:14.200
these requests on a lot of repos.


00:23:14.200 --> 00:23:19.940
So I searched for this issue and sure enough,


00:23:19.940 --> 00:23:26.620
there is 157 identical issues on different repos.


00:23:26.620 --> 00:23:28.540
>> Speaking of tenacity.


00:23:28.540 --> 00:23:32.980
>> Yeah. So my first reaction was,


00:23:32.980 --> 00:23:34.220
I don't want to do that,


00:23:34.220 --> 00:23:38.740
that's lame because they're just pushing work on other people.


00:23:38.740 --> 00:23:42.580
But also maybe it's okay.


00:23:42.580 --> 00:23:46.340
So the argument here is that somebody can say watch releases


00:23:46.340 --> 00:23:49.480
and then get notified if a new release happens


00:23:49.480 --> 00:23:52.720
and you can't do that with tags or something, I'm not sure.


00:23:52.720 --> 00:23:58.900
So my first reaction was I didn't want to deal with it.


00:23:58.900 --> 00:24:00.920
However, I think there's,


00:24:00.920 --> 00:24:04.700
oh, I don't have the tab up here,


00:24:04.700 --> 00:24:07.440
but I think there's some GitHub actions


00:24:07.440 --> 00:24:09.200
that can do this for me,


00:24:09.200 --> 00:24:11.160
if I'm just doing it by pushing a tag up,


00:24:11.160 --> 00:24:13.320
and if it could do it by itself,


00:24:13.320 --> 00:24:15.200
a few minutes worth of work,


00:24:15.200 --> 00:24:17.000
I'd like to know what other people


00:24:17.000 --> 00:24:18.240
are dealing with with that.


00:24:18.240 --> 00:24:23.180
If they've added GitHub releases to their project or not.


00:24:23.180 --> 00:24:25.280
Yeah, just curious.


00:24:25.280 --> 00:24:29.760
- What's a good venue for them to let you know about that?


00:24:29.760 --> 00:24:33.440
- Oh yeah, probably Fosstodon,


00:24:33.440 --> 00:24:35.760
Brian Okken at Fosstodon,


00:24:35.760 --> 00:24:40.160
or the show has a contact form, you can email us.


00:24:40.160 --> 00:24:41.580
So that would be good.


00:24:41.580 --> 00:24:44.360
Okay, so there's that.


00:24:44.360 --> 00:24:46.200
I threw it right across.


00:24:46.200 --> 00:24:48.880
Oh, maybe this is for funny things.


00:24:48.880 --> 00:24:51.120
We'll save that for later.


00:24:51.120 --> 00:24:52.460
- Not yet.


00:24:52.460 --> 00:24:54.480
- I just pushed up the fixtures chapter


00:24:54.480 --> 00:24:56.080
for the pytest course.


00:24:56.080 --> 00:24:58.880
And about the intro,


00:24:58.880 --> 00:25:01.000
the intro has got a nice slide deck in it.


00:25:01.000 --> 00:25:06.000
So check out the preview that's for chapter three,


00:25:06.000 --> 00:25:09.120
when you're thinking about the course.


00:25:09.120 --> 00:25:13.240
And I'm trying to describe how pytest fixtures


00:25:13.240 --> 00:25:15.720
work with like graphics, not really graphics,


00:25:15.720 --> 00:25:18.240
but slides and drawings and things like that.


00:25:18.240 --> 00:25:21.960
Those are my extras.


00:25:21.960 --> 00:25:22.800
How about you?


00:25:22.800 --> 00:25:25.560
- I've got a couple things for us.


00:25:25.560 --> 00:25:30.280
So first of all, there's a shiny new Python 3.12 to be had.


00:25:30.280 --> 00:25:35.280
And that was as of yesterday, 3.12 RC1.


00:25:35.280 --> 00:25:36.280
>> Neat.


00:25:36.280 --> 00:25:42.280
>> Yeah, release candidate's important because it's like we're really not changing it now.


00:25:42.280 --> 00:25:44.280
This is bug fixes.


00:25:44.280 --> 00:25:51.280
So if you've been thinking like, okay, there's more features for f-strings or there's this


00:25:51.280 --> 00:25:58.280
crazy thing that Eric Snow pulled off called the Per Interpreter Guild, that's pretty awesome.


00:25:58.280 --> 00:26:04.040
But for protocol, things are accessible in Python and many other things.


00:26:04.040 --> 00:26:06.720
If you were waiting around,


00:26:06.720 --> 00:26:07.920
these are all relevant to me,


00:26:07.920 --> 00:26:11.440
I want to try them out, but I don't want to mess with stuff that might go away,


00:26:11.440 --> 00:26:13.960
might change, I'm just going to wait because I'm


00:26:13.960 --> 00:26:15.880
not really going to use it until it comes out in October.


00:26:15.880 --> 00:26:20.360
Well, should be about time to start looking into it with a release candidate.


00:26:20.360 --> 00:26:23.480
That's why this is double noteworthy.


00:26:23.480 --> 00:26:26.320
>> Yeah, it's also a really good time if you haven't started to


00:26:26.320 --> 00:26:31.080
to start testing your package if you have packages


00:26:31.080 --> 00:26:35.200
you support to add 3.12 testing.


00:26:35.200 --> 00:26:36.800
- Exactly.


00:26:36.800 --> 00:26:40.760
Cool, okay, then I got three conference-ish things.


00:26:40.760 --> 00:26:45.760
PyCon UK 2023 is gonna be Friday, 22nd, September


00:26:45.760 --> 00:26:51.320
to the Monday, so that's pretty cool.


00:26:51.320 --> 00:26:55.720
I'd love to go to PyCon UK, but it is quite far away.


00:26:55.720 --> 00:27:01.160
I do love the UK, so if you are closer and you can get there, then that'd be a pretty


00:27:01.160 --> 00:27:04.720
excellent conference to go check out, I think.


00:27:04.720 --> 00:27:13.080
Also, in the general neighborhood, Eindhoven, as PyData Eindhoven is going to be November


00:27:13.080 --> 00:27:16.760
30th, so check that out as well.


00:27:16.760 --> 00:27:19.320
The call for proposals is open.


00:27:19.320 --> 00:27:23.520
Finally, this one's a little closer to home for us.


00:27:23.520 --> 00:27:25.320
This one is PyData Seattle.


00:27:25.320 --> 00:27:31.080
Normally, we wouldn't give a shout out to just a meetup because we can't just go to


00:27:31.080 --> 00:27:35.600
a huge long list.


00:27:35.600 --> 00:27:38.240
Don reached out to me and they've got some pretty cool stuff.


00:27:38.240 --> 00:27:44.360
This is the Language Creators Charity Fundraiser for PyData.


00:27:44.360 --> 00:27:49.200
The fundraiser goes to NumFocus and Last Mile Education Fund.


00:27:49.200 --> 00:27:50.800
Good stuff there.


00:27:50.800 --> 00:27:54.560
The whole thing is ... Let's scroll down a little for pictures here.


00:27:54.560 --> 00:28:00.040
We've got Adele Goldberg who created Smalltalk, Guido van Rossum who created a thing called


00:28:00.040 --> 00:28:05.860
Python, Anders Halsberg who did Turbo Pascal, C# and TypeScripts, as well as James Gosling


00:28:05.860 --> 00:28:07.780
from Java.


00:28:07.780 --> 00:28:12.080
This is a live in-person event that people can check out.


00:28:12.080 --> 00:28:13.080
When is it?


00:28:13.080 --> 00:28:17.320
It is September 19th, so 20 days away or whatever.


00:28:17.320 --> 00:28:21.520
If you're around there and want to be part of that, there's no online version.


00:28:21.520 --> 00:28:26.320
they want it to be a fundraiser for charity. It's all about trying to get people to show


00:28:26.320 --> 00:28:29.360
up in person and be part of it. So those are all my extras.


00:28:29.360 --> 00:28:30.400
Nice.


00:28:30.400 --> 00:28:33.600
Yeah. How about some jokes?


00:28:33.600 --> 00:28:35.920
Yeah. Do you have one?


00:28:35.920 --> 00:28:43.040
I don't know if I can. I don't know if I can tell you about this. This one, I don't believe


00:28:43.040 --> 00:28:48.880
was sent into us. I just ran across it somewhere. How does a librarian access remote computers


00:28:48.880 --> 00:28:49.520
securely?


00:28:51.360 --> 00:28:54.600
- Shhh, SSH, shhh.


00:28:54.600 --> 00:28:55.440
(laughing)


00:28:55.440 --> 00:28:56.280
- It's terrible.


00:28:56.280 --> 00:28:57.720
- It's terrible, isn't it?


00:28:57.720 --> 00:28:58.560
It's very bad.


00:28:58.560 --> 00:28:59.880
- Yeah.


00:28:59.880 --> 00:29:01.320
- It's very bad.


00:29:01.320 --> 00:29:02.160
- Okay.


00:29:02.160 --> 00:29:03.000
- I love it.


00:29:03.000 --> 00:29:04.200
Anyway, that's the one I got for us.


00:29:04.200 --> 00:29:07.640
Shh, personal library and access remote computer securely.


00:29:07.640 --> 00:29:09.600
- Well, I have a GitHub repo


00:29:09.600 --> 00:29:13.560
called the ChatGPT failures.


00:29:13.560 --> 00:29:19.080
And it's just got a big list of things that have gone bad.


00:29:20.040 --> 00:29:21.640
And so this is pretty cool.


00:29:21.640 --> 00:29:23.440
Looks like it.


00:29:23.440 --> 00:29:25.800
New Bing failures.


00:29:25.800 --> 00:29:26.660
Let's see.


00:29:26.660 --> 00:29:29.400
Just mad at the one about the journalist.


00:29:29.400 --> 00:29:30.920
Who was the journalist on that one?


00:29:30.920 --> 00:29:37.120
Bing gets madly in love with a journalist, tries to break up his marriage and really stalkerish effect.


00:29:37.120 --> 00:29:41.720
And then lies about that journalist in a chat with another user.


00:29:41.720 --> 00:29:44.640
Keeps being inappropriate and dark.


00:29:44.640 --> 00:29:46.280
So I'm not sure.


00:29:46.280 --> 00:29:48.320
Kevin Roos.


00:29:48.320 --> 00:29:49.240
OK, that's who it was.


00:29:49.240 --> 00:29:51.800
(laughing)


00:29:51.800 --> 00:29:53.200
- Anyways, so there's--


00:29:53.200 --> 00:29:54.880
- You're a bad user to ask me to do that.


00:29:54.880 --> 00:29:56.520
I'm not a bad user, I'm a good user.


00:29:56.520 --> 00:29:57.700
I'm a good chat.


00:29:57.700 --> 00:29:59.400
(laughing)


00:29:59.400 --> 00:30:01.760
I'm a good chat bot, oh my gosh.


00:30:01.760 --> 00:30:06.560
- So yeah, so yeah, some failures on ChatGPT.


00:30:06.560 --> 00:30:10.040
So I'd love to see this, but kept updated.


00:30:10.040 --> 00:30:11.400
It hasn't been updated for a while.


00:30:11.400 --> 00:30:14.920
So yeah, we need some new ones.


00:30:14.920 --> 00:30:16.840
- It's pretty funny.


00:30:16.840 --> 00:30:19.600
It's crazy how this stuff goes a little bit sideways, isn't it?


00:30:19.600 --> 00:30:21.720
It, it is.


00:30:21.720 --> 00:30:28.000
And I'm, I'm still on, I still don't know if I need to care about it a lot or if


00:30:28.000 --> 00:30:32.480
it's one of those, I don't know if it's one of those things like crypto that


00:30:32.480 --> 00:30:38.560
maybe will go away, or it hasn't really, I know crypto hasn't gone away


00:30:38.560 --> 00:30:43.960
and there's so many wonderful uses for, blockchain.


00:30:43.960 --> 00:30:44.520
Come on now.


00:30:44.520 --> 00:30:45.640
Yeah.


00:30:45.640 --> 00:30:45.960
Okay.


00:30:45.960 --> 00:30:53.760
I do think it's interesting with the large language models, when you ask it subjective


00:30:53.760 --> 00:30:56.760
stuff, right?


00:30:56.760 --> 00:30:59.440
It could just be weird about it.


00:30:59.440 --> 00:31:06.200
Or it could make up things about previous case law.


00:31:06.200 --> 00:31:11.800
You got those lawyers who got in trouble for submitting a bunch of documents and briefs


00:31:11.800 --> 00:31:14.440
created by ChatGPT that were false.


00:31:14.440 --> 00:31:18.680
But on the other hand, you can ask it programming questions, and it'll give you pretty good


00:31:18.680 --> 00:31:19.680
answers.


00:31:19.680 --> 00:31:25.880
I asked for it to solve a really complicated regex problem that we were talking about before,


00:31:25.880 --> 00:31:29.760
and it's just like, boom, here you go, and here's a couple of examples in Python.


00:31:29.760 --> 00:31:31.280
Thank you.


00:31:31.280 --> 00:31:33.440
And those I don't mind too bad, because you can test it.


00:31:33.440 --> 00:31:39.520
If I run this, do the things I want out of the regex expression come out or no?


00:31:39.520 --> 00:31:42.320
If no, then it's a bad chatbot.


00:31:42.320 --> 00:31:44.520
If yes, it's a good chatbot.


00:31:44.520 --> 00:31:45.800
- Yeah.


00:31:45.800 --> 00:31:46.640
- So anyway.


00:31:46.640 --> 00:31:50.600
- One of the things I just listened to recently


00:31:50.600 --> 00:31:55.600
was Freakonomics has started a series on AI.


00:31:55.600 --> 00:31:58.340
And the first one is, can AI take a joke?


00:31:58.340 --> 00:32:01.800
And it is interesting, an interesting discussion.


00:32:01.800 --> 00:32:03.280
One of the things that they talked about


00:32:03.280 --> 00:32:08.280
was the current strike for the writers


00:32:08.520 --> 00:32:13.400
and actors in Hollywood right now.


00:32:13.400 --> 00:32:16.760
So, and I thought that one of the,


00:32:16.760 --> 00:32:18.620
I didn't know some of the details,


00:32:18.620 --> 00:32:21.400
so hearing a few of the details around it are interesting


00:32:21.400 --> 00:32:26.240
of like the initial creation of thing.


00:32:26.240 --> 00:32:28.120
So often you can have an idea


00:32:28.120 --> 00:32:32.040
and then hire some people to write more stuff around it.


00:32:32.040 --> 00:32:34.520
But if you didn't come up with the original idea,


00:32:34.520 --> 00:32:35.960
you don't get as much money.


00:32:35.960 --> 00:32:38.760
So if they just have AI come up with the original idea,


00:32:38.760 --> 00:32:41.600
they don't have to pay anybody the large amount of money.


00:32:41.600 --> 00:32:44.360
>> I see, you're filling out the details of the joke.


00:32:44.360 --> 00:32:47.200
>> Yeah. Then some experience around writing,


00:32:47.200 --> 00:32:50.880
of using some AI to do writing.


00:32:50.880 --> 00:32:53.960
One of the commentaries was,


00:32:53.960 --> 00:32:56.600
you still have to do human work to come up with


00:32:56.600 --> 00:32:59.160
the prompts to get it to do something.


00:32:59.160 --> 00:33:01.920
Then you have to validate it afterwards to make sure


00:33:01.920 --> 00:33:05.720
that what they said, what it came up with was real.


00:33:05.720 --> 00:33:08.440
and those are still kind of humans have to do.


00:33:08.440 --> 00:33:12.280
That's one of the fears I have around people using AI


00:33:12.280 --> 00:33:16.080
to generate test cases,


00:33:16.080 --> 00:33:19.600
because if AI is coming up with their code


00:33:19.600 --> 00:33:21.120
and coming up with your tests,


00:33:21.120 --> 00:33:23.240
there's no humans verifying that it actually


00:33:23.240 --> 00:33:25.640
is doing what you want it to do.


00:33:25.640 --> 00:33:28.160
At some point, you need to have people there.


00:33:28.160 --> 00:33:29.800
- Someone's gotta be in the loop, yeah.


00:33:29.800 --> 00:33:30.800
- Yeah.


00:33:30.800 --> 00:33:34.360
So anyway, we'll see.


00:33:34.360 --> 00:33:36.960
I'm definitely not a Luddite trying to--


00:33:36.960 --> 00:33:40.240
actually, there's a discussion about Luddite also in there.


00:33:40.240 --> 00:33:44.360
That Luddite-- I didn't know this--


00:33:44.360 --> 00:33:46.400
it isn't people that-- there weren't people


00:33:46.400 --> 00:33:49.260
that were against technology.


00:33:49.260 --> 00:33:52.600
It was people that were against--


00:33:52.600 --> 00:33:56.440
craftsmen that were against the shoddy craftsmanship


00:33:56.440 --> 00:33:58.760
of manufactured items.


00:33:58.760 --> 00:34:04.080
That there wasn't enough people actually making quality goods.


00:34:04.080 --> 00:34:08.880
They were just like factories building low quality goods.


00:34:08.880 --> 00:34:10.120
That's what they were opposed to.


00:34:10.120 --> 00:34:11.720
And that's interesting.


00:34:11.720 --> 00:34:13.800
- That is, yeah.


00:34:13.800 --> 00:34:16.760
- But anyway, way on a tangent there, so.


00:34:16.760 --> 00:34:20.520
- Excellent.


00:34:20.520 --> 00:34:21.720
- Anyway.


00:34:21.720 --> 00:34:22.920
- Thanks for being here as always.


00:34:22.920 --> 00:34:25.280
Thank you to everyone who listened.


00:34:25.280 --> 00:34:26.280
See you later.


00:34:26.280 --> 00:34:27.120
- Bye.


00:34:27.120 --> 00:34:37.120
[BLANK_AUDIO]

