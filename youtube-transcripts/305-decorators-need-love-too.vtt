WEBVTT

00:00:00.000 --> 00:00:05.000
- Hey everybody, welcome to the live stream of Python Bytes.


00:00:05.000 --> 00:00:07.700
So exciting.


00:00:07.700 --> 00:00:09.440
- Hey Brian.


00:00:09.440 --> 00:00:13.280
- Hey, good to be here today.


00:00:13.280 --> 00:00:15.720
- So indeed, a day early,


00:00:15.720 --> 00:00:18.080
so good that we had to show up a day early.


00:00:18.080 --> 00:00:20.720
- Yeah, showing up early.


00:00:20.720 --> 00:00:22.920
So people that show up in the stream,


00:00:22.920 --> 00:00:24.680
thank you and people that watch it later,


00:00:24.680 --> 00:00:26.080
thank you for that too.


00:00:26.080 --> 00:00:28.120
And sharing for friends, sharing with friends.


00:00:28.120 --> 00:00:30.400
So, all right, let's get started.


00:00:30.400 --> 00:00:34.440
Hello and welcome to Python Bytes where we...


00:00:34.440 --> 00:00:36.660
Let's start again.


00:00:36.660 --> 00:00:39.100
Hello and welcome to Python Bytes


00:00:39.100 --> 00:00:40.920
where we deliver Python news and headlines


00:00:40.920 --> 00:00:42.200
directly to your earbuds.


00:00:42.200 --> 00:00:46.880
This is episode 305 recorded October 10, 2022.


00:00:46.880 --> 00:00:48.680
And I am Brian Okken.


00:00:48.680 --> 00:00:49.780
- I'm Michael Kennedy.


00:00:49.780 --> 00:00:54.380
- Well, we got a whole bunch of stuff that's great.


00:00:54.380 --> 00:00:57.680
Before we also want to thank Microsoft for startups,


00:00:57.680 --> 00:00:59.560
Founders Hub for sponsoring this episode.


00:00:59.560 --> 00:01:01.400
We'll hear more about them later.


00:01:01.400 --> 00:01:04.120
But do you want to start us off with some,


00:01:04.120 --> 00:01:05.440
something exciting?


00:01:05.440 --> 00:01:06.280
- Let's kick it off.


00:01:06.280 --> 00:01:07.960
I have a theme this week, Brian.


00:01:07.960 --> 00:01:08.800
- Okay.


00:01:08.800 --> 00:01:09.720
- But before we get to it,


00:01:09.720 --> 00:01:11.840
if my voice sounds a little bit scratchy,


00:01:11.840 --> 00:01:12.840
I just want to apologize.


00:01:12.840 --> 00:01:14.340
It's not that I'm sick.


00:01:14.340 --> 00:01:16.680
It's that I was rocking out to the Scorpions last night.


00:01:16.680 --> 00:01:18.200
They were here in Portland and,


00:01:18.200 --> 00:01:20.720
even if they're 70, they still rock.


00:01:20.720 --> 00:01:21.720
It was amazing.


00:01:21.720 --> 00:01:22.560
I don't know how old they are,


00:01:22.560 --> 00:01:24.360
but they probably are out there.


00:01:24.360 --> 00:01:25.200
- I don't know.


00:01:25.200 --> 00:01:27.400
Maybe being sick may have been a better excuse.


00:01:27.400 --> 00:01:29.400
Yeah, maybe.


00:01:29.400 --> 00:01:31.900
All right. I do have a theme, though, for the week,


00:01:31.900 --> 00:01:33.900
and let's kick it off with that theme.


00:01:33.900 --> 00:01:37.400
This first one, both of these are recommendations.


00:01:37.400 --> 00:01:39.400
The first one came to us from Matt Kramer.


00:01:39.400 --> 00:01:41.400
Thank you for that.


00:01:41.400 --> 00:01:47.400
And Jeff Glass, remember last time I said they announced PyScript?


00:01:47.400 --> 00:01:53.400
That is Python compiled to WebAssembly running on top of PyIodide


00:01:53.400 --> 00:01:55.400
in the browser. It's amazing.


00:01:55.400 --> 00:01:58.560
So many cool things and so much potential there.


00:01:58.560 --> 00:02:01.560
I pointed out that that was released and there were some breaking changes,


00:02:01.560 --> 00:02:05.520
and it was last minute that I got that, so I just threw it in as an extra.


00:02:05.520 --> 00:02:07.520
But now I had a chance to look at it.


00:02:07.520 --> 00:02:11.120
So there's a bunch of changes, and I just want to highlight


00:02:11.120 --> 00:02:13.120
some of the things for people.


00:02:13.120 --> 00:02:17.240
So they're using semantic versioning,


00:02:17.240 --> 00:02:20.880
and I don't fully understand this.


00:02:20.880 --> 00:02:22.880
I guess it's just like month-based.


00:02:22.880 --> 00:02:25.780
So it's 2022.09.1.


00:02:25.780 --> 00:02:28.920
That doesn't mean September 1st, that was released on September 30th,


00:02:28.920 --> 00:02:32.680
so about 11 days ago, 10 days ago.


00:02:32.680 --> 00:02:39.920
And they just reiterate this project is undergoing lots of changes,


00:02:39.920 --> 00:02:41.920
it's in its super early stages.


00:02:41.920 --> 00:02:45.500
The calendar versioning doesn't really indicate


00:02:45.500 --> 00:02:48.560
that it's like 0.1 or whatever type of level,


00:02:48.560 --> 00:02:50.560
but there's a lot of breaking changes.


00:02:50.560 --> 00:02:52.560
If you've worked with it before,


00:02:52.560 --> 00:02:56.480
you want to read through this and figure out where things are going.


00:02:56.480 --> 00:02:59.400
It doesn't look like anything's majorly broken


00:02:59.400 --> 00:03:01.400
and you've got to rewrite a ton of stuff,


00:03:01.400 --> 00:03:04.400
but also there are parts that will stop working,


00:03:04.400 --> 00:03:06.400
but they seem pretty easy to fix.


00:03:06.400 --> 00:03:08.400
So, first of all,


00:03:08.400 --> 00:03:12.320
like many Python programs,


00:03:12.320 --> 00:03:14.320
you need to express your dependencies.


00:03:14.320 --> 00:03:18.040
You would do that through a pyproject.toml or requirements.txt,


00:03:18.040 --> 00:03:20.040
unless you're on the web or in the browser,


00:03:20.040 --> 00:03:22.040
Nope, you don't do that.


00:03:22.040 --> 00:03:24.040
Instead, what you would do is you'd use this


00:03:24.040 --> 00:03:26.040
py-env section to express


00:03:26.040 --> 00:03:28.040
I depend on these packages, either


00:03:28.040 --> 00:03:30.040
just a URL to a wheel,


00:03:30.040 --> 00:03:32.040
a Python wheel, or something that could be


00:03:32.040 --> 00:03:34.040
pip installed using micro pip.


00:03:34.040 --> 00:03:36.040
That's gone.


00:03:36.040 --> 00:03:39.040
It's now deprecated and will be taken away.


00:03:39.040 --> 00:03:41.040
So now that's folded into the


00:03:41.040 --> 00:03:43.040
py-config section,


00:03:43.040 --> 00:03:45.040
and there's a way to say packages are


00:03:45.040 --> 00:03:47.040
a list of packages, and files that we're


00:03:47.040 --> 00:03:49.040
using is a list of paths.


00:03:49.040 --> 00:03:55.800
And it's in these kind of places where you indicate what Python files you might write


00:03:55.800 --> 00:04:01.340
and import, because while you can write Python in HTML, just like JavaScript, you should


00:04:01.340 --> 00:04:05.680
do that very sparingly, and you shouldn't just write your thousand lines of Python in


00:04:05.680 --> 00:04:06.680
line.


00:04:06.680 --> 00:04:07.680
That's not a great idea.


00:04:07.680 --> 00:04:13.400
So you would link over to a set of Python files that you can run one of them and import


00:04:13.400 --> 00:04:14.400
others from that.


00:04:14.400 --> 00:04:15.400
All right.


00:04:15.400 --> 00:04:18.440
So pyenv, going away, folded into pyconfig.


00:04:18.440 --> 00:04:21.640
This is one of the things that's easy to fix, but like I said, will stop working.


00:04:21.640 --> 00:04:27.140
We've also changed the syntax of some events.


00:04:27.140 --> 00:04:33.340
So you might have seen people on HTML elements like a paragraph or a div or a button,


00:04:33.340 --> 00:04:36.840
say mouse over equals in some JavaScript function name,


00:04:36.840 --> 00:04:42.140
like a function call, either inline function or a function you've written.


00:04:42.140 --> 00:04:47.140
In PyScript, there's a py-event.


00:04:47.540 --> 00:04:51.940
So there's a pie dash mouse over in a pie dash click type of thing


00:04:51.940 --> 00:04:56.280
And in here you can just write arbitrary python and unlike javascript


00:04:56.280 --> 00:04:58.900
you can actually


00:04:58.900 --> 00:05:05.460
Uh write arbitrary python separate multi-line python separated by semicolons. Look at that standing colons. They made it to python


00:05:05.460 --> 00:05:09.540
You can write arbitrary python. It doesn't have to be a single function call


00:05:09.540 --> 00:05:13.380
Pretty cool, right? It is pretty cool


00:05:15.220 --> 00:05:17.620
Python's starting to turn into JavaScript


00:05:17.620 --> 00:05:20.020
that is changing all the time.


00:05:20.020 --> 00:05:20.700
>>Exactly.


00:05:20.700 --> 00:05:22.060
Well, that's why the breaking changes.


00:05:22.060 --> 00:05:22.660
No, just kidding.


00:05:22.660 --> 00:05:23.540
That's a new project.


00:05:23.540 --> 00:05:26.260
But don't let it become JavaScript.


00:05:26.260 --> 00:05:29.580
But I'm very excited that maybe it could supplant JavaScript


00:05:29.580 --> 00:05:30.980
to some degree.


00:05:30.980 --> 00:05:33.460
There's some stuff about HTML escaping.


00:05:33.460 --> 00:05:35.700
So you could do print a string, and that


00:05:35.700 --> 00:05:39.540
will show up in the browser sometimes.


00:05:39.540 --> 00:05:42.740
Or you can get it to go to the console.


00:05:42.740 --> 00:05:46.380
But if you put, like, "1 < 2,"


00:05:46.380 --> 00:05:48.380
and that shows up in the browser,


00:05:48.380 --> 00:05:51.960
that might get interpreted as an opening bracket


00:05:51.960 --> 00:05:54.320
instead of just a less than symbol.


00:05:54.320 --> 00:05:57.320
So there's some fixes there, some stuff for logging.


00:05:57.320 --> 00:06:00.060
The ability to run multiple runtimes.


00:06:00.060 --> 00:06:04.000
When people usually do PyScript,


00:06:04.000 --> 00:06:08.100
they point at just a CDN version of PyScript,


00:06:08.100 --> 00:06:11.140
which points at a CDN version of PyIodide.


00:06:11.140 --> 00:06:11.980
(clears throat)


00:06:11.980 --> 00:06:12.820
Pyodide.


00:06:12.820 --> 00:06:16.380
But you can, and easily can do,


00:06:16.380 --> 00:06:19.500
you can like download that, customize it,


00:06:19.500 --> 00:06:22.900
and put it in your static files and run it out of there.


00:06:22.900 --> 00:06:26.380
You could possibly not even use Pyodide itself.


00:06:26.380 --> 00:06:28.880
You could use, say, like MicroPython, potentially.


00:06:28.880 --> 00:06:33.500
Or you could actually have maybe different versions


00:06:33.500 --> 00:06:38.500
of Pyodide running in different sections of your site


00:06:38.980 --> 00:06:40.980
if you wanted to different PyScript blocks,


00:06:40.980 --> 00:06:42.980
presumably even on the same page.


00:06:42.980 --> 00:06:46.660
So a lot of flexibility about managing multiple runtimes.


00:06:46.660 --> 00:06:51.300
Let's see, a few other things.


00:06:51.300 --> 00:06:53.300
There's also some major release of the Pyodide


00:06:53.300 --> 00:06:55.940
that's coming along and because it's built on top of Pyodide,


00:06:55.940 --> 00:06:57.940
it runs on top of Pyodide, PyScript does.


00:06:57.940 --> 00:07:00.740
Obviously, the changes there are super important.


00:07:00.740 --> 00:07:03.460
So some of the changes are that they broke...


00:07:03.460 --> 00:07:05.940
It used to be kind of like one huge namespace


00:07:05.940 --> 00:07:07.940
and they broke that up into a bunch of pieces,


00:07:07.940 --> 00:07:09.340
I don't know about that.


00:07:09.340 --> 00:07:11.020
But probably the most relevant for people


00:07:11.020 --> 00:07:13.420
is you used to have to do this thing


00:07:13.420 --> 00:07:17.880
where you would import from JavaScript some event


00:07:17.880 --> 00:07:21.900
and do like a proxy type thing to like hook an event,


00:07:21.900 --> 00:07:24.420
which wasn't terrible, but it was kind of like,


00:07:24.420 --> 00:07:25.580
well, are you still doing Python?


00:07:25.580 --> 00:07:26.420
I don't know.


00:07:26.420 --> 00:07:27.260
(laughs)


00:07:27.260 --> 00:07:30.100
Right, so they've written a bunch of event handlers


00:07:30.100 --> 00:07:34.340
or event sources in pyodide ffi.wrappers.


00:07:34.340 --> 00:07:37.580
So like add event listener, remove event listener,


00:07:37.580 --> 00:07:39.860
SetTimeout, SetInterval, ClearInterval.


00:07:39.860 --> 00:07:41.740
And so now you can just import, say, like,


00:07:41.740 --> 00:07:44.620
addEventListener, have a function, Python function,


00:07:44.620 --> 00:07:47.360
and then you just say addEventListener on a tag,


00:07:47.360 --> 00:07:49.380
on an event, and here's your Python function.


00:07:49.380 --> 00:07:50.500
That's awesome, right?


00:07:50.500 --> 00:07:52.220
- That is awesome.


00:07:52.220 --> 00:07:55.640
- Yeah, so they've added these event handler sources


00:07:55.640 --> 00:07:58.140
that are straight Python and not interoperating


00:07:58.140 --> 00:08:01.540
with JavaScript more directly.


00:08:01.540 --> 00:08:04.580
There's a bunch of things behind the scenes


00:08:04.580 --> 00:08:06.620
that will make it better, like, that we don't necessarily


00:08:06.620 --> 00:08:07.880
that users care about, but like,


00:08:07.880 --> 00:08:09.840
and scripting is getting better.


00:08:09.840 --> 00:08:12.360
They've got a whole testing scheme.


00:08:12.360 --> 00:08:14.360
You might be interested in this, Brian,


00:08:14.360 --> 00:08:16.120
for your show.


00:08:16.120 --> 00:08:18.700
They do integration tests with Pyright.


00:08:18.700 --> 00:08:21.000
They do TypeScript tests,


00:08:21.000 --> 00:08:23.760
'cause a lot of the interaction bits are in TypeScript.


00:08:23.760 --> 00:08:25.280
They do that with Jest.


00:08:25.280 --> 00:08:29.120
And then Python, the Python code gets tested with pytest.


00:08:29.120 --> 00:08:30.920
That's an interesting mix, huh?


00:08:30.920 --> 00:08:32.520
- Yeah, I guess just pointing out,


00:08:32.520 --> 00:08:35.560
we said Pyright, it's PlayWrite, but.


00:08:36.520 --> 00:08:38.360
I'm sorry, I'm too much on the pie right now.


00:08:38.360 --> 00:08:39.200
Yes, you're right.


00:08:39.200 --> 00:08:40.800
Thank you for keeping me up.


00:08:40.800 --> 00:08:44.480
- Yeah, but I'll do a famous pull request on them


00:08:44.480 --> 00:08:47.760
to try to get that pie test case all lowercase.


00:08:47.760 --> 00:08:48.920
That'd be good.


00:08:48.920 --> 00:08:51.640
- Yeah, I'm not even gonna use this project


00:08:51.640 --> 00:08:52.920
until I get it fixed.


00:08:52.920 --> 00:08:57.160
So some stuff on infrastructure,


00:08:57.160 --> 00:08:59.960
there's new CI things that they're working on


00:08:59.960 --> 00:09:00.920
to make it better.


00:09:00.920 --> 00:09:02.880
They're using type annotations


00:09:02.880 --> 00:09:05.480
and they're trying to synchronize type script


00:09:05.480 --> 00:09:08.840
and PyScripts type annotations to kind of keep the end to end


00:09:08.840 --> 00:09:14.360
across JavaScript, across Python, accurate, and a bunch of stuff that's coming.


00:09:14.360 --> 00:09:18.200
In particular, a lot of rethinking how async works because


00:09:18.200 --> 00:09:22.680
JavaScript is already like super asynchronous, but it just has one loop


00:09:22.680 --> 00:09:26.600
and if you hook your async Python into that, then like, is it really


00:09:26.600 --> 00:09:29.320
async? It's a little bit complicated. You can


00:09:29.320 --> 00:09:32.360
check out what they said there.


00:09:32.520 --> 00:09:34.680
But otherwise, very exciting stuff.


00:09:34.680 --> 00:09:37.280
And if you're doing PyScript, definitely check this out


00:09:37.280 --> 00:09:38.880
'cause it's going to affect you.


00:09:38.880 --> 00:09:39.880
- Yeah, that's cool.


00:09:39.880 --> 00:09:46.200
Well, let's give your voice a little bit of a break.


00:09:46.200 --> 00:09:49.240
- Yeah, I mean, too much Rocky like a hurricane.


00:09:49.240 --> 00:09:50.520
Stuff going on.


00:09:50.520 --> 00:09:51.360
- Yeah.


00:09:51.360 --> 00:09:55.320
Well, I wanna talk about decorators a little bit.


00:09:55.320 --> 00:10:00.320
So I was actually on a, I sat in on a Boston,


00:10:00.520 --> 00:10:02.980
the Python Boston meetup group.


00:10:02.980 --> 00:10:04.940
They're still, it's kind of neat.


00:10:04.940 --> 00:10:05.900
They're still doing online.


00:10:05.900 --> 00:10:07.640
So it's not really Boston.


00:10:07.640 --> 00:10:12.000
It's anybody can jump in and have fun there.


00:10:12.000 --> 00:10:14.340
But we're talking about pytest


00:10:14.340 --> 00:10:17.660
and the, and Ned Batchelder was there


00:10:17.660 --> 00:10:20.100
and talking about coverage also.


00:10:20.100 --> 00:10:22.700
And he was showing us some of the test code.


00:10:22.700 --> 00:10:23.860
It was kind of, it was really fun.


00:10:23.860 --> 00:10:25.460
Cause he was showing us some of the test code


00:10:25.460 --> 00:10:29.420
within the coverage, the test code that tests coverage


00:10:29.420 --> 00:10:34.420
And he was showing some things that,


00:10:34.420 --> 00:10:38.540
and then about using a decorator shortcuts.


00:10:38.540 --> 00:10:41.380
And then I was like, that's really cool.


00:10:41.380 --> 00:10:42.760
I always forget to do that.


00:10:42.760 --> 00:10:46.600
And so he wrote up this, I don't know if it's just for me,


00:10:46.600 --> 00:10:50.120
but he wrote up a blog post called decorator shortcuts.


00:10:50.120 --> 00:10:53.140
And especially, I mean, I guess for a lot of stuff,


00:10:53.140 --> 00:10:55.520
we use decorators a lot in Python now.


00:10:55.520 --> 00:11:00.520
And in pytest also uses a lot of decorators,


00:11:00.520 --> 00:11:04.800
things like pytest mark parameterize


00:11:04.800 --> 00:11:07.720
or pytest mark skip or X fail.


00:11:07.720 --> 00:11:11.680
Those are all decorators built in part of pytest.


00:11:11.680 --> 00:11:14.880
And so the thing he wanted to show us is like,


00:11:14.880 --> 00:11:18.920
as an example, he's got some tests that have to,


00:11:18.920 --> 00:11:21.480
that are either skipped or X failed


00:11:21.480 --> 00:11:23.200
on certain Python versions.


00:11:23.200 --> 00:11:27.200
So he's got a way to test a piece of code


00:11:27.200 --> 00:11:30.280
that only works on say like it only,


00:11:30.280 --> 00:11:32.000
it doesn't work on PyPy


00:11:32.000 --> 00:11:36.240
or it doesn't work on like Python 3.8 or before


00:11:36.240 --> 00:11:37.640
or something like that.


00:11:37.640 --> 00:11:42.640
And so he has these fairly complex like version


00:11:42.640 --> 00:11:48.720
like X fail decorator sequences that he can take


00:11:50.920 --> 00:11:54.400
And instead of saying, and let's say he's actually filed,


00:11:54.400 --> 00:11:55.680
maybe there's an issue.


00:11:55.680 --> 00:11:59.160
He's actually filed an issue against PyPy for instance,


00:11:59.160 --> 00:12:01.800
but his tests are still failing.


00:12:01.800 --> 00:12:05.360
He had an example where instead of just this whole big


00:12:05.360 --> 00:12:07.680
X fail blob with the environment,


00:12:07.680 --> 00:12:10.200
checking the environment version and using,


00:12:10.200 --> 00:12:13.240
having a reason and a link to the defect,


00:12:13.240 --> 00:12:17.840
he just shortcutted that to just like a single variable name


00:12:17.840 --> 00:12:22.840
or single name that says X fail,


00:12:22.840 --> 00:12:26.840
PyPy 3749, for example, just a single thing.


00:12:26.840 --> 00:12:29.300
And then, when you're using it,


00:12:29.300 --> 00:12:31.080
instead of this whole big blob,


00:12:31.080 --> 00:12:34.480
you can just write at X fail,


00:12:34.480 --> 00:12:37.740
instead of saying like pytestMark X fail,


00:12:37.740 --> 00:12:39.360
you can have this specific X fail


00:12:39.360 --> 00:12:42.320
and then you get the reason print out and everything.


00:12:42.320 --> 00:12:43.620
Now this example-- - That's pretty clever.


00:12:43.620 --> 00:12:46.360
- Yeah, especially, I like it for this,


00:12:46.360 --> 00:12:48.720
is there's, we were talking about how


00:12:48.720 --> 00:12:51.880
we don't like to leave X-Fails in for a long time,


00:12:51.880 --> 00:12:55.280
but sometimes you're dependent on a different piece


00:12:55.280 --> 00:12:58.200
of software that you're not one of the maintainers,


00:12:58.200 --> 00:13:01.200
in which case, what do you do with the failing test?


00:13:01.200 --> 00:13:04.080
One of the things you can do is you can X-Fail it


00:13:04.080 --> 00:13:08.000
and link it to a defect report,


00:13:08.000 --> 00:13:09.240
so you can keep watch of it.


00:13:09.240 --> 00:13:13.400
But yeah, having a way to just mark different tests


00:13:13.400 --> 00:13:16.120
with the same thing, it's pretty cool.


00:13:16.120 --> 00:13:20.080
And then this really kind of relates to really a lot


00:13:20.080 --> 00:13:20.920
of things.


00:13:20.920 --> 00:13:23.400
There's a lot of places where we use long,


00:13:23.400 --> 00:13:26.280
long complex decorators that you can just assign


00:13:26.280 --> 00:13:28.280
to a variable and then use it later.


00:13:28.280 --> 00:13:29.100
So.


00:13:29.100 --> 00:13:31.200
- Yeah, to put this decorator on a test function,


00:13:31.200 --> 00:13:32.880
you have to have,


00:13:32.880 --> 00:13:35.420
you specify a whole bunch of conditionals around the version


00:13:35.420 --> 00:13:37.480
and then the reason is a big long string.


00:13:37.480 --> 00:13:40.140
And if you, if that's affecting 10 tests,


00:13:40.140 --> 00:13:43.520
you put that on 10 tests, it's all over the place.


00:13:43.520 --> 00:13:45.920
You know, one of the things that,


00:13:45.920 --> 00:13:47.520
you hear from people sometimes like,


00:13:47.520 --> 00:13:48.880
"Well, I don't like unit testing


00:13:48.880 --> 00:13:50.800
"because it's hard to maintain."


00:13:50.800 --> 00:13:52.760
And I find that when people say that a lot,


00:13:52.760 --> 00:13:56.480
they kind of go into this mode


00:13:56.480 --> 00:13:58.440
where when they're writing test code,


00:13:58.440 --> 00:14:01.840
they forget about things like trying to isolate,


00:14:01.840 --> 00:14:03.060
change to one place,


00:14:03.060 --> 00:14:05.640
and you would never write the same code 10 times


00:14:05.640 --> 00:14:07.140
in a real part of your app.


00:14:07.140 --> 00:14:10.600
Why should you write it 10 times duplicate in a test?


00:14:10.600 --> 00:14:11.440
Right?


00:14:11.440 --> 00:14:12.260
"Well, it's hard to maintain."


00:14:12.260 --> 00:14:13.100
Well, it'd be hard to maintain


00:14:13.100 --> 00:14:14.880
if you did that in your regular code too.


00:14:14.880 --> 00:14:17.000
you don't do it there, so don't do it here.


00:14:17.000 --> 00:14:19.520
And this is a cool technique to accomplish that, yeah.


00:14:19.520 --> 00:14:20.920
- Yeah, definitely.


00:14:20.920 --> 00:14:23.920
And this part of it isn't,


00:14:23.920 --> 00:14:25.560
it's also great 'cause it's consistent.


00:14:25.560 --> 00:14:28.760
It keeps, it'd be terrible if you were, you know,


00:14:28.760 --> 00:14:31.320
referencing this issue in three different places,


00:14:31.320 --> 00:14:35.980
but only sometimes including the link and, you know,


00:14:35.980 --> 00:14:37.680
having some consistency is good.


00:14:37.680 --> 00:14:40.240
- Absolutely.


00:14:40.240 --> 00:14:42.080
- And there was some concerns,


00:14:42.080 --> 00:14:43.600
Larry Hastings put up a concern


00:14:43.600 --> 00:14:51.840
about possibly not doing this for code that generates


00:14:51.840 --> 00:14:55.080
a single use object, like a iterator or something


00:14:55.080 --> 00:14:57.080
like that.


00:14:57.080 --> 00:14:59.320
But just don't do that.


00:14:59.320 --> 00:15:00.840
But Larry has a workaround.


00:15:00.840 --> 00:15:02.440
If you can do it a different way,


00:15:02.440 --> 00:15:06.720
then you have something that acts like that.


00:15:06.720 --> 00:15:07.240
>>I see.


00:15:07.240 --> 00:15:08.200
Interesting.


00:15:08.200 --> 00:15:11.040
There's a lot of turtles all the way down,


00:15:11.040 --> 00:15:13.680
like decorations or functions that return functions.


00:15:13.680 --> 00:15:15.960
And so what we do is wrap that in a function


00:15:15.960 --> 00:15:18.760
to alleviate the capture, the closure.


00:15:18.760 --> 00:15:20.000
Yeah, it's fun.


00:15:20.000 --> 00:15:21.040
- But anyway.


00:15:21.040 --> 00:15:23.580
So. - Cool.


00:15:23.580 --> 00:15:26.360
Excellent stuff.


00:15:26.360 --> 00:15:27.600
Yeah, next up.


00:15:27.600 --> 00:15:31.640
- Yeah, we have a sponsor.


00:15:31.640 --> 00:15:35.120
Our sponsor this week is Microsoft for Startups,


00:15:35.120 --> 00:15:36.440
a founders hub.


00:15:36.440 --> 00:15:38.400
So Microsoft for Startups founders hub


00:15:38.400 --> 00:15:41.680
provides all founders at any stage with free resources


00:15:41.680 --> 00:15:43.940
to help solve startup challenges.


00:15:43.940 --> 00:15:46.120
The platform provides technology benefits,


00:15:46.120 --> 00:15:50.180
access to expert guidance and skilled resources,


00:15:50.180 --> 00:15:53.220
mentorship, networking connections, and a whole bunch more.


00:15:53.220 --> 00:15:55.120
And unlike others in the industry,


00:15:55.120 --> 00:15:56.780
Microsoft for Startup Founders Hubs


00:15:56.780 --> 00:15:59.560
does not require the startup to be investor backed


00:15:59.560 --> 00:16:01.540
or third-party validated


00:16:01.540 --> 00:16:06.300
or able to relocate to San Francisco for a short time.


00:16:06.300 --> 00:16:08.340
So Founders Hub is truly open to all.


00:16:08.340 --> 00:16:09.180
So what do you get?


00:16:09.180 --> 00:16:12.260
You get free access to GitHub and Microsoft cloud


00:16:12.260 --> 00:16:15.260
with the ability to unlock credits over time.


00:16:15.260 --> 00:16:18.220
They've also partnered with other companies like OpenAI


00:16:18.220 --> 00:16:21.220
to provide services and discounts.


00:16:21.220 --> 00:16:25.640
And Microsoft through the Microsoft for Startup Founders Hub


00:16:25.640 --> 00:16:28.780
becoming a founder is no longer about who you know.


00:16:28.780 --> 00:16:30.860
You'll have access to their mentorship network,


00:16:30.860 --> 00:16:33.420
giving you access to a pool of hundreds of mentors


00:16:33.420 --> 00:16:35.460
across a range of disciplines,


00:16:35.460 --> 00:16:37.500
across areas like idea validation,


00:16:37.500 --> 00:16:40.180
fundraising, management, coaching, sales, marketing,


00:16:40.180 --> 00:16:42.600
maybe even testing, who knows?


00:16:42.600 --> 00:16:44.400
You'll be able to book a one-on-one meeting


00:16:44.400 --> 00:16:48.680
with the mentors, many of whom are former founders themselves.


00:16:48.680 --> 00:16:50.640
So make your ideas a reality today


00:16:50.640 --> 00:16:52.280
with the critical support you'll get


00:16:52.280 --> 00:16:54.960
from Microsoft for Startups Founders Hub.


00:16:54.960 --> 00:16:56.960
And to join or just check it out,


00:16:56.960 --> 00:17:01.740
visit pythonbytes.fm/foundershub2022.


00:17:01.740 --> 00:17:03.120
The link is in the show notes.


00:17:03.120 --> 00:17:06.160
And I know you can find this stuff on your own


00:17:06.160 --> 00:17:07.460
with Google or something,


00:17:07.460 --> 00:17:11.260
But if you go through our link, it helps them know


00:17:11.260 --> 00:17:13.140
you heard about them here.


00:17:13.140 --> 00:17:14.140
So thanks.


00:17:14.140 --> 00:17:17.620
- Yeah, thanks Microsoft for supporting the show.


00:17:17.620 --> 00:17:19.420
Right before we move on,


00:17:19.420 --> 00:17:21.420
audience feedback from Henry Scheiner.


00:17:21.420 --> 00:17:22.500
For that exact example,


00:17:22.500 --> 00:17:24.140
talking about pytest and decorators,


00:17:24.140 --> 00:17:26.780
I'm not fond of making the test directory importable


00:17:26.780 --> 00:17:28.220
unless I have to.


00:17:28.220 --> 00:17:30.020
A mark might be better.


00:17:30.020 --> 00:17:30.920
What do you think?


00:17:30.920 --> 00:17:34.380
- A mark might be better?


00:17:34.380 --> 00:17:36.260
I mean, there are marks.


00:17:36.260 --> 00:17:39.520
So the marks are decorators.


00:17:39.520 --> 00:17:40.760
- Yeah, okay, cool.


00:17:40.760 --> 00:17:43.700
What is next?


00:17:43.700 --> 00:17:47.600
Another continuation of my theme here.


00:17:47.600 --> 00:17:50.240
So Mark Madsen sent over a recommendation


00:17:50.240 --> 00:17:51.800
to talk about this,


00:17:51.800 --> 00:17:54.960
unrelated to the previous announcement,


00:17:54.960 --> 00:17:57.880
only in timing or origin.


00:17:57.880 --> 00:18:01.080
So Panel, people probably have heard of HoloViz,


00:18:01.080 --> 00:18:03.680
and Panel is related to that project.


00:18:04.600 --> 00:18:06.760
It's an open source Python library.


00:18:06.760 --> 00:18:10.520
Tell us you create custom interactive web apps


00:18:10.520 --> 00:18:14.760
and dashboards by connecting widgets, plots, images.


00:18:14.760 --> 00:18:16.720
So people have heard of Streamlit,


00:18:16.720 --> 00:18:19.200
they've heard of H2O Wave,


00:18:19.200 --> 00:18:20.680
they've heard of Plotly Dash.


00:18:20.680 --> 00:18:22.320
It's like in that category, right?


00:18:22.320 --> 00:18:26.120
So you can put together a lot of interactive fun pieces.


00:18:26.120 --> 00:18:30.520
So for example, here, if you go to the main website panel,


00:18:30.520 --> 00:18:32.020
you can see that there's like this graph.


00:18:32.020 --> 00:18:33.600
As you hover over it, it's very interactive,


00:18:33.600 --> 00:18:36.600
but you also have widgets to let you re-evaluate


00:18:36.600 --> 00:18:40.400
how you compare all these things and just play with it live.


00:18:40.400 --> 00:18:42.640
Kind of like it's a notebook, but it's not.


00:18:42.640 --> 00:18:44.640
That's neat, right?


00:18:44.640 --> 00:18:49.800
So traditionally, this has run in Jupyter Notebooks,


00:18:49.800 --> 00:18:54.160
or you can run it on the Flask backend type of thing.


00:18:54.160 --> 00:18:56.480
You can host it on your own server.


00:18:56.480 --> 00:18:58.960
The news is not that. This has been around for a while.


00:18:58.960 --> 00:19:03.960
The news is that Hanel now comes to Wasm via PyOd,


00:19:03.960 --> 00:19:08.560
PyOd and has PyScript integration.


00:19:08.560 --> 00:19:09.780
That's pretty awesome.


00:19:09.780 --> 00:19:11.440
- That is pretty cool.


00:19:11.440 --> 00:19:12.860
- So in order to host it before,


00:19:12.860 --> 00:19:15.160
you have to either have a running notebook server


00:19:15.160 --> 00:19:17.360
or you had to set up your own separate web server


00:19:17.360 --> 00:19:19.280
and maintain that thing.


00:19:19.280 --> 00:19:20.120
And all that goes with,


00:19:20.120 --> 00:19:23.880
and now you can just put a little pi-config in there


00:19:23.880 --> 00:19:26.160
and boom, when they interact with your data


00:19:26.160 --> 00:19:28.800
and they run it, it just happens client side.


00:19:28.800 --> 00:19:29.640
no servers needed.


00:19:29.640 --> 00:19:34.760
So let's talk about some of the things here.


00:19:34.760 --> 00:19:39.120
You can automatically convert panel applications


00:19:39.120 --> 00:19:43.360
to a Pyodide version, couple flavors,


00:19:43.360 --> 00:19:44.680
reasons I'll explain in a minute,


00:19:44.680 --> 00:19:48.000
or you can convert to a PyScript based app,


00:19:48.000 --> 00:19:50.120
which is pretty epic.


00:19:50.120 --> 00:19:53.000
So like you could embed a panel


00:19:53.000 --> 00:19:55.200
inside your Sphinx documentation,


00:19:55.200 --> 00:19:58.040
just as HTML, which is pretty nuts.


00:19:58.040 --> 00:20:01.880
So there's this convert command, panel space convert on the CLI.


00:20:01.880 --> 00:20:08.240
And you can tell it the two formats from your regular panel code


00:20:08.240 --> 00:20:10.840
to convert it to a Pyodide.


00:20:10.840 --> 00:20:16.680
This one is good if you want to have a single HTML file


00:20:16.680 --> 00:20:18.480
that you say, "Here's my HTML file."


00:20:18.480 --> 00:20:20.140
Off it goes.


00:20:20.140 --> 00:20:23.080
It's just newer dependencies, and then it runs there.


00:20:23.080 --> 00:20:26.480
That's not as good as creating a Pyodide worker,


00:20:27.080 --> 00:20:29.860
which creates a JavaScript and HTML file


00:20:29.860 --> 00:20:33.680
that you got to serve over more of a server.


00:20:33.680 --> 00:20:36.020
Or you can even output a PyScript version


00:20:36.020 --> 00:20:39.120
where you can write additional PyScript code.


00:20:39.120 --> 00:20:40.660
Pretty epic.


00:20:40.660 --> 00:20:42.680
And here you can see a little example.


00:20:42.680 --> 00:20:47.680
This looks like standard XGBoost SKlearn code right here.


00:20:47.680 --> 00:20:49.540
It does all its thing.


00:20:49.540 --> 00:20:52.560
Except for the end, you just say pn.column,


00:20:52.560 --> 00:20:56.760
and here's your output right there.


00:20:56.760 --> 00:20:58.760
and you put your little pipeline you created,


00:20:58.760 --> 00:21:03.500
and maybe a head of a data frame to show up, and there it goes.


00:21:03.500 --> 00:21:08.400
So in order to run this, you would say, "Panel convert the script


00:21:08.400 --> 00:21:11.360
to a PyDi worker, output PyDi."


00:21:11.360 --> 00:21:14.860
Then you just run a server locally so that you can get to it,


00:21:14.860 --> 00:21:17.060
you can pull in the JavaScript, open it up,


00:21:17.060 --> 00:21:20.060
and you get something that looks like this that's super interactive.


00:21:20.060 --> 00:21:23.060
There you have machine learning in the browser.


00:21:23.060 --> 00:21:25.460
That's it.


00:21:25.460 --> 00:21:27.460
That's pretty cool.


00:21:27.460 --> 00:21:29.740
The browser is JavaScript will take over the world.


00:21:29.740 --> 00:21:32.940
It'll get smart and take off.


00:21:32.940 --> 00:21:36.300
So a couple of cool tips and tricks they recommend


00:21:36.300 --> 00:21:37.980
is you can do --auto-reload.


00:21:37.980 --> 00:21:40.020
So if you make changes to the file,


00:21:40.020 --> 00:21:41.780
it'll auto-reload the browser.


00:21:41.780 --> 00:21:43.340
So just as you edit.


00:21:43.340 --> 00:21:47.220
You can also add a panel.convert --watch.


00:21:47.220 --> 00:21:49.100
So if the source file has changed,


00:21:49.100 --> 00:21:52.780
it'll regenerate the script, and then the script


00:21:52.780 --> 00:21:55.780
it'll get reloaded so you can chain those together, I believe.


00:21:55.780 --> 00:21:58.780
Then there's a section on formats that actually describes


00:21:58.780 --> 00:22:02.780
what is the point of the different outputs,


00:22:02.780 --> 00:22:04.780
like PyDive versus PyDiveWorker.


00:22:04.780 --> 00:22:08.780
So the Worker one, it says it generates an HTML file and JavaScript that runs better.


00:22:08.780 --> 00:22:10.780
This is the most-- in a separate thread--


00:22:10.780 --> 00:22:13.780
this is the most performant option, but it has to be running out of a server


00:22:13.780 --> 00:22:15.780
instead of just a file.


00:22:15.780 --> 00:22:21.780
Worth noting here, PyScript generates an HTML file leveraging PyScript,


00:22:21.780 --> 00:22:26.260
produces standalone HTML files containing pyenv and pyscript tags


00:22:26.260 --> 00:22:28.260
with the dependencies.


00:22:28.260 --> 00:22:32.660
It's basically a PyScript for the pyodied one.


00:22:32.660 --> 00:22:35.660
Well, guess what? This might need a little update coming soon.


00:22:35.660 --> 00:22:40.260
Py-env is not there anymore, so they can check that out.


00:22:40.260 --> 00:22:43.260
I'm sure they're on top of it.


00:22:43.260 --> 00:22:47.660
Final thing to note here that's pretty dope is progressive web apps.


00:22:47.660 --> 00:22:51.960
So this comes with a --pwa option,


00:22:51.960 --> 00:22:53.960
which turns your--


00:22:53.960 --> 00:22:55.960
I'm pretty sure this is going to require


00:22:55.960 --> 00:22:58.460
the PowerDyedWorker variant,


00:22:58.460 --> 00:23:01.960
because you need these worker things for progressive web apps.


00:23:01.960 --> 00:23:07.960
But this means that you can install your app


00:23:07.960 --> 00:23:11.260
into, say, an iPad, or install it like a desktop app


00:23:11.260 --> 00:23:14.760
and run it with cached offline data.


00:23:14.760 --> 00:23:18.720
So for example, let's see if I go to YouTube here.


00:23:18.720 --> 00:23:19.920
I signed in.


00:23:19.920 --> 00:23:20.840
No.


00:23:20.840 --> 00:23:21.600
Good.


00:23:21.600 --> 00:23:24.480
Like in Vivaldi, I can right click on this,


00:23:24.480 --> 00:23:26.320
and it'll say Install YouTube there.


00:23:26.320 --> 00:23:29.040
So if you did that option for your panel app,


00:23:29.040 --> 00:23:31.520
you could right click and say Install Panel.


00:23:31.520 --> 00:23:33.200
You might think, oh, well, that's silly.


00:23:33.200 --> 00:23:34.440
Who cares about that?


00:23:34.440 --> 00:23:35.480
Let's see.


00:23:35.480 --> 00:23:37.120
Just let me do it though here.


00:23:37.120 --> 00:23:37.920
Oh, this is live.


00:23:37.920 --> 00:23:40.440
If you go to a lot of these--


00:23:40.440 --> 00:23:41.440
I just need some video.


00:23:41.440 --> 00:23:44.120
I'm really curious.


00:23:44.120 --> 00:23:46.700
A lot of these, you can come in and actually click download.


00:23:46.700 --> 00:23:48.060
I guess you got to be signed in.


00:23:48.060 --> 00:23:51.620
But if you're a premium account, you can click Download.


00:23:51.620 --> 00:23:54.300
And that's only possible for YouTube installed as a PWA.


00:23:54.300 --> 00:23:56.500
Because I think a lot of people feel like, oh, it just


00:23:56.500 --> 00:23:57.980
gives me an icon on my home page.


00:23:57.980 --> 00:23:59.900
But there's actually different behaviors.


00:23:59.900 --> 00:24:03.900
So you can get offline videos on the PWA YouTube,


00:24:03.900 --> 00:24:06.020
whereas the web one, you can't.


00:24:06.020 --> 00:24:06.700
And so on.


00:24:06.700 --> 00:24:08.300
So anyway, that's the kind of benefits


00:24:08.300 --> 00:24:11.940
you would get if you would do your panel with PWA, which


00:24:11.940 --> 00:24:14.340
is just a command line option.


00:24:14.340 --> 00:24:15.180
- Interesting.


00:24:15.180 --> 00:24:17.100
- Cool. - Yeah.


00:24:17.100 --> 00:24:17.980
Anyway, people check it out


00:24:17.980 --> 00:24:20.460
if they're interested in building dashboards,


00:24:20.460 --> 00:24:21.700
they're interested in PyScripts


00:24:21.700 --> 00:24:23.700
and running in the browser using WebAssembly,


00:24:23.700 --> 00:24:25.540
here's a pretty awesome option.


00:24:25.540 --> 00:24:27.540
Thanks, Mark, for sitting with us.


00:24:27.540 --> 00:24:28.540
- Yeah, thanks a lot.


00:24:28.540 --> 00:24:36.340
Did you know that Python 3.11 is coming right up?


00:24:36.340 --> 00:24:38.180
- It's gotta be soon.


00:24:38.180 --> 00:24:39.060
It's October.


00:24:39.060 --> 00:24:41.020
There's not that much October left.


00:24:41.020 --> 00:24:42.960
- Yeah, but it was three eight


00:24:42.960 --> 00:24:44.340
when we got the walrus operator.


00:24:44.340 --> 00:24:46.700
Do you realize it's been that long?


00:24:46.700 --> 00:24:48.980
- It seems like the walrus operator is still new,


00:24:48.980 --> 00:24:50.900
but that's a long time, yeah.


00:24:50.900 --> 00:24:51.740
- Yeah, so-


00:24:51.740 --> 00:24:55.020
- So like an adolescent walrus now,


00:24:55.020 --> 00:24:56.540
not even a baby walrus.


00:24:56.540 --> 00:24:58.300
- Yeah, exactly.


00:24:58.300 --> 00:25:01.780
So I think it's time for people to embrace the walrus.


00:25:01.780 --> 00:25:03.660
And so one of the things you can do


00:25:03.660 --> 00:25:08.460
is you can install Marco Garelli's AutoWalrus


00:25:08.460 --> 00:25:10.900
and it'll convert your code for you


00:25:10.900 --> 00:25:12.660
in places where you really should have used


00:25:12.660 --> 00:25:14.060
the walrus operator.


00:25:14.060 --> 00:25:16.740
So, and this is good for your support,


00:25:16.740 --> 00:25:19.000
if you're supporting three and above


00:25:19.000 --> 00:25:22.060
and golly, I hope you're already up to three nine


00:25:22.060 --> 00:25:23.120
or three 10 by now.


00:25:23.120 --> 00:25:27.060
So there's a, this is auto walrus.


00:25:27.060 --> 00:25:27.900
I checked it out.


00:25:27.900 --> 00:25:29.420
It's pretty, it's pretty simple.


00:25:29.420 --> 00:25:31.940
It can run as a pre-commit hook too.


00:25:31.940 --> 00:25:34.240
So that, which is nice,


00:25:34.240 --> 00:25:37.020
but you can run it on the command line,


00:25:37.020 --> 00:25:39.260
which that's what I did when I tried it.


00:25:39.260 --> 00:25:41.340
You pip install auto-walrus.


00:25:41.340 --> 00:25:44.980
So it's one word, but with a dash in the middle.


00:25:44.980 --> 00:25:47.300
And then you have this application,


00:25:47.300 --> 00:25:48.500
you can run it on a file.


00:25:48.500 --> 00:25:51.460
And like we've said, you can run it


00:25:51.460 --> 00:25:52.940
as a pre-commit hook as well,


00:25:52.940 --> 00:25:55.620
and it'll run on everything, but you can,


00:25:55.620 --> 00:25:56.660
and it just converts stuff.


00:25:56.660 --> 00:25:58.020
So if you have things like,


00:25:58.020 --> 00:26:01.380
here's a simple example of n equals 10.


00:26:01.380 --> 00:26:04.660
And then if n is greater than three, do something.


00:26:04.660 --> 00:26:06.500
And that converts,


00:26:07.580 --> 00:26:11.060
the auto-walrus will convert that to the walrus operator


00:26:11.060 --> 00:26:16.060
of if, you know, in colon equal 10 is greater than three.


00:26:16.060 --> 00:26:21.900
So, and I kind of like this being separate from other tools


00:26:21.900 --> 00:26:24.580
because some people just honestly haven't been,


00:26:24.580 --> 00:26:29.380
haven't came on board with this already, you know,


00:26:29.380 --> 00:26:31.700
embrace the walrus sort of thing,


00:26:31.700 --> 00:26:34.380
but it's a fun way to just try it out on your code


00:26:34.380 --> 00:26:37.880
and do a diff, get diff and see what it changed.


00:26:37.880 --> 00:26:39.120
And maybe you like it.


00:26:39.120 --> 00:26:41.340
Maybe it's a thing to do as a,


00:26:41.340 --> 00:26:44.720
as a, like a group code review thing to just talk to you


00:26:44.720 --> 00:26:47.960
and find out if you want to change it this way or not.


00:26:47.960 --> 00:26:48.800
- Yeah.


00:26:48.800 --> 00:26:50.300
- And then this reminded me of something.


00:26:50.300 --> 00:26:52.960
I'm like, we had, we had something like this before, right?


00:26:52.960 --> 00:26:57.960
And back in episode 82, wow.


00:26:57.960 --> 00:27:00.540
That was in 2018.


00:27:00.540 --> 00:27:05.540
we talked about Anthony Sotile's PyUpgrade.


00:27:05.540 --> 00:27:09.020
So, and that's, it's been a while.


00:27:09.020 --> 00:27:10.460
So it's, that's like four years ago.


00:27:10.460 --> 00:27:12.620
So I went and took a look again


00:27:12.620 --> 00:27:16.180
and I would like people to try to check out PyUpgrade too,


00:27:16.180 --> 00:27:18.140
because there's a whole, it's moved on.


00:27:18.140 --> 00:27:20.820
So it's not just, we recommended PyUpgrade


00:27:20.820 --> 00:27:23.020
for things like if you're upgrading to,


00:27:23.020 --> 00:27:25.380
from two to three sort of thing.


00:27:25.380 --> 00:27:28.300
- Was that back in the controversial legacy Python days?


00:27:28.300 --> 00:27:32.260
- Yeah, so there's, and there's always times to go


00:27:32.260 --> 00:27:35.040
and revisit old scripts and old applications


00:27:35.040 --> 00:27:36.980
that you're still maintaining and going,


00:27:36.980 --> 00:27:40.420
well, we don't really want to support the old Python,


00:27:40.420 --> 00:27:42.940
but our code serve looks like the old Python.


00:27:42.940 --> 00:27:44.780
So let's take a look at some of this stuff.


00:27:44.780 --> 00:27:48.500
And it'll do things like, you know, the set literal,


00:27:48.500 --> 00:27:50.500
some of the old, some of the old things of,


00:27:50.500 --> 00:27:55.500
and doing comprehensions for you and better,


00:27:56.860 --> 00:27:59.220
couple of inches are cleaner looking.


00:27:59.220 --> 00:28:01.860
And then, but there's also like different print styles.


00:28:01.860 --> 00:28:03.820
But one of the things I wanted to point out is


00:28:03.820 --> 00:28:05.980
if you go to the read me, you gotta scroll all the way down


00:28:05.980 --> 00:28:08.440
or at least halfway down and you get things


00:28:08.440 --> 00:28:10.300
like the three, six plus.


00:28:10.300 --> 00:28:12.380
So there's these plus options.


00:28:12.380 --> 00:28:15.580
So you can say if you're running three, six or above


00:28:15.580 --> 00:28:17.900
run that, but you also wanna do like,


00:28:17.900 --> 00:28:20.820
let's just go all the way down to like three, seven plus.


00:28:20.820 --> 00:28:25.300
And there was a kind of a new way to run sub process


00:28:25.300 --> 00:28:27.100
for instance, but you're, I mean,


00:28:27.100 --> 00:28:28.620
and it just finds some of these things


00:28:28.620 --> 00:28:30.060
and just changes it for you.


00:28:30.060 --> 00:28:31.020
So it's kind of cool.


00:28:31.020 --> 00:28:33.620
And some of the things you may not have remembered,


00:28:33.620 --> 00:28:38.620
the three in 3.8 plus the LRU cache,


00:28:38.620 --> 00:28:41.460
you used to have to do the LRU cache


00:28:41.460 --> 00:28:44.820
and call it as a function for your decorator,


00:28:44.820 --> 00:28:46.500
but now you don't have to do the prins.


00:28:46.500 --> 00:28:49.020
So just some cleanup like that.


00:28:49.020 --> 00:28:50.980
It's just nice.


00:28:50.980 --> 00:28:53.380
I try to run this every once in a while.


00:28:53.380 --> 00:28:56.100
And I guess public service announcement


00:28:56.100 --> 00:28:59.780
for this cool little project.


00:28:59.780 --> 00:29:00.740
- That is a cool project.


00:29:00.740 --> 00:29:02.500
And going through this huge long readme


00:29:02.500 --> 00:29:05.180
and looking at like as it gets later and later


00:29:05.180 --> 00:29:07.580
Python versions, it's kind of like a,


00:29:07.580 --> 00:29:08.860
here are just a bunch of examples


00:29:08.860 --> 00:29:11.620
of how Python has changed over the last few years.


00:29:11.620 --> 00:29:12.700
- Yeah.


00:29:12.700 --> 00:29:13.740
Ooh, neat.


00:29:13.740 --> 00:29:16.420
It has like 604 type rewrites.


00:29:16.420 --> 00:29:19.500
It'll rewrite union, the union operator


00:29:19.500 --> 00:29:21.620
to the bar operator.


00:29:21.620 --> 00:29:23.180
That's in 310 plus.


00:29:23.180 --> 00:29:24.140
That's nice.


00:29:24.140 --> 00:29:25.580
- Yeah.


00:29:25.580 --> 00:29:28.100
Well, we got 311 plus coming soon.


00:29:28.100 --> 00:29:29.940
- Yeah, yeah, that'll be fun.


00:29:29.940 --> 00:29:32.540
- Awesome.


00:29:32.540 --> 00:29:33.620
Well, that's all right, I was right.


00:29:33.620 --> 00:29:34.460
Got any extras?


00:29:34.460 --> 00:29:38.480
- You know, I was gonna have an extra,


00:29:38.480 --> 00:29:40.480
but I'm gonna save that for later.


00:29:40.480 --> 00:29:41.780
So no, I don't.


00:29:41.780 --> 00:29:42.940
Do you have any extras?


00:29:42.940 --> 00:29:45.980
- No extras, but I have a joke.


00:29:45.980 --> 00:29:48.220
I do a quick follow-up to this though.


00:29:48.220 --> 00:29:50.700
This is a hint of what's coming next week.


00:29:50.700 --> 00:29:52.460
I'm gonna talk, I think it's next week


00:29:52.460 --> 00:29:53.460
I don't want to cover this.


00:29:53.460 --> 00:29:55.700
Refurb, have you seen Refurb?


00:29:55.700 --> 00:29:56.540
>> I don't think so.


00:29:56.540 --> 00:29:59.020
>> Refurb is a similar one that we'll go through


00:29:59.020 --> 00:30:01.540
and give you recommendations of here's the most modern way


00:30:01.540 --> 00:30:02.420
to do your thing.


00:30:02.420 --> 00:30:07.420
So like if you said, if value is in bracket X, Y, Z,


00:30:07.420 --> 00:30:09.020
it's like that's a little less efficient


00:30:09.020 --> 00:30:12.260
than why make a mutable list,


00:30:12.260 --> 00:30:13.420
then you could make it a tuple.


00:30:13.420 --> 00:30:16.860
It's a little more efficient just to create the tuple.


00:30:16.860 --> 00:30:17.700
>> Nice.


00:30:17.700 --> 00:30:19.260
>> If value is in parenthesis,


00:30:19.260 --> 00:30:20.660
it'll suggest you change the parenthesis


00:30:20.660 --> 00:30:24.820
or suggest using some path operations


00:30:24.820 --> 00:30:26.700
instead of with open operations.


00:30:26.700 --> 00:30:28.640
Like instead of a context manager with open,


00:30:28.640 --> 00:30:32.740
do a bunch of stuff, you can just do path of thing.retext.


00:30:32.740 --> 00:30:34.260
You don't need to do the context manager,


00:30:34.260 --> 00:30:35.380
just bam, there it is.


00:30:35.380 --> 00:30:38.300
A bunch of cool stuff like that.


00:30:38.300 --> 00:30:41.140
So anyway, one more, and then also Flint.


00:30:41.140 --> 00:30:43.180
I've talked about Flint, but I love Flint.


00:30:43.180 --> 00:30:46.500
Super straightforward, it brings one of the most beloved


00:30:46.500 --> 00:30:49.340
things you can do for upgrading your Python


00:30:49.340 --> 00:30:52.460
is convert all your variations of string formatting


00:30:52.460 --> 00:30:55.540
to fstrings just across a whole directory of Python file.


00:30:55.540 --> 00:30:58.020
- Cool.


00:30:58.020 --> 00:30:59.500
- A lot of different things to be running together,


00:30:59.500 --> 00:31:01.340
but are you ready for our joke?


00:31:01.340 --> 00:31:02.500
- I am.


00:31:02.500 --> 00:31:06.220
- You had the comment about bring back the walrus,


00:31:06.220 --> 00:31:09.840
or I feel like that could be a cool t-shirt, right?


00:31:09.840 --> 00:31:11.700
- Yeah.


00:31:11.700 --> 00:31:12.540
- Yeah, absolutely.


00:31:12.540 --> 00:31:14.900
So I came across this place a little while ago.


00:31:14.900 --> 00:31:17.980
I don't have any particular one to recommend here,


00:31:17.980 --> 00:31:22.980
but this place that has like funny, geeky T-shirts.


00:31:22.980 --> 00:31:25.420
So I thought I'd just pull a couple of these up


00:31:25.420 --> 00:31:27.780
and see what you think about them.


00:31:27.780 --> 00:31:28.620
So some of them-


00:31:28.620 --> 00:31:30.920
- I like the first one, the Mordor.


00:31:30.920 --> 00:31:34.380
- The Mordor fun run,


00:31:34.380 --> 00:31:38.680
one does not simply walk in the middle earth.


00:31:38.680 --> 00:31:41.220
You have some of our data science friends out there.


00:31:41.220 --> 00:31:44.860
It has a graph of two things that are very similar.


00:31:44.860 --> 00:31:46.860
One is shark attacks.


00:31:46.860 --> 00:31:48.720
The other is ice cream cone sails,


00:31:48.720 --> 00:31:51.760
and it says correlation does not imply causation.


00:31:51.760 --> 00:31:53.920
Apparently, ice cream sails and shark attacks


00:31:53.920 --> 00:31:55.680
are closely correlated,


00:31:55.680 --> 00:31:58.080
'cause it's warm, you go in the water.


00:31:58.080 --> 00:32:00.080
It probably doesn't cause shark attacks.


00:32:00.080 --> 00:32:02.480
- It might.


00:32:02.480 --> 00:32:03.880
- It might.


00:32:03.880 --> 00:32:06.720
If you are more into math,


00:32:06.720 --> 00:32:09.400
you have the distance raptor divided by time raptor


00:32:09.400 --> 00:32:10.560
is the velocity raptor.


00:32:10.560 --> 00:32:16.720
But there's some really good programming ones in here.


00:32:16.720 --> 00:32:19.200
as well, like this one, for example, check this out.


00:32:19.200 --> 00:32:21.800
Go outside, the graphics are amazing.


00:32:21.800 --> 00:32:24.640
And the picture of the shirt is like a super low bit rate,


00:32:24.640 --> 00:32:25.660
like graphics.


00:32:25.660 --> 00:32:27.920
(laughing)


00:32:27.920 --> 00:32:31.160
Here's a good one.


00:32:31.160 --> 00:32:34.120
Some lab person pouring like beakers


00:32:34.120 --> 00:32:36.200
of clearly poisonous green stuff.


00:32:36.200 --> 00:32:38.600
And says, forget lab safety, I want superpowers.


00:32:38.600 --> 00:32:43.780
Oh boy, what about the, what do you think of this one,


00:32:43.780 --> 00:32:46.120
Brian here, the forecast for Alderaan?


00:32:46.120 --> 00:32:48.880
(laughing)


00:32:48.880 --> 00:32:51.800
So remember Alderaan is the home of Princess Leia


00:32:51.800 --> 00:32:53.880
that was blown up by the Death Star in Star Wars.


00:32:53.880 --> 00:32:55.960
And it says, "Five day forecast, Alderaan,


00:32:55.960 --> 00:32:57.900
"Monday, 72 and cloudy.


00:32:57.900 --> 00:32:59.140
"Tuesday, 74.


00:32:59.140 --> 00:33:00.880
"Wednesday, 15,000 degrees.


00:33:00.880 --> 00:33:02.240
"No Thursday or Friday."


00:33:02.240 --> 00:33:03.800
(laughing)


00:33:03.800 --> 00:33:06.120
Kind of mean, but it's also kind of awesome.


00:33:06.120 --> 00:33:06.960
- Yeah.


00:33:06.960 --> 00:33:11.680
- Yeah, this made me feel like one more,


00:33:11.680 --> 00:33:15.600
one more programming one.


00:33:15.600 --> 00:33:19.120
Oh yeah, let's see.


00:33:19.120 --> 00:33:22.320
Here's some good ones.


00:33:22.320 --> 00:33:23.680
One has a floppy disk.


00:33:23.680 --> 00:33:26.400
It says, "Kids today have no idea what this is."


00:33:26.400 --> 00:33:33.420
And then this one here, Brian, this is the last one.


00:33:33.420 --> 00:33:37.000
It's somebody holding a CD going into a drive


00:33:37.000 --> 00:33:38.600
and it just says, "Never forget."


00:33:38.600 --> 00:33:41.200
Never forget the CDs.


00:33:41.200 --> 00:33:43.520
- Yeah, CD drive.


00:33:43.520 --> 00:33:48.520
- I still love that old joke of a person calls into IT,


00:33:48.520 --> 00:33:51.720
help desk and says, I need some help


00:33:51.720 --> 00:33:53.720
because my cup holder's broken.


00:33:53.720 --> 00:33:58.440
- Yeah, just went in and spilled his drink all over me.


00:33:58.440 --> 00:33:59.840
Come on, man.


00:33:59.840 --> 00:34:01.640
You guys gotta get this thing fixed.


00:34:01.640 --> 00:34:06.480
Yeah, so you could spend a lot of time on this page.


00:34:06.480 --> 00:34:08.600
I'm not necessarily suggesting you get a shirt here


00:34:08.600 --> 00:34:11.240
or anything, but it's pretty awesome.


00:34:11.240 --> 00:34:13.120
- What makes me miss ThinkGeek?


00:34:13.120 --> 00:34:16.120
- I think he should have never folded,


00:34:16.120 --> 00:34:19.760
but we have other people coming up with good,


00:34:19.760 --> 00:34:22.000
humorous shirts, so that's good.


00:34:22.000 --> 00:34:23.760
- Yeah, Houston, we have dibs,


00:34:23.760 --> 00:34:25.160
putting the flag on the moon.


00:34:25.160 --> 00:34:27.740
(all laughing)


00:34:27.740 --> 00:34:30.400
- Dibs on the moon.


00:34:30.400 --> 00:34:32.800
- Got it.


00:34:32.800 --> 00:34:37.680
So a more serious, a couple quick follow up here.


00:34:37.680 --> 00:34:41.000
Marco Garelli, from the project that you talked about,


00:34:41.000 --> 00:34:43.240
the auto-auth says, yeah, I love PI upgrade.


00:34:43.240 --> 00:34:45.120
And Will McGoogan, hey guys,


00:34:45.120 --> 00:34:49.460
we could use the PI upgrade


00:34:49.460 --> 00:34:51.420
because Rich is dropping the support for 3.6.


00:34:51.420 --> 00:34:52.820
So just clean it up.


00:34:52.820 --> 00:34:53.660
- Yeah.


00:34:53.660 --> 00:34:57.920
And then I want to follow up with the first thing


00:34:57.920 --> 00:35:01.660
I was talking about, about the decorators.


00:35:01.660 --> 00:35:02.920
So Henry Schrader said,


00:35:02.920 --> 00:35:05.820
oh, I think I got the wrong one.


00:35:05.820 --> 00:35:07.860
But for that exact example,


00:35:07.860 --> 00:35:10.860
I'm not fond of making the test directory importable


00:35:10.860 --> 00:35:13.640
unless I have to, a mark might be better.


00:35:13.640 --> 00:35:17.620
And I guess I brushed that off too quickly.


00:35:17.620 --> 00:35:20.700
I think, I still am not sure how I would use this.


00:35:20.700 --> 00:35:22.540
If I were to put a bunch of these,


00:35:22.540 --> 00:35:25.420
like if I had a project wide decorators


00:35:25.420 --> 00:35:26.580
that I wanted to use,


00:35:26.580 --> 00:35:29.620
I don't know what the best way to do that would be.


00:35:29.620 --> 00:35:32.740
It might be a non-test file that I would import.


00:35:32.740 --> 00:35:33.580
I'll have to play with it.


00:35:33.580 --> 00:35:35.500
So thanks for Henry for bringing that up.


00:35:35.500 --> 00:35:37.520
I'm not quite sure how to deal with that problem.


00:35:37.520 --> 00:35:39.020
So, cool.


00:35:39.020 --> 00:35:40.260
- Indeed.


00:35:40.260 --> 00:35:43.220
- All right, well, should we call it a week?


00:35:43.220 --> 00:35:44.300
- Let's call it.


00:35:44.300 --> 00:35:46.620
- All right, thanks everybody for showing up.


00:35:46.620 --> 00:35:48.220
We'll talk to you next week.


00:35:48.220 --> 00:35:49.060
- Bye everyone.


00:35:49.060 --> 00:35:59.060
[BLANK_AUDIO]

