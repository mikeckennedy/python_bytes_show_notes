WEBVTT

00:00:00.000 --> 00:00:06.880
Hello YouTube. Hello Brian. Hello Seth. Hey. Hello. Hey, thanks for everyone watching the


00:00:06.880 --> 00:00:11.140
video here. If you got questions and you're watching live, throw them in the live chat.


00:00:11.140 --> 00:00:15.360
As you know, we'll try to make them part of the show. And with that, let's kick this off,


00:00:15.360 --> 00:00:22.420
you guys. Hello and welcome to Python Bytes, where we deliver Python news and headlines


00:00:22.420 --> 00:00:29.420
directly to your earbuds. This is the Big Episode 300, recorded September 6, 2022. I'm


00:00:29.420 --> 00:00:30.420
Michael Kennedy.


00:00:30.420 --> 00:00:31.420
And I'm Brian Okken.


00:00:31.420 --> 00:00:32.420
And I'm Seth Larson.


00:00:32.420 --> 00:00:40.100
And this episode is brought to you by Microsoft for Startups Founder's Hub. More about them


00:00:40.100 --> 00:00:42.940
later. Seth, welcome to the show.


00:00:42.940 --> 00:00:49.460
Thanks for having me. This is so exciting. I didn't realize it was going to be a 300.


00:00:49.460 --> 00:00:53.700
hit the jackpot. This is the big one. The big one for at least two more years, I would say.


00:00:53.700 --> 00:00:58.020
Yeah. And Brian, how about that? 300 episodes.


00:00:58.020 --> 00:01:01.060
That's amazing. When did we start this? We should look this up.


00:01:01.060 --> 00:01:09.220
Must have been a while ago. I don't know. I mean, that's 5.7692307 years. Like that's


00:01:09.220 --> 00:01:09.940
almost six years.


00:01:09.940 --> 00:01:11.380
Amazing.


00:01:11.380 --> 00:01:16.500
Actually, I have a reason that I'm so focused on floating point numbers and large numbers.


00:01:16.500 --> 00:01:18.340
We're going to get to that at the end of the show.


00:01:18.340 --> 00:01:23.140
2016 we started November 2016. That's cool. Absolutely. Yeah.


00:01:23.140 --> 00:01:28.980
Very cool. Indeed. David says, congrats on 300. Thank you, David.


00:01:28.980 --> 00:01:32.460
Thank you for being here. Indeed. Awesome. All right.


00:01:32.460 --> 00:01:36.100
I, I've been thinking about wheels and packages lately.


00:01:36.100 --> 00:01:39.860
Yeah. You were thinking about the phrase rolling,


00:01:39.860 --> 00:01:43.340
rolling wheel gathers no moss or something like that.


00:01:43.340 --> 00:01:46.820
How it goes in programming. No, I wasn't thinking about that at all.


00:01:47.060 --> 00:01:48.140
- Yeah, well, what were you thinking about?


00:01:48.140 --> 00:01:48.980
Tell us about it.


00:01:48.980 --> 00:01:51.500
- Okay, so I was thinking about actually


00:01:51.500 --> 00:01:52.900
using different packaging tools


00:01:52.900 --> 00:01:56.820
'cause pyproject.toml is supported by tons of stuff now.


00:01:56.820 --> 00:01:59.860
Well, by tons of stuff, I mean like three that I know of.


00:01:59.860 --> 00:02:04.420
So we've got Flit, well, Poetry also,


00:02:04.420 --> 00:02:05.380
but I don't use Poetry.


00:02:05.380 --> 00:02:09.020
Anyway, I've been using Flit and Hatch and Setup tools,


00:02:09.020 --> 00:02:11.140
which are all really easy to use


00:02:11.140 --> 00:02:13.540
with pyproject.toml lately.


00:02:13.540 --> 00:02:17.500
And I've been using like the flit method of building wheels


00:02:17.500 --> 00:02:22.420
and hatch and Python, the build package also Python


00:02:22.420 --> 00:02:24.260
or the, if you just pip install build,


00:02:24.260 --> 00:02:27.500
you can do Python dash M build to build stuff,


00:02:27.500 --> 00:02:29.100
which is fun.


00:02:29.100 --> 00:02:30.960
But since I've been building all these,


00:02:30.960 --> 00:02:33.680
I've been using a lot of tools to try to like check


00:02:33.680 --> 00:02:36.140
these wheels to make sure that they're the packages


00:02:36.140 --> 00:02:39.300
and wheels are what I expect is inside.


00:02:39.300 --> 00:02:42.380
So there's this, there's a few tools I'm using.


00:02:42.380 --> 00:02:44.980
One is wheel inspect.


00:02:44.980 --> 00:02:47.900
And this one, actually, it's kind of cool.


00:02:47.900 --> 00:02:50.380
You can use it programmatically if you want.


00:02:50.380 --> 00:02:51.820
I'm not, I'm using the,


00:02:51.820 --> 00:02:56.020
it comes with this thing called wheel to Jason.


00:02:56.020 --> 00:02:58.740
And it, if you run that on a wheel


00:02:58.740 --> 00:03:00.580
and you give it a wheel name,


00:03:00.580 --> 00:03:04.540
it just pops out all like dumps the Jason information


00:03:04.540 --> 00:03:06.120
about the wheel.


00:03:06.120 --> 00:03:10.260
And I've been using this to just,


00:03:10.260 --> 00:03:12.420
I'll use different ways to build things


00:03:12.420 --> 00:03:14.940
and then dump this into a file and do a diff


00:03:14.940 --> 00:03:16.500
to just sort of see what's going on,


00:03:16.500 --> 00:03:20.540
to make sure I got the description correct


00:03:20.540 --> 00:03:23.140
or everything's right.


00:03:23.140 --> 00:03:25.940
And just 'cause I'm curious if all of these tools


00:03:25.940 --> 00:03:27.480
are building this kind of the same thing,


00:03:27.480 --> 00:03:29.940
and they kind of are, there's slight differences,


00:03:29.940 --> 00:03:32.560
but it's neat that there's so many options now.


00:03:32.560 --> 00:03:36.460
So Wheel Inspect is really cool for wheels.


00:03:36.460 --> 00:03:40.840
I'm also using a thing called check wheel contents.


00:03:40.840 --> 00:03:43.680
And this is kind of like a linter for wheels.


00:03:43.680 --> 00:03:45.820
So if you throw this at,


00:03:45.820 --> 00:03:48.100
because it's possible to make valid wheels


00:03:48.100 --> 00:03:51.020
that don't have really anything in them,


00:03:51.020 --> 00:03:53.140
or they don't have the thing that you thought was in there.


00:03:53.140 --> 00:03:56.860
So this is a linter that goes through


00:03:56.860 --> 00:03:59.820
and it gives you a whole bunch of warnings and stuff.


00:03:59.820 --> 00:04:02.820
If you can kind of look through like W001,


00:04:02.820 --> 00:04:07.820
W001 wheel contains a PYC and PYO files.


00:04:07.820 --> 00:04:13.540
Like somehow you've configured it wrong to grab that.


00:04:13.540 --> 00:04:16.180
And I don't know how you would do that for the lot of stuff,


00:04:16.180 --> 00:04:18.140
but with Flit, if you have,


00:04:18.140 --> 00:04:21.740
possibly if you accidentally threw those in your Git,


00:04:21.740 --> 00:04:24.460
because Flit just grabs anything that's checked in,


00:04:24.460 --> 00:04:25.740
I think, or committed.


00:04:25.740 --> 00:04:29.260
Duplicate files, it checks for that.


00:04:29.260 --> 00:04:30.820
So it checks for a whole bunch of stuff.


00:04:30.820 --> 00:04:33.240
So this is handy just to check as well.


00:04:33.240 --> 00:04:35.560
But the powerhouse that I'm using,


00:04:35.560 --> 00:04:37.140
of course, is just TOCS.


00:04:37.140 --> 00:04:38.460
I kind of wanted to cover the other ones


00:04:38.460 --> 00:04:39.460
'cause they're fun,


00:04:39.460 --> 00:04:40.700
but I wanted to remind people


00:04:40.700 --> 00:04:42.380
that one of the great things about TOCS


00:04:42.380 --> 00:04:45.940
is it builds things on its own.


00:04:45.940 --> 00:04:48.900
So when you run TOCS on a package,


00:04:48.900 --> 00:04:50.300
it will build the package,


00:04:50.300 --> 00:04:52.380
then install it into an environment,


00:04:52.380 --> 00:04:54.100
and then you run your tests.


00:04:54.100 --> 00:04:56.060
We think of it as more of a test runner,


00:04:56.060 --> 00:04:58.300
but it does that whole packaging loop also.


00:04:59.740 --> 00:05:02.500
And then the fourth way, I don't have a slide for this,


00:05:02.500 --> 00:05:05.000
but the fourth way that I've been doing


00:05:05.000 --> 00:05:07.820
is you can just push them into a Git repo


00:05:07.820 --> 00:05:11.300
and then you can do the pip install git plus


00:05:11.300 --> 00:05:13.580
and then the repo name thing.


00:05:13.580 --> 00:05:16.900
And pip will use your packaging tools


00:05:16.900 --> 00:05:19.780
to create the wheel before it installs it.


00:05:19.780 --> 00:05:22.500
So that's another way to check your packaging.


00:05:22.500 --> 00:05:26.220
So, anyway.


00:05:26.220 --> 00:05:29.100
- I'm always super paranoid whenever I configure something


00:05:29.100 --> 00:05:29.940
to do with packages.


00:05:29.940 --> 00:05:33.640
So my method tends to be just unzip the wheel


00:05:33.640 --> 00:05:37.120
as a zip file and see what's in there, see what landed.


00:05:37.120 --> 00:05:38.360
- I didn't try that.


00:05:38.360 --> 00:05:39.440
So what does that do?


00:05:39.440 --> 00:05:40.280
If you just unzip it.


00:05:40.280 --> 00:05:41.440
- Way number five, Brian.


00:05:41.440 --> 00:05:42.280
- Yeah.


00:05:42.280 --> 00:05:45.880
So does it just zip, unpacks it in place then?


00:05:45.880 --> 00:05:47.800
- Yeah, wheels are technically zip files.


00:05:47.800 --> 00:05:50.280
So you can unzip them and just inspect


00:05:50.280 --> 00:05:51.600
what made it in there.


00:05:51.600 --> 00:05:52.680
- Okay.


00:05:52.680 --> 00:05:54.520
- Yeah, put a dot zip extension on it


00:05:54.520 --> 00:05:57.080
and then you can just put zip tools on it and off it goes.


00:05:57.080 --> 00:06:00.720
- So it must store the metadata somewhere then also though.


00:06:00.720 --> 00:06:03.200
- Yeah, there's a top level like metadata file


00:06:03.200 --> 00:06:05.760
that says all the things that it's about.


00:06:05.760 --> 00:06:08.900
- I love the pun in the chat.


00:06:08.900 --> 00:06:12.040
We got from PyLang, "Wheel good stuff, Brian."


00:06:12.040 --> 00:06:14.700
(both laughing)


00:06:14.700 --> 00:06:18.000
- Brian, that was real good stuff.


00:06:18.000 --> 00:06:19.940
Thanks for bringing it.


00:06:19.940 --> 00:06:24.760
Yeah, so onto the next one for mine, huh?


00:06:24.760 --> 00:06:25.600
- Yeah.


00:06:25.600 --> 00:06:29.520
- Before we jump onto it, you see I have my race jersey on


00:06:29.520 --> 00:06:32.200
because the Portland Grand Prix IndyCar race


00:06:32.200 --> 00:06:35.120
was here this weekend, so people listening


00:06:35.120 --> 00:06:36.320
and were close by, they missed it,


00:06:36.320 --> 00:06:39.400
but next September, be sure to go, it was really, really fun.


00:06:39.400 --> 00:06:41.440
Three days of racing, very nice.


00:06:41.440 --> 00:06:43.120
- Were they fast cars?


00:06:43.120 --> 00:06:44.200
- They were, yeah, it was IndyCars,


00:06:44.200 --> 00:06:46.200
they were like, they were very fast.


00:06:46.200 --> 00:06:51.200
But they had no AI, no artificial intelligence yet


00:06:51.200 --> 00:06:55.560
from what I understand, but if you look over on fast.ai,


00:06:55.560 --> 00:07:00.560
there's something that anybody who does proper data science


00:07:00.560 --> 00:07:03.280
is gonna be pretty jazzed about.


00:07:03.280 --> 00:07:08.280
So Jupyter notebooks are notoriously bad citizens


00:07:08.280 --> 00:07:13.120
of source control and get and tools like that.


00:07:13.120 --> 00:07:18.160
The reasons are basically whenever you have a notebook file,


00:07:18.160 --> 00:07:19.480
if you've ever run it,


00:07:19.480 --> 00:07:23.040
the output and the order in which the cells were run


00:07:23.960 --> 00:07:28.960
and the number of times the cells was run is stored in there.


00:07:28.960 --> 00:07:33.760
That's not great if someone gets the file and runs it,


00:07:33.760 --> 00:07:35.760
someone else gets it and runs it,


00:07:35.760 --> 00:07:38.520
and then you try to put it into source control.


00:07:38.520 --> 00:07:40.480
That's a problem, right?


00:07:40.480 --> 00:07:43.480
I mean, when you and I work on our code,


00:07:43.480 --> 00:07:45.640
we have Python files, the output goes somewhere,


00:07:45.640 --> 00:07:47.840
we check it in, the source code goes in.


00:07:47.840 --> 00:07:51.460
But with Jupyter, the outputs go in.


00:07:51.460 --> 00:07:54.400
not just the outputs, but the memory address


00:07:54.400 --> 00:07:57.220
of some of the object used in the address.


00:07:57.220 --> 00:07:59.200
So even if it's you running it twice,


00:07:59.200 --> 00:08:00.840
you get merge conflicts,


00:08:00.840 --> 00:08:03.120
which is not the coolest thing ever.


00:08:03.120 --> 00:08:06.640
I suspect that this goes by the name


00:08:06.640 --> 00:08:08.880
the Jupyter Plus Git Problem,


00:08:08.880 --> 00:08:10.920
where really it should be the Jupyter Plus


00:08:10.920 --> 00:08:15.560
VS, Visual, Version Control System, VCS,


00:08:15.560 --> 00:08:17.560
because it doesn't matter what you're using.


00:08:17.560 --> 00:08:21.360
Anything that just diffs files is gonna hate this.


00:08:21.360 --> 00:08:26.000
Anyway, the article and the feature really that I want to talk about is the Jupyter Git


00:08:26.000 --> 00:08:32.200
problem is now solved from Jeremy Howard over at fast.ai.


00:08:32.200 --> 00:08:33.960
The solution may surprise you.


00:08:33.960 --> 00:08:40.820
So it talks a little bit about the challenges here and it says, it's interesting, it speaks


00:08:40.820 --> 00:08:45.360
in terms that are not really developer oriented.


00:08:45.360 --> 00:08:47.580
It speaks more in terms of like end users.


00:08:47.580 --> 00:08:50.820
or like the way that maybe a first year science student


00:08:50.820 --> 00:08:52.840
might experience what the problem is,


00:08:52.840 --> 00:08:57.060
not the way a seasoned data scientist would.


00:08:57.060 --> 00:08:59.660
Like for example, here's the problem.


00:08:59.660 --> 00:09:01.860
The problem is when you're collaborating with others


00:09:01.860 --> 00:09:06.100
over Git, you literally can't load your notebook


00:09:06.100 --> 00:09:08.940
if you both try to check it in because it's broken.


00:09:08.940 --> 00:09:09.940
Well, what does broken mean?


00:09:09.940 --> 00:09:13.180
Broken means it has merge conflicts written into it.


00:09:13.180 --> 00:09:16.540
That's really the problem is you can easily solve


00:09:16.540 --> 00:09:18.240
this problem if you accept their changes


00:09:18.240 --> 00:09:19.940
or accept your changes.


00:09:19.940 --> 00:09:21.440
But then you're losing data, right?


00:09:21.440 --> 00:09:22.900
So anyway, this is OK.


00:09:22.900 --> 00:09:24.380
Let's look inside.


00:09:24.380 --> 00:09:26.740
Well, there's JSON, and then there's the head,


00:09:26.740 --> 00:09:31.180
and then the SHA diff error.


00:09:31.180 --> 00:09:32.880
So I kind of already described this,


00:09:32.880 --> 00:09:34.980
but they do go into examples of--


00:09:34.980 --> 00:09:39.300
for example, when you're talking about--


00:09:39.300 --> 00:09:40.780
hold on one second.


00:09:40.780 --> 00:09:47.020
For example, when you're talking about matplotlib


00:09:47.020 --> 00:09:52.620
or something like that, you'll have things like matplotlib.axes.subplot.axes


00:09:52.620 --> 00:09:59.100
subplot at some memory address, which is suboptimal, let's say.


00:09:59.100 --> 00:10:01.820
Yeah, there's a lot of axes.


00:10:01.820 --> 00:10:03.340
That's right.


00:10:03.340 --> 00:10:05.900
Then non-determining outputs and so on.


00:10:05.900 --> 00:10:10.660
It says, OK, we identified two categories of problems here.


00:10:10.660 --> 00:10:13.340
And I would like to say this is only accurate


00:10:13.340 --> 00:10:18.340
if you have zero based indexes when you start counting.


00:10:18.340 --> 00:10:24.000
So we've identified in Michael's term, three problems here.


00:10:24.000 --> 00:10:28.600
One, Jupyter Notebook formats are fundamentally incompatible


00:10:28.600 --> 00:10:30.300
with version control.


00:10:30.300 --> 00:10:31.460
Problem zero.


00:10:31.460 --> 00:10:34.900
Problem one, Git conflicts lead to broken notebooks.


00:10:34.900 --> 00:10:35.900
There we go.


00:10:35.900 --> 00:10:39.780
And many of these, almost all of these conflicts


00:10:39.780 --> 00:10:44.260
are unnecessary because metadata, like the environment,


00:10:44.260 --> 00:10:46.500
the machine name and stuff that it was run on,


00:10:46.500 --> 00:10:48.960
as well as the memory address of the objects


00:10:48.960 --> 00:10:53.060
is stored inside the file.


00:10:53.060 --> 00:10:55.020
So what do you do?


00:10:55.020 --> 00:10:57.420
Well, there was this thing called


00:10:57.420 --> 00:11:00.540
nbdev that would allow you to clean the file.


00:11:00.540 --> 00:11:02.540
I think it was nbdev that would let you clean it.


00:11:02.540 --> 00:11:04.220
There's other ways to clean it within Jupyter as well.


00:11:04.220 --> 00:11:07.260
You can say, I'm only going to commit to version control


00:11:07.260 --> 00:11:09.860
the empty version, right?


00:11:09.860 --> 00:11:11.700
You can say clear all cells and then commit that.


00:11:11.700 --> 00:11:13.100
Then that would be fine


00:11:13.100 --> 00:11:15.400
'cause you're wiping all that data out.


00:11:15.400 --> 00:11:21.460
However, sometimes that data is incredibly hard to compute.


00:11:21.460 --> 00:11:22.540
Right, I have a picture.


00:11:22.540 --> 00:11:24.180
The picture comes from an hour


00:11:24.180 --> 00:11:27.380
of doing training machine models


00:11:27.380 --> 00:11:29.980
and then processing a gig of data


00:11:29.980 --> 00:11:31.500
and then looking at this picture.


00:11:31.500 --> 00:11:34.460
If I don't clear it and I check it in,


00:11:34.460 --> 00:11:36.660
the picture's right there, you know what I mean?


00:11:36.660 --> 00:11:39.140
or some of the outputs are right there.


00:11:39.140 --> 00:11:41.580
So there's a huge reason to not clear it


00:11:41.580 --> 00:11:44.260
because it might be incredibly hard to regenerate it.


00:11:44.260 --> 00:11:45.740
Maybe on the system you're on,


00:11:45.740 --> 00:11:48.020
you can't even run the code necessary, right?


00:11:48.020 --> 00:11:50.760
You don't have access to the database or whatever.


00:11:50.760 --> 00:11:51.860
So here's what they did.


00:11:51.860 --> 00:11:56.860
There's a new NBDev named NBDev2 as part of the name,


00:11:56.860 --> 00:11:59.380
not a version, but the name.


00:11:59.380 --> 00:12:03.460
And this comes from the folks at Fast.ai.


00:12:03.460 --> 00:12:04.420
And here's how it works.


00:12:04.420 --> 00:12:06.920
It has a new merge driver for Git.


00:12:06.920 --> 00:12:12.140
Okay, instead of like processing the files,


00:12:12.140 --> 00:12:15.060
it says, what we're gonna do is we're gonna set up hooks


00:12:15.060 --> 00:12:16.900
in Git so when there is a merge,


00:12:16.900 --> 00:12:20.180
our special Python code that understands notebooks


00:12:20.180 --> 00:12:22.480
will present a different view for you.


00:12:22.480 --> 00:12:26.340
I know. (laughs)


00:12:26.340 --> 00:12:28.580
And there's a new save hook for Jupyter


00:12:28.580 --> 00:12:31.560
that automatically removes the unnecessary metadata


00:12:31.560 --> 00:12:33.860
and non-deterministic cell output.


00:12:33.860 --> 00:12:37.220
So what you'll get is when you open up this conflicting


00:12:37.220 --> 00:12:41.180
notebook in Jupyter, you'll actually


00:12:41.180 --> 00:12:45.780
have the diff shown instead of having a corrupted notebook.


00:12:45.780 --> 00:12:48.420
Additionally, it drops out the metadata.


00:12:48.420 --> 00:12:50.900
So you get these unnecessary ones are just kind of gone.


00:12:50.900 --> 00:12:53.500
So it talks about some interesting things


00:12:53.500 --> 00:12:55.140
that you can do there.


00:12:55.140 --> 00:12:59.220
You've got to run nbdev install hooks to get it set up


00:12:59.220 --> 00:13:02.460
and some other various things.


00:13:02.460 --> 00:13:04.700
There's also a lot of history on what has been done before,


00:13:04.700 --> 00:13:06.620
what are some of the other alternatives,


00:13:06.620 --> 00:13:10.620
but the big takeaway is the folks over at Fast.ai


00:13:10.620 --> 00:13:12.620
have been using this internally for several months


00:13:12.620 --> 00:13:15.580
and they say it has transformed their workflow.


00:13:15.580 --> 00:13:17.800
It's totally solved this problem.


00:13:17.800 --> 00:13:19.860
And the reason they care so much


00:13:19.860 --> 00:13:21.100
is almost all of their work,


00:13:21.100 --> 00:13:23.540
their unit tests, their documentation, their actual code,


00:13:23.540 --> 00:13:24.580
everything is in notebooks.


00:13:24.580 --> 00:13:26.820
They're like all in on notebooks.


00:13:26.820 --> 00:13:29.500
So having Git be a first-class citizen


00:13:29.500 --> 00:13:31.320
is obviously important.


00:13:31.320 --> 00:13:33.900
So I recommend people check this out.


00:13:33.900 --> 00:13:36.420
Postscript side bonus here is


00:13:36.420 --> 00:13:39.120
there's another thing called review in B.


00:13:39.120 --> 00:13:44.680
Review in B is about reviewing, say, a GitHub pull request.


00:13:44.680 --> 00:13:48.160
So somebody fixes a bug in a notebook and they do a PR


00:13:48.160 --> 00:13:51.100
and say, oh, you were generating this graph wrong.


00:13:51.100 --> 00:13:52.760
You should have passed this parameter,


00:13:52.760 --> 00:13:54.960
which means a totally different thing.


00:13:54.960 --> 00:13:56.460
Wouldn't it be nice to have a picture


00:13:56.460 --> 00:13:58.680
of the before graph and the after graph?


00:13:58.680 --> 00:14:01.840
with this review in B, that's exactly what you get.


00:14:01.840 --> 00:14:04.280
So you get your code diff,


00:14:04.280 --> 00:14:06.400
but then you also get the output diff,


00:14:06.400 --> 00:14:08.040
which might be a Matplotlib picture.


00:14:08.040 --> 00:14:09.000
Isn't that cool?


00:14:09.000 --> 00:14:10.540
- That's really cool.


00:14:10.540 --> 00:14:13.600
- I'd be surprised if GitHub doesn't have this eventually.


00:14:13.600 --> 00:14:16.520
I mean, this seems like a logical next step.


00:14:16.520 --> 00:14:18.920
- Yeah, it sure does, right?


00:14:18.920 --> 00:14:20.320
Notebooks are so important.


00:14:20.320 --> 00:14:21.160
- Yeah.


00:14:21.160 --> 00:14:22.920
- Right, but it's not just GitHub though.


00:14:22.920 --> 00:14:25.880
So some people are using Git just straight, so.


00:14:25.880 --> 00:14:26.720
- Exactly.


00:14:26.720 --> 00:14:29.240
or GitLab or whatever.


00:14:29.240 --> 00:14:32.400
- This is pretty neat.


00:14:32.400 --> 00:14:37.800
One of the things I really like about this


00:14:37.800 --> 00:14:42.000
is all the other solutions that we've tried and everything.


00:14:42.000 --> 00:14:43.760
I mean, data science people are really good


00:14:43.760 --> 00:14:46.000
about covering that sort of stuff


00:14:46.000 --> 00:14:47.600
where a lot of other people are like,


00:14:47.600 --> 00:14:50.120
"Hey, I came up with a problem, I solved it."


00:14:50.120 --> 00:14:51.880
Maybe some other people have solved it also,


00:14:51.880 --> 00:14:53.240
but yeah, whatever.


00:14:55.520 --> 00:14:56.520
- Exactly.


00:14:56.520 --> 00:14:58.600
- I will say this set of tools


00:14:58.600 --> 00:15:01.800
like exactly solves a problem I had not that long ago.


00:15:01.800 --> 00:15:02.640
So this is great.


00:15:02.640 --> 00:15:04.840
- Okay, so this really resonates with you, huh?


00:15:04.840 --> 00:15:05.960
- This resonates with me, yeah.


00:15:05.960 --> 00:15:08.400
Using notebooks for documentation


00:15:08.400 --> 00:15:11.040
and as a part of like an integration test suite,


00:15:11.040 --> 00:15:12.680
like this is great.


00:15:12.680 --> 00:15:14.300
- Yeah, very cool.


00:15:14.300 --> 00:15:15.520
Piling on the audience's,


00:15:15.520 --> 00:15:17.920
ah, so it looks like you can actually resolve


00:15:17.920 --> 00:15:19.560
merge conflicts inside the notebooks


00:15:19.560 --> 00:15:21.480
rather than traditionally ignore conflicts.


00:15:21.480 --> 00:15:22.520
I believe so as well.


00:15:22.520 --> 00:15:25.800
I think there's like a merge inside of Jupyter


00:15:25.800 --> 00:15:27.000
type of thing you can do.


00:15:27.000 --> 00:15:29.080
- Hmm, neat.


00:15:29.080 --> 00:15:31.640
- Yeah, that's it, I haven't totally used it.


00:15:31.640 --> 00:15:34.720
Anyway, if you're into data science or,


00:15:34.720 --> 00:15:36.280
put that aside, if you do Jupyter


00:15:36.280 --> 00:15:38.000
and you care about source control,


00:15:38.000 --> 00:15:39.300
this looks really helpful.


00:15:39.300 --> 00:15:43.000
- Which you should care about source control.


00:15:43.000 --> 00:15:44.180
- Yes, exactly.


00:15:44.180 --> 00:15:45.020
- Yeah.


00:15:45.020 --> 00:15:46.160
- So if you use Jupyter.


00:15:46.160 --> 00:15:49.360
Full stop, there you go.


00:15:49.360 --> 00:15:50.440
Awesome, all right.


00:15:50.440 --> 00:15:51.280
Seth, over to you.


00:15:51.280 --> 00:15:54.280
Before we jump into the first topic you want to talk about,


00:15:54.280 --> 00:15:58.440
though, just real quick, we were so excited about episode 300,


00:15:58.440 --> 00:16:00.840
I didn't give you a chance to introduce yourself properly.


00:16:00.840 --> 00:16:02.760
So give us a quick background on you


00:16:02.760 --> 00:16:04.680
and then tell us about your item.


00:16:04.680 --> 00:16:08.400
- Yeah, so I'm currently an engineer at Elastic,


00:16:08.400 --> 00:16:11.080
working on the language clients team.


00:16:11.080 --> 00:16:14.740
Previously, I was the maintainer of the well-known


00:16:14.740 --> 00:16:18.200
within the Python community, the Elasticsearch client.


00:16:18.200 --> 00:16:21.400
Now I'm doing tech leadership for that same team.


00:16:21.400 --> 00:16:24.560
And then in terms of open source work,


00:16:24.560 --> 00:16:27.720
I am a maintainer of many different Python packages,


00:16:27.720 --> 00:16:29.480
most notably your lib three,


00:16:29.480 --> 00:16:32.120
which is most downloaded Python package.


00:16:32.120 --> 00:16:36.400
And it's one of the dependencies of requests and Bodo


00:16:36.400 --> 00:16:39.480
and a whole bunch of other really foundational packages.


00:16:39.480 --> 00:16:40.680
- That's incredible.


00:16:40.680 --> 00:16:43.480
Does it make you nervous to make changes to it?


00:16:43.480 --> 00:16:45.240
- Oh yeah, so the very first time


00:16:45.240 --> 00:16:47.960
that I became lead maintainer and had to make a release,


00:16:47.960 --> 00:16:51.880
It was, I actually spent multiple hours just kind of


00:16:51.880 --> 00:16:54.360
looking through the wheels and the source distributions


00:16:54.360 --> 00:16:55.840
and making sure that everything was right.


00:16:55.840 --> 00:16:58.320
It was a tough day, honestly.


00:16:58.320 --> 00:17:00.960
- Yeah, so that chat with that Brian opened with you,


00:17:00.960 --> 00:17:02.520
you've been there as well, huh?


00:17:02.520 --> 00:17:07.240
All right, well, what's your first item for us?


00:17:07.240 --> 00:17:10.840
- Yeah, so my first item is about trust stores.


00:17:10.840 --> 00:17:13.500
So this is about like certificates that you use


00:17:13.500 --> 00:17:16.800
to verify HTTPS connections.


00:17:16.800 --> 00:17:23.100
And so this is a library that me and David Glick have worked together to implement.


00:17:23.100 --> 00:17:29.440
And it's essentially trying to solve the problem of certify with Python


00:17:29.440 --> 00:17:36.320
and how it kind of interacts with certificates that aren't necessarily trusted by the greater world.


00:17:36.320 --> 00:17:40.160
So for example, if you have like a corporate proxy,


00:17:40.160 --> 00:17:43.440
if your company is installing a certificate on your behalf,


00:17:43.440 --> 00:17:47.960
enable to do proxying of some sort. Certified just doesn't


00:17:47.960 --> 00:17:51.400
work with that. And you get these errors that are kind of


00:17:51.400 --> 00:17:54.480
insurmountable, you get errors that require really low level


00:17:54.480 --> 00:17:57.760
debugging knowledge to figure out. And so we went and


00:17:57.760 --> 00:18:01.000
anything, anything that has to do with certificates. Oh, it is


00:18:01.000 --> 00:18:03.920
wrong. It's just like, well, that's never gonna work. I guess


00:18:03.920 --> 00:18:06.760
we're done here. It's just so hard to understand, right?


00:18:06.760 --> 00:18:11.480
I'm on a campaign to make it so no one on the world needs to


00:18:11.480 --> 00:18:15.240
type verify equals false ever again. That's my mission.


00:18:15.240 --> 00:18:20.020
So awesome. Also you spoke about certify like tell us what give us the background. I'm not


00:18:20.020 --> 00:18:26.940
sure we all know what certified as sure. Yes. Certify is essentially every web browser like


00:18:26.940 --> 00:18:32.440
Chrome and Firefox and all that. They have a bundle a group of certificates that they


00:18:32.440 --> 00:18:38.580
are marking as these are trusted and they kind of bundle those along with every single


00:18:38.580 --> 00:18:45.140
web browser, right? And so Mozilla, because it's open source, it open sources its TrustStore.


00:18:45.140 --> 00:18:52.980
And so what Certify is, is it's a small, really thin wrapper Python package around that bundle.


00:18:52.980 --> 00:19:02.140
And it allows Python to make HTTPS connections to websites essentially without having to


00:19:02.140 --> 00:19:07.420
like rely on a certificate TrustStore being configured manually by the user. And so a


00:19:07.420 --> 00:19:12.420
A lot of times because Python is installed on Windows or macOS,


00:19:12.420 --> 00:19:16.380
but is relying on open SSL for a lot of its TLS.


00:19:16.380 --> 00:19:20.500
It really requires a file to be there.


00:19:20.500 --> 00:19:25.000
Like open SSL doesn't know anything about the system certificate trust or any of


00:19:25.000 --> 00:19:28.060
that. It's very, it requires a file to be there.


00:19:28.060 --> 00:19:30.140
And so certify is solving that problem.


00:19:30.140 --> 00:19:32.020
I see. So if I went and installed it,


00:19:32.020 --> 00:19:35.620
if I was on like Windows and installed it into the trusted root store or


00:19:35.620 --> 00:19:37.820
something like that, it wouldn't, that wouldn't count,


00:19:37.820 --> 00:19:38.820
that wouldn't be enough.


00:19:38.820 --> 00:19:39.820
It wouldn't be enough.


00:19:39.820 --> 00:19:40.820
Yeah.


00:19:40.820 --> 00:19:41.820
Okay.


00:19:41.820 --> 00:19:45.700
You would, there is a whole bunch of other things that you get also by using these native


00:19:45.700 --> 00:19:50.480
operating system APIs for certificates like auto updates.


00:19:50.480 --> 00:19:51.780
It can be centrally managed.


00:19:51.780 --> 00:19:57.300
So you know, your IT department can click a button and update everyone's system trust


00:19:57.300 --> 00:19:58.300
store.


00:19:58.300 --> 00:20:02.620
So yeah, there's a lot of really good benefits to using the system trust store instead of


00:20:02.620 --> 00:20:05.100
this Python managed file.


00:20:05.100 --> 00:20:08.140
And this article kind of goes into the nitty gritty of that.


00:20:08.140 --> 00:20:16.060
But the big announcement for this project was that pip actually, with the version 22.2


00:20:16.060 --> 00:20:22.260
release, added support, experimental support for using this library instead of Certify


00:20:22.260 --> 00:20:24.660
to verify HTTPS.


00:20:24.660 --> 00:20:30.300
And so what this allowed people to do is try out TrustStore optionally, right, instead


00:20:30.300 --> 00:20:32.660
of switching it to a default.


00:20:32.660 --> 00:20:38.900
If they're experiencing this class of errors with installing Python packages or upgrading Python packages,


00:20:38.900 --> 00:20:41.140
they can use one flag.


00:20:41.140 --> 00:20:46.740
It's, I believe it's listed, either way it would be listed here.


00:20:46.740 --> 00:20:50.460
So you do --use-feature=truststore.


00:20:50.460 --> 00:20:56.060
And that will, you'll recognize that use feature flag for the 2020 resolver.


00:20:56.060 --> 00:20:57.700
That's another feature flag that they use.


00:20:57.700 --> 00:21:00.260
So this trust store feature flag is the same thing.


00:21:01.060 --> 00:21:04.700
it will, if TrustStore is installed on your system,


00:21:04.700 --> 00:21:07.140
it will use that instead of certify,


00:21:07.140 --> 00:21:11.960
and it allows you to get around the errors that you can see when you have a corporate network involved.


00:21:11.960 --> 00:21:17.980
So yeah, this is kind of the big thing that I'm really excited about,


00:21:17.980 --> 00:21:22.660
and we're really hoping that in the future we can add this to Python,


00:21:22.660 --> 00:21:24.820
maybe make this a default for requests,


00:21:24.820 --> 00:21:29.820
like there's a whole bunch of different really interesting things that we can go forward with


00:21:29.820 --> 00:21:34.500
if we can prove that, hey, this is useful to these users, right?


00:21:34.500 --> 00:21:36.060
Yeah, yeah, fantastic.


00:21:36.060 --> 00:21:40.660
So if I say --use feature=truststore,


00:21:40.660 --> 00:21:44.740
do I have to previously have pip installed truststore or something like that?


00:21:44.740 --> 00:21:47.140
You do have to have previously installed truststore.


00:21:47.140 --> 00:21:51.380
So the package is relatively new, it's less than a year old.


00:21:51.380 --> 00:21:56.940
And so to ensure that we're able to keep things moving,


00:21:56.940 --> 00:21:58.580
because it's experimental,


00:21:58.580 --> 00:22:02.340
We didn't want to bundle with pip, their release cycle is a lot longer.


00:22:02.340 --> 00:22:13.100
I collaborated with Sue Ping for a good long while on this and making sure that everything was all good to go for pip since shipping with pip is a big deal.


00:22:13.100 --> 00:22:17.260
So yeah, it's been a long road.


00:22:17.260 --> 00:22:20.900
So yeah, this looks super useful.


00:22:20.900 --> 00:22:26.060
Kim out in the audience says, I'd love to never need verify false again on my internal networks.


00:22:26.060 --> 00:22:28.060
Seth's mission is fantastic.


00:22:28.060 --> 00:22:33.540
Yeah, yeah, I'm very grateful that this work is going on. I hope that that's true because it drives me nuts


00:22:33.540 --> 00:22:37.880
Is this something you have to deal with internally as well Brian? Yeah, because we've got


00:22:37.880 --> 00:22:40.800
with you know internal network


00:22:40.800 --> 00:22:43.460
corporate firewall we've got


00:22:43.460 --> 00:22:47.080
the trust stores and on Windows systems and


00:22:47.080 --> 00:22:52.700
It's it is an issue and we don't so a lot of I mean


00:22:52.700 --> 00:22:56.060
One of the ways we get around it is to have an internal pipe. Yeah


00:22:56.660 --> 00:22:58.720
we'll get a mirror inside.


00:22:58.720 --> 00:23:02.280
But sometimes I wanna try out stuff that's not there.


00:23:02.280 --> 00:23:06.700
So having something like this work would be good.


00:23:06.700 --> 00:23:09.940
But it's not just PyPI, it's other places too.


00:23:09.940 --> 00:23:15.340
- Yeah, the entire outside internet is usually impacted


00:23:15.340 --> 00:23:19.380
when you have that sort of situation of a corporate proxy.


00:23:19.380 --> 00:23:21.320
- Yeah, and I'd like to be able to,


00:23:21.320 --> 00:23:23.340
so I'm guessing that this TrustStore,


00:23:23.340 --> 00:23:24.700
I mean, using it within pip,


00:23:24.700 --> 00:23:26.300
that'd be great for a lot of people to try it,


00:23:26.300 --> 00:23:29.280
but trying out this trust store for applications


00:23:29.280 --> 00:23:32.960
that depend on trusted sites,


00:23:32.960 --> 00:23:35.440
that would be helpful as well, right?


00:23:35.440 --> 00:23:37.840
- Yeah, so actually the documentation,


00:23:37.840 --> 00:23:41.320
if you're trying to use it manually with other things,


00:23:41.320 --> 00:23:45.140
we support your lib three aiohttp requests,


00:23:45.140 --> 00:23:48.680
and I'm sure it'll work with other libraries as well.


00:23:48.680 --> 00:23:50.940
- Nice, like HTTPX?


00:23:50.940 --> 00:23:53.960
- Yeah, it should work with anything


00:23:53.960 --> 00:23:58.000
that uses the standard SSL context like API.


00:23:58.000 --> 00:24:00.720
As long as it can use that API, it should work with it.


00:24:00.720 --> 00:24:02.420
- This is great, awesome.


00:24:02.420 --> 00:24:04.560
- Very cool.


00:24:04.560 --> 00:24:07.960
Nice work, thanks for coming on and sharing it.


00:24:07.960 --> 00:24:11.080
Hopefully it makes corporate Python a little better.


00:24:11.080 --> 00:24:16.160
This was long ago when I first started the podcast,


00:24:16.160 --> 00:24:18.120
this one and Talk Python.


00:24:18.120 --> 00:24:23.120
There was a lot of debate or discussion, I guess,


00:24:23.140 --> 00:24:25.980
whether Python was an appropriate enterprise software


00:24:25.980 --> 00:24:27.140
type of language.


00:24:27.140 --> 00:24:31.660
You know, I think that debate is largely over.


00:24:31.660 --> 00:24:33.660
And I think the reason it's over


00:24:33.660 --> 00:24:35.620
is because the data scientists said,


00:24:35.620 --> 00:24:36.580
this is not a debate.


00:24:36.580 --> 00:24:38.660
Do you want us to do the job or not do the job?


00:24:38.660 --> 00:24:39.500
Do the, that's right.


00:24:39.500 --> 00:24:40.860
Okay, well, so let's use Python.


00:24:40.860 --> 00:24:43.220
And then it kind of spread from there internally


00:24:43.220 --> 00:24:45.020
through acceptance.


00:24:45.020 --> 00:24:48.620
That said, like now that it does live in these environments


00:24:48.620 --> 00:24:51.460
that Brian described much more frequently,


00:24:51.460 --> 00:24:53.460
it's really important to have this support.


00:24:53.460 --> 00:24:54.300
- Yeah.


00:24:54.300 --> 00:24:55.900
- It's actually really funny because,


00:24:55.900 --> 00:24:59.740
so to put this in perspective for Java folks,


00:24:59.740 --> 00:25:03.620
this is like Java Trust Stores is like Certify,


00:25:03.620 --> 00:25:06.940
where you have this manual thing that's shipped with Java


00:25:06.940 --> 00:25:08.620
as opposed to just using the system.


00:25:08.620 --> 00:25:12.620
And I got that comment on Lobster's or something


00:25:12.620 --> 00:25:13.700
that was talking about this article,


00:25:13.700 --> 00:25:14.520
and they were just like,


00:25:14.520 --> 00:25:16.500
"Wow, this is like getting rid of Java Trust Stores.


00:25:16.500 --> 00:25:17.340
This is great."


00:25:17.340 --> 00:25:19.420
And I'm like, "Oh, I didn't even know that existed."


00:25:19.420 --> 00:25:20.260
- That's right.


00:25:20.260 --> 00:25:21.660
- I really hate it over there.


00:25:21.660 --> 00:25:24.000
- Yeah, we hate this, so this is great.


00:25:24.000 --> 00:25:25.760
I was like, okay, thank you.


00:25:25.760 --> 00:25:26.600
- Awesome.


00:25:26.600 --> 00:25:28.920
Cool, all right.


00:25:28.920 --> 00:25:33.120
Well, before we get to the next topic, Brian,


00:25:33.120 --> 00:25:37.240
let's talk about our sponsor for this weekend,


00:25:37.240 --> 00:25:38.840
many weeks this year,


00:25:38.840 --> 00:25:41.320
Microsoft for Startups Founders Hub.


00:25:41.320 --> 00:25:45.320
If you are starting a business, doing a startup,


00:25:45.320 --> 00:25:46.400
you are a little ways going


00:25:46.400 --> 00:25:47.480
or you're just thinking about it,


00:25:47.480 --> 00:25:48.600
you should really check this out


00:25:48.600 --> 00:25:52.060
because Microsoft for Startups set out to understand


00:25:52.060 --> 00:25:55.560
the challenges that we all have creating startups


00:25:55.560 --> 00:25:57.360
in this digital cloud age,


00:25:57.360 --> 00:26:00.200
and they created Microsoft for Startups Founders Hub


00:26:00.200 --> 00:26:02.000
to help solve many of them.


00:26:02.000 --> 00:26:07.000
So that includes getting cloud resources,


00:26:07.000 --> 00:26:12.840
GitHub credits, other credits like AI credits,


00:26:12.840 --> 00:26:18.560
for example, from OpenAI that you can run your code on,


00:26:18.560 --> 00:26:20.940
But maybe even more important than that,


00:26:20.940 --> 00:26:25.280
it has support for connecting you with mentors and experts


00:26:25.280 --> 00:26:28.200
to make sure that you go in the right direction


00:26:28.200 --> 00:26:30.240
when you're young and getting started.


00:26:30.240 --> 00:26:35.700
So, so often you see the successful startups


00:26:35.700 --> 00:26:38.240
being in places where there are a lot of mentors,


00:26:38.240 --> 00:26:41.580
where there's these networks and people have connections


00:26:41.580 --> 00:26:46.580
to get funding, the marketing side of things,


00:26:46.580 --> 00:26:49.660
the product market fit, all of those things are super hard.


00:26:49.660 --> 00:26:53.260
So if you are part of Microsoft for Startups Founders Hub,


00:26:53.260 --> 00:26:55.340
you'll have access to their mentorship network,


00:26:55.340 --> 00:26:57.620
which gives you access to hundreds of mentors


00:26:57.620 --> 00:26:59.100
across a range of disciplines,


00:26:59.100 --> 00:27:01.900
like the ones I just named and more,


00:27:01.900 --> 00:27:06.900
as well as up to a little bit over $100,000 worth of credits


00:27:06.900 --> 00:27:11.340
in Azure and GitHub and OpenAI and other places


00:27:11.340 --> 00:27:14.220
as you go through certain checkpoints


00:27:14.220 --> 00:27:16.020
as you sort of grow with this program.


00:27:16.020 --> 00:27:19.820
So really tons of super support that you can get for your startup.


00:27:19.820 --> 00:27:21.820
It doesn't have to be investor-backed.


00:27:21.820 --> 00:27:25.160
It doesn't have to be third-party verified to participate.


00:27:25.160 --> 00:27:29.960
All you have to do is go to pythonbytes.fm/foundershub2022.


00:27:29.960 --> 00:27:34.400
Apply, and if you accept it, you'll get all of this support from them.


00:27:34.400 --> 00:27:38.440
So make your idea a reality with Microsoft for Startups Founders Hub.


00:27:38.440 --> 00:27:40.100
Apply today for free.


00:27:40.100 --> 00:27:41.840
If you get in, you'll get tons of support.


00:27:41.840 --> 00:27:43.840
So very nice.


00:27:44.520 --> 00:27:46.880
Also nice Brian plots.


00:27:46.880 --> 00:27:48.680
Tell us about lots.


00:27:48.680 --> 00:27:50.800
Plots and command lines.


00:27:50.800 --> 00:27:57.280
So I like command line stuff and actually with the thanks of Will McGugan,


00:27:57.280 --> 00:28:02.600
we've got a lot of people excited about CLIs, but apparently Bob is also Bob


00:28:02.600 --> 00:28:06.760
Bilder was from the pie bites duo.


00:28:06.760 --> 00:28:09.320
So I like this article.


00:28:09.320 --> 00:28:12.200
So actually I kind of skimmed the article.


00:28:12.200 --> 00:28:16.080
Sorry, Bob, but making plots with your terminal with plot,


00:28:16.080 --> 00:28:19.640
plot text plot. It's if you install it,


00:28:19.640 --> 00:28:26.640
I can see the typo squatting. Yeah. Yeah. So if,


00:28:26.640 --> 00:28:31.280
if you pip install it, there's one T in the middle. So it's PLO T E X T.


00:28:31.280 --> 00:28:35.520
Um, so, so he was doing a, so he did,


00:28:35.520 --> 00:28:38.880
had some code where he was looking at the plotting,


00:28:38.880 --> 00:28:42.160
the frequency of their blog articles on the terminal.


00:28:42.160 --> 00:28:45.880
Just so he's using some of their own data to plot stuff.


00:28:45.880 --> 00:28:47.560
And he came up with like,


00:28:47.560 --> 00:28:48.880
it's kind of cool walking through


00:28:48.880 --> 00:28:51.240
how he grabbed the data and everything.


00:28:51.240 --> 00:28:54.080
But I was looking at this plot going,


00:28:54.080 --> 00:28:55.520
oh, this is a pretty nice looking plot.


00:28:55.520 --> 00:28:57.400
I mean, it's totally blocky of course,


00:28:57.400 --> 00:29:01.200
but it's a bar chart, so it's supposed to be blocky.


00:29:01.200 --> 00:29:02.560
So that's okay.


00:29:02.560 --> 00:29:05.960
And so then I went over and looked at this package


00:29:05.960 --> 00:29:09.720
to this Plot X and it's cool.


00:29:09.720 --> 00:29:12.000
Look at all these awesome plots.


00:29:12.000 --> 00:29:15.940
I was looking at some of the various things you can do.


00:29:15.940 --> 00:29:19.120
It's got basic plots for, you know,


00:29:19.120 --> 00:29:21.640
just like sine waves and things like that.


00:29:21.640 --> 00:29:26.640
But you can also do fill in plots and then multicolor.


00:29:26.640 --> 00:29:27.740
This is kind of a lot.


00:29:27.740 --> 00:29:30.960
You can kind of cool stuff you can do on the command line.


00:29:30.960 --> 00:29:35.320
And then even data streams, which I was,


00:29:35.320 --> 00:29:37.960
Look at that, it's a data stream going on in a plot


00:29:37.960 --> 00:29:39.360
in your terminal.


00:29:39.360 --> 00:29:40.680
It's pretty great.


00:29:40.680 --> 00:29:44.120
Images even, so there's a cat image.


00:29:44.120 --> 00:29:46.000
- You can do low cats all day long.


00:29:46.000 --> 00:29:46.820
- Yeah.


00:29:46.820 --> 00:29:48.080
- I was gonna say, the people that put together


00:29:48.080 --> 00:29:50.320
those examples knew what the internet wants.


00:29:50.320 --> 00:29:51.160
(laughing)


00:29:51.160 --> 00:29:52.680
Had to do cat pictures.


00:29:52.680 --> 00:29:53.680
- Yeah.


00:29:53.680 --> 00:29:55.920
So, and then even subplots.


00:29:55.920 --> 00:30:00.920
So the first example we saw, it has kind of all this,


00:30:00.920 --> 00:30:04.560
it's not actually that bad of the interface.


00:30:04.560 --> 00:30:06.080
It looks pretty, you know,


00:30:06.080 --> 00:30:08.120
it's tedious to put together plots anyway,


00:30:08.120 --> 00:30:09.760
but this isn't too bad.


00:30:09.760 --> 00:30:11.640
But that cover image that we saw


00:30:11.640 --> 00:30:15.000
is not a combination of images.


00:30:15.000 --> 00:30:17.440
That's one plot that with subplots in it.


00:30:17.440 --> 00:30:19.400
So it's pretty great. - I see, that's cool.


00:30:19.400 --> 00:30:21.040
So within one terminal window,


00:30:21.040 --> 00:30:22.760
you can do almost like a dashboard view


00:30:22.760 --> 00:30:23.780
with different plots,


00:30:23.780 --> 00:30:26.120
and they probably can be updating live and...


00:30:26.120 --> 00:30:27.200
- Yeah, yeah.


00:30:27.200 --> 00:30:29.120
So this is pretty exciting.


00:30:29.120 --> 00:30:30.560
(both laughing)


00:30:30.560 --> 00:30:31.400
I like it.


00:30:32.760 --> 00:30:35.600
So anyway, that was just, I just wanted to say,


00:30:35.600 --> 00:30:37.000
hey, if you want to plot on the command line,


00:30:37.000 --> 00:30:37.920
you can use this.


00:30:37.920 --> 00:30:41.800
- I'm loving this terminal.


00:30:41.800 --> 00:30:44.700
Renaissance is so fun.


00:30:44.700 --> 00:30:45.660
So.


00:30:45.660 --> 00:30:46.500
- Yeah.


00:30:46.500 --> 00:30:49.960
We make me make us feel like hackers again, you know?


00:30:49.960 --> 00:30:52.040
- It does absolutely make you feel like a hacker.


00:30:52.040 --> 00:30:53.160
I love it.


00:30:53.160 --> 00:30:54.000
So good.


00:30:54.000 --> 00:30:56.100
- So.


00:30:56.100 --> 00:30:56.940
- All right.


00:30:56.940 --> 00:30:57.760
On the next item.


00:30:57.760 --> 00:30:58.600
- Yeah.


00:30:58.600 --> 00:31:02.360
- Just hadn't really planned to talk about this,


00:31:02.360 --> 00:31:05.880
But I just yesterday did an episode with Will McGugan,


00:31:05.880 --> 00:31:08.800
seven lessons from building a modern TUI framework.


00:31:08.800 --> 00:31:10.960
Brian, you covered that article last week on this show.


00:31:10.960 --> 00:31:12.200
So I reached out to Will and said,


00:31:12.200 --> 00:31:15.560
"Hey, we should absolutely cover this stuff


00:31:15.560 --> 00:31:16.480
in like a deep dive."


00:31:16.480 --> 00:31:18.040
So people- - Oh, I can't wait to listen.


00:31:18.040 --> 00:31:18.920
This is great. - Yeah.


00:31:18.920 --> 00:31:20.960
People can go check that out as well.


00:31:20.960 --> 00:31:22.360
All right.


00:31:22.360 --> 00:31:26.440
But let's talk about one of my very favorite things,


00:31:26.440 --> 00:31:27.520
HTMX.


00:31:27.520 --> 00:31:31.560
People who are not familiar with HTMX,


00:31:31.560 --> 00:31:34.120
you really owe it to yourself to check this out.


00:31:34.120 --> 00:31:36.540
It's what the web should have been forever,


00:31:36.540 --> 00:31:38.380
but it wasn't for some reason.


00:31:38.380 --> 00:31:41.960
It's like it stalled in the late mid 90s, I don't know.


00:31:41.960 --> 00:31:45.400
And hyperlinks and forms are the only things


00:31:45.400 --> 00:31:46.280
that can make requests.


00:31:46.280 --> 00:31:50.380
You can only click on them to make it happen and so on.


00:31:50.380 --> 00:31:53.840
Why should the entire screen have to be replaced


00:31:53.840 --> 00:31:55.740
every interaction and all those things?


00:31:55.740 --> 00:31:58.640
So HTMX is awesome.


00:31:58.640 --> 00:32:01.560
and just put in little fragments of declarative code.


00:32:01.560 --> 00:32:04.080
And it does all the cool work.


00:32:04.080 --> 00:32:05.880
You can have a class on it if people wanna check that out,


00:32:05.880 --> 00:32:07.640
but that's not the topic of today.


00:32:07.640 --> 00:32:10.040
The topic is template fragments.


00:32:10.040 --> 00:32:12.840
So Carson Gross over there wrote this article,


00:32:12.840 --> 00:32:14.840
this essay called Template Fragments.


00:32:14.840 --> 00:32:18.120
He said, "One way you might consider doing this is,


00:32:18.120 --> 00:32:21.400
in HTMX, you very frequently have to first show the page,


00:32:21.400 --> 00:32:23.880
and then as little sections of an update,


00:32:23.880 --> 00:32:25.320
it goes back to the server and says,


00:32:25.320 --> 00:32:27.280
'I just need the code, the HTML block


00:32:27.280 --> 00:32:28.880
that goes into this fragment here


00:32:28.880 --> 00:32:30.640
'cause somebody moused over something else.


00:32:30.640 --> 00:32:33.320
So refresh it, related item or whatever.


00:32:33.320 --> 00:32:36.720
He's a big fan of this thing called


00:32:36.720 --> 00:32:39.620
the locality of behavior design principle


00:32:39.620 --> 00:32:42.080
where instead of having a bunch of pieces


00:32:42.080 --> 00:32:45.320
that cling together and reassemble themselves,


00:32:45.320 --> 00:32:46.660
like if it could just all be right there,


00:32:46.660 --> 00:32:48.580
wouldn't that be great?


00:32:48.580 --> 00:32:53.240
So he says, normally the way that you would have to do this


00:32:53.240 --> 00:32:55.800
is you would have to have your full HTML


00:32:55.800 --> 00:32:57.680
and then a little subsection.


00:32:57.680 --> 00:33:01.900
And then that subsection has the optional element.


00:33:01.900 --> 00:33:06.140
But some frameworks, some template libraries


00:33:06.140 --> 00:33:08.560
allow you to define a fragment.


00:33:08.560 --> 00:33:12.600
And then when the code is requested on the server,


00:33:12.600 --> 00:33:14.240
it can either show the whole thing


00:33:14.240 --> 00:33:16.580
or just peel that fragment out of the HTML,


00:33:16.580 --> 00:33:19.540
but you don't have to parse it into a bunch of small files.


00:33:19.540 --> 00:33:21.460
Cool, huh?


00:33:21.460 --> 00:33:24.920
It's really useful if there's no reuse.


00:33:24.920 --> 00:33:27.460
Like if the only reason you would make that little fragment


00:33:27.460 --> 00:33:29.720
is so that you could return it separately,


00:33:29.720 --> 00:33:33.620
this is great because basically it means


00:33:33.620 --> 00:33:34.880
you can just write the page once


00:33:34.880 --> 00:33:36.960
and it can interact with different data,


00:33:36.960 --> 00:33:38.000
different elements.


00:33:38.000 --> 00:33:39.440
If for some reason that fragment


00:33:39.440 --> 00:33:41.280
was being used in multiple places,


00:33:41.280 --> 00:33:42.920
all of a sudden it's like code duplication


00:33:42.920 --> 00:33:44.160
and that's not ideal.


00:33:44.160 --> 00:33:47.340
But so we talked about this and hey,


00:33:47.340 --> 00:33:51.460
there's some known implementations of this.


00:33:52.800 --> 00:33:56.160
Apparently Django has the render block extension.


00:33:56.160 --> 00:33:58.620
I created the Jinja partials and Chameleon partials,


00:33:58.620 --> 00:33:59.500
which I'm not really sure.


00:33:59.500 --> 00:34:01.620
I'm thinking I might actually take them out now,


00:34:01.620 --> 00:34:03.740
that there's something for Jinja better,


00:34:03.740 --> 00:34:05.300
which I'm about to talk about.


00:34:05.300 --> 00:34:08.740
But nonetheless, those are kind of sort of allow this,


00:34:08.740 --> 00:34:11.220
but more in the second descriptive way


00:34:11.220 --> 00:34:14.300
where you have like a fragment that's separate but included.


00:34:14.300 --> 00:34:17.460
But I was talking with Sergei Frixes,


00:34:17.460 --> 00:34:21.660
and he said, "Between Jinja 2 fragments and Michael's,


00:34:21.660 --> 00:34:26.660
My Jinja Partials, HTMX plus Flask is so awesome.


00:34:26.660 --> 00:34:32.500
So he created this library called Jinja 2 Fragments,


00:34:32.500 --> 00:34:34.880
which does exactly what I described.


00:34:34.880 --> 00:34:36.520
So in Jinja, you have blocks,


00:34:36.520 --> 00:34:37.720
like you might have your main HTML,


00:34:37.720 --> 00:34:39.920
and you say, here's a block of main content.


00:34:39.920 --> 00:34:44.120
With his library, what you can do is you can say,


00:34:44.120 --> 00:34:46.280
either just render the template,


00:34:46.280 --> 00:34:49.040
or you can now render block


00:34:49.040 --> 00:34:51.200
and name just part of your Jinja template,


00:34:51.200 --> 00:34:54.280
and that part comes back with the data you supply to it.


00:34:54.280 --> 00:34:55.120
That's pretty awesome, right?


00:34:55.120 --> 00:34:58.320
Like this one paragraph is the whole response


00:34:58.320 --> 00:35:00.480
from the server, if you call render block


00:35:00.480 --> 00:35:01.840
instead of render template.


00:35:01.840 --> 00:35:05.840
- This is, yeah, this is super great.


00:35:05.840 --> 00:35:08.900
Honestly, on Twitter, every time I see HTMX,


00:35:08.900 --> 00:35:13.560
I'm just like, I am so like prepared to write a website


00:35:13.560 --> 00:35:15.920
because I have not had the use case for a while,


00:35:15.920 --> 00:35:18.120
but I'm very excited for the next time I will have one.


00:35:18.120 --> 00:35:19.760
- I am exactly the same.


00:35:19.760 --> 00:35:21.440
I'm working on projects that have been around


00:35:21.440 --> 00:35:22.440
for six or seven years.


00:35:22.440 --> 00:35:24.220
I'm like, if I rewrite this thing,


00:35:24.220 --> 00:35:25.720
it's getting HTMX all over it.


00:35:25.720 --> 00:35:29.400
But I just can't bring myself quite to do it.


00:35:29.400 --> 00:35:31.760
But yeah, it's so good.


00:35:31.760 --> 00:35:36.000
- So a couple of comments from the chat,


00:35:36.000 --> 00:35:37.880
Vincent from CalmCode says,


00:35:37.880 --> 00:35:42.720
HTMX is the bee's knees and CalmCode uses it a whole bunch.


00:35:42.720 --> 00:35:44.240
I am not surprised, Vincent.


00:35:44.240 --> 00:35:45.560
- Fantastic. - It's awesome.


00:35:45.560 --> 00:35:46.840
- Yeah.


00:35:46.840 --> 00:35:48.960
Yeah, if any website I create,


00:35:48.960 --> 00:35:52.560
after knowing about HTMX is likely going to be using HTMX.


00:35:52.560 --> 00:35:56.040
If you thought the answer was Vue.js or React


00:35:56.040 --> 00:35:58.160
or something like that, you may really, really,


00:35:58.160 --> 00:36:00.280
really wanna check this out first.


00:36:00.280 --> 00:36:01.920
- Well, especially if you're somebody like me


00:36:01.920 --> 00:36:04.120
that I'm like, yeah, I wanna put


00:36:04.120 --> 00:36:05.680
this interactive stuff in here.


00:36:05.680 --> 00:36:11.040
I don't really feel, I'm not an expert in JavaScript though,


00:36:11.040 --> 00:36:12.720
so I'm not sure.


00:36:12.720 --> 00:36:16.600
And so, but I do know somebody that knows a lot about HTMX.


00:36:16.600 --> 00:36:17.560
So. (laughs)


00:36:17.560 --> 00:36:18.720
- You might know someone.


00:36:18.720 --> 00:36:20.400
- I've been trained very close to getting me off


00:36:20.400 --> 00:36:23.020
onto a very long rant about HTMX,


00:36:23.020 --> 00:36:26.500
but it's so good because even if you know JavaScript,


00:36:26.500 --> 00:36:28.700
it wouldn't it be better to not have to think about,


00:36:28.700 --> 00:36:30.780
now I'm running client code, now I'm running server code,


00:36:30.780 --> 00:36:32.780
now I'm running the APIs to connect the client code


00:36:32.780 --> 00:36:33.620
to the server code.


00:36:33.620 --> 00:36:35.560
This one's in this language, it knows this.


00:36:35.560 --> 00:36:37.220
That one's in that language in this location,


00:36:37.220 --> 00:36:38.220
it knows that.


00:36:38.220 --> 00:36:40.220
In HTMX, you just write it all in one place,


00:36:40.220 --> 00:36:42.980
in one language, with the same context


00:36:42.980 --> 00:36:44.680
and security model and everything,


00:36:44.680 --> 00:36:46.860
access to the database, for example,


00:36:46.860 --> 00:36:48.300
and then you just do what you need to do.


00:36:48.300 --> 00:36:49.980
It's perfect.


00:36:49.980 --> 00:36:52.660
- Well, and it's not really just about thinking


00:36:52.660 --> 00:36:53.860
about two languages either.


00:36:53.860 --> 00:36:57.020
It's somebody, there's a lot of people like me


00:36:57.020 --> 00:36:59.180
that already have to think in two languages.


00:36:59.180 --> 00:37:01.540
I'm thinking in C++ and Python.


00:37:01.540 --> 00:37:04.580
So thinking about it in a third language


00:37:04.580 --> 00:37:07.620
or a fourth language, it's like, you know, come on.


00:37:07.620 --> 00:37:10.140
Having a place to stop plus, yeah.


00:37:10.140 --> 00:37:11.340
- Yeah, yeah.


00:37:11.340 --> 00:37:13.460
Final comment I'll make on this is


00:37:13.460 --> 00:37:16.500
even people are using Node.js like HTMX,


00:37:16.500 --> 00:37:17.500
where it's the same language.


00:37:17.500 --> 00:37:20.620
It's also just about the context and location switch.


00:37:20.620 --> 00:37:22.180
Oh, yeah.


00:37:22.180 --> 00:37:23.180
I hadn't heard that.


00:37:23.180 --> 00:37:24.100
That's pretty cool.


00:37:24.100 --> 00:37:24.780
Yeah.


00:37:24.780 --> 00:37:26.700
Seth, it sounds like you were going to say something.


00:37:26.700 --> 00:37:28.020
Maybe I'll let you have the last word here.


00:37:28.020 --> 00:37:28.520
Oh, no.


00:37:28.520 --> 00:37:31.660
I was honestly just going to say that the more we can stay


00:37:31.660 --> 00:37:32.700
in HTML, the better.


00:37:32.700 --> 00:37:34.740
Because you have to know HTML.


00:37:34.740 --> 00:37:36.420
So you might as well stay in it, right?


00:37:36.420 --> 00:37:37.260
Yeah, absolutely.


00:37:37.260 --> 00:37:37.780
Absolutely.


00:37:37.780 --> 00:37:40.140
So well done, Sergey.


00:37:40.140 --> 00:37:43.620
Check out his Jinja2 Fragments framework.


00:37:43.620 --> 00:37:45.220
It is super new.


00:37:45.220 --> 00:37:49.260
I don't know when it got released, but a couple of days.


00:37:49.260 --> 00:37:51.740
These are like two and three days on all the commits here.


00:37:51.740 --> 00:37:52.580
It is lots of days.


00:37:52.580 --> 00:37:54.620
This is very, very new.


00:37:54.620 --> 00:37:55.780
- Two to three days.


00:37:55.780 --> 00:37:57.500
- Yeah, well done, well done.


00:37:57.500 --> 00:38:01.540
All right, Seth, over to you for the final one.


00:38:01.540 --> 00:38:03.300
- Sure thing.


00:38:03.300 --> 00:38:06.940
So yeah, this article was announcing


00:38:06.940 --> 00:38:09.220
something that's been getting worked on for a while,


00:38:09.220 --> 00:38:12.860
which is generic generators for Salsa 3.


00:38:12.860 --> 00:38:17.860
So what you're seeing there, SLSA, that stands for,


00:38:17.860 --> 00:38:23.220
if I can remember, it is supply chain levels for artifacts,


00:38:23.220 --> 00:38:25.460
levels for software artifacts.


00:38:25.460 --> 00:38:30.020
So SLSA, and you pronounce it salsa.


00:38:30.020 --> 00:38:31.860
And it's essentially-- - Of course you do.


00:38:31.860 --> 00:38:34.280
It's a great way to say that acronym.


00:38:34.280 --> 00:38:35.120
- Yeah, right?


00:38:35.120 --> 00:38:38.580
Makes you hungry every time, which is the best part.


00:38:38.580 --> 00:38:41.900
But yeah, it's basically a set of tools and standards


00:38:41.900 --> 00:38:46.060
to a test and verified the provenance of artifacts.


00:38:46.060 --> 00:38:49.300
So essentially where did this thing come from?


00:38:49.300 --> 00:38:52.140
This file, this wheel, this jar,


00:38:52.140 --> 00:38:55.300
depending on what like ecosystem independent,


00:38:55.300 --> 00:38:57.220
whatever thing, whatever artifact you're building,


00:38:57.220 --> 00:38:58.420
where did it come from?


00:38:58.420 --> 00:38:59.380
How was it built?


00:38:59.380 --> 00:39:01.800
And it, so it uses a whole bunch of different


00:39:01.800 --> 00:39:06.180
like cryptographical primitives and OpenIDC,


00:39:06.180 --> 00:39:07.880
which is basically magic,


00:39:07.880 --> 00:39:12.040
but it basically allows you to prove in effect.


00:39:12.040 --> 00:39:16.120
Okay, this was built from this specific GitHub repository,


00:39:16.120 --> 00:39:18.160
this commit, this tag,


00:39:18.160 --> 00:39:23.260
and someone can then later take this file,


00:39:23.260 --> 00:39:25.080
this artifact that got built


00:39:25.080 --> 00:39:27.620
and then verify that that was the case.


00:39:27.620 --> 00:39:30.320
And so this is kind of like in the future,


00:39:30.320 --> 00:39:33.760
hopefully be used as like a defense against


00:39:33.760 --> 00:39:35.640
maybe like stolen credentials


00:39:35.640 --> 00:39:37.080
on the Python package index.


00:39:37.080 --> 00:39:39.960
That would never happen that that would never happen, right?


00:39:39.960 --> 00:39:43.680
No one would try to fish and that would that has never happened other than the time of


00:39:43.680 --> 00:39:47.080
the recording never has happened, I would say.


00:39:47.080 --> 00:39:50.360
So yeah, it gives a good defense against this, right?


00:39:50.360 --> 00:39:55.480
Because if you let's say you have a package and Python package index knows that this package


00:39:55.480 --> 00:40:01.180
came from, you know, github.com/sethmlarsen/whatever, right?


00:40:01.180 --> 00:40:06.800
And then in the future it received something that doesn't come from that GitHub repository.


00:40:06.800 --> 00:40:09.640
it can flag that and say, hey, this isn't right.


00:40:09.640 --> 00:40:12.920
Like this didn't come from the place that it came from before or wherever it's,


00:40:12.920 --> 00:40:18.880
you know, supposed to come from. And the fact that this is generic is the big deal.


00:40:18.880 --> 00:40:23.880
The part that ties us back to Python is that you can use it for wheel files and


00:40:23.880 --> 00:40:28.440
source distributions. You can sign like anything. And so for example,


00:40:28.440 --> 00:40:31.760
one of the Python projects that is featured in here is your lib three.


00:40:31.760 --> 00:40:36.240
I've been trying to get into this and it's been really successful.


00:40:36.240 --> 00:40:38.720
And so your lib three now does this,


00:40:38.720 --> 00:40:42.080
and you can actually verify that it came from a specific repo


00:40:42.080 --> 00:40:44.160
and that the wheels came from a specific tag.


00:40:44.160 --> 00:40:46.040
And yeah, it's really interesting.


00:40:46.040 --> 00:40:49.200
And this ecosystem is just getting started.


00:40:49.200 --> 00:40:52.800
And so if you're interested in anything about supply chain


00:40:52.800 --> 00:40:54.920
security and all of that, this is a great place


00:40:54.920 --> 00:40:57.700
to start doing some learning about what


00:40:57.700 --> 00:40:58.840
the future might look like.


00:40:58.840 --> 00:40:59.880
Yeah.


00:40:59.880 --> 00:41:00.920
This is great.


00:41:00.920 --> 00:41:03.240
When I first saw this, I thought, OK, this is cool,


00:41:03.240 --> 00:41:05.880
but how does that really help protect against


00:41:05.880 --> 00:41:09.440
somebody sabotaging a package?


00:41:09.440 --> 00:41:11.160
But then again, if you think,


00:41:11.160 --> 00:41:13.280
and I realize if you think back to what happened


00:41:13.280 --> 00:41:14.600
with some of those other packages,


00:41:14.600 --> 00:41:17.380
somebody got ahold of the PyPI account,


00:41:17.380 --> 00:41:18.700
not the GitHub account.


00:41:18.700 --> 00:41:21.320
- Yeah, so this is like-- - And they just published


00:41:21.320 --> 00:41:25.320
a new version directly, not through the CI, right?


00:41:25.320 --> 00:41:27.800
- Right, yeah, so this is making,


00:41:27.800 --> 00:41:29.480
it just makes the amount of things


00:41:29.480 --> 00:41:32.560
that need to get compromised even larger, right?


00:41:32.560 --> 00:41:34.200
- Right, it closes the-- - No longer do you need


00:41:34.200 --> 00:41:38.240
to only compromise the email account on PyPI.


00:41:38.240 --> 00:41:40.440
You have to also compromise GitHub,


00:41:40.440 --> 00:41:43.360
and then if you have GitHub environments configured,


00:41:43.360 --> 00:41:45.240
you need to compromise a second account


00:41:45.240 --> 00:41:47.080
to review the deployment,


00:41:47.080 --> 00:41:50.440
and so it just makes it even harder


00:41:50.440 --> 00:41:54.180
to actually get that attack off, essentially.


00:41:54.180 --> 00:41:59.840
- Yeah, and if you had to publish the actual vulnerability


00:41:59.840 --> 00:42:02.720
to a popular GitHub repository to trigger it,


00:42:02.720 --> 00:42:05.000
it would be discovered sooner, right?


00:42:05.000 --> 00:42:08.960
Because people are like, oh, that's unusual.


00:42:08.960 --> 00:42:11.800
Who has made this, that they've made this commit


00:42:11.800 --> 00:42:15.360
and now it's doing this URL thing over to hackstore.com.


00:42:15.360 --> 00:42:20.360
And right, like that's just another out in public thing.


00:42:20.360 --> 00:42:22.840
Whereas if the direct account gets attacked,


00:42:22.840 --> 00:42:25.640
somebody can just use Twine or something directly


00:42:25.640 --> 00:42:28.480
to push it, a bad wheel up.


00:42:28.480 --> 00:42:29.680
- Yeah, exactly, yeah.


00:42:29.680 --> 00:42:30.840
No more pushing bad wheels.


00:42:30.840 --> 00:42:32.840
You have to go through so many different hoops


00:42:32.840 --> 00:42:33.880
just to do something.


00:42:33.880 --> 00:42:36.920
- You need to flatten those bad wheels.


00:42:36.920 --> 00:42:37.760
(laughing)


00:42:37.760 --> 00:42:38.960
- Gotta inspect them too.


00:42:38.960 --> 00:42:41.480
- Exactly.


00:42:41.480 --> 00:42:43.480
All right, awesome.


00:42:43.480 --> 00:42:44.840
This is good stuff.


00:42:44.840 --> 00:42:48.040
Well, Brian, that's, no, do you have any more?


00:42:48.040 --> 00:42:49.080
No, that's all of them.


00:42:49.080 --> 00:42:50.800
Do you have any extras for us?


00:42:50.800 --> 00:42:52.920
- I do, although I'm gonna try to make it quick


00:42:52.920 --> 00:42:54.740
'cause now I'm hungry for some salsa.


00:42:55.960 --> 00:42:58.840
So I wanted to, I'm like super excited


00:42:58.840 --> 00:43:00.420
for this upcoming weekend.


00:43:00.420 --> 00:43:01.520
I can't believe it.


00:43:01.520 --> 00:43:05.720
So on Saturday, on Saturday, September 10th,


00:43:05.720 --> 00:43:10.160
I will be in September 10th, I will be in San Francisco.


00:43:10.160 --> 00:43:13.040
And I've got two events going on at Pi Bay.


00:43:13.040 --> 00:43:15.280
So Pi Bay, awesome conference.


00:43:15.280 --> 00:43:16.280
I haven't been there before,


00:43:16.280 --> 00:43:18.600
but you've been there last year or something like that?


00:43:18.600 --> 00:43:20.520
- Yeah, last year, and I absolutely loved it.


00:43:20.520 --> 00:43:23.680
I would go this year if I wasn't on single parent duty


00:43:23.680 --> 00:43:25.600
and had kids that had to go to school.


00:43:25.600 --> 00:43:28.160
So I'm giving two events.


00:43:28.160 --> 00:43:30.220
So one of them's a sharing is caring


00:43:30.220 --> 00:43:31.520
pytest fixture edition.


00:43:31.520 --> 00:43:34.220
I'm gonna talk about building.


00:43:34.220 --> 00:43:36.480
Actually, I'm just gonna talk about packaging,


00:43:36.480 --> 00:43:38.320
but it's not really about packaging.


00:43:38.320 --> 00:43:40.740
It's about sharing fixtures with other people.


00:43:40.740 --> 00:43:44.360
And because I think that that's a bigger need


00:43:44.360 --> 00:43:46.200
than people realize.


00:43:46.200 --> 00:43:48.160
So anyway, love fixtures.


00:43:48.160 --> 00:43:49.480
We're gonna talk about that.


00:43:49.480 --> 00:43:52.720
And then I get asked to be on this experts panel.


00:43:52.720 --> 00:43:58.640
There's no with, we got, Zach Hatfield, Dodds, me, Andy Knight,


00:43:58.640 --> 00:44:03.920
uh, which is, he's got a, like a automation pen, automation,


00:44:03.920 --> 00:44:04.600
Panda, that's right.


00:44:04.600 --> 00:44:07.960
Uh, Joshua Grant and Nishat Khan.


00:44:07.960 --> 00:44:12.400
So it should be a fun panel and, it's at seven o'clock at night.


00:44:12.400 --> 00:44:17.280
I'm like, wow, I think I really need to change my flight because I was planning


00:44:17.280 --> 00:44:19.540
on flying out at 8:00 AM the next day.


00:44:19.540 --> 00:44:21.040
And it's going to be tough.


00:44:21.040 --> 00:44:25.080
So that's going on next weekend, I'm pretty excited.


00:44:25.080 --> 00:44:28.520
- Yeah, PyLang says good luck on the talk, Brian.


00:44:28.520 --> 00:44:30.120
- Thanks.


00:44:30.120 --> 00:44:32.280
So how about you, do you have any extras?


00:44:32.280 --> 00:44:33.960
- I do, I do.


00:44:33.960 --> 00:44:36.920
A bunch, I'll make them pretty quick.


00:44:36.920 --> 00:44:40.640
So Heroku, the platform is a service place.


00:44:40.640 --> 00:44:44.160
They for 13 years or something have had a free plan


00:44:44.160 --> 00:44:47.440
where people can go and create, what are they called?


00:44:47.440 --> 00:44:50.640
Dinos or something, I don't use, yeah, dinos.


00:44:50.640 --> 00:44:55.640
I don't use Heroku, so I don't know the terminology


00:44:55.640 --> 00:44:57.680
and how all the plans break down.


00:44:57.680 --> 00:44:59.920
But for a long time, they've had free plans,


00:44:59.920 --> 00:45:02.780
but now they are canceling them.


00:45:02.780 --> 00:45:07.780
And you will either have to pay or delete your projects.


00:45:07.780 --> 00:45:11.680
So that's gonna affect a lot of people.


00:45:11.680 --> 00:45:14.640
They have something like 13 million.


00:45:14.640 --> 00:45:16.680
I don't know what's the right number here.


00:45:17.880 --> 00:45:20.600
- Yeah, that it's been used by 13,


00:45:20.600 --> 00:45:22.400
to develop 13 million apps.


00:45:22.400 --> 00:45:24.140
So I bet many of those are free


00:45:24.140 --> 00:45:28.840
and are going to be suffering this.


00:45:28.840 --> 00:45:31.520
There's a interesting discussion on Y Combinator.


00:45:31.520 --> 00:45:32.680
So you can check that out.


00:45:32.680 --> 00:45:36.000
I'm sure it's very civil over there in the comments


00:45:36.000 --> 00:45:37.440
as it always would be.


00:45:37.440 --> 00:45:40.760
Yeah, but basically, you know,


00:45:40.760 --> 00:45:42.840
Heroku was purchased by Salesforce


00:45:42.840 --> 00:45:46.320
or they claim, and it may be true.


00:45:46.320 --> 00:45:48.080
I'm sure that it is somewhat true.


00:45:48.080 --> 00:45:50.580
They wanna cancel this because of fraud and abuse.


00:45:50.580 --> 00:45:53.800
It may be more that they have to spend so much money


00:45:53.800 --> 00:45:55.080
to fight the fraud and abuse


00:45:55.080 --> 00:45:56.900
that it's just not worth it to them.


00:45:56.900 --> 00:45:57.740
I don't know what it is,


00:45:57.740 --> 00:46:02.740
but however you land on the, it's a good idea, a bad idea,


00:46:02.740 --> 00:46:06.360
it's gonna cost money if you want to use this.


00:46:06.360 --> 00:46:08.320
And it's pretty pricey, by the way.


00:46:08.320 --> 00:46:11.240
This change will roughly double the cost


00:46:11.240 --> 00:46:12.840
of a basic plan that uses Redis


00:46:14.480 --> 00:46:16.800
from like up to $50 a month,


00:46:16.800 --> 00:46:18.520
'cause you start bringing in your Redis cache


00:46:18.520 --> 00:46:21.220
and your Postgres hosting and your dynos


00:46:21.220 --> 00:46:23.920
and they all add up and then you gotta scale


00:46:23.920 --> 00:46:25.320
this one or that one, right?


00:46:25.320 --> 00:46:28.360
One of the reasons I'm not using it,


00:46:28.360 --> 00:46:29.600
but not the only reason,


00:46:29.600 --> 00:46:30.880
I just want a little more control as well.


00:46:30.880 --> 00:46:34.800
But anyway, so if you have a free thing running on Heroku


00:46:34.800 --> 00:46:37.000
or you were thinking about it,


00:46:37.000 --> 00:46:38.760
you're gonna have to think again, find something else.


00:46:38.760 --> 00:46:39.860
There's actually at the bottom,


00:46:39.860 --> 00:46:43.080
there's a bunch of platforms of service things


00:46:43.080 --> 00:46:43.900
that I've never heard of.


00:46:43.900 --> 00:46:47.060
Porter, Railway, Render, Fly.io and Clever Cloud,


00:46:47.060 --> 00:46:49.200
all of these things vying for this business.


00:46:49.200 --> 00:46:51.300
They all look kind of interesting.


00:46:51.300 --> 00:46:53.140
I know nothing about them.


00:46:53.140 --> 00:46:53.980
You can check it out.


00:46:53.980 --> 00:46:55.820
- I've seen Fly.io all over the place


00:46:55.820 --> 00:46:57.620
and Python, Twitter at least.


00:46:57.620 --> 00:46:58.460
- Yeah, okay.


00:46:58.460 --> 00:47:01.300
- So that's, if I were personally picking one,


00:47:01.300 --> 00:47:02.620
I would check that one out first,


00:47:02.620 --> 00:47:05.300
but I don't know anything about any of them,


00:47:05.300 --> 00:47:06.780
to be honest with you.


00:47:06.780 --> 00:47:10.700
The last time I used Heroku was a long time ago, so.


00:47:10.700 --> 00:47:15.700
I'd like to see some real comparisons


00:47:15.700 --> 00:47:16.660
among some of these.


00:47:16.660 --> 00:47:17.780
If somebody just saying,


00:47:17.780 --> 00:47:22.140
there's still a place for hobby projects.


00:47:22.140 --> 00:47:24.700
Just I wanna try something out


00:47:24.700 --> 00:47:28.100
or you do something live


00:47:28.100 --> 00:47:31.300
even as like a high school app or something like that.


00:47:31.300 --> 00:47:34.180
I know, oh good, you're gonna show Python anywhere.


00:47:34.180 --> 00:47:36.380
- I was going to, I gotta find the right link.


00:47:36.380 --> 00:47:37.200
Here we go.


00:47:38.540 --> 00:47:41.660
So I think they still have a free tier.


00:47:41.660 --> 00:47:44.180
I don't know if they do visit much, but.


00:47:44.180 --> 00:47:45.780
- Beginners free, yeah.


00:47:45.780 --> 00:47:48.460
- The part that bothers me really isn't that it's,


00:47:48.460 --> 00:47:52.260
I don't, there's a comment about,


00:47:52.260 --> 00:47:55.260
comment in the chat about, it's hard to,


00:47:55.260 --> 00:47:59.620
hard to, it's hard to complain about people.


00:47:59.620 --> 00:48:00.740
It's a free service,


00:48:00.740 --> 00:48:02.100
so they can do whatever they want, right?


00:48:02.100 --> 00:48:02.940
Essentially.


00:48:02.940 --> 00:48:05.620
Yeah. Oh, there's that right.


00:48:05.620 --> 00:48:06.980
That's the right one. Yeah.


00:48:06.980 --> 00:48:13.980
However, the jump between free and $50 a month is a big jump.


00:48:13.980 --> 00:48:16.980
And that's my gripe about it.


00:48:16.980 --> 00:48:17.980
So, anyway.


00:48:17.980 --> 00:48:18.980
Yep.


00:48:18.980 --> 00:48:19.980
I agree.


00:48:19.980 --> 00:48:26.460
Not to turn this into a recommendation, but yeah, I feel like a lot of the cloud services


00:48:26.460 --> 00:48:29.580
have really pushed how easy it is to deploy.


00:48:29.580 --> 00:48:34.520
Because I remember initially starting with Heroku, the ease of deployment was the big


00:48:34.520 --> 00:48:36.260
win for a lot of people.


00:48:36.260 --> 00:48:41.300
And so yeah, a lot of cloud services where you pay for everything you use, but what you


00:48:41.300 --> 00:48:47.940
use ends up being a few cents a month, which is a lot more surmountable than $50 a month.


00:48:47.940 --> 00:48:53.140
So yeah, there's definitely a gap there, but there's not as much a gap there as there was


00:48:53.140 --> 00:48:54.140
before.


00:48:54.140 --> 00:48:55.140
Yeah, for sure.


00:48:55.140 --> 00:49:00.020
Brian out in the audience says, "At my last company, we had to disable our free tier due


00:49:00.020 --> 00:49:01.420
to crypto miners."


00:49:01.420 --> 00:49:02.940
- Yeah, of course, I'm sure.


00:49:02.940 --> 00:49:06.380
And Kim also has something, yeah,


00:49:06.380 --> 00:49:10.360
stealing the computation there, but all right, anyway.


00:49:10.360 --> 00:49:13.300
Okay, I didn't wanna go too far down that one,


00:49:13.300 --> 00:49:15.980
but for sure, check out some of the options below.


00:49:15.980 --> 00:49:21.260
DigitalOcean and Linode are also really, really good options.


00:49:21.260 --> 00:49:25.940
This one, I'm full of rants today, potential rants.


00:49:25.940 --> 00:49:27.580
This one comes to us from Extreme Tech.


00:49:27.580 --> 00:49:30.940
White House, as in the US, bans paywalls


00:49:30.940 --> 00:49:33.620
on taxpayer-funded research.


00:49:33.620 --> 00:49:37.600
It has always felt super creepy and wrong


00:49:37.600 --> 00:49:42.600
that we have the NSF, which pays billions of dollars a year,


00:49:42.600 --> 00:49:46.860
millions for individual research projects,


00:49:46.860 --> 00:49:49.360
to come up with scientific research


00:49:49.360 --> 00:49:52.200
that all three of us and many people listening


00:49:52.200 --> 00:49:53.700
actually pay for.


00:49:53.700 --> 00:49:54.980
I'm glad to pay it.


00:49:54.980 --> 00:49:56.600
I think this is really important.


00:49:56.600 --> 00:50:00.240
It's important for the country, it's important for the world.


00:50:00.240 --> 00:50:03.040
And yet, those results get locked up


00:50:03.040 --> 00:50:09.760
behind really expensive for-pay scientific journals.


00:50:09.760 --> 00:50:12.680
You've got to pay $5,000 a year to subscribe to this journal


00:50:12.680 --> 00:50:14.720
so that you can read the article that, wait,


00:50:14.720 --> 00:50:17.600
we paid to create that and we can't even get access to it?


00:50:17.600 --> 00:50:21.160
So this article here is, "The White House


00:50:21.160 --> 00:50:23.560
has updated federal rules to close a loophole that


00:50:23.560 --> 00:50:26.080
enabled journals to keep taxpayer-funded research


00:50:26.080 --> 00:50:29.620
behind a paywall, which I think is great.


00:50:29.620 --> 00:50:31.520
So if you're, so I started in the data science side,


00:50:31.520 --> 00:50:33.860
I think this might be relevant to you.


00:50:33.860 --> 00:50:37.940
- Yeah, I'm curious how that's gonna get implemented.


00:50:37.940 --> 00:50:39.680
- Yeah.


00:50:39.680 --> 00:50:41.960
Me too.


00:50:41.960 --> 00:50:43.440
All right, anyway, there's that.


00:50:43.440 --> 00:50:46.780
And then, Seth, back to some of the stuff


00:50:46.780 --> 00:50:48.280
you were talking about.


00:50:48.280 --> 00:50:49.440
I mean, it would never happen


00:50:49.440 --> 00:50:51.920
that someone would try to phish, wait.


00:50:51.920 --> 00:50:54.240
Last week, somebody tried to phish PyPI,


00:50:54.240 --> 00:50:55.900
maybe it was the week before when it started,


00:50:55.900 --> 00:50:57.860
but not too long ago.


00:50:57.860 --> 00:51:00.940
So over on darkreading.com, there's an article says,


00:51:00.940 --> 00:51:04.420
threat actor phishing PyPI users has been identified.


00:51:04.420 --> 00:51:06.780
Juice Ledger has escalated a campaign


00:51:06.780 --> 00:51:09.100
to distribute its information stealer


00:51:09.100 --> 00:51:11.300
by now going after developers who publish code


00:51:11.300 --> 00:51:14.300
widely used on the Python code repository.


00:51:14.300 --> 00:51:15.340
Don't wanna go too much into it,


00:51:15.340 --> 00:51:18.620
but there's this group who had originally tried


00:51:18.620 --> 00:51:20.820
to do typo squatting, if I'm correct.


00:51:20.820 --> 00:51:24.700
They wrote some things as steal, some malware,


00:51:24.700 --> 00:51:29.980
written in .NET, by the way, which Will was joking about it,


00:51:29.980 --> 00:51:31.940
only running on Windows.


00:51:31.940 --> 00:51:34.480
Hey, if they use .NET Core, they could expand out


00:51:34.480 --> 00:51:35.480
the open source version.


00:51:35.480 --> 00:51:37.860
Anyway, I don't want to give them ideas.


00:51:37.860 --> 00:51:40.480
But they were distributing this malware


00:51:40.480 --> 00:51:43.200
through these malicious packages.


00:51:43.200 --> 00:51:46.500
And then they said, well, what if we get really popular ones,


00:51:46.500 --> 00:51:49.020
hack their accounts, and then upload bad wheels?


00:51:49.020 --> 00:51:50.760
So anyway, there's a bunch of background


00:51:50.760 --> 00:51:52.740
on the actual people behind this.


00:51:52.740 --> 00:51:54.620
So it's pretty interesting.


00:51:54.620 --> 00:51:55.980
You can check out that article if you want.


00:51:55.980 --> 00:51:57.980
There's also an R technical article,


00:51:57.980 --> 00:52:00.860
but it doesn't have as much depth as the dark reading one.


00:52:00.860 --> 00:52:04.980
- Nice. - All right.


00:52:04.980 --> 00:52:05.820
Last one.


00:52:05.820 --> 00:52:08.620
I think this is the last one.


00:52:08.620 --> 00:52:12.220
Brian Skin, former co-host on the show,


00:52:12.220 --> 00:52:14.180
who always contributes many interesting things,


00:52:14.180 --> 00:52:16.900
says Python Bytes will definitely wanna check this out.


00:52:16.900 --> 00:52:19.980
This is a tweet by Steve Dower that says,


00:52:19.980 --> 00:52:22.680
we have published the details


00:52:22.680 --> 00:52:26.500
of a critical security problem for Python.


00:52:26.500 --> 00:52:30.360
It is very rare that we have direct vulnerabilities


00:52:30.360 --> 00:52:31.540
in Python.


00:52:31.540 --> 00:52:34.060
Like it was all fun to have the lulls about


00:52:34.060 --> 00:52:38.700
Jenny, Jindy and log4j.


00:52:38.700 --> 00:52:41.500
But this is not exactly that,


00:52:41.500 --> 00:52:45.380
but it's a denial of service at that kind of scale.


00:52:45.380 --> 00:52:47.860
So if you've ever thought I have a string


00:52:47.860 --> 00:52:49.900
and it needs to be an integer,


00:52:49.900 --> 00:52:52.420
and that string came from user input,


00:52:52.420 --> 00:52:54.540
that's really bad it turns out


00:52:54.540 --> 00:52:58.540
because there's a denial of service thing


00:52:58.540 --> 00:53:01.900
that you can do by passing very, very long strings


00:53:01.900 --> 00:53:03.140
to that integer parsing.


00:53:03.140 --> 00:53:07.380
Seth, you're shaking your head like, oh boy, yes.


00:53:07.380 --> 00:53:09.940
- Yeah, if you've been waiting to upgrade to Python 2,


00:53:09.940 --> 00:53:13.900
now's the time to upgrade to Python 3, I would say.


00:53:13.900 --> 00:53:14.740
- Exactly.


00:53:14.740 --> 00:53:15.940
- Security support.


00:53:15.940 --> 00:53:17.020
- And you shouldn't say,


00:53:17.020 --> 00:53:19.180
eh, I'll just go to one of the older ones.


00:53:19.180 --> 00:53:23.380
Like you need to get the 310.7 ASP.


00:53:23.380 --> 00:53:24.620
I suspect they'll roll this back


00:53:24.620 --> 00:53:26.300
to some of the supported ones as well.


00:53:26.300 --> 00:53:30.240
So they'll probably back port it to 3.9 and 3.8.


00:53:30.240 --> 00:53:33.820
But if you're on say 3.6, that's a problem.


00:53:33.820 --> 00:53:35.400
That's a big, big problem.


00:53:35.400 --> 00:53:40.220
Yeah, so expect releases for 3.7 plus in the next week.


00:53:40.220 --> 00:53:41.860
This came out a few days ago.


00:53:41.860 --> 00:53:43.300
This has now been done,


00:53:43.300 --> 00:53:46.540
but this Twitter thread is super interesting


00:53:46.540 --> 00:53:47.620
and that's what I'm linking to.


00:53:47.620 --> 00:53:49.940
So y'all can check that out.


00:53:49.940 --> 00:53:52.120
There was also some feedback like,


00:53:52.120 --> 00:53:54.740
what are you doing?


00:53:54.740 --> 00:53:55.860
How dare you fix this?


00:53:55.860 --> 00:53:57.460
The way they fixed this is they said,


00:53:57.460 --> 00:53:59.620
if you're doing base 10 parsing,


00:53:59.620 --> 00:54:03.260
you can only use 4,300 digits.


00:54:03.260 --> 00:54:05.940
Not the number to 4,000,


00:54:05.940 --> 00:54:08.620
but places in the number 4,000 places,


00:54:08.620 --> 00:54:10.940
that's a really large number.


00:54:10.940 --> 00:54:11.900
If it's bigger than that,


00:54:11.900 --> 00:54:13.980
basically Python won't be able to parse it before.


00:54:13.980 --> 00:54:16.060
Brian, you do C++ all the time.


00:54:16.060 --> 00:54:18.980
You have to think about, is this over 32,000?


00:54:18.980 --> 00:54:20.700
Is it signed or unsigned?


00:54:20.700 --> 00:54:21.700
Okay, it's unsigned.


00:54:21.700 --> 00:54:23.460
All right, we can get to 64,000.


00:54:23.460 --> 00:54:26.240
This is not that level of thinking,


00:54:26.240 --> 00:54:28.980
but you kind of do have to think about


00:54:28.980 --> 00:54:30.480
what the heck's going on here.


00:54:30.480 --> 00:54:32.020
(laughing)


00:54:32.020 --> 00:54:33.980
- I think it's a fair fix.


00:54:33.980 --> 00:54:36.820
I think people are freaking out for no reason.


00:54:36.820 --> 00:54:38.260
- Yeah, this one is really,


00:54:38.260 --> 00:54:40.420
this one's wild too because it,


00:54:40.420 --> 00:54:41.780
you just pass a long number.


00:54:41.780 --> 00:54:43.860
Like it's not something sophisticated or anything.


00:54:43.860 --> 00:54:47.980
This is, it also, it feels almost not log per J,


00:54:47.980 --> 00:54:49.700
but kind of log per J a little bit.


00:54:49.700 --> 00:54:50.540
- Yes.


00:54:50.540 --> 00:54:51.360
- Where you can just do denial of service


00:54:51.360 --> 00:54:53.580
by doing something very trivial.


00:54:53.580 --> 00:54:58.220
- Exactly, yeah, you just try to set your username


00:54:58.220 --> 00:55:02.100
to jndi colon slash slash hackster.com.


00:55:02.100 --> 00:55:05.940
This is like, well, the number is a 1722117,


00:55:05.940 --> 00:55:07.540
and then boom, now it goes to the website, right?


00:55:07.540 --> 00:55:10.540
This is denial of service versus remote code execution,


00:55:10.540 --> 00:55:13.180
which is clearly better, but it's not good.


00:55:13.180 --> 00:55:15.580
- Just hold down the zero key for a little longer.


00:55:15.580 --> 00:55:17.060
- Exactly.


00:55:17.060 --> 00:55:18.140
Or if you're writing Python code,


00:55:18.140 --> 00:55:20.980
you can just do times 10,000,


00:55:20.980 --> 00:55:22.220
caret 10,000, you know,


00:55:22.220 --> 00:55:23.980
power to 10,000 or something and send that.


00:55:23.980 --> 00:55:26.600
- Yeah, string extension really coming in handy here.


00:55:26.600 --> 00:55:29.540
- R pad, exactly.


00:55:29.540 --> 00:55:31.540
Or Z pad.


00:55:31.540 --> 00:55:34.380
(laughing)


00:55:34.380 --> 00:55:36.180
Yeah, Pilating wants to send pi across,


00:55:36.180 --> 00:55:37.540
you know, that's gonna upset it.


00:55:37.540 --> 00:55:42.060
Anyway, I upgraded my servers to 310.7.


00:55:42.060 --> 00:55:44.740
They were not available from Ubuntu directly.


00:55:44.740 --> 00:55:49.020
That was still the old 3.10.6, which is unnerving.


00:55:49.020 --> 00:55:50.900
But because I built mine from source,


00:55:50.900 --> 00:55:52.980
I just changed the number 3.10.7,


00:55:52.980 --> 00:55:55.700
rebuild and redeploy Python, I'm good to go.


00:55:55.700 --> 00:55:58.920
- I imagine everybody listening to this podcast


00:55:58.920 --> 00:56:03.920
is on 3.7 or above if they at any chance can be.


00:56:03.920 --> 00:56:07.660
I mean, that if they're below,


00:56:07.660 --> 00:56:10.160
it's not because they haven't tried.


00:56:10.160 --> 00:56:11.460
- Yeah.


00:56:11.460 --> 00:56:13.020
But let me point this out, I would say,


00:56:13.020 --> 00:56:14.580
actually I wanna follow up with a couple of things,


00:56:14.580 --> 00:56:15.900
'cause this is, maybe this should have been


00:56:15.900 --> 00:56:17.420
the main item, but whatever.


00:56:17.420 --> 00:56:22.220
One, we've talked about the reason you should upgrade


00:56:22.220 --> 00:56:25.380
to Python 3 for a long time, and Brian, you and I


00:56:25.380 --> 00:56:27.460
had lots of fun calling it Legacy Python,


00:56:27.460 --> 00:56:30.500
although we've had people go into iTunes


00:56:30.500 --> 00:56:33.700
and post negative reviews of the podcast,


00:56:33.700 --> 00:56:36.660
because I had said disparaging things of Python 2,


00:56:36.660 --> 00:56:37.500
but that's okay.


00:56:37.500 --> 00:56:38.460
(laughing)


00:56:38.460 --> 00:56:39.940
I'm willing to stick by them.


00:56:39.940 --> 00:56:42.280
- Oh my goodness, that is wild.


00:56:42.280 --> 00:56:45.380
More reviews, awesome.


00:56:45.380 --> 00:56:46.580
- If you have good things to say,


00:56:46.580 --> 00:56:48.220
also consider posting a review,


00:56:48.220 --> 00:56:51.380
not just if you're angry that I called it legacy Python.


00:56:51.380 --> 00:56:54.740
But if you're on old legacy code,


00:56:54.740 --> 00:56:58.580
which is even 3.5, but is very seriously Python 2,


00:56:58.580 --> 00:57:00.940
'cause the gap to upgrade is really hard,


00:57:00.940 --> 00:57:03.280
these are the types of things that we warned about


00:57:03.280 --> 00:57:05.180
that could be a problem.


00:57:05.180 --> 00:57:08.780
And there will be no fix, right?


00:57:08.780 --> 00:57:10.980
You better just say, well, we're going to make sure


00:57:10.980 --> 00:57:14.060
the strings that are really destined to be integers


00:57:14.060 --> 00:57:15.420
are really, really checked.


00:57:15.420 --> 00:57:17.700
And I mean, it's not good.


00:57:17.700 --> 00:57:18.340
It's not good.


00:57:18.340 --> 00:57:23.380
So just one more reason to be on a shipping version of Python,


00:57:23.380 --> 00:57:26.260
even if it's just 3.7.


00:57:26.260 --> 00:57:26.760
Yeah.


00:57:26.760 --> 00:57:27.460
All right.


00:57:27.460 --> 00:57:32.100
Yeah, that's it.


00:57:32.100 --> 00:57:33.060
Let's see.


00:57:33.060 --> 00:57:35.020
Yeah, the change log.


00:57:35.020 --> 00:57:36.540
One other really quick--


00:57:36.540 --> 00:57:39.420
So you can see it's like actually described quite well here.


00:57:39.420 --> 00:57:42.820
Patch by Gregory P. Smith and Christian Himes.


00:57:42.820 --> 00:57:45.500
Feedback by a bunch of great folks.


00:57:45.500 --> 00:57:48.900
Sebastian Ramirez sent a tweet out when this got fixed


00:57:48.900 --> 00:57:53.900
saying, "Please be kind to your open source contributors.


00:57:53.900 --> 00:57:57.700
"They just wrote 800 lines of code in a PR


00:57:57.700 --> 00:58:00.620
"so that you can parse strings to integers."


00:58:00.620 --> 00:58:03.360
So apparently it wasn't easy to fix, but yeah, I agree.


00:58:05.420 --> 00:58:06.260
Cool.


00:58:06.260 --> 00:58:09.140
Ready for a joke or actually Seth,


00:58:09.140 --> 00:58:11.260
you got anything extras you wanna throw out first?


00:58:11.260 --> 00:58:14.740
- Yeah, I had a real, hopefully quick one.


00:58:14.740 --> 00:58:15.580
- Yeah.


00:58:15.580 --> 00:58:19.380
- So I follow a whole bunch of game art accounts on Twitter


00:58:19.380 --> 00:58:21.660
'cause I just love it.


00:58:21.660 --> 00:58:23.940
Seeing what people create and one came by,


00:58:23.940 --> 00:58:28.740
it was using #pixel, P-Y-X-L, did a little ding.


00:58:28.740 --> 00:58:30.740
I'm like, wait a second, that's Python.


00:58:30.740 --> 00:58:34.020
And then I just went back in this developer's Twitter,


00:58:34.020 --> 00:58:40.340
a few tweets back and they just released Wasm support for this Python game framework.


00:58:40.340 --> 00:58:42.300
I'm like, "This is incredible."


00:58:42.300 --> 00:58:49.340
So yeah, it was a very fast journey of, "Wow, Wasm is everywhere at this point.


00:58:49.340 --> 00:58:52.460
That's kind of wild that it's popping up so fast."


00:58:52.460 --> 00:58:59.180
So yeah, version 1.8.0 of this retro game engine for Python, which they had a whole


00:58:59.180 --> 00:59:01.340
bunch of really beautiful examples.


00:59:01.340 --> 00:59:03.840
I think y'all have covered this framework before, but--


00:59:03.840 --> 00:59:07.480
- I'm not sure if we have, but yeah, this is really cool.


00:59:07.480 --> 00:59:09.860
- Yeah, so apparently they have a whole bunch of demos


00:59:09.860 --> 00:59:11.760
that you can just play in the browser.


00:59:11.760 --> 00:59:13.700
And I was really blown away


00:59:13.700 --> 00:59:15.080
that I didn't even know this existed


00:59:15.080 --> 00:59:17.900
and suddenly there's Wasm support for it, so.


00:59:17.900 --> 00:59:20.360
- Awesome.


00:59:20.360 --> 00:59:21.200
I love it.


00:59:21.200 --> 00:59:22.040
Okay, that's a great one.


00:59:22.040 --> 00:59:22.880
- Yeah.


00:59:22.880 --> 00:59:25.980
- All right, how about we close it out with a bit of a joke?


00:59:25.980 --> 00:59:29.000
Have you ever felt like you've had a hard day at work


00:59:29.000 --> 00:59:30.880
and there's one of these problems like parsing integers?


00:59:30.880 --> 00:59:32.920
you're like, how could possibly this go wrong?


00:59:32.920 --> 00:59:35.960
I just don't understand what is happening.


00:59:35.960 --> 00:59:41.000
Well, here we have a joke of a guy at a nighttime soccer game.


00:59:41.000 --> 00:59:42.560
Apparently it's a little cool out,


00:59:42.560 --> 00:59:44.680
but he's been running really hard.


00:59:44.680 --> 00:59:47.760
So it's a picture of a guy whose head is literally steaming.


00:59:47.760 --> 00:59:51.040
Like, not a little bit, a lot.


00:59:51.040 --> 00:59:52.000
A lot.


00:59:52.000 --> 00:59:54.400
I think that's a visualization of integer


00:59:54.400 --> 00:59:56.040
being parsed into a string right there.


00:59:56.040 --> 00:59:57.600
That's the before.


00:59:57.600 --> 00:59:59.880
I'll read what the tweet really says,


00:59:59.880 --> 01:00:01.620
and then maybe we can play with it a little.


01:00:01.620 --> 01:00:04.520
The tweet says, "Just a JavaScript developer after work."


01:00:04.520 --> 01:00:06.720
You know, like, what do you mean I have to do a new framework?


01:00:06.720 --> 01:00:08.720
I just did a new framework last month.


01:00:08.720 --> 01:00:12.080
[LAUGHTER]


01:00:12.080 --> 01:00:14.720
I feel like this could be Christian Himes after going,


01:00:14.720 --> 01:00:18.480
what do you mean parsing an integer is a denial of service?


01:00:18.480 --> 01:00:21.120
I just can't.


01:00:21.120 --> 01:00:22.120
The ints are wrong.


01:00:22.120 --> 01:00:24.040
The ints are cursed.


01:00:24.040 --> 01:00:25.280
Exactly.


01:00:25.280 --> 01:00:28.680
Anyway, I'll just leave this here for people to appreciate.


01:00:28.680 --> 01:00:30.480
we can call it a show 300.


01:00:30.480 --> 01:00:33.040
- Yeah, nice.


01:00:33.040 --> 01:00:34.440
- Thank you.


01:00:34.440 --> 01:00:35.520
Yeah, thank you, Brian.


01:00:35.520 --> 01:00:37.760
Seth, thanks so much for being here


01:00:37.760 --> 01:00:39.600
and sharing the work you've been doing.


01:00:39.600 --> 01:00:41.400
- Yeah, thanks so much for having me.


01:00:41.400 --> 01:00:42.600
- Yeah, it's been great.


01:00:42.600 --> 01:00:44.320
Bye everyone.


01:00:44.320 --> 01:00:48.700
The Python Bytes live stream will be starting in a few minutes.

