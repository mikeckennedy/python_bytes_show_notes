WEBVTT

00:00:00.001 --> 00:00:03.800
Hey, welcome to Python Bytes.

00:00:03.800 --> 00:00:05.680
Thanks for everybody for showing up.

00:00:05.680 --> 00:00:06.500
And thanks, Michael.

00:00:06.500 --> 00:00:07.540
It's good to see you again.

00:00:07.540 --> 00:00:08.660
Yeah, good to see you as well.

00:00:08.660 --> 00:00:10.840
Ready to kick it off?

00:00:10.840 --> 00:00:12.160
Let's kick it.

00:00:12.160 --> 00:00:13.080
Let's do it.

00:00:13.080 --> 00:00:15.740
Hello, and welcome to Python Bytes,

00:00:15.740 --> 00:00:17.820
where we deliver Python news and headlines

00:00:17.820 --> 00:00:19.880
directly to your earbuds and mine.

00:00:19.880 --> 00:00:23.340
And this is episode 417,

00:00:23.340 --> 00:00:26.280
recorded January 21st, 2025.

00:00:26.280 --> 00:00:28.100
And I'm Brian Okken.

00:00:28.100 --> 00:00:29.760
And I am Michael Kennedy.

00:00:29.760 --> 00:00:34.020
And we're excited about this show today.

00:00:34.020 --> 00:00:37.460
And nothing ain't nothing going to bring us down.

00:00:37.460 --> 00:00:40.740
So but before we get started,

00:00:40.740 --> 00:00:43.680
I want to thank everybody that has supported us

00:00:43.680 --> 00:00:45.980
through Talk Python training,

00:00:45.980 --> 00:00:48.660
through pythontest.com, the courses,

00:00:48.660 --> 00:00:52.300
through ByMyBook, our Patreon supporters, of course.

00:00:52.300 --> 00:00:53.040
You rock.

00:00:53.040 --> 00:00:55.840
And of course, many of the sponsors

00:00:55.840 --> 00:00:57.340
that have sponsored us in the past.

00:00:57.340 --> 00:00:58.860
And we love them too.

00:00:59.040 --> 00:01:01.340
But we also love people that support us directly.

00:01:01.340 --> 00:01:03.480
If you'd like to send us topics,

00:01:03.480 --> 00:01:04.960
please do so through,

00:01:04.960 --> 00:01:07.520
there's a contact form on our website.

00:01:07.520 --> 00:01:11.380
But also you can send them to us at Blue Sky

00:01:11.380 --> 00:01:13.400
or on Mastodon.

00:01:13.400 --> 00:01:14.860
And those links are in the show notes.

00:01:15.540 --> 00:01:17.640
And if you're listening to this,

00:01:17.640 --> 00:01:18.640
thank you.

00:01:18.640 --> 00:01:20.680
And also share it with a friend.

00:01:20.680 --> 00:01:23.280
And if you'd like to join us live sometime,

00:01:23.280 --> 00:01:26.100
check out pythonbytes.fm/live

00:01:26.100 --> 00:01:28.520
to see when the next episode is going to be filmed,

00:01:28.520 --> 00:01:30.880
filmed and recorded.

00:01:31.520 --> 00:01:35.620
And you can join us and comment while we're going live.

00:01:35.620 --> 00:01:41.680
And thank you also for people that subscribe to the email newsletter.

00:01:41.680 --> 00:01:45.560
If you go to pythonbytes.fm, you can subscribe there as well.

00:01:45.560 --> 00:01:50.700
And get the list of all the topics directly in your inbox

00:01:50.700 --> 00:01:52.260
so you don't have to go look those up.

00:01:53.000 --> 00:01:55.400
Yeah, we're evolving the format of that a little bit,

00:01:55.400 --> 00:01:57.240
trying to make a little deeper analysis,

00:01:57.240 --> 00:01:58.420
but also skimmable.

00:01:58.420 --> 00:02:00.880
And yeah, it's a huge resource.

00:02:00.880 --> 00:02:01.500
I think it's great.

00:02:01.500 --> 00:02:03.020
People listen as well,

00:02:03.020 --> 00:02:06.120
but it's also nice to just have that written down in one place.

00:02:06.120 --> 00:02:10.520
And we cover lots of great topics every week.

00:02:10.520 --> 00:02:13.000
And what is our first topic this week, Michael?

00:02:13.000 --> 00:02:17.080
The first topic will be the LLM catcher.

00:02:17.080 --> 00:02:23.880
The name, not terribly descriptive of what it actually does,

00:02:23.880 --> 00:02:24.840
but here's the deal.

00:02:24.840 --> 00:02:28.560
I'm sure everyone has done this at this point.

00:02:28.560 --> 00:02:34.120
I know I've done it recently as I was yelling at the Bodo 3 API

00:02:34.120 --> 00:02:39.240
because it ain't nothing as frustrating as a little Bodo.

00:02:39.240 --> 00:02:42.660
Auto-generated, no comments, no documentation,

00:02:42.660 --> 00:02:45.340
no idea what parameters go in it.

00:02:46.440 --> 00:02:48.880
Anyway, you might take those errors

00:02:48.880 --> 00:02:50.860
and pass them over to an LLM and go,

00:02:50.860 --> 00:02:57.340
please, dear chat, copilot, anthropic, whatever.

00:02:57.340 --> 00:02:59.480
What is going on here?

00:02:59.480 --> 00:03:00.640
What am I missing, right?

00:03:00.640 --> 00:03:01.880
And it's super helpful.

00:03:01.880 --> 00:03:05.100
But this project is a little bit different.

00:03:05.100 --> 00:03:07.760
It's like a gateway to those types of things.

00:03:07.760 --> 00:03:09.140
So here's what you get.

00:03:09.140 --> 00:03:12.160
If there is a crash,

00:03:12.160 --> 00:03:15.580
obviously you have stack traces or tracebacks,

00:03:15.580 --> 00:03:17.240
depending on the language you're in, how you say it.

00:03:17.240 --> 00:03:22.540
They describe it here as the unsung villains of debugging.

00:03:22.540 --> 00:03:28.160
Why wrestle with the wall of cryptic error messages

00:03:28.160 --> 00:03:30.360
when you could let LLM catcher do the heavy lifting?

00:03:30.360 --> 00:03:31.220
So here's the thing.

00:03:31.220 --> 00:03:33.060
You basically, I'll go down here somewhere.

00:03:33.800 --> 00:03:36.480
What you can do is in your try accept blocks,

00:03:36.480 --> 00:03:40.400
you can say, you know, given an exception,

00:03:40.400 --> 00:03:43.140
diagnose or dot diagnose, passing the exception,

00:03:43.140 --> 00:03:49.260
and it will pass those details over to various LLMs and say,

00:03:49.260 --> 00:03:52.020
help me understand this and print out a message

00:03:52.020 --> 00:03:54.400
that will show me how to fix it, not just a traceback.

00:03:55.200 --> 00:03:55.460
Okay.

00:03:55.460 --> 00:03:56.400
Okay.

00:03:56.400 --> 00:03:58.900
So I don't know if I can find it.

00:03:58.900 --> 00:04:00.660
Yeah, I think it's pretty dope.

00:04:00.660 --> 00:04:02.880
I would not use it in production, though you could.

00:04:02.880 --> 00:04:05.540
You could, if you want your logs to have messages about,

00:04:05.540 --> 00:04:07.720
here's actually what happened.

00:04:07.720 --> 00:04:10.200
It's your debugging sidekick.

00:04:10.360 --> 00:04:13.340
So what you do is you can run OLAMA locally,

00:04:13.340 --> 00:04:14.560
and that's the default,

00:04:14.560 --> 00:04:18.820
or if you give it your OpenAI API key,

00:04:18.820 --> 00:04:23.620
it can pass it over to whatever level of model you possibly have.

00:04:23.620 --> 00:04:26.720
You know, it'd be awesome if you could have a one mini

00:04:26.720 --> 00:04:29.740
or something like that, diagnose it over at ChatGPT.

00:04:29.740 --> 00:04:32.740
So there's different ones that we'll work with,

00:04:32.740 --> 00:04:34.760
but basically when it gets an exception,

00:04:34.760 --> 00:04:39.020
it says, hey, I'm working on this thing with FastAPI,

00:04:39.440 --> 00:04:40.640
and I get this exception,

00:04:40.640 --> 00:04:42.580
help me figure out what's going on.

00:04:42.580 --> 00:04:45.320
So the OLAMA one is a local free,

00:04:45.320 --> 00:04:47.560
just running your machine version, OpenAI.

00:04:47.560 --> 00:04:49.780
Well, we all know about ChatGPT, right?

00:04:49.780 --> 00:04:53.360
So you can put it as a decorator on a function.

00:04:53.360 --> 00:04:56.740
You can manually do it in a try except block,

00:04:56.740 --> 00:05:00.080
or you can even register a global exception handler.

00:05:00.080 --> 00:05:02.320
So anytime an exception happens,

00:05:02.320 --> 00:05:05.680
it's uncaught in your system, it'll diagnose it.

00:05:05.680 --> 00:05:08.100
It has both async and async API,

00:05:08.520 --> 00:05:11.060
and you can set it up through environment variables.

00:05:11.060 --> 00:05:18.020
So, you know, it shows you like how to pull down the QWEN 2.5 coder model

00:05:18.020 --> 00:05:20.060
for OLAMA, which is pretty excellent.

00:05:20.060 --> 00:05:22.160
And just off it goes.

00:05:22.160 --> 00:05:22.500
Look at that.

00:05:22.500 --> 00:05:25.820
So you've got your diagnoser.catch on a risky function,

00:05:25.820 --> 00:05:27.140
or in your try except block,

00:05:27.140 --> 00:05:30.240
you just say, you know, diagnose or async diagnose,

00:05:30.240 --> 00:05:32.680
because, you know, it's going to run for a while.

00:05:33.020 --> 00:05:36.520
It's going to make an API call either locally or out to ChatGPT.

00:05:36.520 --> 00:05:38.420
So you don't want to necessarily block your system.

00:05:38.420 --> 00:05:40.260
So you just make a little async await.

00:05:40.260 --> 00:05:40.560
Boom.

00:05:40.560 --> 00:05:41.340
Off it goes.

00:05:41.340 --> 00:05:43.060
Yeah, there you go.

00:05:43.060 --> 00:05:44.180
That's pretty much it.

00:05:44.180 --> 00:05:47.720
You can get formatted or unformatted information back.

00:05:48.480 --> 00:05:53.540
So if you need plain text to go into some kind of JSON field,

00:05:53.540 --> 00:05:54.060
you can do that,

00:05:54.060 --> 00:05:57.600
or you can get it with proper formatting to make it more readable.

00:05:57.600 --> 00:05:58.840
What do you think, Brian?

00:06:01.020 --> 00:06:05.360
I'm going to withhold judgment on this until I give it a shot at some point.

00:06:05.360 --> 00:06:06.040
Yeah.

00:06:06.040 --> 00:06:08.200
You can even specify the temperature,

00:06:08.200 --> 00:06:12.600
a.k.a. the creativity you want the model to apply to your analysis.

00:06:12.600 --> 00:06:13.580
That's funny.

00:06:13.580 --> 00:06:14.400
Yeah.

00:06:14.400 --> 00:06:15.760
It's an open AI thing.

00:06:15.760 --> 00:06:19.560
I'd kind of like it to, like, on any exception,

00:06:19.560 --> 00:06:24.700
just upload my entire code base and rewrite my code to fix the error.

00:06:24.700 --> 00:06:26.220
Exactly.

00:06:26.220 --> 00:06:27.020
Don't diagnose it.

00:06:27.020 --> 00:06:27.540
Just fix it.

00:06:27.540 --> 00:06:28.360
Just fix it, man.

00:06:28.360 --> 00:06:29.880
Why am I even in the way here?

00:06:30.800 --> 00:06:31.200
Yeah.

00:06:31.200 --> 00:06:32.180
So look at it.

00:06:32.180 --> 00:06:35.020
Yeah, you can even do the full-on O1 model.

00:06:35.020 --> 00:06:36.360
Okay.

00:06:36.360 --> 00:06:38.520
ChatGPT, which is, like, the really, really.

00:06:38.520 --> 00:06:39.720
Is that the $200 one?

00:06:39.720 --> 00:06:44.260
That's the $20 one, but you only get to call it, like, 50 times a week.

00:06:44.260 --> 00:06:45.660
So not too many errors.

00:06:45.660 --> 00:06:47.820
If you get the $200 one, you can call it all day long.

00:06:47.820 --> 00:06:53.200
Yeah, I'd like people to get the $200 one, put this in your CI,

00:06:53.200 --> 00:06:56.580
and do it over, like, you know, all versions of Python

00:06:56.580 --> 00:06:58.480
so that we just, like, fill up all of the.

00:06:59.080 --> 00:07:02.040
And then we'll get an announcement of, oh,

00:07:02.040 --> 00:07:05.860
the entire West Coast is blacked out because we broke the power grid.

00:07:05.860 --> 00:07:08.900
Yeah.

00:07:08.900 --> 00:07:11.860
But anyway, this is, I think it's interesting, right?

00:07:11.860 --> 00:07:13.100
Just plug that in.

00:07:13.100 --> 00:07:13.540
Yeah.

00:07:13.720 --> 00:07:16.800
It looks like it might be kind of fun.

00:07:16.800 --> 00:07:17.740
Yeah.

00:07:17.740 --> 00:07:18.900
It does look kind of fun.

00:07:18.900 --> 00:07:20.580
And this was recommended by Pat.

00:07:20.580 --> 00:07:22.220
So thanks, Pat, for sending that in.

00:07:22.220 --> 00:07:22.580
Pat Decker.

00:07:22.580 --> 00:07:24.380
Oh, and Pat's here.

00:07:24.380 --> 00:07:24.980
Thanks, Pat.

00:07:24.980 --> 00:07:25.280
Yeah.

00:07:25.280 --> 00:07:25.740
Yeah.

00:07:25.740 --> 00:07:29.100
Over here.

00:07:29.980 --> 00:07:35.100
Well, I kind of want to talk about bad packages a little bit.

00:07:35.100 --> 00:07:38.700
Like, no Christmas presents for them or what's going on?

00:07:38.700 --> 00:07:39.160
Yeah.

00:07:39.160 --> 00:07:40.880
No wrapping paper.

00:07:40.880 --> 00:07:44.280
Actually, we are talking about wrapping.

00:07:44.280 --> 00:07:50.420
So I want to talk about the Python packaging index and malicious stuff.

00:07:51.160 --> 00:07:52.800
So let's scroll down here.

00:07:52.800 --> 00:07:59.940
There's in the, there was a security and safety engineer first year in review.

00:07:59.940 --> 00:08:01.580
This was from Mike Fiedler.

00:08:01.580 --> 00:08:04.740
And he talked about a lot of stuff.

00:08:04.740 --> 00:08:07.660
But one of the things he talked about was quarantining.

00:08:07.660 --> 00:08:08.860
And this came out in August.

00:08:09.580 --> 00:08:11.640
But I just am catching up.

00:08:11.640 --> 00:08:14.100
So it's like if they catch COVID or what's going on?

00:08:14.100 --> 00:08:17.260
No, it's, you know, it's like bad packages.

00:08:17.260 --> 00:08:22.160
So if somebody says, you know, there's malware in a package.

00:08:22.160 --> 00:08:24.460
It shouldn't be there.

00:08:24.460 --> 00:08:25.460
What do we do with it?

00:08:25.460 --> 00:08:29.940
And they used to, like, have the option to investigate it and then yank it.

00:08:29.940 --> 00:08:32.040
But it just sort of makes the whole thing go away.

00:08:32.040 --> 00:08:34.720
But there's a new process.

00:08:34.720 --> 00:08:38.580
And they just recently, at the end of December, wrote about it.

00:08:39.260 --> 00:08:41.500
And there's, it's called Project Quarantine.

00:08:41.500 --> 00:08:45.540
And, and this, we're linking to an article that really talks about it.

00:08:45.540 --> 00:08:51.420
So if you're, if you're worried about malicious packages, and you're curious about what PyPI is up to, go ahead and check this out.

00:08:51.420 --> 00:08:52.940
I'm not going to go through the whole thing.

00:08:52.940 --> 00:08:55.320
However, it is kind of interesting.

00:08:55.320 --> 00:09:05.320
So the idea is, if we jump back down to, like, future improvements in automation, hopefully we'd have some sort of automated way.

00:09:05.320 --> 00:09:11.880
But, like, let's say a couple people report that a package has malware in it.

00:09:11.880 --> 00:09:24.980
Administrators of PyPI can go ahead and, and, and somehow have some litmus test to say, or some thing to say, rather quickly, let's get this, get this under control.

00:09:25.380 --> 00:09:27.740
And the quarantine doesn't delete the whole thing.

00:09:27.740 --> 00:09:37.560
It, it puts the, there's an API, simple API that an admin can go in and say, hey, we're going to quarantine this, this project.

00:09:37.880 --> 00:09:39.820
And the package goes into quarantine.

00:09:39.820 --> 00:09:44.320
And at that point, there's a bunch of, the bunch of stuff happens.

00:09:44.320 --> 00:09:48.480
The, it's not installable, but the owner can still see it.

00:09:48.480 --> 00:09:52.180
And the only owner can, can make, I don't know if they can make changes.

00:09:52.180 --> 00:09:57.580
But, yeah, it's not modifiable while it's in quarantine, but they can see what's going on.

00:09:58.400 --> 00:10:04.360
Administrators can look at it and, and determine whether or not there really is malware there.

00:10:04.360 --> 00:10:10.500
And possibly, it's possible that, you know, we might have some bad actors reporting packages.

00:10:11.180 --> 00:10:20.760
So, we don't want people to, like, report stuff that's fine and have things to remove just because they're angry about it or something.

00:10:20.760 --> 00:10:23.100
But that hasn't happened yet.

00:10:23.100 --> 00:10:26.640
So, this, this, this has been in place for a little while.

00:10:26.640 --> 00:10:34.180
And looking at the statistics, it's been, let's see, since August, they put this in place.

00:10:34.180 --> 00:10:45.680
There's been 140 reported packages and they've been, gone into quarantine and only one of them exited quarantine.

00:10:45.680 --> 00:10:48.640
And it's because, why was it?

00:10:48.640 --> 00:10:51.460
The, the, there was obfuscated code in there.

00:10:51.460 --> 00:10:55.460
Then that's a violation of the PyPI acceptable use policy.

00:10:55.460 --> 00:10:57.200
Project owner was contacted.

00:10:57.200 --> 00:11:01.520
They fixed it because they just, I guess, weren't aware that you can't do that.

00:11:01.520 --> 00:11:02.560
That's a really interesting.

00:11:02.560 --> 00:11:04.100
I didn't know that was a policy.

00:11:04.960 --> 00:11:05.360
Yeah.

00:11:05.360 --> 00:11:06.160
Well, I mean, it should be.

00:11:06.160 --> 00:11:15.340
What if you want to ship something that you, I know there are companies out there that would like, we would like to obfuscate our code, but we still want to make it
available.

00:11:15.340 --> 00:11:15.780
But we.

00:11:15.780 --> 00:11:17.980
Don't do it through PyPI.

00:11:17.980 --> 00:11:19.440
I guess don't do it through PyPI.

00:11:19.440 --> 00:11:19.860
Okay.

00:11:19.860 --> 00:11:22.400
I don't want obfuscated code.

00:11:22.400 --> 00:11:27.420
I understand that that's primarily a shielded malware hides behind, right?

00:11:27.420 --> 00:11:27.960
Yeah.

00:11:27.960 --> 00:11:32.720
They'll have a base 64 encoded string of something or other, and then they'll decode it and execute it.

00:11:33.580 --> 00:11:33.880
Right.

00:11:33.880 --> 00:11:34.700
It's just, yeah.

00:11:35.340 --> 00:11:41.940
So, yeah, there's, there's, yeah, created some outreach templates.

00:11:41.940 --> 00:11:52.240
So the full process, if you're confused and, or if you have a, this is something, if you get notified by an administrator that one of your packages is in quarantine, good.

00:11:52.340 --> 00:11:54.980
They'll probably point you to this anyway, but you know, check this out.

00:11:54.980 --> 00:12:05.420
I thought I've, I'm glad that they're working on this and we're making the environment easier for PyPI admins to deal with, but also just safer for everybody to use.

00:12:05.420 --> 00:12:06.380
So it's good.

00:12:06.760 --> 00:12:07.380
Yeah.

00:12:07.380 --> 00:12:07.380
Excellent.

00:12:07.380 --> 00:12:11.680
Well, you know, I'm sure you're aware of this, Brian.

00:12:11.680 --> 00:12:14.600
Testing, testing makes your code safer to use.

00:12:14.600 --> 00:12:15.260
Yeah.

00:12:15.760 --> 00:12:20.320
And I have fully embraced the async lifestyle these days.

00:12:20.320 --> 00:12:27.340
You know, I talked about rewriting talk Python and court, the async version of flask.

00:12:27.560 --> 00:12:30.360
And I blogged about that and brought it up on the show.

00:12:30.360 --> 00:12:30.800
I'm pretty sure.

00:12:30.800 --> 00:12:35.820
But how are you going to call APIs?

00:12:35.820 --> 00:12:39.400
I'm working on some projects right now that are like all about calling APIs.

00:12:39.400 --> 00:12:41.720
And I'm like, oh my gosh, so many APIs.

00:12:41.720 --> 00:12:44.280
This thing calls that, which, you know, so on.

00:12:44.280 --> 00:12:47.860
If you can do that asynchronously, that'd be awesome.

00:12:47.860 --> 00:13:06.400
And I would say probably the best kind of, I'm a fan of requests, but I want async story these days is HTTPX, which has got some basically very, very similar, not
identical, but very, very similar behaviors and API patterns as requests, but also has an async variant.

00:13:06.400 --> 00:13:10.180
You can create the async client and then await all your calls, which is great.

00:13:10.180 --> 00:13:13.380
So you might want to test that, right?

00:13:13.380 --> 00:13:16.860
Even asynchronously because you're writing code as async.

00:13:16.860 --> 00:13:22.660
So I want to introduce people to RESPX, like response X.

00:13:22.660 --> 00:13:24.680
Probably is the way you pronounce that.

00:13:24.680 --> 00:13:25.620
I'm not entirely sure.

00:13:25.620 --> 00:13:27.860
HTTPX or response X.

00:13:27.860 --> 00:13:28.200
I don't know.

00:13:28.200 --> 00:13:28.500
Whatever.

00:13:28.500 --> 00:13:31.620
RESPX.

00:13:31.620 --> 00:13:37.180
And what it does is it lets you mock out HTTPX requests.

00:13:37.180 --> 00:13:38.760
Super, super easy.

00:13:38.760 --> 00:13:40.720
However you like.

00:13:40.720 --> 00:13:45.800
So for example, if I want to make a call where I say HTTPX get,

00:13:45.800 --> 00:13:52.800
and I want to make sure that if that URL comes in, it's going to return some particular value like a 204.

00:13:53.600 --> 00:13:59.740
You just say RESP.same function call with the values.

00:13:59.740 --> 00:14:03.720
And then you just say .mock and you set the values or the behaviors that you want it to do.

00:14:03.720 --> 00:14:04.880
And off it goes.

00:14:04.880 --> 00:14:06.500
That's pretty cool.

00:14:06.500 --> 00:14:07.180
Yeah.

00:14:07.180 --> 00:14:11.240
And it also comes as a pytest plugin if you want to roll that way.

00:14:11.320 --> 00:14:15.380
So then you just say RESP.mock.whatever and just call the functions.

00:14:15.380 --> 00:14:20.100
And then all the examples here are like first line, mock it.

00:14:20.100 --> 00:14:21.220
Second line, call it.

00:14:21.220 --> 00:14:27.960
But, you know, probably you're testing some function that then internally is using HTTPX through like a width, async width block.

00:14:27.960 --> 00:14:28.600
And right.

00:14:28.600 --> 00:14:33.080
Like there's a lot of layers going down there that you might need to work with.

00:14:33.320 --> 00:14:36.500
And so, right, that would be a more realistic example.

00:14:36.500 --> 00:14:40.000
You call the mock and then you call your code and then something happens.

00:14:40.000 --> 00:14:41.380
Right.

00:14:41.760 --> 00:14:42.840
So that's pretty cool.

00:14:42.840 --> 00:14:44.680
You can even use mark.

00:14:44.680 --> 00:14:49.820
Probably make sense of this pytest.mark statement here for me.

00:14:49.820 --> 00:14:50.860
What are we doing?

00:14:50.860 --> 00:14:54.280
Well, what do you mean?

00:14:54.280 --> 00:14:54.800
Okay.

00:14:54.800 --> 00:14:58.160
So you got pytest marking it with RESPX.

00:14:58.160 --> 00:15:05.980
So the project is to find a custom mark and it's passing in the base URL of foo.bar.

00:15:05.980 --> 00:15:07.600
And then within it.

00:15:07.600 --> 00:15:08.160
Yeah.

00:15:08.160 --> 00:15:10.220
You don't have to, I guess, say the base URL, right?

00:15:10.220 --> 00:15:11.120
Right.

00:15:11.200 --> 00:15:13.580
Because you're just passing it in.

00:15:13.580 --> 00:15:13.900
We can.

00:15:13.900 --> 00:15:17.160
And because it's really, it's not that bad.

00:15:17.160 --> 00:15:22.460
Not that hard to pass in through markers of variable to fixtures.

00:15:22.460 --> 00:15:23.540
So that's what's going on.

00:15:23.540 --> 00:15:25.800
So you kind of pre-prepare it with your mark here.

00:15:25.800 --> 00:15:26.040
Okay.

00:15:26.040 --> 00:15:26.460
Awesome.

00:15:26.460 --> 00:15:27.240
Yeah.

00:15:27.240 --> 00:15:29.480
And then the fixture is passed in.

00:15:29.480 --> 00:15:29.920
Okay, cool.

00:15:29.920 --> 00:15:31.400
And that's pretty much it.

00:15:31.400 --> 00:15:34.680
There's not a whole lot of, not a lot of say about it.

00:15:34.680 --> 00:15:41.180
But if you need to mock out HTTPX, instead of using generic mock stuff, you can use this library that basically has exactly the same API.

00:15:41.180 --> 00:15:44.020
And it's pretty cool.

00:15:44.020 --> 00:15:50.240
Sometimes I forget that not everybody has completely internalized the entire content of my book.

00:15:51.280 --> 00:15:52.960
Well, we can work on that.

00:15:52.960 --> 00:15:53.840
We can work on it.

00:15:53.840 --> 00:15:55.080
Yeah.

00:15:55.080 --> 00:15:59.120
I learned something new.

00:15:59.120 --> 00:16:00.460
I don't want to talk about it.

00:16:00.460 --> 00:16:00.800
Oh, really?

00:16:00.800 --> 00:16:01.820
You know what?

00:16:01.820 --> 00:16:05.720
If you, I think if this is your next topic, I had no idea about this either.

00:16:05.720 --> 00:16:07.160
So I'm about to learn something new.

00:16:07.780 --> 00:16:08.100
Okay.

00:16:08.100 --> 00:16:18.880
Well, so this is actually something that Rodrigo also learned something new because he marked it as TIL for Today I Learned.

00:16:19.880 --> 00:16:23.460
And I kind of love people posting the TILs.

00:16:23.460 --> 00:16:31.020
But also, I'm personally somebody that I don't think you need to prefix things with TIL for Today I Learned.

00:16:31.020 --> 00:16:34.040
If you just have a small blog post, go ahead and post it anyway.

00:16:34.040 --> 00:16:35.580
I like small posts.

00:16:35.940 --> 00:16:41.520
Anyway, so unpacking keyword args with, or K-Kwargs.

00:16:41.520 --> 00:16:43.700
I usually just say keyword args.

00:16:43.700 --> 00:16:45.360
Do you have, do you say quarks?

00:16:45.360 --> 00:16:47.100
I'm K-W-Args.

00:16:47.100 --> 00:16:48.100
K-W-Args.

00:16:48.100 --> 00:16:48.460
Okay.

00:16:48.460 --> 00:16:50.420
But I know people say quarks, but I don't know.

00:16:50.420 --> 00:16:52.260
It sounds like I'm speaking Klingon or something.

00:16:52.260 --> 00:16:52.800
I don't do it.

00:16:52.800 --> 00:16:53.420
Yeah.

00:16:54.880 --> 00:16:57.200
It makes me think of Deep Space Nine with quark.

00:16:57.200 --> 00:17:01.380
But unpacking keyword args with custom objects.

00:17:01.380 --> 00:17:04.720
So let's say you've got, so there's a couple of things.

00:17:04.720 --> 00:17:13.040
Unpacking, and we're talking about the star or the double star or the splat splat or double splat, however you want to say it.

00:17:13.040 --> 00:17:23.340
So let's say you've got a dictionary and you want to pass the contents of the dictionary as arguments to a function or something.

00:17:24.020 --> 00:17:34.740
That's how we often use it, is doing a star star with a dictionary and it unpacks it into keyword args for a function call, which is cool.

00:17:34.740 --> 00:17:36.120
Or you can just do it.

00:17:36.120 --> 00:17:40.960
Here's an example of merging two dictionaries with this.

00:17:40.960 --> 00:17:44.460
I don't do it like, I don't usually do this much, but cool, you can do that.

00:17:44.460 --> 00:17:49.220
There's a newer syntax where we use the pipe on dictionaries as well, and that's the same thing.

00:17:49.220 --> 00:17:52.620
There's like three or four ways to do this these days.

00:17:52.620 --> 00:17:57.740
Yeah, because with Python, there should be one obvious way to do this.

00:17:57.740 --> 00:17:58.720
And if there's not, there's four.

00:17:58.720 --> 00:18:01.040
Unless it's strings, then there's six.

00:18:01.040 --> 00:18:03.580
Okay.

00:18:03.580 --> 00:18:11.760
So there's a lot of times where doing this star star unpacking is like so cool and convenient.

00:18:13.420 --> 00:18:18.420
But if you have custom objects, not dictionaries, if you have your own objects, what do you want?

00:18:18.420 --> 00:18:19.960
How do you deal with that?

00:18:19.960 --> 00:18:20.740
Can you do that?

00:18:20.740 --> 00:18:21.640
Yes, you can.

00:18:21.640 --> 00:18:24.560
And that's what this little TIL is about.

00:18:24.560 --> 00:18:30.580
All you have to do is you have to add a keys function to your object or your class.

00:18:31.260 --> 00:18:35.800
And the keys function needs to, or method, needs to return an iterable.

00:18:35.800 --> 00:18:38.540
And in this case, just a list is an iterable, for instance.

00:18:38.540 --> 00:18:41.760
And in the example, he's got a Harry Potter class.

00:18:41.760 --> 00:18:44.540
It was returning first, middle, and last.

00:18:44.540 --> 00:18:53.200
And then a get item that presumably, that takes a key and returns something.

00:18:54.160 --> 00:18:55.380
And that's all you need.

00:18:55.380 --> 00:18:58.840
And then you can do this double splat thing.

00:18:58.840 --> 00:18:59.880
And it works.

00:18:59.880 --> 00:19:00.980
Oh, that's awesome.

00:19:00.980 --> 00:19:10.060
And also, the example's good also just to remind everybody that when you're doing the get item,

00:19:10.060 --> 00:19:13.960
to go ahead and do an else clause with a key error.

00:19:13.960 --> 00:19:17.900
So if people pass in the wrong thing, they get the appropriate exception.

00:19:17.900 --> 00:19:20.240
So anyway, thanks.

00:19:20.240 --> 00:19:20.560
Indeed.

00:19:20.560 --> 00:19:21.620
Yeah, I love it.

00:19:21.620 --> 00:19:22.180
Very, very cool.

00:19:22.180 --> 00:19:25.380
All right.

00:19:25.380 --> 00:19:27.060
I have different items, right?

00:19:27.060 --> 00:19:28.380
That's it, I guess.

00:19:28.380 --> 00:19:30.920
You feel pretty extra, I can see.

00:19:30.920 --> 00:19:32.440
I do feel pretty extra.

00:19:32.440 --> 00:19:34.700
I got more extras than I had normal things.

00:19:34.700 --> 00:19:35.640
So let's jump in.

00:19:35.640 --> 00:19:36.480
Let's do it.

00:19:36.480 --> 00:19:42.080
Over on pythontest.com, oh, a couple of things.

00:19:42.080 --> 00:19:43.060
I'll just kind of go backwards.

00:19:43.060 --> 00:19:44.940
First off, I finally fixed it.

00:19:44.940 --> 00:19:48.840
I had X up or Twitter, and I don't do Twitter anymore.

00:19:48.840 --> 00:19:52.000
So I replaced it with a blue sky icon.

00:19:52.000 --> 00:19:55.580
And also on my contact form, it has blue sky now.

00:19:55.580 --> 00:19:57.220
So I fixed those things.

00:19:57.220 --> 00:20:02.720
Also, I had like incorrect podcast stuff up.

00:20:02.720 --> 00:20:06.880
So I fixed my podcast data, testing code and Python bytes and stuff, of course.

00:20:06.880 --> 00:20:08.960
Anyway, that's not what I really want to talk about.

00:20:09.020 --> 00:20:12.080
What I want to talk about is the top pytest plugins.

00:20:12.080 --> 00:20:19.960
I've been researching a lot of the stuff in here for the testing code season two.

00:20:20.720 --> 00:20:26.940
And I'm relying on, with this data, I'm relying on the top PyPI packages.

00:20:27.400 --> 00:20:30.740
And this is an excellent resource.

00:20:30.740 --> 00:20:32.860
And it uses BigQuery.

00:20:32.860 --> 00:20:39.480
And there was just a new article from the person that created this, Hugo.

00:20:39.480 --> 00:20:44.300
He wrote an article about what's going on with this.

00:20:44.780 --> 00:20:47.860
A surprising thing about PyPI is BigQuery data.

00:20:47.860 --> 00:20:51.120
And it's interesting and also kind of exciting news.

00:20:51.120 --> 00:21:03.040
So the interesting thing is he's using the free version of Google Big Cloud or BigQuery stuff.

00:21:03.040 --> 00:21:05.100
Whatever you need, the Google account.

00:21:05.560 --> 00:21:08.840
You get a few BigQuery queries.

00:21:08.840 --> 00:21:11.540
And if you do it too much, they kick you out.

00:21:11.540 --> 00:21:16.600
And so at first, he started with 4,000 projects.

00:21:16.600 --> 00:21:18.540
Then he bumped up to 5,000 projects.

00:21:18.540 --> 00:21:20.240
And then 8,000 projects.

00:21:20.240 --> 00:21:22.020
But there's more than that.

00:21:22.020 --> 00:21:24.000
So he's like, well, I wonder how much I can do.

00:21:24.000 --> 00:21:27.480
And so this is a little test that he went through.

00:21:27.480 --> 00:21:30.480
I'm going to jump down to the punchline.

00:21:31.000 --> 00:21:38.560
And the punchline is that you can do, he went up to, tried a million packages.

00:21:38.560 --> 00:21:40.900
And there aren't a million packages.

00:21:40.900 --> 00:21:45.000
But it returned 531,000 packages.

00:21:45.000 --> 00:21:52.040
And it was the same bytes processed as even just doing one for 30 days.

00:21:52.040 --> 00:21:57.100
So it doesn't matter.

00:21:57.100 --> 00:22:00.200
It turned out it didn't really matter how many packages.

00:22:00.540 --> 00:22:04.740
What it was was how the date time, the date spread.

00:22:04.740 --> 00:22:12.620
So if you did like five days, it was way cheaper than 15 days, which is way cheaper than 30 days.

00:22:12.620 --> 00:22:14.380
And it's relatively linear.

00:22:14.380 --> 00:22:23.340
So it looks like what he's going to do is change it so that we get like a ton of package data,

00:22:23.340 --> 00:22:26.800
like as much as we can get, 531,000.

00:22:27.240 --> 00:22:37.900
But he's probably going to report that in smaller chunks too because a lot of people are going to want to see 531,000.

00:22:37.900 --> 00:22:39.740
The top 8,000 is probably sufficient.

00:22:39.740 --> 00:22:41.560
You really got to zoom in to see them all at once.

00:22:43.560 --> 00:22:56.900
So I'm excited because when I'm using the 8,000 data set and the top high test packages, there are currently 133 in the top 8,000.

00:22:56.900 --> 00:22:58.980
And I'd like to have a bigger list.

00:22:59.340 --> 00:23:06.320
So if I've got the top 10,000 or 20,000, I could probably get a bigger list of 5 days packages.

00:23:06.320 --> 00:23:06.660
Yeah, absolutely.

00:23:06.660 --> 00:23:07.260
Anyway.

00:23:09.440 --> 00:23:11.040
So that's it.

00:23:11.040 --> 00:23:14.020
It's just an interesting thing if you're doing BigQuery data.

00:23:14.020 --> 00:23:18.680
It's the date that is the big effector of the price.

00:23:18.680 --> 00:23:18.920
Right.

00:23:18.920 --> 00:23:29.000
Because it probably counts the number of downloads for each day or per download individually, whereas if there's only 500,000 packages, there's that.

00:23:29.000 --> 00:23:31.480
But there's way more downloads than there are packages.

00:23:32.160 --> 00:23:42.700
The other thing that might change is, I think is going to change, is it cost more to filter on just pip packages.

00:23:42.700 --> 00:23:51.180
And now we're getting a lot of UV, people using UV to download stuff from PyPI.

00:23:51.180 --> 00:23:53.860
And so he wants to include that too.

00:23:54.540 --> 00:24:02.660
So it'll probably, I think he's going to change it so that the data is from everything instead of just PIP.

00:24:02.660 --> 00:24:04.000
That makes sense.

00:24:04.000 --> 00:24:05.380
Yeah, it definitely does.

00:24:05.380 --> 00:24:06.400
Yeah.

00:24:06.400 --> 00:24:06.860
Anyway.

00:24:06.860 --> 00:24:07.300
Awesome.

00:24:07.300 --> 00:24:08.240
Cool.

00:24:08.240 --> 00:24:09.260
Do you have any extras?

00:24:09.260 --> 00:24:10.080
I do.

00:24:10.080 --> 00:24:11.600
Not too many, but let's do it.

00:24:11.600 --> 00:24:18.440
So Owen Lamont, remember we talked about UV-secure, the project he created?

00:24:19.060 --> 00:24:19.200
Yeah.

00:24:19.200 --> 00:24:25.960
It scans your lock files and I was speculating what API it was using.

00:24:25.960 --> 00:24:29.340
He wrote in to say, thanks for the shout outs.

00:24:29.340 --> 00:24:35.760
It just uses the PyPI JSON API at present to query for package vulnerabilities.

00:24:35.760 --> 00:24:37.200
Same thing that pip Audit does.

00:24:37.200 --> 00:24:43.200
He does work at it asynchronously to try to make it a little faster, but it's just the simple API there.

00:24:43.200 --> 00:24:49.340
So that's what that is, not something like sneak or some other more advanced threat modeling setup.

00:24:49.340 --> 00:24:50.680
And yeah, that's it.

00:24:50.680 --> 00:24:51.700
That's all I got for my extras.

00:24:51.700 --> 00:24:52.760
All right.

00:24:52.760 --> 00:24:53.480
Cool.

00:24:53.480 --> 00:24:54.080
How about a joke?

00:24:54.080 --> 00:24:56.120
Oh, I've got a joke.

00:24:56.120 --> 00:24:59.180
People, if they like puns and stuff, this is going to be good.

00:24:59.180 --> 00:25:06.700
It's at angle bracket slash angle bracket code puns or codepuns.com.

00:25:07.380 --> 00:25:14.540
So we've all written bad code and I know that sometimes testing will shake out the bugs, Brian, but do you know why programmers prefer dark mode?

00:25:14.540 --> 00:25:18.540
I think this is not totally wrong.

00:25:18.540 --> 00:25:19.840
I think we should switch it.

00:25:19.840 --> 00:25:21.980
I think it's a foul fallacy here.

00:25:21.980 --> 00:25:26.140
Why, I guess, I'll read it as it is.

00:25:26.140 --> 00:25:27.740
Why do programmers prefer dark mode?

00:25:27.740 --> 00:25:29.520
Because light attracts bugs.

00:25:30.720 --> 00:25:34.720
I guess if you're talking moths, but if you're talking cockroaches, it's the other way around.

00:25:34.720 --> 00:25:36.520
But here's the thing.

00:25:36.520 --> 00:25:41.820
That's a great joke, but you can click more puns and they just keep going.

00:25:41.820 --> 00:25:44.700
My love for coding is like a recursive function.

00:25:44.700 --> 00:25:46.120
This is not a very good one.

00:25:46.120 --> 00:25:46.880
That's fine.

00:25:46.880 --> 00:25:50.540
Why did the for loop stop running?

00:25:50.540 --> 00:25:52.020
It took a break, semicolon.

00:25:54.760 --> 00:25:57.140
How do you comfort a JavaScript bug?

00:25:57.140 --> 00:25:58.700
You console it.

00:25:58.700 --> 00:26:00.580
See, there's a lot of good stuff here.

00:26:00.580 --> 00:26:04.000
Because console.log is how you debug that thing instead of bug.

00:26:04.000 --> 00:26:04.740
Oh, okay, okay.

00:26:04.740 --> 00:26:08.960
It's the print debugging equivalent for public JavaScript.

00:26:08.960 --> 00:26:10.360
I'm not a JavaScripter.

00:26:10.360 --> 00:26:10.620
Okay.

00:26:10.620 --> 00:26:13.700
Well, you certainly can't console your JavaScript bugs when you create them.

00:26:13.700 --> 00:26:14.440
All right.

00:26:14.440 --> 00:26:18.140
Why do you not want to function as a customer?

00:26:18.140 --> 00:26:20.340
Because they return a lot of items.

00:26:20.340 --> 00:26:20.860
Come on.

00:26:23.020 --> 00:26:28.380
Anyway, you can go to codepuns.com and click through until they can't take it anymore.

00:26:28.380 --> 00:26:29.440
Oh, yeah.

00:26:29.440 --> 00:26:33.880
That's probably why you want a C customer, because they only return one item.

00:26:33.880 --> 00:26:35.280
Oh, that's true, right?

00:26:35.280 --> 00:26:35.880
Yeah.

00:26:35.880 --> 00:26:41.060
Well, good stuff.

00:26:41.060 --> 00:26:41.720
Yeah.

00:26:41.720 --> 00:26:41.980
Good stuff.

00:26:41.980 --> 00:26:43.860
All right.

00:26:43.860 --> 00:26:44.680
Well, thanks again.

00:26:44.680 --> 00:26:47.760
Thanks for showing up for Python Bytes.

00:26:47.760 --> 00:26:49.580
And thanks, everybody, for listening.

00:26:49.580 --> 00:26:51.300
Yeah, you bet.

00:26:51.300 --> 00:26:52.280
Thanks for reading.

00:26:52.280 --> 00:26:52.920
Bye, everyone.

00:26:53.240 --> 00:26:53.500
Bye.

00:26:53.500 --> 00:26:55.420
Okay.

