WEBVTT

00:00:00.000 --> 00:00:03.000
Oh, hey, everybody.


00:00:03.000 --> 00:00:05.000
Hello, hello.


00:00:05.000 --> 00:00:06.000
Hello.


00:00:06.000 --> 00:00:09.000
So welcome, everybody, to the Python Bytes.


00:00:09.000 --> 00:00:12.000
I'm excited to do the show today.


00:00:12.000 --> 00:00:17.000
We did it like one day late because I'm getting over something.


00:00:17.000 --> 00:00:18.000
It's not COVID.


00:00:18.000 --> 00:00:19.000
I don't know what it is.


00:00:19.000 --> 00:00:23.000
But I hope my voice will make it through the episode.


00:00:23.000 --> 00:00:24.000
We'll see.


00:00:24.000 --> 00:00:26.000
Your Honor, I'm not a frog.


00:00:26.000 --> 00:00:27.000
I'm ready to record.


00:00:27.000 --> 00:00:28.000
Yes.


00:00:28.000 --> 00:00:28.500
Yes.


00:00:28.500 --> 00:00:29.560
All right.


00:00:29.560 --> 00:00:30.360
So let's get going.


00:00:30.360 --> 00:00:31.680
Awesome.


00:00:31.680 --> 00:00:35.740
Hello and welcome to Python bites where we deliver Python news and


00:00:35.740 --> 00:00:37.320
headlines directly to your earbuds.


00:00:37.320 --> 00:00:42.660
This is episode three Oh seven recorded October 26 and I am Brian.


00:00:42.660 --> 00:00:44.660
Hey, I'm Michael Kennedy.


00:00:44.660 --> 00:00:46.120
Yay.


00:00:46.120 --> 00:00:51.060
Well, it's pretty exciting here in Python world this week.


00:00:51.060 --> 00:00:54.460
Oh, it's a big, it's a big deal this week.


00:00:54.460 --> 00:00:55.100
Absolutely.


00:00:55.100 --> 00:00:55.620
Big deal.


00:00:55.620 --> 00:00:57.740
So tell us why it's a big deal.


00:00:57.740 --> 00:01:02.740
Well, we've talked about Python being faster,


00:01:02.740 --> 00:01:06.340
new features coming along,


00:01:06.340 --> 00:01:07.980
but primarily at the most,


00:01:07.980 --> 00:01:10.820
I would say there's like two ends of the spectrum


00:01:10.820 --> 00:01:12.920
that people have been really looking forward to.


00:01:12.920 --> 00:01:15.940
One is, wouldn't it be great if you did nothing


00:01:15.940 --> 00:01:18.200
and your code ran 50% faster?


00:01:18.200 --> 00:01:20.100
Brian, you and I are of similar age.


00:01:20.100 --> 00:01:22.380
And I remember it was just like,


00:01:22.380 --> 00:01:24.560
well, wait till next year till I get a new computer.


00:01:24.560 --> 00:01:26.340
And that program that's a little sluggish


00:01:26.340 --> 00:01:28.840
is gonna be zooming along, right?


00:01:28.840 --> 00:01:30.680
And just like computers would just double


00:01:30.680 --> 00:01:31.840
in speed all the time.


00:01:31.840 --> 00:01:33.480
And we don't get so much of that anymore,


00:01:33.480 --> 00:01:36.900
but with Python, we kind of do this time around.


00:01:36.900 --> 00:01:39.960
- Yeah, I remember like also like adding more memory


00:01:39.960 --> 00:01:42.520
and trying to detect whether I could tell a difference


00:01:42.520 --> 00:01:44.640
for the $100 I spent.


00:01:44.640 --> 00:01:46.240
- Yes, exactly, exactly.


00:01:46.240 --> 00:01:49.120
Or optimizing your low mem versus high mem.


00:01:49.120 --> 00:01:51.680
I mean, that's going back a ways.


00:01:51.680 --> 00:01:55.280
But the big news is Python 3.11 is out.


00:01:55.280 --> 00:01:56.260
Woo!


00:01:56.260 --> 00:01:57.420
- Yay!


00:01:57.420 --> 00:01:58.260
- Yeah, that's it.


00:01:58.260 --> 00:02:00.020
- We should have had like champagne or something.


00:02:00.020 --> 00:02:00.860
- Yeah.


00:02:00.860 --> 00:02:03.300
Yeah, pop some corks.


00:02:03.300 --> 00:02:06.300
So, very big news.


00:02:06.300 --> 00:02:07.820
I'm super excited about it.


00:02:07.820 --> 00:02:09.220
I told you there's this end of the spectrum.


00:02:09.220 --> 00:02:12.500
The other end of things that people seem to be psyched about


00:02:12.500 --> 00:02:15.900
across the board is better error messages.


00:02:15.900 --> 00:02:17.040
- Yeah.


00:02:17.040 --> 00:02:19.700
Oh, I mean, it's very important for debugging


00:02:19.700 --> 00:02:22.740
and also for teaching people and learning Python, so.


00:02:22.740 --> 00:02:24.740
- Yeah, absolutely, absolutely.


00:02:24.740 --> 00:02:27.100
I got to pull this one up just for nostalgia sake.


00:02:27.100 --> 00:02:29.780
Dave in the audience says back when we had turbo buttons,


00:02:29.780 --> 00:02:32.780
our computers that you literally had a button that said turbo.


00:02:32.780 --> 00:02:35.580
I remember when I got my Pentium 90, it had a turbo button.


00:02:35.580 --> 00:02:37.040
And I'm like, yes.


00:02:37.040 --> 00:02:39.980
What it really meant is if it was off, it would run in like some weird


00:02:39.980 --> 00:02:41.140
retro slow mode.


00:02:41.140 --> 00:02:43.940
So I would like play MechWarrior and was like stuff


00:02:43.940 --> 00:02:45.600
with like zoom around insanely fast.


00:02:45.600 --> 00:02:48.300
But if you took off turbo, you could play some of the older games


00:02:48.300 --> 00:02:49.900
because they weren't based on time.


00:02:49.900 --> 00:02:51.000
They were based on frame rate.


00:02:52.940 --> 00:02:55.200
Anyway, crazy, crazy memories.


00:02:55.200 --> 00:02:58.700
So we're kind of getting that cool like doubling a speed thing here.


00:02:58.700 --> 00:03:01.820
So there's a ton of stuff to talk about in terms of what's available here.


00:03:01.820 --> 00:03:06.780
Before I get into the details, I want to point out on YouTube, which I'm linking to


00:03:06.780 --> 00:03:12.740
Python discord lemon over there, hosted a live stream of the release.


00:03:12.740 --> 00:03:19.780
So this is not a party celebrating the release, but this is live broadcasting of the


00:03:19.780 --> 00:03:22.620
actions and the steps as it's being released.


00:03:22.620 --> 00:03:27.580
like, okay, the final one is built. Okay, we pushed it to the Microsoft Store for Windows,


00:03:27.580 --> 00:03:43.740
Windows Store install. Now we pushed it to, you know, python.org. Now it's over here and like, right, like the actual pushing of the deployment. And there's a bunch of interesting things that happen there. And along the way, they talk about some of the features,


00:03:44.020 --> 00:03:47.340
I'm gonna have a subset of the people that were there


00:03:47.340 --> 00:03:50.940
in apparently 46 hours on Friday on Talk Python


00:03:50.940 --> 00:03:53.420
to make an episode out of it there as well.


00:03:53.420 --> 00:03:54.260
- That's pretty cool.


00:03:54.260 --> 00:03:55.700
It's neat that they do that.


00:03:55.700 --> 00:03:58.940
So people can just watch the process.


00:03:58.940 --> 00:04:00.420
- Yeah, it is cool that they do that.


00:04:00.420 --> 00:04:03.620
And I saw a pop up and like, these guys are going live.


00:04:03.620 --> 00:04:05.900
I'm like, oh, that's playing on the background


00:04:05.900 --> 00:04:06.820
while I'm working today.


00:04:06.820 --> 00:04:09.540
You know, I'm gonna be apparently at 80% capacity


00:04:09.540 --> 00:04:12.340
of like getting stuff done, but I'm gonna enjoy it a lot.


00:04:12.340 --> 00:04:17.340
Also we have a logo, which is not the official Python logo,


00:04:17.340 --> 00:04:20.380
but a Python 3.11 logo.


00:04:20.380 --> 00:04:24.160
And it has like little, it's like two snakes,


00:04:24.160 --> 00:04:27.820
but they're not the Python, you know, cartoon,


00:04:27.820 --> 00:04:30.900
dramatic, like sort of stylized snakes.


00:04:30.900 --> 00:04:31.980
They just look like snakes.


00:04:31.980 --> 00:04:34.900
And it says faster Python exception groups


00:04:34.900 --> 00:04:37.140
and accept star typing improvements.


00:04:37.140 --> 00:04:39.380
And like literally the logo basically


00:04:39.380 --> 00:04:41.060
is the release notes, but,


00:04:41.060 --> 00:04:42.560
- And it has a lightning bolt in the middle.


00:04:42.560 --> 00:04:44.360
I guess that means fast.


00:04:44.360 --> 00:04:45.400
- I think so.


00:04:45.400 --> 00:04:46.300
- I think so.


00:04:46.300 --> 00:04:47.140
All right, so let's see.


00:04:47.140 --> 00:04:49.320
Major new changes.


00:04:49.320 --> 00:04:53.080
We've got fine grained error locations and tracebacks.


00:04:53.080 --> 00:04:54.720
Let me see if I can get it to show us


00:04:54.720 --> 00:04:57.100
some interesting example here.


00:04:57.100 --> 00:04:57.980
Yeah, this is super cool.


00:04:57.980 --> 00:05:02.820
So check, there's a line if you just follow the PEP there.


00:05:02.820 --> 00:05:03.940
There's an example of,


00:05:03.940 --> 00:05:07.720
suppose you're calling like a complicated JSON API


00:05:07.720 --> 00:05:10.680
and you get this data back and you store it in a variable X


00:05:10.680 --> 00:05:13.460
You've got to go to some field in the JSON document,


00:05:13.460 --> 00:05:14.760
then further down, and further down,


00:05:14.760 --> 00:05:17.500
and further down, and either get or set a value.


00:05:17.500 --> 00:05:20.200
Here it has X bracket of A,


00:05:20.200 --> 00:05:22.080
bracket of B, bracket of C,


00:05:22.080 --> 00:05:24.920
bracket of D, so you're diving from level A,


00:05:24.920 --> 00:05:27.120
B, C, D in the JSON document.


00:05:27.120 --> 00:05:28.320
If you get the error,


00:05:28.320 --> 00:05:32.460
none type is an object is not subscriptable.


00:05:32.460 --> 00:05:35.040
You know something there was none.


00:05:35.040 --> 00:05:37.500
>> Yeah, but you're four levels deep. Which one was it?


00:05:37.500 --> 00:05:39.000
>> Right. It could have been B wasn't


00:05:39.000 --> 00:05:41.240
or it could have been C or it could have been like,


00:05:41.240 --> 00:05:42.680
you don't know where.


00:05:42.680 --> 00:05:44.960
And so what a hassle, right?


00:05:44.960 --> 00:05:46.600
And you do print statements


00:05:46.600 --> 00:05:48.560
and that's when you do debugging statements.


00:05:48.560 --> 00:05:50.800
That's when you maybe make that four different lines


00:05:50.800 --> 00:05:52.360
so you see which line crashes.


00:05:52.360 --> 00:05:54.640
On 3.11 now it just says,


00:05:54.640 --> 00:05:56.040
tilde, tilde, tilde,


00:05:56.040 --> 00:05:57.280
caret, caret, caret, look,


00:05:57.280 --> 00:06:00.840
it's you had X of A of B of C,


00:06:00.840 --> 00:06:03.360
it's C that was the none thing.


00:06:03.360 --> 00:06:04.640
That's where the problem was.


00:06:04.640 --> 00:06:06.000
Actually, I suspect that,


00:06:06.000 --> 00:06:08.840
yeah, I guess that's probably C.


00:06:08.840 --> 00:06:12.500
You try to get D out of none and C was none is probably where the error was.


00:06:12.500 --> 00:06:12.820
Yeah.


00:06:12.820 --> 00:06:18.000
But it points like right where these problems is problems are throughout there.


00:06:18.000 --> 00:06:19.400
Yeah.


00:06:19.400 --> 00:06:20.360
Really neat.


00:06:20.360 --> 00:06:22.580
Um, plus a whole bunch of others.


00:06:22.580 --> 00:06:22.760
Yeah.


00:06:22.760 --> 00:06:25.940
There's a bunch of other ways that they're highlighting where the problem is.


00:06:25.940 --> 00:06:26.740
Yeah.


00:06:26.740 --> 00:06:31.020
If you go through, there's a bunch of cool examples here, but basically you end up


00:06:31.020 --> 00:06:37.320
with, within complex expressions, you know, multiple things happening on one


00:06:37.320 --> 00:06:40.880
and so on, you get nice details there.


00:06:40.880 --> 00:06:41.720
Pretty cool.


00:06:41.720 --> 00:06:42.820
So that's just one of them,


00:06:42.820 --> 00:06:45.560
but I would say if you don't care about performance,


00:06:45.560 --> 00:06:48.960
that's probably what you might consider the highlight.


00:06:48.960 --> 00:06:53.340
If you're an asyncio, async and await type person,


00:06:53.340 --> 00:06:56.940
async exception groups, PEP564,


00:06:56.940 --> 00:06:59.060
and except star are pretty interesting


00:06:59.060 --> 00:07:03.800
because if I start three tasks and I wait on them


00:07:03.800 --> 00:07:05.580
and two of them have errors,


00:07:05.580 --> 00:07:07.140
well, which exception do I get?


00:07:07.140 --> 00:07:08.580
Do I get the one from the first one


00:07:08.580 --> 00:07:11.300
or do I get the one from the second one?


00:07:11.300 --> 00:07:13.660
So it would be great to be able to say


00:07:13.660 --> 00:07:16.020
two of the three things failed, here are their problems.


00:07:16.020 --> 00:07:17.900
Right, so you can kind of get a holistic view


00:07:17.900 --> 00:07:18.980
of what's happening.


00:07:18.980 --> 00:07:20.220
That's great.


00:07:20.220 --> 00:07:21.940
- Yeah, I'm actually, I'm actually,


00:07:21.940 --> 00:07:25.000
I still haven't got my head around this completely,


00:07:25.000 --> 00:07:28.120
but I'm curious to see how that this will change


00:07:28.120 --> 00:07:31.180
sort of Python style,


00:07:31.180 --> 00:07:33.780
because this changes how you can write exception handling.


00:07:33.780 --> 00:07:34.620
So.


00:07:34.620 --> 00:07:36.500
- Indeed.


00:07:36.500 --> 00:07:43.700
Some of the higher level async frameworks like Trio and Any.io


00:07:43.700 --> 00:07:50.500
have this concept of starting and managing a series of tasks together as a group.


00:07:50.500 --> 00:07:54.300
So if I'm going to save an entry to the database,


00:07:54.300 --> 00:07:56.180
I'm going to call an API,


00:07:56.180 --> 00:07:57.740
and I'm going to create a file,


00:07:57.740 --> 00:08:00.900
and those are all a result of like,


00:08:00.900 --> 00:08:02.540
I want to create a new user,


00:08:02.540 --> 00:08:04.300
I want to do whatever,


00:08:04.300 --> 00:08:08.040
you might want to be able to say I want to start all those and wait for them to finish


00:08:08.040 --> 00:08:14.560
or if I start a couple of them to decide I want to bail out, cancel all of them or if one fails and so on.


00:08:14.560 --> 00:08:18.480
So we've got this concept of a task group


00:08:18.480 --> 00:08:23.700
in async I/O and changes to the task cancellation semantics.


00:08:23.700 --> 00:08:30.540
And it's interesting we've got, you know, PEP 657 was the traceback


00:08:30.540 --> 00:08:35.700
Enhancements 654 was the exception groups,


00:08:35.700 --> 00:08:40.900
but the task groups is GH 90908.


00:08:40.900 --> 00:08:42.180
>> Interesting.


00:08:42.180 --> 00:08:44.300
>> GH stands for GitHub.


00:08:44.300 --> 00:08:47.820
>> Weird.


00:08:47.820 --> 00:08:53.780
>> It's news to me that these features get added through


00:08:53.780 --> 00:08:58.940
just a GitHub issue rather than a proper PEP.


00:08:58.940 --> 00:09:03.280
But anyway, yeah, pretty neat.


00:09:03.280 --> 00:09:08.700
- Maybe you're pronouncing G H as p like it.


00:09:08.700 --> 00:09:11.440
(laughing)


00:09:11.440 --> 00:09:12.800
- Exactly.


00:09:12.800 --> 00:09:15.100
Let's see, Henry has some cool comments


00:09:15.100 --> 00:09:16.360
falling up out there.


00:09:16.360 --> 00:09:17.880
Henry Schreiner, thanks.


00:09:17.880 --> 00:09:19.680
Katters is already using exception groups


00:09:19.680 --> 00:09:21.560
via Backport exception group.


00:09:21.560 --> 00:09:24.840
It is fantastic and really does change Python exceptions.


00:09:24.840 --> 00:09:27.160
So yeah, cool.


00:09:27.160 --> 00:09:28.920
Cool extra information there.


00:09:28.920 --> 00:09:30.120
All right, let's keep going.


00:09:30.120 --> 00:09:33.160
You've already talked about Tomlib being built in.


00:09:33.160 --> 00:09:34.760
Now that we have pyproject.toml,


00:09:34.760 --> 00:09:36.400
should we really have external libraries


00:09:36.400 --> 00:09:37.760
in order to understand them?


00:09:37.760 --> 00:09:41.560
- Yay, now we get to do the if block.


00:09:41.560 --> 00:09:46.560
If import tomlib, or the try except around it.


00:09:46.560 --> 00:09:49.360
- Exactly.


00:09:49.360 --> 00:09:50.680
- How fun.


00:09:50.680 --> 00:09:52.000
- Yeah, yeah.


00:09:52.000 --> 00:09:53.360
- It is a good thing though.


00:09:53.360 --> 00:09:54.840
I'm glad for that.


00:09:54.840 --> 00:09:57.480
- Yep, there's changes to regular expressions.


00:09:57.480 --> 00:09:59.240
If you care, you know.


00:09:59.240 --> 00:10:03.740
All right, and then we've got basically


00:10:03.740 --> 00:10:07.240
a general statement saying the faster CPython project


00:10:07.240 --> 00:10:10.540
is already yielding some exciting results.


00:10:10.540 --> 00:10:14.080
That is Mark Shannon, Gita Van Rossum,


00:10:14.080 --> 00:10:18.120
and a bunch of other folks, Brent and others,


00:10:18.120 --> 00:10:20.260
all working on this.


00:10:20.260 --> 00:10:22.240
And it says already yielding exciting results.


00:10:22.240 --> 00:10:27.240
Python 3.11 is up 10 to 60% faster than just 3.10.


00:10:27.240 --> 00:10:30.160
that is just from last year, right?


00:10:30.160 --> 00:10:32.040
Hence the turbo button.


00:10:32.040 --> 00:10:36.920
On average, we measured a 1.22 or otherwise known


00:10:36.920 --> 00:10:41.920
as 22% speed up on the benchmarks for Python tests.


00:10:41.920 --> 00:10:45.880
So, or Python benchmarks.


00:10:45.880 --> 00:10:48.920
You can see faster Python for details, right?


00:10:48.920 --> 00:10:51.080
There's already some of those we're making the 310,


00:10:51.080 --> 00:10:53.720
311 is getting more, 312 is getting more.


00:10:53.720 --> 00:10:58.000
and it's just a first down payment, I guess,


00:10:58.000 --> 00:11:00.120
but it's really great to see that happening.


00:11:00.120 --> 00:11:00.960
- Yeah.


00:11:00.960 --> 00:11:04.360
- Yeah, a bunch of stuff around typing.


00:11:04.360 --> 00:11:06.680
Those are a lot of the other highlights there.


00:11:06.680 --> 00:11:11.240
Two things that are worth calling out here, I would say.


00:11:11.240 --> 00:11:13.360
One is self.


00:11:13.360 --> 00:11:15.880
It's good to be self-aware, right, Brian?


00:11:15.880 --> 00:11:16.720
- Yeah.


00:11:16.720 --> 00:11:19.000
- It is.


00:11:19.000 --> 00:11:22.000
And so Python classes can now understand


00:11:22.000 --> 00:11:23.880
but they too have a self,


00:11:23.880 --> 00:11:25.600
even though they say self all over the place,


00:11:25.600 --> 00:11:27.120
like another language, right?


00:11:27.120 --> 00:11:30.280
Like this in C++ and C# is a thing you can,


00:11:30.280 --> 00:11:32.820
but not must use, or you gotta say self.


00:11:32.820 --> 00:11:36.240
So ironically, the typing system now also understands self,


00:11:36.240 --> 00:11:39.480
and you can say, what the problem was before,


00:11:39.480 --> 00:11:42.480
if I'm in a class and I have a method of that class


00:11:42.480 --> 00:11:44.560
that returns an instance of that class,


00:11:44.560 --> 00:11:47.480
the class is not yet defined as far as Python's concerned


00:11:47.480 --> 00:11:49.000
until you're to the end.


00:11:49.000 --> 00:11:53.260
So I can't say the return type is the name of the class


00:11:53.260 --> 00:11:56.100
because until you're done, the class is not defined, right?


00:11:56.100 --> 00:11:57.180
It's like this weird error.


00:11:57.180 --> 00:11:59.080
So what you can say is it returns self


00:11:59.080 --> 00:12:01.700
and whatever self is, that's what it returns.


00:12:01.700 --> 00:12:05.080
And one of the changes and difficulties


00:12:05.080 --> 00:12:07.040
was to make this work with inheritance.


00:12:07.040 --> 00:12:10.900
- Yeah, I mean, like in C or in C++,


00:12:10.900 --> 00:12:14.260
you have to pre-declare the type ahead of time,


00:12:14.260 --> 00:12:17.180
but then, yeah, anyway,


00:12:17.180 --> 00:12:19.580
We don't have declarations in Python.


00:12:19.580 --> 00:12:20.780
- We don't.


00:12:20.780 --> 00:12:23.180
I wonder why we don't have a two pass compiler.


00:12:23.180 --> 00:12:24.620
- So do you know what--


00:12:24.620 --> 00:12:26.540
- And then expands out the details.


00:12:26.540 --> 00:12:29.060
- Do you know what variadic generics are?


00:12:29.060 --> 00:12:33.580
Putting you on the spot, sorry.


00:12:33.580 --> 00:12:34.780
- You are putting me on the spot.


00:12:34.780 --> 00:12:37.700
Let's see.


00:12:37.700 --> 00:12:39.340
- I just wanna use that word more often.


00:12:39.340 --> 00:12:40.980
- I know, it sounds like,


00:12:40.980 --> 00:12:44.180
yes, I do have a PhD in computer science.


00:12:45.420 --> 00:12:48.980
- It enables the creation of generic parameterized,


00:12:48.980 --> 00:12:51.820
generics parameterized with a single type.


00:12:51.820 --> 00:12:54.620
So this is something I don't do any much of


00:12:54.620 --> 00:12:58.340
in Python types is you can create a type variable


00:12:58.340 --> 00:13:01.160
that then defines the type of a thing


00:13:01.160 --> 00:13:02.460
and then use that variable.


00:13:02.460 --> 00:13:04.460
It's kind of like templates a little bit.


00:13:04.460 --> 00:13:08.340
And so this has to do with that.


00:13:08.340 --> 00:13:09.180
- Okay.


00:13:09.180 --> 00:13:10.660
I don't think I'm smart enough to use this.


00:13:10.660 --> 00:13:11.580
- If you look at the example, you can say,


00:13:11.580 --> 00:13:14.900
I've created an axis one is like a type.


00:13:14.900 --> 00:13:22.620
And then I can say I have an array which is of generic of axis one, right?


00:13:22.620 --> 00:13:28.620
Like, I don't know, it's kind of left that kind of stuff behind in C++,


00:13:28.620 --> 00:13:30.700
like the multiple template.


00:13:30.700 --> 00:13:32.200
Somebody's helping us out.


00:13:32.200 --> 00:13:35.980
Dean is saying, "When I learned about array generics,


00:13:35.980 --> 00:13:39.100
I thought maybe we've gone too far with typing."


00:13:39.100 --> 00:13:41.100
Thanks, Dean.


00:13:41.100 --> 00:13:48.100
One thing that's nice about Python is often you don't have to know or care or consume.


00:13:48.100 --> 00:13:49.100
>> You don't have to use it.


00:13:49.100 --> 00:13:50.940
>> You're like, "You know what? That doesn't apply to me yet.


00:13:50.940 --> 00:13:52.460
Maybe someday, not right now."


00:13:52.460 --> 00:13:53.740
There's other stuff, of course.


00:13:53.740 --> 00:13:58.140
The last one I think is noteworthy has to do with


00:13:58.140 --> 00:14:04.140
limiting the spread of little Bobby tables, let's say.


00:14:04.140 --> 00:14:07.980
These are arbitrary literal string types.


00:14:07.980 --> 00:14:12.980
So the idea is if you've got say like a SQL query,


00:14:12.980 --> 00:14:18.660
it would be great to somehow define,


00:14:18.660 --> 00:14:22.540
here's a string that I want to put into code,


00:14:22.540 --> 00:14:24.340
but I don't want it.


00:14:24.340 --> 00:14:27.380
It's like a static string in a sense.


00:14:27.380 --> 00:14:32.580
It can't be modified or added against non-literal strings.


00:14:32.580 --> 00:14:33.180
>> Yeah.


00:14:33.180 --> 00:14:34.340
>> So the example says, look,


00:14:34.340 --> 00:14:36.300
I've got slick star from data where user ID


00:14:36.300 --> 00:14:39.020
equals F string curly user ID.


00:14:39.020 --> 00:14:41.040
And if you say user one, two, three, good.


00:14:41.040 --> 00:14:42.940
But you also might say user one, two, three,


00:14:42.940 --> 00:14:46.500
semi-colon drop table data, semi-colon.


00:14:46.500 --> 00:14:48.620
Or you could do, you wanna get all the records,


00:14:48.620 --> 00:14:52.020
you say user one, two, three, or one equals one.


00:14:52.020 --> 00:14:54.040
Right, like these are bad.


00:14:54.040 --> 00:14:56.620
So what you can do with these now


00:14:56.620 --> 00:15:00.460
is you can come up with literal strings,


00:15:00.460 --> 00:15:03.160
and they, in order to make the query work,


00:15:03.160 --> 00:15:05.740
you have to use database parameters.


00:15:05.740 --> 00:15:07.520
So you just put like a placeholder in the string


00:15:07.520 --> 00:15:09.120
that never changes.


00:15:09.120 --> 00:15:12.060
And that way, basically your string in a sense


00:15:12.060 --> 00:15:13.300
is safe from injection.


00:15:13.300 --> 00:15:15.760
- Okay.


00:15:15.760 --> 00:15:16.600
- Yeah.


00:15:16.600 --> 00:15:18.960
- But you can still, you still can pass parameters in,


00:15:18.960 --> 00:15:21.060
but you just have to do it a different way.


00:15:21.060 --> 00:15:24.220
- Right, so in this example, they have select user.name,


00:15:24.220 --> 00:15:26.980
user.ageFromData where user ID is question mark.


00:15:26.980 --> 00:15:30.560
That's the indicator of a SQL parameter.


00:15:30.560 --> 00:15:33.160
And then you say connection execute given that string,


00:15:33.160 --> 00:15:34.800
and then you pass the parameter,


00:15:34.800 --> 00:15:36.300
which has the value of the user ID.


00:15:36.300 --> 00:15:38.520
And then the database engine knows


00:15:38.520 --> 00:15:41.760
like that can't like truncate a statement, right?


00:15:41.760 --> 00:15:44.840
It can't sort of modify the command you send.


00:15:44.840 --> 00:15:48.800
What's notable though, is you can also add on things


00:15:48.800 --> 00:15:51.160
and you can change it and combine it


00:15:51.160 --> 00:15:52.720
with other literal strings,


00:15:52.720 --> 00:15:55.600
but not with non-literal strings.


00:15:55.600 --> 00:15:57.440
So anyway.


00:15:57.440 --> 00:15:58.400
- Interesting.


00:15:58.400 --> 00:15:59.520
- Yeah.


00:15:59.520 --> 00:16:04.020
So that's what this literal string type is here.


00:16:04.020 --> 00:16:08.160
And yeah, anyway.


00:16:08.160 --> 00:16:10.200
So people can check that out.


00:16:10.200 --> 00:16:12.400
I think that's, you know, that's gonna be useful


00:16:12.400 --> 00:16:15.400
in a lot of situations where you're trying to be safe


00:16:15.400 --> 00:16:18.000
with a user input basically.


00:16:18.000 --> 00:16:18.840
- Yeah.


00:16:18.840 --> 00:16:20.560
- All right, is that it?


00:16:20.560 --> 00:16:22.600
I think that might be all the highlights.


00:16:22.600 --> 00:16:26.120
Yeah, there's a, you know, go get your version.


00:16:26.120 --> 00:16:29.800
I've already brew installed my 311.


00:16:29.800 --> 00:16:31.420
- Oh, you brew installed, okay.


00:16:32.880 --> 00:16:34.000
- I did.


00:16:34.000 --> 00:16:36.320
Now, if you just say brew install Python three,


00:16:36.320 --> 00:16:39.880
you'll get three, you'll get three, 10, seven, I think,


00:16:39.880 --> 00:16:41.960
or eight, you won't get three 11,


00:16:41.960 --> 00:16:45.200
but you can brew install Python.


00:16:45.200 --> 00:16:48.200
It gets at three 11 or at three dot 11.


00:16:48.200 --> 00:16:50.040
You'll have to look.


00:16:50.040 --> 00:16:51.240
I don't remember the exact command,


00:16:51.240 --> 00:16:52.080
but there's a way to say,


00:16:52.080 --> 00:16:54.480
no, I want the cutting edge version.


00:16:54.480 --> 00:16:56.900
And I was already, final thought on this, we'll move on.


00:16:56.900 --> 00:16:59.460
I was already given a small cut by it.


00:16:59.460 --> 00:17:01.480
- You were.


00:17:01.480 --> 00:17:02.300
- I was.


00:17:02.300 --> 00:17:10.300
So the Python Bytes website is based on Beanie, the MongoDB


00:17:10.300 --> 00:17:13.300
Pydantic combo of glory.


00:17:13.300 --> 00:17:17.300
Because it's all async, it's based on Motor, the async driver


00:17:17.300 --> 00:17:23.300
for Python and MongoDB from the MongoDB folks.


00:17:23.300 --> 00:17:27.300
They built that thing in the super early days before async and await


00:17:27.300 --> 00:17:29.300
was a thing based on Tornado.


00:17:29.300 --> 00:17:32.900
So they don't use async def for their async functions.


00:17:32.900 --> 00:17:36.860
They put @asyncio.coroutine as a decorator


00:17:36.860 --> 00:17:39.020
onto all their async functions.


00:17:39.020 --> 00:17:44.060
Well, that was awesome until 3.11 where that was removed from the runtime.


00:17:44.060 --> 00:17:48.780
So that doesn't work anymore and it doesn't run so well either.


00:17:48.780 --> 00:17:53.460
So the motor people had to rush out 3.11 yesterday


00:17:53.460 --> 00:17:56.020
after much conversation of like,


00:17:56.020 --> 00:18:03.220
You guys realize you should have tested on 3.11 beta or RC1 or RC2 or any other release


00:18:03.220 --> 00:18:07.700
at some point because clearly this code was never going to run and you should have known


00:18:07.700 --> 00:18:14.180
straight away but at least they fixed it quickly. Okay so Henry wants to know how did you find it?


00:18:14.180 --> 00:18:22.340
Apparently it's on Merged PR? Perhaps I just did brew update brew outdated and it said


00:18:22.340 --> 00:18:25.560
new recipe or new whatever they call it,


00:18:25.560 --> 00:18:26.800
whatever it calls those things.


00:18:26.800 --> 00:18:28.680
It said new recipe Python 3.11.


00:18:28.680 --> 00:18:30.920
I said, oh cool, then I'll install Python 3.11.


00:18:30.920 --> 00:18:31.840
- Okay.


00:18:31.840 --> 00:18:33.020
- Yeah, that's how I know.


00:18:33.020 --> 00:18:36.500
- So I wanna stick with this install thing a little bit.


00:18:36.500 --> 00:18:41.020
Because I would think that you're probably a power user.


00:18:41.020 --> 00:18:43.320
I mean, kinda, you know Python pretty much


00:18:43.320 --> 00:18:46.280
and you're trying to be cutting edge and everything.


00:18:46.280 --> 00:18:50.320
And I think that a lot of Python bloggers


00:18:50.320 --> 00:18:59.040
and social media people that are famous in Python are probably the power user kind of


00:18:59.040 --> 00:19:05.520
people and they tell people weird things I think like just brew and stall and I don't


00:19:05.520 --> 00:19:07.120
think it's a good idea.


00:19:07.120 --> 00:19:12.880
So I'm going to get on the soapbox a little bit and say I wrote an article on how to install


00:19:12.880 --> 00:19:19.640
Python and it's installing Python 3.11 on Mac or Windows and we'll get to Linux in a


00:19:19.640 --> 00:19:24.400
bit. But, so the gist is you go to python.org,


00:19:24.400 --> 00:19:28.640
you hover over downloads and you click download.


00:19:28.640 --> 00:19:33.720
And then the thing that gets installed, you install it. Now you're done.


00:19:33.720 --> 00:19:38.600
Um, oh, so, okay. So why did this deserve an entire article? Well,


00:19:38.600 --> 00:19:43.200
cause I think a lot of people are teaching people to do like saying just brew,


00:19:43.200 --> 00:19:47.000
install it or, do,


00:19:47.040 --> 00:19:55.320
do PI and and and I anyway, we'll get to there. But so I just want to tell people how long


00:19:55.320 --> 00:20:01.520
does it take? It takes about a minute. I took I did it. I timed it on both my Mac and did


00:20:01.520 --> 00:20:08.560
it on a Windows machine. And just installing everything takes Yeah, it took about a minute,


00:20:08.560 --> 00:20:14.360
a minute and 13 seconds on my Mac. And this is including me having to hit stuff. So it's


00:20:14.360 --> 00:20:19.000
It's also my delay. and then also did it, on windows,


00:20:19.000 --> 00:20:20.280
it took like twice as long,


00:20:20.280 --> 00:20:24.680
but I was tunneled through a VPN and firewalls and stuff.


00:20:24.680 --> 00:20:28.920
So they probably, it's probably all that. So,


00:20:28.920 --> 00:20:33.720
so anyway, it's pretty fast. You can have,


00:20:33.720 --> 00:20:37.480
and it doesn't uninstall anything. So you can have multiple versions.


00:20:37.480 --> 00:20:39.680
So it will like if you,


00:20:39.680 --> 00:20:43.480
if you use that sort of download link for like the latest, like three, 10, eight,


00:20:44.080 --> 00:20:47.360
It'll go over the top of 310.7, I think.


00:20:47.360 --> 00:20:49.440
At least on Mac it does that.


00:20:49.440 --> 00:20:52.040
But that's okay, it's kinda what I want.


00:20:52.040 --> 00:20:54.280
I've got 310, you can have multiple.


00:20:54.280 --> 00:20:57.960
I got 310, 310, 311 all on my machine,


00:20:57.960 --> 00:20:59.520
just with those links.


00:20:59.520 --> 00:21:02.640
And the 311 just is the default.


00:21:02.640 --> 00:21:07.640
I think it's the newest one and the oldest, anyway.


00:21:07.640 --> 00:21:11.440
It modifies the Z profile, your .Z profile,


00:21:11.440 --> 00:21:13.860
and it shows up as the latest one.


00:21:13.860 --> 00:21:16.500
Now, if I had 3.10 before, what if I go back


00:21:16.500 --> 00:21:19.220
and install the update my 3.10,


00:21:19.220 --> 00:21:21.860
will it make 3.10 the default?


00:21:21.860 --> 00:21:22.700
No, it doesn't.


00:21:22.700 --> 00:21:25.180
It leaves it alone because it was already in there.


00:21:25.180 --> 00:21:27.420
It leaves it be, but you should check anyway


00:21:27.420 --> 00:21:29.900
if you're gonna go back and install old versions.


00:21:29.900 --> 00:21:32.020
And Tox works just great with it.


00:21:32.020 --> 00:21:34.820
So why am I kind of ranting on this


00:21:34.820 --> 00:21:37.980
is because a lot of people try to say Homebrew.


00:21:37.980 --> 00:21:40.080
And if you're a Homebrew user,


00:21:40.080 --> 00:21:42.100
you're not gonna look for this blog anyway.


00:21:42.100 --> 00:21:44.160
You're just gonna try to do it with homebrew.


00:21:44.160 --> 00:21:45.740
Great, go for it.


00:21:45.740 --> 00:21:46.660
Perfect.


00:21:46.660 --> 00:21:50.020
And pyenv, I think there's some places for it,


00:21:50.020 --> 00:21:52.380
but pyenv is about managing different versions


00:21:52.380 --> 00:21:54.440
and having multiple live at the same time


00:21:54.440 --> 00:21:56.700
and different projects use different ones.


00:21:56.700 --> 00:21:59.540
It's not just an easy installer.


00:21:59.540 --> 00:22:02.180
And since it does all that other stuff,


00:22:02.180 --> 00:22:04.780
I don't think people should recommend it for newbies.


00:22:04.780 --> 00:22:08.680
It's not the right tool for somebody new to Python.


00:22:08.680 --> 00:22:11.820
I think it's just gonna confuse the heck out of people.


00:22:11.820 --> 00:22:15.600
So that said, I walked through the whole thing


00:22:15.600 --> 00:22:20.600
in this article, but I also admit that it's Mac focused.


00:22:20.600 --> 00:22:22.540
But on the Windows, you just,


00:22:22.540 --> 00:22:25.380
I did a little blurb on Windows too.


00:22:25.380 --> 00:22:27.940
The thing I wanna tell people that I sometimes forget


00:22:27.940 --> 00:22:30.500
on the Windows install is go slow


00:22:30.500 --> 00:22:31.820
when you're clicking through everything


00:22:31.820 --> 00:22:34.420
so that you can select the advanced features


00:22:34.420 --> 00:22:38.700
and you probably want add Python to environmental variables.


00:22:38.700 --> 00:22:41.020
That makes it so that just shows up in your path


00:22:41.020 --> 00:22:43.980
because you can add it to your path manually


00:22:43.980 --> 00:22:45.540
or you can let the installer do it.


00:22:45.540 --> 00:22:47.380
And I like to have the installer do it.


00:22:47.380 --> 00:22:49.420
So that's my rant.


00:22:49.420 --> 00:22:52.380
I think that for most people,


00:22:52.380 --> 00:22:54.300
just use the default installer.


00:22:54.300 --> 00:22:58.620
- Yeah, I think that's totally good advice.


00:22:58.620 --> 00:23:00.560
Let's see here really quick.


00:23:00.560 --> 00:23:04.340
I also did that the other day before it came out in brew.


00:23:04.340 --> 00:23:05.620
I'm like, oh, let me just put it over here


00:23:05.620 --> 00:23:07.180
and see, I wanted to test some things.


00:23:07.180 --> 00:23:09.340
And I had three 11


00:23:09.340 --> 00:23:12.460
and they were both totally content next to each other


00:23:12.460 --> 00:23:13.560
from those installers.


00:23:13.560 --> 00:23:15.160
I just decided to take 3.9 out


00:23:15.160 --> 00:23:18.180
because I didn't really, I don't really need that.


00:23:18.180 --> 00:23:20.820
I've got it from home brew as well already.


00:23:20.820 --> 00:23:24.420
So, but they do coexist just fine.


00:23:24.420 --> 00:23:28.020
And here's what the brew statement is.


00:23:28.020 --> 00:23:31.500
It's new formula, formula,


00:23:31.500 --> 00:23:35.100
and it's Python at 3.11 is what you can install.


00:23:35.100 --> 00:23:36.660
So. - Nice.


00:23:36.660 --> 00:23:37.500
- Yeah.


00:23:37.500 --> 00:23:38.860
- And as for Linux people,


00:23:38.860 --> 00:23:42.300
I think it's sort of funny that people try to tell,


00:23:42.300 --> 00:23:44.700
if how to install Python articles,


00:23:44.700 --> 00:23:46.060
talk about Linux stuff.


00:23:46.060 --> 00:23:47.980
Linux people already know how to install their stuff,


00:23:47.980 --> 00:23:48.820
don't they?


00:23:48.820 --> 00:23:49.980
I mean.


00:23:49.980 --> 00:23:52.380
- Yes, but although it's more complicated


00:23:52.380 --> 00:23:54.660
'cause Python's broken into a bunch of pieces.


00:23:54.660 --> 00:23:57.500
Do you want Python or do you want the Python dev bit


00:23:57.500 --> 00:23:58.780
or do you need the build essentials


00:23:58.780 --> 00:24:00.840
or like there's a lot of like,


00:24:00.840 --> 00:24:05.300
do you need Python 3-VE and V?


00:24:05.300 --> 00:24:06.580
'Cause you wanna create a,


00:24:06.580 --> 00:24:08.340
the virtual environments don't come with Python


00:24:08.340 --> 00:24:10.260
when you apt install it, which is like, what?


00:24:10.260 --> 00:24:11.100
Okay.


00:24:11.100 --> 00:24:12.460
- But they do on Mac and Windows.


00:24:12.460 --> 00:24:13.280
- Yes, exactly.


00:24:13.280 --> 00:24:16.060
At least the error message is, you don't have this.


00:24:16.060 --> 00:24:19.900
Should you apt install Python 3-vnv?


00:24:19.900 --> 00:24:20.720
Yes, I should.


00:24:20.720 --> 00:24:22.140
Let me copy and paste, hold on.


00:24:22.140 --> 00:24:23.180
- Yeah, okay.


00:24:23.180 --> 00:24:24.580
- All right.


00:24:24.580 --> 00:24:26.620
I see Roman out in the audience there.


00:24:26.620 --> 00:24:29.360
Roman, I've got some shout outs for you in a little bit


00:24:29.360 --> 00:24:31.420
and in the past, if you weren't here.


00:24:31.420 --> 00:24:32.460
But before we get to those,


00:24:32.460 --> 00:24:35.620
I wanna tell you about this week's sponsor,


00:24:35.620 --> 00:24:39.300
Microsoft Founders Hub, Microsoft for Startups Founders Hub.


00:24:39.300 --> 00:24:43.500
As they have been recently, big supporters of the show,


00:24:43.500 --> 00:24:45.060
we really appreciate it.


00:24:45.060 --> 00:24:47.740
And if you're out there either starting a business


00:24:47.740 --> 00:24:49.780
or want to start a business,


00:24:49.780 --> 00:24:52.260
you gotta know that it's not easy, right?


00:24:52.260 --> 00:24:55.940
Within the first year, 90% of startups go out of business.


00:24:55.940 --> 00:24:57.860
That's not amazing.


00:24:57.860 --> 00:24:59.860
So the folks over at Microsoft for Startups


00:24:59.860 --> 00:25:02.340
set out to understand what are the problems


00:25:02.340 --> 00:25:05.660
that people are running into and how could they help?


00:25:05.660 --> 00:25:09.680
So they came up with Microsoft for Startups Founders Hub.


00:25:09.680 --> 00:25:13.260
And the idea is that you get at any stage of your startup


00:25:13.260 --> 00:25:17.300
free resources to grow and thrive.


00:25:17.300 --> 00:25:21.400
So you get thousands of dollars of cloud credits


00:25:21.400 --> 00:25:24.400
for things like Azure and GitHub and DeepMind,


00:25:24.400 --> 00:25:31.260
I have to look, OpenAI, sorry, for those types of things


00:25:32.260 --> 00:25:34.820
and as your startup grows and progresses,


00:25:34.820 --> 00:25:37.500
you get many, many more of those.


00:25:37.500 --> 00:25:40.460
But you also get support in the form


00:25:40.460 --> 00:25:42.740
of mentorship and connections.


00:25:42.740 --> 00:25:45.780
Brian, you're not in Silicon Valley, are you?


00:25:45.780 --> 00:25:46.620
- No.


00:25:46.620 --> 00:25:49.740
- Neither am I, by choice, by the way.


00:25:49.740 --> 00:25:52.360
And most people out there listening are not either,


00:25:52.360 --> 00:25:54.820
but having the connections of like,


00:25:54.820 --> 00:25:58.440
hey, let's meet up with so-and-so for coffee


00:25:58.440 --> 00:25:59.860
and talk about this new project


00:25:59.860 --> 00:26:01.820
and see if there's a connection there, right?


00:26:01.820 --> 00:26:05.000
Like those kinds of things are incredibly powerful


00:26:05.000 --> 00:26:08.220
and they've given people in locations like that


00:26:08.220 --> 00:26:09.080
huge advantages.


00:26:09.080 --> 00:26:10.760
So the other thing you get with this


00:26:10.760 --> 00:26:13.480
is access to a mentorship network,


00:26:13.480 --> 00:26:16.560
the ability to book one-on-ones with meetings,


00:26:16.560 --> 00:26:17.880
one-on-one meetings with mentors,


00:26:17.880 --> 00:26:20.120
many of whom are founders themselves.


00:26:20.120 --> 00:26:22.940
You can talk about things like marketing or fundraising


00:26:22.940 --> 00:26:23.780
or whatever you need.


00:26:23.780 --> 00:26:26.760
So if you wanna get started,


00:26:26.760 --> 00:26:29.960
make your dream, your company a reality today


00:26:29.960 --> 00:26:32.120
with the critical support you get from Microsoft


00:26:32.120 --> 00:26:33.920
for Startups Founders Hub.


00:26:33.920 --> 00:26:36.560
You don't have to be third party validated.


00:26:36.560 --> 00:26:38.240
You don't have to be venture backed


00:26:38.240 --> 00:26:39.820
or part of some kind of accelerator.


00:26:39.820 --> 00:26:41.320
Just go and apply for free.


00:26:41.320 --> 00:26:44.920
Python by StartupFM/FoundersHub2022.


00:26:44.920 --> 00:26:47.000
Link is in your show notes.


00:26:47.000 --> 00:26:48.040
Check them out.


00:26:48.040 --> 00:26:48.980
Very cool program.


00:26:48.980 --> 00:26:51.680
- Very cool.


00:26:51.680 --> 00:26:53.320
- Indeed.


00:26:53.320 --> 00:26:54.360
All right.


00:26:54.360 --> 00:26:56.360
You ready for some awards?


00:26:56.360 --> 00:26:57.840
Got the red carpet out?


00:26:57.840 --> 00:26:59.320
The champagne?


00:26:59.320 --> 00:27:00.160
- More champagne?


00:27:00.160 --> 00:27:02.080
There's some kind of theme with that here.


00:27:02.080 --> 00:27:03.320
- It's a celebration.


00:27:03.320 --> 00:27:05.640
- Yes, let's talk about the Bossies.


00:27:05.640 --> 00:27:10.640
So the Bossies, this is InfoWorld's 2022 Bossie Awards,


00:27:10.640 --> 00:27:13.960
celebrate the most important and innovative solution


00:27:13.960 --> 00:27:16.200
or application developments, DevOps,


00:27:16.200 --> 00:27:17.920
analytics and what the year.


00:27:17.920 --> 00:27:21.720
So let's go, these are open source.


00:27:21.720 --> 00:27:23.440
- Best open source software.


00:27:23.440 --> 00:27:25.360
I was like, where does boss come from?


00:27:25.360 --> 00:27:26.200
Okay.


00:27:26.200 --> 00:27:27.040
- Exactly.


00:27:28.560 --> 00:27:30.200
So there's a bunch that are interesting,


00:27:30.200 --> 00:27:32.720
but we'll go through, you can't go through very fast.


00:27:32.720 --> 00:27:34.800
There's like a delay, I guess,


00:27:34.800 --> 00:27:37.400
so you pay attention and you actually take it in.


00:27:37.400 --> 00:27:40.400
So maybe really quick, just 'cause it's the first one,


00:27:40.400 --> 00:27:43.240
is there's Alma Linux, which is a free Linux OS


00:27:43.240 --> 00:27:44.760
for the community by the community


00:27:44.760 --> 00:27:49.440
that is like an enterprise Linux distribution


00:27:49.440 --> 00:27:50.440
focused on stability.


00:27:50.440 --> 00:27:52.360
So that might be cool checking out.


00:27:52.360 --> 00:27:55.000
I know a lot of people do things there.


00:27:55.000 --> 00:27:57.320
You have to bear with me as I make my way


00:27:57.320 --> 00:27:59.920
through this thing as it won't let me go any faster.


00:27:59.920 --> 00:28:03.520
- Well, let's do the first one.


00:28:03.520 --> 00:28:06.920
- There's a lot of Java in here actually,


00:28:06.920 --> 00:28:08.720
which we'll get back to in a joke later.


00:28:08.720 --> 00:28:09.560
That'll be fine.


00:28:09.560 --> 00:28:14.560
Like Jhipster, I mean, greetings Java hipster.


00:28:14.560 --> 00:28:17.320
That's a pretty awesome project.


00:28:17.320 --> 00:28:22.320
- Java hipster, that seems sort of anachronistic.


00:28:22.320 --> 00:28:25.640
- You know, you gotta, this is part of that self-talk thing


00:28:25.640 --> 00:28:28.280
where you like try to talk yourself up a little.


00:28:28.280 --> 00:28:31.480
All right, maybe number one that I wanna give a shout out to


00:28:31.480 --> 00:28:35.520
at number one as in number 10 in the list is Wasm Time,


00:28:35.520 --> 00:28:38.640
a fast and secure runtime for WebAssembly


00:28:38.640 --> 00:28:39.760
outside of the browser.


00:28:39.760 --> 00:28:43.060
So if you think about what Node.js did for JavaScript,


00:28:43.060 --> 00:28:44.720
like JavaScript used to be this thing you did


00:28:44.720 --> 00:28:46.520
on web front ends and then somebody said,


00:28:46.520 --> 00:28:48.160
if we rip that engine out,


00:28:48.160 --> 00:28:50.820
it could be a server side technology


00:28:50.820 --> 00:28:52.200
or a client side technology


00:28:52.200 --> 00:28:53.600
that is not in a browser at all,


00:28:53.600 --> 00:28:56.040
but just it becomes a programming language


00:28:56.040 --> 00:28:57.120
as long as we have a runtime


00:28:57.120 --> 00:28:59.920
that everyone likes and works with.


00:28:59.920 --> 00:29:03.120
Well, this is like that, but for WebAssembly, right?


00:29:03.120 --> 00:29:07.320
And so what's interesting is if you want to


00:29:07.320 --> 00:29:11.760
go and run, say, Python code


00:29:11.760 --> 00:29:13.640
and you don't want to worry about making sure


00:29:13.640 --> 00:29:15.320
that Python is set up and all those things,


00:29:15.320 --> 00:29:20.280
you could just get, say, something like PyScript


00:29:20.280 --> 00:29:24.040
and ship it to run on top of Wasm time.


00:29:24.040 --> 00:29:25.080
And there you go.


00:29:25.080 --> 00:29:30.880
So you just say Wasm time and then some Wasm output,


00:29:30.880 --> 00:29:33.220
which could be, you know, your code.


00:29:33.220 --> 00:29:34.680
And let's see if they have,


00:29:34.680 --> 00:29:38.920
here on PyPI we have Wasm time 2.0,


00:29:38.920 --> 00:29:41.220
which is the Python embedding of Wasm time.


00:29:41.220 --> 00:29:42.480
So there you go.


00:29:42.480 --> 00:29:45.560
Take your Python code and off it goes.


00:29:45.560 --> 00:29:47.780
- That's pretty cool.


00:29:47.780 --> 00:29:49.400
So Michael, what time is it?


00:29:49.400 --> 00:29:52.560
- It's WASM time.


00:29:52.560 --> 00:29:54.760
- It's WASM, wait what?


00:29:54.760 --> 00:29:55.600
It's WASM time.


00:29:55.600 --> 00:29:58.560
- It is.


00:29:58.560 --> 00:29:59.400
- Oh, awesome.


00:29:59.400 --> 00:30:01.480
Yeah, so you just write your code in Python


00:30:01.480 --> 00:30:04.000
and then you could go and run it,


00:30:04.000 --> 00:30:05.800
which would be pretty excellent.


00:30:05.800 --> 00:30:08.320
Also, something that's interesting about WASM


00:30:08.320 --> 00:30:10.000
is it allows for interoperability.


00:30:10.000 --> 00:30:15.000
So if I wanted to do C, .NET, Python, and Rust,


00:30:15.000 --> 00:30:18.640
and have those all talk together,


00:30:18.640 --> 00:30:21.260
'cause I don't know, I couldn't decide or I don't know,


00:30:21.260 --> 00:30:22.760
whatever reason, right?


00:30:22.760 --> 00:30:24.840
You could have them all converted to WASM


00:30:24.840 --> 00:30:26.000
and then integrate there as well.


00:30:26.000 --> 00:30:28.640
So there's some pretty interesting runtime


00:30:28.640 --> 00:30:30.240
and deployment things here.


00:30:30.240 --> 00:30:32.320
Anyway, so that was one of the winners.


00:30:32.320 --> 00:30:35.600
Right behind it, one of the biggest winners in our world


00:30:35.600 --> 00:30:37.440
has gotta be PyScript, right?


00:30:37.440 --> 00:30:40.360
- Yeah, it's got to be on the list.


00:30:40.360 --> 00:30:41.200
- Yeah, it is.


00:30:41.200 --> 00:30:42.620
There's a bunch of stuff here that I don't care about.


00:30:42.620 --> 00:30:45.100
But number 14, Sentry.


00:30:45.100 --> 00:30:47.860
- Nice. - Error monitoring.


00:30:47.860 --> 00:30:50.940
I was just using this to track down some errors


00:30:50.940 --> 00:30:54.600
that I introduced,


00:30:54.600 --> 00:30:58.360
but trying to run Python 3.11 and Beanie


00:30:58.360 --> 00:30:59.760
before it was time,


00:30:59.760 --> 00:31:01.220
but it told me exactly what was going on


00:31:01.220 --> 00:31:02.840
and I figured, okay, that's a motor problem.


00:31:02.840 --> 00:31:05.700
I was able to track that down, which is pretty excellent.


00:31:05.700 --> 00:31:10.000
Let's see a few more here that are fun,


00:31:10.000 --> 00:31:12.000
almost in B dev.


00:31:12.000 --> 00:31:13.480
If you're doing notebook stuff


00:31:13.480 --> 00:31:17.640
and you want to be able to test your notebooks


00:31:17.640 --> 00:31:20.520
or clean them up before you check them in,


00:31:20.520 --> 00:31:25.520
or you wanna turn notebooks into a Python package


00:31:25.520 --> 00:31:28.560
where certain actions in a cell become functions


00:31:28.560 --> 00:31:31.500
in your Python package and deploy it to PyBI,


00:31:31.500 --> 00:31:33.480
all those crazy things in VDEV.


00:31:33.480 --> 00:31:35.080
So those are pretty interesting.


00:31:35.080 --> 00:31:38.800
Accelerate, I think this is from Hugging Face,


00:31:38.800 --> 00:31:40.380
but I can't quite tell.


00:31:40.380 --> 00:31:41.480
(laughing)


00:31:41.480 --> 00:31:44.080
Yeah, it is Hugging Face, that's what it is.


00:31:44.080 --> 00:31:49.560
It's a way to build, train, and deploy state-of-the-art models


00:31:49.560 --> 00:31:51.560
powered by open source.


00:31:51.560 --> 00:31:55.840
Anyway, it looks interesting if you're into that.


00:31:55.840 --> 00:31:57.000
Stable diffusion.


00:31:57.000 --> 00:32:01.440
Do you need to have a bear that has just landed on the moon?


00:32:01.440 --> 00:32:07.960
Well, go in there, you can create those funky AI art things.


00:32:07.960 --> 00:32:10.080
Anyway, there's a bunch of fun projects


00:32:10.080 --> 00:32:13.160
in this 2022 Bossy's award list.


00:32:14.000 --> 00:32:16.000
- Yeah, that's pretty great.


00:32:16.000 --> 00:32:16.840
- Yep.


00:32:16.840 --> 00:32:19.700
All right.


00:32:19.700 --> 00:32:21.000
Yeah.


00:32:21.000 --> 00:32:21.840
- Well.


00:32:21.840 --> 00:32:23.100
- God, it's wasm time.


00:32:23.100 --> 00:32:25.160
- It's wasm time.


00:32:25.160 --> 00:32:26.260
Yeah.


00:32:26.260 --> 00:32:28.240
So, I,


00:32:28.240 --> 00:32:31.840
we talk about Will McGugan a lot,


00:32:31.840 --> 00:32:34.040
and textual and stuff. - Hey, Will.


00:32:34.040 --> 00:32:35.640
- And so, Will's in the audience.


00:32:35.640 --> 00:32:36.480
Hey, Will.


00:32:36.480 --> 00:32:37.380
So one of the things that,


00:32:37.380 --> 00:32:38.680
if you follow Will on Twitter,


00:32:38.680 --> 00:32:40.500
he shows a whole bunch of cool examples


00:32:40.500 --> 00:32:41.980
of stuff he's working on,


00:32:41.980 --> 00:32:46.980
but you haven't been able to play with it because he's been sneaky about it.


00:32:46.980 --> 00:32:50.480
And it's been on us. Well, it's not sneaky, but it's been on a CSS branch,


00:32:50.480 --> 00:32:54.600
different branch of their, their, code base on,


00:32:54.600 --> 00:32:58.000
textualize or textual. So,


00:32:58.000 --> 00:33:02.880
so now we can play with it because as of what, October 22nd,


00:33:02.880 --> 00:33:08.080
textual 0.0 0.2 0.0. Wow. Big jump in numbers there, guys.


00:33:08.960 --> 00:33:13.720
but it released and it has all of the CSS branch stuff


00:33:13.720 --> 00:33:14.560
merged in.


00:33:14.560 --> 00:33:16.920
So all the really cool, fun things that you can do


00:33:16.920 --> 00:33:18.680
that looked like web development,


00:33:18.680 --> 00:33:21.580
but they're in a CLI,


00:33:21.580 --> 00:33:23.160
now I can start playing with them


00:33:23.160 --> 00:33:24.480
'cause they're merged in.


00:33:24.480 --> 00:33:27.040
One of the things that I'm glad


00:33:27.040 --> 00:33:28.800
that they waited a little while for


00:33:28.800 --> 00:33:33.200
because they were looking for API stability,


00:33:33.200 --> 00:33:36.780
but also they wanted to finalize the documentation


00:33:36.780 --> 00:33:38.560
at the same time before they released it


00:33:38.560 --> 00:33:40.640
to everybody officially.


00:33:40.640 --> 00:33:44.880
So they've got a tutorial written,


00:33:44.880 --> 00:33:46.120
which is really kind of nice.


00:33:46.120 --> 00:33:48.800
It's a little stopwatch application


00:33:48.800 --> 00:33:50.040
that kind of walks through


00:33:50.040 --> 00:33:52.400
and it walks through all the different pieces


00:33:52.400 --> 00:33:57.400
of how you use textualize and with their CSS.


00:33:57.400 --> 00:34:01.760
And it's got going through writing through the CSS,


00:34:01.760 --> 00:34:04.380
the dynamicness of it, reactive attributes.


00:34:05.800 --> 00:34:07.160
This really looks great.


00:34:07.160 --> 00:34:09.560
I haven't gone through it yet, but it looks awesome.


00:34:09.560 --> 00:34:14.560
And then they went through and updated the textualized guide,


00:34:14.560 --> 00:34:18.760
which goes through all the different examples.


00:34:18.760 --> 00:34:20.640
And I've got my screen shrunk up too far


00:34:20.640 --> 00:34:22.920
so it doesn't show everything.


00:34:22.920 --> 00:34:28.240
But anyway, really great stuff in this manual.


00:34:28.240 --> 00:34:30.120
Good job, guys.


00:34:30.120 --> 00:34:31.760
Yeah, that looks awesome.


00:34:31.760 --> 00:34:35.320
So I can't wait to play with it.


00:34:35.320 --> 00:34:38.480
- Yeah, who knew that we could treat terminals


00:34:38.480 --> 00:34:43.320
as high refresh rate general rendering engines?


00:34:43.320 --> 00:34:48.320
I feel like the stuff that Will and crew are highlighting here


00:34:48.320 --> 00:34:50.440
is a little bit like what you could do


00:34:50.440 --> 00:34:52.680
with JavaScript canvases, right?


00:34:52.680 --> 00:34:54.960
You're like, oh, guess what you could actually do?


00:34:54.960 --> 00:34:57.320
Which is, you know, like our software here, StreamEar,


00:34:57.320 --> 00:34:59.080
that we're using to live stream this, right?


00:34:59.080 --> 00:35:00.840
It's like, who would have ever thought


00:35:00.840 --> 00:35:02.520
you could have done this in just a web browser


00:35:02.520 --> 00:35:03.560
without plugins, right?


00:35:03.560 --> 00:35:04.800
And here we are.


00:35:04.800 --> 00:35:10.320
And I also just heard Will talking about this on ChangeLog


00:35:10.320 --> 00:35:13.160
just recently, one of the more recent ChangeLogs,


00:35:13.160 --> 00:35:15.760
was talking about this release, which is pretty cool.


00:35:15.760 --> 00:35:19.120
Although, Will, I got to say I'm a little disappointed,


00:35:19.120 --> 00:35:23.360
because they asked how you became


00:35:23.360 --> 00:35:29.160
rich and textual, have gained so much popularity so quickly,


00:35:29.160 --> 00:35:31.080
and you didn't even mention us.


00:35:31.080 --> 00:35:33.120
Just come on.


00:35:33.120 --> 00:35:33.620
Anyway.


00:35:33.620 --> 00:35:35.880
(laughing)


00:35:35.880 --> 00:35:44.960
Anyway, that's it for our items.


00:35:44.960 --> 00:35:47.160
And since I've been kind of under the weather,


00:35:47.160 --> 00:35:48.320
I don't have any extras.


00:35:48.320 --> 00:35:50.440
Do you have any extras for us?


00:35:50.440 --> 00:35:51.280
- You know that I do.


00:35:51.280 --> 00:35:52.280
I've got a bunch of things.


00:35:52.280 --> 00:35:54.120
I'll go quick through them.


00:35:54.120 --> 00:35:56.440
So I recently did a fun video.


00:35:56.440 --> 00:35:57.600
- I know that guy.


00:35:57.600 --> 00:36:01.160
- Yeah, I did a video where I added,


00:36:01.160 --> 00:36:03.760
I did the live coding on TalkBython training,


00:36:03.760 --> 00:36:08.760
actually adding the feature for a search over here.


00:36:08.760 --> 00:36:10.520
So I rewrote the search.


00:36:10.520 --> 00:36:14.400
You pointed out that pytest is a fun thing


00:36:14.400 --> 00:36:15.680
to type in there, right?


00:36:15.680 --> 00:36:16.920
- Yeah. - pytest is good.


00:36:16.920 --> 00:36:21.120
You might search for Postman, Ngrok,


00:36:21.120 --> 00:36:23.920
and you get your search results there.


00:36:23.920 --> 00:36:25.400
Got this cool hierarchy thing.


00:36:25.400 --> 00:36:28.520
But when I first wrote that, it was like super slow.


00:36:28.520 --> 00:36:31.480
and the techniques that I use to debug that,


00:36:31.480 --> 00:36:33.420
figure out what's going on, make it faster.


00:36:33.420 --> 00:36:35.880
The video says 17, but like in an extreme case,


00:36:35.880 --> 00:36:37.800
it was actually 80 times faster.


00:36:37.800 --> 00:36:39.200
There's just some really cool techniques


00:36:39.200 --> 00:36:41.640
of walking through like, oh, how could you like use logging


00:36:41.640 --> 00:36:44.000
in the database to figure out what's happening?


00:36:44.000 --> 00:36:45.140
How could you use the profiling?


00:36:45.140 --> 00:36:48.080
How do we use dictionaries so that we can convert


00:36:48.080 --> 00:36:49.880
like a hundred database calls into one,


00:36:49.880 --> 00:36:51.400
even though there's like a,


00:36:51.400 --> 00:36:53.940
not a natural join story going on.


00:36:53.940 --> 00:36:58.240
So if people wanna follow, go check out that video,


00:36:58.240 --> 00:37:00.380
That's lots of fun in the show notes.


00:37:00.380 --> 00:37:03.880
From, let me get the name right here,


00:37:03.880 --> 00:37:05.920
also from Ryan Sheftel,


00:37:05.920 --> 00:37:12.020
if you're into stock markets and so on,


00:37:12.020 --> 00:37:14.760
and you want to use Pandas,


00:37:14.760 --> 00:37:18.160
here's a project called Pandas Market Calendars.


00:37:18.160 --> 00:37:20.480
It's the market calendars used with Pandas


00:37:20.480 --> 00:37:21.640
for trading applications.


00:37:21.640 --> 00:37:23.640
So it has things like,


00:37:23.640 --> 00:37:25.600
when are the markets opening and closing?


00:37:25.600 --> 00:37:26.840
Is there a holiday?


00:37:26.840 --> 00:37:30.340
Is there some other weird event that's changing the start or close time?


00:37:30.340 --> 00:37:34.180
Right. So, just a cool little library to bring that into your pandas code.


00:37:34.180 --> 00:37:39.860
And I believe pandas came out of New York and the whole trading industry over there.


00:37:39.860 --> 00:37:41.860
So, that's good.


00:37:41.860 --> 00:37:45.860
Shout out for Roman Wright, who is out in the audience.


00:37:45.860 --> 00:37:46.860
Hey, Roman.


00:37:46.860 --> 00:37:48.360
He recently...


00:37:48.360 --> 00:37:53.000
So, when Beanie came out, Beanie's fantastic MongoDB library.


00:37:53.000 --> 00:37:56.800
You know, what FastAPI did for APIs, Beanie does for MongoDB, right?


00:37:56.800 --> 00:38:00.160
It takes Pydantic and turns it into a really cool API


00:38:00.160 --> 00:38:03.000
that then you use instead of creating just classes


00:38:03.000 --> 00:38:04.040
or whatever, right?


00:38:04.040 --> 00:38:07.640
So all the benefits of having Pydantic plus MongoDB.


00:38:07.640 --> 00:38:09.780
And when it came out, it was only async,


00:38:09.780 --> 00:38:12.440
which is awesome when you're doing async stuff, right?


00:38:12.440 --> 00:38:15.040
Without it, you can't do all the really high-scale,


00:38:15.040 --> 00:38:17.080
high-concurrency things.


00:38:17.080 --> 00:38:18.600
But there's plenty of times where you're like,


00:38:18.600 --> 00:38:21.480
I don't want that, I just wanna call this function


00:38:21.480 --> 00:38:22.920
and I'm in the middle of a script


00:38:22.920 --> 00:38:25.120
that has no business being async,


00:38:25.120 --> 00:38:26.920
but you gave me an async only function.


00:38:26.920 --> 00:38:28.960
So now I gotta figure out how to like spin up a loop


00:38:28.960 --> 00:38:31.120
and run this thing and wait for it


00:38:31.120 --> 00:38:33.600
when I just wanna call the function.


00:38:33.600 --> 00:38:38.120
And so in addition to the standard async model,


00:38:38.120 --> 00:38:42.240
Roman added a beanie.sync sub module


00:38:42.240 --> 00:38:44.000
where you can get async document


00:38:44.000 --> 00:38:48.400
and you can initialize a synchronous database connection


00:38:48.400 --> 00:38:49.880
and then all of your queries


00:38:49.880 --> 00:38:54.880
and everything become just straight up synchronous calls.


00:38:54.880 --> 00:38:59.920
like on more traditional database engines or database ORMs, ODMs.


00:38:59.920 --> 00:39:01.440
Okay.


00:39:01.440 --> 00:39:04.000
Yeah, so excellent work out there.


00:39:04.000 --> 00:39:07.280
Good job keeping up on that. It's a cool product.


00:39:07.280 --> 00:39:09.600
Yeah, it's super cool. Yeah, I love it.


00:39:09.600 --> 00:39:13.920
DuckDuckGo has released a web browser.


00:39:13.920 --> 00:39:16.080
Just when you thought Chrome has taken over everything,


00:39:16.080 --> 00:39:23.680
DuckDuckGo says, "No," or they quacked "No," or whatever DuckDuck does when they communicate.


00:39:24.800 --> 00:39:26.400
And right now it's Mac only,


00:39:26.400 --> 00:39:29.640
but it's coming out for Windows pretty soon as well.


00:39:29.640 --> 00:39:33.400
And it's a privacy focused database.


00:39:33.400 --> 00:39:35.960
- Web browser, yeah.


00:39:35.960 --> 00:39:36.900
- Yes, I just did it.


00:39:36.900 --> 00:39:38.440
Yeah, web browser.


00:39:38.440 --> 00:39:43.080
But let me show you, I can even just show you real quick.


00:39:43.080 --> 00:39:43.920
Here it is.


00:39:43.920 --> 00:39:45.140
- But did you install it?


00:39:45.140 --> 00:39:46.280
- Oh, of course I did.


00:39:46.280 --> 00:39:47.440
Why wouldn't I do that?


00:39:47.440 --> 00:39:49.280
Here it is.


00:39:49.280 --> 00:39:53.760
So we go over here, we can go to bytes.fm.


00:39:54.760 --> 00:39:58.000
And if you pull this up, not?


00:39:58.000 --> 00:39:59.440
- No.


00:39:59.440 --> 00:40:00.720
- Didn't add to stream, there we go.


00:40:00.720 --> 00:40:02.520
So come over here to Python Bytes,


00:40:02.520 --> 00:40:03.560
and you can click on this,


00:40:03.560 --> 00:40:05.160
it'll show you where all the tracking is.


00:40:05.160 --> 00:40:08.680
Like notice, no Google Analytics, no other tracking,


00:40:08.680 --> 00:40:11.560
but where shall we go?


00:40:11.560 --> 00:40:14.760
But somewhere super egregious, we could go to cnn.com.


00:40:14.760 --> 00:40:20.220
Remember this is using already Next DNS and other blocking.


00:40:20.220 --> 00:40:22.740
So a lot of the blocking happens before it gets here.


00:40:22.740 --> 00:40:24.600
But if you pull it up, it'll still say,


00:40:24.600 --> 00:40:26.880
look at all these different things we blocked.


00:40:26.880 --> 00:40:30.680
And here's the tracking, here's the advertising.


00:40:30.680 --> 00:40:33.760
Again, many of these are already blocked


00:40:33.760 --> 00:40:35.320
before it gets to the network.


00:40:35.320 --> 00:40:40.320
So it'd be 30 or 40, easy.


00:40:40.320 --> 00:40:43.060
So that's pretty cool.


00:40:43.060 --> 00:40:50.680
But I don't know, I'm not switching over to it yet.


00:40:50.680 --> 00:40:52.680
I hope, hopefully they can do better.


00:40:52.680 --> 00:40:55.600
You can't do things like set your DNS servers


00:40:55.600 --> 00:40:57.320
for say DNS over HTTPS,


00:40:57.320 --> 00:41:00.120
so you can like have more control over that.


00:41:00.120 --> 00:41:02.160
There's a lot of things that are not there.


00:41:02.160 --> 00:41:04.120
It has a really cool way to play YouTube videos


00:41:04.120 --> 00:41:05.560
in like a private window.


00:41:05.560 --> 00:41:07.440
So if you go over to YouTube and you hit play,


00:41:07.440 --> 00:41:10.320
it'll, would you like to play this in a non-tracking,


00:41:10.320 --> 00:41:14.040
non-algorithmic feeding sort of way, which is great.


00:41:14.040 --> 00:41:16.080
But you know what you have over on YouTube?


00:41:16.080 --> 00:41:17.920
Hotkeys, I can type F for full screen


00:41:17.920 --> 00:41:22.040
or T to like go wide theater mode or I for many player.


00:41:22.040 --> 00:41:23.760
It doesn't have any of those types of things, right?


00:41:23.760 --> 00:41:25.760
And so it was like super, super early,


00:41:25.760 --> 00:41:27.500
but so in that regard,


00:41:27.500 --> 00:41:30.640
I'm not really psyched or recommending it,


00:41:30.640 --> 00:41:32.180
but it's awesome that they're trying.


00:41:32.180 --> 00:41:33.160
I like DuckDuckGo.


00:41:33.160 --> 00:41:34.600
I'd like to see them make progress here.


00:41:34.600 --> 00:41:35.720
And they have the fire button,


00:41:35.720 --> 00:41:38.760
which you can just clear all the stuff up


00:41:38.760 --> 00:41:40.040
and get a cool animation.


00:41:40.040 --> 00:41:41.960
- What does that do?


00:41:41.960 --> 00:41:44.520
- It erases like all history


00:41:44.520 --> 00:41:47.200
and closes all tabs and everything.


00:41:47.200 --> 00:41:48.040
- Oh, cool.


00:41:48.040 --> 00:41:50.520
- So yeah, anyway, there you go.


00:41:50.520 --> 00:41:52.320
I think I've got one more thing to share,


00:41:52.320 --> 00:41:54.400
but I've got to share my screen back


00:41:54.400 --> 00:41:58.240
because that nabbed it.


00:41:58.240 --> 00:42:03.720
Yeah, last one here before we get to a joke.


00:42:03.720 --> 00:42:05.080
So I want to give credit here.


00:42:05.080 --> 00:42:07.360
This one comes from Will Shanks.


00:42:07.360 --> 00:42:09.720
Apparently, remember when we talked about int,


00:42:09.720 --> 00:42:12.280
like I-N-T, parentheses, some string,


00:42:12.280 --> 00:42:15.560
like quote, one, two, three, close quote.


00:42:15.560 --> 00:42:19.280
That had a security patch in Python 3.10.7


00:42:19.280 --> 00:42:25.280
because if you send it the right malicious huge number string,


00:42:25.280 --> 00:42:28.400
it can get into some denial of service where it works for


00:42:28.400 --> 00:42:32.420
an insane amount of time trying to figure out what that number is by parsing it.


00:42:32.420 --> 00:42:36.120
Not just a big number, but a specifically bad big number,


00:42:36.120 --> 00:42:37.360
I think was the problem.


00:42:37.360 --> 00:42:37.920
>> Okay.


00:42:37.920 --> 00:42:40.520
>> So in 3.10.7, they said, "You know what?


00:42:40.520 --> 00:42:43.280
We're going to limit the size of int to,


00:42:43.280 --> 00:42:49.640
I don't know, like 994 with 100 zeros or something after it, right?


00:42:49.640 --> 00:42:54.400
At the time, you and I spoke about, remember when we did C and C++ and C#


00:42:54.400 --> 00:43:01.160
and we had to think about shorts and, you know, 32-bit integers and 64-bit integers


00:43:01.160 --> 00:43:05.160
and would it be bigger or smaller than 32,000? Do we need to worry?


00:43:05.160 --> 00:43:08.400
And like that number is so huge, like we probably don't think about it.


00:43:08.400 --> 00:43:12.200
Some people do, in particular, the scientific folks.


00:43:12.200 --> 00:43:14.960
So over on Condafort, there's a big conversation


00:43:14.960 --> 00:43:16.360
about what to do here.


00:43:16.360 --> 00:43:18.360
Like, should we adopt this?


00:43:18.360 --> 00:43:20.680
Should we say this is like too much of a problem?


00:43:20.680 --> 00:43:22.560
I mean, I don't really know how they're gonna avoid


00:43:22.560 --> 00:43:24.200
eventually adopting it.


00:43:24.200 --> 00:43:25.040
- Yeah.


00:43:25.040 --> 00:43:27.920
- Because like every version of Python going forward


00:43:27.920 --> 00:43:29.400
is gonna have this in it, right?


00:43:29.400 --> 00:43:32.800
They don't wanna eventually, like permanently be held back.


00:43:32.800 --> 00:43:37.800
But on the other side, the, what's it Ubuntu?


00:43:37.800 --> 00:43:39.120
Let me look.


00:43:39.120 --> 00:43:42.620
Yeah, Ubuntu has decided to patch out that int limit.


00:43:42.620 --> 00:43:45.580
So basically unravel that security fix


00:43:45.580 --> 00:43:48.580
and preserve the behavior, previous behavior,


00:43:48.580 --> 00:43:52.020
thinking that the risk is low of getting an integer


00:43:52.020 --> 00:43:54.820
like that and it's not worth breaking compatibility for.


00:43:54.820 --> 00:43:57.220
- Okay.


00:43:57.220 --> 00:43:59.820
- So apparently int, open parenthesis,


00:43:59.820 --> 00:44:03.160
string, close parenthesis is still controversial.


00:44:03.160 --> 00:44:06.700
Who knew?


00:44:06.700 --> 00:44:07.620
- Who knew? - Not me.


00:44:07.620 --> 00:44:08.460
- Yeah. - Not me.


00:44:08.460 --> 00:44:09.300
- Yeah.


00:44:09.300 --> 00:44:10.140
- So.


00:44:10.140 --> 00:44:10.960
- Yeah.


00:44:10.960 --> 00:44:11.800
(coughs)


00:44:11.800 --> 00:44:12.620
All right.


00:44:12.620 --> 00:44:13.460
Let's see.


00:44:13.460 --> 00:44:15.540
(laughs)


00:44:15.540 --> 00:44:17.380
Robert Robertson asks,


00:44:17.380 --> 00:44:20.760
in Python Bytes episode 311,


00:44:20.760 --> 00:44:24.560
is that going to be a special episode covering Python 311?


00:44:24.560 --> 00:44:26.260
I don't know, but we got five weeks to figure it out


00:44:26.260 --> 00:44:27.700
and it's a great idea, Robert.


00:44:27.700 --> 00:44:28.540
Thank you.


00:44:28.540 --> 00:44:29.360
- Sure.


00:44:29.360 --> 00:44:30.200
It's a good idea.


00:44:30.200 --> 00:44:31.040
- I didn't see that coming.


00:44:31.040 --> 00:44:32.740
Yeah, we should coordinate with the Python folks.


00:44:32.740 --> 00:44:35.180
We could have just released like five really short episodes


00:44:35.180 --> 00:44:36.020
like, you know,


00:44:36.020 --> 00:44:38.140
at least like five really short episodes.


00:44:38.140 --> 00:44:40.260
Like still waiting.


00:44:40.260 --> 00:44:42.180
Nope, skip to the next one.


00:44:42.180 --> 00:44:43.020
Yeah.


00:44:43.020 --> 00:44:43.980
All right, well, that's all I got.


00:44:43.980 --> 00:44:46.380
That's all I got for extras.


00:44:46.380 --> 00:44:49.380
- Well, one of the things I want to extra from the audience,


00:44:49.380 --> 00:44:56.020
Dean Langsom, Piedata TLV.


00:44:56.020 --> 00:44:56.860
- Tel Aviv.


00:44:56.860 --> 00:44:59.020
- Tel Aviv is on December 13th


00:44:59.020 --> 00:45:02.180
and they have tickets up for sale and there's a code.


00:45:02.180 --> 00:45:06.500
So if you use discount code, B-Y-T-E-S,


00:45:06.500 --> 00:45:08.580
you get a discount, I guess.


00:45:08.580 --> 00:45:09.920
So that's nice.


00:45:09.920 --> 00:45:10.760
- Awesome.


00:45:10.760 --> 00:45:13.620
Yeah, good luck with the conference there, Dean.


00:45:13.620 --> 00:45:14.460
- And how about-


00:45:14.460 --> 00:45:16.940
- Lovely city to visit if you get a chance to.


00:45:16.940 --> 00:45:18.040
- Okay, cool.


00:45:18.040 --> 00:45:21.220
How about something funny?


00:45:21.220 --> 00:45:22.380
- Yes.


00:45:22.380 --> 00:45:23.220
All right.


00:45:23.220 --> 00:45:26.380
- Besides my voice.


00:45:26.380 --> 00:45:29.860
- Here we go.


00:45:30.760 --> 00:45:32.240
Let's see if I can open the image.


00:45:32.240 --> 00:45:33.720
It's own glorious.


00:45:33.720 --> 00:45:35.560
So Brian, I was thinking about getting a new monitor.


00:45:35.560 --> 00:45:36.400
I have a fine monitor.


00:45:36.400 --> 00:45:38.760
It's like a 32 inch 4K monitor,


00:45:38.760 --> 00:45:40.820
but I want something kind of widescreen.


00:45:40.820 --> 00:45:43.440
So there was this cool,


00:45:43.440 --> 00:45:46.040
like horizontal resolution equivalent 4K,


00:45:46.040 --> 00:45:49.160
but it was 40, it was either 40 or 49 inches wide.


00:45:49.160 --> 00:45:52.920
It was epic, but I didn't get it.


00:45:52.920 --> 00:45:57.120
So I didn't get it


00:45:57.120 --> 00:45:58.560
'cause I thought the curved monitor


00:45:58.560 --> 00:46:01.760
might be like parabolic echoes for all the work


00:46:01.760 --> 00:46:03.160
that we do here.


00:46:03.160 --> 00:46:05.520
And I also didn't get it because, well, it's expensive


00:46:05.520 --> 00:46:07.400
and I don't know if I can get it into the resolutions


00:46:07.400 --> 00:46:09.320
I want for recordings and things like that.


00:46:09.320 --> 00:46:13.800
But here's somebody who posted a picture.


00:46:13.800 --> 00:46:15.620
It says, "Develop in Java be like,"


00:46:15.620 --> 00:46:18.800
and it's got, I think that's a 49 inch curved


00:46:18.800 --> 00:46:23.800
widescreen monitor, small font, and it's edge to edge code.


00:46:23.800 --> 00:46:26.800
There's no PEP 8 ideas on this, right?


00:46:26.800 --> 00:46:27.640
Look at that.


00:46:27.640 --> 00:46:28.480
- Yeah.


00:46:28.480 --> 00:46:29.300
- Is that nuts?


00:46:29.300 --> 00:46:30.340
- That is nuts.


00:46:30.340 --> 00:46:31.180
Yeah.


00:46:31.180 --> 00:46:32.000
- Yeah.


00:46:32.000 --> 00:46:33.680
And the subtitles be like,


00:46:33.680 --> 00:46:34.940
I heard you like gooders.


00:46:34.940 --> 00:46:36.180
(laughs)


00:46:36.180 --> 00:46:39.060
Which apparently, you know, no properties and all that.


00:46:39.060 --> 00:46:39.900
- Yeah.


00:46:39.900 --> 00:46:42.040
- But anyway, I just thought you all might enjoy


00:46:42.040 --> 00:46:45.400
just checking out this picture of an insane bit of code.


00:46:45.400 --> 00:46:46.980
Like something's gone wrong.


00:46:46.980 --> 00:46:47.820
(laughs)


00:46:47.820 --> 00:46:50.420
When you need, you actually need the full width


00:46:50.420 --> 00:46:51.500
of a 49 inch monitor.


00:46:51.500 --> 00:46:54.420
I was thinking of putting a couple windows side by side.


00:46:54.420 --> 00:46:55.740
I don't know.


00:46:55.740 --> 00:46:56.580
Call me crazy.


00:46:56.580 --> 00:46:58.020
I haven't measured mine.


00:46:58.020 --> 00:46:59.900
I think mine's like--


00:46:59.900 --> 00:47:00.900
I'll have to measure it.


00:47:00.900 --> 00:47:02.900
I think it's like 30-something.


00:47:02.900 --> 00:47:04.860
I don't know.


00:47:04.860 --> 00:47:06.700
But it's got a bit of a curve.


00:47:06.700 --> 00:47:08.580
But I have to--


00:47:08.580 --> 00:47:09.900
it's painful to watch that.


00:47:09.900 --> 00:47:12.980
And I'm not going to throw rocks at this glass house


00:47:12.980 --> 00:47:15.180
because I'm a C++ developer.


00:47:15.180 --> 00:47:18.220
And I've got a few pieces of gnarly code


00:47:18.220 --> 00:47:20.780
that have big, long lines.


00:47:20.780 --> 00:47:25.500
Yeah, for the multiple inheritance,


00:47:25.500 --> 00:47:26.780
multiple template.


00:47:26.780 --> 00:47:28.380
Oh yeah.


00:47:28.380 --> 00:47:31.800
And also just bad naming sometimes.


00:47:31.800 --> 00:47:33.640
And that happens in Java too.


00:47:33.640 --> 00:47:34.700
You get big, long names.


00:47:34.700 --> 00:47:39.300
Well, the problem is you got to get a name, something, and then you've got to


00:47:39.300 --> 00:47:43.460
have a factory of something and you've got to have an eye factory interface of


00:47:43.460 --> 00:47:44.180
that something.


00:47:44.180 --> 00:47:46.020
And you got to mock it out.


00:47:46.020 --> 00:47:48.180
Anyway, it gets complicated and the names get long.


00:47:48.180 --> 00:47:48.700
I understand.


00:47:48.700 --> 00:47:52.740
And you have to get a mock, mock factory and a name factory and a factory factory.


00:47:52.740 --> 00:47:54.060
That's right.


00:47:55.060 --> 00:48:03.060
Dave Pearson, the audience, has identified the coding style here as a PEP infinity instead


00:48:03.060 --> 00:48:04.060
of PEP 8.


00:48:04.060 --> 00:48:05.060
That's PEP infinity code.


00:48:05.060 --> 00:48:06.060
>> PEP infinity, yeah.


00:48:06.060 --> 00:48:07.060
>> Well, this was infinitely fun.


00:48:07.060 --> 00:48:08.060
Thank you, Brian.


00:48:08.060 --> 00:48:09.060
>> Thanks.


00:48:09.060 --> 00:48:10.060
>> And thanks, everyone, for being here.


00:48:10.060 --> 00:48:11.060
>> Thank you.


00:48:11.060 --> 00:48:12.060
We'll talk to you later.


00:48:12.060 --> 00:48:13.060
Bye.


00:48:13.060 --> 00:48:14.060
>> Yeah.


00:48:14.060 --> 00:48:14.080
Bye.


00:48:14.080 --> 00:48:14.360
now.


00:48:14.360 --> 00:48:24.360
[BLANK_AUDIO]

