WEBVTT

00:00:00.000 --> 00:00:04.720
- Hello, everyone out there in the live stream.


00:00:04.720 --> 00:00:06.500
Thank you so much for being here.


00:00:06.500 --> 00:00:09.160
And if you're watching later, thanks for watching.


00:00:09.160 --> 00:00:12.180
Enjoy what we're doing, please like the video


00:00:12.180 --> 00:00:15.400
and tell YouTube and all of its algorithms that you like it.


00:00:15.400 --> 00:00:19.840
So it spreads to others and awesome to see you, Brandon.


00:00:19.840 --> 00:00:21.680
Alexander, thanks for being here.


00:00:21.680 --> 00:00:25.800
Brian, are you ready to kick this off?


00:00:25.800 --> 00:00:26.920
- Yeah, definitely.


00:00:26.920 --> 00:00:28.200
- Yeah, we are.


00:00:28.200 --> 00:00:29.200
- Yeah, let's do it.


00:00:29.200 --> 00:00:34.200
Hello and welcome to Python Bytes where we deliver Python news and headlines directly


00:00:34.200 --> 00:00:41.520
to your earbuds. This is episode 250, recorded September 15th, 2021. I'm Michael Kennedy.


00:00:41.520 --> 00:00:45.560
And I'm Brian Okken. And I am Freysen.


00:00:45.560 --> 00:00:51.760
Freysen, welcome to Python Bytes. Yeah, it's a pleasure. I've been looking so much forward


00:00:51.760 --> 00:00:55.840
to joining you guys. Yeah, you've been somebody out there who's


00:00:55.840 --> 00:00:58.220
You've been giving us a lot of good ideas and topics


00:00:58.220 --> 00:01:00.880
and helping us learn about new things.


00:01:00.880 --> 00:01:02.360
So you've been a big supporter of the show


00:01:02.360 --> 00:01:04.600
and now you are part of the show.


00:01:04.600 --> 00:01:05.440
- Yeah, hooray.


00:01:05.440 --> 00:01:07.680
(laughs)


00:01:07.680 --> 00:01:11.040
Right, yeah, I've been looking so much forward


00:01:11.040 --> 00:01:14.160
for this first time I saw,


00:01:14.160 --> 00:01:16.600
oh, we can take part in this and go like,


00:01:16.600 --> 00:01:20.600
oh, I should try to just get myself in there and here I am.


00:01:20.600 --> 00:01:21.720
- Yeah, here you are.


00:01:21.720 --> 00:01:22.560
Thanks for doing that.


00:01:22.560 --> 00:01:23.600
That's really nice.


00:01:23.600 --> 00:01:24.840
Tell people a bit about yourself


00:01:24.840 --> 00:01:28.900
before we dive into Brian's first topic.


00:01:28.900 --> 00:01:32.780
- Yes, well, my name is Preyson Daniel


00:01:32.780 --> 00:01:35.560
and I'm originally from Tanzania,


00:01:35.560 --> 00:01:40.560
but living in Denmark, married with three awesome kids.


00:01:40.560 --> 00:01:44.320
Currently, I'm a principal data scientist


00:01:44.320 --> 00:01:49.320
at NTT Data Business Solution here in Copenhagen.


00:01:51.640 --> 00:01:56.640
And yeah, so accidentally became a data scientist


00:01:56.640 --> 00:02:01.400
and somehow discovering that I was really, really good at it


00:02:01.400 --> 00:02:03.880
then I just started climbing my way up


00:02:03.880 --> 00:02:05.940
thanks to the Python community


00:02:05.940 --> 00:02:07.880
and everything that is out there.


00:02:07.880 --> 00:02:09.840
- Yeah, awesome.


00:02:09.840 --> 00:02:10.660
Congratulations.


00:02:10.660 --> 00:02:13.400
Nice to see you finding your way in the data science world.


00:02:13.400 --> 00:02:15.920
- Very cool.


00:02:15.920 --> 00:02:16.760
- Yeah, Fred.


00:02:16.760 --> 00:02:18.120
- Accidentally becoming a data scientist.


00:02:18.120 --> 00:02:19.280
That's interesting.


00:02:19.280 --> 00:02:20.120
- Exactly.


00:02:20.120 --> 00:02:20.960
- Yeah.


00:02:20.960 --> 00:02:26.000
- All right, Brian, have people been doing things wrong?


00:02:26.000 --> 00:02:26.840
- I think so.


00:02:26.840 --> 00:02:32.200
- Oh, including race conditions with screen sharing.


00:02:32.200 --> 00:02:35.400
- Yeah, so I just couldn't resist this article.


00:02:35.400 --> 00:02:37.200
There's an article out called


00:02:37.200 --> 00:02:40.700
exciting new ways to be told that your Python code is bad,


00:02:40.700 --> 00:02:43.920
which is just a great title.


00:02:43.920 --> 00:02:48.920
And the gist is there's two new pylint errors.


00:02:49.260 --> 00:02:52.060
So it's pretty simple.


00:02:52.060 --> 00:02:56.020
But it made me think about my code a little bit.


00:02:56.020 --> 00:02:59.740
And the first one is an error to tell you


00:02:59.740 --> 00:03:02.300
to consider ternary expressions.


00:03:02.300 --> 00:03:08.100
So if you've got like if condition,


00:03:08.100 --> 00:03:12.700
and then you assign a variable in both the if clause


00:03:12.700 --> 00:03:16.060
and the else clause, and it's a short thing,


00:03:16.060 --> 00:03:19.140
maybe use a conditional expression instead


00:03:19.140 --> 00:03:22.220
and do all in one line, like say,


00:03:22.220 --> 00:03:24.920
and one of the examples in the blog post says,


00:03:24.920 --> 00:03:28.780
X equals four if condition else five.


00:03:28.780 --> 00:03:31.540
So, ternary operators are pretty cool,


00:03:31.540 --> 00:03:34.820
and they're pretty easy to read in Python.


00:03:34.820 --> 00:03:37.140
But I was just curious what you thought,


00:03:37.140 --> 00:03:41.320
is the ternary expression easier to read or more difficult?


00:03:41.320 --> 00:03:45.480
- Well, for me, I think this is pretty nice.


00:03:45.480 --> 00:03:48.220
I'm always on the edge about the ternary condition,


00:03:48.220 --> 00:03:51.500
the value if condition else other value,


00:03:51.500 --> 00:03:54.400
a lot of times it starts to stretch out


00:03:54.400 --> 00:03:57.300
to be a little bit verbose,


00:03:57.300 --> 00:03:59.340
and then it's kind of, you know,


00:03:59.340 --> 00:04:01.200
it's not entirely obvious.


00:04:01.200 --> 00:04:02.760
One thing I recently learned about,


00:04:02.760 --> 00:04:04.080
I don't know how it took me so long,


00:04:04.080 --> 00:04:08.700
is the simpler version of that like variable


00:04:08.700 --> 00:04:12.900
or other option without the if else,


00:04:12.900 --> 00:04:15.740
just the thing or that thing, right?


00:04:15.740 --> 00:04:18.080
So for example, if you try to get a user back


00:04:18.080 --> 00:04:21.660
and you just wanna return the user


00:04:21.660 --> 00:04:23.160
or you wanna return,


00:04:23.160 --> 00:04:25.340
maybe you wanna check if they're admin.


00:04:25.340 --> 00:04:26.380
If they are, you return them.


00:04:26.380 --> 00:04:27.820
Otherwise you might turn them back.


00:04:27.820 --> 00:04:30.020
You could say something to the effect of like,


00:04:30.020 --> 00:04:36.140
if I say user or a result equals user or false


00:04:36.140 --> 00:04:37.700
or something like that.


00:04:37.700 --> 00:04:39.100
It's not a totally good example here,


00:04:39.100 --> 00:04:42.420
but this like super short version of value


00:04:42.420 --> 00:04:45.280
where you kind of have the return value and the test,


00:04:45.280 --> 00:04:47.540
and then the alt fallback, the else piece.


00:04:47.540 --> 00:04:50.840
It wouldn't work in the example I have here,


00:04:50.840 --> 00:04:53.440
but that one I actually started to really like


00:04:53.440 --> 00:04:54.980
because it's so concise.


00:04:54.980 --> 00:04:58.400
- I don't know, I think I'm very traditional.


00:04:58.400 --> 00:05:01.280
I like reading my code up going down.


00:05:01.280 --> 00:05:03.920
So whenever it started stretching sideways to me,


00:05:03.920 --> 00:05:05.560
I go like, ah, okay.


00:05:05.560 --> 00:05:07.800
I think I just love the flow of if,


00:05:07.800 --> 00:05:10.440
then I know I have to look down for the else, right?


00:05:10.440 --> 00:05:12.640
But now I have to look the else from the other side.


00:05:12.640 --> 00:05:17.640
And yeah, but one-liners are good in some places,


00:05:17.640 --> 00:05:20.860
but in most of the cases, out of readability,


00:05:20.860 --> 00:05:22.980
I usually just try to avoid them.


00:05:22.980 --> 00:05:23.820
- Yeah, I do as well.


00:05:23.820 --> 00:05:25.600
The one thing I was thinking is interesting


00:05:25.600 --> 00:05:27.860
on the data science side, Preysen,


00:05:27.860 --> 00:05:30.860
is a lot of times you're trying to take,


00:05:30.860 --> 00:05:32.580
instead of statements, multiple lines,


00:05:32.580 --> 00:05:34.140
you're trying to create little expressions


00:05:34.140 --> 00:05:37.740
that you can put together in like little list comprehensions


00:05:37.740 --> 00:05:38.980
and other types of things.


00:05:38.980 --> 00:05:42.580
And these one-liners become really valuable there.


00:05:42.580 --> 00:05:44.500
- Yeah, yeah, definitely, definitely.


00:05:44.500 --> 00:05:47.080
Mostly when we're using lambdas everywhere, right?


00:05:47.080 --> 00:05:49.140
- Yes, exactly, exactly.


00:05:49.140 --> 00:05:52.420
- So the next error condition is funny, I think,


00:05:52.420 --> 00:05:54.860
and it's just the while is used.


00:05:54.860 --> 00:05:59.540
So it's just a warning to say you have a while in your code.


00:05:59.540 --> 00:06:02.520
And this, the comment really is there's,


00:06:02.520 --> 00:06:05.380
it's just not really usually good to have a while


00:06:05.380 --> 00:06:09.820
because it can like never terminate.


00:06:09.820 --> 00:06:12.940
You can, there's no, it's not guaranteed to terminate


00:06:12.940 --> 00:06:14.420
if you've got a while loop.


00:06:14.420 --> 00:06:17.060
So I thought that was interesting.


00:06:17.060 --> 00:06:19.660
I actually was just thinking about this the other day


00:06:19.660 --> 00:06:23.020
is that I can't even remember the last time


00:06:23.020 --> 00:06:25.180
I've used a while loop in some code.


00:06:25.180 --> 00:06:28.420
So I think this is actually pretty good


00:06:28.420 --> 00:06:30.720
just to warn people they've got a while loop.


00:06:30.720 --> 00:06:33.060
- It's pretty strong.


00:06:33.060 --> 00:06:34.140
It's a pretty strong warning to say


00:06:34.140 --> 00:06:36.000
you have used this language construct.


00:06:36.000 --> 00:06:37.500
That's a problem.


00:06:37.500 --> 00:06:42.500
I certainly think I'm on board with the Zen of the idea


00:06:42.500 --> 00:06:47.380
that most of the time a while means you're doing it wrong.


00:06:47.380 --> 00:06:49.820
Most of the time you could probably iterate


00:06:49.820 --> 00:06:52.100
over a collection or you could enumerate


00:06:52.100 --> 00:06:55.500
and then iterate over the index and the value.


00:06:55.500 --> 00:06:58.860
But there are times where you actually need to test


00:06:58.860 --> 00:07:01.060
for something and then break out


00:07:01.060 --> 00:07:05.040
and to put it as a full on warning just for its existence.


00:07:06.780 --> 00:07:09.540
To me it seems a bit too far, but it's interesting to see.


00:07:09.540 --> 00:07:12.340
The first one, yeah, I think these are both sort of


00:07:12.340 --> 00:07:14.020
in the eye of the beholder a bit.


00:07:14.020 --> 00:07:17.020
- Yeah, I actually, like in our team


00:07:17.020 --> 00:07:19.120
or in my whole existence,


00:07:19.120 --> 00:07:21.740
I think we're using while only once,


00:07:21.740 --> 00:07:23.820
and this is on the computer vision.


00:07:23.820 --> 00:07:27.540
So you are trying to capture videos from the camera


00:07:27.540 --> 00:07:29.380
and then do analysis with them.


00:07:29.380 --> 00:07:33.020
So it says while there's a frame, keep on doing this.


00:07:33.020 --> 00:07:34.980
And of course you always have to catch


00:07:34.980 --> 00:07:39.980
some way to go out of this while loop.


00:07:39.980 --> 00:07:43.700
But I think that's the only time we use while.


00:07:43.700 --> 00:07:45.700
And we usually warn people, say,


00:07:45.700 --> 00:07:49.740
never use while except when you are doing computer vision.


00:07:49.740 --> 00:07:50.740
- Interesting, yeah.


00:07:50.740 --> 00:07:52.820
Especially if you've got things like pandas and stuff


00:07:52.820 --> 00:07:54.540
where maybe you shouldn't even be looping at all.


00:07:54.540 --> 00:07:57.020
- No, no, no, no, no, no.


00:07:57.020 --> 00:07:58.500
- Yeah, interesting.


00:07:58.500 --> 00:08:01.420
A couple of thoughts from the live stream.


00:08:01.420 --> 00:08:02.740
So Sam Morley-Others says,


00:08:02.740 --> 00:08:04.460
x equals y or z is really handy


00:08:04.460 --> 00:08:06.900
for setting instance variables in a class


00:08:06.900 --> 00:08:09.040
where they're using nones, I totally agree.


00:08:09.040 --> 00:08:10.420
Chris May, hey Chris, says,


00:08:10.420 --> 00:08:13.200
chernier is a great idea if it's simple,


00:08:13.200 --> 00:08:14.280
else not so much.


00:08:14.280 --> 00:08:17.100
Yeah. - Nice, clever.


00:08:17.100 --> 00:08:18.740
- Brendan Brainer out there agrees with you,


00:08:18.740 --> 00:08:20.580
praising that the traditional if else


00:08:20.580 --> 00:08:21.940
is probably easier to read.


00:08:21.940 --> 00:08:25.500
Henry Schreider says,


00:08:25.500 --> 00:08:28.980
chernier is much better for type checking as well.


00:08:28.980 --> 00:08:31.540
Okay, yeah, probably because the type reference


00:08:31.540 --> 00:08:33.660
is more obvious there.


00:08:33.660 --> 00:08:37.200
So yeah, pretty neat, pretty neat.


00:08:37.200 --> 00:08:39.640
Also speaking of neat stuff,


00:08:39.640 --> 00:08:43.320
what if you could have all sorts of little placards


00:08:43.320 --> 00:08:45.520
and things about your README?


00:08:45.520 --> 00:08:48.520
So here is a project I want to tell people about


00:08:48.520 --> 00:08:51.080
called GitHub README Stats.


00:08:51.080 --> 00:08:54.340
And GitHub README Stats is pretty interesting.


00:08:54.340 --> 00:08:57.160
It comes to us from Palma.


00:08:57.160 --> 00:08:58.880
So thank you Palma for sending that in.


00:08:58.880 --> 00:09:03.560
And the description says it dynamically generated stats


00:09:03.560 --> 00:09:05.740
for your GitHub readmes.


00:09:05.740 --> 00:09:09.900
But I feel like that scope is actually way too short.


00:09:09.900 --> 00:09:14.780
It's dynamically generated little placards


00:09:14.780 --> 00:09:16.680
for wherever you wanna put them on the internet.


00:09:16.680 --> 00:09:19.580
You might wanna put them on a project's readme


00:09:19.580 --> 00:09:22.220
so the project can describe itself more dynamically,


00:09:22.220 --> 00:09:24.980
but you might also wanna put it on your about page


00:09:24.980 --> 00:09:27.420
on your blog or something like that.


00:09:27.420 --> 00:09:30.740
So give you all a sense of what's going on here.


00:09:30.740 --> 00:09:35.160
Come down here, you can have these different,


00:09:35.160 --> 00:09:36.540
there's a whole bunch of different options.


00:09:36.540 --> 00:09:38.780
You can get like a GitHub stats card,


00:09:38.780 --> 00:09:40.660
you can get extra pins,


00:09:40.660 --> 00:09:43.180
you can get the languages, like for example,


00:09:43.180 --> 00:09:47.020
we could say what the languages you are most likely to use


00:09:47.020 --> 00:09:49.260
across all of your repositories,


00:09:49.260 --> 00:09:51.980
the walk of time, week stats,


00:09:51.980 --> 00:09:55.300
there's a bunch of themes and visualizations and stuff.


00:09:55.300 --> 00:09:57.340
So I think the best way to get a sense of this


00:09:57.340 --> 00:09:58.180
is to see an example.


00:09:58.180 --> 00:10:00.620
So I put a couple of projects in my own self


00:10:00.620 --> 00:10:01.840
and here it does kind of pick on me.


00:10:01.840 --> 00:10:05.260
So here's an image that I could add.


00:10:05.260 --> 00:10:06.760
Let's zoom that in.


00:10:06.760 --> 00:10:10.580
So I have this Python switch package


00:10:10.580 --> 00:10:11.960
that I created a while ago


00:10:11.960 --> 00:10:14.420
when Python didn't have anything like a switch statement.


00:10:14.420 --> 00:10:16.220
So I wanted to add a switch statement


00:10:16.220 --> 00:10:18.220
to the Python language, so I did.


00:10:18.220 --> 00:10:19.660
And apparently here are the stats of it.


00:10:19.660 --> 00:10:20.820
These are live, right?


00:10:20.820 --> 00:10:23.140
If I refresh it, it'll regenerate it.


00:10:23.140 --> 00:10:25.780
And it gives you a little bit of info about the project,


00:10:25.780 --> 00:10:27.860
like the name and its little description.


00:10:27.860 --> 00:10:28.940
That's mostly Python.


00:10:28.940 --> 00:10:33.500
As it says, it has 238 stars and 18 forks,


00:10:33.500 --> 00:10:35.540
which is pretty awesome.


00:10:35.540 --> 00:10:37.660
So all I gotta do to get that is go up here


00:10:37.660 --> 00:10:39.140
and say, I wanna get the pin


00:10:39.140 --> 00:10:41.340
and I wanna have the username be Mike C. Kennedy


00:10:41.340 --> 00:10:43.460
and the repo be Python-Switch.


00:10:43.460 --> 00:10:46.360
And this returns an image that I can put,


00:10:46.360 --> 00:10:47.380
like I said, anywhere, right?


00:10:47.380 --> 00:10:49.380
If you put this as the image source,


00:10:49.380 --> 00:10:52.180
it'll go, it's not just like it'll only render on GitHub.


00:10:52.180 --> 00:10:54.180
it'll go wherever you put it.


00:10:54.180 --> 00:10:56.780
So I think that that's pretty cool.


00:10:56.780 --> 00:10:59.140
Another example would be your stats.


00:10:59.140 --> 00:11:00.980
I'll refresh this 'cause your little animation.


00:11:00.980 --> 00:11:03.780
I can get my Michael Kennedy's GitHub stats.


00:11:03.780 --> 00:11:07.900
Apparently I have an A++, but a two thirds closed red ring.


00:11:07.900 --> 00:11:09.260
I'm not totally sure what the ring means,


00:11:09.260 --> 00:11:11.340
but it's kind of a cool little graphic here.


00:11:11.340 --> 00:11:14.580
Apparently I've got 3.5 thousand stars, which surprises me.


00:11:14.580 --> 00:11:18.660
A lot of commits, 73 PRs, 103 issues,


00:11:18.660 --> 00:11:21.860
23 repositories I contributed to.


00:11:21.860 --> 00:11:24.540
I don't know if that's this year or maybe this year,


00:11:24.540 --> 00:11:26.180
who knows, or total.


00:11:26.180 --> 00:11:27.340
Anyway, that's kind of cool, right?


00:11:27.340 --> 00:11:29.380
You could put that on your blog or somewhere


00:11:29.380 --> 00:11:31.180
where you're trying to talk about yourself,


00:11:31.180 --> 00:11:33.020
like you're trying to get hired


00:11:33.020 --> 00:11:34.860
or you do consulting or something.


00:11:34.860 --> 00:11:36.420
And then the third one here is you can say


00:11:36.420 --> 00:11:37.560
your most used languages.


00:11:37.560 --> 00:11:39.340
So apparently I have most used JavaScript,


00:11:39.340 --> 00:11:41.260
which is very much not true,


00:11:41.260 --> 00:11:46.100
but I've probably committed a ton of applying Node modules


00:11:46.100 --> 00:11:48.660
to some projects that I don't actually want to have to,


00:11:48.660 --> 00:11:50.820
you know, re-NPM install.


00:11:50.820 --> 00:11:52.620
I wanna just make sure they're there for like a course


00:11:52.620 --> 00:11:53.500
or something like that, right?


00:11:53.500 --> 00:11:55.700
But it'll show you sort of the breakdown


00:11:55.700 --> 00:11:58.020
of your various languages and whatnot.


00:11:58.020 --> 00:12:02.740
So that gives you kind of a sense of what these are all


00:12:02.740 --> 00:12:04.860
about, what the idea of this thing is.


00:12:04.860 --> 00:12:07.260
You generate these little cards and you can put them,


00:12:07.260 --> 00:12:08.500
like I said, wherever you want.


00:12:08.500 --> 00:12:09.340
What do you think?


00:12:09.340 --> 00:12:10.700
- Like on a resume page.


00:12:10.700 --> 00:12:11.540
- Yeah.


00:12:11.540 --> 00:12:15.060
- Yeah, I really love it, but it's kind of sad


00:12:15.060 --> 00:12:18.420
because most of our time is spent in GitLab


00:12:18.420 --> 00:12:21.900
and all this other, and all our commits are down there.


00:12:21.900 --> 00:12:24.620
And then when I come to my GitHub, it looks so empty.


00:12:24.620 --> 00:12:25.460
And it makes my heart sick.


00:12:25.460 --> 00:12:26.820
- What has Prasit been doing?


00:12:26.820 --> 00:12:29.140
He hasn't committed anything for a week.


00:12:29.140 --> 00:12:29.980
- Yeah, yeah.


00:12:29.980 --> 00:12:32.860
So, but this is really, really awesome.


00:12:32.860 --> 00:12:34.140
- Yeah, cool.


00:12:34.140 --> 00:12:36.380
Yeah, I guess it really only works for GitHub


00:12:36.380 --> 00:12:39.260
and that's where it's really handy, but still pretty nice.


00:12:39.260 --> 00:12:41.500
- The stats are only on public repos


00:12:41.500 --> 00:12:43.100
or are they public in private?


00:12:43.100 --> 00:12:44.580
- It's a good question.


00:12:46.580 --> 00:12:49.080
- So you can choose as a user,


00:12:49.080 --> 00:12:50.620
if you go down here and like the stuff


00:12:50.620 --> 00:12:52.260
that shows in your contributions,


00:12:52.260 --> 00:12:54.280
in your GitHub profile,


00:12:54.280 --> 00:12:57.140
you can check whether you want public


00:12:57.140 --> 00:13:00.920
and private contributions to appear in that little green,


00:13:00.920 --> 00:13:06.520
of how much contributions have you made this year by day.


00:13:06.520 --> 00:13:11.020
So maybe it depends on whether you've checked that or not,


00:13:11.020 --> 00:13:12.300
you know what I mean?


00:13:12.300 --> 00:13:13.620
But it might not.


00:13:15.420 --> 00:13:17.680
Anyway, yeah, pretty cool little project.


00:13:17.680 --> 00:13:20.740
Brayson, you're up next.


00:13:20.740 --> 00:13:21.580
What you got?


00:13:21.580 --> 00:13:22.420
- Yes, yes, yes.


00:13:22.420 --> 00:13:24.220
So I got this one here.


00:13:24.220 --> 00:13:28.220
Actually, this is, it's something that has been covered,


00:13:28.220 --> 00:13:30.260
not covered, covered, but been mentioned.


00:13:30.260 --> 00:13:35.260
So I could see it in the footnotes as when I searched through


00:13:35.260 --> 00:13:40.020
actually, Brian, you covered it in episode 182


00:13:40.020 --> 00:13:41.980
with HyperMod in Python.


00:13:41.980 --> 00:13:43.780
I think it's just the name that was there.


00:13:43.780 --> 00:13:45.060
Yeah, but it was not mentioned.


00:13:45.060 --> 00:13:47.560
I think it's just been, oh, this could be used


00:13:47.560 --> 00:13:51.420
in this hyper modern Python way of doing awesome stuff.


00:13:51.420 --> 00:13:56.260
And then in episode 248, it was mentioned again


00:13:56.260 --> 00:13:59.260
with hyper modern Python cookie cutter,


00:13:59.260 --> 00:14:01.460
but it's just like a footnote of,


00:14:01.460 --> 00:14:04.660
oh, use Knox instead of Tox.


00:14:04.660 --> 00:14:07.740
So this is really, really an awesome tool


00:14:07.740 --> 00:14:11.260
that we've been using recently


00:14:11.260 --> 00:14:14.520
because when we do machine learning,


00:14:14.520 --> 00:14:18.040
we are encountering a lot of problems


00:14:18.040 --> 00:14:21.980
where we have to test how our models are performing


00:14:21.980 --> 00:14:24.280
and how are they ethical.


00:14:24.280 --> 00:14:29.240
So the test, when we do tests of our pipelines,


00:14:29.240 --> 00:14:32.840
we're not just testing that the models are accurate


00:14:32.840 --> 00:14:35.100
or they are doing the things that they're doing,


00:14:35.100 --> 00:14:39.360
like the API, it's actually, you cannot just ping our API,


00:14:39.360 --> 00:14:41.120
you need to have keys and all those.


00:14:41.120 --> 00:14:43.820
We actually also have to test about the ethicalness


00:14:43.820 --> 00:14:45.020
of our models.


00:14:45.020 --> 00:14:47.940
So like if we say our models does not segregate


00:14:47.940 --> 00:14:52.940
between let's say gender,


00:14:52.940 --> 00:14:56.140
so we test, we have counterfactual test


00:14:56.140 --> 00:14:58.220
where we send different genders


00:14:58.220 --> 00:15:00.140
and see what are the models responding


00:15:00.140 --> 00:15:01.740
and they're responding with a similar results.


00:15:01.740 --> 00:15:05.540
Or when we say it doesn't segregate


00:15:05.540 --> 00:15:06.980
between sexual orientation,


00:15:06.980 --> 00:15:10.820
then we send different inputs where it pretends


00:15:10.820 --> 00:15:15.820
to be either straight or homosexual


00:15:15.820 --> 00:15:18.860
and just try to see do we receive the same results.


00:15:18.860 --> 00:15:23.860
So we've been trying to run this very in an automatic way.


00:15:23.860 --> 00:15:27.940
And before that, we use a lot of talks.


00:15:27.940 --> 00:15:30.760
But the problem is, talks,


00:15:30.760 --> 00:15:34.160
the way of defining your talks is just not Pythonic.


00:15:34.160 --> 00:15:38.780
Like you don't write this Pythonic way of doing things.


00:15:38.780 --> 00:15:42.620
is similar to, we had this issue with make.


00:15:42.620 --> 00:15:44.540
I really could not debug make.


00:15:44.540 --> 00:15:46.380
So whenever I made a make file,


00:15:46.380 --> 00:15:50.000
I copied from someone else and then changed some things


00:15:50.000 --> 00:15:52.980
because anything I touched, then I have a syntax error.


00:15:52.980 --> 00:15:55.920
Oh, this thing is not in the right place.


00:15:55.920 --> 00:15:58.960
And then I came across evoke,


00:15:58.960 --> 00:16:01.020
which it was almost like Pythonic.


00:16:01.020 --> 00:16:03.460
I can write everything in a Python way.


00:16:03.460 --> 00:16:08.460
So this Nox is actually similar to what evoke did to,


00:16:08.460 --> 00:16:18.620
make, but it's doing exactly to Tux. So in this case, you can create simple pipelines


00:16:18.620 --> 00:16:25.020
like this one here, where it creates a session, installs the package that needs to be installed,


00:16:25.020 --> 00:16:31.020
and then run whatever experiment you're trying to run. And this is really, really handy,


00:16:31.020 --> 00:16:36.260
at least we find it really handy, because you can select that it actually used the Conda


00:16:36.260 --> 00:16:42.260
environment like the condor world has been used a lot in data science. So you can say first create


00:16:42.260 --> 00:16:48.180
a condor virtual environment, install these packages and then test them. So what I like about


00:16:48.180 --> 00:16:55.220
this tool, it's almost similar to pytest. Like if you know how pytest works, then you know how this


00:16:55.220 --> 00:17:02.500
guy works because there's a parameterization and whenever you run test, you can select which part


00:17:02.500 --> 00:17:10.340
of session needs to be run, like in pytest, we use the -k, run this kind of test, and


00:17:10.340 --> 00:17:17.140
here you use the same thing, -k, run only this kind of builds, right? So it is dope.


00:17:17.140 --> 00:17:22.860
We really, really enjoy that. Like, you can pass in an environment variable, but I actually


00:17:22.860 --> 00:17:28.100
wanted to show you the coolest part here. >> Yeah, this does look nice.


00:17:28.100 --> 00:17:29.280
It's just amazing.


00:17:29.280 --> 00:17:34.280
I cannot, I mean, the guy who created this,


00:17:34.280 --> 00:17:37.440
I just give him all the thumbs up


00:17:37.440 --> 00:17:40.060
with everything that they have come up with.


00:17:40.060 --> 00:17:44.100
So it's really, really handy if you're not using it,


00:17:44.100 --> 00:17:46.340
or if you're using Tux,


00:17:46.340 --> 00:17:50.660
you should probably consider changing to Nuxt.


00:17:50.660 --> 00:17:51.480
- That's cool.


00:17:51.480 --> 00:17:53.880
You can, for example, write that you have a test


00:17:53.880 --> 00:17:56.820
and then say, I want this as a decorator,


00:17:56.820 --> 00:17:57.860
sort of parameterized.


00:17:57.860 --> 00:18:01.200
I want this to run on 2736, 3738,


00:18:01.200 --> 00:18:02.520
and it'll do that, right?


00:18:02.520 --> 00:18:03.360
- Yeah.


00:18:03.360 --> 00:18:04.180
- Yeah.


00:18:04.180 --> 00:18:07.300
- So it seems like this example here, right?


00:18:07.300 --> 00:18:10.860
So we can see we are parameterizing different Django.


00:18:10.860 --> 00:18:14.020
So we want it to first install this version


00:18:14.020 --> 00:18:15.980
and then run the tests, right?


00:18:15.980 --> 00:18:18.860
And then later it will come and take this version


00:18:18.860 --> 00:18:19.940
and run the test.


00:18:19.940 --> 00:18:21.220
But then in the command line,


00:18:21.220 --> 00:18:24.180
you can actually just select it to run only the test


00:18:24.180 --> 00:18:26.500
with this guy and skip this guy here.


00:18:27.380 --> 00:18:32.380
So it's really, I mean, it's the ability that it gives you,


00:18:32.380 --> 00:18:35.900
it's incredible.


00:18:35.900 --> 00:18:40.500
So if I could see, so you can see like here, right here,


00:18:40.500 --> 00:18:42.860
right, this is exactly what like it goes


00:18:42.860 --> 00:18:45.500
into the pytest-ish world.


00:18:45.500 --> 00:18:48.060
- You can run it and say, don't run the linter


00:18:48.060 --> 00:18:50.700
or just lint it, don't run the test or test.


00:18:50.700 --> 00:18:52.900
You can even put Python expressions, it looks like,


00:18:52.900 --> 00:18:55.340
test and not lint, for example.


00:18:55.340 --> 00:19:00.840
I mean, it's just insanely great.


00:19:00.840 --> 00:19:04.480
Nice. Brian, what do you think of this?


00:19:04.480 --> 00:19:06.480
Oh, I really like Knox. It's neat.


00:19:06.480 --> 00:19:10.440
The parameter is, the use of parameters is really cool.


00:19:10.440 --> 00:19:15.280
And the example of like using a couple of different django's is good,


00:19:15.280 --> 00:19:21.980
but you can also build up matrices of testing easily with like a couple,


00:19:21.980 --> 00:19:25.780
you can stack these so you can have two parameters together.


00:19:25.780 --> 00:19:28.140
It's a pretty cool project.


00:19:28.140 --> 00:19:31.180
I just really love talks,


00:19:31.180 --> 00:19:34.940
so I haven't switched.


00:19:34.940 --> 00:19:40.340
But I know that there's like invoke also,


00:19:40.340 --> 00:19:42.740
people are using invoke for automation,


00:19:42.740 --> 00:19:47.500
but people are using Knox for more than just automating testing.


00:19:47.500 --> 00:19:50.140
You can automate really whatever you want to.


00:19:50.140 --> 00:19:52.260
you can run, it's just running a command, right?


00:19:52.260 --> 00:19:53.220
So.


00:19:53.220 --> 00:19:54.500
- Nice.


00:19:54.500 --> 00:19:55.380
Yeah.


00:19:55.380 --> 00:19:56.580
Preston, you've got a lot of comments


00:19:56.580 --> 00:19:57.860
from the live stream on this one.


00:19:57.860 --> 00:19:59.180
Henry Schreider says,


00:19:59.180 --> 00:20:00.180
"I love Knox.


00:20:00.180 --> 00:20:04.500
"Tox is mired in backwards compatibility defaults.


00:20:04.500 --> 00:20:06.820
"It is hard to tell what's actually doing,


00:20:06.820 --> 00:20:07.800
"whereas Knox is simple.


00:20:07.800 --> 00:20:09.840
"It doesn't hide or guess stuff.


00:20:09.840 --> 00:20:11.660
"It's just programmed like pytest."


00:20:11.660 --> 00:20:12.660
Which sounds great.


00:20:12.660 --> 00:20:15.540
Sam Morley says,


00:20:15.540 --> 00:20:17.940
"This is the only way to write a makefile."


00:20:17.940 --> 00:20:20.180
(laughing)


00:20:20.180 --> 00:20:23.960
- I mean, I had that one.


00:20:23.960 --> 00:20:26.420
- Yeah.


00:20:26.420 --> 00:20:28.440
Henry also says the PyPA projects


00:20:28.440 --> 00:20:30.400
have some very powerful Knox files,


00:20:30.400 --> 00:20:35.120
CI build, wheel, pip and so on, which is good.


00:20:35.120 --> 00:20:38.260
And then Sam Morley also has a question for you.


00:20:38.260 --> 00:20:41.180
Can it also Knox run external tools,


00:20:41.180 --> 00:20:44.340
for example, build a C extension or run a C test suite?


00:20:44.340 --> 00:20:47.580
- Oh, I don't know, Brian.


00:20:47.580 --> 00:20:49.020
- I don't know that either.


00:20:49.020 --> 00:20:55.420
- It definitely can because Python has sub process,


00:20:55.420 --> 00:20:59.180
but can it do it without you forcing that into it?


00:20:59.180 --> 00:21:00.680
But you could put technically,


00:21:00.680 --> 00:21:04.860
Python call this other command, right?


00:21:04.860 --> 00:21:08.180
- Well, there's an example in the tutorial


00:21:08.180 --> 00:21:10.340
of calling CMake.


00:21:10.340 --> 00:21:11.620
- Yeah, I saw the CMake as well.


00:21:11.620 --> 00:21:13.060
So that probably counts, right?


00:21:13.060 --> 00:21:14.000
- Yeah.


00:21:14.000 --> 00:21:15.200
- Yeah, I think that would count.


00:21:15.200 --> 00:21:17.180
- So it's just running a command.


00:21:17.180 --> 00:21:18.660
- Yeah. - Yeah.


00:21:18.660 --> 00:21:21.900
And then Brian, Brandon out there has a comment for you.


00:21:21.900 --> 00:21:23.060
New lights look great.


00:21:23.060 --> 00:21:25.220
(Brian laughs)


00:21:25.220 --> 00:21:27.860
I actually need to adjust my camera a little bit,


00:21:27.860 --> 00:21:30.120
which is a little bit off on the lights.


00:21:30.120 --> 00:21:30.960
Very cool.


00:21:30.960 --> 00:21:32.220
All right, let's see.


00:21:32.220 --> 00:21:34.420
I think Brian, you got the next one.


00:21:34.420 --> 00:21:35.580
- Oh, okay.


00:21:35.580 --> 00:21:37.860
I forgot what I was talking about.


00:21:37.860 --> 00:21:42.460
Yeah, so I've got the old document there.


00:21:42.460 --> 00:21:44.420
So I've got a couple of things I wanted to talk about.


00:21:44.420 --> 00:21:47.060
So this is one of those extra, extra, extra things,


00:21:47.060 --> 00:21:49.080
but there's just two.


00:21:49.080 --> 00:21:51.660
A couple things around dealing with text.


00:21:51.660 --> 00:21:54.940
And I've been playing with my blog a little bit lately,


00:21:54.940 --> 00:21:58.340
not really writing much, which is a problem,


00:21:58.340 --> 00:22:00.540
but actually dealing with some of the old--


00:22:00.540 --> 00:22:02.740
- Well, what you wrote looks really good now.


00:22:02.740 --> 00:22:03.900
(laughing)


00:22:03.900 --> 00:22:06.980
- Well, I'm doing some automated,


00:22:06.980 --> 00:22:09.300
trying to automate some of the parsing


00:22:09.300 --> 00:22:10.140
of some of the old stuff.


00:22:10.140 --> 00:22:15.140
So I grabbed a whole bunch of blog posts from WordPress,


00:22:15.260 --> 00:22:19.180
And which, yeah, you can, nobody needs to throw eggs at me.


00:22:19.180 --> 00:22:22.820
I'm already switching and using Hugo now.


00:22:22.820 --> 00:22:25.260
But I've got a whole bunch of files


00:22:25.260 --> 00:22:27.700
that I automatically generate a markdown files,


00:22:27.700 --> 00:22:29.700
but there's problems with them.


00:22:29.700 --> 00:22:31.540
So I have to keep track of them.


00:22:31.540 --> 00:22:33.180
So I've got some scripts.


00:22:33.180 --> 00:22:35.820
So a couple of tools are helping me.


00:22:35.820 --> 00:22:38.940
Python front matter is a really pretty,


00:22:38.940 --> 00:22:41.960
it's a package that's, it's just a really small package,


00:22:41.960 --> 00:22:46.520
but all it does is really takes like YAML style


00:22:46.520 --> 00:22:52.280
front matter stuff and parses those,


00:22:52.280 --> 00:22:53.320
you could just load it.


00:22:53.320 --> 00:22:55.680
So you load, I'm using a markdown files,


00:22:55.680 --> 00:22:57.820
the example shows a text file.


00:22:57.820 --> 00:23:02.320
And you can get at all the pieces of the file,


00:23:02.320 --> 00:23:05.120
like the content and stuff, but for instance,


00:23:05.120 --> 00:23:08.960
I can grab the title, you can look at what the keys are.


00:23:08.960 --> 00:23:13.960
But so for blog posts, I've got tags and the date,


00:23:13.960 --> 00:23:18.800
and it's all converted to Python objects.


00:23:18.800 --> 00:23:23.800
So if I have a date listed in a blog post,


00:23:23.800 --> 00:23:27.000
it'll show up as a date time object.


00:23:27.000 --> 00:23:29.720
So, and you can do math on it and all sorts of stuff.


00:23:29.720 --> 00:23:31.640
So this is pretty cool.


00:23:31.640 --> 00:23:34.740
It's really small, but super handy for what I need.


00:23:34.740 --> 00:23:35.760
So this is good.


00:23:35.760 --> 00:23:37.020
- Yeah, this looks nice.


00:23:38.160 --> 00:23:40.000
The other tool I wanted to talk about,


00:23:40.000 --> 00:23:42.700
which is even a tinier use case, I think,


00:23:42.700 --> 00:23:46.580
is called FTFY, fixes text for you.


00:23:46.580 --> 00:23:51.680
And really it just takes bad Unicode conversions


00:23:51.680 --> 00:23:52.960
and makes them good.


00:23:52.960 --> 00:23:57.080
So it takes like common problems with Unicode conversions


00:23:57.080 --> 00:23:58.560
and fixes them.


00:23:58.560 --> 00:24:03.040
- Where it looks like you have Greek or Russian letters


00:24:03.040 --> 00:24:05.040
or something instead of a space or apostrophe


00:24:05.040 --> 00:24:06.520
or something like that?


00:24:06.520 --> 00:24:09.240
- Yeah, like the first example, a quick example,


00:24:09.240 --> 00:24:12.800
there's like, yeah, like this weird AE character,


00:24:12.800 --> 00:24:15.040
and really it was intended to be a check mark.


00:24:15.040 --> 00:24:19.160
So it just converted it to the proper what it was.


00:24:19.160 --> 00:24:21.600
I'm not sure how it's doing this, but it's pretty neat.


00:24:21.600 --> 00:24:22.600
- That is very cool.


00:24:22.600 --> 00:24:26.080
- This gets me all the time.


00:24:26.080 --> 00:24:27.940
If stuff like goes from Word,


00:24:27.940 --> 00:24:30.800
if I'm converting from Word or something,


00:24:30.800 --> 00:24:34.200
or copy and pasting or other things,


00:24:34.200 --> 00:24:36.940
there's a lot of different quote marks


00:24:36.940 --> 00:24:38.760
that word processors put in


00:24:38.760 --> 00:24:43.420
and like it just ends up being gross in a lot of places.


00:24:43.420 --> 00:24:46.120
And having that converted to just,


00:24:46.120 --> 00:24:50.600
one example is the Mona Lisa doesn't have eyebrows,


00:24:50.600 --> 00:24:53.720
but instead of the just apostrophe T,


00:24:53.720 --> 00:24:57.280
it's this weird, ugly, big Unicode thing.


00:24:57.280 --> 00:25:00.360
Yeah, so just replacing that


00:25:00.360 --> 00:25:02.720
with an apostrophe is a good idea.


00:25:02.720 --> 00:25:03.620
- Yeah, nice.


00:25:03.620 --> 00:25:05.680
Does it change single quotes to double quotes


00:25:05.680 --> 00:25:07.180
and stuff like that as well?


00:25:07.180 --> 00:25:08.800
(laughing)


00:25:08.800 --> 00:25:10.060
- I don't know.


00:25:10.060 --> 00:25:13.960
- I don't know if it should either.


00:25:13.960 --> 00:25:14.800
I am not sure.


00:25:14.800 --> 00:25:18.460
Yeah, this is cool.


00:25:18.460 --> 00:25:20.720
So you just run this across like your markdown files


00:25:20.720 --> 00:25:22.000
or something like that?


00:25:22.000 --> 00:25:24.760
- Yeah, so I'm not using it really for the blog stuff,


00:25:24.760 --> 00:25:27.480
but there was some other text parsing I was doing


00:25:27.480 --> 00:25:30.120
where I was scraping some information from somewhere


00:25:30.120 --> 00:25:32.400
And it just was just gross.


00:25:32.400 --> 00:25:36.600
Had a bunch of gross Unicode stuff in it.


00:25:36.600 --> 00:25:39.100
And I just wanted to, you know,


00:25:39.100 --> 00:25:41.840
have something easy to just convert it quickly.


00:25:41.840 --> 00:25:43.480
And this does the trick.


00:25:43.480 --> 00:25:46.280
- Very cool.


00:25:46.280 --> 00:25:47.720
Nice one, nice finds.


00:25:47.720 --> 00:25:49.120
So I'd follow up on that.


00:25:49.120 --> 00:25:52.240
I was playing with my, oh my Posh shell


00:25:52.240 --> 00:25:53.720
and the new Windows terminal


00:25:53.720 --> 00:25:57.560
and the new Windows PowerShell on Windows 11.


00:25:57.560 --> 00:26:01.540
earlier this week trying to set up some testing over there.


00:26:01.540 --> 00:26:03.900
And I found they have all these cool themes


00:26:03.900 --> 00:26:05.340
that show you all kinds of neat stuff.


00:26:05.340 --> 00:26:09.100
So you can see like the Git branch you're on


00:26:09.100 --> 00:26:10.700
and they've got these little cool arrows


00:26:10.700 --> 00:26:12.000
and all these colors.


00:26:12.000 --> 00:26:13.820
And they'll even do certain things


00:26:13.820 --> 00:26:15.220
for like showing the version


00:26:15.220 --> 00:26:18.220
of the Python virtual environment that's active


00:26:18.220 --> 00:26:20.760
in the prompt and stuff like that.


00:26:20.760 --> 00:26:22.220
If you activate the virtual environment


00:26:22.220 --> 00:26:23.940
and all that had a bunch of weird blocks


00:26:23.940 --> 00:26:26.000
and like squiggly junk like that.


00:26:26.000 --> 00:26:28.040
And so it's not exactly the same problem.


00:26:28.040 --> 00:26:29.480
I'm gonna talk more about this later,


00:26:29.480 --> 00:26:32.280
but I found that there's this place called Nerd Fonts.


00:26:32.280 --> 00:26:36.000
And apparently Posh Shell is tested on Nerd Fonts,


00:26:36.000 --> 00:26:41.000
but Nerd Fonts is full of all these amazing developer fonts


00:26:41.000 --> 00:26:44.040
that have font ligatures and all sorts of cool stuff.


00:26:44.040 --> 00:26:44.880
And they're all free.


00:26:44.880 --> 00:26:47.320
There's like 50 developer fonts


00:26:47.320 --> 00:26:48.680
and terminal fonts and stuff.


00:26:48.680 --> 00:26:52.360
So yeah, one more thing along those lines to check out.


00:26:52.360 --> 00:26:53.200
Very neat.


00:26:55.160 --> 00:26:58.280
But what I wanted to talk about is stealing this idea


00:26:58.280 --> 00:27:01.640
from Prason that he was gonna cover, but I got to it.


00:27:01.640 --> 00:27:02.920
Got to it before.


00:27:02.920 --> 00:27:07.520
So there's this new project that recently


00:27:07.520 --> 00:27:08.440
is making traction.


00:27:08.440 --> 00:27:10.820
It's been around for a couple of months,


00:27:10.820 --> 00:27:12.840
even I guess it's about two years old, honestly,


00:27:12.840 --> 00:27:15.480
but somehow it got discovered


00:27:15.480 --> 00:27:20.280
and is now getting some traction called MPIRE, M-P-I-R-E.


00:27:20.280 --> 00:27:22.640
And the idea is it's a Python package


00:27:22.640 --> 00:27:24.920
for easy multi-processing.


00:27:24.920 --> 00:27:27.080
It's like the multiprocessing module,


00:27:27.080 --> 00:27:28.800
but faster, better, stronger.


00:27:28.800 --> 00:27:30.920
It's like the bionic one.


00:27:30.920 --> 00:27:35.920
So the acronym stands for multiprocessing is really easy.


00:27:35.920 --> 00:27:38.080
I love that thought.


00:27:38.080 --> 00:27:39.840
And it primarily works around


00:27:39.840 --> 00:27:43.180
taking multiprocessing pools,


00:27:43.180 --> 00:27:45.700
but then adding on some features


00:27:45.700 --> 00:27:47.080
that make it more efficient.


00:27:47.080 --> 00:27:50.040
For example, instead of creating a clone,


00:27:50.040 --> 00:27:52.220
a copy of every object that gets shared


00:27:52.220 --> 00:27:53.600
across all the multiprocessing,


00:27:53.600 --> 00:27:55.680
it'll actually do copy on write.


00:27:55.680 --> 00:27:58.480
So it won't make a copy of the objects you're just reading,


00:27:58.480 --> 00:28:00.840
it'll only make a copy of the ones you're changing.


00:28:00.840 --> 00:28:03.000
So if you start like 10 sub processes,


00:28:03.000 --> 00:28:06.360
you might not have to make copies, 10 copies of that,


00:28:06.360 --> 00:28:08.240
which can make it faster.


00:28:08.240 --> 00:28:10.520
It comes with cool like progress bar functionality


00:28:10.520 --> 00:28:13.800
and insight to how much progress it's made.


00:28:13.800 --> 00:28:15.240
It's also supposed to be faster,


00:28:15.240 --> 00:28:17.040
I'll talk about in a second,


00:28:17.040 --> 00:28:19.480
but it has map, map unordered,


00:28:19.480 --> 00:28:22.080
and things like that, iterative maps.


00:28:22.080 --> 00:28:25.720
The copy on right I talked about, which is cool.


00:28:25.720 --> 00:28:28.480
Each worker has its own state


00:28:28.480 --> 00:28:31.500
and some like startup shutdown type of behaviors


00:28:31.500 --> 00:28:32.360
you can add to it.


00:28:32.360 --> 00:28:36.320
It has integration with TQDM, the progress bar.


00:28:36.320 --> 00:28:39.160
What else does it have?


00:28:39.160 --> 00:28:40.680
Like I said, some insights.


00:28:40.680 --> 00:28:43.080
It has user-friendly exception handling,


00:28:43.080 --> 00:28:44.960
which is pretty awesome.


00:28:44.960 --> 00:28:47.120
You can also do automatic chunking


00:28:47.120 --> 00:28:51.920
to break up blocks of queues across sub-processes


00:28:51.920 --> 00:28:55.400
and multiprocessing, including NumPy arrays.


00:28:55.400 --> 00:28:57.960
You can adjust the maximum number of tasks


00:28:57.960 --> 00:29:00.300
or restart them after a certain number,


00:29:00.300 --> 00:29:02.300
restart the worker processes


00:29:02.300 --> 00:29:03.960
after a certain amount of work.


00:29:03.960 --> 00:29:05.680
So in case there's like a memory leak


00:29:05.680 --> 00:29:06.980
or it's just hasn't cleaned it up,


00:29:06.980 --> 00:29:09.320
you can sort of work on that.


00:29:09.320 --> 00:29:12.400
You can create pools of these workers


00:29:12.400 --> 00:29:13.480
with like a daemon option.


00:29:13.480 --> 00:29:16.720
So they're just up and running and they grab the work.


00:29:16.720 --> 00:29:17.800
Let's see.


00:29:18.640 --> 00:29:23.640
can be pinned to a specific CPU or a range of CPUs,


00:29:23.640 --> 00:29:29.400
which can be useful for cache invalidation.


00:29:29.400 --> 00:29:31.800
So if you're getting a lot of like thrashing


00:29:31.800 --> 00:29:33.320
and moving across different CPUs,


00:29:33.320 --> 00:29:36.080
then the caches have to read different data,


00:29:36.080 --> 00:29:38.160
which is of course way, way, way slower.


00:29:38.160 --> 00:29:41.820
So a bunch of neat things, I'll show you a quick example.


00:29:41.820 --> 00:29:44.220
So in the docs, if you pull their page up,


00:29:44.220 --> 00:29:46.400
there's a multiprocessing example.


00:29:46.400 --> 00:29:49.820
So you write a function and then you say with pool processes


00:29:49.820 --> 00:29:51.740
equals five as pool, pool.map,


00:29:51.740 --> 00:29:53.740
and give the function and the data,


00:29:53.740 --> 00:29:56.260
interval and it runs each one through there.


00:29:56.260 --> 00:29:59.740
With the Empire one, it's quite simple, similar.


00:29:59.740 --> 00:30:02.380
You just create a Empire worker pool


00:30:02.380 --> 00:30:04.860
and you specify the number of jobs.


00:30:04.860 --> 00:30:06.580
It says the difference of the code are small,


00:30:06.580 --> 00:30:08.980
you don't have to relearn anything,


00:30:08.980 --> 00:30:11.300
but you get things like all the stuff I talked about,


00:30:11.300 --> 00:30:13.180
the more efficient shared objects,


00:30:13.180 --> 00:30:14.980
the progress bar if you want,


00:30:14.980 --> 00:30:17.100
you can just say progress bar equals true


00:30:17.100 --> 00:30:20.960
and you automatically get a cool little TQDM progress bar.


00:30:20.960 --> 00:30:26.900
You get startup and shutdown methods for the workers


00:30:26.900 --> 00:30:28.620
so you can like initialize them


00:30:28.620 --> 00:30:30.260
and what else you need to do.


00:30:30.260 --> 00:30:32.640
So yeah, pretty cool little project


00:30:32.640 --> 00:30:35.180
and the benchmarks show it down here at the bottom


00:30:35.180 --> 00:30:36.140
in the fast area.


00:30:36.140 --> 00:30:37.940
So you all can check that out.


00:30:37.940 --> 00:30:40.020
Brayson, what did you like about this?


00:30:41.080 --> 00:30:45.660
- Well, I think it's also gonna transition really well


00:30:45.660 --> 00:30:48.780
to the other topic that I have is,


00:30:48.780 --> 00:30:52.480
I like when one create an API


00:30:52.480 --> 00:30:56.200
that you can just easily plug to your existing code.


00:30:56.200 --> 00:30:57.040
- Yeah.


00:30:57.040 --> 00:30:58.800
- So you can just import this as this


00:30:58.800 --> 00:31:00.460
and do not change the entire code


00:31:00.460 --> 00:31:01.760
and then it take care of that, you know,


00:31:01.760 --> 00:31:03.840
like writing your code in a way


00:31:03.840 --> 00:31:06.600
that one can just plug and play.


00:31:06.600 --> 00:31:08.120
That's the amazing thing.


00:31:08.120 --> 00:31:11.680
So it's easy that you don't have to relearn a lot of stuff,


00:31:11.680 --> 00:31:13.620
but it just gives you the power that you need.


00:31:13.620 --> 00:31:16.580
So this is why we moved to this one.


00:31:16.580 --> 00:31:19.780
So we gain the power without changing much of our code.


00:31:19.780 --> 00:31:22.380
- Yeah, yeah, definitely.


00:31:22.380 --> 00:31:23.600
I love that as well.


00:31:23.600 --> 00:31:28.060
You know, I think of like HTTPX and requests for a while


00:31:28.060 --> 00:31:30.500
and I think they diverged at some point, but yeah.


00:31:30.500 --> 00:31:35.020
Let's see some feedback from audience real quick.


00:31:35.020 --> 00:31:36.420
If I'll jump back to the nerd fonts,


00:31:36.420 --> 00:31:38.180
Chris says they're amazing.


00:31:38.180 --> 00:31:39.540
Henry Schreiner says,


00:31:39.540 --> 00:31:42.980
"Fish shell plus Fisher plus oh my fish."


00:31:42.980 --> 00:31:43.820
And then the theme,


00:31:43.820 --> 00:31:48.100
"Bob the fish plus Sauce Code Pro Nerd font" is fantastic.


00:31:48.100 --> 00:31:49.300
Oh my gosh.


00:31:49.300 --> 00:31:50.140
I have no idea.


00:31:50.140 --> 00:31:52.100
I haven't told you. - These are great names.


00:31:52.100 --> 00:31:54.380
- Henry, you're gonna send me on a serious rattle.


00:31:54.380 --> 00:31:56.780
I'm gonna be losing like the rest of the day


00:31:56.780 --> 00:31:59.220
to just fiddle with that, I'm afraid.


00:31:59.220 --> 00:32:01.940
- Well, I keep on missing my terminal


00:32:01.940 --> 00:32:04.340
every time I start fiddling around, right?


00:32:04.340 --> 00:32:05.460
So, - That's right.


00:32:05.460 --> 00:32:07.940
because I'm using a, you know,


00:32:07.940 --> 00:32:10.620
we sell Windows subsystem Linux, right?


00:32:10.620 --> 00:32:13.780
So whenever I fix something, then I get it right.


00:32:13.780 --> 00:32:16.500
And before I know it, I broke it again.


00:32:16.500 --> 00:32:19.180
So, but yeah, it looks really awesome.


00:32:19.180 --> 00:32:20.580
- Yeah, fantastic.


00:32:20.580 --> 00:32:23.980
And then on topic was most recently talking about


00:32:23.980 --> 00:32:26.660
Chris Mace's, whoa, empire looks nice.


00:32:26.660 --> 00:32:30.660
Alvaro asked, will it help to get logging working


00:32:30.660 --> 00:32:32.340
in multi-processing?


00:32:32.340 --> 00:32:34.900
I don't know that it'll make any change.


00:32:34.900 --> 00:32:36.900
I mean, it really is mostly still multi-processing,


00:32:36.900 --> 00:32:38.680
so probably not.


00:32:38.680 --> 00:32:40.160
Yeah, yeah, very cool.


00:32:40.160 --> 00:32:44.880
All right, Precyn, I think you got the last one here.


00:32:44.880 --> 00:32:45.920
- Yes, yes, yes.


00:32:45.920 --> 00:32:49.280
So I have this awesome tool here.


00:32:49.280 --> 00:32:52.280
Like it's called Scotch.


00:32:52.280 --> 00:32:56.880
It's really like a mixture of scikit-learn and touch.


00:32:56.880 --> 00:32:59.920
This is really, really cool bit,


00:32:59.920 --> 00:33:03.040
whereas we were talking about having a building an API


00:33:03.040 --> 00:33:05.260
that it's easy to integrate.


00:33:05.260 --> 00:33:08.100
So if someone already knows Scikit-learn


00:33:08.100 --> 00:33:10.460
and a bit of Torch,


00:33:10.460 --> 00:33:13.420
then you don't really need to learn anything in this tool


00:33:13.420 --> 00:33:16.260
because everything just fits in together.


00:33:16.260 --> 00:33:20.940
So basically, when you're using Scikit-learn,


00:33:20.940 --> 00:33:23.780
so if you are not familiar with Scikit-learn,


00:33:23.780 --> 00:33:25.980
it's just this, what we call it,


00:33:25.980 --> 00:33:29.860
the must-have toolkit for data scientists,


00:33:29.860 --> 00:33:33.460
because here they have created a really good tool


00:33:33.460 --> 00:33:35.180
with a really good API,


00:33:35.180 --> 00:33:37.540
where you can build an entire pipeline


00:33:37.540 --> 00:33:42.540
from cleaning your data to building interesting models


00:33:42.540 --> 00:33:45.260
and everything like that.


00:33:45.260 --> 00:33:49.140
But the biggest problem which we've been keep on experiencing


00:33:49.140 --> 00:33:50.820
when working with Scikit-learn


00:33:50.820 --> 00:33:53.620
is when it comes to neural networks,


00:33:53.620 --> 00:33:55.460
that you really don't have a lot of power


00:33:55.460 --> 00:33:57.260
to customize your networks


00:33:57.260 --> 00:33:58.800
in the way that you will,


00:33:58.800 --> 00:34:03.840
like it's very limited with this input


00:34:03.840 --> 00:34:06.100
that you already have here.


00:34:06.100 --> 00:34:08.580
And in most cases, someone says,


00:34:08.580 --> 00:34:12.860
"Well, just create your own neural network classifier


00:34:12.860 --> 00:34:17.220
"or a regressor and then wrap it in the scikit-learn wrapper."


00:34:17.220 --> 00:34:20.420
But then, ooh, sometimes one does not want to do that.


00:34:20.420 --> 00:34:24.940
But nice thing is another guys just came up


00:34:26.180 --> 00:34:29.300
with this project, which is really, really neat.


00:34:29.300 --> 00:34:34.300
So basically it's just, I think mostly I will just go


00:34:34.300 --> 00:34:38.020
about maybe I should shamelessly show you an example


00:34:38.020 --> 00:34:43.020
in one of my gifs, which is,


00:34:43.020 --> 00:34:47.500
I know this is a shameless way to do,


00:34:47.500 --> 00:34:50.860
but it's easier like giving a demo on how it works, right?


00:34:50.860 --> 00:34:53.220
So like, if you're using scikit-learn,


00:34:53.220 --> 00:34:55.580
you are very familiar with all these other tools


00:34:55.580 --> 00:34:58.180
that someone needs to have like the way to split your data,


00:34:58.180 --> 00:34:59.260
et cetera, et cetera.


00:34:59.260 --> 00:35:00.100
But then--


00:35:00.100 --> 00:35:01.700
- The pipeline and the--


00:35:01.700 --> 00:35:03.260
- The pipelines and all the stuff.


00:35:03.260 --> 00:35:04.100
- Yeah, okay.


00:35:04.100 --> 00:35:06.140
- But the coolest thing is instead of using


00:35:06.140 --> 00:35:08.460
one of the scikit-learn models,


00:35:08.460 --> 00:35:12.700
you can create your own custom neural net, right?


00:35:12.700 --> 00:35:15.220
So this will be like a neural network where we decided


00:35:15.220 --> 00:35:19.860
what, how many nodes we want in the first layer,


00:35:19.860 --> 00:35:22.100
how many nodes do we want in the second layer.


00:35:22.100 --> 00:35:25.940
And here we can build as many interesting net


00:35:25.940 --> 00:35:27.100
as we see fit, right?


00:35:27.100 --> 00:35:30.940
And then basically here, we just do the calling of it.


00:35:30.940 --> 00:35:35.940
So this is very standard PyTorch way of creating your net.


00:35:35.940 --> 00:35:39.420
The awesome part is that now this net,


00:35:39.420 --> 00:35:41.520
forgetting about all this process,


00:35:41.520 --> 00:35:43.860
we can see it, so we just create this net,


00:35:43.860 --> 00:35:45.100
wrap it up like this,


00:35:45.100 --> 00:35:48.060
and now we are using it as part of our pipeline.


00:35:48.060 --> 00:35:51.580
So you can see, I will just go down right here.


00:35:51.580 --> 00:35:55.480
So I am having my preprocessor scikit-learn-ish


00:35:55.480 --> 00:35:57.000
and I'm having my net.


00:35:57.000 --> 00:36:00.440
And the coolest thing is now I just call this thing


00:36:00.440 --> 00:36:02.380
as I will do with any scikit-learn model


00:36:02.380 --> 00:36:05.880
with my classifier.fit this


00:36:05.880 --> 00:36:09.880
and later I will do my classifier.predict these things.


00:36:09.880 --> 00:36:12.240
So this example is we're trying to predict


00:36:12.240 --> 00:36:17.240
the species of penguin given the data that we have.


00:36:17.240 --> 00:36:20.360
So this whole thing is really, really cool


00:36:20.360 --> 00:36:24.880
because it obscure the whole files of,


00:36:24.880 --> 00:36:28.920
when you do it in PyTorch, pure PyTorch,


00:36:28.920 --> 00:36:30.560
you will have to write this full loop


00:36:30.560 --> 00:36:33.600
with optimizer, stepping up, stepping down,


00:36:33.600 --> 00:36:34.440
all these things.


00:36:34.440 --> 00:36:38.640
But here, just transforming to the scikit-learn world,


00:36:38.640 --> 00:36:42.360
where you'll just do fit, which just train your model,


00:36:42.360 --> 00:36:43.720
and now you can just do predict


00:36:43.720 --> 00:36:48.080
as if you're predicting any other scikit-learn tool.


00:36:48.080 --> 00:36:53.080
So, so Scotch is a really, really tool that just does that.


00:36:53.080 --> 00:36:58.860
So it allow you to connect your touch net


00:36:58.860 --> 00:37:00.420
with the scikit-learn pipeline.


00:37:00.420 --> 00:37:02.860
So this is a really, really awesome.


00:37:02.860 --> 00:37:05.560
So I would just encourage people to take a look at it.


00:37:05.560 --> 00:37:10.340
- I love the idea of it, that basically you were,


00:37:10.340 --> 00:37:12.480
you can create these PyTorch models


00:37:12.480 --> 00:37:14.100
and do what you need to do to set them up


00:37:14.100 --> 00:37:15.660
and then just hand them off


00:37:15.660 --> 00:37:17.980
to the rest of the scikit-learn world.


00:37:17.980 --> 00:37:20.620
And I can see some really interesting uses for this.


00:37:20.620 --> 00:37:22.620
Like I've got some library


00:37:22.620 --> 00:37:24.900
and it can either integrate with PyTorch


00:37:24.900 --> 00:37:27.020
or it can integrate with scikit-learn


00:37:27.020 --> 00:37:29.580
and it just uses this little wrapper to pass it around.


00:37:29.580 --> 00:37:31.220
I like it.


00:37:31.220 --> 00:37:32.060
- Yeah, yeah.


00:37:32.060 --> 00:37:33.380
So just for me, it's like,


00:37:33.380 --> 00:37:35.580
it just gives me this ability to create this


00:37:35.580 --> 00:37:41.540
more extended algorithms


00:37:41.540 --> 00:37:44.900
and then just continue using my scikit-learn


00:37:44.900 --> 00:37:49.900
my scikit pipelines.


00:37:49.900 --> 00:37:51.140
So that's the coolest thing,


00:37:51.140 --> 00:37:53.000
that I don't have to change my code


00:37:53.000 --> 00:37:54.920
because I just want to replace one line


00:37:54.920 --> 00:37:56.060
and that is the model.


00:37:56.060 --> 00:37:58.540
So I get the model from Scotch


00:37:58.540 --> 00:38:00.780
and then pass it in my ordinary,


00:38:00.780 --> 00:38:02.860
something like logistical regression instead.


00:38:02.860 --> 00:38:04.180
Now I'm using a net.


00:38:04.180 --> 00:38:06.980
- Love it.


00:38:06.980 --> 00:38:08.140
- Nice. - Brian, what do you think?


00:38:08.140 --> 00:38:09.540
You like this pattern?


00:38:09.540 --> 00:38:10.360
- Yeah, I do.


00:38:10.360 --> 00:38:13.260
I like the pattern of being able to use,


00:38:13.260 --> 00:38:15.940
not have to change your entire tool chain


00:38:15.940 --> 00:38:19.220
just to change one piece.


00:38:19.220 --> 00:38:20.380
Nice and clean. - Yeah.


00:38:20.380 --> 00:38:23.740
Like it as well.


00:38:23.740 --> 00:38:27.220
So that's it for our main items.


00:38:27.220 --> 00:38:28.060
Brian, I've got one.


00:38:28.060 --> 00:38:31.420
I feel like I should have let you have this one,


00:38:31.420 --> 00:38:33.020
but I grabbed this little extra thing


00:38:33.020 --> 00:38:33.860
I wanted to throw out there


00:38:33.860 --> 00:38:35.580
'cause I thought it would make you happy.


00:38:35.580 --> 00:38:37.540
- Neat, can't wait.


00:38:37.540 --> 00:38:40.780
- Yeah, so Marco Gorelli,


00:38:42.940 --> 00:38:43.940
sent over this thing and said,


00:38:43.940 --> 00:38:46.780
if you wanna work in JupyterLab, right?


00:38:46.780 --> 00:38:48.580
I know that one of your requirements


00:38:48.580 --> 00:38:50.620
for working with tools and shells and stuff


00:38:50.620 --> 00:38:52.420
is that they're Vim-ish.


00:38:52.420 --> 00:38:55.340
You can do Vim keyboard things to it.


00:38:55.340 --> 00:38:56.380
- I'm excited.


00:38:56.380 --> 00:39:00.240
- Yeah, so he sent in this thing called JupyterLab-Vim,


00:39:00.240 --> 00:39:02.980
which is Vim notebook cell bindings for JupyterLab.


00:39:02.980 --> 00:39:05.240
So if you're editing a notebook cell,


00:39:05.240 --> 00:39:09.100
you can do all of your magic Vim keys


00:39:09.100 --> 00:39:12.700
to make all the various changes and whatnot


00:39:12.700 --> 00:39:13.540
that you want.


00:39:13.540 --> 00:39:15.380
So yeah, cool.


00:39:15.380 --> 00:39:16.220
What do you think?


00:39:16.220 --> 00:39:18.100
- I'm definitely gonna try this.


00:39:18.100 --> 00:39:18.940
Yes.


00:39:18.940 --> 00:39:20.020
- Yeah, awesome.


00:39:20.020 --> 00:39:21.420
All right, let's see what else do I have.


00:39:21.420 --> 00:39:25.540
I got, oh yeah, this, nevermind my picture.


00:39:25.540 --> 00:39:27.100
I didn't really intend to put that up there,


00:39:27.100 --> 00:39:29.580
but I just wanna point out that I'm gonna be speaking


00:39:29.580 --> 00:39:32.060
and the reason the picture's there is the conference,


00:39:32.060 --> 00:39:35.260
the Pi Bay conference that's running next month.


00:39:35.260 --> 00:39:38.060
They featured my talk that I'm doing,


00:39:38.060 --> 00:39:39.160
so that's why there's a picture of me.


00:39:39.160 --> 00:39:42.180
But the Pi Bay 2021 food truck edition,


00:39:42.180 --> 00:39:47.180
they have rented out an entire like food cartopia type place


00:39:47.180 --> 00:39:51.940
with a bunch of these pods and having a conference outdoors


00:39:51.940 --> 00:39:55.500
and putting up multimedia like TVs and stuff for each pod.


00:39:55.500 --> 00:39:58.540
So even if you're not at the, like a great line of sight,


00:39:58.540 --> 00:39:59.900
you can still see the live talks,


00:39:59.900 --> 00:40:03.060
but sit outside and drink and eat food cart food


00:40:03.060 --> 00:40:04.780
in California, sounds fun.


00:40:04.780 --> 00:40:06.280
So I'm gonna be talking about,


00:40:06.280 --> 00:40:09.100
what did I say my title of my talk was?


00:40:09.100 --> 00:40:10.860
It's gonna be HTMX plus Flask,


00:40:10.860 --> 00:40:13.060
modern Python web apps hold the JavaScript.


00:40:13.060 --> 00:40:15.700
So I'm looking forward to giving that talk in there.


00:40:15.700 --> 00:40:18.620
So people, if they're generally in that area,


00:40:18.620 --> 00:40:20.360
they might want to check that out.


00:40:20.360 --> 00:40:23.100
- I might, that just sounds fun.


00:40:23.100 --> 00:40:25.400
- Yeah. Yes, indeed.


00:40:25.400 --> 00:40:27.740
All right. That's it for my extra items.


00:40:27.740 --> 00:40:29.160
You got any extras, Brian?


00:40:29.160 --> 00:40:31.360
- No. How about you, Preston?


00:40:31.360 --> 00:40:34.100
- Yes, I got one.


00:40:34.100 --> 00:40:38.380
I had to actually search if this one has been covered


00:40:38.380 --> 00:40:39.860
and I was surprised that it has not been covered.


00:40:39.860 --> 00:40:41.860
- I don't think it has, what is this?


00:40:41.860 --> 00:40:43.880
- It's, so it's, you know,


00:40:43.880 --> 00:40:46.680
there's something called py.inv.


00:40:46.680 --> 00:40:48.940
So we've been using py.inv to,


00:40:48.940 --> 00:40:51.140
of course, one can say,


00:40:51.140 --> 00:40:53.540
why don't you just use os.inv,


00:40:53.540 --> 00:40:55.000
then get whatever that is,


00:40:55.000 --> 00:40:58.120
why do we need to install another package


00:40:58.120 --> 00:41:00.940
just to get the environment variable or something?


00:41:00.940 --> 00:41:03.200
But this is pretty, pretty neat.


00:41:03.200 --> 00:41:07.040
It's quite recent project, I think,


00:41:07.040 --> 00:41:09.080
and it's rising slowly.


00:41:09.080 --> 00:41:12.800
And there's a lot of contributor and it's, yeah,


00:41:12.800 --> 00:41:14.840
it's very promising.


00:41:14.840 --> 00:41:18.840
So what it does, I think I can just bring it somewhere here.


00:41:18.840 --> 00:41:25.560
It allows you to do all this type convention,


00:41:25.560 --> 00:41:28.340
casting, et cetera, et cetera, right?


00:41:28.340 --> 00:41:31.240
Like you can say, I'm gonna get my debug here


00:41:31.240 --> 00:41:34.440
and then I will set the defaults


00:41:34.440 --> 00:41:36.880
and also I will do the casting here, right?


00:41:36.880 --> 00:41:37.720
So this is really--


00:41:37.720 --> 00:41:39.880
- Right, so when you're reading config files,


00:41:39.880 --> 00:41:41.320
everything is a string and then you're like,


00:41:41.320 --> 00:41:43.520
oh, this one is a date time, so I gotta parse it.


00:41:43.520 --> 00:41:46.000
This one is, oh, I gotta parse it.


00:41:46.000 --> 00:41:46.840
Yeah, okay.


00:41:46.840 --> 00:41:49.800
- Yeah, but it's really even, it's so much that.


00:41:49.800 --> 00:41:51.480
So there's another way where you can say


00:41:51.480 --> 00:41:54.440
from decouple import auto-config.


00:41:54.440 --> 00:41:59.360
So it goes and search where is that .inv file is.


00:41:59.360 --> 00:42:01.060
So otherwise you can just tell


00:42:01.060 --> 00:42:02.500
where the environment variable is.


00:42:02.500 --> 00:42:05.300
But it's just neat.


00:42:05.300 --> 00:42:06.400
It's very simple.


00:42:06.400 --> 00:42:08.860
it does what you want it to do.


00:42:08.860 --> 00:42:11.960
So I will really encourage people to look at it.


00:42:11.960 --> 00:42:16.340
It's, I just, we, I've just changed every places


00:42:16.340 --> 00:42:20.860
where I've been using .inv or OS.inv with this one.


00:42:20.860 --> 00:42:24.100
And it's just helped me clean some


00:42:24.100 --> 00:42:26.000
unnecessary steps in my code.


00:42:26.000 --> 00:42:28.100
- That's pretty cool.


00:42:28.100 --> 00:42:30.740
- Yeah, yeah, great, great idea.


00:42:30.740 --> 00:42:33.100
Definitely check that one out.


00:42:33.100 --> 00:42:36.040
All right, well, I think that's it for all of our items.


00:42:36.040 --> 00:42:38.240
Well, what do you think?


00:42:38.240 --> 00:42:39.800
Should we do a joke?


00:42:39.800 --> 00:42:40.840
- Definitely.


00:42:40.840 --> 00:42:42.640
- I love it 'cause I've almost forgotten what the joke is.


00:42:42.640 --> 00:42:44.400
So it's gonna be new to me as well.


00:42:44.400 --> 00:42:47.400
All right, so the joke is called adoption.


00:42:47.400 --> 00:42:49.920
This comes from monkeyuser.com.


00:42:49.920 --> 00:42:54.440
And you've heard about the Python idea


00:42:54.440 --> 00:42:55.560
of you came for the language,


00:42:55.560 --> 00:42:57.360
but you stayed for the community.


00:42:57.360 --> 00:42:59.800
But what if it is a little bit different?


00:42:59.800 --> 00:43:03.720
What if actually people get brought in unwillingly


00:43:03.720 --> 00:43:05.840
and then they kind of realize they like it.


00:43:05.840 --> 00:43:10.280
So here's a picture of like kind of an open field,


00:43:10.280 --> 00:43:12.640
you know, think Gazelle or something.


00:43:12.640 --> 00:43:14.700
There's a couple of developers just running


00:43:14.700 --> 00:43:16.840
and there's one who is fixated on a butterfly


00:43:16.840 --> 00:43:18.680
who doesn't actually see what's,


00:43:18.680 --> 00:43:21.800
there's a bunch of like a pack of Python developers


00:43:21.800 --> 00:43:22.760
coming to adopt them.


00:43:22.760 --> 00:43:24.200
It says a pack of Python developers


00:43:24.200 --> 00:43:26.800
spotting a junior dev away from its pack,


00:43:26.800 --> 00:43:28.960
initiate their conversion assault.


00:43:28.960 --> 00:43:31.220
(laughing)


00:43:31.220 --> 00:43:33.280
- Yeah.


00:43:33.280 --> 00:43:35.200
- Yeah, silly, silly, silly.


00:43:35.200 --> 00:43:39.140
>> Man, I'm that way even for non-programmers.


00:43:39.140 --> 00:43:42.920
My family just rolls their eyes every time this happens.


00:43:42.920 --> 00:43:48.800
But every time I get somebody young coming over,


00:43:48.800 --> 00:43:52.320
either in college or high school or just out of college,


00:43:52.320 --> 00:43:55.600
I'll say, "So if you haven't done it already,


00:43:55.600 --> 00:43:57.280
no matter what your field is,


00:43:57.280 --> 00:43:59.240
you really should learn how to code.


00:43:59.240 --> 00:44:02.160
While you're at it, why not just choose Python?"


00:44:02.160 --> 00:44:03.720
So I'm trying to make Python developers


00:44:03.720 --> 00:44:05.560
out of every person I meet.


00:44:05.560 --> 00:44:08.760
- I think that's, you do no favor.


00:44:08.760 --> 00:44:10.600
It'll be their superpower


00:44:10.600 --> 00:44:12.720
amongst all their non-developer friends.


00:44:12.720 --> 00:44:19.360
Brian, thanks as always in person.


00:44:19.360 --> 00:44:21.360
Really great to have you on the show this week


00:44:21.360 --> 00:44:22.840
and thanks for being here.


00:44:22.840 --> 00:44:23.720
- Yeah, thank you, Michael.


00:44:23.720 --> 00:44:24.960
Thank you, Brian.


00:44:24.960 --> 00:44:25.800
- Thank you.


00:44:25.800 --> 00:44:26.720
- You bet, bye.


00:44:26.720 --> 00:44:28.200
- Bye.


00:44:28.200 --> 00:44:29.160
- Bye everyone at livestream.


00:44:29.160 --> 00:44:30.000
Thanks for being here.


00:44:30.000 --> 00:44:31.040
Thanks for all the questions.


00:44:31.040 --> 00:44:31.940
See you next time.


00:44:31.940 --> 00:44:41.940
[BLANK_AUDIO]

