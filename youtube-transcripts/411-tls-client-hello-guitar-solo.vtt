WEBVTT

00:00:00.001 --> 00:00:10.080
hey Michael hey everybody good to be back on the show and let's kick it off we got a fun show ahead

00:00:10.080 --> 00:00:16.440
of us today hello and welcome to Python bytes where we deliver Python news and headlines directly to

00:00:16.440 --> 00:00:24.300
your earbuds this is episode 411 recorded for we have the 411 today 411 recorded November 25th

00:00:24.300 --> 00:00:35.360
2024 and I'm Brian Okken and I'm Michael Kennedy and this episode is brought to you by us so we have

00:00:35.360 --> 00:00:40.980
links in the show notes but check out Talk Python Training and python test.com for some courses and

00:00:40.980 --> 00:00:48.760
patreon supporters thank you for sticking it out with us so also we have lots of links in the show

00:00:48.760 --> 00:00:56.600
notes for connecting with us on social media because we've got we've got links for Fostadon

00:00:56.600 --> 00:01:03.080
on Mastodon and also Blue Sky for all of us here we've got Python bytes and Brian Okken and

00:01:03.080 --> 00:01:09.420
M. Kennedy M. Kennedy is at mkennedy.codes so check that out on Blue Sky but all the links are in the

00:01:09.420 --> 00:01:14.440
show notes and thank you everyone for showing up for the live show I love having you guys here and

00:01:14.440 --> 00:01:19.700
commenting and commenting and if you'd like if you're listening later would we thank you also but

00:01:19.700 --> 00:01:26.340
if you'd like to to listen sometimes it's it's usually 10 a.m pacific time sometimes other times

00:01:26.340 --> 00:01:35.540
and you can go to pythonbytes.fm/live to get that and finally if you are listening and you're

00:01:35.540 --> 00:01:44.960
you you wondering about the any link that we cover in the show you can go to our our page the notes page on

00:01:44.960 --> 00:01:52.040
pythonbytes.fm but you can also click on click on the link to get in the newsletter and we'll just send you those

00:01:52.040 --> 00:01:57.540
links right in your email inbox I have two more thoughts in there really quick Brian we haven't talked about this

00:01:57.540 --> 00:02:02.120
before okay I think the newsletter is awesome people seem to be really enjoying it and connecting with it the

00:02:02.120 --> 00:02:08.720
people who are subscribers there but I don't even want to necessarily say this out loud to encourage it

00:02:08.720 --> 00:02:12.720
but if you don't listen to the show you maybe miss one or something you're still going to get those in

00:02:12.720 --> 00:02:16.760
your inbox and you can just peruse through real quick oh look at these two interesting things that

00:02:16.760 --> 00:02:22.860
they found that's number one number two this is also all of the stuff our show notes are super

00:02:22.860 --> 00:02:30.980
detailed and so people put our rs feed rss feed for the podcast into their regular rss reader is real

00:02:30.980 --> 00:02:37.760
similar as well so there's there's reason to add your rss this rss feed to maybe reader or whatever

00:02:37.760 --> 00:02:43.380
feed bin or whatever you're using outside of just listening to the podcast that's a great hack I like that

00:02:43.380 --> 00:02:51.480
yeah speaking of hacking you want to talk about hacking yeah you hacked some website I hacked some

00:02:51.480 --> 00:03:01.900
website hard I hacked it hard and python bytes is on the docket to get the same hacking so for as long

00:03:01.900 --> 00:03:07.100
as there has been a talk python and for as long as there's been a python bytes they've been running on

00:03:07.100 --> 00:03:13.180
pyramid the pyramid web framework created by chris mcdonough super cool framework a really really

00:03:13.180 --> 00:03:20.740
love it but the truth is the sad truth is it's just not getting updates these days so if you want to

00:03:20.740 --> 00:03:28.660
do async programming you have to do async programming sometimes it's hard to avoid it it's not supported

00:03:28.660 --> 00:03:36.280
doesn't support types didn't do a lot of things and even though it's great and simple it felt kind of

00:03:36.280 --> 00:03:43.780
like a bit of a liability to be having all of our code written on frameworks that don't really get

00:03:43.780 --> 00:03:51.220
updates so I rewrote talk python first talk python.fm not the courses not by the lights just talk by that

00:03:51.220 --> 00:03:56.800
because it's a medium-sized level of complexity more complex than Python bytes way less complex than the

00:03:56.800 --> 00:04:05.840
course section ecommerce website just to see what how would that go is this a good idea or a bad idea turns out it's a pretty

00:04:05.840 --> 00:04:13.400
pretty awesome idea so I rewrote talk python this is the topic in court and I wrote up a long post of my

00:04:13.400 --> 00:04:19.100
thoughts on it why did I do this what did I consider a lot of people like why didn't you consider framework X

00:04:19.100 --> 00:04:25.400
you're crazy not to consider them like I did consider that and I wrote it down why I didn't end up picking it

00:04:25.400 --> 00:04:32.960
so if people are thinking about changing frameworks here's a nice write-up of an example interview thinking

00:04:32.960 --> 00:04:41.300
about async flask aka court for now until those get merged if they ever get merged it's really cool like for

00:04:41.300 --> 00:04:48.860
for example our database layer is beanie which is pydantic plus MongoDB super awesome it only supports async code

00:04:48.860 --> 00:04:56.600
that's it pyramid only supported synchronous code so I had to write this janky translation layer that would

00:04:56.600 --> 00:05:02.360
like curry every request over to an async thing wait for its response and then turn it back into a sink

00:05:02.360 --> 00:05:09.440
there was like weirdness that was there right and I'm just like could I just not do this you know and

00:05:09.440 --> 00:05:16.760
so I went to solve that technical debt issue that's been dragging around for a long time chose court so a few

00:05:16.760 --> 00:05:24.080
things first of all what did I consider I considered FastAPI Litestar as in Litestar dev super cool

00:05:24.080 --> 00:05:31.280
framework if you wanted if you wanted something like FastAPI but kind of batteries included like Django

00:05:31.280 --> 00:05:37.940
Litestar is the winner lights start was really close FastAPI was a real contender I Django you always

00:05:37.940 --> 00:05:43.220
got to consider Django but decided not to go with that Hugo actually consider like what do you think how much of

00:05:43.220 --> 00:05:48.200
our site do you think we could rewrite and just a static site generator like Hugo I think a lot of it

00:05:48.200 --> 00:05:55.040
yeah I was actually thinking about doing testing code over again in Hugo at some point yeah by the way this

00:05:55.040 --> 00:06:01.460
site that we're looking at here with the blog post this is a sub Hugo site within the court site in

00:06:01.460 --> 00:06:07.220
talk Python by the way I think it's really great but there's certain things like on talk Python there's a

00:06:07.220 --> 00:06:14.060
guest list and there's all the episodes and there's the analytics of who downloaded which episode and

00:06:14.060 --> 00:06:19.100
then who sponsors those different episodes and there's ad dashboard there's like a bunch of stuff

00:06:19.100 --> 00:06:23.540
that's not real obvious when you're looking at from the outside oh it's just like a it's like a blog kind of

00:06:23.540 --> 00:06:29.540
with attachment like it's actually way more complicated on the sort of iceberg part that people don't see

00:06:29.540 --> 00:06:36.920
and I decided not to do that and of course flask which is interesting so anyway I think fast I P API is

00:06:36.920 --> 00:06:42.740
awesome but it's really focused on API's though you can make it work for websites I don't think it's

00:06:42.740 --> 00:06:50.120
primarily the thing for websites right one of my goals here by the way was I want a super popular

00:06:50.120 --> 00:06:57.160
framework I want one where if you say hey I wrote my website in this what what framework did you choose

00:06:57.160 --> 00:07:01.980
there's a real good chance somebody says me too you know and pyramid just as much as I love it didn't

00:07:01.980 --> 00:07:09.420
check that box these days um and I also would have put court in that category except for the fact that

00:07:09.420 --> 00:07:15.020
it's really maintained by the flask people now yes exactly I almost didn't consider court at all and I

00:07:15.020 --> 00:07:21.700
ended up going with it and that's because I talked to David Lord about how it's been brought into the same

00:07:21.700 --> 00:07:27.820
organization as flask they're working like they were both contributing to both there's attempts to sort of

00:07:27.820 --> 00:07:34.600
bring court into flask properly so maybe one day they'll go over and if I change my mind literally all I have

00:07:34.600 --> 00:07:40.560
to do is find and replace lowercase court with lowercase lowercase flask and uppercase flat uh court with

00:07:40.560 --> 00:07:44.620
uppercase flask and it's back to flask right it's a very very small

00:07:44.620 --> 00:07:51.580
you know tie-in you know what I mean so for that reason I felt like court court was worth consideration

00:07:51.580 --> 00:07:58.600
okay so fast api awesome obviously but two api focused same thing for lightstar also not as that

00:07:58.600 --> 00:08:04.080
popular it's more popular than pyramid but it's not it's not in the of course you're using that

00:08:04.080 --> 00:08:09.840
django is awesome I mean it's actually I learned by doing this research going through the

00:08:09.840 --> 00:08:16.800
psf jetbrains python developer survey that if you look at the most popular framework flask is

00:08:16.800 --> 00:08:23.800
like to a decimal point more popular than django but if you look at web developers who use a web framework

00:08:23.800 --> 00:08:34.020
django is more than twice as popular than flask that's pretty interesting right yeah yeah so a lot of

00:08:34.020 --> 00:08:39.860
machine learning models or something running there anyway I go through why I'm not a huge fan of uh

00:08:39.860 --> 00:08:45.300
didn't want to adopt django you can read that up if you care to I think hugo sites will be so neat

00:08:45.300 --> 00:08:51.300
they're like they can't go down technically the data center can go down but there's no runtime

00:08:51.300 --> 00:08:59.460
reason that a static site goes down and that's pretty glorious so uh I did the upgrade in two steps I first said

00:08:59.460 --> 00:09:06.420
let's go and rewrite everything in court but just keep the synchronous code there because one of the

00:09:06.420 --> 00:09:12.980
big challenges is to rewrite the entire stack to be async right and so let's just get it running the way

00:09:12.980 --> 00:09:22.980
it is but on the court framework aka flask not pyramid so that took about a day a little maybe like a long day

00:09:22.980 --> 00:09:28.660
10 hour day or something you know got that bad boy knocked out and then you know that was

00:09:28.660 --> 00:09:38.980
2 280 lines changed 3 000 lines of code deleted for that part that is a a good chunk and then I rewrote it

00:09:38.980 --> 00:09:46.980
in uh async after I got that all tested and deployed like immediately that's another 1600 lines of code

00:09:46.980 --> 00:09:53.220
1700 lines of code change but yeah awesome performance okay so about it about a day to

00:09:53.220 --> 00:09:59.700
to convert to uh court but and then and then you went to async how long yeah i'd say maybe

00:09:59.700 --> 00:10:06.580
eight hours a slightly six six hours six eight hours let's say six hours less less than a hard day like a

00:10:06.580 --> 00:10:16.420
regular day of work okay not a i'm done for the day but yeah i we're talking you know five times faster

00:10:16.420 --> 00:10:21.780
performance that's pretty that's pretty awesome actually that's pretty good yeah it's really really

00:10:21.780 --> 00:10:26.420
nice and i was able to get rid of that and a lot of that like half of that speed is from this

00:10:26.420 --> 00:10:31.940
okay you've got a request send it over to some async background thread that can async run it wait for

00:10:31.940 --> 00:10:37.140
the response okay i got the response stash grab the response back and then send it back over to the

00:10:37.140 --> 00:10:44.580
the sync reverse version to return like all of that coordination added a lot it not a lot of cpu

00:10:44.580 --> 00:10:52.340
pounding overhead but just delays here and there you know what i mean yeah anyway that's it and finally

00:10:52.340 --> 00:10:57.300
if you have a whole bunch of different pages you want to make sure they're not broken the way that i

00:10:57.300 --> 00:11:03.380
tested that most of it wasn't broken was i just went to the sitemap which has a thousand pages in it

00:11:03.380 --> 00:11:08.660
and i just wrote a python program to just request every single url on the sitemap and make sure it

00:11:08.660 --> 00:11:16.900
didn't 404 or 500 or anything like that they all passed push to production let's go so did you already

00:11:16.900 --> 00:11:24.340
have a a list of all the all the links or did you yeah because you generally want a sitemap for seo and

00:11:24.340 --> 00:11:28.660
google and bing and all those things because that's what they use to discover like how much of our site

00:11:28.660 --> 00:11:32.740
can we index and what what might we miss if you're not directly linking to it but you want to make it

00:11:32.740 --> 00:11:40.420
known basically right so over here on the sitemap we've got like you know check out the scroll bar

00:11:40.420 --> 00:11:44.020
right that's it you just grab all the links out of there and exactly so i just hit each one of those

00:11:44.020 --> 00:11:50.500
so they're all so here's here's the one catch one person ran into an issue and they're like oh man i missed

00:11:50.500 --> 00:11:57.700
that one and it's when you submit forms right the page that is shown when something is

00:11:57.700 --> 00:12:03.060
processed and submitted i got one or two errors there one little admin thing that only affected

00:12:03.060 --> 00:12:06.980
me but somebody signed up for the mailing list the mailing list has a page that's special if you sign

00:12:06.980 --> 00:12:13.620
up successfully so thanks and here's a few other things somehow i forgot to check the result of that

00:12:13.620 --> 00:12:17.220
and there was some kind of bug in there that it was easy to fix but hard to discover

00:12:17.220 --> 00:12:24.020
oh links not in the sitemap yeah yeah or they might even be there but you got to do an http post with

00:12:24.020 --> 00:12:28.820
data to discover them not a get because get will show the form but it won't process the form you know

00:12:28.820 --> 00:12:37.780
that's what it was okay i forgot to await something in the resulting post handler basically is what it was

00:12:37.780 --> 00:12:45.620
how nice that you have uh an interactive user base so they could let you know exactly yeah uh century sent me

00:12:45.620 --> 00:12:53.540
a little message that said you know what there's a there's a crash yeah oh okay yeah anyway very cool

00:12:53.540 --> 00:12:59.780
so hopefully you know i kind of want an extra detail because yeah it's it's i think it's just on its own

00:12:59.780 --> 00:13:04.420
it's interesting but i think more so the reason i wanted to cover this is i think it's relevant for

00:13:04.420 --> 00:13:10.660
other people who are like oh you know we are on you know cherry pie and maybe we shouldn't we shouldn't be

00:13:10.660 --> 00:13:16.180
anymore maybe we should pick another one of the top three out of the list like michael did and i don't

00:13:16.180 --> 00:13:22.820
know i'm sure it'll help some people on this journey yeah cool yeah thanks well i want to talk about

00:13:22.820 --> 00:13:30.500
pypi a little bit um pypi uh now so you want to make an attestation about it i don't even know what that word

00:13:30.500 --> 00:13:39.300
means uh but but pypi now supports digital attestation attest attestation yeah okay what does that mean

00:13:39.300 --> 00:13:45.540
uh well i'm not sure what it really means but it's a supply chain thing so uh pypi package maintainers can

00:13:45.540 --> 00:13:52.500
now publish signed digital attestations when publishing in order to further increase trust in the supply chain

00:13:52.500 --> 00:14:00.900
security of their projects that sounds cool um uh additionally there's a new api to uh to new api is

00:14:00.900 --> 00:14:07.940
available for consumers and installers to verify published published attestations oh my god this

00:14:07.940 --> 00:14:16.900
sounds like a lot of work fortunately it's not um so uh if you are a package uh there's this we're going to

00:14:16.900 --> 00:14:24.420
link to the um the python package index blog and this is written by dustin ingram um uh talking about

00:14:24.420 --> 00:14:33.300
this it's uh there's some some discussion about why we did why they didn't do um uh signed identity

00:14:33.300 --> 00:14:42.420
key pair things um but uh the gist is if you are if you're already using github actions and trusted

00:14:42.420 --> 00:14:49.140
publishing and you're using the github action pypi publish uh little hook thing for gav actions

00:14:49.140 --> 00:14:55.540
um it'll just work for you you just need to make sure that there's a the version is i think it's

00:14:55.540 --> 00:15:00.340
well there's another article that i looked at i think it's 11. um let's let's peek over there so

00:15:00.340 --> 00:15:06.740
this other article uh there's another article pypi introduces digital attestation to strengthen pypi

00:15:06.740 --> 00:15:14.180
packaging security uh this is written by sarah gooding um and uh the gist of it here is oh

00:15:14.180 --> 00:15:20.580
yeah version 1.11.0 is the one that you need to use now what if you want to use something else if you

00:15:20.580 --> 00:15:26.340
want if you don't use if you don't like github actions you're using something else well there um there is

00:15:26.340 --> 00:15:32.740
plans for other uh other trusted publisher environments uh are planned and then if you

00:15:32.740 --> 00:15:38.500
don't even want to do that if you want to do it manually it's not recommended but you can uh you can

00:15:38.500 --> 00:15:44.260
do this manually so um you're not locked into github actions it's just i think that was a reasonable

00:15:44.260 --> 00:15:50.180
choice for them to to implement first um you got to have one of them has to be first so that's what they did

00:15:50.180 --> 00:15:56.420
uh like i said there's another article um by sarah gooding also very good it also walks through what

00:15:56.420 --> 00:16:05.940
the um what the viewing the ui for the new api for viewing what the file looks like and that the

00:16:05.940 --> 00:16:11.220
cool thing about this is okay this seems sort of technical and okay like that you know security on

00:16:11.220 --> 00:16:18.420
supply chains and all that yeah yeah yeah but really like who cares well we all care really but also one

00:16:18.420 --> 00:16:24.980
one of the things that i i realized is um there's links on pipe i for projects to say where the

00:16:24.980 --> 00:16:32.420
source code is but we just you just put that there it's not guaranteed to be linking now this is where

00:16:32.420 --> 00:16:40.740
the attestation makes it so that pipe i can verify that the that the object really is from the source code

00:16:40.740 --> 00:16:46.980
from so there is you're not lying like there's nobody in the middle lying about it and and and

00:16:46.980 --> 00:16:51.540
publishing a package that it really isn't from that source code from something else and that's what

00:16:51.540 --> 00:16:57.140
we want we want our open source projects to be available easy to install but also that we can find

00:16:57.140 --> 00:17:04.500
the source code really uh readily available so that's what that's all about there's also a um a cool uh are we

00:17:04.500 --> 00:17:14.980
 PEP 740 yet um that just shows you different different some of the top packages uh let's see the 360 most downloaded packages um and whether or not they're uh you know support or not they're uh you know support or you know that's a lot of the

00:17:14.980 --> 00:17:26.020
uh uh they're not supported uh you know supported uh already but wheel is supported for instance so you can check that out so yeah

00:17:26.020 --> 00:17:33.540
pydantic pydantic good job pydantic people good job pydantic people just had samuel colvin on the show by the

00:17:33.540 --> 00:17:40.100
talk python so people can hear from so from the pydantic folks themselves very soon

00:17:40.100 --> 00:17:44.580
you are all what's yarl i gotta check that out i've seen that in my dependencies

00:17:44.580 --> 00:17:51.860
i don't know what it is it's one of those things that comes along something yeah something library markdown

00:17:51.860 --> 00:17:59.140
library i don't know i have no idea i'm making this up and 360 because it's a wheel there's like a a visualization

00:17:59.140 --> 00:18:09.460
that is a a wheel onto little slices show you which which ones are there which ones aren't yeah nice

00:18:09.460 --> 00:18:15.540
360 degrees that's pretty cool they picked yeah 60. it is all right a couple comments sean tibor

00:18:15.540 --> 00:18:22.500
out there hey sean glad the cryptograph cryptography package is there to attest uh the tested status

00:18:22.500 --> 00:18:29.380
that's for sure and christian says trusted publishing is great it's never been easier to publish on pypi if

00:18:29.380 --> 00:18:35.540
you're using github that is indeed and brian you said when i talked about uv build uv publish last time

00:18:35.540 --> 00:18:42.100
time before whenever you said that you're not even doing that you just let github do it yeah yeah how's

00:18:42.100 --> 00:18:49.940
that go how do you make that happen well well we go through this um uh this thing this what do we call

00:18:49.940 --> 00:18:59.540
it uh the package trusted package provider something yeah the trusted publishing there's a um there's

00:18:59.540 --> 00:19:06.500
there's like a doc on how to do that uh trusted publisher you have to have an api token you like

00:19:06.500 --> 00:19:14.500
link tokens between github your github project and uh and pypi um so they know about each other and then

00:19:14.500 --> 00:19:21.700
the then then you kind of just add a github action pypi publish step so nice i should know um there's

00:19:21.700 --> 00:19:30.100
lots of ways to do it though the workflow wise i've found personally that my um uh my favorite way is to

00:19:30.100 --> 00:19:37.300
to do the publishing as part of the tag so um i'll i'll do a another version that's just

00:19:38.180 --> 00:19:43.700
like i'll i'll publish to i don't publish everything that i pushed up ipi but um but or

00:19:43.700 --> 00:19:51.380
push to github but when i push a push a tag then a build is done and the publish happens so it pushes

00:19:51.380 --> 00:19:58.900
off a tag so just analytically push it and then magic yeah nice um yeah that's a good question though i think

00:19:58.900 --> 00:20:04.580
we might want to revisit that and uh and put an article up find an article on that whole process because

00:20:04.580 --> 00:20:07.060
yeah are you looking for a topic for our blog posts

00:20:07.060 --> 00:20:13.060
you feel a little bit rusty i mean that's what we got to talk are you feeling rusty with your blog

00:20:13.060 --> 00:20:19.060
django's feeling rusty jango's feeling super i mean a lot of pythons feeling rusty that's what i was

00:20:19.060 --> 00:20:26.020
talking to samuel colvin about however i want to highlight a project that is very early in its life

00:20:26.020 --> 00:20:35.380
but i think maybe deserves some love some attention anyway from lily foot jango rusty templates so all

00:20:35.380 --> 00:20:42.020
these web frameworks have some variation of templated programming so you've got your html and then you'll

00:20:42.020 --> 00:20:49.300
have some kind of expression like loop over all of my blog posts and like put out the title and the

00:20:49.300 --> 00:20:54.660
contents in this little wrapper deal or whatever right they all have them they're all variations

00:20:54.660 --> 00:20:59.540
they're not as varied as you might imagine and i'm going to actually come back to this whole template

00:20:59.540 --> 00:21:08.660
thing and uh at the end of the show as well however this one re-implements the django templating one

00:21:09.460 --> 00:21:15.860
right we've got django we've got Jinja mako chameleon probably others there's that whole pep

00:21:15.860 --> 00:21:21.940
750 maybe that's bringing templating into the language itself all this stuff right so this one

00:21:21.940 --> 00:21:29.460
re-implements that django variant of that in rust with the goal of 100 compatibility on

00:21:29.460 --> 00:21:35.780
output not necessarily input or the way you program it but output at least and then error reporting

00:21:35.780 --> 00:21:41.300
that is at least as good as django and obviously why would you do this if you weren't looking for

00:21:41.300 --> 00:21:45.940
improved performance over django's pure python implementation these templates can be slow they

00:21:45.940 --> 00:21:52.340
really like one of the things that can make your website literally suffer to startup if it's under heavy

00:21:52.340 --> 00:21:58.740
heavy load is to is to restart it and it has to repars all the templates like i go to the extent that i

00:21:58.740 --> 00:22:06.980
have an app that will see that that i can run against the website and it will re it will request a

00:22:06.980 --> 00:22:14.820
representative subset of all the urls to make sure that the template is loaded and parsed because it's

00:22:14.820 --> 00:22:22.980
a difference of hundreds of milliseconds versus tens of milliseconds right it could be up to one second to

00:22:22.980 --> 00:22:27.700
load the page the very first time it hits one of these complicated things yeah and you want to you want

00:22:27.700 --> 00:22:32.180
your page is fast so when google and other things hit it they'll go oh that page is fast we'll put it a

00:22:32.180 --> 00:22:40.900
little higher in search you know so anyway this is could be interesting so uh caveat for the world it is

00:22:40.900 --> 00:22:46.740
net ready for full release and therefore is not on pypi yet you can check it out if you want to live

00:22:46.740 --> 00:22:48.500
dangerously or contribute

00:22:51.540 --> 00:22:59.940
okay okay they should push it we that's what zero verse for exactly i was shipping stuff that was 0.02

00:22:59.940 --> 00:23:08.980
on vacation come on yeah come on anyway no that's it's fine people can do what they want but

00:23:08.980 --> 00:23:16.660
of course yeah sounds fine i guess it depends do you feel like it's even anywhere close to potentially

00:23:16.660 --> 00:23:20.980
usable or is it just you're still working on it before it even makes sense so

00:23:20.980 --> 00:23:27.220
yeah they want you don't want to be you don't want a bunch of bugs saying this doesn't work yet

00:23:27.220 --> 00:23:29.860
you're like i know and i said not to use it

00:23:29.860 --> 00:23:39.140
yeah but also people it's i think it's a cool idea and if you want to help out then uh help out yeah

00:23:39.140 --> 00:23:47.940
yeah absolutely so nice um um are we i don't want to get too dry but i want to talk about another pep

00:23:47.940 --> 00:23:57.380
so PEP it up PEP it up it's a PEP talk PEP talk um so brett cannon uh announced um so i this is the

00:23:57.380 --> 00:24:05.540
first time i'd heard of this um when did this post come out this is november 13th uh that PEP 639 is now

00:24:05.540 --> 00:24:12.500
supported by pypi um this PEP this is a PEP that lets you specify the license for your code using

00:24:12.500 --> 00:24:21.380
spdx expressions how who can't get excited about spdx expressions and it's easily it's and easily

00:24:21.380 --> 00:24:27.540
include all your licenses with your code um okay i have no idea what spdx is but let's jump in a little

00:24:27.540 --> 00:24:34.580
bit so why am i excited about this is because the last way to be able to do specify your license was

00:24:34.580 --> 00:24:40.180
you did a little license string thing that say mit or whatever but then you had a um a link maybe a

00:24:40.180 --> 00:24:47.300
link to your license.txt file but there wasn't like wasn't clear understanding what you should do but you

00:24:47.300 --> 00:24:54.020
really had to in order to get the license to show up on pipe i you had to have a trove classifier and i'm

00:24:54.020 --> 00:24:58.740
not really a fan of trove classifiers i think they're weird so um you don't have to do trove

00:24:58.740 --> 00:25:10.500
classifiers uh anymore so uh brett linked to um e durbin's uh or ease PEP 639 is now live so that's just

00:25:10.500 --> 00:25:17.300
the same thing but i'll link to it anyway uh so let's look at this um the cool thing about this i think is

00:25:18.420 --> 00:25:24.420
like i said you don't have to use the uh the trail classifier anymore um i'm gonna jump down to like

00:25:24.420 --> 00:25:32.100
really what does it look like so we have uh there's reasons why and all that stuff but really it was

00:25:32.100 --> 00:25:38.740
confusing before and it's easier now so all you have to do is do something like you have license um a

00:25:38.740 --> 00:25:45.060
license field and you can put mit or something so that's the that's pretty easy um and then but there's like

00:25:45.060 --> 00:25:50.260
and so if you have you can do logic in here you can if you've got multiple licenses in there

00:25:50.260 --> 00:25:56.660
and the other thing was projects really a large project might have more than one license because

00:25:56.660 --> 00:26:04.500
there might be you may have vendored in part of the system that is um or part of another library that is

00:26:04.500 --> 00:26:08.500
licensed under a different license what do you do there well that's one of the great things about

00:26:08.500 --> 00:26:14.500
this is that there's that logic in there but you can also do the license files key and the license

00:26:14.500 --> 00:26:20.180
files key is great because you can just there's more than one you can have more than one and you specify

00:26:20.180 --> 00:26:31.380
where they all go um and it's just a uh it's just a list of strings with um um with uh what are those wild

00:26:31.380 --> 00:26:36.660
cards and stuff so that you can uh regularly with sort of regular expressions so that you can you can find

00:26:36.660 --> 00:26:42.500
different files um through there and you can even have like i like this version it's got a main license

00:26:42.500 --> 00:26:49.220
dot text uh at the top and then a licenses directory so you can have a a directory full of licenses for

00:26:49.220 --> 00:26:56.020
sub components or something wow it's like creating a list you know a set of set of arguments from a

00:26:56.020 --> 00:27:00.420
list where you say star args and it explodes it out into positional arguments it's like kind of like that

00:27:00.420 --> 00:27:09.620
but for a toml file that's wild or is that a yaml i don't know i'm not well it's a it's spdx uh or whatever

00:27:09.620 --> 00:27:20.020
um so um uh this is uh pretty exciting to me i asked brett like well this is still it's not like

00:27:20.020 --> 00:27:27.060
it's it's not finalized i guess it's provisional pi pi supports it but they say that it's going to be they

00:27:27.060 --> 00:27:35.460
they need um it's an implementation of the PEP with in two build back ends i don't know what the

00:27:35.460 --> 00:27:41.860
two build back ends it would be like hatchling or poetry or something like that but oh right

00:27:41.860 --> 00:27:47.940
definitely hatchling would cat or setup tools or something like that and an implementation implementation

00:27:47.940 --> 00:27:53.060
of the PEP and pipe pi which is done so i'm pretty sure this is done yeah and the first link that you

00:27:53.060 --> 00:27:58.420
clicked on the discuss the discourse thread or whatever yeah yeah see that second thing carolina

00:27:58.420 --> 00:28:05.460
struma wrote the pdm back end uh supporting this since such and such version and hatchling since

00:28:05.460 --> 00:28:13.060
another version i believe the conditions have been met okay so i think this is going to be changed from

00:28:13.060 --> 00:28:18.820
provisional to something else hopefully whatever comes after provisional probably accepted or whatever

00:28:18.820 --> 00:28:26.820
probably accepted hey i just want to make a little to um philip and and crew we're in carolina as well

00:28:26.820 --> 00:28:35.140
just you know the file that you create for this is license underscore file no extension

00:28:35.140 --> 00:28:41.300
think of an extension please so we can have a default so you can double click it and open it

00:28:41.300 --> 00:28:47.860
rather have to figure out an editor go into it drag it into it right because without an extension you can't set a

00:28:47.860 --> 00:28:55.700
default editor to edit the license file in mac or windows at least oh like say license.txt or something

00:28:55.700 --> 00:29:01.380
yeah or md or yaml or toml or i would say yaml or toml probably makes the most sense if it has that

00:29:01.380 --> 00:29:04.820
structure because then the editors when you open like if you open it in python or vs code

00:29:04.820 --> 00:29:12.260
they'll apply linting to it based on the format whereas right now it's like well whatever

00:29:13.220 --> 00:29:18.660
right it's just text well so this like this uh these changes that i'm showing are they're not they're

00:29:18.660 --> 00:29:23.620
like yaml or toml or something like that because they're part of the pipe project automo file oh are

00:29:23.620 --> 00:29:29.460
they well somewhere it talked about the license key file or the light yeah the right and you see there's

00:29:29.460 --> 00:29:38.580
a license underscore right there go back up upload stop license dash files oh that's just the key in the

00:29:38.580 --> 00:29:44.260
that's not actually a file okay then i i don't know what i'm talking about forget that that's the key

00:29:44.260 --> 00:29:52.820
and so i think that they're usually then it's fine it'll be picked up by pipe project.tomo yeah um but i i

00:29:52.820 --> 00:30:00.580
usually i used to just have it be raw but i like the idea of doing a .text file um yeah anyway so something

00:30:00.580 --> 00:30:05.460
that applies that makes the tool apply the linting to it if it's reasonable that would already know how

00:30:05.460 --> 00:30:10.740
to do that yeah do it like a like a word doc as

00:30:10.740 --> 00:30:20.100
come on excel come on and not like a doc x do do it like you know from like 1995.

00:30:20.100 --> 00:30:22.740
straight doc let's go okay

00:30:24.740 --> 00:30:29.940
anyway um i think that's where those are items those are okay

00:30:29.940 --> 00:30:37.140
well um do you have any extras i have a couple quick ones here i'll go through for us

00:30:37.140 --> 00:30:45.540
i'll let you do yours really quickly python 314 alva 2 was released last week just after we did our show

00:30:45.540 --> 00:30:52.180
last week so it's kind of the most recent one we could talk about i believe anyway it continues on with its

00:30:52.660 --> 00:31:01.140
 PEP 649 deferred evaluation annotation of annotations python configuration c api

00:31:01.140 --> 00:31:08.020
and no longer having pgp signatures and improved error messages among other things so check it out if

00:31:08.020 --> 00:31:13.060
you're interested in that if you want to test against it remember there will be seven so it's pretty early

00:31:13.060 --> 00:31:20.580
in there but if you know you'll be able to influence the direction if you so want blue sky brian we have

00:31:20.580 --> 00:31:26.580
personalities python personalities are invading blue sky and i would say i'm really happy with

00:31:26.580 --> 00:31:32.340
the engagement and how much people are participating over there and all those kinds of things it seems

00:31:32.340 --> 00:31:39.860
really really great right yeah yeah so we have links for all of our accounts on blue sky over there but

00:31:39.860 --> 00:31:44.020
the thing i want to highlight is i created a starter pack and i think these starter packs are actually

00:31:44.980 --> 00:31:51.460
one of the magic growth hacks of blue sky and also a good way for people to get started so here's the

00:31:51.460 --> 00:31:58.660
the common social problem social network problem is you join and it's crickets and then you follow

00:31:58.660 --> 00:32:02.580
stuff that you don't care about because it's like you haven't got no followers so here's a bunch of

00:32:02.580 --> 00:32:08.420
horrible stuff that you don't want to see oh great people ranting about this or that i want none of this

00:32:09.140 --> 00:32:13.620
i want to just get back to my communities that i care about so for each community you can create

00:32:13.620 --> 00:32:18.980
people can create what are called starter packs which is like up to 250 people you can just click

00:32:18.980 --> 00:32:23.700
one button and say boom i'm going to follow those people as a quick jump start so i created a python

00:32:23.700 --> 00:32:28.580
personality one i don't know i think it has 60 people maybe more i'm not sure i'll be able to show you in a

00:32:28.580 --> 00:32:33.140
second but it's you know it's got whoever created it then it's got who you put like nina zakarenko

00:32:33.140 --> 00:32:39.940
zacharenko dr becky chris williams cecil phillips uh savannah simon wilson peter wang and so on

00:32:39.940 --> 00:32:44.660
so you're in here somewhere brian brett cannon who were just covering his article and his PEP and so

00:32:44.660 --> 00:32:51.060
on see there you are and so i just want to encourage people hey go find some of these starter packs

00:32:51.060 --> 00:32:58.100
consider mine give it a click and so on and how do you do that well will mcg again pointed out that

00:32:58.100 --> 00:33:04.020
there's this bluesky directory.com that has all the starter packs and you can search for like python

00:33:04.020 --> 00:33:10.740
starter packs or motorcycling parts or packs or skating or whatever you're into so you've got i

00:33:10.740 --> 00:33:14.260
don't know who these people are there's some people created some like down here a little bit further you

00:33:14.260 --> 00:33:21.620
can see like here's here's the one i created and different folks python core team by hugo i believe that

00:33:21.620 --> 00:33:27.860
is so on right so there are actually 572 starter packs but i suspect a lot of overlap intersection

00:33:27.860 --> 00:33:34.180
here yeah and one of the things i appreciate about checking these out is being able to

00:33:34.180 --> 00:33:40.420
like that some people are keeping me like keeping these up a little bit which i appreciate like um

00:33:40.420 --> 00:33:48.660
luciano wait no it wasn't luciano it was um oh uh reuven learner has one also that he's trying to keep up

00:33:48.660 --> 00:33:56.740
and and i because i've been on blue sky for a while so i like went out and looked for python people early on

00:33:56.740 --> 00:34:01.300
and there's a ton of python people jumping on the bandwagon right now right and just yesterday a bunch

00:34:01.300 --> 00:34:06.020
joined you know yeah so so it's good to to look like i was just looking through your list and there

00:34:06.020 --> 00:34:10.900
was probably five or ten that i hadn't that i hadn't followed yet and and there are people i want to

00:34:10.900 --> 00:34:19.780
follow so yeah and i just added somebody two hours ago to it so you know it's it's being maintained

00:34:20.980 --> 00:34:25.380
to the limit until it hits this limit then i have to start making tough decisions if if someone ejects

00:34:25.380 --> 00:34:28.980
someone else i don't really want to do that but right now there's 61 people in mind and this directory

00:34:28.980 --> 00:34:36.260
thing shows you how big the list is if you care about that all right uh part this another really quick

00:34:36.260 --> 00:34:40.500
thing you know i'm gonna save this one until next time uh just for for sake of time we'll cover that

00:34:40.500 --> 00:34:47.540
one next next next week all right well i've got a few extras um i didn't cover this because i didn't

00:34:47.540 --> 00:34:54.900
really i don't i don't know if i'm smart enough to cover this but i'll link to it anyway there's a article from

00:34:54.900 --> 00:35:04.820
armin roniker um uh titled playground wisdom threads beat async and await and he's not really talking about python threads

00:35:04.820 --> 00:35:11.380
he's really talking about or or python async and await i think he is but also just in general like

00:35:11.380 --> 00:35:18.740
programming languages um uh thinking about threads versus thinking about async and await and um and

00:35:18.740 --> 00:35:24.900
it's just an interesting read in a good article talking about um how like we should really be making

00:35:24.900 --> 00:35:32.340
concurrency really easy to the point where we don't actually talk about concurrency it just works

00:35:32.900 --> 00:35:39.460
and that seems ludicrous in some respects if you're used to a low level language but they his example

00:35:39.460 --> 00:35:47.940
at the top just sort of like blew me away in thought process of thinking about um about the scratch

00:35:47.940 --> 00:35:55.140
programming language for kids and if you if you have like he has an example of like a a cat and a mouse

00:35:55.140 --> 00:36:04.820
sprite having code that like just you know moves 200 times while uh or like while while mouse x is less

00:36:04.820 --> 00:36:13.140
than 200 update the x position by five and sleep for 10 seconds and then do that or do that for a cat also

00:36:13.140 --> 00:36:19.700
so you got a cat and a mouse chasing each other um and the question is really do those run at the same time

00:36:19.700 --> 00:36:25.940
or one after another and in scratch it just is each of these are their own thread their own

00:36:25.940 --> 00:36:32.900
thing that's running and there's no async and await here it just is there and and i'm not saying that we

00:36:32.900 --> 00:36:38.260
should all go out and write our frameworks in scratch now um i'm saying it's it's an interesting idea just

00:36:38.260 --> 00:36:48.340
to to realize that it can be made easy um and i i both agree and disagree in interesting ways here so i i

00:36:48.340 --> 00:36:54.180
really like what armin's been doing on his blog lately he's been writing some very thoughtful posts and

00:36:54.180 --> 00:37:04.180
has me shaking my head in agreement a lot so well done armin however i think some of the pushback i have not read this so

00:37:05.220 --> 00:37:11.140
okay go easy on me but i'd like to read it it's on my reading list but i think part of the pushback of

00:37:11.140 --> 00:37:17.860
async's having a bit of a it's just not quite is i think there's foundations of async that have not

00:37:17.860 --> 00:37:24.180
been built yet that should be built like for example uh so you're this example here create a function

00:37:24.180 --> 00:37:30.020
called move mouse create a function called move cat if this was async and this was C# and you called run

00:37:30.020 --> 00:37:35.060
you do you wrote you wrote that code in C# but the word async was applied to the functions basically

00:37:35.060 --> 00:37:40.100
it would just run like it is like there's nothing left to do and async and await handles that

00:37:40.100 --> 00:37:46.900
but python doesn't have the concept of a background management thing that runs

00:37:46.900 --> 00:37:52.580
all the async stuff and keeps it going right you've got to go to the loop and say hey loop here's another

00:37:52.580 --> 00:37:58.740
thing to run start this please whereas in a lot of other languages you the act of calling an async function

00:37:58.740 --> 00:38:04.020
coordinates behind the scenes in ways you don't have to think about that start and run that you're given a task

00:38:04.020 --> 00:38:11.780
of a a object of a running task that's already been handled in something you pre-configured whereas

00:38:11.780 --> 00:38:16.420
in python you're like i know you think you ran it because it has parentheses like a function but now

00:38:16.420 --> 00:38:21.860
you've got to go find a place to actually run it and a lot that that finding the place is always janky

00:38:21.860 --> 00:38:29.140
it's like oh async io dot get get event loop exception no event loop darn it i'll create one some other

00:38:29.140 --> 00:38:35.140
time create event loop exception there's already event loop it's like why what is going on here why am i

00:38:35.140 --> 00:38:41.140
always battling this or i there is a loop but it's i need to get to it from another thread and it's thread

00:38:41.140 --> 00:38:46.420
local and i i how do i connect these two things through variables and i want to use globals like there's just

00:38:46.420 --> 00:38:53.940
all this stuff that makes it tricky whereas it there could be a little infrastructure behind the scenes

00:38:53.940 --> 00:38:57.220
that just i don't know if it might be it's too late which would be super unfortunate but

00:38:57.220 --> 00:39:04.500
it could be i think it can be built on top of it yeah maybe maybe anyway i think that that is part of

00:39:04.500 --> 00:39:12.260
the problem is the challenge is like it's it's your job to connect the pieces of the plumbing more than

00:39:12.260 --> 00:39:18.580
it should be that's what i think they i've also used um so i've used a uh in this is in c plus plus but

00:39:18.580 --> 00:39:28.260
uh a concurrency framework that had the default is easy like the generic the um the uh there is a general

00:39:28.260 --> 00:39:34.740
thread pool um that it's easy to use easy to add things to it's just sort of happens and then there's

00:39:34.740 --> 00:39:42.340
um and then there's uh if you want like a separate thread pool that's just uh managed separately there's

00:39:42.340 --> 00:39:47.540
more more who can go and create it and put it in sort of connecting pieces yeah so and i think that's

00:39:47.540 --> 00:39:54.660
awesome right rather than you always have to do the hard way yeah yeah we need a at least uh in for

00:39:54.660 --> 00:40:00.980
simpler cases there is an easy way that exists and anyway but i'm also kind of talking out of my hat

00:40:00.980 --> 00:40:06.500
because i haven't run i haven't written a lot of async python yet so yeah i'll give you a really really

00:40:06.500 --> 00:40:14.980
really quickly to wrap the show up but in court you've got there's an async event loop managed by

00:40:14.980 --> 00:40:21.780
the web framework or maybe it's even managed by the app server that then starts the framework but

00:40:21.780 --> 00:40:29.060
there's a dedicated async io event loop for processing requests it doesn't exist until after all of your

00:40:29.060 --> 00:40:36.820
startup code is done and so if you have any async code to call before you're actually you're you're just

00:40:36.820 --> 00:40:42.820
like everything's set up all the things have been populated run the start processing requests you

00:40:42.820 --> 00:40:49.940
basically almost can't do it if like for example so for the eight for beanie you have to say initialize

00:40:49.940 --> 00:40:56.580
the database and get all the connections and stuff going so if you write code to do that and then try

00:40:56.580 --> 00:41:03.460
to use it in the in a web view in a web request it'll crash and say wrong event loop it was initialized on

00:41:03.460 --> 00:41:10.100
this event loop but it's running on the court event loop and you're like well but how do i start it how do i

00:41:10.100 --> 00:41:17.140
like ask a database question before the web request is started you know like i maybe i want to do

00:41:17.140 --> 00:41:21.860
something different if the database is initialized or not or i i want to i don't know it's just like

00:41:21.860 --> 00:41:26.420
there's all this juggling and there are mechanisms to say okay well like you can have some startup code

00:41:26.420 --> 00:41:33.220
run in a different time but it's just it's just hard yeah anyway i i hope i keep harping on this i'm

00:41:33.220 --> 00:41:40.100
hoping someone will go like okay we're at the core developer language summit can we simplify please okay

00:41:40.100 --> 00:41:47.700
and then uh i got a few more but i'll do them quick um uh the python test community is now on discord

00:41:47.700 --> 00:41:54.580
uh that the launch happened in a couple days last last week um and it's going well we've got like

00:41:54.580 --> 00:42:00.420
89 people in there so far um if you'd like to be a part of it and you're not already if you if you're part of

00:42:00.420 --> 00:42:04.420
the community you got would have gotten an email if you want to be part of the community and you

00:42:04.420 --> 00:42:10.100
didn't get the email um or you haven't bought one of my stuff things before you can head over to

00:42:10.100 --> 00:42:15.700
courses.pythontest.com and you don't even need one of the courses you can just um grab the discord

00:42:15.700 --> 00:42:23.620
community one it's there and it's on sale it and everything else on the site is on a on a black friday sale

00:42:23.620 --> 00:42:29.940
20 off using turkey sale 2024 and that's just right on the side i'm posting that it's not a secret

00:42:29.940 --> 00:42:37.780
however there is a secret on the book so python testing with py test is uh 40 off right now and you

00:42:37.780 --> 00:42:45.700
you just need to use the black friday code which is also the same code turkey sale 2024 i just wanted to be

00:42:45.700 --> 00:42:55.220
easy for people to remember so uh learn py test easily through sales test your thing yeah enjoy

00:42:55.220 --> 00:43:01.700
the turkeys yeah and i'm having fun with discord i've had to have had to embrace the uh the dancing

00:43:01.700 --> 00:43:08.740
logos and stuff and i i know you can turn them off but i'm actually realizing that i kind of like them now

00:43:08.740 --> 00:43:14.900
these little doohickey things yeah it's fun the little giffies or whatever very fun yeah talk python

00:43:14.900 --> 00:43:19.860
is going to also have a black friday sale i don't have it launched yet but that is my goal for the day

00:43:19.860 --> 00:43:26.340
so i'll put it in the show notes people can check it out i'm not 100 on the final final details but

00:43:26.340 --> 00:43:32.340
i'm finalizing that today i can't believe november's almost over what even exactly this is my problem

00:43:34.340 --> 00:43:40.500
i do not accept that november is almost over but hey it's it's one one month less of rain for us

00:43:40.500 --> 00:43:48.020
we're closer to sun again so let's go yeah all right you ready for a joke yeah so this joke you just

00:43:48.020 --> 00:43:55.300
everyone brian has not seen or or heard this joke remember we had the ai the sad girls ai sing song

00:43:55.300 --> 00:44:04.260
sing the mit license terms yeah this is like this but this is a heavy metal rock band

00:44:04.660 --> 00:44:13.860
singing the verbose output of a curl command so if you say curl dash v verbose hdps google.com

00:44:13.860 --> 00:44:19.220
there's a whole bunch of stuff that comes out a bunch of tech things so we're gonna have a heavy

00:44:19.220 --> 00:44:26.180
metal jam session of this and i want to point out one if your volume is high turn it down two if you

00:44:26.180 --> 00:44:32.980
really hate heavy metal hard rock just go ahead and stop here there's we're not covering anything else

00:44:32.980 --> 00:44:38.020
i don't want to use seriously this is kind of like some intense rock but it's also pretty funny and i

00:44:38.020 --> 00:44:43.700
would also like to add on the videos on youtube the video i'm linking to the there's a comment that

00:44:43.700 --> 00:44:50.580
says hi i'm the creator of curl and i wholeheartedly endorse this amazing this masterpiece with that said

00:44:50.580 --> 00:44:55.140
if you hate if you hate hard rock you're not gonna love it so just go ahead and skip ahead everyone

00:44:56.660 --> 00:45:07.380
here we go

00:45:07.380 --> 00:45:20.100
is

00:45:20.100 --> 00:45:20.100
is

00:45:20.100 --> 00:45:32.820
is

00:45:32.820 --> 00:45:38.820
is

00:45:38.820 --> 00:45:51.540
is

00:45:51.540 --> 00:45:56.020
well there you have it folks the actual real song is at three and a half minutes and i couldn't i

00:45:56.020 --> 00:46:01.300
couldn't do it i couldn't play the whole thing for you so it's a taster hit the full show um i love it

00:46:02.100 --> 00:46:12.820
is

00:46:12.820 --> 00:46:16.460
Thank you.

