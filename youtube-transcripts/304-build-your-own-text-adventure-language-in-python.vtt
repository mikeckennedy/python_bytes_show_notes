WEBVTT

00:00:00.000 --> 00:00:03.000
Hey YouTube, hey Brian.


00:00:03.000 --> 00:00:04.000
- Hey.


00:00:04.000 --> 00:00:07.000
- Thanks everyone who is watching live.


00:00:07.000 --> 00:00:10.000
As usual, put your ideas in the live chat


00:00:10.000 --> 00:00:12.000
and we'll see what we can do with that.


00:00:12.000 --> 00:00:14.000
And with that, let's kick it off.


00:00:14.000 --> 00:00:15.000
- Okay.


00:00:15.000 --> 00:00:18.000
- Hello and welcome to Python Bytes


00:00:18.000 --> 00:00:20.000
where we deliver Python news and headlines


00:00:20.000 --> 00:00:22.000
directly to your earbuds.


00:00:22.000 --> 00:00:27.000
This is episode 304, recorded October 5th, 2022.


00:00:27.000 --> 00:00:29.000
I'm Michael Kennedy.


00:00:29.000 --> 00:00:31.800
I'm Brian Okken.


00:00:31.800 --> 00:00:33.120
>> Hey, Brian.


00:00:33.120 --> 00:00:35.880
>> Hey, you threw me for a wrench


00:00:35.880 --> 00:00:37.920
with the whole date thing.


00:00:37.920 --> 00:00:38.480
>> I know.


00:00:38.480 --> 00:00:40.240
Well, in our notes it has yesterday,


00:00:40.240 --> 00:00:41.760
but then we had to move it.


00:00:41.760 --> 00:00:42.760
>> Yeah, because I mean--


00:00:42.760 --> 00:00:44.640
>> Some of us have meetings.


00:00:44.640 --> 00:00:46.480
Yeah, so we moved plenty for me.


00:00:46.480 --> 00:00:48.240
Plenty of moving.


00:00:48.240 --> 00:00:49.040
Yeah, very cool.


00:00:49.040 --> 00:00:50.400
Well, great to be back with you.


00:00:50.400 --> 00:00:53.160
Also, we have a sponsor that sponsored before,


00:00:53.160 --> 00:00:55.520
but has been a while, a compiler from Red Hat.


00:00:55.520 --> 00:00:56.320
Excellent show.


00:00:56.320 --> 00:00:58.160
Tell you more about that later.


00:00:58.160 --> 00:01:02.880
For now, Brian, I'm kind of hungry. What can you do for me here?


00:01:02.880 --> 00:01:09.600
I've got tasty ingredients for let's see, add to stream, tasty ingredients for a delicious pull


00:01:09.600 --> 00:01:17.760
request. So it's October now. So that means Hacktoberfest for some people, right? So,


00:01:17.760 --> 00:01:23.280
and actually, I didn't really want to just highlight Hacktoberfest. What I really like


00:01:23.280 --> 00:01:27.680
about this. So this is an article 10 tasty ingredients for a delicious pull request.


00:01:27.680 --> 00:01:33.680
It's on the Wagtail blog and from LB on the Wagtail core team member.


00:01:33.680 --> 00:01:35.180
So thanks LB.


00:01:35.180 --> 00:01:39.280
But this, it's kind of neat because it's not,


00:01:39.280 --> 00:01:41.000
yeah, it's kind of click-baity,


00:01:41.000 --> 00:01:42.840
but also it's just,


00:01:42.840 --> 00:01:44.680
it's actually nice information.


00:01:44.680 --> 00:01:47.280
So whether you're starting open source project or


00:01:47.280 --> 00:01:50.400
starting want to start helping out with an open source project,


00:01:50.400 --> 00:01:52.560
or I think these tips are great,


00:01:52.560 --> 00:01:56.840
or at least majority of them are great even for people that


00:01:56.840 --> 00:02:01.800
are used to developing solo and are moving into developing


00:02:01.800 --> 00:02:04.280
with a team of people or a group of people.


00:02:04.280 --> 00:02:06.880
And I've had questions about that,


00:02:06.880 --> 00:02:08.280
even from companies of like,


00:02:08.280 --> 00:02:10.700
yeah, we wanna kind of work better as a team.


00:02:10.700 --> 00:02:11.540
How do we do that?


00:02:11.540 --> 00:02:13.920
So I'm gonna run through these quickly.


00:02:13.920 --> 00:02:15.440
There's 10 of them.


00:02:15.440 --> 00:02:17.440
First one is great.


00:02:17.440 --> 00:02:19.120
It's read the documentation


00:02:19.120 --> 00:02:20.760
or read the development instructions.


00:02:20.760 --> 00:02:24.020
So a lot of projects have contributing guidelines.


00:02:24.020 --> 00:02:26.400
So actually read those and understand them.


00:02:26.400 --> 00:02:30.980
When we're used to it, it's just a, hey, fork it and go.


00:02:30.980 --> 00:02:33.880
But that's not trivial for some people, so.


00:02:33.880 --> 00:02:38.300
- Right, well, you may have non-obvious details.


00:02:38.300 --> 00:02:40.920
Like for example, maybe you just fork the repo,


00:02:40.920 --> 00:02:43.200
you do your work there and you contribute.


00:02:43.200 --> 00:02:47.280
But well, you should obviously create a branch in your repo


00:02:47.280 --> 00:02:49.360
so that if they decide to not take it,


00:02:49.360 --> 00:02:51.000
then how do you stay in sync, right?


00:02:51.000 --> 00:02:52.400
That's one of them.


00:02:52.400 --> 00:02:56.040
Another one is, well, maybe when you do the PR,


00:02:56.040 --> 00:02:57.920
it doesn't go back to the main branch,


00:02:57.920 --> 00:03:00.320
it goes to some other like dev branch or something, right?


00:03:00.320 --> 00:03:03.120
Like you need to know, here's where you put PR back to you.


00:03:03.120 --> 00:03:05.680
And just like those kinds of details for, hey, we're a team.


00:03:05.680 --> 00:03:07.160
- Yeah, and then also there's details


00:03:07.160 --> 00:03:08.720
like how do you run the tests


00:03:08.720 --> 00:03:11.920
and are there extra stuff that you have to install


00:03:11.920 --> 00:03:14.760
or any settings or for a lot of projects,


00:03:14.760 --> 00:03:17.720
it's just, you know, do a virtual environment


00:03:17.720 --> 00:03:18.920
and clone it and go.


00:03:18.920 --> 00:03:21.920
But there's some that have like extra bits


00:03:21.920 --> 00:03:22.840
that you have to set up.


00:03:22.840 --> 00:03:25.200
So good to read the instructions.


00:03:25.200 --> 00:03:28.160
But then we're going into things like read the issues


00:03:28.160 --> 00:03:29.000
and comments.


00:03:29.000 --> 00:03:30.520
So if you wanna help out,


00:03:30.520 --> 00:03:32.800
this is a great way is to read the issues,


00:03:32.800 --> 00:03:36.880
but don't just jump in and try to solve it right away.


00:03:36.880 --> 00:03:38.840
Read the comments around the issue.


00:03:38.840 --> 00:03:41.200
Also PRs that are related to the issue,


00:03:41.200 --> 00:03:42.440
if there's any PRs linked,


00:03:42.440 --> 00:03:46.000
because there's somebody that might be started on a fix


00:03:46.000 --> 00:03:50.840
and you wanna help either help them get unstuck


00:03:50.840 --> 00:03:52.040
or just help out.


00:03:52.040 --> 00:03:53.520
You don't wanna just take over and say,


00:03:53.520 --> 00:03:55.840
oh, I could solve this if somebody else is working on it


00:03:55.840 --> 00:03:59.840
already, but maybe you do, there's different ways,


00:03:59.840 --> 00:04:02.320
but pay attention to that, so that's good.


00:04:02.320 --> 00:04:04.720
Create a fresh branch for your contribution,


00:04:04.720 --> 00:04:08.480
like you mentioned, it isn't always obvious


00:04:08.480 --> 00:04:10.700
because I'm already forking, what do we need a branch for?


00:04:10.700 --> 00:04:14.400
But it does help with the branch model


00:04:14.400 --> 00:04:17.600
when it comes back in, it just looks better.


00:04:17.600 --> 00:04:22.600
- It's not necessary until your change is not accepted


00:04:22.600 --> 00:04:27.200
accepted, or you want to make two changes, right? Yeah, like,


00:04:27.200 --> 00:04:31.360
if you ever want to get back in sync with the main repo, you


00:04:31.360 --> 00:04:32.320
need to do something else.


00:04:32.320 --> 00:04:35.360
And it might be very much a possibility that you want to


00:04:35.360 --> 00:04:38.000
make several changes, you're really excited about a project,


00:04:38.000 --> 00:04:41.000
and you're making several. And like you said, there, there


00:04:41.000 --> 00:04:43.800
might be a lot of discussion around some and some of them are


00:04:43.800 --> 00:04:47.960
trivial things like fixing readme or something. And so


00:04:47.960 --> 00:04:52.240
yeah, multiple, do a branch so that you've got multiple names.


00:04:52.480 --> 00:04:55.120
And that's where we come to the next tip for is


00:04:55.120 --> 00:04:56.600
keep the change focused.


00:04:56.600 --> 00:04:59.680
So if a project would much rather have


00:04:59.680 --> 00:05:04.600
several focused pull requests than a single pull request


00:05:04.600 --> 00:05:06.480
with like four different changes in it


00:05:06.480 --> 00:05:08.240
that are completely unrelated.


00:05:08.240 --> 00:05:10.160
So keep them focused.


00:05:10.160 --> 00:05:12.320
And this is great for personal


00:05:12.320 --> 00:05:15.180
or closed source projects too.


00:05:15.180 --> 00:05:17.960
It just makes the code review easier.


00:05:17.960 --> 00:05:21.600
And when you get in the habit of doing focused changes,


00:05:21.600 --> 00:05:24.000
It just, it's not harder.


00:05:24.000 --> 00:05:27.520
It's just a workflow you gotta get used to.


00:05:27.520 --> 00:05:29.440
Next is write unit tests.


00:05:29.440 --> 00:05:31.600
Definitely for the changes,


00:05:31.600 --> 00:05:33.600
but one of the comments that I loved in this


00:05:33.600 --> 00:05:38.360
as a bonus tip is there might be some


00:05:38.360 --> 00:05:42.880
either untested features in the project or under tested


00:05:42.880 --> 00:05:47.040
and adding tests around those features that you care about


00:05:47.040 --> 00:05:50.600
is a great way to contribute to a code base.


00:05:50.600 --> 00:05:52.280
So keep that in mind.


00:05:52.280 --> 00:05:53.960
- Really good point because people often think,


00:05:53.960 --> 00:05:55.400
well, what can I do to contribute?


00:05:55.400 --> 00:05:56.680
I'm not an expert.


00:05:56.680 --> 00:06:01.000
Well, if it's missing tests, that's pretty easy.


00:06:01.000 --> 00:06:02.760
- And there could be even like,


00:06:02.760 --> 00:06:05.540
so there's an idea of like testing is documentation


00:06:05.540 --> 00:06:09.040
and some tests work well like that and some tests do not.


00:06:09.040 --> 00:06:12.440
So a great way also just to walk through,


00:06:12.440 --> 00:06:16.240
make tests around the onboarding documentation,


00:06:16.240 --> 00:06:17.400
like the getting starting guide,


00:06:17.400 --> 00:06:19.600
making sure that those features are tested


00:06:19.600 --> 00:06:21.760
is a good thing to throw in there.


00:06:21.760 --> 00:06:23.800
Give your pull request name,


00:06:23.800 --> 00:06:26.880
request a name with context.


00:06:26.880 --> 00:06:28.520
So naming well is good.


00:06:28.520 --> 00:06:31.580
And don't be surprised if your pull request name


00:06:31.580 --> 00:06:35.780
gets changed by one of the core contributors.


00:06:35.780 --> 00:06:39.500
That's not, it's just so that everybody can track


00:06:39.500 --> 00:06:41.640
what's going on inside better.


00:06:41.640 --> 00:06:43.020
So just learn from that.


00:06:43.020 --> 00:06:47.180
- If mine is associated with an issue,


00:06:47.180 --> 00:06:51.060
I try to put the issue number as part of the branch.


00:06:51.060 --> 00:06:51.900
- Yes.


00:06:51.900 --> 00:06:54.460
- That I'm like, you know, it'd be like add such and such.


00:06:54.460 --> 00:06:56.980
If that add such and such is actually to fix, you know,


00:06:56.980 --> 00:07:00.940
issue 221, it'd be like the branch would be, you know,


00:07:00.940 --> 00:07:04.620
add such and such 221 or whatever for the branch name.


00:07:04.620 --> 00:07:06.120
Just so you're like, where the heck did this come from?


00:07:06.120 --> 00:07:06.960
Why is it here?


00:07:06.960 --> 00:07:07.780
Oh yeah, that's right.


00:07:07.780 --> 00:07:08.620
I can go find it.


00:07:08.620 --> 00:07:09.460
- Yep.


00:07:09.460 --> 00:07:11.540
And reference the issue being fixed


00:07:11.540 --> 00:07:12.900
or resolved in the pull request.


00:07:12.900 --> 00:07:15.740
So referencing the issue in a way that,


00:07:15.740 --> 00:07:17.700
and you kind of got to get used to this with GitHub


00:07:17.700 --> 00:07:19.080
or GitLab or other things.


00:07:19.080 --> 00:07:21.700
They'll link to the thing.


00:07:21.700 --> 00:07:24.280
It links things up if you name it correctly.


00:07:24.280 --> 00:07:28.300
So just play with that.


00:07:28.300 --> 00:07:30.540
And then some again,


00:07:30.540 --> 00:07:34.580
and then hopefully there's CI going on in tests.


00:07:34.580 --> 00:07:37.820
So if your pull request has a break,


00:07:37.820 --> 00:07:39.860
the test fail, address those.


00:07:39.860 --> 00:07:41.680
This is nothing more frustrating


00:07:41.680 --> 00:07:44.800
than a fairly decent pull request coming in,


00:07:44.800 --> 00:07:48.160
but the test fail or the coverage fails or something.


00:07:48.160 --> 00:07:50.200
And the person that issued the pull request


00:07:50.200 --> 00:07:51.520
doesn't deal with it.


00:07:51.520 --> 00:07:52.880
They just leave it for you.


00:07:52.880 --> 00:07:54.360
And that's not cool.


00:07:54.360 --> 00:07:55.980
So address those.


00:07:55.980 --> 00:07:59.960
Only a couple more, push to the same branch with fixes


00:07:59.960 --> 00:08:01.480
and do not open a new pull request.


00:08:01.480 --> 00:08:04.940
So if the CI breaks, just push to the same branch again.


00:08:04.940 --> 00:08:05.780
It'll work.


00:08:05.780 --> 00:08:09.360
And then the lastly is be patient.


00:08:09.360 --> 00:08:12.120
I know that you've worked really hard on a change


00:08:12.120 --> 00:08:14.480
and you wanna see it go into the main project


00:08:14.480 --> 00:08:17.560
right away, but these are volunteer projects mostly.


00:08:17.560 --> 00:08:20.880
So it might take a while to review it


00:08:20.880 --> 00:08:22.680
and be comfortable with the changes.


00:08:22.680 --> 00:08:25.860
- Yeah, that's a bit of a balance.


00:08:25.860 --> 00:08:28.200
- Yeah.


00:08:28.200 --> 00:08:30.200
- It's frustrating when you work on a project,


00:08:30.200 --> 00:08:32.100
you try to enhance some project


00:08:32.100 --> 00:08:34.440
and then you put something out there


00:08:34.440 --> 00:08:36.000
and there's not even a response.


00:08:36.000 --> 00:08:38.720
After, you know, like two weeks, you're like,


00:08:38.720 --> 00:08:40.560
well, I guess, I don't know.


00:08:40.560 --> 00:08:43.560
I don't know what to do with that, you know?


00:08:43.560 --> 00:08:45.400
But at the same time, it's absolutely volunteer.


00:08:45.400 --> 00:08:47.200
So there you go.


00:08:47.200 --> 00:08:48.800
All right, let me tell you about something pretty cool


00:08:48.800 --> 00:08:50.320
for this next one, Brian.


00:08:50.320 --> 00:08:52.280
I learned about this from Rhett Turnbull.


00:08:52.280 --> 00:08:54.160
He and I had a chat over on Talk Python


00:08:54.160 --> 00:08:56.960
about building native Mac apps in Python.


00:08:56.960 --> 00:09:00.280
Recall, we talked about TechSniper


00:09:00.280 --> 00:09:03.440
and he built a Python only equivalent.


00:09:03.440 --> 00:09:04.840
And we actually covered on the show a little bit,


00:09:04.840 --> 00:09:07.400
but during our conversation there,


00:09:07.400 --> 00:09:09.600
this is one of the recommendations he had


00:09:09.600 --> 00:09:10.640
for something really cool.


00:09:10.640 --> 00:09:13.440
So imagine somebody comes to you and says,


00:09:13.440 --> 00:09:17.980
"Hey, Michael, I have a Raspberry Pi or Arduino thing


00:09:17.980 --> 00:09:20.960
in my lab and it controls,


00:09:20.960 --> 00:09:22.900
let's say this is a biology lab, right?


00:09:22.900 --> 00:09:26.800
It controls experiments and you can build up something


00:09:26.800 --> 00:09:29.960
with like a UI or whatever, but if people wanna script it,


00:09:29.960 --> 00:09:33.400
wouldn't it be cool if there's a way to express


00:09:33.400 --> 00:09:36.360
in like some form of syntax,


00:09:36.360 --> 00:09:41.080
here's how somebody who is just a biologist can make it go.


00:09:41.080 --> 00:09:44.200
It could just be like fill pipette seven,


00:09:44.200 --> 00:09:50.440
mix pipette seven and 10, wait 10 minutes,


00:09:50.440 --> 00:09:53.760
heat to such and such, right?


00:09:53.760 --> 00:09:54.840
You could sure you could come up


00:09:54.840 --> 00:09:56.200
with a programming language for them.


00:09:56.200 --> 00:09:58.280
You say, well, here's your language,


00:09:58.280 --> 00:10:00.160
we're gonna give you C++, good luck.


00:10:00.160 --> 00:10:04.880
More ideally, maybe Python or oftentimes JavaScript,


00:10:04.880 --> 00:10:07.480
which feels like a real bad example or a choice


00:10:07.480 --> 00:10:11.420
because it's kind of a complicated syntactical language,


00:10:11.420 --> 00:10:13.360
even though it's easy to execute.


00:10:13.360 --> 00:10:15.240
You know, it's like, it's easy to make a mistake


00:10:15.240 --> 00:10:17.720
and forget a semicolon or something weird.


00:10:17.720 --> 00:10:20.800
Anyway, what if you could come up with the words


00:10:20.800 --> 00:10:23.180
that I used to like introduce this idea?


00:10:23.180 --> 00:10:26.660
You just have like lines like fill pipette seven,


00:10:26.660 --> 00:10:29.800
mix pipette seven and eight or whatever.


00:10:29.800 --> 00:10:33.120
And so this thing I'm talking about here is called TextX.


00:10:33.120 --> 00:10:36.480
And TextX is a Python library that allows you to build


00:10:36.480 --> 00:10:41.840
these kind of grammars and map them to Python implementations in a super easy way.


00:10:41.840 --> 00:10:42.840
Wow. Okay.


00:10:42.840 --> 00:10:53.640
So, let's see, it's a meta-language for building domain-specific languages, DSLs, in Python.


00:10:53.640 --> 00:10:58.360
Basically it'll help you build a textual language in an easy way, and you can invent your own


00:10:58.360 --> 00:11:02.440
language, as I said, or build support for an existing format.


00:11:02.440 --> 00:11:04.280
So they have an example here.


00:11:04.280 --> 00:11:11.080
So they have this grammar, and this is about moving things around, basically drawing something


00:11:11.080 --> 00:11:12.080
in a language.


00:11:12.080 --> 00:11:20.440
So you come up with a grammar, you'd say there's a shape command, which is just line to or


00:11:20.440 --> 00:11:21.440
circle.


00:11:21.440 --> 00:11:23.600
There's a move command, which is move to or move by.


00:11:23.600 --> 00:11:29.480
And then you just have these words move and then to.


00:11:29.480 --> 00:11:30.760
That runs the move to command.


00:11:30.760 --> 00:11:35.700
If the line is move space by, that's the move by command.


00:11:35.700 --> 00:11:38.540
And then you map to the additional information


00:11:38.540 --> 00:11:39.380
to these classes.


00:11:39.380 --> 00:11:41.940
So these are all Python classes, right?


00:11:41.940 --> 00:11:43.580
So you just come up, this is, what is this?


00:11:43.580 --> 00:11:45.900
10 lines, eight lines, something.


00:11:45.900 --> 00:11:48.600
And then you create the class,


00:11:48.600 --> 00:11:50.500
which is a point and the other pieces.


00:11:50.500 --> 00:11:52.940
And you just say meta model from string,


00:11:52.940 --> 00:11:55.980
give it the grammar and the classes involved.


00:11:55.980 --> 00:11:58.980
And then here's the new language we just created.


00:11:58.980 --> 00:12:03.280
move space to five comma 10, line two, 10 comma 10.


00:12:03.280 --> 00:12:06.020
How cool is that?


00:12:06.020 --> 00:12:07.720
- That's pretty interesting.


00:12:07.720 --> 00:12:09.340
- Yeah, you just create the model from there


00:12:09.340 --> 00:12:13.140
and then you can just basically parse it.


00:12:13.140 --> 00:12:16.560
For command in the model, start doing the things.


00:12:16.560 --> 00:12:19.220
If the commands move to or move by,


00:12:19.220 --> 00:12:20.420
it's already done the parsing,


00:12:20.420 --> 00:12:23.060
it has the command elements like the vector


00:12:23.060 --> 00:12:25.700
or the point already parsed and validated.


00:12:25.700 --> 00:12:28.180
And it just executes Python.


00:12:28.180 --> 00:12:32.180
>> Okay.


00:12:32.180 --> 00:12:33.000
>> What do you think?


00:12:33.000 --> 00:12:34.580
>> Well, so how do you use it?


00:12:34.580 --> 00:12:37.460
So do you put all these commands in


00:12:37.460 --> 00:12:42.340
the somebody that put all these move things in a file and then run?


00:12:42.340 --> 00:12:46.860
>> Yeah, exactly. So you would implement the code that defines the grammar.


00:12:46.860 --> 00:12:49.500
You would implement the grammar classes,


00:12:49.500 --> 00:12:53.780
so like point and vector and those things.


00:12:53.780 --> 00:12:56.220
Then somebody would write the grammar.


00:12:56.220 --> 00:12:59.140
So move space to 5, 10.


00:12:59.140 --> 00:13:01.180
And then they'd probably have either a CLI


00:13:01.180 --> 00:13:03.100
or they save it in a file in some location


00:13:03.100 --> 00:13:06.300
and like you auto-discovered or however it runs.


00:13:06.300 --> 00:13:09.340
So basically from an external perspective,


00:13:09.340 --> 00:13:12.180
you now allow people to just program in this simple way.


00:13:12.180 --> 00:13:13.500
Like another way you could do it is like


00:13:13.500 --> 00:13:16.820
you could write like a text adventure game, right?


00:13:16.820 --> 00:13:19.900
You could like look around, look at,


00:13:19.900 --> 00:13:23.620
move right, move east, west, north, right?


00:13:23.620 --> 00:13:25.020
Attack creature, run.


00:13:25.020 --> 00:13:27.840
Like you could really easily in Python build


00:13:27.840 --> 00:13:30.900
like a pretty interesting text adventure game


00:13:30.900 --> 00:13:32.080
based on this, I would imagine.


00:13:32.080 --> 00:13:33.380
Probably it already exists.


00:13:33.380 --> 00:13:35.220
- Yeah.


00:13:35.220 --> 00:13:38.860
Well, yeah, so adventures around.


00:13:38.860 --> 00:13:41.840
So we could probably re-implement it with this.


00:13:41.840 --> 00:13:43.560
- Yeah. - Might be fun.


00:13:43.560 --> 00:13:44.400
- Yeah, that'd be fun.


00:13:44.400 --> 00:13:47.720
- But the, this, or like a complete,


00:13:47.720 --> 00:13:49.760
like burn, way to burn up a summer.


00:13:49.760 --> 00:13:54.160
This, this looks cool though.


00:13:54.160 --> 00:13:57.080
There's a whole bunch of cases where DSL is appropriate,


00:13:57.080 --> 00:13:59.040
especially when you're interacting


00:13:59.040 --> 00:14:01.020
with non-programmer type people.


00:14:01.020 --> 00:14:04.640
- Exactly, you wanna give them some kind of text


00:14:04.640 --> 00:14:06.680
ability to interact with what you've created,


00:14:06.680 --> 00:14:08.320
but you don't wanna force them to do


00:14:08.320 --> 00:14:10.820
full-on, super precise programming.


00:14:10.820 --> 00:14:13.580
- Yeah, or maybe they're just programmers


00:14:13.580 --> 00:14:16.960
and it's just easier to think about stuff in this manner.


00:14:16.960 --> 00:14:17.800
Neat.


00:14:17.800 --> 00:14:18.800
- Yeah, and just have a real high-level way


00:14:18.800 --> 00:14:20.840
to talk about what you want.


00:14:20.840 --> 00:14:21.960
- Yeah.


00:14:21.960 --> 00:14:23.080
- Indeed.


00:14:23.080 --> 00:14:25.360
Cool, anyway, so text X, people can check it out.


00:14:25.360 --> 00:14:27.160
Another thing that's pretty awesome,


00:14:27.160 --> 00:14:32.040
Compiler from Red Hat, our sponsor this week.


00:14:32.040 --> 00:14:34.640
Yeah, let me tell folks about that before we move on.


00:14:34.640 --> 00:14:40.720
So this episode, as I said, is sponsored by Compiler.


00:14:40.720 --> 00:14:43.200
Just like you, Brian and I are fans of podcasts,


00:14:43.200 --> 00:14:46.480
and I'm happy to share this new, highly respected one


00:14:46.480 --> 00:14:48.440
from an open source company I'm sure you know,


00:14:48.440 --> 00:14:51.000
Compiler, an original podcast from Red Hat.


00:14:52.100 --> 00:14:53.800
And if you want to stay on top of tech


00:14:53.800 --> 00:14:55.800
without dedicating tons of time to it,


00:14:55.800 --> 00:14:58.840
Compiler presents perspectives, topics, and insights


00:14:58.840 --> 00:15:02.240
from the tech industry free of jargon and judgment.


00:15:02.240 --> 00:15:04.640
They want to discover where technology is headed


00:15:04.640 --> 00:15:06.140
beyond headlines and create a place


00:15:06.140 --> 00:15:09.080
for new IT professionals to learn, grow, and thrive.


00:15:09.080 --> 00:15:11.320
Compiler helps people break through barriers and challenges,


00:15:11.320 --> 00:15:12.600
turning code into community


00:15:12.600 --> 00:15:14.360
at all levels of the enterprise.


00:15:14.360 --> 00:15:18.080
One recent interesting episode is their


00:15:18.080 --> 00:15:20.600
The Great Stack Debate episode.


00:15:20.600 --> 00:15:22.100
I love, love, love talking to people


00:15:22.100 --> 00:15:23.960
about how they architect their code,


00:15:23.960 --> 00:15:25.960
the trade-offs and conventions they chose,


00:15:25.960 --> 00:15:29.200
and the costs, challenges, and smiles that result.


00:15:29.200 --> 00:15:30.720
This one is like that,


00:15:30.720 --> 00:15:33.680
this "Migratory State Stack Debate" episode.


00:15:33.680 --> 00:15:36.440
Check it out and see if software is more like an onion


00:15:36.440 --> 00:15:37.560
or more like lasagna,


00:15:37.560 --> 00:15:39.640
or maybe it's more complicated than food.


00:15:39.640 --> 00:15:42.640
This is actually the first episode


00:15:42.640 --> 00:15:44.960
in Compiler's Software Stack series,


00:15:44.960 --> 00:15:46.400
and I think it'll be pretty interesting.


00:15:46.400 --> 00:15:47.740
So check that one out.


00:15:47.740 --> 00:15:51.180
Learn more about compiler at pythonbytes.fm/compiler.


00:15:51.180 --> 00:15:53.020
The link is in your podcast player show notes.


00:15:53.020 --> 00:15:56.020
Yes, I know you can open up your podcast player


00:15:56.020 --> 00:15:57.220
and just search for compiler,


00:15:57.220 --> 00:15:59.940
but please visit pythonbytes.fm/compiler


00:15:59.940 --> 00:16:02.900
and click on your podcast player's icon.


00:16:02.900 --> 00:16:05.420
That way they know it came from us.


00:16:05.420 --> 00:16:09.940
Our thanks to compiler for keeping our podcast going strong.


00:16:09.940 --> 00:16:11.980
- Nice, yeah, pretty cool.


00:16:11.980 --> 00:16:15.180
- Yeah, all right, what's next, Brian?


00:16:15.180 --> 00:16:19.340
- Well, I wanna talk about locks and semaphores


00:16:19.340 --> 00:16:21.660
and analogies and stuff.


00:16:21.660 --> 00:16:22.500
So on--


00:16:22.500 --> 00:16:24.180
- Oh my gosh, I've been thinking about them


00:16:24.180 --> 00:16:25.500
so much lately, actually.


00:16:25.500 --> 00:16:26.780
- Have you?


00:16:26.780 --> 00:16:27.820
- Yes, I have.


00:16:27.820 --> 00:16:29.420
So tell me more.


00:16:29.420 --> 00:16:33.140
- Well, so this is a blog post by Guido van Rossum.


00:16:33.140 --> 00:16:35.220
Doesn't blog often, but there's usually


00:16:35.220 --> 00:16:37.980
some interesting bits when he wants to.


00:16:37.980 --> 00:16:39.500
So this is a post called


00:16:39.500 --> 00:16:43.660
"Reasoning about AsyncIO Semaphore."


00:16:43.660 --> 00:16:48.660
So it starts off with a kind of a story about a restaurant.


00:16:48.660 --> 00:16:52.620
So there's an analogy here about, okay,


00:16:52.620 --> 00:16:54.820
so you got a restaurant, it's a fast food place,


00:16:54.820 --> 00:16:58.460
but it only has one table and there's a line waiting for it.


00:16:58.460 --> 00:17:00.740
And, but you don't want to just wait in line.


00:17:00.740 --> 00:17:03.820
So there's a way for you to get a buzzer.


00:17:03.820 --> 00:17:06.460
So somebody hands you a buzzer and you go wait.


00:17:06.460 --> 00:17:08.740
And when the table's open, your buzzer rings


00:17:08.740 --> 00:17:11.840
and you go get seated and you can eat.


00:17:12.740 --> 00:17:17.740
This sort of analogy, he talks about this as a lock.


00:17:17.740 --> 00:17:21.220
And then, so with concurrent programming,


00:17:21.220 --> 00:17:23.600
so only one person getting it at a time.


00:17:23.600 --> 00:17:27.100
But then if you've got multiple tables,


00:17:27.100 --> 00:17:28.740
things get a little more interesting.


00:17:28.740 --> 00:17:30.900
So that's where semaphores come in.


00:17:30.900 --> 00:17:33.800
And I love this mind shift of,


00:17:33.800 --> 00:17:36.780
and this is often difficult for people


00:17:36.780 --> 00:17:39.620
when they're doing asynchronous programming,


00:17:39.620 --> 00:17:42.060
to have this, like lock makes sense.


00:17:42.060 --> 00:17:48.860
you know, you're either a thread or a re or some code is using a resource and it can and nobody else can but


00:17:48.860 --> 00:17:51.340
at


00:17:51.340 --> 00:17:54.140
But then then you unlock it and somebody else can grab it


00:17:54.140 --> 00:17:58.380
But what if there's like multi like three people can at a time?


00:17:58.380 --> 00:18:02.300
those are some of the different some a little bit of a mind shift


00:18:02.300 --> 00:18:07.120
So I love this idea of a three table restaurant as a way to to think about this analogy


00:18:07.120 --> 00:18:11.260
and so he goes through the analogy, but then talks about


00:18:11.740 --> 00:18:18.380
locks and semaphores and this is apparently to help him himself even with the implementation


00:18:18.380 --> 00:18:26.460
of the semaphore in the new acio code so um this and making sure that things like work correctly


00:18:26.460 --> 00:18:33.180
and using a using an analogy to try to figure out how things are supposed to work um and like


00:18:33.180 --> 00:18:40.620
uh an error so if you've got a an exception happening one of the problems can be it's like


00:18:40.620 --> 00:18:45.660
somebody gets buzzed, they're waiting and they decide they don't want to wait anymore,


00:18:45.660 --> 00:18:51.740
so they go turn their buzzer in. Well, what happens if while they're, when they're just,


00:18:51.740 --> 00:18:56.080
they've decided to turn it in, but it's their turn and they get buzzed and they, but they


00:18:56.080 --> 00:19:00.360
turned it in anyway and they don't want to run. So they're never going to call the release


00:19:00.360 --> 00:19:05.400
code. And so with the common, the interaction between


00:19:05.400 --> 00:19:12.000
cancel and release is, is, is difficult. So there's, there's,


00:19:12.000 --> 00:19:16.240
there's all this stuff and it's so cool to think about this in


00:19:16.240 --> 00:19:19.680
terms of a restaurant because it's easy to visualize. So any


00:19:19.680 --> 00:19:23.320
great article. And then at the end he actually links to the,


00:19:23.320 --> 00:19:27.120
to the code that he was, that he's finished writing. So


00:19:27.120 --> 00:19:30.180
so the links it to, yeah, current code.


00:19:30.180 --> 00:19:31.820
So that's pretty cool.


00:19:31.820 --> 00:19:32.800
- Right on.


00:19:32.800 --> 00:19:34.820
Yeah, semaphores are, I would say,


00:19:34.820 --> 00:19:37.880
these are the things that many people don't really,


00:19:37.880 --> 00:19:42.620
they don't really think to grab and use,


00:19:42.620 --> 00:19:44.300
but they're so incredibly useful.


00:19:44.300 --> 00:19:47.580
Like, so one example, like let's imagine


00:19:47.580 --> 00:19:51.540
your job is to go scan a bunch of URLs


00:19:51.540 --> 00:19:53.380
and ingest a bunch of data,


00:19:53.380 --> 00:19:55.460
and you're gonna run that like 8 a.m. every day


00:19:55.460 --> 00:19:56.620
or, you know, whatever.


00:19:56.620 --> 00:20:03.820
if you've got 10,000 URLs, it would be way, way, way faster to use asyncio


00:20:03.820 --> 00:20:09.580
and HTTPS to kick off those requests. But if you just say for URL in URLs,


00:20:09.580 --> 00:20:14.780
start a task, you got 10,000 pending requests and all that data is coming back into memory,


00:20:14.780 --> 00:20:16.780
and it's gonna, you're gonna have a bad time, right?


00:20:16.780 --> 00:20:17.580
Yeah.


00:20:17.580 --> 00:20:22.380
So one thing you could do is you could create a semaphore and say, you know, I only want to allow


00:20:22.380 --> 00:20:27.380
and then you just do 10, 20, 100 in-flight requests at a time


00:20:27.380 --> 00:20:29.200
and you just create a semaphore of 100


00:20:29.200 --> 00:20:30.900
and you just pass it off to every task


00:20:30.900 --> 00:20:32.320
and they just have to start at the beginning


00:20:32.320 --> 00:20:33.780
and acquire it and release it.


00:20:33.780 --> 00:20:35.520
Boom, you're done.


00:20:35.520 --> 00:20:36.500
You've now created like a,


00:20:36.500 --> 00:20:41.060
I'm going through 10,000 with a straight for loop


00:20:41.060 --> 00:20:45.160
and I'm doing nothing more than 100 at a time guaranteed.


00:20:45.160 --> 00:20:46.000
- Yeah.


00:20:46.000 --> 00:20:47.140
- Beautiful, right?


00:20:47.140 --> 00:20:48.380
- That's a really good analogy.


00:20:48.380 --> 00:20:50.640
I was trying to think of a good one where,


00:20:50.640 --> 00:20:53.880
'cause I was actually even looking through the Python code


00:20:53.880 --> 00:20:57.120
of any cases where they use more than one.


00:20:57.120 --> 00:21:01.160
Like a semaphore with one is just like a lock,


00:21:01.160 --> 00:21:03.520
but if you can allow more than that,


00:21:03.520 --> 00:21:05.920
then it gets interesting.


00:21:05.920 --> 00:21:07.000
- Yeah, absolutely.


00:21:07.000 --> 00:21:11.120
You can think about similar things for like databases


00:21:11.120 --> 00:21:13.640
if it like really can't handle a ton of requests.


00:21:13.640 --> 00:21:15.720
One thing I, now that you point this out,


00:21:15.720 --> 00:21:18.320
I wanna just give a quick shout out to Any.io.


00:21:18.320 --> 00:21:21.220
I interviewed Alex, I believe it was Alex from there,


00:21:21.220 --> 00:21:25.740
who worked on it, and it's got a really cool idea.


00:21:25.740 --> 00:21:27.000
It's similar to the task groups


00:21:27.000 --> 00:21:28.760
and stuff that you talked about.


00:21:28.760 --> 00:21:32.120
And it has this thing called a capacity limiter,


00:21:32.120 --> 00:21:33.840
which is much like a,


00:21:33.840 --> 00:21:37.440
it's very much like a semaphore,


00:21:37.440 --> 00:21:40.000
but a little more async native,


00:21:40.000 --> 00:21:43.320
'cause you can use it in a async context manager,


00:21:43.320 --> 00:21:45.160
like a with block, async with.


00:21:45.160 --> 00:21:47.000
So here I could create just a capacity limiter


00:21:47.000 --> 00:21:49.340
of like my example is 100 and you just say,


00:21:49.340 --> 00:21:53.100
async with create a group for all the items,


00:21:53.100 --> 00:21:54.400
tasks start soon, pass the limiter


00:21:54.400 --> 00:21:57.440
and all the tasks just do like async with this limiter,


00:21:57.440 --> 00:21:59.360
do whatever you're gonna do and boom,


00:21:59.360 --> 00:22:02.360
now you only get end of them running at a time.


00:22:02.360 --> 00:22:03.800
Super easy, very cool.


00:22:03.800 --> 00:22:04.980
- Cool.


00:22:04.980 --> 00:22:07.000
- Okay, that's not actually what I wanted to cover though.


00:22:07.000 --> 00:22:11.400
I wanna talk about some annoying stuff


00:22:11.400 --> 00:22:13.180
that got slightly less annoying.


00:22:14.600 --> 00:22:19.600
security and preventing people from doing just bad stuff


00:22:19.600 --> 00:22:22.440
to your things online, right?


00:22:22.440 --> 00:22:25.700
Web apps and mostly web apps.


00:22:25.700 --> 00:22:27.200
You know, think about a forum,


00:22:27.200 --> 00:22:29.540
people come in there just like bots come in


00:22:29.540 --> 00:22:31.120
and start posting junk.


00:22:31.120 --> 00:22:33.160
Like, I don't know why YouTube can't fix it,


00:22:33.160 --> 00:22:36.120
but I would say about one out of every three shows


00:22:36.120 --> 00:22:39.360
gets some sort of like disgusting,


00:22:39.360 --> 00:22:42.460
come see the ladies over here sort of post


00:22:42.460 --> 00:22:44.240
with clearly text that was like,


00:22:44.240 --> 00:22:46.480
Why is this still allowed, right?


00:22:46.480 --> 00:22:48.400
And if you run a website, you're going


00:22:48.400 --> 00:22:50.360
to run into those kind of problems.


00:22:50.360 --> 00:22:53.040
So we had big problems at TalkByThon training


00:22:53.040 --> 00:22:56.680
with a bunch of bots creating free accounts.


00:22:56.680 --> 00:23:00.080
And they're just free.


00:23:00.080 --> 00:23:02.000
You don't get anything by creating an account.


00:23:02.000 --> 00:23:04.240
I don't know why they were doing it, but they were.


00:23:04.240 --> 00:23:07.680
And so-- but they were doing it from hundreds or thousands


00:23:07.680 --> 00:23:08.440
of different IPs.


00:23:08.440 --> 00:23:09.960
It was super annoying.


00:23:09.960 --> 00:23:12.160
So we ended up having to put a recapture on there.


00:23:12.160 --> 00:23:13.920
And every time I go to the site and I've


00:23:13.920 --> 00:23:17.680
got to sign in, I'm like, oh gosh, here come the crosswalks


00:23:17.680 --> 00:23:20.080
and the stoplights and that's not a bus.


00:23:20.080 --> 00:23:21.520
There's no buses, what do you want me to do?


00:23:21.520 --> 00:23:23.160
You know, like how frustrating this is.


00:23:23.160 --> 00:23:26.240
So Cloudflare, they're doing a bunch of interesting


00:23:26.240 --> 00:23:28.240
branching out of just being a CDN


00:23:28.240 --> 00:23:31.360
and they've announced this thing called Turnstile,


00:23:31.360 --> 00:23:35.080
a user-friendly privacy preserving alternative


00:23:35.080 --> 00:23:36.680
to Captcha or Recaptcha.


00:23:36.680 --> 00:23:38.780
Like Recaptcha is owned by Google


00:23:38.780 --> 00:23:40.720
and like a lot of the stuff that you do there


00:23:40.720 --> 00:23:43.960
get sent back over there, and it's not ideal.


00:23:43.960 --> 00:23:48.320
So also, finding all the crosswalks, not ideal.


00:23:48.320 --> 00:23:50.560
So this thing is something they announced,


00:23:50.560 --> 00:23:53.560
and it's free to use, even if you don't have


00:23:53.560 --> 00:23:55.760
some kind of other reCAPTCHA thing,


00:23:55.760 --> 00:23:56.800
like you're not a customer,


00:23:56.800 --> 00:23:59.220
and you just create an account for free,


00:23:59.220 --> 00:24:01.280
get an API key for this, and use it.


00:24:01.280 --> 00:24:03.240
So here, if you go to the page


00:24:03.240 --> 00:24:06.340
that I'm linking to, the blog.cloudflare.com,


00:24:06.340 --> 00:24:08.400
all that happens is you go there,


00:24:08.400 --> 00:24:10.220
and it just spins for a second.


00:24:10.220 --> 00:24:12.660
It does the work and the magic that Cloudflare


00:24:12.660 --> 00:24:15.620
is already using to verify that you're a human


00:24:15.620 --> 00:24:17.380
and you're a real machine,


00:24:17.380 --> 00:24:19.700
maybe do some sort of like cost,


00:24:19.700 --> 00:24:22.540
make you run like a tight loop for a second or whatever.


00:24:22.540 --> 00:24:25.040
And then you're verified.


00:24:25.040 --> 00:24:25.880
And if it doesn't work,


00:24:25.880 --> 00:24:26.800
then you can click a little button


00:24:26.800 --> 00:24:29.640
and verify you're human, hopefully.


00:24:29.640 --> 00:24:33.580
But yeah, so this is pretty cool.


00:24:33.580 --> 00:24:36.900
You can now replace your reCAPTCHA with that.


00:24:36.900 --> 00:24:38.180
And it's pretty straightforward.


00:24:38.180 --> 00:24:42.500
Basically you drop some JavaScript onto the page


00:24:42.500 --> 00:24:43.860
and a little widget,


00:24:43.860 --> 00:24:45.220
and then you put the widget in your form.


00:24:45.220 --> 00:24:48.180
If somebody submits it, it comes with that validation,


00:24:48.180 --> 00:24:50.680
like some sort of a validation code


00:24:50.680 --> 00:24:53.280
that was created by Cloudflare.


00:24:53.280 --> 00:24:55.940
On the server side, you want to verify that


00:24:55.940 --> 00:24:57.300
'cause its presence isn't enough


00:24:57.300 --> 00:24:59.540
'cause anybody could just send like garbage


00:24:59.540 --> 00:25:01.500
with the right form ID, right?


00:25:01.500 --> 00:25:04.060
So there's a server side API,


00:25:04.060 --> 00:25:06.940
you've got a call to validate that


00:25:06.940 --> 00:25:08.740
and make sure that yeah, this is actually,


00:25:08.740 --> 00:25:11.060
it came from your domain, it just was created,


00:25:11.060 --> 00:25:14.220
it is a real one, it's a unique one and all those things.


00:25:14.220 --> 00:25:15.820
- Oh, cool.


00:25:15.820 --> 00:25:17.860
- Yeah, so anyway, if people wanna use this,


00:25:17.860 --> 00:25:19.700
it seems pretty awesome.


00:25:19.700 --> 00:25:22.380
Over on TalkBython, I switched the things over to it


00:25:22.380 --> 00:25:23.820
and we'll see how it goes.


00:25:23.820 --> 00:25:26.180
So for example, if you wanna get notified


00:25:26.180 --> 00:25:28.660
about our mailing list, now you've got to


00:25:28.660 --> 00:25:32.420
wait about three quarters of a second


00:25:32.420 --> 00:25:34.420
before typing in your email address.


00:25:34.420 --> 00:25:35.700
Must feel like some kind of beast


00:25:35.700 --> 00:25:37.760
and you can type it in, like select the form,


00:25:37.760 --> 00:25:39.680
type your email address and hit subscribe


00:25:39.680 --> 00:25:42.120
before like a second is up, right?


00:25:42.120 --> 00:25:44.160
But that's pretty much it.


00:25:44.160 --> 00:25:48.360
You hit submit and then it runs some magic on the server.


00:25:48.360 --> 00:25:49.480
Right?


00:25:49.480 --> 00:25:53.400
But I'm doing this live.


00:25:53.400 --> 00:25:54.880
I'm gonna check out pypi.org.


00:25:54.880 --> 00:25:57.360
If you check out turnstile,


00:25:57.360 --> 00:25:58.680
there's a bunch of stuff up here.


00:25:58.680 --> 00:26:00.840
There's like rate limiting things and other stuff,


00:26:00.840 --> 00:26:02.280
nothing about Cloudflare.


00:26:03.240 --> 00:26:06.880
So I created for the moment a GitHub gist


00:26:06.880 --> 00:26:08.600
that has the server-side implementation


00:26:08.600 --> 00:26:11.300
for anybody who wants to do this in Python,


00:26:11.300 --> 00:26:12.480
modern Python anyway.


00:26:12.480 --> 00:26:13.820
- Nice.


00:26:13.820 --> 00:26:14.660
- Cool, right?


00:26:14.660 --> 00:26:18.680
So over here, you just need this one file,


00:26:18.680 --> 00:26:20.580
this one module you can use here.


00:26:20.580 --> 00:26:22.140
This one's synchronous,


00:26:22.140 --> 00:26:25.920
but you could just as well use HTTPX and async


00:26:25.920 --> 00:26:28.960
if you wanna do this validation in like an async view.


00:26:28.960 --> 00:26:30.840
So it has a Pydantic models,


00:26:30.840 --> 00:26:32.740
like here's what you gotta send over.


00:26:32.740 --> 00:26:36.020
And here's what you'll expect to get back


00:26:36.020 --> 00:26:38.740
from the API endpoints, little examples.


00:26:38.740 --> 00:26:41.340
And then it just has one function called validate.


00:26:41.340 --> 00:26:43.460
Given the thing they submitted in the form


00:26:43.460 --> 00:26:45.700
and their user IP, just so you have that


00:26:45.700 --> 00:26:48.060
as part of your information of what happened,


00:26:48.060 --> 00:26:50.020
they need to know that.


00:26:50.020 --> 00:26:51.700
And that's it, and it's kind of a cool example


00:26:51.700 --> 00:26:53.580
of seeing how to do request response


00:26:53.580 --> 00:26:57.200
with Pydantic to APIs as well.


00:26:57.200 --> 00:26:59.740
- That's pretty cool, nice.


00:26:59.740 --> 00:27:00.580
- Yeah.


00:27:00.580 --> 00:27:08.220
Awesome. Well, that's a really good stuff. So here's the thing. Right now it's not a


00:27:08.220 --> 00:27:13.900
package. I'm not sure I need more open source projects to manage. However, let's say...


00:27:13.900 --> 00:27:16.740
I was curious why you didn't make a package out of that.


00:27:16.740 --> 00:27:20.660
Well, because I only did this like Monday, right? So it's only... I kind of wanted to


00:27:20.660 --> 00:27:27.820
stabilize a little. If sufficiently many people shoot me a text on Twitter, like a @mention


00:27:27.820 --> 00:27:30.700
M. Kennedy says, hey, please make this a package


00:27:30.700 --> 00:27:32.820
so I can use it too, more directly,


00:27:32.820 --> 00:27:34.100
or we could all contribute.


00:27:34.100 --> 00:27:36.340
Enough people do that, I'll turn it into a package.


00:27:36.340 --> 00:27:37.300
But I just haven't had the time.


00:27:37.300 --> 00:27:38.300
'Cause I've been playing with other stuff


00:27:38.300 --> 00:27:39.780
that I'll talk about in a minute.


00:27:39.780 --> 00:27:43.900
Can only have so many projects, you know.


00:27:43.900 --> 00:27:46.780
- Yeah, yeah.


00:27:46.780 --> 00:27:48.620
- All right, well, that brings us


00:27:48.620 --> 00:27:50.460
to all of our main items, Brian.


00:27:50.460 --> 00:27:54.480
- Yeah, so one of the things for extras,


00:27:55.460 --> 00:27:58.380
I wanted to pop up just briefly.


00:27:58.380 --> 00:27:59.640
I was looking at a,


00:27:59.640 --> 00:28:04.700
so I was looking at, oh, let's go to yours too.


00:28:04.700 --> 00:28:06.180
Do you have any extras?


00:28:06.180 --> 00:28:07.620
- I do have some extras.


00:28:07.620 --> 00:28:08.460
- Sweet.


00:28:08.460 --> 00:28:09.620
- You go first though, I have a ton.


00:28:09.620 --> 00:28:12.540
- Okay, so I just have a couple.


00:28:12.540 --> 00:28:17.100
So this article says it's from testdriven.io,


00:28:17.100 --> 00:28:20.340
Heroku alternatives for Python-based applications.


00:28:20.340 --> 00:28:24.440
And to be fair, it's pretty fair to Heroku also.


00:28:24.440 --> 00:28:27.840
So really it isn't don't use Heroku.


00:28:27.840 --> 00:28:30.180
It is, it's kind of like,


00:28:30.180 --> 00:28:31.920
what are all the things you can use?


00:28:31.920 --> 00:28:36.040
So it goes through Heroku, of course,


00:28:36.040 --> 00:28:38.160
but then it also goes through,


00:28:38.160 --> 00:28:40.760
does the pros and some description and pros and cons


00:28:40.760 --> 00:28:45.400
for DigitalOcean app platform and render and fly.io.


00:28:45.400 --> 00:28:49.000
And even some that we don't hear too much about


00:28:49.000 --> 00:28:54.000
like Engine Yard, Railway.app,


00:28:54.240 --> 00:28:56.440
- Yeah, that's a ton of, that's a lot of reviews.


00:28:56.440 --> 00:28:57.880
- Yeah, it's pretty neat.


00:28:57.880 --> 00:29:00.400
- And you know, these are all in the platform


00:29:00.400 --> 00:29:03.320
as a service equivalent, it looks like.


00:29:03.320 --> 00:29:04.160
- Yeah.


00:29:04.160 --> 00:29:06.400
- It's not like just, here's where you run VMs.


00:29:06.400 --> 00:29:07.320
Like, well, okay, that's great,


00:29:07.320 --> 00:29:08.680
but that's not what Heroku was for.


00:29:08.680 --> 00:29:09.520
- Yeah.


00:29:09.520 --> 00:29:11.520
- So, I mean, I think that's a really cool thing.


00:29:11.520 --> 00:29:12.360
- Yeah.


00:29:12.360 --> 00:29:13.200
- And I think that's a really cool thing.


00:29:13.200 --> 00:29:14.020
- Yeah.


00:29:14.020 --> 00:29:14.860
- And I think that's a really cool thing.


00:29:14.860 --> 00:29:15.700
- Yeah.


00:29:15.700 --> 00:29:16.520
- And I think that's a really cool thing.


00:29:16.520 --> 00:29:17.360
- Yeah.


00:29:17.360 --> 00:29:18.200
- And I think that's a really cool thing.


00:29:18.200 --> 00:29:19.020
- Yeah.


00:29:19.020 --> 00:29:19.860
- And I think that's a really cool thing.


00:29:19.860 --> 00:29:20.700
- Yeah.


00:29:20.700 --> 00:29:22.340
here's where you run VMs.


00:29:22.340 --> 00:29:23.280
Like, well, okay, that's great,


00:29:23.280 --> 00:29:25.720
but that's not what Heroku was helping me with.


00:29:25.720 --> 00:29:28.860
- Yeah, and so that's actually one of the fair comments.


00:29:28.860 --> 00:29:30.540
It says like, for instance, Heroku,


00:29:30.540 --> 00:29:33.860
one of the things it says is the price can go up as you,


00:29:33.860 --> 00:29:35.540
it's not too bad at the start,


00:29:35.540 --> 00:29:37.700
but it can go up as you grow.


00:29:37.700 --> 00:29:39.780
And same with all of these really,


00:29:39.780 --> 00:29:44.780
but the, and it's how many times more than running it


00:29:44.780 --> 00:29:47.860
just directly on AWS.


00:29:47.860 --> 00:29:52.260
but it's a be careful because that's not a platform


00:29:52.260 --> 00:29:55.220
as a service is not a fair comparison


00:29:55.220 --> 00:29:57.300
to just running it all yourself


00:29:57.300 --> 00:30:00.220
because then you have to do it all yourself.


00:30:00.220 --> 00:30:01.060
- Exactly.


00:30:01.060 --> 00:30:01.900
- Kind of paying the service


00:30:01.900 --> 00:30:04.100
instead of paying somebody to monitor it for you.


00:30:04.100 --> 00:30:06.580
So I think it's reasonable.


00:30:06.580 --> 00:30:09.780
So the other thing I wanted to bring up was


00:30:09.780 --> 00:30:11.180
we brought it up last time


00:30:11.180 --> 00:30:15.220
and maybe the time before the pytest course is going well.


00:30:15.220 --> 00:30:18.580
So I'm glad people are getting use out of the pytest course.


00:30:18.580 --> 00:30:21.300
But I wanted, I've been kicking around the idea


00:30:21.300 --> 00:30:24.020
of doing a cohort based thing,


00:30:24.020 --> 00:30:26.140
something like the pytest course,


00:30:26.140 --> 00:30:29.540
not the exact same content, but similar sort of things,


00:30:29.540 --> 00:30:32.340
get people up to speed and do it as a cohort.


00:30:32.340 --> 00:30:33.900
And I'd like people to get in touch with me


00:30:33.900 --> 00:30:35.500
if they think that's a good idea.


00:30:35.500 --> 00:30:37.820
I'm thinking about maybe doing it in December,


00:30:37.820 --> 00:30:39.460
but I'm not sure, December or January.


00:30:39.460 --> 00:30:41.080
So hit me up on Twitter,


00:30:41.080 --> 00:30:43.960
or you can get to the, my contact form


00:30:43.960 --> 00:30:45.840
on testing code as well.


00:30:45.840 --> 00:30:46.680
It'll get to me.


00:30:46.680 --> 00:30:47.880
So yeah, let me know.


00:30:47.880 --> 00:30:49.320
- Those live events are really nice.


00:30:49.320 --> 00:30:50.160
All right.


00:30:50.160 --> 00:30:52.160
It's a cool experience.


00:30:52.160 --> 00:30:54.200
So hopefully that goes off.


00:30:54.200 --> 00:30:55.800
- Yeah, that'd be neat.


00:30:55.800 --> 00:30:56.800
- Indeed.


00:30:56.800 --> 00:30:57.620
All right.


00:30:57.620 --> 00:31:00.920
Would you believe that just last night


00:31:00.920 --> 00:31:02.720
I was writing some C code?


00:31:02.720 --> 00:31:03.560
- No.


00:31:03.560 --> 00:31:04.400
- I typically do.


00:31:04.400 --> 00:31:06.320
I'm like, come on, another semicolon I forgot.


00:31:06.320 --> 00:31:07.320
Are you kidding me?


00:31:07.320 --> 00:31:08.640
It's been a while.


00:31:08.640 --> 00:31:09.920
But I actually did a pretty good job


00:31:09.920 --> 00:31:11.680
without pulling up any references or anything.


00:31:11.680 --> 00:31:14.040
So more on that later, but I just wanted to give


00:31:14.040 --> 00:31:18.200
a quick shout out to this project called CPP Front


00:31:18.200 --> 00:31:19.580
from Herb Sutter.


00:31:19.580 --> 00:31:23.160
It's an experimental compiler for an alternative syntax


00:31:23.160 --> 00:31:26.960
to C++ that would make the language 10 times simpler,


00:31:26.960 --> 00:31:28.760
safer, and more toolable.


00:31:28.760 --> 00:31:32.360
I think it basically is, as the name would say,


00:31:32.360 --> 00:31:35.400
like CPP Front is like a slightly different language


00:31:35.400 --> 00:31:36.760
that compiles to C++.


00:31:36.760 --> 00:31:40.520
so it has an interoperability and whatnot.


00:31:40.520 --> 00:31:44.440
People do a lot of C++ for low-level integration


00:31:44.440 --> 00:31:47.440
with Python and things might find this interesting.


00:31:47.440 --> 00:31:49.880
So you can jump over to the GitHub repo,


00:31:49.880 --> 00:31:52.000
and they have got some examples in here.


00:31:52.000 --> 00:31:53.800
Let me see if I can find that.


00:31:53.800 --> 00:31:58.080
I think you've got to maybe go check out the test


00:31:58.080 --> 00:31:59.280
or something like that.


00:31:59.280 --> 00:32:04.000
They don't have great documentation.


00:32:04.000 --> 00:32:05.760
CP2.


00:32:05.760 --> 00:32:07.940
It's just text, show it to me.


00:32:07.940 --> 00:32:11.420
Oh wait, no, it's not, it's four megs, but it's okay.


00:32:11.420 --> 00:32:16.420
Anyway, it's got some pretty funky syntax,


00:32:16.420 --> 00:32:19.160
but it also looks pretty fun.


00:32:19.160 --> 00:32:20.220
People can check that out.


00:32:20.220 --> 00:32:23.140
So if that's interesting, then go for it.


00:32:23.140 --> 00:32:27.960
I don't know where I saw the cool examples or something,


00:32:27.960 --> 00:32:30.060
but nah, oh well, they had some in here.


00:32:30.060 --> 00:32:34.220
What's different about this?


00:32:34.220 --> 00:32:39.940
Where did I find them?


00:32:39.940 --> 00:32:40.940
Oh, well.


00:32:40.940 --> 00:32:42.500
You can look through the notes here.


00:32:42.500 --> 00:32:46.140
The language, it hardly looks like C++,


00:32:46.140 --> 00:32:47.940
but it's still the same kind of thing.


00:32:47.940 --> 00:32:49.440
What do you think about this, Brian?


00:32:49.440 --> 00:32:51.100
You do some C.


00:32:51.100 --> 00:32:52.940
>>Well, I've been doing it for so long


00:32:52.940 --> 00:32:56.740
that I don't know if it's that hard to do C++.


00:32:56.740 --> 00:33:01.780
I mean, it's hard to get it right, but there's--


00:33:01.780 --> 00:33:03.380
I don't know that we have a lot of help now


00:33:03.380 --> 00:33:07.780
with like the modern compilers and linters and everything.


00:33:07.780 --> 00:33:08.620
But yeah.


00:33:08.620 --> 00:33:13.440
But I thought, I always think it's a neat idea


00:33:13.440 --> 00:33:14.780
if it's really easier.


00:33:14.780 --> 00:33:17.860
That little snippet you showed me didn't look easier, but.


00:33:17.860 --> 00:33:18.700
- Here you go.


00:33:18.700 --> 00:33:21.700
Or here's an example.


00:33:21.700 --> 00:33:23.820
If you check out this little graphic on the readme


00:33:23.820 --> 00:33:26.900
called it says cat hello.cpp2.


00:33:26.900 --> 00:33:29.300
- Okay.


00:33:29.300 --> 00:33:31.460
- It looks a little bit like Python type pens, doesn't it?


00:33:31.460 --> 00:33:34.440
like the way you specify the return value and stuff.


00:33:34.440 --> 00:33:35.880
- Yeah.


00:33:35.880 --> 00:33:37.120
- Yeah.


00:33:37.120 --> 00:33:38.860
Anyway, could be fun.


00:33:38.860 --> 00:33:40.360
We'll see if it goes anywhere.


00:33:40.360 --> 00:33:41.800
All right, a few other things.


00:33:41.800 --> 00:33:43.320
TypeScript is definitely something


00:33:43.320 --> 00:33:44.740
that's going somewhere.


00:33:44.740 --> 00:33:50.040
Matt Kramer pointed out that Jeff Glass


00:33:50.040 --> 00:33:53.800
has been doing a bunch of things with PyScript lately.


00:33:53.800 --> 00:33:55.360
So I wanna highlight one thing


00:33:55.360 --> 00:33:58.520
and then I'm gonna dive into it more next week.


00:33:58.520 --> 00:34:00.000
I just wanna put this on people's radar.


00:34:00.000 --> 00:34:05.000
So PyScript September edition is out


00:34:05.000 --> 00:34:07.200
with lots of changes on it.


00:34:07.200 --> 00:34:11.020
So probably the easiest way to see that


00:34:11.020 --> 00:34:13.200
is to click on this blog post I got down there.


00:34:13.200 --> 00:34:15.000
So if you've been doing any PyScript,


00:34:15.000 --> 00:34:16.080
you're gonna wanna know about this


00:34:16.080 --> 00:34:18.980
'cause it's like super breaking changes.


00:34:18.980 --> 00:34:21.760
So for example, you used to have to say,


00:34:21.760 --> 00:34:24.720
use this thing pyenv for configuring


00:34:24.720 --> 00:34:26.440
like what libraries you would use


00:34:26.440 --> 00:34:28.800
and how you execute it.


00:34:28.800 --> 00:34:29.960
that thing's gone.


00:34:29.960 --> 00:34:32.320
Now you've got like a package section of a PyConfig


00:34:32.320 --> 00:34:34.180
and a path section for files,


00:34:34.180 --> 00:34:36.580
a bunch of other things,


00:34:36.580 --> 00:34:39.340
better logging, multiple run times,


00:34:39.340 --> 00:34:42.640
upgraded Pyrodied and whatnot,


00:34:42.640 --> 00:34:45.260
but check that out if you're doing PyScript.


00:34:45.260 --> 00:34:48.560
- Nice.


00:34:48.560 --> 00:34:50.480
And they're not even zero over yet.


00:34:50.480 --> 00:34:51.920
- Yeah.


00:34:51.920 --> 00:34:56.920
Well, we're gonna need some kind of like new calendar event


00:34:57.960 --> 00:35:00.120
or something. (laughs)


00:35:00.120 --> 00:35:01.440
Yeah, 'cause they're Calvary.


00:35:01.440 --> 00:35:02.280
- Yeah.


00:35:02.280 --> 00:35:06.880
- Follow up, I talked about NextDNS last time.


00:35:06.880 --> 00:35:10.220
That's like basically, like for people do pie holes,


00:35:10.220 --> 00:35:11.800
it's like pie hole, but it's on the internet,


00:35:11.800 --> 00:35:13.500
you don't have to manage it.


00:35:13.500 --> 00:35:17.420
I said I didn't really try it out that much last time.


00:35:17.420 --> 00:35:20.540
So I went in and I did an interesting experiment


00:35:20.540 --> 00:35:22.240
on the family, including myself.


00:35:22.240 --> 00:35:24.960
I went to the router and I just changed it


00:35:24.960 --> 00:35:29.880
to use this blocking, ad blocking, malware blocking DNS


00:35:29.880 --> 00:35:32.920
as like for all the network, which is good


00:35:32.920 --> 00:35:35.880
'cause like my TV can no longer do bad things


00:35:35.880 --> 00:35:36.980
that it was doing.


00:35:36.980 --> 00:35:41.240
My kid gets ad blocking without knowing it,


00:35:41.240 --> 00:35:44.040
even visitors, I suppose, right?


00:35:44.040 --> 00:35:46.160
And I was like, all right, well, let's see what breaks.


00:35:46.160 --> 00:35:48.160
Who has a, Michael, I can't do this anymore.


00:35:48.160 --> 00:35:50.460
Like nothing broke, which is great.


00:35:50.460 --> 00:35:54.600
So I'm super psyched about that.


00:35:54.600 --> 00:35:57.880
And if you create it, actually you can create a free,


00:35:57.880 --> 00:35:59.400
what I've learned is you get a free account


00:35:59.400 --> 00:36:03.720
for up to 300,000 DNS requirements a month.


00:36:03.720 --> 00:36:05.820
And if what happens after that is it just falls back


00:36:05.820 --> 00:36:08.360
to like standard DNS with no blocking,


00:36:08.360 --> 00:36:09.440
just pretty awesome.


00:36:09.440 --> 00:36:11.160
And there's like $2.


00:36:11.160 --> 00:36:12.120
There's not an ad for them.


00:36:12.120 --> 00:36:13.840
It's just, I think it's pretty awesome.


00:36:13.840 --> 00:36:18.840
So I went and ran, I went to adblock-tester.com


00:36:21.120 --> 00:36:25.120
With Vivaldi, with its max blocking, no plugins,


00:36:25.120 --> 00:36:28.360
no extensions for ad blocking, just the built-in one,


00:36:28.360 --> 00:36:30.600
'cause I don't wanna install more extensions.


00:36:30.600 --> 00:36:36.800
But with that turned on and the Next DNS, Private DNS,


00:36:36.800 --> 00:36:40.000
I get 96 out of 100 on AdBlockTester.


00:36:40.000 --> 00:36:43.560
With Brave, I got 100 out of 100, which is pretty awesome.


00:36:43.560 --> 00:36:48.560
But even if I turn all the blocking off on Vivaldi,


00:36:48.720 --> 00:36:51.760
I still get 80 out of 100 just using that DNS.


00:36:51.760 --> 00:36:54.600
That's pretty awesome, right?


00:36:54.600 --> 00:36:57.580
It's like 80%, everything is just killed


00:36:57.580 --> 00:36:59.060
before it ever gets through the network.


00:36:59.060 --> 00:37:00.980
- Oh, I was curious what the number was.


00:37:00.980 --> 00:37:03.800
So it's not 80 get through, it's 80 get blocked.


00:37:03.800 --> 00:37:05.260
- It's 80 blocked.


00:37:05.260 --> 00:37:06.940
So you can actually scroll through, it'll show you.


00:37:06.940 --> 00:37:10.660
Like the wildcat Giphy wasn't blocked.


00:37:10.660 --> 00:37:13.220
The static image wasn't blocked basically.


00:37:13.220 --> 00:37:17.060
But pretty much everything else was blocked.


00:37:17.060 --> 00:37:21.260
So, yeah, pretty awesome.


00:37:21.260 --> 00:37:22.100
- Yeah. - Yeah.


00:37:22.100 --> 00:37:24.640
And last thing here,


00:37:24.640 --> 00:37:28.860
one of the things you gotta do to make this work,


00:37:28.860 --> 00:37:30.140
this is like a new extra,


00:37:30.140 --> 00:37:31.820
but it is like one flows into another.


00:37:31.820 --> 00:37:33.820
One of the things you gotta do to make this work


00:37:33.820 --> 00:37:38.020
is if your IP address changes and you have a crap router,


00:37:38.020 --> 00:37:39.460
I have like an insanely good router


00:37:39.460 --> 00:37:42.500
that has crap configuration, let's put it that way,


00:37:42.500 --> 00:37:47.500
where I can't do DNS over HTTPS,


00:37:47.500 --> 00:37:50.060
or set up any details,


00:37:50.060 --> 00:37:54.460
I can just say, here's the four numbers for the DNS server.


00:37:54.460 --> 00:37:55.740
- Yeah. - Right?


00:37:55.740 --> 00:37:56.780
Just the IP address.


00:37:56.780 --> 00:37:59.180
Well, if that's the way you do it,


00:37:59.180 --> 00:38:00.980
and you have some account that does blocking,


00:38:00.980 --> 00:38:04.020
you've got to go into your DNS account


00:38:04.020 --> 00:38:07.700
and associate your IP address with your account


00:38:07.700 --> 00:38:11.760
by just like clicking a button or calling an API endpoint.


00:38:11.760 --> 00:38:14.200
but what do you do when your IP address changes?


00:38:14.200 --> 00:38:15.040
How do you remember?


00:38:15.040 --> 00:38:17.360
Like all your ad blocking stops


00:38:17.360 --> 00:38:19.520
every time maybe the power goes out


00:38:19.520 --> 00:38:21.080
and you gotta like your things come back on


00:38:21.080 --> 00:38:22.680
and they get a new IP address.


00:38:22.680 --> 00:38:24.760
So I was like, well, what can I do?


00:38:24.760 --> 00:38:28.280
I've always wanted to have like a little circuit Python


00:38:28.280 --> 00:38:30.120
project that would be fun.


00:38:30.120 --> 00:38:32.240
So originally I wanted to get a Raspberry Pi.


00:38:32.240 --> 00:38:33.840
Those are unattainable it turns out.


00:38:33.840 --> 00:38:36.320
Have you tried to get a Raspberry Pi, Brian?


00:38:36.320 --> 00:38:38.520
- Not recently, years ago, but.


00:38:38.520 --> 00:38:40.480
- Yeah, I think they're like 35, 40 bucks


00:38:40.480 --> 00:38:43.480
for a new nice one, but they're all sold out.


00:38:43.480 --> 00:38:45.920
And you can find them on Amazon for like $200.


00:38:45.920 --> 00:38:46.880
People have bought them up


00:38:46.880 --> 00:38:48.880
and then are scalping them back to you on Amazon,


00:38:48.880 --> 00:38:50.760
which is super frustrating. - Lame.


00:38:50.760 --> 00:38:52.040
- Lame.


00:38:52.040 --> 00:38:57.040
You can find them for about $100 on eBay, right?


00:38:57.040 --> 00:38:58.560
Anyway, they're hard to get.


00:38:58.560 --> 00:39:01.240
And then if you get them, they're way marked up


00:39:01.240 --> 00:39:02.120
and it's kind of frustrating.


00:39:02.120 --> 00:39:03.560
Well, what else could I use?


00:39:03.560 --> 00:39:04.640
So check this thing out.


00:39:04.640 --> 00:39:05.840
See what I got on the screen here?


00:39:05.840 --> 00:39:15.920
this, this Adafruit ESP 32 dash S2 feather is a full blown circuit Python and Arduino


00:39:15.920 --> 00:39:19.040
basically for $17 and 50 cents.


00:39:19.040 --> 00:39:22.400
And it's in stock.


00:39:22.400 --> 00:39:25.080
So I got that yesterday.


00:39:25.080 --> 00:39:28.600
And just to give you a sense of how small it is, like if you put it in your hand, it's


00:39:28.600 --> 00:39:30.800
probably two thirds the size of your hand.


00:39:30.800 --> 00:39:34.840
And it's a full 240 megahertz computer,


00:39:34.840 --> 00:39:36.760
four megs of RAM,


00:39:36.760 --> 00:39:41.400
Wi-Fi, Bluetooth, temperature.


00:39:41.400 --> 00:39:45.380
But the most important thing is Wi-Fi, make no doubt.


00:39:45.380 --> 00:39:46.840
And I see Paul Cutler out there.


00:39:46.840 --> 00:39:47.680
Yes, thank you, Paul.


00:39:47.680 --> 00:39:49.060
I was actually thinking of you last night


00:39:49.060 --> 00:39:50.040
when I was working on this.


00:39:50.040 --> 00:39:51.400
It took a bit of time to set up


00:39:51.400 --> 00:39:52.400
and it was a little bit painful,


00:39:52.400 --> 00:39:54.760
like getting it configured from,


00:39:54.760 --> 00:39:56.560
originally it was Arduino, which is C.


00:39:56.560 --> 00:39:58.760
So I was writing, I tried to do all this stuff in C,


00:39:58.760 --> 00:40:01.660
which basically tried to like call that endpoint


00:40:01.660 --> 00:40:03.880
and pull out my IP address and everything seemed fine


00:40:03.880 --> 00:40:07.600
except for nothing I could find supports HTTPS and C.


00:40:07.600 --> 00:40:10.240
It only, all the rest frameworks


00:40:10.240 --> 00:40:13.040
only supported HTTP unencrypted.


00:40:13.040 --> 00:40:15.600
I'm like, what endpoint is unencrypted these days?


00:40:15.600 --> 00:40:17.040
What is this madness?


00:40:17.040 --> 00:40:17.880
Give me some requests.


00:40:17.880 --> 00:40:20.100
So I got a CircuitPython going on it.


00:40:20.100 --> 00:40:24.120
And now it's happily sitting over there in the corner,


00:40:24.120 --> 00:40:26.800
sending me little Rake reports through like,


00:40:26.800 --> 00:40:29.560
sort of like Morse code through its LED.


00:40:29.560 --> 00:40:30.920
And then, yeah, it's beautiful.


00:40:30.920 --> 00:40:33.960
I just plug it into the power and it just goes constantly,


00:40:33.960 --> 00:40:36.640
checks my IP address, updates that DNS setting


00:40:36.640 --> 00:40:38.120
periodically with an API.


00:40:38.120 --> 00:40:40.600
- Okay, so it's monitoring,


00:40:40.600 --> 00:40:45.000
and if your IP address changes, it uploads it?


00:40:45.000 --> 00:40:47.220
- Yeah, basically it just has to call the API


00:40:47.220 --> 00:40:49.160
from the network and that'll go,


00:40:49.160 --> 00:40:50.080
well, wherever you're coming from,


00:40:50.080 --> 00:40:52.640
that's where we're gonna treat you as being from.


00:40:52.640 --> 00:40:53.760
- Okay, nice.


00:40:53.760 --> 00:40:55.480
- Yeah, you might say, well, why don't you just run


00:40:55.480 --> 00:40:57.280
that Python code on your computer,


00:40:57.280 --> 00:40:59.560
because my computer is running a VPN,


00:40:59.560 --> 00:41:02.120
which is not the right IP address.


00:41:02.120 --> 00:41:04.880
So, all my devices I can't run it on,


00:41:04.880 --> 00:41:06.320
I don't want to run a whole computer for it.


00:41:06.320 --> 00:41:10.800
So like this thing is incredibly small and cheap,


00:41:10.800 --> 00:41:12.120
and it was just a fun project.


00:41:12.120 --> 00:41:13.940
- Nice use of that, cool.


00:41:13.940 --> 00:41:16.040
- Yeah, yeah, so that was a lot of fun.


00:41:16.040 --> 00:41:21.160
A lot of learning, a lot of differences with CircuitPython.


00:41:21.160 --> 00:41:24.920
Similar, but then, wait, why doesn't that work?


00:41:24.920 --> 00:41:27.520
like, oh, I want to find out, you know, the relative path is,


00:41:27.520 --> 00:41:30.400
oh, there's no pathlib. Sorry. Oh, well, let me try again. Let


00:41:30.400 --> 00:41:32.760
me find some other way to answer that question. Oh, yeah.


00:41:32.760 --> 00:41:38.240
Yep. All right. Well, those are all my items. I know I had a


00:41:38.240 --> 00:41:39.640
bunch of extras, but there they are.


00:41:39.640 --> 00:41:41.840
That's all right. What do we have a joke?


00:41:41.840 --> 00:41:46.200
Oh, you know that we do. So following on like one of the


00:41:46.200 --> 00:41:49.720
things I had last night, I was like, God, why? Why can I get


00:41:49.720 --> 00:41:52.800
CircuitPython installed in this? And it was when it came out of


00:41:52.800 --> 00:41:54.880
the box from Adafruit, maybe I'm missing something,


00:41:54.880 --> 00:41:58.400
but it didn't show up as a drive.


00:41:58.400 --> 00:42:02.400
It only could be communicated with over the serial port.


00:42:02.400 --> 00:42:05.080
And the way that you normally install CircuitPython


00:42:05.080 --> 00:42:08.200
is you drag this bootloader just over the drive


00:42:08.200 --> 00:42:11.160
and it just restarts and off it goes.


00:42:11.160 --> 00:42:12.400
I'm like, well, how do I get this on?


00:42:12.400 --> 00:42:14.360
It just wouldn't work, wouldn't work.


00:42:14.360 --> 00:42:16.520
I'm trying all these things and eventually I figured


00:42:16.520 --> 00:42:19.560
there's like a sequence of little clicks I gotta do


00:42:19.560 --> 00:42:21.880
on like some of the buttons to like put it into a mode


00:42:21.880 --> 00:42:22.880
then I could do it.


00:42:22.880 --> 00:42:25.320
I could have used some help, okay?


00:42:25.320 --> 00:42:29.980
So, this woman Annie here, she's got it figured out.


00:42:29.980 --> 00:42:34.120
If I just went on to Stack Overflow or to Reddit


00:42:34.120 --> 00:42:35.480
or whatever and post that,


00:42:35.480 --> 00:42:36.560
people are just gonna ignore it, right?


00:42:36.560 --> 00:42:37.480
They're gonna, "Yeah, whatever.


00:42:37.480 --> 00:42:38.940
"Newbie, he doesn't know what he's doing.


00:42:38.940 --> 00:42:40.080
"Just go away."


00:42:40.080 --> 00:42:43.420
However, Annie has another idea.


00:42:43.420 --> 00:42:45.420
She says, "Every time I have a programming question


00:42:45.420 --> 00:42:47.520
"and I really need help, I post it on Reddit


00:42:47.520 --> 00:42:49.400
"and then I log in with another account


00:42:49.400 --> 00:42:52.800
to reply to it with an obscenely incorrect answer.


00:42:52.800 --> 00:42:54.400
People don't care about helping each other,


00:42:54.400 --> 00:42:56.480
but they love correcting others.


00:42:56.480 --> 00:42:58.440
This works 100% of the time.


00:42:58.440 --> 00:43:00.600
(laughing)


00:43:00.600 --> 00:43:01.880
- That's pretty funny.


00:43:01.880 --> 00:43:04.040
- Yeah, I bet it works too.


00:43:04.040 --> 00:43:05.000
- Yeah.


00:43:05.000 --> 00:43:05.960
- Right, if you went in there,


00:43:05.960 --> 00:43:08.560
like what you need to do is just type dash R,


00:43:08.560 --> 00:43:11.000
you know, Rm dash Rf on forward slash.


00:43:11.000 --> 00:43:12.600
(laughing)


00:43:12.600 --> 00:43:14.840
No, no, no, don't do that.


00:43:14.840 --> 00:43:17.600
- Yeah, it's a different take on it.


00:43:17.600 --> 00:43:22.400
- And so I used to do a similar thing of just post a blog post


00:43:22.400 --> 00:43:27.160
with the wrong answer or a bad tutorial


00:43:27.160 --> 00:43:31.560
and leave comments on and then let people tell me


00:43:31.560 --> 00:43:33.720
how much of an idiot I am and then delete that


00:43:33.720 --> 00:43:35.120
and write the real post.


00:43:35.120 --> 00:43:38.600
- Thank you, I incorporated your changes, really appreciate it.


00:43:38.600 --> 00:43:41.160
- I tried to give people credit, of course.


00:43:41.160 --> 00:43:43.200
- Of course, of course, awesome.


00:43:43.200 --> 00:43:46.280
Well, here's a tip if people need help,


00:43:46.280 --> 00:43:48.200
You just gotta have that secondary Reddit account


00:43:48.200 --> 00:43:50.420
to get in there and stir the pot.


00:43:50.420 --> 00:43:51.260
- Or a friend.


00:43:51.260 --> 00:43:52.100
So you ask.


00:43:52.100 --> 00:43:53.380
- Or a friend, that's right.


00:43:53.380 --> 00:43:54.220
- Tap a friend.


00:43:54.220 --> 00:43:55.100
- Hey, could you just come answer this really,


00:43:55.100 --> 00:43:56.560
like with this bad answer?


00:43:56.560 --> 00:43:57.400
- Yeah.


00:43:57.400 --> 00:44:00.260
That's a good idea.


00:44:00.260 --> 00:44:01.980
- Indeed. - That's nice.


00:44:01.980 --> 00:44:05.220
All right, well, thanks again for a wonderful episode.


00:44:05.220 --> 00:44:06.860
- You bet, lots of fun.


00:44:06.860 --> 00:44:07.700
Thanks for being here.


00:44:07.700 --> 00:44:09.300
See you later, everyone.


00:44:09.300 --> 00:44:10.300
- Bye.


00:44:10.300 --> 00:44:11.140
- Bye.


00:44:11.140 --> 00:44:21.140
[BLANK_AUDIO]

