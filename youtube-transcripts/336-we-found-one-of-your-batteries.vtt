WEBVTT

00:00:00.000 --> 00:00:02.000
>> Hey, Brian.


00:00:02.000 --> 00:00:04.000
>> Hey.


00:00:04.000 --> 00:00:06.000
>> Hey, YouTube.


00:00:06.000 --> 00:00:08.000
Thanks for everyone out there watching.


00:00:08.000 --> 00:00:10.000
Throw your thoughts into the live stream.


00:00:10.000 --> 00:00:12.000
We'll try to make them part of the show as always.


00:00:12.000 --> 00:00:14.000
And with that, you want to just kick things off, Brian?


00:00:14.000 --> 00:00:16.000
>> Yeah, let's do it.


00:00:16.000 --> 00:00:18.000
>> All right.


00:00:18.000 --> 00:00:20.000
Hello, and welcome to Python Bytes, where we deliver Python


00:00:20.000 --> 00:00:22.000
news and headlines directly to your ear buds.


00:00:22.000 --> 00:00:24.000
This is episode 336, recorded May 16th.


00:00:24.000 --> 00:00:26.000
And we're here to talk about Python.


00:00:26.000 --> 00:00:28.000
And we're going to talk about Python.


00:00:28.000 --> 00:00:31.440
recorded May 16th, 2023.


00:00:31.440 --> 00:00:32.680
I'm Michael Kennedy.


00:00:32.680 --> 00:00:34.080
And I'm Brian Okken.


00:00:34.080 --> 00:00:38.680
And this episode is brought to you by InfluxDB from InfluxData.


00:00:38.680 --> 00:00:40.680
We'll tell you more about them later.


00:00:40.680 --> 00:00:45.280
Be sure to connect with us over on FostedOn.org.


00:00:45.280 --> 00:00:48.280
I'm @mkennedy, Brian is @brianaukin,


00:00:48.280 --> 00:00:51.280
and the show is @pythonbytes.


00:00:51.280 --> 00:00:55.080
The rights and status of the show are still undetermined, Brian,


00:00:55.080 --> 00:00:57.080
but I'm sure we'll figure that out someday.


00:00:57.080 --> 00:01:03.720
see the last show to get the joke. And join us over at Python by start up them slash live,


00:01:03.720 --> 00:01:09.160
usually Tuesday at 11am Pacific time to be part of the show, or you can catch also the older


00:01:09.160 --> 00:01:16.200
episodes there. Or of course on your podcast players. And with that, Brian, let's dig into


00:01:16.200 --> 00:01:22.840
some batteries. Okay, well, as we know, Python is the language of the batteries included. But there's


00:01:22.840 --> 00:01:26.520
We also have lots of cool cool extra packages on pypi


00:01:26.520 --> 00:01:28.440
Actually quite a few


00:01:28.440 --> 00:01:35.240
um, and one of the things that I wanted to highlight was a few just a handful of utilities, uh packages that


00:01:35.240 --> 00:01:42.040
Are um really kind of fun and you probably knew about them, but maybe forgot and we've covered some of these in the past


00:01:42.040 --> 00:01:46.520
so I wanted to highlight this article from martin hines called


00:01:46.520 --> 00:01:51.160
Uh python's missing batteries essential libraries. You're missing out on


00:01:51.880 --> 00:01:55.360
And the first project he talks about is bolt-ons, which is


00:01:55.360 --> 00:01:59.840
actually an amazing, it's an amazing package, but it's so big.


00:01:59.840 --> 00:02:04.200
the comment here is he could, he could probably do an entire


00:02:04.200 --> 00:02:07.000
article just on bolt-ons and I think that's wrong.


00:02:07.000 --> 00:02:11.000
I think you could do an entire book on, on bolt-ons and it would be a big book.


00:02:11.000 --> 00:02:11.480
I agree.


00:02:11.480 --> 00:02:12.560
There's a lot in there.


00:02:12.560 --> 00:02:16.880
but a few of the things that he highlighted were pretty, pretty cool


00:02:16.880 --> 00:02:18.440
that I kind of didn't know about.


00:02:18.840 --> 00:02:23.080
Boltons has a JSON utils and a time utils


00:02:23.080 --> 00:02:25.660
and an iter utils that he's demoing.


00:02:25.660 --> 00:02:29.820
So with JSON utils, you can just iterate


00:02:29.820 --> 00:02:33.500
with like a, for line and JSON utils,


00:02:33.500 --> 00:02:37.180
JSON iterator, you can iterate through JSON elements.


00:02:37.180 --> 00:02:38.500
That's pretty amazing.


00:02:38.500 --> 00:02:39.600
That's pretty cool.


00:02:39.600 --> 00:02:41.080
I like that.


00:02:41.080 --> 00:02:45.820
The time utils example was, is a, using a date range,


00:02:45.820 --> 00:02:49.860
time utils date range and iterating through days,


00:02:49.860 --> 00:02:51.700
which is kind of neat.


00:02:51.700 --> 00:02:53.100
I didn't know you could do that.


00:02:53.100 --> 00:02:56.100
It's kind of a cool idea to let me walk through days


00:02:56.100 --> 00:02:57.420
and get different date times.


00:02:57.420 --> 00:02:59.120
But anyway, there's a different step,


00:02:59.120 --> 00:03:00.200
a step size you can do.


00:03:00.200 --> 00:03:02.460
You can walk through each week or whatever.


00:03:02.460 --> 00:03:06.380
And then inter utils has a,


00:03:06.380 --> 00:03:08.660
is highlighting a couple of things in their utils.


00:03:08.660 --> 00:03:10.420
One of them is get path,


00:03:10.420 --> 00:03:14.060
where you, which isn't really like a file system path,


00:03:14.060 --> 00:03:19.060
but it's basically saying I've got a deeply nested structure


00:03:19.060 --> 00:03:21.700
and I want to access it


00:03:21.700 --> 00:03:23.900
without having to do all the access functions.


00:03:23.900 --> 00:03:27.500
So it's a way to get access to deeply nested things.


00:03:27.500 --> 00:03:30.780
And then a remap, which is neat.


00:03:30.780 --> 00:03:34.100
Remap takes a deeply nested structure


00:03:34.100 --> 00:03:36.060
and just changes something inside of it,


00:03:36.060 --> 00:03:37.860
which is kind of cool.


00:03:37.860 --> 00:03:40.380
I don't wanna go through all of the details of this article,


00:03:40.380 --> 00:03:42.260
but a couple of quick highlights.


00:03:42.260 --> 00:03:45.380
There's highlighting the SH package


00:03:45.380 --> 00:03:50.200
where you can do shell commands from Python


00:03:50.200 --> 00:03:53.140
in a fairly nice way.


00:03:53.140 --> 00:03:57.280
Data validation, actually this is pretty neat.


00:03:57.280 --> 00:04:00.520
There's pedantic of course, but if that's for like,


00:04:00.520 --> 00:04:02.940
which is awesome.


00:04:02.940 --> 00:04:05.120
But there's also this validators library, which is neat.


00:04:05.120 --> 00:04:07.320
And it can do things like validate,


00:04:07.320 --> 00:04:08.620
making sure that email,


00:04:08.620 --> 00:04:12.500
like validating emails or Visa card numbers


00:04:12.500 --> 00:04:14.580
or an IP address is all format,


00:04:14.580 --> 00:04:17.500
just validate strings are formatted correctly and things.


00:04:17.500 --> 00:04:19.660
It's pretty neat, cool.


00:04:19.660 --> 00:04:25.500
And then the fuzz is a fuzzy matching string,


00:04:25.500 --> 00:04:28.300
fuzzy string matching library, which is kind of cool.


00:04:28.300 --> 00:04:31.460
I wanted to jump down debugging.


00:04:31.460 --> 00:04:33.820
There's a stack printer that has,


00:04:33.820 --> 00:04:36.680
it's basically a really nice stack trace


00:04:36.680 --> 00:04:39.680
that has does the error messages, which is kind of cool.


00:04:39.680 --> 00:04:44.880
What else for testing, you can freeze time with the freeze gun


00:04:44.880 --> 00:04:50.160
library. And then this, though, the last thing is kind of cool.


00:04:50.160 --> 00:04:54.600
I write a lot of command line applications. And there's a I


00:04:54.600 --> 00:04:59.680
would not have thought to look for this package called TQ DM. I


00:04:59.680 --> 00:05:05.960
don't know what that stands for. But it does. It does, like, what


00:05:05.960 --> 00:05:08.640
of these things, progress bars would think for command line


00:05:08.640 --> 00:05:11.000
utilities. So that's, that's fun.


00:05:11.000 --> 00:05:18.040
So TQDM comes from tech quantum, which means progress in Arabic.


00:05:18.040 --> 00:05:23.760
I wouldn't have I wouldn't have clued me in to go search for it.


00:05:23.760 --> 00:05:26.440
I love that package. There's a lot of cool stuff here. I use


00:05:26.440 --> 00:05:31.840
like TQDM is just it's my go to for this stuff. You know, there's


00:05:31.840 --> 00:05:35.760
a lot of things like, oh, I need to go over, you know,


00:05:35.760 --> 00:05:39.200
millions of database records and make some change


00:05:39.200 --> 00:05:40.960
and do a test and then maybe, I don't know,


00:05:40.960 --> 00:05:42.640
update some of them.


00:05:42.640 --> 00:05:44.460
And that might take a while.


00:05:44.460 --> 00:05:47.440
I just did something where I had to do like a report


00:05:47.440 --> 00:05:51.240
on a bunch of stuff on the Talk Python courses


00:05:51.240 --> 00:05:56.240
and it took nine hours to like go do a bunch of compute


00:05:56.240 --> 00:05:58.540
for a bunch of courses for each, you know,


00:05:58.540 --> 00:06:01.600
like an insane amount of stuff.


00:06:01.600 --> 00:06:03.680
And I ran that, and you could just see,


00:06:03.680 --> 00:06:05.160
I saw several things.


00:06:05.160 --> 00:06:07.080
One, it shows you the progress.


00:06:07.080 --> 00:06:08.460
You can see it doing progress,


00:06:08.460 --> 00:06:13.460
but it also tells you the per object per time.


00:06:13.460 --> 00:06:16.360
So it'll say like processing, you know,


00:06:16.360 --> 00:06:20.620
200 records per second, for example,


00:06:20.620 --> 00:06:21.680
as it goes through the list.


00:06:21.680 --> 00:06:23.360
And it also estimates the time,


00:06:23.360 --> 00:06:25.000
which is why after five minutes,


00:06:25.000 --> 00:06:26.600
I'm like, oh, this is gonna take nine hours.


00:06:26.600 --> 00:06:27.700
I'm not gonna wait for this.


00:06:27.700 --> 00:06:29.320
It's really nice.


00:06:29.320 --> 00:06:31.160
- So can you use it if you don't really know


00:06:31.160 --> 00:06:33.660
how long something's gonna take to begin with?


00:06:33.660 --> 00:06:37.720
- Yes, and--


00:06:37.720 --> 00:06:39.280
- Or do you have to like, kinda know,


00:06:39.280 --> 00:06:41.220
like, do you have to give it like,


00:06:41.220 --> 00:06:43.840
it's 10% done or it's 20% done?


00:06:43.840 --> 00:06:45.600
- No, it does it all automatically


00:06:45.600 --> 00:06:47.220
and I don't really know how.


00:06:47.220 --> 00:06:49.760
I think some things it can figure out.


00:06:49.760 --> 00:06:52.040
- Okay. - And others,


00:06:52.040 --> 00:06:53.680
yeah, I don't know how it can actually do that


00:06:53.680 --> 00:06:56.580
because, for example, on the example on the screen,


00:06:56.580 --> 00:06:59.000
it has a range from zero to 100, right?


00:06:59.000 --> 00:07:01.640
You can't ask the length of the range.


00:07:01.640 --> 00:07:03.040
>> Okay, right.


00:07:03.040 --> 00:07:06.680
>> But it somehow knows.


00:07:06.680 --> 00:07:09.320
>> Well, I might play with that, because right now I've got


00:07:09.320 --> 00:07:12.240
an application that command line thing that reboots


00:07:12.240 --> 00:07:14.880
an instrument and then waits for it to finish.


00:07:14.880 --> 00:07:18.440
And I just have dots and it'd be kind of nice to have


00:07:18.440 --> 00:07:21.040
like something like this.


00:07:21.040 --> 00:07:23.560
>> Yeah, my prior solution was,


00:07:23.560 --> 00:07:25.520
let's put out a little dot every so often.


00:07:25.520 --> 00:07:26.560
Oh, that's too many dots.


00:07:26.560 --> 00:07:28.600
Let's mod it out a little bit higher


00:07:28.600 --> 00:07:32.400
Maybe every 20 records we'll put a dot or something like that.


00:07:32.400 --> 00:07:33.400
Exactly.


00:07:33.400 --> 00:07:34.900
Yeah, so this is nice.


00:07:34.900 --> 00:07:39.400
You can just wrap an iterator in a TQDM and then loop over it and magic happens.


00:07:39.400 --> 00:07:40.400
Cool.


00:07:40.400 --> 00:07:41.400
We'll try it out.


00:07:41.400 --> 00:07:42.400
Yep.


00:07:42.400 --> 00:07:43.400
All right.


00:07:43.400 --> 00:07:44.400
Well, that's pretty awesome.


00:07:44.400 --> 00:07:45.400
Want to hear about more awesome things, Brian?


00:07:45.400 --> 00:07:47.600
Yeah, let's do awesome.


00:07:47.600 --> 00:07:48.600
Let's do some awesome.


00:07:48.600 --> 00:07:49.600
Some pollers.


00:07:49.600 --> 00:07:57.160
So pollers is, as many things in Python are these days, is the rustification, in a good


00:07:57.160 --> 00:07:59.080
of Python things.


00:07:59.080 --> 00:08:03.560
So it's kind of like Pandas, but redone in Rust


00:08:03.560 --> 00:08:07.760
with more of a fluent API that allows it to be more


00:08:07.760 --> 00:08:10.240
database query engine-like.


00:08:10.240 --> 00:08:15.260
And so what I have for us today is the awesome Polars,


00:08:15.260 --> 00:08:17.960
a curated list of Polars talks, tools, examples,


00:08:17.960 --> 00:08:18.980
and articles.


00:08:18.980 --> 00:08:22.600
Now, many of these awesome lists are extensions,


00:08:22.600 --> 00:08:24.140
and there are a few things in here,


00:08:24.140 --> 00:08:26.200
like it talks about the Python library


00:08:26.200 --> 00:08:30.040
and you may not know there's actually a Rust library


00:08:30.040 --> 00:08:32.320
for Polars that you can directly use


00:08:32.320 --> 00:08:33.720
if you're integrating with Rust code,


00:08:33.720 --> 00:08:36.880
but also one for R, one for Node.


00:08:36.880 --> 00:08:40.080
It's got some things like cheat sheets.


00:08:40.080 --> 00:08:42.800
People wanna go and check out the cheat sheet.


00:08:42.800 --> 00:08:47.000
It's got actually a really nice visualization


00:08:47.000 --> 00:08:50.080
to show you what reshaping data means


00:08:50.080 --> 00:08:54.540
with concat or appending columns side by side


00:08:54.540 --> 00:09:00.780
from two data frames with a horizontal concat flag, which


00:09:00.780 --> 00:09:03.660
I think the visualization of these things is really nice.


00:09:03.660 --> 00:09:05.580
What do you think of this, Brian?


00:09:05.580 --> 00:09:07.220
Actually, the visualization is what


00:09:07.220 --> 00:09:09.860
I'm enjoying the most with this cheat sheet.


00:09:09.860 --> 00:09:11.100
That's nice.


00:09:11.100 --> 00:09:13.100
Yeah, it's really, really nice.


00:09:13.100 --> 00:09:15.220
And it has a bunch of tutorials and workshops.


00:09:15.220 --> 00:09:20.620
So if you are trying to get into Polars, come over here.


00:09:20.620 --> 00:09:23.740
There's maybe six or seven different examples,


00:09:23.740 --> 00:09:27.060
a bunch of blog posts, a whole bunch,


00:09:27.060 --> 00:09:29.140
how to integrate it with DuckDB


00:09:29.140 --> 00:09:31.220
or how it compares to DuckDB,


00:09:31.220 --> 00:09:33.300
and then a bunch of videos


00:09:33.300 --> 00:09:38.300
as well as people in the Polars community, right?


00:09:38.300 --> 00:09:40.860
Like Richie Vink, who created it,


00:09:40.860 --> 00:09:43.420
but also contributors,


00:09:43.420 --> 00:09:46.060
if you can follow them and ask them questions.


00:09:46.060 --> 00:09:47.900
- That's kind of a nice addition of like,


00:09:47.900 --> 00:09:49.620
on social media, who do you follow?


00:09:49.620 --> 00:09:50.580
That's pretty cool.


00:09:50.580 --> 00:09:53.380
- Yeah.


00:09:53.380 --> 00:09:55.100
Yeah, super nice.


00:09:55.100 --> 00:09:57.460
So anyway, not a whole lot to go into it there,


00:09:57.460 --> 00:10:00.740
but yeah, really, really nice.


00:10:00.740 --> 00:10:02.940
People are into Polars, put it here.


00:10:02.940 --> 00:10:04.940
Also, I kind of wanted to give it a shout out


00:10:04.940 --> 00:10:06.840
because Polars is fairly new.


00:10:06.840 --> 00:10:09.420
And if you've got something that integrates with Polars


00:10:09.420 --> 00:10:13.700
or builds on top of Polars in a way that itself is reasonable,


00:10:13.700 --> 00:10:15.100
you know, come over here and do a PR.


00:10:15.100 --> 00:10:17.660
I'm sure they're happy to accept it.


00:10:17.660 --> 00:10:20.340
It says, "Contributions welcome!"


00:10:20.340 --> 00:10:23.020
So yeah, get in here and contribute.


00:10:23.020 --> 00:10:24.940
- Yeah. - They're so welcome.


00:10:24.940 --> 00:10:29.100
You know what else is welcome?


00:10:29.100 --> 00:10:30.780
Our sponsor this week.


00:10:30.780 --> 00:10:34.420
So super happy to have a sponsor for the show.


00:10:34.420 --> 00:10:37.540
As we mentioned at the top, InfluxDB.


00:10:37.540 --> 00:10:42.540
So InfluxDB is all about the time series data.


00:10:42.540 --> 00:10:45.820
So this episode is brought to you by Python.


00:10:45.820 --> 00:10:47.060
This episode of Python Bytes is brought to you


00:10:47.060 --> 00:10:50.160
by InfluxData, the makers of InfluxDB.


00:10:51.340 --> 00:10:53.820
InfluxDB is a database purpose built


00:10:53.820 --> 00:10:55.700
for handling time series data


00:10:55.700 --> 00:10:58.660
at a massive scale for real-time analytics.


00:10:58.660 --> 00:11:00.660
So developers can ingest, store,


00:11:00.660 --> 00:11:03.260
and analyze all types of time series data,


00:11:03.260 --> 00:11:06.860
metrics, events, traces in a single platform.


00:11:06.860 --> 00:11:08.060
Let me ask you a question.


00:11:08.060 --> 00:11:09.760
How would boundless cardinality


00:11:09.760 --> 00:11:11.500
and lightning-fast SQL queries


00:11:11.500 --> 00:11:14.400
impact the way you develop real-time applications?


00:11:14.400 --> 00:11:16.500
Maybe make them real-time, huh?


00:11:16.500 --> 00:11:19.800
InfluxDB processes large time series data sets


00:11:19.800 --> 00:11:21.720
and provides low latency SQL queries,


00:11:21.720 --> 00:11:23.560
making it a go-to choice for developers


00:11:23.560 --> 00:11:28.040
building real-time applications and seeking crucial insights.


00:11:28.040 --> 00:11:29.400
For developer efficiency,


00:11:29.400 --> 00:11:32.040
InfluxDB helps you create IoT analytics


00:11:32.040 --> 00:11:34.680
and cloud applications using timestamp data


00:11:34.680 --> 00:11:37.280
rapidly and at scale.


00:11:37.280 --> 00:11:39.840
It's designed to ingest billions of data points


00:11:39.840 --> 00:11:42.720
in real time with unlimited cardinality.


00:11:42.720 --> 00:11:44.620
And InfluxDB streamlines building once


00:11:44.620 --> 00:11:47.400
and deploying across various products and environments


00:11:47.400 --> 00:11:50.200
from the edge on-premise and to the cloud.


00:11:50.200 --> 00:11:54.520
Try it for free at pythonbytes.fm/influxdb.


00:11:54.520 --> 00:11:56.760
The link is in your podcast player show notes.


00:11:56.760 --> 00:11:59.820
Thank you to Influx Data and InfluxDB


00:11:59.820 --> 00:12:02.220
for supporting the show.


00:12:02.220 --> 00:12:06.760
All right, over to you, Brian, what's next?


00:12:06.760 --> 00:12:09.120
- Well, this is a pretty quick one, but I wanted to,


00:12:09.120 --> 00:12:12.040
I know that a lot of people test with Selenium.


00:12:12.040 --> 00:12:15.560
I know there's lots of other stuff you can do


00:12:15.560 --> 00:12:17.140
like playwright and everything like that,


00:12:17.140 --> 00:12:19.940
but still selenium is heavily used


00:12:19.940 --> 00:12:22.460
and I still have some tests in selenium.


00:12:22.460 --> 00:12:25.020
And there was been a change.


00:12:25.020 --> 00:12:27.580
So I wanted to just make sure everybody is aware.


00:12:27.580 --> 00:12:32.220
Here's an article called


00:12:32.220 --> 00:12:35.680
running headless selenium in Python in 2023.


00:12:35.680 --> 00:12:39.800
And the catch is basically if you're,


00:12:39.800 --> 00:12:43.660
well, one, if you're not running headless already,


00:12:43.660 --> 00:12:44.740
why not?


00:12:44.740 --> 00:12:46.340
The headless is awesome.


00:12:46.340 --> 00:12:50.060
It can basically, you can run through a web browser,


00:12:50.060 --> 00:12:52.820
but don't actually load, don't open it.


00:12:52.820 --> 00:12:55.640
It just, you run it behind, there's no wind anyway.


00:12:55.640 --> 00:12:57.700
It's faster, so use headless.


00:12:57.700 --> 00:12:59.440
But if you are already using headless,


00:12:59.440 --> 00:13:00.420
there's been a change.


00:13:00.420 --> 00:13:05.420
So the change is, let's go down, scrolling down,


00:13:05.420 --> 00:13:07.860
there's an example, which is great.


00:13:07.860 --> 00:13:12.060
So Selenium 4.8.0 came out in January.


00:13:12.060 --> 00:13:17.060
And the old way to do things was to do,


00:13:17.060 --> 00:13:21.860
you set up your web driver and you mark headless equals true.


00:13:21.860 --> 00:13:25.060
And you can do this with both Chrome and Firefox


00:13:25.060 --> 00:13:26.220
had a little different setting,


00:13:26.220 --> 00:13:29.460
but it also had a headless equals true setup.


00:13:29.460 --> 00:13:32.820
And then you can run headless and it was awesome.


00:13:32.820 --> 00:13:34.420
They took away this dot headless.


00:13:34.420 --> 00:13:35.980
So don't do that anymore


00:13:35.980 --> 00:13:38.980
if you're using Selenium 4.8 or above.


00:13:38.980 --> 00:13:42.360
The new way is, so for Chrome,


00:13:42.360 --> 00:13:45.360
you add an argument of headless equals new,


00:13:45.360 --> 00:13:48.380
--headless equals new.


00:13:48.380 --> 00:13:49.860
And it's really add argument.


00:13:49.860 --> 00:13:50.700
If you're listening to this,


00:13:50.700 --> 00:13:53.320
there's a new options dot add argument.


00:13:53.320 --> 00:13:56.540
And then the same sort of thing with Firefox,


00:13:56.540 --> 00:13:58.500
you just, it isn't equals new,


00:13:58.500 --> 00:13:59.980
it's just --headless.


00:13:59.980 --> 00:14:02.460
But this shows you an example.


00:14:02.460 --> 00:14:03.580
Why did they do this?


00:14:03.580 --> 00:14:06.700
Well, there's some description of why there was like


00:14:06.700 --> 00:14:08.100
an old way and a new way.


00:14:08.100 --> 00:14:12.560
And then Chromium had a new headless option


00:14:12.560 --> 00:14:13.620
that you can add.


00:14:13.620 --> 00:14:15.620
So we wanna be able to do the new way.


00:14:15.620 --> 00:14:17.100
So they deprecated the old way


00:14:17.100 --> 00:14:20.020
to get people to use the new more powerful.


00:14:20.020 --> 00:14:23.420
And we're also linking to an article from Selenium,


00:14:23.420 --> 00:14:25.460
which is kind of a funny title.


00:14:25.460 --> 00:14:27.540
So they wanted to get everybody's attention.


00:14:27.540 --> 00:14:29.740
So they knew, so they named the article,


00:14:29.740 --> 00:14:31.940
"Headless is Going Away."


00:14:31.940 --> 00:14:35.340
Yes, which is a funny name.


00:14:35.340 --> 00:14:36.820
And then subtitled it with,


00:14:36.820 --> 00:14:38.020
"Now that we have your attention,


00:14:38.020 --> 00:14:39.760
Headless is not actually going away,


00:14:39.760 --> 00:14:43.300
just the convenience method to set it in Selenium.


00:14:43.300 --> 00:14:45.960
So I guess just a public service announcement,


00:14:45.960 --> 00:14:47.360
if you're using Selenium,


00:14:47.360 --> 00:14:50.660
you gotta change your code to use the new Selenium 4.8.


00:14:50.660 --> 00:14:55.280
That's it.


00:14:55.280 --> 00:14:57.840
Oh, you're on mute.


00:14:57.840 --> 00:15:02.820
- So I am.


00:15:02.820 --> 00:15:04.380
I do like it.


00:15:05.300 --> 00:15:09.340
I wonder though why you have to pass the command line


00:15:09.340 --> 00:15:11.700
argument directly and it doesn't just look like,


00:15:11.700 --> 00:15:13.260
oh, you said headless.


00:15:13.260 --> 00:15:17.860
That means in Chrome now pass --mode this versus--


00:15:17.860 --> 00:15:19.780
because it's almost the same but not the same


00:15:19.780 --> 00:15:21.460
across the browser platforms.


00:15:21.460 --> 00:15:22.100
Yeah.


00:15:22.100 --> 00:15:28.180
I think it's because there's different--


00:15:28.180 --> 00:15:28.740
I don't know.


00:15:28.740 --> 00:15:30.780
I haven't looked through the explanation,


00:15:30.780 --> 00:15:32.200
but I think there's other options.


00:15:32.200 --> 00:15:34.960
So it isn't necessarily just that they've


00:15:34.960 --> 00:15:37.140
changed the way you turn on headless,


00:15:37.140 --> 00:15:39.200
but there's more headless options.


00:15:39.200 --> 00:15:41.320
So they're just building it in so


00:15:41.320 --> 00:15:43.200
that you can pass in new flags.


00:15:43.200 --> 00:15:47.960
I think Chromium might end up getting more versions in later


00:15:47.960 --> 00:15:48.480
or something.


00:15:48.480 --> 00:15:50.120
I don't know.


00:15:50.120 --> 00:15:51.480
Yeah.


00:15:51.480 --> 00:15:52.840
The browser space is--


00:15:52.840 --> 00:15:55.040
it's an interesting time, isn't it?


00:15:55.040 --> 00:15:55.520
Yeah.


00:15:55.520 --> 00:15:57.160
We fought through the browser wars.


00:15:57.160 --> 00:16:00.840
We've beaten back Internet Explorer 6


00:16:00.840 --> 00:16:04.840
only to come back and have Chromium even more dominant


00:16:04.840 --> 00:16:06.440
in certain ways.


00:16:06.440 --> 00:16:09.840
It's interesting because for a usability thing,


00:16:09.840 --> 00:16:13.120
I'm usually using Vivaldi now, but I use probably Vivaldi


00:16:13.120 --> 00:16:15.320
and Chrome for day-to-day use.


00:16:15.320 --> 00:16:21.720
But for testing, yeah, I use Chrome and Firefox.


00:16:21.720 --> 00:16:25.480
That's what I use Firefox for is still testing with Firefox.


00:16:25.480 --> 00:16:26.920
Yeah, absolutely.


00:16:26.920 --> 00:16:27.400
Cool.


00:16:27.400 --> 00:16:30.040
You know, just a bit of follow up on the previous


00:16:30.040 --> 00:16:34.440
conversation about those different batteries


00:16:34.440 --> 00:16:35.280
that you talked about.


00:16:35.280 --> 00:16:37.040
I love our audience, there's so much cool stuff


00:16:37.040 --> 00:16:37.880
going on over there.


00:16:37.880 --> 00:16:40.400
So, Blaise says, "I wonder if Rich does anything


00:16:40.400 --> 00:16:42.280
"with TQDM?"


00:16:42.280 --> 00:16:45.320
And if you want a definitive answer,


00:16:45.320 --> 00:16:47.280
how about Will McGugan in the audience says,


00:16:47.280 --> 00:16:50.420
"TQDM has a Rich output option."


00:16:50.420 --> 00:16:53.360
Will, obviously being the creator of Rich


00:16:53.360 --> 00:16:56.200
and many other awesome things there.


00:16:56.200 --> 00:16:58.440
So nice follow-up.


00:16:58.440 --> 00:17:01.600
>> Awesome. We've turned into the water cooler of Python.


00:17:01.600 --> 00:17:04.360
>> We sure have. All right.


00:17:04.360 --> 00:17:06.880
I have one more thing to share with you all.


00:17:06.880 --> 00:17:09.800
Let's jump into it, and that is Gracie.


00:17:09.800 --> 00:17:14.220
So Gracie is an interesting project.


00:17:14.220 --> 00:17:17.120
It's a little bit like your first topic, Brian,


00:17:17.120 --> 00:17:21.320
in that it has a bunch of utility features,


00:17:21.320 --> 00:17:24.960
and this one is around consuming APIs.


00:17:24.960 --> 00:17:27.560
So not creating APIs, but writing clients


00:17:27.560 --> 00:17:31.600
that talk to them specifically around HTTPX,


00:17:31.600 --> 00:17:36.600
which is one of the absolute go-to HTTP libraries


00:17:36.600 --> 00:17:42.240
for doing modern async style of APIs in Python, right?


00:17:42.240 --> 00:17:45.120
- Yeah.


00:17:45.120 --> 00:17:47.560
- So, Gracie, it says,


00:17:47.560 --> 00:17:51.160
gracefully manage your API interactions.


00:17:51.160 --> 00:17:55.960
Gracie helps you handle failures, logging, retries,


00:17:55.960 --> 00:18:00.080
throttling, and tracking for all of your HTTP interactions.


00:18:00.080 --> 00:18:02.020
And it uses HTTPX under the hood.


00:18:02.020 --> 00:18:05.640
Let's you do the, like Gracie, do the boring stuff


00:18:05.640 --> 00:18:08.120
and you focus on your app is the selling point here.


00:18:08.120 --> 00:18:09.440
So this is pretty cool.


00:18:09.440 --> 00:18:10.760
It's not super well known.


00:18:10.760 --> 00:18:12.960
It's got like 180 stars and it's,


00:18:12.960 --> 00:18:15.800
it's an interesting library


00:18:15.800 --> 00:18:17.840
that has a lot of cool functionality.


00:18:18.720 --> 00:18:21.400
It feels like it could use a little bit more polish,


00:18:21.400 --> 00:18:23.000
but it's still quite neat.


00:18:23.000 --> 00:18:25.120
So let me give you some ideas here.


00:18:25.120 --> 00:18:31.800
So what you do is basically you model your API interactions


00:18:31.800 --> 00:18:33.960
through a class structure.


00:18:33.960 --> 00:18:36.360
It's not quite a hierarchy, but you use classes


00:18:36.360 --> 00:18:38.760
to come up with it.


00:18:38.760 --> 00:18:41.360
So you can come up with an endpoint here,


00:18:41.360 --> 00:18:44.120
and then you create something that


00:18:44.120 --> 00:18:49.120
derives from the API base class, right?


00:18:49.120 --> 00:18:51.640
Give it a URL, and then you give it a bunch of settings,


00:18:51.640 --> 00:18:54.480
and the settings are where kind of the useful stuff is.


00:18:54.480 --> 00:18:55.920
So for example, you can say,


00:18:55.920 --> 00:19:00.440
I would like to log the request as it's going out the door,


00:19:00.440 --> 00:19:01.880
but only in debug.


00:19:01.880 --> 00:19:04.340
I'd like to log the response,


00:19:04.340 --> 00:19:07.920
and that one a little more frequently at the info level,


00:19:07.920 --> 00:19:11.880
and then you can have a custom message that goes out there.


00:19:11.880 --> 00:19:16.640
Then you also can have a parser that will parse the response


00:19:16.640 --> 00:19:19.200
as a set of functions.


00:19:19.200 --> 00:19:21.200
The first example you see here just says,


00:19:21.200 --> 00:19:26.200
by default, just given any object, call.json on it,


00:19:26.200 --> 00:19:29.040
given the request, call.json on it, right?


00:19:29.040 --> 00:19:33.760
So that's kind of handy, but what you can do


00:19:33.760 --> 00:19:38.760
if you go down a little bit, custom validators,


00:19:40.400 --> 00:19:44.720
is you can actually say, by default,


00:19:44.720 --> 00:19:47.000
just try to convert it to a JSON response.


00:19:47.000 --> 00:19:49.520
But if the status code is not found,


00:19:49.520 --> 00:19:50.680
then do something else.


00:19:50.680 --> 00:19:53.040
And you can have a series of different status codes.


00:19:53.040 --> 00:19:56.680
So if it by default use this parser,


00:19:56.680 --> 00:19:59.560
but if it's like a 400 bad request,


00:19:59.560 --> 00:20:01.280
then we need to parse it as something else.


00:20:01.280 --> 00:20:04.200
And that could even be like convert it from,


00:20:04.200 --> 00:20:06.960
you know, maybe in a success case,


00:20:06.960 --> 00:20:10.200
you get this particular say, Pydantic model back,


00:20:10.200 --> 00:20:14.120
But in an error case, you have a totally different structure.


00:20:14.120 --> 00:20:15.840
And you might want to parse it differently


00:20:15.840 --> 00:20:18.880
into a different Pydantic model, something along the lines.


00:20:18.880 --> 00:20:22.880
So you can do a lot of cool stuff like that there.


00:20:22.880 --> 00:20:27.000
And yeah, and then you just give it the functions


00:20:27.000 --> 00:20:29.760
that you call that basically invoke the API.


00:20:29.760 --> 00:20:32.240
And of course, because it's based on HTTPX,


00:20:32.240 --> 00:20:35.760
you can await calling those functions.


00:20:35.760 --> 00:20:38.440
So yeah, anyway, it looks--


00:20:38.440 --> 00:20:41.680
it ends up with a pretty clean model for using it.


00:20:41.680 --> 00:20:43.280
What do you think?


00:20:43.280 --> 00:20:46.880
Well, yeah, it'll take some time to get your head around it


00:20:46.880 --> 00:20:48.720
because of the class-based thing.


00:20:48.720 --> 00:20:50.960
But it's all stuff that you're going


00:20:50.960 --> 00:20:52.080
to have to develop anyway.


00:20:52.080 --> 00:20:54.920
So having somebody else do the work, it's pretty--


00:20:54.920 --> 00:20:58.080
Yeah, yeah, there's some nice examples of throttling.


00:20:58.080 --> 00:21:03.000
And this might be interesting to you, Brian,


00:21:03.000 --> 00:21:05.520
is it has the ability-- there's a bunch


00:21:05.520 --> 00:21:09.640
It has the ability to replay certain data.


00:21:09.640 --> 00:21:14.720
So you can also say, we're only allowing certain--


00:21:14.720 --> 00:21:17.720
by default, any 200 category status code


00:21:17.720 --> 00:21:19.320
is considered success.


00:21:19.320 --> 00:21:21.960
You can say, no, for this one, it has to be a .created,


00:21:21.960 --> 00:21:27.920
like a HTTP status .created, not 200 or something like that.


00:21:27.920 --> 00:21:30.520
Or you can give it either OK or created.


00:21:30.520 --> 00:21:33.120
You give it a set of options.


00:21:33.120 --> 00:21:34.240
That's pretty cool.


00:21:34.240 --> 00:21:36.640
you can add custom validation.


00:21:36.640 --> 00:21:39.700
You talked about validators at your beginning as well.


00:21:39.700 --> 00:21:43.320
And if you're not using Pydantic


00:21:43.320 --> 00:21:46.460
or something that kind of does its own custom validation,


00:21:46.460 --> 00:21:48.460
you can still even add more stuff.


00:21:48.460 --> 00:21:50.420
Like not only does this have to be a string,


00:21:50.420 --> 00:21:52.920
but it has to be, I don't know,


00:21:52.920 --> 00:21:55.920
an email of this type or whatever, right?


00:21:55.920 --> 00:21:59.800
Like of this, say the domain of our company, right?


00:21:59.800 --> 00:22:01.560
Something like that.


00:22:01.560 --> 00:22:03.240
So you can add these custom validators


00:22:03.240 --> 00:22:07.240
And it comes with a retry, built-in retry for


00:22:07.240 --> 00:22:12.420
how do you handle the retries, how many attempts,


00:22:12.420 --> 00:22:14.840
what do you do in terms of logging,


00:22:14.840 --> 00:22:17.800
you know, about retries and failures,


00:22:17.800 --> 00:22:19.520
what do you do if, you know,


00:22:19.520 --> 00:22:23.080
you can say, I want to retry three times


00:22:23.080 --> 00:22:26.240
and if none of them work, I don't care, just keep going,


00:22:26.240 --> 00:22:28.600
don't break my application, or please do,


00:22:28.600 --> 00:22:30.640
don't, you know, raise an exception.


00:22:30.640 --> 00:22:32.600
You might say, well, why would you ever not want to break it?


00:22:32.600 --> 00:22:37.040
Like maybe you're trying to write to some sort of audit log


00:22:37.040 --> 00:22:37.960
to say this happened.


00:22:37.960 --> 00:22:40.240
And if the server that just records what happened


00:22:40.240 --> 00:22:42.440
goes down, you don't want to start crashing your app, right?


00:22:42.440 --> 00:22:44.480
There's like scenarios where you might not really


00:22:44.480 --> 00:22:45.320
care about that.


00:22:45.320 --> 00:22:48.320
Also, throttling, which is pretty neat.


00:22:48.320 --> 00:22:51.840
You can say any time that the URL contains--


00:22:51.840 --> 00:22:53.160
the example is a Pokemon thing.


00:22:53.160 --> 00:22:56.840
So it has a regular expression for Pokemon.


00:22:56.840 --> 00:23:01.560
I want maximum 10 requests for every 1 and 1/2 minutes.


00:23:01.560 --> 00:23:04.360
And then you could actually, it has a cool output too.


00:23:04.360 --> 00:23:07.160
You know, if you print out just the rule, it says,


00:23:07.160 --> 00:23:09.800
which is an object, it says 10 requests per 90 seconds


00:23:09.800 --> 00:23:12.040
for URLs matching this regular expression,


00:23:12.040 --> 00:23:13.140
which is kind of nice.


00:23:13.140 --> 00:23:15.120
- Oh, cool.


00:23:15.120 --> 00:23:16.360
- Yeah, that final thing,


00:23:16.360 --> 00:23:17.920
so I don't really know where it is in here,


00:23:17.920 --> 00:23:21.380
but yeah, you can also have it throw certain exceptions.


00:23:21.380 --> 00:23:26.100
So how, you know, how it has that parser type scenario


00:23:26.100 --> 00:23:28.600
for different HTTP status codes I told you about.


00:23:28.600 --> 00:23:30.060
So you can say, if it's a bad request,


00:23:30.060 --> 00:23:34.340
please throw some exception class that you come up with.


00:23:34.340 --> 00:23:37.500
So instead of just saying bad request,


00:23:37.500 --> 00:23:39.620
it could potentially have more details.


00:23:39.620 --> 00:23:41.700
You might build a parse information into it


00:23:41.700 --> 00:23:43.220
and then raise that exception.


00:23:43.220 --> 00:23:45.060
There's some pretty neat things.


00:23:45.060 --> 00:23:48.620
And the final thing, by the way, rich integration right there,


00:23:48.620 --> 00:23:54.380
it requires you to install rich if you want fancy output on.


00:23:54.380 --> 00:23:55.920
it'll tell you sort of its,


00:23:55.920 --> 00:24:02.660
it'll report on how it's interacted with the API endpoint.


00:24:02.660 --> 00:24:04.860
So you've got to do like a bunch of processing,


00:24:04.860 --> 00:24:05.700
you know, I told you about like,


00:24:05.700 --> 00:24:08.700
I'm gonna transform a bunch of things, I use TQDM.


00:24:08.700 --> 00:24:10.220
If you're gonna do that, at the end,


00:24:10.220 --> 00:24:12.800
you could ask, well, how'd it go?


00:24:12.800 --> 00:24:15.100
And it'll give you this like summary report


00:24:15.100 --> 00:24:17.420
of how much success and how much failure


00:24:17.420 --> 00:24:19.860
and what's the average latency and status codes


00:24:19.860 --> 00:24:21.660
and requests per seconds and all of these.


00:24:21.660 --> 00:24:26.260
and it'll do that in text form or in rich style.


00:24:26.260 --> 00:24:32.020
Final thing, it will record and replay API interactions


00:24:32.020 --> 00:24:34.300
for testing purposes.


00:24:34.300 --> 00:24:38.900
So if it's really tricky to mock out some complex interaction,


00:24:38.900 --> 00:24:42.180
you'd say, well, I want it to be as exactly close to real


00:24:42.180 --> 00:24:42.900
as possible.


00:24:42.900 --> 00:24:45.940
You could just one time do those API calls


00:24:45.940 --> 00:24:51.140
and then replay them back, put it either record mode or replay


00:24:51.140 --> 00:25:00.140
And the back end that stores that could be a SQLite database or a MongoDB database that's automatically integrated.


00:25:00.140 --> 00:25:05.140
And you just give it that and say, when I talk to the server, remember what you did and store it over here.


00:25:05.140 --> 00:25:08.140
And then you can play that back for testing.


00:25:08.140 --> 00:25:10.140
Oh, wow. Cool.


00:25:10.140 --> 00:25:15.140
So, yeah. Anyway, people can check this out and see what they think.


00:25:15.140 --> 00:25:15.980
But--


00:25:15.980 --> 00:25:20.540
- I think, so it almost looks like it was a system


00:25:20.540 --> 00:25:24.540
pretty much designed, well, one of the obvious use cases


00:25:24.540 --> 00:25:29.540
is to build a custom thing to test your application


00:25:29.540 --> 00:25:31.660
because there's a bunch of like,


00:25:31.660 --> 00:25:35.100
all the utilities there to really interrogate something.


00:25:35.100 --> 00:25:37.860
- Absolutely, yeah, you get that report


00:25:37.860 --> 00:25:40.900
and you get the replay, record replayability,


00:25:40.900 --> 00:25:43.100
the logging, yeah, a lot of that stuff is there.


00:25:43.100 --> 00:25:45.100
It's pretty neat.


00:25:45.100 --> 00:25:46.180
- Yeah, cool.


00:25:46.180 --> 00:25:50.560
- All right, well, that's it for that one.


00:25:50.560 --> 00:25:53.240
Yeah, I guess that's all of our items, isn't it?


00:25:53.240 --> 00:25:54.240
- It is.


00:25:54.240 --> 00:25:58.200
And for extras, I don't have any extras.


00:25:58.200 --> 00:25:59.600
Do you have any extras?


00:25:59.600 --> 00:26:03.660
- I do, I just have one and then we'll get to our joke.


00:26:03.660 --> 00:26:07.160
So for the extras, do you know what, Brian?


00:26:07.160 --> 00:26:08.880
Look at this, look at, here it is.


00:26:08.880 --> 00:26:10.600
- You got in the app store, yay.


00:26:10.600 --> 00:26:12.400
- I got in the iOS app store too.


00:26:12.400 --> 00:26:17.320
So finally, finally, finally, the Talk Python mobile apps


00:26:17.320 --> 00:26:19.200
are out on all of the app stores.


00:26:19.200 --> 00:26:21.440
So go get them.


00:26:21.440 --> 00:26:25.400
Just talkpython.fm/apps, I believe, will take you there.


00:26:25.400 --> 00:26:26.920
Redirect over to the training site.


00:26:26.920 --> 00:26:33.920
But yeah, they're available on iPhone, Android, tablets,


00:26:33.920 --> 00:26:37.400
iPad, Android tablets as well.


00:26:37.400 --> 00:26:38.520
Maybe more coming.


00:26:38.520 --> 00:26:41.960
We might have even desktop apps coming pretty soon.


00:26:41.960 --> 00:26:46.120
depending on how successful we are with all this.


00:26:46.120 --> 00:26:47.360
So this is out.


00:26:47.360 --> 00:26:48.360
People can check it out.


00:26:48.360 --> 00:26:52.080
And as a way to celebrate finally getting this done


00:26:52.080 --> 00:26:56.960
after four months of work, first of all, I wrote a blog post.


00:26:56.960 --> 00:26:57.760
Maybe I'll add it.


00:26:57.760 --> 00:26:58.920
Throw the link in the notes.


00:26:58.920 --> 00:27:00.540
Yep, I'll throw it in there for people.


00:27:00.540 --> 00:27:02.680
I talked about some of the design choices,


00:27:02.680 --> 00:27:07.560
about how and why we chose things like Flutter and so on


00:27:07.560 --> 00:27:10.400
as the mobile app framework.


00:27:10.400 --> 00:27:12.800
But the one thing for people to know out there,


00:27:12.800 --> 00:27:14.400
and this is a bit timely,


00:27:14.400 --> 00:27:18.400
is if you download and install the mobile app


00:27:18.400 --> 00:27:22.600
before, what day today is, Tuesday, May 16th,


00:27:22.600 --> 00:27:27.040
if you do that before May 22nd,


00:27:27.040 --> 00:27:30.360
so download the app before May 22nd,


00:27:30.360 --> 00:27:33.800
inside the app only, the Up and Running with Git course,


00:27:33.800 --> 00:27:36.800
which is normally $39, is completely free.


00:27:36.800 --> 00:27:39.400
So sort of celebrate the launch of the app.


00:27:39.400 --> 00:27:41.520
So you go in there, go find the courses,


00:27:41.520 --> 00:27:43.800
go to the free section, join the Git course,


00:27:43.800 --> 00:27:46.240
and you'll have it forever, not just for a little time.


00:27:46.240 --> 00:27:48.200
But the only way to get it is to download


00:27:48.200 --> 00:27:49.680
and install the app, which is free,


00:27:49.680 --> 00:27:52.820
and then go put the Git course into your account.


00:27:52.820 --> 00:27:55.480
- I just downloaded it.


00:27:55.480 --> 00:27:57.480
I'm opening it right now, so.


00:27:57.480 --> 00:27:58.920
- Awesome, awesome.


00:27:58.920 --> 00:28:01.040
- So one of the things I'm excited about this


00:28:01.040 --> 00:28:04.080
is because, I mean, when I'm doing a course,


00:28:04.080 --> 00:28:08.160
like not giving a course, but learning from one,


00:28:08.160 --> 00:28:10.560
I do like to have it on my computer screen,


00:28:10.560 --> 00:28:12.960
but there's oftentimes where I've got time to kill.


00:28:12.960 --> 00:28:15.760
So I'd like to listen to some of the conversation


00:28:15.760 --> 00:28:16.600
and listen to it.


00:28:16.600 --> 00:28:19.560
And yeah, I'm gonna look at some of the stuff on my phone,


00:28:19.560 --> 00:28:22.640
but a lot of it is kind of following along,


00:28:22.640 --> 00:28:24.640
but I'm listening and then I'll go through


00:28:24.640 --> 00:28:27.560
and watch the same stuff later on the computer


00:28:27.560 --> 00:28:28.760
and walk through it.


00:28:28.760 --> 00:28:32.120
So I really like this addition of having a mobile app.


00:28:32.120 --> 00:28:33.120
This is pretty cool.


00:28:33.120 --> 00:28:35.080
- Thanks, thanks so much, Brian.


00:28:35.080 --> 00:28:37.200
Yeah, there's a couple of things why you might need it.


00:28:37.200 --> 00:28:39.820
People are like, well, why don't you just watch it on the web?


00:28:39.820 --> 00:28:41.520
Especially on iPhone, you can't get rid


00:28:41.520 --> 00:28:46.680
of that navigation section around the browser.


00:28:46.680 --> 00:28:48.860
So you end up watching a postage stamp size thing,


00:28:48.860 --> 00:28:51.120
which is not ideal.


00:28:51.120 --> 00:28:55.040
It won't auto-advance because ad companies are evil,


00:28:55.040 --> 00:28:58.880
and iOS blocked them from playing ads all the time,


00:28:58.880 --> 00:29:03.160
which gobbles up everyone else as well, unfortunately.


00:29:03.160 --> 00:29:06.800
OK, so on your app, it'll just jump


00:29:06.800 --> 00:29:08.080
to the next thing then?


00:29:08.080 --> 00:29:09.640
- Yeah, it just keeps playing smoothly


00:29:09.640 --> 00:29:11.120
as you would imagine.


00:29:11.120 --> 00:29:12.600
And then the other thing that's important


00:29:12.600 --> 00:29:14.680
is you can download content offline.


00:29:14.680 --> 00:29:18.120
Like if you're going on a trip or on the train


00:29:18.120 --> 00:29:21.160
or some people even use it if they work at


00:29:21.160 --> 00:29:25.720
government institutions that have high levels of security


00:29:25.720 --> 00:29:28.560
and they want to, like research labs and stuff.


00:29:28.560 --> 00:29:31.680
If they want to be able to take the course at their work


00:29:31.680 --> 00:29:33.560
but their work is super restrictive


00:29:33.560 --> 00:29:35.460
about what they can interact with,


00:29:36.360 --> 00:29:39.360
You could download a whole course onto your tablet,


00:29:39.360 --> 00:29:42.000
set it next to you, and watch it work.


00:29:42.000 --> 00:29:45.960
Yeah, so those are the reasons why it exists.


00:29:45.960 --> 00:29:49.560
But anyway, long time coming, super happy about it.


00:29:49.560 --> 00:29:51.040
That's my extra.


00:29:51.040 --> 00:29:54.480
Download it, get the Git course.


00:29:54.480 --> 00:29:57.920
All right, well, how about a joke?


00:29:57.920 --> 00:30:01.120
Ah, this is a good one.


00:30:01.120 --> 00:30:05.120
So you may wonder-- you may have friends who are like, Brian,


00:30:05.120 --> 00:30:06.240
you do Python.


00:30:06.240 --> 00:30:09.440
UGC++, you wrote a book on pytest.


00:30:09.440 --> 00:30:13.480
Like how did you get so good at this?


00:30:13.480 --> 00:30:15.420
So this kind of riffs on that theme.


00:30:15.420 --> 00:30:19.700
There's two developers here.


00:30:19.700 --> 00:30:24.700
First one, she says, how do you code so well?


00:30:24.700 --> 00:30:27.800
The expert developer, she says, practice.


00:30:27.800 --> 00:30:31.680
And the first person didn't really hear it.


00:30:31.680 --> 00:30:34.960
Like it must be an innate gift, a gift from God.


00:30:34.960 --> 00:30:36.520
It's practice.


00:30:36.520 --> 00:30:39.440
I'll never understand how some people are so talented.


00:30:39.440 --> 00:30:41.200
A mystery, practice.


00:30:41.200 --> 00:30:43.440
- Yeah.


00:30:43.440 --> 00:30:44.280
- Right?


00:30:44.280 --> 00:30:45.100
- Yeah.


00:30:45.100 --> 00:30:45.940
- What do you think?


00:30:45.940 --> 00:30:47.200
- Well, this is great.


00:30:47.200 --> 00:30:49.560
And it applies to so many things, of course.


00:30:49.560 --> 00:30:53.200
But one of my daughters is dealing with this right now.


00:30:53.200 --> 00:30:58.200
She's been doing for about a year, doing aerial silks,


00:30:58.200 --> 00:31:01.320
aerial arts, and she's working on it


00:31:01.320 --> 00:31:03.780
and exercising and stuff every day.


00:31:03.780 --> 00:31:07.540
And it was really hard at first,


00:31:07.540 --> 00:31:08.620
and now she's pretty good.


00:31:08.620 --> 00:31:10.460
And so many people have said,


00:31:10.460 --> 00:31:12.420
"Oh, you're just naturally talented at that."


00:31:12.420 --> 00:31:15.860
She's like, it makes her mad because it's not natural.


00:31:15.860 --> 00:31:17.620
I just, I've had to work at it.


00:31:17.620 --> 00:31:19.020
Yeah, coding as well.


00:31:19.020 --> 00:31:21.380
So obviously.


00:31:21.380 --> 00:31:22.220
- Obviously, yeah.


00:31:22.220 --> 00:31:25.580
This is, it's not just coding, but coding certainly.


00:31:25.580 --> 00:31:29.140
- Yeah, podcasting, writing blog posts,


00:31:29.140 --> 00:31:31.580
everything around what we do.


00:31:31.580 --> 00:31:32.400
Practice.


00:31:32.400 --> 00:31:33.960
- Absolutely, practice.


00:31:33.960 --> 00:31:36.640
- Nice, nice way to end it.


00:31:36.640 --> 00:31:37.720
So good show.


00:31:37.720 --> 00:31:38.560
- Yeah, absolutely.


00:31:38.560 --> 00:31:40.040
Very, very uplifting.


00:31:40.040 --> 00:31:42.280
We'll end it on a growth mindset today, Brian.


00:31:42.280 --> 00:31:43.400
Thanks for being here.


00:31:43.400 --> 00:31:44.240
- Thank you.


00:31:44.240 --> 00:31:45.640
- And thanks everyone for coming.

