WEBVTT

00:00:00.000 --> 00:00:08.400
- Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:08.400 --> 00:00:15.640
to your earbuds. This is episode 260, recorded November 19th, 2021. I'm Michael Kennedy.


00:00:15.640 --> 00:00:18.120
- And I'm Brian Okken.


00:00:18.120 --> 00:00:19.480
- I'm Chris Petty.


00:00:19.480 --> 00:00:25.520
- Chris, welcome to the podcast. You're a podcast veteran, but the first time here on


00:00:25.520 --> 00:00:27.920
Python Bytes. Happy to have you.


00:00:27.920 --> 00:00:31.400
Thank you very much. It's a pleasure to be here. Good to be back.


00:00:31.400 --> 00:00:36.160
Yeah, for sure. So we're going to jump into a bunch of the news, but before we do, you


00:00:36.160 --> 00:00:38.200
know, tell people a bit about yourself.


00:00:38.200 --> 00:00:44.800
Absolutely. I've been in the tech business for about 35-ish years now, something like


00:00:44.800 --> 00:00:53.680
that. And I've been a self-identifying Pythonista for about the last five or six years. I work


00:00:53.680 --> 00:00:59.920
for these days. I work for just just recently changed jobs within Amazon. I used to work for the


00:00:59.920 --> 00:01:08.960
Amazon Web Services Elastic File System team. And I now work I switched gears from, you know,


00:01:08.960 --> 00:01:14.080
living in the clouds to living in the Amazon fulfillment centers. We're now a network.


00:01:14.080 --> 00:01:17.200
Does that mean you're doing what like programming COBOL or we're using now?


00:01:19.200 --> 00:01:20.960
Nothing but COBOL and Fortran.


00:01:20.960 --> 00:01:23.080
That's just all the worst, all the most possible.


00:01:23.080 --> 00:01:24.320
You know, not at all.


00:01:24.320 --> 00:01:27.080
We do, my team, Optitech IT,


00:01:27.080 --> 00:01:31.880
we do network automation for infrastructure.


00:01:31.880 --> 00:01:33.720
So it's a lot of fun, actually.


00:01:33.720 --> 00:01:37.360
It's really kind of neat going from building microservices


00:01:37.360 --> 00:01:38.200
and things like that,


00:01:38.200 --> 00:01:40.760
being infrastructure oriented at that level


00:01:40.760 --> 00:01:43.720
to like working with being responsible


00:01:43.720 --> 00:01:46.640
for automating things like, you know,


00:01:46.640 --> 00:01:50.600
network protocols, DNS, DHCP, fun stuff like that


00:01:50.600 --> 00:01:52.600
at scale in the fulfillment centers.


00:01:52.600 --> 00:01:53.680
It's a really cool gig.


00:01:53.680 --> 00:01:55.560
- Yeah, that sounds really interesting.


00:01:55.560 --> 00:01:57.640
And you get an interface with physical things


00:01:57.640 --> 00:01:59.360
that go physical places, which is interesting.


00:01:59.360 --> 00:02:01.400
- Yeah, it really is.


00:02:01.400 --> 00:02:02.240
Thank you.


00:02:02.240 --> 00:02:03.600
- I only ship bits, I don't know.


00:02:03.600 --> 00:02:06.560
Brian, you also work on physical things.


00:02:06.560 --> 00:02:10.040
- Yeah, I like working with actual, we make things.


00:02:10.040 --> 00:02:11.160
It's nice. - Yeah, absolutely.


00:02:11.160 --> 00:02:13.720
- It's a nice change of pace.


00:02:13.720 --> 00:02:16.240
- Yeah, I bet it is. - It's all I've known.


00:02:16.240 --> 00:02:18.920
out in the audience, Ned Batchelder.


00:02:18.920 --> 00:02:20.200
Hey, Ned, thanks for being here.


00:02:20.200 --> 00:02:21.960
This is Chris Boston, represent.


00:02:21.960 --> 00:02:22.800
- Hi, Ned!


00:02:22.800 --> 00:02:23.880
(laughing)


00:02:23.880 --> 00:02:25.040
Ned is amazing.


00:02:25.040 --> 00:02:27.020
He does so much work with Boston Python,


00:02:27.020 --> 00:02:30.160
and I can't wait till we can get back to actually


00:02:30.160 --> 00:02:33.480
being in a room together with other people again.


00:02:33.480 --> 00:02:36.640
- I know, absolutely.


00:02:36.640 --> 00:02:40.360
So, Brian, I used to feel like a cog in the machine,


00:02:40.360 --> 00:02:43.080
but now I work at a pretty small company


00:02:43.080 --> 00:02:44.320
where I make a lot of the choices,


00:02:44.320 --> 00:02:45.520
so I don't have to feel like that.


00:02:45.520 --> 00:02:51.480
I think we're going to talk about something that I think is awesome because Ned is here.


00:02:51.480 --> 00:02:53.200
>> Yeah, it's nice that Ned's here.


00:02:53.200 --> 00:02:55.760
We picked this just for you, Ned.


00:02:55.760 --> 00:03:01.040
Ned does a lot of stuff for Python and one of


00:03:01.040 --> 00:03:05.540
the things that he's done is this cool tool called Cog,


00:03:05.540 --> 00:03:07.520
which I've been watching for a while,


00:03:07.520 --> 00:03:12.160
but I haven't had a really good reason to use.


00:03:12.160 --> 00:03:14.560
But what Cog does is you point it,


00:03:14.560 --> 00:03:16.880
you can have these cog,


00:03:16.880 --> 00:03:21.160
like three brackets and the cog word,


00:03:21.160 --> 00:03:22.720
and then some code,


00:03:22.720 --> 00:03:25.840
and then another magic incantation at the end.


00:03:25.840 --> 00:03:28.700
It's pretty simple, but it's hard to explain.


00:03:28.700 --> 00:03:31.600
But you have some code, and when you point cog at it,


00:03:31.600 --> 00:03:33.440
it will run the code and then put


00:03:33.440 --> 00:03:36.520
the output of the code somewhere else where you put it to.


00:03:36.520 --> 00:03:39.480
Seems neat, I wanted to use it,


00:03:39.480 --> 00:03:43.400
but I didn't know what a use case I would use it for.


00:03:43.400 --> 00:03:46.200
Well, Simon Willison wrote this article called


00:03:46.200 --> 00:03:49.200
Using Cog to Update Help,


00:03:49.200 --> 00:03:52.060
the help output for a Markdown readme file,


00:03:52.060 --> 00:03:53.440
and I think this is brilliant.


00:03:53.440 --> 00:03:56.760
This is super awesome use case.


00:03:56.760 --> 00:04:06.120
Simon, he even has it going up on his CSVS to SQLite project.


00:04:06.120 --> 00:04:11.200
The idea is you've got at the end of the project,


00:04:11.200 --> 00:04:15.800
he actually lists on the readme, he lists the help output.


00:04:15.800 --> 00:04:17.320
Now, I actually have a project


00:04:17.320 --> 00:04:18.920
that the help output is out of date


00:04:18.920 --> 00:04:22.000
because the way I deal with it is I run the help


00:04:22.000 --> 00:04:25.160
and then I copy and paste, but this is, Simon's right,


00:04:25.160 --> 00:04:29.120
this is a great use for Cog to just point Cog at it.


00:04:29.120 --> 00:04:33.320
So he wrote a little snippet of code


00:04:33.320 --> 00:04:37.600
that goes in his readme, and since Cog ignores comments,


00:04:37.600 --> 00:04:41.840
you can put it in an HTML comment block.


00:04:41.840 --> 00:04:43.840
And it, so Cog will run that file


00:04:43.840 --> 00:04:45.680
and took the output and stick it out.


00:04:45.680 --> 00:04:47.720
And then Simon didn't stop there.


00:04:47.720 --> 00:04:51.160
He said, I want to make sure that this gets run


00:04:51.160 --> 00:04:52.360
when it needs to get run.


00:04:52.360 --> 00:04:56.560
So he wrote a test in pytest, of course,


00:04:56.560 --> 00:04:59.600
to check to see if Cog needs to be written.


00:04:59.600 --> 00:05:01.840
So this is just, this is really pretty cool.


00:05:01.840 --> 00:05:03.640
I like it.


00:05:03.640 --> 00:05:06.120
- This is the kind of thing that's so cool.


00:05:06.120 --> 00:05:07.620
Pardon me, Mike.


00:05:07.620 --> 00:05:09.260
This is the kind of thing that's so cool


00:05:09.260 --> 00:05:13.660
because anytime that you can eliminate DIY, right?


00:05:13.660 --> 00:05:16.020
Anytime you can make one thing,


00:05:16.020 --> 00:05:19.700
the one true source of whatever piece of the puzzle


00:05:19.700 --> 00:05:22.700
you're looking to build, you win.


00:05:22.700 --> 00:05:24.580
And this is a great example of that.


00:05:24.580 --> 00:05:25.500
- Yeah.


00:05:25.500 --> 00:05:26.660
- Yeah, absolutely.


00:05:26.660 --> 00:05:29.780
Out in the audience, a little real-time feedback.


00:05:29.780 --> 00:05:33.420
Ned says, "I also just updated the coverage in CogDocs


00:05:33.420 --> 00:05:37.700
to do the same thing and to get help output into the docs.


00:05:37.700 --> 00:05:38.540
- Nice.


00:05:38.540 --> 00:05:40.180
- Yeah, very cool.


00:05:40.180 --> 00:05:42.280
I love the inception of it.


00:05:42.280 --> 00:05:46.340
Yeah, this is definitely a cool project.


00:05:46.340 --> 00:05:49.540
I want to take you all on a journey.


00:05:49.540 --> 00:05:54.260
Come with me into the world of bank Python.


00:05:54.260 --> 00:05:55.100
- My drink.


00:05:55.100 --> 00:06:00.020
- This is an interesting article here.


00:06:00.020 --> 00:06:02.020
It's one of these things that says,


00:06:02.020 --> 00:06:07.220
I can't exactly tell you precisely where I worked or what we did.


00:06:07.220 --> 00:06:11.020
And I have to make up names for the projects that are not the actual names.


00:06:11.020 --> 00:06:13.020
It's by Cal Patterson.


00:06:13.020 --> 00:06:19.020
And it says, "The strange world of Python as used by big investment banks."


00:06:19.020 --> 00:06:22.020
So this is quite the read.


00:06:22.020 --> 00:06:25.020
If you go through it, if you click the little reader bit here,


00:06:25.020 --> 00:06:28.020
it says, you know, 30 minutes of reading time to read it.


00:06:28.020 --> 00:06:31.020
So it is a non-trivial bit of history.


00:06:31.020 --> 00:06:38.220
but let me see if I can give you some of the highlights that I took from this,


00:06:38.220 --> 00:06:41.820
and you can go read it if you really feel like you want to dive into it.


00:06:41.820 --> 00:06:49.060
So one of the things they talk about is the database, and all these things have


00:06:49.060 --> 00:06:52.100
interesting names. I'm sure that they have actual interesting names as well


00:06:52.100 --> 00:06:56.420
that are not these names. So for example, like the database-like system is called


00:06:56.420 --> 00:07:05.140
Barbara. And I guess the place to start here with this oral history that Cal talks about is that


00:07:05.140 --> 00:07:12.260
bank Python implementations are basically forks of the entire Python ecosystem, not just a fork


00:07:12.260 --> 00:07:18.500
of CPython, but like the libraries that it uses and everything, which are used at many, but not


00:07:18.500 --> 00:07:24.660
all of the biggest investment banks. So it says, let's talk about this system called Minerva.


00:07:24.660 --> 00:07:29.660
And it's a global database of Python objects.


00:07:29.660 --> 00:07:33.660
And Barbara is this way to talk to it.


00:07:33.660 --> 00:07:35.820
Okay, so a lot of interesting keywords


00:07:35.820 --> 00:07:37.020
to keep it hidden, right?


00:07:37.020 --> 00:07:38.920
But one of the things that's wild,


00:07:38.920 --> 00:07:42.460
this Barbara thing is,


00:07:42.460 --> 00:07:44.340
it's like a hierarchical database


00:07:44.340 --> 00:07:48.560
that stores basically zipped pickle objects.


00:07:48.560 --> 00:07:51.300
Wait, wait, what?


00:07:51.300 --> 00:07:55.380
So it's, and when I say hierarchical,


00:07:55.380 --> 00:07:57.700
I mean, it's in what they call rings.


00:07:57.700 --> 00:07:59.440
So you would talk to a database


00:07:59.440 --> 00:08:01.880
and there might be like a nearby replica


00:08:01.880 --> 00:08:05.300
that you talk to that might have a record or it might not.


00:08:05.300 --> 00:08:08.380
And so then there's like a bigger replica


00:08:08.380 --> 00:08:10.760
of sort of fallback to go look in this place.


00:08:10.760 --> 00:08:12.680
And if it's not there, go back and look at another one.


00:08:12.680 --> 00:08:14.940
They call these rings.


00:08:14.940 --> 00:08:18.060
And then you would ask for something by its key


00:08:18.060 --> 00:08:20.140
and then you get it back.


00:08:20.140 --> 00:08:22.500
So first of all, what do you guys think of just


00:08:22.500 --> 00:08:24.940
pickling all of your data objects?


00:08:24.940 --> 00:08:27.580
(laughing)


00:08:27.580 --> 00:08:30.220
- It's really, that bit made me chuckle


00:08:30.220 --> 00:08:33.740
because it is exactly the kind of like,


00:08:33.740 --> 00:08:36.460
at the time, pragmatic engineering trade-off


00:08:36.460 --> 00:08:38.360
that somebody made, right?


00:08:38.360 --> 00:08:40.900
Years ago, before we all saw pickles


00:08:40.900 --> 00:08:45.900
as the great villain of the Python ecosystem,


00:08:45.900 --> 00:08:50.100
before we knew that there could be downsides


00:08:50.100 --> 00:08:52.260
to pickling all the things and they're like,


00:08:52.260 --> 00:08:53.620
oh, it's perfect to pickle it.


00:08:53.620 --> 00:08:54.460
What more could you want?


00:08:54.460 --> 00:08:55.300
And now we're all just kind of looking at it.


00:08:55.300 --> 00:08:58.100
- It's so simple, it's small, it's fast.


00:08:58.100 --> 00:08:59.680
(laughing)


00:08:59.680 --> 00:09:00.520
Yeah, how do you index it?


00:09:00.520 --> 00:09:03.100
- What's wrong with an actual database?


00:09:03.100 --> 00:09:04.460
Just curious.


00:09:04.460 --> 00:09:06.380
- Yeah, this is a fine question.


00:09:06.380 --> 00:09:07.540
They do, if you read it,


00:09:07.540 --> 00:09:12.460
they do also use databases sometimes, okay?


00:09:12.460 --> 00:09:14.980
So, but the primary way seems to be this,


00:09:14.980 --> 00:09:16.580
this system called Barbara.


00:09:17.660 --> 00:09:21.740
So one of the things that comes to mind for me here is,


00:09:21.740 --> 00:09:24.620
oh my gosh, what if you upgrade something?


00:09:24.620 --> 00:09:29.620
What if you change the file, the structure in code


00:09:29.620 --> 00:09:33.640
of something that you put in the database five years ago?


00:09:33.640 --> 00:09:35.420
Whoops.


00:09:35.420 --> 00:09:36.240
(laughing)


00:09:36.240 --> 00:09:40.140
Yeah, that used to be, you know,


00:09:40.140 --> 00:09:42.020
signed up for the mailing list, yes or no.


00:09:42.020 --> 00:09:43.560
And now when you change the order,


00:09:43.560 --> 00:09:46.700
that yes or no became, yes or no is admin.


00:09:46.700 --> 00:09:49.460
Oh, oops, or it just doesn't match anymore


00:09:49.460 --> 00:09:50.980
and it crashes and you can't read your data


00:09:50.980 --> 00:09:52.540
'cause it's incompatible.


00:09:52.540 --> 00:09:54.900
So this would happen with Python the runtime,


00:09:54.900 --> 00:09:57.140
but also the libraries you're using, it seems to me,


00:09:57.140 --> 00:10:00.740
it's just incredibly unstable.


00:10:00.740 --> 00:10:01.580
So that's--


00:10:01.580 --> 00:10:03.340
- I just wanna make a bet they also have like


00:10:03.340 --> 00:10:07.340
some kind of really highly evolved over many years


00:10:07.340 --> 00:10:12.100
validation system that ensures that the pickles


00:10:12.100 --> 00:10:13.860
that you think are being used in the way


00:10:13.860 --> 00:10:15.220
that you think they're being used


00:10:15.220 --> 00:10:16.900
are actually still used that way.


00:10:16.900 --> 00:10:17.940
- Yeah, exactly.


00:10:17.940 --> 00:10:19.980
There's gotta be layers.


00:10:19.980 --> 00:10:22.820
Sam out in the live, in the audience live stream says,


00:10:22.820 --> 00:10:24.500
"Good luck upgrading your Python."


00:10:24.500 --> 00:10:25.340
Yeah, exactly.


00:10:25.340 --> 00:10:26.180
(laughing)


00:10:26.180 --> 00:10:27.300
Yeah, like as in never.


00:10:27.300 --> 00:10:28.780
And that's probably why part of it is like,


00:10:28.780 --> 00:10:33.340
yeah, we just forked it and froze it because that's crazy.


00:10:33.340 --> 00:10:34.540
Let me show you something else.


00:10:34.540 --> 00:10:37.660
I will try to jump around the article by a search


00:10:37.660 --> 00:10:38.780
'cause I took notes.


00:10:38.780 --> 00:10:42.100
Applications also commonly store their internal state


00:10:42.100 --> 00:10:44.440
in Barbara, writing data classes straight


00:10:44.440 --> 00:10:47.800
into and out of Barbara with very simple locking


00:10:47.800 --> 00:10:50.520
and transactions, if not.


00:10:50.520 --> 00:10:51.680
And one of the things they decided


00:10:51.680 --> 00:10:56.360
is there's no file system available to this platform.


00:10:56.360 --> 00:10:59.400
And the little bits of data that the script picks,


00:10:59.400 --> 00:11:01.420
gets picked up and outputs,


00:11:01.420 --> 00:11:04.400
it all just goes back into this key value store,


00:11:04.400 --> 00:11:06.800
pickle database thing called Barbara.


00:11:06.800 --> 00:11:08.100
That's pretty wild, right?


00:11:08.100 --> 00:11:10.480
- Yeah.


00:11:10.480 --> 00:11:11.300
- Okay.


00:11:13.160 --> 00:11:17.200
They also talk about having these overlay features,


00:11:17.200 --> 00:11:19.600
which is pretty wild.


00:11:19.600 --> 00:11:22.680
This has to do with the different rings that I talked about.


00:11:22.680 --> 00:11:24.680
So when you connect, you can say,


00:11:24.680 --> 00:11:26.360
I wanna connect to the middle office ring


00:11:26.360 --> 00:11:29.040
and then the FICC ring and then the default ring.


00:11:29.040 --> 00:11:30.640
So then when you do a database query,


00:11:30.640 --> 00:11:34.880
which by the way, it looks like a dictionary index,


00:11:34.880 --> 00:11:36.400
just bracket key.


00:11:36.400 --> 00:11:41.400
It first is gonna look for it in the middle office database


00:11:41.400 --> 00:11:43.880
and then it's gonna look in the FICC database


00:11:43.880 --> 00:11:44.960
and then the default database.


00:11:44.960 --> 00:11:47.440
So there's like these layers of settings


00:11:47.440 --> 00:11:49.680
and these layers of specificity.


00:11:49.680 --> 00:11:51.840
And they even do things that are


00:11:51.840 --> 00:11:55.520
to some effect of like monkey patching.


00:11:55.520 --> 00:11:57.400
Like if you need to change it,


00:11:57.400 --> 00:11:59.360
you can have like your dev ring


00:11:59.360 --> 00:12:01.840
and then the middle office ring and then the outer ring.


00:12:01.840 --> 00:12:03.400
And you could change the value


00:12:03.400 --> 00:12:05.760
and kind of like for mocking or something.


00:12:05.760 --> 00:12:09.560
So yeah, to your point, Brian,


00:12:09.560 --> 00:12:11.120
they say there are some good reasons, Cal says,


00:12:11.120 --> 00:12:13.620
There's some good reasons not to use Barbara.


00:12:13.620 --> 00:12:14.460
If your data--


00:12:14.460 --> 00:12:15.280
(laughing)


00:12:15.280 --> 00:12:16.300
Stop.


00:12:16.300 --> 00:12:17.860
Let me count the ways.


00:12:17.860 --> 00:12:20.140
If your data set is large,


00:12:20.140 --> 00:12:21.940
it may be a good idea to look elsewhere,


00:12:21.940 --> 00:12:26.380
perhaps in a traditional SQL database or KDB+,


00:12:26.380 --> 00:12:28.700
which I have no idea what that is.


00:12:28.700 --> 00:12:31.700
There's a limit on the size of Barbara objects,


00:12:31.700 --> 00:12:36.700
which is compressed when it's zipped 16 megs or smaller,


00:12:36.700 --> 00:12:38.620
which is pretty interesting.


00:12:38.620 --> 00:12:40.740
And then paired with this is this direct,


00:12:40.740 --> 00:12:43.660
this thing called Dagger, which is a directed acyclic graph


00:12:43.660 --> 00:12:46.240
that allows you to set up relationships


00:12:46.240 --> 00:12:48.900
between instruments, like, okay, I've got a bond


00:12:48.900 --> 00:12:51.620
and then I've got a credit default swap on that bond


00:12:51.620 --> 00:12:54.900
and then I've got like a bond of default swaps


00:12:54.900 --> 00:12:58.140
or you know, like this whole layer of stuff.


00:12:58.140 --> 00:13:01.820
And all of these things are like linked objects


00:13:01.820 --> 00:13:05.460
through these pickled things that you can ask questions


00:13:05.460 --> 00:13:10.460
about and like get sort of like graph database type things.


00:13:10.540 --> 00:13:11.960
That's pretty interesting.


00:13:11.960 --> 00:13:15.820
They talk a lot about how you model these things


00:13:15.820 --> 00:13:19.620
like instruments and swaps and stuff in Python.


00:13:19.620 --> 00:13:21.060
That's not super interesting,


00:13:21.060 --> 00:13:23.220
but I wanted to highlight this section


00:13:23.220 --> 00:13:24.060
and see what y'all thought.


00:13:24.060 --> 00:13:26.260
It says, if you understand Excel,


00:13:26.260 --> 00:13:31.220
you'll be starting to recognize


00:13:31.220 --> 00:13:32.580
how a lot of the stuff here works.


00:13:32.580 --> 00:13:35.480
In Excel spreadsheets are cells and they have dependencies,


00:13:35.480 --> 00:13:37.000
which is like an acyclic graph,


00:13:37.000 --> 00:13:42.000
like this dagger hierarchy graph database thing has.


00:13:42.000 --> 00:13:46.560
And it has a lot, so they basically modeled


00:13:46.560 --> 00:13:48.960
so much of the code around how Excel works.


00:13:48.960 --> 00:13:51.500
So you model the data first and then the behavior,


00:13:51.500 --> 00:13:53.360
rather, usually we write code


00:13:53.360 --> 00:13:56.720
and then we have data that comes out of it.


00:13:56.720 --> 00:13:59.200
So it's pretty interesting.


00:13:59.200 --> 00:14:01.440
There's also this thing called Wallpole,


00:14:01.440 --> 00:14:04.280
which is a database runner.


00:14:04.280 --> 00:14:06.840
So when you get to this section,


00:14:06.840 --> 00:14:08.960
So it's time to drop a bit of a bombshell.


00:14:08.960 --> 00:14:13.580
Let's talk about deployment, versioning, et cetera.


00:14:13.580 --> 00:14:17.240
The source code of this entire system itself,


00:14:17.240 --> 00:14:19.280
even including a Barbara, is stored in Barbara,


00:14:19.280 --> 00:14:22.240
not on disk, and it remains composed,


00:14:22.240 --> 00:14:25.440
and it's kept in a special Barbara ring called source code.


00:14:25.440 --> 00:14:30.280
(laughing)


00:14:30.280 --> 00:14:31.980
All right, what do you all think of that?


00:14:31.980 --> 00:14:35.920
- My inner release engineer has left the building.


00:14:35.920 --> 00:14:37.720
(laughing)


00:14:37.720 --> 00:14:39.720
Oh man, that's frightening.


00:14:39.720 --> 00:14:41.640
- Yeah, so not keeping the source code


00:14:41.640 --> 00:14:44.040
in the file system breaks some assumptions.


00:14:44.040 --> 00:14:45.960
Like how does the program run?


00:14:45.960 --> 00:14:46.800
- Yeah.


00:14:46.800 --> 00:14:48.080
- So this wallpole thing runs,


00:14:48.080 --> 00:14:49.760
it's built to basically run source code


00:14:49.760 --> 00:14:51.700
that originates from a database.


00:14:51.700 --> 00:14:54.000
And it's all one huge database.


00:14:54.000 --> 00:14:57.960
So like if you think mono repo, it's like that.


00:14:57.960 --> 00:15:01.440
Because you import from database


00:15:01.440 --> 00:15:03.840
and it's just like whatever you need is there.


00:15:03.840 --> 00:15:08.440
So versioning, it's like the anti micro service.


00:15:08.440 --> 00:15:12.920
Basically the entire whole thing is literally there.


00:15:12.920 --> 00:15:15.000
And then the way that you deploy it,


00:15:15.000 --> 00:15:17.280
let's see there, they talk about vouch.


00:15:17.280 --> 00:15:20.320
So the way that you deploy to it is really interesting


00:15:20.320 --> 00:15:25.320
in that you, it reminds me of the,


00:15:25.320 --> 00:15:28.640
it works on my machine certification program.


00:15:28.640 --> 00:15:32.360
So the way you deploy to the system


00:15:32.360 --> 00:15:34.020
is you just commit it to the database


00:15:34.020 --> 00:15:35.980
and boom, it's deployed, it's running, right?


00:15:35.980 --> 00:15:38.020
Because there's only one place the code lives,


00:15:38.020 --> 00:15:38.860
it's in the database.


00:15:38.860 --> 00:15:41.580
So once you do a commit, that's a full on deployment.


00:15:41.580 --> 00:15:46.300
Now, how does it get into there?


00:15:46.300 --> 00:15:49.420
There's a vouch system where you can get somebody


00:15:49.420 --> 00:15:51.780
who can code review what you've done and say,


00:15:51.780 --> 00:15:54.540
yeah, I vouch for this, you can commit it.


00:15:54.540 --> 00:15:57.300
Unless you have a high reputation


00:15:57.300 --> 00:15:58.380
for not breaking the system,


00:15:58.380 --> 00:16:00.300
in which case you can directly commit to it


00:16:00.300 --> 00:16:01.420
without question.


00:16:01.420 --> 00:16:03.660
(laughing)


00:16:03.660 --> 00:16:04.500
- No!


00:16:04.500 --> 00:16:07.080
So I guess a culture of code review


00:16:07.080 --> 00:16:08.920
is not like a thing there.


00:16:08.920 --> 00:16:11.180
- I guess.


00:16:11.180 --> 00:16:16.560
So another interesting knock on that comes from


00:16:16.560 --> 00:16:20.600
storing your code in a database is how do you edit it?


00:16:20.600 --> 00:16:21.440
Right?


00:16:21.440 --> 00:16:22.680
Like what editor to use?


00:16:22.680 --> 00:16:25.080
VI won't work on it, PyCharm won't work on it,


00:16:25.080 --> 00:16:28.920
VS Code won't work on it because those work on files.


00:16:28.920 --> 00:16:33.240
So this Minerva system has its own IDE


00:16:33.240 --> 00:16:35.520
because most IDEs think you have files,


00:16:35.520 --> 00:16:38.080
not databases that contain the data.


00:16:38.080 --> 00:16:42.040
Does that make sense? - This is a nightmare.


00:16:42.040 --> 00:16:43.200
- It is, that makes sense.


00:16:43.200 --> 00:16:45.800
But the guy, Cal says, what I can't understand


00:16:45.800 --> 00:16:48.040
is why does it contain its own web framework?


00:16:48.040 --> 00:16:52.840
Investment banks have a one-way approach


00:16:52.840 --> 00:16:54.400
to open source software.


00:16:54.400 --> 00:16:57.340
Some of it can come in, but none of it can go out.


00:16:58.720 --> 00:17:03.720
- Well, I've seen projects that like people building IDEs


00:17:03.720 --> 00:17:07.280
within a company.


00:17:07.280 --> 00:17:09.720
And I always shake my head and say,


00:17:09.720 --> 00:17:12.000
why you, this isn't your business.


00:17:12.000 --> 00:17:14.760
Why are you making an IDE within your company?


00:17:14.760 --> 00:17:16.800
- Yeah.


00:17:16.800 --> 00:17:21.000
- There are a couple of things that strike me


00:17:21.000 --> 00:17:21.840
from this article.


00:17:21.840 --> 00:17:25.320
The first is as I read it, 'cause I really enjoyed it.


00:17:25.320 --> 00:17:30.320
All I could think of is, most of the way through, it is his one.


00:17:30.320 --> 00:17:31.480
It really is.


00:17:31.480 --> 00:17:32.200
It really is.


00:17:32.200 --> 00:17:37.800
The thing that struck me is this is a perfect example of large organization,


00:17:37.800 --> 00:17:44.160
a complex, a code base and engineering system and time.


00:17:44.160 --> 00:17:48.320
Cause this really just smells like something that just got like built up.


00:17:48.320 --> 00:17:52.320
Like, you know, the layers of rings around a tree over time, engineer


00:17:52.320 --> 00:17:55.320
after engineer, year after year, making decisions.


00:17:55.320 --> 00:17:57.640
And I'm sure like in the modern day,


00:17:57.640 --> 00:17:59.080
everyone who walks in the door,


00:17:59.080 --> 00:18:01.800
they probably have to plan for the period of time


00:18:01.800 --> 00:18:04.160
where the new engineer just freaks out


00:18:04.160 --> 00:18:05.620
when they tell them all this stuff,


00:18:05.620 --> 00:18:07.540
as they adjust to the new reality


00:18:07.540 --> 00:18:09.100
that they're being exposed to.


00:18:09.100 --> 00:18:13.220
And that in some sense, this is a particular wacky case,


00:18:13.220 --> 00:18:15.920
but it's that way in kind of every large


00:18:15.920 --> 00:18:17.760
corporate environment in a way.


00:18:17.760 --> 00:18:18.600
- That's true.


00:18:18.600 --> 00:18:19.680
Yeah, that's totally true.


00:18:19.680 --> 00:18:21.880
You actually, Cal actually discusses this a little bit here


00:18:21.880 --> 00:18:26.880
and says, "This fact that you can't do very much


00:18:26.880 --> 00:18:29.680
"of open source, you're stuck on some version of Python


00:18:29.680 --> 00:18:32.860
"that's never gonna see, never gonna go back to sync


00:18:32.860 --> 00:18:34.980
"with the real Python, 'cause how do you even do


00:18:34.980 --> 00:18:37.020
"a database migration to that thing?"


00:18:37.020 --> 00:18:38.660
(laughing)


00:18:38.660 --> 00:18:41.180
Says, "It could be the biggest disadvantage


00:18:41.180 --> 00:18:42.820
"for you as your profession.


00:18:42.820 --> 00:18:46.240
"Every year you spend in the Minerva monoculture,


00:18:46.240 --> 00:18:48.140
"the skills you need to interact


00:18:48.140 --> 00:18:50.220
"with normal software atrophy.


00:18:50.220 --> 00:18:53.960
By the time I left, I had pretty much forgotten how to wrestle pip in virtual


00:18:53.960 --> 00:18:57.060
EMV and shape essential skills for normal Python


00:18:57.060 --> 00:19:01.000
when everything is in the same repo and all the code is just an import away.


00:19:01.000 --> 00:19:03.360
Software packaging just does not come up.


00:19:03.360 --> 00:19:06.160
So, yeah, there's a lot of a lot of stuff.


00:19:06.160 --> 00:19:10.500
One way to deal with retention is to have a system where people


00:19:10.500 --> 00:19:15.720
need to be skilled to use it and it removes all their other skills.


00:19:15.720 --> 00:19:16.960
So they can't get another job.


00:19:18.100 --> 00:19:20.020
>> I was just about to say,


00:19:20.020 --> 00:19:23.020
this seems like a retention anti-pattern to me.


00:19:23.020 --> 00:19:26.100
But you're my engineer.


00:19:26.100 --> 00:19:30.180
>> It depends on which side of that leave,


00:19:30.180 --> 00:19:33.180
stay story you're on because if your job is like,


00:19:33.180 --> 00:19:36.300
I want job security and I don't want to have to learn new things,


00:19:36.300 --> 00:19:39.700
welcome to Minerva, whatever this is,


00:19:39.700 --> 00:19:42.620
you're home, you can stay here forever.


00:19:42.620 --> 00:19:43.940
It won't replace you.


00:19:43.940 --> 00:19:46.700
On the other hand, if you want to use FastAPI,


00:19:46.700 --> 00:19:48.420
You're like I gotta get out of here.


00:19:48.420 --> 00:19:51.500
We can't be on Python 2-3 this long.


00:19:51.500 --> 00:19:52.340
I'm out.


00:19:52.340 --> 00:19:54.420
(laughs)


00:19:54.420 --> 00:19:59.780
- So I did wanna mention that both Minerva and Barbara


00:19:59.780 --> 00:20:01.620
are things that you can pip install,


00:20:01.620 --> 00:20:03.740
but those aren't things we're talking about.


00:20:03.740 --> 00:20:06.220
- No, these are like secret code names.


00:20:06.220 --> 00:20:08.140
I suspect the Minerva you installed


00:20:08.140 --> 00:20:09.380
doesn't have its own IDE.


00:20:09.380 --> 00:20:10.980
I'm just guessing, right?


00:20:10.980 --> 00:20:15.060
No, there's a lot of interesting conversation here


00:20:15.060 --> 00:20:15.900
about this.


00:20:15.900 --> 00:20:18.180
I'm like, I don't want to read this like 30 minute thing,


00:20:18.180 --> 00:20:19.780
but I do want to talk about it tomorrow.


00:20:19.780 --> 00:20:21.780
So I actually use this thing called natural reader.


00:20:21.780 --> 00:20:22.780
You can just throw this in here


00:20:22.780 --> 00:20:24.060
and it'll just like read it back.


00:20:24.060 --> 00:20:24.900
Super nice.


00:20:24.900 --> 00:20:25.740
- Oh, that's so cool.


00:20:25.740 --> 00:20:28.860
- So I was, it was like 1130 last night


00:20:28.860 --> 00:20:29.860
when I started on this, I'm like,


00:20:29.860 --> 00:20:32.420
oh, I'm a little too tired to focus on this much stuff.


00:20:32.420 --> 00:20:34.780
But yeah, it's pretty nice.


00:20:34.780 --> 00:20:37.260
- You may have just made my day because I actually,


00:20:37.260 --> 00:20:39.820
you know, being part, yeah, because being partially blind,


00:20:39.820 --> 00:20:43.660
I feel like I'm not as good at reading as I used to be.


00:20:43.660 --> 00:20:48.460
I feel like, you know how some people who have like lupus and other kinds, they talk


00:20:48.460 --> 00:20:51.200
about spoons, like they only have so much energy.


00:20:51.200 --> 00:20:57.080
My eyes only have so much like eye stream, spoons, over the course of any one day that


00:20:57.080 --> 00:20:58.080
I can do.


00:20:58.080 --> 00:21:02.860
And there are times when I'm like, I cannot stare at a screen for even a moment longer.


00:21:02.860 --> 00:21:07.300
And I really love things like audio books or the rare services like pocket that will


00:21:07.300 --> 00:21:09.140
actually read you articles.


00:21:09.140 --> 00:21:13.340
And so this sounds like an awesome tool for those things that don't have that feature


00:21:13.340 --> 00:21:14.180
- It's really neat.


00:21:14.180 --> 00:21:16.580
It has different modes.


00:21:16.580 --> 00:21:18.100
I don't know how to make this thing come up


00:21:18.100 --> 00:21:19.140
without creating an account


00:21:19.140 --> 00:21:21.500
'cause I don't know my login is here.


00:21:21.500 --> 00:21:23.660
But it has like, if you're dyslexic,


00:21:23.660 --> 00:21:26.020
it has like a dyslexic font you can turn on


00:21:26.020 --> 00:21:27.140
and it'll highlight as you write.


00:21:27.140 --> 00:21:28.780
It's pretty neat.


00:21:28.780 --> 00:21:30.180
- That's awesome. - So yeah.


00:21:30.180 --> 00:21:32.380
- Cool. - Not directly related,


00:21:32.380 --> 00:21:34.820
but I've found it to be useful in doing this research.


00:21:34.820 --> 00:21:36.540
I was too tired.


00:21:36.540 --> 00:21:38.740
A little bit of audience interaction here.


00:21:40.780 --> 00:21:45.380
Brandon says, "Run the source code from a database."


00:21:45.380 --> 00:21:47.140
That's a one heck of an injection attack.


00:21:47.140 --> 00:21:48.380
Yeah, I mean, a little Bobby Cable


00:21:48.380 --> 00:21:50.380
to do this all over this thing, right?


00:21:50.380 --> 00:21:51.460
(laughing)


00:21:51.460 --> 00:21:53.900
- It's one big injection risk.


00:21:53.900 --> 00:21:54.980
- Although on the other hand,


00:21:54.980 --> 00:21:57.820
I feel there might be some big safety here as well


00:21:57.820 --> 00:22:00.100
because everything is pickled.


00:22:00.100 --> 00:22:02.100
You've got to know what version of Python


00:22:02.100 --> 00:22:05.060
they forked it from and any variations


00:22:05.060 --> 00:22:07.180
that may be changed to the object model


00:22:07.180 --> 00:22:09.140
to even get it to parse it back.


00:22:09.140 --> 00:22:11.820
So it might be naturally safe as it's just like an opaque,


00:22:11.820 --> 00:22:13.220
it's almost like encryption.


00:22:13.220 --> 00:22:18.760
- Really, really, really weak encryption.


00:22:18.760 --> 00:22:22.480
- Yeah, and then let's see.


00:22:22.480 --> 00:22:26.120
Yeah, David says, absolutely everyone in the live audience


00:22:26.120 --> 00:22:28.140
has a furrowed brow right now.


00:22:28.140 --> 00:22:30.700
(laughing)


00:22:30.700 --> 00:22:34.660
Yes, David, or some like nervous laughter.


00:22:34.660 --> 00:22:37.300
- You know, there is one serious, serious aspect of this


00:22:37.300 --> 00:22:44.620
So we were talking about retention and the article talks about as he worked in this private


00:22:44.620 --> 00:22:48.380
ecosystem, he felt his external skills atrophying.


00:22:48.380 --> 00:22:54.540
That is a common problem that I have heard so many people who work in these large kind


00:22:54.540 --> 00:23:00.180
of like pocket universes, whether it's an Amazon or a Google or a Microsoft or an IBM


00:23:00.180 --> 00:23:06.260
or whatever, people can kind of feel very disconnected from where the field is currently


00:23:06.260 --> 00:23:12.820
going at the hot bleeding edge in the outside world. And I think it's a real issue because


00:23:12.820 --> 00:23:17.180
you can't always justify pulling in the latest greatest. Sometimes there are engineering


00:23:17.180 --> 00:23:23.260
implications to that that would be really problematic to your business's bottom line.


00:23:23.260 --> 00:23:30.100
And so I say, and I realize time is finite and this is hard, but this is where I say


00:23:30.100 --> 00:23:35.100
even dabbling in having side projects, even if it's just the kind of thing you do on a


00:23:35.100 --> 00:23:37.700
a weekend every once in a while when you have time.


00:23:37.700 --> 00:23:41.580
It's a great way to sort of like feel unconstrained


00:23:41.580 --> 00:23:44.380
by the requirements of your business


00:23:44.380 --> 00:23:47.540
and to go sort of play on your own terms.


00:23:47.540 --> 00:23:50.300
- Yeah, I mean, write helper scripts for yourself,


00:23:50.300 --> 00:23:53.140
even for your job in modern Python.


00:23:53.140 --> 00:23:54.140
- Bingo.


00:23:54.140 --> 00:23:55.300
- Yeah, absolutely.


00:23:55.300 --> 00:23:57.660
- Good advice indeed.


00:23:57.660 --> 00:24:00.300
All right, over to you, Chris.


00:24:00.300 --> 00:24:01.420
- Okay, thank you.


00:24:01.420 --> 00:24:04.740
So I have decided, I was thinking about this


00:24:04.740 --> 00:24:08.740
and thinking about the fact that most of the people


00:24:08.740 --> 00:24:11.780
who come and are guests here on this podcast


00:24:11.780 --> 00:24:15.580
are really sort of accomplished hardcore Python programmers


00:24:15.580 --> 00:24:18.040
and they're familiar with the latest and greatest tools.


00:24:18.040 --> 00:24:21.380
There is no way that I'm going to scoop you all.


00:24:21.380 --> 00:24:24.940
So I decided to go a completely different direction


00:24:24.940 --> 00:24:25.780
and go in the direction--


00:24:25.780 --> 00:24:26.620
- Scoop us to find.


00:24:26.620 --> 00:24:29.700
- That's right, exactly, of the whimsical side of computing


00:24:29.700 --> 00:24:32.920
because I think we all need to stay in touch with that.


00:24:32.920 --> 00:24:36.560
I know I had an issue a number of months ago


00:24:36.560 --> 00:24:39.200
before I changed jobs where I was feeling very burned out.


00:24:39.200 --> 00:24:40.420
And I felt like I just,


00:24:40.420 --> 00:24:42.280
I need to sort of get back in touch with like,


00:24:42.280 --> 00:24:44.840
why am I passionate about computing


00:24:44.840 --> 00:24:46.580
and programming in this space?


00:24:46.580 --> 00:24:50.420
And one of the things that really was bombed to my,


00:24:50.420 --> 00:24:54.680
you know, soothed my burnt out soul was


00:24:54.680 --> 00:24:56.920
these retro consoles.


00:24:56.920 --> 00:24:59.840
I used one called TIC-80, which was not Python based.


00:24:59.840 --> 00:25:01.240
It's Lua based.


00:25:01.240 --> 00:25:08.380
But the idea here is you can build like basically retro style video games very, very,


00:25:08.380 --> 00:25:11.780
very easily with very few lines of code.


00:25:11.780 --> 00:25:15.520
Because these things, they do have some constraints,


00:25:15.520 --> 00:25:18.660
but the constraints are completely artificial, right?


00:25:18.660 --> 00:25:23.480
Like in this case, this one is fixed 16 color palette, 256 by 256.


00:25:23.480 --> 00:25:30.840
You know, like the constraints, the world that you're building in is uncomplicated.


00:25:30.840 --> 00:25:32.000
and small.


00:25:32.000 --> 00:25:35.560
And so as a result, you can sort of like step in


00:25:35.560 --> 00:25:38.900
and wrap your head around this thing so quickly


00:25:38.900 --> 00:25:40.240
and come up to speed.


00:25:40.240 --> 00:25:42.160
And suddenly you're like, you know,


00:25:42.160 --> 00:25:45.440
oh, I made a flying saucer fly across the screen.


00:25:45.440 --> 00:25:46.560
I built a sprite.


00:25:46.560 --> 00:25:47.760
Oh, I'm making music.


00:25:47.760 --> 00:25:51.380
I'm coding, you know, the main loop of my game.


00:25:51.380 --> 00:25:54.640
And you can do it in a very comparatively speaking


00:25:54.640 --> 00:25:58.000
short period of time with just a few lines of code.


00:25:58.000 --> 00:26:00.280
I'm just skipping down a little bit here.


00:26:00.280 --> 00:26:01.960
Like, let's take an example.


00:26:01.960 --> 00:26:04.520
They have the sort of like, you know,


00:26:04.520 --> 00:26:07.480
snake eating dots kind of game.


00:26:07.480 --> 00:26:10.560
And it's comparatively speaking,


00:26:10.560 --> 00:26:13.180
like when you compare it with like one of the modern,


00:26:13.180 --> 00:26:17.560
you know, game framework code bases.


00:26:17.560 --> 00:26:18.680
- Unreal Engine or something.


00:26:18.680 --> 00:26:20.320
- Yeah, Unreal Engine or Unity,


00:26:20.320 --> 00:26:21.360
where you're talking about like,


00:26:21.360 --> 00:26:24.600
here's my 60 pages of coordinate transforms


00:26:24.600 --> 00:26:27.520
and you just look at it and you're like, I can't.


00:26:27.520 --> 00:26:29.760
- And my a hundred gigs of texture


00:26:29.760 --> 00:26:32.020
(laughing)


00:26:32.020 --> 00:26:32.860
- Exactly.


00:26:32.860 --> 00:26:34.540
- This project is called Pixel.


00:26:34.540 --> 00:26:35.900
I'm guessing that's how you,


00:26:35.900 --> 00:26:37.140
P-Y-X-E-L.


00:26:37.140 --> 00:26:40.140
And it allows you to create extremely simple


00:26:40.140 --> 00:26:43.380
2D animated games in Python, right?


00:26:43.380 --> 00:26:44.380
- Yes, I apologize.


00:26:44.380 --> 00:26:45.340
I should have said that.


00:26:45.340 --> 00:26:46.700
Yes, exactly.


00:26:46.700 --> 00:26:49.960
And so back when I was using the other one,


00:26:49.960 --> 00:26:51.720
I kept thinking the entire time,


00:26:51.720 --> 00:26:54.860
like, wow, you know, I'm really having fun with this.


00:26:54.860 --> 00:26:58.220
And I'm really, I actually really enjoyed learning Lua


00:26:58.220 --> 00:26:59.700
and it's a really fun language.


00:26:59.700 --> 00:27:04.700
and it has a lot of characteristics that are wonderful.


00:27:04.700 --> 00:27:06.700
But I kept thinking like, wow,


00:27:06.700 --> 00:27:09.420
I kind of wish I didn't have to get my brain


00:27:09.420 --> 00:27:11.940
to switch gears, which is not very good at doing always.


00:27:11.940 --> 00:27:14.200
I wish I could be coding this in Python.


00:27:14.200 --> 00:27:17.500
And so this framework gives you the opportunity


00:27:17.500 --> 00:27:18.660
to do just that.


00:27:18.660 --> 00:27:20.980
And so you can use these.


00:27:20.980 --> 00:27:22.420
It almost feels like,


00:27:22.420 --> 00:27:24.540
for those of us who are old enough to remember,


00:27:24.540 --> 00:27:28.260
it almost feels like coding in basic on the microcomputers


00:27:28.260 --> 00:27:32.340
some of us grew up with in the eighties, right? Like it's that sort of kind of like.


00:27:32.340 --> 00:27:36.580
- Back when you could type it in, you're like, I saw it printed and I typed it in and I ran it.


00:27:36.580 --> 00:27:44.020
- Yes, exactly, exactly, exactly. You know, it's like, yeah, it really, really is. And so I really,


00:27:44.020 --> 00:27:48.820
this one, what's, what's kind of interesting about this one is like, this is a great example of the,


00:27:48.820 --> 00:27:56.020
the sort of like sound and music section of this snake game here is, this one is actually a little


00:27:56.020 --> 00:28:00.900
bit more Pythonic, which I think is actually really kind of cool for Python folks like us,


00:28:00.900 --> 00:28:07.700
because the other ones that I've seen kind of like drifted more back towards the 1980s, like,


00:28:07.700 --> 00:28:12.020
you know, a little bit lower level of abstraction kind of thing. Whereas this one really takes


00:28:12.020 --> 00:28:17.380
advantage of some of the beautiful data structures like sets and dictionaries and the like that


00:28:17.380 --> 00:28:25.220
Python has to offer. So you can use this really kind of nice expressive syntax to write your games.


00:28:25.220 --> 00:28:31.300
And I am just super excited. I played with it a bit. I wrote a few lines of it and I, you know,


00:28:31.300 --> 00:28:36.180
kicked the tires just to see how it worked. But I really have not had the opportunity yet to


00:28:36.180 --> 00:28:42.900
dive deep and kind of rewrite my side project in it. But I totally intend to and I'm super


00:28:42.900 --> 00:28:48.180
psyched about it. And I'm really, really glad that it exists. Yeah, I'd love to do this. I mean,


00:28:48.180 --> 00:28:54.660
I got my start typing in games from the back on a TRS-80 from the back of magazines. And


00:28:54.660 --> 00:28:56.820
and have an example.


00:28:56.820 --> 00:28:59.100
So one of the things, some engine like this,


00:28:59.100 --> 00:29:00.700
one of the things I love to do with somebody


00:29:00.700 --> 00:29:03.460
is take an existing game and say,


00:29:03.460 --> 00:29:05.520
let's look at the code and see what happens


00:29:05.520 --> 00:29:07.760
if we modify this field.


00:29:07.760 --> 00:29:10.820
Is there any way we can get the character to run faster?


00:29:10.820 --> 00:29:13.100
Does that make it more fun to play the game or less fun?


00:29:13.100 --> 00:29:14.420
Things like that.


00:29:14.420 --> 00:29:15.260
- Absolutely.


00:29:15.260 --> 00:29:17.540
And that kind of thing, that kind of like,


00:29:17.540 --> 00:29:19.700
well, let's take a look at this and tweak it a little bit


00:29:19.700 --> 00:29:21.700
is so simple with this kind of thing


00:29:21.700 --> 00:29:26.700
because it's like everything is so like uncomplicated


00:29:26.700 --> 00:29:28.940
and straightforward, like chances are,


00:29:28.940 --> 00:29:32.280
like the, here is the number of frames that we skip


00:29:32.280 --> 00:29:35.480
as we transition our Sprite character across the screen.


00:29:35.480 --> 00:29:36.540
Oh, let's just tweak that.


00:29:36.540 --> 00:29:38.660
And now you've done your sort of like,


00:29:38.660 --> 00:29:40.620
let's make him run a little faster kind of thing.


00:29:40.620 --> 00:29:44.980
It's all so satisfyingly in a world where,


00:29:44.980 --> 00:29:46.600
I don't know about you guys, but my day job,


00:29:46.600 --> 00:29:48.980
especially the old one that I did was like,


00:29:48.980 --> 00:29:51.380
make a code change or make a configuration change


00:29:51.380 --> 00:29:53.940
and then wait eight hours for it to deploy


00:29:53.940 --> 00:29:54.820
through the pipeline.


00:29:54.820 --> 00:29:57.500
Like having something that's immediate,


00:29:57.500 --> 00:30:00.360
instant feedback like this was just a delight.


00:30:00.360 --> 00:30:04.420
- Sorry, I'm just shocked at the eight hour turnaround time.


00:30:04.420 --> 00:30:05.260
I'm so sorry.


00:30:05.260 --> 00:30:06.100
(laughing)


00:30:06.100 --> 00:30:08.360
- That was just a really bad example there,


00:30:08.360 --> 00:30:09.500
that a couple of cases.


00:30:09.500 --> 00:30:11.380
It's not, that's not my day-to-day life.


00:30:11.380 --> 00:30:12.940
I actually love my day-to-day life.


00:30:12.940 --> 00:30:15.260
I'm very happy, but that was just, you know what I mean?


00:30:15.260 --> 00:30:17.580
We all have these like long build times.


00:30:17.580 --> 00:30:18.420
- Yep, yep.


00:30:19.300 --> 00:30:20.860
Will McGugan, hey Will, says,


00:30:20.860 --> 00:30:25.860
this makes me nostalgic for my ZX Spectrum in the 80s.


00:30:25.860 --> 00:30:27.300
(laughing)


00:30:27.300 --> 00:30:30.460
- Exactly, there's an Atari 800XL behind my head


00:30:30.460 --> 00:30:33.900
that I enjoy as well, so I feel that.


00:30:33.900 --> 00:30:36.860
- Who's not surprised that Will's been coding


00:30:36.860 --> 00:30:37.700
since the 80s?


00:30:37.700 --> 00:30:41.280
(laughing)


00:30:41.280 --> 00:30:42.740
- Now, now.


00:30:42.740 --> 00:30:44.900
- Also a few more follow-up items for your comment


00:30:44.900 --> 00:30:45.980
on side projects.


00:30:45.980 --> 00:30:48.220
Sam in the audience says, 100% agree, Chris,


00:30:48.220 --> 00:30:50.820
Side projects are a great way to keep yourself sharp,


00:30:50.820 --> 00:30:54.060
and Jose says, plus one for the side projects


00:30:54.060 --> 00:30:55.560
to try out the latest, indeed.


00:30:55.560 --> 00:30:59.880
So before we move on though, Brian,


00:30:59.880 --> 00:31:01.880
I want to tell everyone about our sponsor.


00:31:01.880 --> 00:31:05.780
This episode is sponsored by Shortcut, again.


00:31:05.780 --> 00:31:08.100
Thank you, Shortcut, for sponsoring


00:31:08.100 --> 00:31:09.820
and supporting Python Bytes.


00:31:09.820 --> 00:31:13.900
So there's a lot of project management tools out there,


00:31:13.900 --> 00:31:17.100
but they often suffer from either being too simple


00:31:17.100 --> 00:31:20.540
for engineering teams or too complex.


00:31:20.540 --> 00:31:24.060
And they end up looking like Bugzilla or something insane.


00:31:24.060 --> 00:31:26.100
And you're like, I really don't want to go here.


00:31:26.100 --> 00:31:27.940
You want something nice and simple,


00:31:27.940 --> 00:31:29.180
but that actually scales with you.


00:31:29.180 --> 00:31:33.420
Something that's good both for managers and for engineers.


00:31:33.420 --> 00:31:35.260
So that's what Shortcut is.


00:31:35.260 --> 00:31:38.660
It's built to cater to both of these groups.


00:31:38.660 --> 00:31:40.100
So it's built for software teams


00:31:40.100 --> 00:31:42.660
based on making workflows easy.


00:31:42.660 --> 00:31:44.740
Big scale objectives, goals, roadmaps


00:31:44.740 --> 00:31:49.040
can be easily tied into a team or individual work sprints.


00:31:49.040 --> 00:31:52.440
Progress on those are easily flow back to higher level reports.


00:31:52.440 --> 00:31:56.480
And of course, as all things should be, it's keyboard-friendly.


00:31:56.480 --> 00:32:00.680
You don't have to take your hand off and do a bunch of mousing around.


00:32:00.680 --> 00:32:03.780
You can use the UI if you like, but there's a bunch of hotkeys,


00:32:03.780 --> 00:32:05.980
which is fantastic, as I think they all should be.


00:32:05.980 --> 00:32:08.520
So it makes you work faster and just keep going.


00:32:08.520 --> 00:32:13.360
Good version control integration, works with Git, GitHub, GitLab, and so on.


00:32:13.360 --> 00:32:15.580
a lot of the places that you probably already know.


00:32:15.580 --> 00:32:17.020
So you can update your task project


00:32:17.020 --> 00:32:21.920
just by doing a commit or a PR, which is fantastic.


00:32:21.920 --> 00:32:24.380
The last thing you wanna do is update Git and GitHub


00:32:24.380 --> 00:32:27.160
and then go update your system, right?


00:32:27.160 --> 00:32:31.020
As iteration planning, you can see your team activity


00:32:31.020 --> 00:32:32.940
when you want to, or just focus on what you're doing.


00:32:32.940 --> 00:32:36.040
And you can even let it schedule your project for you.


00:32:36.040 --> 00:32:38.000
So nice burn down charge, cycle time,


00:32:38.000 --> 00:32:39.380
all that kind of stuff.


00:32:39.380 --> 00:32:41.600
So finally, you can have a project management tool


00:32:41.600 --> 00:32:43.820
that's both for engineers and managers.


00:32:43.820 --> 00:32:47.300
Give it a try at pythonbytes.fm/shortcut.


00:32:47.300 --> 00:32:49.460
It's a cool project and it helps support the show.


00:32:49.460 --> 00:32:51.160
So thank you for supporting us.


00:32:51.160 --> 00:32:55.340
Brian, what do you got next?


00:32:55.340 --> 00:32:56.580
What are we ditching now?


00:32:56.580 --> 00:32:59.140
- We're ditching CodeCov.


00:32:59.140 --> 00:33:00.620
(laughing)


00:33:00.620 --> 00:33:01.620
- Harsh crowd.


00:33:01.620 --> 00:33:03.940
- So, okay.


00:33:03.940 --> 00:33:07.780
So CodeCov has been great for a lot of people have used it.


00:33:07.780 --> 00:33:11.280
It's a third party, third service


00:33:11.280 --> 00:33:14.780
that you can attach to your repo or something.


00:33:14.780 --> 00:33:17.160
And it makes sure that you,


00:33:17.160 --> 00:33:19.440
and this has been helpful for merge requests and stuff.


00:33:19.440 --> 00:33:21.960
So if somebody does a PR,


00:33:21.960 --> 00:33:24.720
it makes sure that the coverage is,


00:33:24.720 --> 00:33:26.080
if you've had a hundred percent coverage,


00:33:26.080 --> 00:33:27.720
it makes sure that they don't degrade it.


00:33:27.720 --> 00:33:31.020
The code they add makes the coverage stay at a high level.


00:33:31.020 --> 00:33:37.400
But so it's not without problems, however.


00:33:37.640 --> 00:33:41.800
And Hinnick mentions that on some of his projects,


00:33:41.800 --> 00:33:45.880
it's been sometimes a CI pipeline is blocked


00:33:45.880 --> 00:33:49.280
just because it timed out with CodeCov.


00:33:49.280 --> 00:33:54.280
And that's not a good reason to fail a build.


00:33:54.280 --> 00:34:00.720
So anyway, Hinnick has this project where he said,


00:34:00.720 --> 00:34:03.720
"Wait a second, I'm just trying to make sure


00:34:03.720 --> 00:34:06.040
everything goes to 100%."


00:34:06.040 --> 00:34:10.600
coverage.py, hey Ned, second thing here for you.


00:34:10.600 --> 00:34:14.120
But coverage.py from Ned Batchelder,


00:34:14.120 --> 00:34:16.000
maintaining it of course,


00:34:16.000 --> 00:34:18.880
has a thing that it says fail if under a hundred,


00:34:18.880 --> 00:34:19.700
under a percent.


00:34:19.700 --> 00:34:20.880
So you can do a hundred percent,


00:34:20.880 --> 00:34:24.080
but you can do 80 or whatever your current percentage is.


00:34:24.080 --> 00:34:27.200
But anyway, if you want that, something like CodeCov,


00:34:27.200 --> 00:34:30.360
you can get that with coverage.py,


00:34:30.360 --> 00:34:32.080
but there's some tricks around it.


00:34:32.080 --> 00:34:35.200
So if you've got, one of the things coverage does


00:34:35.200 --> 00:34:39.800
is let's say you've got a project that has some code


00:34:39.800 --> 00:34:43.160
that is run, like you're trying to take advantage


00:34:43.160 --> 00:34:44.920
of some of the newer things, but you also,


00:34:44.920 --> 00:34:47.520
newer Python things, but you want to run on older Python too.


00:34:47.520 --> 00:34:49.800
So there's some if statements for Python version,


00:34:49.800 --> 00:34:53.840
for example, but it might be a different hardware as well,


00:34:53.840 --> 00:34:56.200
like Windows versus Mac, but there might be code


00:34:56.200 --> 00:34:58.080
that's not, that's run in one test suite


00:34:58.080 --> 00:34:59.360
and not on the other.


00:34:59.360 --> 00:35:00.880
So in order to do that,


00:35:00.880 --> 00:35:03.520
you kind of have to run in parallel mode


00:35:03.520 --> 00:35:06.880
and then combine the coverage reports at the end.


00:35:06.880 --> 00:35:08.720
And it sounds complicated,


00:35:08.720 --> 00:35:12.000
but mostly we just copy somebody else's work.


00:35:12.000 --> 00:35:15.000
So, and Hinnick has the examples here.


00:35:15.000 --> 00:35:20.000
So Hinnick goes through using GitHub and coverage


00:35:20.000 --> 00:35:22.280
to do everything that you used to be able,


00:35:22.280 --> 00:35:25.200
you were doing with CodeGov.


00:35:25.200 --> 00:35:28.680
So this is a nice article with examples.


00:35:28.680 --> 00:35:31.640
So we've got, for each project,


00:35:31.640 --> 00:35:35.260
we're downloading the coverage report


00:35:35.260 --> 00:35:36.940
and then combining it at the end


00:35:36.940 --> 00:35:39.780
with a report with a fail under 100.


00:35:39.780 --> 00:35:42.580
Really cool, if this is something you wanna do,


00:35:42.580 --> 00:35:45.260
it's basically it's a short article with examples.


00:35:45.260 --> 00:35:48.100
He even shows, he's got in his struct log,


00:35:48.100 --> 00:35:52.500
he shows his main workflow for GitHub pipelines


00:35:52.500 --> 00:35:54.020
that does all of this.


00:35:54.020 --> 00:35:57.440
So just kind of read his code and make it work.


00:35:57.440 --> 00:36:00.380
And I was actually thinking of doing this


00:36:00.380 --> 00:36:02.420
on a couple of projects I've got.


00:36:02.420 --> 00:36:05.100
I wanted to make sure that they were up at 100%


00:36:05.100 --> 00:36:06.220
and do something like this.


00:36:06.220 --> 00:36:10.220
But I actually, for some reason, I was dragging my feet


00:36:10.220 --> 00:36:12.180
and I didn't know why, but now I don't need to.


00:36:12.180 --> 00:36:14.900
I'll go ahead and use Hennig's suggestion.


00:36:14.900 --> 00:36:16.900
- Now you don't have to invent it, just do it.


00:36:16.900 --> 00:36:17.740
- Yeah.


00:36:17.740 --> 00:36:19.180
- Set up that job on GitHub.


00:36:19.180 --> 00:36:23.220
- This is actually something I've been kind of struggling


00:36:23.220 --> 00:36:24.780
with, I shouldn't say struggling with,


00:36:24.780 --> 00:36:27.980
I should say this is a journey that I have been on


00:36:27.980 --> 00:36:36.620
in that testing and code coverage and that whole class of proof of correctness is my weakest suit.


00:36:36.620 --> 00:36:42.220
And one of the things that I've really been sort of trying to wrap my head around is,


00:36:42.220 --> 00:36:52.860
I see a lot of like unit test code that seems like it's just there to keep the coverage percentage up.


00:36:52.860 --> 00:36:55.900
And as far as I can tell, it doesn't actually test anything.


00:36:56.460 --> 00:37:24.060
like we're, you know, creating these mocks and like, and everything and, but they don't actually, like, enforce any contracts or prove anything out. And I'm trying to figure out how we can use these tools in ways that actually sort of raise the bar on code quality without encouraging this kind of like, I don't know, t crossing and I dotting behavior.


00:37:24.260 --> 00:37:29.180
Well, we're kind of getting on a tangent, but I would say that code reviews on tests are important.


00:37:29.180 --> 00:37:38.620
Yeah, because that's, that's just I mean, one of the easiest ways to get 100% coverage with no failing test is don't put any asserts in your tests.


00:37:38.620 --> 00:37:44.500
Just saying,


00:37:44.500 --> 00:37:48.620
that's it. And that makes an excellent point unto itself. Yes, thank you.


00:37:50.900 --> 00:37:56.020
Nice. All right. Well, let's talk about the tippy top, the tip top.


00:37:56.020 --> 00:38:04.940
So I'm sure you all are familiar with top. It's like this somewhat dreadful way to tell what's happening on a Unix system.


00:38:04.940 --> 00:38:12.220
Linux to see like what's happening is why is it busy? Is it not busy? I say dreadful because it's so simple. And there's better tools.


00:38:12.220 --> 00:38:20.100
One of them being this tip top thing for so for a long time I use glances. I didn't know I still do use glances. I'm not sure


00:38:20.300 --> 00:38:22.060
you all are familiar with the Glances,


00:38:22.060 --> 00:38:26.940
but the UI that it creates is fantastic.


00:38:26.940 --> 00:38:30.820
So you just type Glances and you get this sort of progress bars


00:38:30.820 --> 00:38:33.700
that show you the CPU, the memory, all the processes.


00:38:33.700 --> 00:38:37.460
It has like hotkeys you can sort by CPU or memory,


00:38:37.460 --> 00:38:41.500
filter by process name or ID, all kinds of stuff going on here.


00:38:41.500 --> 00:38:43.940
And this is what I use now.


00:38:43.940 --> 00:38:48.380
But Zach Viller sent in TipTop as a competing thing.


00:38:48.380 --> 00:38:51.700
And by the way, Glances is Python and Tiptop is Python.


00:38:51.700 --> 00:38:54.220
So very good candidates for pipx


00:38:54.220 --> 00:38:55.620
because no project needs them.


00:38:55.620 --> 00:38:57.020
You just wanna run them as commands,


00:38:57.020 --> 00:38:58.820
but they're Python, right?


00:38:58.820 --> 00:39:02.860
So if you look at the same picture over on the Tiptop page,


00:39:02.860 --> 00:39:05.620
you can see that you get similar information,


00:39:05.620 --> 00:39:09.540
but you get a little bit better historical understanding


00:39:09.540 --> 00:39:14.020
of how your CPU is doing, how your memory is doing.


00:39:14.020 --> 00:39:17.940
It even breaks it down per thread or per core.


00:39:17.940 --> 00:39:22.380
It shows you your memory broken down by what's being used,


00:39:22.380 --> 00:39:23.900
what's being cached, what's free.


00:39:23.900 --> 00:39:25.580
There's a graph of that over time.


00:39:25.580 --> 00:39:29.000
Something that made me sad is it shows the network


00:39:29.000 --> 00:39:32.240
over time as well, the in and out flow.


00:39:32.240 --> 00:39:34.940
But what happened to me is one of my servers,


00:39:34.940 --> 00:39:38.000
I ran this and it only would show the output


00:39:38.000 --> 00:39:39.840
from like some kind of,


00:39:39.840 --> 00:39:43.220
there were multiple network adapters


00:39:43.220 --> 00:39:44.920
and would only show the one that's not being used,


00:39:44.920 --> 00:39:45.940
not the one that's being used.


00:39:45.940 --> 00:39:49.020
So I'm like, well, that part is useless, unfortunately here.


00:39:49.020 --> 00:39:52.540
And there's just all the programs like the CPU usage,


00:39:52.540 --> 00:39:54.660
the user it's running as,


00:39:54.660 --> 00:39:55.960
the arguments that were passed to it,


00:39:55.960 --> 00:39:57.940
how much memory it has and stuff.


00:39:57.940 --> 00:40:00.940
So I don't think I'm gonna give up using Glances


00:40:00.940 --> 00:40:01.860
'cause I really love that,


00:40:01.860 --> 00:40:03.780
but this feels like another tool


00:40:03.780 --> 00:40:06.500
to get a view of that sort into it.


00:40:06.500 --> 00:40:08.300
What do y'all think?


00:40:08.300 --> 00:40:11.620
- I like the visual design on the face of it.


00:40:11.620 --> 00:40:14.060
Especially comparing it to the Glances screenshot


00:40:14.060 --> 00:40:17.220
that you showed, it feels like it might,


00:40:17.220 --> 00:40:19.140
it's a little prettier and it might,


00:40:19.140 --> 00:40:22.140
to me at least, it looks a little bit less like dense


00:40:22.140 --> 00:40:24.420
and maybe a little bit easier to sort of like,


00:40:24.420 --> 00:40:26.000
maybe it's just the bounding boxes,


00:40:26.000 --> 00:40:28.580
but I also feel like it's the way the screen is laid out,


00:40:28.580 --> 00:40:32.340
a way to visually, an easier way to visually


00:40:32.340 --> 00:40:34.460
parse the information that's presenting.


00:40:34.460 --> 00:40:38.220
That's always something I look for in any tool that I use.


00:40:38.220 --> 00:40:39.180
- Absolutely.


00:40:39.180 --> 00:40:40.000
Brian?


00:40:40.980 --> 00:40:44.160
Why do you need to, I don't use anything like this.


00:40:44.160 --> 00:40:45.420
(laughing)


00:40:45.420 --> 00:40:48.980
- All right, so for example, if you log in to,


00:40:48.980 --> 00:40:51.860
let's say you logged into a web server


00:40:51.860 --> 00:40:53.660
that was running a search job,


00:40:53.660 --> 00:40:56.560
and it said, you're running a little bit low on memory


00:40:56.560 --> 00:40:59.340
as a, over the last few minutes,


00:40:59.340 --> 00:41:02.800
and you've got five different web apps


00:41:02.800 --> 00:41:04.860
set up running their web processes


00:41:04.860 --> 00:41:07.180
with like a bunch of their sub-processes running,


00:41:07.180 --> 00:41:09.140
and you wanted to answer the question,


00:41:09.140 --> 00:41:10.460
okay, which one is it?


00:41:10.460 --> 00:41:12.380
Which one do I have to restart?


00:41:12.380 --> 00:41:13.220
- Okay.


00:41:13.220 --> 00:41:15.180
- Things like that.


00:41:15.180 --> 00:41:18.020
- It's easy to see where you might not encounter this


00:41:18.020 --> 00:41:20.540
or have a need for this when you're working


00:41:20.540 --> 00:41:22.940
in the world of things, right?


00:41:22.940 --> 00:41:27.040
Like the world of not servers, but embedded devices


00:41:27.040 --> 00:41:29.260
that might run Python or C or whatever.


00:41:29.260 --> 00:41:33.780
And you know, this is like managing infrastructure.


00:41:33.780 --> 00:41:35.600
- So you don't use this on your desktop?


00:41:35.600 --> 00:41:36.820
- No, I don't use this on my Mac,


00:41:36.820 --> 00:41:39.540
but I use this on all of my, not necessarily tip top,


00:41:39.540 --> 00:41:42.460
but glances on all of my Linux servers,


00:41:42.460 --> 00:41:44.500
including the Python Bytes one.


00:41:44.500 --> 00:41:46.860
So it's nice to go in there and see what's going on


00:41:46.860 --> 00:41:49.620
in the servers with all I have is SSH.


00:41:49.620 --> 00:41:50.900
- I'm more of a high level person.


00:41:50.900 --> 00:41:52.860
I'd rather pay somebody else to do this for me.


00:41:52.860 --> 00:41:55.580
(laughing)


00:41:55.580 --> 00:41:56.940
- Well, let's like...


00:41:56.940 --> 00:41:59.600
- But it looks pretty.


00:41:59.600 --> 00:42:04.260
- Let's see if I can pull up a picture of top.


00:42:04.260 --> 00:42:07.500
- On behalf of my employer, Brian, thank you.


00:42:07.500 --> 00:42:08.320
Thank you.


00:42:08.320 --> 00:42:10.400
to take to do that for you, no problem.


00:42:10.400 --> 00:42:15.920
Like this, this is the thing it's replacing by the way, is it's just a list of processes


00:42:15.920 --> 00:42:20.880
and it moves around all the time and the stuff shoots off the screen.


00:42:20.880 --> 00:42:22.160
It's like, why is it doing this?


00:42:22.160 --> 00:42:28.000
You know, it's, I mean, to be fair, it was also written probably in like 1968 or something.


00:42:28.000 --> 00:42:32.160
I'm not knocking on it.


00:42:32.160 --> 00:42:35.440
I'm just saying, I would rather use, you know, something like this,


00:42:35.440 --> 00:42:39.400
that gives me way more real-time graphs,


00:42:39.400 --> 00:42:40.700
not just snapshot.


00:42:40.700 --> 00:42:42.800
Now it is, now it is, now it is.


00:42:42.800 --> 00:42:45.480
But here's what's happening


00:42:45.480 --> 00:42:47.720
as the things are running and doing their work.


00:42:47.720 --> 00:42:49.640
So that's super helpful to me to see.


00:42:49.640 --> 00:42:53.880
- To be fair, I also just installed TipTop


00:42:53.880 --> 00:42:55.360
just for the heck of it on my Mac,


00:42:55.360 --> 00:42:57.320
and a really quick install.


00:42:57.320 --> 00:42:58.800
And it does look pretty.


00:42:58.800 --> 00:43:00.160
I just don't know what to do with it.


00:43:00.160 --> 00:43:01.000
- Yeah.


00:43:01.000 --> 00:43:03.200
And by the way, let's just tie it back to the audience again.


00:43:03.200 --> 00:43:06.380
So Tip Top uses textual for layout,


00:43:06.380 --> 00:43:09.840
which is based on, which is Will McGugan's thing,


00:43:09.840 --> 00:43:10.940
also based on Rich.


00:43:10.940 --> 00:43:13.020
So it's quite modern.


00:43:13.020 --> 00:43:16.140
- I think if we had Ned and Will in the audience,


00:43:16.140 --> 00:43:17.820
we would always touch on something


00:43:17.820 --> 00:43:19.220
they were doing every year.


00:43:19.220 --> 00:43:21.220
- I'll tell you what, Brian,


00:43:21.220 --> 00:43:22.140
here's a way you could use this


00:43:22.140 --> 00:43:23.640
totally in your day-to-day life.


00:43:23.640 --> 00:43:26.260
Your Mac is running slow, right?


00:43:26.260 --> 00:43:28.860
And you say, why is my Mac running slow?


00:43:28.860 --> 00:43:31.420
You could totally use this and at a glance say,


00:43:31.420 --> 00:43:35.120
what's hoovering all my RAM, what is throttling my disk,


00:43:35.120 --> 00:43:39.140
what is using up all my CPU, et cetera, et cetera.


00:43:39.140 --> 00:43:39.980
- Okay. - Yeah.


00:43:39.980 --> 00:43:43.080
Like for example, you can run activity monitor,


00:43:43.080 --> 00:43:45.700
which will show you the process thing.


00:43:45.700 --> 00:43:46.660
And you go to the memory thing,


00:43:46.660 --> 00:43:48.300
which will show you just a single graph,


00:43:48.300 --> 00:43:49.820
but like, why is it using all that memory?


00:43:49.820 --> 00:43:52.100
Is that actually being used or is that cache?


00:43:52.100 --> 00:43:53.420
Because you loaded a bunch of files


00:43:53.420 --> 00:43:55.740
and now it's kind of, could be free, but it's not.


00:43:55.740 --> 00:43:56.800
What's happening on the network,


00:43:56.800 --> 00:43:58.860
you can't see very well on macOS.


00:43:58.860 --> 00:44:01.860
I don't know why activity monitors are adverse


00:44:01.860 --> 00:44:03.560
to showing you network traffic,


00:44:03.560 --> 00:44:04.560
but you could see like,


00:44:04.560 --> 00:44:06.920
am I downloading something or not right now?


00:44:06.920 --> 00:44:08.360
- I can be taught new things.


00:44:08.360 --> 00:44:09.400
Okay, thanks.


00:44:09.400 --> 00:44:11.160
(laughing)


00:44:11.160 --> 00:44:13.360
- Anyway, I'm not excited for that use case.


00:44:13.360 --> 00:44:14.840
I'm excited for using it on the servers


00:44:14.840 --> 00:44:16.200
to understand them better.


00:44:16.200 --> 00:44:17.040
- Yeah.


00:44:17.040 --> 00:44:18.440
- Yeah.


00:44:18.440 --> 00:44:19.560
All right.


00:44:19.560 --> 00:44:23.360
Let's bring it home with some more retro, Chris.


00:44:23.360 --> 00:44:24.480
(laughing)


00:44:24.480 --> 00:44:26.200
- Back in the world of whimsy.


00:44:27.760 --> 00:44:31.880
I've always been into, well, you know, always,


00:44:31.880 --> 00:44:33.360
ever since they weren't retro


00:44:33.360 --> 00:44:35.620
and they were just eight bit machines,


00:44:35.620 --> 00:44:39.160
I grew up, started with eight bit computing.


00:44:39.160 --> 00:44:40.960
I was an Atari kid.


00:44:40.960 --> 00:44:42.600
I never owned a C64,


00:44:42.600 --> 00:44:47.360
but someone has actually written a Commodore 64 emulator


00:44:47.360 --> 00:44:50.840
called PyC64 in pure Python.


00:44:50.840 --> 00:44:54.320
And the reason that I picked this is,


00:44:54.320 --> 00:44:55.520
it really is, isn't it?


00:44:55.520 --> 00:45:02.600
I think it is so cool because not only do you get this Commodore 64 emulator, it's not


00:45:02.600 --> 00:45:05.760
100% coverage.


00:45:05.760 --> 00:45:12.600
He has only emulated the display to the point where you can display PETSCII characters.


00:45:12.600 --> 00:45:16.680
But the bottom line is, it is other than that a largely full machine emulator.


00:45:16.680 --> 00:45:25.680
It runs on the Pi 65 library, which is a 6502 CPU chip emulator, also written in pure Python.


00:45:25.680 --> 00:45:28.460
It really is.


00:45:28.460 --> 00:45:29.460
And it's so neat.


00:45:29.460 --> 00:45:32.000
I was able to pull this thing down and run it.


00:45:32.000 --> 00:45:37.860
And I was actually writing like Commodore 64 basic that poked bits into screen memory


00:45:37.860 --> 00:45:41.660
and drew pictures on the screen.


00:45:41.660 --> 00:45:45.940
One of the really cool things is this thing even includes,


00:45:45.940 --> 00:45:49.580
you can pop out of your emulated Commodore 64 with


00:45:49.580 --> 00:45:53.180
the gopy command to get a Python REPL.


00:45:53.180 --> 00:45:55.440
I was actually doing that,


00:45:55.440 --> 00:45:59.740
modifying the emulated Commodore 64's memory by


00:45:59.740 --> 00:46:03.520
tweaking the Python data structures inside the REPL.


00:46:03.520 --> 00:46:04.780
It is just-


00:46:04.780 --> 00:46:07.140
>> That's pretty neat.


00:46:07.140 --> 00:46:09.340
>> Thank you. It is really cool,


00:46:09.340 --> 00:46:13.100
And it is also, from my perspective,


00:46:13.100 --> 00:46:14.360
one of the reasons I picked it,


00:46:14.360 --> 00:46:17.420
it's a testament to this programming language


00:46:17.420 --> 00:46:19.460
that we all use and love for our work.


00:46:19.460 --> 00:46:22.520
And whether it's Webby stuff or testing devices,


00:46:22.520 --> 00:46:25.580
or in my case, automating network infrastructure,


00:46:25.580 --> 00:46:27.220
it can do so much.


00:46:27.220 --> 00:46:29.300
You can reach out into all of these other


00:46:29.300 --> 00:46:32.700
really kind of cool niche areas,


00:46:32.700 --> 00:46:34.700
whatever you're interested in,


00:46:34.700 --> 00:46:39.140
and do neat things with Python on your computer.


00:46:39.140 --> 00:46:41.800
So I just thought this was incredibly cool.


00:46:41.800 --> 00:46:43.160
I had enjoyed playing with it


00:46:43.160 --> 00:46:46.820
and I definitely intend to enjoy playing with it some more.


00:46:46.820 --> 00:46:49.800
- Might be some interesting ways to go back


00:46:49.800 --> 00:46:52.800
and study operating systems back when they were simple,


00:46:52.800 --> 00:46:55.440
if you were like a computer science student as well.


00:46:55.440 --> 00:46:57.880
- Yeah, for sure.


00:46:57.880 --> 00:47:00.200
I think there's a lot to learn there.


00:47:00.200 --> 00:47:03.240
You know, even if you're not necessarily someone


00:47:03.240 --> 00:47:05.440
who is keenly interested


00:47:05.440 --> 00:47:07.040
in writing your own operating system,


00:47:07.040 --> 00:47:12.040
I think there's a lot to learn just in terms of the programming paradigm, right?


00:47:12.040 --> 00:47:17.480
Like when you wanted to solve a problem and you wanted to display something on the screen


00:47:17.480 --> 00:47:24.800
and a perfectly reasonable answer was, "I'm going to poke the right bits into screen memory


00:47:24.800 --> 00:47:29.980
because that's a more efficient way to display this thing as opposed to using whatever my


00:47:29.980 --> 00:47:35.640
high-level language provides," it's such a different way of thinking from the reality


00:47:35.640 --> 00:47:41.000
that most of us inhabit day to day. It's just a fun, refreshing place to visit, at least


00:47:41.000 --> 00:47:42.000
from my perspective.


00:47:42.000 --> 00:47:44.640
Yeah. Very cool. It's a good one.


00:47:44.640 --> 00:47:46.640
Thank you.


00:47:46.640 --> 00:47:51.120
Brian, it's time for extra, extra, extra. I hear all about it. How many extras do you


00:47:51.120 --> 00:47:52.120
have?


00:47:52.120 --> 00:47:54.680
I have zero today.


00:47:54.680 --> 00:47:58.120
You have no extras. You're not adding to the number of extras. Chris, anything else you


00:47:58.120 --> 00:48:00.120
want to throw out there, let people know about?


00:48:00.120 --> 00:48:05.880
Sure, absolutely. My team at Amazon is hiring. Hopefully we can put a link in the show notes.


00:48:05.880 --> 00:48:14.520
I work for OpsTech IT. We work with the fulfillment centers. And I cannot say enough how much I love


00:48:14.520 --> 00:48:20.600
working with this team. The people are incredible. And they're sort of like, at least the folks I'm


00:48:20.600 --> 00:48:26.520
working directly with are people who started out in the fulfillment centers and were interested


00:48:26.520 --> 00:48:32.440
in technology were bright and they were able to prove that they could actually walk the walk and


00:48:32.440 --> 00:48:38.600
now they're being promoted into full-on engineering positions and I just find that so incredibly


00:48:38.600 --> 00:48:43.640
refreshing. Yeah, that's fantastic. Yeah, these people just have a very different perspective.


00:48:43.640 --> 00:48:47.640
You know, they're not the jaded like I've been in the tech industry for 20 years types like me.


00:48:47.640 --> 00:48:52.680
It's really inspiring to work with them. Yeah, not too many debates of like, why don't we just


00:48:52.680 --> 00:48:54.760
- You just switched to a functional language, come on.


00:48:54.760 --> 00:48:56.880
(laughing)


00:48:56.880 --> 00:48:58.760
- So practical, we'll just get stuff done.


00:48:58.760 --> 00:48:59.840
I love it.


00:48:59.840 --> 00:49:00.680
- Exactly, thank you.


00:49:00.680 --> 00:49:02.240
- Before we move, yeah.


00:49:02.240 --> 00:49:03.520
Yeah, so we'll put that link in the show notes.


00:49:03.520 --> 00:49:07.280
Before we move on to my extras, which are not many,


00:49:07.280 --> 00:49:09.240
Sam says, "It's so helpful to understand


00:49:09.240 --> 00:49:10.680
"how a computer works when you're writing code.


00:49:10.680 --> 00:49:13.760
"These kinds of things are a good way to learn that."


00:49:13.760 --> 00:49:16.360
Talking about the Commvaar64 emulator.


00:49:16.360 --> 00:49:17.480
Awesome, all right.


00:49:17.480 --> 00:49:20.080
So I just have one, and that's,


00:49:20.080 --> 00:49:24.760
I'm going to be speaking at FlaskCon 2021.


00:49:24.760 --> 00:49:28.000
And so FlaskCon is the first week of December,


00:49:28.000 --> 00:49:30.280
which has remote attendance.


00:49:30.280 --> 00:49:33.560
I'm gonna be talking about HTMX and Flask once again,


00:49:33.560 --> 00:49:35.880
because I'm super psyched about all that stuff.


00:49:35.880 --> 00:49:39.440
And so if you wanna see some really cool apps get built


00:49:39.440 --> 00:49:41.560
using HTMX and Flask, drop in over there.


00:49:41.560 --> 00:49:43.720
There's a whole bunch of other talks going on as well.


00:49:43.720 --> 00:49:46.080
So I'll put the link to that in the show notes.


00:49:48.120 --> 00:49:51.120
- All right, shall we finish off with a joke?


00:49:51.120 --> 00:49:51.960
- Yeah.


00:49:51.960 --> 00:49:54.040
- Leaveny is the soul of wit, absolutely.


00:49:54.040 --> 00:49:54.880
- It is.


00:49:54.880 --> 00:49:59.100
So we just recently went through


00:49:59.100 --> 00:50:01.380
the whole daylight savings unraveling


00:50:01.380 --> 00:50:03.160
and went back to normal time.


00:50:03.160 --> 00:50:06.120
And I don't know what it's like for you all,


00:50:06.120 --> 00:50:09.880
but when I look at the weather and stuff here,


00:50:09.880 --> 00:50:12.400
I suspect Chris, it's similar in Boston.


00:50:12.400 --> 00:50:14.880
I mean, I know it's similar for you, Brian.


00:50:14.880 --> 00:50:15.720
- Yes.


00:50:15.720 --> 00:50:18.000
- It's like sunset is that 4.38 PM


00:50:18.000 --> 00:50:19.760
and we're headed towards the winter solstice


00:50:19.760 --> 00:50:21.800
so it's only getting earlier in the day.


00:50:21.800 --> 00:50:25.360
It's like, ah, that doesn't make me,


00:50:25.360 --> 00:50:27.800
it doesn't spark joy in my heart


00:50:27.800 --> 00:50:29.560
that it's already dark at 4.30.


00:50:29.560 --> 00:50:32.840
- I like it.


00:50:32.840 --> 00:50:33.680
- Yeah.


00:50:33.680 --> 00:50:35.160
(laughing)


00:50:35.160 --> 00:50:36.680
I don't mind that it gets dark.


00:50:36.680 --> 00:50:39.000
I just wish it wouldn't, I wish we could just move it


00:50:39.000 --> 00:50:40.560
so there's a little time at the end of the day


00:50:40.560 --> 00:50:41.880
where there's still sun, I remember.


00:50:41.880 --> 00:50:43.880
- I'm with you, Michael, I'm solo powered.


00:50:43.880 --> 00:50:45.520
So I enjoy the sunlight


00:50:45.520 --> 00:50:48.320
I don't like it getting darker earlier either.


00:50:48.320 --> 00:50:49.320
- Yeah, absolutely.


00:50:49.320 --> 00:50:50.680
I don't hate the winter.


00:50:50.680 --> 00:50:53.200
I just don't wish it shifted around a little bit.


00:50:53.200 --> 00:50:57.680
So this is a technical take on that, our joke.


00:50:57.680 --> 00:50:58.840
This comes from the New Yorker.


00:50:58.840 --> 00:51:00.120
I mean, we're pretty highfalutin, right?


00:51:00.120 --> 00:51:02.960
We're not doing like devjokes.io or whatever.


00:51:02.960 --> 00:51:05.600
(laughing)


00:51:05.600 --> 00:51:07.120
So this is by Matt Reuter.


00:51:07.120 --> 00:51:11.200
And it's a little cartoon of two people,


00:51:11.200 --> 00:51:13.520
clearly kind of a darker space.


00:51:13.520 --> 00:51:15.880
a woman sit in her chair with a laptop


00:51:15.880 --> 00:51:18.120
and you could just like the beaming laptop screen


00:51:18.120 --> 00:51:19.640
is like lighting her up, right?


00:51:19.640 --> 00:51:22.520
And the guy here on his tablet, same thing,


00:51:22.520 --> 00:51:23.360
glowing in his face.


00:51:23.360 --> 00:51:24.400
And underneath it, it says,


00:51:24.400 --> 00:51:27.680
I hate how the screens get bright so early this time of year.


00:51:27.680 --> 00:51:31.480
- Nice.


00:51:31.480 --> 00:51:33.520
- That says so much about our modern world.


00:51:33.520 --> 00:51:37.540
It's both hilarious and kind of sad, all in one go.


00:51:37.540 --> 00:51:39.320
- Absolutely.


00:51:40.880 --> 00:51:43.200
- Yeah, so welcome to Daylight Savings,


00:51:43.200 --> 00:51:46.740
or Standard Time, I guess, everyone.


00:51:46.740 --> 00:51:48.940
The screens do get bright this time of year.


00:51:48.940 --> 00:51:52.120
- That's funny, nice.


00:51:52.120 --> 00:51:54.780
- And Chris, thanks for being on the show.


00:51:54.780 --> 00:51:56.080
Brian, thanks as always.


00:51:56.080 --> 00:51:57.480
- Yeah, thanks a lot.


00:51:57.480 --> 00:51:58.320
- Thank you so much, you know,


00:51:58.320 --> 00:52:00.640
I really appreciate everything that you guys do


00:52:00.640 --> 00:52:01.680
for the community.


00:52:01.680 --> 00:52:04.280
It's really, you guys are great examples


00:52:04.280 --> 00:52:07.440
of why Python is such an amazing place to live.


00:52:07.440 --> 00:52:08.880
Thank you.


00:52:08.880 --> 00:52:09.720
- Oh, thanks, Chris.


00:52:09.720 --> 00:52:12.120
appreciate it.

