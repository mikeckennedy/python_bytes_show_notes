WEBVTT

00:00:00.000 --> 00:00:03.500
Now we're live. Hey, everybody on the live stream.


00:00:03.500 --> 00:00:05.500
Welcome to Python Bytes.


00:00:05.500 --> 00:00:08.500
So, let's just jump in.


00:00:08.500 --> 00:00:10.500
Hello and welcome to Python Bytes.


00:00:10.500 --> 00:00:12.500
[laughter]


00:00:12.500 --> 00:00:14.500
- Brian, did that turn you off there?


00:00:14.500 --> 00:00:16.500
- Yeah, it did.


00:00:16.500 --> 00:00:18.500
So, I guess we're just like waiting for people to show up.


00:00:18.500 --> 00:00:20.500
So, let's wait.


00:00:20.500 --> 00:00:22.500
Okay. Now we're good.


00:00:22.500 --> 00:00:24.500
Hello and welcome to Python Bytes


00:00:24.500 --> 00:00:26.500
where we deliver Python news and headlines


00:00:26.500 --> 00:00:28.500
directly to your earbuds.


00:00:28.500 --> 00:00:33.500
This is episode 289 recorded June 21st, 2021, 2022.


00:00:33.500 --> 00:00:37.200
I messed up the year.


00:00:37.200 --> 00:00:38.040
Bummer.


00:00:38.040 --> 00:00:38.860
I'm Brian Okken.


00:00:38.860 --> 00:00:41.840
- Hey, I'm Michael Kennedy.


00:00:41.840 --> 00:00:42.940
- And I'm Gina HÃ¤uske.


00:00:42.940 --> 00:00:45.480
- I had one job.


00:00:45.480 --> 00:00:47.760
Welcome Gina.


00:00:47.760 --> 00:00:51.840
I'm so glad that you could join us for the show.


00:00:51.840 --> 00:00:53.560
- Well, I'm still very, very honored


00:00:53.560 --> 00:00:55.280
that I'm allowed to be on here


00:00:55.280 --> 00:00:57.560
because I've been a long, long time listener.


00:00:57.560 --> 00:01:01.880
And yeah, so being on here is absolutely amazing for me.


00:01:01.880 --> 00:01:02.960
- That's very cool.


00:01:02.960 --> 00:01:07.440
So tell us a little bit about yourself before we jump in.


00:01:07.440 --> 00:01:10.920
- Yeah, well, so I think my claim to fame most likely


00:01:10.920 --> 00:01:13.400
is that I'm the creator and maintainer of OctoPrint,


00:01:13.400 --> 00:01:18.000
which is basically a web front end slash print server


00:01:18.000 --> 00:01:20.660
for 3D printers that I've been now maintaining


00:01:20.660 --> 00:01:22.880
for almost a decade actually.


00:01:22.880 --> 00:01:25.000
So this December, it will be a decade.


00:01:25.000 --> 00:01:26.320
And it's written in Python,


00:01:26.320 --> 00:01:30.600
which is why I have gotten more and more interested


00:01:30.600 --> 00:01:33.280
into the language over the course of the past decade.


00:01:33.280 --> 00:01:37.660
And also now hang out on conferences when I get the chance


00:01:37.660 --> 00:01:39.780
and there is no pandemic going on right now.


00:01:39.780 --> 00:01:43.000
And in general, just kind of fell in love


00:01:43.000 --> 00:01:44.820
with the language I got to admit.


00:01:44.820 --> 00:01:46.880
I used to be a Java developer.


00:01:46.880 --> 00:01:50.580
I'm very glad that I no longer am.


00:01:50.580 --> 00:01:54.580
And now I'm a full-time open source maintainer actually,


00:01:54.580 --> 00:01:56.340
because I'm in the very lucky position


00:01:56.340 --> 00:01:59.180
that people apparently love OctoPrint enough


00:01:59.180 --> 00:02:03.260
that donations and such and sponsorships and such


00:02:03.260 --> 00:02:06.360
generate enough revenue that it can work for me.


00:02:06.360 --> 00:02:07.740
- Oh, that's awesome.


00:02:07.740 --> 00:02:08.580
Very cool. - Pretty awesome.


00:02:08.580 --> 00:02:09.780
- That is so fantastic.


00:02:09.780 --> 00:02:11.340
Yeah, congratulations.


00:02:11.340 --> 00:02:13.460
- I still don't know why it works,


00:02:13.460 --> 00:02:15.080
but hey, I'm taking it.


00:02:15.080 --> 00:02:16.900
- Yeah.


00:02:16.900 --> 00:02:20.640
Well, Michael, you got our first topic today.


00:02:20.640 --> 00:02:23.100
- I do.


00:02:23.100 --> 00:02:26.260
I wanna combine some things that we've covered before


00:02:26.260 --> 00:02:30.420
as a way to introduce something new.


00:02:30.420 --> 00:02:35.420
So way back when we talked about something called Manguita.


00:02:35.420 --> 00:02:37.980
If I mentioned that I like MongoDB,


00:02:37.980 --> 00:02:40.500
I think this might be something I've been talking about.


00:02:40.500 --> 00:02:42.640
I love MongoDB, I think it's great.


00:02:42.640 --> 00:02:43.860
Love working with it from Python,


00:02:43.860 --> 00:02:45.740
it works super duper well for me.


00:02:45.740 --> 00:02:48.900
Now, one of the things I'm envious of


00:02:48.900 --> 00:02:50.660
on the relational side is SQLite,


00:02:50.660 --> 00:02:52.620
which ships with Python,


00:02:52.620 --> 00:02:55.940
and you don't have to start up a server or anything.


00:02:55.940 --> 00:02:58.240
Just say, here's a file, that's my database.


00:02:58.240 --> 00:03:01.820
Let me point database tools like SQLAlchemy and stuff at it.


00:03:01.820 --> 00:03:05.220
With MongoDB, we haven't really had anything like that.


00:03:05.220 --> 00:03:07.740
But then we did talk about this thing called Mongita,


00:03:07.740 --> 00:03:12.740
which is Mongita is to MongoDB as SQLite is to SQL.


00:03:12.740 --> 00:03:14.080
So that's pretty awesome.


00:03:14.080 --> 00:03:15.340
You pip install Mongita,


00:03:15.340 --> 00:03:20.340
which is a beautiful little character for its icon.


00:03:20.340 --> 00:03:22.260
and you pip and saw this thing,


00:03:22.260 --> 00:03:26.660
and then you can just create a disk connection


00:03:26.660 --> 00:03:28.900
or a memory connection or stuff like that.


00:03:28.900 --> 00:03:31.840
It's not incredibly fast, but you know what?


00:03:31.840 --> 00:03:34.140
Fast enough, right?


00:03:34.140 --> 00:03:36.060
Fast enough for simple apps, for demo apps,


00:03:36.060 --> 00:03:37.860
or if you're teaching a class or something like that,


00:03:37.860 --> 00:03:41.020
sort of my primary, basically, demos,


00:03:41.020 --> 00:03:44.720
YouTube video demos and class examples and stuff.


00:03:44.720 --> 00:03:45.900
I don't want to have to have people set up


00:03:45.900 --> 00:03:48.360
a whole database server they maybe have never set up


00:03:48.360 --> 00:03:49.860
just to play with an example, right?


00:03:49.860 --> 00:03:52.260
So here's a cool way, except for it only does


00:03:52.260 --> 00:03:54.380
like the low level MongoDB API.


00:03:54.380 --> 00:03:57.820
So I'm a big fan of Beanie.


00:03:57.820 --> 00:04:00.020
I reached out to Roman Wright and said,


00:04:00.020 --> 00:04:03.760
hey, do you know of anything that will allow Beanie


00:04:03.760 --> 00:04:06.060
to work with something like Monguita?


00:04:06.060 --> 00:04:08.860
And he said, not really.


00:04:08.860 --> 00:04:09.760
So I'll make one.


00:04:09.760 --> 00:04:11.660
Where did I put it?


00:04:11.660 --> 00:04:12.620
Oh no, have I copied?


00:04:12.620 --> 00:04:13.460
No, I, yeah.


00:04:13.460 --> 00:04:15.460
So had the wrong one selected.


00:04:15.460 --> 00:04:16.900
He did Beanie the ORM.


00:04:16.900 --> 00:04:21.060
I said, I wanna use this ORM against the disk database,


00:04:21.060 --> 00:04:23.460
much like you would SQLAlchemy against SQLite.


00:04:23.460 --> 00:04:24.720
Said, no, I don't know one of those,


00:04:24.720 --> 00:04:28.420
but what if I made Binita for Mongita?


00:04:28.420 --> 00:04:29.540
(laughing)


00:04:29.540 --> 00:04:31.820
And so I love the naming here.


00:04:31.820 --> 00:04:34.060
That's why I wanted to put them all together.


00:04:34.060 --> 00:04:39.060
So Binita is a local DB-like database


00:04:39.060 --> 00:04:42.660
ready to work with Beanie, right?


00:04:42.660 --> 00:04:45.960
So basically all you have to do to work with this


00:04:45.960 --> 00:04:50.280
is import client from there, create a client,


00:04:50.280 --> 00:04:51.800
paste that, give it a directory,


00:04:51.800 --> 00:04:55.060
just like you would SQLite, pull a database off of it,


00:04:55.060 --> 00:04:58.320
and then just call initialize Beanie like you normally would


00:04:58.320 --> 00:05:02.700
but pass it this Beanieta database.


00:05:02.700 --> 00:05:04.040
So it just works off the file system.


00:05:04.040 --> 00:05:08.720
So now you've got a local, mostly compatible MongoDB


00:05:08.720 --> 00:05:12.540
disk-based in-process thing that you can use


00:05:12.540 --> 00:05:15.120
for simple MongoDB examples.


00:05:15.120 --> 00:05:17.120
It has some things it doesn't support.


00:05:17.120 --> 00:05:21.120
Links, which are like following references across documents.


00:05:21.120 --> 00:05:26.120
Aggregations, which is a whole crazy data analytics aspect of MongoDB.


00:05:26.120 --> 00:05:30.120
And unions and other things that Monquita doesn't support.


00:05:30.120 --> 00:05:33.120
So I'm pretty sure, let's just double check here.


00:05:33.120 --> 00:05:39.120
Yeah, so it basically just builds that wrapper on top of Monquita.


00:05:39.120 --> 00:05:41.120
And the real challenge that was tricky here was


00:05:41.120 --> 00:05:45.920
was Beanie is only async and Monketa is only sync.


00:05:45.920 --> 00:05:48.320
So you've got to somehow put those together.


00:05:48.320 --> 00:05:50.240
Anyway, thank you, Roman Wright, for doing this.


00:05:50.240 --> 00:05:50.880
It looks really cool.


00:05:50.880 --> 00:05:56.240
And we could come up with a joke for this,


00:05:56.240 --> 00:05:58.080
but I think that's Benitas.


00:05:58.080 --> 00:06:02.240
Oh, Brian, that was solid.


00:06:02.240 --> 00:06:05.600
That's hot.


00:06:05.600 --> 00:06:07.620
Yeah.


00:06:07.620 --> 00:06:09.380
Sorry.


00:06:09.380 --> 00:06:10.480
Not sorry.


00:06:10.480 --> 00:06:12.120
- Great. Okay.


00:06:12.120 --> 00:06:15.440
So I think that I'd like to talk to people


00:06:15.440 --> 00:06:18.120
about using good coding practices,


00:06:18.120 --> 00:06:20.680
especially in research and science.


00:06:20.680 --> 00:06:24.720
So ran across Patrick Minolt.


00:06:24.720 --> 00:06:28.520
It's an online book, really.


00:06:28.520 --> 00:06:31.880
It's called the "Good Research Code Handbook."


00:06:31.880 --> 00:06:35.360
And he says it's for grad students, postdocs, and PIs,


00:06:35.360 --> 00:06:39.000
which I had to look up was principal investigator,


00:06:39.000 --> 00:06:41.520
who didn't do a lot of programming as part of their research.


00:06:41.520 --> 00:06:43.440
And I think it's also just kind of a good thing


00:06:43.440 --> 00:06:47.020
for really anybody that's coming into coding


00:06:47.020 --> 00:06:48.240
from a different field


00:06:48.240 --> 00:06:51.140
and wants to jumpstart some good practices.


00:06:51.140 --> 00:06:53.760
It's actually really kind of great.


00:06:53.760 --> 00:06:55.960
He's got a little roadmap, which is neat.


00:06:55.960 --> 00:06:58.440
I'll click on the roadmap, a little small here,


00:06:58.440 --> 00:07:00.640
but it goes through-


00:07:00.640 --> 00:07:02.960
- A journey mapped out there, I love it.


00:07:02.960 --> 00:07:04.480
- Yeah, it's nice.


00:07:04.480 --> 00:07:07.440
But kind of a visual of where you're gonna go with this,


00:07:07.440 --> 00:07:10.960
but he talks about setting yourself up for success


00:07:10.960 --> 00:07:14.580
using Git and virtual environments and projects


00:07:14.580 --> 00:07:18.040
and even packaging and cookie cutter, which is cool.


00:07:18.040 --> 00:07:22.000
Talks about style guides and keeping things clean


00:07:22.000 --> 00:07:24.480
and removing dead code.


00:07:24.480 --> 00:07:28.000
Some coding practices like separating concerns


00:07:28.000 --> 00:07:31.280
and separating your pure functions


00:07:31.280 --> 00:07:32.640
from side effect functions,


00:07:32.640 --> 00:07:35.680
which I thought that some people don't really touch on


00:07:35.680 --> 00:07:38.780
right off the bat, but it's a good practice.


00:07:38.780 --> 00:07:40.280
Even talks about testing,


00:07:40.280 --> 00:07:42.780
although the focus is really around unit testing


00:07:42.780 --> 00:07:45.680
and sort of some hand waves around indent testing,


00:07:45.680 --> 00:07:47.940
but still it's nice.


00:07:47.940 --> 00:07:52.760
And then even gets into documentation and social aspects


00:07:52.760 --> 00:07:54.640
like doing pairing and peer reviews


00:07:54.640 --> 00:07:59.200
and getting involved in open source and community.


00:07:59.200 --> 00:08:02.680
It's actually just really kind of a pretty solid book


00:08:02.680 --> 00:08:03.980
for people, so.


00:08:03.980 --> 00:08:07.340
- Sounds great. - Yeah, that's really great.


00:08:07.340 --> 00:08:09.420
I think it's, yeah, go ahead, Gina.


00:08:09.420 --> 00:08:12.860
- No, I just wanted to say it sounds great.


00:08:12.860 --> 00:08:16.180
Because I sometimes have people joining OctoPrint


00:08:16.180 --> 00:08:18.560
who are pretty much newcomers to the whole coding aspect,


00:08:18.560 --> 00:08:21.880
so, but are interested in writing a plugin


00:08:21.880 --> 00:08:22.720
or something like that,


00:08:22.720 --> 00:08:24.700
so that might be a good resource for them


00:08:24.700 --> 00:08:26.500
to just direct them to.


00:08:26.500 --> 00:08:32.860
- Yeah, I had, you know, I'm, go ahead, Brian.


00:08:32.860 --> 00:08:35.020
- I had somebody contacted me once and try to,


00:08:35.020 --> 00:08:36.900
I wish I knew about this before


00:08:36.900 --> 00:08:39.140
because somebody contacted me and said,


00:08:39.140 --> 00:08:40.900
"We don't really need coding training,


00:08:40.900 --> 00:08:45.260
but we kind of aren't used to working together well.


00:08:45.260 --> 00:08:46.860
We're all individual people


00:08:46.860 --> 00:08:48.260
and now we're working as a group


00:08:48.260 --> 00:08:50.300
and we don't know how to do that."


00:08:50.300 --> 00:08:51.660
And I don't know if that's here,


00:08:51.660 --> 00:08:54.860
but a lot of this around this is sort of good practices


00:08:54.860 --> 00:08:56.860
for working well with others.


00:08:56.860 --> 00:08:58.220
So it's nice.


00:08:58.220 --> 00:09:00.080
Michael?


00:09:00.080 --> 00:09:02.540
- Yeah, what I was gonna say is


00:09:02.540 --> 00:09:05.140
a lot of people, especially in this research field,


00:09:05.140 --> 00:09:07.980
learn to code in a JIT fashion,


00:09:07.980 --> 00:09:11.380
like just enough learning of coding,


00:09:11.380 --> 00:09:12.420
get the problem solved,


00:09:12.420 --> 00:09:15.500
and then they just, they have to keep moving on.


00:09:15.500 --> 00:09:18.180
And it's easy to find yourself


00:09:18.180 --> 00:09:20.220
just stumbling into wrong patterns of,


00:09:20.220 --> 00:09:22.820
well, everything's into one huge file,


00:09:22.820 --> 00:09:24.980
and it doesn't take like command line argument inputs,


00:09:24.980 --> 00:09:28.620
it just hard codes the values in, so you can't reuse it,


00:09:28.620 --> 00:09:30.520
it's not a module you can import,


00:09:30.520 --> 00:09:31.740
or a function you can call,


00:09:31.740 --> 00:09:32.800
and just sort of--


00:09:32.800 --> 00:09:34.920
- It does no error checking.


00:09:34.920 --> 00:09:36.680
- Yes, exactly, no testing.


00:09:36.680 --> 00:09:39.560
All of that kind of stuff would be really valuable


00:09:39.560 --> 00:09:41.080
for people who are coming from that angle.


00:09:41.080 --> 00:09:42.960
So definitely a good thing to check out.


00:09:42.960 --> 00:09:44.600
And I love it, goodresearch.dev.


00:09:44.600 --> 00:09:46.080
What a sweet domain name.


00:09:46.080 --> 00:09:48.720
- There's also one of the neat things


00:09:48.720 --> 00:09:52.360
about the writing style is he's talking about


00:09:52.360 --> 00:09:58.660
trying to just free yourself from time.


00:09:58.660 --> 00:10:00.800
So not free yourself from time,


00:10:00.800 --> 00:10:03.560
But as a researcher, you're in a hurry.


00:10:03.560 --> 00:10:05.080
There's a lot of stuff to do.


00:10:05.080 --> 00:10:08.640
And a lot of the stuff he's trying to get people to do


00:10:08.640 --> 00:10:11.320
is about offloading information


00:10:11.320 --> 00:10:13.000
so that you don't have to keep it in mind.


00:10:13.000 --> 00:10:15.560
So he talks about short-term memory and long-term memory


00:10:15.560 --> 00:10:20.560
and how, you know, like unit tests and inline code comments


00:10:20.560 --> 00:10:25.360
are good to, you know, short-term reminders in the moment.


00:10:25.360 --> 00:10:28.360
And then project documentation and test suites


00:10:28.360 --> 00:10:31.620
are about keeping that knowledge long-term.


00:10:31.620 --> 00:10:34.820
And that's kind of, I never really thought about that


00:10:34.820 --> 00:10:38.080
before of short-term versus long-term information,


00:10:38.080 --> 00:10:40.200
but it's kind of a neat angle as well.


00:10:40.200 --> 00:10:41.920
So anyway.


00:10:41.920 --> 00:10:43.180
- Yeah, that is clever.


00:10:43.180 --> 00:10:47.760
- So where are we at next?


00:10:47.760 --> 00:10:49.160
We have...


00:10:49.160 --> 00:10:51.360
- Yeah, something that I brought along.


00:10:51.360 --> 00:10:54.920
And given that I come from a 3D printing background now,


00:10:54.920 --> 00:10:56.960
I thought I would start with something


00:10:56.960 --> 00:10:59.240
that can be applied to 3D printing.


00:10:59.240 --> 00:11:01.580
And that is a Python library


00:11:01.580 --> 00:11:05.180
for building parametric 3D CAD models.


00:11:05.180 --> 00:11:08.400
It is based on, for those of you who have heard


00:11:08.400 --> 00:11:11.620
of the open source CAD solution called FreeCAD,


00:11:11.620 --> 00:11:16.020
it's based on the same CAD kernel,


00:11:16.020 --> 00:11:18.220
on the same modeling kernel,


00:11:18.220 --> 00:11:23.220
and allows you to programmatically design stuff.


00:11:23.220 --> 00:11:26.040
And that is pretty amazing if you want to do it parametric.


00:11:26.040 --> 00:11:28.600
So for example, imagine that you have some kind of case


00:11:28.600 --> 00:11:30.800
for an electronics project or something


00:11:30.800 --> 00:11:33.300
and you need screws from,


00:11:33.300 --> 00:11:37.080
screws, screw holes at certain distances,


00:11:37.080 --> 00:11:39.520
but maybe you want to be able to scale it up or down


00:11:39.520 --> 00:11:41.500
or whatnot or things like this.


00:11:41.500 --> 00:11:42.560
And for stuff like this,


00:11:42.560 --> 00:11:45.000
something like this is absolutely amazing.


00:11:45.000 --> 00:11:48.920
From the ground up, CatQuery is only a library,


00:11:48.920 --> 00:11:52.520
but it also comes with, as it says here,


00:11:52.520 --> 00:11:57.520
It also comes with a Qt based GUI called CQ editor,


00:11:57.520 --> 00:12:01.920
which I tried out and worked great.


00:12:01.920 --> 00:12:03.700
The only problem was it came with an older version


00:12:03.700 --> 00:12:06.280
of cat query that did not yet support some stuff


00:12:06.280 --> 00:12:07.800
that I wanted to play around with.


00:12:07.800 --> 00:12:10.900
So what I did instead was I tried the Jupyter extension


00:12:10.900 --> 00:12:14.480
and just threw that up on my NAS in a Docker container.


00:12:14.480 --> 00:12:16.280
And that works absolutely wonderfully.


00:12:16.280 --> 00:12:17.160
It gives you in the browser,


00:12:17.160 --> 00:12:19.180
it gives you a 3D model view of the stuff


00:12:19.180 --> 00:12:21.400
that you're currently modeling automatically refresh.


00:12:21.400 --> 00:12:23.120
whenever you change something.


00:12:23.120 --> 00:12:27.680
And the way things look is, this is the GUI, by the way,


00:12:27.680 --> 00:12:32.480
you simply create, you define a work plane,


00:12:32.480 --> 00:12:34.740
then you create a box on this, for example,


00:12:34.740 --> 00:12:40.640
then you say to the face, to the top face in Z direction,


00:12:40.640 --> 00:12:42.280
define that as a work plane,


00:12:42.280 --> 00:12:44.600
put a hole through that with a diameter.


00:12:44.600 --> 00:12:47.680
So the whole API is pretty intuitive as well,


00:12:47.680 --> 00:12:50.120
also well documented on here.


00:12:50.120 --> 00:12:53.200
And if you scroll a bit through the examples,


00:12:53.200 --> 00:12:56.440
you can see that there is way more possible


00:12:56.440 --> 00:12:59.720
than just planes with holes,


00:12:59.720 --> 00:13:04.060
but things like, where was it?


00:13:04.060 --> 00:13:05.400
Somewhere there was a...


00:13:05.400 --> 00:13:07.440
(mimics drum roll)


00:13:07.440 --> 00:13:08.840
Right.


00:13:08.840 --> 00:13:13.480
A flask or the aforementioned parametric enclosure,


00:13:13.480 --> 00:13:14.320
a Lego brick.


00:13:14.320 --> 00:13:19.460
So for all of that, there is example code there.


00:13:19.460 --> 00:13:24.280
And yeah, it really surprised me how quick I got this up


00:13:24.280 --> 00:13:26.840
and running because I had a very specific use case


00:13:26.840 --> 00:13:28.840
that I wanted to try to run through that.


00:13:28.840 --> 00:13:33.840
And that was inserts for one of these part case thingies


00:13:33.840 --> 00:13:37.960
where you can put inserts into solid screws and stuff.


00:13:37.960 --> 00:13:40.700
And that worked flawlessly with that.


00:13:40.700 --> 00:13:42.880
I had this finished in maybe half an hour


00:13:42.880 --> 00:13:43.720
or something like that.


00:13:43.720 --> 00:13:46.160
So really great package, works nice,


00:13:46.160 --> 00:13:51.160
has everything that you expect from a basic cut solution


00:13:51.160 --> 00:13:53.640
and also works in a browser.


00:13:53.640 --> 00:13:56.160
So if you want to go fully parametric


00:13:56.160 --> 00:13:57.200
and already know Python,


00:13:57.200 --> 00:13:59.640
then give this a look as well as FreeCAD.


00:13:59.640 --> 00:14:04.360
- Yeah, this looks super.


00:14:04.360 --> 00:14:08.360
Yeah, I have a friend who is doing a lot of Python


00:14:08.360 --> 00:14:13.320
and CNC machines, has a guitar company


00:14:13.320 --> 00:14:16.400
and it gets these wood blocks and shaves out guitars


00:14:16.400 --> 00:14:20.140
and necks and things that I'm not familiar with.


00:14:20.140 --> 00:14:23.320
Would this be applicable to something like that as well?


00:14:23.320 --> 00:14:24.840
Not to 3D printing, but for,


00:14:24.840 --> 00:14:29.200
if you were to define the polygons of it, basically?


00:14:29.200 --> 00:14:32.480
- The objects that it can output are STL files,


00:14:32.480 --> 00:14:35.280
object files, I think step export is also available.


00:14:35.280 --> 00:14:37.940
So all the stuff that you find commonly


00:14:37.940 --> 00:14:40.120
in the CNC and 3D printing world.


00:14:40.120 --> 00:14:42.840
So I could just design something with this,


00:14:42.840 --> 00:14:45.680
export the STL, throw it in a slicer for my 3D printer,


00:14:45.680 --> 00:14:49.840
or alternatively throw a resulting step file or something


00:14:49.840 --> 00:14:54.840
into whatever workflow preparation I do for my CNC router,


00:14:54.840 --> 00:14:56.420
I guess.


00:14:56.420 --> 00:14:58.760
So I'm not that familiar with CNC-ing, but.


00:14:58.760 --> 00:14:59.840
- Yeah, yeah.


00:14:59.840 --> 00:15:01.240
I think this huge CNC machine,


00:15:01.240 --> 00:15:04.400
I think it takes STL files, I'm pretty sure.


00:15:04.400 --> 00:15:05.240
- Well, then.


00:15:05.240 --> 00:15:06.060
- I'll have to check.


00:15:06.060 --> 00:15:07.640
That sounds like it could be really relevant.


00:15:07.640 --> 00:15:09.440
A couple of pieces of feedback,


00:15:09.440 --> 00:15:10.720
Daniel Kras says,


00:15:10.720 --> 00:15:15.720
This is nice because he hates the GUI workflow of FreeCAD.


00:15:15.720 --> 00:15:20.360
- Yeah, the funny thing is CatQuery originally started out


00:15:20.360 --> 00:15:22.880
as a FreeCAD plugin actually, as far as I see.


00:15:22.880 --> 00:15:26.840
So CatQuery one was FreeCAD, still built into FreeCAD.


00:15:26.840 --> 00:15:28.520
CatQuery two is now standalone


00:15:28.520 --> 00:15:30.120
and just uses the kernel and all that.


00:15:30.120 --> 00:15:31.880
So really nice.


00:15:31.880 --> 00:15:34.320
For people who used to use OpenSCAD,


00:15:34.320 --> 00:15:36.960
that one is the next level and really nice.


00:15:36.960 --> 00:15:39.200
- Nice.


00:15:39.200 --> 00:15:41.040
And then Brandon Branner, hey Brandon, says,


00:15:41.040 --> 00:15:45.600
can you import this into a slicer for 3D printing?


00:15:45.600 --> 00:15:46.800
- Yeah, that was what I meant with,


00:15:46.800 --> 00:15:49.760
you can export the STL and then throw that into the slicer.


00:15:49.760 --> 00:15:52.840
- Yeah, that's what I thought, perfect.


00:15:52.840 --> 00:15:54.440
Awesome, this is a great find, I love it.


00:15:54.440 --> 00:15:58.440
And I also, I love that you come with your experience


00:15:58.440 --> 00:16:01.040
and your view of Python and what's super interesting,


00:16:01.040 --> 00:16:02.280
'cause I would have never picked this,


00:16:02.280 --> 00:16:05.440
but it's very cool and a lot of people are into it, right?


00:16:05.440 --> 00:16:07.280
It's just like, I'm like, oh, FastAPI,


00:16:07.280 --> 00:16:08.680
yeah, it's stuff like that.


00:16:08.680 --> 00:16:13.680
- Yeah, different point of view, I guess.


00:16:13.680 --> 00:16:15.760
- I wanna do some 3D printing.


00:16:15.760 --> 00:16:16.600
It'd be fun.


00:16:16.600 --> 00:16:18.960
- Yeah, it is, but be careful


00:16:18.960 --> 00:16:20.280
that you don't start a hobby project


00:16:20.280 --> 00:16:21.520
that then takes over your life.


00:16:21.520 --> 00:16:23.160
That sometimes happens, I've heard.


00:16:23.160 --> 00:16:25.680
- Well, so that's why I put that off


00:16:25.680 --> 00:16:28.520
because I know that I don't need another one, so.


00:16:28.520 --> 00:16:36.520
- Brian, I heard you have some awesome 3D Star Wars stuff


00:16:36.520 --> 00:16:37.840
and maybe you could like build in,


00:16:37.840 --> 00:16:41.140
Like you could print some additional stuff to go with it.


00:16:41.140 --> 00:16:43.240
- I could, yeah.


00:16:43.240 --> 00:16:46.140
Over just a little bit. - Yeah, there you go.


00:16:46.140 --> 00:16:47.280
Or you could just buy it.


00:16:47.280 --> 00:16:48.920
(both laughing)


00:16:48.920 --> 00:16:50.420
- I just actually bought a part,


00:16:50.420 --> 00:16:52.580
so I needed a camera mount.


00:16:52.580 --> 00:16:56.020
So I had a camera that, the one I'm using now,


00:16:56.020 --> 00:16:58.340
there's other applications where I wanna use


00:16:58.340 --> 00:17:01.900
that I didn't have a mount for a tripod mount.


00:17:01.900 --> 00:17:04.100
And there was somebody on Etsy


00:17:04.100 --> 00:17:07.060
that it's obviously a 3D printed thing


00:17:07.060 --> 00:17:07.900
that you can buy.


00:17:07.900 --> 00:17:10.820
So Etsy is full of people making useful things


00:17:10.820 --> 00:17:11.940
with 3D printers.


00:17:11.940 --> 00:17:13.580
That's, I think that's neat.


00:17:13.580 --> 00:17:18.020
And 10 bucks to somebody else to do it for me.


00:17:18.020 --> 00:17:18.860
What a deal.


00:17:18.860 --> 00:17:20.100
So yeah.


00:17:20.100 --> 00:17:22.580
- I'm happy to report that I'm currently looking


00:17:22.580 --> 00:17:24.700
into a camera that is sitting on a mount


00:17:24.700 --> 00:17:26.540
that I designed and printed myself.


00:17:26.540 --> 00:17:28.900
- That's neat.


00:17:28.900 --> 00:17:29.720
- Wow, that's awesome.


00:17:29.720 --> 00:17:33.920
- So yeah, so I, that mounts to a VESA monitor arm


00:17:33.920 --> 00:17:35.560
and then has a little slide


00:17:35.560 --> 00:17:37.960
that I can actually slide up and down to adjust the height.


00:17:37.960 --> 00:17:40.320
And I also have some of these angle brackets


00:17:40.320 --> 00:17:44.600
that with tripod mounts on the up and down side


00:17:44.600 --> 00:17:47.800
that I can use to adjust the tilt and stuff.


00:17:47.800 --> 00:17:50.340
And yeah, so after I did this,


00:17:50.340 --> 00:17:52.800
that thing finally set where it is supposed to sit.


00:17:52.800 --> 00:17:55.080
So win-win.


00:17:55.080 --> 00:17:56.240
- Awesome.


00:17:56.240 --> 00:17:57.080
That's awesome.


00:17:57.080 --> 00:17:59.400
And just for people listening who are not watching,


00:17:59.400 --> 00:18:01.680
Gina has the best video setup of all three of us.


00:18:01.680 --> 00:18:02.520
She looks great up there.


00:18:02.520 --> 00:18:03.340
(Gina laughs)


00:18:03.340 --> 00:18:04.180
- She's really good.


00:18:04.180 --> 00:18:05.000
- It's great.


00:18:05.000 --> 00:18:07.420
And then parting thought on this one, Henry Schreiner,


00:18:07.420 --> 00:18:10.480
hey Henry, says 3D work from Python has always been tricky.


00:18:10.480 --> 00:18:12.260
So this looks great.


00:18:12.260 --> 00:18:17.260
All right, Brian, you ready for a fun one?


00:18:17.260 --> 00:18:18.900
- Yeah, let's switch to you.


00:18:18.900 --> 00:18:20.660
- All right, I got something cool.


00:18:20.660 --> 00:18:23.980
So previously I spoke about TextSniper.


00:18:23.980 --> 00:18:26.900
This is a Mac app and it lives in the menu bar,


00:18:26.900 --> 00:18:28.820
like up by the clock.


00:18:28.820 --> 00:18:30.860
And you just run it and you can,


00:18:30.860 --> 00:18:32.900
on Mac you can hit Command + Shift + 4


00:18:32.900 --> 00:18:35.460
and select a region and screenshot it.


00:18:35.460 --> 00:18:37.220
This one adds command shift two,


00:18:37.220 --> 00:18:38.300
and if you select a region,


00:18:38.300 --> 00:18:41.980
it will capture the text out of whatever is behind it.


00:18:41.980 --> 00:18:44.180
So for example, I was on a meeting on Zoom


00:18:44.180 --> 00:18:45.860
and somebody put something up and like,


00:18:45.860 --> 00:18:47.060
"Oh, I wanna have notes on that."


00:18:47.060 --> 00:18:48.100
And I thought, "Oh, I can type it."


00:18:48.100 --> 00:18:50.460
Wait a minute, command shift two, swipe on Zoom,


00:18:50.460 --> 00:18:53.520
boom, I have notes of the whole page instantly, right?


00:18:53.520 --> 00:18:55.820
This is a cool app, it's like 11 bucks for the Mac.


00:18:55.820 --> 00:18:57.740
This I sort of randomly mentioned,


00:18:57.740 --> 00:18:58.600
that was thought it was cool.


00:18:58.600 --> 00:19:00.160
This is not what I'm talking about.


00:19:00.160 --> 00:19:05.160
What I wanna talk about is Rhett, Rhett Turnbull said,


00:19:05.160 --> 00:19:07.600
"Hey, I heard Michael talk about this text sniper thing


00:19:07.600 --> 00:19:09.600
"I just described on Python Bytes.


00:19:09.600 --> 00:19:11.600
"That's neat, I bet I could build this in Python."


00:19:11.600 --> 00:19:12.440
So he did.


00:19:12.440 --> 00:19:14.440
- Nice.


00:19:14.440 --> 00:19:16.240
- Isn't that dope?


00:19:16.240 --> 00:19:19.400
So if we jump over here to the,


00:19:19.400 --> 00:19:23.040
I love the name, I got so many good names today.


00:19:23.040 --> 00:19:25.100
I mean, I didn't get them, I just gathered them up.


00:19:25.100 --> 00:19:28.200
So we have text sniper for that thing that grabs the text.


00:19:28.200 --> 00:19:29.720
He created the Textinator.


00:19:29.720 --> 00:19:34.480
And it's a simple macOS status bar, mini bar app


00:19:34.480 --> 00:19:38.720
that automatically detects text within screenshots.


00:19:38.720 --> 00:19:42.680
So instead of adding a new hotkey that does its own thing,


00:19:42.680 --> 00:19:44.680
you just do command shift four, copy it.


00:19:44.680 --> 00:19:49.680
And then it hooks into macOS through PI OBJC,


00:19:49.680 --> 00:19:52.360
figures out a screenshot was taken, grabs it,


00:19:52.360 --> 00:19:55.960
real quickly uses the neural engines in macOS


00:19:55.960 --> 00:20:00.360
and the Apple Silicon and stuff to do the text processing


00:20:00.360 --> 00:20:01.440
and then drops out the answer.


00:20:01.440 --> 00:20:04.840
And if you look at the whole app, where is it?


00:20:04.840 --> 00:20:09.840
It is like the entire app and the end is 450 lines of code.


00:20:09.840 --> 00:20:11.560
That's brilliant.


00:20:11.560 --> 00:20:12.960
- Yeah, very cool.


00:20:12.960 --> 00:20:14.320
- If you look at this like,


00:20:14.320 --> 00:20:16.320
I have one there's a lot in it.


00:20:16.320 --> 00:20:20.000
So you can see it's, you know, from foundation,


00:20:20.000 --> 00:20:23.680
from Coco, you know, import, NS notification center


00:20:23.680 --> 00:20:25.320
and all these different things


00:20:25.320 --> 00:20:30.320
is what it's basically using to listen for events


00:20:30.320 --> 00:20:34.120
of screenshots being taken and then feed those off


00:20:34.120 --> 00:20:36.400
into the various places that it needs to go.


00:20:36.400 --> 00:20:37.920
So what do you think?


00:20:37.920 --> 00:20:40.600
- I think it's awesome.


00:20:40.600 --> 00:20:43.840
And Rhett's in the audience and he says-


00:20:43.840 --> 00:20:44.920
- Oh yeah, hey Rhett.


00:20:44.920 --> 00:20:46.880
- Thanks for the shout out.


00:20:46.880 --> 00:20:50.800
And then of course somebody says, just for Mac, power.


00:20:50.800 --> 00:20:52.480
- I'm afraid.


00:20:52.480 --> 00:20:54.680
(laughing)


00:20:54.680 --> 00:20:56.840
Gina, what do you run for your OS?


00:20:56.840 --> 00:20:58.480
- Actually Windows, yeah.


00:20:58.480 --> 00:21:02.260
To the big surprise of many, but I'm also a gamer, so.


00:21:02.260 --> 00:21:04.680
- Yeah, awesome.


00:21:04.680 --> 00:21:09.100
- I got tired of constantly dual booting, so yeah.


00:21:09.100 --> 00:21:12.360
- Yeah, well, that's definitely a challenge.


00:21:12.360 --> 00:21:15.320
So there's actually a video showing you how it works


00:21:15.320 --> 00:21:18.080
and it uses something I've built apps with as well


00:21:18.080 --> 00:21:22.680
called Rumps, ridiculously uncomplicated macOS


00:21:22.680 --> 00:21:25.080
or any of our apps or something like that.


00:21:25.080 --> 00:21:26.800
And so it's really an interesting way


00:21:26.800 --> 00:21:29.440
where it's just kind of like clicking together


00:21:29.440 --> 00:21:33.640
a couple of cool things like the NS query


00:21:33.640 --> 00:21:35.840
for Spotlight with PyOBGC,


00:21:35.840 --> 00:21:38.540
the Vision VN recognized text request,


00:21:38.540 --> 00:21:42.520
and like just building on top of macOS and Rumps,


00:21:42.520 --> 00:21:43.680
which is pretty cool.


00:21:43.680 --> 00:21:45.320
You do have to give it special permissions


00:21:45.320 --> 00:21:48.700
'cause it has to be able to monitor your system globally.


00:21:48.700 --> 00:21:49.920
So there's a few steps you gotta follow,


00:21:49.920 --> 00:21:51.920
but well done, Rhett.


00:21:51.920 --> 00:21:55.360
I love the ambition here and it looks good.


00:21:55.360 --> 00:21:56.440
- But this is incredible.


00:21:56.440 --> 00:21:58.840
One of the, what I love about this is it's just one,


00:21:58.840 --> 00:22:01.120
it's just one thing, but it's a small application.


00:22:01.120 --> 00:22:03.280
So, I mean, potentially just, you could,


00:22:03.280 --> 00:22:05.340
you come up with all of these pieces,


00:22:05.340 --> 00:22:06.760
you could do other stuff too,


00:22:06.760 --> 00:22:10.480
and have just a small example to try to learn off of.


00:22:10.480 --> 00:22:12.280
That's pretty neat.


00:22:12.280 --> 00:22:13.100
- Indeed.


00:22:13.100 --> 00:22:17.640
Let me just make a real quick suggestion out there.


00:22:17.640 --> 00:22:20.880
Maybe, I'm not sure if this is, I don't see it over here,


00:22:20.880 --> 00:22:24.540
but if over on the releases side, on my rumps app,


00:22:24.540 --> 00:22:26.520
I did this and I put over in the releases,


00:22:26.520 --> 00:22:29.240
you can come over here and you can just download a .app,


00:22:29.240 --> 00:22:31.580
zipped, but it just unzips to the .app file.


00:22:31.580 --> 00:22:35.820
So hit that with some PI install, no, PI2,


00:22:35.820 --> 00:22:40.820
use PI2 app on it and make it one cool further step there.


00:22:40.820 --> 00:22:43.400
But yeah.


00:22:43.400 --> 00:22:46.220
- And maybe automate that with GitHub actions.


00:22:46.220 --> 00:22:49.020
- Yes, that's a very good point, absolutely.


00:22:49.020 --> 00:22:51.360
so you don't have to constantly keep doing it.


00:22:51.360 --> 00:22:54.020
- Yes, very good point.


00:22:54.020 --> 00:22:56.260
Push to a branch, have it do some magic.


00:22:56.260 --> 00:22:57.460
Magic happens.


00:22:57.460 --> 00:22:59.580
- Or click on release and have it do some magic.


00:22:59.580 --> 00:23:04.580
That's always wonderful to watch in the log.


00:23:04.580 --> 00:23:07.840
- Yeah, you know what I find is that people


00:23:07.840 --> 00:23:09.020
that set that stuff up,


00:23:09.020 --> 00:23:11.220
they release apps like this more frequently.


00:23:11.220 --> 00:23:12.340
They're like, oh, it's just one feature,


00:23:12.340 --> 00:23:13.540
but I don't mind pushing the button


00:23:13.540 --> 00:23:15.540
or I can just push to that branch.


00:23:15.540 --> 00:23:17.180
And the more that you have to do it manually,


00:23:17.180 --> 00:23:18.420
make sure you don't mess up stuff


00:23:18.420 --> 00:23:19.860
and don't forget to bump the version.


00:23:19.860 --> 00:23:22.140
And you just do it a lot less frequently.


00:23:22.140 --> 00:23:24.340
And so there's some really cool knock-on effects


00:23:24.340 --> 00:23:25.900
of that recommendation.


00:23:25.900 --> 00:23:29.660
- I went through a lot of pain to automate testing


00:23:29.660 --> 00:23:32.780
and release tasks in OctoPrint,


00:23:32.780 --> 00:23:35.820
which also involved, by the way, flashing physical hardware.


00:23:35.820 --> 00:23:39.620
And so I built a lot of stuff so that all of that


00:23:39.620 --> 00:23:42.460
is more or less at least semi-automated


00:23:42.460 --> 00:23:46.460
because that takes so much work out of every single release.


00:23:46.460 --> 00:23:48.140
That's absolutely insane.


00:23:48.140 --> 00:23:50.560
So yeah, automation, it's great.


00:23:50.560 --> 00:23:55.500
- Yeah, I do have to add, so yeah, there's a couple,


00:23:55.500 --> 00:23:56.980
I don't maintain that much stuff,


00:23:56.980 --> 00:24:01.060
but I have to admit that I'm reluctant to bump versions


00:24:01.060 --> 00:24:06.060
because then I'm like, I gotta push it out to PyPI then


00:24:06.060 --> 00:24:08.460
and I haven't automated that through GitHub Actions yet.


00:24:08.460 --> 00:24:11.940
So yeah, I gotta get on that stick.


00:24:11.940 --> 00:24:13.400
So, okay.


00:24:13.400 --> 00:24:17.260
I'd like to talk about locks,


00:24:17.260 --> 00:24:19.180
actually not using locks.


00:24:19.180 --> 00:24:22.580
So this is an article called


00:24:22.580 --> 00:24:27.080
Handling Concurrency Without Locks from Haki Benita.


00:24:27.080 --> 00:24:30.460
And it's just sort of a nice,


00:24:30.460 --> 00:24:33.300
actually this, I was intimidated at first


00:24:33.300 --> 00:24:37.140
by reading like flipping, getting ready to read this article


00:24:37.140 --> 00:24:39.620
but it was really well-written.


00:24:39.620 --> 00:24:43.520
So the idea is it starts with a Django application


00:24:43.520 --> 00:24:46.480
and it's a URL shortener actually.


00:24:46.480 --> 00:24:47.940
you were just talking about.


00:24:47.940 --> 00:24:51.400
But there's, so there's like an idea that you've


00:24:51.400 --> 00:24:53.840
just sort of walks through it of,


00:24:53.840 --> 00:24:57.280
the idea is you have something that creates a unique URL,


00:24:57.280 --> 00:25:00.880
but that uniqueness is checked


00:25:00.880 --> 00:25:02.760
because you keep a database of it.


00:25:02.760 --> 00:25:04.980
And so you check to make sure it's unique


00:25:04.980 --> 00:25:06.480
and then you create it,


00:25:06.480 --> 00:25:08.160
the check it, make sure it's unique


00:25:08.160 --> 00:25:09.680
and then store it in the database.


00:25:09.680 --> 00:25:11.440
But that check has to hit the database


00:25:11.440 --> 00:25:13.140
and you've got to read, write thing


00:25:13.140 --> 00:25:14.880
and there's a concurrency problem.


00:25:14.880 --> 00:25:18.200
I know there's lots of ways to get around it,


00:25:18.200 --> 00:25:22.920
but it's a reasonable use case to just think about.


00:25:22.920 --> 00:25:25.240
But there's a lot of places within Django


00:25:25.240 --> 00:25:27.220
or within web actually,


00:25:27.220 --> 00:25:29.200
and within actually all applications


00:25:29.200 --> 00:25:30.900
where if you're using a database,


00:25:30.900 --> 00:25:34.180
there's this concurrency thing might be a problem.


00:25:34.180 --> 00:25:37.300
And you can get around it with locks or other things,


00:25:37.300 --> 00:25:39.380
but the discussion kind of goes through


00:25:39.380 --> 00:25:41.280
basically broadening it up a bit


00:25:41.280 --> 00:25:44.000
and just talks about collision problems


00:25:44.000 --> 00:25:46.320
and locking problems in general.


00:25:46.320 --> 00:25:48.200
And with some nice diagrams,


00:25:48.200 --> 00:25:49.680
I can't remember where they are in the page,


00:25:49.680 --> 00:25:50.840
but ooh, nice horse.


00:25:50.840 --> 00:25:56.920
But it's a kind of a good slow walk.


00:25:56.920 --> 00:25:58.220
Hey, here's some diagrams.


00:25:58.220 --> 00:26:04.720
And then, okay, going on, continuing on with the article.


00:26:04.720 --> 00:26:08.060
The idea is like, once you know it's unique,


00:26:08.060 --> 00:26:08.900
you're storing it in the database,


00:26:08.900 --> 00:26:11.040
and the database is already going to,


00:26:11.040 --> 00:26:11.960
if you set it up right,


00:26:11.960 --> 00:26:14.780
it's already gonna make sure that that key is unique.


00:26:14.780 --> 00:26:17.800
So instead of making sure you can do it ahead of time


00:26:17.800 --> 00:26:19.080
and then doing it and making it,


00:26:19.080 --> 00:26:21.480
then checking for database errors,


00:26:21.480 --> 00:26:24.800
just assume that it's right and throw it into the database


00:26:24.800 --> 00:26:26.880
and then watch for any problems.


00:26:26.880 --> 00:26:31.680
So basically using the database as the uniqueness indicator.


00:26:31.680 --> 00:26:36.680
And then he talks about how to do that


00:26:36.680 --> 00:26:39.520
and then how to structure code a little bit


00:26:39.520 --> 00:26:43.880
to deal with those issues and then recover from it


00:26:43.880 --> 00:26:45.680
gracefully if that happens.


00:26:45.680 --> 00:26:49.760
And then the side effect is you're faster


00:26:49.760 --> 00:26:53.120
because you're not putting the concurrency locks


00:26:53.120 --> 00:26:56.680
within your application,


00:26:56.680 --> 00:26:59.680
you're depending on that uniqueness


00:26:59.680 --> 00:27:04.000
and that control of the database,


00:27:04.000 --> 00:27:08.520
which is already fine-tuned to allow multiple access


00:27:08.520 --> 00:27:10.840
and keep track of that, just utilize that.


00:27:10.840 --> 00:27:13.880
So it's a neat reminder to everybody


00:27:13.880 --> 00:27:16.780
to utilize the tools under you, I guess.


00:27:16.780 --> 00:27:18.640
- Yeah.


00:27:18.640 --> 00:27:20.400
- Good reminder.


00:27:20.400 --> 00:27:23.680
- Do you need to, yeah, do you do much database


00:27:23.680 --> 00:27:25.560
or Django stuff?


00:27:25.560 --> 00:27:28.120
- Me? No.


00:27:28.120 --> 00:27:31.800
I have never, I think I've never so far even touched Django


00:27:31.800 --> 00:27:34.680
and I try to avoid databases like the plague.


00:27:34.680 --> 00:27:36.760
- Yeah.


00:27:36.760 --> 00:27:39.220
I'm a huge enthusiast for flat files.


00:27:39.220 --> 00:27:41.680
Yeah, I don't know.


00:27:41.680 --> 00:27:44.020
I can't do that stuff. - They are quite valuable.


00:27:44.020 --> 00:27:47.320
- Yeah, it's just, it takes so much complexity


00:27:47.320 --> 00:27:48.160
out of the system.


00:27:48.160 --> 00:27:51.280
If you can somehow avoid having to run a database server


00:27:51.280 --> 00:27:54.160
or an SQLite file somewhere.


00:27:54.160 --> 00:27:55.320
Or a Benita file.


00:27:55.320 --> 00:27:59.600
- Yeah, yeah, I've been working on a project


00:27:59.600 --> 00:28:00.800
which I'm not ready to talk about yet,


00:28:00.800 --> 00:28:03.320
but I've been thinking,


00:28:03.320 --> 00:28:05.640
could this just be a bunch of local JSON files?


00:28:06.480 --> 00:28:08.320
I'll talk about that later, but yeah, it's yeah.


00:28:08.320 --> 00:28:09.920
Could it just be maybe if it's not,


00:28:09.920 --> 00:28:12.000
if it's 20 records or something,


00:28:12.000 --> 00:28:14.480
maybe just a JSON file is all I need.


00:28:14.480 --> 00:28:17.640
- I mean, sometimes there's no way around it.


00:28:17.640 --> 00:28:21.080
- I've got a project with a very small database


00:28:21.080 --> 00:28:24.800
and it's in, it fits, it's a very tiny text file


00:28:24.800 --> 00:28:29.320
as we started out, but the problem always,


00:28:29.320 --> 00:28:31.880
as long as, as soon as you get more than one user,


00:28:31.880 --> 00:28:33.840
you have concurrency problems,


00:28:33.840 --> 00:28:36.300
even if the application isn't multi-threaded


00:28:36.300 --> 00:28:41.300
or multi-process and we're running into that.


00:28:41.300 --> 00:28:45.620
So switching to, it does feel weird to have to switch


00:28:45.620 --> 00:28:47.140
to a database just for that.


00:28:47.140 --> 00:28:48.960
And you, I mean, you can get around it also.


00:28:48.960 --> 00:28:51.420
You can put the, you can just say, hey,


00:28:51.420 --> 00:28:52.960
if I don't already have a database,


00:28:52.960 --> 00:28:55.820
I can put the concurrency in the server


00:28:55.820 --> 00:28:58.980
so that that is handled there.


00:28:58.980 --> 00:28:59.820
You can do that.


00:28:59.820 --> 00:29:00.660
- It could be sure.


00:29:00.660 --> 00:29:03.300
Yeah, for sure.


00:29:03.300 --> 00:29:08.100
My example is a client side, like desktop type story.


00:29:08.100 --> 00:29:10.460
So there's only gonna be one user.


00:29:10.460 --> 00:29:12.140
There might be two people hitting the keyboard,


00:29:12.140 --> 00:29:13.900
but it'll be one app.


00:29:13.900 --> 00:29:17.340
Cool, but I also just really like thinking about,


00:29:17.340 --> 00:29:20.220
well, if you have a database and you have an ORM,


00:29:20.220 --> 00:29:23.560
in what ways could you just leverage that?


00:29:23.560 --> 00:29:24.580
And then instead of like you said,


00:29:24.580 --> 00:29:26.580
well, let's, you know, from threading,


00:29:26.580 --> 00:29:29.740
import re-entrant locks, the R lock, and then take those.


00:29:29.740 --> 00:29:32.900
And then you do pay the price for every successful time.


00:29:32.900 --> 00:29:35.640
and if it's one in a thousand or more


00:29:35.640 --> 00:29:37.900
that you're gonna hit that problem,


00:29:37.900 --> 00:29:40.020
pay that price and that little bit of complexity


00:29:40.020 --> 00:29:41.900
of catching like the integrity error


00:29:41.900 --> 00:29:45.300
and then reporting the error instead of reverse.


00:29:45.300 --> 00:29:46.140
That's great.


00:29:46.140 --> 00:29:47.820
- Yeah.


00:29:47.820 --> 00:29:50.100
All right.


00:29:50.100 --> 00:29:52.420
What do we have next?


00:29:52.420 --> 00:29:55.300
- Yeah, next we have something


00:29:55.300 --> 00:29:59.140
that I have not yet had a chance to test out myself sadly,


00:29:59.140 --> 00:30:02.220
but which I could have used roughly five or six years ago


00:30:02.220 --> 00:30:04.880
really hard, but did not have access to them.


00:30:04.880 --> 00:30:07.240
So I thought maybe I should make a mental note now


00:30:07.240 --> 00:30:08.080
and share it here.


00:30:08.080 --> 00:30:10.040
So we'll remember the next time.


00:30:10.040 --> 00:30:12.000
That's something like Tatsu exists.


00:30:12.000 --> 00:30:16.760
And Tatsu is a library with which,


00:30:16.760 --> 00:30:18.580
sometimes English is hard.


00:30:18.580 --> 00:30:23.000
You can generate parsers for Python.


00:30:23.000 --> 00:30:26.680
So Python based parsers based on eBNFs.


00:30:26.680 --> 00:30:30.200
So I think the E was for extended


00:30:30.200 --> 00:30:31.840
and BNF is Bacchus-Navar form.


00:30:31.840 --> 00:30:36.840
So a very structured way to define a grammar of a language


00:30:36.840 --> 00:30:42.300
of a file format of whatnot and textual I should add,


00:30:42.300 --> 00:30:44.260
though maybe also binary,


00:30:44.260 --> 00:30:46.160
but that sounds like a lot of pain.


00:30:46.160 --> 00:30:51.500
And that looks like something like,


00:30:51.500 --> 00:30:53.620
I'm looking for a good example.


00:30:53.620 --> 00:30:56.400
Let me quickly...


00:30:56.400 --> 00:30:59.960
I had...


00:31:00.860 --> 00:31:04.200
Yeah. So for example, this is a grammar


00:31:04.200 --> 00:31:09.200
and then you turn that into a slightly annotated grammar.


00:31:09.200 --> 00:31:14.680
And in the end, you run this through Tatsu


00:31:14.680 --> 00:31:16.660
and then Tatsu spits out something


00:31:16.660 --> 00:31:21.660
which builds an AST out of your thing that you put into it


00:31:21.660 --> 00:31:24.900
that is supposed to be parsed.


00:31:24.900 --> 00:31:26.780
And apparently Tatsu cannot only do that.


00:31:26.780 --> 00:31:29.380
Like, so it can do on the one hand in this,


00:31:29.380 --> 00:31:33.860
this kind of way that we know from the RE module,


00:31:33.860 --> 00:31:35.420
from the regular expression module in Python,


00:31:35.420 --> 00:31:38.140
where you can compile a pattern and then reuse it


00:31:38.140 --> 00:31:39.820
during the duration of your code,


00:31:39.820 --> 00:31:42.700
but you can also generate Python code itself out of it


00:31:42.700 --> 00:31:44.500
so that you can then import it as a module


00:31:44.500 --> 00:31:46.540
and reuse it and reuse it, maybe also adjust it,


00:31:46.540 --> 00:31:48.340
but I don't know how well that works.


00:31:48.340 --> 00:31:51.340
And apparently it is also compatible to Endler grammars,


00:31:51.340 --> 00:31:53.580
which is a name I haven't heard since university.


00:31:53.580 --> 00:31:56.640
So that is nice, I guess,


00:31:56.640 --> 00:31:58.800
for people who have grammars lying around


00:31:58.800 --> 00:32:01.040
that are written in Antler, I think version four


00:32:01.040 --> 00:32:02.480
or something like that.


00:32:02.480 --> 00:32:05.800
And yeah, so this is really one of these things


00:32:05.800 --> 00:32:08.600
that I wish I had found sooner


00:32:08.600 --> 00:32:11.320
when I had a desperate need to generate a parser


00:32:11.320 --> 00:32:13.880
from a EBNF because writing an EBNF


00:32:13.880 --> 00:32:16.800
is sometimes way easier than writing a parser.


00:32:16.800 --> 00:32:21.320
And yeah, now I have it, but now it's too late.


00:32:21.320 --> 00:32:26.800
- For people who are listening, the EBNF, the grammar file,


00:32:26.800 --> 00:32:30.320
it looks a little bit like a YAML definition,


00:32:30.320 --> 00:32:34.680
a tiny bit, a little bit like a little bit of reg X,


00:32:34.680 --> 00:32:37.860
but you basically specify the rules of the language


00:32:37.860 --> 00:32:40.720
and then it can take that and run with it, right?


00:32:40.720 --> 00:32:43.600
- Yeah, in a way you basically say you have an expression


00:32:43.600 --> 00:32:48.000
and that expression consists of this other components


00:32:48.000 --> 00:32:50.240
and then these components are defined further down.


00:32:50.240 --> 00:32:52.420
And so you dig deeper and deeper into the syntax


00:32:52.420 --> 00:32:55.840
and build up the definition from that basically.


00:32:55.840 --> 00:32:58.200
Like if you've ever seen one of these


00:32:58.200 --> 00:33:00.720
Jason grammar railroad diagrams,


00:33:00.720 --> 00:33:02.240
it also goes a bit like this.


00:33:02.240 --> 00:33:05.680
Just in textual form.


00:33:05.680 --> 00:33:08.960
- Yeah, once I was teaching a class and it's,


00:33:08.960 --> 00:33:10.000
go ahead, Brian.


00:33:10.000 --> 00:33:12.760
- No, I just, I was getting PTSD


00:33:12.760 --> 00:33:15.240
from my language classes in college.


00:33:15.240 --> 00:33:17.840
- Yeah, that's admittedly also where I learned


00:33:17.840 --> 00:33:20.440
about this stuff, but for some reason I,


00:33:20.440 --> 00:33:21.920
yeah, back then it was horrible.


00:33:21.920 --> 00:33:23.080
Now I kind of like it.


00:33:23.080 --> 00:33:23.900
It's weird.


00:33:24.960 --> 00:33:25.800
- Yeah.


00:33:25.800 --> 00:33:28.680
- It just makes it so easy to well define something.


00:33:28.680 --> 00:33:29.780
Yeah, and no pressure.


00:33:29.780 --> 00:33:31.400
And now I see the advantages


00:33:31.400 --> 00:33:34.340
because it makes it so much easier to define


00:33:34.340 --> 00:33:38.100
structured text and stuff that you need to use


00:33:38.100 --> 00:33:39.360
in machine communication.


00:33:39.360 --> 00:33:41.920
So if I had had an EBNF,


00:33:41.920 --> 00:33:45.320
or if I had had that like 10 years ago,


00:33:45.320 --> 00:33:46.520
when I started an OctoPrint,


00:33:46.520 --> 00:33:49.520
I would have written an EBNF for the,


00:33:49.520 --> 00:33:51.640
yeah, basically for the G-code stuff


00:33:51.640 --> 00:33:54.120
that runs between a printer and OctoPrint


00:33:54.120 --> 00:33:56.500
to communicate over the serial interface.


00:33:56.500 --> 00:33:58.520
And then it would have been way easier to pass that


00:33:58.520 --> 00:34:01.240
the way it is now I had to do all of this by hand.


00:34:01.240 --> 00:34:06.240
And yeah, but maybe I can rewrite it with this.


00:34:06.240 --> 00:34:08.280
We'll see.


00:34:08.280 --> 00:34:09.200
- Yeah.


00:34:09.200 --> 00:34:12.760
It seems useful if you wanted to create a simple,


00:34:12.760 --> 00:34:17.560
higher level scripting language that controls your app.


00:34:17.560 --> 00:34:18.400
Right?


00:34:18.400 --> 00:34:21.000
If say you were writing code for scientists in a lab


00:34:21.000 --> 00:34:22.600
those scientists were not developers,


00:34:22.600 --> 00:34:23.740
but you could say like, okay,


00:34:23.740 --> 00:34:26.820
you can enter a couple of simple expressions


00:34:26.820 --> 00:34:29.140
and it'll like move the robot around


00:34:29.140 --> 00:34:31.200
or it'll like upload the results


00:34:31.200 --> 00:34:33.500
or something like that, right?


00:34:33.500 --> 00:34:34.660
You could probably build that with this


00:34:34.660 --> 00:34:35.500
and that seems neat.


00:34:35.500 --> 00:34:38.340
And then the other thing that's noteworthy here is


00:34:38.340 --> 00:34:39.660
this is 3.10 or above,


00:34:39.660 --> 00:34:44.320
and I'm sure that's 'cause it's the peg parsers match


00:34:44.320 --> 00:34:46.100
the effectively the switch statement


00:34:46.100 --> 00:34:48.460
that's in Python 3.10 that it's using, right?


00:34:49.580 --> 00:34:51.620
Also with regards to data science,


00:34:51.620 --> 00:34:53.220
I could also imagine this helps maybe


00:34:53.220 --> 00:34:57.380
with parsing weird data formats that you have in Textual


00:34:57.380 --> 00:35:01.580
that fall out of some legacy software


00:35:01.580 --> 00:35:04.740
that is running on some ancient sun cluster or something


00:35:04.740 --> 00:35:07.460
that is connected to your measuring devices.


00:35:07.460 --> 00:35:10.540
So I could imagine that could also help there.


00:35:10.540 --> 00:35:13.540
- Yeah, good idea.


00:35:13.540 --> 00:35:15.860
Brian, is that it for items?


00:35:15.860 --> 00:35:17.780
- I think it is.


00:35:19.460 --> 00:35:21.620
Do you have anything extra? - All right.


00:35:21.620 --> 00:35:23.300
Of course.


00:35:23.300 --> 00:35:24.780
Of course I've got some extras.


00:35:24.780 --> 00:35:25.620
Let's see.


00:35:25.620 --> 00:35:26.440
Let me pull up real quick. - Me too.


00:35:26.440 --> 00:35:27.280
- All right.


00:35:27.280 --> 00:35:28.740
I know, fantastic.


00:35:28.740 --> 00:35:30.260
All right.


00:35:30.260 --> 00:35:31.100
I'll throw mine out.


00:35:31.100 --> 00:35:31.940
So not here.


00:35:31.940 --> 00:35:34.740
In a recent episode, we covered,


00:35:34.740 --> 00:35:36.860
oh, where was it?


00:35:36.860 --> 00:35:39.900
It was the PEP 690. - 285?


00:35:39.900 --> 00:35:41.020
Oh, okay. - 285.


00:35:41.020 --> 00:35:41.860
Thank you.


00:35:41.860 --> 00:35:42.680
Yes, that's it.


00:35:42.680 --> 00:35:46.620
So we talked about PEP 690 and lazy imports,


00:35:46.620 --> 00:35:48.220
and this was recommended by Itamar.


00:35:48.220 --> 00:35:52.460
This comes out of the Cinder project and other things.


00:35:52.460 --> 00:35:57.100
Since then, I've had Barry Warsaw, Armand Bravo,


00:35:57.100 --> 00:36:00.980
and Carl Meyer on DocPython to discuss this, which was fun.


00:36:00.980 --> 00:36:03.860
And they've also written this up as a formal blog post.


00:36:03.860 --> 00:36:05.220
So people were interested in that,


00:36:05.220 --> 00:36:06.380
and they wanted to just go dive in.


00:36:06.380 --> 00:36:08.300
I just want to point out that that's


00:36:08.300 --> 00:36:11.540
a pretty intense dependency graph right there.


00:36:11.540 --> 00:36:14.780
It's just black cloud of dots all connected and stuff.


00:36:14.780 --> 00:36:17.180
So there's some really interesting things from


00:36:17.180 --> 00:36:20.120
Instagram's use of this and whatnot.


00:36:20.120 --> 00:36:21.820
So, very neat.


00:36:21.820 --> 00:36:23.120
People can check that out.


00:36:23.120 --> 00:36:28.300
There was an expedited release of Python 3.11 Beta 3


00:36:28.300 --> 00:36:31.180
because of an incompatibility with pytest, Brian.


00:36:31.180 --> 00:36:32.020
Can you imagine?


00:36:32.020 --> 00:36:33.920
- Yeah.


00:36:33.920 --> 00:36:36.180
(laughing)


00:36:36.180 --> 00:36:37.780
- Do you know about this?


00:36:37.780 --> 00:36:38.620
- Yes, I do.


00:36:38.620 --> 00:36:40.500
I found it amusing.


00:36:40.500 --> 00:36:42.220
In one of the announcements, it said,


00:36:42.220 --> 00:36:45.440
"Apparently pytest is well used."


00:36:45.440 --> 00:36:47.600
(laughing)


00:36:47.600 --> 00:36:49.680
- No, can't be.


00:36:49.680 --> 00:36:51.680
- No way, no way.


00:36:51.680 --> 00:36:54.120
- I think it was a joke, but made me laugh.


00:36:54.120 --> 00:36:55.720
- Yeah, yeah.


00:36:55.720 --> 00:36:57.080
But the fix was no joke.


00:36:57.080 --> 00:36:58.400
So there's a quick fix that rolled out


00:36:58.400 --> 00:36:59.480
for people if they wanna check that out.


00:36:59.480 --> 00:37:02.840
And then last thing, I kind of threw out a teaser


00:37:02.840 --> 00:37:06.160
for this episode.


00:37:06.160 --> 00:37:09.160
I just did something completely silly and weird,


00:37:09.160 --> 00:37:11.200
and I think I might like it, I'm not sure.


00:37:11.200 --> 00:37:15.420
So for a long, long time, I've used DuckDuckGo, right?


00:37:15.420 --> 00:37:18.020
And I really think that DuckDuckGo is fantastic


00:37:18.020 --> 00:37:20.260
and I may just keep using that.


00:37:20.260 --> 00:37:22.940
But let me give a little credit here.


00:37:22.940 --> 00:37:27.740
Daniel Herthome sent us a message and said,


00:37:27.740 --> 00:37:29.040
you know, this isn't really Python related,


00:37:29.040 --> 00:37:32.140
but if I know Michael, I bet he will love this


00:37:32.140 --> 00:37:35.820
ad-free privacy respecting search engine called kaggy.com.


00:37:35.820 --> 00:37:38.060
Have either of you heard of Kaggy?


00:37:38.060 --> 00:37:39.260
I had not.


00:37:39.260 --> 00:37:40.100
- Never.


00:37:42.620 --> 00:37:45.180
No, and so it's pretty interesting.


00:37:45.180 --> 00:37:49.300
I went and I listened to, or read, I listened with my eyes.


00:37:49.300 --> 00:37:52.140
I listened to this interview, watched this interview.


00:37:52.140 --> 00:37:54.180
There's an audio version of it, so I keep stumbling on that.


00:37:54.180 --> 00:37:59.180
But Vladimir Perlovak is the founder of Kaggy.


00:37:59.180 --> 00:38:05.060
Was founded in just March, so it's really brand new.


00:38:05.060 --> 00:38:06.660
Talks a lot about the motivation


00:38:06.660 --> 00:38:07.700
for creating the search engine.


00:38:07.700 --> 00:38:11.040
Basically, he says, "I think the ad tech,"


00:38:11.040 --> 00:38:12.960
which I think maybe should be called more like


00:38:12.960 --> 00:38:15.160
surveillance capitalism or something like


00:38:15.160 --> 00:38:17.120
a little more serious, but ad tech.


00:38:17.120 --> 00:38:19.020
Putting all these ads and tracking in front of my kids,


00:38:19.020 --> 00:38:20.400
I don't want my kids to grow up thinking that


00:38:20.400 --> 00:38:23.520
just like being completely tracked and having zero privacy


00:38:23.520 --> 00:38:25.640
is like the way of the world.


00:38:25.640 --> 00:38:28.400
So there's a pretty interesting conversation here


00:38:28.400 --> 00:38:32.000
on what they built, but the idea is it's a search engine


00:38:32.000 --> 00:38:34.520
that is a premium search engine.


00:38:34.520 --> 00:38:36.520
So instead of having ads, users have to pay for it.


00:38:36.520 --> 00:38:38.740
So I'm gonna do an experiment for us, Brian.


00:38:38.740 --> 00:38:40.180
I'm gonna live with this for a month


00:38:40.180 --> 00:38:42.800
and then I'll give you a report on what I think.


00:38:42.800 --> 00:38:44.940
- I think that'd be great, yeah.


00:38:44.940 --> 00:38:47.180
- Yeah, so check this out, for example,


00:38:47.180 --> 00:38:50.480
 PEP 690 lazy imports.


00:38:50.480 --> 00:38:53.140
Happens if we put that up there.


00:38:53.140 --> 00:38:57.360
So comes up with the peps page and check that out,


00:38:57.360 --> 00:38:59.700
number three, and then probably somewhere


00:38:59.700 --> 00:39:01.300
a little farther down, so it's not in the title,


00:39:01.300 --> 00:39:02.940
is Python bytes, I would suspect.


00:39:02.940 --> 00:39:06.400
But like, these results are pretty interesting,


00:39:06.400 --> 00:39:07.240
but check this out.


00:39:07.240 --> 00:39:09.360
So I can come over here and I can hover over


00:39:09.360 --> 00:39:12.540
next to one of these and it says, oh, this is on this page.


00:39:12.540 --> 00:39:15.400
This one doesn't have that much information about it.


00:39:15.400 --> 00:39:18.800
Some of them, let's see, maybe this one should have it.


00:39:18.800 --> 00:39:20.360
So before you even visit it,


00:39:20.360 --> 00:39:23.000
it'll say there's four trackers, it's this rank by traffic.


00:39:23.000 --> 00:39:25.320
It'll use HTTPS, it's fast or not.


00:39:25.320 --> 00:39:26.720
It lands in this category


00:39:26.720 --> 00:39:29.560
and you can upvote and downvote thing.


00:39:29.560 --> 00:39:31.960
You can push things up and down.


00:39:31.960 --> 00:39:34.160
- That is a power feature.


00:39:34.160 --> 00:39:35.000
- Isn't that cool?


00:39:35.000 --> 00:39:37.240
You can say W3 schools, I never ever want you to show up.


00:39:37.240 --> 00:39:39.320
- Exactly, that was my thought.


00:39:39.320 --> 00:39:41.520
- Yes, it's so horrible.


00:39:41.520 --> 00:39:43.480
They're so good at SEO and they're so bad


00:39:43.480 --> 00:39:45.580
at writing meaningful, helpful stuff.


00:39:45.580 --> 00:39:48.700
So you could just, when I got my first W3C result,


00:39:48.700 --> 00:39:50.920
schools result, I just did block that.


00:39:50.920 --> 00:39:54.360
And so you can, for example, go to like the docs


00:39:54.360 --> 00:39:56.260
on python.org and say, you know what,


00:39:56.260 --> 00:39:58.080
that one's higher for me because if I search


00:39:58.080 --> 00:39:59.440
for Python stuff, I'd kind of want to get


00:39:59.440 --> 00:40:01.120
the official discussion.


00:40:01.120 --> 00:40:03.280
The other thing you can do is cool


00:40:03.280 --> 00:40:04.240
is you can have these lenses.


00:40:04.240 --> 00:40:05.400
So you're saying I'm only interested


00:40:05.400 --> 00:40:06.920
in programming stuff right now.


00:40:06.920 --> 00:40:11.160
So it takes you to like GitHub and stuff like that.


00:40:11.160 --> 00:40:13.220
And then you say, you know what, I'm just actually,


00:40:13.220 --> 00:40:15.160
what I want is just more results.


00:40:15.160 --> 00:40:17.400
Just basically search GitHub for all of this.


00:40:17.400 --> 00:40:24.400
And the final thought here that's cool is it derinks.


00:40:24.400 --> 00:40:27.080
So, you know, I showed you like different sites.


00:40:27.080 --> 00:40:29.440
So here let's put something embarrassing


00:40:29.440 --> 00:40:30.960
for a company that needs to be embarrassed.


00:40:30.960 --> 00:40:31.960
CNN.


00:40:31.960 --> 00:40:33.440
So if you hover over this, how many block,


00:40:33.440 --> 00:40:36.160
there's 43 ad detectors on this thing.


00:40:36.160 --> 00:40:39.280
43, 43.


00:40:39.280 --> 00:40:40.600
Here's what they do.


00:40:40.600 --> 00:40:43.500
They are down ranking and down voting,


00:40:43.500 --> 00:40:47.440
like lowering the SEO rank of things


00:40:47.440 --> 00:40:51.140
that have tons of ad trackers and things like that.


00:40:51.140 --> 00:40:52.600
So if you're overwhelmed like this,


00:40:52.600 --> 00:40:55.520
where it's orange or red, like that lowers your rank.


00:40:55.520 --> 00:41:01.240
So it's like an anti ad tracker result surfacer.


00:41:01.240 --> 00:41:03.300
Anyway, what do y'all think?


00:41:05.320 --> 00:41:08.400
I'm tempted, but I'll let you test it first.


00:41:08.400 --> 00:41:11.820
- Yeah, give me a month.


00:41:11.820 --> 00:41:13.320
I didn't think I was gonna like it that much.


00:41:13.320 --> 00:41:15.180
It's pretty nice.


00:41:15.180 --> 00:41:18.860
So I paid 10, it's $10 a month, which seems a little high.


00:41:18.860 --> 00:41:20.460
I think they are getting their results


00:41:20.460 --> 00:41:23.800
by buying API access to Google and Bing


00:41:23.800 --> 00:41:26.580
and then resurfacing those results to you


00:41:26.580 --> 00:41:30.860
in this privacy respecting way.


00:41:30.860 --> 00:41:31.700
Yeah.


00:41:31.700 --> 00:41:34.060
- Actually, I kind of think it's brilliant


00:41:34.060 --> 00:41:37.780
And I want to try it too, because at first I was like,


00:41:37.780 --> 00:41:40.260
I don't want to pay for a search, but I guess I know.


00:41:40.260 --> 00:41:42.300
I went through this process.


00:41:42.300 --> 00:41:44.380
Yeah, I tried to tell my kids,


00:41:44.380 --> 00:41:47.580
if you're not paying for it,


00:41:47.580 --> 00:41:49.940
then you're not the customer, you're the product.


00:41:49.940 --> 00:41:50.780
So.


00:41:50.780 --> 00:41:51.660
- Yes, absolutely.


00:41:51.660 --> 00:41:52.580
Absolutely.


00:41:52.580 --> 00:41:54.500
- And even if it wasn't for that,


00:41:54.500 --> 00:41:58.620
that the customization options are just like amazing.


00:41:58.620 --> 00:41:59.860
Like, I don't know.


00:41:59.860 --> 00:42:00.700
- The fact that you can say,


00:42:00.700 --> 00:42:02.940
I prefer more of this site, less of that site.


00:42:02.940 --> 00:42:05.260
Yeah, it is pretty neat.


00:42:05.260 --> 00:42:08.920
So I really appreciate that Daniel sent this in.


00:42:08.920 --> 00:42:10.660
And I'm going to live with it for a month,


00:42:10.660 --> 00:42:11.660
and I will let you know.


00:42:11.660 --> 00:42:13.580
But the Maps doesn't work very well.


00:42:13.580 --> 00:42:14.700
They don't work very well.


00:42:14.700 --> 00:42:16.980
But you can always just go to somewhere else.


00:42:16.980 --> 00:42:19.740
Final thought, the whole reason I switched to Vivaldi


00:42:19.740 --> 00:42:24.100
over Firefox is I didn't want to bring other things,


00:42:24.100 --> 00:42:25.980
like ad block-- and you have ad blocking,


00:42:25.980 --> 00:42:27.060
tracker blocking, and stuff there.


00:42:27.060 --> 00:42:28.740
But then you have to get extensions.


00:42:28.740 --> 00:42:32.060
And then those extensions send their data back.


00:42:32.060 --> 00:42:36.460
and sometimes they'll like, well, these ads pay to be let through our ad blocker.


00:42:36.460 --> 00:42:38.460
And there's just like still kind of a tracking level.


00:42:38.460 --> 00:42:46.300
So with Vivaldi, you know, you get like total blocking without third party things.


00:42:46.300 --> 00:42:50.460
With this, you kind of get a search engine that is like a good match to that.


00:42:50.460 --> 00:42:53.020
So anyway, I think it's cool.


00:42:53.020 --> 00:42:56.060
And anyway, I just wanted to give it a quick shout out here because it seems fun.


00:42:56.060 --> 00:42:59.980
I think that's it for everything.


00:43:00.940 --> 00:43:05.940
Okay, funny thing in the chat, Ecov or Ekevoo says,


00:43:05.940 --> 00:43:13.820
"I use a custom Firefox extension to block W3 schools."


00:43:13.820 --> 00:43:17.780
That's interesting, I didn't know that existed.


00:43:17.780 --> 00:43:19.260
- Yes, I installed that as well.


00:43:19.260 --> 00:43:23.900
And Ekevoo, that is an absolutely worthwhile thing to do.


00:43:23.900 --> 00:43:25.740
I totally agree, so I'm with you.


00:43:25.740 --> 00:43:26.900
I used to use that as well.


00:43:26.900 --> 00:43:28.460
I also use something that like,


00:43:28.460 --> 00:43:33.260
it was called I'm okay with cookies and it would automatically accept all cookie disclaimers.


00:43:33.260 --> 00:43:38.220
You know, the cookie ones, it would just say, okay, and there's almost none of them. And then


00:43:38.220 --> 00:43:41.020
I just block them on my network. So it doesn't matter if I accept them or not.


00:43:41.020 --> 00:43:48.700
Um, well, let's jump to Gina's extra stuff. It's only some small stuff. So


00:43:48.700 --> 00:43:56.460
one thing, can you share my, thank you. so one thing is something that, I mentioned


00:43:56.460 --> 00:43:58.500
I mentioned before that I went through a lot of pain


00:43:58.500 --> 00:44:00.620
to automate a bunch of stuff about the testing


00:44:00.620 --> 00:44:03.700
and OctoPrint, which involves some Raspberry Pi cluster here


00:44:03.700 --> 00:44:08.700
that I can flash via a Python tool and stuff like this.


00:44:08.700 --> 00:44:11.580
And I also needed voltage monitoring


00:44:11.580 --> 00:44:12.780
for this Raspberry Pi cluster,


00:44:12.780 --> 00:44:15.420
because I don't know how familiar you are


00:44:15.420 --> 00:44:18.020
with Raspberry Pis, but they can be a bit,


00:44:18.020 --> 00:44:22.940
let's say, selective about what power supplies they like,


00:44:22.940 --> 00:44:27.000
and they start browning out easily and stuff.


00:44:27.000 --> 00:44:28.660
So power monitoring is very helpful.


00:44:28.660 --> 00:44:33.180
And there are these cheapish 30, 40 bucks


00:44:33.180 --> 00:44:37.440
USB power and voltage monitoring dongles


00:44:37.440 --> 00:44:41.500
that you can just plug between two USB cables


00:44:41.500 --> 00:44:42.700
and then it will measure everything.


00:44:42.700 --> 00:44:44.360
And they also come with Bluetooth.


00:44:44.360 --> 00:44:48.300
And I found a tool that can lock the data


00:44:48.300 --> 00:44:51.180
from this Bluetooth interface via Pi Blue Z.


00:44:51.180 --> 00:44:56.180
it's written in Python from these UM24C, UM25C or UM34C


00:44:56.180 --> 00:45:00.200
dongles in order to allow you to track the voltage


00:45:00.200 --> 00:45:03.920
and power over a course of, yeah, whatever.


00:45:03.920 --> 00:45:06.440
So I have to set up, lock this out,


00:45:06.440 --> 00:45:07.960
throw that into an InfluxDB,


00:45:07.960 --> 00:45:09.880
throw it up on a Grafana dashboard


00:45:09.880 --> 00:45:11.720
and get warnings when something underpowers.


00:45:11.720 --> 00:45:16.080
And that is great for sleeping in peace at night


00:45:16.080 --> 00:45:17.720
about the test cluster situation.


00:45:17.720 --> 00:45:20.000
And the other thing is something that reached me


00:45:20.000 --> 00:45:22.880
actually just last night in the shape of a tweet.


00:45:22.880 --> 00:45:25.640
And that is that there is now another


00:45:25.640 --> 00:45:27.600
Node.js PyPI distribution


00:45:27.600 --> 00:45:31.120
that you can just depend your Python apps on


00:45:31.120 --> 00:45:32.880
that will then pull in for you


00:45:32.880 --> 00:45:36.160
a complete Node.js distribution with NPM,


00:45:36.160 --> 00:45:37.560
with Node and with NPX.


00:45:37.560 --> 00:45:40.660
So if you have, like me, for example,


00:45:40.660 --> 00:45:43.000
if you happen to build a web server


00:45:43.000 --> 00:45:45.720
that also ships with a web UI built in,


00:45:45.720 --> 00:45:49.320
then now you have a way to ensure that


00:45:49.320 --> 00:45:51.700
everything that you need in order to build that web UI


00:45:51.700 --> 00:45:55.260
is also there and can also maybe make this part


00:45:55.260 --> 00:45:58.740
of a build process that you build into your setup pie


00:45:58.740 --> 00:46:00.900
or something like this as well.


00:46:00.900 --> 00:46:03.980
So that was a really nice thing to discover.


00:46:03.980 --> 00:46:07.580
Still considered alpha, but I tried it briefly this morning


00:46:07.580 --> 00:46:10.300
and really great.


00:46:10.300 --> 00:46:11.580
- That's cool.


00:46:11.580 --> 00:46:13.140
- That's really cool. - That is fantastic.


00:46:13.140 --> 00:46:14.700
Yeah, that's super interesting.


00:46:14.700 --> 00:46:19.120
You could pair that with PyScript


00:46:19.120 --> 00:46:22.200
and have it do a little electron type thing


00:46:22.200 --> 00:46:24.520
and then just run Python,


00:46:24.520 --> 00:46:25.920
write Python for your little web app


00:46:25.920 --> 00:46:27.160
that runs on the front end.


00:46:27.160 --> 00:46:28.000
Yeah.


00:46:28.000 --> 00:46:29.520
- Yeah, or if you do something like,


00:46:29.520 --> 00:46:32.300
so for example, I still use Cypress JS


00:46:32.300 --> 00:46:34.280
for end-to-end testing in OctoPrint,


00:46:34.280 --> 00:46:37.560
which means that I now need a Node.js environment


00:46:37.560 --> 00:46:38.560
and a Python environment


00:46:38.560 --> 00:46:41.980
in order to have all developer dependencies together.


00:46:41.980 --> 00:46:43.800
This would solve this problem


00:46:43.800 --> 00:46:46.200
because then I could just make this part,


00:46:46.200 --> 00:46:48.920
maybe I could even fire it up as part of the pytest suite.


00:46:48.920 --> 00:46:51.960
I don't know, but would be interesting certainly


00:46:51.960 --> 00:46:52.980
to test that out.


00:46:52.980 --> 00:46:54.700
- Definitely.


00:46:54.700 --> 00:46:56.120
- Brian, it sounds like a PI test fixture


00:46:56.120 --> 00:46:57.420
needs to be put in place.


00:46:57.420 --> 00:47:01.820
- If you want to do that, that would be great.


00:47:01.820 --> 00:47:07.280
- I'll put it on my to-do list right after 3D printing.


00:47:07.280 --> 00:47:09.720
- I know the problem.


00:47:09.720 --> 00:47:14.880
- Since we're running a little long,


00:47:14.880 --> 00:47:18.680
I'm gonna skip my extras till next week.


00:47:18.680 --> 00:47:20.720
So let's maybe jump to something funny.


00:47:20.720 --> 00:47:22.480
- Just go straight to a joke?


00:47:22.480 --> 00:47:23.320
- Yeah, well.


00:47:23.320 --> 00:47:25.440
- Oh, I've got a good one for you all this week.


00:47:25.440 --> 00:47:28.180
So this one comes to us from Brian Skin.


00:47:28.180 --> 00:47:31.240
Oh, do you, did you have a joke as well?


00:47:31.240 --> 00:47:34.680
- Yeah, but let's do yours first.


00:47:34.680 --> 00:47:36.000
- No, let's do yours.


00:47:36.000 --> 00:47:39.700
- Okay, so this is Nathan Ash, Nathan Ashbagger.


00:47:39.700 --> 00:47:45.160
It's a tweet and it's like,


00:47:45.160 --> 00:47:47.880
you pretend you're getting a call and the phone says,


00:47:47.880 --> 00:47:49.980
"Hey, I'm from somewhere.


00:47:49.980 --> 00:47:52.440
We built the first AI driven sales platform


00:47:52.440 --> 00:47:55.120
and I wanted to talk to you about your sales needs."


00:47:55.120 --> 00:47:58.920
He says, "Wait, are you an AI?"


00:47:58.920 --> 00:47:59.760
"No."


00:47:59.760 --> 00:48:03.000
"Well, we can both appreciate the irony here, right?"


00:48:03.000 --> 00:48:05.680
(laughing)


00:48:05.680 --> 00:48:07.240
I don't know if this was real or not,


00:48:07.240 --> 00:48:09.160
but it just made me laugh.


00:48:09.160 --> 00:48:10.120
That was funny.


00:48:10.120 --> 00:48:11.200
- I love it, yeah.


00:48:11.200 --> 00:48:12.920
Shouldn't they be having their AI call you


00:48:12.920 --> 00:48:14.280
with their AI platform?


00:48:14.280 --> 00:48:15.120
- It's subtle.


00:48:17.400 --> 00:48:18.240
- Yeah, okay.


00:48:18.240 --> 00:48:19.640
So let's go, maybe yours is funnier.


00:48:19.640 --> 00:48:21.520
Let's go to yours, Michael.


00:48:21.520 --> 00:48:25.400
- Well, mine is a collection of jokes.


00:48:25.400 --> 00:48:27.160
So maybe one of them will be.


00:48:27.160 --> 00:48:29.400
This comes to us from Brian Skin,


00:48:29.400 --> 00:48:31.240
who, as I said, has been on the show before.


00:48:31.240 --> 00:48:32.240
Thank you, Brian.


00:48:32.240 --> 00:48:34.120
And these are, you know how like you've got


00:48:34.120 --> 00:48:36.760
the Mars Rover badge and you've got


00:48:36.760 --> 00:48:39.520
the Arctic Bolt badges on GitHub?


00:48:39.520 --> 00:48:40.920
These are ones that were considered


00:48:40.920 --> 00:48:42.480
and potentially rejected, okay?


00:48:42.480 --> 00:48:44.240
- Okay.


00:48:44.240 --> 00:48:45.080
- So let's see what's over here.


00:48:45.080 --> 00:48:47.820
These are, they were considered.


00:48:47.820 --> 00:48:50.380
I feel like David Letterman with his,


00:48:50.380 --> 00:48:53.100
his like ad stuff.


00:48:53.100 --> 00:48:55.700
Okay, so one of them is the vital contributor,


00:48:55.700 --> 00:48:58.960
over 100 issue comments consisting of just plus ones


00:48:58.960 --> 00:49:00.500
or thumbs up emoji.


00:49:00.500 --> 00:49:06.300
There's the Sith Lord who wiped out someone else's commit


00:49:06.300 --> 00:49:08.460
by force pushing to the main branch.


00:49:08.460 --> 00:49:09.820
You could have that badge.


00:49:09.820 --> 00:49:10.660
- I have that badge. - You have the


00:49:10.660 --> 00:49:12.180
procrastinator badge.


00:49:12.180 --> 00:49:13.020
Do you, or?


00:49:14.300 --> 00:49:15.600
You could be the procrastinator,


00:49:15.600 --> 00:49:17.680
create a repository with a single init commit


00:49:17.680 --> 00:49:19.020
with just the readme.md


00:49:19.020 --> 00:49:20.720
and never touch it for five years.


00:49:20.720 --> 00:49:23.120
(both laughing)


00:49:23.120 --> 00:49:25.880
My personal favorite is the secret Santa,


00:49:25.880 --> 00:49:29.620
accidentally commit a secret API key to a public repository.


00:49:29.620 --> 00:49:32.640
(both laughing)


00:49:32.640 --> 00:49:34.240
- That's good. - We have the monkey rich.


00:49:34.240 --> 00:49:37.160
Yeah, the monkey rich makes a commit directly


00:49:37.160 --> 00:49:39.200
to the main branch that breaks the build.


00:49:39.200 --> 00:49:42.720
This is fine.


00:49:42.720 --> 00:49:44.680
It has a dog in a room that's full of fire.


00:49:44.680 --> 00:49:48.400
We've all seen this meme in some form or other, I'm sure.


00:49:48.400 --> 00:49:49.960
This is fine.


00:49:49.960 --> 00:49:53.680
Over 1,000 open issues on a public repository that you own.


00:49:53.680 --> 00:49:56.480
- Ouch.


00:49:56.480 --> 00:49:59.140
(both laughing)


00:49:59.140 --> 00:50:03.280
- Fine, let's wrap it up with the last one.


00:50:03.280 --> 00:50:04.220
Works on my machine.


00:50:04.220 --> 00:50:05.920
The works on my machine certification


00:50:05.920 --> 00:50:08.480
suggests user error in at least 10 issue threads


00:50:08.480 --> 00:50:09.840
without attempting to reproduce


00:50:09.840 --> 00:50:11.480
in user runtime environments.


00:50:11.480 --> 00:50:13.920
All right. These are pretty good.


00:50:13.920 --> 00:50:17.480
- That would be hard to automatically detect though, right?


00:50:17.480 --> 00:50:19.920
- It would. Yeah.


00:50:19.920 --> 00:50:21.840
Some of these you got to self-assign I think.


00:50:21.840 --> 00:50:23.480
- Yeah, yeah, yeah.


00:50:23.480 --> 00:50:24.320
- Yeah.


00:50:24.320 --> 00:50:26.920
- But yeah, I don't know if you saw that


00:50:26.920 --> 00:50:29.840
the GitHub recently actually rolled out more achievements


00:50:29.840 --> 00:50:31.040
that you can now try to hunt.


00:50:31.040 --> 00:50:33.440
So it's not anymore just the Arctic stuff,


00:50:33.440 --> 00:50:36.640
but there's now stuff like Merge Shark


00:50:36.640 --> 00:50:39.080
and PR Shark, I think they called it.


00:50:39.080 --> 00:50:41.680
And so there are several, they are hidden.


00:50:41.680 --> 00:50:42.880
- Oh, that's cool.


00:50:42.880 --> 00:50:45.840
- Yeah, yeah, I think last Thursday or so,


00:50:45.840 --> 00:50:47.800
they rolled it out, which was also when


00:50:47.800 --> 00:50:53.240
this repo I think popped up, or at least popped up.


00:50:53.240 --> 00:50:55.920
I also, it also went past me on my Twitter feed


00:50:55.920 --> 00:50:59.040
and I immediately shared it around with people


00:50:59.040 --> 00:51:00.760
because yeah, it's-- - Yeah, it was good.


00:51:00.760 --> 00:51:01.600
- It's cute.


00:51:01.600 --> 00:51:04.520
It's kind of sad that some of them didn't make the cut.


00:51:04.520 --> 00:51:07.080
- I know, I think so, for sure.


00:51:07.080 --> 00:51:07.920
This is fine.


00:51:07.920 --> 00:51:09.760
- People definitely need that this is fine


00:51:09.760 --> 00:51:11.460
in the secret santa. - Absolutely.


00:51:11.460 --> 00:51:13.720
- Yeah. - Hi, Brian.


00:51:13.720 --> 00:51:14.920
Is that it for us?


00:51:14.920 --> 00:51:15.760
- I think it is.


00:51:15.760 --> 00:51:17.400
It was a fun episode.


00:51:17.400 --> 00:51:19.160
So thank you, Michael.


00:51:19.160 --> 00:51:20.560
Thank you, Gina. - Absolutely.


00:51:20.560 --> 00:51:21.400
- Thank you.


00:51:21.400 --> 00:51:23.120
- Yep.


00:51:23.120 --> 00:51:23.960
Bye, everyone.

