WEBVTT

00:00:00.001 --> 00:00:03.440
Hello, everybody, and hello, Michael.

00:00:03.440 --> 00:00:04.420
Hello, hello.

00:00:04.420 --> 00:00:08.660
I'm excited to get through some exciting topics today.

00:00:08.660 --> 00:00:10.900
Yeah, exciting. We'll make it fast.

00:00:10.900 --> 00:00:11.420
Okay.

00:00:11.420 --> 00:00:13.720
Hello, and welcome to Python.

00:00:13.720 --> 00:00:14.440
Huh?

00:00:14.440 --> 00:00:16.800
Sorry, Brian. Didn't mean to cut you off there.

00:00:16.800 --> 00:00:17.520
Do it again. Do it again.

00:00:17.520 --> 00:00:20.400
Hello, and welcome to Python Bytes,

00:00:20.400 --> 00:00:23.560
where we deliver Python news and headlines directly to your earbuds.

00:00:23.560 --> 00:00:27.880
This is episode 395, recorded August 6th,

00:00:27.880 --> 00:00:28.860
and I am Brian Hawken.

00:00:29.820 --> 00:00:31.120
And I'm Michael Kennedy.

00:00:31.120 --> 00:00:33.820
And it is way too hot still.

00:00:33.820 --> 00:00:35.720
I thought we were going to be done with the heat by now,

00:00:35.720 --> 00:00:37.020
but it's crazy.

00:00:37.020 --> 00:00:39.860
It is August.

00:00:39.860 --> 00:00:42.960
This week's episode is sponsored by us,

00:00:42.960 --> 00:00:45.560
so please check out the offerings we have.

00:00:45.560 --> 00:00:48.940
We've got courses at both Talk Python and at Python Test,

00:00:48.940 --> 00:00:52.300
and we've got Patreon supporters.

00:00:52.300 --> 00:00:54.000
We don't shout out to them much,

00:00:54.000 --> 00:00:56.440
but we do appreciate Patreon supporters, so thank you.

00:00:56.440 --> 00:00:58.780
If you'd like to connect with us,

00:00:58.780 --> 00:01:00.040
we're all on FostersOn,

00:01:00.040 --> 00:01:01.880
at mkennedy,

00:01:01.880 --> 00:01:02.780
at Brian Hawken,

00:01:02.780 --> 00:01:03.940
and at Python Bytes.

00:01:03.940 --> 00:01:05.100
But, of course,

00:01:05.100 --> 00:01:06.300
those links are in the show notes.

00:01:06.300 --> 00:01:11.060
And if you're listening to us later than Tuesday at Pacific Time,

00:01:11.060 --> 00:01:11.740
10 o'clock,

00:01:12.240 --> 00:01:16.160
you can catch us either on podcast,

00:01:16.160 --> 00:01:20.200
but also you can watch live if you ever want to do that.

00:01:20.200 --> 00:01:23.480
Usually Tuesdays at 10 a.m. Pacific Time,

00:01:23.480 --> 00:01:25.740
and we appreciate that.

00:01:25.740 --> 00:01:26.200
And also,

00:01:26.200 --> 00:01:32.100
really appreciate everybody signing up for the show notes email.

00:01:32.800 --> 00:01:34.160
That's been going really well,

00:01:34.160 --> 00:01:35.200
and it grows every week,

00:01:35.200 --> 00:01:37.320
and we are going to do a giveaway.

00:01:37.320 --> 00:01:40.600
We haven't met our milestone that we're looking for yet,

00:01:40.600 --> 00:01:43.680
but we'd love to give out some free stuff to people.

00:01:43.680 --> 00:01:45.180
So sign up for that.

00:01:45.180 --> 00:01:45.780
Brian,

00:01:45.780 --> 00:01:47.180
let me motivate some folks.

00:01:47.180 --> 00:01:48.360
13.

00:01:48.360 --> 00:01:50.140
That's how many we need.

00:01:50.140 --> 00:01:50.720
13 more,

00:01:50.720 --> 00:01:51.360
and we're doing our giveaway.

00:01:51.940 --> 00:01:52.480
All right.

00:01:52.480 --> 00:01:52.940
Okay.

00:01:52.940 --> 00:01:54.240
We just need 13 more people.

00:01:54.240 --> 00:01:57.680
So get on that.

00:01:57.680 --> 00:02:00.800
What do you have for us first,

00:02:00.800 --> 00:02:01.040
Michael?

00:02:01.040 --> 00:02:01.580
Well,

00:02:01.580 --> 00:02:05.300
you know what I really like about that giveaway is that it's totally free.

00:02:05.300 --> 00:02:07.880
As in free threaded Python.

00:02:07.880 --> 00:02:08.320
Let's go.

00:02:08.320 --> 00:02:12.780
So last time we talked about some of the,

00:02:12.780 --> 00:02:14.600
remember we talked about,

00:02:14.600 --> 00:02:15.760
I think it was Simon Willison,

00:02:15.760 --> 00:02:17.060
hopefully the attribution is correct,

00:02:17.060 --> 00:02:20.460
about installing how there's a binary installer

00:02:20.460 --> 00:02:22.680
for free threaded Python.

00:02:22.680 --> 00:02:23.200
Yeah.

00:02:23.200 --> 00:02:23.960
Right.

00:02:23.960 --> 00:02:25.000
Well,

00:02:25.000 --> 00:02:26.400
in there,

00:02:26.400 --> 00:02:28.160
I think he was linking to,

00:02:28.160 --> 00:02:31.760
but certainly I talked to Stan Siebert from Anaconda,

00:02:31.760 --> 00:02:34.500
and that's coming out in Otock Python shortly,

00:02:34.500 --> 00:02:35.940
and he pointed out

00:02:35.940 --> 00:02:40.820
py-free-threading.github.io,

00:02:40.820 --> 00:02:45.440
which is a website that tracks,

00:02:45.440 --> 00:02:48.020
gives you some advice on how to create your package

00:02:48.020 --> 00:02:50.300
or update your package so that it works.

00:02:50.300 --> 00:02:52.220
It works in free threaded Python,

00:02:52.220 --> 00:02:52.920
but also,

00:02:52.920 --> 00:02:53.620
most importantly,

00:02:53.620 --> 00:02:57.260
it has a status tracker for popular packages.

00:02:57.260 --> 00:02:59.040
So you can look and see,

00:02:59.040 --> 00:03:02.020
are there wheels for free threaded Python?

00:03:02.020 --> 00:03:03.620
Because apparently,

00:03:03.620 --> 00:03:04.660
did you know that?

00:03:04.660 --> 00:03:05.720
There's special wheels,

00:03:05.720 --> 00:03:07.060
like you could have wheels for Linux,

00:03:07.060 --> 00:03:09.900
wheels for macOS Intel version,

00:03:09.900 --> 00:03:13.560
wheels for macOS ARM version,

00:03:13.720 --> 00:03:16.720
but there's also specific wheels for free threaded Python.

00:03:16.720 --> 00:03:19.280
So that's interesting.

00:03:19.280 --> 00:03:22.440
Maybe you have different compiler flags

00:03:22.440 --> 00:03:27.720
with threading primitives built in versus skipped

00:03:27.720 --> 00:03:30.160
in that version or something along those lines.

00:03:30.160 --> 00:03:31.140
Anyway,

00:03:31.140 --> 00:03:33.280
so it has a compatibility tracker for that.

00:03:33.280 --> 00:03:34.600
It talks about installing it,

00:03:34.600 --> 00:03:36.200
which really means installing it on Linux.

00:03:36.300 --> 00:03:36.520
That's really,

00:03:36.520 --> 00:03:36.840
I think,

00:03:36.840 --> 00:03:37.680
all it covers.

00:03:37.680 --> 00:03:39.860
But yeah,

00:03:39.860 --> 00:03:41.840
it gives you some more examples,

00:03:41.840 --> 00:03:43.880
how to verify that you're running free threaded Python,

00:03:43.880 --> 00:03:44.660
and so on.

00:03:44.660 --> 00:03:45.520
Yeah,

00:03:45.520 --> 00:03:46.720
what I'm really excited about here

00:03:46.720 --> 00:03:48.640
is the last two bullets at the top

00:03:48.640 --> 00:03:50.980
talking about setting up CI

00:03:50.980 --> 00:03:52.780
and finding,

00:03:52.780 --> 00:03:53.220
testing,

00:03:53.220 --> 00:03:55.100
and debugging currency issues.

00:03:55.100 --> 00:03:55.780
Yeah,

00:03:55.780 --> 00:03:56.220
yeah,

00:03:56.220 --> 00:03:56.680
for sure.

00:03:56.680 --> 00:03:58.320
That didn't really occur to me,

00:03:58.320 --> 00:03:58.500
Dale,

00:03:58.500 --> 00:03:59.400
you just brought it up,

00:03:59.400 --> 00:04:01.900
that if you have a popular package

00:04:01.900 --> 00:04:03.680
or even a semi-popular package

00:04:03.680 --> 00:04:05.020
or one you rely on,

00:04:05.020 --> 00:04:08.340
you probably want to start testing it

00:04:08.340 --> 00:04:10.420
to make sure that it's not going to break in

00:04:10.420 --> 00:04:11.740
free threaded Python.

00:04:11.740 --> 00:04:13.220
Indeed.

00:04:13.220 --> 00:04:14.040
All right,

00:04:14.040 --> 00:04:16.060
so let's look at the compatibility real quick here.

00:04:16.060 --> 00:04:17.220
Compatibility.

00:04:17.220 --> 00:04:17.680
It says,

00:04:17.680 --> 00:04:19.400
this page,

00:04:19.400 --> 00:04:20.480
and you can see it's got a big,

00:04:20.620 --> 00:04:21.940
grid of,

00:04:21.940 --> 00:04:23.140
of statuses,

00:04:23.140 --> 00:04:23.560
basically.

00:04:23.560 --> 00:04:24.920
It's not that long,

00:04:24.920 --> 00:04:26.380
so if you have a package

00:04:26.380 --> 00:04:28.220
and you expect it to work with

00:04:28.220 --> 00:04:30.420
free threaded Python and stuff,

00:04:30.420 --> 00:04:31.220
submit it here

00:04:31.220 --> 00:04:32.680
so we can see its status.

00:04:32.680 --> 00:04:33.340
Anyway,

00:04:33.340 --> 00:04:34.420
the page says,

00:04:34.420 --> 00:04:37.380
this page tracks the status of packages

00:04:37.380 --> 00:04:39.120
for which we're aware of

00:04:39.120 --> 00:04:42.080
active work on free threaded Python support.

00:04:42.080 --> 00:04:45.140
It contains pages with extension modules

00:04:45.140 --> 00:04:47.080
as well as build tools and packages

00:04:47.080 --> 00:04:48.560
that need code specifically

00:04:48.560 --> 00:04:50.740
directly to support free threaded.

00:04:50.740 --> 00:04:52.600
Now,

00:04:52.600 --> 00:04:53.500
it also says,

00:04:53.500 --> 00:04:55.640
note that pure Python code works

00:04:55.640 --> 00:04:57.800
without changes by design,

00:04:57.800 --> 00:05:00.520
so it does not track pure Python packages.

00:05:00.520 --> 00:05:01.360
Oh,

00:05:01.360 --> 00:05:01.580
okay.

00:05:02.580 --> 00:05:03.340
two things.

00:05:03.340 --> 00:05:03.980
One,

00:05:03.980 --> 00:05:05.960
so if you have a pure Python package,

00:05:05.960 --> 00:05:06.840
don't try to submit it.

00:05:06.840 --> 00:05:07.000
Hey,

00:05:07.000 --> 00:05:07.700
here's our status.

00:05:07.700 --> 00:05:08.060
It's like,

00:05:08.060 --> 00:05:08.360
well,

00:05:08.360 --> 00:05:09.080
you already got that,

00:05:09.080 --> 00:05:10.860
so you can just probably do any

00:05:10.860 --> 00:05:12.320
for your platform

00:05:12.320 --> 00:05:13.320
and your wheel

00:05:13.320 --> 00:05:13.980
and you're good to go.

00:05:15.740 --> 00:05:22.980
but there's a difference between executes and works.

00:05:22.980 --> 00:05:24.240
In my mind,

00:05:24.240 --> 00:05:26.520
it says pure Python code works without changes.

00:05:26.520 --> 00:05:31.340
Pure Python code will run in free threaded mode

00:05:31.340 --> 00:05:33.800
without any changes by design.

00:05:34.020 --> 00:05:38.240
It's kind of like saying it compiles in a static language,

00:05:38.240 --> 00:05:39.440
so it's fine.

00:05:39.440 --> 00:05:44.100
It may be built to have a bunch of race conditions,

00:05:44.100 --> 00:05:47.880
but it doesn't need a special wheel.

00:05:47.880 --> 00:05:48.880
You know what I mean?

00:05:48.880 --> 00:05:51.320
So don't take too much confidence

00:05:51.320 --> 00:05:53.340
that it's just pure Python,

00:05:53.340 --> 00:05:53.880
right?

00:05:54.140 --> 00:05:56.720
Your pure Python code can have five steps,

00:05:56.720 --> 00:06:00.560
four of which have invalid state,

00:06:00.560 --> 00:06:02.520
and if those things run in parallel

00:06:02.520 --> 00:06:04.420
and one of them observes that state

00:06:04.420 --> 00:06:06.420
while the other one is halfway through its steps,

00:06:06.420 --> 00:06:08.100
you're going to have a bad time,

00:06:08.100 --> 00:06:09.600
even if it's pure Python,

00:06:09.600 --> 00:06:10.780
even though it executes.

00:06:10.780 --> 00:06:13.960
So just a bit of a statement

00:06:13.960 --> 00:06:17.120
if I'm threading there in general, right?

00:06:17.120 --> 00:06:19.160
But if you look through here,

00:06:19.160 --> 00:06:20.320
there's some interesting things, Brian.

00:06:20.320 --> 00:06:21.000
So for example,

00:06:21.000 --> 00:06:23.160
CI build will is tested in CI,

00:06:23.160 --> 00:06:24.820
has a PyPI release,

00:06:24.820 --> 00:06:26.140
so you can pip install it.

00:06:26.140 --> 00:06:29.940
It talks about which version first supports it,

00:06:29.940 --> 00:06:31.480
but it does not have nightly wheels

00:06:31.480 --> 00:06:33.540
or a nightly wheel link.

00:06:33.540 --> 00:06:35.020
On the other hand,

00:06:35.020 --> 00:06:37.040
CMake only has PyPI releases.

00:06:37.040 --> 00:06:39.420
Contour.py only is tested in CI,

00:06:39.420 --> 00:06:40.880
but is not available on PyPI.

00:06:40.880 --> 00:06:43.680
And it talks about which platforms

00:06:43.680 --> 00:06:44.840
have nightly wheels

00:06:44.840 --> 00:06:46.700
and then their links and so on.

00:06:46.700 --> 00:06:47.800
So you can go through this list.

00:06:47.800 --> 00:06:50.800
For example, NumPy is tested,

00:06:50.800 --> 00:06:52.920
but there's no release of NumPy

00:06:52.920 --> 00:06:53.600
at the moment.

00:06:53.600 --> 00:06:55.200
But there are nightly wheels

00:06:55.200 --> 00:06:56.320
that theoretically,

00:06:56.320 --> 00:06:57.600
I guess you could use if you want.

00:06:57.600 --> 00:07:00.100
Pip install from there.

00:07:00.100 --> 00:07:02.320
We've got pandas, same status.

00:07:02.320 --> 00:07:03.280
A lot of them are,

00:07:03.280 --> 00:07:04.520
that's the most common.

00:07:04.520 --> 00:07:05.580
They're tested in CI,

00:07:05.580 --> 00:07:08.580
but they're not yet pushed to PyPI,

00:07:08.580 --> 00:07:09.520
which is fair.

00:07:09.520 --> 00:07:09.900
You know,

00:07:09.900 --> 00:07:12.640
there is no release of Python

00:07:12.640 --> 00:07:14.760
that has free threading,

00:07:14.760 --> 00:07:16.260
officially.

00:07:16.660 --> 00:07:18.300
There's only betas, right?

00:07:18.300 --> 00:07:18.660
So,

00:07:18.660 --> 00:07:21.100
the fact that they're not just pushing

00:07:21.100 --> 00:07:22.440
this stuff out to PyPIs.

00:07:22.440 --> 00:07:24.300
Thank you.

00:07:24.300 --> 00:07:25.440
Also,

00:07:25.440 --> 00:07:25.920
interesting,

00:07:25.920 --> 00:07:26.540
notice here,

00:07:26.540 --> 00:07:26.840
Brian,

00:07:26.840 --> 00:07:27.300
there's pip.

00:07:29.240 --> 00:07:30.220
even though,

00:07:30.220 --> 00:07:31.680
it's pip pure Python?

00:07:31.680 --> 00:07:32.320
I don't know.

00:07:32.320 --> 00:07:33.280
I thought so.

00:07:33.280 --> 00:07:34.820
But check this out.

00:07:34.820 --> 00:07:36.700
So if you go over to the installing section,

00:07:36.700 --> 00:07:37.060
it says,

00:07:37.060 --> 00:07:37.400
okay,

00:07:37.400 --> 00:07:38.020
basically,

00:07:38.020 --> 00:07:39.740
you can get some binary installers

00:07:39.740 --> 00:07:41.600
off of pypi.org,

00:07:41.940 --> 00:07:44.700
or here's a bunch of talk

00:07:44.700 --> 00:07:46.140
about how to set it up on Linux,

00:07:46.140 --> 00:07:48.080
how to set it up on Docker for Linux

00:07:48.080 --> 00:07:49.660
and build it from source.

00:07:49.660 --> 00:07:51.920
If you run it,

00:07:51.920 --> 00:07:52.300
it says,

00:07:52.300 --> 00:07:53.220
here's how you run

00:07:53.220 --> 00:07:54.720
with the guild disabled.

00:07:54.720 --> 00:07:56.460
So if you run

00:07:56.460 --> 00:07:58.660
with Python dash,

00:07:58.660 --> 00:07:59.280
capital V,

00:07:59.280 --> 00:07:59.880
capital V,

00:07:59.880 --> 00:08:01.080
you'll see,

00:08:01.080 --> 00:08:02.420
it'll start and say,

00:08:02.420 --> 00:08:03.100
Python,

00:08:03.100 --> 00:08:04.060
such and such,

00:08:04.060 --> 00:08:06.700
experimental free threading build.

00:08:06.700 --> 00:08:09.480
Right?

00:08:09.480 --> 00:08:10.620
Sounds so lovely.

00:08:10.980 --> 00:08:12.080
you know.

00:08:12.080 --> 00:08:13.000
Yes,

00:08:13.000 --> 00:08:13.380
it does.

00:08:13.380 --> 00:08:14.900
You're living so far

00:08:14.900 --> 00:08:15.340
in the future,

00:08:15.340 --> 00:08:15.680
aren't you?

00:08:15.680 --> 00:08:16.580
And then here you can,

00:08:16.580 --> 00:08:17.700
there's a little one-liner

00:08:17.700 --> 00:08:18.320
you can execute

00:08:18.320 --> 00:08:19.880
to see that it,

00:08:19.880 --> 00:08:20.980
that it's working.

00:08:20.980 --> 00:08:22.420
Yep.

00:08:22.420 --> 00:08:23.220
Talks about

00:08:23.220 --> 00:08:25.060
porting extensions modules

00:08:25.060 --> 00:08:25.820
to free threading

00:08:25.820 --> 00:08:26.940
and here you go,

00:08:26.940 --> 00:08:27.220
Brian.

00:08:27.220 --> 00:08:29.040
GitHub actions.

00:08:29.040 --> 00:08:29.920
Let's go.

00:08:29.920 --> 00:08:30.780
It talks about how to set

00:08:30.780 --> 00:08:31.460
the GitHub actions

00:08:31.460 --> 00:08:33.060
and a bunch of code

00:08:33.060 --> 00:08:34.460
on how to actually test

00:08:34.460 --> 00:08:36.540
and debug

00:08:36.540 --> 00:08:38.060
all the things.

00:08:38.060 --> 00:08:39.260
I love that.

00:08:39.260 --> 00:08:40.420
How to set up CI.

00:08:40.660 --> 00:08:41.100
And by that,

00:08:41.100 --> 00:08:43.160
we mean how to set up

00:08:43.160 --> 00:08:43.900
GitHub actions.

00:08:43.900 --> 00:08:46.340
It's fair enough

00:08:46.340 --> 00:08:46.860
at this point.

00:08:46.860 --> 00:08:48.400
It is consolidating

00:08:48.400 --> 00:08:48.740
a bit,

00:08:48.740 --> 00:08:49.120
isn't it?

00:08:49.120 --> 00:08:50.080
It is,

00:08:50.080 --> 00:08:50.420
yes.

00:08:50.420 --> 00:08:52.000
All right.

00:08:52.000 --> 00:08:52.380
So,

00:08:52.380 --> 00:08:53.580
if you are interested

00:08:53.580 --> 00:08:55.340
in free threaded Python,

00:08:55.340 --> 00:08:56.620
a.k.a.

00:08:56.620 --> 00:08:58.600
the one that has had

00:08:58.600 --> 00:09:00.440
the Gilectomy done to it

00:09:00.440 --> 00:09:02.240
by Sam Gross and crew,

00:09:02.240 --> 00:09:04.340
this is a good resource

00:09:04.340 --> 00:09:04.780
to have around.

00:09:05.060 --> 00:09:06.080
And if you have a package

00:09:06.080 --> 00:09:06.840
that you think

00:09:06.840 --> 00:09:07.800
might need some special

00:09:07.800 --> 00:09:08.960
treatment to work

00:09:08.960 --> 00:09:09.480
in that space

00:09:09.480 --> 00:09:10.540
and you have intentions

00:09:10.540 --> 00:09:12.420
to potentially support that,

00:09:12.420 --> 00:09:13.100
you know,

00:09:13.100 --> 00:09:14.260
let these folks know about it.

00:09:14.260 --> 00:09:14.960
You can see their GitHub

00:09:14.960 --> 00:09:15.800
in the top right.

00:09:15.800 --> 00:09:16.780
I'm sure you can submit

00:09:16.780 --> 00:09:17.720
an issue or something there.

00:09:17.720 --> 00:09:19.680
Yep.

00:09:19.680 --> 00:09:20.780
Nice.

00:09:21.340 --> 00:09:21.640
Well,

00:09:21.640 --> 00:09:24.640
if you need support,

00:09:24.640 --> 00:09:26.940
change your transition here,

00:09:26.940 --> 00:09:28.320
supporting,

00:09:28.320 --> 00:09:29.720
if you want to support

00:09:29.720 --> 00:09:30.820
free threading,

00:09:30.820 --> 00:09:31.060
great,

00:09:31.060 --> 00:09:31.940
but also,

00:09:31.940 --> 00:09:33.720
we want to be a supportive

00:09:33.720 --> 00:09:34.620
Python community.

00:09:35.420 --> 00:09:35.860
so,

00:09:35.860 --> 00:09:37.620
I did it.

00:09:37.620 --> 00:09:38.720
A nice transition there

00:09:38.720 --> 00:09:41.140
to Python's supportive

00:09:41.140 --> 00:09:42.420
and welcoming environment

00:09:42.420 --> 00:09:43.800
is tightly coupled

00:09:43.800 --> 00:09:44.660
to its progress.

00:09:44.660 --> 00:09:45.940
This is a post

00:09:45.940 --> 00:09:48.120
on the Python Software

00:09:48.120 --> 00:09:49.560
Foundation blog

00:09:49.560 --> 00:09:51.420
and it is

00:09:51.420 --> 00:09:52.860
very nice.

00:09:52.860 --> 00:09:54.060
I think that everybody

00:09:54.060 --> 00:09:54.880
should go read this

00:09:54.880 --> 00:09:56.960
and the,

00:09:56.960 --> 00:09:57.800
one of the reasons

00:09:57.800 --> 00:09:59.020
that indicate

00:09:59.020 --> 00:09:59.940
that maybe this is

00:09:59.940 --> 00:10:00.680
kind of important

00:10:00.680 --> 00:10:03.000
is this is signed

00:10:03.000 --> 00:10:03.620
by

00:10:03.620 --> 00:10:05.820
a whole bunch

00:10:05.820 --> 00:10:06.240
of people.

00:10:06.240 --> 00:10:07.020
Deb Nicholson,

00:10:07.020 --> 00:10:07.680
Don Wages,

00:10:07.680 --> 00:10:09.540
Tanya,

00:10:09.540 --> 00:10:10.580
Quan Han,

00:10:10.580 --> 00:10:11.620
Kushal,

00:10:11.620 --> 00:10:12.320
Georgie,

00:10:12.320 --> 00:10:13.320
Janice,

00:10:13.320 --> 00:10:14.140
Christian,

00:10:14.140 --> 00:10:15.780
Christopher,

00:10:15.780 --> 00:10:16.680
Denny,

00:10:16.680 --> 00:10:17.940
and

00:10:17.940 --> 00:10:18.880
Chook,

00:10:18.880 --> 00:10:20.080
and Simon Wilson.

00:10:20.080 --> 00:10:21.680
Lots of signers

00:10:21.680 --> 00:10:22.080
of this.

00:10:22.080 --> 00:10:22.780
So,

00:10:22.780 --> 00:10:23.440
what is this?

00:10:23.440 --> 00:10:24.920
I want to highlight

00:10:24.920 --> 00:10:25.760
a couple,

00:10:25.760 --> 00:10:27.760
a couple statements

00:10:27.760 --> 00:10:28.140
here.

00:10:28.140 --> 00:10:31.060
Python is popular

00:10:31.060 --> 00:10:31.880
as it is,

00:10:31.880 --> 00:10:32.880
is as popular

00:10:32.880 --> 00:10:34.060
as it is today

00:10:34.060 --> 00:10:34.800
because we have

00:10:34.800 --> 00:10:36.440
gone above and beyond

00:10:36.440 --> 00:10:37.180
to make this

00:10:37.180 --> 00:10:38.260
a welcoming community.

00:10:38.260 --> 00:10:39.120
Being a friendly

00:10:39.120 --> 00:10:40.120
and supportive community

00:10:40.120 --> 00:10:41.480
is part of how we

00:10:41.480 --> 00:10:42.480
are perceived

00:10:42.480 --> 00:10:43.700
by a wider world

00:10:43.700 --> 00:10:45.120
and is integral

00:10:45.120 --> 00:10:45.880
to the wide

00:10:45.880 --> 00:10:47.100
popularity of Python.

00:10:47.100 --> 00:10:49.580
I totally believe

00:10:49.580 --> 00:10:50.860
this.

00:10:50.860 --> 00:10:51.880
We even won,

00:10:51.880 --> 00:10:52.400
apparently,

00:10:52.400 --> 00:10:53.420
won a wonderfully

00:10:53.420 --> 00:10:54.300
welcoming award

00:10:54.300 --> 00:10:55.280
at last year's

00:10:55.280 --> 00:10:56.060
GitHub Universe

00:10:56.060 --> 00:10:57.620
and it's often

00:10:57.620 --> 00:10:58.520
referred to as

00:10:58.520 --> 00:10:58.840
like,

00:10:58.840 --> 00:10:59.840
come for the language,

00:10:59.840 --> 00:11:00.960
stay for the community

00:11:00.960 --> 00:11:01.660
sort of a thing.

00:11:02.080 --> 00:11:02.560
however,

00:11:02.560 --> 00:11:04.280
with the recent

00:11:04.280 --> 00:11:05.660
bylaws changes,

00:11:05.660 --> 00:11:06.960
there was a lot

00:11:06.960 --> 00:11:07.940
of drama

00:11:07.940 --> 00:11:09.160
on the mailing list.

00:11:09.160 --> 00:11:11.120
So much drama

00:11:11.120 --> 00:11:12.680
that we had,

00:11:12.680 --> 00:11:14.360
even though

00:11:14.360 --> 00:11:15.280
there were only

00:11:15.280 --> 00:11:17.240
a thousand people

00:11:17.240 --> 00:11:18.040
approximately

00:11:18.040 --> 00:11:18.780
subscribed

00:11:18.780 --> 00:11:20.580
to a

00:11:20.580 --> 00:11:21.700
PSF vote

00:11:21.700 --> 00:11:22.820
mailing list,

00:11:22.820 --> 00:11:24.060
45 of those

00:11:24.060 --> 00:11:24.880
people dropped out.

00:11:25.320 --> 00:11:26.520
I think probably

00:11:26.520 --> 00:11:27.420
because of the

00:11:27.420 --> 00:11:28.040
toxicity

00:11:28.040 --> 00:11:28.900
that was going

00:11:28.900 --> 00:11:29.440
on on that

00:11:29.440 --> 00:11:30.080
mailing list.

00:11:30.080 --> 00:11:30.880
So,

00:11:30.880 --> 00:11:31.740
this is a good

00:11:31.740 --> 00:11:32.640
reminder that

00:11:32.640 --> 00:11:33.700
we are a welcoming

00:11:33.700 --> 00:11:34.640
community and we

00:11:34.640 --> 00:11:35.300
want it that way.

00:11:35.300 --> 00:11:37.380
I like another,

00:11:37.380 --> 00:11:37.960
I'm going to hop

00:11:37.960 --> 00:11:38.240
down,

00:11:38.240 --> 00:11:39.100
there's a lot of

00:11:39.100 --> 00:11:40.280
information in history

00:11:40.280 --> 00:11:41.200
if you're curious.

00:11:41.200 --> 00:11:43.500
I like this statement

00:11:43.500 --> 00:11:43.880
here,

00:11:43.880 --> 00:11:45.620
we have a moral

00:11:45.620 --> 00:11:46.760
imperative as one

00:11:46.760 --> 00:11:47.500
of the very best

00:11:47.500 --> 00:11:48.320
places to bring

00:11:48.320 --> 00:11:48.940
new people

00:11:48.940 --> 00:11:49.920
into tech

00:11:49.920 --> 00:11:50.300
and into

00:11:50.300 --> 00:11:50.940
open source

00:11:50.940 --> 00:11:51.540
to keep

00:11:51.540 --> 00:11:52.840
being good

00:11:52.840 --> 00:11:53.680
at welcoming

00:11:53.680 --> 00:11:54.320
new people.

00:11:54.320 --> 00:11:55.520
If we do not

00:11:55.520 --> 00:11:56.560
rise and continue

00:11:56.560 --> 00:11:57.420
to rise every

00:11:57.420 --> 00:11:58.040
day to this

00:11:58.040 --> 00:11:58.440
task,

00:11:58.440 --> 00:11:59.280
then we are not

00:11:59.280 --> 00:12:00.060
fulfilling our

00:12:00.060 --> 00:12:00.660
own mission

00:12:00.660 --> 00:12:04.580
to support

00:12:04.580 --> 00:12:05.320
and facilitate

00:12:05.320 --> 00:12:06.000
the growth

00:12:06.000 --> 00:12:06.880
of a diverse

00:12:06.880 --> 00:12:07.600
and international

00:12:07.600 --> 00:12:09.000
community of

00:12:09.000 --> 00:12:09.900
Python programmers.

00:12:09.900 --> 00:12:11.680
Goes on to

00:12:11.680 --> 00:12:12.380
talk about how

00:12:12.380 --> 00:12:13.400
technical skills

00:12:13.400 --> 00:12:14.720
are a game

00:12:14.720 --> 00:12:15.320
changer for

00:12:15.320 --> 00:12:16.400
people that are

00:12:16.400 --> 00:12:17.220
trying to

00:12:17.220 --> 00:12:18.240
better their

00:12:18.240 --> 00:12:18.680
position,

00:12:18.680 --> 00:12:19.260
try to get a

00:12:19.260 --> 00:12:19.820
better job.

00:12:19.820 --> 00:12:20.720
Python is a

00:12:20.720 --> 00:12:21.260
great way to

00:12:21.260 --> 00:12:22.000
get into tech

00:12:22.000 --> 00:12:22.540
and into

00:12:22.540 --> 00:12:23.760
programming and

00:12:23.760 --> 00:12:24.200
we need to

00:12:24.200 --> 00:12:24.720
make sure that

00:12:24.720 --> 00:12:26.800
that stays a

00:12:26.800 --> 00:12:27.880
great pathway.

00:12:27.880 --> 00:12:28.500
So,

00:12:28.500 --> 00:12:30.040
kind of a

00:12:30.040 --> 00:12:30.700
serious topic

00:12:30.700 --> 00:12:31.220
but it's

00:12:31.220 --> 00:12:32.160
serious to me

00:12:32.160 --> 00:12:32.960
that the

00:12:32.960 --> 00:12:33.540
future of

00:12:33.540 --> 00:12:33.960
programming

00:12:33.960 --> 00:12:35.080
stays with

00:12:35.080 --> 00:12:35.720
this nice

00:12:35.720 --> 00:12:36.520
on-ramp of

00:12:36.520 --> 00:12:37.840
Python and

00:12:37.840 --> 00:12:38.980
we maintain

00:12:38.980 --> 00:12:39.940
this to be a

00:12:39.940 --> 00:12:40.700
good place to

00:12:40.700 --> 00:12:40.860
be.

00:12:40.860 --> 00:12:41.220
So,

00:12:41.220 --> 00:12:42.240
further

00:12:42.240 --> 00:12:42.820
continuing,

00:12:42.820 --> 00:12:43.560
some of the

00:12:43.560 --> 00:12:44.380
consequences of

00:12:44.380 --> 00:12:44.700
some of the

00:12:44.700 --> 00:12:45.560
bad actions that

00:12:45.560 --> 00:12:46.800
happened is that

00:12:46.800 --> 00:12:48.040
the form and

00:12:48.040 --> 00:12:48.800
the mailing list

00:12:48.800 --> 00:12:49.380
and some of the

00:12:49.380 --> 00:12:50.920
other avenues of

00:12:50.920 --> 00:12:52.020
discussion will

00:12:52.020 --> 00:12:52.420
be,

00:12:52.420 --> 00:12:53.160
will be,

00:12:53.160 --> 00:12:55.180
or they've

00:12:55.180 --> 00:12:55.540
turned on

00:12:55.540 --> 00:12:56.740
moderation and

00:12:56.740 --> 00:12:57.240
they're going to

00:12:57.240 --> 00:12:58.000
continue with

00:12:58.000 --> 00:12:59.660
moderating it to

00:12:59.660 --> 00:13:00.240
make sure that

00:13:00.240 --> 00:13:00.900
there is not

00:13:00.900 --> 00:13:01.820
toxic behavior

00:13:01.820 --> 00:13:02.420
going on.

00:13:02.420 --> 00:13:03.660
And I applaud

00:13:03.660 --> 00:13:03.960
that.

00:13:03.960 --> 00:13:04.500
I think that's

00:13:04.500 --> 00:13:04.920
the right thing

00:13:04.920 --> 00:13:05.860
to do with

00:13:05.860 --> 00:13:06.460
something as

00:13:06.460 --> 00:13:07.300
important as

00:13:07.300 --> 00:13:08.660
communication from

00:13:08.660 --> 00:13:09.700
the PSF and

00:13:09.700 --> 00:13:10.400
Python.

00:13:10.760 --> 00:13:14.080
soapbox over.

00:13:14.080 --> 00:13:15.880
Cool.

00:13:15.880 --> 00:13:16.300
Thanks for

00:13:16.300 --> 00:13:16.580
sharing that.

00:13:16.580 --> 00:13:18.120
I do think

00:13:18.120 --> 00:13:18.780
making it

00:13:18.780 --> 00:13:20.740
welcoming to

00:13:20.740 --> 00:13:21.160
new people.

00:13:21.160 --> 00:13:21.560
I think what

00:13:21.560 --> 00:13:22.260
a Python's

00:13:22.260 --> 00:13:23.220
powers,

00:13:23.220 --> 00:13:24.460
superpowers,

00:13:24.460 --> 00:13:25.380
is really that

00:13:25.380 --> 00:13:27.140
people come and

00:13:27.140 --> 00:13:27.640
they don't feel

00:13:27.640 --> 00:13:28.140
intimidated.

00:13:28.140 --> 00:13:29.580
Right?

00:13:29.580 --> 00:13:30.540
They don't

00:13:30.540 --> 00:13:31.220
consider themselves

00:13:31.220 --> 00:13:32.500
programmers and

00:13:32.500 --> 00:13:33.200
they kind of

00:13:33.200 --> 00:13:34.540
accidentally slip

00:13:34.540 --> 00:13:34.900
into like,

00:13:34.900 --> 00:13:36.040
wait, I think I

00:13:36.040 --> 00:13:36.640
just published a

00:13:36.640 --> 00:13:36.980
package.

00:13:36.980 --> 00:13:37.640
Does that make me a

00:13:37.640 --> 00:13:37.960
programmer?

00:13:38.140 --> 00:13:38.780
like six

00:13:38.780 --> 00:13:39.240
months later?

00:13:39.240 --> 00:13:42.060
And having the

00:13:42.060 --> 00:13:42.880
community being

00:13:42.880 --> 00:13:44.160
welcoming, not

00:13:44.160 --> 00:13:45.460
just the syntax

00:13:45.460 --> 00:13:46.700
and the tooling

00:13:46.700 --> 00:13:48.220
counts.

00:13:48.220 --> 00:13:49.020
Yeah.

00:13:49.020 --> 00:13:50.600
I see a lot of

00:13:50.600 --> 00:13:51.500
times people will,

00:13:51.500 --> 00:13:52.480
like a lot of

00:13:52.480 --> 00:13:53.600
Python goers,

00:13:53.600 --> 00:13:54.880
for example,

00:13:54.880 --> 00:13:57.320
will bring along

00:13:57.320 --> 00:13:58.160
one of their

00:13:58.160 --> 00:13:59.480
kids, even

00:13:59.480 --> 00:13:59.880
though they've

00:13:59.880 --> 00:14:00.400
been going for

00:14:00.400 --> 00:14:00.740
a while,

00:14:00.740 --> 00:14:01.240
bring one of

00:14:01.240 --> 00:14:01.840
their kids and

00:14:01.840 --> 00:14:02.880
having the kids

00:14:02.880 --> 00:14:03.620
be able to go

00:14:03.620 --> 00:14:05.360
off and learn

00:14:05.360 --> 00:14:07.020
also and realize

00:14:07.020 --> 00:14:07.520
that, hey,

00:14:07.560 --> 00:14:08.180
this is kind

00:14:08.180 --> 00:14:08.540
of a neat

00:14:08.540 --> 00:14:09.060
place.

00:14:09.060 --> 00:14:09.660
We're probably

00:14:09.660 --> 00:14:10.840
getting software

00:14:10.840 --> 00:14:12.380
engineers from

00:14:12.380 --> 00:14:12.860
the community

00:14:12.860 --> 00:14:13.740
just because of

00:14:13.740 --> 00:14:14.800
this that maybe

00:14:14.800 --> 00:14:15.620
would have not

00:14:15.620 --> 00:14:16.400
considered it.

00:14:16.400 --> 00:14:17.140
All right,

00:14:17.140 --> 00:14:17.980
planting the seed

00:14:17.980 --> 00:14:18.240
there.

00:14:18.240 --> 00:14:20.880
So, all right.

00:14:20.880 --> 00:14:22.920
You've got some

00:14:22.920 --> 00:14:23.620
good news for us,

00:14:23.620 --> 00:14:23.880
don't you?

00:14:23.880 --> 00:14:24.580
I do.

00:14:24.580 --> 00:14:25.140
Well, I have,

00:14:25.140 --> 00:14:26.140
last week I have

00:14:26.140 --> 00:14:26.900
planted a seed

00:14:26.900 --> 00:14:27.960
and this week it

00:14:27.960 --> 00:14:29.260
has grown.

00:14:29.260 --> 00:14:32.200
So, I was

00:14:32.200 --> 00:14:33.180
going to cover a

00:14:33.180 --> 00:14:34.460
new topic, but I

00:14:34.460 --> 00:14:35.020
want to have more

00:14:35.020 --> 00:14:36.540
time to digest

00:14:36.540 --> 00:14:38.480
it than I've

00:14:38.480 --> 00:14:38.920
had.

00:14:38.920 --> 00:14:40.500
So, let's, I

00:14:40.500 --> 00:14:40.960
want to do a

00:14:40.960 --> 00:14:41.760
follow-up instead,

00:14:41.760 --> 00:14:42.000
right?

00:14:42.000 --> 00:14:42.980
So, remember last

00:14:42.980 --> 00:14:43.600
week I talked

00:14:43.600 --> 00:14:44.660
about Uptime

00:14:44.660 --> 00:14:45.980
Kuma, which is a

00:14:45.980 --> 00:14:47.040
fancy self-hosted

00:14:47.040 --> 00:14:48.200
monitoring tool and

00:14:48.200 --> 00:14:49.940
a lot of folks

00:14:49.940 --> 00:14:52.180
chimed in over on

00:14:52.180 --> 00:14:52.860
Mastodon saying,

00:14:52.860 --> 00:14:54.020
you've been using

00:14:54.020 --> 00:14:54.640
this for years,

00:14:54.640 --> 00:14:55.460
it's super awesome,

00:14:55.460 --> 00:14:56.600
and so on.

00:14:56.600 --> 00:14:57.400
I said, hey,

00:14:57.400 --> 00:14:58.320
maybe I'll play

00:14:58.320 --> 00:14:58.780
with this, that

00:14:58.780 --> 00:14:59.200
would be cool,

00:14:59.200 --> 00:14:59.420
right?

00:14:59.760 --> 00:14:59.980
Yeah.

00:14:59.980 --> 00:15:01.880
Well, guess

00:15:01.880 --> 00:15:02.060
what?

00:15:02.060 --> 00:15:02.640
If you go to

00:15:02.640 --> 00:15:03.660
Python Bytes and

00:15:03.660 --> 00:15:04.500
you scroll to the

00:15:04.500 --> 00:15:06.100
bottom, server

00:15:06.100 --> 00:15:08.240
status, right

00:15:08.240 --> 00:15:08.660
there, and you

00:15:08.660 --> 00:15:10.280
click on it, it

00:15:10.280 --> 00:15:10.980
shows you the

00:15:10.980 --> 00:15:11.700
Python Bytes

00:15:11.700 --> 00:15:12.600
operational status.

00:15:12.600 --> 00:15:13.420
What is the

00:15:13.420 --> 00:15:13.980
status of the

00:15:13.980 --> 00:15:14.420
website?

00:15:14.420 --> 00:15:15.860
And all these

00:15:15.860 --> 00:15:16.640
little green dots,

00:15:16.640 --> 00:15:17.320
each one of these

00:15:17.320 --> 00:15:18.940
are a sample of

00:15:18.940 --> 00:15:19.920
either up, down,

00:15:19.920 --> 00:15:20.580
partially up,

00:15:20.580 --> 00:15:21.440
partially down,

00:15:21.440 --> 00:15:22.380
I guess it was

00:15:22.380 --> 00:15:23.040
the same thing.

00:15:23.040 --> 00:15:25.160
But, so you

00:15:25.160 --> 00:15:25.740
could see those

00:15:25.740 --> 00:15:26.480
sort of like over

00:15:26.480 --> 00:15:26.740
time.

00:15:26.740 --> 00:15:27.400
I wish I could

00:15:27.400 --> 00:15:28.200
control how much

00:15:28.200 --> 00:15:28.880
time this is,

00:15:28.880 --> 00:15:29.960
but this is

00:15:29.960 --> 00:15:30.680
basically just

00:15:30.680 --> 00:15:31.300
the samples,

00:15:31.300 --> 00:15:32.500
some number of

00:15:32.500 --> 00:15:33.080
recent samples,

00:15:33.080 --> 00:15:33.740
and I think I've

00:15:33.740 --> 00:15:34.440
got it set to

00:15:34.440 --> 00:15:36.900
every minute or

00:15:36.900 --> 00:15:37.460
two minute it

00:15:37.460 --> 00:15:38.440
checks, and if it

00:15:38.440 --> 00:15:39.060
goes wrong, it'll

00:15:39.060 --> 00:15:39.640
send me an email,

00:15:39.640 --> 00:15:40.260
something like that.

00:15:40.260 --> 00:15:40.740
But you can also

00:15:40.740 --> 00:15:42.620
see this 100%

00:15:42.620 --> 00:15:44.140
of time, it's

00:15:44.140 --> 00:15:44.900
basically since I

00:15:44.900 --> 00:15:45.540
set it up, but I

00:15:45.540 --> 00:15:46.740
think that's 30

00:15:46.740 --> 00:15:47.540
days or something.

00:15:47.540 --> 00:15:48.340
I'm not sure

00:15:48.340 --> 00:15:49.240
exactly the window

00:15:49.240 --> 00:15:50.860
of that, but that

00:15:50.860 --> 00:15:52.440
is more, that

00:15:52.440 --> 00:15:53.140
tracks more of

00:15:53.140 --> 00:15:53.220
it.

00:15:53.220 --> 00:15:54.220
But anyway, we've

00:15:54.220 --> 00:15:54.860
got the Python

00:15:54.860 --> 00:15:55.920
Bytes web, and

00:15:55.920 --> 00:15:56.240
you can see its

00:15:56.240 --> 00:15:57.560
certificate expires in

00:15:57.560 --> 00:15:58.400
82 days, so

00:15:58.400 --> 00:15:59.040
that's good, plenty

00:15:59.040 --> 00:15:59.440
of time.

00:15:59.440 --> 00:16:01.580
It's 90 days by

00:16:01.580 --> 00:16:01.920
default.

00:16:01.920 --> 00:16:03.540
So quite new.

00:16:03.540 --> 00:16:05.000
The RSS feed, what

00:16:05.000 --> 00:16:06.400
is it's status, the

00:16:06.400 --> 00:16:08.120
CDN status that

00:16:08.120 --> 00:16:09.080
actually delivers the

00:16:09.080 --> 00:16:10.320
MP3s, which is a

00:16:10.320 --> 00:16:11.340
whole separate bit of

00:16:11.340 --> 00:16:12.260
infrastructure at

00:16:12.260 --> 00:16:14.140
bunny.net, and the

00:16:14.140 --> 00:16:15.060
MongoDB database

00:16:15.060 --> 00:16:16.280
that powers the

00:16:16.280 --> 00:16:16.580
website.

00:16:16.580 --> 00:16:17.780
So you could see,

00:16:17.780 --> 00:16:18.420
well, maybe the

00:16:18.420 --> 00:16:19.300
website's down because

00:16:19.300 --> 00:16:20.080
the database is

00:16:20.080 --> 00:16:21.860
down, or there's

00:16:21.860 --> 00:16:22.400
just a problem with

00:16:22.400 --> 00:16:22.840
the website.

00:16:22.840 --> 00:16:23.620
Isn't that cool?

00:16:23.620 --> 00:16:24.520
It is pretty

00:16:24.520 --> 00:16:25.140
cool, yeah.

00:16:26.640 --> 00:16:28.180
And even more

00:16:28.180 --> 00:16:29.300
involved because of

00:16:29.300 --> 00:16:30.420
all the course stuff

00:16:30.420 --> 00:16:31.220
is if you go to the

00:16:31.220 --> 00:16:32.320
one for, at the

00:16:32.320 --> 00:16:32.900
bottom of Talk

00:16:32.900 --> 00:16:33.740
Python, you can see

00:16:33.740 --> 00:16:34.880
you've got all those

00:16:34.880 --> 00:16:35.800
things I described, but

00:16:35.800 --> 00:16:36.780
also like the mobile

00:16:36.780 --> 00:16:38.600
APIs, the video CDN,

00:16:38.600 --> 00:16:40.380
the podcast CDN, the

00:16:40.380 --> 00:16:41.600
courses website, all

00:16:41.600 --> 00:16:42.080
those things.

00:16:42.080 --> 00:16:44.020
And all are making me

00:16:44.020 --> 00:16:45.720
smile with almost 100%

00:16:45.720 --> 00:16:46.060
of time.

00:16:46.060 --> 00:16:48.000
I think I broke when I

00:16:48.000 --> 00:16:48.460
set it up.

00:16:48.460 --> 00:16:50.880
I didn't configure the

00:16:50.880 --> 00:16:54.060
setup right for RSS, so

00:16:54.060 --> 00:16:54.580
it's got a little

00:16:54.580 --> 00:16:56.100
lingering broken bit,

00:16:56.100 --> 00:16:56.740
but I don't think

00:16:56.740 --> 00:16:57.460
it's actually had any

00:16:57.460 --> 00:16:57.800
downtime.

00:16:57.800 --> 00:16:59.700
Okay, I was going to,

00:16:59.700 --> 00:17:01.520
actually, I'm pleased to

00:17:01.520 --> 00:17:02.280
see that because I was

00:17:02.280 --> 00:17:03.060
just wondering if you're

00:17:03.060 --> 00:17:03.800
rounding up to the

00:17:03.800 --> 00:17:04.280
nearest 100.

00:17:04.280 --> 00:17:06.160
No, no, this is like

00:17:06.160 --> 00:17:08.180
to the, it's to the

00:17:08.180 --> 00:17:09.200
100th, so it's like

00:17:09.200 --> 00:17:12.300
99.86% up, but I

00:17:12.300 --> 00:17:13.560
think it's just, I broke

00:17:13.560 --> 00:17:14.320
it when I was trying to

00:17:14.320 --> 00:17:14.940
set this thing up.

00:17:14.940 --> 00:17:16.740
So, yeah, incredibly

00:17:16.740 --> 00:17:17.500
easy, just.

00:17:17.500 --> 00:17:19.380
This is cool.

00:17:20.000 --> 00:17:21.180
Yeah, where's, there's,

00:17:21.180 --> 00:17:22.580
so if you go here,

00:17:22.580 --> 00:17:24.720
basically just Docker run,

00:17:24.720 --> 00:17:25.520
and I've talked about

00:17:25.520 --> 00:17:26.460
this whole Docker cluster

00:17:26.460 --> 00:17:28.720
I've had, I've migrated

00:17:28.720 --> 00:17:29.840
everything to all the

00:17:29.840 --> 00:17:31.380
infrastructure too, and

00:17:31.380 --> 00:17:32.740
adding this as a thing

00:17:32.740 --> 00:17:33.760
that runs over there,

00:17:33.760 --> 00:17:35.260
incredibly easy.

00:17:35.260 --> 00:17:38.960
It took probably 20

00:17:38.960 --> 00:17:40.440
minutes to get it set up

00:17:40.440 --> 00:17:42.880
running as its own bit

00:17:42.880 --> 00:17:43.800
of infrastructure, and now

00:17:43.800 --> 00:17:45.540
it just chills in its own

00:17:45.540 --> 00:17:46.620
Docker container watching

00:17:46.620 --> 00:17:48.020
all the other things

00:17:48.020 --> 00:17:48.760
around the world, so

00:17:48.760 --> 00:17:49.220
very cool.

00:17:49.820 --> 00:17:50.020
neat.

00:17:50.020 --> 00:17:52.480
Yeah, so if, if you

00:17:52.480 --> 00:17:53.100
want to play with that,

00:17:53.100 --> 00:17:54.220
you can check that out

00:17:54.220 --> 00:17:55.280
at the bottom of both of

00:17:55.280 --> 00:17:58.460
the podcast websites in

00:17:58.460 --> 00:17:59.440
their footers, same for

00:17:59.440 --> 00:18:00.660
TalkByTheTraining as

00:18:00.660 --> 00:18:01.320
well, it's in there as

00:18:01.320 --> 00:18:01.480
well.

00:18:01.480 --> 00:18:03.400
But basically, you know,

00:18:03.400 --> 00:18:04.560
just, it's just an

00:18:04.560 --> 00:18:05.860
example of someone putting

00:18:05.860 --> 00:18:07.140
up uptime kuma, which

00:18:07.140 --> 00:18:08.600
so far I'm, I'm pretty

00:18:08.600 --> 00:18:09.900
happy with, and if, what

00:18:09.900 --> 00:18:10.820
you see on the status

00:18:10.820 --> 00:18:11.740
page is a public thing,

00:18:11.740 --> 00:18:12.560
but if you log in, you

00:18:12.560 --> 00:18:14.200
get a lot more detail of

00:18:14.200 --> 00:18:15.720
like responses, response

00:18:15.720 --> 00:18:18.220
time, overtime, and all

00:18:18.220 --> 00:18:18.500
this.

00:18:18.920 --> 00:18:19.760
So you can kind of use

00:18:19.760 --> 00:18:20.360
it as a performance

00:18:20.360 --> 00:18:21.360
monitoring thing as

00:18:21.360 --> 00:18:21.580
well.

00:18:21.580 --> 00:18:22.760
Oh, cool.

00:18:22.760 --> 00:18:23.640
Yeah.

00:18:23.640 --> 00:18:25.740
I should check that

00:18:25.740 --> 00:18:25.980
out.

00:18:25.980 --> 00:18:26.900
Indeed.

00:18:26.900 --> 00:18:27.620
Neat.

00:18:27.620 --> 00:18:28.760
All right.

00:18:29.260 --> 00:18:30.560
Well, something else to

00:18:30.560 --> 00:18:31.560
check out is something

00:18:31.560 --> 00:18:34.740
upcoming, possibly in, in

00:18:34.740 --> 00:18:35.080
Python.

00:18:35.080 --> 00:18:36.760
There is a new pep.

00:18:36.760 --> 00:18:37.940
Well, there's often new

00:18:37.940 --> 00:18:40.760
peps, but here's PEP 751.

00:18:40.760 --> 00:18:43.580
This is authored by Brett

00:18:43.580 --> 00:18:47.480
Cannon and started at the,

00:18:47.480 --> 00:18:48.740
created at the end of July

00:18:48.740 --> 00:18:49.640
the 24th.

00:18:49.640 --> 00:18:51.300
What is this?

00:18:51.340 --> 00:18:53.420
this is peps 751, a file

00:18:53.420 --> 00:18:55.180
format to list Python

00:18:55.180 --> 00:18:57.380
dependencies for installation

00:18:57.380 --> 00:18:59.360
and reproducibility, which

00:18:59.360 --> 00:19:01.240
is a bit of a mouthful, but

00:19:01.240 --> 00:19:04.360
and I actually, to be

00:19:04.360 --> 00:19:04.960
honest, some of the

00:19:04.960 --> 00:19:07.640
details in here is, are a

00:19:07.640 --> 00:19:10.180
little detail oriented, but

00:19:10.180 --> 00:19:12.760
I like to look the abstract

00:19:12.760 --> 00:19:13.860
and the motivation to make

00:19:13.860 --> 00:19:14.460
total sense.

00:19:14.620 --> 00:19:18.060
So the idea is, well, I'll

00:19:18.060 --> 00:19:18.560
just read it.

00:19:18.560 --> 00:19:20.160
The, for the abstract, this

00:19:20.160 --> 00:19:21.820
 PEP proposes a new file

00:19:21.820 --> 00:19:23.140
format for dependency

00:19:23.140 --> 00:19:25.140
specification to enable

00:19:25.140 --> 00:19:26.920
reproducible install,

00:19:26.920 --> 00:19:29.440
install, enable reproducible

00:19:29.440 --> 00:19:30.780
installation in a Python

00:19:30.780 --> 00:19:31.340
environment.

00:19:31.340 --> 00:19:32.660
The format is designed to be

00:19:32.660 --> 00:19:34.000
human readable and machine

00:19:34.000 --> 00:19:34.520
generated.

00:19:34.520 --> 00:19:36.920
Installers consuming the

00:19:36.920 --> 00:19:37.720
file should be able to

00:19:37.720 --> 00:19:39.120
evaluate each package in

00:19:39.120 --> 00:19:41.560
question in isolation with no

00:19:41.560 --> 00:19:43.500
need for dependency resolution

00:19:43.500 --> 00:19:44.600
at install time.

00:19:44.600 --> 00:19:45.340
which is interesting.

00:19:45.340 --> 00:19:48.180
So what's the idea?

00:19:48.180 --> 00:19:49.360
I thought we had this

00:19:49.360 --> 00:19:50.180
already, don't we?

00:19:50.180 --> 00:19:51.840
We have dependency, but we

00:19:51.840 --> 00:19:53.240
don't have like this whole

00:19:53.240 --> 00:19:57.540
like lock file stuff is not

00:19:57.540 --> 00:20:00.320
is not, is not a standard.

00:20:00.320 --> 00:20:01.800
It's just implemented several

00:20:01.800 --> 00:20:02.220
places.

00:20:02.220 --> 00:20:05.300
So there's no, under

00:20:05.300 --> 00:20:07.320
motivation, currently no

00:20:07.320 --> 00:20:08.900
standard exists to specify

00:20:08.900 --> 00:20:10.140
what top level dependencies

00:20:10.140 --> 00:20:11.460
should be installed into a

00:20:11.460 --> 00:20:14.420
Python environment and no

00:20:14.420 --> 00:20:15.980
standard exists to create an

00:20:15.980 --> 00:20:17.800
immutable record such as a

00:20:17.800 --> 00:20:19.380
lock file of which dependencies

00:20:19.380 --> 00:20:20.120
are installed.

00:20:20.120 --> 00:20:23.280
There are at least five

00:20:23.280 --> 00:20:24.540
well-known solutions to the

00:20:24.540 --> 00:20:24.900
problem.

00:20:24.900 --> 00:20:26.320
We've got pip freeze.

00:20:26.320 --> 00:20:27.440
We have pip-tools.

00:20:27.440 --> 00:20:29.080
UV has a solution.

00:20:29.080 --> 00:20:32.320
Poetry and PDM all have a way

00:20:32.320 --> 00:20:33.680
to deal with lock files in

00:20:33.680 --> 00:20:34.920
general, but we don't have a

00:20:34.920 --> 00:20:35.760
standard for this.

00:20:36.160 --> 00:20:38.780
So I am, I guess, welcoming the

00:20:38.780 --> 00:20:42.080
idea that, that, that this will

00:20:42.080 --> 00:20:43.520
be a standard or something

00:20:43.520 --> 00:20:44.320
similar to it.

00:20:44.320 --> 00:20:45.780
This is early in the pep

00:20:45.780 --> 00:20:48.220
lifecycle, but yeah.

00:20:48.220 --> 00:20:50.760
Anyway, since it's a packaging

00:20:50.760 --> 00:20:53.320
topic, these don't necessarily

00:20:53.320 --> 00:20:55.720
have to come out at the same rate

00:20:55.720 --> 00:20:59.500
as Python because pip is not pip and

00:20:59.500 --> 00:21:01.280
other packaging tools are not on the

00:21:01.280 --> 00:21:05.040
same year timeframe as, as, as

00:21:05.040 --> 00:21:05.340
Python.

00:21:05.340 --> 00:21:08.240
So not sure if, if it were when

00:21:08.240 --> 00:21:09.500
this comes about.

00:21:09.500 --> 00:21:10.000
So.

00:21:10.000 --> 00:21:11.440
Yeah, definitely.

00:21:11.440 --> 00:21:13.520
This is cool.

00:21:13.520 --> 00:21:15.940
I actually had this open in another

00:21:15.940 --> 00:21:16.260
tab.

00:21:16.260 --> 00:21:17.480
I can, so I'd go close that now.

00:21:17.480 --> 00:21:18.000
Thanks, Brian.

00:21:18.000 --> 00:21:19.940
Because I wanted to read about

00:21:19.940 --> 00:21:20.160
this.

00:21:20.160 --> 00:21:20.920
This is exciting.

00:21:20.920 --> 00:21:22.360
I always love what Brett Cannon's

00:21:22.360 --> 00:21:22.900
working on.

00:21:22.900 --> 00:21:24.100
Yeah.

00:21:24.540 --> 00:21:26.240
I think I like the idea of

00:21:26.240 --> 00:21:28.180
having a lock file that we can

00:21:28.180 --> 00:21:33.840
use because you, every tool you

00:21:33.840 --> 00:21:36.700
pick, it's got a solution, but

00:21:36.700 --> 00:21:39.520
it's incompatible with all other

00:21:39.520 --> 00:21:39.900
tools.

00:21:39.900 --> 00:21:43.000
So some project uses poetry, for

00:21:43.000 --> 00:21:44.940
example, to manage its

00:21:44.940 --> 00:21:46.780
dependencies and you just, you

00:21:46.780 --> 00:21:47.520
don't want to use that.

00:21:47.520 --> 00:21:48.080
Yeah.

00:21:48.080 --> 00:21:49.240
When you, you want to use

00:21:49.240 --> 00:21:49.660
something else.

00:21:49.660 --> 00:21:51.940
Like I'm a big fan of UV's

00:21:51.940 --> 00:21:53.620
implementation of pip-tools.

00:21:54.100 --> 00:21:55.620
well, that doesn't work with

00:21:55.620 --> 00:21:57.060
it, or maybe it does, but you

00:21:57.060 --> 00:21:58.480
know, like you've got to, you've

00:21:58.480 --> 00:22:00.480
got to get, it depends on how

00:22:00.480 --> 00:22:00.960
you're using it.

00:22:00.960 --> 00:22:01.140
Right.

00:22:01.140 --> 00:22:05.320
But having something

00:22:05.320 --> 00:22:06.700
interoperable between these would

00:22:06.700 --> 00:22:07.960
be nice to allow you to choose

00:22:07.960 --> 00:22:08.560
your workflow.

00:22:08.560 --> 00:22:09.820
Regardless.

00:22:09.820 --> 00:22:12.900
One of the, one of the aspects in

00:22:12.900 --> 00:22:15.540
here under rationale talked about,

00:22:15.540 --> 00:22:17.440
which I think is pretty cool is

00:22:17.440 --> 00:22:20.060
that the file format, the, the,

00:22:20.060 --> 00:22:23.320
the tool that creates the file

00:22:23.320 --> 00:22:25.060
doesn't necessarily have to be the

00:22:25.060 --> 00:22:26.640
tool that reads and parses it.

00:22:26.640 --> 00:22:29.180
The important thing around that

00:22:29.180 --> 00:22:32.020
is that there might be like,

00:22:32.020 --> 00:22:33.840
yeah, anybody you can, anybody

00:22:33.840 --> 00:22:35.080
can create the lock file with

00:22:35.080 --> 00:22:37.060
whatever tool you want, but a

00:22:37.060 --> 00:22:39.200
service like, like, you know,

00:22:39.200 --> 00:22:40.720
something like Anaconda or some

00:22:40.720 --> 00:22:42.460
other service or, or a packager

00:22:42.460 --> 00:22:44.440
that pulls everything in, they

00:22:44.440 --> 00:22:45.860
might have their own standard way to

00:22:45.860 --> 00:22:46.780
do all of that.

00:22:46.780 --> 00:22:48.380
and it doesn't have to be, they

00:22:48.380 --> 00:22:50.020
don't have to support flit and

00:22:50.020 --> 00:22:53.060
PDM and all sorts of other tools.

00:22:53.060 --> 00:22:54.560
I guess flit isn't one of the, on

00:22:54.560 --> 00:22:55.520
the list, but you know what I

00:22:55.520 --> 00:22:55.720
mean?

00:22:55.720 --> 00:22:56.960
Yeah.

00:22:56.960 --> 00:22:58.200
Lots of different things.

00:22:58.200 --> 00:22:58.880
So yeah.

00:22:58.880 --> 00:23:00.660
It'll be interesting to watch this

00:23:00.660 --> 00:23:01.820
and see where this goes.

00:23:02.320 --> 00:23:05.880
and as always, I appreciate how much

00:23:05.880 --> 00:23:08.940
Brett thinks about packaging and

00:23:08.940 --> 00:23:11.900
packaging was, I know that there's

00:23:11.900 --> 00:23:14.680
that, that XKCD comic about packaging

00:23:14.680 --> 00:23:16.980
being horrible in Python, but it's a

00:23:16.980 --> 00:23:17.480
hard problem.

00:23:17.480 --> 00:23:19.560
And I'm glad that we have bright

00:23:19.560 --> 00:23:21.460
people like Brett and other folks he

00:23:21.460 --> 00:23:23.620
knows to work on the hard problem.

00:23:23.620 --> 00:23:24.760
So anyway.

00:23:24.760 --> 00:23:25.700
Indeed.

00:23:25.700 --> 00:23:27.800
I just, one thing I hope is that

00:23:27.800 --> 00:23:30.840
whatever file gets generated out of

00:23:30.840 --> 00:23:34.680
this, that it's not so noisy that

00:23:34.680 --> 00:23:37.080
diffs of them over time become hard

00:23:37.080 --> 00:23:37.480
to read.

00:23:37.480 --> 00:23:40.540
For example, using the pip-tools

00:23:40.540 --> 00:23:44.720
version, if you flip on hashing, like

00:23:44.720 --> 00:23:47.860
the hashes take up so much of the, of

00:23:47.860 --> 00:23:51.860
the text that, I feel like it's

00:23:51.860 --> 00:23:54.520
just super hard to read all of a

00:23:54.520 --> 00:23:55.680
sudden to just like diff a thing.

00:23:55.680 --> 00:23:57.020
and go, okay, what's the, what's

00:23:57.020 --> 00:23:57.180
new?

00:23:57.180 --> 00:23:58.040
What's, what's changed?

00:23:58.040 --> 00:23:59.860
What's the same, but it's just, ah,

00:23:59.860 --> 00:24:03.060
you know, yeah, maybe I should

00:24:03.060 --> 00:24:04.780
turn word wrap off or something on my

00:24:04.780 --> 00:24:06.480
editor, but it's like, you're trying

00:24:06.480 --> 00:24:07.840
to read, okay, this thing is installed

00:24:07.840 --> 00:24:09.100
because these three things depend on

00:24:09.100 --> 00:24:10.760
it, but there's just blocks of hashes

00:24:10.760 --> 00:24:11.800
like all over the screen.

00:24:11.800 --> 00:24:12.360
You know what I mean?

00:24:12.360 --> 00:24:15.800
So, I, I, I did notice that

00:24:15.800 --> 00:24:17.660
that was actually called out in the

00:24:17.660 --> 00:24:18.900
rationale around it.

00:24:18.900 --> 00:24:20.840
It said the format is designed so that

00:24:20.840 --> 00:24:22.740
viewing a diff of the file is easy

00:24:22.740 --> 00:24:25.040
by centralizing relevant details.

00:24:25.500 --> 00:24:26.500
Um, Oh, awesome.

00:24:26.500 --> 00:24:26.760
Yeah.

00:24:26.760 --> 00:24:27.880
Like maybe it could have all the

00:24:27.880 --> 00:24:29.460
things and why they're installed

00:24:29.460 --> 00:24:30.420
there and then it could have the

00:24:30.420 --> 00:24:31.840
hashes in a separate place.

00:24:31.840 --> 00:24:33.700
You don't have to look at, you

00:24:33.700 --> 00:24:34.600
know, that don't mix in.

00:24:34.600 --> 00:24:37.400
Um, yeah, cool.

00:24:37.400 --> 00:24:37.920
Yeah.

00:24:37.920 --> 00:24:38.360
This is great.

00:24:38.360 --> 00:24:40.340
I'm glad that that was a, that was,

00:24:40.340 --> 00:24:42.340
that's part of the concern is to

00:24:42.340 --> 00:24:44.580
make sure, because yeah, that's, I

00:24:44.580 --> 00:24:47.440
might not read it maybe theoretically

00:24:47.440 --> 00:24:49.840
human readable like XML, but the only

00:24:49.840 --> 00:24:52.080
time I'm actually reading XML is in a

00:24:52.080 --> 00:24:52.340
diff.

00:24:52.840 --> 00:24:53.800
So yeah.

00:24:53.800 --> 00:24:54.180
Yeah.

00:24:54.180 --> 00:24:54.560
Yeah.

00:24:54.560 --> 00:24:55.900
Anyway, cool.

00:24:55.900 --> 00:24:57.760
Um, well, that's our items.

00:24:57.760 --> 00:24:58.920
Do you have any extras for us?

00:24:58.920 --> 00:25:02.540
I do feel a little extra today and I

00:25:02.540 --> 00:25:04.740
hinted at this, some of the stuff

00:25:04.740 --> 00:25:05.240
I'm gonna cover here.

00:25:05.300 --> 00:25:07.180
So first of all, my pie has a new

00:25:07.180 --> 00:25:08.680
release and there's some interesting

00:25:08.680 --> 00:25:11.880
things to call out Brian, my pie 1.11.

00:25:11.880 --> 00:25:15.920
So if you don't know, my pie is a, a

00:25:15.920 --> 00:25:18.260
faux compiler for Python, I will say

00:25:18.260 --> 00:25:20.960
it's a type checker, but what it does

00:25:20.960 --> 00:25:22.640
is basically go through your code as

00:25:22.640 --> 00:25:24.220
if it was a compiler and make sure

00:25:24.220 --> 00:25:25.400
that everything would hang together.

00:25:25.400 --> 00:25:26.880
Like here, you say this thing is an

00:25:26.880 --> 00:25:28.140
integer and you're passing into a

00:25:28.140 --> 00:25:30.100
function that can take an optional

00:25:30.100 --> 00:25:31.300
integer, right?

00:25:31.340 --> 00:25:33.240
not an optional string and it would

00:25:33.240 --> 00:25:34.720
be an error and it would tell you

00:25:34.720 --> 00:25:36.000
that it's not okay if it weren't

00:25:36.000 --> 00:25:36.240
right.

00:25:36.240 --> 00:25:37.960
Just like, like I said, like a

00:25:37.960 --> 00:25:38.840
compiler kind of would.

00:25:38.840 --> 00:25:41.260
So you can get that.

00:25:41.260 --> 00:25:41.960
That's very cool.

00:25:41.960 --> 00:25:45.560
Um, it has support for the, the new

00:25:45.560 --> 00:25:49.720
312 simpler, generics, right?

00:25:49.720 --> 00:25:53.340
Like class C of T's bracket T and

00:25:53.340 --> 00:25:54.760
then you'd have T goes to et cetera,

00:25:54.760 --> 00:25:55.180
et cetera.

00:25:55.800 --> 00:25:56.760
Very nice there.

00:25:56.760 --> 00:26:00.040
The one I wanted to call out there

00:26:00.040 --> 00:26:01.340
was functools.partial.

00:26:01.340 --> 00:26:03.140
You talked about functools, no,

00:26:03.140 --> 00:26:04.020
iter tools last week.

00:26:04.020 --> 00:26:05.000
Now how about functools?

00:26:05.000 --> 00:26:06.680
Have you heard of functools.partial?

00:26:06.680 --> 00:26:07.920
Yeah, I've used them.

00:26:07.920 --> 00:26:10.840
I, the pretty, parcels are fun.

00:26:10.840 --> 00:26:12.880
I've never used them.

00:26:12.880 --> 00:26:15.300
So in Python, we can have default

00:26:15.300 --> 00:26:18.520
values like F of A and B F of A comma

00:26:18.520 --> 00:26:18.960
B, right?

00:26:18.960 --> 00:26:21.700
You could say B equals one.

00:26:21.700 --> 00:26:22.760
So you don't have to specify the

00:26:22.760 --> 00:26:25.220
value, but it could be another value,

00:26:25.220 --> 00:26:25.480
right?

00:26:25.480 --> 00:26:28.360
It could be, if somebody wanted

00:26:28.360 --> 00:26:29.940
to, they could override that, right?

00:26:29.940 --> 00:26:32.320
You can't say here's a thing with a

00:26:32.320 --> 00:26:34.280
default value, but never set it.

00:26:34.280 --> 00:26:36.260
So you can say partial of that

00:26:36.260 --> 00:26:39.040
function and specify the second

00:26:39.040 --> 00:26:42.800
parameter or whichever parameter you

00:26:42.800 --> 00:26:43.240
want, right?

00:26:43.240 --> 00:26:45.500
And it'll, it'll pass that in.

00:26:45.500 --> 00:26:47.900
But now my pie checks those.

00:26:47.900 --> 00:26:50.600
We also get, better type

00:26:50.600 --> 00:26:54.560
inference, better, type

00:26:54.560 --> 00:26:57.700
hinting in expressions and a bunch of

00:26:57.700 --> 00:26:58.220
other stuff.

00:26:58.220 --> 00:26:59.280
So it's a pretty big release.

00:26:59.280 --> 00:27:01.200
People can check that out if they want.

00:27:01.200 --> 00:27:04.840
The thing that I hinted at the beginning

00:27:04.840 --> 00:27:06.620
is fast HTML.

00:27:06.620 --> 00:27:08.980
I know there's been a lot of talk about

00:27:08.980 --> 00:27:09.460
this, right?

00:27:09.460 --> 00:27:10.180
Yeah.

00:27:11.240 --> 00:27:15.580
So fast HTML is a, well, they, they describe

00:27:15.580 --> 00:27:20.100
themselves as a modern web application, building a framework for modern web applications

00:27:20.100 --> 00:27:20.940
in pure Python.

00:27:20.940 --> 00:27:31.460
Think kind of view components a little bit, but a flash style programming model for the server

00:27:31.460 --> 00:27:31.860
side.

00:27:33.280 --> 00:27:37.120
with a lot of those components actually written in Python, which is pretty interesting.

00:27:37.120 --> 00:27:39.240
You can create them, make reusable things.

00:27:39.240 --> 00:27:47.200
And it's, it's interaction and it's dynamic aspects are based on HTMX, which is one of my

00:27:47.200 --> 00:27:49.640
very favorite, favorite JavaScript frameworks as well.

00:27:50.280 --> 00:27:55.800
So if you were thinking of doing stuff like streamlet or Gradio or some of these dashboard

00:27:55.800 --> 00:28:02.180
types of interactions, and you're like, I need to go beyond what those capable of this and not just

00:28:02.180 --> 00:28:07.260
put dashboards, but more interactive elements and sort of more of a web app, but not a ton more.

00:28:07.700 --> 00:28:13.100
Then this is a framework that it's upper bound as much higher where you can keep going and going.

00:28:13.100 --> 00:28:20.880
So you can definitely create some, some cool apps real quickly with not very much code.

00:28:20.880 --> 00:28:24.460
So I'm going to play with this a little bit more and I think I'll talk more about it next week.

00:28:24.460 --> 00:28:26.280
I'm looking forward to that.

00:28:26.280 --> 00:28:28.080
I was going to bring this up as well.

00:28:28.080 --> 00:28:28.880
Yeah.

00:28:28.880 --> 00:28:30.480
Looks interesting.

00:28:30.480 --> 00:28:32.020
We could share it next week.

00:28:32.020 --> 00:28:33.960
All right.

00:28:33.960 --> 00:28:42.680
And then also we're coming up on last chance to go be part of the Python and web and database

00:28:42.680 --> 00:28:52.280
course in a castle in Italy, the Python Zero to Hero 2024 event that I'm doing in a luxurious

00:28:52.280 --> 00:28:53.560
Tuscan villa.

00:28:53.560 --> 00:28:55.480
And hopefully you can be there.

00:28:55.480 --> 00:29:00.000
But if you've been on the fence and thinking, maybe I want to go, but not sure.

00:29:00.240 --> 00:29:04.680
I'll find, you know, on your to-do list to think more about it.

00:29:04.680 --> 00:29:09.960
Well, you got to think soon because we're going to close enrollment pretty shortly.

00:29:09.960 --> 00:29:13.440
So please, if you want to go, jump on that.

00:29:13.440 --> 00:29:14.820
If not, that's totally good too.

00:29:14.820 --> 00:29:17.140
And that's it for my extras.

00:29:17.140 --> 00:29:18.740
All right.

00:29:18.740 --> 00:29:21.040
I've got one extra.

00:29:21.040 --> 00:29:25.660
Pretty much what I've been doing in my free time a lot is working on the new course,

00:29:26.560 --> 00:29:31.340
Hellopytest, and I really want it to be accessible to everybody.

00:29:31.340 --> 00:29:33.560
So I do have a landing page now.

00:29:33.560 --> 00:29:39.800
It's if you go to courses.pythontest.com, you'll see a link to it.

00:29:39.800 --> 00:29:46.980
There is, I don't know, I haven't decided what the final cost pricing structure is going to

00:29:46.980 --> 00:29:51.980
be, but I'd like to start it at 10 bucks because I'd really like it to be something that people

00:29:51.980 --> 00:29:53.280
can take a look at today.

00:29:53.280 --> 00:29:56.760
So the idea around it is not to teach you all of pytest.

00:29:56.760 --> 00:29:59.400
It is to get people started with it.

00:29:59.400 --> 00:30:03.060
So to cover some of the basics like parameterization and fixtures and stuff.

00:30:04.100 --> 00:30:10.040
And the idea being, I would love to have something to hand out to teammates so that everybody

00:30:10.040 --> 00:30:14.740
can get up to speed so that the one pytest expert on the team doesn't get questions all

00:30:14.740 --> 00:30:15.160
day long.

00:30:15.160 --> 00:30:17.680
That's where I'm trying to fill this in.

00:30:17.680 --> 00:30:20.000
So that's still up.

00:30:20.000 --> 00:30:25.800
In order to do a pricing page, I had to pick a date where I was going to deliver it by.

00:30:26.720 --> 00:30:31.120
I picked the 19th, which is what, 12 days from now.

00:30:31.120 --> 00:30:35.420
I think it's going to be done before then, but that's my deadline.

00:30:35.420 --> 00:30:37.080
So working on that.

00:30:37.080 --> 00:30:38.440
Awesome.

00:30:38.440 --> 00:30:38.860
Congrats.

00:30:38.860 --> 00:30:46.020
You know, people, if you look around online courses, like especially Udemy, it's an arms

00:30:46.020 --> 00:30:48.640
race to have the most content.

00:30:49.420 --> 00:30:55.960
We have the super mega course that's 36 hours of content, you know, and it's like, and it's

00:30:55.960 --> 00:30:57.000
only 50 bucks.

00:30:57.000 --> 00:30:58.620
That one over there, that's 50 bucks.

00:30:58.620 --> 00:30:59.700
It's only five hours.

00:30:59.700 --> 00:31:01.800
That is nothing compared to this.

00:31:01.800 --> 00:31:07.340
That's an additional 31 hours of your time you've got to put into it.

00:31:07.340 --> 00:31:07.560
Right.

00:31:07.560 --> 00:31:11.960
And not everybody has 36 hours of interest in learning pytest.

00:31:11.960 --> 00:31:13.940
They just need enough to get going and get started.

00:31:13.940 --> 00:31:16.900
And so I think there's real value in having like a concise.

00:31:16.900 --> 00:31:18.140
Yeah.

00:31:18.140 --> 00:31:19.880
I was surprised.

00:31:19.880 --> 00:31:27.320
I was talking to a team that was considering my larger course and they decided not to because

00:31:27.320 --> 00:31:28.920
it was because of them.

00:31:28.920 --> 00:31:32.760
Like, they were like, oh, I really want somebody to be able to do this in a half a day.

00:31:32.760 --> 00:31:34.040
Yeah, exactly.

00:31:34.040 --> 00:31:34.540
Or less.

00:31:34.540 --> 00:31:35.960
And I'm like, oh, okay.

00:31:35.960 --> 00:31:39.040
So there's, there's real value in half a day or less courses.

00:31:39.040 --> 00:31:41.300
So I think I agree.

00:31:41.300 --> 00:31:43.760
I don't want to spend 36 hours learning anything.

00:31:43.760 --> 00:31:47.100
I mean, I mean, over the course of the history of working with a tool.

00:31:47.100 --> 00:31:47.640
Sure.

00:31:47.640 --> 00:31:49.720
But over like right away.

00:31:49.720 --> 00:31:51.040
No, I'm not going to do that.

00:31:51.040 --> 00:31:51.280
So.

00:31:51.280 --> 00:31:51.740
Yep.

00:31:51.740 --> 00:31:52.460
Cool.

00:31:52.460 --> 00:31:53.200
Exactly.

00:31:53.200 --> 00:31:54.300
All right.

00:31:54.300 --> 00:31:54.740
Let's look.

00:31:54.740 --> 00:31:56.400
Want to joke about open source a little bit?

00:31:56.400 --> 00:31:57.040
Yes.

00:31:57.040 --> 00:31:58.060
All right.

00:31:58.500 --> 00:32:04.260
So this, this joke is called open exclamation mark, AI exclamation mark.

00:32:04.260 --> 00:32:07.620
So it has this sort of meme of two people talking to each other.

00:32:07.620 --> 00:32:10.960
It says, hi, my name is open AI.

00:32:12.040 --> 00:32:14.180
So you're open source, right?

00:32:14.180 --> 00:32:15.800
Right.

00:32:15.800 --> 00:32:18.280
No.

00:32:18.280 --> 00:32:19.840
Not really.

00:32:19.840 --> 00:32:20.320
Hmm.

00:32:20.320 --> 00:32:21.280
Cool.

00:32:21.280 --> 00:32:22.300
It should be closed AI.

00:32:22.300 --> 00:32:23.800
Yeah.

00:32:25.340 --> 00:32:26.180
At the bottom.

00:32:26.180 --> 00:32:27.120
It does say, okay.

00:32:27.120 --> 00:32:28.780
Open AI is not open source.

00:32:28.780 --> 00:32:32.380
The open means that they're AI is open to receive our data.

00:32:32.380 --> 00:32:33.160
Okay.

00:32:33.160 --> 00:32:33.740
Very well.

00:32:33.740 --> 00:32:35.000
Oh, yeah.

00:32:35.000 --> 00:32:35.460
Okay.

00:32:35.460 --> 00:32:35.800
Yeah.

00:32:36.680 --> 00:32:38.780
Bart, Bart agrees with us.

00:32:38.780 --> 00:32:40.100
Ain't nobody got time for that.

00:32:40.100 --> 00:32:43.240
For long courses, not open AI.

00:32:43.240 --> 00:32:44.220
Yeah.

00:32:44.220 --> 00:32:45.060
All right.

00:32:45.060 --> 00:32:45.600
Cool.

00:32:45.600 --> 00:32:49.380
Well, good again to talk with you as always this week.

00:32:49.380 --> 00:32:54.460
Thank you everybody for joining in on the live stream and everybody else for listening.

00:32:54.460 --> 00:32:58.140
And I hope you have a wonderful rest of your summer or next week.

00:32:58.140 --> 00:32:59.500
So talk to you next week.

00:32:59.500 --> 00:33:00.140
Indeed.

00:33:00.140 --> 00:33:00.440
Bye.

00:33:00.440 --> 00:33:03.500
Wow.

