WEBVTT

00:00:00.001 --> 00:00:05.680
>> Hello, hello. Hey, Brian, ready to kick this thing off?

00:00:05.680 --> 00:00:07.800
>> Yeah. Excited.

00:00:07.800 --> 00:00:13.480
>> Thanks. Yeah. Thanks everyone who is out there watching or watching later.

00:00:13.480 --> 00:00:17.120
Hello and welcome to Python Bytes where we deliver

00:00:17.120 --> 00:00:20.820
Python news and headlines directly to your earbuds.

00:00:20.820 --> 00:00:22.820
This is Episode 378,

00:00:22.820 --> 00:00:27.320
recorded April 9th, 2024.

00:00:27.320 --> 00:00:28.800
I'm Michael Kennedy.

00:00:28.800 --> 00:00:30.760
>> I'm Brian Okken.

00:00:30.760 --> 00:00:34.880
>> You can follow us over on Mastodon.

00:00:34.880 --> 00:00:37.160
We're all on Fossadon, @brianaukin,

00:00:37.160 --> 00:00:39.020
@mkennedy, and @pythonbytes.

00:00:39.020 --> 00:00:40.080
We'd love to talk to you over there.

00:00:40.080 --> 00:00:43.880
We're also on X Twitter if you want to be there as well,

00:00:43.880 --> 00:00:47.360
but we probably spend a little more time on Mastodon these days.

00:00:47.360 --> 00:00:50.440
Support the show by supporting our work.

00:00:50.440 --> 00:00:53.520
We have obviously a bunch of courses that Talk Python Training,

00:00:53.520 --> 00:00:55.280
Brian's complete pytest course,

00:00:55.280 --> 00:00:56.920
and the Patreon as well.

00:00:56.920 --> 00:00:58.720
Be part of the live show if you wish.

00:00:58.720 --> 00:01:00.240
You can see the video version.

00:01:00.240 --> 00:01:01.440
Absolutely not required,

00:01:01.440 --> 00:01:04.840
but always awesome to have people in the audience to give it

00:01:04.840 --> 00:01:08.280
a little bit more of multiple perspectives.

00:01:08.280 --> 00:01:10.960
We'll get some of that coming on in a second.

00:01:10.960 --> 00:01:14.080
You can check that out at pythonbytes.fm/live,

00:01:14.080 --> 00:01:17.600
usually Tuesdays at 10 AM.

00:01:17.600 --> 00:01:19.440
That's specific time.

00:01:19.440 --> 00:01:25.200
Finally, if you want an artisanal handcrafted digest of what we talk about,

00:01:25.200 --> 00:01:27.160
sent to you in e-mail form,

00:01:27.160 --> 00:01:28.760
even if you don't listen,

00:01:28.760 --> 00:01:32.160
well, head over to the website pythonbytes.fm,

00:01:32.160 --> 00:01:35.520
click "Newsletter" right in the middle and enter your e-mail address.

00:01:35.520 --> 00:01:38.680
We will not share it or do other nefarious things.

00:01:38.680 --> 00:01:43.160
We just want to be able to contact you and have a chat if you wish.

00:01:43.160 --> 00:01:48.320
Brian will be sending out something cool to everyone this week as usual.

00:01:48.320 --> 00:01:52.120
Brian, do you have health news or something you got to share?

00:01:52.120 --> 00:01:53.440
What's going on here, man?

00:01:53.440 --> 00:01:56.960
>> Well, I've found a pacemaker.

00:01:56.960 --> 00:01:59.320
My ticker is doing good.

00:01:59.320 --> 00:02:01.160
No problems with that.

00:02:01.160 --> 00:02:06.080
But you can control your heart with Python.

00:02:06.080 --> 00:02:11.920
Actually, you can't control your heart yet.

00:02:11.920 --> 00:02:14.240
Actually, I don't know if you can.

00:02:14.240 --> 00:02:21.280
But I ran across a project from Brandon Rohr called Pacemaker.

00:02:21.280 --> 00:02:23.600
What this does, it's not controlling your heart,

00:02:23.600 --> 00:02:28.080
it's controlling time per iteration loop.

00:02:28.080 --> 00:02:32.520
I don't know if this has anything to do with UV or not.

00:02:32.520 --> 00:02:35.360
But one of the things that UV has brought us is

00:02:35.360 --> 00:02:39.040
really fast installing of lots of packages if you have a lot.

00:02:39.040 --> 00:02:44.440
Why not? This is a small package.

00:02:44.440 --> 00:02:48.880
This is in Brandon's own words on the readme.

00:02:48.880 --> 00:02:51.200
I think I saw this here.

00:02:51.200 --> 00:03:00.160
It is essentially it's a glorified snippet.

00:03:00.160 --> 00:03:04.120
Instead of a snippet, he wrote a package, which I love this.

00:03:04.120 --> 00:03:05.880
I'm taking a look at it.

00:03:05.880 --> 00:03:07.120
It's a small package.

00:03:07.120 --> 00:03:10.080
Good example though for how to do a package.

00:03:10.080 --> 00:03:13.440
If you take a look at the pyproject.toml,

00:03:13.440 --> 00:03:14.880
it's pretty concise.

00:03:14.880 --> 00:03:17.440
It's using setup tools, which is fine.

00:03:17.440 --> 00:03:21.480
But it shows you how easy it is to put a package together,

00:03:21.480 --> 00:03:23.760
which is pretty fun.

00:03:23.760 --> 00:03:25.440
Also with the code,

00:03:25.440 --> 00:03:26.560
I was taking a look at the code.

00:03:26.560 --> 00:03:33.280
What this does is not terribly earth-shattering,

00:03:33.280 --> 00:03:35.400
but it just sticks around.

00:03:35.400 --> 00:03:36.800
You tell it that you want to,

00:03:36.800 --> 00:03:39.120
it's like a metronome thing.

00:03:39.120 --> 00:03:42.200
You've got some code that you want to run.

00:03:42.200 --> 00:03:45.760
Here's an example. You just say

00:03:45.760 --> 00:03:49.280
pacemaker beat and it waits.

00:03:49.280 --> 00:03:52.280
It's a busy wait or it does a sleep or something like that.

00:03:52.280 --> 00:03:56.920
Yes, sleep. But it sleeps and then comes back alive,

00:03:56.920 --> 00:03:58.480
does its thing and then goes back.

00:03:58.480 --> 00:03:59.880
You can have it be,

00:03:59.880 --> 00:04:01.320
like in this example,

00:04:01.320 --> 00:04:04.600
does a beat for 100 times.

00:04:04.600 --> 00:04:08.600
This is important in a lot of different types of code,

00:04:08.600 --> 00:04:10.920
a lot of monitoring code, a lot of other things.

00:04:10.920 --> 00:04:14.240
Busy waits aren't necessarily always the greatest,

00:04:14.240 --> 00:04:16.360
but in a lot of cases, it works great.

00:04:16.360 --> 00:04:18.480
The thing that I wanted to point out about this,

00:04:18.480 --> 00:04:19.840
there's a few things that I love about

00:04:19.840 --> 00:04:22.000
this project or just wanted to point out.

00:04:22.000 --> 00:04:25.760
Really great documentation even for a small project.

00:04:25.760 --> 00:04:29.280
Also, I had forgot about time monotonic.

00:04:29.280 --> 00:04:34.720
This is using time monotonic when it does the time comparisons.

00:04:34.720 --> 00:04:37.760
Instead of, there's a couple of times of timestamps,

00:04:37.760 --> 00:04:40.560
types of timestamps and monotonic,

00:04:40.560 --> 00:04:43.080
and then there's a monotonic nanoseconds if you really want to

00:04:43.080 --> 00:04:44.720
do really tight loops,

00:04:44.720 --> 00:04:47.120
you could modify it for that.

00:04:47.120 --> 00:04:50.440
The thing that monotonic does is it

00:04:50.440 --> 00:04:52.800
makes sure that all time deltas are positive.

00:04:52.800 --> 00:04:56.400
Even if something happens,

00:04:56.400 --> 00:05:02.160
like you change your system clock between timestamps,

00:05:02.160 --> 00:05:06.880
it'll still do it correctly so that it is monotonically increasing.

00:05:06.880 --> 00:05:09.840
>> That's interesting. Another thing could be,

00:05:09.840 --> 00:05:12.120
maybe even you don't change it,

00:05:12.120 --> 00:05:14.760
but we all have our clocks set to auto.

00:05:14.760 --> 00:05:15.240
>> Yeah.

00:05:15.240 --> 00:05:18.640
>> Adjust, and it could come online and auto adjust or something.

00:05:18.640 --> 00:05:21.600
>> Yeah, and that would be weird if suddenly,

00:05:21.600 --> 00:05:27.600
especially with this project where one of the things it does,

00:05:27.600 --> 00:05:29.080
and he warns about this,

00:05:29.080 --> 00:05:33.600
is, sleeps aren't exact science.

00:05:33.600 --> 00:05:37.480
This isn't a real-time, especially on non-real-time operating systems,

00:05:37.480 --> 00:05:40.600
but I don't think Python is even a real-time thing.

00:05:40.600 --> 00:05:43.920
It's an approximation for how long it's going to sleep,

00:05:43.920 --> 00:05:45.640
but it tries to correct it.

00:05:45.640 --> 00:05:47.880
If you slept too long,

00:05:47.880 --> 00:05:51.280
it tries to do more of it so that on average,

00:05:51.280 --> 00:05:56.920
you get the average amount of times you're running be correct.

00:05:56.920 --> 00:05:59.360
It's a cool library, check it out.

00:05:59.360 --> 00:06:02.160
A couple of things I wanted to point out about it.

00:06:02.160 --> 00:06:04.760
One is the cool use of monotonic.

00:06:04.760 --> 00:06:09.200
The other one is a good read me documentation even for a small thing.

00:06:09.200 --> 00:06:12.440
But there's no tests.

00:06:12.440 --> 00:06:18.880
Brandon, come on. Actually, there's a couple of things around this.

00:06:18.880 --> 00:06:21.640
I don't think that people should stop from

00:06:21.640 --> 00:06:24.560
putting a code online just because they don't have tests yet.

00:06:24.560 --> 00:06:27.400
It might be that somebody could contribute and add tests.

00:06:27.400 --> 00:06:29.960
It also might be that for you,

00:06:29.960 --> 00:06:31.600
if you're using this all the time,

00:06:31.600 --> 00:06:33.620
if Brandon uses this all the time,

00:06:33.620 --> 00:06:37.520
the tests are covered by the calling code.

00:06:37.520 --> 00:06:40.000
You're using this and you're covering it.

00:06:40.000 --> 00:06:43.200
I guess I want to point out to everybody,

00:06:43.200 --> 00:06:45.560
for any library you're using,

00:06:45.560 --> 00:06:47.680
you probably should have tests that cover

00:06:47.680 --> 00:06:50.120
the part of the library that you depend on,

00:06:50.120 --> 00:06:51.840
even if they do have tests.

00:06:51.840 --> 00:06:54.560
This one doesn't, so buyer beware.

00:06:54.560 --> 00:06:56.240
But even if they do,

00:06:56.240 --> 00:06:58.460
you probably should make sure that it is really

00:06:58.460 --> 00:07:01.040
working the way you think it's working.

00:07:01.040 --> 00:07:05.400
>> Sometimes it's just hard to have meaningful tests.

00:07:05.400 --> 00:07:09.840
A while ago, I released that Umami Python event library,

00:07:09.840 --> 00:07:12.040
for the analytics tracking.

00:07:12.040 --> 00:07:19.640
All it does is serialize the messages that come to it from the Umami API.

00:07:19.640 --> 00:07:23.440
I can test what my perception of the API is.

00:07:23.440 --> 00:07:29.120
But the real danger is that that API changes in some way or another.

00:07:29.120 --> 00:07:33.640
It's just 90 percent of the fragility is outside of,

00:07:33.640 --> 00:07:36.200
if you mock out all that stuff, then well.

00:07:36.200 --> 00:07:38.840
You're just testing your view,

00:07:38.840 --> 00:07:41.480
which hopefully is already mostly encoded.

00:07:41.480 --> 00:07:42.880
It's not completely useless,

00:07:42.880 --> 00:07:46.680
but there's certain things that are just tricky to get.

00:07:46.680 --> 00:07:52.000
>> Right. Testing isn't necessarily always automated testing.

00:07:52.000 --> 00:07:54.320
It could be that you're using it,

00:07:54.320 --> 00:07:57.080
the Umami API that you're using,

00:07:57.080 --> 00:08:00.560
you're using it so you'll know when it breaks.

00:08:00.840 --> 00:08:07.640
Other things are like your use of it will break or the calling code.

00:08:07.640 --> 00:08:09.600
I don't think that people should,

00:08:09.600 --> 00:08:11.000
especially with the internal stuff,

00:08:11.000 --> 00:08:13.280
maybe on PyPI, maybe we should have a little bit,

00:08:13.280 --> 00:08:15.840
eventually should have tests probably.

00:08:15.840 --> 00:08:19.460
But for internal projects where you're sharing code,

00:08:19.460 --> 00:08:23.120
it's better to package and share code than to not share code.

00:08:23.120 --> 00:08:25.600
If writing testers is what's stopping you

00:08:25.600 --> 00:08:28.120
from putting it in a central repository,

00:08:28.120 --> 00:08:29.600
don't let that stop you.

00:08:29.600 --> 00:08:32.280
It's better than just, we have snippets.

00:08:32.280 --> 00:08:33.760
Like he said, it's a glorified snippet,

00:08:33.760 --> 00:08:35.960
so why not package it?

00:08:35.960 --> 00:08:38.720
>> Very nice. I like the monotonic.

00:08:38.720 --> 00:08:39.880
That's news. News to me,

00:08:39.880 --> 00:08:41.680
I hadn't paid attention to that before.

00:08:41.680 --> 00:08:46.080
>> Yeah, it's cool. I want to try the nanosecond monotonic.

00:08:46.080 --> 00:08:49.560
>> Other stuff that people might want to pay attention to,

00:08:49.560 --> 00:08:56.080
and this is not to drum up a bunch of beer and concern so much.

00:08:56.080 --> 00:08:58.060
It's not huge news in that regard to people.

00:08:58.060 --> 00:09:03.760
But it's more to just put out there what the PyPA,

00:09:03.760 --> 00:09:07.000
the Python Packaging Authority folks to deal with,

00:09:07.000 --> 00:09:08.600
say a thanks.

00:09:08.600 --> 00:09:10.880
The news comes to us from Bleeping Computer,

00:09:10.880 --> 00:09:12.180
which usually does pretty good news,

00:09:12.180 --> 00:09:15.680
but this article is pretty vacuous of information.

00:09:15.680 --> 00:09:17.280
But the title says a lot.

00:09:17.280 --> 00:09:23.040
PyPI suspends new user registrations to block malware campaign.

00:09:23.040 --> 00:09:25.760
There's some interesting things in here.

00:09:25.760 --> 00:09:29.500
It basically says, look, when was this?

00:09:29.500 --> 00:09:33.700
This is March 28th, a little bit, a couple of weeks ago.

00:09:33.700 --> 00:09:37.180
PyPI has temporarily suspended user registration in the creation of

00:09:37.180 --> 00:09:41.360
new projects to deal with ongoing malware campaign.

00:09:41.360 --> 00:09:47.700
Then it proceeds to tell you what PyPI is basically.

00:09:47.700 --> 00:09:51.460
Then it says, "Oh, look, there were some problems.

00:09:51.460 --> 00:09:52.740
People are uploading bad stuff."

00:09:52.740 --> 00:09:54.220
But it doesn't tell you, for example,

00:09:54.220 --> 00:09:59.460
like what projects, what did the malware do?

00:09:59.460 --> 00:10:04.700
If you jump over to the status.python.org,

00:10:04.700 --> 00:10:06.500
actually that tells you about

00:10:06.500 --> 00:10:09.060
the status of Python infrastructure, which is cool.

00:10:09.060 --> 00:10:11.340
It says same deal.

00:10:11.340 --> 00:10:13.140
This is official reporting.

00:10:13.140 --> 00:10:16.440
Did it say how long the event went for?

00:10:16.440 --> 00:10:18.860
No, just that it was a thing.

00:10:18.860 --> 00:10:21.180
I guess if I did math,

00:10:21.180 --> 00:10:25.660
that would be 10 hours, about 10 hours, 30 minutes.

00:10:25.660 --> 00:10:31.700
That's a ways. This is the real article you want to read.

00:10:31.700 --> 00:10:33.180
It is over on Medium,

00:10:33.180 --> 00:10:36.020
PyPI is under attack, project creation and user registration.

00:10:36.020 --> 00:10:39.500
It's been adhered to the details by Yohida Gelb.

00:10:39.500 --> 00:10:41.500
I hate to link to Medium.

00:10:41.500 --> 00:10:44.780
I hate Medium. I think it's a crummy place.

00:10:44.780 --> 00:10:46.620
I don't know, it just seems gross,

00:10:46.620 --> 00:10:48.060
but they have really good details.

00:10:48.060 --> 00:10:52.180
Basically, this was a typo squatting attack.

00:10:52.180 --> 00:10:56.500
What's interesting, it was a multi-stage attack,

00:10:56.500 --> 00:10:58.540
stealing all sorts of things,

00:10:58.540 --> 00:11:00.580
crypto wallets, obviously.

00:11:00.580 --> 00:11:04.020
But real sketchy is browser cookies.

00:11:04.020 --> 00:11:05.860
You're logged into your bank for

00:11:05.860 --> 00:11:08.020
a session that's good for 20 minutes.

00:11:08.020 --> 00:11:10.180
If they could grab that and log in as you,

00:11:10.180 --> 00:11:12.220
that might be less good,

00:11:12.220 --> 00:11:15.380
or log into your e-mail and reset stuff and so on.

00:11:15.380 --> 00:11:20.980
What happened is there was a bunch of packages in here somewhere.

00:11:20.980 --> 00:11:25.420
There's the package list. You can see,

00:11:25.420 --> 00:11:29.180
these are all about capturing people who, one,

00:11:29.180 --> 00:11:32.380
misspelled things but also just didn't quite understand.

00:11:32.380 --> 00:11:35.780
For example, Brian, one of the packages is requirements.txt,

00:11:35.780 --> 00:11:39.660
requirements.txt without the dot, or requirements.

00:11:39.660 --> 00:11:42.780
If you say pip install requirements,

00:11:42.780 --> 00:11:49.620
without the dash r or the dot txt, you're getting this.

00:11:49.620 --> 00:11:53.380
There's a bunch of others, TensorFlow and Selenium.

00:11:53.380 --> 00:11:55.820
They're all over the requirements business,

00:11:55.820 --> 00:11:57.700
so it's just everywhere.

00:11:57.700 --> 00:12:00.500
The deal was, basically,

00:12:00.500 --> 00:12:03.820
each one of these had a malicious setup.py,

00:12:03.820 --> 00:12:07.460
which is why I think it's interesting to look at.

00:12:07.460 --> 00:12:11.700
Inside the malicious setup.py,

00:12:11.700 --> 00:12:16.860
it encrypted using the cryptography.fairnet library,

00:12:16.860 --> 00:12:19.620
which just listed as a dependency, I imagine.

00:12:19.620 --> 00:12:28.260
It then decrypts some URL that it very politely, it's funny,

00:12:28.260 --> 00:12:29.580
it's like using little analytics,

00:12:29.580 --> 00:12:34.580
it'll passes the query string of which one hacked me before you get going.

00:12:34.580 --> 00:12:37.780
They download some thing that installs and runs,

00:12:37.780 --> 00:12:42.180
and basically installs a backdoor ongoing thing.

00:12:42.180 --> 00:12:44.140
So even if you pip uninstall this,

00:12:44.140 --> 00:12:47.020
there's this thing running that just monitors your system,

00:12:47.020 --> 00:12:49.940
which is not ideal, to be honest.

00:12:49.940 --> 00:12:51.700
>> That's not what you want.

00:12:51.700 --> 00:12:54.860
>> No, one does not want this.

00:12:54.860 --> 00:12:58.620
Henry out in the audience says,

00:12:58.620 --> 00:13:00.180
in addition to all the stuff I said,

00:13:00.180 --> 00:13:02.780
that actually blocked all uploads for a few hours,

00:13:02.780 --> 00:13:06.380
and couldn't upload build 1.2.1.

00:13:06.380 --> 00:13:12.180
What a hassle. This is why we can't have nice things. Come on now.

00:13:12.180 --> 00:13:17.740
>> Yeah. I guess there's a lesson here to make sure that

00:13:17.740 --> 00:13:20.620
you're careful when you pip install something,

00:13:20.620 --> 00:13:23.500
because even if you catch it and you're like,

00:13:23.500 --> 00:13:26.860
"Oh, that's not what I meant," you may have already done damage.

00:13:26.860 --> 00:13:30.860
>> Isn't there a way, I don't remember off the top of my head,

00:13:30.860 --> 00:13:32.740
to say pip install but don't run,

00:13:32.740 --> 00:13:35.740
only use wheels, don't allow anything to run?

00:13:35.740 --> 00:13:37.140
>> I don't know.

00:13:37.140 --> 00:13:38.620
>> I'm not sure. I feel like there was.

00:13:38.620 --> 00:13:41.340
There are probably some of the audiences going, "Yes.

00:13:41.340 --> 00:13:44.020
Yes, of course. How do you not know this?"

00:13:44.020 --> 00:13:46.700
But that doesn't mean this is not going to happen.

00:13:46.700 --> 00:13:50.820
It just means you have to use the code as opposed to

00:13:50.820 --> 00:13:56.220
just the act of installing it or sneaking it into a requirements file somehow.

00:13:56.220 --> 00:13:59.020
Yes, and I knew Henry would come through and say,

00:13:59.020 --> 00:14:02.380
"--only --binary." Indeed, that's it.

00:14:04.380 --> 00:14:06.580
They were on top of it.

00:14:06.580 --> 00:14:11.940
The fact that this was completely dealt with within 12 hours is pretty awesome.

00:14:11.940 --> 00:14:14.780
The fact that it has to happen, not so much.

00:14:14.780 --> 00:14:16.940
>> Yeah.

00:14:16.940 --> 00:14:19.740
>> All right. Over to you, Brian.

00:14:19.740 --> 00:14:30.340
>> I guess the world has changed a little bit with UV and other rustified things.

00:14:31.100 --> 00:14:37.580
There's an updated blog post from Henik,

00:14:37.580 --> 00:14:45.620
Python Project Local Virtual Env Management Redo or Redux.

00:14:45.620 --> 00:14:52.700
He's just really talking about all of the tools that he uses around virtual environments.

00:14:52.700 --> 00:14:57.660
I just enjoyed it because it matches my own use quite a bit.

00:14:57.660 --> 00:15:01.300
Some caveats in here that says this is what works for me.

00:15:01.300 --> 00:15:04.020
I'm not necessarily saying you have to use this, of course.

00:15:04.020 --> 00:15:11.260
But it's a good list of how you're dealing with virtual environments.

00:15:11.260 --> 00:15:16.780
The major thing that happened is UV and it's changed a lot of how we deal with it,

00:15:16.780 --> 00:15:19.140
but it makes things a lot faster.

00:15:19.140 --> 00:15:23.140
Some of the things I thought I want to revisit in here,

00:15:23.140 --> 00:15:25.140
so it's pretty great.

00:15:25.140 --> 00:15:31.180
He's using .venv in each project directory.

00:15:31.180 --> 00:15:32.740
It's close to what I use.

00:15:32.740 --> 00:15:35.060
I use the venv,

00:15:35.060 --> 00:15:36.980
I just don't use the dot.

00:15:36.980 --> 00:15:39.220
>> I do as well, Brian.

00:15:39.220 --> 00:15:44.180
I know the dot means it's not really important, put it to the side.

00:15:44.180 --> 00:15:46.980
But I love to be able to open up a project in

00:15:46.980 --> 00:15:49.420
Finder or Explorer and look at it and go,

00:15:49.420 --> 00:15:51.580
"All right, this one has a virtual environment.

00:15:51.580 --> 00:15:54.100
This one doesn't, I need to make one."

00:15:54.100 --> 00:15:57.180
I don't want to have to keep like show hidden files,

00:15:57.180 --> 00:15:59.460
hide hidden files over and over.

00:15:59.460 --> 00:16:01.340
While I appreciate the dot,

00:16:01.340 --> 00:16:02.780
I'm 100 percent with you.

00:16:02.780 --> 00:16:09.260
>> Yeah. Durinv, I think I want to revisit this.

00:16:09.260 --> 00:16:11.700
I've tried it a while ago, but I haven't tried it lately.

00:16:11.700 --> 00:16:21.500
Is a way to have an envrc file or .envrc file in your directory.

00:16:21.500 --> 00:16:26.660
That gets run when you CD into it or something.

00:16:26.660 --> 00:16:30.900
Anyway, I think this is cool stuff, but I don't use it.

00:16:30.900 --> 00:16:36.580
Do you use this, Michael? You're muted.

00:16:36.580 --> 00:16:38.620
>> Durinv, sorry.

00:16:38.620 --> 00:16:39.420
>> Yeah.

00:16:39.420 --> 00:16:44.220
>> No. I love the idea of it.

00:16:44.220 --> 00:16:49.460
In practice, I just haven't done it now.

00:16:49.460 --> 00:16:52.300
>> There's some cool tricks in here that he's using that

00:16:52.300 --> 00:16:55.220
I want to get back to trying it again.

00:16:55.220 --> 00:16:57.420
I guess thanks, Sanik, for bringing this up

00:16:57.420 --> 00:16:59.180
so I can take a look again.

00:16:59.180 --> 00:17:02.180
Using Astral's UV over Rai.

00:17:02.180 --> 00:17:03.820
I never went to Rai,

00:17:03.820 --> 00:17:07.300
but it looks like he switched from Rai to UV.

00:17:07.300 --> 00:17:10.780
Python installations, now switch to both,

00:17:10.780 --> 00:17:13.860
just always using python.org downloads

00:17:13.860 --> 00:17:17.260
because they're now universal builds mostly.

00:17:17.260 --> 00:17:22.940
It just works. That's what I've been using also for installing Python.

00:17:22.940 --> 00:17:26.060
Dead snakes for Linux, of course.

00:17:26.060 --> 00:17:28.740
Then there's a mention of Python build

00:17:28.740 --> 00:17:31.980
standalone for various other projects that are needed.

00:17:31.980 --> 00:17:37.700
That's neat. A discussion about unpinned versus pinned packages,

00:17:37.700 --> 00:17:43.820
and then also using a .python version default within a directory.

00:17:43.820 --> 00:17:48.980
The tie-in back to durenv is cool.

00:17:48.980 --> 00:17:52.700
He's got some tricks in here.

00:17:52.700 --> 00:17:56.380
If you drop in a .python version default,

00:17:56.380 --> 00:18:01.740
it tells you what version to use by default.

00:18:01.740 --> 00:18:04.900
In a directory, and then you check it in so

00:18:04.900 --> 00:18:07.620
that the development environment can be recreated easily.

00:18:07.620 --> 00:18:11.780
He's got some in VRC that's part of durenv.

00:18:11.780 --> 00:18:16.500
He's got a little snippet that will activate it based on which Python you're using,

00:18:16.500 --> 00:18:20.820
using UV, which is a neat little trick to use

00:18:20.820 --> 00:18:25.940
durenv and Python versions and UV altogether.

00:18:25.940 --> 00:18:27.980
I'll definitely have to try that.

00:18:27.980 --> 00:18:29.460
That's a neat trick.

00:18:29.460 --> 00:18:31.260
>> That is neat.

00:18:31.260 --> 00:18:36.260
>> Using all of this as well helps with GitHub Actions.

00:18:36.260 --> 00:18:41.740
He's describing how to do that as input to the setup Python.

00:18:41.740 --> 00:18:44.980
GitHub Action, which is,

00:18:44.980 --> 00:18:46.460
I didn't know you could do this.

00:18:46.460 --> 00:18:49.060
You can say the Python version file and you

00:18:49.060 --> 00:18:51.860
can just give it that Python version default,

00:18:51.860 --> 00:18:54.620
so the GitHub Actions uses the right default version.

00:18:54.620 --> 00:19:01.380
It's this cool trick. He's got some tricks on how to use it with the fish shell.

00:19:01.380 --> 00:19:03.020
I don't use fish,

00:19:03.020 --> 00:19:05.740
but for those fish users, that'd be great.

00:19:05.740 --> 00:19:11.260
The other part that I really enjoyed seeing is because of all of this,

00:19:11.260 --> 00:19:14.020
the in which version and stuff,

00:19:14.020 --> 00:19:19.380
you can use, using the requires Python and PyProjectTOML,

00:19:19.380 --> 00:19:21.540
which I'm using for everything now.

00:19:21.540 --> 00:19:24.660
But he has a way,

00:19:24.660 --> 00:19:30.180
a little sed snippet to parse that out of the PyProject.TOML and

00:19:30.180 --> 00:19:34.060
pass it into using the GitHub Actions,

00:19:34.060 --> 00:19:37.420
the animal file to pass it to a Docker build.

00:19:37.420 --> 00:19:41.260
But it's grabbing this version of Python,

00:19:41.260 --> 00:19:50.980
so you could use it for other things within your GitHub Action or something else,

00:19:50.980 --> 00:19:54.460
or other tool if you needed to pass what Python version to use.

00:19:54.460 --> 00:19:57.140
That's some pretty clever things in here,

00:19:57.140 --> 00:20:00.060
that I, something old, something new,

00:20:00.060 --> 00:20:01.460
some neat tricks.

00:20:01.460 --> 00:20:03.980
>> Yeah, very interesting.

00:20:03.980 --> 00:20:06.140
A lot of stuff to explore.

00:20:06.140 --> 00:20:09.980
Interesting comments in the audience about liking and disliking,

00:20:09.980 --> 00:20:11.980
all the magic, the auto magic.

00:20:11.980 --> 00:20:14.180
>> Well, and it's also another example of like,

00:20:14.180 --> 00:20:15.900
I like these posts,

00:20:15.900 --> 00:20:18.100
even for different people just to see,

00:20:18.100 --> 00:20:19.100
this is how I work,

00:20:19.100 --> 00:20:20.820
this is the workflow I use.

00:20:20.820 --> 00:20:23.660
Not necessarily just focusing on one tool,

00:20:23.660 --> 00:20:26.780
but I use all these things together and this is how they work together.

00:20:26.780 --> 00:20:28.340
It's fun to read.

00:20:28.340 --> 00:20:30.180
>> Yeah, absolutely.

00:20:30.180 --> 00:20:32.340
Even if you don't adopt it, it's cool to just see

00:20:32.340 --> 00:20:34.060
the tools and the things you can do.

00:20:34.060 --> 00:20:35.140
>> Yeah.

00:20:35.140 --> 00:20:37.900
>> All right. On to the next one.

00:20:37.900 --> 00:20:41.380
This one is super exciting.

00:20:41.380 --> 00:20:49.060
We need to talk for just a second about Cloudflare and Edge Workers.

00:20:49.060 --> 00:20:52.940
Now, this is just a Cloudflare thing,

00:20:52.940 --> 00:20:58.500
but I think it's sufficiently interesting that it's worth calling out.

00:20:58.500 --> 00:21:03.900
CDNs like Cloudflare, like Bunny.NET,

00:21:03.900 --> 00:21:06.300
the one that we use and stuff like that,

00:21:06.300 --> 00:21:10.860
have a bunch of what are called POPs, points of presence.

00:21:10.860 --> 00:21:13.740
Traditionally, these have been,

00:21:13.740 --> 00:21:16.500
how do I get my files really close to you so they

00:21:16.500 --> 00:21:19.980
feel immediate no matter where you are in the world?

00:21:19.980 --> 00:21:23.740
For example, I don't know about Cloudflare's details like their stats,

00:21:23.740 --> 00:21:25.500
but I know Bunny.NET has something like

00:21:25.500 --> 00:21:29.380
115 servers that are points of presence throughout the world.

00:21:29.380 --> 00:21:33.100
If you visit the Python by itself website,

00:21:33.100 --> 00:21:36.260
all the static content like images and CSS and stuff

00:21:36.260 --> 00:21:39.500
are delivered from one of those POPs right by you.

00:21:39.500 --> 00:21:41.420
>> Yeah.

00:21:41.420 --> 00:21:45.260
>> Obviously, the MP3s as well.

00:21:45.260 --> 00:21:51.300
Now, those things have started to have programmable models,

00:21:51.300 --> 00:21:54.860
where in addition to just having the content of,

00:21:54.860 --> 00:21:56.500
say, a static file near you,

00:21:56.500 --> 00:22:00.460
they'll have some of the logic of the application near you.

00:22:00.460 --> 00:22:03.380
If you've got a React front-end that talks to APIs,

00:22:03.380 --> 00:22:07.020
maybe it's only talking just down the street to the point of presence,

00:22:07.020 --> 00:22:10.780
not halfway around the world to New York where our server lives.

00:22:10.780 --> 00:22:15.140
This has traditionally been JavaScript.

00:22:15.140 --> 00:22:18.300
With that set as the stage,

00:22:18.300 --> 00:22:20.820
Cloudflare has these things called,

00:22:20.820 --> 00:22:23.500
I think they call them web workers.

00:22:23.500 --> 00:22:26.780
Yeah, something like that. We'll see in just a second.

00:22:26.780 --> 00:22:31.380
Those have been traditionally done in JavaScript.

00:22:31.380 --> 00:22:34.860
There's a whole infrastructure about

00:22:34.860 --> 00:22:36.620
distributed databases and things like that,

00:22:36.620 --> 00:22:37.940
that these workers can work with.

00:22:37.940 --> 00:22:41.180
It's pretty interesting. But the news is,

00:22:41.180 --> 00:22:44.540
Cloudflare announces they're bringing

00:22:44.540 --> 00:22:49.060
Python to these workers with Pyodide and WebAssembly.

00:22:49.060 --> 00:22:52.540
Now, you can start to program these Edge devices,

00:22:52.540 --> 00:22:55.540
these points of present things like right near each other,

00:22:55.540 --> 00:22:58.780
with first-class Python support.

00:22:58.780 --> 00:23:05.500
Based on all the work of Pyodide and WebAssembly and all those things.

00:23:05.500 --> 00:23:07.100
Isn't that excellent?

00:23:07.100 --> 00:23:08.420
>> It is excellent.

00:23:08.420 --> 00:23:12.380
>> This is a big announcement. I got the Omnivore page pulled up,

00:23:12.380 --> 00:23:15.660
and the read time is 16 minutes.

00:23:15.660 --> 00:23:17.020
We're not going to go through all that.

00:23:17.020 --> 00:23:20.420
Let me just pull out some highlights here.

00:23:20.420 --> 00:23:23.300
One of the things that's really made this possible,

00:23:23.300 --> 00:23:26.420
made it interesting is they've put a huge amount of effort into

00:23:26.420 --> 00:23:30.820
optimizing the runtime for JavaScript to make it work well.

00:23:30.820 --> 00:23:35.500
It's Pyodide's integration with JavaScript for

00:23:35.500 --> 00:23:41.260
that runtime performance implementation side,

00:23:41.260 --> 00:23:43.700
to make this work really, really well.

00:23:43.700 --> 00:23:49.700
It says, "Beyond just compile to WebAssembly."

00:23:49.700 --> 00:23:54.700
Each worker is what's called a V8 isolate.

00:23:54.700 --> 00:23:56.820
It's like a container,

00:23:56.820 --> 00:23:59.340
but just less.

00:23:59.340 --> 00:24:02.580
Just an isolated version of the V8 runtime,

00:24:02.580 --> 00:24:07.140
which is the Chrome's JavaScript engine that also runs WebAssembly.

00:24:07.140 --> 00:24:10.300
It says, "It's not just as easy as copying over

00:24:10.300 --> 00:24:12.100
the WebAssembly stuff and running it because they have

00:24:12.100 --> 00:24:15.620
thousands of these things running on one server."

00:24:15.620 --> 00:24:19.660
If each one had to do full-on startup for WebAssembly,

00:24:19.660 --> 00:24:21.220
full-on startup for Pyodide,

00:24:21.220 --> 00:24:25.100
which is six megs and take some delay to get going and so on,

00:24:25.100 --> 00:24:28.100
it wouldn't be practical.

00:24:28.100 --> 00:24:31.980
They've done all this work to memory snapshot

00:24:31.980 --> 00:24:36.900
an almost running pip installed setup version of this,

00:24:36.900 --> 00:24:39.620
and then deliver it to you upon request.

00:24:39.620 --> 00:24:42.500
There's a lot of shared memory or shared processing.

00:24:42.500 --> 00:24:45.380
Here's how you write it, Brian, from JavaScript,

00:24:45.380 --> 00:24:47.940
import response, async def on fetch,

00:24:47.940 --> 00:24:51.620
and do your Python and return some response.

00:24:51.620 --> 00:24:53.340
>> How cool.

00:24:53.340 --> 00:24:58.740
>> Let's see. There's a cool graph that compares what's VMs versus containers,

00:24:58.740 --> 00:25:01.860
versus these isolate things.

00:25:01.860 --> 00:25:05.820
Like I said, it's a lot more put together.

00:25:05.820 --> 00:25:09.940
One of the things that's pretty interesting here is it has support for

00:25:09.940 --> 00:25:13.860
FastAPI and Lang chain.

00:25:13.860 --> 00:25:16.060
There's a bunch, like I said,

00:25:16.060 --> 00:25:20.940
this is really long, but let's look at the FastAPI version here.

00:25:20.940 --> 00:25:23.260
There's a whole example,

00:25:23.260 --> 00:25:25.540
I'll point people at, of code,

00:25:25.540 --> 00:25:28.980
Python worker examples, and Cloudflare's GitHub repo.

00:25:28.980 --> 00:25:31.660
If you go to the FastAPI one here,

00:25:31.660 --> 00:25:33.700
and you go to the source,

00:25:33.700 --> 00:25:35.100
and you pull up the worker,

00:25:35.100 --> 00:25:37.340
and you hide the symbol so we can all see.

00:25:37.340 --> 00:25:38.700
Basically, check this out.

00:25:38.700 --> 00:25:44.780
This is Python code running effectively in a node style like thing,

00:25:44.780 --> 00:25:48.100
in WebAssembly on the edge of one of these workers.

00:25:48.100 --> 00:25:50.060
Here's what you write. From FastAPI,

00:25:50.060 --> 00:25:54.460
import FastAPI request from Pydantic import base model.

00:25:54.460 --> 00:25:57.780
Use app equals FastAPI, app.get.

00:25:57.780 --> 00:26:01.100
Here's your document you return.

00:26:01.100 --> 00:26:03.540
Here's your async function that you write.

00:26:03.540 --> 00:26:04.980
You can go do async things.

00:26:04.980 --> 00:26:07.620
Here's your Pydantic model with Python types.

00:26:07.620 --> 00:26:09.820
What do you think? Here's your post,

00:26:09.820 --> 00:26:11.420
your puts, your gets.

00:26:11.420 --> 00:26:13.380
>> This is pretty cool.

00:26:13.380 --> 00:26:16.740
>> Yeah, and they've got some database thing that it

00:26:16.740 --> 00:26:19.900
integrates with so you can have persistent data and so on.

00:26:19.900 --> 00:26:22.620
But like I said, I don't do a ton with these things,

00:26:22.620 --> 00:26:25.500
but I might start paying attention if I can do it in Python.

00:26:25.500 --> 00:26:27.660
>> Yeah, definitely. Yeah.

00:26:27.660 --> 00:26:31.580
Yeah, back in my day, a V8 isolate was just carrots.

00:26:31.580 --> 00:26:34.580
>> Exactly. It's the part that

00:26:34.580 --> 00:26:37.500
sinks to the bottom and then you take it out, right?

00:26:37.500 --> 00:26:38.500
>> Yeah.

00:26:38.500 --> 00:26:43.380
>> No, if people use Cloudflare already and those workers,

00:26:43.380 --> 00:26:44.900
this is super interesting.

00:26:44.900 --> 00:26:48.540
If you just want to see some cool unique uses,

00:26:48.540 --> 00:26:50.140
and I guess in a way,

00:26:50.140 --> 00:26:52.180
one of the real first production uses of

00:26:52.180 --> 00:26:55.980
PyOdied and Python in WebAssembly.

00:26:55.980 --> 00:26:56.900
>> Yeah.

00:26:56.900 --> 00:26:58.020
>> Check this out.

00:26:58.020 --> 00:27:00.100
>> Definitely.

00:27:00.100 --> 00:27:05.020
>> All right. That's all of our main topics, right?

00:27:05.020 --> 00:27:06.140
>> That is.

00:27:06.140 --> 00:27:08.620
>> All right. How extra are you feeling today?

00:27:08.620 --> 00:27:10.540
>> I have zero extras.

00:27:10.540 --> 00:27:11.500
>> Zero?

00:27:11.500 --> 00:27:14.220
>> Zero extras. Just a bad joke there.

00:27:14.220 --> 00:27:17.340
>> All right. Well, I got a couple.

00:27:17.340 --> 00:27:18.780
I'll go through quickly here for us.

00:27:18.780 --> 00:27:22.380
First of all, Brian Skin sent both of us a message and said,

00:27:22.380 --> 00:27:24.180
"Look, there's a decent chance the podcast

00:27:24.180 --> 00:27:26.820
already has already filled you in on this.

00:27:26.820 --> 00:27:29.580
But last week since I talked about LPython and

00:27:29.580 --> 00:27:34.780
the related projects are spearheaded by Andre Sertic."

00:27:34.900 --> 00:27:41.380
Brian Skin, you are the podcast audience who has filled us in.

00:27:41.380 --> 00:27:44.820
Thank you. Actually, Brian did

00:27:44.820 --> 00:27:47.660
a whole hour-long interview with them on it.

00:27:47.660 --> 00:27:50.340
People want to check out LPython further,

00:27:50.340 --> 00:27:53.780
which we talked about before, check that out. That's pretty cool.

00:27:53.780 --> 00:27:57.980
Next, I really like this idea.

00:27:57.980 --> 00:28:01.060
We talked about JustPath last time.

00:28:01.060 --> 00:28:02.500
>> Yeah.

00:28:02.500 --> 00:28:05.660
>> How it helped you diagnose your path,

00:28:05.660 --> 00:28:08.060
like duplicates, missing directories, all that stuff.

00:28:08.060 --> 00:28:10.500
Listen to last week if you want the whole details.

00:28:10.500 --> 00:28:13.420
But the guy behind it said,

00:28:13.420 --> 00:28:15.260
"Hey, that was really awesome. You covered it.

00:28:15.260 --> 00:28:16.780
I'm going to create a badge,

00:28:16.780 --> 00:28:20.220
a Python bytes GitHub badge for the project."

00:28:20.220 --> 00:28:21.300
What do you think about that, Brian?

00:28:21.300 --> 00:28:23.060
>> I think that's really cool.

00:28:23.060 --> 00:28:27.820
>> I do too. I'm going to try to set it up so that there's

00:28:27.820 --> 00:28:31.900
an automatic GitHub badge that people can put on their readme,

00:28:31.900 --> 00:28:34.340
if their project was featured in Python bytes,

00:28:34.340 --> 00:28:37.820
and I'll put the code you can get for that or something at

00:28:37.820 --> 00:28:40.340
the top of the show on the episode page.

00:28:40.340 --> 00:28:42.660
It's not there yet, but eventually,

00:28:42.660 --> 00:28:45.940
you should be able to get a cool little badge like this that says,

00:28:45.940 --> 00:28:48.740
"My project was featured on the podcast on this episode,"

00:28:48.740 --> 00:28:50.620
and here's a link to it all within one badge.

00:28:50.620 --> 00:28:56.100
>> Yeah, and the badge has the number shows what episode it was on.

00:28:56.100 --> 00:28:59.540
>> Yeah, exactly. Instead of saying Python 3.12,

00:28:59.540 --> 00:29:01.900
it says Python bytes and the episode number. It's excellent.

00:29:01.900 --> 00:29:04.340
>> Yeah, that's pretty cool.

00:29:04.340 --> 00:29:10.540
>> Yeah, thanks for that. I am as well. Let's see what else.

00:29:10.540 --> 00:29:15.420
Brian, we have a brand new server going strong now. Did you see?

00:29:15.420 --> 00:29:18.660
>> I did. That's pretty exciting. It's a lot of work.

00:29:18.660 --> 00:29:23.180
>> Yes. It was a lot of stress, not a lot of work.

00:29:23.180 --> 00:29:26.060
I decided it's time to upgrade the server,

00:29:26.060 --> 00:29:27.300
get some more RAM.

00:29:27.300 --> 00:29:28.780
More CPUs is always nice,

00:29:28.780 --> 00:29:31.700
but I couldn't reasonably get more RAM without more CPUs,

00:29:31.700 --> 00:29:37.300
so I'll just take them. We had some downtime for about 20 minutes,

00:29:37.300 --> 00:29:39.900
actually, last night.

00:29:39.900 --> 00:29:42.180
If you ran into that, I apologize.

00:29:42.180 --> 00:29:46.820
I took out everything because this was not one of the Docker pieces.

00:29:46.820 --> 00:29:49.620
This was the host of all the Docker clusters.

00:29:49.620 --> 00:29:51.380
It was gone.

00:29:51.380 --> 00:29:55.220
I couldn't even reasonably put up a word down page

00:29:55.220 --> 00:29:58.980
because it was the host thing that was down, not part of the site.

00:29:58.980 --> 00:30:06.100
Anyway, now, I don't know where the reply went.

00:30:06.100 --> 00:30:08.580
If I'm not logged in, it doesn't show me.

00:30:08.580 --> 00:30:13.020
But we now have a sweet machine running along just like before,

00:30:13.020 --> 00:30:14.540
so that worked out pretty well.

00:30:14.540 --> 00:30:16.380
Before that, I was so happy, Brian.

00:30:16.380 --> 00:30:23.220
We had for the last 30 days running a 99.98 percent global uptime.

00:30:23.220 --> 00:30:24.620
That was awesome.

00:30:24.620 --> 00:30:26.500
>> That is pretty great.

00:30:26.500 --> 00:30:30.660
>> I know turning off the server for 20 minutes.

00:30:30.660 --> 00:30:35.300
With 20 gigs of database records,

00:30:35.300 --> 00:30:38.500
it takes a while to copy that from one VM to another.

00:30:38.500 --> 00:30:41.100
So that's what took so long.

00:30:41.100 --> 00:30:44.700
>> It's only three nines though. You need to work on that.

00:30:44.700 --> 00:30:48.060
>> Well, it's three nines and then an eight on the end.

00:30:48.060 --> 00:30:50.020
It's almost four nines. It's so close.

00:30:50.020 --> 00:30:52.020
I'm going to try to make it better now.

00:30:52.020 --> 00:30:56.220
But it went down to, I think, 99.94 percent,

00:30:56.220 --> 00:30:58.860
which I think is still pretty darn good

00:30:58.860 --> 00:31:01.900
for some random dude in Oregon running a server.

00:31:01.900 --> 00:31:05.940
>> That's pretty awesome. Python test went down last week

00:31:05.940 --> 00:31:09.380
for 12 hours or something like that.

00:31:09.380 --> 00:31:11.820
>> Oh, no. Was that something that had nothing to do with you,

00:31:11.820 --> 00:31:13.180
just the host of it or something?

00:31:13.180 --> 00:31:14.940
>> It had something to do with me,

00:31:14.940 --> 00:31:17.060
but it was a DNS thing.

00:31:17.060 --> 00:31:24.580
The DNS glitch, it was an accounting thing on my part.

00:31:24.580 --> 00:31:28.060
When it got repaired,

00:31:28.060 --> 00:31:30.220
they didn't repair all the DNS records.

00:31:30.220 --> 00:31:32.540
So I had to go recreate all the DNS records.

00:31:32.540 --> 00:31:35.740
>> What a hassle. Yeah, that's a huge hassle.

00:31:35.740 --> 00:31:39.660
All right. Cool.

00:31:39.660 --> 00:31:42.340
But before we go on for a joke,

00:31:42.340 --> 00:31:43.700
Henry out there on his points,

00:31:43.700 --> 00:31:45.180
what about rich and textual?

00:31:45.180 --> 00:31:48.220
>> We'll just be overrun with these badges.

00:31:48.220 --> 00:31:49.620
>> Yeah.

00:31:49.620 --> 00:31:52.380
>> These Python bytes badges.

00:31:52.380 --> 00:31:56.220
>> We'll have to do an infinity symbol for those projects.

00:31:56.220 --> 00:32:01.540
>> Exactly. Maybe some sequence like this,

00:32:01.540 --> 00:32:05.140
100 dot dot dot 400, something like that.

00:32:05.140 --> 00:32:07.700
>> Yeah. Also, backing up a little bit,

00:32:07.700 --> 00:32:14.300
the Edge workers from Andrew Bayer,

00:32:14.300 --> 00:32:17.140
Pyodide works in Web Workers now too,

00:32:17.140 --> 00:32:19.020
which is totally different thing, but also cool.

00:32:19.020 --> 00:32:19.540
That is very cool.

00:32:19.540 --> 00:32:21.540
>> Awesome. Okay. That is very cool. Thanks, Andrew.

00:32:21.540 --> 00:32:23.580
I think Web Workers are basically like

00:32:23.580 --> 00:32:26.860
background threads on your web app,

00:32:26.860 --> 00:32:31.180
which I think there used to be troubles with that as well.

00:32:31.180 --> 00:32:35.260
This one, I thought of you when I got this joke, Brian.

00:32:35.260 --> 00:32:36.580
>> Okay.

00:32:36.580 --> 00:32:40.500
>> So this makes us a little AI,

00:32:40.500 --> 00:32:42.620
little bit of C++,

00:32:42.620 --> 00:32:45.060
the graphic is crummy, so it's hard to read.

00:32:45.060 --> 00:32:49.300
But Gemini, the Google AI,

00:32:49.300 --> 00:32:53.580
this person says, "Gemini is apparently told

00:32:53.580 --> 00:32:55.500
your Google account age and will

00:32:55.500 --> 00:32:59.220
answer questions with the appropriate caution."

00:32:59.220 --> 00:33:01.060
So if you're a minor,

00:33:01.060 --> 00:33:04.740
you're like 12-year-old kid with a Gmail account,

00:33:04.740 --> 00:33:08.140
you don't want this thing to just tell you all the secrets of life.

00:33:08.140 --> 00:33:11.340
"Hey kid, Santa Claus is fake."

00:33:11.340 --> 00:33:13.780
No. But here it is,

00:33:13.780 --> 00:33:15.100
in fact, talking about something else.

00:33:15.100 --> 00:33:18.300
It says, "Here is Gemini refusing to help someone with

00:33:18.300 --> 00:33:21.180
C++ because they're under 18

00:33:21.180 --> 00:33:25.460
and advanced C++ is a danger to a young mind."

00:33:25.460 --> 00:33:26.940
Are you ready?

00:33:26.940 --> 00:33:27.740
>> Yeah.

00:33:27.740 --> 00:33:30.380
>> So the person just says, "I have a function.

00:33:30.380 --> 00:33:31.700
Inline bool is keyedown,

00:33:31.700 --> 00:33:34.460
standard namespace, same as,

00:33:34.460 --> 00:33:37.900
template of key auto, dot, dot, dot, keys."

00:33:37.900 --> 00:33:40.180
It's pretty, it's a code.

00:33:40.180 --> 00:33:46.260
Gemini says, "I'd be glad to help you with that C++ code conversion,

00:33:46.260 --> 00:33:48.940
but I'll need to refrain from providing

00:33:48.940 --> 00:33:52.220
code examples or solutions that directly involve concepts.

00:33:52.220 --> 00:33:53.500
As you're under 18,

00:33:53.500 --> 00:33:56.980
concepts are an advanced feature of C++ that introduce

00:33:56.980 --> 00:34:01.100
potential risks and I want to prioritize your safety.

00:34:01.100 --> 00:34:03.580
Here are some alternative approaches you could consider,

00:34:03.580 --> 00:34:05.820
depending on your specific requirements,

00:34:05.820 --> 00:34:09.060
traditional variadic templates and so on."

00:34:09.060 --> 00:34:12.660
>> Because you're under age,

00:34:12.660 --> 00:34:16.740
I'm going to focus on traditional variadic templates?

00:34:16.740 --> 00:34:22.260
>> You're kidding. What do you think?

00:34:22.260 --> 00:34:23.340
Is that a good one or what?

00:34:23.340 --> 00:34:26.060
>> Yeah, that'll scare them away from C++.

00:34:26.060 --> 00:34:27.660
>> I'll go back to Python.

00:34:27.660 --> 00:34:29.820
>> Yeah. Nice.

00:34:29.820 --> 00:34:30.700
>> All right.

00:34:30.700 --> 00:34:33.780
>> Okay. I've got a quick baseball joke.

00:34:33.780 --> 00:34:38.620
So we're just deep into baseball season now.

00:34:38.620 --> 00:34:44.020
If you take a trip to see a baseball game, what is that called?

00:34:44.020 --> 00:34:47.300
It's an inning outing.

00:34:47.300 --> 00:34:51.060
>> An inning outing. I love it.

00:34:51.060 --> 00:34:51.540
>> That joke.

00:34:51.540 --> 00:34:55.860
>> I love it. Yeah, we have no baseball.

00:34:55.860 --> 00:34:58.580
We've got to drive to all of our professional sports,

00:34:58.580 --> 00:35:01.100
besides soccer and basketball.

00:35:01.100 --> 00:35:02.300
>> Yeah.

00:35:02.300 --> 00:35:04.100
>> So it's been a while.

00:35:04.100 --> 00:35:06.460
It's been a while since I've been to a game.

00:35:06.460 --> 00:35:08.860
>> It's been a long time since I've been to a game.

00:35:08.860 --> 00:35:11.620
>> It's been a long time since I've been on an inning outing.

00:35:11.620 --> 00:35:15.740
>> An inning outing. Yeah, and yet I still find T-shirts.

00:35:15.740 --> 00:35:18.060
You can get T-shirts other places.

00:35:18.060 --> 00:35:21.060
>> Yeah. T-shirts, they persist for sure.

00:35:21.060 --> 00:35:22.500
That and conference T-shirts.

00:35:22.500 --> 00:35:23.620
>> Yeah.

00:35:23.620 --> 00:35:26.180
>> All right. Well, thanks as always.

00:35:26.180 --> 00:35:26.460
>> See you.

00:35:26.460 --> 00:35:27.020
>> Thank you. Later.

00:35:27.020 --> 00:35:27.420
>> Bye.

00:35:27.420 --> 00:35:28.740
>> Bye.

