WEBVTT

00:00:00.000 --> 00:00:07.040
Hey, everybody. Welcome to the live stream. Super excited to have you here today and be


00:00:07.040 --> 00:00:14.320
here with Michael and with everybody online. This is just, it's a treat every week. So


00:00:14.320 --> 00:00:19.440
let's just jump in and get started. Hello and welcome to Python Bytes, where we deliver


00:00:19.440 --> 00:00:25.800
Python news and headlines directly to your earbuds. This is episode 303, recorded September


00:00:25.800 --> 00:00:30.740
27th 2022 and I am Brian Okken and I'm Michael Kennedy


00:00:30.740 --> 00:00:33.640
And


00:00:33.640 --> 00:00:37.760
We've got a lot of great stuff to talk about today and it's a wonderful September day


00:00:37.760 --> 00:00:42.960
It's finally kind of not feeling like the blazing summer, but it's still too hot. But yeah


00:00:42.960 --> 00:00:50.160
It's that lovely fall before it rains for 120 days straight the pre fake fall. Yeah


00:00:50.160 --> 00:00:54.960
All right, well


00:00:55.040 --> 00:00:55.880
- What are you gonna--


00:00:55.880 --> 00:00:58.100
- The Python news still flows in the fall.


00:00:58.100 --> 00:00:58.940
- Yes.


00:00:58.940 --> 00:00:59.760
- Got all sorts of good stuff.


00:00:59.760 --> 00:01:00.600
- Yeah.


00:01:00.600 --> 00:01:04.100
- But what I got on deck for us is a bit of a follow-up.


00:01:04.100 --> 00:01:08.100
So I got this message from Mikhail Honkala,


00:01:08.100 --> 00:01:12.120
who sent over this repo that he put together.


00:01:12.120 --> 00:01:15.180
Says, "You spoke about,"


00:01:15.180 --> 00:01:18.260
what was it called?


00:01:18.260 --> 00:01:24.880
The regex library from Al Swigert.


00:01:24.880 --> 00:01:27.960
>> Yeah. Humre.


00:01:27.960 --> 00:01:32.640
>> Humre. I said, "You know what?


00:01:32.640 --> 00:01:34.560
There's a bunch of these projects I'd


00:01:34.560 --> 00:01:37.020
really like to get my head around them."


00:01:37.020 --> 00:01:41.120
He went to all the trouble to do a whole research project.


00:01:41.120 --> 00:01:42.160
>> How awesome.


00:01:42.160 --> 00:01:45.400
>> A categorization or a taxonomy of


00:01:45.400 --> 00:01:48.680
these different libraries which is really fantastic.


00:01:48.680 --> 00:01:53.000
I'm linking to his GitHub repository that's basically a read me.


00:01:53.000 --> 00:01:56.240
I mean, GitHub's kind of the new blog for code analysis.


00:01:56.240 --> 00:02:01.200
And it says, RE for humans,


00:02:01.200 --> 00:02:03.200
regular expressions for humans.


00:02:03.200 --> 00:02:06.840
And it says, there's a bunch of different options.


00:02:06.840 --> 00:02:09.240
This list could be useful to help you decide,


00:02:09.240 --> 00:02:10.680
you know, if you're looking for a tool,


00:02:10.680 --> 00:02:12.800
you'll just know what's out there


00:02:12.800 --> 00:02:15.040
and you'll get a quick look and feel


00:02:15.040 --> 00:02:18.480
of how each library's API is.


00:02:18.480 --> 00:02:20.200
Or if you're thinking about building a tool,


00:02:20.200 --> 00:02:22.000
you can check out the alternative approaches


00:02:22.000 --> 00:02:24.080
and either contribute to an existing package


00:02:24.080 --> 00:02:27.240
or see if your thing is truly unique.


00:02:27.240 --> 00:02:29.080
And if you're building a tool or already have one,


00:02:29.080 --> 00:02:31.580
you can communicate your differences


00:02:31.580 --> 00:02:33.080
compared to the other libraries.


00:02:33.080 --> 00:02:35.820
Okay, so there's a bunch of packages listed here


00:02:35.820 --> 00:02:39.740
with some code examples.


00:02:39.740 --> 00:02:41.880
So the first one,


00:02:41.880 --> 00:02:45.740
Mikhail calls flow style regular expression generators.


00:02:45.740 --> 00:02:48.580
I would call them fluent style,


00:02:48.580 --> 00:02:50.560
but where you say, you know,


00:02:50.560 --> 00:02:53.640
function call dot function call dot function call dot function call.


00:02:53.640 --> 00:02:59.000
Basically, the result of working with a library or calling a function,


00:02:59.000 --> 00:03:01.240
it returns the same thing again and again.


00:03:01.240 --> 00:03:02.320
And you can kind of build it up.


00:03:02.320 --> 00:03:03.960
Like ORMs are a lot like this.


00:03:03.960 --> 00:03:10.360
You know, you say like objects dot filter dot order by dot limit dot sort,


00:03:10.360 --> 00:03:13.280
like that kind of model.


00:03:13.280 --> 00:03:17.880
OK, so these include Python verbal expressions,


00:03:17.880 --> 00:03:22.880
edify, mre, regularize, and re_patterns.


00:03:22.880 --> 00:03:26.900
They all are similar but not the same.


00:03:26.900 --> 00:03:30.480
So I'll just, I'll read something off the top one,


00:03:30.480 --> 00:03:32.560
the Python verbal expressions.


00:03:32.560 --> 00:03:36.480
You would say ver x for version expression,


00:03:36.480 --> 00:03:41.480
dot anything, dot then space, dot then left bracket,


00:03:41.480 --> 00:03:44.880
dot or, parenthesis, so square bracket or,


00:03:44.880 --> 00:03:46.600
you know, open square bracket, open parenthesis,


00:03:46.600 --> 00:03:47.960
then dot anything.


00:03:47.960 --> 00:03:50.120
And that'll generate a regular expression


00:03:50.120 --> 00:03:55.120
that would then go and match basically like star


00:03:55.120 --> 00:03:58.480
and then space and then either square bracket


00:03:58.480 --> 00:03:59.760
or parenthesis open.


00:03:59.760 --> 00:04:00.600
What do you think?


00:04:00.600 --> 00:04:02.500
- I don't know if we're getting better


00:04:02.500 --> 00:04:05.360
than actual regular expressions at this point.


00:04:05.360 --> 00:04:08.000
- All right, well, let's go to the next category then.


00:04:08.000 --> 00:04:11.240
These are categorized as plus style


00:04:11.240 --> 00:04:13.000
regular expression generators.


00:04:13.840 --> 00:04:17.800
I would call them ones that like overload operators, right?


00:04:17.800 --> 00:04:22.800
They override what plus means and the pipe what that means.


00:04:22.800 --> 00:04:25.560
And it's a little bit like what PathLab does


00:04:25.560 --> 00:04:29.200
for forward slash or time delta, right?


00:04:29.200 --> 00:04:32.680
So here I could say, you know, this includes the humor.


00:04:32.680 --> 00:04:36.000
That's the one from Al Swarger.


00:04:36.000 --> 00:04:39.680
So this, let's see, which one of these do I think


00:04:39.680 --> 00:04:40.800
that I like the best?


00:04:42.560 --> 00:04:44.400
I'll probably go with this first one here.


00:04:44.400 --> 00:04:48.040
So you could say capture one or more of anything uppercase


00:04:48.040 --> 00:04:51.760
plus the empty string or the string of the space rather,


00:04:51.760 --> 00:04:55.040
plus either the open parentheses


00:04:55.040 --> 00:04:56.400
or the open square bracket.


00:04:56.400 --> 00:04:59.440
Is that one, do you like this style better?


00:04:59.440 --> 00:05:03.560
- Well, I'm probably a bad one to ask


00:05:03.560 --> 00:05:05.400
because I actually, I don't have a problem


00:05:05.400 --> 00:05:06.820
with regular expressions.


00:05:06.820 --> 00:05:08.680
- Sure, well, neither of these two


00:05:08.680 --> 00:05:09.880
are my favorite style either.


00:05:09.880 --> 00:05:14.480
I actually think I would use the format strings,


00:05:14.480 --> 00:05:16.360
which is the third category.


00:05:16.360 --> 00:05:18.520
The reason I say that is it's really different


00:05:18.520 --> 00:05:21.120
than regular expressions where these are kind of like


00:05:21.120 --> 00:05:24.880
a semantic wrapper on regular expressions.


00:05:24.880 --> 00:05:27.720
There's like a way, like I call functions,


00:05:27.720 --> 00:05:30.720
I give a name to the thing instead of just the symbol,


00:05:30.720 --> 00:05:35.720
like plus versus, you know, plus star, star, dot star.


00:05:35.720 --> 00:05:38.960
It could be anything or you could say anything.


00:05:38.960 --> 00:05:42.880
Also, with all of these, they have a special syntax that they use.


00:05:42.880 --> 00:05:45.480
So you don't have to learn regular expressions exactly,


00:05:45.480 --> 00:05:47.960
but you still have to learn their syntax.


00:05:47.960 --> 00:05:52.720
>> Yeah, that's true. So when I might use one of these libraries is when it's


00:05:52.720 --> 00:05:56.760
like not enough to go do full on regular expressions,


00:05:56.760 --> 00:06:02.440
but find is not sufficient or index, things like that.


00:06:02.440 --> 00:06:06.320
That's these string format styles.


00:06:06.320 --> 00:06:12.880
So if you knew I had like a log file or something and it said power colon some number


00:06:12.880 --> 00:06:16.960
Percent a string and then a temperature than another number


00:06:16.960 --> 00:06:24.800
You could just say power. This is the scan F library power colon percent F bracket percent


00:06:24.800 --> 00:06:29.240
percent s comma and then temp so you you basically


00:06:29.240 --> 00:06:36.220
The the format string you would use to generate this thing can now be used to parse it in reverse


00:06:36.220 --> 00:06:41.740
And so it'll say you have to have the word power colon and then a floating point number and then and so on


00:06:41.740 --> 00:06:45.940
That's the older that's the Python 2 style. I suppose


00:06:45.940 --> 00:06:48.700
then you have pars and


00:06:48.700 --> 00:06:50.420
simple match


00:06:50.420 --> 00:06:52.420
Which are both much more


00:06:52.420 --> 00:07:01.140
F string style so you so they have these are great. So like I'm looking at parse and that looks yeah


00:07:03.300 --> 00:07:05.580
So here, yeah, it says,


00:07:05.580 --> 00:07:08.860
here's the regular expression pattern thing you would make.


00:07:08.860 --> 00:07:10.780
You would say, just as a string,


00:07:10.780 --> 00:07:13.900
to get curly bracket amount colon D,


00:07:13.900 --> 00:07:18.700
item colon W, meet me at curly time.


00:07:18.700 --> 00:07:20.340
It just goes and finds the amount,


00:07:20.340 --> 00:07:25.020
the time, and the item as a beautiful,


00:07:25.020 --> 00:07:28.260
basically it's a reverse F string is what it is.


00:07:28.260 --> 00:07:31.920
So if you can express what you're looking for as an F string,


00:07:31.920 --> 00:07:33.720
then all of a sudden you can get it back.


00:07:33.720 --> 00:07:35.640
So for those kinds of matches,


00:07:35.640 --> 00:07:40.520
I think it's pretty different than a regular expression.


00:07:40.520 --> 00:07:45.560
>> It is, but it's especially those ones where you're not just trying to match


00:07:45.560 --> 00:07:48.980
a string but you're trying to pull data out.


00:07:48.980 --> 00:07:49.400
>> Yes.


00:07:49.400 --> 00:07:51.880
>> Where the regular expressions really get ugly.


00:07:51.880 --> 00:07:55.000
>> They do. I got to have a capture group and all this stuff.


00:07:55.000 --> 00:07:56.200
You're like, "Oh, geez,


00:07:56.200 --> 00:07:57.640
how do I do that again?"


00:07:57.640 --> 00:07:59.880
>> Exactly. The capture groups,


00:07:59.880 --> 00:08:02.240
and it's guaranteed to confuse somebody on your team,


00:08:02.240 --> 00:08:05.000
but something like this, I think it's pretty neat.


00:08:05.000 --> 00:08:08.520
- Yeah, it does mean the data has to be more structured,


00:08:08.520 --> 00:08:10.040
but if it's highly unstructured,


00:08:10.040 --> 00:08:11.440
go crazy with regular expressions.


00:08:11.440 --> 00:08:13.320
If you just need more than, like I said,


00:08:13.320 --> 00:08:16.480
a little more than finder index, this is pretty cool.


00:08:16.480 --> 00:08:18.240
- Yeah, yeah, there's some wacky things


00:08:18.240 --> 00:08:20.800
that really you need to jump into regular expressions


00:08:20.800 --> 00:08:24.820
or the other kinds.


00:08:24.820 --> 00:08:26.760
- Indeed.


00:08:26.760 --> 00:08:28.680
All right, well, Mikkel put,


00:08:28.680 --> 00:08:29.520
- Okay.


00:08:29.520 --> 00:08:31.720
- And then a little bit more diving into each of these


00:08:31.720 --> 00:08:34.480
and some comparisons and whatnot.


00:08:34.480 --> 00:08:35.680
So you can check this out.


00:08:35.680 --> 00:08:36.520
It's really good work.


00:08:36.520 --> 00:08:37.680
If you know of other ones,


00:08:37.680 --> 00:08:40.840
maybe contribute to them or add some more explanations,


00:08:40.840 --> 00:08:41.680
but there you have it.


00:08:41.680 --> 00:08:42.760
- This is really nice, yeah.


00:08:42.760 --> 00:08:43.760
- Yeah, this is real nice.


00:08:43.760 --> 00:08:44.600
I'm gonna start.


00:08:44.600 --> 00:08:46.880
It looks like I may have already started, so let's go.


00:08:46.880 --> 00:08:49.720
- Cool.


00:08:49.720 --> 00:08:52.080
- Thanks, Mikael, for sending that in and creating it.


00:08:52.080 --> 00:08:54.400
- Well, what do I got?


00:08:54.400 --> 00:08:55.760
I got a couple of things.


00:08:55.760 --> 00:08:56.600
I got a couple of things.


00:08:56.600 --> 00:08:57.440
I got a couple of things.


00:08:57.440 --> 00:08:58.400
- Well, what do I got?


00:08:58.400 --> 00:09:02.560
I got just some sort of newsish sort of things.


00:09:02.560 --> 00:09:07.560
So I've been new playing with Pydantic and FastAPI and-


00:09:07.560 --> 00:09:09.760
- Nice. - A lot.


00:09:09.760 --> 00:09:12.200
And with that, you've got types.


00:09:12.200 --> 00:09:14.460
So you're intentionally adding types,


00:09:14.460 --> 00:09:17.960
not just because you want my PY to pass,


00:09:17.960 --> 00:09:21.400
but you're adding types because it helps you.


00:09:21.400 --> 00:09:25.200
You kind of have to for FastAPI and stuff and Pydantic.


00:09:25.200 --> 00:09:29.720
So one of the things I was curious about


00:09:29.720 --> 00:09:32.400
is the whole, the optional part,


00:09:32.400 --> 00:09:35.640
because somebody actually caught me on this.


00:09:35.640 --> 00:09:39.820
I have this, I tend to just say like,


00:09:39.820 --> 00:09:44.820
int X equals none, or no, X of type int equals none.


00:09:44.820 --> 00:09:48.240
And that means it's supposed to be an integer


00:09:48.240 --> 00:09:50.640
or it's supposed to be a string or something,


00:09:50.640 --> 00:09:52.860
but it doesn't have anything yet.


00:09:52.860 --> 00:09:54.640
So the default value is none,


00:09:54.640 --> 00:09:57.280
but none is obviously not a string or an integer.


00:09:57.280 --> 00:09:59.320
So what do you do?


00:09:59.320 --> 00:10:03.280
And so there's like a bunch of options.


00:10:03.280 --> 00:10:05.320
One, you could just say, well, the language allows it.


00:10:05.320 --> 00:10:08.560
So I'm gonna do it anyway, but I don't recommend that.


00:10:08.560 --> 00:10:12.480
The other is one option is to use optional,


00:10:12.480 --> 00:10:14.640
but there's some issues with that.


00:10:14.640 --> 00:10:16.280
We'll talk about those in a sec.


00:10:16.280 --> 00:10:21.180
And then another is just to a union or in,


00:10:21.180 --> 00:10:25.240
So you can use either use like int or int bar none


00:10:25.240 --> 00:10:29.220
or union of int and none, and then assign it to none.


00:10:29.220 --> 00:10:34.220
And so I read for a while, like when I,


00:10:34.220 --> 00:10:38.160
I'm like the language allows it just go fine.


00:10:38.160 --> 00:10:41.660
'Cause what I really mean, my intent is


00:10:41.660 --> 00:10:45.180
I expect somebody to pass in, in this case, an integer.


00:10:45.180 --> 00:10:49.300
But if nobody passed, if they don't pass anything in,


00:10:49.300 --> 00:10:53.020
I want the function to handle that case also.


00:10:53.020 --> 00:10:54.900
And so that's what the none is for.


00:10:54.900 --> 00:10:56.660
The union is a little weird


00:10:56.660 --> 00:10:59.480
because it says you can pass in a none.


00:10:59.480 --> 00:11:02.920
And that would be weird for somebody to pass in none,


00:11:02.920 --> 00:11:06.020
but that's what our language is also.


00:11:06.020 --> 00:11:08.180
It like, that's the default.


00:11:08.180 --> 00:11:10.620
So I put out this, I put out a little survey,


00:11:10.620 --> 00:11:14.580
the recommendation that of the 630 votes,


00:11:14.580 --> 00:11:18.680
the was either use the union or optional.


00:11:18.680 --> 00:11:21.360
People are kind of on the fence about that.


00:11:21.360 --> 00:11:24.160
But so Adam Johnson says,


00:11:24.160 --> 00:11:27.200
replied to just the other day said,


00:11:27.200 --> 00:11:32.200
well, mypy just released and they don't deprecate this yet,


00:11:32.200 --> 00:11:34.500
but there's gonna be a future deprecation


00:11:34.500 --> 00:11:36.560
of implicit optional types.


00:11:36.560 --> 00:11:38.880
So you kind of can't use the old style


00:11:38.880 --> 00:11:41.280
if you're using mypy also, you should move.


00:11:41.280 --> 00:11:43.560
- The old style being int equals none?


00:11:43.560 --> 00:11:46.720
- Yeah, of just like ignore the type


00:11:46.720 --> 00:11:48.820
- Yeah. - For the default value.


00:11:48.820 --> 00:11:54.920
So mypy, the mypy 0.981,


00:11:54.920 --> 00:11:57.960
I don't know why we're not,


00:11:57.960 --> 00:12:01.120
where it's zero version still, but whatever.


00:12:01.120 --> 00:12:04.980
But it has, it talks about implicit optional type.


00:12:04.980 --> 00:12:08.800
So this, yeah, I'm saying it's a string,


00:12:08.800 --> 00:12:10.920
but the default value is none.


00:12:10.920 --> 00:12:12.460
That's bad.


00:12:12.460 --> 00:12:13.800
We don't want that anymore.


00:12:13.800 --> 00:12:18.800
What we want is optional will say will work


00:12:18.800 --> 00:12:22.880
and it'll say, you know, then this is the weird part.


00:12:22.880 --> 00:12:26.640
So the weird part is optional isn't optional.


00:12:26.640 --> 00:12:29.640
So what I'd like to use is optional,


00:12:29.640 --> 00:12:33.520
like in FastAPI, it looks nice to say


00:12:33.520 --> 00:12:35.720
this variable is optional,


00:12:35.720 --> 00:12:40.280
but what really optional means is just that


00:12:40.280 --> 00:12:43.800
optional just translates to the type or none.


00:12:43.800 --> 00:12:44.640
That's it.


00:12:44.640 --> 00:12:45.560
Those are the types.


00:12:45.560 --> 00:12:47.240
It doesn't say it's actually optional.


00:12:47.240 --> 00:12:52.240
It's only optional if you have a default value.


00:12:52.240 --> 00:12:54.800
Default value makes it very optional.


00:12:54.800 --> 00:12:56.880
- Yeah, you can have a thing that explicitly says


00:12:56.880 --> 00:12:59.080
this type is optional, but it's a required parameter,


00:12:59.080 --> 00:13:01.040
which is a little odd, right?


00:13:01.040 --> 00:13:01.880
- Yeah.


00:13:01.880 --> 00:13:02.700
(laughing)


00:13:02.700 --> 00:13:03.680
What's up with that?


00:13:03.680 --> 00:13:06.160
Yeah, so a required optional.


00:13:06.160 --> 00:13:07.000
So anyway.


00:13:07.000 --> 00:13:09.640
- Yeah, the third parameter named such and such


00:13:09.640 --> 00:13:11.440
of this type is required,


00:13:11.440 --> 00:13:13.200
but it's literally of type optional.


00:13:13.200 --> 00:13:14.040
Yeah, I hear you.


00:13:14.040 --> 00:13:14.960
Okay, that makes sense.


00:13:14.960 --> 00:13:17.800
- So the basic gist is you have to pick,


00:13:17.800 --> 00:13:19.200
you got to pick either optional,


00:13:19.200 --> 00:13:22.440
use an optional and then assign it to none


00:13:22.440 --> 00:13:25.400
or use a union.


00:13:25.400 --> 00:13:29.320
But another, you know, another option


00:13:29.320 --> 00:13:31.760
is just to actually assign something other than none.


00:13:31.760 --> 00:13:33.080
So if it's a string,


00:13:33.080 --> 00:13:35.880
you could have a flag value to say like-


00:13:35.880 --> 00:13:36.840
- A sentinel.


00:13:36.840 --> 00:13:38.520
- Yeah, like an empty string,


00:13:38.520 --> 00:13:41.400
Like a great one for a string is empty string.


00:13:41.400 --> 00:13:43.000
The problem is with numbers,


00:13:43.000 --> 00:13:45.360
like a floating pointer and integer number,


00:13:45.360 --> 00:13:47.320
there aren't any sentinels.


00:13:47.320 --> 00:13:50.800
I mean, I guess you could use nan, not a number,


00:13:50.800 --> 00:13:52.280
but that's weird.


00:13:52.280 --> 00:13:56.040
Anyway, wanted to reference typing.


00:13:56.040 --> 00:13:59.420
So just to say my proof that optional is really


00:13:59.420 --> 00:14:01.400
just the union of the type of none.


00:14:01.400 --> 00:14:02.800
It doesn't say anything.


00:14:02.800 --> 00:14:07.100
And they explicitly say in the Python documentation


00:14:07.100 --> 00:14:12.100
that you can, basically you don't have to use option,


00:14:12.100 --> 00:14:15.540
the keyword option, or you could just put a default value.


00:14:15.540 --> 00:14:18.580
That makes it optional, but it's only a type.


00:14:18.580 --> 00:14:20.740
Anyway, the other thing,


00:14:20.740 --> 00:14:23.020
the last bit I wanted to talk about with this


00:14:23.020 --> 00:14:24.700
is the best introduction.


00:14:24.700 --> 00:14:28.660
If you're confused, like I still am apparently, about this,


00:14:28.660 --> 00:14:30.380
the best discussion that I've found


00:14:30.380 --> 00:14:34.380
is in the FastAPI docs and go to,


00:14:34.380 --> 00:14:36.460
there's a Python types intro,


00:14:36.460 --> 00:14:41.460
And like at the top part way down, it says possibly none.


00:14:41.460 --> 00:14:44.540
And it discusses all of this.


00:14:44.540 --> 00:14:48.580
And the FastAPI recommendation is to use union


00:14:48.580 --> 00:14:49.460
instead of optional.


00:14:49.460 --> 00:14:51.520
And I think I've finally gotten there


00:14:51.520 --> 00:14:55.180
that I think I prefer just the either union


00:14:55.180 --> 00:14:57.600
or if you're in the bar thing.


00:14:57.600 --> 00:15:01.300
So you can say type or like type bar none.


00:15:01.300 --> 00:15:05.300
And that's if you're only, if you're Python 3.10, that works.


00:15:05.300 --> 00:15:09.220
but if you're on the others, I would use union.


00:15:09.220 --> 00:15:12.340
So that's a lot.


00:15:12.340 --> 00:15:15.660
- There's a bit of a voting in the audience.


00:15:15.660 --> 00:15:17.920
Alvaro says, "Int or none,"


00:15:17.920 --> 00:15:19.940
which is a voting for that one.


00:15:19.940 --> 00:15:24.380
Anthony says, "I prefer optional of int equals none myself."


00:15:24.380 --> 00:15:26.420
I also concur with Anthony,


00:15:26.420 --> 00:15:30.140
but I still very much would love


00:15:30.140 --> 00:15:35.140
to see some language syntax that's a little bit cleaner.


00:15:35.140 --> 00:15:40.140
like in C#, in Swift, they just have question mark


00:15:40.140 --> 00:15:45.100
at the end to say it's either can be none


00:15:45.100 --> 00:15:46.540
or it can be its value.


00:15:46.540 --> 00:15:50.820
And it's just such a common thing to set something to none


00:15:50.820 --> 00:15:53.580
and then, or alternatively have its value


00:15:53.580 --> 00:15:56.260
that I would just, I would love to see some kind


00:15:56.260 --> 00:16:01.020
of simpler syntax there than we see now, but.


00:16:01.020 --> 00:16:04.740
- Yeah, or some other Sentinel that like,


00:16:04.740 --> 00:16:08.180
Like SQL, doesn't SQL have like null or something like that?


00:16:08.180 --> 00:16:11.300
That's just, that's not a legitimate value for anything.


00:16:11.300 --> 00:16:15.020
- Yeah, and also if we use, by the way,


00:16:15.020 --> 00:16:19.100
one more reason I think people would want the question mark


00:16:19.100 --> 00:16:20.500
or something I think would be cool


00:16:20.500 --> 00:16:24.620
is it gives you this tonal inflection, right?


00:16:24.620 --> 00:16:28.460
Like this function takes an int, boom, hard, hard stop.


00:16:28.460 --> 00:16:32.000
Like that means it has to be an int, or it's like an int.


00:16:32.000 --> 00:16:33.980
Well, then you're not sure, it's optional.


00:16:33.980 --> 00:16:35.920
- Or you're not sure what type it is.


00:16:35.920 --> 00:16:36.760
- Yeah.


00:16:36.760 --> 00:16:37.600
- I think it's an int.


00:16:37.600 --> 00:16:41.040
- Yeah, so int question mark, come on.


00:16:41.040 --> 00:16:43.880
It's in a lot of the other languages that have this like


00:16:43.880 --> 00:16:45.240
things that can't be nullable


00:16:45.240 --> 00:16:46.600
unless you express their null.


00:16:46.600 --> 00:16:50.240
You say they can possibly take on their value or null.


00:16:50.240 --> 00:16:53.480
Anyway, I know this has been discussed and shot down,


00:16:53.480 --> 00:16:57.000
but let's make it happen.


00:16:57.000 --> 00:16:58.360
- And I was pretty sure you could do this.


00:16:58.360 --> 00:17:02.400
Thank you, Alvaro mentioned that you can use


00:17:02.400 --> 00:17:05.760
from future important annotations to use the bar


00:17:05.760 --> 00:17:08.200
for everything on three, eight and above.


00:17:08.200 --> 00:17:10.560
So that's good.


00:17:10.560 --> 00:17:14.560
And, but like, like for, like if I'm doing a FastAPI


00:17:14.560 --> 00:17:16.040
the optional is really what I mean.


00:17:16.040 --> 00:17:19.240
And that, that, I mean, it's optional


00:17:19.240 --> 00:17:21.240
but it's frustrating that the type optional


00:17:21.240 --> 00:17:23.720
doesn't actually fill in anything.


00:17:23.720 --> 00:17:24.800
- Yeah. Yeah.


00:17:24.800 --> 00:17:27.080
So a bit of a mismatch there.


00:17:27.080 --> 00:17:30.960
- Okay. That's enough.


00:17:30.960 --> 00:17:33.000
- That is enough, enough on that.


00:17:33.000 --> 00:17:34.560
It is so good though.


00:17:34.560 --> 00:17:36.400
Good stuff that those types are there.


00:17:36.400 --> 00:17:38.800
Brian, you wanna tell us about our sponsor for the week?


00:17:38.800 --> 00:17:40.120
- Sure.


00:17:40.120 --> 00:17:45.120
So Microsoft for Startups Founders Hub, it's very cool.


00:17:45.120 --> 00:17:48.600
So Microsoft, this episode of Python Bytes


00:17:48.600 --> 00:17:51.880
is brought to you by Microsoft for Startups.


00:17:51.880 --> 00:17:54.960
And the Microsoft for Startups Founders Hub


00:17:54.960 --> 00:17:57.200
provides all founders at any stage


00:17:57.200 --> 00:18:02.200
with free resources to help you solve startup challenges.


00:18:02.200 --> 00:18:05.200
And it's a platform,


00:18:05.200 --> 00:18:07.380
the platform provides technology benefits,


00:18:07.380 --> 00:18:11.040
access to expert guidance and skilled resources,


00:18:11.040 --> 00:18:13.860
mentorship and networking connections and so much more.


00:18:13.860 --> 00:18:16.960
And those skilled resources and the one-on-ones


00:18:16.960 --> 00:18:20.620
and the networking, it's so valuable.


00:18:20.620 --> 00:18:22.320
So unlike others in the industry,


00:18:22.320 --> 00:18:24.600
Microsoft for Startup Founders Hub


00:18:24.600 --> 00:18:27.360
doesn't require startups to be investor-backed


00:18:27.360 --> 00:18:31.140
or third-party validated to participate.


00:18:31.140 --> 00:18:34.920
It's truly open and you don't have to live in San Francisco.


00:18:34.920 --> 00:18:35.760
So what do you get?


00:18:35.760 --> 00:18:38.480
You get free access to GitHub and Microsoft Cloud


00:18:38.480 --> 00:18:41.280
with the ability to unlock credits over time.


00:18:41.280 --> 00:18:43.640
And they also have partnered with innovative companies


00:18:43.640 --> 00:18:48.400
like OpenAI, a global leader in AI research and deployment


00:18:48.400 --> 00:18:51.000
to provide exclusive benefits and discounts.


00:18:51.880 --> 00:18:54.560
Through the Founders Hub,


00:18:54.560 --> 00:18:57.920
becoming a founder is no longer about who you know.


00:18:57.920 --> 00:19:00.700
You'll have access to their mentorship network,


00:19:00.700 --> 00:19:03.400
giving you access to a pool of hundreds of mentors


00:19:03.400 --> 00:19:05.400
across a range of disciplines,


00:19:05.400 --> 00:19:07.560
across areas like validation, fundraising,


00:19:07.560 --> 00:19:09.980
management and coaching, sales and marketing,


00:19:09.980 --> 00:19:12.360
as well as specific technical stress points.


00:19:12.360 --> 00:19:14.760
And you know that there's at least one or two


00:19:14.760 --> 00:19:17.160
of those fields that you need help in.


00:19:17.160 --> 00:19:18.920
You'll be able to book a one-on-one meeting


00:19:18.920 --> 00:19:19.760
with the mentors,


00:19:19.760 --> 00:19:22.320
of whom were former founders themselves.


00:19:22.320 --> 00:19:24.360
Make your ideas a reality today with


00:19:24.360 --> 00:19:27.660
a critical support you get from the Founders Hub.


00:19:27.660 --> 00:19:29.040
To join the program, visit


00:19:29.040 --> 00:19:33.080
pythonbytes.fm/foundershub2022.


00:19:33.080 --> 00:19:35.600
Of course, the link is in our show notes.


00:19:35.600 --> 00:19:38.000
>> Absolutely. Thank you, Microsoft.


00:19:38.000 --> 00:19:39.960
Let's talk about linters.


00:19:39.960 --> 00:19:42.440
I know you're a fan of linting code


00:19:42.440 --> 00:19:45.160
and making it look good, as am I.


00:19:45.160 --> 00:19:47.840
But if you did Cython,


00:19:47.840 --> 00:19:52.280
you might not be able to get great information about it.


00:19:52.280 --> 00:19:55.800
So Marco Gorelli sent in this project


00:19:55.800 --> 00:20:00.240
that he's just getting started called CythonLint.


00:20:00.240 --> 00:20:04.500
So have you done much Cython?


00:20:04.500 --> 00:20:05.960
I know you do C and you do Python,


00:20:05.960 --> 00:20:07.920
but do you live in this weird metal ground?


00:20:07.920 --> 00:20:11.240
- I don't, but I want to, or maybe I don't, I don't know.


00:20:11.240 --> 00:20:14.640
- I think it's pretty neat.


00:20:14.640 --> 00:20:18.840
There's a bit of a build step you got to go through


00:20:18.840 --> 00:20:21.600
to get code that will run,


00:20:21.600 --> 00:20:23.240
but the ability to just say,


00:20:23.240 --> 00:20:24.960
I wrote Python, it has type-ins,


00:20:24.960 --> 00:20:27.000
like, oh, let's just do a little bit different code,


00:20:27.000 --> 00:20:30.200
and now it runs at C speed for just like a function or two.


00:20:30.200 --> 00:20:31.840
I think that's a pretty appealing idea.


00:20:31.840 --> 00:20:34.320
And Cython is definitely a good way to do that.


00:20:34.320 --> 00:20:36.560
So Cython lint will go through


00:20:36.560 --> 00:20:40.280
and you can just pip install it


00:20:40.280 --> 00:20:43.360
and then run it as a command line, give it your files,


00:20:43.360 --> 00:20:47.800
or you can even install it as a pre-commit hook.


00:20:47.800 --> 00:20:50.020
And then, you know, it'll just, whenever you commit,


00:20:50.020 --> 00:20:52.400
it'll obviously run as well.


00:20:52.400 --> 00:20:55.600
Just like the no QA in Flake 8,


00:20:55.600 --> 00:20:58.980
there's a hash no Cython lint to turn off the lines.


00:20:58.980 --> 00:21:01.960
And it, right now, mostly checks things around variables,


00:21:01.960 --> 00:21:06.040
but he's working on more and hopefully other people


00:21:06.040 --> 00:21:07.440
out there are interested in this


00:21:07.440 --> 00:21:08.880
and can add some ideas too.


00:21:08.880 --> 00:21:12.080
- This is really cool.


00:21:12.080 --> 00:21:15.480
And I hope that he does get people helping out


00:21:15.480 --> 00:21:16.480
and adding to this.


00:21:16.480 --> 00:21:20.360
Definitely it was something needed.


00:21:20.360 --> 00:21:22.840
- Yeah, he said he ran it on Pandas, NumPy,


00:21:22.840 --> 00:21:27.280
scikit-learn and QPy and found ways


00:21:27.280 --> 00:21:29.040
in which all those libraries could be cleaned up.


00:21:29.040 --> 00:21:30.800
So pretty neat.


00:21:30.800 --> 00:21:32.180
And all those libraries are notable


00:21:32.180 --> 00:21:36.000
because they're really highly, highly used


00:21:36.000 --> 00:21:37.380
and have been around for a long time.


00:21:37.380 --> 00:21:39.360
So if this is finding issues with them,


00:21:39.360 --> 00:21:41.960
then maybe it points out that something like this


00:21:41.960 --> 00:21:43.440
should exist.


00:21:43.440 --> 00:21:46.240
- Yeah, definitely.


00:21:46.240 --> 00:21:47.080
- Yeah, cool.


00:21:47.080 --> 00:21:48.480
So not a whole lot more to say about it.


00:21:48.480 --> 00:21:49.640
You know, Cython's cool.


00:21:49.640 --> 00:21:52.520
Having some more tools to support it, also cool.


00:21:52.520 --> 00:21:54.180
- Yeah.


00:21:54.180 --> 00:21:57.640
I've got another sort of possibly short topic.


00:21:57.640 --> 00:22:02.280
I found out about this cool diff tool called Difftastic.


00:22:02.280 --> 00:22:03.580
Have you seen this before?


00:22:03.580 --> 00:22:06.320
- I don't think so.


00:22:06.320 --> 00:22:07.320
- So-- - I'm always looking


00:22:07.320 --> 00:22:08.160
for a better diff tool.


00:22:08.160 --> 00:22:10.120
I'm never really content with my diff tools.


00:22:10.120 --> 00:22:11.800
I use one called Beyond Compare.


00:22:11.800 --> 00:22:15.280
It looks like it's cutting edge out of the early 90s.


00:22:15.280 --> 00:22:17.320
(laughing)


00:22:17.320 --> 00:22:18.800
It's useful, but boy.


00:22:18.800 --> 00:22:21.960
- So I'm finding that also,


00:22:21.960 --> 00:22:24.360
so I use diff a lot, but I also use it a lot


00:22:24.360 --> 00:22:29.360
within, with respect, like within, with Git.


00:22:29.360 --> 00:22:32.360
So I do, you know, you're doing a Git diff


00:22:32.360 --> 00:22:35.040
of older versions or something.


00:22:35.040 --> 00:22:36.820
So diff-tastic is,


00:22:36.820 --> 00:22:41.140
how it stands out against other diff tools


00:22:41.140 --> 00:22:43.000
is it's not line-based.


00:22:43.000 --> 00:22:48.000
So it's a structural diff tool that understands syntax.


00:22:48.000 --> 00:22:51.140
So what it does is it evaluates the language


00:22:51.140 --> 00:22:54.200
and tries to determine what language the file is in.


00:22:54.200 --> 00:22:57.620
And then if it, like, and it's got a ton of languages.


00:22:57.620 --> 00:23:01.240
And if you, it figures out like it's Python, for instance,


00:23:01.240 --> 00:23:02.520
or any other language,


00:23:02.520 --> 00:23:06.580
it creates an abstract syntax tree of the files


00:23:06.580 --> 00:23:09.700
and then checks the differences of those.


00:23:09.700 --> 00:23:13.500
So in the past, like one of the things that messes things up


00:23:13.500 --> 00:23:15.540
is just spacing problems.


00:23:15.540 --> 00:23:18.340
Like in something like C or C++


00:23:18.340 --> 00:23:19.460
where spacing doesn't matter,


00:23:19.460 --> 00:23:21.620
you can just say, well, ignore white space.


00:23:21.620 --> 00:23:24.700
But in Python, you really can't say ignore white space


00:23:24.700 --> 00:23:27.220
because white space is significant.


00:23:27.220 --> 00:23:32.220
But with the Difftastic, the diffs will know you can,


00:23:32.220 --> 00:23:34.900
if it's significant white space, it'll tell you.


00:23:34.900 --> 00:23:37.740
So I tried this out this morning


00:23:37.740 --> 00:23:40.300
And it's pretty amazing.


00:23:40.300 --> 00:23:42.460
So I tried it.


00:23:42.460 --> 00:23:46.000
So the thing I tried was replacing with the diff tool.


00:23:46.000 --> 00:23:47.300
So there's a, with Git.


00:23:47.300 --> 00:23:50.060
So in Git, you can say,


00:23:50.060 --> 00:23:51.940
and I just tried this single line thing


00:23:51.940 --> 00:23:55.260
to just temporarily say, I wanna try Git diff,


00:23:55.260 --> 00:23:59.940
it has is diff T instead of Git diff.


00:23:59.940 --> 00:24:04.820
So what this does is it does a diff


00:24:04.820 --> 00:24:08.900
And there's ways in the documentation


00:24:08.900 --> 00:24:12.220
where you can permanently turn it on, but it's colorized.


00:24:12.220 --> 00:24:16.500
So you've got like syntax highlighted files side by side


00:24:16.500 --> 00:24:18.160
and it'll show you what's different


00:24:18.160 --> 00:24:19.260
and it highlights the difference.


00:24:19.260 --> 00:24:21.400
Well, I got a little bit confused


00:24:21.400 --> 00:24:25.180
because there's syntax highlighting


00:24:25.180 --> 00:24:27.740
and highlighting to show you the difference.


00:24:27.740 --> 00:24:29.260
So there's a flag


00:24:29.260 --> 00:24:31.580
and I'm not sure where it is in the documentation,


00:24:31.580 --> 00:24:33.300
but basically you just turn off,


00:24:33.300 --> 00:24:36.920
you say dash test syntax highlight equals off.


00:24:36.920 --> 00:24:40.300
So it turns off the file syntax,


00:24:40.300 --> 00:24:43.080
but it shows, so all the highlights are just diffs.


00:24:43.080 --> 00:24:47.160
And so like, if you normally say get diff,


00:24:47.160 --> 00:24:49.180
just without anything, it'll say,


00:24:49.180 --> 00:24:52.220
what's different about my file versus the last version


00:24:52.220 --> 00:24:55.380
or the working directory or whatever,


00:24:55.380 --> 00:24:58.380
like what it usually does the right thing.


00:24:58.380 --> 00:24:59.220
(laughs)


00:24:59.220 --> 00:25:02.780
And then, but it's like on top of each other.


00:25:02.780 --> 00:25:03.740
It's not side by side.


00:25:03.740 --> 00:25:06.620
So having it side by side is cool and having a highlight.


00:25:06.620 --> 00:25:10.700
So I had some code where I changed stuff


00:25:10.700 --> 00:25:12.660
and I've been working on it a month ago or so.


00:25:12.660 --> 00:25:14.280
And I forgot what I did


00:25:14.280 --> 00:25:17.080
and get diff showed me just tons of changes.


00:25:17.080 --> 00:25:20.820
But diff-tastic showed me that I was just changing


00:25:20.820 --> 00:25:23.780
some minor things like adding types,


00:25:23.780 --> 00:25:25.260
a couple of types here and there,


00:25:25.260 --> 00:25:28.900
or changing double quotes or single quotes to double quotes.


00:25:28.900 --> 00:25:32.020
So I apparently ran black on it at one point.


00:25:32.020 --> 00:25:35.700
And there was like, oh, since AST wise,


00:25:35.700 --> 00:25:36.860
there's really nothing different.


00:25:36.860 --> 00:25:39.780
So I can just commit this and be done with it.


00:25:39.780 --> 00:25:41.540
So it was really helpful.


00:25:41.540 --> 00:25:43.420
- It is a pretty interesting idea, right?


00:25:43.420 --> 00:25:44.780
Sometimes you really care about


00:25:44.780 --> 00:25:46.100
those little formatting differences


00:25:46.100 --> 00:25:48.660
and you wanna make sure they get merged and committed.


00:25:48.660 --> 00:25:51.660
And other times you wanna know


00:25:51.660 --> 00:25:53.220
what is the essence of the change?


00:25:53.220 --> 00:25:54.620
And this sounds like that'll answer that.


00:25:54.620 --> 00:25:55.460
That's pretty cool.


00:25:55.460 --> 00:25:57.340
- And it showed me a bunch of stuff that


00:25:57.340 --> 00:26:00.660
Git says there were file changes,


00:26:00.660 --> 00:26:05.040
but Difftastic said there's no syntax change.


00:26:05.040 --> 00:26:08.380
So I apparently had changed some, you know,


00:26:08.380 --> 00:26:12.440
like some formatting or something or brand black on it,


00:26:12.440 --> 00:26:14.680
but there was nothing significant change.


00:26:14.680 --> 00:26:16.500
So interesting on that.


00:26:16.500 --> 00:26:21.320
And apparently this was a huge pain in the butt to make.


00:26:21.320 --> 00:26:25.720
And there's a, we're going to link to a blog article


00:26:25.720 --> 00:26:29.440
called "Difftastic the Fantastic Diff"


00:26:29.440 --> 00:26:31.940
by Wilfred Hughes, who wrote it,


00:26:31.940 --> 00:26:34.160
that basically said he thought this was gonna be


00:26:34.160 --> 00:26:35.960
sort of a minor thing to build,


00:26:35.960 --> 00:26:38.600
and it was a big thing to build.


00:26:38.600 --> 00:26:39.860
- Six months later.


00:26:39.860 --> 00:26:43.920
- Yeah, I'm not sure how long he spent on it, but yeah.


00:26:43.920 --> 00:26:45.800
But yeah, and here's an image


00:26:45.800 --> 00:26:47.760
of the little different highlighting,


00:26:47.760 --> 00:26:49.400
the colors and changes and stuff.


00:26:49.400 --> 00:26:51.760
So anyway, it's nice.


00:26:51.760 --> 00:26:53.760
- Yeah, looks like a great tool.


00:26:53.760 --> 00:26:54.600
I've never heard of it.


00:26:54.600 --> 00:26:56.280
Thanks for finding it.


00:26:56.280 --> 00:27:02.560
Alvaro out there says code --diff.


00:27:02.560 --> 00:27:04.240
I'm guessing that's VS Code diff.


00:27:04.240 --> 00:27:06.080
I've never done anything with VS Code diff.


00:27:06.080 --> 00:27:07.720
- I haven't used that for my command line.


00:27:07.720 --> 00:27:09.200
I should try that.


00:27:09.200 --> 00:27:10.760
- Yeah, perhaps.


00:27:10.760 --> 00:27:13.040
Okay, also one that I've been looking at


00:27:13.040 --> 00:27:14.720
that I haven't gone and used


00:27:14.720 --> 00:27:16.120
is this one called Kaleidoscope.


00:27:16.120 --> 00:27:17.660
That's just for Mac only.


00:27:17.660 --> 00:27:19.520
But it looks pretty interesting.


00:27:19.520 --> 00:27:21.520
It's supposed to work on code,


00:27:21.520 --> 00:27:25.320
but also on like directories,


00:27:25.320 --> 00:27:29.120
but images and other documents as well.


00:27:29.120 --> 00:27:31.940
So I don't know, maybe someday.


00:27:31.940 --> 00:27:33.640
The only challenge, it looks beautiful.


00:27:33.640 --> 00:27:35.240
The only problem, it's not a problem,


00:27:35.240 --> 00:27:38.360
it's the thing that has held me back is it's $150.


00:27:38.360 --> 00:27:40.200
So it better be darn good.


00:27:40.200 --> 00:27:41.800
At least there's a free trial.


00:27:41.800 --> 00:27:42.960
Maybe I'll try it someday.


00:27:42.960 --> 00:27:45.840
- I volunteer you to try it out and get back to us.


00:27:45.840 --> 00:27:46.920
(laughing)


00:27:46.920 --> 00:27:48.520
- Exactly, let me know how that goes.


00:27:48.520 --> 00:27:51.040
(laughing)


00:27:51.040 --> 00:27:51.880
- Yeah.


00:27:51.880 --> 00:27:53.440
- All right, well, that's our items, right?


00:27:53.440 --> 00:27:55.120
I got an extra if you're ready.


00:27:55.120 --> 00:27:57.160
- Yeah, let's go to extras.


00:27:57.160 --> 00:27:58.280
- So this is not a Python thing,


00:27:58.280 --> 00:28:02.120
but a thing that developers may be interested in.


00:28:02.120 --> 00:28:04.720
Have you heard of NextDNS?


00:28:04.720 --> 00:28:05.540
- No.


00:28:05.540 --> 00:28:09.360
- So one of the things that's a big hassle


00:28:09.360 --> 00:28:14.360
is spyware tracking,


00:28:14.360 --> 00:28:17.220
all sorts of trackers like fingerprinters


00:28:17.220 --> 00:28:20.080
and Facebook cookies


00:28:20.080 --> 00:28:22.480
and all these different things that are trackers,


00:28:22.480 --> 00:28:27.480
which is not lovely, but also malware as well.


00:28:27.480 --> 00:28:30.960
And a lot of those are being served off


00:28:30.960 --> 00:28:33.200
of third-party domains.


00:28:33.200 --> 00:28:36.800
So there's this product called NextDNS,


00:28:36.800 --> 00:28:38.420
and I'd never heard of it,


00:28:38.420 --> 00:28:42.120
but apparently it more or less acts like a firewall


00:28:42.120 --> 00:28:46.040
by not allowing malicious or unwanted things


00:28:46.040 --> 00:28:48.200
to resolve over DNS.


00:28:48.200 --> 00:28:49.040
- Wow.


00:28:49.920 --> 00:28:51.720
So what you do is you just set it up,


00:28:51.720 --> 00:28:55.920
you just set your DNS server to be 1724,


00:28:55.920 --> 00:28:58.180
or whatever their DNS server number is.


00:28:58.180 --> 00:29:01.120
And then everything goes through there.


00:29:01.120 --> 00:29:03.520
And if it says, hey, we're trying to go to DoubleClick,


00:29:03.520 --> 00:29:05.400
you know, like, no, we don't know what DoubleClick is,


00:29:05.400 --> 00:29:06.840
it's not on the internet, I'm sorry.


00:29:06.840 --> 00:29:08.860
And just, there's no more ads.


00:29:08.860 --> 00:29:11.480
So it blocks a lot of the ads and trackers.


00:29:11.480 --> 00:29:13.920
And because it's a DNS service


00:29:13.920 --> 00:29:16.820
and not like an ad blocker in your browser,


00:29:17.860 --> 00:29:20.460
it works on whole devices.


00:29:20.460 --> 00:29:22.500
So you could set it up on say your router


00:29:22.500 --> 00:29:25.020
and then everything including your television


00:29:25.020 --> 00:29:27.060
and the mobile apps and everything on,


00:29:27.060 --> 00:29:29.740
they would all get this blocking,


00:29:29.740 --> 00:29:32.740
which I think is pretty cool, pretty interesting.


00:29:32.740 --> 00:29:35.260
- Yeah, I'm definitely gonna check this out.


00:29:35.260 --> 00:29:39.980
- I'm not quite ready to set it up on my router yet


00:29:39.980 --> 00:29:44.980
because every now and then you basically are forced


00:29:44.980 --> 00:29:49.780
to turn off your ad blocker for some small, weird website,


00:29:49.780 --> 00:29:53.900
or do I want to impose this on my wife?


00:29:53.900 --> 00:29:55.660
Maybe.


00:29:55.660 --> 00:29:56.180
Maybe not.


00:29:56.180 --> 00:29:58.060
Do I want the tech support that like--


00:29:58.060 --> 00:30:00.380
so I'm on the fence, but I think it's a neat idea,


00:30:00.380 --> 00:30:02.460
and I might play with it as well.


00:30:02.460 --> 00:30:05.060
You can always get it and just set it on your computer, right?


00:30:05.060 --> 00:30:06.580
But if you wanted to like--


00:30:06.580 --> 00:30:08.260
every device I have automatically


00:30:08.260 --> 00:30:11.500
gets malware and ad tracker blocking.


00:30:11.500 --> 00:30:14.180
Just put it on your router.


00:30:14.180 --> 00:30:16.340
- Yeah, so one of the things,


00:30:16.340 --> 00:30:17.740
oh, do you have any other extras?


00:30:17.740 --> 00:30:18.580
- No, that's it.


00:30:18.580 --> 00:30:20.980
- Okay, so one of the things I've been trying


00:30:20.980 --> 00:30:24.300
to block ads and stuff is I found out about this,


00:30:24.300 --> 00:30:30.220
a VPN called Malvad, I don't even know how to pronounce that.


00:30:30.220 --> 00:30:33.500
But it's been pretty good.


00:30:33.500 --> 00:30:36.180
It blocks a whole bunch of stuff.


00:30:36.180 --> 00:30:38.260
Of course, switching to Vivaldi helps.


00:30:38.260 --> 00:30:40.620
You can have Vivaldi block stuff.


00:30:40.620 --> 00:30:44.860
but Movad is so, so like


00:30:44.860 --> 00:30:51.680
into security that it doesn't even ask for a password


00:30:51.680 --> 00:30:54.180
or an email account or anything.


00:30:54.180 --> 00:30:55.900
So what you do is when you sign up,


00:30:55.900 --> 00:30:57.620
it gives you an account number


00:30:57.620 --> 00:31:00.900
and you just have to write that down and use that.


00:31:00.900 --> 00:31:04.100
And to pay for things you can use,


00:31:04.100 --> 00:31:06.120
they encourage you to use cryptocurrency or something,


00:31:06.120 --> 00:31:08.060
but you can use cards or whatever,


00:31:08.060 --> 00:31:11.500
but that potentially could tie you to them, right?


00:31:11.500 --> 00:31:16.500
So they also allow you to just put money in an envelope


00:31:16.500 --> 00:31:19.880
with your account number and just mail it to them.


00:31:19.880 --> 00:31:20.720
(laughing)


00:31:20.720 --> 00:31:21.940
- That's awesome.


00:31:21.940 --> 00:31:23.180
- They'll add money to your account.


00:31:23.180 --> 00:31:25.620
So anyway, that's pretty neat.


00:31:25.620 --> 00:31:28.720
- I've done a massive amount of research on VPNs


00:31:28.720 --> 00:31:31.840
and there's a really whole bunch of shady ones out there,


00:31:31.840 --> 00:31:34.300
but Mulvane and Nord VPN,


00:31:34.300 --> 00:31:37.360
those two come out really, really good.


00:31:37.360 --> 00:31:39.780
And so I've heard of great stuff from all that.


00:31:39.780 --> 00:31:40.980
I use Nord VPN.


00:31:40.980 --> 00:31:43.360
And the reason I'm not using Next DNS or something like it


00:31:43.360 --> 00:31:45.500
is I just run Nord VPN and everything


00:31:45.500 --> 00:31:48.700
and check the block all the ads over that as well.


00:31:48.700 --> 00:31:51.140
So it's very, very similar.


00:31:51.140 --> 00:31:53.460
So yeah, I think this is a great solution


00:31:53.460 --> 00:31:55.860
and basically do the same thing.


00:31:55.860 --> 00:31:59.340
- I also wanted to remind everybody that the current,


00:31:59.340 --> 00:32:01.260
this is a little bit old news,


00:32:01.260 --> 00:32:06.260
but the current Python 3.11 is Python 3.11.0 RC2.


00:32:07.020 --> 00:32:08.620
Definitely worth people trying out.


00:32:08.620 --> 00:32:11.340
And definitely if you've got a module that you're,


00:32:11.340 --> 00:32:13.220
you should have been doing this already, shame on you.


00:32:13.220 --> 00:32:15.940
But if you've got a package out there on PyPI


00:32:15.940 --> 00:32:17.380
and people are using it,


00:32:17.380 --> 00:32:18.900
you should be updating your testing


00:32:18.900 --> 00:32:22.540
to make sure that it's testing the latest Python 3.11


00:32:22.540 --> 00:32:24.240
to make sure it continues to work.


00:32:24.240 --> 00:32:28.300
The last extra I wanted to bring up is I saw this


00:32:28.300 --> 00:32:30.840
- Oh my. - called Oh My Git.


00:32:32.460 --> 00:32:35.260
And so this ends up being, what it is,


00:32:35.260 --> 00:32:38.540
is it's a little game and it's a little weird,


00:32:38.540 --> 00:32:41.980
but I tried it out, downloaded and tried it out.


00:32:41.980 --> 00:32:46.440
And so you've got most of it's like this sort of a view.


00:32:46.440 --> 00:32:48.020
And so you got like a,


00:32:48.020 --> 00:32:50.060
there's a workspace area in the middle,


00:32:50.060 --> 00:32:51.580
there's cards at the bottom


00:32:51.580 --> 00:32:53.740
and the cards are skills that you get.


00:32:53.740 --> 00:32:55.180
But it's in the, and on the right,


00:32:55.180 --> 00:32:57.560
there's a description of what you want to do.


00:32:57.560 --> 00:33:00.860
And you have to like learn the Git commands


00:33:00.860 --> 00:33:05.860
to do something like rebasing or merging or whatever.


00:33:05.860 --> 00:33:09.820
And I started out at the,


00:33:09.820 --> 00:33:12.540
trying out at the very beginning, the basic stuff.


00:33:12.540 --> 00:33:15.940
And it actually was, the introduction was pretty cool.


00:33:15.940 --> 00:33:19.020
And then, but what I really like is that you can just go


00:33:19.020 --> 00:33:23.020
to the course, the available lessons.


00:33:23.020 --> 00:33:26.220
You don't have to do it in order.


00:33:26.220 --> 00:33:28.780
You can jump out of order and just hop ahead


00:33:28.780 --> 00:33:31.680
to something else that you're having problems with


00:33:31.680 --> 00:33:35.680
and sort of have a visual introduction to get.


00:33:35.680 --> 00:33:37.780
- It's kind of neat.


00:33:37.780 --> 00:33:42.280
- That's weird and kind of wonderful.


00:33:42.280 --> 00:33:45.580
- It is a little weird too, yeah.


00:33:45.580 --> 00:33:47.700
- But wonderful, yeah, very cool.


00:33:47.700 --> 00:33:50.780
All right, one more quick follow-up.


00:33:50.780 --> 00:33:53.040
Wagon Race, Alder says, "I know we don't want ads,


00:33:53.040 --> 00:33:55.280
"but ads are the reason most stuff is free,


00:33:55.280 --> 00:33:58.460
"or do you make donations to sites


00:33:58.460 --> 00:33:59.740
that you block ads from.


00:33:59.740 --> 00:34:03.540
I just wanted to comment on that real quick.


00:34:03.540 --> 00:34:06.300
I understand that there's a lot of services


00:34:06.300 --> 00:34:07.300
that do need support.


00:34:07.300 --> 00:34:08.700
I mean, I was just listening to an interview


00:34:08.700 --> 00:34:10.060
with the guys from The Verge.


00:34:10.060 --> 00:34:12.260
They have a hundred person team at The Verge


00:34:12.260 --> 00:34:13.180
working on stuff.


00:34:13.180 --> 00:34:19.620
And yet, there is so much like collection


00:34:19.620 --> 00:34:26.020
and triangulation of who you are and what you are


00:34:26.160 --> 00:34:31.200
by these ad networks through like data brokers and behind the scene stuff that is just, it is a


00:34:31.200 --> 00:34:40.960
plague on society. I mean, think about the 2016 election and the Facebook stuff. God, what was


00:34:40.960 --> 00:34:47.280
that name of that company? Do you remember Brian? They were using all those things to basically,


00:34:47.280 --> 00:34:53.520
that kind of information collected from those ad networks to target and manipulate people.


00:34:53.520 --> 00:35:00.560
So it's not just about like, do I not really want to see this ad for a new program, programming book,


00:35:00.560 --> 00:35:06.160
wherever it's, it's not, it's the fact that they're using these terrible third party networks


00:35:06.160 --> 00:35:13.920
to deliver it. So for example, Brian, check this out. Python bites. FM, right? If we go here,


00:35:13.920 --> 00:35:19.600
and we go to our episodes, and let's just pick one here. I got to zoom it back out a little bit.


00:35:19.600 --> 00:35:23.360
There we go. Look, this one right here, it has an ad. That's


00:35:23.360 --> 00:35:26.380
beam. There's an ad blocker on my VPN on the network. And


00:35:26.380 --> 00:35:28.880
there's an ad block blocker in my browser. And right here, we


00:35:28.880 --> 00:35:32.480
have an ad with no blocking, it shows up just fine. Do you know


00:35:32.480 --> 00:35:36.360
why? Because we're not using an evil third party network.


00:35:36.360 --> 00:35:40.280
There's no tracking, there's no retargeting. We show you things


00:35:40.280 --> 00:35:46.220
from people who support us. We, we ask you to please check them


00:35:46.220 --> 00:35:48.940
and at least consider it to support our show.


00:35:48.940 --> 00:35:52.060
And yet there's as much ad blocking here


00:35:52.060 --> 00:35:55.820
as there is on somewhere like CNN,


00:35:55.820 --> 00:35:57.700
or you pick your spot.


00:35:57.700 --> 00:36:00.380
These places have like 30, 40 different


00:36:00.380 --> 00:36:02.540
tracking networks on you,


00:36:02.540 --> 00:36:04.060
triangulating stuff and reselling it,


00:36:04.060 --> 00:36:07.140
and it is a plague on society.


00:36:07.140 --> 00:36:09.180
And if CNN wanted to show you ads,


00:36:09.180 --> 00:36:10.300
they could do just what we do.


00:36:10.300 --> 00:36:11.700
I'm sure they have better relationships


00:36:11.700 --> 00:36:12.860
with advertisers than we do.


00:36:12.860 --> 00:36:16.180
So Cambridge Analytica, thank you for letting me know.


00:36:16.180 --> 00:36:18.900
So I'm not against ads.


00:36:18.900 --> 00:36:22.060
I mean, to a large degree, we are ad supported.


00:36:22.060 --> 00:36:26.220
I'm against people building behind the scenes information


00:36:26.220 --> 00:36:28.260
and using it to manipulate society.


00:36:28.260 --> 00:36:29.860
Bit of a rant, sorry, sorry, Brian,


00:36:29.860 --> 00:36:30.700
if I went too far there.


00:36:30.700 --> 00:36:33.920
- No, and some people just don't realize that,


00:36:33.920 --> 00:36:35.980
that the ads are not just,


00:36:35.980 --> 00:36:38.220
there's a product that we think that you might like


00:36:38.220 --> 00:36:40.740
based on the content of this page.


00:36:40.740 --> 00:36:41.940
That totally makes sense.


00:36:41.940 --> 00:36:45.320
Like this, the people that are listening to Python Bytes,


00:36:45.320 --> 00:36:48.200
They might be interested in Python or Microsoft Restarters


00:36:48.200 --> 00:36:49.880
found or something.


00:36:49.880 --> 00:36:51.980
Magazines used to be like this all the time, right?


00:36:51.980 --> 00:36:54.600
So you buy a magazine, it's not tracking you


00:36:54.600 --> 00:36:56.560
that whether or not you looked at something


00:36:56.560 --> 00:36:59.920
or looked up somebody's website because of a magazine ad.


00:36:59.920 --> 00:37:03.800
There's just stuff collected about you


00:37:03.800 --> 00:37:05.160
that I don't think is necessary.


00:37:05.160 --> 00:37:07.700
And I think like, for instance, Read the Docs


00:37:07.700 --> 00:37:12.700
has like the ethical ads that they don't do tracking.


00:37:14.240 --> 00:37:16.280
So yeah.


00:37:16.280 --> 00:37:17.120
- Exactly.


00:37:17.120 --> 00:37:20.080
And neither do we on purpose.


00:37:20.080 --> 00:37:22.120
Probably we've had to turn down sponsors.


00:37:22.120 --> 00:37:24.200
People said, we want to sponsor you,


00:37:24.200 --> 00:37:26.200
but we need you to install this tracking thing


00:37:26.200 --> 00:37:27.520
for your MP3 downloads.


00:37:27.520 --> 00:37:29.520
We need to install this Facebook pixel


00:37:29.520 --> 00:37:30.360
and these other things.


00:37:30.360 --> 00:37:31.180
We're like, you know what?


00:37:31.180 --> 00:37:32.020
We don't want your money.


00:37:32.020 --> 00:37:35.440
Like, no, we're happy to sell your product


00:37:35.440 --> 00:37:36.280
'cause it's irrelevant,


00:37:36.280 --> 00:37:38.760
but we're not gonna spy on our users.


00:37:38.760 --> 00:37:41.240
So thanks, but no thanks.


00:37:41.240 --> 00:37:42.080
All right.


00:37:42.080 --> 00:37:44.080
And Wagon Race, just a quick follow up.


00:37:44.080 --> 00:37:45.120
says, "Thanks for the explanation.


00:37:45.120 --> 00:37:46.060
"I do understand you better,


00:37:46.060 --> 00:37:47.720
"and I'm glad you guys are big enough


00:37:47.720 --> 00:37:51.140
"to have direct sponsors without trackers."


00:37:51.140 --> 00:37:52.380
So are we, thank you.


00:37:52.380 --> 00:37:56.540
Okay, with all that, let's flip the table


00:37:56.540 --> 00:37:58.780
and make something, close it out with a joke.


00:37:58.780 --> 00:37:59.620
What do you think, Brian?


00:37:59.620 --> 00:38:02.020
- Yeah, I'm ready for something funny.


00:38:02.020 --> 00:38:04.380
- All right, so this one comes from somebody


00:38:04.380 --> 00:38:08.140
who had to go through this online multiple choice,


00:38:08.140 --> 00:38:11.900
prove to me you know JavaScript test to be hired, okay?


00:38:11.900 --> 00:38:14.300
And it says, so I got this wrong


00:38:14.300 --> 00:38:17.460
because the person who typed in the question made a mistake.


00:38:17.460 --> 00:38:18.500
So here, check this out.


00:38:18.500 --> 00:38:21.060
It's one of these multi-choice question things.


00:38:21.060 --> 00:38:22.740
It says, what is the result


00:38:22.740 --> 00:38:24.880
of the function call shown below?


00:38:24.880 --> 00:38:27.340
And it's just super simple JavaScript.


00:38:27.340 --> 00:38:32.340
It's creating one of these little Lambda expressions here


00:38:32.340 --> 00:38:37.420
and it has the equivalent of an F string,


00:38:37.420 --> 00:38:40.560
an interpolated string is really the essence of it.


00:38:40.560 --> 00:38:44.360
And it says console.log, open parenthesis,


00:38:44.360 --> 00:38:46.480
this is important, as you would, open parenthesis,


00:38:46.480 --> 00:38:51.360
quote, hi, my name is, you know, $curly first name,


00:38:51.360 --> 00:38:54.640
close off the curly, and then it closes out


00:38:54.640 --> 00:38:59.120
console.log instead of with the closing parenthesis


00:38:59.120 --> 00:39:01.200
with a closing curly brace.


00:39:01.200 --> 00:39:03.480
And so the options are like, hi, my name is John,


00:39:03.480 --> 00:39:04.580
I'm logged into the console.


00:39:04.580 --> 00:39:07.700
Hi, my name is undefined, I'm logged into the console.


00:39:07.700 --> 00:39:11.060
And what the machine thought was the correct answer is,


00:39:11.060 --> 00:39:12.740
hi, my name is John Jr.


00:39:12.740 --> 00:39:15.660
'Cause that's the name of the variable,


00:39:15.660 --> 00:39:16.780
the value variable.


00:39:16.780 --> 00:39:17.980
I'm logged into console.


00:39:17.980 --> 00:39:22.820
And you answered, uncaught syntax errors logged to console.


00:39:22.820 --> 00:39:24.900
(laughing)


00:39:24.900 --> 00:39:27.220
And like, no, wrong, it was supposed to say John Jr.


00:39:27.220 --> 00:39:29.300
No, wrong, you typed it in wrong.


00:39:29.300 --> 00:39:32.020
(laughing)


00:39:32.020 --> 00:39:33.140
Wouldn't that be frustrating


00:39:33.140 --> 00:39:34.460
if you're trying to apply for a job


00:39:34.460 --> 00:39:36.020
and they put syntax errors in there


00:39:36.020 --> 00:39:38.500
and you're like, nope.


00:39:38.500 --> 00:39:40.000
'Cause they may be checking whether or not


00:39:40.000 --> 00:39:42.020
you're finding that closing curly brace, right?


00:39:42.020 --> 00:39:45.320
That's a legitimate test, I guess.


00:39:45.320 --> 00:39:46.460
But no. - Yeah.


00:39:46.460 --> 00:39:49.380
And I think it's fine that you don't get to work for them


00:39:49.380 --> 00:39:52.260
because they're probably not someplace you wanna work for.


00:39:52.260 --> 00:39:55.360
They've got syntax errors in their onboarding.


00:39:55.360 --> 00:39:56.660
- Exactly.


00:39:56.660 --> 00:39:58.420
- In their application process, but.


00:39:58.420 --> 00:39:59.380
- Exactly.


00:39:59.380 --> 00:40:01.500
Oh, well.


00:40:01.500 --> 00:40:02.940
Anyway, I thought that was pretty funny


00:40:02.940 --> 00:40:04.700
and I'm sure people have been through the,


00:40:04.700 --> 00:40:06.980
there's all these sort of weird,


00:40:06.980 --> 00:40:09.780
go home and write this test or take this thing


00:40:09.780 --> 00:40:11.940
to prove you know how to write code sort of things.


00:40:11.940 --> 00:40:12.900
I'm sure people have been through it.


00:40:12.900 --> 00:40:15.100
So they'll probably get a laugh out of this.


00:40:15.100 --> 00:40:19.340
- Yeah, that's pretty funny.


00:40:19.340 --> 00:40:21.700
- It was.


00:40:21.700 --> 00:40:23.420
- Should we wrap it up?


00:40:23.420 --> 00:40:24.240
- Let's.


00:40:24.240 --> 00:40:26.180
- Cool, so thanks everybody for coming


00:40:26.180 --> 00:40:29.340
and watching the show and also everybody that listens.


00:40:29.340 --> 00:40:32.220
We love all of you and thanks Michael.


00:40:32.220 --> 00:40:33.780
- Indeed, thank you everyone.


00:40:33.780 --> 00:40:34.600
Thank you, Brian.


00:40:34.600 --> 00:40:36.440
- Yeah, see you next week. - Bye.


00:40:36.440 --> 00:40:46.440
[BLANK_AUDIO]

