WEBVTT

00:00:00.000 --> 00:00:09.000
Hey, everybody. Welcome to Python Bytes. And we'll just kick off with the show.


00:00:09.000 --> 00:00:11.000
Hey, Brian. Ashley.


00:00:11.000 --> 00:00:12.000
Hey.


00:00:12.000 --> 00:00:15.000
What's the date? July 11th. Okay.


00:00:15.000 --> 00:00:21.000
I think it's 2022. I've been paying attention to the year, sort of. So it's going fast.


00:00:21.000 --> 00:00:27.600
Thanks. Hello, and welcome to Python Bytes, where we deliver Python news and headlines


00:00:27.600 --> 00:00:35.960
directly to your earbuds. This is episode 293, recorded July 11th, 2022. And I am Brian


00:00:35.960 --> 00:00:36.960
Okken.


00:00:36.960 --> 00:00:39.520
Hey, I'm Michael Kennedy.


00:00:39.520 --> 00:00:41.000
And I'm Ashley Anderson.


00:00:41.000 --> 00:00:46.800
Well, welcome, Ashley. Before we jump in, tell us a little bit about who you are.


00:00:46.800 --> 00:01:14.320
Sure. Yeah, I'm a software developer. I work for a relatively small but sometimes growing startup out here. We make a portable MRI machine. So I'm one of these software developers that came from a academic background. I studied biomedical engineering and medical physics. And then this is kind of my first full time software gig. But I think in research, like everyone's doing software these days. So a lot of people are kind of making that jump. And this was a perfect opportunity for it.


00:01:15.280 --> 00:01:18.120
- Wow, portable MRI, that's gotta be fascinating.


00:01:18.120 --> 00:01:19.520
But, yeah, cool.


00:01:19.520 --> 00:01:22.280
- Very cool, how do you find the transition


00:01:22.280 --> 00:01:24.600
from this more researchy side


00:01:24.600 --> 00:01:27.880
over to this maybe more formal dev role?


00:01:27.880 --> 00:01:32.160
- Yeah, it's just such a better fit for me, I think.


00:01:32.160 --> 00:01:33.840
Like in my research labs and stuff,


00:01:33.840 --> 00:01:36.720
I was often like way more interested


00:01:36.720 --> 00:01:38.040
in helping build tools and stuff


00:01:38.040 --> 00:01:40.360
to help accelerate other people's work


00:01:40.360 --> 00:01:42.840
rather than diving into the research myself.


00:01:42.840 --> 00:01:45.120
I often found that to be very frustrating


00:01:45.120 --> 00:01:47.200
and maybe I wasn't the best at it or something like that.


00:01:47.200 --> 00:01:49.500
So this has just been a much better fit for me.


00:01:49.500 --> 00:01:51.360
- Right on, cool.


00:01:51.360 --> 00:01:56.180
Well, let's jump into your first topic.


00:01:56.180 --> 00:01:57.720
What do you got for us?


00:01:57.720 --> 00:02:00.720
- Sure, yeah, the first thing I wanted to talk about was,


00:02:00.720 --> 00:02:03.480
I think this is kind of the big news since Friday.


00:02:03.480 --> 00:02:08.000
The PSF and the PyPI announced that they're giving away


00:02:08.000 --> 00:02:10.960
4,000 of these two-factor hardware keys.


00:02:10.960 --> 00:02:14.120
That's maybe kind of gotten washed out in this,


00:02:14.120 --> 00:02:15.800
but it's kind of a cool effort.


00:02:15.800 --> 00:02:18.840
I saw this from Dustin Ingram's Twitter,


00:02:18.840 --> 00:02:21.140
and I know he's been involved in a lot of the,


00:02:21.140 --> 00:02:25.420
or been interested in kind of outlining


00:02:25.420 --> 00:02:26.560
a lot of the security concerns


00:02:26.560 --> 00:02:30.200
about supply chain vulnerabilities and stuff in the past.


00:02:30.200 --> 00:02:31.840
I thought this was a really interesting idea


00:02:31.840 --> 00:02:33.940
for helping with supply chain vulnerabilities,


00:02:33.940 --> 00:02:35.960
or at least kind of taking a step in that direction.


00:02:35.960 --> 00:02:40.160
And I think it's just the PyPI,


00:02:40.160 --> 00:02:42.040
sort of first step in this direction.


00:02:42.040 --> 00:02:44.080
They announced some other stuff in the past


00:02:44.080 --> 00:02:47.420
about maybe having private packages or organizations


00:02:47.420 --> 00:02:50.620
on there and namespace packages and stuff.


00:02:50.620 --> 00:02:52.760
But this was a pretty cool thing to do.


00:02:52.760 --> 00:02:53.840
It looks like they're going to roll out


00:02:53.840 --> 00:02:56.500
two-factor as a requirement, probably eventually


00:02:56.500 --> 00:02:57.840
for everybody.


00:02:57.840 --> 00:02:59.360
The way they're starting it now is


00:02:59.360 --> 00:03:02.840
for some of the most popular packages.


00:03:02.840 --> 00:03:06.000
And for people who have those popular packages--


00:03:06.000 --> 00:03:07.760
I'm not one of them--


00:03:07.760 --> 00:03:10.680
they're offering codes to get some of these hardware keys


00:03:10.680 --> 00:03:12.760
to help that.


00:03:12.760 --> 00:03:14.160
Interesting.


00:03:14.160 --> 00:03:17.140
- Yeah, there's been a bit of a backlash to this actually,


00:03:17.140 --> 00:03:19.500
which on two levels,


00:03:19.500 --> 00:03:23.000
some people just expressed a little bit of frustration


00:03:23.000 --> 00:03:26.780
and others more so, see item two coming up.


00:03:26.780 --> 00:03:30.060
One thing I think is interesting about this,


00:03:30.060 --> 00:03:33.960
this whole side of things is like the original thing


00:03:33.960 --> 00:03:36.280
that you brought up actually is,


00:03:36.280 --> 00:03:40.760
people I think are focusing on their hardware keys.


00:03:40.760 --> 00:03:43.100
And while that's a cool idea,


00:03:43.100 --> 00:03:46.840
I think the bigger story is just 2FA, forget hardware keys.


00:03:46.840 --> 00:03:50.960
Like hardware keys are one way to do 2FA, right?


00:03:50.960 --> 00:03:52.700
But if you look at the actual giveaway,


00:03:52.700 --> 00:03:57.320
I think it's limited to certain locations, right?


00:03:57.320 --> 00:04:00.520
Like I can't remember what all the locations were.


00:04:00.520 --> 00:04:03.720
I feel like it's kind of North America,


00:04:03.720 --> 00:04:07.480
Europe and Australia or something in that general realm.


00:04:07.480 --> 00:04:09.520
And you could entirely have a popular,


00:04:09.520 --> 00:04:12.640
what is now known as a critical Python package


00:04:12.640 --> 00:04:15.680
and not live in those locations, right?


00:04:15.680 --> 00:04:20.120
- Yeah, for sure.


00:04:20.120 --> 00:04:21.280
I mean, I suspect a lot of them,


00:04:21.280 --> 00:04:22.920
a lot of the maintainers of those packages


00:04:22.920 --> 00:04:24.760
are not in some of those locations.


00:04:24.760 --> 00:04:27.520
I think those are probably dictated by like export rules


00:04:27.520 --> 00:04:30.000
on certain cryptography, but--


00:04:30.000 --> 00:04:30.840
- I hadn't thought about that.


00:04:30.840 --> 00:04:32.160
I thought it was just a shipping thing,


00:04:32.160 --> 00:04:34.440
but you're probably right about that actually.


00:04:34.440 --> 00:04:35.480
Yeah.


00:04:35.480 --> 00:04:36.320
- Oh, yeah.


00:04:36.320 --> 00:04:37.160
- Hmm.


00:04:37.160 --> 00:04:40.000
So,


00:04:40.000 --> 00:04:44.320
there's a little bit of a pushback in like,


00:04:44.320 --> 00:04:46.880
hey, I'm doing this for free.


00:04:46.880 --> 00:04:49.320
Why are you making me do this extra work


00:04:49.320 --> 00:04:50.320
of setting up these keys?


00:04:50.320 --> 00:04:52.040
And that's kind of why I said,


00:04:52.040 --> 00:04:54.320
I feel like it's kind of,


00:04:54.320 --> 00:04:55.840
the headline has missed the point here,


00:04:55.840 --> 00:04:58.320
because to say, oh, I've got to get this hardware key


00:04:58.320 --> 00:05:00.840
and set it up is not technically true.


00:05:00.840 --> 00:05:04.160
You just have to use 2FA of some form, right?


00:05:04.160 --> 00:05:05.880
It could be with like the standard 2FA


00:05:05.880 --> 00:05:12.520
2FA you have with your phone or maybe even SMS would work, although SMS is a sketchy


00:05:12.520 --> 00:05:16.560
but better than nothing form of 2FA.


00:05:16.560 --> 00:05:19.480
Like if I'm going to go and get a bank account, if I'm going to...


00:05:19.480 --> 00:05:20.480
Yeah, go ahead.


00:05:20.480 --> 00:05:21.480
Sorry.


00:05:21.480 --> 00:05:27.560
Some people say that SMS really is like a pretty insecure version of 2FA.


00:05:27.560 --> 00:05:28.560
So I think having some type of keys...


00:05:28.560 --> 00:05:29.560
They do.


00:05:29.560 --> 00:05:32.440
And they say like, yeah, it would be better.


00:05:32.440 --> 00:05:35.780
but like at the same time, if you don't have any 2FA,


00:05:35.780 --> 00:05:37.700
there's still another step.


00:05:37.700 --> 00:05:40.860
They've got to hack your SMS somehow


00:05:40.860 --> 00:05:42.300
to get through the SMS stuff,


00:05:42.300 --> 00:05:43.740
which is better than just like,


00:05:43.740 --> 00:05:44.780
they just guess your password


00:05:44.780 --> 00:05:45.940
or they get it from a password breach.


00:05:45.940 --> 00:05:50.780
So it's even for all the criticisms of SMS as a 2FA,


00:05:50.780 --> 00:05:52.780
it's still, it's not a negative.


00:05:52.780 --> 00:05:55.860
It's just not nearly as good as the other options.


00:05:59.700 --> 00:06:03.300
- I'm just chuckling 'cause I just got an email last week


00:06:03.300 --> 00:06:07.080
about from, was it on the 8th of July?


00:06:07.080 --> 00:06:13.500
Saying, "Hey, you're a maintainer of a critical project."


00:06:13.500 --> 00:06:16.700
And they want me to set up to UFA


00:06:16.700 --> 00:06:18.300
and I just haven't read it yet.


00:06:18.300 --> 00:06:21.740
So I like, this is news to me.


00:06:21.740 --> 00:06:24.420
And it's a pytest plugin I've got


00:06:24.420 --> 00:06:26.460
that supposedly is a critical project.


00:06:26.460 --> 00:06:27.300
Just go figure.


00:06:27.300 --> 00:06:28.120
- Oh, that's awesome.


00:06:28.120 --> 00:06:29.800
- The definition, people are wondering,


00:06:29.800 --> 00:06:31.720
I saw Will McGugan asking on Twitter,


00:06:31.720 --> 00:06:34.360
like, does anybody know what this means?


00:06:34.360 --> 00:06:35.460
I got this too.


00:06:35.460 --> 00:06:37.120
The definition from what I understand


00:06:37.120 --> 00:06:41.080
is you are in the top 1% of downloads


00:06:41.080 --> 00:06:43.680
for a moving six month window.


00:06:43.680 --> 00:06:45.240
So in the last six months,


00:06:45.240 --> 00:06:48.200
your project is in the top 1% of most used,


00:06:48.200 --> 00:06:50.360
most downloaded packages.


00:06:50.360 --> 00:06:52.520
So congratulations, that's awesome, right?


00:06:52.520 --> 00:06:54.760
(laughing)


00:06:57.400 --> 00:07:00.600
- Cool, I guess I'll read the email more closely.


00:07:00.600 --> 00:07:01.980
- Yeah, perhaps.


00:07:01.980 --> 00:07:05.320
Ashley, do you know what happens if you just are like,


00:07:05.320 --> 00:07:07.720
Brian, like I don't, spam, doesn't matter to me,


00:07:07.720 --> 00:07:09.400
just ignore it.


00:07:09.400 --> 00:07:10.240
- That's a good question.


00:07:10.240 --> 00:07:12.800
I guess eventually they'll probably not let you upload


00:07:12.800 --> 00:07:13.960
if you don't enable it.


00:07:13.960 --> 00:07:17.660
Like next time you go to log in or upload a package,


00:07:17.660 --> 00:07:19.520
it'll just say, hey, you have to turn on 2FA.


00:07:19.520 --> 00:07:21.080
'Cause like you said, you don't have to have the key,


00:07:21.080 --> 00:07:23.100
you just have to have 2FA on.


00:07:23.100 --> 00:07:26.760
- So I clicked on the manage and it says,


00:07:26.760 --> 00:07:28.480
I've got a little big banner up.


00:07:28.480 --> 00:07:30.640
I'll just pop to it right now.


00:07:30.640 --> 00:07:34.600
Where's it on here?


00:07:34.600 --> 00:07:36.520
We'll go ahead and show this.


00:07:36.520 --> 00:07:40.680
I get, this project is included in the two factor mandate


00:07:40.680 --> 00:07:41.760
for critical projects.


00:07:41.760 --> 00:07:45.040
In the future, you will be unable to perform this action


00:07:45.040 --> 00:07:48.160
without enabling two factor authentication.


00:07:48.160 --> 00:07:50.400
So I think you're right.


00:07:50.400 --> 00:07:52.920
I think it's just gonna kick me out of being able


00:07:52.920 --> 00:07:57.920
to do anything with the project if I don't enable this.


00:07:57.920 --> 00:07:59.300
And interesting.


00:07:59.300 --> 00:08:01.600
- Interesting.


00:08:01.600 --> 00:08:02.420
This is cool, Brian.


00:08:02.420 --> 00:08:05.640
One, I think Teddy's right out there, like congrats.


00:08:05.640 --> 00:08:06.480
Brian's on fire.


00:08:06.480 --> 00:08:11.000
pytest check, by the way, for people listening


00:08:11.000 --> 00:08:12.160
is the plugin.


00:08:12.160 --> 00:08:14.720
But it's cool to see it live, to see what's happening.


00:08:14.720 --> 00:08:17.040
So this apparently is what maintainers get.


00:08:17.040 --> 00:08:18.440
And I'm with you, actually.


00:08:18.440 --> 00:08:20.520
I think what's gonna happen is you just,


00:08:20.520 --> 00:08:22.920
you won't be able to upload with Twine anymore,


00:08:22.920 --> 00:08:24.660
you won't be able to log in,


00:08:24.660 --> 00:08:25.840
you won't be able to make changes,


00:08:25.840 --> 00:08:28.600
it'll just force you down a 2FA path potentially.


00:08:28.600 --> 00:08:30.160
- Yeah, I read that you still can upload


00:08:30.160 --> 00:08:31.360
'cause people wanna do,


00:08:31.360 --> 00:08:33.280
I know there were some people initially concerned about


00:08:33.280 --> 00:08:36.200
how do I do automatic uploads from my CI system or whatever?


00:08:36.200 --> 00:08:37.760
And you can do it if you get a token,


00:08:37.760 --> 00:08:40.400
but you have to generate one of those tokens


00:08:40.400 --> 00:08:43.360
with your 2FA enabled account to do that.


00:08:43.360 --> 00:08:44.480
- Right.


00:08:44.480 --> 00:08:46.880
That happens with all the 2FA accounts, right?


00:08:46.880 --> 00:08:49.200
You can no longer use your GitHub password


00:08:49.200 --> 00:08:51.400
for like all the CLI.


00:08:51.400 --> 00:08:53.840
Like once you set up GitHub 2FA,


00:08:53.840 --> 00:08:55.760
then all of a sudden you've got to go create an app,


00:08:55.760 --> 00:08:58.120
give it a name and get it like an API token for it


00:08:58.120 --> 00:09:00.240
and stuff like that, right?


00:09:00.240 --> 00:09:01.240
I think that's okay.


00:09:01.240 --> 00:09:05.640
So Brian, let's ask you, like, how do you feel about that?


00:09:05.640 --> 00:09:07.000
Does this seem like a big burden to you


00:09:07.000 --> 00:09:08.640
or are you okay with this or?


00:09:08.640 --> 00:09:10.520
- You know, I was, I'm okay with it


00:09:10.520 --> 00:09:14.960
because I think it's securing the supply chain.


00:09:14.960 --> 00:09:16.400
I mean, I've already enabled


00:09:16.400 --> 00:09:18.560
the two-factor authentication on GitHub.


00:09:18.560 --> 00:09:23.560
And I've got a bunch of banking stuff that I have on,


00:09:23.560 --> 00:09:26.740
you know, multi-factor authentication and stuff.


00:09:26.740 --> 00:09:31.740
So I'm waiting for 12 factor authentication,


00:09:31.740 --> 00:09:34.960
but that might be a bit extreme.


00:09:34.960 --> 00:09:37.320
- Right, now you put your small pinky toe


00:09:37.320 --> 00:09:39.000
onto the key reader over there,


00:09:39.000 --> 00:09:41.160
and then you hold down this key with your other finger.


00:09:41.160 --> 00:09:42.000
- Got a blood sample.


00:09:42.000 --> 00:09:43.240
- And then you put your face up.


00:09:43.240 --> 00:09:46.440
- Yeah, an optic scan, a blood scan,


00:09:46.440 --> 00:09:50.740
You gotta deposit a urine scan and all sorts of stuff


00:09:50.740 --> 00:09:51.580
you gotta do.


00:09:51.580 --> 00:09:55.420
- I know, I'm drawing the line there, I'm not doing it.


00:09:55.420 --> 00:09:57.660
(laughing)


00:09:57.660 --> 00:10:00.780
- So, I'm fine with it.


00:10:00.780 --> 00:10:02.860
I don't know the details yet though.


00:10:02.860 --> 00:10:04.700
If I gotta get a hardware key though,


00:10:04.700 --> 00:10:06.260
I'm gonna be a little upset.


00:10:06.260 --> 00:10:08.220
I think, I don't know.


00:10:08.220 --> 00:10:09.340
- Well, they might give you one for free,


00:10:09.340 --> 00:10:11.420
but yeah, even getting one for free,


00:10:11.420 --> 00:10:14.900
I feel like I'd be like, if I'm not a hardware key guy,


00:10:14.900 --> 00:10:15.740
I don't know.


00:10:15.740 --> 00:10:17.740
Well, what if I lose it?


00:10:17.740 --> 00:10:18.580
So.


00:10:18.580 --> 00:10:19.940
- Yes.


00:10:19.940 --> 00:10:22.020
First of all, let me preface the statement with,


00:10:22.020 --> 00:10:23.140
please don't email me.


00:10:23.140 --> 00:10:26.940
If we disagree on this, it's fine.


00:10:26.940 --> 00:10:27.940
Just don't email me.


00:10:27.940 --> 00:10:30.100
We can just agree to disagree.


00:10:30.100 --> 00:10:34.300
But I am personally not a fan of 2FA hardware keys.


00:10:34.300 --> 00:10:36.660
Because what if you lose it?


00:10:36.660 --> 00:10:38.820
It's really bad.


00:10:38.820 --> 00:10:43.060
Now all of a sudden, what if I'm traveling


00:10:43.060 --> 00:10:47.420
and like the website is down and I've got to log into the ISP,


00:10:47.420 --> 00:10:49.780
the cloud system to make a change.


00:10:49.780 --> 00:10:53.860
Did I, what if I forgot to bring the key or what if I do bring it, then I lose it.


00:10:53.860 --> 00:10:58.660
Like just the, the act of having a physical key that has to always be with you.


00:10:58.660 --> 00:11:00.460
Like, do you take it with you when you go swimming?


00:11:00.460 --> 00:11:03.820
I mean, I mean, that's a little extreme, but like if you're going to go to the


00:11:03.820 --> 00:11:06.380
beach and you might need it, what are you going to do?


00:11:06.380 --> 00:11:09.260
And then if I only have my phone, I can't plug it a key into the phone.


00:11:09.260 --> 00:11:09.540
I don't know.


00:11:09.540 --> 00:11:20.820
So it just, it seems like I certainly know why you would have it at like, if I worked at a bank and I needed to get on the VPN and I needed to have that permanently stuck in my computer, fine.


00:11:20.820 --> 00:11:29.780
But as a broad based solution, I feel like things like Authy, Google Authenticator, the Microsoft, whatever it's called, all those things.


00:11:31.220 --> 00:11:34.500
I think they still provide a pretty strong level of security


00:11:34.500 --> 00:11:37.980
while being able to travel with you


00:11:37.980 --> 00:11:39.900
and being able to synchronize across devices


00:11:39.900 --> 00:11:42.180
that you might not always have them with you.


00:11:42.180 --> 00:11:44.420
So yeah, when people say,


00:11:44.420 --> 00:11:45.980
it's always such a hassle to get these keys,


00:11:45.980 --> 00:11:48.380
like you could just set up Authy.


00:11:48.380 --> 00:11:49.420
You know what I mean?


00:11:49.420 --> 00:11:50.260
- Yeah.


00:11:50.260 --> 00:11:53.180
- Yeah, I use Authy too.


00:11:53.180 --> 00:11:55.700
I'm also, I'm a little freaked out by the hardware keys.


00:11:55.700 --> 00:11:57.980
I did find it interesting in the giveaway actually,


00:11:57.980 --> 00:12:00.100
I think they give you a coupon to get two


00:12:00.100 --> 00:12:03.480
so that like you could get two in case you lose one.


00:12:03.480 --> 00:12:06.980
But that to me, this is exactly why I don't want one.


00:12:06.980 --> 00:12:09.940
- Exactly, well, okay.


00:12:09.940 --> 00:12:11.820
So I've got one plugged into my computer


00:12:11.820 --> 00:12:14.620
and I put what one into the closet.


00:12:14.620 --> 00:12:17.980
If the house burns down, what am I gonna do?


00:12:17.980 --> 00:12:19.740
I mean, I'll probably I'll grab my phone and run


00:12:19.740 --> 00:12:20.740
maybe if I can get to it,


00:12:20.740 --> 00:12:23.580
but I'm not gonna go rooting around for a hardware key.


00:12:23.580 --> 00:12:24.900
I'm just gonna get out, you know what I mean?


00:12:24.900 --> 00:12:28.320
There's just all these like sort of weird edge cases


00:12:28.320 --> 00:12:29.160
that to me, I'm just like,


00:12:29.160 --> 00:12:32.160
I don't really want to depend on one of these hardware keys.


00:12:32.160 --> 00:12:37.720
Yeah, Brian's gonna have to go to the bank and his safe deposit box just to upload a new Pytest check.


00:12:37.720 --> 00:12:40.800
Yes, exactly.


00:12:40.800 --> 00:12:47.720
All right, I turn both keys to the right on 321. Okay, v1.2 is out. Yeah, okay.


00:12:47.720 --> 00:12:55.320
But I would just point out the article here from Armin, which was super interesting, I think.


00:12:55.320 --> 00:12:59.040
And it was, this kind of gets into, it'll probably lead us into the next topic


00:12:59.040 --> 00:13:01.860
here of why there was a little bit of controversy around this.


00:13:01.860 --> 00:13:05.240
And I think it wasn't so much that people are resistant to two factor.


00:13:05.240 --> 00:13:08.720
It's more this designation of packages as critical.


00:13:08.720 --> 00:13:12.540
And I don't know if that's just because like critical is a bit of a loaded term


00:13:12.540 --> 00:13:16.380
or it ended up feeling a little bit like a popularity contest, but.


00:13:16.380 --> 00:13:19.940
Yeah, I think it's pretty clear to me that PyPI wants to, you know, which is


00:13:19.940 --> 00:13:21.820
an open source project itself, right?


00:13:21.820 --> 00:13:25.080
Uh, wants to eventually probably roll this out to everybody and maybe


00:13:25.080 --> 00:13:27.980
doesn't have the capacity for that right now or something.


00:13:27.980 --> 00:13:30.200
- Yeah, I totally agree.


00:13:30.200 --> 00:13:33.920
And Armin's take is quite interesting.


00:13:33.920 --> 00:13:36.360
And he comes down a little bit on the middle.


00:13:36.360 --> 00:13:37.560
Like I see the value,


00:13:37.560 --> 00:13:40.240
but also I see why people are a little bit frustrated


00:13:40.240 --> 00:13:41.280
with this.


00:13:41.280 --> 00:13:44.840
He does talk about this thing that the Rust community has,


00:13:44.840 --> 00:13:47.800
had to have towards topic four as well,


00:13:47.800 --> 00:13:50.240
called CargoVet,


00:13:50.240 --> 00:13:55.240
which is the idea of vetted packages and unvetted packages.


00:13:55.240 --> 00:13:58.440
So if you, when you pip install something,


00:13:58.440 --> 00:14:01.040
you could say something like,


00:14:01.040 --> 00:14:05.760
do I only want to allow like the higher vetted packages?


00:14:05.760 --> 00:14:07.360
PyPI doesn't have this at the moment,


00:14:07.360 --> 00:14:10.140
but other package indexes do.


00:14:10.140 --> 00:14:13.440
To me, again, coming back to the hardware thing,


00:14:13.440 --> 00:14:14.720
I feel like people saw this and they're like,


00:14:14.720 --> 00:14:16.120
"I've got to go to this hardware key.


00:14:16.120 --> 00:14:16.960
Like this seems like,


00:14:16.960 --> 00:14:19.080
I can't believe you're forcing this on me."


00:14:20.100 --> 00:14:22.620
If you're a software developer in 2022


00:14:22.620 --> 00:14:25.400
and you don't have any form of 2FA setup,


00:14:25.400 --> 00:14:29.580
I feel like those are the people who got really frustrated,


00:14:29.580 --> 00:14:30.620
but at the same time,


00:14:30.620 --> 00:14:36.700
what are you doing on the internet in 2022


00:14:36.700 --> 00:14:39.420
without at least a few things on 2FA?


00:14:39.420 --> 00:14:42.600
My Authy account has something like 46


00:14:42.600 --> 00:14:45.200
different 2FAs in there.


00:14:45.200 --> 00:14:48.540
My 1Password has like a thousand accounts.


00:14:48.540 --> 00:14:50.660
I don't know.


00:14:50.660 --> 00:14:53.980
It doesn't seem like a huge burden to hold up your phone,


00:14:53.980 --> 00:14:56.220
scan a QR code and carry on.


00:14:56.220 --> 00:14:58.600
But if you're not in the 2FA space,


00:14:58.600 --> 00:15:00.200
and especially if you perceive that to mean


00:15:00.200 --> 00:15:02.820
I gotta get into the hardware 2FA space,


00:15:02.820 --> 00:15:05.440
I can see why people would see this as frustrating.


00:15:05.440 --> 00:15:07.220
And with that, maybe it's time to just move


00:15:07.220 --> 00:15:08.720
to the next topic, number two,


00:15:08.720 --> 00:15:14.680
which is PyPI moved to require 2FA for critical projects,


00:15:14.680 --> 00:15:15.980
which is this here.


00:15:15.980 --> 00:15:17.800
But what's really interesting is


00:15:17.800 --> 00:15:21.200
there's sort of talking about the challenges.


00:15:21.200 --> 00:15:23.260
And one of the things that happened


00:15:23.260 --> 00:15:25.960
is there's this project called Atomic Writes,


00:15:25.960 --> 00:15:28.640
which was designated as critical.


00:15:28.640 --> 00:15:33.660
Atomics Writes, what it actually does,


00:15:33.660 --> 00:15:35.280
it's pretty straightforward,


00:15:35.280 --> 00:15:37.840
is it lets you use a context manager


00:15:37.840 --> 00:15:41.840
to write to files atomically.


00:15:41.840 --> 00:15:44.200
So you can write to the file, write to the file,


00:15:46.040 --> 00:15:51.040
if there's some kind of crash or mistake or bug or something,


00:15:51.040 --> 00:15:54.800
it won't actually change the file.


00:15:54.800 --> 00:15:58.440
So normally you would just do like while true,


00:15:58.440 --> 00:16:01.020
start writing, and if something crashes,


00:16:01.020 --> 00:16:02.920
like you'll have a half written file.


00:16:02.920 --> 00:16:03.960
So this is kind of cool.


00:16:03.960 --> 00:16:06.380
It says, what are you gonna do is use a context manager,


00:16:06.380 --> 00:16:09.520
open a file, we're gonna write to a temp file.


00:16:09.520 --> 00:16:13.240
And then when you exit the context manager successfully,


00:16:13.240 --> 00:16:14.760
we're gonna apply all those changes


00:16:14.760 --> 00:16:19.400
by doing an overwrite move type of operation at the OS level.


00:16:19.400 --> 00:16:21.400
I don't know how truly atomic it is,


00:16:21.400 --> 00:16:23.740
but it sure is better than writing line by line.


00:16:23.740 --> 00:16:28.360
And certainly it has the data safety aspect,


00:16:28.360 --> 00:16:30.160
which is pretty cool.


00:16:30.160 --> 00:16:36.040
Anyway, apparently people use this, as in 127,839 packages.


00:16:36.040 --> 00:16:40.560
Maybe that number was higher not long ago.


00:16:40.560 --> 00:16:42.920
Packages, projects on GitHub use this.


00:16:42.920 --> 00:16:44.480
I guess not packages, but projects,


00:16:44.480 --> 00:16:47.360
many of which were packages themselves.


00:16:47.360 --> 00:16:52.360
So this guy, Marcus Unterwalitzer,


00:16:52.360 --> 00:16:58.120
said, "You know what?


00:16:58.120 --> 00:17:00.200
This is really frustrating to me.


00:17:00.200 --> 00:17:02.040
I don't wanna set up 2FA.


00:17:02.040 --> 00:17:06.820
So I'm just going to unpublish this, take it down."


00:17:06.820 --> 00:17:11.160
And so I don't know exactly what the chain of events was.


00:17:11.160 --> 00:17:14.040
I think something happened to the GitHub repository


00:17:14.040 --> 00:17:17.160
getting deleted, which then triggered,


00:17:17.160 --> 00:17:20.320
maybe also somehow triggered a delete


00:17:20.320 --> 00:17:24.360
of all of the historical PyPI packages.


00:17:24.360 --> 00:17:26.720
Whatever the steps were,


00:17:26.720 --> 00:17:29.920
it erased all the historical PyPI packages.


00:17:29.920 --> 00:17:35.240
So imagine your project has a dependency on atomic rights


00:17:35.240 --> 00:17:38.840
and your requirements.txt or pyproject.toml


00:17:38.840 --> 00:17:43.380
or whatever says equal, equal, what version are we on?


00:17:43.380 --> 00:17:45.580
We're getting some releases here.


00:17:45.580 --> 00:17:47.340
There's no releases anymore, so I can't tell you.


00:17:47.340 --> 00:17:50.060
But if you had like some concrete number there,


00:17:50.060 --> 00:17:53.300
it would say, pip would say, can't find that, sorry.


00:17:53.300 --> 00:17:58.220
And so all sorts of stuff started breaking.


00:17:58.220 --> 00:18:00.340
Continuous deployment, continuous integration,


00:18:00.340 --> 00:18:04.380
a bunch of PyPI, pytest packages,


00:18:04.380 --> 00:18:06.820
tests and automation and stuff.


00:18:06.820 --> 00:18:08.340
Brian, maybe you saw some people going,


00:18:08.340 --> 00:18:09.980
What's going on with this thing?


00:18:09.980 --> 00:18:13.320
- I didn't really notice it, but.


00:18:13.320 --> 00:18:17.220
- Well, you'd only notice if you depended upon this


00:18:17.220 --> 00:18:18.460
and had set up automation, right?


00:18:18.460 --> 00:18:20.020
Like basically check out your code,


00:18:20.020 --> 00:18:22.700
install the dependencies, run pytest.


00:18:22.700 --> 00:18:24.660
But people were like, these tests used to pass.


00:18:24.660 --> 00:18:25.780
Why are they no longer passing?


00:18:25.780 --> 00:18:28.620
And it's 'cause pip couldn't install this project


00:18:28.620 --> 00:18:31.120
that Marcus got a little frustrated with


00:18:31.120 --> 00:18:33.360
and deleted out of PyPI.


00:18:33.360 --> 00:18:37.620
So that's interesting, right?


00:18:37.620 --> 00:18:39.740
Like, should he have done that?


00:18:39.740 --> 00:18:40.980
I don't know.


00:18:40.980 --> 00:18:42.820
Here's this sort of comment saying,


00:18:42.820 --> 00:18:44.820
here's what you got.


00:18:44.820 --> 00:18:46.900
And it says, "PiPI just told me to enable 2FA


00:18:46.900 --> 00:18:48.320
"to keep uploading this package


00:18:48.320 --> 00:18:50.660
"because I thought it was annoying and entitled


00:18:50.660 --> 00:18:53.440
"to guarantee the software compliance


00:18:53.440 --> 00:18:55.400
"for a handful of companies."


00:18:55.400 --> 00:18:57.580
Basically, his take was,


00:18:57.580 --> 00:18:59.800
"You're making me secure the supply chain


00:18:59.800 --> 00:19:01.780
"so that large banks and other companies


00:19:01.780 --> 00:19:05.140
"that care about it will feel better.


00:19:05.140 --> 00:19:07.040
"And you're making me do extra work."


00:19:07.040 --> 00:19:11.800
Again, that I think the confusion about hardware,


00:19:11.800 --> 00:19:14.360
moving to hardware 2FA versus just scanning


00:19:14.360 --> 00:19:16.320
a QR code with your phone.


00:19:16.320 --> 00:19:18.560
Anyway, you're making me do extra work,


00:19:18.560 --> 00:19:19.920
and so I deleted the packages.


00:19:19.920 --> 00:19:24.840
Apparently, that had deleted all the old versions, sorry.


00:19:24.840 --> 00:19:30.080
Those have been restored by directly working with,


00:19:30.080 --> 00:19:32.340
I believe, Dustin Ingram from PyPI.


00:19:32.340 --> 00:19:34.700
So if you go down here somewhere, it says,


00:19:34.700 --> 00:19:38.340
No, sorry, Donald stuffed was the one who helped fix it.


00:19:38.340 --> 00:19:44.780
But yeah, it shows you, I guess, unintended consequences.


00:19:44.780 --> 00:19:47.940
Hey, we're gonna make atomic rights a little safer.


00:19:47.940 --> 00:19:49.900
Maintainer of atomic rights doesn't like that,


00:19:49.900 --> 00:19:51.800
deletes it, makes everything break.


00:19:51.800 --> 00:19:54.340
Ashley, what's your take on this?


00:19:54.340 --> 00:19:55.580
You've been tracking it.


00:19:55.580 --> 00:19:59.100
- Yeah, I mean, I find it really interesting.


00:19:59.100 --> 00:20:01.700
Like it gets to the whole, you know,


00:20:01.700 --> 00:20:05.080
what is the sustainability of this giant open source


00:20:05.080 --> 00:20:06.320
ecosystem that we have?


00:20:06.320 --> 00:20:08.680
I know, I think in the show notes,


00:20:08.680 --> 00:20:10.980
you refer to this as Python's left pad incident


00:20:10.980 --> 00:20:12.880
or something like that, which is sort of a throwback


00:20:12.880 --> 00:20:17.760
to a very similar thing that happened in NPM recently.


00:20:17.760 --> 00:20:20.260
And I think there was another one recently,


00:20:20.260 --> 00:20:24.920
like at the start of the Ukraine war, basically,


00:20:24.920 --> 00:20:26.460
where someone, I think, pulled their package


00:20:26.460 --> 00:20:29.360
and put in something that was like protest wear


00:20:29.360 --> 00:20:31.240
or something like that.


00:20:31.240 --> 00:20:33.800
- It's trying to delete all the data off the hard drives


00:20:33.800 --> 00:20:36.780
if it detected you are in certain countries or something,


00:20:36.780 --> 00:20:41.780
which is a pretty rough hammer to use.


00:20:41.780 --> 00:20:43.520
- Yeah, pretty extreme measure.


00:20:43.520 --> 00:20:48.320
- What if you were working to collect data


00:20:48.320 --> 00:20:51.440
about trying to help Ukraine,


00:20:51.440 --> 00:20:53.000
but you happen to be in this other country?


00:20:53.000 --> 00:20:55.880
I mean, this is just, yeah, it's just overstepping,


00:20:55.880 --> 00:20:59.080
I think a little bit with unintended consequences again.


00:20:59.080 --> 00:21:00.680
- Yeah, but this is like, I mean,


00:21:00.680 --> 00:21:03.240
Working in industry and having to pin our packages and stuff,


00:21:03.240 --> 00:21:05.680
this is something that we already


00:21:05.680 --> 00:21:07.720
protect for by mirroring--


00:21:07.720 --> 00:21:10.000
I think most people with--


00:21:10.000 --> 00:21:12.640
I'm going to use critical not in the way that's being used here,


00:21:12.640 --> 00:21:14.960
but when you have a project and you're


00:21:14.960 --> 00:21:17.720
using all these dependencies, it's also on you


00:21:17.720 --> 00:21:19.560
to know that, well, the supply chain--


00:21:19.560 --> 00:21:22.680
I mean, PyPI doesn't have a permanent retention policy.


00:21:22.680 --> 00:21:26.760
Maybe it should, but that is going to lead to potentially


00:21:26.760 --> 00:21:28.720
much even bigger hosting costs and everything


00:21:28.720 --> 00:21:31.260
for what's already a really expensive project,


00:21:31.260 --> 00:21:34.080
we run into the same thing with like packages from Ubuntu


00:21:34.080 --> 00:21:35.620
and stuff like that as well.


00:21:35.620 --> 00:21:37.620
Not that they get pulled in this way,


00:21:37.620 --> 00:21:40.260
but they'll bump versions on us that, you know,


00:21:40.260 --> 00:21:41.580
and especially in a regulated industry,


00:21:41.580 --> 00:21:44.580
we can't just update dependencies whenever they come out.


00:21:44.580 --> 00:21:50.000
- It wouldn't surprise me to see PyPI become immutable


00:21:50.000 --> 00:21:52.780
once it goes up there, like you can't change it.


00:21:52.780 --> 00:21:54.700
- Yeah, or more so, right?


00:21:54.700 --> 00:21:57.020
- Yeah, I would expect it to be more of a request thing.


00:21:57.020 --> 00:21:59.500
you put in a request and say, hey, I want to, this is mine.


00:21:59.500 --> 00:22:00.860
I want to take it down.


00:22:00.860 --> 00:22:04.500
And some review happens or something


00:22:04.500 --> 00:22:06.860
because people depend on it.


00:22:06.860 --> 00:22:09.860
And I get, I get, I kind of get both sides of it.


00:22:09.860 --> 00:22:11.740
I get that it's my thing.


00:22:11.740 --> 00:22:13.940
I should have complete control over it,


00:22:13.940 --> 00:22:15.580
but I also don't have,


00:22:15.580 --> 00:22:17.780
I don't have complete control over GitHub.


00:22:17.780 --> 00:22:22.780
I don't have complete control over PyPI or the PSF.


00:22:22.780 --> 00:22:24.660
And I use those services.


00:22:25.740 --> 00:22:29.060
they can, like the PSF for instance,


00:22:29.060 --> 00:22:31.420
they like purge all of your accounts like once a year


00:22:31.420 --> 00:22:32.260
or something like that.


00:22:32.260 --> 00:22:35.820
And you have to re-log in or recreate your account.


00:22:35.820 --> 00:22:40.660
And, you know, projects and services


00:22:40.660 --> 00:22:43.340
change their policies every once in a while.


00:22:43.340 --> 00:22:47.020
And this is a change in policy that for some projects


00:22:47.020 --> 00:22:49.340
we're gonna require 2FA.


00:22:49.340 --> 00:22:50.380
They can do that.


00:22:50.380 --> 00:22:53.540
And if I wanna continue to use it, I have to.


00:22:53.540 --> 00:22:55.900
Now, if I don't wanna continue to use it,


00:22:55.900 --> 00:23:00.220
that's a, I guess that's where we're getting the question in


00:23:00.220 --> 00:23:03.780
is what ramifications are there?


00:23:03.780 --> 00:23:07.720
Could somebody take their stuff off of PyPI or not?


00:23:07.720 --> 00:23:10.140
Don't know.


00:23:10.140 --> 00:23:10.960
- Yeah.


00:23:10.960 --> 00:23:15.540
Yep, I think that if you read a lot of the conversations


00:23:15.540 --> 00:23:18.500
here, maybe we'll just close up this whole section on that.


00:23:18.500 --> 00:23:21.620
It comes down to two different beliefs.


00:23:21.620 --> 00:23:26.620
One, it's my code, I wrote it, I can do whatever I want.


00:23:26.620 --> 00:23:29.340
I own it, if I don't like it, I can just delete it.


00:23:29.340 --> 00:23:31.380
If I wanna stop, I can stop.


00:23:31.380 --> 00:23:34.460
The other one says, once you put it out there on GitHub


00:23:34.460 --> 00:23:38.300
and you've put it out to the world as here's a library


00:23:38.300 --> 00:23:39.780
that you can use and depend upon


00:23:39.780 --> 00:23:41.380
and you publish it to the index


00:23:41.380 --> 00:23:44.060
with a clear intention of sharing it,


00:23:44.060 --> 00:23:47.440
you have a minuscule responsibility


00:23:47.440 --> 00:23:48.780
not to keep working on it,


00:23:48.780 --> 00:23:51.520
but to not destroy it for other people


00:23:51.520 --> 00:23:53.760
who are building on what you previously did.


00:23:53.760 --> 00:23:56.400
- Yeah, I think there's a difference there too


00:23:56.400 --> 00:23:58.720
between like writing and publishing the code


00:23:58.720 --> 00:24:00.840
and publishing a package or distributing a package


00:24:00.840 --> 00:24:02.640
that's intended to be, you know,


00:24:02.640 --> 00:24:05.080
conveniently downloaded in CI and stuff like that,


00:24:05.080 --> 00:24:07.480
where you're kind of making a little bit more


00:24:07.480 --> 00:24:08.580
of a promise there.


00:24:08.580 --> 00:24:11.200
But also, I mean, going back to Marcus's post here,


00:24:11.200 --> 00:24:13.640
it sounds like his intention wasn't to break,


00:24:13.640 --> 00:24:16.860
you know, people's existing workflows and stuff like that.


00:24:16.860 --> 00:24:18.580
It was really, he just didn't want to be


00:24:18.580 --> 00:24:21.940
the maintainer of a critical package.


00:24:21.940 --> 00:24:22.440
Exactly.


00:24:22.440 --> 00:24:23.440
He's like, I deleted it.


00:24:23.440 --> 00:24:24.340
That fixed it.


00:24:24.340 --> 00:24:24.840
Yeah.


00:24:24.840 --> 00:24:28.700
And then became, I think, the sort of poster


00:24:28.700 --> 00:24:30.040
of this controversy.


00:24:30.040 --> 00:24:31.540
So yeah.


00:24:31.540 --> 00:24:32.040
Yeah.


00:24:32.040 --> 00:24:33.640
Yeah, yeah.


00:24:33.640 --> 00:24:36.440
If you read Marcus's Twitter, you can go back and sort of--


00:24:36.440 --> 00:24:37.820
you kind of get a sense that he's


00:24:37.820 --> 00:24:40.520
the kind of person that would not


00:24:40.520 --> 00:24:44.280
want to take that kind of stuff being put upon him or whatever.


00:24:44.280 --> 00:24:47.120
Let's wrap it up with Teddy's comment out in the audience.


00:24:47.120 --> 00:24:49.020
Feels like a small step to enable 2FA.


00:24:49.020 --> 00:24:50.460
I wonder why it creates so much debate.


00:24:50.460 --> 00:24:51.300
Feels a bit political,


00:24:51.300 --> 00:24:54.060
especially today where 2FA is required almost everywhere.


00:24:54.060 --> 00:24:57.500
Yeah, I agree.


00:24:57.500 --> 00:24:59.820
I think, again, I think people saw the,


00:24:59.820 --> 00:25:00.700
here's your hardware key.


00:25:00.700 --> 00:25:01.940
Like I don't want a hardware key.


00:25:01.940 --> 00:25:05.540
This is so much work, but let's move on, Brian.


00:25:05.540 --> 00:25:07.940
That was a good one, but let's fast.


00:25:07.940 --> 00:25:08.940
Let's get out of there.


00:25:08.940 --> 00:25:10.700
- Yeah, fast, a harsh transition.


00:25:10.700 --> 00:25:13.300
Yeah, let's just talk about FastAPI.


00:25:13.300 --> 00:25:17.500
You know, anyway, don't transition from that.


00:25:17.500 --> 00:25:19.300
So that's good.


00:25:19.300 --> 00:25:24.300
FastAPI filter came up, it was suggested by Arthur Ryo,


00:25:24.300 --> 00:25:27.660
who is also the creator of it.


00:25:27.660 --> 00:25:28.820
And it looks pretty cool.


00:25:28.820 --> 00:25:32.080
So it's, he said in a tweet,


00:25:32.080 --> 00:25:36.620
"I loved using Django filter with Django REST framework,


00:25:36.620 --> 00:25:39.580
and I wanted an equivalent for FastAPI."


00:25:39.580 --> 00:25:42.700
So what this is, is this is a package you add to a project


00:25:42.700 --> 00:25:44.540
that uses FastAPI.


00:25:44.540 --> 00:25:47.500
And with it, you get, like when you're going through


00:25:47.500 --> 00:25:51.380
the cool debug user interface stuff,


00:25:51.380 --> 00:25:54.260
you can filter stuff.


00:25:54.260 --> 00:25:59.260
So you can, you know, it'll look at your schema


00:25:59.260 --> 00:26:02.700
and then you can, you know, filter different items


00:26:02.700 --> 00:26:04.320
and only see part of it.


00:26:04.320 --> 00:26:07.100
And it's just pretty neat.


00:26:07.100 --> 00:26:11.020
He also, it also has things like the filters


00:26:11.020 --> 00:26:15.840
support operators like greater than, greater than equal,


00:26:15.840 --> 00:26:18.940
less than, not in and things like that.


00:26:18.940 --> 00:26:21.260
So it's kind of a fun way to just filter


00:26:21.260 --> 00:26:23.460
when you're looking at your data, filter it.


00:26:23.460 --> 00:26:27.580
And in his read me, he mentions that he's got a video


00:26:27.580 --> 00:26:29.380
and you kind of need a big screen for this,


00:26:29.380 --> 00:26:34.300
but he does have a video to show it in action,


00:26:34.300 --> 00:26:36.160
which is kind of cool.


00:26:36.160 --> 00:26:38.860
He shows filtering some of the data


00:26:38.860 --> 00:26:41.360
and then seeing the different data output.


00:26:41.360 --> 00:26:44.440
Anyway, just kind of a neat, nice debugging tool


00:26:44.440 --> 00:26:45.840
if you're using FastAPI.


00:26:45.840 --> 00:26:48.760
- Oh, that's really awesome.


00:26:48.760 --> 00:26:54.000
Ashley, do you do anything with FastAPI?


00:26:54.000 --> 00:26:54.880
- Unfortunately, no.


00:26:54.880 --> 00:26:57.160
This just makes me more jealous, I think,


00:26:57.160 --> 00:26:59.160
of the people who get to use FastAPI


00:26:59.160 --> 00:27:00.840
'cause it's got all these cool,


00:27:00.840 --> 00:27:04.440
I mean, as a developer, I've played around with it,


00:27:04.440 --> 00:27:07.880
but it's got all these cool debug admin interfaces


00:27:07.880 --> 00:27:09.620
and then you see even more stuff like this


00:27:09.620 --> 00:27:12.960
kind of built on top of that, it's really awesome.


00:27:12.960 --> 00:27:14.360
- Yeah, absolutely.


00:27:14.360 --> 00:27:22.040
- Yeah, and I'm planning on learning more about FastAPI


00:27:22.040 --> 00:27:24.400
on Michael's upcoming course, so.


00:27:24.400 --> 00:27:26.480
(laughing)


00:27:26.480 --> 00:27:29.520
- Yeah, are you gonna be able to make it, Brian?


00:27:29.520 --> 00:27:32.600
- I'm gonna make sure I make it, yeah.


00:27:32.600 --> 00:27:34.520
- Awesome, yeah. - I'm looking forward to that.


00:27:34.520 --> 00:27:37.600
- Yeah, that's the live in-person FastAPI course.


00:27:37.600 --> 00:27:40.560
I'm doing about a month from now, so should be fine.


00:27:40.560 --> 00:27:44.740
- Cool, so what do you got for us next, Michael?


00:27:44.740 --> 00:27:46.660
- Ashley's next, I'm letting him go next.


00:27:46.660 --> 00:27:47.740
- Oh, right, okay.


00:27:47.740 --> 00:27:50.240
- Yeah, we'll scroll down to mine then.


00:27:50.240 --> 00:27:53.280
Yeah, so I guess I think kind of the reason I'm here,


00:27:53.280 --> 00:27:55.700
I emailed you guys after there was some discussion


00:27:55.700 --> 00:27:58.540
on the podcast a few weeks ago about,


00:27:58.540 --> 00:28:00.740
hey, we're seeing a lot more stuff built in Rust


00:28:00.740 --> 00:28:03.220
and you had some good points about like


00:28:03.220 --> 00:28:05.260
why we're seeing that,


00:28:05.260 --> 00:28:09.660
but I thought super relevant to this podcast is this project.


00:28:09.660 --> 00:28:14.460
And in fact, this whole organization, Py03 on GitHub,


00:28:14.460 --> 00:28:16.380
has a number of projects in here that


00:28:16.380 --> 00:28:19.740
are super relevant to Python developers, obviously.


00:28:19.740 --> 00:28:24.420
So the main one, I think, is Py03, which is Rust findings.


00:28:24.420 --> 00:28:26.060
And basically, what I emailed you guys


00:28:26.060 --> 00:28:29.060
was that my hypothesis is the tooling around building


00:28:29.060 --> 00:28:34.180
extensions for Python in Rust or calling Python from Rust


00:28:34.180 --> 00:28:37.260
is getting so good and so easy that for me,


00:28:37.260 --> 00:28:40.620
I find this preferable writing C extensions, for example,


00:28:40.620 --> 00:28:43.180
now, not even necessarily because of Rust,


00:28:43.180 --> 00:28:45.700
although Rust is a really great language


00:28:45.700 --> 00:28:48.260
I've been getting into over the last year.


00:28:48.260 --> 00:28:51.740
But just that tooling aspect of it is really great.


00:28:51.740 --> 00:28:53.980
So the experience is pretty awesome


00:28:53.980 --> 00:28:55.980
based on these separate products.


00:28:55.980 --> 00:28:59.020
So there's Py03, which is the bindings.


00:28:59.020 --> 00:29:02.980
And this allows you to basically use these type of things.


00:29:02.980 --> 00:29:04.580
It's almost like a function decorator.


00:29:04.580 --> 00:29:07.140
These are called procedural macros.


00:29:07.140 --> 00:29:08.280
They're kind of tricky to write,


00:29:08.280 --> 00:29:09.860
but they're really easy to use.


00:29:09.860 --> 00:29:11.500
You just put this on there


00:29:11.500 --> 00:29:14.060
and then use this one to create a module,


00:29:14.060 --> 00:29:15.480
add your function to the module.


00:29:15.480 --> 00:29:17.100
And then if you build this file,


00:29:17.100 --> 00:29:19.940
you can import it in Python and run this function.


00:29:19.940 --> 00:29:23.980
So the combination of, you know, the ease of writing this,


00:29:23.980 --> 00:29:27.180
and then there's another project in here called Maturin.


00:29:27.180 --> 00:29:28.500
- Before you move on real quick,


00:29:28.500 --> 00:29:31.420
maybe for people listening,


00:29:31.420 --> 00:29:35.180
if you go back just real quick to that section you had there.


00:29:35.180 --> 00:29:36.020
- Yeah.


00:29:36.020 --> 00:29:40.820
- So the idea is what you do is you write some Rust code


00:29:40.820 --> 00:29:43.580
and then you put, do you call it a decorator


00:29:43.580 --> 00:29:44.420
or an attributor?


00:29:44.420 --> 00:29:45.900
What do you call that hash?


00:29:45.900 --> 00:29:47.620
- It's called a macro.


00:29:47.620 --> 00:29:50.180
Yeah, a procedural macro, but you can just call it a macro.


00:29:50.180 --> 00:29:51.380
- Right.


00:29:51.380 --> 00:29:54.580
Yeah, so you put the macro onto function.


00:29:54.580 --> 00:29:57.180
There's one function that defines the module.


00:29:57.180 --> 00:29:58.340
And then in there, you just say,


00:29:58.340 --> 00:30:00.700
here are basically all the things I'm exporting


00:30:00.700 --> 00:30:03.100
from Rust over to Python,


00:30:03.100 --> 00:30:04.280
and those are just the ones you've wrapped


00:30:04.280 --> 00:30:05.660
with the macro, right?


00:30:05.660 --> 00:30:07.180
- Mm-hmm, yep.


00:30:07.180 --> 00:30:09.220
Yeah, exactly. - Assuming that writing Rust


00:30:09.220 --> 00:30:11.700
for you is straightforward,


00:30:11.700 --> 00:30:13.980
that this is a really simple addition.


00:30:13.980 --> 00:30:16.500
- Yeah, and I think, you know, once you have this kind of,


00:30:16.500 --> 00:30:18.140
you know, there's a little bit of boilerplate in here,


00:30:18.140 --> 00:30:20.940
but these macros reduce the boilerplate so much


00:30:20.940 --> 00:30:22.580
that once you're in the function,


00:30:22.580 --> 00:30:24.340
in fact, I think this is like a really cool way


00:30:24.340 --> 00:30:25.420
to get started with Rust,


00:30:25.420 --> 00:30:29.100
because some of the really steep learning curve in Rust


00:30:29.100 --> 00:30:31.140
is when you're building larger projects


00:30:31.140 --> 00:30:34.340
and you have to deal with strict typing and lifetimes


00:30:34.340 --> 00:30:36.540
and all these scary things that Rust can do,


00:30:36.540 --> 00:30:39.960
but you're limited to just a function scope


00:30:39.960 --> 00:30:42.100
'cause that's what you're calling from Python.


00:30:42.100 --> 00:30:43.980
I think it's kind of a cool way to get started


00:30:43.980 --> 00:30:46.640
and just get familiar with the syntax.


00:30:46.640 --> 00:30:47.640
- Interesting, yeah.


00:30:47.640 --> 00:30:51.020
- And yeah, I think part of the reason


00:30:51.020 --> 00:30:53.740
these tools are so great is the whole Rust community


00:30:53.740 --> 00:30:56.640
puts a lot of value on tooling.


00:30:56.640 --> 00:30:58.580
It's a relatively young language,


00:30:58.580 --> 00:31:02.620
So from the start, I think it had this sort of attitude


00:31:02.620 --> 00:31:05.700
of building good ergonomics for developers,


00:31:05.700 --> 00:31:08.180
having a single command line tool that can


00:31:08.180 --> 00:31:10.220
do all these different things.


00:31:10.220 --> 00:31:12.420
And so this group that maintains Py03


00:31:12.420 --> 00:31:14.980
has also created this tool called Maturin,


00:31:14.980 --> 00:31:17.700
which feels to me a lot like Flit,


00:31:17.700 --> 00:31:21.420
like the super lightweight wheel builder.


00:31:21.420 --> 00:31:22.780
And so you see here, you just run


00:31:22.780 --> 00:31:25.620
Maturin develop with this project structure in here.


00:31:25.620 --> 00:31:27.980
It also has a Maturin init, I think,


00:31:27.980 --> 00:31:29.980
which will create a new project for you.


00:31:29.980 --> 00:31:32.980
And then you see here, this develop will actually,


00:31:32.980 --> 00:31:34.460
you know, give you some output, whatever,


00:31:34.460 --> 00:31:35.980
'cause it builds a wheel


00:31:35.980 --> 00:31:37.940
and then installs it in your virtual environment.


00:31:37.940 --> 00:31:39.900
And so then you can see here, you can just call


00:31:39.900 --> 00:31:41.860
into that code and then this is, you know,


00:31:41.860 --> 00:31:43.560
calling Rust code for you already.


00:31:43.560 --> 00:31:45.540
- Oh, cool.


00:31:45.540 --> 00:31:47.260
Really nice.


00:31:47.260 --> 00:31:50.460
Have you built things that you've released


00:31:50.460 --> 00:31:53.700
or are backed by Rust?


00:31:53.700 --> 00:31:56.380
- Not released, but like I've done, you know,


00:31:56.380 --> 00:32:02.920
some hobbyist things and then also some stuff for work as well.


00:32:02.920 --> 00:32:07.100
Some small pieces of-- mostly, I work in--


00:32:07.100 --> 00:32:08.580
I came from a scientific background,


00:32:08.580 --> 00:32:11.940
and I now work for this, like I said, a portable MRI startup.


00:32:11.940 --> 00:32:14.780
So our whole thing is like Python from top to bottom,


00:32:14.780 --> 00:32:16.260
which is really cool.


00:32:16.260 --> 00:32:18.100
But for those performance-critical numerical


00:32:18.100 --> 00:32:21.700
computing things, we use a ton of NumPy and TensorFlow,


00:32:21.700 --> 00:32:25.100
but then also some C extensions.


00:32:25.100 --> 00:32:26.340
and I've been just kind of playing around


00:32:26.340 --> 00:32:27.900
with converting those to Rust.


00:32:27.900 --> 00:32:31.500
And this Rust NumPy is another one of their projects here


00:32:31.500 --> 00:32:34.300
that makes it really easy to write a function


00:32:34.300 --> 00:32:36.220
that'll take a NumPy array basically


00:32:36.220 --> 00:32:39.220
and do some calculations on it.


00:32:39.220 --> 00:32:40.340
- No, fantastic.


00:32:40.340 --> 00:32:43.060
Rust NumPy.


00:32:43.060 --> 00:32:45.980
So is it like an interoperability layer


00:32:45.980 --> 00:32:48.220
between Rust and NumPy?


00:32:48.220 --> 00:32:52.340
- Yeah, it pretty much just lets you like take NumPy arrays


00:32:52.340 --> 00:32:54.180
from Python into your Rust functions


00:32:54.180 --> 00:32:59.140
that you're creating with Py03, and then also create NumPy


00:32:59.140 --> 00:33:02.020
arrays and return them from those functions.


00:33:02.020 --> 00:33:04.180
And it depends heavily on NDArray,


00:33:04.180 --> 00:33:06.260
which is a pure Rust project here


00:33:06.260 --> 00:33:09.380
for n-dimensional arrays and computation,


00:33:09.380 --> 00:33:11.380
which is probably more analogous to what actually


00:33:11.380 --> 00:33:15.100
NumPy itself is, but in the Rust ecosystem.


00:33:15.100 --> 00:33:16.620
Sure.


00:33:16.620 --> 00:33:17.120
Very cool.


00:33:17.120 --> 00:33:19.860
That's pretty cool.


00:33:19.860 --> 00:33:22.980
So why Rust over C?


00:33:22.980 --> 00:33:27.100
I mean, I think it's, I was mentioning to you before,


00:33:27.100 --> 00:33:31.820
like, you know, the Rust community is really excited about Rust.


00:33:31.820 --> 00:33:33.980
Like everyone who tries it likes it, I think.


00:33:33.980 --> 00:33:36.620
It's, you know, topping the charts and all these, you know,


00:33:36.620 --> 00:33:39.100
most loved programming language surveys and stuff like that


00:33:39.100 --> 00:33:40.700
from Stack Overflow and everything.


00:33:40.700 --> 00:33:45.860
It guarantees, you know, it provides some more stronger guarantees


00:33:45.860 --> 00:33:50.240
around memory safety while still maintaining high performance.


00:33:50.240 --> 00:33:53.840
That comes at a cost of a little bit of complexity and learning curve.


00:33:53.840 --> 00:33:58.280
It also happens to, with those memory safety things,


00:33:58.280 --> 00:34:01.040
come with what they call fearless concurrency,


00:34:01.040 --> 00:34:04.780
where the typing system can prevent you from creating race conditions


00:34:04.780 --> 00:34:09.160
and actually warn you about them or fail to compile at compile time.


00:34:10.260 --> 00:34:19.700
And so I find like the tradeoffs between memory safety and performance and ease of use to be really interesting between Rust and Python,


00:34:19.700 --> 00:34:28.740
they make completely different choices, but like both sort of with similar things in mind, like Python sacrifices some performance for ease of development,


00:34:28.740 --> 00:34:37.540
but still wants to be memory safe, right? Like, if you're getting a seg fault in Python, you're calling into something and doing something wrong, or it's hard to do that with pure Python code, right?


00:34:37.820 --> 00:34:38.940
And same is true of Rust.


00:34:38.940 --> 00:34:42.140
It's like, if you're not writing what they call unsafe code,


00:34:42.140 --> 00:34:43.780
where you have to kind of wrap it


00:34:43.780 --> 00:34:46.180
in a block that's actually called unsafe,


00:34:46.180 --> 00:34:48.500
you shouldn't end up with those type of problems.


00:34:48.500 --> 00:34:50.700
So it's kind of cool to see those two things.


00:34:50.700 --> 00:34:52.660
And then when you really do need performance,


00:34:52.660 --> 00:34:55.380
you can drop into this sort of lower level language.


00:34:55.380 --> 00:34:57.420
Maybe it's a little bit steeper learning curve,


00:34:57.420 --> 00:34:59.040
but you'll get the performance, and you


00:34:59.040 --> 00:35:02.900
don't have to sacrifice that memory safety to get it.


00:35:02.900 --> 00:35:04.300
>>Victor: Yeah, fantastic.


00:35:04.300 --> 00:35:07.740
Brian, you do more C stuff than I do these days.


00:35:07.740 --> 00:35:09.500
What do you think?


00:35:09.500 --> 00:35:11.460
>> There's some bottleneck stuff,


00:35:11.460 --> 00:35:14.580
the things that I use Python for that we do have


00:35:14.580 --> 00:35:18.100
like large amounts of data passing back and forth.


00:35:18.100 --> 00:35:22.300
And I don't, I mean, normally Python isn't the bottleneck,


00:35:22.300 --> 00:35:23.640
but sometimes it is.


00:35:23.640 --> 00:35:27.100
And there are cases where I'm,


00:35:27.100 --> 00:35:28.580
I was just Googling some stuff right now


00:35:28.580 --> 00:35:31.340
trying to figure out if I can apply Rust


00:35:31.340 --> 00:35:32.620
to some of these things.


00:35:32.620 --> 00:35:36.540
'Cause I actually, I think that's what Ashley pointed out


00:35:36.540 --> 00:35:40.460
is fascinating is this might be a really great way


00:35:40.460 --> 00:35:43.220
to learn Rust is to try to solve


00:35:43.220 --> 00:35:47.980
one of your bottleneck problems in Python with Rust.


00:35:47.980 --> 00:35:51.920
And I mean, I'm comfortable with C as well,


00:35:51.920 --> 00:35:56.920
but there's, even though I've been using it for decades,


00:35:56.920 --> 00:35:59.460
I'd rather, if I can use something else,


00:35:59.460 --> 00:36:01.180
I'd like to try.


00:36:01.180 --> 00:36:03.380
- Something a little more modern, I totally agree.


00:36:03.380 --> 00:36:04.820
And yeah, you're right that,


00:36:04.820 --> 00:36:08.700
Oh, I need to implement these three functions in Rust


00:36:08.700 --> 00:36:09.900
and then plug them into Python.


00:36:09.900 --> 00:36:12.740
That's different than I need to completely learn Rust


00:36:12.740 --> 00:36:15.060
so I can just do this whole project in Rust.


00:36:15.060 --> 00:36:17.100
- Yeah, it's a narrow scope,


00:36:17.100 --> 00:36:20.020
kind of a cool way to try to learn something.


00:36:20.020 --> 00:36:24.140
- Yeah, and these projects have a ton of great examples.


00:36:24.140 --> 00:36:26.780
A few of them have user guides and stuff like that.


00:36:26.780 --> 00:36:29.520
So plenty of material there to get you started.


00:36:29.520 --> 00:36:32.140
- Nice. - Cool.


00:36:32.140 --> 00:36:33.600
- Cool, yeah, very good one.


00:36:33.600 --> 00:36:35.360
Thanks, Ashley.


00:36:35.360 --> 00:36:37.200
All right.


00:36:37.200 --> 00:36:40.160
Have you ever heard that regular expressions are easy?


00:36:40.160 --> 00:36:42.400
Yeah.


00:36:42.400 --> 00:36:43.320
Yeah.


00:36:43.320 --> 00:36:44.560
Not me.


00:36:44.560 --> 00:36:46.200
But here, Brian, let me type something.


00:36:46.200 --> 00:36:47.160
I'm going to type this.


00:36:47.160 --> 00:36:50.160
I'm going to say, OK, I want a--


00:36:50.160 --> 00:36:51.720
let's say a dot plus.


00:36:51.720 --> 00:36:55.320
And then I want to write the word fun.


00:36:55.320 --> 00:36:57.000
I'm going to write--


00:36:57.000 --> 00:37:01.160
is it backslash d plus?


00:37:01.160 --> 00:37:03.400
I don't even know if that's a proper regular expression.


00:37:03.400 --> 00:37:05.060
But what does it do?


00:37:05.060 --> 00:37:09.440
So I wanna introduce you to this site called AutoRegX.


00:37:09.440 --> 00:37:12.480
And this comes to us from Jason Washburn.


00:37:12.480 --> 00:37:14.720
Thank you, Jason, for sending this over.


00:37:14.720 --> 00:37:18.580
And the idea is I can put a RegX in here and hit go.


00:37:18.580 --> 00:37:20.720
Can wait.


00:37:20.720 --> 00:37:21.940
Oh no, hold on.


00:37:21.940 --> 00:37:23.860
Just do this one.


00:37:23.860 --> 00:37:27.320
Do a simple one for a second.


00:37:27.320 --> 00:37:30.860
What am I missing here?


00:37:30.860 --> 00:37:32.360
- I think you have the, it's backwards.


00:37:32.360 --> 00:37:33.940
- You're going English. - Oh, it's backwards.


00:37:33.940 --> 00:37:34.780
Yeah, yeah, yeah.


00:37:34.780 --> 00:37:35.800
So why was it doing that?


00:37:35.800 --> 00:37:39.240
That was, yeah, so first of all, yeah, okay.


00:37:39.240 --> 00:37:40.160
So let's start with that direction.


00:37:40.160 --> 00:37:41.420
That's the default direction it pulls up.


00:37:41.420 --> 00:37:43.120
So what I can do is say,


00:37:43.120 --> 00:37:47.800
I want a regex that starts with fun,


00:37:47.800 --> 00:37:51.960
then any number, right, that, okay.


00:37:51.960 --> 00:37:57.400
And so then it says, oh, you know what?


00:37:57.400 --> 00:38:02.400
And what you want is caret fun.star regex.


00:38:02.400 --> 00:38:06.840
- Is that right?


00:38:06.840 --> 00:38:07.680
- It's not quite right.


00:38:07.680 --> 00:38:09.640
(laughing)


00:38:09.640 --> 00:38:12.720
- Well, this is start, starts with.


00:38:12.720 --> 00:38:15.160
- But dot star I think is any character, right?


00:38:15.160 --> 00:38:15.980
- Yeah.


00:38:15.980 --> 00:38:20.880
- Oh, then how about, yeah, it's not perfect.


00:38:20.880 --> 00:38:22.240
Then let's say numbers.


00:38:22.240 --> 00:38:25.560
There you go.


00:38:25.560 --> 00:38:27.040
- Oh, there you go.


00:38:27.040 --> 00:38:30.040
- Yeah, it's not perfect at understanding English,


00:38:30.040 --> 00:38:31.900
but I wrote an English sentence to it


00:38:31.900 --> 00:38:34.000
and it came up with a regular expression.


00:38:34.000 --> 00:38:36.920
It says disclaimer, all outputs are generated


00:38:36.920 --> 00:38:39.560
by OpenAI's GTP3.


00:38:39.560 --> 00:38:41.680
Sometimes it makes sense, sometimes it doesn't.


00:38:41.680 --> 00:38:43.940
- Well, let's copy that.


00:38:43.940 --> 00:38:46.000
Yeah, let's do the reverse.


00:38:46.000 --> 00:38:46.840
- All right, I'm gonna make,


00:38:46.840 --> 00:38:48.600
I'll try to go back to my other one.


00:38:48.600 --> 00:38:52.920
I'm gonna say caret, then dot plus,


00:38:52.920 --> 00:38:57.480
And then fun and backslash, is it D?


00:38:57.480 --> 00:38:59.320
Yeah, let's try that.


00:38:59.320 --> 00:39:00.720
And do it in reverse.


00:39:00.720 --> 00:39:02.940
And so, then I'll run it again.


00:39:02.940 --> 00:39:07.000
And you wait for a second.


00:39:07.000 --> 00:39:09.640
Since the regular expression means the string must start


00:39:09.640 --> 00:39:12.400
with any character, then there must be one or more characters


00:39:12.400 --> 00:39:15.840
before the substring fun, and then there may be any number


00:39:15.840 --> 00:39:17.940
of digits after the substring fun.


00:39:17.940 --> 00:39:21.280
What do you think about that?


00:39:21.280 --> 00:39:22.100
It's not quite right.


00:39:22.100 --> 00:39:25.900
that only matches one number at the end?


00:39:25.900 --> 00:39:27.260
Yeah, yeah, but still.


00:39:27.260 --> 00:39:29.100
- The trick for me too is that regular expressions


00:39:29.100 --> 00:39:31.500
are like different depending on your platform.


00:39:31.500 --> 00:39:33.100
That's what always tricks me up.


00:39:33.100 --> 00:39:34.620
I'm like, which one is this?


00:39:34.620 --> 00:39:36.340
- So this is a really cool tool


00:39:36.340 --> 00:39:39.140
to almost understand regular expressions.


00:39:39.140 --> 00:39:40.820
(laughing)


00:39:40.820 --> 00:39:42.920
- Yeah, so here's how I would perceive this.


00:39:42.920 --> 00:39:43.820
I would say,


00:39:43.820 --> 00:39:47.660
I wouldn't use this


00:39:47.660 --> 00:39:49.840
and just go writing all my regular expressions.


00:39:49.840 --> 00:39:50.680
But if I'm like,


00:39:50.680 --> 00:39:54.520
really don't know how to get a regular expression to do that.


00:39:54.520 --> 00:39:55.360
- Yeah.


00:39:55.360 --> 00:39:56.600
- You could go write the English sentence


00:39:56.600 --> 00:39:59.600
and it might come up with either the right answer


00:39:59.600 --> 00:40:02.120
or something close enough that it's like,


00:40:02.120 --> 00:40:05.120
you know, okay, I see where it's going now.


00:40:05.120 --> 00:40:06.920
It's not quite matching, but let me,


00:40:06.920 --> 00:40:09.840
I would call this more of a guide


00:40:09.840 --> 00:40:14.840
or like a signpost along the way, not the tool to build it.


00:40:14.840 --> 00:40:17.480
- I could see it being super useful with like,


00:40:17.480 --> 00:40:20.000
I think there's a site Regex or something like that


00:40:20.000 --> 00:40:22.060
where you can basically write a bunch of test cases


00:40:22.060 --> 00:40:26.920
and then your regex and have it run against them all


00:40:26.920 --> 00:40:28.540
in your browser and see it right there.


00:40:28.540 --> 00:40:31.400
And that's like, when I have to write regular expressions,


00:40:31.400 --> 00:40:33.060
that's how I do it.


00:40:33.060 --> 00:40:36.200
Like write a bunch of tests in here and get it to work.


00:40:36.200 --> 00:40:38.200
I maybe should be writing the tests in my own code


00:40:38.200 --> 00:40:42.180
and actually putting them in as tests, but I do it in this.


00:40:42.180 --> 00:40:44.380
But yeah, if you kind of integrate those two tools together,


00:40:44.380 --> 00:40:46.360
I could see this being useful.


00:40:46.360 --> 00:40:47.820
- Okay, yeah, for sure.


00:40:47.820 --> 00:40:49.820
We take the example one over here


00:40:49.820 --> 00:40:53.560
And we could put it into this there, see what it says.


00:40:53.560 --> 00:40:56.600
So the regex is create a group that is a word


00:40:56.600 --> 00:40:59.840
and then you got a piece, at least some white space there.


00:40:59.840 --> 00:41:00.960
What do we get if we run that?


00:41:00.960 --> 00:41:02.920
The regular expression matches any word


00:41:02.920 --> 00:41:04.780
that begins with an uppercase letter.


00:41:04.780 --> 00:41:08.280
That's pretty cool.


00:41:08.280 --> 00:41:09.920
It does.


00:41:09.920 --> 00:41:11.140
Yeah.


00:41:11.140 --> 00:41:13.440
Anyway, fun.


00:41:13.440 --> 00:41:14.760
People can check it out.


00:41:14.760 --> 00:41:15.880
More regex fun.


00:41:15.880 --> 00:41:17.960
Thanks Jason for sending that in.


00:41:17.960 --> 00:41:19.560
And then Ashley, you also pointed out


00:41:19.560 --> 00:41:22.760
that Simon Wilson wrote an article on this.


00:41:22.760 --> 00:41:23.720
I don't know anything about this,


00:41:23.720 --> 00:41:25.360
I just saw this in the news.


00:41:25.360 --> 00:41:27.720
- Yeah, he was actually, so it's sort of related


00:41:27.720 --> 00:41:30.280
because it's GPT-3 and code, and I mean,


00:41:30.280 --> 00:41:32.680
even this first one has some regular expression stuff in it,


00:41:32.680 --> 00:41:34.720
but I guess there's a mode with GPT-3,


00:41:34.720 --> 00:41:35.800
I haven't really played with this,


00:41:35.800 --> 00:41:37.120
but you can like paste in code


00:41:37.120 --> 00:41:40.000
and then start asking it questions about it,


00:41:40.000 --> 00:41:41.880
like in a sort of conversational manner.


00:41:41.880 --> 00:41:44.960
And his blog post I thought was really cool.


00:41:44.960 --> 00:41:46.720
The one thing I did see pointed out


00:41:46.720 --> 00:41:48.000
was similar to what we were just talking about


00:41:48.000 --> 00:41:51.160
is apparently the AI model, like the chatbot,


00:41:51.160 --> 00:41:54.420
can be very scarily confident in its answers,


00:41:54.420 --> 00:41:56.680
and sometimes it's very confidently wrong.


00:41:56.680 --> 00:41:59.520
So you have to not be lulled


00:41:59.520 --> 00:42:01.480
into the false sense of security there.


00:42:01.480 --> 00:42:03.920
- Yeah, for sure, cool.


00:42:03.920 --> 00:42:06.400
You definitely do have to take it with a grain of salt.


00:42:06.400 --> 00:42:09.200
All right, Brian, close us out here.


00:42:09.200 --> 00:42:14.200
- Okay, so Philippe sent us this next topic,


00:42:16.420 --> 00:42:19.280
and he's working for Python Anywhere.


00:42:19.280 --> 00:42:22.740
So anyways, one of the insiders.


00:42:22.740 --> 00:42:25.640
Anaconda acquires Python Anywhere


00:42:25.640 --> 00:42:29.360
to expand the Python team collaboration in the cloud.


00:42:29.360 --> 00:42:34.360
So not expand the team, expand Python team collaboration.


00:42:34.360 --> 00:42:37.860
So this is an interesting,


00:42:37.860 --> 00:42:41.300
we're linking to an article from Anaconda,


00:42:41.300 --> 00:42:43.320
press release just saying,


00:42:43.320 --> 00:42:47.920
- Yeah, we bought Python Anywhere or acquired them.


00:42:47.920 --> 00:42:50.600
So it's interesting.


00:42:50.600 --> 00:42:53.540
I think I'm gonna jump to another thing


00:42:53.540 --> 00:42:56.360
before I guess give my feedback.


00:42:56.360 --> 00:43:00.300
One of the things here, it says from the announcement,


00:43:00.300 --> 00:43:02.080
the acquisition comes on the heels


00:43:02.080 --> 00:43:03.920
of Anaconda's release of PyScript,


00:43:03.920 --> 00:43:06.580
an open source framework for running Python applications


00:43:06.580 --> 00:43:08.260
with HTML, we've covered that.


00:43:08.260 --> 00:43:11.000
But the Python Anywhere acquisition


00:43:11.000 --> 00:43:13.020
and the development of PyScript are central


00:43:13.020 --> 00:43:17.560
to Anaconda's focus on democratizing Python


00:43:17.560 --> 00:43:19.300
and data science.


00:43:19.300 --> 00:43:23.980
So I'm gonna be optimistic and not pessimistic on this.


00:43:23.980 --> 00:43:26.200
I think, hopefully it's a good thing.


00:43:26.200 --> 00:43:29.600
And then on the Python Anywhere site blog,


00:43:29.600 --> 00:43:33.640
there's a FAQ about the acquisition


00:43:33.640 --> 00:43:36.560
and it kind of goes through like,


00:43:36.560 --> 00:43:38.560
from the customer standpoint,


00:43:38.560 --> 00:43:40.960
you know, will this affect my account,


00:43:41.880 --> 00:43:44.940
basically they're going to keep everything the same,


00:43:44.940 --> 00:43:45.940
at least for now.


00:43:45.940 --> 00:43:50.460
And, but hopefully it will expand its services and stuff


00:43:50.460 --> 00:43:52.060
and make things better.


00:43:52.060 --> 00:43:54.020
My personal take on it,


00:43:54.020 --> 00:43:58.180
so is that I'm hoping Python Anywhere is a cool idea,


00:43:58.180 --> 00:44:00.060
but I haven't seen much from them lately.


00:44:00.060 --> 00:44:03.420
So I'm hoping this will breathe some life


00:44:03.420 --> 00:44:05.020
into Python Anywhere.


00:44:05.020 --> 00:44:05.840
- Yeah.


00:44:05.840 --> 00:44:06.680
- Not saying it's dead,


00:44:06.680 --> 00:44:08.660
but I just, it'd be cool to see it grow.


00:44:08.660 --> 00:44:10.980
So.


00:44:10.980 --> 00:44:15.460
Fun fact, Talk Python itself started out on Python Anywhere


00:44:15.460 --> 00:44:18.740
for a month or so, because I'm like, I want to get this up.


00:44:18.740 --> 00:44:21.420
And it's kind of complicated to figure out all the Linux


00:44:21.420 --> 00:44:23.020
and it's next stuff.


00:44:23.020 --> 00:44:25.320
And it seems real easy to just fire it up over here.


00:44:25.320 --> 00:44:29.100
And it worked great for a while, but eventually moved off


00:44:29.100 --> 00:44:32.020
as like, you know, started doing 15 terabytes


00:44:32.020 --> 00:44:33.020
of traffic a month.


00:44:38.420 --> 00:44:41.060
- Yeah, so anyway, I'd love to see that coming along.


00:44:41.060 --> 00:44:42.100
That seems great.


00:44:42.100 --> 00:44:44.160
Let me share also one more other thing.


00:44:44.160 --> 00:44:46.340
So on the screen, I have python.org


00:44:46.340 --> 00:44:48.300
and it shows you a code sample.


00:44:48.300 --> 00:44:52.500
Has anyone clicked this little thing up here on the right?


00:44:52.500 --> 00:44:54.920
This little shell looking thing?


00:44:54.920 --> 00:44:58.980
- Yeah, I have before, but I don't remember what it does.


00:44:58.980 --> 00:44:59.800
- Watch.


00:44:59.800 --> 00:45:03.420
- Oh, nice.


00:45:03.420 --> 00:45:05.540
- So it opens up a Python REPL.


00:45:05.540 --> 00:45:08.120
that Python REPL is running on Python Anywhere.


00:45:08.120 --> 00:45:11.340
- Yeah, and one of the cool things about Python Anywhere


00:45:11.340 --> 00:45:14.580
is this ability, this ability to just like run it


00:45:14.580 --> 00:45:15.460
from any device.


00:45:15.460 --> 00:45:20.020
So you can run this from a tablet or a Chromebook


00:45:20.020 --> 00:45:21.740
or something without installing anything.


00:45:21.740 --> 00:45:24.100
And that's neat.


00:45:24.100 --> 00:45:26.260
I'd like to see that expand.


00:45:26.260 --> 00:45:27.620
It's a cool idea.


00:45:27.620 --> 00:45:28.440
- Yeah, it sure is.


00:45:28.440 --> 00:45:30.460
And I can see how this pairs with PyScript.


00:45:30.460 --> 00:45:33.620
So this is in my browser, I can just run Python


00:45:33.620 --> 00:45:37.060
and get a view into a REPL,


00:45:37.060 --> 00:45:39.000
but with PyScript, I maybe just move the execution


00:45:39.000 --> 00:45:40.500
to the front end as well.


00:45:40.500 --> 00:45:42.920
So they're kind of related in that regard.


00:45:42.920 --> 00:45:44.420
- Yeah, there's a few things.


00:45:44.420 --> 00:45:46.500
- Go, Brian.


00:45:46.500 --> 00:45:48.460
- No, there's a few things I'd really love to see


00:45:48.460 --> 00:45:52.660
Python Anywhere change with this is the,


00:45:52.660 --> 00:45:55.860
currently Python Anywhere doesn't support Python 3.10.


00:45:55.860 --> 00:45:59.220
Hopefully we can get that updated.


00:45:59.220 --> 00:46:02.940
And it doesn't, you can run a Whiskey apps,


00:46:02.940 --> 00:46:05.180
but you cannot run ASCII right now.


00:46:05.180 --> 00:46:06.900
So no FastAPI on there.


00:46:06.900 --> 00:46:10.740
So that's, hopefully that will be fixed.


00:46:10.740 --> 00:46:13.260
But, and then also the free plan doesn't allow you


00:46:13.260 --> 00:46:16.460
to do Jupyter notebooks.


00:46:16.460 --> 00:46:18.980
And with, I'm guessing with Anaconda in there


00:46:18.980 --> 00:46:19.820
that might be changing.


00:46:19.820 --> 00:46:21.140
- It probably will.


00:46:21.140 --> 00:46:22.600
Yeah, I suspect it would.


00:46:22.600 --> 00:46:25.220
All right, how about extras?


00:46:25.220 --> 00:46:27.820
Got just a couple of minutes left for those.


00:46:27.820 --> 00:46:31.100
- I've got nothing, Ashley.


00:46:31.100 --> 00:46:32.540
- Nothing?


00:46:32.540 --> 00:46:35.620
I had a couple in here, not a whole lot to say about them,


00:46:35.620 --> 00:46:38.020
but that's I guess why they're extras.


00:46:38.020 --> 00:46:42.780
PEP 691, there's a new JSON based simple API for PyPI.


00:46:42.780 --> 00:46:44.420
So more PyPI news there.


00:46:44.420 --> 00:46:47.340
This is like for tools like pip, I guess,


00:46:47.340 --> 00:46:50.220
that are sort of, you know, indexing packages


00:46:50.220 --> 00:46:52.020
and stuff like that, or going on a search for packages.


00:46:52.020 --> 00:46:54.500
Like we'll now be able to parse JSON instead of,


00:46:54.500 --> 00:46:56.300
I guess up until now they've been parsing HTML,


00:46:56.300 --> 00:46:58.060
which is a surprise to me.


00:46:58.060 --> 00:47:00.340
- You can go to somewhere.


00:47:00.340 --> 00:47:04.980
Yeah, you go somewhere on pypi.org/something-simple,


00:47:04.980 --> 00:47:06.780
and you just get a wall of links,


00:47:06.780 --> 00:47:11.020
and you get like 350,000 links, which is not an ideal way to,


00:47:11.020 --> 00:47:13.420
like it doesn't seem like the best stage for that.


00:47:13.420 --> 00:47:14.940
- It's cool, 'cause I guess it can be like,


00:47:14.940 --> 00:47:16.940
it can serve those as static files, right?


00:47:16.940 --> 00:47:19.460
So that's why, like instead of having, you know,


00:47:19.460 --> 00:47:21.380
a dynamic web app that you have to worry about loading


00:47:21.380 --> 00:47:23.180
all this stuff, it's just like an Nginx server


00:47:23.180 --> 00:47:25.220
pointed at a huge directory.


00:47:25.220 --> 00:47:27.180
But this allows those same servers, I guess,


00:47:27.180 --> 00:47:30.020
to serve JSON instead of HTML, which is neat.


00:47:30.020 --> 00:47:31.580
- Yeah, great.


00:47:31.580 --> 00:47:36.020
- And then rich codecs is a tool


00:47:36.020 --> 00:47:39.180
for like automatically creating these terminal screenshots


00:47:39.180 --> 00:47:41.740
from stuff in your documentation.


00:47:41.740 --> 00:47:44.380
Mostly I thought we can't have a Python Bytes episode


00:47:44.380 --> 00:47:46.500
without something related to rich, right?


00:47:46.500 --> 00:47:48.020
So.


00:47:48.020 --> 00:47:48.860
- That's right, that's right.


00:47:48.860 --> 00:47:50.060
- Check this out if you've got,


00:47:50.060 --> 00:47:54.300
if you're using rich and wanna, you know,


00:47:54.300 --> 00:47:57.460
make some screenshots that stay up to date with your code.


00:47:57.460 --> 00:48:02.460
- Yeah, some color coded code blocks in your markdown.


00:48:02.460 --> 00:48:03.700
Yeah, for sure.


00:48:03.700 --> 00:48:04.520
Very nice.


00:48:04.520 --> 00:48:05.360
- Yeah.


00:48:05.360 --> 00:48:06.200
- All right.


00:48:06.200 --> 00:48:07.660
I just have a quick one for an extra here.


00:48:07.660 --> 00:48:13.660
There's an article on DevJobs scanner,


00:48:13.660 --> 00:48:16.580
the top eight most in demand programming languages.


00:48:16.580 --> 00:48:19.140
So we've got JavaScript, TypeScript is number one,


00:48:19.140 --> 00:48:20.940
but Python number two.


00:48:20.940 --> 00:48:23.060
I bring this up because I was doing a live stream


00:48:23.060 --> 00:48:24.940
on talk Python and somebody came along and said,


00:48:24.940 --> 00:48:27.180
"Hey, should I still be learning Python?


00:48:27.180 --> 00:48:28.760
I heard that it's really hard to get a job,


00:48:28.760 --> 00:48:30.960
and there's not a lot of interest in that.


00:48:30.960 --> 00:48:33.620
So yeah, well, anyway.


00:48:33.620 --> 00:48:34.800
I'm not sure what else you choose.


00:48:34.800 --> 00:48:37.580
And again, this JavaScript stuff,


00:48:37.580 --> 00:48:41.780
it's like being a full stack CSS developer.


00:48:41.780 --> 00:48:47.980
You might have to have JavaScript skills


00:48:47.980 --> 00:48:50.680
to do Python stuff, or to do ASP.NET,


00:48:50.680 --> 00:48:53.020
or to do whatever else, right?


00:48:53.020 --> 00:48:55.560
JavaScript is unique in the sense that a lot of times


00:48:55.560 --> 00:48:57.960
it's paired with other things,


00:48:57.960 --> 00:49:00.080
whereas those other things are often more standalone.


00:49:00.080 --> 00:49:00.920
You know what I mean?


00:49:00.920 --> 00:49:04.060
So maybe the fact that JavaScript is up there,


00:49:04.060 --> 00:49:05.700
'cause like every other language below it


00:49:05.700 --> 00:49:06.760
also needs JavaScript,


00:49:06.760 --> 00:49:09.800
plus I'm not exactly sure what the metric is here,


00:49:09.800 --> 00:49:12.560
if this is like how you pull that out.


00:49:12.560 --> 00:49:15.080
But anyway, take it with a bit of grain of salt,


00:49:15.080 --> 00:49:17.200
but I think this is pretty good.


00:49:17.200 --> 00:49:21.640
All right, are you all ready for a joke?


00:49:21.640 --> 00:49:24.200
'Cause Brian, you have started something.


00:49:24.200 --> 00:49:25.400
- I have, okay.


00:49:25.400 --> 00:49:28.900
You have, so remember we had the,


00:49:28.900 --> 00:49:30.500
I don't remember what the exact topic was,


00:49:30.500 --> 00:49:31.760
but we talked about,


00:49:31.760 --> 00:49:35.500
we talked about this,


00:49:35.500 --> 00:49:37.980
oh, this was, what is the junior dev,


00:49:37.980 --> 00:49:41.420
see themselves in five years and we're senior dev.


00:49:41.420 --> 00:49:44.940
So this woman, Netta,


00:49:44.940 --> 00:49:48.740
she has just an amazing set of jokes.


00:49:48.740 --> 00:49:51.980
And so you're gonna be hearing more than one of these,


00:49:51.980 --> 00:49:54.020
but let's look at this one.


00:49:54.020 --> 00:49:55.060
They're so good.


00:49:55.060 --> 00:49:55.900
They're so good.


00:49:55.900 --> 00:49:57.460
I'm obviously linking to the show notes.


00:49:57.460 --> 00:50:01.420
So here's an example of people.


00:50:01.420 --> 00:50:04.700
I think what the story is here is these two women,


00:50:04.700 --> 00:50:07.200
they live in this apartment complex.


00:50:07.200 --> 00:50:14.540
And they're in an elevator with some of their neighbors.


00:50:14.540 --> 00:50:16.680
And there's this older woman says,


00:50:16.680 --> 00:50:19.660
"So what do you girls do for a living?"


00:50:19.660 --> 00:50:21.660
One of the women says, "I'm an architect."


00:50:21.660 --> 00:50:23.820
Oh, and Netta, she's a programmer.


00:50:23.820 --> 00:50:26.420
you just see the crap emoji like, oh no.


00:50:26.420 --> 00:50:31.880
Later on, Netta receives a knock at the door and this old woman is like,


00:50:31.880 --> 00:50:33.320
there's a problem with my phone.


00:50:33.320 --> 00:50:36.260
And then there's like another another guy with a beard that shows up


00:50:36.260 --> 00:50:37.820
just showing the laptop to her.


00:50:37.820 --> 00:50:40.520
And then there's like a whole line of people with like.


00:50:40.520 --> 00:50:46.580
Printers and all kinds of stuff, just basically, oh, you're our tech support now.


00:50:46.580 --> 00:50:50.120
I, I so have lived this.


00:50:50.120 --> 00:50:51.120
Yeah.


00:50:51.120 --> 00:50:53.280
Yeah, I have to actually.


00:50:53.280 --> 00:50:53.940
Oh, go ahead.


00:50:53.940 --> 00:50:55.620
Sorry.


00:50:55.620 --> 00:50:58.800
Yeah, no, actually, do you get this?


00:50:58.800 --> 00:51:00.860
Not so much anymore, I guess.


00:51:00.860 --> 00:51:04.380
But this was definitely my experience in the dorms,


00:51:04.380 --> 00:51:06.660
I remember.


00:51:06.660 --> 00:51:09.500
Well, I mean, now you could say I work on MRI machines


00:51:09.500 --> 00:51:10.580
and nobody will ask you.


00:51:10.580 --> 00:51:12.900
They don't want you to fix their-- they don't have one.


00:51:12.900 --> 00:51:15.340
No, they'll start telling you their medical problems


00:51:15.340 --> 00:51:17.060
and stuff like that.


00:51:17.060 --> 00:51:20.580
So my first job out of college was with HP.


00:51:20.580 --> 00:51:24.460
I was working with satellite test systems,


00:51:24.460 --> 00:51:28.780
but everybody just heard HP and wanted me to figure out


00:51:28.780 --> 00:51:31.680
how to configure their computer or their printer.


00:51:31.680 --> 00:51:33.280
Can you get my printer on my network?


00:51:33.280 --> 00:51:35.300
- Brian, and it's really gotten slow lately.


00:51:35.300 --> 00:51:36.520
I get a lot of pop-ups.


00:51:36.520 --> 00:51:40.880
- Like, no, I don't know how to fix that.


00:51:40.880 --> 00:51:45.820
- On purpose, I don't know how to fix that.


00:51:45.820 --> 00:51:48.740
Awesome.


00:51:48.740 --> 00:51:50.900
- Wow, that's all I got, Brian.


00:51:50.900 --> 00:51:53.060
- Okay, well, thanks for the joke.


00:51:53.060 --> 00:51:54.300
I love that one.


00:51:54.300 --> 00:51:56.020
We could have more of these, yeah.


00:51:56.020 --> 00:51:58.580
And thanks, Ashley, for joining us.


00:51:58.580 --> 00:52:01.260
And I really appreciate you talking about


00:52:01.260 --> 00:52:05.580
the Rust Python stuff.


00:52:05.580 --> 00:52:08.700
We've been curious about that, so.


00:52:08.700 --> 00:52:10.180
- Cool, yeah, really happy to be here.


00:52:10.180 --> 00:52:12.220
Thanks for having me on.


00:52:12.220 --> 00:52:14.700
- All right, well, bye, everybody.


00:52:14.700 --> 00:52:15.540
- Bye.


00:52:15.540 --> 00:52:16.380
- Cool.

