WEBVTT

00:00:00.000 --> 00:00:05.000
Hey, everyone out there.


00:00:05.000 --> 00:00:06.000
Hey, Brian.


00:00:06.000 --> 00:00:07.000
Hey, Paul.


00:00:07.000 --> 00:00:08.000
Hey.


00:00:08.000 --> 00:00:09.000
Hey, Michael.


00:00:09.000 --> 00:00:12.000
Welcome to the live stream.


00:00:12.000 --> 00:00:15.000
So, yeah, let's kick this off.


00:00:15.000 --> 00:00:22.640
Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:22.640 --> 00:00:23.840
to your earbuds.


00:00:23.840 --> 00:00:28.840
This is episode 248 recorded September 1st, 2021.


00:00:28.840 --> 00:00:31.400
Gasp, is summer over.


00:00:31.400 --> 00:00:33.080
I'm Michael Kennedy.


00:00:33.080 --> 00:00:34.280
- I'm Brian Okken.


00:00:34.280 --> 00:00:35.640
- I'm Paul Everett.


00:00:35.640 --> 00:00:37.800
- Yay, Paul Everett's here.


00:00:37.800 --> 00:00:39.000
- Yay.


00:00:39.000 --> 00:00:40.400
- Welcome Paul.


00:00:40.400 --> 00:00:41.240
- Joy to be here.


00:00:41.240 --> 00:00:43.680
Long time listener, first time caller.


00:00:43.680 --> 00:00:46.240
- Yeah, I think you made a appearance in the previous show


00:00:46.240 --> 00:00:47.880
in the live chat, but now you're-


00:00:47.880 --> 00:00:49.600
- Oh yes, the live, yeah, true.


00:00:49.600 --> 00:00:50.800
- Or possibly I talked Python,


00:00:50.800 --> 00:00:52.080
I can't remember, it all blurs together.


00:00:52.080 --> 00:00:54.000
- I wasn't as prepared as this one.


00:00:54.000 --> 00:00:56.480
- No, now you're on the big stage.


00:00:56.480 --> 00:00:58.360
So thank you for being here.


00:00:58.360 --> 00:01:00.580
You know, tell people about the things


00:01:00.580 --> 00:01:01.920
that you've been up to or what you're doing


00:01:01.920 --> 00:01:05.640
or who you are before we jump into our first topic.


00:01:05.640 --> 00:01:09.240
- I'm developer advocate at JetBrains for Python and web,


00:01:09.240 --> 00:01:11.240
which means PyCharm and WebStorm.


00:01:11.240 --> 00:01:14.640
What a great gig, love my job.


00:01:14.640 --> 00:01:16.560
I always joke that they should be,


00:01:16.560 --> 00:01:20.000
I should be paying them, but don't tell them I said that.


00:01:20.000 --> 00:01:25.000
And I'm just embarrassed that here I am on Python Bytes


00:01:25.000 --> 00:01:27.480
and I didn't get a haircut in time.


00:01:27.480 --> 00:01:30.000
I know this is a podcast, but there's a video version.


00:01:30.000 --> 00:01:32.760
And looking at Brian rocking the do,


00:01:32.760 --> 00:01:35.380
I feel like I should have been better prepared.


00:01:35.380 --> 00:01:40.380
- Yeah, Brian and I have alternate philosophies, I guess.


00:01:40.380 --> 00:01:42.560
I've got like the knight's neat hair


00:01:42.560 --> 00:01:44.000
and Brian's just embracing it.


00:01:44.000 --> 00:01:45.440
And yeah, I would do that too,


00:01:45.440 --> 00:01:48.440
except for mine just looks like a giant poofy thing


00:01:48.440 --> 00:01:49.800
on top of my head, it doesn't look cool.


00:01:49.800 --> 00:01:51.720
So yeah, not so much.


00:01:51.720 --> 00:01:53.140
- Oh, I wanna see that.


00:01:53.140 --> 00:01:54.920
- Yeah, it's amazingly bad.


00:01:54.920 --> 00:01:56.320
Yeah, I've tried it.


00:01:56.320 --> 00:01:57.160
It's not amazing.


00:01:57.160 --> 00:02:00.480
All right, but you probably have something amazing


00:02:00.480 --> 00:02:02.420
to tell us about, right?


00:02:02.420 --> 00:02:03.960
- Well, I do.


00:02:03.960 --> 00:02:08.000
Actually, so this is an interesting article.


00:02:08.000 --> 00:02:10.360
I wanna talk about both Adders and Pydantic


00:02:10.360 --> 00:02:13.600
because we've talked about both of them on the show


00:02:13.600 --> 00:02:16.440
and they're both great libraries, I think.


00:02:16.440 --> 00:02:19.280
And so there's this article that I came across


00:02:19.280 --> 00:02:23.020
called "Why I Use Adders Instead of Pydantic."


00:02:23.020 --> 00:02:26.800
And there's actually a lot more in here than just that.


00:02:26.800 --> 00:02:29.400
So it was an interesting read.


00:02:29.400 --> 00:02:31.100
Starts out right off the bat,


00:02:31.100 --> 00:02:33.700
talking about basically one of the things


00:02:33.700 --> 00:02:37.600
that a lot of people think about with adders


00:02:37.600 --> 00:02:39.340
is don't we have data classes?


00:02:39.340 --> 00:02:40.640
Do we need adders anymore?


00:02:40.640 --> 00:02:45.100
And the starts out talking about,


00:02:45.100 --> 00:02:48.440
not talking about Pydantic, but talking about data classes.


00:02:48.440 --> 00:02:54.120
And that data classes really came about as a subset of the Adders functionality.


00:02:54.120 --> 00:02:58.620
So it's really pretty easy to go back to using Adders.


00:02:58.620 --> 00:03:01.720
If you're familiar with data classes, it should be easy.


00:03:01.720 --> 00:03:06.520
And actually, there's a lot of reasons to use Adders instead.


00:03:06.520 --> 00:03:11.120
For one, they're just faster, which I didn't know that they were faster.


00:03:11.120 --> 00:03:15.420
But there's some examples about a lot of the boilerplate stuff


00:03:15.420 --> 00:03:19.300
that goes into data classes that we don't really think about.


00:03:19.300 --> 00:03:22.220
But Adders is pretty tight.


00:03:22.220 --> 00:03:26.820
Also, Adders has more features and has some validation code


00:03:26.820 --> 00:03:29.700
that isn't around for data classes.


00:03:29.700 --> 00:03:32.100
So that's interesting.


00:03:32.100 --> 00:03:36.740
So then getting into talking about Pydantic.


00:03:36.740 --> 00:03:41.460
So I think of Adders as kind of like data classes,


00:03:41.460 --> 00:03:42.500
but it does more.


00:03:42.500 --> 00:03:46.660
So Adders, this author summarized,


00:03:46.660 --> 00:03:51.100
Adders is a library for generating the boring parts of writing classes.


00:03:51.100 --> 00:03:55.380
Like hash, the equals, the not equals, that kind of stuff, right?


00:03:55.380 --> 00:03:59.340
Yeah, and also like throwing in some validation if you want.


00:03:59.340 --> 00:04:01.100
So you can opt in.


00:04:01.100 --> 00:04:04.060
So putting in some validation, you can set that up.


00:04:04.060 --> 00:04:07.260
And there's a lot of stuff that Adders does.


00:04:07.260 --> 00:04:08.580
I mean, it's a lot more than that.


00:04:08.580 --> 00:04:11.100
It's a pretty full library also.


00:04:11.100 --> 00:04:14.940
But what you get with Pydantic is you get that


00:04:14.940 --> 00:04:17.440
with the classes that Pydantic provides,


00:04:17.440 --> 00:04:20.240
but you also have the validation library


00:04:20.240 --> 00:04:23.040
and structuring and unstructuring


00:04:23.040 --> 00:04:25.440
and conversion to and from,


00:04:25.440 --> 00:04:28.840
like from a different type, like, say, JSON,


00:04:28.840 --> 00:04:33.740
into a Pydantic class.


00:04:33.740 --> 00:04:38.440
And all these components really are with adders.


00:04:38.440 --> 00:04:39.840
You can do all of that.


00:04:39.840 --> 00:04:46.480
you just you you opt in instead of instead of having to opt out of it and it's kind of a really


00:04:46.480 --> 00:04:52.640
interesting take on that and I I I thought of it as kind of like uh you know I've got a lot of I've


00:04:52.640 --> 00:04:58.720
got a great screwdriver I've got great knives but I don't think of my Swiss army knife as a great


00:04:58.720 --> 00:05:04.080
anything it's just that it has everything I don't think it was that harsh of a comparison but we


00:05:04.080 --> 00:05:07.480
We also think about that with Django and Flask,


00:05:07.480 --> 00:05:10.180
where Flask is kind of build up your own framework,


00:05:10.180 --> 00:05:12.680
and Django has a lot of built-ins already.


00:05:12.680 --> 00:05:15.840
And it isn't even that simple.


00:05:15.840 --> 00:05:20.940
There was an example of some of the validation


00:05:20.940 --> 00:05:26.000
that is built into Pydantic that just seems wrong.


00:05:26.000 --> 00:05:30.900
Like the example was, if you've got a list of a thousand integers,


00:05:30.980 --> 00:05:35.440
Do you really want Pydantic to go and you pass in a list of integers?


00:05:35.440 --> 00:05:38.320
You want to make sure it's passing in a list,


00:05:38.320 --> 00:05:43.820
but do you want it to go through and make sure absolutely all 1,000 elements is an integer?


00:05:43.820 --> 00:05:48.020
You might, in which case you're in luck, because that's what it does.


00:05:48.020 --> 00:05:52.560
But if you don't want it to do that, because that's just too much time,


00:05:52.560 --> 00:05:54.560
you're out of luck.


00:05:54.560 --> 00:05:58.960
Well, you also got to remember the origins of Pydantic


00:05:58.960 --> 00:06:03.360
were about accepting input from arbitrary things on the internet.


00:06:03.360 --> 00:06:04.360
Oh, yeah.


00:06:04.360 --> 00:06:07.860
And when your goal is like, I'm accepting unstructured data


00:06:07.860 --> 00:06:10.460
from random endpoint, on a random endpoint,


00:06:10.460 --> 00:06:13.260
like you need a different level of integrity


00:06:13.260 --> 00:06:15.760
than I loaded this off of a JSON file,


00:06:15.760 --> 00:06:19.260
and I know the app created it, it's not going to be broken.


00:06:19.260 --> 00:06:21.660
Right? It's going to be self-consistent,


00:06:21.660 --> 00:06:25.360
at least in the fact that like the data types are probably still consistent.


00:06:25.360 --> 00:06:29.560
and stuff. So it's probably a when to use which sort of thing as well.


00:06:29.560 --> 00:06:33.560
Right. Yeah. So that's true.


00:06:33.560 --> 00:06:39.560
But in defense of what Brian is saying, the author of this article is the author of CAddrs,


00:06:39.560 --> 00:06:43.560
which is an extension to Addrs, which does what you just described.


00:06:43.560 --> 00:06:47.560
It adds the other parts of Pydantic to do validation and things like that.


00:06:47.560 --> 00:06:51.560
I found this article when I first read it, what was it, last week or so, to be


00:06:51.560 --> 00:06:53.600
be really interesting as well, Brian.


00:06:53.600 --> 00:06:55.440
That part, maybe when you scroll down,


00:06:55.440 --> 00:06:59.320
it'll show the results of the class generation


00:06:59.320 --> 00:07:03.200
and how the Adders generates a lot less magic


00:07:03.200 --> 00:07:05.520
than the Pydantic generates.


00:07:05.520 --> 00:07:06.240
Yeah.


00:07:06.240 --> 00:07:10.080
Yeah, so that's the generated Adders class


00:07:10.080 --> 00:07:13.120
and the generated Pydantic class.


00:07:13.120 --> 00:07:17.560
So it's around validation.


00:07:17.560 --> 00:07:20.840
Yeah, it is interesting.


00:07:20.840 --> 00:07:25.840
The other aspect is making sure that data is validated


00:07:25.840 --> 00:07:28.940
when it's set, not just when it's created.


00:07:28.940 --> 00:07:30.600
And I think I got lost here,


00:07:30.600 --> 00:07:33.120
but correct me if I'm wrong, Paul,


00:07:33.120 --> 00:07:38.000
but I think it's that Pydantic only validates on creation,


00:07:38.000 --> 00:07:40.520
whereas you can set adders to be validating


00:07:40.520 --> 00:07:44.740
on setting values as well, but I could be wrong.


00:07:44.740 --> 00:07:46.440
- I believe you're right.


00:07:46.440 --> 00:07:48.840
I went and looked up a ticket in Pydantic.


00:07:50.240 --> 00:07:54.740
I didn't read the whole thing about it, but these are hard conversations.


00:07:54.740 --> 00:07:57.140
There's no free lunch.


00:07:57.140 --> 00:08:02.440
And this article, I thought, was a fair treatment about the topic.


00:08:02.440 --> 00:08:07.340
Yeah, the conversion bit was a little interesting, like, for instance, date conversion.


00:08:07.340 --> 00:08:12.540
So if you pass in date time to a Pydantic model,


00:08:12.540 --> 00:08:17.040
pedantic already has date time conversions built in, so it'll automatically convert it.


00:08:17.040 --> 00:08:25.440
But if you are using like Pendulum, which is a subclass of DateTime,


00:08:25.440 --> 00:08:27.200
you're going to get a wrong conversion.


00:08:27.200 --> 00:08:28.580
It's just going to do it wrong,


00:08:28.580 --> 00:08:33.240
because it'll assume it's a DateTime and not a Pendulum object.


00:08:33.240 --> 00:08:35.040
So that's interesting.


00:08:35.040 --> 00:08:38.840
Yeah, anyway, definitely something to think about


00:08:38.840 --> 00:08:43.340
of the build your own versus having it all in one.


00:08:44.200 --> 00:08:47.100
But I definitely think there's places for both.


00:08:47.100 --> 00:08:51.700
Like Michael said, especially with the input validation on the web,


00:08:51.700 --> 00:08:53.700
if you know what you're doing,


00:08:53.700 --> 00:08:56.900
definitely, I think, maybe you could roll your own


00:08:56.900 --> 00:08:59.200
or use all these adders and other tools.


00:08:59.200 --> 00:09:02.200
But if you're just sort of playing at it,


00:09:02.200 --> 00:09:05.400
and you're just getting started, then why not try PyTandic?


00:09:05.400 --> 00:09:07.400
It's a great place for that.


00:09:07.400 --> 00:09:13.100
Yeah, the other thing is about the open API specification stuff with PyTandic,


00:09:13.100 --> 00:09:15.620
where if you just use them and you just say I'm using this,


00:09:15.620 --> 00:09:18.260
it'll like automatically generate the documentation,


00:09:18.260 --> 00:09:20.260
which is a big bonus.


00:09:20.260 --> 00:09:21.260
Yeah.


00:09:21.260 --> 00:09:23.980
It's interesting with the release of SQL model,


00:09:23.980 --> 00:09:25.980
it's like you can kind of feel


00:09:25.980 --> 00:09:29.580
like Pydantic is its own little mini


00:09:29.580 --> 00:09:34.700
framework dispatcher thingy with hook points that you can plug into


00:09:34.700 --> 00:09:40.380
and almost treat as its own little API surface


00:09:40.380 --> 00:09:42.020
for gluing things together.


00:09:42.020 --> 00:09:46.340
Yeah, yeah, it's the data exchange bit, pretty interesting.


00:09:46.340 --> 00:09:48.660
Brandon, Brandon out in the live stream says,


00:09:48.660 --> 00:09:50.980
"I think it comes down to using the right tool for the right job,"


00:09:50.980 --> 00:09:54.180
which is, yeah, kind of how you opened it, right, Brian?


00:09:54.180 --> 00:09:54.680
Yeah.


00:09:54.680 --> 00:10:00.740
All right, so we all work with the terminal every now and then, right?


00:10:00.740 --> 00:10:02.740
Every day.


00:10:02.740 --> 00:10:06.420
You might be working with the command prompt if you're on Windows,


00:10:06.420 --> 00:10:09.700
but I strongly encourage you not to do that.


00:10:09.700 --> 00:10:13.100
you should be switching over to the new Microsoft Terminal


00:10:13.100 --> 00:10:15.100
with like, oh, my Posh Shell,


00:10:15.100 --> 00:10:17.900
and then you'll be in the terminal world as well.


00:10:17.900 --> 00:10:21.400
So DunderDan on Twitter,


00:10:21.400 --> 00:10:24.700
send us a recommendation, which I want to cover,


00:10:24.700 --> 00:10:28.300
called McFly, which I love the name.


00:10:28.300 --> 00:10:32.900
So what is it? It is a bit of Rust code


00:10:32.900 --> 00:10:35.900
that extension for your terminal.


00:10:36.900 --> 00:10:41.400
super easy to install, like you can brew install it and other types of install it.


00:10:41.400 --> 00:10:46.200
And basically what it does is it lets you fly through your shell history.


00:10:46.200 --> 00:10:48.200
Okay, so


00:10:48.200 --> 00:10:52.000
depending on the shell you use, you may use this a lot or you may use this a little.


00:10:52.000 --> 00:10:55.400
You can hit Ctrl R in your terminal


00:10:55.400 --> 00:10:58.900
and it brings up a reverse history search.


00:10:58.900 --> 00:11:01.900
So like if you knew you type something to do with git


00:11:01.900 --> 00:11:06.780
It had to do with this repo, you could hit Ctrl R and like type parts of the repo name,


00:11:06.780 --> 00:11:10.940
and that would start to auto complete those commands.


00:11:10.940 --> 00:11:14.220
There's a couple of things that are kind of a bummer about that, though.


00:11:14.220 --> 00:11:19.740
One is, maybe the biggest one is you only see one of those at a time, right?


00:11:19.740 --> 00:11:22.380
So if I go and say, show me my history, I get a line,


00:11:22.380 --> 00:11:26.540
and then that is the closest most recent match to what I type.


00:11:26.540 --> 00:11:29.260
Well, what I often might want is like,


00:11:29.260 --> 00:11:33.900
"Well, it's kind of like a Git clone, but which one was it?"


00:11:33.900 --> 00:11:37.260
And I want to see which ones of those are that like,


00:11:37.260 --> 00:11:38.640
that UI is not fantastic.


00:11:38.640 --> 00:11:42.640
So imagine if you could type, say, Git clone,


00:11:42.640 --> 00:11:44.800
and then hit Control + R,


00:11:44.800 --> 00:11:48.660
and it gave you like a UI in the terminal


00:11:48.660 --> 00:11:51.400
that you could scroll through and pick,


00:11:51.400 --> 00:11:54.240
and then you could see what else to type a little bit more.


00:11:54.240 --> 00:11:55.080
That's McFly.


00:11:55.080 --> 00:11:57.280
So it's pretty awesome in that regard,


00:11:57.280 --> 00:12:01.680
But it also uses a little bit of AI, if you will,


00:12:01.680 --> 00:12:05.080
a little neural network and some context awareness


00:12:05.080 --> 00:12:07.560
to help filter and order that.


00:12:07.560 --> 00:12:09.920
I guess probably sort is probably the biggest thing.


00:12:09.920 --> 00:12:11.960
It'll say, well, what, you know,


00:12:11.960 --> 00:12:13.120
we are searching for this,


00:12:13.120 --> 00:12:15.360
but usually when you're in this folder,


00:12:15.360 --> 00:12:18.160
you're often using this version of that command.


00:12:18.160 --> 00:12:19.240
But if you're in a different folder,


00:12:19.240 --> 00:12:21.520
you're doing a different version of get.


00:12:21.520 --> 00:12:24.000
And so it'll try to filter your history


00:12:24.000 --> 00:12:26.000
based on the context of where you are.


00:12:27.080 --> 00:12:28.080
What do y'all think?


00:12:28.080 --> 00:12:33.640
- I think it looks pretty cool.


00:12:33.640 --> 00:12:37.700
I was luckily, I don't know why anybody would use


00:12:37.700 --> 00:12:39.520
the built-in Windows command prompt.


00:12:39.520 --> 00:12:44.520
So even on Windows, I'm using Bash, but--


00:12:44.520 --> 00:12:47.920
- My PowerShell is pretty sweet in the new terminal.


00:12:47.920 --> 00:12:50.560
Carry on, carry on.


00:12:50.560 --> 00:12:52.040
Sorry, don't mean to derail it.


00:12:52.040 --> 00:12:54.840
- Anyway, searching history with the VI mode


00:12:54.840 --> 00:12:56.360
is pretty easy in Bash.


00:12:56.360 --> 00:12:59.660
But I was glad to see that this isn't just


00:12:59.660 --> 00:13:03.200
for your command prompt or Posh or anything.


00:13:03.200 --> 00:13:08.200
You can use this with Z shell and phish and bash too.


00:13:08.200 --> 00:13:09.400
- Yeah, it works in a lot of them.


00:13:09.400 --> 00:13:12.120
And so I found it to be quite neat.


00:13:12.120 --> 00:13:14.120
So let's see, I'll run through some of the features.


00:13:14.120 --> 00:13:16.800
So you just, it rebinds control R, which is kind of nice.


00:13:16.800 --> 00:13:20.200
But one of the things, it'll store your history


00:13:20.200 --> 00:13:23.140
in a little local SQLite database.


00:13:23.140 --> 00:13:25.560
So it can do more queries and more interesting stuff,


00:13:25.560 --> 00:13:29.000
have richer information on it, but it also


00:13:29.000 --> 00:13:31.480
injects the commands that it sees


00:13:31.480 --> 00:13:33.000
into your regular shell history.


00:13:33.000 --> 00:13:35.360
So if you stop using that, your shell history for, say,


00:13:35.360 --> 00:13:38.280
Z shell is still totally good.


00:13:38.280 --> 00:13:41.200
That's pretty nice.


00:13:41.200 --> 00:13:45.440
I will say that I know you had Brett on recently.


00:13:45.440 --> 00:13:49.040
And so the rustification of Python bytes


00:13:49.040 --> 00:13:50.800
appears to be complete at this point.


00:13:50.800 --> 00:13:52.880
You can't go anywhere without bumping into rust.


00:13:52.880 --> 00:13:53.360
I know.


00:13:53.360 --> 00:13:54.400
You keep bumping into it.


00:13:54.400 --> 00:13:56.400
It is quite interesting here.


00:13:56.400 --> 00:13:59.960
- My other comment is that, I hate to say it,


00:13:59.960 --> 00:14:03.040
but I think the three of us, we've been around so long,


00:14:03.040 --> 00:14:05.180
we were pair programming with Moses.


00:14:05.180 --> 00:14:08.160
And the idea that I really needed


00:14:08.160 --> 00:14:11.800
a small neural network for my shell is...


00:14:11.800 --> 00:14:13.880
(laughing)


00:14:13.880 --> 00:14:15.800
- Yeah, it's interesting, right?


00:14:15.800 --> 00:14:17.600
But I do think, I mean, I do think it adds


00:14:17.600 --> 00:14:22.600
quite a bit of interesting extensions for this stuff.


00:14:23.040 --> 00:14:26.380
Like it's a really cool way to do, you know,


00:14:26.380 --> 00:14:29.420
I use, oh, my Z shell.


00:14:29.420 --> 00:14:31.360
So if I wanted like SSH somewhere,


00:14:31.360 --> 00:14:33.280
I could type SSH and just start hitting up arrow.


00:14:33.280 --> 00:14:35.100
And it's like a beautiful history map.


00:14:35.100 --> 00:14:37.440
Like I never use control R because there's a better one.


00:14:37.440 --> 00:14:38.880
- I got to make that jump.


00:14:38.880 --> 00:14:39.720
- One of these days.


00:14:39.720 --> 00:14:41.160
- Yeah, it's so good.


00:14:41.160 --> 00:14:45.200
But sometimes I don't remember exactly what it is,


00:14:45.200 --> 00:14:47.240
or there's like a lot of them.


00:14:47.240 --> 00:14:48.900
And so with this one,


00:14:48.900 --> 00:14:51.920
it'll give you that dropdown list that fills the whole screen


00:14:51.920 --> 00:14:53.020
so you can jump through them.


00:14:53.020 --> 00:14:55.140
You can also delete, you're like this one I did once,


00:14:55.140 --> 00:14:57.060
but I never want to actually don't even want it in my history


00:14:57.060 --> 00:15:00.300
you can delete it from your history, which is kind of nice.


00:15:00.300 --> 00:15:04.220
And then also let's go through some of the other things.


00:15:04.220 --> 00:15:07.380
So yeah, so for in terms of prioritization,


00:15:07.380 --> 00:15:10.340
you know, that little neural says it takes


00:15:10.340 --> 00:15:13.840
into consideration the directory where you ran the command,


00:15:13.840 --> 00:15:15.980
what you typed before the command.


00:15:15.980 --> 00:15:19.740
So if you did a get branch and then a checkout,


00:15:19.740 --> 00:15:21.100
I don't know, maybe that means something


00:15:21.100 --> 00:15:22.440
I don't know, whatever.


00:15:22.440 --> 00:15:24.440
But like the series of commands that preceded it


00:15:24.440 --> 00:15:27.440
influence what it suggests and how it orders it,


00:15:27.440 --> 00:15:29.640
how often you run it, when you last ran it,


00:15:29.640 --> 00:15:35.140
what you've selected in it as it's dropped down,


00:15:35.140 --> 00:15:38.440
and also its exit status.


00:15:38.440 --> 00:15:40.840
So if you ran a command, but the command failed,


00:15:40.840 --> 00:15:43.740
like it won't auto suggest that command again,


00:15:43.740 --> 00:15:45.740
because that one's the broken one, you know what I mean?


00:15:45.740 --> 00:15:47.340
Things like that. There's a lot of cool stuff.


00:15:47.340 --> 00:15:48.340
Oh, that's cool.


00:15:48.340 --> 00:15:50.040
And then I got one for you, Brian, down here.


00:15:50.040 --> 00:15:54.300
So it's easy to install this, like brew install or


00:15:54.300 --> 00:15:57.800
where's the, there's probably an app to get installed


00:15:57.800 --> 00:15:58.800
or something.


00:15:58.800 --> 00:16:00.080
Anyway, if I go down here,


00:16:00.080 --> 00:16:03.200
there's all sorts of ways to install it.


00:16:03.200 --> 00:16:07.560
But here we are, Vim key bindings, Brian.


00:16:07.560 --> 00:16:09.000
- Yes, okay.


00:16:09.000 --> 00:16:11.200
- So, okay, so you have Vim key bindings,


00:16:11.200 --> 00:16:13.760
which is by default, it uses Emacs.


00:16:13.760 --> 00:16:16.240
It definitely reminded me of like just firing up Emacs,


00:16:16.240 --> 00:16:19.680
but for the shell, which was kind of nice.


00:16:19.680 --> 00:16:22.600
The other thing that I like about it, I haven't turned this on yet,


00:16:22.600 --> 00:16:24.800
is fuzzy searching.


00:16:24.800 --> 00:16:27.100
So sometimes I'll be like, "Ah, there's this command.


00:16:27.100 --> 00:16:28.500
I think it was this."


00:16:28.500 --> 00:16:31.300
But if you get it wrong, then it's like you get zero help, right?


00:16:31.300 --> 00:16:34.940
If you get one character wrong. But this one is, if you get close,


00:16:34.940 --> 00:16:37.540
can you get close and we'll give you some autocomplete on that?


00:16:37.540 --> 00:16:38.640
So that's pretty cool.


00:16:38.640 --> 00:16:39.640
Yeah, that's great.


00:16:39.640 --> 00:16:42.840
Because you might be searching for a file name or something like that.


00:16:42.840 --> 00:16:44.840
Yeah, yeah, exactly.


00:16:44.840 --> 00:16:46.140
Did you see that?


00:16:46.140 --> 00:16:50.940
There was an XKCD I think or some other comic of somebody.


00:16:50.940 --> 00:16:51.780
Now it's a different one,


00:16:51.780 --> 00:16:54.100
but somebody scrolling through their history


00:16:54.100 --> 00:16:57.260
for like an hour to get LS.


00:16:57.260 --> 00:16:58.100
- Yes.


00:16:58.100 --> 00:17:02.860
- Now I'm definitely gonna try this out.


00:17:02.860 --> 00:17:04.660
This is pretty good.


00:17:04.660 --> 00:17:05.660
- Can you scroll?


00:17:05.660 --> 00:17:07.940
Yeah, oh, you're gonna go on the XKCD.


00:17:07.940 --> 00:17:08.780
- Oh, sorry, no, go ahead.


00:17:08.780 --> 00:17:12.720
- Can you scroll up to the commits, number of commits?


00:17:12.720 --> 00:17:14.460
- Yeah, 350.


00:17:14.460 --> 00:17:17.820
This has the look of a project that's been refined, doesn't it?


00:17:17.820 --> 00:17:19.520
Yeah.


00:17:19.520 --> 00:17:20.480
Yeah, it does.


00:17:20.480 --> 00:17:27.580
I don't know quite how long it's been around, but yeah, it looks like the


00:17:27.580 --> 00:17:30.740
oldest super obvious one is 14 months.


00:17:30.740 --> 00:17:31.320
So yeah.


00:17:31.320 --> 00:17:37.460
It's continuous integration was last configured 14 months ago, let's say, but


00:17:37.460 --> 00:17:39.020
yeah, this is no, it's the docs.


00:17:39.020 --> 00:17:40.300
The docs were two years ago.


00:17:40.300 --> 00:17:41.040
Okay.


00:17:41.040 --> 00:17:41.860
The doc.


00:17:41.860 --> 00:17:42.360
There you go.


00:17:42.360 --> 00:17:44.100
I think this is nice.


00:17:44.100 --> 00:17:45.940
I wasn't sure I would have wanted to use it.


00:17:45.940 --> 00:17:46.940
I'm like, oh, this is interesting.


00:17:46.940 --> 00:17:48.520
And people might-- then I installed it.


00:17:48.520 --> 00:17:50.400
I'm like, oh, this is pretty cool.


00:17:50.400 --> 00:17:51.440
I like it.


00:17:51.440 --> 00:17:53.660
You know, all the cool stuff I like in Python,


00:17:53.660 --> 00:17:57.280
like pyenv and pipx and things like that,


00:17:57.280 --> 00:18:00.740
they all have a section about using this with fish.


00:18:00.740 --> 00:18:05.740
And so I'm always taunted with my lack of foo


00:18:05.740 --> 00:18:08.300
when it comes to terminals.


00:18:08.300 --> 00:18:10.380
Yeah.


00:18:10.380 --> 00:18:13.100
Yeah, I made the switch to ZShell.


00:18:13.100 --> 00:18:15.260
Oh, my Z shell, I'm not looking back.


00:18:15.260 --> 00:18:16.540
Love it.


00:18:16.540 --> 00:18:19.020
All right, Patrick, who will be out in the live stream says,


00:18:19.020 --> 00:18:20.380
McFly seems really interesting.


00:18:20.380 --> 00:18:21.940
I'm using Z shell for a month now


00:18:21.940 --> 00:18:24.300
and always thought the control R search lacks features


00:18:24.300 --> 00:18:26.100
compared to other plugins for sure.


00:18:26.100 --> 00:18:27.660
Absolutely.


00:18:27.660 --> 00:18:28.700
And then David,


00:18:28.700 --> 00:18:31.060
Pochon out there says,


00:18:31.060 --> 00:18:32.740
you covered that LS joke in the show.


00:18:32.740 --> 00:18:33.700
Yeah, it's beautiful.


00:18:33.700 --> 00:18:34.540
I love that one.


00:18:34.540 --> 00:18:35.820
It's been a couple of years, I think,


00:18:35.820 --> 00:18:36.940
but it was a good one.


00:18:36.940 --> 00:18:39.460
- Well, we don't have a joke history command, so.


00:18:39.460 --> 00:18:40.500
- Yeah.


00:18:40.500 --> 00:18:41.660
Oh, McLaugh.


00:18:41.660 --> 00:18:43.660
Who's writing McLaugh?


00:18:43.660 --> 00:18:48.500
Something we never cover on the show is textual.


00:18:48.500 --> 00:18:50.840
So why don't you tell us about that, Paul?


00:18:50.840 --> 00:18:51.500
Sure.


00:18:51.500 --> 00:18:54.100
Switching over to me.


00:18:54.100 --> 00:18:56.060
Yep, we got me.


00:18:56.060 --> 00:18:59.600
I think it was episode 241 when you had Brett on


00:18:59.600 --> 00:19:04.540
and Brian led with Will McGoogan talking about Rich.


00:19:04.540 --> 00:19:09.400
And I'll quote Brian because it was funny then and it's funny now.


00:19:10.640 --> 00:19:12.480
How can I not have heard of it?


00:19:12.480 --> 00:19:16.320
I'm a fan of the podcast and Brian loves this tool.


00:19:16.320 --> 00:19:18.160
So I'm gonna go back to the well


00:19:18.160 --> 00:19:21.100
with the thing that was spun out of Rich at that time,


00:19:21.100 --> 00:19:23.520
Textual, which has been covered,


00:19:23.520 --> 00:19:25.600
but I wanna talk about a particular aspect of it


00:19:25.600 --> 00:19:28.080
that was kind of interesting to me as a pattern.


00:19:28.080 --> 00:19:31.080
And then have a little debate where the two of you


00:19:31.080 --> 00:19:36.080
tell me that I'm wrong and really ancient about this.


00:19:36.800 --> 00:19:41.800
So I've traditionally been against the convention


00:19:41.800 --> 00:19:46.260
over configuration camp in the world of Python.


00:19:46.260 --> 00:19:48.140
I come out of kind of the ZOPE tradition,


00:19:48.140 --> 00:19:49.400
the pyramid tradition.


00:19:49.400 --> 00:19:52.600
Pyramid is like, oh yeah, well,


00:19:52.600 --> 00:19:56.640
here's a configurator object and it does 15 trillion things


00:19:56.640 --> 00:19:59.640
that you really ought to care about, but don't.


00:19:59.640 --> 00:20:03.720
Because Chris McDonough has really great design sense,


00:20:03.720 --> 00:20:06.120
kind of Goldilocks, knows exactly what to put in


00:20:06.120 --> 00:20:10.280
and leave out and I just that whole worldview fits into my head.


00:20:10.280 --> 00:20:15.420
And so I have this dislike about magic names, magic file names,


00:20:15.420 --> 00:20:20.320
magic variable names, can't auto complete them, can't refactor, can't navigate.


00:20:20.320 --> 00:20:24.220
If you can't memorize it and keep it all in your head,


00:20:24.220 --> 00:20:27.520
you know, and Python is explicit over implicit, blah, blah, blah.


00:20:27.520 --> 00:20:32.760
I prefer like actual symbols that smart editors can operate on


00:20:32.760 --> 00:20:39.040
and not have like a little bit that's going on with data classes right now,


00:20:39.040 --> 00:20:43.780
each individual tool having to wire up special support for that template language


00:20:43.780 --> 00:20:47.540
or that this, that or the other thing to look for these magic hand waves.


00:20:47.540 --> 00:20:55.380
But Will had this thread, and actually I should bring the thread up.


00:20:55.380 --> 00:20:58.560
Will had this thread on Twitter,


00:20:58.560 --> 00:21:03.560
which made me feel, A, like I was a little bit wrong,


00:21:03.560 --> 00:21:08.340
and B, like he had solved some of the issues


00:21:08.340 --> 00:21:09.560
that I had with it.


00:21:09.560 --> 00:21:13.440
So what he wanted to do was remove some boilerplate.


00:21:13.440 --> 00:21:19.240
And in this, he gave some examples about before and after.


00:21:19.240 --> 00:21:23.240
Here's a screenshot of it.


00:21:23.240 --> 00:21:27.860
So that's before, and you see, like in here,


00:21:27.860 --> 00:21:31.800
watch how much this changes when you go to this.


00:21:31.800 --> 00:21:35.400
So kind of the noise, the ceremony,


00:21:35.400 --> 00:21:38.800
a lot of the stuff was reduced.


00:21:38.800 --> 00:21:41.800
- Okay.


00:21:41.800 --> 00:21:45.960
- Now, anybody can look at this and say, wow, that's great.


00:21:45.960 --> 00:21:49.820
If you're optimizing for writing code,


00:21:49.820 --> 00:21:51.680
if you're optimizing for reading code


00:21:51.680 --> 00:21:54.060
and you wanna walk back up to this later


00:21:54.060 --> 00:21:56.800
and know that there are some special semantics


00:21:56.800 --> 00:22:01.360
that if the name starts with these three things,


00:22:01.360 --> 00:22:05.040
then the next thing is kind of a thing that is et cetera.


00:22:05.040 --> 00:22:09.060
And so I worry about those kinds of things,


00:22:09.060 --> 00:22:10.400
but he had done it in a way


00:22:10.400 --> 00:22:13.120
where my pie would still help you some.


00:22:13.120 --> 00:22:18.560
And one of the innovations he had that I felt like,


00:22:18.560 --> 00:22:22.440
let's see, do you see me on Twitter?


00:22:22.440 --> 00:22:24.520
Nope, you don't, 'cause I'm in the wrong window.


00:22:24.520 --> 00:22:25.440
Sorry about that.


00:22:25.440 --> 00:22:30.520
Okay, my apologies.


00:22:30.520 --> 00:22:33.920
So into this screenshot, you see a before and after.


00:22:33.920 --> 00:22:36.000
Brian, you see that?


00:22:36.000 --> 00:22:37.000
Yeah.


00:22:37.000 --> 00:22:38.000
All right, good.


00:22:38.000 --> 00:22:40.880
Before and after.


00:22:40.880 --> 00:22:47.760
And so he's talking about boilerplate removal in this thread and some of the decisions such


00:22:47.760 --> 00:22:51.280
as like this.


00:22:51.280 --> 00:22:54.440
For any of you that do type annotations, type hints,


00:22:54.440 --> 00:22:57.800
you'll look at this and you will say,


00:22:57.800 --> 00:23:01.480
oh goodness, the type hint went away.


00:23:01.480 --> 00:23:04.120
This is actually a perfect example.


00:23:04.120 --> 00:23:06.560
And you look at this and you think,


00:23:06.560 --> 00:23:08.580
I just lost the typing information


00:23:08.580 --> 00:23:10.320
and I believe in type hinting.


00:23:10.320 --> 00:23:13.000
Well, not really because it can be inferred,


00:23:13.000 --> 00:23:14.760
it can be deduced.


00:23:14.760 --> 00:23:16.000
- Right, so for people listening,


00:23:16.000 --> 00:23:18.840
the example is you've got like a variable colon type equals--


00:23:18.840 --> 00:23:20.760
- Oh yeah, sorry, yes, this is a podcast.


00:23:20.760 --> 00:23:22.800
- Instantiate, yeah, instantiate the type


00:23:22.800 --> 00:23:25.880
versus just drop the type annotation on the variable.


00:23:25.880 --> 00:23:29.600
But when you're allocating up the object right there,


00:23:29.600 --> 00:23:31.840
like all the editors in my pile are like,


00:23:31.840 --> 00:23:34.800
you know what, thing equals new object.


00:23:34.800 --> 00:23:35.640
- That's right.


00:23:35.640 --> 00:23:37.480
- It could be that object.


00:23:37.480 --> 00:23:42.320
- Yeah, and in these like titantic battles about type pinning


00:23:42.320 --> 00:23:44.400
we forget that, well, you don't have to do


00:23:44.400 --> 00:23:45.600
all that typing all the time.


00:23:45.600 --> 00:23:48.360
Python and type checker static analysis


00:23:48.360 --> 00:23:50.420
can figure this kind of stuff out.


00:23:50.420 --> 00:23:52.180
So I looked at that and I was pretty,


00:23:52.180 --> 00:23:54.420
I was probably kind of seduced by that.


00:23:54.420 --> 00:23:57.880
But let me ask the two of you, maybe the audience as well.


00:23:57.880 --> 00:24:00.280
Do you think that three months from now,


00:24:00.280 --> 00:24:03.360
if you walked up to your textual application,


00:24:03.360 --> 00:24:08.940
would you be able to remember that he had done these things


00:24:08.940 --> 00:24:12.820
and that the right-hand side was telling you


00:24:12.820 --> 00:24:14.140
about the left-hand side?


00:24:14.140 --> 00:24:18.500
In order to save a little bit of typing,


00:24:18.500 --> 00:24:21.220
Did I lose a little bit down the road


00:24:21.220 --> 00:24:23.740
and have to load up my future self?


00:24:23.740 --> 00:24:25.140
What do you think about that?


00:24:25.140 --> 00:24:28.260
- Brian?


00:24:28.260 --> 00:24:31.860
Well, I'll tell you what I think.


00:24:31.860 --> 00:24:38.220
Is there a separation of where this happens?


00:24:38.220 --> 00:24:39.980
Like on the example that you're showing here,


00:24:39.980 --> 00:24:43.580
like object or variable equals new object.


00:24:43.580 --> 00:24:45.340
I never need help with that.


00:24:45.340 --> 00:24:48.060
I get super clear what that type is all the time.


00:24:48.060 --> 00:24:53.060
where it becomes not so obvious to me


00:24:53.060 --> 00:24:57.260
is where I've got like a class or something


00:24:57.260 --> 00:25:00.020
and it's got a field and then I'm creating that object


00:25:00.020 --> 00:25:01.420
and passing it in.


00:25:01.420 --> 00:25:03.060
If my PI could still tell me,


00:25:03.060 --> 00:25:04.420
oh, this thing is one of these


00:25:04.420 --> 00:25:06.500
because the only time you ever use it


00:25:06.500 --> 00:25:08.580
is always passing this type.


00:25:08.580 --> 00:25:10.180
But that's a separate file


00:25:10.180 --> 00:25:11.960
and I'm not looking at it side by side.


00:25:11.960 --> 00:25:15.580
Then to me that like starts to add additional work


00:25:15.580 --> 00:25:17.580
for me to keep track of in my mind.


00:25:17.580 --> 00:25:22.620
The other one I would say is the autocomplete test.


00:25:22.620 --> 00:25:25.380
If I'm working with thing, and I say variable dot,


00:25:25.380 --> 00:25:27.380
and it goes, zoom, there's the list of things,


00:25:27.380 --> 00:25:29.380
there's a good chance I don't care about anything else.


00:25:29.380 --> 00:25:31.380
Right, like did it autocomplete the thing,


00:25:31.380 --> 00:25:33.380
and did it tell me if I put the wrong


00:25:33.380 --> 00:25:38.500
property field, whatever on it, because it knows what that list is.


00:25:38.500 --> 00:25:41.900
And if the magic name changes later, will I get a red squiggle?


00:25:41.900 --> 00:25:45.460
Yes, exactly. Will the editor know that it was broken


00:25:45.460 --> 00:25:46.580
and will it help me write it


00:25:46.580 --> 00:25:48.340
so I don't have to look at the docs,


00:25:48.340 --> 00:25:49.780
I don't have to go to the source,


00:25:49.780 --> 00:25:52.420
I just use variable dot and I just keep rocking


00:25:52.420 --> 00:25:55.300
until I really need to understand something.


00:25:55.300 --> 00:25:58.860
I would say that that's where I come down on it.


00:25:58.860 --> 00:26:00.740
The third thing is,


00:26:00.740 --> 00:26:02.860
if this is not relevant here necessarily,


00:26:02.860 --> 00:26:05.420
but if you're doing something like SQLAlchemy


00:26:05.420 --> 00:26:07.900
or Mongo engine or Django ORM,


00:26:07.900 --> 00:26:11.380
so often what they do is they have like two flavors


00:26:11.380 --> 00:26:13.060
of the thing.


00:26:13.060 --> 00:26:14.040
I'm creating a class.


00:26:14.040 --> 00:26:16.640
If the class has a field, it's called email.


00:26:16.640 --> 00:26:17.640
Oh, wait, no, what is it?


00:26:17.640 --> 00:26:22.640
It's being set to a new Mongo engine field of type string


00:26:22.640 --> 00:26:25.280
that has a regular expression on it.


00:26:25.280 --> 00:26:27.800
Wait, that's not what I get at runtime.


00:26:27.800 --> 00:26:29.400
At runtime, I get a string.


00:26:29.400 --> 00:26:31.480
At code time, I get this.


00:26:31.480 --> 00:26:36.480
So for those, I will say field colon type is string


00:26:36.480 --> 00:26:41.360
equals Mongo field is a Mongo string or whatever,


00:26:41.360 --> 00:26:44.200
or SQLAlchemy column of type string,


00:26:44.200 --> 00:26:48.040
because I want it to be explicit


00:26:48.040 --> 00:26:49.560
that it's not really what it says there.


00:26:49.560 --> 00:26:51.140
'Cause often the editors will like give you


00:26:51.140 --> 00:26:54.000
like column information, which it doesn't make any sense.


00:26:54.000 --> 00:26:56.280
Anyway, that's a long answer,


00:26:56.280 --> 00:26:59.800
but I gave Brian some time to think about his position here.


00:26:59.800 --> 00:27:02.360
- I'm actually just, I'm very impressed


00:27:02.360 --> 00:27:05.680
with Will's design decisions on a lot of things.


00:27:05.680 --> 00:27:10.640
And I am, like, there may be some magic hidden in there,


00:27:10.640 --> 00:27:15.280
but I would rather have less code to look at.


00:27:15.280 --> 00:27:19.920
So less code to look at means less things to get wrong


00:27:19.920 --> 00:27:21.080
as far as I'm concerned.


00:27:21.080 --> 00:27:26.560
- I am coming down with you on this one.


00:27:26.560 --> 00:27:31.280
I've been working for a long time on kind of a long project


00:27:31.280 --> 00:27:34.760
about static analysis and Python templating


00:27:34.760 --> 00:27:36.560
that is driven by Ty Pence.


00:27:36.560 --> 00:27:40.620
And looking at what he's done has made me step back


00:27:40.620 --> 00:27:44.720
and think, wow, there's some things you can do


00:27:44.720 --> 00:27:46.180
without throwing out type penning


00:27:46.180 --> 00:27:47.980
that improves the readability


00:27:47.980 --> 00:27:49.620
and removes the boiler plate


00:27:49.620 --> 00:27:52.180
while keeping people on the rails.


00:27:52.180 --> 00:27:54.940
Back to what you said about Will's design decisions.


00:27:54.940 --> 00:27:58.620
Looking inside the code of Textual


00:27:58.620 --> 00:28:01.020
is really fascinating to me.


00:28:01.020 --> 00:28:03.700
Fascinating enough that first today,


00:28:03.700 --> 00:28:07.540
Will announced that he is changing his job status


00:28:07.540 --> 00:28:09.200
so that he can work for the next three months


00:28:09.200 --> 00:28:12.200
on open source completely rather than at night


00:28:12.200 --> 00:28:17.200
and is looking to meet a target for GitHub sponsorship.


00:28:17.200 --> 00:28:19.480
So let's all go out there and sponsor him


00:28:19.480 --> 00:28:22.520
so we can get these delicious looking treats


00:28:22.520 --> 00:28:24.260
that he keeps giving to us.


00:28:24.260 --> 00:28:27.320
But second, I'm interested enough


00:28:27.320 --> 00:28:30.520
that I wanna join the freaking project and learn from him.


00:28:30.520 --> 00:28:32.320
I need a reactive system.


00:28:32.320 --> 00:28:33.620
He's got one.


00:28:33.620 --> 00:28:37.800
I wouldn't even know how to write a test for it.


00:28:37.800 --> 00:28:39.660
And he's got that too.


00:28:39.660 --> 00:28:41.840
So I'm with you on that.


00:28:41.840 --> 00:28:44.860
I love the way he writes his code,


00:28:44.860 --> 00:28:49.120
the way he talks about his thinking in public


00:28:49.120 --> 00:28:52.440
while being a gentle and encouraging public figure.


00:28:52.440 --> 00:28:56.520
- Yeah, well said.


00:28:56.520 --> 00:28:57.360
- Absolutely.


00:28:57.360 --> 00:29:00.880
Well, very, very cool stuff.


00:29:00.880 --> 00:29:02.360
There's a lot of neat things coming out of there.


00:29:02.360 --> 00:29:04.240
And I think a lot of people's reactions


00:29:04.240 --> 00:29:06.700
are like astonishment, like, wait, that's a terminal?


00:29:06.700 --> 00:29:08.300
That's insane that it does that.


00:29:08.300 --> 00:29:11.220
- Yeah.


00:29:11.220 --> 00:29:14.500
Onto the next.


00:29:14.500 --> 00:29:15.500
Speaking of testing,


00:29:15.500 --> 00:29:19.520
either of you ever used doc test?


00:29:19.520 --> 00:29:22.900
Paul. - Yes, I have.


00:29:22.900 --> 00:29:28.140
- So I, way back when, when I started blogging


00:29:28.140 --> 00:29:31.820
about testing, I thought it'd be fun to compare


00:29:31.820 --> 00:29:36.100
the test frameworks because I wrote my own.


00:29:36.100 --> 00:29:41.660
It wasn't fun, so I looked at unit test, I looked at doc test, I looked at pytest, and


00:29:41.660 --> 00:29:44.780
nose also.


00:29:44.780 --> 00:29:50.820
And I actually thought, you know, maybe just I didn't think it would go very far, but I


00:29:50.820 --> 00:29:58.020
tried to use doc test as a end-to-end test tool.


00:29:58.020 --> 00:30:00.060
It was difficult.


00:30:00.060 --> 00:30:03.340
And there's still some cool things about doc test.


00:30:03.340 --> 00:30:05.700
So if people are unclear what doc test is,


00:30:05.700 --> 00:30:10.220
doc test is a package that's built into Python


00:30:10.220 --> 00:30:11.060
that you can write.


00:30:11.060 --> 00:30:13.780
You can use it by saying Python-m doc test


00:30:13.780 --> 00:30:17.300
and point it at a file, one of your source files.


00:30:17.300 --> 00:30:19.820
And within your doc strings, if you've


00:30:19.820 --> 00:30:23.900
got things that are like the three--


00:30:23.900 --> 00:30:25.300
I'll see if I've got it here.


00:30:25.300 --> 00:30:27.780
So the three arrows or something,


00:30:27.780 --> 00:30:30.420
like the prompt, the Python REPL.


00:30:30.420 --> 00:30:33.660
and you can type some examples in there,


00:30:33.660 --> 00:30:37.620
and Doctest makes sure that the output really matches what you said.


00:30:37.620 --> 00:30:42.020
So Doctest will go through and make sure your code examples within your code actually work.


00:30:42.020 --> 00:30:45.020
This is a cool idea in principle.


00:30:45.020 --> 00:30:47.520
In practice, it's very painful.


00:30:47.520 --> 00:30:50.520
And a lot of the pain points come around,


00:30:50.520 --> 00:30:54.520
"Well, I forgot to import anything, so you have to include the imports in there."


00:30:54.520 --> 00:30:56.520
Or, "I forgot to..."


00:30:56.520 --> 00:30:58.520
There's a lot of stuff that can go wrong.


00:30:59.220 --> 00:31:03.680
Now, pytest adds some things you can run DocTest from pytest.


00:31:03.680 --> 00:31:04.820
It's pretty cool.


00:31:04.820 --> 00:31:07.780
What we're talking about now is a new project


00:31:07.780 --> 00:31:11.420
or a project new to me called XDocTest.


00:31:11.420 --> 00:31:15.660
XDocTest, it's got a whole bunch of cool features.


00:31:15.660 --> 00:31:19.420
One of the things is DocTest is a Regexplate-based thing.


00:31:19.420 --> 00:31:21.020
It pulls out the string,


00:31:21.020 --> 00:31:22.400
finds the code, runs it,


00:31:22.400 --> 00:31:25.140
looks at the output, make sure they match.


00:31:25.140 --> 00:31:27.140
X doc test uses a


00:31:27.140 --> 00:31:31.140
Whatever the source tree thing


00:31:31.140 --> 00:31:36.120
Abstract syntax tree that that's it abstract syntax tree


00:31:36.120 --> 00:31:42.900
Yeah, so it's actually parsing it better and there's a whole bunch of cool stuff you get with that


00:31:42.900 --> 00:31:47.960
the thing that I there's there's some highlights in there like one of the things is


00:31:48.740 --> 00:31:52.600
string continuation was painful because you had to include


00:31:52.600 --> 00:31:54.920
the little angle bracket things.


00:31:54.920 --> 00:31:56.860
You don't have to do that with XDocTest.


00:31:56.860 --> 00:32:00.460
The thing that I love the most though is one of


00:32:00.460 --> 00:32:07.360
the defaults in DocTest is it does not do white-space normalization.


00:32:07.360 --> 00:32:08.620
You can turn it on,


00:32:08.620 --> 00:32:10.040
but it doesn't do it by default.


00:32:10.040 --> 00:32:14.580
XDocTest by default does white-space normalization.


00:32:14.580 --> 00:32:17.580
What that means is if in my code,


00:32:17.580 --> 00:32:24.460
I cut and pasted stuff and added a tab or a space at the end of my string,


00:32:24.460 --> 00:32:27.720
doc test will fail that because it's like,


00:32:27.720 --> 00:32:30.880
"Oh, that string is not the same as whitespace at the end."


00:32:30.880 --> 00:32:33.820
I don't care about the whitespace at the end.


00:32:33.820 --> 00:32:38.100
One of the things that XDocTest just fixes that right off the bat.


00:32:38.100 --> 00:32:40.320
It's going to be way more pleasant just to work with.


00:32:40.320 --> 00:32:44.460
But there's a whole bunch of other cool features of this that it brought in.


00:32:44.460 --> 00:32:47.360
It has a more sane skip syntax,


00:32:47.360 --> 00:32:49.620
although they had to read it for a while.


00:32:49.620 --> 00:32:52.740
You have to say plus skip to start the skipping,


00:32:52.740 --> 00:32:55.500
and then minus skip to turn it off.


00:32:55.500 --> 00:33:00.020
Yeah, anyway, but it's pretty neat and flexible.


00:33:00.020 --> 00:33:03.940
I think if you're going to start out trying to do doc test stuff,


00:33:03.940 --> 00:33:05.720
I would totally use xdoctest.


00:33:05.720 --> 00:33:08.460
Plus it has a built-in pytest support.


00:33:08.460 --> 00:33:09.700
If you have it installed,


00:33:09.700 --> 00:33:14.080
you can say pytest --xdoctest and run it on your code,


00:33:14.080 --> 00:33:16.060
and it'll run fine.


00:33:16.060 --> 00:33:16.900
- True.


00:33:16.900 --> 00:33:19.260
- Yeah, very nice.


00:33:19.260 --> 00:33:20.100
Paul, you've been--


00:33:20.100 --> 00:33:22.360
- You were two for two on predicting


00:33:22.360 --> 00:33:24.380
what I was gonna talk about, so.


00:33:24.380 --> 00:33:27.000
But what I really wanna hear you do


00:33:27.000 --> 00:33:31.060
is say abstract syntax tree in a daffy duck voice.


00:33:31.060 --> 00:33:32.300
(laughing)


00:33:32.300 --> 00:33:33.140
- No.


00:33:33.140 --> 00:33:34.840
You.


00:33:34.840 --> 00:33:35.660
- No way.


00:33:35.660 --> 00:33:37.060
- That'll be in the bonus track.


00:33:37.060 --> 00:33:38.940
- Brett Cannon made us sing a song


00:33:38.940 --> 00:33:42.380
from like Ren and Stumpy or something like that.


00:33:42.380 --> 00:33:43.220
Oh my goodness.


00:33:43.220 --> 00:33:44.980
Was it that?


00:33:44.980 --> 00:33:46.660
- No, it was a pinky in the brain.


00:33:46.660 --> 00:33:48.220
That's what it was. - Pinky in the brain, yeah.


00:33:48.220 --> 00:33:51.740
- Yeah, yeah, it's all from the same general genre era.


00:33:51.740 --> 00:33:53.980
- We should do a Ren and Stimpy skit sometime.


00:33:53.980 --> 00:33:55.060
That would be fun.


00:33:55.060 --> 00:33:56.580
- God, Ren and Stimpy was awesome.


00:33:56.580 --> 00:33:57.420
- It was awesome.


00:33:57.420 --> 00:33:58.820
(laughing)


00:33:58.820 --> 00:34:00.620
The peak of civilization.


00:34:00.620 --> 00:34:01.460
- Yeah.


00:34:01.460 --> 00:34:02.280
- The red button.


00:34:02.280 --> 00:34:03.740
Okay, don't press it.


00:34:03.740 --> 00:34:06.620
All right.


00:34:06.620 --> 00:34:08.440
What's next?


00:34:08.440 --> 00:34:09.280
I'm next with this one.


00:34:09.280 --> 00:34:10.100
Okay.


00:34:10.100 --> 00:34:12.920
So I wanna start with some code


00:34:12.920 --> 00:34:15.040
and then tell you more about it.


00:34:15.040 --> 00:34:16.360
I want to tell you the code


00:34:16.360 --> 00:34:18.160
and then you can think about how complicated it is


00:34:18.160 --> 00:34:19.560
and then what is this accomplished.


00:34:19.560 --> 00:34:20.840
So here's some Python code.


00:34:20.840 --> 00:34:24.520
It creates a little LED, it's for like some embedded thing.


00:34:24.520 --> 00:34:27.500
It imports the LED, imports time and imports random.


00:34:27.500 --> 00:34:32.000
It says LED equals LED number 17, while true,


00:34:32.000 --> 00:34:34.440
LED on, sleep one second, LED off,


00:34:34.440 --> 00:34:37.480
sleep for between 45 and 60 minutes.


00:34:37.480 --> 00:34:39.460
That's the entire bit of code.


00:34:39.460 --> 00:34:40.720
What does it do?


00:34:40.720 --> 00:34:44.120
This is how I automated my standing desk


00:34:44.120 --> 00:34:45.280
with a Raspberry Pi.


00:34:45.280 --> 00:34:47.660
(laughing)


00:34:47.660 --> 00:34:48.720
Pretty awesome, right?


00:34:48.720 --> 00:34:49.620
- Yes.


00:34:49.620 --> 00:34:54.620
- So this one comes to us from Joe Ridley,


00:34:54.620 --> 00:34:56.180
Ridley, thank you Joe.


00:34:56.180 --> 00:34:57.900
And this is by David Kong.


00:34:57.900 --> 00:35:01.360
It's apparently he's into sort of hacking his productivity


00:35:01.360 --> 00:35:02.200
in all sorts of ways.


00:35:02.200 --> 00:35:05.000
So he got a standup desk and he said,


00:35:05.000 --> 00:35:06.680
"I have this cool automated standup desk.


00:35:06.680 --> 00:35:08.520
You can push a button for up, push a button for down.


00:35:08.520 --> 00:35:10.560
You have presets of like where you like the up,


00:35:10.560 --> 00:35:14.840
where you like the down, but he didn't press it very often.


00:35:14.840 --> 00:35:17.240
So he's like, well, why am I not pressing it?


00:35:17.240 --> 00:35:19.800
'Cause I am lazy and I want to stand up.


00:35:19.800 --> 00:35:22.320
And then, so he put reminders on his phone,


00:35:22.320 --> 00:35:23.200
it says, you want to stand up?


00:35:23.200 --> 00:35:26.200
He goes, no, I don't want to stand up right now.


00:35:26.200 --> 00:35:28.120
And then he said, well, what if it just did it?


00:35:28.120 --> 00:35:30.120
And I had to like adjust to it, right?


00:35:30.120 --> 00:35:33.840
So he went along and there's like a couple of buttons,


00:35:33.840 --> 00:35:37.960
little programmable bits, and he just pried the face plate


00:35:37.960 --> 00:35:41.840
off of the control surface of his automatic desk.


00:35:41.840 --> 00:35:44.840
It was a works desk, so whatever if it breaks, I guess.


00:35:44.840 --> 00:35:46.320
Pry that off.


00:35:46.320 --> 00:35:49.960
And he just has a few little like pins in the back.


00:35:49.960 --> 00:35:53.200
And if you push the button down, it completes the circuit.


00:35:53.200 --> 00:35:55.520
And he's like, well, really all I needed to do is stand up.


00:35:55.520 --> 00:35:57.000
I can push the sit down button


00:35:57.000 --> 00:35:59.360
when I'm tired of standing up again.


00:35:59.360 --> 00:36:01.800
And so went through about like, how do I do this?


00:36:01.800 --> 00:36:04.280
I just need to connect something


00:36:04.280 --> 00:36:05.960
that will trigger electrical current


00:36:05.960 --> 00:36:07.820
on one of these bits here.


00:36:07.820 --> 00:36:11.720
So I said, well, maybe I could use some little


00:36:11.720 --> 00:36:15.320
like super micro thing, some small things.


00:36:15.320 --> 00:36:17.000
And you know what, actually for five bucks


00:36:17.000 --> 00:36:20.820
I can get a Raspberry Pi zero and go crazy,


00:36:20.820 --> 00:36:22.880
get a case and an SD card and all that


00:36:22.880 --> 00:36:25.000
from Adafruit for five bucks


00:36:25.000 --> 00:36:27.400
and just write some Python code.


00:36:27.400 --> 00:36:31.520
And then you connect these little pin areas


00:36:31.520 --> 00:36:35.160
like number 17, for example, to a circuit.


00:36:35.160 --> 00:36:36.680
and instead of turning on the LED,


00:36:36.680 --> 00:36:40.260
it just sends a current over to that little thing


00:36:40.260 --> 00:36:41.880
on the desk and it'll make it go.


00:36:41.880 --> 00:36:42.840
Isn't that awesome?


00:36:42.840 --> 00:36:45.340
- That's great.


00:36:45.340 --> 00:36:46.520
I wanna do that.


00:36:46.520 --> 00:36:47.360
- Yeah.


00:36:47.360 --> 00:36:49.040
- I need a standing guest first though.


00:36:49.040 --> 00:36:49.880
- I know.


00:36:49.880 --> 00:36:54.320
- Here I am saying, Will, who is in the audience,


00:36:54.320 --> 00:36:57.400
has magic method names.


00:36:57.400 --> 00:36:58.760
How do I know?


00:36:58.760 --> 00:37:00.300
How can I tab complete?


00:37:00.300 --> 00:37:03.280
And this thing's like hook it up to terminal 17.


00:37:03.280 --> 00:37:04.120
I mean, oh.


00:37:04.120 --> 00:37:05.800
- Yeah, exactly.


00:37:05.800 --> 00:37:07.820
Exactly, it's pretty janky.


00:37:07.820 --> 00:37:09.760
- No, but that's great.


00:37:09.760 --> 00:37:12.200
That is, I've got to...


00:37:12.200 --> 00:37:13.320
- You have a standing desk?


00:37:13.320 --> 00:37:15.640
- Stand-up desk, it had a different brand,


00:37:15.640 --> 00:37:18.320
but it looks like the exact same panel.


00:37:18.320 --> 00:37:20.480
- Well, stay tuned.


00:37:20.480 --> 00:37:22.880
So one of the things is like, I don't really need a UI,


00:37:22.880 --> 00:37:24.080
but maybe just a terminal


00:37:24.080 --> 00:37:25.520
and how do I talk to the Raspberry Pi?


00:37:25.520 --> 00:37:28.680
So David goes on to talk about, well,


00:37:28.680 --> 00:37:32.600
how he set up an SSH shell over to his Raspberry Pi


00:37:32.600 --> 00:37:35.560
from his MacBook using a USB cable


00:37:35.560 --> 00:37:37.660
because it's on the desk anyway.


00:37:37.660 --> 00:37:40.360
And then just writes this little bit of code


00:37:40.360 --> 00:37:44.740
that I talked about, move desk.py, and off it goes.


00:37:44.740 --> 00:37:46.640
Soldered a few things together


00:37:46.640 --> 00:37:50.120
and then just taped it to the bottom of the desk.


00:37:50.120 --> 00:37:52.680
And now you have it going.


00:37:52.680 --> 00:37:54.880
I would contend there's a few minor upgrades


00:37:54.880 --> 00:37:56.520
that should be added here.


00:37:56.520 --> 00:37:58.180
Maybe a time check,


00:37:58.180 --> 00:38:01.720
like you may freak a custodial person out.


00:38:01.720 --> 00:38:02.920
(laughing)


00:38:02.920 --> 00:38:04.960
If they come in the middle of the night


00:38:04.960 --> 00:38:06.600
and they go to get the,


00:38:06.600 --> 00:38:07.440
if they go to get like-


00:38:07.440 --> 00:38:09.360
- Explode army has been activated.


00:38:09.360 --> 00:38:11.600
- Exactly, we're gonna empty like the trash bin


00:38:11.600 --> 00:38:13.000
under your desk and you go,


00:38:13.000 --> 00:38:13.840
(indistinct)


00:38:13.840 --> 00:38:15.760
I would run for it,


00:38:15.760 --> 00:38:17.320
but if that were me,


00:38:17.320 --> 00:38:20.640
but yeah, so maybe like a web service call


00:38:20.640 --> 00:38:22.520
to check the time or just check the time


00:38:22.520 --> 00:38:24.520
and go really just do this during work hours.


00:38:24.520 --> 00:38:27.600
And like, honestly, this was a pre COVID thing.


00:38:27.600 --> 00:38:28.440
But the other-


00:38:28.440 --> 00:38:31.360
- So it randomly raises and lowers it or?


00:38:31.360 --> 00:38:34.780
- Yes, between 45 and 60 minutes on the hour.


00:38:34.780 --> 00:38:38.040
- Okay. - That is fabulous.


00:38:38.040 --> 00:38:40.520
- Yeah, if you look at the comments here,


00:38:40.520 --> 00:38:43.040
this is where you gotta hang tight, Paul.


00:38:43.040 --> 00:38:44.340
So people are digging it.


00:38:44.340 --> 00:38:49.120
Someone down here a little bit further


00:38:49.120 --> 00:38:52.960
says I have something called a very desk,


00:38:52.960 --> 00:38:54.920
but it turns out when I peeled the front off


00:38:54.920 --> 00:38:57.480
of my very desk, it had exactly the same control board


00:38:57.480 --> 00:38:58.520
on the inside.


00:38:58.520 --> 00:39:00.560
- How about that?


00:39:00.560 --> 00:39:02.600
- Yeah, so Paul, if it looks the same,


00:39:02.600 --> 00:39:03.680
it may well be the same


00:39:03.680 --> 00:39:05.560
'cause someone else was saying that they did.


00:39:05.560 --> 00:39:07.440
- Now my desk is gonna be smarter than me.


00:39:07.440 --> 00:39:11.440
I mean, I've gotten used to my watch being smarter than me.


00:39:11.440 --> 00:39:13.560
- It will just have more willpower than you


00:39:13.560 --> 00:39:15.680
'cause you're like, I don't really wanna stand up


00:39:15.680 --> 00:39:17.360
while I carry a chitty horse, I gotta stand up.


00:39:17.360 --> 00:39:19.240
- Boxing the hedgehog.


00:39:19.240 --> 00:39:21.280
- Yeah, exactly.


00:39:21.280 --> 00:39:22.960
All right, well, that's all, but I thought it was a,


00:39:22.960 --> 00:39:23.900
I'm always thinking of like,


00:39:23.900 --> 00:39:26.440
we have these super cool devices that cost like five bucks


00:39:26.440 --> 00:39:27.920
and they're so easy to program,


00:39:27.920 --> 00:39:29.920
but I don't usually have anything cool to do with them.


00:39:29.920 --> 00:39:32.600
And this seems entirely attainable.


00:39:32.600 --> 00:39:33.940
- Yeah. - Yeah.


00:39:33.940 --> 00:39:38.960
- I think maybe hooking up a height adjustment


00:39:38.960 --> 00:39:43.240
with random adjustment to my webcam would be cool.


00:39:43.240 --> 00:39:46.560
So I could just have different angles throughout the day.


00:39:46.560 --> 00:39:48.120
- What if there's like a pulley system


00:39:48.120 --> 00:39:50.500
that after a moment yanks the chair


00:39:50.500 --> 00:39:52.800
and if you don't get up, it's just gonna dump you


00:39:52.800 --> 00:39:55.360
like a little bit more urgency to the matter.


00:39:55.360 --> 00:39:56.320
- It's still wearing a helmet.


00:39:56.320 --> 00:39:58.160
- Exactly, or a squirt gun


00:39:58.160 --> 00:40:02.880
it finds you're still sitting. It puts my coffee slightly farther away. Exactly.


00:40:02.880 --> 00:40:09.920
All right, Paul, what's your last one? This was a really interesting one for me.


00:40:09.920 --> 00:40:19.200
I was on vacation in heaven in August and two things I did was when I was at the beach,


00:40:19.200 --> 00:40:27.280
I had the beta of Brian's book and when I was back at my mother-in-law's house, I was


00:40:27.840 --> 00:40:31.380
taking my six related Python projects


00:40:31.380 --> 00:40:33.680
and teleporting them into the future


00:40:33.680 --> 00:40:37.280
using the hyper modern Python cookie cutter.


00:40:37.280 --> 00:40:39.780
And what do I mean by that?


00:40:39.780 --> 00:40:42.720
Well, if you're doing a Python package,


00:40:42.720 --> 00:40:45.820
a library or something that you're going to distribute on PyPI,


00:40:45.820 --> 00:40:49.320
you know, Python development's gotten--


00:40:49.320 --> 00:40:53.260
the bar has been raised, let's put it that way,


00:40:53.260 --> 00:40:56.340
on quality control and tooling and things like that.


00:40:56.840 --> 00:41:02.140
And my good friend Brian Okken long ago, 10 minutes,


00:41:02.140 --> 00:41:08.920
mentioned about XDoctest, which is also on here, I believe.


00:41:08.920 --> 00:41:13.420
Yeah, XDoctest, along with 57 other things you might want to do


00:41:13.420 --> 00:41:18.720
like Dependabot and Flake 8 and Precommit and mypy and Black


00:41:18.720 --> 00:41:22.660
and GitHub Actions and all these other things.


00:41:22.660 --> 00:41:27.120
And individually, they're achievable.


00:41:27.120 --> 00:41:32.500
Collectively, they are a go on vacation in heaven,


00:41:32.500 --> 00:41:34.800
delete your repository and start over.


00:41:34.800 --> 00:41:35.760
That's what I did.


00:41:35.760 --> 00:41:40.640
I deleted all my repositories and started over


00:41:40.640 --> 00:41:43.680
with poetry and things like that.


00:41:43.680 --> 00:41:48.540
This cookie cutter isn't just great because it's a cookie cutter


00:41:48.540 --> 00:41:51.820
that gets you in the ballpark out of the box.


00:41:51.820 --> 00:41:56.960
It is a user guide that explains all the decisions made,


00:41:56.960 --> 00:41:59.060
including the why.


00:41:59.060 --> 00:42:03.400
It's like teaching you how to become a modern Python


00:42:03.400 --> 00:42:07.400
packager programmer, someone who's going to distribute stuff.


00:42:07.400 --> 00:42:13.600
And in fact, there was a blog, a series of blog articles before he did this.


00:42:13.600 --> 00:42:16.100
Let's see if I can find that.


00:42:16.100 --> 00:42:19.800
Yeah, so often you'll see these articles of what you should do,


00:42:19.800 --> 00:42:21.020
and then you just have to go do it.


00:42:21.020 --> 00:42:23.020
And this is like, here's what you should do.


00:42:23.020 --> 00:42:25.260
And then you run this command and then it's done.


00:42:25.260 --> 00:42:26.700
But now you know why.


00:42:26.700 --> 00:42:27.360
Indeed.


00:42:27.360 --> 00:42:29.900
And in fact, I found the part you just described


00:42:29.900 --> 00:42:32.520
to be more valuable than the cookie cutter. Yeah.


00:42:32.520 --> 00:42:37.020
Because the last thing I wanted was to be teleported


00:42:37.020 --> 00:42:40.100
into 57 things I didn't understand.


00:42:40.100 --> 00:42:42.900
Yeah.


00:42:42.900 --> 00:42:48.700
And so just for the two of you, if you could look through that list,


00:42:48.860 --> 00:42:54.220
Maybe anybody in the audience look through that list. How many of these are things?


00:42:54.220 --> 00:43:00.700
Brian, you've been distributing packages recently. How many are these how many of these things are in your


00:43:00.700 --> 00:43:03.500
list of guilt


00:43:03.500 --> 00:43:07.900
That you're not doing. Yeah. Yeah. No a lot of these. a lot of these are great


00:43:07.900 --> 00:43:13.660
Um, some of these i'd like to add like, i'm not doing much type checking i'd like to do more type checking


00:43:14.220 --> 00:43:17.900
I don't some of the choices. I just don't agree with the choices


00:43:17.900 --> 00:43:22.820
so I was actually considering doing a fork of this with the choices that I would have made like


00:43:22.820 --> 00:43:29.260
Knox is a cool project, but I've got one. Yes. I knew you would say that and I agree with you


00:43:29.260 --> 00:43:32.660
I would I would change that and I I know you said you like poetry


00:43:32.660 --> 00:43:39.740
I know a lot of people love poetry. It just doesn't fit my brain. So I don't use poetry, but that's 50/50 on it


00:43:39.740 --> 00:43:41.240
I'm fighting it.


00:43:41.240 --> 00:43:43.240
But a whole bunch of other stuff, like you said,


00:43:43.240 --> 00:43:45.240
things that maybe you didn't consider,


00:43:45.240 --> 00:43:47.840
like black and prettier.


00:43:47.840 --> 00:43:49.140
I don't think I use both.


00:43:49.140 --> 00:43:51.740
So I don't know what prettier gives me the black doesn't.


00:43:51.740 --> 00:43:54.440
JavaScript and markdown me things like that.


00:43:54.440 --> 00:43:56.440
JSON files, non Python.


00:43:56.440 --> 00:43:57.440
Okay.


00:43:57.440 --> 00:43:59.640
Don't know what release drafter is.


00:43:59.640 --> 00:44:02.440
The whole release drafter thing,


00:44:02.440 --> 00:44:04.740
I don't know if either of you have ever looked


00:44:04.740 --> 00:44:07.440
at release note automation in Python.


00:44:07.440 --> 00:44:11.440
But there's a number of packages, semi-dead,


00:44:11.440 --> 00:44:16.220
and most of them result in this dance of,


00:44:16.220 --> 00:44:18.480
if you push before this thing runs,


00:44:18.480 --> 00:44:20.920
you can't get your notes on the tag.


00:44:20.920 --> 00:44:22.620
>> Yeah.


00:44:22.620 --> 00:44:25.520
>> And so this is hooked up with a GitHub action,


00:44:25.520 --> 00:44:29.740
which makes a draft of your release notes for you


00:44:29.740 --> 00:44:33.320
as part of the merging a pull request


00:44:33.320 --> 00:44:35.160
to bump the version number process.


00:44:35.160 --> 00:44:36.560
It's just fascinating.


00:44:36.560 --> 00:44:38.600
I would have never figured this out, man.


00:44:38.600 --> 00:44:39.600
Never.


00:44:39.600 --> 00:44:42.440
OK, we got some cool comments.


00:44:42.440 --> 00:44:45.200
One here, it's not as from X.


00:44:45.200 --> 00:44:48.160
X on. Yeah, that's a good point.


00:44:48.160 --> 00:44:50.160
It's not as hyper modern as the title suggests.


00:44:50.160 --> 00:44:52.160
It's often pretty solid advice.


00:44:52.160 --> 00:44:57.080
I'm not sure if what he means is if by solid is a is a compliment or an insult.


00:44:57.080 --> 00:44:59.400
I think what he means is hyper modern.


00:44:59.400 --> 00:45:03.640
At least when I read, I was like, the last thing on earth


00:45:03.640 --> 00:45:06.240
I want is bleeding edge on this stuff.


00:45:06.240 --> 00:45:10.880
And then also list of guilt would be a good title for this.


00:45:10.880 --> 00:45:11.880
Yes.


00:45:11.880 --> 00:45:16.120
One of the things I want to point out the article series.


00:45:16.120 --> 00:45:21.160
So at the top of this, what we're going to link to there's it links to hyper modern Python.


00:45:21.160 --> 00:45:23.160
It's a list of articles.


00:45:23.160 --> 00:45:25.800
The artwork in this is amazing.


00:45:25.800 --> 00:45:30.600
So he's using some freely available Japanese thing.


00:45:30.600 --> 00:45:32.940
So yeah, well said.


00:45:32.940 --> 00:45:34.320
Did you read any of the articles?


00:45:34.320 --> 00:45:38.060
Oh, well, I read all of them when they when they first appeared,


00:45:38.060 --> 00:45:40.800
but it looks like there's some newer articles that I haven't read yet.


00:45:40.800 --> 00:45:42.460
So, yeah, yeah.


00:45:42.460 --> 00:45:45.160
So, Claudio,


00:45:45.160 --> 00:45:46.300
mega kudos.


00:45:46.300 --> 00:45:48.900
That's another project I should join because there's a couple


00:45:48.900 --> 00:45:52.640
I would like to teleport him from Sphinx


00:45:52.640 --> 00:45:55.340
restructured text to Sphinx Markdown.


00:45:55.340 --> 00:45:57.440
Oh, yeah, definitely.


00:45:57.440 --> 00:46:01.840
Which is what I've done in my my each time I did this,


00:46:01.840 --> 00:46:04.780
I did a commit immediately to replace it


00:46:04.780 --> 00:46:06.580
and it's a little bit of work.


00:46:06.580 --> 00:46:09.240
And so it's a contribution I could actually make.


00:46:09.240 --> 00:46:14.200
- Yeah, Sphinx Markdown is the reason why I use Sphinx now.


00:46:14.200 --> 00:46:16.120
- Very good, very good.


00:46:16.120 --> 00:46:20.040
So one last thing I'll close with on the Xdoc test, Brian,


00:46:20.040 --> 00:46:23.660
I was using it from HyperModern Cookie Cutter


00:46:23.660 --> 00:46:28.660
and I switched to this from Chris Withers, Sybil.


00:46:28.660 --> 00:46:30.040
- Nice name.


00:46:30.040 --> 00:46:33.600
is Chris is an old time Zopista.


00:46:33.600 --> 00:46:35.720
And so what he does is he lets you,


00:46:35.720 --> 00:46:38.780
this is not about doc strings in your code.


00:46:38.780 --> 00:46:42.040
This is about blocks in your Sphinx,


00:46:42.040 --> 00:46:45.280
blocks of code in your Sphinx and testing them.


00:46:45.280 --> 00:46:50.280
But you wind up with this doing something pytesty.


00:46:50.280 --> 00:46:53.600
And this lets you have fixtures


00:46:53.600 --> 00:46:55.280
and all these other things available


00:46:55.280 --> 00:46:58.760
in your doc tests blocks.


00:46:58.760 --> 00:47:00.160
- Cool, we'll check it out.


00:47:00.160 --> 00:47:02.560
- Yep. - Yeah, super, super cool.


00:47:02.560 --> 00:47:06.840
And Eschillion said,


00:47:06.840 --> 00:47:08.880
"Solid was intended as a compliment there."


00:47:08.880 --> 00:47:09.720
Yeah, very nice.


00:47:09.720 --> 00:47:13.820
All right, Brian, you got any extras to wrap it up?


00:47:13.820 --> 00:47:16.100
- I don't, other than just an apology.


00:47:16.100 --> 00:47:19.000
Sorry about the solid comment.


00:47:19.000 --> 00:47:21.240
Oh well. - Oh no, that was good.


00:47:21.240 --> 00:47:22.820
Paul, anything else?


00:47:22.820 --> 00:47:25.580
- Yeah, I had a chance,


00:47:27.720 --> 00:47:29.560
I guess at the end of last week,


00:47:29.560 --> 00:47:34.480
if you've been to PyCon before,


00:47:34.480 --> 00:47:39.020
you'll know some of the folks in the PSF,


00:47:39.020 --> 00:47:42.160
Bessie Walshewski, who has been with the PSF forever


00:47:42.160 --> 00:47:44.840
and ever was with O'Reilly before that.


00:47:44.840 --> 00:47:49.140
She is now with OSI, the Open Society,


00:47:49.140 --> 00:47:53.480
God, I knew I would say that, Open Source Institute.


00:47:53.480 --> 00:47:55.920
I spent 10 years on a project


00:47:55.920 --> 00:47:57.480
with the Open Society Institute,


00:47:57.480 --> 00:48:03.020
the other OSI for me, and she is working with OSI


00:48:03.020 --> 00:48:07.160
on their messaging and fundraising and things like that.


00:48:07.160 --> 00:48:13.460
And it's a very interesting problem for us in the Python community


00:48:13.460 --> 00:48:19.300
that's similar to the problem we had with the PSF,


00:48:19.300 --> 00:48:24.000
getting people to pay for the comments, if that makes sense.


00:48:24.700 --> 00:48:30.540
Now, the commons for the world of open source is a lot squishier,


00:48:30.540 --> 00:48:35.660
and the value proposition is a lot more indirect relative to the world of Python.


00:48:35.660 --> 00:48:41.980
But I feel like there is a big there there,


00:48:41.980 --> 00:48:50.860
that the world of open source is still relevant and still has important next problems.


00:48:51.220 --> 00:48:55.660
There is a commons, there are things that will need to be done


00:48:55.660 --> 00:49:04.660
and we need a neutral agency that is an advocate for the commons to work on things like that.


00:49:04.660 --> 00:49:10.780
So she and I discussed what's next for the commons, things going on at OSI.


00:49:10.780 --> 00:49:16.920
If any of you were around in the beginning of the words open source,


00:49:17.580 --> 00:49:20.580
you know the problems that were being solved then,


00:49:20.580 --> 00:49:23.080
they feel like solved problems now.


00:49:23.080 --> 00:49:28.680
But that's an open question and sometimes problems don't have a way of staying solved.


00:49:28.680 --> 00:49:32.180
So keep an eye on OSI,


00:49:32.180 --> 00:49:36.180
keep an eye on what Betsy and Stefano and others are doing,


00:49:36.180 --> 00:49:39.380
keep an eye on open source itself,


00:49:39.380 --> 00:49:43.580
and maybe share some thoughts in the show notes or anything like that.


00:49:43.580 --> 00:49:48.580
What do you think is the big mission for open source?


00:49:48.580 --> 00:49:50.140
- Yeah.


00:49:50.140 --> 00:49:52.500
Maybe you reply to the Twitter thread announcing


00:49:52.500 --> 00:49:54.260
this episode, which will be out shortly.


00:49:54.260 --> 00:49:55.420
That'd probably be the best place


00:49:55.420 --> 00:49:59.180
or the YouTube live stream chat would be good.


00:49:59.180 --> 00:50:00.940
Good places for that.


00:50:00.940 --> 00:50:01.780
- How about you, Michael?


00:50:01.780 --> 00:50:03.500
Do you have any extra bits?


00:50:03.500 --> 00:50:04.320
- You know I do.


00:50:04.320 --> 00:50:07.700
First of all, I wanna just really quickly


00:50:07.700 --> 00:50:09.340
on the hyper modern thing throughout.


00:50:09.340 --> 00:50:11.700
Remember we talked about readme.so?


00:50:11.700 --> 00:50:12.540
- Oh yeah.


00:50:12.540 --> 00:50:13.360
- Oh yeah.


00:50:13.360 --> 00:50:14.860
This is readme as a service.


00:50:14.860 --> 00:50:16.700
This is good to generate your readme


00:50:16.700 --> 00:50:19.400
and then you can use the release note thing to keep it going.


00:50:19.400 --> 00:50:21.160
So yeah, I just want to give another shout out to that


00:50:21.160 --> 00:50:24.000
because the idea of readme as a service blew my mind.


00:50:24.000 --> 00:50:25.340
Does it do badges?


00:50:25.340 --> 00:50:26.800
God, badges are so hard.


00:50:26.800 --> 00:50:28.940
I know, if it doesn't do badges, it better.


00:50:28.940 --> 00:50:30.240
That would be an awesome upgrade.


00:50:30.240 --> 00:50:31.540
Okay.


00:50:31.540 --> 00:50:33.780
A couple of quick things I want to throw a shout out to.


00:50:33.780 --> 00:50:35.420
These are at the bottom of the show notes.


00:50:35.420 --> 00:50:38.880
ActiveState, you know, they're one of the packages,


00:50:38.880 --> 00:50:43.280
distributors of more full featured holistics


00:50:43.280 --> 00:50:46.840
sort of pre-packaged Python distributions.


00:50:46.840 --> 00:50:49.240
They are running a survey called


00:50:49.240 --> 00:50:52.120
the Software Supply Chain Security Survey


00:50:52.120 --> 00:50:56.120
to supply chain security of like pip vulnerabilities,


00:50:56.120 --> 00:51:00.440
PyPI package pollution vulnerabilities


00:51:00.440 --> 00:51:02.440
and stuff like that are big deals.


00:51:02.440 --> 00:51:04.160
So they're interested in running a survey.


00:51:04.160 --> 00:51:06.400
So I thought I'd give a shout out about that.


00:51:06.400 --> 00:51:07.640
People can fill that out.


00:51:09.500 --> 00:51:14.500
Python 3.9.7 and 3.8.12 are out with,


00:51:14.500 --> 00:51:18.780
I think 3.9.7 might have some very minor new things


00:51:18.780 --> 00:51:20.820
and 3.8 is just a security update.


00:51:20.820 --> 00:51:25.820
So bug fixes, but the 3.9.1 didn't speak to me


00:51:25.820 --> 00:51:28.300
as anything super major, but you might check it out.


00:51:28.300 --> 00:51:30.660
There's a few security things in there about like,


00:51:30.660 --> 00:51:35.540
if you pass this to like the IP class


00:51:35.540 --> 00:51:37.360
or something like that, it could be an issue,


00:51:37.360 --> 00:51:39.800
but I don't really think there's anything


00:51:39.800 --> 00:51:43.640
super important there, but good to know.


00:51:43.640 --> 00:51:46.240
Brian, this one, let me read the little description for you.


00:51:46.240 --> 00:51:50.720
This one here comes from Shlomi Lantan.


00:51:50.720 --> 00:51:53.480
Says, "Brian, you talked about having a history


00:51:53.480 --> 00:51:56.380
"of all the files in a GitHub repo


00:51:56.380 --> 00:51:58.460
"and finding out how long the oldest one."


00:51:58.460 --> 00:51:59.320
Like we were just looking around,


00:51:59.320 --> 00:52:00.680
like how old is this project?


00:52:00.680 --> 00:52:02.560
Maybe two years, looks like lasting change.


00:52:02.560 --> 00:52:06.200
So he wrote a thing called Grandpa.


00:52:06.200 --> 00:52:12.200
And the idea is simply find the oldest modified files in the repo.


00:52:12.200 --> 00:52:16.200
So you can run it standalone, you can make it a GitHub action and so on.


00:52:16.200 --> 00:52:19.200
So it just goes through and finds the oldest files.


00:52:19.200 --> 00:52:25.200
Last week I talked about wakepy, which will let you keep a process awake.


00:52:25.200 --> 00:52:28.200
Keep your computer awake while your Python process is running.


00:52:28.200 --> 00:52:32.200
So you do like a context manager, you know, with keep awake,


00:52:32.200 --> 00:52:35.200
do the stuff you don't want the computer to go asleep during.


00:52:35.200 --> 00:52:37.680
when you leave the computer can go back to sleep.


00:52:37.680 --> 00:52:40.600
And I said that there was a problem on macOS,


00:52:40.600 --> 00:52:42.300
PR has accepted that things back to good.


00:52:42.300 --> 00:52:43.400
So thank you for that.


00:52:43.400 --> 00:52:46.600
Really quick shout out to some,


00:52:46.600 --> 00:52:49.880
oh my Z shell, not my Z shell, oh my posh shell.


00:52:49.880 --> 00:52:51.240
Look at all that good stuff, Brian.


00:52:51.240 --> 00:52:52.880
That's, that could be your,


00:52:52.880 --> 00:52:57.640
that could be your PowerShell on Windows.


00:52:57.640 --> 00:52:59.540
- Does it have BI key bindings?


00:52:59.540 --> 00:53:01.520
If not, I can't use it.


00:53:01.520 --> 00:53:02.680
- I honestly don't know.


00:53:04.440 --> 00:53:06.740
Anyway, I think it's pretty cool, but people,


00:53:06.740 --> 00:53:10.040
it's not just for PowerShell.


00:53:10.040 --> 00:53:12.240
It just happens to be one of these really nice extensions


00:53:12.240 --> 00:53:14.400
that also works for PowerShell.


00:53:14.400 --> 00:53:15.360
- Oh, really?


00:53:15.360 --> 00:53:16.200
- Yeah.


00:53:16.200 --> 00:53:18.720
All right.


00:53:18.720 --> 00:53:20.200
- It took me forever to know what Posh meant.


00:53:20.200 --> 00:53:22.320
I'm like, Posh, what shell is that?


00:53:22.320 --> 00:53:24.880
Posh is PowerShell, right?


00:53:24.880 --> 00:53:28.640
- It probably is, actually, yeah.


00:53:28.640 --> 00:53:29.480
It probably is.


00:53:29.480 --> 00:53:31.600
It sounds cooler than PowerShell, though.


00:53:31.600 --> 00:53:32.440
- Okay.


00:53:32.440 --> 00:53:34.080
(laughing)


00:53:34.080 --> 00:53:35.040
- Cool, cool.


00:53:35.040 --> 00:53:37.200
All right, I think that's it for those.


00:53:37.200 --> 00:53:39.040
Are you all ready for a joke?


00:53:39.040 --> 00:53:40.160
- Yes.


00:53:40.160 --> 00:53:41.360
- All right, here we go.


00:53:41.360 --> 00:53:47.020
So here's a tweet from monkeyuser, @ismonkeyuser,


00:53:47.020 --> 00:53:47.860
and they have a mess,


00:53:47.860 --> 00:53:50.360
they have like this sort of planning diagram here,


00:53:50.360 --> 00:53:51.600
like a flowchart, if you will.


00:53:51.600 --> 00:53:52.800
Remember a flowchart?


00:53:52.800 --> 00:53:54.440
But this is like real high level.


00:53:54.440 --> 00:53:58.280
And it's about trying to find a meaning


00:53:58.280 --> 00:53:59.800
as a software developer.


00:53:59.800 --> 00:54:02.680
So if the person enters to the workflow,


00:54:02.680 --> 00:54:03.520
Yes or no?


00:54:03.520 --> 00:54:06.360
Yes. Do you have paid time off?


00:54:06.360 --> 00:54:14.400
Then what you can do is you can go in and you change your JavaScript.


00:54:14.400 --> 00:54:15.200
I think it's JavaScript.


00:54:15.200 --> 00:54:16.440
Change your JavaScript framework.


00:54:16.440 --> 00:54:18.240
Do you acquire new skills?


00:54:18.240 --> 00:54:19.000
Are you burnt out?


00:54:19.000 --> 00:54:20.840
No.


00:54:20.840 --> 00:54:24.000
Go back and change your JavaScript framework again.


00:54:24.000 --> 00:54:25.000
It's a little starving.


00:54:25.000 --> 00:54:27.760
Have you changed your JavaScript framework in the last two months?


00:54:27.760 --> 00:54:30.760
If no, then you need to change it again.


00:54:31.360 --> 00:54:33.160
you need to change it again.


00:54:33.160 --> 00:54:34.640
- It burns. - Go on.


00:54:34.640 --> 00:54:36.720
Yeah, you've got some backlog here.


00:54:36.720 --> 00:54:38.520
It goes to in progress and that gets shipped.


00:54:38.520 --> 00:54:39.640
It gets done, you get paid.


00:54:39.640 --> 00:54:40.480
Do you have burnout?


00:54:40.480 --> 00:54:41.300
Yes.


00:54:41.300 --> 00:54:42.140
Are you dead?


00:54:42.140 --> 00:54:43.000
Whoops, not yet.


00:54:43.000 --> 00:54:43.960
Do you have paid time off?


00:54:43.960 --> 00:54:46.160
Then you can change your JavaScript framework again.


00:54:46.160 --> 00:54:49.400
No, then you ask, has it changed in two months?


00:54:49.400 --> 00:54:51.800
If no, then you change it again.


00:54:51.800 --> 00:54:52.960
Otherwise you got the backlog.


00:54:52.960 --> 00:54:54.960
And I thought this part right here, Ryan,


00:54:54.960 --> 00:54:57.320
you might particularly like, is it ready for QA?


00:54:57.320 --> 00:54:58.640
Nothing goes to that.


00:54:58.640 --> 00:55:01.300
(both laughing)


00:55:01.300 --> 00:55:06.480
- It's just like an orphaned input box right there.


00:55:06.480 --> 00:55:10.960
- This should be the logo for HTMX.


00:55:10.960 --> 00:55:13.100
- Yes, it actually should.


00:55:13.100 --> 00:55:15.540
Yeah, this would be awesome 'cause it really,


00:55:15.540 --> 00:55:17.380
it just tells you the churn.


00:55:17.380 --> 00:55:19.420
And another person walks up and says,


00:55:19.420 --> 00:55:21.180
"Hey, are you trying to find a new workflow


00:55:21.180 --> 00:55:22.020
for how we're working this?"


00:55:22.020 --> 00:55:24.980
No, I'm trying to figure out why I'm still doing this.


00:55:24.980 --> 00:55:28.500
- Well, there's no way to go back to quit.


00:55:28.500 --> 00:55:31.160
(both laughing)


00:55:31.160 --> 00:55:33.920
- Yeah. - Yeah.


00:55:33.920 --> 00:55:35.760
- And you found the Easter egg.


00:55:35.760 --> 00:55:36.600
- Yeah.


00:55:36.600 --> 00:55:40.800
Well, also, why is there still a separate QA department?


00:55:40.800 --> 00:55:43.680
- I love the leveraging of paid time off.


00:55:43.680 --> 00:55:47.080
(both laughing)


00:55:47.080 --> 00:55:48.420
- Yeah.


00:55:48.420 --> 00:55:49.320
Backlog.


00:55:49.320 --> 00:55:50.780
Backlog's like an afterthought.


00:55:50.780 --> 00:55:52.480
If there's nothing else you can do,


00:55:52.480 --> 00:55:54.680
maybe you can work on the backlog.


00:55:54.680 --> 00:55:55.880
- Yeah, exactly.


00:55:57.760 --> 00:55:58.960
- Nice. - Awesome.


00:55:58.960 --> 00:55:59.800
- Well, that's it. - Thanks.


00:55:59.800 --> 00:56:00.800
- Yeah, that's it for our show.


00:56:00.800 --> 00:56:02.080
Brian, thank you as always.


00:56:02.080 --> 00:56:02.920
Great to have you here.


00:56:02.920 --> 00:56:04.920
And Paul, thanks for joining us.


00:56:04.920 --> 00:56:05.760
- Thanks for having me.


00:56:05.760 --> 00:56:06.580
Love the show.


00:56:06.580 --> 00:56:08.400
Love everything the two of you have been doing


00:56:08.400 --> 00:56:09.940
for the last few years.


00:56:09.940 --> 00:56:14.300
And hope to tell you this in person soon,


00:56:14.300 --> 00:56:16.160
but probably not happen.


00:56:16.160 --> 00:56:17.400
- Yeah.


00:56:17.400 --> 00:56:19.280
Someday-- - That's wrong.


00:56:19.280 --> 00:56:20.940
- No, we're gonna-- - You said for me


00:56:20.940 --> 00:56:23.160
to interrupt you and tell you when you were wrong.


00:56:23.160 --> 00:56:24.400
I forgot to, so.


00:56:24.400 --> 00:56:25.240
- Okay, great.


00:56:25.240 --> 00:56:26.320
(Paul laughs)


00:56:26.320 --> 00:56:27.280
Keep happy thoughts.


00:56:27.280 --> 00:56:29.120
- Do you promise not to cut your hair


00:56:29.120 --> 00:56:30.480
until we see each other?


00:56:30.480 --> 00:56:31.560
- Yes.


00:56:31.560 --> 00:56:32.400
- Yes.


00:56:32.400 --> 00:56:33.400
- I'm wanted to be,


00:56:33.400 --> 00:56:35.800
I wanna be cousin It by next year at this time.


00:56:35.800 --> 00:56:38.040
(laughing)


00:56:38.040 --> 00:56:40.320
- Love it.


00:56:40.320 --> 00:56:41.140
All right.


00:56:41.140 --> 00:56:41.980
- Bye.


00:56:41.980 --> 00:56:42.800
- Bye guys.


00:56:42.800 --> 00:56:43.640
Thanks for everyone out there


00:56:43.640 --> 00:56:44.700
watching the live stream as well.


00:56:44.700 --> 00:56:45.540
See y'all later.


00:56:45.540 --> 00:56:55.540
[BLANK_AUDIO]

