WEBVTT

00:00:00.900 --> 00:00:03.140
Hello world, YouTube, Brian.

00:00:03.420 --> 00:00:03.620
How's it going?

00:00:04.100 --> 00:00:04.880
Hey, great.

00:00:05.520 --> 00:00:06.000
Good.

00:00:06.900 --> 00:00:08.960
We've got just a couple of things to cover today, huh?

00:00:10.660 --> 00:00:11.480
Quite a few.

00:00:12.220 --> 00:00:13.000
All right, let's jump on in.

00:00:14.320 --> 00:00:19.880
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:20.660 --> 00:00:26.040
This is episode 448, recorded September 8, 2025.

00:00:26.620 --> 00:00:27.220
I'm Michael Kennedy.

00:00:27.800 --> 00:00:28.840
And I'm Brian Okken.

00:00:29.660 --> 00:00:32.860
September. Reminds me of Green Day, Brian.

00:00:33.180 --> 00:00:36.040
A little Green Day song. Wake me when September's over.

00:00:37.160 --> 00:00:38.000
I can't believe it's September.

00:00:38.120 --> 00:00:39.460
I listened to Green Day for a while.

00:00:39.940 --> 00:00:41.280
I know. Well...

00:00:42.020 --> 00:00:42.540
Now I got to.

00:00:43.260 --> 00:00:44.060
Now you got to.

00:00:44.780 --> 00:00:47.300
All right. So this episode is brought to you by us.

00:00:47.739 --> 00:00:53.140
Support all of our things, even our archived podcasts, for those of us who have archived podcasts.

00:00:53.380 --> 00:00:57.220
But courses, books, you know about them by now.

00:00:57.380 --> 00:01:03.680
But it genuinely really supports the show when you use our things.

00:01:04.160 --> 00:01:05.019
We really appreciate it.

00:01:05.780 --> 00:01:11.860
If you want to watch live, just pythonbytes.fm/live will take you right there.

00:01:11.940 --> 00:01:16.480
If you went there right now, the YouTube video, I believe it's even playing right there as we speak.

00:01:16.880 --> 00:01:17.480
You go there afterwards.

00:01:18.300 --> 00:01:18.900
It's just a picture.

00:01:18.930 --> 00:01:19.600
It says we're offline.

00:01:19.860 --> 00:01:20.200
Click it.

00:01:20.580 --> 00:01:21.960
It'll take you to all the recordings.

00:01:23.280 --> 00:01:24.740
So really appreciate that.

00:01:24.900 --> 00:01:28.240
Of course, the audio on the podcast version is edited.

00:01:28.560 --> 00:01:32.660
This is the live, uncut bootleg version, if you will.

00:01:33.560 --> 00:01:34.380
So very fun.

00:01:34.820 --> 00:01:36.140
And subscribe to the newsletter.

00:01:37.200 --> 00:01:46.400
Brian's putting a lot of work into getting a really nice extra info sort of thing, background info, more info, not just a summary of links for every episode.

00:01:46.660 --> 00:01:49.080
So there's more to get from the email as well.

00:01:50.360 --> 00:01:53.960
Now, Brian, I'm interested to see what more you got for us.

00:01:54.000 --> 00:01:54.440
Let's start there.

00:01:54.600 --> 00:02:03.120
Well, I do want to talk about Prack, but first I want to talk about the newsletter just for a second because you always give me credit, but it is a joint effort.

00:02:03.820 --> 00:02:08.119
We're both doing work to get that newsletter out, so I appreciate it.

00:02:08.420 --> 00:02:08.920
You're welcome.

00:02:09.320 --> 00:02:10.600
I'm really glad how it's turning out.

00:02:11.940 --> 00:02:14.640
Okay, so let's switch to Prack.

00:02:16.320 --> 00:02:17.940
Prack is a pre-commit thing.

00:02:18.040 --> 00:02:27.640
And we, in episode 447, we talked about pre-commit and actually, again, we've talked about it a bunch, but recently it was on 447.

00:02:28.300 --> 00:02:31.540
We talked about using uv to help it make things faster.

00:02:31.960 --> 00:02:34.860
So that was on the going down the rat hole episode.

00:02:36.020 --> 00:02:48.480
So, but somebody, lots of people actually, but I want to, the one I have bookmarked was Owen Lamont said, hey, here's another dev tool you might want to check out.

00:02:48.780 --> 00:02:49.220
It's Prec.

00:02:49.580 --> 00:02:51.460
It's pre-commit, re-implemented, and Rust.

00:02:52.220 --> 00:02:54.320
And, you know, we're kind of used to that, right?

00:02:54.640 --> 00:02:58.740
We got a lot of tools that are re-implemented in Rust, so why not check it out?

00:02:59.040 --> 00:03:02.520
So Prec is, I tried it out this morning.

00:03:03.400 --> 00:03:04.240
It's pretty cool, actually.

00:03:04.620 --> 00:03:06.440
So Prec is pre-commit with Rust.

00:03:08.020 --> 00:03:12.780
There's a warning on the site that says, hey, it's not production ready yet.

00:03:13.020 --> 00:03:16.820
A few subcommands and languages are still in the works.

00:03:18.280 --> 00:03:22.640
And so as a reminder, pre-commit is not just for Python.

00:03:22.820 --> 00:03:24.680
Pre-commit does other languages too.

00:03:24.900 --> 00:03:29.700
It's sort of a general purpose pre-commit tool that you can configure, get pre-commit hooks.

00:03:32.060 --> 00:03:36.380
So there's actually quite a few things you can do with pre-commit.

00:03:36.560 --> 00:03:40.000
But prac is pretty cool, and I checked it out.

00:03:40.440 --> 00:03:42.420
The projects that I traded on worked fine.

00:03:42.720 --> 00:04:26.500
um so what why do we care about this because pre-commit like what it does is it downloads these extra tools to run against your repo but it um that download time it caches that stuff so um i there were a lot of people talking about how fast it is for it's a faster install and and stuff and i do like i do care about the 10x faster install and a third of the disk space less disk space is nice. So it's got smaller cache apparently. But when you're using pre-commit a lot, it's the install time isn't what you care about. It's the runtime when you're actually running the tool. So I did check that out. So right out of the box, it was significantly faster.

00:04:26.600 --> 00:04:38.600
If you just had to turn on a few, the default pre-commit hooks, I noticed that it was like, you know, a second and a half or something like that to run it through pre-commit with uv.

00:04:39.540 --> 00:05:07.880
and then um but it's not going to really be much of a difference after everything's installed and then um and and then prec was like i don't know less half a second or something so it was significantly faster but it's in those little tiny ranges so i did check it out with um uh what do i i've got tabs up um there's some oh you want to i i'll i'll come back to this but I checked it out on a larger project.

00:05:08.140 --> 00:05:10.720
So I do contribute to pytest once in a while.

00:05:11.820 --> 00:05:16.120
And pytest has a bunch of pre-commit hooks and other things set up.

00:05:16.220 --> 00:05:21.560
And it takes, I don't know, four and a half seconds to run all the pre-commit hooks for pytest on my machine.

00:05:23.180 --> 00:05:24.900
And that's after a warm cache.

00:05:27.040 --> 00:05:28.860
So with Prec, that should be faster, right?

00:05:29.060 --> 00:05:31.120
And it was faster, but it was like three and a half seconds.

00:05:31.460 --> 00:05:37.320
So it's still, it is faster, but percentage-wise, I'm not sure if it's worth jumping.

00:05:37.350 --> 00:05:38.520
I mean, sure, why not?

00:05:38.860 --> 00:05:39.680
It's worth jumping.

00:05:40.260 --> 00:05:46.700
Now, that said, if you're running pre-commit in CI, then the install time really matters.

00:05:48.040 --> 00:05:50.000
And you do want as fast as you can get.

00:05:50.180 --> 00:05:55.180
So I would say if you're running pre-commit hooks in CI, yeah, use Prec.

00:05:56.600 --> 00:05:57.400
But I like the idea.

00:05:57.470 --> 00:06:01.960
So one of the things that they've got some cool improvements anyway, even if it's just not speed.

00:06:02.680 --> 00:06:10.340
So it's faster to download, but they want it to be completely as a drop-in.

00:06:10.520 --> 00:06:14.480
So everywhere you would say pre-commit, you would just say prac, and that's cool.

00:06:14.620 --> 00:06:15.820
So you don't have to learn something new.

00:06:16.380 --> 00:06:18.420
Kind of a cheat code on their part too.

00:06:18.880 --> 00:06:21.720
They don't have to write documentation or too much documentation.

00:06:22.140 --> 00:06:23.640
It's just everything it did.

00:06:24.800 --> 00:06:29.900
But there's some cool things that they didn't like about pre-commit that they fixed.

00:06:30.260 --> 00:06:35.620
So you can do a --directory and it runs hooks for the specified directory.

00:06:35.920 --> 00:06:42.020
Apparently there was an old thing of LS files in a dir and then pass it to xargs to pre-commit.

00:06:42.180 --> 00:06:42.840
Oh, that's painful.

00:06:43.360 --> 00:06:45.480
So cool that you can pass it on a directory.

00:06:46.460 --> 00:06:48.800
Also, you can say run --last commit.

00:06:49.160 --> 00:06:52.440
So after you've committed, you're like, oh, what were my pre-commit?

00:06:52.550 --> 00:06:53.460
I forgot to run them.

00:06:53.830 --> 00:06:54.780
You can run that.

00:06:54.940 --> 00:06:55.500
That's pretty neat.

00:06:56.700 --> 00:06:59.960
And then you can actually select hooks.

00:07:00.160 --> 00:07:00.680
That's pretty neat.

00:07:01.160 --> 00:07:09.680
And then if you forgot what all the hooks are that you've installed and what they do, there's a list command that looks at the available hooks and IDs and descriptions.

00:07:10.760 --> 00:07:11.080
Pretty cool.

00:07:11.160 --> 00:07:11.640
I like that.

00:07:11.940 --> 00:07:14.780
Or just run a specific hook if you want to run a specific.

00:07:15.120 --> 00:07:19.320
These are actually great additions and pre-commit maybe might want to think about putting those in.

00:07:19.540 --> 00:07:20.720
But I liked it.

00:07:20.760 --> 00:07:26.460
If they're going to like, all right, you're going to steal our API CLI interface, we're going to steal back some good ideas.

00:07:27.300 --> 00:07:28.200
Yeah, why not?

00:07:28.280 --> 00:08:50.020
one of the things the speed up that i thought was a cool idea was if they're already implementing things in rust there's a whole bunch of common ones that can be um can be go go ahead and uh like put those in to prec directly um and so there's there's a there's a handful of them so far this is a fairly new project so um uh it could be that these are faster i actually kind of like one of the reasons why I'm highlighting this isn't just so that we can talk about something faster for pre-commit, but it's also, it's yet another Rust tool that has been rewritten in Rust that might be a good example. And this is sort of looking at a bunch of files and, you know, parsing files. And that's a pretty common thing that Python's not bad at, but not fast at, and rust is fast so uh here's a good another good example for taking a look at it so like uh into file checks um one of the things that i the fix into file thing and that's with like you know in her making sure there's there's a uh into file indicator at the end of the i don't know what that checks were actually but trailing white space for instance there's trailing white space and then there's whether you have new lines or carriage returns and stuff a lot of these checks i noticed that I rely on Ruff.

00:08:50.240 --> 00:09:03.020
So I would love to hear from people of like while you're now using Ruff and pre-commit hooks, what pre-commit hooks are you using that aren't already built into like Ruff and things like that?

00:09:03.300 --> 00:09:06.620
So if anybody's got a list of that, I'd love to see that.

00:09:06.920 --> 00:09:09.600
So that's it.

00:09:09.940 --> 00:09:15.500
I did want to shout out also to Viet, I think, Vite, sorry, Vite.

00:09:15.940 --> 00:09:33.980
however you pronounce your name, B-E-I-T, recommended that if you're going to check the timing, he listed on Blue Sky, and we're going to link to this, a command line to clear out the cache if you want to time the cold cache times.

00:09:34.180 --> 00:09:36.080
Oh, yeah, that's cool to clear the cache just to check.

00:09:36.220 --> 00:09:40.020
You want to actually see the performance of CI options.

00:09:40.800 --> 00:09:40.860
Yeah.

00:09:40.920 --> 00:09:42.860
I believe it is Feitscheile.

00:09:43.780 --> 00:09:44.360
It's Deutsch.

00:09:44.420 --> 00:09:44.600
Okay.

00:09:45.180 --> 00:09:47.000
Because the Vs are Fs and so on.

00:09:47.880 --> 00:09:48.620
But this is just guessing.

00:09:48.940 --> 00:09:50.140
Sorry if we messed up your name, Fight.

00:09:51.940 --> 00:09:52.620
A couple thoughts.

00:09:52.840 --> 00:09:53.620
This looks really cool.

00:09:53.920 --> 00:09:54.760
First of all, I love it.

00:09:55.280 --> 00:09:55.600
Good find.

00:09:56.020 --> 00:09:57.200
And thanks for the recommendation, folks.

00:09:58.860 --> 00:10:00.680
You said that you saved half a second.

00:10:00.840 --> 00:10:07.920
I bet you that half a second is primarily Python startup time versus Rust startup time.

00:10:08.480 --> 00:10:14.180
And the reason I say that is I've got this little text transformation tool that I run.

00:10:15.160 --> 00:10:15.800
all of the time.

00:10:17.120 --> 00:10:21.800
And I built it as a Rumps app and as a CLI app because I just run it all the time.

00:10:21.850 --> 00:10:25.120
And if I have like, let's say a show title, right?

00:10:25.440 --> 00:10:28.620
Number 448, whatever the show title is, that's text.

00:10:28.820 --> 00:10:30.640
I got to turn that into a MP3 file name.

00:10:31.660 --> 00:10:37.520
So I'll run this thing that I'll say, turn it into like a valid HTML or URL slug.

00:10:37.650 --> 00:10:42.580
So drop all the punctuation, put dashes so there's not spaces between it, like that kind of stuff.

00:10:42.720 --> 00:10:50.220
And it'll do uppercase, lowercase, capital case, trim the white space off of whatever's in the clipboard, and then just puts it back in the clipboard.

00:10:51.200 --> 00:10:53.820
The execution time of that is basically zero.

00:10:55.560 --> 00:10:56.760
It reads from the clipboard.

00:10:57.200 --> 00:11:00.600
It processes typically 30 characters of text.

00:11:01.400 --> 00:11:02.260
And then it puts it back.

00:11:02.460 --> 00:11:03.100
And it's so fast.

00:11:03.700 --> 00:11:10.440
But it takes a second or maybe 0.7 seconds from when I go to the terminal and I type that and hit enter.

00:11:10.460 --> 00:11:12.140
I wait, wait, wait, and boom, out comes the answer.

00:11:12.440 --> 00:11:17.980
And I'm sure that it's basically the startup of all the Python stuff to do the one really, really short thing and going away.

00:11:18.530 --> 00:11:29.920
The reason I bring that up is I think the shorter the actual execution time of the pre-commit hooks, the faster, the bigger of an influence this will have.

00:11:30.040 --> 00:11:36.880
So you gain an eighth to speed up or a fourth to speed up or something like that.

00:11:37.390 --> 00:11:46.420
But if your actual pre-commit hooks were just run ruff and then run something else that was insanely fast, I bet you would notice a percentage difference more than that.

00:11:48.440 --> 00:11:49.020
Yeah, probably.

00:11:50.100 --> 00:12:06.760
But I also like the notion that this is extendable, and so you can contribute to the project and add these filters yourself to have extra checks to be able to put in.

00:12:07.500 --> 00:12:08.180
Yeah, that's super cool.

00:12:08.640 --> 00:12:09.380
And then you can avoid.

00:12:09.640 --> 00:12:13.420
Because no matter, like you said, even no matter what you're doing.

00:12:13.980 --> 00:12:19.920
So Prec is also running Python as well because a lot of the hooks are Python code.

00:12:20.600 --> 00:12:24.180
So for each of the hooks, it's got to start Python for that hook as well.

00:12:24.440 --> 00:12:25.100
So yeah.

00:12:26.700 --> 00:12:26.880
All right.

00:12:28.000 --> 00:12:30.000
Yeah, maybe the more hooks you have as well.

00:12:30.090 --> 00:12:30.220
Interesting.

00:12:30.840 --> 00:12:31.640
And the less built in.

00:12:32.540 --> 00:12:32.680
Yeah.

00:12:33.180 --> 00:12:36.180
Well, I don't really want to cover such a big topic, Brian.

00:12:36.740 --> 00:12:38.400
Let's just cover something tiny.

00:12:39.080 --> 00:12:39.480
Something small.

00:12:39.680 --> 00:12:40.140
Something tiny.

00:12:40.380 --> 00:12:40.920
Tiny IO.

00:12:41.660 --> 00:12:43.420
So we all know about asyncio.

00:12:43.960 --> 00:12:50.020
And one of my, I wrote the State of Python 2025 article that we talked about previously, right?

00:12:50.860 --> 00:12:57.580
And one of my big areas of focus was we're all going to have to get better at concurrency, right?

00:12:57.760 --> 00:13:02.300
We have free-threaded Python coming full-throated in 3.14.

00:13:03.520 --> 00:13:18.500
And we've always had async and await, but it's as we get more gill-less execution, you end up actually with parallel code execution, not just something waiting on I.O. somewhere, that kind of thing, right?

00:13:20.360 --> 00:13:22.640
And those kinds of things can be pretty tricky.

00:13:23.140 --> 00:13:28.600
So Patrick Kidger wrote this thing called Tiny I.O.

00:13:29.600 --> 00:13:36.040
And it's, I don't know, a bit of a jab, but it says, hey, have you ever used async I.O.

00:13:36.040 --> 00:13:36.880
and wished you hadn't?

00:13:37.200 --> 00:13:43.420
Well, here's a 300-line implementation of async.io event loop in Python that is simpler.

00:13:45.019 --> 00:13:59.020
So basically, the idea is I want to just run some async and await-like code and have it do async and async.io type of things.

00:13:59.150 --> 00:14:00.720
And if something goes wrong, just have it all stop.

00:14:00.720 --> 00:14:01.740
Like all the async stuff.

00:14:02.240 --> 00:14:03.680
Something went wrong with this whole thing.

00:14:03.810 --> 00:14:04.340
Just stop.

00:14:04.820 --> 00:14:04.980
Crash.

00:14:05.220 --> 00:15:34.780
like don't have like cancellation and all these other things that are like complicated and like parent child whatever right just yeah i just want to run a bunch of things something goes wrong i want to stop running all the things and real simple so that's what this tiny io is and you basically create a loop you say run you give it a coroutine and then out comes the answer yeah one thing that is weird about it the effect is basically the same but what is weird is that it uses yield instead await the reason I would love for it to use a weight it seems weird that it doesn't however basically with yield and running a bunch of cooperative multi-threading by the using the Yolkia word set allows them to just like say this all stuff all this stuff stops right basically gets a little bit more control over it so it is a little unusual in that regard but yeah let's see what else I say so one unusual the syntax uses yield rather than a weight but the behavior is the same await any coroutine with yield coroutine await multiple with yield given a list of coroutines which kind of nice like a gather async terminology and nursery and trio terminology and here's kind of what I was saying error in one coroutine will cancel all the coroutines across the entire event loop if the coroutine is sequentially depended upon, then we chain their trace backs together.

00:15:35.640 --> 00:15:36.300
It's kind of nice.

00:15:36.860 --> 00:15:37.180
Yeah.

00:15:37.760 --> 00:15:38.120
Yeah.

00:15:38.500 --> 00:15:41.040
Anyway, I think it looks kind of neat.

00:15:41.140 --> 00:15:42.100
People can check this out.

00:15:42.670 --> 00:15:46.260
I don't really know if I would use it or not over async I/O.

00:15:46.440 --> 00:15:48.100
But yeah.

00:15:49.820 --> 00:15:54.460
Primarily, I think the thing is cancellation, error propagation in a super, super simple way.

00:15:55.060 --> 00:15:55.860
Very lightweight stuff.

00:15:56.220 --> 00:15:59.060
It's obviously not going to be super interoperable.

00:16:00.220 --> 00:16:07.600
Like you can't plug it into FastAPI for that, because that thing already starts in AsyncIO event loop, same thing for Court and so on.

00:16:08.020 --> 00:16:10.960
But for little self-contained things, yeah, it could be cool.

00:16:11.440 --> 00:16:11.800
It's tiny.

00:16:12.899 --> 00:16:16.620
Well, yeah, also just thinking about the concepts and stuff.

00:16:16.660 --> 00:16:17.900
It might be a good education thing.

00:16:18.480 --> 00:16:19.040
Right, exactly.

00:16:19.200 --> 00:16:23.860
If you want to just see, well, what really is happening with AsyncIO and Async and Wait?

00:16:23.960 --> 00:16:27.720
Well, it's basically this with some compiler magic on it.

00:16:28.200 --> 00:16:28.640
Yeah.

00:16:30.960 --> 00:16:31.460
All right.

00:16:31.650 --> 00:16:31.800
Cool.

00:16:33.620 --> 00:16:34.280
Over to you.

00:16:35.200 --> 00:16:46.120
Well, I just noticed that we started the episode with very much overcast outside, and now I've got a bright sun, and I get this cool evil person cast.

00:16:46.400 --> 00:16:46.760
Whoa.

00:16:47.460 --> 00:16:47.640
Whoa.

00:16:49.160 --> 00:16:51.280
Oh, that's a perfect lead-in for my next topic.

00:16:51.330 --> 00:16:51.660
Keep going.

00:16:53.160 --> 00:16:59.700
Well, so Trey Hunter put out an article called The Power of Python's Print Function.

00:16:59.910 --> 00:17:01.060
And I'm like, I know print.

00:17:01.270 --> 00:17:02.980
I use print all the time, right?

00:17:04.339 --> 00:17:10.040
Actually, it turns out that I'm guilty of a lot of the things of ignoring a lot of the features of print.

00:17:10.089 --> 00:17:12.180
I usually just use it to print strings, right?

00:17:12.380 --> 00:17:13.819
Throw a string in there or whatever.

00:17:14.280 --> 00:17:17.280
And I knew that you could do other stuff, but I don't really use much.

00:17:17.640 --> 00:17:22.560
So let's go through some of the things that Trey wants to remind us what print can do.

00:17:22.980 --> 00:17:24.720
One of the things it can do is multiple arguments.

00:17:25.020 --> 00:17:43.300
So if you've ever went ahead and just did an f string and you're just replacing values within it, just dropping in variables right in the string, you can do that or you can just give it multiple, just put a string and a comma and a variable name and a comma and another string.

00:17:43.920 --> 00:17:45.540
And that's pretty easy too.

00:17:46.560 --> 00:17:48.700
It's not really, that's a toss up.

00:17:49.440 --> 00:17:52.200
I like my f strings and I'm getting pretty fast at them.

00:17:52.700 --> 00:18:15.540
but um one of the things you can do with that then is you can unpack because you can have so many parameters to print um you can iter iterable unpacking works so if you uh unpack and unpack something it's a print in a star arguments or something it's going to print everything because it'll automatically put a space between everything and that's pretty cool you don't need to unpack them yourself.

00:18:16.250 --> 00:18:23.100
And I've been guilty of doing that, of doing like a space dot split, whatever.

00:18:23.420 --> 00:18:25.240
Or no, here it is, the join.

00:18:27.040 --> 00:18:30.460
Join your arguments or join an iterable with space.

00:18:30.720 --> 00:18:32.400
And yeah, you don't have to do that.

00:18:35.060 --> 00:18:35.940
So you can just use print.

00:18:40.680 --> 00:18:43.580
Another thing is you don't have to just rely on space.

00:18:43.660 --> 00:19:42.180
you can pass in a separator value so maybe you want a colon or a comma or something else separating things you can go ahead and just use pass that in as it print takes a separator value that's neat i didn't i guess i never realized that you can print to a file of course i've done that um and that's but also i've also just relied on you know with open uh file as file print it to the file but you can just you can do that you can print it to a file so that's pretty easy but you can you can also print directly file equals standard error and print to the air customizing the end value and I've done that of course but the end value I didn't realize you could do this the end and the flush actually I use both this so the end like the separator is between elements but at the end you might want you might maybe you did the separator as a as a space but you want like a new line or you want like more you want to like a whole bunch of dashes or something at the end

00:19:42.250 --> 00:19:52.460
you can you can pass that in or i use that one a lot i'll put like a comma instead of a new line so i can just have it all wrap over and maybe i don't know i want to paste into excel or something

00:19:53.380 --> 00:20:16.300
yeah um and then uh one of the things i do use a lot is this um the flush uh so you can pass in uh flush equals true if you're especially if you're deep print debugging and you're doing it real time, you really want to see it right away and you don't want it to just sit in the buffer, you can flush equals true and as soon as you print anything, it'll pop out.

00:20:17.240 --> 00:20:18.280
Yeah, I do that too,

00:20:18.560 --> 00:20:19.760
especially for print debugging, you're right.

00:20:20.300 --> 00:20:25.660
And this is a pretty simple topic, but I've got a whole bunch of extras, so I wanted to make room for extras.

00:20:26.460 --> 00:20:28.700
So thanks, Trey, for reminding us how cool print is.

00:20:31.280 --> 00:20:31.460
All right.

00:20:31.540 --> 00:20:34.420
Yeah, and Pat's got a cool little add-on thought here.

00:20:34.600 --> 00:20:40.780
Pat Decker says, I use the end value to print things over top the last one without a new line.

00:20:40.960 --> 00:20:42.760
And then when something happens, proceed to the next line.

00:20:42.840 --> 00:20:43.700
Yeah, that's a really cool idea.

00:20:45.820 --> 00:20:46.180
Interesting.

00:20:47.300 --> 00:20:47.760
Yes, indeed.

00:20:48.420 --> 00:20:48.720
Wow.

00:20:50.139 --> 00:20:51.720
Okay, let's talk about the next one.

00:20:51.840 --> 00:20:52.720
This is going to be good.

00:20:53.120 --> 00:20:53.340
All right.

00:20:53.700 --> 00:20:57.420
I want to start with a positive angle before I take you down the dark side.

00:20:58.440 --> 00:20:58.740
Okay.

00:21:00.139 --> 00:21:02.360
So I think I already talked about this last time.

00:21:02.440 --> 00:21:05.320
I talked about converting the web design of Talk Python to Bulma.

00:21:05.500 --> 00:21:06.220
Did I talk about that?

00:21:06.500 --> 00:21:07.700
And maybe Python Bytes is next.

00:21:07.700 --> 00:21:08.380
A while ago, yeah.

00:21:08.820 --> 00:21:09.060
Yeah.

00:21:09.860 --> 00:21:15.200
That was an insane amount of work to change all of this around.

00:21:15.240 --> 00:21:25.000
It was probably 5,000 lines of CSS and HTML, not just changing tags, but completely restructuring grid layouts to Flexbox.

00:21:25.740 --> 00:21:27.180
And it was gnarly.

00:21:27.460 --> 00:21:32.020
And I used Agentic AI on that, and it was amazing.

00:21:32.280 --> 00:21:41.740
It took hours instead of weeks, and it was definitely something that pushed it from like, not worth the time, even though I'm using 10-year-old web technology, I really hate designing with it.

00:21:42.160 --> 00:21:46.860
It's just going to stay that way because changing is too much work to, well, what else am I?

00:21:46.860 --> 00:21:49.900
I'm a little too tired for other stuff this afternoon, so let's try this.

00:21:49.990 --> 00:21:50.400
You know what I mean?

00:21:51.520 --> 00:21:58.280
And so anyway, that is a good side of agentic AI, right?

00:21:58.680 --> 00:22:03.260
There's like, OK, get in there, just amplify what I need to do.

00:22:03.690 --> 00:22:07.300
A lot of times it's really interesting how it pushes something over that like, ah, that's too much work.

00:22:07.700 --> 00:22:15.820
It's not worth my time or energy or whatever to like, actually, I could totally do that now and really let you solve some problems that have been like nagging or are more ambitious.

00:22:17.000 --> 00:22:17.960
But it can go too far, Brian.

00:22:17.990 --> 00:22:18.520
And here we go.

00:22:21.000 --> 00:22:27.620
So we've got over on PCMag by Emily Forlini, Vibe Coding Fiasco.

00:22:28.420 --> 00:22:31.560
I don't put down what I was doing as vibe coding, but it's in the same category.

00:22:31.760 --> 00:22:32.760
It's the same tools, let's say.

00:22:33.460 --> 00:22:34.380
Vibe coding fiasco.

00:22:34.640 --> 00:22:38.000
AI agent goes rogue, deletes company's entire database.

00:22:40.760 --> 00:22:40.960
Okay.

00:22:41.720 --> 00:22:47.480
This is like a lesson, and let me be the warning for you rather than, you know, you making these same mistakes sort of thing.

00:22:47.660 --> 00:22:52.960
So an agentic AI doing the heavy lifting is great, as I just described, until it deletes everything.

00:22:53.880 --> 00:23:00.400
And what's really funny is the AI, it even knew it.

00:23:00.650 --> 00:23:06.600
It was like a bad dog that couldn't resist, got up on the table and ate the steak while you were setting the table.

00:23:09.180 --> 00:23:12.580
The AI admits this was a catastrophic error in my judgment.

00:23:15.020 --> 00:23:16.420
So let's go through it real quick.

00:23:17.320 --> 00:23:21.640
All right, so there's this person, Jason Lemkin, was using Replit.

00:23:21.920 --> 00:23:22.820
Now, I don't use Replit.

00:23:22.960 --> 00:23:25.180
This is like coding in the cloud.

00:23:25.460 --> 00:23:27.500
And I absolutely hate that stuff so much.

00:23:27.500 --> 00:23:30.560
I can't tell you how much I don't like programming in browsers.

00:23:31.500 --> 00:23:34.200
I'd rather have a proper IDE and a file system.

00:23:34.940 --> 00:23:36.300
Run it locally or maybe in Docker.

00:23:37.160 --> 00:23:37.760
None the less.

00:23:38.240 --> 00:23:39.620
Some people like that feel, right?

00:23:39.780 --> 00:23:40.860
Like, I don't have to set anything up.

00:23:41.000 --> 00:23:42.820
I'll just log in my red browser and code.

00:23:42.940 --> 00:23:45.140
And now this has agentic AI, so let's just have it go.

00:23:45.660 --> 00:23:46.700
So there's a couple of lessons here.

00:23:48.020 --> 00:23:51.100
So he said it worked great for a week.

00:23:51.160 --> 00:24:22.280
when it works, it's so engaging and fun. It's more addictive than any video game I've ever played, like, haven't even touched a wow for a week. You can just iterate, iterate, and see your vision come. It's so cool. He tweeted. Well, our friend maybe didn't understand the concept of database backups, snapshots, these kinds of things. Okay. So it said it created a in parallel fake algorithm with telling me it was like doing some other things.

00:24:24.720 --> 00:24:26.540
And without asking me, it went rogue.

00:24:27.000 --> 00:24:31.520
A few days later, it deleted my database, Lumpkin tweeted.

00:24:32.360 --> 00:24:38.180
The AI's response, yes, I deleted the entire code base without permission during an active code and action freeze.

00:24:38.400 --> 00:24:42.040
It said, I made a catastrophic error judgment and panicked.

00:24:43.080 --> 00:24:43.960
Can you believe it?

00:24:44.120 --> 00:24:44.600
It's amazing.

00:24:45.960 --> 00:24:53.780
So the Replic founder and CEO confirmed, indeed, It did, in fact, do this, and we are, in fact, sorry.

00:24:57.160 --> 00:24:58.580
So what should you do?

00:24:58.700 --> 00:25:01.700
Should you not use AI coding?

00:25:02.100 --> 00:25:03.380
Well, maybe.

00:25:03.920 --> 00:25:05.700
Here's some thoughts from Michael.

00:25:07.680 --> 00:25:14.500
Maybe don't use run everything unmonitored or without confirmation in production.

00:25:15.740 --> 00:25:17.860
I think it's fine to rub it on your dev machine.

00:25:18.160 --> 00:26:01.360
like if you have backups on your for your computer like how bad can it possibly go right but in production they were running hey ai agent go do that thing and i'll be back after lunch just just go for it item two item two is maybe you back up your database periodically i just backed up python bytes this morning to an encrypted drive maybe maybe don't just run ai on your one only and only copy of data um and three learn to code a bit maybe so you can give it a little bit you actually know what it's doing it doesn't just go off rogue and you just keep

00:26:02.420 --> 00:26:21.740
jabbing it until your data is gone so okay well i'm i'm sort of new to a lot of this i've i've we've talked about it a lot but i'm just starting to to do some of utilize it some um can you tell it like don't, of certain commands you can't do, like don't commit anything to get.

00:26:21.760 --> 00:26:29.840
I believe you can have a, well, I mean, we're talking about a whole bunch of different products and services as if like they all have the same, like they must.

00:26:30.380 --> 00:26:39.260
So like cursor and cloud code and those things, you can have a rules file or you can have like authorized or disallowed commands.

00:26:39.480 --> 00:26:41.280
You can run it in like

00:26:41.860 --> 00:26:45.260
get action verification from me every time.

00:26:45.600 --> 00:26:47.440
when it says, I'm going to run this ls command.

00:26:47.670 --> 00:26:48.300
Can I? Yes.

00:26:48.900 --> 00:26:49.920
I'm going to run this git command.

00:26:50.240 --> 00:26:51.100
Can I? Yes.

00:26:51.440 --> 00:26:52.920
I'm going to run this rmrf command.

00:26:53.060 --> 00:26:53.660
Can I? No.

00:26:54.630 --> 00:26:55.000
You know what I mean?

00:26:55.940 --> 00:26:57.480
And maybe it's not of your whole drive.

00:26:57.560 --> 00:27:04.760
Maybe it made, because a lot of times it'll make these little, like, I asked it to update this little git utility that I have.

00:27:05.500 --> 00:27:07.280
It created a subdirectory.

00:27:07.690 --> 00:27:14.180
In there it initialized a git repository and did a bunch of stuff to make sure it could detect the things it was supposed to detect.

00:27:14.980 --> 00:27:22.460
And then it ran rm-rf to get rid of its working content, which is what you want, but not on the root or user root.

00:27:24.539 --> 00:27:29.100
So I basically have switched it to just allow it to do whatever on my computer.

00:27:30.220 --> 00:27:31.980
But I would not ever do that in production.

00:27:32.160 --> 00:27:33.820
I wouldn't code in production in the first place.

00:27:34.060 --> 00:27:41.160
But second, you also could connect Visual Studio Code or one of those things to your server and just start writing.

00:27:41.200 --> 00:27:42.200
Like, why do I even need Git?

00:27:42.280 --> 00:27:42.860
That stuff sucks.

00:27:43.040 --> 00:27:44.360
I'll just write it right here on the server.

00:27:44.740 --> 00:27:45.900
No, don't do that.

00:27:47.080 --> 00:27:50.240
Definitely don't do it with AI.

00:27:50.380 --> 00:27:55.180
But I believe that the replet thing, because it only exists up there,

00:27:55.940 --> 00:27:57.440
is a little bit of a different deal.

00:27:57.780 --> 00:28:00.580
And I don't know if it has these allow commands or not allow commands.

00:28:00.640 --> 00:28:01.460
I've never used replet.

00:28:01.540 --> 00:28:02.600
Like I said, I don't like those things.

00:28:03.280 --> 00:28:04.180
Okay, yeah.

00:28:05.360 --> 00:28:06.340
But still, a funny story, right?

00:28:06.420 --> 00:28:13.300
And I love how it's like, I love how it's like, I made a catastrophic error in judgment, and I panicked.

00:28:14.780 --> 00:28:28.580
that's well what's funny is like what was the delete the deleting the database was probably the panic reaction not the catastrophic error and uh decided to just remove every remove all evidence

00:28:29.260 --> 00:28:41.760
yeah exactly oh my god i've screwed up and i've changed the data wrong delete delete i don't know it wasn't me it's funny yeah these are weird times these are truly weird times but also kind of amazing times we live in.

00:28:42.260 --> 00:28:42.520
Yeah.

00:28:44.760 --> 00:28:47.780
I think we're on to extras, right?

00:28:48.540 --> 00:28:48.880
Indeed.

00:28:49.930 --> 00:28:50.220
Go for it.

00:28:50.230 --> 00:28:50.460
All right.

00:28:50.880 --> 00:28:53.000
I've got some AI-related extras.

00:28:53.580 --> 00:28:53.900
Let's see.

00:28:54.100 --> 00:28:54.760
Remove, add.

00:28:58.660 --> 00:29:00.560
Some kind of, I guess, mixed results.

00:29:00.940 --> 00:29:04.240
Mixed, I don't know what everybody thinks about this.

00:29:04.420 --> 00:29:12.240
But Anthropik settlement, There's a, Anthropic was using pirated books to train.

00:29:12.560 --> 00:29:13.740
So there's a settlement.

00:29:14.160 --> 00:29:17.700
And I am linking to an Authors Guild article about it.

00:29:18.480 --> 00:29:23.420
What authors need to know about the $1.5 billion Anthropic settlement.

00:29:25.000 --> 00:29:26.100
That's a lot of money.

00:29:26.780 --> 00:29:28.240
But so what is it?

00:29:28.240 --> 00:29:33.320
So apparently they have to pay the authors back some money for pirated books.

00:29:33.640 --> 00:29:35.420
But it's not clear as to what.

00:29:35.660 --> 00:29:39.220
So I'm linking this because it took me a while to find.

00:29:39.660 --> 00:29:40.900
There's a lot of articles about it.

00:29:40.990 --> 00:29:44.760
I wanted to know, as an author, what should I care about?

00:29:45.320 --> 00:29:54.840
And the gist is it's still in process, and they're going to pay out people apparently $3,000 per title.

00:29:55.300 --> 00:29:58.220
I don't know if it goes to the publisher or the author or what.

00:29:58.270 --> 00:29:59.800
I don't know that detail yet.

00:30:02.220 --> 00:30:03.120
And there's a list.

00:30:03.760 --> 00:30:04.780
There's a list.

00:30:05.140 --> 00:30:06.260
There's not a list yet.

00:30:06.580 --> 00:30:10.280
They're supposed to come up with a list of books that they copied.

00:30:11.020 --> 00:30:17.680
But one of the places they copied from was Libgen.

00:30:18.400 --> 00:30:19.700
So a couple of things.

00:30:21.340 --> 00:30:27.680
The Atlantic did an article a while back about meta, using pirated books, using AI.

00:30:28.110 --> 00:30:34.520
So the Atlantic put together a list of authors and books that I'm going to link to also.

00:30:34.620 --> 00:30:36.600
So you can look at yours.

00:30:36.900 --> 00:30:45.760
And I went ahead and stuck my name in to see if I was part of the pirated books.

00:30:45.900 --> 00:30:49.840
And of course, yes, at least the first edition.

00:30:50.280 --> 00:30:51.200
Not sure if both of them.

00:30:52.200 --> 00:30:53.180
It's like you won the lottery.

00:30:53.340 --> 00:30:54.280
You're getting $1.5 billion.

00:30:57.240 --> 00:30:58.780
No, possibly $3,000.

00:30:58.800 --> 00:31:02.260
But I may get zero because that book.

00:31:02.640 --> 00:31:08.880
This isn't, just because you're in LibGen doesn't mean that Anthropic grabbed it, I guess is what I'm saying.

00:31:08.960 --> 00:31:10.300
So we have to, you don't know.

00:31:10.640 --> 00:31:14.320
But there's also a link in this, What Authors Should Know.

00:31:14.900 --> 00:31:16.980
There's a link, let me try to find it.

00:31:17.140 --> 00:31:18.720
I'm not going to link to it because it's in here.

00:31:19.120 --> 00:31:28.460
There's an Anthropic Copyright Settlement that you can go to and stick your contact information just to make sure you get notified.

00:31:29.040 --> 00:31:30.560
So I might do that, might not.

00:31:31.480 --> 00:31:32.080
I don't know.

00:31:32.560 --> 00:31:34.600
Anyway, so there's that.

00:31:34.780 --> 00:31:37.720
That's extra about pirated books with Anthropic.

00:31:37.860 --> 00:31:40.420
And I think that more of these lawsuits actually should happen.

00:31:40.480 --> 00:31:41.480
I don't think it was school.

00:31:41.560 --> 00:31:43.000
I think they absolutely should.

00:31:43.260 --> 00:31:45.320
And I think that they're going to.

00:31:45.360 --> 00:31:51.340
There actually are a bunch going on right now, like Getty Images and others are suing different AI people.

00:31:51.920 --> 00:31:53.320
The New York Times were suing.

00:31:55.880 --> 00:32:08.700
Even though I just said very positive things about agent-encoding and LMS, I think all of the ways that all of these people, all of these AI companies have gotten their data is straight up copyright theft.

00:32:09.460 --> 00:32:10.920
They've gone to all of our works.

00:32:11.440 --> 00:32:13.760
They've just downloaded them and said, we're just going to take that.

00:32:13.960 --> 00:32:26.440
And regardless of whether they were allowed to, this is especially egregious because it's like, we went to a place where they have literally pirated books and we're going to use that.

00:32:27.140 --> 00:32:29.100
It wasn't just they found it on the internet.

00:32:29.160 --> 00:32:34.660
they went to a place where the stolen stuff is and grabbed it so this is easier yeah it's it's

00:32:34.720 --> 00:32:55.420
interesting that and they did that and then they figured out that that wasn't all the books so they wanted every book so they actually went after after the fact after they stole a bunch of stuff um or used a bunch of pirated stuff they went off and um and then paid some publishers so they got access to some books through publishers agreements.

00:32:55.730 --> 00:32:59.700
And again, good luck if authors got any of that money.

00:33:02.600 --> 00:33:04.080
But that was done.

00:33:04.110 --> 00:33:08.320
So if they were willing to pay it, they knew that it was copyrighted stuff.

00:33:08.580 --> 00:33:11.180
And also everything on the internet is copyrighted.

00:33:11.650 --> 00:33:15.840
Unless you say this is Creative Commons or something.

00:33:16.400 --> 00:33:17.420
MIT or whatever, yeah.

00:33:17.660 --> 00:33:21.820
Yeah, and even Creative Commons is not copyright free.

00:33:22.200 --> 00:33:23.180
It is a copyright.

00:33:23.410 --> 00:33:25.160
It is a Creative Commons copyright.

00:33:25.580 --> 00:33:28.340
Anyway, move on a little bit because there's more fun stuff.

00:33:31.000 --> 00:33:34.040
One of our favorite people to play with AI is Simon Willison.

00:33:35.440 --> 00:33:38.800
And he's done a whole bunch of cool stuff with LLMs.

00:33:39.270 --> 00:33:49.300
And he's got a list of tools that I'm going to link to, a list of tools that he's used, miscellaneous tools built mostly with the help of LLMs.

00:33:49.800 --> 00:33:53.900
So I'm going to go ahead and link to that because it's pretty impressive.

00:33:54.760 --> 00:34:00.160
But he recently said a lot of people complain that these are kind of small, silly utilities.

00:34:00.840 --> 00:34:03.600
But hey, silly utilities is a great thing to use LLMs for.

00:34:04.420 --> 00:34:14.040
But he highlighted some with a recent blog post, a collection of tools that he feels are genuinely useful and worth highlighting with some descriptions.

00:34:14.760 --> 00:34:19.300
So go ahead and link to that because it's a fun.

00:34:19.500 --> 00:34:20.840
I wanted something positive.

00:34:20.940 --> 00:34:23.399
I do think that the work Simon's doing is really great.

00:34:25.139 --> 00:34:27.340
So, but a lot of people are not Simon.

00:34:27.520 --> 00:34:29.179
A lot of people do bad things with AI.

00:34:29.379 --> 00:34:39.000
So I also wanted to link to the AI Darwin Awards, which there's a bunch of nominees for horrible things people are doing with AI.

00:34:39.800 --> 00:34:40.760
And it's sort of funny.

00:34:42.320 --> 00:34:44.560
This is funny, but also it's serious.

00:34:45.540 --> 00:34:47.540
And I'm going to highlight a couple of them.

00:34:47.720 --> 00:34:52.560
One of them, apparently McDonald's AI chatbot had some problems.

00:34:52.960 --> 00:35:05.020
And there was a default password of 123456 that didn't take people long to figure out, which is insane that they use that as their admin password.

00:35:05.860 --> 00:35:16.960
And this one I heard about earlier this year, this showed up in, was it, it's a list of literary fiction about fiction.

00:35:17.320 --> 00:35:24.440
So a summer reading list, and this showed up in the Chicago Sun-Times and somewhere else.

00:35:25.960 --> 00:35:28.300
15 book recommendations for summer reading.

00:35:28.870 --> 00:35:34.440
Only five of those books were real, and nobody caught it before it got published in two places.

00:35:35.000 --> 00:35:36.060
This is insane.

00:35:37.900 --> 00:35:41.400
Some of the authors contacted, it was Washington Post and Chicago Sun-Times.

00:35:41.740 --> 00:35:47.260
Some of the authors contacted the newspaper and said, I didn't write that book, so I don't know why.

00:35:47.380 --> 00:35:48.360
he listed it.

00:35:49.220 --> 00:35:49.720
That's hilarious.

00:35:50.470 --> 00:35:51.420
Well, maybe they should.

00:35:52.300 --> 00:36:07.660
On the happy birthday, happy 20th anniversary birthday for Django, Talk Python episode, talking with them, and there's something that was being recommended so often to be used as a Django feature or function.

00:36:08.940 --> 00:36:11.280
Like they couldn't make it stop, so they just added it.

00:36:11.330 --> 00:36:13.280
It's like, fine, it's going to do it then.

00:36:14.240 --> 00:36:14.980
So they could just write the book.

00:36:15.080 --> 00:36:15.700
They're like, look, you know what?

00:36:15.960 --> 00:36:18.240
This is like number one for the summer reading list.

00:36:18.250 --> 00:36:19.200
Let me quick write that book.

00:36:19.500 --> 00:36:20.140
That's good.

00:36:20.600 --> 00:36:22.260
And have some AI write it for me.

00:36:22.860 --> 00:36:23.140
Yeah.

00:36:26.499 --> 00:36:30.100
That's not a bad idea, but it's hard to write a book in a couple weeks.

00:36:30.980 --> 00:36:33.860
Yeah, well, if AI can write your summer reading list, it can write your book.

00:36:36.500 --> 00:36:36.740
All right.

00:36:37.250 --> 00:36:37.880
Those are my extras.

00:36:38.500 --> 00:36:38.880
All right.

00:36:39.030 --> 00:36:39.120
Super.

00:36:40.200 --> 00:36:40.360
Okay.

00:36:40.440 --> 00:36:40.860
I got a few.

00:36:42.600 --> 00:36:48.720
Anthony Shaw, a friend of the show, wrote a really nice article called Python has had async for 10 years.

00:36:48.880 --> 00:36:49.960
Why is it more popular?

00:36:51.520 --> 00:36:52.280
Really cool article.

00:36:53.020 --> 00:36:53.620
Check that out.

00:36:55.560 --> 00:36:57.300
It's got a lot of interesting ideas there.

00:36:58.260 --> 00:37:04.940
It also made it to number two on Hacker News and had 323 upvotes and almost 300 comments.

00:37:05.640 --> 00:37:09.600
So it's got quite a bit of introspection here.

00:37:10.360 --> 00:37:18.100
some of the thoughts are just idiots from the Go community. Like, well, Go does it right, so that's why Python is wrong. It doesn't do it like Go.

00:37:18.200 --> 00:37:19.840
It's like, I'm not sure how constructive that is.

00:37:20.400 --> 00:37:26.060
So maybe the next bit of feedback is more relevant. But still, it's got some interesting comments and thoughts

00:37:26.220 --> 00:37:28.100
in there. So I'll link to that, and then obviously

00:37:28.300 --> 00:37:33.420
it bumps over to the main article by Mr. Shah.

00:37:35.680 --> 00:37:48.040
Last weekend, I was on the PyCon Africa fundraiser, which was a four-hour, 33-minute, and three-second livestream conference panel-type sort of deal.

00:37:48.620 --> 00:37:50.080
I was on for the last 90 minutes.

00:37:50.580 --> 00:37:53.420
So Carlton Gibson and some...

00:37:54.200 --> 00:37:56.800
Sheena and Kim VanWijk, friend of the show as well.

00:37:58.220 --> 00:37:59.980
I sort of kicked it off, if I remember that correctly.

00:38:00.960 --> 00:38:02.760
And yeah, it's pretty interesting.

00:38:02.920 --> 00:38:03.540
People can check it out.

00:38:03.720 --> 00:38:08.240
They link to a support PyCon Africa if you want to make donations to help them get to a goal.

00:38:10.280 --> 00:38:12.820
Basically, a bunch of funding ran out.

00:38:14.280 --> 00:38:16.720
The PSF said, hey, sure, we'll give out some grants.

00:38:16.880 --> 00:38:18.300
And there was way more demand.

00:38:18.560 --> 00:38:21.480
And they realized, oh, my goodness, we can't give that much help.

00:38:22.860 --> 00:38:24.680
I think it's more or less the short version.

00:38:25.560 --> 00:38:26.420
So you'll check that out.

00:38:26.450 --> 00:38:26.860
I'll link to that.

00:38:27.570 --> 00:38:29.140
And then, yeah, I'm down to jokes.

00:38:29.720 --> 00:38:30.080
A joke.

00:38:30.520 --> 00:38:31.500
I'll let you do the last joke.

00:38:32.040 --> 00:38:33.240
I'll do the second to last joke.

00:38:34.780 --> 00:38:37.460
It's almost fall, but not really.

00:38:37.820 --> 00:38:39.760
I mean, maybe it is, but it's going to be a warm day.

00:38:39.870 --> 00:38:41.300
As you pointed out, the sun is out.

00:38:41.390 --> 00:38:43.360
You got your moi lookout, right?

00:38:44.760 --> 00:38:49.020
So, I mean, what a better time for like an icy or something, a slurpee, if you will.

00:38:50.180 --> 00:38:50.360
Yeah.

00:38:51.080 --> 00:38:51.160
Yeah.

00:38:51.590 --> 00:38:52.900
So, I can't zoom on it.

00:38:55.260 --> 00:38:59.400
So, there's the Mountain Dew Freeze.

00:39:00.160 --> 00:39:03.740
There's some kind of Fanta or something that's just off screen that's green.

00:39:03.850 --> 00:39:04.500
They got the blue.

00:39:04.720 --> 00:39:15.320
And then there's one next to it that is like the crashed boot sequence of Ubuntu or some Linux embed.

00:39:16.440 --> 00:39:20.160
And these are like the little pictures that show you like what flavor it is.

00:39:20.600 --> 00:39:27.120
So the dark blue one here and the subtitle is, bro, I'm getting the BIOS flavor.

00:39:27.620 --> 00:39:31.160
And the comments are great because down here you go a little bit.

00:39:31.240 --> 00:39:32.980
He goes, wait, it's system D flavor.

00:39:33.120 --> 00:39:35.720
He goes, man, that looks like Linux flavor to me.

00:39:36.360 --> 00:39:36.920
That's just empty.

00:39:38.500 --> 00:39:38.800
Anyway.

00:39:39.940 --> 00:39:40.960
And, well, there's your proof.

00:39:41.220 --> 00:39:42.720
Penguins make the best slushies.

00:39:44.540 --> 00:39:46.840
Okay, now you know that that's the Linux.

00:39:47.500 --> 00:39:49.100
Oh, it's fresh pseudo Slurpee.

00:39:49.740 --> 00:39:50.600
Fresh pseudo Slurpee.

00:39:50.760 --> 00:39:52.080
What flavor of Linux is that?

00:39:52.140 --> 00:39:53.160
Is that mint or cinnamon?

00:39:53.400 --> 00:39:54.200
I mean, it's so good.

00:39:54.200 --> 00:39:55.040
It just keeps going.

00:39:57.380 --> 00:39:58.800
Bro, I'm getting the BIOS flavor.

00:39:58.820 --> 00:39:59.260
I love it.

00:39:59.680 --> 00:40:10.500
I get, but okay, so this is, so we've got like, I mean, cool that you can program the image in the Slurpee machine, but maybe.

00:40:10.690 --> 00:40:16.380
I mean, we just had like little pieces of plastic in there when I was a kid, lighten up what flavor of Slurpee it was.

00:40:17.480 --> 00:40:19.040
No, not anymore we don't.

00:40:19.540 --> 00:40:21.720
I mean, it's just like, it's technology gone too far.

00:40:21.800 --> 00:40:27.500
You literally could get like a transparent, translucent color thing with a backlight and just slot it in there.

00:40:28.640 --> 00:40:28.820
Yeah.

00:40:29.340 --> 00:40:29.800
I don't know.

00:40:30.160 --> 00:40:35.120
It could just be white even with like a grease pen to just tell people what flavor it is.

00:40:36.880 --> 00:40:39.500
Yeah, just some masking tape and a Sharpie.

00:40:41.700 --> 00:40:43.100
I guess you don't have to ship around.

00:40:43.220 --> 00:40:47.900
If you got a new flavor with a new logo, you don't have to ship like a thousand little plates around.

00:40:48.100 --> 00:40:50.980
But yeah, I think it makes for good jokes.

00:40:52.440 --> 00:40:53.000
That's good.

00:40:53.280 --> 00:40:54.120
That's the reason.

00:40:55.100 --> 00:40:55.240
Yeah.

00:40:56.280 --> 00:40:56.520
All right.

00:40:57.440 --> 00:43:04.960
i i have an ai related joke um which uh so let's hop over to that um so there's somebody uh grace on blue sky posted uh uh interaction with chat gpt and this is fun to do is there a seahorse emoji emoji and chat gpt crashes out it says yes uh uh tropical fish there is a seahorse emoji tropical fish unicorn actual correction this is there is a dedicated seahorse emoji tropical fish fish dolphin but the true heat seahorse emoji is uh tropical fish nope wait i'm not going to read all of this but it crashes out it finally says that maybe it thinks the crab is um it's not it maybe the mollusk or the seal uh anyway it just it's it's a funny interaction so i'm like is this real and a lot of people posted that they tried it out so i wanted to try it out uh i tried it out on chat gpt just this morning not five i don't know what it is whatever the default is if you just log in yeah it auto i think yeah it also crashed out it's like oh yeah that's a unicorn no one more try lobster none of these are and then but it did at the end it said um uh would you like to suggest the seahorse emoji to the unicode consortium i can show you how i'm sure those people appreciate this comment this meme dude i got 700 emails in my inbox this morning what's going on so i'm like maybe it's just chat gpt's bad uh what would what's claude do uh so i tried it on claude ai and um it also it it didn't crash out long for very long it said yes there is it gave me the unicorn said wait i made an error that's actually the unicorn emoji the seahorse emoji is horse actually let me correct myself again that's the horse emoji but then it says you know i don't think there is um and it gave up really fast uh so yeah you got to look at the

00:43:05.120 --> 00:43:09.480
fine print down there it says wait i made a catastrophic error and panicked i've emptied the ocean.

00:43:14.800 --> 00:43:15.360
Yeah, anyway.

00:43:15.680 --> 00:43:21.420
No. It does suggest that you could potentially combine a horse and a water wave emoji. It's kind of creative.

00:43:23.160 --> 00:43:26.900
I probably would do it the other way around, of like the water wave plus horse. Yeah, that's true.

00:43:27.070 --> 00:43:28.960
Maybe water on both sides of the horse.

00:43:29.010 --> 00:43:29.420
I don't know.

00:43:31.839 --> 00:43:36.740
Oh, Marco's really nailed it out in the audience. I'd use a wave plus unicorn for the narwhal.

00:43:38.460 --> 00:43:39.940
Like a narwhal sort of equivalent.

00:43:40.200 --> 00:43:41.020
Yeah, very nice.

00:43:43.240 --> 00:43:45.420
Anyway, fun with ChatGPT.

00:43:46.360 --> 00:43:48.960
Yeah, again, we live in weird and amazing times.

00:43:51.200 --> 00:43:51.640
So weird.

00:43:51.820 --> 00:43:52.000
All right.

00:43:53.360 --> 00:43:53.960
Very fun episode.

00:43:54.480 --> 00:43:55.460
Thanks for being here as always, Brian.

00:43:55.640 --> 00:43:56.020
Catch you later.

00:43:56.500 --> 00:43:56.700
Bye.

00:43:57.480 --> 00:43:57.680
Bye.

