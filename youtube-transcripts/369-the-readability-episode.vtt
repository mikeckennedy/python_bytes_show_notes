WEBVTT

00:00:00.001 --> 00:00:01.000
Oh, hey.

00:00:01.000 --> 00:00:02.000
Good to see you today.

00:00:02.000 --> 00:00:03.000
Hey, hello.

00:00:03.000 --> 00:00:04.000
Hello, Brian.

00:00:04.000 --> 00:00:05.000
Hello, everyone.

00:00:06.000 --> 00:00:07.000
So we do a Python Bytes episode today.

00:00:07.000 --> 00:00:08.000
That'd be fun.

00:00:08.000 --> 00:00:09.000
Yeah, I mean, we were just catching up, but let's go ahead.

00:00:09.000 --> 00:00:10.000
Why not?

00:00:10.000 --> 00:00:11.000
While we're here together.

00:00:11.000 --> 00:00:12.000
Yeah, sure.

00:00:12.000 --> 00:00:13.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly

00:00:13.000 --> 00:00:14.000
to your earbuds.

00:00:14.000 --> 00:00:15.000
This is episode 369, 69 recorded January 29th.

00:00:15.000 --> 00:00:16.000
And we're here to talk about Python.

00:00:16.000 --> 00:00:17.000
So we're here to talk about Python.

00:00:17.000 --> 00:00:18.000
And we're here to talk about Python.

00:00:22.000 --> 00:00:29.000
And we're here to talk about Python.

00:00:36.000 --> 00:00:42.000
And we're here to talk about Python.

00:00:48.000 --> 00:00:55.000
And we're here to talk about Python.

00:00:55.000 --> 00:01:00.000
And we're here to talk about Python.

00:01:40.000 --> 00:01:45.000
And both those two that I named, I'm big fans of.

00:01:45.000 --> 00:01:48.000
MicroWSGI is awesome, super fast, low memory usage.

00:01:48.000 --> 00:01:53.000
But only does WSGI, does no async stuff.

00:01:53.000 --> 00:01:55.000
And that's a huge drawback, right?

00:01:55.000 --> 00:01:56.000
It doesn't do async.

00:01:56.000 --> 00:01:59.000
It doesn't allow you to like properly scale async and await.

00:01:59.000 --> 00:02:05.000
Unicorn, on the other hand, allows you to use uvicorn workers inside there,

00:02:05.000 --> 00:02:08.000
which is kind of like one more chain in that loop.

00:02:08.000 --> 00:02:13.000
But when you deploy it that way, you can do async and await, which is awesome.

00:02:13.000 --> 00:02:18.000
But there's this new-ish thing coming along called Granian

00:02:18.000 --> 00:02:22.000
from the Emmet framework, which is a new Python web framework.

00:02:22.000 --> 00:02:27.000
But this is a Rust-based HTTP server for Python applications.

00:02:27.000 --> 00:02:32.000
So a Rust version of MicroWSGI or gunicorn, yeah?

00:02:32.000 --> 00:02:33.000
- Oh, cool.

00:02:33.000 --> 00:02:34.000
- That's kind of cool.

00:02:34.000 --> 00:02:38.000
It has 1.5 thousand stars on GitHub.

00:02:38.000 --> 00:02:41.000
Been coming along for a while.

00:02:41.000 --> 00:02:47.000
It's created by a guy named Giovanni, I believe.

00:02:47.000 --> 00:02:51.000
And Giovanni says, "Well, why build this thing?"

00:02:51.000 --> 00:02:53.000
A couple of reasons.

00:02:53.000 --> 00:02:57.000
It's a correct HTTP implementation supporting version 1.2

00:02:57.000 --> 00:03:02.000
and working on HTTP/3, which is awesome.

00:03:02.000 --> 00:03:08.000
It avoids the gunicorn, uvicorn, HTTP tools dependency composition

00:03:08.000 --> 00:03:10.000
when deploying in production.

00:03:10.000 --> 00:03:17.000
So this natively supports async and await, like right in it, along with WSGI.

00:03:17.000 --> 00:03:21.000
So whatever kind of app you've created, you can just run it right there

00:03:21.000 --> 00:03:25.000
in this thing without chaining stuff together.

00:03:25.000 --> 00:03:29.000
And one of the things that's nice about it is it's not a ton faster,

00:03:29.000 --> 00:03:31.000
but it's way more stable.

00:03:31.000 --> 00:03:34.000
There's less jitter in its performance profile,

00:03:34.000 --> 00:03:35.000
which I think is super cool.

00:03:35.000 --> 00:03:37.000
I'll talk about it in a second.

00:03:37.000 --> 00:03:39.000
But yeah, it has HTTP/1 and 2.

00:03:39.000 --> 00:03:40.000
Excellent.

00:03:40.000 --> 00:03:43.000
Supports HTTPS and WebSockets directly.

00:03:43.000 --> 00:03:45.000
I'm not going to send HTTPS traffic to it.

00:03:45.000 --> 00:03:48.000
I'm just using, for now, NGINX, whatever.

00:03:48.000 --> 00:03:54.000
It also supports RSGI, which is a Rust server gateway interface, I guess.

00:03:54.000 --> 00:03:56.000
You know, like ASGI and WSGI.

00:03:56.000 --> 00:04:00.000
So it does all the Python things, plus it has a Rust direct version

00:04:00.000 --> 00:04:03.000
if that was the way you went down it.

00:04:03.000 --> 00:04:05.000
And it's super easy to run.

00:04:05.000 --> 00:04:09.000
But from the performance perspective, if you look,

00:04:09.000 --> 00:04:16.000
it'll compare it down here to, let's see, against UVAcorn.

00:04:16.000 --> 00:04:19.000
And HyperCorn is another one I should have mentioned.

00:04:19.000 --> 00:04:24.000
That's like a parallel to UVAcorn plus Unicorn.

00:04:24.000 --> 00:04:27.000
But that one, I think, handles it all directly from Phil of Jones,

00:04:27.000 --> 00:04:28.000
which is great.

00:04:28.000 --> 00:04:31.000
But if you look at, so let's just say, like, the ASGI get.

00:04:31.000 --> 00:04:39.000
It says it'll do--numbers, please--1.3 million requests at--

00:04:39.000 --> 00:04:41.000
okay, that's just totally doesn't mean anything.

00:04:41.000 --> 00:04:45.000
It could be over three weeks--85, 86,000 requests per second.

00:04:45.000 --> 00:04:48.000
Or maybe this one's a little bit better.

00:04:48.000 --> 00:04:50.000
A different get for 94,000.

00:04:50.000 --> 00:04:58.000
Compare that against the UVAcorn one, which is 19,000 versus 94,000.

00:04:58.000 --> 00:05:04.000
Or the HyperCorn at 12,000 versus 94,000, which is great.

00:05:04.000 --> 00:05:09.000
But if you look at the variation, like, response time on, let's say,

00:05:09.000 --> 00:05:14.000
UVAcorn is, on average, 8.7 milliseconds.

00:05:14.000 --> 00:05:16.000
That's really good.

00:05:16.000 --> 00:05:20.000
But the max is 320 milliseconds.

00:05:20.000 --> 00:05:27.000
Whereas if you look at this one, it's 2.7, but the max is only 8.6.

00:05:27.000 --> 00:05:32.000
So that variability or jitter--I don't know how the heck you say it--

00:05:32.000 --> 00:05:33.000
is way more stable.

00:05:33.000 --> 00:05:35.000
And you just kind of look across the board.

00:05:35.000 --> 00:05:38.000
Like, another example is 6 versus 70 and so on.

00:05:38.000 --> 00:05:39.000
So I thought that was pretty cool.

00:05:39.000 --> 00:05:43.000
So I switched--if you come over here, Brian, to Python Bytes.

00:05:43.000 --> 00:05:48.000
This is running on Granian right now over my Docker cluster for the moment.

00:05:48.000 --> 00:05:50.000
So I just thought I'd see how it goes,

00:05:50.000 --> 00:05:53.000
and it's been going perfectly from what I can tell.

00:05:53.000 --> 00:05:55.000
So it's pretty easy to switch then?

00:05:55.000 --> 00:05:56.000
Yeah.

00:05:56.000 --> 00:05:58.000
I mean, all you got to do is pip install granian

00:05:58.000 --> 00:06:02.000
and then change the start command no matter how you run it.

00:06:02.000 --> 00:06:05.000
If you're running it in the systemd on a VM,

00:06:05.000 --> 00:06:07.000
you change the systemd exec command.

00:06:07.000 --> 00:06:11.000
If you do it in Docker, you just change the entry point command

00:06:11.000 --> 00:06:15.000
from micro-WSGI this or g-unicorn that to--

00:06:15.000 --> 00:06:18.000
it's basically just another startup command.

00:06:18.000 --> 00:06:20.000
Okay. Interesting.

00:06:20.000 --> 00:06:21.000
Cool.

00:06:21.000 --> 00:06:22.000
Indeed, indeed.

00:06:22.000 --> 00:06:28.000
One thing I did want to add for people who are considering this--

00:06:28.000 --> 00:06:31.000
I got to move this over.

00:06:31.000 --> 00:06:35.000
So one thing it doesn't--you can set it up so it'll do logging,

00:06:35.000 --> 00:06:39.000
but it doesn't do easy logging out of the box.

00:06:39.000 --> 00:06:41.000
So I actually was messing around like,

00:06:41.000 --> 00:06:43.000
"Maybe I should just do my own logging."

00:06:43.000 --> 00:06:46.000
Not for, "Hey, my app started up.

00:06:46.000 --> 00:06:47.000
Hey, somebody click this button,"

00:06:47.000 --> 00:06:50.000
but just request response logging, which is pretty common.

00:06:50.000 --> 00:06:52.000
So I actually ended up playing with it

00:06:52.000 --> 00:06:58.000
and using Log Guru to come up with a color-coded--

00:06:58.000 --> 00:07:01.000
added some middleware that came up with color-coded

00:07:01.000 --> 00:07:04.000
request response logging that does all sorts of cool stuff,

00:07:04.000 --> 00:07:07.000
like see how some of the sizes in this log are red

00:07:07.000 --> 00:07:09.000
and some are white.

00:07:09.000 --> 00:07:14.000
If it's over 500K in the request size, then it colors it red.

00:07:14.000 --> 00:07:17.000
Or if the response time is too slow, it'll color it yellow.

00:07:17.000 --> 00:07:19.000
If it gets really slow, it'll color it red.

00:07:19.000 --> 00:07:22.000
Or it's a 400 or 500 code error,

00:07:22.000 --> 00:07:26.000
it'll color that part of the request red.

00:07:26.000 --> 00:07:29.000
So you can look right at it and just get right away and see.

00:07:29.000 --> 00:07:34.000
So I've decided doing your own Log Guru request response stuff

00:07:34.000 --> 00:07:36.000
is pretty excellent, actually.

00:07:36.000 --> 00:07:38.000
So that's kind of a cool consequence

00:07:38.000 --> 00:07:40.000
of playing around with this as well.

00:07:40.000 --> 00:07:45.000
Cool. So is your use of Log Guru that a custom thing

00:07:45.000 --> 00:07:47.000
where you look at the response times

00:07:47.000 --> 00:07:49.000
and color it differently or something?

00:07:49.000 --> 00:07:50.000
Yeah, exactly.

00:07:50.000 --> 00:07:53.000
It'd be easy enough to just go, "Print this format.

00:07:53.000 --> 00:07:55.000
The code is this. The URL is that."

00:07:55.000 --> 00:07:57.000
But I said it would be a lot more useful

00:07:57.000 --> 00:08:00.000
if it was color-coded and meant stuff.

00:08:00.000 --> 00:08:03.000
Like if it's a 404, it should be a different color

00:08:03.000 --> 00:08:05.000
than if it's a 200.

00:08:05.000 --> 00:08:07.000
Or if it's a redirect, it should be a different color.

00:08:07.000 --> 00:08:09.000
If it's really, really slow--

00:08:09.000 --> 00:08:11.000
you can see these times are like 10 milliseconds,

00:08:11.000 --> 00:08:13.000
9 milliseconds, 8 milliseconds, 12 milliseconds.

00:08:13.000 --> 00:08:16.000
If that was a second, maybe that's a problem.

00:08:16.000 --> 00:08:18.000
Color that a different color.

00:08:18.000 --> 00:08:22.000
And I did that by installing middleware.

00:08:22.000 --> 00:08:25.000
This is in Pyramid, but it could also be whatever.

00:08:25.000 --> 00:08:27.000
You do this in FastAPI or whatever.

00:08:27.000 --> 00:08:30.000
It just says, "Begin the request, do something,

00:08:30.000 --> 00:08:34.000
pass it down to the framework, and then end the request."

00:08:34.000 --> 00:08:37.000
And it just times it and logs it and colors it there.

00:08:37.000 --> 00:08:39.000
Okay, neat.

00:08:39.000 --> 00:08:41.000
Yep, indeed, indeed.

00:08:41.000 --> 00:08:47.000
Well, I also want to talk about something new

00:08:47.000 --> 00:08:49.000
and old at the same time.

00:08:49.000 --> 00:08:51.000
Nice.

00:08:51.000 --> 00:08:53.000
pytest has been around for a while,

00:08:53.000 --> 00:08:55.000
but pytest 8 is brand new.

00:08:55.000 --> 00:08:58.000
So pytest 8 just came out this weekend.

00:08:58.000 --> 00:09:00.000
I'm super excited to start running with it.

00:09:00.000 --> 00:09:03.000
Actually, I've already started running with it.

00:09:03.000 --> 00:09:05.000
We're going to put in the show notes,

00:09:05.000 --> 00:09:09.000
I put a highlighted blog post of just pytest 8 is here

00:09:09.000 --> 00:09:13.000
and links to the full changelog.

00:09:13.000 --> 00:09:16.000
But what they did was they spread out--

00:09:16.000 --> 00:09:21.000
if people are running 7, like old 7x pytest,

00:09:21.000 --> 00:09:25.000
which that's what I was using before,

00:09:25.000 --> 00:09:28.000
the changelog is a little-- just takes a little bit to parse

00:09:28.000 --> 00:09:32.000
because they spread it along the RC1, RC2,

00:09:32.000 --> 00:09:35.000
and the final 8.0 release.

00:09:35.000 --> 00:09:36.000
The changes are all there.

00:09:36.000 --> 00:09:38.000
So I pulled the highlights out.

00:09:38.000 --> 00:09:40.000
So the thing I'm really excited--

00:09:40.000 --> 00:09:42.000
there's two things I'm really excited about.

00:09:42.000 --> 00:09:45.000
One is when you had an exception,

00:09:45.000 --> 00:09:49.000
there would just be a red block of exception stuff.

00:09:49.000 --> 00:09:53.000
And there's a whole bunch of cool differences.

00:09:53.000 --> 00:09:59.000
So there's improved diffs when you fail an exception,

00:09:59.000 --> 00:10:04.000
especially if you do -vv, so very verbose or verbose-verbose,

00:10:04.000 --> 00:10:06.000
however you want to think about that.

00:10:06.000 --> 00:10:10.000
But you get a colored diff instead of the big chunk of red.

00:10:10.000 --> 00:10:12.000
>> That's awesome.

00:10:12.000 --> 00:10:13.000
Back to this color thing, right?

00:10:13.000 --> 00:10:16.000
>> Yeah, it's also more colors.

00:10:16.000 --> 00:10:18.000
Normal syntax highlighting,

00:10:18.000 --> 00:10:20.000
we're used to syntax highlighted code.

00:10:20.000 --> 00:10:24.000
So there's error reports are now syntax highlighted.

00:10:24.000 --> 00:10:28.000
And there's the different sections of the error report

00:10:28.000 --> 00:10:30.000
are separated better.

00:10:30.000 --> 00:10:34.000
And then also there's better support

00:10:34.000 --> 00:10:38.000
for standard library containers for diffing.

00:10:38.000 --> 00:10:39.000
Like there was usually--

00:10:39.000 --> 00:10:42.000
there was a pretty good tuple diff, for instance.

00:10:42.000 --> 00:10:46.000
But if you had big lists, it was a little bit hard to read.

00:10:46.000 --> 00:10:48.000
It's a little bit better now.

00:10:48.000 --> 00:10:51.000
And then more comprehensive assert rewrites

00:10:51.000 --> 00:10:54.000
for other comparisons, not just equal,

00:10:54.000 --> 00:10:58.000
but things like not equal, less than equal, other comparisons.

00:10:58.000 --> 00:11:01.000
So that's really cool.

00:11:01.000 --> 00:11:04.000
Help people debug their code.

00:11:04.000 --> 00:11:07.000
>> That's super nice because you want to be able to just say,

00:11:07.000 --> 00:11:10.000
"Are these two things the same and not write code around?"

00:11:10.000 --> 00:11:11.000
How do you do that, right?

00:11:11.000 --> 00:11:13.000
>> Yeah, yep.

00:11:13.000 --> 00:11:16.000
And also like comparisons like less than or less than or equal,

00:11:16.000 --> 00:11:19.000
it's really nice for the pytest to go out

00:11:19.000 --> 00:11:22.000
and really tell you why that check failed

00:11:22.000 --> 00:11:26.000
and highlight the part of your data where it failed.

00:11:26.000 --> 00:11:29.000
So really, really fun to see that.

00:11:29.000 --> 00:11:30.000
There's the thing--

00:11:30.000 --> 00:11:33.000
the next thing I wanted to talk about for pytest 8

00:11:33.000 --> 00:11:37.000
was probably pretty obscure for people

00:11:37.000 --> 00:11:39.000
that are not using XFail.

00:11:39.000 --> 00:11:45.000
So XFail is a way to say, "I expect this test to fail."

00:11:45.000 --> 00:11:49.000
And for a lot of people, why would you expect it to fail?

00:11:49.000 --> 00:11:51.000
But for large organizations,

00:11:51.000 --> 00:11:54.000
it's pretty common to file a defect

00:11:54.000 --> 00:11:57.000
and you don't have control over it,

00:11:57.000 --> 00:11:58.000
so you can't just go fix it.

00:11:58.000 --> 00:12:01.000
Somebody else is responsible for fixing it.

00:12:01.000 --> 00:12:03.000
So that's how we use it.

00:12:03.000 --> 00:12:07.000
And I mark a test as failing, as expected to fail,

00:12:07.000 --> 00:12:09.000
and give it a defect number.

00:12:09.000 --> 00:12:15.000
And then when it-- and that's not new.

00:12:15.000 --> 00:12:20.000
But if it passes, there's decisions on how to make it XPass

00:12:20.000 --> 00:12:24.000
or what to do with if an XFail passes.

00:12:24.000 --> 00:12:27.000
I've talked about that a bunch on the other podcast.

00:12:27.000 --> 00:12:34.000
However, the change for pytest 8 is that with XFails,

00:12:34.000 --> 00:12:36.000
the traceback never showed up.

00:12:36.000 --> 00:12:37.000
It didn't used to.

00:12:37.000 --> 00:12:40.000
So the change is now if you-- there's a way to turn that on.

00:12:40.000 --> 00:12:46.000
With the -r command, you can turn on XFail tracebacks.

00:12:46.000 --> 00:12:49.000
So that's really nice for CI test runs

00:12:49.000 --> 00:12:52.000
to be able to see what the failure was in CI

00:12:52.000 --> 00:12:54.000
and not have to try to rerun it again.

00:12:54.000 --> 00:12:57.000
So really cool. Excited about that.

00:12:57.000 --> 00:13:01.000
There's lots more things, so check out the changelog.

00:13:01.000 --> 00:13:04.000
The reason why they bumped to 8, I think,

00:13:04.000 --> 00:13:06.000
is because there was a bunch of--

00:13:06.000 --> 00:13:09.000
they changed the way collection works.

00:13:09.000 --> 00:13:13.000
And that behavior change of backwards compatibility

00:13:13.000 --> 00:13:17.000
made it so that it made sense to bump the number.

00:13:17.000 --> 00:13:20.000
I think that's the reason. I'm not sure.

00:13:20.000 --> 00:13:22.000
But also, it's good to bump the number every once in a while

00:13:22.000 --> 00:13:26.000
so that we have-- so that you can deal with deprecations.

00:13:26.000 --> 00:13:29.000
You can get rid of the code that you were meaning to get rid of.

00:13:29.000 --> 00:13:33.000
So I encourage people to run pytest 8 and check it out

00:13:33.000 --> 00:13:38.000
and turn on the full strict mode and everything

00:13:38.000 --> 00:13:41.000
so that you know if anything breaks,

00:13:41.000 --> 00:13:44.000
you can roll back if you need to.

00:13:44.000 --> 00:13:46.000
Awesome. This is like Christmas for you, right?

00:13:46.000 --> 00:13:48.000
Yeah.

00:13:48.000 --> 00:13:50.000
A major version release.

00:13:50.000 --> 00:13:52.000
Yeah, and it also made me-- when I was looking at this,

00:13:52.000 --> 00:13:55.000
it made me realize that I think I need to add more color to my blog.

00:13:55.000 --> 00:13:59.000
It's just black and white, and it's not very fun.

00:13:59.000 --> 00:14:01.000
So I'm going to have to add more color.

00:14:01.000 --> 00:14:03.000
Yeah, color's always fun. I mean, that's the theme of this episode.

00:14:03.000 --> 00:14:07.000
Last week, it was "Let's just ship announced open source projects we're releasing."

00:14:07.000 --> 00:14:09.000
This is like the color episode.

00:14:09.000 --> 00:14:12.000
The color episode, yeah.

00:14:12.000 --> 00:14:14.000
Or as Midnight in the Audience puts it out there,

00:14:14.000 --> 00:14:16.000
"The readability episode."

00:14:16.000 --> 00:14:18.000
Very good.

00:14:18.000 --> 00:14:25.000
Indeed. Well, let's harken back to a couple of things on my side here.

00:14:25.000 --> 00:14:29.000
So I talked about this Docker work that I've been doing.

00:14:29.000 --> 00:14:33.000
That also kind of led me to the Granian stuff and playing with that as well.

00:14:33.000 --> 00:14:36.000
I also forgot to give a quick shout-out to the people--

00:14:36.000 --> 00:14:39.000
like both Andy Shapiro and Bill Crook pointed out,

00:14:39.000 --> 00:14:41.000
said, "Hey, you should check out Granian."

00:14:41.000 --> 00:14:44.000
So I want to give them credit for sending that in. Thank you.

00:14:44.000 --> 00:14:47.000
But as I was doing all these Docker things,

00:14:47.000 --> 00:14:51.000
I was--you know when you're in an unusual or an unfamiliar,

00:14:51.000 --> 00:14:55.000
uncomfortable space compared to what you normally do?

00:14:55.000 --> 00:15:00.000
Right now, my little browser in this episode has maybe nine tabs,

00:15:00.000 --> 00:15:02.000
and that's kind of a lot.

00:15:02.000 --> 00:15:05.000
But when I was doing the Docker stuff, I'd have 30, 40, 50 tabs,

00:15:05.000 --> 00:15:08.000
and then I would close 30 of them because I'd solve some problem.

00:15:08.000 --> 00:15:10.000
It would just have tabs everywhere.

00:15:10.000 --> 00:15:12.000
So it was just like exploring stuff all over the place.

00:15:12.000 --> 00:15:16.000
I was like, "Wow. I must not know what I'm doing right now."

00:15:16.000 --> 00:15:18.000
And it's true.

00:15:18.000 --> 00:15:21.000
But that's how you get to where you know what's going on.

00:15:21.000 --> 00:15:24.000
Along that, I'd be like, "Oh, people talk about--oh, my gosh.

00:15:24.000 --> 00:15:26.000
I've totally given up on doing this.

00:15:26.000 --> 00:15:30.000
I'm using Orbstack or Podman," or if they support this OS.

00:15:30.000 --> 00:15:31.000
I'm like, "What are these things?"

00:15:31.000 --> 00:15:34.000
So I just want to go through a host of Docker goodies

00:15:34.000 --> 00:15:36.000
that I think people will enjoy.

00:15:36.000 --> 00:15:39.000
Not exactly Python-specific, but certainly relevant

00:15:39.000 --> 00:15:42.000
if you're doing Python in any form of containers.

00:15:42.000 --> 00:15:45.000
So the first one of three--there's actually more, Brian.

00:15:45.000 --> 00:15:46.000
I'm not going to cover them all here.

00:15:46.000 --> 00:15:48.000
I'm saving some for later because it's just--

00:15:48.000 --> 00:15:50.000
it'll be a little out of control at that point.

00:15:50.000 --> 00:15:56.000
So Orbstack--if you use Docker and you use Docker on Mac or Windows,

00:15:56.000 --> 00:15:59.000
typically what you do is you get Docker Desktop.

00:15:59.000 --> 00:16:03.000
So that gives you the Docker commands that allows you

00:16:03.000 --> 00:16:05.000
to run Docker locally.

00:16:05.000 --> 00:16:09.000
I think it might use--maybe it uses VirtualBox or something on Mac,

00:16:09.000 --> 00:16:12.000
and it uses probably Windows subsystem for Linux on Windows.

00:16:12.000 --> 00:16:19.000
But you can run Linux containers on top of some hidden thing of Linux.

00:16:19.000 --> 00:16:21.000
So Orbstack is kind of that.

00:16:21.000 --> 00:16:25.000
They say, "Say goodbye to slow and clunky containers in VMs.

00:16:25.000 --> 00:16:28.000
It's a light and easy way to run Docker containers

00:16:28.000 --> 00:16:32.000
and Linux on one machine."

00:16:32.000 --> 00:16:37.000
So basically gives you a nice UI around it.

00:16:37.000 --> 00:16:40.000
It is 100% compatible with Docker, so you could say,

00:16:40.000 --> 00:16:43.000
"Docker run, Docker exec, Docker compose up,"

00:16:43.000 --> 00:16:47.000
or whatever it is you say, and instead of using the Docker engine,

00:16:47.000 --> 00:16:51.000
it'll use this Orbstack engine, which is pretty neat.

00:16:51.000 --> 00:16:57.000
It also has its own CLI if you want to directly work with it.

00:16:57.000 --> 00:17:02.000
But basically it's kind of a one, open source, and two, more lightweight.

00:17:02.000 --> 00:17:06.000
They've got a bunch of cool commands, but they show down here somewhere

00:17:06.000 --> 00:17:09.000
the speed.

00:17:09.000 --> 00:17:12.000
If you're going to open--it says Open edX.

00:17:12.000 --> 00:17:20.000
I guess that's probably the Docker compose setup for edX.

00:17:20.000 --> 00:17:23.000
"Time to provision a development environment for it."

00:17:23.000 --> 00:17:26.000
It's pretty long still because I guess that's a beast of an app.

00:17:26.000 --> 00:17:31.000
"17 minutes on Orbstack, but 45 minutes on Docker Desktop

00:17:31.000 --> 00:17:33.000
to build post-hoc," whatever that is.

00:17:33.000 --> 00:17:37.000
It's like a quarter or a third of the time.

00:17:37.000 --> 00:17:43.000
If you're on a laptop, it uses less than 25% of the battery as well,

00:17:43.000 --> 00:17:48.000
or it depends if you're using Superbase or Kubernetes or whatever.

00:17:48.000 --> 00:17:50.000
But pretty cool, right?

00:17:50.000 --> 00:17:51.000
- Yeah.

00:17:52.000 --> 00:17:56.000
Oh, another thing, I think--let me look.

00:17:56.000 --> 00:17:58.000
Yes, this is a big deal.

00:17:58.000 --> 00:18:00.000
You and I were just talking about this before we pressed record.

00:18:00.000 --> 00:18:03.000
It says you can run Linux machines without a fuss.

00:18:03.000 --> 00:18:06.000
One of the things I can do is I can go to Parallels,

00:18:06.000 --> 00:18:13.000
and I can run Linux, Ubuntu or whatever, on my Mac, my M2 Mini,

00:18:13.000 --> 00:18:15.000
my M2 Pro Mini.

00:18:15.000 --> 00:18:17.000
How do those words go together?

00:18:17.000 --> 00:18:19.000
Whatever order makes the right sense there.

00:18:19.000 --> 00:18:23.000
I can run them, but I can only run the ARM64 versions

00:18:23.000 --> 00:18:27.000
because I only have an ARM64 processor.

00:18:27.000 --> 00:18:32.000
But this one allows you to run Intel machines on Apple Silicon

00:18:32.000 --> 00:18:40.000
with Rosetta, which allows you then to run Intel-based Docker images

00:18:40.000 --> 00:18:43.000
and basically be closer to what your production environment is

00:18:43.000 --> 00:18:45.000
if you're using Apple Silicon.

00:18:45.000 --> 00:18:47.000
So that's also a nice feature of this.

00:18:47.000 --> 00:18:48.000
- That's pretty cool.

00:18:48.000 --> 00:18:49.000
- Yeah.

00:18:49.000 --> 00:18:51.000
It does cost money if you're a company,

00:18:51.000 --> 00:18:55.000
but it has a free version if you're just a person.

00:18:55.000 --> 00:18:58.000
So, not an endorsement, but I thought people might find this

00:18:58.000 --> 00:18:59.000
to be pretty useful.

00:18:59.000 --> 00:19:00.000
It looks pretty cool.

00:19:00.000 --> 00:19:01.000
- Yeah.

00:19:01.000 --> 00:19:03.000
- Next one, Podman.

00:19:03.000 --> 00:19:07.000
Podman is the best free and open-source container tools.

00:19:07.000 --> 00:19:10.000
So you can manage Docker containers, pods,

00:19:10.000 --> 00:19:12.000
and that term, I believe, comes from Kubernetes,

00:19:12.000 --> 00:19:16.000
like the unit of execution in Kubernetes is called a pod,

00:19:16.000 --> 00:19:18.000
and images with Podman.

00:19:18.000 --> 00:19:22.000
So, yeah, it lets you seamlessly work with containers

00:19:22.000 --> 00:19:24.000
in Kubernetes from your local environment.

00:19:24.000 --> 00:19:26.000
So this is also really cool.

00:19:26.000 --> 00:19:29.000
A lot of people are doing interesting stuff

00:19:29.000 --> 00:19:34.000
with this as some GitHub Action plugins.

00:19:34.000 --> 00:19:38.000
It's got a Visual Studio Code plugin and different things.

00:19:38.000 --> 00:19:43.000
So, yeah, people can check this out if they're...

00:19:43.000 --> 00:19:49.000
Hold on one sec.

00:19:49.000 --> 00:19:50.000
There we go.

00:19:50.000 --> 00:19:54.000
My headphones are getting low on battery, so I plugged...

00:19:54.000 --> 00:19:56.000
I took one out to charge every second, put it back in.

00:19:56.000 --> 00:19:58.000
Of course, everything that had any form of audio

00:19:58.000 --> 00:20:00.000
or video started playing when they go back in.

00:20:00.000 --> 00:20:02.000
Like, where's that coming from?

00:20:02.000 --> 00:20:03.000
Who's talking to me?

00:20:03.000 --> 00:20:05.000
All right, back to this.

00:20:05.000 --> 00:20:08.000
And then the third one, actually 3.5,

00:20:08.000 --> 00:20:11.000
because it kind of is two, is this is pretty interesting.

00:20:11.000 --> 00:20:13.000
So one of the things that kind of is inspiring

00:20:13.000 --> 00:20:15.000
once you get all this Docker stuff going is like,

00:20:15.000 --> 00:20:19.000
okay, well, if that open-source big complicated thing

00:20:19.000 --> 00:20:21.000
and some technology I didn't know how to run,

00:20:21.000 --> 00:20:25.000
like PHP or whatever, but if it has a Docker container

00:20:25.000 --> 00:20:29.000
or a Docker-composed set of containers, I can run it.

00:20:29.000 --> 00:20:31.000
All I got to do is just tell Docker to update it

00:20:31.000 --> 00:20:34.000
when there's a new one and just run it.

00:20:34.000 --> 00:20:36.000
That's super easy to do, right?

00:20:36.000 --> 00:20:39.000
So there's this, like, taking that to kind of the extreme

00:20:39.000 --> 00:20:41.000
is there's this thing called Kasa OS.

00:20:41.000 --> 00:20:42.000
Have you heard of this?

00:20:42.000 --> 00:20:43.000
- No. - I neither,

00:20:43.000 --> 00:20:47.000
but it has 20,000 GitHub stars, which is pretty cool.

00:20:47.000 --> 00:20:50.000
They call it your personal cloud operating system,

00:20:50.000 --> 00:20:54.000
community-based open-source software focused on delivering

00:20:54.000 --> 00:20:57.000
simple personal cloud experience around the Docker ecosystem.

00:20:57.000 --> 00:20:59.000
So basically, if there's a thing that runs Docker,

00:20:59.000 --> 00:21:02.000
this is like an OS for running in,

00:21:02.000 --> 00:21:04.000
a platform for running all that.

00:21:04.000 --> 00:21:09.000
So it gives you a UI into this OS that they give you.

00:21:09.000 --> 00:21:12.000
And it says, look, you can collect all your precious data.

00:21:12.000 --> 00:21:16.000
It'll like tie together Google Drive, Dropbox, iCloud,

00:21:16.000 --> 00:21:19.000
OneDrive, et cetera, et cetera, hard drives and everything

00:21:19.000 --> 00:21:23.000
into just one drive view.

00:21:23.000 --> 00:21:25.000
And then you can just access it and like map that drive

00:21:25.000 --> 00:21:29.000
over to your TV or your computer or whatever.

00:21:29.000 --> 00:21:32.000
You can go, there's somewhere in here where they've got

00:21:32.000 --> 00:21:35.000
all these apps that you can go just grab and install

00:21:35.000 --> 00:21:37.000
or support.

00:21:37.000 --> 00:21:38.000
A lot of them are unfamiliar to me

00:21:38.000 --> 00:21:40.000
'cause I haven't done this enough,

00:21:40.000 --> 00:21:43.000
but like Couch Potato, DuckDNS, PhotoPrism,

00:21:43.000 --> 00:21:45.000
and they just plug into this thing.

00:21:45.000 --> 00:21:47.000
So this is pretty interesting, right?

00:21:47.000 --> 00:21:50.000
- I think. - Yeah, you think, right?

00:21:50.000 --> 00:21:52.000
- Yeah.

00:21:52.000 --> 00:21:54.000
I don't know what I would do with it, but you know.

00:21:54.000 --> 00:21:56.000
- Yeah, so one of the things that I think this is sort of

00:21:56.000 --> 00:22:00.000
coming out of is they have this thing called Zimmacube,

00:22:00.000 --> 00:22:03.000
which instead of running all your stuff on the internet,

00:22:03.000 --> 00:22:08.000
this is like a kind of like a really fancy NAS,

00:22:08.000 --> 00:22:11.000
network attached storage, but it also runs Docker

00:22:11.000 --> 00:22:13.000
and all these things.

00:22:13.000 --> 00:22:17.000
So it says you can have up to 164 terabytes of SSD,

00:22:17.000 --> 00:22:20.000
but then it also runs all of these things.

00:22:20.000 --> 00:22:23.000
And this is on Kickstarter and it was already funded

00:22:23.000 --> 00:22:29.000
at around 1.1 million US, which is a lot apparently.

00:22:29.000 --> 00:22:33.000
So this is kind of the intended destination for that,

00:22:33.000 --> 00:22:35.000
but I think you can run it anywhere.

00:22:35.000 --> 00:22:37.000
So pretty cool, right?

00:22:37.000 --> 00:22:39.000
- Yeah, I mean, some people think over a million dollars

00:22:39.000 --> 00:22:44.000
is a lot, I don't, you know, jump change, but you know.

00:22:44.000 --> 00:22:46.000
- Yeah.

00:22:46.000 --> 00:22:48.000
Yeah, so I don't think this thing is shipped yet.

00:22:48.000 --> 00:22:52.000
I think it's in development still now that Kickstarter ended,

00:22:52.000 --> 00:22:55.000
but yeah, so there's a whole bunch of different funding.

00:22:55.000 --> 00:23:00.000
So Orb, OrbStack, Podman, Kasa, and Zimmacube.

00:23:00.000 --> 00:23:03.000
- Okay, so I have a question about the OrbStack.

00:23:03.000 --> 00:23:08.000
Is that, that doesn't generate Docker images though, does it?

00:23:08.000 --> 00:23:10.000
I mean, I have to have OrbStack stuff

00:23:10.000 --> 00:23:12.000
on the server as well, right?

00:23:12.000 --> 00:23:14.000
- No, it will manage.

00:23:14.000 --> 00:23:22.000
It is a transparent API or CLI to the Docker CLI.

00:23:22.000 --> 00:23:23.000
- Oh, okay.

00:23:23.000 --> 00:23:27.000
- So if you just install this, then you can go to your command line

00:23:27.000 --> 00:23:30.000
and type Docker build whatever,

00:23:30.000 --> 00:23:32.000
and it'll download and do all the things.

00:23:32.000 --> 00:23:34.000
But then when you ship it to production,

00:23:34.000 --> 00:23:36.000
you could have real Docker there.

00:23:36.000 --> 00:23:37.000
- Okay, okay.

00:23:37.000 --> 00:23:38.000
Yeah, I didn't understand.

00:23:38.000 --> 00:23:41.000
- It's more like, it's more, I think it's mostly around kind of,

00:23:41.000 --> 00:23:44.000
yeah, it's mostly on the desktop side of things.

00:23:44.000 --> 00:23:49.000
So it's like a simpler, lighter way to do desktop stuff.

00:23:49.000 --> 00:23:51.000
Possibly you could run it on your own.

00:23:51.000 --> 00:23:54.000
Like I said, it does have its own CLI for doing things its way,

00:23:54.000 --> 00:23:58.000
but I think people will just use it as a Docker desktop alternative.

00:23:58.000 --> 00:24:00.000
- Yeah, and it looks like it's,

00:24:00.000 --> 00:24:04.000
the business and commercial use pricing

00:24:04.000 --> 00:24:09.000
is slightly cheaper than Docker desktop right now.

00:24:09.000 --> 00:24:11.000
So there's benefit there.

00:24:11.000 --> 00:24:12.000
- That's right.

00:24:12.000 --> 00:24:15.000
I didn't remember that Docker had gone commercial on that side as well.

00:24:15.000 --> 00:24:17.000
So that makes them more comparable, right?

00:24:17.000 --> 00:24:19.000
As opposed to, yeah, there's this other free thing.

00:24:19.000 --> 00:24:21.000
- It's not terrible though.

00:24:21.000 --> 00:24:25.000
I mean, like I just, we just had to re-up our Docker at work

00:24:25.000 --> 00:24:29.000
and it's what, I think I paid 300 bucks for five seats per year.

00:24:29.000 --> 00:24:30.000
- That's not bad.

00:24:30.000 --> 00:24:31.000
Yeah, that's not bad.

00:24:31.000 --> 00:24:33.000
Not when it's not your money, it's fine.

00:24:33.000 --> 00:24:34.000
- It's not my money.

00:24:34.000 --> 00:24:37.000
- It's easier to spend not your money.

00:24:37.000 --> 00:24:39.000
- Yeah.

00:24:39.000 --> 00:24:43.000
So yeah, I love not your money spending,

00:24:43.000 --> 00:24:46.000
but anyway, pretty cool.

00:24:46.000 --> 00:24:48.000
I'll look forward to checking that out.

00:24:48.000 --> 00:24:51.000
I actually think it'd be fun to have one of those Zima cubes.

00:24:51.000 --> 00:24:52.000
- I do too.

00:24:52.000 --> 00:24:53.000
I really consider it.

00:24:53.000 --> 00:24:56.000
Wouldn't it be awesome to just have all those cool apps running

00:24:56.000 --> 00:24:59.000
plus, you know, a hundred terabytes of storage.

00:24:59.000 --> 00:25:02.000
- Yeah, so it's like the cloud, but it's at home.

00:25:02.000 --> 00:25:04.000
So it's just topped in.

00:25:04.000 --> 00:25:07.000
- It's more like fog.

00:25:07.000 --> 00:25:08.000
It's way lower down.

00:25:08.000 --> 00:25:10.000
- It's fog.

00:25:10.000 --> 00:25:13.000
It's personal cloud fog.

00:25:13.000 --> 00:25:15.000
- Personal fog.

00:25:15.000 --> 00:25:16.000
- That's nice.

00:25:16.000 --> 00:25:18.000
Okay, cool.

00:25:18.000 --> 00:25:21.000
Okay, so that's some good news.

00:25:21.000 --> 00:25:25.000
And the next step, I don't know if this is good news or bad news.

00:25:25.000 --> 00:25:26.000
It depends on your perspective.

00:25:26.000 --> 00:25:31.000
So I'd like to talk about GitHub Copilot

00:25:31.000 --> 00:25:35.000
and other assisted AI stuff.

00:25:35.000 --> 00:25:41.000
So Visual Studio Magazine came out with this article called

00:25:41.000 --> 00:25:47.000
"New GitHub Copilot Research Finds Downward Pressure on Code Quality."

00:25:47.000 --> 00:25:54.000
So the question really was kind of if I'm using coding with Copilot,

00:25:54.000 --> 00:25:59.000
if I'm using Copilot to help me write some stuff,

00:25:59.000 --> 00:26:06.000
is the Copilot kind of like having a junior developer?

00:26:06.000 --> 00:26:09.000
- Is it more intern or is it more senior dev?

00:26:09.000 --> 00:26:11.000
- Yeah, is it more intern or more senior dev?

00:26:11.000 --> 00:26:16.000
And so the result was--

00:26:16.000 --> 00:26:19.000
or their question was, is it more senior dev

00:26:19.000 --> 00:26:24.000
or more akin to the just jointed work of a short-term contractor?

00:26:24.000 --> 00:26:26.000
Which I thought that was appropriate

00:26:26.000 --> 00:26:29.000
because a contractor might be very skilled,

00:26:29.000 --> 00:26:30.000
but they don't really care about--

00:26:30.000 --> 00:26:32.000
they might not care about maintenance too much.

00:26:32.000 --> 00:26:35.000
- Yeah, exactly.

00:26:35.000 --> 00:26:37.000
- So-- - Yeah, the technical debt is not a problem

00:26:37.000 --> 00:26:38.000
when you're done next week.

00:26:38.000 --> 00:26:41.000
- Yeah, and you don't have to-- yeah.

00:26:41.000 --> 00:26:46.000
One of the best ways to not deal with legacy code is switch jobs.

00:26:46.000 --> 00:26:51.000
Anyway, the answer is summarized--

00:26:51.000 --> 00:26:55.000
of this white paper is summarized by

00:26:55.000 --> 00:27:00.000
"We find disconcerting trends for maintainability.

00:27:00.000 --> 00:27:03.000
Code churn, which is the percentage of lines

00:27:03.000 --> 00:27:06.000
that are reverted or updated less than two weeks

00:27:06.000 --> 00:27:10.000
after being authored, is projected to double in 2024

00:27:10.000 --> 00:27:14.000
as compared to 2021, pre-AI baseline.

00:27:14.000 --> 00:27:17.000
We further find that the percentage of added code

00:27:17.000 --> 00:27:20.000
and copy-pasted code is increasing

00:27:20.000 --> 00:27:24.000
in proportion to updated, deleted, and moved.

00:27:24.000 --> 00:27:27.000
Code-- in this regard, AI-generated code

00:27:27.000 --> 00:27:31.000
resembles an iterant contributor prone to violating

00:27:31.000 --> 00:27:35.000
the dryness"-- don't repeat yourself--

00:27:35.000 --> 00:27:37.000
"of the repositories visited."

00:27:37.000 --> 00:27:40.000
So this isn't that surprising to me,

00:27:40.000 --> 00:27:42.000
but it's interesting that there was a study done

00:27:42.000 --> 00:27:46.000
by GetClear, and also interesting that it was,

00:27:46.000 --> 00:27:48.000
you know, printed in Visual Studio Magazine,

00:27:48.000 --> 00:27:51.000
but I don't know if this is--

00:27:51.000 --> 00:27:55.000
I guess the magazine probably doesn't have any ties

00:27:55.000 --> 00:28:02.000
to Microsoft or GitHub, but anyway, interesting.

00:28:02.000 --> 00:28:05.000
Indeed. So Bart out in the audience

00:28:05.000 --> 00:28:07.000
has a different analogy I'd like to adapt.

00:28:07.000 --> 00:28:09.000
"This is not junior or senior. It's a parrot

00:28:09.000 --> 00:28:11.000
that recycles what it found on the web."

00:28:11.000 --> 00:28:14.000
So I'm thinking more stack overflow, copy-and-paste action

00:28:14.000 --> 00:28:17.000
type of stuff here. And Grant says,

00:28:17.000 --> 00:28:19.000
"I read this too. The research makes sense."

00:28:19.000 --> 00:28:22.000
Sounds right, but "Copilot has benefits of senior devs

00:28:22.000 --> 00:28:24.000
like applying good patterns faster."

00:28:24.000 --> 00:28:27.000
Yeah, which is pretty interesting.

00:28:27.000 --> 00:28:30.000
There was some comment in the article that

00:28:30.000 --> 00:28:33.000
essentially stuff still got done faster,

00:28:33.000 --> 00:28:38.000
or at least got to something working faster.

00:28:38.000 --> 00:28:43.000
It's just that people often go back later

00:28:43.000 --> 00:28:45.000
and modify and refactor the code.

00:28:45.000 --> 00:28:48.000
And that's not necessarily bad, but, you know.

00:28:48.000 --> 00:28:52.000
I get the sense that Copilot is very focused on

00:28:52.000 --> 00:28:56.000
"What prompt did you give me? I'm going to do that."

00:28:56.000 --> 00:28:59.000
Rather than "I understand what your entire project is.

00:28:59.000 --> 00:29:02.000
I've seen all 200 files. I've thought that through."

00:29:02.000 --> 00:29:06.000
Now in that context, the answer to your question is X.

00:29:06.000 --> 00:29:09.000
Rather than Y. Right? I don't think it does that.

00:29:09.000 --> 00:29:13.000
I think it would be a very high level of token usage

00:29:13.000 --> 00:29:15.000
that it would have to take into account.

00:29:15.000 --> 00:29:18.000
I think it probably just goes like, "Alright, well,

00:29:18.000 --> 00:29:21.000
you asked me a sentence. Here's the answer."

00:29:21.000 --> 00:29:22.000
Python.

00:29:22.000 --> 00:29:24.000
Yeah. I actually want to play with it more.

00:29:24.000 --> 00:29:26.000
I haven't really played with Copilot too much.

00:29:26.000 --> 00:29:28.000
It's not something I can use at work,

00:29:28.000 --> 00:29:32.000
but on personal projects, I think it'd be fun to use it more.

00:29:32.000 --> 00:29:36.000
But we're still...

00:29:36.000 --> 00:29:41.000
I mean, it seems like ChatGPT is kind of old now,

00:29:41.000 --> 00:29:43.000
and Copilot is really old.

00:29:43.000 --> 00:29:48.000
But really, we're just starting to use these tools in development.

00:29:48.000 --> 00:29:50.000
Like they said, pre-2021.

00:29:50.000 --> 00:29:54.000
So it's still only a couple of years that we have under our belt

00:29:54.000 --> 00:29:56.000
working with these things.

00:29:56.000 --> 00:30:00.000
And I think that the tools can get better.

00:30:00.000 --> 00:30:03.000
And I'm looking forward to being able...

00:30:03.000 --> 00:30:07.000
I both worry about the developers that are going to lose jobs

00:30:07.000 --> 00:30:08.000
and stuff because of this,

00:30:08.000 --> 00:30:12.000
but I also think that the tools will probably get better

00:30:12.000 --> 00:30:16.000
like you said, if it can look at your entire project and say,

00:30:16.000 --> 00:30:20.000
"Hey, in this context, this is the right call.

00:30:20.000 --> 00:30:22.000
You're repeating something.

00:30:22.000 --> 00:30:24.000
You already implemented that.

00:30:24.000 --> 00:30:27.000
Let's call this function instead."

00:30:27.000 --> 00:30:28.000
That would be great.

00:30:28.000 --> 00:30:34.000
And also, if we could have AI tools to help maybe keep a style similar

00:30:34.000 --> 00:30:39.000
or just a general philosophy similar around a project,

00:30:39.000 --> 00:30:42.000
I think there's room for that once it gets there.

00:30:42.000 --> 00:30:45.000
Yeah, I wouldn't be surprised to see that happen.

00:30:45.000 --> 00:30:47.000
Yeah. All right.

00:30:47.000 --> 00:30:49.000
Extra time?

00:30:49.000 --> 00:30:50.000
Extra, extra.

00:30:50.000 --> 00:30:51.000
Oh, yeah.

00:30:51.000 --> 00:30:56.000
So my extras are like, did you know that pytest 8 is out?

00:30:56.000 --> 00:30:58.000
pip install -u.

00:30:58.000 --> 00:30:59.000
pip install -u.

00:30:59.000 --> 00:31:04.000
But I also, if pytest is one of those things

00:31:04.000 --> 00:31:07.000
that you've always been thinking about doing,

00:31:07.000 --> 00:31:10.000
head on over to courses.pythontest.com,

00:31:10.000 --> 00:31:14.000
and you can learn it really fast using a course.

00:31:14.000 --> 00:31:17.000
Or you can grab the book, of course.

00:31:17.000 --> 00:31:18.000
Yeah, excellent.

00:31:18.000 --> 00:31:20.000
Yeah, that's very exciting.

00:31:20.000 --> 00:31:21.000
Do you have any extras?

00:31:21.000 --> 00:31:25.000
I do have a couple things I want to quickly give a shout-out to.

00:31:25.000 --> 00:31:27.000
One, this has been around for plenty long,

00:31:27.000 --> 00:31:29.000
although it's changed behind the scenes,

00:31:29.000 --> 00:31:33.000
not in a way anyone would necessarily notice, but it has.

00:31:33.000 --> 00:31:35.000
And I want to encourage people to join our newsletter.

00:31:35.000 --> 00:31:38.000
If you go to pythonbytes.fm, right below the hero image,

00:31:38.000 --> 00:31:40.000
there's a thing that says newsletter.

00:31:40.000 --> 00:31:42.000
If you go to newsletter, you go over there.

00:31:42.000 --> 00:31:44.000
It says, "Become a friend of the show."

00:31:44.000 --> 00:31:46.000
Put your information in there.

00:31:46.000 --> 00:31:50.000
This is actually a revamp, just part of my work that I did

00:31:50.000 --> 00:31:55.000
with ListMonk, the private self-hosted email stuff moving away

00:31:55.000 --> 00:31:56.000
from MailChimp and others.

00:31:56.000 --> 00:31:59.000
We talked about that last week, two weeks ago,

00:31:59.000 --> 00:32:01.000
some number of weeks ago.

00:32:01.000 --> 00:32:04.000
And that means it doesn't go anywhere.

00:32:04.000 --> 00:32:07.000
We don't share it with anyone, but Brian and I are planning

00:32:07.000 --> 00:32:10.000
some fun stuff and trying to do more with newsletters

00:32:10.000 --> 00:32:12.000
and reaching out and connecting with you all.

00:32:12.000 --> 00:32:15.000
So we would love for you to go to pythonbytes.fm,

00:32:15.000 --> 00:32:17.000
click on "Newsletter," and put your information in there.

00:32:17.000 --> 00:32:21.000
We won't share it, but we'll try to make it worth your while.

00:32:21.000 --> 00:32:26.000
But we also haven't emailed a lot on it yet in the past.

00:32:26.000 --> 00:32:31.000
So when we start using it, don't think that we bought your name

00:32:31.000 --> 00:32:34.000
off some list, that we're just starting to use it more.

00:32:34.000 --> 00:32:36.000
Yes, absolutely.

00:32:36.000 --> 00:32:38.000
It drives me crazy when people mark--they'll come sign up

00:32:38.000 --> 00:32:40.000
for your newsletter, and then they'll mark it as spam,

00:32:40.000 --> 00:32:43.000
which means other people have a harder time getting it.

00:32:43.000 --> 00:32:46.000
It's like you typed in your information into there,

00:32:46.000 --> 00:32:48.000
and then you mark it as an unsubscribe.

00:32:48.000 --> 00:32:50.000
Just please use the unsubscribe.

00:32:50.000 --> 00:32:51.000
Just use the unsubscribe.

00:32:51.000 --> 00:32:53.000
Yeah, I actually wrote a ton of software.

00:32:53.000 --> 00:32:56.000
I have a whole separate Docker thing running that monitors

00:32:56.000 --> 00:32:58.000
for people marking stuff as spam because there's ways

00:32:58.000 --> 00:33:01.000
that you can receive hooks about that information

00:33:01.000 --> 00:33:04.000
and automatically unsubscribe people if they do that,

00:33:04.000 --> 00:33:05.000
even if they don't unsubscribe.

00:33:05.000 --> 00:33:07.000
But, you know, it's kind of a sense that damage is still

00:33:07.000 --> 00:33:08.000
done a little bit.

00:33:08.000 --> 00:33:10.000
Email is a complete nightmare.

00:33:10.000 --> 00:33:13.000
All right, let's get away from email because it makes me upset.

00:33:13.000 --> 00:33:17.000
All right, so Pydantic.

00:33:17.000 --> 00:33:18.000
Pydantic's awesome.

00:33:18.000 --> 00:33:24.000
Sydney Runkle, who works at the Pydantic company,

00:33:24.000 --> 00:33:28.000
was on Talk Python recently, released a brand-new version,

00:33:28.000 --> 00:33:32.000
version 2.6.0, and Samuel Colvin said this is probably

00:33:32.000 --> 00:33:36.000
the biggest, most important release since 2.0.

00:33:36.000 --> 00:33:41.000
If you scroll through the release notes for Pydantic 2.6,

00:33:41.000 --> 00:33:44.000
there is a lot going on here.

00:33:44.000 --> 00:33:47.000
And even just the new contributors is massive.

00:33:47.000 --> 00:33:51.000
But apparently a ton of speedup, some other things going on here

00:33:51.000 --> 00:33:53.000
that you can check out.

00:33:53.000 --> 00:33:57.000
So if you're using Pydantic, everything's excellent.

00:33:57.000 --> 00:34:03.000
Just no more Python 3.7 because we've already had the

00:34:03.000 --> 00:34:05.000
thanks and goodbye to Python 3.7.

00:34:05.000 --> 00:34:10.000
We're on to 3.8 as the minimum reasonable Python these days.

00:34:10.000 --> 00:34:11.000
Cool, though, huh?

00:34:11.000 --> 00:34:12.000
Yeah, very cool.

00:34:12.000 --> 00:34:14.000
A lot of contributors.

00:34:14.000 --> 00:34:16.000
There's a lot going on here.

00:34:16.000 --> 00:34:17.000
It's a popular library.

00:34:17.000 --> 00:34:19.000
Like, if we go over here and we see, like, okay,

00:34:19.000 --> 00:34:21.000
how many things depend on it.

00:34:21.000 --> 00:34:27.000
Where's the used by 318,000 projects?

00:34:27.000 --> 00:34:29.000
It lists one, two, three, four, five.

00:34:29.000 --> 00:34:32.000
It lists, like, six, and it says plus, as in there's more.

00:34:32.000 --> 00:34:34.000
It says plus 317,946.

00:34:34.000 --> 00:34:37.000
Like, that's not really totally representative.

00:34:37.000 --> 00:34:39.000
But, okay, I understand the UI.

00:34:39.000 --> 00:34:41.000
Anyway, yeah, it's used by a lot of people.

00:34:41.000 --> 00:34:44.000
Let's use it by more projects than there's stars.

00:34:44.000 --> 00:34:47.000
So some people are using it and don't like it, apparently.

00:34:47.000 --> 00:34:50.000
Yeah, come on, star this up, people.

00:34:50.000 --> 00:34:53.000
The only reason you don't see a star for me is I'm not logged in.

00:34:53.000 --> 00:34:57.000
All right, and finally, I wrote a new essay called

00:34:57.000 --> 00:34:59.000
Use Custom Search Engines Way More.

00:34:59.000 --> 00:35:02.000
This is not DuckDuckGo versus Google versus Bing,

00:35:02.000 --> 00:35:07.000
but rather if you use a proper browser like Vivaldi or Firefox

00:35:07.000 --> 00:35:11.000
or even Chrome, although.

00:35:11.000 --> 00:35:14.000
Anyway, you can go and set custom search engines

00:35:14.000 --> 00:35:15.000
for all sorts of cool stuff.

00:35:15.000 --> 00:35:17.000
Like, one I set was PyPI, Brian.

00:35:17.000 --> 00:35:20.000
So if I go to my address bar, I don't know if I've done it

00:35:20.000 --> 00:35:22.000
on my streaming one here.

00:35:22.000 --> 00:35:24.000
Let me see.

00:35:24.000 --> 00:35:25.000
No, only my proper one.

00:35:25.000 --> 00:35:28.000
This is like a separate user account over here.

00:35:28.000 --> 00:35:31.000
But I could go and just type PyPI space pytest,

00:35:31.000 --> 00:35:36.000
and it will search using PyPI.org's search results

00:35:36.000 --> 00:35:40.000
directly for pytest or whatever it is you type there.

00:35:40.000 --> 00:35:42.000
I didn't know you could do this.

00:35:42.000 --> 00:35:43.000
Isn't this awesome?

00:35:43.000 --> 00:35:47.000
So if you want to search Unsplash for stockholders,

00:35:47.000 --> 00:35:51.000
just type U space and you type the thing, or SO space,

00:35:51.000 --> 00:35:53.000
you directly search on Stack Overflow.

00:35:53.000 --> 00:35:57.000
So instead of searching for it, oh, I was looking for Stack Overflow.

00:35:57.000 --> 00:36:00.000
So you scroll through until you find the result, and you go over.

00:36:00.000 --> 00:36:03.000
And you're just like, boom, just like a super short or GH for GitHub

00:36:03.000 --> 00:36:08.000
to search only repositories, not users or whatever you want to type in.

00:36:08.000 --> 00:36:09.000
Incredibly easy.

00:36:09.000 --> 00:36:11.000
So that's my essay and my quick little--

00:36:11.000 --> 00:36:13.000
So that's not built in already.

00:36:13.000 --> 00:36:18.000
You have to-- well, it's supported, but you have to configure it on your browser?

00:36:18.000 --> 00:36:19.000
You have to type.

00:36:19.000 --> 00:36:20.000
Yeah, you have to type.

00:36:20.000 --> 00:36:25.000
Basically, you go to Vivaldi search,

00:36:25.000 --> 00:36:27.000
and then you find-- just go enter a new search engine.

00:36:27.000 --> 00:36:28.000
Or there's ways to do it in Firefox.

00:36:28.000 --> 00:36:29.000
There's a way to do it in Chrome.

00:36:29.000 --> 00:36:30.000
They're all different.

00:36:30.000 --> 00:36:31.000
Okay.

00:36:31.000 --> 00:36:33.000
But then you just figure out-- if you just search a site,

00:36:33.000 --> 00:36:37.000
like if you search Stack Overflow, you'll see it's stackoverflow.com/search

00:36:37.000 --> 00:36:40.000
?q=some string.

00:36:40.000 --> 00:36:44.000
And so you just put %s there and say that's the search engine.

00:36:44.000 --> 00:36:45.000
Okay.

00:36:45.000 --> 00:36:48.000
I think I'll do a PB for Python bytes.

00:36:48.000 --> 00:36:50.000
Oh, you know what?

00:36:50.000 --> 00:36:55.000
I'm feeling like we could totally do this.

00:36:55.000 --> 00:36:57.000
I mean, the URL's right up there.

00:36:57.000 --> 00:36:58.000
Yeah?

00:36:58.000 --> 00:36:59.000
Yeah, why not?

00:36:59.000 --> 00:37:00.000
Yeah, skip one step.

00:37:00.000 --> 00:37:01.000
Beautiful.

00:37:01.000 --> 00:37:03.000
Anyway, that's my set of extras.

00:37:03.000 --> 00:37:04.000
Very cool.

00:37:04.000 --> 00:37:06.000
Thanks.

00:37:06.000 --> 00:37:08.000
Well, how about funny stuff?

00:37:08.000 --> 00:37:10.000
This one's quick and short.

00:37:10.000 --> 00:37:12.000
It's a picture, but you don't need to know anything about the picture.

00:37:12.000 --> 00:37:15.000
It's just a lawyer arguing a case.

00:37:15.000 --> 00:37:16.000
Hey, Brian.

00:37:16.000 --> 00:37:23.000
He says, "Your Honor, my client didn't know they were pushing to the main branch."

00:37:23.000 --> 00:37:24.000
That's funny.

00:37:24.000 --> 00:37:25.000
Yeah, that's it.

00:37:25.000 --> 00:37:27.000
Didn't know I was pushing to the main branch.

00:37:27.000 --> 00:37:28.000
This is my defense.

00:37:28.000 --> 00:37:31.000
I'm sorry I took down the website during Black Friday.

00:37:31.000 --> 00:37:34.000
I thought it was my fork.

00:37:34.000 --> 00:37:35.000
That's funny.

00:37:35.000 --> 00:37:37.000
Yeah, how often have you, like--

00:37:37.000 --> 00:37:41.000
Well, I guess you don't do this too much, but it's a three-day weekend.

00:37:41.000 --> 00:37:46.000
I want to make sure that I have my stuff pushed to the central repo.

00:37:46.000 --> 00:37:47.000
So push.

00:37:47.000 --> 00:37:48.000
Because you're working at home, right?

00:37:48.000 --> 00:37:50.000
You want to sync it back up or whatever.

00:37:50.000 --> 00:37:53.000
Yeah, but make sure you're on a branch.

00:37:53.000 --> 00:37:54.000
Mm-hmm.

00:37:54.000 --> 00:37:59.000
So, okay, we were talking about junior versus senior a little bit on AI stuff.

00:37:59.000 --> 00:38:03.000
So I wanted to share a little picture also.

00:38:03.000 --> 00:38:08.000
I saw this on Mastodon.

00:38:08.000 --> 00:38:11.000
Junior versus senior developer.

00:38:11.000 --> 00:38:13.000
Junior-- it's a timeline thing.

00:38:13.000 --> 00:38:18.000
So the junior developer working on project encompasses the entire time.

00:38:18.000 --> 00:38:24.000
Senior developer, finding the motivation to start takes up like 90%, 80% of the time,

00:38:24.000 --> 00:38:27.000
and then actually doing it at the end.

00:38:27.000 --> 00:38:29.000
And the total time is equal.

00:38:29.000 --> 00:38:30.000
[laughs]

00:38:30.000 --> 00:38:31.000
Yeah.

00:38:31.000 --> 00:38:32.000
Yeah, that's amazing.

00:38:32.000 --> 00:38:34.000
I would have altered it to make the senior--

00:38:34.000 --> 00:38:37.000
the total time is a little bit less.

00:38:37.000 --> 00:38:38.000
It's just-- yeah.

00:38:38.000 --> 00:38:43.000
Yeah, and the junior needs a little bit of finding the motivation, but just a tiny bit.

00:38:43.000 --> 00:38:44.000
Yeah.

00:38:44.000 --> 00:38:45.000
[laughs]

00:38:45.000 --> 00:38:46.000
It's still a good one.

00:38:46.000 --> 00:38:48.000
Anyway.

00:38:48.000 --> 00:38:49.000
Cool.

00:38:49.000 --> 00:38:53.000
Well, thanks again for-- oops-- such a great episode.

00:38:53.000 --> 00:38:55.000
Good to talk to you this week.

00:38:55.000 --> 00:38:58.000
It's good to have everybody showing up for the live show.

00:38:58.000 --> 00:38:59.000
Thank you very much.

00:38:59.000 --> 00:39:02.000
If you want to-- what's that link again?

00:39:02.000 --> 00:39:05.000
If people want to go watch the live show--

00:39:05.000 --> 00:39:07.000
pythonbytes.fm/live.

00:39:07.000 --> 00:39:08.000
Yeah.

00:39:08.000 --> 00:39:09.000
All right.

00:39:09.000 --> 00:39:10.000
Cool.

00:39:10.000 --> 00:39:13.000
Plus, if you just go to pythonbytes.fm, it's right at the top.

00:39:13.000 --> 00:39:14.000
There.

00:39:14.000 --> 00:39:15.000
Yeah.

00:39:15.000 --> 00:39:16.000
Thanks a lot.

00:39:16.000 --> 00:39:17.000
We make it easy.

00:39:17.000 --> 00:39:18.000
We make it easy for people.

00:39:18.000 --> 00:39:19.000
Yeah.

00:39:19.000 --> 00:39:20.000
All right.

00:39:20.000 --> 00:39:21.000
See you next week.

00:39:21.000 --> 00:39:22.000
Bye, all.

