WEBVTT

00:00:00.639 --> 00:00:05.220
Welcome, everybody. Welcome, Michael. Another wonderful episode of Python Bytes.

00:00:05.580 --> 00:00:11.520
Can't wait to get started. So let's just jump in. Thanks for everybody for showing up.

00:00:13.300 --> 00:00:17.740
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:18.440 --> 00:00:24.040
This is episode 437. I can't believe that. Recorded June 23rd, 2025.

00:00:24.840 --> 00:00:25.600
And I am Brian Okken.

00:00:26.240 --> 00:00:26.940
And I'm Michael Kennedy.

00:00:27.640 --> 00:01:05.900
and this episode is sponsored by Posit so check out that section later in the episode we really appreciate it if you'd like to send us items or comment on the show you can reach all of us the links to our socials on BlueSky and Mastodon are in the show notes so check those out and if you'd like to sometime join us live or at least watch the show even later since they're all up later You can head over to pythonbytes.fm/live and find out where all the videos are or schedule to watch us or hang out with us.

00:01:06.020 --> 00:01:11.460
We do watch the chat and sometimes take questions from there or extra comments.

00:01:11.940 --> 00:01:15.280
And that is Mondays at 10 a.m. usually, 10 a.m. Pacific time.

00:01:16.820 --> 00:01:22.140
Also, finally, please go over to pythonbytes.fm and sign up for the newsletter.

00:01:22.180 --> 00:01:35.580
we're putting a lot of work into this to try to make this a useful resource for you, not just the links to the topics but some of the background information and it's just more than just the show notes so check it out

00:01:36.740 --> 00:01:39.280
They won't know until they subscribe, Ryan Yeah,

00:01:39.350 --> 00:01:53.940
you just I mean, you can always delete it we don't sell your name or anything or spam you so might as well sign up and try it So speaking of I guess Python stuff Michael, do you want to kick us off with the first topic?

00:01:54.480 --> 00:01:58.740
I have a meta topic, a topic of topics, if you will.

00:01:59.720 --> 00:02:08.140
The Python Language Summit was held at PyCon this year back in May, I guess May 14th in Pittsburgh, Pennsylvania.

00:02:09.200 --> 00:02:11.000
However, why are we talking about this now?

00:02:11.220 --> 00:02:29.000
because Seth Michael Larson, who is the, I don't know, his title exam, I messed it up, sorry, Seth, security developer in residence at the PSF for Python, was the official note-taker, blogger, eyes of the community sort of thing.

00:02:29.780 --> 00:02:43.620
And they just, he just published on June 12th, the Python Language Summit 2025 write-up, which is a write-up of the whole event and the 10 or so talks that were given there.

00:02:44.480 --> 00:02:51.420
So you get some really interesting looks into where the core developers are focusing, what they're considering for the future.

00:02:51.860 --> 00:02:58.680
Most of this stuff is forward-looking, or at least if it's not 100% forward-looking, it's like, hey, we should be doing this.

00:02:58.800 --> 00:03:01.380
It's talking about problems that need to be solved in the future, you know?

00:03:01.700 --> 00:03:01.900
Yeah.

00:03:02.560 --> 00:03:08.160
So I actually interviewed Seth over at Talk Python.

00:03:08.290 --> 00:03:10.180
This will be out in a couple of weeks.

00:03:10.270 --> 00:03:15.180
The live stream, like ours, is also available here at the links on Talk Python.

00:03:15.270 --> 00:03:17.300
So people can't wait for the edited version.

00:03:17.470 --> 00:03:18.360
They can check that out.

00:03:19.880 --> 00:03:26.800
But just to give you a sense of what was out there, some of the topics included how do we make breaking changes less painful.

00:03:27.460 --> 00:03:36.960
That was Itamar Oren from Meta talked about, Like when you move from, say, Python 3.11 to 3.13 or something like that, what broke?

00:03:37.420 --> 00:03:46.940
When you have millions of lines of Python like Meta does and that's executing at scale, maybe things that might seem minor are inconsequential to the rest of us.

00:03:47.120 --> 00:03:52.180
Like all of a sudden, that 5% performance change here made a big difference one way or the other.

00:03:52.300 --> 00:03:53.220
Like that kind of stuff, right?

00:03:54.860 --> 00:03:57.560
And it talks about non-obvious problems.

00:03:57.920 --> 00:04:08.180
For example, if you want to learn about something that was taken out, there's a problem because part of a standard library was removed.

00:04:08.720 --> 00:04:11.360
Well, the documentation was also removed.

00:04:12.200 --> 00:04:15.640
So it's like, how do you find the thing that was documented but it's no longer there?

00:04:16.600 --> 00:04:23.900
You can go back in history to the different versions of Python docs, but the default is latest, which basically 404s, which is weird.

00:04:25.620 --> 00:04:26.620
So like that kind of stuff, right?

00:04:27.420 --> 00:04:28.680
That's a

00:04:28.680 --> 00:04:31.600
decent idea just to like leave it in for versions.

00:04:32.100 --> 00:04:33.600
Just make

00:04:33.600 --> 00:04:35.920
the background like red or yellow or something.

00:04:36.040 --> 00:04:36.940
This thing is dead.

00:04:37.580 --> 00:04:40.040
If you're viewing it, stop viewing it.

00:04:40.220 --> 00:04:40.960
It's going to hurt your eyes.

00:04:43.419 --> 00:04:44.980
There was a whole series.

00:04:45.020 --> 00:05:00.720
I would say a third of this entire conversation was on async, I.O., threading, concurrency, crazy ideas about like how do we deal with, What can we do to make it obvious at runtime that you're running into threading problems?

00:05:01.940 --> 00:05:11.200
Because just last week, Brian, you talked about this, the experimental tag came off of the free-threaded Python, so now it's really free-threaded.

00:05:11.660 --> 00:05:12.320
It's truly free.

00:05:13.460 --> 00:05:15.600
But there's a lot of, well, what are the consequences of that?

00:05:15.740 --> 00:05:16.460
How do we build for that?

00:05:16.460 --> 00:05:17.880
And what can we do to make this easier?

00:05:19.460 --> 00:05:20.220
I'll put that in quotes.

00:05:21.460 --> 00:05:31.420
So there was an uncontentious talk about contention by Mark Shannon, which is like concurrency, what can we do to make things more immutable so that we can share them more easily and so on.

00:05:31.820 --> 00:05:38.360
There's the state of free-threaded Python by Matt Page, fearless concurrency by three folks, Matthew, Tobias, and Freedhoff.

00:05:39.980 --> 00:05:42.060
Anything else on threading?

00:05:43.100 --> 00:05:44.080
Sort of, not really.

00:05:44.620 --> 00:05:46.440
But, you know, out of 10 talks, that's quite a bit.

00:05:47.020 --> 00:05:47.140
Yeah.

00:05:47.600 --> 00:05:49.640
There was some docs updates by Marietta.

00:05:50.180 --> 00:05:56.440
The challenges of the steering council, like basically how has it been going the last couple of years have a steering council and not a BDFL.

00:05:57.900 --> 00:05:58.760
And that was by Eric Snow.

00:05:58.910 --> 00:05:59.560
It's pretty interesting.

00:05:59.770 --> 00:06:01.180
Like, hey, good news.

00:06:01.190 --> 00:06:01.900
Things are still working.

00:06:02.360 --> 00:06:02.940
Not great news.

00:06:03.640 --> 00:06:07.280
Stuff led by a committee of volunteers goes slower than one person just goes.

00:06:07.640 --> 00:06:08.100
Sounds good.

00:06:09.120 --> 00:06:09.360
Surprise.

00:06:11.240 --> 00:06:13.900
Some packaging stuff by Barry Warsaw and Predium.

00:06:14.460 --> 00:06:14.620
Get them?

00:06:15.560 --> 00:06:18.560
Python on Mobile by Russell Keith McGee.

00:06:19.060 --> 00:06:24.680
So this is interesting in that PEPs 730 and 738 have been completed.

00:06:26.440 --> 00:06:32.120
And Russell went in front of all the core devs and said, after many years, this year I can say that Python Unmobile is there.

00:06:32.800 --> 00:06:33.240
How about that?

00:06:33.860 --> 00:06:33.980
Hmm.

00:06:35.280 --> 00:06:43.700
Now, that doesn't mean all the tooling, front-end frameworks, UI frameworks, all that kind of stuff are there for building Python apps.

00:06:44.040 --> 00:06:58.860
But CPython is now a tier three supported platform, which means the core developers as part of the continuous integration, everything of Python itself, make sure that it also builds on iOS and Android.

00:07:00.000 --> 00:07:00.580
That's what that means.

00:07:02.400 --> 00:07:02.900
Still good news.

00:07:05.820 --> 00:07:06.700
Yeah, I'm

00:07:06.700 --> 00:07:17.140
looking forward to the time where, I mean, I know that everybody is, but it'd be cool if I could just open up PS Code or Charm and write an iPhone app.

00:07:18.520 --> 00:07:19.100
I would

00:07:19.100 --> 00:07:23.440
probably practice my backflip see if I can do a backflip if that happened.

00:07:23.600 --> 00:07:24.660
That would be so awesome.

00:07:25.000 --> 00:07:25.880
It would be so good.

00:07:27.260 --> 00:07:28.260
Yeah, it would be so good.

00:07:29.500 --> 00:07:29.900
That

00:07:29.900 --> 00:07:33.480
and JavaScript frontend, like Python, PyScript frontends.

00:07:34.400 --> 00:07:34.880
Let's go.

00:07:34.880 --> 00:07:35.720
I'll hear for both of them.

00:07:36.580 --> 00:07:49.620
Speaking of which, there was an update on Pyodide and the JavaScript FFI, the language bindings that allow PyScript or Pyodide, actually specifically Pyodide, to talk to the JavaScript stuff.

00:07:49.860 --> 00:07:57.780
from Python front-end stuff, you can actually interact with JavaScript directly rather than indirectly, a little bit more clearly.

00:07:57.990 --> 00:08:15.180
And most importantly, there's slight variations in how you do this in MicroPython and Pyodide, which means you can't use interoperable code between the two in Pyodide, PyScript world, which is weird, and this is about trying to solve that amongst other things.

00:08:15.720 --> 00:08:17.780
And then finally, what do core developers want from Rust?

00:08:18.060 --> 00:08:18.860
Do people want Rust?

00:08:19.290 --> 00:08:20.180
Do they not want Rust?

00:08:21.940 --> 00:08:35.719
And if you're looking for native, probably the biggest piece of news here is that our best estimate is somewhere between a quarter and a third of all native code being uploaded to PyPI for new projects is based on Rust.

00:08:36.380 --> 00:08:36.560
That's

00:08:36.560 --> 00:08:36.840
pretty big.

00:08:38.719 --> 00:08:39.460
That is pretty big.

00:08:40.050 --> 00:08:40.180
Yeah.

00:08:43.760 --> 00:08:44.280
All right.

00:08:44.480 --> 00:08:52.660
So I think either check out the blog post or listen to the episode I did with Seth.

00:08:53.060 --> 00:08:54.660
This is good stuff to track.

00:08:55.160 --> 00:08:56.380
Okay, nice.

00:08:59.080 --> 00:09:08.620
All right, well, I'm going to change gears completely and just talk about, zoom in on one thing about Python, and that is Python properties.

00:09:10.560 --> 00:09:15.300
So Will McCoogan wrote an article called fixing Python properties.

00:09:16.220 --> 00:09:22.260
And I just thought it was an interesting take on how to get around some type checking quirks.

00:09:22.900 --> 00:09:29.380
So it starts off with talking about basically the properties are awesome and the type checkers are fine with properties.

00:09:30.060 --> 00:09:36.460
However, the type of a property is taken from the getter method.

00:09:37.680 --> 00:09:40.320
And I guess that makes sense, but there really are two.

00:09:40.580 --> 00:09:41.320
There's getter and setter.

00:09:41.540 --> 00:09:45.140
So if those types don't match, your type checker is not going to like it.

00:09:45.720 --> 00:09:48.980
And so he walks through a, and I'm like, well, why?

00:09:49.150 --> 00:09:51.920
Why would you want different types for your good or and setter?

00:09:52.460 --> 00:09:59.520
And he walks through a padding dimension example, which is, I think, I mean, he's doing textual.

00:10:00.030 --> 00:10:15.460
So a decent example of, he wanted to be able to just have somebody be able to say, hey, for my padding, There's really four values, but kind of like with CSS, if you provide one value, it's applied.

00:10:16.000 --> 00:10:16.960
I don't remember all the rules.

00:10:17.040 --> 00:10:17.820
It's applied everywhere.

00:10:18.480 --> 00:10:28.500
If you set two paddings, it'll apply to, like, distribute them appropriately, just like CSS.

00:10:29.440 --> 00:10:37.780
And so you can do basically one value, two values, or just an integer, a tuple of events of just two values.

00:10:37.920 --> 00:10:39.100
or you can provide four.

00:10:40.600 --> 00:10:42.440
And all of this should just work.

00:10:43.020 --> 00:10:50.340
And it does with Python, but you can make it work with like some, you know, with your code checking for all of those things.

00:10:50.920 --> 00:10:53.040
But with type checkers, it'll say you're doing something wrong.

00:10:53.959 --> 00:11:01.400
And he said, I could make it like type check better, but just like kind of destroy the user experience.

00:11:02.160 --> 00:11:09.860
But instead, he provides, instead of doing properties, So he just like rips out the idea of the property.

00:11:11.000 --> 00:11:14.180
In the first example, he's using the property, the decorator.

00:11:15.560 --> 00:11:20.700
But he uses what he calls a descriptor, which is, I don't know if this is a real thing.

00:11:21.040 --> 00:11:28.020
Like he talks about it as if it's like a programming construct, but I'm not familiar with it.

00:11:28.220 --> 00:11:28.320
Anyway.

00:11:28.480 --> 00:11:31.080
Yeah, I think it's part of Python, like an advanced

00:11:31.080 --> 00:11:32.620
get

00:11:32.620 --> 00:11:33.760
adder, set adder sort of thing.

00:11:34.440 --> 00:11:39.200
It's a class that has, it's just a class that defines both a get and a set method.

00:11:39.840 --> 00:11:43.420
So that's your descriptor class.

00:11:44.200 --> 00:11:47.920
And he uses that instead of a property.

00:11:48.240 --> 00:11:56.940
And that is all it takes to be able to make it work without type checkers freaking out.

00:11:57.280 --> 00:11:58.460
So that's just it.

00:12:00.480 --> 00:12:01.280
An update.

00:12:02.440 --> 00:12:04.960
Somebody, Peter, pointed out an issue.

00:12:06.500 --> 00:12:06.980
Okay, well,

00:12:07.020 --> 00:12:07.680
I haven't read that part.

00:12:09.240 --> 00:12:11.440
You know one of the problems with typing all over the place?

00:12:11.680 --> 00:12:23.060
And his thing says, look, it might be fine in my Pi, but then in VS Code, the PyLance validator understands this differently and gives you an error.

00:12:23.460 --> 00:12:33.140
One of the things that drives me utterly crazy is, like, you've got these different tooling, and they all have a slight variation of, like, that's fine, And we're like, actually, no, that's not fine.

00:12:34.080 --> 00:12:42.140
And we've got Ty, and you mentioned Pyreply coming as well, which are going to be other ones, probably have slightly different defaults.

00:12:42.580 --> 00:12:45.500
And so when you say I fixed it, like what did you fix it for?

00:12:46.140 --> 00:12:47.020
Did you fix it for all

00:12:47.020 --> 00:12:47.260
of them?

00:12:47.310 --> 00:12:48.780
Did you fix it for your editor?

00:12:49.000 --> 00:12:50.240
Did you fix it for this CI?

00:12:50.580 --> 00:12:53.900
Like there's a lot of variations, and it drives me crazy.

00:12:55.000 --> 00:12:58.540
Especially, so I just have like a couple small packages that I maintain.

00:13:00.880 --> 00:13:06.160
And I have like, you know, like PyTouchCheck is now type, has type hints around it.

00:13:06.800 --> 00:13:07.720
And that's helpful.

00:13:08.310 --> 00:13:10.500
But it's a little bit of a quirky thing.

00:13:10.800 --> 00:13:17.800
And it doesn't, it works fine on mypy, but it doesn't work on some of the others.

00:13:18.340 --> 00:13:18.920
Like Pyright

00:13:18.920 --> 00:13:19.480
or something, yeah.

00:13:19.880 --> 00:13:20.940
Yeah, about that.

00:13:21.120 --> 00:13:22.760
I'm like, well, use mypy.

00:13:22.810 --> 00:13:23.160
I don't know.

00:13:23.400 --> 00:13:25.380
But you can't really, if it's a dependent

00:13:25.380 --> 00:13:27.760
library, you really want to use that for everything.

00:13:28.480 --> 00:13:28.960
Yeah, exactly.

00:13:29.300 --> 00:13:30.960
It is a mess.

00:13:31.640 --> 00:13:32.760
I've had some stuff like that.

00:13:32.760 --> 00:13:34.400
It's like, this thing doesn't work right on PyRite.

00:13:34.480 --> 00:13:37.060
Like, okay, help me understand why I care about that.

00:13:37.620 --> 00:13:42.120
But they're like, you know, if I use it in this setup, I'm going to just get like errors.

00:13:42.380 --> 00:13:44.400
And it wasn't something super mild.

00:13:44.520 --> 00:13:47.520
It was for one of my web things.

00:13:47.740 --> 00:13:49.980
And basically the library was used as a decorator.

00:13:50.040 --> 00:13:55.380
So anything they decorate now gets like invalidated in terms of its type.

00:13:56.760 --> 00:13:58.580
I wonder if

00:13:58.580 --> 00:13:59.520
that's something now that

00:13:59.520 --> 00:13:59.900
I

00:13:59.900 --> 00:14:01.020
probably, for libraries,

00:14:02.120 --> 00:14:05.340
we should be testing against multiple type checkers and not just one.

00:14:05.360 --> 00:14:05.580
Probably.

00:14:06.100 --> 00:14:07.380
It's super annoying, but yeah, probably.

00:14:09.140 --> 00:14:14.300
And then here's the most annoying part of it was the, I think it was Pyrite.

00:14:14.380 --> 00:14:24.300
It's like Pyrite was giving errors that now the Flask view method doesn't match the type or something, but Flask was fine with it.

00:14:25.680 --> 00:14:30.320
And nobody ever, ever, ever directly calls those functions.

00:14:30.640 --> 00:14:31.720
Only Flask calls it.

00:14:32.200 --> 00:14:33.460
And so, like, here's some functions.

00:14:33.980 --> 00:14:34.680
Nobody calls them.

00:14:35.360 --> 00:14:38.900
It's affecting nobody because no one even sees the type information.

00:14:39.420 --> 00:14:39.940
Flask sees it.

00:14:40.040 --> 00:14:40.660
Flask is fine.

00:14:40.680 --> 00:14:49.060
But I still have to, like, do really complicated typing information to get the type checkers to stop giving them more.

00:14:49.120 --> 00:14:49.820
Like, are you serious?

00:14:50.980 --> 00:14:53.100
It's not getting easier because we're getting more type checkers.

00:14:54.640 --> 00:15:01.680
I thought all this was supposed to be kind of invisible and we just, we just get benefit and no cost, but until

00:15:01.680 --> 00:15:02.580
you get an issue about it.

00:15:02.800 --> 00:15:11.440
Now I appreciate that people found the issue because I did fix it, but it was, it was like a couple of hours of really complex type juggling.

00:15:12.300 --> 00:15:15.240
Oh, you're something that nobody called.

00:15:15.820 --> 00:15:15.960
Yeah.

00:15:16.020 --> 00:15:16.120
Well,

00:15:16.800 --> 00:15:18.360
I, I did the classic.

00:15:18.700 --> 00:15:23.260
 yeah, I don't use pirate, but you know, I'd accept a pull request.

00:15:23.940 --> 00:15:24.720
yeah, Exactly.

00:15:26.740 --> 00:15:46.720
One other thing, like, so rolling back just a tiny bit, like properties, if I had to say, like somebody said, Michael, what is the clumsiest, most non-intuitive, less than ideal, less readable, or just bad part of Python, the language?

00:15:47.300 --> 00:16:13.700
Properties. It's so bad. There, I could have like in separate files, maybe it made me not separate parts of files. I could say over here is a getter and then somewhere else there's some weird setter. And like why does the setter dot something, like just the at setter dot variable name of a thing I've defined before, it's just so chunky and weird and like the typing is messed.

00:16:13.840 --> 00:16:24.480
Like if you look at the way C# does this, I have probably other languages as well, it is so nice. You just public property name, you have a getter and you have a setter right in there.

00:16:26.300 --> 00:16:52.600
I know that you could create separate classes for descriptors like Will was talking about I think there might be maybe difference performance profiles for those property versus a descriptor but I would really like to see Python clean up the it doesn't have to be what C# does but something where like they go together they're obvious you're not defining it twice etc etc it would be nice wouldn't it be nice Brian?

00:16:53.300 --> 00:16:54.280
Wouldn't that be nice?

00:16:55.640 --> 00:16:56.480
You know what is nice, though?

00:16:57.160 --> 00:16:58.980
Our sponsor this week, Posit.

00:16:59.740 --> 00:17:00.620
Super excited.

00:17:01.270 --> 00:17:04.079
Let me tell you about what they're offering everyone.

00:17:05.420 --> 00:17:09.560
So this episode is brought to you by the nice folks at Posit.

00:17:10.040 --> 00:17:12.699
So Posit, originally they came out of the R space, right?

00:17:12.709 --> 00:17:19.280
They made R Studio, and they made some other things, but they really have been putting a lot of effort into Python these days, right?

00:17:19.459 --> 00:17:20.900
They've created Posit Connect.

00:17:21.900 --> 00:17:25.220
awesome way to run and host your data science stuff.

00:17:25.920 --> 00:17:34.340
They made Shiny for Python, which is like a reactive notebook, like Marimo, or a little bit like cheaper notebooks and stuff.

00:17:34.370 --> 00:17:35.340
So they're doing awesome stuff.

00:17:35.480 --> 00:17:38.180
So I'm really, really happy to have them sponsoring the show.

00:17:38.700 --> 00:17:42.640
Today, I want to focus on data science workloads and how to host them.

00:17:43.220 --> 00:17:57.400
So if you have dashboards, reports, plots, interactive web apps, all the way to custom Flask or Django apps, They have a service called Posit Connect, and Posit Connect makes it easy for data scientists to share work they built with Python.

00:17:58.300 --> 00:18:13.880
So if you've got a Streamlit app, a dashboard, Plotly, Interactive Plots, FastAPI, Quarto, just connect it to there, and their service will maintain it and connect automatically, host it, updates it for you, and so on.

00:18:14.940 --> 00:18:17.900
So you can even have it update reports on a schedule.

00:18:18.020 --> 00:18:28.280
So if you host a dashboard, You can have it rerun the data science stuff that computes the graphs and does the summaries on a cron job sort of thing on a schedule.

00:18:29.440 --> 00:18:33.640
So no reason to explain to stakeholders why the dashboard or plot stopped updating last week.

00:18:33.710 --> 00:18:36.640
You just set it up, pause it, connect, got it going.

00:18:37.560 --> 00:18:44.440
So you can focus on your data science work and leverage your skill set while connect makes you look good, keeping your code running and private.

00:18:44.980 --> 00:18:54.840
With connect, you get a private URL on your connect server, ensuring that your asset is continuously available to your shareholders, you can control which users have access to that asset.

00:18:56.740 --> 00:19:00.980
And just let Connect handle all your DevOps for you.

00:19:01.360 --> 00:19:02.140
You can share your work.

00:19:02.900 --> 00:19:03.600
Keep doing what you do best.

00:19:03.840 --> 00:19:09.660
So if you work on a data science team, you owe it to you and your org to check out Posit Connect.

00:19:10.080 --> 00:19:17.000
Just visit pythonbytes.fm/connect and get a three-month free trial and see if it's a good fit.

00:19:17.180 --> 00:19:18.740
That's pythonbytes.fm/connect.

00:19:19.320 --> 00:19:22.080
The link is in your podcast player's show notes right at the top.

00:19:23.120 --> 00:19:26.500
Thank you for Deposit for supporting Python Bytes.

00:19:28.380 --> 00:19:28.980
Yes, thank you.

00:19:32.599 --> 00:19:33.940
And a rewrite.

00:19:35.980 --> 00:19:36.280
All right.

00:19:36.400 --> 00:19:43.180
Well, next I want to talk about some complexity in your code and complexify.

00:19:43.460 --> 00:19:44.080
Complexify?

00:19:45.300 --> 00:19:48.120
It's C-O-M-P-L-E-X-I-P-Y.

00:19:48.880 --> 00:19:50.500
This is a project that's new to me.

00:19:51.140 --> 00:19:55.260
And actually, looking at the repo, it looks kind of new.

00:19:56.620 --> 00:19:58.580
It's modified in the last weeks.

00:19:59.360 --> 00:20:01.320
So I'm really kind of enjoying it.

00:20:01.480 --> 00:20:02.640
So what is Complexify?

00:20:03.020 --> 00:20:06.380
So it's an extremely fast Python.

00:20:07.160 --> 00:20:07.920
I'm quoting here.

00:20:08.420 --> 00:20:14.180
An extremely fast Python library to calculate the cognitive complexity of Python files.

00:20:14.540 --> 00:20:16.480
and it's written in Rust, just like you said.

00:20:16.920 --> 00:20:20.920
A lot of PyPI stuff going up that's written in Rust lately or written parts of it in Rust.

00:20:22.200 --> 00:20:25.040
Looks like 45% Rust, 23 Python.

00:20:25.740 --> 00:20:33.260
Anyway, so this reminded me that I should be paying attention to complexity.

00:20:33.800 --> 00:20:34.860
So I'm glad this came out.

00:20:35.780 --> 00:20:37.260
So what is cognitive complexity?

00:20:37.940 --> 00:20:41.940
Well, it's kind of like cyclomatic complexity.

00:20:42.040 --> 00:20:43.700
Do you remember cyclomatic complexity?

00:20:44.060 --> 00:20:49.100
kind of. I'm going to include a link to the Wikipedia page, but you can look it up anyway.

00:20:49.720 --> 00:21:27.120
But so I remember it from Flake 8. So Flake 8 had cyclomatic complexities and using the McCabe, I don't know, the McCabe test around it. But it would just sort of, I don't, I never used McCabe directly. I just used it with Flake 8. And now actually I'm using it with Ruff because you can, which is kind of cool, I just recently realized this, that you can pass in the rule C901 and you can do a complexity check on with your rough tests. So that's super awesome.

00:21:28.860 --> 00:21:43.720
And so this is kind of fun, but what are we looking at for cognitive complexity? Well, there's a link within here of the white paper. There's a white paper and you kind of have to, The white paper comes from Sonar Source.

00:21:43.930 --> 00:21:46.860
They do Sonar Cube, if anybody's familiar with that.

00:21:47.080 --> 00:21:48.600
It's a static analysis stuff.

00:21:49.960 --> 00:21:52.920
And I read the white paper, and I skimmed it, really.

00:21:53.460 --> 00:22:13.520
But it's actually a really easy read, talking about how the idea around it is not just giving you a number for your entire source code of how complex stuff is and where the problems are, But really looking at everything.

00:22:13.710 --> 00:22:18.960
So there's, you know, more loops, more structs, more everything.

00:22:19.660 --> 00:22:24.840
It's really a little bit different take looking at really the maintainability.

00:22:25.840 --> 00:22:38.160
So there's a discussion in the white paper talking about that cyclomatic complexity was intended to make it to measure how testable and maintainable.

00:22:38.540 --> 00:22:46.460
And the testable part comes from that the testability, like if you have multiple branches, you have to test all the branches.

00:22:46.880 --> 00:22:49.140
So more branches means more tests.

00:22:50.540 --> 00:22:58.640
That it does well, but the authors of the white paper don't really believe that it measures maintainability as well.

00:22:58.680 --> 00:22:59.780
So this is another attempt.

00:23:00.420 --> 00:23:01.760
And I think it does pretty good.

00:23:01.980 --> 00:23:04.720
And plus, it's super fast and the output is great.

00:23:05.160 --> 00:23:16.820
So I ran it on a couple of the, I ran both the rough version of the McCabe test and then this against my code, some of my code.

00:23:17.180 --> 00:23:19.700
And it came up with the same hot spots.

00:23:20.980 --> 00:23:24.240
And so I'm going to look at what the output looks like.

00:23:24.600 --> 00:23:29.200
I wish this was in color because it's in color when you're doing it on the command line.

00:23:29.820 --> 00:23:34.480
And the colors really help because it does like zero means like there's no problem here.

00:23:34.660 --> 00:23:36.220
It's not complex code.

00:23:36.900 --> 00:23:41.580
And then the numbers go up, and I think there's levels that you can set.

00:23:41.620 --> 00:23:48.180
But the defaults are fine of yellow and red for things that you really want to care about.

00:23:48.780 --> 00:23:54.560
And then by default, it lists, like you pointed at a directory, and it'll list out everything.

00:23:55.160 --> 00:23:57.160
You can just tell it to just list.

00:23:57.480 --> 00:24:00.740
You can have it just list the problem parts too.

00:24:01.220 --> 00:24:03.320
But it is kind of nice to just see the whole thing.

00:24:03.460 --> 00:24:05.280
if you've got not too large of a project.

00:24:05.470 --> 00:24:08.320
If you have a huge project, definitely just look at the problem parts.

00:24:10.040 --> 00:24:16.360
The reason why I'm really excited about this again, oh, it talks about the analysis here in the readme even.

00:24:16.640 --> 00:24:16.960
That's nice.

00:24:17.470 --> 00:24:19.860
And you can output it to a CSV file or whatever.

00:24:20.400 --> 00:24:26.020
But I did it on the command line because why would I use this?

00:24:26.220 --> 00:24:31.600
Not just as a pass fail within CI, which is a good idea to do a pass fail in CI.

00:24:32.360 --> 00:25:01.660
What I want to know is the areas of my code that probably might need refactored to be less complex, but if they're already as clean as they can be or they're that bit of code that you have that the person that wrote it is gone and you're not sure how to touch it, those are the areas to really throw some unit tests around or some subsystem tests around those areas are a good thing.

00:25:02.280 --> 00:25:15.580
anyway think about remember complexity and I like the idea of not just of thinking of cognitive or maintainability complexity this is a really cool idea I like it

00:25:16.580 --> 00:25:19.420
I am an absolute junkie for this stuff I love

00:25:19.420 --> 00:25:20.020
it so much

00:25:20.180 --> 00:25:57.360
so I'm glad glad you pointed out Christian now in the audience says great radon radon is really slow so cognitive complexity is the last thing preventing me from dropping flex eight like eight. Very cool. And I used to, I mean, when I say used to, I'm talking like 25 years ago, used this tool called CodeRush, which was amazing. I've still not seen anything as great for an editor add-on as it did, even to this day. So good. One of the things it did though, is it had maintenance complexity, cyclomatic complexity, and I don't know if it had this

00:25:57.340 --> 00:25:58.520
cognitive but

00:25:58.520 --> 00:26:16.600
it had like line count was an option and next to every in your editor next to every function or type in like a class or something it would have the you could choose like do you want the maintenance complexity or the cyclomatic complexity just sort of ambiently by your your things

00:26:16.600 --> 00:26:17.040
and

00:26:17.040 --> 00:26:26.720
you could be like or you can run an analysis say these are the seven that are like over some sort of threshold like i i don't want it over 75 for my maintenance complexity whatever that means. Yes.

00:26:27.120 --> 00:26:38.980
If people know about that, extensions like that for PyCharm and other editors, shoot us a put a comment on the YouTube video or

00:26:39.960 --> 00:26:40.840
mention us somewhere,

00:26:41.000 --> 00:26:41.560
something like that.

00:26:41.880 --> 00:26:48.840
I'll have to try it out because Complexify does have a VS Code extension. I don't know how it looks though, so I'd love to check

00:26:48.840 --> 00:26:49.000
it out.

00:26:49.000 --> 00:26:50.420
Yeah, does that just output it in the terminal

00:26:50.420 --> 00:26:51.280
or does it actually

00:26:51.280 --> 00:26:52.600
overlay it like CodeLens?

00:26:53.040 --> 00:26:54.480
Yeah, it'd be cool if it was an overlay.

00:26:57.080 --> 00:27:21.760
Pat is spreading fake news Pat Decker in the audience who's been on the show says Michael volunteers to create a VS Code extension is what I just heard we're going to edit that section out we'll just move right along here I want to talk more data science stuff let's talk Juvio J-U-V-I-O how would you say it Brian?

00:27:22.400 --> 00:27:24.660
Every one of these needs like a little, how do I pronounce this button?

00:27:25.360 --> 00:27:25.640
Who?

00:27:27.240 --> 00:27:27.600
Juvio.

00:27:27.970 --> 00:27:28.860
Yeah, is it Spanish?

00:27:28.930 --> 00:27:29.220
I don't know.

00:27:30.860 --> 00:27:34.860
So Juvio is a reproducible, dependency-aware, get-friendly Jupyter notebook.

00:27:35.120 --> 00:27:37.480
All that sounds interesting, and there's a lot of things that say that.

00:27:37.590 --> 00:27:40.320
But for me, how do I think of this?

00:27:40.440 --> 00:27:41.460
And it is in the name.

00:27:42.380 --> 00:27:48.200
It's a Jupyter notebook sort of environment that is based on uv.

00:27:48.740 --> 00:28:07.160
So one of the things I find super clunky about Jupyter Notebooks and JupyterLab and Jupyter is you can create a virtual environment, you can install Jupyter in it, you run it, and then you have to somehow go and independently outside of Jupyter register your kernel to find that virtual environment so then you can use that.

00:28:07.160 --> 00:28:09.180
I think it's just like, what?

00:28:10.340 --> 00:28:21.000
Okay, so Juvio allows you to basically run commands in your notebook to install things, right?

00:28:21.470 --> 00:28:37.080
You can actually use the script thing from uv, where you say script requires this version of Python, these versions of the dependencies, and then when you open it up, Juvio installs the dependencies automatically in an ephemeral virtual environment using uv.

00:28:38.340 --> 00:28:39.880
All of that I'm loving. How cool is that?

00:28:42.760 --> 00:28:55.980
so you can just put in you know this is what this notebook depends upon even the version of Python and if that version of Python is not on your machine you will download it and then create a virtual environment for you that is awesome

00:28:56.520 --> 00:28:57.220
that is awesome

00:28:57.760 --> 00:29:11.580
yeah it's also get friendly so notebooks are converted on the fly to script style format which is where you have the hash then percent percent so if you open it up in like PyCharm or VS Code It has cell-type behavior.

00:29:13.140 --> 00:29:15.120
This one is for the Brave.

00:29:15.490 --> 00:29:16.440
It is an early beta.

00:29:17.020 --> 00:29:20.420
It's better than early alpha, I suppose, but an early beta, so check it out.

00:29:21.740 --> 00:29:24.080
But, yeah, pretty nice.

00:29:24.800 --> 00:29:28.700
You can enable it as an extension is how you basically set it up.

00:29:30.140 --> 00:29:41.860
That reminds me a little bit of a tangent, but you know that with uv you can put those little script things at the top of your file to do your dependencies just in the file.

00:29:42.400 --> 00:29:43.740
Yeah, that's the same thing here, by the way.

00:29:44.220 --> 00:29:53.220
Yeah, I've just realized I've been going through using some of the stuff that I've built over the last many years at work.

00:29:53.800 --> 00:30:02.160
And some of the stuff, they had been little tiny little packages, and I realized that they don't need to be packages with this.

00:30:02.320 --> 00:30:08.420
They just have a couple dependencies in a single file script, and now they're back to just single file scripts again.

00:30:08.700 --> 00:30:09.180
That's cool.

00:30:09.520 --> 00:30:10.060
It's awesome.

00:30:10.090 --> 00:30:13.900
You just say uv run the script and it looks at that and says, all right, what do we need?

00:30:14.000 --> 00:30:14.540
Do we need Python?

00:30:14.860 --> 00:30:15.380
What version of Python?

00:30:15.620 --> 00:30:15.960
What dependencies?

00:30:16.980 --> 00:30:17.440
And once

00:30:17.440 --> 00:30:18.720
it's cached that stuff once, right?

00:30:18.860 --> 00:30:21.820
Once uv has cached that once, it's basically instant.

00:30:23.060 --> 00:30:23.660
Yeah, it's cool.

00:30:23.800 --> 00:30:24.800
Yeah, yeah, super cool.

00:30:25.120 --> 00:30:28.580
So yeah, that's pretty much it.

00:30:28.580 --> 00:30:30.200
If that sounds interesting to you, check it out.

00:30:30.360 --> 00:30:31.240
Let us know what you think.

00:30:33.540 --> 00:30:42.480
somehow making Jupyter Notebooks work automatically with ephemeral environments in Pythons managed by uv speaks to me.

00:30:42.480 --> 00:30:42.860
I like it.

00:30:43.200 --> 00:30:43.640
Yeah.

00:30:45.180 --> 00:30:49.820
Oh, and Pat Decker suggests, again, alias py equals uv run.

00:30:50.800 --> 00:30:51.080
Perfect.

00:30:51.150 --> 00:30:52.620
So you can just pie your side pie.

00:30:53.180 --> 00:30:56.160
Doesn't work on Windows because there's already a pie, but alias itself doesn't work.

00:30:56.320 --> 00:30:56.800
So you know what?

00:30:57.400 --> 00:30:58.920
You have to create a batch file or something.

00:30:58.970 --> 00:30:59.260
I don't know.

00:31:00.140 --> 00:31:00.880
I can't get it.

00:31:01.080 --> 00:31:03.680
I've been using Bash on Windows for decades.

00:31:04.780 --> 00:31:05.820
You are such a rebel.

00:31:09.599 --> 00:31:16.520
So one quick extra for me is that testing code is not dead, but it looks like it.

00:31:16.800 --> 00:31:22.820
So testing code, the last episode of it came out May 7th, and check the calendar.

00:31:23.200 --> 00:31:24.280
It's June 23rd.

00:31:24.420 --> 00:31:24.920
What's up there?

00:31:25.460 --> 00:31:27.220
What's up is kind of some life.

00:31:27.600 --> 00:31:30.820
There's a lot going on outside of my day job.

00:31:30.960 --> 00:31:34.100
and Python Bytes that is pushing this out.

00:31:34.120 --> 00:31:38.400
But I have some great interviews already ready.

00:31:39.240 --> 00:31:40.000
They just need edited.

00:31:40.520 --> 00:31:41.680
So stay tuned.

00:31:41.860 --> 00:31:43.360
There will be great stuff out.

00:31:43.380 --> 00:31:49.980
I just interviewed Sebastian Ramirez recently, and there's some great interviews coming up.

00:31:50.200 --> 00:31:52.220
So stick with it.

00:31:54.320 --> 00:31:55.700
Be patient with me, please.

00:31:56.520 --> 00:31:57.520
Anyway, we'll be back.

00:31:59.280 --> 00:32:01.620
But I never let Python Bytes drop.

00:32:01.960 --> 00:32:04.340
It's weekly, no matter what, because of my goal.

00:32:05.540 --> 00:32:06.380
Python Bytes is awesome.

00:32:07.020 --> 00:32:07.120
Yeah.

00:32:07.540 --> 00:32:08.080
Do you have any extras?

00:32:09.600 --> 00:32:11.940
I thought no, but I just realized I'll throw something out there.

00:32:12.000 --> 00:32:20.600
Okay, so later this week up in Washington, almost in Canada, there's the largest off-road motorcycle rally in North America, I believe.

00:32:21.200 --> 00:32:26.280
The TourTech Rally, which is like 1,500 people going to this campground and doing joint rides and stuff.

00:32:26.800 --> 00:32:29.340
I'm going to be there from Thursday to Sunday.

00:32:29.750 --> 00:32:31.260
If people are there, shoot me a text.

00:32:31.660 --> 00:32:33.980
Come say hi or go riding together or something like that.

00:32:34.800 --> 00:32:34.960
All right.

00:32:35.060 --> 00:32:36.400
It's in plain Washington?

00:32:36.650 --> 00:32:36.780
It's

00:32:36.780 --> 00:32:37.820
not fancy Washington?

00:32:37.940 --> 00:32:38.060
No.

00:32:39.300 --> 00:32:41.080
This is like basic camping.

00:32:41.220 --> 00:32:43.700
Well, can you put it on your motorcycle and then camp from there for four days?

00:32:44.060 --> 00:32:44.400
It's

00:32:44.400 --> 00:32:44.520
going to be

00:32:44.520 --> 00:32:44.860
very plain.

00:32:45.020 --> 00:32:47.180
It's actually right by Leavenorth, which I think is kind of a cool place.

00:32:47.960 --> 00:32:48.080
Cool.

00:32:49.040 --> 00:32:49.360
Oh, yeah.

00:32:50.020 --> 00:32:50.700
That's it for my extra.

00:32:52.060 --> 00:32:54.100
So shall we do a trio of jokes?

00:32:55.020 --> 00:32:55.280
Sure.

00:32:56.820 --> 00:32:57.120
All right.

00:32:59.600 --> 00:33:07.480
So someone sent this in, and I'm so sorry I forgot who sent it in, but I found it in multiple places, and it was really great that they did.

00:33:08.480 --> 00:33:09.220
Programmers are human.

00:33:09.990 --> 00:33:12.100
I think we've covered stuff from him before.

00:33:12.700 --> 00:33:16.540
This amazing German guy who does really good jokes.

00:33:16.760 --> 00:33:19.020
I think we talked about the Vibe coding one time.

00:33:19.380 --> 00:33:19.440
Yeah.

00:33:19.560 --> 00:33:19.680
Remember

00:33:19.680 --> 00:33:19.900
that?

00:33:20.350 --> 00:33:21.680
Senior engineer tries Vibe coding.

00:33:21.880 --> 00:33:22.520
That was so good.

00:33:23.880 --> 00:33:28.360
So he's back with the interview with the 0.1x.

00:33:28.600 --> 00:33:31.700
People heard the 10x engineer, like the 0.1x engineer.

00:33:32.440 --> 00:33:32.600
Full.

00:33:32.710 --> 00:33:33.740
I found the full episode.

00:33:35.280 --> 00:33:35.400
The

00:33:35.400 --> 00:33:35.860
10x.

00:33:35.860 --> 00:33:36.400
What do you think of it?

00:33:37.400 --> 00:33:38.160
This was hilarious.

00:33:38.510 --> 00:33:43.020
I immediately, as soon as I watched this, I texted you also and said, have you seen this?

00:33:44.240 --> 00:33:45.680
Like, yeah, I watched it half an hour ago.

00:33:45.760 --> 00:33:46.160
It's so good.

00:33:46.440 --> 00:33:46.600
Yeah.

00:33:47.700 --> 00:33:49.060
We're not going to play it because I don't know.

00:33:50.090 --> 00:33:52.140
Like, it's someone else's YouTube work.

00:33:52.170 --> 00:33:53.380
We'll let them have it.

00:33:53.680 --> 00:33:56.560
But it is so good.

00:33:57.070 --> 00:33:59.360
It is certainly five minutes of time well spent.

00:33:59.430 --> 00:34:00.480
So we'll link to the YouTube video.

00:34:01.240 --> 00:34:04.600
It's got awesome comments like, yeah, the last stable release?

00:34:05.180 --> 00:34:05.500
Yeah, yeah.

00:34:05.620 --> 00:34:07.340
That was before I joined the company, wasn't it?

00:34:07.690 --> 00:34:08.620
And stuff like that.

00:34:09.520 --> 00:34:14.100
Or my job at the company is to optimize the file size of the readme.

00:34:17.060 --> 00:34:17.300
Yeah.

00:34:18.320 --> 00:34:18.440
Yeah.

00:34:19.300 --> 00:34:22.179
There's some – I've forgotten a lot of them, but there's some really good

00:34:22.179 --> 00:34:23.860
one-liners to

00:34:23.860 --> 00:34:24.120
pull out of it.

00:34:24.120 --> 00:34:24.860
You want some sweet

00:34:24.860 --> 00:34:25.440
one-liners?

00:34:25.740 --> 00:34:26.419
Yeah, here we go.

00:34:26.840 --> 00:34:27.040
This

00:34:27.040 --> 00:34:27.520
is

00:34:27.520 --> 00:34:27.820
it.

00:34:29.139 --> 00:34:31.379
And totally unrelated, I have two more.

00:34:32.020 --> 00:34:34.600
Not related to this, but I think Python relevant.

00:34:34.879 --> 00:34:48.800
Google came out with VO3, which is a way to make full film AI content, not just images, but it's images, voice, movie.

00:34:49.159 --> 00:34:50.320
It's insane.

00:34:50.720 --> 00:34:52.139
And so I've stumbled across this.

00:34:52.169 --> 00:34:59.780
Now, before you click on this and before you visit it, I must warn you, this is like kryptonite to your YouTube feed.

00:34:59.810 --> 00:35:04.020
So if you watch this, it will take days to get anything normal on your YouTube feed again.

00:35:04.200 --> 00:35:04.780
I don't know why.

00:35:05.960 --> 00:35:06.980
Do it in incognito.

00:35:07.360 --> 00:35:07.840
Just trust me.

00:35:09.000 --> 00:35:10.700
Don't make the mistake me and my daughter made.

00:35:10.800 --> 00:35:12.600
She's like, Dad, I literally got a text.

00:35:12.760 --> 00:35:14.380
Dad, you've destroyed my YouTube feed.

00:35:16.040 --> 00:35:23.880
So there's a couple of video, a couple of channels, and there's like multiple ones of these, but I'll link to a couple that are really good.

00:35:24.200 --> 00:35:30.800
There's a Bigfoot and a Yeti channel, and all these are like vlogs, like in the day of the life of

00:35:30.800 --> 00:35:32.280
Bigfoot

00:35:32.280 --> 00:35:33.160
and so on.

00:35:34.000 --> 00:35:40.320
And oh my goodness, is this so funny, and it is incredibly good.

00:35:40.440 --> 00:35:43.600
So you can only make eight-second clips, right, with this video thing?

00:35:44.660 --> 00:35:45.200
So what they do

00:35:45.200 --> 00:35:49.480
is they just make clip after clip after clip as little segments in the vlog of the life.

00:35:52.020 --> 00:35:53.700
If you haven't seen this, I think you'll be surprised.

00:35:54.580 --> 00:36:01.180
There's the Yeti Bigfoot one, which is real good, and then there's also the Day in the Life of a Stormtrooper, Adventures of Dave and Greg.

00:36:02.360 --> 00:36:10.560
These are so funny, and you know they're made with Python somewhere along the way because of all the AI stuff and the VO and whatnot.

00:36:12.620 --> 00:36:16.680
But just remember, incognito or you don't blame me.

00:36:18.960 --> 00:36:20.540
Yeah, I'll probably just use the Python Bytes account.

00:36:21.680 --> 00:36:22.120
Yeah, exactly.

00:36:23.100 --> 00:36:26.440
We'll have nothing but these things in there.

00:36:26.540 --> 00:36:32.380
Now, it's really funny and it's just one more AI thing in this world that we live in that is just a weird time.

00:36:32.500 --> 00:36:33.480
But it's super creative too.

00:36:33.740 --> 00:36:37.100
People really are being creative with it.

00:36:37.460 --> 00:36:38.000
Okay, and

00:36:38.000 --> 00:36:50.840
I got to just say that wherever you stand on AI, stuff like being able to make movies around with Stormtrooper costumes and stuff, that is out of the realm of most people's

00:36:50.840 --> 00:36:51.760
budget.

00:36:53.120 --> 00:37:07.720
But the ability, I'm sure it's fairly time-consuming to put these things together, but now it is in the realm of somebody that just has some good writing, some good sense of humor to be able to put these things together.

00:37:09.040 --> 00:37:10.340
There's definitely good writing here.

00:37:11.020 --> 00:37:12.120
You've got to do the script and stuff.

00:37:12.820 --> 00:37:16.180
Comments are like, this is better content than Disney has done in the last few years.

00:37:16.320 --> 00:37:17.620
It's really funny.

00:37:18.620 --> 00:37:20.120
It's surprisingly well done.

00:37:20.680 --> 00:37:22.640
And the AI is...

00:37:23.060 --> 00:37:24.400
We live in weird times, Ryan.

00:37:24.560 --> 00:37:25.120
That's all I can say.

00:37:25.440 --> 00:37:35.140
In eight second clips, pay attention to the last action movie you've ever watched that doesn't stick with the same camera angle for more than a few seconds anyway.

00:37:35.890 --> 00:37:36.260
Yeah, yeah.

00:37:36.600 --> 00:37:37.680
It doesn't seem that out of place.

00:37:38.000 --> 00:37:38.160
All right.

00:37:38.540 --> 00:37:38.980
There's your jokes.

00:37:39.340 --> 00:37:41.640
Seriously, relevant joke.

00:37:41.920 --> 00:37:43.520
Check out the 0.1x engineer.

00:37:43.740 --> 00:37:44.220
That's amazing.

00:37:44.760 --> 00:37:45.480
Yeah, definitely.

00:37:46.200 --> 00:37:48.880
Over lunch, maybe grab the logs.

00:37:50.480 --> 00:37:52.680
I'm really warning you, don't do it on your regular account.

00:37:55.480 --> 00:37:55.660
Yeah.

00:37:56.160 --> 00:37:56.340
All right.

00:37:57.540 --> 00:37:57.620
Well,

00:37:57.740 --> 00:37:59.000
that's it for today.

00:37:59.420 --> 00:38:01.520
A wonderful episode with you again, Michael.

00:38:02.120 --> 00:38:02.420
Thank you.

00:38:03.140 --> 00:38:03.560
Yes, thank you.

00:38:03.660 --> 00:38:03.880
As well.

00:38:03.990 --> 00:38:07.520
And before we sign out, this is not something we've been doing lately, Brian, but maybe we should have more.

00:38:07.580 --> 00:38:18.400
I just want to encourage people who are watching the YouTube channel here, either live or in the future at some point, please subscribe to the channel.

00:38:18.900 --> 00:38:19.340
Like the video.

00:38:19.780 --> 00:38:20.680
Help us spread the word.

00:38:21.160 --> 00:38:21.520
Yeah.

00:38:21.710 --> 00:38:24.240
I guess we don't do call to action too much.

00:38:25.640 --> 00:38:27.300
But like the videos, that would be great.

00:38:27.540 --> 00:38:31.340
But I also – we can grow the podcast more.

00:38:31.520 --> 00:38:32.240
Share it with a friend.

00:38:32.420 --> 00:38:37.060
If you've got some new interns starting, say, hey, you should keep up on Python much more.

00:38:37.160 --> 00:38:38.560
You should check out this podcast.

00:38:39.280 --> 00:38:39.400
Yeah.

00:38:41.520 --> 00:38:43.480
It's staying up on Python in easy mode.

00:38:43.940 --> 00:38:47.040
You've got a car rider, you're mowing the lawn, you're doing the dishes, hit play.

00:38:48.380 --> 00:38:48.780
It's all good.

00:38:49.220 --> 00:38:49.540
Good to learn.

00:38:50.240 --> 00:38:50.460
Bye.

