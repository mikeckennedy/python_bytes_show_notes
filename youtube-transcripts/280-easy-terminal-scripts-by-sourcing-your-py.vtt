WEBVTT

00:00:00.000 --> 00:00:06.640
Hello YouTube. Hello Brian. Hello Pat. Hey. Hello. Hey, welcome to the channel. Everyone


00:00:06.640 --> 00:00:12.240
out in the live stream. Thanks for being here. As always, we love having you around. Now,


00:00:12.240 --> 00:00:18.520
let's go ahead and kick this off. Hello and welcome to Python Bytes where we deliver Python


00:00:18.520 --> 00:00:26.760
news and headlines directly to your earbuds. This is episode 280 recorded April 19th, 2022.


00:00:26.760 --> 00:00:28.040
I'm Michael Kennedy.


00:00:28.040 --> 00:00:29.680
- And I'm Brian Okken.


00:00:29.680 --> 00:00:30.840
- And I'm Pat Decker.


00:00:30.840 --> 00:00:34.400
- Welcome Pat, it's great to have you here.


00:00:34.400 --> 00:00:36.040
- Well, thanks for having me on.


00:00:36.040 --> 00:00:37.520
- Yeah, it's really exciting.


00:00:37.520 --> 00:00:39.480
You and I were chatting a bit about


00:00:39.480 --> 00:00:44.280
less new programming languages a bit over email


00:00:44.280 --> 00:00:47.520
and yeah, it'd be fun to just have you come on


00:00:47.520 --> 00:00:50.320
and share some of the things that you're passionate about


00:00:50.320 --> 00:00:51.160
and whatnot.


00:00:51.160 --> 00:00:52.240
Tell people a bit about yourself.


00:00:53.880 --> 00:00:57.140
I got started with computers way back in the day.


00:00:57.140 --> 00:01:00.600
High school, I had an Apple II computer at school.


00:01:00.600 --> 00:01:04.480
Eventually got a Commodore 64 at home.


00:01:04.480 --> 00:01:09.040
I did Pascal on cards at Iowa State University.


00:01:09.040 --> 00:01:13.520
And then did a data processing program


00:01:13.520 --> 00:01:16.200
at Kirkwood in Cedar Rapids.


00:01:16.200 --> 00:01:18.920
And got my first job out of there


00:01:18.920 --> 00:01:21.280
about 30 years ago or so.


00:01:21.280 --> 00:01:28.480
So I've worked mainframe and PC, COBOL, C,


00:01:28.480 --> 00:01:31.640
and a little bit of Python here and there.


00:01:31.640 --> 00:01:32.480
Fantastic.


00:01:32.480 --> 00:01:36.080
And it sounds like you're doing DevOps type things today.


00:01:36.080 --> 00:01:39.000
Yeah, the company has, like many,


00:01:39.000 --> 00:01:41.720
gone from on site in their own data center


00:01:41.720 --> 00:01:47.120
to 80% or so running on AWS.


00:01:47.120 --> 00:01:50.180
And so I get to share your same frustration


00:01:50.180 --> 00:01:53.200
with the AWS interface in Python.


00:01:53.200 --> 00:01:55.400
It's not always obvious how that works.


00:01:55.400 --> 00:01:58.980
- It's updated every week.


00:01:58.980 --> 00:02:01.420
And I know the way it is updated every week


00:02:01.420 --> 00:02:04.200
has got to be some code gen is running somewhere


00:02:04.200 --> 00:02:05.300
that regenerates it.


00:02:05.300 --> 00:02:09.760
And it's just never quite discoverable, right?


00:02:09.760 --> 00:02:11.320
It's fine once you get it working


00:02:11.320 --> 00:02:14.520
as long as you don't touch it or have to understand it.


00:02:14.520 --> 00:02:16.560
Which is not the sign of a fantastic API,


00:02:16.560 --> 00:02:17.720
but it's cool.


00:02:17.720 --> 00:02:19.580
So you get to work in AWS.


00:02:19.580 --> 00:02:22.840
Cool, well, great to have you here.


00:02:22.840 --> 00:02:26.000
Now, Brian, before we jump over to your first topic,


00:02:26.000 --> 00:02:29.080
I just wanna say this episode is brought to you by Mergify.


00:02:29.080 --> 00:02:32.600
I am psyched about what these guys are offering.


00:02:32.600 --> 00:02:33.800
Mergify is super cool.


00:02:33.800 --> 00:02:37.260
It's all about automating Git collaboration.


00:02:37.260 --> 00:02:39.120
And I have a lot to say about Git,


00:02:39.120 --> 00:02:43.960
but I wanna start with pie because I love pie.


00:02:43.960 --> 00:02:45.300
Banana cream pie is my favorite.


00:02:45.300 --> 00:02:46.180
I'll take a cheesecake.


00:02:46.180 --> 00:02:47.380
Does that count as a pie?


00:02:47.380 --> 00:02:48.660
Is that what we're talking about?


00:02:48.660 --> 00:02:52.160
- No, we're talking about HTT, HTT pie.


00:02:52.160 --> 00:02:54.220
And the--


00:02:54.220 --> 00:02:55.340
- Still a good pie.


00:02:55.340 --> 00:02:57.340
- Yeah, the website actually lists


00:02:57.340 --> 00:02:59.960
and their read me tells you exactly how they wish you


00:02:59.960 --> 00:03:01.980
to pronounce it right off the bat.


00:03:01.980 --> 00:03:04.500
H-A-T-T pie.


00:03:04.500 --> 00:03:06.860
Anyway, it's a command, it's a really cool tool.


00:03:06.860 --> 00:03:08.260
It's a command line tool.


00:03:08.260 --> 00:03:11.500
And I think we've covered it before for,


00:03:11.500 --> 00:03:14.940
for interacting with, it's especially useful for APIs.


00:03:14.940 --> 00:03:18.380
So one of the first things I install on any server on my Mac,


00:03:18.380 --> 00:03:20.700
if I get a new one, like straight up, this thing is fantastic.


00:03:20.700 --> 00:03:21.740
Yeah. Yeah.


00:03:21.740 --> 00:03:24.220
And it's so fantastic that it had 60.


00:03:24.220 --> 00:03:25.820
This is what I want to cover.


00:03:25.820 --> 00:03:27.380
I'm sorry to laugh.


00:03:27.380 --> 00:03:30.700
It had 60, 54000 stars on GitHub,


00:03:30.700 --> 00:03:32.700
and then it lost it.


00:03:32.700 --> 00:03:34.900
Didn't then it didn't.


00:03:34.900 --> 00:03:37.300
So what a what a cliff.


00:03:37.300 --> 00:03:40.420
So how many does it have now?


00:03:40.420 --> 00:03:42.260
Right now, if we look, it's got.


00:03:42.260 --> 00:03:44.380
Oh, my gosh, it's way back.


00:03:44.380 --> 00:03:48.540
Yeah, actually this morning when I looked, it was just 16.0 thousand.


00:03:48.540 --> 00:03:52.780
So it's gotten a hundred stars just as I was researching this.


00:03:52.780 --> 00:03:59.580
So anyway, the that this one of the I just I guess I want to shout out to these guys of


00:03:59.580 --> 00:04:03.740
it's a cool tool. If you're doing APIs, check it out.


00:04:03.740 --> 00:04:08.140
And also, if you've started before restart because they they deserve it.


00:04:08.700 --> 00:04:14.280
And what happened was they accidentally put their repo private for,


00:04:14.280 --> 00:04:17.380
somebody was trying to make it private,


00:04:17.380 --> 00:04:20.300
make some other test repo private.


00:04:20.300 --> 00:04:23.540
And they accidentally put the main one private.


00:04:23.540 --> 00:04:27.260
And if you're even private for a second, you lose all your stars.


00:04:27.260 --> 00:04:31.420
So, warning, don't make your public stuff private.


00:04:31.420 --> 00:04:33.420
Oops.


00:04:33.420 --> 00:04:35.420
Wow, that is...


00:04:35.420 --> 00:04:36.420
Yeah.


00:04:36.420 --> 00:04:38.140
It's a good warning. It's a great tool.


00:04:38.140 --> 00:04:39.580
but a good warning.


00:04:39.580 --> 00:04:40.980
It does have a danger zone.


00:04:40.980 --> 00:04:42.380
Danger zone, this is going to happen,


00:04:42.380 --> 00:04:47.060
but unfortunately, the warning is equivalent


00:04:47.060 --> 00:04:51.740
if there's zero followers and zero people interested in it,


00:04:51.740 --> 00:04:53.940
or you have one of the most popular things on GitHub.


00:04:53.940 --> 00:04:56.820
Like, it should be like, this is super duper important.


00:04:56.820 --> 00:04:58.860
You're going to lose 54,000 GitHub stars.


00:04:58.860 --> 00:04:59.700
Are you doing it?


00:04:59.700 --> 00:05:01.740
- Yeah.


00:05:01.740 --> 00:05:05.540
Well, and also, I mean, if you work with a lot of GitHub


00:05:05.540 --> 00:05:11.060
repos and you're like, like maybe you made something public for a talk and then you're


00:05:11.060 --> 00:05:14.500
making it private because I don't know, the talks over or whatever.


00:05:14.500 --> 00:05:17.140
Or you just don't want to maintain something like I'm just done with this thing.


00:05:17.140 --> 00:05:21.140
Yeah, if you're working with it a lot, maybe you've seen that warning so many times that


00:05:21.140 --> 00:05:24.100
you're not really reading it anymore and double checking.


00:05:24.100 --> 00:05:27.940
So I guess this is just a warning, double check it.


00:05:27.940 --> 00:05:31.100
If you see that warning box, make sure you're on the right repo.


00:05:31.100 --> 00:05:32.100
Indeed.


00:05:32.100 --> 00:05:33.940
- Pat, what do you think about this?


00:05:33.940 --> 00:05:36.820
- Yeah, it's pretty tragic.


00:05:36.820 --> 00:05:39.500
It's kind of like those end user license agreements


00:05:39.500 --> 00:05:40.660
where we all see them so often,


00:05:40.660 --> 00:05:43.420
they just automatically click, I think.


00:05:43.420 --> 00:05:44.620
- Yeah, exactly.


00:05:44.620 --> 00:05:46.460
The confirmation dialogues and stuff.


00:05:46.460 --> 00:05:48.580
You're like, well, I have to copy this and paste that there.


00:05:48.580 --> 00:05:49.460
I just can't continue.


00:05:49.460 --> 00:05:51.100
So I'm gonna just, you know,


00:05:51.100 --> 00:05:52.940
instead of warning danger, people,


00:05:52.940 --> 00:05:55.060
I think people see, I want to get my work done.


00:05:55.060 --> 00:05:57.380
So click here to get my work done.


00:05:57.380 --> 00:05:59.260
And then, oh no, what happened?


00:05:59.260 --> 00:06:00.100
- Yeah.


00:06:00.100 --> 00:06:03.440
- Yeah, well, Brian, I believe you have


00:06:03.440 --> 00:06:06.000
at least helped a little bit.


00:06:06.000 --> 00:06:08.340
David out in the audience says, "Starring it right now."


00:06:08.340 --> 00:06:09.880
- Oh, I forgot to start also.


00:06:09.880 --> 00:06:10.820
- You better get in there and start.


00:06:10.820 --> 00:06:12.120
Boom, all right, plus two.


00:06:12.120 --> 00:06:14.080
I was gonna start myself,


00:06:14.080 --> 00:06:15.700
but I'm not logged in in my browsers


00:06:15.700 --> 00:06:16.980
for some reason on this account.


00:06:16.980 --> 00:06:19.460
So no starring, I have to start it later.


00:06:19.460 --> 00:06:20.300
- Okay.


00:06:20.300 --> 00:06:23.740
- Also, a little bit out of order,


00:06:23.740 --> 00:06:26.140
but I wanna also just cover this other thing.


00:06:26.140 --> 00:06:30.340
We are generally not 100% of the time


00:06:30.340 --> 00:06:31.380
'cause there's still a little bit


00:06:31.380 --> 00:06:33.420
of long tail stuff happening,


00:06:33.420 --> 00:06:35.980
but generally we're moving our live stream


00:06:35.980 --> 00:06:38.080
of the recording, the one where David said,


00:06:38.080 --> 00:06:39.100
I'm starting right now.


00:06:39.100 --> 00:06:41.060
Thanks for being here, David.


00:06:41.060 --> 00:06:43.420
That recording is now moving to Tuesdays


00:06:43.420 --> 00:06:44.820
at noon Pacific time.


00:06:44.820 --> 00:06:48.220
So if people want to come be part of the live show,


00:06:48.220 --> 00:06:51.420
see the video version, as well as, you know,


00:06:51.420 --> 00:06:53.820
just make comments or whatever,


00:06:53.820 --> 00:06:55.780
not Wednesday, Tuesdays in general,


00:06:55.780 --> 00:06:57.500
but check for the next week, couple of weeks,


00:06:57.500 --> 00:07:00.060
'cause it is still like some pre-scheduled stuff.


00:07:00.060 --> 00:07:04.860
- Yeah, so how do people find out when it's coming up next?


00:07:04.860 --> 00:07:07.660
- I would say the best way is just to subscribe


00:07:07.660 --> 00:07:09.860
to the YouTube channel and then, you know,


00:07:09.860 --> 00:07:13.340
I hate to say it, but push the little bell for notifications


00:07:13.340 --> 00:07:15.620
so it'll tell you like, hey, this thing's coming up


00:07:15.620 --> 00:07:17.660
and it'll let you know that we're gone live.


00:07:17.660 --> 00:07:18.740
- Yep.


00:07:18.740 --> 00:07:21.020
- Yep, I don't have a great better way.


00:07:21.020 --> 00:07:22.180
Maybe we could do a mailing list,


00:07:22.180 --> 00:07:23.980
but it's a little tricky.


00:07:24.860 --> 00:07:29.820
But usually stick around on Tuesday Pacific, Tuesday noon Pacific will be recording.


00:07:29.820 --> 00:07:33.260
Yeah, if you check YouTube once a week, you'll see it's scheduled pretty far out and then you


00:07:33.260 --> 00:07:36.860
can get a reminder for just that one thing. You don't have to always get messages. Okay.


00:07:36.860 --> 00:07:44.140
So this is a fun one. You mentioned some of the older programming languages.


00:07:44.140 --> 00:07:51.180
When I was in college, I was studying chemical chemistry, chemical engineering, math, all these


00:07:51.180 --> 00:07:54.860
different things. And as part of that, they said, you're gonna have to take a programming


00:07:54.860 --> 00:07:58.700
class. I'm like, super, what's it gonna be like C++ or something? Remember, this is like


00:07:58.700 --> 00:08:04.620
early 90s. So that was a good choice. And they said, no, you're going to take the most important


00:08:04.620 --> 00:08:08.220
programming class you're ever going to take in your career, you're going to learn Fortran. I'm


00:08:08.220 --> 00:08:13.500
like, wait a minute. No, no, no, I don't want to do that. That doesn't sound like the most important


00:08:13.500 --> 00:08:20.380
thing ever. But nonetheless, that was one of my first courses I had to take. I went to a couple


00:08:20.380 --> 00:08:24.980
Eventually got to take some C++, but Fortran was where it started.


00:08:24.980 --> 00:08:30.700
So here is an article that was recommended to us by, let me make sure I get the name


00:08:30.700 --> 00:08:33.260
right, Galin Swint.


00:08:33.260 --> 00:08:38.420
And Galin is a PhD researcher and said, "Hey, here's a really interesting article.


00:08:38.420 --> 00:08:46.340
The article I don't believe is by them, but it's about the sort of, I think it was something


00:08:46.340 --> 00:08:47.940
in their lab they were talking about.


00:08:47.940 --> 00:08:51.660
It says, the title is the counterintuitive rise of Python


00:08:51.660 --> 00:08:53.200
and scientific computing.


00:08:53.200 --> 00:08:54.300
Why is it counterintuitive?


00:08:54.300 --> 00:08:55.740
Because Fortran is fast,


00:08:55.740 --> 00:08:57.780
and what you want to do is process lots of data


00:08:57.780 --> 00:08:59.860
and you wanna do it fast.


00:08:59.860 --> 00:09:02.400
So here's a really interesting story


00:09:02.400 --> 00:09:06.460
of people who were doing older stuff like Fortran and C,


00:09:06.460 --> 00:09:08.020
sort of were forced in,


00:09:08.020 --> 00:09:12.340
coerced into doing a little bit of Python


00:09:12.340 --> 00:09:16.180
and accidentally made their supercomputer stuff go


00:09:16.180 --> 00:09:18.960
like a hundred times faster or something in Python


00:09:18.960 --> 00:09:21.320
rather than in C or rather than Fortran,


00:09:21.320 --> 00:09:24.500
which is a counterintuitive result, right?


00:09:24.500 --> 00:09:25.460
- Yes, it is.


00:09:25.460 --> 00:09:28.860
- Yeah, so I think that I'll cover a few details


00:09:28.860 --> 00:09:31.180
of this article, just pull out some highlights.


00:09:31.180 --> 00:09:32.700
But the reason I'm bringing an article


00:09:32.700 --> 00:09:33.900
instead of like a tool or something is


00:09:33.900 --> 00:09:37.140
I think this would be interesting for people to share


00:09:37.140 --> 00:09:38.540
if they're in a situation where they're like,


00:09:38.540 --> 00:09:40.660
oh, Python is no good, this is such a slow language.


00:09:40.660 --> 00:09:43.540
It's like doing math is like a thousand times slower than C.


00:09:43.540 --> 00:09:44.800
I don't actually know what it is,


00:09:44.800 --> 00:09:46.560
but it's a lot, lot slower, right?


00:09:46.560 --> 00:09:49.640
So it goes through here and here's a couple of things.


00:09:49.640 --> 00:09:52.560
It says, "In our laboratory, a polarizing debate rages


00:09:52.560 --> 00:09:54.680
since has been raging since 2010.


00:09:54.680 --> 00:09:55.960
Summarized by the question,


00:09:55.960 --> 00:09:59.600
why are more and more time-critical scientific computations


00:09:59.600 --> 00:10:01.800
formerly performed in Fortran


00:10:01.800 --> 00:10:04.460
now written in Python, a slower language?"


00:10:04.460 --> 00:10:06.880
Oh, Python, a slower language.


00:10:06.880 --> 00:10:09.280
So Python does have the reputation of being slow


00:10:09.280 --> 00:10:11.760
and especially around math.


00:10:11.760 --> 00:10:14.280
I think it's honestly, it's earned it.


00:10:14.280 --> 00:10:18.040
Unfortunately, I would really love, sidebar,


00:10:18.040 --> 00:10:22.100
I would really love to see Python adopt something along the lines of


00:10:22.100 --> 00:10:26.200
value types that can be boxed back to pi longs.


00:10:26.200 --> 00:10:30.560
So like, on the stack locally, it's a number, but it gets complicated.


00:10:30.560 --> 00:10:33.560
But I think that would actually solve a ton of stuff. Anyway.


00:10:33.560 --> 00:10:37.880
So yeah, plain Python is slower than Fortran,


00:10:37.880 --> 00:10:40.440
but when you do computational stuff,


00:10:40.440 --> 00:10:42.240
you don't do plain Python.


00:10:42.240 --> 00:10:46.360
what you do is you do NumPy, SciPy, Dask.


00:10:46.360 --> 00:10:47.900
All of these things are written in C


00:10:47.900 --> 00:10:50.900
with a thin coordination layer in Python


00:10:50.900 --> 00:10:53.180
as part of its API, right?


00:10:53.180 --> 00:10:58.180
So here's like some graph you can see on the article


00:10:58.180 --> 00:11:00.700
and it says, here's like, you know,


00:11:00.700 --> 00:11:03.920
10 to the one versus 10 to the minus two.


00:11:03.920 --> 00:11:05.220
So what is that a hundred times faster


00:11:05.220 --> 00:11:09.920
if you use Cython or Numba or NumPy and so on.


00:11:09.920 --> 00:11:11.820
So pretty interesting.


00:11:11.820 --> 00:11:13.820
And it also shows, guess what?


00:11:13.820 --> 00:11:18.500
Shocker, new alert, Fortran is somewhat less popular


00:11:18.500 --> 00:11:19.460
than it used to be.


00:11:19.460 --> 00:11:21.540
(both laughing)


00:11:21.540 --> 00:11:22.380
- Oh no.


00:11:22.380 --> 00:11:28.220
- So there's an interesting story


00:11:28.220 --> 00:11:32.540
of this project nicknamed Projector,


00:11:32.540 --> 00:11:37.480
written around 2010, so modern in quotes, Fortran,


00:11:37.480 --> 00:11:39.620
by somebody named Bob.


00:11:39.620 --> 00:11:41.260
So Bob worked on this project,


00:11:41.260 --> 00:11:43.680
And there's apparently-- let me find the numbers here.


00:11:43.680 --> 00:11:48.640
It's like 1.5 thousand lines of Fortran code.


00:11:48.640 --> 00:11:49.960
So a lot of Fortran code.


00:11:49.960 --> 00:11:52.040
Like a lot of complicated math bits.


00:11:52.040 --> 00:11:55.680
The kind you kind of don't want to touch after it works.


00:11:55.680 --> 00:11:59.160
And it's going to do--


00:11:59.160 --> 00:12:01.320
it's trying to project something.


00:12:01.320 --> 00:12:04.320
Thousands of multiple-- multi-perforations


00:12:04.320 --> 00:12:09.520
of combustion liner onto a 3D complex shape made


00:12:09.520 --> 00:12:11.620
of millions of polygons.


00:12:11.620 --> 00:12:13.240
So that might get complicated


00:12:13.240 --> 00:12:15.340
when you multiply those numbers together.


00:12:15.340 --> 00:12:19.940
And it turns out Bob soon discovered


00:12:19.940 --> 00:12:22.820
that he was gonna use NumPy


00:12:22.820 --> 00:12:25.440
and this thing called a KD tree


00:12:25.440 --> 00:12:27.120
'cause there's a bunch of people working lab


00:12:27.120 --> 00:12:27.960
that only knew Python.


00:12:27.960 --> 00:12:29.560
So like here's a Python version you can use.


00:12:29.560 --> 00:12:32.400
And he thought this is gonna be rough.


00:12:32.400 --> 00:12:34.360
It's gonna be super slow.


00:12:34.360 --> 00:12:38.400
So he went and ran it after he got it done.


00:12:38.400 --> 00:12:41.880
And the Fortran version ran in six hours and 30 minutes,


00:12:41.880 --> 00:12:44.040
the Python version, four minutes.


00:12:44.040 --> 00:12:47.480
- Wow.


00:12:47.480 --> 00:12:48.800
- So what happened?


00:12:48.800 --> 00:12:51.880
Is Python a hundred times faster?


00:12:51.880 --> 00:12:53.800
No, Python is easier to work with


00:12:53.800 --> 00:12:57.280
and has many more built-in algorithms and data structures.


00:12:57.280 --> 00:13:02.280
This KD tree thing was using a different data structure,


00:13:02.280 --> 00:13:06.460
is a different data structure that has O log N complexity,


00:13:06.460 --> 00:13:10.300
Whereas the Fortran version, because it's so hard to write code in,


00:13:10.300 --> 00:13:13.300
they just wrote it in the simplest way they can make it work.


00:13:13.300 --> 00:13:19.020
So O N and when you have billions times, millions times, thousands, O log N wins,


00:13:19.020 --> 00:13:20.660
even if it's in a slower language.


00:13:20.660 --> 00:13:26.120
So if the conclusion was Fortran would have been faster if they had implemented


00:13:26.120 --> 00:13:30.500
this KD tree algorithm in it, but the people working on the, they're like


00:13:30.500 --> 00:13:36.140
computational scientists, not PhD data structure type people, right?


00:13:36.140 --> 00:13:39.980
Like they're already super busy just trying to do the programming


00:13:39.980 --> 00:13:45.180
and not working on like cutting edge data structures and optimizations and stuff.


00:13:45.180 --> 00:13:47.980
So it was very easy to try one new thing in Python,


00:13:47.980 --> 00:13:51.380
which would have been very hard in Fortran and it was a big win.


00:13:51.380 --> 00:13:54.980
So anyway, I think the debate about performance,


00:13:54.980 --> 00:13:57.780
developer speed versus execution speed,


00:13:57.780 --> 00:13:59.540
but also straight up execution speed,


00:13:59.540 --> 00:14:03.820
I think it's really interesting in Python and it's hard to be nuanced enough.


00:14:03.820 --> 00:14:06.820
It's always there's some little interesting wrinkle like this.


00:14:06.820 --> 00:14:12.740
Yeah, and if you really you're going to hand code everything anyway,


00:14:12.740 --> 00:14:15.240
it's also faster in assembly.


00:14:15.240 --> 00:14:16.540
So just write assembly.


00:14:16.540 --> 00:14:21.740
Here's a note that, yeah,


00:14:21.740 --> 00:14:25.320
I've always wanted to stick to this one process or I really loved forever.


00:14:25.320 --> 00:14:29.740
But this is interesting. I like it.


00:14:29.740 --> 00:14:32.020
But it's sort of reads like a commercial.


00:14:33.180 --> 00:14:35.780
So Bob was programming scientific computing,


00:14:35.780 --> 00:14:38.260
and he was not happy in Fortran.


00:14:38.260 --> 00:14:41.980
Bob tried Python, and now he's happy.


00:14:41.980 --> 00:14:44.220
I think Bob unwillingly tried Python,


00:14:44.220 --> 00:14:45.740
and eventually he was happy.


00:14:45.740 --> 00:14:48.100
It sounded like he was dragged through it.


00:14:48.100 --> 00:14:50.540
But I know it does read a bit like that.


00:14:50.540 --> 00:14:52.420
But I think it's an interesting story.


00:14:52.420 --> 00:14:53.500
Pat, what do you think?


00:14:53.500 --> 00:14:57.500
You have a bit of a historical perspective on all this.


00:14:57.500 --> 00:14:59.900
Yeah, I didn't go to school for chemistry,


00:14:59.900 --> 00:15:02.420
but I bet Fortran's not popular among chemistry students,


00:15:02.420 --> 00:15:03.100
is it?


00:15:03.100 --> 00:15:04.540
No, not anymore, I'm sure.


00:15:04.540 --> 00:15:08.700
I did a little benchmark the other day.


00:15:08.700 --> 00:15:16.820
I was trying to just see how, how fast some EFS storage was on AWS versus EBS.


00:15:16.820 --> 00:15:21.780
And so I wrote a Python script to do that and wrote 10 million records out.


00:15:21.780 --> 00:15:24.900
And I thought, well, maybe Python is going to be slow.


00:15:24.900 --> 00:15:28.460
So I thought I'll just whip up a quick thing in Rust here.


00:15:28.460 --> 00:15:32.460
And as it turned out, Python was 10 times faster at that too.


00:15:32.460 --> 00:15:34.980
on the same exact hardware.


00:15:34.980 --> 00:15:37.180
And I'm not sure why that was.


00:15:37.180 --> 00:15:40.860
I may not have done something that was optimal for Rust,


00:15:40.860 --> 00:15:42.820
but there it is.


00:15:42.820 --> 00:15:44.500
- Yeah, sure, no, that's super interesting.


00:15:44.500 --> 00:15:48.300
I've seen Python just rip across like OS type stuff


00:15:48.300 --> 00:15:50.260
like that, it's pretty good.


00:15:50.260 --> 00:15:53.420
All right, well, what's your first item, Pat?


00:15:53.420 --> 00:16:00.420
- I stumbled across this the other day.


00:16:01.900 --> 00:16:03.500
You've had Lucas Longa on the show,


00:16:03.500 --> 00:16:07.260
the programmer in residence,


00:16:07.260 --> 00:16:10.340
and it looks like they're gonna get another year


00:16:10.340 --> 00:16:15.180
due to a donation from Meta of $300,000


00:16:15.180 --> 00:16:17.720
to the Python Software Foundation.


00:16:17.720 --> 00:16:20.620
And it was-- - That is fantastic.


00:16:20.620 --> 00:16:21.460
- Specifically for that purpose.


00:16:21.460 --> 00:16:22.780
- That's a really big deal.


00:16:22.780 --> 00:16:26.340
Yeah, Python's important to you, right?


00:16:26.340 --> 00:16:28.140
- And like you said in the past too,


00:16:28.140 --> 00:16:31.820
Python is very important to Meta,


00:16:31.820 --> 00:16:37.360
Facebook's parent company now because much of their infrastructure is built on it.


00:16:37.360 --> 00:16:41.540
PyTorch in particular, they use a lot.


00:16:41.540 --> 00:16:46.640
So their internal implementation of Python is called Cinder apparently,


00:16:46.640 --> 00:16:49.720
which I think I've seen mentioned a few times.


00:16:49.720 --> 00:16:52.580
But they would like to see continued development


00:16:52.580 --> 00:16:55.240
and they're going to fund it, which is awesome.


00:16:55.240 --> 00:16:57.240
>> Yeah, that's really neat.


00:16:57.240 --> 00:17:01.000
I think Cinder is a fantastic thing they've created.


00:17:01.000 --> 00:17:04.660
And it's interesting, it's open source in the sense of,


00:17:04.660 --> 00:17:07.840
like maybe the better term would be source open.


00:17:07.840 --> 00:17:09.620
Like here, we're gonna put this out here.


00:17:09.620 --> 00:17:12.620
We don't expect any contributions and we don't,


00:17:12.620 --> 00:17:14.420
we don't wanna put it out there as like a project


00:17:14.420 --> 00:17:16.480
to grow on its own, but we think it might inspire people.


00:17:16.480 --> 00:17:17.680
So here's the source.


00:17:17.680 --> 00:17:22.260
But what they have contained in there is amazing.


00:17:22.260 --> 00:17:26.160
There's just so many optimizations and different things.


00:17:26.160 --> 00:17:28.420
I think they might even have that value type


00:17:30.260 --> 00:17:36.980
I discussed and I can't remember but yeah, that's a really cool project that they're working on.


00:17:36.980 --> 00:17:39.300
So this is great. I think


00:17:39.300 --> 00:17:42.700
Lukas Schlenger has gone sort of full circle, right? He was


00:17:42.700 --> 00:17:49.180
independent that he was at Instagram for a while, which is part of Meta and then left to


00:17:49.180 --> 00:17:51.700
sort of do his own thing and found his way to this


00:17:51.700 --> 00:17:57.580
developer in residence and now Meta is sending money so that he stays there. That's like an interesting circle, I think.


00:17:59.180 --> 00:18:00.600
Yeah


00:18:00.600 --> 00:18:02.360
That's good. I


00:18:02.360 --> 00:18:06.440
It's a little seems tenuous though that we have it at like one year at a time that we don't know


00:18:06.440 --> 00:18:11.480
We don't know if we're gonna have a developer in residence longer than another year, but it's like a postdoc


00:18:11.480 --> 00:18:17.400
Hopefully it's a game of tag with Microsoft coming next or something. Yeah, exactly


00:18:17.400 --> 00:18:21.760
That'd be great. And I think there are a couple of organizations doing that


00:18:21.760 --> 00:18:28.720
So I know that there was a talk about having multiple folks sort of participating in that group, which would be great


00:18:28.720 --> 00:18:31.480
because I know there's way more work than Lukas can do on himself.


00:18:31.480 --> 00:18:32.480
He's quite busy.


00:18:32.480 --> 00:18:33.480
Yeah.


00:18:33.480 --> 00:18:39.040
Alvaro in the audience has a fine name proposal here.


00:18:39.040 --> 00:18:43.720
The PSF developer in residence should be called the PSF DunderDir,


00:18:43.720 --> 00:18:46.840
underscore, underscore, D-I-R, underscore, underscore.


00:18:46.840 --> 00:18:49.520
I hereby am opening a pep.


00:18:49.520 --> 00:18:50.520
Well done, Alvaro.


00:18:50.520 --> 00:18:51.520
I'm just kidding.


00:18:51.520 --> 00:18:54.640
I want to give him more work for something silly like that.


00:18:54.640 --> 00:18:57.840
But that's pretty awesome, the PSF DunderDir.


00:18:57.840 --> 00:19:00.920
Cool. Well, thank you, Pat.


00:19:00.920 --> 00:19:03.920
Now, before we move on to the next item,


00:19:03.920 --> 00:19:06.640
let me tell you all about our sponsor today.


00:19:06.640 --> 00:19:08.140
And like I said, I'm really excited about this.


00:19:08.140 --> 00:19:11.220
I'm actually doing a bunch of work on some Git presentations.


00:19:11.220 --> 00:19:15.140
And so I'm just trying to think about what's the workflow with Git


00:19:15.140 --> 00:19:18.880
and how can we work better,


00:19:18.880 --> 00:19:21.180
especially doing team type stuff.


00:19:21.180 --> 00:19:24.640
So Mergify is a service that will help you


00:19:24.640 --> 00:19:27.180
and especially your team be one of the best


00:19:27.180 --> 00:19:30.180
be way better with Git.


00:19:30.180 --> 00:19:33.180
So it's an amazing tool to make you and your team


00:19:33.180 --> 00:19:36.180
be more productive with GitHub in particular.


00:19:36.180 --> 00:19:39.180
It's all about leveling up pull requests.


00:19:39.180 --> 00:19:42.180
So some of the features of their platform


00:19:42.180 --> 00:19:44.180
that you hook into your repositories


00:19:44.180 --> 00:19:46.180
are automatic merges.


00:19:46.180 --> 00:19:49.180
So you can set up conditions for an automatic merge


00:19:49.180 --> 00:19:51.180
and Mergify will take care of merging the PR


00:19:51.180 --> 00:19:54.180
as soon as it's ready and passes all the details.


00:19:54.180 --> 00:19:56.180
There's automatic updates.


00:19:56.180 --> 00:19:58.840
So if you have multiple pull requests,


00:19:58.840 --> 00:20:02.020
it'll merge the pull requests serially on top of each other,


00:20:02.020 --> 00:20:04.020
so there's no way to introduce a regression.


00:20:04.020 --> 00:20:06.820
There's also merge queues.


00:20:06.820 --> 00:20:09.320
So if you've got like a long CI process


00:20:09.320 --> 00:20:11.820
and things are slow or you've got lots of code,


00:20:11.820 --> 00:20:13.660
you can set up priorities


00:20:13.660 --> 00:20:16.060
and have the most important ones merge fix,


00:20:16.060 --> 00:20:18.560
like bug requests or bug fixes,


00:20:18.560 --> 00:20:20.000
especially if they're security fixes.


00:20:20.000 --> 00:20:21.360
They go right here, right at the front.


00:20:21.360 --> 00:20:22.360
Do those now.


00:20:22.360 --> 00:20:23.960
So that's awesome.


00:20:23.960 --> 00:20:28.400
They also have something called backports.


00:20:28.400 --> 00:20:32.040
So Mergify will copy the pull request to other branches


00:20:32.040 --> 00:20:34.360
once it's merged, if you set that up,


00:20:34.360 --> 00:20:37.960
so that you can ship bug fixes to multiple branches,


00:20:37.960 --> 00:20:40.220
feature branches and whatnot, automatically,


00:20:40.220 --> 00:20:41.480
or even older versions, right?


00:20:41.480 --> 00:20:45.920
Version 1.0 of your app versus 2.0, 2.2, whatever,


00:20:45.920 --> 00:20:49.280
have those automatically merge those bug requests,


00:20:49.280 --> 00:20:50.400
bug fixes in.


00:20:50.400 --> 00:20:52.240
Super cool.


00:20:52.240 --> 00:20:54.380
Mergify does all these things automatically


00:20:54.380 --> 00:20:56.120
that you would otherwise have to do manually.


00:20:56.120 --> 00:20:58.080
So you save time, you and your team


00:20:58.080 --> 00:21:01.040
will focus on projects that matter the most.


00:21:01.040 --> 00:21:03.680
Mergify is coordinated with any CI


00:21:03.680 --> 00:21:06.000
and it's fully integrated into GitHub.


00:21:06.000 --> 00:21:07.260
They also have a startup program


00:21:07.260 --> 00:21:11.080
that can give your company up to $21,000 of credits.


00:21:11.080 --> 00:21:12.560
So if you're doing a startup


00:21:12.560 --> 00:21:14.920
and you want to use them to help grow,


00:21:14.920 --> 00:21:16.640
you'll reach out to them for sure.


00:21:16.640 --> 00:21:20.640
Do that by going to pythonbytes.fm/mergify,


00:21:20.640 --> 00:21:22.680
Sign up for a demo and get started.


00:21:22.680 --> 00:21:25.180
The link is at the top of your podcast player show notes.


00:21:25.180 --> 00:21:26.440
So just click it.


00:21:26.440 --> 00:21:29.480
Thanks to Mergify for supporting our show.


00:21:29.480 --> 00:21:30.760
Very cool project. - Nice.


00:21:30.760 --> 00:21:31.600
- Yeah.


00:21:31.600 --> 00:21:35.240
All right, Brian, what's the next one here?


00:21:35.240 --> 00:21:36.960
- Well, we were talking about data science a little bit


00:21:36.960 --> 00:21:40.200
and people using Python for data science,


00:21:40.200 --> 00:21:42.160
but one of the things that people use


00:21:42.160 --> 00:21:43.660
when they're doing data science,


00:21:43.660 --> 00:21:46.160
plus other stuff and DevOps and whatever,


00:21:46.160 --> 00:21:48.840
is dashboards, dashboards in Python.


00:21:48.840 --> 00:21:51.720
and that's one of the powerful reasons to use it.


00:21:51.720 --> 00:21:52.920
And there's, so there was a,


00:21:52.920 --> 00:21:54.800
there's a couple things I wanted to discuss


00:21:54.800 --> 00:21:56.400
around dashboards.


00:21:56.400 --> 00:22:00.760
Both of them come via suggestions from Mark Skov Madsen.


00:22:00.760 --> 00:22:02.440
So thanks Mark.


00:22:02.440 --> 00:22:05.720
First is the easiest way to create interactive dashboard


00:22:05.720 --> 00:22:06.560
in Python.


00:22:06.560 --> 00:22:07.880
Obviously it's their opinion,


00:22:07.880 --> 00:22:09.840
but it does look pretty easy,


00:22:09.840 --> 00:22:14.140
is to use a HV plot dot interactive.


00:22:14.140 --> 00:22:18.160
So this is an article that talks about how to do this.


00:22:18.160 --> 00:22:20.920
And it really looks nice.


00:22:20.920 --> 00:22:23.080
This panel looks pretty good.


00:22:23.080 --> 00:22:24.320
- Yeah, that's great.


00:22:24.320 --> 00:22:26.080
- Pulling data out, you got dark and light


00:22:26.080 --> 00:22:29.920
and you've got the controls on one side.


00:22:29.920 --> 00:22:36.360
So this is just using some pre-canned data


00:22:36.360 --> 00:22:38.600
but you can use obviously your own data.


00:22:38.600 --> 00:22:40.880
But the article is pretty short


00:22:40.880 --> 00:22:42.680
and one of the things I love about it of course


00:22:42.680 --> 00:22:45.400
is it's got a animated GIF to show you exactly


00:22:45.400 --> 00:22:46.820
what you're getting into.


00:22:47.780 --> 00:22:51.220
And then also a video.


00:22:51.220 --> 00:22:55.380
So one of the authors, Sophia,


00:22:55.380 --> 00:22:57.780
just reads the, like pretty much goes through the article


00:22:57.780 --> 00:23:00.560
and talks about it and shows the demo of everything.


00:23:00.560 --> 00:23:01.400
So that's nice.


00:23:01.400 --> 00:23:02.540
And it's only like six minutes.


00:23:02.540 --> 00:23:04.160
I was watching it this morning.


00:23:04.160 --> 00:23:06.920
So really cool if you want to try.


00:23:06.920 --> 00:23:11.920
And so HVPlot is part of the HoloViz family of tools.


00:23:11.920 --> 00:23:13.740
So a lot of people are already using that,


00:23:13.740 --> 00:23:15.500
or if you're not, check that out.


00:23:15.500 --> 00:23:17.580
It's pretty cool stuff.


00:23:17.580 --> 00:23:18.880
- Yeah, this looks great.


00:23:18.880 --> 00:23:22.500
- I always wanna have good use cases for this.


00:23:22.500 --> 00:23:25.060
And I just, I don't find myself doing lots of dashboards


00:23:25.060 --> 00:23:26.380
and stuff, but every time I see them, I'm like,


00:23:26.380 --> 00:23:27.940
well, what can I build a dashboard for?


00:23:27.940 --> 00:23:29.300
That would be great to have.


00:23:29.300 --> 00:23:31.840
- Well, so I have some use cases for dashboards,


00:23:31.840 --> 00:23:33.740
but I don't really don't wanna spend a lot of time on it.


00:23:33.740 --> 00:23:36.140
And I think even though this is like six minute video


00:23:36.140 --> 00:23:37.820
of how to get through it,


00:23:37.820 --> 00:23:40.100
I think that probably I'd have to set aside


00:23:40.100 --> 00:23:45.100
maybe a half day to figure out something to get it usable.


00:23:45.420 --> 00:23:48.920
But it does show that once you understand what you're doing,


00:23:48.920 --> 00:23:51.560
you can throw together dashboards pretty quickly


00:23:51.560 --> 00:23:55.160
and be able to, well, one of the, we didn't,


00:23:55.160 --> 00:23:57.900
in the demo, one of the dashboard items was,


00:23:57.900 --> 00:23:59.360
in the controls is like,


00:23:59.360 --> 00:24:00.840
let's say you've got a whole bunch of columns


00:24:00.840 --> 00:24:05.840
or some different elements in a row that you,


00:24:05.840 --> 00:24:09.640
or in a column that you wanna filter out.


00:24:09.640 --> 00:24:11.800
So there's ways to filter your data


00:24:11.800 --> 00:24:13.960
so that you're looking at different stuff.


00:24:13.960 --> 00:24:17.000
And I was like, I have exact use case for this.


00:24:17.000 --> 00:24:18.140
So I'm pretty excited.


00:24:18.140 --> 00:24:23.480
The other thing around plots is maybe a HV plot


00:24:23.480 --> 00:24:25.540
or dashboards is maybe HV plot


00:24:25.540 --> 00:24:27.120
isn't the right thing for you.


00:24:27.120 --> 00:24:32.120
Well, we've got another thing is the PyData Global 2021.


00:24:32.120 --> 00:24:35.760
There's a video stream up on YouTube


00:24:35.760 --> 00:24:39.360
called Python Dashboarding Shootout and Showdown.


00:24:39.360 --> 00:24:41.600
And so this is a different,


00:24:41.600 --> 00:24:42.800
a whole bunch of different presenters


00:24:42.800 --> 00:24:47.200
talking about building dashboards in Python


00:24:47.200 --> 00:24:52.200
using either dash or panel or voila, or streamlet.


00:24:52.200 --> 00:24:55.520
So watch different people do it.


00:24:55.520 --> 00:24:58.560
So if you wanna watch some,


00:24:58.560 --> 00:25:02.240
use something other than HP plot, watch this video.


00:25:02.240 --> 00:25:03.680
One of the things I love about this


00:25:03.680 --> 00:25:06.640
is if you're only looking forward to one of them,


00:25:06.640 --> 00:25:09.320
one of the commenters on this video


00:25:09.320 --> 00:25:12.920
put up hyperlinks to each of the different sections.


00:25:12.920 --> 00:25:14.960
You can just hop right to the video part


00:25:14.960 --> 00:25:16.080
that you want to watch.


00:25:16.080 --> 00:25:17.520
It's pretty cool.


00:25:17.520 --> 00:25:18.280
Yeah, that's great.


00:25:18.280 --> 00:25:21.520
Yeah, that's good.


00:25:21.520 --> 00:25:22.440
I love these dashboards.


00:25:22.440 --> 00:25:23.480
It's definitely one of their powers.


00:25:23.480 --> 00:25:25.360
Pat, do you do anything with them?


00:25:25.360 --> 00:25:26.000
Sorry, Brian.


00:25:26.000 --> 00:25:26.960
I got you out of--


00:25:26.960 --> 00:25:27.920
jump on in.


00:25:27.920 --> 00:25:31.000
We do have some pre-built dashboards


00:25:31.000 --> 00:25:36.720
to monitor the EKS cluster in Grafana and Elastic.


00:25:36.720 --> 00:25:38.320
But this is another option.


00:25:38.320 --> 00:25:40.840
it'd be good to do something ad hoc.


00:25:40.840 --> 00:25:44.440
If it's a quick and dirty, maybe I could whip one out.


00:25:44.440 --> 00:25:46.440
- So Brian, do you just like grab a pandas data frame


00:25:46.440 --> 00:25:47.880
and then make it interactive?


00:25:47.880 --> 00:25:51.440
(laughing)


00:25:51.440 --> 00:25:53.480
- Not quite, but it's almost.


00:25:53.480 --> 00:25:57.560
I mean, this is built to go really closely


00:25:57.560 --> 00:25:58.720
with pandas data frames.


00:25:58.720 --> 00:26:03.400
So the code is, you know, you're doing some filtering,


00:26:03.400 --> 00:26:05.400
some pipeline processing, like group buys


00:26:05.400 --> 00:26:09.960
and selecting in to see what index you're gonna use.


00:26:09.960 --> 00:26:13.500
And then, yeah, it's pretty much interactive at that point,


00:26:13.500 --> 00:26:17.400
but the code around this is building the widgets


00:26:17.400 --> 00:26:19.160
for the controls.


00:26:19.160 --> 00:26:20.240
- You gotta define the UI


00:26:20.240 --> 00:26:21.880
and how people interact with it, got it.


00:26:21.880 --> 00:26:24.760
- Yeah, but it's pretty easy.


00:26:24.760 --> 00:26:27.160
I can't imagine, I mean, it's not obvious,


00:26:27.160 --> 00:26:28.280
'cause so you have to kind of,


00:26:28.280 --> 00:26:30.120
it's good to watch a tutorial or something,


00:26:30.120 --> 00:26:33.320
but it's also not difficult.


00:26:33.320 --> 00:26:35.120
And then putting it together.


00:26:35.120 --> 00:26:36.400
- Yeah, so most of the code in here


00:26:36.400 --> 00:26:38.360
is not the interactive plot


00:26:38.360 --> 00:26:40.460
because that's kind of already happens,


00:26:40.460 --> 00:26:42.140
but it's the--


00:26:42.140 --> 00:26:43.780
- The widgets. - The widgets.


00:26:43.780 --> 00:26:45.080
- Got it, cool, thanks.


00:26:45.080 --> 00:26:49.120
All right, I think you all will be excited about this.


00:26:49.120 --> 00:26:52.240
I think this is quite a neat project.


00:26:52.240 --> 00:26:55.580
Now let's see, this was sent over by Dave Chavelle,


00:26:55.580 --> 00:26:58.960
or actually is both sent over and is by Dave Chavelle.


00:26:58.960 --> 00:27:03.160
So, I don't know, Brian, do you ever use entry points


00:27:03.160 --> 00:27:06.240
and Python packages, you know, so you can set up,


00:27:06.240 --> 00:27:08.900
can pip install a package,


00:27:08.900 --> 00:27:11.040
and then if you have that Python active,


00:27:11.040 --> 00:27:12.680
then you can just type a CLI command


00:27:12.680 --> 00:27:14.400
that is one of the entry points there.


00:27:14.400 --> 00:27:15.380
Do you know what I'm talking about?


00:27:15.380 --> 00:27:17.800
- Yeah, I do that all the time.


00:27:17.800 --> 00:27:21.380
- That's great, but there is some overhead to set it up,


00:27:21.380 --> 00:27:25.000
right, I've got to install it as a package and whatnot.


00:27:25.000 --> 00:27:28.640
This project called SourcePy allows you


00:27:28.640 --> 00:27:33.000
to basically turn any function into a CLI command,


00:27:33.000 --> 00:27:36.800
a straight CLI command in one line.


00:27:36.800 --> 00:27:38.600
So let me show you, talk about,


00:27:38.600 --> 00:27:40.640
and it doesn't involve packages and installing


00:27:40.640 --> 00:27:42.220
or anything like that.


00:27:42.220 --> 00:27:44.380
So imagine you've got some file here


00:27:44.380 --> 00:27:46.720
and it's got a function, just a def function,


00:27:46.720 --> 00:27:50.120
pygrep is the example here, and it has a pattern,


00:27:50.120 --> 00:27:52.760
which is actually a regular expression pattern,


00:27:52.760 --> 00:27:55.420
note the typing, has grep data,


00:27:55.420 --> 00:27:58.280
which is a list of text inputs.


00:27:58.280 --> 00:28:01.180
So could be a string or something,


00:28:01.180 --> 00:28:04.220
but it could also be like something piped or standard in


00:28:04.220 --> 00:28:06.120
or something along those lines, right?


00:28:06.120 --> 00:28:11.380
So if I have this script that just does that work


00:28:11.380 --> 00:28:13.580
with those type assigned data,


00:28:13.580 --> 00:28:16.260
and I have source py installed,


00:28:16.260 --> 00:28:20.260
I can say source this file here.


00:28:20.260 --> 00:28:26.080
And what it will do is it'll actually add up the,


00:28:28.300 --> 00:28:31.860
it'll expose those functions like PyGrep and so on.


00:28:31.860 --> 00:28:33.420
So then I can just type PyGrep


00:28:33.420 --> 00:28:34.540
and it'll tell me how it works.


00:28:34.540 --> 00:28:37.380
And somewhere in here, where's the example of running it?


00:28:37.380 --> 00:28:39.920
Oh, right here, I think it is.


00:28:39.920 --> 00:28:44.220
So what you can do is you can just run PyGrep against,


00:28:44.220 --> 00:28:45.980
now as a function, right?


00:28:45.980 --> 00:28:47.340
As a CLI function.


00:28:47.340 --> 00:28:50.220
So it has all sorts of cool features.


00:28:50.220 --> 00:28:52.860
For example, it has this type handling.


00:28:52.860 --> 00:28:55.460
So type hints that we talked about


00:28:55.460 --> 00:28:59.020
can be used to coerce inputs off the command line


00:28:59.020 --> 00:29:02.860
into like integers and patterns and IO streams


00:29:02.860 --> 00:29:05.220
for like files and standard and such.


00:29:05.220 --> 00:29:10.420
Let's see, it just takes basically any function like this


00:29:10.420 --> 00:29:12.300
and turns it into something to run on the shell.


00:29:12.300 --> 00:29:17.300
And then you can also go down and you can do,


00:29:17.300 --> 00:29:20.240
like, I believe there's some sort of class-based way


00:29:20.240 --> 00:29:22.740
to work with it and so on, but yeah, this is pretty neat.


00:29:22.740 --> 00:29:23.640
What do you think?


00:29:23.640 --> 00:29:32.960
I guess I'm confused at how it works with the normal source command.


00:29:32.960 --> 00:29:33.960
That is a good question.


00:29:33.960 --> 00:29:36.040
Like how does it not break normal source?


00:29:36.040 --> 00:29:37.040
Yeah.


00:29:37.040 --> 00:29:39.720
That's a good question.


00:29:39.720 --> 00:29:41.760
It is a good question.


00:29:41.760 --> 00:29:43.960
Like it doesn't replace it for a while.


00:29:43.960 --> 00:29:48.240
You've got it installed or does it extend it somehow?


00:29:48.240 --> 00:29:49.320
Yeah, I don't know.


00:29:49.320 --> 00:29:52.360
I haven't looked at it enough to understand


00:29:52.360 --> 00:29:55.720
how it either coordinates or overrides source.


00:29:55.720 --> 00:29:56.560
- Sorry.


00:29:56.560 --> 00:29:58.820
- No, it's a great question.


00:29:58.820 --> 00:30:04.360
Yeah, I haven't played with it, but it's really important.


00:30:04.360 --> 00:30:05.200
You would want to know


00:30:05.200 --> 00:30:06.920
'cause you wanna break your regular source step.


00:30:06.920 --> 00:30:08.720
I'm sure you could alias it if for some reason


00:30:08.720 --> 00:30:10.320
it conflicted, but I don't know.


00:30:10.320 --> 00:30:12.600
Go ahead.


00:30:12.600 --> 00:30:14.200
- So I think this would be really helpful for,


00:30:14.200 --> 00:30:16.320
aside from that, if that's all working great,


00:30:16.320 --> 00:30:18.760
then aside from that, I think it's a very useful way


00:30:18.760 --> 00:30:23.760
to have like a handful of little tools for a project


00:30:23.760 --> 00:30:25.840
to be able to use that.


00:30:25.840 --> 00:30:29.500
If you're trying to share it with other people,


00:30:29.500 --> 00:30:31.960
I kind of think packaging it the right way


00:30:31.960 --> 00:30:35.020
to have entry points is probably the right way to go.


00:30:35.020 --> 00:30:38.740
- Yeah, if you wanna do a more formal, like a PIPX style,


00:30:38.740 --> 00:30:40.900
but this feels way more ad hoc, right?


00:30:40.900 --> 00:30:42.580
Like Pat was talking about his little script


00:30:42.580 --> 00:30:43.980
that he built to test some stuff.


00:30:43.980 --> 00:30:46.540
He could run this and then just call those functions


00:30:46.540 --> 00:30:48.300
as if they were built into batches


00:30:48.300 --> 00:30:49.140
or whatever.


00:30:49.140 --> 00:30:49.980
- Definitely.


00:30:49.980 --> 00:30:50.800
- Also worth pointing out,


00:30:50.800 --> 00:30:53.000
it has built in native async support.


00:30:53.000 --> 00:30:56.320
So if you have async functions and you source it,


00:30:56.320 --> 00:31:01.320
then you can just call it as if it was a regular


00:31:01.320 --> 00:31:05.320
command line command and it still just takes it and runs.


00:31:05.320 --> 00:31:09.740
And Kim Van Wick, who's been a co-host here before,


00:31:09.740 --> 00:31:11.600
has a clever thought.


00:31:11.600 --> 00:31:14.720
He says, "I suspect it wraps the normal source command


00:31:14.720 --> 00:31:17.600
"and hands it over to the normal source if it isn't Python."


00:31:17.600 --> 00:31:19.500
which seems like a good idea.


00:31:19.500 --> 00:31:20.340
- Probably.


00:31:20.340 --> 00:31:21.160
- Yeah, probably.


00:31:21.160 --> 00:31:22.000
Although, like I said,


00:31:22.000 --> 00:31:24.940
I haven't really looked at the mechanism there.


00:31:24.940 --> 00:31:26.300
But this looks like a cool project.


00:31:26.300 --> 00:31:28.060
It's got all sorts of supported types


00:31:28.060 --> 00:31:31.940
like JSON and unions and date time objects


00:31:31.940 --> 00:31:32.940
and all kinds of stuff.


00:31:32.940 --> 00:31:37.460
So check it out if you do a bunch of kind of ad hoc stuff


00:31:37.460 --> 00:31:39.900
with Python on the command prompt terminal.


00:31:39.900 --> 00:31:44.100
Pat, how's this strike you?


00:31:44.100 --> 00:31:47.220
I know that this might touch some of the things


00:31:47.220 --> 00:31:49.360
you're doing in your world.


00:31:49.360 --> 00:31:51.160
- Right, yeah, just yesterday one of the guys


00:31:51.160 --> 00:31:54.400
was contacting me because he needed to cycle through


00:31:54.400 --> 00:31:59.400
a list of addresses to hit an API,


00:31:59.400 --> 00:32:03.880
and this could be something you'd use like that,


00:32:03.880 --> 00:32:08.640
consume this file and hit the API with each example


00:32:08.640 --> 00:32:10.080
and away we go.


00:32:10.080 --> 00:32:11.080
- Yeah, absolutely.


00:32:11.080 --> 00:32:13.740
Yeah, this looks great for putting little,


00:32:13.740 --> 00:32:16.040
making those little scripts you build with Python,


00:32:16.040 --> 00:32:18.440
like literally scripts, I know a lot of people


00:32:18.440 --> 00:32:19.800
call everything Python scripts,


00:32:19.800 --> 00:32:23.520
but this is really for those types of apps, right?


00:32:23.520 --> 00:32:24.360
- A single file script.


00:32:24.360 --> 00:32:25.960
- Yeah, yeah, a single file thing,


00:32:25.960 --> 00:32:29.560
not like a 20,000 line Flask app, right?


00:32:29.560 --> 00:32:32.420
That I think starts to stretch the terms


00:32:32.420 --> 00:32:33.660
of what script might mean,


00:32:33.660 --> 00:32:35.520
but this is exactly for those things.


00:32:35.520 --> 00:32:38.020
- Yeah.


00:32:38.020 --> 00:32:39.920
- All right, what's your final one, Pat?


00:32:39.920 --> 00:32:44.440
- This is similar to what you just covered, actually.


00:32:44.440 --> 00:32:46.640
You've talked, I think, a little bit about it before.


00:32:46.640 --> 00:32:50.760
Conch shell combines the best of Bash shell and Python


00:32:50.760 --> 00:32:52.600
in the Linux terminal.


00:32:52.600 --> 00:32:54.160
>> This is way more than what I covered.


00:32:54.160 --> 00:32:55.960
This is like another level here.


00:32:55.960 --> 00:32:56.560
Tell us about it.


00:32:56.560 --> 00:32:56.960
>> It is.


00:32:56.960 --> 00:32:59.120
It takes it to another level, yeah.


00:32:59.120 --> 00:33:03.440
I ran across it on itsfoss, which is a nice site


00:33:03.440 --> 00:33:06.560
for open source type things.


00:33:06.560 --> 00:33:09.280
In a nutshell, what it does is provide you


00:33:09.280 --> 00:33:12.680
with a new shell where, as they demonstrate here,


00:33:12.680 --> 00:33:15.400
you can use straight Python.


00:33:15.400 --> 00:33:18.000
You can import JSON, for example,


00:33:18.000 --> 00:33:25.160
and define a variable or a table,


00:33:25.160 --> 00:33:30.840
print that out, and format it, the length function here.


00:33:30.840 --> 00:33:35.200
But you can also then mix in regular bash functions


00:33:35.200 --> 00:33:39.240
where we, for example, here it curls from a website.


00:33:39.240 --> 00:33:41.680
The result comes back, and the length function


00:33:41.680 --> 00:33:43.660
tells you the length of that curl.


00:33:43.660 --> 00:33:47.000
>> How interesting. That's a little bit


00:33:47.000 --> 00:33:50.680
like almost like a Jinja Django template,


00:33:50.680 --> 00:33:52.040
but in your terminal,


00:33:52.040 --> 00:33:54.180
you put a little dollar to say,


00:33:54.180 --> 00:33:58.080
here's a bit of code to run on the shell.


00:33:58.080 --> 00:33:59.000
>> Yeah.


00:33:59.000 --> 00:34:00.200
>> Shells run here.


00:34:00.200 --> 00:34:02.040
>> The one famous statement they have is,


00:34:02.040 --> 00:34:04.800
I always forget how to do a for loop in Bash,


00:34:04.800 --> 00:34:07.480
but in Python, it's pretty easy.


00:34:07.480 --> 00:34:09.280
They have a rule,


00:34:09.280 --> 00:34:12.840
that it evaluates to Python first.


00:34:12.840 --> 00:34:15.760
If it evaluates to Python, it executes as Python.


00:34:15.760 --> 00:34:18.880
If it doesn't, then it more or less executes as Bash.


00:34:18.880 --> 00:34:24.240
And I do have a link we could put in the show notes,


00:34:24.240 --> 00:34:31.880
too, to a video demonstration from their home page.


00:34:31.880 --> 00:34:36.760
And the guy does a spectacular demonstration


00:34:36.760 --> 00:34:40.000
with autocompletes, and they have


00:34:40.000 --> 00:34:41.600
what they call contributions.


00:34:41.600 --> 00:34:45.320
And that also begins with an X. So it's


00:34:45.320 --> 00:34:49.360
like a plug-in or an add-on, but it's a contribution.


00:34:49.360 --> 00:34:57.560
And it is Git-aware, and it is virtual environment-aware.


00:34:57.560 --> 00:34:59.880
It sounds like a killer environment,


00:34:59.880 --> 00:35:01.520
but it would take some getting used to.


00:35:01.520 --> 00:35:05.240
I have a lot of muscle memory to overcome,


00:35:05.240 --> 00:35:07.360
to take full advantage, I think.


00:35:07.360 --> 00:35:08.320
- That's cool.


00:35:08.320 --> 00:35:09.880
Brian, have you played with this?


00:35:09.880 --> 00:35:12.120
- You know, I tried to play with it a couple years ago,


00:35:12.120 --> 00:35:16.480
but now I haven't, but I do want to.


00:35:16.480 --> 00:35:18.280
And I think one of the things,


00:35:18.280 --> 00:35:19.440
I didn't give it a fair shake.


00:35:19.440 --> 00:35:21.720
I think it would be good to just say,


00:35:21.720 --> 00:35:24.480
for a week, maybe, I'm gonna try to just use this


00:35:24.480 --> 00:35:26.400
instead of pulling up my normal terminal,


00:35:26.400 --> 00:35:28.760
just to see if I can get used to it.


00:35:28.760 --> 00:35:29.800
- That's the thing, I think you have to


00:35:29.800 --> 00:35:31.440
immerse yourself, probably.


00:35:31.440 --> 00:35:32.840
And it is about five years old.


00:35:32.840 --> 00:35:34.200
I think it's fairly mature.


00:35:34.200 --> 00:35:39.200
- Yeah, and also the less I write bash scripts,


00:35:39.200 --> 00:35:43.600
the more I wish that bash scripts


00:35:43.600 --> 00:35:45.040
were more like Python scripts.


00:35:45.040 --> 00:35:46.640
So now they are.


00:35:46.640 --> 00:35:48.400
- Yeah, now they are.


00:35:48.400 --> 00:35:50.280
- Yeah, this is great.


00:35:50.280 --> 00:35:53.160
A good find and something I've also wanted to play with,


00:35:53.160 --> 00:35:55.520
but haven't, so.


00:35:55.520 --> 00:35:56.920
- Nice.


00:35:56.920 --> 00:35:57.760
- Brian, you got any extras


00:35:57.760 --> 00:35:59.880
you want to share with the people?


00:35:59.880 --> 00:36:01.720
- I don't this week.


00:36:01.720 --> 00:36:03.600
- I thought I didn't, but then I did.


00:36:03.600 --> 00:36:05.800
I just want to do a quick follow-up.


00:36:05.800 --> 00:36:06.560
Okay.


00:36:06.560 --> 00:36:10.400
I was just thinking about a couple of episodes ago


00:36:10.400 --> 00:36:14.600
where we talked about the March Madness Package tournament


00:36:14.600 --> 00:36:16.000
that Chris May had sent in.


00:36:16.000 --> 00:36:18.800
And I was thinking, you know, it's probably done now, isn't it?


00:36:18.800 --> 00:36:19.800
Let's see who won.


00:36:19.800 --> 00:36:20.300
Yeah.


00:36:20.300 --> 00:36:24.400
Because I think we were at the point where we were at the Elite 8, weren't we?


00:36:24.400 --> 00:36:27.600
Or, yeah, I believe we were at the Elite 8.


00:36:27.600 --> 00:36:31.600
So we had a showdown between NumPy and Pip.


00:36:31.600 --> 00:36:32.600
NumPy crushed it.


00:36:32.600 --> 00:36:36.040
We had a showdown between pandas and requests.


00:36:36.040 --> 00:36:40.300
Pandas crushed it and it was an all data science.


00:36:40.300 --> 00:36:44.880
Finale and NumPy and pandas with the head to head to head and it was


00:36:44.880 --> 00:36:48.580
pandas 55% taking the winner. So I just want to do a quick follow up on that.


00:36:48.580 --> 00:36:51.780
Very important news. We have a champion.


00:36:51.780 --> 00:36:56.940
It's good, but try using pandas without NumPy. That'll be tough.


00:36:56.940 --> 00:36:59.040
Yeah, indeed.


00:36:59.040 --> 00:37:02.180
Do you have anything else you want to give a shout out to?


00:37:02.180 --> 00:37:05.180
I do have one extra.


00:37:05.180 --> 00:37:08.320
Quick like.


00:37:08.320 --> 00:37:10.820
It's easy to bash Microsoft, but they've been involved.


00:37:10.820 --> 00:37:12.120
They bought GitHub.


00:37:12.120 --> 00:37:16.840
They have lots of our Python core developers working for them.


00:37:16.840 --> 00:37:22.940
And they have this rewards program, and they want you to use Bing search, obviously.


00:37:22.940 --> 00:37:28.780
But what you can do is choose a charity to give points to.


00:37:28.780 --> 00:37:35.100
You can also get like a $5 gift certificate to AWS or Amazon or something for yourself


00:37:35.100 --> 00:37:36.100
if you'd rather.


00:37:36.100 --> 00:37:41.700
And every day you just kind of click on these little links and I just got five points or


00:37:41.700 --> 00:37:44.380
10 points and, oh, now we got to do a quiz.


00:37:44.380 --> 00:37:47.740
I'll come back to that later.


00:37:47.740 --> 00:37:52.300
And as you do this, you accumulate more points each day and those points then can go to your


00:37:52.300 --> 00:37:53.300
charity.


00:37:53.300 --> 00:37:56.380
I did the Red Cross for a while,


00:37:56.380 --> 00:38:00.380
and I did the CDC during our lockdown year there.


00:38:00.380 --> 00:38:05.220
And you can also donate to the Python Software Foundation.


00:38:05.220 --> 00:38:06.300
- That's cool.


00:38:06.300 --> 00:38:08.620
- That's a way we can all contribute.


00:38:08.620 --> 00:38:11.260
- So if you're Googling stuff with Bing,


00:38:11.260 --> 00:38:12.980
go ahead and set up the rewards.


00:38:12.980 --> 00:38:15.220
- Googling stuff with Bing.


00:38:15.220 --> 00:38:17.460
(laughing)


00:38:17.460 --> 00:38:18.300
- If you're Googling stuff with Bing,


00:38:18.300 --> 00:38:19.660
set up your rewards to go to the PSF.


00:38:19.660 --> 00:38:20.980
You might as well, right?


00:38:20.980 --> 00:38:21.820
- That's right.


00:38:21.820 --> 00:38:22.660
- Fantastic.


00:38:22.660 --> 00:38:23.500
- Awesome.


00:38:23.500 --> 00:38:24.720
All right, well, thanks.


00:38:24.720 --> 00:38:25.620
That's a good one.


00:38:25.620 --> 00:38:30.140
I got a joke for you all here,


00:38:30.140 --> 00:38:32.080
and I know Brian, you do as well,


00:38:32.080 --> 00:38:33.620
but I feel like this one,


00:38:33.620 --> 00:38:34.840
I better take this one


00:38:34.840 --> 00:38:36.960
because I don't feel you're in a position


00:38:36.960 --> 00:38:39.640
to make an unbiased decision here


00:38:39.640 --> 00:38:41.120
'cause it's so close to your heart.


00:38:41.120 --> 00:38:41.960
- Okay. - All right?


00:38:41.960 --> 00:38:42.800
Okay.


00:38:42.800 --> 00:38:45.800
So this one is over on the Reddit Programming Humor one,


00:38:45.800 --> 00:38:48.880
and it poses the question,


00:38:48.880 --> 00:38:50.840
what seems like a straightforward question


00:38:50.840 --> 00:38:52.180
for a piece of software?


00:38:52.180 --> 00:38:53.520
How do you exit?


00:38:53.520 --> 00:38:54.360
Vim.


00:38:54.360 --> 00:38:55.900
(laughing)


00:38:55.900 --> 00:38:58.460
And it types, there's some, you know,


00:38:58.460 --> 00:38:59.900
couple interesting options here.


00:38:59.900 --> 00:39:02.060
You get colon exit.


00:39:02.060 --> 00:39:05.860
7% of the people think you type colon exit, they're wrong.


00:39:05.860 --> 00:39:08.240
You type colon wq,


00:39:08.240 --> 00:39:11.820
which I guess if you wanna make changes, cool.


00:39:11.820 --> 00:39:13.020
Save your changes and exit.


00:39:13.020 --> 00:39:15.540
You could do, most people got that one.


00:39:15.540 --> 00:39:18.260
And then you could do colon quit, 7% again.


00:39:18.260 --> 00:39:19.980
You could click the close button.


00:39:19.980 --> 00:39:22.300
Hard for a non UI app, but.


00:39:22.300 --> 00:39:27.380
Or almost 20% of the people said,


00:39:27.380 --> 00:39:29.100
you know what, the way you restart Vim,


00:39:29.100 --> 00:39:30.780
this horrible thing, I can't get out of it.


00:39:30.780 --> 00:39:32.340
I'm gonna restart the computer.


00:39:32.340 --> 00:39:36.740
I'm trapped in here, I just, I gotta get out.


00:39:36.740 --> 00:39:40.220
I tried command Z or control Z and it just background it.


00:39:40.220 --> 00:39:41.040
Now what's it doing?


00:39:41.040 --> 00:39:43.060
It keeps coming back and yeah.


00:39:43.060 --> 00:39:46.140
- I think people clicked restart the computer to be funny.


00:39:46.140 --> 00:39:46.980
- I know they did.


00:39:46.980 --> 00:39:49.780
I thought, and I pulled it up as a joke to be funny as well.


00:39:49.780 --> 00:39:50.620
but they are.


00:39:50.620 --> 00:39:51.460
- Yeah, no.


00:39:51.460 --> 00:39:57.520
I don't know, the close button works for me.


00:39:57.520 --> 00:39:58.500
I don't know.


00:39:58.500 --> 00:40:00.340
- Well, it closes the terminal, right?


00:40:00.340 --> 00:40:01.540
- Yeah, yeah.


00:40:01.540 --> 00:40:03.620
So.


00:40:03.620 --> 00:40:05.420
- But you gotta say,


00:40:05.420 --> 00:40:07.940
do you wanna terminate the running program?


00:40:07.940 --> 00:40:10.740
Right, you get like a warning that you're doing it wrong.


00:40:10.740 --> 00:40:12.840
You forgot the code.


00:40:12.840 --> 00:40:14.540
- I'm with you, Brian, I'm a BIM guy.


00:40:14.540 --> 00:40:16.500
(laughing)


00:40:16.500 --> 00:40:17.580
- It's not hard.


00:40:17.580 --> 00:40:20.300
And actually I haven't, I don't use straight Vim


00:40:20.300 --> 00:40:21.760
except for on the command line.


00:40:21.760 --> 00:40:23.460
You're right, I guess I do that on the command line,


00:40:23.460 --> 00:40:25.940
but I do, I essentially use Vim


00:40:25.940 --> 00:40:27.900
within PyCharm or VS Code as well,


00:40:27.900 --> 00:40:29.780
but yeah, Vim emulation.


00:40:29.780 --> 00:40:34.140
Okay, so I wanted to share a joke also


00:40:34.140 --> 00:40:36.140
because I just thought this was so funny


00:40:36.140 --> 00:40:38.400
I could stop laughing this morning.


00:40:38.400 --> 00:40:42.660
So ran across this tweet by Mediocre Superheroes.


00:40:42.660 --> 00:40:45.420
It's a little cartoon thing.


00:40:45.420 --> 00:40:48.400
So, so the guy, you know, finds a genie,


00:40:48.400 --> 00:40:51.140
genie says three wishes.


00:40:51.140 --> 00:40:52.980
Hey, can I wish for more wishes?


00:40:52.980 --> 00:40:54.420
Not with me, no.


00:40:54.420 --> 00:40:55.380
Well, fine.


00:40:55.380 --> 00:40:56.820
I wish you couldn't count.


00:40:56.820 --> 00:40:59.500
(laughing)


00:40:59.500 --> 00:41:00.820
Genie, done.


00:41:00.820 --> 00:41:02.540
How many wishes do you have left?


00:41:02.540 --> 00:41:04.340
A billion.


00:41:04.340 --> 00:41:05.260
That sounds right.


00:41:05.260 --> 00:41:07.060
- I love it.


00:41:07.060 --> 00:41:10.260
- Anyway, that was funny.


00:41:10.260 --> 00:41:12.220
- An invented boy around an old joke.


00:41:15.060 --> 00:41:15.900
- That's great.


00:41:15.900 --> 00:41:17.940
- Anyway.


00:41:17.940 --> 00:41:19.980
- Oh, quick, a bit of audience feedback as well.


00:41:19.980 --> 00:41:22.740
Henry Schreiner says, "Restart the computer?


00:41:22.740 --> 00:41:24.640
Isn't that how you get out of Emacs?"


00:41:24.640 --> 00:41:26.620
Also true.


00:41:26.620 --> 00:41:28.660
- Yeah.


00:41:28.660 --> 00:41:33.180
- Yeah, what key chord do I hit to get out of that one?


00:41:33.180 --> 00:41:35.100
Fantastic.


00:41:35.100 --> 00:41:37.060
- It's probably control something.


00:41:37.060 --> 00:41:40.060
- Yeah, I bet it involves a control K something somehow.


00:41:40.060 --> 00:41:44.180
Anyway, thanks for everything, Brian.


00:41:44.180 --> 00:41:45.620
Thanks for being here, thanks for the jokes.


00:41:45.620 --> 00:41:47.140
And Pat, it was great you could join us.


00:41:47.140 --> 00:41:48.420
Thanks for coming. - Yeah, thanks, Brett.


00:41:48.420 --> 00:41:49.940
- Thanks for having me on, guys.


00:41:49.940 --> 00:41:50.860
- You bet. - Bye, everybody.


00:41:50.860 --> 00:41:52.020
- Bye, everyone.

