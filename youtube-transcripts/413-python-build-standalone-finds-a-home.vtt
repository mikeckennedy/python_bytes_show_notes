WEBVTT

00:00:00.001 --> 00:00:05.760
Hey everybody, hey Michael. Hey, hello.

00:00:05.760 --> 00:00:12.100
No, I'm excited. There's a lot of exciting news to talk about this week.

00:00:12.100 --> 00:00:16.700
It's on this incredible December. So let's jump in.

00:00:16.700 --> 00:00:23.980
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:23.980 --> 00:00:30.320
This is episode 413, recorded December 9, 2024. And I'm Brian Okken.

00:00:30.320 --> 00:00:31.540
And I'm Michael Kennedy.

00:00:31.540 --> 00:00:42.660
And this episode is sponsored by us. So check out the links in our show notes, but also check out Talk Python Training and Pythontest.com.

00:00:42.660 --> 00:00:45.820
There's courses over there. And of course, thank you to Patreon supporters.

00:00:45.820 --> 00:00:51.740
And we have links. If you want to get a hold of us, you can reach us on BlueSky or Mastodon.

00:00:51.740 --> 00:00:58.800
The links are in the show notes. And also, if you'd like to, if you're listening to the show, thank you.

00:00:58.800 --> 00:01:05.940
And please share it with a friend. Also, if you'd like to participate in the discussion while we're recording,

00:01:05.940 --> 00:01:10.720
you can head on over to pythonbytes.fm/live and see when we're recording next.

00:01:10.720 --> 00:01:15.940
But usually it's Monday at 10 a.m. Pacific time. Sometimes it shifts, though.

00:01:15.940 --> 00:01:20.820
And during the holiday season, who knows what we might do. But so far, we're sticking with that.

00:01:21.520 --> 00:01:29.920
And if you'd like to get the links in your email inbox, go ahead and go and sign up for the newsletter at pythonbytes.fm.

00:01:29.920 --> 00:01:33.800
And we will send you all of the links in the show notes right in your inbox.

00:01:33.800 --> 00:01:37.120
So, Michael, let's kick it off.

00:01:37.120 --> 00:01:41.560
Let's kick it off. I want to talk about a little bit of jitter.

00:01:41.560 --> 00:01:45.160
Maybe I've had too much coffee this morning or something. I don't know. What do you think?

00:01:45.540 --> 00:01:49.460
No, jitter is a thing from the folks at Pydantic.

00:01:49.460 --> 00:01:59.620
And the idea here is they need really fast JSON parsing as the foundation of Pydantic.

00:01:59.620 --> 00:02:08.180
Basically, Pydantic is about how do I exchange, validate, and transform JSON data with Python classes,

00:02:08.440 --> 00:02:10.280
right, into Python classes and types.

00:02:10.280 --> 00:02:10.280
Okay.

00:02:10.280 --> 00:02:10.960
Yeah.

00:02:10.960 --> 00:02:13.500
So you want that to be fast.

00:02:13.500 --> 00:02:18.720
The folks over at Pydantic created this thing called jitter, G-I-T-E-R.

00:02:18.720 --> 00:02:23.260
And it is a fast, iterable JSON parser.

00:02:23.260 --> 00:02:29.060
Now, if the Pydantic usage does not catch your attention,

00:02:29.840 --> 00:02:33.840
OpenAI is also using jitter, which is pretty interesting.

00:02:33.840 --> 00:02:35.660
Ask ChatPT about it.

00:02:35.660 --> 00:02:42.380
So the reason that they were interested in it is they want to be able to work with,

00:02:42.380 --> 00:02:49.120
I believe Pydantic as well, but they want to work with responses coming out of LLMs.

00:02:49.260 --> 00:02:58.100
And anyone who's used LLMs until maybe very recently knows that they kind of like spit out the answers in a little progressive way, right?

00:02:58.100 --> 00:03:05.280
And so with this, you can parse parts of data as it comes down, which is pretty cool.

00:03:05.280 --> 00:03:08.720
So there's some examples of partial in here.

00:03:08.720 --> 00:03:13.520
You can go look for somewhere, I think, maybe on the Docs website or something like that.

00:03:14.260 --> 00:03:20.960
But, you know, you can give it like a partially formed string and it'll come up with like perfectly good answers for it.

00:03:20.960 --> 00:03:22.640
So that's pretty neat.

00:03:22.640 --> 00:03:25.760
And that's one of its features.

00:03:25.760 --> 00:03:31.100
The other is that it's faster than what I think the default Rust JSON parser is.

00:03:31.100 --> 00:03:36.660
Even for non-iterable, just straight parse it, which is, that's pretty impressive.

00:03:36.660 --> 00:03:37.460
Okay.

00:03:37.460 --> 00:03:42.860
And then there's also, this is why we are talking about it, there's Python parse,

00:03:42.860 --> 00:03:46.760
which parses JSON strings into a Python object.

00:03:46.760 --> 00:03:51.660
So you can go and run that as well, which is pretty cool.

00:03:51.660 --> 00:03:55.160
We have a jitter example.

00:03:55.160 --> 00:03:56.820
Yeah, yeah, yeah.

00:03:56.820 --> 00:03:58.320
Anyway, yeah.

00:03:58.320 --> 00:04:03.180
So you can go and parse it into different pieces using, basically,

00:04:03.180 --> 00:04:07.280
if you need a really fast JSON parser with Python, you can use Python parse

00:04:07.280 --> 00:04:10.840
and it'll parse into a structure, right?

00:04:10.840 --> 00:04:12.000
Yeah.

00:04:12.260 --> 00:04:13.760
So, awesome.

00:04:13.760 --> 00:04:19.320
I thought people might be interested in both an iterable, iterating JSON parser,

00:04:19.320 --> 00:04:24.660
and back to this one, iterating JSON parser, and also a really fast one.

00:04:24.660 --> 00:04:28.520
Plus, it's being built by the folks at Pydantic, Sam Colvin, and team.

00:04:28.520 --> 00:04:32.200
And, yeah, excellent.

00:04:32.200 --> 00:04:32.980
Nice work.

00:04:33.840 --> 00:04:34.260
Oh, yeah.

00:04:34.260 --> 00:04:36.720
I think I've got several uses for this.

00:04:36.720 --> 00:04:37.140
This is cool.

00:04:37.140 --> 00:04:38.540
Yeah, cool.

00:04:38.540 --> 00:04:47.440
Yeah, I recently had Samuel Colvin on with David Seddon to talk about building Rust extensions

00:04:47.440 --> 00:04:51.340
or integrating Rust with Python and things like that and talk Python.

00:04:51.340 --> 00:04:53.660
And he talked about this as one of the things they're building.

00:04:53.660 --> 00:04:55.440
It's like, oh, okay, this is pretty interesting.

00:04:55.440 --> 00:04:56.940
Yeah, definitely.

00:04:59.240 --> 00:05:02.520
Well, I'm going to talk about Python pre-builds a little bit.

00:05:02.520 --> 00:05:05.880
This is big news, Brian.

00:05:05.880 --> 00:05:07.100
I'm glad you're covering it.

00:05:07.700 --> 00:05:13.840
So Python build standalone is a project that we've talked about on the show,

00:05:13.840 --> 00:05:17.360
but mostly we talked about it in association with uv.

00:05:17.360 --> 00:05:24.880
Because if you use uv Sync or uv Install Python or uv Virtual Environment or uv VNV

00:05:24.880 --> 00:05:31.120
and then install and use Python there, if it can't find it on your system,

00:05:31.120 --> 00:05:36.620
the Python on your system, it's going to pull it from Python build standalone,

00:05:36.620 --> 00:05:38.840
which is a separate project, not part of uv.

00:05:38.840 --> 00:05:40.700
So we've discussed that.

00:05:40.700 --> 00:05:46.260
But the big news right now is that Python build standalone is now part of Astral

00:05:46.260 --> 00:05:49.860
or under the Astral umbrella, which is huge.

00:05:49.860 --> 00:05:57.700
So, yeah, we're going to link to an article from Charlie Marsh, head of Astral,

00:05:57.700 --> 00:06:00.160
saying a new home for Python build standalone.

00:06:01.400 --> 00:06:08.600
There's also a, it just says we'll be taking over, we'll be taking stewardship of this project

00:06:08.600 --> 00:06:10.940
from Gregory Zork.

00:06:10.940 --> 00:06:12.760
Cool last name.

00:06:12.760 --> 00:06:18.020
Anyway, the foundational project for building and installing portable Python distributions.

00:06:19.020 --> 00:06:22.200
And there's a link to Gregory's announcement also.

00:06:22.200 --> 00:06:29.680
And there's a discussion around that, like the Python build standalone powers UV, powers Rai,

00:06:30.320 --> 00:06:34.240
also PipX and Hatch and more.

00:06:34.240 --> 00:06:40.240
And it's got like 70 million downloads so far.

00:06:40.240 --> 00:06:40.800
Wow.

00:06:40.800 --> 00:06:48.860
Pretty big project and definitely instrumental to going forward with Python or with Python packaging

00:06:48.860 --> 00:06:49.860
and using Python.

00:06:49.860 --> 00:06:58.760
So Astral is really like trying to make UV, along with this Python build standalone project,

00:06:58.760 --> 00:07:02.060
the new way to install Python.

00:07:02.060 --> 00:07:03.380
And for me, it is.

00:07:03.380 --> 00:07:05.480
I'm using it all every day now.

00:07:05.480 --> 00:07:08.700
100% same for me.

00:07:09.500 --> 00:07:12.180
So pretty short article talking about this.

00:07:12.180 --> 00:07:18.460
But it is kind of interesting that talking, it talks about what the project is at first.

00:07:18.460 --> 00:07:22.040
It talks about the future of Python standalone, Python distributions.

00:07:22.040 --> 00:07:29.000
Also, what they have in mind for the project that looks like they want to keep the project up to date

00:07:29.000 --> 00:07:30.400
with Python releases, of course.

00:07:31.240 --> 00:07:34.900
And then upstream changes to the CPython build system, possibly.

00:07:34.900 --> 00:07:40.700
And then remove some of the third is remove some of the project's existing limitations.

00:07:40.700 --> 00:07:42.500
What are the existing ones?

00:07:42.500 --> 00:07:47.480
It ships MUSL-based Python builds.

00:07:47.480 --> 00:07:50.560
They're incompatible with Python extension modules.

00:07:50.560 --> 00:07:52.120
I don't know what that means.

00:07:52.120 --> 00:07:55.360
I don't know what MUSL is, so I'm going to move on from that.

00:07:55.360 --> 00:07:55.880
Okay.

00:07:55.880 --> 00:08:00.340
And then improve the project's Python build and release process.

00:08:00.580 --> 00:08:05.620
Just, you know, good stewardship for this project, and I'm really happy about that.

00:08:05.620 --> 00:08:15.100
I, along with this, I was interested to read a thread from Charlie Marsh about what, it said,

00:08:15.100 --> 00:08:20.340
Python builds downloads exploded in popularity with over 70 million downloads all time.

00:08:20.340 --> 00:08:26.840
I'm going to put a link to this thread on Blue Sky into the show notes also,

00:08:26.980 --> 00:08:30.860
because it's interesting to, it's an interesting discussion.

00:08:30.860 --> 00:08:36.420
And I learned something through here that I didn't know before.

00:08:36.420 --> 00:08:42.620
It said that the Python, I didn't know this, that the Python.org download, the download from Python.org,

00:08:43.300 --> 00:08:48.540
it actually downloads an installer that builds Python from source on your machine.

00:08:48.540 --> 00:08:49.880
For Linux.

00:08:49.880 --> 00:08:50.780
For Linux.

00:08:50.780 --> 00:08:51.180
Okay.

00:08:51.180 --> 00:08:53.640
It says for Linux.

00:08:53.640 --> 00:08:54.180
Okay.

00:08:54.180 --> 00:08:55.080
So for Linux.

00:08:55.080 --> 00:09:00.020
Yeah, because the macOS and the Windows ones install way too fast.

00:09:00.020 --> 00:09:05.440
The building Python from source is like a 10-minute deal if it runs the tests and stuff.

00:09:05.720 --> 00:09:06.860
So, okay.

00:09:06.860 --> 00:09:07.700
Yeah.

00:09:07.700 --> 00:09:12.440
So, because I didn't think I was doing that on, yeah.

00:09:12.440 --> 00:09:12.920
Anyway.

00:09:12.920 --> 00:09:15.340
You didn't get the error, VCVars bat couldn't be found.

00:09:15.340 --> 00:09:18.800
I didn't do that for a while.

00:09:18.800 --> 00:09:23.580
So, yeah, I guess a bigger deal for people that are not running Windows or Mac,

00:09:23.580 --> 00:09:25.780
but that's really like all the servers and stuff.

00:09:25.780 --> 00:09:26.260
Yeah.

00:09:26.260 --> 00:09:33.080
Well, I think the other thing that's really non-obvious here is like,

00:09:33.080 --> 00:09:35.160
what is this build standalone anyway?

00:09:35.160 --> 00:09:39.400
Why don't we just download the installer and just run it or just take the result of the installer

00:09:39.400 --> 00:09:42.420
and clunk it out into your machine or something?

00:09:42.420 --> 00:09:49.800
So, my understanding is the non-standalone one depends on other foundational things in the system,

00:09:49.800 --> 00:09:53.440
especially in Linux, but also in other places.

00:09:53.660 --> 00:09:57.520
If you want to be able to just copy it over, you can't do that.

00:09:57.520 --> 00:10:02.920
And so, one of the things that they're talking about, one of the four points of the direction

00:10:02.920 --> 00:10:07.600
that they're trying to go that Charlie laid out was trying to upstream some of these changes

00:10:07.600 --> 00:10:09.720
back into CPython itself.

00:10:09.720 --> 00:10:13.120
I think it might be number one of the future.

00:10:13.120 --> 00:10:13.960
Yeah.

00:10:13.960 --> 00:10:15.300
Upstream the, no, number two.

00:10:15.300 --> 00:10:16.140
Yeah.

00:10:16.140 --> 00:10:20.760
Upstream the changes to the CPython build system because they have to patch Python

00:10:20.760 --> 00:10:25.780
in order to make this actually build, which is why it's a pain in the butt to maintain.

00:10:25.780 --> 00:10:32.140
And then how many combinatorial variations of that do you get for different platforms and stuff, right?

00:10:32.140 --> 00:10:32.800
Yeah.

00:10:33.060 --> 00:10:38.500
And so, trying to say, look, we've done these things to make it build more simply with fewer dependencies.

00:10:38.500 --> 00:10:40.500
Let's maybe make that part of Python.

00:10:40.500 --> 00:10:46.940
I don't know about you, but I have not seen a single problem with uv Python, you know, Python build standalone Python,

00:10:46.940 --> 00:10:49.180
compared to system Python.

00:10:49.180 --> 00:10:55.140
It's not like, oh, well, the certificates don't validate, or this thing doesn't work, or it doesn't have SSL,

00:10:55.140 --> 00:10:57.720
or some weird thing like a dependency might be missing.

00:10:57.840 --> 00:10:58.720
It seems fine to me.

00:10:58.720 --> 00:11:07.300
And actually, I would be more, if I'm like running a server or something,

00:11:07.300 --> 00:11:14.300
I'd be more worried about installing it separately and building it on each of the machines I'm installing it on

00:11:14.300 --> 00:11:18.620
than I would having like, you know, one install that goes everywhere.

00:11:20.060 --> 00:11:23.360
Because, you know, anyway.

00:11:23.360 --> 00:11:29.180
Yeah, and I can tell you that pythonbytes.fm is powered by Python 3.13.1,

00:11:29.180 --> 00:11:33.340
based, derived from, or gotten from this method here.

00:11:33.340 --> 00:11:34.020
Yeah.

00:11:34.020 --> 00:11:35.440
Yeah, anyway.

00:11:35.440 --> 00:11:35.980
Yeah.

00:11:35.980 --> 00:11:41.500
Big news that actually probably doesn't mean much to individual users,

00:11:41.500 --> 00:11:46.820
other than, I think that we can try, we had a little bit of concern about whether or not, you know,

00:11:46.820 --> 00:11:54.060
this one project, it was sitting heavily on one person, one developer to maintain,

00:11:54.060 --> 00:11:57.320
and I'm glad that it's Astral helping out with this now, too.

00:11:57.320 --> 00:11:58.480
Yeah, I agree.

00:11:58.620 --> 00:12:05.740
And if you read Greg's announcement there, transferring Python build standalone stewardship to Astral,

00:12:05.740 --> 00:12:12.740
that he talks about how the Astral folks actually, for a while, have been core contributors to the project,

00:12:12.740 --> 00:12:16.320
and they've been working from the outside to help keep this thing going,

00:12:16.320 --> 00:12:18.520
because they realize how important it is to this feature, right?

00:12:18.520 --> 00:12:20.420
Yeah.

00:12:20.420 --> 00:12:24.620
And also, I read, I don't know if it was in this or somewhere else,

00:12:24.700 --> 00:12:28.340
but I essentially read that the project was, I mean,

00:12:28.340 --> 00:12:30.740
Astral was really working on it for several months anyway.

00:12:30.740 --> 00:12:31.960
Yeah, exactly.

00:12:31.960 --> 00:12:36.740
This is mostly an official announcement is all.

00:12:36.740 --> 00:12:38.280
Yeah.

00:12:38.280 --> 00:12:42.640
One final parting thought, Brian, is right there in this, where you are,

00:12:42.640 --> 00:12:44.280
it says, as, this isn't Greg's announcement,

00:12:44.280 --> 00:12:47.260
as I wrote in my shifting open source priorities in March,

00:12:47.260 --> 00:12:47.760
Yeah.

00:12:47.760 --> 00:12:53.560
this is an interesting challenge that people can run into with projects that are run by one person, right?

00:12:53.560 --> 00:12:54.580
Yeah.

00:12:54.580 --> 00:12:58.860
The guy had a kid, wanted to spend more time with the kid,

00:12:58.860 --> 00:13:01.680
was feeling worn out by the projects and decided,

00:13:01.680 --> 00:13:09.580
well, and also talks about how he really just cares way more about Rust than he does about Python these days,

00:13:09.580 --> 00:13:10.900
which is fine.

00:13:10.900 --> 00:13:16.740
Like, you can, you're not married, you know, for life to a technology, you know,

00:13:16.740 --> 00:13:18.480
go where your heart takes you.

00:13:18.480 --> 00:13:21.680
But that's a challenge for projects that are run by one person.

00:13:21.680 --> 00:13:28.280
I think it's worth reading this thing as well, just for people to get a sense of, you know,

00:13:28.280 --> 00:13:33.280
when open source projects take off, but it's not necessarily a good fit.

00:13:33.280 --> 00:13:34.560
Yeah.

00:13:34.560 --> 00:13:35.320
Yeah.

00:13:35.320 --> 00:13:38.340
But thanks to Gregory for creating this and keeping it going.

00:13:38.620 --> 00:13:43.340
He's also known for the PyOxidizer project, which came close,

00:13:43.340 --> 00:13:46.720
but didn't quite get us to a single binary of our Python apps.

00:13:46.720 --> 00:13:48.040
Yeah.

00:13:48.040 --> 00:13:48.960
Interesting.

00:13:48.960 --> 00:13:49.780
Okay.

00:13:49.780 --> 00:13:50.680
Yeah.

00:13:50.680 --> 00:13:51.640
I really am.

00:13:52.500 --> 00:13:56.380
It's really cool that he made sure that this was in good hands before shifting it over.

00:13:56.380 --> 00:13:57.640
Yeah, absolutely.

00:13:57.640 --> 00:13:58.500
Absolutely.

00:13:58.500 --> 00:14:00.420
All right.

00:14:00.420 --> 00:14:00.840
All right.

00:14:00.840 --> 00:14:02.700
On to the next.

00:14:02.700 --> 00:14:04.360
On to the next thing.

00:14:04.360 --> 00:14:07.160
So I talked about, there's a theme here.

00:14:07.160 --> 00:14:10.200
I talked about the jitters from having too much coffee.

00:14:10.200 --> 00:14:11.260
Well, let's talk about mocha.

00:14:12.100 --> 00:14:15.440
Maybe if we put some hot chocolate and some sugar in with it, it'll be better.

00:14:15.440 --> 00:14:16.760
No, probably not.

00:14:16.760 --> 00:14:22.960
So this project, this project is by Delario and it's called Mocha Pie.

00:14:22.960 --> 00:14:26.080
So Mocha, let's like work our way inside out.

00:14:26.080 --> 00:14:33.040
So Mocha is a high performance concurrent caching library for Rust.

00:14:34.480 --> 00:14:38.440
Not a concurrent caching server like Redis.

00:14:38.440 --> 00:14:42.600
Think SQLite, but for caching.

00:14:42.600 --> 00:14:44.500
Right?

00:14:44.500 --> 00:14:51.260
SQLite is written in C, not Rust, but it's an in-process sort of deal, which is pretty neat.

00:14:51.260 --> 00:14:54.600
And this itself is inspired by Caffeine for Java, right?

00:14:54.600 --> 00:14:57.840
This is kind of like turtles all the way down, like ports all the way down.

00:14:57.840 --> 00:15:02.000
So it provides a caching implementation on top of dictionaries.

00:15:02.780 --> 00:15:08.160
They support full concurrency of retrievals and high expected concurrencies for updates.

00:15:08.160 --> 00:15:09.180
All right.

00:15:09.180 --> 00:15:13.360
So thread safe, highly concurrent, in-memory cache implementation, sync, and async.

00:15:13.360 --> 00:15:21.120
Can be bounded by the maximum number of entries, the total weighted size, size aware eviction,

00:15:21.120 --> 00:15:23.560
like kicking large things out versus small things.

00:15:23.560 --> 00:15:30.320
You can have cache controlled by least frequently used, by last recently used,

00:15:30.440 --> 00:15:36.940
like I want to kick out things that are over two minutes.

00:15:36.940 --> 00:15:40.440
But if you've got room based on something, that's fine.

00:15:40.440 --> 00:15:43.680
You can give them a time to live, a time to idle.

00:15:43.680 --> 00:15:44.000
Right?

00:15:44.000 --> 00:15:45.660
Idle is a really cool, interesting one.

00:15:45.660 --> 00:15:47.760
Like when was this last access?

00:15:47.880 --> 00:15:52.420
So if you've got something that's old, but is used all the time in your app, and then something

00:15:52.420 --> 00:15:58.800
that's somewhat new, but it kind of hasn't got used that much, it'd be better to kick out

00:15:58.800 --> 00:16:00.260
that new one rather than the old one.

00:16:00.260 --> 00:16:00.900
Right?

00:16:00.900 --> 00:16:01.260
Uh-huh.

00:16:01.260 --> 00:16:01.580
Yeah.

00:16:01.580 --> 00:16:02.180
Okay.

00:16:02.280 --> 00:16:03.860
So that's all just straight Mocha.

00:16:03.860 --> 00:16:07.580
Mocha.py is Python binding for this.

00:16:07.580 --> 00:16:08.940
Here we go again.

00:16:08.940 --> 00:16:10.680
Rust library for Python.

00:16:10.680 --> 00:16:14.540
They're probably getting VC money from this, I'm telling you.

00:16:14.540 --> 00:16:15.160
Okay.

00:16:15.160 --> 00:16:16.720
No, just joking.

00:16:16.720 --> 00:16:17.460
Sort of.

00:16:17.460 --> 00:16:24.100
So for the Mocha.py thing, it has a synchronous cache, which supports basically thread-safe memory.

00:16:24.220 --> 00:16:31.980
It just like wraps the thing, so time to live, time to idle, size of concurrency, all these

00:16:31.980 --> 00:16:33.680
things that you can imagine.

00:16:33.680 --> 00:16:35.920
And so there's a couple interesting ways.

00:16:35.920 --> 00:16:40.440
You can just say cache.setSomeValue, or you can say cache.getSomeValue.

00:16:40.440 --> 00:16:42.260
That's one way to use it.

00:16:42.260 --> 00:16:47.040
Another one is you can use it as, this is actually pretty amazing.

00:16:47.040 --> 00:16:51.840
You can use it as an LRU cache function decorator alternative.

00:16:51.840 --> 00:16:53.080
Oh, wow.

00:16:53.080 --> 00:16:53.860
Right?

00:16:53.860 --> 00:16:59.640
So one of the things you can do that's really easy to speed up Python code with not writing

00:16:59.640 --> 00:17:04.120
much code, you don't have to maintain much, is you just put a decorator, functools.lrucache,

00:17:04.120 --> 00:17:09.360
onto it, and it'll look at the hash value of all the inbound parameters and say, if you

00:17:09.360 --> 00:17:11.880
pass me the same parameters, you're getting the same output.

00:17:11.880 --> 00:17:12.940
Right?

00:17:12.940 --> 00:17:13.560
Yeah.

00:17:13.560 --> 00:17:15.920
And it just does that, just straight in Python memory.

00:17:15.920 --> 00:17:21.740
But this would be backed by this high-performance concurrent Rust internal library.

00:17:21.740 --> 00:17:22.820
It's still in process, right?

00:17:23.500 --> 00:17:23.860
Yeah.

00:17:23.860 --> 00:17:24.460
So you can say.

00:17:24.460 --> 00:17:25.080
Yeah, go ahead.

00:17:25.080 --> 00:17:25.240
Sorry.

00:17:25.240 --> 00:17:25.280
Sorry.

00:17:25.280 --> 00:17:28.620
With the time to live and time to, you know.

00:17:28.620 --> 00:17:29.480
Time to idle.

00:17:29.480 --> 00:17:29.760
Yeah.

00:17:29.760 --> 00:17:30.160
Especially.

00:17:30.160 --> 00:17:32.080
That's cool.

00:17:32.080 --> 00:17:32.800
Yeah.

00:17:32.800 --> 00:17:33.620
This is pretty cool.

00:17:33.960 --> 00:17:41.880
And there's so much talk about the thing supporting Mocha itself, the Rust version, supporting asynchronous

00:17:41.880 --> 00:17:43.240
behavior, right?

00:17:43.240 --> 00:17:44.500
I'm like, okay.

00:17:45.440 --> 00:17:56.660
If it has all these asynchronous capabilities, what's the story with Python and its async and

00:17:56.660 --> 00:17:57.200
await, right?

00:17:57.200 --> 00:17:57.700
Yeah.

00:17:57.700 --> 00:18:02.200
So I filed an issue, which I don't really like to do, but that's how you ask questions

00:18:02.200 --> 00:18:03.260
apparently, and then you close it.

00:18:03.260 --> 00:18:06.240
So I said, hey, cool project.

00:18:06.240 --> 00:18:12.400
Since it says thread safe, highly concurrent in-memory implementation, what's the Python async

00:18:12.400 --> 00:18:12.780
story?

00:18:12.980 --> 00:18:18.680
And so they responded, this will work if you put the decorator on there.

00:18:18.680 --> 00:18:26.240
So remember how I was complaining that it's sort of weird that the func tools and iter tools

00:18:26.240 --> 00:18:27.400
don't support async?

00:18:28.120 --> 00:18:35.360
So this func tool-like thing supports async and sync functions as well, right?

00:18:35.360 --> 00:18:38.760
So they just have an implementation in the center that says, is it a coroutine?

00:18:38.760 --> 00:18:39.340
Do this.

00:18:39.340 --> 00:18:39.640
Else?

00:18:39.640 --> 00:18:40.140
Do that.

00:18:40.140 --> 00:18:48.380
So you can use the caching decorator like we talked about, like the LRU cache thing already

00:18:48.380 --> 00:18:51.140
on async functions and sync functions.

00:18:51.140 --> 00:18:51.800
So that's fine.

00:18:51.800 --> 00:18:54.760
And then I said, well, what about cache get and set?

00:18:55.280 --> 00:18:58.280
And Deliro says, probably doesn't make sense to do it.

00:18:58.280 --> 00:19:00.480
It takes 230 nanoseconds.

00:19:00.480 --> 00:19:04.740
So you can do 4.4 million calls a second.

00:19:04.740 --> 00:19:12.960
And set is 1.3 million sets per second for a cache size of 10,000 that's fully occupied on

00:19:12.960 --> 00:19:14.520
a simply M1 Mac.

00:19:14.520 --> 00:19:15.540
So you know what?

00:19:15.540 --> 00:19:18.300
Probably not.

00:19:18.300 --> 00:19:24.620
But there might be some ways to expand this in the future.

00:19:24.620 --> 00:19:25.120
I don't know.

00:19:25.260 --> 00:19:27.700
But yeah, I would say probably not.

00:19:27.700 --> 00:19:28.900
Probably not needed.

00:19:28.900 --> 00:19:32.240
Because you're going to probably add more overhead just to juggle the async stuff.

00:19:32.240 --> 00:19:33.700
Right?

00:19:33.700 --> 00:19:35.060
Yeah.

00:19:35.060 --> 00:19:42.100
And also, just if the supported method is through the decorator and whatever you need,

00:19:42.100 --> 00:19:44.920
you could just put your code in a function to do.

00:19:44.920 --> 00:19:45.280
Yeah.

00:19:45.280 --> 00:19:48.140
I mean, if that were Redis, you would absolutely want an async version.

00:19:48.140 --> 00:19:49.480
Because you're talking to another server.

00:19:49.480 --> 00:19:50.160
Yeah.

00:19:50.160 --> 00:19:51.680
And there's that latency in the network.

00:19:51.900 --> 00:19:53.340
But yeah.

00:19:53.340 --> 00:19:57.980
If you can do 4 million a second, then probably, I doubt you can do 4 million awaits a second.

00:19:57.980 --> 00:19:59.520
But it's much lower.

00:19:59.720 --> 00:20:06.020
So the cache get and set really are just that where you, the benefit of those is probably just for,

00:20:06.020 --> 00:20:10.260
because we want a really fast caching system or something.

00:20:10.260 --> 00:20:10.640
Yeah.

00:20:10.640 --> 00:20:11.340
Yeah, exactly.

00:20:11.340 --> 00:20:17.680
And you, there's plenty of times where you say, in this situation, I want to get this out of the cache and then keep it for a while.

00:20:17.680 --> 00:20:22.480
Like, if I had a user who logged in and I want to just hold their user account with all their details,

00:20:22.480 --> 00:20:29.420
and I've used their ID as the key and their actual user object as the object that goes in, that's fine.

00:20:29.420 --> 00:20:36.240
But you wouldn't use that as a cache decorator because typically you might see that coming out of a database,

00:20:36.240 --> 00:20:37.740
something like that.

00:20:37.740 --> 00:20:43.940
And then if you pass the same user in, it's like, it's similar, but it's a different database object.

00:20:43.940 --> 00:20:44.460
Right?

00:20:44.460 --> 00:20:47.760
You can run into real weird situations where they're equivalent, but they're not equivalent.

00:20:47.760 --> 00:20:48.260
Yeah.

00:20:48.900 --> 00:20:51.400
And then you end up not using the cache.

00:20:51.400 --> 00:20:53.740
So anyway, I think that might be where you would do it.

00:20:53.740 --> 00:20:54.860
But anyway, I think this is pretty cool.

00:20:54.860 --> 00:20:56.300
People can check it out.

00:20:56.300 --> 00:20:57.200
Yeah.

00:20:57.200 --> 00:21:02.540
And it is not, I don't believe it is like super popular here in, you know, 100 stars.

00:21:02.540 --> 00:21:03.860
It kind of has shined a light on it.

00:21:03.860 --> 00:21:08.880
But if you go over to the Mocha thing, you know, it's got 1,700 stars.

00:21:08.880 --> 00:21:13.900
And this is kind of just a Python UI on top of it, API on top of it.

00:21:13.900 --> 00:21:16.740
Yeah, but it's pretty recent.

00:21:16.920 --> 00:21:19.240
I mean, it's a few weeks old, it looks like.

00:21:19.240 --> 00:21:20.880
It's just a baby.

00:21:20.880 --> 00:21:21.820
It's just a baby.

00:21:21.820 --> 00:21:22.800
It's okay to have.

00:21:22.800 --> 00:21:24.940
100 stars is pretty good for it.

00:21:24.940 --> 00:21:25.980
Yeah, it's pretty good, actually.

00:21:25.980 --> 00:21:26.840
Yeah, it's pretty good.

00:21:26.840 --> 00:21:27.440
It looks cool.

00:21:27.440 --> 00:21:29.140
So now you know.

00:21:29.140 --> 00:21:30.540
All right.

00:21:30.540 --> 00:21:32.220
I want to shift back to uv.

00:21:32.220 --> 00:21:33.860
I'm kind of in a uv mood.

00:21:33.860 --> 00:21:37.040
I'm missing the sun, apparently.

00:21:37.040 --> 00:21:50.140
But there's an article from the SAS Pegasus blog about UV, an in-depth guide to Python's fast and ambitious new package manager.

00:21:50.140 --> 00:21:54.140
And a lot of people have written about uv already, which is great.

00:21:54.140 --> 00:22:04.720
But I really, I have been really excited about when I learned about uv Sync and started using that and all the different ways to use uv.

00:22:04.720 --> 00:22:06.500
It's a pretty powerful tool.

00:22:06.500 --> 00:22:08.900
So it's not really one thing.

00:22:08.960 --> 00:22:10.280
It's designed to be a lot.

00:22:10.280 --> 00:22:15.000
So I appreciate, you know, articles like this.

00:22:15.000 --> 00:22:16.620
But also, I really like this one.

00:22:16.620 --> 00:22:30.480
So it starts out with pretty much who is, which is with a funny meme of a whole bunch of different commands to install Python and update it and install, create a virtual environment.

00:22:30.960 --> 00:22:32.540
And sync your requirements.

00:22:32.540 --> 00:22:35.340
And all of that is just done with uv Sync now.

00:22:35.340 --> 00:22:37.800
You can do it all in one, which is pretty sweet.

00:22:37.800 --> 00:22:39.720
I don't use uv Sync.

00:22:39.720 --> 00:22:43.660
I use UV, V, E, and V, dash dash, Python 313 or something like that.

00:22:43.660 --> 00:22:44.300
But, you know, same.

00:22:44.300 --> 00:22:45.260
Yeah.

00:22:45.260 --> 00:22:49.360
I'm using both, depending on whether or not I have a project set up already.

00:22:49.360 --> 00:22:53.840
So it talks about what is UV, why use it.

00:22:53.840 --> 00:22:58.780
And we're just going to assume that you already know if you listen to this podcast, because it's really fast.

00:23:00.240 --> 00:23:10.900
But a lot of discussion of different workflows talks about installing, adopting uv into your existing workflows, doing install.

00:23:10.900 --> 00:23:13.400
But I'm going to pop down to the end.

00:23:13.400 --> 00:23:16.600
Adopting uv into your workflow.

00:23:16.600 --> 00:23:18.040
There's this cool cheat sheet.

00:23:18.040 --> 00:23:26.600
This is pretty much what the entire article talks about, the different parts, is you can use uv Python install to install Python.

00:23:26.600 --> 00:23:31.480
You can use virtual environment, or V, E, and V, to create virtual environments.

00:23:31.480 --> 00:23:32.340
It's really fast.

00:23:32.340 --> 00:23:36.000
And then install packages with uv pip install.

00:23:36.000 --> 00:23:40.920
But then also, you can build your dependencies.

00:23:40.920 --> 00:23:42.920
Like, we would have used pip compile.

00:23:42.920 --> 00:23:45.000
You can use uv pip compile.

00:23:46.020 --> 00:23:49.000
But it's all in one place, all these different commands.

00:23:49.000 --> 00:23:50.420
And these really are the commands.

00:23:50.420 --> 00:23:55.180
The commands listed in this article are really the way I use uv as well.

00:23:55.180 --> 00:23:57.020
So that's why I appreciated it.

00:23:57.020 --> 00:24:06.100
And then a discussion about how to adopt this into your workflow and what that means to get, you know, talking about.

00:24:06.100 --> 00:24:10.580
I mean, a lot of people might not have used sort of lock files before.

00:24:10.840 --> 00:24:15.520
But using lock files with UV, it's so easy that, you know, why not?

00:24:15.520 --> 00:24:18.540
And pinning your dependencies.

00:24:18.540 --> 00:24:21.320
Just some good workflow.

00:24:21.320 --> 00:24:25.900
It's good Python project practices anyway.

00:24:25.900 --> 00:24:26.780
So why not?

00:24:26.780 --> 00:24:28.340
Yeah.

00:24:28.340 --> 00:24:29.860
Yeah, that's great.

00:24:29.860 --> 00:24:34.360
And there's even a few more that you could throw in for the tool, like the equivalency table there.

00:24:34.680 --> 00:24:41.020
You know, there's you for installing CLI tools.

00:24:41.020 --> 00:24:54.520
You could say pipx and just create a virtual environment and install the things and make that in the path and all those sorts of things versus uv tool install or uv run, right?

00:24:54.520 --> 00:24:55.480
Those kind of things as well.

00:24:55.480 --> 00:24:56.120
So, yeah.

00:24:56.120 --> 00:25:01.460
Yeah, it's missing that, which is, you know, I'll feed it back to Corey.

00:25:01.460 --> 00:25:11.700
So one of the reasons why this came up on my radar is I'm working on a project that uses SAS Pegasus.

00:25:11.700 --> 00:25:13.580
So I'm in touch with Corey a lot.

00:25:13.580 --> 00:25:15.160
Nice.

00:25:15.160 --> 00:25:20.660
Yeah, but like the UV, the tool thing, instead, I'm not using pipx anymore.

00:25:20.660 --> 00:25:24.900
The uv tool install is like super cool.

00:25:24.900 --> 00:25:26.560
Yeah, it's super cool.

00:25:26.560 --> 00:25:27.080
It is.

00:25:27.080 --> 00:25:30.500
I've also started using Docker for certain things as well.

00:25:31.200 --> 00:25:31.400
Yeah.

00:25:31.400 --> 00:25:32.440
I don't know.

00:25:32.440 --> 00:25:34.780
It's kind of similar.

00:25:34.780 --> 00:25:45.320
But like, for example, Glances, which is a Python-based server UI visualization tool, you can just say Docker run Glances versus installing Glances.

00:25:45.320 --> 00:25:48.420
And you just leave this machine a little more untouched.

00:25:48.420 --> 00:25:49.180
Yeah.

00:25:49.180 --> 00:25:54.180
One of the interesting things about this article was the point of view.

00:25:55.680 --> 00:26:14.860
At the start, Corey talks about how he's not usually somebody to jump on like multi-tool fads, like pipenv or pyenv for installing, for doing virtual environments better and big project-wides.

00:26:14.860 --> 00:26:22.160
And I like Hatch, but I'm not really using Hatch for my entire workflow sort of person.

00:26:22.160 --> 00:26:24.420
I was using it just for a packager.

00:26:24.420 --> 00:26:31.980
So I'm in the same boat of like, I didn't really need an all-in-one tool, but this one changed my mind.

00:26:32.100 --> 00:26:33.620
And I really like this all-in-one tool.

00:26:33.620 --> 00:26:34.360
Yeah.

00:26:34.360 --> 00:26:40.360
I'm still not bought into the project management side, but I love using uv for the stuff, the pieces.

00:26:40.360 --> 00:26:41.740
Yeah.

00:26:41.740 --> 00:26:41.920
Yeah.

00:26:43.560 --> 00:26:46.660
Anyway, what do we got next?

00:26:46.660 --> 00:26:51.700
We have a quick bit of follow-up here, but I just did some searching.

00:26:51.700 --> 00:27:03.320
So over on PipX, so one of the things that you could say, like, you could use PipX, or there's an open issue on PipX that says integrate uv in some way, right?

00:27:03.320 --> 00:27:10.820
Because PipX is really just a wrapper around create virtual environment, pip install package, pip install-u package, right?

00:27:11.320 --> 00:27:20.200
And so if they just change the internals to say uv pip install, then PipX would all of a sudden become super awesome.

00:27:20.200 --> 00:27:26.580
This recommendation is unfortunately over half a year old, but it does have 21 upvotes.

00:27:26.580 --> 00:27:27.240
So you know what?

00:27:27.240 --> 00:27:29.600
Yeah.

00:27:29.600 --> 00:27:30.700
Who knows?

00:27:30.700 --> 00:27:31.620
That's there.

00:27:31.620 --> 00:27:32.880
Yeah.

00:27:32.880 --> 00:27:33.440
Okay.

00:27:33.440 --> 00:27:36.120
Yeah.

00:27:36.120 --> 00:27:36.920
Okay.

00:27:36.920 --> 00:27:38.500
But that's not what I want to cover next.

00:27:38.500 --> 00:27:41.280
Come on, computer, respawn.

00:27:41.540 --> 00:27:41.940
There we go.

00:27:41.940 --> 00:27:44.960
I think that's it for our items, right?

00:27:44.960 --> 00:27:46.660
We're on to extras.

00:27:46.660 --> 00:27:47.500
Let's have extras now.

00:27:47.500 --> 00:27:47.980
Yeah.

00:27:47.980 --> 00:27:49.120
Let's extra it up.

00:27:49.120 --> 00:27:49.780
Extra.

00:27:49.780 --> 00:27:53.540
So registered for PyCon, I did.

00:27:53.540 --> 00:27:54.960
Oh, cool.

00:27:54.960 --> 00:27:55.640
Yeah.

00:27:55.640 --> 00:27:57.580
Registration came out two days ago.

00:27:57.580 --> 00:27:57.940
I don't know.

00:27:57.940 --> 00:28:03.560
Whenever I posted some message on Blue Sky and Mastodon saying, I registered.

00:28:03.560 --> 00:28:04.000
How about you?

00:28:04.000 --> 00:28:06.380
Whenever that was, that's when the announcement came out.

00:28:06.440 --> 00:28:08.180
So I think a day and a half ago or something like that.

00:28:08.180 --> 00:28:12.060
So there's early bird pricing and all details on there.

00:28:12.500 --> 00:28:17.960
If you want to go and check it out, it's normally $450 for individuals.

00:28:17.960 --> 00:28:24.580
But you could save $50 if you register before January, which is pretty cool.

00:28:24.580 --> 00:28:25.920
There's a bunch of stuff.

00:28:25.920 --> 00:28:29.300
It has all the detailed timeline, which is always interesting.

00:28:29.300 --> 00:28:34.080
You know, like if I want to make sure I attend the Pite Ladies auction, when do I need to do that?

00:28:34.080 --> 00:28:36.040
When is the main thing?

00:28:36.040 --> 00:28:36.840
When is the job fair?

00:28:36.960 --> 00:28:41.920
So most importantly, main conferences, May 16 to May 18, 2025.

00:28:41.920 --> 00:28:44.440
So there it is.

00:28:44.440 --> 00:28:50.320
And congruent with current times mask policy.

00:28:50.320 --> 00:28:50.800
Hooray.

00:28:50.800 --> 00:28:54.440
Optional and encouraged, but not required.

00:28:54.440 --> 00:28:56.580
How about that?

00:28:56.580 --> 00:28:57.460
Yeah.

00:28:57.460 --> 00:28:58.380
Cool.

00:28:58.380 --> 00:28:59.160
Okay.

00:28:59.160 --> 00:29:00.960
I've got a few more real quick ones here.

00:29:00.960 --> 00:29:02.360
I recommend, you know what?

00:29:02.360 --> 00:29:06.180
Something I came across just thinking, like, why don't I support more open source projects?

00:29:06.240 --> 00:29:11.000
Looking at my, my dependencies and stuff that I'm working on.

00:29:11.000 --> 00:29:18.600
Like how much, you know, if everybody who used flask put $1 towards it per month, everybody

00:29:18.600 --> 00:29:21.920
who used it in an important way where it's not just like, oh, I did a tutorial with flask,

00:29:21.920 --> 00:29:25.120
but like, no, I have a project that is important to me.

00:29:25.120 --> 00:29:25.820
And I use flask.

00:29:25.820 --> 00:29:31.160
If everyone put $1 towards it, it would transform that project.

00:29:31.280 --> 00:29:36.200
If everyone who used G-Unicorn put $1 towards it, that would transform it.

00:29:36.200 --> 00:29:36.400
Right?

00:29:36.720 --> 00:29:37.840
So I decided, you know what?

00:29:37.840 --> 00:29:39.940
I'm going to just go to some projects and find the one that I use most.

00:29:39.940 --> 00:29:47.060
And, yeah, I just, I found four that had sponsorships that were off available.

00:29:47.060 --> 00:29:51.820
I was going to support, uv and Pydantic as well.

00:29:51.820 --> 00:29:56.340
But they, for some reason, they do like corporate sponsorships or I tried to do individuals and

00:29:56.340 --> 00:29:57.120
it didn't work.

00:29:57.120 --> 00:30:01.340
And then some other ones like Beanie don't currently have sponsorships, but, you know,

00:30:01.340 --> 00:30:03.600
are really important for the database layer stuff.

00:30:03.600 --> 00:30:08.380
But just think about, you know, put a couple of dollars towards some of these projects.

00:30:08.380 --> 00:30:13.180
It, it'll make zero difference to you if you have a job as a software developer and in the

00:30:13.180 --> 00:30:16.080
aggregate, it'll make a big difference to the health of the ecosystem.

00:30:16.080 --> 00:30:18.060
Yeah.

00:30:18.060 --> 00:30:23.220
Uh, it, it's interesting to think about like that, like just, you know, a couple less coffees

00:30:23.220 --> 00:30:23.620
a month.

00:30:24.120 --> 00:30:27.440
And, yeah, one, you probably cover like three or four projects.

00:30:27.440 --> 00:30:27.980
Yeah.

00:30:27.980 --> 00:30:29.080
Yeah.

00:30:29.080 --> 00:30:35.040
Anyway, I want to encourage people to do that, but you know, if you can't, obviously don't,

00:30:35.040 --> 00:30:37.140
but I don't think it's a big deal.

00:30:37.140 --> 00:30:41.980
Uh, computer, very slow for some reason.

00:30:41.980 --> 00:30:42.920
Don't know why.

00:30:42.920 --> 00:30:45.140
There we go.

00:30:45.140 --> 00:30:45.380
All right.

00:30:45.380 --> 00:30:46.500
Uh, this is the joke.

00:30:46.500 --> 00:30:48.200
So that I'm skipping the joke for a second.

00:30:48.200 --> 00:30:48.780
We'll come back to it.

00:30:48.780 --> 00:30:51.160
There's two things that I wasn't planning on covering, but I'll throw out here really

00:30:51.160 --> 00:30:51.460
quick.

00:30:51.460 --> 00:30:54.100
Uh, yeah, here's my register for PyCon.

00:30:54.100 --> 00:30:58.080
Uh, also wrote a quick, people said, oh my God, Hetzner, we moved to Hetzner and

00:30:58.080 --> 00:31:01.120
they changed this huge thing where they changed their bandwidth and their price.

00:31:01.120 --> 00:31:07.280
And it's like a no nothing sort of deal, like $5 a month more.

00:31:07.280 --> 00:31:08.520
Or anyway, I wrote that up.

00:31:08.520 --> 00:31:10.660
So people can check that out on Mastodon.

00:31:11.060 --> 00:31:15.380
And then, yeah, that's, that's it for all my, my items.

00:31:15.380 --> 00:31:17.300
And then I just got the joke when you're ready for that.

00:31:17.300 --> 00:31:18.440
So let's do your, yours.

00:31:18.440 --> 00:31:20.920
I've got a few, I don't have much commentary on these.

00:31:20.920 --> 00:31:23.820
I just have a few extra things I would wanted to point out.

00:31:24.280 --> 00:31:32.120
Um, Pydantic AI was announced, which, Pydantic AI is a Python agent framework designed

00:31:32.120 --> 00:31:36.720
to make it less painful to build production grade applications with generative AI.

00:31:37.380 --> 00:31:42.040
I don't have really in the commentary about this other than I didn't see this coming,

00:31:42.040 --> 00:31:42.940
but interesting.

00:31:42.940 --> 00:31:49.500
Yeah, very, I've seen messages from, or tweets or whatever from people who do machine learning

00:31:49.500 --> 00:31:51.860
stuff saying, you just need Pydantic.

00:31:51.860 --> 00:31:56.080
I mean, a lot of this is like, I got a JSON thing here and then I'm going to call some other

00:31:56.080 --> 00:32:00.220
thing with other JSON and just suggesting, hey, you could probably use Pydantic to make

00:32:00.220 --> 00:32:00.820
these connections.

00:32:01.040 --> 00:32:03.480
I bet the Pydantic team noticed that as well.

00:32:03.480 --> 00:32:04.240
Okay.

00:32:04.240 --> 00:32:12.580
Um, a couple of commentaries on maybe society and anyway, I'll leave it, leave the, the couple

00:32:12.580 --> 00:32:13.940
other articles I thought was interesting.

00:32:13.940 --> 00:32:21.700
Uh, blue sky, announced, I guess this is old, this is from August, but, anti toxicity

00:32:21.700 --> 00:32:22.860
features on blue sky.

00:32:22.860 --> 00:32:26.320
And, I just, actually appreciate some of these.

00:32:26.320 --> 00:32:29.600
I, I already have hit, I had a troll come by.

00:32:30.160 --> 00:32:36.540
Um, and so there's some things where you can, if people, you can, detach a quoted

00:32:36.540 --> 00:32:36.960
post.

00:32:36.960 --> 00:32:41.440
If, if somebody quotes you and you don't want them to, you can detach yourself from that.

00:32:41.440 --> 00:32:42.480
Um, no, interesting.

00:32:42.480 --> 00:32:44.900
Um, I had, hiding replies.

00:32:44.900 --> 00:32:51.720
I had some, a troll, you can't like delete replies, but I had, somebody just, just idiotic

00:32:51.720 --> 00:32:53.420
reply to something I said.

00:32:53.420 --> 00:32:56.420
And it was obviously just a bot or a troll.

00:32:56.420 --> 00:32:58.140
So you can, you can hide that.

00:32:58.720 --> 00:33:03.340
Um, and as, you know, as blue sky grows, we'll, we'll get trolls also.

00:33:03.340 --> 00:33:08.140
Um, if they're, if they're not affecting you yet, they, they may, they may.

00:33:08.140 --> 00:33:12.540
So, so we do appreciate that there's, there are features around to protect yourself.

00:33:12.540 --> 00:33:14.260
So there's, there's that.

00:33:14.260 --> 00:33:19.900
And then, this, I don't know what to make of this really, but wired fairly mainstream

00:33:19.900 --> 00:33:26.040
magazine, I think, released the wired guide to protecting yourself from government

00:33:26.040 --> 00:33:26.700
surveillance.

00:33:26.700 --> 00:33:29.180
Wow.

00:33:29.180 --> 00:33:34.920
I'm, I just, this is a head shaker of like, I guess we need this.

00:33:34.920 --> 00:33:38.240
I wish we didn't, but wow.

00:33:38.660 --> 00:33:40.340
Um, yeah, there's that.

00:33:40.340 --> 00:33:41.240
So.

00:33:41.240 --> 00:33:42.440
Yeah.

00:33:42.440 --> 00:33:44.340
I can probably say that about some state governments as well.

00:33:44.340 --> 00:33:45.320
Right.

00:33:45.320 --> 00:33:46.440
Every state's different, but.

00:33:46.440 --> 00:33:47.560
Yeah.

00:33:47.560 --> 00:33:48.320
Yeah.

00:33:48.320 --> 00:33:53.820
Depending on your gender and things, you know, it's, it's touch and go some places.

00:33:53.820 --> 00:33:54.480
Yeah.

00:33:54.480 --> 00:33:55.240
Anyway.

00:33:55.240 --> 00:33:58.540
So, that's a little bit of a downer.

00:33:58.540 --> 00:33:59.940
So maybe we need something funny.

00:33:59.940 --> 00:34:00.640
Uh, we do.

00:34:00.700 --> 00:34:05.280
I don't want to spend all the time going down that, that deep rabbit hole instead.

00:34:05.280 --> 00:34:07.800
Let's go infinitely down the rabbit hole.

00:34:07.800 --> 00:34:08.220
Yes.

00:34:08.220 --> 00:34:09.980
So check this out, Brian.

00:34:09.980 --> 00:34:20.160
Somebody who goes by bits, very personal on, blue sky posted what the comments seem

00:34:20.160 --> 00:34:26.080
to indicate is probably a textbook, a print, this is printed by the way, a printed textbook

00:34:26.080 --> 00:34:28.500
on a latech.

00:34:28.500 --> 00:34:29.360
Okay.

00:34:29.360 --> 00:34:30.160
Okay.

00:34:30.440 --> 00:34:40.980
So in the index at the back on page 252, there's an entry for infinite loop and it says

00:34:40.980 --> 00:34:42.420
see page 252.

00:34:42.420 --> 00:34:43.840
I love it so much.

00:34:43.840 --> 00:34:45.160
It's so simple.

00:34:45.160 --> 00:34:45.940
I love it.

00:34:45.940 --> 00:34:46.200
Yeah.

00:34:46.200 --> 00:34:50.160
It's a really good, just like a little Easter egg in there, isn't it?

00:34:50.160 --> 00:34:50.860
Yeah.

00:34:50.860 --> 00:34:53.540
I, I've, I haven't seen it for infinite loop.

00:34:53.540 --> 00:34:56.740
I saw that, somebody did that for recursion.

00:34:56.740 --> 00:34:57.580
Yeah.

00:34:57.580 --> 00:34:57.720
Yeah.

00:34:57.720 --> 00:35:01.160
They, they, they, they're, if you look in the comments, it says that, Carrington and

00:35:01.160 --> 00:35:03.560
Richie has the same, I guess that's probably C or something.

00:35:03.560 --> 00:35:04.380
Yeah.

00:35:04.380 --> 00:35:06.680
The same in under the index for recursion.

00:35:07.180 --> 00:35:09.800
And, it's pretty, it's pretty good.

00:35:09.800 --> 00:35:11.240
Yeah.

00:35:11.240 --> 00:35:11.320
Yeah.

00:35:11.320 --> 00:35:13.000
No, that's funny.

00:35:13.000 --> 00:35:16.860
And there's somebody that says, for those who can't be bothered, search, Google search

00:35:16.860 --> 00:35:17.480
for recursion.

00:35:17.480 --> 00:35:18.540
Did you mean recursion?

00:35:21.540 --> 00:35:21.940
Yeah.

00:35:21.940 --> 00:35:23.160
Apparently.

00:35:23.160 --> 00:35:26.220
I kind of feel bad for people that actually really need to know what that means.

00:35:26.220 --> 00:35:28.680
Good luck.

00:35:28.680 --> 00:35:29.880
Yeah.

00:35:29.880 --> 00:35:30.720
Good luck with that, huh?

00:35:30.720 --> 00:35:31.760
Uh, so.

00:35:31.760 --> 00:35:33.180
Wow.

00:35:33.180 --> 00:35:33.360
Yeah.

00:35:33.360 --> 00:35:34.740
All good.

00:35:34.740 --> 00:35:35.820
All good here.

00:35:35.820 --> 00:35:39.540
We know what recursion and infinite loops are, but we're going to break the loop and get

00:35:39.540 --> 00:35:39.920
out of here, right?

00:35:39.920 --> 00:35:40.560
Yeah.

00:35:40.560 --> 00:35:41.140
Yeah.

00:35:41.140 --> 00:35:43.460
Let's break the loop and say goodbye until next time.

00:35:43.460 --> 00:35:44.760
So thanks a lot.

00:35:44.760 --> 00:35:45.460
Bye.

