WEBVTT

00:00:00.000 --> 00:00:06.520
>> Hey, everyone out there on the livestream. Welcome. Welcome. Thanks for coming. If you


00:00:06.520 --> 00:00:12.160
have any questions, please put them into the comment section. And with that, without further


00:00:12.160 --> 00:00:18.080
ado, I think we should kick it off. So here we go. Hello and welcome to Python Bytes,


00:00:18.080 --> 00:00:22.160
where we deliver Python news and headlines directly to your earbuds. This is episode


00:00:22.160 --> 00:00:27.000
220, recorded February 10th, 2021. I'm Michael Kennedy.


00:00:27.000 --> 00:00:28.400
>> And I'm Brian Okken.


00:00:28.400 --> 00:00:31.400
And we have a special guest, Hannah, welcome.


00:00:31.400 --> 00:00:32.240
- Hello.


00:00:32.240 --> 00:00:34.800
- Hannah Stepnik, welcome to the show.


00:00:34.800 --> 00:00:36.400
It is so great to have you here.


00:00:36.400 --> 00:00:39.720
- Thank you, I'm happy to be here.


00:00:39.720 --> 00:00:40.560
- It's good to have you.


00:00:40.560 --> 00:00:42.920
It's so cool, the internet is a global place.


00:00:42.920 --> 00:00:44.080
We can have people from all over.


00:00:44.080 --> 00:00:47.040
So we've decided to make it an all Portland show this time.


00:00:47.040 --> 00:00:49.520
We could do this in person actually.


00:00:49.520 --> 00:00:51.200
Well, not really because we can't go anywhere,


00:00:51.200 --> 00:00:54.620
but theoretically, geographically anyway.


00:00:54.620 --> 00:00:56.760
Yeah, so all three of us are from Portland, Oregon.


00:00:56.760 --> 00:00:57.640
Very nice.


00:00:57.640 --> 00:01:01.360
Before we jump into the main topics, two quick things.


00:01:01.360 --> 00:01:04.440
One, this episode is brought to you by Datadog.


00:01:04.440 --> 00:01:06.680
Check them out at pythonbytes.fm/datadog.


00:01:06.680 --> 00:01:08.280
And Hannah, do you just want to give people


00:01:08.280 --> 00:01:10.120
a quick background on yourself?


00:01:10.120 --> 00:01:13.480
- Yeah, so I'm Hannah.


00:01:13.480 --> 00:01:17.160
I have written a book, which is weird to say,


00:01:17.160 --> 00:01:21.760
about pandas, but I also just go around


00:01:21.760 --> 00:01:25.480
give talks at various conferences on Python.


00:01:26.720 --> 00:01:31.720
So yeah, like I gave a talk on like a legacy code base


00:01:31.720 --> 00:01:35.780
or re-architecting a legacy code base recently.


00:01:35.780 --> 00:01:37.960
And then--


00:01:37.960 --> 00:01:39.240
- That sounds interesting and challenging.


00:01:39.240 --> 00:01:40.320
- Yeah.


00:01:40.320 --> 00:01:41.920
- What was the legacy language?


00:01:41.920 --> 00:01:46.480
- So it was Python.


00:01:46.480 --> 00:01:49.480
It was like a Flask web application.


00:01:49.480 --> 00:01:54.080
And then also the front end of it was Vue, like Vue.js.


00:01:54.080 --> 00:01:55.600
- Oh yeah.


00:01:55.600 --> 00:01:57.760
So yeah, that's been a fun project.


00:01:57.760 --> 00:01:59.880
That was through work.


00:01:59.880 --> 00:02:03.040
But I think as developers, you're


00:02:03.040 --> 00:02:05.600
pretty much always working with some form of legacy code.


00:02:05.600 --> 00:02:09.240
Just depends on how legacy it really is.


00:02:09.240 --> 00:02:11.800
Well, what could be cutting edge in one person's viewpoint


00:02:11.800 --> 00:02:13.760
might be super legacy in another.


00:02:13.760 --> 00:02:15.600
Like, we're on Python 3.5.


00:02:15.600 --> 00:02:17.520
You wouldn't believe it.


00:02:17.520 --> 00:02:19.280
Right.


00:02:19.280 --> 00:02:20.920
Yeah.


00:02:20.920 --> 00:02:22.080
Very cool.


00:02:22.080 --> 00:02:24.080
Well, it's great to have you here.


00:02:24.080 --> 00:02:26.920
I think maybe we'll start off with our first topic, which


00:02:26.920 --> 00:02:29.680
is sort of along the lines of the data science world,


00:02:29.680 --> 00:02:32.080
some tie-ins to your book.


00:02:32.080 --> 00:02:34.440
And of course, whenever you go to JetBrains,


00:02:34.440 --> 00:02:38.300
you've got to run your CLI to accept the cookies, which


00:02:38.300 --> 00:02:39.560
is fantastic.


00:02:39.560 --> 00:02:42.800
And so this topic, this first topic I want to cover,


00:02:42.800 --> 00:02:44.080
is from JetBrains.


00:02:44.080 --> 00:02:48.360
And it's entitled, "We Downloaded 10 Million Jupyter


00:02:48.360 --> 00:02:48.860
Notebooks."


00:02:48.860 --> 00:02:49.740
I almost said 10,000.


00:02:49.740 --> 00:02:52.960
"10 Million Jupyter Notebooks from GitHub.


00:02:52.960 --> 00:02:53.960
Here's what we learned."


00:02:53.960 --> 00:02:58.560
So this is an article or analysis done by Elena Guzakharina.


00:02:58.560 --> 00:02:59.960
And yeah, pretty neat.


00:02:59.960 --> 00:03:05.200
So they went through and downloaded a whole bunch of these notebooks and just analyzed


00:03:05.200 --> 00:03:06.200
them.


00:03:06.200 --> 00:03:09.720
And there's many, many of them are publicly accessible.


00:03:09.720 --> 00:03:16.360
And a couple years ago, there were 1.2 million Jupyter notebooks that were public.


00:03:16.360 --> 00:03:23.720
As of last October, it was eight times as many, 9.7 million notebooks available on GitHub.


00:03:23.720 --> 00:03:24.720
That's crazy, right?


00:03:24.720 --> 00:03:25.720
- Wow.


00:03:25.720 --> 00:03:26.720
- Yeah.


00:03:26.720 --> 00:03:32.400
So, this is a bunch of really nice pictures and interactive graphs and stuff, so I encourage


00:03:32.400 --> 00:03:34.440
people to go check out the webpage.


00:03:34.440 --> 00:03:39.760
So, for example, one of the questions was, "Well, what language do you think is the most


00:03:39.760 --> 00:03:43.960
popular for data science just by judging on the main language of the notebook?"


00:03:43.960 --> 00:03:45.960
Hannah, you want to take a guess?


00:03:45.960 --> 00:03:46.960
- Oh, yeah.


00:03:46.960 --> 00:03:47.960
Python, for sure.


00:03:47.960 --> 00:03:48.960
Without a doubt.


00:03:48.960 --> 00:03:51.600
- That's for sure.


00:03:51.600 --> 00:03:55.500
The second one, I'm pretty sure no one who's not seen this,


00:03:55.500 --> 00:03:56.900
there's no way they're gonna guess.


00:03:56.900 --> 00:03:57.740
It's Nan.


00:03:57.740 --> 00:04:01.580
We have no idea.


00:04:01.580 --> 00:04:05.300
Like we look, we can't tell what language this is in there.


00:04:05.300 --> 00:04:07.620
But then the other contenders are R and Julia.


00:04:07.620 --> 00:04:09.780
And often people say, oh yeah, well Julia,


00:04:09.780 --> 00:04:12.180
maybe I should go to Julia from Python.


00:04:12.180 --> 00:04:14.060
Well, maybe, but that's not where the trends are.


00:04:14.060 --> 00:04:16.560
Like there's 60,000 versus 9 million.


00:04:16.560 --> 00:04:19.400
You know, as the ratio, I don't know what that number is,


00:04:19.400 --> 00:04:22.060
but it's a percent of a percent type of thing.


00:04:22.060 --> 00:04:24.800
- Wow.


00:04:24.800 --> 00:04:27.720
- They also talk about the Python 2 versus 3 growth


00:04:27.720 --> 00:04:28.560
or difference.


00:04:28.560 --> 00:04:33.200
So in 2008, it was about 50% was Python 2.


00:04:33.200 --> 00:04:37.560
And in 2020, Python 2 is down to 11%.


00:04:37.560 --> 00:04:39.040
And I was thinking about this 11%.


00:04:39.040 --> 00:04:40.880
Like, why do you guys think people,


00:04:40.880 --> 00:04:44.560
there's still 11% there hanging around?


00:04:44.560 --> 00:04:47.560
- I mean, I would guess, speaking of legacy applications,


00:04:48.640 --> 00:04:52.080
Probably it's just hasn't been touched, but yeah


00:04:52.080 --> 00:04:55.000
Very likely the ones that were like the original


00:04:55.000 --> 00:05:00.840
2016-17 ones that were not quite there. They're still public right get up doesn't get rid of them


00:05:00.840 --> 00:05:05.260
The other one is I was thinking, you know, a lot of people do work on Mac


00:05:05.260 --> 00:05:11.320
Or maybe even on some Linux machines that just kind of came at the time with Python 2


00:05:11.320 --> 00:05:14.820
So they're just like well, I'm not gonna change anything. It just I just need to view this thing


00:05:14.820 --> 00:05:19.020
I don't I have Python problem solved right they didn't know that there's more more than one Python


00:05:19.020 --> 00:05:24.860
There's a good breakdown of the different versions another thing that's interesting is looking at the different


00:05:24.860 --> 00:05:32.300
Languages not languages different libraries used during this so like numpy is by far the most likely used and then a ties


00:05:32.300 --> 00:05:37.500
Pandas and matplotlib and then scikit-learn and then OS actually for traversing stuff


00:05:37.500 --> 00:05:40.540
and then there's a huge long tail and they also talk about combinations like


00:05:40.780 --> 00:05:48.780
Pandas and NumPy are common and then pandas and then like seaborn scikit-learn pandas numpy matplotlib and so on as a combo


00:05:48.780 --> 00:05:52.060
And so that's really interesting like what sets of tools data scientists are using


00:05:52.060 --> 00:06:00.660
Yeah, and then another one is they looked at deep learning libraries and pytorch seems to be crushing it in terms of growth


00:06:00.660 --> 00:06:03.940
But not necessarily in terms of popularity. So it grew


00:06:03.940 --> 00:06:08.500
1.3 times or 130% whereas tensorflow is more popular


00:06:08.500 --> 00:06:10.780
but only grew 30% and so on.


00:06:10.780 --> 00:06:12.540
So there's a lot of these types of statistics in there


00:06:12.540 --> 00:06:13.860
I think people will find interesting


00:06:13.860 --> 00:06:18.100
if they want to dive more into this ecosystem.


00:06:18.100 --> 00:06:20.100
You know, it's one thing to have a survey,


00:06:20.100 --> 00:06:20.940
you can go fill out the survey,


00:06:20.940 --> 00:06:22.620
like ask people, what do you use?


00:06:22.620 --> 00:06:24.140
You know, what platform do you run on?


00:06:24.140 --> 00:06:25.260
Vue.js or Linux?


00:06:25.260 --> 00:06:27.220
And like, okay, well that's not really a reasonable question


00:06:27.220 --> 00:06:29.860
but I guess Vue.js, you know?


00:06:29.860 --> 00:06:32.140
But if you just go and look at what they're actually doing


00:06:32.140 --> 00:06:34.940
on places like GitHub, I think you can get a lot of insight.


00:06:34.940 --> 00:06:37.700
- Yeah, for sure.


00:06:37.700 --> 00:06:42.980
- Yeah, I know I use, like I'll go to GitHub pretty frequently, like at work,


00:06:42.980 --> 00:06:46.420
when I'm, you know, just like browsing, like, "I wonder how you do this thing,"


00:06:46.420 --> 00:06:48.260
or like, "What's the most common way to do this?"


00:06:48.260 --> 00:06:49.460
- Yeah, absolutely.


00:06:49.460 --> 00:06:51.700
- Just look up like what's the most popular.


00:06:51.700 --> 00:06:55.700
It's always a pretty good sign if a lot of people are using it.


00:06:55.700 --> 00:06:56.020
- It is.


00:06:56.020 --> 00:07:00.340
One thing I should probably make better use of is I know they started adding


00:07:00.340 --> 00:07:03.580
dependencies, like, "Oh, if you go to Flask, it'll show you Flask is used,"


00:07:03.580 --> 00:07:07.020
and these other GitHub repos and stuff.


00:07:07.020 --> 00:07:09.140
Like you could find interesting little connections.


00:07:09.140 --> 00:07:11.380
I think, oh, this other project uses this cool library


00:07:11.380 --> 00:07:12.820
I know nothing about, but if they're using it,


00:07:12.820 --> 00:07:13.820
it's probably good.


00:07:13.820 --> 00:07:15.720
- Yeah, for sure.


00:07:15.720 --> 00:07:18.260
- Yeah, I love the dependency feature


00:07:18.260 --> 00:07:20.380
of looking who's using it.


00:07:20.380 --> 00:07:21.700
- Yeah, absolutely.


00:07:21.700 --> 00:07:25.500
So Brian, you gonna cover something on testing this time?


00:07:25.500 --> 00:07:27.460
- Yeah, I want--


00:07:27.460 --> 00:07:28.940
- Before we make you.


00:07:28.940 --> 00:07:31.620
(laughing)


00:07:31.620 --> 00:07:33.860
- I wanted to bring up something we brought up before.


00:07:33.860 --> 00:07:38.460
So there's a project called pytest Python Path,


00:07:38.460 --> 00:07:42.900
and it's just a little tiny plugin for pytest.


00:07:42.900 --> 00:07:47.840
And we did cover it briefly in way back in episode 62,


00:07:47.840 --> 00:07:50.220
but at the time I brought it up as,


00:07:50.220 --> 00:07:55.220
so, okay, so I brought it up as a way to just shim,


00:07:55.220 --> 00:07:59.940
like be able to have your test code, see your source code,


00:07:59.940 --> 00:08:02.740
but as just like a shortcut,


00:08:02.740 --> 00:08:05.800
like a stopgap until you actually put together


00:08:05.800 --> 00:08:08.520
like proper packaging for your source code.


00:08:08.520 --> 00:08:12.000
But the more I talk to real life people


00:08:12.000 --> 00:08:15.660
testing all sorts of software and hardware even,


00:08:15.660 --> 00:08:20.260
that's a simplistic view of the world.


00:08:20.260 --> 00:08:24.580
So thinking of everybody is working on packages


00:08:24.580 --> 00:08:26.220
is not real.


00:08:26.220 --> 00:08:28.940
There's applications for instance,


00:08:28.940 --> 00:08:31.100
that they're never going to set up,


00:08:31.100 --> 00:08:33.580
hold their code together as a package.


00:08:33.580 --> 00:08:35.800
And that's legitimate.


00:08:35.800 --> 00:08:38.380
So if you have an application


00:08:38.380 --> 00:08:41.300
and your source code is in your source directory


00:08:41.300 --> 00:08:44.300
and your test code is in your test directory,


00:08:44.300 --> 00:08:47.020
it's just your tests are just not gonna be able


00:08:47.020 --> 00:08:49.140
to see your source code right off the bat.


00:08:49.140 --> 00:08:49.980
So I--


00:08:49.980 --> 00:08:53.540
- What's more tricky is depending on how you run it,


00:08:53.540 --> 00:08:55.820
they will or they won't.


00:08:55.820 --> 00:08:56.660
- Yeah.


00:08:56.660 --> 00:08:58.140
- Right, if you say run it with PyCharm


00:08:58.140 --> 00:08:59.180
and you open up the whole thing


00:08:59.180 --> 00:09:01.180
that can like put together the paths, you're all good.


00:09:01.180 --> 00:09:03.580
But if you then just go into the directory and type pytest,


00:09:03.580 --> 00:09:05.060
well, maybe not.


00:09:05.060 --> 00:09:05.900
- It doesn't work.


00:09:05.900 --> 00:09:08.060
And it just confuses a lot of people.


00:09:08.060 --> 00:09:10.780
And so more and more, I'm recommending people


00:09:10.780 --> 00:09:13.900
to use this little plugin.


00:09:13.900 --> 00:09:18.900
And really, the big benefit is it gives you,


00:09:18.900 --> 00:09:25.860
it does a few things, but the biggie is just


00:09:25.860 --> 00:09:30.500
you can add a Python path setting


00:09:30.500 --> 00:09:32.520
within your pytest any file,


00:09:32.520 --> 00:09:35.660
and you stick your any file at the top of your project.


00:09:35.660 --> 00:09:37.600
And then you just give it a relative path


00:09:37.600 --> 00:09:41.180
to where your source code is like source or SRC


00:09:41.180 --> 00:09:42.680
or something else.


00:09:42.680 --> 00:09:45.660
And then pytest from then on,


00:09:45.660 --> 00:09:47.780
we'll be able to see your source code.


00:09:47.780 --> 00:09:49.580
It's a really simple solution.


00:09:49.580 --> 00:09:51.780
It's just, I-


00:09:51.780 --> 00:09:55.220
- That's way better than what I do.


00:09:55.220 --> 00:09:56.420
I don't think it's a stopgap.


00:09:56.420 --> 00:09:57.260
I think it's awesome.


00:09:57.260 --> 00:09:58.100
So.


00:09:58.100 --> 00:09:59.020
- Yeah, I totally agree.


00:09:59.020 --> 00:10:01.660
What I do a lot of times is certain parts of my code,


00:10:01.660 --> 00:10:03.700
I'm like, this is gonna get imported.


00:10:03.700 --> 00:10:06.660
So for me, the real tricky thing is Alembic,


00:10:06.660 --> 00:10:11.660
the database migration tool and the tests and the web app.


00:10:11.660 --> 00:10:14.180
And usually I can get the tests in the web app to work


00:10:14.180 --> 00:10:15.480
just fine running them directly.


00:10:15.480 --> 00:10:18.220
But for some reason, Alembic always seems to get weird,


00:10:18.220 --> 00:10:20.740
like working directories that don't line up in the same way.


00:10:20.740 --> 00:10:22.100
So it can't import stuff.


00:10:22.100 --> 00:10:25.180
So a lot of times I'll put at the top of some file,


00:10:25.180 --> 00:10:29.980
you know, go to the Python path and add, you know,


00:10:29.980 --> 00:10:32.620
get the directory name from dunderfile


00:10:32.620 --> 00:10:35.860
and go to the parent, add that to the Python path.


00:10:35.860 --> 00:10:38.420
And now it's gonna work from then on basically.


00:10:38.420 --> 00:10:40.300
And this seems like a nicer one,


00:10:40.300 --> 00:10:43.500
although it doesn't help me with Olympic, but still.


00:10:43.500 --> 00:10:45.780
- But it might, you might be able to add


00:10:45.780 --> 00:10:47.860
the Olympic path right to it, so.


00:10:47.860 --> 00:10:49.540
- Yeah, yeah, for sure.


00:10:49.540 --> 00:10:51.380
Very cool, so it's, yeah, go ahead, Hannah.


00:10:51.380 --> 00:10:52.900
- Oh, I was just gonna say, yeah, like,


00:10:52.900 --> 00:10:54.920
this is something I like pretty much every time


00:10:54.920 --> 00:10:59.800
I set up a new project, I always have to screw with the Python path.


00:10:59.800 --> 00:11:03.160
I always run it initially and then it's like, "Oh, can't find blah, blah, blah."


00:11:03.160 --> 00:11:06.880
And I'm like, "Oh, here we go again."


00:11:06.880 --> 00:11:12.280
But I usually always run my projects from Docker though, so I just hard code that stuff


00:11:12.280 --> 00:11:13.280
like just directly.


00:11:13.280 --> 00:11:14.280
Yeah, once you get it set up.


00:11:14.280 --> 00:11:15.280
Yeah, that's cool.


00:11:15.280 --> 00:11:16.280
Yeah.


00:11:16.280 --> 00:11:17.280
Nice.


00:11:17.280 --> 00:11:22.120
I dream of days when I can use Docker again because I have an M1 Mac and it's in super


00:11:22.120 --> 00:11:24.120
early, early beta stages.


00:11:24.120 --> 00:11:25.560
- I know.


00:11:25.560 --> 00:11:26.400
- Yeah, it's all good.


00:11:26.400 --> 00:11:28.120
I don't mind too much because I don't use it that much,


00:11:28.120 --> 00:11:29.300
but still cool.


00:11:29.300 --> 00:11:31.600
Brian, it says something about .pth,


00:11:31.600 --> 00:11:33.520
I'm guessing path files.


00:11:33.520 --> 00:11:34.360
Do you know anything about this?


00:11:34.360 --> 00:11:36.600
I have no idea what those are.


00:11:36.600 --> 00:11:37.880
- Oh, .pth files.


00:11:37.880 --> 00:11:42.880
So there's, yeah, there are a way to,


00:11:42.880 --> 00:11:46.360
I don't know a lot, I don't know the detail,


00:11:46.360 --> 00:11:50.180
the real big details, but it's a way to have a,


00:11:50.180 --> 00:11:53.560
you can have a list of different paths


00:11:53.560 --> 00:11:57.320
within that file and if you import it,


00:11:57.320 --> 00:12:00.060
or don't import it, if you include it in your path,


00:12:00.060 --> 00:12:05.440
then Python I think includes all of the contents into,


00:12:05.440 --> 00:12:08.680
anyway, actually I'm blown smoke, I don't know the details.


00:12:08.680 --> 00:12:09.520
- Okay. - Sorry.


00:12:09.520 --> 00:12:11.560
- Yeah, but apparently you can have a little more control


00:12:11.560 --> 00:12:14.060
with PTH files, whatever those are, awesome.


00:12:14.060 --> 00:12:16.920
Yeah, very cool. - Yeah, I don't


00:12:16.920 --> 00:12:18.920
know much about that either, unfortunately.


00:12:18.920 --> 00:12:21.800
- I mean, I've been using OS.path, so what do I know?


00:12:21.800 --> 00:12:23.520
All right. (laughing)


00:12:23.520 --> 00:12:29.960
Speaking of what do I know? I could definitely learn more about pandas and that's one of your items here. I Hannah. Yeah, so


00:12:29.960 --> 00:12:32.480
I thought


00:12:32.480 --> 00:12:38.560
Maybe I just give like a little snippet of kind of like some of the stuff I talk about in the book


00:12:38.560 --> 00:12:41.960
Fantastic. So yeah


00:12:41.960 --> 00:12:49.080
Here we go. So if we're looking at pandas in terms of like the dependency hierarchy


00:12:49.800 --> 00:12:52.480
Well, and I guess I should start at the beginning.


00:12:52.480 --> 00:12:57.920
So what is Pandas, if you're not familiar with it, it's a data analysis library for


00:12:57.920 --> 00:12:58.920
Python.


00:12:58.920 --> 00:13:03.060
So it's used for doing big data operations.


00:13:03.060 --> 00:13:08.080
And so like if we look at the dependency hierarchy of Pandas, it kind of goes like Pandas, which


00:13:08.080 --> 00:13:13.680
is dependent on NumPy, which deep down is dependent on this thing called BLOS, which


00:13:13.680 --> 00:13:15.840
is basic linear algebra subprograms.


00:13:15.840 --> 00:13:16.840
Right.


00:13:16.840 --> 00:13:20.840
And wasn't there something with Bloss and Windows and a Windows update in a certain


00:13:20.840 --> 00:13:21.840
version I think recently?


00:13:21.840 --> 00:13:22.840
I can't remember.


00:13:22.840 --> 00:13:23.840
I feel like there was some update.


00:13:23.840 --> 00:13:24.840
Oh, there could be.


00:13:24.840 --> 00:13:25.840
That thing that wasn't working.


00:13:25.840 --> 00:13:26.840
Yeah, usually.


00:13:26.840 --> 00:13:30.440
So there was a big challenge around NumPy and versioning and stuff to make it work in


00:13:30.440 --> 00:13:31.440
the CI.


00:13:31.440 --> 00:13:36.800
Yeah, usually the Bloss library is built into your OS already.


00:13:36.800 --> 00:13:37.960
And it just points at that.


00:13:37.960 --> 00:13:47.560
But if you're using something like Anaconda, I think by default it installs Intel MLK and


00:13:47.560 --> 00:13:48.560
uses that.


00:13:48.560 --> 00:13:53.400
But yeah, if you're using Linux or just out of the box, whatever's on Windows, which is


00:13:53.400 --> 00:13:59.880
what it is if you pip install it, then yeah, there could certainly be issues with dependencies,


00:13:59.880 --> 00:14:00.880
mismatches.


00:14:00.880 --> 00:14:11.420
Yeah, so, and I've like greatly simplified this, but in terms of kind of like the languages


00:14:11.420 --> 00:14:18.080
and walking down that dependency hierarchy, you start out in Python with pandas, and then


00:14:18.080 --> 00:14:23.880
NumPy is partially Python and partially C, and then Bloss is pretty much always written


00:14:23.880 --> 00:14:25.200
in assembly.


00:14:25.200 --> 00:14:29.480
And if you don't know what assembly is, it's basically like a very, very, very, like probably


00:14:29.480 --> 00:14:31.720
the lowest level language you can program in.


00:14:31.720 --> 00:14:35.480
And it's essentially like a CPU instructions


00:14:35.480 --> 00:14:36.480
for your processor.


00:14:36.480 --> 00:14:42.800
And so I've taken this just like basic example here


00:14:42.800 --> 00:14:44.800
and I'm gonna kind of like roll with it.


00:14:44.800 --> 00:14:50.240
So if we're doing just like a basic addition in pandas,


00:14:50.240 --> 00:14:52.520
say like we have column A


00:14:52.520 --> 00:14:54.240
and we wanna add that with column B


00:14:54.240 --> 00:14:56.400
and like store it back into column C.


00:14:56.400 --> 00:14:59.120
- Like a traditional linear algebra vector addition.


00:14:59.120 --> 00:15:01.120
Traditional vector math.


00:15:01.120 --> 00:15:07.120
So pandas, like if you look at these operations,


00:15:07.120 --> 00:15:12.120
each of these like additions on a per row basis is independent,


00:15:12.120 --> 00:15:19.120
meaning like you could conceivably run like each of those additions for each row like in parallel.


00:15:19.120 --> 00:15:22.120
Like there's no reason why you have to go like row by row.


00:15:22.120 --> 00:15:28.120
And that's essentially like what kind of like big data analysis libraries are like at their core


00:15:28.120 --> 00:15:36.760
their core is they understand this conceptually and try to parallelize things as much as possible.


00:15:36.760 --> 00:15:40.720
And so that's kind of like the first fundamental understanding that you have to have when working


00:15:40.720 --> 00:15:45.800
with pandas is you should be doing things in parallel as much as you can, which means


00:15:45.800 --> 00:15:51.520
understanding the API and understanding which functions in the API will let you do things


00:15:51.520 --> 00:15:53.620
in parallel.


00:15:53.620 --> 00:15:57.420
So if we're just not using pandas at all,


00:15:57.420 --> 00:16:01.220
say we're just inventing our own technique for this,


00:16:01.220 --> 00:16:04.100
you might think, well, each of these rows


00:16:04.100 --> 00:16:06.060
could be broken up into a thread.


00:16:06.060 --> 00:16:08.180
So we could say thread one is going


00:16:08.180 --> 00:16:11.500
to run the first row addition, and then thread two


00:16:11.500 --> 00:16:14.860
is going to run the second row, et cetera.


00:16:14.860 --> 00:16:17.740
But you might find that we'll run into issues


00:16:17.740 --> 00:16:20.180
with this in terms of the gil.


00:16:20.180 --> 00:16:25.180
So like the GIL is otherwise known as the global interpreter lock in Python


00:16:25.180 --> 00:16:33.380
prevents us from really like running a multi-threaded app operation like in parallel.


00:16:33.380 --> 00:16:40.380
Yeah, basically Python can run, the rule is it can run one Python opcode at a time.


00:16:40.380 --> 00:16:41.680
Yeah.


00:16:41.680 --> 00:16:45.580
And that's it, right? It doesn't matter if you've got, you know, 16 cores.


00:16:45.580 --> 00:16:46.980
It's one at a time.


00:16:46.980 --> 00:16:55.780
Yeah, yeah. And this is really terrible for trying to do things in parallel, right?


00:16:55.780 --> 00:16:59.780
So that kind of use case is out.


00:16:59.780 --> 00:17:04.260
Pandas and NumPy and all that stuff is not going to be able to use multithreading.


00:17:04.260 --> 00:17:19.020
And so, and like, I just want to point out like Python, like at its core has this like fundamental problem, which is why they went with the GIL.


00:17:19.020 --> 00:17:21.580
So like Python manages memory for you.


00:17:21.580 --> 00:17:31.220
And how it does that is it keeps track of references to know when to free up memory.


00:17:31.980 --> 00:17:36.340
So like when memory can be like completely destroyed


00:17:36.340 --> 00:17:38.780
and somebody else can use it essentially.


00:17:38.780 --> 00:17:39.620
And like that's something--


00:17:39.620 --> 00:17:40.780
- Otherwise you gotta do stuff like,


00:17:40.780 --> 00:17:42.540
Brian sometimes probably has to do with C


00:17:42.540 --> 00:17:45.820
and like malloc and free and all those things, right?


00:17:45.820 --> 00:17:46.740
- Yeah, exactly.


00:17:46.740 --> 00:17:47.580
Yeah, yeah.


00:17:47.580 --> 00:17:49.860
So like C you have to do this with yourself


00:17:49.860 --> 00:17:52.460
with like malloc and free and all that stuff.


00:17:52.460 --> 00:17:54.740
But with Python, it does it for you,


00:17:54.740 --> 00:17:55.940
but that comes at a cost,


00:17:55.940 --> 00:17:58.320
which means like every single object in Python


00:17:58.320 --> 00:18:00.100
has this little like counter,


00:18:00.100 --> 00:18:01.900
which is like a reference counter.


00:18:01.900 --> 00:18:05.460
And so basically like way back in the day,


00:18:05.460 --> 00:18:09.160
like when threading first became a thing,


00:18:09.160 --> 00:18:14.160
like in order to kind of like avoid this threading problem,


00:18:14.160 --> 00:18:17.220
they came up with the GIL,


00:18:17.220 --> 00:18:20.000
which basically says you can only run one thread at a time


00:18:20.000 --> 00:18:22.460
or like one opcode at a time as you said.


00:18:22.460 --> 00:18:24.540
- Attempts have been made to remove it.


00:18:24.540 --> 00:18:27.240
Like Larry Hastings has been working on something


00:18:27.240 --> 00:18:30.940
called the Galectomy, the removal of the GIL for a while.


00:18:30.940 --> 00:18:34.060
And the main problem is if you take it away,


00:18:34.060 --> 00:18:36.180
the way it works now is you have to do locks


00:18:36.180 --> 00:18:39.060
on all memory access, all variable access,


00:18:39.060 --> 00:18:40.420
which actually has a bigger hit


00:18:40.420 --> 00:18:42.020
than a lot of the benefits you would get,


00:18:42.020 --> 00:18:43.500
at least in the single threaded case.


00:18:43.500 --> 00:18:45.340
And I know Guido said,


00:18:45.340 --> 00:18:47.440
look, we really don't want to make changes to this


00:18:47.440 --> 00:18:50.020
if it's gonna mean slower single threaded Python.


00:18:50.020 --> 00:18:52.820
So probably not for a while.


00:18:52.820 --> 00:18:54.380
- Yeah, yeah, yeah.


00:18:54.380 --> 00:18:55.940
And that is a big problem.


00:18:55.940 --> 00:19:00.340
So, I mean, generally what people use


00:19:00.340 --> 00:19:04.020
instead of threads in Python is they use like multi-process


00:19:04.020 --> 00:19:06.740
and they spin up multiple Python processes, right?


00:19:06.740 --> 00:19:10.620
And like that truly kind of like achieves the parallelism.


00:19:10.620 --> 00:19:14.940
But anyways, I digress.


00:19:14.940 --> 00:19:19.260
So we can't use the GIL,


00:19:19.260 --> 00:19:24.260
but what's interesting to note is when you're running NumPy


00:19:24.260 --> 00:19:26.520
at its very low level in C,


00:19:26.520 --> 00:19:29.020
like when you enter and look at the C files,


00:19:29.020 --> 00:19:31.980
it actually is not subject to the GIL anymore because you're in C.


00:19:31.980 --> 00:19:36.160
And so you can potentially run, you know,


00:19:36.160 --> 00:19:41.100
multi-threaded things in C and call it from Python.


00:19:41.100 --> 00:19:46.580
But beyond that, if we look at BLOS,


00:19:46.580 --> 00:19:52.620
BLOS has built-in parallelization for hardware parallelization.


00:19:52.620 --> 00:19:56.820
And how it does that is through vector registers.


00:19:57.660 --> 00:20:02.760
So if you're not familiar with the architecture of CPUs and stuff,


00:20:02.760 --> 00:20:10.560
at its core, you basically only can have a certain small set,


00:20:10.560 --> 00:20:14.420
maybe three or four values in your CPU at any one time


00:20:14.420 --> 00:20:17.140
that you're running adds and multiplies on.


00:20:17.140 --> 00:20:23.140
And how that works is you load those values into the CPU from memory,


00:20:23.140 --> 00:20:25.820
and that load can be quite time consuming.


00:20:26.040 --> 00:20:29.320
it's really just based on how far away your memory is


00:20:29.320 --> 00:20:31.400
from your CPU at the end of the day,


00:20:31.400 --> 00:20:33.200
like physically on your board.


00:20:33.200 --> 00:20:34.960
- Right, and your cache is hidden.


00:20:34.960 --> 00:20:37.280
- Yes, yeah, and that's why we have caches.


00:20:37.280 --> 00:20:41.800
So caches are memory that's closer to your CPU.


00:20:41.800 --> 00:20:43.680
Consequently, it's also smaller.


00:20:43.680 --> 00:20:47.000
But that's how you can kind of,


00:20:47.000 --> 00:20:48.680
you might hear people say,


00:20:48.680 --> 00:20:51.600
"Oh, so-and-so wrote this really performant program


00:20:51.600 --> 00:20:54.920
"and it utilizes the size of the cache," or whatever.


00:20:54.920 --> 00:20:59.440
So basically, if you can load all of that data


00:20:59.440 --> 00:21:01.640
into your cache and run the operations on it


00:21:01.640 --> 00:21:04.160
without ever having to go back out to memory,


00:21:04.160 --> 00:21:06.000
you can make a really fast program.


00:21:06.000 --> 00:21:07.840
- Yeah, yeah, it could be like a hundred times faster


00:21:07.840 --> 00:21:08.840
than regular memory.


00:21:08.840 --> 00:21:11.440
- Yeah, yeah, and so essentially,


00:21:11.440 --> 00:21:15.720
that's what Bloss is trying to do underneath


00:21:15.720 --> 00:21:20.680
and NumPy is they're trying to take this giant set of data


00:21:20.680 --> 00:21:24.160
and break it into chunks and load those chunks


00:21:24.160 --> 00:21:28.500
into your cache and operate on those chunks


00:21:28.500 --> 00:21:30.560
and then dump them back out to memory


00:21:30.560 --> 00:21:31.800
and load the next chunk.


00:21:31.800 --> 00:21:34.800
- Very cool, thanks for pointing that out.


00:21:34.800 --> 00:21:38.080
I didn't realize that Blast leveraged


00:21:38.080 --> 00:21:40.080
some of the OS native stuff,


00:21:40.080 --> 00:21:43.720
nor that it had special CPU instruction type optimizations.


00:21:43.720 --> 00:21:45.120
That's pretty cool.


00:21:45.120 --> 00:21:47.920
- Yeah, yeah.


00:21:47.920 --> 00:21:51.720
So it has, on top of the registers,


00:21:51.720 --> 00:21:53.840
it also has these things called vector registers,


00:21:53.840 --> 00:21:57.740
which actually can hold like multiple values at a time in your CPU.


00:21:57.740 --> 00:22:03.040
so like we could take this like simple example of,


00:22:03.040 --> 00:22:05.160
like the addition and we could actually, well,


00:22:05.160 --> 00:22:09.720
we can't run those like row per row calculations,


00:22:09.720 --> 00:22:13.640
uh, in parallel with threads. We can with vector registers.


00:22:13.640 --> 00:22:15.080
Okay.


00:22:15.080 --> 00:22:20.120
and the limitation there is that the memory has to be a sequential when you load


00:22:20.120 --> 00:22:22.280
it in.


00:22:23.200 --> 00:22:24.640
This is definitely at a level lower


00:22:24.640 --> 00:22:25.560
than I'm used to working at.


00:22:25.560 --> 00:22:26.400
How about you, Brian?


00:22:26.400 --> 00:22:28.560
(laughing)


00:22:28.560 --> 00:22:31.320
- But yeah, so anyways, this is just like


00:22:31.320 --> 00:22:34.120
kind of the stuff that I talk about in my book.


00:22:34.120 --> 00:22:37.720
It's not necessarily about like how to use pandas,


00:22:37.720 --> 00:22:39.440
but it's about like kind of like


00:22:39.440 --> 00:22:41.160
what's going on underneath pandas.


00:22:41.160 --> 00:22:42.920
And then like, once you kind of like


00:22:42.920 --> 00:22:44.720
build that foundation of understanding,


00:22:44.720 --> 00:22:49.160
like you can understand like better how pandas is working


00:22:49.160 --> 00:22:50.800
and like how to use it correctly


00:22:50.800 --> 00:22:53.760
and what all the various functions are doing.


00:22:53.760 --> 00:22:55.800
- Fantastic, yeah, so people can check out your book.


00:22:55.800 --> 00:22:59.160
Got a link to it in the show notes, so very nice.


00:22:59.160 --> 00:23:01.480
It's not for me, the European, the Euro price,


00:23:01.480 --> 00:23:03.320
which is fine, I don't mind, so.


00:23:03.320 --> 00:23:06.320
- Yeah, so like, I mean, it's on Amazon too.


00:23:06.320 --> 00:23:07.760
It's on a lot of different platforms,


00:23:07.760 --> 00:23:11.640
but I figured I'd just point directly to the publishers.


00:23:11.640 --> 00:23:14.120
- Yeah, no, that's perfect, that's perfect.


00:23:14.120 --> 00:23:16.880
Quick comment, Roy Larson says,


00:23:16.880 --> 00:23:21.360
NumPy and Intel MKL cause issues sometimes,


00:23:21.360 --> 00:23:23.240
particularly on Windows if something else


00:23:23.240 --> 00:23:25.800
in the system uses Intel MKL.


00:23:25.800 --> 00:23:27.840
- Okay. - Yeah.


00:23:27.840 --> 00:23:29.400
Interesting, I have no experience with that,


00:23:29.400 --> 00:23:30.240
but I can believe it.


00:23:30.240 --> 00:23:31.320
Intel has a lot of interesting stuff.


00:23:31.320 --> 00:23:34.760
They even have a special Python compiled version,


00:23:34.760 --> 00:23:37.880
I think, for Intel CPUs potentially.


00:23:37.880 --> 00:23:39.720
I'm not sure, they have some high performance version.


00:23:39.720 --> 00:23:42.880
- Yeah, yeah, yeah, they do, yeah.


00:23:42.880 --> 00:23:45.400
- Nice, also in Portland, speaking of keeping in Portland,


00:23:45.400 --> 00:23:46.240
there we go.


00:23:46.240 --> 00:23:50.240
- Now, before we move on to the next item,


00:23:50.240 --> 00:23:52.160
let me tell you about our sponsor today.


00:23:52.160 --> 00:23:53.920
Thank you to Datadog.


00:23:53.920 --> 00:23:56.160
So they're sponsoring Datadog,


00:23:56.160 --> 00:23:59.560
and if you're having trouble visualizing latency,


00:23:59.560 --> 00:24:02.200
CPU, memory bottlenecks, things like that in your app,


00:24:02.200 --> 00:24:03.480
and you don't know why,


00:24:03.480 --> 00:24:05.440
you don't know where it's coming from or how to solve it,


00:24:05.440 --> 00:24:08.520
you can use Datadog to correlate logs and traces


00:24:08.520 --> 00:24:10.040
at the level of individual requests,


00:24:10.040 --> 00:24:12.280
allowing you to quickly troubleshoot your Python app.


00:24:12.280 --> 00:24:14.240
Plus, they have a continuous profiler


00:24:14.240 --> 00:24:17.420
that allows you to find the most resource-consuming parts


00:24:17.420 --> 00:24:19.780
of your production code all the time


00:24:19.780 --> 00:24:21.300
at any scale with minimal overhead.


00:24:21.300 --> 00:24:23.220
So you just point out your production server,


00:24:23.220 --> 00:24:24.980
run it, which is not normally something


00:24:24.980 --> 00:24:26.500
you want to do with diagnostic tools,


00:24:26.500 --> 00:24:28.740
but you can with their continuous profiler, which


00:24:28.740 --> 00:24:29.860
is pretty awesome.


00:24:29.860 --> 00:24:32.500
So be the hero that got that app back on track at your company.


00:24:32.500 --> 00:24:35.900
Get started with a free trial at pythonbytes.fm/datadog,


00:24:35.900 --> 00:24:40.640
or just click the link in your podcast player show notes.


00:24:40.640 --> 00:24:47.760
Now, I'm sure you all have heard that working with pickle


00:24:47.760 --> 00:24:49.400
has all sorts of issues, right?


00:24:49.400 --> 00:24:52.180
So pickle is a way to say, take my Python thing,


00:24:52.180 --> 00:24:54.100
make a binary version of bits that


00:24:54.100 --> 00:24:56.560
looks like that Python thing so I can go do stuff with it,


00:24:56.560 --> 00:24:57.060
right?


00:24:57.060 --> 00:25:01.620
That's generally got issues, not the least of which


00:25:01.620 --> 00:25:03.980
actually are around the security stuff.


00:25:03.980 --> 00:25:08.060
So to unpickle something, to deserialize it back,


00:25:08.060 --> 00:25:10.380
is actually potentially running arbitrary code.


00:25:10.380 --> 00:25:12.860
So people could send you a pickle virus.


00:25:12.860 --> 00:25:15.980
I don't know what that is, like a rotten pickle or whatever.


00:25:15.980 --> 00:25:16.940
That wouldn't be good.


00:25:16.940 --> 00:25:19.860
So there's a library I came across


00:25:19.860 --> 00:25:22.340
that solves a lot of the pickle problems.


00:25:22.340 --> 00:25:24.180
It's supposed to be faster than pickle,


00:25:24.180 --> 00:25:25.860
and it was cleverly named Quickle.


00:25:25.860 --> 00:25:30.380
Have either of you heard of this thing?


00:25:30.380 --> 00:25:31.140
- No.


00:25:31.140 --> 00:25:32.220
- Yeah, it's cool, right?


00:25:32.220 --> 00:25:34.700
So here's the deal.


00:25:34.700 --> 00:25:38.940
It's a fast serialization format for a subset of Python types.


00:25:38.940 --> 00:25:41.920
You can't pickle everything, but you can pickle way more,


00:25:41.920 --> 00:25:44.020
say, than JSON.


00:25:44.020 --> 00:25:47.420
And the reasons they give to use it are it's fast.


00:25:47.420 --> 00:25:48.840
If you check out the benchmarks--


00:25:48.840 --> 00:25:50.220
I'll pull those up in a second--


00:25:50.220 --> 00:25:53.540
it's one of the fastest ways to serialize things in Python.


00:25:53.540 --> 00:25:55.660
It's safe, which is important.


00:25:55.660 --> 00:25:58.820
Unlike pickle, deserializing a user-provided message


00:25:58.820 --> 00:26:01.220
does not allow arbitrary code execution.


00:26:01.220 --> 00:26:02.100
Hooray.


00:26:02.100 --> 00:26:03.980
That seems like a minimum bar.


00:26:03.980 --> 00:26:05.620
Like, oh, I got stuff off the internet.


00:26:05.620 --> 00:26:06.700
Let's try to execute that.


00:26:06.700 --> 00:26:08.540
What's that going to do?


00:26:08.540 --> 00:26:10.940
"Oh, look, it's reading all my files. That's nice."


00:26:10.940 --> 00:26:12.540
(laughter)


00:26:12.540 --> 00:26:16.460
It also is flexible because it supports more types.


00:26:16.460 --> 00:26:19.220
We'll also learn about a bunch of other libraries


00:26:19.220 --> 00:26:20.700
while we're at it here, which is kind of cool.


00:26:20.700 --> 00:26:23.720
A bunch of things I heard of, like MSGPack,


00:26:23.720 --> 00:26:25.820
or well, JSON, you may have heard of that.


00:26:25.820 --> 00:26:30.020
The other main problem you get with some of these binary formats


00:26:30.020 --> 00:26:32.580
is you can end up in a situation


00:26:32.580 --> 00:26:35.980
where you can't read something if you make a change to your code.


00:26:35.980 --> 00:26:41.580
So imagine I've got a user object and I've pickled them and put them into a Redis cache.


00:26:41.580 --> 00:26:47.060
We upgrade our web app, which adds a new field to the user object.


00:26:47.060 --> 00:26:48.400
That stuff is still in cache.


00:26:48.400 --> 00:26:50.140
After we restart, we try to read it.


00:26:50.140 --> 00:26:51.680
Oh, that stuff isn't there anymore.


00:26:51.680 --> 00:26:53.880
You can't use your cache anymore.


00:26:53.880 --> 00:26:55.660
Everything's broken, et cetera, et cetera.


00:26:55.660 --> 00:27:02.220
So it has a concept of schema evolution, having different versions of, like, history.


00:27:02.220 --> 00:27:03.700
So there's ways that older messages


00:27:03.700 --> 00:27:06.340
can be read without errors, which is pretty cool.


00:27:06.340 --> 00:27:07.620
- Yeah, that's nice.


00:27:07.620 --> 00:27:08.600
- Yeah, neat, huh?


00:27:08.600 --> 00:27:10.020
So I'll pull up the benchmarks.


00:27:10.020 --> 00:27:11.900
There's actually a pretty cool little site here.


00:27:11.900 --> 00:27:13.420
It shows you some examples on how to use it.


00:27:13.420 --> 00:27:14.540
I mean, it's incredibly simple.


00:27:14.540 --> 00:27:18.240
It's like, you know, dump this as a string,


00:27:18.240 --> 00:27:19.860
read this, you know, deserialize this.


00:27:19.860 --> 00:27:20.700
It's real simple.


00:27:20.700 --> 00:27:25.540
So, but there's like quite a interesting analysis,


00:27:25.540 --> 00:27:27.500
live analysis where you can click around


00:27:27.500 --> 00:27:29.420
and you can actually look at like load speed


00:27:29.420 --> 00:27:33.560
versus read serialize versus deserialize speed,


00:27:33.560 --> 00:27:36.160
how much memory is used and things like that.


00:27:36.160 --> 00:27:39.440
And it compares against pickle tuples,


00:27:39.440 --> 00:27:43.720
protobuf, pickle itself, ORJSON, MSGPACK,


00:27:43.720 --> 00:27:45.720
Quickle and Quickle structs.


00:27:45.720 --> 00:27:46.880
There's a lot of things.


00:27:46.880 --> 00:27:49.000
I mean, I knew about two of those, I think.


00:27:49.000 --> 00:27:50.400
That's cool.


00:27:50.400 --> 00:27:51.400
But these are all different ways.


00:27:51.400 --> 00:27:53.360
And you can see, like in all these pictures,


00:27:53.360 --> 00:27:54.880
generally, at least the top one


00:27:54.880 --> 00:27:57.320
where it's time shorter is better, right?


00:27:57.320 --> 00:28:00.840
So you can see, if you go with their quick-old struts,


00:28:00.840 --> 00:28:03.960
it's a quick rule of thumb, maybe four or five times


00:28:03.960 --> 00:28:06.400
faster than pickle, which I presume


00:28:06.400 --> 00:28:08.760
is way faster than JSON, for example.


00:28:08.760 --> 00:28:10.040
I don't know.


00:28:10.040 --> 00:28:12.600
You'll also see the memory size, which actually varies by about


00:28:12.600 --> 00:28:16.040
50% across the different things.


00:28:16.040 --> 00:28:18.720
Also, speed of load in a whole bunch of different objects,


00:28:18.720 --> 00:28:19.680
and so on.


00:28:19.680 --> 00:28:22.640
So yeah, you can come check out these analysis here.


00:28:22.640 --> 00:28:24.840
Let's see all the different libraries.


00:28:24.840 --> 00:28:26.800
So we had, yeah, I guess we read them all off


00:28:26.800 --> 00:28:29.360
basically there, but yeah, there's a bunch of different ways


00:28:29.360 --> 00:28:31.520
which are, you know, not pickle itself


00:28:31.520 --> 00:28:33.960
to do this kind of binary serialization,


00:28:33.960 --> 00:28:36.040
which is pretty interesting, I think.


00:28:36.040 --> 00:28:38.480
- It does protobuf, that's pretty cool.


00:28:38.480 --> 00:28:40.300
Actually, I want to try this out.


00:28:40.300 --> 00:28:41.920
So it looks neat.


00:28:41.920 --> 00:28:43.320
- Yeah, it looks really neat, right?


00:28:43.320 --> 00:28:44.200
- And one of the things,


00:28:44.200 --> 00:28:46.160
I was just looking at the source code.


00:28:46.160 --> 00:28:48.760
I love that they use pytest to test this.


00:28:48.760 --> 00:28:50.360
Of course, you should use pytest.


00:28:51.440 --> 00:28:55.140
But the, I can't believe I'm saying this,


00:28:55.140 --> 00:28:56.940
but this would be the perfect package


00:28:56.940 --> 00:29:00.020
to test with a Gherkin syntax, don't you think?


00:29:00.020 --> 00:29:00.860
'Cause it's got the whole pickle thing.


00:29:00.860 --> 00:29:04.260
- Oh my gosh, you've got to use the Gherkin syntax.


00:29:04.260 --> 00:29:06.500
(laughing)


00:29:06.500 --> 00:29:08.620
Yeah, you definitely should.


00:29:08.620 --> 00:29:13.180
And Roy threw out another one like UQ Foundation.


00:29:13.180 --> 00:29:15.560
DIL package deals with many of the same issues,


00:29:15.560 --> 00:29:18.200
but because it's binary, it has all the same,


00:29:18.200 --> 00:29:19.760
you know, sort of versioning challenges


00:29:19.760 --> 00:29:21.520
might run into as well.


00:29:21.520 --> 00:29:23.720
- DIL, the DIL package, that's funny.


00:29:23.720 --> 00:29:25.920
(laughing)


00:29:25.920 --> 00:29:27.720
- Yeah, pretty good, pretty good.


00:29:27.720 --> 00:29:29.640
All right, so anyway, like, you know,


00:29:29.640 --> 00:29:31.960
I'm kind of a fan of JSON these days.


00:29:31.960 --> 00:29:35.400
I've had enough XML with custom namespaces in my life


00:29:35.400 --> 00:29:37.520
that I really don't want to go down that path,


00:29:37.520 --> 00:29:40.520
XSLT and all that, but, you know,


00:29:40.520 --> 00:29:43.560
I've really shied away from these binary formats


00:29:43.560 --> 00:29:45.800
for a lot of these reasons here,


00:29:45.800 --> 00:29:47.880
but, you know, this might make me interested.


00:29:47.880 --> 00:29:50.340
But if I was going to say throw something into a cache,


00:29:50.340 --> 00:29:52.080
and the whole point is put it in the cache, get it back,


00:29:52.080 --> 00:29:55.480
read it fast, this might be pretty decent.


00:29:55.480 --> 00:29:55.980
Yeah.


00:29:55.980 --> 00:29:59.720
Yeah, it definitely seems to address a lot of the concerns


00:29:59.720 --> 00:30:01.320
I have with Pickle, for sure.


00:30:01.320 --> 00:30:02.200
Yeah, and I don't--


00:30:02.200 --> 00:30:04.280
did I talk about the types?


00:30:04.280 --> 00:30:06.040
Somewhere in here we have-- yeah, here's--


00:30:06.040 --> 00:30:08.160
so there's quite a list of types.


00:30:08.160 --> 00:30:09.780
You know, one's really nice, date time.


00:30:09.780 --> 00:30:11.080
Can't do that with JSON.


00:30:11.080 --> 00:30:15.120
Why in the world doesn't JSON support some sort of time


00:30:15.120 --> 00:30:16.400
information?


00:30:16.400 --> 00:30:18.900
But you've got most of the fundamental types


00:30:18.900 --> 00:30:21.400
that you might run into over here.


00:30:21.400 --> 00:30:24.640
All right, so Quickle, give it a quick look.


00:30:24.640 --> 00:30:29.320
All right, Brian, what you got here?


00:30:29.320 --> 00:30:32.540
- Well, I was actually reading a different article,


00:30:32.540 --> 00:30:37.920
but it came up, I think we've talked about


00:30:37.920 --> 00:30:39.440
friendly traceback.


00:30:39.440 --> 00:30:41.780
It's a package that just sort of tries to make


00:30:41.780 --> 00:30:43.800
your tracebacks nicer.


00:30:45.000 --> 00:30:48.920
But I didn't realize it had a console built in.


00:30:48.920 --> 00:30:52.600
So I was pretty blown away by this.


00:30:52.600 --> 00:30:55.720
So there's a, it's not trivial to get set up.


00:30:55.720 --> 00:30:56.800
It's not that terrible,


00:30:56.800 --> 00:30:59.560
but you have to start your own console,


00:30:59.560 --> 00:31:02.400
start the REPL, import Friendly Traceback,


00:31:02.400 --> 00:31:05.860
and then do Friendly Traceback start console.


00:31:05.860 --> 00:31:10.860
But at that point, you have just like the normal console,


00:31:10.860 --> 00:31:13.440
but you have better tracebacks.


00:31:13.440 --> 00:31:16.000
And then also you have all these different cool functions


00:31:16.000 --> 00:31:21.000
you can call, like what, where, why,


00:31:21.000 --> 00:31:25.160
and explain and more.


00:31:25.160 --> 00:31:27.420
And basically if something goes wrong


00:31:27.420 --> 00:31:29.840
while you're playing with Python,


00:31:29.840 --> 00:31:34.340
you can interrogate it and ask like for more information.


00:31:34.340 --> 00:31:36.680
And that's just pretty cool.


00:31:36.680 --> 00:31:38.480
The why is really great.


00:31:38.480 --> 00:31:41.960
So if you have one of the examples I saw before,


00:31:41.960 --> 00:31:45.760
and I think I might start using this when teaching people,


00:31:45.760 --> 00:31:49.920
is we often have like exceptions,


00:31:49.920 --> 00:31:51.160
like you assigned a none


00:31:51.160 --> 00:31:53.680
or you assign it to something that can't be assigned


00:31:53.680 --> 00:31:57.880
or you didn't match up the bracket and the parenthesis


00:31:57.880 --> 00:31:59.740
or something like that correctly.


00:31:59.740 --> 00:32:03.080
And you'll get like just syntax error


00:32:03.080 --> 00:32:04.540
and it'll point to the syntax error,


00:32:04.540 --> 00:32:07.040
but you might not know more.


00:32:07.040 --> 00:32:11.040
So you can just type Y, W-H-Y with parentheses


00:32:11.040 --> 00:32:15.600
it's a function and it'll tell you why.


00:32:15.600 --> 00:32:18.560
>> Why? It's like the great storytelling,


00:32:18.560 --> 00:32:21.280
the five why's of a bug.


00:32:21.280 --> 00:32:29.520
>> So then you can say what to repeat what the error was,


00:32:29.520 --> 00:32:31.800
why it will tell you why that was an error,


00:32:31.800 --> 00:32:34.520
and then specifically what you did wrong,


00:32:34.520 --> 00:32:36.440
and then where it will show you.


00:32:36.440 --> 00:32:39.740
If you've been asking all sorts of questions and you


00:32:39.740 --> 00:32:44.820
lost where the actual traceback was, you can say where and it'll point to directly to it.


00:32:44.820 --> 00:32:46.900
And I think this is going to be cool.


00:32:46.900 --> 00:32:50.860
I think I'll use this when trying to teach, especially kids, but really just people new


00:32:50.860 --> 00:32:51.860
to Python.


00:32:51.860 --> 00:32:54.860
Tracebacks can be very helpful for them.


00:32:54.860 --> 00:32:59.860
Like even I know like I sometimes have to look up like certain error messages that I'm


00:32:59.860 --> 00:33:00.860
like not familiar with.


00:33:00.860 --> 00:33:01.860
So yeah, that would be super helpful.


00:33:01.860 --> 00:33:04.860
I think you just do it right.


00:33:04.860 --> 00:33:06.300
Yeah, I totally agree.


00:33:06.300 --> 00:33:09.440
You're going to have to help me find a W that goes with this.


00:33:09.440 --> 00:33:17.960
But I want what would be effectively Google open/closed services.


00:33:17.960 --> 00:33:20.480
Because so often you get this huge trace back and you've got these errors.


00:33:20.480 --> 00:33:24.120
And if you go through and select it, like for example the error you see on the screen,


00:33:24.120 --> 00:33:30.000
unbound local error, local variable "greetings" in quotes referenced before assignments.


00:33:30.000 --> 00:33:34.240
Well the quotes means oftentimes in search it must have the word "greeting."


00:33:34.240 --> 00:33:38.840
And that's the one thing that is not relevant to the Googling of it.


00:33:38.840 --> 00:33:44.840
So if I'm a beginner and I even try to Google that, I might get a really wrong message.


00:33:44.840 --> 00:33:49.320
If you could say Google this in a way that is most likely going to find the error, but


00:33:49.320 --> 00:33:56.240
without carrying through like variable details, file name details, but just the essence of


00:33:56.240 --> 00:33:58.120
the error, that would be fantastic.


00:33:58.120 --> 00:33:59.600
Now how do we say that with W?


00:33:59.600 --> 00:34:06.440
You can just say, "Whoa!"


00:34:06.440 --> 00:34:09.680
Or maybe www.


00:34:09.680 --> 00:34:10.680
Or WTF.


00:34:10.680 --> 00:34:11.680
I mean, come on, there's some options.


00:34:11.680 --> 00:34:12.680
WTF.


00:34:12.680 --> 00:34:15.680
Wouldn't that be great?


00:34:15.680 --> 00:34:19.120
And so that's also part of this package that you see at their main site where you've got


00:34:19.120 --> 00:34:23.680
these really cool visualized stuff, right?


00:34:23.680 --> 00:34:26.880
Where it sort of more tries to tell you the problem or the error with the help text and


00:34:26.880 --> 00:34:27.880
whatnot.


00:34:27.880 --> 00:34:28.880
Yeah.


00:34:28.880 --> 00:34:32.880
Yeah, yeah, this is cool. Also uses rich, which is a cool library we talked about.


00:34:32.880 --> 00:34:40.400
Previously as well. I love rich. I include rich in everything now, even just just to print out simple, better tables. It's great.


00:34:40.400 --> 00:34:41.680
For sure.


00:34:41.680 --> 00:34:47.760
Hannah, do you see yourself using this? Or is it? Are you more more in notebooks?


00:34:48.560 --> 00:34:53.040
Oh, no, I mean, I usually use like the PDB debugger.


00:34:53.040 --> 00:34:58.000
So, yeah, I mean, I'm not sure if really that's what it is would be


00:34:58.000 --> 00:35:00.880
like a problem.


00:35:00.880 --> 00:35:05.800
I would depend on how much information it has about like obscure errors


00:35:05.800 --> 00:35:09.600
from dependent libraries, which is usually what I end up looking at these days.


00:35:09.600 --> 00:35:13.640
But yeah, I mean, conceivably, like, yeah, that could be helpful.


00:35:13.640 --> 00:35:16.320
Yeah. If we get that WTF feature added, then yeah.


00:35:16.320 --> 00:35:17.640
Oh, yeah, for sure. Gosh.


00:35:17.640 --> 00:35:24.640
Speaking of errors, let's cover your last item, last item of the show.


00:35:24.640 --> 00:35:35.360
Yeah, so I at work, work in the security org and I write like automation tools for them,


00:35:35.360 --> 00:35:42.840
which means sometimes the repos that we work on, they get to be like test subjects for


00:35:42.840 --> 00:35:46.280
new like requirements and such.


00:35:46.280 --> 00:35:54.600
And so recently, our work was exploring like static code analysis, looking for like security


00:35:54.600 --> 00:35:56.920
vulnerabilities in the code.


00:35:56.920 --> 00:36:00.960
And so I ran across Bandit and I integrated Bandit into our...


00:36:00.960 --> 00:36:05.720
We don't have time to go through these old legacy code and fix these problems.


00:36:05.720 --> 00:36:06.720
Oh, wait, this is what it means?


00:36:06.720 --> 00:36:07.720
Oh, sorry.


00:36:07.720 --> 00:36:08.720
Yes, we can do that right now.


00:36:08.720 --> 00:36:12.720
That's the kind of help you got from Bandit?


00:36:12.720 --> 00:36:14.400
Yeah, exactly.


00:36:14.400 --> 00:36:18.400
So yeah, we integrated Bandit into our legacy code base.


00:36:18.400 --> 00:36:20.800
And we actually, it's funny you say that,


00:36:20.800 --> 00:36:23.340
'cause the bug that I found using Bandit


00:36:23.340 --> 00:36:25.780
was actually from the legacy code.


00:36:25.780 --> 00:36:29.200
- That does not surprise me.


00:36:29.200 --> 00:36:34.200
- Yeah, so it was a pretty stupid error.


00:36:34.200 --> 00:36:37.380
It was pretty obvious if you were doing code review,


00:36:37.380 --> 00:36:41.160
but because it was legacy code and it was already there,


00:36:41.160 --> 00:36:43.480
I just never noticed.


00:36:43.480 --> 00:36:45.580
but it was basically like issuing like a request


00:36:45.580 --> 00:36:47.240
with like no verify.


00:36:47.240 --> 00:36:51.880
So it was like an unverified like HTTP request.


00:36:51.880 --> 00:36:54.080
And then it was like, no.


00:36:54.080 --> 00:36:56.200
- This broken SSL certificate keeps breaking it.


00:36:56.200 --> 00:36:57.240
I just told it to ignore it.


00:36:57.240 --> 00:36:58.080
Oh, okay.


00:36:58.080 --> 00:37:00.000
- Yeah, well, and I honestly,


00:37:00.000 --> 00:37:02.080
like I think that might've been why it was there


00:37:02.080 --> 00:37:02.920
in the first place.


00:37:02.920 --> 00:37:06.580
'Cause I know like the, oh, like several years ago,


00:37:06.580 --> 00:37:08.920
like had some certificate issues.


00:37:08.920 --> 00:37:10.360
So yeah, that might be.


00:37:10.360 --> 00:37:13.400
And it was like an internal talking to internal.


00:37:13.400 --> 00:37:18.280
So it was like, maybe even a self-science certificate that nothing trusted, but they get technical.


00:37:18.280 --> 00:37:21.960
Yeah. Yeah. Yeah. It was like, we'll just do that.


00:37:21.960 --> 00:37:30.280
But yeah, so Bandit is basically like a linter, but it looks for security issues.


00:37:30.280 --> 00:37:35.320
So you could just like pip install it and then just like run it on your code and it will find


00:37:35.320 --> 00:37:40.360
a bunch of different potential security issues, like just by like statically analyzing your code.


00:37:41.880 --> 00:37:46.720
And I've pretty much come to the opinion that,


00:37:46.720 --> 00:37:49.640
why haven't I done this on all of my other projects?


00:37:49.640 --> 00:37:51.960
I should be doing this on every single project.


00:37:51.960 --> 00:37:57.000
'Cause as a developer, I always run


00:37:57.000 --> 00:37:59.360
lint and black and stuff like that.


00:37:59.360 --> 00:38:04.400
So I figured I should probably be running Bandit too.


00:38:04.400 --> 00:38:05.220
- Yeah, cool.


00:38:05.220 --> 00:38:06.400
Yeah, well, very nice.


00:38:06.400 --> 00:38:08.840
That's a good recommendation for people as well,


00:38:08.840 --> 00:38:10.120
and it's got a lot of cool.


00:38:10.120 --> 00:38:13.360
You can go and actually see the list of the things that it tests for and even has


00:38:13.360 --> 00:38:15.700
test plugins as well, which is pretty cool.


00:38:15.700 --> 00:38:16.840
Yeah.


00:38:16.840 --> 00:38:17.100
Yeah.


00:38:17.100 --> 00:38:19.160
So you can like make your, make your own if you want.


00:38:19.160 --> 00:38:23.640
and it has like all the common linter sort of like functionality, like ignore


00:38:23.640 --> 00:38:28.120
these files or like ignore these rules or even like ignore this rule on this


00:38:28.120 --> 00:38:29.920
particular line, stuff like that.


00:38:29.920 --> 00:38:30.520
Yeah.


00:38:30.520 --> 00:38:32.040
just pretty sweet.


00:38:32.040 --> 00:38:38.320
I love that things like bandit are around because, thankfully,


00:38:38.880 --> 00:38:42.960
developing web stuff is becoming easier and easier.


00:38:42.960 --> 00:38:47.960
But it's then now the barrier to entry is lower.


00:38:47.960 --> 00:38:50.600
You still have to have all the security concerns


00:38:50.600 --> 00:38:52.840
that you had before that normal,


00:38:52.840 --> 00:38:56.400
I mean, usually people were just had more experience,


00:38:56.400 --> 00:38:58.300
but they would make mistakes anyway.


00:38:58.300 --> 00:39:00.680
But now I think this is one of the reasons why I love this


00:39:00.680 --> 00:39:03.640
is because people new to it might be terrified


00:39:03.640 --> 00:39:04.960
about the security part,


00:39:04.960 --> 00:39:06.760
but having a bandit on there,


00:39:06.760 --> 00:39:08.680
looking over their shoulder is great.


00:39:08.680 --> 00:39:14.200
Yeah, like don't publish with the debug setting on and Django or anything like that.


00:39:14.200 --> 00:39:15.720
Simple, obvious stuff.


00:39:15.720 --> 00:39:21.240
And like, honestly, like having worked in the security org for about a year now, like


00:39:21.240 --> 00:39:27.680
I've come to the understanding that a lot of security issues stem from just like basic,


00:39:27.680 --> 00:39:31.280
like duh, sort of configurations.


00:39:31.280 --> 00:39:33.760
So like something like this is perfect.


00:39:33.760 --> 00:39:36.600
- I really like that you added,


00:39:36.600 --> 00:39:38.840
you wrote in the show notes,


00:39:38.840 --> 00:39:42.520
some pre-commit, how to hook this up with pre-commit


00:39:42.520 --> 00:39:44.640
because I think having it in pre-commit


00:39:44.640 --> 00:39:47.840
or in a CI pipeline is important


00:39:47.840 --> 00:39:50.680
because like you guys were joking about,


00:39:50.680 --> 00:39:52.440
often security problems come in


00:39:52.440 --> 00:39:55.560
because somebody is just trying to fix something that broke


00:39:55.560 --> 00:39:56.980
but they don't really realize


00:39:56.980 --> 00:39:59.740
how many other things it affects.


00:39:59.740 --> 00:40:00.920
So.


00:40:00.920 --> 00:40:01.760
- Yeah.


00:40:01.760 --> 00:40:02.880
- Yeah.


00:40:02.880 --> 00:40:04.480
- Yeah, I-- - We gotta make it work quick.


00:40:04.480 --> 00:40:06.520
Just turn on the debug thing, we'll just look real quick


00:40:06.520 --> 00:40:08.520
and then you forget to turn it off or whatever, yeah.


00:40:08.520 --> 00:40:10.160
- Yeah, for sure.


00:40:10.160 --> 00:40:13.400
Yeah, yeah, just stupid human errors.


00:40:13.400 --> 00:40:15.520
- Nice, all right, I wanna go back real quick, Brian,


00:40:15.520 --> 00:40:19.320
'cause your mention of friendly traceback


00:40:19.320 --> 00:40:20.680
got a lot of stuff, so let me just do


00:40:20.680 --> 00:40:23.080
a quick audience reaction.


00:40:23.080 --> 00:40:25.400
Robert says, "It is cool, Brian."


00:40:25.400 --> 00:40:27.840
John Sheehan says, "I was just thinking


00:40:27.840 --> 00:40:28.680
"of something I was saying would be cool.


00:40:28.680 --> 00:40:30.080
"It's a great teaching concept."


00:40:30.080 --> 00:40:32.380
Anthony says, "Super useful."


00:40:32.380 --> 00:40:36.900
John says, "I've been doing more demo code in the console rather than IDE.


00:40:36.900 --> 00:40:37.900
This looks like it would help."


00:40:37.900 --> 00:40:42.500
W, how to fix it.


00:40:42.500 --> 00:40:44.060
W, wow, how.


00:40:44.060 --> 00:40:45.740
W, I love it, Robert.


00:40:45.740 --> 00:40:46.740
Very good.


00:40:46.740 --> 00:40:49.460
Zach says, "What is this magic?


00:40:49.460 --> 00:40:50.460
This looks amazing."


00:40:50.460 --> 00:40:51.460
All right.


00:40:51.460 --> 00:40:52.460
Well, thanks, everyone.


00:40:52.460 --> 00:40:56.020
I'm glad you all liked that.


00:40:56.020 --> 00:40:57.940
That's it for our main items.


00:40:57.940 --> 00:41:02.220
Brian, you got any extras you want to throw out there?


00:41:02.220 --> 00:41:05.260
You were doing something with climate change?


00:41:05.260 --> 00:41:07.900
Or what are you doing this week?


00:41:07.900 --> 00:41:09.700
Yeah, I'm sharing a room with some people.


00:41:09.700 --> 00:41:12.580
Just a sec.


00:41:12.580 --> 00:41:18.740
I did do two meetups with Noah, and then


00:41:18.740 --> 00:41:20.380
with the Aberdeen Python meetup.


00:41:20.380 --> 00:41:20.880
Wait, wait.


00:41:20.880 --> 00:41:22.740
I got to interrupt you really quick.


00:41:22.740 --> 00:41:25.180
Did all that talk that Hannah did about bandit viruses


00:41:25.180 --> 00:41:26.900
get you?


00:41:26.900 --> 00:41:27.620
I'm just kidding.


00:41:27.620 --> 00:41:30.100
[LAUGHTER]


00:41:30.100 --> 00:41:34.100
Sorry about that.


00:41:34.100 --> 00:41:35.100
Carry on.


00:41:35.100 --> 00:41:41.980
Did all this talk with Hannah, that Hannah had about viruses and hacking and stuff with


00:41:41.980 --> 00:41:45.100
Bandit, did it make you nervous and you had to put on your mask?


00:41:45.100 --> 00:41:49.500
No, I just, I'm in a group meeting in a group room and somebody came in.


00:41:49.500 --> 00:41:52.500
I'm just teasing, carry on.


00:41:52.500 --> 00:41:54.300
That's funny.


00:41:54.300 --> 00:41:56.380
I also wanted to look like a bandit.


00:41:56.380 --> 00:41:58.460
Yeah, exactly.


00:41:58.460 --> 00:42:02.900
I was thrilled that Noah asked me to speak to them.


00:42:02.900 --> 00:42:03.740
That was neat.


00:42:03.740 --> 00:42:05.820
And then the Python Aberdeen people.


00:42:05.820 --> 00:42:08.380
And also like, but they mentioned that Ian


00:42:08.380 --> 00:42:11.260
from the Python Aberdeen group said that he had


00:42:11.260 --> 00:42:14.300
an arrangement with you that when you, Michael,


00:42:14.300 --> 00:42:17.380
that when the pandemic is over, you're gonna go over


00:42:17.380 --> 00:42:19.140
and you're gonna do like a whiskey tour


00:42:19.140 --> 00:42:20.340
or something like that.


00:42:20.340 --> 00:42:22.780
- So I don't know the details,


00:42:22.780 --> 00:42:24.140
but it sounds good to me already.


00:42:24.140 --> 00:42:24.980
Let's make it happen.


00:42:24.980 --> 00:42:26.780
- If that happens, I wanna go along.


00:42:26.780 --> 00:42:29.420
- Yeah, it's a Python bytes adding, let's do it.


00:42:29.420 --> 00:42:34.180
- And then we have, there are PDX West meetup tomorrow.


00:42:34.180 --> 00:42:36.380
You're gonna speak, that's kind of exciting.


00:42:36.380 --> 00:42:37.220
- Yeah, it's gonna be fun.


00:42:37.220 --> 00:42:39.880
And people, it's virtual, so people can attend however.


00:42:39.880 --> 00:42:43.100
- I'm also, I've got feedback from both you


00:42:43.100 --> 00:42:47.660
and Matt Harrison gave me some feedback.


00:42:47.660 --> 00:42:50.820
So I'm updating my training page on test and code.


00:42:50.820 --> 00:42:53.740
So, because I really like working with teams.


00:42:53.740 --> 00:42:56.660
So, and anybody else wants to give me feedback


00:42:56.660 --> 00:43:00.460
on my training page, maybe I'd love to hear it.


00:43:00.460 --> 00:43:03.100
- Yeah, or maybe they even wanna have some


00:43:03.100 --> 00:43:05.180
high test training for their team.


00:43:05.180 --> 00:43:07.700
- Yeah, I mean, testing is something that I think


00:43:07.700 --> 00:43:09.660
teaching a team at a time is a great thing


00:43:09.660 --> 00:43:12.820
because people can really, I don't know,


00:43:12.820 --> 00:43:15.220
we can talk about their particular problems,


00:43:15.220 --> 00:43:17.580
not general problems, it's good.


00:43:17.580 --> 00:43:18.500
- Yeah, for sure.


00:43:18.500 --> 00:43:21.020
Well, you also need more of a team buy-in on testing, right?


00:43:21.020 --> 00:43:23.380
'Cause if one person writes code and won't write the test


00:43:23.380 --> 00:43:25.160
and another person is really concerned


00:43:25.160 --> 00:43:26.240
about making the test fast.


00:43:26.240 --> 00:43:28.480
It's super frustrating when a person


00:43:28.480 --> 00:43:30.240
doesn't want to run the test,


00:43:30.240 --> 00:43:32.780
keeps breaking the build, but anyway,


00:43:32.780 --> 00:43:35.200
it's a team sort of sport in that regard.


00:43:35.200 --> 00:43:36.580
- Yep. - Yeah.


00:43:36.580 --> 00:43:37.420
- All right, awesome.


00:43:37.420 --> 00:43:38.560
So I got a couple of quick things.


00:43:38.560 --> 00:43:42.400
PEP 634, structural pattern matching in Python


00:43:42.400 --> 00:43:44.580
has been accepted for Python 3.10.


00:43:44.580 --> 00:43:47.760
That's like, imagine a switch case


00:43:47.760 --> 00:43:50.360
that has about 100 different options.


00:43:50.360 --> 00:43:51.260
That's what it is.


00:43:52.320 --> 00:43:56.520
like, like reg X, not quite, but sort of like style, like you can have like these


00:43:56.520 --> 00:43:58.480
patterns and stuff that happen in the cases.


00:43:58.480 --> 00:44:00.720
I don't know how to feel about this.


00:44:00.720 --> 00:44:05.120
Like if, if, let me put a perspective, like if the Walrus


00:44:05.120 --> 00:44:09.040
operator was controversial, like this is like, this is like a way bigger


00:44:09.040 --> 00:44:10.680
change to the language, so I didn't know it.


00:44:10.680 --> 00:44:13.000
It's both awesome and terrifying.


00:44:13.000 --> 00:44:14.120
Yes, exactly.


00:44:14.120 --> 00:44:14.400
Yeah.


00:44:14.400 --> 00:44:16.560
I was surprised.


00:44:16.560 --> 00:44:16.880
Yeah.


00:44:16.880 --> 00:44:17.120
Yeah.


00:44:17.120 --> 00:44:19.020
So my hand, like this got accepted.


00:44:19.020 --> 00:44:22.120
It seemed to be sort of counter to the simplicity of Python.


00:44:22.120 --> 00:44:26.200
Like I did not at all against having a simple switch statement that does certain things,


00:44:26.200 --> 00:44:27.200
but this seems like a lot.


00:44:27.200 --> 00:44:29.080
I may come to love it.


00:44:29.080 --> 00:44:33.880
One thing that maybe would help me come to a better understanding and acceptance was if the


00:44:33.880 --> 00:44:38.440
pet page had at least one example of it in use, like the whole page that talks about all the


00:44:38.440 --> 00:44:42.120
details says, I don't believe there's a single code sample ever.


00:44:42.120 --> 00:44:44.360
Well, there's a tutorial page as well.


00:44:44.360 --> 00:44:46.840
So is there, there's the tutorial page.


00:44:46.840 --> 00:44:47.160
Okay.


00:44:47.160 --> 00:44:48.800
Maybe that's where I should go and check it out.


00:44:48.800 --> 00:44:49.040
Yeah.


00:44:49.080 --> 00:44:52.720
But it still sort of feels like a five barrel foot gun.


00:44:52.720 --> 00:44:53.640
Yeah, it does.


00:44:53.640 --> 00:44:55.240
Well, but the page that I'm looking--


00:44:55.240 --> 00:44:57.520
the pip thing that I'm listing to, the official PEP,


00:44:57.520 --> 00:45:00.560
I don't think it has--


00:45:00.560 --> 00:45:01.640
does it have the tutorial?


00:45:01.640 --> 00:45:05.120
Yeah, no, you're right.


00:45:05.120 --> 00:45:05.620
It does.


00:45:05.620 --> 00:45:06.120
It does.


00:45:06.120 --> 00:45:07.280
It's somewhere down.


00:45:07.280 --> 00:45:08.680
Yeah, PEP 636.


00:45:08.680 --> 00:45:11.120
Yeah, it's a different PEP that is the tutorial for the PEP.


00:45:11.120 --> 00:45:11.520
Interesting.


00:45:11.520 --> 00:45:12.440
I didn't realize that.


00:45:12.440 --> 00:45:14.160
It's kind of meta, honestly.


00:45:14.160 --> 00:45:16.800
Anyway, to me, I'm a little surprised this is accepted.


00:45:16.800 --> 00:45:18.280
It's fine.


00:45:18.280 --> 00:45:20.800
I know people worked really hard on it, and congratulations.


00:45:20.800 --> 00:45:21.600
A lot of people really want it.


00:45:21.600 --> 00:45:23.040
It comes from Haskell.


00:45:23.040 --> 00:45:26.800
So Haskell had this pattern matching alternate struct thing.


00:45:26.800 --> 00:45:27.040
I don't know.


00:45:27.040 --> 00:45:29.680
I just feel like Haskell and Python are far away from each other.


00:45:29.680 --> 00:45:31.400
So that's my first impression.


00:45:31.400 --> 00:45:34.440
I will probably come to love it at some point.


00:45:34.440 --> 00:45:36.160
PyCon registration is open.


00:45:36.160 --> 00:45:39.200
So if you want to go to PyCon, you want to attend and be more part of it


00:45:39.200 --> 00:45:41.840
than just watching the live stream on YouTube, be part of that.


00:45:41.840 --> 00:45:44.040
I think I'm going to try to make a conscious effort


00:45:44.040 --> 00:45:47.520
to attend the virtual conference, not just catch some videos.


00:45:47.520 --> 00:45:48.520
So you can do that.


00:45:48.520 --> 00:45:50.360
- Yeah, PyCon is awesome.


00:45:50.360 --> 00:45:54.520
Like just, I, my first conference was PyCon


00:45:54.520 --> 00:45:56.280
and then I went to other conferences


00:45:56.280 --> 00:45:59.040
and I was like, what are wrong with these conferences?


00:45:59.040 --> 00:46:01.440
Like, why do they suck so much?


00:46:01.440 --> 00:46:03.000
- I know, I feel the same way.


00:46:03.000 --> 00:46:03.840
I know.


00:46:03.840 --> 00:46:06.200
It's really, really special.


00:46:06.200 --> 00:46:07.560
I'm sure the virtual one will be good.


00:46:07.560 --> 00:46:09.680
I can't wait for the in-person stuff to come back


00:46:09.680 --> 00:46:10.600
'cause it really is--


00:46:10.600 --> 00:46:11.480
- For sure.


00:46:11.480 --> 00:46:13.880
Yeah, it's a whole nother experience in person.


00:46:13.880 --> 00:46:16.320
- I consider it basically my geek holiday


00:46:16.320 --> 00:46:19.760
I get away and just get a hang out with my geek friends. I happen to learn stuff while I'm there.


00:46:19.760 --> 00:46:24.560
>> Totally. >> And then Python web conf is coming up.


00:46:24.560 --> 00:46:28.960
And that's registration is open for that as well. And I suppose probably PyCascades,


00:46:28.960 --> 00:46:35.120
which Brian and I are on a panel at there as well. I put a link into an hour of code for Minecraft,


00:46:35.120 --> 00:46:40.160
which has to do with programming Minecraft with Python. If people are looking to teach kids stuff,


00:46:40.960 --> 00:46:42.960
That looks pretty neat.


00:46:42.960 --> 00:46:45.720
So, my daughter's super into Minecraft.


00:46:45.720 --> 00:46:46.560
I don't do anything with it.


00:46:46.560 --> 00:46:48.080
But if you are and you want to make it part


00:46:48.080 --> 00:46:50.360
of your curriculum, that's pretty cool.


00:46:50.360 --> 00:46:51.560
Hannah, anything you want to throw out there


00:46:51.560 --> 00:46:53.800
before we break out the joke?


00:46:53.800 --> 00:46:56.340
- Nope, I'm good.


00:46:56.340 --> 00:46:57.180
- Awesome.


00:46:57.180 --> 00:46:58.160
- Damn it, damn it.


00:46:58.160 --> 00:46:59.920
- All right, so this one, we have something


00:46:59.920 --> 00:47:02.200
a little more interactive for everyone.


00:47:02.200 --> 00:47:07.200
We've got a song about Pep8, about writing clean code.


00:47:08.360 --> 00:47:13.240
This is written and produced and sung by Leon Sandoy.


00:47:13.240 --> 00:47:15.280
It goes by Lemon.


00:47:15.280 --> 00:47:18.720
Him and his team over at Python Discord, he runs Python Discord, and apparently it was


00:47:18.720 --> 00:47:20.440
a team effort creating this.


00:47:20.440 --> 00:47:23.120
The reason I'm covering this is a bunch of people sent it over.


00:47:23.120 --> 00:47:25.880
Michael Rogers, Valet, sent it over, "You should cover this.


00:47:25.880 --> 00:47:27.160
Dan Bader said, 'Check this out.'


00:47:27.160 --> 00:47:29.400
Alan McElroy said, 'Hey, check out this thing.'"


00:47:29.400 --> 00:47:30.400
All right.


00:47:30.400 --> 00:47:34.760
I actually spoke to Lemon and said, "Hey, do you mind if we play this?"


00:47:34.760 --> 00:47:36.200
He said, "No, that'd be awesome.


00:47:36.200 --> 00:47:38.200
Just give us a shout, of course."


00:47:38.200 --> 00:47:39.960
We're going to actually play the song as part of this.


00:47:39.960 --> 00:47:41.400
In the live stream, you get the video.


00:47:41.400 --> 00:47:43.680
On the audio, you get, well, audio.


00:47:43.680 --> 00:47:45.600
So I'll kick this off, and we'll come back.


00:47:45.600 --> 00:47:48.000
And I'd love to hear Brian and Hannah's thoughts.


00:47:48.000 --> 00:47:48.720
Here we go.


00:47:48.720 --> 00:47:52.460
[MUSIC - BRIAN AND HANNAH, "CURLY BRACES"]


00:47:52.460 --> 00:48:08.160
You don't need any curly braces just for spaces.


00:48:08.160 --> 00:48:11.660
just for spaces.


00:48:11.660 --> 00:48:16.660
Wildcard imports should be avoided


00:48:16.660 --> 00:48:22.660
in most cases, in most cases.


00:48:22.660 --> 00:48:27.660
Try to make sure there's no trailing whitespace.


00:48:27.660 --> 00:48:33.660
It's confusing, it's confusing.


00:48:33.660 --> 00:48:38.660
Trailing commas go behind list items


00:48:38.660 --> 00:48:41.660
Get blamed, titans


00:48:41.660 --> 00:48:44.660
Get blamed, titans


00:48:44.660 --> 00:48:47.660
And comments are important


00:48:47.660 --> 00:48:50.660
As long as they're maintained


00:48:50.660 --> 00:48:53.660
When comments are misleading


00:48:53.660 --> 00:48:56.660
It will drive people insane


00:48:56.660 --> 00:48:59.660
Just try to be empathic


00:48:59.660 --> 00:49:01.660
Just try to be a friend


00:49:01.660 --> 00:49:07.660
It's really not that hard, just adhere to


00:49:07.660 --> 00:49:11.660
PEPPAID


00:49:11.660 --> 00:49:16.660
PEPPAID


00:49:16.660 --> 00:49:22.660
Constants should be named all capital letters


00:49:22.660 --> 00:49:29.660
And live forever, live forever


00:49:29.660 --> 00:49:33.820
And camel case is not for Python


00:49:33.820 --> 00:49:36.420
never ever


00:49:36.420 --> 00:49:39.260
never ever


00:49:39.260 --> 00:49:44.980
And never use a bare exception


00:49:44.980 --> 00:49:47.500
be specific


00:49:47.500 --> 00:49:50.300
be specific


00:49:50.300 --> 00:49:56.180
No one likes the horizontal scrollbar


00:49:56.180 --> 00:49:58.700
Keep it


00:49:58.740 --> 00:50:02.740
Keep it succinct


00:50:02.740 --> 00:50:05.740
And comments are important


00:50:05.740 --> 00:50:08.740
As long as they're maintained


00:50:08.740 --> 00:50:10.740
When comments are misleading


00:50:10.740 --> 00:50:13.740
It will drive people insane


00:50:13.740 --> 00:50:16.740
Just try to be empathic


00:50:16.740 --> 00:50:19.740
Just try to be a friend


00:50:19.740 --> 00:50:22.740
It's really not that hard


00:50:22.740 --> 00:50:25.740
Just adhere to


00:50:25.740 --> 00:50:42.620
What do y'all think?


00:50:42.620 --> 00:50:44.740
That was amazing.


00:50:44.740 --> 00:50:50.060
I like, I can sympathize with like so many of the things.


00:50:50.060 --> 00:50:54.860
I'm just like flashbacks to like a discussion I had with my teammate about like comments.


00:50:54.860 --> 00:51:02.540
No, this comment doesn't actually describe what the code is doing.


00:51:02.540 --> 00:51:05.260
It's worse than having no comment. It really is.


00:51:05.260 --> 00:51:11.900
It really is. Yeah. Or like, if it describes like, literally what the code is doing and not like,


00:51:11.900 --> 00:51:13.980
you know, kind of like high level.


00:51:13.980 --> 00:51:16.300
Background or anything other than...


00:51:16.300 --> 00:51:17.820
The why, the why is important.


00:51:19.100 --> 00:51:24.220
I love it. So two things, Lemon and team, well done on the song and man, you got a great voice.


00:51:24.220 --> 00:51:27.660
That's actually, it was beautiful and funny. Yeah.


00:51:27.660 --> 00:51:32.540
All right. Well, Brian, we probably should wrap it up. Otherwise you got to.


00:51:32.540 --> 00:51:34.620
Yeah. These people are going to lynch me if I squat in here.


00:51:34.620 --> 00:51:39.100
All right. Well, Hannah, thanks so much for being here. It's good to have you on the show.


00:51:39.100 --> 00:51:40.940
And Brian, thanks as always. Everyone, thanks for listening.


00:51:40.940 --> 00:51:41.420
Thanks.


00:51:41.420 --> 00:51:43.680
Bye.


00:51:43.680 --> 00:51:53.680
[BLANK_AUDIO]

