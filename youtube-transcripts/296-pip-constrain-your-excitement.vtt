WEBVTT

00:00:00.000 --> 00:00:03.760
- Hey Brian. - Hey.


00:00:03.760 --> 00:00:04.840
- Hey, hey YouTube.


00:00:04.840 --> 00:00:06.280
Thanks everyone for being here,


00:00:06.280 --> 00:00:10.720
watching live or the recording of the live stream.


00:00:10.720 --> 00:00:13.200
So as always, we'd love to hear your thoughts


00:00:13.200 --> 00:00:15.680
during the show, put them out there.


00:00:15.680 --> 00:00:17.120
And with that, I think, yeah,


00:00:17.120 --> 00:00:18.040
I think we should kick it off.


00:00:18.040 --> 00:00:19.120
What do you think, Brian?


00:00:19.120 --> 00:00:19.940
- Yeah.


00:00:19.940 --> 00:00:23.800
- I was like, all right, well, here we go.


00:00:23.800 --> 00:00:25.800
Hello and welcome to Python Bytes,


00:00:25.800 --> 00:00:27.480
where we deliver Python news and headlines


00:00:27.480 --> 00:00:28.720
directly to your earbuds.


00:00:28.720 --> 00:00:33.720
This is episode 296, recorded August 9th, 2022.


00:00:33.720 --> 00:00:35.400
I'm Michael Kennedy.


00:00:35.400 --> 00:00:36.640
- And I'm Brian Okken.


00:00:36.640 --> 00:00:40.920
- Hey Brian, so good to have you back together


00:00:40.920 --> 00:00:44.240
talking about Python news as we do every week,


00:00:44.240 --> 00:00:47.320
unless we skip a week and then we double it up.


00:00:47.320 --> 00:00:49.760
- Yeah, that's good.


00:00:49.760 --> 00:00:50.600
- Yeah, it's great.


00:00:50.600 --> 00:00:53.840
Also, we have a new sponsor this week.


00:00:53.840 --> 00:00:56.320
So I just wanna say thank you to Mozilla


00:00:56.320 --> 00:00:59.820
in the IRL podcast for sponsoring the show.


00:00:59.820 --> 00:01:00.660
- Nice.


00:01:00.660 --> 00:01:02.700
- Check them out at pythonbytes.fm/irl


00:01:02.700 --> 00:01:04.180
and more on that later.


00:01:04.180 --> 00:01:06.060
For now, I wanna hear what you've discovered


00:01:06.060 --> 00:01:07.680
to share with us.


00:01:07.680 --> 00:01:08.940
- I wanna talk about-


00:01:08.940 --> 00:01:11.460
- Can you constrain your excitement?


00:01:11.460 --> 00:01:14.300
- Yeah, I wanna talk about pip constraints.


00:01:14.300 --> 00:01:19.020
So there's a, I think I knew about pip constraints,


00:01:19.020 --> 00:01:20.900
but I kind of forgot about them.


00:01:20.900 --> 00:01:24.880
But there's an article called "Pip Constraints Files"


00:01:24.880 --> 00:01:29.640
by somebody named Luminousman.


00:01:29.640 --> 00:01:32.960
So this is-- so they're kind of neat.


00:01:32.960 --> 00:01:34.320
So one of the things--


00:01:34.320 --> 00:01:39.960
I was just using a pip requirements.in file recently


00:01:39.960 --> 00:01:43.120
in a course that I'm taking.


00:01:43.120 --> 00:01:48.360
And I like using requirements.in to generate my requirements.txt


00:01:48.360 --> 00:01:49.760
file.


00:01:49.760 --> 00:01:53.080
But there's-- and then there's--


00:01:53.080 --> 00:01:55.760
Yeah, anyway, that uses pip-tools,


00:01:55.760 --> 00:01:56.840
so you have to get pip-tools.


00:01:56.840 --> 00:01:58.240
But so there's that.


00:01:58.240 --> 00:01:59.440
And then there's also pinning.


00:01:59.440 --> 00:02:02.960
So especially with applications, we


00:02:02.960 --> 00:02:06.760
see it more in applications, less in libraries


00:02:06.760 --> 00:02:08.280
of pinning the application.


00:02:08.280 --> 00:02:11.400
But you can, even in libraries, there's


00:02:11.400 --> 00:02:16.400
regularly constraints around stuff to say, hey,


00:02:16.400 --> 00:02:19.440
for this library, I need this range of versions.


00:02:19.440 --> 00:02:21.680
Or it has to be greater than this or something,


00:02:21.680 --> 00:02:24.180
'cause I'm depending on that and that's fine.


00:02:24.180 --> 00:02:29.180
But this is a way to say not what libraries I wanna use,


00:02:29.180 --> 00:02:34.520
but if I use a library, which version?


00:02:34.520 --> 00:02:36.840
So, or constraint sharing the version


00:02:36.840 --> 00:02:38.360
without saying I want the library.


00:02:38.360 --> 00:02:42.400
So, and in the actually in the pip documentation,


00:02:42.400 --> 00:02:45.640
it says constraint files are requirement files


00:02:45.640 --> 00:02:47.920
that only control which version,


00:02:47.920 --> 00:02:49.520
not whether or not it's installed.


00:02:49.520 --> 00:02:51.460
So how would you use this?


00:02:51.460 --> 00:02:55.980
So this article talks about it and it basically says


00:02:55.980 --> 00:02:59.560
you kind of use it normally pip install requirements.


00:02:59.560 --> 00:03:03.140
That text, but you might have,


00:03:03.140 --> 00:03:05.660
if you do like a freeze for instance or something


00:03:05.660 --> 00:03:06.660
or you just pin everything,


00:03:06.660 --> 00:03:08.740
you might have all of the versions,


00:03:08.740 --> 00:03:13.460
but you might only want like constraints on like one of them


00:03:13.460 --> 00:03:17.660
say, let's say you want, you're including pandas,


00:03:17.660 --> 00:03:19.740
but you want a certain version of pandas


00:03:19.740 --> 00:03:23.040
or you want a certain version of NumPy


00:03:23.040 --> 00:03:26.020
even though pandas requires NumPy or something like that.


00:03:26.020 --> 00:03:29.040
You can have a constraints file that lists,


00:03:29.040 --> 00:03:32.040
this just looks like a pip freeze file,


00:03:32.040 --> 00:03:35.700
but you can put like less than or less than equal


00:03:35.700 --> 00:03:38.260
if you want, or, and you don't have to have everything.


00:03:38.260 --> 00:03:41.020
So you could just pin one of the things.


00:03:41.020 --> 00:03:44.100
And that way, like, let's say you were doing pandas


00:03:44.100 --> 00:03:45.700
and you wanted to constrain NumPy


00:03:45.700 --> 00:03:47.660
to be a certain version of NumPy.


00:03:47.660 --> 00:03:50.280
you can do that with a constraints file


00:03:50.280 --> 00:03:53.040
and not have it, not have to specify everything,


00:03:53.040 --> 00:03:54.680
just have it be separate.


00:03:54.680 --> 00:03:59.100
And the article talks about actually just sticking


00:03:59.100 --> 00:04:02.240
the constraints, specifying your constraint file


00:04:02.240 --> 00:04:04.140
within the requirements file,


00:04:04.140 --> 00:04:05.280
and that way they're separate.


00:04:05.280 --> 00:04:06.960
And I was thinking about that,


00:04:06.960 --> 00:04:09.400
and that's an interesting thing to say


00:04:09.400 --> 00:04:12.680
the dependencies of my application don't change,


00:04:12.680 --> 00:04:15.720
but the constraints might because of testing or whatever.


00:04:15.720 --> 00:04:19.160
And this separating of these two files would help with like,


00:04:19.160 --> 00:04:22.320
you know, when you have two files of version control,


00:04:22.320 --> 00:04:23.480
you've changed your constraints,


00:04:23.480 --> 00:04:26.080
but you haven't changed really what you're depending on,


00:04:26.080 --> 00:04:27.280
just the versions of those.


00:04:27.280 --> 00:04:30.680
So it's kind of a neat to have that separate possibility.


00:04:30.680 --> 00:04:33.080
- So for people who are listening,


00:04:33.080 --> 00:04:35.760
literally the first line of the requirements.txt file


00:04:35.760 --> 00:04:39.120
is --constraint, constraints.txt,


00:04:39.120 --> 00:04:40.880
which I'd never considered doing that.


00:04:40.880 --> 00:04:42.160
That's interesting.


00:04:42.160 --> 00:04:44.560
- And then one of the things I thought is,


00:04:44.560 --> 00:04:46.880
But I'm not, and this works if you're handwriting


00:04:46.880 --> 00:04:50.640
your requirements file, but what if you're not?


00:04:50.640 --> 00:04:55.640
What if you're using requirements.in instead?


00:04:55.640 --> 00:04:57.880
And this article doesn't go into it,


00:04:57.880 --> 00:05:01.200
but I tried just instead of putting that constraint thing


00:05:01.200 --> 00:05:06.200
in a requirements.txt file,


00:05:06.200 --> 00:05:08.080
putting it in a requirements.in


00:05:08.080 --> 00:05:11.160
and using pip compile to generate it.


00:05:11.160 --> 00:05:15.320
And it, the pip compile seems to also watch, look at this.


00:05:15.320 --> 00:05:18.960
So it, this constraint works for pip compile as well.


00:05:18.960 --> 00:05:21.120
- Okay. That's cool.


00:05:21.120 --> 00:05:25.900
- Yeah. So kind of a neat thing to check out.


00:05:25.900 --> 00:05:28.760
The usage of it's pretty easy.


00:05:28.760 --> 00:05:32.240
Just, yeah.


00:05:32.240 --> 00:05:34.080
Anyway, pinning your requirements is good,


00:05:34.080 --> 00:05:35.160
but don't pin them too tight.


00:05:35.160 --> 00:05:38.960
If, especially for application, for libraries


00:05:38.960 --> 00:05:40.520
and then for applications.


00:05:40.520 --> 00:05:43.160
Yeah, I kind of like this


00:05:43.160 --> 00:05:45.320
because there's a lot of times where


00:05:45.320 --> 00:05:48.920
I know there's a bug in something or I've heard about it


00:05:48.920 --> 00:05:51.880
or I haven't gotten around to fixing my code


00:05:51.880 --> 00:05:53.520
to deal with the new version yet.


00:05:53.520 --> 00:05:55.000
So I'm gonna pin something.


00:05:55.000 --> 00:05:57.120
I don't necessarily need to pin everything.


00:05:57.120 --> 00:05:59.080
I just need to pin certain parts of it.


00:05:59.080 --> 00:06:00.560
So that's kind of neat.


00:06:00.560 --> 00:06:04.200
- So I like this.


00:06:04.200 --> 00:06:05.920
Just also a little bit of a sidebar


00:06:05.920 --> 00:06:09.500
with the pip compile from pip-tools,


00:06:09.500 --> 00:06:10.820
you know, you give it the in file


00:06:10.820 --> 00:06:12.620
and it generates the TXT file


00:06:12.620 --> 00:06:15.420
and it basically obliterates the TXT file,


00:06:15.420 --> 00:06:17.300
whatever's there previously.


00:06:17.300 --> 00:06:18.140
- Yeah.


00:06:18.140 --> 00:06:18.960
- And that can be a hassle,


00:06:18.960 --> 00:06:22.900
especially if you wanna have like a requirements.dash dev


00:06:22.900 --> 00:06:25.060
and then a production requirements.


00:06:25.060 --> 00:06:28.180
And if you install the dev one,


00:06:28.180 --> 00:06:32.020
you wanna also pick up like a -r on the main ones


00:06:32.020 --> 00:06:34.300
and the pip-tools blows that away.


00:06:34.300 --> 00:06:37.100
So what I ended up doing a lot for my workflows


00:06:37.100 --> 00:06:41.820
is having pip-tools generate some base TXT file


00:06:41.820 --> 00:06:44.100
and then having like requirements.txt


00:06:44.100 --> 00:06:47.560
just have a -r requirements production.


00:06:47.560 --> 00:06:52.560
And then the dev have -r requirements.prod


00:06:52.560 --> 00:06:56.580
like sort of like put those commands just in real simple


00:06:56.580 --> 00:06:58.900
and have it actually generate a separate file.


00:06:58.900 --> 00:07:00.380
So it kind of makes it a little bit messy


00:07:00.380 --> 00:07:02.840
but it gives you lots of flexibility.


00:07:02.840 --> 00:07:04.780
- Cool, yeah.


00:07:04.780 --> 00:07:05.620
- Yeah. - I'd like to see that


00:07:05.620 --> 00:07:07.080
written up, that's neat.


00:07:07.080 --> 00:07:09.680
- Yeah, maybe I should actually blog something


00:07:09.680 --> 00:07:11.440
like in the last three years.


00:07:11.440 --> 00:07:12.280
- Blog.


00:07:12.280 --> 00:07:13.680
- Pam, yeah, what is that?


00:07:13.680 --> 00:07:14.640
Is that with words?


00:07:14.640 --> 00:07:17.040
Written words, not spoken words.


00:07:17.040 --> 00:07:18.200
Pamphlet on the audience says,


00:07:18.200 --> 00:07:19.680
"Does it take over requirements


00:07:19.680 --> 00:07:22.520
"like if pip would resolve numpy to 1.19


00:07:22.520 --> 00:07:24.420
"and you say at 120?"


00:07:24.420 --> 00:07:26.840
It sounds to me like it does,


00:07:26.840 --> 00:07:28.940
but what do you think, Brian?


00:07:28.940 --> 00:07:32.120
- Well, like I tried it with a typer.


00:07:32.120 --> 00:07:36.320
So I know Typer pulls in a click for instance,


00:07:36.320 --> 00:07:38.800
and they're both command line things.


00:07:38.800 --> 00:07:41.680
And so then I said, okay, well,


00:07:41.680 --> 00:07:46.080
Typer has a broad range of click things they can do.


00:07:46.080 --> 00:07:50.500
And if I constrain click to be a lower number, will it work?


00:07:50.500 --> 00:07:52.320
And I blew everything away and tried it again.


00:07:52.320 --> 00:07:55.080
And sure enough, it did.


00:07:55.080 --> 00:07:58.720
It like add those extra constraints on top of even like,


00:07:58.720 --> 00:08:01.660
so I was only declaring Typer,


00:08:01.660 --> 00:08:03.580
but type was specifying click


00:08:03.580 --> 00:08:05.940
and I could specify which version of click I wanted.


00:08:05.940 --> 00:08:06.780
So.


00:08:06.780 --> 00:08:08.060
- Yeah, this is cool.


00:08:08.060 --> 00:08:09.500
- Yeah.


00:08:09.500 --> 00:08:10.500
It's I guess,


00:08:10.500 --> 00:08:16.140
adding one more complexity to your packaging workflow.


00:08:16.140 --> 00:08:17.140
So, but.


00:08:17.140 --> 00:08:17.980
- Exactly.


00:08:17.980 --> 00:08:18.800
- But useful if you need it.


00:08:18.800 --> 00:08:19.640
- But flexibility.


00:08:19.640 --> 00:08:20.460
- Yeah, flexibility.


00:08:20.460 --> 00:08:21.460
- Good flexibility.


00:08:21.460 --> 00:08:23.680
All right, well, I'll cover something simple.


00:08:23.680 --> 00:08:24.580
Async caching.


00:08:24.580 --> 00:08:26.700
- Simple.


00:08:26.700 --> 00:08:28.940
(laughing)


00:08:29.980 --> 00:08:31.740
- It is simple in a sense.


00:08:31.740 --> 00:08:32.580
- Okay.


00:08:32.580 --> 00:08:35.900
- We have some nice stuff built into Python,


00:08:35.900 --> 00:08:39.140
like async, sorry, with like func tools


00:08:39.140 --> 00:08:42.340
and the LRU cache and whatnot.


00:08:42.340 --> 00:08:47.340
But from what I understand, those are synchronous only.


00:08:47.340 --> 00:08:49.260
Basically, their decorators,


00:08:49.260 --> 00:08:51.180
those decorators wrap functions


00:08:51.180 --> 00:08:54.340
and the decorators themselves are synchronous.


00:08:54.340 --> 00:08:57.540
And so it only makes sense for them to wrap sync functions.


00:08:57.540 --> 00:08:58.460
Yeah?


00:08:58.460 --> 00:08:59.300
- Okay.


00:08:59.300 --> 00:09:01.220
So if you have an async function,


00:09:01.220 --> 00:09:02.820
but you wanna do the LRU cache,


00:09:02.820 --> 00:09:04.700
where you just put the decorator LRU cache,


00:09:04.700 --> 00:09:07.220
and then if it gets called with the same arguments,


00:09:07.220 --> 00:09:09.300
again, it doesn't even call the function.


00:09:09.300 --> 00:09:10.180
It just goes, you know what?


00:09:10.180 --> 00:09:11.140
You've already called it with that.


00:09:11.140 --> 00:09:11.960
Here's the answer.


00:09:11.960 --> 00:09:13.860
So like if you're in a tight loop


00:09:13.860 --> 00:09:15.940
and you're pulling in some values


00:09:15.940 --> 00:09:18.660
and you gotta compute something with it through a function,


00:09:18.660 --> 00:09:22.180
but there's a good chance of repeat of those values,


00:09:22.180 --> 00:09:23.900
you can put an LRU cache in,


00:09:23.900 --> 00:09:26.740
long as that it's pretty deterministic


00:09:26.740 --> 00:09:28.940
and you call it again, you expect the same output,


00:09:28.940 --> 00:09:32.180
you can make it fly by just adding one of those caches on it.


00:09:32.180 --> 00:09:35.940
So short version of this is this is the same idea,


00:09:35.940 --> 00:09:39.380
but for async functions.


00:09:39.380 --> 00:09:41.680
So I can have some function I wanna call


00:09:41.680 --> 00:09:43.940
and I just say @lrucache,


00:09:43.940 --> 00:09:48.620
and this one you give it a maximum size of results


00:09:48.620 --> 00:09:51.260
that it's willing, inputs and matched up results


00:09:51.260 --> 00:09:53.280
it's willing to cache up.


00:09:53.280 --> 00:09:56.520
And then if you call it with the same arguments,


00:09:56.520 --> 00:09:58.980
it'll give the same response back.


00:09:58.980 --> 00:09:59.980
So that's pretty cool.


00:09:59.980 --> 00:10:04.100
That's the sort of last used version.


00:10:04.100 --> 00:10:07.020
And then you also have a time to live,


00:10:07.020 --> 00:10:09.280
an async TTL.


00:10:09.280 --> 00:10:11.960
So you can say any results,


00:10:11.960 --> 00:10:14.980
I don't care how many I've used,


00:10:14.980 --> 00:10:18.140
but just within the last 60 seconds.


00:10:18.140 --> 00:10:20.280
And one thing that's really, really nice about that


00:10:20.280 --> 00:10:22.460
is it will expire results.


00:10:22.460 --> 00:10:24.100
So maybe you're calling an API


00:10:24.100 --> 00:10:25.660
and you wanna do rate limiting.


00:10:25.660 --> 00:10:30.660
but you only want to call it maybe once a minute.


00:10:30.660 --> 00:10:34.660
That'll both make your code faster, but also not overrun


00:10:34.660 --> 00:10:38.660
your rate limiting that you might have with your API key and so on.


00:10:38.660 --> 00:10:42.660
So here's a real simple way to add rate limiting. It's just a time to live.


00:10:42.660 --> 00:10:46.660
I guess you got to have the same input arguments, but assuming that you have the same arguments,


00:10:46.660 --> 00:10:50.660
that's one way to do it. And you can also specify the max size, which is pretty cool.


00:10:50.660 --> 00:10:54.660
- Yeah, or if you're grabbing something off of a service,


00:10:54.660 --> 00:10:57.820
what's the temperature out?


00:10:57.820 --> 00:11:01.460
I don't really care if it fluctuates every second,


00:11:01.460 --> 00:11:05.100
but every minute I might check it sort of thing.


00:11:05.100 --> 00:11:07.900
- Yep, yep, precisely.


00:11:07.900 --> 00:11:09.540
- And I don't currently-- - Currency conversion,


00:11:09.540 --> 00:11:10.900
all those kinds of things.


00:11:10.900 --> 00:11:15.020
- So there's not a TTL on the normal LRU cache, is there?


00:11:15.020 --> 00:11:16.180
- I don't believe so.


00:11:16.180 --> 00:11:18.700
- Yeah, so that's actually cool.


00:11:18.700 --> 00:11:20.740
I like the time to live part.


00:11:20.740 --> 00:11:21.660
- I do too, I like that.


00:11:21.660 --> 00:11:23.140
That really resonates with me.


00:11:23.140 --> 00:11:28.640
The other thing that's pretty cool here is you can pass ORM objects,


00:11:28.640 --> 00:11:32.580
you can pass request objects, you can pass custom classes.


00:11:32.580 --> 00:11:38.080
Even if the classes are not hashable, it will still go through and actually...


00:11:38.080 --> 00:11:41.040
So one of the problems you can run into is if you say


00:11:41.040 --> 00:11:45.780
if you've got a customer object or a product object or something,


00:11:45.780 --> 00:11:47.880
you call it once, you've created this object,


00:11:47.880 --> 00:11:49.980
maybe you got it from the database, and you say,


00:11:49.980 --> 00:11:52.580
call the function with the LRU cache,


00:11:52.580 --> 00:11:54.500
and it says, well, what object is this?


00:11:54.500 --> 00:11:55.860
Have I seen it before?


00:11:55.860 --> 00:11:57.340
And maybe yes or no.


00:11:57.340 --> 00:11:59.340
And then you call it again.


00:11:59.340 --> 00:12:01.100
It might have the same effective value,


00:12:01.100 --> 00:12:03.820
but it's not actually the same object.


00:12:03.820 --> 00:12:05.420
You might get it from the database again,


00:12:05.420 --> 00:12:08.220
so it has a different pointer, a different ID, and so on.


00:12:08.220 --> 00:12:13.360
I'm not sure what the behavior there is,


00:12:13.360 --> 00:12:16.160
but this one will actually look and see,


00:12:16.160 --> 00:12:18.180
oh, is it actually a class?


00:12:18.180 --> 00:12:22.420
then let's just get the dictionary and use the dictionary,


00:12:22.420 --> 00:12:27.180
the underlying field dictionary of the class to use as the match


00:12:27.180 --> 00:12:28.580
to see if I'm calling it again.


00:12:28.580 --> 00:12:32.180
So there's some really cool functionality here.


00:12:32.180 --> 00:12:35.020
Simple little class, but if you want to quickly add


00:12:35.020 --> 00:12:39.880
some performance boost async functions, you can add this.


00:12:39.880 --> 00:12:42.220
Oh, nice. Okay, this is neat.


00:12:42.220 --> 00:12:44.520
Yeah, yeah, it's neat.


00:12:44.520 --> 00:12:45.080
Yeah, thanks.


00:12:45.080 --> 00:12:49.080
Also, it's entirely possible--


00:12:49.080 --> 00:12:51.680
I don't think it does, but it's entirely possible


00:12:51.680 --> 00:12:58.520
to add async and synchronous support to a single decorator


00:12:58.520 --> 00:13:01.640
if you need to.


00:13:01.640 --> 00:13:04.400
For example, I have the--


00:13:04.400 --> 00:13:05.200
what was it called?


00:13:05.200 --> 00:13:12.920
The Alien templates FastAPI one that I created.


00:13:12.920 --> 00:13:14.040
Let's see.


00:13:14.040 --> 00:13:15.880
Look at that.


00:13:15.880 --> 00:13:16.760
Number one result.


00:13:16.760 --> 00:13:18.520
What a search thing.


00:13:18.520 --> 00:13:24.760
So there's this FastAPI Chameleon framework or library


00:13:24.760 --> 00:13:27.240
that I created that allows you to just do a decorator


00:13:27.240 --> 00:13:30.440
and say .template and put a HTML template


00:13:30.440 --> 00:13:33.920
in the Chameleon language on a FastAPI response.


00:13:33.920 --> 00:13:36.040
And it returns a dictionary, and that just turns it


00:13:36.040 --> 00:13:38.760
into an HTML response.


00:13:38.760 --> 00:13:40.760
This one, in FastAPI, you can both


00:13:40.760 --> 00:13:43.120
have synchronous and asynchronous functions.


00:13:43.120 --> 00:13:48.240
So this thing has to look and see if the inbound thing is a co-routine, an async co-routine,


00:13:48.240 --> 00:13:53.760
and it will dynamically generate the right wrapper, an async one or a synchronous one


00:13:53.760 --> 00:13:54.760
based on.


00:13:54.760 --> 00:13:55.760
So it's not super hard.


00:13:55.760 --> 00:14:00.000
It's also not super easy, but I did it, so it can be done.


00:14:00.000 --> 00:14:01.000
Cool.


00:14:01.000 --> 00:14:05.600
Anyway, that's a little bit of a diversion.


00:14:05.600 --> 00:14:11.440
But this async cache versus a non-async cache, I feel like it could just be one thing if


00:14:11.440 --> 00:14:12.880
it really, really wanted to be.


00:14:12.880 --> 00:14:15.800
but I feel like the person who created it probably is just like,


00:14:15.800 --> 00:14:17.080
I need this for async methods.


00:14:17.080 --> 00:14:17.940
Let's go.


00:14:17.940 --> 00:14:19.640
Yeah.


00:14:19.640 --> 00:14:23.600
It's almost kind of too bad that the normal oil or you cash doesn't just do that.


00:14:23.600 --> 00:14:24.720
Yeah.


00:14:24.720 --> 00:14:28.840
And you know, maybe it's been updated too, and I don't know, but I don't believe it does.


00:14:28.840 --> 00:14:29.720
I don't think so.


00:14:29.720 --> 00:14:29.960
Right.


00:14:29.960 --> 00:14:30.560
Not currently.


00:14:30.560 --> 00:14:30.880
Yeah.


00:14:30.880 --> 00:14:31.480
Yeah.


00:14:31.480 --> 00:14:32.160
Not that I know of.


00:14:32.160 --> 00:14:35.640
People can write us if we're wrong and we'll let people know next time.


00:14:35.640 --> 00:14:37.360
It'd be great to great to do it.


00:14:37.360 --> 00:14:38.880
I am never wrong.


00:14:38.880 --> 00:14:39.320
Oh,


00:14:39.320 --> 00:14:42.860
and because, like I said, it's because it's a decorator.


00:14:42.860 --> 00:14:45.460
Like you could make it start working that way.


00:14:45.460 --> 00:14:48.100
That's a good feature, dad.


00:14:48.100 --> 00:14:48.940
- Cool.


00:14:48.940 --> 00:14:50.900
- All right, before we move on, Brian,


00:14:50.900 --> 00:14:55.140
let me tell you about AI in real life.


00:14:55.140 --> 00:14:57.660
Okay? - Wow.


00:14:57.660 --> 00:15:00.460
- Yeah, so this week's sponsor,


00:15:00.460 --> 00:15:03.740
this episode of Python Bytes is brought to you


00:15:03.740 --> 00:15:08.380
by the IRL podcast, an original podcast from Mozilla.


00:15:08.380 --> 00:15:12.660
So thank you, IRL and Mozilla for supporting the show.


00:15:12.660 --> 00:15:15.980
If you're like us, you care about the ideas behind technology


00:15:15.980 --> 00:15:17.820
and not just the tech itself.


00:15:17.820 --> 00:15:20.500
Obviously, we do a podcast on these things all the time,


00:15:20.500 --> 00:15:22.860
so we love talking about it, thinking about it.


00:15:22.860 --> 00:15:24.940
And everyone out there knows


00:15:24.940 --> 00:15:27.340
that tech has an enormous influence on society.


00:15:27.340 --> 00:15:29.980
Many of these effects are hugely beneficial.


00:15:29.980 --> 00:15:33.500
Just think about walking around with your cell phone.


00:15:33.500 --> 00:15:36.540
You have basically the entire sum of human knowledge


00:15:36.540 --> 00:15:37.960
just constantly with you.


00:15:37.960 --> 00:15:41.620
Other influences can have negative effects.


00:15:41.620 --> 00:15:44.460
And I really appreciate that Mozilla is always looking out for


00:15:44.460 --> 00:15:49.500
and working to mitigate these types of negative influences tech has on all of us.


00:15:49.500 --> 00:15:53.660
So if these ideas resonate with you, you should definitely check out their podcast,


00:15:53.660 --> 00:15:55.660
IRL, the IRL podcast.


00:15:55.660 --> 00:15:57.340
It's hosted by Bridget Todd.


00:15:57.340 --> 00:16:01.100
And in this season, IRL looks at AI in real life.


00:16:01.100 --> 00:16:04.740
Who can AI help? Who can it harm?


00:16:04.740 --> 00:16:07.260
The show features fascinating conversations with people


00:16:07.260 --> 00:16:10.260
who are working to build more trustworthy AI.


00:16:10.300 --> 00:16:12.540
So just some of the examples of episodes.


00:16:12.540 --> 00:16:16.740
There's an episode about how our world is mapped,


00:16:16.740 --> 00:16:19.740
like Google Maps style mapped with AI.


00:16:19.740 --> 00:16:23.020
And what's really interesting is the data that's missing


00:16:23.020 --> 00:16:25.740
from those maps tells as much of the story


00:16:25.740 --> 00:16:27.420
as the data that's there.


00:16:27.420 --> 00:16:30.140
So also an episode about gig workers


00:16:30.140 --> 00:16:32.100
who depend on apps for their livelihood.


00:16:32.100 --> 00:16:33.460
And it looks at how they're pushing back


00:16:33.460 --> 00:16:36.460
against algorithms that control how much they get paid,


00:16:36.460 --> 00:16:39.820
seeking new ways to gain power and autonomy over data.


00:16:39.820 --> 00:16:41.980
and creating better working conditions.


00:16:41.980 --> 00:16:44.020
And finally, for political junkies,


00:16:44.020 --> 00:16:46.220
there's an episode on the role that AI plays


00:16:46.220 --> 00:16:48.380
when it comes to the spread of disinformation


00:16:48.380 --> 00:16:53.380
around elections, a huge concern for democracies.


00:16:53.380 --> 00:16:55.400
You hear a lot about the US democracies,


00:16:55.400 --> 00:16:59.940
but more broadly, absolutely, across the world.


00:16:59.940 --> 00:17:02.380
And I just listened to the first episode,


00:17:02.380 --> 00:17:03.900
the tech that we won't build,


00:17:03.900 --> 00:17:06.260
which explores when developers and data scientists


00:17:06.260 --> 00:17:08.900
should consider saying no to projects that can be harmful


00:17:08.900 --> 00:17:11.360
or strongly against their beliefs,


00:17:11.360 --> 00:17:15.260
even though, sure, you could technically build up,


00:17:15.260 --> 00:17:18.500
just 'cause you can, should you?


00:17:18.500 --> 00:17:20.140
Anyway, if this sounds like an interesting show,


00:17:20.140 --> 00:17:21.220
try an episode for yourself.


00:17:21.220 --> 00:17:24.320
Just search for IRL in your podcast player


00:17:24.320 --> 00:17:26.860
or visit pythonbytes.fm/irl.


00:17:26.860 --> 00:17:28.420
The link's in your podcast player show notes.


00:17:28.420 --> 00:17:32.340
And thank you to IRL and Mozilla for supporting our show,


00:17:32.340 --> 00:17:33.900
keeping it going strong.


00:17:33.900 --> 00:17:35.020
- Yes, thanks.


00:17:37.420 --> 00:17:40.660
So I want to talk about organizing your code.


00:17:40.660 --> 00:17:44.500
So actually organizing your Python code


00:17:44.500 --> 00:17:48.660
kind of structure, structuring projects and everything,


00:17:48.660 --> 00:17:50.400
but there's more than that.


00:17:50.400 --> 00:17:52.340
So I ran across this article called


00:17:52.340 --> 00:17:54.700
Organize Python Code Like a Pro.


00:17:54.700 --> 00:17:57.580
And yes, it's got a lot of great advice


00:17:57.580 --> 00:18:00.780
and it's opinionated, it's by one person, of course,


00:18:00.780 --> 00:18:05.040
but I think it's for the most part, really good stuff.


00:18:05.040 --> 00:18:09.240
And also a couple of things that I don't normally see


00:18:09.240 --> 00:18:11.440
in these kinds of articles.


00:18:11.440 --> 00:18:12.700
And there's not too much weird stuff.


00:18:12.700 --> 00:18:17.060
So sometimes it's a little too opinionated,


00:18:17.060 --> 00:18:18.720
but this is obviously where you can see


00:18:18.720 --> 00:18:21.440
where some of the opinions are held.


00:18:21.440 --> 00:18:26.440
So take a look at, it talks about structuring your project.


00:18:26.440 --> 00:18:28.480
For instance, one of the first things


00:18:28.480 --> 00:18:31.020
is use a source directory, SRC.


00:18:31.020 --> 00:18:34.400
And so I try to do this,


00:18:34.400 --> 00:18:38.360
And I used to do it because there was an article


00:18:38.360 --> 00:18:41.580
about having your tests be seen.


00:18:41.580 --> 00:18:45.120
So basically if I'm doing a pack installable package,


00:18:45.120 --> 00:18:48.320
I'd like to have my tests see the installed package,


00:18:48.320 --> 00:18:50.760
not the local files.


00:18:50.760 --> 00:18:54.280
And that happens sometimes if you're running like say,


00:18:54.280 --> 00:18:57.820
pytest or unit test from the top level directory,


00:18:57.820 --> 00:19:01.040
and it might see the top level module


00:19:01.040 --> 00:19:01.880
and you don't want it to.


00:19:01.880 --> 00:19:03.880
So source is a way to hide that.


00:19:03.880 --> 00:19:06.120
but there's ways to get around that in testing.


00:19:06.120 --> 00:19:09.920
So I don't, I don't really, it's not really a solid,


00:19:09.920 --> 00:19:12.120
a solid argument as it used to be.


00:19:12.120 --> 00:19:15.860
This argument really is just, it looks nice


00:19:15.860 --> 00:19:20.320
in your code editor that you, if you,


00:19:20.320 --> 00:19:25.040
like here's an example of a non-source project


00:19:25.040 --> 00:19:28.040
where you have a couple of modules within the project


00:19:28.040 --> 00:19:32.040
and, but alphabetically they fall below,


00:19:32.040 --> 00:19:35.000
they're around your, you've got your test directory


00:19:35.000 --> 00:19:37.480
and your pyproject.toml and your source codes


00:19:37.480 --> 00:19:40.180
on both top and bottom of that, that's confusing.


00:19:40.180 --> 00:19:42.900
So I actually kind of love this simple argument


00:19:42.900 --> 00:19:45.280
of just combine all the source in one place.


00:19:45.280 --> 00:19:46.120
It's nice.


00:19:46.120 --> 00:19:47.760
So.


00:19:47.760 --> 00:19:49.760
- I do like that too.


00:19:49.760 --> 00:19:54.400
- I know the first reaction to this though


00:19:54.400 --> 00:19:57.080
is you're gonna put a package level directory anyway


00:19:57.080 --> 00:19:59.680
and having a package level directory in there


00:19:59.680 --> 00:20:01.920
instead of your, if you have a package


00:20:01.920 --> 00:20:05.680
instead of this, you know, source or something


00:20:05.680 --> 00:20:06.880
that works too.


00:20:06.880 --> 00:20:09.260
But anyway, this is kind of interesting.


00:20:09.260 --> 00:20:14.080
The one thing that kind of gets me and it shows up here


00:20:14.080 --> 00:20:19.080
is this author is considering what I,


00:20:19.080 --> 00:20:23.040
so we have a problem in Python of what a package is.


00:20:23.040 --> 00:20:25.800
A package is something I install from PyPI,


00:20:25.800 --> 00:20:28.400
but it's also within this Python documentation,


00:20:28.400 --> 00:20:31.540
Sometimes it's just a directory with an init file in it.


00:20:31.540 --> 00:20:36.280
I don't know how you, so Michael,


00:20:36.280 --> 00:20:37.360
you teach people about that.


00:20:37.360 --> 00:20:41.160
Do you ever like, do you stumble with this part or just?


00:20:41.160 --> 00:20:43.760
- It's, yeah, it both seems complicated


00:20:43.760 --> 00:20:45.480
and overly simplistic.


00:20:45.480 --> 00:20:51.180
For me, I think one of the challenges really


00:20:51.180 --> 00:20:54.940
I often run into is how do I organize my files


00:20:54.940 --> 00:20:57.280
if I want like a sub module?


00:20:57.280 --> 00:21:00.920
but I want simple import statements, you know, so.


00:21:00.920 --> 00:21:01.760
- Okay.


00:21:01.760 --> 00:21:04.640
- You know, if you don't have, yeah, go ahead.


00:21:04.640 --> 00:21:06.920
- Do you think of directories with stuff,


00:21:06.920 --> 00:21:09.940
directories within a net as a module or as a package,


00:21:09.940 --> 00:21:12.120
or do you use?


00:21:12.120 --> 00:21:16.640
- I do, but often I try to dodge that bullet


00:21:16.640 --> 00:21:18.160
and just not.


00:21:18.160 --> 00:21:19.720
- Not talk about it. - Not really get,


00:21:19.720 --> 00:21:22.020
yeah, well, honestly, not talk about it.


00:21:22.020 --> 00:21:25.160
If you're building a library, this matters very, very much.


00:21:25.160 --> 00:21:27.420
if you're building an application,


00:21:27.420 --> 00:21:30.360
a web app or a CLI app or something,


00:21:30.360 --> 00:21:32.480
often it doesn't matter


00:21:32.480 --> 00:21:35.260
because you're just running the top level,


00:21:35.260 --> 00:21:37.940
some top level like main or app.py or something


00:21:37.940 --> 00:21:39.780
and it'll just pick it up,


00:21:39.780 --> 00:21:43.340
whether it's a module or just, you know.


00:21:43.340 --> 00:21:52.340
- So I guess regardless of like what we call directories,


00:21:53.780 --> 00:21:55.340
whether we call them modules or packages,


00:21:55.340 --> 00:21:57.620
this article calls them modules.


00:21:57.620 --> 00:21:58.680
So, oh well.


00:21:58.680 --> 00:22:04.580
And then it goes on to talk about some other cool stuff


00:22:04.580 --> 00:22:09.580
that I like that, let's go down, naming things.


00:22:09.580 --> 00:22:12.780
So it talks about, there's really no files.


00:22:12.780 --> 00:22:14.460
There's modules.


00:22:14.460 --> 00:22:17.440
So it also, there's no directories, they're all modules,


00:22:17.440 --> 00:22:19.180
but that's okay.


00:22:19.180 --> 00:22:21.700
So this is some of the opinion stuff that you can,


00:22:21.700 --> 00:22:23.580
it's interesting, you can skip over it.


00:22:23.580 --> 00:22:25.960
But the thing that I thought was interesting


00:22:25.960 --> 00:22:28.760
is these module names, they should be,


00:22:28.760 --> 00:22:32.200
they could be plural names.


00:22:32.200 --> 00:22:33.940
And I never thought about that.


00:22:33.940 --> 00:22:36.740
And it kind of makes sense.


00:22:36.740 --> 00:22:41.740
Like if you have, it gives an example, like drivers.


00:22:41.740 --> 00:22:43.340
Drivers would be a module.


00:22:43.340 --> 00:22:47.340
Yeah, it'd probably be the S on there makes sense.


00:22:47.340 --> 00:22:52.180
So it's, you know, keep config and main as single,


00:22:52.180 --> 00:22:55.100
but most things that have an S on the end,


00:22:55.100 --> 00:22:56.460
I never really thought about that before,


00:22:56.460 --> 00:23:00.780
but it does make sense of like from crawler storages,


00:23:00.780 --> 00:23:02.580
import, get storage or something.


00:23:02.580 --> 00:23:04.540
I don't know. - Yeah, yeah.


00:23:04.540 --> 00:23:07.020
- It's just a nice little extra thing.


00:23:07.020 --> 00:23:10.700
Then it talks about naming functions and stuff.


00:23:10.700 --> 00:23:13.660
So functions, this is something people get wrong


00:23:13.660 --> 00:23:16.140
all the time, so it's good to talk about it.


00:23:16.140 --> 00:23:18.260
Name your functions with verbs.


00:23:18.260 --> 00:23:19.740
It makes your code a lot clearer


00:23:19.740 --> 00:23:22.300
your functions or methods or verbs.


00:23:22.300 --> 00:23:25.060
And unless you have to jump through giant hoops


00:23:25.060 --> 00:23:25.900
to make it work.


00:23:25.900 --> 00:23:27.140
But if you have to jump through giant hoops


00:23:27.140 --> 00:23:30.020
to make a verb work, maybe it's not really one function.


00:23:30.020 --> 00:23:32.700
Maybe it should be two or three, but we'll see.


00:23:32.700 --> 00:23:33.540
Anyway.


00:23:33.540 --> 00:23:35.380
- Yeah, or property instead of a function.


00:23:35.380 --> 00:23:37.740
- Yeah, or property, right.


00:23:37.740 --> 00:23:39.380
And then class names.


00:23:39.380 --> 00:23:41.200
One of the things I never thought about also


00:23:41.200 --> 00:23:46.200
was class names should be singular.


00:23:46.200 --> 00:23:48.420
So classes should be singular


00:23:48.420 --> 00:23:51.620
unless it's really a container.


00:23:51.620 --> 00:23:55.100
So don't name a class orders


00:23:55.100 --> 00:23:57.420
because it's gonna describe multiple orders.


00:23:57.420 --> 00:24:01.860
It's an order, it's an order class, not an orders class.


00:24:01.860 --> 00:24:05.220
So that's a good thing.


00:24:05.220 --> 00:24:07.640
One of the things I loved about this article also


00:24:07.640 --> 00:24:10.880
is there's two things that we kind of talk about,


00:24:10.880 --> 00:24:13.100
we use a lot, but nobody,


00:24:13.100 --> 00:24:15.180
I don't think very many people talk about it too much.


00:24:15.180 --> 00:24:17.100
And well, it's the dunder and net thing.


00:24:17.100 --> 00:24:19.580
I'm gonna pop down, not the,


00:24:19.580 --> 00:24:21.860
the dunder name equals dunder main.


00:24:21.860 --> 00:24:23.420
That's used all the time.


00:24:23.420 --> 00:24:25.660
And so it's good to talk about that


00:24:25.660 --> 00:24:29.160
of if you want to execute a module itself, use that.


00:24:29.160 --> 00:24:32.300
But the, if you, one of the things I tried to do recently


00:24:32.300 --> 00:24:34.420
that I kind of didn't know how to do right off the bat


00:24:34.420 --> 00:24:39.420
is a directory within init, if it also has a dunder main,


00:24:39.420 --> 00:24:44.620
then you can use the dash M thing on it.


00:24:44.620 --> 00:24:47.560
So if you include like Dunder main,


00:24:47.560 --> 00:24:52.560
then you can use like a Python dash M module name.


00:24:52.560 --> 00:24:54.860
- Interesting, okay.


00:24:54.860 --> 00:24:59.360
- 'Cause I had a library I was working with


00:24:59.360 --> 00:25:03.400
and it was like, I'm using dash M for everything else.


00:25:03.400 --> 00:25:06.440
I'd like to have the entry point for my application


00:25:06.440 --> 00:25:11.360
be usable if I do dash M also, how do I do that?


00:25:11.360 --> 00:25:12.600
And this is how you do it.


00:25:12.600 --> 00:25:15.200
So it's kind of neat to have this in right away


00:25:15.200 --> 00:25:18.160
'cause I don't know if it's really a beginner thing,


00:25:18.160 --> 00:25:19.640
but it's still kind of cool.


00:25:19.640 --> 00:25:21.440
- Yeah, I like it a lot.


00:25:21.440 --> 00:25:24.080
It's like entry points, but simpler.


00:25:24.080 --> 00:25:24.920
- Yeah.


00:25:24.920 --> 00:25:28.360
Anyway, so decent article.


00:25:28.360 --> 00:25:31.200
There's some opinions there, but that's okay.


00:25:31.200 --> 00:25:32.840
We like opinions.


00:25:32.840 --> 00:25:34.220
- Absolutely.


00:25:34.220 --> 00:25:35.060
We do, we do.


00:25:35.060 --> 00:25:38.160
All right, well, do you know what else we like, Brian?


00:25:38.160 --> 00:25:39.000
Follow-up.


00:25:39.000 --> 00:25:41.240
- Yay, I was gonna do this.


00:25:41.240 --> 00:25:42.740
I'm glad you're doing it.


00:25:42.740 --> 00:25:43.900
- Not too late, I grabbed it.


00:25:43.900 --> 00:25:45.260
I grabbed it 'cause this one is a good one.


00:25:45.260 --> 00:25:50.260
So remember last week you spoke about CLI apps


00:25:50.260 --> 00:25:54.100
and doing OAuth and you've got to remember the tokens


00:25:54.100 --> 00:25:56.020
you get, the example you gave was from Twitter,


00:25:56.020 --> 00:25:57.580
but it could be from all over the place.


00:25:57.580 --> 00:26:01.980
So Trent, we got multiple pieces of feedback.


00:26:01.980 --> 00:26:03.660
One about encrypting the stuff


00:26:03.660 --> 00:26:06.300
that goes into your user profile.


00:26:06.300 --> 00:26:08.740
I can't remember who, I apologize about forgetting the name,


00:26:08.740 --> 00:26:10.100
but someone sent in a message that says,


00:26:10.100 --> 00:26:13.740
well, the AWS CLI just puts your token straight there


00:26:13.740 --> 00:26:15.540
unencrypted, so there's that.


00:26:15.540 --> 00:26:22.020
I said maybe you should encrypt them somehow,


00:26:22.020 --> 00:26:24.340
and I agree with that still,


00:26:24.340 --> 00:26:28.140
but Trent sent in this project called Keyring,


00:26:28.140 --> 00:26:31.620
and Keyring is, Keyring or vaults,


00:26:31.620 --> 00:26:33.540
vaults are those types of things.


00:26:33.540 --> 00:26:38.420
They're ways, sort of more managed central stores


00:26:38.420 --> 00:26:40.660
of this type of information, right?


00:26:40.660 --> 00:26:45.660
On macOS you hear, can it put it in your OS X key chain?


00:26:45.660 --> 00:26:48.620
Right, you probably have heard that


00:26:48.620 --> 00:26:51.580
or the Windows credential store or those things


00:26:51.580 --> 00:26:53.900
that the actual operating system is protecting


00:26:53.900 --> 00:26:55.380
from other apps to go look at it,


00:26:55.380 --> 00:26:59.580
but it's basically just encrypted login,


00:26:59.580 --> 00:27:02.100
password or tokens, yeah?


00:27:02.100 --> 00:27:05.380
So this key ring thing that suggested


00:27:05.380 --> 00:27:09.180
is something like that, but it works.


00:27:09.180 --> 00:27:10.540
It's a Python library.


00:27:10.540 --> 00:27:12.260
It works across platform,


00:27:12.260 --> 00:27:14.140
and it works with different backends


00:27:14.140 --> 00:27:16.160
based on both what platform you're on


00:27:16.160 --> 00:27:18.380
and other things you might decide.


00:27:18.380 --> 00:27:22.220
So it's a library that gives you access


00:27:22.220 --> 00:27:25.420
to system key ring services from Python,


00:27:25.420 --> 00:27:27.400
which I think is fantastic.


00:27:27.400 --> 00:27:29.640
So on macOS, that's Keychain.


00:27:29.640 --> 00:27:34.820
On Linux, it's the Secret Service.


00:27:34.820 --> 00:27:39.540
or the KDE 4 and 5K wallets.


00:27:39.540 --> 00:27:42.620
And then on Windows, it's the Windows credential locker.


00:27:42.620 --> 00:27:44.340
- Okay. - Right?


00:27:44.340 --> 00:27:49.180
And so in there, you can just call set password


00:27:49.180 --> 00:27:52.600
and get password and off it goes.


00:27:52.600 --> 00:27:54.780
And that's pretty much it, right?


00:27:54.780 --> 00:27:56.720
But it's still running in a nice encrypted,


00:27:56.720 --> 00:28:01.720
not just encrypted, but protected access way for the OS.


00:28:01.720 --> 00:28:04.600
- Yeah, so I actually forgot about this.


00:28:04.600 --> 00:28:08.080
- I actually use this for testing all the time,


00:28:08.080 --> 00:28:10.200
but I never thought, I didn't think about using it


00:28:10.200 --> 00:28:12.680
for a command line application.


00:28:12.680 --> 00:28:14.480
- Interesting.


00:28:14.480 --> 00:28:16.400
Okay, how do you use it for testing?


00:28:16.400 --> 00:28:19.880
- So we have, so some of the issues are,


00:28:19.880 --> 00:28:23.360
we have different devices that we're testing against


00:28:23.360 --> 00:28:26.840
that are password protected devices.


00:28:26.840 --> 00:28:30.000
And so you had, in order to access them,


00:28:30.000 --> 00:28:35.000
you need a login and password to run commands against them.


00:28:35.000 --> 00:28:38.480
And then, so to be able to do that,


00:28:38.480 --> 00:28:43.880
we need the, like if you're SSHing into something


00:28:43.880 --> 00:28:47.000
or something like that, that's part of your process.


00:28:47.000 --> 00:28:50.360
You've gotta, you have to have those credentials somewhere


00:28:50.360 --> 00:28:52.600
and we don't want them in our source code.


00:28:52.600 --> 00:28:55.080
That's the gist of it is, is we don't want them,


00:28:55.080 --> 00:28:58.600
we don't want them just to be, yeah,


00:28:58.600 --> 00:29:00.960
We don't want them in the source code and checked in to get lab


00:29:00.960 --> 00:29:04.600
and to have the whole company be able to read them.


00:29:04.600 --> 00:29:05.880
It's still protected.


00:29:05.880 --> 00:29:07.000
It's an internal thing.


00:29:07.000 --> 00:29:11.280
But maybe you're on GitLab or GitHub or something,


00:29:11.280 --> 00:29:12.560
and it's a public repo.


00:29:12.560 --> 00:29:14.400
You don't want any passwords right there.


00:29:14.400 --> 00:29:17.280
But you can have them stored on your local machine


00:29:17.280 --> 00:29:20.440
and then pull them out with keyring.


00:29:20.440 --> 00:29:22.720
It surprised me a little bit that they're just--


00:29:22.720 --> 00:29:23.920
get passwords are a thing.


00:29:23.920 --> 00:29:28.560
I kind of expected it to be like a get the password hash


00:29:28.560 --> 00:29:30.880
or something, but I have to remember this isn't,


00:29:30.880 --> 00:29:33.440
this isn't verifying passwords.


00:29:33.440 --> 00:29:37.880
It's having them to be able to send them to another system.


00:29:37.880 --> 00:29:38.720
- Right.


00:29:38.720 --> 00:29:41.120
Ideally that one is storing the hash, not the real thing.


00:29:41.120 --> 00:29:42.880
- Yeah, exactly.


00:29:42.880 --> 00:29:44.420
So. - Yeah, yeah.


00:29:44.420 --> 00:29:48.200
- I don't know if it would work.


00:29:48.200 --> 00:29:49.840
So I don't know if this would be,


00:29:49.840 --> 00:29:52.860
this is still cool and I'm glad we're covering it,


00:29:52.860 --> 00:29:55.480
but it was, my original question was around,


00:29:55.480 --> 00:29:58.880
Is this a, what's a reasonable thing to store passwords


00:29:58.880 --> 00:30:01.780
for sessions for command line application?


00:30:01.780 --> 00:30:04.000
And I don't know if key ring would work,


00:30:04.000 --> 00:30:05.320
but I haven't tried it yet.


00:30:05.320 --> 00:30:07.720
And maybe if you have a set password, maybe it will work.


00:30:07.720 --> 00:30:09.200
Maybe it stores something locally.


00:30:09.200 --> 00:30:10.960
So I'll have to try it out.


00:30:10.960 --> 00:30:12.800
- Yeah, I think that it will.


00:30:12.800 --> 00:30:13.640
- Okay.


00:30:13.640 --> 00:30:14.880
- The question that I was wondering is


00:30:14.880 --> 00:30:16.920
what about the get password?


00:30:16.920 --> 00:30:19.480
You know, is that restricted to the process


00:30:19.480 --> 00:30:21.440
that put it in there or?


00:30:21.440 --> 00:30:22.520
- Yeah.


00:30:22.520 --> 00:30:24.440
- Is it easy to start running on the system?


00:30:24.440 --> 00:30:25.560
- Yeah, exactly.


00:30:25.560 --> 00:30:28.040
Can you just start arbitrarily asking for stuff?


00:30:28.040 --> 00:30:29.320
There's probably some restrictions there,


00:30:29.320 --> 00:30:31.320
but I don't know exactly what they are.


00:30:31.320 --> 00:30:35.680
Penful out in the audience says,


00:30:35.680 --> 00:30:38.080
if I'm not mistaken, poetry is using the,


00:30:38.080 --> 00:30:41.000
it's installed, so that's where your PyPI credentials


00:30:41.000 --> 00:30:42.000
get installed.


00:30:42.000 --> 00:30:46.900
And I got issue 210 from poetry.


00:30:46.900 --> 00:30:50.280
And down here somewhere says,


00:30:53.800 --> 00:30:56.580
- They talk about ways in which you could store.


00:30:56.580 --> 00:31:00.420
And it says, why not just make key ring a dependency?


00:31:00.420 --> 00:31:02.280
- Okay.


00:31:02.280 --> 00:31:03.560
- Yeah, if this approach,


00:31:03.560 --> 00:31:05.920
why not simply make key ring and so on.


00:31:05.920 --> 00:31:10.200
And so yeah, it talks about basically using this


00:31:10.200 --> 00:31:13.720
to store your PyPI credentials and that's a CLI app.


00:31:13.720 --> 00:31:14.960
- Perfect then.


00:31:14.960 --> 00:31:16.720
- It sounds like a pretty good match.


00:31:16.720 --> 00:31:18.000
Yeah, nice little example.


00:31:18.000 --> 00:31:19.680
Yeah, you can just follow along what they're doing there.


00:31:19.680 --> 00:31:22.360
So thank you Penfil for pointing that out.


00:31:22.360 --> 00:31:23.560
- Yeah.


00:31:23.560 --> 00:31:24.400
- Yeah, cool.


00:31:24.400 --> 00:31:27.140
- Cool, anyway, I don't currently have any use for this.


00:31:27.140 --> 00:31:31.780
I think it might be useful even outside of,


00:31:31.780 --> 00:31:33.540
I have this interactive application,


00:31:33.540 --> 00:31:36.200
for example, storing secrets.


00:31:36.200 --> 00:31:39.580
You know, if you wanna have the database connection string


00:31:39.580 --> 00:31:40.620
to your app, right?


00:31:40.620 --> 00:31:42.180
This might be a good way to do it.


00:31:42.180 --> 00:31:43.940
And one other thing that's interesting


00:31:43.940 --> 00:31:46.420
is you can have third-party backends.


00:31:46.420 --> 00:31:49.260
So you could have just encrypted text files.


00:31:49.260 --> 00:31:54.140
You could have the Dbus API for Linux.


00:31:54.140 --> 00:31:58.780
Google Sheets, I don't know about this,


00:31:58.780 --> 00:32:01.980
but it's for use with IPython secret,


00:32:01.980 --> 00:32:03.860
so maybe encrypt them.


00:32:03.860 --> 00:32:07.100
But more realistically, we've talked about Bitwarden before,


00:32:07.100 --> 00:32:10.700
open source password manager, which is really nice.


00:32:10.700 --> 00:32:13.060
I use that for a few things.


00:32:13.060 --> 00:32:15.300
And so that has a CLI aspect.


00:32:15.300 --> 00:32:17.300
So you could have Bitwarden as a backend.


00:32:18.380 --> 00:32:19.860
you can write your own as well.


00:32:19.860 --> 00:32:24.140
And 1Password has a CLI option as well


00:32:24.140 --> 00:32:26.160
for storing SSH keys even.


00:32:26.160 --> 00:32:28.460
So you could even put your SSH keys in there and whatnot.


00:32:28.460 --> 00:32:30.580
I don't know if this would pull it back correctly,


00:32:30.580 --> 00:32:33.520
but there's a lot of ways to store things


00:32:33.520 --> 00:32:35.900
and say 1Password and then access it with a CLI.


00:32:35.900 --> 00:32:37.300
Maybe you could plug this in.


00:32:37.300 --> 00:32:39.820
So just it's another provider, which is cool.


00:32:39.820 --> 00:32:41.020
- Yeah.


00:32:41.020 --> 00:32:43.580
- Yeah, anyway, it seems really nice to me.


00:32:43.580 --> 00:32:46.540
If I have a use for it, I'll definitely look into it more.


00:32:46.540 --> 00:32:47.700
- Yeah, cool.


00:32:47.700 --> 00:32:48.700
- Nice. - Yep.


00:32:48.700 --> 00:32:50.940
- All right.


00:32:50.940 --> 00:32:53.900
Hey, that might be all of our topics for the day, huh?


00:32:53.900 --> 00:32:55.380
- I think so, yeah.


00:32:55.380 --> 00:32:56.220
- I think so.


00:32:56.220 --> 00:32:59.220
Extras, got any extras?


00:32:59.220 --> 00:33:04.220
- I just wanted to say that I am working on a couple things.


00:33:04.220 --> 00:33:08.500
I'm editing my pytest course, of course,


00:33:08.500 --> 00:33:09.600
still working on that.


00:33:09.600 --> 00:33:12.460
But the other thing that I just started,


00:33:12.460 --> 00:33:13.820
which I'm super excited about,


00:33:13.820 --> 00:33:16.780
is I just started taking a FastAPI course.


00:33:16.780 --> 00:33:17.620
- Oh yeah?


00:33:17.620 --> 00:33:18.460
- That's really neat.


00:33:18.460 --> 00:33:19.580
The instructor's awesome.


00:33:19.580 --> 00:33:20.420
Yeah.


00:33:20.420 --> 00:33:21.300
(laughing)


00:33:21.300 --> 00:33:22.140
- Awesome.


00:33:22.140 --> 00:33:22.960
Thank you.


00:33:22.960 --> 00:33:25.060
That's the FastAPI course.


00:33:25.060 --> 00:33:27.060
This live course that I'm doing this week and next week.


00:33:27.060 --> 00:33:27.900
Right?


00:33:27.900 --> 00:33:28.720
- Yeah.


00:33:28.720 --> 00:33:29.560
Yeah.


00:33:29.560 --> 00:33:30.380
So I'm taking it from Michael.


00:33:30.380 --> 00:33:32.700
And if anybody is,


00:33:32.700 --> 00:33:36.300
if you've never taken one of the online courses with Michael


00:33:36.300 --> 00:33:37.860
or a live course,


00:33:37.860 --> 00:33:38.980
it's just really excellent.


00:33:38.980 --> 00:33:39.820
He's a good instructor.


00:33:39.820 --> 00:33:40.940
So it's good.


00:33:40.940 --> 00:33:41.780
- Thank you very much.


00:33:41.780 --> 00:33:42.600
Yeah.


00:33:42.600 --> 00:33:43.440
I love it.


00:33:43.440 --> 00:33:46.020
We're having a good time just playing with code as a group.


00:33:46.020 --> 00:33:47.220
- Yeah.


00:33:47.220 --> 00:33:51.440
- I think I have some extras just really quickly here.


00:33:51.440 --> 00:33:55.740
Brian Skin, who's been a co-host before,


00:33:55.740 --> 00:33:58.980
sent us a tweet and said, "Attention Python Bytes."


00:33:58.980 --> 00:34:03.980
And that went over to this message from Jeff,


00:34:03.980 --> 00:34:08.980
Jeff Huntley, and it says, "GitLab, are you all right?"


00:34:08.980 --> 00:34:12.040
And this is linking to an article from the register.


00:34:12.040 --> 00:34:14.140
It says, "GitLab plans to delete


00:34:14.140 --> 00:34:16.180
"dormant projects in free accounts,


00:34:16.180 --> 00:34:18.500
hoping to save a quarter of the hosting costs


00:34:18.500 --> 00:34:21.200
by binning repos that haven't been touched for a year.


00:34:21.200 --> 00:34:24.140
- Yikes.


00:34:24.140 --> 00:34:25.100
- That's a little nerve wracking


00:34:25.100 --> 00:34:26.860
because just 'cause it hasn't been changed


00:34:26.860 --> 00:34:29.340
doesn't mean it's not useful.


00:34:29.340 --> 00:34:30.340
- Yeah. - Yes.


00:34:30.340 --> 00:34:33.820
- Huh, maybe I keep my recipes up there


00:34:33.820 --> 00:34:35.720
and I haven't added any recipes lately.


00:34:35.720 --> 00:34:38.380
- Yeah, maybe nothing's changed or whatever.


00:34:38.380 --> 00:34:41.540
So a couple of things, PSA,


00:34:41.540 --> 00:34:44.600
if you have a GitLab project,


00:34:44.600 --> 00:34:47.760
you know, maybe just touch, just add a period


00:34:47.760 --> 00:34:51.200
to some text file or something and check that in.


00:34:51.200 --> 00:34:56.080
- Spam your own repo with like trivial PRs, yeah.


00:34:56.080 --> 00:34:57.080
- Exactly.


00:34:57.080 --> 00:35:00.520
I fixed this misspelling here by changing the word


00:35:00.520 --> 00:35:04.280
and the more, oh, Mario Munoz says


00:35:04.280 --> 00:35:05.600
they may be reverting this.


00:35:05.600 --> 00:35:09.600
Okay, so this was just from four or five days ago.


00:35:09.600 --> 00:35:10.920
And Pamphil says, yes, they did.


00:35:10.920 --> 00:35:14.360
Okay, well, it sounds like they had the same,


00:35:14.360 --> 00:35:17.960
Many people had the same reaction that we are going,


00:35:17.960 --> 00:35:20.420
"Oh boy, this seems like a bad idea.


00:35:20.420 --> 00:35:22.480
I'm glad this was changed."


00:35:22.480 --> 00:35:24.360
Yeah. Pamphlet says,


00:35:24.360 --> 00:35:25.520
"Because of the huge backlash."


00:35:25.520 --> 00:35:27.400
I can imagine.


00:35:27.400 --> 00:35:31.320
All right. Well, I guess I'll have to continue to pay


00:35:31.320 --> 00:35:33.200
the million dollars extra per year to


00:35:33.200 --> 00:35:34.960
host things that people put up on there,


00:35:34.960 --> 00:35:36.320
where they said they would host it.


00:35:36.320 --> 00:35:39.240
>> Yeah. Well, hopefully, even if you did that,


00:35:39.240 --> 00:35:42.000
hopefully, they would email people at least.


00:35:42.000 --> 00:35:43.520
Hopefully, you're getting emails there.


00:35:43.520 --> 00:35:45.960
- Yeah, kind of like Google voice,


00:35:45.960 --> 00:35:48.800
please log in within the next 30 days


00:35:48.800 --> 00:35:50.100
to keep your phone number


00:35:50.100 --> 00:35:52.100
or whatever it is they always did to me.


00:35:52.100 --> 00:35:57.000
Well, with that, I think brings us to some jokes.


00:35:57.000 --> 00:35:58.040
You got some jokes to tell


00:35:58.040 --> 00:35:59.760
and I brought a quick one as well.


00:35:59.760 --> 00:36:02.000
- Okay, sure.


00:36:02.000 --> 00:36:03.560
I'm not gonna read the ones up here,


00:36:03.560 --> 00:36:05.520
but I got them, I got a couple of jokes


00:36:05.520 --> 00:36:08.960
from a place called, from a GitHub repo


00:36:08.960 --> 00:36:11.440
that's a dad style programming jokes,


00:36:11.440 --> 00:36:13.040
which is perfect for me.


00:36:13.040 --> 00:36:16.040
So I got a couple.


00:36:16.040 --> 00:36:19.680
How do programming pirates pass method parameters?


00:36:19.680 --> 00:36:20.520
- I don't know.


00:36:20.520 --> 00:36:21.920
- With varargs.


00:36:21.920 --> 00:36:23.920
(both laughing)


00:36:23.920 --> 00:36:24.800
- Awesome.


00:36:24.800 --> 00:36:26.040
- Okay, second one.


00:36:26.040 --> 00:36:29.000
How do you get code?


00:36:29.000 --> 00:36:31.160
How do you get the code of your bank vault?


00:36:31.160 --> 00:36:34.060
So you can break it down.


00:36:34.060 --> 00:36:35.320
- I don't know.


00:36:35.320 --> 00:36:36.840
- You check out their branch.


00:36:36.840 --> 00:36:40.040
- Nice, I love it.


00:36:40.040 --> 00:36:43.160
And then one of the things I liked on the top of this,


00:36:43.160 --> 00:36:45.200
it says, unfortunately, these jokes only work


00:36:45.200 --> 00:36:46.520
if you get them.


00:36:46.520 --> 00:36:47.360
Ah, bad.


00:36:47.360 --> 00:36:49.040
- Oh, so good.


00:36:49.040 --> 00:36:51.040
- And it's a GitHub repo, so that's actually,


00:36:51.040 --> 00:36:52.360
it's fitting, so anyway.


00:36:52.360 --> 00:36:54.800
- It's very self-referential, very meta.


00:36:54.800 --> 00:36:56.160
- Okay, how about you?


00:36:56.160 --> 00:36:59.080
- Here's a quick one.


00:36:59.080 --> 00:37:02.320
Before I put it up on screen,


00:37:02.320 --> 00:37:06.320
you know how there's this constant not built here syndrome?


00:37:06.320 --> 00:37:08.880
Like, sure, this key ring is cool, but did we build it?


00:37:08.880 --> 00:37:11.220
No, I bet we could build a better key ring than that.


00:37:11.220 --> 00:37:14.080
And like, we'll get a team together to build key ring.


00:37:14.080 --> 00:37:14.920
Right?


00:37:14.920 --> 00:37:15.740
- Yeah.


00:37:15.740 --> 00:37:18.800
- So here's a picture of normal people


00:37:18.800 --> 00:37:20.040
acting like developers.


00:37:20.040 --> 00:37:21.840
So there's these two construction workers


00:37:21.840 --> 00:37:22.900
with their hard hats on,


00:37:22.900 --> 00:37:26.600
and there's a screwdriver with a $2 tag on it


00:37:26.600 --> 00:37:27.960
'cause it was just purchased.


00:37:27.960 --> 00:37:29.400
And one guy's outraged.


00:37:29.400 --> 00:37:30.240
What?


00:37:30.240 --> 00:37:31.480
Did you buy a screwdriver


00:37:31.480 --> 00:37:33.640
instead of building your own from scratch?


00:37:33.640 --> 00:37:36.120
- Exactly.


00:37:36.120 --> 00:37:37.960
Yeah.


00:37:37.960 --> 00:37:39.580
- Yeah, pretty good.


00:37:39.580 --> 00:37:42.040
- What, you're using Hugo?


00:37:42.040 --> 00:37:44.840
Why didn't you build your own blog engine?


00:37:44.840 --> 00:37:45.680
- Exactly.


00:37:45.680 --> 00:37:47.780
First, I'm gonna build my own Markdown parser


00:37:47.780 --> 00:37:49.360
so I can have better tables.


00:37:49.360 --> 00:37:50.680
Let's go.


00:37:50.680 --> 00:37:51.680
- Exactly.


00:37:51.680 --> 00:37:54.400
- Yes, indeed.


00:37:54.400 --> 00:37:57.680
All right, well, excellent podcast as always.


00:37:57.680 --> 00:37:58.800
Thanks for being here.


00:37:58.800 --> 00:38:00.300
- Thank you.


00:38:00.300 --> 00:38:01.140
- Yeah, you bet.


00:38:01.140 --> 00:38:03.240
And thank you everyone for listening, watching,


00:38:03.240 --> 00:38:05.840
however you've been part of this.


00:38:05.840 --> 00:38:06.960
- Yeah, thanks a lot.


00:38:06.960 --> 00:38:08.880
(thud)

