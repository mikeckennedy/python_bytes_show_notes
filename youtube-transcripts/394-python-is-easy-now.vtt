WEBVTT

00:00:00.520 --> 00:00:02.140
Hello, YouTube. Hello, Brian.

00:00:02.140 --> 00:00:02.840
Hello.

00:00:02.840 --> 00:00:06.720
Hello, hello. Let's just kick this thing off, shall we?

00:00:06.720 --> 00:00:07.260
Yeah.

00:00:07.260 --> 00:00:08.540
All right.

00:00:08.540 --> 00:00:11.940
Hello and welcome to Python Bytes,

00:00:11.940 --> 00:00:14.660
where we deliver Python news and headlines directly to your earbuds.

00:00:14.660 --> 00:00:20.060
This is 394, recorded July 30th, 2024.

00:00:20.060 --> 00:00:21.380
I am Michael Kennedy.

00:00:21.380 --> 00:00:22.680
And I'm Brian Okken.

00:00:22.680 --> 00:00:26.760
And this episode is brought to you by Scout APM.

00:00:26.760 --> 00:00:28.960
Thank you, Scout APM, for sponsoring the show.

00:00:28.960 --> 00:00:30.840
We will tell you more about them later.

00:00:30.840 --> 00:00:33.440
If you want to connect with us on the socials,

00:00:33.440 --> 00:00:36.900
the best but not the only place is over on Mastodon,

00:00:36.900 --> 00:00:40.600
where all the links, me, Brian, and the show,

00:00:40.600 --> 00:00:44.260
all have our accounts list at the top of the page of the show notes.

00:00:44.260 --> 00:00:47.340
You'll see in your podcast player or the website.

00:00:47.340 --> 00:00:51.340
Also, if you're not joining us live and you would like to,

00:00:51.340 --> 00:00:54.080
we record Tuesdays at 10 a.m. Pacific time.

00:00:54.080 --> 00:00:57.360
Check that out, pythonbytes.fm/live.

00:00:57.360 --> 00:01:01.140
You'll see all the older versions under the live section on our YouTube channel there.

00:01:01.140 --> 00:01:07.860
And finally, you probably do want to also get this summary of this episode in your email.

00:01:07.860 --> 00:01:08.860
I'm sure you do.

00:01:08.860 --> 00:01:13.560
A handcrafted, artisanal, Brian Okken special email.

00:01:13.740 --> 00:01:17.760
So just visit pythonbytes.fm, click on newsletter, enter your information.

00:01:17.760 --> 00:01:23.500
We won't give it away, share with other people, resell it, retarget you, do evil things.

00:01:23.500 --> 00:01:27.360
We just will communicate with you about stuff we're up to, mostly the show.

00:01:27.360 --> 00:01:31.960
Brian, I learned Python this weekend.

00:01:32.220 --> 00:01:33.480
I learned Python.

00:01:33.480 --> 00:01:34.620
It was a good weekend.

00:01:34.620 --> 00:01:35.980
Is that the saying?

00:01:35.980 --> 00:01:38.640
Is that what you're telling me for your first item here?

00:01:38.640 --> 00:01:39.860
Oh, okay.

00:01:39.860 --> 00:01:41.540
Where are you going with this, Michael?

00:01:41.540 --> 00:01:43.620
I think you've known it for a while.

00:01:43.620 --> 00:01:47.440
No, I bundled the joke a little bit, but yes.

00:01:47.440 --> 00:01:48.120
That's all right.

00:01:48.120 --> 00:01:49.660
Python is easy, I hear.

00:01:49.660 --> 00:01:53.480
Yeah, Python is easy now, apparently.

00:01:53.480 --> 00:01:55.660
No, I love Python.

00:01:55.860 --> 00:02:01.440
Anyway, what I wanted to talk about was beyond hypermodern or postmodern.

00:02:01.440 --> 00:02:03.260
I'm not sure what the tagline is, really.

00:02:03.260 --> 00:02:06.960
So this is an article by Chris Ardern.

00:02:06.960 --> 00:02:12.580
Chris, sorry about, I probably mangled your last name, but I really like the article, Chris.

00:02:12.580 --> 00:02:14.220
So what is this?

00:02:14.220 --> 00:02:20.700
So the title is Beyond Hypermodern Python is Easy Now.

00:02:20.700 --> 00:02:24.220
And this is a reference to hypermodern Python.

00:02:25.300 --> 00:02:30.960
He says it came out as a series that came out four years ago or something.

00:02:30.960 --> 00:02:32.620
Interesting.

00:02:32.620 --> 00:02:38.400
But it's, what was, who is the hypermodern person again?

00:02:38.400 --> 00:02:39.060
I can't remember.

00:02:39.060 --> 00:02:43.000
Oh, I should have looked this up anyway.

00:02:43.000 --> 00:02:49.640
Claude, Claudia, Claudio, Claudio, oh, I'm not going to try.

00:02:49.760 --> 00:02:54.600
Claudio's book, Hypermodern Python Tooling, is now as a book, which is cool.

00:02:54.600 --> 00:02:55.500
Good job.

00:02:55.500 --> 00:02:56.580
But that's not what we're talking about.

00:02:56.580 --> 00:03:02.020
We're talking about beyond hypermodern or from the URL postmodern.

00:03:02.020 --> 00:03:03.740
So what is this?

00:03:03.860 --> 00:03:08.280
Basically, it's talking about all the tooling and it's all in Rai now.

00:03:08.280 --> 00:03:13.000
So this is what Chris's idea is, is you could do so much in Rai.

00:03:13.000 --> 00:03:15.060
And actually, I knew Rai did a lot.

00:03:16.060 --> 00:03:22.120
But Rai actually does more than I thought you could.

00:03:22.120 --> 00:03:27.060
So Rai is a tool that's like kind of does a lot of stuff around Python.

00:03:27.300 --> 00:03:33.540
So there's setup, it goes through setup, linting, typing, testing, documentation, CICD.

00:03:33.540 --> 00:03:35.860
And then there's a bonus section on monorepo.

00:03:35.860 --> 00:03:42.960
But I really liked just walking through, like if you wanted to try out Rai, all the different,

00:03:42.960 --> 00:03:47.000
like the workflow, going through the entire workflow of building a Python project.

00:03:47.660 --> 00:03:55.720
Like the setup part is setting up an initial directory, including setting up your pyproject.toml

00:03:55.720 --> 00:04:01.400
and setting up some different directories, which is great.

00:04:01.400 --> 00:04:03.120
Just sets up the structure for you.

00:04:03.120 --> 00:04:08.840
There's a lot of files here that like I don't often, to tell you the truth, I don't use lock

00:04:08.840 --> 00:04:15.620
files a lot, partly because I'm using, I'm often developing Python modules or packages,

00:04:15.620 --> 00:04:17.520
which I don't really lock stuff.

00:04:17.520 --> 00:04:21.100
Locking is more regularly around applications.

00:04:21.100 --> 00:04:25.520
So do you have lock files for some of your application stuff, Michael?

00:04:25.520 --> 00:04:26.860
All of them.

00:04:26.860 --> 00:04:27.540
All of them.

00:04:27.540 --> 00:04:29.620
I use the pip compile workflow.

00:04:29.620 --> 00:04:30.220
Okay.

00:04:30.220 --> 00:04:34.640
So I've got like one thing that specifies the top level requirements and then another one

00:04:34.640 --> 00:04:38.760
that is the lock file using uv pip compile.

00:04:38.760 --> 00:04:40.080
Okay.

00:04:40.080 --> 00:04:44.900
One of the things that I didn't think about was like requirements for the,

00:04:44.900 --> 00:04:47.140
requirements dash dev lock.

00:04:47.140 --> 00:04:54.460
So instead of requirements on text, these are the dependencies are in your pyproject.toml,

00:04:54.460 --> 00:04:56.480
but there are a lot requirements lock files.

00:04:56.480 --> 00:05:03.820
But a dev lock file that I might actually have even for a package like to make sure all the

00:05:03.820 --> 00:05:05.240
developers are using the same thing.

00:05:05.240 --> 00:05:06.220
So that's kind of interesting.

00:05:06.220 --> 00:05:07.180
It makes a lot of sense.

00:05:07.180 --> 00:05:10.240
I was just had, when did I publish it?

00:05:10.240 --> 00:05:12.440
This, was that this week's episode?

00:05:12.440 --> 00:05:13.060
I can't remember.

00:05:13.060 --> 00:05:14.240
Very, very, very recently.

00:05:14.240 --> 00:05:19.120
David Lord from Flask on Talk Python.

00:05:19.120 --> 00:05:19.940
Yeah.

00:05:20.400 --> 00:05:25.700
And one of the things they're working on is creating a more repeatable environment for

00:05:25.700 --> 00:05:27.600
contributors and developers to Flask.

00:05:27.600 --> 00:05:32.080
So like you, Flask, you don't want to just pin the versions of everything because that wrecks

00:05:32.080 --> 00:05:34.260
everybody else's options to work with different versions.

00:05:35.400 --> 00:05:40.020
But you do want to make sure that people who do PRs have the same setup as people who are

00:05:40.020 --> 00:05:41.240
reviewing the PRs, right?

00:05:41.240 --> 00:05:48.680
So they talked a lot about having a pinned requirements for developers of the project,

00:05:48.680 --> 00:05:49.780
but not the project itself.

00:05:50.440 --> 00:05:51.520
Yeah, that's a cool idea.

00:05:51.520 --> 00:05:54.680
So that's set up.

00:05:54.680 --> 00:05:57.020
You can do linting with it.

00:05:57.020 --> 00:05:59.600
The testing section talks about pytest.

00:05:59.600 --> 00:05:59.880
Yay!

00:05:59.880 --> 00:06:06.360
But one of the things that I thought was kind of neat was this, and I think I knew this,

00:06:06.360 --> 00:06:08.200
but anyway, this idea of scripts.

00:06:08.200 --> 00:06:12.260
So within your PyProject Tomo, you can set up Rai scripts.

00:06:12.260 --> 00:06:16.100
So they're basically extra commands that do things.

00:06:16.260 --> 00:06:21.180
So you can say like Rai run test.

00:06:21.180 --> 00:06:23.740
And so the run command runs your script.

00:06:23.740 --> 00:06:30.520
So you can say run in a test is a thing that you've said that just like defaults to Rai test.

00:06:30.520 --> 00:06:38.620
But things like Rai run check might be running PyRite or for linting or for type checking.

00:06:38.620 --> 00:06:43.420
Or linting is a Rai lint with a fix or something.

00:06:43.420 --> 00:06:48.860
So all these different, especially if you've got other people on the team,

00:06:48.860 --> 00:06:52.060
having some way to do all of this is good.

00:06:52.060 --> 00:06:59.440
And then kind of a neat thing that's probably as nice as being able to chain scripts.

00:06:59.440 --> 00:07:06.560
So if you've got like running your auto formatting and linting and type checking and also running your tests,

00:07:07.140 --> 00:07:13.180
but then if you want to do all of them, there's a way to just chain them up within the PyProject automos,

00:07:13.180 --> 00:07:14.280
which is kind of cool.

00:07:14.280 --> 00:07:15.180
So that's very cool.

00:07:15.180 --> 00:07:19.500
This kind of takes the place of where I would use either where I used to use make files.

00:07:19.500 --> 00:07:23.440
Now I use talks commands for.

00:07:24.200 --> 00:07:31.740
So a lot of this around if you don't need it, I'm guessing this doesn't create a new virtual environment,

00:07:31.740 --> 00:07:32.880
but I haven't played with it yet.

00:07:32.880 --> 00:07:36.300
But that's where talks would do that.

00:07:38.000 --> 00:07:40.460
So there's a discussion around documentation.

00:07:40.460 --> 00:07:44.240
It isn't really a Rai thing, but just talking about documenting things well.

00:07:44.240 --> 00:07:48.060
But I really kind of like this article about like if you want to try out,

00:07:48.060 --> 00:07:49.900
mostly because I do want to try out Rai.

00:07:50.300 --> 00:07:53.780
And this kind of walks through all the different things it does within your workflow

00:07:53.780 --> 00:07:55.580
and where you might want to pull it in.

00:07:55.580 --> 00:08:00.300
And I do appreciate that Rai has some configuration.

00:08:00.300 --> 00:08:07.240
So apparently the default packaging tool is Hatch.

00:08:07.240 --> 00:08:11.420
But this person, Chris, wanted to use PDM.

00:08:11.420 --> 00:08:12.340
So you can set that.

00:08:12.340 --> 00:08:14.360
But I'd probably leave it as Hatch because I like Hatch.

00:08:14.600 --> 00:08:17.140
But it might do something different.

00:08:17.140 --> 00:08:21.540
But you can even set a dependency operator.

00:08:21.540 --> 00:08:26.460
So whether you want it to be like approximately equal to or greater than equal or whatever,

00:08:26.460 --> 00:08:28.140
kind of neat.

00:08:28.140 --> 00:08:31.260
The bonus is really kind of fun.

00:08:31.260 --> 00:08:37.580
I actually just ran into a project where I have to help support,

00:08:37.580 --> 00:08:43.380
which is a large repository with multiple Python projects in it.

00:08:43.980 --> 00:08:51.360
And so I'm looking forward to reading through how possibly this documentation around

00:08:51.360 --> 00:08:53.460
dealing with monorepos in Python.

00:08:53.460 --> 00:08:57.460
This is on my to-do route to read next list.

00:08:57.460 --> 00:08:58.880
So that's cool.

00:08:58.880 --> 00:09:00.120
That's next level stuff right there.

00:09:00.120 --> 00:09:02.420
Yeah.

00:09:02.420 --> 00:09:05.300
Very, very cool.

00:09:05.300 --> 00:09:12.620
I, Brian, am happy to report, I think, that the gil has been vanquished.

00:09:13.360 --> 00:09:17.320
We are now in the epoch of free-threaded Python.

00:09:17.320 --> 00:09:22.980
So how might you test this out and see if it's actually worth it and so on?

00:09:22.980 --> 00:09:23.620
Okay.

00:09:23.620 --> 00:09:29.920
So Simon Wilson, one of his Today I Learned, is trying out free-threaded Python on macOS.

00:09:29.920 --> 00:09:31.380
It could be others as well.

00:09:32.740 --> 00:09:34.920
You can just go to, this is interesting.

00:09:34.920 --> 00:09:38.880
I didn't realize that you would be able to get free-threaded Python this way from the pep.

00:09:38.880 --> 00:09:43.860
It's like, you've got to get a special build of it and it's just like its own thing, right?

00:09:43.860 --> 00:09:44.580
Yeah.

00:09:44.580 --> 00:09:46.160
But if you get the macOS installer, right?

00:09:46.160 --> 00:09:50.960
I don't know about the others, but presumably the Windows one has something similar or will.

00:09:51.080 --> 00:09:51.520
I don't know.

00:09:51.520 --> 00:09:53.680
Go to install this.

00:09:53.680 --> 00:09:59.320
You can set up the options, custom install, and you can just check off a checkbox to install

00:09:59.320 --> 00:10:05.920
a separate binary for free-threaded Python 3.13 instead of guild Python.

00:10:06.920 --> 00:10:07.040
Wow.

00:10:07.040 --> 00:10:09.380
And that's just from the python.org download.

00:10:09.380 --> 00:10:10.560
Yeah, exactly.

00:10:10.560 --> 00:10:11.340
Wow.

00:10:11.340 --> 00:10:11.860
Exactly.

00:10:11.860 --> 00:10:12.240
Yeah.

00:10:12.240 --> 00:10:15.880
Just to get that downloads beta 3 of it and there it is.

00:10:15.880 --> 00:10:18.440
So you just hit customize your install and boom.

00:10:18.440 --> 00:10:20.220
So that alone is kind of interesting.

00:10:20.220 --> 00:10:22.300
Yeah.

00:10:22.300 --> 00:10:33.440
And then once you do that, you get not just a Python 3.13, but a Python 3.13 T, which interesting.

00:10:33.440 --> 00:10:35.280
Not FT.

00:10:36.120 --> 00:10:37.880
I mean, the other one should have a T on it.

00:10:37.880 --> 00:10:38.160
Come on.

00:10:38.160 --> 00:10:39.960
If it's going to be threaded, I don't know.

00:10:39.960 --> 00:10:41.300
Anyway, T, whatever.

00:10:41.300 --> 00:10:45.780
You get one that is like, that's the one you can run in the command line for free-threaded

00:10:45.780 --> 00:10:46.020
Python.

00:10:46.020 --> 00:10:49.860
And Simon points out like, didn't really put this in the path because it's beta.

00:10:49.860 --> 00:10:53.440
I don't want to mess stuff up, but nonetheless, there it is.

00:10:53.440 --> 00:10:55.020
So let's test it out.

00:10:55.020 --> 00:10:59.460
Comes up with a simple little program that just does some CPU bound thing.

00:10:59.460 --> 00:11:00.460
This is the important thing.

00:11:00.460 --> 00:11:05.920
We've, for a long time since Python 3.4, had really good options.

00:11:05.920 --> 00:11:10.300
To parallelize IO bound or waiting types of things.

00:11:10.300 --> 00:11:11.260
I'm talking to a network.

00:11:11.260 --> 00:11:12.300
I'm talking to a database.

00:11:12.300 --> 00:11:15.460
I'm talking to whatever with asyncio, right?

00:11:15.460 --> 00:11:16.080
Yeah.

00:11:16.080 --> 00:11:19.060
But the CPU bound stuff, the GIL would stop it.

00:11:19.060 --> 00:11:19.520
Yeah.

00:11:19.520 --> 00:11:20.960
No, I don't care how many cores you got.

00:11:20.960 --> 00:11:21.480
You got one.

00:11:21.480 --> 00:11:22.220
Right?

00:11:22.220 --> 00:11:22.980
Yeah.

00:11:23.040 --> 00:11:26.420
And so this is just summing up a bunch of numbers.

00:11:26.420 --> 00:11:27.420
The squares of the numbers.

00:11:27.420 --> 00:11:30.300
Just like doing some computational busy work.

00:11:30.300 --> 00:11:30.640
Right?

00:11:30.640 --> 00:11:35.820
So it says, okay, well, let's set up a little app that'll take some parameters so we can feed

00:11:35.820 --> 00:11:38.420
it different information and see what we'll get.

00:11:38.420 --> 00:11:43.960
And then run it on a thread pool executor with as many threads that are specified.

00:11:44.800 --> 00:11:46.620
So it starts out just to skip ahead.

00:11:46.620 --> 00:11:48.100
So look, I ran it once.

00:11:48.100 --> 00:11:49.640
I get one core.

00:11:49.640 --> 00:11:52.220
It says 99% CPU usage on macOS.

00:11:52.220 --> 00:11:58.280
That it reports this as a 100% basis as being one core fully busy.

00:11:58.400 --> 00:11:59.420
So you've got eight cores.

00:11:59.420 --> 00:12:00.980
This could go up to 800%.

00:12:00.980 --> 00:12:01.560
It's kind of weird.

00:12:01.560 --> 00:12:05.760
Anyway, 99% CPU if you run the regular one.

00:12:05.760 --> 00:12:10.020
But if you run the free threaded one, he was getting some number that was a little low.

00:12:10.020 --> 00:12:10.680
There's a bug.

00:12:10.680 --> 00:12:14.620
It's not super relevant about him fixing the bug or not.

00:12:14.620 --> 00:12:17.000
I don't really think that matters.

00:12:17.000 --> 00:12:26.080
But what the takeaway is, if you run it with four threads, that whole workload ran in 1.3 seconds.

00:12:26.360 --> 00:12:28.040
You run it with 12 threads.

00:12:28.040 --> 00:12:30.140
It went down to one second.

00:12:30.140 --> 00:12:31.660
I don't know how many cores he has.

00:12:31.660 --> 00:12:32.480
I don't believe it said.

00:12:32.480 --> 00:12:38.600
But with the gill, that's four seconds versus one second or 1.3 seconds.

00:12:38.600 --> 00:12:41.380
Basically, four times as fast.

00:12:41.380 --> 00:12:43.980
Presumably, this is a four core system.

00:12:43.980 --> 00:12:44.500
I'm not sure.

00:12:44.500 --> 00:12:47.060
Anyway, pretty cool, right?

00:12:47.060 --> 00:12:49.220
That is pretty cool.

00:12:49.220 --> 00:12:51.320
So yes, that's faster.

00:12:51.320 --> 00:12:53.980
Four times faster is 400%.

00:12:53.980 --> 00:12:54.640
That's no joke.

00:12:54.640 --> 00:12:56.040
That'll make a difference for some people.

00:12:56.680 --> 00:13:00.260
But I think more relevant is just like, hey, look, apparently the installers have it.

00:13:00.260 --> 00:13:03.860
That's kind of cool.

00:13:03.860 --> 00:13:04.480
Yeah.

00:13:04.480 --> 00:13:05.220
Okay.

00:13:05.220 --> 00:13:07.980
I was chuckling because I said testing it out.

00:13:07.980 --> 00:13:11.980
It says, I asked Claude 3.5 Sonnet to write me a quick test script.

00:13:11.980 --> 00:13:17.640
But the script it came up with is something I know that he can write on his own.

00:13:17.640 --> 00:13:20.060
Yeah, exactly.

00:13:20.060 --> 00:13:21.660
Exactly.

00:13:23.900 --> 00:13:26.580
It didn't come up with something all that interesting.

00:13:26.580 --> 00:13:27.620
And it introduced a bug.

00:13:27.620 --> 00:13:28.760
He should have just written it himself.

00:13:28.760 --> 00:13:31.660
Oh, wow.

00:13:31.660 --> 00:13:32.820
But this is neat.

00:13:32.820 --> 00:13:38.340
Actually, I saw the announcement that there were some builds of the free threader one, but

00:13:38.340 --> 00:13:41.220
I didn't know you could just do it, like click it from the installer.

00:13:41.220 --> 00:13:42.000
That's cool.

00:13:42.000 --> 00:13:44.880
Yeah, that's the big news I took away as well.

00:13:44.880 --> 00:13:45.300
Very cool.

00:13:45.300 --> 00:13:45.960
Neat.

00:13:45.960 --> 00:13:47.160
Very neat.

00:13:47.160 --> 00:13:51.440
And you know what you don't have to build yourself is an APM platform.

00:13:51.440 --> 00:13:52.200
Right.

00:13:52.200 --> 00:13:54.160
You could let Scout do that for you.

00:13:54.740 --> 00:13:58.300
Let me tell you real quick about Scout APM.

00:13:58.300 --> 00:14:02.080
They're big supporters of Python Bytes, so we appreciate that very much.

00:14:02.080 --> 00:14:09.220
So if you are tired of spending hours trying to find the root cause of issues impacting your

00:14:09.220 --> 00:14:13.040
performance, then you owe it to yourself to check out Scout APM.

00:14:13.040 --> 00:14:19.600
They're a leading Python application performance monitoring tool, APM, that helps you identify

00:14:19.600 --> 00:14:22.600
and solve performance abnormalities faster and easier.

00:14:23.260 --> 00:14:28.120
Scout APM ties bottlenecks such as memory leaks, slow database queries, background jobs, and

00:14:28.120 --> 00:14:33.940
the dreaded N plus one queries that you can end up if you do lazy loading in your ORM.

00:14:33.940 --> 00:14:36.340
Then you say, oh, no, why is it so slow?

00:14:36.340 --> 00:14:38.680
Why are you doing 200 database queries for what should be one?

00:14:38.680 --> 00:14:40.700
So you can find out things like that.

00:14:40.700 --> 00:14:45.880
And it links it back directly to source code so you can spend less time in the debugger and

00:14:45.880 --> 00:14:49.120
killing logs and just finding the problems and moving on.

00:14:49.120 --> 00:14:52.860
And you'll love it because it's built for developers by developers.

00:14:52.860 --> 00:14:54.520
It makes it easy to get set up.

00:14:54.520 --> 00:14:57.040
Seriously, you can do it in less than four minutes.

00:14:57.040 --> 00:14:57.860
So that's awesome.

00:14:57.860 --> 00:15:00.940
And the best part is the pricing is straightforward.

00:15:00.940 --> 00:15:06.480
You only pay for the data that you use with no hidden overage fees or per seat pricing.

00:15:07.200 --> 00:15:09.140
And I just learned this, Brian.

00:15:09.140 --> 00:15:14.300
They also have they provide the pro version for free to all open source projects.

00:15:14.300 --> 00:15:18.940
So if you're an open source maintainer and you want to have Scout APM for that project,

00:15:18.940 --> 00:15:22.620
just shoot them a message or something on their pricing page about that.

00:15:22.940 --> 00:15:26.500
So you can start your free trial and get instant insights today.

00:15:26.500 --> 00:15:29.740
Visit Pythonbytes.fm slash Scout.

00:15:29.740 --> 00:15:32.020
The link is in your podcast player show notes as well.

00:15:32.020 --> 00:15:33.420
And please use that link.

00:15:33.420 --> 00:15:37.920
Don't just search for them because otherwise they don't think you came from us.

00:15:37.920 --> 00:15:39.500
And then they'd stop supporting the show.

00:15:39.580 --> 00:15:42.060
So please use our link, Pythonbytes.fm slash Scout.

00:15:42.060 --> 00:15:43.000
Check them out.

00:15:43.000 --> 00:15:44.940
It really supports the show.

00:15:44.940 --> 00:15:48.300
What's next, Brian?

00:15:48.300 --> 00:15:49.540
Next?

00:15:49.540 --> 00:15:50.320
Oh, next.

00:15:50.320 --> 00:15:51.620
What's next?

00:15:51.620 --> 00:15:54.340
I want to iterate into our to the next topic.

00:15:55.340 --> 00:15:56.680
I want to talk about iter tools.

00:15:56.680 --> 00:16:05.160
So I really this is this comes from Rodrigo from math, maths, pp.com.

00:16:05.160 --> 00:16:08.080
And he writes a lot of great articles.

00:16:08.080 --> 00:16:13.580
But I and I know we've covered iter tools before and people have heard of iter tools and it's

00:16:13.580 --> 00:16:14.400
built into Python.

00:16:14.400 --> 00:16:19.520
But there's so many goodies in there that I like to have people tell me what their favorites

00:16:19.520 --> 00:16:20.720
are and reshaping.

00:16:20.720 --> 00:16:28.680
So this is there's this is an article that groups all of the it's they I don't think I

00:16:28.680 --> 00:16:29.980
think there's more than 20 in there.

00:16:29.980 --> 00:16:34.740
But anyway, 20 tools that every Python developer should be aware of from iter tools.

00:16:34.740 --> 00:16:38.380
And it's broken into five categories.

00:16:38.380 --> 00:16:46.000
There's reshaping iterators, filtering, filtering iterators, combinatorial, infinite and iterators

00:16:46.000 --> 00:16:47.960
that complement other tools.

00:16:48.760 --> 00:16:51.920
And there's I just did a quick list of this.

00:16:51.920 --> 00:16:56.720
And I really think there's a few a few of these in here that I need to use more.

00:16:56.720 --> 00:16:59.200
So I'm glad glad I ran across this article.

00:16:59.200 --> 00:17:00.600
One of them.

00:17:00.600 --> 00:17:05.120
So right off the bat, it says the three most useful iterators are product.

00:17:05.120 --> 00:17:11.060
And what product does is it simplifies like let's say you've got a nested loop of like width

00:17:11.060 --> 00:17:17.420
and height, for instance, for X in range of width and for Y in range of height, you do something

00:17:17.420 --> 00:17:24.260
with X and Y. Well, you can use iter tools product and and have it just be one does a product of two

00:17:24.260 --> 00:17:26.300
ranges or product of two iterators.

00:17:26.300 --> 00:17:33.260
And it gives you the two like the all the all of the combinations in order.

00:17:33.640 --> 00:17:37.640
So that's a really cool thing that I always forget about that.

00:17:37.640 --> 00:17:41.600
I probably should write that more, especially if you've got more than two when you get like

00:17:41.600 --> 00:17:43.020
three. It gets ridiculous.

00:17:43.020 --> 00:17:47.200
And so using iter tools to simplify that, it's a really great idea.

00:17:47.200 --> 00:17:53.920
And because, you know, with Python, every time you you end it into a for loop, you're going

00:17:53.920 --> 00:17:54.900
to indent your code.

00:17:54.900 --> 00:18:01.460
It helps you keep the the the horizontal width of your code a little bit more reasonable.

00:18:01.860 --> 00:18:02.700
Flat. OK.

00:18:02.700 --> 00:18:03.940
Nested all that kind of stuff.

00:18:03.940 --> 00:18:04.540
Yeah.

00:18:04.540 --> 00:18:07.080
Chain, I always remember about.

00:18:07.080 --> 00:18:12.580
So chain is a is a is a way to combine two lists and iterate through all of them instead

00:18:12.580 --> 00:18:13.600
of adding the lists.

00:18:13.600 --> 00:18:16.280
Adding is kind of it creates a new one.

00:18:16.280 --> 00:18:17.300
You might not need that.

00:18:17.300 --> 00:18:20.200
Whereas chain will iterate through both of them.

00:18:20.200 --> 00:18:25.700
And I have to remind people if you're not aware, all these really cool things within the

00:18:25.700 --> 00:18:26.400
iter tools.

00:18:27.120 --> 00:18:30.820
There are a way to manipulate iterators such that you're not copying things.

00:18:30.820 --> 00:18:32.720
You're not making a new list of something.

00:18:32.720 --> 00:18:36.540
You're just iterating through existing iterators without doing the copy.

00:18:36.540 --> 00:18:38.340
I think that I'm pretty sure that's true.

00:18:38.340 --> 00:18:38.880
Yeah.

00:18:38.880 --> 00:18:43.240
The the one that I the the third one on is you.

00:18:43.240 --> 00:18:44.740
Everybody should know about that.

00:18:44.740 --> 00:18:46.340
I thought was great was pairwise.

00:18:46.340 --> 00:18:49.420
And I actually apparently never knew about this.

00:18:49.420 --> 00:18:56.700
And this is a way to like, let's say you've got the example is a bunch of names and you

00:18:56.700 --> 00:19:00.840
want to be able to make sure that everybody says hi to the person on their right.

00:19:00.840 --> 00:19:04.440
You can go through and it well, this may be a silly example.

00:19:04.440 --> 00:19:11.440
But if you want to go through an entire sequence and make sure each pair in a like you're just

00:19:11.440 --> 00:19:15.940
walking it down like the first number one and number two and then two and three and then

00:19:15.940 --> 00:19:16.420
three and four.

00:19:16.420 --> 00:19:18.580
This is the easy way to do that.

00:19:18.580 --> 00:19:27.660
And actually, there's an old way of using zip with the you can you can combine two lists

00:19:27.660 --> 00:19:28.400
and do slices.

00:19:28.400 --> 00:19:30.320
But that's a little confusing.

00:19:30.320 --> 00:19:33.940
Whereas pairwise just gives it to you right away.

00:19:33.940 --> 00:19:36.820
It returns to two pointers to objects.

00:19:37.040 --> 00:19:38.080
So that's really cool.

00:19:38.080 --> 00:19:45.740
A couple more things I wanted to bring up that were great in here was zip longest, which I

00:19:45.740 --> 00:19:47.540
do remember because I use it frequently.

00:19:47.540 --> 00:19:52.320
But if you're zipping two things together, which means you're going to go through and go through

00:19:52.320 --> 00:19:56.180
two sequences using zip.

00:19:56.560 --> 00:20:03.200
By default, zip picks the shortest and it just chops it off, I think.

00:20:03.200 --> 00:20:05.080
Actually, I don't remember what it does at the end.

00:20:05.080 --> 00:20:07.760
But zip longest will have a fill value.

00:20:07.760 --> 00:20:12.540
So you give it a fill value and it goes through everything and you'll have something empty.

00:20:12.540 --> 00:20:13.860
So you make sure you go through everything.

00:20:13.860 --> 00:20:19.160
And then the last thing is T, which is kind of neat.

00:20:19.160 --> 00:20:24.820
It allows you to do and normally iterators are exhausted once you go through it.

00:20:24.820 --> 00:20:27.200
So you have to regenerate an iterator.

00:20:27.200 --> 00:20:32.040
But T allows you to iterate through something a couple times.

00:20:32.040 --> 00:20:37.800
It allows you to iterate without exhausting the iterator, which is interesting.

00:20:37.800 --> 00:20:40.320
So nice.

00:20:40.320 --> 00:20:46.100
And then at the end, a discussion of, which I think is cool that he did this.

00:20:46.100 --> 00:20:51.280
So a discussion that there is, he wrote a book on iter tools.

00:20:51.280 --> 00:20:53.500
So there's a little book of iter tools.

00:20:53.820 --> 00:20:55.140
He's not paying for this ad.

00:20:55.140 --> 00:20:57.660
I just think it's neat that somebody wrote a book about iter tools.

00:20:57.660 --> 00:20:58.300
That's nice.

00:20:58.300 --> 00:20:58.860
Neat.

00:20:58.860 --> 00:20:59.580
Yeah.

00:20:59.580 --> 00:21:01.140
Yeah, it's pretty neat.

00:21:01.140 --> 00:21:05.420
There's a lot of powerful stuff there.

00:21:05.420 --> 00:21:06.520
Yeah.

00:21:06.520 --> 00:21:09.140
A lot of simple, hard problems in simple ways.

00:21:09.140 --> 00:21:14.780
I really appreciate that he picked out those first three, though.

00:21:15.780 --> 00:21:20.660
Even if you're not really wanting to go through all of this, take a look at these three.

00:21:20.660 --> 00:21:23.500
You probably need them and you just don't realize it.

00:21:23.500 --> 00:21:24.620
So, yeah.

00:21:24.620 --> 00:21:28.620
So what do you got for us next, Michael?

00:21:29.500 --> 00:21:37.060
You would love to know if your website was down, not up, or your Docker container or your other service.

00:21:37.060 --> 00:21:39.340
And you would like to be notified in interesting ways.

00:21:39.340 --> 00:21:41.180
And there are services you can pay for this.

00:21:42.020 --> 00:21:48.940
or free services that have weird limitations or, I don't know, just funky stuff, right?

00:21:48.940 --> 00:21:57.940
Some of those, in order to answer really good questions, you'd have to give them pretty serious internal access to your code or to your infrastructure, potentially.

00:21:57.940 --> 00:22:06.080
So I present to you the uptime Kuma, which is trying hard to resist uptime karma.

00:22:06.080 --> 00:22:10.160
But no, uptime Kuma, a fancy self-hosted monitoring tool.

00:22:10.160 --> 00:22:12.620
So this thing is pretty cool.

00:22:12.620 --> 00:22:19.160
It comes with a Docker variant, so you can just Docker compose it into life.

00:22:19.160 --> 00:22:28.180
And I'm thinking about setting this up for Python bytes and Talk Python and other things because I've already got that Docker cluster and all the infrastructure to run it.

00:22:28.180 --> 00:22:29.460
So adopting it should be really easy.

00:22:29.460 --> 00:22:32.180
It just takes one container to run.

00:22:32.180 --> 00:22:37.140
And I believe it stores its data into a SQLite database in there.

00:22:37.140 --> 00:22:39.120
So file copy is kind of a backup.

00:22:39.120 --> 00:22:40.520
It's kind of the backup option.

00:22:40.520 --> 00:22:42.840
So anyway, check this out.

00:22:42.840 --> 00:22:43.740
Doesn't this look neat, Brian?

00:22:43.740 --> 00:22:44.480
Yeah.

00:22:44.480 --> 00:22:46.040
You tell it different things you want to do.

00:22:46.040 --> 00:22:48.000
Like, I want to check that the port is open.

00:22:48.000 --> 00:22:53.200
I want to check that this example is, you know, some example.com website is up.

00:22:53.200 --> 00:22:55.760
You can see that MySQL is running.

00:22:55.760 --> 00:22:58.440
You can ping the server to see that the server is up.

00:22:58.440 --> 00:23:02.180
All sorts of things you can put as tests in here.

00:23:02.180 --> 00:23:04.120
And you can even have an anti-test.

00:23:04.120 --> 00:23:17.760
Like, for example, if you're ever able to directly connect to the database, that should be flagged as an error, like a down moment, not an up moment, because something's gone wrong with the infrastructure and you need to go fix it.

00:23:17.760 --> 00:23:19.860
But in a reverse sort of way.

00:23:20.240 --> 00:23:20.880
So what does it say?

00:23:20.880 --> 00:23:25.240
First of all, 54,000, 53,000 GitHub stars.

00:23:25.240 --> 00:23:28.740
So really, really quite popular.

00:23:28.740 --> 00:23:36.060
It has a little test, a little test server you can set up, point at your website for 10 minutes and play with it.

00:23:36.060 --> 00:23:37.780
That's a really nice feature.

00:23:38.620 --> 00:23:47.260
What it says, uptime monitoring for HTTPS, TCP, HTTP keywords, JSON query, ping, a DNS record.

00:23:47.260 --> 00:23:52.660
You can make sure your DNS records don't go insane in, like, your MXD camera, I don't know, whatever.

00:23:52.660 --> 00:23:55.720
Game servers.

00:23:55.720 --> 00:23:58.580
And even check that your certain Docker containers are still running.

00:23:58.580 --> 00:24:00.080
So it's got a nice UI.

00:24:00.080 --> 00:24:06.980
And it has notifications for Telegram, Discord, Slack, pushover, email, and 90 other notifications.

00:24:07.720 --> 00:24:10.760
It can have as fine grained as every 20 seconds checking.

00:24:10.760 --> 00:24:13.620
It comes with status pages.

00:24:13.620 --> 00:24:26.320
So if we had a Python bytes monitor set up with this, I could set up status.pythonbytes.fm

00:24:26.320 --> 00:24:29.180
that people could go and see if the RSS feed is live.

00:24:29.180 --> 00:24:30.760
Is the Docker container running?

00:24:30.760 --> 00:24:32.260
Is X, Y, and Z, right?

00:24:32.260 --> 00:24:33.880
So it has that for you.

00:24:34.640 --> 00:24:41.400
And it'll also, one thing I really like, because I use Let's Encrypt, but the auto renewal is a little bit janky.

00:24:41.400 --> 00:24:42.720
Long story.

00:24:42.720 --> 00:24:44.480
I don't want to go into it, but it's a little bit janky.

00:24:44.480 --> 00:24:48.620
And so it works, but it requires a little fiddling.

00:24:48.620 --> 00:24:52.520
So having it will actually check SSL certificates to see if it will expire.

00:24:52.760 --> 00:24:55.780
So it'll say like, your certificate is good for 29 more days.

00:24:55.780 --> 00:24:56.560
Oh, that's cool.

00:24:56.560 --> 00:25:00.380
You want to get on that before it goes like, you know, something terrible.

00:25:00.380 --> 00:25:02.200
So all of that.

00:25:02.200 --> 00:25:03.460
Isn't that sweet?

00:25:03.460 --> 00:25:04.680
It is cool.

00:25:05.240 --> 00:25:07.960
Yeah, there's a bunch of sponsors and it's got this nice UI.

00:25:07.960 --> 00:25:11.580
You can bump over to the status page.

00:25:11.580 --> 00:25:18.600
It'll prepare you a little demo app and it runs for a certain amount of time.

00:25:18.600 --> 00:25:22.880
So how long are certificates good for?

00:25:24.080 --> 00:25:28.140
If you do Let's Encrypt, it's a year, I believe.

00:25:28.140 --> 00:25:29.220
Okay.

00:25:29.220 --> 00:25:37.520
So anyway, you can go over here and create this and actually go and add a little monitor and pick all the different kinds.

00:25:37.520 --> 00:25:39.240
And look at all these things.

00:25:39.240 --> 00:25:44.720
You can monitor MongoDB and SQL Server, Postgres directly.

00:25:44.720 --> 00:25:46.440
Yeah, it's really neat.

00:25:46.680 --> 00:25:50.780
So I'm thinking of setting this up and if you want to play with it, just click on that little thing.

00:25:50.780 --> 00:25:52.760
You can see here, Brian, I clicked on it.

00:25:52.760 --> 00:25:56.940
Now it says I have nine minutes to 21 seconds before my app gets blown away.

00:25:56.940 --> 00:25:59.000
But I can test it out, which is pretty cool.

00:25:59.000 --> 00:26:09.580
Anyway, it will give us potentially a really nice way to sort of monitor and get notifications about it.

00:26:09.580 --> 00:26:15.020
So potentially I could set it up once a day on the free one

00:26:15.020 --> 00:26:18.560
and make sure that my website at least is live for 10 minutes a day.

00:26:18.560 --> 00:26:19.520
Yeah.

00:26:19.520 --> 00:26:24.920
If you don't mind reconfiguring it every time.

00:26:24.920 --> 00:26:25.520
Yeah.

00:26:25.520 --> 00:26:26.000
Okay.

00:26:26.000 --> 00:26:26.820
Yeah, sure.

00:26:26.820 --> 00:26:28.000
All right.

00:26:28.000 --> 00:26:28.760
Pretty cool.

00:26:28.760 --> 00:26:30.020
How about some extras?

00:26:30.020 --> 00:26:34.260
The only extra I got was last week.

00:26:34.260 --> 00:26:36.540
I talked about making a new pytest course.

00:26:36.540 --> 00:26:38.260
I've been working on that.

00:26:38.740 --> 00:26:46.320
And I'm on version three because I'm a perfectionist and want to make sure that it's smooth and quick.

00:26:46.320 --> 00:26:50.100
So I do hope to get that out sometime soon.

00:26:50.100 --> 00:26:54.520
I was going to say maybe next week, but, you know, I don't want to put too much pressure on myself.

00:26:54.520 --> 00:26:55.180
Yeah.

00:26:56.880 --> 00:26:57.960
That's very exciting.

00:26:57.960 --> 00:26:59.060
I know people are looking forward to it.

00:26:59.060 --> 00:27:04.200
I also had to basically put DaVinci Resolve down to come record the podcast.

00:27:04.200 --> 00:27:07.900
So I was in the middle editing some videos that I got coming on for a new course as well.

00:27:07.900 --> 00:27:09.960
So very exciting stuff.

00:27:09.960 --> 00:27:10.840
All right.

00:27:11.240 --> 00:27:14.960
There's a never-ending stream of things to talk about, right?

00:27:14.960 --> 00:27:15.760
Yeah.

00:27:15.760 --> 00:27:16.960
All right.

00:27:16.960 --> 00:27:17.760
I've got a couple.

00:27:17.760 --> 00:27:24.300
Kenneth Wrights pointed out that requests and more fame.

00:27:24.300 --> 00:27:28.900
Talks about this move that Switzerland pulled.

00:27:28.900 --> 00:27:33.820
Switzerland now requires all government software to be open source.

00:27:33.820 --> 00:27:36.140
That's cool.

00:27:36.140 --> 00:27:36.920
Yeah.

00:27:36.920 --> 00:27:38.280
So what does that mean?

00:27:40.420 --> 00:27:41.560
You got to read it carefully.

00:27:41.560 --> 00:27:46.600
It doesn't mean the government has to only use open source, as in Linux and Firefox.

00:27:46.600 --> 00:27:52.060
But the thing, the software that the government makes has to be open source of what this is.

00:27:52.060 --> 00:27:53.840
So we bump over to Omnivore.

00:27:53.840 --> 00:27:54.580
You can see my notes.

00:27:54.580 --> 00:28:02.060
Switzerland has taken a major step forward with its federal law on the use of electronic means for the fulfillment of government tasks.

00:28:02.060 --> 00:28:05.040
MBAG is the acronym.

00:28:05.040 --> 00:28:10.040
This groundbreaking legislation mandates releasing open source software of the federal government.

00:28:10.040 --> 00:28:21.500
The law requires all public bodies to disclose the source code of software developed by or for them unless third-party rights or security concerns prevent it.

00:28:22.960 --> 00:28:24.260
So that's pretty neat.

00:28:24.260 --> 00:28:25.840
There's actually, there was some pushback.

00:28:25.840 --> 00:28:30.360
For example, one of the main areas this was around is the justice system.

00:28:30.360 --> 00:28:43.600
This was trying to get all the software that runs, basically runs the justice system, the court system for Switzerland open source.

00:28:43.740 --> 00:28:44.560
But guess what?

00:28:44.560 --> 00:28:48.220
The proprietary legal software company, Web Law, wasn't happy.

00:28:48.220 --> 00:28:49.860
Right?

00:28:49.860 --> 00:28:50.540
Yeah.

00:28:50.540 --> 00:28:51.460
No, they weren't.

00:28:51.460 --> 00:28:54.200
But after a decade of fighting, it came out.

00:28:54.200 --> 00:28:56.180
And there's one other point to make.

00:28:57.000 --> 00:29:06.440
In addition to mandating open source software, it also requires the release of non-personal, non-security sensitive data as open data.

00:29:06.440 --> 00:29:13.360
So it's like open software and open data as well.

00:29:13.360 --> 00:29:14.540
So pretty cool.

00:29:14.540 --> 00:29:15.740
Interesting.

00:29:15.740 --> 00:29:16.840
Yeah, it is.

00:29:16.940 --> 00:29:19.320
We do have some stuff like that, like over at Talk Python.

00:29:19.320 --> 00:29:20.880
What was it?

00:29:20.880 --> 00:29:26.820
Elections, I think, if I look for that.

00:29:26.820 --> 00:29:27.040
Yeah.

00:29:27.040 --> 00:29:30.280
Python at the U.S. Federal Elections Commission.

00:29:30.280 --> 00:29:32.540
I talked to Laura Beaufort.

00:29:32.840 --> 00:29:36.260
And I believe they are open sourcing their stuff as well.

00:29:36.260 --> 00:29:38.860
A lot of things going on there.

00:29:38.860 --> 00:29:41.200
Like, yeah, open source at the FEC, for example.

00:29:41.200 --> 00:29:48.800
So we have some stuff in, like, spotty examples of that, but not as an overall statement.

00:29:48.800 --> 00:29:49.740
So it's pretty interesting, right?

00:29:49.740 --> 00:29:50.800
Yeah.

00:29:50.800 --> 00:29:52.580
I'm curious to look at some of this stuff.

00:29:52.580 --> 00:29:55.500
Like, how clean is your code?

00:29:55.500 --> 00:30:00.900
How many AWS keys will be in there?

00:30:00.900 --> 00:30:01.480
We'll find out.

00:30:02.480 --> 00:30:04.480
Thanks indirectly, Kenneth, for that.

00:30:04.480 --> 00:30:05.400
One more.

00:30:05.400 --> 00:30:13.020
Remember last week I talked about the PySimple GUI and it's switching to a commercial license,

00:30:13.020 --> 00:30:17.800
which, again, I'm not super against, but sort of the rug pull aspect of it.

00:30:17.800 --> 00:30:21.640
Like, hey, it's open source for a long time and we're going to take everybody's contributions

00:30:21.640 --> 00:30:23.780
and then, you know, change the license.

00:30:23.780 --> 00:30:27.800
That sort of thing got some people's nerves up.

00:30:27.800 --> 00:30:36.800
Well, FFalcon31415 on Mastodon pointed out, hey, check out FreeSimple GUI, which I linked

00:30:36.800 --> 00:30:42.760
to in the show notes, which is an actively maintained fork of the last release of PySimple GUI with

00:30:42.760 --> 00:30:43.860
an open source license.

00:30:44.000 --> 00:30:47.480
So if you were like, oh, I was going to use that, you still can.

00:30:47.480 --> 00:30:49.420
Yeah.

00:30:49.420 --> 00:30:58.920
Actually, it's got a really good, the read me on that has some really good to like, has some good tutorial examples of how to write a simple GUI on it.

00:30:59.000 --> 00:31:06.060
So not only is it the open source free version, but it's also some pretty good documentation on there.

00:31:06.060 --> 00:31:07.560
Cool.

00:31:07.560 --> 00:31:09.540
All right.

00:31:09.540 --> 00:31:10.960
How about some jokes?

00:31:10.960 --> 00:31:11.860
Yeah.

00:31:11.860 --> 00:31:12.880
Joke time.

00:31:12.880 --> 00:31:13.700
A singular joke.

00:31:13.700 --> 00:31:14.420
A singular joke.

00:31:14.420 --> 00:31:18.680
So this one is kind of a meme with Will Smith.

00:31:18.680 --> 00:31:21.400
And it doesn't really have that much to do with Will Smith.

00:31:21.400 --> 00:31:22.520
I think it's just the attitude.

00:31:23.480 --> 00:31:24.260
I like Will Smith.

00:31:24.260 --> 00:31:28.840
Anyway, it says, just because I know Java doesn't mean I know JavaScript.

00:31:28.840 --> 00:31:32.040
I mean, I do, but not because I know Java.

00:31:32.040 --> 00:31:35.120
That's good, right?

00:31:35.120 --> 00:31:35.860
Yeah.

00:31:35.860 --> 00:31:37.000
Yeah.

00:31:37.000 --> 00:31:46.540
I was just talking to, whenever you talk to kids trying to learn like software, it's still confusing to people.

00:31:46.540 --> 00:31:49.200
I mean, like, it's not confusing to us because we've been around it.

00:31:49.200 --> 00:31:50.660
We knew the history.

00:31:50.660 --> 00:31:59.900
But it seems weird now to tell people, yeah, the JavaScript that everybody uses, it was named that because Java was popular at the time.

00:31:59.900 --> 00:32:05.160
So, anyway.

00:32:05.160 --> 00:32:12.020
Are you muted?

00:32:12.020 --> 00:32:14.540
I was, sorry.

00:32:14.540 --> 00:32:17.420
Fun episode as always, Brian.

00:32:17.420 --> 00:32:18.280
Yeah, fun.

00:32:18.280 --> 00:32:18.860
And, yeah.

00:32:18.860 --> 00:32:19.660
Thanks, man.

00:32:19.660 --> 00:32:20.620
Thanks for being here.

00:32:20.620 --> 00:32:21.240
Thanks.

00:32:21.240 --> 00:32:30.380
Now, those of you who are here on YouTube, before you take off, if you're watching this, especially if you're watching afterwards, the replay of this one,

00:32:30.380 --> 00:32:34.020
consider hitting the subscribe button if you're not.

00:32:34.020 --> 00:32:42.700
Brian, we just passed 4,000 subscribers, which for YouTube is pretty good for us, given that our main focus is podcasting, not YouTube itself.

00:32:42.700 --> 00:32:49.340
So, if you want to get notified about this and other episodes and see more of it, please hit the subscribe button.

00:32:49.340 --> 00:32:51.580
And with that, we will see you all later.

00:32:51.580 --> 00:32:52.200
All right.

00:32:52.200 --> 00:32:52.660
Bye.

00:32:52.660 --> 00:32:53.360
Bye.

00:32:53.360 --> 00:32:54.360
Bye.

00:32:54.360 --> 00:33:24.340
Thank you.

