WEBVTT

00:00:02.300 --> 00:00:09.540
Oh, we're live. Hey, Michael. It's exciting to do another Python Bytes with you.

00:00:10.460 --> 00:00:10.840
As always.

00:00:11.580 --> 00:00:14.640
Welcome, everybody. Thanks for showing up. Let's kick it off.

00:00:16.640 --> 00:00:27.440
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is episode 443, recorded August 4th, 2025. And I'm Brian Okken.

00:00:27.980 --> 00:00:28.700
And I'm Michael Kennedy.

00:00:30.060 --> 00:00:35.580
And you can reach us on the socials on Blue Sky or Mastodon.

00:00:36.120 --> 00:00:41.480
Check out the show notes or the website, pythonbytes.fm, to find all those links.

00:00:42.540 --> 00:00:48.800
And if you'd like to watch us live, you can check out pythonbytes.fm/live.

00:00:49.360 --> 00:00:52.240
And it's usually Mondays at 10 a.m. Pacific time.

00:00:52.840 --> 00:00:58.300
But you can go there to link to the YouTube channel to get all the older episodes as well.

00:00:59.780 --> 00:01:22.940
and this episode we have ours is sponsored by you guys by the offerings that both Michael and I have and you're supporting us through that really helps us going to getting courses, buying books that's pretty much it also Patreon so thanks Patreon people anyway let's kick it off

00:01:23.710 --> 00:01:24.300
what you got Michael?

00:01:24.960 --> 00:01:31.560
I have something sent in from Owen Lamont.

00:01:31.620 --> 00:01:33.360
And so, Owen, thank you for sending this in.

00:01:34.240 --> 00:01:44.340
I believe we've talked about Markdown formatting stuff before, but I want to look at this one because it's got some rough vibes.

00:01:44.780 --> 00:01:47.460
R-U-F-F, not R-O-U-G-H.

00:01:49.240 --> 00:01:55.220
Rough vibes in that it's a formatter written in Rust, seems insanely fast.

00:01:56.340 --> 00:02:04.800
And even though it's a general purpose thing and it's written in Rust, it has special love for the Python people.

00:02:06.200 --> 00:02:12.860
So there's a PyPI wrapper, basically a wheel that wraps up the commands going to it.

00:02:13.800 --> 00:02:19.600
So you can pip install it, uv pip install it, more importantly uv tool install.

00:02:20.240 --> 00:02:24.420
It also has a pre-commit hook and pyproject.toml support.

00:02:26.240 --> 00:02:26.740
It's pretty neat, right?

00:02:27.480 --> 00:02:27.840
Yeah.

00:02:28.020 --> 00:02:30.100
I just ran it on a project I'm working on.

00:02:30.160 --> 00:02:32.460
And apparently-- what did it say?

00:02:32.560 --> 00:02:33.160
How many errors?

00:02:34.640 --> 00:02:34.860
14.

00:02:35.940 --> 00:02:41.540
14 errors I found in my-- and it will fix them in the similar way if you do a --fix, I believe.

00:02:42.660 --> 00:02:43.580
So that's pretty cool.

00:02:43.780 --> 00:02:47.280
High performance markdown formatter.

00:02:47.960 --> 00:02:53.120
So you can install it in lots of ways, but I would just uv tool install it.

00:02:54.800 --> 00:02:59.600
It has 54 linting rules, which are apparently common markdown issues.

00:03:01.359 --> 00:03:06.660
Like if I have a heading, there should be a line break between the heading and the content of that section.

00:03:08.280 --> 00:03:11.380
You can fix most of them with --fix, like I said, which is beautiful.

00:03:11.940 --> 00:03:13.260
No dependencies, single binary.

00:03:16.200 --> 00:03:25.460
Highly configurable, which is great because a lot of the warnings I get when I run it are this line length of 102 exceeds the 80 character limit.

00:03:26.560 --> 00:03:34.580
I don't know, when do people, when do we move on from the 80 character limit in things, Python and other?

00:03:35.220 --> 00:03:38.040
I have a 4K monitor, 32 inch 4K monitor.

00:03:38.080 --> 00:03:42.140
If I put stuff in 80 columns, it's like on the left.

00:03:42.220 --> 00:03:44.940
And the 80 columns is like, well, that's the default size of a terminal.

00:03:45.200 --> 00:03:48.380
Okay, is that where most of our markdown is done?

00:03:48.920 --> 00:03:50.760
Probably not, but I don't know.

00:03:51.860 --> 00:03:53.480
I'd say make it long and let it wrap.

00:03:53.700 --> 00:03:58.540
The reason I don't like that rule particularly for Markdown is I use Typeora, which I love.

00:04:00.140 --> 00:04:08.700
But Typeora, it keeps a little more of the formatting visually there.

00:04:08.740 --> 00:04:17.380
So even if I was to do the Markdown and render it to a web page or to a PDF, the line breaks would disappear because you have to have two line breaks, right?

00:04:17.459 --> 00:04:18.239
Like a blank line.

00:04:19.299 --> 00:04:21.140
But in Typeora, while you're editing it, you see them.

00:04:21.579 --> 00:04:23.120
And so you would see chunks.

00:04:23.640 --> 00:04:27.700
So if I make my editor wider, it stops going.

00:04:28.440 --> 00:04:36.340
If I make it skinnier, though, then it has weird half line breaks because it's wrapping the 80 lines to 60, and then there's 20 more.

00:04:36.980 --> 00:04:38.820
It's just-- I hate that rule.

00:04:39.190 --> 00:04:40.900
So why am I ranting so much?

00:04:41.340 --> 00:04:42.460
Well, because I rant, apparently.

00:04:43.020 --> 00:04:44.900
But it's also super configurable.

00:04:45.010 --> 00:04:47.900
So you can go to a TML file down here.

00:04:49.380 --> 00:05:38.100
once you find it in here it gives us a bunch of examples I think about the top here there and you can go in here and gives you examples like I can say disable rule MD 0 13 or in my case yes that's the one of course it's 13 it's unlucky but you can also configure the rules like say rule 7 is about indentation how many characters how many spaces do you want to indent by or different things right don't apply the line length considerations to code blocks or tables but override the line length to be 100 again I'm turning that off but still I guess I could set it to infinity that would be fine all right but

00:05:38.180 --> 00:05:44.480
isn't this cool yeah it is really cool I want to jump on the line like bandwagon a little bit here though. Let's do it.

00:05:46.000 --> 00:06:03.140
I agree. I'm glad this is configurable because in writing a book or something or a tutorial, I'm going to have long paragraphs and I'd rather have those just wrap and I don't want to limit my line length. So I would turn that off if I'm writing long form stuff.

00:06:03.680 --> 00:06:05.020
Yeah, I'm thinking of my blog posts

00:06:05.300 --> 00:06:06.540
and things like that, right?

00:06:06.980 --> 00:06:14.980
Yeah. But for the markdown in a project, even if it's a documentation project, in maybe, I guess.

00:06:15.090 --> 00:06:20.820
I can see it for like readmes or something or things that are changing a lot because you're doing diffs more.

00:06:21.360 --> 00:06:25.540
You do have to be aware of the diffs.

00:06:25.680 --> 00:06:29.400
But I think diff tools deal with word wrap fine now.

00:06:29.740 --> 00:06:31.140
So anyway, I don't know.

00:06:31.800 --> 00:06:32.640
Yeah, that's a fair issue.

00:06:32.920 --> 00:06:33.180
Fair point.

00:06:34.120 --> 00:06:36.100
But if you got long form writing,

00:06:36.370 --> 00:06:37.200
it doesn't make sense.

00:06:37.640 --> 00:06:38.760
Yeah, it doesn't make sense at all.

00:06:40.320 --> 00:06:40.700
That's weird.

00:06:40.720 --> 00:06:41.900
It's not like in Word.

00:06:42.760 --> 00:06:44.800
Google Docs, like, where do you want to break your lines?

00:06:44.830 --> 00:06:46.740
Like, no, I want it to just go across the page.

00:06:46.770 --> 00:06:47.820
Can we just let me write?

00:06:48.880 --> 00:06:49.080
Yeah.

00:06:50.840 --> 00:06:51.980
But it's super cool.

00:06:52.170 --> 00:06:54.620
You can, like I said, uv tool install it.

00:06:54.620 --> 00:06:56.320
It even has instructions for uv.

00:06:57.200 --> 00:06:59.300
Or you can use uv tool run.

00:07:00.360 --> 00:07:03.960
And so you could run it without even actually installing it just to test out how it might go.

00:07:04.780 --> 00:07:04.980
Yeah.

00:07:05.350 --> 00:07:09.640
So do you know what the biggest mistake is you usually make for Markdown?

00:07:10.220 --> 00:07:12.420
I haven't done enough messing with it yet.

00:07:12.640 --> 00:07:14.220
but I can report back to you.

00:07:14.780 --> 00:07:14.920
Okay.

00:07:15.700 --> 00:07:25.600
I haven't even used the tool yet, but I'm looking forward to trying it because the thing that always trips me up is a space before unordered list.

00:07:26.360 --> 00:07:45.760
So if you write a sentence with a colon and then you do a new line and then you start like do the asterisk or dash or something like that and start a list, some tools will automatically understand that you intended it to be a list, and some of them don't, and you just get a bunch of asterisks in a paragraph.

00:07:46.440 --> 00:07:49.140
So, yeah, I need something to fix that for me.

00:07:49.640 --> 00:07:49.880
Definitely.

00:07:51.880 --> 00:07:52.200
All right.

00:07:53.140 --> 00:07:54.340
On to the next topic.

00:07:55.800 --> 00:07:59.960
I want to talk about coverage because Ned Batchelder released...

00:08:00.720 --> 00:08:04.900
This is a blog post from the end of July, July 24th.

00:08:05.300 --> 00:08:08.340
Coverage 7.10.0 with Patch.

00:08:08.680 --> 00:08:14.960
So we're actually up to 7.10.2 now, but it's the patch that's like the super cool news.

00:08:16.340 --> 00:08:21.360
And I just read about this, and I am like really excited about it.

00:08:21.760 --> 00:08:24.920
So one of the things, it adds three things.

00:08:25.100 --> 00:08:36.659
So if we go to the change log, it's adding patch subprocess, patch execv, and patch exit or underscore exit or something.

00:08:37.320 --> 00:08:40.000
And I'll do the weird ones first.

00:08:40.460 --> 00:08:56.300
I don't really see execv around, but the issue with execv and exit is that that's a way, like something happens and your stuff gets torn down before coverage has a chance to write its stuff.

00:08:56.380 --> 00:08:57.900
It just like processes stop.

00:08:59.240 --> 00:09:01.100
And that's not cool.

00:09:01.120 --> 00:09:03.760
But with this, you can fix that.

00:09:04.060 --> 00:09:06.160
And there have been workarounds for these other things.

00:09:07.319 --> 00:09:34.420
and so that's not really the big news the big news i think is subprocess because there were ways to if you have if you're trying to run coverage on a project that has subprocesses you have to have some way to like cover all of those processes and then combine them later and there were ways to deal with it but it was a little clunky now um we've got uh we've got a way to do it right built in you just say patch equals subprocess and coverage does it for you.

00:09:35.300 --> 00:09:35.900
How cool is that?

00:09:36.140 --> 00:09:37.140
And multiprocessing.

00:09:37.320 --> 00:09:39.840
It'll count multiprocessing execution for coverage.

00:09:42.060 --> 00:09:42.460
Yes.

00:09:42.840 --> 00:09:43.020
Thank you.

00:09:43.160 --> 00:09:43.320
Thank you.

00:09:43.360 --> 00:09:43.900
Thank you, Ned.

00:09:44.959 --> 00:09:46.640
So I'm really excited about this.

00:09:46.800 --> 00:09:47.220
It's pretty cool.

00:09:48.699 --> 00:09:50.300
Anyway, that's it really.

00:09:50.880 --> 00:09:51.280
Awesome.

00:09:51.400 --> 00:09:52.700
Yeah, that's a really good one.

00:09:53.360 --> 00:09:53.920
Short and sweet.

00:09:55.260 --> 00:09:58.120
This one comes to us from Pat Decker, I believe.

00:09:58.520 --> 00:11:31.080
I hope I'm remembering that right because I forgot to write it down so it's when I'll send it in I apologize I'm pretty sure it's Pat sent this over and it's AIO Bodo 3 so Bodo 3 is the Python package to talk to things like s3 and other stuff in Amazon okay and AWS don't get me started on Bodo 3 it's a bit of a insane package the way it's created but what I want to about is AIO Boto3 which is a wrapper on top of Boto3 resources that leverages the AIO BotoCore async backend so what's going on from here it's a package by Terry Kane and she created I think to basically make higher level operations which you would use from the Boto3 level instead of the Boto core which is more low-level detailed interaction with AWS but there was a async low-level one but not an async high-level one and so now there's an async high-level and so for example do you want to work with s3 contents asynchronously well here you go so you can do things like create a session and then say async with go to a resource for s3 then await getting a bucket and and then loop over asynchronously with an async for across all the items in that bucket.

00:11:32.000 --> 00:11:42.740
So if you want to do a bunch of S3 type of work or DynamoDB or Kinesis, whatever, then you want to do that asynchronously, well, here you go.

00:11:43.420 --> 00:11:53.620
Also, she has an example of working with a DynamoDB table and reading and writing objects into it, which is pretty sweet.

00:11:56.499 --> 00:11:57.300
What's Kinesis?

00:11:58.580 --> 00:11:59.420
What is Kinesis?

00:11:59.580 --> 00:12:00.020
Good question.

00:12:01.280 --> 00:12:03.120
That's an AWS thing?

00:12:04.660 --> 00:12:04.940
Yeah.

00:12:05.580 --> 00:12:06.160
Looking that up.

00:12:06.200 --> 00:12:06.400
Kinesis.

00:12:06.840 --> 00:12:09.220
That's not how you spell it, but luckily.

00:12:10.319 --> 00:12:11.340
I just thought it was keyboard.

00:12:11.360 --> 00:12:17.480
It's a family of services provided by AWS for processing and analyzing real-time streaming data at a large scale.

00:12:17.560 --> 00:12:20.120
I'm glad you asked because this is what I've been working for a long time around.

00:12:22.040 --> 00:12:22.200
Okay.

00:12:22.820 --> 00:12:23.000
Sorry.

00:12:23.200 --> 00:12:28.220
Oh, apparently like data streaming, data lake, data processing, analytics.

00:12:28.440 --> 00:12:28.600
Okay.

00:12:30.100 --> 00:12:30.280
Got it.

00:12:32.140 --> 00:12:32.260
Cool.

00:12:32.440 --> 00:12:32.760
That's it.

00:12:32.760 --> 00:12:33.540
That's all I got to say about it.

00:12:33.620 --> 00:12:38.820
But if you're basically, if you're using Boto3 and you want to do async, AIO Boto3.

00:12:40.520 --> 00:12:40.920
All right.

00:12:41.180 --> 00:12:47.000
Well, I, sorry for the distraction, but I wanted to, yeah, anyway.

00:12:47.360 --> 00:12:48.420
I have a Kinesis keyboard.

00:12:48.700 --> 00:12:49.380
That's why I'm like, what?

00:12:49.880 --> 00:12:50.700
Yes, you do, don't you?

00:12:51.120 --> 00:12:51.300
Yeah.

00:12:52.140 --> 00:12:53.200
Tell people what it looked like.

00:12:54.480 --> 00:12:55.560
Put one up on the screen.

00:12:57.080 --> 00:12:58.560
Yeah, I was trying to look for one.

00:12:58.760 --> 00:12:59.400
Kinesis keyboard.

00:12:59.940 --> 00:13:00.180
Images.

00:13:02.740 --> 00:13:03.260
Oh, here we go.

00:13:03.959 --> 00:13:05.400
Did you find one?

00:13:06.040 --> 00:13:06.160
No.

00:13:08.580 --> 00:13:09.280
They are wild.

00:13:09.380 --> 00:13:10.180
I had one for a while.

00:13:10.260 --> 00:13:11.680
I'm like, I'm not sure I can do this.

00:13:12.540 --> 00:13:13.320
Oh, I love it.

00:13:13.440 --> 00:13:15.880
So I just did the image search.

00:13:16.260 --> 00:13:18.420
But yeah, they're split like this.

00:13:19.820 --> 00:13:21.040
And it's in there.

00:13:21.200 --> 00:13:24.940
And also your keys are in little divots.

00:13:25.340 --> 00:13:25.500
Yeah.

00:13:26.200 --> 00:13:28.360
Maybe if I could describe it for people, Ryan.

00:13:28.860 --> 00:13:30.560
Imagine you took an orange.

00:13:30.740 --> 00:13:32.020
You cut the orange in half.

00:13:32.640 --> 00:13:35.180
You took out the orange fleshy bit.

00:13:35.280 --> 00:13:38.980
And you lined the inside of the orange peel with keys.

00:13:39.460 --> 00:13:40.740
That's what typing on is like.

00:13:40.740 --> 00:13:42.240
You type into these round holes.

00:13:43.080 --> 00:13:43.260
Okay.

00:13:43.400 --> 00:13:46.040
But I would say coconuts maybe because it's bigger.

00:13:47.000 --> 00:13:50.280
Or like a coconut where you just work with the lower third and the top third.

00:13:51.620 --> 00:13:56.340
yeah but one of the things that's cool about these is they're in uh do you remember the men in black

00:13:56.480 --> 00:14:04.620
movie oh yeah yeah well i did till they flashed me but you know well the men in black movie had um

00:14:04.760 --> 00:14:45.380
if you the office scene in the first first uh one um everybody's weren't using kinesis it's pretty cool were they okay how awesome yeah all right um i i'm gonna i wasn't gonna talk about keyboards but uh what am i talking about i want to talk about you might not need a python class by adam grant so i um i think we've probably talked about this before but it's worth reminding people because there's a lot of people that come in to python from other languages and uh classes are used a lot in other languages and you don't really have to use them here so much so i'm just going to of run through some of the options.

00:14:45.580 --> 00:14:52.300
One is for simple data containers, think about named tuples, which are great, or data classes.

00:14:53.360 --> 00:14:57.340
Actually, I'd probably data class first, and then if it's not quite right, named tuple.

00:14:57.680 --> 00:15:02.000
But here's an example of somebody doing a custom class with point.

00:15:02.080 --> 00:15:06.820
And also, the intending is wrong here, Adam, but oh well.

00:15:08.280 --> 00:15:12.940
Anyway, examples of how to use that with a named tuple, or just a data class.

00:15:13.320 --> 00:15:15.760
So it works pretty good.

00:15:15.770 --> 00:15:17.380
You don't usually have to create your own classes.

00:15:18.220 --> 00:15:18.480
All right.

00:15:19.010 --> 00:15:20.540
I don't really see that very much.

00:15:20.540 --> 00:15:29.080
Also, if you're creating a class with a static variable, there's a really good chance that should just be a module level variable.

00:15:29.960 --> 00:15:35.820
Modules themselves often can behave in the same way that people do classes.

00:15:35.850 --> 00:15:38.540
Like I want to group the functions together and have some shared data.

00:15:39.460 --> 00:15:40.100
That's a module.

00:15:40.500 --> 00:15:40.960
Exactly.

00:15:41.710 --> 00:15:41.820
Exactly.

00:15:42.600 --> 00:15:54.820
Yeah, so that's one thing that's not in this, but one of the things I've taught people for a long time is if you think you need a singleton pattern in Python, it's just a module.

00:15:55.000 --> 00:15:55.380
Just do a module.

00:15:55.380 --> 00:15:56.180
Yeah, 100%.

00:15:58.860 --> 00:16:03.160
And if you're afraid of global data in Python, it's not really global.

00:16:03.340 --> 00:16:07.720
It's just global to the, yes, it's accessible to anything, but it's just module global.

00:16:08.200 --> 00:16:09.800
It's not a big deal.

00:16:10.100 --> 00:16:11.940
Anyway, examples with points.

00:16:12.420 --> 00:16:14.660
but there's some surprising stuff in here.

00:16:15.340 --> 00:16:17.520
Stateless utility functions just use functions.

00:16:17.670 --> 00:16:20.940
And here's a, yeah, this is somebody that must have came from.

00:16:22.500 --> 00:16:26.940
If everything's a static, like you said, if everything's a static method, then it doesn't need to be there.

00:16:27.120 --> 00:16:27.860
Just make it a function.

00:16:29.580 --> 00:16:31.440
Grouping constants also use modules.

00:16:32.680 --> 00:16:42.160
Well, there's also enums that you can do, but anyway, yeah, if you're just having some constants and you're trying to group them together, just put them in a module.

00:16:44.260 --> 00:16:45.980
For some reason, this freaks people out sometimes.

00:16:46.340 --> 00:16:48.360
And I think it's just the people that are new to Python.

00:16:48.940 --> 00:16:52.540
Yeah, I think, I mean, I came from C#,

00:16:52.700 --> 00:16:56.760
which had a lot of class, very much, like everything had to be in a class at the time

00:16:56.840 --> 00:16:58.460
that I was doing it, like literally everything.

00:16:59.120 --> 00:17:01.800
So I was very much in that space, but I've moved on.

00:17:01.920 --> 00:17:04.980
Also, on the constants, I agree.

00:17:05.720 --> 00:17:08.740
But maybe throw in a typing final of type.

00:17:08.910 --> 00:17:10.500
So they've got like a host and a port.

00:17:10.520 --> 00:17:23.420
you could have a typing dot final bracket stir and a typing dot final bracket int oh yeah yeah so yeah like don't edit this don't edit it yeah unless you're meant to but the way they say

00:17:23.420 --> 00:17:29.880
the word constant that probably means not so much changing yeah but also having it in a class and

00:17:29.880 --> 00:17:35.620
it stopped people from changing it either no at least you get a warning yeah tells you you're bad

00:17:35.640 --> 00:17:36.880
if you want to be bad.

00:17:38.520 --> 00:17:42.820
Managing state with simple structures, use dictionaries or lists, definitely.

00:17:44.260 --> 00:17:51.480
A lot of this, the gist is, Python has a lot of built-in stuff that you can just learn how to use dictionaries and lists well.

00:17:52.460 --> 00:17:53.680
It'll take care of a lot of stuff.

00:17:54.600 --> 00:17:55.740
This one is surprising to me.

00:17:55.860 --> 00:17:59.040
Simple one-off operations, use lambdas or comprehensions.

00:17:59.780 --> 00:18:06.520
I mean, sure, the example works for a lambda and comprehension, but also you could just use a function.

00:18:06.620 --> 00:18:10.160
If you're going to grab a Lambda, you could just write a function.

00:18:10.600 --> 00:18:12.720
But yeah, Lambdas are great.

00:18:14.680 --> 00:18:17.800
Avoiding complexity, use built-in libraries.

00:18:18.300 --> 00:18:19.260
Don't reinvent the wheel.

00:18:20.380 --> 00:18:24.740
There's probably something that is an example with config parser or JSON.

00:18:25.300 --> 00:18:27.260
They usually, they can do a lot.

00:18:28.100 --> 00:18:28.280
Yeah.

00:18:29.240 --> 00:18:34.780
And then I'm glad we tie into your first topic.

00:18:35.480 --> 00:18:37.140
When you actually need a class.

00:18:37.340 --> 00:18:41.180
Well, there's a bulleted list, but they didn't do a new line.

00:18:41.380 --> 00:18:45.540
So I'm pretty sure it was a markdown that didn't get converted correctly.

00:18:47.460 --> 00:18:48.020
Anyway.

00:18:49.380 --> 00:18:51.980
And I'd like to add, what are my additions?

00:18:52.260 --> 00:18:54.760
If you think you need a class, you probably don't.

00:18:55.320 --> 00:19:01.400
If you really do think you do, ask a friend because friends don't let friends create extraneous classes in Python.

00:19:02.480 --> 00:19:06.360
And then if you think you're the exception, it probably isn't an exception.

00:19:08.190 --> 00:19:16.900
And then finally, I'd like to say, if you think you need data classes, but data classes aren't quite padding it for you, check out Adders.

00:19:17.120 --> 00:19:18.980
Adders is still around and Adders is awesome.

00:19:19.720 --> 00:19:19.920
Yeah.

00:19:20.770 --> 00:19:21.320
Or Pydantic.

00:19:22.480 --> 00:19:23.260
Yeah, or Pydantic.

00:19:24.740 --> 00:19:26.260
The when you actually need a class?

00:19:26.420 --> 00:19:27.760
Yeah, I agree with this.

00:19:28.300 --> 00:19:28.720
I like it.

00:19:29.300 --> 00:19:29.700
Yeah.

00:19:30.020 --> 00:19:31.100
Well, so what did he say?

00:19:31.120 --> 00:19:40.940
He said, if you need to encapsulate state or behavior, yes, but also you could use a data class or a module.

00:19:41.520 --> 00:19:41.820
Yeah.

00:19:43.100 --> 00:19:52.640
If your objects have clear behavior method, behavior slash methods associated with their data and you're modeling complex hierarchical structures.

00:19:53.440 --> 00:19:53.880
Yeah.

00:19:53.880 --> 00:19:54.620
Yeah, I'm thinking the middle one.

00:19:54.700 --> 00:20:05.380
If you have data that is tied to an instance of the class, you need to have multiple ones of those and the methods operate on that particular data.

00:20:05.860 --> 00:20:07.320
I mean, that's when you need it, right?

00:20:07.440 --> 00:20:10.300
Not for all the other jumps and hoops people used to use it for.

00:20:10.680 --> 00:20:21.500
And as far as inheritance hierarchies go, since I've been using Python, I have multiple times created class hierarchies and then regretted it.

00:20:21.940 --> 00:20:27.820
I don't think I have any that were legitimate reasons to use a class hierarchy.

00:20:28.990 --> 00:20:45.440
But also, after using Python so much, I don't recreate class hierarchies in C++ much anymore either because I like using containment instead of inheritance, I think is a cleaner model.

00:20:46.370 --> 00:20:46.880
So anyway.

00:20:47.430 --> 00:20:49.920
Yeah, that's composition over inheritance indeed.

00:20:51.020 --> 00:20:51.360
That's it.

00:20:51.460 --> 00:20:52.020
Goes a long way.

00:20:53.860 --> 00:20:54.180
All right.

00:20:55.360 --> 00:20:56.040
Those are our topics.

00:20:56.820 --> 00:20:58.340
Do you have any extras?

00:21:00.240 --> 00:21:01.900
I have at least one extra.

00:21:02.200 --> 00:21:03.260
Let's see what I can do about that.

00:21:04.120 --> 00:21:17.780
So this Thursday, as in three days from now, 8 o'clock Pacific time, I will be doing a live webcast with Will Vincent from PyJar.

00:21:18.360 --> 00:21:18.560
Yeah.

00:21:18.700 --> 00:21:23.860
So we're talking about basically uv, what is uv, all the way that you can apply to your projects.

00:21:25.360 --> 00:21:26.320
Should be a lot of fun.

00:21:26.580 --> 00:21:27.680
I'm really looking forward to it.

00:21:28.030 --> 00:21:29.500
I wasn't entirely sure what we were going to cover.

00:21:29.940 --> 00:21:30.980
Will and I talked about it today.

00:21:31.240 --> 00:21:32.180
We have a bunch of great ideas.

00:21:33.440 --> 00:21:33.600
Cool.

00:21:35.360 --> 00:21:42.440
So if you want to see uv in action, we talked about that post from Armin Roenaker a few months ago or whatever.

00:21:43.160 --> 00:21:44.440
Why are you not using UV?

00:21:45.800 --> 00:21:46.780
If you're not, why?

00:21:47.440 --> 00:21:48.420
A lot of people are like, what's UV?

00:21:48.680 --> 00:21:51.080
or it's too hard to move from or it doesn't, whatever.

00:21:51.720 --> 00:21:53.760
We'll kind of address all that kind of stuff.

00:21:54.040 --> 00:21:59.540
Plus, maybe some fun Docker things, some performance things, all over the place.

00:22:00.060 --> 00:22:00.520
Awesome.

00:22:01.900 --> 00:22:02.260
Yep.

00:22:03.200 --> 00:22:05.260
I have a couple extras.

00:22:06.020 --> 00:22:06.600
All right.

00:22:07.340 --> 00:22:13.140
So first off, this was sent to us by listener John Hagen.

00:22:14.440 --> 00:22:19.040
The PyPI blog has an incident report about a phishing attack.

00:22:19.290 --> 00:22:24.080
So apparently there was some targeted phishing emails.

00:22:26.320 --> 00:22:41.460
There were some, and I didn't read this that closely, but it's creepy because it was a phishing attack that involved a fake PyPI that had a phishing domain that was in the middle.

00:22:42.280 --> 00:22:51.600
So if somebody clicked on the link, it all behaved just like PyPI, but there was somebody in the middle capturing stuff.

00:22:53.000 --> 00:22:54.080
That's really creepy.

00:22:55.200 --> 00:22:55.560
What was it?

00:22:55.560 --> 00:23:01.260
It involved the fact that in some fonts, I and J look identical.

00:23:02.380 --> 00:23:06.440
So it was a pypj.org domain.

00:23:08.420 --> 00:23:08.760
Yikes.

00:23:09.280 --> 00:23:11.880
Anyway, I just wanted to have people aware of that.

00:23:12.260 --> 00:23:15.720
It was apparently found and fixed relatively quickly.

00:23:16.290 --> 00:23:21.660
There were, I guess, four user accounts successfully phished.

00:23:23.320 --> 00:23:24.860
They're either disabled.

00:23:25.310 --> 00:23:29.700
So what is the, right, there's some recommendations, takeaways, calls to action.

00:23:30.740 --> 00:23:36.160
If you have a dormant PyPI account, so if you have a PyPI account you're not really using, consider removing it.

00:23:36.650 --> 00:23:39.560
You can always create another one if you need to later.

00:23:40.280 --> 00:24:06.740
if you have an older PipeEI account and you're not using 2FA yet please sign up for that even if you only pop in once a year make it more secure be good and use web often via browser hardware security or hardware security keys wow I don't even know it is that just web authentication I don't know I think it's like YubiKey type stuff

00:24:09.019 --> 00:25:28.299
okay do it though so i don't know that one i'm all about the 2fa and i'm all about the 45 character password but i'm not doing what about it 45 characters wow or whatever like i've i'm so frustrated there's so many websites out there that you'll you'll set like i used to have a default i think it maybe was 36 and one password for randomly generating a password i'm like that should be that should pretty much stop it you know what i mean right um and god forbid there's like a moment or two where you've got to type it in um like for example on windows if you get a new system you got to log into your microsoft account before you get into the system the first boot or something like oh god i got to type it so you don't want it to be like come up you know paragraph but so many websites go no your characters have to be your your passwords have to be less than 16 characters or less than 12 characters i think my bank would limit it to like less than 10 i'm like my bank what is wrong with you people like if anybody should accept that you know a big password but it's a tech support like well somebody's going to say they're locked out of their account because somebody put a long password and they can't type it in or you know what gives me crappy reasons oh

00:25:28.600 --> 00:25:42.500
What gets me is when people, like passwords get, when they exclude common characters like colon or quote mark, or I'm like, really, your system is not able to handle colons in a password?

00:25:42.780 --> 00:25:44.400
That's just like insane.

00:25:45.100 --> 00:25:45.300
Anyway.

00:25:45.880 --> 00:25:46.520
Yeah, I agree.

00:25:47.420 --> 00:25:48.020
Yeah, I agree.

00:25:48.740 --> 00:25:49.360
But anyway.

00:25:49.710 --> 00:25:51.440
Okay, so phishing attack.

00:25:51.800 --> 00:25:53.620
I've got a couple other quick extras.

00:25:53.860 --> 00:26:00.240
I do have some, I'm not dedicated to the weekly testing code, but lately it's been weekly.

00:26:00.500 --> 00:26:05.440
So testing code, I got a couple, had an interview with Adam Johnson that was two topics.

00:26:05.640 --> 00:26:06.740
We split it into two episodes.

00:26:07.400 --> 00:26:08.320
Both are now available.

00:26:08.400 --> 00:26:10.540
We had pytest Django that we talked about.

00:26:11.600 --> 00:26:13.860
And then we talked about Git tips for testing.

00:26:14.060 --> 00:26:24.060
And the top, especially some of the stuff on the get diff, get stash, and get bisect sections are pretty interesting.

00:26:25.820 --> 00:26:27.340
So some good stuff there.

00:26:28.280 --> 00:26:28.800
Yeah, very nice.

00:26:29.460 --> 00:26:30.380
And those are my extras.

00:26:32.000 --> 00:26:32.380
All right.

00:26:32.980 --> 00:26:33.600
Do you have a joke?

00:26:34.300 --> 00:26:34.880
I do.

00:26:35.090 --> 00:26:38.360
But this joke, you know how they say jokes are not funny if you've got to explain them.

00:26:38.620 --> 00:26:39.420
I'm going to explain this anyway.

00:26:40.920 --> 00:26:42.560
But not the joke itself.

00:26:42.840 --> 00:26:48.520
I'm going to explain the foundational information people need to know.

00:26:48.870 --> 00:26:54.540
So a lot of times people say these days, Brian, they say, Visual Studio, I'm using, like, what editor do you use?

00:26:54.560 --> 00:26:55.500
Oh, I use Visual Studio.

00:26:56.040 --> 00:26:57.240
They're not using Visual Studio.

00:26:57.460 --> 00:27:00.200
They're using something called Visual Studio Code or VS Code, right?

00:27:00.880 --> 00:27:01.020
Yeah.

00:27:01.200 --> 00:27:05.480
There is, there has been since the 90s, an editor called Visual Studio.

00:27:06.980 --> 00:27:08.500
It is not Visual Studio Code.

00:27:08.560 --> 00:27:10.380
It is a beast of a beast.

00:27:10.420 --> 00:27:13.100
It's like a five gig download.

00:27:15.320 --> 00:27:16.860
It manages Azure.

00:27:18.700 --> 00:27:19.540
It does database.

00:27:20.580 --> 00:27:22.240
It does team foundation server.

00:27:22.320 --> 00:27:23.520
It does like all this stuff.

00:27:23.520 --> 00:27:25.540
It's like a really heavyweight editor.

00:27:26.460 --> 00:27:33.180
And VS Code was basically created to make a lightweight little editor that is not Visual Studio proper, right?

00:27:33.600 --> 00:27:33.860
Yeah.

00:27:34.400 --> 00:27:34.620
All right.

00:27:34.700 --> 00:27:39.760
So I got to just set that up because I know a lot of people, especially younger folks, Visual Studio is Visual Studio Code.

00:27:40.020 --> 00:27:42.200
But now, are you ready for the joke?

00:27:42.940 --> 00:27:43.080
Yeah.

00:27:43.740 --> 00:27:44.340
All right, let's do it.

00:27:46.160 --> 00:27:49.180
So there's a nurse talking to a guy.

00:27:49.900 --> 00:27:53.220
He says, do you have any history of mental illness in your family?

00:27:54.060 --> 00:27:55.520
The guy looks over as well.

00:27:56.340 --> 00:28:00.300
My brother uses Visual Studio 2022 as a default text editor.

00:28:08.680 --> 00:28:09.340
Yeah, that's good.

00:28:09.640 --> 00:28:10.260
It's pretty good, right?

00:28:10.940 --> 00:28:11.240
Pretty good.

00:28:11.380 --> 00:28:13.940
Because that thing's big and it's slow to start and it's like ridiculous.

00:28:16.740 --> 00:28:18.020
Default text file editor.

00:28:18.740 --> 00:28:19.600
Yeah, that's the joke.

00:28:19.760 --> 00:28:20.320
That's what I got you.

00:28:22.260 --> 00:28:26.340
So I haven't had to use Visual Studio for a while, but we did use to.

00:28:26.640 --> 00:28:28.340
I was using it for compiling stuff.

00:28:28.700 --> 00:28:32.180
And I can't remember what the shortcode was for compiling.

00:28:32.260 --> 00:28:35.080
It was like F7 or F11 or F2.

00:28:35.960 --> 00:28:38.540
One of the F keys was just to compile.

00:28:39.300 --> 00:28:42.800
And so whenever anybody asks me, do you use Visual Studio?

00:28:43.360 --> 00:28:49.700
I'm like, just as a really big thing to hit F7 with or whatever.

00:28:49.940 --> 00:28:51.000
Yeah, yeah, yeah, yeah.

00:28:52.420 --> 00:28:54.020
Yeah, and it's true.

00:28:54.040 --> 00:28:57.400
I would edit in like way back in the day.

00:28:57.400 --> 00:29:00.640
It was before Visual Studio or VS Code.

00:29:01.300 --> 00:29:06.580
So I was probably editing in like Vim or Sublime or something like that.

00:29:06.980 --> 00:29:08.980
And then I'd have Visual Studio off to the side.

00:29:09.520 --> 00:29:14.400
and I would just like go over to it and hit the key to compile and then go back to my day.

00:29:15.120 --> 00:29:17.980
But yeah, it's what it is.

00:29:18.280 --> 00:29:19.200
This is a good one.

00:29:19.250 --> 00:29:19.660
I like it.

00:29:20.800 --> 00:29:21.440
I do too.

00:29:21.680 --> 00:29:23.580
I used to use Visual Studio and I enjoyed it.

00:29:23.580 --> 00:29:24.480
I thought it did cool stuff.

00:29:24.570 --> 00:29:27.220
But as a default text editor for just a simple file,

00:29:27.340 --> 00:29:28.600
that is not what it was for.

00:29:29.540 --> 00:29:33.880
Yeah, I had people like composing their email in Visual Studio.

00:29:34.460 --> 00:29:35.180
Oh my gosh.

00:29:35.680 --> 00:29:35.860
Really?

00:29:36.080 --> 00:29:37.240
This is what you know?

00:29:37.490 --> 00:29:37.580
Okay.

00:29:38.480 --> 00:29:38.780
All right.

00:29:39.040 --> 00:29:39.220
Fair?

00:29:39.900 --> 00:29:43.060
Well, I mean, they probably do have a history of mental illness then.

00:29:43.620 --> 00:29:44.520
I think so.

00:29:45.400 --> 00:29:48.460
Then they open up Outlook and send it, and you know for sure there's something going on there.

00:29:50.780 --> 00:29:51.660
Yeah, Outlook.

00:29:52.960 --> 00:29:53.300
Exactly.

00:29:53.480 --> 00:30:00.060
The only thing on my desktop that if I hit Control-F, it doesn't find stuff.

00:30:00.130 --> 00:30:01.180
It forwards an email.

00:30:02.720 --> 00:30:03.260
Yeah, exactly.

00:30:08.260 --> 00:30:10.400
Well, excellent episode again.

00:30:10.780 --> 00:30:11.160
Thanks, Michael.

00:30:11.760 --> 00:30:12.680
Thanks, everybody, for listening.

00:30:13.250 --> 00:30:13.560
You bet.

00:30:13.810 --> 00:30:14.140
See you later.

00:30:14.390 --> 00:30:14.680
Bye, everyone.

00:30:14.820 --> 00:30:14.940
Bye.

