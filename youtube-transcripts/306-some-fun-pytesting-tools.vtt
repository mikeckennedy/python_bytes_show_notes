WEBVTT

00:00:00.000 --> 00:00:09.520
Hey YouTube. Hey Brian. Hey. How you doing? I'm good. Good. Glad to hear it. I'll kick


00:00:09.520 --> 00:00:13.760
this thing off. Yeah, sure. All right, everyone. Thanks for being here live. If you're watching


00:00:13.760 --> 00:00:20.920
later. Thanks for catching up afterwards. Hello and welcome to Python bites where we


00:00:20.920 --> 00:00:28.160
deliver Python news and headlines directly to your earbuds. This is episode 306 recorded


00:00:28.160 --> 00:00:31.280
October 18th, 2022. I'm Michael Kennedy.


00:00:31.280 --> 00:00:32.680
And I'm Brian Okken.


00:00:32.680 --> 00:00:38.200
And very exciting to have a whole bunch of things to share


00:00:38.200 --> 00:00:41.080
this week. Also want to say thank you to Microsoft for


00:00:41.080 --> 00:00:43.920
startups for sponsoring yet another episode this one.


00:00:43.920 --> 00:00:51.480
Brian, we've had a very long dry summer here in Oregon. And I was


00:00:51.480 --> 00:00:55.520
afraid that we would have like terrible fires and be all smoky


00:00:55.520 --> 00:00:58.080
and all sorts of badness. And there've been plenty of fires in


00:00:58.080 --> 00:01:00.560
in the West, but not really around here for us this summer.


00:01:00.560 --> 00:01:03.080
We kind of dodged the bullet until like today.


00:01:03.080 --> 00:01:04.080
>> That's a little smoke.


00:01:04.080 --> 00:01:07.440
>> Like the forecast is literally smoke, go inside.


00:01:07.440 --> 00:01:08.640
>> Yeah.


00:01:08.640 --> 00:01:10.520
>> I thought we dodged it, but sadly, no.


00:01:10.520 --> 00:01:13.400
>> So I think it's affecting my voice a little bit.


00:01:13.400 --> 00:01:15.040
So apologies for that.


00:01:15.040 --> 00:01:16.600
>> We'll put that filter on you,


00:01:16.600 --> 00:01:18.280
and we'll make you sound like someone else,


00:01:18.280 --> 00:01:19.520
and you'll be fine.


00:01:19.520 --> 00:01:21.000
>> Yeah.


00:01:21.000 --> 00:01:23.600
>> Yeah, it's also affecting me, so who knows.


00:01:23.600 --> 00:01:27.080
But anyway, we'll make our way through.


00:01:27.080 --> 00:01:31.400
we will fight through the fire to bring you the Python news.


00:01:31.400 --> 00:01:34.280
Hopefully they get that actually put out soon.


00:01:34.280 --> 00:01:35.480
- Like the post office.


00:01:35.480 --> 00:01:36.800
- Yeah, let's kick it off.


00:01:36.800 --> 00:01:38.320
What's your first thing?


00:01:38.320 --> 00:01:40.640
- So I've got, let's put it up.


00:01:40.640 --> 00:01:44.200
So I've got, I had to stream.


00:01:44.200 --> 00:01:46.280
I've got awesome pytest speedup.


00:01:46.280 --> 00:01:48.120
So this is-- - Awesome.


00:01:48.120 --> 00:01:48.960
- Awesome, yeah.


00:01:48.960 --> 00:01:52.640
So actually, some people may have noticed


00:01:52.640 --> 00:01:55.040
the test and code is not really going on lately.


00:01:55.040 --> 00:01:58.120
and so one of the things that makes it easier for me


00:01:58.120 --> 00:02:00.160
is when I see cool testing related articles,


00:02:00.160 --> 00:02:01.480
I don't have a decision anymore.


00:02:01.480 --> 00:02:03.560
I can just say, "Hey, it's gonna go here."


00:02:03.560 --> 00:02:08.160
Now, testing code will eventually pick up something again,


00:02:08.160 --> 00:02:09.540
but I'm not sure when.


00:02:09.540 --> 00:02:12.400
So for now, if I find something cool like this article,


00:02:12.400 --> 00:02:13.480
I'll bring it up here.


00:02:13.480 --> 00:02:14.320
So this is--


00:02:14.320 --> 00:02:15.520
- I think I make you show up every week


00:02:15.520 --> 00:02:17.760
and talk about fun stuff anyway.


00:02:17.760 --> 00:02:21.160
- So this is a GitHub repo,


00:02:21.160 --> 00:02:23.320
and we're kind of seeing more of this,


00:02:23.320 --> 00:02:26.440
of people writing instead of blogging,


00:02:26.440 --> 00:02:30.520
they just write like a readme as a repo.


00:02:30.520 --> 00:02:32.200
- I know, this is such a weird trend.


00:02:32.200 --> 00:02:35.320
I totally get it and it's good, but it's also weird.


00:02:35.320 --> 00:02:37.600
- But it's kind of neat that people can update it.


00:02:37.600 --> 00:02:40.200
So if they can just keep it up and you can see,


00:02:40.200 --> 00:02:41.040
people can find it.


00:02:41.040 --> 00:02:42.360
- That's right, you can get a PR to your blog posts.


00:02:42.360 --> 00:02:43.480
That's not normally how it goes.


00:02:43.480 --> 00:02:45.720
- Yeah, so I'm not sure.


00:02:45.720 --> 00:02:48.680
But it's probably harder to throw


00:02:48.680 --> 00:02:50.320
Google Analytics at it, right?


00:02:50.320 --> 00:02:52.200
- Oh yeah, we'll see like whether


00:02:52.200 --> 00:02:53.500
you should do that or not.


00:02:53.500 --> 00:02:59.000
- So anyway, so this comes to us from Nate Zupan,


00:02:59.000 --> 00:03:00.120
cool name by the way.


00:03:00.120 --> 00:03:05.140
And he also has, we'll include a link in the show notes


00:03:05.140 --> 00:03:10.140
to a talk he gave at a plone in Namar 2022.


00:03:10.140 --> 00:03:12.120
So just recently.


00:03:12.120 --> 00:03:16.780
Anyway, so he goes through best practices


00:03:16.780 --> 00:03:18.460
to speed up your pytest suite.


00:03:19.260 --> 00:03:22.860
And he's just kind of lists them all at the top here,


00:03:22.860 --> 00:03:23.700
which is nice.


00:03:23.700 --> 00:03:26.260
Hardware first.


00:03:26.260 --> 00:03:28.460
Well, first of all, when he goes into the discussion,


00:03:28.460 --> 00:03:29.820
he talks about measuring first.


00:03:29.820 --> 00:03:32.340
So before you start speeding anything up,


00:03:32.340 --> 00:03:34.540
you should measure because you want to know


00:03:34.540 --> 00:03:37.040
if your changes had any effect.


00:03:37.040 --> 00:03:40.580
And if it's making support a little bit weirder,


00:03:40.580 --> 00:03:41.860
then you don't want to make the change


00:03:41.860 --> 00:03:43.100
if it's only marginal.


00:03:43.100 --> 00:03:46.300
So I like that he's talking about that,


00:03:46.300 --> 00:03:48.660
of like each step of the way here,


00:03:48.660 --> 00:03:51.180
measure to make sure it makes a difference.


00:03:51.180 --> 00:03:52.020
- Right.


00:03:52.020 --> 00:03:54.680
- So first off, and I'm glad he brought this up is,


00:03:54.680 --> 00:03:57.700
check your hardware.


00:03:57.700 --> 00:04:02.620
Make sure you've got the hard, fast hardware if you have it.


00:04:02.620 --> 00:04:06.880
So one of the, and I've noticed this before as well is,


00:04:06.880 --> 00:04:08.500
so here we go, measure first.


00:04:08.500 --> 00:04:13.500
But some CI systems allow you to have self-hosted runners,


00:04:13.500 --> 00:04:15.400
and it's something to consider.


00:04:17.740 --> 00:04:21.440
whether your CI is in the cloud or you've got virtual,


00:04:21.440 --> 00:04:25.660
like a server with some virtual machines around


00:04:25.660 --> 00:04:27.620
to be able to run your test runners,


00:04:27.620 --> 00:04:30.100
they're not going to be as fast as physical hardware


00:04:30.100 --> 00:04:32.780
if you've got some hardware lying around that you can use.


00:04:32.780 --> 00:04:36.160
So that's something to consider is to throw hardware at it.


00:04:36.160 --> 00:04:37.680
And then test collection time.


00:04:37.680 --> 00:04:42.680
Some of the problems with the speed of pytest is using,


00:04:42.680 --> 00:04:44.260
if you've got,


00:04:44.260 --> 00:04:46.800
if you run it from the top level directory of a project


00:04:46.800 --> 00:04:48.240
and you've got tons of documentation


00:04:48.240 --> 00:04:51.240
and tons of source code, it's gonna look everywhere.


00:04:51.240 --> 00:04:53.000
So don't let it look in those places.


00:04:53.000 --> 00:04:55.120
So there's ways to turn that off.


00:04:55.120 --> 00:04:59.740
So with no recursers and giving it the directory.


00:04:59.740 --> 00:05:00.720
I also wanted to point out,


00:05:00.720 --> 00:05:02.160
he didn't talk about this in the article,


00:05:02.160 --> 00:05:06.080
but I wanna point out that something to use is,


00:05:06.080 --> 00:05:08.680
oh, it went away, test paths.


00:05:08.680 --> 00:05:12.560
So use test paths to say specifically,


00:05:12.560 --> 00:05:16.320
so the no recursers says essentially avoid these directories


00:05:16.320 --> 00:05:17.960
but test pass pretty much says,


00:05:17.960 --> 00:05:20.660
this is where the tests are, look here.


00:05:20.660 --> 00:05:22.320
So those are good.


00:05:22.320 --> 00:05:23.240
- Nice.


00:05:23.240 --> 00:05:25.960
Yeah, I've done that before on some projects,


00:05:25.960 --> 00:05:27.740
like on the Talk Python Training website,


00:05:27.740 --> 00:05:29.680
where there's got a ton of text files


00:05:29.680 --> 00:05:30.880
and things laying around.


00:05:30.880 --> 00:05:35.000
And I've done certain things like that to exclude,


00:05:35.000 --> 00:05:36.840
you know, pytest and PyCharm


00:05:36.840 --> 00:05:39.400
and other different things to look there


00:05:39.400 --> 00:05:41.820
in those places where like, there's no code,


00:05:41.820 --> 00:05:43.000
but there's a ton of stuff here


00:05:43.000 --> 00:05:45.240
and you're gonna go hunting through it.


00:05:45.240 --> 00:05:46.080
- Yeah.


00:05:46.080 --> 00:05:50.240
really sped up the startup time for a pyramid scanning


00:05:50.240 --> 00:05:53.520
for files that have route definitions in them,


00:05:53.520 --> 00:05:54.720
for URL endpoints.


00:05:54.720 --> 00:05:56.500
'Cause it would look through everything, apparently,


00:05:56.500 --> 00:05:58.120
doesn't matter, at least looking for files


00:05:58.120 --> 00:06:00.400
through directories with tons of stuff.


00:06:00.400 --> 00:06:02.600
And it makes a big difference


00:06:02.600 --> 00:06:04.200
if you have a large project, for sure.


00:06:04.200 --> 00:06:06.280
- Yeah, it's significant.


00:06:06.280 --> 00:06:08.720
So it was something to think about.


00:06:08.720 --> 00:06:10.280
And documentation too, you don't,


00:06:10.280 --> 00:06:12.160
unless you're really testing your documentation,


00:06:12.160 --> 00:06:13.820
you don't need to look for it there.


00:06:13.820 --> 00:06:18.020
So hardware fast, make collection fast.


00:06:18.020 --> 00:06:20.160
This one is something I haven't used before,


00:06:20.160 --> 00:06:21.680
but I'll play with it.


00:06:21.680 --> 00:06:25.060
Python don't write bytecode, a environmental flag.


00:06:25.060 --> 00:06:29.440
I guess it comments that it might not make


00:06:29.440 --> 00:06:30.920
a big difference for you, but it might.


00:06:30.920 --> 00:06:35.640
So, you know, I don't know.


00:06:35.640 --> 00:06:38.600
So Python writes the bytecode normally,


00:06:38.600 --> 00:06:41.240
and maybe it'd be faster if you didn't do that


00:06:41.240 --> 00:06:42.080
during tests.


00:06:43.120 --> 00:06:44.120
I mean, I think it's a good thing.


00:06:44.120 --> 00:06:45.120
I mean, I think it's a good thing.


00:06:45.120 --> 00:06:46.120
I mean, I think it's a good thing.


00:06:46.120 --> 00:06:47.120
I mean, I think it's a good thing.


00:06:47.120 --> 00:06:48.120
I mean, I think it's a good thing.


00:06:48.120 --> 00:06:49.120
I mean, I think it's a good thing.


00:06:49.120 --> 00:06:50.120
I mean, I think it's a good thing.


00:06:50.120 --> 00:06:51.120
I mean, I think it's a good thing.


00:06:51.120 --> 00:06:52.120
I mean, I think it's a good thing.


00:06:52.120 --> 00:06:53.120
I mean, I think it's a good thing.


00:06:53.120 --> 00:06:54.120
I mean, I think it's a good thing.


00:06:54.120 --> 00:06:55.120
I mean, I think it's a good thing.


00:06:55.120 --> 00:06:56.120
I mean, I think it's a good thing.


00:06:56.120 --> 00:06:57.120
I mean, I think it's a good thing.


00:06:57.120 --> 00:06:58.120
I mean, I think it's a good thing.


00:06:58.120 --> 00:06:59.120
I mean, I think it's a good thing.


00:06:59.120 --> 00:07:01.460
but again, it's something to try.


00:07:01.460 --> 00:07:04.260
And then a subset of tests.


00:07:04.260 --> 00:07:09.260
So this is especially important if you're in a TDD style.


00:07:09.260 --> 00:07:13.760
And one of the things that I think some people forget is,


00:07:13.760 --> 00:07:16.320
if you've got your tests organized well,


00:07:16.320 --> 00:07:18.680
you should be able to run a subset anyway,


00:07:18.680 --> 00:07:21.020
'cause you've got like the feature you're working on


00:07:21.020 --> 00:07:23.380
is in a sub-directory of everything else.


00:07:23.380 --> 00:07:25.780
And just run those when you're working on that feature


00:07:25.780 --> 00:07:28.560
and then you don't run the whole suite.


00:07:28.560 --> 00:07:32.560
There's a discussion, and this goes along with the unit tests mostly,


00:07:32.560 --> 00:07:35.860
but disable networking.


00:07:35.860 --> 00:07:40.560
Unless you're intending to have your code using network connections,


00:07:40.560 --> 00:07:45.560
you can disable that for a set of tests or the whole suite.


00:07:45.560 --> 00:07:49.560
And then also, disk access, trying to limit that.


00:07:49.560 --> 00:07:54.560
And he includes a couple of ways to ensure those.


00:07:54.560 --> 00:07:57.360
And then a really good discussion,


00:07:57.360 --> 00:08:00.360
a fairly chunky discussion on database access


00:08:00.360 --> 00:08:02.120
and optimization to databases,


00:08:02.120 --> 00:08:06.840
including discussion around rollback.


00:08:06.840 --> 00:08:10.520
And there was something else that I hadn't seen before.


00:08:10.520 --> 00:08:12.460
Let me see if I can remember.


00:08:12.460 --> 00:08:13.600
- Yeah, there's some interesting things.


00:08:13.600 --> 00:08:15.160
I think, I know you've spoken about it


00:08:15.160 --> 00:08:19.680
in your pytest course about using fixtures


00:08:19.680 --> 00:08:23.040
for like setup of those common type things, right?


00:08:23.920 --> 00:08:26.780
So one of the things I'm not familiar with is truncate.


00:08:26.780 --> 00:08:29.100
Have you used the database truncate before?


00:08:29.100 --> 00:08:29.940
- No.


00:08:29.940 --> 00:08:34.240
- So apparently that allows you to set the whole database up


00:08:34.240 --> 00:08:35.920
but delete all the stuff out of it,


00:08:35.920 --> 00:08:37.500
like to empty the tables.


00:08:37.500 --> 00:08:43.640
And that, I mean, if part, if a big chunk of the work


00:08:43.640 --> 00:08:47.200
of setting up data is getting all the tables correct,


00:08:47.200 --> 00:08:49.600
then truncate might be a good way to clean them out


00:08:49.600 --> 00:08:51.640
and then refill them if you need to.


00:08:51.640 --> 00:08:56.640
But also, yeah, like you said, paying attention to fixtures.


00:08:56.640 --> 00:08:57.840
That's really good.


00:08:57.840 --> 00:08:59.480
And then the last thing he brings up


00:08:59.480 --> 00:09:00.680
is just run them in parallel.


00:09:00.680 --> 00:09:05.440
By default, pytest runs single, each test one at a time.


00:09:05.440 --> 00:09:07.960
And if you've got a code base that you're testing


00:09:07.960 --> 00:09:11.400
that can allow, like you're not testing a hardware resource


00:09:11.400 --> 00:09:14.480
or something that you can allow parallel,


00:09:14.480 --> 00:09:16.160
go ahead and turn those on.


00:09:16.160 --> 00:09:18.760
Turn on the, use Xdist or something else


00:09:18.760 --> 00:09:20.000
and run them in parallel.


00:09:20.000 --> 00:09:24.260
So a really good list and I'm glad he put it together.


00:09:24.260 --> 00:09:25.620
Also very entertaining talk.


00:09:25.620 --> 00:09:27.880
So give his talk a look.


00:09:27.880 --> 00:09:30.280
- Yeah, absolutely.


00:09:30.280 --> 00:09:32.700
Brandon out in the audience says,


00:09:32.700 --> 00:09:34.100
people at work have been trying to convince me


00:09:34.100 --> 00:09:36.540
that tests should live next to the file they are testing


00:09:36.540 --> 00:09:38.980
rather than in a test directory.


00:09:38.980 --> 00:09:41.580
I created a test directory that mirrors


00:09:41.580 --> 00:09:44.100
my app folder structure with my tests in there.


00:09:44.100 --> 00:09:45.780
Any opinions?


00:09:45.780 --> 00:09:47.620
- I don't like that, but...


00:09:49.340 --> 00:09:50.880
- Neither do I, honestly.


00:09:50.880 --> 00:09:52.580
- If you like it, I guess, okay.


00:09:52.580 --> 00:09:54.300
I've heard that before, but I know,


00:09:54.300 --> 00:09:57.300
I haven't heard people in Python recommending that very often.


00:09:57.300 --> 00:10:01.660
- Yeah, for me, I feel, I understand why,


00:10:01.660 --> 00:10:04.320
like, okay, here's the code, here's the test.


00:10:04.320 --> 00:10:10.040
Maybe the test can be exactly isolated


00:10:10.040 --> 00:10:13.820
to what is only in that file, but sometime,


00:10:13.820 --> 00:10:15.980
you know, like as soon as you start to blend together,


00:10:15.980 --> 00:10:20.600
like, okay, well, this thing works with that class


00:10:20.600 --> 00:10:25.160
to achieve its job, but it kind of starts to blur together


00:10:25.160 --> 00:10:26.860
and like, well, what if those are in the wrong places?


00:10:26.860 --> 00:10:29.880
Well, now it's like half here and I don't know,


00:10:29.880 --> 00:10:34.520
it leads to like lots of, I don't know,


00:10:34.520 --> 00:10:36.560
it's like trying to go to your IDE and say,


00:10:36.560 --> 00:10:38.680
I have these seven methods, please write the test for it.


00:10:38.680 --> 00:10:40.760
And it says, test function one, test function two,


00:10:40.760 --> 00:10:42.360
test function three, you're like, no, no, no,


00:10:42.360 --> 00:10:44.880
that is not really what you're after.


00:10:44.880 --> 00:10:47.320
but I feel it kind of leads towards that.


00:10:47.320 --> 00:10:48.440
Like, well, here's the file,


00:10:48.440 --> 00:10:50.480
let's test all the things in this file.


00:10:50.480 --> 00:10:52.200
And it, which is not necessarily the way


00:10:52.200 --> 00:10:53.520
I would think about testing.


00:10:53.520 --> 00:10:55.880
- Well, also are you really test?


00:10:55.880 --> 00:10:58.920
I mean, it kind of lends itself to starting to test


00:10:58.920 --> 00:11:01.600
the implementation instead of testing the behavior.


00:11:01.600 --> 00:11:02.640
- Yes, exactly.


00:11:02.640 --> 00:11:03.840
- Because you might have,


00:11:03.840 --> 00:11:06.760
if you've got a file that has no test associated with it,


00:11:06.760 --> 00:11:08.640
somebody might say, well, why is the test for that?


00:11:08.640 --> 00:11:09.680
And you're like, well,


00:11:09.680 --> 00:11:12.000
that file is just an implementation detail.


00:11:12.000 --> 00:11:13.520
It's not something we need to test.


00:11:13.520 --> 00:11:16.760
is you can't access it directly from the API.


00:11:16.760 --> 00:11:18.840
>> Right. It's completely covered by


00:11:18.840 --> 00:11:20.440
these two other tests.


00:11:20.440 --> 00:11:22.360
By the way, there are other folders, go find them.


00:11:22.360 --> 00:11:24.320
>> Yeah.


00:11:24.320 --> 00:11:26.680
>> Also, the stuff you're speaking about here by


00:11:26.680 --> 00:11:31.360
making collection fast and such also is a little bit tricky.


00:11:31.360 --> 00:11:33.160
Potentially, sharing fixtures


00:11:33.160 --> 00:11:34.800
might be a little more tricky that way.


00:11:34.800 --> 00:11:39.560
I don't know. My vote is to not mix it all together.


00:11:39.560 --> 00:11:42.480
Plus, do you want to ship your test code with your product?


00:11:42.480 --> 00:11:44.480
Maybe you do, but often you don't.


00:11:44.480 --> 00:11:48.480
It's harder if they're all woven together.


00:11:48.480 --> 00:11:50.480
That's true.


00:11:50.480 --> 00:11:52.480
Yeah.


00:11:52.480 --> 00:11:54.480
Anyway,


00:11:54.480 --> 00:11:56.480
that's the same thing.


00:11:56.480 --> 00:11:58.480
Also, Henry Schreiner out there kind of says,


00:11:58.480 --> 00:12:00.480
"I don't like distributing tests in wheels."


00:12:00.480 --> 00:12:02.480
Only Estes, so like a test folder as well.


00:12:02.480 --> 00:12:04.480
Yeah, I'm with you.


00:12:04.480 --> 00:12:06.480
I think, Brandon,


00:12:06.480 --> 00:12:08.480
the vote here is test folder.


00:12:08.480 --> 00:12:10.480
But, you know,


00:12:10.480 --> 00:12:18.400
just us. Awesome. Well, this is good. Fine. You want to hear my


00:12:18.400 --> 00:12:23.680
first one? This is a bit of a journey. It's a journey. So


00:12:23.680 --> 00:12:31.720
let's start here. So I have a perfectly fine laptop that I can


00:12:31.720 --> 00:12:35.360
take places if I need to for work, take you to the coffee


00:12:35.360 --> 00:12:38.440
shop to work. If I'm going on like a two week vacation, it's


00:12:38.440 --> 00:12:40.880
definitely coming with me, right?


00:12:40.880 --> 00:12:45.880
It's even if my intent is to completely disconnect,


00:12:45.880 --> 00:12:49.120
I still have to answer super urgent emails.


00:12:49.120 --> 00:12:53.480
If the website goes down, any of the many websites


00:12:53.480 --> 00:12:55.680
I seem to be babysitting these days,


00:12:55.680 --> 00:12:56.680
like I've got to work on it.


00:12:56.680 --> 00:12:58.680
Like there could be urgent stuff, right?


00:12:58.680 --> 00:13:00.120
So I just, I take it with me,


00:13:00.120 --> 00:13:03.920
but I'm on this mission to do that less, right?


00:13:03.920 --> 00:13:06.200
'Cause I have a 16 inch MacBook Pro.


00:13:06.200 --> 00:13:08.600
It's pretty heavy, it's pretty expensive.


00:13:08.600 --> 00:13:11.280
I don't necessarily wanna like take it camping with me.


00:13:11.280 --> 00:13:13.360
But what if, what if something goes wrong, Brian?


00:13:13.360 --> 00:13:14.280
I've got to fix it.


00:13:14.280 --> 00:13:16.320
Do I really wanna drive the four hours back


00:13:16.320 --> 00:13:18.160
because I got a message that like,


00:13:18.160 --> 00:13:20.520
you know, the website's down and everyone's upset,


00:13:20.520 --> 00:13:23.520
can't do their courses or they can't get the podcast.


00:13:23.520 --> 00:13:24.360
No, I don't want that.


00:13:24.360 --> 00:13:26.200
So I would probably take the stupid thing


00:13:26.200 --> 00:13:27.640
and try to not get it wet.


00:13:27.640 --> 00:13:30.000
So I'm on this mission to not do that.


00:13:30.000 --> 00:13:31.700
So I just wanted to share a couple of tools


00:13:31.700 --> 00:13:34.040
and you know, people if they've got thoughts,


00:13:34.040 --> 00:13:37.080
I guess probably the YouTube stream chat


00:13:37.080 --> 00:13:38.400
for this would be the best, or on Twitter,


00:13:38.400 --> 00:13:39.460
they could let me know.


00:13:39.460 --> 00:13:43.240
But I think I found the right combination of tools


00:13:43.240 --> 00:13:45.360
that will let me just take my iPad


00:13:45.360 --> 00:13:50.240
and still do all the dev-opsy life that I gotta lead.


00:13:50.240 --> 00:13:52.880
So it's not good for answering emails.


00:13:52.880 --> 00:13:56.160
I have minor RSI issues and I can't type on an iPad,


00:13:56.160 --> 00:13:58.480
not even on the little keyboard that comes with it.


00:13:58.480 --> 00:14:03.200
I've got my proper Microsoft ergonomic sculpt.


00:14:03.200 --> 00:14:05.200
And you can plug that into an iPad.


00:14:05.200 --> 00:14:06.440
But once you start taking that,


00:14:06.440 --> 00:14:08.160
you know, like, well, you might as well just take the computer.


00:14:08.160 --> 00:14:12.080
So two tools I want to give a shout out to,


00:14:12.080 --> 00:14:13.880
Prompt by Panic.


00:14:13.880 --> 00:14:17.520
Panic is a Portland company, so shout out to the local team.


00:14:17.520 --> 00:14:19.240
- Is it at the disco or?


00:14:19.240 --> 00:14:21.320
- Exactly.


00:14:21.320 --> 00:14:23.000
They don't really freak out that much at the disco.


00:14:23.000 --> 00:14:24.960
- Okay. - I didn't even panic there.


00:14:24.960 --> 00:14:29.480
But Prompt is a SSH client for iOS, in particular for iPad.


00:14:29.480 --> 00:14:30.960
But you could, I mean, if you wanted to go extreme,


00:14:30.960 --> 00:14:32.200
you could do this on your phone.


00:14:32.200 --> 00:14:34.240
you know, how, how far are you going camping, right?


00:14:34.240 --> 00:14:35.900
Or where, where are you going?


00:14:35.900 --> 00:14:40.260
And so this lets you basically import your SSH keys


00:14:40.260 --> 00:14:45.260
and do full on SSH like you would in your iTerm2


00:14:45.260 --> 00:14:47.100
or terminal or whatever.


00:14:47.100 --> 00:14:49.180
- Turns your iPad into a dump terminal.


00:14:49.180 --> 00:14:50.020
- Yeah, and it does.


00:14:50.020 --> 00:14:53.220
So like you can easily log into, you know,


00:14:53.220 --> 00:14:57.060
the Python bytes server and over SSH,


00:14:57.060 --> 00:14:58.460
do all the things that you need to do.


00:14:58.460 --> 00:15:00.220
So, you know, if you've got to get into the server


00:15:00.220 --> 00:15:01.060
and you've got to like, okay,


00:15:01.060 --> 00:15:03.220
I really have to just go restart the stupid thing


00:15:03.220 --> 00:15:04.580
or change a connection string,


00:15:04.580 --> 00:15:06.140
'cause who knows what, right?


00:15:06.140 --> 00:15:08.920
You could do it.


00:15:08.920 --> 00:15:10.120
It seems to work pretty well.


00:15:10.120 --> 00:15:13.500
The only complaint, the only complaint that I have for it


00:15:13.500 --> 00:15:17.540
is it doesn't have nerd fonts.


00:15:17.540 --> 00:15:20.140
So my oh my posh, dude, this is serious business.


00:15:20.140 --> 00:15:20.980
Don't laugh.


00:15:20.980 --> 00:15:24.060
My nerd fonts, like I can't do PLS.


00:15:24.060 --> 00:15:27.380
I can't do oh my posh and get like the cool


00:15:27.380 --> 00:15:30.340
like shell prompt with all the information.


00:15:30.340 --> 00:15:33.940
No, it's all just boxes. It's rough. No, it's fine.


00:15:33.940 --> 00:15:35.940
It would be nice, but it does have cool things,


00:15:35.940 --> 00:15:38.880
like if you need to press Ctrl+Shift, that,


00:15:38.880 --> 00:15:43.780
or it has a special way to pull up those kinds of keys,


00:15:43.780 --> 00:15:45.780
so you press Ctrl and then some other type of thing.


00:15:45.780 --> 00:15:47.980
Or it has up arrow, down arrow,


00:15:47.980 --> 00:15:49.980
if you want to cycle through your history.


00:15:49.980 --> 00:15:52.280
It's got a lot of cool features like that


00:15:52.280 --> 00:15:55.180
where you can kind of integrate that.


00:15:55.180 --> 00:15:57.180
So I think it's going to work.


00:15:57.180 --> 00:15:59.380
I think this is the one half of the DevOps story.


00:15:59.380 --> 00:16:00.700
>> Okay.


00:16:00.700 --> 00:16:02.060
>> The other part is,


00:16:02.060 --> 00:16:05.820
oh my goodness, what if it's a code problem?


00:16:05.820 --> 00:16:08.740
Do I really want to try to edit code over


00:16:08.740 --> 00:16:11.980
this prompt thing through the iPad on,


00:16:11.980 --> 00:16:14.740
knowing like Emacs or what am I?


00:16:14.740 --> 00:16:16.260
No, I don't want to do that.


00:16:16.260 --> 00:16:19.860
So the other half is GitHub.


00:16:19.860 --> 00:16:24.980
In particular, the VS Code integration into GitHub.


00:16:24.980 --> 00:16:26.460
So if you remember,


00:16:26.460 --> 00:16:28.780
like here I have pull up on the screen,


00:16:28.780 --> 00:16:31.660
just with any public repo or your own private ones.


00:16:31.660 --> 00:16:35.460
This is my Jinja partial thing for like,


00:16:35.460 --> 00:16:39.140
basically integrating HTMX with Flask.


00:16:39.140 --> 00:16:40.540
But you can press the dot.


00:16:40.540 --> 00:16:43.580
If you press dot, it turns that whole thing


00:16:43.580 --> 00:16:48.020
into a cloud hosted VS Code session.


00:16:48.020 --> 00:16:50.420
That's awesome, right?


00:16:50.420 --> 00:16:51.240
Even has auto complete.


00:16:51.240 --> 00:16:52.140
So if I hit like dot there,


00:16:52.140 --> 00:16:55.500
you can see it'll my auto complete.


00:16:55.500 --> 00:16:56.460
- That's pretty cool.


00:16:56.460 --> 00:16:57.300
- That's pretty cool.


00:16:57.300 --> 00:17:00.020
but how do you press dot when you're on a webpage


00:17:00.020 --> 00:17:05.640
and an iPad, there is no dot.


00:17:05.640 --> 00:17:07.060
'Cause you can't pull up the keyboard.


00:17:07.060 --> 00:17:08.380
The only thing you can do to pull up the keyboard


00:17:08.380 --> 00:17:09.420
is go to an input section.


00:17:09.420 --> 00:17:11.340
And once you're in input, well, it just types out.


00:17:11.340 --> 00:17:12.180
It doesn't do that.


00:17:12.180 --> 00:17:13.580
You're like, why?


00:17:13.580 --> 00:17:15.260
So here's the other piece.


00:17:15.260 --> 00:17:16.180
All right, here's the other piece.


00:17:16.180 --> 00:17:17.220
So you go over here and you change


00:17:17.220 --> 00:17:20.220
github.com/mikeckenney/djinja-partials


00:17:20.220 --> 00:17:23.620
to github.com/dev/whatever.


00:17:23.620 --> 00:17:24.980
Boom, done.


00:17:24.980 --> 00:17:26.540
So if you got to edit your code,


00:17:26.540 --> 00:17:29.520
you just go change the .com to .dev,


00:17:29.520 --> 00:17:31.440
and you have an editor, you can check it back in,


00:17:31.440 --> 00:17:34.640
like in my setup, if I commit to the production branch,


00:17:34.640 --> 00:17:36.800
it kicks off a continuous deployment,


00:17:36.800 --> 00:17:39.360
which will like automatically restart the server


00:17:39.360 --> 00:17:42.000
and reinstall like the things that might need,


00:17:42.000 --> 00:17:44.040
if it has a new dependency or something.


00:17:44.040 --> 00:17:46.080
So I could literally just come over here,


00:17:46.080 --> 00:17:49.520
make some changes, do a PR over to the production branch


00:17:49.520 --> 00:17:52.640
or push some how merge over to the production branch,


00:17:52.640 --> 00:17:54.480
and it's done, it's good to go.


00:17:54.480 --> 00:17:55.720
Isn't that awesome?


00:17:55.720 --> 00:17:58.900
Just edit live, just, you know, edit your server life.


00:17:58.900 --> 00:17:59.880
No.


00:17:59.880 --> 00:18:00.820
Yeah.


00:18:00.820 --> 00:18:05.300
I saw somewhere somebody was complaining about the prompts and it's really hard


00:18:05.300 --> 00:18:06.980
for me to edit my code on the server.


00:18:06.980 --> 00:18:09.560
I'm like, why, why would you know?


00:18:09.560 --> 00:18:10.300
It should be hard.


00:18:10.300 --> 00:18:11.060
You don't do that.


00:18:11.060 --> 00:18:11.920
Don't do that.


00:18:11.920 --> 00:18:13.140
Yeah.


00:18:13.140 --> 00:18:17.000
So I went to try to try this, but I have to do the two factor


00:18:17.000 --> 00:18:18.700
authentication to get into my account.


00:18:18.700 --> 00:18:19.840
So yeah.


00:18:19.840 --> 00:18:20.320
Yeah.


00:18:20.320 --> 00:18:20.480
Yeah.


00:18:20.480 --> 00:18:20.820
You got it.


00:18:20.820 --> 00:18:23.820
That Brandon also says, Hey, I'll buy you a keyboard case.


00:18:23.820 --> 00:18:27.580
I absolutely hear you and I would love,


00:18:27.580 --> 00:18:29.740
you have no idea how jealous I am of people that can go


00:18:29.740 --> 00:18:31.980
and type on their laptops and type on these small things


00:18:31.980 --> 00:18:36.700
like RSI, I would be destroyed in like an hour or two


00:18:36.700 --> 00:18:37.540
if I did it.


00:18:37.540 --> 00:18:39.980
It's like, it's not a matter of do I wanna get the keyboard


00:18:39.980 --> 00:18:41.560
or not, like I just can't.


00:18:41.560 --> 00:18:45.780
So anyway, it's not that bad to be me,


00:18:45.780 --> 00:18:48.900
but I'm not typing on like small square keyboards,


00:18:48.900 --> 00:18:51.000
it just doesn't work, it's just something I can't do.


00:18:51.000 --> 00:18:52.900
- Okay, so. - All right.


00:18:52.900 --> 00:18:56.060
- It's just not. (laughs)


00:18:56.060 --> 00:18:57.820
- Exactly, no, I just, I like,


00:18:57.820 --> 00:19:00.660
because when I was 30, my hands got messed up


00:19:00.660 --> 00:19:02.540
and they just, they almost recovered,


00:19:02.540 --> 00:19:03.940
but not 100%, right?


00:19:03.940 --> 00:19:05.300
So. - I know you got more going on


00:19:05.300 --> 00:19:06.140
than I do though.


00:19:06.140 --> 00:19:08.220
So I just got back from four days off


00:19:08.220 --> 00:19:09.580
and I took the iPad.


00:19:09.580 --> 00:19:12.820
And I, - Nice.


00:19:12.820 --> 00:19:14.340
- I had to answer a few emails,


00:19:14.340 --> 00:19:17.300
but the, for me, these short emails,


00:19:17.300 --> 00:19:19.300
the little key bed, - The typing is fine.


00:19:19.300 --> 00:19:20.820
- The cover thing, it works fine.


00:19:20.820 --> 00:19:22.940
even though they're, those are expensive.


00:19:22.940 --> 00:19:24.820
When you add, oh, I want an iPad,


00:19:24.820 --> 00:19:27.180
but I also want the keyboard thing,


00:19:27.180 --> 00:19:28.700
and I want the pencil,


00:19:28.700 --> 00:19:31.380
suddenly it's like almost twice as much.


00:19:31.380 --> 00:19:33.420
- It is, it is, absolutely.


00:19:33.420 --> 00:19:37.180
And, you know, just people who've been paying attention


00:19:37.180 --> 00:19:38.300
for the last two hours,


00:19:38.300 --> 00:19:40.300
Apple just released new iPads with M2s,


00:19:40.300 --> 00:19:43.140
so people can go check that out if they wanna spend money.


00:19:43.140 --> 00:19:44.660
I'm happy with mine, I'm gonna keep it.


00:19:44.660 --> 00:19:47.660
All right, before we move on to the next thing, Brian,


00:19:48.540 --> 00:19:50.780
Let me tell you about our sponsor this week.


00:19:50.780 --> 00:19:55.280
So as has been the case as usual, thank you so much.


00:19:55.280 --> 00:19:57.220
Microsoft for Startups Founders Hub


00:19:57.220 --> 00:19:59.560
is sponsoring this episode.


00:19:59.560 --> 00:20:03.020
We all know that starting a business is hard.


00:20:03.020 --> 00:20:05.380
By a lot of estimates, over 90% of startups


00:20:05.380 --> 00:20:07.700
go out of business in just the first year.


00:20:07.700 --> 00:20:09.240
There's a lot of reasons for that.


00:20:09.240 --> 00:20:11.940
Is it that you don't have the money to buy the resources?


00:20:11.940 --> 00:20:13.580
Can you not scale fast enough?


00:20:13.580 --> 00:20:15.900
Often it's like, do you have the wrong strategy


00:20:15.900 --> 00:20:18.620
or do you not have the right connections


00:20:18.620 --> 00:20:20.600
to get the right publicity


00:20:20.600 --> 00:20:22.840
or you have no experience in marketing,


00:20:22.840 --> 00:20:26.760
lots, lots of problems, lots of challenges.


00:20:26.760 --> 00:20:28.120
And as software developers,


00:20:28.120 --> 00:20:32.080
we're often not trained in those necessary areas


00:20:32.080 --> 00:20:33.720
like marketing, for example.


00:20:33.720 --> 00:20:36.100
But even if you know that, there's others, right?


00:20:36.100 --> 00:20:39.020
So having access to a network of founders,


00:20:39.020 --> 00:20:40.840
like you get in a lot of accelerators,


00:20:40.840 --> 00:20:43.200
like Y Combinator, would be awesome.


00:20:43.200 --> 00:20:44.960
So that's what Microsoft created


00:20:44.960 --> 00:20:47.180
with their founders hub.


00:20:47.180 --> 00:20:48.980
So they give you free resources


00:20:48.980 --> 00:20:52.060
to a whole bunch of cloud things,


00:20:52.060 --> 00:20:54.060
Azure, GitHub, others,


00:20:54.060 --> 00:20:56.700
as well as very importantly,


00:20:56.700 --> 00:20:59.180
access to a mentor network


00:20:59.180 --> 00:21:01.780
where you can book one-on-one calls


00:21:01.780 --> 00:21:05.700
with people who have experience in these particular areas.


00:21:05.700 --> 00:21:08.460
Often many of them are founders themselves


00:21:08.460 --> 00:21:10.220
and they've created startups and sold them


00:21:10.220 --> 00:21:12.460
and they're in this mentorship network.


00:21:12.460 --> 00:21:13.840
So if you wanna talk to somebody


00:21:13.840 --> 00:21:17.320
about idea validation, fundraising,


00:21:17.320 --> 00:21:20.280
management and coaching, sales and marketing,


00:21:20.280 --> 00:21:22.000
all those things you can book one-on-one meetings


00:21:22.000 --> 00:21:24.280
with these people to help get you going


00:21:24.280 --> 00:21:26.040
and make connections.


00:21:26.040 --> 00:21:28.560
So if you need some free GitHub


00:21:28.560 --> 00:21:30.180
and Microsoft Cloud resources,


00:21:30.180 --> 00:21:31.720
if you need access to mentors


00:21:31.720 --> 00:21:34.480
and you wanna get your startup going,


00:21:34.480 --> 00:21:36.240
now make your idea a reality today


00:21:36.240 --> 00:21:38.080
with the support from Microsoft for Startups,


00:21:38.080 --> 00:21:39.240
Founders Hub.


00:21:39.240 --> 00:21:42.320
It's free to join, it doesn't have to be venture backed,


00:21:42.320 --> 00:21:44.720
It doesn't have to be third-party validated.


00:21:44.720 --> 00:21:49.720
You just apply for free at pythonbytes.fm/foundershub2022.


00:21:49.720 --> 00:21:52.240
The link is in your show notes.


00:21:52.240 --> 00:21:55.980
Thanks a bunch to Microsoft for sponsoring our show.


00:21:55.980 --> 00:21:59.840
What's next, Brian?


00:21:59.840 --> 00:22:01.920
- Well, that article that I already read


00:22:01.920 --> 00:22:03.480
about the speeding up pytest,


00:22:03.480 --> 00:22:05.680
it had a whole bunch of cool tools in it.


00:22:05.680 --> 00:22:07.880
So I wanted to go through some of the tools


00:22:07.880 --> 00:22:10.560
that were in the article that I thought were neat.


00:22:10.560 --> 00:22:12.520
One of them for profiling and timing


00:22:12.520 --> 00:22:14.820
was a thing called Hyperfine.


00:22:14.820 --> 00:22:19.000
And this is a not, I don't think it's a Python thing,


00:22:19.000 --> 00:22:21.800
but you like for Macs, you had to brew install it.


00:22:21.800 --> 00:22:25.680
But one of the things it does is you can give it,


00:22:25.680 --> 00:22:30.220
you give it like two things and it runs both of them


00:22:30.220 --> 00:22:31.920
and it can run it multiple times


00:22:31.920 --> 00:22:36.060
and then give you statistics comparing them.


00:22:36.060 --> 00:22:39.400
So it's a really good comparison tool to, you know,


00:22:39.400 --> 00:22:41.240
like if you're testing your test suite


00:22:41.240 --> 00:22:42.920
to see how long it runs.


00:22:42.920 --> 00:22:45.160
May as well run it a couple times and see.


00:22:45.160 --> 00:22:49.400
- Yeah, and for people who didn't see yet


00:22:49.400 --> 00:22:52.720
the example from that first article you covered,


00:22:52.720 --> 00:22:55.600
a lot of those were CLI flags, right?


00:22:55.600 --> 00:23:00.600
Like dash dash, no, no's for disabling the plugin


00:23:00.600 --> 00:23:01.640
and so on.


00:23:01.640 --> 00:23:04.560
So you could have two commands on the command line


00:23:04.560 --> 00:23:08.160
where you basically change the command line arguments


00:23:08.160 --> 00:23:10.160
to determine those kinds of things, right?


00:23:10.160 --> 00:23:11.720
>> Yeah, exactly.


00:23:11.720 --> 00:23:15.400
So run it a couple times and run the test suite a couple times


00:23:15.400 --> 00:23:21.080
each and just see if I had these no flags or this other flag


00:23:21.080 --> 00:23:23.440
or with the environmental variable.


00:23:23.440 --> 00:23:25.480
Actually, I don't know how you could do that in there.


00:23:25.480 --> 00:23:28.360
You can set environmental variables in command line maybe.


00:23:28.360 --> 00:23:30.160
>> Yeah, I'm sure that you can somehow.


00:23:30.160 --> 00:23:30.840
>> Yeah.


00:23:30.840 --> 00:23:33.480
>> In my export statement or something, who knows?


00:23:33.480 --> 00:23:36.240
>> At the very least, you can run the same command twice.


00:23:36.240 --> 00:23:38.520
You can run it, set the environmental variable


00:23:38.520 --> 00:23:41.400
and then run it again to see if it makes a difference.


00:23:41.400 --> 00:23:42.240
- Yeah, absolutely.


00:23:42.240 --> 00:23:43.840
- So there's that, that was neat.


00:23:43.840 --> 00:23:46.920
I don't know why I've got the API referencing.


00:23:46.920 --> 00:23:51.240
Oh, the thing I wanted to talk about was duration.


00:23:51.240 --> 00:23:53.580
So let me find that, I think I lost it.


00:23:53.580 --> 00:23:59.880
We did talk about duration, durations, oh well.


00:23:59.880 --> 00:24:00.800
Oh, here it is.


00:24:00.800 --> 00:24:04.640
So durations, if you give it a number, like durations 10,


00:24:04.640 --> 00:24:07.200
pytest will give you like the 10 slowest tests


00:24:07.200 --> 00:24:09.360
and tell you how far, how slow they are.


00:24:09.360 --> 00:24:10.800
But you can, if you don't give it anything,


00:24:10.800 --> 00:24:12.020
it just does all of it.


00:24:12.020 --> 00:24:16.520
But the other thing that's been fairly recent,


00:24:16.520 --> 00:24:18.680
it wasn't there when I started using pytest


00:24:18.680 --> 00:24:19.800
is durations min.


00:24:19.800 --> 00:24:21.480
So you can give it,


00:24:21.480 --> 00:24:26.560
when you give it durations with a blank or in zero,


00:24:26.560 --> 00:24:29.080
it times everything, but you can,


00:24:29.080 --> 00:24:30.400
but that might be overwhelming.


00:24:30.400 --> 00:24:33.640
So you can give it a minimum duration in seconds


00:24:33.640 --> 00:24:36.080
to only include, only time the tests


00:24:36.080 --> 00:24:38.600
that are all over a second or something like that.


00:24:38.600 --> 00:24:39.440
- Right, right.


00:24:39.440 --> 00:24:42.240
If it's really, if it's 25 milliseconds,


00:24:42.240 --> 00:24:43.640
like just, I don't wanna see it.


00:24:43.640 --> 00:24:44.480
Don't bother. - Yeah.


00:24:44.480 --> 00:24:47.340
I'm not gonna spend time trying to speed that up, but yeah.


00:24:47.340 --> 00:24:50.880
Another cool thing brought up was a Pi instrument,


00:24:50.880 --> 00:24:55.480
which is a way to, it's a very pretty way to look at,


00:24:55.480 --> 00:24:58.320
you know, the times that you're spending on different things.


00:24:58.320 --> 00:24:59.400
It's not just for testing,


00:24:59.400 --> 00:25:00.520
but you could use it for other stuff.


00:25:00.520 --> 00:25:02.820
But apparently there's a, in the user guide,


00:25:02.820 --> 00:25:06.420
there is specifically how to profile your tests


00:25:06.420 --> 00:25:08.620
with pytest using PyInstrument.


00:25:08.620 --> 00:25:12.020
So that's a cool, cool bit of documentation.


00:25:12.020 --> 00:25:14.100
This doesn't, and this doesn't actually look obvious.


00:25:14.100 --> 00:25:16.380
So maybe I'm, maybe I'm looking at this wrong,


00:25:16.380 --> 00:25:19.960
but I'm glad, I'm glad, I'm glad they wrote this up.


00:25:19.960 --> 00:25:21.740
So this is kind of cool.


00:25:21.740 --> 00:25:24.860
- Basically profiling your, oh, interesting.


00:25:24.860 --> 00:25:27.540
And you do it as a fixture.


00:25:27.540 --> 00:25:28.380
- Yeah.


00:25:28.380 --> 00:25:31.380
- And so you create the profiler, you start the profiler,


00:25:31.380 --> 00:25:35.240
then you yield nothing, which triggers the test to run,


00:25:35.240 --> 00:25:37.680
and then you stop the profiler and do the output.


00:25:37.680 --> 00:25:39.260
That's really cool.


00:25:39.260 --> 00:25:40.720
- Yeah, pretty cool way to do that.


00:25:40.720 --> 00:25:42.680
So profiling each test.


00:25:42.680 --> 00:25:47.180
- Yeah, yeah, it's a bit mind bending on the coroutines.


00:25:47.180 --> 00:25:49.520
- So it's kind of cool they're using it as a fixture


00:25:49.520 --> 00:25:53.200
because if you had the fixtures set up as a,


00:25:53.200 --> 00:25:55.060
like it's set up by default as a function,


00:25:55.060 --> 00:25:56.620
so it'll go around every function.


00:25:56.620 --> 00:25:58.240
But if you set it up as a module,


00:25:58.240 --> 00:26:01.040
you could just find the slow module test modules


00:26:01.040 --> 00:26:04.200
in your system, which might be a easier way


00:26:04.200 --> 00:26:06.240
to speed things up for looking anyway.


00:26:06.240 --> 00:26:12.160
Oh, I was thrilled that my little pytest skip slow plugin


00:26:12.160 --> 00:26:14.400
that I developed as part of it.


00:26:14.400 --> 00:26:16.900
I didn't even come up with the ideas for the code,


00:26:16.900 --> 00:26:19.640
but that came out of the pytest documentation,


00:26:19.640 --> 00:26:20.760
but it wasn't a plugin yet,


00:26:20.760 --> 00:26:23.980
but I developed this plugin during writing


00:26:23.980 --> 00:26:25.200
the second edition of the book


00:26:25.200 --> 00:26:28.380
and it showed up in his article, which is cool.


00:26:28.380 --> 00:26:31.340
More interesting is pytest Socket,


00:26:31.340 --> 00:26:34.180
which is a plugin that can turn off,


00:26:34.180 --> 00:26:37.940
it just turns off socket, Python socket calls.


00:26:37.940 --> 00:26:43.220
And then it raises a particular exception.


00:26:43.220 --> 00:26:45.760
So it doesn't, like if you just install it,


00:26:45.760 --> 00:26:46.780
it doesn't turn things off.


00:26:46.780 --> 00:26:50.260
You have to pass in a disabled socket to your test suite


00:26:50.260 --> 00:26:54.180
and then it turns off accessing the external world.


00:26:54.180 --> 00:26:58.020
So this is a kind of a cool way to easily find out


00:26:58.020 --> 00:27:01.420
which tests are failing because your network is not connected.


00:27:01.420 --> 00:27:03.020
So go figure out if you really want to.


00:27:03.020 --> 00:27:05.140
>> If you want to say definitely don't talk to the network


00:27:05.140 --> 00:27:06.820
or don't talk to the database,


00:27:06.820 --> 00:27:09.020
turn off the network and see what happens.


00:27:09.020 --> 00:27:10.260
>> Yeah, and then you can, I mean,


00:27:10.260 --> 00:27:12.260
but even if you did want part of your test suite


00:27:12.260 --> 00:27:15.020
to access the network, you could test it to make sure


00:27:15.020 --> 00:27:16.820
that there aren't other parts of your test suite


00:27:16.820 --> 00:27:18.940
that are accessing it when they shouldn't.


00:27:18.940 --> 00:27:20.700
So it'd be cool debugging.


00:27:20.700 --> 00:27:21.780
>> Indeed.


00:27:21.780 --> 00:27:23.220
And then file system stuff too,


00:27:23.220 --> 00:27:25.980
there's PyFake FS fake file system


00:27:25.980 --> 00:27:27.820
that you can mock a file system.


00:27:27.820 --> 00:27:29.340
So even things that you wanna write,


00:27:29.340 --> 00:27:32.020
you don't actually have to have the files left around,


00:27:32.020 --> 00:27:34.140
you can leave them around just long enough to test them


00:27:34.140 --> 00:27:35.480
so you can use this.


00:27:35.480 --> 00:27:36.420
- That's perfect.


00:27:36.420 --> 00:27:38.780
- And then the last thing I thought was cool was a way,


00:27:38.780 --> 00:27:40.540
there's a thing called BlueRacer


00:27:40.540 --> 00:27:45.540
that you can attach to a GitHub CI to check in merges.


00:27:45.540 --> 00:27:50.900
So if somebody merges something,


00:27:50.900 --> 00:27:53.940
you can check to see if they've terribly slowed down


00:27:53.940 --> 00:27:54.820
your test suite.


00:27:54.820 --> 00:27:58.100
So it kind of reports that.


00:27:58.100 --> 00:28:00.860
I don't think it fails on slower tests,


00:28:00.860 --> 00:28:05.360
but it just sort of reports what's going on.


00:28:05.360 --> 00:28:08.260
So yeah, it gives you a little report of like,


00:28:08.260 --> 00:28:12.980
what happened on the branch and if the test suite slowed down


00:28:12.980 --> 00:28:15.140
so good things to know.


00:28:15.140 --> 00:28:17.540
- Yeah, that's a cool project, Blue Racer.


00:28:17.540 --> 00:28:18.940
Nice, okay.


00:28:18.940 --> 00:28:20.620
It's automatic, which is lovely.


00:28:20.620 --> 00:28:22.040
- Yeah.


00:28:22.040 --> 00:28:25.140
- Nice.


00:28:25.140 --> 00:28:27.260
All right, well, I've got one more item for us


00:28:27.260 --> 00:28:28.220
as well, Brian.


00:28:28.220 --> 00:28:29.380
- Yay.


00:28:29.380 --> 00:28:31.300
- So we talked a little bit about,


00:28:31.300 --> 00:28:32.780
you talked about PyUpgrade,


00:28:32.780 --> 00:28:35.500
the last show I think it was.


00:28:35.500 --> 00:28:36.340
- Yeah.


00:28:36.340 --> 00:28:37.860
- And we talked about some of these other ones.


00:28:37.860 --> 00:28:40.820
So I wanna talk about, I'm gonna give a shout out to Refurb.


00:28:40.820 --> 00:28:45.440
Very active project, last updated two days ago.


00:28:45.440 --> 00:28:48.500
1,600 stars.


00:28:48.500 --> 00:28:53.340
And the idea is basically you can point this at your code


00:28:53.340 --> 00:28:54.940
and it'll just say, here are the things


00:28:54.940 --> 00:28:58.860
that are making it seem like the old way of doing things.


00:28:58.860 --> 00:29:01.740
You should try doing it the newer way.


00:29:01.740 --> 00:29:05.860
So for example, here's something it's asking


00:29:05.860 --> 00:29:08.780
if the file name is in a list, right?


00:29:08.780 --> 00:29:11.940
The one of the ways you can see if file name equals X


00:29:11.940 --> 00:29:14.940
or file name equals Y or file name equals Z,


00:29:14.940 --> 00:29:18.820
You would say if filename in X comma Y or comma Z, right?


00:29:18.820 --> 00:29:20.500
And that's a more concise


00:29:20.500 --> 00:29:23.260
and often considered more Pythonic way.


00:29:23.260 --> 00:29:25.300
But do you need a whole list allocated


00:29:25.300 --> 00:29:26.540
just to ask that question?


00:29:26.540 --> 00:29:27.540
What about a tuple?


00:29:27.540 --> 00:29:32.020
And here we have a with open filename as F


00:29:32.020 --> 00:29:34.040
then contents F dot read.


00:29:34.040 --> 00:29:36.540
And we have the split lines and so on.


00:29:36.540 --> 00:29:40.260
And so, well, if you're using pathlib,


00:29:40.260 --> 00:29:42.180
just say path dot read text.


00:29:42.180 --> 00:29:44.500
You don't need the context manager.


00:29:44.500 --> 00:29:48.060
You don't need two lines, just do it all in one.


00:29:48.060 --> 00:29:49.940
And so on this simple little bit of code here,


00:29:49.940 --> 00:29:51.940
they just run refurb against your,


00:29:51.940 --> 00:29:53.940
this example Python file,


00:29:53.940 --> 00:29:59.780
and it'll say use tuple xyz instead of list xyz


00:29:59.780 --> 00:30:02.420
for that in case.


00:30:02.420 --> 00:30:03.860
And then what I really like about it


00:30:03.860 --> 00:30:05.900
is it finds like exactly the pattern that you're doing.


00:30:05.900 --> 00:30:10.140
So it says you're using with open something as F,


00:30:11.300 --> 00:30:15.500
then value equals f.read use, you know,


00:30:15.500 --> 00:30:18.700
value equals path of x.readText one line.


00:30:18.700 --> 00:30:20.660
It gives you like pretty, it doesn't say,


00:30:20.660 --> 00:30:22.260
you should use path readText.


00:30:22.260 --> 00:30:24.060
It gives you in the syntax of,


00:30:24.060 --> 00:30:27.580
here's the multiple lines you did, do this instead.


00:30:27.580 --> 00:30:30.780
Nice, right?


00:30:30.780 --> 00:30:32.900
- I don't think I've ever used readText.


00:30:32.900 --> 00:30:33.940
So I learned something new.


00:30:33.940 --> 00:30:36.240
- I hadn't either, but you know what I do now.


00:30:36.240 --> 00:30:37.820
(laughing)


00:30:37.820 --> 00:30:40.980
It also says you can replace xstarts with y


00:30:40.980 --> 00:30:44.540
or starts with Z with, starts with X,


00:30:44.540 --> 00:30:46.340
you know, Y comma Z as a tuple,


00:30:46.340 --> 00:30:47.700
and that'll actually test.


00:30:47.700 --> 00:30:49.500
- One or the other?


00:30:49.500 --> 00:30:50.500
- Yeah, one or the other.


00:30:50.500 --> 00:30:51.340
- Okay.


00:30:51.340 --> 00:30:53.060
- It says instead of printing with an empty string,


00:30:53.060 --> 00:30:54.700
there's no reason to allocate an empty string,


00:30:54.700 --> 00:30:57.500
just call print blank, that does the same effect.


00:30:57.500 --> 00:30:59.700
And just, there's a whole bunch of things like that


00:30:59.700 --> 00:31:00.720
that are really nice here.


00:31:00.720 --> 00:31:03.980
And yeah, just, you can ask it to explain,


00:31:03.980 --> 00:31:05.980
you're like, dude, what's going on here?


00:31:05.980 --> 00:31:08.140
It told, you told me to do one, two, three.


00:31:09.700 --> 00:31:11.100
what's the motivation?


00:31:11.100 --> 00:31:12.460
And you'll get kind of like a help text.


00:31:12.460 --> 00:31:14.200
Here's the bad version, here's the good version.


00:31:14.200 --> 00:31:15.940
Here's why you might consider that.


00:31:15.940 --> 00:31:19.660
So for example, given a string,


00:31:19.660 --> 00:31:24.540
don't cast it again to a string, just use it.


00:31:24.540 --> 00:31:27.060
Maybe more important is you can ignore errors.


00:31:27.060 --> 00:31:30.920
So you can ignore, just do a dash dash, ignore a number.


00:31:30.920 --> 00:31:34.460
There's one, which I'll show you in a second,


00:31:34.460 --> 00:31:37.340
which I've started adopting that for when I use it,


00:31:37.340 --> 00:31:39.140
or you can put a hash no QA.


00:31:39.140 --> 00:31:43.220
and put a particular warning to be disabled,


00:31:43.220 --> 00:31:45.820
or you can just say no, just leave this line alone.


00:31:45.820 --> 00:31:47.620
Like I just don't wanna hear it.


00:31:47.620 --> 00:31:48.580
Don't tell me.


00:31:48.580 --> 00:31:52.400
So you can say #noqa, then it'll catch like all of them.


00:31:52.400 --> 00:31:54.540
- Okay.


00:31:54.540 --> 00:31:57.860
- Okay, so I ran this on the Python Bytes website


00:31:57.860 --> 00:31:59.580
and we got this.


00:31:59.580 --> 00:32:00.660
It says,


00:32:00.660 --> 00:32:06.260
there's a part where it like builds up a list


00:32:06.260 --> 00:32:07.460
and then takes some things out


00:32:07.460 --> 00:32:08.980
trying to create a unique list.


00:32:08.980 --> 00:32:12.380
I think this might be for showing some of the testimonials.


00:32:12.380 --> 00:32:15.620
It says, give me a list of a bunch of testimonials,


00:32:15.620 --> 00:32:17.340
and then randomly pick some out of it,


00:32:17.340 --> 00:32:19.480
and then it'll delete the one it randomly picked,


00:32:19.480 --> 00:32:22.020
and then pick another so it doesn't get duplication.


00:32:22.020 --> 00:32:24.780
There's other things like that as well, also in the search.


00:32:24.780 --> 00:32:28.860
And so I write del x bracket y to get rid of the element,


00:32:28.860 --> 00:32:31.020
or whatever it's called, item.


00:32:31.020 --> 00:32:33.420
And they say, you know what, on a dictionary,


00:32:33.420 --> 00:32:35.700
you should just use x.pop of y.


00:32:37.500 --> 00:32:38.900
I think the Dell's kind of not obvious


00:32:38.900 --> 00:32:39.980
entirely what's going on.


00:32:39.980 --> 00:32:41.220
Sometimes it means free memory.


00:32:41.220 --> 00:32:43.780
Sometimes it means take the thing out of the list, right?


00:32:43.780 --> 00:32:45.300
So they're like, okay, do this.


00:32:45.300 --> 00:32:48.020
And I got the square bracket in warning


00:32:48.020 --> 00:32:51.700
instead of the parentheses, the tuple version.


00:32:51.700 --> 00:32:54.100
And then also I had a list


00:32:54.100 --> 00:32:56.820
and I wanted to make a separate shallow copy of it.


00:32:56.820 --> 00:32:58.940
So I said list of that thing.


00:32:58.940 --> 00:33:02.100
And it said, you can just do list.copy or thing.copy


00:33:02.100 --> 00:33:03.380
and it'll create the same thing,


00:33:03.380 --> 00:33:06.140
but it's a little more discoverable what the intention is.


00:33:06.140 --> 00:33:07.620
It's probably also more efficient.


00:33:07.620 --> 00:33:08.620
You can probably do it all at once


00:33:08.620 --> 00:33:10.700
instead of loop over it, who knows?


00:33:10.700 --> 00:33:12.580
Anyway, this is what I got running against


00:33:12.580 --> 00:33:13.760
our stuff like this.


00:33:13.760 --> 00:33:14.600
And you know what?


00:33:14.600 --> 00:33:15.420
I fixed it all.


00:33:15.420 --> 00:33:17.060
- Cool.


00:33:17.060 --> 00:33:20.200
- Except there's this one part


00:33:20.200 --> 00:33:23.020
where it's got a whole bunch of different tests


00:33:23.020 --> 00:33:24.580
to transform a string.


00:33:24.580 --> 00:33:26.740
And it's like line after line of dot replace,


00:33:26.740 --> 00:33:28.920
dot replace, dot replace, dot replace, dot replace.


00:33:28.920 --> 00:33:33.540
One of those lines is to replace tabs with spaces.


00:33:33.540 --> 00:33:35.220
Then eventually it finds all the spaces,


00:33:35.220 --> 00:33:38.660
turns them into single dashes and condenses them and whatnot.


00:33:38.660 --> 00:33:43.660
And it says, oh, you should change x.replace backslash T


00:33:43.660 --> 00:33:48.840
so tab with a space, replace that with x.expand tabs one.


00:33:48.840 --> 00:33:52.320
I'm like, no.


00:33:52.320 --> 00:33:58.160
Maybe if it was just a single line


00:33:58.160 --> 00:34:00.340
where the only call was to replace the tabs,


00:34:00.340 --> 00:34:03.560
but there's like seven replaces and they all make sense.


00:34:03.560 --> 00:34:07.440
replace tabs, replace lowercase with that,


00:34:07.440 --> 00:34:08.660
like all these other things.


00:34:08.660 --> 00:34:11.360
And if you just turn one of them into expand tabs,


00:34:11.360 --> 00:34:13.280
like where did this come like


00:34:13.280 --> 00:34:14.980
into the sequence of replacements?


00:34:14.980 --> 00:34:17.040
Like, why would you do this one thing?


00:34:17.040 --> 00:34:20.640
And so I just put a no QA on that one and fixed it up.


00:34:20.640 --> 00:34:22.840
But anyway, I found it to be pretty helpful


00:34:22.840 --> 00:34:25.020
and offering some nice recommendations.


00:34:25.020 --> 00:34:27.080
People can check it out.


00:34:27.080 --> 00:34:28.400
You can just run it in an entire directory.


00:34:28.400 --> 00:34:29.440
You don't have to run it on one file.


00:34:29.440 --> 00:34:33.000
Just say, you know, refurb./go.


00:34:33.000 --> 00:34:33.840
- Cool.


00:34:33.840 --> 00:34:38.840
Yeah, we should run like several of these


00:34:38.840 --> 00:34:40.320
and then just do them in a loop


00:34:40.320 --> 00:34:42.480
and see if it ever settles down.


00:34:42.480 --> 00:34:43.320
- Exactly.


00:34:43.320 --> 00:34:44.960
If you just keep taking its advice,


00:34:44.960 --> 00:34:46.620
does it upset the other one?


00:34:46.620 --> 00:34:48.240
- Yeah, like if you pi upgrade,


00:34:48.240 --> 00:34:50.240
and then refurb, and then black,


00:34:50.240 --> 00:34:52.360
and just some others.


00:34:52.360 --> 00:34:53.200
- Yeah.


00:34:53.200 --> 00:34:54.020
- Auto-pepe it.


00:34:54.020 --> 00:34:55.720
- Yeah, yeah.


00:34:55.720 --> 00:34:58.720
The goal of this one is to modernize Python code bases.


00:34:58.720 --> 00:34:59.840
If we had Python two code,


00:34:59.840 --> 00:35:01.360
I suspect it would go bonkers,


00:35:01.360 --> 00:35:04.120
but we don't, so it's okay.


00:35:04.120 --> 00:35:05.000
- But one of the cool things,


00:35:05.000 --> 00:35:07.040
you mentioned you weren't gonna do the expand tabs,


00:35:07.040 --> 00:35:09.720
but I didn't know about the expand tabs.


00:35:09.720 --> 00:35:14.720
So tools like this also just like teach you stuff


00:35:14.720 --> 00:35:15.920
that you may not have known about the language?


00:35:15.920 --> 00:35:18.320
- Yeah, like that read text versus a context manager


00:35:18.320 --> 00:35:20.120
and all sorts of stuff, yeah.


00:35:20.120 --> 00:35:21.920
Yeah, so the expand tabs,


00:35:21.920 --> 00:35:22.760
oh, where was I?


00:35:22.760 --> 00:35:23.580
It was over here.


00:35:23.580 --> 00:35:25.120
The expand tabs of one,


00:35:25.120 --> 00:35:27.480
that means replace the tab with one space.


00:35:27.480 --> 00:35:29.320
So if you wanted like four spaces for every tab,


00:35:29.320 --> 00:35:31.400
you would just say expand tabs four.


00:35:31.400 --> 00:35:33.080
- Which is probably correct, right?


00:35:33.080 --> 00:35:33.920
- Yeah, of course.


00:35:33.920 --> 00:35:35.000
(laughing)


00:35:35.000 --> 00:35:36.700
Of course it is, of course it is.


00:35:36.700 --> 00:35:39.720
All right, well that's it for all of our items.


00:35:39.720 --> 00:35:42.240
You got anything else you wanna throw out there?


00:35:42.240 --> 00:35:44.800
- I don't, how about you?


00:35:44.800 --> 00:35:45.920
- I do actually.


00:35:45.920 --> 00:35:47.880
All right, so let's see, I got a few things.


00:35:47.880 --> 00:35:49.240
I'll go through them quick.


00:35:49.240 --> 00:35:52.760
So another sequence of things


00:35:52.760 --> 00:35:54.480
that I think's pretty interesting.


00:35:54.480 --> 00:35:56.000
This is not really the main thing,


00:35:56.000 --> 00:35:58.200
but it's kind of starting the motivation.


00:35:58.200 --> 00:36:02.560
So we have over on all of our sites on Python Bytes,


00:36:02.560 --> 00:36:05.280
on Talk Python and Talk Python Training,


00:36:05.280 --> 00:36:07.400
we have the ability to do search.


00:36:07.400 --> 00:36:09.880
So for example, over on Talk Python Training,


00:36:09.880 --> 00:36:11.840
I can say ngrok API Postman.


00:36:11.840 --> 00:36:13.360
And the results you got were just like,


00:36:13.360 --> 00:36:14.960
previously were like this ugly list


00:36:14.960 --> 00:36:16.160
that you'd have to kind of make sense of.


00:36:16.160 --> 00:36:19.360
It was really not something I was too proud of.


00:36:19.360 --> 00:36:21.800
But I'm like, I'm not inspired to figure out a different UI,


00:36:21.800 --> 00:36:23.880
but I got inspired last week and said,


00:36:23.880 --> 00:36:25.280
okay, I'm gonna come up with this kind of like


00:36:25.280 --> 00:36:27.880
hierarchical view showing like, okay,


00:36:27.880 --> 00:36:30.960
if I search for say, ngrok API postman,


00:36:30.960 --> 00:36:32.940
I wanna see all the stuff that matches that


00:36:32.940 --> 00:36:37.940
out of the 240 hours of spoken word basically, right?


00:36:37.940 --> 00:36:41.300
On the site and all the descriptions and titles and so on.


00:36:41.300 --> 00:36:45.620
And so, like for example, this Twilio course I talked about


00:36:45.620 --> 00:36:48.500
used all those things and actually has one lecture


00:36:48.500 --> 00:36:52.180
where exactly it talks about all three of those things


00:36:52.180 --> 00:36:54.500
and then others where they're in there


00:36:54.500 --> 00:36:57.220
but like one video talks about ngrok


00:36:57.220 --> 00:36:59.260
and another one talks about an API or, you know,


00:36:59.260 --> 00:37:01.580
some, it's not really focused, right?


00:37:01.580 --> 00:37:02.820
And here just in this course,


00:37:02.820 --> 00:37:05.100
like it doesn't even exist in a single chapter,


00:37:05.100 --> 00:37:07.900
but across a hundred days of web and Python,


00:37:07.900 --> 00:37:09.980
like all those words are set.


00:37:09.980 --> 00:37:12.380
All right, so I came up with this search engine


00:37:12.380 --> 00:37:15.180
and well, the search engine existed,


00:37:15.180 --> 00:37:17.140
but it wasn't running in a,


00:37:17.140 --> 00:37:18.620
it wasn't basically hosted in a way


00:37:18.620 --> 00:37:19.500
that I was real happy with.


00:37:19.500 --> 00:37:24.500
So what I did is I took some of our advice from 2017.


00:37:24.500 --> 00:37:26.540
I said, you know what?


00:37:26.540 --> 00:37:30.740
I'm going to create a systemd service


00:37:30.740 --> 00:37:34.240
that just runs as part of Linux when I turn it on,


00:37:34.240 --> 00:37:36.820
that is gonna do all the indexing


00:37:36.820 --> 00:37:38.060
and a lot of the pre-processing,


00:37:38.060 --> 00:37:39.480
so that page can be super fast.


00:37:39.480 --> 00:37:41.860
So for example, like the response time for this page


00:37:41.860 --> 00:37:43.940
is effectively instant.


00:37:43.940 --> 00:37:46.380
It's like 30, 40 milliseconds, right?


00:37:46.380 --> 00:37:49.260
Even though it's doing tons of searching.


00:37:49.260 --> 00:37:52.980
So I'm gonna run this Python script,


00:37:52.980 --> 00:37:56.400
series of scripts in the lab, as a systemd service,


00:37:56.400 --> 00:37:57.540
which is excellent.


00:37:57.540 --> 00:37:59.020
And so we talked about how you can do that.


00:37:59.020 --> 00:38:02.400
And if you look, here's an example,


00:38:02.400 --> 00:38:05.960
basically you just create a systemd.service file


00:38:05.960 --> 00:38:08.920
and you say like Python space,


00:38:08.920 --> 00:38:11.520
your file with the arguments and you can set it up


00:38:11.520 --> 00:38:15.260
and it'll just auto start and be managed by system control,


00:38:15.260 --> 00:38:16.660
which is awesome.


00:38:16.660 --> 00:38:20.200
So that's all neat.


00:38:20.200 --> 00:38:22.280
The other thing I wanna give,


00:38:22.280 --> 00:38:24.160
the main thing I really wanna give some advice about though


00:38:24.160 --> 00:38:27.820
is those, these, these daemons,


00:38:27.820 --> 00:38:30.080
what they look like is while true,


00:38:30.080 --> 00:38:33.540
chill out for a while, do your thing,


00:38:33.540 --> 00:38:35.660
wait for an event, do your thing,


00:38:35.660 --> 00:38:37.720
look for a file, do your thing,


00:38:37.720 --> 00:38:39.160
then look for it for some more, right?


00:38:39.160 --> 00:38:41.120
You're just going over and over in this loop,


00:38:41.120 --> 00:38:43.760
like running, but often it's not busy, right?


00:38:43.760 --> 00:38:44.760
It's waiting for something.


00:38:44.760 --> 00:38:47.440
In the search thing, it's like waiting for an hour


00:38:47.440 --> 00:38:49.800
or something, then it'll rebuild the search.


00:38:49.800 --> 00:38:54.120
But it could just as well be waiting for a file to appear.


00:38:54.120 --> 00:38:57.720
in some kind of upload folder and then like start processing that.


00:38:57.720 --> 00:38:58.720
I don't know.


00:38:58.720 --> 00:38:59.720
Right.


00:38:59.720 --> 00:39:03.720
So, they almost always have this pattern of like while true,


00:39:03.720 --> 00:39:06.720
either wait for an event and then do it,


00:39:06.720 --> 00:39:09.720
or chill for a while and then do the thing.


00:39:09.720 --> 00:39:13.720
So, my recommendation, my thought here is,


00:39:13.720 --> 00:39:16.720
if you combine this with multi-processing,


00:39:16.720 --> 00:39:23.720
you can often get much, much lower overhead on your server.


00:39:23.720 --> 00:39:26.460
Right, so check this out.


00:39:26.460 --> 00:39:28.720
So here's an example of the search thing


00:39:28.720 --> 00:39:32.120
on talkbython search out of cliences.


00:39:32.120 --> 00:39:36.400
Notice it's using 78 megabytes of RAM.


00:39:36.400 --> 00:39:38.120
This is in show notes, of course.


00:39:38.120 --> 00:39:41.600
This is it just running there in the background.


00:39:41.600 --> 00:39:44.320
Before I started using multiprocessing,


00:39:44.320 --> 00:39:48.360
it was using like 300 megs of RAM constantly on the server.


00:39:48.360 --> 00:39:51.400
Because it would wait for an hour,


00:39:51.400 --> 00:39:55.360
and then it would load up the entire 240 hours of text


00:39:55.360 --> 00:39:57.800
and stuff and process it and do database calls


00:39:57.800 --> 00:40:00.720
and then generate like a search result,


00:40:00.720 --> 00:40:03.120
a search set of keyword maps,


00:40:03.120 --> 00:40:07.360
and then it would refresh those again.


00:40:07.360 --> 00:40:09.840
But normally it's just resting.


00:40:09.840 --> 00:40:11.400
It puts that stuff back in the database.


00:40:11.400 --> 00:40:14.000
But if you like let it actually do the work,


00:40:14.000 --> 00:40:19.000
it will basically not unload those modules


00:40:19.000 --> 00:40:21.360
and unload all that other stuff that happened in there.


00:40:21.360 --> 00:40:23.320
So if you take the function that says,


00:40:23.320 --> 00:40:25.800
just do the one thing in the loop


00:40:25.800 --> 00:40:28.460
and you just call that with multi-processing,


00:40:28.460 --> 00:40:33.400
it goes from 350 megs to 70 megs, no other work.


00:40:33.400 --> 00:40:34.920
'Cause that little thing fires up,


00:40:34.920 --> 00:40:36.560
it does all the work and then it shuts back down


00:40:36.560 --> 00:40:38.400
and it doesn't get like all that extra stuff


00:40:38.400 --> 00:40:39.720
loaded into your process.


00:40:39.720 --> 00:40:42.540
Cool, right?


00:40:42.540 --> 00:40:43.380
- It is cool.


00:40:43.380 --> 00:40:48.240
For special cases like ours, I mean, for yours,


00:40:48.240 --> 00:40:50.600
you could just kick it off yourself, right?


00:40:50.600 --> 00:40:52.800
or as Avid be part of your published thing


00:40:52.800 --> 00:40:55.020
when you publish the show notes.


00:40:55.020 --> 00:40:57.640
- Yeah, exactly.


00:40:57.640 --> 00:41:01.240
I mean, I could base it on some of that.


00:41:01.240 --> 00:41:04.280
Yeah, it could.


00:41:04.280 --> 00:41:07.840
It gets complicated because it's hard to tell


00:41:07.840 --> 00:41:08.960
when that happens.


00:41:08.960 --> 00:41:12.800
There's like a bunch, as you can see in this example,


00:41:12.800 --> 00:41:15.040
there's like eight worker processes.


00:41:15.040 --> 00:41:18.880
All right, so which one should be in charge of knowing that?


00:41:18.880 --> 00:41:22.000
I know it's, so it's, it's easy to just have that thing


00:41:22.000 --> 00:41:24.760
running and just like, you know, the search will be up to date


00:41:24.760 --> 00:41:27.360
and it's going, but please don't overwhelm the server


00:41:27.360 --> 00:41:30.880
by loading the entire thing and hanging on to it forever.


00:41:30.880 --> 00:41:31.700
Right?


00:41:31.700 --> 00:41:32.540
- Exactly.


00:41:32.540 --> 00:41:35.800
- Yeah. So anyway, I thought that was a fun story to share.


00:41:35.800 --> 00:41:38.100
Let's do this one next.


00:41:38.100 --> 00:41:43.100
We talked about JetBrains fleet, think PyCharm,


00:41:43.100 --> 00:41:48.240
PyCharm's like little cousin that is very much like VS Code.


00:41:48.240 --> 00:41:51.540
I guess, but as like PyCharm heritage.


00:41:51.540 --> 00:41:55.660
So this thing is now out of private beta,


00:41:55.660 --> 00:41:56.980
it's now into public beta.


00:41:56.980 --> 00:42:00.580
So it has like Google Docs type collaboration,


00:42:00.580 --> 00:42:04.940
it has, but it has like PyCharm source code refactoring


00:42:04.940 --> 00:42:08.900
and deep understanding that seems pretty excellent.


00:42:08.900 --> 00:42:12.860
So people can check that out, it looks pretty neat.


00:42:12.860 --> 00:42:14.740
I've done a little bit of playing with it,


00:42:14.740 --> 00:42:15.980
but not too much yet.


00:42:15.980 --> 00:42:18.700
But if you're a VS Code type of person,


00:42:18.700 --> 00:42:21.520
like this might speak to you more than PyCharm.


00:42:21.520 --> 00:42:22.600
So that's out.


00:42:22.600 --> 00:42:26.040
Speaking of PyCharm, I'm gonna be on a webcast


00:42:26.040 --> 00:42:29.060
with Paul Everett on Thursday.


00:42:29.060 --> 00:42:32.640
We're talking about Django and PyCharm tips reloaded.


00:42:32.640 --> 00:42:35.240
So just kind of a bunch of cool things you can do


00:42:35.240 --> 00:42:38.600
to if you're working in a Django project in PyCharm,


00:42:38.600 --> 00:42:40.840
you wanna be awesome and quick and efficient.


00:42:40.840 --> 00:42:43.280
Okay, last one.


00:42:43.280 --> 00:42:44.120
How about this?


00:42:45.120 --> 00:42:47.380
(laughing)


00:42:47.380 --> 00:42:48.220
- This is-


00:42:48.220 --> 00:42:49.320
- Go ahead.


00:42:49.320 --> 00:42:52.160
- This blows me away and it's interesting, so.


00:42:52.160 --> 00:42:53.400
- This is interesting.


00:42:53.400 --> 00:42:57.160
So we all have got to be familiar with the GDPR.


00:42:57.160 --> 00:42:59.080
I've did weeks worth of work


00:42:59.080 --> 00:43:02.500
reworking the various websites


00:43:02.500 --> 00:43:05.080
to be officially compliant with GDPR,


00:43:05.080 --> 00:43:08.680
like we weren't doing any creepy stuff,


00:43:08.680 --> 00:43:10.000
like, "Oh, now we gotta start,


00:43:10.000 --> 00:43:12.040
stop our tracking," or anything like that.


00:43:12.040 --> 00:43:13.100
But like, there's certain things about,


00:43:13.100 --> 00:43:17.660
You need to record the opt-in explicitly and be able to associate a record, like that kind


00:43:17.660 --> 00:43:18.820
of stuff.


00:43:18.820 --> 00:43:25.260
So some of us did a bunch of work to make our code GDPR compliant.


00:43:25.260 --> 00:43:27.260
Others not so much.


00:43:27.260 --> 00:43:33.620
But the news here is that Denmark has ruled that Google Analytics is illegal.


00:43:33.620 --> 00:43:37.620
I mean, like, okay.


00:43:37.620 --> 00:43:47.580
And illegal in the sense that the Google Analytics violates the GDPR and basically can't be used.


00:43:47.580 --> 00:43:56.620
I believe France and two other countries whose name I'm forgetting, I've also decided that


00:43:56.620 --> 00:43:57.620
as well.


00:43:57.620 --> 00:44:02.020
And yeah, more or less, a significant number


00:44:02.020 --> 00:44:05.180
of European countries are deciding


00:44:05.180 --> 00:44:08.180
that Google Analytics just can't be used


00:44:08.180 --> 00:44:12.340
if you are going to be following the GDPR, which


00:44:12.340 --> 00:44:19.340
I think most companies, in the West at least, need to follow.


00:44:19.340 --> 00:44:20.740
Yeah.


00:44:20.740 --> 00:44:22.620
So I'm glad.


00:44:22.620 --> 00:44:25.140
I mean, my early days of web stuff,


00:44:25.140 --> 00:44:27.780
I was using Google Analytics.


00:44:27.780 --> 00:44:29.420
Of course, a lot of people do.


00:44:29.420 --> 00:44:30.260
- Yeah.


00:44:30.260 --> 00:44:31.240
- And it's free.


00:44:31.240 --> 00:44:33.940
They give you all this information free.


00:44:33.940 --> 00:44:34.780
Why not?


00:44:34.780 --> 00:44:36.540
Why are they giving, oh, it's not--


00:44:36.540 --> 00:44:37.380
- Wait a minute.


00:44:37.380 --> 00:44:38.500
- Wait a second.


00:44:38.500 --> 00:44:40.500
They're using you and your website


00:44:40.500 --> 00:44:43.220
to help collect data on everybody that uses your website.


00:44:43.220 --> 00:44:44.780
- Yeah, it seems like such a good trade-off,


00:44:44.780 --> 00:44:46.660
but yeah, I mean, you're basically giving


00:44:46.660 --> 00:44:51.660
like every single action on your website,


00:44:51.660 --> 00:44:54.460
giving that information about your users,


00:44:54.460 --> 00:44:56.580
every one of their actions over to Google,


00:44:56.580 --> 00:44:58.420
which seems like a little,


00:44:58.420 --> 00:45:00.780
I could see why that would be looked down upon


00:45:00.780 --> 00:45:02.780
from a GDPR perspective, no doubt.


00:45:02.780 --> 00:45:05.500
By the way, also on that,


00:45:05.500 --> 00:45:08.960
if you look over on Pythonbytes.fm,


00:45:08.960 --> 00:45:12.740
the pay, let's see, does it say anything?


00:45:12.740 --> 00:45:15.140
How many blockers have we got,


00:45:15.140 --> 00:45:18.740
or how many creepy things do we have to worry about


00:45:18.740 --> 00:45:19.580
over here?


00:45:19.580 --> 00:45:21.020
Zero.


00:45:21.020 --> 00:45:23.980
We don't use Google Analytics, we don't use,


00:45:23.980 --> 00:45:26.260
Yeah, that's just global stats.


00:45:26.260 --> 00:45:28.340
But yeah, we don't use Google Analytics


00:45:28.340 --> 00:45:31.740
or any other form of client-side analytics whatsoever.


00:45:31.740 --> 00:45:34.240
So I'm pretty happy about that actually.


00:45:34.240 --> 00:45:38.580
But check out the video by Steve Gibson.


00:45:38.580 --> 00:45:41.020
It's an excerpt of a different podcast,


00:45:41.020 --> 00:45:42.980
but I think it's worth covering.


00:45:42.980 --> 00:45:44.740
It's pretty interesting.


00:45:44.740 --> 00:45:47.700
- Yeah, it's something to watch at least.


00:45:47.700 --> 00:45:49.260
- Yeah.


00:45:49.260 --> 00:45:51.580
Yeah, Ikevu points out in the audience,


00:45:51.580 --> 00:45:53.020
how can you enforce something like that?


00:45:53.020 --> 00:45:55.360
that is Google Analytics being not allowed.


00:45:55.360 --> 00:45:57.460
It's embedded in so many sites everywhere.


00:45:57.460 --> 00:45:59.220
Sometimes you don't even manage it.


00:45:59.220 --> 00:46:02.280
You just enter an analytics ID.


00:46:02.280 --> 00:46:06.460
Yeah, it's honestly a serious problem.


00:46:06.460 --> 00:46:10.080
Like for example, on our Python Bytes website,


00:46:10.080 --> 00:46:12.800
if you go to one of the newer episodes,


00:46:12.800 --> 00:46:17.500
they all have a nice little picture.


00:46:17.500 --> 00:46:20.600
That picture is from the YouTube thumbnail.


00:46:20.600 --> 00:46:23.340
Like it literally pulls it straight from YouTube.


00:46:23.340 --> 00:46:25.920
The first thing I tried to do, Brian,


00:46:25.920 --> 00:46:27.960
was I said, well, here's the image


00:46:27.960 --> 00:46:32.340
that YouTube uses for the poster on the video.


00:46:32.340 --> 00:46:34.680
So I'll just put a little image where the source is


00:46:34.680 --> 00:46:38.640
youtube.com/video-poster, whatever the heck the URL is.


00:46:38.640 --> 00:46:39.480
- Yeah.


00:46:39.480 --> 00:46:43.400
- Even for that, Google started putting tracking cookies


00:46:43.400 --> 00:46:45.080
on all of our visitors.


00:46:45.080 --> 00:46:47.840
Like, come on, Google, it's just an image, no.


00:46:47.840 --> 00:46:49.280
- Tracking pixels, yeah.


00:46:49.280 --> 00:46:51.240
- Yeah, so, or cookies, right?


00:46:51.240 --> 00:46:52.960
So what I had to end up doing is


00:46:52.960 --> 00:46:58.960
the website on the server side looks at the URL,


00:46:58.960 --> 00:47:01.320
downloads the images, puts it in MongoDB,


00:47:01.320 --> 00:47:02.360
and when a visitor comes,


00:47:02.360 --> 00:47:04.720
we serve it directly out of MongoDB with no cookies.


00:47:04.720 --> 00:47:08.600
Like, it is not trivial to avoid


00:47:08.600 --> 00:47:09.880
getting that kind of stuff in there,


00:47:09.880 --> 00:47:12.480
because even when you try not to,


00:47:12.480 --> 00:47:15.420
it shows up a lot of times, like Ikovu mentioned.


00:47:15.420 --> 00:47:18.960
The way it gets enforced, somebody says,


00:47:18.960 --> 00:47:23.360
here's a big website, they're violating the GDPR,


00:47:23.360 --> 00:47:26.140
we're gonna recommend, I'm gonna report them basically


00:47:26.140 --> 00:47:27.340
is what happens I think.


00:47:27.340 --> 00:47:33.240
- Yeah, but I think for small fish like me or something,


00:47:33.240 --> 00:47:36.920
it's just if a country says don't do that,


00:47:36.920 --> 00:47:40.520
maybe I won't because they might have good reasons.


00:47:40.520 --> 00:47:42.920
- Yeah, and if you're a business,


00:47:42.920 --> 00:47:44.000
you gotta worry a lot more.


00:47:44.000 --> 00:47:47.200
I don't think any individual will ever get in trouble


00:47:47.200 --> 00:47:56.740
for that, but it's also, I mean, think about how much you're exposing everybody's information.


00:47:56.740 --> 00:48:00.460
And you can't know before you go to a website whether that's going to happen.


00:48:00.460 --> 00:48:02.180
It's already happened once you get there.


00:48:02.180 --> 00:48:07.740
So I guess, see our previous conversation about ad blockers, next DNS, do we hate creators?


00:48:07.740 --> 00:48:08.740
No.


00:48:08.740 --> 00:48:10.740
Do we hate this kind of stuff?


00:48:10.740 --> 00:48:11.840
Yes.


00:48:11.840 --> 00:48:16.340
Also information is interesting, but just pay attention to what you have because you


00:48:16.340 --> 00:48:18.860
You don't need Google Analytics to just find out


00:48:18.860 --> 00:48:20.740
which pages are viewed most.


00:48:20.740 --> 00:48:21.580
- Absolutely. - Things like that.


00:48:21.580 --> 00:48:23.620
You can use other ways, so.


00:48:23.620 --> 00:48:24.860
- Yep.


00:48:24.860 --> 00:48:26.980
All right, well, that's a bunch of extras,


00:48:26.980 --> 00:48:27.980
but there they are.


00:48:27.980 --> 00:48:29.740
- That's so serious, though.


00:48:29.740 --> 00:48:31.060
Do we have something funny? - I know.


00:48:31.060 --> 00:48:32.320
We do.


00:48:32.320 --> 00:48:34.580
Something, I got something, this is very much,


00:48:34.580 --> 00:48:36.540
I picked this one for you, Brian.


00:48:36.540 --> 00:48:37.380
- Okay.


00:48:37.380 --> 00:48:39.340
- So this has to do with testing.


00:48:39.340 --> 00:48:40.420
Tell me what's in this picture here.


00:48:40.420 --> 00:48:41.820
Describe for our listeners.


00:48:41.820 --> 00:48:43.200
- I love this picture.


00:48:43.200 --> 00:48:46.260
This is great.


00:48:46.260 --> 00:48:51.600
So it says all unit test passing, and it is a completely shattered sink.


00:48:51.600 --> 00:48:56.440
They're the only thing left of the sink is the faucet is still attached to some


00:48:56.440 --> 00:49:00.700
porcelain, you can turn it on and it goes down the drain actually.


00:49:00.700 --> 00:49:03.060
So you've already, you've even got integration tests.


00:49:03.060 --> 00:49:03.940
Yeah, you do.


00:49:03.940 --> 00:49:07.320
This is pretty, yeah, it's pretty, not a hundred percent coverage, but


00:49:07.320 --> 00:49:09.740
yeah, right.


00:49:09.740 --> 00:49:11.620
Not a hundred percent coverage of the sink.


00:49:11.620 --> 00:49:12.740
Yeah.


00:49:12.740 --> 00:49:14.840
There's this sink and it's completely smashed.


00:49:14.840 --> 00:49:17.960
there's just like just a little tiny chunk fragment


00:49:17.960 --> 00:49:19.440
of it left, but it's got the drain


00:49:19.440 --> 00:49:21.360
and the faucet is still pouring into it.


00:49:21.360 --> 00:49:22.960
Unit test pass, I love it.


00:49:22.960 --> 00:49:24.680
- Yeah, you might even cut yourself


00:49:24.680 --> 00:49:29.240
if you tried to wash your hands in this, but funny.


00:49:29.240 --> 00:49:30.600
- You might, you might.


00:49:30.600 --> 00:49:32.020
(laughing)


00:49:32.020 --> 00:49:34.360
Well, fun as always.


00:49:34.360 --> 00:49:35.320
Thanks for being here.


00:49:35.320 --> 00:49:36.360
- Thank you.


00:49:36.360 --> 00:49:37.400
- Yeah, see you later.


00:49:37.400 --> 00:49:39.080
Thank you everyone for listening.


00:49:39.080 --> 00:49:39.920
- Bye.


00:49:39.920 --> 00:49:49.920
[BLANK_AUDIO]

