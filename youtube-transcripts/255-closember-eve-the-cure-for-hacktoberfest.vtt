WEBVTT

00:00:00.000 --> 00:00:07.000
>> Hey, everybody. >> Hey, all.


00:00:07.000 --> 00:00:12.000
>> Welcome to the stream. So let's just kick it off.


00:00:12.000 --> 00:00:15.000
>> Yeah. >> Hello and welcome to Python Bytes, where


00:00:15.000 --> 00:00:22.000
we deliver Python news and headlines directly to your earbuds. It's episode 255, recorded


00:00:22.000 --> 00:00:27.000
October 20th, 2021. I'm Brian Okken. >> I'm Michael Kennedy.


00:00:27.000 --> 00:00:30.200
And I'm Will McGoogan.


00:00:30.200 --> 00:00:31.480
Welcome, Will.


00:00:31.480 --> 00:00:31.980
Thank you.


00:00:31.980 --> 00:00:35.200
Good to be here.


00:00:35.200 --> 00:00:39.800
Yeah, so I'm sure people know who you are through all you


00:00:39.800 --> 00:00:43.600
do with Textual and Rich.


00:00:43.600 --> 00:00:47.680
But could you do a quick intro?


00:00:47.680 --> 00:00:48.240
Sure, yeah.


00:00:48.240 --> 00:00:54.320
I'm a software developer from Edinburgh, Scotland.


00:00:54.320 --> 00:00:56.320
Last couple of years, been working quite heavily


00:00:56.320 --> 00:01:04.840
open source, I built Rich and I started work on Textual, which is an application framework


00:01:04.840 --> 00:01:12.360
using Rich. And I'm currently working exclusively on that. So I've taken a year off, probably


00:01:12.360 --> 00:01:17.840
more than that, to work on open source projects. I'm very excited about that.


00:01:17.840 --> 00:01:22.200
We're excited about it too.


00:01:22.200 --> 00:01:23.200
That's fantastic, Will.


00:01:23.200 --> 00:01:29.520
I think we've talked about this offline as well, the success you're having with Rich


00:01:29.520 --> 00:01:34.960
and Textual and this opportunity you have to really just double down on this project


00:01:34.960 --> 00:01:35.960
you created.


00:01:35.960 --> 00:01:38.920
And I know there must be thousands of maintainers of projects out there.


00:01:38.920 --> 00:01:44.200
If I could just put all my energy into this and you're currently lucky enough to be in


00:01:44.200 --> 00:01:45.200
that situation, right?


00:01:45.200 --> 00:01:46.200
That's fantastic.


00:01:46.200 --> 00:01:48.320
Yeah, I'm very fortunate, actually.


00:01:48.320 --> 00:01:53.320
I mean, I put some money aside, I planned for this year,


00:01:53.320 --> 00:01:56.820
but things are really looking up


00:01:56.820 --> 00:01:59.640
and I've been blown away by the level of interest from it.


00:01:59.640 --> 00:02:03.280
I mean, it gradually ramped up with rich people,


00:02:03.280 --> 00:02:04.120
people like that.


00:02:04.120 --> 00:02:07.200
I think there was a missing niche for something


00:02:07.200 --> 00:02:10.640
which did that, but then with the textual,


00:02:10.640 --> 00:02:12.160
people were excited about it.


00:02:12.160 --> 00:02:15.480
I mean, I put a disclaimer on the readme


00:02:15.480 --> 00:02:18.240
that said it's not quite ready for prime time yet.


00:02:18.240 --> 00:02:21.800
It might break and is in active development,


00:02:21.800 --> 00:02:25.320
but it doesn't seem to discourage anyone.


00:02:25.320 --> 00:02:27.800
Very busy building things with it.


00:02:27.800 --> 00:02:28.760
So I'm excited.


00:02:28.760 --> 00:02:32.280
I want to take it to the next level.


00:02:32.280 --> 00:02:34.840
And to be honest, if I was doing it part-time,


00:02:34.840 --> 00:02:39.200
like I was doing Rich, it would just take too long.


00:02:39.200 --> 00:02:42.240
If it was evening and weekends, it would be two years


00:02:42.240 --> 00:02:46.040
before it was 1.0.


00:02:46.040 --> 00:02:48.280
- Yeah, and we're ready to use it now, so.


00:02:48.280 --> 00:02:50.900
- Yeah, most people wanna use it yesterday.


00:02:50.900 --> 00:02:54.460
- Cool.


00:02:54.460 --> 00:02:55.280
- Yeah, that's fantastic.


00:02:55.280 --> 00:02:56.800
Congrats again on that, that's cool.


00:02:56.800 --> 00:02:58.160
It's great stuff, you know,


00:02:58.160 --> 00:02:59.640
we've talked about it over on Talk Python,


00:02:59.640 --> 00:03:00.480
if people wanna dive in.


00:03:00.480 --> 00:03:03.680
We've certainly covered it many times over here as well,


00:03:03.680 --> 00:03:06.080
so we're happy to spread the word on it.


00:03:06.080 --> 00:03:08.440
- Well, Michael, let's kick off the topics.


00:03:08.440 --> 00:03:09.520
- I do wanna kick it off.


00:03:09.520 --> 00:03:12.040
All right, how about we start


00:03:12.040 --> 00:03:15.560
with some awesome Python topic like C++?


00:03:15.560 --> 00:03:16.660
- I like both of them.


00:03:16.660 --> 00:03:18.000
(laughing)


00:03:18.000 --> 00:03:20.040
- This is right in your wheelhouse, Brian.


00:03:20.040 --> 00:03:20.880
A lot of C++.


00:03:20.880 --> 00:03:25.680
So I wanna talk about this tutorial article series,


00:03:25.680 --> 00:03:26.820
how everyone think about it,


00:03:26.820 --> 00:03:30.680
of wrapping C++ code with Cython.


00:03:30.680 --> 00:03:33.660
So the interoperability story with C and Python,


00:03:33.660 --> 00:03:36.680
being C, Python as the runtime,


00:03:36.680 --> 00:03:38.360
is pretty straightforward, right?


00:03:38.360 --> 00:03:41.320
But C++ is a little more interesting with classes


00:03:41.320 --> 00:03:44.280
and this pointers and all those kinds of things.


00:03:44.280 --> 00:03:52.580
So the basic idea is Cython is this thing that allows us to write very nearly Python code


00:03:52.580 --> 00:03:59.580
and sometimes actually just Python code, sometimes like in a little extended language of Python


00:03:59.580 --> 00:04:01.580
that then compiles down to C.


00:04:01.580 --> 00:04:08.780
And if that's the case, well, it's probably pretty easy to get that Cython code to work with C code.


00:04:08.780 --> 00:04:12.860
And then Cython naturally is exposed as Python objects


00:04:12.860 --> 00:04:15.320
and variables and whatnot.


00:04:15.320 --> 00:04:17.140
So that should be a good bridge


00:04:17.140 --> 00:04:19.560
between C++ and Python, right?


00:04:19.560 --> 00:04:20.400
And it turns out it is.


00:04:20.400 --> 00:04:25.400
So this person Anton Zydan-Pushkin wrote an article


00:04:25.400 --> 00:04:28.640
or is working on a series of articles


00:04:28.640 --> 00:04:31.380
called "Wrapping C++ with Cython."


00:04:31.380 --> 00:04:35.820
And so there's this library called Yarkirl,


00:04:35.820 --> 00:04:37.940
yet another audio recognition library.


00:04:37.940 --> 00:04:39.580
And it's kind of like Shazam.


00:04:39.580 --> 00:04:41.780
It'll, you give it a small fragment of audio


00:04:41.780 --> 00:04:44.700
and it'll say, oh, that's Pearl Jam black,


00:04:44.700 --> 00:04:47.340
you know, black by Pearl Jam or something like that.


00:04:47.340 --> 00:04:48.940
Right, pretty cool.


00:04:48.940 --> 00:04:53.620
And if you look at it, it's got some neat C++ features.


00:04:53.620 --> 00:04:55.340
You know, Brian, feel free to jump in on this,


00:04:55.340 --> 00:04:58.340
but see that right there, namespace, so cool.


00:04:58.340 --> 00:05:02.540
I love how they're writing like well-structured


00:05:02.540 --> 00:05:04.020
C++ code here.


00:05:04.020 --> 00:05:06.020
But basically there's a couple of structures


00:05:06.020 --> 00:05:09.220
like a wave file and an mp3 file and then classes


00:05:09.220 --> 00:05:11.580
which have like a fingerprint and public methods


00:05:11.580 --> 00:05:12.780
and storage and so on.


00:05:12.780 --> 00:05:16.500
And so the idea is how could we take this


00:05:16.500 --> 00:05:20.620
and potentially make this a Python library, right?


00:05:20.620 --> 00:05:24.040
Basically create a Python wrapper with Cython for it.


00:05:24.040 --> 00:05:25.820
So gonna come down here and says,


00:05:25.820 --> 00:05:26.660
all right, well, what we're gonna do


00:05:26.660 --> 00:05:29.900
is we're gonna write some Cython code


00:05:29.900 --> 00:05:34.900
and Cython doesn't immediately know how to take a Python


00:05:34.900 --> 00:05:39.340
take a C++ header file, which is where stuff is defined in C++,


00:05:39.340 --> 00:05:43.540
and turn that into things that Python understands.


00:05:43.540 --> 00:05:47.260
So you've got to write basically a little file,


00:05:47.260 --> 00:05:50.820
a PXD file, that declares what the


00:05:50.820 --> 00:05:55.780
interface looks like. So you write code like this. Have you done this stuff before, Brian?


00:05:55.780 --> 00:05:59.300
No, but this looks pretty straightforward.


00:05:59.300 --> 00:06:00.820
Yeah, it's pretty straightforward. How about you, Will?


00:06:00.820 --> 00:06:04.020
I've never wrote to a library, but I've used Cython


00:06:04.020 --> 00:06:06.420
quite successfully, so it's a really good system.


00:06:06.420 --> 00:06:09.920
Yeah, I agree. I've done it, but not to wrap C++ code.


00:06:09.920 --> 00:06:13.420
So basically, you do things like cdef extern from this header,


00:06:13.420 --> 00:06:17.020
create a namespace, and then you have cdef,


00:06:17.020 --> 00:06:19.620
a keyword, cpp class,


00:06:19.620 --> 00:06:25.020
and then you get, what's interesting about this is you get to give it two names.


00:06:25.020 --> 00:06:29.120
You get to say, here's the name, I want to talk about it in Python,


00:06:29.120 --> 00:06:31.420
so cpp wave file,


00:06:31.420 --> 00:06:37.580
And then here's its name in C, which is yarrr-control-colon-colon-wav file.


00:06:37.580 --> 00:06:41.820
And the value of this is they want to have a thing called wav file in Python,


00:06:41.820 --> 00:06:45.420
but not the C++ one, a friendly Python one,


00:06:45.420 --> 00:06:47.900
but it needs to use the wav file from the C library.


00:06:47.900 --> 00:06:50.940
So if you directly import it, then there's like this name clash,


00:06:50.940 --> 00:06:53.180
which I suppose you could fix with namespaces and all,


00:06:53.180 --> 00:06:56.380
but I think it's cool that you can give it this name,


00:06:56.380 --> 00:07:00.620
this kind of this internal name, and off it goes, right?


00:07:00.620 --> 00:07:03.220
So then you def out its methods, basically,


00:07:03.220 --> 00:07:06.980
like just here are the functions of the class.


00:07:06.980 --> 00:07:09.780
Same thing for the fingerprint and the storage,


00:07:09.780 --> 00:07:10.700
and off it goes.


00:07:10.700 --> 00:07:13.340
And so all of this stuff is pretty neat.


00:07:13.340 --> 00:07:15.300
And yeah, this thing I'm talking about


00:07:15.300 --> 00:07:18.940
is called aliasing, which is pretty awesome.


00:07:18.940 --> 00:07:23.260
Like it lets you reserve the name, wave file,


00:07:23.260 --> 00:07:25.660
and storage, and fingerprint, and stuff like that


00:07:25.660 --> 00:07:28.300
for your Python library without,


00:07:28.300 --> 00:07:30.700
even though that's what the C names are as well.


00:07:30.700 --> 00:07:34.340
So yeah, pretty straightforward.


00:07:34.340 --> 00:07:36.100
What was the next thing I really wanna highlight?


00:07:36.100 --> 00:07:37.260
There's kind of this long article here.


00:07:37.260 --> 00:07:41.620
So the next thing they talk about


00:07:41.620 --> 00:07:44.620
is using this thing called extension types.


00:07:44.620 --> 00:07:50.660
So an extension is just a C structure or C++ library


00:07:50.660 --> 00:07:55.660
and you create some class that is kind of a proxy to it.


00:07:56.080 --> 00:07:59.560
So here we say cdef Python class called storage,


00:07:59.560 --> 00:08:03.980
and then internal it has in Cython language,


00:08:03.980 --> 00:08:08.980
you have to say cdef, it has a C++ class called this.


00:08:08.980 --> 00:08:09.860
And then from then on,


00:08:09.860 --> 00:08:12.600
you just go and write standard Python code.


00:08:12.600 --> 00:08:14.540
And anytime you need to talk to the C library,


00:08:14.540 --> 00:08:18.400
you just work with the inner pointer thing


00:08:18.400 --> 00:08:21.520
that you've created, which is pretty awesome.


00:08:21.520 --> 00:08:23.840
You just new one up in the constructor,


00:08:23.840 --> 00:08:25.480
and the C++ thing.


00:08:25.480 --> 00:08:29.080
And then it goes off to Python's memory management,


00:08:29.080 --> 00:08:31.560
so you don't have to worry about deleting it,


00:08:31.560 --> 00:08:33.000
stuff like that.


00:08:33.000 --> 00:08:34.800
I guess you do have to sort of deallocate it,


00:08:34.800 --> 00:08:36.360
but once you write that code,


00:08:36.360 --> 00:08:38.980
then Python will just take it from there, right?


00:08:38.980 --> 00:08:41.760
So pretty neat way to do this.


00:08:41.760 --> 00:08:43.480
And the library goes on to talk about


00:08:43.480 --> 00:08:45.040
how you use it and so on.


00:08:45.040 --> 00:08:46.720
So there's a couple of interesting things


00:08:46.720 --> 00:08:49.600
about dereferencing the pointer,


00:08:49.600 --> 00:08:52.760
like basically modeling reference types in Python.


00:08:52.760 --> 00:08:54.400
But if you've got a C++ library


00:08:54.400 --> 00:08:56.300
that you want to integrate here.


00:08:56.300 --> 00:08:58.680
I think this is a pretty cool hands-on way


00:08:58.680 --> 00:08:59.640
to do with Cython.


00:08:59.640 --> 00:09:03.280
- Yeah, I think this looks fun.


00:09:03.280 --> 00:09:04.780
I'd like to give it a try.


00:09:04.780 --> 00:09:08.000
- Yeah, definitely.


00:09:08.000 --> 00:09:10.800
Another one is PyBind11.


00:09:10.800 --> 00:09:13.320
That might also be another option to look at.


00:09:13.320 --> 00:09:16.500
So I saw Henry out in the live stream there.


00:09:16.500 --> 00:09:19.300
So here's another way to seamlessly


00:09:19.300 --> 00:09:22.680
between C++11 and Python.


00:09:22.680 --> 00:09:27.640
So another option in this realm,


00:09:27.640 --> 00:09:30.060
maybe I'll throw that link into the show notes as well.


00:09:30.060 --> 00:09:33.400
But yeah, a lot of cool stuff for taking these libraries


00:09:33.400 --> 00:09:37.160
written in C++ and turning them into Python friendly,


00:09:37.160 --> 00:09:39.120
feeling Python native libraries.


00:09:39.120 --> 00:09:43.800
- Well, that's really how a lot of Python's taken off, right?


00:09:43.800 --> 00:09:45.560
Is because we've been able to take


00:09:45.560 --> 00:09:48.440
these super powerful C++ libraries


00:09:48.440 --> 00:09:50.580
and wrap a Python interface into it


00:09:50.580 --> 00:09:52.160
and have them stay up to date


00:09:52.160 --> 00:09:56.360
when you make updates to the C and C++ code,


00:09:56.360 --> 00:09:58.460
you can get updates to the Python as well.


00:09:58.460 --> 00:10:03.320
- You sometimes hear Python described as a glue language.


00:10:03.320 --> 00:10:07.080
I think many years ago, that's probably what it was.


00:10:07.080 --> 00:10:10.000
I think Python's grown, it's more than just a glue language,


00:10:10.000 --> 00:10:14.240
but it's very good at connecting other languages together.


00:10:14.240 --> 00:10:15.760
- It's still good as a glue language.


00:10:15.760 --> 00:10:18.320
- Yeah, it's not just a glue language,


00:10:18.320 --> 00:10:21.280
it's a language of its own, I guess.


00:10:21.280 --> 00:10:24.640
- Yeah, I was talking to somebody over on Talk Python


00:10:24.640 --> 00:10:29.280
and I'm super sorry if I forgot which conversation this was,


00:10:29.280 --> 00:10:31.800
but they described Python as a glue language


00:10:31.800 --> 00:10:32.720
for web development.


00:10:32.720 --> 00:10:34.480
I thought, okay, that's kind of a weird way to think of it.


00:10:34.480 --> 00:10:35.720
But Arun said, "Well, no, no, look,


00:10:35.720 --> 00:10:37.520
here's what you do with your web framework.


00:10:37.520 --> 00:10:38.600
You glue things together.


00:10:38.600 --> 00:10:42.880
You glue your database over to your network response.


00:10:42.880 --> 00:10:45.640
You glue an API call into that."


00:10:45.640 --> 00:10:48.780
I'm like, "Actually, that's kind of is what a website is.


00:10:48.780 --> 00:10:51.540
It talks to databases, it talks to external APIs,


00:10:51.540 --> 00:10:54.580
it talks to the network in terms of like HTML responses,


00:10:54.580 --> 00:10:57.220
and that's the entire web framework.


00:10:57.220 --> 00:10:59.220
But yeah, you can kind of even think of those things


00:10:59.220 --> 00:11:01.180
in those terms there.


00:11:01.180 --> 00:11:03.940
- It's like a party where no one's talking to each other


00:11:03.940 --> 00:11:07.180
and you need someone to like start conversations,


00:11:07.180 --> 00:11:08.580
is what Python does.


00:11:08.580 --> 00:11:11.700
- Yeah, yeah, and I think also that that's why Python


00:11:11.700 --> 00:11:14.220
is so fast for web frameworks,


00:11:14.220 --> 00:11:16.720
even though computationally it's not super fast.


00:11:16.720 --> 00:11:20.080
It's mostly spending a little time in its own code,


00:11:20.080 --> 00:11:21.000
but a lot of time it's like,


00:11:21.000 --> 00:11:22.080
oh, I'm waiting on the database,


00:11:22.080 --> 00:11:22.920
I'm waiting on the network,


00:11:22.920 --> 00:11:24.000
I'm waiting on an API,


00:11:24.000 --> 00:11:27.160
and that's where web apps spend their time anyway,


00:11:27.160 --> 00:11:28.560
so it doesn't matter.


00:11:28.560 --> 00:11:31.720
All right, Brian, you want to grab the next one?


00:11:31.720 --> 00:11:32.560
- Yeah, sure.


00:11:32.560 --> 00:11:34.800
- Bump it on to topic two.


00:11:34.800 --> 00:11:35.640
- Bump it on.


00:11:35.640 --> 00:11:40.180
So I've got, I just have a few packages


00:11:40.180 --> 00:11:42.440
that I support on PyPI,


00:11:42.440 --> 00:11:44.920
and then a whole bunch of internal packages I work on.


00:11:44.920 --> 00:11:47.920
And one of the things that is a checklist that I've got


00:11:47.920 --> 00:11:50.920
is what do I do when I bump the version?


00:11:50.920 --> 00:11:54.480
And I know that there have been some automated bump tools


00:11:54.480 --> 00:11:56.840
before, but they've kind of--


00:11:56.840 --> 00:11:57.400
I don't know.


00:11:57.400 --> 00:11:59.320
They make too many assumptions, I think,


00:11:59.320 --> 00:12:02.720
about how you structure your code.


00:12:02.720 --> 00:12:05.480
So I was really happy to see tbump come by.


00:12:05.480 --> 00:12:11.120
This was suggested by Sefi Beri.


00:12:11.120 --> 00:12:14.400
So tbump is an open source package that was developed--


00:12:14.400 --> 00:12:17.140
Looks like it was developed in-house by somebody,


00:12:17.140 --> 00:12:20.000
but then their employer said, "Hey, go for it, open source it."


00:12:20.000 --> 00:12:21.640
So that's cool.


00:12:21.640 --> 00:12:24.900
And the idea really is you just--


00:12:24.900 --> 00:12:28.380
you-- it's just to bump versions, and that's it.


00:12:28.380 --> 00:12:30.700
But it does a whole bunch of cool stuff.


00:12:30.700 --> 00:12:32.380
It does-- so let's say I've got--


00:12:32.380 --> 00:12:33.500
I've got to initialize it.


00:12:33.500 --> 00:12:36.020
So you initialize it as a little TOML file


00:12:36.020 --> 00:12:39.540
that stores the information in the configuration.


00:12:39.540 --> 00:12:41.940
But if you don't want yet another TOML file


00:12:41.940 --> 00:12:44.380
or another configuration that can also append that


00:12:44.380 --> 00:12:46.700
to the pyproject.toml.


00:12:46.700 --> 00:12:48.980
And I thought that was a nice addition.


00:12:48.980 --> 00:12:53.220
You can combine them or keep it separate, up to you.


00:12:53.220 --> 00:12:55.820
And so for instance, I tried it on one of my projects.


00:12:55.820 --> 00:12:57.480
And I kept it separate because I didn't


00:12:57.480 --> 00:13:01.180
want to muck up my pyproject.toml file.


00:13:01.180 --> 00:13:04.300
But once you initialize it, all you


00:13:04.300 --> 00:13:07.100
have to do when you want to add and bump a new version


00:13:07.100 --> 00:13:11.180
is just say tbump and then give it the new version.


00:13:11.180 --> 00:13:13.220
It doesn't automatically count up.


00:13:13.220 --> 00:13:15.420
I mean, you could probably write a wrapper that counts up,


00:13:15.420 --> 00:13:17.100
but looking at your own version


00:13:17.100 --> 00:13:19.980
and deciding what the new one is, is reasonable.


00:13:19.980 --> 00:13:21.900
That's a reasonable way to do it.


00:13:21.900 --> 00:13:25.420
And then it goes out and it,


00:13:25.420 --> 00:13:28.420
so it patches any versions you've got,


00:13:28.420 --> 00:13:31.180
and then in your code, in your code base,


00:13:31.180 --> 00:13:34.020
or your files, your compute files, or wherever.


00:13:34.020 --> 00:13:38.840
And then it commits those changes.


00:13:38.840 --> 00:13:41.080
It adds a version tag, pushes your code,


00:13:41.080 --> 00:13:42.580
pushes the version tag.


00:13:42.580 --> 00:13:45.380
And then also you can have these optional run things,


00:13:45.380 --> 00:13:47.120
places where like before you commit,


00:13:47.120 --> 00:13:48.440
you can run some stuff.


00:13:48.440 --> 00:13:50.000
Like for instance, check to make sure


00:13:50.000 --> 00:13:52.960
that you've added that version to your change log


00:13:52.960 --> 00:13:55.840
or if you want to check your documentation.


00:13:55.840 --> 00:13:57.180
So that's pretty cool.


00:13:57.180 --> 00:13:59.880
And then you can have post actions.


00:13:59.880 --> 00:14:02.360
If you wanted to, I was thinking a post action


00:14:02.360 --> 00:14:03.200
would be cool.


00:14:03.200 --> 00:14:04.760
You could just automatically tweet out,


00:14:04.760 --> 00:14:06.320
hey, a new version is here.


00:14:06.320 --> 00:14:08.520
That's somehow hook that up, that'd be fun.


00:14:08.520 --> 00:14:09.800
- Yeah, grab the first line now,


00:14:09.800 --> 00:14:11.560
the release nodes just tweet that.


00:14:11.560 --> 00:14:16.440
Yeah, and then there's the hard part really is,


00:14:16.440 --> 00:14:20.040
how does it know where to change the version?


00:14:20.040 --> 00:14:22.240
And that's where part of the configuration,


00:14:22.240 --> 00:14:23.780
I think it's really pretty cool.


00:14:23.780 --> 00:14:27.960
It just has this file configuration setting--


00:14:27.960 --> 00:14:30.200
let's see if I can find it on here--


00:14:30.200 --> 00:14:33.760
that you list the source.


00:14:33.760 --> 00:14:37.760
And then you can also list the configuration of it.


00:14:37.760 --> 00:14:39.240
Let me grab one.


00:14:39.240 --> 00:14:45.000
So the source and then how to look for it.


00:14:45.000 --> 00:14:47.200
So it's a search string or something


00:14:47.200 --> 00:14:49.120
of what line to look for and then


00:14:49.120 --> 00:14:50.800
where to replace the version.


00:14:50.800 --> 00:14:53.320
And that's pretty straight--


00:14:53.320 --> 00:14:55.480
I mean, you kind of have to do some hand tweaking


00:14:55.480 --> 00:14:56.360
to get this to work.


00:14:56.360 --> 00:14:59.320
But for instance, it's just a couple of lines.


00:14:59.320 --> 00:15:00.720
It makes it pretty nice.


00:15:00.720 --> 00:15:03.160
At first, I thought, well, it's not that much work anyway.


00:15:03.160 --> 00:15:04.880
But it's way less work now.


00:15:04.880 --> 00:15:07.480
And then frankly, I usually forget.


00:15:07.480 --> 00:15:09.480
I'll remember to push the version,


00:15:09.480 --> 00:15:12.080
but I'll forget to make sure that the version's


00:15:12.080 --> 00:15:13.440
in the changelog.


00:15:13.440 --> 00:15:17.600
I'll forget to push the tags to GitHub


00:15:17.600 --> 00:15:19.800
because I don't really use the tags,


00:15:19.800 --> 00:15:22.840
the version tags in GitHub, but I know other people do.


00:15:22.840 --> 00:15:24.840
So it's kind of nice. - Yeah, it's nice.


00:15:24.840 --> 00:15:28.240
Yeah, Will, what do you think as someone


00:15:28.240 --> 00:15:31.320
who ships libraries frequently that matter?


00:15:31.320 --> 00:15:34.040
- I think it's useful.


00:15:34.040 --> 00:15:35.840
I think for my libraries, I've got the version


00:15:35.840 --> 00:15:38.720
in two places, two files.


00:15:38.720 --> 00:15:44.180
So for me, it's like edit 2000, done.


00:15:44.180 --> 00:15:48.420
Probably wouldn't be like massive time saver,


00:15:48.420 --> 00:15:50.440
but I like the other things you can do with it,


00:15:50.440 --> 00:15:52.480
the actions you can attach to it,


00:15:52.480 --> 00:15:56.480
like creating a tag in GitHub,


00:15:56.480 --> 00:15:58.880
'cause I do often, quite often forget that,


00:15:58.880 --> 00:16:00.640
especially for like minor releases.


00:16:00.640 --> 00:16:04.200
I sometimes forget that, so that's quite useful.


00:16:04.200 --> 00:16:06.800
- Yeah, it's the extra stuff.


00:16:06.800 --> 00:16:08.160
It's not just changing the files,


00:16:08.160 --> 00:16:10.720
but like Brian described, like creating a branch,


00:16:10.720 --> 00:16:12.720
creating a tag, pushing all that stuff over,


00:16:12.720 --> 00:16:13.680
making sure they're in sync.


00:16:13.680 --> 00:16:14.640
That's pretty cool.


00:16:14.640 --> 00:16:17.580
- Yeah.


00:16:17.580 --> 00:16:18.480
- Yeah, good find.


00:16:18.480 --> 00:16:21.080
This does more than I expected when I saw the title.


00:16:21.080 --> 00:16:26.140
- What do we got next?


00:16:26.140 --> 00:16:31.160
- Well, I'll go first one.


00:16:31.160 --> 00:16:33.440
- This is Close Amber.


00:16:33.440 --> 00:16:38.440
which is, what's the portmanteau,


00:16:38.440 --> 00:16:41.700
when you put two words together, November and close.


00:16:41.700 --> 00:16:44.120
The idea is to help open source maintainers


00:16:44.120 --> 00:16:49.220
close issues and close PRs.


00:16:49.220 --> 00:16:53.340
- So is this like to recover from the hangover of Hacktober?


00:16:53.340 --> 00:16:54.980
- Hacktober, I think so.


00:16:54.980 --> 00:16:57.860
I didn't do Hacktober this year.


00:16:57.860 --> 00:16:58.940
- I didn't either, no.


00:16:58.940 --> 00:17:03.540
Last year, I mean, I got a lot of PRs coming in.


00:17:03.540 --> 00:17:06.900
Some of them were of dubious quality.


00:17:06.900 --> 00:17:11.460
Some of them just, some of them are very good, actually.


00:17:11.460 --> 00:17:13.700
I did actually benefit a lot,


00:17:13.700 --> 00:17:17.300
but it does actually generate extra work.


00:17:17.300 --> 00:17:19.100
If you manage it, it's really great.


00:17:19.100 --> 00:17:22.700
But this is, it generates more work for you,


00:17:22.700 --> 00:17:24.580
even though it's in your benefit,


00:17:24.580 --> 00:17:27.900
but Close Ember is purely to take work away from you,


00:17:27.900 --> 00:17:30.100
work away from maintainers.


00:17:30.100 --> 00:17:33.180
You know, there's lots of issues.


00:17:33.180 --> 00:17:34.980
I mean, I've been very busy lately


00:17:34.980 --> 00:17:37.140
and not kept an eye on the rich issues


00:17:37.140 --> 00:17:39.180
and they've just held up.


00:17:39.180 --> 00:17:43.980
Some of them can be closed with a little bit of effort.


00:17:43.980 --> 00:17:45.500
So I think that's what this project


00:17:45.500 --> 00:17:48.500
as more of a movement than a project designed to do.


00:17:48.500 --> 00:17:52.020
It's designed to take away some of that burden


00:17:52.020 --> 00:17:54.180
from maintainers.


00:17:54.180 --> 00:17:58.660
And it's a very nice website here.


00:17:58.660 --> 00:18:02.060
There's a leaderboard and all different issues.


00:18:02.060 --> 00:18:09.900
And it describes what you should do to close issues and PRs.


00:18:09.900 --> 00:18:14.020
The author, his name is Matthias Boussonniere.


00:18:14.020 --> 00:18:17.380
I've probably mispronounced that.


00:18:17.380 --> 00:18:19.260
He started this.


00:18:19.260 --> 00:18:23.740
And I think he's going to turn into a movement, possibly--


00:18:23.740 --> 00:18:28.020
It's too soon to really get big this year,


00:18:28.020 --> 00:18:31.060
but I'm hoping that next year it'll be a big thing.


00:18:31.060 --> 00:18:34.220
It'll be after October you can relax a bit


00:18:34.220 --> 00:18:36.940
because someone, you'll get lots of people coming in


00:18:36.940 --> 00:18:41.940
to fix your issues and clear some PRs and things like that.


00:18:41.940 --> 00:18:44.660
I mean, sometimes it's maintenance,


00:18:44.660 --> 00:18:49.660
it's just tidying up, closing PRs which have been merged


00:18:49.660 --> 00:18:53.260
and closing issues which have been fixed,


00:18:53.260 --> 00:18:55.940
that kind of thing, so I think it's a great thing.


00:18:55.940 --> 00:18:58.100
- So I guess I don't quite get what it is.


00:18:58.100 --> 00:19:01.820
Is it a call out to people to help maintainers?


00:19:01.820 --> 00:19:04.260
- Yeah, yeah, it's like a month long thing.


00:19:04.260 --> 00:19:07.540
It was almost like a competition that they've--


00:19:07.540 --> 00:19:09.280
- Yeah, they got like a lead for it, right?


00:19:09.280 --> 00:19:10.120
- Yeah.


00:19:10.120 --> 00:19:13.380
- Yeah, yeah, Matias is a core developer


00:19:13.380 --> 00:19:17.740
of Jupyter and IPython, so he's definitely working


00:19:17.740 --> 00:19:20.260
on some of the main projects there, which is great.


00:19:20.260 --> 00:19:21.900
- He probably understands the burden


00:19:21.900 --> 00:19:25.100
of an open source maintainer.


00:19:25.100 --> 00:19:30.100
Even if you love something, it can be hard work.


00:19:30.100 --> 00:19:32.840
- Too much of a good thing, right?


00:19:32.840 --> 00:19:35.180
Yeah, yeah, very cool.


00:19:35.180 --> 00:19:40.020
- But no T-shirt for this, at least not this year.


00:19:40.020 --> 00:19:41.860
- I don't think they'll have T-shirts, no.


00:19:41.860 --> 00:19:43.140
Maybe next year.


00:19:43.140 --> 00:19:45.500
- I wonder if you can add your project to this.


00:19:45.500 --> 00:19:50.820
- I think you can tag your project with Closember.


00:19:50.820 --> 00:19:52.560
I think that's how it works.


00:19:52.560 --> 00:19:55.020
And then other people can search for it


00:19:55.020 --> 00:19:58.040
and decide which one they want to help with.


00:19:58.040 --> 00:20:00.140
- Yeah.


00:20:00.140 --> 00:20:01.580
All right, cool. - That's pretty cool.


00:20:01.580 --> 00:20:03.860
Nice.


00:20:03.860 --> 00:20:05.860
- Nice, nice.


00:20:05.860 --> 00:20:06.680
Good one.


00:20:06.680 --> 00:20:09.220
Brian, am I next?


00:20:09.220 --> 00:20:12.020
- I think you are next. - I am, all right.


00:20:12.020 --> 00:20:15.260
So another Brian, Brian Skin sent over,


00:20:15.260 --> 00:20:16.100
thank you, Brian,


00:20:16.100 --> 00:20:17.220
been sending a ton of stuff our way lately


00:20:17.220 --> 00:20:18.460
and we really appreciate it.


00:20:18.460 --> 00:20:19.740
- Yeah, keep it coming.


00:20:19.740 --> 00:20:20.580
Yeah.


00:20:20.580 --> 00:20:25.760
So this one is, the announcement is that scikit-learn


00:20:25.760 --> 00:20:27.440
goes 1.0.


00:20:27.440 --> 00:20:28.680
And if you look at the version history,


00:20:28.680 --> 00:20:33.120
it's been zero for, zero-ver for a long time


00:20:33.120 --> 00:20:37.280
with being, you know, 0.20, 0.21, 0.22, 0.


00:20:37.280 --> 00:20:41.520
So this release is really a realization


00:20:41.520 --> 00:20:45.160
that the library has been super stable for a long time,


00:20:45.160 --> 00:20:48.640
but here's a signal to everyone consuming scikit-learn


00:20:48.640 --> 00:20:53.640
that in fact, we intended, they intended to be stable.


00:20:53.640 --> 00:20:58.220
So there's certain groups and organizations


00:20:58.220 --> 00:21:02.760
that just perceive zero-over stuff as not finished,


00:21:02.760 --> 00:21:04.960
especially in the enterprise space,


00:21:04.960 --> 00:21:07.960
in the places that are not typically working


00:21:07.960 --> 00:21:10.880
in open source as much, but are bringing these libraries in.


00:21:10.880 --> 00:21:13.020
You can see managers like, we can't use scikit-learn,


00:21:13.020 --> 00:21:16.360
it's not even done, 0.24, come on.


00:21:16.360 --> 00:21:19.360
So this sort of closes that gap as well as signals


00:21:19.360 --> 00:21:21.600
that the API is pretty stable.


00:21:21.600 --> 00:21:28.140
Will, Textual is not quite ready for this, is it yet?


00:21:28.140 --> 00:21:29.760
- No, it's still on zero.


00:21:29.760 --> 00:21:31.960
'Cause I'm kind of advertising


00:21:31.960 --> 00:21:35.040
that I might change a signature next version


00:21:35.040 --> 00:21:37.160
and break your code.


00:21:37.160 --> 00:21:39.880
Never do that lightly, but it's always a possibility.


00:21:39.880 --> 00:21:44.200
So if you use a zero point version bit of anything,


00:21:44.200 --> 00:21:47.400
you should probably pin that and just make sure


00:21:47.400 --> 00:21:50.640
that if there's an update that you check your code.


00:21:50.640 --> 00:21:54.120
- Right, as a consumer of Rich or a consumer of Flask


00:21:54.120 --> 00:21:56.960
or a consumer of whatever, if you're using Azure,


00:21:56.960 --> 00:21:59.640
you're recommending you pin that in your application


00:21:59.640 --> 00:22:01.600
or library that uses it, right?


00:22:01.600 --> 00:22:02.600
- Yeah, exactly.


00:22:02.600 --> 00:22:05.540
I mean, you might want to pin anyway,


00:22:05.540 --> 00:22:08.600
just to lots of bits of software working together.


00:22:08.600 --> 00:22:10.960
There could be problems with one update here


00:22:10.960 --> 00:22:13.440
that breaks this bit of software here.


00:22:13.440 --> 00:22:16.160
When you got 1.0, that's the library developer


00:22:16.160 --> 00:22:20.120
is telling you, I'm not gonna break anything


00:22:20.120 --> 00:22:22.200
backwards compatibility without bumping


00:22:22.200 --> 00:22:25.080
that major version number.


00:22:25.080 --> 00:22:27.040
If they're using SEMVer, but because there's lots


00:22:27.040 --> 00:22:32.040
of other versioning schemes that have the pros and cons.


00:22:32.040 --> 00:22:34.160
- Yeah, like calendar-based versioning


00:22:34.160 --> 00:22:35.320
and stuff like that, right?


00:22:35.320 --> 00:22:36.160
- Yeah, yeah.


00:22:36.160 --> 00:22:39.840
- I think that makes more sense in an application


00:22:39.840 --> 00:22:41.140
than it does in a library.


00:22:42.680 --> 00:22:44.880
calendar versioning.


00:22:44.880 --> 00:22:45.720
- Yeah.


00:22:45.720 --> 00:22:50.600
How much calendar versioning makes sense for libraries?


00:22:50.600 --> 00:22:52.200
Maybe it does, I don't know.


00:22:52.200 --> 00:22:53.360
- I think projects that,


00:22:53.360 --> 00:22:55.720
some projects that have shifted to CalVar


00:22:55.720 --> 00:22:59.000
have recognized that they really are


00:22:59.000 --> 00:23:01.440
almost never changing backwards compatibility.


00:23:01.440 --> 00:23:04.400
So it doesn't,


00:23:04.400 --> 00:23:07.420
they're never going to go to a higher number.


00:23:07.420 --> 00:23:12.640
- Yeah, it's strange that there's no one perfect system.


00:23:12.640 --> 00:23:18.520
I quite like soundbar and by and large it does what I need of it, but there is no


00:23:18.520 --> 00:23:22.800
Perfect system really? Yeah, I like it as well


00:23:22.800 --> 00:23:25.840
Just the whole zero verb being for like something is on zero version


00:23:25.840 --> 00:23:32.280
You're not something for 15 years like that doesn't make sense. Yeah, so this is we're talking about the one dot over Lisa psychic learn


00:23:32.280 --> 00:23:37.920
We have a quick shout out to some of the new features or some of the features are highlighting


00:23:38.320 --> 00:23:43.320
So it exposes many functions and methods which take lots of parameters like hist


00:23:43.320 --> 00:23:46.320
gradient boosting regressor.


00:23:46.320 --> 00:23:48.320
Use that all the time? No, not really.


00:23:48.320 --> 00:23:51.320
But it takes, I don't know, what is that, 15 parameters?


00:23:51.320 --> 00:23:56.320
Like 20, 0, 255, none, none, false.


00:23:56.320 --> 00:23:58.320
What? What are these, right?


00:23:58.320 --> 00:24:03.320
And so a lot of these are moving to require you to explicitly say


00:24:03.320 --> 00:24:08.320
a min sample leaf is 20, L2 regularization is zero,


00:24:08.320 --> 00:24:11.440
max bins is 255, like keyword arguments


00:24:11.440 --> 00:24:13.520
to make it more readable and clear.


00:24:13.520 --> 00:24:17.920
- I like to make virtually all my arguments keyword only.


00:24:17.920 --> 00:24:20.880
I might have one or two positional arguments,


00:24:20.880 --> 00:24:22.200
but the rest keyword only.


00:24:22.200 --> 00:24:25.600
I think it makes code more descriptive.


00:24:25.600 --> 00:24:28.040
You can look at that code and then you know


00:24:28.040 --> 00:24:30.880
at a glance what this argument does.


00:24:31.760 --> 00:24:33.720
- Yeah, absolutely.


00:24:33.720 --> 00:24:36.160
- Yeah, it drives me nuts when there's like,


00:24:36.160 --> 00:24:38.520
I want all the defaults except for like,


00:24:38.520 --> 00:24:40.760
something special at the last one.


00:24:40.760 --> 00:24:44.240
And I've got to like fill in all of them just to hit that.


00:24:44.240 --> 00:24:45.560
- Yeah.


00:24:45.560 --> 00:24:48.920
And also, I would love to throw out that this is way better


00:24:48.920 --> 00:24:52.960
than star star KW args, way better, right?


00:24:52.960 --> 00:24:55.560
If you've got 10 optional parameters


00:24:55.560 --> 00:24:56.720
that have maybe defaults


00:24:56.720 --> 00:24:58.060
or don't need to have a specified value,


00:24:58.060 --> 00:25:00.000
make them keyword arguments,


00:25:00.000 --> 00:25:02.440
means that the tooling like PyCharm and VS Code


00:25:02.440 --> 00:25:06.640
will show you autocomplete for these.


00:25:06.640 --> 00:25:08.120
I mean, if it's truly open-ended


00:25:08.120 --> 00:25:10.080
and you don't know what could be passed,


00:25:10.080 --> 00:25:11.320
star, star, KWArgs.


00:25:11.320 --> 00:25:13.240
But if you do know what could be passed,


00:25:13.240 --> 00:25:15.560
something like this is way better as well.


00:25:15.560 --> 00:25:16.400
Right?


00:25:16.400 --> 00:25:17.480
Very much more discussed.


00:25:17.480 --> 00:25:19.240
- Yeah, you have to type more.


00:25:19.240 --> 00:25:20.360
If you've got like a signature


00:25:20.360 --> 00:25:23.120
which takes the same prompt as something else,


00:25:23.120 --> 00:25:24.400
you just have to type it all over again.


00:25:24.400 --> 00:25:26.360
That can be a bit tedious.


00:25:26.360 --> 00:25:28.240
But it's very beneficial, I think,


00:25:28.240 --> 00:25:30.400
for the tooling, like you said.


00:25:30.400 --> 00:25:33.000
- Yeah, indeed.


00:25:33.000 --> 00:25:34.600
Also for typing, right?


00:25:34.600 --> 00:25:36.680
You can say that this keyword argument thing


00:25:36.680 --> 00:25:38.520
is an integer and that one's a string, right?


00:25:38.520 --> 00:25:42.400
If it's star star KWR, you're just any any, great.


00:25:42.400 --> 00:25:44.400
Okay, or string any.


00:25:44.400 --> 00:25:47.400
Okay, so we also have new spline transformers.


00:25:47.400 --> 00:25:52.240
So you can create spline Bezier curves, which is cool.


00:25:52.240 --> 00:25:55.140
Quintile regressor is updated,


00:25:55.140 --> 00:25:56.640
Featured name support.


00:25:56.640 --> 00:25:59.840
So when you're doing an estimator


00:25:59.840 --> 00:26:02.280
pass to a pandas data frame during a fit,


00:26:02.280 --> 00:26:05.160
it will, estimator will set up feature names


00:26:05.160 --> 00:26:07.600
and attribute containing the feature names, right?


00:26:07.600 --> 00:26:08.880
So that's pretty cool.


00:26:08.880 --> 00:26:10.360
Some examples of that.


00:26:10.360 --> 00:26:12.840
A more flexible plotting API,


00:26:12.840 --> 00:26:17.160
online one class SVM for all sorts of cool graphs.


00:26:17.160 --> 00:26:19.040
Histogram based gradient boosting models


00:26:19.040 --> 00:26:21.440
are stable and new documentation.


00:26:21.440 --> 00:26:22.920
And of course you can launch it in a binder


00:26:22.920 --> 00:26:25.400
and play with it, which is pretty sweet.


00:26:25.400 --> 00:26:28.680
So, congrats to the scikit-learn folks.


00:26:28.680 --> 00:26:32.760
That's very nice and also kind of interesting


00:26:32.760 --> 00:26:36.480
to get your take on API changes and versioning stuff, Will.


00:26:36.480 --> 00:26:40.700
- Yeah, cool.


00:26:40.700 --> 00:26:45.440
- Oh, before we move on, Brian,


00:26:45.440 --> 00:26:47.480
I saw a quick question that maybe makes sense


00:26:47.480 --> 00:26:50.320
to throw over to Will from Andre.


00:26:52.160 --> 00:26:53.280
Everybody keeps asking this.


00:26:53.280 --> 00:26:55.520
So I've ordered a Windows--


00:26:55.520 --> 00:26:57.040
- The question is when will there be


00:26:57.040 --> 00:26:59.120
Windows support for Textual?


00:26:59.120 --> 00:27:01.520
- Yeah, I've ordered a Windows laptop.


00:27:01.520 --> 00:27:03.080
I've been working on a VM,


00:27:03.080 --> 00:27:05.480
but it's a pain to work on a VM.


00:27:05.480 --> 00:27:06.520
I've ordered a Windows laptop,


00:27:06.520 --> 00:27:09.080
and that's gonna arrive end of this month.


00:27:09.080 --> 00:27:12.460
And I don't know exactly when,


00:27:12.460 --> 00:27:16.400
but that'll definitely need that to get started.


00:27:16.400 --> 00:27:21.100
And in theory, it should only be a week or two of work.


00:27:21.100 --> 00:27:25.020
So, how far this year?


00:27:25.020 --> 00:27:27.980
- After the month of configuring your laptop.


00:27:27.980 --> 00:27:28.900
- That's true.


00:27:28.900 --> 00:27:29.740
That's true.


00:27:29.740 --> 00:27:31.620
I haven't used Windows in I don't know how long


00:27:31.620 --> 00:27:33.020
apart from a VM.


00:27:33.020 --> 00:27:36.340
I'm gonna test it with a new Windows terminal,


00:27:36.340 --> 00:27:38.020
which is actually really, really good.


00:27:38.020 --> 00:27:39.940
- Yeah, the Windows terminal is good.


00:27:39.940 --> 00:27:42.980
- Yeah, I think it can be like a first class,


00:27:42.980 --> 00:27:45.760
like textual platform.


00:27:45.760 --> 00:27:49.060
The Mac works great.


00:27:49.060 --> 00:27:49.900
Linux works great.


00:27:49.900 --> 00:27:52.840
Windows has always been like a bit of a black sheep,


00:27:52.840 --> 00:27:55.660
but the new Windows Terminal is a godsend


00:27:55.660 --> 00:27:58.300
'cause the old terminal was frankly terrible.


00:27:58.300 --> 00:28:00.000
It hadn't been updated in decades.


00:28:00.000 --> 00:28:04.140
- Yeah, the old school one is no good,


00:28:04.140 --> 00:28:06.000
but the new Windows Terminal is really good.


00:28:06.000 --> 00:28:09.340
Also, just a quick shout out for some support here.


00:28:09.340 --> 00:28:11.140
Nice comment, Tushar.


00:28:11.140 --> 00:28:12.620
Windows support will be provided


00:28:12.620 --> 00:28:15.220
when you click the pink button on Will's GitHub profile,


00:28:15.220 --> 00:28:16.780
aka the sponsor button.


00:28:16.780 --> 00:28:19.380
(laughing)


00:28:19.380 --> 00:28:20.500
- I'm sure you would. - It's not a ransom,


00:28:20.500 --> 00:28:22.660
I promise, I do intend to do.


00:28:22.660 --> 00:28:26.060
- All right.


00:28:26.060 --> 00:28:30.580
Well, how about some server stuff?


00:28:30.580 --> 00:28:37.900
We talked, I can't remember,


00:28:37.900 --> 00:28:40.460
I think several times talked about how to use,


00:28:40.460 --> 00:28:43.020
how to develop packages while you're offline.


00:28:43.020 --> 00:28:46.060
Like say you're on an airplane or at the beach


00:28:46.060 --> 00:28:47.420
or something with no wifi.


00:28:47.420 --> 00:28:49.500
I mean, maybe there's Wi-Fi at the beach,


00:28:49.500 --> 00:28:51.740
but not at the beaches I go to.


00:28:51.740 --> 00:28:55.100
- That's because you live in Oregon


00:28:55.100 --> 00:28:58.340
and some of the most rural parts are the beach.


00:28:58.340 --> 00:29:00.460
If this was California, you'd have 5G.


00:29:00.460 --> 00:29:02.980
- Yeah, well, I mean, I could tether my phone to it


00:29:02.980 --> 00:29:05.340
or something, but anyway.


00:29:05.340 --> 00:29:08.660
So Jason Coombs sent over an article


00:29:08.660 --> 00:29:12.500
using DevPi as an offline PiPI cache.


00:29:12.500 --> 00:29:15.700
And I gotta tell you, to be honest,


00:29:15.700 --> 00:29:18.000
I don't know if it's just the documentation for DevPi


00:29:18.000 --> 00:29:20.000
or the other tutorials.


00:29:20.000 --> 00:29:23.080
It just threw out a few commands,


00:29:23.080 --> 00:29:25.840
and they're like, you're good.


00:29:25.840 --> 00:29:26.680
That'll work.


00:29:26.680 --> 00:29:28.120
And I just never got it.


00:29:28.120 --> 00:29:30.600
I've tried, and it just didn't work for me.


00:29:30.600 --> 00:29:31.520
But this did.


00:29:31.520 --> 00:29:34.680
So this tutorial is just a straightforward, OK,


00:29:34.680 --> 00:29:37.280
we're just going to walk you through exactly everything


00:29:37.280 --> 00:29:37.880
you do.


00:29:37.880 --> 00:29:39.800
It's really not that much.


00:29:39.800 --> 00:29:42.240
For instance, he suggests using PIPX


00:29:42.240 --> 00:29:45.920
to install a DevPi server, which is nice.


00:29:45.920 --> 00:29:46.760
- Yeah, it's cool.


00:29:46.760 --> 00:29:49.160
The tbump package as well suggested


00:29:49.160 --> 00:29:50.720
installing itself with pipx.


00:29:50.720 --> 00:29:53.640
pipx is gaining a lot of momentum.


00:29:53.640 --> 00:29:56.600
- Well, especially things like, well, like, yeah,


00:29:56.600 --> 00:29:59.960
tbump or, well, or DevPi.


00:29:59.960 --> 00:30:01.360
I don't know if I'd do it with tbump


00:30:01.360 --> 00:30:02.920
because I want other package maintainers


00:30:02.920 --> 00:30:04.600
to be able to use it too.


00:30:04.600 --> 00:30:06.680
But anyway, this is definitely something


00:30:06.680 --> 00:30:08.080
you're just using on your own machine,


00:30:08.080 --> 00:30:10.160
so why not let it sit there?


00:30:11.160 --> 00:30:14.680
And then, so you install it, you init it,


00:30:14.680 --> 00:30:16.520
and it creates some stuff.


00:30:16.520 --> 00:30:19.520
I don't know what it does when you init it.


00:30:19.520 --> 00:30:23.800
But then you, hidden in here is you run dev by server


00:30:23.800 --> 00:30:26.640
also then, so it really is just a few commands


00:30:26.640 --> 00:30:29.960
and you get a server running, but there's nothing in it.


00:30:29.960 --> 00:30:31.520
There's no cache in it yet.


00:30:31.520 --> 00:30:36.520
So then you have to go somewhere else and then prime it.


00:30:38.320 --> 00:30:42.720
So you've got a local host and it reports.


00:30:42.720 --> 00:30:45.720
So you can export that as your pip index


00:30:45.720 --> 00:30:47.720
and then just create a virtual environment


00:30:47.720 --> 00:30:49.160
and start installing stuff.


00:30:49.160 --> 00:30:50.280
That's all you gotta do.


00:30:50.280 --> 00:30:52.720
And now it's all primed.


00:30:52.720 --> 00:30:54.640
And then what you do is you turn off,


00:30:54.640 --> 00:30:57.140
next time when you don't have any wifi,


00:30:57.140 --> 00:31:03.480
you turn off, you can run the DevPi server as,


00:31:03.480 --> 00:31:06.560
where is it, DevPi offline mode.


00:31:07.880 --> 00:31:09.240
And then there you have it.


00:31:09.240 --> 00:31:12.200
You've got a cache of everything you need.


00:31:12.200 --> 00:31:13.040
It's pretty cool.


00:31:13.040 --> 00:31:16.360
So I tried this out just on like, you know,


00:31:16.360 --> 00:31:18.840
installing pytest and a couple of my plugins,


00:31:18.840 --> 00:31:22.040
and then set it in offline mode,


00:31:22.040 --> 00:31:23.720
and then tried in the, all the,


00:31:23.720 --> 00:31:25.720
installing the normal stuff that I just did,


00:31:25.720 --> 00:31:28.460
worked fine into a new virtual environment.


00:31:28.460 --> 00:31:32.240
But then when I tried to do something like install requests


00:31:32.240 --> 00:31:34.360
that I didn't have yet or something else,


00:31:34.360 --> 00:31:37.320
it just said, "Oh, that's not, it's not a bit,


00:31:37.320 --> 00:31:38.640
I can't find it or something.


00:31:38.640 --> 00:31:40.840
It's a happy failure.


00:31:40.840 --> 00:31:43.520
So anyway, this instruction worked great.


00:31:43.520 --> 00:31:46.560
I know DevPi can do a whole bunch of other stuff,


00:31:46.560 --> 00:31:48.800
but I don't need it to do a whole bunch of stuff myself.


00:31:48.800 --> 00:31:50.920
I just need it to be a PyPI cache.


00:31:50.920 --> 00:31:52.220
And so it was pretty cool.


00:31:52.220 --> 00:31:54.960
- Yeah, this is really neat.


00:31:54.960 --> 00:32:00.280
The init looks like it creates the database schema


00:32:00.280 --> 00:32:05.280
as well as allows you to set up a user.


00:32:06.200 --> 00:32:08.160
So that's pretty cool.


00:32:08.160 --> 00:32:12.160
So I guess you set up with some authentication


00:32:12.160 --> 00:32:14.200
that no one can mess with it and stuff like that.


00:32:14.200 --> 00:32:17.880
- Well, apparently this works just fine for teams.


00:32:17.880 --> 00:32:21.380
So you can set up a server on like a,


00:32:21.380 --> 00:32:25.000
just like a computer in your network


00:32:25.000 --> 00:32:27.040
that just runs as a cache.


00:32:27.040 --> 00:32:27.880
And then you can point,


00:32:27.880 --> 00:32:29.960
everybody can point to the same one.


00:32:29.960 --> 00:32:34.960
So, I mean, that would work as a really quick and dirty,


00:32:35.000 --> 00:32:38.420
and not 2D, just a fairly quick way for a local team


00:32:38.420 --> 00:32:40.340
to have a caching server.


00:32:40.340 --> 00:32:44.560
So I'd probably even think about doing this for testing,


00:32:44.560 --> 00:32:48.060
even on one machine so that you can have multiple,


00:32:48.060 --> 00:32:50.160
like, you know, completely clean out your environments


00:32:50.160 --> 00:32:52.920
and still run a test machine


00:32:52.920 --> 00:32:54.460
and not hit the network so much


00:32:54.460 --> 00:32:57.040
if you're pulling a lot of different stuff.


00:32:57.040 --> 00:32:58.320
So.


00:32:58.320 --> 00:32:59.160
- Yeah, cool.


00:32:59.160 --> 00:33:04.480
Henry Shriner out in the live stream says,


00:33:04.480 --> 00:33:07.560
Can we also mention that Jason, the article we're just talking about,


00:33:07.560 --> 00:33:12.120
also maintains 148 libraries, including setup tools on PyPI.


00:33:12.120 --> 00:33:13.120
That's awesome.


00:33:13.120 --> 00:33:15.000
[LAUGHS]


00:33:15.000 --> 00:33:18.320
So, may know something about interacting with PyPI.


00:33:18.320 --> 00:33:19.720
[LAUGHS]


00:33:19.720 --> 00:33:21.600
No, no, I don't know how he finds the time, to be honest.


00:33:21.600 --> 00:33:24.840
148 packages.


00:33:24.840 --> 00:33:26.240
He needs close ember.


00:33:26.240 --> 00:33:27.640
[LAUGHS]


00:33:27.640 --> 00:33:30.320
Yeah, he needs a lot of close ember.


00:33:30.320 --> 00:33:34.000
Awesome. All right, well, what's this last one you got for us here?


00:33:34.000 --> 00:33:39.000
Sure, so I found this project on Reddit.


00:33:39.000 --> 00:33:41.640
It's called PyPy Command Line.


00:33:41.640 --> 00:33:43.560
And I noticed it in particular because it used rich,


00:33:43.560 --> 00:33:45.900
but it is a pretty cool project.


00:33:45.900 --> 00:33:51.280
It's notable because the author is 14 years old.


00:33:51.280 --> 00:33:53.160
Like, how old are I saying?


00:33:53.160 --> 00:33:54.080
Blown me away.


00:33:54.080 --> 00:33:56.800
Couldn't be that young.


00:33:56.800 --> 00:33:58.160
He's done a very good job of it.


00:33:58.160 --> 00:34:01.920
So it's a interface to PyPy from the command line.


00:34:01.920 --> 00:34:06.920
You can do things like get the top 10 packages.


00:34:06.920 --> 00:34:09.220
You can search for packages.


00:34:09.220 --> 00:34:14.440
You can, so here's, I think that's a search,


00:34:14.440 --> 00:34:16.880
oh, look, PyPy search.


00:34:16.880 --> 00:34:19.240
Rich, and that's given all the packages


00:34:19.240 --> 00:34:20.880
that have got rich in the name.


00:34:20.880 --> 00:34:23.360
It's got a description and everything and the date.


00:34:23.360 --> 00:34:26.720
And here you can, PyPy info django.


00:34:26.720 --> 00:34:28.320
That gives you some nice information


00:34:28.320 --> 00:34:30.960
about the django package, which it pulls from PyPy.


00:34:30.960 --> 00:34:31.940
- That's beautiful.


00:34:31.940 --> 00:34:34.900
Like the GitHub stars, the download traffic,


00:34:34.900 --> 00:34:38.540
what it depends upon, meta information like it's licensed


00:34:38.540 --> 00:34:39.380
and who owns it.


00:34:39.380 --> 00:34:40.820
This is really cool.


00:34:40.820 --> 00:34:42.420
- Yeah, it's really nice.


00:34:42.420 --> 00:34:46.020
Here we have the description and that's rendered in,


00:34:46.020 --> 00:34:48.680
that renders the markdown right in the terminal.


00:34:48.680 --> 00:34:51.460
- I wonder how it does that.


00:34:51.460 --> 00:34:55.700
- Couldn't hazard a guess.


00:34:55.700 --> 00:34:57.860
- It's got to use RIT, right?


00:34:57.860 --> 00:34:59.340
- Think it might, yeah.


00:34:59.340 --> 00:35:02.500
And yeah, so it makes good use of rich.


00:35:02.500 --> 00:35:04.680
That's how I noticed it,


00:35:04.680 --> 00:35:07.100
but it is a very cool project in its own right.


00:35:07.100 --> 00:35:10.700
It also uses them questionnaire.


00:35:10.700 --> 00:35:14.580
That's like a terminal thing for selecting stuff


00:35:14.580 --> 00:35:15.900
from the menu.


00:35:15.900 --> 00:35:20.860
It does a bit dynamically and also has like a command line


00:35:20.860 --> 00:35:25.700
to do more from the terminal.


00:35:25.700 --> 00:35:28.220
- Nice.


00:35:29.060 --> 00:35:31.220
I think it's well worth checking out.


00:35:31.220 --> 00:35:35.420
- I think I wanna check it out just for an example


00:35:35.420 --> 00:35:38.900
of using this sort of a workflow,


00:35:38.900 --> 00:35:40.420
not necessarily with PyPI,


00:35:40.420 --> 00:35:43.780
but with just sort of copying the code sort of thing.


00:35:43.780 --> 00:35:45.100
It looks fun.


00:35:45.100 --> 00:35:45.920
- Yeah.


00:35:45.920 --> 00:35:48.900
- Yeah, it's a really nice looking


00:35:48.900 --> 00:35:51.460
terminal user interface type thing.


00:35:51.460 --> 00:35:53.500
I think it could be really interesting


00:35:53.500 --> 00:35:55.340
for you and me, Brian, to just do like info


00:35:55.340 --> 00:35:56.820
on the various things we're talking about, right?


00:35:56.820 --> 00:36:00.460
that might be fun to pull up as well.


00:36:00.460 --> 00:36:02.300
- Yeah, and there's actually tons of times


00:36:02.300 --> 00:36:05.000
where I don't really wanna pull up a web browser


00:36:05.000 --> 00:36:06.540
just to look something up,


00:36:06.540 --> 00:36:09.720
but I do want more information than just the help gives me.


00:36:09.720 --> 00:36:13.020
- I love the web, but sometimes you have to do


00:36:13.020 --> 00:36:14.700
a context switch if you're in the terminal,


00:36:14.700 --> 00:36:17.400
you're writing commands and then you've got to


00:36:17.400 --> 00:36:21.460
switch windows and find the bar and type everything in.


00:36:21.460 --> 00:36:24.340
It's just a little bit of effort,


00:36:24.340 --> 00:36:27.500
where it can kind of interrupt your flow


00:36:27.500 --> 00:36:28.540
when you are working?


00:36:28.540 --> 00:36:31.420
- Yeah, I mean, especially when you got like the whole,


00:36:31.420 --> 00:36:33.500
I've got like a big monitor and I've got them all,


00:36:33.500 --> 00:36:35.540
everything in place exactly where I want it


00:36:35.540 --> 00:36:36.980
and there's no web browser.


00:36:36.980 --> 00:36:38.380
So if I wanna look something up,


00:36:38.380 --> 00:36:40.180
I gotta like interrupt that.


00:36:40.180 --> 00:36:43.860
- Yeah, or the browser you want is there,


00:36:43.860 --> 00:36:46.300
but it's behind a dozen other windows,


00:36:46.300 --> 00:36:48.060
dozen other web browsers typically.


00:36:48.060 --> 00:36:51.260
- Exactly.


00:36:51.260 --> 00:36:52.660
- Yeah, that's a good find.


00:36:52.660 --> 00:36:56.100
And well done to this guy who wrote it


00:36:56.100 --> 00:36:58.580
at such a young age, very cool.


00:36:58.580 --> 00:37:02.580
- So I was just gonna ask you if you have the extras thing.


00:37:02.580 --> 00:37:04.100
- Do I have any extras?


00:37:04.100 --> 00:37:06.140
Ta-da, here's my little banner extras.


00:37:06.140 --> 00:37:09.160
I do have some actually, Brian, a quick shout out.


00:37:09.160 --> 00:37:11.300
Madison sent over a notice to let us know


00:37:11.300 --> 00:37:16.300
that PyCascades 2022, their call for proposals is out.


00:37:16.300 --> 00:37:21.300
So if people wanna sign up for that,


00:37:21.300 --> 00:37:23.500
It closes October 24th.


00:37:23.500 --> 00:37:27.300
So, you know, make haste, you've got four days.


00:37:27.300 --> 00:37:29.780
But yeah, still-


00:37:29.780 --> 00:37:31.900
- It closes in four days?


00:37:31.900 --> 00:37:32.740
- Yeah.


00:37:32.740 --> 00:37:35.460
And so if you're thinking of proposing something,


00:37:35.460 --> 00:37:36.860
you got three days.


00:37:36.860 --> 00:37:38.020
Talks are 25 minutes long.


00:37:38.020 --> 00:37:38.860
It was a lot of fun.


00:37:38.860 --> 00:37:41.980
You know, we both attended this conference a few times.


00:37:41.980 --> 00:37:44.380
In the before times, it was in Portland,


00:37:44.380 --> 00:37:45.940
Seattle and Vancouver.


00:37:45.940 --> 00:37:50.220
I think this, I'm not sure what the story is with this one.


00:37:50.220 --> 00:37:51.660
if it's gonna be in person. - It's remote.


00:37:51.660 --> 00:37:54.300
- I think it's remote, right, yeah.


00:37:54.300 --> 00:37:55.780
- I think so, at least.


00:37:55.780 --> 00:37:57.540
Hope I'm not wrong.


00:37:57.540 --> 00:37:58.900
- Yeah, I think you're right.


00:37:58.900 --> 00:38:02.580
Then have you got your MacBook, your M1 Max?


00:38:02.580 --> 00:38:05.020
Have you ordered that yet?


00:38:05.020 --> 00:38:06.520
- I want one, but no.


00:38:06.520 --> 00:38:09.660
- Will, how about you? - $3,000.


00:38:09.660 --> 00:38:11.700
- I would love one, but I have no idea what I'd do with it.


00:38:11.700 --> 00:38:14.900
You know, I just walk into Terminal most of the time.


00:38:14.900 --> 00:38:17.100
- Hey, you know, it has that new Pro,


00:38:18.340 --> 00:38:20.540
- Was it ProRes?


00:38:20.540 --> 00:38:23.980
Something display where it has 120 adaptive display,


00:38:23.980 --> 00:38:25.300
Hertz display.


00:38:25.300 --> 00:38:26.600
So, you know, maybe.


00:38:26.600 --> 00:38:30.020
- I think my monitor only does 60,


00:38:30.020 --> 00:38:31.620
so I don't know if I could use it,


00:38:31.620 --> 00:38:35.340
but I have actually got textual running at 120


00:38:35.340 --> 00:38:36.280
frames per second.


00:38:36.280 --> 00:38:38.220
- Right on.


00:38:38.220 --> 00:38:39.260
That's awesome.


00:38:39.260 --> 00:38:40.500
Yeah, that's pretty crazy.


00:38:40.500 --> 00:38:43.820
I did end up ordering one and on my Apple account,


00:38:43.820 --> 00:38:46.060
I have this really cool message.


00:38:46.060 --> 00:38:47.500
It says, "Your order will be available soon.


00:38:47.500 --> 00:38:51.240
"MacBook Pro available to ship null."


00:38:51.240 --> 00:38:52.780
So we'll see where that goes.


00:38:52.780 --> 00:38:55.100
(laughing)


00:38:55.100 --> 00:38:56.480
See where that goes.


00:38:56.480 --> 00:38:57.320
But I think--


00:38:57.320 --> 00:38:59.320
- Did you put null as your address?


00:38:59.320 --> 00:39:00.160
- I should have.


00:39:00.160 --> 00:39:01.840
Think how many people's orders I would be getting.


00:39:01.840 --> 00:39:04.560
I would get just like a stack of boxes outside.


00:39:04.560 --> 00:39:06.640
Did that at Amazon or something, yeah.


00:39:06.640 --> 00:39:07.680
And then I think also,


00:39:07.680 --> 00:39:09.280
I wanna give a quick shout out to this thing,


00:39:09.280 --> 00:39:11.900
this CodeWeavers crossover,


00:39:11.900 --> 00:39:16.900
which allows you to run Windows apps natively on macOS.


00:39:16.900 --> 00:39:20.020
on macOS without a virtual machine.


00:39:20.020 --> 00:39:21.820
It's like an intermediate layer.


00:39:21.820 --> 00:39:23.060
So I think that that kind of stuff


00:39:23.060 --> 00:39:24.060
is going to get real popular,


00:39:24.060 --> 00:39:27.900
especially since the new M1s have like a super crappy story


00:39:27.900 --> 00:39:29.940
for Windows as a virtual machine


00:39:29.940 --> 00:39:32.900
because Windows has a crappy ARM story


00:39:32.900 --> 00:39:35.220
and you could only do ARM VMs over there.


00:39:35.220 --> 00:39:36.900
So I think that things like this


00:39:36.900 --> 00:39:38.980
are going to become really popular.


00:39:38.980 --> 00:39:40.100
There's a bunch of cool stuff.


00:39:40.100 --> 00:39:41.620
People haven't checked out this crossover stuff.


00:39:41.620 --> 00:39:42.860
I haven't really done much in it,


00:39:42.860 --> 00:39:44.220
but it looks super promising.


00:39:44.220 --> 00:39:45.460
I've like been on the verge of like,


00:39:45.460 --> 00:39:47.960
I almost need this, but I'll just run in a VM.


00:39:47.960 --> 00:39:51.120
But yeah, that's that.


00:39:51.120 --> 00:39:52.960
Anyway, those are my extras.


00:39:52.960 --> 00:39:56.600
- Okay, well, I've got a couple.


00:39:56.600 --> 00:39:58.200
We've brought up Starship.


00:39:58.200 --> 00:40:02.200
Once I just broke down and I'm using Starship now,


00:40:02.200 --> 00:40:03.840
it's working nice.


00:40:03.840 --> 00:40:05.360
And one of the things that installed


00:40:05.360 --> 00:40:07.880
when I grew installed Starship,


00:40:07.880 --> 00:40:11.240
it also installed PyEnv, I'm not sure why.


00:40:11.240 --> 00:40:13.560
So I started using PyEnv also.


00:40:13.560 --> 00:40:15.880
It was, and PyEnv works great.


00:40:15.880 --> 00:40:16.840
I like it on my Mac,


00:40:16.840 --> 00:40:20.280
but I still don't think it belongs in Python tutorials.


00:40:20.280 --> 00:40:23.440
Anyway, the verdict's still out on me


00:40:23.440 --> 00:40:25.200
whether or not it's any better


00:40:25.200 --> 00:40:28.120
than just downloading off of org.


00:40:28.120 --> 00:40:29.080
- You're gonna get tweets, Brian.


00:40:29.080 --> 00:40:30.160
You're gonna get tweets.


00:40:30.160 --> 00:40:31.440
(Brian laughs)


00:40:31.440 --> 00:40:32.600
I agree with you.


00:40:32.600 --> 00:40:34.520
I support you in this endeavor.


00:40:34.520 --> 00:40:36.280
- One of the things that was announced today


00:40:36.280 --> 00:40:39.300
is VS Code.dev is a thing.


00:40:39.300 --> 00:40:41.840
So I thought it was already there,


00:40:41.840 --> 00:40:43.760
but apparently this is new.


00:40:43.760 --> 00:40:46.680
If you go to VS Code.dev,


00:40:46.680 --> 00:40:50.160
it is just VS Code in the browser.


00:40:50.160 --> 00:40:53.200
Oh, interesting.


00:40:53.200 --> 00:40:54.680
I think it was already there.


00:40:54.680 --> 00:40:58.000
And where is your file system and stuff like that?


00:40:58.000 --> 00:41:01.920
Well, I think it's the same as like the GitHub code space.


00:41:01.920 --> 00:41:03.400
You press dot, yeah.


00:41:03.400 --> 00:41:04.920
OK, got it.


00:41:04.920 --> 00:41:07.520
So it can use the local file system though,


00:41:07.520 --> 00:41:09.040
which I think is a difference.


00:41:09.040 --> 00:41:11.680
GitHub had this thing where you hit dot


00:41:11.680 --> 00:41:14.400
and it brought up a VS Code


00:41:14.400 --> 00:41:16.320
which worked with the files in your repo.


00:41:16.320 --> 00:41:17.720
But I think with this,


00:41:17.720 --> 00:41:21.240
it can actually use your local file system.


00:41:21.240 --> 00:41:22.400
- Wow.


00:41:22.400 --> 00:41:24.400
- Yeah, which makes it more interesting.


00:41:24.400 --> 00:41:25.720
It's great if you work on another computer


00:41:25.720 --> 00:41:26.560
and you just pop it open,


00:41:26.560 --> 00:41:28.200
you've got all your settings there.


00:41:28.200 --> 00:41:29.040
- Yeah, exactly.


00:41:29.040 --> 00:41:30.960
- And you're ready to go, yeah.


00:41:30.960 --> 00:41:33.280
- Oh, that actually is quite a bit different.


00:41:33.280 --> 00:41:34.200
That's pretty cool.


00:41:34.200 --> 00:41:37.520
- Yeah, two use cases for me that I think I would use this


00:41:37.520 --> 00:41:39.320
that seem really nice.


00:41:39.320 --> 00:41:43.000
One is I'm working like say on my daughter's computer


00:41:43.000 --> 00:41:45.720
and she's like, "Dad, help me with this file.


00:41:45.720 --> 00:41:47.720
Help me with something.


00:41:47.720 --> 00:41:49.600
And I've got to open some file in a way


00:41:49.600 --> 00:41:51.360
that has some form of structure."


00:41:51.360 --> 00:41:54.880
And she doesn't have VS Code set up on her computer.


00:41:54.880 --> 00:41:56.960
She's in middle school, she doesn't care.


00:41:56.960 --> 00:41:59.900
But I could just fire this up and look at some file


00:41:59.900 --> 00:42:02.560
in a non-terrible way.


00:42:02.560 --> 00:42:03.560
That would be great.


00:42:03.560 --> 00:42:06.200
The other is on my iPad.


00:42:06.200 --> 00:42:09.020
- Oh yeah.


00:42:09.020 --> 00:42:10.520
- Right, like there's not a good,


00:42:10.520 --> 00:42:11.760
super good story for that,


00:42:11.760 --> 00:42:14.160
but this kind of like VS Code in the browser,


00:42:14.160 --> 00:42:16.680
other things in the browser, they seem really nice.


00:42:16.680 --> 00:42:19.040
Or if I was on a Chromebook or something like that, right?


00:42:19.040 --> 00:42:21.720
If I was trying to help somebody with code on a Chromebook,


00:42:21.720 --> 00:42:23.060
that'd be good.


00:42:23.060 --> 00:42:23.900
Yeah, good one.


00:42:23.900 --> 00:42:29.000
- How about you, Will, do you have any extras for us?


00:42:29.000 --> 00:42:29.980
- I do actually.


00:42:29.980 --> 00:42:34.200
So here we go.


00:42:34.200 --> 00:42:37.280
Python multithreading without the GIL.


00:42:37.280 --> 00:42:40.640
GIL stands for Global Interpreter Lock,


00:42:40.640 --> 00:42:43.760
and it's something which prevents Python threads


00:42:43.760 --> 00:42:45.620
from truly running in parallel.


00:42:45.620 --> 00:42:49.360
People have been talking about this for years,


00:42:49.360 --> 00:42:51.800
and I've got a bit kind of dismissive,


00:42:51.800 --> 00:42:53.880
'cause every time it comes up, it never seems to happen,


00:42:53.880 --> 00:42:57.600
because there's quite a lot of trade-offs generally.


00:42:57.600 --> 00:42:59.200
If you get rid of the GIL,


00:42:59.200 --> 00:43:02.040
you hurt single-threaded performance,


00:43:02.040 --> 00:43:05.520
and most things are single threaded.


00:43:05.520 --> 00:43:08.760
But this looks like the author,


00:43:08.760 --> 00:43:14.400
Sam Gross has come up with a way of removing the gill


00:43:14.400 --> 00:43:18.100
without hurting single threaded performance.


00:43:18.100 --> 00:43:21.480
I think they've got, it's to do with reference counting.


00:43:21.480 --> 00:43:24.100
They've got two references, reference counts,


00:43:24.100 --> 00:43:27.000
one for the thread which owns the object


00:43:27.000 --> 00:43:29.160
and one for all the other threads.


00:43:29.160 --> 00:43:32.140
And apparently it works quite well.


00:43:32.140 --> 00:43:33.600
And the great thing about this--


00:43:33.600 --> 00:43:35.740
- That's super creative to basically think of like,


00:43:35.740 --> 00:43:40.620
well, let's treat the ref count as a thread local storage.


00:43:40.620 --> 00:43:42.580
And probably when that hits zero, you're like, okay,


00:43:42.580 --> 00:43:43.740
well, let's go look at the other threads


00:43:43.740 --> 00:43:45.800
and see if they're also zero, right?


00:43:45.800 --> 00:43:47.460
- Yeah, yeah.


00:43:47.460 --> 00:43:51.400
And if this goes ahead and it's got quite a lot of support,


00:43:51.400 --> 00:43:53.060
I think, in the core dev community,


00:43:53.060 --> 00:43:56.540
I don't keep a really strong eye on that.


00:43:56.540 --> 00:44:00.780
but from what I hear, it's got a lot of support.


00:44:00.780 --> 00:44:02.380
And if that lands,


00:44:02.380 --> 00:44:04.940
then we can get fantastic performance


00:44:04.940 --> 00:44:06.500
out of multi-threaded code.


00:44:06.500 --> 00:44:08.380
You know, if you've got 20 threads,


00:44:08.380 --> 00:44:11.380
you could get almost 20 times performance.


00:44:11.380 --> 00:44:13.980
So that could be huge.


00:44:13.980 --> 00:44:17.420
I've no doubt there'll be a lot of technical hurdles


00:44:17.420 --> 00:44:21.300
from C libraries and things,


00:44:21.300 --> 00:44:22.940
but I'm really excited about that.


00:44:22.940 --> 00:44:26.420
I think performance improvements to single-threaded,


00:44:26.420 --> 00:44:28.640
they come in little fits and starts,


00:44:28.640 --> 00:44:31.900
we get 5% here, 10% here, and it's all very welcome.


00:44:31.900 --> 00:44:34.300
But if this lands, then we can get like 20 times


00:44:34.300 --> 00:44:37.440
for certain types of computing tasks.


00:44:37.440 --> 00:44:42.720
I'm really excited, I hope this one lands.


00:44:42.720 --> 00:44:44.780
- Yeah, I mean, you're talking about this,


00:44:44.780 --> 00:44:47.300
oh, here, let's get this multi-thread stuff.


00:44:47.300 --> 00:44:48.540
You were just saying, what are we gonna do


00:44:48.540 --> 00:44:50.940
with these new M1 Pros, M1 Macs?


00:44:50.940 --> 00:44:55.820
I mean, 10-core machines, 32-core GPUs,


00:44:55.820 --> 00:45:00.300
There's a lot of stuff that's significantly difficult


00:45:00.300 --> 00:45:02.700
to take advantage of with Python,


00:45:02.700 --> 00:45:05.500
unless something like this comes into existence, right?


00:45:05.500 --> 00:45:07.140
- Exactly, if you have 10 cores,


00:45:07.140 --> 00:45:09.720
chances are you'll just use one of them.


00:45:09.720 --> 00:45:13.460
I'm wondering if this goes in, whether it'll change,


00:45:13.460 --> 00:45:15.900
we'll need some other ways of taking advantage of that,


00:45:15.900 --> 00:45:19.300
because I think at the moment, for most tasks,


00:45:19.300 --> 00:45:22.800
you'd have to explicitly create and launch threads.


00:45:23.800 --> 00:45:27.820
I wonder if there'll be advances where Python


00:45:27.820 --> 00:45:30.340
could just launch threads and things


00:45:30.340 --> 00:45:32.240
which could be easily parallelized.


00:45:32.240 --> 00:45:35.860
Maybe I'm hoping for too much,


00:45:35.860 --> 00:45:37.340
but I have no doubt there'll be some kind of like


00:45:37.340 --> 00:45:40.680
software solution to help you just launch threads


00:45:40.680 --> 00:45:44.800
and like use all those cores in your shiny new Macs.


00:45:44.800 --> 00:45:46.060
- There's a lot of interesting stuff


00:45:46.060 --> 00:45:48.180
that you can do with async and await.


00:45:48.180 --> 00:45:51.500
And there's also some cool thread scheduler type things.


00:45:51.500 --> 00:45:54.740
But I think the, you know, much like Python 3


00:45:54.740 --> 00:45:57.020
when type annotations came along,


00:45:57.020 --> 00:45:59.380
there was a whole bunch of stuff that blossomed


00:45:59.380 --> 00:46:02.540
that took advantage of it, like Pydantic and FastAPI and stuff.


00:46:02.540 --> 00:46:05.500
I feel like that blossoming hasn't happened


00:46:05.500 --> 00:46:08.860
because you're really limited by the GIL of the CPU level,


00:46:08.860 --> 00:46:11.300
then you go multiprocessing and you have, like,


00:46:11.300 --> 00:46:13.820
data exchange and compatibility issues.


00:46:13.820 --> 00:46:16.020
But if this were to go through, all of a sudden people are like,


00:46:16.020 --> 00:46:18.500
"All right, now how do we create these libraries


00:46:18.500 --> 00:46:20.860
that we've wanted all along?"


00:46:20.860 --> 00:46:22.740
- Yeah, yeah, I think that's it.


00:46:22.740 --> 00:46:26.780
I think once we've got over that technical hurdle,


00:46:26.780 --> 00:46:30.820
all the library authors will be looking


00:46:30.820 --> 00:46:35.820
for creative ways of using this for speeding code up


00:46:35.820 --> 00:46:39.580
and for just doing more with your Python.


00:46:39.580 --> 00:46:41.620
- Yeah, I mean, with every programming language,


00:46:41.620 --> 00:46:45.460
the jump from single-threaded to multiprocess


00:46:45.460 --> 00:46:48.980
is a huge overhead, so you don't do it lightly.


00:46:48.980 --> 00:46:51.820
But you could do it lightly with multi-threads.


00:46:51.820 --> 00:46:54.340
You don't have such a huge overhead burden


00:46:54.340 --> 00:46:56.140
with multiple threads.


00:46:56.140 --> 00:46:57.300
- Yeah. - Yeah.


00:46:57.300 --> 00:46:58.780
- Yeah.


00:46:58.780 --> 00:46:59.600
- It's very exciting.


00:46:59.600 --> 00:47:01.020
I was also super excited about this.


00:47:01.020 --> 00:47:02.180
So I'm glad you gave it a shout out.


00:47:02.180 --> 00:47:04.060
We'll probably come back and spend some more time on it


00:47:04.060 --> 00:47:04.900
at some point.


00:47:04.900 --> 00:47:06.500
- Yeah, and where is it?


00:47:06.500 --> 00:47:09.380
Somebody said one of the exciting things about it


00:47:09.380 --> 00:47:12.520
is Guido didn't say no immediately.


00:47:12.520 --> 00:47:15.180
- That's a very good sign.


00:47:15.180 --> 00:47:17.460
- Yeah, which has not been the case


00:47:17.460 --> 00:47:18.340
with some of these other ones,


00:47:18.340 --> 00:47:19.980
because they were willing to sacrifice


00:47:19.980 --> 00:47:21.700
single-threaded performance


00:47:21.700 --> 00:47:23.340
to get better multi-core performance.


00:47:23.340 --> 00:47:25.540
They're like, "You know, this is not a common enough use case


00:47:25.540 --> 00:47:27.140
that we're willing to do that."


00:47:27.140 --> 00:47:30.180
I think actually the solution the author came up with,


00:47:30.180 --> 00:47:34.380
it did reduce single-threaded performance,


00:47:34.380 --> 00:47:38.460
but he also added some unrelated optimizations,


00:47:38.460 --> 00:47:40.260
which speeded it back up again.


00:47:40.260 --> 00:47:43.100
Exactly. I'm sorry, I fixed it, but yeah.


00:47:43.100 --> 00:47:44.820
Yeah.


00:47:44.820 --> 00:47:47.540
Interesting. One more thought on this really quick.


00:47:47.540 --> 00:47:49.860
David pushing out in the live stream says,


00:47:49.860 --> 00:47:51.740
the Gilectomy is like nuclear fusion.


00:47:51.740 --> 00:47:53.740
It's always 10 years away.


00:47:53.740 --> 00:47:54.300
Yeah.


00:47:54.300 --> 00:47:55.580
Well, hopefully it's not.


00:47:55.580 --> 00:47:58.880
It's possible, but I think this is the biggest possibility


00:47:58.880 --> 00:48:00.340
since then.


00:48:00.340 --> 00:48:01.960
Two interesting things.


00:48:01.960 --> 00:48:04.540
Maybe already taking account that Guido looked at it


00:48:04.540 --> 00:48:06.460
and didn't say no immediately.


00:48:06.460 --> 00:48:10.740
Two, this is a project Sam's working on,


00:48:10.740 --> 00:48:14.740
but it's supported by Facebook, where he works.


00:48:14.740 --> 00:48:17.140
So there's a lot of time and energy.


00:48:17.140 --> 00:48:19.020
It's not just a side project.


00:48:19.020 --> 00:48:24.020
Third, Larry Hastings, the guy who was doing the Gilectomy,


00:48:24.020 --> 00:48:26.260
commented on this thread saying,


00:48:26.260 --> 00:48:28.020
you've made way more progress than I did.


00:48:28.020 --> 00:48:28.940
Well done, Sam.


00:48:28.940 --> 00:48:30.620
So these are all good signs.


00:48:30.620 --> 00:48:31.860
- That's fantastic, yeah.


00:48:31.860 --> 00:48:34.380
- Yeah.


00:48:34.380 --> 00:48:35.660
All right.


00:48:35.660 --> 00:48:39.940
Well, Ryan, are you ready for a joke?


00:48:39.940 --> 00:48:41.300
- Yeah, definitely.


00:48:41.300 --> 00:48:42.340
- See, this is optimistic


00:48:42.340 --> 00:48:44.140
'cause they're not always that funny.


00:48:46.820 --> 00:48:47.780
But I'm going to give it a try.


00:48:47.780 --> 00:48:49.940
This one is for the web developers out there,


00:48:49.940 --> 00:48:51.940
for those folks that work on APIs


00:48:51.940 --> 00:48:55.340
and probably have been working for a long time on them.


00:48:55.340 --> 00:48:56.900
So the first one I got for us,


00:48:56.900 --> 00:48:58.300
I just found another one I'm going to throw in


00:48:58.300 --> 00:48:59.760
from inspired by the live stream.


00:48:59.760 --> 00:49:02.900
But this one is entitled, "The Torture Never Stops."


00:49:02.900 --> 00:49:04.620
(laughs)


00:49:04.620 --> 00:49:05.460
All right?


00:49:05.460 --> 00:49:06.280
- Okay.


00:49:06.280 --> 00:49:08.140
- So it's a, every one of these,


00:49:08.140 --> 00:49:10.140
it's four different pictures in this cartoon.


00:49:10.140 --> 00:49:15.140
There's a different developers up at the board


00:49:16.020 --> 00:49:19.820
describing some new way to talk to web servers from your app.


00:49:19.820 --> 00:49:22.980
So way back in 2000.


00:49:22.980 --> 00:49:26.180
It says SOAP, Simple Object Access Protocol.


00:49:26.180 --> 00:49:28.300
SOAP makes programming easier.


00:49:28.300 --> 00:49:31.820
And the developer in the audience is like, WTF is SOAP?


00:49:31.820 --> 00:49:32.620
Oh, come on.


00:49:32.620 --> 00:49:35.540
What is this crazy namespaces in XML?


00:49:35.540 --> 00:49:36.780
Skip ahead 10 years.


00:49:36.780 --> 00:49:38.620
Now there's a developer up here saying,


00:49:38.620 --> 00:49:40.740
REST, Representational State Transfer.


00:49:40.740 --> 00:49:43.100
REST is better than SOAP.


00:49:43.100 --> 00:49:46.100
The developer now has WTF was wrong with soap.


00:49:46.100 --> 00:49:52.220
2015, GraphQL, GraphQL is more versatile than REST.


00:49:52.220 --> 00:49:54.940
WTF, I was just getting the hang of REST.


00:49:54.940 --> 00:49:58.900
2018, gRPC, gRPC is faster than GraphQL.


00:49:58.900 --> 00:50:03.900
WTF, I thought you knew by now that torture never stops.


00:50:03.900 --> 00:50:06.580
Says like the guy next to the other developer


00:50:06.580 --> 00:50:08.420
that's been complaining for 20 years.


00:50:08.420 --> 00:50:12.140
- I think that hits a bit too close to home,


00:50:12.140 --> 00:50:13.940
but if you're a JavaScript developer,


00:50:13.940 --> 00:50:17.300
that gets compressed into like the last six months, I think.


00:50:17.300 --> 00:50:19.260
- That's right, you've lived it really hard.


00:50:19.260 --> 00:50:20.380
It really does play.


00:50:20.380 --> 00:50:22.940
Nick says, let's just start over with soap.


00:50:22.940 --> 00:50:24.180
Yeah, pretty good, pretty good.


00:50:24.180 --> 00:50:28.980
All right, and then we were talking about vscode.dev


00:50:28.980 --> 00:50:33.800
and how you just press dot in your browser in GitHub


00:50:33.800 --> 00:50:37.020
or how you go to that URL and so on, how cool it was.


00:50:37.020 --> 00:50:39.460
And somebody said, oh, it doesn't work in Safari.


00:50:39.460 --> 00:50:40.780
So I wanna come back to this joke


00:50:40.780 --> 00:50:42.480
that used to be applied to IE,


00:50:42.480 --> 00:50:48.320
but now I think should be applied to Safari,


00:50:48.320 --> 00:50:51.060
like genuinely I think it should be,


00:50:51.060 --> 00:50:55.920
is it's the browser wars as a cartoon.


00:50:55.920 --> 00:50:57.600
So there's Chrome and Firefox,


00:50:57.600 --> 00:50:59.500
a little dated because Firefox is not as popular


00:50:59.500 --> 00:51:00.340
as it used to be sadly,


00:51:00.340 --> 00:51:03.760
but it's like Chrome and Firefox are fiercely fighting


00:51:03.760 --> 00:51:06.500
and like IE is in the corner eating glue.


00:51:06.500 --> 00:51:09.640
I just feel like that needs a little Safari icon


00:51:09.640 --> 00:51:10.680
and we'd be good.


00:51:10.680 --> 00:51:14.040
We'd be all up to date in 2021.


00:51:14.040 --> 00:51:17.320
How do you know it's IE?


00:51:17.320 --> 00:51:20.520
It has a little E on it and a window symbol.


00:51:20.520 --> 00:51:22.120
Well, the E, of course, is backwards


00:51:22.120 --> 00:51:24.440
because the shirt's probably on backwards or something.


00:51:24.440 --> 00:51:25.480
Also, it's eaten glue.


00:51:25.480 --> 00:51:30.720
[LAUGHTER]


00:51:30.720 --> 00:51:31.880
Yeah, true.


00:51:31.880 --> 00:51:34.440
So funny.


00:51:34.440 --> 00:51:37.120
So thanks, Will, for joining us today.


00:51:37.120 --> 00:51:38.480
This was a really fun show.


00:51:38.480 --> 00:51:42.800
Thanks, everybody, in the chat for all the great comments.


00:51:42.800 --> 00:51:43.880
Yeah, thanks, Brian.


00:51:43.880 --> 00:51:44.440
Thanks, Will.


00:51:44.440 --> 00:51:45.720
See you all later.


00:51:45.720 --> 00:51:46.640
Thanks, guys.


00:51:46.640 --> 00:51:48.200
Bye-bye.


00:51:48.200 --> 00:51:58.200
[BLANK_AUDIO]

