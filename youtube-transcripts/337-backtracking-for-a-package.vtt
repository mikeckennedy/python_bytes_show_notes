WEBVTT

00:00:00.000 --> 00:00:05.000
Hey Michael, hey everyone in YouTube land.


00:00:05.000 --> 00:00:06.000
Hello, hello.


00:00:06.000 --> 00:00:08.000
Welcome to another episode.


00:00:08.000 --> 00:00:10.000
It's pretty exciting.


00:00:10.000 --> 00:00:14.000
We got some wonderful topics today, so let's just jump in.


00:00:14.000 --> 00:00:17.000
Hello and welcome to Python Bytes,


00:00:17.000 --> 00:00:20.000
where we deliver Python news and headlines directly to your earbuds.


00:00:20.000 --> 00:00:27.000
This is episode 337, recorded May 23rd, 2023.


00:00:27.000 --> 00:00:28.000
And I am Brian Okken.


00:00:28.000 --> 00:00:30.000
And I'm Michael Kennedy.


00:00:30.000 --> 00:00:34.000
I want to thank everybody that's watching,


00:00:34.000 --> 00:00:38.000
but anybody that's listening, I encourage you to at least once in a while


00:00:38.000 --> 00:00:42.000
drop by YouTube and see the upcoming list of events


00:00:42.000 --> 00:00:46.000
at pythonbytes.fm/live to be part of the audience.


00:00:46.000 --> 00:00:50.000
It's usually fun. It's usually Tuesdays at 11 Pacific time.


00:00:50.000 --> 00:00:54.000
Occasionally we switch.


00:00:54.000 --> 00:00:57.280
If you'd like to connect with us, we're all on Fosstodon,


00:00:57.280 --> 00:01:01.040
or at least the three of us, Michael and I on the show.


00:01:01.040 --> 00:01:03.600
It's mkennedy@fostedon,


00:01:03.600 --> 00:01:06.600
and @brianokken, and @pythonbytes.


00:01:06.600 --> 00:01:11.440
And with that, let's jump into our first topic.


00:01:11.440 --> 00:01:13.320
- Let's jump into it.


00:01:13.320 --> 00:01:16.280
It's not gonna be a rough one, or is it?


00:01:16.280 --> 00:01:19.040
So the first topic is Ruff,


00:01:19.040 --> 00:01:24.040
which is obviously Charlie Marsh's project.


00:01:24.040 --> 00:01:25.040
It's very successful.


00:01:25.040 --> 00:01:25.760
People know that.


00:01:25.760 --> 00:01:27.040
It's not exactly rough.


00:01:27.040 --> 00:01:29.240
It's a way to use rough.


00:01:29.240 --> 00:01:35.080
And this one comes to us from John Hagan.


00:01:35.080 --> 00:01:40.960
And John runs this project called Python Blueprint.


00:01:40.960 --> 00:01:42.440
So he's been playing around a lot


00:01:42.440 --> 00:01:46.200
with that project and PyCharm and Rough


00:01:46.200 --> 00:01:50.520
and realize that now there's a plugin


00:01:50.520 --> 00:01:55.520
for all the JetBrains IDEs, most notably PyCharm,


00:01:55.520 --> 00:01:59.000
called just Ruff.


00:01:59.000 --> 00:02:01.480
And the idea is that, you know,


00:02:01.480 --> 00:02:04.880
PyCharm has all these little squigglies and warnings


00:02:04.880 --> 00:02:08.160
and maybe even more importantly, the auto corrections.


00:02:08.160 --> 00:02:10.380
So it'll do things like,


00:02:10.380 --> 00:02:15.380
if you wanted to replace double quotes or single quotes,


00:02:16.040 --> 00:02:18.200
you can just hit Alt + Enter, and it'll suggest,


00:02:18.200 --> 00:02:20.200
"Hey, why don't we just do that for you?"


00:02:20.200 --> 00:02:22.200
Things like that.


00:02:22.200 --> 00:02:25.120
So this integrates all the rough functionality


00:02:25.120 --> 00:02:28.360
into that same basic UI system.


00:02:28.360 --> 00:02:32.700
You get little warnings or errors on the screen


00:02:32.700 --> 00:02:36.160
based on rough output, so it has inspection and highlighting.


00:02:36.160 --> 00:02:39.720
It can set it up so it runs rough on your code


00:02:39.720 --> 00:02:42.360
when you run reformat code or just hit the hotkey,


00:02:42.360 --> 00:02:44.360
Command + Alt + L, Control + Alt + L.


00:02:44.920 --> 00:02:48.380
It has the quick fixes that I was just talking about,


00:02:48.380 --> 00:02:53.120
and it will actually run, you can run rough --fix as an action,


00:02:53.120 --> 00:02:56.100
and you can even run that when a file is saved,


00:02:56.100 --> 00:02:58.100
just automatically, like, "Hey, if there's stuff wrong,


00:02:58.100 --> 00:03:00.100
just fix it, rough, just do that for me."


00:03:00.100 --> 00:03:03.900
You can configure which version of rough is running,


00:03:03.900 --> 00:03:06.500
so basically, the plugin lets you specify,


00:03:06.500 --> 00:03:10.440
"Do you use a global one, maybe managed by pipx?


00:03:10.440 --> 00:03:12.940
Do you use a local one in a virtual environment?"


00:03:12.940 --> 00:03:16.200
I sort of feel like isolating that to a per project basis


00:03:16.200 --> 00:03:17.040
is the right thing.


00:03:17.040 --> 00:03:19.580
So that's what I'm doing, playing with this.


00:03:19.580 --> 00:03:22.340
And yeah, you can run it as a new process.


00:03:22.340 --> 00:03:27.280
You can specify a config option, like a set YAML.


00:03:27.280 --> 00:03:28.460
I'm not sure what the format that is,


00:03:28.460 --> 00:03:30.860
but whatever the rough config file format is


00:03:30.860 --> 00:03:32.440
so that you can say, you know what?


00:03:32.440 --> 00:03:35.920
I don't really care about the line length for this thing.


00:03:35.920 --> 00:03:39.760
So just ignore that and don't ever run that and so on.


00:03:39.760 --> 00:03:43.720
So yeah, you can even run it out of a WSL Windows subsystem


00:03:43.720 --> 00:03:44.960
for Linux.


00:03:44.960 --> 00:03:46.280
And there's some nice screenshots


00:03:46.280 --> 00:03:49.520
as all UI things should have in there.


00:03:49.520 --> 00:03:50.800
You can even see some of the settings


00:03:50.800 --> 00:03:52.420
if you wanna try it out.


00:03:52.420 --> 00:03:57.420
So it has 4.8 out of five ratings and looks pretty new,


00:03:57.420 --> 00:04:01.060
but yeah, anyway, I think it looks like a good option.


00:04:01.060 --> 00:04:02.720
So people can check that out.


00:04:02.720 --> 00:04:06.440
Also, yeah, I'm really excited about it.


00:04:06.440 --> 00:04:08.800
I've installed it, I'm gonna give it a try.


00:04:08.800 --> 00:04:11.300
You can go check out the-- it's open source, obviously,


00:04:11.300 --> 00:04:16.260
so you can go check out basically the repo for the plugin.


00:04:16.260 --> 00:04:22.480
And John sent over to us, and I'm linking to this thing


00:04:22.480 --> 00:04:28.140
where it says you can add additional PyCharm-specific instructions


00:04:28.140 --> 00:04:30.480
for both black and rough.


00:04:30.480 --> 00:04:35.460
So he's got this section that shows you basically how to integrate


00:04:35.460 --> 00:04:37.460
both Black and Rough at the same time


00:04:37.460 --> 00:04:39.700
as automatic code formatters in PyCharm


00:04:39.700 --> 00:04:42.180
using the FileWatchers plugin.


00:04:42.180 --> 00:04:44.340
So just follow along with the steps there.


00:04:44.340 --> 00:04:46.660
It even has Nox support, but yeah, cool.


00:04:46.660 --> 00:04:48.460
So if that sounds interesting to you,


00:04:48.460 --> 00:04:51.200
if you wanna have kind of auto-Rough


00:04:51.200 --> 00:04:53.340
just built into PyCharm and you use PyCharm,


00:04:53.340 --> 00:04:54.780
then check this out, it looks cool.


00:04:54.780 --> 00:04:55.620
Thanks, John.


00:04:55.620 --> 00:04:57.060
- Yeah, that's nice.


00:04:57.060 --> 00:04:57.900
- Yeah.


00:04:57.900 --> 00:05:03.180
- And Rough, of course, is written in Rust.


00:05:03.180 --> 00:05:06.800
and I'd like to talk a little bit more about Rust.


00:05:06.800 --> 00:05:10.300
So there was an article I ran across called,


00:05:10.300 --> 00:05:15.060
it's from Koblo's blog, don't know if that's a first name


00:05:15.060 --> 00:05:16.820
or last name, but thanks Koblo's,


00:05:16.820 --> 00:05:20.060
writing Python like it's Rust.


00:05:20.060 --> 00:05:25.060
And what I, I haven't written Rust yet, but a little bit.


00:05:25.060 --> 00:05:30.140
Anyway, the thing I liked about this article


00:05:30.140 --> 00:05:35.060
is really basically he's going from Rust back to Python


00:05:35.060 --> 00:05:36.340
programming in both.


00:05:36.340 --> 00:05:39.340
And one of the things he misses is some of the safety


00:05:39.340 --> 00:05:40.540
that types give you.


00:05:40.540 --> 00:05:44.900
So he's discovered that he's changing


00:05:44.900 --> 00:05:49.900
or they're changing how they're using types within Python.


00:05:49.900 --> 00:05:51.980
And I kind of liked some of the suggestions.


00:05:51.980 --> 00:05:53.460
I think these are some of the things


00:05:53.460 --> 00:05:55.660
I didn't even think of before.


00:05:55.660 --> 00:05:59.180
The obvious one of course is for function signatures.


00:05:59.180 --> 00:06:03.880
So we really want to, if it's not obvious,


00:06:03.880 --> 00:06:06.140
like there's an example with a find item


00:06:06.140 --> 00:06:10.040
with records in check, but what is that?


00:06:10.040 --> 00:06:12.140
What are those types of those things?


00:06:12.140 --> 00:06:15.100
So it's really helpful to your call,


00:06:15.100 --> 00:06:18.300
the people using your API to specify


00:06:18.300 --> 00:06:20.080
what the parameters look like


00:06:20.080 --> 00:06:22.060
or what you expect them to look like.


00:06:22.060 --> 00:06:24.900
And there's so many options within Python now.


00:06:24.900 --> 00:06:29.340
And also that to, you know, return value.


00:06:29.340 --> 00:06:32.020
And here is an example, it's an optional item.


00:06:32.020 --> 00:06:34.280
So I actually hadn't thought about that


00:06:34.280 --> 00:06:36.460
of like using optional as a return type.


00:06:36.460 --> 00:06:37.480
That's pretty cool.


00:06:37.480 --> 00:06:39.740
Which means you can either,


00:06:39.740 --> 00:06:42.600
and you could probably do like item or none


00:06:42.600 --> 00:06:46.380
to say it can return none or something.


00:06:46.380 --> 00:06:50.260
That's a, it is good to, especially if it's something,


00:06:50.260 --> 00:06:52.860
if it's possible to return none,


00:06:52.860 --> 00:06:58.940
good to have that in the types. So that's the low-hanging fruit that I think a lot of people


00:06:58.940 --> 00:07:06.540
have gotten there yet already. The other thing that I found recently is I've got some types that


00:07:06.540 --> 00:07:13.180
are like tuples or dictionaries or specifically a specific kind of dictionary like a string to any


00:07:13.180 --> 00:07:19.740
or even I use named tuples a lot which are a little bit better than just your normal types.


00:07:20.860 --> 00:07:25.460
But his recommendation is to go ahead and use data classes


00:07:25.460 --> 00:07:27.860
because they're more descriptive.


00:07:27.860 --> 00:07:29.940
Even if it's similar information,


00:07:29.940 --> 00:07:31.740
you can write up a little data class.


00:07:31.740 --> 00:07:33.940
And then like in the example,


00:07:33.940 --> 00:07:38.340
instead of saying that you're returning a dictionary,


00:07:38.340 --> 00:07:43.340
go ahead and return like a person item, specific types.


00:07:43.340 --> 00:07:45.380
And I'm kind of used to that from C++


00:07:45.380 --> 00:07:46.860
of like writing little types


00:07:46.860 --> 00:07:49.300
because they're more descriptive


00:07:49.300 --> 00:07:51.300
and they're easier to read sometimes.


00:07:51.300 --> 00:07:55.700
So bringing this into Python is kind of a cool idea.


00:07:55.700 --> 00:07:59.040
The other, one of the things I thought was really awesome


00:07:59.040 --> 00:08:01.540
is this idea, there's an example using,


00:08:01.540 --> 00:08:04.580
where he's using like these packet types.


00:08:04.580 --> 00:08:07.920
And since I work with communications a lot,


00:08:07.920 --> 00:08:12.920
this really hit home of, you have, you can,


00:08:12.920 --> 00:08:16.220
a packet might be either a header or payload or a trailer.


00:08:16.220 --> 00:08:18.100
This is a Rust example,


00:08:18.100 --> 00:08:22.180
But you can do the same sort of thing within Python to say,


00:08:22.180 --> 00:08:26.860
I can have different data types using data classes


00:08:26.860 --> 00:08:28.620
to specify what kind of information


00:08:28.620 --> 00:08:29.980
you're going to get from these.


00:08:29.980 --> 00:08:32.500
And then you can create a union type


00:08:32.500 --> 00:08:35.940
and have that be a different name,


00:08:35.940 --> 00:08:37.380
but related to everything.


00:08:37.380 --> 00:08:42.060
And I kind of love this idea of using a union type instead


00:08:42.060 --> 00:08:43.580
of using the ORs.


00:08:43.580 --> 00:08:46.140
I mean, using OR for types is good too,


00:08:46.140 --> 00:08:51.140
but combining that into a union type is pretty slick.


00:08:51.140 --> 00:08:53.640
- Yeah, yeah, that is pretty interesting.


00:08:53.640 --> 00:08:55.100
I like that.


00:08:55.100 --> 00:08:56.680
So is that if you're gonna receive, say,


00:08:56.680 --> 00:08:59.920
a packet off a network and it had first the header bit


00:08:59.920 --> 00:09:01.760
and then the payload and then the trailer


00:09:01.760 --> 00:09:02.880
or something like that?


00:09:02.880 --> 00:09:05.680
- Yeah, or like a function that takes,


00:09:05.680 --> 00:09:08.360
that can count the bits in there or something like that.


00:09:08.360 --> 00:09:11.780
And it can either be a header or a payload or a trailer.


00:09:11.780 --> 00:09:14.900
You could do something different with those


00:09:14.900 --> 00:09:17.260
and having a union type is pretty cool.


00:09:17.260 --> 00:09:22.620
Now, within it, and here's an example


00:09:22.620 --> 00:09:24.900
of how do you deal with that?


00:09:24.900 --> 00:09:26.260
You'd still with inside,


00:09:26.260 --> 00:09:30.260
you'd have to either do pattern matching or if clauses.


00:09:30.260 --> 00:09:33.020
I've been using a lot more pattern matching lately


00:09:33.020 --> 00:09:36.660
to be able to just, this is great for you.


00:09:36.660 --> 00:09:38.100
You take the packet type,


00:09:38.100 --> 00:09:41.580
but then you can match it against


00:09:41.580 --> 00:09:43.260
either a header or payload or trailer.


00:09:43.260 --> 00:09:45.900
this is a really clean way to have union types


00:09:45.900 --> 00:09:48.300
and then unpack them with the pattern matching.


00:09:48.300 --> 00:09:51.420
It's a pretty cool way to deal with that.


00:09:51.420 --> 00:09:52.260
So--


00:09:52.260 --> 00:09:53.300
- Yeah, that is actually pretty clean.


00:09:53.300 --> 00:09:55.860
That's one of the better examples of pattern matching


00:09:55.860 --> 00:09:58.120
that I've seen lately.


00:09:58.120 --> 00:10:01.240
- And this is just like a third of the article,


00:10:01.240 --> 00:10:04.620
but the rest of it does talk about different ways to,


00:10:04.620 --> 00:10:09.620
basically, we have a lot of these tools within Python now


00:10:09.660 --> 00:10:13.580
to make it more to utilize data types


00:10:13.580 --> 00:10:18.420
that we're used to in other languages.


00:10:18.420 --> 00:10:20.900
And you could kind of write some really clean looking code


00:10:20.900 --> 00:10:21.740
and easier to read.


00:10:21.740 --> 00:10:23.040
So it's nice.


00:10:23.040 --> 00:10:25.300
- Yeah, very nice.


00:10:25.300 --> 00:10:26.300
I like it.


00:10:26.300 --> 00:10:29.660
So Kim out there has a question in the audience.


00:10:29.660 --> 00:10:33.100
Ryan, is there possibly some overlap with writing Python


00:10:33.100 --> 00:10:35.020
after writing a bunch of C as you do,


00:10:35.020 --> 00:10:38.840
as in same way Rust leads to some good ideas in Python?


00:10:38.840 --> 00:10:43.840
- Yeah, well, I mean, this person's writing it


00:10:43.840 --> 00:10:47.960
from the experience of Rust, but I'm looking at it going,


00:10:47.960 --> 00:10:50.280
this is a lot of the C++ stuff that I use.


00:10:50.280 --> 00:10:55.280
So it is, yeah, I'm looking at it.


00:10:55.280 --> 00:10:58.680
We're actually, my team is having a lot more fun


00:10:58.680 --> 00:11:01.400
with Python with the pattern matching statement


00:11:01.400 --> 00:11:04.840
because I know it can do a lot more stuff,


00:11:04.840 --> 00:11:08.160
but it really does, even if you're just using it


00:11:08.160 --> 00:11:12.800
to get away from a long list of if clauses


00:11:12.800 --> 00:11:15.080
and make it more like a switch statement.


00:11:15.080 --> 00:11:16.560
It is so much nicer.


00:11:16.560 --> 00:11:21.320
It's one of the more easy bits.


00:11:21.320 --> 00:11:22.440
- So that's a good example.


00:11:22.440 --> 00:11:23.280
Yeah, Marco out there says,


00:11:23.280 --> 00:11:26.400
"It's been too a lot of rust, missing match."


00:11:26.400 --> 00:11:27.340
As well.


00:11:27.340 --> 00:11:29.940
All right, shall we move on?


00:11:29.940 --> 00:11:32.160
- Sure.


00:11:32.160 --> 00:11:33.320
- All right.


00:11:33.320 --> 00:11:35.160
Well, go ahead with your first,


00:11:35.160 --> 00:11:36.840
I know you had an announcement as well.


00:11:36.840 --> 00:11:38.040
You wanted to give out.


00:11:38.040 --> 00:11:40.700
- No, I was just wondering, do we wanna,


00:11:40.700 --> 00:11:42.420
today's episode is not brought to you


00:11:42.420 --> 00:11:45.580
by an external sponsor, but it's brought to you by us.


00:11:45.580 --> 00:11:47.300
- It is brought to you by us.


00:11:47.300 --> 00:11:51.580
- And I'd like to hear some of the news from Michael.


00:11:51.580 --> 00:11:53.840
- Well, the big news for me,


00:11:53.840 --> 00:11:56.780
which I have sort of put in as an extra now and then


00:11:56.780 --> 00:11:58.780
is the mobile apps.


00:11:58.780 --> 00:12:01.100
So people go out there, download the mobile apps,


00:12:01.100 --> 00:12:04.060
talkpython.fm/apps, and in there,


00:12:04.060 --> 00:12:06.420
if you create an account or log in with your account,


00:12:06.420 --> 00:12:09.680
At a minimum, you'll find like six different courses


00:12:09.680 --> 00:12:11.720
that are free, just tap on them


00:12:11.720 --> 00:12:13.200
and you can take those courses right away


00:12:13.200 --> 00:12:14.520
within the mobile apps.


00:12:14.520 --> 00:12:18.160
If you get this super, super quickly,


00:12:18.160 --> 00:12:22.000
if you're one of the very, very prompt listeners,


00:12:22.000 --> 00:12:25.800
there's a chance that our Git course actually is free


00:12:25.800 --> 00:12:28.760
as well as part of a celebration of the mobile app launch,


00:12:28.760 --> 00:12:31.180
but that lasts for about eight hours


00:12:31.180 --> 00:12:32.120
from the time of recording,


00:12:32.120 --> 00:12:33.640
which will be a few less hours


00:12:33.640 --> 00:12:36.520
from the time I actually released this


00:12:36.520 --> 00:12:38.620
to the general public, not in the live stream.


00:12:38.620 --> 00:12:40.640
So you'll have to act fast on that one,


00:12:40.640 --> 00:12:42.240
but do check out the mobile apps


00:12:42.240 --> 00:12:44.560
if you're interested in Python courses.


00:12:44.560 --> 00:12:45.660
They're a great way to take it.


00:12:45.660 --> 00:12:48.240
They have some free ones, and they also are the best way


00:12:48.240 --> 00:12:49.720
to take ones that you paid for as well.


00:12:49.720 --> 00:12:53.520
So four months of work, finally,


00:12:53.520 --> 00:12:56.400
really, really nice apps that we got out there.


00:12:56.400 --> 00:12:57.760
- I'm listening to a couple,


00:12:57.760 --> 00:13:01.320
watching and listening to a couple of courses right now.


00:13:01.320 --> 00:13:05.600
not right now, but in some of my free time.


00:13:05.600 --> 00:13:08.360
I love the mobile app, it's working great.


00:13:08.360 --> 00:13:09.200
- Awesome, thanks.


00:13:09.200 --> 00:13:11.520
And you also have a thing to shout out as well, right?


00:13:11.520 --> 00:13:15.240
- Yeah, I wanted to let people know I wrote a book.


00:13:15.240 --> 00:13:17.520
Now, you all know that.


00:13:17.520 --> 00:13:20.340
But the exciting bit, I just got this email this morning.


00:13:20.340 --> 00:13:24.400
So my book, "Python Testing with pytest, Second Edition."


00:13:24.400 --> 00:13:26.800
I've had a lot of great feedback of saying,


00:13:28.800 --> 00:13:33.160
people saying they read the first one and it was good,


00:13:33.160 --> 00:13:35.160
but the second one really nailed,


00:13:35.160 --> 00:13:36.680
they really got some of the concepts in.


00:13:36.680 --> 00:13:38.800
So I'm glad that I wrote the second.


00:13:38.800 --> 00:13:41.800
So the news, I just got this morning,


00:13:41.800 --> 00:13:44.240
an email from Pragmatic saying


00:13:44.240 --> 00:13:45.700
that there is a sale right now.


00:13:45.700 --> 00:13:47.600
So there's a whole bunch of other books,


00:13:47.600 --> 00:13:50.320
but Python Testing with pytest is one of them.


00:13:50.320 --> 00:13:54.540
And if you use the coupon code SPRING2023,


00:13:54.540 --> 00:13:58.360
and you can save 50% off of the ebook.


00:13:58.360 --> 00:14:00.800
And that's up that expires June 1st.


00:14:00.800 --> 00:14:03.540
So don't delay spring, 2023.


00:14:03.540 --> 00:14:04.960
So awesome.


00:14:04.960 --> 00:14:06.060
Let's bring you to some testing.


00:14:06.060 --> 00:14:09.920
Um, well that's us.


00:14:09.920 --> 00:14:12.160
Uh, how about a new topic?


00:14:12.160 --> 00:14:12.700
Yeah.


00:14:12.700 --> 00:14:15.640
Thank you everyone for supporting the show by supporting our work.


00:14:15.640 --> 00:14:17.560
Let's talk about PIP.


00:14:17.560 --> 00:14:20.460
So this is about a month old.


00:14:20.460 --> 00:14:24.600
I've been looking to grab a slot to talk about it, but there's been


00:14:24.600 --> 00:14:27.400
other sort of higher important stuff, but I do want to point this out.


00:14:27.400 --> 00:14:31.120
So Zertex over on Reddit,


00:14:31.120 --> 00:14:33.120
who if you follow over to the GitHub,


00:14:33.120 --> 00:14:35.760
and then from GitHub, I think to Twitter,


00:14:35.760 --> 00:14:38.080
maybe named Damian, not entirely clear,


00:14:38.080 --> 00:14:40.080
so I want to give credit, but it's not easy to do,


00:14:40.080 --> 00:14:44.960
says that pip 23, or points out that pip 23.1


00:14:44.960 --> 00:14:48.520
was released with massive improvements to backtracking.


00:14:48.520 --> 00:14:50.520
And backtracking is an algorithm


00:14:50.520 --> 00:14:53.800
that is part of the requirements resolver.


00:14:53.800 --> 00:14:58.520
So if you say, you know, pip install requests, flask,


00:14:58.520 --> 00:15:01.320
and, you know, something else,


00:15:01.320 --> 00:15:05.720
pip has to say, okay, well, we know what those are,


00:15:05.720 --> 00:15:10.720
but both requests and flask may depend on some library.


00:15:10.720 --> 00:15:11.560
I don't think that's true,


00:15:11.560 --> 00:15:13.520
but I don't think there's an intersection there,


00:15:13.520 --> 00:15:14.720
but you know, follow along.


00:15:14.720 --> 00:15:16.720
If they did, then it's got to figure out,


00:15:16.720 --> 00:15:20.480
well, okay, flask requires this range of versions


00:15:20.480 --> 00:15:22.240
and request requires that range.


00:15:22.240 --> 00:15:27.280
So let me find a version that will satisfy both of those requirements, right?


00:15:27.280 --> 00:15:31.120
And there might be a transitive dependency upon that, right?


00:15:31.120 --> 00:15:36.960
Like that shared, potentially shared library itself has another thing that it depends on.


00:15:36.960 --> 00:15:42.240
So the article or not article, Reddit post says, you know, for example, let's say


00:15:42.240 --> 00:15:46.880
you require package A and B, the latest versions of A and B are downloaded,


00:15:46.880 --> 00:15:51.440
pip checks their requirements, and it finds that A depends on C version 2,


00:15:51.440 --> 00:15:53.440
but B depends on C version 1.


00:15:53.440 --> 00:15:55.440
And so it's got to figure out, well, can I go back


00:15:55.440 --> 00:15:59.440
and get an older version of A


00:15:59.440 --> 00:16:04.440
that would allow, say, C equals 1 to work?


00:16:04.440 --> 00:16:09.440
So prior to pip 20.3, the default process would allow PIP


00:16:09.440 --> 00:16:13.440
to install conflicting requirements with a warning saying that


00:16:13.440 --> 00:16:17.440
this may or may not go well, we couldn't find one


00:16:17.440 --> 00:16:19.440
that was a good fit.


00:16:19.440 --> 00:16:21.760
that's no longer an option.


00:16:21.760 --> 00:16:23.380
I have very mixed feelings about that.


00:16:23.380 --> 00:16:27.240
I love that it tries to be more strict and correct,


00:16:27.240 --> 00:16:29.840
but at the same time,


00:16:29.840 --> 00:16:34.140
the alternative or the trade-off is


00:16:34.140 --> 00:16:37.420
we guarantee correctness 100% of the time


00:16:37.420 --> 00:16:39.120
in terms of a version match


00:16:39.120 --> 00:16:41.320
for all the transitive dependencies


00:16:41.320 --> 00:16:42.920
across all the different things.


00:16:42.920 --> 00:16:44.960
And instead of saying,


00:16:44.960 --> 00:16:46.840
we'll install something that doesn't work


00:16:46.840 --> 00:16:48.040
or may not work


00:16:48.040 --> 00:16:49.880
because there might be some functionality


00:16:49.880 --> 00:16:51.260
that you may or may not interact with


00:16:51.260 --> 00:16:53.260
that is incompatible version-wise.


00:16:53.260 --> 00:16:57.160
We're just gonna say, "Your application cannot run.


00:16:57.160 --> 00:16:58.320
"It's impossible for your app


00:16:58.320 --> 00:17:00.240
"to use these dependencies and run."


00:17:00.240 --> 00:17:02.900
Personally, I would prefer to say,


00:17:02.900 --> 00:17:04.760
"Huge warning, this is not a great idea,


00:17:04.760 --> 00:17:06.280
"but at least you can take a shot at it


00:17:06.280 --> 00:17:07.720
"rather than it's impossible for you


00:17:07.720 --> 00:17:09.460
"to run this application."


00:17:09.460 --> 00:17:12.360
But that's the trade-off pip made,


00:17:12.360 --> 00:17:16.160
and because of that, it has to be even better


00:17:16.160 --> 00:17:21.040
that tracking down these version matches as best it can,


00:17:21.040 --> 00:17:23.580
because the alternative is your application cannot be


00:17:23.580 --> 00:17:25.600
installed and run.


00:17:25.600 --> 00:17:28.800
So there's a lot of interesting history here,


00:17:28.800 --> 00:17:34.040
but it talks about some of the algorithms that have been used


00:17:34.040 --> 00:17:37.480
and points out that pip now separates out


00:17:37.480 --> 00:17:40.680
the resolution logic into a library called resolvelib.


00:17:40.680 --> 00:17:43.960
And it was discovered that there was an error, a logical error,


00:17:43.960 --> 00:17:48.520
that both for performance and for correctness as well.


00:17:48.520 --> 00:17:51.080
Better backtracking technique called backjumping


00:17:51.080 --> 00:17:54.520
and an actual error that were fixed and implemented


00:17:54.520 --> 00:17:57.040
in Resolve lib and now come out in 23.1.


00:17:57.040 --> 00:18:00.360
So if you're using pip and if you're listening to us,


00:18:00.360 --> 00:18:02.360
there's a real good chance that you are.


00:18:02.360 --> 00:18:06.340
You wanna upgrade your pip to 23.1 or higher.


00:18:06.340 --> 00:18:10.640
Whenever I install requirements,


00:18:10.640 --> 00:18:15.000
I just have like a multi-step macro or alias.


00:18:15.000 --> 00:18:16.620
The first thing it does is say,


00:18:16.620 --> 00:18:19.560
pip install --upgrade pip.


00:18:19.560 --> 00:18:21.120
Now go try to do the other stuff.


00:18:21.120 --> 00:18:22.740
You know, it's like a concept for me,


00:18:22.740 --> 00:18:24.080
but I know not everyone does that.


00:18:24.080 --> 00:18:26.880
So when you see that little warning that says,


00:18:26.880 --> 00:18:30.120
hey, warning, your pip is out of date.


00:18:30.120 --> 00:18:34.560
If it's less than 23.1, you probably wanna take,


00:18:34.560 --> 00:18:38.300
I don't know, take the advice and update it this time.


00:18:38.300 --> 00:18:43.180
Yeah, just this morning I got a message.


00:18:43.180 --> 00:18:51.660
Sorry, we cannot install your website because Sentry requires this version of Euro Lib 3


00:18:51.660 --> 00:18:54.940
and request requires a different version of Euro Lib 3.


00:18:54.940 --> 00:18:56.580
So you can't run your app.


00:18:56.580 --> 00:18:57.580
Goodbye.


00:18:57.580 --> 00:19:00.420
It's like, come on.


00:19:00.420 --> 00:19:03.980
I'm sure that it's not actually using the conflicting.


00:19:03.980 --> 00:19:08.380
One thing that this does point out here is traditionally people haven't had to worry


00:19:08.380 --> 00:19:09.380
about this.


00:19:09.380 --> 00:19:15.760
And so they'll, you'll see things like one of the dependencies will say it has to be


00:19:15.760 --> 00:19:23.400
exactly like 1.2.3 when really what it means is it's gotta be later than 1.2, you know,


00:19:23.400 --> 00:19:29.020
and they've just pinned it overly tight and you end up with this crash where you know


00:19:29.020 --> 00:19:33.260
for sure that it wouldn't actually be a problem in your situation.


00:19:33.260 --> 00:19:34.260
like, how do you know?


00:19:34.260 --> 00:19:37.300
Well, because before pip 20.1, it was running,


00:19:37.300 --> 00:19:38.580
those kind of things.


00:19:38.580 --> 00:19:42.020
And so there is this little bit of,


00:19:42.020 --> 00:19:44.020
I know it's great that it's trying


00:19:44.020 --> 00:19:46.920
to be more accurate and precise, but sometimes I'd


00:19:46.920 --> 00:19:49.020
rather have at least an option than none.


00:19:49.020 --> 00:19:52.100
And so there's a whole interesting discussion


00:19:52.100 --> 00:19:52.600
down here.


00:19:52.600 --> 00:19:54.700
People can check it out in the comments.


00:19:54.700 --> 00:19:57.620
It devolves into a debate about Python 2 to 3


00:19:57.620 --> 00:19:59.100
for a little while, which is weird.


00:19:59.100 --> 00:20:00.100
And then just skip that.


00:20:00.100 --> 00:20:01.460
That's not productive reading.


00:20:01.460 --> 00:20:04.940
but there's some interesting conversations going on there.


00:20:04.940 --> 00:20:06.900
And also before we move on really quick, Brian,


00:20:06.900 --> 00:20:11.540
there is, I think it's Damian, as I said,


00:20:11.540 --> 00:20:13.540
points out that there is a PEP 658,


00:20:13.540 --> 00:20:23.580
which is accepted for, what version of Python is this?


00:20:23.580 --> 00:20:27.160
I don't know, 2021, so a couple versions ago,


00:20:27.160 --> 00:20:31.100
that allows the metadata.


00:20:31.100 --> 00:20:33.300
It used to be that pip would actually have to download


00:20:33.300 --> 00:20:35.020
and install a package just to see


00:20:35.020 --> 00:20:36.940
what the dependencies were.


00:20:36.940 --> 00:20:39.180
And now that's separated out the metadata.


00:20:39.180 --> 00:20:42.100
So you can get a very simple, small download


00:20:42.100 --> 00:20:43.780
without trying to do stuff to it to go,


00:20:43.780 --> 00:20:44.740
what does this actually need?


00:20:44.740 --> 00:20:46.140
This version needs what?


00:20:46.140 --> 00:20:47.740
All right, so there's are some improvements


00:20:47.740 --> 00:20:50.020
that are being brought into here, but still,


00:20:50.020 --> 00:20:50.860
there we have it.


00:20:50.860 --> 00:20:54.260
- Yeah, a couple of comments,


00:20:54.260 --> 00:20:58.620
which I kind of agree with, it'd be from Grant.


00:20:58.620 --> 00:21:02.620
be nice if there was a warn unresolvable or something


00:21:02.620 --> 00:21:04.260
to keep the old behavior.


00:21:04.260 --> 00:21:07.300
I agree with Grant on that, yeah.


00:21:07.300 --> 00:21:12.540
So I guess this is a reminder to library authors


00:21:12.540 --> 00:21:15.900
as well that your dependencies, you


00:21:15.900 --> 00:21:20.820
might know that you have a lower limit on some dependency


00:21:20.820 --> 00:21:24.660
that you need version like 1.2 of this library or above.


00:21:24.660 --> 00:21:25.660
Think about it.


00:21:25.660 --> 00:21:30.340
I prefer to have libraries pin their dependencies,


00:21:30.340 --> 00:21:33.740
the transitive dependencies in a lower bound


00:21:33.740 --> 00:21:36.300
and not upper bound version,


00:21:36.300 --> 00:21:40.700
because, I mean, you don't know what the upper bound is,


00:21:40.700 --> 00:21:42.940
unless you do, unless there really is,


00:21:42.940 --> 00:21:44.100
there was a breaking change


00:21:44.100 --> 00:21:46.200
and you really know that there's a break.


00:21:46.200 --> 00:21:50.700
- Right, the thing for me more is about,


00:21:50.700 --> 00:21:52.980
which I agree with you, Brian, and the comments,


00:21:52.980 --> 00:21:59.360
but it's about like, there might be an absolute 100% conflict.


00:21:59.360 --> 00:22:03.660
Like, if this library tries to do, so for example,


00:22:03.660 --> 00:22:06.660
let's say like request tries to use Kerberos authentication


00:22:06.660 --> 00:22:08.540
instead of basic authentication.


00:22:08.540 --> 00:22:11.500
And in that scenario, this other library does something crazy,


00:22:11.500 --> 00:22:14.000
it crashes, unless it's high enough.


00:22:14.000 --> 00:22:16.620
If I'm never using that authentication mechanism,


00:22:16.620 --> 00:22:19.960
I'm never gonna, so like, yes, it is actually a breaking change,


00:22:19.960 --> 00:22:22.100
but it's not a breaking change for me.


00:22:22.100 --> 00:22:22.940
- Oh yeah.


00:22:22.940 --> 00:22:25.180
- In my use case of the combination of those two things.


00:22:25.180 --> 00:22:26.020
Right?


00:22:26.020 --> 00:22:28.580
Like that's kind of where I've been thinking about this.


00:22:28.580 --> 00:22:29.900
- Oh yeah. Interesting.


00:22:29.900 --> 00:22:30.740
Yeah.


00:22:30.740 --> 00:22:33.780
Cause there's a lot of like a lot of Swiss Army knife


00:22:33.780 --> 00:22:36.300
libraries out there and you're not using all of them.


00:22:36.300 --> 00:22:38.460
- It's very unlikely you're hitting a hundred percent


00:22:38.460 --> 00:22:40.540
surface area of a thing in this dependencies.


00:22:40.540 --> 00:22:41.900
Right? Exactly.


00:22:41.900 --> 00:22:42.940
- Yeah. Interesting.


00:22:42.940 --> 00:22:44.460
- Yep. Yeah.


00:22:44.460 --> 00:22:47.420
Well, anyway, this is an improvement.


00:22:47.420 --> 00:22:51.940
I feel like we're kind of like debating the 20.3 debate


00:22:51.940 --> 00:22:55.940
This is an improvement on the stuff that has already been decided to be done.


00:22:55.940 --> 00:22:58.940
So pip 23.1 is a good way to go.


00:22:58.940 --> 00:23:00.940
Yeah, it's good.


00:23:00.940 --> 00:23:08.940
Last item was a kind of a cool tool called Markdown Code Runner.


00:23:08.940 --> 00:23:13.940
So this did remind me of a tool that I've known before.


00:23:13.940 --> 00:23:19.940
So Markdown Code Runner is a package that automatically executes code blocks


00:23:19.940 --> 00:23:21.280
within a Markdown file.


00:23:21.280 --> 00:23:25.300
It's a, you can include hidden code blocks.


00:23:25.300 --> 00:23:29.300
So you can have, the code blocks can be in comments.


00:23:29.300 --> 00:23:32.820
And so you can't see the Markdown file, it just runs it.


00:23:32.820 --> 00:23:33.940
So it runs the snippet,


00:23:33.940 --> 00:23:36.820
and then you can have the output show up somewhere.


00:23:36.820 --> 00:23:41.820
So this, in the example, let's run to an example.


00:23:41.820 --> 00:23:45.500
You've got a little, a code block that says Python,


00:23:45.500 --> 00:23:47.420
but instead of just Python, you say,


00:23:47.420 --> 00:23:48.740
you know, you got your back ticks,


00:23:48.740 --> 00:23:53.740
and then you say, "python markdown-code-runner,"


00:23:53.740 --> 00:23:56.040
and then it runs the code in the code block.


00:23:56.040 --> 00:23:59.440
And then it pops it out, you've got another couple comments


00:23:59.440 --> 00:24:01.640
for output start and output end,


00:24:01.640 --> 00:24:04.640
and it'll throw the output in there.


00:24:04.640 --> 00:24:06.840
The neat thing is it's not just for Python,


00:24:06.840 --> 00:24:10.240
it's for Bash also, so you can run some Bash scripts.


00:24:10.240 --> 00:24:12.340
Like if you want to show a--


00:24:12.340 --> 00:24:14.340
I was thinking if you wanted to show


00:24:14.340 --> 00:24:18.880
what the directory looked like with the tree command,


00:24:18.880 --> 00:24:20.420
you can go ahead and run tree


00:24:20.420 --> 00:24:25.220
within a Markdown file and run it or other stuff.


00:24:25.220 --> 00:24:30.220
Has several examples that they think would be neat.


00:24:30.220 --> 00:24:34.620
Things like, I don't know,


00:24:34.620 --> 00:24:37.300
like diagrams or tables or various things


00:24:37.300 --> 00:24:40.940
that you might wanna output with Python visualizations.


00:24:40.940 --> 00:24:42.340
You can use that.


00:24:42.340 --> 00:24:43.820
- Yeah, that's really cool.


00:24:43.820 --> 00:24:46.440
It did kind of remind me of cog,


00:24:46.440 --> 00:24:48.300
but the syntax is a little different.


00:24:48.300 --> 00:24:52.560
So cog from Ned Batchelder is a similar sort of thing.


00:24:52.560 --> 00:24:57.060
You throw some code in place with some special tags.


00:24:57.060 --> 00:25:00.320
He uses like a three bracket tags


00:25:00.320 --> 00:25:02.920
instead of an actual code block.


00:25:02.920 --> 00:25:06.480
So the thing I kind of like about this is a lot of times


00:25:06.480 --> 00:25:09.280
I actually do want to show the code block.


00:25:09.280 --> 00:25:10.960
So you can go ahead and show the code block


00:25:10.960 --> 00:25:11.800
and then run it.


00:25:11.800 --> 00:25:12.680
So that's neat.


00:25:12.680 --> 00:25:17.680
So it's fun.


00:25:17.680 --> 00:25:19.280
I tried it a little bit.


00:25:19.280 --> 00:25:21.200
There's an example of using Rust.


00:25:21.200 --> 00:25:24.540
So you can have actually running Rust also.


00:25:24.540 --> 00:25:26.060
I couldn't get the Rust example to work,


00:25:26.060 --> 00:25:29.840
but I got the Markdown or the Python


00:25:29.840 --> 00:25:32.280
and the Bash examples to work.


00:25:32.280 --> 00:25:34.640
So actually pretty cool.


00:25:34.640 --> 00:25:35.760
Within the documentation,


00:25:35.760 --> 00:25:39.880
it also talks about running this as a GitLab


00:25:39.880 --> 00:25:44.880
or yeah, github CI snippet.


00:25:44.880 --> 00:25:48.720
So, and that'd be a great place to do it


00:25:48.720 --> 00:25:50.640
is to just rerun your,


00:25:50.640 --> 00:25:53.200
rerun like reproduce the code output


00:25:53.200 --> 00:25:54.800
from your readme on the new code.


00:25:54.800 --> 00:25:57.160
So kind of a cool idea.


00:25:57.160 --> 00:25:59.000
- Yeah, my first thought was,


00:25:59.000 --> 00:26:01.440
oh, I have a code example and it says the output is this,


00:26:01.440 --> 00:26:04.560
like rather than trying to maintain those,


00:26:04.560 --> 00:26:06.160
just let it put the output there.


00:26:06.160 --> 00:26:07.760
But it's also could be useful for just,


00:26:07.760 --> 00:26:10.000
I have a little Python bit of code


00:26:10.000 --> 00:26:15.000
that generates some other output that is useful, right?


00:26:15.000 --> 00:26:18.600
Here's the go through and generate a little,


00:26:18.600 --> 00:26:20.880
all the topics that it's on the sub directory


00:26:20.880 --> 00:26:22.800
or something like that, right?


00:26:22.800 --> 00:26:25.320
Yeah, like kind of just a markdown,


00:26:25.320 --> 00:26:27.120
like a macro within a markdown.


00:26:27.120 --> 00:26:29.280
- Generated table of contents or something.


00:26:29.280 --> 00:26:30.600
- Yeah, exactly.


00:26:30.600 --> 00:26:32.440
Something like that.


00:26:32.440 --> 00:26:33.600
- Cool. - Cool.


00:26:33.600 --> 00:26:34.480
That's all of it, right?


00:26:34.480 --> 00:26:35.840
That's all the main topics?


00:26:35.840 --> 00:26:38.500
- That is our main topics, yes.


00:26:38.500 --> 00:26:40.820
- All right, I have a few extras to throw out here.


00:26:40.820 --> 00:26:43.520
Let's jump over there real quick.


00:26:43.520 --> 00:26:48.280
So same person who pointed out the rough plugin,


00:26:48.280 --> 00:26:50.320
John Hagen also pointed out,


00:26:50.320 --> 00:26:53.080
I had talked previously about


00:26:53.080 --> 00:26:55.600
how I wish pip would update itself


00:26:55.600 --> 00:26:59.760
when I create a virtual environment by default.


00:26:59.760 --> 00:27:02.860
So if I say Python 3-M, VNV, VNV,


00:27:02.860 --> 00:27:05.160
the very next thing after activating it is


00:27:05.160 --> 00:27:06.520
your pip is out of date.


00:27:06.520 --> 00:27:08.320
Like, ah, geez, okay.


00:27:08.320 --> 00:27:11.360
So hence that's partly why my first thing to do


00:27:11.360 --> 00:27:13.920
is always upgrade it is just to not see the warning


00:27:13.920 --> 00:27:15.940
more than anything, honestly.


00:27:15.940 --> 00:27:18.880
But pointed out that since Python 3.9,


00:27:18.880 --> 00:27:22.280
there's an additional option you can pass


00:27:22.280 --> 00:27:27.280
to the virtual environment creation story.


00:27:27.280 --> 00:27:31.840
So instead of just -m vnvn director,


00:27:31.840 --> 00:27:36.180
you can also patch --upgrade depends,


00:27:36.180 --> 00:27:38.980
which will automatically do that upgrade


00:27:38.980 --> 00:27:40.420
of pip and dependencies as well.


00:27:40.420 --> 00:27:42.900
PIP set of tools to the latest version


00:27:42.900 --> 00:27:44.700
as part of creating the virtual environment.


00:27:44.700 --> 00:27:45.900
- Sweet.


00:27:45.900 --> 00:27:50.780
- Yeah, so nothing major, but quite nice, right?


00:27:50.780 --> 00:27:53.140
- Yeah, I mean, I usually have that as a second step


00:27:53.140 --> 00:27:54.140
within my little macro.


00:27:54.140 --> 00:27:54.980
- So do I.


00:27:54.980 --> 00:27:58.060
So do I.


00:27:58.060 --> 00:28:00.060
And I was looking to replace that and I'm like,


00:28:00.060 --> 00:28:00.900
you know what?


00:28:00.900 --> 00:28:03.660
- Not quite, because I also want to install things


00:28:03.660 --> 00:28:06.940
like pip-tools and a couple other things


00:28:06.940 --> 00:28:09.460
that this doesn't include.


00:28:09.460 --> 00:28:11.300
So I'm like, ah, I still would have to write that line.


00:28:11.300 --> 00:28:12.140
So I'll just leave it.


00:28:12.140 --> 00:28:13.580
But anyway, still, it's really nice


00:28:13.580 --> 00:28:16.040
to have a --upgrade depths.


00:28:16.040 --> 00:28:19.580
If you want it to have a shiny new virtual environment


00:28:19.580 --> 00:28:21.100
all the time.


00:28:21.100 --> 00:28:22.500
- Yeah, and one of the things I really love


00:28:22.500 --> 00:28:24.260
that came in like a few versions ago


00:28:24.260 --> 00:28:28.460
is the, if you do the --prompt and give it a dot,


00:28:28.460 --> 00:28:29.300
- Yes.


00:28:29.300 --> 00:28:30.820
- It uses the directory name.


00:28:30.820 --> 00:28:31.820
- Yeah, that's really excellent.


00:28:31.820 --> 00:28:34.020
It names the virtual environment


00:28:34.020 --> 00:28:35.220
containing directory names.


00:28:35.220 --> 00:28:37.220
So it has like, the name of the virtual environment


00:28:37.220 --> 00:28:39.740
is the name of your project often, which is great.


00:28:39.740 --> 00:28:40.660
- Yeah.


00:28:40.660 --> 00:28:41.580
- Yep.


00:28:41.580 --> 00:28:43.540
All right, more things, more extras.


00:28:43.540 --> 00:28:48.060
One is PyCon South Africa.


00:28:48.060 --> 00:28:51.420
PyCon ZA will be held in Durban.


00:28:51.420 --> 00:28:55.340
And the most important part here is


00:28:55.340 --> 00:28:59.920
that the call for proposals is out.


00:28:59.920 --> 00:29:02.720
And when is the timeframe?


00:29:02.720 --> 00:29:04.080
Kim will have to let us know.


00:29:04.080 --> 00:29:06.680
I know he's out in the audience, but yeah.


00:29:06.680 --> 00:29:07.640
Oh, here we go.


00:29:07.640 --> 00:29:12.640
Talks need to be submitted by August 18th, 2023.


00:29:12.640 --> 00:29:14.400
And it's pretty good.


00:29:14.400 --> 00:29:17.860
I think it's both virtual and in-person.


00:29:17.860 --> 00:29:21.160
So some good options for people to attend


00:29:21.160 --> 00:29:22.840
and down in October.


00:29:22.840 --> 00:29:25.720
And it's pretty convenient for Africa, Europe, much of Asia,


00:29:25.720 --> 00:29:28.420
although less so for, you know, you and me, Brian.


00:29:28.420 --> 00:29:30.780
- That's all right.


00:29:30.780 --> 00:29:31.780
- That's all right.


00:29:31.780 --> 00:29:33.780
- Yeah, cool.


00:29:33.780 --> 00:29:37.460
So people, if they want to talk at PyCon South Africa,


00:29:37.460 --> 00:29:40.780
be sure to submit that talk.


00:29:40.780 --> 00:29:45.780
And Kim says that's a soft deadline, but sooner is better.


00:29:45.780 --> 00:29:46.820
- Okay.


00:29:46.820 --> 00:29:47.820
- Generally true.


00:29:47.820 --> 00:29:51.780
- I got a friend that's in the cybersecurity area


00:29:51.780 --> 00:29:53.940
and he's up all night anyway.


00:29:53.940 --> 00:29:55.540
So maybe- - Yeah, there you go.


00:29:55.540 --> 00:29:56.380
Yeah, you could definitely do it


00:29:56.380 --> 00:29:59.300
You just live with auto off hours.


00:29:59.300 --> 00:30:00.140
- Yeah.


00:30:00.140 --> 00:30:02.020
- Real quick follow up from something before Brian,


00:30:02.020 --> 00:30:03.220
and then we'll get to a joke.


00:30:03.220 --> 00:30:05.820
I had put out a call to everyone and say,


00:30:05.820 --> 00:30:07.500
help me find some off-road trails


00:30:07.500 --> 00:30:10.580
for this adventure bike thing that I got into.


00:30:10.580 --> 00:30:12.220
I didn't really get any feedback.


00:30:12.220 --> 00:30:14.540
So I'm gonna instead pay it forward to other people out there


00:30:14.540 --> 00:30:15.700
who might be listening to my ride.


00:30:15.700 --> 00:30:19.400
So some really cool apps on X off-road,


00:30:19.400 --> 00:30:20.460
you can go through and find,


00:30:20.460 --> 00:30:22.420
you just click a spot on the map and it'll show you like,


00:30:22.420 --> 00:30:26.300
here's all the public legal trails for you to go tear around


00:30:26.300 --> 00:30:32.660
And they're even rated like five out of 10 or seven out of 10 with pictures and distance and challenges


00:30:32.660 --> 00:30:37.920
So you can decide up front whether or not you you want to go down that path, I suppose


00:30:37.920 --> 00:30:40.060
there's also


00:30:40.060 --> 00:30:45.380
Gia G AI a just a similar thing and then backcountry discovery roads


00:30:45.380 --> 00:30:50.380
which allow you to find like how do I traverse my state at least in the US or


00:30:50.380 --> 00:30:52.860
similar things and


00:30:52.860 --> 00:30:54.860
in Europe with the tet


00:30:55.140 --> 00:30:58.540
How do you say traverse all of Oregon almost 100% off road


00:30:58.540 --> 00:31:00.300
through the forest and the mountains and the deserts.


00:31:00.300 --> 00:31:03.620
And so there's this app that has all these like GPS trails.


00:31:03.620 --> 00:31:06.820
So anyway, I found some cool trails way up in the mountains


00:31:06.820 --> 00:31:09.740
using this app and can recommend it to people.


00:31:09.740 --> 00:31:10.900
- Neat, cool.


00:31:10.900 --> 00:31:12.380
- Yeah, cool.


00:31:12.380 --> 00:31:14.100
All right, a joke.


00:31:14.100 --> 00:31:15.300
You got a joke for us.


00:31:15.300 --> 00:31:18.100
- Yeah, I can't remember where I found this,


00:31:18.100 --> 00:31:23.100
but there's a website called userinyourface.com.


00:31:24.380 --> 00:31:29.380
So instead of user interface, user in your YER face.com.


00:31:29.380 --> 00:31:33.080
So you just have to fill it out.


00:31:33.080 --> 00:31:34.780
So.


00:31:34.780 --> 00:31:41.420
- Like an anti-pattern, a whole combination


00:31:41.420 --> 00:31:43.660
of anti-patterns into one UI.


00:31:43.660 --> 00:31:46.620
- Okay, so just start off the, right off the bat.


00:31:46.620 --> 00:31:48.680
So for people listening is, I'm sorry,


00:31:48.680 --> 00:31:50.740
you're gonna have to watch this on the video or something,


00:31:50.740 --> 00:31:52.220
but- - Or visit the link.


00:31:52.220 --> 00:31:53.340
- Or go visit the link.


00:31:53.340 --> 00:31:55.660
It says, "Hi, and welcome to User Interface,


00:31:55.660 --> 00:32:00.420
a challenge exploration of user interactions


00:32:00.420 --> 00:32:01.860
and design patterns.


00:32:01.860 --> 00:32:04.660
To play the game, simply fill in the form


00:32:04.660 --> 00:32:07.740
as fast and accurate as possible."


00:32:07.740 --> 00:32:11.160
With a button that says, "No," big green button.


00:32:11.160 --> 00:32:12.940
So it says, "Please click,


00:32:12.940 --> 00:32:16.060
underline, scroll, underline, click here


00:32:16.060 --> 00:32:19.500
to go to the next page," and the next page is highlighted.


00:32:19.500 --> 00:32:22.340
And the trick is, the only thing that you can click on


00:32:22.340 --> 00:32:24.740
is the here button.


00:32:24.740 --> 00:32:26.780
It's not a button, it's just, that's it.


00:32:26.780 --> 00:32:29.740
Okay, and then it, okay.


00:32:29.740 --> 00:32:32.700
The site uses cookies, is that a problem for you?


00:32:32.700 --> 00:32:33.860
Yes.


00:32:33.860 --> 00:32:35.660
And the yes doesn't do anything.


00:32:35.660 --> 00:32:37.260
Okay, no, not really.


00:32:37.260 --> 00:32:38.460
And it goes away.


00:32:38.460 --> 00:32:40.100
Can we help?


00:32:40.100 --> 00:32:44.660
There's a help field that with no enter,


00:32:44.660 --> 00:32:46.060
just send the bottom. - One of those dreadful


00:32:46.060 --> 00:32:48.060
chat messages that pops up.


00:32:48.060 --> 00:32:50.960
- Yeah, it's great.


00:32:50.960 --> 00:32:54.400
- Yeah, choose your password, you click on it


00:32:54.400 --> 00:32:56.960
and the highlighted choose your,


00:32:56.960 --> 00:33:00.760
or the preview text is already there.


00:33:00.760 --> 00:33:02.680
So if you add your password to it,


00:33:02.680 --> 00:33:05.000
it doesn't delete the old one.


00:33:05.000 --> 00:33:07.960
You gotta like fill that out.


00:33:07.960 --> 00:33:09.580
Oh, you can't tab through anything.


00:33:09.580 --> 00:33:12.600
So you have to click, oh, the email's bad too.


00:33:12.600 --> 00:33:13.760
- Yeah, instead of a placeholder,


00:33:13.760 --> 00:33:15.720
it's just gray, actual gray text.


00:33:15.720 --> 00:33:18.840
- Yeah, but you also can't delete it.


00:33:20.400 --> 00:33:23.480
Foo, domain, foo.


00:33:23.480 --> 00:33:26.240
Oh, this one you have to delete also.


00:33:26.240 --> 00:33:30.280
And, oh, there's a, hurry up, time is ticking.


00:33:30.280 --> 00:33:32.620
A pop-up, one minute before.


00:33:32.620 --> 00:33:36.680
Can I hit the, oh, the X isn't an X,


00:33:36.680 --> 00:33:39.100
it's a maximize button.


00:33:39.100 --> 00:33:42.840
- The copyrights are closed.


00:33:42.840 --> 00:33:44.940
- Lock, unlock, this doesn't do anything.


00:33:44.940 --> 00:33:48.600
Oh, the close is the copyright, right?


00:33:48.600 --> 00:33:50.440
that isn't obvious.


00:33:50.440 --> 00:33:52.720
Yeah, okay.


00:33:52.720 --> 00:33:54.660
I do not accept these terms.


00:33:54.660 --> 00:33:56.460
Okay, cancel.


00:33:56.460 --> 00:33:59.740
Oh, I'm not, no, I meant, okay.


00:33:59.740 --> 00:34:01.480
You sure you wanna cancel?


00:34:01.480 --> 00:34:04.180
- You gotta cancel. - Cancel, cancel.


00:34:04.180 --> 00:34:05.380
Next.


00:34:05.380 --> 00:34:09.300
Oh, it says already selected, I do not accept.


00:34:09.300 --> 00:34:10.660
So you have to uncheck it


00:34:10.660 --> 00:34:13.460
to accept the terms and conditions.


00:34:13.460 --> 00:34:14.540
What are the terms?


00:34:14.540 --> 00:34:16.580
Yeah, okay.


00:34:16.580 --> 00:34:18.500
- Good luck getting out of that dialogue.


00:34:18.500 --> 00:34:20.900
You got to scroll down to accept them now to get out of it.


00:34:20.900 --> 00:34:27.820
Okay. Well, we're stuck now. cause you can't even,


00:34:27.820 --> 00:34:32.860
this is terrible. Anyway, I did get through it.


00:34:32.860 --> 00:34:37.460
The fastest time I have so far is like five minutes.


00:34:37.460 --> 00:34:42.020
People are going to speed run the, in your face interface.


00:34:42.020 --> 00:34:46.860
Yeah. I'd love to see a speed run to see how fast somebody can really get through


00:34:46.860 --> 00:34:49.340
in like a couple minutes, please do a video.


00:34:49.340 --> 00:34:50.220
I wanna see that.


00:34:50.220 --> 00:34:56.700
- Jeff out in the audience says,


00:34:56.700 --> 00:34:59.000
I worked for the company that made that site.


00:34:59.000 --> 00:35:04.300
- Yeah, so yeah, the company looks like Veerheart.


00:35:04.300 --> 00:35:05.740
So nice.


00:35:05.740 --> 00:35:06.900
- Yeah.


00:35:06.900 --> 00:35:11.780
- All right, well, that's enough frustration for one day.


00:35:11.780 --> 00:35:12.600
- Indeed.


00:35:14.860 --> 00:35:18.340
Thanks again for joining us and doing another Python Bytes.


00:35:18.340 --> 00:35:20.820
Thank you everybody for watching and listening


00:35:20.820 --> 00:35:24.780
and supporting us through the courses


00:35:24.780 --> 00:35:26.300
and books and everything.


00:35:26.300 --> 00:35:29.020
So, and Patreon supporters, we still have Patreon supporters.


00:35:29.020 --> 00:35:30.900
Thank you, Patreon supporters.


00:35:30.900 --> 00:35:31.740
- Absolutely.


00:35:31.740 --> 00:35:32.560
- And thanks Michael.


00:35:32.560 --> 00:35:33.400
- Thanks Brian.


00:35:33.400 --> 00:35:34.420
Thanks everyone.


00:35:34.420 --> 00:35:35.260
Bye.

