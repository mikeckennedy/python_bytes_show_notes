WEBVTT

00:00:00.001 --> 00:00:09.860
Hey Brian. Hey. How's it going? Great. Thanks for meeting early. Yeah, absolutely. Always

00:00:09.860 --> 00:00:14.440
good to meet and we've got such good stuff to talk about this time. So let's just kick

00:00:14.440 --> 00:00:19.820
it off. Hello and welcome to Python Bytes where we deliver Python news and headlines

00:00:19.820 --> 00:00:28.180
directly to your earbuds. This is episode 372 recorded February 20th, 2024 and I'm Michael

00:00:28.180 --> 00:00:36.560
Kennedy and I'm Brian Okken. This episode is brought to you by Scout APM. Super psyched

00:00:36.560 --> 00:00:39.960
to have them supporting the show. So we'll tell you more about them later, but please

00:00:39.960 --> 00:00:46.000
check them out. The link is in the podcast player show notes or on the website. And if

00:00:46.000 --> 00:00:50.980
you are one of the lucky ones, Brian, who is attending this live, they got here by going

00:00:50.980 --> 00:00:57.940
to Python Bytes.fm/live, crushing the bell saying, get notified. They got notified when

00:00:57.940 --> 00:01:03.140
this comes on when it's scheduled. And here they are. For those of you who are just listening,

00:01:03.140 --> 00:01:08.340
we super appreciate that anyway. So how are we listening? Thank you. Thank you. Connect

00:01:08.340 --> 00:01:16.700
with us over on mastodon. We're on mastodon@brianakin.com and at mkennedy@pythonbites.com. Brian, before

00:01:16.700 --> 00:01:21.380
we jump into the news and before I forget, I just want to make a quick announcement.

00:01:21.380 --> 00:01:29.400
I will be at PyCon Philippines starting, I leave tomorrow at, I fly from Portland to

00:01:29.400 --> 00:01:34.280
San Francisco at 8 PM and then I leave San Francisco at midnight. So who knows what I'm,

00:01:34.280 --> 00:01:38.480
what state I'm going to be in, but I'm pretty sure with the time zone change and the travels

00:01:38.480 --> 00:01:43.300
and all this, there's not going to be a Python Bytes next week. So we're going to be probably

00:01:43.300 --> 00:01:46.340
skipping next week, which is a good chance for people to catch up if they caught, they

00:01:46.340 --> 00:01:47.340
fell behind.

00:01:47.340 --> 00:01:52.180
Yeah. And also I'm jealous and I hope you have a great time.

00:01:52.180 --> 00:01:57.380
Thank you very much. I'm going to have a great time. I'm worked as was writing the keynote

00:01:57.380 --> 00:02:02.220
speech yesterday and it's going to be good. It's coming together nicely. So it's always

00:02:02.220 --> 00:02:07.700
nerve wracking. I don't know how, what is your, what is your way of working on talks

00:02:07.700 --> 00:02:13.980
and stuff? Like I, I want to be prepared and I'm the kind of person that would get prepared

00:02:13.980 --> 00:02:18.700
a month or two months early, but then if I write the stuff and then put it away and then

00:02:18.700 --> 00:02:22.580
come back to it, I've kind of lost the inspiration and the nuances and the details. So I don't

00:02:22.580 --> 00:02:26.540
want to write it too soon, but I also don't want to wait till the last minute. So there's

00:02:26.540 --> 00:02:30.380
this weird, weird trade off I feel.

00:02:30.380 --> 00:02:37.020
I mostly, I try, I usually try to cover too much stuff in talks. So I try to pare it down

00:02:37.020 --> 00:02:42.020
and then yeah, I practice the heck out of it. The ones where some, some talks I like

00:02:42.020 --> 00:02:46.780
I'm fiddling with the slides too much until like five minutes beforehand and that goes

00:02:46.780 --> 00:02:51.380
terribly. So I, I, yeah, I like to do it early in practice.

00:02:51.380 --> 00:02:57.460
All right. Well over to you. I know you have a big announcement.

00:02:57.460 --> 00:02:58.460
Yeah.

00:02:58.460 --> 00:03:00.460
Yeah, you are. Okay.

00:03:00.460 --> 00:03:08.300
Am I, am I first? Yeah. So I'm pretty excited. The folks at Astral including Charlie Marsh

00:03:08.300 --> 00:03:15.940
and others have released UV, a Python packaging, it's Python packaging and rust. And it's it's

00:03:15.940 --> 00:03:26.140
not another packaging tool. It is the Python and so like replacing this is actually incredible.

00:03:26.140 --> 00:03:36.660
It's a, it's replacing a pip, pip-tools and virtual lamp all in one new rust driven tool.

00:03:36.660 --> 00:03:43.500
Their announcement said maybe uv represents a milestone in our pursuit of cargo for Python,

00:03:43.500 --> 00:03:50.460
comprehensive Python project and package manager that's fast, reliable and easy to use. They're

00:03:50.460 --> 00:03:55.820
also kind of, it's interesting kind of combined in this announcement is that they're taking

00:03:55.820 --> 00:04:02.140
Astral is taking stewardship of Armin Roenicker's Rai tool. That's an experimental tool. So

00:04:02.140 --> 00:04:08.780
I'm not sure what that has to do with this, but I don't know. It's interesting. But have

00:04:08.780 --> 00:04:10.780
you given this a try yet?

00:04:10.780 --> 00:04:17.260
Oh yes. I am so psyched about this. Charlie and team, congratulations. Cause this, this

00:04:17.260 --> 00:04:27.020
is setting the world on fire in a lot of interesting ways. So I, you know, Charlie aimed this right

00:04:27.020 --> 00:04:34.340
at like my style of programming and working with Python dependencies and projects. So

00:04:34.340 --> 00:04:38.860
on one hand we have just the pip, pip free side, right? And then on the other, you've

00:04:38.860 --> 00:04:46.420
got the poetry and other pip where you've got like some other API that kind of manages

00:04:46.420 --> 00:04:51.580
everything. And I want some of the benefits of that, but I want it to be just a simple

00:04:51.580 --> 00:04:56.220
requirements that TXT or something like that in the end. Right. Yeah. And so I use pip

00:04:56.220 --> 00:05:00.540
tools and pip-tools will go and say, okay, what do you say you actually need? And then

00:05:00.540 --> 00:05:06.180
let's build out a, what would be into the virtual environment after that. And it's great,

00:05:06.180 --> 00:05:10.260
but you know, the command pip compile, like for mine, I don't know how long it takes,

00:05:10.260 --> 00:05:16.620
probably 15 seconds to pip compile, update the list of things for Talk Python Training.

00:05:16.620 --> 00:05:23.300
I think there's 250 dependencies in the dev version. It's out of control. It just takes

00:05:23.300 --> 00:05:30.860
real, real long time with this instant. And it's just so good. They have some benchmarks

00:05:30.860 --> 00:05:39.700
up there and it's like pip sync versus uv. pip sync is like 60 milliseconds versus almost

00:05:39.700 --> 00:05:45.580
five seconds. Right. Those are different types. It's, it just happens versus you, I go, okay,

00:05:45.580 --> 00:05:51.660
hold on. It's working. You know what I mean? Yeah. And what's really pretty interesting

00:05:51.660 --> 00:05:58.940
is that it looks like it's gotten a lot of, it's, it's not necessarily that it's just

00:05:58.940 --> 00:06:04.460
because it's written in rough, rough rust reading rough as I'm saying that, not just

00:06:04.460 --> 00:06:08.820
that it's written in rust, which it happens to be, cause that's the, the vibe of astral.

00:06:08.820 --> 00:06:15.100
All right. Starting with the rough stuff, but that they've maybe unlocked some different

00:06:15.100 --> 00:06:19.700
algorithms or techniques or, or something like that, where even if it were in Python,

00:06:19.700 --> 00:06:23.460
that would be faster, which is pretty interesting. Yeah. There's, there's some caching that they've

00:06:23.460 --> 00:06:30.580
done and like site-wide caching and keeping also keeping pip actually makes sense to have

00:06:30.580 --> 00:06:38.340
some of this stuff, virtual env and pip outside of the Python tool chain system so that because

00:06:38.340 --> 00:06:43.620
you're going to want it in each virtual environment. So having it installed outside is kind of

00:06:43.620 --> 00:06:53.860
interesting. So yeah, I'm pretty it's super fast. The, the hope is to be API compatible

00:06:53.860 --> 00:06:59.780
or at least interface compatible. It's in the, they're, they just don't have all of

00:06:59.780 --> 00:07:06.780
the features yet. So but like, I don't mean to say that it's not worth trying already.

00:07:06.780 --> 00:07:10.460
It is production ready right now. And that's what they're they've tested the heck out of

00:07:10.460 --> 00:07:15.540
it. It's just that you have to like work with your workflow to make sure that you work with

00:07:15.540 --> 00:07:22.980
it. So I was amusingly trying it out yesterday and ran into like three things right away

00:07:22.980 --> 00:07:29.580
that are two things that didn't work. So I did tried to use the --prompt to have

00:07:29.580 --> 00:07:35.940
a virtual I am just create my virtual environment with the same name. And prompt isn't supported

00:07:35.940 --> 00:07:39.660
yet, but it is, I went to file a defect and it was already fixed. It just hasn't been

00:07:39.660 --> 00:07:43.700
released yet. So, you know, probably by the time you listen to this, it's probably been

00:07:43.700 --> 00:07:48.180
released and it'll work. They're doing a lot of releases, aren't they? Yeah. There's been

00:07:48.180 --> 00:07:53.100
seven releases in four days. It's incredible. And a really responsive team. A lot of people

00:07:53.100 --> 00:07:58.060
are trying it out though. So yeah, I'm glad they're responsive because there's a bunch

00:07:58.060 --> 00:08:06.900
of issues people are working on. It's really fun to watch. The other thing was oh, oh,

00:08:06.900 --> 00:08:11.980
so virtual environments work, work really fast. It's like so fast. And the resolver

00:08:11.980 --> 00:08:17.540
actually is something we don't really talk about too much. But the resolver, like you

00:08:17.540 --> 00:08:21.220
said, when you're pip installing something, if you have like a requirements file, you

00:08:21.220 --> 00:08:25.780
got a bunch of projects in it or a bunch of things you're pulling in dependencies, they

00:08:25.780 --> 00:08:30.940
might have conflicting dependencies or not really conflicting, but they're the rules

00:08:30.940 --> 00:08:35.860
are such that you have to pick the right dependency so that it matches both tools. That's all

00:08:35.860 --> 00:08:43.300
done and it's super fast. I'm really impressed with how quick this thing is. And apparently

00:08:43.300 --> 00:08:49.700
everybody else is too. Because it's like almost immediately after the announcement. So look

00:08:49.700 --> 00:08:57.500
at all these contributors. We got 32 contributors already. These are not just people at Astral.

00:08:57.500 --> 00:09:05.540
Like I know that Brett is not there. So talks has already announced that there is a talks

00:09:05.540 --> 00:09:14.620
dash uv plugin so that you can have talks act faster too and use uv for virtual and

00:09:14.620 --> 00:09:21.080
for pip also. So it makes it faster. I think that's there's and I'm sure there's more tools

00:09:21.080 --> 00:09:24.660
to come that support will support uv out of the box.

00:09:24.660 --> 00:09:31.620
So yeah, awesome. I'm super excited. But I have a bunch of aliases for my shell that

00:09:31.620 --> 00:09:38.180
I almost never type pip, you know, Python dash MV. Like I, unless I'm doing like some

00:09:38.180 --> 00:09:42.140
presentation where I'm not sure that people would know what the heck's going on. So I'll

00:09:42.140 --> 00:09:47.300
just type V in V and that will do the magic or want to activate environments, AE or even

00:09:47.300 --> 00:09:51.460
I want to install the requirements, let's say PR, right. And I rewrote all of those

00:09:51.460 --> 00:09:56.220
to move from using pip to using uv. And it's basically like the same workflow for me, just

00:09:56.220 --> 00:09:57.220
better.

00:09:57.220 --> 00:10:02.180
Yeah. Well, the, one of the things that I do a lot is to just see what's in my virtual

00:10:02.180 --> 00:10:09.820
environment is do a pip list. And that's not supported yet either, but freezes and list

00:10:09.820 --> 00:10:16.500
is coming. I, you know, but so just use free. I didn't actually, I just, for some reason,

00:10:16.500 --> 00:10:21.380
I think there's like a 50, 50 split of people that use generally pip freeze over lists.

00:10:21.380 --> 00:10:23.500
What are you a freeze person or a list person?

00:10:23.500 --> 00:10:30.620
I'm a list person these days. But, but that's because, yeah, because I don't use pip freeze

00:10:30.620 --> 00:10:34.820
to generate like the requirements that TXT I use pip compile.

00:10:34.820 --> 00:10:39.700
Right. Right. Right. But pip freeze will just like list out which, what things you have

00:10:39.700 --> 00:10:44.380
installed and what versions. Yeah. And that's what I want list for. So I don't know why

00:10:44.380 --> 00:10:46.180
I use list, but anyway.

00:10:46.180 --> 00:10:47.740
Yeah, that's true.

00:10:47.740 --> 00:10:48.740
Pretty fun.

00:10:48.740 --> 00:10:56.260
Yeah. Okay. A couple of pieces of real time follow-up. First of all, Ofek Love from Hatch

00:10:56.260 --> 00:11:00.860
says the next minor release of Hatch will have an option to use uv under the hood instead

00:11:00.860 --> 00:11:03.940
of pip and virtual ENV. Hooray.

00:11:03.940 --> 00:11:07.220
I love Hatch. I've been doing like, you know, a lot of stuff with Hatch lately and it's

00:11:07.220 --> 00:11:16.340
really, really nice. So Ofek, you're killing it. Keep it up. Very nice. And you, you mentioned

00:11:16.340 --> 00:11:23.660
talks Henry Schreiner, who I see some comments from him out there as well, says with the

00:11:23.660 --> 00:11:29.780
Knox back in using uv in the Knox back in, it drops the time taken to build the docs

00:11:29.780 --> 00:11:36.780
from 22 seconds to four seconds. So, you know, that's, you know, it's not like 22 seconds

00:11:36.780 --> 00:11:42.780
is going to change the world at all if they just didn't take 22 seconds to build the docs,

00:11:42.780 --> 00:11:47.540
but the faster these things get, the more willing you're just like to do them more iteratively

00:11:47.540 --> 00:11:52.140
and you know, get tight in that feedback loop and stuff like that. So like for example,

00:11:52.140 --> 00:11:58.300
with rough, you know, and PyCharm now you can just check the box, like run, run rough

00:11:58.300 --> 00:12:03.140
onto the, under this project when I hit save, you know, if it took five seconds to do that,

00:12:03.140 --> 00:12:07.340
you would never check that. That would not even be a box you could check. Right. Yeah.

00:12:07.340 --> 00:12:12.340
Because it's so fast. So hopefully I'm not missing anything else from folks out there,

00:12:12.340 --> 00:12:16.860
but this stuff is, this stuff really neat. And I am super excited. I would love if some

00:12:16.860 --> 00:12:23.140
of the, the things they learned from this could be brought back into standard pip just

00:12:23.140 --> 00:12:25.780
to make standard pip faster too. That would still be cool.

00:12:25.780 --> 00:12:34.780
Yeah. And this, I guess that brings up a side question is, is really how, how much energy

00:12:34.780 --> 00:12:40.500
there's going to be around supporting the other tools that are getting replaced by things

00:12:40.500 --> 00:12:48.660
that Astral's building, but there's a, yeah. Anyway, we'll have that conversation later

00:12:48.660 --> 00:12:49.660
maybe.

00:12:49.660 --> 00:12:54.220
Yeah. Opec agrees with you that much of the speed up comes from the way they're, they're

00:12:54.220 --> 00:12:59.900
doing caching. Very, very nice. So, you know, people check this out. It's been a few days

00:12:59.900 --> 00:13:06.180
and it's, things are going fast in this space. So yeah, very, very exciting. Let's go on

00:13:06.180 --> 00:13:14.620
to the next topic. All right, Brian, Jupyter notebooks have definitely taken over as a

00:13:14.620 --> 00:13:21.300
really interesting way for creating, writing Python code, visualizing Python code, sharing

00:13:21.300 --> 00:13:29.340
it, communicating with it. And obviously Will McGugan's work with Rich and then on from

00:13:29.340 --> 00:13:34.260
their textual is doing amazing stuff too, right?

00:13:34.260 --> 00:13:40.100
Yeah. What if those came together like butter and jelly or whatever it is that you put together

00:13:40.100 --> 00:13:42.700
that goes together well. So David

00:13:42.700 --> 00:13:43.700
Chocolate, man.

00:13:43.700 --> 00:13:49.500
Yes. Okay. Sorry. Reese's pieces. I got it. Okay. David Brochart says, I just published

00:13:49.500 --> 00:13:58.580
my first blog post, which is we go over here. JP term, Jupyter in the terminal built on

00:13:58.580 --> 00:14:00.580
textual and rich.

00:14:00.580 --> 00:14:09.100
There's a bunch of terminal fun stuff that's based on the, this, on textual and other things

00:14:09.100 --> 00:14:12.300
that we could cover, but this is what I'm covering today. I'll save the other for next

00:14:12.300 --> 00:14:19.420
time. So Jupyter in the terminal and it says, well, you know, basically David says, look,

00:14:19.420 --> 00:14:24.780
the terminal is the new browser in the sense that we all have a terminal. And if we write

00:14:24.780 --> 00:14:29.620
to this, it's kind of a simple, cool UI that everybody already has. You can just plug stuff

00:14:29.620 --> 00:14:35.900
into it largely because of all the work that they've done over textualize with textual

00:14:35.900 --> 00:14:41.380
and rich and so on. Right. So he said, look, look at all these widgets we already have.

00:14:41.380 --> 00:14:46.660
So like there's a select widget and there's a whole bunch of others, but if we view this,

00:14:46.660 --> 00:14:54.700
I'll open a new tab, maybe open image in a new tab. Oh, it's downloading. Hold on. Because

00:14:54.700 --> 00:15:09.620
of course it is. Open this up. It's Jupyter lab side by side with JP term and check it

00:15:09.620 --> 00:15:14.380
out. It's like, you've got your cells, you've got your in your little bracket and quite

00:15:14.380 --> 00:15:19.780
similar. Huh? What do you think about this? That's incredible. That's pretty cool. Yeah.

00:15:19.780 --> 00:15:26.820
So it's got, let me go back to the article here. If you go down, it's got graphing, it's

00:15:26.820 --> 00:15:33.380
got like charts for it. And he says basically one of the real similar things to compare

00:15:33.380 --> 00:15:38.900
it to might be Jupyter light because Jupyter light is a WebAssembly based all front end

00:15:38.900 --> 00:15:43.940
Jupyter and this is like client doesn't even need a server, right? Because it just runs.

00:15:43.940 --> 00:15:51.700
So he does point out with textual web is a way to put this on the internet and share

00:15:51.700 --> 00:15:59.020
it as well. But like here, look, here's a bunch of cool graphs over time in the terminal.

00:15:59.020 --> 00:16:05.060
So this is a super early, almost a proof of concept even has images, which is interesting.

00:16:05.060 --> 00:16:13.140
I think they're bad. Yeah. Like you want, if you long for like Commodore 64 days, do

00:16:13.140 --> 00:16:18.460
you got something sore for you? But you can go, it's, you can see it's quite new.

00:16:18.460 --> 00:16:22.860
it's just been, you know, created like four months ago and just announced, I think

00:16:22.860 --> 00:16:30.900
pretty recently. So people go check this out. David is, I think a Jupyter core dev

00:16:30.900 --> 00:16:37.340
or at least a contributor over there. So yeah. interesting to see where this goes. Yeah.

00:16:37.340 --> 00:16:45.180
That's neat. Cool. Do you have the else's cool? Our sponsor. Yes, indeed. Indeed they

00:16:45.180 --> 00:16:52.420
are. So let me tell you real quick about Scout APM. They're big supporters of Python bites.

00:16:52.420 --> 00:16:59.180
So we appreciate that very much. So if you are tired of spending hours trying to find

00:16:59.180 --> 00:17:04.300
the root cause of issues impacting your performance, then you owe it to yourself to check out Scout

00:17:04.300 --> 00:17:10.820
APM. They're a leading Python application performance monitoring tool, APM that helps

00:17:10.820 --> 00:17:16.580
you identify and solve performance abnormalities faster and easier. Scout APM ties bottlenecks

00:17:16.580 --> 00:17:20.980
such as memory leaks, slow database queries, background jobs, and the dreaded N plus one

00:17:20.980 --> 00:17:27.300
queries that you can end up if you do lazy loading in your ORM, then you say, Oh no,

00:17:27.300 --> 00:17:31.500
why is it so slow? Why are you doing 200 database queries for what should be one? So you can

00:17:31.500 --> 00:17:35.700
find out things like that. And it links it back directly to the source code. So you can

00:17:35.700 --> 00:17:40.660
spend less time in the debugger and peeling logs and just finding the problems and moving

00:17:40.660 --> 00:17:45.820
on and you'll love it because it's built for developers by developers. It makes it easy

00:17:45.820 --> 00:17:50.020
to get set up. Seriously. You can do it in less than four minutes. So that's awesome.

00:17:50.020 --> 00:17:55.620
And the best part is the pricing is straightforward. You only pay for the data that used with no

00:17:55.620 --> 00:18:02.220
hidden overage fees or per seat pricing. And I just learned this, Brian, they also have,

00:18:02.220 --> 00:18:07.020
they provide the pro version for free to all open source projects. So if you're an open

00:18:07.020 --> 00:18:12.760
source maintainer and you want to have Scout APM for that project, just shoot them a message

00:18:12.760 --> 00:18:17.300
or something on their pricing page about that. So you can start your free trial and get instant

00:18:17.300 --> 00:18:23.340
insights today. Visit pythonbytes.fm/scout. The link is in your podcast player show notes

00:18:23.340 --> 00:18:28.860
as well. And please use that link. Don't just search for them because otherwise they don't

00:18:28.860 --> 00:18:32.540
think you came from us and then they'd stop supporting the show. So please use our link

00:18:32.540 --> 00:18:37.140
pythonbytes.fm/scout. Check them out. It really supports the show.

00:18:37.140 --> 00:18:38.140
Awesome.

00:18:38.140 --> 00:18:42.060
Yeah. All right. Over to you.

00:18:42.060 --> 00:18:49.820
I've got a little, little topic. Martin Hines wrote a blog post called everything, everything

00:18:49.820 --> 00:18:55.900
you can do with the Pythons text wrap module. And I love the text wrap module. And I think

00:18:55.900 --> 00:18:59.020
that more people, I think a lot of people just forget about it.

00:18:59.020 --> 00:19:04.260
I know Brian, do you have that feeling where like you spent half a day implementing some

00:19:04.260 --> 00:19:07.140
algorithm, then you're like, Oh, that was a function I could have just called?

00:19:07.140 --> 00:19:13.500
Yeah, exactly. Text wrap is that. Yeah. There's, and you know, every time I come back to it,

00:19:13.500 --> 00:19:19.140
I'm like, Oh, I'm still using stuff that I shouldn't. So it's a pretty short article

00:19:19.140 --> 00:19:24.060
or go through a few of the features of text wrap. First off it's shortened. So if you've

00:19:24.060 --> 00:19:31.700
got, if you want to make a piece of text shorter, you can use shorten and it's cool because

00:19:31.700 --> 00:19:38.260
it also does a placeholder thing. So it'll put like, like a dot, dot, dots and, and brackets

00:19:38.260 --> 00:19:42.900
or something or whatever placeholder you want to say, there's more texts there. It's just,

00:19:42.900 --> 00:19:50.300
I've cut it off. And it looks really nice. Easy to, easy to use. You just call it. So

00:19:50.300 --> 00:19:56.660
just a function, but then there's there's wrap which seems obvious, but can do word

00:19:56.660 --> 00:20:02.740
wrapping so you can split a long, a long chunk of text into multiple lines. But you can also

00:20:02.740 --> 00:20:10.260
do it. One of the things I like here is this is said, well, yes, of course you can use

00:20:10.260 --> 00:20:16.060
it for splitting long lines into, into different multiple lines, but also even if you're not

00:20:16.060 --> 00:20:22.420
going to print it like that it's very useful if you're going to batch, batch work on texts,

00:20:22.420 --> 00:20:29.620
you can split a big chunk of text into small or, you know, even size batches to work on

00:20:29.620 --> 00:20:37.260
those. That's a pretty cool use case for that. I like it. There is, there's even you can

00:20:37.260 --> 00:20:43.060
specify drop whitespace keyword for that. That's pretty cool. I didn't know about that.

00:20:43.060 --> 00:20:47.500
Neat. The, there is a, there's a class also. So all the, a lot of the stuff you can do

00:20:47.500 --> 00:20:53.860
with a text wrap you can do within a an object. So there's a text wrapper class that you can

00:20:53.860 --> 00:20:59.180
create a text wrapper object and do a whole bunch of work with that multiple times and

00:20:59.180 --> 00:21:04.900
only specify it once in the constructor. Very cool. And then at the bottom, last but not

00:21:04.900 --> 00:21:13.380
least is my favorite use of text wrap is ddent. So ddent will take, like if you've got a multi-line

00:21:13.380 --> 00:21:20.780
string and it's in your code, so it's all like off, you know, it's indented with the

00:21:20.780 --> 00:21:25.820
rest of your code, that multi-line will have a whole bunch of extra, like extra whitespace

00:21:25.820 --> 00:21:31.180
on the left. And you don't really want that when you're actually using it. And ddent will

00:21:31.180 --> 00:21:38.140
take, take out those extra extra left whitespace. And that, I love that. And this seems like

00:21:38.140 --> 00:21:45.380
it's a weird thing to have built in. But I use it a whole bunch of times, often in writing

00:21:45.380 --> 00:21:51.180
tests because I've got a multi-line string that I want to compare to some output. And

00:21:51.180 --> 00:21:56.860
I don't want it at the global level. I want it, you know, in my, in my test function.

00:21:56.860 --> 00:22:00.500
So I can just do that and use ddent to get it back to.

00:22:00.500 --> 00:22:06.060
Right. Cause it would look weird left aligned inside of an indented function, right?

00:22:06.060 --> 00:22:10.300
Yeah. So, I mean, you can, it just looks ugly. So.

00:22:10.300 --> 00:22:14.180
Yeah. You just, you lose the flow of where, where it belongs. Yeah.

00:22:14.180 --> 00:22:19.240
Yeah. So text wrap, it's there. It's fun. Use it.

00:22:19.240 --> 00:22:21.300
You already have it. It's in Python.

00:22:21.300 --> 00:22:22.300
Yeah.

00:22:22.300 --> 00:22:27.940
Yeah. Very nice. All right. Let's, let's talk about some design principles for the

00:22:27.940 --> 00:22:34.060
web here. This is not exactly Python, but it certainly links back to some cool things

00:22:34.060 --> 00:22:42.820
in Python. And it says place I ran across called html-first.com. Right. And the idea

00:22:42.820 --> 00:22:48.900
is there seems to be some fatigue, like, you know, how JavaScript, it used to be so easy.

00:22:48.900 --> 00:22:52.940
You would include a script, or if you were doing something super small, you maybe just

00:22:52.940 --> 00:22:56.940
say script tag and you would write a bit of JavaScript right in the page. And then you

00:22:56.940 --> 00:23:00.100
carry on. You're like, oh, that was easy. Look, that just worked. And then it said,

00:23:00.100 --> 00:23:05.220
oh, well now we're going to put it over on this other place. No, we want to like minify

00:23:05.220 --> 00:23:08.900
it. And we also, we're going to shake it down to only include the parts that we use. And

00:23:08.900 --> 00:23:12.340
we'll do the same for the CSS. And then you need this build step. And then we're going

00:23:12.340 --> 00:23:17.780
to compile it from TypeScript to JavaScript and then shake it down to not include this

00:23:17.780 --> 00:23:23.900
type of stuff. And then you're going to include it with import, export it with node. You're

00:23:23.900 --> 00:23:28.980
like, what is, why is this so hard? Why are there so many steps to this thing that used

00:23:28.980 --> 00:23:34.780
to be so easy? Right. And so this is kind of like, can we just not have that as like

00:23:34.780 --> 00:23:42.460
the default way of working already? So HTML, we'll get to HTML. HTML first is a set of

00:23:42.460 --> 00:23:48.060
guidelines for making it easier, faster, and more maintainable to build web software by

00:23:48.060 --> 00:23:51.980
leveraging the default capabilities of modern browsers. I learned something I didn't know

00:23:51.980 --> 00:23:55.740
from here that I used to do with JavaScript that I will never do again if I don't have

00:23:55.740 --> 00:24:03.660
to. So awesome. And then the extreme simplicity of HTMLs attribute syntax and, you know, keeping

00:24:03.660 --> 00:24:06.900
the view source alive, right. Used to be able to go to the website, like how did they do

00:24:06.900 --> 00:24:11.140
that? That's cool. View source. Now it's just like one tiny line of like a bunch of stuff

00:24:11.140 --> 00:24:15.940
that triggers JavaScript stuff. You're like, oh, well, all right. Or how did they do that?

00:24:15.940 --> 00:24:24.460
Oh, it's a bunch of divs. Yes, exactly. And so the goal is, you know, try to widen the

00:24:24.460 --> 00:24:29.860
pool of people who enjoy web development. Also, you can make it less expensive for your

00:24:29.860 --> 00:24:37.460
company because it's just less complex. So it's not just, you know, dev yells at the

00:24:37.460 --> 00:24:44.060
cloud because people are making it hard, right? Screams it into the sky, but some practices,

00:24:44.060 --> 00:24:50.940
right? So there's some examples, prefer vanilla approaches. And so, for example, did you know,

00:24:50.940 --> 00:24:56.240
you could say details summary and then stuff below it. And if you click the summary, it'll

00:24:56.240 --> 00:25:03.980
expand the thing below it. No JavaScript. No, I didn't either. No JavaScript. How about

00:25:03.980 --> 00:25:10.780
that? And then so they have a encouraged versus discouraged. Here's like import react user

00:25:10.780 --> 00:25:15.820
state from react. Create a details component, which is an arrow function which returns a

00:25:15.820 --> 00:25:23.740
constant of things and toggling the content. And then you on click you like, like, then

00:25:23.740 --> 00:25:29.500
you export the data. This is the import export railing against. Right. So that's one. Prefer

00:25:29.500 --> 00:25:35.940
just if you can do is basic HTML or even basic JavaScript. Don't go over the top. And where

00:25:35.940 --> 00:25:41.820
possible practice to where possible, define default to defining styles and behaviors with

00:25:41.820 --> 00:25:47.660
inline attributes with things like tailwind or tacky ons. And you can use libraries like

00:25:47.660 --> 00:25:52.700
hyper script and Alpine. And it says you're yes, it does mean your HTML gets a little

00:25:52.700 --> 00:25:58.420
bit busier, but you don't have to go to three places to figure out what's happened. Okay.

00:25:58.420 --> 00:26:03.620
So for example, it says encouraged button on click this dot class list dot add background

00:26:03.620 --> 00:26:12.120
green discouraged. You have a results pane says click me. And then you have a CSS section

00:26:12.120 --> 00:26:15.220
that actually what happens when you do that changes the color of green. Then you have

00:26:15.220 --> 00:26:19.980
some JavaScript that gets it. And then when it's done, you set the, the, the class, which

00:26:19.980 --> 00:26:23.980
then goes back to CSS. And these are usually mushed all over the place. And you're like,

00:26:23.980 --> 00:26:28.780
Oh, I'm not sure what's going on. And then you have a class that gets it. And then you

00:26:28.780 --> 00:26:32.700
have a class that gets it. And then you have a class that gets it. And then you have a

00:26:32.700 --> 00:26:36.700
class that gets it. And then you have a class that gets it. And then you have a class that

00:26:36.700 --> 00:26:40.540
gets it. And then you have a class that gets it. And then you have a class that gets it.

00:26:40.540 --> 00:26:44.260
And then you have a class that gets it. And then you have a class that gets it. And then

00:26:44.260 --> 00:26:47.500
you have a class that gets it. And then you have a class that gets it. And then you have

00:26:47.500 --> 00:26:50.860
a class that gets it. And then you have a class that gets it. And then you have a class

00:26:50.860 --> 00:26:55.900
that gets it. And then you have a class that gets it. And then you have a class that gets

00:26:55.900 --> 00:26:59.900
it. And then you have a class that gets it. And then you have a class that gets it. And

00:26:59.900 --> 00:27:03.180
then you have a class that gets it. And then you have a class that gets it. And then you

00:27:03.180 --> 00:27:07.180
have a class that gets it. And then you have a class that gets it. And then you have a

00:27:07.180 --> 00:27:11.100
class that gets it. And then you have a class that gets it. And then you have a class that

00:27:11.100 --> 00:27:13.820
gets it. And then you have a class that gets it. And then you have a class that gets it.

00:27:13.820 --> 00:27:14.820
And then you have a class that gets it. And then you have a class that gets it. And then

00:27:14.820 --> 00:27:15.820
you have a class that gets it. And then you have a class that gets it. And then you have

00:27:15.820 --> 00:27:16.820
a class that gets it. And then you have a class that gets it. And then you have a

00:27:16.820 --> 00:27:20.540
And to understand how it's going to get output,

00:27:20.540 --> 00:27:25.300
keeping the template simple in mostly HTML

00:27:25.300 --> 00:27:28.680
helps with discoverability and learning something new.

00:27:28.680 --> 00:27:34.300
So even if it isn't a production thing later, but it might be,

00:27:34.300 --> 00:27:38.220
starting out simple really helps with the learning process.

00:27:38.220 --> 00:27:39.180
Yeah.

00:27:39.180 --> 00:27:39.960
Oh, absolutely.

00:27:39.960 --> 00:27:41.940
And you also have to learn fewer things, right?

00:27:41.940 --> 00:27:42.780
Yeah.

00:27:42.780 --> 00:27:45.180
You have to learn three other frameworks, and build tools,

00:27:45.180 --> 00:27:45.660
and so on.

00:27:45.660 --> 00:27:49.540
All right, another one is about try to use libraries.

00:27:49.540 --> 00:27:50.920
If you've got to use libraries, try

00:27:50.920 --> 00:27:54.220
to use ones that leverage HTML attributes over JavaScript

00:27:54.220 --> 00:27:55.340
and custom attributes.

00:27:55.340 --> 00:27:59.820
Like, HTMX is a real nice example of that.

00:27:59.820 --> 00:28:01.420
Disfavor build steps.

00:28:01.420 --> 00:28:09.580
So encourage the ability to say, stylesheet/styles.css.

00:28:09.580 --> 00:28:13.260
Discourage distribute output npx css compile with a watch.

00:28:13.260 --> 00:28:14.680
And then don't forget to run that.

00:28:14.680 --> 00:28:16.100
And then why is this not updating?

00:28:16.100 --> 00:28:18.340
All these different things.

00:28:18.340 --> 00:28:21.700
And then finally, this one I think

00:28:21.700 --> 00:28:25.220
the HTMX is really relevant to Python folks.

00:28:25.220 --> 00:28:27.260
But also this one.

00:28:27.260 --> 00:28:30.940
Their example is Ruby, but it just as well could be any--

00:28:30.940 --> 00:28:33.340
the WTF forms.

00:28:33.340 --> 00:28:34.340
I think it is.

00:28:34.340 --> 00:28:36.180
The form builder type stuff.

00:28:36.180 --> 00:28:37.900
You see a lot of that actually in Django.

00:28:37.900 --> 00:28:40.500
It says, prefer naked HTML to obfuscation layers

00:28:40.500 --> 00:28:42.180
that compile down to HTML.

00:28:42.180 --> 00:28:47.540
So if you've got a form, just write the form.

00:28:47.540 --> 00:28:48.380
Put the values in it.

00:28:48.380 --> 00:28:53.200
Instead of form with and then form label for this.

00:28:53.200 --> 00:28:56.700
Form text field for that part of the model and so on.

00:28:56.700 --> 00:28:58.500
So anyway.

00:28:58.500 --> 00:29:01.380
And finally, preserve some view source for us all,

00:29:01.380 --> 00:29:02.800
because it'll help everyone.

00:29:02.800 --> 00:29:04.440
But anyway, I like this.

00:29:04.440 --> 00:29:09.660
And it's interesting to think of as a philosophy.

00:29:09.660 --> 00:29:12.180
The build steps, they also reference

00:29:12.180 --> 00:29:13.180
a whole bunch of people.

00:29:13.180 --> 00:29:16.660
How it used to be completely like, oh, you're such a noob

00:29:16.660 --> 00:29:18.700
if you want to skip having a bunch of build

00:29:18.700 --> 00:29:19.660
tools along the way.

00:29:19.660 --> 00:29:23.260
But it references four different articles and places

00:29:23.260 --> 00:29:25.180
where people are writing about, you know what?

00:29:25.180 --> 00:29:26.260
We're done with this build stuff.

00:29:26.260 --> 00:29:27.500
We're just writing CSS.

00:29:27.500 --> 00:29:28.820
We're just writing JavaScript.

00:29:28.820 --> 00:29:30.180
We're going to go with that.

00:29:30.180 --> 00:29:33.860
So anyway, pretty well backed up, some of these ideas.

00:29:33.860 --> 00:29:34.620
Cool.

00:29:34.620 --> 00:29:36.740
Nice.

00:29:36.740 --> 00:29:38.900
That's all of our main items.

00:29:38.900 --> 00:29:40.860
You can see there are tabs left for me.

00:29:40.860 --> 00:29:42.180
So that means I must have extras.

00:29:42.180 --> 00:29:43.260
But what about you?

00:29:43.260 --> 00:29:44.020
I do have extras.

00:29:44.020 --> 00:29:46.020
Do you want to go through yours since they're up?

00:29:46.020 --> 00:29:46.780
Or do you want to--

00:29:46.780 --> 00:29:47.280
Sure.

00:29:47.280 --> 00:29:47.900
Let's do it.

00:29:47.900 --> 00:29:48.380
All right.

00:29:48.380 --> 00:29:51.940
So first of all, Vincent Warmerdum says,

00:29:51.940 --> 00:29:55.340
hey, new PyData location, Pittsburgh.

00:29:55.340 --> 00:30:00.500
So there's a call for proposals at PyData Pittsburgh.

00:30:00.500 --> 00:30:02.060
Let's see, when is it?

00:30:02.060 --> 00:30:04.340
Hopefully it's not over.

00:30:04.340 --> 00:30:04.940
So yeah.

00:30:04.940 --> 00:30:07.580
So if you want to speak, if you're

00:30:07.580 --> 00:30:09.860
in the general Pittsburgh area or you want to be,

00:30:09.860 --> 00:30:14.260
then check out PyData Pittsburgh and go submit some talks there.

00:30:14.260 --> 00:30:16.700
It-- did it say when this is going to be?

00:30:16.700 --> 00:30:18.180
Surely.

00:30:18.180 --> 00:30:19.380
April.

00:30:19.380 --> 00:30:20.300
OK.

00:30:20.300 --> 00:30:21.140
April 11, I guess.

00:30:21.140 --> 00:30:22.820
Anyway, check it out.

00:30:22.820 --> 00:30:24.820
And you can submit a talk there.

00:30:24.820 --> 00:30:26.340
That's pretty cool.

00:30:26.340 --> 00:30:28.420
Just want to bring out one more example.

00:30:28.420 --> 00:30:31.700
You know, Brian, I riff on--

00:30:31.700 --> 00:30:37.060
or I rip on the ad space.

00:30:37.060 --> 00:30:39.340
And I say, look, we should run ad blockers.

00:30:39.340 --> 00:30:41.340
We should not support these people.

00:30:41.340 --> 00:30:43.820
And I know some folks are out there like, well, but then

00:30:43.820 --> 00:30:45.100
you're not supporting creators.

00:30:45.100 --> 00:30:48.940
You're not supporting the small folks who have Google

00:30:48.940 --> 00:30:50.820
ads on their site or whatever.

00:30:50.820 --> 00:30:51.540
And I don't know.

00:30:51.540 --> 00:30:55.100
I just-- I think the trade-off is not really worth it.

00:30:55.100 --> 00:30:57.900
So I just want to point out one more example of, like, terrible

00:30:57.900 --> 00:30:58.900
stuff that's happening.

00:30:58.900 --> 00:31:03.340
So our own Oregon Senator Ron Wyden

00:31:03.340 --> 00:31:06.500
is starting an investigation because a data broker who

00:31:06.500 --> 00:31:10.500
gets data from all these different sources,

00:31:10.500 --> 00:31:15.260
like ad retargeting stuff, used abortion clinic visitor

00:31:15.260 --> 00:31:19.380
location data because their endpoints were not

00:31:19.380 --> 00:31:24.940
blocked by some sort of DNS block or something

00:31:24.940 --> 00:31:27.500
to help send targeted misinformation

00:31:27.500 --> 00:31:29.060
to vulnerable women.

00:31:29.060 --> 00:31:29.940
How terrible, right?

00:31:29.940 --> 00:31:32.540
Yeah, awful.

00:31:32.540 --> 00:31:39.940
So I think we all should just stand up to the retargeting,

00:31:39.940 --> 00:31:40.420
remark--

00:31:40.420 --> 00:31:42.340
like, we don't have to.

00:31:42.340 --> 00:31:44.780
That has nothing to do with trying to make money

00:31:44.780 --> 00:31:47.220
for content creators.

00:31:47.220 --> 00:31:50.020
Yeah, I know, except for that the data flows

00:31:50.020 --> 00:31:51.540
into these shady places, right?

00:31:51.540 --> 00:31:54.540
And then they already have it.

00:31:54.540 --> 00:31:56.820
So instead of trying to sell them shoes,

00:31:56.820 --> 00:31:59.660
like, let's do something terrible like that.

00:31:59.660 --> 00:32:01.660
So yeah.

00:32:01.660 --> 00:32:05.300
Anyway, nextdns.io, folks.

00:32:05.300 --> 00:32:11.380
OK, call for proposals is also open for a very close nearby

00:32:11.380 --> 00:32:15.020
SciPy 2024, which is awesome.

00:32:15.020 --> 00:32:19.380
This will be in Tacoma, Brian, just a short hop and a skip

00:32:19.380 --> 00:32:21.860
up I-5 north from us.

00:32:21.860 --> 00:32:23.260
That'd be fun.

00:32:23.260 --> 00:32:26.300
Yeah, so July 8 to 14.

00:32:26.300 --> 00:32:30.700
I wish I could make it, but I am already tied up

00:32:30.700 --> 00:32:32.140
hanging around the house.

00:32:32.140 --> 00:32:34.900
My wife is traveling for work at that time,

00:32:34.900 --> 00:32:39.300
and somebody has to stay with the dog and the kid.

00:32:39.300 --> 00:32:42.140
So I'm not going to this.

00:32:42.140 --> 00:32:44.940
I have a feeling that's the same time frame as Oregon Country

00:32:44.940 --> 00:32:46.580
Fair, so I probably can't either.

00:32:46.580 --> 00:32:49.780
Yeah, but anyway, there's a lot of people out there who can.

00:32:49.780 --> 00:32:54.380
And a call for proposals are out, but you must act.

00:32:54.380 --> 00:32:54.860
You must act.

00:32:54.860 --> 00:32:59.140
Soon you have exactly seven days to get this ish,

00:32:59.140 --> 00:33:00.420
depending on when you listen.

00:33:00.420 --> 00:33:02.820
But as I speak, you have about seven days

00:33:02.820 --> 00:33:04.620
to get your talk proposal in.

00:33:04.620 --> 00:33:06.260
So please go do that.

00:33:06.260 --> 00:33:07.300
I owe it to you for your--

00:33:07.300 --> 00:33:10.180
So February 27 is that end time frame.

00:33:10.180 --> 00:33:11.100
Yes, thanks.

00:33:11.100 --> 00:33:14.180
A handful of topics.

00:33:14.180 --> 00:33:19.660
pytest 8.01, 8.0.1 is out.

00:33:19.660 --> 00:33:21.220
And why is this important?

00:33:21.220 --> 00:33:25.220
One, it's the first bug fix since 8.0 came out,

00:33:25.220 --> 00:33:27.740
and it has the bug that bugged me.

00:33:27.740 --> 00:33:33.340
So there was a regression where parameterization

00:33:33.340 --> 00:33:36.500
would go backwards for some reason.

00:33:36.500 --> 00:33:37.980
Yeah, we talked about that before.

00:33:37.980 --> 00:33:38.500
That's cool.

00:33:38.500 --> 00:33:40.020
So that's fixed.

00:33:40.020 --> 00:33:45.460
So I've got it updated to 8.0.1 everywhere I'm using pytest.

00:33:45.460 --> 00:33:51.140
OK, next, if you'd like to understand

00:33:51.140 --> 00:33:56.020
dependency injection, Hinnik has a new video out,

00:33:56.020 --> 00:33:59.020
Loose Coupling and Dependency Injection, The Easy Way.

00:33:59.020 --> 00:34:02.340
And I really like the dude, and I like what

00:34:02.340 --> 00:34:03.420
he's doing up on YouTube.

00:34:03.420 --> 00:34:05.340
So that's fun.

00:34:05.340 --> 00:34:09.220
Plus, dependency injection is not as complicated as it sounds,

00:34:09.220 --> 00:34:11.100
and he'll show you.

00:34:11.100 --> 00:34:14.340
But I freaked out the first time.

00:34:14.340 --> 00:34:16.220
People were like, oh, fixtures, they're

00:34:16.220 --> 00:34:17.660
kind of like dependency injection.

00:34:17.660 --> 00:34:20.020
I'm like, I don't know what you're talking about.

00:34:20.020 --> 00:34:22.780
They are kind of like dependency injection, indeed.

00:34:22.780 --> 00:34:24.060
Yeah.

00:34:24.060 --> 00:34:29.500
I had a guest, Nicole, on Python Test recently.

00:34:29.500 --> 00:34:31.020
This hasn't been aired yet.

00:34:31.020 --> 00:34:34.300
But we were talking about something completely different.

00:34:34.300 --> 00:34:36.940
And I mentioned all of the Rust that's

00:34:36.940 --> 00:34:38.860
coming into Python community.

00:34:38.860 --> 00:34:44.780
And I said, but I want to try to learn Rust,

00:34:44.780 --> 00:34:46.140
but I don't have a lot of time.

00:34:46.140 --> 00:34:49.100
And she said, oh, we had the same problem at work.

00:34:49.100 --> 00:34:50.380
So I wrote a tutorial.

00:34:50.380 --> 00:34:56.700
So there's yarr.fyi, YARR is yet another Rust resource.

00:34:56.700 --> 00:34:58.180
But the--

00:34:58.180 --> 00:34:59.220
Pirate friendly.

00:34:59.220 --> 00:35:01.860
Yeah, pirate friendly.

00:35:01.860 --> 00:35:06.060
It's a Rust tutorial, but intended

00:35:06.060 --> 00:35:08.220
for people that already know how to program,

00:35:08.220 --> 00:35:09.580
they just don't know Rust.

00:35:09.580 --> 00:35:13.780
And so I'm kind of excited to jump into that.

00:35:13.780 --> 00:35:15.020
OK, what else?

00:35:15.020 --> 00:35:18.860
Oh, yeah, I'm looking for trying to ramp up

00:35:18.860 --> 00:35:20.140
interviews for Python people.

00:35:20.140 --> 00:35:23.620
So if there's just some interesting stuff

00:35:23.620 --> 00:35:26.580
around the Python community that you'd like me to talk to,

00:35:26.580 --> 00:35:29.780
or if you'd like me to talk to you, reach out.

00:35:29.780 --> 00:35:32.420
And the first episode was Michael Kennedy.

00:35:32.420 --> 00:35:33.420
It was a good episode.

00:35:33.420 --> 00:35:36.740
But there's only been 12 episodes so far,

00:35:36.740 --> 00:35:38.220
but I want to get more out.

00:35:38.220 --> 00:35:40.740
So yeah.

00:35:40.740 --> 00:35:43.180
And the last thing I wanted to know,

00:35:43.180 --> 00:35:47.580
there's an interesting thing, phenomenon out there.

00:35:47.580 --> 00:35:52.340
Did you know that there's people still using X?

00:35:52.340 --> 00:35:53.700
Yes.

00:35:53.700 --> 00:35:54.500
I've seen them.

00:35:54.500 --> 00:35:57.900
There are many of them over there, actually.

00:35:57.900 --> 00:36:03.460
I am officially following zero people just as a protest.

00:36:03.460 --> 00:36:07.380
I don't really-- I show up there about once a month

00:36:07.380 --> 00:36:08.940
to check my direct messages.

00:36:08.940 --> 00:36:13.620
So if you want to contact me, I will probably

00:36:13.620 --> 00:36:14.860
reply to you eventually.

00:36:14.860 --> 00:36:17.420
But just warning, I'm not there very often.

00:36:17.420 --> 00:36:19.660
So anyway.

00:36:19.660 --> 00:36:21.260
Indeed, indeed.

00:36:21.260 --> 00:36:21.740
Awesome.

00:36:21.740 --> 00:36:24.660
Well, a bunch of great items.

00:36:24.660 --> 00:36:30.220
How about we talk about some unfortunate architectural

00:36:30.220 --> 00:36:33.020
or vendor-based decisions as part of our joke here.

00:36:33.020 --> 00:36:33.620
You ready?

00:36:33.620 --> 00:36:34.340
Have you seen this joke?

00:36:34.340 --> 00:36:35.220
Did you look ahead?

00:36:35.220 --> 00:36:36.260
I have not looked ahead.

00:36:36.260 --> 00:36:37.420
I don't know what you're talking about.

00:36:37.420 --> 00:36:38.140
Beautiful.

00:36:38.140 --> 00:36:38.660
All right.

00:36:38.660 --> 00:36:39.500
You ready?

00:36:39.500 --> 00:36:39.980
Yeah.

00:36:39.980 --> 00:36:41.140
Let's do the joke.

00:36:41.140 --> 00:36:42.460
So here we are.

00:36:42.460 --> 00:36:45.820
I got this over on Reddit.

00:36:45.820 --> 00:36:48.100
And of course, I zoomed it in.

00:36:48.100 --> 00:36:51.180
So why are we using SAP again when

00:36:51.180 --> 00:36:53.780
there's this open source thing that is so much simpler?

00:36:53.780 --> 00:36:55.940
Or why are we using Oracle again for this?

00:36:55.940 --> 00:36:58.740
Because whatever.

00:36:58.740 --> 00:37:01.900
So there's an angry team lead or something.

00:37:01.900 --> 00:37:03.780
Why did we end up with this solution?

00:37:03.780 --> 00:37:05.980
A couple people are like, cool savings?

00:37:05.980 --> 00:37:07.380
Time savings, maybe.

00:37:07.380 --> 00:37:09.420
And then someone, like a hipster-looking dude

00:37:09.420 --> 00:37:13.580
in the back is like, the vendor sent me a Yeti Tumbler.

00:37:13.580 --> 00:37:15.540
So they grab him and throw him out the window.

00:37:15.540 --> 00:37:20.380
Why are we stuck with this crappy system

00:37:20.380 --> 00:37:22.180
that is like, whatever?

00:37:22.180 --> 00:37:27.540
Well, it's conference swag, basically.

00:37:27.540 --> 00:37:30.500
Yeah.

00:37:30.500 --> 00:37:35.580
I think the real answer is usually the best options

00:37:35.580 --> 00:37:36.940
were all free.

00:37:36.940 --> 00:37:40.180
And we needed to have to pay somebody.

00:37:40.180 --> 00:37:42.420
Yeah, that's true.

00:37:42.420 --> 00:37:43.020
That's true.

00:37:43.020 --> 00:37:45.740
Well, none of them had an SLA.

00:37:45.740 --> 00:37:47.180
But--

00:37:47.180 --> 00:37:49.900
Do you have a Yeti Tumbler?

00:37:49.900 --> 00:37:54.300
I have one of these soft Yeti coolers

00:37:54.300 --> 00:37:56.660
that we'll take when we go out camping or boating or something.

00:37:56.660 --> 00:37:57.780
But I don't have a Tumbler.

00:37:57.780 --> 00:37:59.060
No, I don't believe so.

00:37:59.060 --> 00:37:59.660
You?

00:37:59.660 --> 00:38:00.460
I had to look it up.

00:38:00.460 --> 00:38:02.820
I didn't even know what this was.

00:38:02.820 --> 00:38:04.980
Oh, yeah.

00:38:04.980 --> 00:38:12.540
Yeti is like the Rolls Royce of Hillbilly land, I guess.

00:38:12.540 --> 00:38:17.300
They're like super, super nice coolers.

00:38:17.300 --> 00:38:19.220
If you want a thermos for your coffee,

00:38:19.220 --> 00:38:22.820
but you don't want to spend $10, you want to spend $40,

00:38:22.820 --> 00:38:24.020
get a Yeti.

00:38:24.020 --> 00:38:25.100
Yeah.

00:38:25.100 --> 00:38:26.300
Yeah, something like that.

00:38:26.300 --> 00:38:27.580
We have a lot of Yeti stuff, actually.

00:38:27.580 --> 00:38:28.300
It's really nice.

00:38:28.300 --> 00:38:29.740
I'm just joking.

00:38:29.740 --> 00:38:32.460
Bougie.

00:38:32.460 --> 00:38:34.060
What if stuff got warm, Brian?

00:38:34.060 --> 00:38:35.020
What if it got warm?

00:38:35.020 --> 00:38:38.020
What if your beer got a little bit warm?

00:38:38.020 --> 00:38:39.820
And your mountains and your cores,

00:38:39.820 --> 00:38:40.900
they weren't blue anymore.

00:38:40.900 --> 00:38:44.020
They turn whatever color they're not when they're not blue.

00:38:44.020 --> 00:38:46.900
Whatever color they are when they're not blue.

00:38:46.900 --> 00:38:48.260
You know what I'm talking about?

00:38:48.260 --> 00:38:49.900
One of the Coors beer cans has a can

00:38:49.900 --> 00:38:51.460
that when it's a certain temperature,

00:38:51.460 --> 00:38:54.620
the mountains on the can turn blue.

00:38:54.620 --> 00:38:57.020
And if it's too warm, they turn white or something.

00:38:57.020 --> 00:38:58.340
I don't know what other color.

00:38:58.340 --> 00:38:58.820
OK.

00:38:58.820 --> 00:39:00.900
So we had a couple options.

00:39:00.900 --> 00:39:03.540
We could have made better beer or a better can.

00:39:03.540 --> 00:39:05.500
We chose a better can.

00:39:05.500 --> 00:39:06.700
What do you see when you're shopping?

00:39:06.700 --> 00:39:09.660
Come on now.

00:39:09.660 --> 00:39:11.540
Awesome.

00:39:11.540 --> 00:39:12.740
OK.

00:39:12.740 --> 00:39:13.700
Yeah.

00:39:13.700 --> 00:39:15.740
Juan, as always, thank you for being here.

00:39:15.740 --> 00:39:18.700
And thank you, everyone, for listening.

00:39:18.700 --> 00:39:20.460
See you all.

