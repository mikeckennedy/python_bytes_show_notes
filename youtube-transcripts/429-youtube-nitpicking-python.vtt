WEBVTT

00:00:02.520 --> 00:00:03.400
Hey, Michael. Hey, everybody.

00:00:04.160 --> 00:00:04.220
Hey.

00:00:04.800 --> 00:00:07.720
I am excited to come back from this nice break.

00:00:08.120 --> 00:00:12.900
I took a little break over Easter, so I'm glad to get back to recording.

00:00:15.120 --> 00:00:15.900
Me too. Love it.

00:00:17.820 --> 00:00:22.340
Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:22.900 --> 00:00:29.260
This is episode 429, recorded April 21st, 2025, and I am Brian Ockin.

00:00:30.200 --> 00:01:07.340
and I am Michael Kennedy and this episode is sponsored by the folks at Posit Workbench thank you Posit also listen to them later in the show of course if you'd like to connect with us please do so on Blue Sky or Mastodon we have all of those links in the show notes we love to hear from you love to hear new topics that you think we might want to cover and if you'd like to listen to us live head on over to pythonbytes.fm/live Usually Mondays at 10 Pacific time, but you can also use that link just to find the YouTube channel to watch older episodes too.

00:01:08.460 --> 00:01:15.520
And finally, you don't need to write anything down while you're listening because we'll just send it to you.

00:01:16.050 --> 00:01:24.540
So head on over to pythonbytes.fm, join the mailing list or the newsletter list, and you'll just get an email sent every week with all the links.

00:01:24.760 --> 00:01:29.620
but it also has backup information of what you need to know to understand the story.

00:01:30.040 --> 00:01:31.260
So really nice.

00:01:32.600 --> 00:01:34.940
And we don't use it for spamming or anything like that.

00:01:36.740 --> 00:01:37.260
Anyway,

00:01:38.860 --> 00:01:40.300
Michael, what do you got for us?

00:01:41.390 --> 00:01:42.220
I might have a problem.

00:01:43.539 --> 00:01:45.940
I like to self-host stuff too much.

00:01:47.250 --> 00:01:53.780
It means I end up with things that I have to take care of rather than just have a login somewhere.

00:01:55.360 --> 00:01:57.640
but I'm going to make a recommendation nonetheless.

00:01:59.140 --> 00:02:35.640
So if you find yourself using Slack, I think even Zoom maybe, if you're using Jira, if you're using Notion, and you would like that all in one place rather than a bunch of different apps that you pay for, for free, for open source, self-hosted, or paid as hosted if you really want to do it that way, There's a project or tool or platform, whatever, called HULY, H-U-L-Y, an open source platform that serves as an all-in-one replacement for Linear, Jira, Slack, and Notion.

00:02:36.020 --> 00:02:36.600
How cool is that?

00:02:37.880 --> 00:02:38.100
Okay.

00:02:38.840 --> 00:02:39.080
Okay.

00:02:39.460 --> 00:02:53.060
So maybe you want to have some place to do chat conversations or you want to store your documents or you want to do project management and sync it with your GitHub issues or do planning.

00:02:53.640 --> 00:02:58.620
So all of this stuff is super cool, I think, and even has video meetings.

00:02:58.860 --> 00:03:10.680
So if you want to also get rid of Microsoft Teams or Zoom or whatever, it gives you a nice private way to do all that, right?

00:03:11.480 --> 00:03:22.440
And I don't know, that really resonates with me as just like here's this cool open source thing that we can do and we can run it and we don't have to have all these different services.

00:03:22.940 --> 00:03:25.100
And I don't know about the others.

00:03:26.040 --> 00:03:27.780
I honestly don't know the pricing for Jira.

00:03:28.120 --> 00:03:28.980
I've never paid for Jira.

00:03:29.900 --> 00:03:31.020
But Slack is out of control.

00:03:31.260 --> 00:03:32.780
Slack is super

00:03:32.780 --> 00:03:33.300
expensive

00:03:33.300 --> 00:03:36.840
for what you get from it and things like that.

00:03:37.100 --> 00:03:44.160
And so having this with a bunch of dashboards, and it even has a nice self-hosting option.

00:03:44.620 --> 00:03:49.900
So if you are a person who does Docker Compose, guess what?

00:03:50.500 --> 00:03:56.940
you just docker compose up dash D you have your whole platform running which I think is pretty excellent.

00:03:58.000 --> 00:04:04.560
So that's how a lot of these self-hosted things are shared and maintained so you don't even have to figure out how to put it into Docker.

00:04:04.760 --> 00:04:08.820
It's already there and set up so you just run it and you're good to go.

00:04:09.040 --> 00:04:09.760
Just make sure you do backups.

00:04:10.880 --> 00:04:11.520
Pretty neat I think.

00:04:12.720 --> 00:04:13.260
That's pretty cool.

00:04:14.100 --> 00:04:16.180
Yeah, and it also syncs both ways with GitHub.

00:04:17.000 --> 00:04:36.600
So if you've got GitHub issues it will sync with the issues and if you have GitHub projects it will sync with those projects so it's project management tools and it's issue management like it's JRO replacement stuff is mirrored on GitHub so not everybody has to use it like you can have internal people on this and external people just perceiving it as GitHub

00:04:37.620 --> 00:04:39.120
I have GitHub issues

00:04:40.260 --> 00:04:41.820
I was just talking to my therapist

00:04:41.820 --> 00:04:43.000
about it the other day

00:04:44.539 --> 00:04:47.820
yes indeed and John Outer says This is why I love the podcast.

00:04:48.280 --> 00:04:50.140
Thanks for the holy recommendation.

00:04:51.180 --> 00:04:53.740
And loves self-hosting as much as I do.

00:04:53.880 --> 00:04:54.280
So awesome.

00:04:54.920 --> 00:04:55.140
Thanks, John.

00:04:55.840 --> 00:04:57.600
Yeah, holy self-hosting, Batman.

00:04:58.100 --> 00:04:58.300
Anyway.

00:04:59.160 --> 00:05:00.300
Holy self-hosting.

00:05:00.660 --> 00:05:01.120
Indeed, yeah.

00:05:01.780 --> 00:05:05.760
The problem is you can end up with, you're like, well, now I've got 12 apps to back up and maintain.

00:05:06.180 --> 00:05:10.600
But it is super cool to be able to say, we don't have to worry about data privacy.

00:05:11.880 --> 00:05:23.480
We don't have to worry about sharing things or if those places get hacked they change their business model or if they go out of business, you know, you've got a self-hosted open source thing that you can fork and just run.

00:05:24.120 --> 00:05:25.080
And there's something cool about that.

00:05:25.600 --> 00:05:30.280
I wonder if anybody's got like, because this sounds great, but I don't really want to do that work.

00:05:30.680 --> 00:05:33.660
So I wonder if there's a self-hosting as a service service.

00:05:36.300 --> 00:05:37.320
I think there actually is.

00:05:37.320 --> 00:05:39.000
I'm forgetting the name of it right now.

00:05:39.160 --> 00:05:42.180
But yes, there basically is a self-hosting as a service.

00:05:42.440 --> 00:05:42.560
Yes.

00:05:42.700 --> 00:05:43.100
It's amazing.

00:05:43.460 --> 00:05:43.660
Okay.

00:05:45.000 --> 00:05:46.220
What an interesting idea.

00:05:46.920 --> 00:05:47.880
All right, that's it for this one.

00:05:47.950 --> 00:05:48.260
Over to you.

00:05:48.620 --> 00:05:48.820
Okay.

00:05:49.560 --> 00:05:54.220
Well, I am going to talk about critical, oh, what are those called again?

00:05:54.640 --> 00:05:55.000
CVEs?

00:05:55.060 --> 00:06:01.280
Common, I should have practiced this, common vulnerability and exposures.

00:06:02.680 --> 00:06:12.860
So CVEs, we're used to talking about these when there's like really wide-scale attacks, but they kind of happen all the time, like vulnerability problems.

00:06:14.320 --> 00:06:29.580
This cropped up this last week rather urgently because the CVE system, the entire system is sort of built on top of a non-for-profit called MITRE.

00:06:30.400 --> 00:06:41.160
And the entire system, but there was a contract with the U.S. government to maintain this database of CVEs.

00:06:41.740 --> 00:06:54.160
However, and this has been around for 25 years, it ran the risk of possibly going away because of all of the cost-cutting that our current lovely administration is doing.

00:06:57.120 --> 00:06:59.780
It's a waste. It's government waste, I tell you, Ryan.

00:07:03.400 --> 00:07:06.940
A lot of people involved in this are volunteers anyway. That's just nuts.

00:07:08.320 --> 00:07:13.480
Anyway, so a 25-year-old CVE program ran the risk of going away.

00:07:13.930 --> 00:07:22.220
There was a letter that came out from the vice president of MITRE, gave notice of potential halt of operations.

00:07:23.080 --> 00:07:26.660
And apparently they had been worried about this for some time.

00:07:26.780 --> 00:07:43.140
So there's this, in order to deal with this and possibly make sure that we don't have this risk in the future, there is now a CVE foundation.

00:07:43.500 --> 00:07:59.260
So there's been an announcement as of April 16th that the CVE Foundation has been formally established to ensure long-term viability, stability, and independence of the CVE program.

00:08:01.200 --> 00:08:01.720
This

00:08:01.720 --> 00:08:02.480
is really

00:08:02.480 --> 00:08:02.780
cool.

00:08:02.910 --> 00:08:05.080
It isn't something they just, like, suddenly did.

00:08:05.220 --> 00:08:07.320
They've been thinking about it for a while and planning it.

00:08:07.940 --> 00:08:11.840
And there's an announcement at thecvefoundation.org.

00:08:12.500 --> 00:08:20.640
And they're going to release information about the transition, what its structure is, the transition planning, opportunities for

00:08:20.640 --> 00:08:21.700
involvement later.

00:08:22.040 --> 00:08:23.560
But right now there's just an announcement.

00:08:24.220 --> 00:08:28.960
But this is pretty crazy that we would run the risk of losing this.

00:08:29.880 --> 00:08:32.520
This is how we talk about vulnerabilities.

00:08:34.220 --> 00:08:42.099
But apparently there was an announcement also, I couldn't find the link to it, that they did not lose funding.

00:08:42.460 --> 00:08:46.240
So it's okay for now, but it's still the for now part.

00:08:46.500 --> 00:08:49.760
So the foundation wants to make sure that it's not just for now.

00:08:49.910 --> 00:08:56.240
I still think it's something that we should fund as a government, but it is what it is, I guess.

00:08:57.420 --> 00:09:00.100
I think we should fund it, but also I

00:09:00.100 --> 00:09:20.340
feel like maybe that should be more of like kind of in the style of Python or Mozilla Foundation or, you know, That it's tied to the U.S. government rather than just an international organization of people who are really committed to tracking security issues.

00:09:21.540 --> 00:09:25.580
It doesn't take insane amounts of funding to track these things.

00:09:25.780 --> 00:09:26.120
You know what I mean?

00:09:27.220 --> 00:09:30.720
I have no idea what the work is involved for this.

00:09:32.300 --> 00:09:36.100
Yeah, I don't know what the work is, but it's not like there's a lot of server infrastructure.

00:09:36.280 --> 00:09:39.840
It's not running like AI forums or something.

00:09:40.440 --> 00:09:50.100
Yeah, and the funding probably should be coming from all the ISPs and big companies and stuff that are benefiting from this.

00:09:50.860 --> 00:09:51.260
I

00:09:51.260 --> 00:09:55.300
think so too, but hey, I'm not against the U.S. government.

00:09:55.480 --> 00:09:59.720
I'm glad they were doing it, but it just puts it in a weird situation these days.

00:10:00.220 --> 00:10:00.400
Yeah,

00:10:00.720 --> 00:10:21.560
and Python became a CVE authority not too long ago, the PSF, so they can announce their own CVEs around things in the Python space without going through an external, not convincing some other participant to allow them to list their CVE for Python and so

00:10:21.560 --> 00:10:21.640
on.

00:10:23.180 --> 00:10:26.300
So there's a bit of a distributed aspect of it.

00:10:26.720 --> 00:10:34.100
Now, before we jump on to thinking our sponsor, Brian, the thing that I was thinking of is Alestio, E-L-E-S-T-I-O.

00:10:35.080 --> 00:10:39.720
and it says fully manage DevOps or your cloud and open source software.

00:10:40.380 --> 00:10:41.760
And I've not used this.

00:10:41.810 --> 00:10:48.560
It's not a recommendation, but we, as in they, deploy and manage open source software to your cloud provider of choice.

00:10:48.960 --> 00:10:57.740
So create a Hetzner server, point it at it, and then pick the various self-hosted things that you want and they will self-host them there for you.

00:10:57.830 --> 00:10:58.880
I believe that's how it works.

00:10:59.060 --> 00:10:59.420
Awesome.

00:10:59.710 --> 00:11:00.680
Self-hosting as a service.

00:11:01.180 --> 00:11:01.380
Who knew?

00:11:02.960 --> 00:11:03.320
Who knew?

00:11:03.350 --> 00:11:04.040
Well, I guess you did.

00:11:04.760 --> 00:11:07.780
But we also have

00:11:07.780 --> 00:11:09.480
Posit doing pretty awesome stuff.

00:11:09.540 --> 00:11:10.480
Why don't you tell them about it?

00:11:11.240 --> 00:11:14.620
This portion of Python Bytes is brought to you by the folks at Posit.

00:11:15.260 --> 00:11:19.100
Posit has been making huge investments in the Python community lately.

00:11:19.600 --> 00:11:25.260
Known originally for our studio, they've been building out a suite of tools and services for Team Python.

00:11:26.440 --> 00:11:30.380
Have you thought of all the things that go into a Python data science project?

00:11:31.080 --> 00:11:33.520
You need your notebook or IDE for sure.

00:11:34.140 --> 00:11:42.220
But you also need a server or cloud environment to run it, a version of Python, packages, access to your databases, and internal APIs.

00:11:43.000 --> 00:11:44.040
That's a lot to set up.

00:11:44.740 --> 00:11:50.340
And if you change any of these things when you return to your project months down the road, you might get different results.

00:11:51.020 --> 00:11:58.340
Wouldn't it be nice to have all of this set up for you in one easy-to-access place whenever you want to get work done?

00:11:59.060 --> 00:12:00.720
That's the goal of Posit Workbench.

00:12:01.320 --> 00:12:09.920
Posit Workbench allows data scientists to code in Python within their preferred development environment without any additional strain or on IT.

00:12:10.390 --> 00:12:21.880
It gives data scientists access to all the development environments they love, including Jupyter Nobix, JupyterLab, Positron, and VS Code, and yet it helps ensure reproducibility.

00:12:22.460 --> 00:12:41.300
Here's how it works. You or your team set up Posit Workbench on a powerful, dedicated server within your organization or on the same cloud service that is hosting your most important data sources, such as AWS, SageMaker, Azure, GCP, Kubernetes, or pretty much anywhere.

00:12:42.340 --> 00:12:46.200
There, you create dedicated, pre-configured environments to run your code and notebooks.

00:12:47.180 --> 00:12:53.020
And importantly, you also configure access to proprietary databases and internal APIs.

00:12:54.320 --> 00:13:05.360
When it's time to onboard a new data scientist or start a new project, you just fire it up in Workbench and it's fully configured and ready to go, including the infrastructure side things.

00:13:06.300 --> 00:13:09.340
All of this is securely administered by your organization.

00:13:10.720 --> 00:13:16.780
If you work on a data science team where consistency matters, you owe it to you and your org to check out Posit Workbench.

00:13:17.480 --> 00:13:24.860
Visit pythonbytes.fm/workbench today and get a three-month free trial to see if it's a good fit.

00:13:25.400 --> 00:13:27.720
That's pythonbytes.fm/workbench.

00:13:28.360 --> 00:13:29.800
The link is in your podcast player

00:13:29.800 --> 00:13:30.320
show notes.

00:13:30.900 --> 00:13:33.120
Thank you to Posit for supporting Python Bytes.

00:13:35.960 --> 00:13:36.160
Indeed.

00:13:36.760 --> 00:13:37.580
All right, you ready for the next one?

00:13:37.980 --> 00:13:38.080
Yeah.

00:13:39.840 --> 00:13:41.680
Database. Database things.

00:13:42.320 --> 00:13:54.820
So here's a really interesting free web app, I guess it is, that lets you draw and import and export and visualize database diagrams.

00:13:56.340 --> 00:14:08.680
So either you've got your own project, or where I see this being super useful is you're put onto a new project or you're a consultant, and they're like, and welcome for the two weeks.

00:14:08.980 --> 00:14:11.080
here's the database and here's the app.

00:14:11.500 --> 00:14:12.320
Please fix it by now.

00:14:12.860 --> 00:14:14.980
And you're like, how do I even get started?

00:14:15.200 --> 00:14:15.940
What is here, right?

00:14:16.080 --> 00:14:23.340
So this thing called drawdb.app allows you to draw, copy, and paste database diagrams.

00:14:23.660 --> 00:14:30.160
And if you go there, you can see there's really nice graphics and the UI is quite nice for interacting with it.

00:14:30.640 --> 00:14:32.560
So it says you can try this for yourself for free.

00:14:32.780 --> 00:14:48.560
And what's interesting is it asks you to choose your database, as in like SQLite or Postgres or SQL Server or whatever, because it imports and exports SQL statements.

00:14:49.160 --> 00:14:55.040
And those different databases have different database SQL dialects, which in and of itself is annoying.

00:14:55.280 --> 00:14:58.140
But let's just say, I don't know, I'll do Postgres, right?

00:14:58.840 --> 00:15:07.140
And you come in here, you can add a little table, and you can then edit that thing, give it a column, multiple columns, different data types.

00:15:08.020 --> 00:15:20.840
and create a second one, then you can say, like, grab one column from one database, or one table, rather, and then drag it and drop it in a field on another column, and that'll create a foreign key relationship automatically, for example.

00:15:21.860 --> 00:15:35.320
And you can go over and you can say, file, export SQL, or import from SQL, and that'll generate the data definition language, DDL stuff, create scripts and create the indexes and columns.

00:15:36.220 --> 00:15:41.140
Or if you got a database, you can export it and then load up this diagram based on what was in your database.

00:15:41.700 --> 00:15:45.740
And then visualize it, tweak it, save it, or just try to understand it.

00:15:47.060 --> 00:15:47.800
That's really cool.

00:15:48.640 --> 00:15:48.780
Yeah.

00:15:49.380 --> 00:15:50.760
And as far as I can tell, it's free.

00:15:50.820 --> 00:15:51.120
I don't know.

00:15:51.200 --> 00:15:54.260
Maybe there's some point where I pay for it, but I don't think so.

00:15:54.880 --> 00:15:59.560
So anyway, I think it's a great little app, and people should check it out if they have

00:15:59.560 --> 00:16:00.720
databases they want to visualize.

00:16:01.140 --> 00:16:03.400
And, you know, I'm usually starting with a drawing anyway.

00:16:03.640 --> 00:16:04.700
Like drawing it on paper.

00:16:04.940 --> 00:16:06.980
So why not just draw it in something like this?

00:16:07.860 --> 00:16:10.720
Exactly, because then you could say, generate my table from this.

00:16:11.880 --> 00:16:12.840
Yeah, that's cool.

00:16:13.440 --> 00:16:13.560
Cool.

00:16:13.840 --> 00:16:15.460
So not much more to it, but there it is.

00:16:18.000 --> 00:16:18.260
All right.

00:16:19.899 --> 00:16:29.040
My last item is a, and I'm only going to cover part of this, but it is a blog post by Edward Lee called 14 Advanced Python Features.

00:16:29.860 --> 00:16:41.220
And, you know, it's a listicle sort of a thing, But there's a lot of those advanced Python features, and he even talks about this, that are really not that advanced.

00:16:41.400 --> 00:16:46.500
They're just stuff that people should know and some fun things for advanced for beginners, but not really.

00:16:47.920 --> 00:16:58.080
But I kind of really like this because there are things in this list that I really wish I would have learned earlier.

00:16:59.080 --> 00:17:00.900
And so anyway, I'll just jump in.

00:17:01.000 --> 00:17:02.300
There's a few things I wanted to pick out.

00:17:04.020 --> 00:17:05.920
first off is typing overloads.

00:17:06.100 --> 00:17:09.540
And this is something that I just learned while reading this article.

00:17:09.620 --> 00:17:10.620
I didn't know you could do this.

00:17:11.140 --> 00:17:16.020
So within the typing module, you can say from typing import overload.

00:17:16.880 --> 00:17:28.459
And then one of the things you can do then is you can essentially list overloaded operations, overloaded definitions for a function call.

00:17:28.920 --> 00:17:35.880
And it's not really like full function overloading like we have in C or something like that.

00:17:36.460 --> 00:17:38.540
However, there's return types.

00:17:38.720 --> 00:17:49.880
So let's say there's an example here that if you only pass in a certain type, then you're always going to get a list of strings.

00:17:50.580 --> 00:17:56.300
And if you're passing in a different type, then you always get a single string back.

00:17:56.600 --> 00:18:01.240
Those sorts of things are nice to have for typing and return types.

00:18:01.700 --> 00:18:03.780
And that's something that we don't really have in Python.

00:18:04.000 --> 00:18:08.700
You can't have a difference in just return type.

00:18:08.960 --> 00:18:11.620
So having that in place is kind of neat.

00:18:13.320 --> 00:18:14.880
I'm going to play with this right away.

00:18:15.020 --> 00:18:16.080
So that's pretty cool.

00:18:17.480 --> 00:18:19.040
Overloading functions with the typing.

00:18:19.420 --> 00:18:20.500
So I'll have to try that.

00:18:21.520 --> 00:18:27.280
Next up is something I've been using a lot lately, is keyword-only and positional-only arguments.

00:18:28.040 --> 00:18:37.480
And specifically, so we now have a star or a slash that you can separate the parameters to a function, the parameter definition.

00:18:38.120 --> 00:18:45.420
And the asterisk or star means that everything after that is keyword-only parameters.

00:18:47.380 --> 00:18:53.600
And then the slash is positional-only parameters, And that's everything before.

00:18:54.350 --> 00:18:56.420
So one of them is before and one of them is after.

00:18:56.510 --> 00:19:02.360
So in his example, he's got A, B, and then slash, C, D, star, E, F.

00:19:02.450 --> 00:19:05.880
So that means A and B are positional only.

00:19:06.560 --> 00:19:10.220
C and D can be positional or keyword.

00:19:10.810 --> 00:19:13.460
And then E and F have to be keyword only.

00:19:13.920 --> 00:19:41.940
And the thing that I'm doing a lot is why I'm using the keyword only one a lot is for functions that have, and these are all not usually API functions, but internal functions that have a lot of parameters that have defaults, and you would almost hardly ever pass it like just positional only because the defaults are, it doesn't really matter the order.

00:19:42.120 --> 00:19:44.040
It's just they all have defaults, and there's a bunch of them.

00:19:44.600 --> 00:19:54.460
So I really want all the callers of that, every place we're calling the function, to list which variable or which parameter they're defining as they call the function.

00:19:54.610 --> 00:19:56.060
And you can do that with the asterisks.

00:19:56.540 --> 00:19:56.920
Super cool.

00:19:56.920 --> 00:19:57.360
Yeah, that's really cool.

00:19:57.680 --> 00:20:01.420
Another thing that I think is really useful for that is if it's the same.

00:20:01.780 --> 00:20:08.820
A lot of times you're going to give it numbers or true and false where you don't have a variable that you're passing in, but you have just

00:20:08.820 --> 00:20:10.560
some kind

00:20:10.560 --> 00:20:11.080
of constant.

00:20:11.510 --> 00:20:15.800
Because if it goes 775 true, true, false, you're like, whoa, whoa, whoa.

00:20:16.780 --> 00:20:16.980
What?

00:20:17.010 --> 00:20:17.100
What?

00:20:18.020 --> 00:20:22.780
It's not like variable names are there where like X, Y, Z, like, oh, those are the dimensions.

00:20:23.080 --> 00:20:24.880
No, it just goes 7, 7, 5, like, hmm.

00:20:25.780 --> 00:20:26.820
Which is which, you know what I mean?

00:20:27.400 --> 00:20:28.000
Especially true,

00:20:28.050 --> 00:20:29.420
true, false, true, something like that.

00:20:29.540 --> 00:20:34.940
If you force keyword arguments on it, then it's a much more readable thing at the call site.

00:20:35.920 --> 00:20:46.860
Yeah, things that are like generic, like you're just adding things, it doesn't really matter that your add function is A and B, but for true and false, you really want order.

00:20:46.980 --> 00:20:47.680
What do those mean?

00:20:48.540 --> 00:20:50.160
I like those. It's a good addition.

00:20:51.160 --> 00:21:09.060
Last thing I want to come to is there's a list of, he said number nine is Python nitpicks, which is really a few topics around it, but it's listed as a nitpick because it's a bummer when people aren't utilizing this.

00:21:09.620 --> 00:21:20.780
So the for else statement, and this is, I think, probably still controversial, is maybe a little bit, is whether or not you should utilize the else clause in for statements.

00:21:24.060 --> 00:21:31.820
And kind of, you know, it's like often before the else clause or without using it, you might have to say like something.

00:21:31.940 --> 00:21:40.960
His example is like a found flag to say, you know, whether or not you actually found the item you were looking for while you're iterating the for loop.

00:21:42.100 --> 00:21:43.520
And then you can check that later.

00:21:43.800 --> 00:21:45.420
But there's else.

00:21:45.570 --> 00:21:53.700
You could just say, you know, if you didn't find, if you never hit anything inside the for loop, you can else out.

00:21:55.380 --> 00:21:56.940
It's still a little weird, though.

00:21:57.120 --> 00:22:03.620
I still find it very good to make sure that you comment that to say what's going on in the else.

00:22:03.760 --> 00:22:04.040
You're using

00:22:04.040 --> 00:22:05.560
what you're doing in there.

00:22:05.920 --> 00:22:06.480
So, okay.

00:22:06.660 --> 00:22:07.780
I'm anti-else.

00:22:08.220 --> 00:22:08.980
I'm definitely anti-else.

00:22:09.660 --> 00:22:16.940
And, by the way, Guido, I heard him quoted at one point that said, if I had to do it over again, there would be no else statement.

00:22:17.280 --> 00:22:18.080
I think it's just weird.

00:22:18.440 --> 00:22:21.600
It's like, does it happen when it breaks or does it happen when it doesn't break?

00:22:21.800 --> 00:22:24.220
Like, is break the thing you're looking for and else is the other?

00:22:24.740 --> 00:22:27.400
Or is break something weird and it was supposed to go?

00:22:27.540 --> 00:22:28.820
Like, it's just, I don't know.

00:22:29.140 --> 00:22:35.060
It just, I know you can save one line of code, but it's too ambiguous to me.

00:22:35.140 --> 00:22:35.500
It's too weird.

00:22:36.060 --> 00:22:39.280
So else is if you didn't break, right?

00:22:39.660 --> 00:22:40.600
I think so.

00:22:41.270 --> 00:22:41.360
Yeah.

00:22:42.500 --> 00:22:42.780
I

00:22:42.780 --> 00:22:43.200
think so.

00:22:43.320 --> 00:22:46.600
Anyway, it's the fact that you got us, like, we got to have this discussion.

00:22:46.800 --> 00:22:47.300
It's like, I don't know.

00:22:47.380 --> 00:22:48.000
It makes it just weird.

00:22:48.120 --> 00:22:49.140
For me, I'm out.

00:22:49.860 --> 00:22:51.660
I know there's, I could do it, but I don't do it.

00:22:51.860 --> 00:22:52.040
Okay.

00:22:52.380 --> 00:22:58.460
Also, the Walrus operator, it's been around since 3.8, and 3.8's already deprecated or like end of life.

00:22:58.760 --> 00:23:03.240
So we can start using, definitely use the Walrus operator.

00:23:03.799 --> 00:23:08.320
Again, it's just saving one line of code, but I like it.

00:23:08.380 --> 00:23:09.320
How about Walrus?

00:23:09.580 --> 00:23:10.160
I'm a fan

00:23:10.160 --> 00:23:12.620
of Wallruss. I created the Wallruss operator this weekend, I believe.

00:23:13.620 --> 00:23:17.640
For me, I like it because it's the locality of definition.

00:23:18.660 --> 00:23:22.880
I'm creating it for this if block and I'm going to use it in this if block if I need it.

00:23:23.040 --> 00:23:29.780
Otherwise, it's part of this thing, not something that might make sense later down the line, probably.

00:23:30.320 --> 00:23:31.340
For me, I like it.

00:23:31.780 --> 00:23:34.440
Okay. A couple more.

00:23:35.700 --> 00:23:38.860
Short circuit evaluation, I don't really care.

00:23:38.900 --> 00:23:45.540
I'm fine with a bunch of if-else's, actually, if that's all you can do.

00:23:47.680 --> 00:23:59.600
But the short circuit, which means using or, utilizing or to say, if you're going to do one thing or the other, you can use or short circuits.

00:23:59.940 --> 00:24:05.080
So once you hit one of them that's true, anything after that's not going to get ran.

00:24:05.780 --> 00:25:02.000
and you can kind of go crazy with that though and actually put logic in there and I'm really not a fan of putting logic in the short circuiting or operation but that's just me but I am a fan of operator chaining and I often see this with people coming from different languages they don't know you can do operator chaining so I'll see like if 0 is less than x and x is less than 10 you don't have to do that in Python just put them together and say zero less than x less than 10 so operating chaining is right but also i think that we should have been a little more strict with operator chaining and uh i don't think it like you can put anything in there right um but i don't think you should like for numbers it should be less than you should not be doing like greater than uh operator chaining it's just weird. The number line is small to big, I think.

00:25:03.080 --> 00:25:03.920
Please do that.

00:25:04.840 --> 00:25:05.900
That's all I wanted to cover for that.

00:25:06.600 --> 00:25:08.060
There's a bunch of other great stuff in here.

00:25:09.960 --> 00:25:11.720
Definitely check out this article.

00:25:12.920 --> 00:25:13.980
Here's the full list.

00:25:14.940 --> 00:25:16.120
LRU cash. Love it.

00:25:17.600 --> 00:25:18.000
Love it.

00:25:18.700 --> 00:25:19.940
f-strings. Love it.

00:25:21.640 --> 00:25:22.080
Nitpicks.

00:25:23.280 --> 00:25:24.560
I have some nitpicks with that statement.

00:25:24.740 --> 00:25:27.140
You know what? It's fine. Good find there, Brian.

00:25:28.060 --> 00:25:28.340
All right.

00:25:30.760 --> 00:25:36.420
Well, we're done with our main topics, and I don't have any extras, Michael, but do you have any extras?

00:25:37.140 --> 00:25:39.620
Well, I thought the answer was no, but it turns out to be yes.

00:25:40.320 --> 00:25:40.540
Okay.

00:25:40.640 --> 00:25:45.540
Because something I just heard about right before was – oh, gosh.

00:25:46.800 --> 00:25:48.420
The zooming on this is all weird.

00:25:49.480 --> 00:25:56.080
So there's – remember I wrote this article that said unsolicited advice for Mozilla or Firefox or something like that saying, you know what?

00:25:57.440 --> 00:26:00.660
The stuff that you guys are doing is not leading you in the right path.

00:26:00.660 --> 00:26:06.340
And here are five ideas that you might try as a business to exist down the line.

00:26:06.460 --> 00:26:07.020
Please do that.

00:26:07.580 --> 00:26:08.920
And so they're actually coming.

00:26:09.080 --> 00:26:11.660
I mean, I really doubt they gave a crap about what I said.

00:26:12.220 --> 00:26:18.440
But they are introducing this new suite of services.

00:26:20.000 --> 00:26:20.540
How about that?

00:26:21.659 --> 00:26:27.260
So Thunderbird, it all seems to be based around Thunderbird, their email client and Thundermail.

00:26:27.880 --> 00:27:08.360
which is a really interesting term but they're offering like Thunderbird appointment which is kind of like Calendly or TidyCal or whatever, Thunderbird Send for private file sharing. I used to love Firefox Send but it got abused by hackers and other badness and so then it stopped working but you could put just like here's a URL, here's a password the whole file just goes away in three days, give it to someone and then they could have it. It was really great and it's all end-to-end encrypted, all that kind of stuff also some AI thing because of course there's an AI thing and then Thunderbird Mail hosted Thunderbird Mail all that anyway I think I think this is a cool idea Thunder Mail

00:27:09.040 --> 00:27:12.300
Thunder Thunder Thunderbird so

00:27:12.300 --> 00:27:14.940
very cool that's all I got for my extra

00:27:15.220 --> 00:27:19.000
you can't spell mail without AI that's right

00:27:19.520 --> 00:27:32.420
well I'll tell you what that seems to be what they think in their feature set every mail client I find is like. And now we have some terrible AI thing that will just erase all your formatting and make you have to rewrite your mail if you try to use it. But it's here and it's great.

00:27:32.620 --> 00:27:34.220
Like, no, it's not.

00:27:36.580 --> 00:27:44.240
Anyway, shall we you know, Brian, we try to make it not too political here, but I got a political joke in a sense.

00:27:45.180 --> 00:27:46.540
Okay, awesome. Are you ready for it?

00:27:46.940 --> 00:27:47.060
Yeah.

00:27:47.140 --> 00:27:51.820
So this one came to us by many people. So thank you to everyone who sent us this.

00:27:53.240 --> 00:27:53.980
Have you noticed?

00:27:54.260 --> 00:27:58.780
I don't watch the news a ton, but have you noticed that there's some talks about tariffs lately?

00:28:01.520 --> 00:28:01.780
Yeah.

00:28:03.240 --> 00:28:07.880
I mean, look, I think genuinely it's fair to say, like, let's discuss tariffs.

00:28:08.220 --> 00:28:13.540
And if other countries have tariffs on us, does it make sense for us to not?

00:28:13.710 --> 00:28:14.140
I don't know.

00:28:14.250 --> 00:28:14.380
Whatever.

00:28:14.490 --> 00:28:16.340
I think there's a debate that can be had.

00:28:16.840 --> 00:28:24.220
but the way that it's been done is so just chaotic and random and on and off again and so on.

00:28:24.610 --> 00:28:39.560
But somebody decided that if that's a good idea for global trade, boy, oh boy, wouldn't that be a cool idea for Python and for program languages, and particularly for these pesky external outside-of-the-standard-library packages.

00:28:40.620 --> 00:28:46.860
So I present to you Tariff, a Python package that imposes tariffs on Python import statements.

00:28:49.620 --> 00:28:51.060
And no, it's not just a joke.

00:28:51.340 --> 00:28:53.340
It's literally version one.

00:28:53.560 --> 00:28:54.580
It's not even zero of it anymore.

00:28:54.680 --> 00:28:56.020
And it is released on PyPI.

00:28:56.080 --> 00:28:57.840
So you can literally pip install tariff.

00:28:58.480 --> 00:28:59.180
What does it do?

00:28:59.700 --> 00:29:02.940
Well, boom, fire, fist emoji, fire emoji.

00:29:03.440 --> 00:29:05.340
A little reference back to Signal.

00:29:06.380 --> 00:29:10.780
The greatest, most tremendous Python package that makes importing great again.

00:29:11.280 --> 00:29:15.640
Tariff is a fantastic tool that lets you impose import tariffs on Python packages.

00:29:16.080 --> 00:29:20.740
We're going to bring manufacturing back to your code base by making foreign imports more expensive.

00:29:21.580 --> 00:29:23.280
And so all you got to do is import it.

00:29:24.220 --> 00:29:33.380
You set your rate on the different libraries, like 50% tariff on NumPy, 200% tariff on Pandas and so on.

00:29:33.880 --> 00:29:38.640
And then when you import NumPy, it's literally 50% slower.

00:29:38.840 --> 00:29:40.280
It takes 50% longer than before.

00:29:40.500 --> 00:29:41.000
What do you think?

00:29:41.320 --> 00:29:43.200
that'll teach them yeah that'll

00:29:43.200 --> 00:29:47.800
teach them yeah we're going straight back to self-hosted vendoring it in

00:29:47.800 --> 00:29:50.340
yeah but

00:29:50.340 --> 00:29:57.760
what's nuts is it works like you know it's not just a weird joke idea but somebody made it it's open source

00:29:59.520 --> 00:30:01.240
and the hat uh the

00:30:01.240 --> 00:30:09.940
hat the hat is good why tariff you may ask because foreign packages have been stealing our CPU cycles for too long.

00:30:10.100 --> 00:30:13.260
It's time to put America first and make importing fair and balanced again.

00:30:14.060 --> 00:30:16.100
Obviously a parity package. Use it at your own risk.

00:30:17.380 --> 00:30:17.700
Yeah.

00:30:18.080 --> 00:30:21.940
Other people stealing our CPUs, we need to steal our own CPUs.

00:30:22.340 --> 00:30:23.100
Exactly. That

00:30:23.100 --> 00:30:24.320
is how we're going to do it.

00:30:25.720 --> 00:30:27.740
Well, that's what I got for you. Is it funny?

00:30:27.860 --> 00:30:28.700
I don't know, but I think

00:30:28.700 --> 00:30:29.120
it is certainly

00:30:29.120 --> 00:30:29.440
amusing.

00:30:30.380 --> 00:30:33.560
It's not. When I look at my 401k, it is not funny.

00:30:35.720 --> 00:30:39.260
You've got to laugh. You've got to cry. Those are one of your two actions. Might as well laugh.

00:30:39.900 --> 00:30:41.980
Glad I like my job because I'm going to be here for a while.

00:30:44.800 --> 00:30:54.200
Anyway, thanks for everything, Michael. Thanks for the joke. Thanks to everybody that shared them. Like we said, a lot of people sent that in, but that is not a waste.

00:30:54.720 --> 00:30:59.840
That also gives us a signal that we might want to cover it if a

00:30:59.840 --> 00:31:01.960
lot of people are thinking about it. So thanks.

00:31:02.700 --> 00:31:03.220
Yeah, thank you.

00:31:04.760 --> 00:31:05.620
Bye. Bye, Brian.

00:31:05.740 --> 00:31:06.000
Bye, everyone.

