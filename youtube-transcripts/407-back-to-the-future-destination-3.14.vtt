WEBVTT

00:00:00.001 --> 00:00:03.820
Hey, everybody. Hey, Michael.

00:00:03.820 --> 00:00:04.840
Hello.

00:00:04.840 --> 00:00:11.700
Let's kick it off. We're being a little goofy this morning, but I think we can pull it together for this episode.

00:00:11.700 --> 00:00:13.800
We've done this before. We'll get it going.

00:00:13.800 --> 00:00:21.440
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:21.440 --> 00:00:28.000
This is episode 407, recorded October 28th to 24th.

00:00:29.100 --> 00:00:30.220
And I am Brian Okken.

00:00:30.220 --> 00:00:31.460
And I'm Michael Kennedy.

00:00:31.460 --> 00:00:36.920
And this week we're sponsored by ourselves, so please check out our offerings.

00:00:36.920 --> 00:00:40.040
There's all of the fabulous courses at Talk Python Training.

00:00:40.040 --> 00:00:46.940
And then over at pythontest.com, we've got the complete pytest course and also the short course, Hellopytest.

00:00:46.940 --> 00:00:52.700
And also thank you to our Patreon supporters, who we don't do a shout-out enough to, but thank you very much.

00:00:52.700 --> 00:00:53.400
We appreciate it.

00:00:53.400 --> 00:00:56.740
If you'd like to connect with the show, we'd love to hear from you.

00:00:56.900 --> 00:00:59.220
You can connect with us on Fostadon.

00:00:59.880 --> 00:01:05.580
We're at mkendany, at Brian Okken, and at Python Bytes, all at Fostadon.

00:01:05.580 --> 00:01:07.280
And also those links are in the show notes.

00:01:07.280 --> 00:01:16.620
As well as in at pythonbytes.fm, you can find out when the next upcoming episode is going to be.

00:01:16.620 --> 00:01:19.060
And I was going to mention this later.

00:01:19.060 --> 00:01:20.600
I'll just go ahead and mention it right now.

00:01:20.980 --> 00:01:24.040
Next week on November 4th, we are going to be recording early.

00:01:24.040 --> 00:01:27.620
So it'll be at 7.30 in the morning instead of our normal time.

00:01:27.620 --> 00:01:28.820
And that's Pacific time.

00:01:28.820 --> 00:01:30.880
Instead of our normal 10 a.m. Pacific time.

00:01:30.880 --> 00:01:34.080
Because of work for me.

00:01:34.080 --> 00:01:36.800
Anyway, so that's what's going on next week.

00:01:36.800 --> 00:01:39.860
But at pythonbytes.fm, you can sign up for our newsletter.

00:01:39.860 --> 00:01:41.000
You can get the show notes.

00:01:41.000 --> 00:01:44.940
You can sign up and look to see when the next live recording is.

00:01:45.300 --> 00:01:49.440
But right now, I'd like to hear from Michael to see what you had to talk about.

00:01:49.440 --> 00:01:52.940
Shall we teleport, transport to the future?

00:01:52.940 --> 00:01:57.960
Brian, I want you to imagine a time when it is not so gloomy and rainy.

00:01:57.960 --> 00:02:04.820
About 11 months from now, when we have a new version of Python that comes onto the scene, 3.14.

00:02:04.820 --> 00:02:08.800
And that future can be for you now in a limited sense.

00:02:08.800 --> 00:02:12.720
Because 3.14 Alpha 1 is now available.

00:02:12.720 --> 00:02:14.800
The Pi version of Python.

00:02:14.800 --> 00:02:15.380
Thawne.

00:02:15.380 --> 00:02:16.840
That's right.

00:02:16.840 --> 00:02:21.720
So that's the first Alpha 1 release.

00:02:21.720 --> 00:02:28.180
And there will be seven, in theory, by plan at least, unless something goes wrong.

00:02:28.180 --> 00:02:33.420
This is the first of seven Alpha releases before we go beta, before we go release candidate,

00:02:33.420 --> 00:02:34.540
and then we finally ship.

00:02:34.540 --> 00:02:40.440
So it has some of the new ideas, but not all of the new ideas.

00:02:40.440 --> 00:02:44.240
It comes with performance improvements and actually quite a bit more,

00:02:44.240 --> 00:02:45.480
which is pretty interesting.

00:02:45.480 --> 00:02:52.420
So if you read the blog post announcement, well, it looks like, okay, so we've got this new PEP

00:02:52.420 --> 00:02:55.300
called Deferred Evaluation of Annotations.

00:02:55.820 --> 00:03:00.580
Now, I think this was meant to land in 3.11 or 3.12, something like that.

00:03:00.580 --> 00:03:06.960
And all of the frameworks and libraries that thought typing should matter.

00:03:06.960 --> 00:03:08.420
Like Fast Tipper 9.

00:03:08.940 --> 00:03:11.320
Yes, and Typer and Pydantic and Pydantic and so on.

00:03:11.320 --> 00:03:14.440
And I count myself as a big fan of all of those libraries.

00:03:14.440 --> 00:03:19.360
All those people are like, hey, hold on, hold on.

00:03:20.120 --> 00:03:22.500
This is not just a thing for mypy.

00:03:22.500 --> 00:03:24.800
These types are not just for mypy.

00:03:24.800 --> 00:03:29.380
And if you take away their evaluation, all of our awesome frameworks go away.

00:03:29.380 --> 00:03:32.200
And I think that would be a massive step back for Python.

00:03:32.200 --> 00:03:35.080
A lot of people agreed, made some changes.

00:03:35.440 --> 00:03:38.960
So that wasn't done as far, at least in a limited way.

00:03:38.960 --> 00:03:45.660
But having these type annotations does have a performance cost of, say, an import, potentially.

00:03:45.660 --> 00:03:55.420
It does have weird issues where you've got indirect or sort of half-defined types that you want

00:03:55.420 --> 00:03:55.900
to talk about.

00:03:55.980 --> 00:04:00.860
I have a function or a method on a class, and I want to say it returns one of those classes.

00:04:00.860 --> 00:04:02.340
Or, you know, it's like an equals.

00:04:02.340 --> 00:04:05.200
It takes another one of these classes, and it tells you if it's equal to it.

00:04:05.200 --> 00:04:14.280
So you had to do weird tricks, like typing.self, or you could have quotes the name of a type that's

00:04:14.280 --> 00:04:18.280
not defined yet, but eventually someday it will be defined if you get around to looking for it.

00:04:18.280 --> 00:04:21.560
So this will allow you to not worry about those types of things.

00:04:21.560 --> 00:04:22.860
And there's a new API.

00:04:23.100 --> 00:04:30.300
If you consume them, if you were Pydantic or FastAPI or whatever, there's a new way to say,

00:04:30.300 --> 00:04:34.640
let me read the annotation metadata about this.

00:04:34.640 --> 00:04:37.660
That's slightly different, but it's still there.

00:04:37.660 --> 00:04:40.600
Improved error messages.

00:04:40.600 --> 00:04:45.100
We all love further improved error messages, so there's that.

00:04:45.100 --> 00:04:49.160
And then, so that sounds like, when you read it, like, okay, that's the thing.

00:04:49.160 --> 00:04:54.500
But actually, if you go and look, where's the link?

00:04:54.500 --> 00:04:57.060
The release notes are in here somewhere.

00:04:57.060 --> 00:05:00.360
So you click here, and you...

00:05:00.360 --> 00:05:06.560
Somewhere there's a release notes.

00:05:06.560 --> 00:05:09.420
Do-do-do-do-do-do-do-do.

00:05:09.420 --> 00:05:10.060
Really?

00:05:10.200 --> 00:05:10.900
Where did it go?

00:05:10.900 --> 00:05:12.780
Maybe I haven't had notes.

00:05:12.780 --> 00:05:15.020
But anyway, Brian, there's a ton of changes.

00:05:15.020 --> 00:05:18.020
Ton of changes from there, I think.

00:05:18.020 --> 00:05:18.940
Oh, I know where it is.

00:05:18.940 --> 00:05:20.720
They don't call it release notes.

00:05:20.720 --> 00:05:21.340
Here's how you do it.

00:05:22.300 --> 00:05:28.820
You click on the PEP, and then you scroll down until you get past the PEP, and it just has other changes.

00:05:28.820 --> 00:05:30.360
So, yeah.

00:05:30.360 --> 00:05:35.440
So there's, if you go to either of those links, it'll tell you about their message, tell you about the PEP.

00:05:35.440 --> 00:05:41.100
But then, there's, if you look at the scroll bar, a bunch of stuff below that.

00:05:41.100 --> 00:05:43.640
For example, incorrect use...

00:05:43.640 --> 00:05:46.100
Yeah, I think that's actually the news, not the stuff that was called out.

00:05:47.140 --> 00:05:52.220
Incorrect usage of await and asynchronous comprehensions is now detected.

00:05:52.220 --> 00:05:59.220
I don't know exactly what you could have done wrong before, but if you're doing it wrong, I guess...

00:05:59.220 --> 00:06:02.220
Anyway, if you're doing it wrong...

00:06:02.220 --> 00:06:05.860
Well, apparently, like, assert await one.

00:06:05.860 --> 00:06:09.800
Yeah, so I think what the issue is, you could await a thing that is not awaitable.

00:06:09.800 --> 00:06:10.880
Yeah, okay.

00:06:10.880 --> 00:06:12.560
Potentially in less comprehension.

00:06:12.560 --> 00:06:15.100
So now you'll get a warning.

00:06:15.100 --> 00:06:16.900
Okay.

00:06:17.060 --> 00:06:18.160
Is it warning or error?

00:06:18.160 --> 00:06:19.120
Syntax error.

00:06:19.120 --> 00:06:19.820
Yeah, maybe it's even error.

00:06:19.820 --> 00:06:21.020
Yeah, syntax error.

00:06:21.020 --> 00:06:25.140
But you can disable the syntax error, because apparently it used to work.

00:06:25.140 --> 00:06:27.320
If you wanted to just keep doing that, that's fine.

00:06:27.320 --> 00:06:29.320
Let's see.

00:06:29.320 --> 00:06:30.500
Some stuff about dunder debug.

00:06:30.500 --> 00:06:36.240
The numerical things now have a float.from number and complex.from number,

00:06:36.240 --> 00:06:42.800
which converts to a float type or a complex type, which is somewhat interesting.

00:06:42.800 --> 00:06:45.720
So the thing is, this is not a parsing operation.

00:06:45.900 --> 00:06:47.480
It takes one number and converts it.

00:06:47.480 --> 00:06:49.380
And if you give it a string, it'll be an error.

00:06:49.380 --> 00:06:53.960
So it's like, I just want to make sure I'm always working in numbers and convert them in probably a more efficient way.

00:06:54.600 --> 00:06:56.860
Oh, better than like a cast thing.

00:06:56.860 --> 00:06:57.180
Yeah.

00:06:57.180 --> 00:06:57.480
Yeah.

00:06:57.480 --> 00:06:57.820
Yeah.

00:06:57.820 --> 00:07:04.340
Where the cast is just a type annotation type of deal, whereas this is a true transformation, right?

00:07:04.340 --> 00:07:04.960
Nice.

00:07:04.960 --> 00:07:14.100
So we get the new annotation lib, which provides those features that I talked about for PEP 749, the deferred type annotations.

00:07:14.100 --> 00:07:16.520
Arg pars, get some updates.

00:07:16.520 --> 00:07:21.760
AST, concurrent features, C types, decimal, daytime, disks, fractions, functools, HTTP.

00:07:22.760 --> 00:07:23.320
It's funny.

00:07:23.320 --> 00:07:25.520
You know, HTTP, this is something nice.

00:07:25.520 --> 00:07:27.420
You can say Python dash M HTTP.

00:07:27.420 --> 00:07:30.920
That server, I think is it?

00:07:30.920 --> 00:07:31.420
Whatever.

00:07:31.420 --> 00:07:35.240
So if you have just a directory and you're like, I need to have this as a web view.

00:07:36.980 --> 00:07:47.620
For example, if you have an HTML file there and it says, I want to open up forward slash some CSS file or forward slash some JavaScript file or something along those lines.

00:07:47.620 --> 00:07:51.240
If you just open it, it goes, I don't know what these files are, right?

00:07:51.240 --> 00:07:53.880
But if this web server were to serve it, it would easily work.

00:07:53.880 --> 00:08:04.760
So you could just type Python dash M space ACP dot server, enter, and it'll pull up a little web, like a no op web server that you can then actually interact with that stuff with.

00:08:04.760 --> 00:08:06.420
So it now has a dark mode.

00:08:06.420 --> 00:08:10.140
Oh, you should have led with that, man.

00:08:10.140 --> 00:08:10.940
That's cool.

00:08:10.940 --> 00:08:15.200
Yeah, this is contributed by Jorick Hansen.

00:08:15.200 --> 00:08:19.820
And I thought, okay, Jorick must be a huge fan of dark mode to want dark mode to have.

00:08:19.820 --> 00:08:20.120
Yes.

00:08:20.120 --> 00:08:21.140
Right on.

00:08:21.140 --> 00:08:21.340
Okay.

00:08:21.340 --> 00:08:24.040
JSON, get some updates.

00:08:24.040 --> 00:08:25.380
Operator Ops, Pathlib.

00:08:25.380 --> 00:08:27.520
Pathlib, actually, the changes to Pathlib are interesting.

00:08:27.520 --> 00:08:30.920
I'm going through this list to point out, like, there's a lot of changes just in this alpha one release.

00:08:32.340 --> 00:08:41.840
Pathlib now has add methods, like new functionality to Pathlib to recursively copy and move files and directories.

00:08:41.840 --> 00:08:42.920
Oh, yes.

00:08:42.920 --> 00:08:43.120
Oh, cool.

00:08:43.120 --> 00:08:44.240
I'm here for this.

00:08:44.240 --> 00:08:44.700
Yeah.

00:08:44.700 --> 00:08:45.380
Copy.

00:08:45.380 --> 00:08:47.680
Copy is a file or directory tree to a destination.

00:08:47.680 --> 00:08:48.740
Copy into.

00:08:49.280 --> 00:08:51.400
Copy is into a destination directory.

00:08:51.400 --> 00:08:52.680
Move and then move into.

00:08:52.680 --> 00:08:54.040
That's awesome.

00:08:54.040 --> 00:08:54.860
That's good.

00:08:54.860 --> 00:08:55.940
So Barney Gale did that.

00:08:55.940 --> 00:08:56.280
Thank you.

00:08:56.280 --> 00:09:01.900
PDB, Pickle, PyDoc, SimTable, Sys, and, ooh, UnitTest.

00:09:01.900 --> 00:09:02.800
It ain't dead.

00:09:02.800 --> 00:09:03.560
No, it ain't.

00:09:05.560 --> 00:09:06.080
Anyway.

00:09:06.080 --> 00:09:08.260
So there's also optimizations.

00:09:08.260 --> 00:09:12.980
For example, AsyncIO is now implemented using doubly linked list implementations.

00:09:12.980 --> 00:09:17.960
Hat tip for the comp side data structures level up there.

00:09:17.960 --> 00:09:25.040
For native tasks, which speeds up execution by 10% on standard high performance benchmarks and reduces memory usage.

00:09:25.040 --> 00:09:25.920
So who wouldn't want that?

00:09:25.920 --> 00:09:26.600
That sounds great.

00:09:26.600 --> 00:09:27.640
Exactly.

00:09:28.640 --> 00:09:29.140
All right.

00:09:29.140 --> 00:09:29.580
There's more.

00:09:29.580 --> 00:09:30.240
You can read about it.

00:09:30.240 --> 00:09:31.400
And I just touched on it.

00:09:31.400 --> 00:09:35.200
Each thing I said had a paragraph or list of bullet points you could go into if you wanted.

00:09:35.200 --> 00:09:36.700
So that's it.

00:09:36.700 --> 00:09:40.060
Now, back to the future.

00:09:40.060 --> 00:09:41.080
Back to the present.

00:09:41.080 --> 00:09:41.340
Whatever.

00:09:41.340 --> 00:09:42.420
Back to the current time.

00:09:42.420 --> 00:09:43.280
Yeah.

00:09:43.280 --> 00:09:44.240
Or the fast time.

00:09:44.240 --> 00:09:52.200
So just last week on October 21st, episode 406, we talked about a lot of stuff.

00:09:52.200 --> 00:09:57.320
But one of the things was PEP 735 with dependency groups in PyProject.toml.

00:09:58.020 --> 00:10:00.360
And I didn't know when we could play with them.

00:10:00.360 --> 00:10:02.200
And the answer is now.

00:10:02.200 --> 00:10:05.860
Because uv decided to do that right away.

00:10:05.860 --> 00:10:09.900
So uv just had a change in.

00:10:09.900 --> 00:10:23.940
In version 0.4.27, in the change log, they say the dependency groups are supported, which is super cool.

00:10:24.860 --> 00:10:27.940
There's even support for PEP 735.

00:10:27.940 --> 00:10:29.460
I couldn't believe this was so fast.

00:10:29.460 --> 00:10:31.600
It was like just a few days after we talked about it.

00:10:31.600 --> 00:10:34.240
They must listen to the podcast.

00:10:34.240 --> 00:10:34.880
That's pretty awesome.

00:10:34.880 --> 00:10:35.880
Yeah, probably.

00:10:35.880 --> 00:10:37.700
And this was like, oh, yeah, three days ago.

00:10:37.700 --> 00:10:39.240
It was merged in.

00:10:39.240 --> 00:10:41.260
So it was pretty cool.

00:10:41.640 --> 00:10:43.720
So there's a whole bunch of added stuff.

00:10:43.720 --> 00:10:46.300
And so I went off and played with it.

00:10:46.300 --> 00:10:52.280
So there's --group is added to uv add and uv remove.

00:10:52.280 --> 00:10:58.160
So when you add dependencies or remove dependencies, you can say group and it puts them in groups.

00:10:58.160 --> 00:11:01.340
The --dev and things like that.

00:11:01.340 --> 00:11:02.200
There's a couple of those.

00:11:02.200 --> 00:11:07.220
So --dev used to be an extra dependency.

00:11:07.440 --> 00:11:09.920
Now it's a dependency group called dev.

00:11:09.920 --> 00:11:15.940
And so --dev is the same as saying --group dev.

00:11:17.040 --> 00:11:24.680
It's more clear in the list, in the documentation, if the documentation is updated.

00:11:24.680 --> 00:11:27.920
So there's a couple of things where it isn't quite updated.

00:11:27.920 --> 00:11:34.420
So there's a lot of it was very clear on how to add dependencies to dependency groups with uv.

00:11:34.420 --> 00:11:40.740
Now you can say uv add or uv remove that that works great.

00:11:41.260 --> 00:11:43.940
But how do you install them then?

00:11:43.940 --> 00:11:45.540
So that's what I tried to play with.

00:11:45.540 --> 00:11:49.940
So also the documentation for default groups is up.

00:11:49.940 --> 00:11:52.040
So you can click around in the uv.

00:11:52.040 --> 00:11:55.080
It talks about default groups and dependency groups.

00:11:55.080 --> 00:11:59.260
And here we have like the dev for pytest.

00:11:59.260 --> 00:12:02.360
Of course, you're going to have pytest in your dev dependencies.

00:12:02.360 --> 00:12:07.980
And there's the little tip for the --dev flags.

00:12:07.980 --> 00:12:11.740
Okay, so I'm like, okay, so how do I install stuff?

00:12:11.740 --> 00:12:22.300
So I expected what I expected to have work is to say uv pip install --group dev and be able to just install those and not the project.

00:12:22.300 --> 00:12:24.800
Well, it doesn't work yet.

00:12:24.800 --> 00:12:34.760
So there is a issue filed by Hinnick and the of this.

00:12:34.760 --> 00:12:37.760
This should work and it doesn't pip install group.

00:12:37.760 --> 00:12:44.260
But the issue is that they want to be like the same compatibility with the interface for pip.

00:12:44.260 --> 00:12:48.620
So they're just waiting for PyPA to define what that interface is.

00:12:48.620 --> 00:12:49.860
And that's fair.

00:12:49.860 --> 00:12:54.220
So we've got all these dependencies and you can't install stuff, right?

00:12:54.220 --> 00:12:56.000
No, not quite.

00:12:56.220 --> 00:12:59.940
So I asked also asked on LinkedIn if anybody knew.

00:12:59.940 --> 00:13:09.320
And Tushar responded saying, hey, the docs, which they don't, but it says uv sync group will work.

00:13:09.320 --> 00:13:12.460
So I checked out the docs and I can't find it.

00:13:12.460 --> 00:13:14.300
The sync doesn't talk about groups.

00:13:14.300 --> 00:13:15.500
But it does work.

00:13:15.500 --> 00:13:16.120
I tried it.

00:13:16.480 --> 00:13:18.540
So essentially this works.

00:13:18.540 --> 00:13:20.140
So what do you do?

00:13:20.140 --> 00:13:24.220
You create, you have a, you say you added a dependency group.

00:13:24.220 --> 00:13:26.480
Then you can say uv sync.

00:13:26.480 --> 00:13:30.680
And if you add the group like --group and then the group name, and you can add a bunch of those.

00:13:30.680 --> 00:13:36.680
Then your virtual environment will sync to match what your project says.

00:13:37.560 --> 00:13:39.440
So basically that's how you can install.

00:13:39.440 --> 00:13:41.140
You can use sync to install your stuff.

00:13:41.140 --> 00:13:45.160
Long-winded, but that's how you can do it.

00:13:45.160 --> 00:13:45.400
So.

00:13:45.400 --> 00:13:46.800
Nice.

00:13:46.800 --> 00:13:47.420
Oh, that's awesome.

00:13:47.420 --> 00:13:48.020
Anyway.

00:13:48.020 --> 00:13:49.400
Yeah.

00:13:49.400 --> 00:13:58.180
So this lets you say, unlike requirements.dev, it lets you say, here's a separate set of dependencies

00:13:58.180 --> 00:14:02.380
that I need for a certain action or set of tasks on my project.

00:14:02.380 --> 00:14:05.500
It doesn't necessarily pull in the base dependencies, right?

00:14:05.500 --> 00:14:06.920
That's the big difference.

00:14:07.540 --> 00:14:09.200
Well, that's the, that's the idea.

00:14:09.200 --> 00:14:11.040
But with uv, it's different.

00:14:11.040 --> 00:14:17.040
So with uv currently with using licensing sync, it will pull in your base dependencies and the extras.

00:14:17.040 --> 00:14:17.240
Yeah.

00:14:17.240 --> 00:14:20.680
You can't do just the group yet.

00:14:20.680 --> 00:14:21.520
Got it.

00:14:21.520 --> 00:14:22.780
Because it's not defined.

00:14:22.780 --> 00:14:24.060
It's not agreed upon yet.

00:14:24.060 --> 00:14:24.900
How to say it.

00:14:24.900 --> 00:14:25.800
Right.

00:14:25.800 --> 00:14:28.560
So the syntax is there though.

00:14:28.560 --> 00:14:29.560
So you can play with the syntax.

00:14:29.560 --> 00:14:31.400
And I'm, it's very comfortable.

00:14:31.400 --> 00:14:36.580
I'm actually, I probably, there would be very seldom, like for me.

00:14:37.520 --> 00:14:41.340
I'm okay with this being, having to install the project and then the dependencies.

00:14:41.340 --> 00:14:47.480
But there's, there are times where you just want to install a group, like to build the documentation

00:14:47.480 --> 00:14:48.280
or something like that.

00:14:48.280 --> 00:14:48.640
Yeah.

00:14:48.640 --> 00:14:49.960
I'm, I'm fine with it as well.

00:14:50.020 --> 00:14:58.560
You know, one that might be on most people wouldn't guess for, but in the ML space, some of these dependencies are massive.

00:14:58.560 --> 00:15:07.680
For example, if you want to use the large English model for spaCy, you specify that as, I think you specify as a dependency.

00:15:07.680 --> 00:15:10.700
You don't Python, maybe you run it as a Python call.

00:15:10.700 --> 00:15:14.260
Anyway, that, that thing is like 500 megs or something.

00:15:14.680 --> 00:15:14.900
Right.

00:15:14.900 --> 00:15:17.500
So you might want to just not download and install that as well.

00:15:17.500 --> 00:15:18.180
Right.

00:15:18.180 --> 00:15:24.540
Especially if a, if you have like a modular CI system where one of the build stages is like a built and documentation

00:15:24.540 --> 00:15:27.380
or linting, static linting or something like that.

00:15:27.380 --> 00:15:31.240
You might not want to pull in the world just to do one of your stages.

00:15:31.240 --> 00:15:32.020
Yeah.

00:15:32.020 --> 00:15:33.600
That's a great, great case.

00:15:33.600 --> 00:15:33.900
Okay.

00:15:33.900 --> 00:15:35.600
Let's dive into the next thing, huh?

00:15:35.880 --> 00:15:36.100
Okay.

00:15:36.100 --> 00:15:42.980
Dive comes to us unknowingly by Mike Fiedler.

00:15:42.980 --> 00:15:44.500
Let's see.

00:15:44.500 --> 00:15:44.900
Yeah.

00:15:44.900 --> 00:15:45.420
Mike Fiedler.

00:15:45.420 --> 00:15:51.280
So he mentioned this in a group discussion that I was also looking at.

00:15:51.280 --> 00:15:54.200
I don't know that he sent it in specifically for us, but here it is.

00:15:54.200 --> 00:15:55.880
I'm taking it because it's a cool idea.

00:15:55.880 --> 00:15:58.740
So here's the thing.

00:15:58.740 --> 00:16:06.980
If you have some sort of container system, like a Docker image, you have a bunch of steps.

00:16:06.980 --> 00:16:11.880
And when you apply, the way you make the containers is you go to a Docker file and you put in lines

00:16:11.880 --> 00:16:14.560
like do this action, then this action, then this action.

00:16:14.560 --> 00:16:20.900
And they can be, they're usually some kind of Linux command, or maybe you'll copy these files

00:16:20.900 --> 00:16:24.300
or run this Python command once you've copied the right stuff over.

00:16:24.300 --> 00:16:30.500
And so they can be big, like apt install this one thing, but this one thing has 20 dependencies.

00:16:30.500 --> 00:16:37.300
Or you might be running install the development requirements or a compiler that you didn't need.

00:16:37.300 --> 00:16:42.500
So you might end up with slow builds and large images.

00:16:42.500 --> 00:16:44.260
What do you do about that?

00:16:44.260 --> 00:16:45.460
You run this dive thing on it.

00:16:45.460 --> 00:16:46.940
So this thing's pretty cool.

00:16:46.940 --> 00:16:52.400
So what it does is there's a little animated graphic you can have here if you go to the

00:16:52.720 --> 00:16:59.800
GitHub page and, you know, hat tip for anything UI, please animated GIF would be awesome, wouldn't it?

00:16:59.800 --> 00:17:03.180
So anyway, you can have this here.

00:17:03.180 --> 00:17:10.660
And the idea is it basically allows you to see every layer.

00:17:10.660 --> 00:17:15.300
So each line of code that you've run, like make a directory, copy these files,

00:17:15.300 --> 00:17:20.580
uv pip install, -r requirements, or something along those lines.

00:17:20.640 --> 00:17:28.340
And each line you click on, it gives you all the files, like a tree that you can explore with the file size of the,

00:17:28.340 --> 00:17:32.840
of the image, the resulting image.

00:17:32.840 --> 00:17:34.740
And then also kind of a delta.

00:17:34.740 --> 00:17:37.280
So as you click around, it'll say these files were added.

00:17:37.280 --> 00:17:38.360
These files were changed.

00:17:38.360 --> 00:17:40.600
These files were deleted on this step.

00:17:41.180 --> 00:17:47.100
So you can see this is the reason this file is here because on line four, we ran this command, which added these files.

00:17:47.100 --> 00:17:48.060
Why is that?

00:17:48.060 --> 00:17:49.300
Oh, that's cool.

00:17:49.300 --> 00:17:50.340
Isn't it, right?

00:17:50.340 --> 00:17:50.980
Yeah.

00:17:52.080 --> 00:17:59.520
So if you were shipping containers around, shipping images around, you know, like pushing it to Docker Hub and then pulling it somewhere else,

00:17:59.520 --> 00:18:01.000
like you should definitely look at this.

00:18:01.000 --> 00:18:05.860
It's not something I'll probably care about because I just build my containers on the server and then use them,

00:18:05.860 --> 00:18:08.360
which is also, you know, a way to do it.

00:18:08.360 --> 00:18:14.300
But if you ship them around and you care about their size or their building slow or whatever, this is awesome.

00:18:14.300 --> 00:18:14.900
Check this out.

00:18:14.900 --> 00:18:19.220
Also for security concerns to make sure things don't get added that you don't know about.

00:18:19.980 --> 00:18:20.300
Right.

00:18:20.300 --> 00:18:27.480
Or even just, I want to make sure that there's no compilers on here because if somebody were to break into the container and they could use the compiler,

00:18:27.480 --> 00:18:31.380
then they could say, upload some C++ code, compile it and run it.

00:18:31.380 --> 00:18:31.860
Yeah.

00:18:31.860 --> 00:18:32.140
Right.

00:18:32.140 --> 00:18:36.720
You know, the so-called living off the land sort of issues after somebody breaks into a thing.

00:18:36.720 --> 00:18:46.300
So you just say, dive space your image or you can alias it to, this is pretty nice, actually.

00:18:47.220 --> 00:18:51.220
So this is something I've started doing with some of the tools if I'm already on a system that has Docker.

00:18:51.220 --> 00:18:54.460
So you can do this with glances.

00:18:54.460 --> 00:18:55.540
You can do this with dive.

00:18:55.540 --> 00:18:56.600
You can do this with other things.

00:18:56.600 --> 00:19:00.940
One way to do this is I could brew install dive onto my Mac.

00:19:00.940 --> 00:19:04.940
But then who knows what that's doing to my computer.

00:19:04.940 --> 00:19:06.660
I'm running arbitrary code off the internet.

00:19:06.660 --> 00:19:07.520
I probably trust it.

00:19:07.600 --> 00:19:09.880
But, you know, right.

00:19:09.880 --> 00:19:11.500
So what you can do is you can alias.

00:19:11.500 --> 00:19:20.460
So you can run this from Docker and then you can alias dive to just be the sequence of Docker commands that you want to run.

00:19:20.460 --> 00:19:25.260
So even dive itself runs in Docker and then it talks to the other Docker container that you pointed at.

00:19:25.260 --> 00:19:28.720
And that's it, which is a really nice pattern that's getting to be more popular.

00:19:28.720 --> 00:19:30.240
It's Docker inception.

00:19:31.240 --> 00:19:32.980
It's, it's docker's all the way down.

00:19:32.980 --> 00:19:40.920
But yeah, you just create an alias and then it's just docker run dash it, remove the image, map the volume it needs over and then off it goes.

00:19:40.920 --> 00:19:41.920
Yeah, it's really cool.

00:19:41.920 --> 00:19:43.260
All right.

00:19:43.260 --> 00:19:43.940
What else real quick?

00:19:43.940 --> 00:19:44.760
I'll wrap this up.

00:19:46.580 --> 00:19:50.040
So it'll show your image broken down by layer, like I said.

00:19:50.040 --> 00:19:50.940
What's changed?

00:19:50.940 --> 00:19:55.260
It has a metric like cyclomatic complexity equivalent.

00:19:55.260 --> 00:19:58.400
But for Docker, they made this up, I believe.

00:19:58.400 --> 00:20:01.380
An estimated image efficiency.

00:20:01.380 --> 00:20:07.860
The lower left pane of the base layer shows an experimental metric that'll guess how much wasted space your image contains.

00:20:07.860 --> 00:20:08.620
That's kind of interesting.

00:20:08.620 --> 00:20:13.500
You could do a quick build analytic, a quick build test.

00:20:13.500 --> 00:20:24.200
So instead of going and building the thing and then running dive, you can say dive build and it'll actually build the thing and then test it instantly.

00:20:24.200 --> 00:20:25.340
So it's like one line.

00:20:25.340 --> 00:20:37.020
And then there's CI integration for, you know, basically doing some of the stuff in CI and ways in which you can make it fail the CI if it fails some metrics and so on.

00:20:37.020 --> 00:20:39.260
Oh, that's cool.

00:20:39.260 --> 00:20:39.880
Yeah.

00:20:39.880 --> 00:20:41.880
Pat Decker out there says, I've been using dive for a while.

00:20:41.880 --> 00:20:42.420
Neat.

00:20:42.420 --> 00:20:43.000
Awesome.

00:20:43.100 --> 00:20:44.180
Glad to hear the testimony.

00:20:44.180 --> 00:20:45.460
Yeah.

00:20:45.460 --> 00:20:46.940
So yeah, people can check this out.

00:20:46.940 --> 00:20:50.940
Obviously, it's open source, written in Go, 46,000 GitHub stars.

00:20:50.940 --> 00:20:53.840
So it's pretty well known and used.

00:20:53.840 --> 00:20:54.980
That's pretty nice.

00:20:54.980 --> 00:21:02.060
Also, I like the CI integration because if I can't get it to a feature from the command line, it doesn't exist.

00:21:02.060 --> 00:21:02.920
Yeah.

00:21:02.920 --> 00:21:03.360
I'm concerned.

00:21:03.360 --> 00:21:05.320
Anyway, cool.

00:21:05.320 --> 00:21:06.220
Nice.

00:21:08.040 --> 00:21:10.960
I've got to just, I guess, a little blast.

00:21:10.960 --> 00:21:12.180
We talked about the future.

00:21:12.180 --> 00:21:13.700
Let's talk about the past a little bit.

00:21:13.700 --> 00:21:16.540
I had a question.

00:21:16.540 --> 00:21:21.780
I haven't talked about pytest metadata for a while, but I had a question just this last week.

00:21:21.780 --> 00:21:29.620
Somebody got a hold of me and said, hey, I've got these pytest CI system put together.

00:21:29.620 --> 00:21:37.720
I'd like to send some extra data from the test environment to the report server.

00:21:37.720 --> 00:21:48.320
Is there a way to get metadata, like extra metadata in pytest to add it to the results and then put it somewhere else in the result system?

00:21:48.680 --> 00:21:51.920
And I said, well, have you checked out the plugin called pytest metadata?

00:21:51.920 --> 00:21:54.600
It does exactly that.

00:21:54.600 --> 00:21:59.400
So I guess I'm just reminding everybody that pytest metadata is a really cool plugin.

00:21:59.400 --> 00:22:02.140
It does exactly what you would think it would do.

00:22:02.140 --> 00:22:06.460
It bundles metadata with your results, or at least that's exactly what I think it would do.

00:22:06.460 --> 00:22:09.740
It isn't testing your metadata.

00:22:09.740 --> 00:22:11.660
It's adding metadata to the results.

00:22:12.220 --> 00:22:22.560
So some of the things it does right off the bat, which is kind of fun, is it automatically stuffs in four different keys.

00:22:22.560 --> 00:22:24.420
It's key value pairs for the metadata.

00:22:24.420 --> 00:22:28.600
It does the Python version, the platform.

00:22:28.600 --> 00:22:31.880
So Python version is like whatever Python version.

00:22:31.880 --> 00:22:39.280
The platform is a string that we get out from Python to say what kind of like, you know, for macOS, it's Darwin or something else.

00:22:40.360 --> 00:22:46.440
And then the packages, it lists all the pytest packages that are there.

00:22:46.440 --> 00:22:52.120
And then actually it says the description of pytest packages.

00:22:52.120 --> 00:22:54.220
I think it's, I'm going to have to check this out.

00:22:54.220 --> 00:22:57.920
I'm not sure if it's all packages that are available or just the ones associated with it.

00:22:57.920 --> 00:23:02.000
Yeah, the name says pytest, but the example lists more than just pytest, right?

00:23:02.000 --> 00:23:03.040
Yeah, so I'm not sure.

00:23:03.700 --> 00:23:11.720
But then there's plugins and it lists all the pytest plugins that are there that you have bundled.

00:23:11.720 --> 00:23:13.420
But I don't really use it for that.

00:23:13.420 --> 00:23:14.960
I mean, that's interesting.

00:23:14.960 --> 00:23:17.040
But really, I add stuff.

00:23:17.040 --> 00:23:21.920
So we've got like my, I'm often the target environment that I'm testing.

00:23:21.920 --> 00:23:23.140
What version is that?

00:23:23.380 --> 00:23:26.780
What extra packages are on that?

00:23:26.780 --> 00:23:29.900
So if I'm testing, you know, embedded systems.

00:23:29.900 --> 00:23:32.600
So I'm checking information about the system.

00:23:32.600 --> 00:23:35.340
I'm testing and adding that to the metadata frequently.

00:23:35.340 --> 00:23:36.320
But you can do whatever you want.

00:23:36.320 --> 00:23:37.720
But this adding is cool.

00:23:37.720 --> 00:23:39.100
And it's really easy to do.

00:23:39.100 --> 00:23:46.260
You can add it during, you can even add it at the beginning, like on command line, if you know it at command line.

00:23:46.260 --> 00:23:50.600
But within the test, you can do it within a fixture or within a test as well.

00:23:50.600 --> 00:23:51.600
You can add metadata.

00:23:51.600 --> 00:23:51.900
That's cool.

00:23:51.900 --> 00:24:02.660
And it's reported in the command line if you do the dash, dash for most, it gets, or dash B will add, like reports all the metadata.

00:24:02.660 --> 00:24:05.700
But it also comes out in the JUnit XML.

00:24:06.740 --> 00:24:15.560
And a lot of JSON results and other plugins will pull this metadata out also because it's a very widely used plugin.

00:24:15.560 --> 00:24:18.900
So very useful if you want to pass that along.

00:24:18.900 --> 00:24:31.460
It was, I believe it was generated specifically for the pytest HTML plugin because it's the same contributor, Dave Hunt and others.

00:24:33.420 --> 00:24:36.780
But the metadata is used even without the HTML.

00:24:36.780 --> 00:24:45.500
In our top pytest plugins list, the metadata is number five and HTML is number six.

00:24:45.500 --> 00:24:49.660
So they're both very popular, but metadata is popular by itself.

00:24:49.660 --> 00:24:51.160
Yeah, very cool.

00:24:51.160 --> 00:24:52.780
I love it.

00:24:52.780 --> 00:24:53.600
That's a great idea.

00:24:53.600 --> 00:24:57.500
Anyway, so those are our items.

00:24:57.500 --> 00:25:01.660
I have a couple extras or one extra.

00:25:01.660 --> 00:25:02.500
Do you have any extras?

00:25:02.500 --> 00:25:02.960
Hit them.

00:25:02.960 --> 00:25:03.640
Okay.

00:25:03.640 --> 00:25:05.440
Yeah, I got a few, but they're quick as well.

00:25:05.440 --> 00:25:11.340
It makes sense to start right here because I did make some changes to the plugin list.

00:25:11.340 --> 00:25:20.020
So just the other day, I was looking through the top pytest plugins list over on pythontest.com.

00:25:20.020 --> 00:25:24.880
And noticed that there was stuff in there that I don't like talking about because they're deprecated.

00:25:24.880 --> 00:25:27.520
And even the developers don't want you to use them.

00:25:27.520 --> 00:25:30.360
So I've started to start filtering those.

00:25:30.360 --> 00:25:34.680
So I'm going to go through the list and check out to see if they're deprecated ones.

00:25:34.680 --> 00:25:44.460
Because you can already find this information out if you want to find out with the list of which ones I'm pulling out.

00:25:44.460 --> 00:25:45.720
But why would you want to do that?

00:25:45.720 --> 00:25:50.060
We want to know the top pytest plugins that I should look at.

00:25:50.060 --> 00:25:52.240
And if there's ones you shouldn't, don't.

00:25:52.740 --> 00:25:53.920
Yeah, don't clutter it up.

00:25:53.920 --> 00:25:54.780
Those are coming up.

00:25:54.780 --> 00:25:54.960
Bad advice.

00:25:55.420 --> 00:26:03.080
And then I thought, you know, I've been wanting to do a new series on the Testing Code podcast.

00:26:03.080 --> 00:26:06.480
And I thought, why not look at these plugins?

00:26:06.480 --> 00:26:09.920
So I'm not going to go through the entire list.

00:26:09.920 --> 00:26:13.560
Plus, it changes like every month a little bit.

00:26:13.560 --> 00:26:17.900
But I'm going to go through some of these and pull out some that I think people should know about.

00:26:17.980 --> 00:26:21.420
So I'm going to do a series of plugin episodes.

00:26:21.420 --> 00:26:23.820
Excellent.

00:26:23.820 --> 00:26:24.420
Coming up.

00:26:24.420 --> 00:26:25.320
How about you?

00:26:25.320 --> 00:26:26.440
Any extras?

00:26:26.440 --> 00:26:27.520
A couple.

00:26:27.520 --> 00:26:28.840
Let's see what we got.

00:26:28.840 --> 00:26:30.600
So let's start here.

00:26:31.660 --> 00:26:35.840
So Hugo Van Camande said, guess what?

00:26:35.840 --> 00:26:44.520
Pillow, you know, the Python image library, 11.0.0 is out with not just support for Python 3.13,

00:26:44.520 --> 00:26:47.020
but free-threaded Python wheels.

00:26:47.020 --> 00:26:50.200
So you are doing a bunch of image processing.

00:26:50.200 --> 00:26:51.200
You want to speed that up.

00:26:51.200 --> 00:26:55.840
The free-threaded Python T or whatever it is you run is good.

00:26:55.840 --> 00:26:58.320
Drop support for 3.8 because that's so old school.

00:26:58.640 --> 00:27:02.460
Removed a bunch of stuff and then added many things.

00:27:02.460 --> 00:27:08.380
So if you go look here, I believe, you look at all the changes in this.

00:27:08.380 --> 00:27:13.820
So pretty awesome how much has changed here.

00:27:13.820 --> 00:27:18.100
So if you do stuff with images in Python, use Pillow.

00:27:18.100 --> 00:27:18.700
There's a new one.

00:27:18.700 --> 00:27:19.440
That's a big release.

00:27:19.440 --> 00:27:22.500
But if you're like, what could I do with images in Python?

00:27:22.500 --> 00:27:23.620
Well, check out Pillow.

00:27:23.620 --> 00:27:24.340
It does a lot.

00:27:24.340 --> 00:27:26.660
So that's cool.

00:27:27.660 --> 00:27:32.060
We have, you know, you've heard of pip install anti-gravity.

00:27:32.060 --> 00:27:34.040
You've heard pip install this.

00:27:34.040 --> 00:27:36.440
Or sorry, import this and import anti-gravity.

00:27:36.440 --> 00:27:39.740
But what about pip install Deutschland?

00:27:39.740 --> 00:27:41.020
What does that do?

00:27:41.020 --> 00:27:44.480
So this comes from Grandknapp.

00:27:44.480 --> 00:27:48.140
It says, hello, Michael and Brian.

00:27:48.140 --> 00:27:51.920
Here's a recommendation for the 14% of your listeners who are in Germany.

00:27:52.040 --> 00:27:54.880
I remember I talked about that as analytics from Yamami a while ago.

00:27:54.880 --> 00:27:59.800
And it says, just pip install Deutschland for lots of useful German data sets.

00:27:59.800 --> 00:28:00.940
Regularly updated.

00:28:00.940 --> 00:28:10.880
And so you go over here and it's got things like, do you want to go and find addresses,

00:28:11.960 --> 00:28:19.640
barrier lines, building areas, building borders, I suppose, and so on.

00:28:19.640 --> 00:28:24.200
My German construction terms are not that good.

00:28:24.200 --> 00:28:26.540
But anyway, something along these lines, right?

00:28:27.380 --> 00:28:35.480
And basically, it just has data for all these different components or things you might want to know about in Germany,

00:28:35.480 --> 00:28:36.860
which is pretty cool.

00:28:36.860 --> 00:28:37.780
Yeah.

00:28:37.780 --> 00:28:39.640
That's pretty cool.

00:28:39.640 --> 00:28:41.740
That's a lot more than just buildings.

00:28:41.740 --> 00:28:44.140
There's quite a bit there, isn't there?

00:28:44.140 --> 00:28:44.500
Yeah.

00:28:44.500 --> 00:28:44.780
Yeah.

00:28:44.780 --> 00:28:50.400
Addresses, history points, underground stuff.

00:28:51.680 --> 00:28:53.300
It's got Autobahn information.

00:28:53.300 --> 00:28:54.260
Yeah.

00:28:54.260 --> 00:28:54.640
Yeah.

00:28:54.640 --> 00:28:54.700
Yeah.

00:28:54.700 --> 00:28:58.900
We need a pip install for a lot of countries like pip install USA.

00:28:58.900 --> 00:29:02.200
It chants a little, USA, USA.

00:29:02.200 --> 00:29:03.020
Then it installs it.

00:29:03.020 --> 00:29:03.760
No, I'm just kidding.

00:29:03.760 --> 00:29:05.960
All right.

00:29:05.960 --> 00:29:06.540
America.

00:29:06.540 --> 00:29:07.460
America.

00:29:07.460 --> 00:29:08.760
America's got borders.

00:29:08.760 --> 00:29:09.020
Okay.

00:29:09.020 --> 00:29:15.740
So another big thing that's fun is I just released a Talk Python blog.

00:29:15.740 --> 00:29:18.660
So I've got my personal blog and there's tons of RSS at Talk Python,

00:29:18.660 --> 00:29:20.560
like for the podcast and stuff, as you would guess.

00:29:21.080 --> 00:29:26.920
But a dedicated blog so I can post interesting things and series that I plan on working on

00:29:26.920 --> 00:29:31.340
that are more Talk Python related, not just for my personal blog.

00:29:31.340 --> 00:29:34.020
So anyway, it's got a couple of posts already.

00:29:34.020 --> 00:29:39.580
And yeah, I tried to go for the super clean, super readable version here, Brian.

00:29:39.580 --> 00:29:42.020
So trying to make it just...

00:29:42.020 --> 00:29:43.940
That's nice.

00:29:43.940 --> 00:29:44.660
Yeah.

00:29:44.660 --> 00:29:44.980
Thanks.

00:29:44.980 --> 00:29:46.440
So this is built...

00:29:46.440 --> 00:29:46.680
Yeah, go ahead.

00:29:46.680 --> 00:29:47.460
Go ahead.

00:29:47.460 --> 00:29:48.620
I was going to ask you what it's built with.

00:29:48.960 --> 00:29:53.100
Well, it's built with Hugo, which is a glorious static site builder.

00:29:53.100 --> 00:29:58.180
But what's interesting is it's hosted under talkpython.fm/blog,

00:29:58.180 --> 00:30:00.160
not like blog.talkpython.fm.

00:30:01.040 --> 00:30:06.460
And I'm using Nginx to point different sub-URLs to different sections.

00:30:06.460 --> 00:30:09.440
So like most of Talk Python is a Python app, obviously.

00:30:09.440 --> 00:30:14.500
But then this part is Hugo and they just kind of coexist under the same URL structure, which

00:30:14.500 --> 00:30:14.840
is fun.

00:30:14.840 --> 00:30:15.580
Okay.

00:30:15.580 --> 00:30:16.380
Nice.

00:30:16.380 --> 00:30:16.640
Yeah.

00:30:16.640 --> 00:30:18.280
I might write about that actually at some point.

00:30:18.280 --> 00:30:19.480
But yeah, it's built with Hugo.

00:30:19.480 --> 00:30:20.900
Kind of like our own stuff, right?

00:30:20.900 --> 00:30:21.800
Our own personal things.

00:30:21.800 --> 00:30:22.840
Yeah.

00:30:22.940 --> 00:30:23.900
I'm just having some Hugo.

00:30:23.900 --> 00:30:26.120
I'm having Hugo issues, but...

00:30:26.120 --> 00:30:26.500
Are you?

00:30:26.500 --> 00:30:29.480
Well, I'm still having Hugo love, so it's okay.

00:30:29.480 --> 00:30:31.160
We'll even it out there.

00:30:31.160 --> 00:30:32.040
All right.

00:30:32.040 --> 00:30:34.740
I got a joke for you, but I can't find...

00:30:34.740 --> 00:30:37.540
This is a cartoon I saw, but I can't find it again.

00:30:37.540 --> 00:30:38.360
I thought...

00:30:38.360 --> 00:30:40.760
I bookmarked it in our thing that bookmarks it.

00:30:40.760 --> 00:30:43.280
And the title of it is there, but the URL to it is not.

00:30:43.280 --> 00:30:44.620
It just says dog joke.

00:30:44.620 --> 00:30:45.180
I'm like, huh.

00:30:45.180 --> 00:30:47.180
I wonder where that is.

00:30:47.180 --> 00:30:48.460
And I've tried to search for it.

00:30:48.460 --> 00:30:49.000
I can't find it.

00:30:49.000 --> 00:30:50.640
But I can tell you the joke.

00:30:50.640 --> 00:30:51.060
Okay.

00:30:51.380 --> 00:30:52.400
Are you ready?

00:30:52.400 --> 00:30:53.140
Yes.

00:30:53.140 --> 00:31:05.280
Imagine, if you will, a little girl just getting her first puppy.

00:31:05.280 --> 00:31:08.120
The dad is brought it home, and they're out in the backyard,

00:31:08.120 --> 00:31:13.180
and he's about to share some wise advice with his daughter

00:31:13.180 --> 00:31:16.480
to help her become accustomed to having a puppy

00:31:16.480 --> 00:31:18.760
and all the new responsibilities and so on, right?

00:31:18.760 --> 00:31:19.420
Yeah.

00:31:19.860 --> 00:31:24.160
So he's just sitting there like gleefully petting the new puppy and says,

00:31:24.160 --> 00:31:26.620
now they're thinking of a name for her.

00:31:26.620 --> 00:31:33.300
He says, now, sweetie, you need to think very carefully about the name for this puppy

00:31:33.300 --> 00:31:36.620
because you're going to have to remember it for the rest of your life

00:31:36.620 --> 00:31:40.080
and enter it on every webpage that has a stupid security question.

00:31:40.080 --> 00:31:42.340
Yeah.

00:31:42.580 --> 00:31:43.860
So that's the advice of the dad.

00:31:43.860 --> 00:31:48.560
Remember this name of your first pet because you're going to have to remember that for the rest of your life.

00:31:48.560 --> 00:31:49.240
Yeah.

00:31:49.240 --> 00:31:50.440
That was the joke.

00:31:50.440 --> 00:31:51.200
That's good.

00:31:51.200 --> 00:31:52.920
No picture because I can't find it.

00:31:52.920 --> 00:31:56.560
I've got a dog joke, so let's add another joke.

00:31:56.560 --> 00:31:57.880
Let's do it.

00:31:57.880 --> 00:31:58.400
Okay.

00:31:59.040 --> 00:32:00.220
So kind of a dog joke.

00:32:00.220 --> 00:32:07.260
So a guy walks into a library and he's looking for a book and he walks up to the librarian and says,

00:32:07.260 --> 00:32:11.660
there's a particular book I'm looking for, but I can't remember the name of it.

00:32:12.460 --> 00:32:18.020
It's a book about Pavlov's dog and Schrodinger's cat.

00:32:18.020 --> 00:32:23.160
And the librarian says, that rings a bell, but I'm not sure whether we have it here or not.

00:32:23.160 --> 00:32:24.500
Perfect.

00:32:24.500 --> 00:32:26.620
It's pretty good.

00:32:26.620 --> 00:32:28.540
There's a lot of science in there.

00:32:28.540 --> 00:32:31.440
Some social science, some hard science.

00:32:31.440 --> 00:32:32.020
I love it.

00:32:32.020 --> 00:32:32.480
Yeah.

00:32:32.480 --> 00:32:33.320
Yeah.

00:32:33.320 --> 00:32:33.740
All right.

00:32:33.740 --> 00:32:34.560
Some uncertainty.

00:32:34.560 --> 00:32:35.100
Yeah.

00:32:35.100 --> 00:32:35.660
Yeah.

00:32:35.660 --> 00:32:36.320
Might be there.

00:32:36.320 --> 00:32:36.820
Might be there.

00:32:36.820 --> 00:32:37.920
And it rings a bell.

00:32:37.920 --> 00:32:39.460
Cool.

00:32:39.680 --> 00:32:42.580
Well, awesome episode again, I think.

00:32:42.580 --> 00:32:44.700
So thank you, Michael.

00:32:44.700 --> 00:32:44.940
Yeah.

00:32:44.940 --> 00:32:45.380
And thank you.

00:32:45.380 --> 00:32:45.860
Yeah, you bet.

00:32:45.860 --> 00:32:46.180
Thank you.

00:32:46.180 --> 00:32:50.540
So I guess we'll talk next week.

00:32:50.540 --> 00:32:51.120
Bye.

00:32:51.120 --> 00:32:51.560
Yep.

00:32:51.560 --> 00:32:51.960
Bye, all.

00:32:51.960 --> 00:32:53.760
Yeah.

