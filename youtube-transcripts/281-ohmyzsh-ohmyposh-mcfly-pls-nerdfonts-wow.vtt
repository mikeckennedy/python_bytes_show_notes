WEBVTT

00:00:00.000 --> 00:00:04.400
Hey, everybody on the stream, welcome to the show.


00:00:04.400 --> 00:00:06.880
We're going to kick it off now.


00:00:06.880 --> 00:00:10.720
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:10.720 --> 00:00:11.960
to your earbuds.


00:00:11.960 --> 00:00:17.880
This is episode 281, recorded April 27th, 2022.


00:00:17.880 --> 00:00:18.880
I'm Brian Okken.


00:00:18.880 --> 00:00:19.880
I'm Michael Kennedy.


00:00:19.880 --> 00:00:23.440
And I'm Anna Astori.


00:00:23.440 --> 00:00:24.440
Welcome Anna.


00:00:24.440 --> 00:00:25.440
Thank you.


00:00:25.440 --> 00:00:28.520
Before we jump in, tell us a little bit about yourself.


00:00:28.520 --> 00:00:31.080
- Yeah, definitely.


00:00:31.080 --> 00:00:33.580
So I'm a data engineer, or at least at the moment.


00:00:33.580 --> 00:00:38.640
By training, I'm a linguist,


00:00:38.640 --> 00:00:40.880
so degrees in both theoretical linguistics


00:00:40.880 --> 00:00:42.360
and competition linguistics.


00:00:42.360 --> 00:00:47.120
So I'm really about how the information is encoded


00:00:47.120 --> 00:00:50.160
in our brains and how we share this information.


00:00:50.160 --> 00:00:52.400
And that's why I work in the tech.


00:00:52.400 --> 00:00:53.560
- Nice.


00:00:53.560 --> 00:00:58.000
- So yeah, since I got my master's in competition linguistics


00:00:58.000 --> 00:01:03.000
I worked at Amazon, at Alexa AI org for a while.


00:01:03.000 --> 00:01:06.980
So I first worked as a language engineer actually.


00:01:06.980 --> 00:01:11.060
So it was more on the side of linguistic side of things


00:01:11.060 --> 00:01:14.040
and so dealing with extracting the semantics


00:01:14.040 --> 00:01:18.120
and the meaning really out of the data for Alexa.


00:01:18.120 --> 00:01:22.960
Then gradually I switched over to just data processing


00:01:22.960 --> 00:01:25.080
and been in the role of data engineer


00:01:25.080 --> 00:01:27.280
for about three, four years now.


00:01:27.280 --> 00:01:29.880
And I'm currently with Decathon,


00:01:29.880 --> 00:01:32.400
which is a worldwide sports retailer.


00:01:32.400 --> 00:01:35.480
So working with lots of, lots of data there.


00:01:35.480 --> 00:01:36.320
- Okay.


00:01:36.320 --> 00:01:37.960
- That is fascinating.


00:01:37.960 --> 00:01:39.160
- Yeah, it's been a ride.


00:01:39.160 --> 00:01:42.000
- Yeah, it's really neat how we can speak


00:01:42.000 --> 00:01:43.000
to our devices these days,


00:01:43.000 --> 00:01:47.440
and they kind of actually work, do amazing things, right?


00:01:47.440 --> 00:01:50.440
Like I know when Alexa first came out


00:01:50.440 --> 00:01:51.960
and Siri especially, it was like,


00:01:51.960 --> 00:01:54.880
ah, I don't really want to, that thing is so not getting,


00:01:54.880 --> 00:01:57.080
and now I talk to my devices all the time.


00:01:57.080 --> 00:01:57.920
It's amazing.


00:01:57.920 --> 00:02:04.240
- Yeah, there are some things that are really sophisticated


00:02:04.240 --> 00:02:05.920
that they can do now.


00:02:05.920 --> 00:02:07.360
Sometimes I can't even believe


00:02:07.360 --> 00:02:09.840
like we're actually getting there.


00:02:09.840 --> 00:02:11.200
So it's pretty exciting.


00:02:11.200 --> 00:02:12.720
And sometimes I admit that, you know,


00:02:12.720 --> 00:02:14.640
in some of the things that sometimes you're like,


00:02:14.640 --> 00:02:15.880
really, you can do it?


00:02:15.880 --> 00:02:19.080
But I realized that having worked on that,


00:02:19.080 --> 00:02:21.520
actually I realized that sometimes it's just


00:02:21.520 --> 00:02:23.640
kinds of things that, you know,


00:02:23.640 --> 00:02:25.680
like from a professional standpoint,


00:02:25.680 --> 00:02:28.120
it might seem like kind of trivial to me,


00:02:28.120 --> 00:02:30.680
but I realized that there's so much work


00:02:30.680 --> 00:02:32.840
put into these things.


00:02:32.840 --> 00:02:36.360
And then the AI of the actual device,


00:02:36.360 --> 00:02:40.040
that sometimes just like you don't get


00:02:40.040 --> 00:02:42.960
to all these little like corners, right?


00:02:42.960 --> 00:02:45.920
So one of the things that I got to work at some point


00:02:45.920 --> 00:02:50.560
was actually helping Alexa kind of know


00:02:50.560 --> 00:02:51.800
when she needs to stop.


00:02:51.800 --> 00:02:54.800
When she needs to stop talking about things


00:02:54.800 --> 00:02:57.080
and telling you about things like whatever she found


00:02:57.080 --> 00:02:58.220
on Wikipedia or whatnot.


00:02:58.220 --> 00:03:00.800
So yeah, it's funny.


00:03:00.800 --> 00:03:03.040
- Fantastic. - It is funny.


00:03:03.040 --> 00:03:07.160
So, well, for our first item,


00:03:07.160 --> 00:03:08.940
Michael, do you wanna kick it off?


00:03:08.940 --> 00:03:10.620
- I will definitely kick it off.


00:03:10.620 --> 00:03:12.160
Let's take it to the next level with this one.


00:03:12.160 --> 00:03:16.260
So this is an article by Eluda


00:03:16.260 --> 00:03:19.800
called "Take Your GitHub Repository to the Next Level."


00:03:19.800 --> 00:03:21.560
And there's kind of 13 levels,


00:03:21.560 --> 00:03:23.840
but I guess it's a spectrum.


00:03:23.840 --> 00:03:26.580
you decide which level you want to take it to.


00:03:26.580 --> 00:03:28.820
So here are basically 13 ideas


00:03:28.820 --> 00:03:32.440
on how your GitHub repository can be better.


00:03:32.440 --> 00:03:34.160
So there was a topic I was going to cover


00:03:34.160 --> 00:03:37.260
after I explored more, I decided, not so much,


00:03:37.260 --> 00:03:40.120
but as part of it, there was a conversation


00:03:40.120 --> 00:03:42.060
about some WebAssembly stuff in Python,


00:03:42.060 --> 00:03:43.260
and I checked it out, it's really cool,


00:03:43.260 --> 00:03:44.540
they're like, we're going to use this library,


00:03:44.540 --> 00:03:46.480
this is the fundamental thing that makes it work,


00:03:46.480 --> 00:03:47.880
and I go to the GitHub repo for that,


00:03:47.880 --> 00:03:49.940
and it says, here's how you build it.


00:03:49.940 --> 00:03:52.020
And that's it, I'm like, wait, okay, great,


00:03:52.020 --> 00:03:53.740
but why do I want it?


00:03:53.740 --> 00:03:54.580
What can I do with it?


00:03:54.580 --> 00:03:55.420
How do I use it?


00:03:55.420 --> 00:03:56.540
I don't care about how do I build it.


00:03:56.540 --> 00:03:59.460
Like that's the last, I'll just download the WASM file.


00:03:59.460 --> 00:04:01.860
But what do I do with it once I get it, right?


00:04:01.860 --> 00:04:03.420
It was just none of that.


00:04:03.420 --> 00:04:05.760
And so that's kind of, you know,


00:04:05.760 --> 00:04:08.680
this article helps you think through those ideas.


00:04:08.680 --> 00:04:09.540
- Oh, nice.


00:04:09.540 --> 00:04:12.620
- So number one, and you know it's Python friendly


00:04:12.620 --> 00:04:15.380
'cause it starts with zero, step zero,


00:04:15.380 --> 00:04:19.260
rather than one, make your project more discoverable.


00:04:19.260 --> 00:04:22.260
Now, every one of these comes with a recommendation,


00:04:22.260 --> 00:04:26.780
a bit of a description, and then examples, which is cool.


00:04:26.780 --> 00:04:29.620
So for example, this one says, what you can do


00:04:29.620 --> 00:04:31.500
is to help people find your project


00:04:31.500 --> 00:04:34.180
if the name of your project does not carefully


00:04:34.180 --> 00:04:40.380
describe what it is, you can put tags, basically.


00:04:40.380 --> 00:04:43.580
So like refactoring, or science, or things like that


00:04:43.580 --> 00:04:46.080
might be something you put on there that's not immediately


00:04:46.080 --> 00:04:48.940
obvious from it, right?


00:04:48.940 --> 00:04:50.740
So you can tag subject areas and whatnot.


00:04:50.740 --> 00:04:51.940
And they have some examples.


00:04:51.940 --> 00:04:55.300
So for example, there's this thing called Well App,


00:04:55.300 --> 00:04:58.060
which is like a mindfulness app for the Mac.


00:04:58.060 --> 00:05:00.220
Of course it's for the Mac, isn't it?


00:05:00.220 --> 00:05:05.220
So it has tags such as macOS, productivity,


00:05:05.220 --> 00:05:08.820
happiness, mental health, but also Flutter and web app


00:05:08.820 --> 00:05:11.380
if people wanted to check out a Flutter web app, right?


00:05:11.380 --> 00:05:13.700
Okay, so that's, you know, there's other examples as well.


00:05:13.700 --> 00:05:15.440
That's step zero.


00:05:15.440 --> 00:05:17.600
Step one is choose a name that sticks.


00:05:19.340 --> 00:05:21.860
something that's available on PyPI,


00:05:21.860 --> 00:05:24.140
something that people can Google,


00:05:24.140 --> 00:05:26.740
something that people want to say.


00:05:26.740 --> 00:05:29.700
It doesn't sound silly or unprofessional


00:05:29.700 --> 00:05:30.860
if they were to use it.


00:05:30.860 --> 00:05:35.340
You wouldn't call your web app fancy pants server, right?


00:05:35.340 --> 00:05:37.020
You wouldn't say, well, our fancy pants server


00:05:37.020 --> 00:05:38.020
is really scaling today.


00:05:38.020 --> 00:05:40.500
It's like, you wouldn't want to speak that way necessarily.


00:05:40.500 --> 00:05:42.100
So don't name it that way, right?


00:05:42.100 --> 00:05:43.060
- Yeah.


00:05:43.060 --> 00:05:45.380
- So choose a name that sticks.


00:05:45.380 --> 00:05:47.420
- And that we can say on air.


00:05:47.420 --> 00:05:48.260
- Yes, exactly.


00:05:48.260 --> 00:05:51.840
- Yeah, I mean, is, you know, somewhat predictable


00:05:51.840 --> 00:05:55.640
in the pronunciation maybe, because that's also a challenge.


00:05:55.640 --> 00:05:59.040
But so there's some examples of like, yeah, yeah.


00:05:59.040 --> 00:06:00.880
Anna, what do you think?


00:06:00.880 --> 00:06:02.520
- Yeah, absolutely.


00:06:02.520 --> 00:06:04.000
Just thinking about the name,


00:06:04.000 --> 00:06:05.880
something that I ran into today,


00:06:05.880 --> 00:06:08.040
particularly with Python,


00:06:08.040 --> 00:06:11.440
some of the services or applications,


00:06:11.440 --> 00:06:15.960
and libraries as well that often end in P-Y,


00:06:15.960 --> 00:06:19.760
and sometimes you don't know if it's pi or p in that case.


00:06:19.760 --> 00:06:21.720
It's like, oh, confusing.


00:06:21.720 --> 00:06:23.520
And then you're talking to somebody else


00:06:23.520 --> 00:06:24.440
who's talking about the same thing.


00:06:24.440 --> 00:06:27.160
They're like constantly confused.


00:06:27.160 --> 00:06:28.600
So yeah.


00:06:28.600 --> 00:06:29.880
- Yeah, I agree.


00:06:29.880 --> 00:06:31.040
It matters a lot.


00:06:31.040 --> 00:06:31.880
Let's see.


00:06:31.880 --> 00:06:34.040
So some of the things are conduct a thorough


00:06:34.040 --> 00:06:35.120
internet search for the name,


00:06:35.120 --> 00:06:36.400
avoid hard to spell names,


00:06:36.400 --> 00:06:38.080
get the dev or .io domain.


00:06:38.080 --> 00:06:40.240
If you really, really care about it,


00:06:40.240 --> 00:06:41.840
is it some random small little package


00:06:41.840 --> 00:06:44.160
or are you trying to create the next FastAPI?


00:06:44.160 --> 00:06:47.900
right, a name that conveys some meaning.


00:06:47.900 --> 00:06:49.740
I was thinking about Jupyter, for example,


00:06:49.740 --> 00:06:51.280
like Jupyter is pretty interesting


00:06:51.280 --> 00:06:53.520
because it's kind of hard to spell,


00:06:53.520 --> 00:06:55.700
but once you know it, you just know it.


00:06:55.700 --> 00:06:58.900
And it very clearly works well in a search.


00:06:58.900 --> 00:07:00.360
There's probably no domain name


00:07:00.360 --> 00:07:03.180
that's like a misspelled planet type of thing.


00:07:03.180 --> 00:07:05.280
You know, I mean, it was probably a really good choice


00:07:05.280 --> 00:07:06.920
even though it kind of breaks the,


00:07:06.920 --> 00:07:09.480
maybe hard to spell at first.


00:07:09.480 --> 00:07:11.600
- Yeah, but it's easier to search, right?


00:07:11.600 --> 00:07:12.440
- Yeah, yeah.


00:07:12.440 --> 00:07:15.900
The example they give for this one is size limit is the name.


00:07:15.900 --> 00:07:16.740
And what does it do?


00:07:16.740 --> 00:07:18.740
It calculates the real cost to run your JavaScript app


00:07:18.740 --> 00:07:20.860
or lib to keep good performance.


00:07:20.860 --> 00:07:23.020
It'll show an error in a PR if the cost,


00:07:23.020 --> 00:07:24.940
basically file size, exceeds the limit.


00:07:24.940 --> 00:07:26.440
That's cool.


00:07:26.440 --> 00:07:28.380
The next one, I'm all about this.


00:07:28.380 --> 00:07:32.180
Display a beautiful cover image.


00:07:32.180 --> 00:07:36.780
So if you go to a repo and it's just the text,


00:07:36.780 --> 00:07:38.200
that's not amazing.


00:07:38.200 --> 00:07:42.220
You want some color and you don't necessarily have to have


00:07:42.220 --> 00:07:46.620
like an amazing logo. So they come back to this well app and it's just a W with like a little


00:07:46.620 --> 00:07:52.780
connection smile or something under it. One thing I did learn about this though that I thought was


00:07:52.780 --> 00:07:57.900
interesting like how do they center this image but not have it go all the way across the readme.


00:07:57.900 --> 00:08:05.580
If you go to the readme and you actually look at it, apparently github will let you put full html


00:08:05.580 --> 00:08:09.420
inside of your readme for the segments that need lots of formatting. I thought it I thought they


00:08:09.420 --> 00:08:10.260
They wouldn't.


00:08:10.260 --> 00:08:12.060
I know some markdown does fall back that way,


00:08:12.060 --> 00:08:13.660
but I didn't think GitHub did.


00:08:13.660 --> 00:08:16.060
Anyway, apparently, yes, you can.


00:08:16.060 --> 00:08:18.140
Also, this one's quick, badges, like,


00:08:18.140 --> 00:08:21.700
is CI passing, what's the license, and so on.


00:08:21.700 --> 00:08:23.940
Is there a YouTube link to like a YouTube channel


00:08:23.940 --> 00:08:25.140
that shows people how to use it?


00:08:25.140 --> 00:08:27.060
Some more of those as examples.


00:08:27.060 --> 00:08:29.900
Write a convincing description in a paragraph or two.


00:08:29.900 --> 00:08:33.600
Add things like, what is this repo or project?


00:08:33.600 --> 00:08:35.860
How does it work?


00:08:35.860 --> 00:08:36.700
Who will use it?


00:08:36.700 --> 00:08:37.520
What is the goal?


00:08:37.520 --> 00:08:38.360
And so on, right?


00:08:38.360 --> 00:08:40.160
simple one and again,


00:08:40.160 --> 00:08:41.340
they come back to the size limit.


00:08:41.340 --> 00:08:45.520
It's a performance tool that'll crash your CI if it gets too big.


00:08:45.520 --> 00:08:48.760
Here we go, getting to the ones that Brian and I love.


00:08:48.760 --> 00:08:50.940
Record visuals to attract users.


00:08:50.940 --> 00:08:51.480
>> Yes.


00:08:51.480 --> 00:08:54.800
>> You might think there's no UI aspect,


00:08:54.800 --> 00:08:58.880
but here's a full-on CLI example,


00:08:58.880 --> 00:09:00.960
that is create go app CLI.


00:09:00.960 --> 00:09:02.720
All it does, imagine this,


00:09:02.720 --> 00:09:05.160
it creates go apps on the CLI.


00:09:05.160 --> 00:09:07.880
A good name that conveys what it does.


00:09:07.880 --> 00:09:10.240
But if you go to see, how do I create one?


00:09:10.240 --> 00:09:12.200
It has the option, but then under it,


00:09:12.200 --> 00:09:16.080
it has an animated GIF doing the things that creates the app


00:09:16.080 --> 00:09:18.480
and showing you the tree structure that results,


00:09:18.480 --> 00:09:21.040
the file structure that results, and so on.


00:09:21.040 --> 00:09:23.240
Then a full video and a documentation to that thing,


00:09:23.240 --> 00:09:24.480
and so on.


00:09:24.480 --> 00:09:27.360
So that's pretty awesome.


00:09:27.360 --> 00:09:28.320
And how about you?


00:09:28.320 --> 00:09:31.360
Brian and I are always trying to quickly jump into a project


00:09:31.360 --> 00:09:33.760
and figure out, what is it about?


00:09:33.760 --> 00:09:35.520
Is it polished and so on?


00:09:35.520 --> 00:09:38.000
but that's 'cause we run this podcast.


00:09:38.000 --> 00:09:40.560
How do you see this sort of pictures


00:09:40.560 --> 00:09:42.420
and animations for repos?


00:09:42.420 --> 00:09:45.120
- Yeah, that's super helpful.


00:09:45.120 --> 00:09:48.940
I really like the idea with the animation,


00:09:48.940 --> 00:09:51.520
just basically taking you through


00:09:51.520 --> 00:09:54.760
through the kinds of things that this particular app,


00:09:54.760 --> 00:09:56.320
for instance, can do.


00:09:56.320 --> 00:09:58.840
That's just super helpful.


00:09:58.840 --> 00:10:00.280
More and more people started doing it.


00:10:00.280 --> 00:10:03.200
I don't think it's super popular yet.


00:10:03.200 --> 00:10:04.960
I don't know about how about you guys,


00:10:04.960 --> 00:10:07.960
but I haven't seen it a whole lot of times.


00:10:07.960 --> 00:10:12.040
But yeah, it definitely looks nice.


00:10:12.040 --> 00:10:13.380
- Yeah, I really like it as well.


00:10:13.380 --> 00:10:14.440
All right, let's see.


00:10:14.440 --> 00:10:18.540
Another one is create a practical usage guide,


00:10:18.540 --> 00:10:20.860
like how to use it with some examples,


00:10:20.860 --> 00:10:24.240
some templates, answer common questions like an FAQ.


00:10:24.240 --> 00:10:28.200
Can I use it on Windows or does it require admin support?


00:10:28.200 --> 00:10:29.640
I don't know, something like that.


00:10:29.640 --> 00:10:31.920
Build a community, so maybe you have,


00:10:31.920 --> 00:10:33.480
this is probably further down the line,


00:10:33.480 --> 00:10:36.520
but like, do you have a Discord community for your project?


00:10:36.520 --> 00:10:39.080
Or you can even just enable discussions


00:10:39.080 --> 00:10:40.420
on the GitHub repository.


00:10:40.420 --> 00:10:43.360
I'll end up with people opening issues


00:10:43.360 --> 00:10:46.040
on my various repositories saying, I have a question.


00:10:46.040 --> 00:10:48.120
Okay, a question is not an issue.


00:10:48.120 --> 00:10:49.380
An issue is the thing that is wrong


00:10:49.380 --> 00:10:50.680
or a thing to be improved,


00:10:50.680 --> 00:10:51.580
but they don't have another way


00:10:51.580 --> 00:10:53.820
to communicate traditionally.


00:10:53.820 --> 00:10:56.260
But GitHub now has, in addition to issues,


00:10:56.260 --> 00:11:00.120
they also have a discussion section that's more open-ended.


00:11:00.120 --> 00:11:03.320
So I think that's off by default, if I remember correctly.


00:11:03.320 --> 00:11:06.220
at least on the older ones it is, so I go and turn that on.


00:11:06.220 --> 00:11:09.560
Code of conduct, that's all good.


00:11:09.560 --> 00:11:12.960
Contributor guidelines, choose a license, the right license.


00:11:12.960 --> 00:11:14.720
Remember, if you don't choose a license at all,


00:11:14.720 --> 00:11:17.940
that means it's unlicensed and people can't really use it.


00:11:17.940 --> 00:11:22.720
So add a roadmap, create GitHub releases.


00:11:22.720 --> 00:11:25.960
One thing that I didn't pull up that's pretty cool


00:11:25.960 --> 00:11:30.400
is release drafter.


00:11:30.400 --> 00:11:32.060
So I'm not sure if you all are familiar with this,


00:11:32.060 --> 00:11:36.380
but this is a pretty cool thing as well, release drafter.


00:11:36.380 --> 00:11:38.060
Drafts your next release notes


00:11:38.060 --> 00:11:41.180
as PRs are merged into master or main,


00:11:41.180 --> 00:11:42.500
depending on how you set up your repo.


00:11:42.500 --> 00:11:43.420
That's pretty cool.


00:11:43.420 --> 00:11:47.960
Customize your social media preview.


00:11:47.960 --> 00:11:49.660
So if somebody shares your project,


00:11:49.660 --> 00:11:52.820
you can control what is shown in that little Twitter card


00:11:52.820 --> 00:11:54.140
or other cards.


00:11:54.140 --> 00:11:56.460
So apparently that that can be customized


00:11:56.460 --> 00:12:00.240
inside of your GitHub repository and launch a website.


00:12:01.200 --> 00:12:03.640
Off it goes, you can use GitHub Pages or Netlify


00:12:03.640 --> 00:12:07.760
is really easy and free for static sites and so on.


00:12:07.760 --> 00:12:10.360
So anyway, there's a bunch of things people can do


00:12:10.360 --> 00:12:12.440
to take their repo to the next level.


00:12:12.440 --> 00:12:14.040
What do you all think?


00:12:14.040 --> 00:12:15.520
- I think it's great.


00:12:15.520 --> 00:12:18.640
- Yeah, I love this list, it looks very nice.


00:12:18.640 --> 00:12:20.280
- I don't do any of these things.


00:12:20.280 --> 00:12:22.180
I probably should.


00:12:22.180 --> 00:12:26.840
- I might have a picture, I have a usage guide.


00:12:26.840 --> 00:12:28.600
Oh, there's also one that talks about how to install it


00:12:28.600 --> 00:12:29.560
that I somehow skipped,


00:12:29.560 --> 00:12:32.800
but most things don't need more than one of the things.


00:12:32.800 --> 00:12:34.720
- One of the things that I see a lot is,


00:12:34.720 --> 00:12:35.920
I don't know if this covers it,


00:12:35.920 --> 00:12:39.400
but I see documentation that's on read the docs,


00:12:39.400 --> 00:12:43.220
which is great, but I still think a quick start


00:12:43.220 --> 00:12:46.080
or a little like this is how you install it.


00:12:46.080 --> 00:12:48.240
And this is how you can do a little bit


00:12:48.240 --> 00:12:49.520
of something with it.


00:12:49.520 --> 00:12:51.840
That should be in the read me,


00:12:51.840 --> 00:12:53.860
even if you have other documentation,


00:12:53.860 --> 00:12:55.780
because I don't want to have to just go


00:12:55.780 --> 00:12:58.100
to the documentation to see if this is the right project


00:12:58.100 --> 00:13:00.020
for me, so.


00:13:00.020 --> 00:13:00.860
- Yeah.


00:13:00.860 --> 00:13:02.620
- This is great.


00:13:02.620 --> 00:13:05.820
So we have a question of,


00:13:05.820 --> 00:13:09.780
does, how does one create a CLI animated GIF?


00:13:09.780 --> 00:13:14.020
And I don't know if the doc, if this article covers that,


00:13:14.020 --> 00:13:14.860
but.


00:13:14.860 --> 00:13:15.700
- I don't think so.


00:13:15.700 --> 00:13:17.100
- Okay.


00:13:17.100 --> 00:13:20.140
We'll have to, we'll have to research that


00:13:20.140 --> 00:13:21.140
and get back to you.


00:13:21.140 --> 00:13:23.160
- Well, Alvaro, what I do is,


00:13:23.160 --> 00:13:27.980
so I'll use Camtasia and you can record a Camtasia video


00:13:27.980 --> 00:13:29.540
of just the window.


00:13:29.540 --> 00:13:32.220
And then there's different output options,


00:13:32.220 --> 00:13:35.500
like just audio or just the video or an animated GIF.


00:13:35.500 --> 00:13:37.540
So that's one of them.


00:13:37.540 --> 00:13:39.620
Jeremy Page points out there are a few tools


00:13:39.620 --> 00:13:43.900
to record that in cinema.


00:13:43.900 --> 00:13:47.740
I don't know, like, sorry, ASCII cinema, basically.


00:13:47.740 --> 00:13:48.580
I don't know how to say that.


00:13:48.580 --> 00:13:50.420
It's often used pretty cool.


00:13:50.420 --> 00:13:53.380
And Dean.


00:13:53.380 --> 00:13:55.180
- Speaking of difficult names.


00:13:55.180 --> 00:13:57.620
- Exactly, I'm at a loss on that one.


00:13:57.620 --> 00:13:59.580
Claudia, who I just had on Talk Python,


00:13:59.580 --> 00:14:01.460
has a blog post about many of those things


00:14:01.460 --> 00:14:03.980
and has a cookie cutter for release drafter and patches.


00:14:03.980 --> 00:14:06.580
Yeah, I covered that on Talk Python just recently


00:14:06.580 --> 00:14:07.940
about hyper-modern Python.


00:14:07.940 --> 00:14:09.400
So, awesome.


00:14:09.400 --> 00:14:11.740
Well, that's probably way more than people wanna know


00:14:11.740 --> 00:14:12.940
about their GitHub repository,


00:14:12.940 --> 00:14:16.780
but so often GitHub repositories these days


00:14:16.780 --> 00:14:20.820
serve as your CV or your resume


00:14:20.820 --> 00:14:22.620
when you go to apply for developer jobs.


00:14:22.620 --> 00:14:24.540
And if you end up at somewhere that looks like


00:14:24.540 --> 00:14:25.540
what they've described here,


00:14:25.540 --> 00:14:29.040
rather than a bunch of things with like weird commit


00:14:29.040 --> 00:14:31.800
messages and nothing like that's going to make a different


00:14:31.800 --> 00:14:34.320
impression or if you want people to adopt it and start using


00:14:34.320 --> 00:14:35.480
it.


00:14:35.480 --> 00:14:38.420
- Yeah. If you don't, then don't put this stuff in.


00:14:38.420 --> 00:14:41.480
- Yeah, exactly.


00:14:41.480 --> 00:14:45.360
All right, Brian, let's go faster.


00:14:45.360 --> 00:14:48.080
- Well, let's go faster. Speaking of CLI.


00:14:48.080 --> 00:14:50.640
So this is, this is a fun tool.


00:14:50.640 --> 00:14:53.640
We're talking about faster, faster, faster, faster.


00:14:53.640 --> 00:14:56.340
I don't know, faster, I'm gonna go with that.


00:14:56.340 --> 00:15:01.400
So this is a, it's like time it on the command line.


00:15:01.400 --> 00:15:04.480
So, but it's pretty neat.


00:15:04.480 --> 00:15:09.480
So this is by Arian Wasi and we've had,


00:15:09.480 --> 00:15:12.400
we've covered something that has before.


00:15:12.400 --> 00:15:13.240
So.


00:15:13.240 --> 00:15:15.680
- It was the type explainer thing.


00:15:15.680 --> 00:15:17.480
I don't remember its exact name, but type explainer,


00:15:17.480 --> 00:15:19.220
where you put a typed thing in there


00:15:19.220 --> 00:15:23.120
and it would humanize what those meant.


00:15:23.120 --> 00:15:26.520
So this is a simple little tool, but I'm loving it already.


00:15:26.520 --> 00:15:30.880
So this one of the, it does either it times stuff


00:15:30.880 --> 00:15:32.600
but it also compares times.


00:15:32.600 --> 00:15:37.080
So like in this, we're showing the website here,


00:15:37.080 --> 00:15:41.240
but in it, I can't tell what their timing.


00:15:41.240 --> 00:15:44.720
So let's just pull over in the documentation.


00:15:44.720 --> 00:15:46.560
It does have a bunch of examples.


00:15:46.560 --> 00:15:51.560
So if you ran fast row with two code snippets,


00:15:51.640 --> 00:15:53.500
And in this example that we're showing,


00:15:53.500 --> 00:15:56.640
it's just either just showing either a string


00:15:56.640 --> 00:15:58.840
or an F string timing those.


00:15:58.840 --> 00:16:00.700
So that's pretty neat.


00:16:00.700 --> 00:16:03.760
And so those two code snippets, if you run those,


00:16:03.760 --> 00:16:06.300
it'll run both of those a whole bunch of times


00:16:06.300 --> 00:16:07.580
and do some statistics.


00:16:07.580 --> 00:16:10.260
Like in this example, it's running it 20,000


00:16:10.260 --> 00:16:14.160
and 50,000 times, no, 20 million and 50 million, wow.


00:16:14.160 --> 00:16:17.980
And then it shows you a little progress bar


00:16:17.980 --> 00:16:20.980
and then who wins.


00:16:20.980 --> 00:16:23.140
But if you don't, if you're not comparing two things,


00:16:23.140 --> 00:16:25.640
it'll just show one with the same graphics,


00:16:25.640 --> 00:16:27.220
but you can do more than two.


00:16:27.220 --> 00:16:28.940
I did like three or four,


00:16:28.940 --> 00:16:31.400
just trying this out to time different things


00:16:31.400 --> 00:16:32.260
and compare them.


00:16:32.260 --> 00:16:35.620
And this often, that's why I'm timing something.


00:16:35.620 --> 00:16:36.780
I'm comparing two things


00:16:36.780 --> 00:16:38.580
and I want to see which one's faster.


00:16:38.580 --> 00:16:40.600
So this is a really cool feature.


00:16:40.600 --> 00:16:43.500
You can either pass in code snippets


00:16:43.500 --> 00:16:45.980
or you can give it to Python file names


00:16:45.980 --> 00:16:48.260
and it'll run both those things.


00:16:48.260 --> 00:16:49.500
One of the, it's kind of a whole bunch


00:16:49.500 --> 00:16:50.820
of really cool features actually.


00:16:50.820 --> 00:16:53.940
And one of the things I like is you can,


00:16:53.940 --> 00:16:58.440
if you've got some code snippet that you are,


00:16:58.440 --> 00:17:00.860
it needs some setup,


00:17:00.860 --> 00:17:03.380
but that the setup part isn't the part you're timing,


00:17:03.380 --> 00:17:05.500
you can give it some setup code to do


00:17:05.500 --> 00:17:07.460
before it does the time part.


00:17:07.460 --> 00:17:09.060
So that's pretty neat.


00:17:09.060 --> 00:17:11.860
Anyway, just a really nice looking


00:17:11.860 --> 00:17:14.540
command line interface timing tool.


00:17:14.540 --> 00:17:16.220
- Yeah, that's very cool.


00:17:16.220 --> 00:17:17.900
- So you can sort of isolate the things


00:17:17.900 --> 00:17:19.500
that you really want to time


00:17:19.500 --> 00:17:24.500
versus the set up things that you don't really care about?


00:17:24.500 --> 00:17:26.220
- Yeah, I haven't tried the set up part,


00:17:26.220 --> 00:17:28.420
but it's cool that it has it in there.


00:17:28.420 --> 00:17:30.820
There's a-- - Yeah, that sounds very nice.


00:17:30.820 --> 00:17:34.300
- Documentation is pretty thorough actually as well.


00:17:34.300 --> 00:17:38.020
Quite a bit of customization available.


00:17:38.020 --> 00:17:40.220
- That's cool, yeah, I agree that is nice,


00:17:40.220 --> 00:17:41.780
that set up stuff, because so often,


00:17:41.780 --> 00:17:44.980
if I want to profile like some web app or something,


00:17:44.980 --> 00:17:47.380
it's the thing I wanna profile is dwarfed


00:17:47.380 --> 00:17:50.420
by just loading up the framework and scanning all the files.


00:17:50.420 --> 00:17:51.980
And you're like, all right, now I got to hunt down


00:17:51.980 --> 00:17:54.060
that little fragment that actually represents


00:17:54.060 --> 00:17:55.020
what I'm really after.


00:17:55.020 --> 00:17:56.040
So pretty cool.


00:17:56.040 --> 00:17:59.500
- Yeah, maybe I'll try one of those.


00:17:59.500 --> 00:18:01.540
- Yeah, and you can pass in strings of Python


00:18:01.540 --> 00:18:03.540
or you can pass in files.


00:18:03.540 --> 00:18:04.380
- Yeah.


00:18:04.380 --> 00:18:05.740
- When I saw the strings a bit, I'm like, all right,


00:18:05.740 --> 00:18:08.180
there's a good use case for semi-colons in Python.


00:18:08.180 --> 00:18:11.340
Right, import this thing.


00:18:11.340 --> 00:18:12.320
- You can use them.


00:18:12.320 --> 00:18:14.420
Yeah.


00:18:14.420 --> 00:18:16.740
- Exactly, it makes you feel better.


00:18:16.740 --> 00:18:19.320
- Awesome, that's a good one.


00:18:19.320 --> 00:18:22.580
All right, Anna, on to you.


00:18:22.580 --> 00:18:24.180
What's your first one?


00:18:24.180 --> 00:18:28.560
- Yeah, so I wanted to talk a little bit about, well,


00:18:28.560 --> 00:18:30.420
data, my line of business.


00:18:30.420 --> 00:18:32.260
(Anna laughs)


00:18:32.260 --> 00:18:33.820
I was just thinking that something


00:18:33.820 --> 00:18:35.620
that could be really of interest is,


00:18:35.620 --> 00:18:40.420
especially for that part of our audience


00:18:40.420 --> 00:18:45.420
that works with kind of data science projects.


00:18:46.700 --> 00:18:48.800
Well, in general, you're collecting data.


00:18:48.800 --> 00:18:53.900
You definitely, in most cases,


00:18:53.900 --> 00:18:57.840
you get some kind of noisy data that you need to clean up


00:18:57.840 --> 00:19:00.360
and filter out in some way.


00:19:00.360 --> 00:19:03.320
And particularly, so I imagine


00:19:03.320 --> 00:19:06.120
we have a pretty large international audience as well.


00:19:06.120 --> 00:19:09.200
And also on the other hand,


00:19:09.200 --> 00:19:12.720
if you're working with data from maybe social media,


00:19:12.720 --> 00:19:14.560
which is like very popular right now,


00:19:15.720 --> 00:19:19.000
One of the questions that you have to solve there is


00:19:19.000 --> 00:19:22.760
identify the human language of the data


00:19:22.760 --> 00:19:23.840
that you're working with.


00:19:23.840 --> 00:19:26.840
And sometimes you want to filter out the pieces of data


00:19:26.840 --> 00:19:30.280
that are maybe, for example, are not in English.


00:19:30.280 --> 00:19:34.520
If you're like going through social media posts


00:19:34.520 --> 00:19:35.680
or something.


00:19:35.680 --> 00:19:36.800
- All right, you get that little,


00:19:36.800 --> 00:19:38.560
translate this to your language,


00:19:38.560 --> 00:19:40.320
little button at the end if for some reason


00:19:40.320 --> 00:19:43.280
the popular post is in Spanish or something, right?


00:19:43.280 --> 00:19:46.240
- Exactly, yeah, and some of the platforms,


00:19:46.240 --> 00:19:51.240
their APIs rather, do provide this kind of filtering


00:19:51.240 --> 00:19:52.400
on their backhand.


00:19:52.400 --> 00:19:57.140
I know Twitter does that, but also as I know,


00:19:57.140 --> 00:20:02.300
sometimes it's not as reliable, really.


00:20:02.300 --> 00:20:06.240
I guess maybe, again, like I could imagine


00:20:06.240 --> 00:20:09.700
that maybe it's not really sort of the ultimate goal.


00:20:09.700 --> 00:20:11.860
That's why they're maybe not putting as much love


00:20:11.860 --> 00:20:13.540
and caring to this question.


00:20:13.540 --> 00:20:15.140
(laughs)


00:20:15.140 --> 00:20:20.020
So that's something that I had to deal a few times also.


00:20:20.020 --> 00:20:23.500
And the couple of libraries that I've worked with


00:20:23.500 --> 00:20:26.900
are LangID and LangDetect.


00:20:26.900 --> 00:20:30.060
There are a few more out there and there,


00:20:30.060 --> 00:20:34.820
these ones have been out there for a while actually


00:20:34.820 --> 00:20:39.820
and LangID hasn't been actually sort of worked on


00:20:39.820 --> 00:20:41.760
actively for a few years now,


00:20:41.760 --> 00:20:43.800
but it's still kind of, you know,


00:20:43.800 --> 00:20:46.440
one of those like benchmark libraries


00:20:46.440 --> 00:20:47.800
for this kind of questions.


00:20:47.800 --> 00:20:52.280
And both of those are super neat actually.


00:20:52.280 --> 00:20:56.240
So, Linguid is really popular.


00:20:56.240 --> 00:20:58.440
And one of the things that I really liked about it


00:20:58.440 --> 00:21:01.560
is that it actually covers a lot of languages.


00:21:01.560 --> 00:21:06.480
So, I've actually had different pieces of information


00:21:06.480 --> 00:21:09.000
depending on the documentation that I was using


00:21:09.000 --> 00:21:11.180
out of PyPi or the GitHub page.


00:21:11.180 --> 00:21:15.320
So at some point I saw it was covering 97


00:21:15.320 --> 00:21:18.260
and I think their GitHub page is saying 97.


00:21:18.260 --> 00:21:20.920
- 97 is a lot of languages.


00:21:20.920 --> 00:21:22.660
I couldn't name 97 languages.


00:21:22.660 --> 00:21:26.960
- I'm a linguist, I would have trouble naming,


00:21:26.960 --> 00:21:29.260
you know, 97 languages off the top of my head.


00:21:29.260 --> 00:21:32.980
I definitely don't speak 97 languages.


00:21:32.980 --> 00:21:36.460
And some of the nice things about it is that


00:21:36.460 --> 00:21:39.480
you can use it as sort of like a standalone, you know,


00:21:39.480 --> 00:21:43.160
module, like a command line tool, for instance.


00:21:43.160 --> 00:21:48.160
But you can also use it as a web service.


00:21:48.160 --> 00:21:50.160
So that's really neat about it.


00:21:50.160 --> 00:21:53.340
And some more like nitty gritty things


00:21:53.340 --> 00:21:56.080
that were really helpful when I was trying it out


00:21:56.080 --> 00:21:58.280
for some of my projects was that


00:21:58.280 --> 00:22:06.720
when you try to identify the human language using LangID,


00:22:08.520 --> 00:22:13.520
It actually outputs the weights and the calculations done,


00:22:13.520 --> 00:22:15.640
which is very typical in like a lock space.


00:22:15.640 --> 00:22:18.320
So we have like this funky numbers in the end,


00:22:18.320 --> 00:22:20.440
you know, truly speaking.


00:22:20.440 --> 00:22:22.840
But the good thing is that you actually can convert them


00:22:22.840 --> 00:22:26.200
to like more confident scores that,


00:22:26.200 --> 00:22:28.240
so especially data scientists are used to.


00:22:28.240 --> 00:22:32.080
And that actually comes in super handy


00:22:32.080 --> 00:22:35.800
because sometimes when you're trying to filter out the data


00:22:35.800 --> 00:22:37.780
and you know that this kind of tools


00:22:37.780 --> 00:22:43.940
like obviously not 100% reliable, you can also use this confidence scores to sort of maybe


00:22:43.940 --> 00:22:52.820
use it as again, okay, I'm taking this answer and I'm relying on that. Or, okay, maybe I'll just


00:22:52.820 --> 00:22:59.940
drop this piece of data altogether because it looks like the language identifier is not super


00:22:59.940 --> 00:23:06.020
actually sure what kind of language this is. If you're targeting a specific language.


00:23:06.020 --> 00:23:10.180
- Yeah, this is wild.


00:23:10.180 --> 00:23:11.880
- Yeah.


00:23:11.880 --> 00:23:15.260
- So you basically might say we're 80% sure it's English,


00:23:15.260 --> 00:23:20.180
but it might also be Spanish or something.


00:23:20.180 --> 00:23:21.020
- Exactly, yeah, yeah.


00:23:21.020 --> 00:23:24.380
Like English could be easily confused with maybe German


00:23:24.380 --> 00:23:25.500
or sometimes French,


00:23:25.500 --> 00:23:28.460
because there's like so much of the vocabulary


00:23:28.460 --> 00:23:30.580
circling around those two languages.


00:23:30.580 --> 00:23:32.460
(laughs)


00:23:32.460 --> 00:23:35.980
So yeah, so the identifier is not correct.


00:23:35.980 --> 00:23:39.840
You're 100% sure that this is language X.


00:23:39.840 --> 00:23:44.840
And the funny thing is that I'm not so sure about lang ID.


00:23:44.840 --> 00:23:48.640
Yeah, lang ID is also statistical actually.


00:23:48.640 --> 00:23:53.100
No remembering and the lang detect as well.


00:23:53.100 --> 00:23:57.060
And sort of the flip side of that is that


00:23:57.060 --> 00:23:59.480
it actually works very well.


00:23:59.480 --> 00:24:02.260
The bigger piece of data that you're fitting into it,


00:24:02.260 --> 00:24:04.620
the more confident it's going to be,


00:24:04.620 --> 00:24:06.620
like, right, that's how statistics work.


00:24:06.620 --> 00:24:07.460
(laughs)


00:24:07.460 --> 00:24:08.280
- Yeah.


00:24:08.280 --> 00:24:09.780
- That's how machine learning works,


00:24:09.780 --> 00:24:11.700
sort of generally speaking.


00:24:11.700 --> 00:24:14.420
And if you're working specifically


00:24:14.420 --> 00:24:17.260
with this kind of short tweets,


00:24:17.260 --> 00:24:19.840
social media posts,


00:24:19.840 --> 00:24:22.780
if it's like really short phrase, sentence,


00:24:22.780 --> 00:24:24.820
interspersed with like emojis and stuff,


00:24:24.820 --> 00:24:28.380
it's probably not going to be super confident.


00:24:28.380 --> 00:24:30.260
So the bigger piece of data,


00:24:30.260 --> 00:24:34.560
the more confident, the better the performance


00:24:34.560 --> 00:24:36.080
of the language identifier will be.


00:24:36.080 --> 00:24:38.200
So something to keep in mind when you're working


00:24:38.200 --> 00:24:40.520
with this kind of data and you're trying to filter it


00:24:40.520 --> 00:24:41.360
by language, for instance.


00:24:41.360 --> 00:24:42.180
- Yeah, that makes sense.


00:24:42.180 --> 00:24:44.720
If you have one word or something, it's very--


00:24:44.720 --> 00:24:46.040
- Yeah, goofy, right?


00:24:46.040 --> 00:24:47.320
Yeah, yeah, exactly.


00:24:47.320 --> 00:24:48.920
- So this being one file, sorry,


00:24:48.920 --> 00:24:50.400
but this being one file is insane.


00:24:50.400 --> 00:24:53.200
Like it acts as a web server and does all sorts of stuff.


00:24:53.200 --> 00:24:54.020
It's crazy.


00:24:54.020 --> 00:24:58.880
- Yeah, and it's something that I really like about it.


00:24:58.880 --> 00:25:06.920
It's a pretty lightweight, well-isolated, low-dependency package, which is fascinating.


00:25:06.920 --> 00:25:15.440
Based on a not super sophisticated, naive-based algorithm, if I'm remembering it correctly.


00:25:15.440 --> 00:25:20.920
So yeah, that's really, really fun.


00:25:20.920 --> 00:25:24.000
It's really nice that it works so nicely.


00:25:24.000 --> 00:25:30.480
The other one that I wanted to sort of kind of juxtapose to it was LangDetect,


00:25:30.480 --> 00:25:33.200
which is in my second tabs there,


00:25:33.200 --> 00:25:41.520
which I happened to find a little bit more robust


00:25:41.520 --> 00:25:46.800
when I got to work with human language data in my project.


00:25:48.640 --> 00:25:53.640
And it's also really neat and easy to use.


00:25:53.640 --> 00:25:59.320
And the great thing about the basic usage


00:25:59.320 --> 00:26:00.360
is very straightforward.


00:26:00.360 --> 00:26:01.960
It's like one of those packages you discover,


00:26:01.960 --> 00:26:03.720
like you know immediately what it's doing,


00:26:03.720 --> 00:26:04.540
how it's doing it,


00:26:04.540 --> 00:26:07.400
and you really can understand in five minutes,


00:26:07.400 --> 00:26:10.720
is it going to be something that's gonna suit well


00:26:10.720 --> 00:26:12.580
in my project for my purpose?


00:26:12.580 --> 00:26:18.360
So the main methods are detect and detect length.


00:26:18.360 --> 00:26:23.360
So you can either just call it on a piece of data


00:26:23.360 --> 00:26:28.500
and try and get the most probable language


00:26:28.500 --> 00:26:30.480
this package thinks it is,


00:26:30.480 --> 00:26:36.420
or you can have returned a list of possible languages.


00:26:36.420 --> 00:26:39.780
So it's going actually to sort them, to order them.


00:26:39.780 --> 00:26:42.880
So it could be like maybe English,


00:26:42.880 --> 00:26:46.860
and then there's a tiny fraction of probability


00:26:46.860 --> 00:26:49.060
that's going to be German or something like that,


00:26:49.060 --> 00:26:52.760
and then you can decide for yourself.


00:26:52.760 --> 00:26:58.020
And yeah, so overall from my experience,


00:26:58.020 --> 00:27:00.860
LangDetect worked and identified languages


00:27:00.860 --> 00:27:03.060
a little bit better than LangID,


00:27:03.060 --> 00:27:06.060
but that sort of empirical data.


00:27:06.060 --> 00:27:11.500
- That's good, it seems super useful


00:27:11.500 --> 00:27:14.020
for anyone that needs to parse text


00:27:14.020 --> 00:27:16.820
and can't be sure it's all in one language.


00:27:16.820 --> 00:27:20.820
Yeah, so if anyone out there like working on some kind of data science project,


00:27:20.820 --> 00:27:24.460
working with human language data, I would highly recommend.


00:27:24.460 --> 00:27:32.740
And probably one of the things why Langstent is a little bit more confident and robust,


00:27:32.740 --> 00:27:35.540
I know that it covers fewer languages.


00:27:35.540 --> 00:27:43.220
So it's, I think it's 55 languages total compared to, what was it, 97?


00:27:43.220 --> 00:27:46.380
Yeah, for LangIdo you said.


00:27:46.380 --> 00:27:47.980
But yeah.


00:27:47.980 --> 00:27:49.820
- Interesting.


00:27:49.820 --> 00:27:50.640
- They're both great.


00:27:50.640 --> 00:27:53.140
- Nice.


00:27:53.140 --> 00:27:56.140
Well, Michael.


00:27:56.140 --> 00:28:01.100
- Let me tell you about our sponsor for this episode.


00:28:01.100 --> 00:28:05.400
Before we move on, it's a podcast.


00:28:05.400 --> 00:28:07.580
Amazing.


00:28:07.580 --> 00:28:10.740
So this episode of Python Bytes is sponsored


00:28:10.740 --> 00:28:12.920
by the compiler podcast from Red Hat.


00:28:12.920 --> 00:28:16.760
So everyone out there, just like you, Brian and I,


00:28:16.760 --> 00:28:18.120
we're both fans of podcasts,


00:28:18.120 --> 00:28:19.840
listening to podcasts all the time and stuff.


00:28:19.840 --> 00:28:22.040
That's why we started some, we like them.


00:28:22.040 --> 00:28:23.760
And so I'm happy to share a new one


00:28:23.760 --> 00:28:26.560
from a highly respected open source company, Compiler,


00:28:26.560 --> 00:28:28.740
an original podcast from Red Hat.


00:28:28.740 --> 00:28:31.320
With more and more of us working from home


00:28:31.320 --> 00:28:33.000
or being more disconnected,


00:28:33.000 --> 00:28:36.200
it's important to keep our human connection with technology.


00:28:36.200 --> 00:28:39.880
Compiler unravels industry topics, trends,


00:28:39.880 --> 00:28:41.520
and things you've always wanted to know about,


00:28:41.520 --> 00:28:44.400
tech through interviews with the people who know best.


00:28:44.400 --> 00:28:47.480
So on Compilator, you'll hear a chorus of perspectives


00:28:47.480 --> 00:28:50.440
from diverse communities behind the code.


00:28:50.440 --> 00:28:52.860
These conversations include questions like,


00:28:52.860 --> 00:28:54.160
what is technical debt?


00:28:54.160 --> 00:28:57.520
What are tech hiring managers actually looking for?


00:28:57.520 --> 00:29:00.400
Hint, see item one to some degree.


00:29:00.400 --> 00:29:05.400
And do you know how to code to get started with open,


00:29:05.400 --> 00:29:08.600
how do you know how to code to get started with open source?


00:29:08.600 --> 00:29:13.360
All right, I was a guest on Red Hat's previous podcast


00:29:13.360 --> 00:29:14.540
called "Command Line Heroes,"


00:29:14.540 --> 00:29:17.480
and that was a super produced and polished podcast.


00:29:17.480 --> 00:29:18.520
It was a really cool experience.


00:29:18.520 --> 00:29:21.920
And so Compiler follows along in that excellent tradition


00:29:21.920 --> 00:29:22.940
and that polished style.


00:29:22.940 --> 00:29:25.600
So I checked out episode 12,


00:29:25.600 --> 00:29:27.520
how we should handle failure,


00:29:27.520 --> 00:29:28.920
which I found really interesting.


00:29:28.920 --> 00:29:30.360
I really value their conversation


00:29:30.360 --> 00:29:33.160
about making space for developers to fail


00:29:33.160 --> 00:29:35.760
so they can learn without fear of making mistakes,


00:29:35.760 --> 00:29:38.260
like taking down the production website and so on.


00:29:38.260 --> 00:29:41.160
People grow through experimentation,


00:29:41.160 --> 00:29:42.840
but they also fail if they try new things.


00:29:42.840 --> 00:29:46.200
So you gotta make sure that they get a chance to grow.


00:29:46.200 --> 00:29:48.480
So learn about the compiler podcast


00:29:48.480 --> 00:29:50.560
at pythonbytes.fm/compiler.


00:29:50.560 --> 00:29:52.760
The link is at your podcast player share notes


00:29:52.760 --> 00:29:54.000
right at the top.


00:29:54.000 --> 00:29:56.380
You can listen to it on all the places that you would think.


00:29:56.380 --> 00:29:58.240
So thanks to compiler podcast


00:29:58.240 --> 00:30:00.560
for keeping this podcast going strong.


00:30:00.560 --> 00:30:02.440
And Brian, also just real quickly,


00:30:02.440 --> 00:30:03.360
I wanna point out,


00:30:04.200 --> 00:30:06.700
I know people can just go to their podcast app,


00:30:06.700 --> 00:30:09.200
whether that's Pocket Cast or Overcast or whatever,


00:30:09.200 --> 00:30:10.720
and type in compiler and search,


00:30:10.720 --> 00:30:13.680
but please visit pythonbytes.fm/compiler,


00:30:13.680 --> 00:30:14.840
and there's a place to subscribe


00:30:14.840 --> 00:30:17.840
with all of your various podcast destinations.


00:30:17.840 --> 00:30:19.400
That way they know it came from us


00:30:19.400 --> 00:30:21.800
rather than just out of the ether.


00:30:21.800 --> 00:30:24.380
So if you're gonna subscribe, check them out.


00:30:24.380 --> 00:30:27.420
Please do through that link, just so people know.


00:30:27.420 --> 00:30:28.260
- Nice. - Yeah.


00:30:28.260 --> 00:30:30.560
- Yeah.


00:30:30.560 --> 00:30:33.860
- So how about we talk about watching some things,


00:30:33.860 --> 00:30:39.060
files. Yeah, we were listening, now we're watching. Now we're gonna watch.


00:30:39.060 --> 00:30:42.940
But watch them for changes, not watch what they are. So this one comes to us


00:30:42.940 --> 00:30:50.260
from Samuel Colvin of Pydantic fame. So you know it's a pretty cool


00:30:50.260 --> 00:30:55.860
experience behind developing this API and the idea is it's a simple modern and


00:30:55.860 --> 00:31:01.860
high-performance ways to watch files for changes. So there's a lot of reasons you


00:31:01.860 --> 00:31:02.700
you might wanna do that.


00:31:02.700 --> 00:31:03.540
You might wanna say,


00:31:03.540 --> 00:31:06.200
if somebody drops a file into this directory,


00:31:06.200 --> 00:31:08.740
I'm gonna kick off a job to like load it up


00:31:08.740 --> 00:31:11.160
and process it in some kind of batch processing.


00:31:11.160 --> 00:31:15.620
Or I wanna have my web framework automatically restart


00:31:15.620 --> 00:31:18.540
if this, any of the files in here get changed, right?


00:31:18.540 --> 00:31:20.740
Any of the Python files or whatever.


00:31:20.740 --> 00:31:22.020
So you could use it for things like that.


00:31:22.020 --> 00:31:24.320
But the modern part's pretty interesting.


00:31:24.320 --> 00:31:27.740
It hooks into the underlying file system,


00:31:27.740 --> 00:31:30.900
the underlying OS notification systems


00:31:30.900 --> 00:31:35.800
and that's done through the notify Rust library.


00:31:35.800 --> 00:31:39.340
So basically, it's a low latency,


00:31:39.340 --> 00:31:43.220
high-performance native non-polling way of watching the files.


00:31:43.220 --> 00:31:45.100
It just goes to the operating system and says,


00:31:45.100 --> 00:31:47.040
"Hey, in this directory tree,


00:31:47.040 --> 00:31:49.420
if anything changes, call the callback."


00:31:49.420 --> 00:31:50.540
That's pretty awesome.


00:31:50.540 --> 00:31:51.340
>> Yeah.


00:31:51.340 --> 00:31:53.860
>> So there's real simple uses here.


00:31:53.860 --> 00:31:55.920
Like I can say from watch files import watch,


00:31:55.920 --> 00:31:59.220
and then just for changes in watch some path,


00:31:59.220 --> 00:32:01.100
then you can process those changes.


00:32:01.100 --> 00:32:03.220
So here's an example of an app that just starts


00:32:03.220 --> 00:32:06.640
and its job is to, as things change here, take them up.


00:32:06.640 --> 00:32:08.760
That might be an example of what I said


00:32:08.760 --> 00:32:12.180
about kicking off something over to like load it


00:32:12.180 --> 00:32:13.600
and parse it and decide what to do


00:32:13.600 --> 00:32:17.220
and then maybe pass it to Celery for background work, right?


00:32:17.220 --> 00:32:21.440
On the other hand, you might want to do other things


00:32:21.440 --> 00:32:24.720
while you're watching for changes as well in your app,


00:32:24.720 --> 00:32:28.100
in which case there's also an A-Watch,


00:32:28.100 --> 00:32:30.100
an asynchronous watch.


00:32:30.100 --> 00:32:34.280
So if you're doing other work and it's all async I/O based,


00:32:34.280 --> 00:32:36.060
here you can just say,


00:32:36.060 --> 00:32:40.260
kick off the watching bit and await for the changes to happen,


00:32:40.260 --> 00:32:45.940
and then do other async processing like FastAPI or web or database calls,


00:32:45.940 --> 00:32:49.760
web with HTTPS or database calls with Beanie or whatever,


00:32:49.760 --> 00:32:51.740
other async I/O things and it's


00:32:51.740 --> 00:32:54.500
sort of lets you run them in parallel which is cool, right?


00:32:54.500 --> 00:32:55.820
>> Yeah.


00:32:55.820 --> 00:32:57.380
>> Then if you want to go even further,


00:32:57.380 --> 00:32:59.880
you can kick off a separate process and say,


00:32:59.880 --> 00:33:04.140
start a process that will watch for changes here,


00:33:04.140 --> 00:33:08.780
and then call back this function if those things change.


00:33:08.780 --> 00:33:14.660
That's pretty cool too. There's all these different ways in which you can use it.


00:33:14.660 --> 00:33:16.340
But yeah, it's pretty neat.


00:33:16.340 --> 00:33:19.760
It's based on this Rust library and it seems pretty powerful.


00:33:19.760 --> 00:33:21.260
There's also a CLI,


00:33:21.260 --> 00:33:24.380
which I did want to point out one other thing over here.


00:33:24.380 --> 00:33:26.520
I thought this might impress you, Brian.


00:33:26.520 --> 00:33:27.600
>> Definitely.


00:33:27.600 --> 00:33:32.240
>> I can do a command line watch files command that will say,


00:33:32.240 --> 00:33:34.640
watch this directory and if anything changes,


00:33:34.640 --> 00:33:36.600
rerun the failing tests.


00:33:36.600 --> 00:33:38.000
>> That's very cool.


00:33:38.000 --> 00:33:41.240
>> That's cool, right? So you just do watch files and you run the string,


00:33:41.240 --> 00:33:45.200
pytest --lf which is pytest rerun the failing tests,


00:33:45.200 --> 00:33:48.280
if anything changes. I think that's neat.


00:33:48.280 --> 00:33:52.920
>> The command line stuff is actually cool.


00:33:52.920 --> 00:33:55.520
I check it out just for the command line usage,


00:33:55.520 --> 00:33:59.440
But the ability to use it programmatically too with an API,


00:33:59.440 --> 00:34:03.240
that's impressive and I'm very happy they included that.


00:34:03.240 --> 00:34:04.640
- Yeah, absolutely.


00:34:04.640 --> 00:34:06.040
If you're gonna use it through the CLI,


00:34:06.040 --> 00:34:09.200
this is the perfect PIPX install type thing, right?


00:34:09.200 --> 00:34:10.600
PIPX install watch files,


00:34:10.600 --> 00:34:12.840
and then it's not really tied to any of your projects.


00:34:12.840 --> 00:34:14.680
It's just always there.


00:34:14.680 --> 00:34:16.600
Anna, what do you think?


00:34:16.600 --> 00:34:18.360
- Yeah, that looks super neat.


00:34:18.360 --> 00:34:23.640
Just made me immediately think about file triggers


00:34:23.640 --> 00:34:27.080
is that they're one of the things that is probably mostly used


00:34:27.080 --> 00:34:29.040
or at least widely used in S3


00:34:29.040 --> 00:34:31.320
and just the cloud storage as well.


00:34:31.320 --> 00:34:33.720
- Yeah. - And it's like, yeah.


00:34:33.720 --> 00:34:35.260
I can imagine like all the possible ways


00:34:35.260 --> 00:34:37.960
that it can be used, yeah, that's really neat.


00:34:37.960 --> 00:34:39.920
I wonder if they in their documentation,


00:34:39.920 --> 00:34:44.080
they actually provide any popular use cases or anything?


00:34:44.080 --> 00:34:45.720
They might not do that,


00:34:45.720 --> 00:34:47.980
but I was curious if they actually do.


00:34:47.980 --> 00:34:52.440
- Yeah, I didn't see any in particular,


00:34:52.440 --> 00:34:54.800
Just a couple of examples on how you might use it and all.


00:34:54.800 --> 00:34:55.640
But yeah.


00:34:55.640 --> 00:34:56.480
- Yeah.


00:34:56.480 --> 00:34:59.160
- There's an older project called Watch God.


00:34:59.160 --> 00:35:00.840
I don't know anything about that one,


00:35:00.840 --> 00:35:01.960
but I'm glad I didn't learn about it


00:35:01.960 --> 00:35:04.120
'cause now there's a new one called Watch Files.


00:35:04.120 --> 00:35:05.200
But if you're using the old one,


00:35:05.200 --> 00:35:07.600
this is the successor to that as well.


00:35:07.600 --> 00:35:08.860
- It's a funny name,


00:35:08.860 --> 00:35:12.080
but I could see why some people might not wanna use it.


00:35:12.080 --> 00:35:14.080
- Yeah, well, again, see item one, right?


00:35:14.080 --> 00:35:15.520
Pick a name that people would be willing


00:35:15.520 --> 00:35:17.520
to talk about exactly.


00:35:17.520 --> 00:35:18.360
- Yeah.


00:35:18.360 --> 00:35:22.400
Well, I wanna talk about a new tool as well,


00:35:22.400 --> 00:35:25.860
- Coverage, not, so hopefully all of us


00:35:25.860 --> 00:35:27.620
are familiar with coverage.py.


00:35:27.620 --> 00:35:32.620
So it's maintained by Ned Batchelder, a really cool tool,


00:35:32.620 --> 00:35:35.260
but there's a new guy on the scene


00:35:35.260 --> 00:35:37.980
and the new person on the scene is Slipcover.


00:35:37.980 --> 00:35:41.140
So Slipcover, and actually I heard about Slipcover


00:35:41.140 --> 00:35:44.540
through the coverage.py Twitter account,


00:35:44.540 --> 00:35:45.640
which was interesting.


00:35:45.640 --> 00:35:50.600
And so not surprising though, Ned's a pretty open-minded guy.


00:35:51.860 --> 00:35:56.860
But so slip cover is coverage, but it's pretty new.


00:35:56.860 --> 00:36:00.020
So some of these commits that's just within the last week


00:36:00.020 --> 00:36:02.220
or so that things, this came in.


00:36:02.220 --> 00:36:05.140
So there's a, it's still at,


00:36:05.140 --> 00:36:08.380
like I think the version is 0.1.1 or something like that.


00:36:08.380 --> 00:36:11.820
You even just got a new one out this morning.


00:36:11.820 --> 00:36:14.820
So why would you wanna use something different?


00:36:14.820 --> 00:36:19.820
Well, the big selling point of this is it's really fast.


00:36:20.180 --> 00:36:22.640
It uses a different process


00:36:22.640 --> 00:36:26.860
for getting the coverage information.


00:36:26.860 --> 00:36:30.100
And it supposedly is only a 3% overhead,


00:36:30.100 --> 00:36:32.300
which depending on your code,


00:36:32.300 --> 00:36:37.300
coverage.py can sometimes slow down your code significantly.


00:36:37.300 --> 00:36:42.840
And if you've got a really long running test suite,


00:36:42.840 --> 00:36:45.340
making it even 20% faster,


00:36:45.340 --> 00:36:48.340
but sometimes coverage can make it like twice as slow.


00:36:49.380 --> 00:36:51.660
So if you've got a five minute test suite,


00:36:51.660 --> 00:36:54.220
that makes it 10 minutes and that's a little painful.


00:36:54.220 --> 00:36:56.540
So this might be worth checking out.


00:36:56.540 --> 00:36:57.980
It's quite a bit faster.


00:36:57.980 --> 00:37:01.780
I tried it against Flask as an example


00:37:01.780 --> 00:37:04.980
and the Flask numbers,


00:37:04.980 --> 00:37:08.460
so Flask has got a pretty tight test suite anyway,


00:37:08.460 --> 00:37:11.420
but so just straight pytest on my machine,


00:37:11.420 --> 00:37:13.340
it was like 2.7 seconds.


00:37:13.340 --> 00:37:18.460
With coverage was about 4.3 seconds.


00:37:18.460 --> 00:37:20.000
And then with slip cover,


00:37:20.000 --> 00:37:22.080
it was just a little slower than just pytest.


00:37:22.080 --> 00:37:25.480
So pytest 2.7 with slip cover is 2.88.


00:37:25.480 --> 00:37:27.000
So just a little tiny bit more


00:37:27.000 --> 00:37:28.760
and you get coverage information.


00:37:28.760 --> 00:37:31.280
- That's really cool. - That's really cool.


00:37:31.280 --> 00:37:32.840
- It is in the early stages though.


00:37:32.840 --> 00:37:36.600
There's some kinks to work out still.


00:37:36.600 --> 00:37:39.960
So I would try it out and watch this space.


00:37:39.960 --> 00:37:41.920
I think they're doing some really cool things,


00:37:41.920 --> 00:37:43.400
definitely worth watching.


00:37:43.400 --> 00:37:44.920
But like for instance,


00:37:44.920 --> 00:37:49.920
I ran into issues on projects that use pytest plugins.


00:37:49.920 --> 00:37:52.480
I don't know why, but the plugins don't get loaded.


00:37:52.480 --> 00:37:56.760
So the, like for instance, I tried to run this,


00:37:56.760 --> 00:37:59.800
this Flask example, but with Xdist,


00:37:59.800 --> 00:38:02.600
so that I could run all the tests in parallel


00:38:02.600 --> 00:38:04.480
to see if it sped up parallel runs.


00:38:04.480 --> 00:38:07.520
Also, it didn't recognize the parallelism.


00:38:07.520 --> 00:38:09.560
So I'm not sure what's going on there,


00:38:09.560 --> 00:38:13.440
but I am in communication with Juan,


00:38:13.440 --> 00:38:17.760
One of the maintainers of this or let him know


00:38:17.760 --> 00:38:18.920
what I found out.


00:38:18.920 --> 00:38:21.780
I'm not just griping and not trying to make it better.


00:38:21.780 --> 00:38:24.920
I'd love to have this be a really cool tool.


00:38:24.920 --> 00:38:25.880
So.


00:38:25.880 --> 00:38:27.280
- It looks neat.


00:38:27.280 --> 00:38:28.920
Yeah, go ahead, Anna.


00:38:28.920 --> 00:38:31.680
- Yeah, and so the near zero overhead,


00:38:31.680 --> 00:38:36.680
that's mostly due to how they managed to provide that.


00:38:36.680 --> 00:38:42.320
They talk about it in the documentation.


00:38:42.320 --> 00:38:43.920
It's really interesting.


00:38:43.920 --> 00:38:44.760
- Yeah.


00:38:44.760 --> 00:38:46.880
- Yeah, with such low overhead,


00:38:46.880 --> 00:38:50.400
I'm tempted to think of a more diabolical use of it.


00:38:50.400 --> 00:38:54.080
Like I've got, I'm handed some crummy old app


00:38:54.080 --> 00:38:55.720
that doesn't really have tests.


00:38:55.720 --> 00:38:57.640
I got to figure out, well, what part of this is dead?


00:38:57.640 --> 00:38:59.360
'Cause I don't know if you've ever picked up


00:38:59.360 --> 00:39:01.840
some old app that's evolved and evolved.


00:39:01.840 --> 00:39:03.440
And there's just stuff people don't take out


00:39:03.440 --> 00:39:04.760
'cause they're afraid to.


00:39:04.760 --> 00:39:05.600
- Yeah.


00:39:05.600 --> 00:39:07.960
- Just run this in production for a while.


00:39:07.960 --> 00:39:09.700
- Once.


00:39:09.700 --> 00:39:10.520
- Oh yeah.


00:39:10.520 --> 00:39:11.360
- And just go, okay,


00:39:11.360 --> 00:39:15.760
don't look like they're doing it. There might be some case I need to track down, but this gray area


00:39:15.760 --> 00:39:20.320
over here that's not touched, let me look for things to delete over here. That'd be kind of fun.


00:39:20.320 --> 00:39:26.560
That's my favorite use of coverage is looking for dead code. Yeah, exactly. Before we move off this,


00:39:26.560 --> 00:39:30.480
Brian, I've already asked, does it have a pytest plugin? I know you said it doesn't work


00:39:30.480 --> 00:39:38.960
to run plugins, but this is the reverse question. I don't think so. You're running


00:39:40.640 --> 00:39:43.040
slipcover and pytest at the same time.


00:39:43.040 --> 00:39:45.540
Don't think you really need a pytest plugin for it.


00:39:45.540 --> 00:39:49.680
It does work with pytest,


00:39:49.680 --> 00:39:54.680
so you can run pytest operations on with it.


00:39:54.680 --> 00:39:56.920
- Nice, just not the bells and whistles yet.


00:39:56.920 --> 00:40:00.240
- Right, but I'm sure they'll get there.


00:40:00.240 --> 00:40:01.080
- Yeah.


00:40:01.080 --> 00:40:04.240
- Neat.


00:40:04.240 --> 00:40:09.880
Yeah, I would love to sort of circle back to the data.


00:40:09.880 --> 00:40:11.960
(laughs)


00:40:11.960 --> 00:40:14.320
I'm afraid to sound like a broken record,


00:40:14.320 --> 00:40:16.680
but that's my favorite topic.


00:40:16.680 --> 00:40:18.280
- No, it's great to have you on to talk about it,


00:40:18.280 --> 00:40:19.880
'cause Brian and I don't live


00:40:19.880 --> 00:40:21.560
in the data science world, right?


00:40:21.560 --> 00:40:23.280
So it's really cool. - Yeah, so that's great.


00:40:23.280 --> 00:40:24.120
- Yeah.


00:40:24.120 --> 00:40:27.320
- Well, you're welcome in our world.


00:40:27.320 --> 00:40:28.200
(laughs)


00:40:28.200 --> 00:40:29.840
There's a lot of fun stuff happening here.


00:40:29.840 --> 00:40:32.040
And well, actually, if you think about it


00:40:32.040 --> 00:40:34.240
from the actual very beginning, right,


00:40:34.240 --> 00:40:37.160
even before trying to wrangle the data


00:40:37.160 --> 00:40:40.580
and trying to infer any interesting information of the data,


00:40:40.580 --> 00:40:42.340
you have to get it somehow.


00:40:42.340 --> 00:40:47.340
And sometimes if you're particularly working


00:40:47.340 --> 00:40:51.600
on some sort of side projects on your own,


00:40:51.600 --> 00:40:54.780
you want to maybe try out a new tool


00:40:54.780 --> 00:40:58.980
or maybe new, if you're doing like a machine learning


00:40:58.980 --> 00:41:01.020
projects on modeling approach,


00:41:01.020 --> 00:41:07.020
you usually need some very specific data to work on.


00:41:07.020 --> 00:41:09.120
And how do you get this data?


00:41:09.120 --> 00:41:12.580
Well, you have to actually go and maybe find some examples


00:41:12.580 --> 00:41:13.740
of the data on your own.


00:41:13.740 --> 00:41:16.860
And so something I wanted to talk about today


00:41:16.860 --> 00:41:19.860
was actually web crawling and web scraping


00:41:19.860 --> 00:41:21.940
and a couple of tools for that.


00:41:21.940 --> 00:41:25.860
So one that is quite popular


00:41:25.860 --> 00:41:29.420
and it's actually like an industrial grade kind of tool


00:41:29.420 --> 00:41:34.420
is well, actually either Scrapy or Scrapy.


00:41:34.940 --> 00:41:37.060
I've heard both variants.


00:41:37.060 --> 00:41:41.560
And it's a pretty great tool.


00:41:41.560 --> 00:41:49.160
So one of the great things like from the get go about


00:41:49.160 --> 00:41:52.980
is that it actually has a built in shell.


00:41:52.980 --> 00:41:56.980
So you can just go ahead and sort of try out things


00:41:56.980 --> 00:42:01.460
in the CLI, get the response from a URL for instance,


00:42:01.460 --> 00:42:06.460
and then try to poke around it and test out its behavior,


00:42:06.460 --> 00:42:07.340
which is really nice,


00:42:07.340 --> 00:42:10.620
and then see what kind of things you might want from there.


00:42:10.620 --> 00:42:15.420
And if you actually sort of go ahead and use it


00:42:15.420 --> 00:42:20.880
for your module to acquire, to get some data rather,


00:42:20.880 --> 00:42:26.460
it provides all sorts of really nice functionalities.


00:42:26.460 --> 00:42:29.700
To begin with, for instance,


00:42:29.700 --> 00:42:33.140
the choice between using either CSS selectors


00:42:33.140 --> 00:42:37.020
for the content of the web pages or an X-Path,


00:42:37.020 --> 00:42:39.980
which is obviously like a little bit more flexible


00:42:39.980 --> 00:42:41.820
and powerful where you can travel.


00:42:41.820 --> 00:42:42.700
- It's more fragile though,


00:42:42.700 --> 00:42:45.300
'cause if they make any change to the page.


00:42:45.300 --> 00:42:46.500
- That also, yeah.


00:42:46.500 --> 00:42:51.060
But still, yeah, well, it's a part of the game.


00:42:51.060 --> 00:42:52.740
- Yeah, that's right.


00:42:52.740 --> 00:42:56.140
- Yeah, and then some other really nice things about it


00:42:56.140 --> 00:42:58.820
is that actually they do a lot of like


00:42:58.820 --> 00:43:01.180
heavy lifting for you in terms of, for instance,


00:43:01.180 --> 00:43:02.020
templating.


00:43:02.020 --> 00:43:07.020
So you can, there's a built-in method for a start project,


00:43:07.020 --> 00:43:11.260
and you can run that and right away you have


00:43:11.260 --> 00:43:15.980
the whole structure and like all sorts of the boilerplate


00:43:15.980 --> 00:43:17.080
kind of code.


00:43:17.080 --> 00:43:20.540
And you just fill in the certain pieces, for instance,


00:43:20.540 --> 00:43:23.940
for item processing, which is in their pipelines modules,


00:43:23.940 --> 00:43:26.220
I think some of the settings, et cetera.


00:43:26.220 --> 00:43:27.540
And there you go.


00:43:27.540 --> 00:43:29.860
you know, it had like a huge amount of work already


00:43:29.860 --> 00:43:33.620
sort of preset for you, pre-done kind of for you.


00:43:33.620 --> 00:43:39.180
And then some other nice things about it


00:43:39.180 --> 00:43:44.100
is that they're also provided with like numerous choices


00:43:44.100 --> 00:43:47.380
actually for exporting the data


00:43:47.380 --> 00:43:50.760
and for storing the data as well in a few places


00:43:50.760 --> 00:43:54.820
and the formats that you would love to use for it.


00:43:54.820 --> 00:43:57.580
sort of like all those typical standard things


00:43:57.580 --> 00:44:01.780
like CSV, JSON, et cetera, to some more,


00:44:01.780 --> 00:44:06.120
some less frequent options, really.


00:44:06.120 --> 00:44:07.660
- Yeah, another thing that's pretty interesting


00:44:07.660 --> 00:44:10.820
about this whole project is that there's a


00:44:10.820 --> 00:44:13.740
web scraping as a service company.


00:44:13.740 --> 00:44:14.700
- Yeah. - Right, right?


00:44:14.700 --> 00:44:19.020
It used to be called Scraping Hub, now it's ZYTE, Z-Y-T-E.


00:44:19.020 --> 00:44:20.060
- ZYTE, yep.


00:44:20.060 --> 00:44:22.580
- You can basically go in there and just, you know,


00:44:22.580 --> 00:44:26.540
sign up and hand out one of these spiders


00:44:26.540 --> 00:44:29.620
and it'll just run it on the different servers,


00:44:29.620 --> 00:44:32.500
try to avoid getting blocked, all that crazy stuff.


00:44:32.500 --> 00:44:33.400
- Exactly, yeah.


00:44:33.400 --> 00:44:37.980
So therefore it's so elaborate


00:44:37.980 --> 00:44:39.620
and they really put a lot of,


00:44:39.620 --> 00:44:40.860
just like I was talking before,


00:44:40.860 --> 00:44:43.500
a lot of love and care to like all of the sorts


00:44:43.500 --> 00:44:47.460
of functionality, like covering all those corners


00:44:47.460 --> 00:44:51.760
of like what you might want from like a web crawling.


00:44:51.760 --> 00:44:59.680
tool. And some other examples that I found particularly useful, for instance, is the


00:44:59.680 --> 00:45:06.360
link extractor class. It's like really getting to like nitty-gritty parts of the tool where


00:45:06.360 --> 00:45:13.240
you can extract further links from a page, but only those ones that, you know, adhere


00:45:13.240 --> 00:45:21.240
to a particular pattern, for instance. And the list that you get is already deduped.


00:45:21.240 --> 00:45:24.400
So once again, like it alleviates so much of, you know,


00:45:24.400 --> 00:45:27.520
the dirty work on your part.


00:45:27.520 --> 00:45:29.440
So that's really great.


00:45:29.440 --> 00:45:33.760
And they do provide actually ways to interact


00:45:33.760 --> 00:45:34.760
with the pages as well.


00:45:34.760 --> 00:45:37.440
There's a form request class that you can use


00:45:37.440 --> 00:45:40.440
and it does provide some functionality


00:45:40.440 --> 00:45:41.760
where you can interact with the page,


00:45:41.760 --> 00:45:45.240
but I haven't used it as much myself.


00:45:45.240 --> 00:45:49.440
So I'm not like entirely sure how fascinating it is.


00:45:50.880 --> 00:45:53.360
but it's probably well done as well.


00:45:53.360 --> 00:46:00.360
And another library that I wanted to touch on briefly


00:46:00.360 --> 00:46:03.640
today as well was Roblox.


00:46:03.640 --> 00:46:06.220
That's actually something new for myself.


00:46:06.220 --> 00:46:10.960
That's something I'm in the process of exploring.


00:46:10.960 --> 00:46:15.960
So I haven't had a chance to work a whole lot with it yet,


00:46:15.960 --> 00:46:19.280
but it seems really, really interesting.


00:46:19.280 --> 00:46:21.920
and I would love, I would be happy if I got to hear


00:46:21.920 --> 00:46:24.520
from somebody else who has tried it out or something.


00:46:24.520 --> 00:46:28.360
Because it, well, in the first place,


00:46:28.360 --> 00:46:33.360
it's built on top of HTTPX and Beautiful Soup,


00:46:33.360 --> 00:46:35.860
Beautiful Soup 4, rather.


00:46:35.860 --> 00:46:38.080
They're super popular in the industry


00:46:38.080 --> 00:46:41.000
in sort of the data processing line of work


00:46:41.000 --> 00:46:45.460
and particularly web crawling and web scraping.


00:46:48.400 --> 00:46:51.700
but it adds some really useful functionalities


00:46:51.700 --> 00:46:55.500
and it looks like it allows even more of this interaction


00:46:55.500 --> 00:47:00.200
with the pages and like very neat and clean way.


00:47:00.200 --> 00:47:04.240
You can probably find examples where you hear,


00:47:04.240 --> 00:47:06.440
yeah, yeah, yeah, in the documentation.


00:47:06.440 --> 00:47:08.900
It looks so, so, you know, nice and clean


00:47:08.900 --> 00:47:11.120
and straightforward, looks lovely.


00:47:11.120 --> 00:47:14.020
So yeah, I'm really excited about this package


00:47:14.020 --> 00:47:19.020
and hoping to have an opportunity to test it out soon.


00:47:19.020 --> 00:47:20.980
- Yeah, Roblox looks very interesting.


00:47:20.980 --> 00:47:23.500
It looks very Selenium like


00:47:23.500 --> 00:47:25.660
where you could actually control the page as well.


00:47:25.660 --> 00:47:27.580
Fill in the comments with this,


00:47:27.580 --> 00:47:30.820
fill in the first name with that and then submit.


00:47:30.820 --> 00:47:31.820
The other thing that's cool about it


00:47:31.820 --> 00:47:34.900
is it has async support for doing all this.


00:47:34.900 --> 00:47:35.740
- Exactly, yeah.


00:47:35.740 --> 00:47:37.140
- And it's scaling as well.


00:47:37.140 --> 00:47:38.900
Yeah, oh, that's fantastic.


00:47:38.900 --> 00:47:40.780
Awesome, man. - Yeah.


00:47:40.780 --> 00:47:41.620
- Thanks.


00:47:43.940 --> 00:47:45.540
- Nice.


00:47:45.540 --> 00:47:46.460
Well, where are we at now?


00:47:46.460 --> 00:47:47.300
We have a--


00:47:47.300 --> 00:47:48.260
- Extras.


00:47:48.260 --> 00:47:49.900
Extra, extra, extra here all about it.


00:47:49.900 --> 00:47:50.740
I only got one.


00:47:50.740 --> 00:47:51.740
How many you got?


00:47:51.740 --> 00:47:52.860
- I got zero.


00:47:52.860 --> 00:47:54.020
- Zero, all right.


00:47:54.020 --> 00:47:57.720
Can I give a quick shout out to you while we're here?


00:47:57.720 --> 00:48:02.660
- No.


00:48:02.660 --> 00:48:03.480
- Okay, cool.


00:48:03.480 --> 00:48:08.480
Well, I wanted to tell you all about my terminal adventures,


00:48:08.480 --> 00:48:10.280
I suppose we'll call them.


00:48:10.280 --> 00:48:13.740
So I've been using OhMyZshell, which is amazing.


00:48:13.740 --> 00:48:15.160
I love all my Z shell.


00:48:15.160 --> 00:48:19.220
But I also started playing with all my posh


00:48:19.220 --> 00:48:21.900
and please and some of these other things.


00:48:21.900 --> 00:48:24.500
And I thought, oh, well, how am I gonna decide


00:48:24.500 --> 00:48:27.180
between say all my posh and all my Z shell?


00:48:27.180 --> 00:48:29.420
Well, it turns out Brian, you don't have to decide


00:48:29.420 --> 00:48:30.260
you get both.


00:48:30.260 --> 00:48:32.960
So here's a little animated video I'll throw up


00:48:32.960 --> 00:48:34.340
for people who are watching


00:48:34.340 --> 00:48:35.740
I'll put it in the links as well.


00:48:35.740 --> 00:48:39.020
So here's, you can see this cool prompt


00:48:39.020 --> 00:48:40.540
which is all driven by all my posh


00:48:40.540 --> 00:48:43.300
but you can see like auto complete into Git,


00:48:43.300 --> 00:48:46.540
local Git branches through OhMyZshell


00:48:46.540 --> 00:48:49.180
for either branch or checkout.


00:48:49.180 --> 00:48:53.180
And then on top of that, we can do like PLS,


00:48:53.180 --> 00:48:54.220
which is amazing.


00:48:54.220 --> 00:48:55.660
You can do, oh, and McFly.


00:48:55.660 --> 00:48:56.900
We talked about McFly before,


00:48:56.900 --> 00:48:58.780
which gives you auto complete into your history


00:48:58.780 --> 00:49:03.780
and sort of a Emacs style editor type of AI complete.


00:49:03.780 --> 00:49:08.180
And then PLS for a LS replacement


00:49:08.180 --> 00:49:11.080
that is developer friendly with like little icons


00:49:11.080 --> 00:49:14.360
for the file types and it uses .gitignore to hide stuff


00:49:14.360 --> 00:49:15.300
that you don't wanna see.


00:49:15.300 --> 00:49:16.520
And it's like Python friendly,


00:49:16.520 --> 00:49:19.600
like understands V and Vs and de-emphasizes them


00:49:19.600 --> 00:49:20.580
and all that kind of stuff.


00:49:20.580 --> 00:49:24.460
So anyway, people have been trying to decide


00:49:24.460 --> 00:49:25.300
between these things.


00:49:25.300 --> 00:49:27.060
It turns out they all go well together.


00:49:27.060 --> 00:49:28.300
You don't have to decide.


00:49:28.300 --> 00:49:30.840
- That's pretty cool.


00:49:30.840 --> 00:49:31.680
- Yeah. - Yeah.


00:49:31.680 --> 00:49:35.020
Yeah, I remember like on my ZSH


00:49:35.020 --> 00:49:37.360
that looks even, yeah.


00:49:37.360 --> 00:49:38.680
- Yeah, and all this stuff works


00:49:38.680 --> 00:49:40.000
and you don't have to give up any of it.


00:49:40.000 --> 00:49:42.080
The only thing that isn't there is the prompt


00:49:42.080 --> 00:49:44.480
and the prompt is not all that great, honestly.


00:49:44.480 --> 00:49:45.520
I know you can customize it,


00:49:45.520 --> 00:49:47.200
but I think it's better on OmaiPosh,


00:49:47.200 --> 00:49:48.360
which is pretty amazing.


00:49:48.360 --> 00:49:49.920
So people who are listening,


00:49:49.920 --> 00:49:52.600
they can check out the little video I'll link to somehow.


00:49:52.600 --> 00:49:55.960
I'll find a way to do that in the show notes


00:49:55.960 --> 00:49:57.360
so you all can check it out.


00:49:57.360 --> 00:49:58.760
Okay, that's my extra.


00:49:58.760 --> 00:50:00.360
Yeah. - Yeah.


00:50:00.360 --> 00:50:01.480
- How about a joke?


00:50:01.480 --> 00:50:02.920
- How about a joke?


00:50:02.920 --> 00:50:07.920
So we're all starting to go back out to dinner,


00:50:07.920 --> 00:50:12.100
restaurants, COVID's over right here, not necessarily,


00:50:12.100 --> 00:50:16.620
but here's one from a slightly different perspective.


00:50:16.620 --> 00:50:18.800
It says, "Hello, I'm your server today."


00:50:18.800 --> 00:50:20.860
Brian, can you just describe for people listening


00:50:20.860 --> 00:50:22.420
what's in this picture?


00:50:22.420 --> 00:50:26.980
- There's two robots at a restaurant sitting down


00:50:26.980 --> 00:50:30.420
and there's like a server rack next to them.


00:50:30.420 --> 00:50:31.260
- Yeah, okay.


00:50:31.260 --> 00:50:34.820
The subtitle is "When You Go Out for a Bite, BYT."


00:50:34.820 --> 00:50:37.860
The server is by the table where the robots are drinking.


00:50:37.860 --> 00:50:42.220
It says, "My name is DHX005972, and I will be your server


00:50:42.220 --> 00:50:44.860
this evening."


00:50:44.860 --> 00:50:46.140
I love this one.


00:50:46.140 --> 00:50:47.900
Thanks.


00:50:47.900 --> 00:50:50.940
All right, that's all I got for us for our joke today.


00:50:50.940 --> 00:50:52.300
Nice.


00:50:52.300 --> 00:50:55.940
Well, thanks, Anna, for joining us today.


00:50:55.940 --> 00:50:57.540
Thank you.


00:50:57.540 --> 00:50:58.900
Thank you for having me.


00:50:58.900 --> 00:50:59.660
Yeah, it was great.


00:50:59.660 --> 00:51:00.860
Thank you, Brian, as always, and everyone


00:51:00.860 --> 00:51:01.700
out there listening.


00:51:01.700 --> 00:51:03.220
Thanks so much.


00:51:03.220 --> 00:51:04.820
- Yep. Have a good one everyone.

