WEBVTT

00:00:00.001 --> 00:00:02.980
>> Hey, Brian.

00:00:02.980 --> 00:00:03.840
>> Hey.

00:00:03.840 --> 00:00:04.920
>> How's it going?

00:00:04.920 --> 00:00:06.240
>> It's going good.

00:00:06.240 --> 00:00:11.040
>> Yeah, awesome, man. It's been a while.

00:00:11.040 --> 00:00:12.240
It's been a few weeks.

00:00:12.240 --> 00:00:14.400
>> We took a little bit of a holiday break. We deserve it.

00:00:14.400 --> 00:00:19.560
>> Yeah, we do deserve it because we've been doing this for a while.

00:00:19.560 --> 00:00:22.440
Yeah, that's good. Let's go ahead and kick this off.

00:00:22.440 --> 00:00:23.880
We can talk more about holiday breaks there.

00:00:23.880 --> 00:00:24.680
>> Okay.

00:00:24.680 --> 00:00:27.800
>> Let's do it. Thanks to everyone who is here.

00:00:27.800 --> 00:00:29.400
Definitely appreciate that.

00:00:29.400 --> 00:00:31.760
>> Hello and welcome to Python Bytes,

00:00:31.760 --> 00:00:35.040
where we deliver Python news and headlines directly to your earbuds.

00:00:35.040 --> 00:00:38.280
This is Episode 366,

00:00:38.280 --> 00:00:41.960
recorded January 9th, 2024.

00:00:41.960 --> 00:00:44.400
Welcome to the new year. I'm Michael Kennedy.

00:00:44.400 --> 00:00:46.000
>> I'm Brian Okken.

00:00:46.000 --> 00:00:48.600
>> Brian, this episode is sponsored by us.

00:00:48.600 --> 00:00:50.700
Support our work by taking our courses,

00:00:50.700 --> 00:00:52.560
the Talk Python training ones,

00:00:52.560 --> 00:00:54.200
the complete pytest course,

00:00:54.200 --> 00:00:56.920
and as well as through our Patreon supporters.

00:00:56.920 --> 00:00:59.560
All those links are at the top of your show notes,

00:00:59.560 --> 00:01:02.200
in your podcast player, episode page, and so on.

00:01:02.200 --> 00:01:04.760
Connect with us over on Mastodon.

00:01:04.760 --> 00:01:07.960
You'll find us all on Fosstodon.

00:01:07.960 --> 00:01:12.720
That's right. Michael, Brian, and the show.

00:01:12.720 --> 00:01:16.160
It has its own pronouns and gets thrown in the group,

00:01:16.160 --> 00:01:17.680
and it's its own website and all that.

00:01:17.680 --> 00:01:20.320
Come see Python Bytes over there as well.

00:01:20.320 --> 00:01:23.840
If you want to be part of the live stream, you're welcome.

00:01:23.840 --> 00:01:27.280
That's certainly not required to take part and enjoy the show.

00:01:27.280 --> 00:01:28.520
But if you want to be part of the live stream,

00:01:28.520 --> 00:01:30.680
pythonbytes.fm/live.

00:01:30.680 --> 00:01:33.760
Usually, you'll see some scheduled upcoming one.

00:01:33.760 --> 00:01:36.360
You can click, you can smash the bell,

00:01:36.360 --> 00:01:39.120
crush the subscribe, all the things they say over there.

00:01:39.120 --> 00:01:41.760
But Brian, it's been a while.

00:01:41.760 --> 00:01:43.160
Welcome back to the show.

00:01:43.160 --> 00:01:44.600
>> It has been a while.

00:01:44.600 --> 00:01:46.480
I'm excited to be back.

00:01:46.480 --> 00:01:51.860
>> I am too. Thanks everyone for being patient with us

00:01:51.860 --> 00:01:54.720
while we took a little break over the winter break.

00:01:54.720 --> 00:01:58.160
It's always a little bit tricky to juggle that stuff,

00:01:58.160 --> 00:02:01.800
especially Brian, when you're on a beach and it's 80 degrees

00:02:01.800 --> 00:02:05.480
Fahrenheit or 20 degrees Celsius, 22, something like that.

00:02:05.480 --> 00:02:07.240
It was a windy day.

00:02:07.240 --> 00:02:10.080
There was one day it was windy, it was rough.

00:02:10.080 --> 00:02:12.280
>> I'm really sorry about that.

00:02:12.280 --> 00:02:16.040
>> Thank you. I appreciate your indulgences.

00:02:16.040 --> 00:02:21.400
>> Brian, can we maybe skip this episode because I'm in

00:02:21.400 --> 00:02:25.520
Hawaii hanging out on the beach, sipping drinks.

00:02:25.520 --> 00:02:27.440
>> It was lovely. It's good to get away,

00:02:27.440 --> 00:02:29.920
but it's also really good to be back.

00:02:29.920 --> 00:02:32.000
>> I missed you.

00:02:32.000 --> 00:02:36.280
>> Yeah, I missed you too and everyone missed the audience.

00:02:36.280 --> 00:02:41.840
Shall we get it off for 2024? Let's get it.

00:02:41.840 --> 00:02:43.960
>> Let's get started.

00:02:43.960 --> 00:02:46.280
>> Let's get started.

00:02:46.280 --> 00:02:51.120
>> Anthony, one of the things that's possibly,

00:02:51.120 --> 00:02:55.360
hopefully coming into Python 3.13,

00:02:55.360 --> 00:02:57.760
sorry, we're not all the way up to Python 13 yet.

00:02:57.760 --> 00:03:02.800
We're still in 3.13, is a JIT compiler.

00:03:02.800 --> 00:03:10.200
Because of Java and other languages,

00:03:10.200 --> 00:03:11.760
I'm familiar with JIT compilers,

00:03:11.760 --> 00:03:13.920
but Python is going to be a little different.

00:03:13.920 --> 00:03:16.160
Anthony Shaw was kind enough to write

00:03:16.160 --> 00:03:19.520
up a article walking through it.

00:03:19.520 --> 00:03:22.640
It's a really nice. There's a couple of things that I

00:03:22.640 --> 00:03:24.760
recommend reading it if you don't

00:03:24.760 --> 00:03:27.280
really know what a JIT compiler is,

00:03:27.280 --> 00:03:29.000
or if like me,

00:03:29.000 --> 00:03:31.800
you didn't know what a copy and paste JIT compiler,

00:03:31.800 --> 00:03:34.640
or JIT whatever implementation is.

00:03:34.640 --> 00:03:37.240
That's where he goes with this.

00:03:37.240 --> 00:03:40.560
He starts off talking about really what a JIT is,

00:03:40.560 --> 00:03:44.040
and really it's something that basically

00:03:44.040 --> 00:03:48.400
generates your compiled code.

00:03:48.400 --> 00:03:51.000
For a lot of times, it's compiled code, machine code.

00:03:51.000 --> 00:03:56.400
But for Python, it's going to be not the compiled code,

00:03:56.400 --> 00:03:59.040
but the bytecode. Getting the bytecode ready,

00:03:59.040 --> 00:04:01.520
I think, I may have gotten this wrong.

00:04:01.520 --> 00:04:07.960
But he walks through what a compiler is,

00:04:07.960 --> 00:04:13.960
or a JIT compiler is as if you were writing it in Python.

00:04:13.960 --> 00:04:17.000
He goes through a little example of making

00:04:17.000 --> 00:04:20.640
your own Python version of the CPython interpreter,

00:04:20.640 --> 00:04:22.200
which is actually written in C.

00:04:22.200 --> 00:04:23.640
But if you were to write in Python,

00:04:23.640 --> 00:04:24.680
it might look like this,

00:04:24.680 --> 00:04:29.640
like switching on opcode of load constant, things like that.

00:04:29.640 --> 00:04:32.880
You can see what those primitives are by using

00:04:32.880 --> 00:04:39.040
the DIS module for disassembler, and that's fun.

00:04:39.040 --> 00:04:41.760
Then he walks through,

00:04:41.760 --> 00:04:46.880
so that's what a JIT compiler might be.

00:04:46.880 --> 00:04:49.960
What is a copy and patch JIT compiler,

00:04:49.960 --> 00:04:52.480
not copy and paste, copy and patch.

00:04:52.480 --> 00:04:57.120
That's a little bit more harder to describe over audio,

00:04:57.120 --> 00:05:03.040
but Anthony does a really good job describing it.

00:05:03.040 --> 00:05:06.720
Then talking about really this thing,

00:05:06.720 --> 00:05:09.840
instead of copying a piece and then running it,

00:05:09.840 --> 00:05:11.960
it copies more than one bit,

00:05:11.960 --> 00:05:14.960
like the entire function and then running the whole thing.

00:05:14.960 --> 00:05:17.160
It's a little bit faster.

00:05:17.160 --> 00:05:19.840
Then we're going to do something like that.

00:05:19.840 --> 00:05:22.000
It's going to be something like that for Python

00:05:22.000 --> 00:05:26.560
inside of the Python C interpreter.

00:05:26.560 --> 00:05:31.880
It's just a good walkthrough to understand what is going on,

00:05:31.880 --> 00:05:34.280
what are these people doing and why.

00:05:34.280 --> 00:05:37.680
The why is it's going to be a couple of things.

00:05:37.680 --> 00:05:39.760
It's going to be faster.

00:05:39.760 --> 00:05:45.080
There's some benchmarks that show it's from 2-9 percent faster,

00:05:45.080 --> 00:05:46.960
which is great. Actually,

00:05:46.960 --> 00:05:49.640
anytime you can make things a little faster, it's good.

00:05:49.640 --> 00:05:52.040
But is it worth it for this?

00:05:52.040 --> 00:05:56.160
It's worth it for this partly because mostly it doesn't make it slower,

00:05:56.160 --> 00:05:57.280
which is the good part.

00:05:57.280 --> 00:06:00.280
Because of this JIT compiler,

00:06:00.280 --> 00:06:02.320
there's other tricks that they can

00:06:02.320 --> 00:06:05.200
do down the line to make things a lot faster.

00:06:05.200 --> 00:06:07.520
>> This is great news and a good explanation.

00:06:07.520 --> 00:06:12.800
>> It's super exciting. You're on top of the news today, Brian.

00:06:12.800 --> 00:06:14.960
This came out this morning.

00:06:14.960 --> 00:06:18.080
Well done. This is brand new from Anthony Shaw.

00:06:18.080 --> 00:06:24.560
Anthony, excellent work writing this up and all the things.

00:06:24.560 --> 00:06:30.200
One part that's interesting is 2-9 percent is great.

00:06:30.200 --> 00:06:32.960
That's still really good to make things faster.

00:06:32.960 --> 00:06:33.520
>> Yeah.

00:06:33.520 --> 00:06:37.920
>> But he also points out that this is just the foundation.

00:06:37.920 --> 00:06:39.920
Once you have a JIT,

00:06:39.920 --> 00:06:44.000
there's all kinds of interesting things that JITs can do on

00:06:44.000 --> 00:06:49.200
a per hardware architecture per platform story.

00:06:49.200 --> 00:06:51.080
They can say, "Well, you wrote this code,

00:06:51.080 --> 00:06:58.240
but I know we have these specific specialized machines instructions on this CPU.

00:06:58.240 --> 00:06:59.480
Let's make it do that."

00:06:59.480 --> 00:07:02.720
Or I see that you could actually inline this function.

00:07:02.720 --> 00:07:04.080
Instead of just make it run faster,

00:07:04.080 --> 00:07:06.600
we could inline it over here and here and here,

00:07:06.600 --> 00:07:08.880
and then function calls in Python are expensive.

00:07:08.880 --> 00:07:11.760
Maybe they just become not function calls.

00:07:11.760 --> 00:07:14.840
There's a lot of possibility for where things go.

00:07:14.840 --> 00:07:17.360
It would be interesting, I wonder,

00:07:17.360 --> 00:07:23.440
if you could even do things like compile stuff to C,

00:07:23.440 --> 00:07:26.320
and you see optimizations as part of the JIT compiler.

00:07:26.320 --> 00:07:30.000
Maybe there's a bunch of layers that could happen.

00:07:30.000 --> 00:07:31.920
I don't know. But yeah, basically,

00:07:31.920 --> 00:07:35.160
this is a foot in the door for

00:07:35.160 --> 00:07:38.520
compiler optimizations that we've not had before in Python.

00:07:38.520 --> 00:07:41.240
>> Yeah. It's pretty exciting.

00:07:41.240 --> 00:07:46.520
>> Excellent. The future is bright.

00:07:46.520 --> 00:07:50.120
Also, compounding is interesting.

00:07:50.120 --> 00:07:52.360
We're supposed to get Python much,

00:07:52.360 --> 00:07:58.080
much faster by making it a little bit faster over five years continuously.

00:07:58.080 --> 00:08:00.320
This is just part of that.

00:08:00.320 --> 00:08:03.040
You keep adding these things up and the Python,

00:08:03.040 --> 00:08:05.200
I don't know, 3, 14, 15,

00:08:05.200 --> 00:08:09.320
versus 3.10 when they started could be super, super different.

00:08:09.320 --> 00:08:10.720
>> Yeah.

00:08:10.720 --> 00:08:14.920
>> All right. I hope people like deploying, packaging,

00:08:14.920 --> 00:08:17.320
bundling, talking about managing

00:08:17.320 --> 00:08:19.400
your projects because that's all I got this week.

00:08:19.400 --> 00:08:20.880
I got one after another.

00:08:20.880 --> 00:08:26.200
Let's start out with this Mastodon post by Bas Nijholt.

00:08:26.200 --> 00:08:30.080
Bas says, "We're launching Unidep,

00:08:30.080 --> 00:08:36.000
which is a unified Conda and pip dependency management system."

00:08:36.000 --> 00:08:38.200
We've got the Conda world,

00:08:38.200 --> 00:08:39.480
we've got the pip world.

00:08:39.480 --> 00:08:41.320
Sometimes they work together,

00:08:41.320 --> 00:08:43.920
but they're pulling from different sources.

00:08:43.920 --> 00:08:47.760
You can, in a Conda virtual environment,

00:08:47.760 --> 00:08:49.120
you could pip install a thing,

00:08:49.120 --> 00:08:50.840
I believe, and it would still install.

00:08:50.840 --> 00:08:52.160
But here's the deal.

00:08:52.160 --> 00:08:55.680
You can create a single requirements.yaml file and say,

00:08:55.680 --> 00:08:58.040
I depend on these different projects.

00:08:58.040 --> 00:09:00.160
Those two come from Conda,

00:09:00.160 --> 00:09:01.560
Conda Forge or something.

00:09:01.560 --> 00:09:03.640
These three come from PIP,

00:09:03.640 --> 00:09:06.360
PyPI. Interesting.

00:09:06.360 --> 00:09:08.760
>> I'm actually excited about this.

00:09:08.760 --> 00:09:09.880
This is very interesting.

00:09:09.880 --> 00:09:11.280
>> Yeah, it's super interesting. It works with

00:09:11.280 --> 00:09:14.040
pyproject.toml and setup.py.

00:09:14.040 --> 00:09:17.160
It also is good for monorepos.

00:09:17.160 --> 00:09:18.680
Why is this good for monorepos?

00:09:18.680 --> 00:09:24.960
Monorepos are, I don't want to have to switch projects.

00:09:24.960 --> 00:09:28.040
I don't want to have to switch projects on GitHub.

00:09:28.040 --> 00:09:30.640
I just want one ginormous one for a whole company.

00:09:30.640 --> 00:09:32.360
Let's just have one,

00:09:32.360 --> 00:09:35.120
which is an insane way of working,

00:09:35.120 --> 00:09:36.680
but it's also pretty interesting.

00:09:36.680 --> 00:09:37.880
I've got two libraries,

00:09:37.880 --> 00:09:38.960
they depend on each other.

00:09:38.960 --> 00:09:40.960
It's just all on the same project structure.

00:09:40.960 --> 00:09:43.680
You just version them together.

00:09:43.680 --> 00:09:47.920
But that's literally every project for your company.

00:09:47.920 --> 00:09:50.840
There's different teams potentially

00:09:50.840 --> 00:09:52.480
working with different versions,

00:09:52.480 --> 00:09:53.520
doing different things.

00:09:53.520 --> 00:09:57.320
There's some web API folks,

00:09:57.320 --> 00:09:59.600
and the web API folks are maybe PIP,

00:09:59.600 --> 00:10:01.680
and the data science folks are Conda.

00:10:01.680 --> 00:10:05.120
Here you could express all of the requirements for

00:10:05.120 --> 00:10:07.400
the different projects

00:10:07.400 --> 00:10:09.120
through these different sources.

00:10:09.120 --> 00:10:11.240
Some might be Conda, some might be PIP,

00:10:11.240 --> 00:10:14.600
but here's one way to express it.

00:10:14.600 --> 00:10:16.200
Also, it'll create

00:10:16.200 --> 00:10:19.400
consistent Conda lock files for multiple projects.

00:10:19.400 --> 00:10:21.680
It has platform support,

00:10:21.680 --> 00:10:25.960
and you can just uni-dep install if you want.

00:10:25.960 --> 00:10:27.640
That's pretty cool.

00:10:27.640 --> 00:10:31.720
Looking over at the GitHub here,

00:10:31.720 --> 00:10:34.240
honestly, pretty much it's the same thing.

00:10:34.240 --> 00:10:36.960
But it shows you some examples of how you

00:10:36.960 --> 00:10:42.760
might express what is a Conda dependency,

00:10:42.760 --> 00:10:44.480
what is a pip dependency.

00:10:44.480 --> 00:10:46.320
In your requirements.aml,

00:10:46.320 --> 00:10:48.120
you just have dependencies.

00:10:48.120 --> 00:10:50.360
Let's just say NumPy or you'd say

00:10:50.360 --> 00:10:53.000
conda colon Python graph is,

00:10:53.000 --> 00:10:55.240
or you'd say pip colon graph is,

00:10:55.240 --> 00:10:57.840
if you wanted that one and so on.

00:10:57.840 --> 00:11:01.320
Look at this, you can even include other.

00:11:01.320 --> 00:11:04.640
You have nested requirements.yaml,

00:11:04.640 --> 00:11:06.360
which maybe talks to

00:11:06.360 --> 00:11:08.240
the monorepo type of thing or

00:11:08.240 --> 00:11:11.800
multiple projects just in one repository.

00:11:11.800 --> 00:11:14.520
This thing actually requires these four other things.

00:11:14.520 --> 00:11:15.960
This is even interesting.

00:11:15.960 --> 00:11:17.480
We're talking about courses,

00:11:17.480 --> 00:11:18.760
and I know you're going to mention something about

00:11:18.760 --> 00:11:20.840
your course later.

00:11:20.840 --> 00:11:24.160
This actually would be really nice for courses as well to do.

00:11:24.160 --> 00:11:25.960
I suspect you probably could do with PIP.

00:11:25.960 --> 00:11:27.880
It never crossed my mind.

00:11:27.880 --> 00:11:29.640
I might have chapter 1,

00:11:29.640 --> 00:11:31.200
let's do FastAPI stuff.

00:11:31.200 --> 00:11:34.440
Chapter 2, let's add Beanie and MongoDB.

00:11:34.440 --> 00:11:36.120
Those have different requirements files,

00:11:36.120 --> 00:11:37.840
and you might want to just be able to express,

00:11:37.840 --> 00:11:40.400
well, just run this one.

00:11:40.400 --> 00:11:42.640
Just run this thing,

00:11:42.640 --> 00:11:44.040
you have everything you need for the course,

00:11:44.040 --> 00:11:45.840
but you also want to not

00:11:45.840 --> 00:11:47.960
talk about everything before you get to it.

00:11:47.960 --> 00:11:50.760
You could have one at the top of your course repository,

00:11:50.760 --> 00:11:53.200
and then every chapter have its own one of these,

00:11:53.200 --> 00:11:55.920
and then just pull them together with this.

00:11:55.920 --> 00:11:57.120
>> Oh, interesting.

00:11:57.120 --> 00:11:57.800
>> That's cool, right?

00:11:57.800 --> 00:11:59.240
>> Yeah, I've never thought to do that.

00:11:59.240 --> 00:12:02.560
>> I haven't either, but I've just been copying that stuff around.

00:12:02.560 --> 00:12:04.760
Seems like I shouldn't do that really.

00:12:04.760 --> 00:12:10.400
Awesome though. Yeah, so UniDep, it's brand new.

00:12:10.400 --> 00:12:14.160
I don't know if this thing is going to take off and be super,

00:12:14.160 --> 00:12:16.680
super popular or if it's going to be niche,

00:12:16.680 --> 00:12:19.880
but it seems like it's solving a unique problem.

00:12:19.880 --> 00:12:22.880
It really is a time of 1,000 flowers

00:12:22.880 --> 00:12:26.880
blooming in the packaging and dependency managing space.

00:12:26.880 --> 00:12:28.320
Previously, we talked about Hatch.

00:12:28.320 --> 00:12:30.200
I have more to say about Hatch later as well.

00:12:30.200 --> 00:12:32.200
>> Do you remember, did you say that

00:12:32.200 --> 00:12:36.000
you can use a pyproject.toml instead of a YAML?

00:12:36.000 --> 00:12:36.680
>> Yes, you can.

00:12:36.680 --> 00:12:37.000
>> Okay.

00:12:37.000 --> 00:12:38.520
>> Yes.

00:12:38.520 --> 00:12:43.320
>> Because there's already enough YAML in my life.

00:12:43.320 --> 00:12:47.080
>> Yeah, you can use a pyproject.toml.

00:12:47.080 --> 00:12:47.440
>> Cool.

00:12:47.440 --> 00:12:49.560
>> Alternatively, one can configure the dependencies in

00:12:49.560 --> 00:12:53.720
the pyproject.toml under the tool.uni-dep section.

00:12:53.720 --> 00:12:54.800
>> All right, nice.

00:12:54.800 --> 00:12:55.280
>> There you go.

00:12:55.280 --> 00:12:56.600
>> Yeah.

00:12:56.600 --> 00:13:01.520
>> Well, over to you.

00:13:01.520 --> 00:13:04.440
>> Well, like a lot of people,

00:13:04.440 --> 00:13:08.280
I've been doing some work over the holiday break,

00:13:08.280 --> 00:13:11.480
since we also took a break from podcasting a bit.

00:13:11.480 --> 00:13:14.200
I've been doing some open-source work.

00:13:14.200 --> 00:13:19.120
This is timely because I ran into some problems

00:13:19.120 --> 00:13:25.160
with pull requests and wanting changes in pull requests,

00:13:25.160 --> 00:13:30.280
and having some of the problems with if somebody does

00:13:30.280 --> 00:13:35.840
a pull request and their fork is on main instead of on a branch.

00:13:35.840 --> 00:13:38.880
It causes problems.

00:13:38.880 --> 00:13:43.400
Instead of having to write this up as to why you should not do

00:13:43.400 --> 00:13:47.160
this, Henik beat me to the punch and wrote this great article

00:13:47.160 --> 00:13:50.840
saying, "Don't start pull requests from your main branch."

00:13:50.840 --> 00:13:56.800
It's tempting. When I first started using Git at work,

00:13:56.800 --> 00:14:00.920
even at work, personally,

00:14:00.920 --> 00:14:02.480
when I started using Git,

00:14:02.480 --> 00:14:06.200
I just used main and I just had one branch.

00:14:06.200 --> 00:14:09.080
That's no big deal with my own stuff.

00:14:09.080 --> 00:14:12.480
With a team, we had to decide,

00:14:12.480 --> 00:14:15.720
were we going to use branches or forks?

00:14:15.720 --> 00:14:19.400
Possibly not both, but you can use both.

00:14:19.400 --> 00:14:21.720
In open-source, it's common to use both.

00:14:21.720 --> 00:14:27.320
What we mean is you fork the repository and you create a branch.

00:14:27.320 --> 00:14:29.040
Why do you do both?

00:14:29.040 --> 00:14:31.000
Because it seems like if you're going to make a change,

00:14:31.000 --> 00:14:32.440
you just need one or the other,

00:14:32.440 --> 00:14:34.960
and you can't do a branch because you don't have permission.

00:14:34.960 --> 00:14:36.320
You do a fork.

00:14:36.320 --> 00:14:39.760
But you do both a fork and a branch for reasons,

00:14:39.760 --> 00:14:42.440
and the reasons are spelled out here.

00:14:42.440 --> 00:14:46.320
First, if you didn't do that,

00:14:46.320 --> 00:14:50.920
he's giving the reasons in the sense of if you did main instead.

00:14:50.920 --> 00:14:53.920
Why that's bad is first,

00:14:53.920 --> 00:14:56.320
you can only do one pull request at a time.

00:14:56.320 --> 00:14:58.320
If you were going to do your pull request off of

00:14:58.320 --> 00:15:02.000
your main branch and it's not been accepted yet,

00:15:02.000 --> 00:15:06.920
well, you can't go and do another pull request for a different change.

00:15:06.920 --> 00:15:10.760
You can't do another fix because you've already used up your main.

00:15:10.760 --> 00:15:13.080
Whereas if you do a branch off of that,

00:15:13.080 --> 00:15:14.640
you can have as many fixes as you want.

00:15:14.640 --> 00:15:16.000
That's reason number 1.

00:15:16.000 --> 00:15:17.600
But people might think,

00:15:17.600 --> 00:15:19.280
I don't care about multiple stuff,

00:15:19.280 --> 00:15:21.040
I'm just fixing the one thing I care about.

00:15:21.040 --> 00:15:28.880
Great. Somebody on the other end is going to have to review it,

00:15:28.880 --> 00:15:30.640
maybe ask you for changes,

00:15:30.640 --> 00:15:35.080
to maybe merge it even. That's great.

00:15:35.080 --> 00:15:38.520
If they end up merging your pull request, that's awesome.

00:15:38.520 --> 00:15:42.400
But what happens then is that branch will have changes of

00:15:42.400 --> 00:15:49.680
both the mainline and your branch all in this branch, your main branch.

00:15:49.680 --> 00:15:52.400
Now that has conflicts and you're not able to

00:15:52.400 --> 00:15:57.200
pull it back to your local repository, so pulls won't work.

00:15:57.200 --> 00:15:59.920
I don't know what you do at that point,

00:15:59.920 --> 00:16:02.040
you blow away your fork and start over.

00:16:02.040 --> 00:16:04.920
>> You delete your repository and you start over.

00:16:04.920 --> 00:16:07.760
>> Yeah, lame.

00:16:07.760 --> 00:16:14.240
The third reason is the pragmatic one of getting something done.

00:16:14.240 --> 00:16:19.280
This is the one that bit me a couple of weeks ago.

00:16:19.280 --> 00:16:22.880
There's two reasons.

00:16:22.880 --> 00:16:25.480
I might be messing this up.

00:16:25.480 --> 00:16:32.400
But if you have it on main and you have branch protection on,

00:16:32.400 --> 00:16:33.720
which a lot of repos do,

00:16:33.720 --> 00:16:36.400
a lot of big open-source projects,

00:16:36.400 --> 00:16:38.760
the main is locked down.

00:16:38.760 --> 00:16:48.640
Allow edits from maintainers is meaningless at that point.

00:16:48.640 --> 00:16:53.480
Because what I want to do is if somebody does a pull request and I want to accept it,

00:16:53.480 --> 00:16:57.120
but there's a minor change to it that I want to tweak it,

00:16:57.120 --> 00:17:01.000
maybe the naming convention is wrong and it's not a big deal,

00:17:01.000 --> 00:17:04.680
I can just change it before I merge the pull request.

00:17:04.680 --> 00:17:07.720
You can't. If that's locked down,

00:17:07.720 --> 00:17:14.320
the person pulling it into their repository can't do that edit.

00:17:14.320 --> 00:17:18.680
It's just not nice and it's not fun.

00:17:18.680 --> 00:17:21.560
Just remember to do fork and branch,

00:17:21.560 --> 00:17:23.200
don't do just fork.

00:17:23.200 --> 00:17:27.760
That's the public service announcement for today.

00:17:27.760 --> 00:17:31.320
>> Yeah. Fork is required because a lot of times you don't

00:17:31.320 --> 00:17:34.840
have write access to the main repo contributor access.

00:17:34.840 --> 00:17:41.480
But doing it from the main branch instead of some other one is,

00:17:41.480 --> 00:17:44.560
yeah, you only learn that that's a bad idea when you do it.

00:17:44.560 --> 00:17:45.640
Then you're like, "Oh, no.

00:17:45.640 --> 00:17:48.640
Now what?" I've done that once or twice.

00:17:48.640 --> 00:17:50.160
I'm like, "I'm going to make a change and do

00:17:50.160 --> 00:17:51.960
a pull request and submit it."

00:17:51.960 --> 00:17:53.440
What if they don't accept it?

00:17:53.440 --> 00:17:55.440
Then your main is out of sync forever.

00:17:55.440 --> 00:17:57.800
You can never sync your fork up again.

00:17:57.800 --> 00:18:00.080
There's just all sorts of problems.

00:18:00.080 --> 00:18:02.360
>> Even if there's no ugliness there,

00:18:02.360 --> 00:18:06.040
let's say there's, and this has happened to me many times.

00:18:06.040 --> 00:18:09.960
Somebody wants to merge your stuff in,

00:18:09.960 --> 00:18:11.920
but they're merging other things too,

00:18:11.920 --> 00:18:14.080
and maybe they grabbed a few other things first.

00:18:14.080 --> 00:18:18.000
Now they really would like to have the merge from yours be

00:18:18.000 --> 00:18:20.680
really clean and just see the changes.

00:18:20.680 --> 00:18:25.960
The great thing to do is to merge the new main to your new main,

00:18:25.960 --> 00:18:27.760
and then resolve it with

00:18:27.760 --> 00:18:32.520
your forked branch first before going all the way back.

00:18:32.520 --> 00:18:34.960
If you don't have that, it just doesn't work.

00:18:34.960 --> 00:18:38.760
>> Yeah, that's a good point too. Indeed.

00:18:38.760 --> 00:18:42.320
Let's get back to deployment.

00:18:42.320 --> 00:18:42.720
>> Okay.

00:18:42.720 --> 00:18:44.320
>> This one's different.

00:18:44.320 --> 00:18:51.640
This is a little bit of a web 2.0 name installed,

00:18:51.640 --> 00:18:59.040
but zero vowels installed in STLD.

00:18:59.040 --> 00:19:01.560
This is an interesting project.

00:19:01.560 --> 00:19:03.440
When I first saw it,

00:19:03.440 --> 00:19:06.400
I was like, "This seems like a bad idea.

00:19:06.400 --> 00:19:08.200
I don't know. This seems like just a bad idea.

00:19:08.200 --> 00:19:09.480
Let's not do this."

00:19:09.480 --> 00:19:12.080
Then people kept recommending it and saying stuff like,

00:19:12.080 --> 00:19:14.920
"You know what actually, that's cool actually."

00:19:14.920 --> 00:19:17.200
Here's the deal. Previously,

00:19:17.200 --> 00:19:19.920
what we talked about is the right way.

00:19:19.920 --> 00:19:22.760
You're going to create your requirements,

00:19:22.760 --> 00:19:25.120
your dependencies, you're going to have pinned versions,

00:19:25.120 --> 00:19:26.360
you're going to have lock files.

00:19:26.360 --> 00:19:27.920
Someone is going to create

00:19:27.920 --> 00:19:30.760
a virtual environment or a Docker container or something like that.

00:19:30.760 --> 00:19:34.600
Then you're going to install all of those things.

00:19:34.600 --> 00:19:38.640
Great. What if you don't?

00:19:38.640 --> 00:19:43.000
Brian, what if you have a single.py file you want to give to

00:19:43.000 --> 00:19:46.840
somebody and you want to just let them run it?

00:19:46.840 --> 00:19:51.600
But it needs one or two dependencies.

00:19:51.600 --> 00:19:55.880
Maybe you really want to use rich

00:19:55.880 --> 00:19:58.560
because Will's project is awesome and you

00:19:58.560 --> 00:20:01.640
just don't want it to look plain white,

00:20:01.640 --> 00:20:04.480
unformatted, you want it to look good.

00:20:04.480 --> 00:20:06.400
You want to be able to handle one of

00:20:06.400 --> 00:20:08.560
your coworkers or somebody else one of these things.

00:20:08.560 --> 00:20:11.360
Say, just run it. Well,

00:20:11.360 --> 00:20:13.760
just run it becomes all of a sudden a conversation

00:20:13.760 --> 00:20:15.640
about virtual environments and all these things.

00:20:15.640 --> 00:20:16.920
You're like, "Ah, geez,

00:20:16.920 --> 00:20:19.400
just want to format it just a little.

00:20:19.400 --> 00:20:20.760
Could we somehow?"

00:20:20.760 --> 00:20:25.120
Well, installed is aiming to solve that problem.

00:20:25.120 --> 00:20:28.760
It's not like a high-end production thing.

00:20:28.760 --> 00:20:32.560
It's a, let me be able to pass a file around without going

00:20:32.560 --> 00:20:36.640
through the whole process of like pi installer.

00:20:36.640 --> 00:20:38.680
Because like, "Well, geez, I made it exe for you.

00:20:38.680 --> 00:20:39.600
That's right, you're on Windows.

00:20:39.600 --> 00:20:40.840
Let me recompile it."

00:20:40.840 --> 00:20:42.520
Like, "Okay, great. No."

00:20:42.520 --> 00:20:45.840
Here's the deal. It lets you

00:20:45.840 --> 00:20:49.440
run Python code without installing the dependencies,

00:20:49.440 --> 00:20:51.160
without mentioning the dependencies,

00:20:51.160 --> 00:20:56.440
without having any awareness said dependencies so exist.

00:20:56.440 --> 00:20:59.800
With one huge caveat,

00:20:59.800 --> 00:21:04.120
and that's you must have installed, installed.

00:21:04.760 --> 00:21:06.960
Once this thing is there,

00:21:06.960 --> 00:21:09.040
it can then bootstrap everything else.

00:21:09.040 --> 00:21:10.920
So maybe like if this was a thing you were

00:21:10.920 --> 00:21:13.160
doing with your co-worker story, I said like, "Okay,

00:21:13.160 --> 00:21:17.000
well, everyone pip install dash dash

00:21:17.000 --> 00:21:22.680
user installed or pip x installed or something like that."

00:21:22.680 --> 00:21:25.440
But once that's there, then you can run and use

00:21:25.440 --> 00:21:29.480
arbitrary things from PyPI without having them installed,

00:21:29.480 --> 00:21:31.120
or requirements file, or going through a step.

00:21:31.120 --> 00:21:35.080
It'd be just Python space, your thing, off it goes.

00:21:35.080 --> 00:21:40.440
Also, if you are in a really weird situation where you had to do it,

00:21:40.440 --> 00:21:43.920
you could use two versions of the same library package

00:21:43.920 --> 00:21:47.520
within a single execution of a program.

00:21:47.520 --> 00:21:50.240
Interesting. Which you might do that

00:21:50.240 --> 00:21:53.080
because you have incompatible libraries.

00:21:53.080 --> 00:21:56.880
Like I've talked before about there are times where I

00:21:56.880 --> 00:22:01.400
literally cannot pip install dash r, my requirements.

00:22:01.400 --> 00:22:03.440
It's just like, "Nope."

00:22:03.440 --> 00:22:06.880
This old janky version of some library,

00:22:06.880 --> 00:22:09.040
it's pinned less than something else,

00:22:09.040 --> 00:22:11.600
some other library, and then another library

00:22:11.600 --> 00:22:13.680
is greater than that same library.

00:22:13.680 --> 00:22:16.040
Well, modern pip just says,

00:22:16.040 --> 00:22:18.640
"Guess we can't run your program, take a hike."

00:22:18.640 --> 00:22:21.840
This would let you say,

00:22:21.840 --> 00:22:24.280
this part of the code uses the old janky thing.

00:22:24.280 --> 00:22:28.400
Let's use it and then get rid of it and then go back and use another.

00:22:28.400 --> 00:22:31.880
It also doesn't leave behind junk on your hard drive.

00:22:31.880 --> 00:22:33.480
It basically deletes everything.

00:22:33.480 --> 00:22:35.480
How does this thing work?

00:22:35.480 --> 00:22:39.840
Basically, in your code,

00:22:39.840 --> 00:22:43.280
you can say you have to import installed,

00:22:43.280 --> 00:22:45.280
and then you use a context managing,

00:22:45.280 --> 00:22:48.280
say with installed some package.

00:22:48.280 --> 00:22:51.880
Within that context manager,

00:22:51.880 --> 00:22:53.680
you have access to that.

00:22:53.680 --> 00:22:59.600
Pretty wild. Basically, that context manager

00:22:59.600 --> 00:23:01.440
will make sure that it's installed on your system.

00:23:01.440 --> 00:23:03.680
It'll download it, all those things,

00:23:03.680 --> 00:23:07.200
and then presumably when it closes, it'll delete it.

00:23:07.200 --> 00:23:10.600
You can also do it as a REPL.

00:23:10.600 --> 00:23:13.440
You can interact with,

00:23:13.440 --> 00:23:15.120
just like the Python REPL,

00:23:15.120 --> 00:23:17.000
you can interact with it that way.

00:23:17.000 --> 00:23:19.080
You can run a script.

00:23:19.080 --> 00:23:21.400
You can say installed some script,

00:23:21.400 --> 00:23:27.920
and then it'll be executed as if you are running it like regular Python.

00:23:27.920 --> 00:23:34.800
But you can also pass in dependencies that it might need to run it.

00:23:34.800 --> 00:23:37.280
Check this out. If your program has imports of

00:23:37.280 --> 00:23:39.560
any packages other than the built-in ones,

00:23:39.560 --> 00:23:42.120
they'll be installed automatically.

00:23:42.120 --> 00:23:45.800
You just say installed some Python file and it goes,

00:23:45.800 --> 00:23:46.920
"Oh, you're saying import this stuff.

00:23:46.920 --> 00:23:49.160
You import HTTPX."

00:23:49.160 --> 00:23:50.880
>> Hopefully, you got the names right.

00:23:50.880 --> 00:23:54.560
>> Yeah, exactly. Yeah.

00:23:54.560 --> 00:23:59.000
Anyway, you can do a bunch of more advanced stuff you can talk about there.

00:23:59.000 --> 00:24:00.520
You can pin the versions,

00:24:00.520 --> 00:24:07.040
you can specify which package repository it comes from.

00:24:07.040 --> 00:24:09.320
The example here is a test one,

00:24:09.320 --> 00:24:13.040
but if you've got a private whitelist server and so on.

00:24:13.040 --> 00:24:14.360
There's a lot going on here.

00:24:14.360 --> 00:24:17.720
Anyway, how does this hit you?

00:24:20.200 --> 00:24:25.480
>> I was thinking I don't need it up until just a second ago.

00:24:25.480 --> 00:24:27.000
>> I know.

00:24:27.000 --> 00:24:34.320
>> Being able to do multiple versions in the same file even to say,

00:24:34.320 --> 00:24:39.840
as an example, normally,

00:24:39.840 --> 00:24:43.600
I test against multiple versions of pytest, for instance,

00:24:43.600 --> 00:24:45.640
or multiple versions of something.

00:24:45.640 --> 00:24:46.840
Like in my own stuff,

00:24:46.840 --> 00:24:52.960
I'm testing against maybe a few different versions of a particular package.

00:24:52.960 --> 00:24:58.720
I do that usually outside in talks to be able to install a different environment,

00:24:58.720 --> 00:25:03.280
set up a different environment with those different things installed.

00:25:03.280 --> 00:25:06.680
But to be able to do it all in one run,

00:25:06.680 --> 00:25:08.280
that's pretty interesting actually.

00:25:08.280 --> 00:25:09.400
>> It is interesting, yeah.

00:25:09.400 --> 00:25:10.120
>> Yeah.

00:25:10.120 --> 00:25:11.760
>> It's pretty interesting.

00:25:11.760 --> 00:25:13.080
Apparently, when it runs,

00:25:13.080 --> 00:25:15.600
it spits out basically the pip output.

00:25:15.600 --> 00:25:17.800
You know what I mean? It just comes.

00:25:17.800 --> 00:25:19.760
But in the context manager,

00:25:19.760 --> 00:25:21.960
you can say catch output equals true,

00:25:21.960 --> 00:25:24.120
and then it's invisible to your users.

00:25:24.120 --> 00:25:28.560
It just takes a little startup time as it does the dependency stuff.

00:25:28.560 --> 00:25:31.680
>> Yeah.

00:25:31.680 --> 00:25:33.520
>> Yeah, pretty wild.

00:25:33.520 --> 00:25:35.320
When I first saw this, I thought,

00:25:35.320 --> 00:25:37.800
this seems like it's encouraging people to do the wrong thing.

00:25:37.800 --> 00:25:40.400
But it's also some interesting flexibility.

00:25:40.400 --> 00:25:42.600
There you have it, installed.

00:25:43.520 --> 00:25:46.920
>> Sometimes people need to be encouraged to do the wrong thing.

00:25:46.920 --> 00:25:49.760
>> That's right. How else do you learn to do the right thing?

00:25:49.760 --> 00:25:52.160
No, just kidding. All right.

00:25:52.160 --> 00:25:54.360
What do you got for extras?

00:25:54.360 --> 00:25:56.360
>> I got a couple extras.

00:25:56.360 --> 00:25:58.880
I am super excited.

00:25:58.880 --> 00:26:02.240
The other thing, one of the things I was doing is open source code this break,

00:26:02.240 --> 00:26:09.720
but I also was completing the complete pytest course.

00:26:09.720 --> 00:26:13.360
I named it the complete pytest course before it was complete.

00:26:13.360 --> 00:26:16.160
Now it actually is complete, all 16 chapters.

00:26:16.160 --> 00:26:22.360
However, it's never really going to be done because this isn't a printed book,

00:26:22.360 --> 00:26:25.240
it is a project.

00:26:25.240 --> 00:26:27.920
It's a course that's up on the web,

00:26:27.920 --> 00:26:31.160
and I'm going to update it if I need to.

00:26:31.160 --> 00:26:34.280
I've got a good community going with it already,

00:26:34.280 --> 00:26:40.080
and we're going to make sure that it's up-to-date with new versions of pytest.

00:26:40.080 --> 00:26:42.320
pytest 8 is coming out,

00:26:42.320 --> 00:26:44.800
and I don't think that I'll have to change anything,

00:26:44.800 --> 00:26:46.200
but if I do have to change stuff,

00:26:46.200 --> 00:26:47.760
I'll change it here first.

00:26:47.760 --> 00:26:52.160
>> Yeah, you can just do a final replace for a 7 to 8 in your code,

00:26:52.160 --> 00:26:53.120
and then you'll be fine.

00:26:53.120 --> 00:26:55.720
>> I don't actually put 7 in there anywhere.

00:26:55.720 --> 00:26:57.080
>> I know.

00:26:57.080 --> 00:27:00.240
>> But there might be some new toys that we want to play with,

00:27:00.240 --> 00:27:02.640
and there already were. One of the fun things

00:27:02.640 --> 00:27:07.200
was in getting this is going through and being able to say,

00:27:07.200 --> 00:27:08.960
I do things a little differently now.

00:27:08.960 --> 00:27:12.440
One of the parts is building a pytest plugin,

00:27:12.440 --> 00:27:16.440
and I package a little differently now than I did several years ago.

00:27:16.440 --> 00:27:18.360
I got to use the new way,

00:27:18.360 --> 00:27:21.060
and we're keeping that up to date. That's the first thing.

00:27:21.060 --> 00:27:24.120
The other thing is, this course took a lot of my time

00:27:24.120 --> 00:27:27.680
actually to get this to the point where it is now.

00:27:27.680 --> 00:27:30.200
Some things went on the back burner,

00:27:30.200 --> 00:27:32.280
and a couple of things were the other podcasts.

00:27:32.280 --> 00:27:37.560
I've got a podcast called Django Python People and Python Test.

00:27:37.560 --> 00:27:38.680
>> Python People.

00:27:38.680 --> 00:27:41.560
>> Python People has new people, Will Vincent,

00:27:41.560 --> 00:27:43.680
and I've got a whole bunch more that I need to release.

00:27:43.680 --> 00:27:46.360
But Will Vincent was on in October,

00:27:46.360 --> 00:27:47.920
and I finally got this released.

00:27:47.920 --> 00:27:51.520
We talk about Django and writing technical books, and Will's awesome.

00:27:51.520 --> 00:27:56.600
He also is the host of Django Chat podcast.

00:27:56.600 --> 00:27:58.600
Then I don't have any,

00:27:58.600 --> 00:28:01.800
the last Python Test episode was out December 15th,

00:28:01.800 --> 00:28:04.360
and I'm going to be doing that next week.

00:28:04.360 --> 00:28:06.120
I'm going to be doing that next week.

00:28:06.120 --> 00:28:07.680
I'm going to be doing that next week.

00:28:09.240 --> 00:28:10.840
I'm going to be doing that next week.

00:28:10.840 --> 00:28:12.360
I'm going to be doing that next week.

00:28:13.880 --> 00:28:15.520
I'm going to be doing that next week.

00:28:15.520 --> 00:28:17.120
I'm going to be doing that next week.

00:28:17.120 --> 00:28:18.680
I'm going to be doing that next week.

00:28:18.680 --> 00:28:20.280
I'm going to be doing that next week.

00:28:20.280 --> 00:28:21.920
I'm going to be doing that next week.

00:28:21.920 --> 00:28:23.520
I'm going to be doing that next week.

00:28:23.520 --> 00:28:25.040
I'm going to be doing that next week.

00:28:25.040 --> 00:28:26.640
I'm going to be doing that next week.

00:28:26.640 --> 00:28:28.200
I'm going to be doing that next week.

00:28:28.200 --> 00:28:29.880
I'm going to be doing that next week.

00:28:29.880 --> 00:28:34.720
We talked about this big release of Hatch 1.8,

00:28:34.720 --> 00:28:37.280
and then went on a two-week break.

00:28:37.280 --> 00:28:39.200
Because like the next day he said,

00:28:39.200 --> 00:28:43.000
great coverage on Hatch 1.8, thanks.

00:28:43.000 --> 00:28:44.640
However, one small correction.

00:28:44.640 --> 00:28:47.280
Remember I was so impressed and psyched

00:28:47.280 --> 00:28:49.840
that the binaries of your apps,

00:28:49.840 --> 00:28:51.960
if you made apps with Hatch,

00:28:51.960 --> 00:28:54.480
which is a cool, cool feature of it, would be signed.

00:28:54.480 --> 00:28:55.480
I'm like, how are they doing this?

00:28:55.480 --> 00:28:56.960
How do they get away with doing this?

00:28:56.960 --> 00:28:58.640
Well, they're not.

00:28:58.640 --> 00:29:00.280
So one small correction.

00:29:00.280 --> 00:29:03.000
Only the binaries for Hatch themselves

00:29:03.000 --> 00:29:05.400
are signed by the certificate of the PSF,

00:29:05.400 --> 00:29:08.760
not the binaries created by Hatch for you.

00:29:08.760 --> 00:29:11.160
Those are your certificate's problems.

00:29:11.160 --> 00:29:13.880
So we're back to signing our own apps again

00:29:13.880 --> 00:29:18.120
and dealing with Apple and Microsoft and all that stuff.

00:29:18.120 --> 00:29:19.680
But it makes more sense, right?

00:29:19.680 --> 00:29:22.880
Okay, next.

00:29:22.880 --> 00:29:24.120
This is just interesting.

00:29:25.080 --> 00:29:30.080
PyPI had new user registration temporarily suspended.

00:29:30.080 --> 00:29:34.800
The volume of malicious users and projects being created

00:29:34.800 --> 00:29:38.080
outpaced the ability to respond to it in timely fashion.

00:29:38.080 --> 00:29:40.720
So like, we just need to slow down.

00:29:40.720 --> 00:29:41.920
No action required.

00:29:41.920 --> 00:29:42.880
This is from last week.

00:29:42.880 --> 00:29:44.480
Just interesting.

00:29:44.480 --> 00:29:46.120
And I guess, thank you everyone

00:29:46.120 --> 00:29:48.640
for being on top of this, honestly,

00:29:48.640 --> 00:29:50.240
'cause what a hassle.

00:29:50.240 --> 00:29:55.040
I also, I don't know what they're doing right now,

00:29:55.040 --> 00:29:56.600
but at least I would recommend,

00:29:56.600 --> 00:29:59.000
I don't know if it would really help,

00:29:59.000 --> 00:30:02.320
but like Cloudflare turnstile,

00:30:02.320 --> 00:30:05.720
at least stop the bots,

00:30:05.720 --> 00:30:09.600
which is a way, way, way, way, way better,

00:30:09.600 --> 00:30:13.160
way better thing than the Google reCAPTCHA thing.

00:30:13.160 --> 00:30:17.200
So maybe if some kind of gate like that would be awesome,

00:30:17.200 --> 00:30:18.800
then put that up.

00:30:18.800 --> 00:30:20.880
Anyway, that's news.

00:30:20.880 --> 00:30:25.160
Also coming up next February, February 12th,

00:30:25.160 --> 00:30:27.200
which is in 33 days,

00:30:27.200 --> 00:30:31.000
I'm doing a YouTube only thing on Talk Python

00:30:31.000 --> 00:30:34.760
that I think will be really fun with Martina Puglisi

00:30:34.760 --> 00:30:36.320
about data doodling.

00:30:36.320 --> 00:30:39.400
So she's got this whole cool series she's doing

00:30:39.400 --> 00:30:42.760
where she's doing like data science

00:30:42.760 --> 00:30:45.320
by just sketching it out and just drawing pictures

00:30:45.320 --> 00:30:46.680
and trying to understand data

00:30:46.680 --> 00:30:50.080
before jumping into like notebooks and stuff.

00:30:50.080 --> 00:30:52.880
And so we're just gonna talk through some really fun doodles

00:30:52.880 --> 00:30:53.800
and it's all visuals,

00:30:53.800 --> 00:30:56.920
which is why it's YouTube only and not on Talk Python.

00:30:56.920 --> 00:30:57.760
- Neat.

00:30:57.760 --> 00:31:01.240
- Exactly, but so if you're interested,

00:31:01.240 --> 00:31:04.800
please come and click the get notified to register

00:31:04.800 --> 00:31:08.320
in quotes to be part of that live event.

00:31:08.320 --> 00:31:10.760
So hopefully people will, that'd be really cool.

00:31:10.760 --> 00:31:12.880
I think she's got some beautiful, beautiful work

00:31:12.880 --> 00:31:14.840
and we'll appreciate when we get there.

00:31:16.440 --> 00:31:21.440
And wrote an article called,

00:31:21.440 --> 00:31:22.800
maybe we should have R in the front,

00:31:22.800 --> 00:31:25.440
R AI features a waste of time.

00:31:25.440 --> 00:31:29.000
So my premise is that,

00:31:29.000 --> 00:31:32.200
I'm just wondering like how many cumulative programmer hours

00:31:32.200 --> 00:31:36.160
have been utterly wasted on adding very mediocre AI features

00:31:36.160 --> 00:31:39.800
to every app imaginable that you rarely ever want to use?

00:31:39.800 --> 00:31:42.680
So I just lay out like a couple issues,

00:31:42.680 --> 00:31:45.520
like look at all these examples of apps

00:31:45.520 --> 00:31:50.440
that just like they're adding AI for the sake of adding AI,

00:31:50.440 --> 00:31:54.440
but it's not bashing on like chat to PT or something like,

00:31:54.440 --> 00:31:57.600
it's just like, oh, you can click this to like,

00:31:57.600 --> 00:31:59.640
correct the date by AI.

00:31:59.640 --> 00:32:00.640
It's like, I just type the date.

00:32:00.640 --> 00:32:02.720
Why do I need this stupid thing?

00:32:02.720 --> 00:32:06.160
And another, this example I'll use with Spark email,

00:32:06.160 --> 00:32:08.020
which has this really cool,

00:32:08.020 --> 00:32:10.120
Brian, see how beautiful that is?

00:32:10.120 --> 00:32:13.200
You can write beautiful emails in Spark, love it.

00:32:13.200 --> 00:32:15.320
But if you try to proofread it with AI,

00:32:15.320 --> 00:32:17.160
it deletes all the content,

00:32:17.160 --> 00:32:19.880
it deletes the images,

00:32:19.880 --> 00:32:22.360
and it just like jams it back as plain text,

00:32:22.360 --> 00:32:24.080
like response from ChatGPT or something.

00:32:24.080 --> 00:32:25.560
You're like, dude, that's not what I want.

00:32:25.560 --> 00:32:28.600
I want to ask for you to proofread it.

00:32:28.600 --> 00:32:32.000
Like why, this app is full of little tiny bugs

00:32:32.000 --> 00:32:33.680
and like they're adding this,

00:32:33.680 --> 00:32:35.160
like who would ever use that

00:32:35.160 --> 00:32:37.840
if this is the outcome of what you get, you know?

00:32:37.840 --> 00:32:42.320
Anyway, another example would be the Dropbox fiasco

00:32:42.320 --> 00:32:44.960
where they just silently turned on,

00:32:44.960 --> 00:32:47.400
hey, we're sending all your documents to OpenAI.

00:32:47.400 --> 00:32:48.400
Hope you don't mind.

00:32:48.400 --> 00:32:49.240
Do you have anything private?

00:32:49.240 --> 00:32:50.600
Probably not, it's fine, right?

00:32:50.600 --> 00:32:52.880
And you're like, wait, why did you add, nobody wants this.

00:32:52.880 --> 00:32:53.720
Why did you turn this on

00:32:53.720 --> 00:32:56.400
and why are you sending my data out of Dropbox?

00:32:56.400 --> 00:32:58.220
This is not right.

00:32:58.220 --> 00:33:01.440
So anyway, hopefully people will enjoy this article.

00:33:01.440 --> 00:33:02.680
I have another fun one,

00:33:02.680 --> 00:33:04.560
let's just say another fun one coming next.

00:33:04.560 --> 00:33:06.000
- I forgot to turn that off.

00:33:06.000 --> 00:33:10.240
- Oh, well, you can ask ChatGPT about that.

00:33:10.240 --> 00:33:11.080
- Gone now.

00:33:14.720 --> 00:33:17.480
- Yeah, no, honestly, it doesn't actually send it

00:33:17.480 --> 00:33:20.520
unless you interact with one of the, like a text box.

00:33:20.520 --> 00:33:21.760
It says, do you want to ask this thing

00:33:21.760 --> 00:33:23.000
and the AI about your doc?

00:33:23.000 --> 00:33:25.800
But if you ask it, then it's on, right?

00:33:25.800 --> 00:33:29.200
So it's not clear by like entering that text box,

00:33:29.200 --> 00:33:31.840
that input, you're now sharing your data

00:33:31.840 --> 00:33:32.800
with some other company, right?

00:33:32.800 --> 00:33:37.240
Like can we just have like more reliable integration

00:33:37.240 --> 00:33:40.880
with Finder and Explorer and better sync?

00:33:40.880 --> 00:33:42.400
Like I don't need this AI stuff.

00:33:42.400 --> 00:33:44.600
- I had, I actually, on the topic though,

00:33:44.600 --> 00:33:48.000
I had like a really cool AI experience.

00:33:48.000 --> 00:33:51.560
I went to the dentist and they took x-rays

00:33:51.560 --> 00:33:55.920
and she showed me the x-ray picture.

00:33:55.920 --> 00:33:58.520
And then she showed me the picture right next to it

00:33:58.520 --> 00:34:02.260
where an AI highlighted areas that might be problems

00:34:02.260 --> 00:34:04.880
that the dentist should check out and take a look at.

00:34:04.880 --> 00:34:05.720
- That's awesome.

00:34:05.720 --> 00:34:09.000
- And things like that, like helping a professional

00:34:09.000 --> 00:34:12.920
make sure they don't miss things, great use of AI.

00:34:12.920 --> 00:34:15.280
- Yeah, proofreading less.

00:34:15.280 --> 00:34:18.960
No, that's an awesome, awesome use of it.

00:34:18.960 --> 00:34:22.160
Okay, ready for the joke?

00:34:22.160 --> 00:34:25.560
- I'm almost, I want to show one more thing

00:34:25.560 --> 00:34:28.640
I forgot to mention for a lot of people,

00:34:28.640 --> 00:34:31.800
New Year's resolutions time for a lot of people.

00:34:31.800 --> 00:34:35.540
And if your New Year's resolution is get better at testing,

00:34:35.540 --> 00:34:39.040
the celebrate the pytest or the complete pytest course

00:34:39.040 --> 00:34:43.600
you're getting done, the coupon code 2024

00:34:43.600 --> 00:34:46.480
is open through January for 10% off.

00:34:46.480 --> 00:34:49.120
So just wanted to mention that.

00:34:49.120 --> 00:34:50.880
Now I'm ready for a joke.

00:34:50.880 --> 00:34:55.160
- All right, this one has to do with managers

00:34:55.160 --> 00:34:57.760
and sprints and super agile stuff.

00:34:57.760 --> 00:35:02.120
Okay, this is from work chronicles or chronicles.com

00:35:02.120 --> 00:35:04.800
put it in the backlog with dashes.

00:35:04.800 --> 00:35:07.360
So there's a programmer clearly,

00:35:08.720 --> 00:35:10.920
actually it's a project manager, but whatever,

00:35:10.920 --> 00:35:12.600
like somebody on the tech team.

00:35:12.600 --> 00:35:14.520
And here comes a person very cheery.

00:35:14.520 --> 00:35:17.080
Hey, I have a new feature idea.

00:35:17.080 --> 00:35:19.520
And the person a little bit bugged

00:35:19.520 --> 00:35:21.200
getting interrupted from works is awesome.

00:35:21.200 --> 00:35:22.680
Just put it in the backlog.

00:35:22.680 --> 00:35:25.040
Person says, where's the backlog?

00:35:25.040 --> 00:35:26.240
Holds up the trashcan.

00:35:26.240 --> 00:35:28.800
- Oh dear.

00:35:28.800 --> 00:35:29.960
- Put it in the backlog.

00:35:29.960 --> 00:35:31.400
This goes right here.

00:35:31.400 --> 00:35:32.880
We're busy.

00:35:32.880 --> 00:35:34.280
- Yeah.

00:35:34.280 --> 00:35:35.120
- Anyway.

00:35:37.680 --> 00:35:39.760
- We actually, we've got a real backlog,

00:35:39.760 --> 00:35:42.600
but the things that are marked low priority,

00:35:42.600 --> 00:35:44.680
it's never gonna happen.

00:35:44.680 --> 00:35:46.600
- Just run a filter that just hides

00:35:46.600 --> 00:35:47.960
all the priority things.

00:35:47.960 --> 00:35:52.280
Yeah, we're done.

00:35:52.280 --> 00:35:53.120
Backlogs all cut up.

00:35:53.120 --> 00:35:54.680
No, I know there's that feature I put in there.

00:35:54.680 --> 00:35:56.040
Oh yeah, it must be a little priority.

00:35:56.040 --> 00:35:56.880
Got it.

00:35:56.880 --> 00:35:57.720
- Oh, it's prioritized.

00:35:57.720 --> 00:35:59.200
We'll get to it.

00:35:59.200 --> 00:36:00.400
- Beautiful.

00:36:00.400 --> 00:36:03.120
All right, well, fantastic to be back with you

00:36:03.120 --> 00:36:04.200
and everyone else, Brian.

00:36:04.200 --> 00:36:05.520
- Good to be back.

00:36:05.520 --> 00:36:06.480
- Yeah.

00:36:06.480 --> 00:36:07.320
Bye all.

00:36:07.320 --> 00:36:08.160
Bye.

