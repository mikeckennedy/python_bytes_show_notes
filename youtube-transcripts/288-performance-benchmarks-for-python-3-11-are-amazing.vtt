WEBVTT

00:00:00.000 --> 00:00:02.000
- Hey YouTube, hey Brian.


00:00:02.000 --> 00:00:02.840
- Hey.


00:00:02.840 --> 00:00:05.640
- Good to be here with you as always.


00:00:05.640 --> 00:00:07.280
Ready to do some podcasting?


00:00:07.280 --> 00:00:08.120
- Definitely.


00:00:08.120 --> 00:00:11.520
- Hey Brandon, happy to see you out there in the live stream.


00:00:11.520 --> 00:00:12.760
Everyone in the live stream,


00:00:12.760 --> 00:00:15.320
if you're here please throw out comments, thoughts,


00:00:15.320 --> 00:00:17.660
questions, and if you're watching it afterwards,


00:00:17.660 --> 00:00:18.760
well maybe the live stream's over,


00:00:18.760 --> 00:00:21.360
but thanks for being here anyway.


00:00:21.360 --> 00:00:22.200
- Yeah, tough.


00:00:22.200 --> 00:00:25.880
- Hello and welcome to Python Bytes,


00:00:25.880 --> 00:00:27.400
where we deliver Python news and headlines


00:00:27.400 --> 00:00:29.200
directly to your earbuds.


00:00:29.200 --> 00:00:34.200
This is episode 288, recorded June 14th, 2022.


00:00:34.200 --> 00:00:36.040
I'm Michael Kennedy.


00:00:36.040 --> 00:00:37.240
- And I am Brian Okken.


00:00:37.240 --> 00:00:39.640
- Brian, how are you doing?


00:00:39.640 --> 00:00:42.320
- I'm excellent today. - I hear you're busy.


00:00:42.320 --> 00:00:43.720
I hear you're a little busy.


00:00:43.720 --> 00:00:46.720
- But it's just, you know, being a parent


00:00:46.720 --> 00:00:49.160
and having side jobs and stuff like that.


00:00:49.160 --> 00:00:51.520
- Of course, well, it's better than the alternative,


00:00:51.520 --> 00:00:52.840
not being busy. - Definitely.


00:00:52.840 --> 00:00:54.360
I was talking to somebody this weekend


00:00:54.360 --> 00:00:57.800
about like their one job and trying to balance job and life.


00:00:57.800 --> 00:01:00.000
And I'm like, I don't even remember what that's like


00:01:00.000 --> 00:01:01.960
with just one job in life.


00:01:01.960 --> 00:01:04.080
- I know, or you have a job where you go to work


00:01:04.080 --> 00:01:04.920
and you do the work.


00:01:04.920 --> 00:01:05.740
And then when you go home,


00:01:05.740 --> 00:01:10.740
there's no real reason, no real way to do the job anymore.


00:01:10.740 --> 00:01:12.840
So you can just step away from it.


00:01:12.840 --> 00:01:14.000
It sounds glorious.


00:01:14.000 --> 00:01:17.040
And yet I continue to choose the opposite,


00:01:17.040 --> 00:01:17.860
which I also love.


00:01:17.860 --> 00:01:20.840
All right, well, speaking of stuff people might love,


00:01:20.840 --> 00:01:23.400
you wanna kick us off with your first item?


00:01:23.400 --> 00:01:25.160
- Yeah, we're gonna talk about polar bears.


00:01:25.160 --> 00:01:27.280
No, not polar bears.


00:01:27.280 --> 00:01:30.640
a project called Polars and actually it's,


00:01:30.640 --> 00:01:32.560
it's like super fun and cool.


00:01:32.560 --> 00:01:36.000
So Polars was suggested to us by actually several listeners.


00:01:36.000 --> 00:01:39.240
We got several people sent in and I'm sorry,


00:01:39.240 --> 00:01:40.680
I don't have their names, but thank you.


00:01:40.680 --> 00:01:43.160
Always send great stuff our way.


00:01:43.160 --> 00:01:44.620
We love it.


00:01:44.620 --> 00:01:49.620
But Polars is billed as a lightning fast data frame library


00:01:49.620 --> 00:01:51.320
for Rust and Python.


00:01:51.320 --> 00:01:55.820
And it is, it is written in Python.


00:01:55.820 --> 00:01:57.740
No, it's written in Rust.


00:01:57.740 --> 00:02:02.580
But they have like a, they have a full,


00:02:02.580 --> 00:02:05.860
the full API is present in Python.


00:02:05.860 --> 00:02:08.400
And it's just, it's kind of neat actually


00:02:08.400 --> 00:02:09.240
how they've done it.


00:02:09.240 --> 00:02:11.060
But so we've got up on the screen,


00:02:11.060 --> 00:02:14.320
the splash screen for the Polars project.


00:02:14.320 --> 00:02:17.940
There's a user guide and API reference, of course.


00:02:17.940 --> 00:02:19.860
But one of the things I wanted to talk about


00:02:19.860 --> 00:02:21.120
is there some of their,


00:02:21.120 --> 00:02:24.580
why you would consider it.


00:02:24.580 --> 00:02:28.540
So Polars is lightning fast data frame library.


00:02:28.540 --> 00:02:30.500
It uses an in-memory query engine


00:02:30.500 --> 00:02:35.500
and it says it's embarrassingly parallel in execution


00:02:35.500 --> 00:02:41.200
and it has a cache efficient algorithms and expressive API.


00:02:41.200 --> 00:02:43.380
And they say it makes it perfect


00:02:43.380 --> 00:02:45.500
for efficient data wrangling, data pipelines,


00:02:45.500 --> 00:02:47.660
snappy APIs and so much more.


00:02:47.660 --> 00:02:50.580
But I just also is fun.


00:02:50.580 --> 00:02:53.020
I played with it a little bit.


00:02:53.020 --> 00:02:54.620
It's zippy and fun.


00:02:54.620 --> 00:02:59.620
They have both the ability to do lazy execution


00:02:59.620 --> 00:03:04.540
and eager execution, whichever you prefer for your use.


00:03:04.540 --> 00:03:09.540
It's multi-threaded, has a notion of single instruction,


00:03:09.540 --> 00:03:11.940
multiple data.


00:03:11.940 --> 00:03:13.380
Not exactly sure what that means,


00:03:13.380 --> 00:03:14.960
but makes it faster apparently.


00:03:14.960 --> 00:03:20.900
And I was looking through the whole,


00:03:21.740 --> 00:03:25.000
the user's guide is actually written


00:03:25.000 --> 00:03:26.780
like a very well-written book.


00:03:26.780 --> 00:03:29.460
And it looks like the whole guide, as far as I can tell,


00:03:29.460 --> 00:03:32.460
is written for the Python API.


00:03:32.460 --> 00:03:35.700
So I think that was part of the intent all along


00:03:35.700 --> 00:03:37.860
is to write it quickly in Rust,


00:03:37.860 --> 00:03:42.640
expose it to Rust users also, but also run it with Python.


00:03:42.640 --> 00:03:47.860
And it's just really pretty clean and super fast.


00:03:47.860 --> 00:03:50.780
One of these benchmark results performance things


00:03:50.780 --> 00:03:55.660
was it's like a spark was taken 332 seconds


00:03:55.660 --> 00:03:57.700
and they took 43 seconds.


00:03:57.700 --> 00:03:59.740
So I know-


00:03:59.740 --> 00:04:01.920
- It's a hundred million rows.


00:04:01.920 --> 00:04:03.900
- Yeah.


00:04:03.900 --> 00:04:04.720
- Seven columns.


00:04:04.720 --> 00:04:05.560
That's not just like,


00:04:05.560 --> 00:04:08.700
let's load up a couple of pieces of data or something.


00:04:08.700 --> 00:04:09.540
- Right.


00:04:09.540 --> 00:04:12.260
So there's a lot of focus on this,


00:04:12.260 --> 00:04:14.420
making sure that it's fast,


00:04:14.420 --> 00:04:17.080
especially when you don't need everything,


00:04:17.080 --> 00:04:19.500
like doing lazy evaluation


00:04:19.500 --> 00:04:23.540
or making sure you do multi-processing.


00:04:23.540 --> 00:04:26.020
One of the things I thought was really kind of cool about it


00:04:26.020 --> 00:04:28.020
I was looking through the documentation


00:04:28.020 --> 00:04:31.500
is there's a section on that says,


00:04:31.500 --> 00:04:36.180
it was a section that was talking about parallelization.


00:04:36.180 --> 00:04:39.300
It says, do not kill the parallelization


00:04:39.300 --> 00:04:42.180
because with Python, we know we,


00:04:42.180 --> 00:04:44.820
there is basically there's ways to use polars


00:04:44.820 --> 00:04:49.060
that can kill parallel processing


00:04:49.060 --> 00:04:50.180
because of the GIL.


00:04:50.180 --> 00:04:53.260
If you're using, if you don't do it


00:04:53.260 --> 00:04:55.380
the way they've set it up,


00:04:55.380 --> 00:04:57.940
you can use it in a way that makes it a little slower,


00:04:57.940 --> 00:04:59.420
I guess is what I'm saying.


00:04:59.420 --> 00:05:01.500
But so there's a section on this talking about


00:05:01.500 --> 00:05:05.920
the polar expressions, polar's expressions,


00:05:05.920 --> 00:05:08.140
and these are all set up so that you can pass


00:05:08.140 --> 00:05:11.940
these expressive queries into polars


00:05:11.940 --> 00:05:13.940
and have it run in the background


00:05:13.940 --> 00:05:17.660
and just make things really fast with it


00:05:17.660 --> 00:05:21.180
and sort of skirt around the gill


00:05:21.180 --> 00:05:22.540
because you're doing all the work


00:05:22.540 --> 00:05:25.480
in the Rust part of the world,


00:05:25.480 --> 00:05:28.480
and then collecting the data later.


00:05:28.480 --> 00:05:30.340
So there's like a set up the query


00:05:30.340 --> 00:05:32.260
and then collect the query.


00:05:32.260 --> 00:05:33.440
That's kind of cool.


00:05:33.440 --> 00:05:36.780
So anyway, I just thought this is a really, looks fun.


00:05:36.780 --> 00:05:39.380
It's just, there's nothing to,


00:05:39.380 --> 00:05:42.220
you don't have to know that it's in Rust.


00:05:42.220 --> 00:05:45.060
You just say pip install pollers and it works.


00:05:45.060 --> 00:05:45.900
So.


00:05:45.900 --> 00:05:46.940
- Yeah, that's great.


00:05:46.940 --> 00:05:51.140
Out in the audience, Sarab asks,


00:05:51.140 --> 00:05:52.940
why Rust and not C?


00:05:52.940 --> 00:05:57.140
Maybe an example there is Pandas versus this.


00:05:57.140 --> 00:05:59.900
Also probably the person who wrote it


00:05:59.900 --> 00:06:01.240
just really likes Rust.


00:06:01.240 --> 00:06:04.420
And I think Rust has a little bit more thread safety


00:06:04.420 --> 00:06:05.500
than straight C does.


00:06:05.500 --> 00:06:09.420
I'm not 100% sure, but this uses threads as you point out,


00:06:09.420 --> 00:06:12.560
whereas the other one, Pandas and others in C don't.


00:06:14.020 --> 00:06:16.460
- I also think that we're gonna see a lot more


00:06:16.460 --> 00:06:17.380
of things like this.


00:06:17.380 --> 00:06:22.380
Like because I think some of the early faster packages


00:06:22.380 --> 00:06:26.220
for Python were written in C because Rust wasn't around


00:06:26.220 --> 00:06:28.060
or it wasn't mature enough.


00:06:28.060 --> 00:06:30.700
But I think we're gonna see more people saying,


00:06:30.700 --> 00:06:34.680
well, I want it to be closer to the processor


00:06:34.680 --> 00:06:35.760
for some of this stuff.


00:06:35.760 --> 00:06:37.560
Why not Rust?


00:06:37.560 --> 00:06:40.740
'Cause I think Rust is a cleaner development environment


00:06:40.740 --> 00:06:42.340
than C right now, so.


00:06:42.340 --> 00:06:43.500
- Yeah, I agree.


00:06:43.500 --> 00:06:46.800
- Absolutely. It's just a more modern language, right?


00:06:46.800 --> 00:06:49.980
- You know, C is keeping up.


00:06:49.980 --> 00:06:54.940
C is never gonna be old, I don't think, but yeah.


00:06:54.940 --> 00:06:55.780
- Yeah, yeah.


00:06:55.780 --> 00:06:58.620
I don't mean to say that C is out, not modern,


00:06:58.620 --> 00:06:59.880
in the sense that people are not using it,


00:06:59.880 --> 00:07:03.620
but it doesn't embrace in its sort of natural form,


00:07:03.620 --> 00:07:06.780
the most, you know, smart pointers and things like that.


00:07:06.780 --> 00:07:07.620
- Yeah, there's-


00:07:07.620 --> 00:07:09.200
- Plus maybe, but not C.


00:07:09.200 --> 00:07:11.620
- There's safety features built into Rust


00:07:11.620 --> 00:07:13.220
to make sure you don't,


00:07:13.220 --> 00:07:17.100
that just make it easier to not do dumb things,


00:07:17.100 --> 00:07:17.940
I guess.


00:07:17.940 --> 00:07:20.140
- Yes, indeed.


00:07:20.140 --> 00:07:22.380
All right, well, let's jump on to my first item,


00:07:22.380 --> 00:07:24.860
which is a followup from last week,


00:07:24.860 --> 00:07:27.660
Python Developer Survey 2021.


00:07:27.660 --> 00:07:28.500
Yes, you heard that right.


00:07:28.500 --> 00:07:29.460
I know it's 2022.


00:07:29.460 --> 00:07:30.720
These are the results from the survey


00:07:30.720 --> 00:07:33.100
that was at the end of last year.


00:07:33.100 --> 00:07:35.980
So let's, I'm gonna kind of skim through this


00:07:35.980 --> 00:07:39.180
and just hit on some of the main ideas here.


00:07:39.180 --> 00:07:40.900
There's a ton of information


00:07:40.900 --> 00:07:43.280
And I encourage people to go over and scroll through it.


00:07:43.280 --> 00:07:46.880
This is done in conjunction with the folks over at JetBrains,


00:07:46.880 --> 00:07:49.920
the PyCharm team, and all that.


00:07:49.920 --> 00:07:53.840
So it was collected and analyzed by the JetBrains folks,


00:07:53.840 --> 00:07:56.740
but put together independently by the PSF.


00:07:56.740 --> 00:08:01.360
So it's intended to not be skewed in any way towards them.


00:08:01.360 --> 00:08:04.280
All right, so first thing is, if you're using Python,


00:08:04.280 --> 00:08:06.880
is it your main language or your secondary language?


00:08:06.880 --> 00:08:09.720
84% of the people say it's their main language,


00:08:09.720 --> 00:08:12.840
with 16% taking up the balance of not so much.


00:08:12.840 --> 00:08:15.700
It's been pretty stable over the last four years.


00:08:15.700 --> 00:08:17.180
What do you think of this, Brian?


00:08:17.180 --> 00:08:22.780
- I think that there's a lot of people like me,


00:08:22.780 --> 00:08:26.060
I think that it started out as my secondary language


00:08:26.060 --> 00:08:27.980
and now it's my main language.


00:08:27.980 --> 00:08:29.020
- Yeah, interesting.


00:08:29.020 --> 00:08:30.860
Yeah, kind of got sucked in.


00:08:30.860 --> 00:08:32.740
Look at that, maybe I'll use it to test my C stuff.


00:08:32.740 --> 00:08:33.880
Wait, actually, this is kind of nice.


00:08:33.880 --> 00:08:35.140
Maybe I'll do more of this.


00:08:35.140 --> 00:08:36.620
- Yeah.


00:08:36.620 --> 00:08:39.780
There's always the next question or analysis


00:08:39.780 --> 00:08:43.660
is always fraught with weird overlaps.


00:08:43.660 --> 00:08:47.340
But I like the way they ask this a little bit better


00:08:47.340 --> 00:08:49.040
than a lot of times it says,


00:08:49.040 --> 00:08:50.700
Python usage with other languages,


00:08:50.700 --> 00:08:52.980
what other languages use Python with,


00:08:52.980 --> 00:08:56.100
rather than maybe a more general one where they ask,


00:08:56.100 --> 00:08:57.700
well, what is the most popular language?


00:08:57.700 --> 00:08:59.140
And you'll see weird stuff like,


00:08:59.140 --> 00:09:00.780
well, most people code in CSS.


00:09:00.780 --> 00:09:03.260
Like I'm a full stack CSS developer.


00:09:03.260 --> 00:09:05.060
Like, no, you're not just everyone has to use it.


00:09:05.060 --> 00:09:05.900
Like, what is this?


00:09:05.900 --> 00:09:07.340
It's a horrible question.


00:09:07.340 --> 00:09:08.180
- Yeah.


00:09:08.180 --> 00:09:09.340
- Right, so this is like, if you're doing Python,


00:09:09.340 --> 00:09:11.500
what other languages do you bring into the mix?


00:09:11.500 --> 00:09:13.460
And I guess maybe just hit the top five.


00:09:13.460 --> 00:09:16.060
JavaScript, because you might be doing front end, back end.


00:09:16.060 --> 00:09:18.140
HTML, CSS, same reason.


00:09:18.140 --> 00:09:20.740
Bash shell, 'cause you're doing automation builds, so on.


00:09:20.740 --> 00:09:22.460
SQL, because SQL.


00:09:22.460 --> 00:09:25.700
I'm surprised there's that much direct SQL,


00:09:25.700 --> 00:09:26.780
but there it is.


00:09:26.780 --> 00:09:29.180
And then C and C++, speaking of that language.


00:09:29.180 --> 00:09:32.180
- Yeah.


00:09:32.180 --> 00:09:34.140
- Also, to sort of address the thing


00:09:34.140 --> 00:09:37.300
I brought it before, Rust is at 6%.


00:09:37.300 --> 00:09:38.780
Last year it was at 5%.


00:09:38.780 --> 00:09:42.020
So it's compared to C at 30 and 29.


00:09:42.020 --> 00:09:44.260
So they both grew by 1% this year.


00:09:44.260 --> 00:09:45.260
- Okay.


00:09:45.260 --> 00:09:46.260
- Yeah.


00:09:46.260 --> 00:09:48.780
- I think they both grew.


00:09:48.780 --> 00:09:49.780
That's interesting.


00:09:49.780 --> 00:09:51.480
- Yeah, exactly.


00:09:51.480 --> 00:09:56.140
Another thing that people might want to pay attention to is you'll see year over year


00:09:56.140 --> 00:09:59.900
stuff all over the place in these reports because they've been doing this for a while.


00:09:59.900 --> 00:10:05.560
So the top bar that's brighter is this year,


00:10:05.560 --> 00:10:07.580
but they also put last year.


00:10:07.580 --> 00:10:10.340
So for example, people are doing less Bash,


00:10:10.340 --> 00:10:12.660
because you can see it's lower bar is higher,


00:10:12.660 --> 00:10:16.220
and they're doing less PHP, which probably means they love


00:10:16.220 --> 00:10:18.900
themselves a little bit more.


00:10:18.900 --> 00:10:20.580
Don't go home crying.


00:10:20.580 --> 00:10:21.900
OK.


00:10:21.900 --> 00:10:23.020
Let's see.


00:10:23.020 --> 00:10:25.220
Languages for web and data science.


00:10:25.220 --> 00:10:27.420
This is kind of like if you're doing these things,


00:10:27.420 --> 00:10:28.260
what do you use more?


00:10:28.260 --> 00:10:33.140
So if you're doing data science, SQL is your most common thing.


00:10:33.140 --> 00:10:40.220
If you're doing web, surprise, JavaScript and HTML is the most common other thing.


00:10:40.220 --> 00:10:43.380
Let's see, what do you use Python for?


00:10:43.380 --> 00:10:45.940
Work and personal, 50%.


00:10:45.940 --> 00:10:48.900
Personal is 29 and work 20%.


00:10:48.900 --> 00:10:55.020
It's kind of interesting that more people use it for side projects if they use it for


00:10:55.020 --> 00:10:58.420
or just one or the other of work or personal?


00:10:58.420 --> 00:11:00.180
I guess people who know Python at work,


00:11:00.180 --> 00:11:01.020
they wanna go home, they're like,


00:11:01.020 --> 00:11:02.580
"You know what, I could automate my house with this too.


00:11:02.580 --> 00:11:03.860
"Let's do that."


00:11:03.860 --> 00:11:06.620
- I think that, yeah, I would take it like that.


00:11:06.620 --> 00:11:09.220
I think more people, it isn't just even automate your house,


00:11:09.220 --> 00:11:10.820
it's just playing around with it at home.


00:11:10.820 --> 00:11:13.820
Like, "Yeah, I heard about this new web framework,


00:11:13.820 --> 00:11:16.980
"FastAPI, I wanna try it out," things like that.


00:11:16.980 --> 00:11:17.820
- Yeah, absolutely.


00:11:17.820 --> 00:11:20.380
I'm gonna skip down here through a bunch of stuff.


00:11:20.380 --> 00:11:23.420
What do you use Python for the most?


00:11:23.420 --> 00:11:26.660
web development, but that fell year over year.


00:11:26.660 --> 00:11:29.100
Data analysis stayed the same year over year.


00:11:29.100 --> 00:11:30.940
Machine learning fell year over year.


00:11:30.940 --> 00:11:32.780
And a bunch of stuff.


00:11:32.780 --> 00:11:35.460
But so sort of the growth areas year over year,


00:11:35.460 --> 00:11:38.300
education and desktop development,


00:11:38.300 --> 00:11:41.420
and then other, which I think is pretty,


00:11:41.420 --> 00:11:44.100
also game development, like doubled.


00:11:44.100 --> 00:11:45.260
- Doubled from one to two.


00:11:45.260 --> 00:11:47.340
- I mean, from one to two, it's probably like,


00:11:47.340 --> 00:11:49.620
there was, you know, that might be within the margin


00:11:49.620 --> 00:11:51.860
of error type of thing, but still, it doubled.


00:11:51.860 --> 00:11:56.860
But I think just the other, no, other didn't grow.


00:11:56.860 --> 00:11:59.920
I think it's just more spread out, I don't know.


00:11:59.920 --> 00:12:00.980
'Cause there's still, I think,


00:12:00.980 --> 00:12:02.280
same number of people using Python.


00:12:02.280 --> 00:12:04.720
All right, are you a data scientist?


00:12:04.720 --> 00:12:07.340
One third yes, two thirds no.


00:12:07.340 --> 00:12:10.760
That fits with my mental model of the Python space.


00:12:10.760 --> 00:12:13.340
One third data science, one third web and API,


00:12:13.340 --> 00:12:16.760
and one third massively diverse other.


00:12:16.760 --> 00:12:18.240
The way I see the ecosystem.


00:12:19.600 --> 00:12:23.920
Python 3 versus 2, I think we're asymptotically


00:12:23.920 --> 00:12:26.520
as a limit approaching Python 3 only,


00:12:26.520 --> 00:12:31.080
but year over year it goes 25% from 2017,


00:12:31.080 --> 00:12:35.120
then 16% to Python 2, then 10%, then 6, then 5,


00:12:35.120 --> 00:12:37.200
and then there's just huge code bases


00:12:37.200 --> 00:12:39.000
that are stuck on Python 2.


00:12:39.000 --> 00:12:42.480
Some of the big banks have 5,000 Python developers


00:12:42.480 --> 00:12:44.160
working on Python 2 code bases


00:12:44.160 --> 00:12:46.720
that are so specialized and tweaked


00:12:46.720 --> 00:12:49.360
that they can't just swap out stuff.


00:12:49.360 --> 00:12:52.240
That might represent 5% bank usage, I don't know.


00:12:52.240 --> 00:12:58.600
- I just, I feel bad for you.


00:12:58.600 --> 00:13:02.040
We're rooting for you, everybody out there using Python 2.


00:13:02.040 --> 00:13:03.320
- Let's approach that limit.


00:13:03.320 --> 00:13:05.680
Yeah, yeah, let's divide by n factorial,


00:13:05.680 --> 00:13:06.720
not n for your limit there.


00:13:06.720 --> 00:13:08.160
Let's go, get in there.


00:13:08.160 --> 00:13:12.520
All right, Python 3.9 is the most common version.


00:13:12.520 --> 00:13:17.520
3.10 being 16% and 3.8 being 27% versus 35.


00:13:18.120 --> 00:13:19.860
So that's pretty interesting.


00:13:19.860 --> 00:13:23.880
I feel like this is, hey, this is what comes with my Linux.


00:13:23.880 --> 00:13:24.960
This is what comes with my Docker.


00:13:24.960 --> 00:13:28.060
So I'm using that, but maybe it's more.


00:13:28.060 --> 00:13:31.200
- Yeah, it's interesting 'cause you and I


00:13:31.200 --> 00:13:33.120
like are in an interesting space


00:13:33.120 --> 00:13:34.720
'cause we're always looking at the new stuff.


00:13:34.720 --> 00:13:38.480
So I'm at 310 and I can't wait to jump to 311.


00:13:38.480 --> 00:13:43.320
And actually I've switched to 311 for some projects.


00:13:43.320 --> 00:13:46.520
So, but there's a lot of people that's like,


00:13:46.520 --> 00:13:49.360
man, Python's pretty good and it's been good for a while,


00:13:49.360 --> 00:13:52.240
so I don't need a lot of the new features.


00:13:52.240 --> 00:13:53.880
- Yeah, for sure.


00:13:53.880 --> 00:13:57.480
I'm going to later talk about something


00:13:57.480 --> 00:14:00.720
that might shift that to the right.


00:14:00.720 --> 00:14:02.800
I've actually been thinking,


00:14:02.800 --> 00:14:05.120
like should I maybe install 3.11 beta


00:14:05.120 --> 00:14:07.220
and see how stable that is on the servers?


00:14:07.220 --> 00:14:08.360
(laughs)


00:14:08.360 --> 00:14:10.120
We'll see, that might be a bad choice.


00:14:10.120 --> 00:14:12.480
But it might be a good choice, as we'll see.


00:14:12.480 --> 00:14:13.720
Okay.


00:14:13.720 --> 00:14:15.720
Where do you install Python from?


00:14:15.720 --> 00:14:18.400
38%, just download the thing from python.org


00:14:18.400 --> 00:14:20.960
and run with that.


00:14:20.960 --> 00:14:25.600
The next most common option is to install it


00:14:25.600 --> 00:14:30.600
via your OS package manager, apt, homebrew, whatever.


00:14:30.600 --> 00:14:34.960
And Alvaro has a great little recommendation out there


00:14:34.960 --> 00:14:37.120
for people who are stuck on Python 2.


00:14:37.120 --> 00:14:39.980
So there probably is a support group for Python 2 users.


00:14:39.980 --> 00:14:43.380
- Hi, my name's Brian and I use Python 2.


00:14:43.380 --> 00:14:44.220
- Hi Brian.


00:14:44.220 --> 00:14:45.040
(laughing)


00:14:45.040 --> 00:14:45.880
- Hi Brian.


00:14:45.880 --> 00:14:47.720
(laughing)


00:14:47.720 --> 00:14:48.560
All right.


00:14:48.560 --> 00:14:50.340
(laughing)


00:14:50.340 --> 00:14:51.640
Another one I thought was pretty interesting


00:14:51.640 --> 00:14:55.400
is the packaging stuff, the isolation stuff.


00:14:55.400 --> 00:14:56.400
Before we get there really quick,


00:14:56.400 --> 00:15:00.480
web frameworks, FastAPI continues to grow.


00:15:00.480 --> 00:15:01.480
- Yeah.


00:15:01.480 --> 00:15:02.700
- Pretty strong here.


00:15:02.700 --> 00:15:07.040
We've got Flask is now maybe within the margin error,


00:15:07.040 --> 00:15:10.620
but just edged ahead of Django.


00:15:10.620 --> 00:15:15.420
but FastAPI almost doubled in usage over the last year.


00:15:15.420 --> 00:15:18.220
It grew nine percentage points, but it was at 12% last year.


00:15:18.220 --> 00:15:20.220
And so now it's at 21%, which is,


00:15:20.220 --> 00:15:21.660
that's a pretty big chunk to take out


00:15:21.660 --> 00:15:23.780
of established frameworks.


00:15:23.780 --> 00:15:27.140
- Yeah, well, and it looks like the third is none.


00:15:27.140 --> 00:15:29.140
I haven't tried that yet.


00:15:29.140 --> 00:15:30.980
- Yeah, it gets a lot of attribute errors,


00:15:30.980 --> 00:15:34.060
but it's really efficient because it doesn't do much work.


00:15:34.060 --> 00:15:34.900
- Yeah.


00:15:34.900 --> 00:15:38.660
- Yeah, people who maybe don't know,


00:15:38.660 --> 00:15:40.100
FastAPI, the name would indicate


00:15:40.100 --> 00:15:41.940
it's only for building APIs,


00:15:41.940 --> 00:15:43.900
but you can build web apps with it as well.


00:15:43.900 --> 00:15:45.380
And it's pretty good at that.


00:15:45.380 --> 00:15:48.260
So I mean, basically like all that.


00:15:48.260 --> 00:15:50.020
- Yeah, especially if you check out Michael's courses,


00:15:50.020 --> 00:15:52.740
he's got like two courses on building web apps.


00:15:52.740 --> 00:15:53.780
- Thanks, I do.


00:15:53.780 --> 00:15:56.860
And I also have some sort of template extensions for it


00:15:56.860 --> 00:15:57.700
that make it easier.


00:15:57.700 --> 00:16:00.140
All right, data science libraries.


00:16:00.140 --> 00:16:01.260
I don't know how I feel about this one.


00:16:01.260 --> 00:16:02.100
Do you use NumPy?


00:16:02.100 --> 00:16:03.980
Well, yes, but if you use other libraries,


00:16:03.980 --> 00:16:05.580
then you also use NumPy, so.


00:16:06.700 --> 00:16:09.460
- Yeah, it's like all of these are using NumPy, so.


00:16:09.460 --> 00:16:11.940
- Exactly, exactly.


00:16:11.940 --> 00:16:14.180
A bunch of other stuff.


00:16:14.180 --> 00:16:15.420
Look at that for unit testing.


00:16:15.420 --> 00:16:18.300
Would it surprise you that pytest is winning?


00:16:18.300 --> 00:16:19.140
- No.


00:16:19.140 --> 00:16:21.340
- It just overtook none this year, didn't it?


00:16:21.340 --> 00:16:24.000
(both laughing)


00:16:24.000 --> 00:16:28.940
- Yeah, so.


00:16:28.940 --> 00:16:32.420
- All right, ORM's SQLAlchemy is ahead


00:16:32.420 --> 00:16:35.340
and then there's Django ORM.


00:16:35.340 --> 00:16:37.620
I mean, Django is tied to Django, SQLAlchemy is broad.


00:16:37.620 --> 00:16:38.720
So there's that.


00:16:38.720 --> 00:16:42.460
And then kind of the none of the ORM world


00:16:42.460 --> 00:16:43.780
is raw SQL at 16%.


00:16:43.780 --> 00:16:45.080
That's pretty interesting.


00:16:45.080 --> 00:16:49.540
Postgres is the most common database by far at 43%.


00:16:49.540 --> 00:16:52.700
Then you have SQLite, which is a little bit of a side case.


00:16:52.700 --> 00:16:54.900
You can use it directly, but it's also used for development.


00:16:54.900 --> 00:16:57.620
And then MySQL, the MongoDB, and then Redis,


00:16:57.620 --> 00:16:59.120
and then Microsoft SQL Server.


00:16:59.120 --> 00:17:01.020
- Yeah.


00:17:03.140 --> 00:17:05.100
Actually SQL Server and Oracle are higher


00:17:05.100 --> 00:17:08.500
than I would have expected, but that's okay.


00:17:08.500 --> 00:17:09.900
- Well, I think what you're gonna find


00:17:09.900 --> 00:17:13.500
is that there's like certain places,


00:17:13.500 --> 00:17:16.040
especially in the enterprise,


00:17:16.040 --> 00:17:18.140
where it's like we're a SQL Server shop


00:17:18.140 --> 00:17:20.780
or we're an Oracle shop and our DBAs manage our databases.


00:17:20.780 --> 00:17:24.260
So here you put in a, you file a ticket


00:17:24.260 --> 00:17:25.520
and they'll create a database for you.


00:17:25.520 --> 00:17:26.360
That kind of thing.


00:17:26.360 --> 00:17:28.460
- Yeah, or there's already an existing database


00:17:28.460 --> 00:17:30.220
and you're connecting to it or something.


00:17:30.220 --> 00:17:32.520
- Yep, yep, exactly, exactly.


00:17:32.520 --> 00:17:34.720
All right, let's keep going.


00:17:34.720 --> 00:17:37.920
Cloud platforms, AWS is at the top.


00:17:37.920 --> 00:17:39.840
Then you got Google Cloud at 50%,


00:17:39.840 --> 00:17:42.160
then GCP, Google Cloud Platform,


00:17:42.160 --> 00:17:44.400
then Azure, then Heroku, DigitalOcean.


00:17:44.400 --> 00:17:46.040
Linode has made it on the list here.


00:17:46.040 --> 00:17:51.040
So, you know, former or sometimes sponsor of the show.


00:17:51.040 --> 00:17:53.120
It's good for them.


00:17:53.120 --> 00:17:56.400
And let's see, how do you run stuff in the cloud?


00:17:56.400 --> 00:17:57.240
Let's skip over this.


00:17:57.240 --> 00:17:58.440
I think a bunch of interesting,


00:17:58.440 --> 00:18:00.800
a few more interesting things and we'll call it.


00:18:02.480 --> 00:18:06.840
Compared to 2020, Linux and macOS popularity decreased


00:18:06.840 --> 00:18:10.840
by 5% while Windows usage has risen by 10%.


00:18:10.840 --> 00:18:13.720
- Wow.


00:18:13.720 --> 00:18:15.840
- Yeah, where the Windows people now double,


00:18:15.840 --> 00:18:17.520
more than double the macOS people


00:18:17.520 --> 00:18:19.560
and are almost rivaling the Linux people.


00:18:19.560 --> 00:18:24.120
- I think that's just towards the growth of Python.


00:18:24.120 --> 00:18:28.000
Python's just making it more into


00:18:28.000 --> 00:18:29.760
everybody's using it sort of thing.


00:18:30.680 --> 00:18:34.040
- Yeah, and there's also a Windows subsystem for Linux.


00:18:34.040 --> 00:18:35.320
It's been coming along pretty strong,


00:18:35.320 --> 00:18:37.600
which makes Windows more viable,


00:18:37.600 --> 00:18:42.340
have more parity with your cloud targets, right?


00:18:42.340 --> 00:18:46.120
And Felix out in the audience says,


00:18:46.120 --> 00:18:47.080
"Because of WSL?"


00:18:47.080 --> 00:18:48.400
Yeah, maybe.


00:18:48.400 --> 00:18:50.680
Okay, let's see, a few more things.


00:18:50.680 --> 00:18:52.160
Documentation, it's cool they're asking


00:18:52.160 --> 00:18:54.160
about what documentation frameworks you use.


00:18:54.160 --> 00:18:55.560
This one's interesting to me.


00:18:55.560 --> 00:18:58.700
What's your main editor, VS Code or PyCharm?


00:18:59.960 --> 00:19:01.760
I asked this question a lot at the end of Talk Python


00:19:01.760 --> 00:19:03.920
and it feels like VS Code, VS Code, VS Code, VS Code


00:19:03.920 --> 00:19:05.240
is what people are saying all the time,


00:19:05.240 --> 00:19:08.440
but it's 35% VS Code, 31% PyCharm.


00:19:08.440 --> 00:19:10.520
And Brian, right there for you, 7% Vim.


00:19:10.520 --> 00:19:13.120
But. (laughs)


00:19:13.120 --> 00:19:14.680
- Okay.


00:19:14.680 --> 00:19:15.520
Yeah.


00:19:15.520 --> 00:19:16.560
- I just teased you.


00:19:16.560 --> 00:19:17.400
- Yeah.


00:19:17.400 --> 00:19:21.560
To be fair, it's both VS Code, it's all three,


00:19:21.560 --> 00:19:24.760
or top four for me, but yeah.


00:19:24.760 --> 00:19:25.600
- Yeah, exactly.


00:19:25.600 --> 00:19:27.720
Well, often you probably just use Vim bindings


00:19:27.720 --> 00:19:29.180
within the other two, right?


00:19:29.180 --> 00:19:30.180
- Yep.


00:19:30.180 --> 00:19:31.020
- Yeah.


00:19:31.020 --> 00:19:34.180
Let's see, I think also,


00:19:34.180 --> 00:19:36.500
maybe another interesting breakdown


00:19:36.500 --> 00:19:41.500
is that if you look at the usage scenarios,


00:19:41.500 --> 00:19:46.300
or the type of development done with the editors,


00:19:46.300 --> 00:19:47.120
you get different answers.


00:19:47.120 --> 00:19:51.380
So like for data science,


00:19:51.380 --> 00:19:54.260
you've got more PyCharm,


00:19:54.260 --> 00:19:55.820
and for web development,


00:19:55.820 --> 00:19:58.060
wait, I think, hold on, did I have that right?


00:19:58.060 --> 00:20:00.520
No, for data science, you have a lot more VS Code


00:20:00.520 --> 00:20:03.320
for web development, you have more PyCharm


00:20:03.320 --> 00:20:05.920
and you have a lot less other in data science,


00:20:05.920 --> 00:20:06.980
AKA Jupyter.


00:20:06.980 --> 00:20:11.480
Yeah. Okay.


00:20:11.480 --> 00:20:13.960
How did you learn about your editor?


00:20:13.960 --> 00:20:17.440
By far, first one here is from a friend.


00:20:17.440 --> 00:20:21.800
So basically friends like push editors, like drug dealers,


00:20:21.800 --> 00:20:22.640
like you gotta get out.


00:20:22.640 --> 00:20:23.460
What are you doing?


00:20:23.460 --> 00:20:24.300
I think get in here and I'll just get it.


00:20:24.300 --> 00:20:27.940
- Oh, I think it's like, if I'm watching somebody


00:20:27.940 --> 00:20:30.260
do something cool, I wanna do it also.


00:20:30.260 --> 00:20:31.100
- Yeah, exactly.


00:20:31.100 --> 00:20:32.140
You sit down next year and you're like,


00:20:32.140 --> 00:20:32.980
how did you do that?


00:20:32.980 --> 00:20:33.820
That's awesome.


00:20:33.820 --> 00:20:34.660
I want that feature, right?


00:20:34.660 --> 00:20:36.500
I think you're probably right.


00:20:36.500 --> 00:20:39.620
Okay, let's just bust down a few things better.


00:20:39.620 --> 00:20:41.760
One, do you know, or what do you think


00:20:41.760 --> 00:20:43.480
about the new developer in residence role?


00:20:43.480 --> 00:20:46.820
This is Lukas Schlinger that's going on right now.


00:20:46.820 --> 00:20:49.220
77% are like, the what?


00:20:49.220 --> 00:20:51.860
Never heard of it.


00:20:51.860 --> 00:20:56.640
So maybe like we got a little more advocacy job to do here,


00:20:56.640 --> 00:21:00.020
but he's been doing a great job really speeding things up


00:21:00.020 --> 00:21:01.900
and sort of greasing the wheels


00:21:01.900 --> 00:21:05.060
of open source contributions and whatnot.


00:21:05.060 --> 00:21:07.060
- I, 14%-- - Yeah, but I'm gonna take it


00:21:07.060 --> 00:21:09.840
like design, because if design's done well,


00:21:09.840 --> 00:21:11.580
nobody knows it's there.


00:21:11.580 --> 00:21:13.260
And I think the same thing.


00:21:13.260 --> 00:21:15.560
I think if he's doing his job really, really well,


00:21:15.560 --> 00:21:18.460
most people won't notice, things will just work better.


00:21:18.460 --> 00:21:21.220
- Yep. (laughs)


00:21:21.220 --> 00:21:22.260
Quick real-time follow-up.


00:21:22.260 --> 00:21:23.100
Felix out in the audience says,


00:21:23.100 --> 00:21:24.540
"I use PyCharm because of Michael."


00:21:24.540 --> 00:21:26.500
Ah, that's nice. (laughs)


00:21:26.500 --> 00:21:31.060
I think it should have been one of the options in the survey because of Michael.


00:21:31.060 --> 00:21:35.140
Oh, come on. That's awesome. But no, let's see.


00:21:35.140 --> 00:21:36.300
There's a bunch of questions about that.


00:21:36.300 --> 00:21:39.140
And the final thing I want to touch on is Python packaging.


00:21:39.140 --> 00:21:41.260
let's see here,


00:21:41.260 --> 00:21:45.140
which tools related to Python packaging do you use directly?


00:21:45.140 --> 00:21:50.500
And we've talked about poetry. We've talked about, flit,


00:21:50.500 --> 00:21:52.780
pip in V and so on.


00:21:52.940 --> 00:21:57.940
And 81% of the people are like, I use pip for packaging.


00:21:57.940 --> 00:22:02.380
And compare, as opposed to Flutter.


00:22:02.380 --> 00:22:04.700
And then compare, sort of parallel to that is


00:22:04.700 --> 00:22:08.020
for virtual environment, do you use the,


00:22:08.020 --> 00:22:10.060
what do you use for virtual environments basically?


00:22:10.060 --> 00:22:12.780
Like 42% is like, I just use the built-in one


00:22:12.780 --> 00:22:15.980
or I use the virtual EMV wrapper.


00:22:15.980 --> 00:22:20.980
And then it's like poetry, pip, EMV, talks and so on.


00:22:21.060 --> 00:22:23.020
There's a few, I don't know what this is.


00:22:23.020 --> 00:22:28.380
- Yeah, well, I'm glad they included that


00:22:28.380 --> 00:22:31.320
'cause one of the original questions didn't include


00:22:31.320 --> 00:22:34.380
like the built-in VNV and that's,


00:22:34.380 --> 00:22:36.320
I think that's what most people use.


00:22:36.320 --> 00:22:39.140
- It is, yeah, yeah, absolutely.


00:22:39.140 --> 00:22:41.940
All right, well, I think there's more in my progress bar


00:22:41.940 --> 00:22:44.340
here, this is a super detailed report,


00:22:44.340 --> 00:22:45.620
link into it in the show notes,


00:22:45.620 --> 00:22:46.900
so just go over there and check it out


00:22:46.900 --> 00:22:48.140
if you wanna see all the cool graphs


00:22:48.140 --> 00:22:50.140
and play with the interactive aspects.


00:22:50.140 --> 00:22:53.140
But thanks again to the PSF and JetBrains


00:22:53.140 --> 00:22:53.980
for putting this together.


00:22:53.980 --> 00:22:56.020
It's really good to have this insight


00:22:56.020 --> 00:22:58.620
and these projections of where things are going.


00:22:58.620 --> 00:23:01.780
- Yeah. - All right.


00:23:01.780 --> 00:23:04.380
- Hey, I'm gonna grab the next one.


00:23:04.380 --> 00:23:06.300
Ooh, we did this smoothly this time.


00:23:06.300 --> 00:23:07.140
Nice.


00:23:07.140 --> 00:23:12.140
So, GinConfig is just gin actually,


00:23:12.140 --> 00:23:16.500
but the project's called GinConfig.


00:23:17.540 --> 00:23:20.700
And it's kind of a neat little thing.


00:23:20.700 --> 00:23:23.700
It's a different way to think about configuration files.


00:23:23.700 --> 00:23:27.860
So like you have your PyProject,


00:23:27.860 --> 00:23:31.700
or you have .toml files, you could have .ini files.


00:23:31.700 --> 00:23:34.260
There's a lot of ways to have configuration files,


00:23:34.260 --> 00:23:38.740
but Jen takes the perspective of,


00:23:38.740 --> 00:23:43.740
"Oh, well, what if you're not really into all of that stuff


00:23:43.740 --> 00:23:45.940
and you're a machine learning person


00:23:45.940 --> 00:23:48.100
and you just have a whole bunch of stuff to configure


00:23:48.100 --> 00:23:50.260
and you're changing stuff a lot.


00:23:50.260 --> 00:23:51.980
Maybe let's make it easier.


00:23:51.980 --> 00:23:56.980
So I actually came across this because of Vincent,


00:23:56.980 --> 00:24:01.140
let's say Vincent Warmerdam.


00:24:01.140 --> 00:24:06.140
He's got an excellent intro to Gin on his CalmCode site.


00:24:06.140 --> 00:24:09.420
And the idea is you've got this,


00:24:09.420 --> 00:24:13.500
you just have for a function that you want to,


00:24:13.500 --> 00:24:14.860
in your code, you got some code


00:24:14.860 --> 00:24:17.940
and you have like part of it that you want configurable,


00:24:17.940 --> 00:24:22.620
you just slap a gen configurable decorator onto it.


00:24:22.620 --> 00:24:25.300
And then all of the parameters to that function


00:24:25.300 --> 00:24:28.500
are now something that can show up in a config file.


00:24:28.500 --> 00:24:29.900
And it's not an any file,


00:24:29.900 --> 00:24:31.780
I actually don't know the exact syntax,


00:24:31.780 --> 00:24:33.140
but it just kind of looks like Python.


00:24:33.140 --> 00:24:38.140
It's a, you just have names like in this example


00:24:38.140 --> 00:24:43.420
that I'm showing, there's a file called simulate,


00:24:43.420 --> 00:24:45.980
and there's actually a function called simulate


00:24:45.980 --> 00:24:48.880
and a parameter called in samples.


00:24:48.880 --> 00:24:51.640
And in your config file, you can just say


00:24:51.640 --> 00:24:55.960
simulate.in_samples equals 100 or something like that.


00:24:55.960 --> 00:24:56.840
- Oh, wow.


00:24:56.840 --> 00:25:00.520
This is like, it basically sets the default parameters


00:25:00.520 --> 00:25:02.860
for all your functions you're calling.


00:25:02.860 --> 00:25:05.000
- Yeah, the ones that you wanna be configurable


00:25:05.000 --> 00:25:07.520
and you just do that.


00:25:07.520 --> 00:25:09.720
Now it's still where you can still set defaults


00:25:09.720 --> 00:25:14.720
within your code and just like you normally would.


00:25:14.720 --> 00:25:17.200
And then you can configure the ones


00:25:17.200 --> 00:25:18.880
that you want to be different than the defaults.


00:25:18.880 --> 00:25:21.640
So that's a possibility.


00:25:21.640 --> 00:25:23.520
And there's a whole bunch of,


00:25:23.520 --> 00:25:25.240
I'm gonna expand this a little bit.


00:25:25.240 --> 00:25:28.180
There's a whole bunch of different things


00:25:28.180 --> 00:25:31.560
that Vincent goes through, like required settings.


00:25:31.560 --> 00:25:35.740
You can have, you can specify like a dot, what is it?


00:25:36.880 --> 00:25:40.640
gin.required as a function, and it makes it so that,


00:25:40.640 --> 00:25:43.360
or as your parameter, and then it makes it so that


00:25:43.360 --> 00:25:47.400
your user has to put it in their config file.


00:25:47.400 --> 00:25:48.620
That's kind of cool.


00:25:48.620 --> 00:25:49.980
And then you can also,


00:25:49.980 --> 00:25:53.740
if you don't want somebody to configure something,


00:25:53.740 --> 00:25:55.880
you can mark it as,


00:25:55.880 --> 00:26:00.280
oh, he's got blacklist the in samples.


00:26:00.280 --> 00:26:01.960
So if you want, like in this example,


00:26:01.960 --> 00:26:04.080
he's got a simulate function with two parameters,


00:26:04.080 --> 00:26:05.960
random func and in samples,


00:26:05.960 --> 00:26:07.860
you want people to configure the random func,


00:26:07.860 --> 00:26:10.400
but you don't want them to touch the end samples,


00:26:10.400 --> 00:26:13.620
you can say don't do that.


00:26:13.620 --> 00:26:15.100
>> Yeah, it's neat.


00:26:15.100 --> 00:26:17.040
>> There's a whole bunch of cool features around it


00:26:17.040 --> 00:26:20.860
like being able to specify different functions.


00:26:20.860 --> 00:26:25.540
You can name things and do it to say,


00:26:25.540 --> 00:26:28.080
his example, he's got random functions.


00:26:28.080 --> 00:26:32.660
If you can specify one of the other,


00:26:32.660 --> 00:26:35.900
one or the other, like a random triangle function,


00:26:35.900 --> 00:26:38.860
you can specify a function and assign it to that.


00:26:38.860 --> 00:26:40.660
He's got named things.


00:26:40.660 --> 00:26:45.540
It's a really, it's an interesting way


00:26:45.540 --> 00:26:47.420
to think about configuration.


00:26:47.420 --> 00:26:52.220
And the motivation section of the documentation for Jin


00:26:52.220 --> 00:26:56.500
says that often modern machine learning experiments


00:26:56.500 --> 00:27:00.900
require just configuring a whole bunch of parameters.


00:27:00.900 --> 00:27:03.460
and then you're tweaking them and stuff.


00:27:03.460 --> 00:27:07.220
And to have that be as easy as possible


00:27:07.220 --> 00:27:08.940
and as simple as possible,


00:27:08.940 --> 00:27:12.140
because, and you're gonna add some


00:27:12.140 --> 00:27:13.660
and take some away and things like that


00:27:13.660 --> 00:27:15.260
because some things you want configured


00:27:15.260 --> 00:27:16.980
and then you decide not to,


00:27:16.980 --> 00:27:21.260
not having to go through a config parser system


00:27:21.260 --> 00:27:23.300
and just making it as trivial as possible


00:27:23.300 --> 00:27:25.900
to add parameters, I think is a really cool idea.


00:27:25.900 --> 00:27:26.740
So.


00:27:26.740 --> 00:27:27.580
- It is a cool idea.


00:27:27.580 --> 00:27:31.180
It reminds me of dependency injection a little bit.


00:27:31.180 --> 00:27:32.020
- Yeah.


00:27:32.020 --> 00:27:34.540
- Where you would configure,


00:27:34.540 --> 00:27:39.220
say if somebody asked for a function


00:27:39.220 --> 00:27:41.920
that implements this or that goes here,


00:27:41.920 --> 00:27:43.620
this is the data access layer to use,


00:27:43.620 --> 00:27:46.620
or here's the ORM I want you to pick this time.


00:27:46.620 --> 00:27:48.420
It's not super common in Python,


00:27:48.420 --> 00:27:50.620
but it's pretty common in a lot of languages,


00:27:50.620 --> 00:27:52.860
and it feels a little bit like that.


00:27:52.860 --> 00:27:56.580
We configure stuff so we have these parameters


00:27:56.580 --> 00:27:58.680
that we might use for testing or something,


00:27:58.680 --> 00:28:01.800
but it just, they get filled in automatically.


00:28:01.800 --> 00:28:04.580
Right, even Fax API has that, for example.


00:28:04.580 --> 00:28:05.420
Yeah.


00:28:05.420 --> 00:28:07.720
Pretty cool.


00:28:07.720 --> 00:28:09.280
- Somebody in the audience says,


00:28:09.280 --> 00:28:13.000
isn't Gin used with Go?


00:28:13.000 --> 00:28:14.400
And I'm not sure about that,


00:28:14.400 --> 00:28:19.160
but Gin is not an officially supported Google product,


00:28:19.160 --> 00:28:24.080
but it's under the Google, like GitHub repo group.


00:28:24.080 --> 00:28:25.880
So maybe.


00:28:25.880 --> 00:28:26.720
- Yeah, maybe.


00:28:26.720 --> 00:28:29.760
It does look very Python-like though,


00:28:29.760 --> 00:28:31.720
for the config files, and that's cool.


00:28:31.720 --> 00:28:32.540
- Yeah.


00:28:32.540 --> 00:28:34.440
- Oh, good one.


00:28:34.440 --> 00:28:37.040
All right, let me switch back before I swap over.


00:28:37.040 --> 00:28:38.240
Okay, here we go.


00:28:38.240 --> 00:28:41.360
Now, this next one, I think,


00:28:41.360 --> 00:28:45.120
universally will be well accepted.


00:28:45.120 --> 00:28:46.520
Although the comment section about it


00:28:46.520 --> 00:28:48.720
was a little bit rough and tumble,


00:28:48.720 --> 00:28:51.360
nonetheless, I think it should be universally


00:28:51.360 --> 00:28:52.380
exciting to everyone.


00:28:52.380 --> 00:28:55.560
And this comes to us from Eduardo Orochina,


00:28:55.560 --> 00:28:59.800
who sent over this article that said,


00:28:59.800 --> 00:29:01.020
the, what's it called?


00:29:01.020 --> 00:29:03.800
The Python 3.11 performance benchmarks


00:29:03.800 --> 00:29:05.780
are looking fantastic.


00:29:05.780 --> 00:29:07.640
And oh boy, are they?


00:29:07.640 --> 00:29:11.840
So we're talking beta code six months out, right?


00:29:11.840 --> 00:29:15.040
And still, still we've got some pretty neat stuff.


00:29:15.040 --> 00:29:18.000
So this links over to an article


00:29:18.000 --> 00:29:21.280
with that same title by Michael Larabelle.


00:29:21.280 --> 00:29:23.240
Basically says, look,


00:29:23.240 --> 00:29:27.060
we took a whole bunch of different performance benchmarks


00:29:27.060 --> 00:29:31.360
for Python and ran them on Python 3.11 beta,


00:29:31.360 --> 00:29:33.500
which this is the thing I was hinting at,


00:29:33.500 --> 00:29:36.300
like you might really want to consider this


00:29:36.300 --> 00:29:39.300
for if you're thinking, should we upgrade from nine to 10?


00:29:39.300 --> 00:29:42.300
Maybe you wanna just go straight to 11, right?


00:29:42.300 --> 00:29:45.460
I mean, and you know, sort of a side thought, Brian,


00:29:45.460 --> 00:29:47.880
isn't it awesome that the one that goes like


00:29:47.880 --> 00:29:51.620
crazy performance, this one goes to 11.


00:29:51.620 --> 00:29:54.280
(both laughing)


00:29:54.280 --> 00:29:58.060
All right, so they show all the stuff


00:29:58.060 --> 00:29:58.900
that they're testing on,


00:29:58.900 --> 00:30:02.780
like AMD Ryzen 16 core 32 with hyper-threading,


00:30:02.780 --> 00:30:06.620
the motherboard, I mean, like down to the motherboard


00:30:06.620 --> 00:30:08.580
and the chip set and the memory and all that.


00:30:08.580 --> 00:30:11.840
So a pretty decent stuff.


00:30:11.840 --> 00:30:15.500
And then also the build commands


00:30:15.500 --> 00:30:16.580
and all sorts of things here.


00:30:16.580 --> 00:30:18.980
So pretty repeatable, I think,


00:30:20.100 --> 00:30:22.080
rather than just like, hey, I ran it


00:30:22.080 --> 00:30:27.080
and here's a graph without axes or something like that.


00:30:27.080 --> 00:30:29.460
So you can kind of click through here


00:30:29.460 --> 00:30:31.440
and you see some pictures and it says, all right,


00:30:31.440 --> 00:30:32.620
well, there's the Pi Bench,


00:30:32.620 --> 00:30:35.340
which I think is like the standard simple one.


00:30:35.340 --> 00:30:38.420
It says, look at this, the Python 3.11 beta


00:30:38.420 --> 00:30:43.100
is faster than 3.10, which by the way,


00:30:43.100 --> 00:30:45.180
was slightly slower than the previous ones.


00:30:45.180 --> 00:30:49.160
But what is that, 10% or something?


00:30:49.160 --> 00:30:52.060
So already actually 16% better.


00:30:52.060 --> 00:30:54.460
So that's already pretty awesome.


00:30:54.460 --> 00:30:55.980
But there's a whole bunch of other ones.


00:30:55.980 --> 00:30:57.700
They did one called Go.


00:30:57.700 --> 00:30:59.420
I don't know what these benchmarks are.


00:30:59.420 --> 00:31:00.940
This is, I don't think this has anything to do


00:31:00.940 --> 00:31:02.340
with the language Go.


00:31:02.340 --> 00:31:04.080
It's just the name of the benchmark.


00:31:04.080 --> 00:31:06.780
And then there's two to three and chaos.


00:31:06.780 --> 00:31:07.860
That one sounds like the funnest.


00:31:07.860 --> 00:31:09.380
But if you look at this Go one,


00:31:09.380 --> 00:31:15.380
this one is like almost 50% faster, 50% faster.


00:31:15.380 --> 00:31:18.180
That's insane, right?


00:31:18.180 --> 00:31:19.820
- Yeah, wow.


00:31:19.820 --> 00:31:22.860
- And you come down to the two to three is,


00:31:22.860 --> 00:31:26.180
these are all estimates 25, 20% faster,


00:31:26.180 --> 00:31:30.600
say 40% faster with the chaos one.


00:31:30.600 --> 00:31:34.220
Come down to the float operations


00:31:34.220 --> 00:31:37.220
and Python 3.10 was already better than the others,


00:31:37.220 --> 00:31:39.820
but this is again, maybe 30% faster.


00:31:39.820 --> 00:31:43.140
And let's keep rolling to the next page.


00:31:43.140 --> 00:31:46.340
You just kind of see this across the board,


00:31:46.340 --> 00:31:48.340
better, better, some of them are super better.


00:31:48.340 --> 00:31:49.540
Some are like a little bit better,


00:31:49.540 --> 00:31:51.620
like PathLab's better, but not crazy.


00:31:51.620 --> 00:31:56.300
Ray tracing is like, again, 40% better here.


00:31:56.300 --> 00:31:58.180
And you keep going.


00:31:58.180 --> 00:32:02.660
There's another one with this huge crypto pi AES,


00:32:02.660 --> 00:32:04.540
some sort of encryption thing.


00:32:04.540 --> 00:32:07.140
So there's just a bunch of, a couple of these are,


00:32:07.140 --> 00:32:08.460
there's like this one at the end, you're like,


00:32:08.460 --> 00:32:09.780
oh wait, this one got way worse.


00:32:09.780 --> 00:32:14.780
Be careful, 'cause it says more is better on this composition


00:32:14.780 --> 00:32:16.060
I guess is the results here.


00:32:16.060 --> 00:32:19.400
Like how much more computing power do you get


00:32:19.400 --> 00:32:21.340
per CPU cycle or whatever?


00:32:21.340 --> 00:32:23.300
What is that?


00:32:23.300 --> 00:32:24.260
That's a massive jump.


00:32:24.260 --> 00:32:26.140
You saw a little bit better improvements


00:32:26.140 --> 00:32:29.020
from 3.8 to 3.9, 3.9 to 3.10,


00:32:29.020 --> 00:32:32.140
but 3.10 to 11 is like a 40%,


00:32:32.140 --> 00:32:36.540
yeah, 41% better on the beta before it's even final.


00:32:36.540 --> 00:32:38.940
- Wow.


00:32:38.940 --> 00:32:40.540
- That's pretty exciting, right?


00:32:40.540 --> 00:32:42.260
- That's very exciting.


00:32:42.260 --> 00:32:44.600
- And actually, I think,


00:32:44.600 --> 00:32:47.300
I'm curious what some of these negative comments are,


00:32:47.300 --> 00:32:50.140
but the interesting thing is to run lots


00:32:50.140 --> 00:32:54.920
of different metrics and lots of different benchmarks


00:32:54.920 --> 00:32:58.540
and having them all be, it's faster,


00:32:58.540 --> 00:33:01.660
kind of means that, I mean, I take it as,


00:33:01.660 --> 00:33:03.320
you know, your mileage may vary,


00:33:03.320 --> 00:33:04.620
but it's gonna be better


00:33:04.620 --> 00:33:07.540
for whatever you're doing probably.


00:33:07.540 --> 00:33:08.660
- Yeah, yeah, yeah.


00:33:08.660 --> 00:33:10.460
It feels like this is a thing you could just install


00:33:10.460 --> 00:33:11.540
and things get better.


00:33:11.540 --> 00:33:13.540
The negative comments are mostly like,


00:33:13.540 --> 00:33:16.540
"Well, if Python was so slow, it could be made this faster,


00:33:16.540 --> 00:33:18.540
then Python's a crappy language."


00:33:18.540 --> 00:33:21.540
I've summed up like 65 comments right there.


00:33:21.540 --> 00:33:23.540
[laughs]


00:33:23.540 --> 00:33:31.540
By the way, I interviewed Guido van Rassum and Mark Shannon


00:33:31.540 --> 00:33:33.540
a little while ago about this whole project,


00:33:33.540 --> 00:33:35.540
about making Python five times--


00:33:35.540 --> 00:33:37.540
not 40%, but five times faster.


00:33:37.540 --> 00:33:40.540
And the goal is to make it a little bit faster like this,


00:33:40.540 --> 00:33:42.900
each release for five releases in a row.


00:33:42.900 --> 00:33:46.140
And because of compounding, that'll get you to like 5%.


00:33:46.140 --> 00:33:48.980
So it looks like they're delivering, which is awesome.


00:33:48.980 --> 00:33:51.060
- Yeah, this is good.


00:33:51.060 --> 00:33:52.180
- Yeah. - Cool.


00:33:52.180 --> 00:33:53.020
- Cool, cool.


00:33:53.020 --> 00:33:53.840
All right.


00:33:53.840 --> 00:33:57.320
Yeah, I think that's it for all of our items.


00:33:57.320 --> 00:33:59.820
Got any extras?


00:33:59.820 --> 00:34:03.660
- No, I was gonna pull up the,


00:34:03.660 --> 00:34:05.940
so yeah, this one goes to 11.


00:34:05.940 --> 00:34:08.380
If people don't know that, that's a Spinal Tap reference.


00:34:08.380 --> 00:34:10.960
(laughing)


00:34:10.960 --> 00:34:12.140
- Yeah, exactly.


00:34:12.140 --> 00:34:13.860
All right, I got a few extras to throw out real quick.


00:34:13.860 --> 00:34:18.100
Python 3.10.5 is out with a bunch of bug fixes,


00:34:18.100 --> 00:34:20.500
like what happens if you create an F string


00:34:20.500 --> 00:34:22.500
that doesn't have a closing curly,


00:34:22.500 --> 00:34:24.580
and just a bunch of crashes and bug fixes.


00:34:24.580 --> 00:34:26.240
So if you've been running into issues,


00:34:26.240 --> 00:34:28.260
you know, maybe there's a decent amount of stuff


00:34:28.260 --> 00:34:30.140
in the changelog here.


00:34:30.140 --> 00:34:31.380
- Nice.


00:34:31.380 --> 00:34:32.220
- People can check that out.


00:34:32.220 --> 00:34:35.620
Also, real quick, people might, if they're on a Mac,


00:34:35.620 --> 00:34:37.340
they might check out Raycast,


00:34:37.340 --> 00:34:40.420
which is a replacement for the command space spotlight thing


00:34:40.420 --> 00:34:42.380
that has like all these developer plugins.


00:34:42.380 --> 00:34:46.060
So you can do like interact with your GitHub repo


00:34:46.060 --> 00:34:48.100
through command space and stuff.


00:34:48.100 --> 00:34:49.920
You can create little macros


00:34:49.920 --> 00:34:51.820
and there's a bunch of extensions.


00:34:51.820 --> 00:34:55.300
Like this thing's free, at least for not for team


00:34:55.300 --> 00:34:56.480
if you're not on a team,


00:34:56.480 --> 00:34:59.380
but there's a bunch of different things you can get


00:34:59.380 --> 00:35:04.380
that are cool like managing processes, doing searches,


00:35:05.060 --> 00:35:08.960
VS Code project management from command space and whatnot.


00:35:08.960 --> 00:35:11.440
The one that I set up is I can now do command space


00:35:11.440 --> 00:35:12.640
and then just type PyPI


00:35:12.640 --> 00:35:15.080
and then it'll just search PyPI for whatever I type.


00:35:15.080 --> 00:35:17.840
Like here's an example of typing PyPI, then FastAPI


00:35:17.840 --> 00:35:20.760
and it'll like pull up all the FastAPI packages.


00:35:20.760 --> 00:35:23.960
So anyway, people might find that fun to check out.


00:35:23.960 --> 00:35:25.220
- Yeah, that's cool.


00:35:25.220 --> 00:35:26.480
- Yeah, it's pretty neat.


00:35:26.480 --> 00:35:31.360
All right, well, I think I'll not talk about my other one


00:35:31.360 --> 00:35:34.740
and then joke, shall we close it out with a joke?


00:35:34.740 --> 00:35:36.420
- Yeah, let's do a joke.


00:35:36.420 --> 00:35:40.380
- So I think this ties really well back to the PSF survey.


00:35:40.380 --> 00:35:42.620
We talked about, well, what framework do you use?


00:35:42.620 --> 00:35:44.180
What data science framework do you use?


00:35:44.180 --> 00:35:46.180
Or what web framework do you wanna use?


00:35:46.180 --> 00:35:49.940
Django or Flask or FastAPI or what?


00:35:49.940 --> 00:35:53.040
So here's one that is a pretty interesting analysis.


00:35:53.040 --> 00:35:53.980
And the title is,


00:35:53.980 --> 00:35:56.980
why wouldn't you choose Parrot for your next application?


00:35:56.980 --> 00:35:59.580
Not a framework, but literally a parrot.


00:35:59.580 --> 00:36:03.140
This is compared to machine learning.


00:36:03.140 --> 00:36:05.540
So it has like this breakdown of features,


00:36:05.540 --> 00:36:09.060
like a feature table, and it has a parrot,


00:36:09.060 --> 00:36:10.340
which literally just has a picture of a parrot.


00:36:10.340 --> 00:36:11.900
And this is machine learning algorithms


00:36:11.900 --> 00:36:13.740
with a neural network.


00:36:13.740 --> 00:36:15.420
And then it lists off the features,


00:36:15.420 --> 00:36:17.620
learns random phrases, check, check.


00:36:17.620 --> 00:36:22.380
Doesn't understand anything about what it learns,


00:36:22.380 --> 00:36:24.000
check, check.


00:36:24.000 --> 00:36:26.580
Occasionally speaks nonsense, check, check.


00:36:26.580 --> 00:36:29.300
Is a cute birdie parrot, check, fail.


00:36:29.300 --> 00:36:31.960
(both laughing)


00:36:32.900 --> 00:36:35.900
Why wouldn't you choose this, Brian?


00:36:35.900 --> 00:36:37.740
- This is funny.


00:36:37.740 --> 00:36:39.100
I love it.


00:36:39.100 --> 00:36:41.660
- Yeah, pretty good, pretty good stuff.


00:36:41.660 --> 00:36:43.620
- I actually reminds me of like,


00:36:43.620 --> 00:36:44.860
I have to pull up this article.


00:36:44.860 --> 00:36:47.780
So I was reading about some machine learning stuff


00:36:47.780 --> 00:36:51.420
to try to get models like even closer and closer to reality.


00:36:51.420 --> 00:36:53.620
There's a whole bunch of tricks people do.


00:36:53.620 --> 00:36:56.260
And then there's some analysis of like,


00:36:56.260 --> 00:36:59.620
sometimes it's actually not doing anything more


00:36:59.620 --> 00:37:01.540
than just a linear regression.


00:37:01.540 --> 00:37:04.940
So yeah, try simple first.


00:37:04.940 --> 00:37:06.740
- Yeah, yeah, yeah, yeah, for sure.


00:37:06.740 --> 00:37:09.580
They're using artificial intelligence


00:37:09.580 --> 00:37:10.780
to make the computer decide.


00:37:10.780 --> 00:37:12.020
No, it's an if statement.


00:37:12.020 --> 00:37:16.260
It's just computers deciding things the old fashioned way.


00:37:16.260 --> 00:37:17.700
- Yeah, yeah.


00:37:17.700 --> 00:37:19.900
- Awesome, all right, well, thanks for being here.


00:37:19.900 --> 00:37:20.740
Thanks everybody for listening.


00:37:20.740 --> 00:37:21.560
- Thank you.


00:37:21.560 --> 00:37:22.400
- Bye. - See ya.

