WEBVTT

00:00:00.960 --> 00:00:01.660
Hey, Brian.

00:00:01.660 --> 00:00:02.520
Hey.

00:00:02.520 --> 00:00:04.160
Let's kick this off.

00:00:04.160 --> 00:00:04.680
Hello, everyone.

00:00:04.680 --> 00:00:05.360
Thanks for being here.

00:00:05.360 --> 00:00:05.920
Thanks for watching.

00:00:05.920 --> 00:00:07.340
Thanks for replaying all the things.

00:00:07.340 --> 00:00:11.360
Hello, and welcome to Python Bytes,

00:00:11.360 --> 00:00:13.100
where we deliver Python news and headlines

00:00:13.100 --> 00:00:15.420
directly to your earbuds.

00:00:15.420 --> 00:00:21.460
This is episode 404, recorded October 7th, 2024.

00:00:21.460 --> 00:00:22.980
I'm Michael Kennedy.

00:00:22.980 --> 00:00:24.640
And I'm Brian Okken.

00:00:24.640 --> 00:00:28.760
And this episode is brought to you by Scout APM.

00:00:28.760 --> 00:00:30.520
We will, of course, tell you more about them later.

00:00:30.520 --> 00:00:33.520
The link is in the podcast player show notes right at the top.

00:00:33.520 --> 00:00:39.520
Brian, I've been looking for this episode for a while,

00:00:39.520 --> 00:00:41.400
and I just can't find it, man.

00:00:41.400 --> 00:00:43.600
I was like, where do I go?

00:00:43.600 --> 00:00:44.700
404.

00:00:44.700 --> 00:00:45.940
Everywhere I go, it's 404.

00:00:45.940 --> 00:00:46.880
What's going on?

00:00:46.880 --> 00:00:49.840
Yeah, I don't know.

00:00:49.840 --> 00:00:51.680
We'll find it.

00:00:51.680 --> 00:00:54.580
It's going to be a journey.

00:00:54.580 --> 00:00:56.620
We're going to try to get our way through it.

00:00:56.820 --> 00:00:59.640
Speaking of a journey, you want to stay in touch with us,

00:00:59.640 --> 00:01:03.100
hit Python Bytes.fm, click on newsletter, enter your info there.

00:01:03.100 --> 00:01:04.800
We'll keep you up to date.

00:01:04.800 --> 00:01:06.160
Brian will send you some show notes.

00:01:06.160 --> 00:01:10.260
Find us on Mastodon and other social places,

00:01:10.260 --> 00:01:14.020
and even subscribe right here on YouTube if you're watching the video.

00:01:15.900 --> 00:01:20.760
And with that, were you able to find an item for your first item today?

00:01:20.760 --> 00:01:22.560
Well, I almost didn't.

00:01:22.560 --> 00:01:23.980
So, okay.

00:01:23.980 --> 00:01:27.360
The first item, I really wanted to cover Python 3.13,

00:01:27.360 --> 00:01:32.520
because Python 3.13 is released on October 7th,

00:01:32.520 --> 00:01:35.660
and today is, check notes, October 7th.

00:01:36.320 --> 00:01:38.140
So, it's today, right?

00:01:38.140 --> 00:01:43.580
So, I went to python.org, and go, well, the latest,

00:01:43.580 --> 00:01:45.500
it still says latest is 3.12.

00:01:45.500 --> 00:01:47.940
So, they're working on it, Thomas Wooters and others.

00:01:47.940 --> 00:01:52.180
It's a process to get it out, but it's really out already.

00:01:52.180 --> 00:01:53.360
So, you just can't see it.

00:01:53.360 --> 00:01:55.660
If you go to downloads, it still says 3.12.

00:01:55.660 --> 00:01:57.340
I'm sure it'll be updated soon.

00:01:57.740 --> 00:02:01.880
However, we've got the link for 3.13.0.

00:02:01.880 --> 00:02:03.740
It's really not that complicated.

00:02:03.740 --> 00:02:07.360
Downloads release python-3130.

00:02:07.360 --> 00:02:10.380
And then you got it.

00:02:10.380 --> 00:02:13.700
So, it's got a stable release of 3.13.0.

00:02:13.700 --> 00:02:17.320
I've been playing with it this morning, and I'm having a lot of fun.

00:02:17.320 --> 00:02:20.740
If you go down to the bottom of this link,

00:02:20.740 --> 00:02:24.340
there's where the installers are, the pre-built installers,

00:02:24.340 --> 00:02:25.520
if you want to grab those.

00:02:26.260 --> 00:02:29.580
Or you can install it yourself, if you want, or build it yourself.

00:02:29.580 --> 00:02:33.020
But I'm on a Mac right now, so I grabbed the Mac installer.

00:02:33.020 --> 00:02:37.580
And I want to cover some of the new stuff in 3.13,

00:02:37.580 --> 00:02:40.540
but I really wanted to play with the multi-threading stuff,

00:02:40.540 --> 00:02:41.560
which I haven't yet.

00:02:41.560 --> 00:02:43.880
I just wanted to make sure it was enabled.

00:02:43.880 --> 00:02:45.780
And there's a bit of a trick.

00:02:45.780 --> 00:02:50.340
So, if you look in, maybe it's not in here.

00:02:50.340 --> 00:02:51.560
It's in the What's New page.

00:02:51.560 --> 00:02:52.800
So, if you go to the What's New,

00:02:53.100 --> 00:02:59.600
it does talk about the Python, the macOS, and Windows installers.

00:02:59.600 --> 00:03:01.860
And there's a link somewhere in here.

00:03:02.740 --> 00:03:04.680
But we'll include the link also.

00:03:04.680 --> 00:03:10.060
That when you're installing it, and on a Mac, when I did it,

00:03:10.060 --> 00:03:11.980
you go through this install process.

00:03:11.980 --> 00:03:17.620
You have to hit customize and click the free-threaded.

00:03:17.620 --> 00:03:20.780
Because free-threading is off by default.

00:03:20.780 --> 00:03:23.340
So, when you install it, you have to turn it on.

00:03:23.880 --> 00:03:25.580
So, just remember that.

00:03:25.580 --> 00:03:29.220
And I will play with the free-threading later.

00:03:29.220 --> 00:03:31.760
So, what do we have new in 3.13?

00:03:31.760 --> 00:03:35.320
I think we've covered this before, but now we actually have 3.13,

00:03:35.320 --> 00:03:36.220
so we can play with it.

00:03:36.220 --> 00:03:40.580
We have the interactive interpreter changes,

00:03:40.580 --> 00:03:43.520
which actually, let's back up a little bit.

00:03:43.520 --> 00:03:45.120
This isn't even called out here.

00:03:45.120 --> 00:03:48.780
My favorite feature of 3.13 is exit.

00:03:48.780 --> 00:03:51.660
Oh, I guess it is here.

00:03:51.660 --> 00:03:56.380
Direct REPL support for help exit and quit.

00:03:56.380 --> 00:04:00.240
And thank you, thank you, thank you, whoever worked on this.

00:04:00.240 --> 00:04:03.360
Because it used to say, oh, did you mean to exit out?

00:04:03.360 --> 00:04:07.060
You have to type exit with the parans or quit with the parans.

00:04:07.600 --> 00:04:10.900
And if you know what I want to do, just do it.

00:04:10.900 --> 00:04:12.740
So, you know it does.

00:04:12.740 --> 00:04:16.400
I can imagine somebody was like,

00:04:16.400 --> 00:04:18.500
well, what if we have a variable named exit

00:04:18.500 --> 00:04:19.620
and you want to see its value?

00:04:19.620 --> 00:04:23.100
But if there's no variable to find, just quit.

00:04:23.100 --> 00:04:23.840
I love it.

00:04:23.840 --> 00:04:27.800
So, exit and quit now work.

00:04:27.800 --> 00:04:29.160
I didn't know quit worked.

00:04:29.160 --> 00:04:29.720
That's neat.

00:04:29.720 --> 00:04:33.900
So, the other couple of things in interactive,

00:04:33.900 --> 00:04:35.800
there's a lot of stuff in the interactive REPL

00:04:36.480 --> 00:04:37.700
that's changed.

00:04:37.700 --> 00:04:40.140
Multi-line editing, amazing.

00:04:40.140 --> 00:04:43.260
So, you type in a multi-line thing

00:04:43.260 --> 00:04:45.600
and you get the three dots, which is great.

00:04:45.600 --> 00:04:49.560
But when you want to go and type something wrong

00:04:49.560 --> 00:04:50.740
and you want to go change that,

00:04:50.740 --> 00:04:52.460
now you can go back

00:04:52.460 --> 00:04:56.000
and you can just hit the up arrow and it works.

00:04:56.000 --> 00:04:57.680
It's great.

00:04:57.680 --> 00:04:59.700
So, I'm really enjoying that.

00:04:59.700 --> 00:05:02.880
There's F1 for command history.

00:05:02.880 --> 00:05:05.740
History is, we've had history before,

00:05:05.740 --> 00:05:07.540
but now, if you exit

00:05:07.540 --> 00:05:09.240
and then start the REPL again,

00:05:09.240 --> 00:05:10.780
history is still there.

00:05:10.780 --> 00:05:12.460
It preserves all of your history

00:05:12.460 --> 00:05:12.900
from the session.

00:05:12.900 --> 00:05:13.340
Oh, that's nice.

00:05:13.340 --> 00:05:16.360
Super nice for when you're debugging something,

00:05:16.360 --> 00:05:17.100
trying it out.

00:05:17.100 --> 00:05:19.280
And the colors are amazing.

00:05:19.280 --> 00:05:21.540
So, they've turned on colors by default.

00:05:21.540 --> 00:05:24.440
So, in prompts and tracebacks.

00:05:24.680 --> 00:05:27.240
So, even just having the little prompt be in a color,

00:05:27.240 --> 00:05:27.940
it's nice.

00:05:27.940 --> 00:05:28.760
It helps.

00:05:28.760 --> 00:05:30.100
So, love that.

00:05:30.100 --> 00:05:32.260
We've also got improved error messages.

00:05:32.260 --> 00:05:36.500
Like, before, if you named, like,

00:05:36.500 --> 00:05:38.980
random is built in, one of the built-in things.

00:05:38.980 --> 00:05:40.880
But if you named a module named random,

00:05:40.880 --> 00:05:42.120
it would just mess up.

00:05:42.120 --> 00:05:44.420
And it would, like, it would say stuff like,

00:05:44.420 --> 00:05:47.040
you know, module random has no attribute.

00:05:47.840 --> 00:05:49.840
But now, it says, hey,

00:05:49.840 --> 00:05:52.500
you've already, consider renaming your own module

00:05:52.500 --> 00:05:53.240
something else,

00:05:53.240 --> 00:05:55.300
because you're messing up the built-in.

00:05:55.300 --> 00:05:58.240
So, if you rename them,

00:05:58.240 --> 00:05:59.980
if you name a module or a script,

00:05:59.980 --> 00:06:01.860
the same thing as a built-in,

00:06:01.860 --> 00:06:05.280
or now, as one of your installed third-party libraries,

00:06:05.280 --> 00:06:07.900
Python will tell you that you've messed up,

00:06:07.900 --> 00:06:08.620
which is nice.

00:06:09.160 --> 00:06:11.060
There's other improvements, too.

00:06:11.060 --> 00:06:15.040
Like, if you misspell a keyword argument,

00:06:15.040 --> 00:06:20.040
it will suggest that maybe you had the correct spelling.

00:06:20.040 --> 00:06:21.040
It will suggest that.

00:06:21.040 --> 00:06:22.060
That's pretty cool.

00:06:22.060 --> 00:06:25.240
And then, of course, there's lots of changes in 3.13.

00:06:25.240 --> 00:06:28.040
But the REPL, I'm excited about.

00:06:28.040 --> 00:06:30.460
I'm also excited about the error messages

00:06:30.460 --> 00:06:32.360
and free-threaded Python.

00:06:32.360 --> 00:06:34.040
So, there's a lot of other stuff, too.

00:06:34.040 --> 00:06:35.880
So, check out the What's New.

00:06:36.340 --> 00:06:39.840
But I really am looking forward to playing with the free-threading.

00:06:39.840 --> 00:06:41.820
Yeah, this is amazing.

00:06:41.820 --> 00:06:43.340
I'm really excited to see this here.

00:06:43.340 --> 00:06:46.560
I actually can't believe that free-threaded Python is a thing.

00:06:46.560 --> 00:06:48.140
I know.

00:06:48.140 --> 00:06:49.340
It's like...

00:06:49.340 --> 00:06:50.160
It's been so long.

00:06:50.160 --> 00:06:52.020
The journey's been so long.

00:06:52.020 --> 00:06:53.460
I mean, I was walking this morning,

00:06:53.460 --> 00:06:55.260
and I saw a pig flying through the sky.

00:06:55.260 --> 00:07:00.260
It had imported free-threaded Python,

00:07:00.260 --> 00:07:01.720
rather than imported anti-gravity.

00:07:01.720 --> 00:07:02.280
That's what it did.

00:07:02.280 --> 00:07:03.400
Yes, yeah.

00:07:03.860 --> 00:07:07.140
So, I know that a lot of people have worked a lot,

00:07:07.140 --> 00:07:08.920
long and hard, to make that work.

00:07:08.920 --> 00:07:10.360
So, I'm looking forward to it.

00:07:10.360 --> 00:07:14.380
Now, free-threading is still officially experimental.

00:07:14.380 --> 00:07:18.680
So, I don't know what that means,

00:07:18.680 --> 00:07:20.160
if they're going to take it back from...

00:07:20.160 --> 00:07:21.820
Please don't take it away from us.

00:07:21.820 --> 00:07:22.820
But we'll see.

00:07:22.820 --> 00:07:25.520
Yeah, the original PEP that got it accepted,

00:07:25.520 --> 00:07:27.080
703 or something like that,

00:07:27.080 --> 00:07:27.400
said,

00:07:27.820 --> 00:07:29.660
we are allowing this in,

00:07:29.660 --> 00:07:30.980
but if it causes too much trouble,

00:07:30.980 --> 00:07:32.000
we're taking it back out,

00:07:32.000 --> 00:07:33.560
which I've never seen in a PEP.

00:07:33.560 --> 00:07:34.440
Maybe it's happened before,

00:07:34.440 --> 00:07:35.340
but we approve it,

00:07:35.340 --> 00:07:37.180
but we might unapprove it.

00:07:37.180 --> 00:07:39.080
We might unapprove it.

00:07:39.080 --> 00:07:40.960
We'll turn this car around.

00:07:40.960 --> 00:07:42.480
If you keep fighting,

00:07:42.480 --> 00:07:43.420
we'll turn it around.

00:07:43.420 --> 00:07:44.020
Yeah.

00:07:44.020 --> 00:07:44.960
That's right.

00:07:44.960 --> 00:07:46.100
Don't make me turn this car...

00:07:46.100 --> 00:07:46.960
Don't make me pull over.

00:07:48.760 --> 00:07:49.880
Speaking of pulling over,

00:07:49.880 --> 00:07:54.480
this was supposed to be out a week ago, Brian.

00:07:54.480 --> 00:07:55.860
Yeah.

00:07:55.860 --> 00:07:56.760
Yeah.

00:07:56.760 --> 00:07:58.140
And apparently,

00:07:58.140 --> 00:08:00.040
it was pushed back

00:08:00.040 --> 00:08:03.040
due to performance issues

00:08:03.040 --> 00:08:04.080
or some kind of issue

00:08:04.080 --> 00:08:06.040
with the incremental GC.

00:08:06.040 --> 00:08:07.520
Right.

00:08:07.520 --> 00:08:09.280
And I'll put the Python,

00:08:09.280 --> 00:08:11.200
the discuss.python.org link

00:08:11.200 --> 00:08:12.080
in my extras,

00:08:12.080 --> 00:08:12.880
but I won't.

00:08:12.880 --> 00:08:15.620
I'm not going to cover it separately,

00:08:15.620 --> 00:08:17.320
because I kind of feel relevant.

00:08:17.320 --> 00:08:18.000
Things are out now.

00:08:18.160 --> 00:08:19.520
But yeah,

00:08:19.520 --> 00:08:20.040
very cool.

00:08:20.040 --> 00:08:22.200
All right.

00:08:22.200 --> 00:08:23.820
Well, what do you got for us next,

00:08:23.820 --> 00:08:24.100
Michael?

00:08:24.100 --> 00:08:24.960
Well,

00:08:24.960 --> 00:08:28.980
let's stick with some core language topics

00:08:28.980 --> 00:08:30.120
and stuff like that.

00:08:30.120 --> 00:08:32.100
So I want to talk about

00:08:32.100 --> 00:08:35.400
PyPI bandwidth

00:08:35.400 --> 00:08:39.560
and PEP 759 external wheel hosting.

00:08:39.560 --> 00:08:41.440
So right now,

00:08:41.440 --> 00:08:43.860
when you pip install,

00:08:43.860 --> 00:08:45.760
UV pip install,

00:08:45.760 --> 00:08:46.260
whatever,

00:08:46.260 --> 00:08:47.820
you go to get something,

00:08:47.960 --> 00:08:48.880
and you,

00:08:48.880 --> 00:08:51.540
you as a publisher of a package like Flask,

00:08:51.540 --> 00:08:54.180
you send that to pypia.org,

00:08:54.180 --> 00:08:55.700
maybe as a wheel,

00:08:55.700 --> 00:08:58.640
maybe as a multi-platform variations of different wheels,

00:08:58.640 --> 00:09:00.280
if it's got to compile differently or something,

00:09:00.280 --> 00:09:02.860
and then people pip install that,

00:09:02.860 --> 00:09:03.780
and it downloads from there.

00:09:03.780 --> 00:09:06.960
That results in an insane amount of traffic.

00:09:07.480 --> 00:09:10.940
I actually want to talk a little bit more about that later in general.

00:09:10.940 --> 00:09:13.360
But it's an insane amount of traffic,

00:09:13.360 --> 00:09:17.220
over 66 petabytes a month,

00:09:17.220 --> 00:09:21.940
which is six-figure level of bandwidth costs.

00:09:22.940 --> 00:09:23.960
And luckily,

00:09:23.960 --> 00:09:23.960
and luckily,

00:09:23.960 --> 00:09:25.660
Fastly,

00:09:25.660 --> 00:09:26.660
the CDN company,

00:09:26.660 --> 00:09:30.460
is basically donating all that bandwidth

00:09:30.460 --> 00:09:33.980
at reasonably high expense for them,

00:09:33.980 --> 00:09:35.340
probably not the same as retail,

00:09:35.620 --> 00:09:37.600
but whatever wholesale that is in bandwidth,

00:09:37.600 --> 00:09:38.960
I'm sure it's still a lot.

00:09:38.960 --> 00:09:43.220
And they announced a five-year plan

00:09:43.220 --> 00:09:46.680
or five-year commitment to the PSF to do that at PyCon.

00:09:46.680 --> 00:09:47.240
All right,

00:09:47.240 --> 00:09:48.520
they're on the big keynote stage.

00:09:48.520 --> 00:09:49.180
That was nice.

00:09:49.340 --> 00:09:49.660
Thank you,

00:09:49.660 --> 00:09:50.160
Fastly.

00:09:50.160 --> 00:09:51.060
However,

00:09:51.060 --> 00:09:54.260
there's still problems with this,

00:09:54.260 --> 00:09:55.800
even though they're covering it.

00:09:55.800 --> 00:09:58.120
What if Fastly changes their mind eventually?

00:09:58.120 --> 00:09:59.980
But more importantly,

00:09:59.980 --> 00:10:02.580
there's hard limits on how large

00:10:02.580 --> 00:10:07.260
your project's overall usage

00:10:07.260 --> 00:10:09.320
on PyPI.org can be.

00:10:09.320 --> 00:10:12.080
I think it's no individual package

00:10:12.080 --> 00:10:14.040
can be bigger than 100 megs,

00:10:14.040 --> 00:10:16.060
and you can't have 10 gigs total

00:10:16.060 --> 00:10:17.900
across all platforms,

00:10:17.900 --> 00:10:19.060
across all releases.

00:10:19.060 --> 00:10:20.660
Things like that, right?

00:10:20.660 --> 00:10:21.820
You can't apply for exceptions,

00:10:21.820 --> 00:10:23.660
but it's not great.

00:10:23.660 --> 00:10:25.860
What if you could just say,

00:10:25.860 --> 00:10:27.100
here's my wheel,

00:10:27.100 --> 00:10:29.420
but when you actually download it,

00:10:29.420 --> 00:10:30.420
download it from over there.

00:10:30.420 --> 00:10:33.120
Download it off of Microsoft.com

00:10:33.120 --> 00:10:34.540
if it's a Microsoft package,

00:10:34.540 --> 00:10:36.760
or download it off of,

00:10:36.760 --> 00:10:37.780
you know,

00:10:37.780 --> 00:10:39.780
explosion.ai

00:10:39.780 --> 00:10:42.660
if it's some sort of spacey package.

00:10:42.660 --> 00:10:44.180
Those things have to be quite large.

00:10:44.180 --> 00:10:45.900
A lot of their models that you pip install.

00:10:45.900 --> 00:10:47.560
I think they have to get an exception

00:10:47.560 --> 00:10:48.580
to be even uploaded

00:10:48.580 --> 00:10:49.320
in the first place.

00:10:49.320 --> 00:10:49.920
All right,

00:10:49.920 --> 00:10:50.780
so that's what this is about.

00:10:50.780 --> 00:10:51.560
It's by Barry Warsaw.

00:10:51.560 --> 00:10:52.660
Ethan Smith,

00:10:52.660 --> 00:10:54.960
delegate is Donald Stuffed,

00:10:54.960 --> 00:10:57.020
who is a person

00:10:57.020 --> 00:10:58.900
largely behind the rewrite

00:10:58.900 --> 00:11:00.300
of PyPI.org.

00:11:00.300 --> 00:11:03.720
So here's the deal.

00:11:03.720 --> 00:11:04.400
Brian,

00:11:04.400 --> 00:11:06.300
if you had a wheel,

00:11:06.300 --> 00:11:08.280
which is the metadata

00:11:08.280 --> 00:11:09.120
about a package,

00:11:09.780 --> 00:11:12.040
and all of the wheel,

00:11:12.040 --> 00:11:13.220
and all of its binary details

00:11:13.220 --> 00:11:14.160
and its source code

00:11:14.160 --> 00:11:14.580
and all that,

00:11:14.580 --> 00:11:16.460
and you ripped off

00:11:16.460 --> 00:11:18.360
a lot of the wheel stuff,

00:11:18.360 --> 00:11:19.960
like the binary bits,

00:11:19.960 --> 00:11:21.440
what would you be left with?

00:11:21.440 --> 00:11:24.160
I don't know.

00:11:24.700 --> 00:11:25.140
a rim.

00:11:25.140 --> 00:11:27.720
A wheel,

00:11:27.720 --> 00:11:28.080
rim,

00:11:28.080 --> 00:11:28.480
you know?

00:11:28.480 --> 00:11:29.220
Oh.

00:11:29.220 --> 00:11:30.700
So this PEP defines,

00:11:30.700 --> 00:11:32.960
this PEP literally defines

00:11:32.960 --> 00:11:34.940
a new package format

00:11:34.940 --> 00:11:37.100
called a rim file,

00:11:37.100 --> 00:11:38.480
and the rim file

00:11:38.480 --> 00:11:39.420
is basically the wheel

00:11:39.420 --> 00:11:40.260
without the binary.

00:11:40.260 --> 00:11:41.220
Instead,

00:11:41.220 --> 00:11:41.900
it's got a URL

00:11:41.900 --> 00:11:43.080
to where the binary lives

00:11:43.080 --> 00:11:44.700
and a checksum

00:11:44.700 --> 00:11:45.200
of the binary,

00:11:45.200 --> 00:11:46.280
which may already be there anyway,

00:11:46.280 --> 00:11:46.760
but it's,

00:11:46.760 --> 00:11:49.380
it's left in the rim file,

00:11:49.440 --> 00:11:50.840
if not added to it.

00:11:50.840 --> 00:11:51.520
Okay.

00:11:51.520 --> 00:11:52.420
Interesting.

00:11:52.420 --> 00:11:53.580
So basically,

00:11:53.580 --> 00:11:55.500
you upload just the metadata

00:11:55.500 --> 00:11:57.720
if you want to participate in this,

00:11:57.720 --> 00:11:59.980
and then you point somewhere else.

00:11:59.980 --> 00:12:02.840
And there's a lot of motivation,

00:12:02.840 --> 00:12:04.040
things they tried,

00:12:04.040 --> 00:12:05.160
things that didn't work,

00:12:05.160 --> 00:12:06.200
limits.

00:12:06.200 --> 00:12:07.660
You can see in this pep,

00:12:07.660 --> 00:12:08.540
they list the limits

00:12:08.540 --> 00:12:09.320
that I talked about.

00:12:09.320 --> 00:12:11.820
And all the details,

00:12:11.820 --> 00:12:15.460
but most importantly,

00:12:15.460 --> 00:12:18.900
there's a security section

00:12:18.900 --> 00:12:20.620
way down here.

00:12:20.620 --> 00:12:21.860
I was worried about that.

00:12:21.860 --> 00:12:22.620
So, yeah.

00:12:22.620 --> 00:12:23.060
Yes.

00:12:23.060 --> 00:12:23.980
Here.

00:12:23.980 --> 00:12:27.020
As well as stability constraints.

00:12:27.020 --> 00:12:28.260
So for example,

00:12:28.260 --> 00:12:29.840
the wheel checksum

00:12:29.840 --> 00:12:31.660
must be included in rim files.

00:12:31.660 --> 00:12:32.820
Once it's uploaded,

00:12:32.820 --> 00:12:34.280
just like current wheels,

00:12:34.280 --> 00:12:35.120
it can't change.

00:12:35.120 --> 00:12:35.860
Yeah.

00:12:35.860 --> 00:12:38.160
So here's my metadata.

00:12:38.160 --> 00:12:39.380
That's where the thing lives.

00:12:39.380 --> 00:12:40.980
Here's the hash of it.

00:12:40.980 --> 00:12:43.600
So it can't be tampered with.

00:12:43.600 --> 00:12:46.500
It must be served over HTTPS.

00:12:46.500 --> 00:12:48.380
Okay.

00:12:48.840 --> 00:12:51.400
And you're only allowed to do this

00:12:51.400 --> 00:12:52.640
if you get pre-approved

00:12:52.640 --> 00:12:54.060
by the PyPI admin.

00:12:54.060 --> 00:12:55.060
So it's not just

00:12:55.060 --> 00:12:59.020
all sorts of chaos.

00:12:59.020 --> 00:13:00.100
People just upload

00:13:00.100 --> 00:13:00.980
and stuff everywhere.

00:13:00.980 --> 00:13:02.060
All right.

00:13:02.060 --> 00:13:03.200
But a lot of consideration

00:13:03.200 --> 00:13:04.220
about like malware

00:13:04.220 --> 00:13:05.120
and things like that.

00:13:05.120 --> 00:13:06.120
And also a bunch of stuff

00:13:06.120 --> 00:13:07.420
about stability.

00:13:07.420 --> 00:13:09.600
Like the external wheels

00:13:09.600 --> 00:13:11.200
must be hosted over SSL.

00:13:11.200 --> 00:13:12.880
And not just that,

00:13:12.880 --> 00:13:14.400
but it actually must be signed

00:13:14.400 --> 00:13:17.160
by Mozilla's root certificate store,

00:13:17.160 --> 00:13:18.620
which is interesting.

00:13:18.620 --> 00:13:19.900
And they have,

00:13:19.900 --> 00:13:21.180
they should use CDNs.

00:13:21.180 --> 00:13:22.560
They must be stable,

00:13:22.560 --> 00:13:24.420
et cetera.

00:13:24.420 --> 00:13:25.620
What do you think?

00:13:26.780 --> 00:13:28.380
So who would do this?

00:13:28.380 --> 00:13:29.260
I mean,

00:13:29.260 --> 00:13:30.700
because then the person

00:13:30.700 --> 00:13:32.100
with the package doing this

00:13:32.100 --> 00:13:32.360
would,

00:13:32.360 --> 00:13:33.520
they'd have to pay

00:13:33.520 --> 00:13:34.380
the hosting fees.

00:13:34.380 --> 00:13:37.120
Or get it on GitHub

00:13:37.120 --> 00:13:38.220
and point to it as a raw

00:13:38.220 --> 00:13:38.580
or something,

00:13:38.580 --> 00:13:39.060
you know?

00:13:39.060 --> 00:13:40.260
Oh, yeah.

00:13:40.260 --> 00:13:41.580
Something like that.

00:13:41.580 --> 00:13:42.040
I don't know.

00:13:42.040 --> 00:13:43.060
Oh, okay.

00:13:43.340 --> 00:13:44.840
Or if you're a big company

00:13:44.840 --> 00:13:46.940
and you want to ship

00:13:46.940 --> 00:13:48.380
ML models

00:13:48.380 --> 00:13:51.940
and you'd rather have

00:13:51.940 --> 00:13:53.160
more control over that

00:13:53.160 --> 00:13:54.340
and how it works,

00:13:54.340 --> 00:13:55.080
right?

00:13:55.080 --> 00:13:56.140
You could set that.

00:13:56.140 --> 00:13:56.740
I don't think

00:13:56.740 --> 00:13:58.740
small individuals

00:13:58.740 --> 00:13:59.600
are going to be like,

00:13:59.600 --> 00:13:59.880
hey,

00:13:59.880 --> 00:14:00.740
I'd love to cover

00:14:00.740 --> 00:14:02.620
a terabyte of bandwidth

00:14:02.620 --> 00:14:03.540
charges a month

00:14:03.540 --> 00:14:04.080
for no reason.

00:14:04.080 --> 00:14:05.620
Yeah, right.

00:14:05.620 --> 00:14:06.040
Well,

00:14:06.040 --> 00:14:06.820
also,

00:14:06.820 --> 00:14:07.560
like you said,

00:14:07.560 --> 00:14:08.640
it's somebody

00:14:08.640 --> 00:14:10.120
that's got a,

00:14:10.120 --> 00:14:11.320
it's going to be

00:14:11.320 --> 00:14:11.880
a large one.

00:14:11.880 --> 00:14:12.820
You're not going to do this

00:14:12.820 --> 00:14:14.320
for just a little

00:14:14.320 --> 00:14:15.620
Python-only package.

00:14:15.620 --> 00:14:16.720
Yeah, exactly.

00:14:16.720 --> 00:14:17.600
It's very unlikely.

00:14:17.600 --> 00:14:18.380
Right.

00:14:18.380 --> 00:14:19.400
It's very unlikely.

00:14:19.400 --> 00:14:20.020
So,

00:14:20.020 --> 00:14:21.500
they said this is only

00:14:21.500 --> 00:14:22.280
about hosting

00:14:22.280 --> 00:14:23.660
the binary downloads,

00:14:23.660 --> 00:14:25.260
not packages,

00:14:25.260 --> 00:14:26.580
package indexes,

00:14:26.580 --> 00:14:28.280
package listings,

00:14:28.280 --> 00:14:29.080
none of that stuff

00:14:29.080 --> 00:14:30.180
because that's already

00:14:30.180 --> 00:14:30.860
supported through

00:14:30.860 --> 00:14:31.420
having just

00:14:31.420 --> 00:14:34.100
a separate private

00:14:34.100 --> 00:14:34.960
white label,

00:14:34.960 --> 00:14:36.320
you run it yourself,

00:14:36.320 --> 00:14:38.080
PyPI,

00:14:38.080 --> 00:14:39.860
Mirror,

00:14:39.860 --> 00:14:40.880
something like that,

00:14:40.880 --> 00:14:41.040
right?

00:14:41.040 --> 00:14:41.740
Yeah,

00:14:41.740 --> 00:14:42.660
I think this is cool.

00:14:42.660 --> 00:14:43.060
actually.

00:14:43.060 --> 00:14:44.240
Neat.

00:14:44.240 --> 00:14:44.620
Yeah,

00:14:44.620 --> 00:14:45.460
flexibility is good.

00:14:45.460 --> 00:14:46.640
I think it's,

00:14:46.640 --> 00:14:47.640
I think it's all right.

00:14:47.640 --> 00:14:49.160
So,

00:14:49.160 --> 00:14:49.640
anyway,

00:14:49.640 --> 00:14:50.140
very cool.

00:14:50.140 --> 00:14:50.520
That's,

00:14:50.520 --> 00:14:51.200
that's what I wanted

00:14:51.200 --> 00:14:51.500
to cover.

00:14:51.500 --> 00:14:53.360
And before we move on,

00:14:53.360 --> 00:14:55.720
how about a quick

00:14:55.720 --> 00:14:56.680
shout out to our sponsor?

00:14:56.680 --> 00:14:57.640
Yep.

00:14:57.640 --> 00:15:00.840
Let me tell you

00:15:00.840 --> 00:15:01.380
real quick

00:15:01.380 --> 00:15:02.040
about

00:15:02.040 --> 00:15:03.480
Scout APM.

00:15:03.480 --> 00:15:04.900
They're big supporters

00:15:04.900 --> 00:15:05.740
of Python Bytes,

00:15:05.740 --> 00:15:06.540
so we appreciate

00:15:06.540 --> 00:15:07.260
that very much.

00:15:08.520 --> 00:15:09.580
so if you are

00:15:09.580 --> 00:15:10.720
tired of spending

00:15:10.720 --> 00:15:12.060
hours trying

00:15:12.060 --> 00:15:12.900
to find the root

00:15:12.900 --> 00:15:13.680
cause of issues

00:15:13.680 --> 00:15:14.900
impacting your performance,

00:15:14.900 --> 00:15:15.840
then you owe it to yourself

00:15:15.840 --> 00:15:16.740
to check out

00:15:16.740 --> 00:15:18.220
Scout APM.

00:15:18.220 --> 00:15:19.620
They're a leading

00:15:19.620 --> 00:15:20.520
Python application

00:15:20.520 --> 00:15:21.880
performance monitoring

00:15:21.880 --> 00:15:22.320
tool,

00:15:22.320 --> 00:15:22.920
APM,

00:15:22.920 --> 00:15:24.760
that helps you identify

00:15:24.760 --> 00:15:25.820
and solve performance

00:15:25.820 --> 00:15:26.700
abnormalities

00:15:26.700 --> 00:15:27.780
faster and easier.

00:15:27.780 --> 00:15:29.120
Scout APM

00:15:29.120 --> 00:15:30.060
ties bottlenecks

00:15:30.060 --> 00:15:31.080
such as memory leaks,

00:15:31.080 --> 00:15:32.240
slow database queries,

00:15:32.240 --> 00:15:33.120
background jobs,

00:15:33.260 --> 00:15:33.840
and the dreaded

00:15:33.840 --> 00:15:34.900
N plus one queries

00:15:34.900 --> 00:15:36.180
that you can end up

00:15:36.180 --> 00:15:37.720
if you do lazy loading

00:15:37.720 --> 00:15:39.160
in your ORM

00:15:39.160 --> 00:15:39.760
and then you say,

00:15:39.760 --> 00:15:40.160
oh no,

00:15:40.160 --> 00:15:41.540
why is it so slow?

00:15:41.540 --> 00:15:42.040
Why are you doing

00:15:42.040 --> 00:15:42.940
200 database queries

00:15:42.940 --> 00:15:43.900
for what should be one?

00:15:43.900 --> 00:15:45.320
So you can find out

00:15:45.320 --> 00:15:45.920
things like that.

00:15:45.920 --> 00:15:47.460
And it links it back

00:15:47.460 --> 00:15:48.480
directly to source code

00:15:48.480 --> 00:15:49.420
so you can spend

00:15:49.420 --> 00:15:50.660
less time in the debugger

00:15:50.660 --> 00:15:52.140
and healing logs

00:15:52.140 --> 00:15:53.820
and just finding the problems

00:15:53.820 --> 00:15:54.340
and moving on.

00:15:54.340 --> 00:15:55.960
And you'll love it

00:15:55.960 --> 00:15:56.640
because it's built

00:15:56.640 --> 00:15:57.420
for developers

00:15:57.420 --> 00:15:58.060
by developers.

00:15:58.060 --> 00:15:59.060
It makes it easy

00:15:59.060 --> 00:15:59.720
to get set up.

00:15:59.720 --> 00:16:00.380
Seriously,

00:16:00.380 --> 00:16:00.880
you can do it

00:16:00.880 --> 00:16:02.240
in less than four minutes,

00:16:02.240 --> 00:16:03.080
so that's awesome.

00:16:03.080 --> 00:16:04.020
And the best part

00:16:04.020 --> 00:16:04.820
is the pricing

00:16:04.820 --> 00:16:06.140
is straightforward.

00:16:06.140 --> 00:16:07.380
You only pay

00:16:07.380 --> 00:16:07.820
for the data

00:16:07.820 --> 00:16:08.280
that you use

00:16:08.280 --> 00:16:09.440
with no hidden

00:16:09.440 --> 00:16:10.440
overage fees

00:16:10.440 --> 00:16:11.660
or per seat pricing.

00:16:11.660 --> 00:16:14.020
And I just learned

00:16:14.020 --> 00:16:14.340
this, Brian,

00:16:14.340 --> 00:16:15.040
they also have,

00:16:15.040 --> 00:16:16.480
they provide

00:16:16.480 --> 00:16:17.280
the pro version

00:16:17.280 --> 00:16:17.980
for free

00:16:17.980 --> 00:16:19.480
to all open source projects.

00:16:19.480 --> 00:16:20.100
So if you're

00:16:20.100 --> 00:16:21.440
an open source maintainer

00:16:21.440 --> 00:16:22.100
and you want to

00:16:22.100 --> 00:16:23.320
have Scout APM

00:16:23.320 --> 00:16:24.140
for that project,

00:16:24.140 --> 00:16:26.200
just shoot them a message

00:16:26.200 --> 00:16:26.620
or something

00:16:26.620 --> 00:16:27.440
on their pricing page

00:16:27.440 --> 00:16:27.820
about that.

00:16:27.820 --> 00:16:28.940
So you can start

00:16:28.940 --> 00:16:29.780
your free trial

00:16:29.780 --> 00:16:31.120
and get instant insights

00:16:31.120 --> 00:16:31.720
today.

00:16:32.400 --> 00:16:33.880
visit pythonbytes.fm

00:16:33.880 --> 00:16:34.960
slash Scout.

00:16:34.960 --> 00:16:35.920
The link is in your

00:16:35.920 --> 00:16:36.760
podcast player show notes

00:16:36.760 --> 00:16:37.200
as well.

00:16:37.200 --> 00:16:38.620
And please use that link.

00:16:38.620 --> 00:16:39.920
Don't just search for them

00:16:39.920 --> 00:16:41.640
because otherwise

00:16:41.640 --> 00:16:42.420
they don't think

00:16:42.420 --> 00:16:43.120
you came from us.

00:16:43.120 --> 00:16:44.100
And then they'd stop

00:16:44.100 --> 00:16:44.720
supporting the show.

00:16:44.720 --> 00:16:45.980
So please use our link,

00:16:45.980 --> 00:16:46.760
pythonbytes.fm

00:16:46.760 --> 00:16:47.280
slash Scout.

00:16:47.280 --> 00:16:48.200
Check them out.

00:16:48.200 --> 00:16:49.480
It really supports

00:16:49.480 --> 00:16:50.140
the show.

00:16:50.140 --> 00:16:53.680
Yes, it does.

00:16:53.680 --> 00:16:54.920
It does.

00:16:54.920 --> 00:16:55.200
It does.

00:16:55.200 --> 00:16:55.500
All right.

00:16:56.900 --> 00:16:57.520
How about

00:16:57.520 --> 00:16:58.660
the next one for you?

00:16:58.660 --> 00:16:59.160
I feel like

00:16:59.160 --> 00:17:00.000
just give people

00:17:00.000 --> 00:17:00.600
a little heads up.

00:17:00.600 --> 00:17:01.560
We've got some

00:17:01.560 --> 00:17:02.520
that's a pie test

00:17:02.520 --> 00:17:03.080
coming up here.

00:17:03.080 --> 00:17:03.620
What do we got?

00:17:03.620 --> 00:17:04.740
Well,

00:17:04.740 --> 00:17:07.100
if you didn't know it,

00:17:07.100 --> 00:17:08.380
Python 313 is out.

00:17:08.380 --> 00:17:11.460
So we already

00:17:11.460 --> 00:17:11.960
covered this.

00:17:11.960 --> 00:17:12.440
However,

00:17:12.440 --> 00:17:14.700
what is it's got

00:17:14.700 --> 00:17:15.520
the free threading

00:17:15.520 --> 00:17:16.420
thing going on?

00:17:16.420 --> 00:17:17.160
How do you know

00:17:17.160 --> 00:17:18.440
if your project

00:17:18.440 --> 00:17:19.260
supports it?

00:17:19.500 --> 00:17:20.720
So that's the question

00:17:20.720 --> 00:17:21.960
that Anthony Shaw

00:17:21.960 --> 00:17:23.280
and others at,

00:17:23.280 --> 00:17:24.860
where was this at again?

00:17:24.860 --> 00:17:25.540
Was that

00:17:25.540 --> 00:17:28.080
PyCon JP?

00:17:28.080 --> 00:17:29.040
I think that's

00:17:29.040 --> 00:17:29.780
PyCon Japan.

00:17:29.780 --> 00:17:30.600
Is that right?

00:17:30.600 --> 00:17:32.620
I think so.

00:17:32.620 --> 00:17:33.320
Okay.

00:17:33.320 --> 00:17:34.340
So it was one

00:17:34.340 --> 00:17:34.960
of their sprints.

00:17:34.960 --> 00:17:37.020
Looks like

00:17:37.020 --> 00:17:38.200
seven or eight people,

00:17:38.200 --> 00:17:39.160
Anthony,

00:17:39.160 --> 00:17:39.800
Mike,

00:17:39.800 --> 00:17:40.840
a bunch of people

00:17:40.840 --> 00:17:41.860
worked on this.

00:17:41.860 --> 00:17:42.820
And the idea

00:17:42.820 --> 00:17:44.400
is that

00:17:44.400 --> 00:17:45.240
you'd like to be

00:17:45.240 --> 00:17:45.840
able to test

00:17:45.840 --> 00:17:47.440
that your project

00:17:47.440 --> 00:17:48.120
and your code

00:17:48.120 --> 00:17:48.780
works on the

00:17:48.780 --> 00:17:49.280
free threaded.

00:17:49.980 --> 00:17:50.060
Right?

00:17:50.060 --> 00:17:50.740
So if you're

00:17:50.740 --> 00:17:52.200
like to

00:17:52.200 --> 00:17:52.760
especially

00:17:52.760 --> 00:17:54.660
support libraries

00:17:54.660 --> 00:17:56.200
and packages.

00:17:56.200 --> 00:17:57.660
So what,

00:17:57.660 --> 00:17:58.820
how do you do that?

00:17:58.820 --> 00:18:00.160
And one of the

00:18:00.160 --> 00:18:01.000
thoughts was to

00:18:01.000 --> 00:18:01.600
just test,

00:18:01.600 --> 00:18:01.980
just,

00:18:01.980 --> 00:18:03.260
you just run it,

00:18:03.260 --> 00:18:04.080
but it in

00:18:04.080 --> 00:18:04.780
with a,

00:18:04.780 --> 00:18:06.400
the free threading

00:18:06.400 --> 00:18:07.040
turned on,

00:18:07.040 --> 00:18:08.480
but pytest normally

00:18:08.480 --> 00:18:09.620
runs in single thread

00:18:09.620 --> 00:18:10.980
mode by default.

00:18:10.980 --> 00:18:12.300
So how about

00:18:12.300 --> 00:18:12.860
XDest?

00:18:12.860 --> 00:18:13.380
Cause that's

00:18:13.380 --> 00:18:14.220
multi-processing,

00:18:14.220 --> 00:18:14.460
right?

00:18:14.460 --> 00:18:14.920
Yes,

00:18:14.920 --> 00:18:16.060
it's multi-processing.

00:18:16.060 --> 00:18:16.580
It's not

00:18:16.580 --> 00:18:17.380
multi-threading.

00:18:17.380 --> 00:18:18.300
So

00:18:18.300 --> 00:18:19.960
Anthony and

00:18:19.960 --> 00:18:21.060
others made

00:18:21.060 --> 00:18:21.640
this plugin.

00:18:21.640 --> 00:18:23.100
It's pipe.

00:18:23.100 --> 00:18:23.560
It's called

00:18:23.560 --> 00:18:24.400
pytest dash

00:18:24.400 --> 00:18:25.020
free threaded

00:18:25.020 --> 00:18:26.800
and a link

00:18:26.800 --> 00:18:27.160
in the show

00:18:27.160 --> 00:18:27.360
notes,

00:18:27.360 --> 00:18:27.800
of course,

00:18:27.800 --> 00:18:29.200
but they made

00:18:29.200 --> 00:18:29.600
the plugin

00:18:29.600 --> 00:18:30.140
to be able

00:18:30.140 --> 00:18:30.680
to run,

00:18:30.680 --> 00:18:32.000
run the tests

00:18:32.000 --> 00:18:32.800
in a thread

00:18:32.800 --> 00:18:33.500
pool with

00:18:33.500 --> 00:18:33.900
the guild

00:18:33.900 --> 00:18:35.120
disabled and

00:18:35.120 --> 00:18:36.020
help identify

00:18:36.020 --> 00:18:37.100
that your

00:18:37.100 --> 00:18:37.700
tests are

00:18:37.700 --> 00:18:38.360
thread safe.

00:18:39.080 --> 00:18:39.480
So,

00:18:39.480 --> 00:18:40.280
you know,

00:18:40.280 --> 00:18:40.680
as long as

00:18:40.680 --> 00:18:41.340
your tests

00:18:41.340 --> 00:18:42.500
possibly are

00:18:42.500 --> 00:18:43.300
testing your

00:18:43.300 --> 00:18:44.220
code in

00:18:44.220 --> 00:18:44.720
such a way

00:18:44.720 --> 00:18:45.120
to test

00:18:45.120 --> 00:18:45.400
that,

00:18:45.400 --> 00:18:46.180
great,

00:18:46.180 --> 00:18:47.600
but at least

00:18:47.600 --> 00:18:48.060
your tests

00:18:48.060 --> 00:18:49.340
will be

00:18:49.340 --> 00:18:50.260
free thread

00:18:50.260 --> 00:18:51.120
thread safe

00:18:51.120 --> 00:18:51.620
compatible.

00:18:51.620 --> 00:18:52.500
Anyway,

00:18:52.500 --> 00:18:53.820
they,

00:18:53.820 --> 00:18:55.600
they tested

00:18:55.600 --> 00:18:56.080
the first

00:18:56.080 --> 00:18:56.600
library

00:18:56.600 --> 00:18:58.020
that was

00:18:58.020 --> 00:18:58.700
marked as

00:18:58.700 --> 00:18:59.180
compatible

00:18:59.180 --> 00:18:59.660
with free

00:18:59.660 --> 00:19:00.060
threading.

00:19:00.060 --> 00:19:00.480
I don't know

00:19:00.480 --> 00:19:00.860
how to do

00:19:00.860 --> 00:19:01.160
that.

00:19:01.160 --> 00:19:02.240
So I guess

00:19:02.240 --> 00:19:02.580
that's a

00:19:02.580 --> 00:19:03.120
to-do item

00:19:03.120 --> 00:19:03.420
to look

00:19:03.420 --> 00:19:03.860
that up.

00:19:05.360 --> 00:19:06.000
I think

00:19:06.000 --> 00:19:06.240
it might

00:19:06.240 --> 00:19:06.480
go in

00:19:06.480 --> 00:19:06.580
the

00:19:06.580 --> 00:19:07.220
classifiers

00:19:07.220 --> 00:19:07.740
of the

00:19:07.740 --> 00:19:08.180
package

00:19:08.180 --> 00:19:08.900
metadata.

00:19:08.900 --> 00:19:09.260
I'm not

00:19:09.260 --> 00:19:09.460
sure.

00:19:09.460 --> 00:19:10.420
Oh,

00:19:10.420 --> 00:19:11.120
okay.

00:19:11.120 --> 00:19:12.640
All right.

00:19:12.640 --> 00:19:13.020
Well,

00:19:13.020 --> 00:19:13.380
we'll take a

00:19:13.380 --> 00:19:13.840
look at that.

00:19:13.840 --> 00:19:15.100
Anyway,

00:19:15.100 --> 00:19:17.000
they tested

00:19:17.000 --> 00:19:17.640
one and it

00:19:17.640 --> 00:19:18.200
caused a

00:19:18.200 --> 00:19:18.740
seg fault

00:19:18.740 --> 00:19:20.100
in CPython.

00:19:20.100 --> 00:19:20.960
So not

00:19:20.960 --> 00:19:21.780
really compatible

00:19:21.780 --> 00:19:22.400
if you're

00:19:22.400 --> 00:19:23.040
seg faulting.

00:19:23.040 --> 00:19:24.820
So I

00:19:24.820 --> 00:19:26.040
haven't tried

00:19:26.040 --> 00:19:26.600
this out yet,

00:19:26.600 --> 00:19:27.020
but I'm

00:19:27.020 --> 00:19:27.320
going to try

00:19:27.320 --> 00:19:27.680
it on a

00:19:27.680 --> 00:19:28.780
few projects

00:19:28.780 --> 00:19:29.580
anyway.

00:19:29.580 --> 00:19:30.900
So Python

00:19:30.900 --> 00:19:31.460
free threaded

00:19:31.460 --> 00:19:32.060
will help

00:19:32.060 --> 00:19:33.160
test for

00:19:33.160 --> 00:19:33.480
this.

00:19:33.480 --> 00:19:34.020
Well,

00:19:34.020 --> 00:19:34.340
I think

00:19:34.340 --> 00:19:34.720
this is

00:19:34.720 --> 00:19:35.100
awesome.

00:19:35.100 --> 00:19:37.280
And some

00:19:37.280 --> 00:19:37.760
people might

00:19:37.760 --> 00:19:38.220
perceive this

00:19:38.220 --> 00:19:38.520
like, oh,

00:19:38.520 --> 00:19:38.900
it just

00:19:38.900 --> 00:19:39.180
means a

00:19:39.180 --> 00:19:39.620
performance

00:19:39.620 --> 00:19:40.020
boost.

00:19:40.020 --> 00:19:41.000
But if

00:19:41.000 --> 00:19:41.180
you're

00:19:41.180 --> 00:19:41.520
writing

00:19:41.520 --> 00:19:42.020
code

00:19:42.020 --> 00:19:42.360
that's

00:19:42.360 --> 00:19:42.660
meant

00:19:42.660 --> 00:19:43.000
to be

00:19:43.000 --> 00:19:43.440
supported

00:19:43.440 --> 00:19:44.280
for

00:19:44.280 --> 00:19:44.580
free

00:19:44.580 --> 00:19:44.840
threaded

00:19:44.840 --> 00:19:45.160
Python,

00:19:45.160 --> 00:19:47.220
you should

00:19:47.220 --> 00:19:47.720
test it

00:19:47.720 --> 00:19:48.300
in that

00:19:48.300 --> 00:19:49.180
style as

00:19:49.180 --> 00:19:49.360
well,

00:19:49.360 --> 00:19:50.100
not just

00:19:50.100 --> 00:19:51.600
in some

00:19:51.600 --> 00:19:52.500
limited way,

00:19:52.500 --> 00:19:52.820
right?

00:19:52.820 --> 00:19:53.740
Yeah.

00:19:53.740 --> 00:19:55.280
And also

00:19:55.280 --> 00:19:55.660
just,

00:19:55.660 --> 00:19:58.040
even if

00:19:58.040 --> 00:19:58.400
your tests

00:19:58.400 --> 00:19:58.840
pass,

00:19:58.840 --> 00:19:59.140
I think

00:19:59.140 --> 00:20:00.260
it would

00:20:00.260 --> 00:20:01.200
make sense

00:20:01.200 --> 00:20:01.760
to look

00:20:01.760 --> 00:20:03.460
at the

00:20:03.460 --> 00:20:04.120
different parts

00:20:04.120 --> 00:20:04.400
of your

00:20:04.400 --> 00:20:05.220
library to

00:20:05.220 --> 00:20:05.600
make sure

00:20:05.600 --> 00:20:05.960
that it

00:20:05.960 --> 00:20:06.500
really makes

00:20:06.500 --> 00:20:07.080
sense that

00:20:07.080 --> 00:20:07.580
it's really

00:20:07.580 --> 00:20:08.160
that your

00:20:08.160 --> 00:20:08.560
tests are

00:20:08.560 --> 00:20:09.380
actually testing

00:20:09.380 --> 00:20:10.160
your library

00:20:10.160 --> 00:20:10.820
in such a

00:20:10.820 --> 00:20:11.160
way that

00:20:11.160 --> 00:20:12.320
you have

00:20:12.320 --> 00:20:12.920
fairly good

00:20:12.920 --> 00:20:13.440
confidence.

00:20:13.440 --> 00:20:14.640
But, you

00:20:14.640 --> 00:20:14.760
know,

00:20:14.760 --> 00:20:15.580
mileage may

00:20:15.580 --> 00:20:15.880
vary.

00:20:15.880 --> 00:20:17.720
But this is a

00:20:17.720 --> 00:20:18.680
good step in the

00:20:18.680 --> 00:20:19.180
right direction,

00:20:19.180 --> 00:20:20.500
so thanks to

00:20:20.500 --> 00:20:21.040
Anthony and

00:20:21.040 --> 00:20:21.640
others for doing

00:20:21.640 --> 00:20:21.880
this.

00:20:21.880 --> 00:20:22.820
Yeah, it's

00:20:22.820 --> 00:20:23.020
awesome.

00:20:23.020 --> 00:20:24.420
Speaking of

00:20:24.420 --> 00:20:25.440
Anthony, I was

00:20:25.440 --> 00:20:25.860
not going to

00:20:25.860 --> 00:20:26.400
point this out,

00:20:26.400 --> 00:20:27.060
but now that you

00:20:27.060 --> 00:20:27.880
mentioned it,

00:20:27.880 --> 00:20:29.380
just published an

00:20:29.380 --> 00:20:29.940
episode on

00:20:29.940 --> 00:20:30.960
Talk Python with

00:20:30.960 --> 00:20:31.280
him,

00:20:31.280 --> 00:20:32.160
designing

00:20:32.160 --> 00:20:33.000
effective load

00:20:33.000 --> 00:20:33.680
tests for your

00:20:33.680 --> 00:20:34.480
Python app.

00:20:34.480 --> 00:20:35.120
Nice.

00:20:35.120 --> 00:20:35.980
Yeah, that's a

00:20:35.980 --> 00:20:36.580
really fun one,

00:20:36.580 --> 00:20:37.160
so people can

00:20:37.160 --> 00:20:37.720
check that out.

00:20:37.720 --> 00:20:39.320
But what I'm

00:20:39.320 --> 00:20:40.040
actually talking

00:20:40.040 --> 00:20:40.780
about for this

00:20:40.780 --> 00:20:42.580
section is

00:20:42.580 --> 00:20:43.280
more pytests.

00:20:43.280 --> 00:20:44.180
Brian, how did

00:20:44.180 --> 00:20:44.680
you not get

00:20:44.680 --> 00:20:45.120
this one?

00:20:45.120 --> 00:20:46.200
pytest edit.

00:20:46.200 --> 00:20:47.040
Do you know

00:20:47.040 --> 00:20:47.220
this?

00:20:47.220 --> 00:20:47.820
No.

00:20:47.820 --> 00:20:49.300
Okay, so here's

00:20:49.300 --> 00:20:49.560
the deal.

00:20:49.560 --> 00:20:52.520
You're on the

00:20:52.520 --> 00:20:55.500
terminal CLI

00:20:55.500 --> 00:20:55.900
sitting there

00:20:55.900 --> 00:20:56.440
running something,

00:20:56.640 --> 00:20:57.000
and you run

00:20:57.000 --> 00:20:57.340
into an

00:20:57.340 --> 00:20:57.600
error and

00:20:57.600 --> 00:20:57.780
you're like,

00:20:57.780 --> 00:20:59.980
ah, my test

00:20:59.980 --> 00:21:00.700
crashed, or my

00:21:00.700 --> 00:21:01.360
test failed, rather.

00:21:01.360 --> 00:21:02.760
I just want to

00:21:02.760 --> 00:21:03.200
see what's up.

00:21:03.200 --> 00:21:04.800
So one way to

00:21:04.800 --> 00:21:06.040
do that is to

00:21:06.040 --> 00:21:06.580
see what test

00:21:06.580 --> 00:21:07.700
failed, go open

00:21:07.700 --> 00:21:08.580
your editor, find

00:21:08.580 --> 00:21:09.340
your project, load

00:21:09.340 --> 00:21:10.340
it up, search

00:21:10.340 --> 00:21:10.820
around until you

00:21:10.820 --> 00:21:12.380
find it, or the

00:21:12.380 --> 00:21:13.080
other way is to

00:21:13.080 --> 00:21:14.880
install pytest

00:21:14.880 --> 00:21:15.980
dash edit from

00:21:15.980 --> 00:21:17.880
Mr. Minnow, that's

00:21:17.880 --> 00:21:19.100
the GitHub name, and

00:21:19.100 --> 00:21:19.780
then just type

00:21:19.780 --> 00:21:20.940
pytest dash dash

00:21:20.940 --> 00:21:21.860
dash edit, and

00:21:21.860 --> 00:21:23.300
it'll open a

00:21:23.300 --> 00:21:24.000
pre-configured

00:21:24.000 --> 00:21:25.740
editor to the line of

00:21:25.740 --> 00:21:26.540
the failing test.

00:21:26.540 --> 00:21:28.160
Oh, wow.

00:21:28.160 --> 00:21:29.300
Yeah, so you

00:21:29.300 --> 00:21:30.500
can say pytest

00:21:30.500 --> 00:21:31.100
edit, and it'll

00:21:31.100 --> 00:21:31.580
show you the

00:21:31.580 --> 00:21:32.360
last one, or you

00:21:32.360 --> 00:21:33.720
can say some

00:21:33.720 --> 00:21:34.660
index, so for

00:21:34.660 --> 00:21:35.220
example, you can

00:21:35.220 --> 00:21:36.320
say edit equals

00:21:36.320 --> 00:21:37.100
two, and it'll

00:21:37.100 --> 00:21:38.300
open the third

00:21:38.300 --> 00:21:39.180
failing test, because

00:21:39.180 --> 00:21:39.800
of course, it's

00:21:39.800 --> 00:21:41.100
zero-based, or

00:21:41.100 --> 00:21:41.760
negative two will

00:21:41.760 --> 00:21:42.320
open the second

00:21:42.320 --> 00:21:43.160
to last one, so

00:21:43.160 --> 00:21:43.900
you can kind of

00:21:43.900 --> 00:21:44.900
hone in on it

00:21:44.900 --> 00:21:45.940
with this number

00:21:45.940 --> 00:21:47.040
here, and then

00:21:47.040 --> 00:21:47.700
you just set up

00:21:47.700 --> 00:21:48.160
your editor.

00:21:48.160 --> 00:21:48.800
If you don't

00:21:48.800 --> 00:21:49.760
set it up, you

00:21:49.760 --> 00:21:50.960
get VI or

00:21:50.960 --> 00:21:51.940
Vim or even

00:21:51.940 --> 00:21:52.460
Windows.

00:21:52.460 --> 00:21:54.140
On Windows, you

00:21:54.140 --> 00:21:55.400
get Notepad, so

00:21:55.400 --> 00:21:56.280
I recommend

00:21:56.280 --> 00:21:59.740
picking a

00:21:59.740 --> 00:22:00.240
better editor.

00:22:00.240 --> 00:22:01.900
But anyway, you

00:22:01.900 --> 00:22:02.320
just set an

00:22:02.320 --> 00:22:02.980
environment variable

00:22:02.980 --> 00:22:03.580
to what you want

00:22:03.580 --> 00:22:04.580
your editor to

00:22:04.580 --> 00:22:06.340
be, and I got a

00:22:06.340 --> 00:22:06.980
ton of extras to

00:22:06.980 --> 00:22:07.420
cover, so I don't

00:22:07.420 --> 00:22:07.840
want to go too

00:22:07.840 --> 00:22:08.420
deep on this one,

00:22:08.420 --> 00:22:09.900
but there it is.

00:22:09.900 --> 00:22:10.920
Neat.

00:22:10.920 --> 00:22:13.140
Speaking of

00:22:13.140 --> 00:22:14.440
extras, what do

00:22:14.440 --> 00:22:15.100
you got for us?

00:22:15.100 --> 00:22:15.500
Any?

00:22:15.500 --> 00:22:16.900
I've got zero

00:22:16.900 --> 00:22:17.920
extras this week.

00:22:17.920 --> 00:22:19.240
Good, I must have

00:22:19.240 --> 00:22:19.960
stolen them all.

00:22:19.960 --> 00:22:20.680
Look at my tabs.

00:22:22.960 --> 00:22:23.900
All right, well,

00:22:23.900 --> 00:22:24.440
let's just jump

00:22:24.440 --> 00:22:24.940
into the extras

00:22:24.940 --> 00:22:25.260
then.

00:22:25.260 --> 00:22:28.380
Extra, extra.

00:22:28.380 --> 00:22:28.920
So I got a

00:22:28.920 --> 00:22:29.540
bunch here, but

00:22:29.540 --> 00:22:30.220
they're all pretty

00:22:30.220 --> 00:22:30.520
quick.

00:22:30.520 --> 00:22:31.760
Last week, you

00:22:31.760 --> 00:22:32.680
spoke about

00:22:32.680 --> 00:22:36.860
Jade, D-J-A-D-E,

00:22:36.860 --> 00:22:39.100
for formatting

00:22:39.100 --> 00:22:41.340
Django templates,

00:22:41.340 --> 00:22:41.760
right?

00:22:41.760 --> 00:22:42.500
Kind of like

00:22:42.500 --> 00:22:43.760
black or rough,

00:22:43.760 --> 00:22:44.980
but instead of

00:22:44.980 --> 00:22:45.600
being for Python,

00:22:45.600 --> 00:22:46.800
it's for Django

00:22:46.800 --> 00:22:47.700
templates and HTML

00:22:47.700 --> 00:22:48.880
and so on, which is

00:22:48.880 --> 00:22:49.100
awesome.

00:22:49.100 --> 00:22:49.860
So I'm linking

00:22:49.860 --> 00:22:51.480
to something from

00:22:51.480 --> 00:22:53.660
Adam Chains, Django

00:22:53.660 --> 00:22:54.840
pre-commit hook, or

00:22:54.840 --> 00:22:55.780
sorry, Jade pre-commit

00:22:55.780 --> 00:22:55.920
hook.

00:22:55.920 --> 00:22:56.680
So if you want this

00:22:56.680 --> 00:22:57.320
to just happen

00:22:57.320 --> 00:22:58.880
automatically, there

00:22:58.880 --> 00:22:59.160
you go.

00:22:59.160 --> 00:23:00.160
Super easy, right?

00:23:00.160 --> 00:23:00.720
Cool.

00:23:00.720 --> 00:23:01.300
Yes.

00:23:01.300 --> 00:23:03.400
This one is really

00:23:03.400 --> 00:23:03.620
fun.

00:23:03.620 --> 00:23:04.300
Remember I talked

00:23:04.300 --> 00:23:05.300
about polyfill,

00:23:05.300 --> 00:23:06.780
polyfill.js, and

00:23:06.780 --> 00:23:08.140
somebody took over

00:23:08.140 --> 00:23:09.300
the domain.

00:23:09.300 --> 00:23:10.060
I don't remember

00:23:10.060 --> 00:23:11.100
it was, I think it

00:23:11.100 --> 00:23:13.060
was sold even, but

00:23:13.060 --> 00:23:13.660
if it wasn't sold,

00:23:13.660 --> 00:23:14.520
it was taken over

00:23:14.520 --> 00:23:15.420
because it lapsed or

00:23:15.420 --> 00:23:15.680
whatever.

00:23:15.680 --> 00:23:16.480
However, it got

00:23:16.480 --> 00:23:17.480
into some nefarious

00:23:17.480 --> 00:23:18.800
hands, and they

00:23:18.800 --> 00:23:20.560
took over polyfill.io,

00:23:20.560 --> 00:23:22.980
bootcdn, bootcss,

00:23:22.980 --> 00:23:23.900
static file, and

00:23:23.900 --> 00:23:24.880
they had basically

00:23:24.880 --> 00:23:25.940
rewritten a whole

00:23:25.940 --> 00:23:28.240
bunch of CDN-served

00:23:28.240 --> 00:23:29.720
JavaScript to

00:23:29.720 --> 00:23:30.240
hundreds of

00:23:30.240 --> 00:23:30.760
thousands of

00:23:30.760 --> 00:23:32.080
websites with

00:23:32.080 --> 00:23:32.860
malware that would

00:23:32.860 --> 00:23:33.600
then go on to the

00:23:33.600 --> 00:23:34.300
visitors of those

00:23:34.300 --> 00:23:34.700
websites.

00:23:34.700 --> 00:23:35.280
It's bad.

00:23:35.280 --> 00:23:36.560
The only reason I'm

00:23:36.560 --> 00:23:37.200
bringing this in as a

00:23:37.200 --> 00:23:38.560
quick follow-up is

00:23:38.560 --> 00:23:40.820
they figured out

00:23:40.820 --> 00:23:42.160
all those CDNs,

00:23:42.160 --> 00:23:42.900
all those different

00:23:42.900 --> 00:23:44.180
domains, and all of

00:23:44.180 --> 00:23:46.800
these problems were

00:23:46.800 --> 00:23:47.560
linked to a single

00:23:47.560 --> 00:23:47.920
person.

00:23:47.920 --> 00:23:48.760
How do they know?

00:23:48.760 --> 00:23:50.800
that person had

00:23:50.800 --> 00:23:51.460
published.

00:23:51.460 --> 00:23:52.700
They accidentally

00:23:52.700 --> 00:23:53.560
published their

00:23:53.560 --> 00:23:54.780
Cloudflare secret

00:23:54.780 --> 00:23:55.360
keys.

00:23:55.360 --> 00:23:58.120
That's awesome.

00:23:58.120 --> 00:23:59.520
And so then the

00:23:59.520 --> 00:24:00.760
security researchers

00:24:00.760 --> 00:24:04.920
will, you know,

00:24:04.920 --> 00:24:05.700
they basically logged

00:24:05.700 --> 00:24:06.740
into Cloudflare and

00:24:06.740 --> 00:24:07.520
just looked at their

00:24:07.520 --> 00:24:09.080
cloud setup, which,

00:24:09.080 --> 00:24:10.320
anyway, I think this

00:24:10.320 --> 00:24:10.820
is awesome.

00:24:10.820 --> 00:24:11.580
Yeah.

00:24:14.120 --> 00:24:17.560
funny thing out in the

00:24:17.560 --> 00:24:17.800
audience.

00:24:17.800 --> 00:24:18.400
We'll share that in a

00:24:18.400 --> 00:24:18.560
second.

00:24:18.560 --> 00:24:18.860
All right.

00:24:18.860 --> 00:24:20.220
This one is also really

00:24:20.220 --> 00:24:20.560
cool.

00:24:20.560 --> 00:24:23.360
Over at pythonbytes.fm,

00:24:23.360 --> 00:24:24.920
created that site seven

00:24:24.920 --> 00:24:25.340
years ago.

00:24:25.340 --> 00:24:25.900
How long have we been

00:24:25.900 --> 00:24:26.080
this?

00:24:26.080 --> 00:24:26.480
Eight years?

00:24:26.480 --> 00:24:27.400
Well, when I created it,

00:24:27.400 --> 00:24:27.920
I created it with

00:24:27.920 --> 00:24:29.040
Bootstrap, okay?

00:24:29.040 --> 00:24:30.840
Because Bootstrap was

00:24:30.840 --> 00:24:32.880
probably the nicest way

00:24:32.880 --> 00:24:35.620
at that time to get a

00:24:35.620 --> 00:24:36.620
good-looking site that's

00:24:36.620 --> 00:24:37.660
consistent, responsive,

00:24:37.660 --> 00:24:39.220
all those things up in

00:24:39.220 --> 00:24:39.740
Atom, right?

00:24:39.740 --> 00:24:41.500
Well, if you look at

00:24:41.500 --> 00:24:43.680
the Bootstrap CSS file,

00:24:43.680 --> 00:24:46.640
it's about 140 kilobytes,

00:24:46.640 --> 00:24:48.340
which is a lot to just

00:24:48.340 --> 00:24:49.820
be serving as one of

00:24:49.820 --> 00:24:51.000
your static resources on

00:24:51.000 --> 00:24:51.940
every web request,

00:24:51.940 --> 00:24:52.200
right?

00:24:52.200 --> 00:24:56.340
But it's pretty gnarly.

00:24:56.340 --> 00:24:56.980
You don't want to mess

00:24:56.980 --> 00:24:57.580
with it, right?

00:24:57.580 --> 00:24:58.320
Like, what are you using?

00:24:58.320 --> 00:24:58.820
I don't know.

00:24:58.820 --> 00:25:00.160
And what's the knock-on

00:25:00.160 --> 00:25:00.460
effect?

00:25:00.460 --> 00:25:01.860
So I ran across this

00:25:01.860 --> 00:25:03.220
thing called Purge CSS,

00:25:03.220 --> 00:25:05.400
which is a Node.js CLI

00:25:05.400 --> 00:25:06.300
tool, but it doesn't

00:25:06.300 --> 00:25:06.920
really matter how it's

00:25:06.920 --> 00:25:07.520
implemented, right?

00:25:07.520 --> 00:25:08.500
It's just a CLI tool.

00:25:09.560 --> 00:25:10.620
And you can run this

00:25:10.620 --> 00:25:13.360
thing against your CSS

00:25:13.360 --> 00:25:15.520
file, and you can say,

00:25:15.520 --> 00:25:17.720
hey, this CSS file, I

00:25:17.720 --> 00:25:20.680
would like you to look at

00:25:20.680 --> 00:25:22.120
all the styles that I'm

00:25:22.120 --> 00:25:23.920
using, look at the CSS

00:25:23.920 --> 00:25:25.040
file, and if there's any

00:25:25.040 --> 00:25:26.200
styles in there I'm not

00:25:26.200 --> 00:25:27.240
using, take them out of

00:25:27.240 --> 00:25:28.020
the CSS file.

00:25:28.020 --> 00:25:28.920
Oh, wow.

00:25:28.920 --> 00:25:29.520
Yeah.

00:25:29.520 --> 00:25:31.800
So, and it doesn't have

00:25:31.800 --> 00:25:33.800
to work on just HTML.

00:25:33.800 --> 00:25:35.440
I pointed at chameleon

00:25:35.440 --> 00:25:36.380
templates, or it could be

00:25:36.380 --> 00:25:37.720
Jinja templates, or we just

00:25:37.720 --> 00:25:38.360
talked about Django

00:25:38.360 --> 00:25:38.700
templates.

00:25:38.700 --> 00:25:40.820
you just give it a, like a

00:25:40.820 --> 00:25:42.580
star, star, slash, star,

00:25:42.580 --> 00:25:44.600
whatever your template

00:25:44.600 --> 00:25:48.220
extension is, like .j, or if

00:25:48.220 --> 00:25:48.960
it was Jinja, or whatever.

00:25:48.960 --> 00:25:51.380
And then it'll go through and

00:25:51.380 --> 00:25:52.480
look at all of those that are

00:25:52.480 --> 00:25:53.880
being used, and then it'll rip

00:25:53.880 --> 00:25:55.640
them out, rip out all the

00:25:55.640 --> 00:25:56.200
stuff that wasn't.

00:25:56.200 --> 00:25:57.360
So now, for example, if you go

00:25:57.360 --> 00:26:03.260
to Python bytes.org, and you click

00:26:03.260 --> 00:26:06.140
on the CSS file, it's like 20k,

00:26:06.140 --> 00:26:08.440
25k, something like that.

00:26:08.440 --> 00:26:10.940
So it's six, seven times smaller,

00:26:10.940 --> 00:26:12.300
and all I had to do is run a

00:26:12.300 --> 00:26:13.900
command line thing against it.

00:26:13.900 --> 00:26:18.260
So maybe you're not using enough

00:26:18.260 --> 00:26:18.720
bootstrap.

00:26:19.520 --> 00:26:22.380
I feel like I'm, that's still 20kb of bootstrap.

00:26:22.380 --> 00:26:23.420
That's a lot of bootstrap.

00:26:23.420 --> 00:26:27.920
I love your attitude, but there we go.

00:26:27.920 --> 00:26:35.240
Last week, on the first go-round of 3.13 release,

00:26:35.240 --> 00:26:38.260
there's also Python 3.12.7 released.

00:26:38.780 --> 00:26:40.840
Just so you know, if you're not ready

00:26:40.840 --> 00:26:43.080
for 3.13, there's also a new version

00:26:43.080 --> 00:26:43.640
of 3.12.

00:26:43.640 --> 00:26:47.100
I want to give a quick shout-out to a video

00:26:47.100 --> 00:26:48.220
by Hynek.

00:26:48.220 --> 00:26:51.300
It says, uv is the future of Python

00:26:51.300 --> 00:26:51.780
packaging.

00:26:51.780 --> 00:26:54.260
Snake box emojis.

00:26:54.260 --> 00:26:56.920
Anyway, this is a really good video.

00:26:56.920 --> 00:27:00.040
Hynek is getting his YouTube game on

00:27:00.040 --> 00:27:02.640
quite well, and he's fun to watch,

00:27:02.640 --> 00:27:03.440
so check that out.

00:27:03.440 --> 00:27:05.200
I'll link to that as well.

00:27:05.200 --> 00:27:08.260
And, no, I still got some more.

00:27:08.380 --> 00:27:09.440
Just tabs bumping around.

00:27:09.440 --> 00:27:12.140
Chris, over on Faucet On, pointed out,

00:27:12.140 --> 00:27:13.760
hey, love all this uv talk,

00:27:13.760 --> 00:27:15.640
grouping these together on 403

00:27:15.640 --> 00:27:16.540
and others and so on.

00:27:16.540 --> 00:27:18.940
It's interesting to be seeing it show up

00:27:18.940 --> 00:27:20.980
just broadly now, and things like

00:27:20.980 --> 00:27:22.540
Home Assistant is now using it

00:27:22.540 --> 00:27:24.680
to reduce download and setup times.

00:27:24.680 --> 00:27:25.960
Oh, yeah, cool.

00:27:25.960 --> 00:27:26.860
Yeah, kind of cool.

00:27:26.860 --> 00:27:28.560
Over here.

00:27:28.560 --> 00:27:32.620
Brian, do you think people are getting

00:27:32.620 --> 00:27:35.260
tired of LLMs and hearing about AI tools?

00:27:35.260 --> 00:27:37.840
Yes.

00:27:37.980 --> 00:27:40.740
I feel like there's a lot of AI fatigue out there.

00:27:40.740 --> 00:27:42.360
I'm like, ah, but is that just me

00:27:42.360 --> 00:27:43.940
projecting this onto people,

00:27:43.940 --> 00:27:45.760
or is this real?

00:27:45.760 --> 00:27:48.540
So I posted on Faucet On and on Twitter,

00:27:48.540 --> 00:27:51.320
said, hey, just thinking about topics,

00:27:51.320 --> 00:27:54.460
how do you guys feel about LLM topics

00:27:54.460 --> 00:27:55.940
and spending time talking about them?

00:27:55.940 --> 00:27:59.040
Only 4% said, more LLMs, please.

00:27:59.660 --> 00:28:01.820
22% said, ah, they're fine.

00:28:01.820 --> 00:28:05.100
38% said, I've had enough.

00:28:05.100 --> 00:28:08.760
And 36% fully said, if you say AI one more time,

00:28:08.760 --> 00:28:09.720
I will pile drive you.

00:28:09.720 --> 00:28:12.740
Oh, well, you just said it like four times.

00:28:12.740 --> 00:28:13.100
Oh, no.

00:28:13.100 --> 00:28:14.640
It's going to hurt so much, but I had to say it.

00:28:14.640 --> 00:28:17.180
But that's 74% of people saying,

00:28:17.180 --> 00:28:18.420
oh, man, I've had enough.

00:28:18.420 --> 00:28:18.760
Yeah.

00:28:18.840 --> 00:28:19.840
So anyway, just...

00:28:19.840 --> 00:28:21.600
One of the things that would have been funny

00:28:21.600 --> 00:28:22.440
is if you'd added,

00:28:22.440 --> 00:28:25.720
do you want us to start talking about blockchain again instead?

00:28:25.720 --> 00:28:28.640
Oh, my gosh, yes.

00:28:28.640 --> 00:28:30.780
That would definitely do it.

00:28:30.780 --> 00:28:31.100
All right.

00:28:31.540 --> 00:28:33.160
A couple real quick ones here.

00:28:33.160 --> 00:28:36.760
JetBrains and the PSF have now released,

00:28:36.760 --> 00:28:40.820
opened up the Python developer survey 2024.

00:28:40.820 --> 00:28:43.400
So check that out.

00:28:43.400 --> 00:28:46.220
I'll link to how you can go and take it.

00:28:46.220 --> 00:28:47.720
But yeah, everyone participate.

00:28:47.720 --> 00:28:48.760
This is super important.

00:28:48.760 --> 00:28:52.460
We really value all the information that we get in the spring

00:28:52.460 --> 00:28:53.540
or whenever we get the answers,

00:28:53.540 --> 00:28:55.240
the responses in the write-up.

00:28:55.240 --> 00:28:58.880
But it's time to submit your notes.

00:28:58.880 --> 00:29:00.180
Okay.

00:29:00.280 --> 00:29:01.920
A couple real quick things.

00:29:01.920 --> 00:29:06.440
I added a really cool way to explore courses over at Talk Python.

00:29:06.440 --> 00:29:10.100
So there's a big tag cloud up at the top here.

00:29:10.100 --> 00:29:11.840
And we're going to get all the courses.

00:29:11.840 --> 00:29:13.180
But now if you just click around,

00:29:13.180 --> 00:29:16.380
like if you want to find stuff about test,

00:29:16.380 --> 00:29:17.820
I just click on testing.

00:29:17.820 --> 00:29:21.100
And it'll show your test course.

00:29:21.100 --> 00:29:23.200
And this thing is super neat.

00:29:23.200 --> 00:29:25.240
This is all implemented with HTMX.

00:29:25.240 --> 00:29:26.120
All dynamic.

00:29:26.120 --> 00:29:28.340
No page refreshes, but no JavaScript.

00:29:28.340 --> 00:29:29.460
I love it.

00:29:30.100 --> 00:29:30.360
Cool.

00:29:30.360 --> 00:29:32.160
Anyway, people can check that out.

00:29:32.160 --> 00:29:34.320
And very last extra, extra, extra,

00:29:34.320 --> 00:29:36.260
I wrote an article that says,

00:29:36.260 --> 00:29:38.440
let's go easy on PyPI, okay?

00:29:38.440 --> 00:29:42.200
And I got some nice feedback from people on Updated.

00:29:42.200 --> 00:29:45.940
But basically, it talks about a bunch of different steps

00:29:45.940 --> 00:29:50.700
that you can take to not keep that number

00:29:50.700 --> 00:29:51.700
at 66 petabytes a month.

00:29:51.700 --> 00:29:52.920
I don't know how you feel about it.

00:29:52.920 --> 00:30:01.360
I don't know how you feel, but my assessment is fully 75% or more of that

00:30:01.360 --> 00:30:05.400
has to be Docker builds, continuous integration, all that crap.

00:30:05.660 --> 00:30:12.340
It just has to be so over the top, just like machines talking to machines,

00:30:12.340 --> 00:30:15.660
like, hey, here's a requirements file with 200 things in it.

00:30:15.660 --> 00:30:17.720
We're going to build a Docker container on it.

00:30:17.720 --> 00:30:21.180
So let's start with this base one, like the Python one,

00:30:21.180 --> 00:30:21.880
or whichever one.

00:30:21.880 --> 00:30:22.640
It doesn't really matter.

00:30:23.380 --> 00:30:24.120
And just build from it.

00:30:24.120 --> 00:30:29.580
And every single time you want any kind of code change published or tested,

00:30:29.580 --> 00:30:33.160
it's going to download all 200 over and over, right?

00:30:33.160 --> 00:30:36.900
Yeah, and then you're testing it against multiple versions of Python,

00:30:36.900 --> 00:30:39.180
so it downloads it that many more times.

00:30:39.180 --> 00:30:40.460
That's a really good point, yeah.

00:30:40.460 --> 00:30:43.920
So this article talks you through different steps you can take

00:30:43.920 --> 00:30:46.680
to cache it over and over faster and faster.

00:30:46.680 --> 00:30:51.600
So basically, unless a requirement changes,

00:30:51.600 --> 00:30:56.280
it will not ever, ever touch PyPI.org, ever.

00:30:56.280 --> 00:30:59.080
So it starts out just saying, oh, yeah,

00:30:59.080 --> 00:31:00.600
you just pip install your requirements.

00:31:00.600 --> 00:31:01.540
What's wrong with that?

00:31:01.540 --> 00:31:03.580
Every code change causes a download.

00:31:03.580 --> 00:31:06.860
And then maybe you could run the requirements,

00:31:06.860 --> 00:31:11.720
copy just the requirements file over and run it first and then do it.

00:31:11.720 --> 00:31:14.460
That way, only if a requirement changes does it get them all.

00:31:14.460 --> 00:31:20.160
And then you could pre-list some of your top-level requirements.

00:31:20.440 --> 00:31:22.080
That would cache it in the Docker image.

00:31:22.080 --> 00:31:24.160
And then after a lot of conversations with a lot of people,

00:31:24.160 --> 00:31:31.040
there's this mount command that you can say for cache on a per-command basis.

00:31:31.040 --> 00:31:35.860
And this will cache the output to somewhere on the machine

00:31:35.860 --> 00:31:38.500
that does the building of the Docker container.

00:31:39.120 --> 00:31:42.840
So it'll cache either the uv or the pip cache.

00:31:42.840 --> 00:31:46.300
So that way, if you get it again, it'll just go using cache version,

00:31:46.300 --> 00:31:52.040
even if it's a completely fresh image, long as the machine has seen that download before,

00:31:52.040 --> 00:31:53.100
that dependency.

00:31:53.760 --> 00:31:59.400
And then finally, if you're on probably one of the biggest offenders in the sense of CI on GitHub,

00:31:59.400 --> 00:32:04.420
over at GitHub, they actually have this thing called, maybe you know it,

00:32:04.420 --> 00:32:10.620
this thing called a cache action or actions slash cache.

00:32:11.100 --> 00:32:19.500
And you can set up a cache for your CI so that subsequent CI builds don't download and install it again as well.

00:32:19.500 --> 00:32:25.040
This will not just make it lighter on PyPI, but also every one of these things makes it faster for you.

00:32:25.040 --> 00:32:28.120
So it's like incentives are aligned, you know what I mean?

00:32:28.120 --> 00:32:28.820
Yeah.

00:32:28.820 --> 00:32:31.120
Yeah.

00:32:31.120 --> 00:32:31.900
It's pretty cool.

00:32:31.900 --> 00:32:38.900
It's almost too bad that like GitHub itself can't notice that like multiple packages

00:32:38.900 --> 00:32:45.260
or multiple builds from different projects are using the same version of something and caches.

00:32:45.260 --> 00:32:45.520
Right.

00:32:45.520 --> 00:32:49.680
Just have a universal pip cache or something like that.

00:32:49.680 --> 00:32:52.560
One of my questions is, and I don't know if you know the answer to this,

00:32:52.700 --> 00:32:55.080
is the, I know that uv does a lot of caching.

00:32:55.080 --> 00:33:02.380
Will just using uv help with reducing hitting IPI?

00:33:02.380 --> 00:33:03.940
That's an interesting question.

00:33:03.940 --> 00:33:06.880
I don't know if it'll make it less traffic.

00:33:06.880 --> 00:33:08.440
It'll definitely make it faster.

00:33:08.440 --> 00:33:09.500
There's no doubt about that.

00:33:09.500 --> 00:33:12.600
But it might be the same traffic.

00:33:12.600 --> 00:33:14.340
Yeah.

00:33:14.340 --> 00:33:15.560
Yeah, yeah.

00:33:15.560 --> 00:33:16.300
Cool.

00:33:16.300 --> 00:33:17.820
All right.

00:33:19.260 --> 00:33:22.760
Henry says, setup-uv has a cache option.

00:33:22.760 --> 00:33:23.500
Excellent.

00:33:23.500 --> 00:33:24.540
That's awesome to hear.

00:33:24.540 --> 00:33:25.560
All right.

00:33:25.560 --> 00:33:31.380
And then Jay Miller dropped in to say that he assumed he wouldn't be able to find this episode.

00:33:31.380 --> 00:33:33.800
But like us, he eventually found his way.

00:33:33.800 --> 00:33:40.400
And also, Tony out in the audience says, I was literally working on caching in CI while listening.

00:33:40.400 --> 00:33:43.740
UV does support caching in CI too.

00:33:43.880 --> 00:33:44.000
Yeah.

00:33:44.000 --> 00:33:50.780
And by the way, if you're checking out these notes on the GitHub CI stuff, down here for the pip example,

00:33:50.780 --> 00:33:53.860
somewhere, pip, are you here?

00:33:53.860 --> 00:34:02.280
If you just say this pass of .cache slash pip, if you just change that to .cache slash UV,

00:34:02.280 --> 00:34:05.240
I'm pretty sure everything else will just flow from there.

00:34:05.540 --> 00:34:06.920
Awesome.

00:34:06.920 --> 00:34:07.820
Nice.

00:34:07.820 --> 00:34:09.360
Indeed.

00:34:09.360 --> 00:34:10.480
All right.

00:34:10.480 --> 00:34:14.620
You ready for a joke?

00:34:14.620 --> 00:34:17.540
Well, I was hoping you didn't have lost the joke.

00:34:17.540 --> 00:34:19.860
Let's see if I can find it.

00:34:19.860 --> 00:34:20.760
Let's see what I can find.

00:34:20.760 --> 00:34:21.120
All right.

00:34:21.120 --> 00:34:28.360
So, you know, when you go to a page that's bad, like if you go to Python bytes slash blah, blah, blah,

00:34:28.360 --> 00:34:31.400
and it's not there, should it just say 404?

00:34:31.400 --> 00:34:31.840
No.

00:34:31.840 --> 00:34:34.520
You should have something amusing and interesting.

00:34:34.680 --> 00:34:40.040
Like for us, we have a big empty microphone in a stage with nobody at the microphone.

00:34:40.040 --> 00:34:44.900
It just says 404, try our episodes listing instead, and you can click on it and it takes you to our episodes, right?

00:34:44.900 --> 00:34:46.420
That's all fun.

00:34:46.420 --> 00:34:52.880
So my joke, which I think I'll just let people link to, but maybe we can find one or two just to give people a sense,

00:34:52.880 --> 00:34:56.880
is 28 clever and funny 404 pages.

00:34:56.880 --> 00:34:57.960
Nice.

00:34:57.960 --> 00:34:58.880
I love this.

00:34:58.880 --> 00:35:00.060
These are so good.

00:35:00.060 --> 00:35:05.840
It almost makes me want to like mess up a website just to see what they've got, right?

00:35:05.840 --> 00:35:08.060
Like one of them is for a blue path.

00:35:08.060 --> 00:35:11.040
I don't know what that is, but there's a big map with tons of little dots of like,

00:35:11.040 --> 00:35:14.740
here's all the distribution of where people live around the city or things happening.

00:35:14.740 --> 00:35:16.420
It says, this is everyone else.

00:35:16.480 --> 00:35:18.860
And then like way over somewhere else, it has a little dot.

00:35:18.860 --> 00:35:20.520
It says, this is you way off the map.

00:35:20.520 --> 00:35:21.440
Please go find it.

00:35:21.440 --> 00:35:26.800
Some of them are not that great, but some of them are real good.

00:35:29.800 --> 00:35:39.120
So anyway, if this kind of stuff amuses you, Pixar has one with a crying inside out person.

00:35:39.120 --> 00:35:41.080
It's sad emotion.

00:35:41.080 --> 00:35:41.660
Yeah.

00:35:41.660 --> 00:35:42.880
Yeah, exactly.

00:35:42.880 --> 00:35:44.120
Exactly.

00:35:44.120 --> 00:35:46.520
Others are just weird.

00:35:46.520 --> 00:35:52.340
One has a bear wearing like a gold 404 baller type.

00:35:54.560 --> 00:35:56.340
Anyway, check it out.

00:35:56.340 --> 00:36:00.640
Lego has a unassembled, disconnected sort of thing.

00:36:00.640 --> 00:36:05.120
So I thought that would be pretty good for our episode 404.

00:36:05.120 --> 00:36:06.980
People can scroll through that and enjoy it.

00:36:06.980 --> 00:36:07.920
Yeah.

00:36:07.920 --> 00:36:10.440
And also, I love watching, looking at these.

00:36:10.440 --> 00:36:17.840
So if anybody has some good 404 pages that they want to share with us, head on over to

00:36:17.840 --> 00:36:24.180
Mastodon or our show notes page and send us a link to your favorite 404.

00:36:24.180 --> 00:36:24.700
That'd be fun.

00:36:24.700 --> 00:36:25.800
Yeah.

00:36:25.800 --> 00:36:26.420
Awesome.

00:36:26.420 --> 00:36:28.160
All right, guys.

00:36:28.160 --> 00:36:29.640
Thank you.

00:36:29.640 --> 00:36:31.940
Thank you, everyone, for listening.

00:36:31.940 --> 00:36:34.360
Brian, thanks for being here as always.

00:36:34.360 --> 00:36:35.740
Thanks.

00:36:35.740 --> 00:36:36.080
See y'all later.

00:36:36.080 --> 00:36:36.680
Bye.

00:36:36.680 --> 00:36:41.180
Thank you.

