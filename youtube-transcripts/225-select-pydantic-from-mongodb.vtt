WEBVTT

00:00:00.000 --> 00:00:01.000
Hello, everyone.


00:00:01.000 --> 00:00:06.960
Hello, and welcome to Python Bytes,


00:00:06.960 --> 00:00:09.400
where we deliver Python news and headlines directly


00:00:09.400 --> 00:00:10.360
to your earbuds.


00:00:10.360 --> 00:00:15.960
This is episode 225, recorded March 17.


00:00:15.960 --> 00:00:17.240
I'm Brian Okken.


00:00:17.240 --> 00:00:18.800
I'm Michael Kennedy.


00:00:18.800 --> 00:00:20.960
And I'm Sebastian Witovsky.


00:00:20.960 --> 00:00:22.560
Hey, we have a special guest.


00:00:22.560 --> 00:00:24.040
Yay.


00:00:24.040 --> 00:00:25.040
Welcome, Sebastian.


00:00:25.040 --> 00:00:25.520
Thanks.


00:00:25.520 --> 00:00:26.560
I'm excited to be here.


00:00:26.560 --> 00:00:27.920
Huge fan of the show.


00:00:27.920 --> 00:00:28.440
Thank you.


00:00:28.440 --> 00:00:29.280
Thanks so much.


00:00:29.280 --> 00:00:30.980
- Cool.


00:00:30.980 --> 00:00:34.000
Well, should we kick it off?


00:00:34.000 --> 00:00:34.840
- Yeah, yeah.


00:00:34.840 --> 00:00:36.080
Also, I wanna say thanks to Linode


00:00:36.080 --> 00:00:37.120
for sponsoring this episode.


00:00:37.120 --> 00:00:41.040
And Brian, I've heard of people getting


00:00:41.040 --> 00:00:42.880
like smaller computers, Raspberry Pis,


00:00:42.880 --> 00:00:43.700
and things like that,


00:00:43.700 --> 00:00:46.120
but you've taken it to some crazy extreme here.


00:00:46.120 --> 00:00:47.160
Is that what's happening?


00:00:47.160 --> 00:00:48.280
- Yeah. - What's going on here?


00:00:48.280 --> 00:00:49.400
What is this thing?


00:00:49.400 --> 00:00:50.240
- The Pico.


00:00:50.240 --> 00:00:53.920
So actually, I saw this announcement on Twitter.


00:00:53.920 --> 00:00:56.240
It's actually came out in January,


00:00:56.240 --> 00:00:58.680
but we haven't covered it yet.


00:00:58.680 --> 00:00:59.940
It's kind of exciting.


00:00:59.940 --> 00:01:03.160
The Pico is four bucks for,


00:01:03.160 --> 00:01:06.200
and I know they have a $5 little chip also,


00:01:06.200 --> 00:01:07.360
or a little controller,


00:01:07.360 --> 00:01:09.800
but this is really like in microcontroller land,


00:01:09.800 --> 00:01:12.640
which is, it's really pretty cool.


00:01:12.640 --> 00:01:16.800
It doesn't have a lot, like there's no wifi on it.


00:01:16.800 --> 00:01:21.240
There's not a lot on it, but there's also not a lot on it.


00:01:21.240 --> 00:01:23.120
So it's very low powered.


00:01:23.120 --> 00:01:25.420
So really microcontroller size.


00:01:25.420 --> 00:01:27.200
One of the exciting things about this is this is,


00:01:27.200 --> 00:01:31.080
I think this is the first Raspberry Pi


00:01:31.080 --> 00:01:34.440
with a chip designed by Raspberry Pi.


00:01:34.440 --> 00:01:37.960
So this is a custom Raspberry Pi chip.


00:01:37.960 --> 00:01:39.200
And what do they call it?


00:01:39.200 --> 00:01:41.560
Oh, I can't remember.


00:01:41.560 --> 00:01:44.840
RP2040 is the chip that goes in.


00:01:44.840 --> 00:01:46.920
It means anything to anybody.


00:01:46.920 --> 00:01:51.920
But the low power thing is what I think is fascinating.


00:01:52.040 --> 00:01:57.040
like is because there's some things that you can even,


00:01:57.040 --> 00:02:02.420
you can power like LED lights and stuff with it even,


00:02:02.420 --> 00:02:06.020
and there is enough power to do quite a bit with peripherals


00:02:06.020 --> 00:02:10.640
but you also can, since it's so low power,


00:02:10.640 --> 00:02:14.240
this'll be good for things like temperature sensors


00:02:14.240 --> 00:02:17.700
and other sensors that you leave alone someplace.


00:02:17.700 --> 00:02:21.880
And a microcontroller that you can leave somewhere


00:02:21.880 --> 00:02:23.280
and then come pick up later.


00:02:23.280 --> 00:02:27.640
This is some, and that you can control with Python


00:02:27.640 --> 00:02:30.300
is something new and that's pretty exciting.


00:02:30.300 --> 00:02:32.480
- Yeah, that's super cool.


00:02:32.480 --> 00:02:34.880
And apparently it's coming soon also


00:02:34.880 --> 00:02:38.600
is the Arduino Nano Connect,


00:02:38.600 --> 00:02:43.600
which comes with a nine axis IMU and a microphone,


00:02:43.600 --> 00:02:45.800
and microphone,


00:02:45.800 --> 00:02:51.220
a powerful wifi and Bluetooth module,


00:02:51.220 --> 00:02:53.220
and a crypto chip and stuff like that.


00:02:53.220 --> 00:02:55.380
So that'd be kind of cool as well, right?


00:02:55.380 --> 00:02:57.820
Like put this thing on wifi and whatnot.


00:02:57.820 --> 00:02:59.780
- Yeah, and one of the other things I forgot to mention,


00:02:59.780 --> 00:03:03.420
this is the first Raspberry Pi product


00:03:03.420 --> 00:03:05.180
that has an ADC on it.


00:03:05.180 --> 00:03:08.780
So with that you can do,


00:03:08.780 --> 00:03:11.820
it isn't just like,


00:03:11.820 --> 00:03:15.460
you can do analog input so you can,


00:03:15.460 --> 00:03:18.660
more accurately hook up a temperature sensor or something.


00:03:18.660 --> 00:03:19.500
- Oh, right.


00:03:19.500 --> 00:03:21.740
working with--


00:03:21.740 --> 00:03:23.300
this is your IoT thing, and you want


00:03:23.300 --> 00:03:26.580
to just work with plug-in, a voltage meter, or whatever,


00:03:26.580 --> 00:03:27.260
right?


00:03:27.260 --> 00:03:28.260
OK, super cool.


00:03:28.260 --> 00:03:29.460
>>So that's pretty exciting.


00:03:29.460 --> 00:03:32.460
And anything that drives people working


00:03:32.460 --> 00:03:35.700
with a combination of hardware and software


00:03:35.700 --> 00:03:41.060
together in a nice language like Python, very much appreciated.


00:03:41.060 --> 00:03:44.340
This is an exciting part of the Python world.


00:03:44.340 --> 00:03:49.700
I also want to mention the editor Mew


00:03:49.700 --> 00:03:51.980
that can be found at CodeWithMew.


00:03:51.980 --> 00:03:53.820
And I don't have this up here.


00:03:53.820 --> 00:03:58.820
But they released-- they're working on the 1.1 version.


00:03:58.820 --> 00:04:00.060
And the beta 2 is out.


00:04:00.060 --> 00:04:01.420
And one of the things it supports


00:04:01.420 --> 00:04:05.940
is this Pica board, along with some of the LEGO spike


00:04:05.940 --> 00:04:08.300
products and a whole bunch of new fixes.


00:04:08.300 --> 00:04:11.900
So especially when we're working with microcontrollers


00:04:11.900 --> 00:04:15.260
and students, that's a nice thing to have.


00:04:15.260 --> 00:04:16.660
- Did you mention the price?


00:04:16.660 --> 00:04:19.100
- That is $4?


00:04:19.100 --> 00:04:21.060
- Yes. - Yeah, that's amazing.


00:04:21.060 --> 00:04:22.540
- That is so awesome, right?


00:04:22.540 --> 00:04:25.900
- So yeah, later on in the announcement,


00:04:25.900 --> 00:04:28.980
they've got like this picture of them, like wrapped up,


00:04:28.980 --> 00:04:31.420
like a whole, like a reel of these.


00:04:31.420 --> 00:04:32.860
I think they're trying to encourage people


00:04:32.860 --> 00:04:35.340
to buy like a whole bunch of them at a time.


00:04:35.340 --> 00:04:36.520
- It's like a candy wrapper,


00:04:36.520 --> 00:04:38.420
but you get a computer instead.


00:04:38.420 --> 00:04:40.620
- Yeah, that's pretty great.


00:04:40.620 --> 00:04:41.800
- Really good, I love it.


00:04:41.800 --> 00:04:43.320
That's as good as our jokes.


00:04:43.320 --> 00:04:45.160
Sebastian, what do you think of this thing?


00:04:45.160 --> 00:04:48.480
- I never actually got into Raspberry Pi


00:04:48.480 --> 00:04:51.520
and all this programming hardware.


00:04:51.520 --> 00:04:54.120
I actually bought Raspberry Pi like years ago


00:04:54.120 --> 00:04:56.560
and it was in my drawer until one day I decided


00:04:56.560 --> 00:04:59.520
to put a Pi hole on it to get rid of the ads


00:04:59.520 --> 00:05:02.040
and it's been working flawlessly since then.


00:05:02.040 --> 00:05:04.060
So I have Raspberry Pi somewhere there,


00:05:04.060 --> 00:05:07.040
but I'm impressed to see how they are dropping the price.


00:05:07.040 --> 00:05:10.240
Like $4, it's like extremely affordable.


00:05:10.240 --> 00:05:12.920
- Yeah, that's really, really wild, that thing.


00:05:12.920 --> 00:05:13.880
Pretty awesome.


00:05:13.880 --> 00:05:15.020
Also, Brian, a comment.


00:05:15.020 --> 00:05:18.080
Paul Sanders in the live stream says,


00:05:18.080 --> 00:05:20.720
"Can you use Ubuntu on Pico like a regular,


00:05:20.720 --> 00:05:24.080
"quote, regular Raspberry Pi, or is it like its own thing?"


00:05:24.080 --> 00:05:25.800
- I'm pretty sure it's its own thing.


00:05:25.800 --> 00:05:28.400
I don't think it has a full operating system on it.


00:05:28.400 --> 00:05:31.480
- Yeah, it describes itself as a microcontroller, right?


00:05:31.480 --> 00:05:32.300
- Yeah.


00:05:32.300 --> 00:05:35.160
- So it's like more like MicroPython,


00:05:35.160 --> 00:05:40.160
Adafruit, AdaCircuit, Python, so on, yeah.


00:05:40.160 --> 00:05:43.720
It would be cool, but I don't know, it's pretty small, $4.


00:05:43.720 --> 00:05:46.560
- Yeah, I think it is running MicroPython,


00:05:46.560 --> 00:05:47.480
but I'm not sure.


00:05:47.480 --> 00:05:48.520
So, yeah.


00:05:48.520 --> 00:05:50.480
- Yeah, yeah, very cool.


00:05:50.480 --> 00:05:52.600
All right, well, I wanna talk about something brand new


00:05:52.600 --> 00:05:55.160
for the next item here, and that is Beanie.


00:05:55.160 --> 00:05:58.000
So I came across this yesterday,


00:05:58.000 --> 00:06:00.120
and actually I had some other thing I was gonna cover.


00:06:00.120 --> 00:06:01.320
I'm like, no, no, no, Beanie's cool.


00:06:01.320 --> 00:06:02.760
I wanna talk about Beanie.


00:06:02.760 --> 00:06:04.140
I'm pretty excited about it


00:06:04.140 --> 00:06:07.080
because I was recently talking with a friend of mine


00:06:07.080 --> 00:06:12.080
about, oh, what would you use with FastAPI and MongoDB?


00:06:12.080 --> 00:06:17.720
Well, the traditional ORMs, ODMs,


00:06:17.720 --> 00:06:19.880
they don't call them ORMs in Mongo


00:06:19.880 --> 00:06:22.320
because they don't map relations, they map documents,


00:06:22.320 --> 00:06:24.560
so they call them ODMs, object document mappers,


00:06:24.560 --> 00:06:25.440
but same idea.


00:06:25.440 --> 00:06:28.480
I was talking with him and saying,


00:06:28.480 --> 00:06:31.120
he's like, well, what would you use with FastAPI?


00:06:31.120 --> 00:06:32.560
'Cause you really wanna leverage the async


00:06:32.560 --> 00:06:35.400
and await nature of the views,


00:06:35.400 --> 00:06:36.720
which is so easy to do there.


00:06:36.720 --> 00:06:38.720
and whatnot, but I started looking,


00:06:38.720 --> 00:06:41.420
all the old standbys that I like,


00:06:41.420 --> 00:06:43.680
Mongo engine, and some of the others,


00:06:43.680 --> 00:06:47.440
the ORM, ODM side don't seem to be


00:06:47.440 --> 00:06:50.640
really supporting the async await world.


00:06:50.640 --> 00:06:52.640
You start looking around, well, there's motor,


00:06:52.640 --> 00:06:54.640
which is the official async


00:06:54.640 --> 00:06:58.840
library from MongoDB, the company, the organization,


00:06:58.840 --> 00:07:02.120
to support this, but the way you program there is,


00:07:02.120 --> 00:07:05.800
I run a query as, you know, sort of almost like SQL syntax,


00:07:05.800 --> 00:07:08.700
and I get back a Python dictionary, which is okay,


00:07:08.700 --> 00:07:11.080
but I don't really like that style.


00:07:11.080 --> 00:07:12.680
Really like getting a class back,


00:07:12.680 --> 00:07:14.120
be able to do queries with the class,


00:07:14.120 --> 00:07:17.780
have the class have like types and constraints and whatnot.


00:07:17.780 --> 00:07:19.240
'Cause if you're just working with dictionaries,


00:07:19.240 --> 00:07:21.520
it's so easy to like forget to set it.


00:07:21.520 --> 00:07:24.040
I don't know, a field you didn't remember existed


00:07:24.040 --> 00:07:26.760
or something weird like that and get inconsistent data.


00:07:26.760 --> 00:07:29.720
So I ran across this thing called Beanie,


00:07:29.720 --> 00:07:34.720
which is an async-friendly ODM for MongoDB


00:07:35.040 --> 00:07:38.160
And we've talked a lot about Pydantic.


00:07:38.160 --> 00:07:39.460
Pydantic's awesome, right?


00:07:39.460 --> 00:07:41.720
Yeah.


00:07:41.720 --> 00:07:46.320
So with Beanie, it basically takes and uses Pydantic models


00:07:46.320 --> 00:07:49.740
as the classes that map to the database.


00:07:49.740 --> 00:07:52.160
And I think that's just super cool.


00:07:52.160 --> 00:07:53.560
- Yeah, very cool.


00:07:53.560 --> 00:07:56.400
- Yeah, so let me see if I can pull up some examples here.


00:07:56.400 --> 00:08:02.720
So the idea is that with the document databases,


00:08:02.720 --> 00:08:03.960
you can embed stuff.


00:08:03.960 --> 00:08:07.640
So I might have one class that's containing a list


00:08:07.640 --> 00:08:09.440
of other classes I define,


00:08:09.440 --> 00:08:11.640
that just is a record in the database.


00:08:11.640 --> 00:08:13.200
So the way it works with Beanie


00:08:13.200 --> 00:08:16.000
is you create anything that derives from base model.


00:08:16.000 --> 00:08:19.600
That means it's a Pydantic model with all the validation


00:08:19.600 --> 00:08:22.760
and loading and stuff that you get from that world.


00:08:22.760 --> 00:08:24.960
And then you have a top level document


00:08:24.960 --> 00:08:27.000
that derives from this beanie.document,


00:08:27.000 --> 00:08:29.840
which is really just a specialization of a Pydantic model.


00:08:29.840 --> 00:08:32.680
So everything you do with Pydantic happens here.


00:08:32.680 --> 00:08:35.760
And then you actually just work with the motor async driver,


00:08:35.760 --> 00:08:40.640
which is the "official" way to talk to MongoDB asynchronously


00:08:40.640 --> 00:08:42.120
from Python.


00:08:42.120 --> 00:08:46.400
And then you can create a class, embed your objects, hit Save.


00:08:46.400 --> 00:08:50.040
You can go and just go to your document


00:08:50.040 --> 00:08:54.120
and just say Insert 1 as a class, Insert Mini.


00:08:54.120 --> 00:08:55.920
You can do filters.


00:08:55.920 --> 00:08:59.920
You can either do like getById, or you can say do a find query


00:08:59.920 --> 00:09:01.560
or something like that.


00:09:01.560 --> 00:09:04.640
So yeah, I think it's pretty neat that it allows you


00:09:04.640 --> 00:09:09.520
to take this sort of blended, it's like half ORM, ODM,


00:09:09.520 --> 00:09:13.760
and half sort of just working directly with the MongoDB API.


00:09:13.760 --> 00:09:15.400
And yeah, it's pretty neat.


00:09:15.400 --> 00:09:17.780
One of the big notable things that I feel like


00:09:17.780 --> 00:09:22.780
it's kind of missing is it doesn't support creating


00:09:22.780 --> 00:09:26.600
and managing indexes through this object model.


00:09:26.600 --> 00:09:28.880
But I was talking to the guy who created it,


00:09:28.880 --> 00:09:31.240
Roman Wright, on GitHub, and he's like,


00:09:31.240 --> 00:09:32.080
Yeah, that's a good idea.


00:09:32.080 --> 00:09:34.080
It's like one of the next things I'm thinking about.


00:09:34.080 --> 00:09:35.640
So pretty cool.


00:09:35.640 --> 00:09:37.280
If you're doing stuff with MongoDB


00:09:37.280 --> 00:09:39.040
and you like Pydantic,


00:09:39.040 --> 00:09:42.680
here's an exciting new project that people can check out.


00:09:42.680 --> 00:09:45.640
It even has capabilities for the aggregation model,


00:09:45.640 --> 00:09:49.120
which is like MapReduce plus sort of


00:09:49.120 --> 00:09:50.600
that kind of processing,


00:09:50.600 --> 00:09:52.800
which often doesn't show up in these ODMs.


00:09:52.800 --> 00:09:54.480
So people can check it out.


00:09:54.480 --> 00:09:55.960
It's growing.


00:09:55.960 --> 00:09:57.520
It was almost brand new yesterday.


00:09:57.520 --> 00:09:58.880
Now it's up to 25 stars.


00:09:58.880 --> 00:10:00.900
So it's not super, super popular,


00:10:00.900 --> 00:10:04.340
but it's like 25 times more popular than it was yesterday.


00:10:04.340 --> 00:10:05.860
So that's pretty cool.


00:10:05.860 --> 00:10:07.100
It's on a good track.


00:10:07.100 --> 00:10:08.380
- I got a question about indexes.


00:10:08.380 --> 00:10:11.100
So if you, even if it didn't support it,


00:10:11.100 --> 00:10:13.820
could you go around and just request them anyway?


00:10:13.820 --> 00:10:14.640
- Yeah, no problem.


00:10:14.640 --> 00:10:17.100
You could go to like motor and do it in Python,


00:10:17.100 --> 00:10:19.260
say create index at this, you know, like,


00:10:19.260 --> 00:10:20.820
it's not create, it's ensure index,


00:10:20.820 --> 00:10:25.020
like create if does not exist index during app startup,


00:10:25.020 --> 00:10:27.020
or you just literally could go to the database


00:10:27.020 --> 00:10:29.020
and actually use some management tool


00:10:29.020 --> 00:10:30.020
and create the indexes there.


00:10:30.020 --> 00:10:32.540
So it's not like you can't use indexes.


00:10:32.540 --> 00:10:36.180
It's just like if you're defining the whole model,


00:10:36.180 --> 00:10:38.340
it would be cool if it could just happen


00:10:38.340 --> 00:10:40.340
as part of the class definition.


00:10:40.340 --> 00:10:43.860
As many things do, like SQLAlchemy does that.


00:10:43.860 --> 00:10:45.020
Mongo engine does that.


00:10:45.020 --> 00:10:47.620
It's a pretty standard paradigm here.


00:10:47.620 --> 00:10:49.100
So I don't know.


00:10:49.100 --> 00:10:50.020
What do you guys think?


00:10:50.020 --> 00:10:53.940
- I kind of really like the idea of having an ODMB,


00:10:53.940 --> 00:10:55.700
like this hybrid model of like,


00:10:55.700 --> 00:10:58.860
it's not really taking over hiding Mongo


00:10:58.860 --> 00:11:01.680
because Mongo is actually not that hard to deal with anyway.


00:11:01.680 --> 00:11:04.800
It's adding some of these class wrappers


00:11:04.800 --> 00:11:08.580
and giving you a lot of the power of Mongo at the same time.


00:11:08.580 --> 00:11:09.420
- Yeah, for sure.


00:11:09.420 --> 00:11:11.440
And you can see like actually the document,


00:11:11.440 --> 00:11:13.100
sorry, the blog post that announces this


00:11:13.100 --> 00:11:15.260
rather than the GitHub repo has a few examples


00:11:15.260 --> 00:11:16.300
and they're all FastAPI.


00:11:16.300 --> 00:11:20.100
Like you have an asynchronous API endpoint


00:11:20.100 --> 00:11:24.300
and then you await note.create, which saves it.


00:11:24.300 --> 00:11:27.260
Or you can await like a query.


00:11:27.260 --> 00:11:28.860
Let me see if... Yeah.


00:11:28.860 --> 00:11:31.360
Anyway, you can await queries and things like that,


00:11:31.360 --> 00:11:33.360
which is the really cool thing.


00:11:33.360 --> 00:11:36.000
So, Pedantic plus Async and Await, pretty neat.


00:11:36.000 --> 00:11:38.860
Yeah, that's pretty cool.


00:11:38.860 --> 00:11:40.460
Especially the list of features that you show,


00:11:40.460 --> 00:11:43.000
it's pretty impressive for such a new project.


00:11:43.000 --> 00:11:47.600
Yeah, this guy Roman apparently, he comments in here,


00:11:47.600 --> 00:11:49.900
like, "This is something I've been using for myself for a while,


00:11:49.900 --> 00:11:51.740
and it's really awesome."


00:11:51.740 --> 00:11:53.040
So now I'm just sort of putting it out there.


00:11:53.040 --> 00:11:55.460
Hopefully it grows from that. So that's pretty cool.


00:11:55.460 --> 00:11:58.780
So you work with async more than I have.


00:11:58.780 --> 00:12:00.980
Is this something that I could,


00:12:00.980 --> 00:12:03.500
if you want to start playing with it,


00:12:03.500 --> 00:12:05.500
would you have to jump into the async world


00:12:05.500 --> 00:12:08.380
or could you use Beanie without async stuff?


00:12:08.380 --> 00:12:11.300
- You know, I hadn't really thought about it.


00:12:11.300 --> 00:12:16.300
Looking at it, it looks like it has to be async.


00:12:16.300 --> 00:12:19.180
Right, because the queries like the find one,


00:12:19.180 --> 00:12:21.700
create and so on, they all are awaitable,


00:12:21.700 --> 00:12:23.620
they're all being awaited.


00:12:23.620 --> 00:12:28.100
And I don't see a way just quickly glancing at it


00:12:28.100 --> 00:12:29.900
to say, don't be that, you know what I mean?


00:12:29.900 --> 00:12:31.820
Like I don't see how it's both at the same time.


00:12:31.820 --> 00:12:35.020
And if it is, you'd probably have to use it.


00:12:35.020 --> 00:12:40.020
So I'm guessing actually you do have to use it as an async,


00:12:40.020 --> 00:12:41.620
but I don't know for sure.


00:12:41.620 --> 00:12:43.820
I haven't tried it well enough.


00:12:43.820 --> 00:12:44.860
It's a good question.


00:12:44.860 --> 00:12:50.580
All right, well, speaking of good stuff,


00:12:50.580 --> 00:12:53.800
- Something I've talked about on Talk Python,


00:12:53.800 --> 00:12:55.980
but not on Python Bytes.


00:12:55.980 --> 00:12:57.860
So Sebastian is gonna tell you guys


00:12:57.860 --> 00:13:00.100
about something over there, right?


00:13:00.100 --> 00:13:01.700
That we talked about over there.


00:13:01.700 --> 00:13:03.980
- Yeah, so I wanted to talk about a tool


00:13:03.980 --> 00:13:05.380
that I have been using for a long time,


00:13:05.380 --> 00:13:08.140
and I know that you, Michael, are familiar with it,


00:13:08.140 --> 00:13:08.980
'cause you already covered it.


00:13:08.980 --> 00:13:10.940
- Yeah, I'm a huge fan of code quality,


00:13:10.940 --> 00:13:12.860
refactoring, all that kind of stuff.


00:13:12.860 --> 00:13:14.140
Like having your editor tell you,


00:13:14.140 --> 00:13:15.020
like, this could be better,


00:13:15.020 --> 00:13:16.500
press this button to make it happen.


00:13:16.500 --> 00:13:17.820
I love that. - Yeah, exactly.


00:13:17.820 --> 00:13:20.140
That's why I absolutely love this tool,


00:13:20.140 --> 00:13:24.920
because it's like one level above of, let's say, linters.


00:13:24.920 --> 00:13:27.120
'Cause when you're using PyLint or Flake 8,


00:13:27.120 --> 00:13:30.240
you get like some warning saying like, look, this is wrong.


00:13:30.240 --> 00:13:31.080
And then there is Sorcery


00:13:31.080 --> 00:13:33.760
that tries to kind of make your code better.


00:13:33.760 --> 00:13:38.000
It gives you like refactoring tool tips just as you type.


00:13:38.000 --> 00:13:39.960
So for example, if you scroll a bit down there,


00:13:39.960 --> 00:13:42.920
there is some GIF showing what it can do.


00:13:42.920 --> 00:13:46.120
And for example, if you have like an if statement


00:13:46.120 --> 00:13:49.680
and both branches have the same statement,


00:13:49.680 --> 00:13:53.120
you will get a pop-up saying that, "Look, this can be moved outside."


00:13:53.120 --> 00:13:55.280
Or, for example, when you have a for loop,


00:13:55.280 --> 00:13:57.620
you will get a recommendation saying,


00:13:57.620 --> 00:14:00.520
"Hey, this can be turned into a list comprehension."


00:14:00.520 --> 00:14:02.920
So I really like it,


00:14:02.920 --> 00:14:06.460
and it integrates, I think, with PyCharm and VS Code.


00:14:06.460 --> 00:14:08.760
So I don't know about Veeam.


00:14:08.760 --> 00:14:12.260
I don't think there is any support right now for stuff like that.


00:14:12.260 --> 00:14:15.460
And it's super easy to use because you just got a pop-up


00:14:15.460 --> 00:14:18.440
and you can click, "Yes, I want to have this refactoring."


00:14:18.440 --> 00:14:23.580
you can see the diff of how it will look after the refactoring.


00:14:23.580 --> 00:14:30.080
And it's also free to use, at least in the Code Editor.


00:14:30.080 --> 00:14:33.860
I think they have the Pricing tab, but I think you can pay


00:14:33.860 --> 00:14:39.020
to have analytics for your project and set it up


00:14:39.020 --> 00:14:41.220
with continuous integration servers and stuff like that.


00:14:41.220 --> 00:14:44.900
But for VS Code and PyCharm, it's free to use.


00:14:44.900 --> 00:14:49.540
Yeah, it looks like you get a couple of extra refactorings


00:14:49.540 --> 00:14:51.540
and whole project analysis for money.


00:14:51.540 --> 00:14:56.620
Yeah, but the basic refactorings that can already help you a lot,


00:14:56.620 --> 00:14:57.880
they are there for free.


00:14:57.880 --> 00:15:01.680
And at least for me, I just keep getting constant pop-ups


00:15:01.680 --> 00:15:03.680
saying this code can be refactored.


00:15:03.680 --> 00:15:06.300
So, I mean, maybe I'm a terrible programmer,


00:15:06.300 --> 00:15:08.660
but sometimes I'm tired and I don't see something.


00:15:08.660 --> 00:15:10.560
So it's nice to just click one thing


00:15:10.560 --> 00:15:13.940
and have three lines of code turn into one line.


00:15:14.640 --> 00:15:15.880
So that's pretty awesome.


00:15:15.880 --> 00:15:17.560
I don't know.


00:15:17.560 --> 00:15:18.560
Brian, have you used it?


00:15:18.560 --> 00:15:21.400
Because I know that Michael had.


00:15:21.400 --> 00:15:23.480
I haven't used it yet, but I'm pretty excited.


00:15:23.480 --> 00:15:24.840
It looks pretty fun.


00:15:24.840 --> 00:15:26.000
Yeah, it looks really neat.


00:15:26.000 --> 00:15:28.160
And like I said, I did interview the guys over there


00:15:28.160 --> 00:15:29.700
on the show about what they're doing.


00:15:29.700 --> 00:15:31.200
And I believe that all--


00:15:31.200 --> 00:15:34.480
one of the things that some people have worried about


00:15:34.480 --> 00:15:35.480
is these kinds of tools.


00:15:35.480 --> 00:15:37.800
Sometimes, especially the ones that


00:15:37.800 --> 00:15:40.200
try to use AI, ML to help you.


00:15:40.200 --> 00:15:42.880
And I don't think that this is one of those.


00:15:42.880 --> 00:15:44.480
They'll end up sending your code over.


00:15:44.480 --> 00:15:47.920
I think this is all just local stuff, which is nice.


00:15:47.920 --> 00:15:50.320
- Yeah, I guess that's one of my questions.


00:15:50.320 --> 00:15:53.840
I often run, you know, I often do a lot of coding


00:15:53.840 --> 00:15:57.840
on my laptop with it, with no wifi connection or anything.


00:15:57.840 --> 00:16:00.200
Can I, does this help at all?


00:16:00.200 --> 00:16:01.680
- I'm pretty sure, I don't think it makes any,


00:16:01.680 --> 00:16:04.080
I don't think it uses the internet to do its magic.


00:16:04.080 --> 00:16:05.600
So I think it's all just in the editor


00:16:05.600 --> 00:16:07.660
in PyCharm or VS Code. - Yeah, probably.


00:16:07.660 --> 00:16:09.120
- Yeah, I'm pretty sure that's the case.


00:16:09.120 --> 00:16:11.880
But the one thing, so I used this for a while


00:16:11.880 --> 00:16:12.700
and I liked it.


00:16:12.700 --> 00:16:16.440
One thing that drove me crazy and possibly it's been fixed


00:16:16.440 --> 00:16:19.860
is there's like one or two recommendations.


00:16:19.860 --> 00:16:22.220
Like a lot of the recommendations it makes are great,


00:16:22.220 --> 00:16:24.980
but there's one or two that I really didn't like.


00:16:24.980 --> 00:16:28.860
I think for example, I was using a guarding clause.


00:16:28.860 --> 00:16:30.580
So I would say, coming to method,


00:16:30.580 --> 00:16:31.420
the very first thing is like,


00:16:31.420 --> 00:16:34.340
if something's wrong, return and there's an error


00:16:34.340 --> 00:16:36.200
and then go do the thing I was really wanting to do.


00:16:36.200 --> 00:16:38.780
So it's not indented, 'cause I really liked that style.


00:16:38.780 --> 00:16:41.740
And it was suggesting that I like include,


00:16:41.740 --> 00:16:46.740
I reversed that if so I don't have as many as much cycle,


00:16:46.740 --> 00:16:50.060
not cycle, as many decision points, right?


00:16:50.060 --> 00:16:53.620
There's not as many branches as going on there.


00:16:53.620 --> 00:16:55.140
And that's fine.


00:16:55.140 --> 00:16:56.180
I just don't have to accept that


00:16:56.180 --> 00:16:57.460
it doesn't automatically do it.


00:16:57.460 --> 00:16:59.900
But it constantly was highlighting that with like squiggles


00:16:59.900 --> 00:17:02.140
as if something was wrong with my editor.


00:17:02.140 --> 00:17:04.540
And other tools like PyCharm do that.


00:17:04.540 --> 00:17:06.020
You could just say, you know what, for this thing,


00:17:06.020 --> 00:17:07.660
please don't tell me that this is the fix


00:17:07.660 --> 00:17:11.260
'cause I really want this to be here for reason X, Y, and Z.


00:17:11.260 --> 00:17:14.420
I couldn't find a way to do that in Sorcery,


00:17:14.420 --> 00:17:16.100
and it was driving me crazy.


00:17:16.100 --> 00:17:18.100
I'm like, no, this is not wrong.


00:17:18.100 --> 00:17:20.220
Like, stop telling me it's wrong.


00:17:20.220 --> 00:17:23.140
So I really hope, you know, if they're listening,


00:17:23.140 --> 00:17:27.260
maybe you could hint and add like a #ignore sorcery line


00:17:27.260 --> 00:17:30.700
type of thing, like all the other editors have.


00:17:30.700 --> 00:17:33.140
But yeah, no, I do think it's a cool tool


00:17:33.140 --> 00:17:36.020
and people should check it out if it sounds interesting.


00:17:36.020 --> 00:17:38.460
- Yeah, it'll be nice to have this configurable,


00:17:38.460 --> 00:17:41.600
stop complaining about this, but if I clean and--


00:17:41.600 --> 00:17:44.260
- Right, or either I would even be happy to just say,


00:17:44.260 --> 00:17:45.780
please don't tell me about,


00:17:45.780 --> 00:17:47.820
'cause it was like very specific,


00:17:47.820 --> 00:17:49.780
like one very small suggestion,


00:17:49.780 --> 00:17:51.620
like just don't suggest that to me ever.


00:17:51.620 --> 00:17:52.980
Like I don't ever want that,


00:17:52.980 --> 00:17:55.180
but everything else you do, I love you, thank you.


00:17:55.180 --> 00:17:58.100
(both laughing)


00:17:58.100 --> 00:18:03.100
Nice, yeah, John Sheehan has a comment.


00:18:03.100 --> 00:18:05.380
Some code efficiency improvements


00:18:05.380 --> 00:18:07.460
could end up obfuscating intent.


00:18:07.460 --> 00:18:09.580
Absolutely, for sure, they definitely could.


00:18:09.580 --> 00:18:11.580
I feel like a lot of what it's suggesting actually


00:18:11.580 --> 00:18:13.420
is a clarifying change.


00:18:13.420 --> 00:18:14.900
It's like, look, you're duplicating this code


00:18:14.900 --> 00:18:16.900
or this is overly indented.


00:18:16.900 --> 00:18:18.140
Here's how you change it so it's not.


00:18:18.140 --> 00:18:19.740
So I feel like on that regard,


00:18:19.740 --> 00:18:21.060
Sourcery is really good.


00:18:21.060 --> 00:18:21.900
- Yeah, same.


00:18:21.900 --> 00:18:22.780
I have the same feeling.


00:18:22.780 --> 00:18:25.420
Like it doesn't try to give you like


00:18:25.420 --> 00:18:27.380
very quirky refactorings.


00:18:27.380 --> 00:18:30.140
It's actually tries to make your code easier


00:18:30.140 --> 00:18:33.940
by like removing redundant lines and stuff like that.


00:18:33.940 --> 00:18:34.780
- Yeah.


00:18:34.780 --> 00:18:36.340
- Yeah, but-- - But a very good point.


00:18:36.340 --> 00:18:39.980
But a tool like this that could make it more obfuscated.


00:18:39.980 --> 00:18:41.420
Now there's something that would be fun.


00:18:41.420 --> 00:18:42.900
- There's job security right there, baby.


00:18:42.900 --> 00:18:43.740
- Yeah, yeah.


00:18:43.740 --> 00:18:45.780
- Command + Alt + L, reformat for...


00:18:45.780 --> 00:18:47.940
- Reformat for Brian.


00:18:47.940 --> 00:18:48.780
- Exactly.


00:18:48.780 --> 00:18:50.380
(laughing)


00:18:50.380 --> 00:18:52.540
No one can work on this project, but so and so.


00:18:52.540 --> 00:18:54.100
Quickly reformat it to viewable,


00:18:54.100 --> 00:18:55.980
work on it and re-encode it.


00:18:55.980 --> 00:18:57.100
Perfect.


00:18:57.100 --> 00:18:58.780
- Yeah, that'd be cool.


00:18:58.780 --> 00:18:59.620
- Yeah.


00:18:59.620 --> 00:19:00.860
(laughing)


00:19:00.860 --> 00:19:03.460
- Something else that's awesome is Linode.


00:19:03.460 --> 00:19:04.540
- Thank you, Linode.


00:19:04.540 --> 00:19:06.660
Thank you for sponsoring the episode.


00:19:06.660 --> 00:19:08.780
Simplify your infrastructure and cut your cloud bills


00:19:08.780 --> 00:19:11.820
in half with Linode's Linux virtual machines.


00:19:11.820 --> 00:19:14.220
Develop, deploy, and scale your modern applications


00:19:14.220 --> 00:19:15.620
faster and easier.


00:19:15.620 --> 00:19:17.380
Whether you're developing a personal project


00:19:17.380 --> 00:19:19.180
or managing larger workloads,


00:19:19.180 --> 00:19:20.740
you deserve simple, affordable,


00:19:20.740 --> 00:19:24.140
and accessible cloud computing solutions.


00:19:24.140 --> 00:19:26.060
As a listener of Python Bytes,


00:19:26.060 --> 00:19:28.300
you'll get a $100 free credit.


00:19:28.300 --> 00:19:32.780
You can find all the details at pythonbytes.fm/linode.


00:19:32.780 --> 00:19:37.320
Linode has data centers around the world with the same simple and consistent pricing regardless


00:19:37.320 --> 00:19:39.640
of location.


00:19:39.640 --> 00:19:42.440
Choose the data center nearest to your users.


00:19:42.440 --> 00:19:48.480
You also receive 24/7/365 human support with no tiers or handoffs regardless of your plan


00:19:48.480 --> 00:19:49.480
size.


00:19:49.480 --> 00:19:54.040
You can choose shared or dedicated compute instances, or you can use your $100 credit


00:19:54.040 --> 00:19:59.160
on an S3 compatible object storage, manage Kubernetes, and more.


00:19:59.160 --> 00:20:01.640
If it runs on Linux, it runs on Linode.


00:20:01.640 --> 00:20:03.960
visit pythonbytes.fm/linode


00:20:03.960 --> 00:20:07.600
and click on the create free account button to get started.


00:20:07.600 --> 00:20:08.440
- Absolutely.


00:20:08.440 --> 00:20:09.260
You know what I like about Linode?


00:20:09.260 --> 00:20:11.200
It's like straightforward and simple.


00:20:11.200 --> 00:20:13.720
I go to places like AWS, I'm like, what is all this stuff?


00:20:13.720 --> 00:20:17.400
And why am I like so deep in the permissions of AIMs


00:20:17.400 --> 00:20:19.040
in order to send an email over here?


00:20:19.040 --> 00:20:21.280
Just connect, like it's just, ah,


00:20:21.280 --> 00:20:23.900
like I just want to create a server, make it go.


00:20:23.900 --> 00:20:25.360
Let's do that.


00:20:25.360 --> 00:20:26.200
- Nice.


00:20:31.260 --> 00:20:32.600
- Are we there?


00:20:32.600 --> 00:20:33.520
- We're there.


00:20:33.520 --> 00:20:34.360
- We're there.


00:20:34.360 --> 00:20:35.200
- We're there.


00:20:35.200 --> 00:20:36.020
- Okay.


00:20:36.020 --> 00:20:37.480
- We're onto your next item, I believe.


00:20:37.480 --> 00:20:38.960
Wait, no, we're not.


00:20:38.960 --> 00:20:40.920
I'm jumping ahead, we're onto my next item.


00:20:40.920 --> 00:20:44.040
So I'm gonna, I'll steal back of that.


00:20:44.040 --> 00:20:47.520
So I'm on a database kick for some reason this week.


00:20:47.520 --> 00:20:48.940
I mean, I love databases, which is weird


00:20:48.940 --> 00:20:49.920
because when I first learned them,


00:20:49.920 --> 00:20:51.580
they seemed so challenging and odd


00:20:51.580 --> 00:20:52.760
and I struggled with them.


00:20:52.760 --> 00:20:54.560
But I don't know, I just really enjoy


00:20:54.560 --> 00:20:55.600
thinking about databases


00:20:55.600 --> 00:20:58.380
'cause they're like the magic of your application, right?


00:20:58.380 --> 00:21:01.120
A really slow clunky database will just like bring it down.


00:21:01.120 --> 00:21:03.200
but a really nice polished one is like,


00:21:03.200 --> 00:21:05.840
how is that so fast and smooth?


00:21:05.840 --> 00:21:08.120
Like I really like working with this site.


00:21:08.120 --> 00:21:10.960
So one that I haven't spoken much about


00:21:10.960 --> 00:21:12.760
and honestly don't have a ton of experience with,


00:21:12.760 --> 00:21:14.760
but I do think is an interesting consideration


00:21:14.760 --> 00:21:19.760
is another branch of the NoSQL world in graph databases.


00:21:19.760 --> 00:21:24.400
So instead of modeling columns,


00:21:24.400 --> 00:21:27.560
you're really modeling entities and then their relationships.


00:21:27.560 --> 00:21:30.160
Like the relationship thing is the first class thing


00:21:30.160 --> 00:21:32.780
and you can query by relationships


00:21:32.780 --> 00:21:36.440
instead of querying by data and then like joining and so on.


00:21:36.440 --> 00:21:41.440
So a popular one for this is Neo4j.


00:21:41.440 --> 00:21:45.060
And there's some nice ways to talk to it from Python.


00:21:45.060 --> 00:21:48.440
And there's this, I don't even know what to call it.


00:21:48.440 --> 00:21:49.680
OGM, I guess is the right.


00:21:49.680 --> 00:21:52.300
So I said ODM for object document mapper.


00:21:52.300 --> 00:21:55.720
So in the graph world, it's OGM for object graph mapper.


00:21:56.960 --> 00:22:00.420
So there's an object graph mapper called NeoModel.


00:22:00.420 --> 00:22:02.040
And I ran across this and I'm just like,


00:22:02.040 --> 00:22:03.140
oh, this is super cool.


00:22:03.140 --> 00:22:07.300
So the idea is that you can basically create these classes.


00:22:07.300 --> 00:22:09.440
And if you look at how you do it,


00:22:09.440 --> 00:22:12.340
if you've ever used Django ORM or Mongo engine


00:22:12.340 --> 00:22:14.500
or something like that, it's literally the same thing.


00:22:14.500 --> 00:22:17.860
So if you know Django ORM, you basically can do this.


00:22:17.860 --> 00:22:22.020
Which is powerful because it gives you


00:22:22.020 --> 00:22:24.340
a whole different way to work with data


00:22:24.340 --> 00:22:26.820
and a whole different option without rethinking the world.


00:22:26.820 --> 00:22:29.380
So I could create, say, for example, a country,


00:22:29.380 --> 00:22:31.980
which is derived from structured node.


00:22:31.980 --> 00:22:34.860
And then just like Django, you would say code equals,


00:22:34.860 --> 00:22:38.100
instead of string column, you would say string property.


00:22:38.100 --> 00:22:40.660
And it has an index, the index is uniqueness,


00:22:40.660 --> 00:22:42.000
the field is required, boom, that's it.


00:22:42.000 --> 00:22:45.740
Like one line field and it's defined.


00:22:45.740 --> 00:22:48.900
Then a person, person might have a relationship


00:22:48.900 --> 00:22:51.080
back to a country and so on.


00:22:51.080 --> 00:22:53.980
And really, really neat, the way you just sort of define this


00:22:53.980 --> 00:22:57.100
And then you can do interesting queries on it.


00:22:57.100 --> 00:22:58.820
You can ask like,


00:22:58.820 --> 00:23:03.460
give me the nodes where,


00:23:03.460 --> 00:23:05.460
the person nodes where the name is Jim.


00:23:05.460 --> 00:23:07.060
And that's pretty simple.


00:23:07.060 --> 00:23:07.880
Or you can say,


00:23:07.880 --> 00:23:10.580
give me the nodes where the age is greater than three


00:23:10.580 --> 00:23:11.420
or whatever.


00:23:11.420 --> 00:23:14.060
But also you can ask things like,


00:23:14.060 --> 00:23:15.980
give me the country.


00:23:15.980 --> 00:23:17.900
All right, so go Jim.country.


00:23:17.900 --> 00:23:19.060
Is that connected to Germany?


00:23:19.060 --> 00:23:19.900
Yes or no.


00:23:19.900 --> 00:23:22.460
If it is, then Jim is from Germany.


00:23:22.460 --> 00:23:24.540
or you can go to Germany and say,


00:23:24.540 --> 00:23:26.020
give me all the inhabitants


00:23:26.020 --> 00:23:28.380
and it'll tell you all the people in there.


00:23:28.380 --> 00:23:29.860
And you can even say things like,


00:23:29.860 --> 00:23:31.840
I would like all the people in Germany,


00:23:31.840 --> 00:23:32.860
whose name is Jim.


00:23:32.860 --> 00:23:35.540
So Germany.inhabitant.search name equals Jim,


00:23:35.540 --> 00:23:38.260
like an incredibly simple programming model


00:23:38.260 --> 00:23:41.260
to work with these graph databases.


00:23:41.260 --> 00:23:44.340
So if you've got like really structured related data,


00:23:44.340 --> 00:23:47.220
but you wanna like follow those relationships around,


00:23:47.220 --> 00:23:50.260
you know, maybe Postgres is not the best option


00:23:50.260 --> 00:23:51.080
for that kind of data.


00:23:51.080 --> 00:23:52.420
And this would be a good one.


00:23:52.420 --> 00:23:56.220
- Cool, huh?


00:23:56.220 --> 00:23:59.060
Takes a bit of a mind bending getting used to it,


00:23:59.060 --> 00:24:00.100
but pretty neat.


00:24:00.100 --> 00:24:02.580
- Yeah.


00:24:02.580 --> 00:24:04.300
- Yeah, Sebastian, have you ever had to do anything


00:24:04.300 --> 00:24:06.460
with graph databases?


00:24:06.460 --> 00:24:09.480
- No, but when I was looking at your code examples,


00:24:09.480 --> 00:24:11.220
I was thinking why there is Django code,


00:24:11.220 --> 00:24:12.340
and then you started saying, yeah,


00:24:12.340 --> 00:24:14.800
it looks similar to Django, and I was like, okay.


00:24:14.800 --> 00:24:16.220
- Yeah, exactly, why is there Django code


00:24:16.220 --> 00:24:18.360
in my graph database?


00:24:18.360 --> 00:24:20.200
But I think that's a huge benefit


00:24:20.200 --> 00:24:21.340
for the Python world, right?


00:24:21.340 --> 00:24:24.580
Like a lot of people know the Django ORM model,


00:24:24.580 --> 00:24:26.860
or it's also the same as Mongo engine,


00:24:26.860 --> 00:24:30.500
which obviously is also inspired by Django's ORM.


00:24:30.500 --> 00:24:33.060
And so a really straightforward way,


00:24:33.060 --> 00:24:35.540
like I think you could get up to speed in an hour


00:24:35.540 --> 00:24:37.340
if you knew Django and working with this thing.


00:24:37.340 --> 00:24:39.140
It seems real straightforward.


00:24:39.140 --> 00:24:40.940
- So it might be kind of cool to see


00:24:40.940 --> 00:24:45.940
like somebody do an example where they did the,


00:24:45.940 --> 00:24:49.620
like a toy example in a graph database,


00:24:49.620 --> 00:24:53.700
a relational in the document to see


00:24:53.700 --> 00:24:58.060
what the trade-offs and benefits and things that are--


00:24:58.060 --> 00:25:00.980
- Right, we've got that silly to-do app


00:25:00.980 --> 00:25:05.520
that everyone has used for JavaScript front-end frameworks


00:25:05.520 --> 00:25:09.420
to show like, here's how you build to-do in Vue.js,


00:25:09.420 --> 00:25:10.860
here's how you build it in React.


00:25:10.860 --> 00:25:12.940
I think having this canonical database


00:25:12.940 --> 00:25:14.460
represent it side by side,


00:25:14.460 --> 00:25:16.280
like here's the Postgres version,


00:25:16.280 --> 00:25:18.580
here's the Neo4j version, all in Python,


00:25:18.580 --> 00:25:19.660
That would be an awesome article.


00:25:19.660 --> 00:25:22.320
Somebody had a bunch of time and desire.


00:25:22.320 --> 00:25:24.100
- Yeah.


00:25:24.100 --> 00:25:27.080
- Yeah, pretty cool, pretty cool.


00:25:27.080 --> 00:25:30.780
Now you can talk about your item.


00:25:30.780 --> 00:25:34.100
I didn't mean to shoot you too far ahead there.


00:25:34.100 --> 00:25:37.980
- No, so I lost my window.


00:25:37.980 --> 00:25:39.580
There it is.


00:25:39.580 --> 00:25:44.580
So I've been thinking about, I don't mock much.


00:25:44.580 --> 00:25:48.100
When I test, I try to test everything whenever I can,


00:25:48.100 --> 00:25:50.120
But I've been learning about mocks a little bit


00:25:50.120 --> 00:25:53.820
and mocking just because in some cases you kind of want to.


00:25:53.820 --> 00:25:58.220
So as I got into it, I didn't get very far


00:25:58.220 --> 00:26:01.460
before I realized that specking was like,


00:26:01.460 --> 00:26:03.940
like something that people found out about later


00:26:03.940 --> 00:26:07.540
but sounds sort of magical and I wanted to know more.


00:26:07.540 --> 00:26:10.340
And I, and so I asked the Twitterverse,


00:26:10.340 --> 00:26:12.880
whoever follows me and stuff,


00:26:12.880 --> 00:26:16.900
if specking is something that you should do always


00:26:16.900 --> 00:26:19.340
are avoided, is there downsides?


00:26:19.340 --> 00:26:22.320
And then one of the things that I got back


00:26:22.320 --> 00:26:26.340
was Stargirlflower's article called


00:26:26.340 --> 00:26:29.020
my Python Testing Style Guide,


00:26:29.020 --> 00:26:32.540
which includes this incredible section on mocking.


00:26:32.540 --> 00:26:36.220
And her section is, the section is called


00:26:36.220 --> 00:26:38.460
a mock must always have a spec.


00:26:38.460 --> 00:26:43.300
And it's just a really, if you've ever wondered about this,


00:26:43.300 --> 00:26:47.440
It's a really good discussion about mocking


00:26:47.440 --> 00:26:49.480
because it's not their evil,


00:26:49.480 --> 00:26:51.620
and it's also not go run out and use them.


00:26:51.620 --> 00:26:55.400
The recommendations really are use real objects


00:26:55.400 --> 00:26:58.180
for collaborators whenever possible.


00:26:58.180 --> 00:27:01.540
But if you must mock, always use auto spec.


00:27:01.540 --> 00:27:04.200
And so the idea around specing or not specing


00:27:04.200 --> 00:27:08.240
is if I create a mock object, it can be anything.


00:27:08.240 --> 00:27:10.460
I can ask it for the date.


00:27:10.460 --> 00:27:13.420
I can ask it for the temperature of my coffee.


00:27:13.420 --> 00:27:15.940
I can ask it for anything, or I can pass it anything,


00:27:15.940 --> 00:27:16.860
and it'll accept it.


00:27:16.860 --> 00:27:18.780
That's kind of what mocks do.


00:27:18.780 --> 00:27:21.980
But if you say auto spec, you say,


00:27:21.980 --> 00:27:25.020
I want this thing to mock this other class


00:27:25.020 --> 00:27:26.960
and have auto spec be true.


00:27:26.960 --> 00:27:30.620
It means I can't do anything to that mocked class


00:27:30.620 --> 00:27:33.260
that I couldn't do to the real thing.


00:27:33.260 --> 00:27:35.860
So all the interface is identical.


00:27:35.860 --> 00:27:38.700
You can't do functions that aren't there.


00:27:38.700 --> 00:27:40.940
And that's where I thought, well, that seems like a good thing.


00:27:40.940 --> 00:27:43.540
And apparently it is.


00:27:43.540 --> 00:27:47.740
- I think it's a good thing because you would like your test


00:27:47.740 --> 00:27:51.700
to at least require a thing behaves like the real thing, right?


00:27:51.700 --> 00:27:53.100
It might not give the real data back,


00:27:53.100 --> 00:27:55.660
but you shouldn't be able to call functions that don't exist


00:27:55.660 --> 00:27:58.140
or access fields that don't exist and so on.


00:27:58.140 --> 00:28:00.580
- And more importantly, one of the things


00:28:00.580 --> 00:28:02.540
that's highlighted in this article


00:28:02.540 --> 00:28:06.780
is even if you could manually get it just right,


00:28:06.780 --> 00:28:08.820
Later you might change the interface.


00:28:08.820 --> 00:28:11.680
You might change the API call, add a function


00:28:11.680 --> 00:28:13.780
or add a parameter that's required


00:28:13.780 --> 00:28:16.940
or remove a parameter that's not needed anymore.


00:28:16.940 --> 00:28:21.180
And your tests that use the mock that are custom built


00:28:21.180 --> 00:28:24.500
are still passing, but they shouldn't be.


00:28:24.500 --> 00:28:29.500
And with Autospec, your test will fail at that point


00:28:29.500 --> 00:28:32.900
when the interface break happens.


00:28:32.900 --> 00:28:33.740
So.


00:28:33.740 --> 00:28:35.620
- You run your tests more than once?


00:28:35.620 --> 00:28:36.600
(laughing)


00:28:36.600 --> 00:28:40.320
- No, of course, obviously this is why you,


00:28:40.320 --> 00:28:43.360
one of the main values is this thing is locked down.


00:28:43.360 --> 00:28:45.940
I want to be able to make dramatic changes to it


00:28:45.940 --> 00:28:47.180
and see that it hangs together.


00:28:47.180 --> 00:28:49.560
And if things like rename a function


00:28:49.560 --> 00:28:53.040
has no effect on the test path, that's not so good.


00:28:53.040 --> 00:28:55.300
- Yeah, and then there's a whole bunch of other great advice


00:28:55.300 --> 00:28:58.540
that she gives around mocking, talks about,


00:28:58.540 --> 00:29:00.320
consider using stubs and fakes,


00:29:00.320 --> 00:29:03.000
and even gives an example of what those are.


00:29:03.000 --> 00:29:06.260
And basically it's like writing your own little tiny thing


00:29:06.260 --> 00:29:10.020
to substitute for the real thing.


00:29:10.020 --> 00:29:11.420
And spies, which are cool.


00:29:11.420 --> 00:29:13.980
Spies are like a mock wrapper around a real object,


00:29:13.980 --> 00:29:16.180
so it behaves the same as it always did.


00:29:16.180 --> 00:29:18.700
But you can interrogate how it was called.


00:29:18.700 --> 00:29:20.900
That's kind of a neat thing.


00:29:20.900 --> 00:29:23.360
And some advice that I didn't really consider before


00:29:23.360 --> 00:29:24.340
is to--


00:29:24.340 --> 00:29:27.220
the test code is way cleaner if you don't


00:29:27.220 --> 00:29:29.380
give the mocks special names.


00:29:29.380 --> 00:29:31.580
Like a lot of people, if I wanted to mock Foo,


00:29:31.580 --> 00:29:35.140
I might kind of title it Mock Foo.


00:29:35.140 --> 00:29:38.120
And she says, don't do that, just name it foo,


00:29:38.120 --> 00:29:39.700
then your code looks a lot cleaner.


00:29:39.700 --> 00:29:41.900
And I tried it out and it does really great.


00:29:41.900 --> 00:29:43.620
- Nice. - It does help out.


00:29:43.620 --> 00:29:45.360
Anyway, great advice on mocking.


00:29:45.360 --> 00:29:47.780
So if you're considering mocking, go read that.


00:29:47.780 --> 00:29:50.700
- And if you're doing unit testing


00:29:50.700 --> 00:29:53.380
and you want to not test all of your dependencies,


00:29:53.380 --> 00:29:55.120
basically, if you don't wanna do integration tests,


00:29:55.120 --> 00:29:57.620
you probably should be doing something like this.


00:29:57.620 --> 00:29:59.460
- Yeah, I mean, I hardly ever use them.


00:29:59.460 --> 00:30:03.020
I do things like rerouting my code through,


00:30:03.020 --> 00:30:05.120
like any, I kind of designed it into my code.


00:30:05.120 --> 00:30:07.840
if I have a chance, like for instance,


00:30:07.840 --> 00:30:12.840
if I need to have a, I know anything with a database,


00:30:12.840 --> 00:30:14.840
I know I'm gonna have to redirect the database


00:30:14.840 --> 00:30:17.600
during testing, so that's just built into the design


00:30:17.600 --> 00:30:20.720
of the system to be able to reroute that somewhere.


00:30:20.720 --> 00:30:22.200
- Yeah.


00:30:22.200 --> 00:30:23.380
Sebastian, what do you think?


00:30:23.380 --> 00:30:25.600
- Yeah, that's a bunch of good advice.


00:30:25.600 --> 00:30:28.160
So that's a very good article.


00:30:28.160 --> 00:30:30.080
And I kind of agree with you,


00:30:30.080 --> 00:30:34.040
like I also prefer to kind of like mock a specific method


00:30:34.040 --> 00:30:36.220
of a real object, not to create a mock


00:30:36.220 --> 00:30:38.240
and then add stuff around.


00:30:38.240 --> 00:30:40.480
Although I think it's a different word


00:30:40.480 --> 00:30:41.800
for mocking a method.


00:30:41.800 --> 00:30:44.000
It's a stab or one of those words.


00:30:44.000 --> 00:30:46.360
I could never remember which one is which.


00:30:46.360 --> 00:30:49.640
- Yeah, yeah, for sure.


00:30:49.640 --> 00:30:55.480
And then Robert Robertson is getting philosophical here.


00:30:55.480 --> 00:30:57.880
It says a mock must always have a spec.


00:30:57.880 --> 00:30:59.840
Will they add that to the Zen of Python?


00:30:59.840 --> 00:31:01.920
I don't know.


00:31:01.920 --> 00:31:03.520
- In Python 4.0.


00:31:03.520 --> 00:31:04.360
- Yeah, exactly.


00:31:04.360 --> 00:31:06.800
These are two things that are very unlikely.


00:31:06.800 --> 00:31:09.000
- XANA is not extensible.


00:31:09.000 --> 00:31:12.040
- Yeah, possibly.


00:31:12.040 --> 00:31:14.960
Oh, also Dean was asking if the episode started,


00:31:14.960 --> 00:31:16.840
the live stream started early today.


00:31:16.840 --> 00:31:21.200
Hey Dean, daylight savings mismatch by a few weeks


00:31:21.200 --> 00:31:23.680
with the rest of the world, at least with Europe.


00:31:23.680 --> 00:31:24.920
Yeah, exactly.


00:31:24.920 --> 00:31:25.980
That's the story.


00:31:25.980 --> 00:31:27.880
All right.


00:31:27.880 --> 00:31:32.760
Speaking of time zones and stuff that's challenging,


00:31:32.760 --> 00:31:35.120
Speaking at conferences can be tricky


00:31:35.120 --> 00:31:36.840
'cause it's virtual, you're not actually there.


00:31:36.840 --> 00:31:38.300
So when does it really start?


00:31:38.300 --> 00:31:41.280
Well, maybe at least we can know which ones are out there


00:31:41.280 --> 00:31:44.120
and when the call for proposals are done, huh, Sebastian?


00:31:44.120 --> 00:31:47.040
- Yeah, so yeah, as you said,


00:31:47.040 --> 00:31:51.480
since the PyCon call for proposal acceptance emails


00:31:51.480 --> 00:31:54.460
will be sent this week, I was thinking about conferences.


00:31:54.460 --> 00:31:58.860
And since it's 2021, most conferences are moving online,


00:31:58.860 --> 00:32:01.800
which is really cool 'cause, well, they are cheaper


00:32:01.800 --> 00:32:04.200
because you, well, first of all, tickets are cheaper.


00:32:04.200 --> 00:32:05.200
A lot of them are free.


00:32:05.200 --> 00:32:06.920
Then you don't have to pay for the accommodation.


00:32:06.920 --> 00:32:09.360
You don't have to pay for the ticket.


00:32:09.360 --> 00:32:10.280
You don't have to fly.


00:32:10.280 --> 00:32:11.480
So we don't have to take holidays.


00:32:11.480 --> 00:32:14.440
So a lot of benefits.


00:32:14.440 --> 00:32:16.880
And I was wondering, like,


00:32:16.880 --> 00:32:19.440
how do you find conferences to attend?


00:32:19.440 --> 00:32:22.480
Like there is this list at python.org


00:32:22.480 --> 00:32:24.780
that lists some conferences,


00:32:24.780 --> 00:32:27.760
but it doesn't have the smaller local events.


00:32:27.760 --> 00:32:29.560
And you also don't have dates.


00:32:29.560 --> 00:32:32.000
So you only have links to all the global,


00:32:32.000 --> 00:32:35.300
well, countrywide conferences,


00:32:35.300 --> 00:32:37.220
but you don't know when they are starting.


00:32:37.220 --> 00:32:39.980
So I found this tool called Conference Radar,


00:32:39.980 --> 00:32:43.540
and it's a PyPI package that you can install,


00:32:43.540 --> 00:32:46.800
and then you get a command line tool that you can run


00:32:46.800 --> 00:32:48.700
to get a list of upcoming conferences,


00:32:48.700 --> 00:32:50.580
which is pretty cool,


00:32:50.580 --> 00:32:53.620
especially that you can have some parameters,


00:32:53.620 --> 00:32:55.940
like you can ask when,


00:32:55.940 --> 00:32:57.620
you can get a list of conferences


00:32:57.620 --> 00:32:59.460
that have opened the call for proposals,


00:32:59.460 --> 00:33:01.380
So you can, if you want to submit a talk,


00:33:01.380 --> 00:33:04.660
you can see which conferences are accepting those.


00:33:04.660 --> 00:33:07.740
And I really like it that you get this nice ASCII table


00:33:07.740 --> 00:33:10.420
in the terminal, since I love CLI tools,


00:33:10.420 --> 00:33:12.620
this is really cool for me to use.


00:33:12.620 --> 00:33:13.540
- Yeah, yeah.


00:33:13.540 --> 00:33:15.620
I think these integrate some rich,


00:33:15.620 --> 00:33:18.740
get even like fancier tables, but yeah, it's really nice.


00:33:18.740 --> 00:33:21.980
- Yeah, but the downside is that they don't have


00:33:21.980 --> 00:33:24.140
that many conferences because it's using


00:33:24.140 --> 00:33:25.500
only a few data sources.


00:33:25.500 --> 00:33:27.620
So when I was running it today,


00:33:27.620 --> 00:33:29.680
I couldn't find that many conferences


00:33:29.680 --> 00:33:33.120
and actually there was no call for proposal open,


00:33:33.120 --> 00:33:35.120
like no date was there.


00:33:35.120 --> 00:33:36.860
So I hope it will improve,


00:33:36.860 --> 00:33:39.520
but so far this is my best tool


00:33:39.520 --> 00:33:41.480
to like find the upcoming conferences.


00:33:41.480 --> 00:33:42.920
- Yeah, and if people are out there listening,


00:33:42.920 --> 00:33:43.740
they have a conference,


00:33:43.740 --> 00:33:44.780
they wanna get the word out about it,


00:33:44.780 --> 00:33:48.400
you know, might as well go add it to the data source


00:33:48.400 --> 00:33:49.840
that these things are using.


00:33:49.840 --> 00:33:52.040
- Yeah, that would be awesome.


00:33:52.040 --> 00:33:53.320
- Yeah, this thing's cool.


00:33:53.320 --> 00:33:54.200
I checked it out.


00:33:54.200 --> 00:33:55.680
One bit of confusion for me is


00:33:55.680 --> 00:33:57.360
if you look at the description,


00:33:57.360 --> 00:33:59.720
It says installation, you can simply use pip


00:33:59.720 --> 00:34:03.160
to install Conrad for conference radar.


00:34:03.160 --> 00:34:06.800
So you can use pip to install Conrad,


00:34:06.800 --> 00:34:09.400
but you cannot pip install Conrad.


00:34:09.400 --> 00:34:10.800
That will not work.


00:34:10.800 --> 00:34:11.620
It may work.


00:34:11.620 --> 00:34:13.200
If it does, you should maybe be concerned


00:34:13.200 --> 00:34:16.000
because someone heard the show and put something in.


00:34:16.000 --> 00:34:18.920
You have to pip install conference-radar.


00:34:18.920 --> 00:34:21.800
So I don't know, maybe just a little clarification


00:34:21.800 --> 00:34:23.100
for people who want to check this out.


00:34:23.100 --> 00:34:27.920
but the command, the CLI is Conrad show, Conrad refresh,


00:34:27.920 --> 00:34:30.420
Conrad call for proposals, things like that.


00:34:30.420 --> 00:34:32.860
You can even set reminders, right?


00:34:32.860 --> 00:34:36.140
It'll like remind you when the call for proposal is closing.


00:34:36.140 --> 00:34:37.500
- Oh, cool. I didn't see that.


00:34:37.500 --> 00:34:39.460
- Yeah, I think there's a remind feature in here.


00:34:39.460 --> 00:34:41.340
I can't remember exactly how it works,


00:34:41.340 --> 00:34:44.400
but yeah, yeah, pretty cool.


00:34:44.400 --> 00:34:45.660
- I'm glad that you mentioned that


00:34:45.660 --> 00:34:47.540
'cause I just tried to pip install Conrad


00:34:47.540 --> 00:34:49.240
and I'm like, it didn't work, man.


00:34:49.240 --> 00:34:51.460
- It's broken. What is this thing?


00:34:51.460 --> 00:34:53.860
- Yeah, I just think the documentation's a little unclear


00:34:53.860 --> 00:34:57.020
'cause the CLI and the package name are not the same.


00:34:57.020 --> 00:34:59.100
- At least you didn't get some malicious package.


00:34:59.100 --> 00:35:00.140
- Exactly.


00:35:00.140 --> 00:35:01.900
- Mining bitcoins right now.


00:35:01.900 --> 00:35:04.340
- Exactly, why is my computer hot?


00:35:04.340 --> 00:35:05.180
That's weird.


00:35:05.180 --> 00:35:09.340
- Suddenly my camera turned on.


00:35:09.340 --> 00:35:11.980
Oh no, we're doing a live stream, that's why.


00:35:11.980 --> 00:35:12.820
- Yep, yep.


00:35:19.380 --> 00:35:21.740
- Oh, and also Dean has a quick comment for you there,


00:35:21.740 --> 00:35:23.140
Sebastian, oh, this is perfect.


00:35:23.140 --> 00:35:27.060
And I think I maintain a Google calendar for conferences.


00:35:27.060 --> 00:35:27.900
Yeah. - Oh, cool.


00:35:27.900 --> 00:35:30.240
- Yeah, that's a good idea.


00:35:30.240 --> 00:35:33.540
- Yeah, I was looking for different sources


00:35:33.540 --> 00:35:35.620
where to get the conference information.


00:35:35.620 --> 00:35:39.220
And so far, the most reliable one is my friend Miro


00:35:39.220 --> 00:35:41.300
on Twitter, who is submitting and speaking


00:35:41.300 --> 00:35:42.500
at a lot of conferences.


00:35:42.500 --> 00:35:43.340
- Yeah, he is at a lot of conferences.


00:35:43.340 --> 00:35:46.020
- I'm following him and he's always speaking.


00:35:46.020 --> 00:35:47.260
He's always tweeting.


00:35:47.260 --> 00:35:49.680
So that's my best bet so far.


00:35:49.680 --> 00:35:51.500
- I met him at PyCon Slovakia.


00:35:51.500 --> 00:35:54.020
So yeah, I know he's at the conferences often.


00:35:54.020 --> 00:35:54.860
- Yeah.


00:35:54.860 --> 00:35:56.880
- Awesome.


00:35:56.880 --> 00:35:57.720
Brian, is that it?


00:35:57.720 --> 00:35:59.680
- That's it for me.


00:35:59.680 --> 00:36:02.340
Do you have anything you wanna share?


00:36:02.340 --> 00:36:04.640
- Oh yeah, I almost have an extra, extra, extra, extra


00:36:04.640 --> 00:36:07.140
hear all about it section to share, but not quite.


00:36:07.140 --> 00:36:11.040
So I'll keep it a little bit quick here,


00:36:11.040 --> 00:36:11.880
but I'll go through some things.


00:36:11.880 --> 00:36:14.060
First of all, quick announcement,


00:36:14.060 --> 00:36:17.380
Sebastian and I have been working for, as he hinted at,


00:36:17.380 --> 00:36:18.660
I don't know if this was on the recording


00:36:18.660 --> 00:36:20.180
or before we started, but for like six months


00:36:20.180 --> 00:36:22.780
on a project called Modern Python Projects,


00:36:22.780 --> 00:36:25.660
which is a follow-on sort of course version


00:36:25.660 --> 00:36:28.420
of the Modern Python Developers Toolkit thing


00:36:28.420 --> 00:36:32.660
we did over at Talk Python, episode 279, I think.


00:36:32.660 --> 00:36:35.500
So we've got this awesome course out at


00:36:35.500 --> 00:36:39.100
talkpython.fm/modern-python-projects,


00:36:39.100 --> 00:36:40.540
or just click the link in the show notes


00:36:40.540 --> 00:36:41.360
and you can check it out.


00:36:41.360 --> 00:36:45.360
It's been out for an hour and 10 minutes.


00:36:45.360 --> 00:36:46.200
So not very long.


00:36:46.200 --> 00:36:47.760
- This looks really cool.


00:36:47.760 --> 00:36:48.680
I am excited about this.


00:36:48.680 --> 00:36:50.200
- Yeah, a lot of neat stuff that Sebastian,


00:36:50.200 --> 00:36:52.640
this is all Sebastian's work that he put into it here.


00:36:52.640 --> 00:36:53.840
So it's really cool.


00:36:53.840 --> 00:36:55.040
- You helped a lot as well.


00:36:55.040 --> 00:36:55.880
- Thanks.


00:36:55.880 --> 00:36:58.620
What would you like to, maybe, what do you think?


00:36:58.620 --> 00:36:59.460
Quick thing to share,


00:36:59.460 --> 00:37:01.520
tell people about this course that you built.


00:37:01.520 --> 00:37:07.120
- Yeah, so basically my idea was to give you an overview


00:37:07.120 --> 00:37:09.520
of everything you need to know,


00:37:09.520 --> 00:37:12.120
even if you don't have Python installed on your computer,


00:37:12.120 --> 00:37:14.320
all the way up to actually building


00:37:14.320 --> 00:37:16.860
and publishing your project.


00:37:16.860 --> 00:37:19.020
So basically we start by installing Python.


00:37:19.020 --> 00:37:21.240
I show you how to manage dependencies.


00:37:21.240 --> 00:37:23.720
We also show you how to set up VS Code


00:37:23.720 --> 00:37:24.960
for programming with Python.


00:37:24.960 --> 00:37:27.400
Then we add test, then we add tools like linters,


00:37:27.400 --> 00:37:29.620
formatters, some static code analysis.


00:37:29.620 --> 00:37:33.280
Then we add test documentation, obviously.


00:37:33.280 --> 00:37:36.280
We talk about continuous integration.


00:37:36.280 --> 00:37:37.920
There are like three sections


00:37:37.920 --> 00:37:39.280
where we build different projects


00:37:39.280 --> 00:37:42.760
and actually each of them is done in a different manner.


00:37:42.760 --> 00:37:44.220
So for one, I use Poetry,


00:37:44.220 --> 00:37:45.640
for the other one, I don't use Poetry,


00:37:45.640 --> 00:37:47.180
so we have a comparison.


00:37:47.180 --> 00:37:48.900
And all the way up to deploying,


00:37:48.900 --> 00:37:51.000
where I show you how to deploy, for example, to Heroku


00:37:51.000 --> 00:37:55.520
and how to create a Docker image and yeah, whole spectrum.


00:37:55.520 --> 00:37:56.740
- Yeah, that's cool, I definitely like it.


00:37:56.740 --> 00:37:59.180
So people can check that out, that's a quick item there,


00:37:59.180 --> 00:38:01.580
just that we launched that recently.


00:38:01.580 --> 00:38:04.520
And also, Brian, our pythonbytes.fm


00:38:04.520 --> 00:38:07.140
looks very bright right now, what do you think?


00:38:07.140 --> 00:38:08.840
- Yeah, neat.


00:38:08.840 --> 00:38:10.160
So one thing I wanted to do,


00:38:10.160 --> 00:38:12.880
people have been contacting us and saying,


00:38:12.880 --> 00:38:14.460
"Hey, I heard you mentioned like,


00:38:14.460 --> 00:38:16.500
"oh, we just mentioned Dean's name on the live stream.


00:38:16.500 --> 00:38:17.360
"What is this live stream?


00:38:17.360 --> 00:38:18.200
"When is it?


00:38:18.200 --> 00:38:19.020
"How do I find it?"


00:38:19.020 --> 00:38:21.360
So what I've done is I've updated the Python Bytes website


00:38:21.360 --> 00:38:23.580
and Talk Python for its live stream.


00:38:23.580 --> 00:38:26.480
But for Python Bytes, if you go to pythonbytes.fm,


00:38:26.480 --> 00:38:29.640
if we're live streaming at that very moment,


00:38:29.640 --> 00:38:31.400
there's like a big red banner across the top,


00:38:31.400 --> 00:38:32.480
like we're live streaming right now,


00:38:32.480 --> 00:38:33.800
come be part of the show.


00:38:33.800 --> 00:38:36.140
And then there's also a live stream menu item


00:38:36.140 --> 00:38:38.080
that'll take you over and show you


00:38:38.080 --> 00:38:40.000
like the live stuff that's happening.


00:38:40.000 --> 00:38:42.240
And it'll basically show you the live plan stream,


00:38:42.240 --> 00:38:43.640
but you can open that up on YouTube


00:38:43.640 --> 00:38:45.320
to be part of the live chat and so on.


00:38:45.320 --> 00:38:48.360
So live stream now on the podcast page,


00:38:48.360 --> 00:38:50.040
if it's a podcast site, if you visit it


00:38:50.040 --> 00:38:51.640
and it's called Bright, you know, and you got a moment,


00:38:51.640 --> 00:38:52.960
go check out the live stream.


00:38:52.960 --> 00:38:57.620
- Yeah, and then also if Michael's up to date on it,


00:38:57.620 --> 00:39:00.320
which he does all the work on this, I appreciate that.


00:39:00.320 --> 00:39:03.880
We announced when the next one's gonna be.


00:39:03.880 --> 00:39:06.680
So if you're not sure, you can just check it out anyway.


00:39:06.680 --> 00:39:09.600
and there should be a link there to say when.


00:39:09.600 --> 00:39:10.440
- Yeah, that's right.


00:39:10.440 --> 00:39:13.280
So normally what I try to do is schedule the next one


00:39:13.280 --> 00:39:14.240
when we're done with this one.


00:39:14.240 --> 00:39:16.200
So if people go there, they'll see the,


00:39:16.200 --> 00:39:17.440
like here's the next live streaming


00:39:17.440 --> 00:39:18.520
and YouTube has a button to say,


00:39:18.520 --> 00:39:21.220
set a reminder, tell me when this is happening.


00:39:21.220 --> 00:39:23.300
Last time, I think I said,


00:39:23.300 --> 00:39:25.280
is Python on Mars?


00:39:25.280 --> 00:39:29.400
Because that F plane, that flight overview system,


00:39:29.400 --> 00:39:31.000
it was using Python to train the models,


00:39:31.000 --> 00:39:34.800
but I think it's using C++ to fly the little helicopter thing


00:39:34.800 --> 00:39:38.000
And I just mentioned, if anybody knows Python's on Mars,


00:39:38.000 --> 00:39:40.440
that would be awesome because this is really cool


00:39:40.440 --> 00:39:43.180
and related, but it's not the same as Python on Mars.


00:39:43.180 --> 00:39:47.840
So Bojack Norseman sent a tweet over and said,


00:39:47.840 --> 00:39:49.740
"Hey, Python Bytes, you guys asked for a confirmation.


00:39:49.740 --> 00:39:52.340
"Linux Unplugged," the Linux podcast,


00:39:52.340 --> 00:39:56.080
has an interview with Tim Canham at JPL,


00:39:56.080 --> 00:39:58.700
where he talks about running various machines


00:39:58.700 --> 00:40:00.100
and mentions Python.


00:40:00.100 --> 00:40:04.160
So the thing that he talks about is,


00:40:04.160 --> 00:40:06.360
Remember when the thing was landing


00:40:06.360 --> 00:40:10.160
and there was the sky crane that like lowered perseverance


00:40:10.160 --> 00:40:11.560
and there were all these different camera views.


00:40:11.560 --> 00:40:12.960
You could see the bottom flying away.


00:40:12.960 --> 00:40:15.040
You could see it like shooting up dust and coming down.


00:40:15.040 --> 00:40:17.720
There's all these views, like these onboard cameras.


00:40:17.720 --> 00:40:19.900
Apparently all those were controlled and collected


00:40:19.900 --> 00:40:22.160
and like processed with Python on Mars.


00:40:22.160 --> 00:40:24.040
So yes, Python is on Mars.


00:40:24.040 --> 00:40:24.880
- Sweet.


00:40:24.880 --> 00:40:26.840
Nice.


00:40:26.840 --> 00:40:28.280
- Following up on your item,


00:40:28.280 --> 00:40:31.040
Sebastian Guido Van Rossum has sent out,


00:40:31.040 --> 00:40:33.420
said that signups for the Python Language Summit


00:40:33.420 --> 00:40:35.500
at PyCon online only are now open.


00:40:35.500 --> 00:40:38.460
If you represent a third party package


00:40:38.460 --> 00:40:41.260
and wanna have a say in Python's future, please sign up.


00:40:41.260 --> 00:40:45.460
So if you have a third party package


00:40:45.460 --> 00:40:46.740
and you wanna be part of this, please sign up.


00:40:46.740 --> 00:40:48.460
I'll put the link in the show notes.


00:40:48.460 --> 00:40:50.380
Oh, wait.


00:40:50.380 --> 00:40:53.980
- Does a single developer package


00:40:53.980 --> 00:40:55.900
qualify as a third party package?


00:40:55.900 --> 00:40:59.620
- Do you wanna have a say in Python's future?


00:40:59.620 --> 00:41:00.660
They might not listen to you.


00:41:00.660 --> 00:41:01.860
They're like, well, I'm gonna talk to the guys


00:41:01.860 --> 00:41:02.780
that do Flask and Django.


00:41:02.780 --> 00:41:04.180
You can go get a seat in the corner.


00:41:04.180 --> 00:41:05.020
I have no idea what that was.


00:41:05.020 --> 00:41:07.220
- I don't think people should listen to me, so.


00:41:07.220 --> 00:41:12.440
- Robert Robertson has a very nice meme.


00:41:12.440 --> 00:41:14.240
The snake has landed.


00:41:14.240 --> 00:41:15.720
Instead of the eagle, right?


00:41:15.720 --> 00:41:17.320
The snake has landed, beautiful.


00:41:17.320 --> 00:41:19.600
For the Python thing.


00:41:19.600 --> 00:41:20.840
All right, Sebastian, anything else


00:41:20.840 --> 00:41:22.060
you wanna throw out there real quick?


00:41:22.060 --> 00:41:24.840
- Yeah, I have a kind of a curiosity


00:41:24.840 --> 00:41:28.280
'cause I started using VS Code in a browser recently.


00:41:28.280 --> 00:41:30.560
I started a new project and everyone on the team


00:41:30.560 --> 00:41:32.680
is using VS Code in the browser.


00:41:32.680 --> 00:41:37.060
And it's working surprisingly well.


00:41:37.060 --> 00:41:40.060
I would never try to use a code editor in a browser,


00:41:40.060 --> 00:41:42.140
like out of myself, never,


00:41:42.140 --> 00:41:44.920
'cause I need to have everything installed locally.


00:41:44.920 --> 00:41:47.440
But now that I have to use it, I'm like super impressed.


00:41:47.440 --> 00:41:50.400
Everything works smoothly and my experience is amazing.


00:41:50.400 --> 00:41:53.040
So it made me think like,


00:41:53.040 --> 00:41:55.320
well, is this the future of programming?


00:41:55.320 --> 00:41:58.760
It's definitely nice to have everything on the same page


00:41:58.760 --> 00:42:01.440
because it's like super easy to set up the same plugins,


00:42:01.440 --> 00:42:03.060
the same configuration for the whole team.


00:42:03.060 --> 00:42:05.080
People don't have to install anything.


00:42:05.080 --> 00:42:07.600
So yeah, I'm wondering to see


00:42:07.600 --> 00:42:09.560
in which direction it will go.


00:42:09.560 --> 00:42:10.760
- Yeah, it's super interesting.


00:42:10.760 --> 00:42:12.120
I haven't done a lot of it,


00:42:12.120 --> 00:42:15.320
but it's probably using that thing where they said,


00:42:15.320 --> 00:42:17.080
well, this is an Electron app.


00:42:17.080 --> 00:42:19.500
Let's take the UI bit and just move the backend


00:42:19.500 --> 00:42:21.880
farther away and put that in a Docker container


00:42:21.880 --> 00:42:23.160
or something.


00:42:23.160 --> 00:42:24.440
I'm guessing that's how it ran, right?


00:42:24.440 --> 00:42:26.400
It wasn't pure all JavaScript.


00:42:26.400 --> 00:42:27.220
- Yeah, I think so.


00:42:27.220 --> 00:42:30.080
But I was expecting some latency and nothing like that.


00:42:30.080 --> 00:42:32.440
I mean, my only concern is that the browser


00:42:32.440 --> 00:42:34.600
is interrupting some keyboard shortcuts.


00:42:34.600 --> 00:42:37.240
So whenever I want to close a tab in the VS Code,


00:42:37.240 --> 00:42:39.040
I'm closing the browser window


00:42:39.040 --> 00:42:40.920
because that's the same combination.


00:42:40.920 --> 00:42:44.160
- That drives me crazy about the browser editors.


00:42:44.160 --> 00:42:45.320
It's like, I'm editing, I'm editing,


00:42:45.320 --> 00:42:46.600
I wanna make this tab go away.


00:42:46.600 --> 00:42:48.160
Oh, why is the whole thing gone again?


00:42:48.160 --> 00:42:49.400
Ah.


00:42:49.400 --> 00:42:50.240
- Yeah. - Yeah,


00:42:50.240 --> 00:42:51.400
there's nothing to do about that.


00:42:51.400 --> 00:42:53.720
Yeah, I know that that's really cool.


00:42:53.720 --> 00:42:55.540
And you know, it's really applicable for,


00:42:55.540 --> 00:42:57.640
like if you've got a class full of students


00:42:57.640 --> 00:42:58.600
and they have Chromebooks,


00:42:58.600 --> 00:43:00.700
and they can't install Python and VS Code


00:43:00.700 --> 00:43:02.480
on their Chromebook, but they have Chrome,


00:43:02.480 --> 00:43:04.760
they're good, they're good to go, right?


00:43:04.760 --> 00:43:07.360
Or things like that, or an iPad that doesn't allow it.


00:43:07.360 --> 00:43:10.540
So really enough possibilities there.


00:43:10.540 --> 00:43:12.080
- Exactly, we have some custom libraries


00:43:12.080 --> 00:43:13.200
and they are already available


00:43:13.200 --> 00:43:14.840
on those virtual machines with VS Code.


00:43:14.840 --> 00:43:17.080
So that's super easy to use.


00:43:17.080 --> 00:43:18.760
- Yep, absolutely.


00:43:18.760 --> 00:43:21.080
So Brian, I put together a joke for us,


00:43:21.080 --> 00:43:23.880
but we'll have to clean it up just a little bit for the air.


00:43:23.880 --> 00:43:25.960
- Okay, I'm not reading it.


00:43:25.960 --> 00:43:28.000
- I'll read it, I'll read it, I'll read it.


00:43:28.000 --> 00:43:31.880
So I'll put it up here.


00:43:31.880 --> 00:43:36.880
So it's a picture of some birds on a power line, right?


00:43:36.880 --> 00:43:40.360
And they sort of often sit together in little groups,


00:43:40.360 --> 00:43:41.200
like, I don't know why,


00:43:41.200 --> 00:43:42.440
they're just hanging out on the power line.


00:43:42.440 --> 00:43:43.680
They've got like incredible balance


00:43:43.680 --> 00:43:45.600
and they're all just sitting there.


00:43:45.600 --> 00:43:48.760
And there's one bird that's like outside of the power line.


00:43:48.760 --> 00:43:50.580
It's like where the power line stops and goes down.


00:43:50.580 --> 00:43:53.200
The bird's just sitting there floating in midair.


00:43:53.200 --> 00:43:54.800
And the other birds are looking at each other like,


00:43:54.800 --> 00:43:56.760
how is he just, his wings aren't flapping.


00:43:56.760 --> 00:43:58.400
How does he just sitting there in midair and they go,


00:43:58.400 --> 00:43:59.580
oh, he has a wifi.


00:43:59.580 --> 00:44:05.240
But then the bird comes crashing down and he goes,


00:44:05.240 --> 00:44:07.940
the falling bird screams, darn router.


00:44:07.940 --> 00:44:11.720
I love it.


00:44:11.720 --> 00:44:12.540
I thought it was good.


00:44:12.540 --> 00:44:15.540
It might not be totally safe for it, but it's good.


00:44:15.540 --> 00:44:17.640
- Yeah, there's a lot of routers that aren't properly tested


00:44:17.640 --> 00:44:20.040
with Roger Schwartz equipment.


00:44:20.040 --> 00:44:20.880
- Yeah, yeah.


00:44:20.880 --> 00:44:23.180
I mean, if you were floating suspended in midair


00:44:23.180 --> 00:44:25.000
by your wifi, then it stops.


00:44:25.000 --> 00:44:26.100
That's a little risky.


00:44:26.100 --> 00:44:33.060
That's good.


00:44:33.060 --> 00:44:36.320
Well thanks Sebastian for stopping by and doing the show with us.


00:44:36.320 --> 00:44:37.320
Thank you for having me.


00:44:37.320 --> 00:44:38.320
Quite a lot of fun.


00:44:38.320 --> 00:44:39.320
Yeah, it was fun.


00:44:39.320 --> 00:44:40.320
Thanks for coming.


00:44:40.320 --> 00:44:41.320
Thanks Brian.


00:44:41.320 --> 00:44:42.320
Thanks for being here.


00:44:42.320 --> 00:44:43.320
Yeah, thank you.


00:44:43.320 --> 00:44:44.320
Bye everyone.


00:44:44.320 --> 00:44:44.320
Thanks.


00:44:44.320 --> 00:44:45.320
Thanks.


00:44:45.320 --> 00:44:46.160
Thanks.


00:44:46.160 --> 00:44:56.160
[BLANK_AUDIO]

