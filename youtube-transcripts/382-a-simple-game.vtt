WEBVTT

00:00:00.001 --> 00:00:02.000
Hey, everyone.

00:00:02.000 --> 00:00:04.000
Hey, Brian.

00:00:04.000 --> 00:00:06.000
Good to be back.

00:00:06.000 --> 00:00:09.000
It's good to be back. I'm back in a place with somewhat controlled audio,

00:00:09.000 --> 00:00:11.000
although I'm having a bunch of tree work done,

00:00:11.000 --> 00:00:16.000
and one of those giant tree grinding machines is literally outside my window.

00:00:16.000 --> 00:00:19.000
However, I got a new microphone,

00:00:19.000 --> 00:00:21.000
and I believe it didn't even pick it up.

00:00:21.000 --> 00:00:23.000
It's ridiculous.

00:00:23.000 --> 00:00:34.000
So it has a bunch of onboard software stuff built into the mic, and it's good.

00:00:34.000 --> 00:00:36.000
So it might not even affect us.

00:00:36.000 --> 00:00:40.000
Does it have a bunch of AI in there so they can correct your grammar if you say something wrong?

00:00:40.000 --> 00:00:42.000
That would be cool.

00:00:44.000 --> 00:00:51.000
No, but it has noise gates and noise reduction and high-pass filters and stuff like that.

00:00:51.000 --> 00:00:56.000
Okay, with that, let's go ahead and kick this off.

00:00:56.000 --> 00:00:59.000
Hello, and welcome to Python Bytes,

00:00:59.000 --> 00:01:02.000
where we deliver Python news and headlines directly to your earbuds.

00:01:02.000 --> 00:01:09.000
This is episode 382, recorded May 7, 2024.

00:01:09.000 --> 00:01:12.000
I don't know if you caught it last time, but I was a year behind last year.

00:01:12.000 --> 00:01:17.000
I said 2023 last time I was doing the show intro.

00:01:17.000 --> 00:01:22.000
But no, it is in fact 2024, despite what I believe about time.

00:01:22.000 --> 00:01:24.000
It seems like it's going too fast.

00:01:24.000 --> 00:01:26.000
Nonetheless, May 7, 2024.

00:01:26.000 --> 00:01:28.000
I'm Michael Kennedy.

00:01:28.000 --> 00:01:30.000
And I'm Brian Okken.

00:01:30.000 --> 00:01:34.000
And this show is brought to you by Scout APM.

00:01:34.000 --> 00:01:36.000
Check them out during their segment.

00:01:36.000 --> 00:01:38.000
It really helps support the show.

00:01:38.000 --> 00:01:40.000
Connect with us on Mastodon.

00:01:40.000 --> 00:01:42.000
All three of us are over there.

00:01:42.000 --> 00:01:44.000
Links are at the top of the show notes.

00:01:44.000 --> 00:01:49.000
Pythonbytes.fm/live, usually Tuesdays at 10 a.m. Pacific time.

00:01:49.000 --> 00:01:52.000
And finally, Brian, I know we sometimes talk about our newsletter,

00:01:52.000 --> 00:01:55.000
but people are subscribing, and they're getting a lot of value out of it.

00:01:55.000 --> 00:01:59.000
So if you want an artisanal handcrafted digest of all the stuff we talked about

00:01:59.000 --> 00:02:02.000
in the show, deliver an email form so it's permanent right there.

00:02:02.000 --> 00:02:04.000
You can forward it, share it.

00:02:04.000 --> 00:02:10.000
All you got to do is head over to Pythonbytes.fm,

00:02:10.000 --> 00:02:13.000
click the newsletter link right in the center of the screen,

00:02:13.000 --> 00:02:15.000
and bring it to the friends of the show.

00:02:15.000 --> 00:02:17.000
Keep your email private. We don't share it.

00:02:17.000 --> 00:02:19.000
We don't do anything weird with it.

00:02:19.000 --> 00:02:21.000
We just want to be able to send you stuff about the show.

00:02:21.000 --> 00:02:24.000
So people are really getting a lot out of this, Brian.

00:02:24.000 --> 00:02:27.000
I checked last week the email that you sent.

00:02:27.000 --> 00:02:29.000
Normal.

00:02:29.000 --> 00:02:33.000
If you're doing good, if you're lucky, if people really want to hear from you,

00:02:33.000 --> 00:02:37.000
there's a chance that about 20% of people will open emails that you send

00:02:37.000 --> 00:02:39.000
in a newsletter form to them.

00:02:39.000 --> 00:02:42.000
The one you sent was like 95% opened.

00:02:42.000 --> 00:02:44.000
That's awesome.

00:02:44.000 --> 00:02:45.000
That is so awesome.

00:02:45.000 --> 00:02:48.000
Thank you, everyone, for actually caring and subscribing.

00:02:48.000 --> 00:02:52.000
So Pythonbytes.fm, click on "Newsletter" and sign up for it.

00:02:52.000 --> 00:02:54.000
That would be great.

00:02:54.000 --> 00:02:58.000
One of the things I wanted to bring up is now there's two ways.

00:02:58.000 --> 00:03:01.000
If there's something that you heard on the show but you can't remember

00:03:01.000 --> 00:03:05.000
what it was, you can search your inbox if you save it,

00:03:05.000 --> 00:03:08.000
save our old emails from us.

00:03:08.000 --> 00:03:14.000
We haven't talked about it a lot, but the search box on Pythonbytes.fm

00:03:14.000 --> 00:03:15.000
is excellent.

00:03:15.000 --> 00:03:19.000
It searches both the show notes and the transcript.

00:03:19.000 --> 00:03:22.000
So even if it wasn't listed but it was said,

00:03:22.000 --> 00:03:25.000
it might find the right episode for you.

00:03:25.000 --> 00:03:26.000
Yeah, absolutely.

00:03:26.000 --> 00:03:30.000
I actually use that to decide, "Oh, have we talked about this thing before?

00:03:30.000 --> 00:03:33.000
Three years and I already forgot about it or should I cover it?"

00:03:33.000 --> 00:03:34.000
Yeah, exactly.

00:03:34.000 --> 00:03:35.000
Amazing.

00:03:35.000 --> 00:03:37.000
Amazing, amazing.

00:03:37.000 --> 00:03:39.000
All right, so we jump in to the first topic?

00:03:39.000 --> 00:03:40.000
Let's do it.

00:03:40.000 --> 00:03:47.000
Well, I want to act on that information with a product called ACT.

00:03:47.000 --> 00:03:49.000
And it's from Necto.

00:03:49.000 --> 00:03:52.000
Necto's ACT--I think it's the person's name,

00:03:52.000 --> 00:03:55.000
maybe their name is Necto and it's their ACT.

00:03:55.000 --> 00:04:00.000
N-E-C-T-O-S-A-C-T, but it's in the show notes or in the email that you'll get

00:04:00.000 --> 00:04:01.000
if you sign up.

00:04:01.000 --> 00:04:04.000
Anyway, what it does, it's super cool.

00:04:04.000 --> 00:04:08.000
It runs--what it's doing is it's running GitHub Actions locally.

00:04:08.000 --> 00:04:12.000
So you can set up this.

00:04:12.000 --> 00:04:15.000
What you have to do is you have to install it,

00:04:15.000 --> 00:04:18.000
and it's got great installation instructions.

00:04:18.000 --> 00:04:22.000
I used Homebrew, but it's got installation instructions for Chocolaty

00:04:22.000 --> 00:04:26.000
or even GitHub CLI.

00:04:26.000 --> 00:04:29.000
I could have used that or MacBooks or Scoop.

00:04:29.000 --> 00:04:31.000
I don't know what Wingit is.

00:04:31.000 --> 00:04:34.000
Anyway, getting--

00:04:34.000 --> 00:04:39.000
You know how, for example, on Booty we have apt-get,

00:04:39.000 --> 00:04:40.000
on Debian systems sort of thing?

00:04:40.000 --> 00:04:41.000
Yeah.

00:04:41.000 --> 00:04:45.000
So that is the--for a long time, Chocolaty was the package manager.

00:04:45.000 --> 00:04:49.000
It was kind of like Homebrew, sort of external for Windows,

00:04:49.000 --> 00:04:53.000
and Wingit is like the official Microsoft package manager for Windows.

00:04:53.000 --> 00:04:54.000
Oh, okay.

00:04:54.000 --> 00:04:55.000
It's kind of a new thing.

00:04:55.000 --> 00:04:58.000
I don't use it very much because I don't use Windows enough

00:04:58.000 --> 00:05:01.000
that I care about that stuff, but, yeah, that's what it is.

00:05:01.000 --> 00:05:02.000
Cool.

00:05:02.000 --> 00:05:08.000
Well, so this project, really what it does is you can run your workflows locally,

00:05:08.000 --> 00:05:12.000
but you have to install it and you have to set up Docker locally

00:05:12.000 --> 00:05:16.000
because it uses Docker, which actually I kind of love anyway.

00:05:16.000 --> 00:05:19.000
So what it's doing is it's running your actions.

00:05:19.000 --> 00:05:23.000
It loads up a Docker image and runs your actions.

00:05:23.000 --> 00:05:26.000
But the control over it is really pretty cool.

00:05:26.000 --> 00:05:32.000
So I should have looked this up, but there's different runners.

00:05:32.000 --> 00:05:37.000
But the way you run it is there's a bunch of different commands that you can run.

00:05:37.000 --> 00:05:42.000
So you can run your pull requests or you can run a specific job.

00:05:42.000 --> 00:05:46.000
There's a whole bunch of different parameters for this

00:05:46.000 --> 00:05:49.000
to be able to run different pieces.

00:05:49.000 --> 00:05:55.000
I used it just to run--I wanted to just check my test run locally

00:05:55.000 --> 00:05:59.000
and because I wanted to play with the different test jobs and coverage,

00:05:59.000 --> 00:06:02.000
I'd be able to run those individually.

00:06:02.000 --> 00:06:06.000
And it really was slick, and it's super fast, really easy to use.

00:06:06.000 --> 00:06:09.000
It's really pretty cool.

00:06:09.000 --> 00:06:12.000
It's also open source, so nice.

00:06:12.000 --> 00:06:16.000
We're going to link to the GitHub repo as well so you can check it out.

00:06:16.000 --> 00:06:19.000
And apparently I'm not the only one that loves it.

00:06:19.000 --> 00:06:22.000
It's got 1.3 thousand stars.

00:06:22.000 --> 00:06:23.000
That's Forks, 50,000 stars.

00:06:23.000 --> 00:06:27.000
Oh, that's Forks. There's 50,000 stars. Nice.

00:06:27.000 --> 00:06:30.000
It's awesome. This is so awesome.

00:06:30.000 --> 00:06:34.000
If you do a lot of GitHub Actions, this is so cool.

00:06:34.000 --> 00:06:38.000
One, you can test it and run it faster and iterate really quickly

00:06:38.000 --> 00:06:40.000
until you get it dialed in, right?

00:06:40.000 --> 00:06:41.000
Yeah.

00:06:41.000 --> 00:06:44.000
Then the other thing, Brian, that might be interesting,

00:06:44.000 --> 00:06:49.000
I'm kind of inspired a lot by what the 37signals people are doing

00:06:49.000 --> 00:06:51.000
around deployment and stuff.

00:06:51.000 --> 00:06:56.000
What they did recently is they moved their continuous integration

00:06:56.000 --> 00:07:01.000
to developer machines.

00:07:01.000 --> 00:07:04.000
So instead of having one server where all the builds

00:07:04.000 --> 00:07:07.000
just queue up behind each other,

00:07:07.000 --> 00:07:10.000
everybody has a super high-end computer

00:07:10.000 --> 00:07:14.000
that's oftentimes faster than the CI servers anyway.

00:07:14.000 --> 00:07:18.000
So running it there is like a pre-commit hook sort of thing.

00:07:18.000 --> 00:07:22.000
Or some sort of push, some kind of event locally.

00:07:22.000 --> 00:07:25.000
This could let you go down that workflow as well.

00:07:25.000 --> 00:07:28.000
If you're like, "We just want to distribute the compute

00:07:28.000 --> 00:07:31.000
so we can make our actions run a lot faster,"

00:07:31.000 --> 00:07:34.000
at least a good chunk of them. It's very neat.

00:07:34.000 --> 00:07:39.000
One of their ideas for this also is to use it as a local task runner

00:07:39.000 --> 00:07:44.000
instead of make or things like that, which is interesting.

00:07:44.000 --> 00:07:47.000
You could have workflows that aren't reachable from CI

00:07:47.000 --> 00:07:51.000
that you can just run locally through if you're already using it.

00:07:51.000 --> 00:07:54.000
That's really awesome. This is great. I love it.

00:07:54.000 --> 00:07:57.000
All right.

00:07:57.000 --> 00:08:00.000
Since you brought up Docker, let's keep going.

00:08:00.000 --> 00:08:03.000
Let's keep going.

00:08:03.000 --> 00:08:06.000
I'll get there in a second.

00:08:06.000 --> 00:08:09.000
I'm sure you're familiar with ngrok.

00:08:09.000 --> 00:08:12.000
We've talked about how ngrok is awesome before.

00:08:12.000 --> 00:08:15.000
It solves a super interesting problem.

00:08:15.000 --> 00:08:18.000
I'm a big fan of it. I'm a pain user of it.

00:08:18.000 --> 00:08:21.000
We'll see if I continue to be, honestly, after I read this out.

00:08:21.000 --> 00:08:24.000
However, I'm a big fan of it.

00:08:24.000 --> 00:08:29.000
There's all these situations where you need to easily get access.

00:08:29.000 --> 00:08:33.000
Something on your machine, in terms of an API or a website,

00:08:33.000 --> 00:08:36.000
needs access to the internet just for testing

00:08:36.000 --> 00:08:39.000
or just for a demonstration purpose.

00:08:39.000 --> 00:08:42.000
How often are you in a Zoom meeting and somebody's like,

00:08:42.000 --> 00:08:45.000
"Hey, I want to show you this new design and this new user interaction.

00:08:45.000 --> 00:08:48.000
So let me share my screen."

00:08:48.000 --> 00:08:51.000
And then they're on a huge monitor and it's blurry.

00:08:51.000 --> 00:08:54.000
And you're like, "I think I like it. I don't know."

00:08:54.000 --> 00:08:57.000
But with ngrok, you just say, "Here, everybody connect to my little local dev app

00:08:57.000 --> 00:09:00.000
and click on this and see how you think it feels."

00:09:00.000 --> 00:09:03.000
Or you want to debug a webhook,

00:09:03.000 --> 00:09:06.000
which has to come from the internet to somewhere public.

00:09:06.000 --> 00:09:09.000
So you can just fire up an ngrok endpoint or use SSH

00:09:09.000 --> 00:09:12.000
or what would be regular web requests into your machine

00:09:12.000 --> 00:09:15.000
that turn back into web requests, hit Flask or FastAPI or whatever it is.

00:09:15.000 --> 00:09:21.000
I did it for webhooks a bunch recently and also for mobile apps.

00:09:21.000 --> 00:09:25.000
When Lauren and I were building out the mobile apps,

00:09:25.000 --> 00:09:28.000
they had to talk to and just do some callbacks and other things.

00:09:28.000 --> 00:09:31.000
And we were testing out the API.

00:09:31.000 --> 00:09:34.000
And we were like, "Here, we'll fire up an ngrok."

00:09:34.000 --> 00:09:37.000
And he'd be on his phone running the app,

00:09:37.000 --> 00:09:40.000
debugging it, and it would be coming through the API,

00:09:40.000 --> 00:09:43.000
hitting breakpoints in PyCharm. Awesome, right?

00:09:43.000 --> 00:09:48.000
But it's more of an individual type of tool

00:09:48.000 --> 00:09:51.000
and also closed source and paid.

00:09:51.000 --> 00:09:54.000
Not that those are terrible, but that's what they are.

00:09:54.000 --> 00:09:58.000
So I want to tell you about Porter, like P-O-T-R,

00:09:58.000 --> 00:10:02.000
which is an open source ngrok alternative.

00:10:02.000 --> 00:10:06.000
So the idea is exactly the same

00:10:06.000 --> 00:10:09.000
that I just described. However, the way it works...

00:10:09.000 --> 00:10:12.000
Don't watch the video, it's not very bad.

00:10:12.000 --> 00:10:15.000
Go to the docs instead.

00:10:15.000 --> 00:10:20.000
Similar though to ACT, it has not as many, but 2,000 stars.

00:10:20.000 --> 00:10:23.000
How old is it? Six months old?

00:10:23.000 --> 00:10:26.000
For a six-month-old project, that's pretty good.

00:10:26.000 --> 00:10:29.000
Basically, to set it up on the server,

00:10:29.000 --> 00:10:32.000
it says a virtual machine.

00:10:32.000 --> 00:10:35.000
You need a machine.

00:10:35.000 --> 00:10:38.000
It could be a VM on the internet, it could be a VM locally,

00:10:38.000 --> 00:10:41.000
it could be a real machine sitting

00:10:41.000 --> 00:10:44.000
on a beat-up laptop in the corner with a public IP.

00:10:44.000 --> 00:10:47.000
Who knows? Whatever.

00:10:47.000 --> 00:10:50.000
You need some kind of pretty lightweight machine,

00:10:50.000 --> 00:10:53.000
$10, $5 DigitalOcean server.

00:10:53.000 --> 00:10:56.000
You've got to set up a Cloudflare token for wildcard

00:10:56.000 --> 00:10:59.000
because it manages subdomains automatically

00:10:59.000 --> 00:11:02.000
and GitHub credentials to log in.

00:11:02.000 --> 00:11:07.000
The idea is that it's built for teams as well.

00:11:07.000 --> 00:11:10.000
Teams can manage different ways to call back into things

00:11:10.000 --> 00:11:13.000
and connect things and so on.

00:11:13.000 --> 00:11:16.000
It's got a whole team dashboard.

00:11:16.000 --> 00:11:19.000
People can set up the teams and whatnot.

00:11:19.000 --> 00:11:22.000
Basically, you just set this up and you run a Docker container

00:11:22.000 --> 00:11:25.000
on a simple machine and then all of a sudden,

00:11:25.000 --> 00:11:28.000
you've got your very own ngrok,

00:11:28.000 --> 00:11:31.000
where data also is not going through ngrok,

00:11:31.000 --> 00:11:36.000
because it's HTTPS over to SSL and then back.

00:11:36.000 --> 00:11:39.000
Okay.

00:11:39.000 --> 00:11:47.000
Does ngrok set up a Docker? Does it go through Dockers also?

00:11:47.000 --> 00:11:51.000
No. They run the server side for you.

00:11:51.000 --> 00:11:54.000
Okay.

00:11:54.000 --> 00:11:57.000
They completely manage the server side for you.

00:11:57.000 --> 00:12:00.000
You just use a CLI that talks to that thing

00:12:00.000 --> 00:12:03.000
and sets up a connection, an SSH connection back to you.

00:12:03.000 --> 00:12:06.000
Okay.

00:12:06.000 --> 00:12:09.000
When I'm debugging it, if I set a breakpoint or something,

00:12:09.000 --> 00:12:12.000
do I need to set that in the Docker image?

00:12:12.000 --> 00:12:15.000
No, the Docker image is just a pass-through.

00:12:15.000 --> 00:12:18.000
Okay. Got it.

00:12:18.000 --> 00:12:21.000
It really does work just like ngrok.

00:12:21.000 --> 00:12:24.000
Yeah, it's super similar.

00:12:24.000 --> 00:12:27.000
I haven't used it yet, but I'm looking to start trying this out.

00:12:27.000 --> 00:12:30.000
It's pretty straightforward.

00:12:30.000 --> 00:12:33.000
Instead of saying Docker HTTP something,

00:12:33.000 --> 00:12:36.000
you say Porter HTTP something, and off you go.

00:12:36.000 --> 00:12:39.000
Nice.

00:12:39.000 --> 00:12:42.000
Pretty cool.

00:12:42.000 --> 00:12:45.000
It sure is. You know what else is neat, Brian?

00:12:45.000 --> 00:12:48.000
I think Scout is neat.

00:12:48.000 --> 00:12:51.000
Scout APM is pretty awesome.

00:12:51.000 --> 00:12:54.000
Let me tell you real quick about Scout APM.

00:12:54.000 --> 00:12:57.000
They're big supporters of Python Bytes,

00:12:57.000 --> 00:13:00.000
so we appreciate that very much.

00:13:00.000 --> 00:13:03.000
If you are tired of spending hours

00:13:03.000 --> 00:13:06.000
trying to find the root cause of issues impacting your performance,

00:13:06.000 --> 00:13:09.000
then you owe it to yourself to check out Scout APM.

00:13:09.000 --> 00:13:12.000
They're a leading Python application performance monitoring tool,

00:13:12.000 --> 00:13:15.000
APM,

00:13:15.000 --> 00:13:18.000
that helps you identify and solve performance abnormalities

00:13:18.000 --> 00:13:21.000
faster and easier.

00:13:21.000 --> 00:13:24.000
It also has a lot of great features,

00:13:24.000 --> 00:13:27.000
such as memory leaks, slow database queries,

00:13:27.000 --> 00:13:30.000
background jobs, and the dreaded N+1 queries

00:13:30.000 --> 00:13:33.000
that you can end up if you do lazy loading in your ORM,

00:13:33.000 --> 00:13:36.000
and then you say, "Oh, no. Why is it so slow?

00:13:36.000 --> 00:13:39.000
Why are you doing 200 database queries for what should be one?"

00:13:39.000 --> 00:13:42.000
You can find out things like that.

00:13:42.000 --> 00:13:45.000
It links it back directly to source code,

00:13:45.000 --> 00:13:48.000
so you can spend less time in the debugger and tailing logs

00:13:48.000 --> 00:13:51.000
from developers by developers. It makes it easy to get set up.

00:13:51.000 --> 00:13:54.000
Seriously, you can do it in less than four minutes, so that's awesome.

00:13:54.000 --> 00:13:57.000
The best part is the pricing is straightforward.

00:13:57.000 --> 00:14:00.000
You only pay for the data that you use with no

00:14:00.000 --> 00:14:03.000
hidden overage fees or per-seat pricing.

00:14:03.000 --> 00:14:06.000
I just learned this, Brian.

00:14:06.000 --> 00:14:09.000
They provide the pro version for free

00:14:09.000 --> 00:14:12.000
to all open-source projects.

00:14:12.000 --> 00:14:15.000
If you're an open-source maintainer and you want to have Scout APM

00:14:15.000 --> 00:14:18.000
and you want to get a discount,

00:14:18.000 --> 00:14:21.000
just shoot them a message or something on their pricing page about that.

00:14:21.000 --> 00:14:24.000
You can start your free trial and get instant insights today.

00:14:24.000 --> 00:14:27.000
Visit pythonbytes.fm/scout.

00:14:27.000 --> 00:14:30.000
The link is in your podcast player show notes as well.

00:14:30.000 --> 00:14:33.000
Please use that link. Don't just search for them

00:14:33.000 --> 00:14:36.000
because otherwise they don't think you came from us,

00:14:36.000 --> 00:14:39.000
and then they'd stop supporting the show.

00:14:39.000 --> 00:14:42.000
Please use our link, pythonbytes.fm/scout.

00:14:42.000 --> 00:14:45.000
Indeed, indeed.

00:14:45.000 --> 00:14:48.000
What's next, Brian?

00:14:48.000 --> 00:14:51.000
I've got a little bit of type annotation.

00:14:54.000 --> 00:14:57.000
There we go.

00:14:57.000 --> 00:15:00.000
Are you trying to get out of here?

00:15:00.000 --> 00:15:03.000
[laughter]

00:15:03.000 --> 00:15:06.000
We've talked about type annotation a lot,

00:15:06.000 --> 00:15:09.000
and I ran across this blog post called "Annotating

00:15:09.000 --> 00:15:12.000
Keyword Args in Python," and actually,

00:15:12.000 --> 00:15:15.000
I never tried that. I've mostly just,

00:15:15.000 --> 00:15:18.000
if I have *args or *kwargs,

00:15:18.000 --> 00:15:21.000
I just sort of leave it as is.

00:15:21.000 --> 00:15:24.000
I haven't tried type annotating those.

00:15:24.000 --> 00:15:27.000
I was intrigued as to how I would do that

00:15:27.000 --> 00:15:30.000
if I wanted to do that, and there's an

00:15:30.000 --> 00:15:33.000
article about it from

00:15:33.000 --> 00:15:36.000
Redwan.

00:15:36.000 --> 00:15:39.000
I think. What's his first name? Anyway,

00:15:39.000 --> 00:15:42.000
Redwan Delawar. Cool name.

00:15:42.000 --> 00:15:45.000
There's some problems

00:15:45.000 --> 00:15:48.000
with all the ways he tried that seemed obvious,

00:15:48.000 --> 00:15:51.000
like passing in a dictionary

00:15:51.000 --> 00:15:54.000
that he expected. Apparently, mypy

00:15:54.000 --> 00:15:57.000
doesn't like that, or doing

00:15:57.000 --> 00:16:00.000
a dict, sort of describing the

00:16:00.000 --> 00:16:03.000
tuple or a dictionary that are coming in.

00:16:03.000 --> 00:16:06.000
There were issues with those, but I'm just going to

00:16:06.000 --> 00:16:09.000
hop to the end result. Apparently,

00:16:09.000 --> 00:16:12.000
using information from PEP-589, 646,

00:16:12.000 --> 00:16:15.000
655, and 692,

00:16:15.000 --> 00:16:18.000
there are features like unpack and

00:16:18.000 --> 00:16:21.000
type dict along with typing that we're used to

00:16:21.000 --> 00:16:24.000
that are part of the typing module,

00:16:24.000 --> 00:16:27.000
and the result is kind of

00:16:27.000 --> 00:16:30.000
cool. I mean, it's not terrible. There's a couple, there's a

00:16:30.000 --> 00:16:33.000
pre 312 and a after 312 version.

00:16:33.000 --> 00:16:36.000
I'm glad that he listed both, but you set up

00:16:36.000 --> 00:16:39.000
a class

00:16:39.000 --> 00:16:42.000
for your keyword args and describe what the types

00:16:42.000 --> 00:16:45.000
are there in your keyword under type dict.

00:16:45.000 --> 00:16:48.000
And then for the

00:16:48.000 --> 00:16:51.000
star args, it's an unpack. You say an

00:16:51.000 --> 00:16:54.000
unpack of a tuple and then the types of the tuple. So you can

00:16:54.000 --> 00:16:57.000
do good typing as to the types

00:16:57.000 --> 00:17:00.000
of things that you want to come into star

00:17:00.000 --> 00:17:03.000
args or keyword args, which is kind of neat

00:17:03.000 --> 00:17:06.000
to make sure that you think of

00:17:06.000 --> 00:17:09.000
star args or keyword args as just anything can come in.

00:17:09.000 --> 00:17:12.000
But if you really don't want just anything to come in,

00:17:12.000 --> 00:17:15.000
this would be great. So I like this.

00:17:15.000 --> 00:17:18.000
Yeah, it's cool. It's a totally reasonable thing to think.

00:17:18.000 --> 00:17:21.000
I want to pass one number or two

00:17:21.000 --> 00:17:24.000
numbers or 100 numbers, but whatever it is, I want to

00:17:24.000 --> 00:17:27.000
pass one number. So I'm going to pass one number.

00:17:27.000 --> 00:17:30.000
Yeah. Or in this example, it's either

00:17:30.000 --> 00:17:33.000
integers or strings that I'm going to get in or

00:17:33.000 --> 00:17:36.000
ints or bools.

00:17:36.000 --> 00:17:39.000
I would have never come up with this. To create a class derived

00:17:39.000 --> 00:17:42.000
from type dict with multiple values to then wrap that

00:17:42.000 --> 00:17:45.000
as an unpacked of, okay, I'm awesome.

00:17:45.000 --> 00:17:48.000
They have it. But this is

00:17:48.000 --> 00:17:51.000
amazing. Yeah. Seems like there could be an easier way.

00:17:51.000 --> 00:17:54.000
Anyway, so this is pretty cool. And he's got

00:17:54.000 --> 00:17:57.000
some great writing. One of the other articles that I

00:17:57.000 --> 00:18:00.000
started down this rabbit hole was a more

00:18:00.000 --> 00:18:03.000
recent article from April 27th called typals

00:18:03.000 --> 00:18:06.000
does what I thought type guard would do in

00:18:06.000 --> 00:18:09.000
Python. And I don't use either type guard or

00:18:09.000 --> 00:18:12.000
typals. So I'm not sure what these are. But if you are a type

00:18:12.000 --> 00:18:15.000
guard person, maybe you want to check this out.

00:18:15.000 --> 00:18:18.000
Yeah. All right. That also looks cool.

00:18:18.000 --> 00:18:21.000
Well done. Well done. All right. I have

00:18:21.000 --> 00:18:24.000
one more item for us here.

00:18:24.000 --> 00:18:27.000
And it's pretty awesome, Brian.

00:18:27.000 --> 00:18:30.000
It's pretty awesome. Awesome.

00:18:30.000 --> 00:18:33.000
Ever since the guy behind JustPath

00:18:33.000 --> 00:18:36.000
got thinking about, hey, people

00:18:36.000 --> 00:18:39.000
should use the featured on Python bytes

00:18:39.000 --> 00:18:42.000
episode number badge. I'm like, oh, there's

00:18:42.000 --> 00:18:45.000
probably more of these badges than I give them credit. I mean, I know

00:18:45.000 --> 00:18:48.000
I've seen plenty of badges, but there's a lot of badges.

00:18:48.000 --> 00:18:51.000
So this is a GitHub repo with a thousand stars

00:18:51.000 --> 00:18:54.000
that is a curated list of GitHub badges for your project.

00:18:54.000 --> 00:18:57.000
And let me tell you, what are you

00:18:57.000 --> 00:19:00.000
interested in, Brian? You want to talk about contacts? You want to talk

00:19:00.000 --> 00:19:03.000
about groups, socials, operating systems?

00:19:03.000 --> 00:19:06.000
Where are you streaming? What kind of tests?

00:19:06.000 --> 00:19:09.000
What kind of food do you want? For example.

00:19:09.000 --> 00:19:12.000
Well, that's under the tests category.

00:19:12.000 --> 00:19:15.000
I don't think that's the level.

00:19:15.000 --> 00:19:18.000
I think the test got unindented for some reason.

00:19:18.000 --> 00:19:21.000
What kind of terminal do you rock and so on?

00:19:21.000 --> 00:19:24.000
So I'll just pick a couple, just to give

00:19:24.000 --> 00:19:27.000
people a sense, because I don't want to read a list of

00:19:27.000 --> 00:19:30.000
a bunch of it. Like, for example, you see the scroll bar, Brian?

00:19:30.000 --> 00:19:33.000
I mean, this is a lot.

00:19:33.000 --> 00:19:36.000
So under contact, you've obviously got email, but

00:19:36.000 --> 00:19:39.000
if you want to be specific, say, hit me in my Gmail

00:19:39.000 --> 00:19:42.000
or hit me up on my ProtonMail, you can

00:19:42.000 --> 00:19:45.000
actually have those as badges. You can have Signal, Telegram,

00:19:45.000 --> 00:19:48.000
Tutanota,

00:19:48.000 --> 00:19:51.000
how do we say that?

00:19:51.000 --> 00:19:54.000
WhatsApp, WeChat, all those things are pretty cool.

00:19:54.000 --> 00:19:57.000
For groups, you have Slack, Discord, Zoom.

00:19:57.000 --> 00:20:00.000
Apparently, I think Zoom is getting into trying to be more

00:20:00.000 --> 00:20:03.000
Slack-like, even though I never use it for that. Reddit and so on.

00:20:03.000 --> 00:20:06.000
Under social, that would be

00:20:06.000 --> 00:20:09.000
Bitbuckets?

00:20:09.000 --> 00:20:12.000
Social coding, I guess.

00:20:12.000 --> 00:20:15.000
I don't know.

00:20:15.000 --> 00:20:18.000
But GitLab, Instagram, Pinterest, Quora, Reddit, etc.

00:20:18.000 --> 00:20:21.000
And then you've got some for

00:20:21.000 --> 00:20:24.000
the OS, right? Not just really standard ones, but

00:20:24.000 --> 00:20:27.000
like SintOS or Deepin or

00:20:27.000 --> 00:20:30.000
whatever. But also, there are little icons that go with them.

00:20:30.000 --> 00:20:33.000
Like, the red hat is red, but it also has the hat.

00:20:33.000 --> 00:20:36.000
There's the red hat one.

00:20:36.000 --> 00:20:39.000
I'll just go down a little bit and find some more of the uncommon ones

00:20:39.000 --> 00:20:42.000
down here.

00:20:42.000 --> 00:20:45.000
ETL, that sounds boring.

00:20:45.000 --> 00:20:48.000
Like mobile frameworks,

00:20:48.000 --> 00:20:51.000
so they've got Flutter, for example.

00:20:51.000 --> 00:20:54.000
The app I was just talking about earlier, the talk Python is built on Flutter.

00:20:54.000 --> 00:20:57.000
We could have that, or Ionic, or Cordova, or

00:20:57.000 --> 00:21:00.000
Xamarin, whatever you want. Isn't that cool?

00:21:00.000 --> 00:21:03.000
Yeah, that's pretty fun.

00:21:03.000 --> 00:21:06.000
What security platform is it using? Is it like, "This is verified by Snyk."

00:21:06.000 --> 00:21:09.000
And so on.

00:21:09.000 --> 00:21:12.000
Anyway, so if you're thinking about your next project or your GitHub profile or whatever,

00:21:12.000 --> 00:21:15.000
I present to you many, many GitHub badges for the taking.

00:21:15.000 --> 00:21:18.000
Yeah, let's see if I can get like

00:21:18.000 --> 00:21:21.000
four rows of badges onto a project. That'd be fun.

00:21:21.000 --> 00:21:24.000
Exactly.

00:21:24.000 --> 00:21:27.000
Well, any other extras?

00:21:27.000 --> 00:21:30.000
Wait, that wasn't your extra.

00:21:30.000 --> 00:21:33.000
That's not an extra, but I do have extras.

00:21:33.000 --> 00:21:36.000
I'll go ahead and go through them since I've already got my stuff on the screen for us.

00:21:36.000 --> 00:21:39.000
So this one comes from the Django

00:21:39.000 --> 00:21:42.000
not folks.

00:21:42.000 --> 00:21:45.000
So the Django not program is a program to help

00:21:45.000 --> 00:21:48.000
people who are interested in Django become core contributors,

00:21:48.000 --> 00:21:51.000
not just users of, but contributors to

00:21:51.000 --> 00:21:54.000
the Django code base.

00:21:54.000 --> 00:21:57.000
So it's kind of like a mentorship program around that, which is excellent.

00:21:57.000 --> 00:22:00.000
And you must act soon.

00:22:00.000 --> 00:22:03.000
You have six days to apply.

00:22:03.000 --> 00:22:06.000
So the session two application is open.

00:22:06.000 --> 00:22:09.000
I actually interviewed

00:22:09.000 --> 00:22:12.000
Sarah

00:22:12.000 --> 00:22:15.000
Boyce and Tushar Gupta

00:22:15.000 --> 00:22:18.000
about their experiences running and coordinating

00:22:18.000 --> 00:22:21.000
the first one back on Talk Python.

00:22:21.000 --> 00:22:24.000
March.

00:22:24.000 --> 00:22:27.000
Yeah, March this year.

00:22:27.000 --> 00:22:30.000
So if you want to hear more about it and you think maybe I want to apply to it,

00:22:30.000 --> 00:22:33.000
well, you've got six days to do so, to be part of it.

00:22:33.000 --> 00:22:36.000
It doesn't cost anything, but there is an application process,

00:22:36.000 --> 00:22:39.000
which is cool.

00:22:39.000 --> 00:22:42.000
That was fun. And then I was on

00:22:42.000 --> 00:22:45.000
Django Chat, the Django Chat podcast

00:22:45.000 --> 00:22:48.000
with Will and Carlton.

00:22:48.000 --> 00:22:51.000
Yeah, I do too.

00:22:51.000 --> 00:22:54.000
Those guys are both great.

00:22:54.000 --> 00:22:57.000
We talked all about this whole new deployment style

00:22:57.000 --> 00:23:00.000
and self-hosted open source and all these different things

00:23:00.000 --> 00:23:03.000
that I've been sort of talking on and off

00:23:03.000 --> 00:23:06.000
about the show here.

00:23:06.000 --> 00:23:09.000
But we spent a good chunk of the show just talking about

00:23:09.000 --> 00:23:12.000
how am I running things for Talk Python and for Python Bytes

00:23:12.000 --> 00:23:15.000
and for a bunch of other stuff.

00:23:15.000 --> 00:23:18.000
And it's just really fun.

00:23:18.000 --> 00:23:21.000
So people can check that out.

00:23:21.000 --> 00:23:24.000
Extras for you?

00:23:24.000 --> 00:23:27.000
Yeah, I'm going to start off with some bad news and then some good news.

00:23:27.000 --> 00:23:30.000
I came across this from Bleeping Computer, but I saw it on a whole bunch of websites.

00:23:30.000 --> 00:23:33.000
Fake job interviews

00:23:33.000 --> 00:23:36.000
targets developers with new Python

00:23:36.000 --> 00:23:39.000
backdoor. And it's just awful.

00:23:39.000 --> 00:23:42.000
It's nefarious and evil.

00:23:42.000 --> 00:23:45.000
And the idea of a lot of viruses

00:23:45.000 --> 00:23:48.000
is to try to get people to run code,

00:23:48.000 --> 00:23:51.000
sneak in stuff to run code.

00:23:51.000 --> 00:23:54.000
They're just going straight to developers and saying,

00:23:54.000 --> 00:23:57.000
"Hey, as part of the interview process, we'd like you to

00:23:57.000 --> 00:24:00.000
download this repo and run the code in there."

00:24:00.000 --> 00:24:03.000
And then I don't know what they're telling them to do after that,

00:24:03.000 --> 00:24:06.000
but it's too late at that point. At that point, they've just run the virus.

00:24:06.000 --> 00:24:09.000
So that's just awful.

00:24:09.000 --> 00:24:12.000
Anyway, be careful if you're doing a job interview

00:24:12.000 --> 00:24:15.000
and they say, "Hey, go run some code."

00:24:15.000 --> 00:24:18.000
Maybe don't or look into it a little bit more.

00:24:18.000 --> 00:24:21.000
It's so bad, though, because it could just be, "Well, all you've got to do

00:24:21.000 --> 00:24:24.000
is pip install the requirements and take this project and then add this little feature

00:24:24.000 --> 00:24:27.000
and show us how you did it." That already runs arbitrary code from the internet.

00:24:27.000 --> 00:24:30.000
Yeah. Oh, yeah, it could. Just awful.

00:24:30.000 --> 00:24:33.000
That wouldn't...

00:24:33.000 --> 00:24:36.000
Yikes. Anyway, okay, so that's bad news.

00:24:36.000 --> 00:24:41.000
Good news. Good news is this is the week that I'm going to switch the course.

00:24:41.000 --> 00:24:44.000
The pytest course is a complete pytest course.

00:24:44.000 --> 00:24:49.000
It's going from teachable to a new platform, Podium.

00:24:49.000 --> 00:24:52.000
And it's just the reasoning is...

00:24:52.000 --> 00:24:55.000
You don't want to hear the reasoning, but mostly it's the future

00:24:55.000 --> 00:25:00.000
that I'm working with for more courses and more things I want to do with people

00:25:00.000 --> 00:25:03.000
teaching pytest and other things.

00:25:03.000 --> 00:25:07.000
It fits better with Podium platform than with teachable.

00:25:07.000 --> 00:25:11.000
So to sort of celebrate the switch, I haven't made the switch yet.

00:25:11.000 --> 00:25:14.000
It's going to happen this week, but you can already get to this new one.

00:25:14.000 --> 00:25:17.000
It's at pythontest.podium.com.

00:25:17.000 --> 00:25:23.000
And now through Sunday, you get 25% off if you use the code "pytest."

00:25:23.000 --> 00:25:26.000
And that's P-Y-T-E-S-T.

00:25:26.000 --> 00:25:30.000
And you can find that link in the show notes also.

00:25:30.000 --> 00:25:35.000
Okay, so and lastly, I know PyCon is coming up.

00:25:35.000 --> 00:25:40.000
I won't be at PyCon, but I know a lot of great people will be.

00:25:40.000 --> 00:25:45.000
And so to celebrate PyCon, I have episode 220 at Python Test

00:25:45.000 --> 00:25:52.000
that's getting the most out of PyCon and some great tips from Rob Ludwick

00:25:52.000 --> 00:25:56.000
about having fun at PyCon.

00:25:56.000 --> 00:25:58.000
So check that out.

00:25:58.000 --> 00:26:00.000
Indeed.

00:26:00.000 --> 00:26:04.000
Yeah, I'm going to be doing probably a data science panel podcast

00:26:04.000 --> 00:26:09.000
that's also going to be live streamed with the JetBrains crew over there.

00:26:09.000 --> 00:26:11.000
So that'll be a lot of fun.

00:26:11.000 --> 00:26:14.000
And we'll probably do Python Bytes, but since you're not there,

00:26:14.000 --> 00:26:17.000
probably not an open space in-person one.

00:26:17.000 --> 00:26:20.000
Probably just sneak away to a quiet spot and we'll do it like this.

00:26:20.000 --> 00:26:22.000
Different background.

00:26:22.000 --> 00:26:26.000
All right, awesome.

00:26:26.000 --> 00:26:28.000
Is that it?

00:26:28.000 --> 00:26:30.000
I have one more, one last minute one, which I thought was cool.

00:26:30.000 --> 00:26:32.000
Just one I just threw in.

00:26:32.000 --> 00:26:35.000
I saw this on Aston just before we started recording.

00:26:35.000 --> 00:26:40.000
Somebody named Orion Reed posted this bookmarklet

00:26:40.000 --> 00:26:45.000
that to visualize your DOM,

00:26:45.000 --> 00:26:50.000
it's a JavaScript bookmarklet to visualize your DOM in 3D.

00:26:50.000 --> 00:26:52.000
I love it.

00:26:52.000 --> 00:26:54.000
So cool.

00:26:54.000 --> 00:26:57.000
Just like silly, who cares?

00:26:57.000 --> 00:27:00.000
But if you're looking at why is this thing overlapping that thing,

00:27:00.000 --> 00:27:04.000
what about Z ordering or why is this actually contained in that

00:27:04.000 --> 00:27:06.000
versus next to that, all that kind of stuff,

00:27:06.000 --> 00:27:08.000
you would see from this 3D rotational thing.

00:27:08.000 --> 00:27:10.000
It's beautiful.

00:27:10.000 --> 00:27:12.000
Yeah, it's pretty neat.

00:27:12.000 --> 00:27:14.000
I'll link to that.

00:27:14.000 --> 00:27:16.000
That's all my extras.

00:27:16.000 --> 00:27:18.000
So there's a question out there, Brian.

00:27:18.000 --> 00:27:21.000
This is an important one.

00:27:21.000 --> 00:27:24.000
Who will carry the Python staff of power at PyCon, Brian?

00:27:24.000 --> 00:27:26.000
Who will do this?

00:27:26.000 --> 00:27:28.000
I don't know.

00:27:28.000 --> 00:27:32.000
I don't know, but I think there's going to be a great disturbance in the force

00:27:32.000 --> 00:27:34.000
is what I'm feeling.

00:27:34.000 --> 00:27:36.000
Speaking of which, how about a joke?

00:27:36.000 --> 00:27:38.000
I have two jokes for people.

00:27:38.000 --> 00:27:40.000
One, very heartfelt and sincere,

00:27:40.000 --> 00:27:42.000
and we're going to close out the show with that.

00:27:42.000 --> 00:27:44.000
But first one, a sneaky little game.

00:27:44.000 --> 00:27:47.000
So this comes from Reddit, and it's just on r/programminghumor.

00:27:47.000 --> 00:27:49.000
It's just a little game, and it says,

00:27:49.000 --> 00:27:52.000
"Import random, import OS, randomly get a number.

00:27:52.000 --> 00:27:54.000
Guess equals input.

00:27:54.000 --> 00:27:56.000
Silly game, guess a number between 1 and 10,

00:27:56.000 --> 00:27:58.000
and it converts it to an int."

00:27:58.000 --> 00:28:01.000
So you would think, of course, if guess equals number, you won.

00:28:01.000 --> 00:28:03.000
Else, sorry, try again.

00:28:03.000 --> 00:28:05.000
No.

00:28:05.000 --> 00:28:07.000
If guess equals number, print, you won.

00:28:07.000 --> 00:28:11.000
Else, OS.remove C colon Windows backslash system32.

00:28:11.000 --> 00:28:13.000
[laughter]

00:28:13.000 --> 00:28:15.000
Ooh.

00:28:15.000 --> 00:28:17.000
That's just terrible.

00:28:17.000 --> 00:28:19.000
I don't think it would really work.

00:28:19.000 --> 00:28:21.000
It would really work, but you could do it like,

00:28:21.000 --> 00:28:23.000
you could delete your user profile.

00:28:23.000 --> 00:28:25.000
[laughter]

00:28:25.000 --> 00:28:27.000
You know, like stuff that doesn't require admin access.

00:28:27.000 --> 00:28:29.000
Oh, boy.

00:28:29.000 --> 00:28:31.000
That's funny.

00:28:31.000 --> 00:28:33.000
Just a silly little game.

00:28:33.000 --> 00:28:36.000
All right. Let's close this show out with something special.

00:28:36.000 --> 00:28:39.000
I saw this come through the news a little bit.

00:28:39.000 --> 00:28:43.000
So I think this is going to be a lot of fun, Brian.

00:28:43.000 --> 00:28:45.000
I came across this--

00:28:45.000 --> 00:28:47.000
Actually, no, this came from Dan Bader.

00:28:47.000 --> 00:28:49.000
He sent this over to me.

00:28:49.000 --> 00:28:51.000
I think it was this.

00:28:51.000 --> 00:28:53.000
He said, "You wouldn't believe this. Check this out."

00:28:53.000 --> 00:28:55.000
And it's called "Permission Granted.

00:28:55.000 --> 00:29:00.000
A Sad Girl Sings the MIT Open Source License."

00:29:00.000 --> 00:29:02.000
Like, for real.

00:29:02.000 --> 00:29:04.000
Okay?

00:29:04.000 --> 00:29:07.000
So it's AI-generated, which is what makes it crazy,

00:29:07.000 --> 00:29:10.000
and it probably has Python involved in there somehow.

00:29:10.000 --> 00:29:14.000
And since AI-generated content can't be copyrighted,

00:29:14.000 --> 00:29:16.000
we should be safe to play it.

00:29:16.000 --> 00:29:18.000
Let's do it. We're going to close out the show.

00:29:18.000 --> 00:29:20.000
It's two minutes. You can listen to it if you want.

00:29:20.000 --> 00:29:22.000
If not, feel free to bail.

00:29:22.000 --> 00:29:24.000
But the end of the show is we're playing this.

00:29:24.000 --> 00:29:26.000
So here we go.

00:29:26.000 --> 00:29:28.000
[video begins]

00:29:28.000 --> 00:29:31.000
♪ Permission is hereby granted ♪

00:29:31.000 --> 00:29:34.000
♪ Free of charge ♪

00:29:34.000 --> 00:29:38.000
♪ To any person obtaining ♪

00:29:38.000 --> 00:29:41.000
♪ A copy of this software ♪

00:29:41.000 --> 00:29:46.000
♪ Associated documentation files ♪

00:29:46.000 --> 00:29:48.000
♪ This software ♪

00:29:48.000 --> 00:29:53.000
♪ To deal in the software without restriction ♪

00:29:53.000 --> 00:29:57.000
♪ Including without limitation the rights to use ♪

00:29:57.000 --> 00:30:01.000
♪ Copy, modify, merge, publish, distribute ♪

00:30:01.000 --> 00:30:07.000
♪ Sublacence and/or sell copies of the software ♪

00:30:07.000 --> 00:30:13.000
♪ To permit persons to whom the software is furnished to do so ♪

00:30:13.000 --> 00:30:19.000
♪ Subject to the following conditions ♪

00:30:19.000 --> 00:30:23.000
♪ The above copyright notice ♪

00:30:23.000 --> 00:30:25.000
♪ And this permission notice ♪

00:30:25.000 --> 00:30:29.000
♪ Shall be included in all copies ♪

00:30:29.000 --> 00:30:34.000
♪ Or substantial portions of the software ♪

00:30:38.000 --> 00:30:43.000
♪ The software is provided as is ♪

00:30:43.000 --> 00:30:47.000
♪ Without warranty of any kind ♪

00:30:47.000 --> 00:30:50.000
♪ Express or implied ♪

00:30:50.000 --> 00:30:57.000
♪ Coding but not limited to the warranties of merchant tabulating ♪

00:30:57.000 --> 00:31:01.000
♪ Visted for a particular purpose ♪

00:31:01.000 --> 00:31:06.000
♪ And non-infringement in no event shall be all for ♪

00:31:06.000 --> 00:31:13.000
♪ So copyright holders be liable for any claim ♪

00:31:13.000 --> 00:31:18.000
♪ Damages or other liability ♪

00:31:18.000 --> 00:31:23.000
♪ Whether in an action of contract ♪

00:31:23.000 --> 00:31:27.000
♪ Tort or otherwise ♪

00:31:27.000 --> 00:31:29.000
Bye everyone.

