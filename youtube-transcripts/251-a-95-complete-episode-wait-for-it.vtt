WEBVTT

00:00:00.000 --> 00:00:08.880
Hey, everybody, welcome to the stream. We'll get started with the show. Just a sec. Hello


00:00:08.880 --> 00:00:13.280
and welcome to Python Bytes, where we deliver Python news and headlines directly to your


00:00:13.280 --> 00:00:21.440
earbuds. This is episode 251, recorded September 22nd, 2021. I am Brian Okken.


00:00:21.440 --> 00:00:23.120
I'm Michael Kennedy.


00:00:23.120 --> 00:00:24.840
And I'm Brett Cannon.


00:00:24.840 --> 00:00:29.760
So do we need to introduce Brett? I mean, thanks for being on the show, Brett.


00:00:29.760 --> 00:00:31.280
- I'm gonna introduce my cat, Gidget,


00:00:31.280 --> 00:00:32.440
for all those on the live stream,


00:00:32.440 --> 00:00:34.040
'cause she's in frame at the moment,


00:00:34.040 --> 00:00:36.960
just lounging around on a nice comfy blanket.


00:00:36.960 --> 00:00:38.600
Actually from Google,


00:00:38.600 --> 00:00:41.760
from when I won an open source peer bonus.


00:00:41.760 --> 00:00:45.240
- You won your cat? - Way more information


00:00:45.240 --> 00:00:47.480
than anyone probably cared, but there you go.


00:00:47.480 --> 00:00:50.360
- Nice, yeah, my dog is around here somewhere,


00:00:50.360 --> 00:00:52.200
but probably won't show up on screen.


00:00:52.200 --> 00:00:56.120
- Well, let's just get started.


00:00:56.120 --> 00:00:57.920
I think if people don't know Brett,


00:00:57.920 --> 00:00:59.920
they need to get out from under a rock.


00:00:59.920 --> 00:01:02.920
- Yeah, absolutely.


00:01:02.920 --> 00:01:07.500
Live chat real quick, Brandon Branner, thanks.


00:01:07.500 --> 00:01:08.500
They gave you a cat?


00:01:08.500 --> 00:01:13.160
- No, there's a long story about how we got Gidget,


00:01:13.160 --> 00:01:15.720
but no, cat did not come with the blanket.


00:01:15.720 --> 00:01:21.740
- So the first thing that I wanna talk about


00:01:21.740 --> 00:01:25.140
comes to us from, this is both recommended


00:01:25.140 --> 00:01:27.020
and created by Dan Ludic.


00:01:27.020 --> 00:01:28.980
So Dan, nice work.


00:01:28.980 --> 00:01:32.500
I love these little tools that you can run against your code


00:01:32.500 --> 00:01:34.880
that will just reformat them to be better.


00:01:34.880 --> 00:01:37.340
You know, one of the, probably the most popular


00:01:37.340 --> 00:01:38.720
and well-known one is Black, right?


00:01:38.720 --> 00:01:42.300
We've all heard of Black, which is great.


00:01:42.300 --> 00:01:45.660
But there's other ones like Flint, F-L-Y-N-T,


00:01:45.660 --> 00:01:47.040
is one of my favorites that converts


00:01:47.040 --> 00:01:49.800
all the various string formattings to F-strings,


00:01:49.800 --> 00:01:51.200
which is great.


00:01:51.200 --> 00:01:55.580
So here's another one around typing called AutoOptional.


00:01:55.580 --> 00:01:58.880
And Brett, I think people maybe are using optional


00:01:58.880 --> 00:02:01.900
a little bit wrong in the typing space in Python.


00:02:01.900 --> 00:02:02.800
What do you think?


00:02:02.800 --> 00:02:06.180
Or just not using it when they should be.


00:02:06.180 --> 00:02:09.300
- Yeah, that's definitely a thing that was actually,


00:02:09.300 --> 00:02:12.100
I think, discussed early on about,


00:02:12.100 --> 00:02:14.680
do we even need to have the concept of optional


00:02:14.680 --> 00:02:17.780
to represent, hey, this thing can be whatever the type is


00:02:17.780 --> 00:02:19.260
or none and could just be--


00:02:19.260 --> 00:02:20.260
- Yeah, what was the thinking there?


00:02:20.260 --> 00:02:23.740
Because you know, language is like C#, Java, C++.


00:02:23.740 --> 00:02:26.580
you can have a thing and then it can be null


00:02:26.580 --> 00:02:27.740
and C# there's value types,


00:02:27.740 --> 00:02:29.440
but generally most things are pointers


00:02:29.440 --> 00:02:30.980
and they can be set to null


00:02:30.980 --> 00:02:33.140
and you don't have to have some kind of a special type


00:02:33.140 --> 00:02:35.380
to say it's either a user or it's null.


00:02:35.380 --> 00:02:36.380
You just say it's a user


00:02:36.380 --> 00:02:38.100
because it could be a reference type,


00:02:38.100 --> 00:02:40.660
it also could be null or nil or whatever.


00:02:40.660 --> 00:02:43.060
But Swift and Python have this concept


00:02:43.060 --> 00:02:47.020
of you must explicitly say that it could not have a value.


00:02:47.020 --> 00:02:52.020
- So explicit is better than implicit, as we all know.


00:02:52.020 --> 00:02:55.220
The other thing is obviously,


00:02:55.220 --> 00:02:57.580
having none accidentally sneak in when you don't want it.


00:02:57.580 --> 00:02:59.180
As you mentioned, Michael,


00:02:59.180 --> 00:03:02.460
Swift specifically does not let you have null.


00:03:02.460 --> 00:03:04.060
You can't have null references.


00:03:04.060 --> 00:03:06.780
You have to either declare that it will accept null


00:03:06.780 --> 00:03:08.820
and you have to check or it won't take it at all.


00:03:08.820 --> 00:03:10.180
And it's a similar thing here.


00:03:10.180 --> 00:03:11.980
No one likes it when they actually find out,


00:03:11.980 --> 00:03:13.460
"Oh, the null type's not callable


00:03:13.460 --> 00:03:14.780
'cause you accidentally passed null."


00:03:14.780 --> 00:03:15.620
- Right.


00:03:15.620 --> 00:03:19.140
What's the most common exception type is attribute


00:03:19.140 --> 00:03:22.100
or type attribute, none has no attribute,


00:03:22.100 --> 00:03:23.860
whatever the thing is you're trying to access, right?


00:03:23.860 --> 00:03:24.700
That thing?


00:03:24.700 --> 00:03:25.520
- Yeah, I'm willing to bet, yeah,


00:03:25.520 --> 00:03:26.360
that attribute error alone,


00:03:26.360 --> 00:03:28.100
it probably makes up like a huge portion


00:03:28.100 --> 00:03:29.300
of people's exceptions.


00:03:29.300 --> 00:03:31.340
So that's why you have to be explicit.


00:03:31.340 --> 00:03:33.940
Like you need, if you're gonna be running a type checker,


00:03:33.940 --> 00:03:37.560
let's be very explicit about what you do and don't expect.


00:03:37.560 --> 00:03:38.660
- Yeah, cool.


00:03:38.660 --> 00:03:39.500
I agree with that.


00:03:39.500 --> 00:03:40.320
I think it's nice.


00:03:40.320 --> 00:03:41.380
It did surprise me at first,


00:03:41.380 --> 00:03:42.340
but then I'm like, oh, okay,


00:03:42.340 --> 00:03:44.340
well, that's an interesting choice,


00:03:44.340 --> 00:03:47.300
but now that I know, I should use optional.


00:03:47.300 --> 00:03:49.060
So here's a case of a function,


00:03:49.060 --> 00:03:51.220
and it's just some foobar example,


00:03:51.220 --> 00:03:54.340
but they have a bar parameter


00:03:54.340 --> 00:03:56.820
and they say colon str equals none.


00:03:56.820 --> 00:03:59.160
So they're giving it a default value


00:03:59.160 --> 00:04:00.820
and saying it can be a string.


00:04:00.820 --> 00:04:05.320
Well, obviously that is like in three words,


00:04:05.320 --> 00:04:06.340
patently wrong, right?


00:04:06.340 --> 00:04:08.760
It can't both be a string and be set to be none


00:04:08.760 --> 00:04:12.440
because it, you know, strings in type system can't be none.


00:04:12.440 --> 00:04:14.900
They have to, that has to be optional, right?


00:04:14.900 --> 00:04:15.740
And so the-


00:04:15.740 --> 00:04:17.620
- Except for all of us know what that means.


00:04:17.620 --> 00:04:18.460
- I know, we all know that.


00:04:18.460 --> 00:04:21.100
- Well, so funny enough, you know what it means,


00:04:21.100 --> 00:04:22.580
but if you didn't write that,


00:04:22.580 --> 00:04:24.440
do you know what they actually meant?


00:04:24.440 --> 00:04:25.280
Right?


00:04:25.280 --> 00:04:26.580
Like if Michael typed that and you saw it,


00:04:26.580 --> 00:04:27.940
would you go,


00:04:27.940 --> 00:04:30.120
Michael meant for that to actually be optional


00:04:30.120 --> 00:04:33.500
and thus nullable in terms of how other languages write it?


00:04:33.500 --> 00:04:35.740
Or was that on purpose?


00:04:35.740 --> 00:04:37.580
And that's why that's not allowed,


00:04:37.580 --> 00:04:41.300
is 'cause you don't know who screwed up, if anyone.


00:04:41.300 --> 00:04:43.020
Was that accidentally written that way


00:04:43.020 --> 00:04:45.580
and it really was meant to be optional?


00:04:45.580 --> 00:04:48.660
or was it on purpose and thus it's listed that way?


00:04:48.660 --> 00:04:51.300
Because you don't know intent of someone else who wrote it,


00:04:51.300 --> 00:04:53.420
this is why we went with the explicit


00:04:53.420 --> 00:04:55.660
where you have to label something as optional.


00:04:55.660 --> 00:04:57.620
- And this is why it's awesome


00:04:57.620 --> 00:04:59.420
to have core developers on the show.


00:04:59.420 --> 00:05:00.780
(laughing)


00:05:00.780 --> 00:05:04.380
So the idea of this is it's a thing you install,


00:05:04.380 --> 00:05:05.760
but then you pip install it,


00:05:05.760 --> 00:05:08.860
but then you just run it on the CLI like Flint,


00:05:08.860 --> 00:05:10.300
and you just point it at a directory,


00:05:10.300 --> 00:05:11.540
and it will go through and it'll find


00:05:11.540 --> 00:05:13.420
all of these default values that are none,


00:05:13.420 --> 00:05:16.220
but don't have optional in their type information,


00:05:16.220 --> 00:05:18.580
and then it'll just add optional,


00:05:18.580 --> 00:05:20.040
which is pretty straightforward,


00:05:20.040 --> 00:05:22.840
but it's so easy to use, right?


00:05:22.840 --> 00:05:26.420
It's like, oh, I have this 20,000 lines of Python code,


00:05:26.420 --> 00:05:27.680
and I really wish they were f-strings,


00:05:27.680 --> 00:05:30.060
like flint that folder, it's done.


00:05:30.060 --> 00:05:31.260
So same thing here, right?


00:05:31.260 --> 00:05:34.620
It's I've got this huge bunch of code


00:05:34.620 --> 00:05:36.060
and nobody really thought about optional,


00:05:36.060 --> 00:05:37.940
let's just quick fix that.


00:05:37.940 --> 00:05:39.700
It doesn't fix it everywhere, right?


00:05:39.700 --> 00:05:42.420
Like I could say a thing takes a string


00:05:42.420 --> 00:05:45.380
without a default value for the parameter.


00:05:45.380 --> 00:05:47.780
And then maybe it's somewhere else that's getting a none


00:05:47.780 --> 00:05:49.220
and it's not like that advanced.


00:05:49.220 --> 00:05:50.940
It just looks if you're having default values


00:05:50.940 --> 00:05:53.100
that don't match the type, make them match.


00:05:53.100 --> 00:05:58.500
- Yeah, so I like it.


00:05:58.500 --> 00:06:00.300
One of the questions I have is,


00:06:00.300 --> 00:06:03.560
so if I do optional string equals none,


00:06:03.560 --> 00:06:08.560
does that mean I still can pass none to the function?


00:06:08.560 --> 00:06:10.940
- Yes.


00:06:10.940 --> 00:06:13.080
- It's no different than normal.


00:06:13.080 --> 00:06:14.940
- Okay.


00:06:14.940 --> 00:06:16.260
But wouldn't that be the same as saying


00:06:16.260 --> 00:06:18.780
that I can pass str or none?


00:06:18.780 --> 00:06:19.620
- Yes.


00:06:19.620 --> 00:06:23.460
- Yes, and also that's what on the live stream,


00:06:23.460 --> 00:06:26.120
Will McGugan, hey Will, says,


00:06:26.120 --> 00:06:29.620
do you need optional now that we can have foo pipe none


00:06:29.620 --> 00:06:33.760
as an alternative to optional of foo?


00:06:33.760 --> 00:06:36.900
No, but this is sort of more backwards compatible, right?


00:06:36.900 --> 00:06:37.860
Brett, when did that come out?


00:06:37.860 --> 00:06:39.460
Is that 3.9?


00:06:39.460 --> 00:06:40.500
- 3.10, I think.


00:06:40.500 --> 00:06:41.500
- 310, yeah, so.


00:06:41.500 --> 00:06:42.900
- So it's not even out yet officially.


00:06:42.900 --> 00:06:44.220
Next month. - Yeah, yeah.


00:06:44.220 --> 00:06:47.460
- So give it a little over a week.


00:06:47.460 --> 00:06:48.620
- Right on.


00:06:48.620 --> 00:06:49.700
That's exciting.


00:06:49.700 --> 00:06:51.820
But you know, how much backwards compatibility


00:06:51.820 --> 00:06:52.660
do you want, right?


00:06:52.660 --> 00:06:55.780
So I think soon, but maybe, I don't know if I would go yet.


00:06:55.780 --> 00:06:58.140
And then Chris May says, "Oops, opening PyCharm


00:06:58.140 --> 00:06:59.980
"to add optional to my last project."


00:06:59.980 --> 00:07:02.780
Before you go to the work to write it,


00:07:02.780 --> 00:07:06.340
just run this against it on the CLI, on the command line,


00:07:06.340 --> 00:07:08.820
just see how it works, all right?


00:07:08.820 --> 00:07:10.220
So, yeah.


00:07:10.220 --> 00:07:11.920
- Yes, it also works in VS Code.


00:07:11.920 --> 00:07:15.700
- Although ZDocs does say back in 3.7,


00:07:15.700 --> 00:07:18.980
you can use from Dunder Future import annotations


00:07:18.980 --> 00:07:20.100
and then get that to work.


00:07:20.100 --> 00:07:22.780
I don't know about that personally, Brett.


00:07:22.780 --> 00:07:26.100
- So what ZDocs is suggesting here is if you use


00:07:26.100 --> 00:07:28.140
the from Dunder Future import annotations,


00:07:28.140 --> 00:07:31.040
what that does is it turns all your annotations


00:07:31.040 --> 00:07:33.540
technically into strings to Python


00:07:33.540 --> 00:07:35.260
and so it's actually not executed.


00:07:35.260 --> 00:07:36.980
'Cause before that, what actually happened was


00:07:36.980 --> 00:07:40.740
is that code in your annotation actually got run


00:07:40.740 --> 00:07:45.640
and the resulting object got bound to the code object.


00:07:45.640 --> 00:07:47.580
What that future import does is just says,


00:07:47.580 --> 00:07:51.440
no, no, we don't want to pay that overhead on your import.


00:07:51.440 --> 00:07:53.660
You might have performance reasons.


00:07:53.660 --> 00:07:56.100
Don't do that and it'll actually just become a string.


00:07:56.100 --> 00:07:57.420
And then we have some stuff


00:07:57.420 --> 00:08:01.100
to try to resolve that at runtime.


00:08:01.100 --> 00:08:04.140
This is the whole thing that came up in Python 3.10


00:08:04.140 --> 00:08:07.060
that you all covered in a previous episode.


00:08:07.060 --> 00:08:09.660
Pydantic going, oh God, there's a change coming in 3.10


00:08:09.660 --> 00:08:11.460
that might break us, and there's a whole kerfuffle,


00:08:11.460 --> 00:08:13.980
and anyway, that's what that's all resolving.


00:08:13.980 --> 00:08:18.780
So technically, you're right that you could write it back,


00:08:18.780 --> 00:08:21.440
but it would break complete expectations


00:08:21.440 --> 00:08:23.800
of everyone who ever tried to use your code


00:08:23.800 --> 00:08:26.420
when you tried to run that somewhere else.


00:08:26.420 --> 00:08:28.620
So I would advise against it,


00:08:28.620 --> 00:08:30.380
unless you know you're gonna be working against 3.10,


00:08:30.380 --> 00:08:33.020
because, for instance, someone might write code


00:08:33.020 --> 00:08:37.460
for Python 3.7 or 3.8, tell my Pi it's Python 3.9


00:08:37.460 --> 00:08:38.780
and then it would error out saying,


00:08:38.780 --> 00:08:41.460
well, that syntax makes no sense.


00:08:41.460 --> 00:08:43.020
- Right, okay, interesting.


00:08:43.020 --> 00:08:46.660
All right, well, yeah, pretty good one.


00:08:46.660 --> 00:08:49.380
Super easy to use, not a whole lot to it,


00:08:49.380 --> 00:08:51.980
but I think it's because it's so easy to adopt,


00:08:51.980 --> 00:08:53.300
it's kind of a nice one.


00:08:53.300 --> 00:08:59.220
- Yeah, well, I wanna talk about something that's not easy.


00:08:59.220 --> 00:09:01.320
It's not easy to write good documentation.


00:09:02.420 --> 00:09:03.380
>> Definitely not.


00:09:03.380 --> 00:09:07.180
>> There's an article from Daniel Stenberg,


00:09:07.180 --> 00:09:09.700
and this doesn't apply to just Python stuff,


00:09:09.700 --> 00:09:12.780
this applies to all software stuff.


00:09:12.780 --> 00:09:17.180
There's an article called Making World-Class Docs Takes Effort.


00:09:17.180 --> 00:09:19.220
I think it's an understatement.


00:09:19.220 --> 00:09:20.820
It takes a lot of effort.


00:09:20.820 --> 00:09:26.500
But this is a nice little project or article.


00:09:26.500 --> 00:09:30.740
Talks about he's got some gold things that he looks for.


00:09:30.740 --> 00:09:35.140
to get a gold star, you must have these six items in your documentation.


00:09:35.140 --> 00:09:37.740
So let's just talk about what he's looking for.


00:09:37.740 --> 00:09:41.740
First of all, the documentation should be in the repository as the code.


00:09:41.740 --> 00:09:45.140
I've got mixed feelings about this, but in general,


00:09:45.140 --> 00:09:47.240
I'm on the side of this is a good idea


00:09:47.240 --> 00:09:49.300
just to keep the code and the docs together.


00:09:49.300 --> 00:09:53.240
The only reason why I sometimes find it difficult


00:09:53.240 --> 00:09:56.600
is I'm updating my documentation


00:09:56.600 --> 00:09:59.900
possibly way more than I'm updating my code,


00:09:59.980 --> 00:10:02.580
And it looks like there's a lot of turn on the code when there's not.


00:10:02.580 --> 00:10:04.140
So, I don't know.


00:10:04.140 --> 00:10:07.380
But generally, I think that's a good idea.


00:10:07.380 --> 00:10:10.280
Most projects have the reverse, right?


00:10:10.280 --> 00:10:13.520
Like, the documentations that was edited two years ago,


00:10:13.520 --> 00:10:15.440
but there's been changes continuously, right?


00:10:15.440 --> 00:10:17.640
Like, I don't even know if those still apply, but...


00:10:17.640 --> 00:10:20.380
Yeah, yeah, but it is good to try to keep these together.


00:10:20.380 --> 00:10:23.820
Also, you can make a pull request or a merge request


00:10:23.820 --> 00:10:26.780
be with both the documentation and the code together,


00:10:26.780 --> 00:10:29.480
and so that's a good reason for that.


00:10:29.540 --> 00:10:32.880
Next up is that your docs are not extracted from code.


00:10:32.880 --> 00:10:36.880
And I know there's a lot of tools out there that can try to do this.


00:10:36.880 --> 00:10:41.560
But the comment is just think about your favorite project documentation.


00:10:41.560 --> 00:10:43.900
Is any of it generated from code?


00:10:43.900 --> 00:10:45.400
And odds are not.


00:10:45.400 --> 00:10:48.520
So yeah, I agree with this.


00:10:48.520 --> 00:10:51.520
You can usually spot it because it'll be like method,


00:10:51.520 --> 00:10:56.640
login user, and then the method, the comment will be logs in user.


00:10:56.640 --> 00:10:59.720
(laughing)


00:10:59.720 --> 00:11:01.200
- Honestly, I've seen the reverse too,


00:11:01.200 --> 00:11:04.600
where people have doc strings that are extremely verbose


00:11:04.600 --> 00:11:07.640
and take up pages in your terminal just to scroll through


00:11:07.640 --> 00:11:10.640
because they just use that to spit out your docs.


00:11:10.640 --> 00:11:12.200
In which case it's not as convenient


00:11:12.200 --> 00:11:15.000
as when you just run help from a REPL to just go like,


00:11:15.000 --> 00:11:15.840
what does this do again?


00:11:15.840 --> 00:11:17.360
What are the arguments?


00:11:17.360 --> 00:11:20.720
I need a really clear pointed thing directly at a developer


00:11:20.720 --> 00:11:22.280
who's just trying to double check something


00:11:22.280 --> 00:11:24.820
versus a whole exposition of here,


00:11:24.820 --> 00:11:26.200
all the examples of how to use this thing.


00:11:26.200 --> 00:11:28.960
I don't need that level of detail, I just need to remember one little thing.


00:11:28.960 --> 00:11:30.840
Right, right. It's a range.


00:11:30.840 --> 00:11:32.840
Is it inclusive or exclusive of the bound?


00:11:32.840 --> 00:11:34.280
Something like that, right?


00:11:34.280 --> 00:11:37.000
One thing, the one place where I'm working on,


00:11:37.000 --> 00:11:41.320
I've got a project to try to use auto-generated documentation is


00:11:41.320 --> 00:11:44.360
I've got a really large test suite on a project.


00:11:44.360 --> 00:11:47.160
I'm shocked. Absolutely shocked, Brian.


00:11:47.160 --> 00:11:50.480
That I would really like to have docstrings,


00:11:50.480 --> 00:11:53.240
they encouraged developers to put docstrings in there


00:11:53.240 --> 00:11:56.880
for the reason why the test exists and what feature it's really testing.


00:11:56.880 --> 00:12:02.940
And to be able to have an auto-generated website with just all of our tests,


00:12:02.940 --> 00:12:04.940
that'd be cool, but I'm not there yet.


00:12:04.940 --> 00:12:06.620
That makes sense.


00:12:06.620 --> 00:12:10.500
The next thing is your docs feature examples.


00:12:10.500 --> 00:12:14.280
And I love this because that's what people want to know.


00:12:14.280 --> 00:12:16.620
If I want to do this, how do I do it?


00:12:16.620 --> 00:12:20.920
And so the comment is really just use examples.


00:12:20.920 --> 00:12:22.760
If you already have examples, add more.


00:12:22.760 --> 00:12:25.440
you probably can't have too many examples.


00:12:25.440 --> 00:12:27.400
>> And test them.


00:12:27.400 --> 00:12:29.680
>> Oh, yeah. Test the examples.


00:12:29.680 --> 00:12:33.560
We covered a tool called MakeDocTest that you could


00:12:33.560 --> 00:12:37.000
use to test your code within your documentation.


00:12:37.000 --> 00:12:39.240
You should use that. Next is


00:12:39.240 --> 00:12:43.600
your document every API call you provide.


00:12:43.600 --> 00:12:45.720
This one's a tough one to keep up on,


00:12:45.720 --> 00:12:47.000
but it's really important.


00:12:47.000 --> 00:12:52.320
Even some great projects like Typer and stuff that I've used,


00:12:52.320 --> 00:12:57.140
Not to not to bash typer, but I think all projects have this problem. They'll add a new cool feature


00:12:57.140 --> 00:13:00.620
It's cool. I want to use it and it's not in the docs yet. So


00:13:00.620 --> 00:13:04.240
That's a tough one to keep up on but please do


00:13:04.240 --> 00:13:08.400
One thing I'll say that is actually hard for Python is because it's so dynamic


00:13:08.400 --> 00:13:11.360
It's hard to actually get a static list of all the API points


00:13:11.360 --> 00:13:14.120
But one thing I will say


00:13:14.120 --> 00:13:17.780
Because pull over it says I have to bring more rest of this podcast


00:13:18.680 --> 00:13:21.480
Docs.rs, which is auto-generated documentation


00:13:21.480 --> 00:13:24.120
for anything uploaded to crates.io for Rust tools,


00:13:24.120 --> 00:13:28.120
will actually give you a percentage of covered public APIs.


00:13:28.120 --> 00:13:32.760
So you can actually see how much coverage you have in your documentation.


00:13:32.760 --> 00:13:37.880
That's an interesting definition of code coverage.


00:13:37.880 --> 00:13:40.280
Yeah, it is, right? But I didn't even know about it,


00:13:40.280 --> 00:13:43.480
and then I found it when I was just double-checking everything built okay


00:13:43.480 --> 00:13:47.080
for a project I will mention later in my extras.


00:13:47.800 --> 00:13:49.280
And I noticed it was 100%.


00:13:49.280 --> 00:13:50.400
I was like, I thought I covered everything.


00:13:50.400 --> 00:13:51.480
And I went back, it was like, nope,


00:13:51.480 --> 00:13:55.120
there were actually a couple enum values


00:13:55.120 --> 00:13:56.160
that I didn't document.


00:13:56.160 --> 00:13:57.520
And so I was able to go back, do that,


00:13:57.520 --> 00:13:59.760
and make sure I had full 100% coverage of my stuff.


00:13:59.760 --> 00:14:03.480
So it can be handy, but yeah, it's tricky in Python, right?


00:14:03.480 --> 00:14:06.480
Where it's like, I could auto-gen my whole API


00:14:06.480 --> 00:14:08.400
and no way to know whether I covered it all.


00:14:08.400 --> 00:14:10.960
- At runtime and never have it hit disk, yeah.


00:14:10.960 --> 00:14:11.800
- Yep. - Yeah.


00:14:11.800 --> 00:14:14.480
- Last couple of things,


00:14:15.600 --> 00:14:19.760
Docs should be easily accessible and browsed,


00:14:19.760 --> 00:14:23.280
and hopefully a search feature or something,


00:14:23.280 --> 00:14:24.720
even if you attach Google Search.


00:14:24.720 --> 00:14:25.920
That's cool.


00:14:25.920 --> 00:14:30.120
But there was a comment in the text


00:14:30.120 --> 00:14:33.400
also to say, preferably be able to have it online.


00:14:33.400 --> 00:14:36.760
So offline is what the comment is.


00:14:36.760 --> 00:14:40.800
So if it's-- and I'm on the fence on that.


00:14:40.800 --> 00:14:42.480
I'm usually attached to the internet,


00:14:42.480 --> 00:14:44.480
So looking stuff up isn't a bad thing.


00:14:44.480 --> 00:14:48.020
But, and easy to contribute to the lastly.


00:14:48.020 --> 00:14:52.000
So yeah, documentation stuff.


00:14:52.000 --> 00:14:53.640
I would, there's a lot of stuff.


00:14:53.640 --> 00:14:54.640
It's hard to get it right.


00:14:54.640 --> 00:14:56.480
I would, there's a lot of stuff I'd add


00:14:56.480 --> 00:14:58.880
if I was being more verbose, but I wanna,


00:14:58.880 --> 00:15:01.560
the last thing I really wanna add to this


00:15:01.560 --> 00:15:04.680
is don't slam projects that don't have good documentation


00:15:04.680 --> 00:15:05.760
because it's hard.


00:15:05.760 --> 00:15:08.680
If you want to have it be better, then contribute.


00:15:08.680 --> 00:15:09.600
Fix it yourself.


00:15:10.480 --> 00:15:11.320
- Yeah.


00:15:11.320 --> 00:15:14.240
Brian, you're kind of blowing up the audience out here


00:15:14.240 --> 00:15:16.320
with the comments, so I'll throw a few out


00:15:16.320 --> 00:15:17.140
that seem interesting.


00:15:17.140 --> 00:15:18.480
Sam out there says, "Pro tip,


00:15:18.480 --> 00:15:20.840
"keep on top of your documentation,


00:15:20.840 --> 00:15:23.220
"even if it's just a cursory doc sharing some notes,


00:15:23.220 --> 00:15:24.920
"otherwise it quickly gets out of hand."


00:15:24.920 --> 00:15:26.360
Yeah, it's definitely one of those things


00:15:26.360 --> 00:15:29.000
that if you had to sit down and write it all at once,


00:15:29.000 --> 00:15:31.660
it would be dreadful, but if you can kind of do little bits


00:15:31.660 --> 00:15:33.440
as you go, then for sure, right?


00:15:33.440 --> 00:15:34.280
- Yeah.


00:15:34.280 --> 00:15:37.340
- Brandon Brainer says, "Your documentation update


00:15:37.340 --> 00:15:39.200
"should be part of the ticket, or even better,


00:15:39.200 --> 00:15:41.440
your definition of done for the ticket, right?


00:15:41.440 --> 00:15:43.160
Like when you estimate how much work


00:15:43.160 --> 00:15:44.880
in your sprint or something.


00:15:44.880 --> 00:15:47.040
And then Chris has a great one,


00:15:47.040 --> 00:15:48.960
bonus documentation if,


00:15:48.960 --> 00:15:51.720
bonus if your documentation includes animated gifs


00:15:51.720 --> 00:15:52.680
or emojis. - Yes.


00:15:52.680 --> 00:15:53.520
- Yes.


00:15:53.520 --> 00:15:56.400
Yeah, those are awesome.


00:15:56.400 --> 00:15:57.440
We'll probably leave it there for that one,


00:15:57.440 --> 00:15:58.280
but that's great.


00:15:58.280 --> 00:15:59.100
All right.


00:15:59.100 --> 00:16:01.960
- So one interesting thing you could actually do


00:16:01.960 --> 00:16:03.840
is if you really wanna push this,


00:16:03.840 --> 00:16:05.300
is if you keep your documentation


00:16:05.300 --> 00:16:06.960
in the same repository as your code,


00:16:06.960 --> 00:16:09.720
You could-- I'm going to use this from GitHub.


00:16:09.720 --> 00:16:11.720
I'm sure GitHub has equivalents.


00:16:11.720 --> 00:16:13.720
But you could probably set up a GitHub Action.


00:16:13.720 --> 00:16:16.020
Actually, I know you can, because I've written the GitHub


00:16:16.020 --> 00:16:19.680
Action to do this, to actually have your checks,


00:16:19.680 --> 00:16:23.600
your status checks on your PR fail if there are no touch


00:16:23.600 --> 00:16:27.840
docs and have to opt out of that check.


00:16:27.840 --> 00:16:30.680
I actually have a GitHub Action I wrote


00:16:30.680 --> 00:16:32.760
called check for changed files.


00:16:32.760 --> 00:16:34.920
And you could write a requirement saying,


00:16:34.920 --> 00:16:39.300
And if you change any .py file, an equivalent .rst or .md file


00:16:39.300 --> 00:16:41.200
must be changed somewhere in the PR.


00:16:41.200 --> 00:16:44.000
And if it's not, have to add a skip docs


00:16:44.000 --> 00:16:45.160
label to make it pass.


00:16:45.160 --> 00:16:47.760
And otherwise, let people know very explicitly,


00:16:47.760 --> 00:16:49.520
hey, we care about our docs.


00:16:49.520 --> 00:16:51.200
You can't just opt out of it.


00:16:51.200 --> 00:16:54.040
Please make sure everything's up to date.


00:16:54.040 --> 00:16:56.680
So there are ways to really push this pretty far


00:16:56.680 --> 00:16:58.040
if you really want to go for it.


00:16:58.040 --> 00:16:58.880
>>Yeah.


00:16:58.880 --> 00:17:01.560
And have robots be mean and say, no, you


00:17:01.560 --> 00:17:04.360
haven't finished your PR yet, rather than the maintainers.


00:17:04.360 --> 00:17:05.520
- Yeah. - Yep.


00:17:05.520 --> 00:17:09.120
All right, so--


00:17:09.120 --> 00:17:10.560
- Tell us about this next one, Brett.


00:17:10.560 --> 00:17:12.720
- Yeah, so once again, more rust on this podcast


00:17:12.720 --> 00:17:15.160
due to Paul Everett demanding it.


00:17:15.160 --> 00:17:17.240
And I've noticed there's been a slight theme


00:17:17.240 --> 00:17:19.540
the last couple episodes of talking about ways


00:17:19.540 --> 00:17:20.600
to kind of improve your shell


00:17:20.600 --> 00:17:23.920
and your general development flow, as it were.


00:17:23.920 --> 00:17:25.400
And one thing I use here,


00:17:25.400 --> 00:17:27.320
and partially because Michael's mentioned


00:17:27.320 --> 00:17:28.720
oh my posh multiple times,


00:17:28.720 --> 00:17:31.280
and I believe Brian's now mentioned oh my zeesh,


00:17:31.280 --> 00:17:33.720
I thought I'd just mention what I use for all my prompts,


00:17:33.720 --> 00:17:35.640
which is Starship.


00:17:35.640 --> 00:17:39.160
The thing I love about this is it's actually cross-shell.


00:17:39.160 --> 00:17:43.760
So what you do is basically you define,


00:17:43.760 --> 00:17:47.120
it comes with a lot of basically plugins


00:17:47.120 --> 00:17:48.280
for configuring built-in.


00:17:48.280 --> 00:17:50.520
And what you do is you basically turn the model off,


00:17:50.520 --> 00:17:52.480
configure one way or the other,


00:17:52.480 --> 00:17:55.440
and then there's a one line activation


00:17:55.440 --> 00:17:58.320
you just put in your code, and that's it.


00:17:58.320 --> 00:18:02.440
Configuration is done by a Toml file, starship.toml,


00:18:02.440 --> 00:18:04.640
And then it just works.


00:18:04.640 --> 00:18:06.120
There's no mucking about.


00:18:06.120 --> 00:18:08.620
It doesn't matter what shell you're on,


00:18:08.620 --> 00:18:10.800
and it just does its thing.


00:18:10.800 --> 00:18:12.960
And the reason I really appreciate that is


00:18:12.960 --> 00:18:15.880
I'm one of these people who likes to play with tools,


00:18:15.880 --> 00:18:18.980
which leads to me playing with different shells.


00:18:18.980 --> 00:18:21.400
Probably by the time Paul Everett tries out Phish,


00:18:21.400 --> 00:18:23.280
I'll be trying out New Shell.


00:18:23.280 --> 00:18:25.880
So because of that, I want to make sure


00:18:25.880 --> 00:18:27.960
that I can bring my shell with me very easily.


00:18:27.960 --> 00:18:30.280
And Starship, for instance, has support for Phish,


00:18:30.280 --> 00:18:32.560
and Zesh and Bash and all of them and new shell.


00:18:32.560 --> 00:18:35.600
So I can very easily try out a different shell


00:18:35.600 --> 00:18:38.360
and not feel like I'm in a foreign country


00:18:38.360 --> 00:18:40.960
where the prompting is gibberish, right?


00:18:40.960 --> 00:18:42.160
Like I hate it when-- - Right, things like


00:18:42.160 --> 00:18:45.160
oh my Z shell go on to Z shell


00:18:45.160 --> 00:18:47.760
and oh my posh go on to posh


00:18:47.760 --> 00:18:50.960
and like you're stuck on that specific one, right?


00:18:50.960 --> 00:18:52.400
- Exactly, and there's oh my fish,


00:18:52.400 --> 00:18:54.320
like pretty much every shell has an oh my something


00:18:54.320 --> 00:18:56.040
or other to tweak it out.


00:18:56.040 --> 00:18:58.060
But with this, at least for my prompt,


00:18:58.060 --> 00:18:59.900
which is actually what I see the most, right?


00:18:59.900 --> 00:19:01.220
Like, I don't know about the rest of you,


00:19:01.220 --> 00:19:03.140
but my prompt is what I interact with


00:19:03.140 --> 00:19:04.360
more than anything in my shell,


00:19:04.360 --> 00:19:07.940
not the extra fancy stuff I put in, it's this.


00:19:07.940 --> 00:19:11.020
And so this is why I really appreciate this project.


00:19:11.020 --> 00:19:13.260
- I would like to, yeah, go ahead.


00:19:13.260 --> 00:19:15.260
- I did go for it, that's just.


00:19:15.260 --> 00:19:17.300
- Well, what I like is we're seeing on the screen here,


00:19:17.300 --> 00:19:20.360
if you go to the starship.rs site,


00:19:20.360 --> 00:19:21.940
you can see like a little animated GIF


00:19:21.940 --> 00:19:23.860
and props to them for putting that on there.


00:19:23.860 --> 00:19:25.620
That is fantastic.


00:19:25.620 --> 00:19:27.580
- As we just learned, it's good documentation.


00:19:27.580 --> 00:19:31.200
- Yes, there's a lot of stuff about


00:19:31.200 --> 00:19:34.920
if you're in a GitHub branch and what branch you're on


00:19:34.920 --> 00:19:37.760
and versioning things.


00:19:37.760 --> 00:19:40.140
Does it have a specific stuff for Python


00:19:40.140 --> 00:19:42.860
and Python virtual environments and versioning like that?


00:19:42.860 --> 00:19:45.700
- Yes, because I don't use it,


00:19:45.700 --> 00:19:47.500
but there's built-in PyPI support.


00:19:47.500 --> 00:19:49.660
But if you use the Python launcher,


00:19:49.660 --> 00:19:52.540
I actually have an entry on it in the FAQ


00:19:52.540 --> 00:19:54.340
for the Python launcher to tell how to use


00:19:54.340 --> 00:19:56.500
the Python launcher to automatically tell you


00:19:56.500 --> 00:19:58.420
what version of Python is being used.


00:19:58.420 --> 00:20:01.460
And then you can configure the Python configuration to say,


00:20:01.460 --> 00:20:05.460
what should I trigger on for it to be considered a Python project?


00:20:05.460 --> 00:20:07.100
And it has a default list that's pretty good,


00:20:07.100 --> 00:20:10.100
like pyproject.toml, setup.py, setup.cfg,


00:20:10.100 --> 00:20:15.340
the things you would expect any repo or workspace or whatever


00:20:15.340 --> 00:20:20.220
to have to be a clear marker that there is Python that I care about here.


00:20:20.220 --> 00:20:24.820
And then the other thing is, there's also a way that if you use PY,


00:20:24.820 --> 00:20:26.820
You can also have it set up to auto trigger


00:20:26.820 --> 00:20:30.100
as long as you just have a .vimv directory, for instance,


00:20:30.100 --> 00:20:32.100
that contains your virtual environment.


00:20:32.100 --> 00:20:34.340
And then if you happen to use the Python launcher


00:20:34.340 --> 00:20:37.540
to be the way to query for what version of Python it is,


00:20:37.540 --> 00:20:39.540
it all magically just tells you what version


00:20:39.540 --> 00:20:41.540
your virtual environment is in.


00:20:41.540 --> 00:20:43.540
And so I actually use this with the Python launcher


00:20:43.540 --> 00:20:45.540
because it will always tell me exactly what will happen


00:20:45.540 --> 00:20:47.540
if I just type "py" at the command.


00:20:47.540 --> 00:20:49.540
Oh, nice.


00:20:49.540 --> 00:20:51.540
Yeah, that's awesome.


00:20:51.540 --> 00:20:53.540
And I know nerd fonts have been mentioned previously


00:20:53.540 --> 00:20:57.300
on this podcast, you'll notice that it has nerd font support.


00:20:57.300 --> 00:21:00.580
So if you get that installed, there's extra little fancy bits to it.


00:21:00.580 --> 00:21:01.780
You don't have to have it installed.


00:21:01.780 --> 00:21:06.740
A lot of those things will either turn into mojave or you can just turn them off.


00:21:06.740 --> 00:21:09.540
Yeah, but there's all sorts of stuff that this thing does.


00:21:09.540 --> 00:21:11.380
There's even real nice little subtle details.


00:21:11.380 --> 00:21:15.220
Like if you use Starship, if you're watching the live stream,


00:21:15.220 --> 00:21:20.340
you'll notice that the prompt is green when the command last command succeeded.


00:21:20.340 --> 00:21:22.260
But if it fails, it turns red.


00:21:22.260 --> 00:21:24.300
Like there's real nice little subtle touches


00:21:24.300 --> 00:21:26.900
of this tool that I really appreciate.


00:21:26.900 --> 00:21:28.220
- Yeah, I really like it too.


00:21:28.220 --> 00:21:29.140
It looks great.


00:21:29.140 --> 00:21:30.420
- I'm gonna try to check this out


00:21:30.420 --> 00:21:32.740
'cause I'm always using,


00:21:32.740 --> 00:21:36.780
I got some tools that I have to run from the command prompt


00:21:36.780 --> 00:21:41.060
but most of the time I'm in bash or something else.


00:21:41.060 --> 00:21:42.940
- Yeah, very nice.


00:21:42.940 --> 00:21:47.700
ZDocs says, "Using multi-line shell prompts


00:21:47.700 --> 00:21:51.140
and FZF are two of the better productivity improvements


00:21:51.140 --> 00:21:52.720
I've ever done.


00:21:52.720 --> 00:21:56.060
I wanted to highlight that specifically


00:21:56.060 --> 00:21:58.060
'cause I really like these multi-line prompts.


00:21:58.060 --> 00:22:00.620
It has all the details and then the prompt is below it,


00:22:00.620 --> 00:22:02.540
but I can't bring myself to use them yet.


00:22:02.540 --> 00:22:06.100
I don't know why, I'd rather have it more


00:22:06.100 --> 00:22:09.380
densely packed on one line.


00:22:09.380 --> 00:22:11.220
Where do you two stand on this?


00:22:11.220 --> 00:22:12.620
- I used to be that way.


00:22:12.620 --> 00:22:15.840
Actually, I used to be a Zs user


00:22:15.840 --> 00:22:17.380
before I became a Phish user.


00:22:17.380 --> 00:22:20.100
And even before this, I used to use left prompt


00:22:20.100 --> 00:22:23.140
and right prompt and I had a consistent left prompt,


00:22:23.140 --> 00:22:26.340
which was basically just the greater than symbol.


00:22:26.340 --> 00:22:30.020
Then I had my current working directory as my right prompt.


00:22:30.020 --> 00:22:32.980
At least the cursor position never shifted.


00:22:32.980 --> 00:22:34.900
I don't know about the rest of you, but I always find that.


00:22:34.900 --> 00:22:36.180
That would be nuts.


00:22:36.180 --> 00:22:39.300
Where's the start of my prompt now after I changed my directory?


00:22:39.300 --> 00:22:41.620
Having that as the right side was great.


00:22:41.620 --> 00:22:44.300
But then I saw this and I was like,


00:22:44.300 --> 00:22:45.900
"Okay, I've never loved this,


00:22:45.900 --> 00:22:48.300
but this is so nice and set up across


00:22:48.300 --> 00:22:51.580
the board for everything that I consistently used,


00:22:51.580 --> 00:22:56.220
like Rust, Python, NPM, whatever.


00:22:56.220 --> 00:22:57.500
I was like, okay, I'm gonna give it a shot.


00:22:57.500 --> 00:23:00.020
And I did it, and I've stuck with it,


00:23:00.020 --> 00:23:00.860
and I continue to like it.


00:23:00.860 --> 00:23:02.220
So I totally hear where you're coming from


00:23:02.220 --> 00:23:04.220
in terms of the density level,


00:23:04.220 --> 00:23:07.200
but it's just turned out to be way too nice


00:23:07.200 --> 00:23:11.020
with Starship for me to care about going back.


00:23:11.020 --> 00:23:14.260
Now, if I do go back, right, and I don't have Z,


00:23:14.260 --> 00:23:15.720
I don't have it set up for this,


00:23:15.720 --> 00:23:17.780
I actually have like my dot files set up


00:23:17.780 --> 00:23:19.780
so that my default Bash RC and all that,


00:23:19.780 --> 00:23:21.780
if I end up on a random machine,


00:23:21.780 --> 00:23:24.480
at least has that kind of prompting.


00:23:24.480 --> 00:23:26.780
But as soon as I'm on any machine


00:23:26.780 --> 00:23:29.480
where I know I'm going to be a fully set up environment,


00:23:29.480 --> 00:23:32.120
I just kick on Starship, I just don't care.


00:23:32.120 --> 00:23:34.520
Basically, I get it,


00:23:34.520 --> 00:23:37.260
but this was just too many benefits and I just let it go.


00:23:37.260 --> 00:23:39.260
And now I just don't notice it.


00:23:39.260 --> 00:23:41.260
Yeah, now you're used to it.


00:23:41.260 --> 00:23:43.260
I think I'm going to try to embrace it.


00:23:43.260 --> 00:23:45.260
Just run with it.


00:23:45.260 --> 00:23:47.780
And honestly, the resolution on all our screens


00:23:47.780 --> 00:23:49.780
is so high now compared to what it used to be


00:23:49.780 --> 00:23:51.200
back when I picked up that habit


00:23:51.200 --> 00:23:54.460
that the lack of vertical density,


00:23:54.460 --> 00:23:56.060
maybe it's 'cause I'm a black user,


00:23:56.060 --> 00:23:57.740
doesn't bother me so much anymore.


00:23:57.740 --> 00:23:58.580
- Yeah, that's true.


00:23:58.580 --> 00:24:01.260
I do have a 4K monitor, I suppose that,


00:24:01.260 --> 00:24:02.620
like a 32 inch 4K monitor.


00:24:02.620 --> 00:24:05.260
I could probably fit a terminal on it.


00:24:05.260 --> 00:24:06.600
- I suspect so.


00:24:06.600 --> 00:24:10.540
- It's actually kind of nice to have those like color stuff


00:24:10.540 --> 00:24:14.100
in the multi-line prompt


00:24:14.100 --> 00:24:16.980
to be able to kind of scroll up


00:24:16.980 --> 00:24:18.660
and see where the beginning of your line,


00:24:18.660 --> 00:24:20.460
your command started.


00:24:20.460 --> 00:24:21.540
'Cause it's easier.


00:24:21.540 --> 00:24:24.100
- It's like an HR, a horizontal rule.


00:24:24.100 --> 00:24:25.620
- Yeah, exactly.


00:24:25.620 --> 00:24:26.740
- For, yeah.


00:24:26.740 --> 00:24:29.100
Final thing, Jeremiah Page out there in live stream says,


00:24:29.100 --> 00:24:31.180
Starship is great, but I think you need Nerdfons


00:24:31.180 --> 00:24:32.000
for some of the plugins.


00:24:32.000 --> 00:24:32.840
Hold that thought.


00:24:32.840 --> 00:24:35.100
We'll be back to more Nerdfons later.


00:24:35.100 --> 00:24:36.180
- But that is correct.


00:24:36.180 --> 00:24:37.020
Some of the things,


00:24:37.020 --> 00:24:39.060
like if you're watching the live stream,


00:24:39.060 --> 00:24:41.660
there's a nice little symbol for like a branch


00:24:41.660 --> 00:24:42.580
next to the get stuff.


00:24:42.580 --> 00:24:44.360
If you have the power monitoring one


00:24:44.360 --> 00:24:45.640
that tells you like your battery's low,


00:24:45.640 --> 00:24:47.180
it uses nerd fonts to show that,


00:24:47.180 --> 00:24:50.160
but Michael's foreshadowing something coming later.


00:24:50.160 --> 00:24:51.880
- Yes, indeed.


00:24:51.880 --> 00:24:54.680
All right, let's talk about James path.


00:24:54.680 --> 00:24:57.400
Now, Brian, one of the challenges we always have on the show


00:24:57.400 --> 00:25:00.680
is we have these acronyms for packages


00:25:00.680 --> 00:25:02.680
and then we have to speak them.


00:25:02.680 --> 00:25:04.280
And we've never spoken to the person


00:25:04.280 --> 00:25:06.440
who creates it or named it.


00:25:06.440 --> 00:25:08.640
So we always, I'm sure we wreck the names


00:25:08.640 --> 00:25:12.120
of so many packages and let's just do a blanket apology.


00:25:12.120 --> 00:25:13.920
But this one is called James Path.


00:25:13.920 --> 00:25:18.920
And then I know because it says J-M-E-S-P-A-T-H,


00:25:18.920 --> 00:25:21.840
pronounced James Path, allows you to,


00:25:21.840 --> 00:25:23.860
like, yes, this is another new thing


00:25:23.860 --> 00:25:25.520
I'm starting to really like,


00:25:25.520 --> 00:25:28.560
allows you to declaratively specify


00:25:28.560 --> 00:25:31.120
how to extract elements from a JSON document.


00:25:31.120 --> 00:25:36.120
So instead of going through and sort of going,


00:25:36.120 --> 00:25:38.360
you know, parsing up something as JSON,


00:25:38.360 --> 00:25:40.400
turning to a dictionary and then traversing it


00:25:40.400 --> 00:25:43.000
with indexes and keys and such,


00:25:43.000 --> 00:25:45.920
there's a whole lot of interesting things you can do


00:25:45.920 --> 00:25:47.760
to quickly get at elements.


00:25:47.760 --> 00:25:49.060
So for example,


00:25:49.060 --> 00:25:51.500
you can just,


00:25:51.500 --> 00:25:55.200
if you had the dictionary that had key foo


00:25:55.200 --> 00:25:58.260
and then inside there,


00:25:58.260 --> 00:26:00.820
there was another dictionary that had a key bar


00:26:00.820 --> 00:26:02.820
and then that had a value baz,


00:26:02.820 --> 00:26:06.040
you could just say foo.bar and it'll give you baz,


00:26:06.040 --> 00:26:08.000
which is kind of nice.


00:26:08.000 --> 00:26:11.940
You can also do that with arrays,


00:26:11.940 --> 00:26:13.540
although this is actually not doing anything.


00:26:13.540 --> 00:26:16.180
It's just giving you back the list


00:26:16.180 --> 00:26:18.660
and then you're indexing into it, so whatever.


00:26:18.660 --> 00:26:20.740
But you can do things like star on it.


00:26:20.740 --> 00:26:22.880
So for example, if you had foo bar


00:26:22.880 --> 00:26:25.580
and then bar was an array,


00:26:25.580 --> 00:26:29.540
you can say like foo.bar, a bracket star, dot name,


00:26:29.540 --> 00:26:33.060
and it'll give you all the names out of the sub thing,


00:26:33.060 --> 00:26:36.700
the sub dictionaries in the list that bar points at.


00:26:36.700 --> 00:26:40.340
So there's these cool, almost like SQL-like things.


00:26:40.340 --> 00:26:43.700
You can also do negative indexing into it,


00:26:43.700 --> 00:26:44.800
which is pretty nice.


00:26:44.800 --> 00:26:50.840
You can do star, like foo.star.name for hashes


00:26:50.840 --> 00:26:56.340
to get the values out, kind of like a set or something.


00:26:56.340 --> 00:26:57.780
So that's pretty nice.


00:26:57.780 --> 00:26:59.420
And yeah, it's pretty interesting.


00:26:59.420 --> 00:27:03.380
This one comes to us from Josh Thurston.


00:27:03.380 --> 00:27:05.260
So thanks for that.


00:27:05.260 --> 00:27:07.500
He said he was working with all these sort of


00:27:07.500 --> 00:27:11.020
arbitrary nested JSON documents


00:27:11.020 --> 00:27:13.040
and it was really handy for that.


00:27:13.040 --> 00:27:16.220
So, you look at this code and I'm sure, Brett,


00:27:16.220 --> 00:27:18.340
you're thinking that's not Python, right?


00:27:18.340 --> 00:27:20.980
- No, actually, I'm wondering if the query syntax


00:27:20.980 --> 00:27:22.560
is the same as JQ.


00:27:22.560 --> 00:27:25.020
And do people know what JQ is?


00:27:25.020 --> 00:27:27.500
- I don't know what JQ is, yeah, interesting.


00:27:27.500 --> 00:27:31.500
- So, JQ is a command line tool.


00:27:31.500 --> 00:27:35.500
So literally, it's just jq Juliet Quebec


00:27:35.500 --> 00:27:40.220
that is designed to actually take in JSON,


00:27:40.220 --> 00:27:42.260
more or less use the same kind of syntax


00:27:42.260 --> 00:27:45.980
as the query selector and the browser for CSS selectors


00:27:45.980 --> 00:27:47.700
and query your JSON.


00:27:47.700 --> 00:27:49.820
I think it's meant a lot for like tools,


00:27:49.820 --> 00:27:53.380
if you're using like Http or curl or whatever to query


00:27:53.380 --> 00:27:55.620
some like REST API, that's going to give you back JSON


00:27:55.620 --> 00:27:58.100
and then just try to find something out of it.


00:27:58.100 --> 00:27:59.860
And it looks pretty similar.


00:27:59.860 --> 00:28:05.000
So I'm thinking that this is maybe kind of just a Python packaging approach to the same syntax,


00:28:05.000 --> 00:28:08.080
which is neat because it means if you know one tool, hopefully it'll work for the other.


00:28:08.080 --> 00:28:09.920
Yeah, right. Yeah, it could be.


00:28:09.920 --> 00:28:13.340
So you should think of it not as syntax that you write,


00:28:13.340 --> 00:28:16.300
but more almost like a regular expression.


00:28:16.300 --> 00:28:20.420
So you would import JamesPath, and then you say expression equals JamesPath compile,


00:28:20.420 --> 00:28:23.800
and then you give it a string, which is these things I've been describing,


00:28:23.800 --> 00:28:28.940
and then you can tell it to search or execute queries against things.


00:28:28.940 --> 00:28:30.900
So a lot of neat stuff you can do there.


00:28:30.900 --> 00:28:33.180
You can even add custom functions


00:28:33.180 --> 00:28:36.300
that can become part of this query syntax.


00:28:36.300 --> 00:28:39.820
So if you create a class that derives from functions


00:28:39.820 --> 00:28:40.860
that comes out of that library,


00:28:40.860 --> 00:28:43.040
you can have things like unique letters


00:28:43.040 --> 00:28:45.180
and what you could do in there, say,


00:28:45.180 --> 00:28:48.420
given a string, I would like to do a set on the string


00:28:48.420 --> 00:28:49.620
and then turn it back into a string


00:28:49.620 --> 00:28:52.660
so it only shows you the letters involved,


00:28:52.660 --> 00:28:57.160
not necessarily with duplication, right?


00:28:57.160 --> 00:28:58.900
And so then if you create that,


00:28:58.900 --> 00:29:01.340
Then you can do things like, when you do your search,


00:29:01.340 --> 00:29:05.060
you can do foo.bar pipe unique letters,


00:29:05.060 --> 00:29:06.980
and you pass the parameters over.


00:29:06.980 --> 00:29:10.380
And it'll give you basically the result of those values,


00:29:10.380 --> 00:29:12.980
but then applying these transforms and stuff to it.


00:29:12.980 --> 00:29:15.460
- Cool.


00:29:15.460 --> 00:29:17.180
- So yeah, pretty neat.


00:29:17.180 --> 00:29:21.840
If you got a lot of traversing dictionaries


00:29:21.840 --> 00:29:22.680
and stuff like that,


00:29:22.680 --> 00:29:24.580
and you kind of want to treat them like SQL,


00:29:24.580 --> 00:29:27.620
I feel like this is sort of along those lines.


00:29:27.620 --> 00:29:28.960
people can check that out.


00:29:28.960 --> 00:29:33.860
All right, Brian, over to you.


00:29:33.860 --> 00:29:37.320
- Yeah, I wanted to cover,


00:29:37.320 --> 00:29:39.340
this was announced last week, I think.


00:29:39.340 --> 00:29:41.720
There's a tool called Pedalboard.


00:29:41.720 --> 00:29:45.660
This is a library that comes from Spotify.


00:29:45.660 --> 00:29:50.540
And it's for manipulating audio files.


00:29:50.540 --> 00:29:54.360
But in the introductory article,


00:29:54.360 --> 00:29:58.660
It says the power and speed and sound of a DAW.


00:29:58.660 --> 00:30:01.240
I never knew how to pronounce that one either.


00:30:01.240 --> 00:30:04.840
Digital, what is that? Digital audio something.


00:30:04.840 --> 00:30:06.760
- Workstation? Yeah, digital audio workstation.


00:30:06.760 --> 00:30:08.840
A DAW, I think it may be a DAW.


00:30:08.840 --> 00:30:10.340
- A DAW, I don't know.


00:30:10.340 --> 00:30:11.180
So what do you use?


00:30:11.180 --> 00:30:14.260
I use Logic Pro usually.


00:30:14.260 --> 00:30:15.960
So something like that would be a DAW.


00:30:15.960 --> 00:30:17.920
- Yeah, I use Adobe Audition, yeah.


00:30:17.920 --> 00:30:21.000
- So there's a lot of stuff you can do


00:30:21.000 --> 00:30:22.800
that are just common things


00:30:22.800 --> 00:30:24.160
that you're gonna do to all files.


00:30:24.160 --> 00:30:25.720
So it'd be kind of neat to automate that.


00:30:25.720 --> 00:30:28.920
So things I'm thinking about are things like a compressor,


00:30:28.920 --> 00:30:31.040
a high-pass filter, a low-pass filter.


00:30:31.040 --> 00:30:33.400
But this thing has a whole bunch of other transforms


00:30:33.400 --> 00:30:37.400
you can do like convolutions and chorus


00:30:37.400 --> 00:30:41.840
and some distortions and gain if you want to make it louder,


00:30:41.840 --> 00:30:43.720
some reverb, a high-pass filter,


00:30:43.720 --> 00:30:45.740
and then stuff I don't even know what it is,


00:30:45.740 --> 00:30:47.440
a ladder filter, I don't know what that is.


00:30:47.440 --> 00:30:49.640
Phaser? Phaser, that sounds neat.


00:30:49.640 --> 00:30:50.980
- Yeah, it does.


00:30:50.980 --> 00:30:53.420
Oh, shit, Spotty!


00:30:53.420 --> 00:30:57.120
So I definitely want to try that out.


00:30:57.120 --> 00:30:58.940
If you're working with audio files,


00:30:58.940 --> 00:31:02.160
I think it would be a fun thing.


00:31:02.160 --> 00:31:06.120
We've linked to the GitHub repo for it,


00:31:06.120 --> 00:31:08.260
which is nice, it's completely open source.


00:31:08.260 --> 00:31:11.660
It says it also has some cool things like


00:31:11.660 --> 00:31:14.860
plugins for VST3 and audio unit,


00:31:14.860 --> 00:31:17.100
which I have no idea what those are.


00:31:17.100 --> 00:31:23.280
But also, one of the things with audio is it


00:31:23.280 --> 00:31:24.280
It takes a while.


00:31:24.280 --> 00:31:26.860
So there are speed enhancements in this.


00:31:26.860 --> 00:31:29.960
So it says it really doesn't take that long to use it.


00:31:29.960 --> 00:31:34.140
It takes advantage of your CPU cores, which is neat.


00:31:34.140 --> 00:31:40.700
Also linking to an article to introduce it, and I got to warn people, there's an image


00:31:40.700 --> 00:31:43.980
at the top which totally messed with my head.


00:31:43.980 --> 00:31:48.800
Because I mean, it's just, it triggers me with all the different flashing colors.


00:31:48.800 --> 00:31:50.540
So be careful with that.


00:31:50.540 --> 00:31:51.540
Scroll past that quick.


00:31:51.540 --> 00:31:54.740
Other than that, it's a good article on what it is.


00:31:54.740 --> 00:31:58.100
Some graphics, and I don't quite get,


00:31:58.100 --> 00:32:03.020
there's some graphics on how it works and I don't quite get what the graphics mean.


00:32:03.020 --> 00:32:05.780
Like the noise gate really doesn't tell me much.


00:32:05.780 --> 00:32:07.180
>> I love the noise gate.


00:32:07.180 --> 00:32:10.300
That's one of the biggest tricks to sound good actually.


00:32:10.300 --> 00:32:14.180
>> Yeah. Important enough for me that I've got


00:32:14.180 --> 00:32:16.900
a hardware noise gate in my studio.


00:32:16.900 --> 00:32:18.020
>> Nice.


00:32:18.020 --> 00:32:21.940
Anyway, cool library. Check it out.


00:32:21.940 --> 00:32:24.180
>> Yes. If you want to do audio transformation,


00:32:24.180 --> 00:32:26.900
if you want to basically write Python code that does like


00:32:26.900 --> 00:32:30.100
audition or the one you said, Brian.


00:32:30.100 --> 00:32:32.340
>> Well, I mean, and especially with automation.


00:32:32.340 --> 00:32:35.420
So if you've got a whole bunch of files you're dealing with,


00:32:35.420 --> 00:32:38.300
and you want to make sure that they're all the same level,


00:32:38.300 --> 00:32:41.500
you definitely want to automate that and not try to.


00:32:41.500 --> 00:32:46.020
I know there's ways to automate with some of your other tools too,


00:32:46.020 --> 00:32:48.020
But it's kind of cool to have this.


00:32:48.020 --> 00:32:49.860
Yeah, definitely.


00:32:49.860 --> 00:32:56.980
The only thing I have to contribute is going back to Brian's previous link


00:32:56.980 --> 00:32:58.820
about good documentation.


00:32:58.820 --> 00:33:03.140
While you two were talking, I just submitted a PR to fix the triple backticks


00:33:03.140 --> 00:33:04.980
that I accidentally left in the readme.


00:33:04.980 --> 00:33:07.780
So just to give feedback to people,


00:33:07.780 --> 00:33:09.940
trying to fix documentation is always appreciated


00:33:09.940 --> 00:33:11.780
and it's usually something you can do pretty quick,


00:33:11.780 --> 00:33:16.700
especially with either the pencil editor in GitHub


00:33:16.700 --> 00:33:18.820
or just hitting the dot to use github.dev


00:33:18.820 --> 00:33:22.000
if you need a little bit fancier support,


00:33:22.000 --> 00:33:22.960
and just send that PR.


00:33:22.960 --> 00:33:26.200
And I mean, most maintainers would appreciate it.


00:33:26.200 --> 00:33:29.040
As we all know, lots of docs are pretty boring.


00:33:29.040 --> 00:33:31.720
- If you submit an issue or send an email


00:33:31.720 --> 00:33:35.680
and say this part of your docs needs this misspelling fixed


00:33:35.680 --> 00:33:38.560
or this link has an extra trailing slash


00:33:38.560 --> 00:33:40.320
that makes it not work, that's work.


00:33:40.320 --> 00:33:43.720
If you submit a PR, that's joy, right?


00:33:43.720 --> 00:33:45.360
You just say, I accept.


00:33:45.360 --> 00:33:46.200
Okay, you fixed it.


00:33:46.200 --> 00:33:47.040
Thank you.


00:33:47.040 --> 00:33:47.860
I'll just carry on, right?


00:33:47.860 --> 00:33:49.160
Rather, oh, geez, I got another thing to do.


00:33:49.160 --> 00:33:50.500
So yeah, that's great.


00:33:50.500 --> 00:33:52.300
- Nice catch.


00:33:52.300 --> 00:33:53.700
It took me a while to see that.


00:33:53.700 --> 00:33:57.000
- Yeah, well, I mean, some people ask me like,


00:33:57.000 --> 00:33:58.540
how do you have so many contributions


00:33:58.540 --> 00:33:59.840
to so many repositories?


00:33:59.840 --> 00:34:02.220
That's how, literally, if you just read docs,


00:34:02.220 --> 00:34:04.080
anytime you find anything a little off,


00:34:04.080 --> 00:34:06.520
just take the time to just submit that PR


00:34:06.520 --> 00:34:08.620
and most of them get in, not all of them do,


00:34:08.620 --> 00:34:14.780
but honestly that's enough to just kind of help out and honestly you just suddenly end up contributing to I think I'm up to


00:34:14.780 --> 00:34:18.720
160 something repos on github at this point. Wow, that's awesome


00:34:18.720 --> 00:34:22.980
Okay, so


00:34:22.980 --> 00:34:28.840
Michael said it was nice sometimes to have core devs. We'll see if this doesn't cause you to regret having core devs on the podcast


00:34:28.840 --> 00:34:30.840
So I'm gonna use this as story time


00:34:30.840 --> 00:34:36.860
And just kind of explain how processes work in terms of packaging peps. So


00:34:36.860 --> 00:34:39.220
So, excuse me.


00:34:39.220 --> 00:34:44.420
Starting about six months ago,


00:34:44.420 --> 00:34:46.620
I took it upon myself to try to come up


00:34:46.620 --> 00:34:48.720
with a lock file format for Python.


00:34:48.720 --> 00:34:50.740
It seemed like it was kind of a gap we had


00:34:50.740 --> 00:34:52.460
where every multiple tools were trying


00:34:52.460 --> 00:34:54.580
to solve the same problem.


00:34:54.580 --> 00:34:55.940
And that felt like something


00:34:55.940 --> 00:34:58.300
that we should try to avoid if possible.


00:34:58.300 --> 00:35:01.620
Coming from speaking as the dev manager


00:35:01.620 --> 00:35:03.720
for the Python extension for VS Code,


00:35:03.720 --> 00:35:07.800
having each bespoke tool such as PipM, Poetry,


00:35:07.800 --> 00:35:10.760
requirements.txt files, even through pip-tools, right?


00:35:10.760 --> 00:35:13.040
Having to support each of those tools individually


00:35:13.040 --> 00:35:14.600
is a drag, right?


00:35:14.600 --> 00:35:16.640
Like it takes a lot of time and effort


00:35:16.640 --> 00:35:18.800
to figure out what to do for each tool.


00:35:18.800 --> 00:35:20.800
If the tools update, suddenly we break.


00:35:20.800 --> 00:35:22.320
So it's a bit tricky.


00:35:22.320 --> 00:35:26.200
Making calls through CLI is kind of an annoyance too,


00:35:26.200 --> 00:35:28.520
'cause we gotta make sure that they're,


00:35:28.520 --> 00:35:29.920
we know how to use their API,


00:35:29.920 --> 00:35:31.680
what they report out is consistent,


00:35:31.680 --> 00:35:32.520
that they don't change it,


00:35:32.520 --> 00:35:35.200
because not all tools consider their output of their CLI


00:35:35.200 --> 00:35:38.080
part of their stable API that they maintain.


00:35:38.080 --> 00:35:39.320
Anyway, there's a lot of drawbacks.


00:35:39.320 --> 00:35:42.400
So I tried to decide to be silly


00:35:42.400 --> 00:35:44.400
and take it upon myself to see if I can come up with a way


00:35:44.400 --> 00:35:47.720
to get all the tools to kind of rally around something.


00:35:47.720 --> 00:35:49.720
There's also needs for like cloud, right?


00:35:49.720 --> 00:35:52.360
Like if you upload something to Azure Functions,


00:35:52.360 --> 00:35:54.440
they want to do the install for you,


00:35:54.440 --> 00:35:56.780
but you need to be able to tell them what you want installed.


00:35:56.780 --> 00:35:58.880
So lock files, good thing, right?


00:35:58.880 --> 00:36:00.520
Just in general.


00:36:00.520 --> 00:36:03.120
So I spent six months talking behind the scenes


00:36:03.120 --> 00:36:03.960
with various people.


00:36:03.960 --> 00:36:08.960
Originally it was me, Pradyun and Zuping from Pip.


00:36:08.960 --> 00:36:11.540
We came up with a lock file spec,


00:36:11.540 --> 00:36:15.980
and then we invited Sebastian and Frost


00:36:15.980 --> 00:36:19.520
from Poetry and PDM, respectively.


00:36:19.520 --> 00:36:23.360
And they said, "That's not gonna work for us."


00:36:23.360 --> 00:36:24.200
We said, "Why?"


00:36:24.200 --> 00:36:25.760
And it's like, "Well, your lock file was defined


00:36:25.760 --> 00:36:28.000
"very specifically for a certain platform."


00:36:28.000 --> 00:36:29.280
Right, like think of wheel tags, right?


00:36:29.280 --> 00:36:32.660
It says what Python version, what ABI do you support,


00:36:32.660 --> 00:36:34.100
and what OS are you on?


00:36:34.100 --> 00:36:36.760
That's the platform from what I'm speaking from.


00:36:36.760 --> 00:36:38.140
It's like, that's great,


00:36:38.140 --> 00:36:41.540
but we want platform agnostic lock files.


00:36:41.540 --> 00:36:43.020
If you ever crack open the lock files


00:36:43.020 --> 00:36:44.980
that Poetry spits out,


00:36:44.980 --> 00:36:46.940
they actually work no matter what OS you're on.


00:36:46.940 --> 00:36:48.100
And it was by design.


00:36:48.100 --> 00:36:50.780
Sebastian wanted to make it so that it didn't matter.


00:36:50.780 --> 00:36:53.420
And actually, I've heard a good example from Produne


00:36:53.420 --> 00:36:56.580
where it's like, let's say you're doing PyWeek,


00:36:56.580 --> 00:36:58.080
and you're doing a game.


00:36:58.080 --> 00:37:08.580
If you're, you might be developing on Linux, but if you want to give it to your teammate who you're working with during PyWeek and they're on Mac, you want a way to be consistent on what you work on.


00:37:08.580 --> 00:37:13.540
And then if the judges are on Linux, you're on a whole other place or Windows or whatever, right?


00:37:13.540 --> 00:37:17.300
So there is a use case there for platform agnostic log files.


00:37:17.300 --> 00:37:19.500
So we, so we try to add that back in.


00:37:19.500 --> 00:37:24.180
We took this public to discuss.python.org


00:37:24.180 --> 00:37:26.260
where all the packaging discussions happened.


00:37:26.260 --> 00:37:31.260
And it led to 152 comments on a thread starting July 29th.


00:37:31.260 --> 00:37:36.180
It's actually, it's more like, oh God, eight months ago.


00:37:36.180 --> 00:37:38.620
So this led to a whole nother discussion, right?


00:37:38.620 --> 00:37:40.580
About people going like, okay, the clarification.


00:37:40.580 --> 00:37:42.900
And it ranged right all the way from


00:37:42.900 --> 00:37:44.860
the title's not clear enough


00:37:44.860 --> 00:37:47.340
to like real nitty gritty details.


00:37:47.340 --> 00:37:50.860
And it's now led to us going back,


00:37:50.860 --> 00:37:53.380
having discussions with the same people,


00:37:53.380 --> 00:37:57.580
plus some other people who participated here,


00:37:57.580 --> 00:37:59.380
who made good comments,


00:37:59.380 --> 00:38:01.500
to try to come back with another approach


00:38:01.500 --> 00:38:03.520
that's a bit more from the ground up,


00:38:03.520 --> 00:38:05.220
covering everything versus what we had before,


00:38:05.220 --> 00:38:07.060
where it was just a platform specific lock file,


00:38:07.060 --> 00:38:09.340
and then we kind of bolted on the agnostic bit


00:38:09.340 --> 00:38:11.460
and trying to design it from scratch.


00:38:11.460 --> 00:38:13.300
But the key point here I want to make is,


00:38:13.300 --> 00:38:15.540
you hear people sometimes go on about,


00:38:15.540 --> 00:38:16.940
oh, I really want lock files, right?


00:38:16.940 --> 00:38:18.660
Like I've talked about this publicly


00:38:18.660 --> 00:38:22.780
and I think I talked about this, PyCascades maybe,


00:38:22.780 --> 00:38:26.000
I mentioned it during the steering council,


00:38:26.000 --> 00:38:27.340
or maybe it was PyCon.


00:38:27.340 --> 00:38:28.660
And my wife, Andrea,


00:38:28.660 --> 00:38:31.840
who said she might actually be in the live stream,


00:38:31.840 --> 00:38:33.420
said, "Oh my God, all the comments about


00:38:33.420 --> 00:38:35.460
when you mentioned lock files were so, so positive."


00:38:35.460 --> 00:38:37.380
I was like, "Okay, cool."


00:38:37.380 --> 00:38:39.380
It's surprisingly hard to make this stuff work, right?


00:38:39.380 --> 00:38:41.580
Like everyone thinks it's a snap your finger,


00:38:41.580 --> 00:38:44.220
someone has an idea, you just get it done.


00:38:44.220 --> 00:38:46.120
But there's a lot of use cases here, right?


00:38:46.120 --> 00:38:49.520
And especially with packaging, you constantly hear people go like, "Oh, packaging in Python


00:38:49.520 --> 00:38:50.520
is so bad."


00:38:50.520 --> 00:38:53.120
Well, first of all, most people are out of date.


00:38:53.120 --> 00:38:57.040
Like, Brian's been really great about having me and other people come on Test & Code, for


00:38:57.040 --> 00:39:01.120
instance, specifically to talk about this past packaging stuff to keep people up to


00:39:01.120 --> 00:39:02.120
date.


00:39:02.120 --> 00:39:06.480
So there's a lot going on, but you need to try to keep up.


00:39:06.480 --> 00:39:10.880
But on top of that, it's just hard to make any changes because there's so much legacy


00:39:10.880 --> 00:39:11.880
out there.


00:39:11.880 --> 00:39:13.760
Everyone's got their own workflow at this point, right?


00:39:13.760 --> 00:39:17.520
30 year old language that's had some form of packaging


00:39:17.520 --> 00:39:20.400
for like over 20 of it.


00:39:20.400 --> 00:39:21.880
Everyone's got the way they want to work


00:39:21.880 --> 00:39:24.280
and no one likes to have it changed on them,


00:39:24.280 --> 00:39:26.220
like especially your workflow, right?


00:39:26.220 --> 00:39:29.020
Like try telling someone who's using VS Code,


00:39:29.020 --> 00:39:32.520
like, yeah, we don't think you're doing it the right way.


00:39:32.520 --> 00:39:33.720
Does not fly, right?


00:39:33.720 --> 00:39:34.680
It just does not work.


00:39:34.680 --> 00:39:36.160
Everyone wants to work the way they want to work,


00:39:36.160 --> 00:39:37.240
which is totally fine,


00:39:37.240 --> 00:39:38.320
but it also makes trying to come up


00:39:38.320 --> 00:39:40.280
with a standard really hard.


00:39:40.280 --> 00:39:42.800
So the point I'm trying to make here


00:39:42.800 --> 00:39:45.700
is try to be understanding when you work with packaging in Python.


00:39:45.700 --> 00:39:48.500
Not only is Python challenging on its own due to the amount of C code,


00:39:48.500 --> 00:39:51.800
Fortran code, all the crazy stuff that people used,


00:39:51.800 --> 00:39:55.200
thanks to us being the glue code, the glue language of the world.


00:39:55.200 --> 00:39:57.800
But on top of that, there's a lot of legacy.


00:39:57.800 --> 00:40:00.140
Everyone has something they ask for.


00:40:00.140 --> 00:40:04.200
And people are working very diligently to continue to try to improve it.


00:40:04.200 --> 00:40:07.700
But do understand that there's a lot of work going on to try to make it better.


00:40:07.700 --> 00:40:10.240
So please try to be understanding on Twitter,


00:40:10.240 --> 00:40:12.040
or wherever else you're going,


00:40:12.040 --> 00:40:14.400
oh my God, packaging and Python is so bad.


00:40:14.400 --> 00:40:17.360
- The places where outreach was the best for us.


00:40:17.360 --> 00:40:18.200
- Yeah, yeah.


00:40:18.200 --> 00:40:19.240
So that's what really here.


00:40:19.240 --> 00:40:21.320
So A, lock files are hopefully coming.


00:40:21.320 --> 00:40:23.280
I am working on a V2 of this PEP.


00:40:23.280 --> 00:40:26.180
Probably go public with that.


00:40:26.180 --> 00:40:28.200
I'm gonna guess sometime next month.


00:40:28.200 --> 00:40:30.800
- And these will be independent of things like poetry


00:40:30.800 --> 00:40:34.480
and pip-inf and just pip and stuff like that or?


00:40:34.480 --> 00:40:35.400
- If we're lucky, right?


00:40:35.400 --> 00:40:39.760
Like the key point here is we can't require this,


00:40:39.760 --> 00:40:41.880
But the hope is whatever solution we come up with


00:40:41.880 --> 00:40:44.680
will be good enough for those tools to rally behind.


00:40:44.680 --> 00:40:48.480
None of this is like an edict from on high to say,


00:40:48.480 --> 00:40:49.980
"All packaging tools must use this."


00:40:49.980 --> 00:40:52.480
The idea with all this has to be,


00:40:52.480 --> 00:40:54.180
what's the carrot for the tools?


00:40:54.180 --> 00:40:55.380
How are we making things better,


00:40:55.380 --> 00:40:57.520
both for the community, but for the tools themselves?


00:40:57.520 --> 00:40:59.880
Now, it can be, we make it so great from the community


00:40:59.880 --> 00:41:02.180
that the tools feel pressure to support it.


00:41:02.180 --> 00:41:04.420
But when you're talking from this perspective,


00:41:04.420 --> 00:41:06.220
the first thing you're dealing with is the tools.


00:41:06.220 --> 00:41:07.660
So it's trying to make the tools happy


00:41:07.660 --> 00:41:10.500
because then eventually the users also become happy.


00:41:10.500 --> 00:41:11.660
So we'll have something.


00:41:11.660 --> 00:41:14.600
At worst, my suspicion is, at absolute worst,


00:41:14.600 --> 00:41:17.640
we'll have platform-specific log files come out of this PEP,


00:41:17.640 --> 00:41:19.200
but my hope is we can get platform agnostic


00:41:19.200 --> 00:41:20.440
and get all the other tools on board


00:41:20.440 --> 00:41:22.380
so that everyone gets what they want and need,


00:41:22.380 --> 00:41:25.580
and we can service everyone's needs.


00:41:25.580 --> 00:41:26.420
- Nice.


00:41:26.420 --> 00:41:29.420
- But the key point here is it's being worked on,


00:41:29.420 --> 00:41:31.820
it's taken a long time, it's going to take even longer,


00:41:31.820 --> 00:41:34.220
so understand that when people say,


00:41:34.220 --> 00:41:36.860
"Oh, why can't packaging get better faster?"


00:41:36.860 --> 00:41:38.700
It takes a long time, right?


00:41:38.700 --> 00:41:44.540
Like literally, I've been working on packaging as my focus for Python stuff for years now, right?


00:41:44.540 --> 00:41:49.260
It's not a fast process because there's a lot of people involved, a lot of projects.


00:41:49.260 --> 00:41:50.540
Everyone has their needs.


00:41:50.540 --> 00:41:54.060
So just people just need to be patient, but do understand things are getting better consistently.


00:41:54.060 --> 00:41:58.540
That ends my rant to hopefully not make you all regret having me on.


00:41:58.540 --> 00:42:00.060
No, that's great. I love the insight.


00:42:00.060 --> 00:42:05.420
The only thing with packaging that I want to bring up is I wish it didn't change all the time.


00:42:05.420 --> 00:42:07.680
(laughing)


00:42:07.680 --> 00:42:12.100
Sorry, I couldn't resist.


00:42:12.100 --> 00:42:14.180
No, I think things are getting better


00:42:14.180 --> 00:42:15.900
and I like the direction.


00:42:15.900 --> 00:42:17.780
So, but cool.


00:42:17.780 --> 00:42:20.320
- Yeah, I mean, my grand unified goal


00:42:20.320 --> 00:42:21.780
when I got involved with packaging


00:42:21.780 --> 00:42:23.460
really was to try to drive everything


00:42:23.460 --> 00:42:25.620
towards standards and specs, right?


00:42:25.620 --> 00:42:27.640
Like I have a project called Mouse Bender


00:42:27.640 --> 00:42:32.160
after the clerk from the cheese sketch, right?


00:42:33.860 --> 00:42:35.460
If you don't know the Monty Python sketch,


00:42:35.460 --> 00:42:38.260
it's when one of them walks in


00:42:38.260 --> 00:42:40.460
and just starts to ask for every cheese they can think of


00:42:40.460 --> 00:42:42.820
and they don't have any in the cheese monger shop.


00:42:42.820 --> 00:42:44.300
So, stay tuned.


00:42:44.300 --> 00:42:46.460
Anyway, I created an outline of what does it take


00:42:46.460 --> 00:42:50.540
to go from I want to install Django 3.2.7


00:42:50.540 --> 00:42:52.260
down to actually eating files on desk.


00:42:52.260 --> 00:42:54.700
And I figured out where there was a spec


00:42:54.700 --> 00:42:56.580
and where there was a library back in that spec


00:42:56.580 --> 00:42:58.620
and where the gaps were and I've just been trying to plug it


00:42:58.620 --> 00:43:00.100
and this is probably the last one, right?


00:43:00.100 --> 00:43:03.620
Because more or less this takes care of the pip-tools,


00:43:03.620 --> 00:43:08.160
PipM poetry kind of give me a set of locked things


00:43:08.160 --> 00:43:10.900
and let me be able to reproduce my environment.


00:43:10.900 --> 00:43:13.660
After this, I think I'm more or less,


00:43:13.660 --> 00:43:16.460
I'm personally probably going to be done with packaging.


00:43:16.460 --> 00:43:19.580
After this is moving on to WebAssembly,


00:43:19.580 --> 00:43:21.540
which hopefully make Michael happy.


00:43:21.540 --> 00:43:22.380
- Oh yeah.


00:43:22.380 --> 00:43:23.780
- And then probably that'll lead into,


00:43:23.780 --> 00:43:25.540
is there a way to potentially start distributing


00:43:25.540 --> 00:43:28.320
like a self-contained binary for Python


00:43:28.320 --> 00:43:31.120
or just try to help with Python as a Python,


00:43:31.120 --> 00:43:34.080
CPython interpreter distribution kind of solution.


00:43:34.080 --> 00:43:37.780
- So is the new PEP going to be 666


00:43:37.780 --> 00:43:39.340
or was that already taken?


00:43:39.340 --> 00:43:44.340
- No, actually 666 is taken.


00:43:44.340 --> 00:43:47.420
It's been taken for over a decade.


00:43:47.420 --> 00:43:50.060
It was purposely done to be immediately rejected


00:43:50.060 --> 00:43:52.620
'cause it said you should be able to mix tabs and spaces.


00:43:52.620 --> 00:43:54.860
So that was written to make people stop asking for that


00:43:54.860 --> 00:43:56.500
and it got rejected immediately.


00:43:56.500 --> 00:43:57.340
- Okay, okay.


00:43:57.340 --> 00:44:01.020
- But no, I'll just, since this didn't get accepted,


00:44:01.020 --> 00:44:02.920
I'm just gonna rewrite it in place.


00:44:02.920 --> 00:44:04.400
The goals are the same.


00:44:04.400 --> 00:44:06.700
There's no need to have to do yet another pep.


00:44:06.700 --> 00:44:09.300
So since it's draft, I'm just gonna basically


00:44:09.300 --> 00:44:10.400
just get it and redo it.


00:44:10.400 --> 00:44:12.560
And since the goal is the same,


00:44:12.560 --> 00:44:14.600
I'm just gonna reduce the number.


00:44:14.600 --> 00:44:15.600
- Okay.


00:44:15.600 --> 00:44:16.960
- Nice. Well, thanks for working on this


00:44:16.960 --> 00:44:19.000
'cause it definitely is important.


00:44:19.000 --> 00:44:19.840
- Yeah.


00:44:19.840 --> 00:44:23.680
Welcome. Hopefully it'll lead to something.


00:44:23.680 --> 00:44:25.480
Otherwise I've had a lot of interesting conversations


00:44:25.480 --> 00:44:27.880
about how people do and don't wanna lock things.


00:44:27.880 --> 00:44:30.120
(laughing)


00:44:30.120 --> 00:44:31.960
- Brian, back to you.


00:44:31.960 --> 00:44:32.960
- Back to me?


00:44:32.960 --> 00:44:35.360
- Yeah, for extras.


00:44:35.360 --> 00:44:36.560
- Oh, for extras.


00:44:36.560 --> 00:44:37.660
- You got any extras?


00:44:37.660 --> 00:44:41.060
- Yeah, so I've got one, I'll throw it up.


00:44:41.060 --> 00:44:47.360
So, looks like Python's popular.


00:44:47.360 --> 00:44:48.200
- I've heard that.


00:44:48.200 --> 00:44:49.160
(laughing)


00:44:49.160 --> 00:44:50.480
I bet it would be popular enough


00:44:50.480 --> 00:44:52.400
to have a podcast about it.


00:44:52.400 --> 00:44:53.240
- With lots of pop-up.


00:44:53.240 --> 00:44:54.880
- Or three, even.


00:44:54.880 --> 00:44:55.720
- Exactly.


00:44:55.720 --> 00:44:58.920
- So, there's an article on ZDNet,


00:45:00.080 --> 00:45:02.960
Python is on the verge of another big step forward.


00:45:02.960 --> 00:45:04.960
And the big step forward apparently is


00:45:04.960 --> 00:45:08.240
Ty, I'm gonna get this wrong,


00:45:08.240 --> 00:45:12.440
Tyobi index lists C as the number one language,


00:45:12.440 --> 00:45:17.120
but Python only needs 0.16% more


00:45:17.120 --> 00:45:19.280
to become the number one language,


00:45:19.280 --> 00:45:21.200
according to this index.


00:45:21.200 --> 00:45:23.920
- So are they arguing that if we got to the top of Tyobi,


00:45:23.920 --> 00:45:26.600
that would cause another spike in usage?


00:45:26.600 --> 00:45:27.960
- I have no idea.


00:45:27.960 --> 00:45:29.880
- No, like another spike in the usage


00:45:29.880 --> 00:45:32.480
would cause this to happen maybe, I don't know.


00:45:32.480 --> 00:45:33.800
- Oh, I don't know.


00:45:33.800 --> 00:45:35.080
- Yeah, yeah.


00:45:35.080 --> 00:45:37.840
So I think historically only C and Java


00:45:37.840 --> 00:45:39.860
have ever had that designation.


00:45:39.860 --> 00:45:41.820
And so it's kind of big news.


00:45:41.820 --> 00:45:43.600
- JavaScript's never gotten up there?


00:45:43.600 --> 00:45:44.940
- I don't think so.


00:45:44.940 --> 00:45:46.880
- Oh, one more thing.


00:45:46.880 --> 00:45:51.600
Brett mentioned the cheese sketch.


00:45:51.600 --> 00:45:54.400
And if you go to pypi.org and type like anything


00:45:54.400 --> 00:45:57.440
that's silly, you'll probably get a 404.


00:45:57.440 --> 00:46:00.720
and the 404 has the cheese sketch embedded in it.


00:46:00.720 --> 00:46:02.560
- Yes, the cheese shop sketch is at the bottom.


00:46:02.560 --> 00:46:04.280
And a piece of history,


00:46:04.280 --> 00:46:06.720
PyPI was originally supposed to be named the cheese shop.


00:46:06.720 --> 00:46:08.360
It was actually originally supposed to be,


00:46:08.360 --> 00:46:10.960
it was actually originally cheese shop.python.org,


00:46:10.960 --> 00:46:12.240
but people were too concerned


00:46:12.240 --> 00:46:14.240
that managers wouldn't take Python seriously


00:46:14.240 --> 00:46:17.360
if the package index was named after a mighty Python sketch.


00:46:17.360 --> 00:46:20.960
So it got its name changed.


00:46:20.960 --> 00:46:21.780
- Yeah.


00:46:21.780 --> 00:46:24.520
- Cool.


00:46:24.520 --> 00:46:26.400
- Brett, it looks like you got some extras as well.


00:46:26.400 --> 00:46:28.240
- Yeah, well, I mean, this is Python Bytes,


00:46:28.240 --> 00:46:30.600
so we couldn't go an episode without mentioning Will,


00:46:30.600 --> 00:46:32.720
although I think Will's out in the live stream.


00:46:32.720 --> 00:46:37.720
So this is also more of the Paul love fest on here.


00:46:37.720 --> 00:46:41.200
So Paul had Will go on to an episode


00:46:41.200 --> 00:46:44.120
to talk all about textual and rich


00:46:44.120 --> 00:46:46.120
and how it's all structured, mainly textual.


00:46:46.120 --> 00:46:48.000
I believe Will tweeted that he got a haircut


00:46:48.000 --> 00:46:49.800
for this and everything.


00:46:49.800 --> 00:46:51.480
I actually haven't watched it, but as I said,


00:46:51.480 --> 00:46:53.520
it's not Python Bytes if Will doesn't get mentioned.


00:46:53.520 --> 00:46:55.760
So I just wanna make sure Will got called out.


00:46:55.760 --> 00:47:01.440
I will also say that it has been 30 episodes since I was last on,


00:47:01.440 --> 00:47:04.400
which I thought was kind of a nice round number.


00:47:04.400 --> 00:47:08.240
But on that episode, I mentioned that I was working on the Python launcher for Unix.


00:47:08.240 --> 00:47:14.080
And since over the last 30 episodes, I've actually wanted to mention that I had launched version 1,


00:47:14.080 --> 00:47:18.480
and thanks to Brian and Michael for feedback, because actually one of their feature requests got into it.


00:47:18.480 --> 00:47:22.720
The one thing I did want to call out that actually did happen recently is


00:47:22.720 --> 00:47:25.920
The launcher is now actually in Fedora.


00:47:25.920 --> 00:47:28.620
So one of the first things that got contributed


00:47:28.620 --> 00:47:30.620
was someone actually put Arch...


00:47:30.620 --> 00:47:35.360
It was actually Bernat Gabor of Talks fame,


00:47:35.360 --> 00:47:38.340
got it into Arch via AUR.


00:47:38.340 --> 00:47:40.340
I don't know how Arch does community versus not,


00:47:40.340 --> 00:47:43.500
there's a whole thing, but you can install it via Arch.


00:47:43.500 --> 00:47:45.500
But just the other week,


00:47:45.500 --> 00:47:49.480
managed some very nice folks from Fedora


00:47:49.480 --> 00:47:51.140
were nice enough to get it in,


00:47:51.140 --> 00:47:55.140
so you can actually now use DNF to install the launcher on Fedora.


00:47:55.140 --> 00:47:58.880
And then all the previous tarballs are all there as well,


00:47:58.880 --> 00:48:00.480
so it's still available.


00:48:00.480 --> 00:48:03.720
But yeah, version 1, no bugs so far, so it seems nice and stable


00:48:03.720 --> 00:48:06.220
and meeting people's needs pretty much.


00:48:06.220 --> 00:48:08.560
- Awesome. Congratulations. - Thank you.


00:48:08.560 --> 00:48:10.560
- Good work.


00:48:10.560 --> 00:48:15.060
- One of the-- I'm pulling out Michael, "Xtra, Xtra, Xtra, Xtra" at the end.


00:48:15.060 --> 00:48:19.900
I will say that my Syntactic Sugar series is still going on.


00:48:19.900 --> 00:48:22.200
When it's done, I'll probably have a wrap-up thing,


00:48:22.200 --> 00:48:25.000
and this is probably going to be what my next set of talks will be all about.


00:48:25.000 --> 00:48:27.140
But they're still happening.


00:48:27.140 --> 00:48:28.440
One interesting thing--


00:48:28.440 --> 00:48:31.480
I actually just did two just in the last two days.


00:48:31.480 --> 00:48:33.080
They were short.


00:48:33.080 --> 00:48:35.580
Actually, oh, God, I didn't realize I published three in a week.


00:48:35.580 --> 00:48:37.380
That's a lot for me.


00:48:37.380 --> 00:48:39.480
I did have one that didn't work.


00:48:39.480 --> 00:48:42.420
So if anyone's any curious what happens when I can't unravel a piece of syntax,


00:48:42.420 --> 00:48:45.520
you can read that blog post to see how I put in all the effort to do it


00:48:45.520 --> 00:48:47.320
and then realized the day after,


00:48:47.320 --> 00:48:49.260
"Oh, yeah, that's not going to work."


00:48:49.260 --> 00:48:51.460
I did enjoy that.


00:48:51.460 --> 00:48:53.260
Oh good, yeah, yeah.


00:48:53.260 --> 00:48:56.860
Assignment expressions continuously break me in various ways,


00:48:56.860 --> 00:48:59.360
so there's a bunch of syntax I can never undo because of assignment expressions.


00:48:59.360 --> 00:49:00.260
They're handy, by the way.


00:49:00.260 --> 00:49:03.260
I've used them since the month after we approved them,


00:49:03.260 --> 00:49:06.060
but they do make unraveling our stuff hard.


00:49:06.060 --> 00:49:11.860
And then for Brian, I just wanted to call out that in our last release


00:49:11.860 --> 00:49:13.660
for the Python extension for VS Code,


00:49:13.660 --> 00:49:17.460
we completely redid our UI.


00:49:17.460 --> 00:49:24.300
VS Code now actually launches with a built-in UI for testing,


00:49:24.300 --> 00:49:27.020
and we integrated directly into it.


00:49:27.020 --> 00:49:30.180
So now you have consistent UI for testing.


00:49:30.180 --> 00:49:34.020
>> Like a test tree result type of navigation thing.


00:49:34.020 --> 00:49:36.580
>> Yeah, and we had that before actually,


00:49:36.580 --> 00:49:38.580
but it was bespoke to our extension.


00:49:38.580 --> 00:49:40.700
So there was some wonkiness to it and all that.


00:49:40.700 --> 00:49:43.300
But now that this is actually built into VS Code,


00:49:43.300 --> 00:49:45.700
if all the language,


00:49:45.700 --> 00:49:48.140
I suspect we'll eventually move over to this.


00:49:48.140 --> 00:49:50.400
So by having that, learning it for one tool,


00:49:50.400 --> 00:49:52.620
one language means it'll work for another language.


00:49:52.620 --> 00:49:55.740
And there's some extra niceties to it as well,


00:49:55.740 --> 00:49:59.340
in terms of updates and all that, it's really snappy.


00:49:59.340 --> 00:50:04.200
We'll probably, we are also gonna rewrite


00:50:04.200 --> 00:50:06.100
all the code behind this and how it runs


00:50:06.100 --> 00:50:08.500
to make it a bit more performant, more stable and all that.


00:50:08.500 --> 00:50:10.900
So if you've had UI problems before


00:50:10.900 --> 00:50:13.100
with testing with VS Code for Python,


00:50:13.100 --> 00:50:13.980
please give it another try.


00:50:13.980 --> 00:50:15.820
If you've had more discovery run problems,


00:50:15.820 --> 00:50:18.140
we are gonna be working on that.


00:50:18.140 --> 00:50:19.220
So that's coming up as well.


00:50:19.220 --> 00:50:20.760
And then when that's all done,


00:50:20.760 --> 00:50:22.020
we'll be bugging Brian about this


00:50:22.020 --> 00:50:25.560
to make sure it gets the Brian Okkens stamp of approval.


00:50:25.560 --> 00:50:28.180
Yeah.


00:50:28.180 --> 00:50:29.580
- You know, I charge for that.


00:50:29.580 --> 00:50:33.720
- I thought that was just coming on the podcast was the fee.


00:50:33.720 --> 00:50:37.860
- No, I definitely, I tried this out


00:50:37.860 --> 00:50:40.100
and I liked the changes and I'm excited


00:50:40.100 --> 00:50:42.380
to see the discovery changes as well.


00:50:42.380 --> 00:50:44.700
- Yeah, well, we reached out to the pytest team


00:50:44.700 --> 00:50:46.220
directly actually and asked them like,


00:50:46.220 --> 00:50:48.440
what would you want us to do?


00:50:48.440 --> 00:50:49.860
And they gave us some feedback


00:50:49.860 --> 00:50:52.000
of how they think it should be done and all that.


00:50:52.000 --> 00:50:53.380
So we're hoping to incorporate that


00:50:53.380 --> 00:50:55.380
and use that as the basis of how we do pytest.


00:50:55.380 --> 00:50:58.100
And then unit test, unit test is unit test.


00:50:58.100 --> 00:51:00.620
Unfortunately, we had to drop no support due to this,


00:51:00.620 --> 00:51:04.960
but honestly, it was extremely low used anyway,


00:51:04.960 --> 00:51:07.180
but we did have low income.


00:51:07.180 --> 00:51:09.540
But we still have unit test, pytest support.


00:51:09.540 --> 00:51:11.180
- People shouldn't use it anyway.


00:51:12.260 --> 00:51:14.020
You heard it from Brian.


00:51:14.020 --> 00:51:15.780
Don't send me the hate mail.


00:51:15.780 --> 00:51:17.460
But yeah, that's it.


00:51:17.460 --> 00:51:19.060
- Nice, those are all great ones.


00:51:19.060 --> 00:51:22.260
All right, I now have a banners to separate my sections.


00:51:22.260 --> 00:51:23.340
- Oh, that's awesome.


00:51:23.340 --> 00:51:25.860
Nice.


00:51:25.860 --> 00:51:26.680
- All right, I'll be quick,


00:51:26.680 --> 00:51:27.520
but I do have a couple of things.


00:51:27.520 --> 00:51:29.900
I just wanna go back and sort of talk more


00:51:29.900 --> 00:51:32.180
about NerdFonts a little bit at nerdfonts.com.


00:51:32.180 --> 00:51:33.180
People can check this out.


00:51:33.180 --> 00:51:35.180
So it takes all these different things


00:51:35.180 --> 00:51:38.180
and puts them together like a bunch of awesome fonts,


00:51:38.180 --> 00:51:41.980
dev icons, weather icons, into a bunch of things.


00:51:41.980 --> 00:51:46.980
And then the ones that I really like is the developer fonts.


00:51:46.980 --> 00:51:50.220
So you can go over and check these out.


00:51:50.220 --> 00:51:52.340
A lot of them have font ligatures.


00:51:52.340 --> 00:51:54.980
Brett, I don't know how you feel about font ligatures.


00:51:54.980 --> 00:51:56.820
I'm actually a fan, although they freaked me out


00:51:56.820 --> 00:51:57.920
when I first saw them.


00:51:57.920 --> 00:52:00.740
- I'm definitely a fan.


00:52:00.740 --> 00:52:05.020
I'm actually a Fioricode user.


00:52:05.020 --> 00:52:05.860
- Yeah, exactly.


00:52:07.280 --> 00:52:12.200
Although the new Ligature support for infinite arrow length


00:52:12.200 --> 00:52:14.160
throws me a bit sometimes to the point


00:52:14.160 --> 00:52:15.600
that I actually have turned it off


00:52:15.600 --> 00:52:17.700
and I use Cascadia code,


00:52:17.700 --> 00:52:20.180
the nerd font version for Starship in my terminal.


00:52:20.180 --> 00:52:23.440
So I actually have a separate font for terminals in here.


00:52:23.440 --> 00:52:24.740
Yeah, Cascadia right there.


00:52:24.740 --> 00:52:27.160
Cascadia code here.


00:52:27.160 --> 00:52:30.260
It's Cascadia code on the official.


00:52:30.260 --> 00:52:34.760
So yeah, I use Cascadia for my terminal


00:52:34.760 --> 00:52:39.760
and then I use Fira code for my editing,


00:52:39.760 --> 00:52:42.700
although I'm contemplating actually buying a font


00:52:42.700 --> 00:52:47.500
called Mono Lisa, M-O-N-O-L-I-S-A,


00:52:47.500 --> 00:52:49.580
and using that, but I haven't pulled the trigger.


00:52:49.580 --> 00:52:52.240
- I'm not against buying fonts if they're amazing.


00:52:52.240 --> 00:52:53.080
- Yeah, neither am I.


00:52:53.080 --> 00:52:54.600
It's $100.


00:52:54.600 --> 00:52:56.020
Armand Rohnacker actually uses it.


00:52:56.020 --> 00:52:58.700
That's partially how I came across it.


00:52:58.700 --> 00:53:00.340
And someone else recommended it somewhere.


00:53:00.340 --> 00:53:03.160
Kusil Das, hey, somebody tweeted about it,


00:53:03.160 --> 00:53:04.920
and actually thanked me for using it.


00:53:04.920 --> 00:53:06.500
So multiple people I know use it


00:53:06.500 --> 00:53:07.880
and actually appreciate it.


00:53:07.880 --> 00:53:09.880
And it does have a lot of support.


00:53:09.880 --> 00:53:10.720
- Good. Yeah.


00:53:10.720 --> 00:53:12.020
All right. So one more shell thing.


00:53:12.020 --> 00:53:13.580
So here is my power,


00:53:13.580 --> 00:53:15.500
my Microsoft terminal running,


00:53:15.500 --> 00:53:18.800
oh my posh on my computer.


00:53:18.800 --> 00:53:20.540
Look how dreadful that looks, right?


00:53:20.540 --> 00:53:23.740
That's because I'm not using nerd fonts.


00:53:23.740 --> 00:53:25.360
If people are just listening,


00:53:25.360 --> 00:53:26.800
there's just tons of squares


00:53:26.800 --> 00:53:30.000
where there should be symbols and stuff.


00:53:30.000 --> 00:53:31.320
And it says like, you know,


00:53:31.320 --> 00:53:34.360
username, square, square, folder name, square, square,


00:53:34.360 --> 00:53:35.840
get information.


00:53:35.840 --> 00:53:38.360
And, but if you go and install the nerd fonts,


00:53:38.360 --> 00:53:40.160
pretty much any of them, the terminal,


00:53:40.160 --> 00:53:42.600
or oh my posh, actually, I guess is what it is,


00:53:42.600 --> 00:53:45.680
is tested against all the nerd fonts to work.


00:53:45.680 --> 00:53:46.720
So if you install that,


00:53:46.720 --> 00:53:50.440
then you end up with beautiful terminal, right?


00:53:50.440 --> 00:53:54.420
So definitely something nice to look into


00:53:54.420 --> 00:53:55.260
if you're just a, yeah,


00:53:55.260 --> 00:53:57.580
just use whatever mono thing is built in.


00:53:57.580 --> 00:54:00.040
Yeah, the nerd fonts are cool.


00:54:01.240 --> 00:54:03.440
All right, let's see what's next.


00:54:03.440 --> 00:54:05.720
Oh, did a article interview,


00:54:05.720 --> 00:54:08.640
this company in Russia interviewed me


00:54:08.640 --> 00:54:10.360
and people are interested.


00:54:10.360 --> 00:54:11.640
I'm gonna give a quick shout out to that.


00:54:11.640 --> 00:54:13.880
It was kind of fun to talk about some of the history


00:54:13.880 --> 00:54:16.440
of the podcast and stuff over there.


00:54:16.440 --> 00:54:21.240
Moreshell, Henry Schreiner III said, shared with us,


00:54:21.240 --> 00:54:26.240
here's my setup process for setting up a new Mac.


00:54:26.240 --> 00:54:30.240
And there's all these cool scripts and brew setups


00:54:30.240 --> 00:54:34.180
and all sorts of things, including all the Fish, Shell,


00:54:34.180 --> 00:54:36.960
and Vim setups that you might need.


00:54:36.960 --> 00:54:38.460
So if you want to follow up,


00:54:38.460 --> 00:54:40.140
we talked a little bit about that last time,


00:54:40.140 --> 00:54:42.220
people can follow up with that.


00:54:42.220 --> 00:54:43.940
- I'll also say one convenient thing


00:54:43.940 --> 00:54:46.460
about committing all of your dot files,


00:54:46.460 --> 00:54:49.100
at least on GitHub, is if you use Codespaces,


00:54:49.100 --> 00:54:51.140
GitHub, and you check a box,


00:54:51.140 --> 00:54:55.620
Codespaces will automatically clone your dot files repo


00:54:55.620 --> 00:54:57.660
and load them up into your Codespaces.


00:54:57.660 --> 00:54:58.780
- Ooh, that's nice.


00:54:58.780 --> 00:54:59.620
- Yeah. - That's very nice.


00:54:59.620 --> 00:55:02.900
And so I've actually published my dot files


00:55:02.900 --> 00:55:04.660
and done some other similar thing.


00:55:04.660 --> 00:55:08.100
The other nice thing is obviously when your machine,


00:55:08.100 --> 00:55:10.100
I don't know if I ever told the story in this podcast,


00:55:10.100 --> 00:55:12.420
but when your laptop accidentally gets grabbed


00:55:12.420 --> 00:55:14.860
by someone else and ends up in Dubai,


00:55:14.860 --> 00:55:17.580
and it gets shipped to you to a core dev sprint


00:55:17.580 --> 00:55:20.160
in London later, and you feel the need to wipe it


00:55:20.160 --> 00:55:21.900
for security purposes, it's very convenient


00:55:21.900 --> 00:55:23.100
to have all your stuff in the cloud


00:55:23.100 --> 00:55:25.180
and have your dot files in a repo,


00:55:25.180 --> 00:55:27.620
so it's just a clone run and you're done.


00:55:27.620 --> 00:55:28.460
- Yeah.


00:55:28.460 --> 00:55:30.460
I would want to wipe it too.


00:55:30.460 --> 00:55:31.460
[LAUGHS]


00:55:31.460 --> 00:55:34.460
Someone had physical possession of your laptop for a while.


00:55:34.460 --> 00:55:38.460
All right. A couple of other things.


00:55:38.460 --> 00:55:42.460
Brian, last time I said I was using the editor


00:55:42.460 --> 00:55:44.460
to just jump between projects and stuff.


00:55:44.460 --> 00:55:47.460
And one thing I didn't point out is I'm on the terminal all the time as well,


00:55:47.460 --> 00:55:50.460
but basically everything that I have some kind of terminal command for


00:55:50.460 --> 00:55:54.460
is I've almost entirely set up some kind of bash alias.


00:55:54.460 --> 00:55:59.460
So that actually uses the specific virtual environment


00:55:59.460 --> 00:56:02.100
as part of the command in the alias.


00:56:02.100 --> 00:56:04.220
So it doesn't matter what I have activated


00:56:04.220 --> 00:56:06.380
or where I am or anything like that.


00:56:06.380 --> 00:56:09.260
So anyway, just a quick follow up on that.


00:56:09.260 --> 00:56:10.100
Yeah.


00:56:10.100 --> 00:56:10.940
- Cool.


00:56:10.940 --> 00:56:11.760
- All right.


00:56:11.760 --> 00:56:13.660
Well, I think that's it for extras.


00:56:13.660 --> 00:56:17.340
- Do you have a separator for our joke also?


00:56:17.340 --> 00:56:18.380
- I have a laughs.


00:56:18.380 --> 00:56:19.700
I have a separator for our laughs.


00:56:19.700 --> 00:56:20.740
Yes, of course.


00:56:20.740 --> 00:56:22.300
(laughing)


00:56:22.300 --> 00:56:23.140
- Nice.


00:56:23.140 --> 00:56:25.500
I hope this is not as funny as the joke,


00:56:25.500 --> 00:56:27.880
but you all will be the judge, okay?


00:56:27.880 --> 00:56:28.720
- Okay.


00:56:28.720 --> 00:56:31.560
- All right, so this is going back to a solid place,


00:56:31.560 --> 00:56:36.200
Geek and Poke, over at geek-and-poke.com.


00:56:36.200 --> 00:56:37.720
This one is called the last 5%.


00:56:37.720 --> 00:56:40.160
And Brett, your comment was perfect


00:56:40.160 --> 00:56:41.960
about setting up a new computer


00:56:41.960 --> 00:56:43.900
or re-installing everything, right?


00:56:43.900 --> 00:56:44.740
So this is the last 5%.


00:56:44.740 --> 00:56:45.880
- I know where this is going.


00:56:45.880 --> 00:56:48.120
- Or corporate IT made easy.


00:56:48.120 --> 00:56:50.240
Make sure that the new developers notebooks


00:56:50.240 --> 00:56:54.200
your computers aren't only 95% provisioned.


00:56:54.200 --> 00:56:58.800
So there's a senior woman developer helping a new one


00:56:58.800 --> 00:57:00.640
who can't seem to compile the project


00:57:00.640 --> 00:57:02.240
or run it or something says,


00:57:02.240 --> 00:57:04.840
"I had the same problem, but I barely remember


00:57:04.840 --> 00:57:07.360
somewhere in a wiki or on a file server,


00:57:07.360 --> 00:57:09.800
there was a certificate or something like that.


00:57:09.800 --> 00:57:12.920
And I had to copy it to some folder on my machine."


00:57:12.920 --> 00:57:15.480
It's just entitled the last 5%.


00:57:15.480 --> 00:57:16.360
- Mm-hmm.


00:57:16.360 --> 00:57:18.320
It's like anytime someone onboards under your team,


00:57:18.320 --> 00:57:19.160
right at work and-


00:57:19.160 --> 00:57:19.980
- Yes, exactly.


00:57:19.980 --> 00:57:22.420
"Go read what the last person five years ago


00:57:22.420 --> 00:57:25.000
"or two years ago, how often you get a new person online.


00:57:25.000 --> 00:57:27.220
"Did it, and by the way, the process of all change."


00:57:27.220 --> 00:57:29.420
So yeah, chances it does not work.


00:57:29.420 --> 00:57:31.820
- Just scroll back two years in Slack or Teams


00:57:31.820 --> 00:57:33.980
and find that message where we talked about it.


00:57:33.980 --> 00:57:35.580
- Yeah, it's a little--


00:57:35.580 --> 00:57:36.420
- Okay.


00:57:36.420 --> 00:57:37.940
- You just have to hire people more often,


00:57:37.940 --> 00:57:41.340
so they update the wiki at least every few years.


00:57:41.340 --> 00:57:42.660
- Yeah, but the question then becomes,


00:57:42.660 --> 00:57:43.980
is it because your headcount's growing


00:57:43.980 --> 00:57:45.340
or 'cause your turnover's so high


00:57:45.340 --> 00:57:46.780
and that you're just a bad manager


00:57:46.780 --> 00:57:49.260
and thus everyone just keeps quitting the team?


00:57:49.260 --> 00:57:50.100
- Shh.


00:57:50.100 --> 00:57:52.040
- Yeah, I'd rather just have the stable number of people


00:57:52.040 --> 00:57:54.080
who by the way told me they were gonna be on the live stream


00:57:54.080 --> 00:57:56.680
and I didn't see Michael let any of the comments by.


00:57:56.680 --> 00:57:57.980
So I wonder if they actually showed up.


00:57:57.980 --> 00:58:00.400
So hello to my team if they showed up.


00:58:00.400 --> 00:58:03.100
And hopefully they did.


00:58:03.100 --> 00:58:05.480
- If she did, I hope they did.


00:58:05.480 --> 00:58:07.800
- And Chris May has a final parting thought for us.


00:58:07.800 --> 00:58:11.580
This comic hits too close to home or work or work from home.


00:58:11.580 --> 00:58:14.360
Yeah, definitely.


00:58:14.360 --> 00:58:15.180
- Definitely.


00:58:15.180 --> 00:58:17.320
Cool.


00:58:17.320 --> 00:58:18.600
Well, that's it.


00:58:18.600 --> 00:58:20.660
So thanks a lot, Brett, for showing up.


00:58:20.660 --> 00:58:22.480
- Of course. - It was a joy to have you.


00:58:22.480 --> 00:58:24.420
- Thank you to my cat for taking a nap


00:58:24.420 --> 00:58:25.460
during the entire podcast,


00:58:25.460 --> 00:58:27.780
and let's not distract me in the middle of it.


00:58:27.780 --> 00:58:29.300
- We'll put it on our calendar to make sure


00:58:29.300 --> 00:58:32.020
to invite you about every 30 episodes then.


00:58:32.020 --> 00:58:32.860
- Perfect.


00:58:32.860 --> 00:58:34.940
- Works for me. - Yeah, it's great


00:58:34.940 --> 00:58:35.940
to have you here, yeah.


00:58:35.940 --> 00:58:37.020
Thanks, thanks everyone.


00:58:37.020 --> 00:58:37.860
Thanks, Brian.


00:58:37.860 --> 00:58:38.920
- Bye. - Thanks, guys.


00:58:38.920 --> 00:58:41.160
(sniffles)


00:58:41.160 --> 00:58:51.160
[BLANK_AUDIO]

