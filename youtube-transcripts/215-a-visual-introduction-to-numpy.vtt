WEBVTT

00:00:00.000 --> 00:00:08.960
Hello, everyone out there on the live stream.


00:00:08.960 --> 00:00:10.660
We're just about to start the podcast.


00:00:10.660 --> 00:00:12.560
Thank you for being here.


00:00:12.560 --> 00:00:16.600
Be sure to jump in and put some stuff in the comments if you'd like to be part of the show.


00:00:16.600 --> 00:00:21.880
We'll try to take that and fold it in, fold your comments into the various sections.


00:00:21.880 --> 00:00:25.680
So Jason, Brian, you guys ready to start this episode?


00:00:25.680 --> 00:00:27.240
>> How long is it?


00:00:27.240 --> 00:00:28.240
>> Yes, definitely.


00:00:28.240 --> 00:00:30.240
Brian, you start it or am I?


00:00:30.240 --> 00:00:31.360
I don't remember.


00:00:31.360 --> 00:00:33.360
It's odd, so it's probably me.


00:00:33.360 --> 00:00:35.360
Yeah, that sounds odd.


00:00:35.360 --> 00:00:36.360
Yeah.


00:00:36.360 --> 00:00:36.860
Okay.


00:00:36.860 --> 00:00:38.860
Alright, go for it.


00:00:38.860 --> 00:00:41.600
Hello and welcome to Python Bytes,


00:00:41.600 --> 00:00:45.360
where we deliver Python news and headlines directly to your earbuds.


00:00:45.360 --> 00:00:49.360
This is episode 215, recorded January 6th,


00:00:49.360 --> 00:00:51.860
one of my favorite dates, 2021.


00:00:51.860 --> 00:00:53.360
I'm Brian Okken.


00:00:53.360 --> 00:00:55.360
I'm Michael Kennedy.


00:00:55.360 --> 00:00:57.360
And we have Jason.


00:00:57.360 --> 00:00:58.200
- Hello.


00:00:58.200 --> 00:00:59.560
- Yeah, hey Jason, nice to have you here.


00:00:59.560 --> 00:01:00.400
Jason McDonald.


00:01:00.400 --> 00:01:02.320
- Yeah, it's good to be here.


00:01:02.320 --> 00:01:03.680
Thank you for having me.


00:01:03.680 --> 00:01:05.000
- Yeah, thanks for joining us.


00:01:05.000 --> 00:01:07.520
Oh, and Brian, I think he's gonna cover something


00:01:07.520 --> 00:01:10.120
we haven't really covered much on the show, GUIs.


00:01:10.120 --> 00:01:10.960
- Oh, good.


00:01:10.960 --> 00:01:11.800
(laughing)


00:01:11.800 --> 00:01:12.640
- Yeah.


00:01:12.640 --> 00:01:14.280
- Actually, to be honest, I know this is like


00:01:14.280 --> 00:01:16.680
a longstanding joke in the show for long-time listeners,


00:01:16.680 --> 00:01:19.400
but we actually haven't covered GUIs that much recently,


00:01:19.400 --> 00:01:21.680
but there was a long stretch where we did.


00:01:21.680 --> 00:01:22.840
- Yeah, yeah.


00:01:22.840 --> 00:01:24.720
Yeah, that was probably like a year ago.


00:01:24.720 --> 00:01:25.560
- Yeah.


00:01:25.560 --> 00:01:26.400
- Yeah.


00:01:26.400 --> 00:01:34.080
like a year ago. Yeah, yeah. I like my programming projects and my brownies to be gooey. And


00:01:34.080 --> 00:01:39.600
fudge. Come on, fudge is good. And you like bad jokes. So you'll fit in nicely. Oh, absolutely.


00:01:39.600 --> 00:01:46.200
No, if anyone likes puns, follow my Twitter. I post an original every Monday. Nice. All


00:01:46.200 --> 00:01:52.920
right, Brian. I heard that there's gonna be a lot of exciting news for space in 2021.


00:01:52.920 --> 00:01:55.680
So I kind of want to bring a little space and Python together.


00:01:55.680 --> 00:01:57.320
>> Oh, that's good.


00:01:57.320 --> 00:01:58.320
Yeah.


00:01:58.320 --> 00:01:59.320
>> Yeah.


00:01:59.320 --> 00:02:05.640
So the first topic that I want to talk about is this video done by a woman in the UK who


00:02:05.640 --> 00:02:07.880
is an astrophysicist.


00:02:07.880 --> 00:02:12.160
She goes by the name Dr. Becky, which is cool.


00:02:12.160 --> 00:02:14.320
She has a fantastic YouTube channel.


00:02:14.320 --> 00:02:21.080
She's also a Python developer and she works in cosmology, which is pretty cool.


00:02:21.080 --> 00:02:25.560
And she did this video that I'd just like to highlight for people who maybe are coming


00:02:25.560 --> 00:02:33.260
into Python not from the, "Hey, I'm going to create a microservice set of APIs talking


00:02:33.260 --> 00:02:37.600
to Docker," but more from the, "Hey, I do some kind of science or data science or something


00:02:37.600 --> 00:02:38.600
like that."


00:02:38.600 --> 00:02:43.600
And the video is called, "The Five Ways That I Use Code As An Astrophysicist."


00:02:43.600 --> 00:02:44.600
Cool, huh?


00:02:44.600 --> 00:02:45.600
>> Yeah.


00:02:45.600 --> 00:02:53.160
>> Yeah, so she basically lays out the idea of as a modern day scientist, you can barely


00:02:53.160 --> 00:02:57.080
do your job if you're not doing some sort of programming.


00:02:57.080 --> 00:03:04.080
Of course, one of the best languages, technologies for programming these days is Python in the


00:03:04.080 --> 00:03:05.080
data science space, right?


00:03:05.080 --> 00:03:06.080
>> Surprise, surprise.


00:03:06.080 --> 00:03:10.920
>> Yeah, no big surprise there since 2012, I would say.


00:03:10.920 --> 00:03:13.600
She covers five different things with examples of each.


00:03:13.600 --> 00:03:19.180
I thought that was just a nice way for people who are either getting into Python from a


00:03:19.180 --> 00:03:23.380
science side or maybe they're teachers and they want people ask, "Why should I not just


00:03:23.380 --> 00:03:26.640
use MATLAB or some other custom tool?"


00:03:26.640 --> 00:03:28.480
Let me show you.


00:03:28.480 --> 00:03:35.340
Here's some really cool examples of real astronomy being done with Python, but it's also super


00:03:35.340 --> 00:03:39.260
accessible to even middle schoolers, I would say.


00:03:39.260 --> 00:03:44.800
Number one is image processing of galaxies from telescopes.


00:03:44.800 --> 00:03:47.600
You can do things like noise removal.


00:03:47.600 --> 00:03:52.920
It turns out that when you're taking pictures of galaxies, even if there's no actual background


00:03:52.920 --> 00:04:01.680
light or disturbances, just the basic disturbance in the actual sensors themselves will put


00:04:01.680 --> 00:04:06.260
little marks and imperfections in the images.


00:04:06.260 --> 00:04:11.940
Using Python to go through and clean those up makes it much easier to get started.


00:04:11.940 --> 00:04:16.060
The size of these pictures and the amount of data coming in from some of these new telescopes


00:04:16.060 --> 00:04:18.340
is stunningly large.


00:04:18.340 --> 00:04:20.860
>> That's cool.


00:04:20.860 --> 00:04:22.060
>> For sure.


00:04:22.060 --> 00:04:25.440
Another one is data analysis.


00:04:25.440 --> 00:04:29.680
If you're trying to find the brightness of some part of an image, say maybe you're looking


00:04:29.680 --> 00:04:35.540
for a transit of an exoplanet, you want to constantly monitor the brightness of a star,


00:04:35.540 --> 00:04:40.580
Or in her case, what she's studying, it just blows my mind, she's studying galaxies.


00:04:40.580 --> 00:04:43.300
When you see pictures of stars and you're zooming in, you're like, "Oh, that's not a


00:04:43.300 --> 00:04:44.300
star, that's a galaxy."


00:04:44.300 --> 00:04:47.580
It's just, I still can't really get my mind around that.


00:04:47.580 --> 00:04:53.980
But she talks about one of her data sets that has 600,000 rows of brightness of galaxies.


00:04:53.980 --> 00:04:58.060
So 600,000 galaxies, they all have information about that they're comparing.


00:04:58.060 --> 00:05:00.620
So that's pretty awesome, right?


00:05:00.620 --> 00:05:08.220
fitting. There's an example about a theory that most galaxies have a supermassive black


00:05:08.220 --> 00:05:13.180
hole in the middle. There's also this idea that possibly the size of the black hole and


00:05:13.180 --> 00:05:16.980
the size of the galaxy, these things kind of grow in mass together. So she has all this


00:05:16.980 --> 00:05:22.460
data. She's like, "Well, let's do some statistical fits of black hole size and galaxy size."


00:05:22.460 --> 00:05:28.700
Also the color of galaxies can indicate the relative speed or rate of star formation.


00:05:28.700 --> 00:05:29.860
And the age.


00:05:29.860 --> 00:05:31.260
- In the age, exactly, yeah.


00:05:31.260 --> 00:05:35.300
All tied together, and so she's using Python for that.


00:05:35.300 --> 00:05:38.140
Finally, data visualization, pretty straightforward,


00:05:38.140 --> 00:05:40.220
but drawing graphs and pictures.


00:05:40.220 --> 00:05:43.500
And the last part that was my favorite part is simulation.


00:05:43.500 --> 00:05:45.540
So there's two really cool examples.


00:05:45.540 --> 00:05:48.700
What happens if a star gets too close to a black hole?


00:05:48.700 --> 00:05:53.620
And gets, she said, spaghetti-ified, which is cool.


00:05:53.620 --> 00:05:57.660
And the other one is examples of galaxies colliding,


00:05:57.660 --> 00:05:59.880
which is just, again, mind-blowing.


00:05:59.880 --> 00:06:03.200
But really cool computational examples of all that.


00:06:03.200 --> 00:06:05.000
So I wanted to highlight this video


00:06:05.000 --> 00:06:06.100
'cause it's super accessible,


00:06:06.100 --> 00:06:09.040
but it's also really neat to show concrete examples


00:06:09.040 --> 00:06:11.400
of real science being done with Python.


00:06:11.400 --> 00:06:12.800
- Yeah, I thought it was cool when she was talking


00:06:12.800 --> 00:06:15.560
to her colleague about building the simulations


00:06:15.560 --> 00:06:17.800
of the universe.


00:06:17.800 --> 00:06:18.960
You have a simulation of the universe.


00:06:18.960 --> 00:06:21.040
Where do you start on that?


00:06:21.040 --> 00:06:24.840
It's like, we think we have project blocking.


00:06:24.840 --> 00:06:25.960
It's like you start on a project,


00:06:25.960 --> 00:06:27.480
it's like, yeah, I'm just gonna build a tool.


00:06:27.480 --> 00:06:28.320
where do I begin?


00:06:28.320 --> 00:06:29.640
It's like, I'm gonna build a simulation


00:06:29.640 --> 00:06:30.600
of the entire universe.


00:06:30.600 --> 00:06:31.640
Where do I start?


00:06:31.640 --> 00:06:32.480
- Exactly.


00:06:32.480 --> 00:06:36.800
I'm gonna simulate gravity at a graphic scale.


00:06:36.800 --> 00:06:37.760
Let's just do that.


00:06:37.760 --> 00:06:40.480
Yeah, awesome.


00:06:40.480 --> 00:06:41.520
So if people are out there


00:06:41.520 --> 00:06:45.560
and they're interested in this kind of stuff, yeah.


00:06:45.560 --> 00:06:47.800
- This is all in one video?


00:06:47.800 --> 00:06:49.360
- Yeah, this is all in one video.


00:06:49.360 --> 00:06:50.840
- Wow, that's cool.


00:06:50.840 --> 00:06:53.120
- Robert says star or galaxy, it's big.


00:06:53.120 --> 00:06:54.560
They're both huge, but obviously,


00:06:54.560 --> 00:06:56.200
and it's just like, I can't get my head around


00:06:56.200 --> 00:06:58.720
like galaxy-sized stuff.


00:06:58.720 --> 00:07:03.240
Stars and a star as a primitive type in the universe,


00:07:03.240 --> 00:07:06.920
and then a galaxy as a collection.


00:07:06.920 --> 00:07:09.160
That's what I just immediately go to right there,


00:07:09.160 --> 00:07:10.920
like data structures.


00:07:10.920 --> 00:07:11.440
Exactly.


00:07:11.440 --> 00:07:13.720
Yeah, so Brian, it's like a 15-minute video


00:07:13.720 --> 00:07:15.800
that half of it is the stuff that I talked about,


00:07:15.800 --> 00:07:17.240
and half is what Jason touched on.


00:07:17.240 --> 00:07:19.440
She actually interviews one of her colleagues


00:07:19.440 --> 00:07:24.320
who basically does the simulation side of programming.


00:07:24.320 --> 00:07:25.320
That's pretty cool.


00:07:25.320 --> 00:07:25.960
Yeah.


00:07:25.960 --> 00:07:27.040
I love to check that out.


00:07:27.040 --> 00:07:28.280
- Yeah, it's definitely worth it.


00:07:28.280 --> 00:07:29.120
- Yeah, I enjoyed it.


00:07:29.120 --> 00:07:31.120
I don't do very much data science actually at all.


00:07:31.120 --> 00:07:33.120
And so it's like, you know, understanding,


00:07:33.120 --> 00:07:35.680
seeing data science stuff is always interesting to me


00:07:35.680 --> 00:07:38.120
'cause I, most of my work is in like, you know,


00:07:38.120 --> 00:07:39.120
application development.


00:07:39.120 --> 00:07:41.620
So I don't usually work with a lot of statistical data.


00:07:41.620 --> 00:07:44.640
So it's neat to see that side of it explained in this,


00:07:44.640 --> 00:07:47.920
like, you know, really cool, relevant way.


00:07:47.920 --> 00:07:49.280
Instead of like, well, the statistics


00:07:49.280 --> 00:07:51.360
is the number of people, you know, who, you know,


00:07:51.360 --> 00:07:53.040
buy, you know, cheese every weekend,


00:07:53.040 --> 00:07:54.560
but the supermarket is not interesting.


00:07:54.560 --> 00:07:55.560
galaxies, wow.


00:07:55.560 --> 00:07:56.560
Exactly.


00:07:56.560 --> 00:08:00.920
Getting better click-through rates on your ads is not super compelling, but I think it's


00:08:00.920 --> 00:08:04.240
really valuable to see alternate perspectives, right?


00:08:04.240 --> 00:08:07.320
We all get into our own little world of like, "This is what programming is.


00:08:07.320 --> 00:08:11.240
This is what Python is for," and then it's bigger.


00:08:11.240 --> 00:08:18.040
I want to talk about NumPy a little bit.


00:08:18.040 --> 00:08:19.040
All right.


00:08:19.040 --> 00:08:20.040
Tell us about it.


00:08:20.040 --> 00:08:22.920
I've actually, I've used NumPy off and on a lot.


00:08:22.920 --> 00:08:28.880
And it's definitely a staple of scientific use of Python


00:08:28.880 --> 00:08:32.020
and machine learning and all sorts of stuff.


00:08:32.020 --> 00:08:34.880
But I'm starting to use it more.


00:08:34.880 --> 00:08:39.440
And I've realized that I had the wrong mental model.


00:08:39.440 --> 00:08:43.280
So I like think of arrays kind of just like lists,


00:08:43.280 --> 00:08:46.360
but they're not, they're sort of a different thing.


00:08:46.360 --> 00:08:49.720
And so I came across this article.


00:08:49.720 --> 00:08:51.760
that's a couple of years old, but it's a visual intro


00:08:51.760 --> 00:08:54.360
to NumPy and data representation.


00:08:54.360 --> 00:08:56.240
And to me, it really helps a lot,


00:08:56.240 --> 00:08:59.780
like to help me understand what you can do with it


00:08:59.780 --> 00:09:01.360
and just have a good mental picture


00:09:01.360 --> 00:09:05.480
of what the arrays are in NumPy.


00:09:05.480 --> 00:09:07.840
So it talks about arrays, matrices,


00:09:07.840 --> 00:09:12.760
and in the arrays, which are in dimensional arrays.


00:09:12.760 --> 00:09:16.280
But like, for instance, even just creating an array,


00:09:16.280 --> 00:09:17.560
I knew how to create an array.


00:09:17.560 --> 00:09:21.440
I mean, you just kind of initialize it with a list


00:09:21.440 --> 00:09:22.640
and you get an array.


00:09:22.640 --> 00:09:25.280
But I didn't know you could do like just say,


00:09:25.280 --> 00:09:29.000
I want a list of ones or a list of zeros


00:09:29.000 --> 00:09:31.200
or an array of ones or array of zeros


00:09:31.200 --> 00:09:34.880
or just a random array pre-filled with random numbers.


00:09:34.880 --> 00:09:35.720
That's pretty cool.


00:09:35.720 --> 00:09:36.540
I didn't know you could do that.


00:09:36.540 --> 00:09:37.960
That's neat.


00:09:37.960 --> 00:09:41.620
And then he talks about arithmetic you can do with them


00:09:41.620 --> 00:09:44.980
and slicing and indexing and stuff and aggregation.


00:09:44.980 --> 00:09:46.440
- You know, Brian, like when we talk about


00:09:46.440 --> 00:09:50.320
code all the time like, oh, you could write code in this way where you kind of


00:09:50.320 --> 00:09:54.080
hack a numerical for loop, but you should do this other way and that would be more


00:09:54.080 --> 00:09:56.960
Pythonic. I suspect there's also a...


00:09:56.960 --> 00:10:00.800
A numpy way. A numpy way, right? Yeah.


00:10:00.800 --> 00:10:03.640
Like filling up stuff, like, oh, you should just do ones on this one and then


00:10:03.640 --> 00:10:07.600
then you know you always like there's a lot of cool other ways of sort of


00:10:07.600 --> 00:10:09.720
conceptualizing things, right?


00:10:09.720 --> 00:10:14.400
Yeah. Well, and it's it's worth remembering and I've said this quite a


00:10:14.400 --> 00:10:19.100
a few times, not here, obviously. But I regularly


00:10:19.100 --> 00:10:21.240
like to remind people, abstractions are there to save


00:10:21.240 --> 00:10:25.020
us typing never to save us thinking. It's like it helps to


00:10:25.020 --> 00:10:27.620
have that mental model, as you put it, Brian, you know,


00:10:27.620 --> 00:10:31.580
straight, because if your mental model is wrong, it can really


00:10:31.580 --> 00:10:34.980
wind up, well, you're prone to both cargo cold programming,


00:10:34.980 --> 00:10:37.800
while I do it this way, because it's the way I was taught, or


00:10:37.800 --> 00:10:41.980
trying to, you know, ill fit pattern that's familiar to, you


00:10:41.980 --> 00:10:44.300
know, the wrong sort of problem, and you don't realize what it


00:10:44.300 --> 00:10:48.900
you're really working with. So understanding what's happening under the hood, even if you


00:10:48.900 --> 00:10:52.340
know, you don't know all the technical details of the implementation, still understanding


00:10:52.340 --> 00:10:57.020
how it's doing things is important to, you know, choosing the right tools for the job.


00:10:57.020 --> 00:10:58.300
The idiomatic pattern always.


00:10:58.300 --> 00:11:01.780
Yeah, you'll hear stuff like, Oh, well, Python is slow. It's like, well, because you're doing


00:11:01.780 --> 00:11:06.420
it wrong. Don't do it that way. Yeah, for example, you just something like NumPy, right?


00:11:06.420 --> 00:11:09.380
And like, for instance, one of the things I really loved about this article was the


00:11:09.380 --> 00:11:14.380
explanation of dot product because I've heard this before.


00:11:14.380 --> 00:11:15.980
I've never had to use a dot product,


00:11:15.980 --> 00:11:20.500
but it like somebody described it to me several times and I'm like, yeah, okay.


00:11:20.500 --> 00:11:23.860
Weird. But then like the visual representation of it,


00:11:23.860 --> 00:11:27.980
I looked like just stared at it and read it for like, you know, 30 seconds.


00:11:27.980 --> 00:11:30.460
And I'm like, Oh, that's easy. Now I get it.


00:11:30.460 --> 00:11:34.500
And I'll have it forever now because of, of that sunk in there.


00:11:34.500 --> 00:11:38.260
And it's pretty good. One of the reasons why I went to it,


00:11:38.900 --> 00:11:44.820
I had this problem is that I have large arrays,


00:11:44.820 --> 00:11:46.900
but they're not huge.


00:11:46.900 --> 00:11:50.060
They're in the thousands, say, of numbers.


00:11:50.060 --> 00:11:53.180
And I need to make sure that one array is


00:11:53.180 --> 00:11:54.460
comparing to another.


00:11:54.460 --> 00:11:56.140
I know equal works.


00:11:56.140 --> 00:11:57.780
I can compare for equality.


00:11:57.780 --> 00:12:01.300
But I wanted to compare item by item


00:12:01.300 --> 00:12:04.980
to make sure every element is less than the element


00:12:04.980 --> 00:12:08.140
in the other array, less than or equal.


00:12:08.140 --> 00:12:09.060
I didn't know how to do that.


00:12:09.060 --> 00:12:11.420
And I'm like, I think NumPy would probably do that easy.


00:12:11.420 --> 00:12:13.860
- Can you do one NumPy array less than the other?


00:12:13.860 --> 00:12:16.820
- Yeah, so if you say less than,


00:12:16.820 --> 00:12:18.500
it compares it element by element


00:12:18.500 --> 00:12:21.460
and it gives you a list of true or false.


00:12:21.460 --> 00:12:22.740
And then you can do all.


00:12:22.740 --> 00:12:23.580
- Yeah, do an all on it, yeah.


00:12:23.580 --> 00:12:27.180
- You can just say all of these two arrays


00:12:27.180 --> 00:12:28.460
less than or equal to each other.


00:12:28.460 --> 00:12:30.160
And I get exactly what I want


00:12:30.160 --> 00:12:33.180
in a very expressive, simple line of code.


00:12:33.180 --> 00:12:34.980
- Yeah, it's that kind of stuff I was thinking of


00:12:34.980 --> 00:12:37.140
when I was talking about like the NumPyc,


00:12:37.140 --> 00:12:37.980
- Yeah.


00:12:37.980 --> 00:12:39.380
- NumPionic way or whatever.


00:12:39.380 --> 00:12:40.620
- Idiomatic NumPy.


00:12:40.620 --> 00:12:41.460
- Thank you.


00:12:41.460 --> 00:12:42.300
(laughing)


00:12:42.300 --> 00:12:43.900
- Is like, that's like one or two lines


00:12:43.900 --> 00:12:44.740
and it's really fast.


00:12:44.740 --> 00:12:47.300
Whereas you could loop over each item individually


00:12:47.300 --> 00:12:50.380
and it not only is more code, but it's also slower.


00:12:50.380 --> 00:12:52.860
- Yeah, well, and also I like, I also have to,


00:12:52.860 --> 00:12:54.940
I like that there's the intermediate step of that.


00:12:54.940 --> 00:12:57.620
There's, gives me a list of true and false too,


00:12:57.620 --> 00:13:00.840
because I also on the debugging side,


00:13:00.840 --> 00:13:03.100
I need to be able to like wrap this in something


00:13:03.100 --> 00:13:06.540
that can pick, like say the first five elements


00:13:06.540 --> 00:13:08.140
that are not matching.


00:13:08.140 --> 00:13:11.780
I mean, I don't want, if it's false,


00:13:11.780 --> 00:13:12.860
if the whole statement's false,


00:13:12.860 --> 00:13:15.700
I don't wanna like just say,


00:13:15.700 --> 00:13:17.860
list all the thousands that are wrong,


00:13:17.860 --> 00:13:20.900
but I wanna be able to list a few to say,


00:13:20.900 --> 00:13:24.540
at least these are not in the right order or something.


00:13:24.540 --> 00:13:26.940
- Yeah. - So, yeah, it's good.


00:13:26.940 --> 00:13:28.580
- I'm gonna try out NumPy now.


00:13:28.580 --> 00:13:31.540
I now have a reason to try it out.


00:13:31.540 --> 00:13:33.300
- Exactly, like why am I not using this


00:13:33.300 --> 00:13:34.860
in certain situations?


00:13:34.860 --> 00:13:36.960
- Magnus of the live stream says,


00:13:36.960 --> 00:13:38.880
"Two dimensions is okay, three is hard,


00:13:38.880 --> 00:13:41.180
"but in, then my mind blows."


00:13:41.180 --> 00:13:43.060
Yeah, I actually did a bunch of math research


00:13:43.060 --> 00:13:44.540
and four dimensional stuff,


00:13:44.540 --> 00:13:46.380
two dimensional but complex numbers.


00:13:46.380 --> 00:13:48.020
So four dimensional sort of,


00:13:48.020 --> 00:13:50.820
and yeah, it's just hard.


00:13:50.820 --> 00:13:53.180
- Well, one of my weird knacks as a programmer


00:13:53.180 --> 00:13:55.220
is I actually can think in six dimensions.


00:13:55.220 --> 00:13:57.460
It's, I mentioned before the podcast,


00:13:57.460 --> 00:13:58.840
I had a head injury a few years ago,


00:13:58.840 --> 00:14:00.140
so I'm a minor traumatic savant.


00:14:00.140 --> 00:14:02.140
I can think in six dimensions.


00:14:02.140 --> 00:14:03.780
And the best way I can explain it,


00:14:03.780 --> 00:14:09.140
if you're trying to do it without having a really bizarre brain like mine, is think of


00:14:09.140 --> 00:14:15.340
the fourth dimension as a timeline. And for each timeline, you have space represented


00:14:15.340 --> 00:14:20.520
as a cube, but then you have this row of cubes which represents the timeline. It becomes


00:14:20.520 --> 00:14:24.300
a lot easier to think of four-dimensional arrays when you think of it in that fashion.


00:14:24.300 --> 00:14:28.620
Yeah, and the way that we did it, we actually had animations of that three-dimension thing,


00:14:28.620 --> 00:14:31.220
the animations were moving through that bit.


00:14:31.220 --> 00:14:34.700
But still, it's no easy thing.


00:14:34.700 --> 00:14:37.220
Yeah, it's easier when you're an animator to wrap your head


00:14:37.220 --> 00:14:40.460
around 4D than if you're just an ordinary run-of-the-mill


00:14:40.460 --> 00:14:42.500
programmer like most of us.


00:14:42.500 --> 00:14:45.100
Brian, would you say that that's a GUI type of solution?


00:14:45.100 --> 00:14:49.620
No.


00:14:49.620 --> 00:14:51.860
Maybe you could do something with Qt?


00:14:51.860 --> 00:14:52.420
Yeah, yeah.


00:14:52.420 --> 00:14:52.920
Qt?


00:14:52.920 --> 00:14:53.420
Oh, yeah.


00:14:53.420 --> 00:14:54.300
Yeah, I don't know.


00:14:54.300 --> 00:14:55.340
Jason?


00:14:55.340 --> 00:14:56.180
Yeah, who knows?


00:14:56.180 --> 00:14:56.820
It's possible.


00:14:56.820 --> 00:15:02.100
So, that's our next topic.


00:15:02.100 --> 00:15:04.100
Take a grab it Jason.


00:15:04.100 --> 00:15:05.100
Yeah, well, okay.


00:15:05.100 --> 00:15:10.180
Well, I, so I was really excited to discover the Qt 6 just released on December 8th.


00:15:10.180 --> 00:15:15.540
So Qt, it is officially pronounced Qt, although it's much, it's very debatable.


00:15:15.540 --> 00:15:17.540
People like, oh, it's Qt, it's Qt.


00:15:17.540 --> 00:15:18.540
Jif, Gif, Con.


00:15:18.540 --> 00:15:19.540
Yeah, exactly.


00:15:19.540 --> 00:15:23.380
Anyway, whatever you're going to call it, it just released.


00:15:23.380 --> 00:15:25.060
And this includes the Python binding.


00:15:25.060 --> 00:15:29.060
So, Pieside 6, Shabokan 6, which is the...


00:15:29.060 --> 00:15:32.560
So, Pieside 2 is QT5, as if that made sense.


00:15:32.560 --> 00:15:36.560
Pieside 6 is QT6, or Qt6, even how I'm doing it.


00:15:36.560 --> 00:15:38.560
Anyway, so that just released.


00:15:38.560 --> 00:15:44.060
and you also have the PiQT6, if you prefer Riverbank's version.


00:15:44.060 --> 00:15:50.060
But, in whatever case, you're gonna wind up with, with all the Qt6 features.


00:15:50.060 --> 00:15:58.540
I think the coolest thing here is if you're doing really fancy graphics,


00:15:58.540 --> 00:16:03.340
is that previously Qt 5 and prior had this hard dependency on OpenGL,


00:16:03.340 --> 00:16:07.580
and they've actually put in what they call the rendering hardware interface


00:16:07.580 --> 00:16:10.080
with an abstraction layer into Qt.


00:16:10.080 --> 00:16:15.260
So now it can natively support whatever the 3D graphics driver is on that device,


00:16:15.260 --> 00:16:19.260
whether it's DirectX, Vulkan, Metal, whatever you want it to work with.


00:16:19.260 --> 00:16:21.060
So it uses the native by default.


00:16:21.060 --> 00:16:24.820
You could tell it to use whatever you want.


00:16:24.820 --> 00:16:25.820
- That is so cool.


00:16:25.820 --> 00:16:28.800
- Yeah, and there's a bunch of other optimizations


00:16:28.800 --> 00:16:30.480
and fixes to have in here.


00:16:30.480 --> 00:16:34.260
I am really excited because I discovered,


00:16:34.260 --> 00:16:37.160
and this was actually introduced in 5.15,


00:16:37.160 --> 00:16:40.020
but they now support Snake Case.


00:16:40.020 --> 00:16:42.700
For those of us who are like PEP 8 addicts,


00:16:42.700 --> 00:16:44.740
who really hate the fact that Qt kind of seemed


00:16:44.740 --> 00:16:47.220
to force you to use the Camel Case,


00:16:47.220 --> 00:16:48.440
you can use Snake Case.


00:16:48.440 --> 00:16:52.440
there is a setting for it.


00:16:52.440 --> 00:16:55.560
You can also use properties instead of getters and setters


00:16:55.560 --> 00:16:56.760
as of Qt 6.


00:16:56.760 --> 00:16:58.720
So you can just rely on properties


00:16:58.720 --> 00:17:03.720
and that is, it makes it a lot easier to write,


00:17:03.720 --> 00:17:06.000
you know, idiomatic Python code that is cute,


00:17:06.000 --> 00:17:08.580
which is kind of fun.


00:17:08.580 --> 00:17:12.080
- Well, it just feels wrong to write, you know,


00:17:12.080 --> 00:17:14.400
get with, set with.


00:17:14.400 --> 00:17:16.280
- Yeah, absolutely.


00:17:16.280 --> 00:17:18.160
They also have this cool thing called property binding


00:17:18.160 --> 00:17:19.920
where you can actually link those together now too,


00:17:19.920 --> 00:17:21.480
is like you can link the width and the height.


00:17:21.480 --> 00:17:22.400
So when you change the width,


00:17:22.400 --> 00:17:25.120
the height automatically changes, which is beautiful.


00:17:25.120 --> 00:17:26.080
- Nice.


00:17:26.080 --> 00:17:27.480
- Oh, cool.


00:17:27.480 --> 00:17:29.800
- Yeah, I really wanna build some stuff with Qt.


00:17:29.800 --> 00:17:34.000
I've got a few app ideas in mind.


00:17:34.000 --> 00:17:35.480
What I don't have is time.


00:17:35.480 --> 00:17:37.160
Sadly.


00:17:37.160 --> 00:17:38.000
Can you help me with that, Jason?


00:17:38.000 --> 00:17:39.360
Tell me, is that more time?


00:17:39.360 --> 00:17:42.720
- Well, I know I have a reputation as a time lord,


00:17:42.720 --> 00:17:44.200
but unfortunately I can't control


00:17:44.200 --> 00:17:46.960
the stream of flow of time there.


00:17:46.960 --> 00:17:53.040
If I find my TARDIS, I'll pick you up and drop you off 10 years ago, and you can relive


00:17:53.040 --> 00:17:55.320
those 10 years and do some additional things.


00:17:55.320 --> 00:17:56.320
Okay.


00:17:56.320 --> 00:17:57.320
Nice.


00:17:57.320 --> 00:17:58.320
Nice.


00:17:58.320 --> 00:17:59.320
Yeah.


00:17:59.320 --> 00:18:00.320
That would be good.


00:18:00.320 --> 00:18:01.320
Yeah.


00:18:01.320 --> 00:18:02.320
Let's see.


00:18:02.320 --> 00:18:03.320
Actually, a couple of questions from the live stream.


00:18:03.320 --> 00:18:08.800
Magnus asks, "Any news about Qt going mobile?"


00:18:08.800 --> 00:18:12.200
I actually am ashamed to admit I don't know.


00:18:12.200 --> 00:18:14.280
I don't know either.


00:18:14.280 --> 00:18:18.320
- I think the bigger, more interesting question would,


00:18:18.320 --> 00:18:21.000
could PyQt, the stuff, like,


00:18:21.000 --> 00:18:23.840
would you be able to write a Python Qt application


00:18:23.840 --> 00:18:25.280
and make it mobile, right?


00:18:25.280 --> 00:18:27.580
I think that's where it gets really interesting.


00:18:27.580 --> 00:18:30.920
'Cause there's other, if you pick another language


00:18:30.920 --> 00:18:34.980
like C++, there's other options you might be able to choose.


00:18:34.980 --> 00:18:36.400
And then, maybe you know this one,


00:18:36.400 --> 00:18:37.240
you're gonna ask,


00:18:37.240 --> 00:18:39.960
are there any well-known Python apps built with Qt?


00:18:39.960 --> 00:18:42.480
- Oh yeah, yeah, there, and on the spot,


00:18:42.480 --> 00:18:43.920
I'm trying to think of what, mine?


00:18:43.920 --> 00:18:45.400
(laughs)


00:18:45.400 --> 00:18:47.520
It's not well known, but I built Timecard in Qt.


00:18:47.520 --> 00:18:50.720
If you look up, if you open up Timecard,


00:18:50.720 --> 00:18:53.560
it's just a time tracking app that I built.


00:18:53.560 --> 00:18:57.320
But actually there's quite a lot that's built with Qt.


00:18:57.320 --> 00:18:59.920
I think with a K in front of it, if you're into KDE,


00:18:59.920 --> 00:19:04.600
the entire KDE stack is built on top of Qt


00:19:04.600 --> 00:19:06.560
and there's actually quite a bit of it that's done in Python.


00:19:06.560 --> 00:19:09.960
So names are escaping me off the top of my head here,


00:19:09.960 --> 00:19:14.960
But yeah, anything in the KDE universe is cute.


00:19:14.960 --> 00:19:18.880
And so you're either gonna get C++ or Python.


00:19:18.880 --> 00:19:21.600
Python is certainly a lot faster to write.


00:19:21.600 --> 00:19:23.760
- Oh, FileZilla apparently is built.


00:19:23.760 --> 00:19:27.200
You know, one that I know that's written in it for sure,


00:19:27.200 --> 00:19:29.240
that is like one of my favorite apps actually,


00:19:29.240 --> 00:19:32.820
is RoboMongo or Robo3T, it got renamed too.


00:19:32.820 --> 00:19:37.680
I believe it's just C++, it's not Python.


00:19:37.680 --> 00:19:40.520
but that one's a really nice one as well.


00:19:40.520 --> 00:19:42.400
Actually, there's a huge long list,


00:19:42.400 --> 00:19:44.320
I'll put in the show notes over here,


00:19:44.320 --> 00:19:46.640
of a bunch of apps written as well.


00:19:46.640 --> 00:19:47.560
So.


00:19:47.560 --> 00:19:51.640
- Yeah, it's definitely a lot easier to write something.


00:19:51.640 --> 00:19:53.700
I've used a lot of different GUI toolkits


00:19:53.700 --> 00:19:56.160
and Qt's definitely one of the easiest to get started with.


00:19:56.160 --> 00:19:59.280
- The thing that I like about it is it looks like it belongs


00:19:59.280 --> 00:20:01.200
'cause so many apps you build with these sort of


00:20:01.200 --> 00:20:03.040
cross platform things and it's just like,


00:20:03.040 --> 00:20:05.320
well, okay, well, that's not how the file dialogue


00:20:05.320 --> 00:20:06.160
is supposed to look.


00:20:06.160 --> 00:20:07.600
You know it's alien, but you're like,


00:20:07.600 --> 00:20:10.120
"No, no, this looks like it belongs here."


00:20:10.120 --> 00:20:12.000
- Right, well, and packaging's the other half of it,


00:20:12.000 --> 00:20:13.880
because I tried to build something with Kivy,


00:20:13.880 --> 00:20:16.800
and I love Kivy from a development standpoint,


00:20:16.800 --> 00:20:18.640
it's really cool, but from a packaging standpoint,


00:20:18.640 --> 00:20:21.040
it's like beating yourself to death with a wet trout.


00:20:21.040 --> 00:20:26.040
So, and actually, if you're gonna do cross-platform,


00:20:26.040 --> 00:20:29.620
then actually, GTK's horrible too,


00:20:29.620 --> 00:20:31.400
because it's really hard to get it to package


00:20:31.400 --> 00:20:32.700
on Windows a lot of times.


00:20:32.700 --> 00:20:35.480
Qt just works, it just packages everywhere,


00:20:35.480 --> 00:20:36.640
which is nice.


00:20:36.640 --> 00:20:37.680
- Yeah, that's great.


00:20:37.680 --> 00:20:39.640
That's nice.


00:20:39.640 --> 00:20:41.740
All right, Brian, I think this episode


00:20:41.740 --> 00:20:43.740
is brought to everyone by us.


00:20:43.740 --> 00:20:45.480
- Wonderful.


00:20:45.480 --> 00:20:48.480
- We are, we're doing a lot of work out there,


00:20:48.480 --> 00:20:50.320
as everyone probably knows.


00:20:50.320 --> 00:20:53.960
If you're into testing, check out Brian's pytest book.


00:20:53.960 --> 00:20:57.040
If you're looking to take a Python course,


00:20:57.040 --> 00:21:01.480
we are just about to pass 200 hours of Python courses


00:21:01.480 --> 00:21:03.080
over at Talk Python Training.


00:21:03.080 --> 00:21:07.440
I'm working on a new course, how to build web apps, not web APIs, but web apps with


00:21:07.440 --> 00:21:08.440
FastAPI.


00:21:08.440 --> 00:21:09.440
Super neat stuff.


00:21:09.440 --> 00:21:11.720
So that should be out in a week or two.


00:21:11.720 --> 00:21:12.720
So anyway, check that out.


00:21:12.720 --> 00:21:18.880
Yeah, I also wanted to bring up that there was kind of a spike in the pytestbook sales


00:21:18.880 --> 00:21:22.720
in the last quarter of 2020.


00:21:22.720 --> 00:21:26.840
And I'm hoping that it's because maybe some schools are using it to try to help teach


00:21:26.840 --> 00:21:30.640
testing, while they're teaching software.


00:21:30.640 --> 00:21:31.640
That'd be cool.


00:21:31.640 --> 00:21:33.040
Yeah, that'd be super cool.


00:21:33.040 --> 00:21:35.440
Yeah, it's nice to see more, more, more, more stuff about


00:21:35.440 --> 00:21:38.240
stuff other than unit test. I mean, unit test has its place.


00:21:38.240 --> 00:21:40.880
But I, when I wrote the I've got a book coming out in May. And


00:21:40.880 --> 00:21:43.360
when I wrote the chapter on testing, and one of my editors


00:21:43.360 --> 00:21:46.080
was like, Thank you for not forcing me to edit yet one more


00:21:46.080 --> 00:21:48.560
unit test chapter.


00:21:48.560 --> 00:21:51.240
Nice. What's your book on?


00:21:51.240 --> 00:21:55.080
Oh, my book's called dead simple Python. It just it it


00:21:55.080 --> 00:21:59.200
introduces the language of Python, the idiomatic practices


00:21:59.200 --> 00:22:02.720
of Python to people who are coming from another language. So


00:22:02.720 --> 00:22:06.120
So if you don't want to have to sit through yet one more explanation of what a variable


00:22:06.120 --> 00:22:11.400
or a function is or a class is, you can pick this up and it dives straight into the fine


00:22:11.400 --> 00:22:15.520
details of why idiomatic patterns are what they are in Python.


00:22:15.520 --> 00:22:16.520
>> Nice.


00:22:16.520 --> 00:22:18.600
>> Yeah, that's a great idea.


00:22:18.600 --> 00:22:22.440
The courses or books that say, "We're going to pretend you know nothing about the world


00:22:22.440 --> 00:22:25.440
and we're going to force you to go through everything from scratch every time," that


00:22:25.440 --> 00:22:26.440
drives me crazy.


00:22:26.440 --> 00:22:27.920
- What else drives me crazy, Brian,


00:22:27.920 --> 00:22:32.920
is when my Python GC is doing stuff


00:22:32.920 --> 00:22:35.280
when I know that it doesn't need to do stuff.


00:22:35.280 --> 00:22:37.960
- Yeah, I like to not have to think


00:22:37.960 --> 00:22:39.280
about the garbage collector.


00:22:39.280 --> 00:22:40.360
- And you generally don't, right?


00:22:40.360 --> 00:22:43.180
Like one of the things that genuinely surprises me


00:22:43.180 --> 00:22:45.700
is the fact that we don't really talk


00:22:45.700 --> 00:22:47.640
about memory very much in Python.


00:22:47.640 --> 00:22:49.080
It's like, oh, okay, I think it cleans itself up.


00:22:49.080 --> 00:22:49.920
That's good.


00:22:49.920 --> 00:22:50.740
Now what?


00:22:50.740 --> 00:22:52.280
Let's go about stuff, right?


00:22:52.280 --> 00:22:56.080
But if you dig into it, it's pretty interesting.


00:22:56.080 --> 00:23:00.880
There's a lot of stuff around allocation we've covered before, but it's quite unique.


00:23:00.880 --> 00:23:05.480
But Python's also somewhat unique in the sense that it has two modes.


00:23:05.480 --> 00:23:12.560
So it has reference counting, which I would say 98% of all memory management cleanup stuff


00:23:12.560 --> 00:23:15.280
is in the reference counting side.


00:23:15.280 --> 00:23:17.120
This is totally made up, these numbers.


00:23:17.120 --> 00:23:23.360
But I would say maybe even more, like 99.5, unless you're building some kind of certain


00:23:23.360 --> 00:23:25.720
kind of app with interesting algorithms.


00:23:25.720 --> 00:23:28.900
Most apps don't create cycles.


00:23:28.900 --> 00:23:32.760
The only reason we have garbage collection, in addition to the reference counting, is


00:23:32.760 --> 00:23:37.400
to catch those cycles.


00:23:37.400 --> 00:23:38.840
I've got a customer object.


00:23:38.840 --> 00:23:40.960
I've got it out of a SQLAlchemy database.


00:23:40.960 --> 00:23:43.160
It has a relationship over to the orders.


00:23:43.160 --> 00:23:44.160
I go to the orders.


00:23:44.160 --> 00:23:46.320
The orders have a link back to the customer.


00:23:46.320 --> 00:23:50.000
Maybe traversing that lazy loaded list has created a cycle.


00:23:50.000 --> 00:23:52.480
Now I need the GC to save me.


00:23:52.480 --> 00:23:59.200
The rule for when the garbage collector runs is you can ask it, you can say, "Import the


00:23:59.200 --> 00:24:02.200
GC module," say, "GC.getthreshold," or "thresholds."


00:24:02.200 --> 00:24:07.360
I can't remember if it's singular or plural on my screen if I would switch to it.


00:24:07.360 --> 00:24:08.980
Singular, getthreshold.


00:24:08.980 --> 00:24:10.660
It returns three numbers.


00:24:10.660 --> 00:24:13.080
They're not the same units, which makes them really hard to understand.


00:24:13.080 --> 00:24:20.040
The first number is how many allocations of collection objects, so classes, dictionaries,


00:24:20.040 --> 00:24:23.400
lists, tuples, things that could contain other stuff.


00:24:23.400 --> 00:24:27.240
Things that could potentially be participants in a cycle, like numbers and strings are not


00:24:27.240 --> 00:24:29.400
even considered by the GC.


00:24:29.400 --> 00:24:37.400
How many allocations of collection types are there that exceed the reference counting deallocation?


00:24:37.400 --> 00:24:44.120
If I had a list and I put a thousand class objects in it by allocating and filling it


00:24:44.120 --> 00:24:47.680
up, then I would hold on to a thousand and none of them would have become garbage.


00:24:47.680 --> 00:24:49.440
The first number that comes back is, well,


00:24:49.440 --> 00:24:52.640
how big is that number before we just run a GC, no matter what?


00:24:52.640 --> 00:24:53.800
And the default is 700.


00:24:53.800 --> 00:24:58.120
So my example there, if I create a list of 1,000 objects,


00:24:58.120 --> 00:24:59.560
that's a GC that's going to run.


00:24:59.560 --> 00:25:02.440
It doesn't matter if there are cycles, there's no cycles.


00:25:02.440 --> 00:25:03.640
It just doesn't matter.


00:25:03.640 --> 00:25:04.800
I've made 1,000 of them.


00:25:04.800 --> 00:25:07.280
That's over 700, so we're going to run a GC.


00:25:07.280 --> 00:25:09.240
And then the rest are like, how much do you run?


00:25:09.240 --> 00:25:14.480
A whole memory GC versus a small, recent object GC?


00:25:14.480 --> 00:25:16.700
And what occurred to me is, you know my website.


00:25:16.700 --> 00:25:19.860
There's a lot of pages that pull back thousands of items


00:25:19.860 --> 00:25:23.900
and any website that uses the database and an ORM


00:25:23.900 --> 00:25:25.780
that pulls stuff back and hangs on to it


00:25:25.780 --> 00:25:27.820
and not just like streams over the items


00:25:27.820 --> 00:25:31.100
but puts them maybe in a list or something temporarily.


00:25:31.100 --> 00:25:33.380
Anytime you do that more with that thousand,


00:25:33.380 --> 00:25:35.700
you're gonna have the GC run, right?


00:25:35.700 --> 00:25:38.340
- So just looking for anything to throw away basically.


00:25:38.340 --> 00:25:40.580
- Yeah, but you know, you're still in the process


00:25:40.580 --> 00:25:42.020
of building the list of them.


00:25:42.020 --> 00:25:44.780
I gotta get 10,000.


00:25:44.780 --> 00:25:45.940
Well, guess what?


00:25:45.940 --> 00:25:49.560
That means you're gonna have 14 GCs.


00:25:49.560 --> 00:25:51.240
And you're just in the process of building the list.


00:25:51.240 --> 00:25:52.440
I'm like, that's kind of weird.


00:25:52.440 --> 00:25:54.680
That seems excessive to me.


00:25:54.680 --> 00:25:56.480
And then I went and looked at the site map


00:25:56.480 --> 00:25:57.600
on TalkByThon training,


00:25:57.600 --> 00:25:59.800
where we're pulling back like thousands of transcripts


00:25:59.800 --> 00:26:03.000
and all sorts of stuff to generate all the pages on there.


00:26:03.000 --> 00:26:06.460
77, there's 77 GCs to render the site map.


00:26:06.460 --> 00:26:09.340
There's no cycles.


00:26:09.340 --> 00:26:10.180
There's not one.


00:26:10.180 --> 00:26:11.000
So I'm like, that's not good.


00:26:11.000 --> 00:26:11.920
Well, let me think about that for a second.


00:26:11.920 --> 00:26:14.280
So what I ended up doing was I said,


00:26:14.280 --> 00:26:16.240
well, what if I made the threshold 10,000?


00:26:16.240 --> 00:26:17.920
Actually, I ended up on 50,000.


00:26:17.920 --> 00:26:22.400
So only run the GC if you get more than 50,000 allocations


00:26:22.400 --> 00:26:23.600
without deallocations.


00:26:23.600 --> 00:26:27.600
What was really interesting is doing that,


00:26:27.600 --> 00:26:28.880
made my unit tests,


00:26:28.880 --> 00:26:31.880
which were including many, many integration tests


00:26:31.880 --> 00:26:36.000
on TalkByDone training, run 10 to 12% faster.


00:26:36.000 --> 00:26:37.760
Just setting that one line.


00:26:37.760 --> 00:26:41.880
And it basically does not use more memory, in my case.


00:26:41.880 --> 00:26:43.320
Is that crazy?


00:26:43.320 --> 00:26:48.480
Well, it makes sense. Most issues of performance


00:26:48.480 --> 00:26:52.120
just come down to memory and how memory allocation and deallocation takes--


00:26:52.120 --> 00:26:56.760
I spend almost all my time in C++, more time in C++ than I do in Python.


00:26:56.760 --> 00:27:00.120
We don't have a garbage collector over there, so you have to do all this manually.


00:27:00.120 --> 00:27:02.840
- And doing it right and doing it wrong. - You know how much work it is, right?


00:27:02.840 --> 00:27:06.240
Yeah, exactly. It's like doing it wrong is why stuff's slow.


00:27:06.240 --> 00:27:08.240
People are like, "Well, Python's slower than C++."


00:27:08.240 --> 00:27:10.640
Well, it has a potential.


00:27:10.640 --> 00:27:13.040
C++ has the potential to be faster than Python.


00:27:13.040 --> 00:27:18.000
But it really depends on how you write that code, because well-written code is always


00:27:18.000 --> 00:27:19.900
going to run faster than poorly written code.


00:27:19.900 --> 00:27:22.000
It doesn't matter what the two languages are.


00:27:22.000 --> 00:27:23.000
Yeah.


00:27:23.000 --> 00:27:24.000
Yeah.


00:27:24.000 --> 00:27:29.860
I realized that in my world, in my type of application, I almost never create cycles,


00:27:29.860 --> 00:27:36.000
but I often get back more than 700 class objects, which also have dictionaries potentially in


00:27:36.000 --> 00:27:40.760
the mix as they're like allocating the converting serializing into classes.


00:27:40.760 --> 00:27:42.960
There's gotta be a lot of places where that's happened.


00:27:42.960 --> 00:27:45.120
So I just set this number to say, you know what?


00:27:45.120 --> 00:27:46.480
Let's waste a little bit of memory,


00:27:46.480 --> 00:27:49.160
and if there are cycles, we'll come back and get 'em later.


00:27:49.160 --> 00:27:51.020
And because there's almost no cycles,


00:27:51.020 --> 00:27:52.420
there's almost no memory growth.


00:27:52.420 --> 00:27:54.160
For example, so the server is running


00:27:54.160 --> 00:27:56.880
like eight worker processes, one of them.


00:27:56.880 --> 00:28:00.720
And I made this change, and I think over,


00:28:00.720 --> 00:28:02.720
after running for a week without restarting


00:28:02.720 --> 00:28:05.820
any of the processes, it went from 1.89 gigs


00:28:05.820 --> 00:28:07.720
of memory usage to 1.91.


00:28:07.720 --> 00:28:10.600
So like 220 megs?


00:28:10.600 --> 00:28:12.920
I think it was 20 megs more memory usage,


00:28:12.920 --> 00:28:15.760
and yet like 10% speed up by just changing


00:28:15.760 --> 00:28:17.160
like one call at startup.


00:28:17.160 --> 00:28:18.160
It was insane.


00:28:18.160 --> 00:28:20.560
- Well, and think about what Dr. Becky's code,


00:28:20.560 --> 00:28:24.520
it'll like go back to the astrophysicist thing here,


00:28:24.520 --> 00:28:26.840
with the sizes of data structures that she's doing


00:28:26.840 --> 00:28:29.080
or any data scientist who's listening,


00:28:29.080 --> 00:28:33.120
they're usually dealing with 10,000, 100,000 million items.


00:28:33.120 --> 00:28:35.360
You combine this with all the stuff


00:28:35.360 --> 00:28:37.720
that we talked about with NumPy and with data processing,


00:28:37.720 --> 00:28:39.920
and we talk about how long it takes


00:28:39.920 --> 00:28:41.680
to do some of these data regressions,


00:28:41.680 --> 00:28:43.360
how much would this speed that up?


00:28:43.360 --> 00:28:44.200
- Yeah, exactly.


00:28:44.200 --> 00:28:47.200
So if that data is being done in Python


00:28:47.200 --> 00:28:49.280
and it's not just purely being pushed down


00:28:49.280 --> 00:28:52.900
into the C data science layer,


00:28:52.900 --> 00:28:56.000
then yeah, that's really interesting, I think.


00:28:56.000 --> 00:28:57.960
- Although I would caution at the same time


00:28:57.960 --> 00:29:01.360
that there's no such thing as a magic bullet.


00:29:01.360 --> 00:29:04.160
So you have to understand why this is gonna speed things up


00:29:04.160 --> 00:29:06.520
and not just think, well, I have to just copy and paste


00:29:06.520 --> 00:29:07.940
that line that my colleague has


00:29:07.940 --> 00:29:09.520
that he got from Michael Kennedy,


00:29:09.520 --> 00:29:10.720
because it'll make the code faster.


00:29:10.720 --> 00:29:14.960
No, you have to know why it's gonna make the code faster.


00:29:14.960 --> 00:29:17.120
- It's an easy test, some cases that make sense.


00:29:17.120 --> 00:29:17.960
People can check it out.


00:29:17.960 --> 00:29:20.400
I thought it was really, it just so surprised me.


00:29:20.400 --> 00:29:22.520
I was walking along with it, I'm like, wait a minute,


00:29:22.520 --> 00:29:24.200
that must mean something weird is going on.


00:29:24.200 --> 00:29:26.320
And then I put it on just on one of my pages,


00:29:26.320 --> 00:29:28.960
like why would I do 77 GCs on a single page load?


00:29:28.960 --> 00:29:30.200
That's crazy.


00:29:30.200 --> 00:29:32.800
And so I just started exploring this and here we are.


00:29:32.800 --> 00:29:37.880
- So did you, whatever you're linking to,


00:29:37.880 --> 00:29:42.200
Does it talk about how you can test how many garbage collections?


00:29:42.200 --> 00:29:43.200
>> Let me see.


00:29:43.200 --> 00:29:45.440
I'm leaking to a Twitter thread.


00:29:45.440 --> 00:29:49.080
And way deep down.


00:29:49.080 --> 00:29:53.920
No, but there is a way to do it.


00:29:53.920 --> 00:29:58.920
If you go to the GC, I think it's set debug stats or something.


00:29:58.920 --> 00:30:02.520
I'll look it up real quick while we're talking.


00:30:02.520 --> 00:30:04.360
I'll throw it in at the end here.


00:30:04.360 --> 00:30:06.360
But yeah, there's a way to do it.


00:30:06.360 --> 00:30:07.360
Actually, I got it right here.


00:30:07.360 --> 00:30:08.720
hold on, give me just a sec.


00:30:08.720 --> 00:30:13.160
The way you do it is you say gc.set_debug,


00:30:13.160 --> 00:30:14.440
and then you pass in enumeration,


00:30:14.440 --> 00:30:16.840
and the value is gc_debug_stats.


00:30:16.840 --> 00:30:18.600
- Okay.


00:30:18.600 --> 00:30:20.360
- So that thing was just lighting up.


00:30:20.360 --> 00:30:23.240
When I turned that on, it would just light up,


00:30:23.240 --> 00:30:26.040
it would just completely fill the terminal


00:30:26.040 --> 00:30:30.600
with gc, gc, gc, gc, gc, over and over and over


00:30:30.600 --> 00:30:33.480
when I hit that one page, and then changing it,


00:30:33.480 --> 00:30:34.800
guess what, made it better.


00:30:34.800 --> 00:30:37.240
- Yeah, now we should probably be PC about the gc,


00:30:37.240 --> 00:30:41.440
and call the garbage collector the programmatic sanitation


00:30:41.440 --> 00:30:41.940
engineer.


00:30:41.940 --> 00:30:42.440
But--


00:30:42.440 --> 00:30:43.840
[LAUGHTER]


00:30:43.840 --> 00:30:48.640
Well, it doesn't take offense.


00:30:48.640 --> 00:30:49.960
It's just there to help us out.


00:30:49.960 --> 00:30:52.400
[LAUGHTER]


00:30:52.400 --> 00:30:54.320
Brian, it's probably a pretty awesome library,


00:30:54.320 --> 00:30:56.200
honestly, the GC library.


00:30:56.200 --> 00:30:59.640
Probably, but it's built in.


00:30:59.640 --> 00:31:04.680
Yeah, so I'm-- of course, I'm susceptible to click


00:31:04.680 --> 00:31:06.280
on a listicle.


00:31:06.280 --> 00:31:07.400
but the...


00:31:07.400 --> 00:31:08.520
Who is it? Come on.


00:31:08.520 --> 00:31:11.080
Right, but we don't cover them very much, but I really like this.


00:31:11.080 --> 00:31:15.880
So this article is top 10 Python libraries of 2020,


00:31:15.880 --> 00:31:18.120
but their criteria was interesting.


00:31:18.120 --> 00:31:23.160
The criteria was it has to be a library that was launched or popularized in 2020,


00:31:23.160 --> 00:31:25.320
has to be well maintained,


00:31:25.320 --> 00:31:32.040
and has have maintenance and changes since their launch date.


00:31:32.920 --> 00:31:36.280
And it has to be just outright cool that you should check it out.


00:31:36.280 --> 00:31:40.200
So, I'm going to go through a handful of these. They listed 10.


00:31:40.200 --> 00:31:47.560
I don't know if all of them, since there's like four of them that are machine learning focused that I really don't understand.


00:31:47.560 --> 00:31:49.640
Yeah, I think cool is relative.


00:31:49.640 --> 00:31:51.000
Yeah,


00:31:51.000 --> 00:31:53.400
but the first one was Typer.


00:31:53.400 --> 00:31:55.880
And I'm like,


00:31:55.880 --> 00:31:57.640
I'm really a fan of Typer now.


00:31:57.640 --> 00:32:03.320
Was it really just 2020 and I went back and look and it was released like yeah in December of 2019


00:32:03.320 --> 00:32:09.040
Yeah, Sebastian Ramirez is killing it for sure. And then I looked in it. I'm like well FastAPI when that come out


00:32:09.040 --> 00:32:11.280
well, that was the previous December so


00:32:11.280 --> 00:32:14.360
the end of 2018 released


00:32:14.360 --> 00:32:20.920
FastAPI and then type or a year later. He's just crushing it. Yeah, so yeah nice


00:32:23.040 --> 00:32:25.340
a huge fan of both of those.


00:32:25.340 --> 00:32:26.780
A big fan of Rich also.


00:32:26.780 --> 00:32:31.240
So Rich actually just showed up this in last year in 2020.


00:32:31.240 --> 00:32:34.700
And Rich is a beautiful,


00:32:34.700 --> 00:32:36.720
beautiful formatting in the terminal.


00:32:36.720 --> 00:32:40.420
And yes, it's a beautiful, it's really great.


00:32:40.420 --> 00:32:42.940
- Let me use that, that's glorious.


00:32:42.940 --> 00:32:45.140
- I'm even using it even in applications


00:32:45.140 --> 00:32:47.740
where I just need these, the tables.


00:32:47.740 --> 00:32:50.420
So if you need to print out a table in the command line,


00:32:50.420 --> 00:32:55.080
The tables are kind of hard and there were like weird other,


00:32:55.080 --> 00:32:59.120
there were other table, like specialized table libraries.


00:32:59.120 --> 00:33:02.600
But this one is great that you can, it works,


00:33:02.600 --> 00:33:04.200
you don't have to specify the width


00:33:04.200 --> 00:33:06.540
that like comes up with the width on its own.


00:33:06.540 --> 00:33:10.080
And then you, if you shrink the terminal


00:33:10.080 --> 00:33:12.180
to really narrow or wide,


00:33:12.180 --> 00:33:14.440
it'll word wrap correctly and stuff.


00:33:14.440 --> 00:33:17.760
And that's kind of incredible.


00:33:17.760 --> 00:33:21.540
So even just for tables, I'll use it, Rich.


00:33:21.540 --> 00:33:22.860
So that's good.


00:33:22.860 --> 00:33:24.140
- Yeah, Rich is awesome.


00:33:24.140 --> 00:33:26.580
- The third one is DeerPiGUI.


00:33:26.580 --> 00:33:27.560
I think we covered this.


00:33:27.560 --> 00:33:29.060
Maybe we could, I don't remember.


00:33:29.060 --> 00:33:29.900
- I don't remember.


00:33:29.900 --> 00:33:31.140
I mean, we did go on our GUI rant,


00:33:31.140 --> 00:33:32.700
so it feels like it should be.


00:33:32.700 --> 00:33:35.420
- Yeah, so it's a GUI project.


00:33:35.420 --> 00:33:40.020
Nice pictures though, at least.


00:33:40.020 --> 00:33:40.860
- Yeah.


00:33:40.860 --> 00:33:42.140
- Yeah, I've been drooling over it.


00:33:42.140 --> 00:33:44.380
I've been drooling over DeerImGUI for a while.


00:33:44.380 --> 00:33:46.260
I haven't had an opportunity to use it yet,


00:33:46.260 --> 00:33:47.080
but I've been looking at it,


00:33:47.080 --> 00:33:49.680
want to build something with this.


00:33:49.680 --> 00:33:50.360
Yeah.


00:33:50.360 --> 00:33:53.360
So the last few I want to highlight.


00:33:53.360 --> 00:33:54.640
Pretty errors looks neat.


00:33:54.640 --> 00:33:58.880
I haven't tried that yet, but it's a way to--


00:33:58.880 --> 00:34:00.120
That's glorious as well.


00:34:00.120 --> 00:34:02.000
--better tracebacks.


00:34:02.000 --> 00:34:04.000
I mean, ideally, you don't show errors to people.


00:34:04.000 --> 00:34:06.420
But if you're going to, let's make them at least readable.


00:34:06.420 --> 00:34:07.080
This is great.


00:34:07.080 --> 00:34:09.160
And let's treat ourselves, too.


00:34:09.160 --> 00:34:11.280
It's like we're going to have to read the--


00:34:11.280 --> 00:34:13.480
we're going to spend at least half our life reading error


00:34:13.480 --> 00:34:14.560
messages, let's face it.


00:34:14.560 --> 00:34:16.640
So let's at least make them readable.


00:34:16.640 --> 00:34:21.440
Another quarter crying about what we just couldn't figure out.


00:34:21.440 --> 00:34:23.760
And then the last two that I want to highlight


00:34:23.760 --> 00:34:26.040
is diagrams and scaling.


00:34:26.040 --> 00:34:30.640
Diagrams is a library-- look at that picture.


00:34:30.640 --> 00:34:31.640
It's a way to do--


00:34:31.640 --> 00:34:36.080
it's intended for cloud architecture drawings,


00:34:36.080 --> 00:34:39.320
but it's written in Python.


00:34:39.320 --> 00:34:42.120
You write these diagrams in Python.


00:34:42.120 --> 00:34:46.560
And so because they're text, you can check them in


00:34:46.560 --> 00:34:49.240
and with version control and stuff better.


00:34:49.240 --> 00:34:50.120
- That's cool.


00:34:50.120 --> 00:34:50.960
- Which is nice.


00:34:50.960 --> 00:34:53.880
I'd like to see these sorts of diagrams look more,


00:34:53.880 --> 00:34:58.880
would be great for not just network diagrams,


00:34:58.880 --> 00:35:01.000
other diagrams would be cool like that.


00:35:01.000 --> 00:35:03.600
- Flowchart would be great in that.


00:35:03.600 --> 00:35:04.600
I'd go flowchart.


00:35:04.600 --> 00:35:08.100
- Yeah, so the last one is Scalene,


00:35:08.100 --> 00:35:12.280
which is a CPU and memory profiler in Python


00:35:12.280 --> 00:35:14.520
that handles multi-threading well


00:35:14.520 --> 00:35:18.520
and distinguishes between Python versus non-Python memory usage


00:35:18.520 --> 00:35:21.360
and run time and stuff.


00:35:21.360 --> 00:35:24.080
So that's pretty cool.


00:35:24.080 --> 00:35:26.360
I definitely need to try this out.


00:35:26.360 --> 00:35:29.240
I also like that you don't have to modify your code to use it.


00:35:29.240 --> 00:35:31.760
So you can point this at your code


00:35:31.760 --> 00:35:35.680
instead of having to add things.


00:35:35.680 --> 00:35:36.520
- That is nice.


00:35:36.520 --> 00:35:38.440
- Absolutely.


00:35:38.440 --> 00:35:39.520
Yeah, those are cool.


00:35:39.520 --> 00:35:40.800
There's a bunch of great ideas there.


00:35:40.800 --> 00:35:43.240
And man, I really need to find a use for Rich.


00:35:43.240 --> 00:35:48.000
>> The solution is sort of a problem again, but hey.


00:35:48.000 --> 00:35:50.960
>> Well, I write a lot of like little terminal apps and stuff,


00:35:50.960 --> 00:35:54.920
and I'm just like, maybe you'll put a little color in here or something,


00:35:54.920 --> 00:35:56.860
and I just need to take the time and go,


00:35:56.860 --> 00:35:59.240
"No, this is a UI that I should pay more attention to,


00:35:59.240 --> 00:36:02.160
not just some random thing with text."


00:36:02.160 --> 00:36:04.100
>> Yeah. We find this cool stuff,


00:36:04.100 --> 00:36:05.760
it's like I want to use,


00:36:05.760 --> 00:36:08.520
I feel the need to use this somewhere.


00:36:08.520 --> 00:36:09.680
>> Exactly.


00:36:09.680 --> 00:36:12.720
>> I had a little application where it's just like I said,


00:36:12.720 --> 00:36:13.900
with the tables.


00:36:13.900 --> 00:36:16.500
And I'm like, I don't think it needs colors.


00:36:16.500 --> 00:36:18.700
I'm just showing a table.


00:36:18.700 --> 00:36:21.900
But the default for Rich is to show colors.


00:36:21.900 --> 00:36:22.880
And you don't have to pick them.


00:36:22.880 --> 00:36:25.340
It just picks some good colors for you.


00:36:25.340 --> 00:36:28.900
So the heading and the lines between


00:36:28.900 --> 00:36:31.900
were like different colors if you're on a color terminal.


00:36:31.900 --> 00:36:34.020
And if you're not on a color terminal, it works anyway.


00:36:34.020 --> 00:36:36.140
It just figures that out for you.


00:36:36.140 --> 00:36:37.740
And lovely, love it.


00:36:37.740 --> 00:36:38.940
- Yeah, that's awesome.


00:36:38.940 --> 00:36:39.780
It's awesome.


00:36:39.780 --> 00:36:40.860
- Yeah, that's beautiful.


00:36:40.860 --> 00:36:42.460
- It's very awesome.


00:36:42.460 --> 00:36:49.580
Awesome. Speaking of awesome. So, PEP 518 rolled out a while


00:36:49.580 --> 00:36:54.460
back, I was introducing this thing called pyproject.toml. I


00:36:54.460 --> 00:36:56.820
guess it's pronounced Tom or whatever. I'll say that


00:36:56.820 --> 00:37:00.340
pyproject.toml. So the idea behind this was that it was


00:37:00.340 --> 00:37:03.780
going to be this configuration file, you know, one


00:37:03.780 --> 00:37:07.060
configuration file to rule them all. And of course, we're in


00:37:07.060 --> 00:37:09.780
Python, we like things to be simple. Well, ironically, this


00:37:09.780 --> 00:37:12.420
turned into a really political thing, which I'm still trying


00:37:12.420 --> 00:37:15.900
to wrap my head around. So basically, the nice thing about


00:37:15.900 --> 00:37:19.780
this repository is it's keeping track of all the projects that


00:37:19.780 --> 00:37:23.460
have adopted PyProject TOML, either optionally or mandatory


00:37:23.460 --> 00:37:27.380
for the configuration. So instead of having to have, you


00:37:27.380 --> 00:37:30.060
know, a dozen configuration files in your project for all


00:37:30.060 --> 00:37:32.980
these different tools, you can just use this one. And so it's


00:37:32.980 --> 00:37:36.140
got this big list. What I find interesting is this part down


00:37:36.140 --> 00:37:40.460
here at the bottom, if you go down to, yeah, just scroll just


00:37:40.460 --> 00:37:43.020
slightly here, just slightly, just a little bit up.


00:37:43.020 --> 00:37:45.280
That's gonna sound weird on the podcast.


00:37:45.280 --> 00:37:47.560
Anyway, so if you're gonna,


00:37:47.560 --> 00:37:50.480
so these are projects that are quote unquote


00:37:50.480 --> 00:37:52.240
discussing the use of PyProject TOML.


00:37:52.240 --> 00:37:54.520
But if you actually look at these,


00:37:54.520 --> 00:37:58.180
it's kind of odd, you know, the big sticking points,


00:37:58.180 --> 00:37:59.600
'cause these are the projects that are like


00:37:59.600 --> 00:38:01.620
stopping people from really just going all in


00:38:01.620 --> 00:38:02.880
on PyProject TOML.


00:38:02.880 --> 00:38:03.840
And there's even some, you know,


00:38:03.840 --> 00:38:06.480
talk about circular, you know, dependencies.


00:38:06.480 --> 00:38:08.240
Or some are like, well, I'll do it when they do it.


00:38:08.240 --> 00:38:10.240
And they're like, "Well, we'll do it when they do it."


00:38:10.240 --> 00:38:12.880
Which makes you wonder if it's an excuse.


00:38:12.880 --> 00:38:14.880
So, mypye is the weirdest.


00:38:14.880 --> 00:38:18.240
Wietervan Rossum himself said, "Well, it doesn't solve anything."


00:38:18.240 --> 00:38:22.640
You know, someone said, "Can we just add this, please? Just add it. It's easy. Here's the PR."


00:38:22.640 --> 00:38:25.520
Someone even did the PR. He's like, "Nah, it doesn't solve anything."


00:38:25.520 --> 00:38:32.880
And he closed it. It's like, "it does solve something. It's one less file I have to deal with. That is a solution."


00:38:32.880 --> 00:38:37.760
Flake8, they have a couple of concrete objections.


00:38:37.760 --> 00:38:40.280
One is the fact we don't have the standard Tomo parser


00:38:40.280 --> 00:38:43.080
in the Python standard library.


00:38:43.080 --> 00:38:46.280
So that could be a problem.


00:38:46.280 --> 00:38:51.320
You're adding another dependency to just support having this format.


00:38:51.320 --> 00:38:53.120
Exactly, yeah.


00:38:53.120 --> 00:38:55.200
But then again, it's a common dependency


00:38:55.200 --> 00:38:57.320
with a bunch of other tools that are already in use


00:38:57.320 --> 00:38:58.560
and it almost doesn't matter.


00:38:58.560 --> 00:39:02.000
Pip, someone said, I don't understand this.


00:39:02.000 --> 00:39:04.520
"Is pip to change its behavior so mere presence of the file


00:39:04.520 --> 00:39:05.840
doesn't change functionality?"


00:39:05.840 --> 00:39:08.480
I can't wrap my head around what he's referring to there.


00:39:08.480 --> 00:39:10.080
I may be obtuse.


00:39:10.080 --> 00:39:12.880
But the stupid thing is someone already did Flake 9,


00:39:12.880 --> 00:39:15.080
which is an exact fork of Flake 8


00:39:15.080 --> 00:39:17.320
that just adds PyProject Tommel.


00:39:17.320 --> 00:39:20.120
So it's like, it's done.


00:39:20.120 --> 00:39:21.720
They just have to merge it.


00:39:21.720 --> 00:39:26.040
But it's, and actually the same thing happened with Bandit.


00:39:26.040 --> 00:39:27.840
Someone actually implemented it in 2019.


00:39:27.840 --> 00:39:30.360
The PR has been sitting there untouched since 2019.


00:39:30.360 --> 00:39:33.600
So over a year's gone by, it's there


00:39:33.600 --> 00:39:35.320
and Bandit is not picking it up.


00:39:35.320 --> 00:39:39.000
They're just, they're silent. Read the docs is saying it's too much work.


00:39:39.000 --> 00:39:43.020
it's like it's a lot of work for us to have the multiple.


00:39:43.020 --> 00:39:47.000
PyOxidizer, shockingly, hasn't even said anything since 2019.


00:39:47.000 --> 00:39:53.640
They're like the, they're like the new trendy, like the trend-setting packaging thing.


00:39:53.640 --> 00:39:56.760
And they haven't been saying anything about this.


00:39:56.760 --> 00:40:00.480
So I'm trying to figure out why it is that this is so controversial.


00:40:01.040 --> 00:40:03.800
because it seems so obvious.


00:40:03.800 --> 00:40:06.240
You have one file to store all of the settings


00:40:06.240 --> 00:40:09.120
for all the different tools.


00:40:09.120 --> 00:40:11.840
And yet, everybody seems to want to do their own thing


00:40:11.840 --> 00:40:13.240
with this.


00:40:13.240 --> 00:40:18.800
Well, I know that pip, ENF, and Poetry, and FLIT,


00:40:18.800 --> 00:40:23.120
and some of these other tools that suggest a workflow,


00:40:23.120 --> 00:40:27.320
I feel like I hear this file format being


00:40:27.320 --> 00:40:29.200
used along with those.


00:40:29.200 --> 00:40:34.120
and telling people we're going to have a different way for you to work with your projects and


00:40:34.120 --> 00:40:38.080
manage dependencies and stuff.


00:40:38.080 --> 00:40:42.380
I think that's part of the source of this and I don't know if it's just necessarily


00:40:42.380 --> 00:40:43.380
all mixed together.


00:40:43.380 --> 00:40:44.380
Brian, what do you think?


00:40:44.380 --> 00:40:46.380
You know more about this than I do.


00:40:46.380 --> 00:40:54.320
I think a lot of projects are on the side of, like for instance, coverage was, I don't


00:40:54.320 --> 00:40:56.640
know where they are on the list.


00:40:56.640 --> 00:40:58.040
That they adopted.


00:40:58.040 --> 00:40:59.040
Did they adopt it?


00:40:59.040 --> 00:41:03.120
Yeah, well coverage had this thing and other tools were talking about


00:41:03.120 --> 00:41:11.620
You know, there's no toml parser and they they didn't have any other dependencies so they didn't want to add a third-party dependency


00:41:11.620 --> 00:41:14.800
Just for this


00:41:14.800 --> 00:41:22.320
And and if they're just using it for packaging, however, or or their settings or something like that, but um the


00:41:24.640 --> 00:41:27.160
So I do think we will see a lot.


00:41:27.160 --> 00:41:28.920
I don't think it's a reasonable argument


00:41:28.920 --> 00:41:31.760
because there's reasons why--


00:41:31.760 --> 00:41:34.600
the same reason why request isn't in,


00:41:34.600 --> 00:41:36.240
because they're making changes.


00:41:36.240 --> 00:41:40.200
But I do think that the format of TOML, the basic format,


00:41:40.200 --> 00:41:46.040
enough to get a PyProject.toml isn't going to change much.


00:41:46.040 --> 00:41:49.840
So I think enough of a project TOML parser


00:41:49.840 --> 00:41:53.400
to handle PyProject.toml.


00:41:53.400 --> 00:41:58.840
That's I think we need one of the something like that in the in in pipe built into Python


00:41:58.840 --> 00:42:05.560
Yeah, especially since we have we have PEP 518. So like we have some we have some standard already as to what this is


00:42:05.560 --> 00:42:08.440
Going to look like. Yeah, so I think we'll see a big


00:42:08.440 --> 00:42:11.480
I would like to see at least


00:42:11.480 --> 00:42:17.240
even if it isn't the mainstream one if we have if the if most projects that are okay with the third party use something


00:42:17.240 --> 00:42:18.040
else


00:42:18.040 --> 00:42:20.840
uh for a tomahawk parser, but there's some built-in


00:42:21.560 --> 00:42:24.760
stripped down version in the standard library,


00:42:24.760 --> 00:42:26.460
I think that would be fine too.


00:42:26.460 --> 00:42:29.940
Yeah, I think that's where it's coming from.


00:42:29.940 --> 00:42:32.440
- It could be.


00:42:32.440 --> 00:42:34.840
- Yeah, I see you could solve that problem


00:42:34.840 --> 00:42:35.880
by just vendoring it.


00:42:35.880 --> 00:42:38.920
Just like, here's the two files that make up the parser.


00:42:38.920 --> 00:42:41.580
We're just gonna make it part of this package.


00:42:41.580 --> 00:42:42.920
So now we're good to go.


00:42:42.920 --> 00:42:44.560
I don't know.


00:42:44.560 --> 00:42:45.380
Sounds good.


00:42:45.380 --> 00:42:49.460
Well, I think that's it for all of our items.


00:42:49.460 --> 00:42:53.460
Brian, you got anything else you want to share with folks?


00:42:53.460 --> 00:42:57.460
Yeah, it's my birthday.


00:42:57.460 --> 00:43:01.460
Man, you're looking good for 28, brother.


00:43:01.460 --> 00:43:05.460
So I'm 51 and I heard today that that's just


00:43:05.460 --> 00:43:09.460
one, I'm just shy of a full deck.


00:43:09.460 --> 00:43:13.460
Well, I've never been accused of playing with a full deck myself.


00:43:13.460 --> 00:43:17.460
But I will say, don't let anyone tell you that you're old because


00:43:17.460 --> 00:43:20.500
because it says in the first chapter of Genesis,


00:43:20.500 --> 00:43:24.260
thou, and then God said, man's years shall be limited to 120.


00:43:24.260 --> 00:43:26.460
Half of 120 is 60.


00:43:26.460 --> 00:43:28.460
So it is biblical that 60 is middle-aged.


00:43:28.460 --> 00:43:29.860
You're not even middle-aged yet.


00:43:29.860 --> 00:43:30.660
[LAUGHTER]


00:43:30.660 --> 00:43:32.860
You've got a way to go.


00:43:32.860 --> 00:43:33.820
It's the Bible.


00:43:33.820 --> 00:43:35.620
[LAUGHTER]


00:43:35.620 --> 00:43:38.500
I keep telling everybody that I don't look at day over 73.


00:43:38.500 --> 00:43:40.260
[LAUGHTER]


00:43:40.260 --> 00:43:41.860
Ah, you're good, man.


00:43:41.860 --> 00:43:42.820
A couple happy birthdays.


00:43:42.820 --> 00:43:46.020
And also, you're going to ask if you're still a fan of "Flit."


00:43:46.020 --> 00:43:47.060
Yeah, I love "Flit."


00:43:47.060 --> 00:43:51.220
Especially since they adopted the source directory.


00:43:51.220 --> 00:43:53.100
- Yeah, that's right, that's awesome.


00:43:53.100 --> 00:43:55.640
- Yeah, that saved my life a few times.


00:43:55.640 --> 00:43:59.240
- Jason, anything extra that you wanna throw out there?


00:43:59.240 --> 00:44:01.660
I mean, maybe people have a place they could get notified


00:44:01.660 --> 00:44:03.420
about your upcoming book or something like that?


00:44:03.420 --> 00:44:05.180
- Yeah, you know, following me on Twitter


00:44:05.180 --> 00:44:06.820
is probably the best way to do that.


00:44:06.820 --> 00:44:08.480
I'm @CodeMouse92 on Twitter.


00:44:08.480 --> 00:44:13.580
And then, actually, I follow No Starch Press too.


00:44:13.580 --> 00:44:15.740
I mean, No Starch Press is awesome to begin with.


00:44:15.740 --> 00:44:16.780
That's what you're doing the book.


00:44:16.780 --> 00:44:17.700
Yeah, exactly.


00:44:17.700 --> 00:44:18.820
They're my publisher.


00:44:18.820 --> 00:44:19.420
No starch.


00:44:19.420 --> 00:44:21.660
I don't think they ever put out a bad book.


00:44:21.660 --> 00:44:23.580
I love that publisher.


00:44:23.580 --> 00:44:28.540
So, I was, I can, you can actually, you can ask my mother when I got, when I


00:44:28.540 --> 00:44:33.900
got, when my book contract got accepted, I actually screamed, very high pitched.


00:44:33.900 --> 00:44:36.100
Yeah.


00:44:36.100 --> 00:44:39.060
Follow follow the most arch press for updates on, on that and all their other


00:44:39.060 --> 00:44:39.380
awesome.


00:44:39.380 --> 00:44:41.300
They got some other incredible books coming up too.


00:44:41.300 --> 00:44:43.820
And in the next year, so I'll go ahead and ask her.


00:44:43.820 --> 00:44:45.220
So what's your mom's Twitter handle?


00:44:45.220 --> 00:44:47.580
Oh, my mom's Twitter handle?


00:44:47.580 --> 00:44:50.020
Oh, she doesn't have a Twitter handle, actually.


00:44:50.020 --> 00:44:53.020
So I'll have to put you in touch directly, I think, unfortunately.


00:44:53.020 --> 00:44:56.020
[LAUGHTER]


00:44:56.020 --> 00:44:56.520
Awesome.


00:44:56.520 --> 00:44:57.020
Well, cool.


00:44:57.020 --> 00:44:58.220
Thanks for being here again.


00:44:58.220 --> 00:45:01.380
So I have a couple of items to throw out here, actually.


00:45:01.380 --> 00:45:04.260
This almost-- Brian, this almost could have been an extra, extra, extra, extra,


00:45:04.260 --> 00:45:05.640
extra, extra, extra all about it.


00:45:05.640 --> 00:45:07.980
But they're real short, so I didn't do that.


00:45:07.980 --> 00:45:09.980
Django 3.15 is released.


00:45:09.980 --> 00:45:14.740
Django 3, didn't we just go to Django 2 or something?


00:45:14.740 --> 00:45:15.740
I mean, that's good.


00:45:15.740 --> 00:45:17.060
That's really good to hear.


00:45:17.060 --> 00:45:18.620
So awesome on that.


00:45:18.620 --> 00:45:22.020
Python 3.10, alpha 4 is available for testing.


00:45:22.020 --> 00:45:26.180
The new parser is going to be in that one, which is going to be...


00:45:26.180 --> 00:45:28.340
That's the peg parser that Guido has been working on?


00:45:28.340 --> 00:45:32.100
Yeah, that's going to revolutionize the language eventually.


00:45:32.100 --> 00:45:36.220
Yeah, it'll definitely make it possible to do more.


00:45:36.220 --> 00:45:40.380
And in releases, SciPy 1.6.0 was released.


00:45:40.380 --> 00:45:41.900
I learned about a cool project.


00:45:41.900 --> 00:45:49.700
So we talked about avoiding Excel for the Python data science stack.


00:45:49.700 --> 00:45:50.700
Just stop doing Excel.


00:45:50.700 --> 00:45:53.460
There's all these weird errors.


00:45:53.460 --> 00:45:59.860
The organization that defines or governs how you can name genes has come up with rules


00:45:59.860 --> 00:46:01.900
for names you can't use.


00:46:01.900 --> 00:46:06.460
The reason they can't be used is they'll be parsed incorrectly into other data types by


00:46:06.460 --> 00:46:07.460
Excel, for example.


00:46:07.460 --> 00:46:12.220
So there's a lot of issues you might run into with Excel.


00:46:12.220 --> 00:46:17.420
And that's all good, but there's this project called PyXLL.


00:46:17.420 --> 00:46:20.100
And this is actually a paid product.


00:46:20.100 --> 00:46:21.100
They're not sponsoring the show.


00:46:21.100 --> 00:46:23.900
I just think it's kind of neat, so just spreading the word.


00:46:23.900 --> 00:46:27.760
But anyway, if it's interesting for you, what you can do is it's a plugin for Excel that


00:46:27.760 --> 00:46:34.140
will embed Jupyter into Excel and allow you to write functions and macros in Excel in


00:46:34.140 --> 00:46:37.340
Python.


00:46:37.340 --> 00:46:44.540
So basically, it almost adds Python, the programming language to Excel, which is good.


00:46:44.540 --> 00:46:45.540
It's better than VBA.


00:46:45.540 --> 00:46:46.540
Let's see.


00:46:46.540 --> 00:46:47.540
>> I know.


00:46:47.540 --> 00:46:48.540
I started in VBA.


00:46:48.540 --> 00:46:49.540
Tell me about it.


00:46:49.540 --> 00:46:53.400
Anything is better than VBA.


00:46:53.400 --> 00:47:00.660
>> So someone on Twitter asked if PyCharm works okay on my Apple Mac mini M1.


00:47:00.660 --> 00:47:05.740
And PyCharm and JetBrains in general just released a whole bunch of their tooling with


00:47:05.740 --> 00:47:10.180
different installs for the Apple Silicon native versions.


00:47:10.180 --> 00:47:13.980
And so I've got a cool little video


00:47:13.980 --> 00:47:15.540
that I'm gonna link to in the show notes.


00:47:15.540 --> 00:47:17.060
It's just like a five second video of here.


00:47:17.060 --> 00:47:19.780
I opened up PyCharm and you basically,


00:47:19.780 --> 00:47:22.120
from the time you click on open project


00:47:22.120 --> 00:47:24.740
till the project's open, if you've opened a project before,


00:47:24.740 --> 00:47:28.220
so that caveat, but at that point, if you click on it,


00:47:28.220 --> 00:47:30.900
you cannot perceive the click.


00:47:30.900 --> 00:47:32.540
Like by the time you're letting up the mouse,


00:47:32.540 --> 00:47:35.620
the whole project is loaded and ready to work on.


00:47:35.620 --> 00:47:37.620
It's insane.


00:47:37.620 --> 00:47:38.760
- That's beautiful.


00:47:38.760 --> 00:47:39.600
- Yeah.


00:47:39.600 --> 00:47:41.280
- I will consider picking up PyCharm again


00:47:41.280 --> 00:47:43.280
when they add live share into it, so yeah.


00:47:43.280 --> 00:47:44.500
- They're working on it.


00:47:44.500 --> 00:47:45.340
It's good.


00:47:45.340 --> 00:47:46.160
There's something called Code With Me.


00:47:46.160 --> 00:47:47.000
Yeah, yeah.


00:47:47.000 --> 00:47:47.820
So I have not tried it.


00:47:47.820 --> 00:47:48.880
I have no one to code with.


00:47:48.880 --> 00:47:49.720
I'm sorry, but.


00:47:49.720 --> 00:47:51.580
- Email me later.


00:47:51.580 --> 00:47:52.400
We'll set something up.


00:47:52.400 --> 00:47:53.240
- Yeah, exactly.


00:47:53.240 --> 00:47:55.180
We'll go together.


00:47:55.180 --> 00:47:59.340
So also, since I got my M1 like three, four weeks ago,


00:47:59.340 --> 00:48:03.860
whatever, I've only used this for all my Python work.


00:48:03.860 --> 00:48:06.460
And apparently, it's still going strong.


00:48:06.460 --> 00:48:09.220
I even had to send in my MacBook Pro


00:48:09.220 --> 00:48:12.540
because it had started shutting-- the battery was so bad,


00:48:12.540 --> 00:48:14.540
it would shut down at 75%.


00:48:14.540 --> 00:48:16.980
It's like, you know when it gets too low, it'll shut down?


00:48:16.980 --> 00:48:19.320
And as the battery gets bad, maybe it shuts down at 10%


00:48:19.320 --> 00:48:20.420
instead of zero?


00:48:20.420 --> 00:48:23.380
If I'm doing video work, it'll actually shut down at 75%


00:48:23.380 --> 00:48:24.340
until I plug it back in.


00:48:24.340 --> 00:48:28.740
So it's all in one until that comes back.


00:48:28.740 --> 00:48:31.180
Well, I'm still on my system 76 Linux,


00:48:31.180 --> 00:48:33.340
so I can't speak much to Apple.


00:48:33.340 --> 00:48:35.540
I do love my System76.


00:48:35.540 --> 00:48:36.380
- That's cool.


00:48:36.380 --> 00:48:41.380
I think this whole new ARM architecture stuff


00:48:41.380 --> 00:48:44.280
that they're doing, it's gonna be interesting.


00:48:44.280 --> 00:48:46.500
I think Microsoft's following suit


00:48:46.500 --> 00:48:48.600
or trying in parallel with them.


00:48:48.600 --> 00:48:51.740
It just felt to me like Intel and AMD,


00:48:51.740 --> 00:48:53.620
that's just the way it was gonna be forever


00:48:53.620 --> 00:48:56.620
and it's not necessarily the case.


00:48:56.620 --> 00:48:59.580
- I don't have a problem with competition.


00:48:59.580 --> 00:49:01.540
What I have a problem with is software companies


00:49:01.540 --> 00:49:05.220
making their own architecture and it only works on their architecture.


00:49:05.220 --> 00:49:08.140
That's what you move towards and then you wind up with a totally fragmented


00:49:08.140 --> 00:49:11.140
industry. I think that's a mistake. Yeah, that's not going to be great.


00:49:11.140 --> 00:49:14.460
So don't do it, Microsoft. It's not worth it.


00:49:14.460 --> 00:49:21.060
Awesome. All right. Well, that's my extra, extra, extra, extra, extra, extra.


00:49:21.060 --> 00:49:21.940
Right. Nice.


00:49:21.940 --> 00:49:25.860
Now, I want to get an M1.


00:49:25.860 --> 00:49:28.060
I'd like to get a mini.


00:49:28.060 --> 00:49:29.340
Yeah, the mini is fantastic.


00:49:29.340 --> 00:49:30.420
I really, really like it.


00:49:30.420 --> 00:49:35.020
It's not even a joke.


00:49:35.020 --> 00:49:36.180
I'm being serious.


00:49:36.180 --> 00:49:37.180
But we do need a joke.


00:49:37.180 --> 00:49:38.180
Yes.


00:49:38.180 --> 00:49:39.180
Oh, I have a joke.


00:49:39.180 --> 00:49:40.180
All right.


00:49:40.180 --> 00:49:41.180
Yeah.


00:49:41.180 --> 00:49:42.180
You got the joke this week.


00:49:42.180 --> 00:49:43.180
I actually do have the joke this week.


00:49:43.180 --> 00:49:44.180
Yeah.


00:49:44.180 --> 00:49:48.220
And so why did the programmer always refuse to check his code into the repository?


00:49:48.220 --> 00:49:49.940
Why?


00:49:49.940 --> 00:49:51.620
He was afraid to commit.


00:49:51.620 --> 00:49:53.900
So, yeah.


00:49:53.900 --> 00:49:54.900
Yeah.


00:49:54.900 --> 00:49:58.980
If you want to, if you want a regular dose of my, of my, that is one of my originals.


00:49:58.980 --> 00:50:02.620
If you want a regular dose of my absolutely horrific puns, you can follow me on Twitter,


00:50:02.620 --> 00:50:03.620
your own peril.


00:50:03.620 --> 00:50:04.620
I post it every Monday.


00:50:04.620 --> 00:50:05.620
I've got a new one.


00:50:05.620 --> 00:50:06.620
Awesome.


00:50:06.620 --> 00:50:07.620
Nice.


00:50:07.620 --> 00:50:08.620
Thanks for being on the show.


00:50:08.620 --> 00:50:09.620
Yeah, it was fun.


00:50:09.620 --> 00:50:10.620
Yeah, thanks.


00:50:10.620 --> 00:50:11.620
See you all.


00:50:11.620 --> 00:50:12.620
Thanks everyone out there on the live stream and thanks everyone who listened.


00:50:12.620 --> 00:50:12.620
See you all.


00:50:12.620 --> 00:50:13.620
Thanks.


00:50:13.620 --> 00:50:14.120
See y'all.


00:50:14.120 --> 00:50:15.720
Thanks, everyone out there on the live stream.


00:50:15.720 --> 00:50:17.140
And thanks, everyone who listened.


00:50:17.140 --> 00:50:18.760
See y'all.


00:50:18.760 --> 00:50:28.760
[BLANK_AUDIO]

