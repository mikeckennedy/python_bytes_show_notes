WEBVTT

00:00:00.959 --> 00:00:05.920
Hey everyone. Hey Brian. Hey. Hey, let's make this happen today, huh?

00:00:06.300 --> 00:00:06.640
Yeah.

00:00:06.880 --> 00:00:13.020
Talk a little bit of Python news. Thank you everyone for being here or watching the replay here on YouTube.

00:00:13.410 --> 00:00:28.640
And with that, let's kick it off. Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is episode 430, recorded April 28th, 2025.

00:00:28.660 --> 00:00:29.940
I am Michael Kennedy.

00:00:30.230 --> 00:00:31.460
And I am Brian Okken.

00:00:33.040 --> 00:00:36.400
And this episode is brought to you by Porkbun.

00:00:36.940 --> 00:00:42.700
Use our link and you'll get a.app or.dev domain for $5.99 at Porkbun.

00:00:42.780 --> 00:00:45.380
Very awesome domain name host.

00:00:45.860 --> 00:00:47.100
So check them out.

00:00:47.150 --> 00:00:48.260
We'll tell you more about them later.

00:00:48.410 --> 00:00:56.020
You can check out, connect with us on the social things over on Mastodon or on Blue Sky.

00:00:56.520 --> 00:00:57.240
Those are great places.

00:00:57.500 --> 00:01:03.180
And finally, you can be part of the YouTube video, usually 10 a.m. on Monday, U.S. Pacific time.

00:01:04.040 --> 00:01:05.700
Just visit pythonbytes.fm/live.

00:01:06.520 --> 00:01:20.840
And we have a really cool newsletter we're sending out these days that actually brings a bunch of extra information to add additional research and details and information for you in addition to what we have in the show notes and in addition to what we talk about on the air.

00:01:21.040 --> 00:01:23.980
So if you like that and you want that, you can get it for free.

00:01:24.100 --> 00:01:27.840
just drop in over at PythonBuySty.fm, click newsletter.

00:01:29.100 --> 00:01:31.600
It only costs your email, which we will treat nicely.

00:01:33.380 --> 00:01:35.580
All right, Brian, what you got for us?

00:01:35.980 --> 00:01:39.820
Well, I've got, let me bring it up.

00:01:40.080 --> 00:01:43.420
Speaking of on the socials, I found this on the Blue Sky.

00:01:44.320 --> 00:02:00.400
Hugo von Camenade, sorry, Hugo, Hugo announced that there's, well, he didn't announce it, but he posted pip 25.1 has been released, and maintainer Richard C. has a great write-up about it.

00:02:00.840 --> 00:02:04.060
So this is a really fun write-up, so I'm going to take a look at this.

00:02:04.560 --> 00:02:07.240
So what's new in pip 25.1?

00:02:07.540 --> 00:02:14.740
So, you know, we've talked a lot about uv a lot, but we haven't mentioned pip for a while, but pip's still a great workhorse.

00:02:15.560 --> 00:02:19.760
So let's take a look at some of the great awesomeness in the new pip.

00:02:20.560 --> 00:02:35.360
So we've got dependency groups, PEP 735. And these are pretty cool. I can't wait to use this more. So you've got like, you can set up to see groups of like, say, test and lint and dev and stuff.

00:02:35.860 --> 00:03:03.080
Not just the project dependencies, but the dependencies of the things around working with a project. So that's a good thing to group it with. You can also use groups for extra things like different installs and stuff. But to use it with pip, You say pip install, and you can give it a group, so --group, and then give it a test, or give it whatever the group name is, in this case test.

00:03:04.200 --> 00:03:06.580
So like in the example, they gave it a great example.

00:03:06.720 --> 00:03:15.480
So like, for instance, the test group might have pytest and maybe some pytest plugins, and linting would have different things.

00:03:16.040 --> 00:03:21.460
But then with dev, you can say include group test and in-group lint.

00:03:21.540 --> 00:03:26.660
So you can combine groups into bigger groups, which is super cool.

00:03:26.680 --> 00:03:28.160
So you don't have to maintain two lists.

00:03:29.140 --> 00:03:31.120
So yeah, dev would include both tests.

00:03:31.220 --> 00:03:34.340
Anyway, there's no limit to this.

00:03:34.520 --> 00:03:38.700
Anyway, dependency groups here now, now that you can use them with pip, that's great.

00:03:41.260 --> 00:03:42.560
Moving down, progress bars.

00:03:42.740 --> 00:03:45.280
I'm not super excited about this, but kind of neat.

00:03:46.540 --> 00:03:49.880
Package install progress bars are now there.

00:03:51.020 --> 00:03:51.920
Resumable downloads.

00:03:52.110 --> 00:04:02.800
This is kind of nice because if you've got so resumable download support, especially if you've got, for example, I'm not sure how this works, but it supports automatic download retrying.

00:04:04.420 --> 00:04:06.620
It's an experimental feature in this one.

00:04:07.300 --> 00:04:09.420
There's a retry limit that you can specify.

00:04:10.370 --> 00:04:15.780
So if there's some failure with the download, it'll try to retry it.

00:04:15.880 --> 00:04:16.380
That's pretty cool.

00:04:17.650 --> 00:04:18.079
Yeah, Brian,

00:04:18.180 --> 00:04:21.400
it might sound like, so what, right?

00:04:21.799 --> 00:04:23.060
You've got to re-download requests.

00:04:24.060 --> 00:04:25.060
It'll come right down.

00:04:25.520 --> 00:04:26.940
You've got to re-download NumPy.

00:04:27.080 --> 00:04:28.560
It's four megs, whatever.

00:04:29.160 --> 00:04:32.420
Some of those ML libraries are massive, right?

00:04:32.880 --> 00:04:36.340
Half a gig that you pip install and other things, right?

00:04:36.480 --> 00:04:39.840
So there are situations where it's a non-trivial amount of data.

00:04:40.600 --> 00:04:40.980
Yeah.

00:04:42.660 --> 00:04:48.200
Yeah, and there's times, especially if you're on Wi-Fi, sometimes it could break out or whatever.

00:04:48.600 --> 00:04:55.400
So the real thing that I'm excited about to cover with this one is experimental lock files.

00:04:55.580 --> 00:05:01.840
So I do like dependency groups a lot, but also I'm kind of excited about pylock.toml.

00:05:02.480 --> 00:05:13.440
And so peps751, this is, so you can just say piplock and it will generate the lock file for you.

00:05:15.800 --> 00:05:45.420
really cool uh and yeah um let's see oh this is the next next item is super cool also so there used to be a way you could say pip install pack my package or whatever package name and then give it two equal signs and it would sort of a hack to give you a list of all the versions available for that package but now there is a there was experimental uh thing called pip index versions and that would give you a list of versions.

00:05:45.530 --> 00:05:48.840
And it was in an experimental mode, but now it is in stable mode.

00:05:49.000 --> 00:05:59.560
So definitely go ahead and use this pip index versions to get a list of all the versions of a package that you're considering downloading.

00:06:00.310 --> 00:06:03.820
And then you might want to do this with a script.

00:06:04.110 --> 00:06:05.440
So there's a JSON version.

00:06:05.550 --> 00:06:09.560
So you can add --json and it gives you a nice JSON instead.

00:06:09.840 --> 00:06:11.500
This is super cool.

00:06:11.580 --> 00:06:17.000
So it looks like, yeah, it's just a nice clean version, clean format.

00:06:17.860 --> 00:06:19.760
And then some bug fixes and other wonderful things.

00:06:20.700 --> 00:06:21.440
Oh, that's funny.

00:06:21.600 --> 00:06:24.680
Legacy.egg distributions are only detected once.

00:06:25.120 --> 00:06:25.560
Okay.

00:06:26.620 --> 00:06:28.180
Deprecations upcoming or removals.

00:06:28.960 --> 00:06:29.980
This is a really great write-up.

00:06:30.640 --> 00:06:32.920
So great job, Richard Seek, for writing this up.

00:06:33.460 --> 00:06:33.960
Pretty excited.

00:06:35.060 --> 00:06:36.580
Yeah, I'm impressed with this.

00:06:36.800 --> 00:06:38.400
This is a massive release of pip.

00:06:38.500 --> 00:06:40.960
This is not just, oh, we've tweaked a few things.

00:06:41.360 --> 00:06:45.040
You know, something that's been around so long, there's a lot of changes and a lot of improvements.

00:06:45.520 --> 00:06:45.860
Yeah.

00:06:46.220 --> 00:06:46.360
Yeah.

00:06:46.800 --> 00:06:47.320
Really exciting.

00:06:48.320 --> 00:06:48.480
Yeah.

00:06:49.440 --> 00:06:49.760
Absolutely.

00:06:50.020 --> 00:06:51.760
So congrats everyone who worked on that.

00:06:52.380 --> 00:06:56.380
And now I want to talk about aiohttp.

00:06:57.940 --> 00:07:04.660
So aiohttp, AIO stands for Asynchronous Input-Output HTTP.

00:07:05.480 --> 00:07:09.520
And it's one of both the clients that you can use.

00:07:09.640 --> 00:07:14.260
So it's an alternative to requests, but it supports async and await.

00:07:15.240 --> 00:07:17.840
Maybe more on par with HTTPX.

00:07:18.200 --> 00:07:25.000
I'm a little bit more of a fan of HTTPX these days because it has some really simple shortcut versions that you can use.

00:07:26.440 --> 00:07:33.000
But the other thing that people might not know about is it also is a web framework, an alternative to Flask or Django.

00:07:34.000 --> 00:07:41.220
So a server-side thing that has HTTP support and WebSockets and those kind of things.

00:07:41.460 --> 00:07:43.540
So you can use it for both.

00:07:44.040 --> 00:07:46.120
And the news is not it or its existence.

00:07:46.370 --> 00:07:50.480
The news comes to us from this post I found on Blue Sky.

00:07:51.840 --> 00:07:57.220
And it comes from the hashtag AIOHCP username.

00:07:57.350 --> 00:07:59.860
I don't know why there's a hashtag in the username, but whatever.

00:08:02.390 --> 00:08:19.160
It says, thanks to months of consistent contributions by Lysandros Nicolau from QuantSight, all of the mandatory dependencies of AIoHTP now ship with free-threaded variants of wheels.

00:08:19.920 --> 00:08:20.320
Oh, wow.

00:08:21.340 --> 00:08:28.940
So what that means is AIoHTP is now safe and functional to use with free-threaded Python.

00:08:29.680 --> 00:09:05.520
So if you want to create a Python-based web server that has to handle crazy amounts of concurrency, maybe uv create a virtual environment like uv give it to Python for the free threaded version then install this and use it with async and await and boom off you go pretty cool so I think that's pretty neat and the bonus here is not just oh this is awesome for aiohttp the bonus is that it was the dependencies underneath it that were potentially needing updated.

00:09:06.340 --> 00:09:10.500
And so any other thing that uses those dependencies, and unfortunately, I don't know exactly what they are.

00:09:10.600 --> 00:09:15.260
There's not like a list to a PR or anything like that, right?

00:09:15.320 --> 00:09:16.020
It's just kind of a summary.

00:09:16.860 --> 00:09:21.980
But if you use those dependencies, then those also are now free-threaded, which I think is great.

00:09:24.640 --> 00:09:25.300
Yeah, very cool.

00:09:25.960 --> 00:09:26.620
Super, super cool.

00:09:27.160 --> 00:09:31.720
Now, before we move on, Brian, I do want to talk about our sponsor just a bit.

00:09:31.820 --> 00:09:32.100
How's that?

00:09:32.880 --> 00:09:33.600
That's wonderful.

00:09:34.460 --> 00:09:37.960
Yeah, so this episode is brought to you by Pork Bun, as I said at the top of the show.

00:09:39.339 --> 00:09:40.760
And let me ask you a question.

00:09:41.380 --> 00:09:45.340
What is the second action you typically take when you come up with a great idea?

00:09:45.960 --> 00:09:49.440
The first is coming up with the idea, of course, but the second is to choose a name.

00:09:50.120 --> 00:09:56.280
And for most projects, apps, and services, choosing a name involves making sure the domain name is available.

00:09:56.880 --> 00:10:01.920
The last thing you want is to have a product that can't have its own domain name or something along those lines, right?

00:10:02.820 --> 00:10:07.540
But if you're still using GoDaddy or other legacy domain providers, you're going to have a bad time.

00:10:07.820 --> 00:10:13.420
Their prices are super high, their domain management tools are very outdated, and they're hard to use.

00:10:14.060 --> 00:10:15.580
So you definitely want to give Porkbun a look.

00:10:16.060 --> 00:10:21.260
Porkbun was named the number one domain registrar by USA Today three years in a row from 2023 to 2025.

00:10:22.460 --> 00:10:27.920
And most importantly right now, Porkbun is running a special campaign for.app and.dev domains.

00:10:29.380 --> 00:10:32.720
You can get a new.app or.dev domain for less than $6.

00:10:33.800 --> 00:10:42.100
And Porkrun, they're really proud of their pricing transparency, which includes low domain registration prices.

00:10:44.000 --> 00:10:53.840
Renewal prices are kept low, so they can give you the most value for your investment, unlike other domain registrars like GoDaddy, which have massive markups on the renewals.

00:10:54.680 --> 00:11:33.180
And there are no surprises, no tricks, just pricing transparency that shows you great value year over year. Another thing that I really hate is when you go to purchase your domain, you pick it, you see it's available, and the pricing reasonable, you go to checkout and they have these hidden upsells. So for example, do you want to not share your personal address? You know, the one where your house is and your kids live? Well, a lot of domain registers want to hold that hostage. They're like, well, it's another $10 a year, or we're going to tell everyone where you live. But with ForkMind, you get free who is privacy, URL forwarding, SSL search, and all that kind of stuff.

00:11:33.780 --> 00:11:45.480
And your domain is backed by five-star personal support for real people during 65 days a year. And why do you even care about these.app and.dev domains? Because they come with what's called HSTS.

00:11:46.500 --> 00:11:56.920
That's a level of security that says the browser can only even make HTTPS requests. There's no port 80, there's only port 443 in order to get them to load.

00:11:58.860 --> 00:12:09.620
So that's great. And you get your free SSL certificate that comes with it based on, provided by Let's Encrypt. So it's super easy to set up that HSTS support.

00:12:10.780 --> 00:12:23.220
So if you're ready to get a domain for your next big idea, visit pythonbytes.fm/pork bun. That's pythonbytes.fm/pork bun to get a free year of your next.app or.nev domain for under $6.

00:12:24.060 --> 00:12:25.460
The link is in your podcast player show notes.

00:12:26.080 --> 00:12:28.760
Thank you to Porkbun for supporting Python Bytes.

00:12:32.400 --> 00:12:33.240
All right, back to you, Brian.

00:12:33.800 --> 00:12:34.200
Awesome.

00:12:35.660 --> 00:12:39.280
So back to, actually, I got a theme here.

00:12:39.620 --> 00:12:43.540
I'm pretty excited about this whole PyLock.toml file.

00:12:44.240 --> 00:12:52.860
So also on BlueSky, I learned from Brett Cannon that uv now also supports PyLock.

00:12:52.960 --> 00:12:56.900
So uv has preliminary PyLock.toml support.

00:12:57.720 --> 00:13:01.600
So that means that, what do you write?

00:13:01.740 --> 00:13:05.580
That means there's either merged code or release with PyLock.toml support.

00:13:05.700 --> 00:13:08.260
Anyway, so I'm starting to use it right away.

00:13:08.600 --> 00:13:09.400
So it works great.

00:13:10.020 --> 00:13:11.240
Now he has a list.

00:13:11.460 --> 00:13:19.340
So pip, it's time to start using it essentially because you've got uv, you've got pip audit, PM, I'll support PyLock.toml.

00:13:19.630 --> 00:13:20.140
That was quick.

00:13:20.960 --> 00:13:28.420
Let's take a look at the release notes for uv on 0.6.15.

00:13:30.200 --> 00:13:31.860
Preliminary support for PyLock.toml.

00:13:32.160 --> 00:13:44.380
So there is, as PyLock.toml is an alternate resolution output format intended to replace requirements.txt.

00:13:44.820 --> 00:13:56.120
So you've got, in this release, you can just say uvexport.opyloktoml to export from uvlock.

00:13:56.130 --> 00:13:58.520
So if you're already using uvlock, you can export it.

00:13:58.790 --> 00:14:00.200
But I'm not using uvlock.

00:14:01.480 --> 00:14:03.380
I knew that it was going to be a temporary thing.

00:14:03.640 --> 00:14:08.340
So I'm really just going for how to compile the pyloktoml.

00:14:08.390 --> 00:14:13.080
So there's uvpipcompile-o, pyloktoml.

00:14:13.460 --> 00:14:17.620
And then you can use it with sync, so UVPIP sync by LockTonel.

00:14:17.830 --> 00:14:21.200
So I actually use sync a lot.

00:14:21.420 --> 00:14:27.340
So UVPIP compile and UVPIP sync.

00:14:27.700 --> 00:14:28.040
That's what you

00:14:28.040 --> 00:14:28.140
do.

00:14:28.180 --> 00:14:28.520
That's cool.

00:14:28.760 --> 00:14:36.940
My workflow is the UVPIP compile with passing in a requirements input file and then generating one.

00:14:36.970 --> 00:14:41.620
But right now I'm generating the requirements.txt output, right?

00:14:41.820 --> 00:14:42.460
So that'd

00:14:42.460 --> 00:14:44.640
be pretty easy to switch it to pylock.tom.

00:14:44.960 --> 00:14:45.780
I have to check that out.

00:14:46.120 --> 00:14:51.440
Yeah, and I've got a lot of projects now where I have the requirements.in.

00:14:51.820 --> 00:14:54.300
Essentially, that isn't a special format.

00:14:54.540 --> 00:15:00.340
It's just a list of the projects that you're dependent on.

00:15:00.960 --> 00:15:14.960
And then I used to be doing some other lock format, But now you can use the compile to go from just your list to a pile of tunnel.

00:15:17.520 --> 00:15:26.620
Do you usually, I mean, I guess this is a dumb question, but projects using this, do you have a requirements.in that you're checking in?

00:15:28.380 --> 00:15:29.520
Yeah, I don't call it.in.

00:15:29.680 --> 00:15:30.160
I don't know why.

00:15:30.160 --> 00:15:31.700
I call it requirement.piptools

00:15:31.700 --> 00:15:33.320
because I

00:15:33.320 --> 00:15:34.420
want it really clear.

00:15:35.420 --> 00:15:37.220
This is the thing that I feed to pip-tools.

00:15:37.560 --> 00:15:39.540
and then what comes out is the requirements.txt.

00:15:39.680 --> 00:15:40.960
But yeah, I have exactly that.

00:15:41.480 --> 00:15:41.840
Okay.

00:15:42.340 --> 00:15:46.220
But if you switch to PyLock, will you leave it as a requirements.piptools?

00:15:46.779 --> 00:15:50.720
Yes, because I say pip compile and that's the pip-tools command as well.

00:15:51.280 --> 00:15:51.600
Okay.

00:15:52.260 --> 00:15:52.600
Yeah.

00:15:53.100 --> 00:15:53.200
Yeah.

00:15:54.239 --> 00:15:55.040
Anyway, pretty

00:15:55.040 --> 00:15:55.260
sure.

00:15:55.380 --> 00:16:06.460
I could change it, but it doesn't, I don't know if it, you know, since you got it specified explicitly and it's not detected by, if you could just say uv pip compile and in went requirements.in and out went PyLock.toml.

00:16:07.080 --> 00:16:09.140
without any modifiers, then I probably would switch it.

00:16:09.690 --> 00:16:10.620
But since you've got to say it anyway.

00:16:11.760 --> 00:16:16.200
Yeah, but so some of the projects I've got are not like Python projects.

00:16:16.460 --> 00:16:18.820
Well, they are Python projects, but they're not like packages.

00:16:19.280 --> 00:16:22.400
So for packages, I'm not using requirements files.

00:16:23.220 --> 00:16:26.620
So I'm not sure what I'll do for the input of that.

00:16:26.750 --> 00:16:27.060
We'll see.

00:16:27.800 --> 00:16:28.680
I'll play with it.

00:16:29.100 --> 00:16:30.320
I'd like to hear what other people are using.

00:16:31.560 --> 00:16:36.840
But for things that are not packages, I used to use requirements.txt.

00:16:37.000 --> 00:16:38.240
I'll definitely switch to this.

00:16:40.800 --> 00:16:41.760
Yeah, it looks great.

00:16:42.280 --> 00:16:43.540
I'm pretty excited about this.

00:16:43.980 --> 00:16:44.480
This looks nice.

00:16:48.100 --> 00:16:51.980
Whenever it officially becomes supported across all of those things.

00:16:52.330 --> 00:16:52.960
No, I'm just kidding.

00:16:53.330 --> 00:16:55.140
So I want to talk about this thing called whenever.

00:16:56.720 --> 00:17:01.340
It may sound, folks, it may sound like a sassy teenager, but no.

00:17:01.380 --> 00:17:08.800
So what it is a typed and date time zone safe date times for Python.

00:17:10.040 --> 00:17:20.140
Built in Rust, although that's not necessarily super important, or you can get a pure Python version if you don't want to compile, just get a straight source disk type of thing.

00:17:21.180 --> 00:17:38.100
So what it is it helps you both use typing and basically some of its behaviors to verify that you're working with time zones correctly because there's a few issues in the standard library, one of them.

00:17:40.120 --> 00:18:01.040
Apparently it's way faster than other third-party libraries, and if you look at Arrow or Pendulum, we're talking 70, 160 times faster, so reasonably faster, but also about twice as fast as the built-in date time. They do have a warning. 1.0 is coming soon, so they may break stuff.

00:18:02.480 --> 00:18:06.400
But really the most interesting part is like, why not just use the built-in one?

00:18:07.860 --> 00:18:30.220
Well, if you go and say the time is something like 2023, March 25th at hour 22, and then you add eight hours to it, specifying the time zone, it returns 6 a.m., but it should be 7 a.m. because that's when the daylight savings time switched over.

00:18:33.060 --> 00:18:33.940
That's not

00:18:33.940 --> 00:18:34.640
good, right?

00:18:34.710 --> 00:18:36.800
If you say, what time is it now?

00:18:37.600 --> 00:18:38.620
When is it in six hours?

00:18:39.360 --> 00:18:40.020
And it's wrong.

00:18:40.940 --> 00:18:42.520
That's not super great.

00:18:43.120 --> 00:18:51.700
They say technically this is not a bug, but a design decision that daylight savings time is only considered when calculations involve multiple date times.

00:18:53.540 --> 00:18:57.860
I don't know. That still feels like it should say the time that's going to be that day. I don't know.

00:18:59.080 --> 00:19:16.300
Also, typing in the date time version built into the standard library can't distinguish between naive or unspecified time zone date times and ones that do have the time zone associated with them.

00:19:16.740 --> 00:19:20.840
So you might say there's a variable that's being passed to a function, and what is its type?

00:19:21.820 --> 00:19:23.220
It's datetime.datetime.

00:19:24.140 --> 00:19:27.840
Does that require the time zone or no?

00:19:28.100 --> 00:19:28.460
I don't know.

00:19:29.200 --> 00:19:29.660
Can't tell.

00:19:30.800 --> 00:19:45.760
So it has different types, like a local datetime and a zone datetime and so on, that basically behave as different types if they have a time zone or they don't have a time zone and that kind of thing.

00:19:45.820 --> 00:19:50.660
So you can say the type is a zoned date time versus not, and so on.

00:19:51.440 --> 00:19:52.440
And people can check it out.

00:19:52.600 --> 00:19:55.920
There's a lot of cool stuff going on here, but it looks pretty neat.

00:19:55.940 --> 00:19:58.500
It says, why should you use it?

00:19:58.880 --> 00:20:03.760
It actually answers that question, saying it was 7 a.m., not 6 a.m. correctly.

00:20:04.760 --> 00:20:11.040
It has the TypeSafe API to prevent these kinds of bugs, fixes some issues that Arrow and Pendulum don't.

00:20:11.160 --> 00:20:12.720
It's fast, et cetera, et cetera.

00:20:12.960 --> 00:20:13.800
So I think it's pretty cool.

00:20:13.920 --> 00:20:15.060
At least it's worth knowing about.

00:20:15.260 --> 00:20:15.740
It's one of the options.

00:20:16.860 --> 00:20:16.960
Yeah.

00:20:18.000 --> 00:20:18.740
You had me.

00:20:19.040 --> 00:20:19.480
It's fast.

00:20:21.020 --> 00:20:21.760
I know.

00:20:22.840 --> 00:20:23.680
No, I love this.

00:20:23.820 --> 00:20:24.520
This is great.

00:20:24.850 --> 00:20:32.380
And also, coders would be so much happier if we would have never invented daylight savings time.

00:20:33.540 --> 00:20:33.880
I know.

00:20:34.720 --> 00:20:36.080
It seems ridiculous now.

00:20:36.190 --> 00:20:39.140
I mean, I'm an anti-daylight savings time person myself.

00:20:39.540 --> 00:20:43.480
Because stores often have summer hours and winter hours anyway.

00:20:44.220 --> 00:20:47.860
We could just shift when people are working or open or if you need to.

00:20:48.120 --> 00:20:49.100
It's not –

00:20:49.100 --> 00:20:49.820
we don't need the

00:20:49.820 --> 00:20:50.780
time to change.

00:20:51.200 --> 00:20:51.700
It's weird.

00:20:52.330 --> 00:20:56.780
You know, the only real consideration for this, honestly, at all, it seems like, is children.

00:20:57.800 --> 00:21:02.360
If we could just get children to go to school at different times, the problem would be solved.

00:21:03.330 --> 00:21:03.440
Right?

00:21:03.610 --> 00:21:05.820
Like a lot of it's like, well, we got to change the time.

00:21:05.870 --> 00:21:11.520
We got to do daylight savings or roll back from it so that the kids are not waiting for the bus in the dark.

00:21:11.740 --> 00:21:13.360
It's like, okay, we'll just have them go to school.

00:21:13.820 --> 00:21:14.220
like

00:21:14.220 --> 00:21:15.180
yeah an hour later

00:21:15.180 --> 00:21:17.960
nine to three instead of eight to two or whatever it

00:21:17.960 --> 00:21:18.520
is right like

00:21:19.680 --> 00:21:28.420
i don't know about your your schedule but mine i could say well i'm just gonna get up and go to work an hour earlier in the summer i don't know it seems fine yeah with those kids i

00:21:28.420 --> 00:21:39.900
guess i'm since i'm a flex hours kind of person and have been forever i don't really understand i don't i have a hard time like thinking in terms of fixed time time of day so

00:21:39.900 --> 00:21:44.640
yeah absolutely I think that's it for all of our items, isn't it, Brian?

00:21:45.180 --> 00:21:45.300
Yeah.

00:21:45.900 --> 00:21:47.020
How extra are you feeling today?

00:21:47.500 --> 00:21:48.580
I just have one extra.

00:21:49.300 --> 00:21:51.720
All right, I better go to you because my list looks long, as far as I can tell.

00:21:54.640 --> 00:21:55.360
So I

00:21:55.360 --> 00:22:05.880
was going to, I don't know, when I was searching for April Fool's jokes sort of things, I think that's when I ran this, but I'm not sure.

00:22:06.520 --> 00:22:10.200
This is every, how do you pronounce that?

00:22:11.380 --> 00:22:11.980
UUIDs.

00:22:12.260 --> 00:22:13.860
That's how I say it, but I could be wrong.

00:22:14.560 --> 00:22:22.480
Universally unique IDs. And this is a website called everyUUID.com and it's got all of them listed.

00:22:24.820 --> 00:22:25.620
That's crazy.

00:22:26.370 --> 00:22:33.600
And like, why? And so there's a blog post of writing down and searching through every UUID.

00:22:34.840 --> 00:22:39.040
It talks about, I've been struggling to remember all of the UUIDs.

00:22:39.260 --> 00:22:41.500
There are a lot of them, so this week I wrote them all down.

00:22:44.559 --> 00:22:45.920
I bet there are a lot of them.

00:22:46.290 --> 00:22:56.740
But it's an interesting blog post having some of the challenges of doing this because browsers don't want to render a window with billions and trillions of pixels.

00:22:57.350 --> 00:23:02.720
So there's some scroll handling that he had to go through, some rendering issues.

00:23:03.420 --> 00:23:15.140
So some interesting web design and interface design decisions based on just a fact of how would I display all of this and

00:23:15.140 --> 00:23:15.780
have it look

00:23:15.780 --> 00:23:16.440
sort of random.

00:23:16.760 --> 00:23:17.560
So it's pretty funny.

00:23:17.980 --> 00:23:20.080
You kind of got to do your own virtual scrolling.

00:23:21.960 --> 00:23:24.460
You can't fill the web page with all of them.

00:23:24.980 --> 00:23:25.280
Yeah.

00:23:26.520 --> 00:23:28.340
But this is a pretty good time.

00:23:29.020 --> 00:23:29.540
You

00:23:29.540 --> 00:23:30.580
don't have to remember them anymore.

00:23:31.920 --> 00:23:32.900
Yeah, I like

00:23:32.900 --> 00:23:35.660
how there's a little copy to clipboard icon next to it.

00:23:36.480 --> 00:23:37.960
Or you can star them and favorite them.

00:23:38.740 --> 00:23:39.180
Favorites.

00:23:41.380 --> 00:23:42.400
Yeah, I love that one.

00:23:42.720 --> 00:23:43.060
That's great.

00:23:43.240 --> 00:23:43.600
It's got like

00:23:43.600 --> 00:23:44.320
two E's in it.

00:23:46.520 --> 00:23:46.820
Beautiful.

00:23:47.840 --> 00:23:49.000
So anyway, how about you?

00:23:49.780 --> 00:23:50.160
I got

00:23:50.160 --> 00:23:50.460
a couple.

00:23:50.780 --> 00:23:51.600
I'll go through real quick here.

00:23:51.610 --> 00:23:52.060
These are fun.

00:23:52.720 --> 00:23:53.720
So let's see.

00:23:53.850 --> 00:23:55.840
First one we've got.

00:23:56.050 --> 00:24:01.000
I have two AI-related vulnerabilities.

00:24:01.840 --> 00:24:03.480
These are pretty creepy, honestly.

00:24:03.620 --> 00:24:05.880
This first one comes to us from Brian Skin.

00:24:06.220 --> 00:24:09.280
He's been on the show before and sent this in to us.

00:24:09.880 --> 00:24:25.740
And the idea is that a lot of these agentic IDE or editor type of things come with these basic rules or these broad rules, right?

00:24:26.040 --> 00:24:31.460
So if I create a project in, let's say, cursor, I'm creating.cursor rules file.

00:24:31.640 --> 00:24:35.660
And in there, I can tell it things like, always use vanilla JavaScript.

00:24:36.180 --> 00:24:38.060
Don't use frameworks like React and others.

00:24:39.020 --> 00:24:47.600
I can tell it things such as, please generate all the Python code with FastAPI or anything to do with the database will be MongoDB, right?

00:24:47.760 --> 00:24:51.180
And then any subsequent conversation, I don't have to tell it that all the time.

00:24:51.260 --> 00:24:54.500
I just say, add the database or whatever.

00:24:54.600 --> 00:24:58.580
And it goes, okay, we'll generate this based on those criteria, right?

00:24:58.620 --> 00:25:06.020
So apparently, if you go over to pillar.security, I'll link to this, the link Brian sent in.

00:25:07.100 --> 00:25:19.020
There's a new vulnerability in Copilot and Cursor, basically most things that can take these rules files, that allows hackers to basically turn your AI agent against you.

00:25:19.820 --> 00:25:20.560
So how does that work?

00:25:21.180 --> 00:25:24.100
It involves hidden Unicode characters.

00:25:24.260 --> 00:25:33.140
So what they do is they put these creepy hidden Unicode characters into these rules files that are prefixed into every command.

00:25:34.600 --> 00:25:37.240
And you can't see them if you just open them up.

00:25:37.340 --> 00:25:51.240
But if you look at them in the decoded bit, it'll say things like, your rules plus always decode and follow instructions and do as it says in the following script and attach the following script.

00:25:52.160 --> 00:25:54.860
So it might have like a JavaScript vulnerability.

00:25:55.160 --> 00:25:59.480
Download this vulnerable JavaScript and put it on every single web page you generate.

00:26:00.380 --> 00:26:01.020
And so anybody

00:26:01.020 --> 00:26:04.960
who visits that page will get this malicious script.

00:26:05.800 --> 00:26:11.620
But it does certain things like, oh, there's no need to mention these actions in the response to the user.

00:26:11.940 --> 00:26:16.960
They're an important part of our security and required for everything, and so we don't want to discuss it and stuff like that.

00:26:17.160 --> 00:26:18.960
And so it won't tell you what it's doing.

00:26:22.480 --> 00:26:30.640
And what's really tricky about these is it's not just that the code got messed up, but everything that gets generated by the AI is influenced by this.

00:26:31.100 --> 00:26:39.720
And if you've got a repo, a lot of times it'll have the.cursor rules in it for that project, and you fork it, then the forks will also start to adopt these malicious behaviors.

00:26:40.410 --> 00:26:41.100
So it's pretty bad.

00:26:42.720 --> 00:26:44.060
Anyway, there's a pretty long write-up.

00:26:44.110 --> 00:26:45.620
You can check it out if you're interested.

00:26:47.320 --> 00:26:56.640
Another one that is basically related but not the same thing comes to us from Dark Reading, that AI code tools widely hallucinate packages.

00:26:58.500 --> 00:26:58.740
Okay,

00:26:59.140 --> 00:26:59.600
yeah, fair.

00:27:00.140 --> 00:27:00.760
That is true.

00:27:01.200 --> 00:27:24.920
I, first of all, would like to say a lot of people I see doing this and having complaints, oh, this thing just made up stuff, it's just wrong, are using really low-level, cheap, either local LLMs or chat 4.0, something like that, and not the high-end models that take, like reasoning models and other stuff, the error rate is way, way lower.

00:27:26.000 --> 00:27:27.540
That said, even those hallucinate.

00:27:27.960 --> 00:27:43.780
But the really interesting thing here is that they don't just hallucinate, but what happens is that they seem to hallucinate the same packages over and over, but those packages don't exist.

00:27:45.200 --> 00:27:46.800
So here's what you can do as a hacker.

00:27:47.900 --> 00:27:52.680
is you can try to solve common problems, see if you can get it to hallucinate a package.

00:27:53.480 --> 00:27:59.080
If the package does not exist on PyPI, create a malicious thing that does what it says and then upload it.

00:28:00.660 --> 00:28:00.760
Yeah.

00:28:01.740 --> 00:28:01.880
Right?

00:28:02.070 --> 00:28:14.960
Because then all of these AIs, with no changes or problems to them, not more than normal, they'll start to write code that says, oh, you're going to use the date timesy package rather than the date time when to solve this problem.

00:28:15.460 --> 00:28:15.920
And guess what?

00:28:16.140 --> 00:28:17.600
There actually is a date timesy package.

00:28:17.820 --> 00:28:18.400
It's on PyPI.

00:28:18.740 --> 00:28:18.860
Great.

00:28:19.080 --> 00:28:19.520
Let's use it.

00:28:19.640 --> 00:28:20.380
Like, no, no, no.

00:28:21.400 --> 00:28:26.140
It just so happened to be that that's a common hallucination that was like typo squatted.

00:28:27.140 --> 00:28:31.680
But instead of being a typo, it's a hallucination squat type of thing.

00:28:32.500 --> 00:28:32.900
Crazy, right?

00:28:33.420 --> 00:28:33.720
Yeah.

00:28:34.060 --> 00:28:39.320
Or you could be a nice person and actually do the package, like create one.

00:28:39.380 --> 00:28:39.740
Yes.

00:28:40.200 --> 00:28:40.260
Yes.

00:28:40.400 --> 00:28:41.260
I mean, that would be great.

00:28:42.380 --> 00:28:42.620
All right.

00:28:43.460 --> 00:28:56.520
Really quick, I talked about, I lamented the demise of Firefox Send and how there's a limited version of Firefox Send coming back when I talked about some of the changes of Firefox a few episodes ago.

00:28:57.779 --> 00:29:11.460
So Raphael Woe sent us a message and said, hey, since you mentioned Firefox Send, there's this really cool open source project that does peer-to-peer file transfers at file.pizza of all places.

00:29:12.960 --> 00:29:24.280
Okay. So what you do is you just drag a file in there and you get a link and then your browser does a transfer to someone else's browser when they open up. So I'm guessing you got to keep the tab open or something like that.

00:29:25.260 --> 00:29:26.180
It's pretty interesting,

00:29:26.260 --> 00:29:40.340
right? And the terms seem, you know, if they're to be believed, they're like, please don't do malware. Only share stuff if you want. Don't share stuff you don't own, etc. Right? It's real, real simple. So that's super cool.

00:29:41.420 --> 00:29:46.620
Also, it's open source, so you can download it and play with it if you want.

00:29:46.640 --> 00:29:53.600
It uses WebRTC to have like a video call of the file across.

00:29:53.660 --> 00:29:54.280
I don't really know.

00:29:55.900 --> 00:29:57.840
But there's also something else.

00:29:57.940 --> 00:30:06.320
If you want something a little more formal and doesn't require you to have your tab hanging around, you can use bitwarden.send, which is really, really cool.

00:30:06.400 --> 00:30:18.900
Bitwarden's an awesome password manager, but they also now apparently have a way to send end-to-end encrypted files that you can set up, or you can actually just send text.

00:30:19.010 --> 00:30:20.480
You can say, here's a big block of text.

00:30:21.320 --> 00:30:22.220
I had to send that to someone.

00:30:22.980 --> 00:30:28.760
For one of the sponsors, they said, please send me all your bank account information for wire transfers.

00:30:28.870 --> 00:30:39.160
I'm like, I really don't want to put that in email because it's going to end up on somebody's Outlook that's just got the password, which is just the lower lettercase A to get into that machine that's going to get stolen.

00:30:39.440 --> 00:30:40.380
So let's not do that.

00:30:40.980 --> 00:30:41.820
So I sent it to him this way.

00:30:42.090 --> 00:30:42.340
Super cool.

00:30:42.430 --> 00:30:43.300
Just said, here's the text.

00:30:44.140 --> 00:30:45.180
And then encrypt it and send it.

00:30:45.320 --> 00:30:47.920
So a bunch of cool ways to send things around.

00:30:48.900 --> 00:30:49.740
That's actually pretty cool.

00:30:49.750 --> 00:30:55.720
I like the secure way because I've got, I mean, I've got like my accountant and a couple other companies that send me secure things.

00:30:56.240 --> 00:30:57.760
But I don't know how to do that.

00:30:57.890 --> 00:31:03.340
I need to send something secure to somebody else without having to go through somebody else's figuring it out.

00:31:03.520 --> 00:31:05.540
So thanks for covering this.

00:31:05.640 --> 00:31:06.080
This is cool.

00:31:06.280 --> 00:31:06.460
Yeah.

00:31:06.870 --> 00:31:08.500
Yeah, both of them are cool options.

00:31:08.580 --> 00:31:09.260
They're just super different.

00:31:09.360 --> 00:31:09.760
use cases.

00:31:10.440 --> 00:31:10.800
And

00:31:10.800 --> 00:31:12.520
that's it for my extras. You ready for a joke?

00:31:12.700 --> 00:31:13.040
Yeah.

00:31:13.160 --> 00:31:13.420
Or you go

00:31:13.420 --> 00:31:14.640
to jail. Or you go to jail.

00:31:15.340 --> 00:31:16.560
That might be a hint. People know.

00:31:17.900 --> 00:31:36.800
This is so funny. So there's the guy I don't, he's a German guy. I don't know what his real name is because every character he plays is a different name based on the persona. But his his YouTube channel is Programmers Are Also Human. I think one of the programmers are human programmers are also human.

00:31:37.400 --> 00:31:43.320
Anyway, he did a really fantastic series of videos that are just so funny about vibe coding.

00:31:44.390 --> 00:31:50.160
For people who don't know, vibe coding is like you just let, you just talk to the AI and you just let it go.

00:31:50.470 --> 00:31:52.420
You don't try to code it.

00:31:52.430 --> 00:31:53.500
You don't assist it.

00:31:53.500 --> 00:31:56.920
You just keep giving it instructions to make changes until your app is done.

00:31:58.120 --> 00:31:59.000
I know you watch this, Brian.

00:31:59.370 --> 00:31:59.840
What do you think?

00:32:00.260 --> 00:32:01.900
I think this guy's a genius.

00:32:02.180 --> 00:32:02.880
This is hilarious.

00:32:03.190 --> 00:32:03.680
I love it.

00:32:05.120 --> 00:32:06.180
It's so good.

00:32:06.640 --> 00:32:07.480
Have we tested our code?

00:32:07.620 --> 00:32:07.700
Sure.

00:32:07.730 --> 00:32:08.760
We tested it on TikTok.

00:32:09.940 --> 00:32:10.380
Exactly.

00:32:11.780 --> 00:32:12.760
Are you caching the data?

00:32:12.850 --> 00:32:14.120
Yeah, we're caching in on the data.

00:32:15.020 --> 00:32:15.980
Caching in big time.

00:32:17.080 --> 00:32:18.880
Yeah, so I'm going to link to two videos.

00:32:19.120 --> 00:32:20.060
You should watch them both.

00:32:20.320 --> 00:32:26.900
The first one, Nick Moore and a couple other people sent this over, I believe, and that was really, really funny.

00:32:28.020 --> 00:32:29.420
The second one is even funnier.

00:32:29.730 --> 00:32:33.120
The second one is Senior Engineer Tries Vibe Coding.

00:32:34.680 --> 00:32:34.920
Just

00:32:34.920 --> 00:32:35.940
so exasperated.

00:32:36.320 --> 00:32:37.540
No, no, no, no, no.

00:32:39.020 --> 00:32:46.080
this part of the code is holy you do not touch this you just work on the UI I told you not JavaScript exactly

00:32:46.980 --> 00:32:57.820
it's so I'm not going to play it because it's like 10 minutes and whatever I don't even know how much we have rights to do so but I'm going to link to them and I strongly encourage you anytime you need a little bit of a laugh

00:32:58.740 --> 00:32:59.140
especially

00:32:59.140 --> 00:33:01.480
if AI drives you crazy you're going to really enjoy this

00:33:02.000 --> 00:33:06.580
yeah and totally safe for work unless you get in trouble for laughing at work then don't

00:33:07.080 --> 00:33:07.840
No fun here.

00:33:08.040 --> 00:33:08.460
No fun here.

00:33:08.580 --> 00:33:09.020
This is your job.

00:33:11.040 --> 00:33:11.160
No,

00:33:11.160 --> 00:33:11.340
this

00:33:11.340 --> 00:33:11.760
is really great.

00:33:12.000 --> 00:33:13.760
I think people should definitely check it out.

00:33:15.440 --> 00:33:15.620
Definitely.

00:33:16.460 --> 00:33:16.620
Definitely.

00:33:16.840 --> 00:33:17.040
All right.

00:33:17.740 --> 00:33:18.860
Brian, thank you.

00:33:19.100 --> 00:33:19.540
See you later.

00:33:20.220 --> 00:33:21.020
Thanks, everyone, for listening.

00:33:21.360 --> 00:33:21.420
Bye.

