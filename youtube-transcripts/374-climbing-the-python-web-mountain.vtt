WEBVTT

00:00:00.001 --> 00:00:02.500
Hey Brian, hey everyone.

00:00:02.500 --> 00:00:03.680
- Hey.

00:00:03.680 --> 00:00:04.840
- How's it going?

00:00:04.840 --> 00:00:06.760
- It's going great.

00:00:06.760 --> 00:00:08.840
- Yeah, excellent, excellent.

00:00:08.840 --> 00:00:12.680
Well, I think we should kick this show off

00:00:12.680 --> 00:00:15.040
and a little bit early this week.

00:00:15.040 --> 00:00:17.440
- Yeah, I appreciate that.

00:00:17.440 --> 00:00:18.740
We're doing it Monday.

00:00:18.740 --> 00:00:20.440
- Yeah, doing it Monday.

00:00:20.440 --> 00:00:23.240
Sometimes it's fun to mix it up and record on a Monday.

00:00:23.240 --> 00:00:25.200
- Yeah.

00:00:25.200 --> 00:00:28.240
- Hello and welcome to Python Bytes

00:00:28.240 --> 00:00:30.360
where we deliver Python news and headlines

00:00:30.360 --> 00:00:32.720
directly to your earbuds.

00:00:32.720 --> 00:00:37.720
This is episode 374, recorded March 11th, 2024.

00:00:37.720 --> 00:00:39.680
I am Michael Kennedy.

00:00:39.680 --> 00:00:40.800
- And I'm Brian Okken.

00:00:40.800 --> 00:00:45.240
- And this episode is brought to you by Scout APM.

00:00:45.240 --> 00:00:50.240
Check them out at pythonbytes.fm/scout.

00:00:50.240 --> 00:00:52.720
I'll tell you more about them later.

00:00:52.720 --> 00:00:54.280
If you'd like to connect with us,

00:00:54.280 --> 00:00:55.960
Mastodon is the main place.

00:00:55.960 --> 00:01:00.960
We're also on X Twitter, but primarily on Mastodon

00:01:00.960 --> 00:01:04.320
and that's @mkennedy, @brianokken@pythonbytes,

00:01:04.320 --> 00:01:07.160
all at fosstodon.org and watch us live,

00:01:07.160 --> 00:01:10.840
usually Tuesdays at 10 a.m. Pacific time.

00:01:10.840 --> 00:01:13.600
However, different today, but check it out

00:01:13.600 --> 00:01:15.080
at pythonbytes.fm/live.

00:01:15.080 --> 00:01:16.520
You'll be able to like get notified

00:01:16.520 --> 00:01:19.000
about the next upcoming recording.

00:01:19.000 --> 00:01:22.300
I usually put that up right after we're done with this one.

00:01:22.300 --> 00:01:26.660
Brian, before we jump into your first topic,

00:01:26.660 --> 00:01:28.760
I wanna just take a moment and appreciate

00:01:28.760 --> 00:01:33.080
the beginning of summer,

00:01:33.080 --> 00:01:35.780
the first step towards summer coming.

00:01:35.780 --> 00:01:39.220
It is daylight savings switch over here in the U.S.

00:01:39.220 --> 00:01:41.100
and I know it is much maligned by people,

00:01:41.100 --> 00:01:44.220
but I was delighted to see the sun was up

00:01:44.220 --> 00:01:47.660
past 7 p.m. yesterday after living in dark and rain

00:01:47.660 --> 00:01:49.660
for months and months.

00:01:49.660 --> 00:01:51.340
I'm feeling the summer.

00:01:51.340 --> 00:01:53.980
I know it's not quite there yet, but.

00:01:53.980 --> 00:01:57.540
- Yeah, I didn't really notice it until after I woke up.

00:01:57.540 --> 00:01:58.380
- Yeah.

00:01:58.380 --> 00:02:00.500
- I woke up and I'm like, oh gosh,

00:02:00.500 --> 00:02:03.140
I thought I'd slept in till like 10,

00:02:03.140 --> 00:02:04.300
but it was really 11.

00:02:04.300 --> 00:02:07.940
So, sleep the day away.

00:02:07.940 --> 00:02:09.540
- Oh, beautiful, beautiful, beautiful.

00:02:09.540 --> 00:02:12.020
All right, well, over to Python.

00:02:12.020 --> 00:02:13.300
What's your first thing?

00:02:13.300 --> 00:02:15.500
- Okay, well, I wanna talk about spaghetti code

00:02:15.500 --> 00:02:18.900
a little bit, actually, or how to fix it.

00:02:18.900 --> 00:02:20.340
So there's an--

00:02:20.340 --> 00:02:21.620
- Is that what you get when you're real hungry?

00:02:21.620 --> 00:02:23.260
You're like, what are you gonna have for dinner?

00:02:23.260 --> 00:02:25.180
Maybe some spaghetti code.

00:02:25.180 --> 00:02:26.020
- So--

00:02:26.020 --> 00:02:27.060
- A little carbonara.

00:02:27.060 --> 00:02:28.900
(laughing)

00:02:28.900 --> 00:02:30.140
- Is that how you pronounce it?

00:02:30.140 --> 00:02:32.220
Carbonara, I've never been able to pronounce it.

00:02:32.220 --> 00:02:33.620
- I'm probably gonna get emailed that it's not,

00:02:33.620 --> 00:02:35.100
but that's how I pronounce it.

00:02:35.100 --> 00:02:40.140
- So, article from somebody that goes by Piggly.

00:02:40.140 --> 00:02:44.620
Six ways to improve the architecture of your Python project

00:02:44.620 --> 00:02:46.420
using import linter.

00:02:46.420 --> 00:02:48.540
And I kinda like this article,

00:02:48.540 --> 00:02:50.980
even if you don't wanna use import linter.

00:02:50.980 --> 00:02:54.500
So, because of the six ways to improve the architecture,

00:02:54.500 --> 00:02:56.580
I love that, I love digging into that.

00:02:56.580 --> 00:02:59.500
So, and I actually have a couple of projects

00:02:59.500 --> 00:03:01.500
that I'm working on that I would like to,

00:03:01.500 --> 00:03:03.500
can maybe clean up the architecture a bit.

00:03:03.500 --> 00:03:06.420
So, kind of a fun picture, not sure what's going on here.

00:03:06.420 --> 00:03:09.420
Just a whole bunch of boxes pointing at each other.

00:03:09.420 --> 00:03:13.660
I guess, just indicating that there's circular dependencies

00:03:13.660 --> 00:03:16.380
or something going on.

00:03:16.380 --> 00:03:20.340
And anyway, so a little bit of a discussion

00:03:20.340 --> 00:03:23.540
about why complex architecture might be bad,

00:03:23.540 --> 00:03:26.260
but I don't think any of us need convincing of that.

00:03:26.260 --> 00:03:28.740
Simplifying is a good thing.

00:03:28.740 --> 00:03:32.220
So, the first part talks about maybe setting up an idea

00:03:32.220 --> 00:03:34.540
of like, maybe you could, you have an idea

00:03:34.540 --> 00:03:37.620
of like setting your architecture into layers,

00:03:37.620 --> 00:03:38.900
if that's what you wanna do,

00:03:38.900 --> 00:03:42.740
like a kind of a user layer or an application layer

00:03:42.740 --> 00:03:45.860
plus utilities or something services.

00:03:45.860 --> 00:03:48.500
But there's a tool called the import linter

00:03:48.500 --> 00:03:51.580
that there's a discussion about how to set it up

00:03:51.580 --> 00:03:56.580
so that you can use that to both configure

00:03:56.580 --> 00:03:59.860
what you want your layers to be and then test for it.

00:03:59.860 --> 00:04:02.660
It's like a linting to make sure that you're not importing

00:04:02.660 --> 00:04:03.860
in the wrong direction.

00:04:03.860 --> 00:04:06.380
So, the idea would be like, you're not importing,

00:04:06.380 --> 00:04:07.780
like if you want the top level one

00:04:07.780 --> 00:04:10.140
to be calling the lower level ones,

00:04:10.140 --> 00:04:12.160
but not the other way around.

00:04:12.160 --> 00:04:15.060
So, the importing is a way to test that,

00:04:15.060 --> 00:04:16.740
which is, because of that,

00:04:16.740 --> 00:04:18.540
I'm not sure what these arrows mean,

00:04:18.540 --> 00:04:20.340
'cause it doesn't quite make sense

00:04:20.340 --> 00:04:23.440
if it's not an inheritance or calling, I don't know.

00:04:23.440 --> 00:04:24.900
Anyway, it's just an error.

00:04:24.900 --> 00:04:26.100
- That looks pretty interesting.

00:04:26.100 --> 00:04:28.940
I think that means that something from that layer

00:04:28.940 --> 00:04:31.100
is importing something from the bottom layer,

00:04:31.100 --> 00:04:32.140
the lower layer.

00:04:32.140 --> 00:04:36.380
- Yeah, but yeah, okay.

00:04:36.380 --> 00:04:37.260
- I think the things are with,

00:04:37.260 --> 00:04:40.460
you can have stuff like import across within,

00:04:40.460 --> 00:04:43.980
but then it can only, I think it would be an error

00:04:43.980 --> 00:04:47.420
or a warning if maybe say like the data layer

00:04:47.420 --> 00:04:49.500
imported the UI layer sort of thing.

00:04:49.500 --> 00:04:51.540
I think that's what it's saying.

00:04:51.540 --> 00:04:53.860
- Yeah, oh, and it makes more sense

00:04:53.860 --> 00:04:57.260
if I would have drawn the top layer at the top.

00:04:57.260 --> 00:04:59.740
I think it makes more sense to me if you do it the other way.

00:04:59.740 --> 00:05:03.620
Anyway, that's a drawing thing, doesn't really matter.

00:05:03.620 --> 00:05:04.460
And also- - It's probably

00:05:04.460 --> 00:05:05.580
by somebody in Australia,

00:05:05.580 --> 00:05:07.260
'cause everything's upside down down there.

00:05:07.260 --> 00:05:08.260
- Oh yeah.

00:05:08.260 --> 00:05:09.220
- Yeah, that makes sense. - That's probably it.

00:05:09.220 --> 00:05:11.460
- Yeah, yeah, that was it. - Yeah, okay.

00:05:11.460 --> 00:05:15.460
So what happens when you run this is you're,

00:05:15.460 --> 00:05:17.460
the recommendation is you're probably going to get

00:05:17.460 --> 00:05:20.060
a bunch of lint warnings or errors,

00:05:20.060 --> 00:05:23.740
or maybe not, if not, awesome.

00:05:23.740 --> 00:05:26.660
But if you do, the recommendation here,

00:05:26.660 --> 00:05:28.460
which I kind of thought was cool

00:05:28.460 --> 00:05:32.940
was to kind of exclude all of them,

00:05:32.940 --> 00:05:36.580
like go through and add these ignore imports

00:05:36.580 --> 00:05:39.980
and just go through and ignore the ones that fail.

00:05:40.820 --> 00:05:42.860
And I'm like, okay, well, then you're gonna pass

00:05:42.860 --> 00:05:44.700
and it's just gonna ignore everything.

00:05:44.700 --> 00:05:47.660
But the idea behind it is to do it one at a time.

00:05:47.660 --> 00:05:50.100
So it's gonna be overwhelming to get a bunch of errors.

00:05:50.100 --> 00:05:55.100
So ignore them all and then unignore one at a time

00:05:55.100 --> 00:05:56.980
and then go through and fix them.

00:05:56.980 --> 00:05:59.460
So that's where the really,

00:05:59.460 --> 00:06:01.860
the reason why I picked out this article

00:06:01.860 --> 00:06:03.780
isn't really because import linter is cool.

00:06:03.780 --> 00:06:08.140
It might be cool, but it's that these ways

00:06:08.140 --> 00:06:11.420
to fix these import dependencies,

00:06:11.420 --> 00:06:13.620
I thought were really great to walk through.

00:06:13.620 --> 00:06:15.500
There's six of them.

00:06:15.500 --> 00:06:18.500
First one is merging and splitting modules.

00:06:18.500 --> 00:06:21.460
And like, there's an example where you've got resources

00:06:21.460 --> 00:06:26.340
that calls clusters, clusters calls resources.clusterutils,

00:06:26.340 --> 00:06:28.700
and that's going the wrong direction,

00:06:28.700 --> 00:06:31.780
but to fix it, you maybe move those clusterutils

00:06:31.780 --> 00:06:34.140
down into the lower, like a lower library,

00:06:34.140 --> 00:06:35.340
like splitting them off.

00:06:36.420 --> 00:06:38.780
Kind of sort of straightforward,

00:06:38.780 --> 00:06:41.660
but it's good to like, think about this.

00:06:41.660 --> 00:06:44.140
So I like that part of it.

00:06:44.140 --> 00:06:45.740
Dependency injection.

00:06:45.740 --> 00:06:48.000
And if you're the kind of person

00:06:48.000 --> 00:06:50.700
that's kind of afraid of dependency injection,

00:06:50.700 --> 00:06:53.140
then don't even think about that term

00:06:53.140 --> 00:06:54.760
'cause it's not actually that scary.

00:06:54.760 --> 00:06:57.400
Just the term was scary to me for a while.

00:06:57.400 --> 00:06:59.900
So anyway, dependency injection might help

00:06:59.900 --> 00:07:04.260
to be able to pass dependencies down

00:07:04.260 --> 00:07:06.540
into lower layers from upper layers.

00:07:06.540 --> 00:07:08.780
So that's a good way to get around it.

00:07:08.780 --> 00:07:12.940
The interesting, I'm glad that Doug into this,

00:07:12.940 --> 00:07:17.660
is when you do the inversion of, what is it?

00:07:17.660 --> 00:07:18.860
I forget the inversion of control.

00:07:18.860 --> 00:07:20.100
- Inversion of control, yeah.

00:07:20.100 --> 00:07:21.260
- Yeah.

00:07:21.260 --> 00:07:24.140
Sometimes if with Python, that works great,

00:07:24.140 --> 00:07:26.460
except for type hints.

00:07:26.460 --> 00:07:30.060
Sometimes you need to get the type hints,

00:07:30.060 --> 00:07:31.340
getting those right.

00:07:31.340 --> 00:07:35.740
So talking about how to use the protocol

00:07:35.740 --> 00:07:38.700
from typing to get that to work right,

00:07:38.700 --> 00:07:40.940
that discussion's in here, which is great.

00:07:40.940 --> 00:07:41.840
I love protocol.

00:07:41.840 --> 00:07:47.380
Then another discussion about using simpler dependency types

00:07:47.380 --> 00:07:51.500
and then delaying function implementation.

00:07:51.500 --> 00:07:55.380
And then even, what was the last one?

00:07:55.380 --> 00:07:57.740
Looking for six, configuration driven.

00:07:57.740 --> 00:07:59.160
That was interesting.

00:07:59.160 --> 00:08:00.940
I never really thought about doing this.

00:08:00.940 --> 00:08:05.140
The idea is you'd have a settings file or something

00:08:05.140 --> 00:08:09.060
and have that, and then have the string

00:08:09.060 --> 00:08:13.100
that you would import, like marketing.sendSMS.

00:08:13.100 --> 00:08:15.540
And then later on in your calling thing,

00:08:15.540 --> 00:08:18.460
you use import string to import it.

00:08:18.460 --> 00:08:21.980
So you still have the backwards dependency,

00:08:21.980 --> 00:08:26.980
but you don't know it at run, at compile,

00:08:26.980 --> 00:08:28.740
at write time, you know it at run time.

00:08:28.740 --> 00:08:29.580
I don't know.

00:08:29.580 --> 00:08:31.260
I don't know what I think about that.

00:08:31.260 --> 00:08:32.340
But anyway.

00:08:32.340 --> 00:08:34.060
- Yeah, yeah, that's interesting.

00:08:34.060 --> 00:08:35.560
- It's a way to do it.

00:08:35.560 --> 00:08:39.780
And then the last one is replace function calls

00:08:39.780 --> 00:08:41.880
with event driven approaches.

00:08:41.880 --> 00:08:44.860
So like callbacks and stuff like that.

00:08:44.860 --> 00:08:48.180
So these are great architecture things to think about

00:08:48.180 --> 00:08:49.860
when you're cleaning up architecture,

00:08:49.860 --> 00:08:52.260
because it's not always trivial to just say,

00:08:52.260 --> 00:08:53.220
just don't do that.

00:08:53.220 --> 00:08:54.220
Don't do those imports.

00:08:54.220 --> 00:08:55.820
Well, how do you get around it

00:08:55.820 --> 00:08:57.420
if you've designed it that way?

00:08:57.980 --> 00:08:59.900
I think a decent discussion

00:08:59.900 --> 00:09:01.660
about software architecture here.

00:09:01.660 --> 00:09:05.180
- I do think that's pretty interesting.

00:09:05.180 --> 00:09:06.700
And also just more broadly,

00:09:06.700 --> 00:09:10.160
I like the idea of ignoring all the issues

00:09:10.160 --> 00:09:11.740
you might run into with linters

00:09:11.740 --> 00:09:14.720
and then slowly turning the screws

00:09:14.720 --> 00:09:16.460
to make it a little tighter.

00:09:16.460 --> 00:09:20.380
It's good advice because if you have existing code

00:09:20.380 --> 00:09:23.260
in a significant size and you've never done linting on it,

00:09:23.260 --> 00:09:24.760
and then you turn on a linter,

00:09:24.760 --> 00:09:27.140
you feel bad about yourself.

00:09:27.140 --> 00:09:29.820
You're like, I've done all that wrong?

00:09:29.820 --> 00:09:32.180
593 errors, great.

00:09:32.180 --> 00:09:33.500
Well, we'll turn that back off

00:09:33.500 --> 00:09:35.380
'cause I got work to do, you know what I mean?

00:09:35.380 --> 00:09:38.260
- Yeah, well, I'm kind of going through that

00:09:38.260 --> 00:09:39.720
with the rough right now.

00:09:39.720 --> 00:09:43.920
So got some projects where default rough works fine,

00:09:43.920 --> 00:09:47.580
but the rough has like 800 rules or something you can add.

00:09:47.580 --> 00:09:52.140
And so I'm trying to turn on some of those extra features,

00:09:52.140 --> 00:09:54.020
kind of just a few at a time,

00:09:54.020 --> 00:09:55.380
see, testing the waters,

00:09:55.380 --> 00:09:56.940
see how many failures I get.

00:09:56.940 --> 00:09:59.220
And whether I want to clean them up.

00:09:59.220 --> 00:10:00.300
So yeah.

00:10:00.300 --> 00:10:01.960
- Yeah, interesting.

00:10:01.960 --> 00:10:04.540
Just a interesting timing.

00:10:04.540 --> 00:10:06.140
I'm gonna be speaking with Charlie Marsh

00:10:06.140 --> 00:10:07.440
on Talk Python tomorrow.

00:10:07.440 --> 00:10:09.460
- Oh, awesome.

00:10:09.460 --> 00:10:10.700
- About 24 hours from now,

00:10:10.700 --> 00:10:12.780
whatever that makes it for you.

00:10:12.780 --> 00:10:13.740
Out there listening.

00:10:13.740 --> 00:10:15.380
Yeah, and we're gonna talk mostly about UV,

00:10:15.380 --> 00:10:17.740
but I'm sure we'll talk a bit about rough as well.

00:10:17.740 --> 00:10:20.500
- Cool, well, I'm gonna release a episode

00:10:20.500 --> 00:10:22.660
with Charlie Marsh today, so.

00:10:22.660 --> 00:10:24.900
- Well, how about that?

00:10:24.900 --> 00:10:25.740
Awesome, awesome.

00:10:25.740 --> 00:10:27.700
Do you guys talk about uv as well?

00:10:27.700 --> 00:10:30.300
- Yeah, we talked about, yeah, Flickate,

00:10:30.300 --> 00:10:34.140
or not Flickate, talked about rough and Astral

00:10:34.140 --> 00:10:38.540
and UV, most of the conversations around UV

00:10:38.540 --> 00:10:40.740
and some of the discussion around that, so.

00:10:40.740 --> 00:10:42.260
- Nice.

00:10:42.260 --> 00:10:43.100
That'll be fun.

00:10:43.100 --> 00:10:48.100
All right, on to the next one here by Pierce Freeman.

00:10:48.100 --> 00:10:49.220
That's kind of a cool name, isn't it?

00:10:49.220 --> 00:10:53.080
It could be like a double O sort of agent.

00:10:55.020 --> 00:10:57.580
Maybe double O nine, I don't know what that is.

00:10:57.580 --> 00:10:58.740
Not James, but something like that.

00:10:58.740 --> 00:10:59.580
Anyway.

00:10:59.580 --> 00:11:01.500
- Pierce Freeman to the rescue.

00:11:01.500 --> 00:11:05.700
- Exactly, to bring you React and FastAPI in Python.

00:11:05.700 --> 00:11:08.460
In fact, with this framework called Mountaineer.

00:11:08.460 --> 00:11:12.020
So Mountaineer is a batteries included web framework

00:11:12.020 --> 00:11:13.860
for Python in React.

00:11:13.860 --> 00:11:20.140
So this, it plays in a similar space as FastUI

00:11:20.820 --> 00:11:24.740
from Samuel Colvin and the Pydantic crew.

00:11:24.740 --> 00:11:28.860
I don't know enough about them to know

00:11:28.860 --> 00:11:31.140
how truly similar they are.

00:11:31.140 --> 00:11:33.940
I think this is coming from a different angle.

00:11:33.940 --> 00:11:36.700
I think you're doing, you know, so FastUI is more about

00:11:36.700 --> 00:11:39.100
maybe you don't really have to do the React side

00:11:39.100 --> 00:11:41.820
unless you want, and it kind of brings that stuff together.

00:11:41.820 --> 00:11:45.740
Whereas this kind of like you're embracing TypeScript,

00:11:45.740 --> 00:11:48.300
you're embracing React, but you also get

00:11:48.300 --> 00:11:50.800
some really nice Python integration.

00:11:50.800 --> 00:11:54.940
And so if you look down here, what does it say?

00:11:54.940 --> 00:11:58.460
It says it lets you easily build web apps in Python and React

00:11:58.460 --> 00:12:00.620
and if you are familiar with this,

00:12:00.620 --> 00:12:02.020
it should sound familiar to you.

00:12:02.020 --> 00:12:04.800
It should basically seem like what you're used to.

00:12:04.800 --> 00:12:08.540
And if not, then maybe not.

00:12:08.540 --> 00:12:12.700
But it says each framework like Flask or FastAPI

00:12:12.700 --> 00:12:15.820
or Django or whatever has its trade-offs and features.

00:12:15.820 --> 00:12:19.140
And for this one, it focuses on developer productivity

00:12:19.140 --> 00:12:22.420
above all else with production speed of close seconds.

00:12:22.420 --> 00:12:24.400
So type hints up and down the stack,

00:12:24.400 --> 00:12:26.320
front end, back end database,

00:12:26.320 --> 00:12:29.340
trivially easy client server communication.

00:12:29.340 --> 00:12:33.060
So you don't find yourself creating a bunch of APIs

00:12:33.060 --> 00:12:35.540
so that your React stuff can talk to the APIs

00:12:35.540 --> 00:12:37.600
so it can actually get its data and all that,

00:12:37.600 --> 00:12:40.100
which is pretty interesting.

00:12:40.100 --> 00:12:42.020
It comes, this is kind of cool.

00:12:42.020 --> 00:12:43.580
So one of the things you can run into,

00:12:43.580 --> 00:12:44.780
I'm sure you've seen this, Brian,

00:12:44.780 --> 00:12:47.100
it drives me absolutely bonkers.

00:12:47.100 --> 00:12:48.820
You'll go to a website

00:12:48.820 --> 00:12:50.660
and it'll have something on the screen

00:12:50.660 --> 00:12:52.220
and then like half a second later,

00:12:52.220 --> 00:12:54.500
it'll shift around and stuff will like

00:12:54.500 --> 00:12:56.140
all come into existence.

00:12:56.140 --> 00:12:57.500
You know, you'll be like,

00:12:57.500 --> 00:12:59.860
it'll have like the footer will be touching the top

00:12:59.860 --> 00:13:02.060
and then it'll bump out, it'll be a spinner and then stuff.

00:13:02.060 --> 00:13:04.660
You know, it's like, what is it doing?

00:13:04.660 --> 00:13:06.220
- Well, especially when you start reading

00:13:06.220 --> 00:13:07.980
and then a picture pops in

00:13:07.980 --> 00:13:10.940
and what you read pops off the screen.

00:13:10.940 --> 00:13:13.420
- Yeah, another thing that drives me crazy is

00:13:14.720 --> 00:13:17.880
if you paste something into a input,

00:13:17.880 --> 00:13:19.400
but you don't type it,

00:13:19.400 --> 00:13:21.700
sometimes that won't trigger the data binding.

00:13:21.700 --> 00:13:24.920
And you know, like if he's a password,

00:13:24.920 --> 00:13:26.880
password manager type thing or something,

00:13:26.880 --> 00:13:28.000
or you just paste something,

00:13:28.000 --> 00:13:29.880
it'll say, oh, this is invalid.

00:13:29.880 --> 00:13:30.720
What is wrong with this?

00:13:30.720 --> 00:13:32.320
Oh, if you put a space and delete the space.

00:13:32.320 --> 00:13:33.880
Oh, oh, it's valid now.

00:13:33.880 --> 00:13:35.760
It's like, oh, I see.

00:13:35.760 --> 00:13:37.640
So something that would be really nice

00:13:37.640 --> 00:13:40.280
is if you just could ship straight HTML, right?

00:13:40.280 --> 00:13:41.840
- Yeah.

00:13:41.840 --> 00:13:44.560
- Or the first view of that was normal.

00:13:44.560 --> 00:13:46.680
And so what this comes with

00:13:46.680 --> 00:13:49.400
is they actually bundle the V8 engine.

00:13:49.400 --> 00:13:51.000
So on the server side,

00:13:51.000 --> 00:13:54.120
it can render what your browser would do for you

00:13:54.120 --> 00:13:55.720
as final HTML and it delivers it.

00:13:55.720 --> 00:13:58.760
With so optimized server side rendering

00:13:58.760 --> 00:14:00.920
for better accessibility and SEO.

00:14:00.920 --> 00:14:02.360
That's pretty cool, I think.

00:14:02.360 --> 00:14:03.200
- Yeah, that is cool.

00:14:03.200 --> 00:14:04.240
- As a Python thing,

00:14:04.240 --> 00:14:05.980
like normally you hear that as a node thing

00:14:05.980 --> 00:14:06.960
or something, right?

00:14:06.960 --> 00:14:07.800
- Yeah.

00:14:07.800 --> 00:14:09.000
- It also does static analysis

00:14:09.000 --> 00:14:12.840
for validations of like links and CSS and so on.

00:14:12.840 --> 00:14:18.040
And like I said, skip the API or Node.js server

00:14:18.040 --> 00:14:20.380
just for front end clients, okay?

00:14:20.380 --> 00:14:23.760
So all of these things are pretty cool.

00:14:23.760 --> 00:14:26.160
Let me give you a warning and a disclaimer.

00:14:26.160 --> 00:14:28.000
One, if you don't know React real well,

00:14:28.000 --> 00:14:29.880
I don't think you'll really appreciate

00:14:29.880 --> 00:14:31.040
the benefits here that much.

00:14:31.040 --> 00:14:33.880
Like this is really for React people 100%.

00:14:33.880 --> 00:14:35.880
Second, that's not me.

00:14:35.880 --> 00:14:38.960
So I'm gonna do my best to like tell you

00:14:38.960 --> 00:14:39.800
why you might want this.

00:14:39.800 --> 00:14:41.400
I think I can kind of get there.

00:14:41.400 --> 00:14:46.280
So first of all, it has a scaffolding type thing

00:14:46.280 --> 00:14:48.160
called create Mountaineer app.

00:14:48.160 --> 00:14:50.040
And they suggest PipX.

00:14:50.040 --> 00:14:52.320
And I'm loving to see more PipX come along

00:14:52.320 --> 00:14:54.400
for these kinds of tools, right?

00:14:54.400 --> 00:14:57.280
Like you run this once, it's not part of your app.

00:14:57.280 --> 00:14:59.640
You just PipX install it and everything gets going.

00:14:59.640 --> 00:15:00.960
It's great.

00:15:00.960 --> 00:15:03.520
Also uses poetry pretty heavily.

00:15:03.520 --> 00:15:06.000
So what it does is it creates a Python bits

00:15:06.000 --> 00:15:10.320
and then some TypeScript stuff for your front end.

00:15:10.320 --> 00:15:12.720
And it comes with a CLI as well, which is nice.

00:15:12.720 --> 00:15:16.520
It has a built-in Docker containers

00:15:16.520 --> 00:15:19.160
for like managing Postgres databases and so on,

00:15:19.160 --> 00:15:21.360
if you wanna use that, but you don't have to.

00:15:21.360 --> 00:15:23.480
And let's see.

00:15:23.480 --> 00:15:28.240
So another interesting integration is it uses SQL model.

00:15:28.240 --> 00:15:30.680
So that's the typing in the data layer aspect.

00:15:30.680 --> 00:15:34.320
So SQL model is Pydantic plus SQLAlchemy,

00:15:34.320 --> 00:15:36.920
basically by Sebastian Ramirez.

00:15:36.920 --> 00:15:38.520
So that's cool.

00:15:38.520 --> 00:15:42.400
And then you go down here and you create controllers.

00:15:42.400 --> 00:15:45.320
So it's kind of a class-based type of thing.

00:15:45.320 --> 00:15:46.840
First, it seems a little unnecessary,

00:15:46.840 --> 00:15:50.880
but as you interact with it and expose more features

00:15:50.880 --> 00:15:54.760
to the React layer, you'll see that kind of relevant there.

00:15:54.760 --> 00:16:00.120
So you just say, I'm gonna render, say my database things

00:16:00.120 --> 00:16:02.160
and some other pieces of data.

00:16:02.160 --> 00:16:06.800
And then down somewhere, you've got your React code

00:16:06.800 --> 00:16:10.560
and your TSX, your React component there.

00:16:10.560 --> 00:16:13.160
And if you've written React stuff,

00:16:13.160 --> 00:16:15.920
you should know pretty well how it works,

00:16:15.920 --> 00:16:17.440
but it manages passing all that data

00:16:17.440 --> 00:16:19.360
over like server state that to-dos,

00:16:19.360 --> 00:16:21.160
then you can just work with that, which is interesting,

00:16:21.160 --> 00:16:24.080
but it gets more interesting later

00:16:24.080 --> 00:16:27.560
if you say, let's add an async function,

00:16:27.560 --> 00:16:29.080
like add one of my to-dos.

00:16:29.080 --> 00:16:30.320
And they have a to-do example, right?

00:16:30.320 --> 00:16:34.880
So if you put this @side effect decorator on it,

00:16:34.880 --> 00:16:36.600
here's where the React integration comes in.

00:16:36.600 --> 00:16:38.200
That's pretty wild.

00:16:38.200 --> 00:16:43.200
So it automatically generates typed,

00:16:43.200 --> 00:16:45.320
let's just say typed TypeScript,

00:16:45.320 --> 00:16:48.320
because I mean, you can't have non-typed TypeScript,

00:16:48.320 --> 00:16:49.880
but generally TypeScript is typed.

00:16:49.880 --> 00:16:53.400
It generates TypeScript versions of the functions

00:16:53.400 --> 00:16:56.600
that you write in Python on the JavaScript side.

00:16:56.600 --> 00:16:58.360
So you immediately can just start calling it

00:16:58.360 --> 00:17:00.680
and using those features, right?

00:17:00.680 --> 00:17:02.920
So it kind of has this really tight integration

00:17:02.920 --> 00:17:06.160
with React, as you would expect.

00:17:06.160 --> 00:17:07.000
What else?

00:17:07.000 --> 00:17:07.840
I think that's pretty much it,

00:17:07.840 --> 00:17:12.240
but if you're a heavy React shop

00:17:12.240 --> 00:17:15.000
and you want a nice Python backend

00:17:15.000 --> 00:17:17.840
and you want a tight data integration between those,

00:17:17.840 --> 00:17:19.920
this is probably worth a look.

00:17:19.920 --> 00:17:21.440
- Yeah, neat.

00:17:21.440 --> 00:17:23.320
- Yeah, yeah, it looks pretty neat to me too.

00:17:23.320 --> 00:17:26.560
I'm not, like I said, I'm not really a React person,

00:17:26.560 --> 00:17:29.040
so I'm not sure that I'm necessarily gonna use it,

00:17:29.040 --> 00:17:31.000
but if I were to start adopting React,

00:17:31.000 --> 00:17:34.400
I may well decide that that's what I want.

00:17:34.400 --> 00:17:38.800
Speaking of cool things, Brian, how about Scout APM?

00:17:38.800 --> 00:17:45.080
Let me tell you real quick about Scout APM.

00:17:45.080 --> 00:17:46.840
They're big supporters of Python Bytes,

00:17:46.840 --> 00:17:48.560
so we appreciate that very much.

00:17:48.560 --> 00:17:52.800
So if you are tired of spending hours

00:17:52.800 --> 00:17:54.800
trying to find the root cause of issues

00:17:54.800 --> 00:17:56.080
impacting your performance,

00:17:56.080 --> 00:17:59.840
then you owe it to yourself to check out Scout APM.

00:17:59.840 --> 00:18:01.720
They're a leading Python application

00:18:01.720 --> 00:18:04.720
performance monitoring tool, APM,

00:18:04.720 --> 00:18:06.320
that helps you identify and solve

00:18:06.320 --> 00:18:09.160
performance abnormalities faster and easier.

00:18:09.160 --> 00:18:12.200
Scout APM ties bottlenecks such as memory leaks,

00:18:12.200 --> 00:18:14.160
slow database queries, background jobs,

00:18:14.160 --> 00:18:17.160
and the dreaded N+1 queries that you can end up

00:18:17.160 --> 00:18:20.320
if you do lazy loading in your ORM,

00:18:20.320 --> 00:18:22.600
then you say, "Oh no, why is it so slow?

00:18:22.600 --> 00:18:23.960
Why are you doing 200 database queries

00:18:23.960 --> 00:18:25.640
for what should be one?"

00:18:25.640 --> 00:18:27.800
So you can find out things like that.

00:18:27.800 --> 00:18:29.560
And it links it back directly to source code,

00:18:29.560 --> 00:18:31.760
so you can spend less time in the debugger

00:18:31.760 --> 00:18:34.840
and peeling logs and just finding the problems

00:18:34.840 --> 00:18:36.320
and moving on.

00:18:36.320 --> 00:18:37.720
And you'll love it because it's built

00:18:37.720 --> 00:18:39.240
for developers by developers.

00:18:39.240 --> 00:18:41.040
It makes it easy to get set up.

00:18:41.040 --> 00:18:43.320
Seriously, you can do it in less than four minutes,

00:18:43.320 --> 00:18:44.280
so that's awesome.

00:18:44.280 --> 00:18:47.880
And the best part is the pricing is straightforward.

00:18:47.880 --> 00:18:49.280
You only pay for the data that you use

00:18:49.280 --> 00:18:53.440
with no hidden overage fees or per seat pricing.

00:18:53.440 --> 00:18:55.400
And I just learned this, Brian,

00:18:55.400 --> 00:18:58.520
they also have, they provide the pro version

00:18:58.520 --> 00:19:00.600
for free to all open source projects.

00:19:00.600 --> 00:19:02.480
So if you're an open source maintainer

00:19:02.480 --> 00:19:06.240
and you want to have Scout APM for that project,

00:19:06.240 --> 00:19:07.720
just shoot them a message or something

00:19:07.720 --> 00:19:09.400
on their pricing page about that.

00:19:09.400 --> 00:19:10.920
So you can start your free trial

00:19:10.920 --> 00:19:13.720
and get instant insights today.

00:19:13.720 --> 00:19:16.280
Visit pythonbytes.fm/scout.

00:19:16.280 --> 00:19:18.720
The link is in your podcast player show notes as well.

00:19:18.720 --> 00:19:19.640
And please use that link.

00:19:19.640 --> 00:19:23.000
Don't just search for them because otherwise

00:19:23.000 --> 00:19:24.320
they don't think you came from us.

00:19:24.320 --> 00:19:25.720
And then they'd stop supporting the show.

00:19:25.720 --> 00:19:28.440
So please use our link pythonbytes.fm/scout,

00:19:28.440 --> 00:19:29.280
check them out.

00:19:29.280 --> 00:19:31.320
It really supports the show.

00:19:31.320 --> 00:19:34.800
Awesome, awesome.

00:19:34.800 --> 00:19:36.040
What's next, Brian?

00:19:36.040 --> 00:19:39.880
- Well, what's next is Guido Van Rossum.

00:19:39.880 --> 00:19:41.160
- Oh yeah.

00:19:41.160 --> 00:19:45.280
- So he's blogging a little bit lately

00:19:45.280 --> 00:19:48.040
and he put up a post called

00:19:48.040 --> 00:19:53.040
why Python's integer division floors.

00:19:54.000 --> 00:19:56.240
And I think this,

00:19:56.240 --> 00:19:59.080
just an interesting little bit of history.

00:19:59.080 --> 00:20:04.160
And this was a difference between Python 2 and 3.

00:20:04.160 --> 00:20:07.600
I guess, no, integer division always did flooring,

00:20:07.600 --> 00:20:12.600
but we did a kind of a thing of what one slash meant.

00:20:12.600 --> 00:20:17.720
So if you do two slashes, it's always integer division.

00:20:17.720 --> 00:20:22.040
If you do one slash, if it was both integers in Python 2,

00:20:22.040 --> 00:20:24.560
it would be integer division

00:20:24.560 --> 00:20:27.920
and it would possibly not be the floating point result.

00:20:27.920 --> 00:20:31.800
But in Python 3, it will generate a float if you have it.

00:20:31.800 --> 00:20:34.920
Like for instance, one third will,

00:20:34.920 --> 00:20:37.560
one divided by three results in a float.

00:20:37.560 --> 00:20:40.640
But if you do integer division, it's not,

00:20:40.640 --> 00:20:41.720
it's something else.

00:20:41.720 --> 00:20:44.420
- Is that why the two to three conversion was so hard?

00:20:44.420 --> 00:20:46.520
I'm just kidding.

00:20:46.520 --> 00:20:47.360
- What was that?

00:20:47.360 --> 00:20:48.200
- It was strings.

00:20:48.200 --> 00:20:49.020
Everyone knows it's strings.

00:20:49.020 --> 00:20:52.940
Is that why the integer, the Python two to three story

00:20:52.940 --> 00:20:53.780
was so hard?

00:20:53.780 --> 00:20:58.340
No, I'm just joking.

00:20:58.340 --> 00:21:00.980
- Yeah.

00:21:00.980 --> 00:21:06.980
So yeah, so if you do five to two slashes,

00:21:06.980 --> 00:21:11.300
so integer division of five divided by two, you get two.

00:21:11.300 --> 00:21:16.300
And which is normal, that's everywhere.

00:21:16.740 --> 00:21:20.300
But if you do it, like say negative five,

00:21:20.300 --> 00:21:23.900
you don't get negative two, you get negative three.

00:21:23.900 --> 00:21:25.820
So that's the, there's a question.

00:21:25.820 --> 00:21:29.320
So Guido said that he had a question about that,

00:21:29.320 --> 00:21:32.220
of why it's different, why it's like that.

00:21:32.220 --> 00:21:35.420
And so it's going, it does a division

00:21:35.420 --> 00:21:40.420
and then it goes to the closest integer to the negative,

00:21:40.420 --> 00:21:42.860
closest to negative infinity.

00:21:42.860 --> 00:21:46.540
And there's reasons behind that,

00:21:46.540 --> 00:21:47.780
but it's different than C.

00:21:47.780 --> 00:21:51.300
Apparently I completely forgot what C did.

00:21:51.300 --> 00:21:53.260
C does it closer to zero.

00:21:53.260 --> 00:21:56.700
So you'd both, so negative five divided by two

00:21:56.700 --> 00:21:59.580
would, you'd end up with two, negative two.

00:21:59.580 --> 00:22:04.580
So the history there is that there was a choice to make

00:22:04.580 --> 00:22:08.540
and you could either with,

00:22:08.540 --> 00:22:14.280
it works with the Modulo operator as well.

00:22:14.280 --> 00:22:17.460
Modulo will create the remainder

00:22:17.460 --> 00:22:21.100
where integer division creates the integer division,

00:22:21.100 --> 00:22:22.100
the integer quotient.

00:22:22.100 --> 00:22:27.100
So such that A divided by B equals Q with remainder R

00:22:27.100 --> 00:22:31.160
such that R is between zero and B.

00:22:31.160 --> 00:22:35.880
There's math here, but it just,

00:22:35.880 --> 00:22:37.940
you have a choice as to what you wanna do,

00:22:37.940 --> 00:22:41.140
whether you want R to be possibly negative,

00:22:41.140 --> 00:22:43.140
positive or negative for the remainder,

00:22:43.140 --> 00:22:45.420
or if you want R to always be positive.

00:22:45.420 --> 00:22:50.420
And basically Guido chose the one that looks nicer in math.

00:22:50.420 --> 00:22:58.920
So that we go do a floor division instead.

00:22:58.920 --> 00:23:03.300
The interesting take on this I thought was,

00:23:03.300 --> 00:23:05.800
well, why did C choose the other way?

00:23:05.800 --> 00:23:10.140
And that's the part that I thought was really interesting.

00:23:10.140 --> 00:23:14.320
And his answer is, or his guess is that,

00:23:14.320 --> 00:23:17.900
well, C was doing it way before Python was.

00:23:17.900 --> 00:23:19.620
And C was doing it on hardware

00:23:19.620 --> 00:23:24.620
that it may have been easier to do division closer to zero

00:23:24.620 --> 00:23:28.200
instead of floor division.

00:23:28.200 --> 00:23:29.860
And part of that reason might be

00:23:29.860 --> 00:23:32.220
because some of the early hardware architectures

00:23:32.220 --> 00:23:35.780
were using sign plus magnitude

00:23:35.780 --> 00:23:37.660
rather than twos complement,

00:23:37.660 --> 00:23:40.660
which is kind of, I didn't know that.

00:23:40.660 --> 00:23:45.260
I must have, either if I did know it from CS, I forgot it.

00:23:45.260 --> 00:23:47.080
Definitely no remember twos complement,

00:23:47.080 --> 00:23:50.340
but anyway, it's interesting history there.

00:23:50.340 --> 00:23:53.860
- It's interesting.

00:23:53.860 --> 00:23:54.700
I wonder if it's--

00:23:54.700 --> 00:23:55.540
- One of the reasons,

00:23:55.540 --> 00:23:58.200
it's kind of a silly little article to bring up,

00:23:58.200 --> 00:24:02.420
but one of the things I wanted to bring it up

00:24:02.420 --> 00:24:05.380
is because a lot of new Python people

00:24:05.380 --> 00:24:07.000
actually don't remember,

00:24:07.000 --> 00:24:10.900
will forget about integer division

00:24:10.900 --> 00:24:13.980
and just assume that division is division.

00:24:13.980 --> 00:24:17.060
But interdivision is really handy for a lot of cases.

00:24:17.060 --> 00:24:18.100
So don't forget about it.

00:24:18.100 --> 00:24:19.380
- That's true, actually.

00:24:19.380 --> 00:24:22.620
Yeah, I find myself sometimes doing int of some float result.

00:24:22.620 --> 00:24:26.580
Maybe I could just double slash it and not have to.

00:24:26.580 --> 00:24:32.780
- So comment from the chat, which I'm not sure to take this.

00:24:32.780 --> 00:24:35.020
I'm thinking that they're bored with this topic,

00:24:35.020 --> 00:24:35.860
but--

00:24:35.860 --> 00:24:36.860
(both laughing)

00:24:36.860 --> 00:24:38.600
- I was not sure either.

00:24:38.600 --> 00:24:40.700
- Anyway.

00:24:40.700 --> 00:24:41.780
- No comment.

00:24:41.780 --> 00:24:43.620
- All right.

00:24:43.620 --> 00:24:45.980
- We're gonna bring the hatchet out on this one, Ryan.

00:24:45.980 --> 00:24:47.100
Bring in the hatchet.

00:24:47.100 --> 00:24:50.000
So there's this thing I ran across called Hatchet,

00:24:50.000 --> 00:24:53.620
which is a distributed task queue

00:24:53.620 --> 00:24:56.860
for more resilient web apps.

00:24:56.860 --> 00:25:01.860
Now I don't recall exactly what it is written in.

00:25:01.860 --> 00:25:04.240
I don't think it's written in Python.

00:25:04.560 --> 00:25:06.960
- Ah, it's unclear.

00:25:06.960 --> 00:25:11.000
It's primary language is Python, but also has a Go.

00:25:11.000 --> 00:25:13.000
Anyway, it doesn't matter.

00:25:13.000 --> 00:25:13.920
It has a Python.

00:25:13.920 --> 00:25:18.920
It's first SDK, it's first integration is with Python.

00:25:18.920 --> 00:25:24.040
So here's the idea.

00:25:24.040 --> 00:25:26.560
You've got some work.

00:25:26.560 --> 00:25:29.480
It's going to take a little while to run.

00:25:29.480 --> 00:25:31.160
You know, your web app says,

00:25:31.160 --> 00:25:34.160
"Hey, I want you to ship this thing."

00:25:34.160 --> 00:25:36.840
Or, "I want you to run some analytics."

00:25:36.840 --> 00:25:40.020
And if those analytics take 10, 15 seconds to run,

00:25:40.020 --> 00:25:42.240
maybe they're computational

00:25:42.240 --> 00:25:47.040
and they should run out on another computer

00:25:47.040 --> 00:25:48.720
rather than on your main web front end.

00:25:48.720 --> 00:25:51.560
Or they shouldn't block it for 15 seconds or whatever.

00:25:51.560 --> 00:25:53.100
When you're talking about your,

00:25:53.100 --> 00:25:56.240
how do you break up import dependencies

00:25:56.240 --> 00:25:57.880
across the wrong layers and stuff,

00:25:57.880 --> 00:26:01.860
maybe one way to fix that is to move some of the compute work

00:26:01.860 --> 00:26:03.480
completely to its own place, right?

00:26:03.480 --> 00:26:06.360
Like this whole queuing mechanism is super fascinating

00:26:06.360 --> 00:26:08.760
for creating like truly scalable,

00:26:08.760 --> 00:26:14.000
like multi-user things, right?

00:26:14.000 --> 00:26:16.840
So if the majority of your work is in some place

00:26:16.840 --> 00:26:19.160
and you kind of don't really need the answer

00:26:19.160 --> 00:26:20.520
to give a response,

00:26:20.520 --> 00:26:23.720
you can just throw it onto one of these background queues

00:26:23.720 --> 00:26:24.860
and let it go.

00:26:24.860 --> 00:26:28.160
So one of the problems that you run into though

00:26:28.160 --> 00:26:29.760
is what if something goes wrong?

00:26:29.760 --> 00:26:33.000
Or how do I see what is running?

00:26:33.000 --> 00:26:34.560
Something fails, can I resume it?

00:26:34.560 --> 00:26:35.640
Maybe it was really important,

00:26:35.640 --> 00:26:37.180
like ship this thing to the customer.

00:26:37.180 --> 00:26:39.880
But when I put that on the queue

00:26:39.880 --> 00:26:42.280
and it finally got around to being run,

00:26:42.280 --> 00:26:46.700
the API at UPS was down for who knows,

00:26:46.700 --> 00:26:47.720
whatever reason, right?

00:26:47.720 --> 00:26:49.640
Things like that and you can't ship it.

00:26:49.640 --> 00:26:51.440
And then just go into the ether as an error

00:26:51.440 --> 00:26:54.120
or can you resume it?

00:26:54.120 --> 00:26:57.480
Another problem you run into is fairness, right?

00:26:57.480 --> 00:27:00.040
If there's a ton of work coming in faster

00:27:00.040 --> 00:27:02.300
than the processor can handle,

00:27:03.020 --> 00:27:06.760
is there some thing where maybe only the new ones

00:27:06.760 --> 00:27:09.260
get worked on and the older ones get almost abandoned,

00:27:09.260 --> 00:27:10.100
right?

00:27:10.100 --> 00:27:11.220
There's all these interesting things.

00:27:11.220 --> 00:27:14.020
So this thing called Hatchet is in the realm

00:27:14.020 --> 00:27:15.540
of many different things

00:27:15.540 --> 00:27:18.000
that attempt to solve this problem, right?

00:27:18.000 --> 00:27:21.440
It's interesting, it's Y Combinator backed.

00:27:21.440 --> 00:27:25.140
It's a company that presumably will have a price,

00:27:25.140 --> 00:27:28.940
but there's also just an open source self,

00:27:28.940 --> 00:27:31.180
take it for yourself and run with it version

00:27:31.180 --> 00:27:33.300
over on GitHub, so 100% open source,

00:27:33.300 --> 00:27:37.020
2,200 GitHub stars, pretty interesting.

00:27:37.020 --> 00:27:38.660
But I think the business model is it says,

00:27:38.660 --> 00:27:41.340
request cloud access, like they can run it for you

00:27:41.340 --> 00:27:43.420
or you can run your own, right?

00:27:43.420 --> 00:27:47.640
So the website has a bunch of these little animations,

00:27:47.640 --> 00:27:48.540
which are kind of cool.

00:27:48.540 --> 00:27:51.700
It talks about fairness, batch processing,

00:27:51.700 --> 00:27:52.820
and like as you click on them,

00:27:52.820 --> 00:27:56.020
see how it like has these little fun animations.

00:27:56.020 --> 00:27:56.860
Like, what does this mean?

00:27:56.860 --> 00:27:57.680
Oh, I see.

00:27:57.680 --> 00:27:58.820
- Oh, I love it.

00:27:58.820 --> 00:28:00.340
- I do too, I do too.

00:28:00.340 --> 00:28:05.340
So, talks about fairness, batch processing,

00:28:05.340 --> 00:28:08.620
workflow and event stuff.

00:28:08.620 --> 00:28:12.060
It's engineered for scaling challenges,

00:28:12.060 --> 00:28:12.960
which is pretty awesome.

00:28:12.960 --> 00:28:15.780
So low latency, 25 milliseconds on average,

00:28:15.780 --> 00:28:18.980
which means if you put something into the queue,

00:28:18.980 --> 00:28:23.940
there's ways in which you can sort of make callbacks

00:28:23.940 --> 00:28:25.460
to check on the process of the work

00:28:25.460 --> 00:28:27.740
and it shouldn't take all that long.

00:28:27.740 --> 00:28:30.740
Bunch of rules about rate limiting.

00:28:30.740 --> 00:28:33.260
Also, durable.

00:28:33.260 --> 00:28:35.460
So you can replay events.

00:28:35.460 --> 00:28:36.940
You can do cron jobs and say,

00:28:36.940 --> 00:28:40.540
hey, every morning just drop this into the queue

00:28:40.540 --> 00:28:43.180
and run it at 7 a.m. or whatever.

00:28:43.180 --> 00:28:44.900
You can schedule one-time jobs.

00:28:44.900 --> 00:28:49.460
It has ability to like avoid being destroyed by spikes.

00:28:49.460 --> 00:28:50.820
Like if for some reason,

00:28:50.820 --> 00:28:54.740
a whole bunch of work comes in all at once

00:28:54.740 --> 00:28:57.580
and maybe you got IOT things that like do a bunch of work

00:28:57.580 --> 00:28:59.580
when people come into the office

00:28:59.580 --> 00:29:01.460
and you at very first sees a bunch of stuff

00:29:01.460 --> 00:29:02.380
and then it chills out, right?

00:29:02.380 --> 00:29:03.700
You could smooth that out.

00:29:03.700 --> 00:29:05.980
All kinds of stuff.

00:29:05.980 --> 00:29:08.660
But like I said, it supports three technologies,

00:29:08.660 --> 00:29:12.380
Python number one, TypeScript number two and Go number three.

00:29:12.380 --> 00:29:14.620
And it's really easy to do.

00:29:14.620 --> 00:29:16.660
You just go down here and you just put a,

00:29:16.660 --> 00:29:21.740
when this event happens, I want you to run this class

00:29:21.740 --> 00:29:24.260
and then it has a bunch of functions, methods.

00:29:24.260 --> 00:29:25.660
You say, here's a step.

00:29:25.660 --> 00:29:27.100
Step one, do this work.

00:29:27.100 --> 00:29:29.860
Step two, so you just basically put some decorators

00:29:29.860 --> 00:29:33.580
on a class and then plug it in and off it goes.

00:29:33.580 --> 00:29:34.420
Super easy.

00:29:34.420 --> 00:29:36.420
And to run it, you just say, push an event,

00:29:36.420 --> 00:29:38.060
whatever the name it is with the data

00:29:38.060 --> 00:29:41.060
and it'll go, put it off in the background and run it.

00:29:41.060 --> 00:29:43.340
So yeah, it also has like nice visualizations.

00:29:43.340 --> 00:29:47.820
Like here you can see there's this on hatchet.run.

00:29:47.820 --> 00:29:49.940
You can see there's this like live view

00:29:49.940 --> 00:29:53.100
of how is the work running through the system

00:29:53.100 --> 00:29:53.940
and all kinds of stuff.

00:29:53.940 --> 00:29:56.860
So it looks pretty neat to me.

00:29:56.860 --> 00:29:59.500
Open source, people can check it out.

00:29:59.500 --> 00:30:01.340
It's worth knowing about.

00:30:01.340 --> 00:30:02.580
- Yeah, it's pretty cool.

00:30:02.580 --> 00:30:06.220
- Yep, indeed, indeed.

00:30:06.220 --> 00:30:09.100
That's it for our items.

00:30:09.100 --> 00:30:10.220
How are you feeling?

00:30:10.220 --> 00:30:12.100
How extra are you feeling?

00:30:12.100 --> 00:30:14.180
- I've only got one extra that I almost,

00:30:14.180 --> 00:30:16.020
that I pretty much mentioned already.

00:30:16.020 --> 00:30:17.460
So I'll do it quickly.

00:30:17.460 --> 00:30:21.460
So Python test is at 2.15 right now as we look,

00:30:21.460 --> 00:30:25.380
but the most recent episode that will come out

00:30:25.380 --> 00:30:27.700
probably today is 2.16,

00:30:27.700 --> 00:30:31.100
which will be Charlie Marsh talking about uv.

00:30:31.100 --> 00:30:33.260
So check that out also.

00:30:33.260 --> 00:30:34.700
- Awesome, yeah, you did mention that.

00:30:34.700 --> 00:30:36.460
That's really good though.

00:30:36.460 --> 00:30:38.100
- How about you, got any extras?

00:30:38.100 --> 00:30:39.180
- I'm feeling somewhat extra.

00:30:39.180 --> 00:30:41.340
I got two exciting announcements.

00:30:41.340 --> 00:30:46.340
One, I have a free new course over at Talk Python training

00:30:46.340 --> 00:30:48.940
that covers a bunch of awesome technologies,

00:30:48.940 --> 00:30:52.500
but the core idea, the title is,

00:30:52.500 --> 00:30:57.500
build an audio app with AI, with Python and Assembly AI.

00:30:57.500 --> 00:31:03.340
So the idea is, what would you do if you say had access

00:31:03.340 --> 00:31:06.740
to, I don't know, a podcast's worth of data

00:31:06.740 --> 00:31:08.100
that's been going for many years?

00:31:08.100 --> 00:31:11.380
Like Python Bytes or Talk Python are honestly,

00:31:11.380 --> 00:31:14.780
the thing we build lets you access a whole library

00:31:14.780 --> 00:31:17.460
of podcasts and you go in there and do things like,

00:31:17.460 --> 00:31:18.580
hey, create me a transcript,

00:31:18.580 --> 00:31:19.940
which seems kind of straightforward.

00:31:19.940 --> 00:31:22.100
But once you have transcript data,

00:31:22.100 --> 00:31:23.540
you could get really cool search,

00:31:23.540 --> 00:31:25.980
like building your own custom search engine,

00:31:25.980 --> 00:31:28.460
not just over the title and the show notes and stuff,

00:31:28.460 --> 00:31:31.940
but also all the spoken words, which is kind of neat.

00:31:31.940 --> 00:31:34.580
Then you also bring more of the AI stuff in.

00:31:34.580 --> 00:31:35.900
You could create a summary.

00:31:35.900 --> 00:31:38.980
What are the key moments of this?

00:31:38.980 --> 00:31:41.940
And actually, what if I could just have a Q&A

00:31:41.940 --> 00:31:45.460
with like you and me around what we said in the show?

00:31:45.460 --> 00:31:50.460
So kind of creating an LLM ChatGPT type of thing,

00:31:50.460 --> 00:31:54.220
but where it knows about any given episode

00:31:54.220 --> 00:31:55.380
out on the internet.

00:31:55.380 --> 00:31:57.220
So really fun.

00:31:57.220 --> 00:31:58.780
People will learn FastAPI.

00:31:58.780 --> 00:32:00.660
They learn Pydantic.

00:32:00.660 --> 00:32:01.900
They learn HTMX.

00:32:01.900 --> 00:32:04.940
They learn Beanie and they learn Assembly AI

00:32:04.940 --> 00:32:05.780
and build a cool thing.

00:32:05.780 --> 00:32:08.060
And the whole course is like a four hour free course.

00:32:08.060 --> 00:32:09.580
So they can check that out.

00:32:09.580 --> 00:32:10.780
- Wow, neat.

00:32:10.780 --> 00:32:12.100
- Yeah. - Sounds fun.

00:32:12.100 --> 00:32:12.940
- Thanks.

00:32:12.940 --> 00:32:14.580
And next to it, another new course.

00:32:15.540 --> 00:32:18.700
Rock Solid Python with Python Typing.

00:32:18.700 --> 00:32:21.380
So this one is not a free one,

00:32:21.380 --> 00:32:25.620
but it basically shows you not just the how,

00:32:25.620 --> 00:32:28.780
but the why and when of Python typing.

00:32:28.780 --> 00:32:31.500
A bunch of different examples.

00:32:31.500 --> 00:32:32.660
Obviously the language,

00:32:32.660 --> 00:32:37.340
but things like FastAPI and Pydantic, how do they use it?

00:32:37.340 --> 00:32:42.740
What you talked about protocol before, what is protocol?

00:32:42.740 --> 00:32:43.820
Where does it fit?

00:32:44.380 --> 00:32:48.580
A bunch of design patterns and guidance for Python typing

00:32:48.580 --> 00:32:50.540
and how to think about how you should use it.

00:32:50.540 --> 00:32:53.460
So people should also check this one out.

00:32:53.460 --> 00:32:54.540
I'm really proud of this one.

00:32:54.540 --> 00:32:57.060
And it is also around four hours, 4.4 hours.

00:32:57.060 --> 00:33:01.620
And Pradeep asks out there, are these courses paid or free?

00:33:01.620 --> 00:33:02.460
Yes.

00:33:02.460 --> 00:33:07.300
The build an audio app course is 100% free.

00:33:07.300 --> 00:33:08.380
You just have to create an account.

00:33:08.380 --> 00:33:11.460
The Rock Solid Python course is 49 bucks.

00:33:11.460 --> 00:33:13.620
- Yeah, but that's like 10 bucks an hour.

00:33:13.620 --> 00:33:15.540
That's almost free.

00:33:15.540 --> 00:33:16.980
- Yes.

00:33:16.980 --> 00:33:19.540
It's certainly not a lot of money,

00:33:19.540 --> 00:33:22.220
compared to other ways you might go learn

00:33:22.220 --> 00:33:23.060
about things like this.

00:33:23.060 --> 00:33:25.420
So anyway, both of these courses are awesome

00:33:25.420 --> 00:33:27.060
and people should check them out.

00:33:27.060 --> 00:33:29.140
So those are the two big announcements.

00:33:29.140 --> 00:33:31.300
I also have a couple of interesting things

00:33:31.300 --> 00:33:32.620
I just wanna give a quick shout out to.

00:33:32.620 --> 00:33:35.740
Previously we spoke about Doku.

00:33:35.740 --> 00:33:36.580
I'm gonna go with Doku

00:33:36.580 --> 00:33:39.020
'cause I think it's based on Docker, I don't know.

00:33:39.020 --> 00:33:43.020
Doku, and this is a open source platform

00:33:43.020 --> 00:33:45.660
as a service alternative to Heroku.

00:33:45.660 --> 00:33:47.220
We already spoke about that.

00:33:47.220 --> 00:33:51.500
But when we did, Ray out there on Mastodon, thank you, Ray,

00:33:51.500 --> 00:33:54.820
said, "Hey, you guys, love the episode on Doku.

00:33:54.820 --> 00:33:57.820
"Haven't tried it myself, big fan of Heroku.

00:33:57.820 --> 00:34:01.060
"However, I set up Coolify."

00:34:01.060 --> 00:34:04.700
Coolify, I haven't talked about this, have I?

00:34:04.700 --> 00:34:05.620
- I don't think so.

00:34:05.620 --> 00:34:06.660
- Yeah, I don't think so.

00:34:06.660 --> 00:34:10.860
Okay, so Coolify is kind of the same.

00:34:10.860 --> 00:34:12.020
So this is pretty similar,

00:34:12.020 --> 00:34:14.580
but it has a nice GUI to configure everything

00:34:14.580 --> 00:34:17.420
and keep an eye on the status and all those things.

00:34:17.420 --> 00:34:20.900
So Coolify is self-hosting with superpowers.

00:34:20.900 --> 00:34:25.380
It's a self-hosted alternative to not just Heroku,

00:34:25.380 --> 00:34:27.660
but also Netlify and Verisol.

00:34:27.660 --> 00:34:29.600
So Netlify for static sites,

00:34:29.600 --> 00:34:33.880
you basically set this thing up, get it going.

00:34:34.800 --> 00:34:38.280
It'll run any language on basically on any server.

00:34:38.280 --> 00:34:41.800
You just push to some Git branch, you deploy it.

00:34:41.800 --> 00:34:44.320
It does automatic SSL certificates.

00:34:44.320 --> 00:34:46.480
So if it just had a static site

00:34:46.480 --> 00:34:49.180
and I just want it to run over SSL on the internet,

00:34:49.180 --> 00:34:51.280
boom, done.

00:34:51.280 --> 00:34:54.020
It just does deluxe encrypt automatically

00:34:54.020 --> 00:34:57.560
as part of creating the app up there and gets it going.

00:34:57.560 --> 00:35:00.440
So it's probably a little bit of setup to get it going

00:35:00.440 --> 00:35:02.440
and get it running on Docker and stuff.

00:35:02.440 --> 00:35:05.960
But once you do, it just becomes the substrate

00:35:05.960 --> 00:35:07.680
for all of your apps that you wanna put out there.

00:35:07.680 --> 00:35:09.120
And you don't have to think about anything

00:35:09.120 --> 00:35:10.180
but Git basically.

00:35:10.180 --> 00:35:12.760
- That's pretty cool, actually.

00:35:12.760 --> 00:35:14.640
- Yeah, it looks really, really nice.

00:35:14.640 --> 00:35:17.240
So people can check this out.

00:35:17.240 --> 00:35:21.440
Yeah, it has a paid cloud version

00:35:21.440 --> 00:35:26.000
and a self-hosted version with 17,000 or more people

00:35:26.000 --> 00:35:28.560
using it self-hosted.

00:35:28.560 --> 00:35:29.480
So that's pretty cool.

00:35:29.480 --> 00:35:31.920
It's interesting that they give stats there.

00:35:31.920 --> 00:35:33.120
But that's my last one.

00:35:33.120 --> 00:35:34.700
I think this is really neat as well.

00:35:34.700 --> 00:35:38.280
So Ray, thanks for sharing extra details.

00:35:38.280 --> 00:35:40.080
- Yeah, nice, cool.

00:35:40.080 --> 00:35:42.160
- Shall we close it off with a joke?

00:35:42.160 --> 00:35:43.140
- Yeah, let's.

00:35:43.140 --> 00:35:45.260
- Yeah, okay.

00:35:45.260 --> 00:35:51.400
So speaking of, I wanna run my stuff on production.

00:35:51.400 --> 00:35:52.500
How do I do it?

00:35:52.500 --> 00:35:54.080
This is a great, great one.

00:35:54.080 --> 00:35:56.520
Back to workchronicles.com.

00:35:56.520 --> 00:36:00.080
And so I don't know how you feel about this, Brian,

00:36:00.080 --> 00:36:01.720
but I think it's pretty true.

00:36:01.720 --> 00:36:03.400
There's two engineers talking.

00:36:03.400 --> 00:36:06.080
It says, "Oh no, I broke production.

00:36:06.080 --> 00:36:08.000
"Will I get fired?"

00:36:08.000 --> 00:36:10.800
The more seasoned developer looks over.

00:36:10.800 --> 00:36:12.800
If we fire engineers who break production,

00:36:12.800 --> 00:36:15.880
we will need to fire everyone eventually.

00:36:15.880 --> 00:36:19.020
- Yeah, yeah.

00:36:19.020 --> 00:36:24.680
Also, if you fix it, you'll get a promotion

00:36:24.680 --> 00:36:26.280
or a raise or something, so.

00:36:26.280 --> 00:36:27.760
- There you go, yeah.

00:36:29.400 --> 00:36:31.920
Maybe you just need to keep your fix rate

00:36:31.920 --> 00:36:34.640
above your destroy rate.

00:36:34.640 --> 00:36:35.880
- Yeah.

00:36:35.880 --> 00:36:36.920
- Yeah, there you go.

00:36:36.920 --> 00:36:39.840
- So, yeah.

00:36:39.840 --> 00:36:42.440
- Well, that's what I brought for us today.

00:36:42.440 --> 00:36:43.920
- Cool.

00:36:43.920 --> 00:36:45.040
I like it.

00:36:45.040 --> 00:36:46.240
- Yeah, excellent.

00:36:46.240 --> 00:36:49.840
Okay, well, nice to kick off the week

00:36:49.840 --> 00:36:51.360
with a little Python Bytes.

00:36:51.360 --> 00:36:52.680
Happy to do it early. - Yeah, thank you.

00:36:52.680 --> 00:36:56.400
- Yeah, good to see you, and thanks to everyone who joined.

00:36:56.400 --> 00:36:57.640
- Bye.

