WEBVTT

00:00:00.000 --> 00:00:07.920
Hey, everybody. Thanks for showing up to the live stream. We'll just jump in and get started.


00:00:07.920 --> 00:00:11.760
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:11.760 --> 00:00:18.440
to your earbuds. This is episode 283, recorded May 10th. And I am Brian Okken.


00:00:18.440 --> 00:00:20.520
I'm Michael Kennedy.


00:00:20.520 --> 00:00:22.080
And I am Tanya Sims.


00:00:22.080 --> 00:00:27.240
Well, welcome, Tanya. Since we're just meeting also, and some of our people might not know


00:00:27.240 --> 00:00:31.240
who you are. Tell us a little bit about yourself.


00:00:31.240 --> 00:00:36.440
Sure. Well, thank you so much for having me today. I'm very excited to be here. So my


00:00:36.440 --> 00:00:42.240
name is Tanya, and I'm currently a Python developer advocate at a company called Deepgram.


00:00:42.240 --> 00:00:48.160
And so at Deepgram, we do speech-to-text, speech recognition technology. I would say


00:00:48.160 --> 00:00:54.160
my path to technology is a little bit unconventional. I come from an athletics background. I played


00:00:54.160 --> 00:00:57.240
I honestly started, I started playing basketball


00:00:57.240 --> 00:00:59.080
when I was five years old.


00:00:59.080 --> 00:01:02.120
I won't tell you how old I am now, but I,


00:01:02.120 --> 00:01:05.540
so yeah, so I played basketball in college,


00:01:05.540 --> 00:01:07.380
I played professionally in Europe


00:01:07.380 --> 00:01:09.760
and a little bit in the WNBA,


00:01:09.760 --> 00:01:11.160
and then I got into sales,


00:01:11.160 --> 00:01:13.400
and then from sales, I got into tech.


00:01:13.400 --> 00:01:16.040
So yes, it's been very unconventional.


00:01:16.040 --> 00:01:17.600
- That's pretty awesome.


00:01:17.600 --> 00:01:19.960
I wish we could jump in deeper, but yeah.


00:01:19.960 --> 00:01:21.440
- Yeah, that is super awesome.


00:01:21.440 --> 00:01:25.200
And as you're telling me, telling us that, I'm listening.


00:01:25.200 --> 00:01:28.720
And you think about all the stats and statistics


00:01:28.720 --> 00:01:30.380
and graphs and visualizations


00:01:30.380 --> 00:01:32.180
and optimizations of sports, right?


00:01:32.180 --> 00:01:34.760
Like these Python and programming skills


00:01:34.760 --> 00:01:36.320
are actually pretty relevant.


00:01:36.320 --> 00:01:39.880
Although maybe you were just deep down in the sport side


00:01:39.880 --> 00:01:42.280
and then got into programming afterwards.


00:01:42.280 --> 00:01:44.480
- Yeah, so yeah, I think you're totally right.


00:01:44.480 --> 00:01:46.360
I think Python is like the perfect language


00:01:46.360 --> 00:01:48.040
for doing a lot of stuff with like stats,


00:01:48.040 --> 00:01:50.600
like sports statistics and things like that.


00:01:50.600 --> 00:01:52.620
and like the visualization of it.


00:01:52.620 --> 00:01:54.440
But yeah, I started getting into coding


00:01:54.440 --> 00:01:56.060
when I was a kid actually,


00:01:56.060 --> 00:01:57.780
but then I stopped for a long time


00:01:57.780 --> 00:02:00.480
because who would have thought this thing called coding


00:02:00.480 --> 00:02:04.740
or computers would have taken off and be where it is today.


00:02:04.740 --> 00:02:05.800
- Yeah, absolutely.


00:02:05.800 --> 00:02:06.980
- Yeah.


00:02:06.980 --> 00:02:07.820
- Yeah.


00:02:07.820 --> 00:02:11.020
Well, fascinating as that is,


00:02:11.020 --> 00:02:14.940
I think let's take a different path, Michael.


00:02:14.940 --> 00:02:15.940
- Yes, a different path


00:02:15.940 --> 00:02:18.780
and indeed a fine transition there, Brian.


00:02:18.780 --> 00:02:21.340
So this one was sent over, recommended to us


00:02:21.340 --> 00:02:23.440
by one of our listeners, Spencer.


00:02:23.440 --> 00:02:26.340
So thank you Spencer for sending this in.


00:02:26.340 --> 00:02:29.300
And we talked about things like FS spec


00:02:29.300 --> 00:02:32.180
and other ways in which you could sort of abstract away


00:02:32.180 --> 00:02:33.540
just like I'm talking to a file,


00:02:33.540 --> 00:02:37.200
but oh, hey, that happens to live on Azure Blob Storage


00:02:37.200 --> 00:02:40.300
or AWS or Google Cloud Storage or something like that.


00:02:40.300 --> 00:02:42.700
So this one is called Pathy,


00:02:42.700 --> 00:02:47.160
a path interface for local and cloud bucket storage.


00:02:47.160 --> 00:02:50.840
So if you've got data that's stored in, at the moment,


00:02:50.840 --> 00:02:54.280
AWS or Google Cloud Storage,


00:02:54.280 --> 00:02:56.320
and that AWS one, that's S3,


00:02:56.320 --> 00:02:59.800
so I suspect that means like Linode


00:02:59.800 --> 00:03:02.960
and any other S3 compatible storage.


00:03:02.960 --> 00:03:04.360
You know, there's many of these places


00:03:04.360 --> 00:03:06.480
that have object storage for their cloud services


00:03:06.480 --> 00:03:10.520
that are basically wrapping up the AWS storage.


00:03:10.520 --> 00:03:11.840
So this might be much broader


00:03:11.840 --> 00:03:13.560
than actually just those two clouds.


00:03:13.560 --> 00:03:17.480
Anyway, the idea is that this is a Python package


00:03:17.480 --> 00:03:19.760
with type annotations they like to call out, which is great,


00:03:19.760 --> 00:03:23.400
for working with cloud bucket storage using pathlib.


00:03:23.400 --> 00:03:24.600
So pathlib is great, right?


00:03:24.600 --> 00:03:28.360
We can create a pathlib and give it a path


00:03:28.360 --> 00:03:31.440
and it has things like make directory


00:03:31.440 --> 00:03:34.400
or the parent of the parent of this thing,


00:03:34.400 --> 00:03:35.720
or does it exist and so on.


00:03:35.720 --> 00:03:37.720
So if you like working with path,


00:03:37.720 --> 00:03:40.100
the path class from pathlib,


00:03:40.980 --> 00:03:43.660
how about turning that loose against cloud storage?


00:03:43.660 --> 00:03:44.740
That's cool, huh?


00:03:44.740 --> 00:03:45.580
- Very.


00:03:45.580 --> 00:03:47.420
- Yeah, it's very awesome.


00:03:47.420 --> 00:03:50.700
- Yeah, so what's nice about it is you basically


00:03:50.700 --> 00:03:55.080
give it a URL with some type of scheme,


00:03:55.080 --> 00:03:57.820
you know, traditional schemes are like HTTP, HTTPS,


00:03:57.820 --> 00:04:00.940
but like GS for Google Cloud Storage


00:04:00.940 --> 00:04:04.660
or something in here that I'm not seeing for Azure,


00:04:04.660 --> 00:04:08.020
not Azure, AWS, but you give it just the prefix


00:04:08.020 --> 00:04:09.680
or you just give it a local file path


00:04:09.680 --> 00:04:12.060
and it will determine which that is


00:04:12.060 --> 00:04:14.080
and just start talking to that platform,


00:04:14.080 --> 00:04:17.560
which I think is actually pretty neat here.


00:04:17.560 --> 00:04:22.560
So yeah, basically if you wanna work with cloud storage


00:04:22.560 --> 00:04:24.840
using the Pathlib, well then here you go.


00:04:24.840 --> 00:04:28.520
It also supports caching locally,


00:04:28.520 --> 00:04:30.960
which is neat because that's one way


00:04:30.960 --> 00:04:33.840
in which you could get all of your cloud files


00:04:33.840 --> 00:04:36.380
sort of downloaded and replicated locally as well.


00:04:36.380 --> 00:04:39.360
And then Spencer had a quick comment saying,


00:04:39.360 --> 00:04:43.760
The really cool function is fluid down here.


00:04:43.760 --> 00:04:46.760
Fluid, you can take any type of local


00:04:46.760 --> 00:04:50.160
Google Cloud Storage or S3 path string,


00:04:50.160 --> 00:04:51.680
and it'll just give you a path object


00:04:51.680 --> 00:04:55.400
that lets you interact with it agnostic of the platform.


00:04:55.400 --> 00:04:56.980
So basically, like I was saying,


00:04:56.980 --> 00:05:00.960
you say S3 colon or GS colon, or just a local path,


00:05:00.960 --> 00:05:03.640
and it'll just give you back a pathlib,


00:05:03.640 --> 00:05:04.680
and you don't care where it is.


00:05:04.680 --> 00:05:05.500
Is it in the cloud?


00:05:05.500 --> 00:05:06.340
Is it local?


00:05:06.340 --> 00:05:10.900
because it's just, you know, it's abstracted that away using Pathlib.


00:05:10.900 --> 00:05:15.400
And I don't know about you too, but I had been a bit of a holdout on Pathlib.


00:05:15.400 --> 00:05:21.580
It was all import, you know, system.io or import.io, whatever it was, and just


00:05:21.580 --> 00:05:24.460
use the IO way of working with it.


00:05:24.460 --> 00:05:27.820
But I've really come to like Path and Pathlib last year too.


00:05:27.820 --> 00:05:31.420
Yeah, I really, I love the interface.


00:05:31.460 --> 00:05:35.180
the just it feels it's easier to program into me.


00:05:35.180 --> 00:05:37.860
It just feels easier. It feels more obvious.


00:05:37.860 --> 00:05:40.500
So, yeah.


00:05:40.500 --> 00:05:43.620
Yeah, this is great. I've been wanting to do more with cloud


00:05:43.620 --> 00:05:46.100
technologies. So yeah, I think this would be a really good


00:05:46.100 --> 00:05:47.020
place to start.


00:05:47.020 --> 00:05:51.660
Yeah, and so much of that possibility is just working with


00:05:51.660 --> 00:05:55.460
static files on s3 or static files, and blob storage and


00:05:55.460 --> 00:05:58.820
other places. Sure. I'd love to not have to care about that.


00:06:00.260 --> 00:06:02.900
Yes, if I could just not do Boto3,


00:06:02.900 --> 00:06:06.300
that would be fantastic because that thing drives me crazy


00:06:06.300 --> 00:06:06.940
so much.


00:06:06.940 --> 00:06:08.740
Don't give me another rant.


00:06:08.740 --> 00:06:10.060
Brian, talk about your topic.


00:06:10.060 --> 00:06:11.980
Save me from ranting about Boto3.


00:06:11.980 --> 00:06:14.660
OK, well, let's talk about Robin.


00:06:14.660 --> 00:06:17.260
So Robin, for one, is just an awesome logo.


00:06:17.260 --> 00:06:18.740
It's a bird being hugged by a snake.


00:06:18.740 --> 00:06:20.860
[LAUGHTER]


00:06:20.860 --> 00:06:22.460
That's pretty clever.


00:06:22.460 --> 00:06:23.900
So what is Robin?


00:06:23.900 --> 00:06:28.900
Robin is a async web server and runtime written in Rust.


00:06:28.900 --> 00:06:32.880
And so that's pretty cool.


00:06:32.880 --> 00:06:35.100
And actually it's kind of been taking off


00:06:35.100 --> 00:06:36.960
in popularity and stuff.


00:06:36.960 --> 00:06:39.760
But the, so there's, we're gonna link to a bunch of stuff.


00:06:39.760 --> 00:06:43.520
One of them is the Hello Robin blog post


00:06:43.520 --> 00:06:44.880
written by the author.


00:06:44.880 --> 00:06:47.800
And so Robin is a fast high-performance


00:06:47.800 --> 00:06:51.040
Python web framework with Rust runtime.


00:06:51.040 --> 00:06:52.040
So what does that mean?


00:06:52.040 --> 00:06:54.800
It means that it's kind of like Flask.


00:06:54.800 --> 00:06:59.800
It looks a lot like, in one of the examples,


00:06:59.800 --> 00:07:02.120
it looks a lot like just a little Flask thing.


00:07:02.120 --> 00:07:06.080
You can do app gets and app puts and different things.


00:07:06.080 --> 00:07:07.180
It's decorators.


00:07:07.180 --> 00:07:08.080
It's very new.


00:07:08.080 --> 00:07:09.880
There's a lot of work to be done.


00:07:09.880 --> 00:07:14.240
So there's not a lot of ecosystem around it yet,


00:07:14.240 --> 00:07:17.380
but it's pretty cool.


00:07:17.380 --> 00:07:19.100
And I just kind of like this idea of like,


00:07:19.100 --> 00:07:21.160
well, let's make your code,


00:07:21.160 --> 00:07:23.020
The code you write look like Python.


00:07:23.020 --> 00:07:27.060
It is Python, but the backend stuff,


00:07:27.060 --> 00:07:28.960
maybe you don't care what that's running on


00:07:28.960 --> 00:07:31.880
and maybe Rust is fine.


00:07:31.880 --> 00:07:34.440
So one of the things it doesn't have an ASCII


00:07:34.440 --> 00:07:39.440
or ASGI or WSGI underlying, because that's a Python thing.


00:07:39.440 --> 00:07:43.060
It is async, it's very flask like.


00:07:43.060 --> 00:07:45.760
And the numbers kind of look impressive.


00:07:45.760 --> 00:07:47.960
So, and I know that benchmarks,


00:07:47.960 --> 00:07:50.400
you have to like read those with a grain of salt,


00:07:50.400 --> 00:07:55.000
but still requests per second getting,


00:07:55.000 --> 00:07:59.160
so we've got this document showing Flask


00:07:59.160 --> 00:08:03.160
with G-Unicorn at 1800 requests per second,


00:08:03.160 --> 00:08:07.680
but Robin going at 6,400 requests per second.


00:08:07.680 --> 00:08:09.600
This is kind of insane.


00:08:09.600 --> 00:08:14.560
So definitely worth checking out and trying, I think,


00:08:14.560 --> 00:08:16.100
or maybe not trying, but just watching


00:08:16.100 --> 00:08:17.200
to see what this does.


00:08:17.200 --> 00:08:19.320
Since it's very new though,


00:08:19.320 --> 00:08:21.680
One of the things I have to say is there's,


00:08:21.680 --> 00:08:22.820
there needs to be some,


00:08:22.820 --> 00:08:27.760
it's not really newbie friendly then I guess,


00:08:27.760 --> 00:08:29.400
because there's not a lot of docs yet.


00:08:29.400 --> 00:08:32.400
There is a, there is a doc site started,


00:08:32.400 --> 00:08:34.440
but there's a lot of work to do,


00:08:34.440 --> 00:08:36.480
but still getting started with it.


00:08:36.480 --> 00:08:39.400
If you have a really fast thing, it's pretty good.


00:08:39.400 --> 00:08:43.600
So, oh, so go ahead.


00:08:43.600 --> 00:08:45.160
- Yeah, well, a couple of notable things


00:08:45.160 --> 00:08:46.560
that stand out to me.


00:08:46.560 --> 00:08:49.800
One, it supports async and await,


00:08:49.800 --> 00:08:53.680
and it supports multi-threading at the rust layer.


00:08:53.680 --> 00:08:55.020
So combine those two things,


00:08:55.020 --> 00:08:57.460
and you might end up in a really interesting situation,


00:08:57.460 --> 00:08:59.720
which is probably where it's getting a lot of its


00:08:59.720 --> 00:09:02.060
high numbers in that benchmark from.


00:09:02.060 --> 00:09:02.900
- Yeah.


00:09:02.900 --> 00:09:03.720
- So that's great.


00:09:03.720 --> 00:09:05.040
It looks really simple.


00:09:05.040 --> 00:09:09.800
You know, it's very Flask or FastAPI-like, so that's cool.


00:09:09.800 --> 00:09:14.080
One thing that's notably missing that I haven't seen


00:09:14.080 --> 00:09:17.180
is how do I render an HTML page from it?


00:09:17.180 --> 00:09:20.040
It shows how to serve static files,


00:09:20.040 --> 00:09:21.240
which can be an HTML page.


00:09:21.240 --> 00:09:23.680
But I'm thinking, you know, Jinja templates,


00:09:23.680 --> 00:09:25.600
Chameleon templates, equivalent of Django templates.


00:09:25.600 --> 00:09:27.800
Like that's sort of the missing bit


00:09:27.800 --> 00:09:31.120
of a dynamic interactive website.


00:09:31.120 --> 00:09:31.960
- Yeah.


00:09:31.960 --> 00:09:32.780
- Also has an API.


00:09:32.780 --> 00:09:37.780
You could just import Jinja and configure it yourself,


00:09:37.780 --> 00:09:39.700
or import Chameleon and configure it yourself.


00:09:39.700 --> 00:09:43.360
And I've done that in some of my decorator API,


00:09:43.360 --> 00:09:47.300
or a wrapper things for adding that onto API calls.


00:09:47.300 --> 00:09:51.840
But that's just a layer of a thing you've got to learn


00:09:51.840 --> 00:09:53.160
to use it instead of just saying,


00:09:53.160 --> 00:09:55.600
here's a template or render this template or whatever.


00:09:55.600 --> 00:10:00.120
So I would love to see some sort of template support


00:10:00.120 --> 00:10:01.860
come built in for it.


00:10:01.860 --> 00:10:03.880
- Yeah, and I think that's something


00:10:03.880 --> 00:10:06.160
that definitely could be put in place.


00:10:06.160 --> 00:10:08.280
- Sure, actually not very hard at all.


00:10:08.280 --> 00:10:10.240
It's just, it just doesn't, I just didn't see it.


00:10:10.240 --> 00:10:11.680
- Doesn't have it yet.


00:10:11.680 --> 00:10:15.760
So target market, maybe just APIs.


00:10:15.760 --> 00:10:17.920
Who knows?


00:10:17.920 --> 00:10:19.400
- Yeah, it's got a lot of examples


00:10:19.400 --> 00:10:22.320
of JSON type of exchange, right?


00:10:22.320 --> 00:10:23.480
Tanya, what do you think?


00:10:23.480 --> 00:10:24.840
- Yeah, I was gonna ask, what does it come with?


00:10:24.840 --> 00:10:26.480
Like when you pip install it,


00:10:26.480 --> 00:10:29.040
what other packages does it come with?


00:10:29.040 --> 00:10:30.680
Or does it indicate?


00:10:30.680 --> 00:10:31.960
I'm just curious.


00:10:31.960 --> 00:10:35.360
- Well, we could look.


00:10:35.360 --> 00:10:37.800
I don't think there's much else there.


00:10:37.800 --> 00:10:38.640
We've got the--


00:10:38.640 --> 00:10:40.120
- There's very little here.


00:10:40.120 --> 00:10:41.600
- Okay.


00:10:41.600 --> 00:10:43.160
- Yeah.


00:10:43.160 --> 00:10:44.640
- Yeah, if you look at, Brian,


00:10:44.640 --> 00:10:48.320
open up the, just the requirements.txt file there,


00:10:48.320 --> 00:10:50.660
and you'll get, you see it's like,


00:10:50.660 --> 00:10:54.120
yeah, the last file there.


00:10:54.120 --> 00:10:54.960
- Okay.


00:10:54.960 --> 00:10:57.400
- Like, that's the super small list.


00:10:57.400 --> 00:10:58.720
- Oh, wow, okay.


00:10:58.720 --> 00:11:00.280
Yeah, I mean, you have to start somewhere, right?


00:11:00.280 --> 00:11:02.280
So I think it's definitely a good start.


00:11:02.280 --> 00:11:03.960
It does seem like a lot of the, not a lot,


00:11:03.960 --> 00:11:05.840
maybe the last few frameworks,


00:11:05.840 --> 00:11:07.800
web frameworks that have come out in Python here,


00:11:07.800 --> 00:11:10.640
you know, they do kind of model after Flask.


00:11:10.640 --> 00:11:11.880
- Yeah, yeah, yeah.


00:11:11.880 --> 00:11:13.640
- Yeah, I've been doing quite a bit in FastAPI


00:11:13.640 --> 00:11:16.040
and Flask as well, 2.0.


00:11:16.040 --> 00:11:17.080
- Yeah, cool, yeah.


00:11:17.080 --> 00:11:20.280
I think Flask has become very popular in its own right,


00:11:20.280 --> 00:11:24.200
but it also, its idea of how web apps should look in Python


00:11:24.200 --> 00:11:25.920
has spread to all the other frameworks


00:11:25.920 --> 00:11:27.020
that are kind of new, right?


00:11:27.020 --> 00:11:29.320
Like FastAPI is a variation on that.


00:11:29.320 --> 00:11:30.920
Yeah, awesome.


00:11:30.920 --> 00:11:32.320
- I can't remember where I read it,


00:11:32.320 --> 00:11:35.680
but there was a part of this Robin documentation


00:11:35.680 --> 00:11:37.140
that talked about just,


00:11:38.320 --> 00:11:40.240
is like almost started out as a,


00:11:40.240 --> 00:11:43.020
I think a college project or something of like,


00:11:43.020 --> 00:11:47.120
what if I built Flask, but async in it or in the target,


00:11:47.120 --> 00:11:49.240
it ends up being sort of like FastAPI.


00:11:49.240 --> 00:11:52.400
So FastAPI, yes, you can render websites with it,


00:11:52.400 --> 00:11:56.700
but the original focus wasn't websites, it was APIs.


00:11:56.700 --> 00:12:02.080
And I think this is, it's even an earlier stage thing


00:12:02.080 --> 00:12:03.320
than FastAPI.


00:12:03.320 --> 00:12:05.960
So I think it's definitely worth watching.


00:12:07.040 --> 00:12:11.800
There is a talk from last fall that's linked to on,


00:12:11.800 --> 00:12:16.800
I think the main page and then Henry Schreiner


00:12:16.800 --> 00:12:20.000
in the audience says Robin had a lightning talk at PyCon.


00:12:20.000 --> 00:12:21.480
So check that out.


00:12:21.480 --> 00:12:22.320
- Oh, nice.


00:12:22.320 --> 00:12:26.080
Yeah, I should, I didn't hear about that, but nice.


00:12:26.080 --> 00:12:26.980
- Yeah, absolutely.


00:12:26.980 --> 00:12:28.880
Brian, scroll down to just where it says why


00:12:28.880 --> 00:12:30.920
another framework real quick.


00:12:30.920 --> 00:12:32.180
Just put a bit more.


00:12:32.180 --> 00:12:33.320
Yeah, so one of the interests,


00:12:33.320 --> 00:12:34.800
this is pretty interesting to me


00:12:34.800 --> 00:12:38.160
And it could be a sign of things to come,


00:12:38.160 --> 00:12:40.400
or it could be just really great for Robin.


00:12:40.400 --> 00:12:44.000
It says one of the things they're trying to get around


00:12:44.000 --> 00:12:48.560
is the execution traditionally, a lot of these frameworks


00:12:48.560 --> 00:12:49.880
has been with Python.


00:12:49.880 --> 00:12:54.920
So Python has the GIL, which is rough on parallelization


00:12:54.920 --> 00:12:55.480
and so on.


00:12:55.480 --> 00:12:59.680
It says this is using the Rust runtime and server, which


00:12:59.680 --> 00:13:01.880
attempts to work around the GIL in order


00:13:01.880 --> 00:13:03.360
to improve performance.


00:13:03.360 --> 00:13:06.840
So if you could set yourself free from the gill,


00:13:06.840 --> 00:13:10.080
I don't know, maybe it hosts like multiple little


00:13:10.080 --> 00:13:14.220
pythons per thread or something, that's pretty cool.


00:13:14.220 --> 00:13:15.520
- That's one of the things I'm wondering is


00:13:15.520 --> 00:13:17.680
if the runtimes in Rust,


00:13:17.680 --> 00:13:20.680
how is it launching your code for the callbacks?


00:13:20.680 --> 00:13:22.480
But I don't know.


00:13:22.480 --> 00:13:25.960
There's a, the documentation does have architecture docs.


00:13:25.960 --> 00:13:28.120
So if you're, actually it's very well documented


00:13:28.120 --> 00:13:30.000
architecture wise, it's not well documented


00:13:30.000 --> 00:13:31.720
for how to use it wise.


00:13:31.720 --> 00:13:34.320
- Yeah, yeah, indeed.


00:13:34.320 --> 00:13:36.620
All right, well, good find, that one's great.


00:13:36.620 --> 00:13:40.320
All right, Tonya, off to your item next.


00:13:40.320 --> 00:13:44.840
- All right, this is, oh wait, this is Sports-A-Pie.


00:13:44.840 --> 00:13:49.920
So somebody told, I mean, okay,


00:13:49.920 --> 00:13:50.800
so for those of you who don't know,


00:13:50.800 --> 00:13:52.040
I'm really big into sports, right?


00:13:52.040 --> 00:13:57.040
Like I'm a huge NBA, NFL, baseball, hockey, football fan.


00:13:58.940 --> 00:14:01.960
So I'm doing a lot now with, you know,


00:14:01.960 --> 00:14:05.580
writing some web applications, some sports web applications.


00:14:05.580 --> 00:14:08.920
So this is a library that somebody sent me


00:14:08.920 --> 00:14:09.760
called SportsApi.


00:14:09.760 --> 00:14:13.740
It's a free sports API written for Python.


00:14:13.740 --> 00:14:17.140
And what it does, it actually pulls stats


00:14:17.140 --> 00:14:20.100
from sportsreference.com.


00:14:20.100 --> 00:14:22.900
I believe it's sports-reference.com.


00:14:22.900 --> 00:14:24.700
And that site, it's a great website.


00:14:24.700 --> 00:14:28.260
That site is for getting sports statistics


00:14:28.260 --> 00:14:31.780
for like professional sports, like the NBA, NFL, NHL,


00:14:31.780 --> 00:14:35.220
Major League Baseball and college basketball and football.


00:14:35.220 --> 00:14:37.460
And it's funny because yeah, it is really cool.


00:14:37.460 --> 00:14:40.020
And that site, it looks like a sportsreference.com


00:14:40.020 --> 00:14:41.980
looks kind of looks like a, you know,


00:14:41.980 --> 00:14:44.900
like an HTML site from like the nineties.


00:14:44.900 --> 00:14:45.740
So it kind of looks-


00:14:45.740 --> 00:14:47.180
- It does look like the dream of the 90s


00:14:47.180 --> 00:14:49.420
which is alive, doesn't it?


00:14:49.420 --> 00:14:50.620
- It really does.


00:14:50.620 --> 00:14:52.220
So I think it's also great for, you know,


00:14:52.220 --> 00:14:54.200
if you want to like learn or do some like web scraping,


00:14:54.200 --> 00:14:56.060
but of course, you know, email the site owners first.


00:14:56.060 --> 00:14:57.380
I believe that is allowed on that site.


00:14:57.380 --> 00:15:01.100
But anyways, so back to the API of SportsApie,


00:15:01.100 --> 00:15:06.100
you can get a lot of API queries for all the,


00:15:06.100 --> 00:15:08.340
you know, mainly like the North American sports,


00:15:08.340 --> 00:15:10.620
that I was saying, like the NBA, NFL,


00:15:10.620 --> 00:15:13.140
National Hockey League, Major League Baseball.


00:15:13.140 --> 00:15:16.460
You can get the list of teams for that sport,


00:15:16.460 --> 00:15:18.980
the date and time of games,


00:15:18.980 --> 00:15:22.240
the total number of wins for a team during the season,


00:15:22.240 --> 00:15:23.580
and much more.


00:15:23.580 --> 00:15:27.740
You can also get stats from players and from box scores.


00:15:27.740 --> 00:15:30.160
So, you know, you can build some cool stuff around sports


00:15:30.160 --> 00:15:32.800
and how teams or players perform during a game


00:15:32.800 --> 00:15:37.640
or during a season, or do something even better with it.


00:15:37.640 --> 00:15:39.480
- This is super cool.


00:15:39.480 --> 00:15:40.320
- Yeah.


00:15:40.320 --> 00:15:43.400
- It's got a kind of a nice object oriented model.


00:15:43.400 --> 00:15:47.360
So like, you know, from sportsapply.nfl.teams,


00:15:47.360 --> 00:15:49.440
import teams, and then you can create a,


00:15:49.440 --> 00:15:52.440
like a Detroit team or whatever.


00:15:52.440 --> 00:15:55.720
and then, or Purdue and get their schedule,


00:15:55.720 --> 00:15:57.560
even has integration with Pandas.


00:15:57.560 --> 00:15:59.740
So you can get like a data frame out.


00:15:59.740 --> 00:16:01.120
This is neat.


00:16:01.120 --> 00:16:03.120
- Yeah, I haven't used this one yet.


00:16:03.120 --> 00:16:04.840
There's another one that we'll talk about later


00:16:04.840 --> 00:16:09.480
this afternoon, but yeah, I wanna try this one as well.


00:16:09.480 --> 00:16:10.320
Because like I was saying,


00:16:10.320 --> 00:16:12.680
I'm always on sportsreference.com.


00:16:12.680 --> 00:16:14.680
Just check out the stats from the games.


00:16:14.680 --> 00:16:19.160
- People ask me a lot of times for API,


00:16:19.160 --> 00:16:21.080
so they can build interesting examples


00:16:21.080 --> 00:16:22.640
or play around and stuff.


00:16:22.640 --> 00:16:27.640
And it's so much of this tied into either college


00:16:27.640 --> 00:16:29.400
or professional sports.


00:16:29.400 --> 00:16:30.800
Like that information is really wrapped up


00:16:30.800 --> 00:16:32.120
and hard to get, right?


00:16:32.120 --> 00:16:33.960
- It is, yes.


00:16:33.960 --> 00:16:35.600
Yeah, it has been for a long time.


00:16:35.600 --> 00:16:37.920
I think it's becoming a little, I don't know,


00:16:37.920 --> 00:16:40.640
a little easier, but it's, for some reason,


00:16:40.640 --> 00:16:42.520
I remember like five, seven years ago,


00:16:42.520 --> 00:16:43.960
like I wanted to do stuff with sports,


00:16:43.960 --> 00:16:45.360
like build applications with sports,


00:16:45.360 --> 00:16:49.880
but I couldn't find an API that had no sports data


00:16:49.880 --> 00:16:51.520
Everything was kind of locked down.


00:16:51.520 --> 00:16:52.680
- Yeah, yeah.


00:16:52.680 --> 00:16:55.080
Well, I can start with this five-year-old CSV file,


00:16:55.080 --> 00:16:56.680
I guess that's what I'm gonna build.


00:16:56.680 --> 00:16:58.800
It's not so inspiring, but this looks really good.


00:16:58.800 --> 00:16:59.800
- Yeah, cool.


00:16:59.800 --> 00:17:01.720
- Great, that's cool.


00:17:01.720 --> 00:17:02.680
- Great.


00:17:02.680 --> 00:17:06.800
All right, now, before we move on, Brian,


00:17:06.800 --> 00:17:10.760
let me tell you about our sponsor for this week, okay?


00:17:10.760 --> 00:17:11.600
- Okay.


00:17:11.600 --> 00:17:15.320
- So this episode is brought to you by Compiler


00:17:15.320 --> 00:17:17.560
from a podcast from Red Hat.


00:17:17.560 --> 00:17:19.720
So just like you all out there listening,


00:17:19.720 --> 00:17:21.360
Brian and I are fans of podcasts.


00:17:21.360 --> 00:17:25.600
I'm happy to share a new one from Red Hat,


00:17:25.600 --> 00:17:31.080
Compiler, an original podcast from Red Hat.


00:17:31.080 --> 00:17:33.220
So with more and more of us working from home,


00:17:33.220 --> 00:17:35.640
it's important to keep human connections


00:17:35.640 --> 00:17:39.120
and not just be stuck in our work from home setup.


00:17:39.120 --> 00:17:42.400
And Compiler unravels industry topics and trends


00:17:42.400 --> 00:17:43.600
and things you always want to know


00:17:43.600 --> 00:17:45.520
through interviews with people who know it best


00:17:45.520 --> 00:17:48.080
and telling the stories of net technology,


00:17:48.080 --> 00:17:49.760
not just the howls of it.


00:17:49.760 --> 00:17:53.800
So on Compiler, you can hear a chorus of perspectives


00:17:53.800 --> 00:17:56.060
from diverse communities behind the code.


00:17:56.060 --> 00:17:58.400
These conversations include answering big questions


00:17:58.400 --> 00:18:00.160
like what is technical debt?


00:18:00.160 --> 00:18:03.220
What are tech hiring managers actually looking for?


00:18:03.220 --> 00:18:05.160
And do you have to know how to code


00:18:05.160 --> 00:18:07.360
to get started in open source?


00:18:07.360 --> 00:18:10.040
I actually was a guest on Red Hat's previous podcast,


00:18:10.040 --> 00:18:12.460
Command Line Heroes, for their Python episode,


00:18:12.460 --> 00:18:16.220
And it was super well done, really polished,


00:18:16.220 --> 00:18:19.780
and compiler follows along in an excellent tradition.


00:18:19.780 --> 00:18:22.100
So I checked out episode 12 of compiler,


00:18:22.100 --> 00:18:23.780
how we should handle failure,


00:18:23.780 --> 00:18:27.580
really creating a space for people to grow technically


00:18:27.580 --> 00:18:31.500
and not get fired just for one mistake.


00:18:31.500 --> 00:18:33.020
But how do you create an environment


00:18:33.020 --> 00:18:35.440
where people are willing to grow and try things like,


00:18:35.440 --> 00:18:36.860
well, let's try out Robin and try that.


00:18:36.860 --> 00:18:38.820
And if it doesn't work well, we gave it a good try.


00:18:38.820 --> 00:18:39.860
You learn something.


00:18:40.780 --> 00:18:44.880
So learn more about them at pythonbytes.fm/compiler.


00:18:44.880 --> 00:18:47.220
The link is in your podcast player show notes.


00:18:47.220 --> 00:18:49.360
I know you all out there listening,


00:18:49.360 --> 00:18:51.560
you can just go to your podcast app and type compiler,


00:18:51.560 --> 00:18:53.920
but please visit pythonbytes.fm/compiler


00:18:53.920 --> 00:18:55.800
and just click the link for your podcast player.


00:18:55.800 --> 00:18:58.100
There's like tons of them here.


00:18:58.100 --> 00:18:59.840
That way they know it came from us.


00:18:59.840 --> 00:19:02.840
So thank you Red Hat and compiler for supporting our show.


00:19:02.840 --> 00:19:07.880
All right, Brian, you ready for the next one?


00:19:07.880 --> 00:19:08.960
- I am.


00:19:09.840 --> 00:19:12.120
- Give us a shot of terminals.


00:19:12.120 --> 00:19:12.960
- A shot of terminals.


00:19:12.960 --> 00:19:14.920
I seem to have messed up my tabs though.


00:19:14.920 --> 00:19:17.240
So let me just open that back up here.


00:19:17.240 --> 00:19:19.400
There we go.


00:19:19.400 --> 00:19:22.160
So this one comes to me, I believe from Jay Miller.


00:19:22.160 --> 00:19:23.680
I'm pretty sure he's the one who told me about it.


00:19:23.680 --> 00:19:24.680
So thank you, Jay.


00:19:24.680 --> 00:19:27.140
And the idea is really simple.


00:19:27.140 --> 00:19:29.680
I want to create a screenshot of something


00:19:29.680 --> 00:19:32.860
I'm doing for a demo code.


00:19:32.860 --> 00:19:36.680
You know, I create a lot of courses and presentations.


00:19:36.680 --> 00:19:38.040
So it's super helpful for that.


00:19:38.040 --> 00:19:40.140
and he's doing DevRel and she's, I'm sure,


00:19:40.140 --> 00:19:41.740
doing lots of presentations where there's like,


00:19:41.740 --> 00:19:43.560
I need a screenshot of this thing


00:19:43.560 --> 00:19:45.540
and Brian need for books and so on.


00:19:45.540 --> 00:19:46.840
- Yeah, I could totally use this.


00:19:46.840 --> 00:19:49.200
- Yeah, this thing might turn out to be super useful.


00:19:49.200 --> 00:19:51.860
So what it is, is it's a thing,


00:19:51.860 --> 00:19:55.880
you brew install it and then,


00:19:55.880 --> 00:19:59.420
or there's different ways in which you can install it.


00:19:59.420 --> 00:20:01.780
It's a little bit like carbon.now.sh


00:20:01.780 --> 00:20:03.800
or if people have seen that.


00:20:03.800 --> 00:20:08.080
and you can capture some kind of output in your terminal


00:20:08.080 --> 00:20:10.600
exactly like it looks directly to an image.


00:20:10.600 --> 00:20:12.880
And you can even specify,


00:20:12.880 --> 00:20:16.240
I would like to pipe that directly to whatever app


00:20:16.240 --> 00:20:17.780
you edit screenshots in.


00:20:17.780 --> 00:20:20.880
So for example, I use Pixelmator Pro.


00:20:20.880 --> 00:20:24.040
So I might just say, take this, run this command,


00:20:24.040 --> 00:20:28.000
take the screenshot and then open it in Pixelmator Pro, go.


00:20:28.000 --> 00:20:29.000
And stuff like that.


00:20:29.000 --> 00:20:30.080
So really, really nice.


00:20:30.080 --> 00:20:32.080
The way you run it, it's a little bit like time


00:20:32.080 --> 00:20:33.360
or watch or perf.


00:20:33.360 --> 00:20:37.300
So you just say term shot and then like Python,


00:20:37.300 --> 00:20:39.940
some file or whatever it is you're trying to do.


00:20:39.940 --> 00:20:44.060
Here's an example of one that I did on,


00:20:44.060 --> 00:20:47.600
this is a program using Colorama


00:20:47.600 --> 00:20:49.760
to make interesting colors on the screen,


00:20:49.760 --> 00:20:53.440
doing async and await examples of like


00:20:53.440 --> 00:20:56.340
doing a bunch of requests against DocPython


00:20:56.340 --> 00:21:00.680
and then pulling back the titles using Beautiful Soup.


00:21:00.680 --> 00:21:04.100
And I just said, term shot Python program,


00:21:04.100 --> 00:21:08.040
boom and out it comes with this really nice looking picture.


00:21:08.040 --> 00:21:09.140
Exactly the right size.


00:21:09.140 --> 00:21:11.080
So however long the scroll back is,


00:21:11.080 --> 00:21:14.040
like that's the size of the screenshot.


00:21:14.040 --> 00:21:16.320
You don't have to like, you know, take a picture,


00:21:16.320 --> 00:21:18.000
scroll down some, take another picture,


00:21:18.000 --> 00:21:21.720
try to fit it back together, all that kind of weirdness.


00:21:21.720 --> 00:21:24.440
So, yeah, really neat.


00:21:24.440 --> 00:21:27.120
Yeah, and then the final thing is,


00:21:27.120 --> 00:21:32.260
If for some reason it's more complicated than one line of just Python this,


00:21:32.260 --> 00:21:34.500
but you're like, "I want to run three commands,


00:21:34.500 --> 00:21:38.860
so maybe what I want to do is I want to show that I'm SSHing into a server,


00:21:38.860 --> 00:21:42.940
then I'm running this command, and then I'm seeing the result of that


00:21:42.940 --> 00:21:45.400
or something like that through like LS."


00:21:45.400 --> 00:21:51.140
So if all else fails, you just type "term shot" and you give it some shell,


00:21:51.140 --> 00:21:57.080
like you could say /bin/zshell, ZSH, or /bin/bash,


00:21:57.080 --> 00:21:59.020
you do your work and once you exit the shell,


00:21:59.020 --> 00:22:03.300
it'll just take a screenshot of whatever you did while you were in there.


00:22:03.300 --> 00:22:05.800
That's also pretty good.


00:22:05.800 --> 00:22:08.440
>> That takes less thinking. I like that.


00:22:08.440 --> 00:22:09.240
>> Yeah, it does.


00:22:09.240 --> 00:22:10.960
>> Exactly.


00:22:10.960 --> 00:22:14.480
>> Yeah, it's so interesting. You're mentioning Colorama.


00:22:14.480 --> 00:22:16.960
Michael, I learned about Colorama from you actually.


00:22:16.960 --> 00:22:21.000
I took your asynchronous programming course.


00:22:21.000 --> 00:22:21.600
>> Oh, you did?


00:22:21.600 --> 00:22:23.200
>> Yeah, I did. Yeah.


00:22:23.200 --> 00:22:23.840
>> Thank you.


00:22:23.840 --> 00:22:25.200
>> Yeah, you're welcome. Yeah, of course.


00:22:25.200 --> 00:22:27.280
- Yeah, that example was from that course for sure.


00:22:27.280 --> 00:22:29.880
- Okay, yeah, yeah, I look familiar.


00:22:29.880 --> 00:22:31.440
- Nice. - Cool.


00:22:31.440 --> 00:22:33.000
- Yeah, what I thought was neat about it is it like,


00:22:33.000 --> 00:22:35.440
even with just non-standard print output and stuff,


00:22:35.440 --> 00:22:39.320
it still captures it, you know, reliably, which is nice.


00:22:39.320 --> 00:22:42.480
- So when you run the command, it takes a screenshot


00:22:42.480 --> 00:22:45.280
and it saves it to, I don't know, your desktop or,


00:22:45.280 --> 00:22:48.360
'cause I know like with Carbon, you can, you know,


00:22:48.360 --> 00:22:51.160
you can like click a button and it'll save it, you know,


00:22:51.160 --> 00:22:52.840
or just save it and then you can just paste it


00:22:52.840 --> 00:22:53.880
into wherever you want.


00:22:53.880 --> 00:22:54.800
- Yeah, exactly.


00:22:54.800 --> 00:22:56.160
I don't think it goes to your,


00:22:56.160 --> 00:22:58.120
I think it goes to whatever working directory


00:22:58.120 --> 00:22:59.360
you happen to be in.


00:22:59.360 --> 00:23:00.320
- Okay.


00:23:00.320 --> 00:23:02.560
- Just wherever you ran the command in that directory,


00:23:02.560 --> 00:23:04.080
there's an out.png.


00:23:04.080 --> 00:23:05.160
- Okay.


00:23:05.160 --> 00:23:07.280
- There's probably ways to specify it or whatever,


00:23:07.280 --> 00:23:10.040
but by default, it just drops that PNG file there.


00:23:10.040 --> 00:23:12.720
Yeah, it's super handy for presentations, I think.


00:23:12.720 --> 00:23:13.560
- Yeah.


00:23:13.560 --> 00:23:15.880
- All right, over to you, Brian.


00:23:15.880 --> 00:23:20.640
- Well, I want to talk about the GIL.


00:23:20.640 --> 00:23:22.120
We talked about it a little bit earlier,


00:23:22.120 --> 00:23:26.280
But so it Amar Turner touring,


00:23:26.280 --> 00:23:28.280
read an article called,


00:23:28.280 --> 00:23:30.680
"When Python Can't Thread,


00:23:30.680 --> 00:23:33.920
a Deep Dive into the GILs Impact."


00:23:33.920 --> 00:23:36.400
And what I really like about this article


00:23:36.400 --> 00:23:40.400
is just that the focus of it is to try to build,


00:23:40.400 --> 00:23:43.920
not the specifics of everything around the GIL,


00:23:43.920 --> 00:23:46.120
but as a user of Python,


00:23:46.120 --> 00:23:49.120
what's the mental model that you need


00:23:49.120 --> 00:23:53.200
to be able to utilize threading and multiprocessing


00:23:53.200 --> 00:23:55.840
and different extensions correctly


00:23:55.840 --> 00:23:57.640
to try to figure this out,


00:23:57.640 --> 00:24:00.720
so that you just have a gut feel for how things work


00:24:00.720 --> 00:24:03.900
so that you can work through it and everything.


00:24:03.900 --> 00:24:05.040
There's a little bit,


00:24:05.040 --> 00:24:06.400
it's kind of in the middle of the article,


00:24:06.400 --> 00:24:09.960
there's a mental model that he presents.


00:24:09.960 --> 00:24:12.560
And I'd like to talk about a little bit


00:24:12.560 --> 00:24:14.360
some of the other cool aspects of the article,


00:24:14.360 --> 00:24:16.860
but first, the mental model he's going for


00:24:16.860 --> 00:24:21.860
is a thread must hold the GIL to call a CPython API.


00:24:21.860 --> 00:24:28.580
And so anything that any Python code that's using API


00:24:28.580 --> 00:24:34.820
like built-in Python calls is gonna block


00:24:34.820 --> 00:24:36.880
because it's gonna grab the GIL.


00:24:36.880 --> 00:24:41.220
Other threads can't run if the GIL is there,


00:24:41.220 --> 00:24:43.120
but if you're doing pure Python stuff,


00:24:44.180 --> 00:24:45.820
your stuff gets interrupted


00:24:45.820 --> 00:24:48.640
every five milliseconds automatically.


00:24:48.640 --> 00:24:51.820
I didn't know this, but that's kind of cool.


00:24:51.820 --> 00:24:53.860
Long running things, so if you have a sleep


00:24:53.860 --> 00:24:58.620
or some other extra process that takes a long time,


00:24:58.620 --> 00:25:00.300
not Python code going through,


00:25:00.300 --> 00:25:03.340
but like a sleep or something,


00:25:03.340 --> 00:25:05.500
or you probably don't have a long sleep,


00:25:05.500 --> 00:25:07.540
but maybe you're reading a file or something.


00:25:07.540 --> 00:25:08.900
Something that-- - Talk to a database,


00:25:08.900 --> 00:25:09.860
something like that.


00:25:09.860 --> 00:25:12.860
- Yeah, it doesn't automatically interrupt


00:25:12.860 --> 00:25:13.820
every five milliseconds.


00:25:13.820 --> 00:25:15.580
So the five milliseconds isn't guaranteed.


00:25:15.580 --> 00:25:18.540
So there's blocking possibilities.


00:25:18.540 --> 00:25:23.540
And then Python extensions written in C


00:25:23.540 --> 00:25:28.820
or Rust or something can explicitly release the GIL


00:25:28.820 --> 00:25:31.140
to allow, so you can get around this


00:25:31.140 --> 00:25:32.780
with extensions and stuff.


00:25:32.780 --> 00:25:37.780
So that's the mental model, but to really sink it home,


00:25:37.780 --> 00:25:40.980
he's got a whole bunch of these profiling graphs


00:25:40.980 --> 00:25:42.140
that are great.


00:25:42.140 --> 00:25:45.980
So here's an example of a little program that starts.


00:25:45.980 --> 00:25:47.100
There's like two functions.


00:25:47.100 --> 00:25:50.140
There's a, it's really a main and a go.


00:25:50.140 --> 00:25:53.100
And essentially you end up with two threads.


00:25:53.100 --> 00:25:55.120
Like the thread starts this go thing


00:25:55.120 --> 00:25:58.500
and then you run go within the main thread also.


00:25:58.500 --> 00:26:01.540
So what this is, it's just doing like some summing


00:26:01.540 --> 00:26:03.020
of a whole bunch of numbers,


00:26:03.020 --> 00:26:05.820
but the example is just to keep busy for a while


00:26:05.820 --> 00:26:09.820
and then look at what happens.


00:26:09.820 --> 00:26:13.980
And what happens is you get these shifts of like,


00:26:13.980 --> 00:26:15.940
one of them is spinning around,


00:26:15.940 --> 00:26:18.380
but the other one's just, you know,


00:26:18.380 --> 00:26:21.180
this toggling back and forth that happens.


00:26:21.180 --> 00:26:22.540
It's kind of cool.


00:26:22.540 --> 00:26:27.540
There's all the different models that can happen.


00:26:27.540 --> 00:26:32.700
And like, here's one where you're, let's see,


00:26:32.700 --> 00:26:33.860
what are we doing here?


00:26:33.860 --> 00:26:37.900
It's sleeping for a while, so it's completely blocked.


00:26:37.900 --> 00:26:42.180
You've got one thread that's just completely blocked for a long time.


00:26:42.180 --> 00:26:47.500
The visuals of the profile are great to visualize what's going on.


00:26:47.500 --> 00:26:50.820
Anyway, at the end of the article,


00:26:50.820 --> 00:26:53.940
he talks about how to get around it and when and where and how to


00:26:53.940 --> 00:26:58.220
use different models like async and extensions and things like that.


00:26:58.220 --> 00:27:01.100
Anybody that's really caring about this stuff,


00:27:01.100 --> 00:27:02.820
I think this is a great article.


00:27:02.820 --> 00:27:06.380
>> The visualizations are quite neat.


00:27:06.380 --> 00:27:09.620
Instead of just saying you're spending this much time


00:27:09.620 --> 00:27:13.080
in a particular function, it says,


00:27:13.080 --> 00:27:15.660
and you're waiting or you're doing CPU work, right?


00:27:15.660 --> 00:27:18.900
And you can actually see those side by side


00:27:18.900 --> 00:27:20.780
and see like, the CPU's here,


00:27:20.780 --> 00:27:22.620
'cause normal profilers will just tell you,


00:27:22.620 --> 00:27:25.500
well, you're spending time here,


00:27:25.500 --> 00:27:26.380
what are you doing?


00:27:26.380 --> 00:27:28.180
Yeah, exactly right.


00:27:28.180 --> 00:27:29.900
- Yeah, it's really helpful.


00:27:29.900 --> 00:27:36.220
I learned visually, I'm a three, large visual learner.


00:27:36.240 --> 00:27:39.160
Yeah, like the GIL is something that's always kind of like,


00:27:39.160 --> 00:27:41.840
I don't know, it just was really confusing to me.


00:27:41.840 --> 00:27:43.280
You know, when I was first starting out


00:27:43.280 --> 00:27:45.540
and getting into like more intermediate stuff,


00:27:45.540 --> 00:27:48.420
but I took this, it was like a Python deep dive course


00:27:48.420 --> 00:27:50.920
where the instructor really kind of like


00:27:50.920 --> 00:27:54.760
talked about things behind the language, you know.


00:27:54.760 --> 00:27:56.680
So it really kind of helped me grasp


00:27:56.680 --> 00:27:57.960
and wrap my head around it more.


00:27:57.960 --> 00:27:59.800
But yeah, this is great, I love this.


00:27:59.800 --> 00:28:02.400
- Yeah.


00:28:02.400 --> 00:28:03.400
Nice work, Edmar.


00:28:03.400 --> 00:28:04.720
This is definitely a good one.


00:28:04.720 --> 00:28:06.240
I like the pictures as well.


00:28:06.240 --> 00:28:09.160
All right.


00:28:09.160 --> 00:28:10.240
Tanya, you wanna take us out?


00:28:10.240 --> 00:28:12.520
Now I apologize, I believe I switched the order


00:28:12.520 --> 00:28:13.680
of your two topics.


00:28:13.680 --> 00:28:15.120
- That's okay, no worries.


00:28:15.120 --> 00:28:16.920
- Yeah, I'm gonna throw you out there.


00:28:16.920 --> 00:28:18.240
- That's okay, so this is the,


00:28:18.240 --> 00:28:20.560
yeah, okay, so this one is the NBA API.


00:28:20.560 --> 00:28:25.320
So this one is just strictly for the NBA,


00:28:25.320 --> 00:28:26.840
the National Basketball Association.


00:28:26.840 --> 00:28:28.280
- This is really close to home for you, right?


00:28:28.280 --> 00:28:30.400
This is like your-- - Yes, very close to home.


00:28:30.400 --> 00:28:32.320
Yes, it brings back memories.


00:28:32.320 --> 00:28:36.040
So, and right now with, you know, NBA playoffs happening,


00:28:36.040 --> 00:28:38.080
I think this is pretty exciting.


00:28:38.080 --> 00:28:40.680
So this package is maintained by a gentleman named


00:28:40.680 --> 00:28:44.320
Suar Patel, who does a very great job of maintaining it.


00:28:44.320 --> 00:28:45.960
It's very up to date.


00:28:45.960 --> 00:28:50.960
This API pulls data from the NBA.com, right?


00:28:50.960 --> 00:28:54.040
That's the official website


00:28:54.040 --> 00:28:56.920
of the National Basketball Association.


00:28:56.920 --> 00:29:01.920
With this package, you get like more accessible endpoints


00:29:02.240 --> 00:29:04.080
The documentation is really, really good.


00:29:04.080 --> 00:29:07.120
I think it's probably, you know, it's a really well documented API.


00:29:07.120 --> 00:29:10.440
Let me see what else here.


00:29:10.440 --> 00:29:18.520
The NBA.com API isn't as well documented because, you know, a lot of things change,


00:29:18.520 --> 00:29:20.280
you know, things change frequently, right?


00:29:20.280 --> 00:29:23.600
Like players are traded, players get injured, players retire.


00:29:23.600 --> 00:29:27.280
You have to take into account all the stats as well, like points per game,


00:29:27.280 --> 00:29:29.280
rebounds per game and that type of thing.


00:29:29.800 --> 00:29:33.480
So this package, the NBA API package has tons of features.


00:29:33.480 --> 00:29:39.080
Like you can get information on players, teams,


00:29:39.080 --> 00:29:41.880
like more static data as well as like data


00:29:41.880 --> 00:29:44.600
that changes as well, like their stats.


00:29:44.600 --> 00:29:49.240
I think their stats per game, per season,


00:29:49.240 --> 00:29:50.480
like their player game log,


00:29:50.480 --> 00:29:52.040
there's tons and tons of endpoints.


00:29:52.040 --> 00:29:53.720
So I would, if you wanna work with this API,


00:29:53.720 --> 00:29:56.660
I recommend looking up the API endpoints.


00:29:56.660 --> 00:30:00.700
There's probably like over 40 of them.


00:30:00.700 --> 00:30:01.540
- Wow.


00:30:01.540 --> 00:30:03.500
- Or maybe around 40 actually.


00:30:03.500 --> 00:30:04.540
Yeah, it's just really cool.


00:30:04.540 --> 00:30:05.900
I'm actually working with this one right now


00:30:05.900 --> 00:30:09.980
and I'm writing a, building a sports,


00:30:09.980 --> 00:30:12.220
NBA ranking website right now.


00:30:12.220 --> 00:30:14.620
I'm using this package.


00:30:14.620 --> 00:30:15.620
- How fun.


00:30:15.620 --> 00:30:16.740
One of the things that's cool


00:30:16.740 --> 00:30:19.020
is it has a lot of search functionalities


00:30:19.020 --> 00:30:21.460
and not just direct by, you know,


00:30:21.460 --> 00:30:24.180
find me the team from this city or this name,


00:30:24.180 --> 00:30:29.180
but like find teams by state or something.


00:30:29.180 --> 00:30:30.260
Yeah.


00:30:30.260 --> 00:30:31.140
- Yeah.


00:30:31.140 --> 00:30:33.300
Yeah, it's definitely very clever.


00:30:33.300 --> 00:30:37.100
And it, I would say between like the first one we looked at


00:30:37.100 --> 00:30:38.500
is sportsreference.com.


00:30:38.500 --> 00:30:39.660
I don't know where they're pulling,


00:30:39.660 --> 00:30:41.860
I think, I'm not sure where they're pulling their data,


00:30:41.860 --> 00:30:46.340
sports reference, maybe from each individual site


00:30:46.340 --> 00:30:49.380
of the, you know, the sports associations, I'm guessing.


00:30:49.380 --> 00:30:51.540
- Right.


00:30:51.540 --> 00:30:52.460
- But.


00:30:52.460 --> 00:30:54.340
- Well, I mean, like for example,


00:30:54.340 --> 00:30:58.140
the data from MBAs gotta be more centralized


00:30:58.140 --> 00:31:01.540
than like all of the college ball stuff.


00:31:01.540 --> 00:31:03.180
- Yeah, yeah.


00:31:03.180 --> 00:31:05.980
- This is cool.


00:31:05.980 --> 00:31:07.020
- Yeah, I would think so too.


00:31:07.020 --> 00:31:10.420
- Cool, even as support for...


00:31:10.420 --> 00:31:16.460
That looks pretty neat, wow.


00:31:16.460 --> 00:31:19.620
This is, there's a lot of data here.


00:31:19.620 --> 00:31:20.460
- Yeah, there's tons of data.


00:31:20.460 --> 00:31:23.020
- Check out the notebooks, right?


00:31:23.020 --> 00:31:23.860
- Yeah, yeah, I have a notebook.


00:31:23.860 --> 00:31:26.340
I have a notebook to have, yeah.


00:31:26.340 --> 00:31:27.540
Yeah, there's a lot of data.


00:31:27.540 --> 00:31:28.380
It's very good.


00:31:28.380 --> 00:31:29.900
Yeah, it's pretty awesome.


00:31:29.900 --> 00:31:32.600
There's a lot that you can do, a lot of fun stuff.


00:31:32.600 --> 00:31:35.360
- Cool, I know so many people wanna build examples


00:31:35.360 --> 00:31:39.220
with sports and I think having some live data


00:31:39.220 --> 00:31:40.940
would be really, really neat.


00:31:40.940 --> 00:31:43.860
So, you know, like during, like you say,


00:31:43.860 --> 00:31:45.820
like right now during the playoffs or something,


00:31:45.820 --> 00:31:48.260
you could do some fun things indeed.


00:31:48.260 --> 00:31:49.100
- Yep.


00:31:49.100 --> 00:31:54.100
- All right, Brian, is that our six items?


00:31:54.100 --> 00:31:55.700
- It is.


00:31:55.700 --> 00:31:58.660
So do you have anything extra to share with us?


00:31:58.660 --> 00:32:03.280
- I have, I think just a real quick one here for us.


00:32:03.280 --> 00:32:09.580
From Pablo, we have Python 3.11, beta one is here.


00:32:09.580 --> 00:32:13.880
So hurrah, this marks feature freeze,


00:32:13.880 --> 00:32:15.780
which means there'll be no new features


00:32:15.780 --> 00:32:17.980
or APIs, only bug fixes.


00:32:17.980 --> 00:32:22.220
So please, they say, if you maintain a Python package,


00:32:22.220 --> 00:32:25.060
help us test that everything works as expected.


00:32:25.060 --> 00:32:26.820
But this is pretty neat.


00:32:26.820 --> 00:32:28.420
- Nice.


00:32:28.420 --> 00:32:29.660
- Yeah, that's it for me.


00:32:29.660 --> 00:32:35.160
- On that, I'm gonna grab this just a second.


00:32:35.160 --> 00:32:38.100
We'll link to this as well.


00:32:38.100 --> 00:32:41.540
Simon Willison has a little blurb on,


00:32:41.540 --> 00:32:45.580
like if you're using GitHub actions to test your packages,


00:32:46.900 --> 00:32:51.460
Simon has a code snippet for exactly how to do that.


00:32:51.460 --> 00:32:56.460
Essentially the Python thing you want is Python 3.11-dev


00:32:56.460 --> 00:32:58.820
and make sure it's in quotes


00:32:58.820 --> 00:33:02.060
and just add that to your Python versions matrix.


00:33:02.060 --> 00:33:04.140
- All right, fantastic.


00:33:04.140 --> 00:33:04.980
- Cool.


00:33:04.980 --> 00:33:08.720
- So how about you, Tanya?


00:33:08.720 --> 00:33:11.500
- That's pretty much it.


00:33:11.500 --> 00:33:13.020
Although I do see some people in the chat


00:33:13.020 --> 00:33:15.380
that I've met at PyCon last week.


00:33:15.380 --> 00:33:16.500
Mario, hey Mario.


00:33:16.500 --> 00:33:19.020
I'm not sure if you're still here, but hello.


00:33:19.020 --> 00:33:20.180
- Cool.


00:33:20.180 --> 00:33:21.020
- Yeah. - Fantastic.


00:33:21.020 --> 00:33:21.940
Yeah, you just came back from PyCon


00:33:21.940 --> 00:33:23.180
and Ryan and I were not there.


00:33:23.180 --> 00:33:24.500
You wanna give us a quick,


00:33:24.500 --> 00:33:28.620
just a quick report from being on scene?


00:33:28.620 --> 00:33:29.860
- Yeah, it was amazing.


00:33:29.860 --> 00:33:31.520
It was my first PyCon


00:33:31.520 --> 00:33:35.180
and actually one of my first tech conferences, actually.


00:33:35.180 --> 00:33:36.080
It was great.


00:33:36.080 --> 00:33:38.540
I spent most of the time working at our booth for DeepGram


00:33:38.540 --> 00:33:40.820
'cause we were helping to sponsor the event.


00:33:40.820 --> 00:33:43.700
I did catch a few talks


00:33:44.960 --> 00:33:47.560
and met so many amazing people


00:33:47.560 --> 00:33:49.560
and also just connected with people


00:33:49.560 --> 00:33:51.480
that I have been communicating with


00:33:51.480 --> 00:33:53.220
over the last several years,


00:33:53.220 --> 00:33:57.420
via internet and chat and stuff like that.


00:33:57.420 --> 00:33:58.480
So it was just really fun.


00:33:58.480 --> 00:33:59.440
It was a good time.


00:33:59.440 --> 00:34:02.120
- I love PyCon.


00:34:02.120 --> 00:34:03.960
I consider it my geek holiday.


00:34:03.960 --> 00:34:04.800
- Yeah. (laughs)


00:34:04.800 --> 00:34:07.160
- I love to go there and meet so many people.


00:34:07.160 --> 00:34:08.560
Everyone's so accessible


00:34:08.560 --> 00:34:11.960
and I spend most of my time just walking around


00:34:11.960 --> 00:34:14.440
looking to say hi to folks and whatnot.


00:34:14.440 --> 00:34:15.440
- Yeah.


00:34:15.440 --> 00:34:19.040
- So I have an idea, Michael, maybe next year we should go.


00:34:19.040 --> 00:34:21.640
- Yeah, maybe next year we should go.


00:34:21.640 --> 00:34:22.480
Yeah, definitely.


00:34:22.480 --> 00:34:25.280
I'm looking forward to getting back there.


00:34:25.280 --> 00:34:27.240
Are you looking forward to a joke?


00:34:27.240 --> 00:34:28.080
I do.


00:34:28.080 --> 00:34:29.560
Well, I have something for you.


00:34:29.560 --> 00:34:32.240
I'll let you be the judge of it's funny.


00:34:32.240 --> 00:34:33.840
All right, so here's what I got.


00:34:33.840 --> 00:34:35.720
Brian, just maybe give us a quick description


00:34:35.720 --> 00:34:37.680
of what this picture is about here.


00:34:37.680 --> 00:34:39.920
- I don't know.


00:34:39.920 --> 00:34:42.920
There's a guy like, looks like really stressed out,


00:34:42.920 --> 00:34:45.480
holding his hand through his face?


00:34:45.480 --> 00:34:47.040
>> I think he's crying.


00:34:47.040 --> 00:34:47.360
>> Crying, yeah.


00:34:47.360 --> 00:34:48.760
>> He's pretty sad. I mean,


00:34:48.760 --> 00:34:51.160
red eyes almost, just crying.


00:34:51.160 --> 00:34:53.480
But we all come to these websites and it's,


00:34:53.480 --> 00:34:56.440
prove you're human and all these recapture things.


00:34:56.440 --> 00:34:58.960
Sometimes you're lucky and you get to slide the puzzle over


00:34:58.960 --> 00:35:02.560
until the dog fits in its house or something rather than


00:35:02.560 --> 00:35:07.080
find all, highlight all the stoplights or anyways.


00:35:07.080 --> 00:35:11.360
The joke is, with a very sad guy here asking,


00:35:11.360 --> 00:35:14.120
He says, "When a computer asks, 'Are you a robot?'


00:35:14.120 --> 00:35:16.840
maybe it's just wanting to find its family."


00:35:16.840 --> 00:35:19.120
(laughing)


00:35:19.120 --> 00:35:20.240
- Poor thing.


00:35:20.240 --> 00:35:21.080
- Maybe it does.


00:35:21.080 --> 00:35:23.160
Maybe we're not, we should just be helping more.


00:35:23.160 --> 00:35:26.080
And you know, every time you prove a recapture,


00:35:26.080 --> 00:35:27.960
it's just like, no, that's not my family.


00:35:27.960 --> 00:35:28.860
- That's so funny.


00:35:28.860 --> 00:35:33.400
- One of the funniest find this memes


00:35:33.400 --> 00:35:36.600
that I saw recently was just like a picture of space.


00:35:36.600 --> 00:35:38.720
And it said, click all the squares


00:35:38.720 --> 00:35:41.200
that have a Klingon bird of prey.


00:35:41.200 --> 00:35:54.920
inside. Thanks again for having a great podcast. Thanks, Tanya, for showing up and doing this


00:35:54.920 --> 00:36:00.120
with us. Yeah, thanks for having me. It was fun. So yeah, great to have you on here, Tanya.


00:36:00.120 --> 00:36:00.880
Yeah, thank you.


00:36:00.880 --> 00:36:10.880
[BLANK_AUDIO]

