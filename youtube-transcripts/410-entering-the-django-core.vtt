WEBVTT

00:00:00.001 --> 00:00:03.480
Hey, hey, Brian.

00:00:03.480 --> 00:00:04.040
Hey.

00:00:04.040 --> 00:00:06.340
Shall we kick it off?

00:00:06.340 --> 00:00:06.960
Let's do it.

00:00:06.960 --> 00:00:08.080
Yeah, let's do it.

00:00:08.080 --> 00:00:09.200
Let's do it.

00:00:09.200 --> 00:00:12.360
Hello, and welcome to Python Bytes,

00:00:12.360 --> 00:00:13.840
where we deliver Python news and headlines

00:00:13.840 --> 00:00:15.280
directly to your earbuds.

00:00:15.280 --> 00:00:19.520
This is episode 410, recorded Monday, November 18th,

00:00:19.520 --> 00:00:22.100
at 7.37 a.m.

00:00:22.100 --> 00:00:24.540
Again, an unusual time for our live streaming,

00:00:24.540 --> 00:00:25.340
but here we are.

00:00:25.340 --> 00:00:26.480
I am Michael Kennedy.

00:00:26.480 --> 00:00:28.020
And I am Brian Okken.

00:00:28.020 --> 00:00:31.240
And this episode is brought to you by us,

00:00:31.240 --> 00:00:35.460
our courses, the podcast, all those things,

00:00:35.460 --> 00:00:36.720
Brian's book, et cetera.

00:00:36.720 --> 00:00:38.480
We'll check them out.

00:00:38.480 --> 00:00:41.160
Links are in the podcast show notes there.

00:00:41.160 --> 00:00:42.580
You can find them right in your podcast player.

00:00:42.580 --> 00:00:45.840
And we have a standard introduction, Brian,

00:00:45.840 --> 00:00:48.360
of, hey, follow us on Mastodon.

00:00:48.360 --> 00:00:49.700
But you know what?

00:00:49.700 --> 00:00:52.120
This is not news to you.

00:00:52.120 --> 00:00:55.920
You created us a Python Bytes Blue Sky account.

00:00:55.920 --> 00:00:56.720
How about that?

00:00:56.720 --> 00:00:58.000
Yeah, Blue Sky.

00:00:58.000 --> 00:01:01.740
So you can still follow us on Mastodon.

00:01:01.740 --> 00:01:02.920
We're still very active there.

00:01:02.920 --> 00:01:07.980
But if you're one of the many people that never really made your way to Mastodon,

00:01:07.980 --> 00:01:09.540
but decided to make your way to Blue Sky,

00:01:09.540 --> 00:01:15.920
well, then make your way over to the Python Bytes.BSky.social account,

00:01:15.920 --> 00:01:19.580
where that is the jumping off point to stay in touch with all of us.

00:01:19.820 --> 00:01:21.580
So follow the podcast there.

00:01:21.580 --> 00:01:22.940
You can follow Brian.

00:01:22.940 --> 00:01:25.420
He's linked in the profile there.

00:01:25.420 --> 00:01:28.140
You can follow me over there as well.

00:01:28.140 --> 00:01:31.980
And once you click on me, you can find Talk Python, all those things.

00:01:31.980 --> 00:01:33.300
You know, follow the chain.

00:01:33.300 --> 00:01:34.460
Follow the chain.

00:01:34.680 --> 00:01:37.880
Follow us on Mastodon and Blue Sky.

00:01:37.880 --> 00:01:39.360
I'm enjoying Blue Sky, Brian.

00:01:39.360 --> 00:01:40.060
What do you think about it?

00:01:41.380 --> 00:01:44.320
I think the default, I like it.

00:01:44.320 --> 00:01:46.880
Also, I like that the default experience is pretty good.

00:01:46.880 --> 00:01:54.420
Mastodon, I love Mastodon, but I had to get to, I'm using the Mona client on my iPhone,

00:01:55.000 --> 00:01:58.000
and it works, it's a really comfortable thing.

00:01:58.000 --> 00:02:01.180
But it took me a while to get there because there really isn't,

00:02:01.180 --> 00:02:05.240
I don't, if there is a default Mastodon client, it's not great.

00:02:05.240 --> 00:02:10.020
Yeah, there is a default one, but I tried it for a while and I switched to Mona as well.

00:02:10.020 --> 00:02:11.000
Yeah, so.

00:02:11.000 --> 00:02:11.340
Yeah.

00:02:11.340 --> 00:02:16.340
I'm like, you gotta go, if a bunch of people want to move over there,

00:02:16.340 --> 00:02:17.740
you know, we should be part of that community.

00:02:17.740 --> 00:02:19.620
There's a ton of familiar faces.

00:02:19.620 --> 00:02:23.340
Many of the people we talk about on the show are pretty active over there, so.

00:02:23.800 --> 00:02:26.300
But it doesn't, you know, one thing, it doesn't have an edit feature.

00:02:26.300 --> 00:02:28.020
When you post, you're done.

00:02:28.020 --> 00:02:29.340
You can't edit it later.

00:02:29.340 --> 00:02:33.560
Just prepare people, prepare to receive a lot of typos from me.

00:02:33.560 --> 00:02:37.140
For some reason, I like type fast on my phone and I don't really look and just hit send.

00:02:37.140 --> 00:02:38.540
That may be on me.

00:02:38.540 --> 00:02:44.000
But I think it's bad form to call people out on typos on social media platforms.

00:02:44.000 --> 00:02:46.440
You know, it's just, yeah.

00:02:46.440 --> 00:02:46.540
Yeah.

00:02:46.540 --> 00:02:46.820
Anyway.

00:02:46.820 --> 00:02:48.380
Cool.

00:02:48.380 --> 00:02:49.040
Indeed.

00:02:49.040 --> 00:02:49.760
Indeed.

00:02:49.760 --> 00:02:52.120
And, you know, final bits of introduction.

00:02:52.120 --> 00:02:53.520
Check out the live show.

00:02:53.520 --> 00:02:55.200
We don't know when it is.

00:02:55.200 --> 00:02:58.360
Maybe Monday at 7.

00:02:58.360 --> 00:02:59.080
Would you like to say normally?

00:02:59.080 --> 00:02:59.840
What?

00:02:59.840 --> 00:03:00.960
I don't remember.

00:03:00.960 --> 00:03:01.660
No.

00:03:01.660 --> 00:03:05.740
Well, what, there's what we normally say is Monday at 10 a.m. Pacific time.

00:03:05.740 --> 00:03:09.560
But then there's what we normally do, which recently has been 7.30 a.m.

00:03:09.560 --> 00:03:10.140
Oh, please.

00:03:10.140 --> 00:03:11.160
Yeah, blame Brian.

00:03:11.160 --> 00:03:12.000
Yeah.

00:03:12.000 --> 00:03:12.660
No, it's fine.

00:03:12.660 --> 00:03:13.140
It's fine.

00:03:13.140 --> 00:03:16.040
We'll, we'll figure out a time.

00:03:16.040 --> 00:03:19.960
But you can always find the next episode pretty much right as this one ships.

00:03:19.960 --> 00:03:21.940
So if you just click on there, it'll take you to YouTube.

00:03:21.940 --> 00:03:22.640
That has a time.

00:03:22.640 --> 00:03:23.500
Yeah.

00:03:24.320 --> 00:03:25.700
Finally, subscribe to the newsletter.

00:03:25.700 --> 00:03:27.140
You guys know the deal.

00:03:27.140 --> 00:03:29.600
Handcrafted, artisanal from Brian.

00:03:29.600 --> 00:03:30.940
Python by side of him.

00:03:30.940 --> 00:03:31.420
Hit newsletter.

00:03:31.420 --> 00:03:33.960
And with that, what do we got?

00:03:33.960 --> 00:03:37.400
Let's talk about Django for a bit.

00:03:38.040 --> 00:03:46.260
So Carlton Gibson, who was the Django fellow and is, has stepped, I think he, last year.

00:03:46.260 --> 00:03:47.080
I believe he did step down.

00:03:47.080 --> 00:03:48.360
He is a Django chatter though.

00:03:48.360 --> 00:03:49.980
Django chat.

00:03:49.980 --> 00:03:50.220
Yeah.

00:03:50.220 --> 00:03:51.140
Django chat's awesome.

00:03:51.140 --> 00:03:52.300
Another podcast.

00:03:52.300 --> 00:03:59.780
But so his, he has thoughts on Django core and it's kind of a long article, but it's well

00:03:59.780 --> 00:04:00.100
written.

00:04:00.100 --> 00:04:09.020
And the, it's talking about Django core versus Django plugins and the longevity of Django

00:04:09.020 --> 00:04:15.120
and everything and the, whether or not batteries included and things like that and how to sustain

00:04:15.120 --> 00:04:15.320
it.

00:04:15.320 --> 00:04:21.820
So one of the things that, I guess I kind of forget that Django will be 20 years old.

00:04:21.820 --> 00:04:24.960
Nick's birthday is 20 years ago or 20 years.

00:04:24.960 --> 00:04:27.260
it's pretty long time.

00:04:27.260 --> 00:04:32.580
So it must be 19 now and, it's, that's a long time.

00:04:32.580 --> 00:04:39.180
And so one of the sustainable abilities, sustainable parts is that there's lots of stuff there.

00:04:39.180 --> 00:04:43.980
There's like this idea of the, it's the web framework for perfectionists with deadlines.

00:04:43.980 --> 00:04:50.320
And it's also the batteries included framework, but not too many batteries.

00:04:50.320 --> 00:04:52.320
so there's a small core.

00:04:53.040 --> 00:05:01.440
and then also talking about like, a lot of people understand that the power of Django

00:05:01.440 --> 00:05:03.200
isn't really just the core.

00:05:03.200 --> 00:05:08.460
It's that you can get something up quickly with the core, but it's the, all the plugins that

00:05:08.460 --> 00:05:12.000
are available because the ecosystem is, is a plugin architecture.

00:05:12.000 --> 00:05:16.440
and the, so what is this talking about?

00:05:16.820 --> 00:05:20.980
A lot of people don't realize that there's just a few people working.

00:05:20.980 --> 00:05:24.480
I mean, it's not a huge team for how many people are using Django.

00:05:24.480 --> 00:05:26.540
There's one and a half.

00:05:26.540 --> 00:05:28.420
I'm trying to find it.

00:05:28.420 --> 00:05:29.080
I like this.

00:05:29.080 --> 00:05:31.380
anyway, we'll get to that.

00:05:31.380 --> 00:05:32.540
there's one and a half.

00:05:32.540 --> 00:05:34.740
wait, wait, we can't just go right past it.

00:05:34.740 --> 00:05:38.720
This is a, this is a, this is a, this is great.

00:05:38.720 --> 00:05:41.020
Pinky in the brain reference.

00:05:41.020 --> 00:05:41.500
Amazing.

00:05:41.720 --> 00:05:42.020
Yeah.

00:05:42.020 --> 00:05:42.720
Pinky in the brain.

00:05:42.720 --> 00:05:43.520
I love them.

00:05:43.520 --> 00:05:44.220
Okay.

00:05:44.220 --> 00:05:46.260
So G brain, what are we going to do tonight?

00:05:46.260 --> 00:05:48.020
Same thing we do every night.

00:05:48.020 --> 00:05:50.560
Pinky, try to get our package into Django core.

00:05:50.560 --> 00:05:53.500
this is hilarious.

00:05:53.500 --> 00:06:00.320
so the idea is it's difficult to get features into Django core, but maybe you don't want to,

00:06:00.320 --> 00:06:06.720
uh, there was, somebody, I can't remember the attribution that's listed in here,

00:06:06.720 --> 00:06:10.400
but somebody mentioned that core is where, plugins go to die.

00:06:11.120 --> 00:06:18.280
and which is a little harsh, but I, people under need to understand that if you get your

00:06:18.280 --> 00:06:21.400
feature in core, it doesn't change very frequently.

00:06:21.400 --> 00:06:27.740
Then they, they, they do, they do a deprecation release like every two years.

00:06:27.740 --> 00:06:31.000
So if, if you want to deprecate a feature, it's two years.

00:06:31.000 --> 00:06:33.860
If you want to add something new, it's a slow process.

00:06:33.860 --> 00:06:35.180
There's a lot of testing involved.

00:06:35.460 --> 00:06:42.240
It's going to be way easier to get a new feature if it's in, if it's in a plugin also.

00:06:42.240 --> 00:06:49.400
and if we look back, I mean, thinking in the future, like we might, one example here

00:06:49.400 --> 00:06:55.200
was, I'm not going to try to find it, but one example was XHTML or X.

00:06:55.200 --> 00:06:56.300
Yeah, that's right.

00:06:56.620 --> 00:06:57.940
XHTML super awesome.

00:06:57.940 --> 00:06:59.300
A lot of people are using it.

00:06:59.300 --> 00:07:03.500
Should that be part of supported natively in core?

00:07:03.500 --> 00:07:10.200
Well, we look back a few years, it would have been like, react or something.

00:07:10.200 --> 00:07:13.420
Should, should Django natively support react?

00:07:13.420 --> 00:07:15.220
Glad they chose no.

00:07:15.220 --> 00:07:21.060
now, XHTML might be the next no in a few years.

00:07:21.060 --> 00:07:27.820
We never, also, yeah, there's a lot of examples around that, Django rest framework.

00:07:27.820 --> 00:07:30.540
I kind of forget that that's not a core thing.

00:07:30.540 --> 00:07:37.300
That's a, it's just one of the really popular plugins, but there's like Django ninja that is,

00:07:37.300 --> 00:07:39.800
um, that is awesome also.

00:07:39.800 --> 00:07:46.040
And maybe it wouldn't exist if, if Django rest framework was part of the core.

00:07:46.040 --> 00:07:50.780
So the ecosystem is great, but there is, there is a tension there.

00:07:50.780 --> 00:07:58.020
That I like this, the discussion of is that Django, even the Django website doesn't like

00:07:58.020 --> 00:08:04.940
the, the team doesn't like to, to like pick the, the plugins that everybody should

00:08:04.940 --> 00:08:09.400
use or the winter plugins, because that's kind of like bringing in a decor.

00:08:09.400 --> 00:08:14.620
That's, that kind of reduces the, competition and the ecosystem.

00:08:14.620 --> 00:08:20.680
But at the same time, it's hard as a beginner to jump in and say, okay, so which, no, really,

00:08:20.760 --> 00:08:21.960
what plugins should I be using?

00:08:21.960 --> 00:08:29.240
and there isn't a should for everybody, of course, but I think there, I guess this,

00:08:29.240 --> 00:08:30.580
I enjoyed this discussion.

00:08:30.580 --> 00:08:36.880
It's around how, how should we support the ecosystem while not squelching the ecosystem?

00:08:36.880 --> 00:08:37.480
So, yeah.

00:08:37.480 --> 00:08:38.100
So, yeah.

00:08:38.100 --> 00:08:38.440
Anyway.

00:08:38.440 --> 00:08:45.420
I, I saw corollars between this and pytest as well, because pytest has the same sort

00:08:45.420 --> 00:08:50.920
of a issue that it's, there's a, there's a core and there's things in the core that I wish

00:08:50.920 --> 00:08:51.600
weren't there.

00:08:52.000 --> 00:08:55.840
and there's things that are out of the core that I think maybe should be.

00:08:55.840 --> 00:09:02.940
and, and so everybody's going to have those opinions and dealing with, whether or not

00:09:02.940 --> 00:09:06.320
you, like sanction a plugin or not.

00:09:06.320 --> 00:09:10.500
That's a, it's, it's a troubling thing for every, every system.

00:09:10.500 --> 00:09:11.480
So anyway.

00:09:12.700 --> 00:09:14.600
It's a, it's a tough tension.

00:09:14.600 --> 00:09:16.160
So anyway.

00:09:16.160 --> 00:09:21.260
Out, out, out in the audience, we got, you have Henny says, it's great to see Django now

00:09:21.260 --> 00:09:27.560
got task queue feature added, no need for celery anymore, which here it is, right?

00:09:27.560 --> 00:09:28.180
Yeah.

00:09:28.180 --> 00:09:31.040
It's awesome to be able to just say, no, we can run stuff asynchronously.

00:09:31.040 --> 00:09:37.700
We don't need a mega infrastructure, like maybe just an asyncio loop or a thread or, you

00:09:37.700 --> 00:09:37.880
know?

00:09:37.880 --> 00:09:39.340
Yeah.

00:09:39.340 --> 00:09:45.160
On the other hand, it's, it's weight that's permanently on Django now, right?

00:09:45.160 --> 00:09:45.920
Yeah.

00:09:45.920 --> 00:09:47.360
Yeah.

00:09:47.360 --> 00:09:47.400
Yeah.

00:09:47.400 --> 00:09:53.360
another, little comic that was in there is this, is this comic of how you

00:09:53.360 --> 00:09:55.640
think happens open source apps are maintained.

00:09:55.640 --> 00:10:01.980
And there's a picture of like tons of people hanging out, drawing on whiteboards and talking

00:10:01.980 --> 00:10:02.640
and stuff.

00:10:02.640 --> 00:10:09.200
And the reality is, one dude in a basement saying just one more ticket.

00:10:09.200 --> 00:10:10.200
Right.

00:10:10.200 --> 00:10:11.200
Before I go to bed.

00:10:11.200 --> 00:10:12.200
So.

00:10:12.200 --> 00:10:13.200
Yeah.

00:10:13.200 --> 00:10:14.200
Yeah, absolutely.

00:10:14.200 --> 00:10:15.200
All right.

00:10:15.200 --> 00:10:16.200
All right.

00:10:16.200 --> 00:10:17.200
All right.

00:10:17.200 --> 00:10:18.200
Let's go to the future.

00:10:18.200 --> 00:10:19.200
Okay.

00:10:19.200 --> 00:10:20.200
Where we're going.

00:10:20.200 --> 00:10:21.200
We don't need roads.

00:10:21.200 --> 00:10:24.200
We're going to go to the future pool.

00:10:24.200 --> 00:10:26.020
This one comes to us from Pat Decker.

00:10:26.020 --> 00:10:27.020
Thank you, Pat.

00:10:27.020 --> 00:10:37.300
So this in, and this is an interesting idea about library that allows you to do multi processing

00:10:37.300 --> 00:10:39.020
type of work, but with asyncio.

00:10:39.020 --> 00:10:40.020
Okay.

00:10:40.020 --> 00:10:46.520
So one of the challenges with asyncio is you can overwhelm the system and it does

00:10:46.520 --> 00:10:49.020
not, what's, what's the term?

00:10:49.020 --> 00:10:52.020
I think you would say it doesn't feel back pressure.

00:10:52.020 --> 00:10:54.020
So let me give you an example.

00:10:54.020 --> 00:10:58.020
If you're doing regular programming where you call a function in a block site, I'm calling

00:10:58.020 --> 00:11:03.020
it writing a database query and it stays there until the response, right?

00:11:03.020 --> 00:11:04.020
Until the database gets back to you.

00:11:04.020 --> 00:11:05.020
Right?

00:11:05.020 --> 00:11:09.900
Well, if the database is busy, that slows down the part of the code that's calling the

00:11:09.900 --> 00:11:10.900
database.

00:11:10.900 --> 00:11:11.900
Right?

00:11:11.900 --> 00:11:17.260
The code is calling the part of the code that's calling database in the kind of backs up the

00:11:17.260 --> 00:11:18.760
entire system and slows it down.

00:11:18.760 --> 00:11:23.520
But with asyncio, you're just sort of throwing more work at it and then carrying on.

00:11:23.520 --> 00:11:25.900
And so you can go make even more work for it.

00:11:25.900 --> 00:11:26.900
Right?

00:11:26.900 --> 00:11:31.900
So one of the challenges of asyncio is you can just overwhelm the system.

00:11:31.900 --> 00:11:36.320
So you know, hey, we really can only take 10 concurrent requests, but if it gets over

00:11:36.320 --> 00:11:39.160
that, it's going to be a problem.

00:11:39.160 --> 00:11:41.280
It's challenging to set that limit.

00:11:41.280 --> 00:11:42.280
OK.

00:11:42.280 --> 00:11:44.480
So that's kind of what this feature pool thing does.

00:11:44.480 --> 00:11:47.200
It's cool.

00:11:47.200 --> 00:11:51.420
It's a small use case because the way that you use it, but still it's cool.

00:11:51.420 --> 00:11:56.740
So in multiprocessing, this is the traditional, I create sub processes because Python has this

00:11:56.740 --> 00:12:00.860
thing called the GIL and we can't really do computational parallelism.

00:12:00.860 --> 00:12:01.980
So we're going to do it this way.

00:12:01.980 --> 00:12:05.860
So what you can do is say, hey, maybe we only have two cores or I only want to consume two

00:12:05.860 --> 00:12:07.040
cores or whatever.

00:12:07.040 --> 00:12:12.380
So you can say with pool of two workers to create no more than two processes.

00:12:12.380 --> 00:12:17.420
Just sort of like start processing as many requests as you have, but only take them two

00:12:17.420 --> 00:12:20.500
at a time is one gets done, get the next and just keep going until you're out.

00:12:20.500 --> 00:12:21.500
Right.

00:12:21.500 --> 00:12:24.620
So that's what this idea of future pool is, but for asyncio.

00:12:24.620 --> 00:12:31.800
So you can say async with future pool of however many you want, and then you can await future

00:12:31.800 --> 00:12:35.940
pool map some function over some block of work.

00:12:35.940 --> 00:12:37.740
Simple but interesting, right?

00:12:37.740 --> 00:12:38.740
Yeah.

00:12:38.740 --> 00:12:40.860
And this way it will stop the caller.

00:12:40.860 --> 00:12:42.860
It can't go on anymore.

00:12:42.860 --> 00:12:46.500
Then while it's sort of limiting.

00:12:46.500 --> 00:12:49.740
So why do I say this is pretty limited?

00:12:49.740 --> 00:12:50.860
And why would it be better?

00:12:50.860 --> 00:12:54.100
How could it be better?

00:12:54.100 --> 00:12:58.260
So this is a local little thing that you create in one function.

00:12:58.260 --> 00:13:04.740
Once and it, it does the work.

00:13:04.740 --> 00:13:08.540
Also, you can't just say run this task asynchronously.

00:13:08.540 --> 00:13:12.300
You have to use this map reduce pattern on it.

00:13:12.300 --> 00:13:12.820
Yeah.

00:13:12.820 --> 00:13:15.140
Which is not a normal programming thing.

00:13:15.140 --> 00:13:16.420
It's not like I'm calling this function.

00:13:16.420 --> 00:13:16.900
I'm awaiting that.

00:13:16.900 --> 00:13:17.620
I'm calling that function.

00:13:17.620 --> 00:13:18.340
I'm waiting that.

00:13:18.340 --> 00:13:26.700
What would be awesome is if some way you could go and say for this program or, or this thread,

00:13:26.700 --> 00:13:31.980
or maybe it's not ideal, but maybe even for this event loop, I don't care how work gets

00:13:31.980 --> 00:13:32.980
to it.

00:13:32.980 --> 00:13:36.360
Let's limit it to five at a time.

00:13:36.360 --> 00:13:38.580
So if a web request kicks something off.

00:13:38.580 --> 00:13:39.580
Awesome.

00:13:39.580 --> 00:13:43.080
It's, it, it goes into that thing that's limited by five concurrent requests.

00:13:43.080 --> 00:13:51.440
If I say, await something I call, it's also participating in this, this pooling, throttling, limiting type

00:13:51.440 --> 00:13:52.440
thing.

00:13:52.440 --> 00:13:55.440
But async I, as far as I know, doesn't have that concept.

00:13:55.440 --> 00:14:00.980
So, and maybe this could both be useful for some folks and motivation for someone to create

00:14:00.980 --> 00:14:04.440
something really interesting that is a little more broadly useful.

00:14:04.440 --> 00:14:05.440
Yeah.

00:14:05.440 --> 00:14:12.800
It's probably dangerous to architect on the fly here, but isn't there like something that

00:14:12.800 --> 00:14:15.800
you've used before that is async sometimes?

00:14:15.800 --> 00:14:16.800
Yeah.

00:14:16.800 --> 00:14:22.240
I used unsync, U-N-S-Y-N-C, which is pretty interesting.

00:14:22.240 --> 00:14:27.680
And that would be, that would certainly be possible to do that because what that does is that converts

00:14:27.680 --> 00:14:34.800
or processes all the asynchronous requests everywhere into a single loop on a single background thread.

00:14:34.800 --> 00:14:35.660
No.

00:14:35.660 --> 00:14:36.440
Yeah.

00:14:36.440 --> 00:14:37.900
Possibly that.

00:14:37.900 --> 00:14:43.240
I was just thinking a similar model of you'd want to, you'd want to like give work to this,

00:14:43.240 --> 00:14:44.500
this system.

00:14:44.500 --> 00:14:45.280
Exactly.

00:14:45.280 --> 00:14:50.100
And have it be async until it can't be, and then have it block.

00:14:50.100 --> 00:14:50.920
Mm-hmm.

00:14:50.920 --> 00:14:51.520
I see.

00:14:51.520 --> 00:14:51.880
Yeah.

00:14:51.880 --> 00:14:52.260
Yeah.

00:14:52.260 --> 00:14:52.400
Yeah.

00:14:52.400 --> 00:14:53.400
Yeah.

00:14:53.400 --> 00:14:54.040
That would be great.

00:14:54.420 --> 00:15:00.440
The problem is I think it really needs something a little bit lower level than people can build

00:15:00.440 --> 00:15:01.220
packages for.

00:15:01.220 --> 00:15:01.720
Yeah.

00:15:01.720 --> 00:15:06.660
It kind of needs to be part of, you know, part of Python itself.

00:15:06.660 --> 00:15:08.000
There is uv loop.

00:15:08.000 --> 00:15:08.800
Part of the core.

00:15:08.800 --> 00:15:09.780
Yeah.

00:15:09.780 --> 00:15:11.000
Part of the, wait, here we go again.

00:15:11.000 --> 00:15:18.340
So it needs to be something that is the loop itself almost as work gets added to it, right?

00:15:18.340 --> 00:15:22.760
But, you know, uv loop can replace the regular asyncio loop, which is generally a good idea

00:15:22.760 --> 00:15:23.300
when possible.

00:15:23.880 --> 00:15:27.900
But, so maybe, maybe it's, it's that level that you got to work at.

00:15:27.900 --> 00:15:30.860
Maybe we could look, look in that realm and see what we could do.

00:15:30.860 --> 00:15:35.180
Because it would be really cool to say, hey, this thing can handle all, all the concurrency

00:15:35.180 --> 00:15:40.600
you want to throw at it, but it's only going to pass it on or you execute it more, 10 at

00:15:40.600 --> 00:15:41.660
a time or something like that.

00:15:41.660 --> 00:15:42.480
Yeah.

00:15:42.480 --> 00:15:43.700
Anyway.

00:15:43.700 --> 00:15:44.640
Oh dear.

00:15:44.640 --> 00:15:47.040
People can go to the future with future pool and check it out.

00:15:47.040 --> 00:15:49.480
And maybe it's useful for your project.

00:15:49.480 --> 00:15:50.300
Yeah.

00:15:50.300 --> 00:15:51.140
It's funny.

00:15:51.260 --> 00:15:54.180
We said uv loop and I'm like, uv has loops?

00:15:54.180 --> 00:15:54.760
Oh no.

00:15:54.760 --> 00:15:56.540
UV loop was a thing way before uv.

00:15:56.540 --> 00:15:57.260
Yeah.

00:15:57.260 --> 00:15:59.660
UV loop was, yeah.

00:15:59.660 --> 00:16:01.100
Magic stack, right?

00:16:01.100 --> 00:16:05.000
UV loop's been around, I don't know how long it's been around, but at least three years.

00:16:05.000 --> 00:16:06.200
At least eight years.

00:16:06.200 --> 00:16:07.220
Oh, sorry.

00:16:07.220 --> 00:16:07.420
Yeah.

00:16:07.420 --> 00:16:08.180
At least eight years.

00:16:08.280 --> 00:16:09.640
So that's longer than uv.

00:16:09.640 --> 00:16:10.200
Yeah.

00:16:10.200 --> 00:16:10.600
Yeah.

00:16:10.600 --> 00:16:10.700
Yeah.

00:16:10.700 --> 00:16:11.660
Anyway.

00:16:11.660 --> 00:16:12.220
Okay.

00:16:12.220 --> 00:16:13.380
Yeah.

00:16:13.380 --> 00:16:13.980
All right.

00:16:13.980 --> 00:16:14.360
Over to you.

00:16:14.360 --> 00:16:21.580
I want to go to an article called from Brett Cannon called Don't Return Named Tuples in

00:16:21.580 --> 00:16:22.300
New APIs.

00:16:23.160 --> 00:16:28.100
It's a simple sort of thing, but it's a good thing to remind people of.

00:16:28.100 --> 00:16:37.160
So first off, I want to thank Brett for using the term API in a sense of the API for a method

00:16:37.160 --> 00:16:43.580
or for a function or for a class or module and not necessarily an API for a REST API.

00:16:43.740 --> 00:16:45.760
We're not talking about REST APIs or web APIs.

00:16:45.760 --> 00:16:51.540
We're talking about good old function, just good old APIs.

00:16:51.540 --> 00:16:58.880
Anyway, so the idea is named tuples are kind of awesome and they're fun because you can just

00:16:58.880 --> 00:17:05.260
in one line say, hey, I've got like, say a point and it's cool.

00:17:05.260 --> 00:17:10.400
And why would I return that or return a named tuple is because something like that, like a point.

00:17:10.660 --> 00:17:14.240
So that it's obvious that people can access XYZ or whatever.

00:17:14.240 --> 00:17:22.140
And in some things like point, it's easy to, you know, or get mouse position, you know, it's

00:17:22.140 --> 00:17:22.960
an XY coordinate.

00:17:22.960 --> 00:17:26.060
So X and Y are probably there.

00:17:26.060 --> 00:17:29.680
However, so why, why would you not want to use this?

00:17:29.680 --> 00:17:37.100
And he's arguing that, and I kind of agree, is that it's really easy to implement something

00:17:37.100 --> 00:17:45.540
with a named tuple, but now you've got to support both index based index access, like a tuple,

00:17:45.540 --> 00:17:48.540
or named access as if it was a dictionary.

00:17:48.540 --> 00:17:55.860
So having both index access and name access is probably not what you meant.

00:17:55.860 --> 00:17:57.680
And I think I've seen this.

00:17:57.680 --> 00:18:02.240
A lot of people assume once it's a named tuple, people are going to use the name,

00:18:02.420 --> 00:18:03.580
but it's also a tuple.

00:18:03.580 --> 00:18:07.060
So you can use it, you can slice it and I'll do all sorts of stuff.

00:18:07.060 --> 00:18:16.060
So the, and it's really just to get around, like to not have to do a class, but classes are

00:18:16.060 --> 00:18:16.600
easier now.

00:18:16.600 --> 00:18:21.100
So there's some alternatives to alternatives to named tuple.

00:18:21.240 --> 00:18:29.180
You can return a data class and that would be something I'd grab possibly data class or a dictionary.

00:18:29.180 --> 00:18:32.500
Dictionary would work fine or typed dict.

00:18:32.500 --> 00:18:39.080
The, one of the things that is nice about a typed dick is dict is that you get editor support as well,

00:18:39.080 --> 00:18:41.100
because you've got the types defined in there.

00:18:41.760 --> 00:18:47.280
And then something new to me, which I'm going to have to play with is a simple namespace,

00:18:47.280 --> 00:18:55.700
which gives us the ability to, to access the names, but it's not indexable.

00:18:55.700 --> 00:18:59.200
I haven't played with a namespace, simple namespace.

00:18:59.200 --> 00:19:01.460
So that I'll have to do that.

00:19:01.460 --> 00:19:03.820
You're muted.

00:19:06.100 --> 00:19:07.240
Yeah, that's interesting.

00:19:07.240 --> 00:19:09.460
I don't have much to add to it, but I guess I know.

00:19:09.460 --> 00:19:11.760
I haven't heard of a simple namespace either.

00:19:11.760 --> 00:19:14.920
And I haven't really used type dict as well.

00:19:14.920 --> 00:19:16.140
They both are good options.

00:19:16.140 --> 00:19:17.300
I haven't either.

00:19:17.300 --> 00:19:25.520
I like kind of jumped on the data class bandwagon and use data classes a lot now because I do think

00:19:25.520 --> 00:19:31.300
about that is, is actually I need to think about it more, but I haven't really been using

00:19:31.300 --> 00:19:32.860
named tuples to return stuff.

00:19:33.440 --> 00:19:37.460
But so the, so what's this, the recommendation really is just be careful.

00:19:37.460 --> 00:19:41.640
And I'll read his quote.

00:19:41.640 --> 00:19:47.900
He said, my key point in all of this is to prefer readability and ergonomics over brevity in your code.

00:19:47.900 --> 00:19:55.080
That means avoiding named tuples, except when you're expanding or tweaking an existing API

00:19:55.080 --> 00:20:00.600
where the named tuple improves over the plain tuple that is already being used.

00:20:00.780 --> 00:20:05.260
So if you're art, and that's, I guess that that's something I think I have done.

00:20:05.260 --> 00:20:10.480
If, if you are, the return value was a tuple before.

00:20:10.480 --> 00:20:12.540
It's been a tuple for a long time.

00:20:12.540 --> 00:20:16.600
There's existing code using it, but it really should have been a named something.

00:20:16.600 --> 00:20:21.240
Adding, adding a named tuple allows people to use both.

00:20:21.480 --> 00:20:24.240
And that might be ergonomically better.

00:20:24.240 --> 00:20:32.280
The, but the caveat really is you've got a lot of testing to do because you've got to test both accesses now.

00:20:32.280 --> 00:20:34.100
So test more.

00:20:34.100 --> 00:20:34.700
So.

00:20:34.700 --> 00:20:36.380
Awesome.

00:20:36.380 --> 00:20:37.060
Yeah.

00:20:37.060 --> 00:20:37.720
That's a good article.

00:20:37.720 --> 00:20:38.140
Brett.

00:20:38.140 --> 00:20:40.380
No surprise there.

00:20:40.380 --> 00:20:41.380
No surprise.

00:20:41.380 --> 00:20:42.200
Okay.

00:20:43.000 --> 00:20:47.760
Let's talk about a different programming language, but I think this is interesting.

00:20:47.760 --> 00:20:49.280
An interesting perspective.

00:20:49.280 --> 00:20:50.220
Okay.

00:20:50.220 --> 00:20:52.060
So the Zig programming language.

00:20:52.060 --> 00:20:52.980
Are you familiar with Zig?

00:20:52.980 --> 00:20:53.940
No.

00:20:55.700 --> 00:20:57.620
It's kind of new to me as well.

00:20:57.620 --> 00:21:06.420
If you go and look at some examples here, it looks, I think it looks a little like rust-like.

00:21:06.420 --> 00:21:09.820
I'm not sure, but we go down.

00:21:09.820 --> 00:21:20.380
It's, it does a lot of, simple things like it interoperates really quickly and easily with, either C or, or, or windows APIs or stuff like that.

00:21:20.380 --> 00:21:28.460
But, you know, it looks, looks pretty approachable, but it's a low level, low level programming language like C or rust, right?

00:21:28.460 --> 00:21:33.560
What are those, what are all those, semicolons and curly braces doing in my code?

00:21:33.560 --> 00:21:35.460
I know, I, you probably delete them.

00:21:35.460 --> 00:21:36.440
I don't think you really need it.

00:21:36.440 --> 00:21:41.120
But, so here's the interesting thing.

00:21:43.120 --> 00:21:56.560
They recently were spending quite a bit of money on AWS and they've decided that they would be better off not spending their supporters money on hosting.

00:21:56.560 --> 00:22:06.960
So, for example, they said the rust foundation reports that it spends $404,000 on infrastructure websites and stuff like that.

00:22:06.960 --> 00:22:12.720
And probably mostly packages and says, we don't really know anything about PyPI and Python.

00:22:12.720 --> 00:22:15.680
Like what does Python.org cost to run?

00:22:15.680 --> 00:22:22.220
And mostly because that's a lot of the infrastructure costs are donated.

00:22:22.220 --> 00:22:28.580
They said, look, as this language is growing, we don't really want for that to be our issue.

00:22:28.580 --> 00:22:33.940
You know, they were getting upwards of a thousand dollars a month for their AWS bill, which is not insane, but.

00:22:34.880 --> 00:22:36.420
For an open source project.

00:22:36.420 --> 00:22:38.320
Yeah, it's kind of up there.

00:22:38.320 --> 00:22:43.400
But what they said is, look, zigling.org, that's their equivalent of python.org.

00:22:43.400 --> 00:22:45.040
It says, this is not an essential service.

00:22:45.040 --> 00:22:47.220
It's not an emergency if it goes down.

00:22:47.220 --> 00:22:51.440
And 99% uptime is perfectly fine.

00:22:51.440 --> 00:22:57.100
It's the last 1% of uptime that represents 99% of the costs, which is pretty interesting.

00:22:57.800 --> 00:23:10.880
So they said, look, we got a $36 Hetzner server, which comes with 20 terabytes, I think 20, at least 20 terabytes of bandwidth, which is about $2,000 of AWS bandwidth.

00:23:10.880 --> 00:23:13.200
Included for the $36.

00:23:13.200 --> 00:23:16.180
And maybe someday we'll go crazy and spend 100 or 200 bucks.

00:23:16.300 --> 00:23:18.020
But we don't need to do more than that.

00:23:18.020 --> 00:23:19.840
Like, this is enough.

00:23:19.840 --> 00:23:20.440
Right?

00:23:20.440 --> 00:23:23.200
And so what are they doing instead?

00:23:23.200 --> 00:23:30.980
They're saying, one, they're encouraging and setting up a system that has package mirrors.

00:23:30.980 --> 00:23:31.780
Right?

00:23:31.840 --> 00:23:41.280
Remember we talked about that PEP that would basically sign wheels and then allow them to be hosted somewhere else as long as the signature still matches?

00:23:41.280 --> 00:23:43.680
So they're doing that kind of stuff from the start.

00:23:43.680 --> 00:23:51.220
They're like, we can spread this out in a distributed style so no single thing has taken a huge hit.

00:23:51.220 --> 00:23:57.520
And if it fails in one place, the equivalent of pip could say, well, let's try a mirror or something like that, you know?

00:23:57.520 --> 00:23:58.460
Yeah.

00:23:59.080 --> 00:24:02.940
And, yeah, anyway, so they're like, all right, well, $36 a month.

00:24:02.940 --> 00:24:05.620
And on top of that, what were they doing before?

00:24:05.620 --> 00:24:08.480
AWS is what they were doing before, I believe.

00:24:08.480 --> 00:24:17.820
So on AWS, if they wanted to push out a new website deploy, it took five minutes to push it out, deploy, go through all the stuff just to get it up.

00:24:17.820 --> 00:24:22.060
And on their little Hetzner server, it takes two seconds.

00:24:22.060 --> 00:24:25.020
It's so crazy.

00:24:25.020 --> 00:24:25.920
To set up the job.

00:24:25.920 --> 00:24:26.300
Yeah.

00:24:26.900 --> 00:24:29.740
Yeah, basically to call start and then off it goes, right?

00:24:29.740 --> 00:24:33.160
There's probably something like check every second if there's a new job or whatever.

00:24:33.160 --> 00:24:38.740
Anyway, I think this is a, you know, packaging is a big conversation.

00:24:38.740 --> 00:24:42.580
Cloud, no cloud is a big conversation.

00:24:42.580 --> 00:24:54.920
Costs and risks like the black swan of, well, what if the people backing Pythons, especially PyPI, that infrastructure, what if they decided to stop?

00:24:55.280 --> 00:24:57.980
How do you get $100,000 a month all of a sudden?

00:24:57.980 --> 00:24:58.900
Yeah.

00:24:58.900 --> 00:25:00.480
You know, that's a big deal.

00:25:00.480 --> 00:25:06.320
I think people would figure it out, but it would be a big disruption where like, okay, what are we going to set up?

00:25:06.320 --> 00:25:12.900
And this PEP with self-hosted wheels is like a bit of a deposit down on that.

00:25:12.900 --> 00:25:19.420
But anyway, this is interesting from a growing but not yet super popular language.

00:25:20.420 --> 00:25:20.520
Yeah.

00:25:20.520 --> 00:25:21.460
Interesting.

00:25:21.460 --> 00:25:22.680
Cool.

00:25:22.680 --> 00:25:24.080
Indeed.

00:25:24.080 --> 00:25:34.280
And all the curly braces and stuff were because it's mentioned by Corky that it's also interoperable with C.

00:25:34.280 --> 00:25:35.480
So that's interesting.

00:25:35.480 --> 00:25:36.820
Cool.

00:25:36.960 --> 00:25:37.140
Yeah.

00:25:37.140 --> 00:25:37.900
Yeah.

00:25:37.900 --> 00:25:39.000
It says it's more like C.

00:25:39.000 --> 00:25:40.060
I suppose so.

00:25:40.060 --> 00:25:43.680
It's an interesting language.

00:25:43.680 --> 00:25:45.900
All right.

00:25:45.900 --> 00:25:47.940
Well, that's it for our main topics.

00:25:47.940 --> 00:25:49.160
Got any extras?

00:25:49.820 --> 00:25:53.740
I just have one extra that's going on I wanted to let people know about.

00:25:53.740 --> 00:25:59.760
So at the testing code, pythontest.com, I've got courses.

00:25:59.760 --> 00:26:05.800
And they're going well, and I'm glad people are getting value.

00:26:05.800 --> 00:26:07.200
But I also had a community.

00:26:07.200 --> 00:26:09.840
And the community have a community.

00:26:09.840 --> 00:26:13.900
But it used to be on Slack, but it's one of those growth things.

00:26:13.900 --> 00:26:17.100
Slack was free on Slack, and now it's not.

00:26:17.880 --> 00:26:24.620
And so we switched to Podia-based forum, and it's just not fun.

00:26:24.620 --> 00:26:29.980
And I mean, great that Podia offers a forum.

00:26:29.980 --> 00:26:31.500
The courses are on Podia.

00:26:31.500 --> 00:26:42.880
But I'm going to say after several months of being on Podia and only like five comments on there, it's just not cutting it.

00:26:42.880 --> 00:26:44.200
It's not sparking joy.

00:26:44.200 --> 00:26:44.980
No.

00:26:44.980 --> 00:26:48.080
So we're going to try Discord.

00:26:48.080 --> 00:26:53.440
And so just, I guess, hang in there, everyone.

00:26:53.440 --> 00:27:00.220
I'm trying to get it associated so that everybody that has community access will get access to the Discord server.

00:27:00.220 --> 00:27:05.200
And I'll probably, I don't know what we're going to do.

00:27:05.200 --> 00:27:08.180
I want it to be sustainable, so it can't just be completely free.

00:27:08.820 --> 00:27:14.380
But I also want it to be something that's easy for everybody to get into.

00:27:14.380 --> 00:27:16.760
So I guess just stay tuned.

00:27:16.760 --> 00:27:19.880
We'll get that all ironed out as soon as we can.

00:27:19.880 --> 00:27:24.180
So anyway, any extras from you?

00:27:24.180 --> 00:27:25.440
Yeah, I got a few.

00:27:25.440 --> 00:27:27.100
It's tricky, right?

00:27:27.100 --> 00:27:29.640
You want to pick something where people already are.

00:27:29.840 --> 00:27:33.220
They've got some app like Slack or Discord or something open.

00:27:33.220 --> 00:27:39.020
There's a lot of cool options that you could pick, even some neat self-hosted ones.

00:27:39.020 --> 00:27:47.500
But if it's a completely different app that people have to remember to open instead of just another tab next to the thing they're already in, I think it changes it.

00:27:48.160 --> 00:27:51.960
Like, for example, they've got to go to Podium versus like, oh, I'm over on this thing.

00:27:51.960 --> 00:27:55.940
And now I just go to the next tab open to see what's happening in this community.

00:27:55.940 --> 00:27:58.580
Yeah.

00:27:58.580 --> 00:28:04.080
So even like when I mentioned it to my, so my daughter's in health care.

00:28:04.080 --> 00:28:05.900
She's not even like my oldest daughter.

00:28:05.900 --> 00:28:09.640
And I mentioned it to her and she's like, oh, I can help you with that.

00:28:09.640 --> 00:28:10.740
I'm on Discord all the time.

00:28:10.740 --> 00:28:11.700
I'm like, oh, okay.

00:28:11.700 --> 00:28:13.440
Great.

00:28:13.440 --> 00:28:14.660
That's awesome.

00:28:14.660 --> 00:28:15.640
I love it.

00:28:16.640 --> 00:28:17.540
All right.

00:28:17.540 --> 00:28:18.260
I got some extras.

00:28:18.260 --> 00:28:22.980
One, still living the Zen browser lifestyle.

00:28:22.980 --> 00:28:24.300
It's pretty good.

00:28:24.300 --> 00:28:26.440
So I'm going to keep going with that.

00:28:26.440 --> 00:28:26.740
That's fun.

00:28:26.740 --> 00:28:27.640
But that's not actually an extra.

00:28:27.640 --> 00:28:39.240
First extra is I was on the work item podcast talking with Den over there for an hour about Python and business and stuff.

00:28:39.240 --> 00:28:41.540
And people can check that out if they want.

00:28:41.540 --> 00:28:41.980
That's fun.

00:28:41.980 --> 00:28:42.600
Neat.

00:28:42.600 --> 00:28:43.480
Yes.

00:28:45.200 --> 00:28:48.040
I feel like I, let me know if I talked about this before, Brian.

00:28:48.040 --> 00:28:50.340
I searched and searched and couldn't find it.

00:28:50.340 --> 00:28:51.660
But in my mind, we talked about it.

00:28:51.660 --> 00:28:57.200
Did I talk about the fact that you can subscribe as an RSS to GitHub releases?

00:28:57.200 --> 00:28:59.320
I don't know.

00:28:59.620 --> 00:29:01.180
I don't think so because I couldn't find it.

00:29:01.180 --> 00:29:02.000
In my mind, I did.

00:29:02.000 --> 00:29:12.400
But anyway, if you go to any release and you just type .adam on the end, what you get is a popular download window instead of showing it.

00:29:12.400 --> 00:29:14.000
But it gives you an RSS feed.

00:29:14.000 --> 00:29:16.000
So go to your project you like.

00:29:16.000 --> 00:29:18.460
Click on the releases and put .adam on the end.

00:29:19.460 --> 00:29:26.640
And you can put that in your RSS reader so that will pop up if you like, hey, there's a new release of this thing that I'm interested in.

00:29:26.640 --> 00:29:28.800
That's pretty cool.

00:29:28.800 --> 00:29:33.520
And then let me make sure I get the attribution right.

00:29:33.520 --> 00:29:40.380
This is Jamie Thompson said this over and said, there's a new release of pytest BDD, Behavior Driven Design.

00:29:40.380 --> 00:29:45.040
And not just a new release, but 8.0, which is a big release, right?

00:29:45.040 --> 00:29:47.680
And probably the most interesting thing is the data tables.

00:29:47.680 --> 00:29:48.740
Have you seen these data tables?

00:29:48.740 --> 00:29:50.780
That's neat.

00:29:50.780 --> 00:29:54.160
It's kind of like a parameterized query.

00:29:54.160 --> 00:29:57.760
But it's also kind of like a markdown table.

00:29:58.520 --> 00:30:07.200
Given the following users exist, and then you just have a header, pipe name, pipe email, pipe Twitter, and then values, just row, row, row, row, row.

00:30:07.200 --> 00:30:09.020
That's pretty neat, huh?

00:30:09.020 --> 00:30:10.940
Yeah.

00:30:10.940 --> 00:30:12.660
All right.

00:30:12.660 --> 00:30:18.780
So anyway, if people like their BDD, they can check out pytest BDD.

00:30:18.780 --> 00:30:19.440
That's pretty cool.

00:30:19.440 --> 00:30:25.660
Also, last week I rewrote all the code.

00:30:25.660 --> 00:30:30.180
I did a little terminal CLI magic.

00:30:30.180 --> 00:30:37.080
And there are a little over 10,000 lines of Python code that don't involve blank space.

00:30:37.080 --> 00:30:40.100
So meaningful lines for talk Python.

00:30:40.100 --> 00:30:43.320
And Python bytes a little bit less, but not tremendously less.

00:30:43.320 --> 00:30:49.300
Rewrote that in Cort, which is asynchronous flask, which was pretty awesome.

00:30:49.300 --> 00:30:56.400
So this thing is running a little more efficiently, a little bit faster, a little bit better than it was before.

00:30:56.400 --> 00:31:04.900
And completely rewriting 10,000 lines of code in two days is quite an undertaking.

00:31:04.900 --> 00:31:06.480
You're tired at the end of that, let me tell you.

00:31:07.640 --> 00:31:08.440
But it's awesome.

00:31:08.440 --> 00:31:09.500
It came out really, really well.

00:31:09.500 --> 00:31:11.000
I did it in two rewrites, actually.

00:31:11.000 --> 00:31:14.260
One rewrite to just convert it from pyramid to flask.

00:31:14.260 --> 00:31:19.500
And then a second rewrite to convert it from sync to async for almost every endpoint.

00:31:19.500 --> 00:31:21.860
And all the code below it and all that.

00:31:21.860 --> 00:31:23.480
All the database queries and stuff like that.

00:31:23.480 --> 00:31:26.360
So did it affect everything?

00:31:26.360 --> 00:31:28.760
Or what were the main parts?

00:31:29.040 --> 00:31:36.160
There are certain parts that it doesn't affect, but anything with database access required it.

00:31:36.160 --> 00:31:46.180
And then in web frameworks, when you're writing web apps, you're always dealing with little aspects of that's frameworks API.

00:31:46.180 --> 00:31:53.460
So I need to get the URL of the current request to see if I should do a redirect or not.

00:31:53.800 --> 00:31:59.420
Well, the way you get the URL is completely different in pyramid versus flask.

00:31:59.420 --> 00:32:10.680
So anything that kind of touched headers, cookies, URLs, if you want to know if somebody's logged in, then that's also a cookie.

00:32:10.680 --> 00:32:13.900
It's surprisingly knock-on effects.

00:32:13.900 --> 00:32:22.300
And flask and quarts are a little bit funky in some ways where there's this thread local request that you can just access out of thin air,

00:32:22.300 --> 00:32:27.620
which is cool unless for some reason the call started here and it ends up over there.

00:32:27.620 --> 00:32:36.520
Maybe there was a thread or some kind of delay where that's become disconnected that it'll complain to you that it doesn't know what the request is,

00:32:36.520 --> 00:32:37.840
even though you have a request object.

00:32:37.840 --> 00:32:41.200
Like there's a lot of weird changes.

00:32:41.200 --> 00:32:42.020
So yeah.

00:32:42.020 --> 00:32:43.500
But anyway, it was really fun.

00:32:43.500 --> 00:32:45.840
I'm doing a write-up on that, but I just started to throw that out there.

00:32:45.840 --> 00:32:46.860
And that's going well.

00:32:46.860 --> 00:32:47.920
Cool.

00:32:47.920 --> 00:32:49.180
And that's it.

00:32:50.180 --> 00:32:52.660
Shall we tell a joke?

00:32:52.660 --> 00:32:54.200
A joke would be wonderful.

00:32:54.200 --> 00:32:55.540
This one.

00:32:55.540 --> 00:32:57.580
We've done short-form jokes.

00:32:57.580 --> 00:33:00.580
And we've done long-form jokes, Brian.

00:33:00.580 --> 00:33:04.300
This might be the best long-form joke.

00:33:04.300 --> 00:33:07.100
So y'all are going to have to stick with me for just a second here.

00:33:07.100 --> 00:33:08.780
But check this out.

00:33:08.780 --> 00:33:10.660
Here's the breaking headline.

00:33:10.660 --> 00:33:11.420
Breaking.

00:33:11.420 --> 00:33:16.600
JavaScript developer commits to a framework for a record-breaking three weeks.

00:33:17.800 --> 00:33:23.580
And of course, it comes with a picture of a clown luring JavaScript developers into some shady spot.

00:33:23.580 --> 00:33:25.700
But let me read the press release, okay?

00:33:25.700 --> 00:33:29.280
Simi Valley, California.

00:33:29.280 --> 00:33:40.720
In an unprecedented display of consistency that has left the tech world reeling, local web developer Alex Chen, 28, has reportedly stuck with the same JavaScript framework for an astonishing three weeks.

00:33:40.720 --> 00:33:58.280
Chen, known in the local dev circles as the framework whisperer for his abilities to adopt and discard JS frameworks at breakneck speeds, has been using Svelte without interruption since August 1st, shattering his previous record of four days set with Vue.js back in 2022.

00:33:58.280 --> 00:34:03.560
I don't know what came over me, Chen said, visibly shaken by his own stability.

00:34:03.560 --> 00:34:09.100
I woke up one morning and I just don't feel like switching to Angular or React or that new framework that was released during the interview.

00:34:09.100 --> 00:34:13.420
The news has sent shockwaves through the JavaScript community.

00:34:14.540 --> 00:34:25.600
Framework creators are reportedly in crisis mode with one anonymous source from a major tech company stating, if developers start sticking with one framework, how will we justify our jobs?

00:34:25.600 --> 00:34:29.720
Chen's colleagues have expressed a mix of awe and concern.

00:34:30.680 --> 00:34:33.620
Senior developer Lisa Patel noted, I'm worried about Alex.

00:34:33.620 --> 00:34:39.320
Yesterday, I caught him reading the documentation instead of immediately rewriting our entire code base in a new framework.

00:34:39.320 --> 00:34:40.380
It's not like him at all.

00:34:40.380 --> 00:34:45.060
The unprecedented event has not been without its challenges.

00:34:45.060 --> 00:34:56.780
Chen admitted to suffering from withdrawal symptoms, including uncontrollable urges to create new NPM packages and a persistent eye twitch triggered by the site of stable well-maintained code.

00:34:57.560 --> 00:35:00.420
Despite the difficulties, Chen remains committed to seeing this through.

00:35:00.420 --> 00:35:06.260
Taking it one day at a time, he said, his fingers twitching as he resists the urge to type NPX create next app.

00:35:06.260 --> 00:35:11.440
But I've heard whispers of a revolutionary new framework that's only been downloaded 50 times.

00:35:11.440 --> 00:35:13.880
Maybe I'll check it out, you know, just to stay informed.

00:35:13.880 --> 00:35:15.880
Good, right?

00:35:16.680 --> 00:35:17.440
That's funny.

00:35:17.440 --> 00:35:19.760
Yeah.

00:35:19.760 --> 00:35:21.700
You got to appreciate the stability.

00:35:21.700 --> 00:35:25.880
Appreciate the stability of Django, of Python, of a lot of things that we got.

00:35:25.880 --> 00:35:33.960
I mean, it's a joke, but it's also true that there's a lot of churn on that space.

00:35:33.960 --> 00:35:34.880
Yeah.

00:35:34.880 --> 00:35:40.340
I mean, like how many people here are like, should I stick with Python or should I go to Zig now?

00:35:40.780 --> 00:35:41.140
Yeah, I know.

00:35:41.140 --> 00:35:44.740
Well, we might have just, we might have sent a whole bunch of people over there unintentionally.

00:35:44.740 --> 00:35:45.740
That wasn't the intention.

00:35:45.740 --> 00:35:53.560
I mean, Zig has a lot less, I mean, I don't think tractor when I think Zig, but Rust kind of.

00:35:53.560 --> 00:35:54.540
Yeah, true.

00:35:54.540 --> 00:36:00.560
Well, and if you want to make sure you're alphabetically sorted to the very end, right by the comment section, Zig.

00:36:01.840 --> 00:36:07.620
Yeah, so people just like change frameworks by the alphabet and then they get to the end.

00:36:07.620 --> 00:36:09.100
They're like, well, there's nothing left to change.

00:36:09.100 --> 00:36:09.620
They were here.

00:36:09.620 --> 00:36:13.260
Nice.

00:36:13.260 --> 00:36:15.400
Well, always, always lovely to have you here.

00:36:15.400 --> 00:36:15.800
Thanks.

00:36:15.800 --> 00:36:16.620
Thank you.

00:36:16.620 --> 00:36:17.300
Yep.

00:36:17.300 --> 00:36:17.900
Bye, everyone.

00:36:17.900 --> 00:36:18.120
Bye.

00:36:18.120 --> 00:36:19.120
Thank you.

00:36:19.120 --> 00:36:21.980
Thank you.

