WEBVTT

00:00:00.000 --> 00:00:06.200
Hey, everybody. Thanks for showing up for the stream. We're going to have a great show


00:00:06.200 --> 00:00:12.400
today. Great show for you today. Hello and welcome to Python Bytes, where we deliver


00:00:12.400 --> 00:00:19.120
Python news and headlines directly to your earbuds. This is episode 265, recorded January


00:00:19.120 --> 00:00:22.440
5th, 2022. I'm Brian Okken.


00:00:22.440 --> 00:00:24.440
I'm Michael Kennedy.


00:00:24.440 --> 00:00:25.440
And I'm Matt Kramer.


00:00:25.440 --> 00:00:27.440
Matt, welcome to the show.


00:00:27.440 --> 00:00:29.440
Thanks. Happy to be here.


00:00:29.440 --> 00:00:31.040
Welcome, Matt.


00:00:31.040 --> 00:00:32.000
Who are you?


00:00:32.000 --> 00:00:34.000
Oh, so a huge fan.


00:00:34.000 --> 00:00:35.960
I've listened to every episode.


00:00:35.960 --> 00:00:38.520
I actually-- I'm one of these folks that started their career


00:00:38.520 --> 00:00:40.160
outside of software.


00:00:40.160 --> 00:00:43.000
I've heard a similar parallel story a bunch of times


00:00:43.000 --> 00:00:43.560
in the past.


00:00:43.560 --> 00:00:46.440
So I have my degree actually in Naval Architecture


00:00:46.440 --> 00:00:48.880
and Marine Engineering, which is design of ships


00:00:48.880 --> 00:00:51.160
and offshore structures.


00:00:51.160 --> 00:00:54.080
In grad school, I started with MATLAB,


00:00:54.080 --> 00:00:56.640
picked up Python thanks to a professor.


00:00:56.640 --> 00:00:59.560
And then over time, that's just grown and grown.


00:00:59.560 --> 00:01:01.760
Spent eight years in the oil and gas industry


00:01:01.760 --> 00:01:06.440
and using Python mostly for doing engineering analysis,


00:01:06.440 --> 00:01:11.200
a lot of digital type stuff, IoT type monitoring work.


00:01:11.200 --> 00:01:12.920
And about three months ago,


00:01:12.920 --> 00:01:15.460
I joined Anaconda as a software engineer


00:01:15.460 --> 00:01:18.040
and I'm working on our Nucleus cloud platform


00:01:18.040 --> 00:01:19.980
as a backend software engineer.


00:01:19.980 --> 00:01:21.720
- Very cool.


00:01:21.720 --> 00:01:23.640
- Awesome, yeah.


00:01:23.640 --> 00:01:24.800
Congrats on the new job as well.


00:01:24.800 --> 00:01:27.080
That's a big change from oil and gas.


00:01:27.080 --> 00:01:27.920
- Took a couple of years.


00:01:27.920 --> 00:01:29.360
- I mean, it is in Texas and all,


00:01:29.360 --> 00:01:32.400
but it's still on the tech side.


00:01:32.400 --> 00:01:34.640
- Yeah, no, it's related,


00:01:34.640 --> 00:01:36.720
but obviously a different focus.


00:01:36.720 --> 00:01:38.820
I wanted to make writing code my job


00:01:38.820 --> 00:01:42.480
rather than the thing I did to get my job done, so.


00:01:42.480 --> 00:01:43.400
- Fantastic.


00:01:43.400 --> 00:01:45.000
Yeah, I'm sure you're having a good time.


00:01:45.000 --> 00:01:45.840
- Yeah.


00:01:45.840 --> 00:01:50.600
- Well, Michael, we had some questions for people last week.


00:01:50.600 --> 00:01:51.440
- We did.


00:01:51.440 --> 00:01:54.180
I wanna make our first topic a meta topic.


00:01:54.180 --> 00:01:57.120
And by that I mean a topic about Python bytes.


00:01:57.120 --> 00:02:02.120
So you're right, we discussed whether the format,


00:02:02.120 --> 00:02:04.760
which is sort of, I wouldn't say changed,


00:02:04.760 --> 00:02:08.720
I would rather categorize it as drifted over time.


00:02:08.720 --> 00:02:11.080
It's sort of drifted to adding this little thing


00:02:11.080 --> 00:02:12.960
and do that different thing.


00:02:12.960 --> 00:02:13.960
And we just said, hey, everyone,


00:02:13.960 --> 00:02:15.000
do you still like the format?


00:02:15.000 --> 00:02:16.840
It's not exactly what we started with,


00:02:16.840 --> 00:02:17.840
but it's where we are.


00:02:17.840 --> 00:02:19.240
So we asked some questions.


00:02:19.240 --> 00:02:21.120
The first question I asked,


00:02:21.120 --> 00:02:22.360
which I have an interesting followup


00:02:22.360 --> 00:02:29.600
the end here, by the way, is Python bytes too long at 45 minutes? That's roughly the


00:02:29.600 --> 00:02:36.720
time that we're going these days, probably about 45 minutes. And so I would say, got


00:02:36.720 --> 00:02:43.640
to do the quick math here, I would say 70, 65%, let's say 65% are like, no, it's good.


00:02:43.640 --> 00:02:46.960
With a third of that being like, are you kidding me? It could go way longer. I'm not sure we


00:02:46.960 --> 00:02:50.760
want to go way longer. But there are definitely a couple of people that think, yeah, it's


00:02:50.760 --> 00:02:54.920
So I would say probably 12% of people said it's too long.


00:02:54.920 --> 00:02:59.520
So I feel like it's actually kind of a decent length.


00:02:59.520 --> 00:03:01.360
And one of the things I thought,


00:03:01.360 --> 00:03:03.520
it's like, as we've changed this format,


00:03:03.520 --> 00:03:06.040
we've added things on, right?


00:03:06.040 --> 00:03:08.600
We added the joke that we started always doing at the end.


00:03:08.600 --> 00:03:11.080
We added our extra, extra, extra stuff.


00:03:11.080 --> 00:03:13.520
But the original format was the six items.


00:03:13.520 --> 00:03:14.960
You covered three, I covered three.


00:03:14.960 --> 00:03:15.800
Now it's two, two,


00:03:15.800 --> 00:03:17.480
and we got Matt here to help out with that.


00:03:17.480 --> 00:03:18.480
about with that.


00:03:18.480 --> 00:03:23.200
So what is the length of that?


00:03:23.200 --> 00:03:24.960
And it turns out that that's pretty much


00:03:24.960 --> 00:03:26.400
the same length still.


00:03:26.400 --> 00:03:29.880
So the last episode's 39 minutes, 32 minutes, 35 minutes,


00:03:29.880 --> 00:03:30.520
33 minutes.


00:03:30.520 --> 00:03:33.600
That's how long our main segment's up to the end of it.


00:03:33.600 --> 00:03:36.080
So it's kind of like, for people who feel it's too long,


00:03:36.080 --> 00:03:39.320
I want to just sort of say, feel free to just delete it.


00:03:39.320 --> 00:03:41.320
You hear the six items, delete it at that point.


00:03:41.320 --> 00:03:43.680
If you don't want to hear us ramble about other things that


00:03:43.680 --> 00:03:45.140
are not pure Python, you don't want


00:03:45.140 --> 00:03:52.980
about the joke or tell jokes, no problem. Just stop. It's at the end for a reason. So


00:03:52.980 --> 00:03:55.780
if you're kind of like, "All right, I'm kind of done," then be done. That's totally good.


00:03:55.780 --> 00:04:03.620
We'll put the important stuff up first. The other one was, "Do you like us having a third


00:04:03.620 --> 00:04:09.940
co-host like Matt or Shel or whoever it is we've had on recently?" And most people love that format.


00:04:09.940 --> 00:04:12.340
- Or at least it's okay.


00:04:12.340 --> 00:04:15.180
It's okay. So that's like, I think that that's pretty good.


00:04:15.180 --> 00:04:17.980
I do want to read out just a couple of comments as well.


00:04:17.980 --> 00:04:22.380
There's stuff that you always get that are like,


00:04:22.380 --> 00:04:24.380
you just can't balance it.


00:04:24.380 --> 00:04:25.620
A couple of people are saying like,


00:04:25.620 --> 00:04:26.620
you just got to drop the joke.


00:04:26.620 --> 00:04:27.460
Like, don't do that.


00:04:27.460 --> 00:04:28.740
The other people are like, the joke is the best.


00:04:28.740 --> 00:04:30.180
Who doesn't want to stay for that?


00:04:30.180 --> 00:04:33.060
So, you know, like, well, again, it's at the end.


00:04:33.060 --> 00:04:35.380
So you can do that.


00:04:35.380 --> 00:04:37.820
But I also just wanted to say thank you, everybody.


00:04:37.820 --> 00:04:40.840
They wrote a ton of nice comments to you and me


00:04:40.840 --> 00:04:43.320
at the end of that Google forum.


00:04:43.320 --> 00:04:46.960
So one is, I can't tell what counts as an extra or normal,


00:04:46.960 --> 00:04:48.520
but it's fine, I love it.


00:04:48.520 --> 00:04:50.240
Python Bytes is such an excellent show,


00:04:50.240 --> 00:04:51.620
fun way to keep current.


00:04:51.620 --> 00:04:54.960
Brian is awesome.


00:04:54.960 --> 00:04:57.420
- Oh good, I asked my daughter to submit that.


00:04:57.420 --> 00:04:58.640
(laughing)


00:04:58.640 --> 00:04:59.480
- She did good.


00:04:59.480 --> 00:05:02.840
I think your third guest, having a third guest is great.


00:05:02.840 --> 00:05:05.840
Like I said, drop the jokes, keep the jokes for sure, ideal.


00:05:08.600 --> 00:05:10.880
So anyway, there's a bunch of nice comments.


00:05:10.880 --> 00:05:14.720
I think the other thing that I would like to just speak to real quick


00:05:14.720 --> 00:05:17.280
and get your thoughts on, and maybe you as well, Matt,


00:05:17.280 --> 00:05:20.360
because you've been on the receiving end of this a lot,


00:05:20.360 --> 00:05:22.640
is us having the live audience.


00:05:22.640 --> 00:05:26.720
I think having a live audience is really interesting.


00:05:26.720 --> 00:05:32.580
I also want to just acknowledge, we knew that that would be a slight drift


00:05:32.580 --> 00:05:33.400
of format, right?


00:05:33.400 --> 00:05:36.160
So if you're listening in the car and there's a live audience comment,


00:05:36.160 --> 00:05:38.560
It's kind of like, well, but I'm not listening to it live.


00:05:38.560 --> 00:05:40.200
That's kind of different.


00:05:40.200 --> 00:05:41.760
But I think it's really valuable.


00:05:41.760 --> 00:05:44.320
One time we had four, maybe four,


00:05:44.320 --> 00:05:47.280
Python core developers commenting on the stuff


00:05:47.280 --> 00:05:48.560
we were covering.


00:05:48.560 --> 00:05:51.440
That's a huge value to have people coming


00:05:51.440 --> 00:05:52.960
and sort of feeding that in.


00:05:52.960 --> 00:05:55.560
So for me, personally, I feel like it's,


00:05:55.560 --> 00:05:57.620
yeah, it's a little bit of a blend of formats,


00:05:57.620 --> 00:06:00.320
but I think having the feedback from the audience,


00:06:00.320 --> 00:06:01.680
especially when people are involved


00:06:01.680 --> 00:06:03.640
in what we're talking about, I think that's worth it.


00:06:03.640 --> 00:06:04.480
Brian, what do you think?


00:06:04.480 --> 00:06:09.160
- Well, we try not to let it interrupt the flow too much,


00:06:09.160 --> 00:06:10.660
but there's some great stuff.


00:06:10.660 --> 00:06:14.360
Like if somebody, if we say something that's just wrong,


00:06:14.360 --> 00:06:17.600
somebody will correct us and that's nice.


00:06:17.600 --> 00:06:22.060
The other thing is sometimes somebody has a great question


00:06:22.060 --> 00:06:25.160
on a topic that like we should have talked about,


00:06:25.160 --> 00:06:26.720
but we didn't.


00:06:26.720 --> 00:06:27.560
- We didn't, right.


00:06:27.560 --> 00:06:28.560
We don't know everything.


00:06:28.560 --> 00:06:29.700
We certainly don't.


00:06:29.700 --> 00:06:32.560
So I do want to add one more thing.


00:06:34.440 --> 00:06:36.160
And I think that's a really good point.


00:06:36.160 --> 00:06:37.320
I think that's a really good point.


00:06:37.320 --> 00:06:38.320
I think that's a really good point.


00:06:38.320 --> 00:06:39.320
I think that's a really good point.


00:06:39.320 --> 00:06:40.320
I think that's a really good point.


00:06:40.320 --> 00:06:41.320
I think that's a really good point.


00:06:41.320 --> 00:06:42.320
I think that's a really good point.


00:06:42.320 --> 00:06:43.320
I think that's a really good point.


00:06:43.320 --> 00:06:44.320
I think that's a really good point.


00:06:44.320 --> 00:06:45.320
I think that's a really good point.


00:06:45.320 --> 00:06:46.320
I think that's a really good point.


00:06:46.320 --> 00:06:47.320
I think that's a really good point.


00:06:47.320 --> 00:06:48.320
I think that's a really good point.


00:06:48.320 --> 00:06:49.320
I think that's a really good point.


00:06:49.320 --> 00:06:50.320
I think that's a really good point.


00:06:50.320 --> 00:06:51.320
I think that's a really good point.


00:06:51.320 --> 00:06:52.320
I think that's a really good point.


00:06:52.320 --> 00:06:53.320
I think that's a really good point.


00:06:53.320 --> 00:06:54.320
I think that's a really good point.


00:06:54.320 --> 00:06:59.040
really an interview format. So, and we always tell the guests to interrupt us.


00:06:59.040 --> 00:07:04.480
They don't much. So, yeah. Yeah. So Matt, what do you think of this live audience aspect? Like,


00:07:04.480 --> 00:07:09.360
do you feel like that's tracks or is it good? Well, yeah, first of all, thank I'm, I'm, I'm glad


00:07:09.360 --> 00:07:14.160
that, people generally like having a guest. Otherwise this would have been very awkward.


00:07:14.160 --> 00:07:21.520
but no, I do like it. I think there was one occasionally there is a kind of a, a little bit


00:07:21.520 --> 00:07:27.040
of a disruption, but I think in general it's been great. Yeah, I've definitely been listening when


00:07:27.040 --> 00:07:31.680
times when, you know, a bunch of people are chiming in because there's always, as you know,


00:07:31.680 --> 00:07:35.840
that you mentioned a GUI library and then there's about 12 other options that you may not have


00:07:35.840 --> 00:07:41.360
covered. Instead of waiting 12 weeks, you could just get them right out. So I think that's great.


00:07:41.360 --> 00:07:47.440
And I'm generally an audio listener. I listen when I'm walking my dogs, but I love having the


00:07:47.440 --> 00:07:51.260
the video because when I am very, when I'm interested in something, I can go hop to it


00:07:51.260 --> 00:07:53.140
right away and, and see what you're showing.


00:07:53.140 --> 00:07:54.420
Which I really like.


00:07:54.420 --> 00:07:55.060
So, yeah.


00:07:55.060 --> 00:07:55.440
Awesome.


00:07:55.440 --> 00:07:55.800
Thank you.


00:07:55.800 --> 00:07:58.200
two other things that came to mind.


00:07:58.200 --> 00:08:02.100
Someone said it would be great if there's a way where we could submit.


00:08:02.100 --> 00:08:05.420
Like ideas and stuff like that for a guest.


00:08:05.420 --> 00:08:08.100
I, whatnot.


00:08:08.100 --> 00:08:12.040
I hear the top and our menu, it says submit.


00:08:12.040 --> 00:08:15.720
So please, reach out to us on Twitter.


00:08:15.720 --> 00:08:16.780
Send us an email.


00:08:16.980 --> 00:08:17.860
do submit it there.


00:08:17.860 --> 00:08:20.620
The other one was if we could have time links,


00:08:20.620 --> 00:08:25.620
like if you go to listen and at some certain time,


00:08:25.620 --> 00:08:28.140
a thing is interesting that's mentioned,


00:08:28.140 --> 00:08:31.180
be cool if you could like link at a time.


00:08:31.180 --> 00:08:33.700
If you look in your podcast player, it has chapters


00:08:33.700 --> 00:08:36.260
and each chapter has both a link and a time.


00:08:36.260 --> 00:08:40.220
So like the thing that Brian's gonna talk about next,


00:08:40.220 --> 00:08:41.980
interpreters, if you wanna hear about that,


00:08:41.980 --> 00:08:44.220
during that section in your podcast player,


00:08:44.220 --> 00:08:46.060
you can click the chapter title


00:08:46.060 --> 00:08:48.900
and it will literally navigate you to there.


00:08:48.900 --> 00:08:50.360
So it's already built in,


00:08:50.360 --> 00:08:53.420
just make sure you can see it in your device.


00:08:53.420 --> 00:08:54.260
- Yeah.


00:08:54.260 --> 00:08:55.220
- All right.


00:08:55.220 --> 00:08:57.380
I think that's it for that one,


00:08:57.380 --> 00:09:00.100
but yeah, thank you for everybody who had comments


00:09:00.100 --> 00:09:01.820
and took the time, really appreciate it.


00:09:01.820 --> 00:09:03.140
- Yeah, and just to comment,


00:09:03.140 --> 00:09:05.140
if you wanna be a guest,


00:09:05.140 --> 00:09:08.520
just email on that form and you might be able to do it.


00:09:08.520 --> 00:09:10.100
- That's right, that's right.


00:09:10.100 --> 00:09:11.540
Yeah, great to have you here.


00:09:11.540 --> 00:09:14.900
- Actually, I didn't wanna talk about interpreters.


00:09:14.900 --> 00:09:16.180
No, that's me.


00:09:16.180 --> 00:09:17.860
- Oh, wait, you're right.


00:09:17.860 --> 00:09:20.100
Well, you're talking about it now because I've changed.


00:09:20.100 --> 00:09:21.480
No, let's talk about Adders.


00:09:21.480 --> 00:09:23.300
Sorry, I saw the wrong screen.


00:09:23.300 --> 00:09:24.860
- No, no, no, no, no.


00:09:24.860 --> 00:09:28.020
Apparently we're not professional here, but no, it's okay.


00:09:28.020 --> 00:09:31.140
I wanted to talk about Adders.


00:09:31.140 --> 00:09:33.620
We haven't really talked about it much for a while


00:09:33.620 --> 00:09:35.860
because there are lots of reasons,


00:09:35.860 --> 00:09:37.740
but Adders is a great library.


00:09:37.740 --> 00:09:40.660
And it just came out with Adders,


00:09:40.660 --> 00:09:43.580
came out with the release 21.3.0,


00:09:43.580 --> 00:09:45.340
which is why we're talking about it now.


00:09:45.340 --> 00:09:46.580
And there's some documents,


00:09:46.580 --> 00:09:47.820
there's a little bit of change,


00:09:47.820 --> 00:09:50.660
there's some changes and some documentation changes.


00:09:50.660 --> 00:09:53.580
And I really, in an article I wanted to cover.


00:09:53.580 --> 00:09:56.100
So one of the things you'll see right off the bat,


00:09:56.100 --> 00:09:59.700
if you look at the overview page of the Adders site,


00:09:59.700 --> 00:10:04.700
is it's highlighting the define decorator.


00:10:04.700 --> 00:10:08.580
It's a different kind of way that if you've used Adders


00:10:08.580 --> 00:10:11.180
from years ago, this is a little different.


00:10:11.180 --> 00:10:16.180
So there was a different way to,


00:10:16.180 --> 00:10:20.300
a different API that was added in the last release.


00:10:20.300 --> 00:10:24.100
And this is, or one of the previous releases,


00:10:24.100 --> 00:10:26.080
and now that's the preferred way.


00:10:26.080 --> 00:10:28.900
So this is what we're calling modern adders.


00:10:28.900 --> 00:10:30.660
But along with this,


00:10:30.660 --> 00:10:34.260
I wanted to talk about an article that Henik wrote


00:10:34.260 --> 00:10:38.820
about adders, and it's a little bit of a history,


00:10:38.820 --> 00:10:40.560
and I really love this discussion.


00:10:40.560 --> 00:10:45.220
So, and I'll try to quickly go through the history.


00:10:45.220 --> 00:10:49.000
Early on, we didn't have data classes, obviously,


00:10:49.000 --> 00:10:51.080
we had, we could handcraft classes,


00:10:51.080 --> 00:10:52.600
but there were problems with it.


00:10:52.600 --> 00:10:55.520
And there was a library called Characteristic,


00:10:55.520 --> 00:10:56.560
which I didn't know about.


00:10:56.560 --> 00:10:59.740
This was before I started looking into things.


00:10:59.740 --> 00:11:05.160
And then Glyph and Hennig in 2015,


00:11:05.160 --> 00:11:07.580
were discussing it, ways to change it.


00:11:07.580 --> 00:11:12.580
And that began the old original Adder's interface.


00:11:12.580 --> 00:11:17.260
And there were things like Adder.s and AdderAtrib


00:11:17.260 --> 00:11:21.360
that were partly out of the fact that the old way


00:11:21.360 --> 00:11:24.440
of characteristic attribute was a lot of typing.


00:11:24.440 --> 00:11:27.160
So they wanted to do something a little shorter.


00:11:27.160 --> 00:11:30.060
And then it kind of took off.


00:11:30.060 --> 00:11:32.880
Adder's was pretty popular for a long time,


00:11:32.880 --> 00:11:35.980
especially fueled by a 2016 article by Glyph


00:11:35.980 --> 00:11:38.880
called the one Python library everyone needs,


00:11:38.880 --> 00:11:42.960
which was a great, this is kind of how I learned about it.


00:11:42.960 --> 00:11:48.660
And then there was a different kind of API


00:11:48.660 --> 00:11:51.300
that we were used to for adders and it was good


00:11:51.300 --> 00:11:52.220
and everything was great.


00:11:52.220 --> 00:11:57.220
And then in 2017, Guido and Henik and Eric Smith


00:11:57.220 --> 00:12:01.540
talked about in the PyCon 2017,


00:12:01.540 --> 00:12:04.180
they talked about how to make something like that


00:12:04.180 --> 00:12:06.180
in the standard library.


00:12:06.180 --> 00:12:11.100
And that came out of that came PEP 557 and data classes


00:12:11.100 --> 00:12:15.540
and data classes showed up in Python 3.7.


00:12:15.540 --> 00:12:18.620
And then, so what then a dark period happened,


00:12:18.620 --> 00:12:20.780
which was people were like,


00:12:20.780 --> 00:12:24.180
why do we need adders anymore if we have data classes?


00:12:24.180 --> 00:12:28.180
Well, that's one of the things I like about this article.


00:12:28.180 --> 00:12:31.420
And then there's an attached article that is called,


00:12:31.420 --> 00:12:32.920
Why not?


00:12:32.920 --> 00:12:36.420
Why not data classes instead of adders?


00:12:36.420 --> 00:12:41.420
And this is, it's important to realize


00:12:41.420 --> 00:12:46.860
that data classes have always been a limited set of adders.


00:12:46.860 --> 00:12:50.260
Adders is a super set of functionality.


00:12:50.260 --> 00:12:52.340
And there's a lot of stuff missing in data classes


00:12:52.340 --> 00:12:57.340
like equality customization and validators.


00:12:57.340 --> 00:12:59.780
Validators and converters are very important


00:12:59.780 --> 00:13:01.480
if you're using a lot of these.


00:13:01.480 --> 00:13:04.600
And then also people were like, well,


00:13:04.600 --> 00:13:08.360
data classes kind of a nicer interface, right?


00:13:08.360 --> 00:13:10.520
Well, not anymore.


00:13:10.520 --> 00:13:14.320
The pound defines pretty, or the at defines really nice.


00:13:14.320 --> 00:13:16.600
This is a really easy interface now to work with.


00:13:16.600 --> 00:13:18.000
So anyway.


00:13:18.000 --> 00:13:19.440
- And it has typing.


00:13:19.440 --> 00:13:20.600
- And it has typing.


00:13:20.600 --> 00:13:24.480
And I'm glad you wrote this because I kind of


00:13:24.480 --> 00:13:26.080
was one of those people of like,


00:13:27.360 --> 00:13:31.760
Am I doing something wrong if I'm using data classes?


00:13:31.760 --> 00:13:33.680
Why should I look at Adders?


00:13:33.680 --> 00:13:36.340
And one of the things, there's a whole bunch of reasons.


00:13:36.340 --> 00:13:40.780
One of the things that I really like is Adders has slots.


00:13:40.780 --> 00:13:43.780
The slots are on by default.


00:13:43.780 --> 00:13:46.920
So you have, you kind of define your class once


00:13:46.920 --> 00:13:49.220
instead of keeping it growing.


00:13:49.220 --> 00:13:52.000
Whereas the default Python way in data classes


00:13:52.000 --> 00:13:54.760
is to allow classes to grow at runtime,


00:13:54.760 --> 00:13:57.000
have more attributes.


00:13:57.000 --> 00:13:59.620
but that's not really how a lot of people use classes.


00:13:59.620 --> 00:14:01.860
So if you came from another language


00:14:01.860 --> 00:14:04.140
where you have to kind of define the class at once


00:14:04.140 --> 00:14:05.460
and not at runtime,


00:14:05.460 --> 00:14:08.920
Adders might be a closer fit for you, so.


00:14:08.920 --> 00:14:11.220
- I like it.


00:14:11.220 --> 00:14:14.300
And it's, whether you say @define or @dataclass,


00:14:14.300 --> 00:14:15.140
pretty similar.


00:14:15.140 --> 00:14:17.820
- Yeah, Adders is really cool.


00:14:17.820 --> 00:14:19.140
I personally haven't used it,


00:14:19.140 --> 00:14:21.820
but I've always wanted to try it.


00:14:21.820 --> 00:14:24.100
We're using FastAPI and Pydantic,


00:14:24.100 --> 00:14:25.700
so I've really come to like that library,


00:14:25.700 --> 00:14:28.100
but Adders is something that looks really full featured


00:14:28.100 --> 00:14:31.700
and nice, definitely something I wanna pick up.


00:14:31.700 --> 00:14:32.540
- Yeah, it's cool.


00:14:32.540 --> 00:14:36.340
And Pydantic also seems very inspired by data classes,


00:14:36.340 --> 00:14:38.140
which I'm learning now.


00:14:38.140 --> 00:14:40.820
I suspected, but now learning that is actually inspired


00:14:40.820 --> 00:14:43.420
by Adders and they kind of sort of leapfrog each other


00:14:43.420 --> 00:14:47.140
in this same trend, which is interesting.


00:14:47.140 --> 00:14:47.980
- Yep.


00:14:47.980 --> 00:14:50.340
- Yeah, cool.


00:14:50.340 --> 00:14:51.160
Good one, Brian.


00:14:51.160 --> 00:14:54.820
Matt.


00:14:54.820 --> 00:14:56.820
I thought Brian was going to talk about this,


00:14:56.820 --> 00:14:57.820
but you can talk about it if you want.


00:14:57.820 --> 00:14:59.180
>> This would be me, yeah.


00:14:59.180 --> 00:15:01.660
This one's not strictly Python related,


00:15:01.660 --> 00:15:04.500
but I think it's very relevant to Python.


00:15:04.500 --> 00:15:09.260
I mentioned earlier, I came from a non-CS background.


00:15:09.260 --> 00:15:13.180
I've just been going down the rabbit hole for about 10 years now


00:15:13.180 --> 00:15:17.100
trying to understand everything and pick it up and really connect


00:15:17.100 --> 00:15:21.660
the dots between how do these very flexible objects that you're working with every day,


00:15:21.660 --> 00:15:23.900
how do those get actually implemented?


00:15:23.900 --> 00:15:25.700
And so the first thing I did,


00:15:25.700 --> 00:15:27.700
have you heard of this guy, Anthony Shaw?


00:15:27.700 --> 00:15:30.220
I think he's been mentioned once or twice.


00:15:30.220 --> 00:15:32.020
He wrote a great book, shout out,


00:15:32.020 --> 00:15:33.420
"CPython Internals."


00:15:33.420 --> 00:15:34.260
Really enjoy it.


00:15:34.260 --> 00:15:35.180
- Anthony's out in the audience,


00:15:35.180 --> 00:15:36.860
he even says happy new year.


00:15:36.860 --> 00:15:38.340
- Yeah.


00:15:38.340 --> 00:15:39.180
So this book is great


00:15:39.180 --> 00:15:42.220
if you want to learn how CPython's implemented.


00:15:42.220 --> 00:15:44.660
But because I don't have a traditional CS background,


00:15:44.660 --> 00:15:46.100
I've always wanted,


00:15:46.100 --> 00:15:47.900
I felt like I wanted to get a little bit more


00:15:47.900 --> 00:15:49.300
to the fundamentals.


00:15:49.300 --> 00:15:51.260
And I don't remember where I found out about this book,


00:15:51.260 --> 00:15:53.140
but "Crafting Interpreters,"


00:15:53.140 --> 00:15:54.500
I got the paperback here too.


00:15:54.500 --> 00:15:55.580
I highly recommend it.


00:15:55.580 --> 00:16:00.580
It's a implementation of a language from start to finish.


00:16:00.580 --> 00:16:03.140
Every line of code is in the book.


00:16:03.140 --> 00:16:07.620
It's a dynamic interpreted language, much like Python,


00:16:07.620 --> 00:16:09.660
but I really like how the book is structured.


00:16:09.660 --> 00:16:14.660
So it was written over, I think, five years in the open.


00:16:14.660 --> 00:16:18.180
I think the paperback may have just come out last year,


00:16:18.180 --> 00:16:20.440
but you walk through every step from tokenization,


00:16:20.440 --> 00:16:23.000
scanning, building a syntax tree,


00:16:23.000 --> 00:16:25.500
and all the way through the end.


00:16:25.500 --> 00:16:26.900
But what I really like about it is,


00:16:26.900 --> 00:16:28.520
is you actually,


00:16:28.520 --> 00:16:32.140
you develop two separate interpreters for the same language.


00:16:32.140 --> 00:16:34.620
So the first one is written in Java.


00:16:34.620 --> 00:16:39.200
It's a direct evaluation of the abstract syntax tree.


00:16:39.200 --> 00:16:43.680
So that was really how I got a lot of these bits in my head


00:16:43.680 --> 00:16:45.260
about what is an abstract syntax tree?


00:16:45.260 --> 00:16:46.100
How do you start from there?


00:16:46.100 --> 00:16:47.660
How do you represent these types?


00:16:47.660 --> 00:16:49.500
But the second part is actually very,


00:16:49.500 --> 00:16:52.060
where I think it becomes really relevant for Python


00:16:52.060 --> 00:16:54.100
because the second part is written in C,


00:16:54.100 --> 00:16:58.760
it's a byte code virtual machine with garbage collection.


00:16:58.760 --> 00:17:00.540
So it's not exactly the same as Python,


00:17:00.540 --> 00:17:03.940
but if you wanna dig down into how would you actually


00:17:03.940 --> 00:17:06.940
implement this with the types that you have available


00:17:06.940 --> 00:17:11.380
for you in C, but get something flexible, much like Python,


00:17:11.380 --> 00:17:13.260
I really recommend this.


00:17:13.260 --> 00:17:14.500
So again, it's not directly,


00:17:14.500 --> 00:17:18.020
there's some good side notes in here where he compares


00:17:18.020 --> 00:17:20.220
different implementations between different languages


00:17:20.220 --> 00:17:24.660
like Python and JavaScript, et cetera, Ruby.


00:17:24.660 --> 00:17:26.180
But I really liked this book.


00:17:26.180 --> 00:17:28.580
I devoured it during my time between jobs


00:17:28.580 --> 00:17:32.020
and yeah, I keep telling everyone about it.


00:17:32.020 --> 00:17:34.220
So I thought it would be good for the community to hear.


00:17:34.220 --> 00:17:35.060
- Yeah. - Nice.


00:17:35.060 --> 00:17:38.980
- Yeah, I didn't study this stuff in college either.


00:17:38.980 --> 00:17:41.340
I mostly studied math and things like that.


00:17:41.340 --> 00:17:44.900
And so understanding how virtual machines work


00:17:44.900 --> 00:17:48.300
and all that is just how code executes.


00:17:48.300 --> 00:17:50.260
I think it's really important.


00:17:50.260 --> 00:17:52.060
It's not the kind of thing that you actually


00:17:52.060 --> 00:17:54.020
need to know how to do in terms of


00:17:54.020 --> 00:17:55.300
you gotta get anything done with it.


00:17:55.300 --> 00:17:58.020
But sometimes your intuition of like,


00:17:58.020 --> 00:18:00.220
if I asked the program to work this way


00:18:00.220 --> 00:18:02.380
and it doesn't work as you expected,


00:18:02.380 --> 00:18:05.820
you expect maybe understanding that internals like,


00:18:05.820 --> 00:18:08.100
oh, it's because it's really doing this


00:18:08.100 --> 00:18:09.900
and everything's all scattered out on the heap.


00:18:09.900 --> 00:18:11.140
And I thought numbers would be fast.


00:18:11.140 --> 00:18:12.540
Why are numbers so slow?


00:18:12.540 --> 00:18:14.220
Okay, I understand now.


00:18:14.220 --> 00:18:16.600
- Yeah, I really liked it.


00:18:16.600 --> 00:18:18.700
I mean, it answered a lot of questions for me,


00:18:18.700 --> 00:18:20.820
like how does a HashMap work, right?


00:18:20.820 --> 00:18:22.340
That's a dictionary in Python.


00:18:22.340 --> 00:18:23.380
What is a stack?


00:18:23.380 --> 00:18:24.540
Why would you use it?


00:18:24.540 --> 00:18:26.660
What is the, when you do a disassemble


00:18:26.660 --> 00:18:30.300
and you see byte code, what does that actually mean, right?


00:18:30.300 --> 00:18:31.660
So I really, really enjoyed it.


00:18:31.660 --> 00:18:34.620
And he's got a really great, book's open source.


00:18:34.620 --> 00:18:36.300
It's got a really great build system.


00:18:36.300 --> 00:18:38.700
If you're interested in writing a book, it's very cool.


00:18:38.700 --> 00:18:41.380
How the adding lines of code and things like that


00:18:41.380 --> 00:18:48.820
all embedded in there and he's got tests written for every part where you add a new bit to the


00:18:48.820 --> 00:18:53.060
code. There's tests written and there's ways where he uses macros and things to block them out. It's


00:18:53.060 --> 00:19:01.220
pretty interesting. - Nice, testing books. - That's pretty excellent. So Matt, now being


00:19:01.220 --> 00:19:08.100
at Anaconda, like that world, the Python world over in the data science stack and especially


00:19:08.100 --> 00:19:12.660
around there, has so much of like, here's a bunch of C and here's a bunch of Python and they kind of


00:19:12.660 --> 00:19:16.580
go together. Does this give you a deeper understanding of what's happening? Yeah, for


00:19:16.580 --> 00:19:21.860
sure. I think CPython internals gave me a really good understanding a bit about, a bit more about


00:19:21.860 --> 00:19:27.380
the C API and why that's important. And as I'm sure you, well, as you know, and the listeners


00:19:27.380 --> 00:19:32.260
may know, like the binary compatibility is really important between the two and dealing with


00:19:32.260 --> 00:19:36.340
locking and the global interpreter lock and everything like that.


00:19:36.340 --> 00:19:42.820
So it's definitely given me a better conceptual view of how these things are working. As you


00:19:42.820 --> 00:19:46.980
mentioned, you don't need to know it necessarily on a day-to-day basis, but I've just found that


00:19:46.980 --> 00:19:51.300
it's given me a much better mental model. >> Having an intuition is valuable.


00:19:51.300 --> 00:19:56.260
>> Yeah. >> Yeah. Quick audience feedback. Sam


00:19:56.260 --> 00:20:00.100
out in the live audience says, "I started reading this book over Christmas Day and it's an absolute


00:20:00.100 --> 00:20:04.500
joy. So yeah, very cool. One more vote of confidence for you.


00:20:04.500 --> 00:20:12.420
Cool. Right. We ready for my my next one? Yes, definitely. A


00:20:12.420 --> 00:20:18.620
little Yamali. Yeah, I'm hungry. So this one is cool. It's


00:20:18.620 --> 00:20:22.780
called your Molly or Emily. I'm not 100% sure but it was


00:20:22.780 --> 00:20:26.420
suggested by Andrew Simon. Thank you, Andrew for sending this in.


00:20:26.820 --> 00:20:31.820
And the idea of this is we work with YAML files


00:20:31.820 --> 00:20:35.740
that's often used for configuration and whatnot.


00:20:35.740 --> 00:20:41.480
But if you wanna verify your YAML, right?


00:20:41.480 --> 00:20:43.100
It's just text.


00:20:43.100 --> 00:20:46.180
Maybe you wanna have some YAML


00:20:46.180 --> 00:20:48.980
that has a number for a value,


00:20:48.980 --> 00:20:50.260
or you wanna have a string,


00:20:50.260 --> 00:20:52.940
or maybe you wanna have true false,


00:20:52.940 --> 00:20:55.320
or you wanna have some nested thing, right?


00:20:55.320 --> 00:20:58.840
Like you could say, I'm going to have a person in my YAML,


00:20:58.840 --> 00:21:02.040
and then that person has to have fields or values set


00:21:02.040 --> 00:21:04.160
in it like a name and an age.


00:21:04.160 --> 00:21:07.500
With this library, you can actually create a schema


00:21:07.500 --> 00:21:11.840
that talks about what the shape and types of these are,


00:21:11.840 --> 00:21:12.920
much like data classes.


00:21:12.920 --> 00:21:15.280
And then you can use YAML to say,


00:21:15.280 --> 00:21:18.640
given a YAML file, does it validate?


00:21:18.640 --> 00:21:21.680
Think kind of like Pydantic is for JSON.


00:21:21.680 --> 00:21:22.760
This is for YAML,


00:21:22.760 --> 00:21:24.720
except it doesn't actually parse the results out.


00:21:24.720 --> 00:21:27.280
but it just tells you whether or not it's correct.


00:21:27.280 --> 00:21:28.120
Isn't that cool?


00:21:28.120 --> 00:21:31.300
- I think it looks neat.


00:21:31.300 --> 00:21:32.880
Yeah.


00:21:32.880 --> 00:21:36.200
- Yeah, so it's pretty easy to work with.


00:21:36.200 --> 00:21:38.280
Obviously requires modern Python.


00:21:38.280 --> 00:21:41.200
It has a CLI version, right?


00:21:41.200 --> 00:21:42.040
So you can just say,


00:21:42.040 --> 00:21:45.240
"Yamali, give it a schema, give it a file,"


00:21:45.240 --> 00:21:47.120
and it'll go through and check it.


00:21:47.120 --> 00:21:49.840
It has a strict and a non-strict mode.


00:21:49.840 --> 00:21:52.080
It also has an API.


00:21:52.080 --> 00:21:54.160
So, and then to use it, just say,


00:21:54.160 --> 00:21:56.720
yamali.validate schema and data,


00:21:56.720 --> 00:21:58.960
either in code or on the CLI.


00:21:58.960 --> 00:22:00.800
And in terms of schemas,


00:22:00.800 --> 00:22:02.120
like I said, it looks like data classes.


00:22:02.120 --> 00:22:05.760
You just have a file like name colon str, age colon int,


00:22:05.760 --> 00:22:08.160
and then you can even add additional limitations


00:22:08.160 --> 00:22:11.920
like the max integer value has to be 200 or less,


00:22:11.920 --> 00:22:13.200
which is pretty cool.


00:22:13.200 --> 00:22:15.520
Then also, like I said,


00:22:15.520 --> 00:22:19.280
you can have more complex structures.


00:22:19.280 --> 00:22:21.680
So for example, they have what they call a person,


00:22:21.680 --> 00:22:26.680
But then the person here, actually, you can nest them.


00:22:26.680 --> 00:22:28.480
So you could have like part of your YAML


00:22:28.480 --> 00:22:29.920
could have a person in it,


00:22:29.920 --> 00:22:32.560
and then your person schema could validate that person.


00:22:32.560 --> 00:22:35.360
So very much like Pydantic, but for YAML files.


00:22:35.360 --> 00:22:37.200
Like here you can see, scroll down,


00:22:37.200 --> 00:22:40.040
there's an example of, I think it's called recursion


00:22:40.040 --> 00:22:41.360
is how they refer to it.


00:22:41.360 --> 00:22:43.720
But you can have like nested versions


00:22:43.720 --> 00:22:45.840
of these things and so on.


00:22:45.840 --> 00:22:48.300
So if you're working with YAML,


00:22:48.300 --> 00:22:50.880
and you wanna validate it through unit tests


00:22:50.880 --> 00:22:55.200
or some data ingestion pipeline or whatever.


00:22:55.200 --> 00:22:57.360
I just wanna make sure you're loading the files correctly.


00:22:57.360 --> 00:23:00.960
Then you might as well hit it with some Yamali, I'm guessing.


00:23:00.960 --> 00:23:04.000
- One of the things I like about stuff like this


00:23:04.000 --> 00:23:06.520
is that things like YAML files,


00:23:06.520 --> 00:23:11.520
sometimes people just sort of edit it in the Git repo


00:23:11.520 --> 00:23:14.640
instead of making sure it works first.


00:23:14.640 --> 00:23:19.200
And then it gets, and then having a CI stage that says,


00:23:19.200 --> 00:23:23.640
hey, making sure the YAML's valid syntax is pretty nice


00:23:23.640 --> 00:23:27.520
so that you know it before it blows up somewhere else


00:23:27.520 --> 00:23:28.980
with some weird error message.


00:23:28.980 --> 00:23:30.320
So.


00:23:30.320 --> 00:23:31.480
- Yeah, exactly.


00:23:31.480 --> 00:23:33.200
- Yeah, this is really cool.


00:23:33.200 --> 00:23:35.160
Validation of these types of input files,


00:23:35.160 --> 00:23:37.360
especially YAML files is really tough I've found


00:23:37.360 --> 00:23:39.120
just 'cause it's indentation based


00:23:39.120 --> 00:23:42.960
and whitespace is not a bad thing, obviously,


00:23:42.960 --> 00:23:44.420
but for YAML it's tough.


00:23:44.420 --> 00:23:46.460
I can't tell you how many hours


00:23:46.460 --> 00:23:47.640
I've banged my head against the wall


00:23:47.640 --> 00:23:51.720
in the past life, trying to get Ansible scripts to run


00:23:51.720 --> 00:23:52.600
and things like that.


00:23:52.600 --> 00:23:54.500
So this is really neat.


00:23:54.500 --> 00:23:55.860
Anytime I see something like this,


00:23:55.860 --> 00:23:57.960
I just wish that there was one way


00:23:57.960 --> 00:24:00.240
to describe those types somewhere,


00:24:00.240 --> 00:24:04.160
like preferably in Python, just 'cause I like that more,


00:24:04.160 --> 00:24:06.160
but this is really cool.


00:24:06.160 --> 00:24:07.440
- Yeah, I wouldn't be surprised


00:24:07.440 --> 00:24:10.160
if there's some kind of pedantic mapping to YAML


00:24:10.160 --> 00:24:11.520
instead of to JSON,


00:24:11.520 --> 00:24:12.820
and you can just kind of run it through there.


00:24:12.820 --> 00:24:15.520
But yeah, I think this is more of a challenge


00:24:15.520 --> 00:24:16.880
than it is safe for JSON


00:24:16.880 --> 00:24:20.720
because JSON, there's a validity to the file,


00:24:20.720 --> 00:24:22.240
regardless of what the schema is,


00:24:22.240 --> 00:24:24.960
where YAML, less so, right?


00:24:24.960 --> 00:24:26.160
Like, well, if you didn't indent that,


00:24:26.160 --> 00:24:28.840
well, it just, that means it belongs somewhere else,


00:24:28.840 --> 00:24:31.360
I guess, you know, it's a little more free form.


00:24:31.360 --> 00:24:33.180
So I guess that's why it's popular,


00:24:33.180 --> 00:24:35.440
but also nice to have this validation.


00:24:35.440 --> 00:24:37.880
So yeah, thank you for Andrew.


00:24:37.880 --> 00:24:39.820
Thank you to Andrew for sending that in.


00:24:39.820 --> 00:24:46.200
- Yeah, so next I wanted to talk about Templar,


00:24:46.200 --> 00:24:47.760
which is a great name.


00:24:47.760 --> 00:24:50.440
And I honestly can't remember where I saw this.


00:24:50.440 --> 00:24:54.480
I think it was a post or something by Bob Beldervost


00:24:54.480 --> 00:24:58.200
or something he wrote on PyBytes, I'm not sure.


00:24:58.200 --> 00:25:00.400
Anyway, so I'll give him credit.


00:25:00.400 --> 00:25:01.560
Maybe it was somebody else.


00:25:01.560 --> 00:25:03.480
So if it was somebody else, I apologize.


00:25:03.480 --> 00:25:05.040
But anyway, what is Pimpler?


00:25:05.040 --> 00:25:07.000
Pimpler is a little tiny library,


00:25:07.000 --> 00:25:08.960
which has a few tools in it.


00:25:08.960 --> 00:25:12.120
And it has, one of the things it says is,


00:25:12.120 --> 00:25:16.160
one of the things I saw, it does a few things,


00:25:16.160 --> 00:25:18.320
but what I, it measures, monitors,


00:25:18.320 --> 00:25:20.960
and analyzes memory behavior in Python objects.


00:25:20.960 --> 00:25:24.600
But the, it's the memory size thing that,


00:25:24.600 --> 00:25:27.460
that was interesting to me.


00:25:27.460 --> 00:25:32.180
So you've got, like for instance,


00:25:32.180 --> 00:25:35.000
it has three, three tools built into it,


00:25:35.000 --> 00:25:40.000
a sizeof and Muppy, which is a great name,


00:25:40.000 --> 00:25:41.160
and class tracker.


00:25:41.160 --> 00:25:45.280
So a sizeof is a, provides a basic size information


00:25:45.280 --> 00:25:48.040
for one or a set of objects.


00:25:48.040 --> 00:25:50.480
And Muppy is a monitoring.


00:25:50.480 --> 00:25:51.640
I didn't play with this.


00:25:51.640 --> 00:25:53.600
I didn't play with the class tracker either.


00:25:53.600 --> 00:25:55.560
Class tracker provides offline analysis


00:25:55.560 --> 00:25:57.680
of lifetimes of Python objects.


00:25:57.680 --> 00:25:58.520
- Yeah, that's interesting.


00:25:58.520 --> 00:25:59.960
Maybe if you've got a memory leak,


00:25:59.960 --> 00:26:03.080
you can see like there's a hundred thousands of my,


00:26:03.080 --> 00:26:04.720
hundreds of thousands of this type.


00:26:04.720 --> 00:26:07.400
And I thought I only had three of them.


00:26:07.400 --> 00:26:09.600
- Yeah, and so one of the things that I really liked


00:26:09.600 --> 00:26:12.600
of with Asize of is it's,


00:26:13.680 --> 00:26:18.680
I mean, we already have sys get size of in Python,


00:26:18.680 --> 00:26:21.580
but that just kind of tells you the size


00:26:21.580 --> 00:26:26.580
of the object itself, not of the, like later on.


00:26:26.580 --> 00:26:30.640
So ASYS will tell you not just what the size


00:26:30.640 --> 00:26:32.740
of the object is, but all of the recursively,


00:26:32.740 --> 00:26:35.540
it goes recursively and looks at the size


00:26:35.540 --> 00:26:37.720
of all the stuff that it contains of it.


00:26:37.720 --> 00:26:38.560
So. - Right.


00:26:38.560 --> 00:26:39.960
And people haven't looked at this,


00:26:39.960 --> 00:26:41.880
you know, they should check out Anthony's book, right?


00:26:41.880 --> 00:26:45.820
But if you've got a list and say the list has 100 items


00:26:45.820 --> 00:26:48.540
in it and you say, what is the size of the list?


00:26:48.540 --> 00:26:51.800
The list will be roughly 900 bytes


00:26:51.800 --> 00:26:55.960
'cause it's 108 byte pointers plus a little bit of overhead.


00:26:55.960 --> 00:26:58.740
Those pointers could point at megabytes of memory.


00:26:58.740 --> 00:27:00.820
You could have a hundred megabytes of stuff loaded


00:27:00.820 --> 00:27:01.780
in your list.


00:27:01.780 --> 00:27:03.420
And if it's really only a hundred, like, no,


00:27:03.420 --> 00:27:06.740
that's 900 bytes, not 800 megabytes or whatever, right?


00:27:06.740 --> 00:27:08.780
So you really need to, if you actually care


00:27:08.780 --> 00:27:11.700
about real whole memory size.


00:27:11.700 --> 00:27:12.860
You got to use something like a size.


00:27:12.860 --> 00:27:13.860
It's cool that this is built in.


00:27:13.860 --> 00:27:17.700
I had to write this myself and it was not as fun.


00:27:17.700 --> 00:27:18.540
- Yeah, this is awesome.


00:27:18.540 --> 00:27:22.540
I also, I hit this sometime in grad school.


00:27:22.540 --> 00:27:25.560
I remember when I was kind of at a deadline or something


00:27:25.560 --> 00:27:29.220
and just, I hit the same thing about the number of bytes


00:27:29.220 --> 00:27:32.840
in a list being so small and just writing something


00:27:32.840 --> 00:27:34.700
that was hacky to try to do the same thing,


00:27:34.700 --> 00:27:37.860
but to have it so nice and available is great.


00:27:37.860 --> 00:27:39.180
- And the name is awesome.


00:27:39.180 --> 00:27:40.780
I love silly names.


00:27:40.780 --> 00:27:43.480
- Yeah, for sure.


00:27:43.480 --> 00:27:45.640
- One of the example, I was confused.


00:27:45.640 --> 00:27:48.200
The example we're showing on the screen is just a,


00:27:48.200 --> 00:27:50.980
you've got a list of a few items.


00:27:50.980 --> 00:27:54.440
Some of it's a text, so some of them are integers


00:27:54.440 --> 00:27:57.660
and some are lists of integers or tuples of integers


00:27:57.660 --> 00:28:00.600
and being able to go down and do the size of everything.


00:28:00.600 --> 00:28:03.840
But then there's also a, you can get more detailed.


00:28:03.840 --> 00:28:08.840
you can give it a sized, a size with a detail numbers.


00:28:08.840 --> 00:28:12.360
I'd have to look at the API to figure out


00:28:12.360 --> 00:28:16.280
what all this means, but the example shows each element,


00:28:16.280 --> 00:28:18.240
not just the total, but each element,


00:28:18.240 --> 00:28:19.960
what the size of the different components are,


00:28:19.960 --> 00:28:23.160
which is kind of cool, but it lists like a flat size.


00:28:23.160 --> 00:28:24.880
And I'm like, what's the flat thing?


00:28:24.880 --> 00:28:27.260
So I had to look that up and flat,


00:28:27.260 --> 00:28:31.380
the flat size returns the flat size of a Python object


00:28:31.380 --> 00:28:34.060
in bytes determined as the basic size.


00:28:34.060 --> 00:28:39.060
So like in these examples, it's like the tuple is just a flat


00:28:39.060 --> 00:28:41.060
the tuple itself is 32 bytes,


00:28:41.060 --> 00:28:44.540
but the tuple and its contents is 64.


00:28:44.540 --> 00:28:45.380
- I see.


00:28:45.380 --> 00:28:50.380
So flat is like sys.getSizeOf and size is a size of that bit.


00:28:50.380 --> 00:28:55.020
- I think that's what it is, but yeah, not sure.


00:28:55.020 --> 00:28:55.860
But that's what I'm thinking.


00:28:55.860 --> 00:28:56.900
- Yeah, so for people who are listening,


00:28:56.900 --> 00:28:57.740
they don't see this.


00:28:57.740 --> 00:29:00.100
You should check out the docs page, right?


00:29:00.100 --> 00:29:01.140
Like a usage example,


00:29:01.140 --> 00:29:03.540
because if you have a list containing a bunch of stuff,


00:29:03.540 --> 00:29:05.720
you can just say, basically print this out


00:29:05.720 --> 00:29:07.600
and it shows line by line,


00:29:07.600 --> 00:29:09.920
this part of the list was this much.


00:29:09.920 --> 00:29:11.220
And then it pointed out these things,


00:29:11.220 --> 00:29:12.700
each of those things is this big


00:29:12.700 --> 00:29:16.480
and it has constituents and so on.


00:29:16.480 --> 00:29:18.700
My theory is that the detail equals one


00:29:18.700 --> 00:29:20.460
is recurse one level down,


00:29:20.460 --> 00:29:22.540
but don't keep traversing to like show the size


00:29:22.540 --> 00:29:23.700
of numbers and stuff.


00:29:23.700 --> 00:29:25.300
- Yeah, probably. - Yeah, cool.


00:29:25.300 --> 00:29:27.260
Yeah, I love it.


00:29:27.260 --> 00:29:28.220
This is great.


00:29:28.220 --> 00:29:29.040
Yeah.


00:29:30.860 --> 00:29:31.700
- Nope.


00:29:31.700 --> 00:29:33.580
(laughs)


00:29:33.580 --> 00:29:34.420
- All right.


00:29:34.420 --> 00:29:35.660
- I think that's all.


00:29:35.660 --> 00:29:39.660
- Okay, so I'm gonna talk about HV plot


00:29:39.660 --> 00:29:43.820
and HV plot.interactive specifically.


00:29:43.820 --> 00:29:46.460
So this is something I actually wasn't very aware of


00:29:46.460 --> 00:29:49.260
until I joined Anaconda, but one of my colleagues,


00:29:49.260 --> 00:29:52.640
Philip Roediger, who I know is on Talk Python at one point,


00:29:52.640 --> 00:29:55.740
is the developer working on this.


00:29:55.740 --> 00:29:57.620
And there's basically there's, you know,


00:29:57.620 --> 00:29:59.440
when you're working in the PyData ecosystem,


00:29:59.440 --> 00:30:01.320
There's pandas and X-Array and tasks.


00:30:01.320 --> 00:30:04.280
There's all these different data frame type interfaces,


00:30:04.280 --> 00:30:06.360
and there's a lot of plotting interfaces.


00:30:06.360 --> 00:30:09.960
And there's a project called HoloViews or HVPlot,


00:30:09.960 --> 00:30:14.800
which is a consistent plotting API that you can use.


00:30:14.800 --> 00:30:17.120
And the really cool part about this


00:30:17.120 --> 00:30:19.480
is you can swap the back end.


00:30:19.480 --> 00:30:23.400
So for example, Panda's default plot will use .plot,


00:30:23.400 --> 00:30:24.800
and it'll make a matplotlib.


00:30:24.800 --> 00:30:27.480
But if you want to use something more interactive like Bokeh


00:30:27.480 --> 00:30:30.700
or HoloViews, you can just change the backend


00:30:30.700 --> 00:30:33.760
and you can use the same commands to do that.


00:30:33.760 --> 00:30:34.600
So that's really-- - That's cool.


00:30:34.600 --> 00:30:37.280
And you set it on the data frame.


00:30:37.280 --> 00:30:38.620
- Yeah, yeah, exactly.


00:30:38.620 --> 00:30:42.420
So what you do is you import hvplot.pandas


00:30:42.420 --> 00:30:45.040
and then on the data frame, if you change the backend,


00:30:45.040 --> 00:30:47.000
you just do data frame.plot.


00:30:47.000 --> 00:30:51.080
And there's a bunch of kind of rational defaults built in


00:30:51.080 --> 00:30:53.180
for how it would show the different columns


00:30:53.180 --> 00:30:56.040
in your data frame versus the index.


00:30:56.040 --> 00:30:58.440
- I like that 'cause you could swap out the plots


00:30:58.440 --> 00:30:59.800
by writing one line,


00:30:59.800 --> 00:31:02.240
even if you've got hundreds of lines of plotting and stuff,


00:31:02.240 --> 00:31:03.880
right, and it just picks it up.


00:31:03.880 --> 00:31:04.720
- Exactly, yeah.


00:31:04.720 --> 00:31:08.000
And the common workflow for a data scientist


00:31:08.000 --> 00:31:10.960
is you're reading in a lot of input data, right?


00:31:10.960 --> 00:31:12.600
Then you wanna transform that data.


00:31:12.600 --> 00:31:17.060
So you're doing generally a lot of method chaining


00:31:17.060 --> 00:31:20.040
is a common pattern where you wanna do things like filter


00:31:20.040 --> 00:31:23.340
and select a time and maybe drop a column


00:31:23.340 --> 00:31:24.920
and do all kinds of things, right?


00:31:24.920 --> 00:31:27.000
At the end, you either want to show that data


00:31:27.000 --> 00:31:30.640
or write it somewhere or plot it, which is very common.


00:31:30.640 --> 00:31:34.600
Now this interactive part, Philip demoed this


00:31:34.600 --> 00:31:36.480
or he gave a talk at PyData Global


00:31:36.480 --> 00:31:37.940
about two months ago, I think.


00:31:37.940 --> 00:31:40.660
It kind of extends on that.


00:31:40.660 --> 00:31:42.360
And this blew my mind when I saw it.


00:31:42.360 --> 00:31:45.760
So if you had a data frame like thing


00:31:45.760 --> 00:31:48.820
and you put .interactive after it,


00:31:48.820 --> 00:31:51.240
then you can put your method chaining after that.


00:31:51.240 --> 00:31:53.240
So this is an example where you say,


00:31:53.240 --> 00:31:56.400
I want to select a discrete time,


00:31:56.400 --> 00:31:57.520
and then I want to plot it.


00:31:57.520 --> 00:32:01.840
This particular example doesn't have a kernel running in the backend,


00:32:01.840 --> 00:32:03.360
so it's not going to switch.


00:32:03.360 --> 00:32:08.180
But if you were running this in an actual live notebook,


00:32:08.180 --> 00:32:10.740
it would be changing the time on this chart.


00:32:10.740 --> 00:32:12.640
Again, this is built to work with


00:32:12.640 --> 00:32:17.660
a lot of the big data type APIs that match the Pandas API.


00:32:17.660 --> 00:32:19.520
>> Nice. For people listening,


00:32:19.520 --> 00:32:21.360
if you say.interactive and then you give


00:32:21.360 --> 00:32:23.880
the parameter that's meant to be interactive.


00:32:23.880 --> 00:32:28.040
That just puts one of those IPython widget things


00:32:28.040 --> 00:32:29.760
into your notebook right there, that's cool.


00:32:29.760 --> 00:32:34.540
>> Yeah. A related library is called panel,


00:32:34.540 --> 00:32:39.960
which is for building dashboards directly from your notebooks.


00:32:39.960 --> 00:32:42.820
You can, if you had a Jupyter notebook,


00:32:42.820 --> 00:32:45.320
you could say panel serve and pass in


00:32:45.320 --> 00:32:48.040
the notebook file and it'll make a dashboard.


00:32:48.040 --> 00:32:51.560
That's the thing I want to show in a second here.


00:32:51.560 --> 00:32:54.080
But the way the interactive works is really neat.


00:32:54.080 --> 00:32:56.480
So wherever you would put a number,


00:32:56.480 --> 00:32:58.160
you can put one of these widgets.


00:32:58.160 --> 00:33:00.520
And so you can have time selectors.


00:33:00.520 --> 00:33:03.560
You can have things like sliders.


00:33:03.560 --> 00:33:06.760
And you can have input boxes and things like that.


00:33:06.760 --> 00:33:09.120
And all you do is you would change the place where


00:33:09.120 --> 00:33:12.480
you put your input number and put one of those widgets in.


00:33:12.480 --> 00:33:15.000
And then it's sort of--


00:33:15.000 --> 00:33:17.380
I actually don't know how it works exactly under the hood.


00:33:17.380 --> 00:33:20.080
But from what I understand, you put this interactive in,


00:33:20.080 --> 00:33:22.380
and then it's capturing all the different methods


00:33:22.380 --> 00:33:23.540
that you're adding onto it.


00:33:23.540 --> 00:33:25.620
And anytime one of those widget changes,


00:33:25.620 --> 00:33:27.860
it will change everything from that point on.


00:33:27.860 --> 00:33:32.940
And so the demo here was from another panel contributor,


00:33:32.940 --> 00:33:35.800
Mark Skaf Matson, and I'm just gonna play this


00:33:35.800 --> 00:33:36.720
and try to explain it.


00:33:36.720 --> 00:33:39.000
So we have a data pipeline on the right


00:33:39.000 --> 00:33:41.060
where we've chained methods together.


00:33:41.060 --> 00:33:44.820
And what he's done here is he's just placed a widget


00:33:44.820 --> 00:33:47.120
as a parameter to these different methods


00:33:47.120 --> 00:33:48.700
on your data frame.


00:33:48.700 --> 00:33:50.900
And then this is actually a panel dashboard


00:33:50.900 --> 00:33:52.660
that's been served up in the browser.


00:33:52.660 --> 00:33:54.400
And you can see this is all generated


00:33:54.400 --> 00:33:56.940
from the little bit of code on the right.


00:33:56.940 --> 00:33:59.300
So if you wanna do interactive data analysis


00:33:59.300 --> 00:34:01.420
or exploratory data analysis,


00:34:01.420 --> 00:34:04.420
you can really do this very easily


00:34:04.420 --> 00:34:06.220
with this interactive function.


00:34:06.220 --> 00:34:10.180
And when I saw this, I kind of hit myself in the head


00:34:10.180 --> 00:34:13.580
because normally my pattern here was I had a cell at the top


00:34:13.580 --> 00:34:15.900
with a whole bunch of constants defined.


00:34:15.900 --> 00:34:18.580
And I would manually go through and, okay,


00:34:18.580 --> 00:34:21.060
change the time, start time from this time to this time,


00:34:21.060 --> 00:34:22.220
or change this parameter to this,


00:34:22.220 --> 00:34:24.100
and run it again and over and over.


00:34:24.100 --> 00:34:25.980
- And you gotta remember to run all the cells


00:34:25.980 --> 00:34:26.940
that are affected by it. - Exactly.


00:34:26.940 --> 00:34:31.500
So the fact that you can kind of do this interactively


00:34:31.500 --> 00:34:35.460
while you're working, I could see how this would just,


00:34:35.460 --> 00:34:38.600
you don't break your flow while you're trying to work.


00:34:38.600 --> 00:34:41.200
And the method chaining itself is, I really like too,


00:34:41.200 --> 00:34:44.480
because you can comment out each stage of that


00:34:44.480 --> 00:34:46.680
as you're going and debugging what you're working on.


00:34:46.680 --> 00:34:49.400
So yeah, this is really neat.


00:34:49.400 --> 00:34:51.700
And I definitely, I put a link in the show notes


00:34:51.700 --> 00:34:54.480
to the actual talk as well as this gist


00:34:54.480 --> 00:34:57.440
that Mark Skobmat's input on GitHub.


00:34:57.440 --> 00:35:00.520
And yeah, it blew my mind.


00:35:00.520 --> 00:35:01.840
It would have made my life a lot easier


00:35:01.840 --> 00:35:03.360
had I known about this earlier.


00:35:03.360 --> 00:35:07.400
- Yeah, and one of the important things I think


00:35:07.400 --> 00:35:10.440
about plotting and interactive stuff is it's not,


00:35:10.440 --> 00:35:12.920
even if your end result isn't a panel


00:35:12.920 --> 00:35:14.620
or an interactive thing,


00:35:14.620 --> 00:35:19.960
sometimes getting to see the plot,


00:35:19.960 --> 00:35:22.740
seeing the data in a visual form,


00:35:22.740 --> 00:35:25.920
helps you understand what you need to do with it.


00:35:25.920 --> 00:35:27.040
- Yeah, no, exactly.


00:35:27.040 --> 00:35:29.080
I mean, I did a lot of work in the past


00:35:29.080 --> 00:35:31.560
with time series data and time series data,


00:35:31.560 --> 00:35:32.920
especially this was sensor data,


00:35:32.920 --> 00:35:34.960
you had a lot of dropouts,


00:35:34.960 --> 00:35:38.320
you might have spikes and you're always looking at it


00:35:38.320 --> 00:35:39.480
and trying to make some judgment


00:35:39.480 --> 00:35:40.880
about your filter parameters


00:35:40.880 --> 00:35:43.880
and being able to have that feedback loop


00:35:43.880 --> 00:35:46.360
between changing some of those


00:35:46.360 --> 00:35:48.720
and seeing what the result is,


00:35:48.720 --> 00:35:50.960
is a huge game changer.


00:35:50.960 --> 00:35:51.800
- Yeah.


00:35:51.800 --> 00:35:53.260
And you can hand it off to someone else


00:35:53.260 --> 00:35:55.200
who's not writing the code and say,


00:35:55.200 --> 00:35:57.040
"Here, you play with it and you tell it,


00:35:57.040 --> 00:35:58.320
"give it to a scientist or somebody."


00:35:58.320 --> 00:35:59.880
- No, that's exactly right.


00:35:59.880 --> 00:36:01.800
That's what panel's all about is,


00:36:01.800 --> 00:36:04.040
what the biggest challenge that I always had


00:36:04.040 --> 00:36:05.480
and many data scientists have


00:36:05.480 --> 00:36:07.840
is you do all your analysis in a notebook,


00:36:07.840 --> 00:36:09.360
but then you got to show your manager


00:36:09.360 --> 00:36:11.040
or you got to show your teammates.


00:36:11.040 --> 00:36:15.360
And going from that, going through that trajectory


00:36:15.360 --> 00:36:17.520
is can be very challenging.


00:36:17.520 --> 00:36:20.180
These new tools are amazing to do that,


00:36:20.180 --> 00:36:22.760
but that's how I turned myself into a software engineer


00:36:22.760 --> 00:36:24.400
'cause that's what I wanted to do.


00:36:24.400 --> 00:36:26.280
But I went out, went down the rabbit hole


00:36:26.280 --> 00:36:30.580
and learned Flask and Dash and how to deploy web apps


00:36:30.580 --> 00:36:31.680
and all this stuff and.


00:36:31.680 --> 00:36:32.520
- Yeah.


00:36:32.520 --> 00:36:35.240
Well, I'm glad you did.


00:36:35.240 --> 00:36:37.380
- Yeah, maybe I wouldn't be here if I hadn't done that,


00:36:37.380 --> 00:36:39.260
But yeah, this is really cool.


00:36:39.260 --> 00:36:41.620
And I definitely recommend people look at this.


00:36:41.620 --> 00:36:43.900
There was also another talk, sorry, this is an extra,


00:36:43.900 --> 00:36:47.820
but there was another talk at PyData Global


00:36:47.820 --> 00:36:52.420
hosted by James Bednar, who's our head of consulting,


00:36:52.420 --> 00:36:54.020
but he leads PyViz,


00:36:54.020 --> 00:36:56.180
which is a community for visualization tools.


00:36:56.180 --> 00:37:00.860
And it was a comparison of four different dashboarding apps.


00:37:00.860 --> 00:37:05.860
So it was Panel, Dash, Voila, and Streamlit.


00:37:06.380 --> 00:37:09.780
And it just had main contributors from the four libraries


00:37:09.780 --> 00:37:12.860
talking about the benefits and pros and cons of all of them.


00:37:12.860 --> 00:37:14.900
So if anyone wants to go look at those,


00:37:14.900 --> 00:37:16.620
I definitely recommend that too.


00:37:16.620 --> 00:37:17.460
- That sounds amazing.


00:37:17.460 --> 00:37:18.980
All those libraries are great.


00:37:18.980 --> 00:37:20.180
- Yeah.


00:37:20.180 --> 00:37:21.380
- Nice, thanks.


00:37:21.380 --> 00:37:22.220
- No problem.


00:37:22.220 --> 00:37:28.180
- Speaking of those extra parts of the podcast


00:37:28.180 --> 00:37:31.340
that make the podcast longer, we should do some extras.


00:37:31.340 --> 00:37:32.780
(laughing)


00:37:32.780 --> 00:37:34.980
- We should, we should do some extras.


00:37:34.980 --> 00:37:36.180
Got any?


00:37:36.180 --> 00:37:37.800
I don't have anything extra.


00:37:37.800 --> 00:37:40.100
- Matt, how about you?


00:37:40.100 --> 00:37:41.840
- Yeah, two things.


00:37:41.840 --> 00:37:45.120
So first, if you can show my screen,


00:37:45.120 --> 00:37:48.700
last year, Atacana hired the Piston developers.


00:37:48.700 --> 00:37:53.700
Piston is a faster implementation fork of CPython.


00:37:53.700 --> 00:37:55.900
I think it was at Instagram first, I can't recall.


00:37:55.900 --> 00:37:58.600
But anyway, right before the holidays,


00:37:58.600 --> 00:38:01.180
they released pre-compiled packages


00:38:01.180 --> 00:38:02.980
for many of, a couple hundred


00:38:02.980 --> 00:38:04.860
of the most popular Python packages.


00:38:04.860 --> 00:38:07.580
So if you're interested in trying Piston,


00:38:07.580 --> 00:38:10.340
I put a link to their blog post in here.


00:38:10.340 --> 00:38:12.180
They're using Conda right now.


00:38:12.180 --> 00:38:14.340
They were able to leverage a lot of the Conda Forge recipes


00:38:14.340 --> 00:38:15.940
for building these.


00:38:15.940 --> 00:38:17.900
This is that binary compatibility challenge


00:38:17.900 --> 00:38:18.940
that we talked about earlier.


00:38:18.940 --> 00:38:23.420
So I know the team's looking for feedback on that.


00:38:23.420 --> 00:38:25.260
If you want to try that, feel free to go there.


00:38:25.260 --> 00:38:27.740
And it mentions in the blog that they're working on pip,


00:38:27.740 --> 00:38:29.060
but that's a little harder too,


00:38:29.060 --> 00:38:33.380
just because of how the build stages for all the packages


00:38:33.380 --> 00:38:34.460
aren't centralized with pip.


00:38:34.460 --> 00:38:37.780
So it's a little more challenging for them to do that.


00:38:37.780 --> 00:38:40.320
And then just the last thing is,


00:38:40.320 --> 00:38:44.300
I don't wanna be too much of a salesman here,


00:38:44.300 --> 00:38:46.340
but we are hiring.


00:38:46.340 --> 00:38:48.020
It's an amazing place to work.


00:38:48.020 --> 00:38:50.460
And I definitely recommend anyone to go check it out


00:38:50.460 --> 00:38:51.560
if they're interested.


00:38:51.560 --> 00:38:54.020
So.


00:38:54.020 --> 00:38:54.860
- Fantastic.


00:38:54.860 --> 00:38:55.860
Yeah, you put a link in the show notes


00:38:55.860 --> 00:38:56.700
if people wanna.


00:38:56.700 --> 00:39:00.200
- Yeah, it's anaconda.com/careers.


00:39:00.200 --> 00:39:02.040
And we're doing a lot of cool stuff and growing.


00:39:02.040 --> 00:39:06.980
So if anyone's looking for work in data science


00:39:06.980 --> 00:39:09.860
or just software and building out some of the things


00:39:09.860 --> 00:39:12.820
we're doing to try to help the open source community


00:39:12.820 --> 00:39:15.220
and bridge that gap, I spelled it wrong,


00:39:15.220 --> 00:39:17.940
bridge that gap between enterprise and open source


00:39:17.940 --> 00:39:20.580
and data science in particular, definitely check that out.


00:39:20.580 --> 00:39:22.300
- Yeah, it definitely seems like a fun place to work.


00:39:22.300 --> 00:39:23.340
So cool.


00:39:23.340 --> 00:39:27.020
People looking for a change or for a fun Python job.


00:39:27.020 --> 00:39:28.740
- Yeah, we were both surprised too.


00:39:28.740 --> 00:39:29.700
- Yeah, cool.


00:39:29.700 --> 00:39:31.260
People do reach out to Brian and me and saying,


00:39:31.260 --> 00:39:34.300
hey, I really wanna get a Python job.


00:39:34.300 --> 00:39:36.900
I'm doing other stuff, but how do I get a Python job?


00:39:36.900 --> 00:39:37.740
Help us out.


00:39:37.740 --> 00:39:38.780
So we don't know,


00:39:38.780 --> 00:39:42.460
but we can recommend places like Anaconda for sure.


00:39:42.460 --> 00:39:44.500
- Yeah, it looks like there's about 40 jobs right now.


00:39:44.500 --> 00:39:46.700
And so check it out.


00:39:46.700 --> 00:39:47.540
- Fantastic.


00:39:47.540 --> 00:39:48.460
Oh, wow, that's awesome.


00:39:48.460 --> 00:39:51.180
All right, well,


00:39:51.180 --> 00:39:54.660
Brian, would it surprise you if I had some extra things?


00:39:54.660 --> 00:39:56.540
- It would surprise me if you didn't.


00:39:56.540 --> 00:39:57.780
(laughing)


00:39:57.780 --> 00:39:59.100
- All right, first of all,


00:39:59.100 --> 00:40:01.940
I want to say congratulations to Will McGugan.


00:40:01.940 --> 00:40:05.180
We have gone the entire show without mentioning


00:40:05.180 --> 00:40:07.260
Rich or Textual.


00:40:07.260 --> 00:40:08.100
Can you imagine?


00:40:08.100 --> 00:40:08.920
- Almost.


00:40:08.920 --> 00:40:09.760
(laughing)


00:40:09.760 --> 00:40:10.600
- But no.


00:40:10.600 --> 00:40:12.140
- Only 'cause I knew you were gonna talk about this,


00:40:12.140 --> 00:40:13.740
otherwise I would have thrown it in.


00:40:13.740 --> 00:40:17.620
- Yeah, so Will, last year or a while ago,


00:40:17.620 --> 00:40:19.820
I don't know the exact number of months back,


00:40:19.820 --> 00:40:21.580
but he was planning to take a year off of work


00:40:21.580 --> 00:40:24.740
and just focus on Rich and Textual.


00:40:24.740 --> 00:40:26.540
It was getting so much traction.


00:40:26.540 --> 00:40:29.420
He's like, I'm just going to live off my savings


00:40:29.420 --> 00:40:31.820
and a small amount of money from the GitHub sponsorships


00:40:31.820 --> 00:40:34.760
and really see what I can do trying that.


00:40:34.760 --> 00:40:38.500
Well, it turns out he has plans


00:40:38.500 --> 00:40:40.740
to build some really cool stuff


00:40:40.740 --> 00:40:43.660
and has actually all based around Rich


00:40:43.660 --> 00:40:45.800
and Textual in particular.


00:40:45.800 --> 00:40:49.400
And he has raised a first round of funding


00:40:49.400 --> 00:40:53.860
and started a company called textualize.io.


00:40:53.860 --> 00:40:55.180
How cool is that?


00:40:55.180 --> 00:40:56.940
- Well, we don't know because we don't know


00:40:56.940 --> 00:40:58.220
what it's gonna do.


00:40:58.220 --> 00:41:00.580
- All you do is if you go there, it's like a command prompt.


00:41:00.580 --> 00:41:03.300
You just enter your email address.


00:41:03.300 --> 00:41:05.860
That's good, enter.


00:41:05.860 --> 00:41:07.180
If something happens, let's find out what happens.


00:41:07.180 --> 00:41:09.140
Yes, I'm confirmed.


00:41:09.140 --> 00:41:11.540
Basically, just get notified about when Textualize


00:41:11.540 --> 00:41:14.000
comes out of stealth mode, but congrats to Will.


00:41:14.000 --> 00:41:14.940
That's fantastic.


00:41:14.940 --> 00:41:17.660
Another one, we've spoken about tenacity.


00:41:17.660 --> 00:41:18.660
Remember that, Brian?


00:41:18.660 --> 00:41:19.500
- Yeah.


00:41:19.500 --> 00:41:20.340
- So tenacity is cool.


00:41:20.340 --> 00:41:23.340
You can say, here's a function that may run into trouble.


00:41:23.340 --> 00:41:27.540
if you just put @tenacity.retry on it,


00:41:27.540 --> 00:41:30.180
and it crashes, it'll just try it again until it succeeds.


00:41:30.180 --> 00:41:32.420
That's probably a bad idea in production.


00:41:32.420 --> 00:41:35.100
So you might wanna put something like stop after this,


00:41:35.100 --> 00:41:38.100
or do a little delay between them, or do both.


00:41:38.100 --> 00:41:39.860
I was having a race condition.


00:41:39.860 --> 00:41:43.940
We're trying to track when people are attempting to hack,


00:41:43.940 --> 00:41:45.940
talk Python, the training site,


00:41:45.940 --> 00:41:47.980
the Python byte site, and all that.


00:41:47.980 --> 00:41:50.300
And it turns out when they're trying to attack your site,


00:41:50.300 --> 00:41:51.380
they're not even nice about it.


00:41:51.380 --> 00:41:54.020
they hit you with a botnet of all sorts of stuff.


00:41:54.020 --> 00:41:55.860
And like lots of stuff happens at once


00:41:55.860 --> 00:41:57.620
and there was this race condition


00:41:57.620 --> 00:41:58.460
that was causing trouble.


00:41:58.460 --> 00:42:02.020
So I put retry, a tenacity.retry, boom,


00:42:02.020 --> 00:42:02.860
solved it perfectly.


00:42:02.860 --> 00:42:03.680
So I just wanted to say,


00:42:03.680 --> 00:42:05.260
I finally got a chance to use this


00:42:05.260 --> 00:42:07.540
to solve some problems, which was pretty cool.


00:42:07.540 --> 00:42:08.820
- That's really cool.


00:42:08.820 --> 00:42:10.900
The other one that's similar to this, which I've used,


00:42:10.900 --> 00:42:12.860
and I think, I don't know if you've used Brian,


00:42:12.860 --> 00:42:15.220
but it's called pytest Flaky.


00:42:15.220 --> 00:42:16.700
- Yeah. - And it's awesome.


00:42:16.700 --> 00:42:18.020
- Nice. - 'Cause I was working


00:42:18.020 --> 00:42:20.420
with this time series data historian.


00:42:20.420 --> 00:42:22.940
I had a bunch of integration tests in my last job,


00:42:22.940 --> 00:42:25.660
but network stuff, it would drop out occasionally.


00:42:25.660 --> 00:42:28.900
And so you can do very similar type things


00:42:28.900 --> 00:42:33.020
and wrap your test in an @flaky decorator


00:42:33.020 --> 00:42:36.860
and do similar type stuff and give it three tries


00:42:36.860 --> 00:42:39.180
or something before you make it fail.


00:42:39.180 --> 00:42:41.060
- Yeah, exactly, that's cool.


00:42:41.060 --> 00:42:42.380
I think mine does three tries


00:42:42.380 --> 00:42:45.380
and it's like randomly a couple of second delay or something.


00:42:45.380 --> 00:42:49.140
Remember that part, Brian, where we talked about,


00:42:49.140 --> 00:42:50.540
It's really cool if people are in the audience


00:42:50.540 --> 00:42:52.300
while we talk about stuff and then give a little feedback.


00:42:52.300 --> 00:42:54.060
So Will McGuigan says, "Hey, thanks guys.


00:42:54.060 --> 00:42:54.940
"Can't wait to tell you about it."


00:42:54.940 --> 00:42:55.780
Yeah, congrats, Will.


00:42:55.780 --> 00:42:56.600
That's awesome.


00:42:56.600 --> 00:42:57.620
Glad to see you out there.


00:42:57.620 --> 00:42:59.460
All right, a couple of other things.


00:42:59.460 --> 00:43:02.620
Did you know that GitHub has


00:43:02.620 --> 00:43:04.620
a whole new project experience?


00:43:04.620 --> 00:43:05.460
That's pretty awesome.


00:43:05.460 --> 00:43:07.060
Have you seen this?


00:43:07.060 --> 00:43:08.300
- I haven't.


00:43:08.300 --> 00:43:10.220
- So you know how it's like this Kanban board,


00:43:10.220 --> 00:43:13.100
Kanban board, where you have like columns


00:43:13.100 --> 00:43:14.940
that you can move your issues between them?


00:43:14.940 --> 00:43:17.620
So just last week, they came out with this thing


00:43:17.620 --> 00:43:22.260
called a beta projects where it still can be that,


00:43:22.260 --> 00:43:24.460
or it can be like an Excel sort of view


00:43:24.460 --> 00:43:26.820
where you have little drop down combo boxes.


00:43:26.820 --> 00:43:28.300
Like I wanna move this one to this column


00:43:28.300 --> 00:43:30.820
by going through that mode or as a board,


00:43:30.820 --> 00:43:34.900
or you can categorize based on some specification,


00:43:34.900 --> 00:43:36.820
like show me all the stuff that's in progress


00:43:36.820 --> 00:43:39.340
and then give me that as an Excel sheet.


00:43:39.340 --> 00:43:42.340
And all these different views you have for automation


00:43:42.340 --> 00:43:44.700
and then like there's APIs


00:43:44.700 --> 00:43:46.080
and all sorts of neat stuff in there.


00:43:46.080 --> 00:43:48.960
So if you've been using GitHub projects to do stuff,


00:43:48.960 --> 00:43:49.920
you can check this out.


00:43:49.920 --> 00:43:54.240
It looks like you could move a lot more work towards that


00:43:54.240 --> 00:43:57.400
on the project management side of software than you used to.


00:43:57.400 --> 00:43:58.320
- This is really neat.


00:43:58.320 --> 00:44:02.240
Yeah, in my previous job, I was using Azure DevOps.


00:44:02.240 --> 00:44:03.920
I was always wondering when some of those features


00:44:03.920 --> 00:44:04.880
might move to GitHub.


00:44:04.880 --> 00:44:06.280
I don't know if that's what happened here,


00:44:06.280 --> 00:44:09.560
but being able to have this type of project management


00:44:09.560 --> 00:44:14.560
in there for this type of things, it's really, really great.


00:44:14.560 --> 00:44:16.040
- Yeah, super cool.


00:44:16.040 --> 00:44:17.840
- Yeah, one of the things I love about stuff like this


00:44:17.840 --> 00:44:21.200
is because even, I mean, yes, a lot of companies


00:44:21.200 --> 00:44:24.880
do their project management on, or projects on,


00:44:24.880 --> 00:44:26.920
in GitHub or places like that.


00:44:26.920 --> 00:44:31.320
But also open source projects often have,


00:44:31.320 --> 00:44:35.400
they're often have the same needs of project management


00:44:35.400 --> 00:44:39.160
as private commercial projects, so.


00:44:39.160 --> 00:44:40.000
- Yeah.


00:44:40.000 --> 00:44:42.840
- Yeah, I personally, I only have a few open source


00:44:42.840 --> 00:44:47.880
small projects that are kind of personal and no one would probably want to use them.


00:44:47.880 --> 00:44:55.720
But even just keeping notes about to-dos and future stuff, it would be really nice.


00:44:55.720 --> 00:44:57.680
Just for future you, if nothing else.


00:44:57.680 --> 00:44:58.680
Right.


00:44:58.680 --> 00:44:59.680
Yeah.


00:44:59.680 --> 00:45:00.680
Awesome.


00:45:00.680 --> 00:45:01.680
Okay.


00:45:01.680 --> 00:45:02.680
So this is cool.


00:45:02.680 --> 00:45:03.680
Now, the last...


00:45:03.680 --> 00:45:05.560
Yeah, this last thing I want to talk about is Markdown.


00:45:05.560 --> 00:45:11.640
So Roger Terrell turned me on to this.


00:45:11.640 --> 00:45:14.880
is this new Markdown editor,


00:45:14.880 --> 00:45:19.360
that's cross platform, yes, cross platform called Typora.


00:45:19.360 --> 00:45:24.360
And we all spend so much time in Markdown that just, wow,


00:45:24.360 --> 00:45:25.560
this thing is incredible.


00:45:25.560 --> 00:45:27.000
It's not super expensive


00:45:27.000 --> 00:45:29.760
and it looks like a standard Markdown editor.


00:45:29.760 --> 00:45:34.320
So you write Markdown and it gives you a whizzy wig,


00:45:34.320 --> 00:45:37.540
you know, what you see is what you get style of programming,


00:45:37.540 --> 00:45:40.960
which is not totally unexpected, right?


00:45:40.960 --> 00:45:43.460
But what is super cool is the way


00:45:43.460 --> 00:45:44.620
in which you interact with it.


00:45:44.620 --> 00:45:47.260
And actually I am going to show you real quick.


00:45:47.260 --> 00:45:50.820
So you can see it and then you can tell people like,


00:45:50.820 --> 00:45:52.420
what do you think about this?


00:45:52.420 --> 00:45:54.240
Here, I think that's it.


00:45:54.240 --> 00:45:57.500
Put that back.


00:45:57.500 --> 00:45:58.340
- Waiting.


00:45:58.340 --> 00:45:59.160
- There, okay, yeah.


00:45:59.160 --> 00:46:02.020
So here's a markdown file for my course,


00:46:02.020 --> 00:46:04.100
just the practices and whatever.


00:46:04.100 --> 00:46:04.940
You can say, you know what,


00:46:04.940 --> 00:46:08.260
I would like to view that in code style, right?


00:46:08.260 --> 00:46:09.100
Well, that's kind of cool.


00:46:09.100 --> 00:46:09.920
We wanna edit this.


00:46:09.920 --> 00:46:11.720
you click here and it becomes--


00:46:11.720 --> 00:46:12.960
- Ooh, comes Markdown.


00:46:12.960 --> 00:46:15.340
- Becomes Markdown, but this is a boring file.


00:46:15.340 --> 00:46:19.200
So let's see about, it has a whole file system


00:46:19.200 --> 00:46:21.480
that navigates like through your other Markdown stuff,


00:46:21.480 --> 00:46:24.320
hierarchically, so like here, chapter eight's a good one.


00:46:24.320 --> 00:46:26.500
So we go over to chapter eight on this,


00:46:26.500 --> 00:46:27.820
and now you can see some more stuff.


00:46:27.820 --> 00:46:30.300
Like you can go to set these headings and whatnot,


00:46:30.300 --> 00:46:34.140
but if you go to images, like you can set a caption


00:46:34.140 --> 00:46:35.800
and then you could even change the image,


00:46:35.800 --> 00:46:38.180
like right here, if it were a PNG, it's not,


00:46:38.180 --> 00:46:39.360
but so I'll put it back as JPEG,


00:46:39.360 --> 00:46:41.360
and then it comes back.


00:46:41.360 --> 00:46:43.520
You can come down and write a code fence.


00:46:43.520 --> 00:46:47.400
If you use the right symbol,


00:46:47.400 --> 00:46:52.240
and you can say, def a, right, whatever.


00:46:52.240 --> 00:46:53.640
And then you pick a language.


00:46:53.640 --> 00:46:57.240
Isn't that dope?


00:46:57.240 --> 00:46:59.120
Oh, this is so good.


00:46:59.120 --> 00:47:01.880
So if you end up writing a lot of Markdown,


00:47:01.880 --> 00:47:02.720
and if you need to get back,


00:47:02.720 --> 00:47:06.080
you just go back and switch back to raw Markdown


00:47:06.080 --> 00:47:07.440
and then go back to this fancy style.


00:47:07.440 --> 00:47:11.720
I think this is really a cool way to work on Markdown.


00:47:11.720 --> 00:47:15.120
I'm actually working on a book with Roger


00:47:15.120 --> 00:47:18.400
and it's got tons of Markdown


00:47:18.400 --> 00:47:21.120
and it's been a real joy to actually use this thing on it.


00:47:21.120 --> 00:47:22.680
So yeah.


00:47:22.680 --> 00:47:24.240
- Does it have AI mode?


00:47:24.240 --> 00:47:26.400
Probably not.


00:47:26.400 --> 00:47:28.640
- I don't know about that, but it has themes.


00:47:28.640 --> 00:47:31.640
I can do like a night mode


00:47:31.640 --> 00:47:34.000
or I can do like a newspaper mode or, you know,


00:47:34.000 --> 00:47:34.840
take your pick.


00:47:34.840 --> 00:47:35.700
It's pretty cool.


00:47:36.920 --> 00:47:38.960
The weirdo grad student in me is upset


00:47:38.960 --> 00:47:41.040
that this isn't LaTeX.


00:47:41.040 --> 00:47:42.320
- It has built-in LaTeX.


00:47:42.320 --> 00:47:44.680
- Oh, it's not my mustang then.


00:47:44.680 --> 00:47:46.640
- Yeah, you can do like inline LaTeX


00:47:46.640 --> 00:47:49.680
and there's a bunch of settings you can set for the LaTeX.


00:47:49.680 --> 00:47:53.040
It's got a whole math section in there.


00:47:53.040 --> 00:47:54.400
- Oh, that's sweet, okay.


00:47:54.400 --> 00:47:55.240
- Yeah, let's see it.


00:47:55.240 --> 00:47:57.360
- So am I the only person that went all the way


00:47:57.360 --> 00:47:59.440
through college pronouncing it LaTeX?


00:47:59.440 --> 00:48:00.880
- I did too, but I just learned


00:48:00.880 --> 00:48:02.520
that the cool way of saying LaTeX.


00:48:02.520 --> 00:48:03.840
- It's LaTeX, yeah.


00:48:03.840 --> 00:48:06.880
It's French, no, I don't know.


00:48:06.880 --> 00:48:10.320
- No, yeah, it has support for like chemistry settings,


00:48:10.320 --> 00:48:13.080
like inline LaTeX and math and all sorts of good stuff.


00:48:13.080 --> 00:48:15.200
So yeah, I'm telling you, this thing's pretty slick.


00:48:15.200 --> 00:48:16.920
- That's really cool.


00:48:16.920 --> 00:48:19.600
- All right, well, I gotta do my screen share back


00:48:19.600 --> 00:48:21.920
because so you all can see the joke


00:48:21.920 --> 00:48:25.700
because the joke is very good and we're gonna cover it.


00:48:25.700 --> 00:48:27.800
- Where's the joke? - But it's at the end.


00:48:27.800 --> 00:48:29.600
It's at the end, so if people don't wanna listen to the joke


00:48:29.600 --> 00:48:31.160
they don't have to.


00:48:31.160 --> 00:48:32.400
Brian, I blew it.


00:48:32.400 --> 00:48:35.320
- You did? - I blew it, I blew it.


00:48:35.320 --> 00:48:37.000
Before we move off the Markdown thing though,


00:48:37.000 --> 00:48:39.240
Anthony Shaw says, "Editorial for iPhone and iPad


00:48:39.240 --> 00:48:40.420
is really nice too."


00:48:40.420 --> 00:48:44.120
Cool.


00:48:44.120 --> 00:48:47.580
So, but let's do the joke.


00:48:47.580 --> 00:48:50.920
So I blew it because I was saving this all year.


00:48:50.920 --> 00:48:53.680
I saw this like last March and I'm like,


00:48:53.680 --> 00:48:56.080
"This is gonna be so good for Christmas."


00:48:56.080 --> 00:48:58.800
And then we kind of like had already recorded the episode.


00:48:58.800 --> 00:48:59.720
We're not gonna do it.


00:48:59.720 --> 00:49:00.800
We'll just take a break over.


00:49:00.800 --> 00:49:02.000
So we didn't have a chance to do it.


00:49:02.000 --> 00:49:03.600
So- - Let's do it now.


00:49:03.600 --> 00:49:04.880
People are gonna have to go back


00:49:04.880 --> 00:49:07.000
just a little tiny bit for this one.


00:49:07.000 --> 00:49:08.300
Are you ready?


00:49:08.300 --> 00:49:09.140
- Yes.


00:49:09.140 --> 00:49:10.400
- Matt, you ready?


00:49:10.400 --> 00:49:12.040
- Yeah.


00:49:12.040 --> 00:49:14.040
- So this goes, this sort of a data,


00:49:14.040 --> 00:49:16.100
database developer type thing here.


00:49:16.100 --> 00:49:21.800
And it's on a, I don't know why it's on a printout.


00:49:21.800 --> 00:49:26.620
Anyway, it's called SQL clause, as in SQL clause.


00:49:26.620 --> 00:49:29.720
So it's, he's making a database, he's sorting it twice,


00:49:29.720 --> 00:49:33.720
select star from contacts where behavior equals nice.


00:49:33.720 --> 00:49:35.560
SQL clause is coming to town.


00:49:35.560 --> 00:49:38.460
- Nice.


00:49:38.460 --> 00:49:40.940
- It would have been so good for Christmas,


00:49:40.940 --> 00:49:42.800
but we can't keep it another year.


00:49:42.800 --> 00:49:43.640
I gotta get it out of our telephone.


00:49:43.640 --> 00:49:44.480
- You gotta sing it.


00:49:44.480 --> 00:49:47.360
♪ SQL clause is coming to town ♪


00:49:47.360 --> 00:49:48.520
- Yep, exactly.


00:49:48.520 --> 00:49:51.640
- Okay, I wanna share a joke


00:49:51.640 --> 00:49:53.400
that I don't have a picture for.


00:49:53.400 --> 00:49:54.520
- All right, do it.


00:49:54.520 --> 00:49:57.120
- But my daughter made this up last week.


00:49:57.120 --> 00:49:57.960
I think she made it up,


00:49:57.960 --> 00:50:00.360
but it's just been cracking me up for,


00:50:00.360 --> 00:50:02.220
and I've been telling it to everybody.


00:50:02.220 --> 00:50:03.480
So it's a short one.


00:50:03.480 --> 00:50:07.440
Imagine you walk into a room


00:50:07.440 --> 00:50:10.400
and there's a line of people all lined up on one side.


00:50:10.400 --> 00:50:13.540
That's it.


00:50:13.540 --> 00:50:15.680
That's the punchline.


00:50:15.680 --> 00:50:17.780
- I love it.


00:50:17.780 --> 00:50:20.400
Nice.


00:50:20.400 --> 00:50:22.200
We've got it.


00:50:22.200 --> 00:50:25.920
- We had my cookie candle last time.


00:50:25.920 --> 00:50:28.480
my, I can't know these cookies.


00:50:28.480 --> 00:50:30.920
- We've got a dad joke of the day channel


00:50:30.920 --> 00:50:33.160
on our Slack at work and it's,


00:50:33.160 --> 00:50:34.960
it makes me oof every time.


00:50:34.960 --> 00:50:39.160
- Nice.


00:50:39.160 --> 00:50:41.000
- Nice, okay.


00:50:41.000 --> 00:50:43.360
All right, nice to see everybody.


00:50:43.360 --> 00:50:44.840
Thanks Matt for joining the show.


00:50:44.840 --> 00:50:46.040
- Thank you for having me.


00:50:46.040 --> 00:50:47.520
- Good to see you Michael again as always.


00:50:47.520 --> 00:50:49.120
- Yeah, good to see you.


00:50:49.120 --> 00:50:50.560
Thank you, thank you.


00:50:50.560 --> 00:50:51.400
Thanks Matt.


00:50:51.400 --> 00:50:52.440
- No problem, thanks.


00:50:52.440 --> 00:51:02.440
[BLANK_AUDIO]

