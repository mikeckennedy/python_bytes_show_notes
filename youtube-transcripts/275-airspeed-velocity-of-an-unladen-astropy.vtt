WEBVTT

00:00:00.000 --> 00:00:08.880
Hi, everybody. Welcome to the live stream of Python Bytes. We'll get kicked off. Get


00:00:08.880 --> 00:00:15.620
this started right away. Hello, and welcome to Python Bytes, where we deliver Python news


00:00:15.620 --> 00:00:22.680
and headlines directly to your earbuds. This is episode 275, recorded March 15th. And I


00:00:22.680 --> 00:00:23.680
am Brian Okken.


00:00:23.680 --> 00:00:24.680
I am Michael Kennedy.


00:00:24.680 --> 00:00:25.680
And I'm Emily Morehouse.


00:00:25.680 --> 00:00:27.720
And I'm Emily Morehouse.


00:00:27.720 --> 00:00:29.260
- Yay, thanks for coming.


00:00:29.260 --> 00:00:33.460
I also wanna thank, give a shout out to


00:00:33.460 --> 00:00:37.840
Microsoft for Startup Founders Hub,


00:00:37.840 --> 00:00:40.340
and we'll learn more about them later in the show.


00:00:40.340 --> 00:00:44.960
So welcome, Emily.


00:00:44.960 --> 00:00:48.440
Can, if people aren't familiar with who you are,


00:00:48.440 --> 00:00:50.020
who are you?


00:00:50.020 --> 00:00:50.860
- Yeah, of course.


00:00:50.860 --> 00:00:53.720
So I'm Emily, I am the Director of Engineering


00:00:53.720 --> 00:00:56.080
and one of the co-founders of CuddleSoft.


00:00:56.080 --> 00:00:58.680
So we are a creative product development agency


00:00:58.680 --> 00:01:02.960
focused on web, mobile, IoT, and the cloud.


00:01:02.960 --> 00:01:05.640
I'm also a Python core developer


00:01:05.640 --> 00:01:08.660
and the PyCon conference chair for this year.


00:01:08.660 --> 00:01:10.480
- Awesome.


00:01:10.480 --> 00:01:11.300
- That is awesome.


00:01:11.300 --> 00:01:12.520
Said another way, you're quite busy.


00:01:12.520 --> 00:01:13.880
(laughing)


00:01:13.880 --> 00:01:15.440
- Yeah, I also have a 10 month old,


00:01:15.440 --> 00:01:17.400
so yeah, not a lot going on in my life.


00:01:17.400 --> 00:01:20.680
- Yeah, no, a lot of time to bend to watch Netflix.


00:01:20.680 --> 00:01:24.560
So are you pretty busy for PyCon already?


00:01:24.560 --> 00:01:27.960
- So interestingly enough, this is kind of the time


00:01:27.960 --> 00:01:29.860
that goes into autopilot in a way,


00:01:29.860 --> 00:01:32.180
you know, like most things are already set in motion


00:01:32.180 --> 00:01:33.300
that need to be set in motion.


00:01:33.300 --> 00:01:36.820
So it's really, we're working on the fun stuff right now,


00:01:36.820 --> 00:01:40.220
like, you know, speaker and staff gifts and stuff like that.


00:01:40.220 --> 00:01:42.960
But otherwise it's pretty smooth sailing


00:01:42.960 --> 00:01:45.780
and just sitting back and watching COVID numbers


00:01:45.780 --> 00:01:49.620
and hoping that we don't get another spike before April.


00:01:49.620 --> 00:01:54.180
Fingers crossed this will be the first PyCon after COVID hit.


00:01:54.180 --> 00:01:55.620
So hopefully everything goes great.


00:01:55.620 --> 00:01:56.980
I know people are excited.


00:01:56.980 --> 00:01:57.480
>> Yeah.


00:01:57.480 --> 00:01:59.320
>> Awesome.


00:01:59.320 --> 00:02:01.860
Well, Brian, do I have the first one?


00:02:01.860 --> 00:02:02.420
>> You do.


00:02:02.420 --> 00:02:05.060
>> Do we have to wait for me or can I talk about this?


00:02:05.060 --> 00:02:06.740
>> Yeah, so I'll wait.


00:02:06.740 --> 00:02:09.220
>> Well, let's wait.


00:02:09.220 --> 00:02:11.220
I'm very excited to talk about this one, actually.


00:02:11.220 --> 00:02:13.220
This one comes from Frederick Aberpill.


00:02:13.220 --> 00:02:15.540
I believe he listens to the show a lot.


00:02:15.540 --> 00:02:16.660
So hello, Frederick.


00:02:16.660 --> 00:02:17.460
Nice work on this.


00:02:18.820 --> 00:02:22.820
I was working on the Python Bytes website of all things,


00:02:22.820 --> 00:02:26.080
and I wanted to do some stuff with like uploading mp3s


00:02:26.080 --> 00:02:29.620
and having a bunch of automation happen behind the scenes.


00:02:29.620 --> 00:02:33.280
And one of the things I did not too long ago


00:02:33.280 --> 00:02:35.620
is switch over to an async database.


00:02:35.620 --> 00:02:37.240
I think we talked about moving to Beanie


00:02:37.240 --> 00:02:40.240
and some of the cool stuff I'm doing to like halfway move to async,


00:02:40.240 --> 00:02:42.540
but not all the way yet, not till we're quite ready.


00:02:42.540 --> 00:02:46.620
But as part of that, I'm like, well, all this file stuff,


00:02:46.620 --> 00:02:49.080
this is kind of slow, like this is a couple of seconds.


00:02:49.080 --> 00:02:52.080
Is there a way to sort of set the web server free


00:02:52.080 --> 00:02:55.260
while we're doing this work?


00:02:55.260 --> 00:02:59.000
Right? And some of that involved calling subprocesses.


00:02:59.000 --> 00:03:03.880
So I thought, well, maybe there's some third party package


00:03:03.880 --> 00:03:07.480
like AIO files that I could use


00:03:07.480 --> 00:03:10.060
that would allow me to asynchronously do subprocesses


00:03:10.060 --> 00:03:12.520
instead of the subprocess module.


00:03:12.520 --> 00:03:13.780
So I did a quick Google search


00:03:13.780 --> 00:03:15.740
and I came across Frederick's article here


00:03:15.740 --> 00:03:21.980
and much to my surprise, I don't know if you're aware of this, but built in async.io has async


00:03:21.980 --> 00:03:29.420
sub process management already. And that's cool. Yeah. Yeah. Emily, have you played with this any?


00:03:29.420 --> 00:03:34.860
Yeah, no, I actually think I've used this exact blog post, which is super funny.


00:03:34.860 --> 00:03:43.260
I was actually just recently writing, like, CLI regression tests and PI tests. And you basically


00:03:43.260 --> 00:03:47.500
like test running two different servers and I was like fighting with subprocess to get it to work.


00:03:47.500 --> 00:03:52.060
I don't think they were using a new enough version that I could use async await but I


00:03:52.060 --> 00:03:57.900
definitely remember referencing this. Yeah, very cool. So you can just say async io the module


00:03:57.900 --> 00:04:05.420
dot create subprocess exec for just running it or if you need to sort of follow along and see


00:04:05.420 --> 00:04:10.620
what's going on you can use even the shell one that requires shell commands like a cd or an ls


00:04:10.620 --> 00:04:15.220
type of thing, and then you could just grab the standard out


00:04:15.220 --> 00:04:19.520
from set that to be async.io subprocess.pipe and so on.


00:04:19.520 --> 00:04:22.020
You can get the results out of it and everything.


00:04:22.020 --> 00:04:24.720
So you just do things like await,


00:04:24.720 --> 00:04:28.720
creating a subprocess with a shell or execing it and so on.


00:04:28.720 --> 00:04:31.720
Then you can await communicating with it,


00:04:31.720 --> 00:04:34.220
which I think is pretty cool and so on.


00:04:34.220 --> 00:04:37.020
So not a whole lot more to say than other than


00:04:37.020 --> 00:04:39.020
if you're doing stuff with subprocess


00:04:39.020 --> 00:04:42.140
and you're moving already into other areas


00:04:42.140 --> 00:04:44.620
where async and await are very doable,


00:04:44.620 --> 00:04:49.620
think FastAPI, SQL model, the SQLAlchemy 1.4 or later,


00:04:49.620 --> 00:04:53.180
where you're already doing a bunch of other async stuff,


00:04:53.180 --> 00:04:55.020
go ahead and write this in the async way


00:04:55.020 --> 00:04:58.580
so it just sort of flows into the rest of what you're doing.


00:04:58.580 --> 00:05:00.060
- That's pretty cool.


00:05:00.060 --> 00:05:04.180
This is from like 2017, is it an older article, isn't it?


00:05:04.180 --> 00:05:05.020
- Yeah, it looks like it.


00:05:05.020 --> 00:05:08.860
Yeah, I mean, it's news to me, maybe not news to the world.


00:05:08.860 --> 00:05:12.260
Like Emily said, she was already working with it previously.


00:05:12.260 --> 00:05:13.580
But yeah, I think it's great.


00:05:13.580 --> 00:05:17.260
>> Right. Well, the subprocess communicator is sort of people


00:05:17.260 --> 00:05:19.660
often shifted over to just run.


00:05:19.660 --> 00:05:22.460
So I'm hoping there's a run version of that too.


00:05:22.460 --> 00:05:25.460
>> Hopefully, yes.


00:05:25.460 --> 00:05:26.580
>> Anyway. >> Cool.


00:05:26.580 --> 00:05:27.340
>> Indeed. All right.


00:05:27.340 --> 00:05:31.180
Well, going to explain some stuff to us, Brian.


00:05:31.180 --> 00:05:34.580
I see the author of what you're about to talk about


00:05:34.580 --> 00:05:35.620
out in the audience as well.


00:05:35.620 --> 00:05:37.020
>> Really? >> Yes.


00:05:37.020 --> 00:05:38.820
>> Also, that's very cool.


00:05:38.820 --> 00:05:40.780
- Well, this is definitely an exciting one, yeah?


00:05:40.780 --> 00:05:43.300
- Yeah, so this comes from, this is TypeSplainer


00:05:43.300 --> 00:05:44.940
and let me splain it to you.


00:05:44.940 --> 00:05:49.380
So, I don't know, it's just this cool thing.


00:05:49.380 --> 00:05:50.500
It popped up last week.


00:05:50.500 --> 00:05:55.500
We saw it, this is from Arian, sorry, Arian Malik Wasi.


00:05:55.500 --> 00:05:59.780
It's a pretty cool name, by the way.


00:05:59.780 --> 00:06:03.580
But, so this is this little neat Heroku app


00:06:03.580 --> 00:06:07.080
that has, it's pretty simple.


00:06:07.080 --> 00:06:09.240
Well, I don't know how simple it is behind the scenes,


00:06:09.240 --> 00:06:10.400
but-- - Simple to use.


00:06:10.400 --> 00:06:11.640
- To use it's very simple.


00:06:11.640 --> 00:06:16.600
You pop in any sort of Python code that has type hints in it


00:06:16.600 --> 00:06:18.600
and so this one has like, for instance,


00:06:18.600 --> 00:06:20.960
we've got an example up that the default


00:06:20.960 --> 00:06:24.620
with like a callable that takes a std and int


00:06:24.620 --> 00:06:27.840
and a generator and yeah,


00:06:27.840 --> 00:06:29.520
so there's a bunch of type hints in here.


00:06:29.520 --> 00:06:32.500
This is even like kind of more than most people use


00:06:32.500 --> 00:06:35.360
all the time, but, and then you hit typesplain


00:06:35.360 --> 00:06:39.600
and it will show you what the different type hints mean


00:06:39.600 --> 00:06:42.200
and translate them into English for you.


00:06:42.200 --> 00:06:46.720
And it's just pretty, pretty cool.


00:06:46.720 --> 00:06:48.320
I like it.


00:06:48.320 --> 00:06:52.920
One of the things that Wasi said that he was also,


00:06:52.920 --> 00:06:54.020
when he was developing this,


00:06:54.020 --> 00:06:59.020
he was on his way to developing a Visual Studio code plugin.


00:06:59.020 --> 00:07:02.880
And so there is a, if you search for TypeSplainer


00:07:02.880 --> 00:07:07.160
as a VS Code plugin that that functionality is available


00:07:07.160 --> 00:07:09.080
to you right in your editor as well.


00:07:09.080 --> 00:07:10.880
So it's pretty neat.


00:07:10.880 --> 00:07:11.720
- Yeah, this is really cool.


00:07:11.720 --> 00:07:13.240
This explanation you have there,


00:07:13.240 --> 00:07:16.280
like dictionary of list of set of frozen set of,


00:07:16.280 --> 00:07:19.900
like, oh my gosh, the description is something like


00:07:19.900 --> 00:07:22.440
a dictionary that maps a list of sets,


00:07:22.440 --> 00:07:24.180
of frozen sets of integers onto a string.


00:07:24.180 --> 00:07:27.680
Like that's way more legible and internalizable


00:07:27.680 --> 00:07:30.640
than how many brackets deeper we were,


00:07:30.640 --> 00:07:34.840
four brackets deep in that type information there.


00:07:34.840 --> 00:07:37.960
- Yeah, and it's interesting on Twitter


00:07:37.960 --> 00:07:39.120
with the announcement of it,


00:07:39.120 --> 00:07:43.080
we heard about it through Will McGugan,


00:07:43.080 --> 00:07:44.000
or at least I did.


00:07:44.000 --> 00:07:49.160
And some of the comments were like,


00:07:49.160 --> 00:07:51.080
not that this isn't cool, it was like,


00:07:51.080 --> 00:07:52.040
oh yeah, this is cool,


00:07:52.040 --> 00:07:54.440
but maybe Python shouldn't be this complicated


00:07:54.440 --> 00:07:56.300
if you have to explain it.


00:07:56.300 --> 00:07:57.400
But--


00:07:57.400 --> 00:07:59.160
- Have these people done C++?


00:07:59.160 --> 00:08:00.480
Let me just ask them.


00:08:00.480 --> 00:08:01.320
I know.


00:08:01.320 --> 00:08:04.940
You don't have to use types if you don't want to,


00:08:04.940 --> 00:08:08.020
but there's a lot of places where types are helping out a lot


00:08:08.020 --> 00:08:10.820
and if you're running into somebody else's code


00:08:10.820 --> 00:08:12.020
that has some types on there


00:08:12.020 --> 00:08:14.420
that you're not quite sure what that's going on,


00:08:14.420 --> 00:08:15.620
throw it in TypeSplainer


00:08:15.620 --> 00:08:17.420
and you'll be able to figure it out.


00:08:17.420 --> 00:08:19.300
- Absolutely.


00:08:19.300 --> 00:08:22.180
- And I did actually take a look.


00:08:22.180 --> 00:08:23.060
Oh, I think this is awesome.


00:08:23.060 --> 00:08:24.740
I think I absolutely agree.


00:08:24.740 --> 00:08:29.380
mypy has allowed us to do gradual typing and all that,


00:08:29.380 --> 00:08:32.580
But a lot of times you do jump into somebody else's code base and you're like,


00:08:32.580 --> 00:08:34.720
Whoa, these are more types than I've ever seen.


00:08:34.720 --> 00:08:37.940
And so being able to kind of convert it really easily is nice.


00:08:37.940 --> 00:08:40.700
And I did actually take a look at how it works under the hood.


00:08:40.700 --> 00:08:45.700
Um, there's a really big if statement of like serialization.


00:08:45.700 --> 00:08:50.200
Um, but then it also, I'm a nerd for anything AST related.


00:08:50.200 --> 00:08:55.020
Um, and so it uses like the mypy parse under the hood, which is actually


00:08:55.020 --> 00:08:58.160
relatively complex for what it needs to handle based on, you know,


00:08:58.540 --> 00:09:00.780
different Python versions and whatnot.


00:09:00.780 --> 00:09:02.060
- Wow, that's pretty awesome.


00:09:02.060 --> 00:09:02.900
- Nice.


00:09:02.900 --> 00:09:04.940
- Yeah, the very first time you were on TalkBythenomy


00:09:04.940 --> 00:09:08.380
was to talk about the AST, the abstract syntax tree, right?


00:09:08.380 --> 00:09:12.420
- Yeah, it was right around my first conference talk


00:09:12.420 --> 00:09:13.260
back in the day.


00:09:13.260 --> 00:09:14.080
- Awesome.


00:09:14.080 --> 00:09:14.920
- Yeah.


00:09:14.920 --> 00:09:15.760
- Yeah, way back in the day.


00:09:15.760 --> 00:09:16.780
I think we met in Vancouver to set that up or something.


00:09:16.780 --> 00:09:19.460
When you were up, we met at PyCascades there.


00:09:19.460 --> 00:09:21.940
- I generally think of myself as a smart person,


00:09:21.940 --> 00:09:26.300
but people that can handle doing AST work in Python,


00:09:26.300 --> 00:09:27.900
I'm like, oh my gosh, you know.


00:09:27.900 --> 00:09:30.540
(laughing)


00:09:30.540 --> 00:09:31.660
- It's over my head.


00:09:31.660 --> 00:09:32.580
- Yeah, that's pretty awesome.


00:09:32.580 --> 00:09:34.860
One thing really quick before we move on, Brian,


00:09:34.860 --> 00:09:37.380
if you go to the homepage of the TypeSplainer,


00:09:37.380 --> 00:09:39.100
go to basically back one.


00:09:39.100 --> 00:09:42.220
So it's got this fairly pathological insane example


00:09:42.220 --> 00:09:44.940
to show you, like you can take crazy stuff


00:09:44.940 --> 00:09:46.160
and explain it, yeah?


00:09:46.160 --> 00:09:47.260
But you can type in there.


00:09:47.260 --> 00:09:48.460
Like you can take that code away


00:09:48.460 --> 00:09:49.860
and put whatever you want in there


00:09:49.860 --> 00:09:51.100
and then hit TypeSplain.


00:09:51.100 --> 00:09:54.620
So if you just made like a function that just took,


00:09:54.620 --> 00:09:57.260
you know, yeah, exactly.


00:09:57.260 --> 00:09:58.860
but give it a name and do a dot, dot, dot.


00:09:58.860 --> 00:10:00.200
Yeah. Give it a function name.


00:10:00.200 --> 00:10:01.040
You'll be good.


00:10:01.040 --> 00:10:03.420
And then you hit type explain.


00:10:03.420 --> 00:10:06.540
Oh, it needs a function name.


00:10:06.540 --> 00:10:08.940
It's not JavaScript.


00:10:08.940 --> 00:10:09.780
Come on.


00:10:09.780 --> 00:10:11.620
(laughing)


00:10:11.620 --> 00:10:13.060
- Brian knows Python before.


00:10:13.060 --> 00:10:18.060
- Yeah. See, I mean, it's not a super huge explanation


00:10:18.060 --> 00:10:18.900
of what an integer is,


00:10:18.900 --> 00:10:20.700
but like you can take some random code


00:10:20.700 --> 00:10:22.860
and drop it and then go explain it to me.


00:10:22.860 --> 00:10:25.180
I guess now you can also use the VS Code extension,


00:10:25.180 --> 00:10:26.020
which I haven't seen with.


00:10:26.020 --> 00:10:30.980
I thought this was cool as well and certainly saw a lot of people talking about it on Twitter


00:10:30.980 --> 00:10:35.940
when it came out. So, final thing, I think this is noteworthy as well and I think it's worth


00:10:35.940 --> 00:10:42.820
mentioning, WASI is just 14. So, speaking of people like Emily who can do like AST stuff like crazy,


00:10:42.820 --> 00:10:46.820
like also if you write this when you're 14, well done, you're on your way.


00:10:46.820 --> 00:10:53.460
Plus it's really good looking for something right out of the gate. So, it's awesome.


00:10:54.100 --> 00:10:58.260
- Yeah, I also think the like architecture of it's really great too.


00:10:58.260 --> 00:11:05.100
So I really like that he embraced sort of building out the tool itself and then building a CLI


00:11:05.100 --> 00:11:08.500
and a web interface and a VS Code extension.


00:11:08.500 --> 00:11:13.780
So I think that is a really great example of how to structure a project like this too.


00:11:13.780 --> 00:11:15.060
- Yeah, that's awesome.


00:11:15.060 --> 00:11:20.660
Hey, Emily, we lost your screen if you want to share it back or I can just add it.


00:11:20.660 --> 00:11:21.660
- Yeah.


00:11:21.660 --> 00:11:23.500
- And while you're working on that,


00:11:23.500 --> 00:11:25.060
let me just follow up with Sam real quick,


00:11:25.060 --> 00:11:28.140
who pointed out, be super aware of the limitations


00:11:28.140 --> 00:11:30.100
of your hardware when you try to write files


00:11:30.100 --> 00:11:31.100
in async environments.


00:11:31.100 --> 00:11:33.020
Is that this project that ground to a halt


00:11:33.020 --> 00:11:35.820
because too many workers were trying to run at once?


00:11:35.820 --> 00:11:37.880
Yes, absolutely, good point, Sam.


00:11:37.880 --> 00:11:41.240
That is generally true for any limited resource


00:11:41.240 --> 00:11:44.100
that you point async things at, right?


00:11:44.100 --> 00:11:46.900
If you're going like async against a database


00:11:46.900 --> 00:11:48.620
and a couple of queries will max it out,


00:11:48.620 --> 00:11:50.220
and if you end up hitting it with 100 queries


00:11:50.220 --> 00:11:52.860
at the same time, it's not gonna go faster.


00:11:52.860 --> 00:11:54.780
It's only gonna get worse as it like fights


00:11:54.780 --> 00:11:58.020
for contention and resources and stuff.


00:11:58.020 --> 00:11:59.260
And then on this one,


00:11:59.260 --> 00:12:03.940
on the TypeSplainer, Brian Skins has agreed.


00:12:03.940 --> 00:12:05.100
Very nice work.


00:12:05.100 --> 00:12:05.940
So awesome.


00:12:05.940 --> 00:12:10.500
- All right.


00:12:10.500 --> 00:12:15.500
So this is another one of those like new to me things,


00:12:15.500 --> 00:12:17.860
but Marlene's article just came out


00:12:17.860 --> 00:12:19.300
and that's how I actually found out about it.


00:12:19.300 --> 00:12:22.020
So Marlene wrote this really excellent introduction


00:12:22.020 --> 00:12:25.220
to using IBIS for Python programmers.


00:12:25.220 --> 00:12:28.780
IBIS itself has been around for like seven years or so.


00:12:28.780 --> 00:12:31.580
It's a project I think that was started by Wes McKinney,


00:12:31.580 --> 00:12:35.620
but they are a productivity centric


00:12:35.620 --> 00:12:39.280
Python data analysis framework for SQL engines and Hadoop.


00:12:39.280 --> 00:12:42.260
So you get a ton of different backends.


00:12:42.260 --> 00:12:44.460
It's gonna compile to, you know,


00:12:44.460 --> 00:12:46.940
basically any flavor of SQL database,


00:12:48.220 --> 00:12:51.980
and then a bunch of like more data science focused backends.


00:12:51.980 --> 00:12:54.580
But this popped up on my Twitter feed from Marlene


00:12:54.580 --> 00:12:57.820
and it's just a really great introduction.


00:12:57.820 --> 00:13:00.900
Also just a really interesting sort of application.


00:13:00.900 --> 00:13:04.300
So she went through and wanted to pull


00:13:04.300 --> 00:13:06.700
some like art information about a city


00:13:06.700 --> 00:13:07.660
that she was gonna visit


00:13:07.660 --> 00:13:09.840
'cause she likes to experience the culture of a new city.


00:13:09.840 --> 00:13:14.380
So it just walks through like how to get data into it


00:13:14.380 --> 00:13:16.540
and then how to interact with it with IDIS.


00:13:18.020 --> 00:13:20.820
I'll actually switch over to the Ibis documentation.


00:13:20.820 --> 00:13:25.420
Oh, and this is now just different because it's small.


00:13:25.420 --> 00:13:30.660
But yeah, I think I was really interested in it because we have


00:13:30.660 --> 00:13:39.020
like a pseudo legacy system that we're moving all the migrations out of Django


00:13:39.020 --> 00:13:41.700
and we're actually managing it with a tool called Hestura.


00:13:41.700 --> 00:13:45.180
So we're so used to having, you know, Django,


00:13:45.300 --> 00:13:49.700
Django that's going to use SQLAlchemy and the ORM and everything just kind of is magic from there


00:13:49.700 --> 00:13:53.380
And you give it a yaml file and you get seed data, right?


00:13:53.380 --> 00:13:54.820
um


00:13:54.820 --> 00:14:00.580
And so we're trying to figure out how to manage seed data in like a wildly different environment where you have to load it in


00:14:00.580 --> 00:14:02.900
Via like the hysteria cli tool


00:14:02.900 --> 00:14:08.980
Um, and you need sql and I don't want to write sql like anything I can possibly do to avoid that


00:14:08.980 --> 00:14:12.340
um, so this was a really neat way for


00:14:12.340 --> 00:14:14.980
um


00:14:14.980 --> 00:14:16.980
getting around needing that modeling.


00:14:16.980 --> 00:14:20.020
-So let's see if I can get-- -Super cool.


00:14:20.020 --> 00:14:24.980
It also looks like it integrates with Hadoop and other things that maybe are not direct SQL


00:14:24.980 --> 00:14:28.260
Compat. It might need a slightly different query language anyway, right?


00:14:28.260 --> 00:14:35.460
Yep. Yeah, and it's super interesting. So they have a few different ways that it works. So it direct will execute pandas


00:14:35.460 --> 00:14:41.620
and then it compiles in a few different ways to either, you know, those SQL databases, DAF, Hadoop,


00:14:43.460 --> 00:14:48.660
Big query like a bunch of different stuff that yeah, it's not necessarily just going to be straight sequel, but it's going to handle that for you


00:14:48.660 --> 00:14:51.140
Um, so you're really sort of you know


00:14:51.140 --> 00:14:53.700
Future-proofing yourself away from that


00:14:53.700 --> 00:14:58.340
um, but yeah, they just got a ton of like really intelligent ways to


00:14:58.340 --> 00:15:02.660
Filter data and interact with data in a really performant way


00:15:02.660 --> 00:15:09.700
Um, i'm actually going to go back to marlene's blog post real quick and do some quick scrolls. it's also one of the most


00:15:09.700 --> 00:15:11.940
pythonic


00:15:11.940 --> 00:15:14.580
uh, like tools to integrate with sequel that I've seen


00:15:14.580 --> 00:15:20.500
So she gets to the point where she has this database table. So you just tell it, you know


00:15:20.500 --> 00:15:23.380
your table name


00:15:23.380 --> 00:15:27.060
and you set the variable and then you can interact with it as if it's just


00:15:27.060 --> 00:15:29.220
a dictionary


00:15:29.220 --> 00:15:35.380
Um, so you've got your art table and you want to just pull these columns and you've got it and it's there.


00:15:35.380 --> 00:15:38.020
so I thought so like a really good like


00:15:38.900 --> 00:15:41.900
db.table of quote art and then you say art,


00:15:41.900 --> 00:15:45.500
art equals, say art bracket, quote artists and display


00:15:45.500 --> 00:15:48.140
and then boom, you get those back, right?


00:15:48.140 --> 00:15:48.980
That's awesome. - Yeah.


00:15:48.980 --> 00:15:51.060
- As a dictionary, I guess, or something like that.


00:15:51.060 --> 00:15:52.060
Yeah, that's cool.


00:15:52.060 --> 00:15:52.900
- Yep.


00:15:52.900 --> 00:15:55.620
So yeah, there's a ton of different things


00:15:55.620 --> 00:15:56.520
that you can do with it.


00:15:56.520 --> 00:15:59.500
I highly recommend checking out their tutorials.


00:15:59.500 --> 00:16:01.720
They've got a ton of different options.


00:16:01.720 --> 00:16:04.320
My favorite one is the geospatial analysis.


00:16:04.320 --> 00:16:06.780
So if you check out their example,


00:16:06.780 --> 00:16:09.180
they're gonna show you how to pull information


00:16:09.180 --> 00:16:11.400
out of a geospatial database,


00:16:11.400 --> 00:16:13.940
and then a really quick way


00:16:13.940 --> 00:16:17.780
of actually mapping out the data.


00:16:17.780 --> 00:16:19.260
So if you check out these examples,


00:16:19.260 --> 00:16:22.820
I know it's not gonna come through necessarily on audio,


00:16:22.820 --> 00:16:26.860
but you can pull information out of these land plots


00:16:26.860 --> 00:16:28.780
and then tell it to graph it,


00:16:28.780 --> 00:16:32.020
and it gives you a really nice looking graph


00:16:32.020 --> 00:16:33.360
with all the data there


00:16:33.360 --> 00:16:35.940
in a whopping 10 lines of code.


00:16:35.940 --> 00:16:39.480
- Yeah, generating that picture in 10 lines of code,


00:16:39.480 --> 00:16:41.580
that's awesome.


00:16:41.580 --> 00:16:44.560
It makes me think I should be doing more


00:16:44.560 --> 00:16:46.120
with geospatial stuff.


00:16:46.120 --> 00:16:47.080
Like I don't do very much,


00:16:47.080 --> 00:16:47.920
'cause I'm always afraid like,


00:16:47.920 --> 00:16:49.080
ah, how am I gonna graph it?


00:16:49.080 --> 00:16:50.760
What am I gonna do?


00:16:50.760 --> 00:16:52.120
But there's a lot of cool layers


00:16:52.120 --> 00:16:53.060
in that graph and everything.


00:16:53.060 --> 00:16:54.340
That's neat.


00:16:54.340 --> 00:16:55.580
- Yep.


00:16:55.580 --> 00:16:56.720
- Yeah, yeah.


00:16:56.720 --> 00:17:00.760
The API reminds me a little bit of PyMongo, actually,


00:17:00.760 --> 00:17:02.560
where you kind of just say, you know, dot


00:17:02.560 --> 00:17:04.160
and give it the name of things.


00:17:04.160 --> 00:17:06.480
and it's really kind of dynamic in that sense


00:17:06.480 --> 00:17:07.940
and you get dictionaries back and stuff.


00:17:07.940 --> 00:17:09.580
So, cool.


00:17:09.580 --> 00:17:12.420
But it's against different databases, right?


00:17:12.420 --> 00:17:13.260
- Right, yeah.


00:17:13.260 --> 00:17:14.580
But I do like that perspective.


00:17:14.580 --> 00:17:19.140
Like it really is kind of taking any database,


00:17:19.140 --> 00:17:21.580
but especially taking a relational database


00:17:21.580 --> 00:17:25.900
and giving it more of a document oriented interface to it,


00:17:25.900 --> 00:17:26.980
which is pretty cool.


00:17:26.980 --> 00:17:27.940
- Yeah, this is cool.


00:17:27.940 --> 00:17:29.720
I definitely want to check this out for,


00:17:29.720 --> 00:17:31.380
especially for exploration.


00:17:31.380 --> 00:17:34.280
It feels like it's really got a lot of advantages


00:17:34.280 --> 00:17:35.220
for data scientists.


00:17:35.220 --> 00:17:36.500
Like they're gonna fire up a notebook


00:17:36.500 --> 00:17:38.320
and they're like, I just need to start looking at this


00:17:38.320 --> 00:17:39.160
and playing with it.


00:17:39.160 --> 00:17:40.560
And they don't really want to write queries


00:17:40.560 --> 00:17:42.460
and then convert that, right?


00:17:42.460 --> 00:17:43.300
- Yeah.


00:17:43.300 --> 00:17:45.580
- Well, it also looks like, as far as I can tell,


00:17:45.580 --> 00:17:46.980
it looks like both in this article


00:17:46.980 --> 00:17:51.220
and in one of the tutorials on the main webpage


00:17:51.220 --> 00:17:55.780
is that there's a good relation,


00:17:55.780 --> 00:17:57.940
almost a one-to-one relationship between SQL,


00:17:57.940 --> 00:18:00.580
things you can do in SQL and things you can do here.


00:18:00.580 --> 00:18:08.380
So, so that people familiar, already familiar with SQL can transfer over pretty easily.


00:18:08.380 --> 00:18:11.980
So that's absolutely, yeah, this is a nice find.


00:18:11.980 --> 00:18:16.580
All right, Brian, before we move on, can I take a second to tell you about our sponsor?


00:18:16.580 --> 00:18:17.580
Very excited about this.


00:18:17.580 --> 00:18:19.660
I think it's a big opportunity for people.


00:18:19.660 --> 00:18:22.580
So let me tell you about Microsoft for Startups Founders Hub.


00:18:22.580 --> 00:18:28.100
This episode of Python Bytes is brought to you by Microsoft for Startups Founders Hub.


00:18:28.100 --> 00:18:29.500
Starting a business is hard.


00:18:29.500 --> 00:18:34.920
By some estimates, over 90% of startups will go out of business in just their first year.


00:18:34.920 --> 00:18:39.020
With that in mind, Microsoft for Startups set out to understand what startups need to


00:18:39.020 --> 00:18:43.980
be successful and to create a digital platform to help them overcome those challenges.


00:18:43.980 --> 00:18:46.860
Microsoft for Startups Founders Hub was born.


00:18:46.860 --> 00:18:52.460
Founders Hub provides all founders at any stage with free resources to solve their startup


00:18:52.460 --> 00:18:53.580
challenges.


00:18:53.580 --> 00:18:59.060
The platform provides technology benefits, access to expert guidance and skilled resources,


00:18:59.060 --> 00:19:02.220
mentorship and networking connections, and much more.


00:19:02.220 --> 00:19:07.040
Unlike others in the industry, Microsoft for Startups Founders Hub doesn't require startups


00:19:07.040 --> 00:19:11.900
to be investor-backed or third-party validated to participate.


00:19:11.900 --> 00:19:14.220
Founders Hub is truly open to all.


00:19:14.220 --> 00:19:15.780
So what do you get if you join them?


00:19:15.780 --> 00:19:20.260
You speed up your development with free access to GitHub and Microsoft Cloud computing resources


00:19:20.260 --> 00:19:23.940
and the ability to unlock more credits over time.


00:19:23.940 --> 00:19:25.180
To help your startup innovate,


00:19:25.180 --> 00:19:27.580
Founders Hub is partnering with innovative companies


00:19:27.580 --> 00:19:31.060
like OpenAI, a global leader in AI research and development


00:19:31.060 --> 00:19:34.020
to provide exclusive benefits and discounts.


00:19:34.020 --> 00:19:36.320
Through Microsoft for Startups Founders Hub,


00:19:36.320 --> 00:19:39.100
becoming a founder is no longer about who you know.


00:19:39.100 --> 00:19:40.900
You'll have access to their mentorship network,


00:19:40.900 --> 00:19:42.960
giving you a pool of hundreds of mentors


00:19:42.960 --> 00:19:45.620
across a range of disciplines and areas


00:19:45.620 --> 00:19:49.160
like idea validation, fundraising, management and coaching,


00:19:49.160 --> 00:19:52.440
sales and marketing, as well as specific technical stress points.


00:19:52.440 --> 00:19:56.680
You'll be able to book a one-on-one meeting with the mentors, many of whom are former


00:19:56.680 --> 00:19:58.200
founders themselves.


00:19:58.200 --> 00:20:02.880
Make your idea a reality today with the critical support you'll get from Founders Hub.


00:20:02.880 --> 00:20:07.360
To join the program, just visit pythonbytes.fm/foundershub.


00:20:07.360 --> 00:20:09.880
All one word, no links in your show notes.


00:20:09.880 --> 00:20:13.280
Thank you to Microsoft for supporting the show.


00:20:13.280 --> 00:20:18.280
- Yeah, so $150,000 credit people get.


00:20:18.280 --> 00:20:20.400
So if you're doing a startup,


00:20:20.400 --> 00:20:21.620
you know, that would have been awesome


00:20:21.620 --> 00:20:24.000
when I was trying to do a startup.


00:20:24.000 --> 00:20:24.840
- Yeah.


00:20:24.840 --> 00:20:27.140
- So now this next thing I want to tell you about,


00:20:27.140 --> 00:20:31.120
I think this kind of lives in your wheelhouse as well.


00:20:31.120 --> 00:20:33.480
And keeping with the theme of the show,


00:20:33.480 --> 00:20:35.400
this one is recommended by Will McGugan.


00:20:35.400 --> 00:20:38.200
So thank you, Will, for all the good ideas.


00:20:38.200 --> 00:20:39.920
I know you're out there scouring the internet


00:20:39.920 --> 00:20:41.800
for all sorts of cool things to use


00:20:41.800 --> 00:20:44.640
on textual and rich and whatnot.


00:20:44.640 --> 00:20:46.240
And this is the one of the ones they said


00:20:46.240 --> 00:20:48.480
they are gonna start testing on,


00:20:48.480 --> 00:20:50.400
and that has to do with performance.


00:20:50.400 --> 00:20:52.680
So the topic is, or the library is,


00:20:52.680 --> 00:20:57.260
airspeed, velocity, or ASV, and the pip nomenclature.


00:20:57.260 --> 00:21:01.160
And the idea is basically setting up


00:21:01.160 --> 00:21:05.240
profiling and performance as a thing that you can measure


00:21:05.240 --> 00:21:07.140
over the lifetime of your project,


00:21:07.140 --> 00:21:08.520
rather than a thing that you measure


00:21:08.520 --> 00:21:10.080
when you feel like, ah, it's slow,


00:21:10.080 --> 00:21:12.620
I need to go figure out why it's slow for now.


00:21:12.620 --> 00:21:15.200
So as you automatically do, as you do check-ins,


00:21:15.200 --> 00:21:18.000
as you know, like CI runs and stuff like that.


00:21:18.000 --> 00:21:20.640
So probably the best way to see this


00:21:20.640 --> 00:21:22.520
is to just like pick on an example.


00:21:22.520 --> 00:21:24.320
So if you go to the link in the show notes,


00:21:24.320 --> 00:21:26.840
Airspeed Velocity, there's a thing that says,


00:21:26.840 --> 00:21:30.240
see examples for AstroPy, NumPy, SciPy,


00:21:30.240 --> 00:21:32.360
I'll pick up AstroPy.


00:21:32.360 --> 00:21:33.800
And you get all these graphs.


00:21:33.800 --> 00:21:37.520
So each one of these graphs here is the performance


00:21:37.520 --> 00:21:40.960
of some aspect of AstroPi over time.


00:21:40.960 --> 00:21:42.080
How cool is this?


00:21:42.080 --> 00:21:42.920
Look at that.


00:21:42.920 --> 00:21:45.640
And if you hover over it,


00:21:45.640 --> 00:21:48.980
it shows you the code that runs that scenario.


00:21:48.980 --> 00:21:51.520
- Wow.


00:21:51.520 --> 00:21:52.340
- Yeah.


00:21:52.340 --> 00:21:56.440
And, you know, this is the sample, this is the sample.


00:21:56.440 --> 00:21:57.680
And then they did a huge,


00:21:57.680 --> 00:22:00.060
you can see there are like two massive refactorings


00:22:00.060 --> 00:22:02.640
on the sky coordinate benchmarks,


00:22:02.640 --> 00:22:04.640
you know, scalar, whatever this is, right?


00:22:04.640 --> 00:22:06.220
This particular test they did there,


00:22:06.220 --> 00:22:07.660
it goes along pretty steady state


00:22:07.660 --> 00:22:10.500
and then there's a big drop and a little spike up


00:22:10.500 --> 00:22:11.660
and then another big drop


00:22:11.660 --> 00:22:14.100
and then steady state for a long time.


00:22:14.100 --> 00:22:16.180
So wouldn't it be cool to have these different views


00:22:16.180 --> 00:22:19.580
into your system about like how it's performing over time?


00:22:19.580 --> 00:22:22.980
- Yeah, so lower is better, right?


00:22:22.980 --> 00:22:24.420
- Yeah, I believe lower is better.


00:22:24.420 --> 00:22:25.940
I think lower is better.


00:22:25.940 --> 00:22:27.100
You can pull up regressions.


00:22:27.100 --> 00:22:29.140
You can say, okay, well, what got worse?


00:22:29.140 --> 00:22:34.140
Like for example, timetable outputter got 35 times slower.


00:22:34.700 --> 00:22:37.180
So that might want some attention.


00:22:37.180 --> 00:22:39.620
And it lists the GitHub commit,


00:22:39.620 --> 00:22:42.220
or really technically I suppose it just lists the Git commit,


00:22:42.220 --> 00:22:44.620
which is probably on GitHub, which is on GitHub,


00:22:44.620 --> 00:22:47.020
so that you can actually say,


00:22:47.020 --> 00:22:48.700
this is the code that changed


00:22:48.700 --> 00:22:50.760
that made it go 35 times slower.


00:22:50.760 --> 00:22:52.940
That's neat, I think.


00:22:52.940 --> 00:22:58.780
I think one of the other challenges here is,


00:22:58.780 --> 00:22:59.900
what about,


00:23:01.620 --> 00:23:04.740
What if you wanted this information,


00:23:04.740 --> 00:23:08.060
but you're only now learning about this project, right?


00:23:08.060 --> 00:23:10.640
You're only like now realizing,


00:23:10.640 --> 00:23:13.100
wouldn't it be great to have these graphs?


00:23:13.100 --> 00:23:15.340
How do you get those graphs back in history?


00:23:15.340 --> 00:23:19.220
So Will pointed out that you can actually


00:23:19.220 --> 00:23:22.220
connect it with your Git repository


00:23:22.220 --> 00:23:24.860
and it will check out older versions and run it.


00:23:24.860 --> 00:23:27.540
It'll like roll back in time


00:23:27.540 --> 00:23:29.580
and go across different versions


00:23:29.580 --> 00:23:30.800
and different versions of Python


00:23:30.800 --> 00:23:33.360
and generate those graphs for you,


00:23:33.360 --> 00:23:34.960
even if you just pick it up now.


00:23:34.960 --> 00:23:37.480
- That's awesome.


00:23:37.480 --> 00:23:40.160
Any idea if it's like restricted to packages


00:23:40.160 --> 00:23:43.400
or if you could also apply this to general projects?


00:23:43.400 --> 00:23:45.600
- I think you can apply it to general projects.


00:23:45.600 --> 00:23:48.080
I don't remember where I saw it.


00:23:48.080 --> 00:23:49.080
I got to pull it back up here.


00:23:49.080 --> 00:23:51.840
Somehow I've escaped the main part.


00:23:51.840 --> 00:23:57.800
But yeah, I think if you look at the using Airspeed,


00:23:57.800 --> 00:24:00.520
you basically come up with a configuration file


00:24:00.520 --> 00:24:05.520
that says this particular project with these settings


00:24:05.520 --> 00:24:08.760
and then here's like the run command,


00:24:08.760 --> 00:24:10.180
you come up with one of these test suites.


00:24:10.180 --> 00:24:13.580
I don't think it has any tie into packages per se


00:24:13.580 --> 00:24:16.760
'cause I think it goes against git, not against PyPI.


00:24:16.760 --> 00:24:19.320
- Cool, no problem.


00:24:19.320 --> 00:24:21.720
- Yeah, so pretty neat, people can check that out


00:24:21.720 --> 00:24:25.180
but like here you can specify like which versions of Python,


00:24:25.180 --> 00:24:28.040
what is this two seven stuff, I don't know.


00:24:28.040 --> 00:24:30.480
But yeah, so you can run it against all those old versions,


00:24:30.480 --> 00:24:32.800
you can configure how it runs and so on.


00:24:32.800 --> 00:24:35.840
- Okay, so you can even, you can set up like,


00:24:35.840 --> 00:24:37.920
since you're defining what's being timed,


00:24:37.920 --> 00:24:42.920
you can time large things like a particular workflow


00:24:42.920 --> 00:24:47.080
through lots of bits of code first, things like that.


00:24:47.080 --> 00:24:47.920
- Yeah, exactly.


00:24:47.920 --> 00:24:49.760
So you basically come up with a couple of scenarios


00:24:49.760 --> 00:24:51.600
of what you would want to do


00:24:51.600 --> 00:24:52.920
that you're gonna run against.


00:24:52.920 --> 00:24:55.960
Here you can see like, you can benchmark against like tags


00:24:55.960 --> 00:24:59.260
and things like that and get more branches.


00:25:00.400 --> 00:25:03.120
- Yeah, so Will says he ran it,


00:25:03.120 --> 00:25:05.540
let's pop his up,


00:25:05.540 --> 00:25:10.700
ran it against two years worth of rich releases.


00:25:10.700 --> 00:25:11.840
That's cool.


00:25:11.840 --> 00:25:14.240
- And found a performance regression, nice work.


00:25:14.240 --> 00:25:18.900
I love it, optimizations that made rich slower.


00:25:18.900 --> 00:25:19.740
Isn't that true?


00:25:19.740 --> 00:25:21.540
Like, this is gonna make it better, no.


00:25:21.540 --> 00:25:25.960
- Yeah, so pretty cool.


00:25:25.960 --> 00:25:28.300
- Yeah. - And I have to give


00:25:28.300 --> 00:25:31.380
a nice shout out to the full embracing


00:25:31.380 --> 00:25:33.820
of the Monty Python reference.


00:25:33.820 --> 00:25:35.800
If you go back to the AstroPy version


00:25:35.800 --> 00:25:37.460
in the top left corner,


00:25:37.460 --> 00:25:41.040
it says airspeed velocity of an unladen AstroPy.


00:25:41.040 --> 00:25:42.660
And I just love that.


00:25:42.660 --> 00:25:44.060
- Oh yeah, I did notice that.


00:25:44.060 --> 00:25:44.900
That's awesome.


00:25:44.900 --> 00:25:47.460
- It's nice.


00:25:47.460 --> 00:25:49.180
- Yeah, very cool.


00:25:49.180 --> 00:25:51.500
Well, yeah, thanks for sending that over Will.


00:25:51.500 --> 00:25:54.820
- Yeah, I got some projects I'd like to do that on.


00:25:54.820 --> 00:25:57.920
But speaking of testing things,


00:25:57.920 --> 00:25:59.920
This one comes from Anthony Shaw.


00:25:59.920 --> 00:26:01.300
This is Perflint.


00:26:01.300 --> 00:26:06.220
So this is a pilot extension


00:26:06.220 --> 00:26:09.380
to check for performance anti-patterns.


00:26:09.380 --> 00:26:13.520
And it's Tony somewhere, Anthony.


00:26:13.520 --> 00:26:16.020
- Some guy named Anthony Shaw.


00:26:16.020 --> 00:26:18.500
- Anthony Shaw, yeah, Tony Bologna.


00:26:18.500 --> 00:26:20.820
Says, oh, here it is.


00:26:20.820 --> 00:26:22.380
Project is in early beta.


00:26:22.380 --> 00:26:25.780
It will likely raise many false positives.


00:26:25.780 --> 00:26:29.020
So I'm thinking that might be why he went


00:26:29.020 --> 00:26:32.200
with an extension to Pylint instead of like an extension


00:26:32.200 --> 00:26:34.700
to PyFlakes or Flake 8,


00:26:34.700 --> 00:26:38.200
because Pylint gives lots of false positives.


00:26:38.200 --> 00:26:43.200
No, at least in my experience with Pylint,


00:26:43.200 --> 00:26:46.620
it takes some configuration to get happy with it


00:26:46.620 --> 00:26:49.520
because it will show you things that maybe you're okay with.


00:26:49.520 --> 00:26:53.600
Like I threw Pylint against some demo code that I have


00:26:53.600 --> 00:26:55.700
for like teaching people stuff.


00:26:55.700 --> 00:26:59.260
And I'm using short variable names like, you know,


00:26:59.260 --> 00:27:01.000
X and Y and things like that.


00:27:01.000 --> 00:27:03.800
And one of the restrictions for Pylint is


00:27:03.800 --> 00:27:05.140
you have to have,


00:27:05.140 --> 00:27:08.120
most everything has to be three characters or longer.


00:27:08.120 --> 00:27:11.120
And, you know, for production code, that's probably fine.


00:27:11.120 --> 00:27:14.000
But if you have different rules, you can change that.


00:27:14.000 --> 00:27:16.520
But back to this, I really like,


00:27:16.520 --> 00:27:18.960
I like the idea of having something look over my shoulder


00:27:18.960 --> 00:27:20.280
and look at performance problems,


00:27:20.280 --> 00:27:23.160
because I'm an advocate for


00:27:23.160 --> 00:27:24.800
don't solve performance problems


00:27:24.800 --> 00:27:27.160
unless you find that there's a performance problem.


00:27:27.160 --> 00:27:29.960
So don't do premature optimization.


00:27:29.960 --> 00:27:34.800
However, having some things are just kind of slow


00:27:34.800 --> 00:27:37.120
that you should get out of the habit of doing


00:27:37.120 --> 00:27:40.560
like when using list in a for loop,


00:27:40.560 --> 00:27:42.760
if the thing that you're using a list of


00:27:42.760 --> 00:27:44.060
already is an iterable,


00:27:44.060 --> 00:27:48.600
that's a big performance hit if it's a huge thing,


00:27:48.600 --> 00:27:52.680
because that turns an iterable or a generator


00:27:52.680 --> 00:27:55.680
into an entire list, it creates the list.


00:27:55.680 --> 00:27:56.640
You don't need to do that.


00:27:56.640 --> 00:27:58.480
So that's a big one.


00:27:58.480 --> 00:28:00.600
Anyway, there's a whole bunch of different things


00:28:00.600 --> 00:28:01.760
it checks for.


00:28:01.760 --> 00:28:05.360
And I like the idea of just as you're writing code


00:28:05.360 --> 00:28:09.840
and as you're running this and trying to figure out


00:28:09.840 --> 00:28:12.060
if there's problems with it,


00:28:12.060 --> 00:28:13.520
you can kind of get out of the habit


00:28:13.520 --> 00:28:15.020
of doing some of these things.


00:28:15.020 --> 00:28:17.600
- So yeah, these are nice.


00:28:17.600 --> 00:28:20.260
I'll catch just some of the things


00:28:20.260 --> 00:28:21.480
you might think you need to do.


00:28:21.480 --> 00:28:25.360
you're not super experienced with or whatever, right?


00:28:25.360 --> 00:28:29.360
- Yeah, like one of the things here is error W201,


00:28:29.360 --> 00:28:32.660
8201, which is loop invariant statement.


00:28:32.660 --> 00:28:36.760
And this is one of that's kind of interesting is like,


00:28:36.760 --> 00:28:39.680
there's an example of taking the length of something


00:28:39.680 --> 00:28:40.880
within a loop.


00:28:40.880 --> 00:28:43.480
And if that never changes within the loop,


00:28:43.480 --> 00:28:46.720
don't do the length in the loop, take it out of the loop.


00:28:46.720 --> 00:28:50.140
Those are, there's a few examples that you like,


00:28:51.160 --> 00:28:53.120
you might not notice right away,


00:28:53.120 --> 00:28:56.520
especially if you've taken something that was a linear,


00:28:56.520 --> 00:29:01.160
some linear code that you kind of added it inside of a loop


00:29:01.160 --> 00:29:04.240
and indented it over and now it's in a loop,


00:29:04.240 --> 00:29:06.120
you might forget that some of the stuff inside


00:29:06.120 --> 00:29:09.160
might not, maybe shouldn't be in the loop.


00:29:09.160 --> 00:29:10.000
So.


00:29:10.000 --> 00:29:13.360
- Yeah, this example here, you're doing a loop 10,000 times


00:29:13.360 --> 00:29:15.720
and every time you're asking the length of this thing


00:29:15.720 --> 00:29:17.960
that is defined outside the loop and is unchanging.


00:29:17.960 --> 00:29:21.440
So you're basically doing it 10,000,


00:29:21.440 --> 00:29:23.960
9,999 times more than necessary.


00:29:23.960 --> 00:29:24.800
Yeah, cool.


00:29:24.800 --> 00:29:25.620
- Yep.


00:29:25.620 --> 00:29:27.560
So kind of fun.


00:29:27.560 --> 00:29:28.640
I'm gonna give it a shot,


00:29:28.640 --> 00:29:31.520
see what I think as using it.


00:29:31.520 --> 00:29:32.360
So.


00:29:32.360 --> 00:29:33.240
- Yeah, definitely.


00:29:33.240 --> 00:29:36.000
Emily, do you use some of these linters


00:29:36.000 --> 00:29:38.840
or any things like this that give you warnings?


00:29:38.840 --> 00:29:39.660
- Yeah.


00:29:39.660 --> 00:29:41.720
Yeah, I mean, I think we mostly use Splaygate,


00:29:41.720 --> 00:29:44.480
but I'm definitely curious to try this out too.


00:29:44.480 --> 00:29:46.600
I can see how this would be tricky


00:29:46.600 --> 00:29:50.480
to get really consistent errors for these things.


00:29:50.480 --> 00:29:54.480
So props to Tony Bologna for taking it on.


00:29:54.480 --> 00:29:56.800
(laughing)


00:29:56.800 --> 00:29:57.960
- Well done, yeah, this is exciting.


00:29:57.960 --> 00:29:59.260
I'm glad to see this coming out.


00:29:59.260 --> 00:30:00.320
I know he was talking about it,


00:30:00.320 --> 00:30:04.020
but I didn't see actually anything on GitHub yet or anything.


00:30:04.020 --> 00:30:06.160
So yeah, very well done.


00:30:06.160 --> 00:30:06.980
- Yeah, this is cool.


00:30:06.980 --> 00:30:09.040
I like stuff like this that really like takes you


00:30:09.040 --> 00:30:11.240
to that next level of like,


00:30:11.240 --> 00:30:13.560
this is something that somebody would hopefully notice


00:30:13.560 --> 00:30:17.040
in like a code review, but if you can automate it,


00:30:17.040 --> 00:30:17.880
even better.


00:30:17.880 --> 00:30:19.880
- Yeah, I think that's a great point.


00:30:19.880 --> 00:30:22.640
I think a lot of these things that would have to be


00:30:22.640 --> 00:30:24.040
a discussion during a code review,


00:30:24.040 --> 00:30:25.920
if they could be automated and you could save


00:30:25.920 --> 00:30:30.040
the code review for meaningful stuff like security


00:30:30.040 --> 00:30:33.840
or like how are we gonna version this over time?


00:30:33.840 --> 00:30:34.720
It's gonna be tricky.


00:30:34.720 --> 00:30:37.960
Like, are you really storing pickles in the database?


00:30:37.960 --> 00:30:39.360
Let's not, stuff like that.


00:30:42.680 --> 00:30:44.200
All right.


00:30:44.200 --> 00:30:49.120
PEP 594 has been accepted, which is super exciting.


00:30:49.120 --> 00:30:52.480
So PEP 594, if you don't know what that is,


00:30:52.480 --> 00:30:55.040
it's a Python enhancement proposal.


00:30:55.040 --> 00:30:59.760
So a proposed change to the Python language itself.


00:30:59.760 --> 00:31:01.900
And so this one is removing dead batteries


00:31:01.900 --> 00:31:03.920
from the standard library.


00:31:03.920 --> 00:31:07.400
It was written by Christian Himes and Brett Cannon.


00:31:07.400 --> 00:31:09.960
I think I saw a tweet from Brett


00:31:09.960 --> 00:31:11.800
saying that it had been accepted.


00:31:11.800 --> 00:31:18.200
So this is just really exciting for anyone who's followed along with any of this discussion.


00:31:18.200 --> 00:31:20.200
It's been a long time coming.


00:31:20.200 --> 00:31:28.200
I think there was a major discussion about it at PyCon US 2019, it must have been.


00:31:28.200 --> 00:31:30.800
And shortly after that, there was a pep.


00:31:30.800 --> 00:31:38.000
But it's been since then that it's kind of been off and on in discussion and finally figuring out


00:31:38.000 --> 00:31:43.360
what is going to be the thing that really works for everyone and for the future of the language.


00:31:43.360 --> 00:31:52.640
So this is going to be targeting version 3.11. So just a quick recap of like the release plan for


00:31:52.640 --> 00:32:01.920
that. Development on 3.11 will start this May, so May 2021. The final release even for 3.11 is not


00:32:01.920 --> 00:32:08.400
until October 2022. And even then, this is just going to be deprecating modules. So it'll


00:32:08.400 --> 00:32:14.920
be deprecations in 3.11 and 3.12. And it's not until 3.13 that it will actually be fully


00:32:14.920 --> 00:32:21.520
removed from the language itself. So you can kind of get a glimpse into how long of a process


00:32:21.520 --> 00:32:27.840
this is and how big of a decision it was to get everyone on board and feeling comfortable


00:32:27.840 --> 00:32:28.840
with it.


00:32:28.840 --> 00:32:32.200
Yeah, it didn't look at all like anything rushed.


00:32:32.200 --> 00:32:34.400
When I went through and read this,


00:32:34.400 --> 00:32:36.560
it was like, here's the things


00:32:36.560 --> 00:32:37.920
that we think we can take out.


00:32:37.920 --> 00:32:39.080
Here's why.


00:32:39.080 --> 00:32:41.080
There's a table in there that shows


00:32:41.080 --> 00:32:47.520
third-party alternatives to certain things.


00:32:47.520 --> 00:32:49.760
Mostly, yeah, that's the one.


00:32:49.760 --> 00:32:51.680
So there's certain things in here just like,


00:32:51.680 --> 00:32:54.440
you know, that probably isn't needed


00:32:54.440 --> 00:32:56.000
or it's really superseded.


00:32:56.000 --> 00:32:57.760
So there's pipes,


00:32:57.760 --> 00:32:59.420
but then we also have sub-process,


00:32:59.420 --> 00:33:01.200
which will take care of that.


00:33:01.200 --> 00:33:02.400
And that's a built-in one.


00:33:02.400 --> 00:33:06.920
And then Async Core, just use AsyncIO.


00:33:06.920 --> 00:33:08.360
But then there's other ones.


00:33:08.360 --> 00:33:11.560
- There's a bunch in here I've never even heard of.


00:33:11.560 --> 00:33:13.120
- Yeah, that's the thing, right?


00:33:13.120 --> 00:33:14.840
There's one called Crypt, and it's like,


00:33:14.840 --> 00:33:17.640
look, just use Passlib or Argon or Hashlib


00:33:17.640 --> 00:33:19.820
or anything that is better and modern.


00:33:19.820 --> 00:33:22.000
You know, this was from 1994.


00:33:22.000 --> 00:33:25.660
Cryptography is not exactly the same as it was then.


00:33:25.660 --> 00:33:28.660
So, you know, maybe it makes sense to take it out, right?


00:33:28.660 --> 00:33:31.660
- Yeah.


00:33:31.660 --> 00:33:33.240
- Yeah, I think it's a really like,


00:33:33.240 --> 00:33:34.940
it's a thin line to walk, right?


00:33:34.940 --> 00:33:38.140
Like some people are using these


00:33:38.140 --> 00:33:40.740
and some of these modules maybe didn't have a lot


00:33:40.740 --> 00:33:42.580
of like maintenance over time,


00:33:42.580 --> 00:33:45.220
but that also meant that there wasn't somebody watching it


00:33:45.220 --> 00:33:48.500
for bugs or security vulnerabilities or anything like that.


00:33:48.500 --> 00:33:53.740
So the balance of, is it worth pulling it out


00:33:53.740 --> 00:33:57.420
if somebody was relying on it versus the maintenance cost


00:33:57.420 --> 00:33:59.980
or the lack of maintenance that could really


00:33:59.980 --> 00:34:01.580
be a hindrance to it in the future.


00:34:01.580 --> 00:34:03.320
- Yeah, it's a liability, right?


00:34:03.320 --> 00:34:05.060
- There's a CGI library.


00:34:05.060 --> 00:34:09.660
That's something else that takes you back from 95.


00:34:09.660 --> 00:34:12.180
Yeah, that's how I started, but not with Python.


00:34:12.180 --> 00:34:15.060
I was doing CGI with Perl way back in 95.


00:34:15.060 --> 00:34:16.740
- Yeah, that does go back.


00:34:16.740 --> 00:34:19.180
It also talks about whether that bit of code


00:34:19.180 --> 00:34:22.020
has a maintainer and whether that maintainer is active.


00:34:22.020 --> 00:34:24.140
For example, CGI has no maintainer.


00:34:24.140 --> 00:34:26.020
Like, no one wants that.


00:34:26.020 --> 00:34:27.540
One of the things that's interesting here


00:34:27.540 --> 00:34:29.840
is you could take this code and you could still use it.


00:34:29.840 --> 00:34:32.820
You could vendor it into your code, right?


00:34:32.820 --> 00:34:34.300
Just instead of using-- - Yeah, now you're


00:34:34.300 --> 00:34:35.300
the maintainer.


00:34:35.300 --> 00:34:36.260
- Yeah, exactly.


00:34:36.260 --> 00:34:37.800
It's all yours, you can have that.


00:34:37.800 --> 00:34:41.140
But you could just go to CPython on GitHub,


00:34:41.140 --> 00:34:43.380
get that module, copy it over,


00:34:43.380 --> 00:34:45.380
and now you kind of still have that functionality,


00:34:45.380 --> 00:34:47.740
just you're taking it on.


00:34:47.740 --> 00:34:49.820
I expect maybe one or two of these might end up


00:34:49.820 --> 00:34:54.220
in their own GitHub repository as a package that is maintained.


00:34:54.220 --> 00:34:55.820
They did talk about that, right, Emily?


00:34:55.820 --> 00:34:59.180
About that being one of the possible tasks they decided against?


00:34:59.180 --> 00:35:06.260
Yeah, that was like the big conversation back at the Language Summit in 2019 was,


00:35:06.260 --> 00:35:14.620
you know, could we get libraries on a more independent release schedule


00:35:14.620 --> 00:35:17.900
and pull them out of the standard library entirely


00:35:17.900 --> 00:35:20.740
and just have them be sort of their own standalone thing,


00:35:20.740 --> 00:35:23.220
which as I have briefly outlined


00:35:23.220 --> 00:35:25.820
the release schedule for 3.11,


00:35:25.820 --> 00:35:30.820
you can see that it is on like a very long scale timeframe.


00:35:30.820 --> 00:35:32.500
So I definitely agree.


00:35:32.500 --> 00:35:34.980
I think that some of these that people are still using,


00:35:34.980 --> 00:35:38.060
people are either gonna go in there and grab the code


00:35:38.060 --> 00:35:41.180
and hopefully grab the license with it as well,


00:35:41.180 --> 00:35:42.980
or they're just gonna become, you know,


00:35:42.980 --> 00:35:44.980
modules that enough people care about


00:35:44.980 --> 00:35:47.220
that live on their own in PyPI.


00:35:47.220 --> 00:35:51.260
- Yeah, I don't see anything here that I would miss,


00:35:51.260 --> 00:35:54.500
but that doesn't mean that there's not people using them.


00:35:54.500 --> 00:35:57.660
- So on the good side, I mean, it totally makes sense


00:35:57.660 --> 00:35:58.780
to like remove things,


00:35:58.780 --> 00:36:00.900
especially stuff that's not getting maintained


00:36:00.900 --> 00:36:04.500
and there's no maintainer and does that possibly


00:36:04.500 --> 00:36:06.740
has bugs in it now, nobody knows.


00:36:06.740 --> 00:36:12.100
But like, what are some of the good aspects,


00:36:12.100 --> 00:36:12.980
other good aspects?


00:36:12.980 --> 00:36:15.380
Does it, is it gonna make the library


00:36:15.380 --> 00:36:18.500
or the Python standard, the install smaller,


00:36:18.500 --> 00:36:21.460
or I mean, you'd think,


00:36:21.460 --> 00:36:23.100
anybody know the numbers on that?


00:36:23.100 --> 00:36:26.900
- I don't know the numbers on that,


00:36:26.900 --> 00:36:29.740
but that is definitely something interesting to look at.


00:36:29.740 --> 00:36:32.660
- It is, I would say the biggest change is like maintenance.


00:36:32.660 --> 00:36:36.540
Just no one has to worry about whether there's a bug in CGI


00:36:36.540 --> 00:36:39.700
that someone discovers 'cause it's just not there.


00:36:39.700 --> 00:36:40.700
- Yeah. - Yeah.


00:36:40.700 --> 00:36:43.000
And with, especially with the Python,


00:36:43.000 --> 00:36:46.280
there's often a very big barrier to entry.


00:36:46.280 --> 00:36:49.880
So if a CGI bug was even filed by somebody,


00:36:49.880 --> 00:36:52.160
where would you start to debug it


00:36:52.160 --> 00:36:54.360
and reproduce that sort of thing?


00:36:54.360 --> 00:36:56.000
- Who's gonna take that on, right?


00:36:56.000 --> 00:36:57.240
- Right, and then the other thing too


00:36:57.240 --> 00:37:00.720
is maybe somebody else goes through the effort to fix it,


00:37:00.720 --> 00:37:03.760
but it always takes the core dev to review that PR


00:37:03.760 --> 00:37:05.360
and get it merged in.


00:37:05.360 --> 00:37:06.320
And so a lot of times,


00:37:06.320 --> 00:37:08.040
if you don't have an owner of a module,


00:37:08.040 --> 00:37:10.960
it's just not gonna get a lot of attention.


00:37:10.960 --> 00:37:14.700
So as a whole, it should be hopefully an impact


00:37:14.700 --> 00:37:19.700
on how we interpret core developer time.


00:37:19.700 --> 00:37:22.720
Right now I think we're at like over a thousand PRs


00:37:22.720 --> 00:37:23.900
open on GitHub.


00:37:23.900 --> 00:37:26.160
So a lot of times, you know,


00:37:26.160 --> 00:37:29.000
it's not just core developers writing code.


00:37:29.000 --> 00:37:31.720
And a lot of times you can have even more of an impact


00:37:31.720 --> 00:37:33.360
being that person that, you know,


00:37:33.360 --> 00:37:36.060
tries to review PRs and keep that number down.


00:37:36.060 --> 00:37:37.920
- Yeah.


00:37:37.920 --> 00:37:40.240
Brian, the audience points out


00:37:40.240 --> 00:37:42.320
the comment threads on discuss.python


00:37:42.320 --> 00:37:43.960
and elsewhere are really interesting


00:37:43.960 --> 00:37:46.160
if you wanna see examples of these old modules


00:37:46.160 --> 00:37:47.280
still in use.


00:37:47.280 --> 00:37:48.960
Yeah.


00:37:48.960 --> 00:37:50.280
- Yeah, I've got a couple of them here.


00:37:50.280 --> 00:37:52.360
I think I linked them in the show notes,


00:37:52.360 --> 00:37:55.160
but if they're not there, I'll make sure it's in there.


00:37:55.160 --> 00:37:56.480
Yeah.


00:37:56.480 --> 00:37:58.480
- Nice, yeah, you got a link to Brett's,


00:37:58.480 --> 00:38:01.200
or the Brett's discussion there, that's cool.


00:38:01.200 --> 00:38:02.600
No, I think this is good, I think this is good.


00:38:02.600 --> 00:38:04.680
And quick shout out to a new theme, right?


00:38:04.680 --> 00:38:08.160
- Yeah, so it's a brand new PEP site.


00:38:08.160 --> 00:38:09.960
So it's peps.python.org.


00:38:09.960 --> 00:38:12.160
and there's this really lovely new theme on it.


00:38:12.160 --> 00:38:14.160
It's really clean and modern.


00:38:14.160 --> 00:38:16.260
You've got a nice dark theme here as well.


00:38:16.260 --> 00:38:19.160
- Yeah, cool.


00:38:19.160 --> 00:38:20.480
Yeah, I noticed the dark thing, that was cool.


00:38:20.480 --> 00:38:22.880
And I think it even auto adapts to the time of day,


00:38:22.880 --> 00:38:23.720
which is great.


00:38:23.720 --> 00:38:26.960
Brian, is that it for all of our main items?


00:38:26.960 --> 00:38:28.320
- I think it is.


00:38:28.320 --> 00:38:29.160
- It is.


00:38:29.160 --> 00:38:31.140
- Do you have anything extra for us?


00:38:31.140 --> 00:38:33.120
- Would it surprise you if I said no?


00:38:33.120 --> 00:38:33.960
- Yeah, it would.


00:38:33.960 --> 00:38:36.280
- I know, I always have like 10 extra things.


00:38:36.280 --> 00:38:37.960
No, I don't have anything extra this week.


00:38:37.960 --> 00:38:38.800
- Oh, really?


00:38:38.800 --> 00:38:39.620
- Yeah.


00:38:39.620 --> 00:38:41.780
- Nice, nice, okay.


00:38:41.780 --> 00:38:43.340
How about you, Emily?


00:38:43.340 --> 00:38:45.420
- Yeah, I've got a couple of extra things.


00:38:45.420 --> 00:38:47.220
So as I was prepping for this, I looked at,


00:38:47.220 --> 00:38:50.620
I think it was just the most recent episode before this one.


00:38:50.620 --> 00:38:55.940
There was a blog post that I think Brian shared


00:38:55.940 --> 00:38:58.660
on like a better Git flow.


00:38:58.660 --> 00:38:59.500
- Yeah.


00:38:59.500 --> 00:39:00.860
- That basically was saying like,


00:39:00.860 --> 00:39:03.520
commit all your stuff, reset everything,


00:39:03.520 --> 00:39:05.420
and then recommit everything


00:39:05.420 --> 00:39:08.340
once you're like ready to make a clean PR.


00:39:08.340 --> 00:39:10.600
And so I wanted to share this as well.


00:39:10.600 --> 00:39:13.860
This is one of my favorite tools that I learned about


00:39:13.860 --> 00:39:15.320
probably a few months ago.


00:39:15.320 --> 00:39:19.540
Again, 2015, not a new thing, but new to me.


00:39:19.540 --> 00:39:24.200
So you can do auto squashing of Git commits


00:39:24.200 --> 00:39:26.600
when you're interactive rebasing.


00:39:26.600 --> 00:39:29.340
So essentially if you've got a ton of different commits


00:39:29.340 --> 00:39:33.340
and you realize, oh, like I had a style commit


00:39:33.340 --> 00:39:36.280
for styling all my new stuff a few commits back,


00:39:36.280 --> 00:39:38.360
but like I want to make this one more change.


00:39:38.360 --> 00:39:41.160
Instead of needing to, you know, rebase immediately


00:39:41.160 --> 00:39:44.280
or remember to, you know, stage it in a certain way


00:39:44.280 --> 00:39:46.720
in the future, you can actually go ahead


00:39:46.720 --> 00:39:48.460
and just commit one more time.


00:39:48.460 --> 00:39:52.000
And then you flag that commit that you're making


00:39:52.000 --> 00:39:55.160
with the fix up flag, so it's just --fix up.


00:39:55.160 --> 00:39:59.340
And then you tell it the commit that you're wanting


00:39:59.340 --> 00:40:01.400
to sort of amend.


00:40:01.400 --> 00:40:02.760
So you can just keep working like that,


00:40:02.760 --> 00:40:04.040
make a fix up commit.


00:40:04.040 --> 00:40:06.120
And then the only thing that you do right before


00:40:06.120 --> 00:40:11.120
UPR is you tell it to rebase with auto-squashing.


00:40:11.120 --> 00:40:14.360
So once you do that interactive rebase with auto-squash,


00:40:14.360 --> 00:40:16.460
it's gonna find all those fix up commits.


00:40:16.460 --> 00:40:18.760
And when you interact to rebase,


00:40:18.760 --> 00:40:21.420
you often have to like move commits around


00:40:21.420 --> 00:40:23.380
and tell it to squash into the previous commit.


00:40:23.380 --> 00:40:25.600
You've got to get it in the right order.


00:40:25.600 --> 00:40:27.040
This handles all of it for you.


00:40:27.040 --> 00:40:29.420
And anything that's flagged with a fix up,


00:40:29.420 --> 00:40:32.560
it finds that commit ID and auto-squashes it back in.


00:40:32.560 --> 00:40:35.160
So you get a really, really clean history.


00:40:35.160 --> 00:40:41.480
without having to like redo all of your like commit work that you had done along the way.


00:40:41.480 --> 00:40:45.960
Yeah, this is really nice. And this looks built in to get.


00:40:45.960 --> 00:40:46.960
Yep.


00:40:46.960 --> 00:40:47.960
Yeah.


00:40:47.960 --> 00:40:48.960
Yep.


00:40:48.960 --> 00:40:53.280
I've never heard of auto squashing. I've definitely never used it, but it looks really useful.


00:40:53.280 --> 00:40:54.280
Cool.


00:40:54.280 --> 00:40:55.280
Yeah.


00:40:55.280 --> 00:40:56.280
Yeah.


00:40:56.280 --> 00:40:57.280
Yeah.


00:40:57.280 --> 00:41:02.760
And then a couple, couple other cool ones. There was a tweet from Dustin Ingram about


00:41:02.760 --> 00:41:08.440
an award that the Python Software Foundation actually received. It's from the Annie Awards,


00:41:08.440 --> 00:41:19.400
which is an animation version of the Academy Awards sort of thing. And it was for Python's


00:41:19.400 --> 00:41:25.480
use in animation. And so I think this is just super cool. It's one of those applications that


00:41:25.480 --> 00:41:30.520
you don't necessarily think about for Python all the time. I don't think it gets talked about


00:41:30.520 --> 00:41:37.880
enough. I actually tried to find Paul Hildebrandt had a talk at PyCon Montreal, but I think


00:41:37.880 --> 00:41:43.960
it was back before we were recording these. So if you ever see Paul at a conference, you've


00:41:43.960 --> 00:41:49.640
got to ask him about, you know, how Python is used in animation and at studios like Disney.


00:41:49.640 --> 00:41:55.160
Cool. Oh, yeah, that's really neat. So exciting. I would have never expected that. But that's


00:41:55.160 --> 00:41:57.400
And congrats, Guido, for getting the award.


00:41:57.400 --> 00:42:01.240
- Then two more quick ones.


00:42:01.240 --> 00:42:05.600
The PSF Spring Fundraiser launched yesterday,


00:42:05.600 --> 00:42:06.880
and they're having a ton of fun with it.


00:42:06.880 --> 00:42:10.840
Launched on at least Pi Day in the United States.


00:42:10.840 --> 00:42:14.760
So if you donate with some sort of contribution


00:42:14.760 --> 00:42:17.240
that is related to the number pi,


00:42:17.240 --> 00:42:19.760
you get like a free swag bag.


00:42:19.760 --> 00:42:25.080
So just a fun twist on the fundraiser for this year.


00:42:25.080 --> 00:42:25.920
- No, that's me.


00:42:25.920 --> 00:42:30.200
- Yeah, you can donate $3.14 or $31.41


00:42:30.200 --> 00:42:33.480
or $314.116 and yeah, like that's.


00:42:33.480 --> 00:42:37.680
It goes pretty far out if I remember pi,


00:42:37.680 --> 00:42:39.060
there's a lot of numbers in there.


00:42:39.060 --> 00:42:41.560
So yeah, you just keep going.


00:42:41.560 --> 00:42:45.820
- Yeah, whatever your bank account will allow.


00:42:45.820 --> 00:42:48.680
(laughing)


00:42:48.680 --> 00:42:50.480
- All right, anything else you wanna throw out?


00:42:50.480 --> 00:42:51.760
- Yeah, just one last quick one,


00:42:51.760 --> 00:42:54.400
just a small plug for us.


00:42:54.400 --> 00:43:00.520
So, if you're looking for a place that is always innovating, always focused on like,


00:43:00.520 --> 00:43:05.160
really high quality tested code, but you want to work in a small team environment, you want


00:43:05.160 --> 00:43:06.160
to be able to do that.


00:43:06.160 --> 00:43:09.160
And I think that's a really important thing to keep in mind.


00:43:09.160 --> 00:43:12.160
And I think that's a really important thing to keep in mind.


00:43:12.160 --> 00:43:15.160
And I think that's a really important thing to keep in mind.


00:43:15.160 --> 00:43:18.160
And I think that's a really important thing to keep in mind.


00:43:18.160 --> 00:43:21.160
And I think that's a really important thing to keep in mind.


00:43:21.160 --> 00:43:25.380
but you want to work in a small team environment,


00:43:25.380 --> 00:43:28.240
get hands on with clients, get hands on with product.


00:43:28.240 --> 00:43:29.140
Some tricks though.


00:43:29.140 --> 00:43:31.540
- Yeah.


00:43:31.540 --> 00:43:32.620
Cuddlesoft looks really cool.


00:43:32.620 --> 00:43:34.520
You seem to be doing a lot of,


00:43:34.520 --> 00:43:36.140
bunch of different small fun projects


00:43:36.140 --> 00:43:38.940
instead of just getting stuck in like one huge legacy code.


00:43:38.940 --> 00:43:41.520
So if you're looking to kind of bounce around


00:43:41.520 --> 00:43:42.940
from project to project and learn a lot,


00:43:42.940 --> 00:43:44.980
I think that'd be a good place, right?


00:43:44.980 --> 00:43:45.880
- Yeah, absolutely.


00:43:45.880 --> 00:43:49.420
- All right.


00:43:49.420 --> 00:43:52.300
Well, I have two jokes for us, even though I have no extras.


00:43:52.300 --> 00:43:54.060
So I'm making up for it there, I guess.


00:43:54.060 --> 00:43:55.040
- Nice.


00:43:55.040 --> 00:43:57.200
- So Aaron Patterson said,


00:43:57.200 --> 00:43:59.580
"I heard Microsoft is trying to change


00:43:59.580 --> 00:44:01.200
"the file separator in Windows,


00:44:01.200 --> 00:44:03.940
"but it received tons of backslash from the community."


00:44:03.940 --> 00:44:06.200
(laughing)


00:44:06.200 --> 00:44:10.100
That's pretty funny, right?


00:44:10.100 --> 00:44:12.420
- But the forward slash works fine in Windows.


00:44:12.420 --> 00:44:13.260
People just forget to use it.


00:44:13.260 --> 00:44:16.280
- It actually does, it totally does.


00:44:16.280 --> 00:44:18.300
And following along there,


00:44:18.300 --> 00:44:20.340
Oh, Emily, I think this is the perfect follow-on


00:44:20.340 --> 00:44:21.380
for you as well.


00:44:21.380 --> 00:44:26.740
Do you ever look at people's GitHub profiles if they apply?


00:44:26.740 --> 00:44:28.940
- Okay. - What did I say?


00:44:28.940 --> 00:44:29.780
Yeah, right, of course.


00:44:29.780 --> 00:44:32.100
I mean, that would be crazy not to, right?


00:44:32.100 --> 00:44:34.740
So this person here,


00:44:34.740 --> 00:44:37.620
you know, if you go to your GitHub profile,


00:44:37.620 --> 00:44:41.420
it will show you your public activity over time.


00:44:41.420 --> 00:44:43.100
And it'll say like on this day, you know,


00:44:43.100 --> 00:44:45.220
in September on Monday, you had this much work


00:44:45.220 --> 00:44:46.260
and then on Tuesday that much,


00:44:46.260 --> 00:44:48.900
it'll color like different colors of green.


00:44:48.900 --> 00:44:49.740
- Yeah.


00:44:49.740 --> 00:44:50.860
- So if you all check out the link here,


00:44:50.860 --> 00:44:55.420
we have a GitHub activity for a year that spells out,


00:44:55.420 --> 00:44:58.420
please hire me in like the exact amount of commits


00:44:58.420 --> 00:44:59.740
on just the right day.


00:44:59.740 --> 00:45:01.540
And I think that's...


00:45:01.540 --> 00:45:04.140
- I think there's some history manipulation going on here,


00:45:04.140 --> 00:45:05.100
but...


00:45:05.100 --> 00:45:07.300
- Probably some auto squashing, I don't know.


00:45:07.300 --> 00:45:08.820
(laughing)


00:45:08.820 --> 00:45:11.060
- I mean, hey, I would look at that


00:45:11.060 --> 00:45:14.220
and think that they had some decent enough Git skills


00:45:14.220 --> 00:45:15.740
to manage that.


00:45:15.740 --> 00:45:16.740
- Yeah, exactly.


00:45:16.740 --> 00:45:19.180
Like it does mean that you're probably not doing


00:45:19.180 --> 00:45:21.660
like normal get work on one hand, but on the other,


00:45:21.660 --> 00:45:24.240
like I'd have to think for a while to figure out


00:45:24.240 --> 00:45:25.580
how to get it to draw that out.


00:45:25.580 --> 00:45:26.880
So that's pretty cool too.


00:45:26.880 --> 00:45:31.900
- It's one of the main reasons why I switched my blog


00:45:31.900 --> 00:45:35.420
to Hugo so that blog posts can get commits.


00:45:35.420 --> 00:45:36.580
- Exactly, double-dip.


00:45:36.580 --> 00:45:39.180
- Yeah.


00:45:39.180 --> 00:45:42.180
- Nice, well, that's what I brought for the jokes.


00:45:42.180 --> 00:45:43.380
- Nice.


00:45:43.380 --> 00:45:45.540
Well, thanks everybody for showing up.


00:45:45.540 --> 00:45:47.180
Thanks, Emily, for showing up here


00:45:47.180 --> 00:45:50.340
and also for the Walrus operator, love it.


00:45:50.340 --> 00:45:51.180
- Yeah.


00:45:51.180 --> 00:45:53.200
- And we'll see everybody next week.


00:45:53.200 --> 00:45:55.160
- Yep.


00:45:55.160 --> 00:45:56.100
Thank you, bye all.


00:45:56.100 --> 00:46:06.100
[BLANK_AUDIO]

