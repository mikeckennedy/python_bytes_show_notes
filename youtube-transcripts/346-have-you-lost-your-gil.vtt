WEBVTT

00:00:00.000 --> 00:00:03.080
>> Hey, Brian.


00:00:03.080 --> 00:00:04.080
>> Hey.


00:00:04.080 --> 00:00:05.400
>> How are you doing?


00:00:05.400 --> 00:00:07.000
>> I'm doing excellent.


00:00:07.000 --> 00:00:08.000
How about you?


00:00:08.000 --> 00:00:09.000
>> Very good.


00:00:09.000 --> 00:00:10.000
Very good.


00:00:10.000 --> 00:00:14.640
Thank you, everyone out there in the live stream.


00:00:14.640 --> 00:00:16.280
Awesome to have you here today as well.


00:00:16.280 --> 00:00:20.000
If you're watching the replay, it's still good to have you here.


00:00:20.000 --> 00:00:22.000
Should we just kick it off?


00:00:22.000 --> 00:00:23.000
>> Yeah, let's.


00:00:23.000 --> 00:00:25.580
We've got lots of stuff to cover.


00:00:25.580 --> 00:00:26.580
>> We do.


00:00:26.580 --> 00:00:27.580
We do.


00:00:27.580 --> 00:00:28.580
Here we go.


00:00:28.580 --> 00:00:34.260
Welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:34.260 --> 00:00:39.220
This is episode 346, recorded April 1st, 2023.


00:00:39.220 --> 00:00:40.540
I'm Michael Kennedy.


00:00:40.540 --> 00:00:43.020
And I'm Brian Okken.


00:00:43.020 --> 00:00:45.440
And this episode is brought to you by us.


00:00:45.440 --> 00:00:50.620
Check out all of our things and support the show by taking part in them.


00:00:50.620 --> 00:00:53.660
We have our courses, the pytest one Brian wrote, a bunch of other ones.


00:00:53.660 --> 00:00:57.540
I just did the async Python and MongoDB combo


00:00:57.540 --> 00:00:59.620
with a little bit of FastAPI and load testing in there.


00:00:59.620 --> 00:01:01.660
That's a good one to check out.


00:01:01.660 --> 00:01:03.540
And if you want to be part of the live stream,


00:01:03.540 --> 00:01:05.700
just pythonbite.fm/live,


00:01:05.700 --> 00:01:08.700
and you'll see the next scheduled one


00:01:08.700 --> 00:01:11.140
that we got set up for you, queued up for you.


00:01:11.140 --> 00:01:14.780
Usually 11 a.m. Pacific on a Tuesday, as it is today,


00:01:14.780 --> 00:01:17.380
but that's not always the case, so be sure to check.


00:01:17.380 --> 00:01:19.860
- Yes.


00:01:19.860 --> 00:01:21.180
- Indeed, indeed.


00:01:21.180 --> 00:01:24.460
Well, it is August, Brian, already.


00:01:24.460 --> 00:01:27.420
Summer is getting close to an end.


00:01:27.420 --> 00:01:28.300
How is this possible?


00:01:28.300 --> 00:01:30.460
I have no idea.


00:01:30.460 --> 00:01:32.780
it is August, April.


00:01:32.780 --> 00:01:33.940
No, it's not April.


00:01:33.940 --> 00:01:34.500
It's August.


00:01:34.500 --> 00:01:35.700
Did I say April?


00:01:35.700 --> 00:01:36.020
Maybe?


00:01:36.020 --> 00:01:36.620
No.


00:01:36.620 --> 00:01:43.820
Henry Schreiner in the, in the show, in the chat just said April?


00:01:43.820 --> 00:01:44.380
Question mark.


00:01:44.380 --> 00:01:45.340
Yeah.


00:01:45.340 --> 00:01:46.020
Yeah.


00:01:46.020 --> 00:01:47.580
If I said April, that's certainly August.


00:01:47.620 --> 00:01:52.100
Yeah, the summer is moving along and so is the Python.


00:01:52.100 --> 00:01:54.500
You have some big news to share, I know.


00:01:54.500 --> 00:01:55.740
I have a bunch of fun small things,


00:01:55.740 --> 00:01:56.860
but you got some big ones.


00:01:56.860 --> 00:01:58.460
You wanna kick us off?


00:01:58.460 --> 00:02:00.240
- Yeah, let's just jump into it.


00:02:00.240 --> 00:02:03.720
So we, I think we've covered this before.


00:02:03.720 --> 00:02:07.620
There was a PEP 703 to make the global interpreter lock


00:02:07.620 --> 00:02:09.940
optional in CPython.


00:02:09.940 --> 00:02:12.900
And well, we have some news from the steering council.


00:02:12.900 --> 00:02:15.300
So the steering council has come back.


00:02:16.780 --> 00:02:21.740
There's a Thomas Wooters posted a steering council notice


00:02:21.740 --> 00:02:23.580
about PEP 703.


00:02:23.580 --> 00:02:25.620
And there's a lot of news in here


00:02:25.620 --> 00:02:29.580
that I think I'll let you help me dig through this.


00:02:29.580 --> 00:02:32.340
So I'm going to jump down to the--


00:02:32.340 --> 00:02:35.540
so there's some assumptions and some discussion


00:02:35.540 --> 00:02:39.940
around this GIL removal thing.


00:02:39.940 --> 00:02:45.660
But I'm going to jump to the short and midterm and long term


00:02:45.660 --> 00:02:46.220
actions.


00:02:46.220 --> 00:02:47.920
So it's going to be in stages.


00:02:47.920 --> 00:02:51.000
So the idea is in the short term,


00:02:51.000 --> 00:02:55.100
there'll be a no-gil build as an experimental build.


00:02:55.100 --> 00:03:00.640
And that will be a part of possibly Python,


00:03:00.640 --> 00:03:03.740
their version 3.13 or 3.14.


00:03:03.740 --> 00:03:07.960
Looks like they're hoping for 3.13, but that's,


00:03:07.960 --> 00:03:11.320
so that's like next year or something like that.


00:03:11.320 --> 00:03:14.880
So, and then, okay, so then we'll have two builds.


00:03:14.880 --> 00:03:15.700
What do we do with that?


00:03:15.700 --> 00:03:20.620
Well, midterm is to have,


00:03:20.620 --> 00:03:25.340
and the default version is gonna be the GIL version,


00:03:25.340 --> 00:03:28.920
of course, just as usual, as things go through it,


00:03:28.920 --> 00:03:31.860
as they figure out, and everybody deals with,


00:03:31.860 --> 00:03:34.620
like the rest of the Python environment and community,


00:03:34.620 --> 00:03:36.240
and all the third-party libraries figure out


00:03:36.240 --> 00:03:38.540
how to deal with the no-GIL version.


00:03:38.540 --> 00:03:41.120
So in the midterm, is there's gonna be,


00:03:42.260 --> 00:03:47.260
hopefully community support to help get through this


00:03:47.260 --> 00:03:48.920
no-gil part.


00:03:48.920 --> 00:03:52.420
And then long-term, the no-gil version


00:03:52.420 --> 00:03:55.100
becomes the main gill, or the main, not the main gill,


00:03:55.100 --> 00:03:56.380
the main version of Python,


00:03:56.380 --> 00:03:59.440
and we deprecate the GIL version.


00:03:59.440 --> 00:04:03.780
So the timeframe looks like about,


00:04:03.780 --> 00:04:05.800
the long-term isn't super long.


00:04:05.800 --> 00:04:08.140
It's like in the five plus year timeframe.


00:04:08.140 --> 00:04:11.420
Well, the plus means like, who knows how long it will be.


00:04:11.420 --> 00:04:14.060
But I think that there's a lot of energy around


00:04:14.060 --> 00:04:16.900
getting this done and getting a lot done


00:04:16.900 --> 00:04:18.120
in the next few years.


00:04:18.120 --> 00:04:25.540
- Yeah, the timeframe of it being an option in 3.13,


00:04:25.540 --> 00:04:31.740
I would put it in October of next year of 2024.


00:04:31.740 --> 00:04:36.740
- Yeah, and some alphas and betas earlier then.


00:04:36.740 --> 00:04:37.580
- Yeah, for sure.


00:04:37.580 --> 00:04:38.420
- That's pretty quick.


00:04:38.420 --> 00:04:40.980
And then, so there's just some caveats in here


00:04:40.980 --> 00:04:44.620
saying everybody's excited about it,


00:04:44.620 --> 00:04:49.380
but they reserve the right to just cancel the whole thing


00:04:49.380 --> 00:04:52.180
if it's really not working out.


00:04:52.180 --> 00:04:55.140
So I don't think that'll happen.


00:04:55.140 --> 00:04:56.940
- Yeah, yeah, we'll see how it goes.


00:04:56.940 --> 00:04:59.940
But we talked about this a little bit on our AMA episode


00:04:59.940 --> 00:05:04.580
about the value and basically what the other languages do.


00:05:04.580 --> 00:05:06.580
Most of them have some constructs,


00:05:06.580 --> 00:05:09.780
but assume that developer is kind of responsible.


00:05:09.780 --> 00:05:12.860
You pointed out that it's not as burdensome


00:05:12.860 --> 00:05:13.980
as people might think,


00:05:13.980 --> 00:05:16.660
because most code is not parallel code


00:05:16.660 --> 00:05:17.820
and you don't have to worry about it.


00:05:17.820 --> 00:05:21.300
It's just kind of a, no big deal.


00:05:21.300 --> 00:05:22.700
Don't have to think about it.


00:05:22.700 --> 00:05:24.680
Unless you're writing libraries


00:05:24.680 --> 00:05:27.380
where you know they will be used in a thread safe way,


00:05:27.380 --> 00:05:33.040
things like that, then you do have to take that into account.


00:05:33.040 --> 00:05:35.140
I think the trade-off is worth it.


00:05:35.140 --> 00:05:38.580
We're not getting, we're not trending towards a world


00:05:38.580 --> 00:05:42.060
where there are fewer CPU cores, right?


00:05:42.060 --> 00:05:42.900
- Yeah.


00:05:42.900 --> 00:05:44.580
- It's only getting to the point where,


00:05:44.580 --> 00:05:46.940
you know, like for example, on my Mac,


00:05:46.940 --> 00:05:48.300
if I run some Python program,


00:05:48.300 --> 00:05:51.700
it has access to 10% of the capacity.


00:05:51.700 --> 00:05:55.340
If I run it on my sim computer, sim racing computer,


00:05:55.340 --> 00:06:00.340
it has 1/16, access to 1/16 of the CPU capacity, right?


00:06:00.340 --> 00:06:06.660
It's just, if you wanna work in modern hardware,


00:06:07.260 --> 00:06:10.560
You really need to have access to parallelism when you need it.


00:06:10.560 --> 00:06:13.360
So for me, this is a real positive.


00:06:13.360 --> 00:06:17.980
I think the other thing that we previously covered is Meta said they would come along


00:06:17.980 --> 00:06:26.060
and dedicate three experienced engineer years to this project to help make not just it happen


00:06:26.060 --> 00:06:31.800
in CPython, but to make it happen in the important libraries outside there like NumPy and those


00:06:31.800 --> 00:06:33.780
types of things.


00:06:33.780 --> 00:06:37.260
So I think for me, this is a super positive.


00:06:37.260 --> 00:06:38.980
It's always been a little bit weird


00:06:38.980 --> 00:06:41.660
that Python has been so restricted.


00:06:41.660 --> 00:06:44.700
It's also one of those reasons that might,


00:06:44.700 --> 00:06:45.900
it's like one of those springboards


00:06:45.900 --> 00:06:48.260
that might eject someone from the community


00:06:48.260 --> 00:06:51.860
that they would otherwise love, right?


00:06:51.860 --> 00:06:53.980
You might be told, well, we gotta get better parallelism.


00:06:53.980 --> 00:06:55.460
So we're not doing this in Python,


00:06:55.460 --> 00:06:57.900
we're gonna do it in Go or some other place


00:06:57.900 --> 00:07:00.180
where you're like, kind of like Python,


00:07:00.180 --> 00:07:02.280
but I guess it's not a fit anymore, right?


00:07:02.280 --> 00:07:04.880
this would mean that it's a better fit in other places.


00:07:04.880 --> 00:07:06.460
So this is awesome.


00:07:06.460 --> 00:07:08.720
I know it's gonna be a lot of work.


00:07:08.720 --> 00:07:10.900
It's gonna be another legacy Python


00:07:10.900 --> 00:07:13.180
versus non-legacy Python sort of deal.


00:07:13.180 --> 00:07:15.020
Hopefully not too bad.


00:07:15.020 --> 00:07:17.140
Maybe having gone through it once,


00:07:17.140 --> 00:07:18.740
the community will go, "Ah, we'll do it again.


00:07:18.740 --> 00:07:20.820
"It's not as bad as we thought."


00:07:20.820 --> 00:07:23.860
- Yeah, but I mean, the goal is so that you can have,


00:07:23.860 --> 00:07:28.300
like if you're just writing a little single-threaded thing


00:07:28.300 --> 00:07:30.380
or a little script or whatever,


00:07:30.380 --> 00:07:33.120
the small sort of things you do with Python also,


00:07:33.120 --> 00:07:36.140
that those things are just as easy as they've always been


00:07:36.140 --> 00:07:38.060
and just as fast.


00:07:38.060 --> 00:07:39.420
That's what we want.


00:07:39.420 --> 00:07:40.820
- Yeah, that's certainly the goal.


00:07:40.820 --> 00:07:45.820
I'm just thinking about the code that uses the Python API


00:07:45.820 --> 00:07:47.500
for an important library is that,


00:07:47.500 --> 00:07:53.260
calls the API, release the gill, take the GIL.


00:07:53.260 --> 00:07:54.220
You know, when there's no more gill,


00:07:54.220 --> 00:07:56.380
does that library become unusable?


00:07:56.380 --> 00:07:57.540
Does that become a no-op


00:07:57.540 --> 00:08:00.380
and it's just undefined behavior.


00:08:00.380 --> 00:08:01.940
You know what I mean?


00:08:01.940 --> 00:08:05.700
There will be some kind of consequence in the ecosystem.


00:08:05.700 --> 00:08:07.980
I'm not sure what the knock-on effect will be.


00:08:07.980 --> 00:08:10.100
- Yeah, yeah, and it'll be interesting to see


00:08:10.100 --> 00:08:15.100
how applications like Django and things like that


00:08:15.100 --> 00:08:17.300
deal with it, so.


00:08:17.300 --> 00:08:19.580
- Yeah, for sure.


00:08:19.580 --> 00:08:22.380
And Liz out there points out,


00:08:22.380 --> 00:08:24.280
get through this long-winded breakup with the Gill.


00:08:24.280 --> 00:08:27.520
We have a semi-toxic and ambivalent relationship


00:08:27.520 --> 00:08:28.040
with a GIL.


00:08:28.040 --> 00:08:30.440
We love it and hate it at the same time, for sure.


00:08:30.440 --> 00:08:33.440
Yep, definitely.


00:08:33.440 --> 00:08:39.200
All right, well, Thomas, thanks for the update on this.


00:08:39.200 --> 00:08:42.000
And it's going to be an interesting journey.


00:08:42.000 --> 00:08:44.320
Brian will give us plenty to talk about, so that's cool.


00:08:44.320 --> 00:08:45.840
Yeah, stick with this.


00:08:45.840 --> 00:08:47.720
Make sure you subscribe to Python Bytes


00:08:47.720 --> 00:08:51.480
to keep up on everything that's going on with the GIL breakup.


00:08:51.480 --> 00:08:53.200
Yeah, exactly.


00:08:53.200 --> 00:08:53.920
It'll be fun.


00:08:53.920 --> 00:08:56.080
All right, I gotta adjust my browser before we switch


00:08:56.080 --> 00:08:57.480
or I'm gonna spoil the joke.


00:08:57.480 --> 00:09:03.640
All right, so I wanted to, just a quick one,


00:09:03.640 --> 00:09:05.080
this is not Python specific,


00:09:05.080 --> 00:09:06.800
but it's super important for web developers.


00:09:06.800 --> 00:09:11.220
So we had Google with Flock, remember that?


00:09:11.220 --> 00:09:15.200
Federated cohorts of learning of cohorts.


00:09:15.200 --> 00:09:16.040
- Oh yeah.


00:09:16.040 --> 00:09:20.040
- And then we had the Sandbox groups,


00:09:20.040 --> 00:09:21.160
which was kind of like that.


00:09:21.160 --> 00:09:23.080
I don't remember exactly what that was called,


00:09:23.080 --> 00:09:29.760
But that was another technique because the flocks met with such resistance.


00:09:29.760 --> 00:09:36.360
You could really do some bad stuff by putting people into these groups.


00:09:36.360 --> 00:09:41.760
I'm not sure where the sandbox stands, but it turns out there's now a new proposal to


00:09:41.760 --> 00:09:45.960
try to get rid of third-party cookies.


00:09:45.960 --> 00:09:50.240
My feeling, I don't know for sure, but Google's trying to get rid of third-party cookies because


00:09:50.240 --> 00:09:55.720
they're easy to block and it hurts their advertising and their retargeting if you can just easily


00:09:55.720 --> 00:09:58.720
block it by checking a box like, "Do you want to be tracked?"


00:09:58.720 --> 00:09:59.720
"No thanks."


00:09:59.720 --> 00:10:01.540
You know, in your browser, right?


00:10:01.540 --> 00:10:03.820
Like Firefox does, like Vivaldi does.


00:10:03.820 --> 00:10:04.820
You know what?


00:10:04.820 --> 00:10:08.880
Oddly, I don't remember that setting being a default in Chrome that it just offers to


00:10:08.880 --> 00:10:10.200
block the Google network.


00:10:10.200 --> 00:10:11.200
That's interesting.


00:10:11.200 --> 00:10:13.200
It must have been an oversight.


00:10:13.200 --> 00:10:22.200
So anyway, they're now out with a new thing and over on a bleeping computer they say,


00:10:22.200 --> 00:10:26.660
"Browser developers push back against Google's Web DRM."


00:10:26.660 --> 00:10:36.380
So basically, the different websites can choose or be made to choose to force you to verify


00:10:36.380 --> 00:10:43.700
certain things that basically prohibit things like ad blocking like prove that


00:10:43.700 --> 00:10:46.940
you don't have ad blocking on so you can visit my website or I'm going to tell


00:10:46.940 --> 00:10:50.300
you you can't right new authentication system could let websites block


00:10:50.300 --> 00:10:55.740
extensions jailbroken devices and other important things so the headline is


00:10:55.740 --> 00:10:59.220
Google has been trying to implement plans to move beyond cookies for years


00:10:59.220 --> 00:11:05.660
that sounds great comma without denying its partners and itself the means to


00:11:05.660 --> 00:11:11.060
sell targeted ads which form the backbone of the company's revenue. This


00:11:11.060 --> 00:11:17.460
new one comes, "Proposal to guarantee user privacy and security comes at the


00:11:17.460 --> 00:11:25.940
cost of freedom of functionality aka the open web." So there's a bunch of, it talks


00:11:25.940 --> 00:11:31.540
a little bit about how this works, but basically the website has to come along


00:11:31.540 --> 00:11:37.900
and decide what browsers it trusts and the web browsers themselves have to


00:11:37.900 --> 00:11:44.740
implement a mechanism to guarantee who they are. Not surprisingly, Vivaldi comes


00:11:44.740 --> 00:11:48.260
along as one of the first people to push back against this and calling it


00:11:48.260 --> 00:11:53.740
dangerous. If an entity has the power to decide which browsers are trusted and


00:11:53.740 --> 00:11:58.900
which are not, they say, there's no guarantee that they will trust any given


00:11:58.900 --> 00:12:02.940
browser and a new one that comes along would not by default not be trusted


00:12:02.940 --> 00:12:07.360
until it's somehow proven itself to the people who run that website. And what


00:12:07.360 --> 00:12:11.200
about the next website? What about the next? And so on. You have all these kind


00:12:11.200 --> 00:12:17.040
of in an interesting position like this. They're just, they use a fork of


00:12:17.040 --> 00:12:24.160
Chrome that's you know stripped down of a lot of things. But when you go to a


00:12:24.160 --> 00:12:27.880
website or you look at the user agent that's how browsers nowadays tell people


00:12:27.880 --> 00:12:32.280
who they are, right? You just send whatever you want, but it usually is a consistent thing.


00:12:32.280 --> 00:12:38.280
Vivaldi lies and doesn't say we're Vivaldi version, I don't know, whatever version we're on.


00:12:38.280 --> 00:12:43.480
It says I'm Chrome and whatever the current version of Chrome is, it just says that.


00:12:43.480 --> 00:12:50.200
That way websites don't go, oh, you're going to need to use Chrome because your web browser isn't


00:12:50.200 --> 00:12:55.640
one of those. You know, it's like it actually is internally identical. It just it's got a


00:12:55.640 --> 00:12:59.320
a different name, right? So they're in this situation where they kind of lie to the world


00:12:59.320 --> 00:13:06.520
about who they are, the web server world. And this would kind of break that as well.


00:13:06.520 --> 00:13:14.920
The Brave team says, they don't really care, they're not shipping it. We'll see if that's


00:13:14.920 --> 00:13:19.680
a problem or not. And Mozilla doesn't have an official opinion, but one of the folks


00:13:19.680 --> 00:13:23.520
said, "The mechanisms to attempt to restrict these choices are harmful to the openness


00:13:23.520 --> 00:13:31.240
of the web ecosystem. And this one might be interesting to you, Brian. Additionally, the


00:13:31.240 --> 00:13:36.280
use cases listed depend upon the ability to detect non-human traffic, which as described


00:13:36.280 --> 00:13:43.560
would likely obstruct things like web assistive technologies or automated testing. So anyway,


00:13:43.560 --> 00:13:51.520
this is one of those things that probably deserves enough interest from people in the


00:13:51.520 --> 00:13:55.520
the Python web world just voice a little bit of no.


00:13:55.520 --> 00:13:59.640
>> No. The answer is no.


00:13:59.640 --> 00:14:06.800
>> Yeah. So anyway, it's not super actionable.


00:14:06.800 --> 00:14:08.120
It's not a thing that's out there yet,


00:14:08.120 --> 00:14:09.720
but like the previous two,


00:14:09.720 --> 00:14:15.520
it's the folks behind the web side of Google,


00:14:15.520 --> 00:14:16.800
the web browser side of Google,


00:14:16.800 --> 00:14:18.600
the web standard side of Google saying,


00:14:18.600 --> 00:14:28.080
How can we basically change the web so that we will be able to completely still control


00:14:28.080 --> 00:14:32.280
and track and sell you?


00:14:32.280 --> 00:14:34.960
Right now, the third-party cookie thing is not looking good.


00:14:34.960 --> 00:14:39.680
Even parliaments and Congress have gotten into it and said, "Oh, you can't have these


00:14:39.680 --> 00:14:40.680
cookies.


00:14:40.680 --> 00:14:42.200
We have these stupid pop-ups everywhere."


00:14:42.200 --> 00:14:46.280
This would make those all go away and you would just be part of the machine.


00:14:46.280 --> 00:14:48.520
You know what I mean?


00:14:48.520 --> 00:14:53.520
This is just the third version of how do we make them part of the machine.


00:14:53.520 --> 00:14:56.420
And this one I think is probably the worst because not only is it something that would


00:14:56.420 --> 00:15:01.540
go into Chrome, which was the previous two, but this is something that would basically


00:15:01.540 --> 00:15:04.880
make the websites reject browsers.


00:15:04.880 --> 00:15:07.800
You might say, "Hey, Michael, why would a website do this?"


00:15:07.800 --> 00:15:13.480
I mean, obviously, terrible places like CNN that have some like 45 trackers they put on


00:15:13.480 --> 00:15:15.440
you every visit.


00:15:15.440 --> 00:15:16.720
You might see why they would do that.


00:15:16.720 --> 00:15:22.200
But why would random little website not want you to come?


00:15:22.200 --> 00:15:25.960
Well there could be things like, "Oh, do you want to have Google ads on your site or any


00:15:25.960 --> 00:15:29.480
double click or any ads from any ad network?


00:15:29.480 --> 00:15:34.760
We're not going to allow you to have them at all unless your website has this, 'Please


00:15:34.760 --> 00:15:38.280
reject the ones that we don't like' sort of setting turned on.


00:15:38.280 --> 00:15:41.200
Here's the script that will help you do that."


00:15:41.200 --> 00:15:43.480
So it's not ideal.


00:15:43.480 --> 00:15:48.480
It's like nobody can make money off of traffic except for me.


00:15:48.480 --> 00:15:49.480
Sort of thing.


00:15:49.480 --> 00:15:51.480
Yeah, it's pretty bad.


00:15:51.480 --> 00:15:54.480
It's kind of a monopoly type of situation.


00:15:54.480 --> 00:15:57.480
One, in the browser space, and then two, in the ad space.


00:15:57.480 --> 00:15:59.480
They're kind of both sides of that market.


00:15:59.480 --> 00:16:01.480
It's pretty much not good.


00:16:01.480 --> 00:16:05.480
I wonder how many people are turning off ads.


00:16:05.480 --> 00:16:09.480
Because I've got Vivaldi running, and it's turning off ads.


00:16:09.480 --> 00:16:17.000
turning off ads. And I run into websites that say, "You can't read this unless you turn


00:16:17.000 --> 00:16:21.360
off your ad blocker." And I'm like, "Well, I'm not going to read it then. I'll go somewhere


00:16:21.360 --> 00:16:29.000
else." But how many people really do? I mean, it can't be that many of us.


00:16:29.000 --> 00:16:34.320
I would say for developers, the developer audience, looking at when I used to run Google


00:16:34.320 --> 00:16:42.400
analytics before I decided they were evil and turned them off, it was about 40 to 50%


00:16:42.400 --> 00:16:45.360
of the traffic would not show up.


00:16:45.360 --> 00:16:46.360
Yeah, okay.


00:16:46.360 --> 00:16:49.400
So that, I mean, it's not quite all blocking.


00:16:49.400 --> 00:16:54.080
There could be robots like, you know, requests doing a request, like Python requests doing


00:16:54.080 --> 00:16:57.640
a request that also wouldn't register, but that's pretty good.


00:16:57.640 --> 00:16:58.640
And just, you know.


00:16:58.640 --> 00:16:59.640
Yeah.


00:16:59.640 --> 00:17:03.000
We'll go back to magazine ads never had tracking in them,


00:17:03.000 --> 00:17:04.200
and they did fine.


00:17:04.200 --> 00:17:05.760
Yeah, exactly.


00:17:05.760 --> 00:17:10.720
So I mean, it's not just we're trying


00:17:10.720 --> 00:17:13.240
to be jerks to websites, and we don't want to pay for stuff,


00:17:13.240 --> 00:17:15.280
or we don't want to look at ads.


00:17:15.280 --> 00:17:16.880
This headline-- how long is this?


00:17:16.880 --> 00:17:19.560
This is just six months ago, or nine months ago.


00:17:19.560 --> 00:17:21.560
"Hackers Abuse Google Ads to Spread Malware


00:17:21.560 --> 00:17:22.760
in Legit Software."


00:17:22.760 --> 00:17:24.480
There's just stuff over and over.


00:17:24.480 --> 00:17:29.320
Plus there's all the reselling stuff, the NSA, CIA


00:17:29.320 --> 00:17:32.520
stuff, with buying your, I mean, there's


00:17:32.520 --> 00:17:34.960
just lots of, it's not just, I don't want to


00:17:34.960 --> 00:17:35.400
see ads.


00:17:35.400 --> 00:17:38.200
There's really negative effects to these things.


00:17:38.200 --> 00:17:40.600
And it's honestly, it's a little bit


00:17:40.600 --> 00:17:43.200
disappointing that Google is doing this.


00:17:43.200 --> 00:17:43.760
Right.


00:17:43.760 --> 00:17:46.600
And we have advertisers and we put ads on our


00:17:46.600 --> 00:17:50.320
website for the, and it's, but it's, there's


00:17:50.320 --> 00:17:50.960
no tracking.


00:17:50.960 --> 00:17:53.880
So, and they're not even blocked because we're


00:17:53.880 --> 00:17:55.400
not trying to send it through some creepy


00:17:55.400 --> 00:17:56.480
network with retargeting.


00:17:56.480 --> 00:18:01.740
And we're just, we tell you things that we've evaluated and thought you might like, and


00:18:01.740 --> 00:18:04.180
people paid us to help spread the word.


00:18:04.180 --> 00:18:06.860
And you know, there's certainly ways you could do that.


00:18:06.860 --> 00:18:07.860
Right?


00:18:07.860 --> 00:18:11.560
Like this last thing, this page we're on here, if it had ads, I don't know if it does or


00:18:11.560 --> 00:18:18.420
not because I'm blocking them like you, but if it did, it could easily show you ads about


00:18:18.420 --> 00:18:19.420
privacy.


00:18:19.420 --> 00:18:20.580
It could show you ad about browsers.


00:18:20.580 --> 00:18:24.980
There's like certainly relevant ads that can be put on here just based on the context of


00:18:24.980 --> 00:18:26.760
the page, not who is viewing it.


00:18:26.760 --> 00:18:27.060
Right.


00:18:27.060 --> 00:18:30.580
And those work almost as well without all the negative stuff.


00:18:30.580 --> 00:18:36.320
So anyway, one more thing to keep an eye on folks and


00:18:36.320 --> 00:18:39.500
Christopher on the audience says, interesting how Google has lately.


00:18:39.500 --> 00:18:44.640
Continuously continuously been trying to do the exact opposite of don't be evil.


00:18:44.640 --> 00:18:49.660
I don't shareholder value, Christopher shareholder value.


00:18:49.660 --> 00:18:50.120
Let's have it.


00:18:50.120 --> 00:18:54.420
Well, right over to you.


00:18:54.820 --> 00:18:56.820
that's, that's pretty rough news, man.


00:18:56.820 --> 00:18:58.260
No, it's okay.


00:18:58.260 --> 00:19:01.780
I mean, the last two sounded bad too, and they both got, you know,


00:19:01.780 --> 00:19:03.720
yeah, pushed out of existence.


00:19:03.720 --> 00:19:05.360
I suspect this one will as well, but


00:19:05.360 --> 00:19:07.560
rough transition.


00:19:07.560 --> 00:19:11.140
Oh, that, that was pretty rough.


00:19:11.140 --> 00:19:11.640
Sorry.


00:19:11.640 --> 00:19:13.840
Anyway.


00:19:13.840 --> 00:19:17.820
so there's a, there's an article.


00:19:17.820 --> 00:19:19.680
Oh, I lost the author.


00:19:19.680 --> 00:19:24.300
It's from, Mattia, Mattias from Matias.


00:19:24.660 --> 00:19:28.260
how rough changed my Python programming habits.


00:19:28.260 --> 00:19:31.820
And we've covered rough, I think several times on the show,


00:19:31.820 --> 00:19:35.780
but I, and I've used it on a lot of projects,


00:19:35.780 --> 00:19:39.460
but I was excited to see this


00:19:39.460 --> 00:19:41.240
because it's some stuff about rough


00:19:41.240 --> 00:19:43.380
that I haven't been paying attention to.


00:19:43.380 --> 00:19:45.260
It just works and it's really fast,


00:19:45.260 --> 00:19:46.940
but there's a whole bunch of cool stuff.


00:19:46.940 --> 00:19:49.900
So this, in this article talks about,


00:19:49.900 --> 00:19:52.060
he talks about using pre-commit


00:19:52.060 --> 00:19:56.460
or has long been using pre-commit and flake aid and black


00:19:56.460 --> 00:19:58.700
and eyesore and all that sort of stuff.


00:19:58.700 --> 00:20:01.300
And I knew that Ruff was going to start picking up


00:20:01.300 --> 00:20:03.020
some of these extra things,


00:20:03.020 --> 00:20:04.700
but I didn't know how far it went.


00:20:04.700 --> 00:20:07.900
So in this article, he talks about using different rules


00:20:07.900 --> 00:20:12.900
within Ruff, like PyFlakes and PyCode styles.


00:20:12.900 --> 00:20:17.620
So that's, and the McCabe for


00:20:18.500 --> 00:20:21.500
cyclomatic complexity checker,


00:20:21.500 --> 00:20:24.260
just to make sure that you don't have too many nested


00:20:24.260 --> 00:20:27.060
huge loops and different things like that.


00:20:27.060 --> 00:20:28.060
- I love that magic.


00:20:28.060 --> 00:20:31.700
- So all these things you can turn on within,


00:20:31.700 --> 00:20:34.180
just within, within rough.


00:20:34.180 --> 00:20:36.700
I sort, pep8 naming, that's cool.


00:20:36.700 --> 00:20:38.160
Pie upgrade, love that.


00:20:38.160 --> 00:20:42.200
Flake, flake8 2020, and I'm gonna shortly show


00:20:42.200 --> 00:20:43.260
where you can look these up.


00:20:43.260 --> 00:20:45.740
So there's a whole bunch of really cool things.


00:20:45.740 --> 00:20:48.320
I really like bugbear, flake8 bugbear,


00:20:48.320 --> 00:20:53.200
also. So apparently that's been supported for almost a year within rough.


00:20:53.200 --> 00:20:56.640
like a Django pie simplify, but this,


00:20:56.640 --> 00:21:01.320
these are just the ones that this person likes or is he trying out and using.


00:21:01.320 --> 00:21:06.440
so I went ahead and kept looking. So that's, that's this article,


00:21:06.440 --> 00:21:09.760
which is a pretty decent article about using how it changes.


00:21:09.760 --> 00:21:13.360
The one of the things I'm going to highlight, and I've been trying to use,


00:21:13.360 --> 00:21:16.360
I, when I tried to use pre-commit a while ago,


00:21:16.480 --> 00:21:18.080
I haven't been using it lately


00:21:18.080 --> 00:21:21.200
because a lot of these things take a bit.


00:21:21.200 --> 00:21:25.560
They take a bit of time and it's, he writes,


00:21:25.560 --> 00:21:28.640
there's always a trade-off between development speed,


00:21:28.640 --> 00:21:31.720
i.e. waiting on git commit is very boring,


00:21:31.720 --> 00:21:33.580
and strictness, and I have to agree.


00:21:33.580 --> 00:21:37.600
So what I've been doing is mostly putting these tests in CI


00:21:37.600 --> 00:21:39.800
and not doing it as part of pre-commit,


00:21:39.800 --> 00:21:44.160
but having it within Ruff is super fast


00:21:44.160 --> 00:21:46.960
and you can go back to using pre-commit with rough


00:21:46.960 --> 00:21:49.060
and just turn on a bunch of these things.


00:21:49.060 --> 00:21:54.060
So also linking to the rough configuration documentation.


00:21:54.060 --> 00:21:57.240
And for example, all these things aren't turned on


00:21:57.240 --> 00:22:02.240
by default, we get, I think the PyCode style warnings.


00:22:02.240 --> 00:22:09.140
Oh, it doesn't turn on PyCode style warnings.


00:22:09.140 --> 00:22:13.100
By default, it turns on PyCode style errors


00:22:13.100 --> 00:22:15.860
and PyFlakes errors.


00:22:15.860 --> 00:22:18.100
So those are turned on by default


00:22:18.100 --> 00:22:20.140
and you turn it on with this like,


00:22:20.140 --> 00:22:23.100
within the Tomo file with like a select equal


00:22:23.100 --> 00:22:25.960
and then you have like just a string of characters


00:22:25.960 --> 00:22:30.140
like E for PyCode style, F for PyFlakes.


00:22:30.140 --> 00:22:31.960
And then there's a whole list of these.


00:22:31.960 --> 00:22:35.700
So there's an example of you do B for Flake a bug bear.


00:22:35.700 --> 00:22:38.260
And then there's another page for rules


00:22:39.180 --> 00:22:43.780
where in the rules list all of the different ones.


00:22:43.780 --> 00:22:45.480
So like the PyFlex start with F.


00:22:45.480 --> 00:22:47.340
So if you would add F for that,


00:22:47.340 --> 00:22:49.640
but there's a whole ton of these things


00:22:49.640 --> 00:22:55.140
that I'm excited about trying to turn more of them on.


00:22:55.140 --> 00:22:58.160
And I have on one of my projects and it's just super fast.


00:22:58.160 --> 00:23:00.600
So you just like within pre-commit.


00:23:00.600 --> 00:23:02.820
So there, when I try to commit something,


00:23:02.820 --> 00:23:06.300
it'll run these on the files that have changed


00:23:07.160 --> 00:23:10.260
and try to run or I can't, I actually don't know.


00:23:10.260 --> 00:23:12.280
It's happening so fast, I don't care.


00:23:12.280 --> 00:23:15.420
Maybe it does the whole thing, but it's just super fast now


00:23:15.420 --> 00:23:16.680
and I don't have to wait to commit,


00:23:16.680 --> 00:23:18.200
but I know the checks are being done.


00:23:18.200 --> 00:23:19.040
Super fun.


00:23:19.040 --> 00:23:22.200
The other bit that I wanted to,


00:23:22.200 --> 00:23:26.000
the one last link I want to share is Astral,


00:23:26.000 --> 00:23:29.240
which is the now company around Ruff,


00:23:29.240 --> 00:23:35.200
has a Ruff pre-commit hook that you can set up


00:23:35.320 --> 00:23:38.400
for GitHub Actions.


00:23:38.400 --> 00:23:42.600
So if you just add this little snippet


00:23:42.600 --> 00:23:45.560
that we have a link to, there's just an


00:23:45.560 --> 00:23:52.760
Astral-SH Rough Pre-Commit Repository


00:23:52.760 --> 00:23:56.080
with a version and with a hook,


00:23:56.080 --> 00:23:59.560
and that will make it so that your project


00:23:59.560 --> 00:24:01.680
runs within GitHub Actions also.


00:24:01.680 --> 00:24:02.880
So, super fun.


00:24:02.880 --> 00:24:04.660
- Okay, yeah, very cool.


00:24:04.660 --> 00:24:10.300
I also like having it set up so not as a pre-commit hook,


00:24:10.300 --> 00:24:13.820
but also as a PyCharm plugin.


00:24:13.820 --> 00:24:16.940
>> Yeah. I just misspoke.


00:24:16.940 --> 00:24:19.300
This isn't GitHub Action, it's a pre-commit hook.


00:24:19.300 --> 00:24:22.140
So it hooks rough in with pre-commit. Sorry about that.


00:24:22.140 --> 00:24:26.220
>> Yeah. Nice. Well, so that way,


00:24:26.220 --> 00:24:27.880
as you're typing and you see the stuff,


00:24:27.880 --> 00:24:30.180
it just puts a little squigglies under there and


00:24:30.180 --> 00:24:32.660
suggests sometimes it can even auto-fix it,


00:24:32.660 --> 00:24:36.080
Alt + Enter, fix this thing by, for example,


00:24:36.080 --> 00:24:38.440
applying strict equals true and the zip.


00:24:38.440 --> 00:24:39.380
- Okay. - Stuff like that.


00:24:39.380 --> 00:24:42.920
- So you just have Ruff running in PyCharm.


00:24:42.920 --> 00:24:44.400
- And it just runs constantly as you type,


00:24:44.400 --> 00:24:48.900
but again, it's so fast, like, you know, you don't notice.


00:24:48.900 --> 00:24:50.000
(laughing)


00:24:50.000 --> 00:24:51.160
- Well, one of the-- - Plus I have 10 cores.


00:24:51.160 --> 00:24:52.320
I could do it over there.


00:24:52.320 --> 00:24:53.320
I could do one of that. - One of the fun things


00:24:53.320 --> 00:24:57.400
with having it be a commit hook also


00:24:57.400 --> 00:25:00.800
is you can set it up to auto-fix.


00:25:00.800 --> 00:25:03.340
So rough isn't just you have errors,


00:25:03.340 --> 00:25:04.840
but it can find the errors and fix them


00:25:04.840 --> 00:25:06.320
and not even tell you about them.


00:25:06.320 --> 00:25:08.960
It just fixes them. - That's nice, yeah.


00:25:08.960 --> 00:25:11.740
- So like, well, I turned on bug bear


00:25:11.740 --> 00:25:12.840
or I can't remember what,


00:25:12.840 --> 00:25:15.120
I turned on one of the extra rules


00:25:15.120 --> 00:25:19.900
and it showed some spaces at the end of the lines.


00:25:19.900 --> 00:25:24.400
And then I added the command to just fix them for me.


00:25:24.400 --> 00:25:26.000
And then it just didn't do it.


00:25:26.000 --> 00:25:28.560
It just would fix them without even telling me,


00:25:28.560 --> 00:25:30.040
which is great.


00:25:30.040 --> 00:25:31.040
way better than complaining.


00:25:31.040 --> 00:25:36.480
Yeah, like I sort stuff. Well, if I if I, if I'm just just sort


00:25:36.480 --> 00:25:38.800
them, if I got them in the wrong order, just reorder them. That's


00:25:38.800 --> 00:25:39.760
fine. So


00:25:39.760 --> 00:25:44.040
yeah, and Henry says rep also has a VS Code language server


00:25:44.040 --> 00:25:45.560
plugin as well. So


00:25:45.560 --> 00:25:51.800
either side of the fence that you sit on for those. That's all


00:25:51.800 --> 00:25:52.320
good. All right.


00:25:52.320 --> 00:25:57.120
On to the next on the last. All right, on the last.


00:25:59.040 --> 00:26:05.680
We've discussed FS-spec file system specification, I'm guessing.


00:26:05.680 --> 00:26:14.240
And the idea of FS-spec was that what you can do is you can have all these different file systems


00:26:14.240 --> 00:26:22.320
that when you would do like open, you know, open some file name, encoding is this, append, so on,


00:26:22.320 --> 00:26:28.720
that kind of work, you could point it at different places besides the hard drive.


00:26:28.720 --> 00:26:30.480
You could point it at S3.


00:26:30.480 --> 00:26:37.880
You could point it at some kind of web dev or some other blob storage, network drive,


00:26:37.880 --> 00:26:40.800
all these different things that you could possibly do.


00:26:40.800 --> 00:26:45.240
You have exactly the same API as just opening a standard file.


00:26:45.240 --> 00:26:51.040
That was like with open as file stream, you go do your thing.


00:26:51.040 --> 00:26:57.860
Well, a lot of us are fans of using Pathlib, right?


00:26:57.860 --> 00:27:03.160
So create the path, you do like a cool thing, you do the slash, the division is overridden


00:27:03.160 --> 00:27:06.580
to look like you can separate the file names and all that, right?


00:27:06.580 --> 00:27:12.480
So there's this thing called Universal Pathlib now that looks like this project was created


00:27:12.480 --> 00:27:14.200
two months ago.


00:27:14.200 --> 00:27:15.680
And this was sent in to us.


00:27:15.680 --> 00:27:18.080
I want to say thank you to Justin Flannery.


00:27:18.080 --> 00:27:21.080
Remember he had that camping CLI thing


00:27:21.080 --> 00:27:24.080
that we could find campsites that are sold out and stuff.


00:27:24.080 --> 00:27:25.080
- Yeah.


00:27:25.080 --> 00:27:27.080
- And so we talked about that a few months ago.


00:27:27.080 --> 00:27:29.080
So he sent this in and said,


00:27:29.080 --> 00:27:31.080
"Look, FSSpec is awesome,


00:27:31.080 --> 00:27:34.080
"but now there's a universal Pathlib


00:27:34.080 --> 00:27:37.080
"and it extends the built-in Pathlib,


00:27:37.080 --> 00:27:40.080
"so the Pathlib module.path API


00:27:40.080 --> 00:27:44.080
"to use basically FSSpec, which is awesome."


00:27:44.080 --> 00:27:46.080
And so if you want to talk to things


00:27:46.080 --> 00:27:48.720
to things that are not file systems,


00:27:48.720 --> 00:27:51.720
but you really like the path class,


00:27:51.720 --> 00:27:53.240
then you can use this one.


00:27:53.240 --> 00:27:56.200
Here they're saying, you know, import it as upath.


00:27:56.200 --> 00:28:00.600
You could also just import it as path if you want.


00:28:00.600 --> 00:28:02.120
As long as you're not mixing it up with the other


00:28:02.120 --> 00:28:03.240
and just treat it the same, right?


00:28:03.240 --> 00:28:06.520
So for example, you could say upath


00:28:06.520 --> 00:28:09.560
instead of giving it a directory name or a file name,


00:28:09.560 --> 00:28:12.480
you would say like S3 colon, you know,


00:28:12.480 --> 00:28:16.920
slash slash some path to your S3 information,


00:28:16.920 --> 00:28:18.320
slash some file, right?


00:28:18.320 --> 00:28:20.400
And you could ask, what is the name?


00:28:20.400 --> 00:28:21.240
What is the suffix?


00:28:21.240 --> 00:28:22.360
Does it exist?


00:28:22.360 --> 00:28:23.560
And read it, and so on.


00:28:23.560 --> 00:28:25.440
Just like you would with a normal file,


00:28:25.440 --> 00:28:27.560
but now this thing is in S3.


00:28:27.560 --> 00:28:31.480
So we have file, we have Azure storage,


00:28:31.480 --> 00:28:33.760
we have HTTP and HTTPS,


00:28:33.760 --> 00:28:38.760
we have Hadoop, Google Cloud, S3, Web Dev,


00:28:38.760 --> 00:28:40.920
and one I think that would be really cool


00:28:40.920 --> 00:28:42.800
for testing, Brian, is memory.


00:28:42.800 --> 00:28:43.640
- Yeah. - Right?


00:28:43.640 --> 00:28:45.000
You wanna create a file, work with it,


00:28:45.000 --> 00:28:47.640
make sure, you know, pass this path-like object


00:28:47.640 --> 00:28:49.440
to other APIs, let it do things,


00:28:49.440 --> 00:28:52.080
and then it just goes away when it goes away, right?


00:28:52.080 --> 00:28:53.040
That's pretty cool.


00:28:53.040 --> 00:28:58.340
- Yeah, I love using memory file systems for testing.


00:28:58.340 --> 00:28:59.920
- Yeah, absolutely.


00:28:59.920 --> 00:29:04.480
Like, SQLite has one memory colon, I think it is,


00:29:04.480 --> 00:29:06.360
or maybe two colons on the front.


00:29:06.360 --> 00:29:07.520
Same thing for the database.


00:29:07.520 --> 00:29:08.680
But yeah, this is really handy.


00:29:08.680 --> 00:29:10.040
Not to, you might be wondering, like,


00:29:10.040 --> 00:29:11.520
Why would I ever use memory?


00:29:11.520 --> 00:29:13.560
Because you don't want to touch the file system.


00:29:13.560 --> 00:29:16.240
You just need to pass a file and there you go.


00:29:16.240 --> 00:29:17.440
So super simple.


00:29:17.440 --> 00:29:19.000
There's a little example notebook


00:29:19.000 --> 00:29:21.600
that I blasted past somewhere.


00:29:21.600 --> 00:29:22.560
People can check that out


00:29:22.560 --> 00:29:24.700
if they want to just see how to use it.


00:29:24.700 --> 00:29:26.240
Okay.


00:29:26.240 --> 00:29:27.300
Bunch of examples play with it.


00:29:27.300 --> 00:29:29.520
So if you are working with these alternate file systems,


00:29:29.520 --> 00:29:31.840
this is definitely worth giving it a look.


00:29:31.840 --> 00:29:33.200
- Yeah, cool.


00:29:33.200 --> 00:29:34.440
Nice.


00:29:34.440 --> 00:29:36.360
- All right, well, I have no extras.


00:29:36.360 --> 00:29:37.960
How extra are you feeling today?


00:29:39.240 --> 00:29:41.520
I guess I don't really have any extras either.


00:29:41.520 --> 00:29:44.340
Just thinking something funny might be nice.


00:29:44.340 --> 00:29:45.460
- I think so.


00:29:45.460 --> 00:29:47.620
And I know that you've done,


00:29:47.620 --> 00:29:49.200
you do a lot of C these days still,


00:29:49.200 --> 00:29:50.880
and I've traditionally done some,


00:29:50.880 --> 00:29:52.560
although not too much lately.


00:29:52.560 --> 00:29:54.960
So I wanna have both a joke and something


00:29:54.960 --> 00:29:56.880
to help people think about pointers,


00:29:56.880 --> 00:29:58.220
and pointers are pointers.


00:29:58.220 --> 00:30:01.640
'Cause Python is all about pointers,


00:30:01.640 --> 00:30:03.000
even though we don't realize it, right?


00:30:03.000 --> 00:30:05.840
When you create a variable, it points out to a thing.


00:30:05.840 --> 00:30:07.060
You got a list.


00:30:07.060 --> 00:30:09.080
It doesn't hold the value of the thing


00:30:09.080 --> 00:30:11.000
that's in the list, it holds the pointers,


00:30:11.000 --> 00:30:13.300
that point to the things that are the values.


00:30:13.300 --> 00:30:14.720
So here's the joke.


00:30:14.720 --> 00:30:18.240
There's an int just written out in memory,


00:30:18.240 --> 00:30:20.560
just out in space floating there.


00:30:20.560 --> 00:30:23.160
And there's an int star, so a pointer to the int,


00:30:23.160 --> 00:30:25.720
it's like an anime character pointing out to it.


00:30:25.720 --> 00:30:27.360
And then what is a pointer to a pointer?


00:30:27.360 --> 00:30:30.480
Well, just the anime character pointing at the int star


00:30:30.480 --> 00:30:31.860
that points over to the other one.


00:30:31.860 --> 00:30:33.240
What do you think of this?


00:30:33.240 --> 00:30:35.860
- I think it's just a great, I agree with the comment.


00:30:35.860 --> 00:30:38.680
It's just a great way to describe pointers.


00:30:38.680 --> 00:30:39.800
Actually somebody pointing.


00:30:39.800 --> 00:30:43.760
- Yeah, it seems completely non-scary.


00:30:43.760 --> 00:30:46.720
Whereas thinking about int star star, void star star,


00:30:46.720 --> 00:30:49.480
something like that is pretty crazy.


00:30:49.480 --> 00:30:53.220
Wow, it's got 18,000 likes on,


00:30:53.220 --> 00:30:55.180
I don't know what it's on.


00:30:55.180 --> 00:30:56.580
What website is this, Brian?


00:30:56.580 --> 00:31:01.900
- The company formerly known as Twitter?


00:31:01.900 --> 00:31:05.100
- Yes.


00:31:05.100 --> 00:31:07.840
And yet what is the title of the pages,


00:31:07.840 --> 00:31:14.440
and so on Twitter. The domain is twitter.com, but the logo is X. I don't know what a mess


00:31:14.440 --> 00:31:17.040
this is. But anyway, the joke is funny.


00:31:17.040 --> 00:31:22.840
>>Ted: Well, and the icons, there's an X for closing, which is still confusing.


00:31:22.840 --> 00:31:28.400
>>Derek Yeah, there's two Xs in my tab up there. The left X and the right X.


00:31:28.400 --> 00:31:37.240
>>Ted Yeah. Hopefully nobody renames their company greater than greater than and weird


00:31:37.240 --> 00:31:38.560
for things like that.


00:31:38.560 --> 00:31:39.520
- Yeah, absolutely.


00:31:39.520 --> 00:31:43.040
- So, hey, I wanna add one more funny thing.


00:31:43.040 --> 00:31:46.280
This is not really programming related,


00:31:46.280 --> 00:31:49.460
but I've been watching a lot of like streaming,


00:31:49.460 --> 00:31:51.680
catching up on some TV shows.


00:31:51.680 --> 00:31:55.440
I'm watching, I can't even remember the name of it now,


00:31:55.440 --> 00:31:57.560
catching up and I wanna skip through the beginning.


00:31:57.560 --> 00:31:59.360
Have you ever done that on streaming shows,


00:31:59.360 --> 00:32:01.320
you skip the intro?


00:32:01.320 --> 00:32:02.140
- Right.


00:32:02.140 --> 00:32:06.700
- So, I saw this the other day, it just cracked me up.


00:32:06.700 --> 00:32:09.740
Apparently, it's rude to poke someone in the head,


00:32:09.740 --> 00:32:11.760
the forehead, and say, "Skip intro,"


00:32:11.760 --> 00:32:13.260
when they start talking to you.


00:32:13.260 --> 00:32:18.140
I know people-- - I've heard the first hour.


00:32:18.140 --> 00:32:20.580
- Yeah, like, "Okay, can you skip the preamble


00:32:20.580 --> 00:32:22.100
"and just go to the whatever you wanted


00:32:22.100 --> 00:32:23.180
"to talk to me about?"


00:32:23.180 --> 00:32:26.100
- Pretty funny.


00:32:26.100 --> 00:32:30.380
I imagine it probably is a little rude,


00:32:30.380 --> 00:32:33.500
but sometimes you're in a hurry.


00:32:33.500 --> 00:32:34.620
You've heard it three times already,


00:32:34.620 --> 00:32:36.260
so get to the end.


00:32:36.260 --> 00:32:40.260
Awesome talking with you as usual.


00:32:40.260 --> 00:32:48.260
Indeed. Thanks for being here. Thank you to everyone who is listening and everyone who participated in the live stream. See you all next time.


00:32:48.260 --> 00:32:58.260
[BLANK_AUDIO]

