WEBVTT

00:00:00.000 --> 00:00:03.000
>> Hey, all. Hey, Brian.


00:00:03.000 --> 00:00:04.000
>> Hey.


00:00:04.000 --> 00:00:10.880
>> Thanks for being here. Always happy to have folks here for the live recording. Throw


00:00:10.880 --> 00:00:14.600
your questions out there if you've got them in your comments. With that, Brian, let's


00:00:14.600 --> 00:00:15.600
kick it off.


00:00:15.600 --> 00:00:16.600
>> Yeah, let's.


00:00:16.600 --> 00:00:21.880
>> Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:21.880 --> 00:00:30.000
to your earbuds. This is episode 348 recorded August 15th, 2023. I'm Michael Kennedy.


00:00:30.000 --> 00:00:32.480
And I'm Brian Aiken.


00:00:32.480 --> 00:00:37.500
And Brian, this episode is brought to everybody by us. I think you might be making a more


00:00:37.500 --> 00:00:44.160
concrete case for that than other times today. So, but yeah, check out all of our courses,


00:00:44.160 --> 00:00:49.080
books, things like that. It genuinely makes it possible for us to do this kind of stuff.


00:00:49.080 --> 00:00:50.080
So we appreciate it.


00:00:50.080 --> 00:00:52.920
We love doing it, but yeah, also.


00:00:52.920 --> 00:00:53.120
Yeah.


00:00:53.120 --> 00:00:53.880
Yeah.


00:00:53.880 --> 00:00:54.280
Also.


00:00:54.280 --> 00:01:00.220
And if you want to be part of the live show and you're not watching live now,


00:01:00.220 --> 00:01:04.120
Tuesdays at 11, I don't buy set FM slash live all the details there.


00:01:04.120 --> 00:01:06.920
Brian, let's kick it off.


00:01:06.920 --> 00:01:08.120
What's your first item.


00:01:08.120 --> 00:01:12.760
I actually it's I'm kind of on a packaging, a little bit of a packaging thing.


00:01:12.760 --> 00:01:13.120
Okay.


00:01:13.120 --> 00:01:13.960
Okay.


00:01:13.960 --> 00:01:16.320
Um, let's see.


00:01:16.320 --> 00:01:17.120
Add to stream.


00:01:17.520 --> 00:01:20.520
We got Brett Cannon wrote an article called


00:01:20.520 --> 00:01:23.260
"Differentiating Between Writing Down Dependencies


00:01:23.260 --> 00:01:27.260
to Use Packages" and for packages themselves.


00:01:27.260 --> 00:01:30.600
It's kind of a big title, but here's the idea.


00:01:30.600 --> 00:01:32.520
And I've been thinking about this also.


00:01:32.520 --> 00:01:36.480
So I really, there's requirements.txt files,


00:01:36.480 --> 00:01:38.560
and those are often used for applications.


00:01:38.560 --> 00:01:43.560
And then there's, but that was really when we had like,


00:01:43.560 --> 00:01:46.980
it was either that or setup.py for packages.


00:01:46.980 --> 00:01:48.900
And now we have pyproject.toml.


00:01:48.900 --> 00:01:50.740
So can't we just use that?


00:01:50.740 --> 00:01:54.100
I mean, I kind of want to,


00:01:54.100 --> 00:01:56.400
but it doesn't quite work that way.


00:01:56.400 --> 00:01:59.420
You install dependencies with a pyproject.toml


00:01:59.420 --> 00:02:02.780
by doing a pip, installing your package.


00:02:02.780 --> 00:02:06.100
And you can install it like pip install.e.


00:02:06.100 --> 00:02:08.220
I think Brett, yeah.


00:02:08.220 --> 00:02:09.820
- Dash e. - pip install.e.


00:02:09.820 --> 00:02:11.380
Dash e, right.


00:02:11.380 --> 00:02:12.980
And on the current directory,


00:02:12.980 --> 00:02:15.440
or you can give it a local project directory.


00:02:16.660 --> 00:02:18.660
And you can even do optional things


00:02:18.660 --> 00:02:20.740
like optional test dependencies and stuff.


00:02:20.740 --> 00:02:24.420
And I think when you do the -e,


00:02:24.420 --> 00:02:27.700
it installs your optional test dependencies also.


00:02:27.700 --> 00:02:28.540
I'm not sure.


00:02:28.540 --> 00:02:31.880
But, and I'm used to that 'cause I do packages also,


00:02:31.880 --> 00:02:35.180
but we still have the requirements.txt file.


00:02:35.180 --> 00:02:37.300
There really are for different things.


00:02:37.300 --> 00:02:41.340
So Brett talks about this a lot in here


00:02:41.340 --> 00:02:45.380
and looking at why there's a thing called


00:02:45.380 --> 00:02:47.100
like project dependencies.


00:02:47.100 --> 00:02:50.220
And the project is really meant for packaging.


00:02:50.220 --> 00:02:53.580
It's really meant just for the whole packaging system.


00:02:53.580 --> 00:02:58.580
So that when you install something, install a wheel,


00:02:58.580 --> 00:03:02.060
it knows how to get packages for it.


00:03:02.060 --> 00:03:02.900
That's it.


00:03:02.900 --> 00:03:04.940
It's not supposed to be for applications.


00:03:04.940 --> 00:03:08.540
So really that's kind of the discussion around here,


00:03:08.540 --> 00:03:09.820
around this article.


00:03:09.820 --> 00:03:12.180
However, there's a couple ideas.


00:03:12.180 --> 00:03:17.180
He references, also references back a Donald stuffed article


00:03:17.180 --> 00:03:22.660
from 2013 about setup.py versus requirements.txt.


00:03:22.660 --> 00:03:24.700
But like I said, that was setup.py.


00:03:24.700 --> 00:03:28.340
The way that maybe we could do something better.


00:03:28.340 --> 00:03:33.340
Brett's consideration is maybe we could have some standard,


00:03:33.340 --> 00:03:38.540
something, some other file that we could have.


00:03:38.540 --> 00:03:43.540
I personally, I have a, I think that maybe we could expand


00:03:43.540 --> 00:03:44.660
PyProject.toml.


00:03:44.660 --> 00:03:46.060
I really like the toml thing.


00:03:46.060 --> 00:03:50.300
So maybe we could either have a requirements.toml


00:03:50.300 --> 00:03:54.220
or maybe we could have like, instead of a project section


00:03:54.220 --> 00:03:57.020
of the toml file, maybe we could have


00:03:57.020 --> 00:03:58.660
maybe an application section.


00:03:58.660 --> 00:03:59.820
Maybe that would work.


00:03:59.820 --> 00:04:01.940
So.


00:04:01.940 --> 00:04:04.500
- Yeah, I think like a, like a dev requirements,


00:04:04.500 --> 00:04:07.740
even just in the PyProject.toml


00:04:07.740 --> 00:04:17.980
I mean, I run into it in other places too, like just in a Git repo that has like a couple


00:04:17.980 --> 00:04:23.780
Python tools in it that people can install on their own, but they might have some requirements.


00:04:23.780 --> 00:04:24.780
How do you list those?


00:04:24.780 --> 00:04:25.780
Do you stick them as applications?


00:04:25.780 --> 00:04:34.220
I mean, requirements.txt is normally the thing that's used for like Django web applications


00:04:34.220 --> 00:04:36.300
and things like that.


00:04:36.300 --> 00:04:40.380
So maybe requirements.txt is fine, but I think--


00:04:40.380 --> 00:04:40.880
Perhaps.


00:04:40.880 --> 00:04:42.740
What I have is I have, for my world,


00:04:42.740 --> 00:04:47.220
I have requirements.txt, which is from the web apps and stuff.


00:04:47.220 --> 00:04:49.880
That is what is required for the app to run.


00:04:49.880 --> 00:04:52.940
Without that, you can't make it go.


00:04:52.940 --> 00:04:54.940
Then I have requirements-dev.txt.


00:04:54.940 --> 00:04:56.780
I've seen that pattern a lot.


00:04:56.780 --> 00:04:59.140
And then to actually generate those,


00:04:59.140 --> 00:05:01.060
I use pip-tools and pip compile.


00:05:01.060 --> 00:05:03.880
So I have requirements.in and requirements-dev.in.


00:05:03.880 --> 00:05:07.100
and then I can auto update all the dependencies


00:05:07.100 --> 00:05:08.800
and keep them in sync.


00:05:08.800 --> 00:05:10.300
That's how I do it these days.


00:05:10.300 --> 00:05:17.440
- But now, even people with Django or other things


00:05:17.440 --> 00:05:20.240
are using a PyProjectTunnel also


00:05:20.240 --> 00:05:23.480
to store their black settings and things like that.


00:05:23.480 --> 00:05:27.640
We're kinda using ProjectTunnel,


00:05:27.640 --> 00:05:29.480
the PyProjectTunnel for more things,


00:05:29.480 --> 00:05:31.440
and I think maybe we could extend it for this.


00:05:31.440 --> 00:05:32.280
Anyway, that's my--


00:05:32.280 --> 00:05:33.840
- Seems reasonable.


00:05:33.840 --> 00:05:37.140
So anyway, what do you got for us?


00:05:37.140 --> 00:05:39.680
- Well, let's monkey around a little bit


00:05:39.680 --> 00:05:43.760
with the Python monkey, with the Python monkey.


00:05:43.760 --> 00:05:45.320
- That's cute.


00:05:45.320 --> 00:05:49.240
- It is, so this comes to us from created by Will Pringle,


00:05:49.240 --> 00:05:51.920
I believe amongst others.


00:05:51.920 --> 00:05:56.440
Let's see on the contributors here.


00:05:56.440 --> 00:06:02.240
There, yeah, there we go.


00:06:02.240 --> 00:06:04.400
Yeah, so a bunch of folks that work on this project.


00:06:04.400 --> 00:06:07.680
It's not super popular with only 276 stars,


00:06:07.680 --> 00:06:11.640
but I think it might be a pretty darn interesting


00:06:11.640 --> 00:06:14.480
compatibility layer for Python.


00:06:14.480 --> 00:06:16.000
So what do I mean by that?


00:06:16.000 --> 00:06:18.940
So imagine I'm,


00:06:18.940 --> 00:06:22.320
you can look at this from two perspectives.


00:06:22.320 --> 00:06:25.000
So don't scoff at one if you prefer the other.


00:06:25.000 --> 00:06:28.960
So imagine I'm a JavaScript developer


00:06:28.960 --> 00:06:31.200
and I've got a ton of cool JavaScript code


00:06:32.040 --> 00:06:35.400
that not just for the web front end,


00:06:35.400 --> 00:06:37.360
but kind of in the Node.js sense,


00:06:37.360 --> 00:06:39.640
like a bunch of utilities or a bunch of libraries


00:06:39.640 --> 00:06:42.360
that work and do certain things, right?


00:06:42.360 --> 00:06:43.200
- Yeah.


00:06:43.200 --> 00:06:45.160
- But I also have a Python app


00:06:45.160 --> 00:06:46.940
and I'd like to somehow use those together.


00:06:46.940 --> 00:06:48.960
So Python Monkey is a,


00:06:48.960 --> 00:06:51.880
it's the right way to put it,


00:06:51.880 --> 00:06:55.360
it basically hosts a JavaScript,


00:06:55.360 --> 00:06:58.360
a full-on high-performance JavaScript,


00:06:58.360 --> 00:07:00.800
JIT compiled to almost native performance


00:07:00.800 --> 00:07:05.440
JavaScript engine inside of Python through pip install.


00:07:05.440 --> 00:07:10.300
So if I wanted to use some of the JavaScript code,


00:07:10.300 --> 00:07:13.500
I just write my Python application


00:07:13.500 --> 00:07:15.980
and for that function or that functionality,


00:07:15.980 --> 00:07:20.980
I just import the, you know, first spider monkey,


00:07:20.980 --> 00:07:23.540
or not spider, Python monkey,


00:07:23.540 --> 00:07:28.540
and then I import the JavaScript files that you would use


00:07:29.740 --> 00:07:32.240
and then you just call them like Python functions.


00:07:32.240 --> 00:07:38.540
Okay, or reverse, I'm writing a Python application


00:07:38.540 --> 00:07:43.540
and one option to make slow loops go faster


00:07:43.540 --> 00:07:45.340
would be to write that in Cython


00:07:45.340 --> 00:07:47.500
and Cython's getting better with the Cython 3 release


00:07:47.500 --> 00:07:50.460
that we discussed already, previous episode.


00:07:50.460 --> 00:07:54.640
But JavaScript, because this thing,


00:07:54.640 --> 00:07:57.200
the spider monkey JavaScript engine


00:07:57.200 --> 00:07:59.140
is the one that I believe Firefox uses,


00:07:59.140 --> 00:08:03.140
does JIT compilation to native code,


00:08:03.140 --> 00:08:06.140
it basically is near native performance as well.


00:08:06.140 --> 00:08:09.140
So if you'd like, you could rewrite that part


00:08:09.140 --> 00:08:13.140
in TypeScript or JavaScript and run just that section.


00:08:13.140 --> 00:08:16.140
And it uses things like shared memory


00:08:16.140 --> 00:08:18.140
between JavaScript and Python.


00:08:18.140 --> 00:08:21.140
So if you've got like a string or a list,


00:08:21.140 --> 00:08:25.140
those are the same objects, which is pretty crazy.


00:08:25.140 --> 00:08:27.140
At least for the strings.


00:08:27.140 --> 00:08:30.480
Okay, so let's look at some examples.


00:08:30.480 --> 00:08:32.020
There's an article by Will,


00:08:32.020 --> 00:08:34.260
and no, I will not log into Medium.


00:08:34.260 --> 00:08:35.100
You're partially evil.


00:08:35.100 --> 00:08:40.100
Okay, so here's an article by Will here.


00:08:40.100 --> 00:08:43.620
So let's look at some code examples.


00:08:43.620 --> 00:08:46.540
All right, so import PythonMonkey as PM,


00:08:46.540 --> 00:08:49.780
and then you say PM eval and give it JavaScript code,


00:08:49.780 --> 00:08:51.180
and then boom, it runs that.


00:08:51.180 --> 00:08:53.460
That's one way.


00:08:53.460 --> 00:08:55.460
What you can do maybe is more interesting


00:08:55.460 --> 00:08:56.300
is look at this.


00:08:56.300 --> 00:09:02.460
say, em.eval and give it an anonymous JavaScript function.


00:09:02.460 --> 00:09:05.300
And then what comes back, not evaluating it,


00:09:05.300 --> 00:09:08.940
but just the thing to define the function in JavaScript.


00:09:08.940 --> 00:09:12.300
And what comes back is an object that itself is a function.


00:09:12.300 --> 00:09:20.060
So that's pretty cool.


00:09:20.060 --> 00:09:20.940
Hold on.


00:09:20.940 --> 00:09:22.860
There's two parts to this.


00:09:22.860 --> 00:09:24.880
I've created a JavaScript function that's


00:09:24.880 --> 00:09:28.640
JIT compiled in SpiderMonkey through this eval.


00:09:28.640 --> 00:09:30.400
And what the-- I didn't say this part.


00:09:30.400 --> 00:09:32.760
What the function takes is, given a function,


00:09:32.760 --> 00:09:37.400
it will call that function passing hello world to it,


00:09:37.400 --> 00:09:38.720
the string hello world.


00:09:38.720 --> 00:09:41.640
So what you do is you get the function back


00:09:41.640 --> 00:09:44.760
as a Python function, and then they pass print.


00:09:44.760 --> 00:09:48.560
It somehow proxies the print function


00:09:48.560 --> 00:09:50.160
into the JavaScript space.


00:09:50.160 --> 00:09:52.480
And then JavaScript calls the Python print,


00:09:52.480 --> 00:09:56.080
which then comes back to the console, to the terminal.


00:09:56.080 --> 00:09:56.920
- Wow, okay.


00:09:56.920 --> 00:09:58.440
- That's some deep integration, right?


00:09:58.440 --> 00:10:01.560
That's some pretty wild stuff.


00:10:01.560 --> 00:10:03.400
Let's see, what else can we do here


00:10:03.400 --> 00:10:05.280
that's pretty interesting?


00:10:05.280 --> 00:10:09.800
I can say, given a JavaScript module like I described,


00:10:09.800 --> 00:10:14.500
I can, here's an example, it has a say hello export.


00:10:14.500 --> 00:10:18.220
Then you can just say pm.require that JavaScript module,


00:10:18.220 --> 00:10:20.800
and now you've got all the function,


00:10:20.800 --> 00:10:23.720
all the export behavior from that JavaScript module,


00:10:23.720 --> 00:10:26.340
right, which is cool.


00:10:26.340 --> 00:10:31.640
Yeah, there's some more examples in here.


00:10:31.640 --> 00:10:33.240
The other angle that's pretty interesting,


00:10:33.240 --> 00:10:35.880
there's two more angles that are interesting,


00:10:35.880 --> 00:10:37.520
because it uses SpiderMonkey,


00:10:37.520 --> 00:10:41.200
and SpiderMonkey is awesome with WebAssembly,


00:10:41.200 --> 00:10:45.040
allows you to run untrusted WASM code


00:10:45.040 --> 00:10:48.400
from languages like C, C++, and Rust,


00:10:48.400 --> 00:10:54.640
you can now basically do any, you can call any WebAssembly code as well that


00:10:54.640 --> 00:10:56.360
you'd like inside of your function.


00:10:56.360 --> 00:10:57.680
Now we're getting interesting.


00:10:57.680 --> 00:10:58.440
Yeah.


00:10:58.440 --> 00:11:02.240
It supports things like async and await using the async and await keywords to


00:11:02.240 --> 00:11:10.240
handle the callback nature of JavaScript, like the the dot then type of deferreds


00:11:10.240 --> 00:11:11.120
and different things.


00:11:11.120 --> 00:11:13.880
So you can just async and await those behaviors, right?


00:11:13.880 --> 00:11:19.400
just await a WebAssembly call, which is pretty excellent.


00:11:19.400 --> 00:11:21.640
Yeah, so there's a bunch of examples,


00:11:21.640 --> 00:11:27.320
some pretty cool graphics here with Spock and Captain


00:11:27.320 --> 00:11:29.480
Kerr going, my mind to your mind,


00:11:29.480 --> 00:11:33.320
my object to your dicks, your dicks to my objects.


00:11:33.320 --> 00:11:35.120
Pretty awesome there.


00:11:35.120 --> 00:11:37.120
Another angle that is worth considering


00:11:37.120 --> 00:11:40.880
is this allows the entire Python data science


00:11:40.880 --> 00:11:45.520
stack to become accessible to JavaScript developers.


00:11:45.520 --> 00:11:46.520
Right?


00:11:46.520 --> 00:11:47.520
>> Yeah.


00:11:47.520 --> 00:11:53.640
>> So if you want to use the machine learning stuff, if you want to use pandas or pollers,


00:11:53.640 --> 00:11:58.440
you just write your code and then do the integration here.


00:11:58.440 --> 00:12:01.240
And yeah, that's pretty much it.


00:12:01.240 --> 00:12:07.120
It finishes with some funny little pictures here of a Noah on the ark.


00:12:07.120 --> 00:12:10.300
It's got a Python and JavaScript,


00:12:10.300 --> 00:12:11.460
which looks like a penguin,


00:12:11.460 --> 00:12:12.920
and then it has the Python monkey.


00:12:12.920 --> 00:12:15.640
What is that? What the heck is this?


00:12:15.640 --> 00:12:20.400
All right. Anyway, that's Python monkey,


00:12:20.400 --> 00:12:24.200
which is, I think, potentially interesting.


00:12:24.200 --> 00:12:26.320
>> With the WebAssembly and stuff,


00:12:26.320 --> 00:12:28.120
you could potentially have


00:12:28.120 --> 00:12:30.400
every other function in your system


00:12:30.400 --> 00:12:33.600
be implemented by a different language.


00:12:33.600 --> 00:12:40.520
>> Yeah. I'm bored of C, C++, Rust, Go.


00:12:40.520 --> 00:12:42.320
What else do we want to write it in?


00:12:42.320 --> 00:12:44.360
>> Yeah. Why not everything?


00:12:44.360 --> 00:12:46.800
Just make sure that your application


00:12:46.800 --> 00:12:48.880
is only maintainable by you.


00:12:48.880 --> 00:12:51.760
>> Exactly. Do you know how many compilers you need to do this?


00:12:51.760 --> 00:12:54.760
>> No. It's fun to joke about,


00:12:54.760 --> 00:12:56.400
but this does look pretty cool.


00:12:56.400 --> 00:12:57.880
>> Yeah. It does look pretty cool.


00:12:57.880 --> 00:13:00.800
So congrats to the folks there.


00:13:00.800 --> 00:13:03.400
this-- maybe it'll go somewhere.


00:13:03.400 --> 00:13:03.900
We'll see.


00:13:03.900 --> 00:13:05.760
It's pretty interesting.


00:13:05.760 --> 00:13:11.960
I think also it's worth noting that there is somewhere in here


00:13:11.960 --> 00:13:13.700
that there's a comparison to other things.


00:13:13.700 --> 00:13:17.200
So this apparently is not the only time such a type


00:13:17.200 --> 00:13:19.600
of creation has been attempted.


00:13:19.600 --> 00:13:21.560
So it says, there are other projects that already


00:13:21.560 --> 00:13:26.280
do JavaScript and Python, such as JS2Py, PyV8, and MetaCall.


00:13:26.280 --> 00:13:29.400
But there's a bunch of different drawbacks or stuff.


00:13:29.400 --> 00:13:32.200
This is why we created it, basically, in addition.


00:13:32.200 --> 00:13:35.080
So JS to Py is implemented entirely in Python,


00:13:35.080 --> 00:13:39.240
which sounds awesome, except V8 and SpiderMonkey


00:13:39.240 --> 00:13:42.080
compile to native code and run ultra fast,


00:13:42.080 --> 00:13:44.280
whereas if you just run it in Python,


00:13:44.280 --> 00:13:47.280
it probably doesn't have any of those things, right?


00:13:47.280 --> 00:13:51.800
PyV8 has a wrapper around Google's V8 JavaScript engine,


00:13:51.800 --> 00:13:53.800
which is great, but it's just super low level.


00:13:53.800 --> 00:13:57.320
You just talk directly to the JavaScript bits,


00:13:57.320 --> 00:14:00.300
which for example doesn't have async and await.


00:14:00.300 --> 00:14:03.040
Finally, metacall is extensible,


00:14:03.040 --> 00:14:04.240
embeddable, and interoperable,


00:14:04.240 --> 00:14:05.860
but you've got to install a bunch of


00:14:05.860 --> 00:14:08.600
different run times outside of just pip install.


00:14:08.600 --> 00:14:11.240
So anyway, if people are going, "But it exists."


00:14:11.240 --> 00:14:15.440
It does, but this apparently is why it exists like this.


00:14:15.440 --> 00:14:17.240
>> Yeah.


00:14:17.240 --> 00:14:18.960
>> Cool.


00:14:18.960 --> 00:14:21.960
>> Yeah, and John out in the audience says,


00:14:21.960 --> 00:14:25.480
"I do this, but going the other way using transcript."


00:14:25.480 --> 00:14:29.640
Okay, interesting. Something new to check out. Thanks, John.


00:14:29.640 --> 00:14:30.840
I'll take that out.


00:14:30.840 --> 00:14:32.920
All right, over to you, Brian.


00:14:32.920 --> 00:14:41.320
Well, I just one more thing. Alvaro says, Python monkey perfect for works on my machine certification.


00:14:41.320 --> 00:14:46.760
There is an official works on my machine certification. If you have,


00:14:46.760 --> 00:14:49.880
I know we talked about it before. It's glorious. It comes with a sticker.


00:14:51.880 --> 00:14:56.880
Compile your application code, getting the latest version of any recent changes from other developers


00:14:56.880 --> 00:14:59.880
purely optional and not a requirement for certification.


00:14:59.880 --> 00:15:01.880
Launch the application.


00:15:01.880 --> 00:15:05.880
Cause one code path in the code you're checking to be executed.


00:15:05.880 --> 00:15:08.880
The preferred way to do this is with ad hoc manual testing.


00:15:08.880 --> 00:15:12.880
You can omit this step if the code change is less than five lines


00:15:12.880 --> 00:15:16.880
or if in the developer's professional opinion the code cannot possibly result in an error.


00:15:16.880 --> 00:15:19.880
Check your code in Diversion Control if you're certified.


00:15:19.880 --> 00:15:22.500
(laughing)


00:15:22.500 --> 00:15:24.160
There we go, two jokes in one episode.


00:15:24.160 --> 00:15:25.320
How about that?


00:15:25.320 --> 00:15:26.140
- Awesome.


00:15:26.140 --> 00:15:28.360
Well, we got a little bit more,


00:15:28.360 --> 00:15:30.700
a little more humor to add to it.


00:15:30.700 --> 00:15:35.060
So because I thought it was a serious article.


00:15:35.060 --> 00:15:37.420
It is, it's just funny and weird.


00:15:37.420 --> 00:15:39.520
So Seth Larson wrote,


00:15:39.520 --> 00:15:42.320
"Quirks of Python Package Versioning."


00:15:42.320 --> 00:15:45.320
Package, Python package versioning, that's it.


00:15:45.320 --> 00:15:48.040
So we're used to,


00:15:48.040 --> 00:15:50.520
- Well, we're kind of getting used to the world


00:15:50.520 --> 00:15:54.600
where we all have SemVer like 1.2.3


00:15:54.600 --> 00:15:56.640
and for semantic versioning,


00:15:56.640 --> 00:16:01.440
but we also have calendar versioning like 2023.6.1.


00:16:01.440 --> 00:16:04.720
And then there's stuff like you can add a pre-release suffix


00:16:04.720 --> 00:16:08.020
and things like that, but it gets way weirder and fun.


00:16:08.020 --> 00:16:13.160
So, and I have noticed this, especially with GitHub,


00:16:13.160 --> 00:16:14.860
like GitHub versioning,


00:16:14.860 --> 00:16:18.340
Sometimes people will do a V versioning.


00:16:18.340 --> 00:16:20.380
So there's V prefixes you can do.


00:16:20.380 --> 00:16:22.380
And I guess you can pull that


00:16:22.380 --> 00:16:25.780
into your Python application version as well.


00:16:25.780 --> 00:16:26.620
Why not?


00:16:26.620 --> 00:16:29.980
So V versions are allowed.


00:16:29.980 --> 00:16:30.980
Epic versions.


00:16:30.980 --> 00:16:32.540
Did you know about Epic versions?


00:16:32.540 --> 00:16:33.700
I just learned about this.


00:16:33.700 --> 00:16:35.140
- I don't think so.


00:16:35.140 --> 00:16:40.140
- So you can have a exclamation point separating your Epic


00:16:44.140 --> 00:16:45.580
from the rest of your version.


00:16:45.580 --> 00:16:49.940
So this is, so like one bang 2.0.0


00:16:49.940 --> 00:16:54.580
would be Epic one version 2.0.0.


00:16:54.580 --> 00:16:56.460
- I gotta tell you, I already had a hard time deciding


00:16:56.460 --> 00:16:58.340
when the two or when the middle zero


00:16:58.340 --> 00:16:59.500
or the last zero changes.


00:16:59.500 --> 00:17:02.260
If I put a number in front and exclamation point,


00:17:02.260 --> 00:17:04.020
I'm gonna just lost.


00:17:04.020 --> 00:17:05.780
- Yeah, apparently-- - It's too much decision,


00:17:05.780 --> 00:17:06.620
too many decisions.


00:17:06.620 --> 00:17:09.340
- Apparently some systems use colons for Epics,


00:17:09.340 --> 00:17:13.580
but Python chose, this is all based on Python PEP 440.


00:17:13.580 --> 00:17:18.580
And the, yeah, apparently we chose the bang symbol


00:17:18.580 --> 00:17:20.540
or is that's bang, right?


00:17:20.540 --> 00:17:22.780
The exclamation point.


00:17:22.780 --> 00:17:26.440
So, and that just kind of looks like a one.


00:17:26.440 --> 00:17:29.860
If you did one bang one, that would be hard to tell.


00:17:29.860 --> 00:17:31.640
Local versions.


00:17:31.640 --> 00:17:35.240
And is you can, you can extend after you have versions,


00:17:35.240 --> 00:17:40.240
you're going to have alpha numerics and other stuff


00:17:40.240 --> 00:17:42.100
like, you know, here plus,


00:17:42.100 --> 00:17:43.620
I don't know if the plus is part of it.


00:17:43.620 --> 00:17:47.740
Anyway, so after your normal version, like 1.0.0,


00:17:47.740 --> 00:17:50.940
he has an example of plus Ubuntu-1.


00:17:50.940 --> 00:17:53.980
This gets normalized,


00:17:53.980 --> 00:17:59.420
but this is kind of nice for local,


00:17:59.420 --> 00:18:01.700
it's local versions because PyPI doesn't like it.


00:18:01.700 --> 00:18:05.500
So PyPI will not let you push up local versions to PyPI,


00:18:05.500 --> 00:18:08.500
which is probably right, it's local builds.


00:18:09.860 --> 00:18:14.860
Long versions, apparently you can use the first 217 digits


00:18:14.860 --> 00:18:18.580
of PI and that works fine.


00:18:18.580 --> 00:18:21.480
As one of the digits, there's no limits.


00:18:21.480 --> 00:18:27.360
Case insensitivity, so yeah, okay, that's fine.


00:18:27.360 --> 00:18:31.520
It gets normalized lower or something so that,


00:18:31.520 --> 00:18:37.020
capital RC1 is the same as lowercase RC1,


00:18:37.020 --> 00:18:38.060
that's appropriate.


00:18:39.780 --> 00:18:42.460
So pre-release I've seen, I've actually used pre-release,


00:18:42.460 --> 00:18:44.420
post, I don't know if I use pre.


00:18:44.420 --> 00:18:47.360
I've seen pre and I've used post-release occasionally.


00:18:47.360 --> 00:18:49.980
Although it's so weird that people don't understand


00:18:49.980 --> 00:18:52.260
what's going on, so I don't do that anymore.


00:18:52.260 --> 00:18:57.020
But apparently pre, post and dev are not mutually exclusive.


00:18:57.020 --> 00:19:01.100
You can have all three allowed in one version.


00:19:01.100 --> 00:19:04.560
Why would you do that?


00:19:05.700 --> 00:19:09.940
So, and yeah, no delimiters needed.


00:19:09.940 --> 00:19:12.580
There's just a lot of fun here.


00:19:12.580 --> 00:19:16.140
So implicit hyphens are allowed.


00:19:16.140 --> 00:19:18.540
So this is both the serious and non-serious.


00:19:18.540 --> 00:19:20.740
Oh, implicit zeros are weird.


00:19:20.740 --> 00:19:25.740
So you can, if you have a version 2.0.4,


00:19:25.740 --> 00:19:31.020
you can just keep adding a bunch of 0.0, 0.0, 0.0


00:19:31.020 --> 00:19:32.460
and it works fine.


00:19:32.460 --> 00:19:34.860
It resolves to 2.0.4.


00:19:34.860 --> 00:19:35.700
That's awesome.


00:19:35.700 --> 00:19:40.100
I definitely need to advertise some version,


00:19:40.100 --> 00:19:45.100
say just pick up 2.0.3.0.0.0.0.


00:19:45.100 --> 00:19:48.900
- Yeah, makes it sound tough.


00:19:48.900 --> 00:19:50.860
Like, yeah, I mean, in releases we've had.


00:19:50.860 --> 00:19:55.500
- Anyway, totally fun article, so thanks, Seth.


00:19:55.500 --> 00:19:59.260
- Brian, do you hear that?


00:19:59.260 --> 00:20:00.100
- No.


00:20:00.100 --> 00:20:03.320
- That's the sound of a million Regexs dying.


00:20:03.320 --> 00:20:05.900
(laughing)


00:20:05.900 --> 00:20:07.260
that are supposed to be scanning


00:20:07.260 --> 00:20:09.620
for the version string in your code.


00:20:09.620 --> 00:20:15.780
- Yeah, but maybe that's why Python just has,


00:20:15.780 --> 00:20:18.500
Python just has it as a string.


00:20:18.500 --> 00:20:21.460
If you do dunder version equals, it's just a string.


00:20:21.460 --> 00:20:22.520
So.


00:20:22.520 --> 00:20:23.360
- Yeah.


00:20:23.360 --> 00:20:27.660
Axel asks, if you use C++ compiled code,


00:20:27.660 --> 00:20:30.020
so I guess native code that's like not part


00:20:30.020 --> 00:20:32.220
of just source only Python,


00:20:32.220 --> 00:20:35.460
Is there a way to define which compiler you used in the versioning?


00:20:35.460 --> 00:20:41.420
Maybe that Ubuntu type variant, that local version, but you can't publish that, right?


00:20:41.420 --> 00:20:44.580
You can't push it up IPA like that.


00:20:44.580 --> 00:20:53.300
But like for instance, I'm not sure how this relates to like the wheel naming, the wheel


00:20:53.300 --> 00:20:59.020
download naming thing.


00:20:59.020 --> 00:21:01.140
I'm sure there's some metadata you could put in there.


00:21:01.140 --> 00:21:04.380
- Right, like you can do Dunder version,


00:21:04.380 --> 00:21:06.340
right, you can just do Dunder compiler and say,


00:21:06.340 --> 00:21:07.900
you know, print that out and it'll tell you,


00:21:07.900 --> 00:21:11.660
but it's not, there's no standard that I can think of.


00:21:11.660 --> 00:21:15.580
- Well, there's the, there is the wheel standard.


00:21:15.580 --> 00:21:16.420
I just don't remember where the link is.


00:21:16.420 --> 00:21:18.380
- But that's more platform based, right?


00:21:18.380 --> 00:21:20.100
Than a compiler.


00:21:20.100 --> 00:21:22.660
- Oh, right, it's not compiler based, it's platform based.


00:21:22.660 --> 00:21:24.580
- I mean, the compiler's gotta compile to the platform,


00:21:24.580 --> 00:21:28.860
but it doesn't say like use GCC versus LLVM,


00:21:28.860 --> 00:21:31.620
playing in studio, whatever, right?


00:21:31.620 --> 00:21:32.540
- Right.


00:21:32.540 --> 00:21:33.540
- Yeah.


00:21:33.540 --> 00:21:35.320
- And usually I'm just doing pure Python,


00:21:35.320 --> 00:21:38.900
so I have it all listed, but for the wheel, anyway.


00:21:38.900 --> 00:21:42.460
- Exactly, exactly.


00:21:42.460 --> 00:21:45.720
All right, well, with all that Python monkeying around,


00:21:45.720 --> 00:21:48.340
I could just barely stand it.


00:21:48.340 --> 00:21:49.180
- Oh dear.


00:21:49.180 --> 00:21:50.820
- About bear type.


00:21:50.820 --> 00:21:51.660
- Nice.


00:21:51.660 --> 00:21:53.060
- The bear metal type checker.


00:21:53.060 --> 00:21:55.580
Okay, so people know I'm a huge fan of types,


00:21:55.580 --> 00:21:57.260
Python, type hints, and all those things.


00:21:57.260 --> 00:22:01.260
that are super, super empowering and make the editors


00:22:01.260 --> 00:22:02.580
so much more helpful.


00:22:02.580 --> 00:22:06.660
Means you don't have to go into the documentation


00:22:06.660 --> 00:22:08.140
and go, what does this take again?


00:22:08.140 --> 00:22:11.420
I know it takes an args here, but is args a dictionary?


00:22:11.420 --> 00:22:12.240
Is it a class?


00:22:12.240 --> 00:22:13.180
Is it a string?


00:22:13.180 --> 00:22:14.540
Is it an, what is it?


00:22:14.540 --> 00:22:16.860
Right, like crazy stuff like that, right?


00:22:16.860 --> 00:22:19.980
So types are awesome for conveying that information


00:22:19.980 --> 00:22:22.180
without having to go to the docs


00:22:22.180 --> 00:22:24.060
or some other place to figure it out.


00:22:25.500 --> 00:22:32.140
However, what Python type hints, annotations generally don't do, as the word hint would


00:22:32.140 --> 00:22:36.820
indicate, they don't require the hint.


00:22:36.820 --> 00:22:43.000
You can use tools like mypy, and mypy will say the typing looks consistent or inconsistent,


00:22:43.000 --> 00:22:48.060
but regardless of what it says, when you run the code, whether or not the typing is consistent,


00:22:48.060 --> 00:22:54.160
long as it actually is still semantically valid, it's going to run, even if you tell


00:22:54.160 --> 00:22:57.720
Well, it takes a string, but you're really passing it.


00:22:57.720 --> 00:22:59.440
And it did plus to it, but you know what?


00:22:59.440 --> 00:23:02.760
You pass two integers and two strings, and it still worked.


00:23:02.760 --> 00:23:05.360
So the runtime version of typing in Python


00:23:05.360 --> 00:23:09.000
is mostly absent, excluding things


00:23:09.000 --> 00:23:10.760
like Pydantic and a few others.


00:23:10.760 --> 00:23:15.320
So this bare type thing is a near zero cost,


00:23:15.320 --> 00:23:18.920
near real time, pure Python runtime type checker


00:23:18.920 --> 00:23:23.920
that makes runtime mismatches for typing,


00:23:23.920 --> 00:23:25.980
runtime errors.


00:23:25.980 --> 00:23:27.040
- Interesting.


00:23:27.040 --> 00:23:29.520
- Okay, so you can say,


00:23:29.520 --> 00:23:32.280
this sounds like a horrible idea and I will never touch it.


00:23:32.280 --> 00:23:35.000
Please don't, you know, install the bear.


00:23:35.000 --> 00:23:38.120
Or you could say, I come from a static language


00:23:38.120 --> 00:23:41.560
and this dynamic typing business is freaking me out.


00:23:41.560 --> 00:23:43.120
Can we get a little closer?


00:23:43.120 --> 00:23:43.960
Then you can have it.


00:23:43.960 --> 00:23:45.240
I feel like this is the kind of thing


00:23:45.240 --> 00:23:47.280
that for little projects is completely useless,


00:23:47.280 --> 00:23:49.280
but for huge projects,


00:23:49.280 --> 00:23:51.880
it maybe it starts to become more valuable, right?


00:23:51.880 --> 00:23:52.720
- Yeah.


00:23:52.720 --> 00:23:55.480
- So, if you just jump right into it,


00:23:55.480 --> 00:23:58.600
you pip install bare type,


00:23:58.600 --> 00:24:03.080
and then you can do things like import the decorator


00:24:03.080 --> 00:24:06.160
and just put a decorator onto a function


00:24:06.160 --> 00:24:09.800
that has a type annotation or hint right there like that.


00:24:09.800 --> 00:24:14.880
So, here's one that says quote Wigham,


00:24:14.880 --> 00:24:17.960
and then it passes lines, and the type declaration


00:24:17.960 --> 00:24:21.400
says lines is a list of str, and it returns none.


00:24:21.400 --> 00:24:25.200
Okay, so then if you just use this function,


00:24:25.200 --> 00:24:30.240
pass it a list of strings, it just runs, right?


00:24:30.240 --> 00:24:31.080
- Yeah.


00:24:31.080 --> 00:24:34.320
- If, however, though, you pass it a list of bytes,


00:24:34.320 --> 00:24:37.320
which kind of look like strings but are not strings,


00:24:37.320 --> 00:24:40.680
you get an exception that says parameter


00:24:40.680 --> 00:24:42.240
such and such and such.


00:24:43.840 --> 00:24:48.020
- And it gives you the actual index in the list.


00:24:48.020 --> 00:24:51.860
It says list item zero with this value is not a string


00:24:51.860 --> 00:24:54.800
'cause it's a B string, which is really bytes, right?


00:24:54.800 --> 00:24:55.640
- Yeah.


00:24:55.640 --> 00:24:58.300
- It's pretty cool, right?


00:24:58.300 --> 00:24:59.980
- Yeah, it is really cool.


00:24:59.980 --> 00:25:04.980
And I'm kind of agreeing with Alvaro said,


00:25:04.980 --> 00:25:10.120
maybe running with the test suite.


00:25:10.120 --> 00:25:12.940
And I was thinking maybe dynamically add these somehow.


00:25:12.940 --> 00:25:17.940
Do you use the bare types during development and maybe,


00:25:17.940 --> 00:25:21.180
you know, maybe take them off later if it,


00:25:21.180 --> 00:25:22.600
but if it's really fast.


00:25:22.600 --> 00:25:26.460
- Yeah, I'll comment on that in a second.


00:25:26.460 --> 00:25:29.020
There are also validators.


00:25:29.020 --> 00:25:31.780
There's an is and an annotated validator.


00:25:31.780 --> 00:25:34.580
If you want to be more restrictive,


00:25:34.580 --> 00:25:37.300
maybe even then you might expect,


00:25:37.300 --> 00:25:39.580
it's part of Python, but it's not a commonly known part


00:25:39.580 --> 00:25:41.380
of the type and in things.


00:25:41.380 --> 00:25:47.900
So for example, I could define a new type using annotated called list of strings.


00:25:47.900 --> 00:25:49.580
>> Okay.


00:25:49.580 --> 00:25:57.500
>> And it says, it has to be a list of strings as one part of the annotation.


00:25:57.500 --> 00:26:01.860
And then another one is, well, if it's,


00:26:01.860 --> 00:26:06.140
it has to be a non-empty set of strings is what they're trying to create here.


00:26:06.140 --> 00:26:09.900
Okay, so it says if it's a list with a bunch of stuff,


00:26:09.900 --> 00:26:12.160
the bunch of stuff has to be strings,


00:26:12.160 --> 00:26:15.520
but it also contests that it's not falsy,


00:26:15.520 --> 00:26:17.760
which would be the case when it's a just,


00:26:17.760 --> 00:26:20.000
you know, zero length list.


00:26:20.000 --> 00:26:22.800
So then you can annotate with that type.


00:26:22.800 --> 00:26:26.560
And if you call with regular somewhere,


00:26:26.560 --> 00:26:28.680
you call it with a regular code is fine.


00:26:28.680 --> 00:26:30.800
But if you call it with the empty list,


00:26:30.800 --> 00:26:31.960
where it says a list of strings,


00:26:31.960 --> 00:26:33.880
it says, no, no, no, it can't be an empty list.


00:26:33.880 --> 00:26:35.960
It has to be a non-empty list of strings.


00:26:35.960 --> 00:26:38.880
So there's like some pretty crazy things


00:26:38.880 --> 00:26:40.740
that you can do here.


00:26:40.740 --> 00:26:45.120
Yeah, some other stuff you can check if you like.


00:26:45.120 --> 00:26:50.120
But yeah, I wanted to read this introduction article here


00:26:50.120 --> 00:26:52.340
which actually comes after all the examples.


00:26:52.340 --> 00:26:57.880
By the way, it also, in order to run this


00:26:57.880 --> 00:27:01.900
a whole bunch of times, it took 33 microseconds,


00:27:01.900 --> 00:27:05.180
which is pretty incredible.


00:27:05.180 --> 00:27:10.180
to test this for like an array of tuples of arrays of,


00:27:10.180 --> 00:27:12.980
what is that?


00:27:12.980 --> 00:27:15.660
A million, you know, 33 microseconds.


00:27:15.660 --> 00:27:17.740
So that's pretty fast actually.


00:27:17.740 --> 00:27:19.700
- Yeah, you still wanna like compare it,


00:27:19.700 --> 00:27:22.980
like your entire, like some workflow


00:27:22.980 --> 00:27:25.700
compared to with or without, so.


00:27:25.700 --> 00:27:26.700
- Yep.


00:27:26.700 --> 00:27:27.540
So let me read this.


00:27:27.540 --> 00:27:29.580
So if people are wondering, what the heck is this?


00:27:29.580 --> 00:27:33.860
Bear type brings Rust and C++ inspired zero cost abstractions


00:27:33.860 --> 00:27:38.100
into the lawless world of dynamically typed Python


00:27:38.100 --> 00:27:40.740
by enforcing type safety at the granular level


00:27:40.740 --> 00:27:43.420
of functions and methods against type hints


00:27:43.420 --> 00:27:45.140
standardized by the Python community


00:27:45.140 --> 00:27:47.660
in O1 non-amortized worst case time


00:27:47.660 --> 00:27:50.660
with negligible constant factors.


00:27:50.660 --> 00:27:51.500
How about that?


00:27:51.500 --> 00:27:52.940
So if anyone asks what bare type is,


00:27:52.940 --> 00:27:54.140
there's a good description.


00:27:54.140 --> 00:27:55.980
(laughing)


00:27:55.980 --> 00:27:56.820
- Yeah.


00:27:56.820 --> 00:27:58.220
- But yeah, it's pretty cool


00:27:58.220 --> 00:27:59.420
and then there's a whole bunch of stuff about it.


00:27:59.420 --> 00:28:01.680
But anyway, that's bare type.


00:28:01.680 --> 00:28:02.940
It looks pretty promising to me.


00:28:02.940 --> 00:28:06.060
Like the drawback of a lot of these, I think,


00:28:06.060 --> 00:28:08.480
really is like, well, now you're doing a bunch of checking


00:28:08.480 --> 00:28:10.360
for every little function call and it's super slow.


00:28:10.360 --> 00:28:13.480
But if it's fast enough, that's pretty cool.


00:28:13.480 --> 00:28:16.880
- Yeah, so a couple comments in the chat.


00:28:16.880 --> 00:28:21.880
Mike Felder, doesn't Pydantic include call validators too?


00:28:21.880 --> 00:28:24.400
So I'm not sure.


00:28:24.400 --> 00:28:26.080
- It did, I don't know if that's out of beta.


00:28:26.080 --> 00:28:30.080
Last time I looked at it, it was still in like a testing


00:28:30.080 --> 00:28:31.600
base, it may be out now.


00:28:31.600 --> 00:28:34.320
I mean, there's a ton of work that's happened on PyDandig.


00:28:34.320 --> 00:28:37.120
It's all been redone, so I don't know the status of that.


00:28:37.120 --> 00:28:38.400
Maybe Mike does.


00:28:38.400 --> 00:28:41.840
- Okay, and then also, is there a mypy plugin that does that?


00:28:41.840 --> 00:28:46.320
I don't, I wasn't aware that mypy could be used at runtime.


00:28:46.320 --> 00:28:48.720
- I wasn't aware mypy could be used at runtime either,


00:28:48.720 --> 00:28:50.960
but perhaps.


00:28:50.960 --> 00:28:51.880
- Yeah, anyway.


00:28:51.880 --> 00:28:53.920
- Anyway, this looks pretty, you know,


00:28:53.920 --> 00:28:55.680
quite straightforward, pretty useful.


00:28:55.680 --> 00:28:58.400
You just do type ints, you put @BearType on it,


00:28:58.400 --> 00:29:00.760
and it makes sure that it behaves.


00:29:00.760 --> 00:29:02.680
- Yeah, so-- - To do what you were looking at,


00:29:02.680 --> 00:29:04.860
sorry, to do where you might wanna turn it off


00:29:04.860 --> 00:29:08.120
in production, but run it in testing, which is reasonable.


00:29:08.120 --> 00:29:10.200
I don't see any mechanism for that.


00:29:10.200 --> 00:29:12.720
There may be-- - Yeah, but it's a,


00:29:12.720 --> 00:29:15.040
it's a decorator mechanism, so you could,


00:29:15.040 --> 00:29:16.880
you could work around it if you needed to.


00:29:16.880 --> 00:29:18.800
- Well, you could just write a decorator


00:29:18.800 --> 00:29:23.080
that looks whether that setting is on or off,


00:29:23.080 --> 00:29:25.200
and either returns the bare type wrap thing


00:29:25.200 --> 00:29:27.320
or the direct function directly,


00:29:27.320 --> 00:29:30.280
and it would be like zero runtime cost


00:29:30.280 --> 00:29:32.960
once it's turned off because the function is replaced with itself.


00:29:32.960 --> 00:29:35.840
Otherwise, it's replaced by the bare type decorated one.


00:29:35.840 --> 00:29:40.120
You might have to write 10 lines of Python,


00:29:40.120 --> 00:29:41.720
then you got that feature.


00:29:41.720 --> 00:29:43.600
>> The other thing is,


00:29:43.600 --> 00:29:45.480
how much of your code are you really going to want to


00:29:45.480 --> 00:29:48.440
throw bare type decorators around all over the place?


00:29:48.440 --> 00:29:50.720
>> Yeah. That's a good point. Maybe just the boundary.


00:29:50.720 --> 00:29:52.800
>> Yeah, at the API level.


00:29:52.800 --> 00:29:55.080
>> Yeah, exactly.


00:29:55.080 --> 00:29:57.360
>> Cool.


00:29:57.360 --> 00:29:59.600
>> Anyway, there it is.


00:29:59.600 --> 00:30:02.160
And I suppose that's it for all of our items.


00:30:02.160 --> 00:30:04.440
That's what we got lined up for you.


00:30:04.440 --> 00:30:05.280
Anything else?


00:30:05.280 --> 00:30:06.280
Some extras.


00:30:06.280 --> 00:30:07.120
- I have-


00:30:07.120 --> 00:30:07.940
- You want me to go first?


00:30:07.940 --> 00:30:08.780
You want to save yours?


00:30:08.780 --> 00:30:10.160
- Yeah, yeah, you go first.


00:30:10.160 --> 00:30:11.960
- All right, I already got my screen up anyway.


00:30:11.960 --> 00:30:16.120
Okay, so first of all, congratulations,


00:30:16.120 --> 00:30:22.080
Mike Fowler, who is right here in the audience.


00:30:22.080 --> 00:30:24.380
- Yeah, I mispronounced his last name, sorry.


00:30:24.380 --> 00:30:27.200
- Hopefully I got it right.


00:30:27.200 --> 00:30:28.040
- You did.


00:30:28.040 --> 00:30:36.520
at Mike the man on Twitter is the new safety and security engineer for PyPI.


00:30:36.520 --> 00:30:43.000
That's awesome, Mike. Thank you so much. Clearly an area that needs lots of attention. So I just


00:30:43.000 --> 00:30:49.160
wanted to say welcome. Thanks for keeping us all safe out there and excellent.


00:30:49.160 --> 00:30:53.480
>> Yeah, I got to hang out with Mike a lot at PyCon. So that's really pretty cool.


00:30:53.480 --> 00:30:56.240
>> Yeah, super cool, super cool.


00:30:56.240 --> 00:30:58.040
Then a couple of quick announcements,


00:30:58.040 --> 00:31:00.280
two conferences for people.


00:31:00.280 --> 00:31:03.320
PackagingCon, follow up on all of your items, Brian.


00:31:03.320 --> 00:31:07.800
PackagingCon is happening fully online.


00:31:07.800 --> 00:31:10.600
No, hold on. No, it's happening in Berlin as hybrid.


00:31:10.600 --> 00:31:13.920
So it's in Berlin, October 26-28,


00:31:13.920 --> 00:31:15.920
for all things packaging,


00:31:15.920 --> 00:31:19.400
Python people, Rust people, etc.


00:31:19.400 --> 00:31:22.160
So check that out.


00:31:22.160 --> 00:31:27.160
And the Cloud Builders Python Conf is September 6, 2023.


00:31:27.160 --> 00:31:31.400
It's put together by a Ukrainian group


00:31:31.400 --> 00:31:35.160
and it's just online so people can check that out as well.


00:31:35.160 --> 00:31:38.760
And speakers, are they still have a call for proposals?


00:31:38.760 --> 00:31:41.040
Doesn't look like it, I think it's open.


00:31:41.040 --> 00:31:43.960
It's already all set for the agenda.


00:31:43.960 --> 00:31:46.320
So people can check that out, it should be fun.


00:31:46.320 --> 00:31:49.240
And now onto your big news.


00:31:49.240 --> 00:31:52.760
- Okay, well, a couple, just a couple notes


00:31:52.760 --> 00:31:54.880
that I wanted to mention.


00:31:54.880 --> 00:31:58.680
The August release of Visual Studio Code


00:31:58.680 --> 00:32:00.520
has something I've been long awaiting.


00:32:00.520 --> 00:32:03.440
It's an error tolerant pytest discovery.


00:32:03.440 --> 00:32:05.120
So what does this mean?


00:32:05.120 --> 00:32:06.760
It means you've got,


00:32:06.760 --> 00:32:08.840
and there's like some comments down here.


00:32:08.840 --> 00:32:09.920
Oh, I went too far.


00:32:09.920 --> 00:32:13.240
You have to turn it on right now,


00:32:13.240 --> 00:32:15.040
but it's just in a setting.


00:32:15.040 --> 00:32:16.840
Apparently some people have it on by default.


00:32:16.840 --> 00:32:20.040
Anyway, they should just turn it on, it's better.


00:32:20.040 --> 00:32:24.380
But the gist is, if you've got like errors


00:32:24.380 --> 00:32:27.960
in some of your code, it used to just blow up.


00:32:27.960 --> 00:32:30.040
Like, let's say you've got a test suite,


00:32:30.040 --> 00:32:33.000
but you also have like some old junk tests


00:32:33.000 --> 00:32:35.400
off in a side directory that you don't use anymore.


00:32:35.400 --> 00:32:38.200
If they had import errors or syntax errors or whatever,


00:32:38.200 --> 00:32:39.540
it would just blow up the whole thing


00:32:39.540 --> 00:32:41.720
and you couldn't get any tests to import.


00:32:41.720 --> 00:32:45.060
Now it's tolerant and it just turns off the,


00:32:45.060 --> 00:32:48.420
it doesn't import those tests that have import errors.


00:32:48.420 --> 00:32:49.260
That's great.


00:32:49.260 --> 00:32:50.660
So you can still run the rest of the suite.


00:32:50.660 --> 00:32:51.740
So that's good.


00:32:51.740 --> 00:32:54.460
Be kind of still kind of cool.


00:32:54.460 --> 00:32:55.540
There's a couple of things.


00:32:55.540 --> 00:32:56.960
Be kind of cool if it could tell you


00:32:56.960 --> 00:32:58.500
which ones have had errors


00:32:58.500 --> 00:33:00.500
instead of just making them disappear.


00:33:00.500 --> 00:33:01.400
So that'd be neat.


00:33:01.400 --> 00:33:06.660
The other thing is guys, pytest isn't capitalized.


00:33:06.660 --> 00:33:10.460
So you gotta work on your capitalization, non-capitalization.


00:33:10.460 --> 00:33:14.220
- But discovery probably should be.


00:33:14.220 --> 00:33:16.220
Oh yeah, discovery should be.


00:33:16.220 --> 00:33:18.220
Oh, that's all right.


00:33:18.220 --> 00:33:19.220
That's tough.


00:33:19.220 --> 00:33:23.220
I always, I'm always unsure about my capitalization.


00:33:23.220 --> 00:33:26.220
It's so formal to capitalize everything.


00:33:26.220 --> 00:33:29.220
It's this time of year again,


00:33:29.220 --> 00:33:33.220
we got Python 3.12 release candidate one.


00:33:33.220 --> 00:33:37.220
So we're in the release candidates for Python 3.12.


00:33:37.220 --> 00:33:38.220
It's pretty exciting.


00:33:38.220 --> 00:33:41.220
Release candidate is a big deal though, right?


00:33:41.220 --> 00:33:45.720
It's we think this is the final version unless there's something gone wrong.


00:33:45.720 --> 00:33:46.120
Right.


00:33:46.120 --> 00:33:48.620
Yeah, it's it's right out of beta.


00:33:48.620 --> 00:33:58.120
Um, so anyway, speaking of beta, the big news for today is that I've got a Python


00:33:58.120 --> 00:34:03.320
testing with pytest bundle course up, and I'm super excited about it.


00:34:03.320 --> 00:34:04.720
I'm working really hard.


00:34:05.020 --> 00:34:10.020
However, it is in pre-release beta.


00:34:10.020 --> 00:34:13.520
I don't know, I made up something.


00:34:13.520 --> 00:34:14.360
- Early bird.


00:34:14.360 --> 00:34:15.600
- Early bird sort of.


00:34:15.600 --> 00:34:17.680
- Early beta bird.


00:34:17.680 --> 00:34:19.800
- Yeah, so what is going on?


00:34:19.800 --> 00:34:23.520
So there's, in the end, it's gonna be,


00:34:23.520 --> 00:34:27.080
actually I wrote it, I included on here is a video


00:34:27.080 --> 00:34:31.880
that is got like, welcome to the pre-release beta.


00:34:31.880 --> 00:34:32.800
And what does that mean?


00:34:32.800 --> 00:34:34.500
It's video, so you can watch that.


00:34:34.500 --> 00:34:47.500
The gist of it is, is the three sections of the book are going to go into three different courses, but the pre-release right now that's for sale is a bundle of all, that will be all three.


00:34:47.500 --> 00:34:53.500
There's two chapters ready for the primary power for the first part.


00:34:53.500 --> 00:34:58.500
And, but I'm just going to chug along and people can jump in if they want.


00:34:58.500 --> 00:35:05.620
I'm doing it as a beta because the book itself really is better because of the beta program that I did when I was writing the book


00:35:05.620 --> 00:35:08.740
and I'd love to have people come in and


00:35:08.740 --> 00:35:12.180
let me know where things need a little polish and we can


00:35:12.180 --> 00:35:17.780
You know, we can fix it along the way I also am setting up a


00:35:17.780 --> 00:35:20.820
Job or not a job board


00:35:20.820 --> 00:35:24.340
A discussion board for people to ask questions if they get stuck


00:35:24.740 --> 00:35:27.580
I really want to make sure everybody's successful


00:35:27.580 --> 00:35:29.440
in getting this up and running,


00:35:29.440 --> 00:35:31.140
getting up and running in pytest quickly.


00:35:31.140 --> 00:35:34.780
So totally excited about getting this done.


00:35:34.780 --> 00:35:37.120
Oh, one more thing I set up.


00:35:37.120 --> 00:35:40.680
I just launched it last night,


00:35:40.680 --> 00:35:43.980
but for Python Bytes listeners,


00:35:43.980 --> 00:35:47.620
you can use the coupon code Python Bytes with a Y.


00:35:47.620 --> 00:35:52.180
So, and we'll just throw that in the show notes.


00:35:52.180 --> 00:35:55.460
use Python bytes with a Y,


00:35:55.460 --> 00:35:57.900
and you can get 20% discount now


00:35:57.900 --> 00:36:02.260
through the end of the 17th, so just a few days.


00:36:02.260 --> 00:36:05.040
But that's enough time to grab it.


00:36:05.040 --> 00:36:06.660
So, cool.


00:36:06.660 --> 00:36:07.500
- Yeah, awesome.


00:36:07.500 --> 00:36:08.320
Congrats on this, Brian.


00:36:08.320 --> 00:36:09.500
This'll be exciting.


00:36:09.500 --> 00:36:11.060
I know it's a lot of work, so.


00:36:11.060 --> 00:36:12.580
(Brian laughs)


00:36:12.580 --> 00:36:13.540
- Yeah. - Good luck.


00:36:13.540 --> 00:36:14.740
- Thanks.


00:36:14.740 --> 00:36:16.420
- Yeah, absolutely.


00:36:16.420 --> 00:36:17.860
Oh, do you know what else is a lot of work?


00:36:17.860 --> 00:36:21.140
And ties back to my first item, learning JavaScript.


00:36:21.140 --> 00:36:22.380
Let's make that our joke.


00:36:22.380 --> 00:36:23.220
- Okay.


00:36:23.220 --> 00:36:25.340
- All right.


00:36:25.340 --> 00:36:27.220
So, here's the text.


00:36:27.220 --> 00:36:29.740
It looks like a WhatsApp conversation that somebody got,


00:36:29.740 --> 00:36:33.340
unfortunately, from their apartment manager.


00:36:33.340 --> 00:36:35.660
And of course, it's addressed to Michael,


00:36:35.660 --> 00:36:36.580
which is extra funny.


00:36:36.580 --> 00:36:37.540
"Hello, Michael.


00:36:37.540 --> 00:36:40.820
"Your apartment has received the second complaint.


00:36:40.820 --> 00:36:44.100
"Noise from the apartment is the problem.


00:36:44.100 --> 00:36:44.920
"The dog whines.


00:36:44.920 --> 00:36:47.760
"Apparently, you leave one home and the dog gets bored.


00:36:47.760 --> 00:36:50.740
"Please address this."


00:36:50.740 --> 00:36:53.360
The response from Michael is, "Hello, I don't have a dog.


00:36:53.360 --> 00:36:56.760
This is me learning JavaScript."


00:36:56.760 --> 00:36:58.760
Like screaming and yelling and kicking.


00:36:58.760 --> 00:37:01.200
>> Oh, dog whines.


00:37:01.200 --> 00:37:02.200
Okay.


00:37:02.200 --> 00:37:03.200
>> Yeah.


00:37:03.200 --> 00:37:04.200
That's pretty good.


00:37:04.200 --> 00:37:05.200
>> That is pretty funny.


00:37:05.200 --> 00:37:09.320
>> I could be like learning all sorts of programs.


00:37:09.320 --> 00:37:10.880
I could be learning Python, but yeah.


00:37:10.880 --> 00:37:13.320
Feels like a little extra special.


00:37:13.320 --> 00:37:14.960
A little extra special there.


00:37:14.960 --> 00:37:17.080
Have you got your web pack working?


00:37:17.080 --> 00:37:18.880
Have you got your requires working?


00:37:18.880 --> 00:37:23.040
Have you got your transpiler working yet?


00:37:23.040 --> 00:37:27.520
>> Man, that was me with trying to relearn CSS.


00:37:27.520 --> 00:37:29.920
So first time I learned CSS,


00:37:29.920 --> 00:37:33.540
we didn't have all these pre-compilers and stuff.


00:37:33.540 --> 00:37:36.840
So CSS is a completely different ballgame now.


00:37:36.840 --> 00:37:37.680
>> Yeah.


00:37:37.680 --> 00:37:38.360
>> Yeah.


00:37:38.360 --> 00:37:39.000
>> Well.


00:37:39.000 --> 00:37:40.320
>> Yeah, it's crazy stuff.


00:37:40.320 --> 00:37:43.160
Cool. Well, anyway, this is my joke for everyone.


00:37:43.160 --> 00:37:44.600
We've received a noise complaint.


00:37:44.600 --> 00:37:46.640
I'm sorry. I don't have a dog.


00:37:46.640 --> 00:37:50.880
>> Awesome. Well, it was a fun episode. Thanks again.


00:37:50.880 --> 00:37:53.520
>> Yeah, sure was. See you later.


00:37:53.520 --> 00:37:55.280
>> Bye.


00:37:55.280 --> 00:38:05.280
[BLANK_AUDIO]

