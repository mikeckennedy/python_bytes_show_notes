WEBVTT

00:00:00.001 --> 00:00:04.240
>> Hey, everybody. Hey, Michael.

00:00:04.240 --> 00:00:07.960
Welcome to one more wonderful Python Bytes

00:00:07.960 --> 00:00:10.240
in the wonderful world of Python,

00:00:10.240 --> 00:00:13.080
and it's the week before PyCon.

00:00:13.080 --> 00:00:14.720
>> It's PyCon Eve.

00:00:14.720 --> 00:00:17.240
>> Yeah. So pretty excited.

00:00:17.240 --> 00:00:18.840
>> It's two days.

00:00:18.840 --> 00:00:20.040
>> Two days. It starts.

00:00:20.040 --> 00:00:21.160
>> Two and a half days.

00:00:21.160 --> 00:00:23.920
>> Or the tutorials might be going already.

00:00:23.920 --> 00:00:25.120
I don't know when they start.

00:00:25.120 --> 00:00:27.040
>> I don't either. Maybe I think it's Wednesday.

00:00:27.040 --> 00:00:27.880
>> Wednesday. Okay.

00:00:27.880 --> 00:00:31.520
>> So for people who are not watching in real time, that's tomorrow.

00:00:31.520 --> 00:00:34.040
>> So there's probably a lot of people going to listen to this one on

00:00:34.040 --> 00:00:37.840
the flight or the train or the car, whatever.

00:00:37.840 --> 00:00:41.480
>> Indeed. Enjoy your trip to PyCon if you're going.

00:00:41.480 --> 00:00:46.160
>> For everybody else, let's get started.

00:00:46.160 --> 00:00:48.600
Hello and welcome to Python Bytes,

00:00:48.600 --> 00:00:52.880
where we deliver Python news and headlines directly to your earbuds.

00:00:52.880 --> 00:00:55.480
This is Episode 383,

00:00:55.480 --> 00:00:59.000
recorded May 14th, 2024.

00:00:59.000 --> 00:01:00.320
I am Brian Okken.

00:01:00.320 --> 00:01:02.520
>> I'm Michael Kennedy.

00:01:02.520 --> 00:01:07.080
>> Today's episode is sponsored by a new sponsor, Mailtrap.

00:01:07.080 --> 00:01:10.600
Thank you, Mailtrap. Listen to their spot later in the show.

00:01:10.600 --> 00:01:12.080
If you want to connect to us,

00:01:12.080 --> 00:01:16.200
we're all on Fosstodon and on Mastodon.

00:01:16.200 --> 00:01:19.200
Those links are all in the show notes, of course.

00:01:19.200 --> 00:01:22.320
Also in the show notes or just at pythonbytes.fm,

00:01:22.320 --> 00:01:26.120
you can find out information to join us live on YouTube.

00:01:26.120 --> 00:01:29.360
It's always fun. If not, that's okay.

00:01:29.360 --> 00:01:32.960
But you can catch us later if you sign up to be a friend of the show,

00:01:32.960 --> 00:01:34.240
you can get the e-mail.

00:01:34.240 --> 00:01:37.360
The friend of the show e-mails are going well.

00:01:37.360 --> 00:01:39.920
It's growing well.

00:01:39.920 --> 00:01:40.960
I'm excited about that.

00:01:40.960 --> 00:01:44.040
Also, the open rate is staying very high.

00:01:44.040 --> 00:01:46.320
So that's pretty exciting. So thank you.

00:01:46.320 --> 00:01:47.920
>> People must care. I think it's cool.

00:01:47.920 --> 00:01:49.800
I enjoy getting them myself, actually.

00:01:49.800 --> 00:01:51.720
>> Yeah, I do too.

00:01:51.720 --> 00:01:57.040
>> Also, I enjoy hearing from Michael about the exciting news in Python.

00:01:57.040 --> 00:01:59.440
So Michael, what do you got for us first?

00:01:59.440 --> 00:02:01.560
>> Let's kick it off. I mean,

00:02:01.560 --> 00:02:04.880
Brian, why aren't you shipping code faster? Come on.

00:02:04.880 --> 00:02:07.200
What's taking so long?

00:02:07.200 --> 00:02:08.200
>> Well.

00:02:08.200 --> 00:02:11.280
>> You know that feeling when you start a new project,

00:02:11.280 --> 00:02:12.800
it thinks everything's going quick,

00:02:12.800 --> 00:02:13.960
and then after a couple of years,

00:02:13.960 --> 00:02:18.120
you're like, why do we have so many meetings to add a button?

00:02:18.120 --> 00:02:20.720
You know what I mean? Or something like that.

00:02:20.720 --> 00:02:24.280
>> Yeah, it's tricky.

00:02:24.280 --> 00:02:28.160
So we're not the only ones to wonder this.

00:02:28.160 --> 00:02:30.320
Daksh Gupta said,

00:02:30.320 --> 00:02:35.280
"I was also wondering this," but he took more action than most people I imagine would,

00:02:35.280 --> 00:02:39.960
and said, "I'm going to ask 100 developers why they aren't shipping code faster,

00:02:39.960 --> 00:02:43.480
and then write it up." So I read it up, and let's share it.

00:02:43.480 --> 00:02:46.320
There's some interesting things in here, basically.

00:02:46.320 --> 00:02:51.040
So look, I talked to people from a lot of the tech companies you would know,

00:02:51.040 --> 00:02:56.040
Meta, Pinterest, Heroku, Roblox, etc.

00:02:56.040 --> 00:02:59.440
Some that I could probably make a joke out of,

00:02:59.440 --> 00:03:01.480
but I'm going to try not to.

00:03:01.480 --> 00:03:03.280
I'm going to try not to.

00:03:03.280 --> 00:03:06.760
But I thought it might be fun to summarize this for you.

00:03:06.760 --> 00:03:12.960
All right. So they broke it down into multiple big categories,

00:03:12.960 --> 00:03:17.960
like meetings or human interaction type stuff.

00:03:17.960 --> 00:03:22.960
And the first big category is code bases.

00:03:22.960 --> 00:03:29.040
And right at the top is dependency bugs.

00:03:29.040 --> 00:03:35.520
You kind of got to look at these a little bit of,

00:03:35.520 --> 00:03:38.400
what are your current today blockers?

00:03:38.400 --> 00:03:41.400
And maybe the person who said, "I'm blocked by this,"

00:03:41.400 --> 00:03:44.400
is a 27-year-old who never worked,

00:03:44.400 --> 00:03:48.040
when your only resource was a book, and there were no packages,

00:03:48.040 --> 00:03:49.520
no dependencies.

00:03:49.520 --> 00:03:50.720
You want a dependency?

00:03:50.720 --> 00:03:52.560
You crack it open, and you get the algorithm,

00:03:52.560 --> 00:03:53.480
and you start writing.

00:03:53.480 --> 00:03:55.480
You know what I mean? Like that.

00:03:55.480 --> 00:03:58.480
So the problem is, they say, "Look, if I hit..."

00:03:58.480 --> 00:04:01.800
They have got a bunch of quotes that are actually nice in here.

00:04:01.800 --> 00:04:04.240
Like, so Jack, an ex-Microsoft person,

00:04:04.240 --> 00:04:08.360
says, "The number one barrier to shipping faster is dependency bugs."

00:04:08.360 --> 00:04:11.640
So hitting a random mysterious bug with libraries

00:04:11.640 --> 00:04:15.120
that require reading tons of old code,

00:04:15.120 --> 00:04:17.440
or stack overflow links and GitHub issues,

00:04:17.440 --> 00:04:20.040
or just trying to figure out, like, why does this thing,

00:04:20.040 --> 00:04:22.360
why did it stop working? You know what I mean?

00:04:22.360 --> 00:04:24.440
And I would change that a little bit,

00:04:24.440 --> 00:04:26.360
or maybe Michael's version is,

00:04:26.360 --> 00:04:31.600
when something changes and it becomes incompatible,

00:04:31.600 --> 00:04:34.720
and the worst case scenario is,

00:04:34.720 --> 00:04:39.720
especially with the modern resolver in pip, basically,

00:04:39.720 --> 00:04:44.400
is if we can't find a matching fit for you,

00:04:44.400 --> 00:04:47.480
you don't get it, rather than,

00:04:47.480 --> 00:04:49.680
we're going to give you a warning that it's not a great idea,

00:04:49.680 --> 00:04:51.440
but we're going to let you run it, right?

00:04:51.440 --> 00:04:53.960
So if there's something that says,

00:04:53.960 --> 00:04:57.560
"I have to have this version of a library less than a version,"

00:04:57.560 --> 00:04:59.480
and something else says, "I have to have this library

00:04:59.480 --> 00:05:00.720
greater than a version,"

00:05:00.720 --> 00:05:02.560
and there's not an intersection there,

00:05:04.000 --> 00:05:06.200
you're now hunting around, and it's, you're like,

00:05:06.200 --> 00:05:09.040
"Well, guess we're done."

00:05:09.040 --> 00:05:10.720
And you can roll back, right?

00:05:10.720 --> 00:05:12.480
You could say, "Okay, well, what of this, like,

00:05:12.480 --> 00:05:15.080
weird combination of things that it's coming up

00:05:15.080 --> 00:05:16.960
that I got to deal with, can I roll back

00:05:16.960 --> 00:05:18.880
so that there is an intersection?"

00:05:18.880 --> 00:05:23.880
But if you need a new feature, all right, then it's hard.

00:05:23.880 --> 00:05:27.000
Or even if it's not a new feature, you need,

00:05:27.000 --> 00:05:28.600
it's just like, "Well, here's an hour and a half

00:05:28.600 --> 00:05:33.240
I spent juggling the intersection of these dependencies,

00:05:33.240 --> 00:05:36.400
such that I didn't care about their interaction, really.

00:05:36.400 --> 00:05:38.720
I just want them both to be here,

00:05:38.720 --> 00:05:40.960
but there's this bizarre interaction I got to deal with."

00:05:40.960 --> 00:05:45.240
And my complaint about the pip being 100% like,

00:05:45.240 --> 00:05:48.000
"No, we can't find it, so you don't get it,"

00:05:48.000 --> 00:05:50.720
is that incompatibility, the one thing that said less than,

00:05:50.720 --> 00:05:52.040
the other thing said greater than,

00:05:52.040 --> 00:05:56.280
maybe that has to do with multi-processing.

00:05:56.280 --> 00:05:57.920
If you're not using multi-processing,

00:05:57.920 --> 00:05:59.560
it would probably be fine.

00:05:59.560 --> 00:06:02.760
Even though there's like a known intersection bug,

00:06:02.760 --> 00:06:05.800
if you're not using that part of the code path,

00:06:05.800 --> 00:06:06.720
it's not your problem.

00:06:06.720 --> 00:06:08.040
And you can say like, "I tested it.

00:06:08.040 --> 00:06:10.640
I don't care if it says it's the wrong version.

00:06:10.640 --> 00:06:12.240
I want to just keep working."

00:06:12.240 --> 00:06:16.240
And so that's a lot of timing spent on that.

00:06:16.240 --> 00:06:19.720
- Okay, there also is bugs in your dependencies.

00:06:19.720 --> 00:06:23.520
And I don't know if that was covered by this or not.

00:06:23.520 --> 00:06:25.640
- Yes, that's true.

00:06:25.640 --> 00:06:27.840
- But that's one of those,

00:06:27.840 --> 00:06:30.920
I think there's expectations that don't match really

00:06:32.040 --> 00:06:34.400
how they, what reality should be.

00:06:34.400 --> 00:06:37.720
So we, like you said, we used to write all of our code.

00:06:37.720 --> 00:06:40.560
And even if you got it out of a book,

00:06:40.560 --> 00:06:42.040
you wouldn't blame the book author

00:06:42.040 --> 00:06:44.600
if there was a bug in it, you would fix it yourself.

00:06:44.600 --> 00:06:47.240
But now we've got tons of dependencies

00:06:47.240 --> 00:06:48.640
and there's a lot of projects

00:06:48.640 --> 00:06:51.480
that are really 10 to 20% new code

00:06:51.480 --> 00:06:55.000
and the rest of it we're pulling in from everybody else.

00:06:55.000 --> 00:06:57.720
Now, if those other things have a bug,

00:06:57.720 --> 00:06:59.040
do we think that it's,

00:06:59.400 --> 00:07:02.400
we just save time to not have to write all that.

00:07:02.400 --> 00:07:05.400
Do we go out and fix those in the dependent projects

00:07:05.400 --> 00:07:07.920
or do we just complain about it or?

00:07:07.920 --> 00:07:09.520
- Yeah, exactly.

00:07:09.520 --> 00:07:11.480
Exactly, and it's usually open source.

00:07:11.480 --> 00:07:13.480
Usually PRs are welcome, right?

00:07:13.480 --> 00:07:15.080
You don't want to do it.

00:07:15.080 --> 00:07:18.160
But that's why I brought up like the younger developer

00:07:18.160 --> 00:07:19.680
who didn't have to live through the time

00:07:19.680 --> 00:07:24.600
where there were no package management things

00:07:24.600 --> 00:07:26.480
'cause there were no packages, right?

00:07:26.480 --> 00:07:29.400
You just, maybe if you're lucky,

00:07:29.400 --> 00:07:31.280
you download some random code off the internet

00:07:31.280 --> 00:07:34.280
and you like work it into your app, right?

00:07:34.280 --> 00:07:37.120
And so the velocity of writing software

00:07:37.120 --> 00:07:39.840
is so much faster than it used to be.

00:07:39.840 --> 00:07:42.320
And when it takes a step back by 20%

00:07:42.320 --> 00:07:44.640
because that thing has drawbacks,

00:07:44.640 --> 00:07:46.520
it's still vastly better than it used to be.

00:07:46.520 --> 00:07:48.080
So that was all I was saying there.

00:07:48.080 --> 00:07:49.040
- Yeah, yeah.

00:07:49.040 --> 00:07:52.320
- And I know you live through the same thing, right?

00:07:52.320 --> 00:07:53.160
- Yeah.

00:07:53.160 --> 00:07:56.280
- Yeah, okay, so that's not the only one.

00:07:56.280 --> 00:07:57.360
No, no, there's plenty more.

00:07:57.360 --> 00:07:58.920
Complicated code bases.

00:07:58.920 --> 00:08:03.080
It's tricky.

00:08:03.080 --> 00:08:04.800
- I would have put this at number one if it was me.

00:08:04.800 --> 00:08:05.640
- Yeah.

00:08:05.640 --> 00:08:10.080
So it says here, look, the logic is sound.

00:08:10.080 --> 00:08:11.120
You got a growing startup.

00:08:11.120 --> 00:08:12.960
You got to ship fast or you're going to die.

00:08:12.960 --> 00:08:14.120
No time to write docs.

00:08:14.120 --> 00:08:16.400
Early engineers churn out as the company grows.

00:08:16.400 --> 00:08:19.240
New engineers come into a big mess

00:08:19.240 --> 00:08:20.960
and they've got to deal with it,

00:08:20.960 --> 00:08:24.080
but they still got to grow fast, ship fast, et cetera, right?

00:08:24.080 --> 00:08:26.480
It says Maria from Amazon says,

00:08:26.480 --> 00:08:30.120
there's so much undocumented in our service,

00:08:30.120 --> 00:08:32.480
including poor records of new features,

00:08:32.480 --> 00:08:35.360
non-existent or outdated info in our dependencies

00:08:35.360 --> 00:08:38.600
or even essential things like best practices for testing.

00:08:38.600 --> 00:08:40.120
A lot of time is wasted

00:08:40.120 --> 00:08:43.840
and things trying to find what this is all about, right?

00:08:43.840 --> 00:08:46.280
And nobody has time to write documentation,

00:08:46.280 --> 00:08:47.800
which creates a vicious cycle.

00:08:47.800 --> 00:08:50.280
This is your number one?

00:08:51.560 --> 00:08:54.040
- The complicated code base is definitely be number one,

00:08:54.040 --> 00:08:59.040
but the documentation and comments part,

00:08:59.040 --> 00:09:03.240
I used to have a tool handy that would strip out,

00:09:03.240 --> 00:09:07.200
do a fork of a repo and strip out all the comments

00:09:07.200 --> 00:09:10.360
because it was so much easier to navigate

00:09:10.360 --> 00:09:12.720
some code bases without the comments.

00:09:12.720 --> 00:09:13.760
- Yeah.

00:09:13.760 --> 00:09:16.080
Comments are great, but if it's,

00:09:16.080 --> 00:09:18.800
and I don't really know what else you do for this,

00:09:18.800 --> 00:09:23.320
but if the function is, let's say 10 lines,

00:09:23.320 --> 00:09:27.400
but the documentation is 20 or 30,

00:09:27.400 --> 00:09:31.440
all of a sudden you're like, okay, I'm trying to see,

00:09:31.440 --> 00:09:32.440
I'm trying, you know what I mean?

00:09:32.440 --> 00:09:34.600
It's like a little tricky and you can do stuff,

00:09:34.600 --> 00:09:38.600
for example, in editors, you can code fold the comments

00:09:38.600 --> 00:09:39.760
and things like that, right?

00:09:39.760 --> 00:09:40.680
That could help.

00:09:40.680 --> 00:09:42.760
- Yeah, but also like when you fix a bug,

00:09:42.760 --> 00:09:45.000
do you go back and fix the comment?

00:09:45.000 --> 00:09:47.000
Sometimes not.

00:09:47.000 --> 00:09:48.680
- Sometimes not.

00:09:48.680 --> 00:09:50.360
- Okay, let's move on.

00:09:50.360 --> 00:09:53.880
- All right, next major section is process and QA loops.

00:09:53.880 --> 00:09:55.520
I'm gonna see what you think about this,

00:09:55.520 --> 00:09:59.120
but it's not so much a test or no test,

00:09:59.120 --> 00:10:02.400
but when you have a QA department and so on,

00:10:02.400 --> 00:10:06.240
it says Taylor, who's worked for a series

00:10:06.240 --> 00:10:08.400
of high growth startups, says,

00:10:08.400 --> 00:10:12.160
me, creating a test spec for QA,

00:10:12.160 --> 00:10:13.880
QA finding problems,

00:10:13.880 --> 00:10:16.280
getting a list of problems two days later,

00:10:16.280 --> 00:10:17.640
fixing the merge conflicts,

00:10:17.640 --> 00:10:20.560
'cause the code has changed since then,

00:10:20.560 --> 00:10:23.880
switching back, back to QA, keep looping,

00:10:23.880 --> 00:10:24.800
that kind of thing, right?

00:10:24.800 --> 00:10:27.480
Maybe the challenge here is depending on other people

00:10:27.480 --> 00:10:28.640
for your code quality.

00:10:28.640 --> 00:10:33.000
- Yeah, I think that's always in large projects,

00:10:33.000 --> 00:10:33.840
it's always gonna be a thing,

00:10:33.840 --> 00:10:36.800
but having one of the things that helps with that,

00:10:36.800 --> 00:10:38.400
I know we're not trying to fix this here,

00:10:38.400 --> 00:10:42.400
but having embedded QA developers in the development teams.

00:10:42.400 --> 00:10:45.680
- Yeah, that's an interesting suggestion for sure.

00:10:47.400 --> 00:10:50.920
Waiting for specs on larger companies,

00:10:50.920 --> 00:10:53.640
just waiting for, what are we gonna build?

00:10:53.640 --> 00:10:57.760
Well, I gotta wait for people to approve the schemas

00:10:57.760 --> 00:10:59.920
or the API points or whatever.

00:10:59.920 --> 00:11:02.600
- People wishing we had waterfall again,

00:11:02.600 --> 00:11:04.040
I don't know what's going on.

00:11:04.040 --> 00:11:06.640
- Yeah, exactly, just design it all up front

00:11:06.640 --> 00:11:07.560
and give it to me.

00:11:07.560 --> 00:11:09.800
(laughing)

00:11:09.800 --> 00:11:12.160
I think a lot of the next one also

00:11:12.160 --> 00:11:14.520
is awaiting stakeholder approval.

00:11:14.520 --> 00:11:17.280
I think there's just a lot of that kind of stuff.

00:11:17.280 --> 00:11:21.480
- We're a pure vegetarian team, so we have no stakeholders.

00:11:21.480 --> 00:11:23.760
(laughing)

00:11:23.760 --> 00:11:25.800
- Put the steak down.

00:11:25.800 --> 00:11:30.800
Okay, Raj from AWS said, "Amazon meetings approval,

00:11:30.800 --> 00:11:33.200
"taking 10 different stakeholder,

00:11:33.200 --> 00:11:34.640
"talking to 10 different stakeholders

00:11:34.640 --> 00:11:37.040
"because changing the color of a button

00:11:37.040 --> 00:11:39.480
"affects 15 microservices."

00:11:39.480 --> 00:11:41.720
(laughing)

00:11:41.720 --> 00:11:43.960
Oh, microservices, could that just be its own thing

00:11:43.960 --> 00:11:45.200
like microservices?

00:11:45.200 --> 00:11:46.120
Okay, let's go.

00:11:46.560 --> 00:11:47.560
(laughing)

00:11:47.560 --> 00:11:50.320
Writing tests, devs complain around

00:11:50.320 --> 00:11:53.160
tests could be basically divided into one,

00:11:53.160 --> 00:11:56.000
not enough tests or bad tests.

00:11:56.000 --> 00:11:59.400
So Grant at FinTech Unicorn,

00:11:59.400 --> 00:12:01.960
"The biggest thing was we didn't have good tests

00:12:01.960 --> 00:12:05.480
"or good types, so I had to do a whole lot of work to do

00:12:05.480 --> 00:12:08.960
"and testing of stuff whenever I wanted to ship things."

00:12:08.960 --> 00:12:11.800
- Yeah.

00:12:11.800 --> 00:12:12.840
- Yeah.

00:12:12.840 --> 00:12:13.680
- You could have wrote them.

00:12:13.680 --> 00:12:14.920
He could have wrote them.

00:12:14.920 --> 00:12:16.280
- Yeah, yeah, yeah.

00:12:16.280 --> 00:12:17.760
Another one has to do with,

00:12:17.760 --> 00:12:21.920
it doesn't at first sound like bad tests,

00:12:21.920 --> 00:12:25.480
but CI/CD taking so long,

00:12:25.480 --> 00:12:30.120
so running pipelines for shipping takes a lot of time

00:12:30.120 --> 00:12:31.560
and ensures proper code coverage.

00:12:31.560 --> 00:12:33.280
The tests sometimes require these pipelines

00:12:33.280 --> 00:12:35.600
to take their time, which slows us down.

00:12:35.600 --> 00:12:37.360
Yeah.

00:12:37.360 --> 00:12:41.400
- Yeah, I know there's more here,

00:12:41.400 --> 00:12:46.400
but one of the metrics that I love is throughput.

00:12:46.400 --> 00:12:51.280
So is it throughput or cycle time?

00:12:51.280 --> 00:12:52.120
I don't know.

00:12:52.120 --> 00:12:52.960
I think it's cycle time.

00:12:52.960 --> 00:12:54.840
Basically, how long does it take you to get

00:12:54.840 --> 00:12:59.840
from like a single line code change that's to shipping

00:12:59.840 --> 00:13:03.600
and how like all that process through the CI pipeline,

00:13:03.600 --> 00:13:06.680
the testing approvals, whatever you have to do

00:13:06.680 --> 00:13:08.960
to measure that and try to get that as low as possible

00:13:08.960 --> 00:13:10.440
and get the junk out of it

00:13:10.440 --> 00:13:14.480
because that is a problem.

00:13:14.480 --> 00:13:16.560
- Yeah, absolutely.

00:13:16.560 --> 00:13:18.120
All right, I kind of also blended the last one

00:13:18.120 --> 00:13:18.960
together with this.

00:13:18.960 --> 00:13:22.040
So people are waiting for PRs to be approved.

00:13:22.040 --> 00:13:23.120
Scope creep.

00:13:23.120 --> 00:13:29.400
Josh says, "The human tendency to stuff last minute items

00:13:29.400 --> 00:13:31.800
"into the crevices of their luggage minutes

00:13:31.800 --> 00:13:33.940
"before leaving for the airport manifests itself

00:13:33.940 --> 00:13:36.560
"at software companies as scope creep.

00:13:36.560 --> 00:13:40.140
"Slowly and surely it will push back your release date

00:13:40.140 --> 00:13:42.240
"with every incremental addition feeling like

00:13:42.240 --> 00:13:45.500
"an insignificant task, but in aggregate,

00:13:45.500 --> 00:13:48.680
"adding significant molasses to the team's philosophy."

00:13:48.680 --> 00:13:56.320
Yes, just ship it and then add those features later.

00:13:56.320 --> 00:14:00.960
Excessive meetings, I agree.

00:14:00.960 --> 00:14:02.960
And this, okay, I'm gonna wrap it up with this one, Brian,

00:14:02.960 --> 00:14:04.520
'cause it's been kind of long, but this is interesting.

00:14:04.520 --> 00:14:08.160
Motivation, Diane, a former engineer at Meta

00:14:08.160 --> 00:14:11.000
said the number one reason that slowed her down

00:14:11.000 --> 00:14:12.640
was motivation.

00:14:12.640 --> 00:14:16.320
So honest answer is I was working on ads.

00:14:16.320 --> 00:14:19.140
And that's a very old, complicated, and large stack.

00:14:19.140 --> 00:14:21.780
I didn't understand it.

00:14:21.780 --> 00:14:24.480
My friends on younger teams seemed happier.

00:14:24.480 --> 00:14:26.400
I was miserable.

00:14:26.400 --> 00:14:29.480
Yeah, like, so basically, shouldn't be surprising,

00:14:29.480 --> 00:14:31.420
people wanna work on inspiring projects.

00:14:31.420 --> 00:14:34.280
And when you're inspired, think more about it,

00:14:34.280 --> 00:14:35.680
you put more time into it, and be like,

00:14:35.680 --> 00:14:38.280
"Well, could we squeeze a percent of a percent

00:14:38.280 --> 00:14:41.460
"out of this retargeting thing

00:14:41.460 --> 00:14:43.960
"to squeeze a bit more money for the company?"

00:14:43.960 --> 00:14:46.480
Like, not the same as sort of inspiration, is it?

00:14:46.480 --> 00:14:51.280
All right, well, people can check this list out,

00:14:51.280 --> 00:14:55.240
and hopefully, you know, maybe bring some of these ideas

00:14:55.240 --> 00:14:57.640
together to push back some of these problems

00:14:57.640 --> 00:14:59.000
at your company.

00:14:59.000 --> 00:14:59.840
Yeah.

00:15:00.680 --> 00:15:03.560
All right, back to you, Brian.

00:15:03.560 --> 00:15:08.120
- Well, I wanna talk about Python 3.13, yay!

00:15:08.120 --> 00:15:09.600
- Speaking of shipping things.

00:15:09.600 --> 00:15:11.280
- Yeah, shipping things.

00:15:11.280 --> 00:15:16.280
3.13, 3.13.0, beta one is released as of May 8th.

00:15:16.280 --> 00:15:22.520
I guess this is like a week old.

00:15:22.520 --> 00:15:24.600
Anyway, beta one released,

00:15:24.600 --> 00:15:27.680
and there's some fun stuff in here.

00:15:27.680 --> 00:15:30.200
So beta's available to play with,

00:15:30.200 --> 00:15:32.900
and reminder, the beta does not mean

00:15:32.900 --> 00:15:34.320
that it's completely done.

00:15:34.320 --> 00:15:36.200
It is half-baked.

00:15:36.200 --> 00:15:40.400
So the feature freeze for Python,

00:15:40.400 --> 00:15:42.060
is it in feature freeze?

00:15:42.060 --> 00:15:44.240
I guess, is it feature?

00:15:44.240 --> 00:15:45.080
- I believe so.

00:15:45.080 --> 00:15:45.900
- Oh, okay.

00:15:45.900 --> 00:15:46.740
- Yeah, I believe when they hit beta,

00:15:46.740 --> 00:15:49.480
they say, "What's here is here."

00:15:49.480 --> 00:15:50.320
- Yeah, okay.

00:15:50.320 --> 00:15:51.520
- Ideally, unless maybe they have to go

00:15:51.520 --> 00:15:52.360
to take something out,

00:15:52.360 --> 00:15:55.160
because they can't get it to work in the end.

00:15:55.160 --> 00:15:58.280
- All right, so disclaimer, it is still under development,

00:15:58.280 --> 00:16:01.160
but it is, there are four beta releases.

00:16:01.780 --> 00:16:05.420
Previews is planned for 3.13,

00:16:05.420 --> 00:16:08.500
and this, so this is a good time to,

00:16:08.500 --> 00:16:12.380
it says, "We bold, strongly encourage maintainers

00:16:12.380 --> 00:16:14.700
"of third-party projects to test with 3.13."

00:16:14.700 --> 00:16:16.500
So time to turn on your,

00:16:16.500 --> 00:16:19.460
or at least check to see if you can turn

00:16:19.460 --> 00:16:21.520
on your 3.13 pipelines in CI.

00:16:21.520 --> 00:16:26.740
So a whole bunch of fun new things in 3.13.

00:16:26.740 --> 00:16:28.900
A lot of these are sort of internal stuff

00:16:28.900 --> 00:16:31.160
that are, that I'm excited about,

00:16:31.160 --> 00:16:34.480
but end users maybe might not care about.

00:16:34.480 --> 00:16:36.680
There's the experimental thread,

00:16:36.680 --> 00:16:40.400
free threaded build mode with,

00:16:40.400 --> 00:16:43.160
to disable the GIL, that's kind of fun.

00:16:43.160 --> 00:16:47.620
A preliminary experimental just-in-time compiler.

00:16:47.620 --> 00:16:50.640
That's kind of neat.

00:16:50.640 --> 00:16:54.020
This is cool, a cyclic garbage collect,

00:16:54.020 --> 00:16:57.360
a garbage collector that is now incremental,

00:16:57.360 --> 00:16:59.920
which should mean shorter pauses for collection

00:16:59.920 --> 00:17:03.080
and programs with a lot of objects.

00:17:03.080 --> 00:17:07.320
And a different version of Mimalloc,

00:17:07.320 --> 00:17:10.000
Mimalloc, I don't know how to pronounce that.

00:17:10.000 --> 00:17:13.960
That, yeah, some possible memory improvements,

00:17:13.960 --> 00:17:15.080
which is kind of neat.

00:17:15.080 --> 00:17:18.320
The thing that I'm really, okay, a couple other notes.

00:17:18.320 --> 00:17:21.360
I'll get to the exciting thing that I'm excited about.

00:17:21.360 --> 00:17:23.120
There's a bunch of removals.

00:17:23.120 --> 00:17:27.500
So I guess we're getting rid of CGI now, whatever.

00:17:27.500 --> 00:17:29.920
That's how you run the web.

00:17:29.920 --> 00:17:31.320
- However, I run my website.

00:17:31.320 --> 00:17:33.080
(laughing)

00:17:33.080 --> 00:17:36.000
- And last week I did, I mentioned this last week,

00:17:36.000 --> 00:17:38.840
typing that type is, type is,

00:17:38.840 --> 00:17:42.680
I think I pronounced it type LS, it's IS.

00:17:42.680 --> 00:17:45.160
That makes more sense, thanks.

00:17:45.160 --> 00:17:48.000
I was looking at the wrong font, I guess.

00:17:48.000 --> 00:17:50.720
But the, some of the exciting bits

00:17:50.720 --> 00:17:55.280
are that we have a new improved REPL

00:17:55.280 --> 00:17:58.360
or interactive interpreter.

00:17:58.360 --> 00:18:02.600
And this is so exciting that actually Trey Hunter

00:18:02.600 --> 00:18:03.700
wrote an article about it.

00:18:03.700 --> 00:18:07.200
So even like the URL for this is,

00:18:07.200 --> 00:18:09.840
I have the URL hidden,

00:18:09.840 --> 00:18:12.860
is like my favorite thing of Python 3.13.

00:18:12.860 --> 00:18:16.600
So what's cool about the REPL

00:18:16.600 --> 00:18:18.400
is there's a bunch of cool stuff.

00:18:18.400 --> 00:18:21.560
There's a, it's colored prompt, which is fun.

00:18:21.560 --> 00:18:22.680
We like colors now.

00:18:22.680 --> 00:18:27.600
And then, ooh, it's like blue.

00:18:27.600 --> 00:18:30.000
There's, you can exit now.

00:18:30.000 --> 00:18:31.000
You used to have to do,

00:18:31.000 --> 00:18:34.280
it used to say like exit, bracket, bracket, or exit.

00:18:34.280 --> 00:18:35.600
- What, it'll exit?

00:18:35.600 --> 00:18:36.960
- Yeah, exit works now.

00:18:36.960 --> 00:18:38.200
- Oh my gosh.

00:18:38.200 --> 00:18:40.160
I was thinking of doing a PR to make this happen.

00:18:40.160 --> 00:18:41.920
I'm just like, why is this so cool?

00:18:41.920 --> 00:18:43.280
(laughing)

00:18:43.280 --> 00:18:44.120
- Yay, exit works.

00:18:44.120 --> 00:18:45.840
- I mean a pep, just like, we gotta,

00:18:45.840 --> 00:18:47.560
like we gotta rally folks.

00:18:47.560 --> 00:18:50.600
- No, this is worth 3.13 just to get exit to work.

00:18:50.600 --> 00:18:54.200
(laughing)

00:18:54.200 --> 00:18:55.840
Block level history, really cool.

00:18:55.840 --> 00:18:59.880
So basically this is like some of these niceties

00:18:59.880 --> 00:19:04.300
that you used to get from other sort of alternative REPLs,

00:19:04.300 --> 00:19:06.640
things like being able to edit the block

00:19:06.640 --> 00:19:10.600
and some little block history.

00:19:10.600 --> 00:19:12.960
It's really pretty cool to be able to like go back

00:19:12.960 --> 00:19:14.680
and modify things.

00:19:14.680 --> 00:19:17.080
And pasting code works better.

00:19:17.080 --> 00:19:21.840
So if you copy some stuff out of the REPL

00:19:21.840 --> 00:19:22.680
and paste it in the REPL,

00:19:22.680 --> 00:19:25.640
it doesn't paste in the dot, dot, dots correctly.

00:19:25.640 --> 00:19:27.360
You know, it does that right now.

00:19:27.360 --> 00:19:29.120
So, so neat.

00:19:29.120 --> 00:19:32.160
- Yeah.

00:19:32.160 --> 00:19:33.600
- The downside, it's curses.

00:19:33.600 --> 00:19:37.040
So it won't work correctly on,

00:19:37.040 --> 00:19:38.800
doesn't currently work on Windows.

00:19:38.800 --> 00:19:43.440
So that's, actually it's a pretty big deal, but you know.

00:19:44.480 --> 00:19:47.240
Anyway, some fun stuff.

00:19:47.240 --> 00:19:48.320
- Why not Rich?

00:19:48.320 --> 00:19:50.600
- Why not Rich?

00:19:50.600 --> 00:19:52.400
- Rich and Textual.

00:19:52.400 --> 00:19:54.760
That would have been awesome if they'd done that.

00:19:54.760 --> 00:19:55.920
(laughing)

00:19:55.920 --> 00:19:57.040
Right, I mean, I'm not joking.

00:19:57.040 --> 00:19:59.120
Like there's, it works all cross-platform.

00:19:59.120 --> 00:20:02.320
It's got some incredible UI stuff.

00:20:02.320 --> 00:20:03.360
Would have been cool.

00:20:03.360 --> 00:20:08.280
- Yeah, Rich and Textual don't work everywhere either,

00:20:08.280 --> 00:20:12.000
but you know, but more places.

00:20:12.000 --> 00:20:15.360
Maybe this is a to be done,

00:20:15.360 --> 00:20:19.360
or maybe just you get the old terminal on Windows,

00:20:19.360 --> 00:20:21.600
but you know, that's 50% of the user base, right?

00:20:21.600 --> 00:20:23.760
That's not, it's not like, well,

00:20:23.760 --> 00:20:28.760
there's one particular micro Python type of device

00:20:28.760 --> 00:20:34.520
that's like this odd $5 thing that goes into tractors

00:20:34.520 --> 00:20:36.120
that it won't work.

00:20:36.120 --> 00:20:38.280
It's like half of the user base.

00:20:38.280 --> 00:20:39.120
- Yeah.

00:20:39.120 --> 00:20:39.960
- So I don't know, that's a.

00:20:39.960 --> 00:20:43.200
- Well, Blaze recommends instead of exit,

00:20:43.200 --> 00:20:46.200
we should just require people to do colon Q.

00:20:46.200 --> 00:20:48.080
- How do you exit the ruffle?

00:20:48.080 --> 00:20:49.160
You reboot your computer.

00:20:49.160 --> 00:20:50.080
Okay, next.

00:20:50.080 --> 00:20:56.080
- All right, well, should we talk about

00:20:56.080 --> 00:20:57.600
our lovely sponsor Mailchimp?

00:20:57.600 --> 00:20:59.640
- Yes, indeed.

00:20:59.640 --> 00:21:01.840
Although I would like to add two things real quick,

00:21:01.840 --> 00:21:04.720
and then I'll tell everyone about them.

00:21:04.720 --> 00:21:08.160
One, this is very exciting.

00:21:08.160 --> 00:21:09.560
It's going to be interesting to see

00:21:09.560 --> 00:21:11.480
where the free threaded Python stuff goes,

00:21:11.480 --> 00:21:14.520
'cause that's another one of the big deals.

00:21:14.520 --> 00:21:17.120
But it's weird, right?

00:21:17.120 --> 00:21:18.440
You've got to have a separate build.

00:21:18.440 --> 00:21:20.840
It's not even a flag or something you can set,

00:21:20.840 --> 00:21:24.800
but it's gonna be something else.

00:21:24.800 --> 00:21:27.360
But also the high performance changes

00:21:27.360 --> 00:21:31.160
outside of this free threaded thing with a JIT.

00:21:31.160 --> 00:21:32.640
Excuse me, a JIT?

00:21:32.640 --> 00:21:36.720
Not just interpreted, this is great.

00:21:36.720 --> 00:21:37.760
So very interesting.

00:21:37.760 --> 00:21:40.400
And then a follow up, I apologize,

00:21:40.400 --> 00:21:42.560
I can't remember who said it in the comments,

00:21:42.560 --> 00:21:46.840
but DORA, DevOps Research and Assessment Metrics,

00:21:46.840 --> 00:21:50.200
includes four key metrics divided into these areas,

00:21:50.200 --> 00:21:54.480
deployment frequency or lead time for changes

00:21:54.480 --> 00:21:57.320
to measure team velocity and change failure rate

00:21:57.320 --> 00:22:00.960
and time to restore service and measure stability.

00:22:00.960 --> 00:22:03.280
So that's pretty cool.

00:22:03.280 --> 00:22:05.920
- DORA metrics, nice.

00:22:05.920 --> 00:22:08.520
How about we talk Mailtrap now?

00:22:08.520 --> 00:22:09.360
- Okay.

00:22:09.360 --> 00:22:12.240
- This episode is sponsored by Mailtrap,

00:22:12.240 --> 00:22:15.080
an email delivery platform that developers love.

00:22:15.080 --> 00:22:18.720
An email sending solution with industry best analytics,

00:22:18.720 --> 00:22:23.240
SMTP and email API, as well as SDKs

00:22:23.240 --> 00:22:27.560
for major programming languages and 24/7 human support.

00:22:27.560 --> 00:22:30.320
Try for free at mailtrap.io.

00:22:30.320 --> 00:22:34.280
- Yeah, thank you Mailtrap for supporting the show.

00:22:34.280 --> 00:22:35.880
Awesome to have them on board.

00:22:35.880 --> 00:22:39.680
We'll be telling you about them on upcoming shows as well.

00:22:39.680 --> 00:22:40.520
All right.

00:22:40.520 --> 00:22:44.680
So if you do Jupyter Notebooks, Brian,

00:22:44.680 --> 00:22:46.600
I mean, this is gonna sound a little,

00:22:46.600 --> 00:22:47.640
so we see some pictures.

00:22:47.640 --> 00:22:51.640
If you do Jupyter Notebooks or JupyterLab in particular,

00:22:51.640 --> 00:22:55.520
it's got the way it looks and so on,

00:22:55.520 --> 00:23:00.440
but what if you could have a nice theming system for it?

00:23:00.440 --> 00:23:03.720
So there's an extension, I wanna highlight,

00:23:03.720 --> 00:23:06.760
JupyterLab Theme Editor, which is an extension

00:23:06.760 --> 00:23:11.320
to provide basically editing colors, font families,

00:23:11.320 --> 00:23:14.680
font sizes of different elements in the user interface.

00:23:14.680 --> 00:23:17.840
So pretty cool, you can just install it

00:23:17.840 --> 00:23:19.840
and then you can open up this little sidebar

00:23:19.840 --> 00:23:22.280
and it lets you pick the layout color,

00:23:22.280 --> 00:23:25.160
the ax out color, the border color,

00:23:25.160 --> 00:23:28.040
the UI font size, the content font size.

00:23:28.040 --> 00:23:31.080
So one of the things that sometimes drives me crazy

00:23:31.080 --> 00:23:35.840
about UIs, think about like Zoom.

00:23:35.840 --> 00:23:38.560
If you go to VS Code and you say Zoom,

00:23:38.560 --> 00:23:39.400
well, Zoom's everything.

00:23:39.400 --> 00:23:40.760
Like, what if I just wanna Zoom

00:23:40.760 --> 00:23:43.640
just the stuff I actually care about, like the text,

00:23:43.640 --> 00:23:44.960
and I don't want all the other crap

00:23:44.960 --> 00:23:46.440
to take up more space on my screen

00:23:46.440 --> 00:23:48.200
and make the text even harder to read.

00:23:48.200 --> 00:23:50.560
Why don't I just take over there and just see, right?

00:23:50.560 --> 00:23:53.480
So having different settings for content size

00:23:53.480 --> 00:23:56.280
versus UI element size is really awesome.

00:23:56.280 --> 00:23:58.080
So there's a bunch of things like that.

00:23:58.080 --> 00:24:02.920
And yeah, you can basically pick all these different colors

00:24:02.920 --> 00:24:06.040
that you like, you know, if you want a style

00:24:06.040 --> 00:24:10.400
to be a light blue on dark blue or dark blue on light blue

00:24:10.400 --> 00:24:12.560
or purple or whatever you want.

00:24:12.560 --> 00:24:15.000
There's a bunch of color palettes you can pick from,

00:24:15.000 --> 00:24:15.840
which is pretty nice.

00:24:15.840 --> 00:24:20.160
And it's not a huge thing, but it's kind of interesting.

00:24:20.160 --> 00:24:23.600
So pip install Jupyter Theme Editor and off you go.

00:24:23.600 --> 00:24:27.080
- Yeah, I wanna try to make it seem

00:24:27.080 --> 00:24:30.880
like an early 2000s.

00:24:30.880 --> 00:24:33.720
- Yeah, where's like the blinking elements

00:24:33.720 --> 00:24:35.800
and the gradients?

00:24:35.800 --> 00:24:36.640
Come on now.

00:24:36.640 --> 00:24:40.240
(both laughing)

00:24:40.240 --> 00:24:41.360
Yeah, so that's a quick one,

00:24:41.360 --> 00:24:44.600
but people can check it out if they use JupyterLab.

00:24:44.600 --> 00:24:46.000
- Nice. - Yeah.

00:24:46.000 --> 00:24:49.120
- All right, well, I've got another quick one, a little bit.

00:24:49.120 --> 00:24:56.040
We were talking about using rich and textual

00:24:56.040 --> 00:24:58.280
in the, for colors and stuff

00:24:58.280 --> 00:25:00.680
and love both of those projects.

00:25:00.680 --> 00:25:03.400
One of the things that, and you can get colors

00:25:03.400 --> 00:25:08.000
and things, nice help output if you're using like TyperClick

00:25:08.000 --> 00:25:09.640
or some of the other extensions

00:25:09.640 --> 00:25:12.080
for different argument parsing.

00:25:12.080 --> 00:25:15.360
But a lot of people, and I do too on simple projects,

00:25:15.360 --> 00:25:16.360
I just use ArgParse.

00:25:16.360 --> 00:25:20.360
Works great for simple things.

00:25:20.360 --> 00:25:21.720
It's nice to test.

00:25:21.720 --> 00:25:25.240
However, it's more black and white.

00:25:25.240 --> 00:25:28.640
So today we've got rich ArgParse.

00:25:28.640 --> 00:25:31.280
So rich ArgParse is cool.

00:25:31.280 --> 00:25:35.240
It's not, so if you're having a command line program

00:25:35.240 --> 00:25:37.400
that you wanna use colors, of course you could use rich,

00:25:37.400 --> 00:25:40.680
just use the colors, but the help is auto-generated.

00:25:40.680 --> 00:25:44.440
Well, rich ArgParse, or auto-generates the format.

00:25:44.440 --> 00:25:46.680
Rich ArgParse gets colors in those.

00:25:46.680 --> 00:25:51.680
So it's got nice orange color, orange and blue

00:25:51.680 --> 00:25:54.600
and white and green and some different great colors

00:25:54.600 --> 00:25:57.400
to really highlight.

00:25:57.400 --> 00:25:59.920
It's a lot easier to read the help text if it's in color.

00:25:59.920 --> 00:26:04.280
So if you can add, if you're okay with adding a dependency,

00:26:04.280 --> 00:26:05.120
this is great.

00:26:05.120 --> 00:26:08.160
And it's also like really easy to add.

00:26:08.160 --> 00:26:11.360
I was like, is it possible that this is so easy?

00:26:11.360 --> 00:26:13.560
And so the, how you add it,

00:26:13.560 --> 00:26:14.840
there is a whole bunch of features.

00:26:14.840 --> 00:26:18.360
So there's built-in formatters.

00:26:18.360 --> 00:26:21.080
So rich ArgParse defines different formatters

00:26:21.080 --> 00:26:24.120
to help with the help formatter or the raw description

00:26:24.120 --> 00:26:26.400
help formatter, there are different types.

00:26:26.400 --> 00:26:28.680
But the easiest thing to do to try it out

00:26:28.680 --> 00:26:34.040
is all you have to do is import a rich help formatter.

00:26:34.040 --> 00:26:39.040
And when you're instantiating your argument parser,

00:26:39.040 --> 00:26:42.280
you just pass in a rich help formatter

00:26:42.280 --> 00:26:44.360
as the formatter class.

00:26:44.360 --> 00:26:46.840
And that those two lines of code, that's all we did.

00:26:46.840 --> 00:26:51.240
So I wanted to try this out to see how fun colors were

00:26:51.240 --> 00:26:52.160
in your help.

00:26:52.160 --> 00:26:56.280
And I've got a little test project called test ArgParse apps

00:26:56.280 --> 00:26:59.440
basically a hello world app that uses ArgParse

00:26:59.440 --> 00:27:01.000
and runs testing on it.

00:27:01.000 --> 00:27:02.240
And I'm like, how do I do that?

00:27:02.240 --> 00:27:06.240
And so the help for the, my little program looks like this.

00:27:06.240 --> 00:27:09.040
It's just white, normal.

00:27:09.040 --> 00:27:10.880
And when I added these two,

00:27:10.880 --> 00:27:13.680
just these two lines of code for rich ArgParse,

00:27:13.680 --> 00:27:16.440
you just get a nice orange and blue.

00:27:16.440 --> 00:27:17.800
- It's really much nicer.

00:27:17.800 --> 00:27:18.640
- Yeah.

00:27:18.640 --> 00:27:20.240
- Color in the terminal is,

00:27:20.480 --> 00:27:22.120
I feel it's kind of non-optional.

00:27:22.120 --> 00:27:26.480
- I will say that it is one more dependency though.

00:27:26.480 --> 00:27:29.320
And one of the reasons why I use ArgParse a lot of times

00:27:29.320 --> 00:27:31.560
is because I don't want to add any dependencies

00:27:31.560 --> 00:27:33.240
and I still want argument parsing.

00:27:33.240 --> 00:27:35.120
So keep that in mind.

00:27:35.120 --> 00:27:36.440
So.

00:27:36.440 --> 00:27:37.720
- That's a totally good point,

00:27:37.720 --> 00:27:40.440
but I can imagine plenty of projects that said,

00:27:40.440 --> 00:27:41.880
we're not going to have dependencies.

00:27:41.880 --> 00:27:43.080
Let's just use ArgParse.

00:27:43.080 --> 00:27:45.680
And then eventually they start having some.

00:27:45.680 --> 00:27:46.560
And once you're already there,

00:27:46.560 --> 00:27:48.720
you might as well throw this on here and make it look nicer

00:27:48.720 --> 00:27:50.760
without writing much different code, right?

00:27:50.760 --> 00:27:51.760
- Yeah.

00:27:51.760 --> 00:27:54.560
And I love that it's, I mean, there are more features.

00:27:54.560 --> 00:27:57.080
You go through, go look at the documentation,

00:27:57.080 --> 00:28:01.320
but I love projects where you can make your program better

00:28:01.320 --> 00:28:03.160
by just adding a couple lines of code.

00:28:03.160 --> 00:28:04.400
It's pretty, pretty great.

00:28:04.400 --> 00:28:06.240
- Indeed.

00:28:06.240 --> 00:28:08.680
Jeff out there likes to bring it full circle.

00:28:08.680 --> 00:28:10.760
So wasn't dependency issues,

00:28:10.760 --> 00:28:13.160
one of the biggest causes for slowdown development?

00:28:13.160 --> 00:28:14.400
Yes.

00:28:14.400 --> 00:28:15.280
- Well, it's also,

00:28:15.280 --> 00:28:17.320
it's just two lines of code to change back

00:28:17.320 --> 00:28:20.120
if you got a test break, you can take that out.

00:28:20.120 --> 00:28:21.080
So.

00:28:21.080 --> 00:28:23.000
- That's assuming that you're the original developer

00:28:23.000 --> 00:28:24.120
that knows that it's still there.

00:28:24.120 --> 00:28:26.720
They could have left and then, no, I'm just kidding.

00:28:26.720 --> 00:28:28.240
(both laughing)

00:28:28.240 --> 00:28:29.760
That's a fair point, honestly.

00:28:29.760 --> 00:28:32.560
- So.

00:28:32.560 --> 00:28:33.800
- Anyway, I like it.

00:28:33.800 --> 00:28:37.520
- Well, those are items.

00:28:37.520 --> 00:28:39.800
Do you have any extras for us?

00:28:39.800 --> 00:28:40.920
- Only one.

00:28:40.920 --> 00:28:41.760
- Okay.

00:28:41.760 --> 00:28:42.960
- Only one, but I will, it's very exciting.

00:28:42.960 --> 00:28:45.400
So I'm, but it's just one of them.

00:28:45.400 --> 00:28:46.240
So it's good.

00:28:46.240 --> 00:28:47.080
It's the only one.

00:28:47.080 --> 00:28:49.720
We have a brand new course over at Talk Python.

00:28:49.720 --> 00:28:52.440
And this is done by Vincent,

00:28:52.440 --> 00:28:55.400
who's been on the podcast before with us.

00:28:55.400 --> 00:29:00.400
So it's called Getting Started with NLP and spaCy.

00:29:00.400 --> 00:29:01.760
- Oh, neat.

00:29:01.760 --> 00:29:04.800
- Yeah, so basically if you have a lot of text

00:29:04.800 --> 00:29:08.880
and you want to process it, pull out entities,

00:29:08.880 --> 00:29:10.840
understand things about it, right?

00:29:10.840 --> 00:29:13.200
Like at a real deep level, you know, NLP.

00:29:13.200 --> 00:29:16.480
spaCy is one of the most important ways

00:29:16.480 --> 00:29:18.360
that you can, one of the most important libraries

00:29:18.360 --> 00:29:19.200
for doing that.

00:29:19.200 --> 00:29:22.120
And so here's an awesome course that talks about

00:29:22.120 --> 00:29:26.160
how to do that with spaCy, but also even goes into

00:29:26.160 --> 00:29:28.840
using a little bit, some of the extensions

00:29:28.840 --> 00:29:33.760
and fun things like spaCy LLM to integrate, say,

00:29:33.760 --> 00:29:38.120
ChatGPT or other LLMs along with the spaCy processing

00:29:38.120 --> 00:29:39.200
to pull things out.

00:29:39.200 --> 00:29:42.080
Talks about training custom spaCy models.

00:29:42.080 --> 00:29:45.960
Vincent did a really cool job where basically

00:29:45.960 --> 00:29:50.400
all the examples of this course are based on

00:29:50.400 --> 00:29:53.920
Talk Python To Me podcast transcripts.

00:29:53.920 --> 00:29:56.880
So he wrote a single function that will give you

00:29:56.880 --> 00:30:00.560
every line ever spoken on Talk Python over the last

00:30:00.560 --> 00:30:02.880
eight years as a generator,

00:30:02.880 --> 00:30:06.720
which is insanely awesome.

00:30:06.720 --> 00:30:09.360
- And completely not useful.

00:30:09.360 --> 00:30:11.840
- Very interesting, right?

00:30:11.840 --> 00:30:13.440
Very interesting how to use the generators,

00:30:13.440 --> 00:30:15.520
but then you can just start feeding that kind of information

00:30:15.520 --> 00:30:20.040
and say, well, who is talked about FastAPI?

00:30:20.040 --> 00:30:22.600
When you do talk about FastAPI, what other projects

00:30:22.600 --> 00:30:24.120
in the libraries were talked about?

00:30:24.120 --> 00:30:28.800
And you could do things to discover sort of the zeitgeist

00:30:28.800 --> 00:30:32.880
of a topic or a tool over time by seeing how much

00:30:32.880 --> 00:30:34.920
other guests on the show talk about it and stuff.

00:30:34.920 --> 00:30:39.000
It's a really cool course and I think people should

00:30:39.000 --> 00:30:41.280
definitely check it out.

00:30:41.280 --> 00:30:42.640
Train and annotate your own data,

00:30:42.640 --> 00:30:43.600
do all sorts of fun things.

00:30:43.600 --> 00:30:48.600
So the link is in the show notes and if you're on the list,

00:30:48.600 --> 00:30:50.800
I will probably be sending you an email about it as well.

00:30:50.800 --> 00:30:52.960
But yeah, very excited to have this new course up

00:30:52.960 --> 00:30:53.800
for everyone.

00:30:53.800 --> 00:30:54.640
It's gonna be a lot of fun.

00:30:54.640 --> 00:30:56.160
Yeah.

00:30:56.160 --> 00:30:59.000
- The one extra I've got is last week I announced

00:30:59.000 --> 00:31:01.840
that I was gonna switch the pytest course,

00:31:01.840 --> 00:31:04.720
the one at pythontest.com.

00:31:04.720 --> 00:31:07.280
Of course, there is also a pytest course

00:31:07.280 --> 00:31:09.720
at Talk Python training.

00:31:09.720 --> 00:31:11.400
Definitely still worth trying out,

00:31:11.400 --> 00:31:14.040
but there's the complete pytest course that covers

00:31:14.040 --> 00:31:16.840
the entire Python or the pytest book.

00:31:16.840 --> 00:31:22.160
That switched to Podia and that switch is done to Podia.

00:31:22.160 --> 00:31:24.320
So, well, almost done.

00:31:24.320 --> 00:31:25.160
It's there.

00:31:25.160 --> 00:31:28.200
Everybody's been invited except for one person.

00:31:28.200 --> 00:31:29.400
So they didn't get their invite.

00:31:29.400 --> 00:31:31.600
I'll get that out later today.

00:31:31.600 --> 00:31:36.120
But if you're still using the teachable version,

00:31:36.120 --> 00:31:40.560
it'll still be around till a little bit into June,

00:31:40.560 --> 00:31:42.760
but please switch over soon.

00:31:42.760 --> 00:31:47.440
And then the next step of this is Podia comes

00:31:47.440 --> 00:31:48.760
with email services too.

00:31:48.760 --> 00:31:52.960
So I'm switching from ConvertKit to Podia for email

00:31:52.960 --> 00:31:55.360
and I'm starting that this week.

00:31:55.360 --> 00:31:57.560
So doing that.

00:31:57.560 --> 00:31:59.680
That's the news on my end.

00:31:59.680 --> 00:32:02.320
And a lot of this has to do with just,

00:32:02.320 --> 00:32:07.320
since I'm not as a turbo of a course creator as Michael is,

00:32:08.320 --> 00:32:11.520
it's to keep my overhead down

00:32:11.520 --> 00:32:14.840
and so that I can do smaller courses cheaper

00:32:14.840 --> 00:32:16.520
and get more of them out to you.

00:32:16.520 --> 00:32:18.240
There's still good quality stuff.

00:32:18.240 --> 00:32:19.080
It's just--

00:32:19.080 --> 00:32:19.920
- That's awesome.

00:32:19.920 --> 00:32:20.880
Yeah, you keep the optionality, right?

00:32:20.880 --> 00:32:22.240
- Keep the optionality open.

00:32:22.240 --> 00:32:23.080
So, yeah.

00:32:23.080 --> 00:32:25.280
All right.

00:32:25.280 --> 00:32:26.280
- Yeah, congratulations.

00:32:26.280 --> 00:32:29.200
I know that's a big deal to move all that stuff around.

00:32:29.200 --> 00:32:30.240
- Yeah, it was a little stressful.

00:32:30.240 --> 00:32:32.280
I was worried that tons of people are gonna be mad,

00:32:32.280 --> 00:32:36.040
but I haven't had any complaints so far

00:32:36.040 --> 00:32:38.760
and I'm not inviting other people to complain, but.

00:32:38.760 --> 00:32:40.680
(both laughing)

00:32:40.680 --> 00:32:42.920
- If you want to use a complaint, no, just kidding.

00:32:42.920 --> 00:32:44.520
- Anyway.

00:32:44.520 --> 00:32:46.120
Oh, one of the cool things that it has

00:32:46.120 --> 00:32:48.920
that I hadn't used before is there's comments

00:32:48.920 --> 00:32:49.960
within the course.

00:32:49.960 --> 00:32:52.080
So people can ask questions like right there.

00:32:52.080 --> 00:32:53.320
I know it's a complicated topic,

00:32:53.320 --> 00:32:55.280
so it's kind of cool to have comments.

00:32:55.280 --> 00:32:56.520
- Yeah, that is cool.

00:32:56.520 --> 00:32:57.360
- Anyway.

00:32:57.360 --> 00:33:00.800
Do you have anything funny for us, Michael?

00:33:00.800 --> 00:33:04.800
- I do, I do, I do.

00:33:05.680 --> 00:33:07.080
Let's see.

00:33:07.080 --> 00:33:07.920
Let me put it up here.

00:33:07.920 --> 00:33:10.280
So another testing one to follow up

00:33:10.280 --> 00:33:12.400
with your extra of course.

00:33:12.400 --> 00:33:15.680
Comes to us from the venerable XKCD.

00:33:15.680 --> 00:33:17.760
This is 2928.

00:33:17.760 --> 00:33:22.440
Okay, so it's called Software Testing Day.

00:33:22.440 --> 00:33:24.520
Did you know there's a Software Testing Day, Brian?

00:33:24.520 --> 00:33:25.680
- No.

00:33:25.680 --> 00:33:29.000
- Yeah, it's right behind Valentine's Day, apparently.

00:33:29.000 --> 00:33:32.840
So do you and the other QA engineers

00:33:32.840 --> 00:33:35.480
have any fun plans for the holiday?

00:33:35.480 --> 00:33:38.120
- Yeah, assuming the schedule system doesn't crash.

00:33:38.120 --> 00:33:40.160
Software Testing Day is a holiday celebrated

00:33:40.160 --> 00:33:44.480
every negative one years on January 0th at 2571 p.m.

00:33:44.480 --> 00:33:48.280
- That's why I don't celebrate.

00:33:48.280 --> 00:33:53.480
- Then if you look at the hover, as you do on XKCD,

00:33:53.480 --> 00:33:54.840
it says the company tried to document

00:33:54.840 --> 00:33:57.440
how often employees were celebrating Software Testing Day,

00:33:57.440 --> 00:34:00.840
but their record keeping system kept mysteriously crashing.

00:34:00.840 --> 00:34:04.320
- This is good.

00:34:05.360 --> 00:34:06.760
- It's a subtle one, right?

00:34:06.760 --> 00:34:07.600
- Yeah.

00:34:07.600 --> 00:34:10.520
- Celebrate every negative one years.

00:34:10.520 --> 00:34:14.000
- I actually had the question today from somebody

00:34:14.000 --> 00:34:17.960
as to why we can't structure our tests

00:34:17.960 --> 00:34:21.240
so that we can completely test our complicated software

00:34:21.240 --> 00:34:25.760
so that we never see anything after we write the code.

00:34:25.760 --> 00:34:29.960
- Yeah.

00:34:29.960 --> 00:34:33.480
What is a messy place?

00:34:33.480 --> 00:34:35.640
I wanted to ask him how much time he had

00:34:35.640 --> 00:34:38.800
because proving software is correct

00:34:38.800 --> 00:34:42.280
is something we tried to do a long time ago

00:34:42.280 --> 00:34:45.280
and it's not worth going down that road.

00:34:45.280 --> 00:34:47.760
- Yeah, the only few places it might make sense

00:34:47.760 --> 00:34:51.200
is like the Voyager probe.

00:34:51.200 --> 00:34:55.000
Or something like that.

00:34:55.000 --> 00:34:56.680
We're sending it out and we want it to run

00:34:56.680 --> 00:34:57.840
50 years from now.

00:34:57.840 --> 00:35:00.480
- No, thoroughly testing is good,

00:35:00.480 --> 00:35:02.880
but you still can't prove that you've caught

00:35:02.880 --> 00:35:05.840
all the bugs, you just can't.

00:35:05.840 --> 00:35:06.920
- Yeah, absolutely.

00:35:06.920 --> 00:35:10.720
All right, well, here's a nice little test case

00:35:10.720 --> 00:35:11.760
for him to use.

00:35:11.760 --> 00:35:13.960
- Yeah, every negative one years.

00:35:13.960 --> 00:35:16.840
- Indeed.

00:35:16.840 --> 00:35:17.880
- Nice.

00:35:17.880 --> 00:35:20.960
All right, well, oh, fun, cool.

00:35:20.960 --> 00:35:23.320
Blaze just mentioned, speaking of testing,

00:35:23.320 --> 00:35:27.080
BlazeTube says, "Fun fact, right after this session,

00:35:27.080 --> 00:35:29.360
"they're meeting to go through chapter six

00:35:29.360 --> 00:35:30.200
"of the pytest book."

00:35:30.200 --> 00:35:31.560
Yay.

00:35:31.560 --> 00:35:32.400
Anyway.

00:35:32.400 --> 00:35:33.240
- Cool.

00:35:33.240 --> 00:35:36.040
Well, thanks a lot for this wonderful episode, Michael.

00:35:36.040 --> 00:35:38.080
- Yep, as always.

00:35:38.080 --> 00:35:39.440
Bye, Brian, bye, everyone.

