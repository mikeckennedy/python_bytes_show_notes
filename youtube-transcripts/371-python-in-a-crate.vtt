WEBVTT

00:00:00.001 --> 00:00:03.000
Hello, everyone. Hello, Michael.

00:00:03.000 --> 00:00:04.000
Hello. Hello.

00:00:04.000 --> 00:00:09.000
Well, we got a lot to cover this week. So let's just jump in.

00:00:09.000 --> 00:00:12.000
Hello and welcome to Python Bytes.

00:00:12.000 --> 00:00:16.000
Then I mess up again. Anyway, I'll start over.

00:00:16.000 --> 00:00:22.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:22.000 --> 00:00:31.000
This is episode 371 recorded February 13th, 2024, day before Valentine's Day. I am Brian Okken.

00:00:31.000 --> 00:00:33.000
I'm Michael Kennedy.

00:00:33.000 --> 00:00:40.000
This episode is sponsored by Scout APM. Listen to what we have to say about them later in the show.

00:00:40.000 --> 00:00:44.000
If you want to connect with us, of course, we're on Mastodon and Fosstodon.

00:00:44.000 --> 00:00:48.000
We're at M. Kennedy at Brian Okken and at Python Bytes.

00:00:48.000 --> 00:00:56.000
And you can always join us live on YouTube at Python bytes, dot FM slash live.

00:00:56.000 --> 00:01:00.000
And we'd love to have you on the show if you or, you know, with us while we're recording.

00:01:00.000 --> 00:01:07.000
It's fun. So. And let's just kick it off with with some.

00:01:07.000 --> 00:01:13.000
I'm a little hungry. Do you have any apples? Maybe I can see what I'm finding in the crate.

00:01:13.000 --> 00:01:19.000
No. So I do. Let's kick it off. So this one comes to us.

00:01:19.000 --> 00:01:30.000
From Rhett Turnbull, Turnbull's, excuse me, and Rhett has done a ton of interesting things with Python and Mac applications.

00:01:30.000 --> 00:01:35.000
I had him on talk Python. Remember, we talked about text sniper at one point here on the show.

00:01:35.000 --> 00:01:43.000
And then he created Textinator, which is a thing you can basically screenshot something on your screen,

00:01:43.000 --> 00:01:49.000
which then will OCR it right away in memory and then just copy the text, which is excellent.

00:01:49.000 --> 00:01:55.000
You know, so if you're watching a video and they say, here's the URL, instead of trying to shuffle around and figure it out,

00:01:55.000 --> 00:02:01.000
you just hit a button, highlight it, you know, in the screen and boom, you've got the text. Right.

00:02:01.000 --> 00:02:13.000
So. When we talked about PyApp from. From the Hatch project and Ofec, he was like, that looks awesome.

00:02:13.000 --> 00:02:18.000
I want to try some variations on this. And he played with it. He said it does, in fact, look really cool.

00:02:18.000 --> 00:02:29.000
In fact, he said, holy cow, that's amazing. OK, but one of the things that it doesn't do is actually build.

00:02:29.000 --> 00:02:39.000
Build an installer. So depending on your operating system, you know, primarily this happens more on Mac and Windows, less on Linux.

00:02:39.000 --> 00:02:45.000
Right. That's more of a like a package manager sort of type of thing to get apps over there.

00:02:45.000 --> 00:02:51.000
But on a Mac and Windows, it's real common to have something that runs installer, put something in certain locations,

00:02:51.000 --> 00:02:56.000
maybe changes your path so it's accessible. Right. All those kinds of things.

00:02:56.000 --> 00:03:09.000
So to your point, we have the Apple crate. And Apple crate is a it says package your command line tools into a native macOS installer.

00:03:09.000 --> 00:03:14.000
And I'll just get in front of screenshot real quick. So it says install whatever it is.

00:03:14.000 --> 00:03:20.000
And you get an installer and a license and like all this process to install your app.

00:03:20.000 --> 00:03:27.000
This is awesome for people who are when you would say, OK, all you got to do is make sure you have Python, Python 310 or greater on your machine,

00:03:27.000 --> 00:03:31.000
have that in the path. And then then what you're going to do is create a virtual environment.

00:03:31.000 --> 00:03:37.000
You're going to pip install pip X and then what is happening? Right. You just want to go double click it.

00:03:37.000 --> 00:03:41.000
You'll have it. You know what I mean? And so that's what this does.

00:03:41.000 --> 00:03:45.000
Right. So what you can do is you just say Apple create build. What is the name of the app?

00:03:45.000 --> 00:03:51.000
What is the version? What is the license file? What binaries and stuff to include?

00:03:51.000 --> 00:03:54.000
And then where does it go? And it'll go and create this installer.

00:03:54.000 --> 00:03:59.000
And you can even do this through code if you want to somehow automate via Python.

00:03:59.000 --> 00:04:06.000
You want to automate this creation of the installer, installer build. So isn't that cool?

00:04:06.000 --> 00:04:12.000
Yeah, actually, that's pretty neat. Yeah. So it says it's nothing you couldn't do yourself.

00:04:12.000 --> 00:04:18.000
But there's a bunch of steps and different tools that are involved that also uses Jinja 2.

00:04:18.000 --> 00:04:22.000
So a templating thing. I'm not sure how many people are familiar with this concept,

00:04:22.000 --> 00:04:29.000
but the template language is like Jinja and Chameleon and others and Mako.

00:04:29.000 --> 00:04:35.000
They're known for being. Here's how I put dynamic stuff in HTML and Flask.

00:04:35.000 --> 00:04:40.000
Here's how I return something that's a Web page from FastAPI or whatever it is you're talking about. Right.

00:04:40.000 --> 00:04:48.000
Yeah. But those things are independent libraries for the most part, and they can be used to generate anything you want.

00:04:48.000 --> 00:04:55.000
So, for example, you could have a Jinja file that is like a transactional email.

00:04:55.000 --> 00:04:58.000
So I talk Python. People come and say, hey, I forgot my password.

00:04:58.000 --> 00:05:02.000
You wouldn't believe how popular that feature is. I forgot my password.

00:05:02.000 --> 00:05:05.000
And you want to give them the same thing. Like, here's a little design. Here's a picture.

00:05:05.000 --> 00:05:07.000
Sorry, you forgot your password. Here's what you do.

00:05:07.000 --> 00:05:10.000
You know, because I'm not doing that first. I'd like the Web app handle set.

00:05:10.000 --> 00:05:14.000
But there's parts where you want to put like chunks of data.

00:05:14.000 --> 00:05:21.000
So here is your unique code. You click link. You click to actually do the reset for you.

00:05:21.000 --> 00:05:30.000
Right. So that could just be a Jinja thing that runs a Jinja file template that just runs Jinja through it to actually generate what goes in the email.

00:05:30.000 --> 00:05:34.000
Regardless, it's not a Web view or a Web request or anything like that. Right.

00:05:34.000 --> 00:05:40.000
So you can do the same thing here. You can use Jinja to templates to generate files that are required.

00:05:40.000 --> 00:05:46.000
So it allows you to pass in variables like what is the name of the app and what is the version of the app and different things.

00:05:46.000 --> 00:05:56.000
So you can kind of script the generation of, say, like the license file or whatever with Jinja, which is, you know, really a pretty nice touch, I think.

00:05:56.000 --> 00:06:01.000
Also, it's a friend of the Toml. It is friendly with the PyProject Toml.

00:06:01.000 --> 00:06:06.000
And it has its own app create.toml if you don't want to mix those together.

00:06:06.000 --> 00:06:10.000
I have mixed feelings about mushing everything into PyProject.toml.

00:06:10.000 --> 00:06:16.000
Like you can have rough in there, but I have my own rough.toml instead of, you know, tool.rough inside of the PyProject Toml.

00:06:16.000 --> 00:06:19.000
I don't know. Could go either way with that one. But anyway, this is it.

00:06:19.000 --> 00:06:26.000
And it shows you the different template variables you can use and, you know, to like generate your output.

00:06:26.000 --> 00:06:31.000
And yeah, people, if this is something you're trying to do, check it out. It looks really cool.

00:06:31.000 --> 00:06:34.000
And keep up the momentum, right? Well done.

00:06:34.000 --> 00:06:43.000
That is pretty cool. On the Toml front, I kind of agree that I used to be on the bandwagon of like, let's put everything in PyProject Toml.

00:06:43.000 --> 00:06:49.000
But and then rough came along and I have like a huge rough config.

00:06:49.000 --> 00:06:52.000
Well, not huge, but it's larger than a lot of this other stuff.

00:06:52.000 --> 00:06:56.000
So I do things that are big. I do like to put those in their own little separate thing.

00:06:56.000 --> 00:07:00.000
Yeah, exactly. And also you can just glance over and see the project. Oh, yeah, this is using rough. Got it.

00:07:00.000 --> 00:07:05.000
Because it is a rough.toml. Yeah. Yeah, there's that too.

00:07:05.000 --> 00:07:10.000
OK, speaking of packaging, it's packaging. Let's talk about some more packaging.

00:07:10.000 --> 00:07:12.000
The packaging episode.

00:07:12.000 --> 00:07:27.000
There is. So there's a lot of ways to package stuff. And Ned Batchelder, friend of the show, came out with a blog post called One Way to Package Python Code Right Now.

00:07:27.000 --> 00:07:40.000
And I kind of like that this discussion and the discussion really is maybe you don't need something to generate like your package directory, maybe just like an example.

00:07:40.000 --> 00:07:48.000
So so he just has a package sample GitHub repo that just has an example.

00:07:48.000 --> 00:07:53.000
And in the readme, there's a bunch of stuff like discussing what you need to think about.

00:07:53.000 --> 00:08:02.000
For one, the entire example is a good example. You can just use this and like copy it or something and then modify your own stuff.

00:08:02.000 --> 00:08:10.000
They one caveat I like me personally, like the readme is in restructured text. I would totally go with Markdown instead of restructured text.

00:08:10.000 --> 00:08:23.000
Oh, 100 percent. Yeah. However, a lot of common things here, things to think about, like decisions that you need to make before you get started, like what's your project name?

00:08:23.000 --> 00:08:30.000
And with a hint of like search for the name that you want on PyPI, just to make sure that it's not there already.

00:08:30.000 --> 00:08:48.000
And I recommend this for even people that don't plan on pushing it to PyPI. If you're only going to use a project on your own internally or something, especially if you're going to share it with others within your company, don't collide with something already on PyPI because it'll be annoying.

00:08:48.000 --> 00:09:04.000
And how to deal with the version number, doing optional features. So and then talks about what's in the repo and what he's included is the source directory, source packaging.

00:09:04.000 --> 00:09:19.000
I've kind of gone back and forth on that, but I do think that's the best way to do it is you've got your project and then a SRC directory and then the project directory under that seems like just one extra directory, but it's consistent and it's fine.

00:09:19.000 --> 00:09:34.000
I did learn a little bit. So one of the things, there's an example, pyproject.toml with some comments. It's very heavily commented, which is great. Talking about, you know, different pieces.

00:09:34.000 --> 00:09:53.000
And it's not, it's a kind of a minimal set. It's not a whole bunch of stuff here, which is good. The dev requirements, you can have a dev optional install on pyproject.toml, but dev requirements is also something that's very common.

00:09:53.000 --> 00:10:12.000
Requirements.txt file. The readme, I actually, there's a license and a gitignore. Having an example gitignore is good. One of the things that was new to me is editor config. I think I've seen that before, but I didn't know that that was a thing. Did you know that dot editor config was a thing?

00:10:12.000 --> 00:10:20.000
No, what does that work with? I know about the dot idea subfolder for PyCharm and the dot VS Code one for VS Code, but I don't know anything about this.

00:10:20.000 --> 00:10:41.000
The idea is like this editor config.org, which I popped it open. It's a config file that configures, it's sort of a global configuration for different editors. And some of them support it natively and some, some you have to get out of a plugin or something.

00:10:41.000 --> 00:11:05.000
So for instance, all of the, like all of the JetBrains stuff supports it. IntelliJ and all that PyCharm supports it. Visuals Vim supports it. In Visual Studio, Visual Studio code, you have to have a plugin to do that, but it is available, the plugin. So, cool.

00:11:05.000 --> 00:11:08.000
That is news to me and I'll definitely be checking that out. Yeah.

00:11:08.000 --> 00:11:19.000
Yeah, it's, I'm like, oh, cool. I'll maybe try that. Cause sometimes I do pop around with different editors. Be nice to have one config, maybe, maybe at least I'll try it.

00:11:19.000 --> 00:11:30.000
The other thing I like is a small make file. I've kind of gone back and forth on this also, but if it's, if you're comfortable with make files or the people working on your project are, you may as well use them.

00:11:30.000 --> 00:11:49.000
If, if you're the only one comfortable, then maybe don't, but a kind of a nice minimal set of things to put in your make file, just stuff that you have to do with around your project, like tools, make tools would do install the dev requirements.

00:11:49.000 --> 00:12:00.000
So it would, you know, I would probably make that make dev instead of make tools, but you know, whatever, how to do the distribution he's using twine.

00:12:00.000 --> 00:12:12.000
So testing on PyPI and, and then make PyPI. Again, I probably would write that as like make distribute or something, but, you know, kind of nice to have an example.

00:12:12.000 --> 00:12:23.000
So, so anyway, the other thing I wanted to say was he did shout out to the PIPA packaging, Python projects tutorial.

00:12:23.000 --> 00:12:37.000
And I also agree that if you want to get into the nitty gritty, so his example is great. So for a minimal set, but if you really want to understand everything, this is a great reference is the a python.org packaging, Python projects page.

00:12:37.000 --> 00:12:48.000
So, excellent. Yeah, I read that or I saw that article and skim through it, I guess the right way to put it from Ned and now it's really interesting. I'm glad you covered it.

00:12:48.000 --> 00:13:00.000
I agree that a minimalist, you know, I used to be like, all right, give me my cookie cutter thing. And there's always be, oh, it's going to generate this and this and this, but I don't want to use, you know, name your aspect.

00:13:00.000 --> 00:13:11.000
I don't want to use Redis in this thing, or I don't want to use react build steps in this particular product. Like they just always seem to be over specified a lot of those template building things, you know?

00:13:11.000 --> 00:13:21.000
Yeah. Also, what are the, a great comment in his thing was that there's a lot of people that just have some Python code that they need to distribute.

00:13:21.000 --> 00:13:33.000
Like they're not, it isn't a whole bunch of stuff and it's not complicated. So please don't, yeah, please don't tell me like all the details. I don't want to care about the history and all the different tools, just show me how to do it.

00:13:33.000 --> 00:13:48.000
So here's an example. So, excellent. All right, a bit of a real time follow up. Henry out there says, I love this quick search. There are 8000 projects on PyPI that use pyproject.toml.

00:13:48.000 --> 00:14:00.000
While 80 of them use ruff.toml based on sdist. Interesting. I think you would maybe, maybe a way to think about that is like, you've got to ship your pyproject.toml.

00:14:00.000 --> 00:14:09.000
Like it's your new setup.py. It's, it's part of, you know, it has to be there, right? To get the thing to install. Whereas rough.toml you don't.

00:14:09.000 --> 00:14:20.000
So like, for example, I just shipped a new version of umami Python for some updates there this morning. And if you look at the source, I've got like the gitignore and the rough.toml.

00:14:20.000 --> 00:14:28.000
But the thing that actually gets shipped is, is like a different subset of that thing that doesn't include.

00:14:28.000 --> 00:14:35.000
So I'm not sure the absence of it necessarily means anything, but yeah, it would be interesting to know like what that ratio is.

00:14:35.000 --> 00:14:45.000
Also, the rough defaults are not bad. So I think a lot of projects that use rough don't have any settings and just run it vanilla.

00:14:45.000 --> 00:14:56.000
Yeah. Let's see, which ones do I feel like are super important? There's very few. So I think the line length is way too short at 79. I mean, I have a 32 inch monitor.

00:14:56.000 --> 00:15:06.000
I don't want to work in like a third of it on the left. You know what I mean? And then the, I, I'm a fan of single quotes, not double quotes and so on.

00:15:06.000 --> 00:15:14.000
And then, yeah, so that's, that's pretty much the stuff that matters to me. But you know what else is really nice, Brian, our sponsor.

00:15:14.000 --> 00:15:26.000
Yes. So we want to thank Scout APM. This episode is brought to you by Scout APM. Are you tired of spending hours trying to find the root cause of issues impacting performance?

00:15:26.000 --> 00:15:40.000
Then you owe it to yourself to check out our sponsor this week, Scout APM. Scout APM is a leading Python application performance monitoring tool that helps you identify and solve performance abnormalities faster and easier.

00:15:40.000 --> 00:15:52.000
Scout APM ties bottlenecks such as memory leaks, slow database queries, background jobs, the dreaded N plus one queries problem common with ORMs and more directly to your source code.

00:15:52.000 --> 00:16:00.000
So you can spend less time debugging and more time building. You'll love Scout because it builds, it's built for developers by developers.

00:16:00.000 --> 00:16:12.000
Scout makes it easy to get set up and deliver insights in less than four minutes. Seriously, you could pause this episode, set up Scout and be back at it without missing a beat.

00:16:12.000 --> 00:16:22.000
And the best part, Scout's pricing is affordable and straightforward. Only pay for the data you use, no hidden overage fees or per seat pricing.

00:16:22.000 --> 00:16:32.000
Start your free trial and get instant insights today. Visit pythonbytes.fm/scout and please use our link because it does truly support the show.

00:16:32.000 --> 00:16:38.000
You're on mute.

00:16:38.000 --> 00:16:54.000
I am. All right. Thank you, Scout. Let's let's move on to the next item here. And this one comes from Mastodon. And let's see.

00:16:54.000 --> 00:17:06.000
How did it get to us? I think it got to a spot. Yes. You are called Ninsky pointed out that, you know, sometimes really awesome about rough. We were just talking about rough. Right?

00:17:06.000 --> 00:17:14.000
Yeah. One of the things that's awesome about it is that they have put together a wiki like thing that tells you why.

00:17:14.000 --> 00:17:26.000
So somebody was complaining about, look, I if I could just get pilot or flake eight to tell me, like, not just this is the rule, but why do you care about this rule?

00:17:26.000 --> 00:17:42.000
Why should you follow it? Or if you don't care about whatever it says, then you can ignore it or if you wish. So at docs dot asperl dot s h, the company behind rough and with Charlie Martian team slash rough slash rules has a really cool site here.

00:17:42.000 --> 00:18:00.000
So you come down and says, here's 700 lit roles. And if you scroll down, it'll have like, all things like okay, f 403, undefined local import with star or unused import, right? So let's just grab the first one and click on it.

00:18:00.000 --> 00:18:12.000
It says, this is derived from the flakes, the pie flakes linter. Sometimes you can fix it. But most importantly, why is it bad and give me an example of it? How cool is that?

00:18:12.000 --> 00:18:14.000
Yeah, that is really cool.

00:18:14.000 --> 00:18:38.000
Yeah. So for example, this one says unused imports at a performance overhead at runtime and risk creating import cycles like this thing imports that but that thing imports of this boy, do I wish Python would get around that problem? I think it could but anyway, like with a two with a two step compile, possibly like there's all sorts of languages that that do that, right?

00:18:38.000 --> 00:18:56.000
Yeah, like you don't worry about that and see, for example, anyway, they, they also increase unused imports also increase the cognitive load of reading the code. I mean, editors help if they grade out say that this is not used, but still, the performance thing and cycles is certainly there.

00:18:56.000 --> 00:19:16.000
So it says, here's an example. Import numpy as np define area, you know, pi times radius squared. Instead, don't do that. But it has this. Here's the problem. Here's what and and the right way, which is cool. So let me just I'll just I have no picked ones out of there.

00:19:16.000 --> 00:19:45.000
let's see, if tuple, what is this? So checks for if statements that use non empty tuples as test conditions. I think about this. Why is this bad? Non empty tuples are always true. I see. So you maybe want to think you want to put parentheses around your if because you're coming from another language, parentheses, false, but you have a comma in there is always true, even though false is in the right because it's testing.

00:19:45.000 --> 00:19:49.000
The truthiness of the container, not values of the container.

00:19:49.000 --> 00:20:00.000
This catches people often I see it when somebody has an expression like they're, they're, it's a like, you know, they're combining two strings or something and they're checking the result.

00:20:00.000 --> 00:20:19.000
so yeah, then maybe just some PEP 8 ones like here's another one PEP 8. Don't don't use, things that are variables, functions, etc as capitals, right? Other languages have this.

00:20:19.000 --> 00:20:40.000
They have mixed case or whatever, right? This is okay for classes, but nothing really not much else in Python gets named that way. So they have an example like don't use capital B equals a plus three and so on. Anyway, I think this is really a nice resource. I look at the scroll bar, right? Look how much is here. This is a ton of work and they'll have these really nice examples. It's fantastic.

00:20:40.000 --> 00:20:54.000
I think it'd be cool just to like read through some of this, especially if you're, if you're probably not new to Python, but like new ish intermediate Python developer, and you want to just sort of write stuff better.

00:20:54.000 --> 00:21:02.000
Well, one is to use these things, but also just kind of a read through some of this documentation to figure out why different styles are the way they are.

00:21:02.000 --> 00:21:09.000
So, yeah, yeah, yeah. So even if you don't use rough, this is a nice resource. Cool.

00:21:09.000 --> 00:21:20.000
Well, I have a whole bunch of stuff I was going to do. I'm doing an extra, extra, extra, extra thing.

00:21:20.000 --> 00:21:35.000
For, for my next topic ish topics, plural. So I came across an app, I think I heard it from several people called flat.app. So flat is, and I've just started playing with this.

00:21:35.000 --> 00:21:48.000
It's kind of like Trello and other sort of task tracking, where you can have have things in to do lists and in progress and done. But the work and then different workspaces for different things you can have different projects going on.

00:21:48.000 --> 00:22:01.000
It just kind of like the layout of it, and I'm having fun playing with it. And right now it's free but it's going to going to end up being a paid app but not very expensive, it's like for individuals like five bucks a month or something.

00:22:01.000 --> 00:22:06.000
Anyway, flat looks, looks fun. I've started playing with that.

00:22:06.000 --> 00:22:15.000
Next up is a terms of service didn't read. This has been around for a while. It's at to sd r.org.

00:22:15.000 --> 00:22:25.000
Like kind of too long didn't read the tagline is I have read and agree these term with these terms is the biggest lie on the web, and we aim to fix that.

00:22:25.000 --> 00:22:40.000
And I kind of love this. It's a, it's, you can search for a different service, and it tells you it gives you a grade for each one. And then, and then also kind of some highlights as to why it's graded that way.

00:22:40.000 --> 00:22:53.000
Wikipedia has a grade of B. There's apparently there's stuff that they don't like. And what I like about this is not just the grade but why they give the grade because some stuff I don't really care about like,

00:22:53.000 --> 00:22:56.000
you know that the data might go away.

00:22:56.000 --> 00:23:09.000
Okay, yeah, maybe in Wikipedia, but I kind of get that already I understand. So, so this is neat. The, what I was surprised by, I wanted to point this out, is that it is a.

00:23:09.000 --> 00:23:31.000
It's kind of like Wikipedia in that it's it the classification system and everything is done by its peer review process but it's not, it's not like one company doing all of this it's, you can sign up and you can, you can start rating different services if you want and then it'll be reviewed, so it's kind of a crowd, crowd acted thing.

00:23:31.000 --> 00:23:33.000
So, there's that.

00:23:33.000 --> 00:23:37.000
Last week I thought it was really cool I like that one yeah.

00:23:37.000 --> 00:23:50.000
And then there's even articles on like wired and stuff like there was an article on wired about it but it's been around for a while so it's like the wired articles from 2018 so anyway.

00:23:50.000 --> 00:23:54.000
But I like the idea so if people want to help out, that'd be great.

00:23:54.000 --> 00:24:19.000
Last week I talked about blogging, and in this week I ran across an article called why I write, and I loved the topics here so I wanted to highlight them. This is from Sheena O'Connell, and especially technical writing so one of the things I write to remember, that's actually why I started blogging I started blogging just to write keep track of stuff that I kept forgetting.

00:24:19.000 --> 00:24:31.000
So I think that's a great idea. And second is to refine my thinking to it once you, if you write it down to help you understand a project more.

00:24:31.000 --> 00:24:45.000
I write to impact.

00:24:45.000 --> 00:25:01.000
I've been frustrated with my job, and blogging helps me focus on something that I can actually have an impact on. And it did help me focus on something that I enjoy more than my job at the time. So I think that's good.

00:25:01.000 --> 00:25:09.000
And then, writing to connect I think those are all connecting with people's own are all great. So I'm almost done with all my extras.

00:25:09.000 --> 00:25:24.000
Those are good I write for many of these reasons, but I also write, because when I yell at podcasts, no one responds to me or listens. So maybe I can write down those thoughts somewhere else and someone will hear them you know what I mean.

00:25:24.000 --> 00:25:44.000
Yeah, before I move on, Sheena, what was it Sheena O'Connell. She's got a lot of great articles there's unexpected glass ceilings for junior developers that's an interesting read applying mastery based learning in tech education, a problem with code schools.

00:25:44.000 --> 00:25:53.000
So these are these are interesting, not not just Python stuff but interesting tech articles so cool blog.

00:25:53.000 --> 00:26:11.000
The last thing I wanted to point out was, actually I think I'm done. That was that was done with my extras. Oh no, one more. JetBrains has a PyCharm blog, and there is three pytest features you will love by Helen Scott.

00:26:11.000 --> 00:26:31.000
And I also have a PyCharm blog, just a quick article, talking about fixtures, marks markers and parameterize. And I wanted to do a shout out to this one because at the bottom, great, great short discussion, but they also plug my course and book at the bottom so thank you Helen and PyCharm.

00:26:31.000 --> 00:26:32.000
It's great.

00:26:32.000 --> 00:26:34.000
That's really cool. Nice.

00:26:34.000 --> 00:26:39.000
All right. Well, you got more extras. Do you want to just keep going?

00:26:39.000 --> 00:26:41.000
I could just keep going. I got a couple more.

00:26:41.000 --> 00:26:42.000
Keep going.

00:26:42.000 --> 00:26:53.000
Okay, that was good. Yeah, we're just gonna go right into the extras anyway. So, I just had what links to my course and sorry we couldn't find that page. Oh no.

00:26:53.000 --> 00:27:11.000
Anyway, of course, the, I ran across this, this fun thing it was just Wikipedia's list of common misconceptions. And I don't know somebody posted on master on or something and this is a brilliant read. I don't know if you've read it came across this before.

00:27:11.000 --> 00:27:36.000
This is nuts. Okay.

00:27:36.000 --> 00:27:54.000
Microwave ovens. I that I didn't understand. Let's see microwave ovens. They don't cause cancer. I knew that. But I thought they, they do not cook from the inside out. I thought they did the inside out thing I thought that also.

00:27:54.000 --> 00:28:13.000
Yeah, so, it, the 2.45 gigahertz micro microwaves can only penetrate approximately one centimeter, about three eighths of an inch into most foods. So the inside portions of thicker foods are mainly heated by conduction from the outer portions did not know that.

00:28:13.000 --> 00:28:28.000
Interesting, learn something new every day. So, my last extra is just a wish list I came across a company in Portland that makes microphones, your trumpet labs, and I really want this microphone Look at this.

00:28:28.000 --> 00:28:30.000
That's fantastic. It's like a steampunk.

00:28:30.000 --> 00:28:43.000
Yeah, it's so cool. It's called the Arduino, they've got a bunch of bunch of different models but. But this is, this is a great looking Mike I'd love to be able to try this out. So, 600 bucks.

00:28:43.000 --> 00:28:50.000
I think is amazing. Yeah, it gets into the price of this microphone Brian which is kind of ridiculous.

00:28:50.000 --> 00:28:55.000
Anyway, but it's, it's not it's not dynamic that other one.

00:28:55.000 --> 00:29:04.000
Oh condenser. They blown it. Oh man, so I'm not sure I'd have to try it out to see if I can get the my room quiet enough to use this.

00:29:04.000 --> 00:29:13.000
Yeah, for people don't know the dynamic ones really capture just like an area and they exclude all the background sound like a whole bunch.

00:29:13.000 --> 00:29:18.000
Yeah, there's a lawnmower outside that you can't hear because of the my dynamic mic.

00:29:18.000 --> 00:29:28.000
Is it right now, I they're absolutely I don't hear anything at all and I've had people right next door using a chainsaw on a tree on and people couldn't you didn't come through in the mic.

00:29:28.000 --> 00:29:43.000
Those are dynamic mics condenser mics are maybe better for like a studio. If you're people say they sound the best well they sound the best in like a truly quiet place but they pick up echo more they pick up background cards etc so yeah Brian's getting out of here.

00:29:43.000 --> 00:29:51.000
Yeah. How about you do you have any extras. I sure do. I sure do. Okay.

00:29:51.000 --> 00:30:00.000
While ago I wrote the unsolicited advice from Mozilla and Firefox, saying that they are going off the rails and they really should fix it.

00:30:00.000 --> 00:30:12.000
This has nothing to do with what I said but I do want to, since I kind of criticize them also gave them some ideas I do want to point out something that's kind of cool that they just launched, which is Mozilla monitor, they had Mozilla monitor and like a really

00:30:12.000 --> 00:30:24.000
super shallow, not much of a service type of way, kind of like have I been pwned like it'll tell you there's a breach. Okay, there's like services that are already I'm signed up for but thanks.

00:30:24.000 --> 00:30:32.000
But what they did is they've announced some kind of service. Now that'll find where your private info is being sold by data brokers.

00:30:32.000 --> 00:30:50.000
And then they'll fix it like see this says, we found, we found 50 places where your email or your physical address or your phone number or your family member was being sold by these crappy scumbag data brokers, they truly are scummy people.

00:30:50.000 --> 00:31:06.000
And we'll fix it. Here's another example, re manually fix it's like change your password because and then 8035 automatically removed, because we found them. Well I filled this out it'll do a free scan of you put your email address in here.

00:31:06.000 --> 00:31:28.000
I have 1080 Wow, 1080 and they have like my kids names, my kids phone numbers. This is I'm telling you they're scumbags. And they sell this right. So you can sign up for it. And it'll basically go through and keep it safe you can do one time.

00:31:28.000 --> 00:31:55.000
Like here's the old things the free breach alerts like good have I been pwned it's better it's more comprehensive. Troy hunt is awesome I've had him on talk Python quite a while ago. But the monitor plus is what I'm talking about. The only drawback is, look how much that is $14 a month, just to tell you if it's on something on online and we remove it. I think that's pretty steep man. I mean,

00:31:55.000 --> 00:32:14.000
I spoke to maybe if it really really bothers you. So, I guess what my plan is to do it like since there are so many and it really is creepy it's like I'm going to do it for one month, it's, it's been working for like a week and I don't remember how much it is like a quarter of the way through getting rid of them.

00:32:14.000 --> 00:32:36.000
And then I'm going to cancel it again because there's no way I'm paying $14 a month because the stuff doesn't appear at an incredible rate it's just haven't done it for 20 years you know how it cleaned it up for 20 years so.

00:32:36.000 --> 00:33:05.000
I think it's tremendously too high. I think everyone has subscription fatigue, and another 15 bucks is just 1450 whatever it was is like, especially since it mostly happens in one's one go you like you mostly get it cleaned up and then it's just kind of maintaining over time, you know, so I don't know but still, nonetheless, having a $14 a month is a pretty good deal.

00:33:05.000 --> 00:33:19.000
Yeah, there's that there's also like that's one way to like help support Mozilla because they're cool. Yeah, if you can you could also can could consider this just a $14 a month donation to Mozilla. Right. Yeah, if that's how that's your vibe, then go for it but there's a lot of things out there that are like, you know, I'll be doing this for a month.

00:33:19.000 --> 00:33:40.000
Yeah, there's that there's also like that's one way to like help support Mozilla because they're cool. Yeah, if you can you can also can could consider this just a $14 a month donation to Mozilla. Right. Yeah, if that's how that's your vibe, then go for it but there's a lot of things out there that deserve some of my money and if I donate $14 a month to all of them then that's a lot.

00:33:40.000 --> 00:33:59.000
Yeah, you don't even get an NPR mug for that. So, like I should at least get a free browser. Oh wait. Okay, couple other things here. Not the joke yet. Python 312.2 is out, and there's, you know, a non trivial number of fixes of it.

00:33:59.000 --> 00:34:22.000
I don't know how many there are here but you know important stuff like get a new version of SQLite and open SSL and the freeze tool didn't work with this, etc etc. So, some bug fixes, I didn't see any security issues but you can see there's, there's a, there is one minor security issue I don't think it's a huge deal but like there's quite a bit of change here Brian look at this.

00:34:22.000 --> 00:34:51.000
By the way, the security issue is that if there's a dot PTH file, starting with a dot or hidden file attribute that could be, you know, snuck into something so people don't know it and then they get imported and run code or something to these effects I don't, I don't know exactly the details but that doesn't sound like a tremendous, you know, it's not like, well if somebody sends 772 ampersand three your hack is going to be a success.

00:34:51.000 --> 00:35:07.000
Yeah, yeah, so, very cool and because of all the neat Docker stuff one command and wait a couple minutes and all the apps are now running Python 312.2 including Python bytes out of him.

00:35:07.000 --> 00:35:20.000
Yeah, the other thing to note about 312 two is that it's a couple releases couple bug fix releases in. So if you were holding out, switching to 312 this might be a good time.

00:35:20.000 --> 00:35:33.000
Yeah, that's I didn't really think of that at all but that's a good point this is the third release of Python 312. Right, so if you've been, oh we're not ready to be so cutting edge well, maybe, maybe now you are.

00:35:33.000 --> 00:36:02.000
Yeah. So, okay, cool. Next up, I want to reach out to anyone crazy enough to get a vision pro who also likes taking courses that talk Python, the talk Python mobile app, and it's iPad forum is now available to put into your virtual land you could sit by Mount hood relaxing and then put, you know, Brian's pie test course on the wall next to you.

00:36:02.000 --> 00:36:12.000
And look at the stars, and then look over Brian, or whatever course you want, but I would, I would love for somebody to just try it out, because there's no way I'm buying a vision pro.

00:36:12.000 --> 00:36:27.000
No way but if people want to try it. That'd be cool. It's not like I built this app and didn't test it in that basically iPad apps, if you opt into it you're allowed to run the iPad apps in the vision pro so I just took our iPad app that we know works well.

00:36:27.000 --> 00:36:35.000
Let people run it over there. Yeah, I would totally try it for you if you want to buy me a vision pro. Sure, I'll go to an Apple store later.

00:36:35.000 --> 00:36:51.000
You know, actually I'm going to stop by the sporting goods store and just get one of those snorkel snorkeling goggles snorkeling mask. So, I want to use them for chopping onions and see if I can get get an app that will do googly eyes on my onions while I'm chopping them.

00:36:51.000 --> 00:37:05.000
That's amazing. I once came home and found my daughter wearing her swim goggles you know the small ones sitting there chopping onions going I'm winning the day I'm winning the day she's like I've got my eyes don't hurt at all I was like, Bravo.

00:37:05.000 --> 00:37:12.000
That's great. That's a good idea. We buy special made onion goggles but they're basically swim goggles.

00:37:12.000 --> 00:37:21.000
Yeah, well you'll get the vision pro I better keep most of the air out and you could just be like you know, a field of onions cutting the onions or who knows where you want to be.

00:37:21.000 --> 00:37:29.000
Yeah, it's a brave new world. I don't know if I want to like put a knife that close to my hands with with with the monitor leg.

00:37:29.000 --> 00:37:33.000
So, but anyway.

00:37:33.000 --> 00:37:48.000
Excellent. Yeah, Henry expected that the vision pro to be mentioned and then David out in the audience suggested I just get one for everyone in the chat like surprise. Thank you for being part of the live show, you get a vision pro you get a vision pro everyone look under your seat.

00:37:48.000 --> 00:37:51.000
That's really nice of you Michael for offering that.

00:37:51.000 --> 00:38:04.000
Yes, of course.

00:38:04.000 --> 00:38:10.020
in the show, and she does this really cool project called Data Doodling.

00:38:10.020 --> 00:38:17.700
She's a data scientist at an AI company, but also just draws out really cool pictures,

00:38:17.700 --> 00:38:21.420
things she's trying to visualize instead of going to use Python or other tools to do.

00:38:21.420 --> 00:38:28.300
Just let me think about that before you actually get in there and use the tools.

00:38:28.300 --> 00:38:31.160
Just kick back and explore data with pictures.

00:38:31.160 --> 00:38:34.120
So anyway, I encourage people to go check that video out.

00:38:34.120 --> 00:38:35.680
It's 29 minutes long.

00:38:35.680 --> 00:38:40.280
It's not super long, but if you're into data visualization and data science, she's doing

00:38:40.280 --> 00:38:41.280
some really cool stuff.

00:38:41.280 --> 00:38:42.280
So that's pretty great.

00:38:42.280 --> 00:38:46.320
Yeah, it's really cool, isn't it?

00:38:46.320 --> 00:38:47.320
Yeah.

00:38:47.320 --> 00:38:50.720
Yeah, she's doing awesome stuff.

00:38:50.720 --> 00:38:54.360
She says she has 50 different ones of those, and they all have an article and analysis

00:38:54.360 --> 00:38:55.360
on the data.

00:38:55.360 --> 00:38:57.360
It's pretty, pretty in depth.

00:38:57.360 --> 00:38:59.120
All right.

00:38:59.120 --> 00:39:00.120
About time for a joke.

00:39:00.120 --> 00:39:02.800
Shall we close it out with a joke?

00:39:02.800 --> 00:39:06.440
This one connects a lot here, Brian.

00:39:06.440 --> 00:39:08.440
Let's see.

00:39:08.440 --> 00:39:15.720
So here's presumably a developer stick figure walking along, looking at a fly trap and says,

00:39:15.720 --> 00:39:18.360
why would a fly land on something like this?

00:39:18.360 --> 00:39:19.360
Stupid fly.

00:39:19.360 --> 00:39:21.200
Looking at a mouse or rat trap.

00:39:21.200 --> 00:39:24.480
Rats should be ashamed for falling into this trap.

00:39:24.480 --> 00:39:27.520
Big bear trap or one of those trapper claw things.

00:39:27.520 --> 00:39:29.280
Bears, this is ridiculous.

00:39:29.280 --> 00:39:30.440
Don't step in this.

00:39:30.440 --> 00:39:31.440
Brian.

00:39:31.440 --> 00:39:35.080
Then there's a sign that says AWS free tier.

00:39:35.080 --> 00:39:37.080
Oh, that looks nice.

00:39:37.080 --> 00:39:39.680
Yeah, that's funny.

00:39:39.680 --> 00:39:43.520
It's a good one, right?

00:39:43.520 --> 00:39:44.520
Yeah.

00:39:45.520 --> 00:39:46.520
So.

00:39:46.520 --> 00:39:47.520
Yeah.

00:39:47.520 --> 00:39:48.520
Plus, that's what I got for you.

00:39:48.520 --> 00:39:50.520
Yeah, that's funny.

00:39:50.520 --> 00:39:54.000
Well, thanks again for a lovely episode.

00:39:54.000 --> 00:40:00.480
And thanks everybody for coming into the show and coming on the show live and sharing it

00:40:00.480 --> 00:40:01.480
with us.

00:40:01.480 --> 00:40:02.480
It's been fun.

00:40:02.480 --> 00:40:03.480
We'll talk next week.

00:40:03.480 --> 00:40:04.480
Bye all.

00:40:04.480 --> 00:40:04.480
Thanks.

