WEBVTT

00:00:00.000 --> 00:00:05.000
Hey everybody, welcome to Python Bytes.


00:00:05.000 --> 00:00:09.980
And we're ready to go, so let's just jump in.


00:00:09.980 --> 00:00:13.500
Hello and welcome to Python Bytes,


00:00:13.500 --> 00:00:15.400
where we deliver Python news and headlines


00:00:15.400 --> 00:00:17.000
directly to your earbuds.


00:00:17.000 --> 00:00:22.000
This is episode 341, recorded June 20th, 2023.


00:00:22.000 --> 00:00:24.120
And I am Brian Okken.


00:00:24.120 --> 00:00:25.400
- And I'm Michael Kennedy.


00:00:25.400 --> 00:00:28.360
- And today this course is,


00:00:28.360 --> 00:00:30.760
or this episode is sponsored by us.


00:00:30.760 --> 00:00:34.200
If you wanna support us,


00:00:34.200 --> 00:00:36.560
you can take one of the courses at Talk Python Training.


00:00:36.560 --> 00:00:38.960
There's an excellent pytest course there.


00:00:38.960 --> 00:00:42.360
And please check out Test and Code Podcast


00:00:42.360 --> 00:00:47.360
and a book about pytest if you're curious.


00:00:47.360 --> 00:00:48.640
We also have Patreon supporters.


00:00:48.640 --> 00:00:50.320
So thank you, Patreon supporters.


00:00:50.320 --> 00:00:54.820
So, and if you'd like to talk to us or suggest something,


00:00:54.820 --> 00:00:59.580
We've got a contact form at pythonbytes.fm,


00:00:59.580 --> 00:01:04.020
but you can also send us something on Mastodon.


00:01:04.020 --> 00:01:07.300
We're all at fosstodon.org,


00:01:07.300 --> 00:01:11.620
at Adam Kennedy, at Brian Okken, and at Python Bytes.


00:01:11.620 --> 00:01:13.420
And we check those regularly.


00:01:13.420 --> 00:01:16.300
Yeah, let's hit it off.


00:01:16.300 --> 00:01:18.420
Michael, what do you got for us for the first topic?


00:01:18.420 --> 00:01:21.460
- I'm going to back up what you just said, Brian.


00:01:21.460 --> 00:01:23.180
- Okay.


00:01:23.180 --> 00:01:25.820
First item comes to us from Mario Munoz.


00:01:25.820 --> 00:01:27.420
Thank you, Mario.


00:01:27.420 --> 00:01:28.420
Right on Mastodon.


00:01:28.420 --> 00:01:29.420
>> Awesome.


00:01:29.420 --> 00:01:33.100
>> And Mario says, "The Pydantic roadmap looks interesting.


00:01:33.100 --> 00:01:37.220
I especially like the combination of analytics and observability.


00:01:37.220 --> 00:01:39.060
Looking forward to what the team ends up building."


00:01:39.060 --> 00:01:44.100
So the first thing I want to talk about is this thing that Mario referenced and pointed


00:01:44.100 --> 00:01:51.660
us at, the Pydantic 2.0 roadmap, or more specifically, Pydantic Incorporated.


00:01:51.660 --> 00:01:55.220
So recall Samuel Colvin, excellent guy, got to hang out.


00:01:55.220 --> 00:02:01.220
We both got to hang out both with Mario and Samuel at PyCon this year, which was fun.


00:02:01.220 --> 00:02:11.480
And he announced Pydantic Incorporated, which is a company around building data tools, somewhat


00:02:11.480 --> 00:02:18.340
around Pydantic and Rust and those kinds of things for the Python and larger space, the


00:02:18.340 --> 00:02:19.540
larger developer space.


00:02:19.540 --> 00:02:21.780
But it didn't have a ton of details


00:02:21.780 --> 00:02:23.720
of exactly where they were going.


00:02:23.720 --> 00:02:26.060
So this roadmap is two things.


00:02:26.060 --> 00:02:30.940
It is a hint on what Pydantic Inc is going to be about,


00:02:30.940 --> 00:02:33.900
what kind of tools Samuel and team are going to offer.


00:02:33.900 --> 00:02:38.220
It is also a call to action to help them


00:02:38.220 --> 00:02:39.500
choose the right direction


00:02:39.500 --> 00:02:41.620
so that when they go off building things,


00:02:41.620 --> 00:02:42.440
they might build something


00:02:42.440 --> 00:02:44.540
that you actually would want to use.


00:02:44.540 --> 00:02:45.380
- Oh, cool.


00:02:45.380 --> 00:02:46.220
- Yeah, right?


00:02:46.220 --> 00:02:48.520
And so it says, look,


00:02:48.520 --> 00:02:52.600
In return for giving us honest feedback,


00:02:52.600 --> 00:02:54.980
you have the option to get early access,


00:02:54.980 --> 00:02:56.600
get inside the closed beta,


00:02:56.600 --> 00:02:58.960
and all those things for the platform.


00:02:58.960 --> 00:03:01.400
And if you're familiar with Pydantic,


00:03:01.400 --> 00:03:03.480
you know it's all about data exchange,


00:03:03.480 --> 00:03:07.320
data validation, strong schemas where there are none,


00:03:07.320 --> 00:03:08.400
and those kinds of things, right?


00:03:08.400 --> 00:03:10.700
Bringing sanity to your data as they say.


00:03:10.700 --> 00:03:14.880
So there's two tacks here.


00:03:14.880 --> 00:03:15.920
Samuel says, "Well, first,


00:03:15.920 --> 00:03:17.600
before going into what we might build,


00:03:17.600 --> 00:03:19.520
I want to tell you what we're not building.


00:03:19.520 --> 00:03:22.020
We're not building a new database or query engine.


00:03:22.020 --> 00:03:24.880
They're not going to be building


00:03:24.880 --> 00:03:26.680
or pretending that non-developers


00:03:26.680 --> 00:03:29.440
or AI can do the job of a developer, right?


00:03:29.440 --> 00:03:33.280
They want to accelerate developers workflows.


00:03:33.280 --> 00:03:34.800
So for example, they're going to have CLIs


00:03:34.800 --> 00:03:36.680
before they have GUIs.


00:03:36.680 --> 00:03:40.620
And they're not doing 314 integrations


00:03:40.620 --> 00:03:43.320
into every conceivable technology, right?


00:03:43.320 --> 00:03:45.660
Think Zapier or something like that.


00:03:45.660 --> 00:03:46.980
if this, then that.


00:03:46.980 --> 00:03:50.020
And finally, they're not gonna have an SDK


00:03:50.020 --> 00:03:50.860
for every language.


00:03:50.860 --> 00:03:52.720
They're just focusing on a few languages,


00:03:52.720 --> 00:03:55.500
you know, with Python right up front, I'm sure.


00:03:55.500 --> 00:03:56.700
So it says, how can you help?


00:03:56.700 --> 00:04:00.360
Well, give us feedback on the five different things


00:04:00.360 --> 00:04:02.660
that they're considering, okay?


00:04:02.660 --> 00:04:03.500
- Okay.


00:04:03.500 --> 00:04:06.700
- Number one, this is the one,


00:04:06.700 --> 00:04:08.340
this is the one that Mario liked.


00:04:08.340 --> 00:04:12.620
Python analytics and observability,


00:04:12.620 --> 00:04:17.240
a logging and metrics platform with tight integration


00:04:17.240 --> 00:04:21.000
with Python and Pydantic designed to make the data flowing


00:04:21.000 --> 00:04:23.160
through your application more readily usable


00:04:23.160 --> 00:04:26.380
for both engineering and business analytics.


00:04:26.380 --> 00:04:31.280
Right, if you're doing say FastAPI, exchanging data, right,


00:04:31.280 --> 00:04:34.180
over at Python bytes, like all the stuff coming to you


00:04:34.180 --> 00:04:36.720
is come through Pydantic classes


00:04:36.720 --> 00:04:39.680
because we're using Beanie as the database access layer,


00:04:40.640 --> 00:04:43.360
which is based on Pydantic, if you don't know.


00:04:43.360 --> 00:04:46.000
Okay, so that's the analytics and observability.


00:04:46.000 --> 00:04:48.480
Another one is a couple angles here


00:04:48.480 --> 00:04:50.880
around data gateways for object stores.


00:04:50.880 --> 00:04:55.440
So think S3 or something, Azure Blob Storage,


00:04:55.440 --> 00:04:58.400
those kinds of things, digital ocean spaces.


00:04:58.400 --> 00:05:02.380
So a gateway for your object store.


00:05:02.380 --> 00:05:05.080
So add validation, transformation, and cataloging


00:05:05.080 --> 00:05:08.440
in front of things like S3 with schemas defined


00:05:08.440 --> 00:05:11.240
and then validated by their REST service.


00:05:11.240 --> 00:05:15.880
Or same idea, but integrated into your existing data warehouse.


00:05:15.880 --> 00:05:18.480
Number four is a schema catalog.


00:05:18.480 --> 00:05:19.720
Since for many,


00:05:19.720 --> 00:05:24.240
Pydantic already holds the highest fidelity representation of data schemas.


00:05:24.240 --> 00:05:26.720
So if you had a schema catalog,


00:05:26.720 --> 00:05:28.240
it could take that to the next level,


00:05:28.240 --> 00:05:32.520
serving as an organization-wide single source of truth for those schemas.


00:05:32.520 --> 00:05:37.920
So if you've got a bunch of different apps or whatever,


00:05:37.920 --> 00:05:40.460
or whatever, especially across language maybe,


00:05:40.460 --> 00:05:44.920
languages that talk to certain data stores, certain APIs,


00:05:44.920 --> 00:05:47.800
like it might be some kind of central store that says,


00:05:47.800 --> 00:05:49.300
"This is what it looks like,


00:05:49.300 --> 00:05:52.560
and here's how you maybe generate classes to talk to it."


00:05:52.560 --> 00:05:56.140
Finally, dashboards and UIs powered by Pydantic models,


00:05:56.140 --> 00:05:58.980
a managed platform to deploy and control dashboards,


00:05:58.980 --> 00:06:01.480
auxiliary apps, and internal tools,


00:06:01.480 --> 00:06:04.200
where everything from UI components like forms and tables


00:06:04.200 --> 00:06:06.360
to database schema would be defined in Python


00:06:06.360 --> 00:06:08.440
using Pydantic models.


00:06:08.440 --> 00:06:12.280
So they go into a bunch of details with code samples


00:06:12.280 --> 00:06:15.000
of what they actually might look like


00:06:15.000 --> 00:06:16.840
if you were to go down one of these paths.


00:06:16.840 --> 00:06:18.920
But I'm just going to leave it here and say,


00:06:18.920 --> 00:06:20.320
encourage everyone who cares about this


00:06:20.320 --> 00:06:23.960
to go participate in Samuel's survey


00:06:23.960 --> 00:06:27.200
so that they get the right feedback that they need.


00:06:27.200 --> 00:06:29.000
- Is all of the above an option?


00:06:29.000 --> 00:06:30.880
Because that all sounds great.


00:06:30.880 --> 00:06:32.320
- Yeah, that's pretty good, doesn't it?


00:06:32.320 --> 00:06:33.160
- Yeah.


00:06:33.160 --> 00:06:35.480
- I mean, some of these don't really apply to me.


00:06:35.480 --> 00:06:39.220
like a schema catalog for the whole company, right?


00:06:39.220 --> 00:06:42.780
Like it's me, sometimes me and another developer.


00:06:42.780 --> 00:06:45.980
So it's, you know, but if you were in a large organization,


00:06:45.980 --> 00:06:49.140
even a team of handful of people


00:06:49.140 --> 00:06:50.940
or a couple of software teams,


00:06:50.940 --> 00:06:52.720
I think they'll start to get real valuable.


00:06:52.720 --> 00:06:53.640
- I think they all look great,


00:06:53.640 --> 00:06:56.340
but the data gateway for data warehouses


00:06:56.340 --> 00:06:59.300
and for object stores, it sounds really cool


00:06:59.300 --> 00:07:02.940
because I mean, that's sort of,


00:07:04.220 --> 00:07:08.420
Actually, they all look pretty good.


00:07:08.420 --> 00:07:11.180
I was curious, so you use Pentadactyl now, right?


00:07:11.180 --> 00:07:11.740
>> Mm-hmm.


00:07:11.740 --> 00:07:13.740
>> I went through it. So what happened,


00:07:13.740 --> 00:07:17.900
so I know one of the things it does is it filters out stuff,


00:07:17.900 --> 00:07:21.020
or it sends an error code or something.


00:07:21.020 --> 00:07:26.700
If you try to send data and it's not the right type or the right data,


00:07:26.700 --> 00:07:29.060
is that reported somewhere or is that part of


00:07:29.060 --> 00:07:31.260
the analytics and observability thing?


00:07:31.260 --> 00:07:33.700
>> I think that would be analytics and observability.


00:07:33.700 --> 00:07:36.340
'cause right now it just appears as an exception.


00:07:36.340 --> 00:07:38.540
And if you have integration with something like Sentry


00:07:38.540 --> 00:07:39.660
or one of them other things,


00:07:39.660 --> 00:07:43.660
then it would report it as an exception with some details,


00:07:43.660 --> 00:07:46.220
but I don't think that's what they're thinking.


00:07:46.220 --> 00:07:48.140
I think they're thinking much more,


00:07:48.140 --> 00:07:52.380
even possibly like success data going through.


00:07:52.380 --> 00:07:53.220
- Oh yeah, yeah.


00:07:53.220 --> 00:07:57.140
Like really see how people are using an API,


00:07:57.140 --> 00:07:59.580
so using an entry point.


00:07:59.580 --> 00:08:01.900
I think that's pretty cool.


00:08:01.900 --> 00:08:03.140
- Yeah, it's pretty cool.


00:08:03.140 --> 00:08:04.140
Nice.


00:08:04.140 --> 00:08:05.140
>> Mm-hmm.


00:08:05.140 --> 00:08:06.140
>> Well--


00:08:06.140 --> 00:08:07.140
>> Over to you.


00:08:07.140 --> 00:08:16.140
>> I'd like to talk about shells out of the web and into talking with your operating system,


00:08:16.140 --> 00:08:17.140
kind of.


00:08:17.140 --> 00:08:23.060
So I want to highlight an article called "The Right Way to Run Shell Commands" from Python.


00:08:23.060 --> 00:08:27.780
So I guess it's not really necessarily shell commands, but kind of.


00:08:27.780 --> 00:08:31.140
So when you're writing, some Python programs


00:08:31.140 --> 00:08:33.700
have to interact with the operating system


00:08:33.700 --> 00:08:36.100
for things like file system things


00:08:36.100 --> 00:08:38.900
or starting other applications and whatnot.


00:08:38.900 --> 00:08:41.060
And there's various ways to do that,


00:08:41.060 --> 00:08:44.700
but one of the, I guess, I guess that's kind of part


00:08:44.700 --> 00:08:47.500
of this article is talking about some of these tools.


00:08:47.500 --> 00:08:50.420
So there's, it starts off with talking about


00:08:50.420 --> 00:08:53.020
natively into Python.


00:08:53.020 --> 00:08:55.060
So some things that you might not,


00:08:55.060 --> 00:08:56.820
when you start having to think,


00:08:56.820 --> 00:08:59.360
I have to interact with the shell.


00:08:59.360 --> 00:09:01.200
You might not have to actually,


00:09:01.200 --> 00:09:04.960
like there's pathlib that can do quite a bit for you


00:09:04.960 --> 00:09:07.760
and you can create temp files and stuff like that


00:09:07.760 --> 00:09:09.640
with a temp file package.


00:09:09.640 --> 00:09:14.640
And there's shutil, which is, I guess, pretty good.


00:09:14.640 --> 00:09:18.960
And I've never used syslog or signal,


00:09:18.960 --> 00:09:21.160
but those things are around.


00:09:21.160 --> 00:09:23.440
Okay, so those are things built into Python.


00:09:23.440 --> 00:09:25.200
So make sure that you check out


00:09:25.200 --> 00:09:27.100
the things built into Python already.


00:09:27.100 --> 00:09:31.680
But then there's a couple other different modules


00:09:31.680 --> 00:09:33.200
that might help.


00:09:33.200 --> 00:09:37.200
The OS module, he's kind of going this backwards,


00:09:37.200 --> 00:09:41.580
is probably don't directly reach for the OS module,


00:09:41.580 --> 00:09:43.680
but there's a few things in the OS module


00:09:43.680 --> 00:09:44.560
that are really great,


00:09:44.560 --> 00:09:48.280
like to get your getEnvironmentalVariables,


00:09:48.280 --> 00:09:50.280
like get the path variable or something,


00:09:50.280 --> 00:09:52.720
you can use os.getEnv.


00:09:52.720 --> 00:09:54.400
And there's a few other things


00:09:54.400 --> 00:09:56.500
like getting a username and stuff,


00:09:56.500 --> 00:10:00.780
but the, I guess, get you name.


00:10:00.780 --> 00:10:01.620
I don't know what that is.


00:10:01.620 --> 00:10:02.700
Is that username?


00:10:02.700 --> 00:10:03.660
I don't know.


00:10:03.660 --> 00:10:05.840
But anyway, the,


00:10:05.840 --> 00:10:09.460
so there's a few things in the OS module


00:10:09.460 --> 00:10:10.600
that are interesting,


00:10:10.600 --> 00:10:13.020
but you're probably not looking there.


00:10:13.020 --> 00:10:15.420
I often have used subprocess,


00:10:15.420 --> 00:10:17.540
and this is, I guess, a reminder that


00:10:17.540 --> 00:10:21.140
with modern Python development,


00:10:21.140 --> 00:10:22.460
if you're using subprocess,


00:10:22.460 --> 00:10:24.920
you probably want sub process run,


00:10:24.920 --> 00:10:29.760
even though there's a lot of other legacy stuff


00:10:29.760 --> 00:10:32.040
in the sub project, sub process.


00:10:32.040 --> 00:10:36.080
- Open, P open, yeah, P open, for example, yeah.


00:10:36.080 --> 00:10:39.040
- Yeah, and call, you probably don't want those,


00:10:39.040 --> 00:10:40.700
what you probably want is run.


00:10:40.700 --> 00:10:45.700
Run is kind of a catch all that works for most things now,


00:10:45.700 --> 00:10:50.760
because I really like, it doesn't show it in the example,


00:10:50.760 --> 00:10:55.760
but there's options in run to just turn on like encoding.


00:10:55.760 --> 00:11:00.360
Here's the encoding bit that says, you know, turn on.


00:11:00.360 --> 00:11:02.080
- Capture the standard ends.


00:11:02.080 --> 00:11:02.960
- Oh yeah, there it is.


00:11:02.960 --> 00:11:05.640
Capture output equals true.


00:11:05.640 --> 00:11:08.580
So that you can capture the output.


00:11:08.580 --> 00:11:11.400
That's often what I wanna do if I'm running a program


00:11:11.400 --> 00:11:13.560
is find out what its output is.


00:11:13.560 --> 00:11:15.180
So this is handy.


00:11:15.180 --> 00:11:20.520
However, one of the things that I haven't used,


00:11:20.520 --> 00:11:23.640
this article Martin Hines mentions,


00:11:23.640 --> 00:11:25.540
there's one right way.


00:11:25.540 --> 00:11:27.300
And for his opinion,


00:11:27.300 --> 00:11:31.340
the right way is use the third-party package,


00:11:31.340 --> 00:11:36.340
which is a very unsearchable package name called the SH.


00:11:36.340 --> 00:11:40.280
- You don't even wanna talk about it.


00:11:40.280 --> 00:11:43.980
- So I have no idea if anybody's written about this


00:11:43.980 --> 00:11:46.700
because it's really hard to Google SH


00:11:46.700 --> 00:11:48.140
because it's everywhere.


00:11:49.300 --> 00:11:51.120
But it's kind of a neat package.


00:11:51.120 --> 00:11:53.600
So I looked it up, of course,


00:11:53.600 --> 00:11:58.560
and it's tested on all sorts of versions


00:11:58.560 --> 00:12:00.160
and downloaded a ton.


00:12:00.160 --> 00:12:03.960
So 3.9 million a month,


00:12:03.960 --> 00:12:06.840
look at the stars, 6.6 thousand stars.


00:12:06.840 --> 00:12:09.080
So a fairly popular package.


00:12:09.080 --> 00:12:11.840
So most of you probably already know about it.


00:12:11.840 --> 00:12:13.240
But the-- - It's just us, Brian.


00:12:13.240 --> 00:12:15.180
We're just the ones who don't know.


00:12:15.180 --> 00:12:16.840
- But there's, it's kind of neat.


00:12:16.840 --> 00:12:20.680
there's, what it is you've got commands that are,


00:12:20.680 --> 00:12:23.140
that are just kind of look like they did before.


00:12:23.140 --> 00:12:26.240
Like LS is sh.ls.


00:12:26.240 --> 00:12:27.240
That's kind of neat.


00:12:27.240 --> 00:12:28.760
And you can pass in arguments.


00:12:28.760 --> 00:12:32.120
What's some of the others,


00:12:32.120 --> 00:12:34.700
like I'm gonna go over to the documentation.


00:12:34.700 --> 00:12:37.760
You've got LS, you've got like,


00:12:37.760 --> 00:12:40.520
what else?


00:12:40.520 --> 00:12:44.640
Oh, I guess it just has LX examples.


00:12:44.640 --> 00:12:48.700
- Yeah, it gets an example, that's cool.


00:12:48.700 --> 00:12:52.260
- Anyway, find, there's a few others.


00:12:52.260 --> 00:12:53.500
There's a bunch of others actually.


00:12:53.500 --> 00:12:55.300
It's a pretty big package.


00:12:55.300 --> 00:12:59.000
And it isn't a rewriting of all of these things.


00:12:59.000 --> 00:13:01.160
It's actually talking to your operating system.


00:13:01.160 --> 00:13:02.640
So that's the catch.


00:13:02.640 --> 00:13:06.480
It's talking to a Unix-like operating system.


00:13:06.480 --> 00:13:09.260
So it works on Linux, it works on Mac.


00:13:09.260 --> 00:13:11.380
It will not work on Windows apparently, so.


00:13:11.380 --> 00:13:12.940
- Unless you're using Windows,


00:13:12.940 --> 00:13:17.940
Linux subsystem for Windows.


00:13:17.940 --> 00:13:18.940
>> Maybe.


00:13:18.940 --> 00:13:20.300
>> Linux, I guess it is.


00:13:20.300 --> 00:13:22.420
Yeah. Anyway, the embedded Linux,


00:13:22.420 --> 00:13:23.820
you can run on Windows if you want.


00:13:23.820 --> 00:13:24.340
>> Okay.


00:13:24.340 --> 00:13:26.220
>> Because that's just Ubuntu. So it should work.


00:13:26.220 --> 00:13:26.940
>> Perfect.


00:13:26.940 --> 00:13:28.820
>> One thing I like, if you scroll up just a little bit here,


00:13:28.820 --> 00:13:29.740
so I can point at you on it.


00:13:29.740 --> 00:13:32.820
So it says, actually it's down one page.


00:13:32.820 --> 00:13:37.340
It says, what you can do is you can say sh.ls,


00:13:37.340 --> 00:13:42.620
or you can create a command like any executable you want.


00:13:42.620 --> 00:13:46.460
you can just say sh.command and you give it the path to the executable.


00:13:46.460 --> 00:13:49.460
And then the arguments can be passed


00:13:49.460 --> 00:13:52.620
as if they were a function call on that resulting thing.


00:13:52.620 --> 00:13:55.160
So instead of like chaining it all together,


00:13:55.160 --> 00:13:58.540
you can say like create the git command and then you could do a


00:13:58.540 --> 00:14:00.540
git parentheses,


00:14:00.540 --> 00:14:03.260
you know, checkout, comma,


00:14:03.260 --> 00:14:06.340
main or prod or whatever.


00:14:06.340 --> 00:14:08.340
Right, that's a pretty cool way to


00:14:08.340 --> 00:14:10.340
integrate with the command line there.


00:14:10.340 --> 00:14:14.900
Yeah, that is pretty neat. So and that that'll work with even your like, like you said,


00:14:14.900 --> 00:14:19.460
I think so. If you look at the next example down right below the LS underscore command. Yeah.


00:14:19.460 --> 00:14:21.700
Custom CMD is what it says. Yeah.


00:14:21.700 --> 00:14:28.740
So your own command, you can you can have it run something and have the arguments listed.


00:14:28.740 --> 00:14:29.380
It's pretty neat.


00:14:29.380 --> 00:14:35.620
Can even be another Python command. You might think, why would I ever do that in Python? But


00:14:35.620 --> 00:14:38.820
you know, maybe that's coming out of a different virtual environment with like some setup that's


00:14:38.820 --> 00:14:40.340
that's got a bunch of things


00:14:40.340 --> 00:14:43.220
that you're not integrating into your system.


00:14:43.220 --> 00:14:44.740
I don't know, there might be reasons.


00:14:44.740 --> 00:14:48.700
- Or you're using, so like if you're using


00:14:48.700 --> 00:14:55.100
what, click or what is the typer?


00:14:55.100 --> 00:14:57.140
They have built-in tests frameworks,


00:14:57.140 --> 00:14:59.860
but if you have another, a different command line interface


00:14:59.860 --> 00:15:01.620
that you're testing against,


00:15:01.620 --> 00:15:04.140
it might not have a way to run the commands directly.


00:15:04.140 --> 00:15:07.420
So you could use this to run a Python command for testing.


00:15:07.420 --> 00:15:08.260
- Yeah.


00:15:08.260 --> 00:15:09.360
- Yeah, neat.


00:15:09.360 --> 00:15:13.140
- Couple of live stream comments, Brian.


00:15:13.140 --> 00:15:16.060
Michael says, I love Michael, Michael W.


00:15:16.060 --> 00:15:18.620
Every time I fall back to OS.system out of habit,


00:15:18.620 --> 00:15:21.060
I feel like the old guy measuring his gas mileage


00:15:21.060 --> 00:15:23.660
and rods for hedgehog's head.


00:15:23.660 --> 00:15:25.740
I love it.


00:15:25.740 --> 00:15:29.540
And then Henry Schreiner out there said


00:15:29.540 --> 00:15:32.260
there's also Plumbum of which he's been a maintainer


00:15:32.260 --> 00:15:37.260
since 2015, similar to SH, but he's not really up on


00:15:37.780 --> 00:15:40.700
and both well enough to give a comparison.


00:15:40.700 --> 00:15:42.460
Doesn't know SH that well.


00:15:42.460 --> 00:15:44.460
- I will check out Plumbum, nice.


00:15:44.460 --> 00:15:46.860
- Cool, thanks guys.


00:15:46.860 --> 00:15:51.620
- Well, what you got for us?


00:15:51.620 --> 00:15:54.940
- I think, oh yeah, no, we got one more, don't we?


00:15:54.940 --> 00:15:56.620
I got another one.


00:15:56.620 --> 00:15:59.460
So over here, I've got--


00:15:59.460 --> 00:16:00.760
- Or do we wanna do an ad?


00:16:00.760 --> 00:16:05.620
- Well, encourage people to check out the courses


00:16:05.620 --> 00:16:06.740
over at TalkMyLand Training.


00:16:06.740 --> 00:16:09.780
always supports us that way, including the pytest course.


00:16:09.780 --> 00:16:11.860
Check out the new mobile app that we built


00:16:11.860 --> 00:16:13.740
and check out the pytest book.


00:16:13.740 --> 00:16:17.220
Really supporting our work that way


00:16:17.220 --> 00:16:19.220
is really the best way to support the podcast.


00:16:19.220 --> 00:16:22.720
- And visiting the sponsors when we have other sponsors.


00:16:22.720 --> 00:16:27.200
- But I wanna talk about buying and selling your data.


00:16:27.200 --> 00:16:31.460
So there's an article on PCMag of all places


00:16:31.460 --> 00:16:35.980
that I got this that talks about a report released by...


00:16:35.980 --> 00:16:40.980
by the Office of the Director of National Intelligence, ODNI,


00:16:40.980 --> 00:16:44.920
which is pretty much how I'm gonna refer to them


00:16:44.920 --> 00:16:45.900
from here on out.


00:16:45.900 --> 00:16:50.960
ODNI released this, declassified this report


00:16:50.960 --> 00:16:53.440
from January, 2022.


00:16:53.440 --> 00:16:57.280
And the headline is, the US says, United States says,


00:16:57.280 --> 00:16:58.600
"Yep, we're buying your data,


00:16:58.600 --> 00:17:00.660
"including your embarrassing secrets."


00:17:00.660 --> 00:17:03.800
Digital information can be purchased


00:17:03.800 --> 00:17:06.560
from commercial data brokers and de-anonymize


00:17:06.560 --> 00:17:08.400
to ID the person it is tied to,


00:17:08.400 --> 00:17:11.840
including US citizens, says the ODNI.


00:17:11.840 --> 00:17:14.540
That's a little disturbing.


00:17:14.540 --> 00:17:19.540
So when you go to that ad-ridden website


00:17:19.540 --> 00:17:26.640
that has 29 trackers and 42 ad networks on it, right?


00:17:26.640 --> 00:17:30.180
They're collecting a bunch of data,


00:17:30.180 --> 00:17:32.640
but that same network is on a bunch of other sites


00:17:32.640 --> 00:17:34.880
and they're pulling all those things together.


00:17:34.880 --> 00:17:37.880
We have these data brokers who gather all that information,


00:17:37.880 --> 00:17:41.840
but also really, really frustrating things


00:17:41.840 --> 00:17:44.960
where they buy and sell your credit card data


00:17:44.960 --> 00:17:47.680
and you don't get to say whether or not


00:17:47.680 --> 00:17:49.800
you want your credit card data for sale.


00:17:49.800 --> 00:17:51.640
I'm pretty sure it was T-Mobile.


00:17:51.640 --> 00:17:55.200
There's one of the mobile carriers


00:17:55.200 --> 00:17:57.560
who was selling your location data


00:17:57.560 --> 00:17:59.120
and you didn't get to opt out of it.


00:17:59.120 --> 00:18:01.560
Just like, well, you're using your phone, aren't you?


00:18:01.560 --> 00:18:03.440
So why isn't that for sale?


00:18:03.440 --> 00:18:05.760
And all of that stuff gets combined


00:18:05.760 --> 00:18:09.280
into like a profile on your shadow profile.


00:18:09.280 --> 00:18:14.280
And so the news is that the declassified report


00:18:14.280 --> 00:18:17.720
here talks about how the US has been buying


00:18:17.720 --> 00:18:21.840
large amounts of this type of commercial information


00:18:21.840 --> 00:18:23.700
for purposes of spying


00:18:23.700 --> 00:18:27.960
and other intelligence related things.


00:18:27.960 --> 00:18:31.200
And to some degree, I support what the US does


00:18:31.200 --> 00:18:35.160
with national intelligence, you want them to keep us safe


00:18:35.160 --> 00:18:36.560
and things like that.


00:18:36.560 --> 00:18:40.280
On the other hand, this seems really out of bounds, right?


00:18:40.280 --> 00:18:43.560
Like I think the report itself even said


00:18:43.560 --> 00:18:51.160
the declassification of the report prompted Senator Wyden


00:18:51.160 --> 00:18:52.360
to call on the US government


00:18:52.360 --> 00:18:54.240
to rein in unchecked surveillance.


00:18:54.240 --> 00:18:56.040
And according to the report,


00:18:57.400 --> 00:19:01.600
ODNI does not even know which agents are doing this.


00:19:01.600 --> 00:19:04.920
And said, if the government can buy its way


00:19:04.920 --> 00:19:06.000
around the fourth amendment,


00:19:06.000 --> 00:19:11.000
the required must have a reason to search people


00:19:11.000 --> 00:19:14.400
and their properties due process,


00:19:14.400 --> 00:19:17.080
then what's the point of it, right?


00:19:17.080 --> 00:19:20.560
So that's basically what this report goes through


00:19:20.560 --> 00:19:22.160
and talks about.


00:19:22.160 --> 00:19:25.760
And yeah, it's not terribly scary,


00:19:25.760 --> 00:19:29.060
but it's just another reminder that you should be,


00:19:29.060 --> 00:19:32.840
when you go to a website,


00:19:32.840 --> 00:19:36.880
like if you go to say cnn.com or somewhere else


00:19:36.880 --> 00:19:38.540
and you get a big pop-up,


00:19:38.540 --> 00:19:39.700
don't you wanna support us?


00:19:39.700 --> 00:19:41.780
Unblock your ad blocker, right?


00:19:41.780 --> 00:19:44.840
It's not just about selling the ads, right?


00:19:44.840 --> 00:19:48.440
It's about, you know,


00:19:48.440 --> 00:19:53.140
willingly feeding yourself into surveillance pipelines,


00:19:53.140 --> 00:19:56.460
into retargeting pipelines that might change


00:19:56.460 --> 00:19:58.180
the price you pay for insurance


00:19:58.180 --> 00:20:02.560
or determine whether or not you're eligible for a mortgage,


00:20:02.560 --> 00:20:04.620
not because of what you present,


00:20:04.620 --> 00:20:06.880
but because of some back channel thing


00:20:06.880 --> 00:20:08.540
that has been discovered about you


00:20:08.540 --> 00:20:10.860
in some way that you didn't intend to,


00:20:10.860 --> 00:20:13.540
or probably maybe doesn't even make sense, right?


00:20:13.540 --> 00:20:14.380
- Yeah.


00:20:14.380 --> 00:20:16.320
- Accidentally clicked a link and now you're marked


00:20:16.320 --> 00:20:19.740
as something that you didn't necessarily mean to be, right?


00:20:19.740 --> 00:20:22.460
So anyway, people can look through this.


00:20:22.460 --> 00:20:26.140
I just want to encourage folks to like,


00:20:26.140 --> 00:20:29.020
as they think about working with ad companies


00:20:29.020 --> 00:20:30.520
and they think about creating these products,


00:20:30.520 --> 00:20:32.720
just, you know, try less ads, right?


00:20:32.720 --> 00:20:37.720
Over at Python Bytes, go to one of these.


00:20:37.720 --> 00:20:38.720
We have our ads right here.


00:20:38.720 --> 00:20:40.460
I have like the most intense ad blocking


00:20:40.460 --> 00:20:42.420
you can get pretty much.


00:20:42.420 --> 00:20:43.860
And what do we see right there?


00:20:43.860 --> 00:20:47.780
An ad from Influx Data, because we're not retracking you.


00:20:47.780 --> 00:20:48.620
We're not targeting you.


00:20:48.620 --> 00:20:49.460
You don't see a cookie banner


00:20:49.460 --> 00:20:51.000
because there's no cookies, right?


00:20:51.000 --> 00:20:52.380
There's no third-party cookies.


00:20:52.380 --> 00:20:56.020
And this is certainly possible.


00:20:56.020 --> 00:20:58.420
So I encourage people to use browsers such as Vivaldi


00:20:58.420 --> 00:21:02.740
or Brave, not Chrome, that do not track you


00:21:02.740 --> 00:21:07.500
as well as NextDNS.io.


00:21:07.500 --> 00:21:11.460
I put a link to that in the show notes.


00:21:11.460 --> 00:21:15.180
NextDNS, got to spell that right.


00:21:15.180 --> 00:21:16.460
Which is-- this is awesome.


00:21:16.460 --> 00:21:19.380
I talked about it before, but on your mobile phone app--


00:21:19.380 --> 00:21:21.420
so for example, Flipboard is a thing


00:21:21.420 --> 00:21:24.020
you flip through when your magazine ads or Apple News,


00:21:24.020 --> 00:21:26.040
when you open it up, those are still full of ads,


00:21:26.040 --> 00:21:28.420
even if you've got an ad blocker


00:21:28.420 --> 00:21:30.300
installed on your browser, right?


00:21:30.300 --> 00:21:32.320
But once you put this on your local network,


00:21:32.320 --> 00:21:35.240
then everything has ad blocking built in,


00:21:35.240 --> 00:21:38.260
even your mobile apps, which is pretty excellent.


00:21:38.260 --> 00:21:39.360
- That's pretty cool.


00:21:39.360 --> 00:21:40.200
- Yeah.


00:21:40.200 --> 00:21:46.740
- I highly encourage people with like lots of non-tech savvy


00:21:46.740 --> 00:21:49.100
people in your household to turn this on


00:21:49.100 --> 00:21:52.700
so that people can be protected anyway.


00:21:52.700 --> 00:21:54.820
- The only trick is it's a little bit challenging


00:21:54.820 --> 00:21:57.500
to turn it off because it's like a router setting


00:21:57.500 --> 00:21:59.060
for the whole system.


00:21:59.060 --> 00:21:59.900
- Okay.


00:21:59.900 --> 00:22:04.040
- So what you can do is you can set up DNS over HTTP


00:22:04.040 --> 00:22:05.180
on your browsers, right?


00:22:05.180 --> 00:22:06.920
And so that way, even if you're not at home,


00:22:06.920 --> 00:22:07.780
it still works.


00:22:07.780 --> 00:22:10.340
But also I have a second browser,


00:22:10.340 --> 00:22:14.100
a second browser that if I have to turn off that,


00:22:14.100 --> 00:22:18.460
I set its HTTPS or its DNS over HTTPS


00:22:18.460 --> 00:22:20.060
to a non-blocking one.


00:22:20.060 --> 00:22:23.420
So I can turn on the ads with that browser explicitly


00:22:23.420 --> 00:22:25.460
like to get around this so I don't have to configure things.


00:22:25.460 --> 00:22:29.140
But it's a tiny bit of a hassle, but it's super worth it.


00:22:29.140 --> 00:22:32.180
- Yeah, another thing, you talked about ads,


00:22:32.180 --> 00:22:37.180
but there's also tracking analytics.


00:22:37.180 --> 00:22:41.380
So a lot of people are not doing any ads,


00:22:41.380 --> 00:22:44.140
but they're just curious about how good their site


00:22:44.140 --> 00:22:45.420
is working and stuff.


00:22:45.420 --> 00:22:48.960
So they turn on Google Analytics or some other analytics.


00:22:48.960 --> 00:22:53.820
And a lot of analytics are kind of awful


00:22:53.820 --> 00:22:55.900
about collecting and selling data.


00:22:55.900 --> 00:22:58.180
You might get a little bit of value.


00:22:58.180 --> 00:23:00.760
Google gets a lot of value from seeing everybody


00:23:00.760 --> 00:23:02.200
that goes to your website.


00:23:02.200 --> 00:23:04.840
So I do like a lot of people switching


00:23:04.840 --> 00:23:07.700
to other types of analytics.


00:23:07.700 --> 00:23:09.600
Collecting download counts, a lot of times


00:23:09.600 --> 00:23:12.000
you're just your host can do that.


00:23:12.000 --> 00:23:15.040
You don't need to put that in cookies or anything like that.


00:23:15.040 --> 00:23:16.320
- Exactly, exactly.


00:23:16.320 --> 00:23:18.000
That's what we did as well.


00:23:18.000 --> 00:23:19.480
I do wanna point out one final thing.


00:23:19.480 --> 00:23:21.720
I do find it kind of ironic.


00:23:21.720 --> 00:23:23.880
I don't know really what you do about this in life.


00:23:23.880 --> 00:23:27.080
So this article is on PCMag, which it's a nice,


00:23:27.080 --> 00:23:29.560
it's a well-written article by Michael Kan.


00:23:29.560 --> 00:23:33.080
If I go search that in Kaggy and I pull it up,


00:23:33.080 --> 00:23:34.960
Kaggy has like a privacy report


00:23:34.960 --> 00:23:37.120
on the right-hand side of all these things.


00:23:37.120 --> 00:23:41.400
19 trackers and blockers, including advertising,


00:23:41.400 --> 00:23:43.420
Google email aggressive, fingerprinting,


00:23:43.420 --> 00:23:46.340
email invasive, fingerprinting on and on and on.


00:23:46.340 --> 00:23:47.980
It's like, well, okay.


00:23:47.980 --> 00:23:50.500
As you go to learn about how this is not ideal,


00:23:50.500 --> 00:23:55.500
you only get 19 trackers put on you.


00:23:55.500 --> 00:23:57.020
- Yeah, yeah.


00:23:57.020 --> 00:23:59.900
Okay.


00:23:59.900 --> 00:24:03.740
- Maybe one final thing here is Daniel points out


00:24:03.740 --> 00:24:05.660
PyHole DNS ad blocker has a feature


00:24:05.660 --> 00:24:08.500
that lets you disable ad blocking for a period of time.


00:24:08.500 --> 00:24:09.340
Interesting.


00:24:09.340 --> 00:24:10.860
And so the next DNS thing is like


00:24:12.100 --> 00:24:14.500
Piehole as a service, basically.


00:24:14.500 --> 00:24:16.660
So they're similar.


00:24:16.660 --> 00:24:19.060
Interesting, okay.


00:24:19.060 --> 00:24:23.900
- All right, well, on a slightly brighter note, maybe,


00:24:23.900 --> 00:24:27.060
let's talk about pytest.


00:24:27.060 --> 00:24:27.900
- Yes.


00:24:27.900 --> 00:24:31.740
- So Frank Wiles wrote an article for Rebsys


00:24:31.740 --> 00:24:36.200
titled "Pro Tip, pytest Fixtures Are Magic."


00:24:36.200 --> 00:24:39.100
They're not really magic, but they kind of look like magic,


00:24:39.100 --> 00:24:40.340
and they seem like magic.


00:24:40.340 --> 00:24:45.340
- I just wanted to highlight this because it was a pretty,


00:24:45.340 --> 00:24:50.560
fixtures are the part of pytest that is the brain shift.


00:24:50.560 --> 00:24:52.160
So when you get into pytest,


00:24:52.160 --> 00:24:55.840
understanding fixtures is the big thing


00:24:55.840 --> 00:25:00.660
that is difficult to get your head around.


00:25:00.660 --> 00:25:04.080
So that's why I really appreciate the article


00:25:04.080 --> 00:25:05.520
kind of talking through that.


00:25:05.520 --> 00:25:09.280
And fixtures, if anybody is unfamiliar,


00:25:09.280 --> 00:25:11.720
you can kind of think of them like set up and tear down.


00:25:11.720 --> 00:25:14.660
They run before and after your test.


00:25:14.660 --> 00:25:18.760
And well, parts of it run after, if you set it up,


00:25:18.760 --> 00:25:20.440
if you need to.


00:25:20.440 --> 00:25:24.140
The, now RevSys does a lot of work with Django.


00:25:24.140 --> 00:25:28.400
So there's, this is articles talking about the idea of like


00:25:28.400 --> 00:25:32.680
you to test your, like, let's say you have a,


00:25:32.680 --> 00:25:36.740
it has a like a hypothetical scenario that you've got


00:25:36.740 --> 00:25:39.820
a feature where like you're testing a workflow


00:25:39.820 --> 00:25:42.460
where you have, you want your,


00:25:42.460 --> 00:25:45.980
you gotta have different users,


00:25:45.980 --> 00:25:47.420
you need to create an owner,


00:25:47.420 --> 00:25:50.300
because you want to see if you can filter swear words


00:25:50.300 --> 00:25:51.460
out of comments.


00:25:51.460 --> 00:25:56.140
So in like GitHub or something.


00:25:56.140 --> 00:25:57.980
So you'd have to create an organization


00:25:57.980 --> 00:26:00.620
and then create a user and then have a public repo


00:26:00.620 --> 00:26:03.700
and a private repo to be able to test your functionality.


00:26:03.700 --> 00:26:05.020
And there's a lot of setup


00:26:05.020 --> 00:26:06.900
And there's often a lot of setup needed


00:26:06.900 --> 00:26:09.420
for a lot of software projects.


00:26:09.420 --> 00:26:11.260
So fixtures are helpful.


00:26:11.260 --> 00:26:14.560
So that's the setup he gets through.


00:26:14.560 --> 00:26:17.900
Goes through just talking basically about how to use them.


00:26:17.900 --> 00:26:19.260
Fixtures are just a function


00:26:19.260 --> 00:26:22.060
that are decorated with pytest.fixture.


00:26:22.060 --> 00:26:23.820
And you use it by, in the test,


00:26:23.820 --> 00:26:26.940
you just call the, you put the function name,


00:26:26.940 --> 00:26:29.460
the name of the fixture in the parameter list,


00:26:29.460 --> 00:26:31.740
and it magically just happens for you.


00:26:31.740 --> 00:26:33.140
And that's the magic part.


00:26:34.860 --> 00:26:37.400
The, one of the things I really like is it goes,


00:26:37.400 --> 00:26:40.080
kind of goes into depth of even more than that.


00:26:40.080 --> 00:26:40.920
They're kind of cool.


00:26:40.920 --> 00:26:42.060
You can compose them.


00:26:42.060 --> 00:26:44.080
Fixtures can use other fixtures


00:26:44.080 --> 00:26:45.660
and you can use more than one.


00:26:45.660 --> 00:26:47.260
It's kind of neat.


00:26:47.260 --> 00:26:52.260
Goes through talking about also that they can return things.


00:26:52.260 --> 00:26:57.220
So they can return either just simple data


00:26:57.220 --> 00:26:59.140
like strings or numbers,


00:26:59.140 --> 00:27:02.380
but they can also return dictionaries and objects


00:27:02.380 --> 00:27:04.040
and instantiated things.


00:27:04.040 --> 00:27:07.820
and they can even return a function


00:27:07.820 --> 00:27:09.280
that can create things for you.


00:27:09.280 --> 00:27:13.480
So, that was kind of a neat example.


00:27:13.480 --> 00:27:16.920
He returns, he has a fixture called makeUser


00:27:16.920 --> 00:27:21.920
that returns a new user created,


00:27:21.920 --> 00:27:26.360
it returns a function that you can call to create a user


00:27:26.360 --> 00:27:27.840
with parameters and stuff.


00:27:27.840 --> 00:27:30.160
So that's kind of a neat example.


00:27:30.160 --> 00:27:33.040
- It's like a fixture factory, factory fixture.


00:27:33.040 --> 00:27:37.200
- Yeah, like an object factory returned as a fixture thing.


00:27:37.200 --> 00:27:38.040
So, yeah.


00:27:38.040 --> 00:27:38.880
- Yeah.


00:27:38.880 --> 00:27:42.840
- And another example with like a make admin fixture


00:27:42.840 --> 00:27:47.120
that returns a function that can create an admin user.


00:27:47.120 --> 00:27:48.880
So that's kind of neat.


00:27:48.880 --> 00:27:51.320
One of the things that was new that I hadn't seen,


00:27:51.320 --> 00:27:53.680
which is kind of a cool idea,


00:27:53.680 --> 00:27:55.840
is how to organize your fixtures.


00:27:55.840 --> 00:27:58.360
So he talks about putting,


00:27:59.800 --> 00:28:03.100
He's got like, let's say a big Django project,


00:28:03.100 --> 00:28:06.860
and each of the different Django applications


00:28:06.860 --> 00:28:11.420
within the project have their own tests.


00:28:11.420 --> 00:28:13.900
And within those, there's a fixtures file.


00:28:13.900 --> 00:28:16.060
You can't use that directly.


00:28:16.060 --> 00:28:18.780
This is a trick that they're doing


00:28:18.780 --> 00:28:22.220
is sticking the fixtures in a file called fixtures.


00:28:22.220 --> 00:28:23.980
And then at the top level,


00:28:23.980 --> 00:28:27.260
having a conf test file that imports those,


00:28:27.260 --> 00:28:29.020
just imports everything out of it.


00:28:29.020 --> 00:28:31.660
And at first I was like, why would you do that?


00:28:31.660 --> 00:28:33.860
Why don't you just put Comptest files there?


00:28:33.860 --> 00:28:37.860
And whether you think he's sane or not,


00:28:37.860 --> 00:28:41.140
the reason is so that you can keep the code local


00:28:41.140 --> 00:28:42.940
to the application that's using it.


00:28:42.940 --> 00:28:48.540
Maybe it's even a sub project


00:28:48.540 --> 00:28:51.180
or a sub Git repo or something, who knows.


00:28:51.180 --> 00:28:54.780
But at the top level, you can have access to it.


00:28:54.780 --> 00:28:57.580
So any test can access any fixture


00:28:57.580 --> 00:28:59.820
within any other application.


00:28:59.820 --> 00:29:01.580
That may or may not be a good thing for you,


00:29:01.580 --> 00:29:04.240
but it's kind of a cool idea.


00:29:04.240 --> 00:29:10.460
And then he talks about how plugins can have fixtures also.


00:29:10.460 --> 00:29:14.300
There's the excellent pytest Django plugin


00:29:14.300 --> 00:29:18.180
that has things like DB, which marks your tests,


00:29:18.180 --> 00:29:20.900
creates the database for you before you start,


00:29:20.900 --> 00:29:23.980
and a client that, you know, it makes it,


00:29:23.980 --> 00:29:27.180
I'm learning Django right now and I'm using pytest Django


00:29:27.180 --> 00:29:28.700
and it's pretty awesome.


00:29:28.700 --> 00:29:32.500
And then RevSys itself has an extension


00:29:32.500 --> 00:29:36.820
called Django Test Plus, which has a thing called TP


00:29:36.820 --> 00:29:41.820
and that has some extra cool features


00:29:41.820 --> 00:29:45.980
that aren't out of the box with pytest Django.


00:29:45.980 --> 00:29:47.700
So that's kind of fun.


00:29:47.700 --> 00:29:48.740
The last bit--


00:29:48.740 --> 00:29:51.500
- And even get requests like within the app.


00:29:51.500 --> 00:29:52.500
- Yeah.


00:29:52.500 --> 00:29:54.100
- Yeah, and test for the response.


00:29:54.100 --> 00:29:57.060
Yeah, a lot of, kind of like what you would do with requests


00:29:57.060 --> 00:30:00.140
but inside without actually going through the network.


00:30:00.140 --> 00:30:00.980
- Right.


00:30:00.980 --> 00:30:06.460
And it's very similar to the unit test framework


00:30:06.460 --> 00:30:09.920
around the Django, built into Django also,


00:30:09.920 --> 00:30:13.300
but it's, and I'm glad that the Django,


00:30:13.300 --> 00:30:16.840
Django Test Plus and the Django pytest plugin


00:30:16.840 --> 00:30:20.380
are pretty consistent with the unit test.


00:30:20.380 --> 00:30:23.220
So if you wanna switch back and forth, it's not that hard.


00:30:24.100 --> 00:30:27.100
And as a reminder, you can run unit test functions,


00:30:27.100 --> 00:30:29.680
you can from pytest also, but why would you?


00:30:29.680 --> 00:30:32.500
The last bit I wanna highlight,


00:30:32.500 --> 00:30:36.280
and I have reached out to Frank,


00:30:36.280 --> 00:30:38.460
but haven't heard anything back.


00:30:38.460 --> 00:30:41.460
He has an example on the auto use, it's just wrong.


00:30:41.460 --> 00:30:43.460
So don't take his word for it.


00:30:43.460 --> 00:30:46.060
The auto use is cool.


00:30:46.060 --> 00:30:48.420
Auto use makes fixtures just run automatically


00:30:48.420 --> 00:30:51.740
before your tests without having to call them out.


00:30:51.740 --> 00:30:55.620
But it's really hard to come up with a good toy example


00:30:55.620 --> 00:30:57.660
for why you'd use it, because there aren't very many


00:30:57.660 --> 00:31:00.020
good examples for why you would use it.


00:31:00.020 --> 00:31:03.100
It seems magical at first, and then it suddenly,


00:31:03.100 --> 00:31:04.100
it doesn't take long to go,


00:31:04.100 --> 00:31:06.280
wow, I really should be careful with that,


00:31:06.280 --> 00:31:08.040
because you should be careful with it.


00:31:08.040 --> 00:31:11.860
This example shows that a global value being set


00:31:11.860 --> 00:31:13.580
with a fixture, and that's just not true.


00:31:13.580 --> 00:31:14.420
It doesn't do that.


00:31:14.420 --> 00:31:16.420
If you wanna get the object,


00:31:16.420 --> 00:31:18.860
the return value of a fixture,


00:31:18.860 --> 00:31:21.420
you have to name the fixture within the test.


00:31:21.420 --> 00:31:24.100
So that's about it really.


00:31:24.100 --> 00:31:27.940
It's a pretty fun introduction to fixtures.


00:31:27.940 --> 00:31:30.500
- Yeah, they could fix it up by just having a variable


00:31:30.500 --> 00:31:32.240
in the module and just saying global


00:31:32.240 --> 00:31:33.380
and then set its value, right?


00:31:33.380 --> 00:31:35.720
Like you would within the other Python function.


00:31:35.720 --> 00:31:36.700
- Yeah.


00:31:36.700 --> 00:31:38.660
- But if you wanted to.


00:31:38.660 --> 00:31:41.180
- The other thing I wanted to point out is he says,


00:31:41.180 --> 00:31:43.380
tempter is a really cool built-in fixture


00:31:43.380 --> 00:31:46.140
and it is, but it's kind of deprecated.


00:31:46.140 --> 00:31:49.860
Temp path is what we try to get people to use now


00:31:49.860 --> 00:31:52.260
because it uses Pathlib and Pathlib is awesome.


00:31:52.260 --> 00:31:58.700
- Indeed, Tony Sherman has been on the same journey


00:31:58.700 --> 00:32:01.620
and says, "It seems so great, auto use."


00:32:01.620 --> 00:32:03.720
At the beginning, things blow up quickly.


00:32:03.720 --> 00:32:08.020
And then Brian, can you open up a website for me?


00:32:08.020 --> 00:32:09.180
- Sure. - Before we move on


00:32:09.180 --> 00:32:13.140
as a piece of followup for plausible.io.


00:32:13.140 --> 00:32:18.140
So Pat Decker, former co-guest host about a year ago,


00:32:19.220 --> 00:32:22.100
It says plausible is the open source option


00:32:22.100 --> 00:32:25.780
alternative to Google Analytics, which is GDPR compliant


00:32:25.780 --> 00:32:27.420
and doesn't set third party cookies.


00:32:27.420 --> 00:32:30.740
If you scroll down, you can see that somewhere in there.


00:32:30.740 --> 00:32:31.580
- Cool.


00:32:31.580 --> 00:32:32.700
- Why did I ask you to open it?


00:32:32.700 --> 00:32:35.500
Why didn't I just open it on my share?


00:32:35.500 --> 00:32:38.980
Because my Next DNS blocks it like it does everything else


00:32:38.980 --> 00:32:42.420
until I like clear the DNS out of my web browser,


00:32:42.420 --> 00:32:43.240
which is good.


00:32:43.240 --> 00:32:44.080
Oh, it finally came back.


00:32:44.080 --> 00:32:46.280
It took a while, even though I allow us to did


00:32:46.280 --> 00:32:47.120
so I could pull it up.


00:32:47.120 --> 00:32:49.920
but yeah, it looks pretty interesting.


00:32:49.920 --> 00:32:50.920
I had not heard about that.


00:32:50.920 --> 00:32:52.540
So thank you, Pat, for that shout out.


00:32:52.540 --> 00:32:54.640
That certainly seems like a,


00:32:54.640 --> 00:32:55.560
I know nothing about it,


00:32:55.560 --> 00:32:57.240
but what I've already learned is it looks like


00:32:57.240 --> 00:33:02.240
a mega improvement over the other types of retargeting,


00:33:02.240 --> 00:33:07.160
feeding, third-party cookie dropping analytic systems.


00:33:07.160 --> 00:33:08.200
So pretty cool.


00:33:08.200 --> 00:33:10.320
- Thanks, cool.


00:33:10.320 --> 00:33:11.160
- Yeah.


00:33:11.160 --> 00:33:14.080
I have no extras, believe it or not.


00:33:14.080 --> 00:33:14.920
- You have no extras.


00:33:14.920 --> 00:33:15.840
- So it's all you.


00:33:15.840 --> 00:33:18.520
- Okay, well, I got a couple of extras.


00:33:18.520 --> 00:33:23.520
I ran across this fun tool or fun contest,


00:33:23.520 --> 00:33:30.160
the international obfuscated Python code competition.


00:33:30.160 --> 00:33:35.080
I know that those existed for C and Pearl,


00:33:35.080 --> 00:33:37.720
but I didn't know that we had a Python one.


00:33:37.720 --> 00:33:42.320
Submissions are due tentatively by August 30th.


00:33:42.320 --> 00:33:44.780
And I have nothing, no idea about what this,


00:33:44.780 --> 00:33:49.220
who's running this, but it looks fun.


00:33:49.220 --> 00:33:51.100
Oh, probably the judges.


00:33:51.100 --> 00:33:54.140
So Julius, Kevin, Shane, and Anon.


00:33:54.140 --> 00:33:55.580
- Anon will judge you.


00:33:55.580 --> 00:33:56.420
- Yeah.


00:33:56.420 --> 00:34:00.740
But I'm just curious if,


00:34:00.740 --> 00:34:02.580
I know that it's possible to write out


00:34:02.580 --> 00:34:04.080
like terrible Python code,


00:34:04.080 --> 00:34:06.620
but I'm looking forward to seeing the results.


00:34:06.620 --> 00:34:11.780
Next up, there's a quick,


00:34:11.780 --> 00:34:13.260
we talk about a lot of things


00:34:13.260 --> 00:34:16.080
that are using Rust to speed up parts of Python.


00:34:16.080 --> 00:34:17.480
So there's a decent article


00:34:17.480 --> 00:34:20.840
called "Porting Python Objects to Rust."


00:34:20.840 --> 00:34:21.680
I think it's decent.


00:34:21.680 --> 00:34:22.500
I haven't walked through it


00:34:22.500 --> 00:34:24.160
to see if you can actually do this,


00:34:24.160 --> 00:34:27.320
but the recommendation here is


00:34:27.320 --> 00:34:29.840
if you've got a Python project


00:34:29.840 --> 00:34:33.800
that you'd like to replace all or part of it with Rust,


00:34:33.800 --> 00:34:38.220
go slow and port pieces of it at a time, iterative porting.


00:34:38.220 --> 00:34:42.280
So there's a lot of things that I've thought about


00:34:42.280 --> 00:34:44.980
or cool Python tools, that'd be kind of neat


00:34:44.980 --> 00:34:47.280
if like part of it was speeded up with,


00:34:47.280 --> 00:34:50.420
sped up with Rust and become, maybe.


00:34:50.420 --> 00:34:52.000
- Step one, learn Rust.


00:34:52.000 --> 00:34:52.840
- Step two.


00:34:52.840 --> 00:34:57.360
Or step one, have a podcast where you convince other people


00:34:57.360 --> 00:34:58.480
to write it in Rust.


00:34:58.480 --> 00:35:00.520
- That's right.


00:35:00.520 --> 00:35:02.560
Also an option.


00:35:02.560 --> 00:35:04.760
- Yeah, anyway, that's all I got.


00:35:04.760 --> 00:35:06.340
- All right, cool, those are good.


00:35:06.340 --> 00:35:08.940
Final one here is Henry points out


00:35:08.940 --> 00:35:12.120
that scientific Python uses plausible on their website,


00:35:12.120 --> 00:35:12.960
presumably.


00:35:12.960 --> 00:35:14.400
- Ah, okay.


00:35:14.400 --> 00:35:16.460
- Okay, ready for a joke?


00:35:16.460 --> 00:35:18.640
- Well, almost.


00:35:18.640 --> 00:35:22.240
I would like to encourage people to submit questions


00:35:22.240 --> 00:35:24.560
to our Ask Me Anything.


00:35:24.560 --> 00:35:28.680
Let's see, do we have a link for that?


00:35:28.680 --> 00:35:29.960
- We do have a link for that.


00:35:29.960 --> 00:35:34.640
And the link is, which, yeah, I was gonna mention that


00:35:34.640 --> 00:35:36.640
and then somehow didn't, didn't I?


00:35:36.640 --> 00:35:40.160
It's pythonbytes.fm/ama2023.


00:35:40.160 --> 00:35:41.960
I'll put a link in the show notes.


00:35:41.960 --> 00:35:43.320
- Okay, link will be in the show notes


00:35:43.320 --> 00:35:45.680
and it'll look something like this.


00:35:45.680 --> 00:35:48.520
- Indeed, and we've got a bunch of great comments


00:35:48.520 --> 00:35:50.600
and thoughts and very kind messages in there as well.


00:35:50.600 --> 00:35:52.520
So much appreciated.


00:35:52.520 --> 00:35:54.200
What we're gonna do,


00:35:54.200 --> 00:35:57.720
our ask me, ask us anything


00:35:57.720 --> 00:36:01.040
in I think July 11th, if we can make it work then.


00:36:01.040 --> 00:36:02.760
We'll confirm as we get closer,


00:36:02.760 --> 00:36:05.560
but that'd be a fun one for a lot of people to attend live


00:36:05.560 --> 00:36:07.760
'cause they could also ask us stuff.


00:36:07.760 --> 00:36:09.920
- Yeah, it'll be good.


00:36:09.920 --> 00:36:11.920
- Sure will, all right, ready for a joke now?


00:36:11.920 --> 00:36:12.760
- Yes.


00:36:12.760 --> 00:36:17.200
- So Stack Overflow is pretty awesome, right Brian?


00:36:17.200 --> 00:36:21.120
I mean, it's a huge resource


00:36:21.120 --> 00:36:23.220
if you wanna find something, right?


00:36:23.220 --> 00:36:25.240
You got some kind of problem,


00:36:25.240 --> 00:36:26.980
especially if it's kind of outside the realm


00:36:26.980 --> 00:36:28.200
of your usual expertise.


00:36:28.200 --> 00:36:30.640
You're like, ah, gosh, I gotta work on,


00:36:30.640 --> 00:36:32.600
I gotta work on this JavaScript thing.


00:36:32.600 --> 00:36:33.420
I don't know how it works.


00:36:33.420 --> 00:36:35.480
If I just Google it, maybe someone else has had the problem


00:36:35.480 --> 00:36:37.880
or you know, something's not working right, yeah?


00:36:37.880 --> 00:36:40.440
But as a social network,


00:36:40.440 --> 00:36:43.240
It can be a bit of a rough and tumble place.


00:36:43.240 --> 00:36:44.080
Come in here.


00:36:44.080 --> 00:36:51.960
And it has this picture of this guy wearing a t-shirt


00:36:51.960 --> 00:36:56.960
offering like a bouquet of lavender flowers or something.


00:36:56.960 --> 00:37:00.760
He just picked up off of the, you know,


00:37:00.760 --> 00:37:02.920
like along the side during some protests.


00:37:02.920 --> 00:37:07.920
And there's these like cops or military folks in like armor.


00:37:07.920 --> 00:37:09.200
And he tries to offer it to one of them.


00:37:09.200 --> 00:37:12.840
that says me asking a question on Stack Overflow.


00:37:12.840 --> 00:37:15.560
And then immediately they swarm him and like,


00:37:15.560 --> 00:37:18.200
you know, put him in a neck lock and stuff


00:37:18.200 --> 00:37:19.760
and says, Mark, just duplicate.


00:37:19.760 --> 00:37:22.960
It's always Mark, just duplicate.


00:37:22.960 --> 00:37:25.760
- Yeah, and that's the easy one.


00:37:25.760 --> 00:37:30.000
It's can be a brutal place.


00:37:30.000 --> 00:37:31.280
- Yes, it can.


00:37:31.280 --> 00:37:33.220
I find it better as read only.


00:37:33.220 --> 00:37:36.960
- Yeah, yeah.


00:37:36.960 --> 00:37:38.440
But it is one of those handy places


00:37:38.440 --> 00:37:42.240
that happens to have, like when you just take


00:37:42.240 --> 00:37:45.680
your actual error message and Google it,


00:37:45.680 --> 00:37:48.120
it often lands in Stack Overflow somewhere.


00:37:48.120 --> 00:37:48.960
- Yes, it does.


00:37:48.960 --> 00:37:53.960
It is often helpful if you're willing to take


00:37:53.960 --> 00:37:55.720
a little abuse if you're gonna ask for a patch.


00:37:55.720 --> 00:37:57.320
- If you wanna get a headlock, yeah.


00:37:57.320 --> 00:37:58.160
- Yeah, exactly.


00:37:58.160 --> 00:38:03.080
- Nice, I also heard that like recently


00:38:03.080 --> 00:38:05.480
there's been a bunch of Stack Overflow


00:38:06.440 --> 00:38:08.360
moderators and stuff that--


00:38:08.360 --> 00:38:09.640
- Reddit.


00:38:09.640 --> 00:38:10.480
- Oh, was it Reddit?


00:38:10.480 --> 00:38:11.840
- A Reddit blackout.


00:38:11.840 --> 00:38:12.680
- Yeah.


00:38:12.680 --> 00:38:16.680
- So the CEO, gosh, I forgot the guy's name,


00:38:16.680 --> 00:38:21.080
the CEO of Reddit decided that they were gonna monetize


00:38:21.080 --> 00:38:26.320
the API of Reddit because, like Twitter did a little bit,


00:38:26.320 --> 00:38:29.400
Twitter wanted to kill off the third-party clients


00:38:29.400 --> 00:38:31.760
just to make them go away so they had more control, right?


00:38:31.760 --> 00:38:33.880
That was sort of one of the things that happened


00:38:33.880 --> 00:38:35.660
when Musk took over.


00:38:35.660 --> 00:38:37.300
So they didn't quite want to do that.


00:38:37.300 --> 00:38:39.020
They wanted to charge money for the API


00:38:39.020 --> 00:38:42.140
because they're not showing ads for the mobile apps.


00:38:42.140 --> 00:38:44.780
And Apollo was the mobile app that was most,


00:38:44.780 --> 00:38:48.120
is, I guess, maybe was more accurate, was most popular.


00:38:48.120 --> 00:38:51.320
And in order for that app to keep running,


00:38:51.320 --> 00:38:53.780
I think they have to pay $20 million a year


00:38:53.780 --> 00:38:56.460
in API call fees.


00:38:56.460 --> 00:38:58.480
So they're like, well, we don't make that much money.


00:38:58.480 --> 00:38:59.900
We're shutting down.


00:38:59.900 --> 00:39:01.640
And so they're effectively killed off


00:39:01.640 --> 00:39:03.260
all the third-party clients,


00:39:03.260 --> 00:39:05.940
which set off a protest.


00:39:05.940 --> 00:39:09.060
And the protest manifested in that people


00:39:09.060 --> 00:39:14.060
who are moderating popular Reddit areas, sub-Reddits,


00:39:14.060 --> 00:39:18.780
mark them all as private to say,


00:39:18.780 --> 00:39:22.980
we're taking our contributions we put into Reddit off


00:39:22.980 --> 00:39:26.140
as a way of protesting what you're doing to the community


00:39:26.140 --> 00:39:29.980
to close it down and extract money from it basically.


00:39:29.980 --> 00:39:32.660
- Yeah, but also, I mean, also Stack Overflow.


00:39:32.660 --> 00:39:36.420
So Stack Overflow is, oh, six months ago,


00:39:36.420 --> 00:39:42.620
is like blocked because of people like,


00:39:42.620 --> 00:39:44.980
obviously, I think everybody on our,


00:39:44.980 --> 00:39:47.460
that's listening here knows what Stack Overflow is,


00:39:47.460 --> 00:39:49.300
but people are taking the questions


00:39:49.300 --> 00:39:52.260
and just going and pasting them in JATGBT,


00:39:52.260 --> 00:39:53.780
getting the answer and putting them back


00:39:53.780 --> 00:39:56.100
into Stack Overflow, that's lame.


00:39:56.100 --> 00:39:58.940
(laughing)


00:39:58.940 --> 00:39:59.900
What even?


00:39:59.900 --> 00:40:02.020
So apparently that's blocked.


00:40:02.020 --> 00:40:05.540
So yeah, cool.


00:40:05.540 --> 00:40:07.740
Well, I sure had fun talking with you today


00:40:07.740 --> 00:40:09.060
and talking with everybody


00:40:09.060 --> 00:40:13.700
and just excited about the future


00:40:13.700 --> 00:40:16.340
of not using AI for my software.


00:40:16.340 --> 00:40:17.860
So thanks Michael.


00:40:17.860 --> 00:40:19.580
- I have to go back to writing to myself as well.


00:40:19.580 --> 00:40:21.060
Yeah, thanks as always, Brian.


00:40:21.060 --> 00:40:21.900
- Bye.


00:40:21.900 --> 00:40:22.720
- Bye.


00:40:22.720 --> 00:40:24.800
(laughs)

