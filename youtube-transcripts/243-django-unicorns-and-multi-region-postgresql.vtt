WEBVTT

00:00:00.000 --> 00:00:08.520
Hello, welcome everybody on the stream. Thanks for showing up. It's good to see everybody.


00:00:08.520 --> 00:00:10.800
We've got Simon today and I'm excited about that.


00:00:10.800 --> 00:00:11.800
Hey, Simon.


00:00:11.800 --> 00:00:14.120
Hey, good to be here.


00:00:14.120 --> 00:00:20.280
Let's jump into the podcast. So hello and welcome to Python Bytes, where we deliver


00:00:20.280 --> 00:00:26.880
Python news and headlines directly to your earbuds. This is episode 243, recorded July


00:00:26.880 --> 00:00:31.760
21st 2021 and I am brian ocken and I'm michael kennedy


00:00:31.760 --> 00:00:34.640
And i'm simon willison


00:00:34.640 --> 00:00:37.600
Welcome simon. Thanks for agreeing to show up today


00:00:37.600 --> 00:00:44.640
No problem at all. I've been looking forward to this. if anybody doesn't know who you are, can we do it like quick? who's simon?


00:00:44.640 --> 00:00:50.000
Sure. so yeah, my name is simon willison. I've been doing python bits and pieces for


00:00:51.040 --> 00:00:56.960
around about 20 years now. So I'm a co-creator of the Django web framework from many, many years ago.


00:00:56.960 --> 00:01:03.440
I think Django is definitely celebrating its 15th birthday now. But more recently I've been working on a set of open source tools


00:01:03.440 --> 00:01:11.520
around this project I have called Dataset, which is a web application for exploring a relational database, a SQLite database,


00:01:11.520 --> 00:01:17.120
but it also has tools for publishing those databases online, building those databases out of lots of different sources of data.


00:01:17.120 --> 00:01:23.920
I'm trying to bootstrap an entire ecosystem of data and analytics tooling around SQLite because it turns out


00:01:23.920 --> 00:01:28.080
Everyone in the world has SQLite even though that even though they don't necessarily know that they have it


00:01:28.080 --> 00:01:31.920
And there's some really cool stuff that you can do with it. Yeah, it's a really cool project


00:01:31.920 --> 00:01:35.440
Yeah, it is if you wanted to create your own personal search engine


00:01:35.440 --> 00:01:40.960
That would let you just go and say search your gmail your twitter your instagram and your file system


00:01:40.960 --> 00:01:43.840
All at once. Yeah, that's pretty much it, right?


00:01:44.400 --> 00:01:50.480
That's part of the tooling. Yeah, there's a whole side of it, which is which i've called dog sheep for ridiculous reasons


00:01:50.480 --> 00:01:56.160
But the dog sheep project is about personal analytics. It's about getting your personal tweets and


00:01:56.160 --> 00:01:59.920
Messages and all of the personal data about yourself into one place


00:01:59.920 --> 00:02:05.440
So you've got essentially a little mini data warehouse on your laptop that you can use to query aspects of your own life


00:02:05.440 --> 00:02:12.000
And that's been a really fun way of driving features in the software, which can then be applied to like company databases and so forth


00:02:12.000 --> 00:02:13.200
as well


00:02:13.200 --> 00:02:15.200
Yeah, super cool.


00:02:15.200 --> 00:02:20.080
Well, if I didn't want to do sequel light, I might want to use manga. What do you think?


00:02:20.080 --> 00:02:26.640
You may want to and so there's some big news around manga db manga db5 is out


00:02:26.640 --> 00:02:30.720
Which you know i'm all about manga db, which makes me super excited


00:02:30.720 --> 00:02:35.760
Probably won't switch right right away because I don't actually need the features that are there


00:02:35.760 --> 00:02:39.280
But i'm super excited to see things going strong. So


00:02:40.400 --> 00:02:42.320
some of the things that are relevant.


00:02:42.320 --> 00:02:45.080
And I think they're really relevant to Python people,


00:02:45.080 --> 00:02:47.400
especially the data science side.


00:02:47.400 --> 00:02:50.480
So basically there's two important things.


00:02:50.480 --> 00:02:54.180
One has to do with working with time series,


00:02:54.180 --> 00:02:58.060
and the other has to do with stability of the app


00:02:58.060 --> 00:03:00.400
that you don't want to keep changing


00:03:00.400 --> 00:03:03.120
so that you can upgrade your database, right?


00:03:03.120 --> 00:03:05.420
Like if the database API slightly changes,


00:03:05.420 --> 00:03:07.560
you don't wanna have to deal with those incompatibilities


00:03:07.560 --> 00:03:09.880
until you're ready to take advantage of the benefits


00:03:09.880 --> 00:03:11.880
of making those changes.


00:03:11.880 --> 00:03:14.800
So one of the things that comes with is in the database


00:03:14.800 --> 00:03:19.320
that are native time series, schemas and collection types.


00:03:19.320 --> 00:03:20.360
- That's incredible.


00:03:20.360 --> 00:03:22.000
- Yeah, so you can do really interesting things


00:03:22.000 --> 00:03:26.720
like a moving average as a query across like data


00:03:26.720 --> 00:03:29.320
and stored data in a format that's meant to make


00:03:29.320 --> 00:03:31.360
that incredibly fast and low latency.


00:03:31.360 --> 00:03:35.280
But you can also do like, I would like the numerical


00:03:35.280 --> 00:03:39.520
derivative over time as a moving average,


00:03:39.520 --> 00:03:43.060
as a query or the integral of this collection.


00:03:43.060 --> 00:03:46.580
So you can do like math as part of your query


00:03:46.580 --> 00:03:48.960
and get it to calculate those things


00:03:48.960 --> 00:03:50.320
in really interesting ways.


00:03:50.320 --> 00:03:54.260
So the time series has things like clustered indexes


00:03:54.260 --> 00:03:57.220
and window functions and all sorts of interesting things.


00:03:57.220 --> 00:03:58.280
So that's one.


00:03:58.280 --> 00:04:02.500
It automatically optimizes your schema


00:04:02.500 --> 00:04:04.940
for high-efficient storage, which is pretty cool.


00:04:04.940 --> 00:04:07.260
That's I think independent of the time series,


00:04:07.260 --> 00:04:08.820
but not a hundred percent sure.


00:04:08.820 --> 00:04:13.820
It has the other big thing is the versioned API for future proof apps.


00:04:13.820 --> 00:04:17.820
So suppose you build against version, I guess five is the one that has it.


00:04:17.820 --> 00:04:19.820
So you build against version five of MongoDB.


00:04:19.820 --> 00:04:22.820
And then eventually some point like version seven comes along and like,


00:04:22.820 --> 00:04:25.820
oh, you can do this new way querying, but it's going to break some stuff.


00:04:25.820 --> 00:04:27.820
So if you want to use it, you got to fix your app.


00:04:27.820 --> 00:04:33.820
You can just say, I want the database to look like version five forever.


00:04:33.820 --> 00:04:35.820
And no matter what version is in production,


00:04:35.820 --> 00:04:38.660
is in production, it'll behave the right way


00:04:38.660 --> 00:04:42.620
according to what you said you wanted it to behave right.


00:04:42.620 --> 00:04:44.700
So you could say, I want version seven to be like five


00:04:44.700 --> 00:04:46.600
for me, but it can be version seven for someone else,


00:04:46.600 --> 00:04:47.740
that kind of thing.


00:04:47.740 --> 00:04:48.580
- Right.


00:04:48.580 --> 00:04:50.540
- Yeah, the other thing, the way that you talk to it,


00:04:50.540 --> 00:04:52.840
the way that you interact with it is through


00:04:52.840 --> 00:04:56.580
just a terminal app, you fired up or a command prompt app


00:04:56.580 --> 00:04:57.420
and you talk to it.


00:04:57.420 --> 00:04:59.300
And traditionally this thing has been gross.


00:04:59.300 --> 00:05:01.780
It's been like, it's fine,


00:05:01.780 --> 00:05:04.260
but it has zero syntax highlighting.


00:05:04.260 --> 00:05:07.900
it has zero autocomplete, those types of things, right?


00:05:07.900 --> 00:05:09.900
So they're introducing a new shell.


00:05:09.900 --> 00:05:13.940
So traditionally, you would have typed Mongo, Enter, and connected.


00:05:13.940 --> 00:05:15.700
Now you type Mongo SH,


00:05:15.700 --> 00:05:18.100
because the old one is still there for compatibility reasons.


00:05:18.100 --> 00:05:21.340
But that one now has syntax highlighting,


00:05:21.340 --> 00:05:26.020
better error checking, pretty printing, autocomplete, things like that.


00:05:26.020 --> 00:05:27.940
So if you're going to do stuff on the shell,


00:05:27.940 --> 00:05:30.180
then you really should just run the new one.


00:05:30.180 --> 00:05:33.180
That's pretty cool. I'm going to go with Mongosh as the...


00:05:33.180 --> 00:05:36.740
Oh, my gosh, oh, my gosh, what are you doing?


00:05:36.740 --> 00:05:38.180
Yeah, right on the shelf, the new one.


00:05:38.180 --> 00:05:39.180
I know.


00:05:39.180 --> 00:05:40.180
That's pretty awesome.


00:05:40.180 --> 00:05:46.980
And then also they're talking about having serverless instances.


00:05:46.980 --> 00:05:49.580
So like Lambda type functions,


00:05:49.580 --> 00:05:52.580
where you don't actually have to manage the database or things like that.


00:05:52.580 --> 00:05:54.080
So I didn't know a whole lot about it.


00:05:54.080 --> 00:05:57.680
You can also watch the keynote and actually the whole conference,


00:05:57.680 --> 00:05:59.880
but the keynote is probably most relevant here.


00:05:59.880 --> 00:06:05.480
Turns out that it's for a public billion dollar company or whatever they're worth.


00:06:05.480 --> 00:06:13.000
It's incredibly amateurish and more like a talent fair of a high school or something like that.


00:06:13.000 --> 00:06:14.760
But whatever, you'll still learn.


00:06:14.760 --> 00:06:16.040
I mean, you'll see.


00:06:16.040 --> 00:06:17.400
It's super--


00:06:17.400 --> 00:06:19.160
I have to check it out now.


00:06:19.160 --> 00:06:25.320
Yeah, it's worth watching for the blush worthy.


00:06:25.320 --> 00:06:26.680
Like, oh, chew.


00:06:26.680 --> 00:06:28.040
Oh, oh, come on.


00:06:28.040 --> 00:06:30.040
Okay, well, let's just move on now, please.


00:06:30.040 --> 00:06:34.840
But nonetheless you do they do in demo some interesting things and whatnot


00:06:34.840 --> 00:06:40.040
So that's probably enough on that. But if you're into manga db manga db5 has a lot of cool things to talk about there


00:06:40.040 --> 00:06:44.520
Do you know what else is cool and coming up


00:06:44.520 --> 00:06:47.720
uh python 3.11


00:06:47.720 --> 00:06:52.920
We don't we don't even have python 3.10 yet so well I do


00:06:53.400 --> 00:06:56.760
The beta is available for 3.10, you can run it.


00:06:56.760 --> 00:07:01.600
But the alpha is around for 3.11, which is neat.


00:07:01.600 --> 00:07:11.020
What I wanted to highlight here was enhanced error locations in tracebacks.


00:07:11.020 --> 00:07:14.240
I'm so excited about this. This is so cool.


00:07:14.240 --> 00:07:17.480
Python has not been that bad for tracebacks.


00:07:17.480 --> 00:07:19.320
I've dealt with worse tracebacks,


00:07:19.320 --> 00:07:23.100
but it points out what line is going on.


00:07:23.100 --> 00:07:24.660
but sometimes there's like weird stuff,


00:07:24.660 --> 00:07:27.500
like none, not dereferenceable or something,


00:07:27.500 --> 00:07:29.980
and you don't know what's going on.


00:07:29.980 --> 00:07:33.620
But now in 3.11, it will point to exactly


00:07:33.620 --> 00:07:36.220
what part of the line has the error


00:07:36.220 --> 00:07:38.260
with little carrots underneath


00:07:38.260 --> 00:07:39.940
pointing exactly where it's at.


00:07:39.940 --> 00:07:41.120
- That is actually super cool.


00:07:41.120 --> 00:07:43.020
So like the example you got on the screen here


00:07:43.020 --> 00:07:45.140
on the announcement,


00:07:45.140 --> 00:07:50.140
you've got multiple objects accessing their fields


00:07:50.140 --> 00:07:52.620
like .1.x, .2.x,


00:07:52.620 --> 00:07:55.860
And the error is none type object has no attribute X,


00:07:55.860 --> 00:07:58.780
which is probably the most common error


00:07:58.780 --> 00:08:01.260
that you'll ever find in Python.


00:08:01.260 --> 00:08:03.460
But what I like about it that you're pointing out here


00:08:03.460 --> 00:08:07.500
is like the second object is the one that is none.


00:08:07.500 --> 00:08:10.180
And it actually highlights, no, no, not the first one,


00:08:10.180 --> 00:08:11.540
the second one, because there's nothing


00:08:11.540 --> 00:08:13.700
about the error message that would tell you


00:08:13.700 --> 00:08:16.300
which of these two things was the problem.


00:08:16.300 --> 00:08:17.940
- Yeah. - That's awesome.


00:08:17.940 --> 00:08:20.140
- Yeah, and it's deep into the,


00:08:20.140 --> 00:08:21.820
so if you have a deep stack trace,


00:08:21.820 --> 00:08:23.920
it'll show you exactly where into it.


00:08:23.920 --> 00:08:28.220
And even, like, there's another example where it shows, like...


00:08:28.220 --> 00:08:34.020
A four-level deep dictionary dereference or something, right?


00:08:34.020 --> 00:08:39.320
And it points out exactly which index is the one that's messing up.


00:08:39.320 --> 00:08:41.920
So that's pretty amazing.


00:08:41.920 --> 00:08:46.580
Also, even arithmetic expressions, like a division by zero,


00:08:46.580 --> 00:08:49.620
if you've got multiple divisions, which one is the problem?


00:08:49.680 --> 00:08:52.480
Man, it'll show you exactly which one it is.


00:08:52.480 --> 00:08:53.960
- The thing I love about this change


00:08:53.960 --> 00:08:55.180
is this is one of those things,


00:08:55.180 --> 00:08:57.240
this is absurdly difficult.


00:08:57.240 --> 00:08:59.840
Like this is like acres of computer science


00:08:59.840 --> 00:09:01.600
and a bunch of people working together on this


00:09:01.600 --> 00:09:04.200
for I couldn't even imagine how long it took them to,


00:09:04.200 --> 00:09:07.160
to make something which is just a beautiful


00:09:07.160 --> 00:09:08.400
little incremental improvement


00:09:08.400 --> 00:09:10.280
to our lives as Python developers.


00:09:10.280 --> 00:09:13.240
But if you, the release notes actually talk about


00:09:13.240 --> 00:09:15.040
some of the internal changes they had to make


00:09:15.040 --> 00:09:16.000
that to get this to work.


00:09:16.000 --> 00:09:17.800
This is like really deep stuff


00:09:17.800 --> 00:09:20.000
And it's totally worth it for what you get out of it.


00:09:20.000 --> 00:09:22.500
But I think it's easy to look at this and think,


00:09:22.500 --> 00:09:25.160
"Okay, that's a reasonably sensible small change."


00:09:25.160 --> 00:09:26.740
And this was not a small change at all.


00:09:26.740 --> 00:09:30.000
And I think it's going to dramatically increase


00:09:30.000 --> 00:09:32.340
the on-ramping of new people into Python


00:09:32.340 --> 00:09:37.280
because being able to figure out what's wrong with your code,


00:09:37.280 --> 00:09:39.120
that's basics.


00:09:39.120 --> 00:09:45.960
I mean, some of us old hatters are used to digging into confusing tracebacks.


00:09:46.020 --> 00:09:48.360
But some new people are not.


00:09:48.360 --> 00:09:50.580
So if we can make them less confusing, that'll be great.


00:09:50.580 --> 00:09:51.420
- Right.


00:09:51.420 --> 00:09:52.940
When I work with new programmers, it's so common.


00:09:52.940 --> 00:09:55.180
You get a, they get a trace back and they freeze


00:09:55.180 --> 00:09:58.060
because this utter, utter meaningless junk


00:09:58.060 --> 00:09:59.140
has just shown up on their screen.


00:09:59.140 --> 00:10:00.400
And what are they supposed to do with that?


00:10:00.400 --> 00:10:02.820
And here it feels like this is just such a huge improvement


00:10:02.820 --> 00:10:04.700
because at least it's pointing to the bit


00:10:04.700 --> 00:10:06.300
in the giant blob of text


00:10:06.300 --> 00:10:08.140
that they should be paying attention to.


00:10:08.140 --> 00:10:09.820
- Yeah, it's lovely.


00:10:09.820 --> 00:10:11.420
Yeah, I want it in 3.10 though.


00:10:11.420 --> 00:10:12.980
But we have to wait till 3.11.


00:10:13.900 --> 00:10:18.180
- From futures, import nice stack trace or trace back.


00:10:18.180 --> 00:10:19.880
Yeah, very cool.


00:10:19.880 --> 00:10:23.980
All right, so Simon, you got the third one.


00:10:23.980 --> 00:10:24.980
Tell us all about it.


00:10:24.980 --> 00:10:28.260
- Okay, so fly.io are a hosting provider


00:10:28.260 --> 00:10:30.440
who I've been thought, they launched about a year ago.


00:10:30.440 --> 00:10:31.340
I've been following along


00:10:31.340 --> 00:10:33.300
'cause they're doing some really interesting stuff


00:10:33.300 --> 00:10:34.820
around hosting Docker containers


00:10:34.820 --> 00:10:36.100
and all my stuff is in Docker containers.


00:10:36.100 --> 00:10:37.540
So I'm always looking for things


00:10:37.540 --> 00:10:39.300
where I can throw a Docker container


00:10:39.300 --> 00:10:40.320
or the host online.


00:10:40.320 --> 00:10:43.500
Their secret sauce is that they do geographic hosting.


00:10:43.500 --> 00:10:45.760
So you can ask them to run your container


00:10:45.760 --> 00:10:48.900
in like Tokyo and San Francisco and London,


00:10:48.900 --> 00:10:51.000
and they will do that and they will direct traffic


00:10:51.000 --> 00:10:53.200
to the closest version of that app.


00:10:53.200 --> 00:10:56.920
So it's this thing, I worked at Eventbrite for many years,


00:10:56.920 --> 00:10:58.800
and one of the things I was always trying to figure out


00:10:58.800 --> 00:11:02.100
was, okay, could we run Eventbrite close to our users?


00:11:02.100 --> 00:11:04.600
Could we have like European, a database in Europe


00:11:04.600 --> 00:11:06.100
and a database in New York


00:11:06.100 --> 00:11:07.900
and give people a faster experience that way?


00:11:07.900 --> 00:11:09.400
Incredibly difficult to do.


00:11:09.400 --> 00:11:12.280
- Right, what a lot of people do is they do CDNs,


00:11:12.280 --> 00:11:15.880
So the static content, but then there's one server somewhere.


00:11:15.880 --> 00:11:17.520
That's really the one, right?


00:11:17.520 --> 00:11:17.820
Yeah.


00:11:17.820 --> 00:11:20.720
It's the database, it's the application code, and then it's


00:11:20.720 --> 00:11:22.320
the database server, especially.


00:11:22.320 --> 00:11:26.320
And so what Flydl and Aya are doing is making it so much easier to do this,


00:11:26.320 --> 00:11:29.800
that you could start a project and have it geographically distributed from day


00:11:29.800 --> 00:11:32.280
one without having to think particularly hard about it.


00:11:32.280 --> 00:11:33.560
So I like that about them.


00:11:33.560 --> 00:11:37.000
And they wrote this, this, this article came out within the last week, I think.


00:11:37.000 --> 00:11:40.960
And it talks about their plan for multi-region databases.


00:11:41.200 --> 00:11:45.520
In that case, they're talking about Postgres and this desire to have Postgres


00:11:45.520 --> 00:11:48.960
data, have like Postgres database distributed around the world.


00:11:48.960 --> 00:11:50.640
And so when you're doing that.


00:11:50.640 --> 00:11:55.180
Splitting up your having rights to multiple places remains incredibly difficult, but


00:11:55.180 --> 00:11:58.920
a very common pattern is you say, okay, we're going to have the, the leads database


00:11:58.920 --> 00:12:02.280
is in, I dunno, New York and that all of the rights go to that.


00:12:02.280 --> 00:12:07.120
And then any of the reads get spread out to a replica database that's running in


00:12:07.120 --> 00:12:08.400
different places around the world.


00:12:08.680 --> 00:12:12.280
And that's still a really difficult thing to set up with the geographic load balancing.


00:12:12.280 --> 00:12:25.120
So what they propose is basically run your application all the way around the world and set it up so that if anyone tries to write to the database and they're not talking to the leads database server, the error gets caught.


00:12:25.120 --> 00:12:32.000
And the application server replies to fly CDN and say, it says, Hey, we run this request against the leader database in New York.


00:12:32.000 --> 00:12:34.240
And so the user doesn't see anything at all.


00:12:34.240 --> 00:12:37.520
The user attempts to do something and it works.


00:12:37.560 --> 00:12:40.560
And what's actually happened is they tried to do a right against Tokyo.


00:12:40.560 --> 00:12:45.240
Tokyo said, oh, we can't handle lights fly invisibly, sort of


00:12:45.240 --> 00:12:47.000
internally redirected to New York.


00:12:47.000 --> 00:12:49.000
The right happened against New York and the result came back.


00:12:49.000 --> 00:12:53.080
And so this takes geographic, geographically distributing your database


00:12:53.080 --> 00:12:56.600
weeds, which used to be, I mean, I was thinking it was going to be a team of


00:12:56.600 --> 00:12:59.920
engineers for six months to get this working and it's just baked into their


00:12:59.920 --> 00:13:04.200
platform. It's, it's this incredibly elegant piece of, sort of systems


00:13:04.200 --> 00:13:05.840
engineering design that they've done.


00:13:05.840 --> 00:13:07.120
And I, I was fascinated.


00:13:07.120 --> 00:13:10.020
I've banged my head against this problem for so long


00:13:10.020 --> 00:13:11.460
and they just solved it.


00:13:11.460 --> 00:13:13.860
They just said, "Hey, here's a way that will work.


00:13:13.860 --> 00:13:16.020
We've shipped it, try it out."


00:13:16.020 --> 00:13:19.340
As something of a architecture nerd,


00:13:19.340 --> 00:13:21.300
this really fascinated me.


00:13:21.300 --> 00:13:23.180
- This is fascinating, yeah.


00:13:23.180 --> 00:13:27.340
And I can see just, we've got like the retry decorators


00:13:27.340 --> 00:13:30.180
and stuff for various Python functions.


00:13:30.180 --> 00:13:31.740
I could see almost a,


00:13:34.420 --> 00:13:39.780
Like retry the right decorator that you put on them and it just goes it catches the error and it just goes


00:13:39.780 --> 00:13:43.460
Nope, we're gonna send it everywhere it goes and then then return the result, right? Like yeah


00:13:43.460 --> 00:13:47.460
It's basically put decorators anywhere. You're gonna ever do a right and you're good to go


00:13:47.460 --> 00:13:52.740
Exactly. And in fact, they they've even got example code for ruby on rails. We don't even have to do that


00:13:52.740 --> 00:13:55.460
They catch the database error that says, you know


00:13:55.460 --> 00:14:01.460
You tried to do a right in a read-only transaction and they turn that into an hdb header that replays it against the lead


00:14:01.940 --> 00:14:07.140
Region and that's it. It's like this. It's in on the one hand. It's kind of an awful kludgy hack


00:14:07.140 --> 00:14:12.100
But it's also genius like this is taking six months of engineering work and turning it into


00:14:12.100 --> 00:14:16.420
Add these five lines of code now your application works all the way around the world. I'm


00:14:16.420 --> 00:14:19.060
It's yeah fascinates me


00:14:19.060 --> 00:14:22.280
Yeah, this is this is pretty interesting


00:14:22.280 --> 00:14:27.380
Yeah, and also i've got there's one other link in the show notes


00:14:27.540 --> 00:14:31.860
There's a second article they put out a few days ago, which is just doing something


00:14:31.860 --> 00:14:39.380
It's it's more about using redis as a cache in your geographical data centers so you can have a local redis


00:14:39.380 --> 00:14:42.340
um, like because I mean their argument is


00:14:42.340 --> 00:14:47.380
People in london tend to be interested in other things that people in london are interested ditto for tokyo


00:14:47.380 --> 00:14:50.260
So actually distributing your cache by city


00:14:50.260 --> 00:14:52.820
Normally gives you really good cache hit rates


00:14:53.060 --> 00:14:58.500
But they also pointed out that I didn't know that redis could do this redis can be set up to allow rights


00:14:58.500 --> 00:15:06.180
To supposedly read-only replicas so you can have a local cache that you're writing to and reading from but still have that leader redis


00:15:06.180 --> 00:15:10.100
In your main data center that can send rights out to all of those replicas


00:15:10.100 --> 00:15:15.380
So that gives you cache invalidation from a central point you can in your sort of lead redis


00:15:15.380 --> 00:15:21.300
You can say okay everyone delete the cache entry for whatever this thing is and all of those replicas around the world


00:15:21.380 --> 00:15:25.060
will then delete that cache entry even though normally they're acting independently.


00:15:25.060 --> 00:15:29.700
And yeah, it's again, this is for if you're a systems architecture design nerd,


00:15:29.700 --> 00:15:31.700
the stuff that they're doing is so interesting.


00:15:31.700 --> 00:15:35.620
I think it's interesting and I'm not one of those.


00:15:35.620 --> 00:15:38.740
Maybe you are and you didn't realize.


00:15:38.740 --> 00:15:44.500
You will be next year. You will be next year. Fantastic. Yeah, this is super cool as well.


00:15:46.260 --> 00:15:54.500
Yeah, it seems really useful, you know, and it's perfectly in line with like, let's take our app and put the logic in multiple places.


00:15:54.500 --> 00:16:02.680
Because that person is unlikely to move from Tokyo to Virginia during a session.


00:16:02.680 --> 00:16:06.980
Right, once they start in one place, they're going to stay in that place.


00:16:06.980 --> 00:16:12.920
So the cache would reasonably just have like their local data on that one instance, right?


00:16:12.920 --> 00:16:13.920
Yeah.


00:16:15.160 --> 00:16:20.520
Yeah, cool. But maybe your CDN or not your CDN, your CMS is like generated a page and


00:16:20.520 --> 00:16:25.160
everybody needs that always to be in sync, right? There's that global data as well. Yeah. So very


00:16:25.160 --> 00:16:27.160
cool. I like this. Check it out. - Neat.


00:16:27.160 --> 00:16:31.960
- Neat indeed. - Well, let's talk about unicorns.


00:16:31.960 --> 00:16:39.080
- I love the unicorns. So unicorns, the magical creature. And Simon, I'm so glad that you're here


00:16:39.080 --> 00:16:42.840
because we can get your thoughts on this, even if you maybe haven't been like deep down in it.


00:16:44.840 --> 00:16:47.440
So not too long ago, we talked about HTMX,


00:16:47.440 --> 00:16:49.280
which I'm still a big fan of HTMX.


00:16:49.280 --> 00:16:52.440
It's a cool like sprinkling of magic


00:16:52.440 --> 00:16:55.560
onto JavaScripty stuff onto your page


00:16:55.560 --> 00:16:56.980
to make it more interactive.


00:16:56.980 --> 00:17:00.220
But if you're doing Django, HTMX is very relevant,


00:17:00.220 --> 00:17:03.020
but there's also this thing called Django Unicorn


00:17:03.020 --> 00:17:05.360
at django-unicorn.com.


00:17:05.360 --> 00:17:09.060
It's a magical full stack framework for Django.


00:17:09.060 --> 00:17:13.540
So the idea is that you can create these templates,


00:17:13.540 --> 00:17:19.060
these interactive templates without going and rewriting everything in like some front-end


00:17:19.060 --> 00:17:24.020
framework like React or something like that. You can skip the JavaScript build tools because you


00:17:24.020 --> 00:17:30.580
know you got a lot less of that and you can skip a bunch of serializers and just use Django for like


00:17:30.580 --> 00:17:37.380
the API bits. So you install Unicorn, you create a component, and then at the top of your template


00:17:37.380 --> 00:17:42.820
you put load, you know, %load Unicorn, and then you could just give it a one of these names. So


00:17:42.820 --> 00:17:44.860
So for example, here's a little task.


00:17:44.860 --> 00:17:49.060
Task one is tell people about unicorn.


00:17:49.060 --> 00:17:50.220
I can add that.


00:17:50.220 --> 00:17:53.020
Has too many.


00:17:53.020 --> 00:17:55.900
We'll tell people about unicorn.


00:17:55.900 --> 00:18:00.200
And you can see like this cool little thing is interacting


00:18:00.200 --> 00:18:02.580
and it's not refreshing the page, right?


00:18:02.580 --> 00:18:05.100
It's like a front end framework type of thing.


00:18:05.100 --> 00:18:08.180
But the way that you write it is you just put


00:18:08.180 --> 00:18:11.540
like some extra template pieces on there


00:18:11.540 --> 00:18:14.580
like unicorn colon prevent, submit, prevent,


00:18:14.580 --> 00:18:17.540
and we're going to do this add function instead.


00:18:17.540 --> 00:18:19.800
And if somebody hits the escape key,


00:18:19.800 --> 00:18:22.060
we're going to change the value.


00:18:22.060 --> 00:18:23.940
And that's not JavaScript.


00:18:23.940 --> 00:18:25.580
Those are just HTML attributes,


00:18:25.580 --> 00:18:28.280
but they turn into JavaScript, right?


00:18:28.280 --> 00:18:29.660
Which is very cool.


00:18:29.660 --> 00:18:32.580
So, and then you just put your regular


00:18:32.580 --> 00:18:36.120
Django template business down and off it goes.


00:18:36.120 --> 00:18:38.940
And it turns it into basically something


00:18:38.940 --> 00:18:41.540
that's way more front-end framework friendly.


00:18:41.540 --> 00:18:43.020
Simon, what do you think?


00:18:43.020 --> 00:18:46.520
- So as far as I can tell, the real magic here


00:18:46.520 --> 00:18:48.740
is that they're doing the trick


00:18:48.740 --> 00:18:50.620
where you render the HTML on the server,


00:18:50.620 --> 00:18:52.940
in this case, we using your Django template,


00:18:52.940 --> 00:18:56.620
and then they send back JSON with a blob of HTML


00:18:56.620 --> 00:18:58.820
in which you then essentially write into an inner HTML


00:18:58.820 --> 00:19:00.060
to update the page.


00:19:00.060 --> 00:19:04.660
And I love this, like this is sort of,


00:19:04.660 --> 00:19:05.740
I've always been a big fan


00:19:05.740 --> 00:19:10.900
the progressive enhancement method of writing JavaScript where you get the stuff to more


00:19:10.900 --> 00:19:14.740
or less work without any JavaScript at all, and if there's JavaScript, you get in-page


00:19:14.740 --> 00:19:19.500
page updates and all of that kind of thing. But there's also one of the problems I've


00:19:19.500 --> 00:19:23.620
seen with all sorts of - lots of engineering shops that try and do that is that you end


00:19:23.620 --> 00:19:27.140
up writing your templates twice. You have the Django templates that know how to do something,


00:19:27.140 --> 00:19:31.460
and then you have front-end templates using React or handlebars or whatever that know


00:19:31.460 --> 00:19:34.780
how to do something, and you have to keep those in sync, which is an enormous waste


00:19:34.780 --> 00:19:39.900
of time for everyone involved. So what they're doing here then is they're handling that,


00:19:39.900 --> 00:19:45.660
they're cleaning up that inconsistency for you. You write a Django template, they can then


00:19:45.660 --> 00:19:50.780
use that template in Python code to generate just that fragment of HTML, send


00:19:50.780 --> 00:19:54.140
that back and have that displayed on the page. So yeah, I think this is a really interesting approach.


00:19:54.140 --> 00:19:59.180
I've not spent much time with Django Unicorn itself, but it also reminds me a bit of the


00:19:59.180 --> 00:20:03.980
I think it's called hot hot hot wire. Yeah, we'll be on a little bit built this


00:20:03.980 --> 00:20:12.780
very exciting, um framework again against these kinds of principles just shipping blobs of html back and forth. I feel like it's


00:20:12.780 --> 00:20:19.820
Something like the the mad rush towards single page applications over the past 10 years has mostly resulted in applications that


00:20:19.820 --> 00:20:27.420
Load slower and uh take take take longer for people to build and they're so inconsistent and they make me so crazy


00:20:27.580 --> 00:20:32.700
for example, I'll go to like a bank or something and I'll say, all right, I'm going to run my one


00:20:32.700 --> 00:20:38.540
password, pre-fill the page, and you'll see it fill out the page. And then you try to submit it,


00:20:38.540 --> 00:20:42.700
it goes, please fill out this field. And there's clearly like an email address or something there.


00:20:42.700 --> 00:20:47.100
What do you got to do? Go put a space, delete the space. So the JavaScript event triggers


00:20:47.100 --> 00:20:52.700
because they're like, not really, not really HTML. It's all that junk. And it's just like,


00:20:52.700 --> 00:20:58.540
Yeah, you know what I mean, but it's what people actually want is they don't want a full page reload


00:20:58.540 --> 00:21:04.060
Like anyone who's getting into single page apps and so on really they just don't want that flicker when the browser reloads everything


00:21:04.060 --> 00:21:11.020
So using this trick where if javascript is available you update a section of the page using stuff that came back from an ajax api


00:21:11.020 --> 00:21:15.820
Totally works and that that feels like the model here and also the hotwire model from wales


00:21:15.820 --> 00:21:20.460
Exactly. Yeah, so the htmx the hotwire and this it's all about


00:21:21.180 --> 00:21:22.940
Let's not write new stuff


00:21:22.940 --> 00:21:26.380
Let's just take the views and the templates already doing their magic and let's just


00:21:26.380 --> 00:21:30.860
Put the little pieces in there to make them dynamic, which i'm all about this. This is great


00:21:30.860 --> 00:21:36.300
What i've missed is why is this a django thing? Is it is it because it uses the django?


00:21:36.300 --> 00:21:38.700
Templates or is that?


00:21:38.700 --> 00:21:45.580
It looks like it. Yeah, it looks like the the magic here is that it's using django templates. so in the view as well


00:21:46.940 --> 00:21:53.260
It provides its own views to us because it needs to provide views that have provided json api where you can send it data


00:21:53.260 --> 00:21:57.580
From a form it then renders that django template in python code and then sends you back the stuff


00:21:57.580 --> 00:21:59.660
So there's two sides to this right as the python


00:21:59.660 --> 00:22:07.340
Django view functions i've written but they've also written a sort of eight kilobyte. I think of javascript that that hooks it up on the front end


00:22:07.340 --> 00:22:10.540
Cool, nice. Yep. Yeah, very neat. So


00:22:10.540 --> 00:22:13.580
Not very much code at all to get


00:22:13.900 --> 00:22:17.740
your Django to become more dynamic, which is great.


00:22:17.740 --> 00:22:25.100
>> Yeah. I don't think unicorns are blue.


00:22:25.100 --> 00:22:28.140
>> I'm not really sure what color unicorns.


00:22:28.140 --> 00:22:29.700
I feel like they could be any color.


00:22:29.700 --> 00:22:34.100
They might be rainbow, but actually that's not a rainbow.


00:22:34.100 --> 00:22:35.460
>> That's not a rainbow.


00:22:35.460 --> 00:22:38.740
I want to talk about blue.


00:22:39.780 --> 00:22:44.780
I think I'm ready to have tomatoes thrown at me or something for bringing this up.


00:22:44.780 --> 00:22:51.780
But so blue is an alternative to black.


00:22:51.780 --> 00:22:56.780
Anyway, so I love black. I think black's awesome.


00:22:56.780 --> 00:23:03.780
But there are times where you can't use it for specific reasons.


00:23:03.780 --> 00:23:10.780
And I'm thinking here basically about the decision that Black made to default to,


00:23:10.780 --> 00:23:16.780
not a default, but enforce double quotes on strings instead of single quotes.


00:23:16.780 --> 00:23:22.780
There are some code bases where there's already a standard to use single quotes.


00:23:22.780 --> 00:23:29.780
And then there's also code bases where there's so many strings that actually have mixed quotes.


00:23:29.780 --> 00:23:38.260
Quotes, you've got a single quotes and then double quotes inside and you know mine end up mixed sometimes because if I want to put


00:23:38.260 --> 00:23:43.300
Quote something in the actual string. I'll use single quotes on the outside. But if I'm gonna say it's a


00:23:43.300 --> 00:23:47.940
Good idea. I'll put double quotes on the outside


00:23:47.940 --> 00:23:49.980
So I don't have to escape the single quote, you know


00:23:49.980 --> 00:23:55.060
Like if if you're gonna have one of the quotes in the string then just go with the other one often something I'll end up


00:23:55.060 --> 00:23:58.060
Oh, but actually, Black does that for you.


00:23:58.060 --> 00:24:01.540
If you've got a string with a single quote in, or a string with a double quote in, that's


00:24:01.540 --> 00:24:04.340
the one time that Black will use single quotes, which is kind of neat.


00:24:04.340 --> 00:24:05.340
Okay, that's good.


00:24:05.340 --> 00:24:06.340
Good to know.


00:24:06.340 --> 00:24:07.660
I do like that.


00:24:07.660 --> 00:24:13.060
But okay, so if this is, the sticking point is really just the quotes, then maybe try


00:24:13.060 --> 00:24:14.060
Blue.


00:24:14.060 --> 00:24:17.860
So Blue is actually, I was worried there was going to be a fork of Black.


00:24:17.860 --> 00:24:19.580
It's not a fork.


00:24:19.580 --> 00:24:25.820
sort of includes black and it overwrites some of the functionality,


00:24:25.820 --> 00:24:28.060
specifically just a few things.


00:24:28.060 --> 00:24:32.940
So the differences are it defaults to single quotes strings,


00:24:32.940 --> 00:24:37.100
except for places where we love double quotes,


00:24:37.100 --> 00:24:40.220
like doc strings and triple-quoted strings.


00:24:40.220 --> 00:24:42.700
For some reason, those look weird with single quotes.


00:24:42.700 --> 00:24:45.320
So I'm on board with that.


00:24:45.320 --> 00:24:48.900
It defaults the line lengths to 79,


00:24:48.900 --> 00:24:53.400
And I don't really care because I always override that to 120 or something like that.


00:24:53.400 --> 00:24:57.200
And I like that Black allows that overriding.


00:24:57.200 --> 00:25:00.900
And then the other thing that I didn't even think about, which is kind of nice,


00:25:00.900 --> 00:25:03.000
is one of the things Black does is


00:25:03.000 --> 00:25:08.800
takes the hash, like if you have hash comments on your right side of your code,


00:25:08.800 --> 00:25:10.800
if you've got a block of them,


00:25:10.800 --> 00:25:16.100
like maybe you're talking about an entire block of code, so you have a block of comments,


00:25:16.100 --> 00:25:20.500
Black will remove the white space in front of the hash,


00:25:20.500 --> 00:25:22.320
whereas blue will leave those alone,


00:25:22.320 --> 00:25:24.620
so you can have block comments on the side.


00:25:24.620 --> 00:25:27.600
That's really it. That's the only difference.


00:25:27.600 --> 00:25:32.180
I think having this around is a neat thing.


00:25:32.180 --> 00:25:35.020
Interesting quote from the doc is that they actually


00:25:35.020 --> 00:25:38.220
don't want to keep this project alive for very long.


00:25:38.220 --> 00:25:40.700
They'd really like these to just be options in black.


00:25:40.700 --> 00:25:41.980
[LAUGHTER]


00:25:41.980 --> 00:25:44.100
I don't know how viral they'll get.


00:25:44.100 --> 00:25:45.940
I don't think that's going to happen.


00:25:45.940 --> 00:25:49.220
I think Black is pretty hardcore,


00:25:49.220 --> 00:25:51.400
guaranteed, like they're very into


00:25:51.400 --> 00:25:54.700
not adding configuration where they can still avoid it.


00:25:54.700 --> 00:25:58.100
>> Yeah. In researching this,


00:25:58.100 --> 00:26:00.900
one of the things I somehow missed about Black,


00:26:00.900 --> 00:26:03.820
maybe I haven't read the documentation in a long time,


00:26:03.820 --> 00:26:05.260
but a couple of years ago,


00:26:05.260 --> 00:26:10.020
it added the ability to have format off and format on.


00:26:10.020 --> 00:26:12.020
One of the things, for instance,


00:26:12.020 --> 00:26:17.360
Occasionally, not very often, occasionally I've got a large chunk of data


00:26:17.360 --> 00:26:22.560
set up in a list or a dictionary or something


00:26:22.560 --> 00:26:27.720
that I have aligned with comma alignment,


00:26:27.720 --> 00:26:31.320
like an old-style CSV table.


00:26:31.320 --> 00:26:34.420
- And Black totally... - Or a 1980s C programmer.


00:26:34.420 --> 00:26:38.480
Yeah, sure. But Black totally tears that apart.


00:26:38.560 --> 00:26:44.520
But for that you can you can turn formatting off and I appreciate that. That's cool. That's a good feature


00:26:44.520 --> 00:26:49.540
See it does have a little bit of a little bit of give


00:26:49.540 --> 00:26:54.180
But yeah, so yeah, that's cool


00:26:54.180 --> 00:26:57.760
Yeah, very good one very good one


00:26:57.760 --> 00:27:02.640
What you got next oh


00:27:02.640 --> 00:27:06.200
Okay. so this is there's a link in the show is this


00:27:06.680 --> 00:27:14.060
There's an article that somebody wrote about using Tesseract OCR to build yourself a searchable


00:27:14.060 --> 00:27:17.200
index of your screenshots.


00:27:17.200 --> 00:27:20.540
And I got really excited about this because Tesseract is like, Tesseract's been around


00:27:20.540 --> 00:27:22.420
since 1995, I think.


00:27:22.420 --> 00:27:28.080
It started off at Hewlett-Packard, and it's pretty much still the leading light of OCR


00:27:28.080 --> 00:27:30.680
in the open source space, but I've never managed to get it to work.


00:27:30.680 --> 00:27:34.040
And I've always wanted OCR that I can just run.


00:27:34.040 --> 00:27:36.640
And thanks to this article, I can actually use Tesseract now.


00:27:36.640 --> 00:27:38.400
Sorry, I've got a couple of demos here.


00:27:38.400 --> 00:27:39.240
Can we see this?


00:27:39.240 --> 00:27:42.960
Yeah, so I grabbed a screenshot just of the random slide


00:27:42.960 --> 00:27:45.900
from our conversation earlier, and I can run,


00:27:45.900 --> 00:27:49.640
let's see, I think it's tesseract screenshot.png.


00:27:49.640 --> 00:27:51.880
I'll put it in a file called screenshot-.


00:27:51.880 --> 00:27:54.240
You have to tell it the language that you're using


00:27:54.240 --> 00:27:56.080
because that affects how it does these things.


00:27:56.080 --> 00:27:58.800
And it supports like 70 languages, I think.


00:27:58.800 --> 00:28:01.840
And I'm gonna say, I want that as a TXT file.


00:28:01.840 --> 00:28:02.680
And you run it.


00:28:02.680 --> 00:28:05.560
And now if I cat screenshot.txt,


00:28:05.560 --> 00:28:08.800
This is the launch today, MongoDB 5.0.


00:28:08.800 --> 00:28:11.880
This is the screenshot I took of our conversation earlier.


00:28:11.880 --> 00:28:14.680
A better example even would be the,


00:28:14.680 --> 00:28:17.100
I took a screenshot of Python documentation just now.


00:28:17.100 --> 00:28:18.320
So I can run that same command,


00:28:18.320 --> 00:28:22.160
except I'll do it against Python docs.png.


00:28:22.160 --> 00:28:26.920
Python docs.png, I'll call it pscreenshot.


00:28:26.920 --> 00:28:27.760
There we go.


00:28:27.760 --> 00:28:31.600
Okay, and now if I cat this,


00:28:31.600 --> 00:28:34.880
this is pretty decent OCR against


00:28:34.880 --> 00:28:37.160
a screenshot of a file of documentation.


00:28:37.160 --> 00:28:41.000
The really fun thing though is that you can say you want it as a PDF file.


00:28:41.000 --> 00:28:44.060
If you do that, it will give you a PDF which is visually


00:28:44.060 --> 00:28:47.120
identical to the screenshot but has selectable text on it.


00:28:47.120 --> 00:28:49.900
So you can copy and paste out of that PDF.


00:28:49.900 --> 00:28:57.040
So the chap whose article is linked in the notes,


00:28:57.040 --> 00:29:01.240
his trick is he has a folder on his computer that he saved screenshots to,


00:29:01.240 --> 00:29:03.680
and he has a automated script that then


00:29:03.680 --> 00:29:08.880
Turns those screenshots into these annotated pdfs, which means that spotlight on his mac can now search them


00:29:08.880 --> 00:29:14.720
So anything that he drops into that folder a few seconds later becomes available to global search on his computer


00:29:14.720 --> 00:29:17.360
I think that's a really neat trick. I love it


00:29:17.360 --> 00:29:19.840
That's great


00:29:19.840 --> 00:29:21.280
then the um


00:29:21.280 --> 00:29:23.680
So yeah, there's so much stuff I want to do with this. Um


00:29:23.680 --> 00:29:31.120
Uh, yeah, it was alex. alexandre. Ned nedl. Sue. I don't know if i'm pronouncing that correctly and wrote all of this up


00:29:31.120 --> 00:29:32.560
um


00:29:32.560 --> 00:29:37.060
But yeah, it's it's you can install with homebrew. It's brew install tesseract


00:29:37.060 --> 00:29:40.880
There's actually a python library called pi. I think it's called pi tesseract


00:29:40.880 --> 00:29:47.520
Which I thought was doing complicated things with c modules. Actually if you read the source, it's just shelling out to this command. So


00:29:47.520 --> 00:29:53.920
Apparently that's the state of the art in in python. ocr is shell out to the tesseract command line tool


00:29:53.920 --> 00:29:56.240
Which i'm perfectly happy to do, you know


00:29:56.240 --> 00:29:59.600
Yeah, that's neat


00:29:59.760 --> 00:30:05.520
I really like this, you know, it's if you've got a bunch of image data and you want to be able to do interesting things with it


00:30:05.520 --> 00:30:09.760
Like here's a really quick and easy way to do it, right?


00:30:09.760 --> 00:30:11.280
Right


00:30:11.280 --> 00:30:15.680
It's super simple the um this article also I didn't know that you could use the mac


00:30:15.680 --> 00:30:20.240
Launch d I think you can use you can add a launch agent


00:30:20.240 --> 00:30:23.920
Which automatically runs a script when a file is saved in a certain folder


00:30:24.240 --> 00:30:28.720
So in this case, he's got a launch script that runs the the test rack to ocr stuff


00:30:28.720 --> 00:30:33.040
But this is great right now. I can automate any folder on my mac to do basically anything


00:30:33.040 --> 00:30:36.640
Using this system that's built into the operating system, but I didn't know how to use


00:30:36.640 --> 00:30:39.200
I didn't know you could do that either. That's great


00:30:39.200 --> 00:30:42.080
That's yeah. Yeah, that's awesome


00:30:42.080 --> 00:30:45.920
I feel like this is right up your alley simon, you know with the


00:30:45.920 --> 00:30:51.760
The data set the dog sheep and like oh, here's this data we got from this automation and yet


00:30:51.760 --> 00:30:53.920
I just can't dig into it and now you can


00:30:53.920 --> 00:30:55.720
I'm really excited about this.


00:30:55.720 --> 00:30:59.720
Although, so Apple Photos, the next version of macOS,


00:30:59.720 --> 00:31:02.040
Apple Photos is going to do OCR


00:31:02.040 --> 00:31:03.600
on all of your photographs for you.


00:31:03.600 --> 00:31:06.680
So you can search for text in pictures that you've taken.


00:31:06.680 --> 00:31:10.600
And if it's anything like the current version of OSX Photos,


00:31:10.600 --> 00:31:11.880
all of that data is gonna be stored


00:31:11.880 --> 00:31:14.040
in SQLite databases on your computer.


00:31:14.040 --> 00:31:16.960
Like I've been having a huge amount of fun


00:31:16.960 --> 00:31:20.040
building things against my Apple Photos library


00:31:20.040 --> 00:31:23.080
because they already run machine learning labeling


00:31:23.080 --> 00:31:25.960
against your photos, they know when you take a photo of a dog


00:31:25.960 --> 00:31:27.340
and they tag it with dog.


00:31:27.340 --> 00:31:30.380
And the word dog is in a SQLite database on your computer.


00:31:30.380 --> 00:31:31.920
So once you've figured that out, you


00:31:31.920 --> 00:31:34.340
can run SQL queries against photos you've taken


00:31:34.340 --> 00:31:36.680
and say, show me every photo I've


00:31:36.680 --> 00:31:42.520
taken of a dog that was in San Francisco in the month of May.


00:31:42.520 --> 00:31:45.680
And you get results back, which is crazy interesting.


00:31:45.680 --> 00:31:46.400
Yeah.


00:31:46.400 --> 00:31:47.440
That's pretty cool.


00:31:47.440 --> 00:31:48.720
Yeah, that's super cool.


00:31:48.720 --> 00:31:50.800
I love the stuff that you're doing with that.


00:31:50.800 --> 00:31:53.920
Is it just local or is are they caching that?


00:31:53.920 --> 00:31:56.720
In their own databases as well


00:31:56.720 --> 00:31:59.120
Oh, well, so they synchronize it all


00:31:59.120 --> 00:32:02.320
So if you're using icloud your photos are synchronized up to their servers


00:32:02.320 --> 00:32:05.540
That you take a photo on your phone. It shows up on your computer automatically


00:32:05.540 --> 00:32:11.940
But all of its the actual local data storage is all sqlite database files. Apple are really big into sqlite


00:32:11.940 --> 00:32:13.280
So yeah


00:32:13.280 --> 00:32:19.280
There are just these files littering your computer with your address book in there and all of your i messages and all of your photo


00:32:19.340 --> 00:32:23.100
Metadata, it's just sat there waiting for you to to dig in and play with it


00:32:23.100 --> 00:32:25.020
nice


00:32:25.020 --> 00:32:27.020
With data set probably


00:32:27.020 --> 00:32:32.140
Right. Yep. I am i've i've i've i've i've got a script called. i'll add it to the show notes


00:32:32.140 --> 00:32:33.660
I've got a script called dog sheep


00:32:33.660 --> 00:32:40.220
Um photos which uploads your photos to your s3 bucket so that you can actually link to them embed them on web pages


00:32:40.220 --> 00:32:44.620
And it extracts all of that sqlite data into it into a more usable format


00:32:44.860 --> 00:32:51.660
So yeah, i've got a online database of all of my photographs that I update every now and then with the script and it works


00:32:51.660 --> 00:32:53.900
It's phenomenal what you can do with it


00:32:53.900 --> 00:32:56.060
Okay


00:32:56.060 --> 00:33:01.100
Out in the live scene, brandon. Hey, brandon says this is fantastic. Definitely excited


00:33:01.100 --> 00:33:08.300
And also taking a step back to yours. Brian david colton. Hey david says i'm using double quotes now in black


00:33:08.300 --> 00:33:10.700
But my typing has not evolved yet to double quotes


00:33:11.180 --> 00:33:17.980
So you just pass it through the single quote to double quote compiler process called black and then you got it all adapted


00:33:17.980 --> 00:33:19.980
That's nice


00:33:19.980 --> 00:33:23.500
I'd say like black has given me back


00:33:23.500 --> 00:33:30.300
I estimate five percent of my program typing time used to be worrying about indentation and such like and I got all of that


00:33:30.300 --> 00:33:35.580
Back like thanks to black. I never even think about how I indent or style my code at all


00:33:35.980 --> 00:33:41.340
I just say I I'll literally write horrible run on lines that go on for ages


00:33:41.340 --> 00:33:46.080
And then run black and it formats it nicely and I forget about it. It's it's wonderful. It's fantastic


00:33:46.080 --> 00:33:49.900
That's yeah, yeah great


00:33:49.900 --> 00:33:58.140
Um got any extras for us michael, you know, I do I always do unless I have an extra extra extra


00:33:58.140 --> 00:34:00.940
Here all about it. Then I guess I still do so


00:34:01.500 --> 00:34:04.940
We talked about strong typing last time,


00:34:04.940 --> 00:34:07.660
which lets you do cool stuff like


00:34:07.660 --> 00:34:10.380
go and put a decorator


00:34:10.380 --> 00:34:12.860
onto a function and say,


00:34:12.860 --> 00:34:17.020
well, this one, you know, if it has type annotations or type information,


00:34:17.020 --> 00:34:20.740
like Python itself just does,


00:34:20.740 --> 00:34:23.420
if you put @match typing the decorator on there,


00:34:23.420 --> 00:34:25.700
it'll verify at runtime that


00:34:25.700 --> 00:34:28.300
you said it took an integer and you actually passed an integer,


00:34:28.300 --> 00:34:31.420
not a list or whatever to that parameter, right?


00:34:31.420 --> 00:34:33.500
- Yeah. - Well, Felix,


00:34:33.500 --> 00:34:35.060
who maintains this project,


00:34:35.060 --> 00:34:36.220
reached out and said, "Hey, that actually does


00:34:36.220 --> 00:34:37.060
"a whole lot more.


00:34:37.060 --> 00:34:38.360
"You should check some other things out."


00:34:38.360 --> 00:34:39.660
I just wanted to highlight a couple things


00:34:39.660 --> 00:34:40.660
that he pointed out.


00:34:40.660 --> 00:34:42.900
One, if we, you know, we're all familiar


00:34:42.900 --> 00:34:44.860
with the named tuple,


00:34:44.860 --> 00:34:47.060
and you say the type name in a quote,


00:34:47.060 --> 00:34:51.980
and then you say the fields or the elements,


00:34:51.980 --> 00:34:55.580
attributes in a list, either spaced or comma separated,


00:34:55.580 --> 00:34:59.300
like spell, mana, effect, and so on.


00:34:59.300 --> 00:35:02.660
So this one has a typed name tuple


00:35:02.660 --> 00:35:04.460
where you can put the type information


00:35:04.460 --> 00:35:06.480
in very similar ways to what Python would have


00:35:06.480 --> 00:35:08.860
like colon str, colon list and so on.


00:35:08.860 --> 00:35:12.560
And then you get actual type runtime validation


00:35:12.560 --> 00:35:14.980
that your data going into your names tuple


00:35:14.980 --> 00:35:18.580
is actually the type of data you expect in your name tuple.


00:35:18.580 --> 00:35:19.700
- Oh, nice.


00:35:19.700 --> 00:35:20.620
- Isn't that neat?


00:35:20.620 --> 00:35:21.460
- Yeah. - Yeah.


00:35:21.460 --> 00:35:22.540
Yeah, so there's that.


00:35:22.540 --> 00:35:27.060
And then also, I love this about our show.


00:35:27.060 --> 00:35:30.300
It kind of blows my mind that this, this is how the world works.


00:35:30.300 --> 00:35:31.260
And I really appreciate this.


00:35:31.260 --> 00:35:35.760
Everyone who plays along, we'll say things like, Oh, I wish we


00:35:35.760 --> 00:35:37.700
could specify indexes in Beanie.


00:35:37.700 --> 00:35:41.300
Then like the next episode, we're like, Hey, look, Roman added


00:35:41.300 --> 00:35:43.300
a way to do indexes in Beanie.


00:35:43.300 --> 00:35:45.320
And I said, this is awesome.


00:35:45.320 --> 00:35:47.940
That applies to functions, but why couldn't it apply to classes?


00:35:47.940 --> 00:35:49.280
It's basically the same thing.


00:35:49.280 --> 00:35:52.460
And so now six days ago, we have a new feature.


00:35:54.360 --> 00:35:58.900
You could also apply strong typing to classes as well,


00:35:58.900 --> 00:35:59.740
or something like that.


00:35:59.740 --> 00:36:01.600
So well done, well done.


00:36:01.600 --> 00:36:03.240
- Is it because you asked for it?


00:36:03.240 --> 00:36:06.720
'Cause I mean, I asked for single quotes in black


00:36:06.720 --> 00:36:08.080
and I didn't get that, but.


00:36:08.080 --> 00:36:10.560
- Well, I mean, it also may depend


00:36:10.560 --> 00:36:12.600
on the size of the project.


00:36:12.600 --> 00:36:13.680
The more input they get,


00:36:13.680 --> 00:36:17.760
the less influence any individual statement


00:36:17.760 --> 00:36:19.320
may have on it, right?


00:36:19.320 --> 00:36:22.080
Yeah, anyway, I feel like thanks for working on that


00:36:22.080 --> 00:36:23.680
and the extra information there.


00:36:23.680 --> 00:36:24.520
- Yeah, anything else?


00:36:24.520 --> 00:36:26.320
- I actually, one other thing, yes.


00:36:26.320 --> 00:36:31.320
I have finally, I've been working to make sure


00:36:31.320 --> 00:36:35.840
that we don't have to have one of these completely useless,


00:36:35.840 --> 00:36:40.840
dreadful, like talks on technology.


00:36:40.840 --> 00:36:42.480
Our site uses cookies.


00:36:42.480 --> 00:36:43.640
Here's our cookie policy.


00:36:43.640 --> 00:36:44.920
Do you accept our cookie policy


00:36:44.920 --> 00:36:46.880
or do you not accept our cookie policy?


00:36:46.880 --> 00:36:49.080
AKA, would you like our website to work


00:36:49.080 --> 00:36:50.160
or would you like to go away?


00:36:50.160 --> 00:36:52.480
Like that's kind of what the button so often means.


00:36:52.480 --> 00:36:54.480
what the button so often means, right?


00:36:54.480 --> 00:37:00.240
And so I thought I removed all the analytics,


00:37:00.240 --> 00:37:03.640
I removed anything else that we might be doing third party,


00:37:03.640 --> 00:37:04.680
we're good.


00:37:04.680 --> 00:37:06.280
And I went to Python Bytes and I'm like,


00:37:06.280 --> 00:37:08.640
wait, there's DoubleClick, there's Facebook,


00:37:08.640 --> 00:37:11.800
there's Google, there's like, what is all this stuff?


00:37:11.800 --> 00:37:15.120
And we started including the live stream YouTube embed.


00:37:15.120 --> 00:37:17.720
And it started bringing back,


00:37:17.720 --> 00:37:20.200
and I'm like, why would Google be putting in Facebook?


00:37:20.200 --> 00:37:21.040
That sucks.


00:37:21.040 --> 00:37:25.440
And there was also the Discus conversation stuff


00:37:25.440 --> 00:37:26.880
that people haven't really stopped using.


00:37:26.880 --> 00:37:29.440
They all just go and chat on the YouTube streams now


00:37:29.440 --> 00:37:31.920
if they wanna have a live comment type of thing.


00:37:31.920 --> 00:37:33.460
So I'm like, well, I'll just take that out.


00:37:33.460 --> 00:37:35.760
That got rid of the Facebook one.


00:37:35.760 --> 00:37:38.180
And then, but what do you do about that?


00:37:38.180 --> 00:37:42.240
So instead of embedding the YouTube player,


00:37:42.240 --> 00:37:44.680
I said, I'm gonna figure out a way to get the picture


00:37:44.680 --> 00:37:48.000
automatically from YouTube, the poster.


00:37:48.000 --> 00:37:50.200
And then when you hover over it, it just has a play icon.


00:37:50.200 --> 00:37:51.700
and it opens up a new window.


00:37:51.700 --> 00:37:53.540
And I thought I was all clever


00:37:53.540 --> 00:37:55.420
by just putting the image there,


00:37:55.420 --> 00:37:58.500
but serving it from Google, no.


00:37:58.500 --> 00:38:01.220
There's now like the YouTube image servers


00:38:01.220 --> 00:38:02.920
putting tracking cookies on our site.


00:38:02.920 --> 00:38:05.460
I'm like, "Well, come on, why is this so hard?"


00:38:05.460 --> 00:38:08.880
So now on the server, we use requests,


00:38:08.880 --> 00:38:11.800
we download the image anytime it has to be shown on a page,


00:38:11.800 --> 00:38:13.300
put it in MongoDB,


00:38:13.300 --> 00:38:15.480
and then if you pull it, we serve it back out


00:38:15.480 --> 00:38:17.600
so we can like strip the cookies,


00:38:17.600 --> 00:38:18.900
the tracking cookies out.


00:38:18.900 --> 00:38:22.340
cookies out.


00:38:22.340 --> 00:38:23.940
And now, now


00:38:23.940 --> 00:38:25.540
when you look at the tracking content,


00:38:25.540 --> 00:38:27.540
none detected on the site.


00:38:27.540 --> 00:38:29.460
But why, why world does it have to be so


00:38:29.460 --> 00:38:32.100
hard? I just want to put a picture. Is it amazing


00:38:32.100 --> 00:38:33.940
how it used to be YouTube embeds were the


00:38:33.940 --> 00:38:35.620
absolute gold standard for embedding video


00:38:35.620 --> 00:38:37.220
on a web page? Like why would


00:38:37.220 --> 00:38:38.500
you do anything else? And now actually


00:38:38.500 --> 00:38:41.460
I'm beginning to think, you know what


00:38:41.460 --> 00:38:42.660
host the video the .mp.mod file or


00:38:42.660 --> 00:38:44.900
whatever yourself


00:38:44.900 --> 00:38:46.180
and stick on an HTML5 video embed


00:38:46.180 --> 00:38:48.500
and that's probably a better


00:38:46.180 --> 00:38:48.060
experience for your users as well.


00:38:48.060 --> 00:38:49.660
Because, you know, when they click the video


00:38:49.660 --> 00:38:51.340
on their mobile phone, it'll play full screen


00:38:51.340 --> 00:38:53.340
and they won't have to hop through to the YouTube app


00:38:53.340 --> 00:38:54.700
and all of that kind of thing.


00:38:54.700 --> 00:38:56.660
- Yeah, absolutely.


00:38:56.660 --> 00:38:58.860
Yeah, so anyway, just quick shout out, like,


00:38:58.860 --> 00:39:01.120
this is taking several passes,


00:39:01.120 --> 00:39:06.120
but I think it's finally 100% no tracking.


00:39:06.120 --> 00:39:07.700
I mean, we weren't putting it there before,


00:39:07.700 --> 00:39:09.660
but like it was seeping in from just like


00:39:09.660 --> 00:39:11.980
what we might include on the page as content, right?


00:39:11.980 --> 00:39:15.060
And so anyway, there you have it, Brian.


00:39:15.060 --> 00:39:16.060
That was my weekend.


00:39:16.060 --> 00:39:18.060
-How was yours? -Nice. Well, thanks.


00:39:18.060 --> 00:39:20.260
I appreciate you doing all that work for us.


00:39:20.260 --> 00:39:22.260
Yeah.


00:39:22.260 --> 00:39:24.500
David Cullen has the wash hands emoji.


00:39:24.500 --> 00:39:26.560
-There we go. We're all better. -Yeah.


00:39:26.560 --> 00:39:29.160
Well, I've got no extras.


00:39:29.160 --> 00:39:31.360
Simon, do you have anything extra you want to share?


00:39:31.360 --> 00:39:34.720
I've got one. So, Textual is the...


00:39:34.720 --> 00:39:37.820
Will McGugan, who's working on Witch, has been building Textual,


00:39:37.820 --> 00:39:39.860
which I know you've talked about on the podcast before.


00:39:39.860 --> 00:39:42.700
What I would encourage people to do is pay close attention


00:39:42.760 --> 00:39:45.020
because I've never seen a piece of open source software


00:39:45.020 --> 00:39:46.600
developed this quickly.


00:39:46.600 --> 00:39:50.160
Like every day he's posting this video where he's like,


00:39:50.160 --> 00:39:52.960
oh, and here's the new feature where today he posted a video


00:39:52.960 --> 00:39:57.440
of it doing full like tree view on a file system,


00:39:57.440 --> 00:39:59.360
which you could interact with with your mouse


00:39:59.360 --> 00:40:00.480
in the terminal.


00:40:00.480 --> 00:40:01.520
And when you clicked on the file,


00:40:01.520 --> 00:40:02.920
it would open it in a separate panel


00:40:02.920 --> 00:40:06.280
with syntax highlighting.


00:40:06.280 --> 00:40:09.140
It's absolutely astonishing.


00:40:09.140 --> 00:40:11.400
It's like turning into one of the better ways


00:40:11.400 --> 00:40:14.600
Building a gooey application and it's running in in text in the terminal


00:40:14.600 --> 00:40:21.880
We can almost have just a section of the show called. What's what's will up to you really could absolutely


00:40:21.880 --> 00:40:26.680
He's re-implemented css grid the css grid mechanism


00:40:26.680 --> 00:40:33.880
For terminal applications, it's brilliant. And yeah, i'm just having such great time watching him do all of this stuff


00:40:33.880 --> 00:40:36.600
And he seems to be live streaming it


00:40:39.000 --> 00:40:42.360
I don't think so, but he posts like little five minute videos on twitter every day


00:40:42.360 --> 00:40:44.440
Stuff that he's doing


00:40:44.440 --> 00:40:48.920
But I I feel inadequate watching him work this fast, but just saying


00:40:48.920 --> 00:40:50.840
It's such a delight though


00:40:50.840 --> 00:40:55.960
It's like he was he was born to build this piece of software and now he's building it and we all get to watch him


00:40:55.960 --> 00:40:57.960
Do it. Yeah, that's great


00:40:57.960 --> 00:41:04.600
Yeah, henry shredder. Hey out in the live stream says textual is amazing indeed. It's it's quite uh quite something


00:41:06.040 --> 00:41:22.400
Yeah, and I know I remember when he was trying to name it and textual didn't even come up on my radar as something that might be possible, but it's it's so obvious now like graphical and textual. Yeah, makes sense. It's cool. So, hey, about a joke, maybe.


00:41:22.400 --> 00:41:32.720
Oh, man, I got some jokes for us. Two jokes. The one I'm not really sure how to convey it. But I guess I'll do my best.


00:41:32.800 --> 00:41:33.820
- I don't know what you're saying.


00:41:33.820 --> 00:41:36.160
- No, man, this is you, this is you, brother.


00:41:36.160 --> 00:41:40.080
All right, so first one here is,


00:41:40.080 --> 00:41:41.400
I could definitely do this one.


00:41:41.400 --> 00:41:43.360
This one is from John on Twitter,


00:41:43.360 --> 00:41:44.960
but pointed out to us by Nick Moore,


00:41:44.960 --> 00:41:47.480
who was previously on the show not too long ago.


00:41:47.480 --> 00:41:48.840
Thanks, Nick.


00:41:48.840 --> 00:41:51.840
And this one poses, I think also this is perfect


00:41:51.840 --> 00:41:53.880
for when Simon is on the show.


00:41:53.880 --> 00:41:56.360
It says, "What do you get when you select star


00:41:56.360 --> 00:42:00.780
"from goblins, dragons, elves, comma, unicorns?"


00:42:02.000 --> 00:42:03.620
- A query tale.


00:42:03.620 --> 00:42:06.320
- Oh my goodness.


00:42:06.320 --> 00:42:09.440
- It's a fairy tale, a query tale.


00:42:09.440 --> 00:42:10.280
It's bad.


00:42:10.280 --> 00:42:11.200
- It's terrible, it's bad.


00:42:11.200 --> 00:42:12.040
- Oh, wow.


00:42:12.040 --> 00:42:15.960
- Well, I wanted to share one


00:42:15.960 --> 00:42:17.760
that people could actually share with their,


00:42:17.760 --> 00:42:18.840
this isn't in the list,


00:42:18.840 --> 00:42:21.360
but one that I just read recently,


00:42:21.360 --> 00:42:23.560
people might be able to share with their kids.


00:42:23.560 --> 00:42:27.240
In the Northwest, we've got Sasquatch, right?


00:42:27.240 --> 00:42:29.160
So, you know what they- - Bigfoot, yep.


00:42:29.160 --> 00:42:31.360
- Yeah, what do they call Bigfoot in Europe?


00:42:31.360 --> 00:42:33.360
Big meter


00:42:33.360 --> 00:42:44.120
Quick tip if you're ever near Santa Cruz in California


00:42:44.120 --> 00:42:50.700
There is a Bigfoot museum in a log cabin in the woods outside of Santa Cruz called the Bigfoot discovery experience


00:42:50.700 --> 00:42:52.040
And it is not a joke


00:42:52.040 --> 00:42:57.000
It is very serious and there is a man there who will take you through all of his evidence for Bigfoot


00:42:57.000 --> 00:43:03.700
And it takes about an hour. He's got maps and plaster casts of feet footprints and a map with pins on it and bit it's


00:43:03.700 --> 00:43:09.140
Fascinating I could not recommend it more. Yeah, I wonder if the COVID


00:43:09.140 --> 00:43:15.920
Pandemic has affected the Bigfoot population. Oh you you should well go go go


00:43:15.920 --> 00:43:18.760
You can call him up and ask him. Well, I was talking to him


00:43:18.760 --> 00:43:22.440
He got a phone call to answer questions about Bigfoot. So he will


00:43:22.440 --> 00:43:26.000
Yeah


00:43:26.120 --> 00:43:29.080
Hey, Brian, your joke got it grown all the way from Australia.


00:43:29.080 --> 00:43:31.420
Nice.


00:43:31.420 --> 00:43:35.080
Or was it mine? I'm not sure. It could have been either, honestly.


00:43:35.080 --> 00:43:35.580
Yeah.


00:43:35.580 --> 00:43:37.080
I'm going to go with the meter one.


00:43:37.080 --> 00:43:39.560
They were both pretty bad.


00:43:39.560 --> 00:43:47.720
I'll see what I can do with this next one here. So if you're a kid of the 90s, I guess,


00:43:47.720 --> 00:43:51.080
guess is probably the time. There's a pinky in the brain.


00:43:51.080 --> 00:43:57.600
And apparently, on one of the 10 places I have to write your


00:43:57.600 --> 00:44:00.160
name, I typed it too quickly and wrote brain.


00:44:00.160 --> 00:44:03.200
And break and caught it.


00:44:03.200 --> 00:44:10.840
So he did a take on pinky in the brain. And it starts out, what


00:44:10.840 --> 00:44:12.320
do you want to do today, Brian?


00:44:12.320 --> 00:44:15.840
Same thing we do everything with everyone's day, Michael help


00:44:15.840 --> 00:44:17.360
Python take over the world.


00:44:17.360 --> 00:44:20.200
- Ah, it's Michael and the brain.


00:44:20.200 --> 00:44:22.000
Yes, Michael and the brain.


00:44:22.000 --> 00:44:25.080
One's into testing, others into GUIs.


00:44:25.080 --> 00:44:27.560
They're both into making Python seem sane.


00:44:27.560 --> 00:44:31.280
They're Michael, they're Michael and the brain, brain, brain.


00:44:31.280 --> 00:44:32.640
Yeah, yeah.


00:44:32.640 --> 00:44:34.320
Fantastic. - I love it.


00:44:34.320 --> 00:44:35.400
- Thank you. - Phenomenal.


00:44:35.400 --> 00:44:38.000
- We need to have somebody that's got like musical talent


00:44:38.000 --> 00:44:40.440
to actually put this together as something.


00:44:40.440 --> 00:44:42.280
So, anyway. - Yes.


00:44:42.280 --> 00:44:45.520
Someone who is not me 'cause it won't come out well.


00:44:45.520 --> 00:44:48.480
So we'll put it in the, with the lyrics in the show notes,


00:44:48.480 --> 00:44:49.640
I think we should leave them there.


00:44:49.640 --> 00:44:51.640
- We are accepting submissions.


00:44:51.640 --> 00:44:52.480
- Yes.


00:44:52.480 --> 00:44:54.080
- And if they are, if they pass,


00:44:54.080 --> 00:44:57.160
we may actually play them on one of the next episodes.


00:44:57.160 --> 00:44:58.720
- Oh, I'd love it.


00:44:58.720 --> 00:45:00.400
- Could be the new theme song, Brian.


00:45:00.400 --> 00:45:01.240
- Yeah.


00:45:01.240 --> 00:45:02.520
- The dawning of an era.


00:45:02.520 --> 00:45:04.760
- I'm getting tired of the old theme song.


00:45:04.760 --> 00:45:06.420
- Yeah, exactly.


00:45:06.420 --> 00:45:07.920
Which is no theme song.


00:45:07.920 --> 00:45:10.320
(laughing)


00:45:10.320 --> 00:45:13.720
- All right, well, thanks a lot for showing up, Michael.


00:45:13.720 --> 00:45:14.920
And thanks, Simon.


00:45:14.920 --> 00:45:16.640
- Yeah, thanks for having me.


00:45:16.640 --> 00:45:18.560
- Yep, you bet, bye everyone.


00:45:18.560 --> 00:45:19.400
- Okay.


00:45:19.400 --> 00:45:29.400
[BLANK_AUDIO]

