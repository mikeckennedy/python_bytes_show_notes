WEBVTT

00:00:00.001 --> 00:00:04.300
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04.300 --> 00:00:10.160
your earbuds. This is episode 226, recorded March 24th, 2021. I'm Michael Kennedy.

00:00:10.160 --> 00:00:11.340
And I'm Brian Okken.

00:00:11.340 --> 00:00:13.380
And I'm Kelly Schuster-Paredes.

00:00:13.380 --> 00:00:14.580
And I'm Sean Tyber.

00:00:14.580 --> 00:00:18.460
Kelly and Sean, welcome. It's great to have you both here. Super,

00:00:18.460 --> 00:00:20.560
super excited to have some teachers in the house.

00:00:20.560 --> 00:00:22.600
Super excited to be here.

00:00:22.600 --> 00:00:27.540
Yeah. So if people don't know, Kelly and Sean are hosts of Teaching Python. Is that right?

00:00:27.540 --> 00:00:28.360
For the podcast?

00:00:28.360 --> 00:00:29.180
That's correct.

00:00:29.540 --> 00:00:33.680
Right. So Kelly is the teacher that codes and I am, thanks to our new merchandise,

00:00:33.680 --> 00:00:34.600
the coder that teaches.

00:00:34.600 --> 00:00:37.880
So that's fantastic.

00:00:37.880 --> 00:00:45.160
Yeah. So you guys both run together, co-host a great podcast. And what's the general focus?

00:00:45.160 --> 00:00:49.740
Like if I was in the general teaching space and I wanted to learn how to bring like Python and

00:00:49.740 --> 00:00:52.560
technology into my classroom, that's the main audience. What would you say?

00:00:52.560 --> 00:00:58.500
The main audience, well, has grown. It originally was designed just for teachers. And I think we

00:00:58.500 --> 00:01:06.840
thought that they would be K-12 or maybe college teachers, but it has developed into teachers in the developer world and businesses.

00:01:06.840 --> 00:01:15.180
And we kind of bounce off each other's ideas. I am a love lifer teacher and Sean is a geek.

00:01:15.180 --> 00:01:16.180
Yeah.

00:01:16.180 --> 00:01:16.180
Yeah.

00:01:16.180 --> 00:01:16.180
Yeah.

00:01:16.180 --> 00:01:16.680
Yeah.

00:01:16.680 --> 00:01:19.200
And together you have the superpower. Fantastic.

00:01:19.200 --> 00:01:19.520
Yeah.

00:01:19.520 --> 00:01:28.960
Yeah. So we've been learning a lot from each other over the last couple of years and having great conversations about what it means to be teaching code and why it's important and why it matters.

00:01:30.020 --> 00:01:50.200
You know, this is such a huge part of everyone's lives now. And the earlier that we can start with students and helping them learn about coding, it really helps them in so many other areas of their lives. So Kelly and I just started recording it. We one day started pressing record on it, publishing the podcast. And I think we're a couple hundred thousand downloads later, still going strong.

00:01:50.360 --> 00:02:02.960
Yeah. That's fantastic. You know, I, one of my passions is that I think people really, we don't need a million more CS students. What we need is a million people who have programming, fluency, and are passionate about something else and can combine those two things.

00:02:02.960 --> 00:02:04.460
So, yeah. Spot on.

00:02:04.460 --> 00:02:13.460
I get a lot out of the podcast just as somebody that I don't, I'm not a teacher, but I teach people. So there's a lot of stuff around that too. So I like the podcast.

00:02:13.460 --> 00:02:14.040
Thank you.

00:02:14.040 --> 00:02:14.620
Thanks.

00:02:14.620 --> 00:02:16.200
You like data classes?

00:02:16.200 --> 00:02:32.340
I really like data classes a lot. Yeah. And it's kind of why I'm covering this. So there's a, there's an article called, called by a person, Jack Song, who wrote data classes versus name tuple versus object, a battle of performance.

00:02:32.560 --> 00:02:46.980
And it's, you know, it's a, I was interested in this because I, I kind of thought that, that the data, I was, I really liked data classes, but I thought I heard from somewhere that like they were slower than other stuff.

00:02:46.980 --> 00:03:02.420
I had used a, basically I used to use name tuples a lot, but I really liked the data class abstraction and, and the features that it has. And I was slightly concerned. I mean, not very, very much because they, they work fast enough for me, but I was interested.

00:03:02.420 --> 00:03:18.600
I am interested in whether or not I am intentionally putting something in the code that I might have to refactor later. But so this, this article, he, he does a, a test example or, and times it for using exit.

00:03:18.600 --> 00:03:23.600
Let's see. Let me read this.

00:03:23.600 --> 00:03:28.600
So there's a, I think, you know, I think it's a test, but I think it's a test.

00:03:28.600 --> 00:03:29.600
But I think that's a test.

00:03:29.600 --> 00:03:30.600
And I think it's a test.

00:03:30.600 --> 00:03:31.600
I think it's a test.

00:03:31.600 --> 00:03:32.600
And I think, you know, I think it's a test.

00:03:32.600 --> 00:03:33.600
And I think it's a test.

00:03:33.600 --> 00:03:34.600
But I'm not going to be able to test it.

00:03:34.600 --> 00:03:35.600
And I think that's a test.

00:03:35.600 --> 00:03:36.600
And that's a test.

00:03:36.600 --> 00:03:37.600
And I think that's a test.

00:03:37.600 --> 00:03:38.600
And that's a test.

00:03:38.600 --> 00:03:39.600
And I'm going to get it.

00:03:39.600 --> 00:03:40.600
And I think that's a test.

00:03:40.600 --> 00:03:41.600
And I think that's a test.

00:03:41.600 --> 00:03:42.600
It's about a wash.

00:03:42.600 --> 00:03:44.600
They're all kind of similar.

00:03:44.600 --> 00:03:47.600
So whatever works for your code, I say, go with it.

00:03:47.600 --> 00:03:49.600
But I'd like to hear from other people.

00:03:49.600 --> 00:03:58.600
I'd like to, I'd like to know if, if there's other studies out there that compare these and either validate the same thing or find some different result.

00:03:58.600 --> 00:04:00.600
I'd love to hear from it from people.

00:04:00.600 --> 00:04:00.600
Yeah.

00:04:00.600 --> 00:04:02.600
A lot of these are measured in microseconds.

00:04:02.600 --> 00:04:07.600
And that's kind of beyond human comprehension, unless you do a whole bunch of them.

00:04:07.600 --> 00:04:08.600
Yeah.

00:04:08.600 --> 00:04:09.600
And then add those up.

00:04:09.600 --> 00:04:15.600
So for me, I think one of the real valuable things is, you know, like the data classes, they can specify types.

00:04:15.600 --> 00:04:20.600
Like this thing is an integer and that thing is a date time and that's a string and that's an optional string.

00:04:20.600 --> 00:04:22.600
And I think that communicates a whole lot.

00:04:22.600 --> 00:04:27.600
And then sort of follow on, like you can easily extend that to things like Pydantic for validation and conversion.

00:04:27.600 --> 00:04:34.600
And, you know, unless they're really far off, I think that this extra information that communicates is highly valuable.

00:04:34.600 --> 00:04:35.600
Yeah.

00:04:35.600 --> 00:04:39.600
I was going to ask Kelly and Sean, like, do you even talk about types, data types?

00:04:39.600 --> 00:04:42.600
And how do you cover that with the younger generation?

00:04:42.600 --> 00:04:45.600
I was actually just teaching that about an hour ago to students.

00:04:45.600 --> 00:04:52.600
We cover that in the very first week about how objects have types and what you can do with different types of information.

00:04:52.600 --> 00:05:01.600
And it's a really basic thing that I think they need to know from the beginning because later on it just gets really confusing if you don't have at least this concept of typing.

00:05:01.600 --> 00:05:02.600
Yeah.

00:05:02.600 --> 00:05:05.600
We do try to, you know, using type hints here and there.

00:05:05.600 --> 00:05:09.600
And I find that sometimes with teaching it's helpful because they have that visual reference.

00:05:09.600 --> 00:05:18.600
Like, oh, if I'm designing a function or I'm making a method in as part of a class, I can hint at what the types are and the students can see that as we're coding together.

00:05:18.600 --> 00:05:23.600
And it makes it much clearer for them what the arguments are going to be or what the return values are going to look like.

00:05:23.600 --> 00:05:28.600
I was actually looking at this article from a whole I do this, you know, 360 kind of look.

00:05:28.600 --> 00:05:36.600
I was reading this article and I was like, oh, my gosh, I love this because now I have an entryway into telling the kids about the e-finance.

00:05:36.600 --> 00:05:41.600
And I was telling Sean, I was like, do you know that Vimbo was Vimbo was coded in Python?

00:05:41.600 --> 00:05:43.600
And I do this all the time.

00:05:43.600 --> 00:05:47.600
So this whole FinTech data classes kind of push for the kids.

00:05:47.600 --> 00:05:51.600
And then I started searching real Python, as I always do.

00:05:51.600 --> 00:05:57.600
And they have a great article about how they use data classes with the cards, playing cards.

00:05:57.600 --> 00:06:00.600
So it's something that we don't really do the data classes part.

00:06:00.600 --> 00:06:02.600
But I do talk about a lot of data types.

00:06:02.600 --> 00:06:03.600
I thought it was.

00:06:03.600 --> 00:06:06.600
Yeah, OK. Yeah, that's pretty neat that you actually do cover.

00:06:06.600 --> 00:06:11.600
I mean, you're going to run into problems if you try to concatenate an integer with a string, it's going to crash.

00:06:11.600 --> 00:06:13.600
And so you kind of got to say, look, numbers and numbers can go together.

00:06:13.600 --> 00:06:15.600
Strings and strings can go together.

00:06:15.600 --> 00:06:17.600
You don't have to go too deep in that theory, though.

00:06:17.600 --> 00:06:18.600
Yeah.

00:06:18.600 --> 00:06:20.600
My sixth graders can regurgitate it.

00:06:20.600 --> 00:06:21.600
They can't stop.

00:06:21.600 --> 00:06:22.600
Fantastic.

00:06:22.600 --> 00:06:29.600
One of the things I love about data classes is that you can specify the default values for all the fields.

00:06:29.600 --> 00:06:32.600
And you can do that with named tuples, but it's weird.

00:06:32.600 --> 00:06:34.600
It's a weird add on that you have to do.

00:06:34.600 --> 00:06:38.600
Yeah, I've always found named tuples to be a little bit confusing to explain to other people.

00:06:38.600 --> 00:06:41.600
Like once you get it, you know it, but then you're trying to teach it to someone else.

00:06:41.600 --> 00:06:46.600
They're like, OK, it has this weird construct that doesn't, doesn't follow a lot of the other stuff.

00:06:46.600 --> 00:06:59.600
But I do like the data classes because it seems to follow along with a string of really nice language features like with f-strings and data classes where, you know, whether you want to use them or not, the they're well optimized and efficient compared to other options.

00:06:59.600 --> 00:07:02.600
You know, f-strings can be faster in a lot of cases than previous formatting.

00:07:02.600 --> 00:07:05.600
Looks like data classes are continuing that trend in a really nice way.

00:07:05.600 --> 00:07:06.600
Yeah.

00:07:06.600 --> 00:07:07.600
Yeah. Cool.

00:07:07.600 --> 00:07:08.600
All right. This next one I want to cover.

00:07:08.600 --> 00:07:17.600
But before I show on the screen, I want to ask you to guess, do you do stuff with any like micro micro things like raspberry pie or any fruit stuff?

00:07:17.600 --> 00:07:18.600
No.

00:07:18.600 --> 00:07:19.600
Sean.

00:07:19.600 --> 00:07:20.600
You should throw them at me.

00:07:20.600 --> 00:07:24.600
It's not, it's not a ninja star.

00:07:24.600 --> 00:07:26.600
It's a, what are those express boards?

00:07:26.600 --> 00:07:27.600
Yeah.

00:07:27.600 --> 00:07:29.600
Sean loves them.

00:07:29.600 --> 00:07:31.600
Yeah, we have a ton of them in the classroom.

00:07:31.600 --> 00:07:35.600
Kelly has a love, hate, mostly hate relationship with hardware.

00:07:35.600 --> 00:07:39.600
But we have a lot of hardware that we use for coding and Python and making things happen.

00:07:39.600 --> 00:07:40.600
Nice.

00:07:40.600 --> 00:07:41.600
All right.

00:07:41.600 --> 00:07:46.600
So let me, let me put this one here on the screen and let me take, take apart the title because there's a lot going on here.

00:07:46.600 --> 00:07:54.600
So this person, I, I, I'm not sure the name of the person actually runs this blog, but it's the DIY life about like little micro things.

00:07:54.600 --> 00:07:57.600
And oh no, it's by Michael Clements right there.

00:07:57.600 --> 00:08:03.600
And the title is, can my water cooled raspberry pie cluster be my Mac book.

00:08:03.600 --> 00:08:06.600
So this guy built a water cool.

00:08:06.600 --> 00:08:12.600
He has a water cooled raspberry pie, a little pieces, and then got a cluster of eight of them all running together.

00:08:12.600 --> 00:08:15.600
And he said, well, this is pretty amazing.

00:08:15.600 --> 00:08:18.600
Let me see if I can get this video to like sort of move up.

00:08:18.600 --> 00:08:24.600
So y'all can see in the section here where, where they're, this is a crazy looking device here.

00:08:24.600 --> 00:08:26.600
How long as we get rid of all that.

00:08:26.600 --> 00:08:33.600
It's like what it sounds like a cluster of eight raspberry pies all working together and they're literally water cooled.

00:08:33.600 --> 00:08:33.600
So they don't overheat.

00:08:33.600 --> 00:08:43.600
And the question was, well, let's like throw some Python math at it and see if there's like a good thing for say like data science, or you know, maybe you got kids, you want to learn stuff on it or whatever.

00:08:43.600 --> 00:08:44.600
And you know, how'd it go?

00:08:44.600 --> 00:08:45.600
So there's a lot of interesting things.

00:08:45.600 --> 00:08:52.600
And I guess, you know, one of the first takeaways is just wait, there's raspberry pie clusters and they're water cooled.

00:08:52.600 --> 00:08:53.600
What is this?

00:08:53.600 --> 00:08:54.600
This is crazy.

00:08:54.600 --> 00:08:55.600
Does this surprise you?

00:08:55.600 --> 00:08:56.600
No.

00:08:56.600 --> 00:08:57.600
So I had seen this before.

00:08:57.600 --> 00:09:01.600
I think I've actually seen one of these in person and they have people have been building cases for these.

00:09:01.600 --> 00:09:04.600
It'll hold eight, 12, 16 of these stacked up.

00:09:04.600 --> 00:09:11.600
And it, I always thought of it as a way to inexpensively learn about parallelizing, you know, clusters of machines, right?

00:09:11.600 --> 00:09:16.600
Like you can buy or build a cluster for a few hundred bucks instead of thousands of dollars.

00:09:16.600 --> 00:09:23.600
So they're great for learning, but I never thought anybody would try to like water cool it and make a performance rig out of it.

00:09:23.600 --> 00:09:24.600
Exactly.

00:09:24.600 --> 00:09:25.600
Exactly.

00:09:25.600 --> 00:09:26.600
It's really wild.

00:09:26.600 --> 00:09:27.600
It's really wild.

00:09:27.600 --> 00:09:41.600
So the other thing that I think is an interesting takeaway that I'm not going to cover because there's just too many little details and they rip by really fast in this presentation that I'm linking to, but there's all these tools for running Python code distributed across just

00:09:41.600 --> 00:09:43.600
multiple nodes of things that run Python.

00:09:43.600 --> 00:09:50.600
So the way they set it up over SSH to make them communicate and do message sharing so they can parallelize the computation is pretty neat.

00:09:50.600 --> 00:09:52.600
And I think it applies beyond the pies.

00:09:52.600 --> 00:09:55.600
It's just anything you can SSH to more or less.

00:09:55.600 --> 00:09:56.600
So that's pretty interesting.

00:09:56.600 --> 00:09:59.600
So for some numbers, is there some numbers in here?

00:09:59.600 --> 00:10:01.600
I know he's got some graphs, but I don't know.

00:10:01.600 --> 00:10:02.600
They put the numbers.

00:10:02.600 --> 00:10:04.600
I think the numbers are just in the video.

00:10:04.600 --> 00:10:05.600
Oh, wait, here we go.

00:10:05.600 --> 00:10:08.600
So I'll just read them off this and give you some real quick numbers.

00:10:08.600 --> 00:10:13.600
So he has this like wimpy core I five HP laptops.

00:10:13.600 --> 00:10:15.600
What are we going to compute the number?

00:10:15.600 --> 00:10:19.600
Find all the primes up to a number 10,000, 100,000, 200,000.

00:10:19.600 --> 00:10:27.600
So for the HP, it's like one and a half seconds, 74 seconds, and then almost five minutes, 267 seconds.

00:10:27.600 --> 00:10:34.600
So let me grab my MacBook Air, older one, not the M1 and says, OK, that thing's a lot quicker, actually, surprisingly.

00:10:34.600 --> 00:10:36.600
So 0.8 seconds and 83 seconds.

00:10:36.600 --> 00:10:37.600
Actually, that's a little slower.

00:10:37.600 --> 00:10:42.600
And then as it gets longer, I think because it doesn't have the right cooling, the longer it takes, the more it slows down.

00:10:42.600 --> 00:10:50.600
And then he says, let me run it on one node on the cluster, which is 1.5 seconds, which is actually faster than the HP, but not quite as fast as the MacBook Air.

00:10:50.600 --> 00:10:58.600
And then runs it on the grid and gets it down to instead of 355 seconds to 85 seconds for 200,000 of them.

00:10:58.600 --> 00:10:59.600
So it's pretty fast, right?

00:10:59.600 --> 00:11:03.600
I mean, compared to these old slower computers that that's kind of chugging along.

00:11:03.600 --> 00:11:04.600
Yeah.

00:11:04.600 --> 00:11:07.600
These new Raspberry Pi fours that are out the latest version.

00:11:07.600 --> 00:11:10.600
I mean, they're really fast and really powerful.

00:11:10.600 --> 00:11:17.600
Like people are using them to transcode, you know, video streams for Plex servers and Plex devices and things like that.

00:11:17.600 --> 00:11:20.600
You can run your whole house on it with home automation.

00:11:20.600 --> 00:11:23.600
Like there's a lot of power and it's still just like 35 bucks.

00:11:23.600 --> 00:11:24.600
Yeah, that's crazy.

00:11:24.600 --> 00:11:29.600
People are running using like ad blocking DNS things for their local networks, all sorts of interesting things.

00:11:29.600 --> 00:11:34.600
So, well, I couldn't resist running this on my two things that I have to see what I would get.

00:11:34.600 --> 00:11:38.600
So I have an M1 Mac mini, which is quite fast.

00:11:38.600 --> 00:11:40.600
Those M1 chips are really crazy.

00:11:40.600 --> 00:11:48.600
And so instead of having 355 seconds on the MacBook Air or 85 seconds on the eight core watercooled cluster,

00:11:48.600 --> 00:11:53.600
mines 91 seconds on my Mac mini and it doesn't make a sound or get warm, which is crazy.

00:11:53.600 --> 00:11:55.600
That's single threaded.

00:11:55.600 --> 00:12:00.600
And then I ran it multi threaded and got it down to 26 seconds, which was pretty interesting.

00:12:00.600 --> 00:12:01.600
Yeah.

00:12:01.600 --> 00:12:05.600
And if you look at the actual, this is the CPU load over time.

00:12:05.600 --> 00:12:10.600
And it turns out the way the algorithm they're using to break it down is the longer ones are much longer.

00:12:10.600 --> 00:12:11.600
So the early ones finish.

00:12:11.600 --> 00:12:12.600
It's not an even distribution.

00:12:12.600 --> 00:12:15.600
So actually there's some room for improvements or whatever there.

00:12:15.600 --> 00:12:19.600
But the other one I want to just show you all, because this is kind of crazy.

00:12:19.600 --> 00:12:26.600
I have a an Alienware sim racing setup that I have and it actually just blew it.

00:12:26.600 --> 00:12:29.600
So it did 200,000 in 10 seconds.

00:12:29.600 --> 00:12:31.600
But there's a price one that is expensive.

00:12:31.600 --> 00:12:34.600
I mean, that's like a straight price, but there's also a price in sound.

00:12:34.600 --> 00:12:36.600
Like I actually recorded it because it was so loud.

00:12:36.600 --> 00:12:37.600
Let me just play it back.

00:12:37.600 --> 00:12:41.600
Here it is just sitting there nice and quiet.

00:12:41.600 --> 00:12:46.600
It's starting to make some noise.

00:12:46.600 --> 00:12:53.600
I'll just keep talking normal so you can compare.

00:12:53.600 --> 00:12:58.600
But it's really kicking in right now.

00:12:58.600 --> 00:12:59.600
I'll move over close to it in a minute.

00:12:59.600 --> 00:13:12.600
How about that?

00:13:12.600 --> 00:13:18.600
That thing is screaming like you could barely talk over it if you're in the same room, but 10 seconds.

00:13:18.600 --> 00:13:19.600
It is pretty fast.

00:13:19.600 --> 00:13:23.600
I think I have a robot vacuum that's quieter than that when it's running.

00:13:23.600 --> 00:13:26.600
I think you need to crack that open and water cool it.

00:13:27.600 --> 00:13:32.600
You know, actually, this is the highest performance one you could buy from Dell from Alienware.

00:13:32.600 --> 00:13:33.600
That's not water cool.

00:13:33.600 --> 00:13:36.600
And I'm like, I don't really want to have to maintain my computer.

00:13:36.600 --> 00:13:37.600
So I'm not getting a water cold one.

00:13:37.600 --> 00:13:40.600
I don't want to like take it in for its oil change or whatever.

00:13:40.600 --> 00:13:42.600
No, thanks.

00:13:42.600 --> 00:13:55.600
In the original discussion in the video, there is a it's a it's single threaded for all the computers and then parallel on the on the mini or the not the minis, the pies pies.

00:13:55.600 --> 00:13:55.600
Yeah.

00:13:55.600 --> 00:13:55.600
Yeah.

00:13:55.600 --> 00:13:56.600
Yeah.

00:13:56.600 --> 00:14:00.600
But but then in the comments, some people said, well, what about that?

00:14:00.600 --> 00:14:05.600
And so there's there's an update with all the data with the parallel to and it's still really fast on the parallel.

00:14:05.600 --> 00:14:10.600
But I think it's interesting to have the speed comparison.

00:14:10.600 --> 00:14:22.600
But I think one of the things that's important that Sean points out is you get like two or three of these and you can start to explore parallel computing and distributed computing with under $100.

00:14:22.600 --> 00:14:26.600
So that's don't give please don't give him any more ideas.

00:14:26.600 --> 00:14:28.600
We have things all over the classroom.

00:14:28.600 --> 00:14:30.600
I don't need any more likes.

00:14:30.600 --> 00:14:35.600
I think Kelly, is there something you can water cool maybe like set up a water cool thing.

00:14:35.600 --> 00:14:39.600
No, but I am going to get the water gun and start squirting him over it.

00:14:39.600 --> 00:14:40.600
If he keeps if he brings it.

00:14:40.600 --> 00:14:46.600
But like a comparison, though, would be like trying to get what six Mac minis together.

00:14:46.600 --> 00:14:48.600
And that's expensive, right?

00:14:48.600 --> 00:14:49.600
So that's a lot.

00:14:49.600 --> 00:14:50.600
Right.

00:14:50.600 --> 00:14:54.600
And a lot of classrooms might have some of these laying around from other projects that you've done or a class set.

00:14:54.600 --> 00:15:01.600
And if you wanted to have a student do an individual project with it, you just start putting it together and you can make it work.

00:15:01.600 --> 00:15:04.600
It doesn't have to be water cooled in order to be a good learning experience.

00:15:04.600 --> 00:15:07.600
So what is it with that is he's overclocking it.

00:15:07.600 --> 00:15:09.600
Is that the reason why it needs to be cool?

00:15:09.600 --> 00:15:13.600
Yeah, yeah, you can you can push them pretty hard and they they heat up.

00:15:13.600 --> 00:15:17.600
There's just a small chip on it and most of them will you'll see people put fans and things like that on it.

00:15:17.600 --> 00:15:23.600
But the water cooling is the next level of I'm trying to push a pie really, really far.

00:15:23.600 --> 00:15:32.600
I will point out in the they in the video, they link to a multi threaded thing script and I ran the multi threaded script and it gave me the same times.

00:15:32.600 --> 00:15:33.600
And the seat.

00:15:33.600 --> 00:15:34.600
It only seemed to be using one CPU.

00:15:34.600 --> 00:15:38.600
It ran a bunch of stuff, but then I'll put all the work onto one of the cores.

00:15:38.600 --> 00:15:43.600
So in the show notes, I wrote my own version that's truly multi threaded and it's up there.

00:15:43.600 --> 00:15:48.600
So also Sam Morley out of the chat out of the live stream says I was great.

00:15:48.600 --> 00:15:50.600
Yeah, this I've been thinking about setting one of these up.

00:15:50.600 --> 00:15:51.600
It sounds fun.

00:15:51.600 --> 00:15:53.600
All right, Kelly, I think you're up next with this one, right?

00:15:53.600 --> 00:15:54.600
Yeah, so it kind of segues.

00:15:54.600 --> 00:15:56.600
Well, you have the Raspberry Pi.

00:15:56.600 --> 00:16:00.600
That's something easy for a lot of students to get into.

00:16:00.600 --> 00:16:01.600
It's cost worthy and stuff.

00:16:01.600 --> 00:16:03.600
I'm going to throw this out there.

00:16:03.600 --> 00:16:05.600
It's the app for that.

00:16:05.600 --> 00:16:06.600
This is programs.

00:16:06.600 --> 00:16:09.600
And I'm sure everyone has heard of this website.

00:16:09.600 --> 00:16:10.600
It's a platform.

00:16:10.600 --> 00:16:13.600
It's got 50 million people on it.

00:16:13.600 --> 00:16:18.600
But what's really cool for me is that I'm always looking for something to do on the go.

00:16:18.600 --> 00:16:23.600
And I download this program as and it's on iOS now, which is great.

00:16:23.600 --> 00:16:25.600
It launched in iOS last year.

00:16:25.600 --> 00:16:32.600
And the thing that I love about this over all the other apps out there is it's got a really great IDE interactive shell.

00:16:32.600 --> 00:16:33.600
It's beautiful.

00:16:33.600 --> 00:16:37.600
I don't know if you've ever gone to the website of programmers or program is.

00:16:37.600 --> 00:16:38.600
I don't know how you pronounce it.

00:16:38.600 --> 00:16:40.600
And it's very clean.

00:16:40.600 --> 00:16:44.600
So you'll see the same sort of website design on their app.

00:16:44.600 --> 00:16:45.600
Everything's interactive.

00:16:45.600 --> 00:16:47.600
They have challenges and programs.

00:16:47.600 --> 00:17:00.600
But putting that aside, the whole reason why I put this out there is we just had so many kids online from COVID-19 and the digital divide and the kids not being able to access.

00:17:00.600 --> 00:17:07.600
I went and I looked in UNESCO and I was trying to find out how many kids were actually trying to learn online last year.

00:17:07.600 --> 00:17:10.600
And they estimated about 826 million learners.

00:17:10.600 --> 00:17:15.600
And like out of all those learners, 50% of those people did not have a household computer.

00:17:15.600 --> 00:17:25.600
So these guys who are out of Nepal have brought Python where you can code and learn and program within this tiny little app.

00:17:25.600 --> 00:17:29.600
And it's just easy to go and learn in bite sized chunks.

00:17:29.600 --> 00:17:31.600
So I had to throw it out there for you guys.

00:17:31.600 --> 00:17:33.600
Yeah, that's really neat.

00:17:33.600 --> 00:17:35.600
What have you all done for remote stuff?

00:17:35.600 --> 00:17:38.600
Has it how much has been remote and how much has been in person?

00:17:38.600 --> 00:17:43.600
So we went back to school in August and it's hybrid half and half.

00:17:43.600 --> 00:17:48.600
And our kids are lucky because they all have computers and most of them have pretty stable Wi-Fi.

00:17:48.600 --> 00:17:53.600
But I know a lot of the other public school systems, they've had trouble.

00:17:53.600 --> 00:17:57.600
Kids have had to go to like other people's houses.

00:17:57.600 --> 00:17:58.600
They've had to borrow some computers.

00:17:58.600 --> 00:18:00.600
They try to deploy.

00:18:00.600 --> 00:18:07.600
I know England deployed one of my former schools deployed all these laptops out to all a lot of their free schools or their public schools.

00:18:07.600 --> 00:18:14.600
So it's been hard for a lot of learners and just to be able to keep up learning on a phone because almost everyone has a phone.

00:18:14.600 --> 00:18:19.600
Yeah, so yeah that and Google Docs and zoom and you can kind of piece it together to be able to do multiple things there.

00:18:19.600 --> 00:18:20.600
Yeah, that's great.

00:18:20.600 --> 00:18:21.600
It's a good recommendation.

00:18:21.600 --> 00:18:22.600
Does it cost any money?

00:18:22.600 --> 00:18:24.600
So that's the great part.

00:18:24.600 --> 00:18:28.600
So there is a free version because there are some really good apps out there that are paid.

00:18:28.600 --> 00:18:34.600
So there's a free version and they do have the advertising, but the advertising is after that chunk of information.

00:18:34.600 --> 00:18:41.600
So you get this great chunk, you know, you're learning about functions and then there's a quick advert and you can X out.

00:18:41.600 --> 00:18:47.600
But if you don't want any of the adverts you pay for it, I think it's like 24, 29 a month, but super, super, super.

00:18:47.600 --> 00:18:49.600
It goes all the way up to decorators.

00:18:49.600 --> 00:18:51.600
So nice.

00:18:51.600 --> 00:18:52.600
I thought it was pretty cool.

00:18:52.600 --> 00:18:53.600
Yeah, this is really neat.

00:18:53.600 --> 00:18:55.600
And it seems like a nice little environment.

00:18:55.600 --> 00:18:57.600
It's got syntax highlighting and all that.

00:18:57.600 --> 00:18:58.600
Yeah, it's fun.

00:18:58.600 --> 00:19:00.600
Yeah, no, that's a great recommendation.

00:19:00.600 --> 00:19:03.600
Brian, what's your what's your next one here?

00:19:03.600 --> 00:19:04.600
Oh, what is my next one?

00:19:04.600 --> 00:19:07.600
Oh, this is kind of neat.

00:19:07.600 --> 00:19:10.600
The New York University.

00:19:10.600 --> 00:19:11.600
Is that right?

00:19:11.600 --> 00:19:12.600
Yeah.

00:19:12.600 --> 00:19:26.600
There's an announcement that NYU has secured funding in the order of $800,000 over two years to to go towards packaging and the packaging improvement and what else?

00:19:26.600 --> 00:19:30.600
Integrating for pip and downloads and all that sort of stuff.

00:19:30.600 --> 00:19:32.600
Improving the resolver.

00:19:32.600 --> 00:19:33.600
This is kind of exciting.

00:19:33.600 --> 00:19:35.600
This is a lot of money.

00:19:35.600 --> 00:19:36.600
This is a really big deal.

00:19:36.600 --> 00:19:37.600
Yeah, this is awesome.

00:19:37.600 --> 00:19:41.600
The so I actually had to look some stuff up.

00:19:41.600 --> 00:19:44.600
So there is some interesting information.

00:19:44.600 --> 00:19:47.600
There is still like why New York University.

00:19:47.600 --> 00:19:51.600
So they've been there's been some researchers that have been working on it for a while.

00:19:51.600 --> 00:19:53.600
So there's a couple of the things I had to look up.

00:19:53.600 --> 00:19:56.600
So the specifically.

00:19:56.600 --> 00:19:59.600
Well, let's just say specifically what they're doing.

00:19:59.600 --> 00:20:01.600
The what this money is going towards.

00:20:01.600 --> 00:20:12.600
It's to further assess and improve pip's dependency resolver and then following the work done in 2020 and make also make the resolve lib more usable by other tools in the packaging ecology.

00:20:12.600 --> 00:20:18.600
And then in the pipe PI to user pipeline, we've been talking about security problems.

00:20:18.600 --> 00:20:21.600
Some on the show and read about others.

00:20:21.600 --> 00:20:30.600
They're going to try to integrate the tough support for signed packages through pipe PI clients, and they're targeting conduct hip and Bandersnatch.

00:20:30.600 --> 00:20:32.600
So there's a lot there.

00:20:32.600 --> 00:20:34.600
I had to look up one the resolve lip.

00:20:34.600 --> 00:20:42.600
So that is a that is a third part is a separate package, but it is related to pip because it's vendored into pip.

00:20:42.600 --> 00:20:50.600
So resolve lib is vendored into pip and I think they'd like to it to be something that's usable by other other tool chains as well.

00:20:50.600 --> 00:20:53.600
And so there's improvement needed there.

00:20:53.600 --> 00:20:57.600
Never heard of Bandersnatch before or if I have I've forgotten it's a pipe.

00:20:57.600 --> 00:20:59.600
It's a pipe I mirror client.

00:20:59.600 --> 00:21:02.600
So and I think it is needing some support.

00:21:02.600 --> 00:21:03.600
So that's good.

00:21:03.600 --> 00:21:04.600
And then tough.

00:21:04.600 --> 00:21:05.600
What the heck is tough.

00:21:05.600 --> 00:21:23.600
So TUF is the update framework and it supposedly helps according to the website helps developers maintain the security of software update systems providing protection against even against attackers that compromise the repository or signing keys.

00:21:23.600 --> 00:21:33.600
So this notion of we're building up our company even based on collection of open source packages that needs to be like solid right.

00:21:33.600 --> 00:21:38.600
And it's more than just signing or pinning your requirements diversion numbers.

00:21:38.600 --> 00:21:40.600
We want to make sure that the sources are there.

00:21:40.600 --> 00:21:47.600
And so I'm sure there's a lot of details in there that I don't understand fully, but this is a good thing that we work on this more.

00:21:47.600 --> 00:21:48.600
Yeah, I totally agree.

00:21:48.600 --> 00:21:54.600
I mean, we're we start to teach our students about, you know, installing packages and how you can use other people's code.

00:21:54.600 --> 00:22:11.600
And what I'm really hopeful for here with this is that if we can protect this kind of critical infrastructure of Python packaging and at the same time, keep it really simple for people who are entering into Python and learning about this as well as other aspects of the community.

00:22:11.600 --> 00:22:22.600
We still want it to be as simple as pip install this or add it to the requirements file, but to have that level of trust that what I'm installing is not going to break my my code or my machine or put other people at risk.

00:22:22.600 --> 00:22:25.600
It's really valuable to have that level of trust in the system.

00:22:25.600 --> 00:22:27.600
Yeah, I think it's this is amazing.

00:22:27.600 --> 00:22:38.600
You know, the biggest surprise for me is that so much of this National Science Foundation type of stuff really has to do with the around the whole scipy side of things.

00:22:38.600 --> 00:22:49.600
So it's been more focused on your NumPy and as conda and the fact that this is just on hip and the native IPA stuff is pretty interesting.

00:22:49.600 --> 00:23:05.600
I think it's also there's a lot of money. Yeah, I mean, I think once you pair this with some of the other investments that we're seeing with like, you know, Google investing in, you know, with the PSF at a high level, you know, everyone is recognizing this as something that we need to go go work on and make sure it's right.

00:23:05.600 --> 00:23:10.600
Yeah, yeah. So how much do you to talk about external libraries with the kids?

00:23:10.600 --> 00:23:17.600
We talk about it a lot. I think it's definitely we started off in the with the sixth grade, obviously importing turtle and stuff.

00:23:17.600 --> 00:23:21.600
And I always like to say to them, like, this is where the smart guys coded everything.

00:23:21.600 --> 00:23:30.600
But, you know, I was corrected a long time ago and just said some really good coders coded this.

00:23:30.600 --> 00:23:36.600
Everyone can be smart at one time. Actually, we had a kid come in today and ask how he could package his little program.

00:23:36.600 --> 00:23:43.600
And Sean was looking for that. I was like, is it pi pi pi pal? And he's like, No, not that Kelly. I'm like, Oh, okay. Never mind.

00:23:43.600 --> 00:24:02.600
Yeah, we do. We do a lot with external libraries and packages because that's, you know, really the strength of Python as an ecosystem and other languages is that it's not just, you know, using the code that you can come up with out of your own head, but being able to leverage the amazing tools that other people have built and shared in the world as well.

00:24:02.600 --> 00:24:13.600
So we'll go through things like matplotlib will do one of my students found the why finance package and was able to get historical Yahoo finance data out of it and was having a lot of fun with it.

00:24:13.600 --> 00:24:17.600
So they love learning about all these little packages that they can install and start working with.

00:24:17.600 --> 00:24:21.600
They like the ones that do like the crazy stuff like hide their passwords.

00:24:21.600 --> 00:24:30.600
I bet I can imagine that, you know, it's part of the magic is instead of saying you have to do all this work, you just install this, you run these two lines and then there's something that's really cool.

00:24:30.600 --> 00:24:32.600
Yeah, what pipe pie jokes package.

00:24:32.600 --> 00:24:34.600
Yes, all the jokes is good.

00:24:34.600 --> 00:24:39.600
But I think that there's, I mean, Sean brought up the question of how do I package my own code to share it.

00:24:39.600 --> 00:24:46.600
And there's there's like tons of different levels of that that are good to, I guess, cover it probably relatively early.

00:24:46.600 --> 00:24:51.600
You don't have to push it to pipe you to be able to make a package and email it to somebody or something.

00:24:51.600 --> 00:24:59.600
Yeah. Yeah. Hey, before we jump on to my next item, I just want to pull out a quick little band shout out for Kelly and Sean.

00:24:59.600 --> 00:25:02.600
Sean, Robert says big fan of your podcast.

00:25:02.600 --> 00:25:07.600
I'm regularly bringing some of your thoughts and suggestions to our science staff here at the Science Center.

00:25:07.600 --> 00:25:08.600
Very cool.

00:25:08.600 --> 00:25:09.600
Very cool.

00:25:09.600 --> 00:25:10.600
Thank you.

00:25:10.600 --> 00:25:11.600
All right.

00:25:11.600 --> 00:25:16.600
So, Brian, I've been known to do an extra, extra, extra, hear all about it type of thing.

00:25:16.600 --> 00:25:22.600
Yeah, because I just got too much. Well, this one goes beyond that because this is eight extras off into one.

00:25:22.600 --> 00:25:25.600
I'm like, all right, this can't go at the bottom. This is just too much.

00:25:25.600 --> 00:25:28.600
So I'm going to go to try to share this.

00:25:28.600 --> 00:25:32.600
Everyone said they're seeing a blank screen. That's that's not so good.

00:25:32.600 --> 00:25:35.600
Let me see if I can remove it and add it back real quick.

00:25:35.600 --> 00:25:38.600
And then we'll carry on. We'll just have to just roll with it.

00:25:38.600 --> 00:25:44.600
All right. But extra number one, we are on audible, Brian, and we are on Amazon music.

00:25:44.600 --> 00:25:49.600
Yeah, this is brand new. I have no idea if anybody's listened to it or anything over here, but there they are.

00:25:49.600 --> 00:25:53.600
And also I know a teaching Python is at least on one of these. I'm not sure if it's on both.

00:25:53.600 --> 00:25:59.600
Yeah, we're on both of those. In fact, my five year old sometimes at bedtime, he has a little Amazon echo dot in his room.

00:25:59.600 --> 00:26:05.600
So he'll be like Alexa play teaching Python podcast and it'll come up and start playing. So it's probably on Alexa.

00:26:05.600 --> 00:26:09.600
Also, if you ask for Python bites, it'll start playing the latest episode.

00:26:09.600 --> 00:26:14.600
Yeah, I can't say that in here. Otherwise she starts talking.

00:26:14.600 --> 00:26:17.600
So exactly exactly.

00:26:17.600 --> 00:26:19.600
You just set off of that a hundred million.

00:26:19.600 --> 00:26:21.600
Ten thousand Alexis.

00:26:21.600 --> 00:26:24.600
Anyway, so that's really cool that it's on there.

00:26:24.600 --> 00:26:27.600
They reached out to us and invited us to be part of it. I'm like, yeah, that'd be great.

00:26:27.600 --> 00:26:31.600
They don't like re encode or re host or anything or stuff.

00:26:31.600 --> 00:26:36.600
They just share it, which is great. Also, last time I covered no Sebastian Ramirez covered sorcery.

00:26:36.600 --> 00:26:44.600
And I said, I love sorcery as a place thing to add into VS Code and PyCharm that will automatically recommend refactorings like, oh, you should rewrite your code in this cleaner way.

00:26:44.600 --> 00:26:48.600
But there are certain recommendations I didn't like and they drove me crazy and I couldn't turn them off.

00:26:48.600 --> 00:26:51.600
Well, apparently since September, you can turn them off.

00:26:51.600 --> 00:26:52.600
They've told me.

00:26:52.600 --> 00:26:56.600
So a couple of listeners as well. Let's see.

00:26:56.600 --> 00:26:59.600
Yeah. A couple of listeners sent out a message and said, oh, you can do that.

00:26:59.600 --> 00:27:02.600
And then also the folks over at sorcery said, hey, you know what?

00:27:02.600 --> 00:27:04.600
That's actually a thing. A lot of complaints and so on.

00:27:04.600 --> 00:27:12.600
So Brian, I actually refactored and cleaned up all the Python bytes code, which is like 5000 lines of Python and refactored it almost with all of the recommendations.

00:27:12.600 --> 00:27:15.600
And yeah, there's a bunch of stuff. It's really nice now.

00:27:15.600 --> 00:27:18.600
Okay. Well, I definitely get to check it out if you're if you're saying that.

00:27:18.600 --> 00:27:19.600
Yeah, it's good.

00:27:19.600 --> 00:27:26.600
It's pretty neat now. So there's like a commit for the Python bytes website that's, you know, like 47 files changed or something like that.

00:27:26.600 --> 00:27:31.600
I had to go through a whole bunch. Anyway, that's all good. So I can recommend that fully now.

00:27:31.600 --> 00:27:48.600
Dustin Ingram, by way of Matthew Feikert, who's been a guest on the show here, does a bunch of LHC stuff and certain stuff, pointed out that, you know, Dustin Ingram said, I didn't know I could become a PSF member until I realized that just contributing five hours a month towards towards it.

00:27:48.600 --> 00:27:56.600
It's all you got to do. And then you can self certify yourself and he's got a link to find out how to become a PSF member if you'd like.

00:27:56.600 --> 00:27:57.600
Wow. Nice.

00:27:57.600 --> 00:28:09.600
Yeah. A little follow up by Brandon Brainer using Surture. I noticed Pyjarm seemed to slow down a lot. Anything else that I noticed that? You know, I can't speak to that. On mine, I haven't noticed any difference, but you know, it's my M1 version.

00:28:09.600 --> 00:28:14.600
And so it seems all right. But it could be my powerful computer. I don't see it.

00:28:14.600 --> 00:28:17.600
I was running on the pie or whatever. Yeah.

00:28:17.600 --> 00:28:20.600
If I was alienware, I definitely wouldn't see it, but I would hear it.

00:28:20.600 --> 00:28:22.600
It works on my machine. It's fine.

00:28:22.600 --> 00:28:23.600
Exactly.

00:28:23.600 --> 00:28:41.600
All right. More follow up. I mean, this is just going on here. Beanie, the new ODM, the async ODM object document mapper for talking to MongoDB asynchronously. I said, hey, it should have indexes. They agreed. It should have indexes. So they added a whole mechanism to add indexes to MongoDB through that, which is pretty awesome.

00:28:41.600 --> 00:28:44.600
Wow. Power, the power.

00:28:44.600 --> 00:28:46.600
The power. I recommend it.

00:28:46.600 --> 00:28:51.600
I was silently hoping that it was going to be a package for like baby Beanie Babies that can float across.

00:28:51.600 --> 00:28:51.600
I know.

00:28:51.600 --> 00:28:55.600
Maybe we should get Anthony Shaw to like do something like that.

00:28:55.600 --> 00:28:59.600
That's right. Like maybe a little animated emojis in the terminal for the kids.

00:28:59.600 --> 00:29:01.600
Yeah. Perfect. Perfect.

00:29:01.600 --> 00:29:02.600
Yeah.

00:29:02.600 --> 00:29:07.600
Well, you know, the power of suggestion on Python bytes, like now next week we'll be able to cover the new Beanie Babies module and Beanie.

00:29:07.600 --> 00:29:16.600
Exactly. Pippin's all Beanie Babies. They're collectible and you can even get non fungible tokens for certain ones. Okay. So the next one is a projector.

00:29:16.600 --> 00:29:23.600
So we talked about remote code execution, connecting VS Code through like a remote interpreter or Python.

00:29:23.600 --> 00:29:38.600
Apparently there's this thing called projector at JetBrains that will allow you to install the entire UI of something like IntelliJ or Python or something like that, and then access it over your web browser, but have the entire thing running somewhere else.

00:29:38.600 --> 00:29:48.600
So you could be a good if you have like an environment like an iPad or something where you couldn't, you know, install PyCharm, but now you've got all full on PyCharm for across the web.

00:29:48.600 --> 00:29:50.600
So I'll link to that. Another follow up, Brian.

00:29:50.600 --> 00:29:59.600
We talked about using SQLite as a single file format. So instead of making up your own file format, just put stuff in SQLite. It's just a file. It has easy ways to talk to it.

00:29:59.600 --> 00:30:09.600
Audacity of all things. The audio editing software has been completely rewritten for version three. And guess what? It has a single file format. That's SQLite. That's cool. Right?

00:30:09.600 --> 00:30:11.600
That is cool. I used to use it. See?

00:30:11.600 --> 00:30:19.600
All right. And the last time we also talked about Neo model, which is a way to build Python classes that do graph databases. Super fun.

00:30:19.600 --> 00:30:29.600
Um, Grayson Daniel said, Hey, I came up with this really cool example where you can do things like explore. Let's see if I get over here. We can explore things like here's a person like Tom Hanks.

00:30:29.600 --> 00:30:40.600
What movies did they act in? What were they directed by? And then you could just traverse these relationships and explore, like follow the chain of like, well, Tom hacks, Tom Hanks acted in castaway, which was directed by Robert.

00:30:40.600 --> 00:30:45.600
So-and-so. And then who else started in there and like a really interesting way to like explore those kinds of things.

00:30:45.600 --> 00:30:49.600
I'm surprised they didn't use Kevin Bacon as the example.

00:30:49.600 --> 00:30:50.600
It would have crashed. It would have crashed.

00:30:50.600 --> 00:30:52.600
Michael's on one.

00:30:52.600 --> 00:30:54.600
My team.

00:30:54.600 --> 00:30:55.600
Oh, sorry.

00:30:55.600 --> 00:30:58.600
My teaching side of me really loves that little graphic organizer.

00:30:58.600 --> 00:30:59.600
I know.

00:30:59.600 --> 00:31:00.600
I do too.

00:31:00.600 --> 00:31:03.600
I thought I really, yeah, it's really great, isn't it?

00:31:03.600 --> 00:31:03.600
All right.

00:31:03.600 --> 00:31:11.600
And the very last one, L Sergio Sanchez just wanted us to give a shout out that a call for proposals for PyCon Latin America just went live.

00:31:11.600 --> 00:31:16.600
So people are in Latin America or I guess, you know, things are remote really could be anywhere at this point probably.

00:31:16.600 --> 00:31:19.600
So if you want to be part of a conference and speak, go do that.

00:31:19.600 --> 00:31:23.600
I'm going to nudge Kelly for this one because she actually speaks Spanish, has taught in Peru.

00:31:23.600 --> 00:31:26.600
Like, so I think she'd be a natural fit.

00:31:26.600 --> 00:31:29.600
Well, the good thing about it, everything in Python's in English.

00:31:29.600 --> 00:31:30.600
So we're good, right?

00:31:30.600 --> 00:31:35.600
I suspect a lot of those talks are actually in English as well.

00:31:35.600 --> 00:31:39.600
I did it to Nacharla at the PyCon a couple of years ago.

00:31:39.600 --> 00:31:41.600
Oh, yeah. Okay, cool. That's the Spanish language track.

00:31:41.600 --> 00:31:42.600
Yeah, that's very cool.

00:31:42.600 --> 00:31:43.600
That's very cool.

00:31:43.600 --> 00:31:44.600
All right.

00:31:44.600 --> 00:31:48.600
There's a lot of follow up, a lot of comments here in the chat.

00:31:48.600 --> 00:31:50.600
Really quick before we move on.

00:31:50.600 --> 00:31:53.600
Brandon says, "M1 power!"

00:31:53.600 --> 00:31:56.600
Robert says, "A couple of...

00:31:56.600 --> 00:32:00.600
I sent Anthony a few tweets to get this going, but he's so far he's not made the Beanie Baby thing."

00:32:00.600 --> 00:32:02.600
Dean's excited about it.

00:32:02.600 --> 00:32:04.600
I'm sorry, there were so many things that I don't know which one.

00:32:04.600 --> 00:32:07.600
Robert asked if I've tried the projector.

00:32:07.600 --> 00:32:08.600
No, I haven't.

00:32:08.600 --> 00:32:11.600
But apparently our studios had this as well, which is pretty cool.

00:32:11.600 --> 00:32:17.600
And Sam Morley says, "I still want the walrus operator sticker that Emily Morehouse made for PyCon a couple of years ago."

00:32:17.600 --> 00:32:18.600
Yeah, that's cool.

00:32:18.600 --> 00:32:20.600
I have no idea how to get it though.

00:32:20.600 --> 00:32:23.600
And then Dean is excited about the web UI for PyCharm.

00:32:23.600 --> 00:32:24.600
All good stuff.

00:32:24.600 --> 00:32:26.600
All right, John, I think you got the final item right here, right?

00:32:26.600 --> 00:32:27.600
Yeah, yeah.

00:32:27.600 --> 00:32:31.600
This is an article I found because we're starting a new quarter in our classroom.

00:32:31.600 --> 00:32:37.600
So we teach middle school students, 6th, 7th, and 8th graders that are 11 to 13 years old.

00:32:37.600 --> 00:32:49.600
And one of the things that I've found from other teachers and instructors, regardless of age level, is those first few classes of a new course are usually filled with the same thing, which is everyone downloading Python.

00:32:49.600 --> 00:32:51.600
Now we all have the right version of Python.

00:32:51.600 --> 00:32:52.600
Okay, now what editor are we going to use?

00:32:52.600 --> 00:32:54.600
Do we have all the same editor version?

00:32:54.600 --> 00:32:57.600
Now we start to get into dependencies and requirements.

00:32:57.600 --> 00:33:03.600
And no matter what you're teaching, just those first few classes all seem to be filled with just setting things up, right?

00:33:03.600 --> 00:33:04.600
And that's not fun for anyone.

00:33:04.600 --> 00:33:05.600
They're excited to get started.

00:33:05.600 --> 00:33:08.600
And by the time you get to like, I'm not excited anymore.

00:33:08.600 --> 00:33:09.600
Right.

00:33:09.600 --> 00:33:13.600
And then someone by the end, like, you know, two weeks in is like, well, why isn't this working?

00:33:13.600 --> 00:33:19.600
Oh, because two weeks ago when we set this up, you got version 1.04 and we needed 1.07.

00:33:19.600 --> 00:33:20.600
And that's why it's not working.

00:33:20.600 --> 00:33:22.600
It's just a pain to manage all this stuff.

00:33:22.600 --> 00:33:22.600
Right.

00:33:22.600 --> 00:33:32.600
So I didn't think about using them this way, but there's a whole guide from Bridget Murtaugh at V from VS Code about making development containers for education.

00:33:32.600 --> 00:33:49.600
So you can Dockerize a development environment and distribute that to students so that each student can just open up a Docker container with all of the right versions, all the right requirements, everything pre-installed right down to environment variables and starter source code for them to work with.

00:33:49.600 --> 00:33:50.600
And it's pretty neat.

00:33:50.600 --> 00:33:55.600
You need VS Code and Docker desktop to do it the way that they're talking about.

00:33:55.600 --> 00:33:58.600
But I think you could probably generalize it to a bunch of other things.

00:33:58.600 --> 00:34:03.600
And in VS Code, you can deploy right from a Docker or a GitHub repo.

00:34:03.600 --> 00:34:05.600
So you give it a repo URL.

00:34:05.600 --> 00:34:16.600
It'll pull down the Docker file, create the Docker container and spin it up for the student and they can start coding right there in VS Code using everything already set up and ready to go.

00:34:16.600 --> 00:34:20.600
I think the only other requirement is they have to have Docker desktop installed on their computer.

00:34:20.600 --> 00:34:32.600
So, you know, the one thing that I thought about, like maybe there's a way to tinker with this is could we spin up a Docker container on a remote host and then even remove the requirement for Docker desktop on the student's local machine?

00:34:32.600 --> 00:34:40.600
Yeah, you might be able to install something like just the Docker command line tools without full on Docker desktop, which might be something you could do.

00:34:40.600 --> 00:34:41.600
Just copy them over something.

00:34:41.600 --> 00:34:42.600
I'm not entirely sure.

00:34:42.600 --> 00:34:43.600
Yeah, yeah.

00:34:43.600 --> 00:34:46.600
But there's so many cool things that you could do here.

00:34:46.600 --> 00:34:57.600
And, you know, since you can actually run VS Code in a Docker container, you could potentially get to a full Docker package that has VS Code, the Python environment that you want and all the source code ready to go.

00:34:57.600 --> 00:35:00.600
And they're even using it for individual assignments.

00:35:00.600 --> 00:35:03.600
So once you've got them set up, I'm like, hey, here's your next assignment.

00:35:03.600 --> 00:35:05.600
Here's the container to use.

00:35:05.600 --> 00:35:07.600
And it gives them everything ready to get started.

00:35:07.600 --> 00:35:08.600
Yeah, that's really neat.

00:35:08.600 --> 00:35:15.600
And you both talked about having these cool packages around that, you know, it's really great to just import this thing and do the amazing thing.

00:35:15.600 --> 00:35:19.600
You could have the Docker container come pre-configured with every package.

00:35:19.600 --> 00:35:25.600
So you don't even have to talk about virtual environments or pip or anything to the end when you're like, oh, and by the way, here's how you get this.

00:35:25.600 --> 00:35:28.600
But it's just going to work right out of the box, which is cool.

00:35:28.600 --> 00:35:29.600
I also like the idea.

00:35:29.600 --> 00:35:30.600
Go ahead, Kelly.

00:35:30.600 --> 00:35:32.600
I was just, I was going to make a joke again.

00:35:32.600 --> 00:35:39.600
That would have saved me because I got lost in my virtual environment a couple of years ago and I haven't been able to find my way out of the end.

00:35:39.600 --> 00:35:40.600
So I'm just saying.

00:35:40.600 --> 00:35:41.600
Sorry, go headshot.

00:35:41.600 --> 00:35:49.600
The other thing that I thought about too, though, is that there's definitely value in still giving the student the manual setup instructions, right?

00:35:49.600 --> 00:35:56.600
So if we, you know, give them here's the container version and then also if you wanted to set up your own local version, here's how you would do it.

00:35:56.600 --> 00:36:01.600
That way students have a chance to differentiate, you know, if they want to just press the button and go with a container, they can do that.

00:36:01.600 --> 00:36:09.600
I think Dean in the comments is saying, you know, we could just package the whole students, whole computer inside a Docker container that might work too.

00:36:09.600 --> 00:36:11.600
It'll be containers all the way down.

00:36:11.600 --> 00:36:12.600
Yeah.

00:36:12.600 --> 00:36:13.600
Yeah.

00:36:13.600 --> 00:36:14.600
Yeah.

00:36:14.600 --> 00:36:15.600
But there's definitely a lot of really cool stuff here.

00:36:15.600 --> 00:36:19.600
And I'm, I'm definitely interested in trying this out because it's not just Python.

00:36:19.600 --> 00:36:21.600
You could do this with a whole ton of different things.

00:36:21.600 --> 00:36:27.600
Like if you wanted to have a full stack course, you could have a container for the front end, the container for the back end.

00:36:27.600 --> 00:36:28.600
Yeah.

00:36:28.600 --> 00:36:29.600
And let them develop separately.

00:36:29.600 --> 00:36:30.600
Yeah.

00:36:30.600 --> 00:36:34.600
You don't have to worry about how do you set up the database and just put this line in there and you'll have a database.

00:36:34.600 --> 00:36:40.600
I mean, that's like for me, I think that's like a huge win for a lot of people who are getting into code.

00:36:40.600 --> 00:36:43.600
Just being able to say, Sean, give me that package.

00:36:43.600 --> 00:36:45.600
Let me click on it, open it up and ready to go.

00:36:45.600 --> 00:36:54.600
That would help a lot of people stay into at least get hooked into coding because messing with terminal doing all the folders in the system.

00:36:54.600 --> 00:36:56.600
It's, it's a brutal ride for newbies.

00:36:56.600 --> 00:36:57.600
I agree.

00:36:57.600 --> 00:36:58.600
It is.

00:36:58.600 --> 00:36:59.600
Yeah.

00:36:59.600 --> 00:37:00.600
And Robert definitely likes it.

00:37:00.600 --> 00:37:01.600
Great find.

00:37:01.600 --> 00:37:02.600
Yeah.

00:37:02.600 --> 00:37:03.600
Nothing, nothing else for me on that one.

00:37:03.600 --> 00:37:04.600
I'm just, I love it.

00:37:04.600 --> 00:37:08.600
You can replace those first two days with getting everybody on the correct version of Docker.

00:37:08.600 --> 00:37:09.600
That's right.

00:37:09.600 --> 00:37:10.600
That's right.

00:37:10.600 --> 00:37:11.600
We've just swapped one thing for another.

00:37:11.600 --> 00:37:12.600
Exactly.

00:37:12.600 --> 00:37:13.600
Exactly.

00:37:13.600 --> 00:37:14.600
All right.

00:37:14.600 --> 00:37:16.600
Well, that's it for our six items.

00:37:16.600 --> 00:37:18.600
Brian, anything you want to share?

00:37:18.600 --> 00:37:19.600
Anything extras?

00:37:19.600 --> 00:37:22.600
No, I'm just taking away.

00:37:22.600 --> 00:37:23.600
Yeah.

00:37:23.600 --> 00:37:24.600
Cool.

00:37:24.600 --> 00:37:25.600
I absolutely over.

00:37:25.600 --> 00:37:26.600
I blew it out earlier.

00:37:26.600 --> 00:37:27.600
So we're all good on that.

00:37:27.600 --> 00:37:28.600
Let's see.

00:37:28.600 --> 00:37:32.600
Kelly, you want to give a shout out to the training summit?

00:37:32.600 --> 00:37:33.600
Yeah.

00:37:33.600 --> 00:37:34.600
You know, sorry.

00:37:34.600 --> 00:37:35.600
The educational summit.

00:37:35.600 --> 00:37:43.600
So yeah, this year they are doing both the educational summit and the training summit separately,

00:37:43.600 --> 00:37:44.600
which I thought was really cool.

00:37:44.600 --> 00:37:49.600
And a lot of the topics that they're looking for is how did we survive with this online virtual

00:37:49.600 --> 00:37:50.600
environment?

00:37:50.600 --> 00:37:51.600
How did trainers do it?

00:37:51.600 --> 00:37:56.600
Not necessarily us in education, but how did the trainers survive with getting through the

00:37:56.600 --> 00:38:01.600
training and just they're looking to promote it, I guess.

00:38:01.600 --> 00:38:03.600
And the fact that you can attend both.

00:38:03.600 --> 00:38:10.600
I know when we went to PyCon, we had to choose between the educational summit and the training

00:38:10.600 --> 00:38:11.600
summit.

00:38:11.600 --> 00:38:14.600
So we weren't, we're able to do both and now you can attend everything.

00:38:14.600 --> 00:38:15.600
So it's pretty cool.

00:38:15.600 --> 00:38:16.600
Yeah.

00:38:16.600 --> 00:38:19.600
It's a real bummer that these conferences aren't in person, right?

00:38:19.600 --> 00:38:23.600
Like the last time we got to hang out, Kelly and Sean, we had like breakfast in Florida.

00:38:23.600 --> 00:38:26.600
It was great because we just happened to be in a similar general area.

00:38:26.600 --> 00:38:27.600
That was such a weird happenstance.

00:38:27.600 --> 00:38:29.600
That's not going to happen right now.

00:38:29.600 --> 00:38:33.600
But the flip side is people can come from all over and attend these conferences no matter

00:38:33.600 --> 00:38:34.600
what.

00:38:34.600 --> 00:38:35.600
Now you don't have to actually go there.

00:38:35.600 --> 00:38:36.600
Yeah, it's great.

00:38:36.600 --> 00:38:39.600
Sean and I were in Monterey like two weeks ago, Mexico.

00:38:39.600 --> 00:38:40.600
Nice.

00:38:40.600 --> 00:38:41.600
Virtually.

00:38:41.600 --> 00:38:45.600
It was the same temperature where I was sitting.

00:38:45.600 --> 00:38:46.600
Nice.

00:38:46.600 --> 00:38:47.600
All right.

00:38:47.600 --> 00:38:49.600
And then some other ones that are yours, Sean.

00:38:49.600 --> 00:38:50.600
Yeah.

00:38:50.600 --> 00:38:51.600
So this one I thought was pretty cool.

00:38:51.600 --> 00:38:53.600
We use replet a lot in the classroom.

00:38:53.600 --> 00:38:59.600
So it's, you know, online coding environments that you can spin up and start coding and share.

00:38:59.600 --> 00:39:05.600
And they have really cool features like multiplayer mode where people can be pair programming together

00:39:05.600 --> 00:39:06.600
in a shared space.

00:39:06.600 --> 00:39:11.600
But one thing that they did, speaking of Python packaging, is they had their own package cache

00:39:11.600 --> 00:39:13.600
that they created for replet.

00:39:13.600 --> 00:39:18.600
So for a lot of the common third party libraries that they are using in a lot of repls, they

00:39:18.600 --> 00:39:23.600
will they'll cache it now and they're getting like a 40% speed improvement on spinning up a

00:39:23.600 --> 00:39:26.600
new replet instance when they need it.

00:39:26.600 --> 00:39:31.600
And then, you know, also just they're not hitting the PyPI index all the time for all that data.

00:39:31.600 --> 00:39:32.600
It's right there local with them.

00:39:32.600 --> 00:39:37.600
So they don't have that same sort of load on the caching servers from PyPI.

00:39:37.600 --> 00:39:38.600
Yeah, that's great.

00:39:38.600 --> 00:39:39.600
Well done to them for doing that.

00:39:39.600 --> 00:39:41.600
Because one like it makes it better for all their users.

00:39:41.600 --> 00:39:47.600
But the bandwidth cost if it had to be paid of PyPI is like $40,000 a month.

00:39:47.600 --> 00:39:48.600
It's a lot.

00:39:48.600 --> 00:39:49.600
So put less strain on that system.

00:39:49.600 --> 00:39:50.600
Yeah.

00:39:50.600 --> 00:39:51.600
Yeah.

00:39:51.600 --> 00:39:52.600
I thought that one was really good.

00:39:52.600 --> 00:40:08.600
The other one, and this is a project I'm a huge fan of, the Home Assistant project, which runs Python 3, and you can run it on a Raspberry Pi, is just the company that runs a lot of that or has a lot of the core developers for that project has acquired the ESP Home project.

00:40:08.600 --> 00:40:18.600
ESP Home is a little side project that lets you take tiny little microcontrollers that cost five or ten bucks and make your own DIY Internet of Things devices.

00:40:18.600 --> 00:40:29.600
So this is really a kind of a cool way you configure it with a YAML file and you can push the YAML file over to that microcontroller and you can make your own little devices.

00:40:29.600 --> 00:40:38.600
So I made a pool heater controller for my swimming pool here in Florida using an ESP Home microcontroller.

00:40:38.600 --> 00:40:40.600
So they have all these great examples.

00:40:40.600 --> 00:40:50.600
People have done things like NFC sensors so you can tap tags and play music, Roomba components, washing machine phases so you can tell when your washing machine's on and off.

00:40:50.600 --> 00:40:59.600
They have basically all this great stuff there and Nabu Kasa, the company that has all these core developers, just bought it and is bringing it under the Home Assistant umbrella.

00:40:59.600 --> 00:41:03.600
Oh, that's cool. Home Assistant will just get better. And Home Assistant is in Python as well, which is neat.

00:41:03.600 --> 00:41:09.600
Yeah, they're running 3.9, I think, on it. They're really keeping up with the latest versions of everything.

00:41:09.600 --> 00:41:13.600
So this last I want to show, I can only show you half a screen. Oh wait, no, it goes up now.

00:41:13.600 --> 00:41:20.600
They were angry at me because my ad blocker in Firefox, apparently, which is just bare Firefox, wouldn't let me show the whole page.

00:41:20.600 --> 00:41:23.600
Anyway, here we go. So get a vaccine appointment. You've got to do some web scraping.

00:41:23.600 --> 00:41:27.600
Right. So it helps to know Python programmer. And this was on NBC News.

00:41:27.600 --> 00:41:31.600
So I thought it was kind of neat that it made it to this mainstream of an outlet.

00:41:31.600 --> 00:41:36.600
But they were saying that basically Python programmers have been web scraping to find vaccine appointments.

00:41:36.600 --> 00:41:42.600
And they go into the ethics of that. Like, is it OK to web scrape and basically get yourself to the front of the line?

00:41:42.600 --> 00:41:46.600
But a lot of folks have been making this information available via Twitter bots as well.

00:41:46.600 --> 00:41:55.600
So if you're trying to wait and get a vaccine appointment, maybe you can see if there's a Twitter account near you that's showing you what spaces are available.

00:41:55.600 --> 00:41:57.600
How interesting. Yeah, this is a pretty good use of it.

00:41:57.600 --> 00:42:01.600
You know, when I went to college, we didn't really have the Internet.

00:42:01.600 --> 00:42:04.600
I guess when I first started, it came on like two or three years later.

00:42:04.600 --> 00:42:08.600
We had the Internet, but not the Web. And we had to register by phone.

00:42:08.600 --> 00:42:14.600
So you would call and it would be busy and he would call back and we'd be busy and you have to do it for four or five hours.

00:42:14.600 --> 00:42:19.600
And we just took our modems and we just war dialed the registration number one, one.

00:42:19.600 --> 00:42:22.600
So like we had really bad classes, you know, early morning on a Monday or whatever.

00:42:22.600 --> 00:42:27.600
And then we decided we're breaking out the modem. We're just going to go dial, hang up, dial, hang up, dial, hang up until it answers.

00:42:27.600 --> 00:42:30.600
We had the perfect schedule, my brother and I, that.

00:42:30.600 --> 00:42:33.600
So this is like the modern equivalent of that.

00:42:33.600 --> 00:42:37.600
Yeah. Yeah. And they were nobody was breaking any rules or anything other than the web scraping part.

00:42:37.600 --> 00:42:41.600
It was all, you know, my 70 year old grandmother needs to get a vaccine appointment.

00:42:41.600 --> 00:42:45.600
And so spending six hours hitting refresh on the Web page, I'm going to automate that.

00:42:45.600 --> 00:42:50.600
Yeah, it's it's a perfect example of automation that that helps. Yeah. Very cool.

00:42:50.600 --> 00:42:53.600
I don't really see anything wrong with it until maybe you take down the server.

00:42:53.600 --> 00:42:56.600
But so many people are hitting it. But long as it doesn't do something like that.

00:42:56.600 --> 00:43:01.600
I think I think us humans are fully capable of taking down the vaccine appointment web servers on our own.

00:43:01.600 --> 00:43:06.600
It's just hitting the refresh button. Yeah. All right. Fantastic.

00:43:06.600 --> 00:43:11.600
Well, Brian, I think that's it for all of our items. Do we have a joke? You think? I think we might have a joke.

00:43:11.600 --> 00:43:16.600
Yeah, I like this joke. Yeah. Let's see. Is this is? Oh, no, this is not it. Let me let me.

00:43:16.600 --> 00:43:21.600
I got to copy the. Is this going to work? I don't think. No, I got to do a quick screenshot to get up in the screen share.

00:43:21.600 --> 00:43:25.600
Sorry. It's not logged on that computer. OK, so here comes the joke.

00:43:25.600 --> 00:43:32.600
The joke. And this one I put out there because I thought it was a good one for teachers and it talks about basic math, really. Right.

00:43:32.600 --> 00:43:38.600
So this is a let me put it back on my screen. This one is about counting just one to ten.

00:43:38.600 --> 00:43:41.600
And a famous person in computers, Bill Gates.

00:43:41.600 --> 00:43:47.600
And I think it's like, hey, I'm coming to visit the school. I work in computers. I'll help you learn how to count.

00:43:47.600 --> 00:43:57.600
It says, hi, my name is Bill Gates. Today I'll teach you how to count to ten. One, two, three, 95, 98, NT, 2000, XP, Vista, seven, eight, ten.

00:43:57.600 --> 00:43:59.600
What do you guys think?

00:43:59.600 --> 00:44:08.600
I mean, I find it I find it interesting that me is not in this list, which just goes to prove that even 21 years later, there is nothing funny about Windows me.

00:44:08.600 --> 00:44:14.600
I think that might be the only Windows I've never had. You are lucky.

00:44:14.600 --> 00:44:23.600
I keep thinking. I keep thinking about this silly joke of my seven year old. What happened to nine? Because seven, eight, nine.

00:44:23.600 --> 00:44:26.600
Nine. Yes. Oh, it fits in there perfectly. Right.

00:44:26.600 --> 00:44:27.600
Oh, yeah.

00:44:27.600 --> 00:44:32.600
And the reason that nine there's not a Windows nine is even weirder. I wish it was the joke.

00:44:32.600 --> 00:44:38.600
But people because there was a ninety five and a ninety eight people were doing substring matches to see if it was a Windows ninety five.

00:44:38.600 --> 00:44:44.600
Like if the string Windows nine appears in the just in the version number, well, it must be ninety five or ninety eight.

00:44:44.600 --> 00:44:46.600
And so the Windows nine would have the same problem.

00:44:46.600 --> 00:44:52.600
But I read that it was because a rumor had it that Japanese in Japan, they skipped it because of the Windows nine.

00:44:52.600 --> 00:44:55.600
And they skipped it because it was like a mean to bad thing or something.

00:44:55.600 --> 00:44:56.600
Oh, it's like 13.

00:44:56.600 --> 00:44:57.600
Yeah.

00:44:57.600 --> 00:44:58.600
Unlucky number.

00:44:58.600 --> 00:44:59.600
And I guess.

00:44:59.600 --> 00:45:00.600
Yeah.

00:45:00.600 --> 00:45:02.600
Microsoft in Japan had a lot going on.

00:45:02.600 --> 00:45:03.600
So interesting.

00:45:03.600 --> 00:45:04.600
You know, I am.

00:45:04.600 --> 00:45:07.600
I've stayed on the 14th floor before where it goes 1214.

00:45:07.600 --> 00:45:09.600
I'm like, no, this is.

00:45:09.600 --> 00:45:10.600
I know it.

00:45:10.600 --> 00:45:11.600
You're not fooling anyone.

00:45:11.600 --> 00:45:12.600
You're not fooling anyone.

00:45:12.600 --> 00:45:13.600
I'm OK.

00:45:13.600 --> 00:45:16.600
Nothing happened on the trip, but I'm on the 13th floor.

00:45:16.600 --> 00:45:17.600
I know it.

00:45:17.600 --> 00:45:18.600
Yeah.

00:45:18.600 --> 00:45:19.600
Very interesting trip that one.

00:45:19.600 --> 00:45:23.600
But save it for some beers and we can all get together at an actual conference again.

00:45:23.600 --> 00:45:24.600
Yeah.

00:45:24.600 --> 00:45:25.600
We're looking forward to it.

00:45:25.600 --> 00:45:26.600
Absolutely.

00:45:26.600 --> 00:45:27.600
Yeah.

00:45:27.600 --> 00:45:28.600
Well, Sean and Kelly, thank you both for being on the show.

00:45:28.600 --> 00:45:29.600
It's been great to have you here.

00:45:29.600 --> 00:45:31.600
Oh, thanks for having us.

00:45:31.600 --> 00:45:32.600
We miss seeing you guys.

00:45:32.600 --> 00:45:33.600
Yeah.

00:45:33.600 --> 00:45:34.600
Yeah.

00:45:34.600 --> 00:45:35.600
Sure.

00:45:35.600 --> 00:45:35.600
Brian.

00:45:35.600 --> 00:45:36.600
Good to see you as always, man.

00:45:36.600 --> 00:45:37.600
Good to see you.

00:45:37.600 --> 00:45:38.600
Yep.

00:45:38.600 --> 00:45:39.600
Bye everyone.

00:45:39.600 --> 00:45:40.600
Bye.

00:45:40.600 --> 00:45:41.600
Bye.

00:45:41.600 --> 00:45:42.600
Thank you for listening to Python Bytes.

00:45:42.600 --> 00:45:43.600
Follow the show on Twitter via @pythonbytes.

00:45:43.600 --> 00:45:45.600
That's Python bytes as in B-Y-T-E-S.

00:45:45.600 --> 00:45:48.600
And get the full show notes at pythonbytes.fm.

00:45:48.600 --> 00:45:53.600
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:45:53.600 --> 00:45:55.600
We're always on the lookout for sharing something cool.

00:45:55.600 --> 00:45:59.600
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:45:59.600 --> 00:46:02.600
Thank you for listening and sharing this podcast with your friends and colleagues.

