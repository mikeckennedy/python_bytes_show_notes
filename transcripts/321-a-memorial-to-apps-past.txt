00:00:00 Hello, and welcome to python bytes where we delivered news and headlines directly to your earbuds. This is Episode 321, recorded January 30, almost the end of January. And I am Brian Aachen, and I am Michael Kennedy. Hey, Michael. Hey, excited to be here today again, also on literally, before we jump too far into it, I want to thank Microsoft for startup founders hub, please listen to their spot later in the show. How are we going to start the show where we are for us? Michael,

00:00:27 you may wonder some folks have publicly expressed the bewildering thought that maybe we live in a simulation? I don't think so. Do you think we live in a simulation brain? Sometimes? When I'm playing a game, maybe, but what if you're working on Git, and you wanted to see how things were working, simulate some operations, and try to understand how Git works without actually making those changes. Because there's, there's always the good is full of good jokes, right? Like in case of fire, git commit git push, run, things like that, those jokes. But the other one is, you know, you don't need to know get that, well, if you mess it up, you just delete the repository and clone it again and start over. Right? So ideally, you would be able to run some operations to help you understand what Git is going to do without consequence. So I introduced you this tool called Get sim and get sim will visually simulate git operations in your repos with a single command to what it is, is, instead of saying, like Git merge branch, you would say get dash sim merge branch. Now how best to explain what's going to happen, like if it just says, we would have merged this branch into that branch with seven changes. Okay, maybe that's fine for merge. But there are many other things that are more complicated. So as you You and I are fans of this will simulate, it will show you the visual behavior changes that are going to happen. Isn't that cool? Yeah. So by default, you get a JPEG image. And the top one you see here, you can see all the commits. There, Shah's Shaw's in their, their message, and you can see two branches, it'll see where head and main arm or Dev is, and it'll show you if you do a commit, we're actually a merge, you're gonna take these changes from dev, push them forward, right, and the resulting shaper behavior of the repository. So that one's pretty straightforward. I'll show you some really cool ones in a minute. So use cases include visualizing git commands to understand them. It's kind of what I was talking about. Also, my joke, prevent unexpected working directory and repository states by trying it out first. But there's also a whole, I'm creating blog posts, tutorials, courses, whatever. So sharing visualizations of your Git commands with your team, maybe for documentation, right? In our wiki, like, this is our workflow, you probably don't understand what this weird git thing is that we're doing because it's non standard, please watch this little animation. So you know why we're doing it or something like that. Right? Ya

00:03:04 know, as internal documentation, that's a great use for that. So yeah,

00:03:08 absolutely. So basically, the supportive commands at the moment are log status, add restore, commit, stash, Branch, tag, reset, Revert, merge rebase, and cherry pick, and then subcommands of those, right. And so it's got some, some steps to install it. Some, some ways to run it. But then you can see, if you scroll down far enough, you'll start to see some of the examples. So there's a bunch of examples that are pictures like a get Sam dash log, it'll simulate the output showing the most recent five commits on the active branch. Yeah, and it sort of shows you the tags and various things. You can see status and it does like a rich style sort of tree editor to a table view, really nice there, you know, the different almost Kanban flow of yours, your files going from untracked to tracked and modified locally and staged and all that which is actually I think it's pretty helpful. Even with little arrows showing, you know, it moved from here in this one of those columns to this other column. Or I don't think I've ever used get restore. I don't make mistakes, so it's fine.

00:04:16 Isn't that delete and re clone? Yeah, exactly.

00:04:19 Oh, my God, don't commit that. Don't push that. Please just delete it. Let's see. But if we go down further, you'll get more interesting examples. emerge. When is there let's keep going. But we get to the video ones. This is where it gets to be pretty awesome and pretty unique. And we could do yet we could do a get sim reset. So check this out. Over here you have you have this visual diagram showing how this stuff is changing over time. So what we're going to do is we're gonna reset this and you will see like the head pointer and the branch point and move over. And what do you think Brian is in high school?

00:04:53 This is really neat. Yeah, yeah, let's

00:04:55 just pick one, one or two more, so we got merge. That's pretty straightforward. rebase let's see. Animated share a pig. So you'll see it coming along here, building up the Git repo status, and then what's going to happen, it's going to show us a branch. And we want to take some of those changes, and cherry pick them over to the main. Anyway,

00:05:15 if I think I've lost on that one, but that's,

00:05:19 that's not a great animation to be honest. Anyway shows you a bunch of examples, a bunch of cool thing. I think this is really nice. Like I said, primarily documentation internally, like your internal wiki, or onboarding docs, or for a blog posts, you want to talk about what something looks like, then run this. And it's not just what does a git merge look like? It is, what does the git merge look like on this repo in the state? Right? Yeah. buys your working repo, which is cool

00:05:46 that yeah, the applying to the working one? That's, that's really cool. What you mean, you said that mergers are pretty easy, but actually, I think I'll probably use this for merges the most, because there's a lot of times where I have a mental model of what my repo looks like. And a merge shows a conflict or something. And I'm like, Why? Why would it be a conflict? Because I it's a good point, actually. And it's probably because my mental image of what the repo looks like right now is wrong. That like something has moved forward, since I branched off.

00:06:15 Yeah, yeah, very good point. Actually, I end up confused sometimes my why that should have gotten a clean merge, no problem. And now, now I'm in some situation where it's asking me to describe the changes, and I actually don't know what they are. So let's start

00:06:29 and then dig into it. Sometimes you gotta like manual merge. What is this? 1980?

00:06:34 Exactly? What are we using CVS? Come on, let's go. But anyway, this is what I got. Get, as gets them.

00:06:42 Nice. Nice. Um, well, so I guess we're kind of doing a tools thing, at least for now. I'd like to talk about NOx. So I've used NOx. I have not. Okay. So there's there's a, there's NOx. And then there's talks. And I have used talks a lot. So both of them, I guess they do have like different things that you can use them for and stuff, what do I use them for? I use them primarily to try to run pi test on multiple versions. So the general one of the workflows that works on both of them is I want to create a virtual environment with like Python 310, through 11, three, nine, a bunch of different pythons create a virtual environment, install my package that I am trying to test, and then run that, and then all the dependencies, and then run that, that test suite within that environment. So and, and that's kind of a standard thing. So I have my first thought of first one I saw Knox was so one of the things benefits of KNOX talks uses ini files for the settings. You can also use it supports Tom will now I think maybe I think you can do it in pipe project. Tom also, if not sorry. But the but the KNOX uses just a python file. So you have a pipe a knock, I think it's an ox file that py or something like that. But it just uses a kitty as the example. But anyway, it does similar things. So hi, hi, Nick. I'm gonna get it wrong. Sorry. Ineke. wrote an article called Why I like narcs. And these specifically calls out of like, I'm not bashing talks, talks is still awesome, a great team supporting it. And I agree, I know a lot of the people that support it. But Knox's might be for you as well. So here's an N, a person that likes both tools, comparing them. And that's it's refreshing. So first off, it's the file format. So any talks, uses any files, NOx, uses Python. And I gotta admit, even for a simple example, like this, then the example I'm showing is running Python, 310 and 311. And being able to pass in arguments to by test. Both are not terrible. But I think I think maybe the next one's a little bit more readable, just because it's Python. It's definitely more

00:08:57 flexible, because you could run arbitrary Python code. Yeah, I shouldn't too, you can make some sort of setup teardown beyond Yeah, so

00:09:04 it's similar. And then he gets into another example, which is a little bit more involved, which is, I want to I've got a test matrix, but I also different pythons, but I want to be able to run the oldest attars version against, you know, whatever Python environment I'm running. And a he claims that he and I haven't tried this out that it's actually it doesn't know why it isn't working, but it's just it doesn't work. And, and I and I'm, you know, I can't help him out there. But then he switches to, to Knox and it's a it's a lot longer example, but it works great. And the the longer furnace, the longer Enos I kind of like, and it points out in terms of number of lines. It's longer than the toxic equivalent, but that's because it's more explicit, and anyone with a passing understanding of Python can deduce what's happening here. including myself a year from now, explicit can be good actually. So I kind of like that, that the, it's okay that it's longer, you're not reading it all the time and having it more verbose might help. So I like that. And then of course, you brought this up the power of this, Nick, you can run, you can run anything you want. It's Python code. So that's nice. And then one bonus thing is apparently, it's a little easier to specify versions that Knox has a dash dash Python, and you can pick the version you want to use like that. And it just looks normal. You can do that with tox, too. But the normal way to do it is to say, what, like pi 310? Which you just have to know the syntax. It's not terrible, but whatever. Yeah. So good. Good, like a good overview of NOx.

00:10:45 Yeah, I didn't really, I didn't realize that NOx was playing Python. I'm sure that I knew that at one point, but forgot about and Alex, that is an interesting advantage.

00:10:55 Yeah. Yeah. So I think I would have played with a little bit more. And I see, he points out is also that he's not switching completely over to Knox, but he does have some projects using talks. And so I'm using No, it's good. There's two,

00:11:07 and they rhyme. All right. How about our sponsor this week? Oh, yes.

00:11:11 Thank you to Python. This episode of Python bytes is brought to you by Microsoft for startups. Microsoft for startups, has built founders hub to help startups be successful. Founders hub provides founders at any stage with free resources to help solve startup challenges that did. The digital platform provides technology benefits, access to expert guidance, skilling resources, mentorship, networking, connections, and so much more. It is truly open to all along with free access to GitHub and Microsoft Cloud with the ability to unlock credits over time. Founders hub has also partnered with other innovative companies to provide exclusive benefits and discounts including open AI. And we've heard from one of our listeners that he's taken advantage of this already, and the discounts are awesome. You'll also have access to their mentorship network, giving you access to a pool of hundreds of mentors across a range of disciplines. You'll be able to book a one on one meeting with the mentors, many of whom are former founders themselves. Make your ideas a reality today, with the critical support you'll get from Microsoft for startups, founders hub to join the program, visit Python bytes.fm/founders. Habit 2022. The link is in your show notes.

00:12:21 Ooh, indeed. Indeed, indeed. Thank you, Microsoft. All right. Ready for the next one? Yes. Not that one. So this comes from Tom's corner of the internet. Tom's got his own corner. Yeah, I got a very own corner. It's there's a lot of corners of the internet. To be honest, I don't know how many dimensions that is. But it's many, many corners exist in the internet. And here's one of them from Tom. And Tom says I don't think the tools he's using here are exactly about Python. But what he is applying them to certainly is says I Scout scanned every package on pi pi and found 57 Live AWS keys, not just oh, that looks like a string. That could be an AWS key. He logged in as that person. Oh, this is not on GitHub. I want to emphasize this is on pi pi. So pip install. Hey, look, thanks for shipping me a version of your keys. Weird, weird indeed. So it says after I inadvertently found that Infosys leaked AWS keys on pi pi. I have thought well, if it's once, it's probably many times, right. They're probably not the only one. So after scanning, get this all 430,000 published? Well, no, actually, I think that's releases 400. And there's 430,000 packages, but there's 4.1 million releases. So he I think he scanned all the version history as well as somebody found them and took them out. Anyway, after scanning those I found 57 valid access keys from you know, organizations. I'm sure that they're new at working with the cloud and especially AWS, it is tricky. So these organizations may not be familiar with the rules, but Amazon they're on AWS keys. That was the joke the rest not so much. But Intel, Stanford, Portland and Louisiana Universities keeping a local the Australian Government. Thank you for that. General Atomics fusion development, Teradata data lake and yes, your gloves to have been leaked top glove the world's largest glove manufacturer. I love the emoji of a little glove. There's a glove emoji at the end of the title. So you're like check this out. If I click on Australian government, it takes us to inspector.pi pi.io which I didn't really know anything about. Then it links to Data Cube dash O Ws, what version 186 and it pulls it down into whiskey local peipsi.

00:14:52 Does the comment say do not commit. Huskies did not commit. Not only are they committed?

00:14:58 You know what? Here's your Is the things interesting, okay. They may not be committed to GitHub, but they may have forgotten to take them out when they did the build, step to build the wheel, and then they comment them out or somehow remove them from going to get up. And that's Oh, I

00:15:14 could totally see how this could be easily done. Because, yeah, you have to go through an extra step to push from GitHub to pi pi. A more natural beginner state is you publish to get a banjo published by beer?

00:15:29 Yeah, exactly. It's it's very if you haven't set up full otter end to end automation that does the publish for you, which I think a lot of people haven't. Yeah, it's easy, easy to have this happen. Alright, so let's go through this real quick here. So how do we do this? Detecting AWS keys is actually pretty simple. Did you know that there's a regular expression that is a valid match for AWS keys, either there's kind of random business, but no, there's a certain format that they take. So you can you can tell this is not just a key, it is an AWS key ID.

00:15:59 Oh, cool. So now I know how to search for him in other people's repos, I feel

00:16:03 like this would be a pretty awesome pre commit hook. And you know, there's tools like twine and others that people use to build, build their packages that get shipped the IPA, yeah, and pi Bi itself, all of those could start applying checks for this kind of stuff, right? Because GitHub, access keys have a certain pattern. Now I don't remember there's like, there's some prefix that they seem to have that looks like it's predictable. I feel like maybe, maybe this could be put into the supply chain pipeline, as they call it. But anyway, there's a regular expression you can run against to find them. And here we go. So we can use the amazing rip grep to search packages for this pattern. And look at that, here we go. You pull down this, this JSON file, and then you rip grip it and boom outcomes, the access keys whoopsie. Apparently Amazon pay at this point here. But just because the keys are present, are they valid? I don't know. So the next step shows you how to execute the AWS CLI command to get the color identity to see if it's actually valid. Right. Okay, so it says, Now the devils in the details, the Z dash D flag doesn't support searching zips. So let's go. Let's go and tear this up and points out, you can get the entire over@github.com or f pi pi dash data, you get the entire static dump of pi pi data. Oh, no, this, I had no idea. So I'm like, wait a minute, let's go check this out pi pi dash data, this is automatically updated pi pi API data available in bulk. So the contents of the biggest hire, not small. See, see the shallow checkout? Perhaps the contents of the entire pipe API JSON API for all packages, updated every 12 hours? Wow. Yeah. So says, for example, here's the JSON for Django. So anyway, I didn't know that that exists. That's pretty awesome. Then he set up a GitHub action to pull those down. Then GitHub actions, let's see, did it a GitHub secret scanning service will kick in and like AWS know that the keys are leaked, this will cause AWS to open a support ticket with you to notify that your keys are leaked, which is kind of an interesting chain of events that happens here. But it talks about how how old the keys might be the oldest one is from 10 years old, from 2013. And different reasons this happens. It's hard, for example, to test against AWS. Another reason that they say is like there's legitimate and quote uses. One of the things they talk about is you know, why? Why is this happening? And Python being super heavily used in data science and ml, a lot of folks come from that side of the world without super strong software engineering practices. And so maybe, you know, coming from economy, and being an economist, you know, I go I got this thing working. Let me publish this up for to help people, right. It's really easy that you didn't really think about some of these things, right? But basically, don't put your secrets in your source code. Don't put them in GitHub. And you know, don't buy the transitive property put them in pipe. Yeah, either. Yeah, yeah. So anyway, what do you think?

00:19:25 It's said shaker? Interesting. We need we need like stickers made up for black tops. Do you know where your keys are?

00:19:34 Exactly. It's 10pm. Do you know where your keys yes, they said they're sleeping at their friend's house that are actually in a frat party. Okay.

00:19:43 Yeah, so the article is like missing one step. And that's how to how to set up a bitcoin miner on all these keys that you

00:19:53 that's left as an exercise to the user by the way, nice little Hugo Hugo website here. Gotta give it a little shout out to that and I We both like our Hugo. Okay, that's it for this one. Okay, what's your your final one for it?

00:20:05 I've got hypothesis. So I get actually asked this a lot. I do like hypothesis, but it's a little overwhelming I get asked. So what do you think about hypothesis? Or something like that? Or do whatever? Yes, I use hypothesis. I do like it, but it is it can be overwhelming. So we're gonna take a look at a an article called Getting Started with property based testing in Python with hypothesis and pi test. And this is from Robert Rodriguez arrow, and I'm not gonna try the rest of the name. Rodrigo, maybe? I'm not sorry. Cool. nameko wrote sorrow. Yeah. Anyway, it's on the semaphore blog. And there's a lot of what I liked about this article. And the well, first off, what I really like about property based testing is not that I mean, it can find some bugs in your code. And that's, that's kind of what it's for. That's good. But it also makes you think about it. So thinking about a few examples to test your code and corner cases. And all that stuff is good to say, you know, how do I how do I know if my codes working, but with property based testing, especially and I think a good place to focus on is algorithmic stuff. So you've got like some type of some algorithm and inside you're in a function, and you really want to make sure that that's just solid out no matter what you throw at it. And so that's a great place for property based testing. But what you do is you think about, you have to think about what properties are true, because what hypothesis is going to do is you're going to throw a bunch of input at your function. And so you have to think, How do I tell if I don't know what the input is? If the answer is correct, because if you know the input, you can, like, calculate it yourself whether the answer is correct or not, or something. But without that, you thinking and properties. And so I love this article, the first descript the example it goes through two examples. The first example is a greatest common denominator in math problem of like thinking about, I mean, you can just like have some known problems that you know, the answer to and pull those out was great. But how would you test like for every number? And so going through a thinking about what to test is great, what did he talk about? For greatest common denominator, your answer is going to be positive? And the answer needs to divide both both of the numbers, right? That's kind of the point of it. But then, how do you know if it's the right one? Well, no other number larger than your answer is going to be able to divide in Nm. So it's kind of you're gonna end up doing kind of an exhaustive search a little bit, but that's okay. It's, it's its source code, it'll run shouldn't be too long. And the other thing hypothesis do does, which I didn't know at first is, it's pretty good at picking numbers that will probably break your code. And by default, it only picks 100 numbers, it only picks up 100 test cases. And the limit is important because often your your sample size that you could test is infinite. So you don't want it to just run forever, you want it to be some some constraints on it. So the he goes through this example coming up with how to test that so writes a test, and then how to plug How do you help plug hypothesis into it. So you've got given and strategies is often used in so you put a decorator or tests a given strategy integers, for both the input and of in nm test to make sure in then you run, you run your your function and then test stuff around it, and the test is listed up higher in the code. And then quickly, you're going to find problems. And I like the greatest common divisor because there are test cases that you don't work, which is great, like 00. You know, by definition, we don't, if both of them are zero, it's undefined. And if one of them's zero, it's defined to be the other one, which I actually didn't know. I'm like, really, is that true? I looked it up and added think about that either. So apparently, if you like, greatest common divisor of zero and five is five, which, who knew? But aside from that, so coming up with edge cases is probably good for algorithmic type of code anyway. And then the the example of 00 How do you get rid of that? So in this, I guess this is one of my caveats about this article, he talks about limiting the range, which is good, it's a good example because you're gonna want to do this in a lot of your test cases is limit the range so you can put a min and max on different things. And there's a lot more than numbers. You can do text and you can do all sorts of stuff with hypothesis but I think good starting with numbers is a good one. I just don't like the solution that he came up with that solution he came up with is limit one of them to from one to 100 so that you're never going to have 00. And unlike their, I personally would have used a different mechanism. So my my recommendation is a, there's a strategy called so Oh, that strategies, making assumptions. So there's a thing in hypothesis called assume. And you can say, within a test, you can say assume something, assume it's just like it assert, but it doesn't fail your test. If it fails, the it rejects the test case, is what how it works. So you can say, for the 00. So case, you can say assume n equals n is not equal to or assume not, n equals m equals zero. I know it's hard to do this without code. But you can make an assumption there so that it'll kick that one out. That's how I would have done that case. But other than that, it's a really great introduction to the how to work with property based testing. So give it a thumbs up, then there's a second example, which is nice, too. So

00:26:00 it's cool. I'm I didn't know about assume so very good to know about that.

00:26:04 The other thing that I think is the good thing to know about his example, so like the example 00, we specifically don't want to test that because we know it's broken, or it's not defined. But there are lots of cases where you're like, uh, you know, somebody, you're doing property based testing at something, and you get a defect of like, well, if I run these numbers, it fails. And you're like, Oh, well, we want to make sure we always run that. So with example, you can say hypothesis, you get to come up with the examples, except for always run this one also. So and you can just kind of stack them up. That's good.

00:26:36 Yeah. And so for people listening example, is a decorator, you put on your tests, at example, and you put a certain set of parameters that get called there.

00:26:44 Yeah, I just, I kind of don't like that. So examples is a decorator that you put on the outside to say, run this one always add like the reverse also, to say, this particular example, don't run it, because I know it's broken. And the way we get around it with the assume part, but it would be cool. If there was like a don't run this example.

00:27:04 Decorate. Yeah, that looks very helpful. I learned some things so excellent. How about you?

00:27:08 What's next?

00:27:09 We got extras?

00:27:10 Extras? With our normal ones. Yes,

00:27:14 time flies when you're having fun, you know? Yeah. Alright, it will me go first one, two years.

00:27:19 I got a short one, right? Go for it. Okay, so my let's, let's get rid of that. We don't need that. My exam. My extra is just that this came in the mail. And I'm really excited about it. So it's the Japanese version of Python testing with PI test. It's been out for a little while in Japan. But it got translated. I was in touch with the translator. And they asked me a few questions. Very respectful dude. And I'm glad and I'm like, Can I get a copy? And they sent me they sent me a few copies actually. So pretty exciting.

00:27:55 Fantastic. Oh, that's really cool. It's neat to see it. It's nice to be reminded of the global reach.

00:28:01 Yeah, and not just the cover, lay insides are there too. But

00:28:05 amazing. So you're going to learn Japanese, so you're gonna figure this out. I do

00:28:10 have a friend that speaks Japanese, so I'm gonna go and see, but they'd have code. But

00:28:16 yeah, it's alright. I'm sure they're gonna find it riveting anyway.

00:28:21 Yeah, that's awesome. Was it? What are your extras?

00:28:24 Well, a couple of things. So it seems like I have survived the very first item bites on my new Mac Mini. I just got, you know, Apple released the Mac Mini Pro in two and I got that and so far, super, super neat. I can recommend as a lot, lots faster than the previous Mini. So I mentioned that I had, I used to have money and then I had a mini on order. And now I actually have a mini a new mini it does. It looks identical to the other but it it goes way faster, which is great. Maybe I have more to say about that later. Alright, so have you heard that Twitter is going through some turmoils? I'm not sure. Something's going on over there. The latest turmoil is that they decided to unceremoniously unprofessionally cancel all the third party Twitter apps.

00:29:11 That's just insane. It's pretty

00:29:13 insane. Like, I think it's honestly I think it's fine and within Twitter's right to say, look, we don't want to have third party apps. We have a business model. That doesn't work. Well there. There's not third party Facebook apps. There's not third party Instagram apps are there. I don't think so. Anyway, I think it's fine. But the way that it was done was, Oh, we're just going to cut them off. And then in a few days, maybe somebody will say something. What they said was the reason we cut off things like tweet bot and other ones is because they violated the terms of service. Like Wait, we've been doing this for 10 years. What do you mean, they the reason they violated them is they went back and updated the terms of service and said we don't allow third party apps. It was just really weird. Anyway, I want to just direct people who want to Uh, you know, enjoy the moment, technically and socially to tap bots.com/tweet bot where they put up a memorial to tweet bot Brian, is it this a fantastic picture

00:30:11 there really is. There's this little elephant, but it's all like like 3d looking like claymation or something.

00:30:17 It's yeah, it looks kind of it does look a little claymation II and you know the mastodon elephant is at the gravestone of Tweed. And it has the life from April of April 2011 to January 2023 on the gravestone tweet bot, and he's just anyway, it's pretty interesting. The reason part of the I bring this up, not just for the picture is if you're into Mastodon, the same company decided, well, we're doubling down on Mastodon, and creating ivory, which there's been a ton of talk about it being a really cool app for if you want something better than, say, the progressive web app, or mastodon. I know there are others out there as well. But a lot of people are really big fans of tweet bot and tap bots, the company and so you can now this is now publicly available. Okay? So so there's that. And anyway, I started using it. I like it really well, I don't use it exclusively over just using the Progressive Web App. Because the progressive web app has the advanced view where you have multiple columns, you can create searches for hashtags, and pin those as columns. And it's really nice, but this is quite a nice, nice app if you're not kind of doing that advanced view. Oh, and by the way, Christopher Tyler has caught something incredible. Yeah, I have missed this. This gravestone in the memorial happens to be on Mars. I think it kind of looks like the thought. Why do you think it's on Mars? I don't know. Same thing that simulation. We're not sure about that. Anyway, check out ivory people can try that. If you're in iOS. That's a pretty good. One more quick, extra PyCon PyCon PyCon. Yay. I'm looking forward to this. I got my tickets. Brian, I'm going to be there for a week I'm going to try to be cruising around the Sprint's might even take a day and try to go skiing. I haven't decided we'll see what the weather's like out there. But it's in Salt Lake City, of course. However, I have news for you. I don't even I haven't even told you this officially. Okay. But I have gotten us an official time in place at Pycon to do a live Python bytes show. Yay. Awesome. Yeah. So we've previously kind of run around the first day and looked for somewhere where we might be able to do something. But we're supposed to have an official room and a time where we could actually live streaming, but we can talk to people ahead of time. If they really, they're going to be there and they want to come. So we shouldn't be able to have a cool event at PyCon. That's why I bring this up.

00:32:39 Yeah, it won't be on Tuesday, then.

00:32:43 It won't be on Tuesday, because it's for five Thursday night, Friday, Saturday, Sunday is the conference. So it's gonna be one of those states.

00:32:49 Awesome. I'm looking forward to that. I'll be there too. Neither of us are speaking but we'll do the live event. And then Michael is going to probably interview absolutely everybody at the conference.

00:33:00 Yeah, I'm trying something different this year, you know, talk Python, primarily for the courses side of things, has had a booth on the expo floor hall where I'll set up and meet people and show off the things we're doing. And you know, Brian, you've you've come a couple years hanging out there. We talked about Python bytes. And that booth as well, which is fantastic. This year, I'm not doing that. I just want to try to try to be around, have more, interact with more people and try to maybe do some more on the spot shows and some other stuff like that. Right? So yeah, absolutely. We're going to be at Pycon we're going to be doing fun stuff, just not at a booth this time. We're gonna try some try some variations on it this year.

00:33:39 Yeah. And I think I think a lot of people think they should hit us up. So like, especially if you thought about maybe asking to be on one of our shows, either yours or mine or this one, but you're a little nervous, then this is a great opportunity. One you don't have to be you could just contact us anyway. But at Pycon you can hit us up and say hey, I was curious if this would fit and in person sometimes it's easier to talk. And I'll be bringing stickers of course to promote the book. And I'm excited and also I'll be at pi cascades before PyCon by cascades is there is coming up in March in all and I'm speaking there to

00:34:18 be that's in Vancouver right yep, Vancouver BC lovely that's I've been to the one in Vancouver I think the inaugural One was there and it's really really nice there. So Excellent. Excellent.

00:34:29 I told my daughter I'm going and she's like what's the big deal? Thank you for like 20 minutes away different Vancouver

00:34:36 for those of you don't know the the people who explored the Europeans who explored the Pacific Northwest, they didn't have a lot of creativity. There's multiple Vancouver's there's like one just by Portland. There's one up in BC Mount Hood, one of the most awesome mountains around here. It's just named for the friend of some guy back in England who never even was here or looked upon the mountain like it really is. You eyes. It's also in a bad way. Okay. But yeah, the other the northern, the Canadian, Vancouver is a really nice place to go. Alright, you're ready for a joke, Brian. Yeah. So I feel like you and I can relate to this, given our age here. There's a post here that says from somebody named Mark the cat whisperer, but reshard by Rob Isaac. Mark says, I'm a Gen Xer. So I adapt to new technology like a millennial, but I get angry about it like a boomer.

00:35:31 I get that.

00:35:33 I get that too. I'm definitely in the genetic space. And oh, my gosh, I have more than one time, yelled at my computer. I find personally the way like the reason I connected with this joke so well as I get mad at other people's technology, because I'm like, I know this can be better. Why have you not put an index here? Why have you not autofill this? You know, like, just like, I know, you could make it better so easily. What is wrong with you? And then I guess the boomer side. But the joke is Rob says I didn't come here to be called out like this. Funny. All right. Well, that's what I got for us.

00:36:07 Nice. Well, thanks a lot, Michael, for joining us again today. And on this two heads always 30 to weight 300 and 21st episode.

00:36:17 Wow. Yeah. It's like the amazing countdown. We just don't know to what, three to

00:36:20 one contact. It's the future. Well, thanks, everybody for joining. And Thanks, Michael. And talk to everybody next week.

00:36:29 But Bye, everyone.

