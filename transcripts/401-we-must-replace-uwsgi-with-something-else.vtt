WEBVTT

00:00:00.001 --> 00:00:05.200
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.200 --> 00:00:10.800
This is episode 401, recorded September 16th, 2024.

00:00:10.800 --> 00:00:11.800
And I'm Brian Okken.

00:00:11.800 --> 00:00:12.800
And I'm Michael Kennedy.

00:00:12.800 --> 00:00:17.800
And this episode is brought to you by Scout APM. Check out their section later in the show.

00:00:17.800 --> 00:00:23.600
Connect with us, Michael, Brian, or the show at fostadon.org.

00:00:23.600 --> 00:00:26.400
But any mastodon will work.

00:00:26.400 --> 00:00:31.600
But the links are, we're all on Fostadon, mkennedy, Brian Okken, and Python Bytes.

00:00:31.600 --> 00:00:33.400
And of course, those are in the show notes.

00:00:33.400 --> 00:00:38.600
And if you'd like to join the show live, head to pythonbytes.fm/live.

00:00:38.600 --> 00:00:40.000
It's fun to do it at least once.

00:00:40.000 --> 00:00:43.600
Check it out. See what it's like to watch us in real time.

00:00:43.600 --> 00:00:47.400
And we're going to try something new today.

00:00:47.400 --> 00:00:49.600
We're streaming on X. No?

00:00:49.600 --> 00:00:51.200
We're trying to stream on X.

00:00:51.200 --> 00:00:54.200
But when I hit go, it actually said you need a premium account.

00:00:54.200 --> 00:00:55.600
So maybe we'll try that next week.

00:00:55.600 --> 00:00:57.200
Oh, never mind. Sorry.

00:00:57.200 --> 00:01:02.400
Or maybe we won't do it at all. I don't know. YouTube's good.

00:01:02.400 --> 00:01:05.400
Oh, OK. And Michael even said to keep that quiet.

00:01:05.400 --> 00:01:08.200
But just, you know, sorry. I'm just pretty excited.

00:01:08.200 --> 00:01:09.600
All right. I know. Well, we'll try it out.

00:01:09.600 --> 00:01:12.600
I think, you know, reaching more people, letting them participate is great.

00:01:12.600 --> 00:01:18.200
And we can give it a try. And, you know, we've told people that we both have courses and there's other stuff.

00:01:18.200 --> 00:01:21.000
But we're going to there's a there's a treat at the end.

00:01:21.000 --> 00:01:25.400
If you wait till the end of the show, we've got some extras that we're going to talk about.

00:01:25.400 --> 00:01:27.800
With some of the courses, it's pretty exciting.

00:01:27.800 --> 00:01:29.800
So but that's not now yet.

00:01:29.800 --> 00:01:33.200
Now we have whiskey. Whiskey anybody?

00:01:33.200 --> 00:01:37.000
This is this actually might make you want to drink this whiskey.

00:01:37.000 --> 00:01:39.600
Micro whiskey in particular. WSGI.

00:01:39.600 --> 00:01:42.000
As some people say, web service gateway interface.

00:01:42.000 --> 00:01:45.600
The friend and sibling parent.

00:01:45.600 --> 00:01:49.800
I don't know what the relationship of ASCII, the async gateway interface.

00:01:49.800 --> 00:01:53.000
Anyway, this is something I ran across.

00:01:53.000 --> 00:01:56.000
Just I was doing some work with Granian.

00:01:56.000 --> 00:02:01.200
So Granian is the web server that powers Python bytes right now and a couple other things, as you might imagine.

00:02:01.200 --> 00:02:04.000
And I was looking at it and it had a back reference.

00:02:04.000 --> 00:02:10.800
And one of the issues that was a feature I was asking about, namely, work are we starting after a certain amount of work gets done?

00:02:10.800 --> 00:02:20.600
Things like that. And it was coming from, I believe this comes from edX, some edX project, though I can't tell by the organization.

00:02:20.600 --> 00:02:27.000
Anyway, the title of this GitHub issue is this is them speaking amongst themselves in this project called Tutor.

00:02:27.000 --> 00:02:30.000
We must replace micro whiskey with something else.

00:02:30.000 --> 00:02:32.200
Like, wait a minute. Why must we do this?

00:02:32.200 --> 00:02:33.600
Wait, let me see what's going on here.

00:02:33.600 --> 00:02:36.200
So this is somewhat news to me.

00:02:36.200 --> 00:02:43.800
The very opening here by, let's see, this is this Regis Bemo wrote micro whiskey is now in maintenance mode.

00:02:43.800 --> 00:02:49.200
And sure enough, if you go over to read the docs, it says, note, this project is in maintenance mode.

00:02:49.200 --> 00:02:52.800
It only bug fixes and updates for new language APIs.

00:02:52.800 --> 00:02:56.400
Do not expect quick answers for GitHub issues or pull requests.

00:02:56.400 --> 00:03:01.400
Sorry about that. A big thanks to all users who have contributed over the last 15 years.

00:03:01.400 --> 00:03:04.600
That's awesome. However, I don't think that's awesome.

00:03:04.600 --> 00:03:09.600
It's awesome that they've been working on it for 15 years and people it's had such a good run.

00:03:09.600 --> 00:03:19.000
However, the part that's not great, as you point out, Brian, is this is a critical piece of Internet infrastructure when you're on the Internet.

00:03:19.000 --> 00:03:26.800
If this is running your app, right, this is the thing that handles all Python requests and effectively has an open socket to the Internet.

00:03:26.800 --> 00:03:33.200
And anything that just listens on an open socket on the Internet, especially stuff written in C, should make you nervous.

00:03:33.200 --> 00:03:38.200
Right. It's just it's there for for whatever might go wrong.

00:03:38.200 --> 00:03:40.600
And so there's a couple of things going on here.

00:03:40.600 --> 00:03:45.400
One, it's kind of it's not fully, fully abandoned, but it's nearly fully abandoned.

00:03:45.400 --> 00:03:46.700
Right. And that's not great.

00:03:46.700 --> 00:03:50.800
The other is it I don't believe it supports asynchronous programming.

00:03:50.800 --> 00:03:57.400
So if you want to do anything and async and await in your web apps, which is becoming increasingly popular, there's also not an option.

00:03:57.400 --> 00:04:01.300
So just for lots of reasons, it's probably time to find something else.

00:04:01.300 --> 00:04:08.100
And so they listed four things, some of which I would not recommend, but maybe there may be them wrong about it.

00:04:08.100 --> 00:04:12.300
G-Unicorn, which, by the way, some people pronounce goonicorn.

00:04:12.300 --> 00:04:14.500
But Brian, what is their logo? It's a unicorn.

00:04:14.500 --> 00:04:17.100
And what color is it? Green. It's a green unicorn.

00:04:17.100 --> 00:04:20.200
I'm pretty sure G-Unicorn stands for green unicorn, not goonicorn.

00:04:20.200 --> 00:04:22.300
But, you know, you'll say how you wish.

00:04:22.300 --> 00:04:25.700
But G-Unicorn is how I say it because it's a green unicorn.

00:04:25.700 --> 00:04:29.300
ModWhiskey, Cherry Pine, Waitress.

00:04:29.300 --> 00:04:34.000
I don't hear of any of these as being kind of high end production servers.

00:04:34.000 --> 00:04:39.700
Like Waitress is included with Pyramid as a debugging one, for example.

00:04:39.700 --> 00:04:48.900
So looking through, it says some people are suggesting Nginx unit, which is like a Python worker process that can run inside of Nginx.

00:04:48.900 --> 00:04:51.200
That could be interesting.

00:04:51.200 --> 00:04:52.500
Someone, this is how I found out about it.

00:04:52.500 --> 00:04:55.400
Someone says, hey, maybe we should look at a Granian.

00:04:55.400 --> 00:05:02.200
And Granian, I've had Giovanni, the guy who creates it on Python to talk about it.

00:05:02.200 --> 00:05:06.800
It's written in Rust. It's super stable in terms of its performance fluctuations.

00:05:06.800 --> 00:05:07.900
It's pretty nice.

00:05:07.900 --> 00:05:09.500
And so that's what we're using now.

00:05:09.500 --> 00:05:11.400
Before that, it was G-Unicorn.

00:05:11.400 --> 00:05:12.600
I think there's some good options.

00:05:12.600 --> 00:05:16.300
But the long and short of it is MicroWSGI is now in maintenance mode.

00:05:16.300 --> 00:05:23.500
And while that's not, you know, end of the line for it, I would start making plans to not be running on MicroWSGI if I was you.

00:05:23.500 --> 00:05:25.100
And you are, you know what I mean?

00:05:25.100 --> 00:05:25.600
Okay.

00:05:25.600 --> 00:05:33.800
I mean, that's, I'm actually, I'm interested to hear if we get any feedback from listeners that there might be other options or what the recommendations are.

00:05:33.800 --> 00:05:34.300
Let us know.

00:05:34.300 --> 00:05:37.000
Probably the best place would be to comment on the YouTube video.

00:05:37.000 --> 00:05:37.900
Put it below there.

00:05:37.900 --> 00:05:40.300
That's kind of our comment section these days.

00:05:40.300 --> 00:05:41.000
Yeah.

00:05:41.000 --> 00:05:41.600
Nice.

00:05:41.600 --> 00:05:42.100
Okay.

00:05:42.100 --> 00:05:43.200
All right. Over to you.

00:05:43.200 --> 00:05:46.500
Well, I was interested.

00:05:46.500 --> 00:05:53.400
Actually, I have a project where I was thinking about writing a little segment of it in Rust, even though I don't know Rust yet.

00:05:53.400 --> 00:06:01.400
But I was interested in the, a lot of places are, you know, optimizing little bits of their code with Rust instead of C now.

00:06:01.400 --> 00:06:05.800
So this is a great article from Itamar.

00:06:05.800 --> 00:06:08.700
I think it's Itamar Turing, Turing, Turner, Turing?

00:06:08.700 --> 00:06:10.300
Anyway, Itamar.

00:06:10.300 --> 00:06:15.300
It's an article called "Let's Build an Optimized Rust Extension for Python."

00:06:15.300 --> 00:06:17.900
And I really love the, like, the focus of this.

00:06:17.900 --> 00:06:24.400
It isn't like, it's, the focus of it really is I've got one algorithmic function that I want to speed up.

00:06:24.400 --> 00:06:35.500
And that's, I think that's a great place for maybe not building a package for the rest of the world to use, but internally, for internal tools, that's a great way to look at things.

00:06:35.500 --> 00:06:41.500
So his example is a thing of counting unique values.

00:06:41.500 --> 00:06:42.900
And you could just count them.

00:06:42.900 --> 00:06:48.800
He's got the exact count is using sets and the length of a set, put everything in a set.

00:06:48.800 --> 00:06:53.800
But he says if you've got 10 million items, it'll be a set with 10 million items in it.

00:06:53.800 --> 00:06:55.800
So there's a space limit there.

00:06:55.800 --> 00:06:58.400
So, and then you take the length of that.

00:06:58.400 --> 00:07:02.200
So I'm in there, you know, you probably count things or something.

00:07:02.200 --> 00:07:05.900
But the, how do we speed that up?

00:07:05.900 --> 00:07:12.900
And one of the algorithms is a, it's called a very simple algorithm from, I'm not going to try to pronounce that name.

00:07:12.900 --> 00:07:20.100
But he has a link to the algorithm that's getting an approximation of the answer of approximately how many.

00:07:20.100 --> 00:07:23.400
And so he just implements that whole algorithm in Python.

00:07:23.400 --> 00:07:28.600
And then runs it and it, and then runs it against the exact count.

00:07:28.600 --> 00:07:29.600
And it's pretty close.

00:07:29.600 --> 00:07:31.600
He runs it a few times and he gets different answers.

00:07:31.600 --> 00:07:33.600
But that's a crazy algorithm.

00:07:33.600 --> 00:07:34.100
Yeah.

00:07:34.100 --> 00:07:35.600
Oh, did you read it?

00:07:35.600 --> 00:07:37.300
Well, just looking over it real quick.

00:07:37.300 --> 00:07:46.600
It's, you know, given a iterable, make some and how fast adding new items is increasing the duplicity or lack thereof.

00:07:46.600 --> 00:07:47.100
Yeah.

00:07:47.100 --> 00:07:48.300
That's pretty wild.

00:07:48.300 --> 00:07:48.800
It is.

00:07:48.800 --> 00:07:49.600
Pretty close.

00:07:49.600 --> 00:07:52.700
And I remember reading about this algorithm recently also.

00:07:52.700 --> 00:07:57.900
But anyway, it's kind of a neat, neat example of, okay, let's try this algorithm out.

00:07:57.900 --> 00:08:01.900
And there's other algorithms for approximating uniqueness as well.

00:08:01.900 --> 00:08:03.200
He comments later.

00:08:03.200 --> 00:08:06.300
But he just took this one because it's kind of a small algorithm.

00:08:06.300 --> 00:08:08.100
So it kind of works.

00:08:08.100 --> 00:08:13.800
And so let's, he did a speed comparison and it's significantly slower.

00:08:13.800 --> 00:08:18.100
It's the exact count is 0.14 seconds.

00:08:18.100 --> 00:08:20.600
And the approximation is 0.78 seconds.

00:08:20.600 --> 00:08:24.300
So it's a lot slower than the exact count.

00:08:24.300 --> 00:08:26.700
But it takes up tons less memory.

00:08:26.700 --> 00:08:29.100
So if you have a memory constraint, that's important.

00:08:29.100 --> 00:08:36.100
And also if you're just doing an example from a small count, but you have a huge set that you're really going to count, you want an approximation.

00:08:36.100 --> 00:08:41.400
So this is a great setup for how do we make this faster in Rust?

00:08:41.400 --> 00:08:43.900
And so he actually walks through all of the steps.

00:08:43.900 --> 00:08:46.500
Like you haven't done this before.

00:08:46.500 --> 00:08:51.400
Let's get Maturin and Py03 and set up a project.

00:08:51.400 --> 00:08:56.500
So he's even like just Maturin new Rust counterprox project.

00:08:56.500 --> 00:09:02.300
And then goes into it, looks at what the project set up already.

00:09:02.300 --> 00:09:07.100
It's got some cargo toml files, pyproject.toml and a source file.

00:09:07.100 --> 00:09:12.400
And then he just does it right there and figures out how to install it.

00:09:12.400 --> 00:09:16.500
You can already install it even though there's nothing there in the example project, which is kind of cool.

00:09:16.500 --> 00:09:17.900
He did look into it.

00:09:17.900 --> 00:09:22.800
It needs, Rust doesn't have a random in the example or the algorithm uses random.

00:09:22.800 --> 00:09:33.700
So this is kind of neat too, is how do you, introduction of how do you add dependencies in its cargo add rand that adds a dependency to your project.

00:09:33.700 --> 00:09:34.400
So that's it.

00:09:34.400 --> 00:09:37.600
You've got Py03 and rand as dependencies.

00:09:37.600 --> 00:09:42.800
And then he just basically translated that algorithm directly to Rust.

00:09:42.800 --> 00:09:46.600
And I kind of like that idea of having just a side by side comparison.

00:09:46.600 --> 00:09:51.300
And I'm thinking about like putting these in two editors so I could see them side by side.

00:09:51.300 --> 00:09:52.900
Exactly.

00:09:52.900 --> 00:09:53.200
Okay.

00:09:53.200 --> 00:09:57.100
So that thing and then how is it faster?

00:09:57.100 --> 00:10:05.500
It's like twice as fast as the Python version, but you would think like, are we supposed to have like blazing speeds with Rust?

00:10:05.500 --> 00:10:09.800
So and I kind of love that he picks something that like isn't as, isn't as optimal.

00:10:09.800 --> 00:10:13.000
Like I don't want that much, like twice as fast.

00:10:13.000 --> 00:10:14.400
I want it to be super fast.

00:10:14.400 --> 00:10:17.000
So he also goes into some optimization.

00:10:17.000 --> 00:10:19.800
So first off is link time optimization.

00:10:19.800 --> 00:10:21.500
It's just an ability.

00:10:21.500 --> 00:10:31.500
And since this is a Rust application that you're going to not, you know, it's fine to take a little bit extra time in linking to make it faster runtime.

00:10:31.500 --> 00:10:32.600
Go ahead and turn that on.

00:10:32.600 --> 00:10:35.900
And then he was looking at the random number generator.

00:10:35.900 --> 00:10:37.700
There's a couple ways to speed that up.

00:10:37.700 --> 00:10:40.300
One of them is to use the small random number generator.

00:10:40.300 --> 00:10:43.100
It's like less random, but you know, good enough.

00:10:43.100 --> 00:10:44.600
It's not cryptography.

00:10:44.600 --> 00:10:45.500
Yeah.

00:10:45.500 --> 00:10:57.400
And then, and then also there's instead of storing in part of the algorithm, he's storing items and he's like, instead of and later taking hashes and instead of storing the items, just store the hashes.

00:10:57.400 --> 00:11:08.600
And then, and then Rust, Rust is a thing like you can optimize the dealing of collections if you tell it that you're just storing hashes in there.

00:11:08.600 --> 00:11:11.100
So it doesn't try to rehash your hash.

00:11:11.100 --> 00:11:25.300
And so, so it's like a no hash hasher, another dependency, but that optimization altogether makes it even faster, but it's, it's, it's 0.21.

00:11:25.300 --> 00:11:34.000
So it's like what, almost four times faster, like a little three and a half times faster than the native, the Python version.

00:11:34.000 --> 00:11:35.200
So that's better.

00:11:35.200 --> 00:11:43.200
And then it talks about partially other things, but it's, I don't think this is a really about how much faster his implementation of this was.

00:11:43.200 --> 00:11:44.500
It's, these are the steps.

00:11:44.500 --> 00:11:50.900
If you want to go through and speed up a chunk of your Python code, this is a good list of how to do that.

00:11:50.900 --> 00:11:51.600
So yeah.

00:11:51.600 --> 00:11:52.000
Looks great.

00:11:52.000 --> 00:11:55.200
I love the, the walkthrough and it's not a huge project.

00:11:55.200 --> 00:11:56.600
It's not a huge rewrite in Rust.

00:11:56.600 --> 00:11:58.600
It's just this function slow.

00:11:58.600 --> 00:12:00.100
Let's make this function fast.

00:12:00.100 --> 00:12:05.400
And I think that's exactly, I'm going to try to probably learn Rust is I'm not going to try to learn the whole language.

00:12:05.400 --> 00:12:08.400
I'm just going to learn enough to optimize something.

00:12:08.400 --> 00:12:10.100
So, and then build on that.

00:12:10.100 --> 00:12:10.800
Yes.

00:12:10.800 --> 00:12:13.600
And now before we move on, two things really quick.

00:12:13.600 --> 00:12:19.000
John out in the audience points out, says, I believe ModWhiskey is an Apache plugin module, which I think he's right.

00:12:19.000 --> 00:12:20.100
And I think that's as well.

00:12:20.100 --> 00:12:23.200
And I just wouldn't really want an Apache plugin.

00:12:23.200 --> 00:12:26.600
Kind of like a thing that's a little more dedicated, but yes, I agree.

00:12:26.600 --> 00:12:30.500
And then Waitress is one of the few options available on Windows based server platforms.

00:12:30.500 --> 00:12:31.100
Okay.

00:12:31.100 --> 00:12:32.200
That's interesting.

00:12:32.200 --> 00:12:37.000
The context of the GitHub issue I talked about before was a Docker image.

00:12:37.000 --> 00:12:39.400
And so I'm pretty sure it was Linux.

00:12:39.400 --> 00:12:42.400
But yeah, I didn't know about the Windows aspect there.

00:12:42.400 --> 00:12:44.800
And I didn't point out, well, what would I have picked?

00:12:44.800 --> 00:12:52.500
So reasonable options to Michael sound like, Granian, which we're using, uvicorn, which used to be a kind of dev thing.

00:12:52.500 --> 00:13:00.200
And you could plug it into g-unicorn with uvicorn workers, but actually it's now its own standalone thing with worker management.

00:13:00.200 --> 00:13:03.100
So, so uvicorn is its own possible option now.

00:13:03.100 --> 00:13:09.800
Hypercorn from Philip Jones and Cort, and then g-unicorn with uvicorn workers for async stuff.

00:13:09.800 --> 00:13:12.400
So anyway, putting a bow on that one.

00:13:12.400 --> 00:13:12.700
Okay.

00:13:12.700 --> 00:13:15.000
So you have a few things you do instead.

00:13:15.000 --> 00:13:19.700
Yeah, I don't, I'm just using Granian right now, but all those would be good options, I think.

00:13:19.700 --> 00:13:20.300
Okay.

00:13:20.300 --> 00:13:24.000
Let me tell you real quick about Scout APM.

00:13:24.000 --> 00:13:25.700
They're big supporters of Python Bytes.

00:13:25.700 --> 00:13:27.400
So we appreciate that very much.

00:13:27.400 --> 00:13:36.400
So if you are tired of spending hours trying to find the root cause of issues impacting your performance, then you owe it to yourself to check out Scout APM.

00:13:36.400 --> 00:13:45.600
They're a leading Python application performance monitoring tool, APM, that helps you identify and solve performance abnormalities faster and easier.

00:13:45.600 --> 00:13:58.400
Scout APM ties bottlenecks such as memory leaks, slow database queries, background jobs, and the dreaded N plus one queries that you can end up if you do lazy loading in your ORM, and then you say, oh no, why is it so slow?

00:13:58.400 --> 00:14:00.800
Why are you doing 200 database queries for what should be one?

00:14:00.800 --> 00:14:02.200
So you can find out things like that.

00:14:02.200 --> 00:14:03.900
And it links it back directly to the source code.

00:14:03.900 --> 00:14:09.400
So you can spend less time in the debugger and healing logs and just finding the problems and moving on.

00:14:09.400 --> 00:14:12.400
And you'll love it because it's built for developers by developers.

00:14:12.400 --> 00:14:14.200
It makes it easy to get set up.

00:14:14.200 --> 00:14:16.500
Seriously, you can do it in less than four minutes.

00:14:16.500 --> 00:14:17.400
So that's awesome.

00:14:17.400 --> 00:14:20.900
And the best part is the pricing is straightforward.

00:14:20.900 --> 00:14:26.200
You only pay for the data that used with no hidden overage fees or per seat pricing.

00:14:26.200 --> 00:14:33.200
And I just learned this, Brian, they also have, they provide the pro version for free to all open source projects.

00:14:33.200 --> 00:14:40.900
So if you're an open source maintainer and you want to have Scout APM for that project, just shoot them a message or something on their pricing page about that.

00:14:40.900 --> 00:14:44.600
So you can start your free trial and get instant insights today.

00:14:44.600 --> 00:14:47.100
Visit pythonbytes.fm/scout.

00:14:47.100 --> 00:14:49.600
The link is in your podcast player show notes as well.

00:14:49.600 --> 00:14:50.500
And please use that link.

00:14:50.500 --> 00:14:55.900
Don't just search for them because otherwise they don't think you came from us and then they'd stop supporting the show.

00:14:55.900 --> 00:14:58.700
So please use our link pythonbytes.fm/scout.

00:14:58.700 --> 00:14:59.500
Check them out.

00:14:59.500 --> 00:15:01.500
It really supports the show.

00:15:01.500 --> 00:15:02.000
Definitely.

00:15:02.000 --> 00:15:03.000
I'm next, huh?

00:15:03.000 --> 00:15:03.600
Yeah.

00:15:03.600 --> 00:15:04.200
All right.

00:15:04.200 --> 00:15:11.400
What if Brian, what if you were super excited, finally be contacted by a recruiter for one of those jobs you're looking for.

00:15:11.400 --> 00:15:11.900
Yeah.

00:15:11.900 --> 00:15:16.200
And really all they wanted was your passwords, your bank login and your crypto.

00:15:16.200 --> 00:15:17.100
Dear.

00:15:17.100 --> 00:15:20.500
Dear, that is so, why can't people be better?

00:15:20.500 --> 00:15:22.100
You know, some people just suck.

00:15:22.100 --> 00:15:31.200
So the item I want to talk about comes to us from Reversing Labs and pretty cool logo there with the reversed R for Reversing Labs, I got to say.

00:15:31.200 --> 00:15:37.600
And the title is fake recruiter coding tests target devs with malicious Python packages.

00:15:37.600 --> 00:15:38.600
That's not ideal.

00:15:38.600 --> 00:15:46.800
And I don't know why we need to have the word Python packages in here, just malicious Python code, because a lot of it comes from GitHub repositories, not IPI.

00:15:46.800 --> 00:15:48.100
So, I don't know.

00:15:48.100 --> 00:15:51.800
I think kind of put the packages to the side, like that's not germane to this really.

00:15:51.800 --> 00:15:55.500
What is, is people are using recruiting tests.

00:15:55.500 --> 00:16:03.400
So a lot of this is something that I never encountered in my, yes, I never encountered this in my entire life, a take home exercise or something.

00:16:03.400 --> 00:16:10.400
It was interviews and it was live sort of code performances or whatever, I guess you would call them, but never take home.

00:16:10.400 --> 00:16:13.300
And that's just something that's becoming really popular for better or worse.

00:16:13.300 --> 00:16:13.700
All right.

00:16:13.700 --> 00:16:25.400
So, reversing labs found the VM connect campaign, which I don't really know much about continuing with malicious actors posing as recruiters using packages and the names of financial firms.

00:16:25.400 --> 00:16:27.000
Tell lure developers.

00:16:27.000 --> 00:16:28.000
So that's pretty bad.

00:16:28.000 --> 00:16:29.600
Uh, what's happening here?

00:16:29.600 --> 00:16:32.800
So they've, this is not exclusive to Python.

00:16:32.800 --> 00:16:34.800
It's happened through NPM before and so on.

00:16:34.800 --> 00:16:39.600
And this seems to be tied to North Korea's Lazarus group, a ATP group.

00:16:39.600 --> 00:16:40.700
That means bad stuff.

00:16:40.700 --> 00:16:44.200
You know, they're pretty, pretty skilled, but here's what happens.

00:16:44.200 --> 00:16:51.000
They found that people are getting these requests for coding tests and it says, here's your, here's your coding tests.

00:16:51.000 --> 00:16:53.200
And if you look at it, I think I can even zoom in here.

00:16:53.200 --> 00:16:54.200
Well, not really.

00:16:54.200 --> 00:16:55.400
It kind of zooms.

00:16:55.400 --> 00:16:59.200
Anyway, it says here's a fully functional password manager in Python.

00:16:59.200 --> 00:17:02.100
Basically this, you can see some grammatical errors in there.

00:17:02.100 --> 00:17:04.700
You might, that might clue you off, but probably not.

00:17:04.700 --> 00:17:08.600
This is a fully functional password manager that possesses almost all of its features.

00:17:08.600 --> 00:17:09.600
And here's an image.

00:17:09.600 --> 00:17:15.400
And this is the important part before making any modifications, ensure the project is running successful.

00:17:15.400 --> 00:17:22.200
And if you trusted this organization, you were really keen to get going like, all right, well, let's just, I know I'm doing Python space.

00:17:22.200 --> 00:17:23.200
This boom, boom, boom.

00:17:23.200 --> 00:17:37.300
It's the running of this project that they delivered to you over GitHub or some other, they just sent you a thing to unzip and run that then downloads all the code, installs back doors, and various other malware into your machine.

00:17:37.300 --> 00:17:41.100
And then you probably go on to finish the work and submit it and never hear back, oddly.

00:17:41.100 --> 00:17:41.900
Yeah.

00:17:41.900 --> 00:17:46.200
Like, and then somebody is actually like finishing the assignment and not.

00:17:46.200 --> 00:17:47.200
Yes, I know.

00:17:47.200 --> 00:17:48.600
It's so sad.

00:17:48.600 --> 00:17:49.900
Sucks so much.

00:17:49.900 --> 00:17:51.200
Oh, that's terrible.

00:17:51.200 --> 00:17:51.700
Yeah.

00:17:51.700 --> 00:17:59.600
So the analysis revealed that the direct parent of the detected malicious files is a Python PYC file.

00:17:59.600 --> 00:18:05.200
So that's how they obscure it as part of what they give you are PYC files, not Python source files.

00:18:05.200 --> 00:18:07.200
So you can't really see inside them.

00:18:07.200 --> 00:18:12.900
Oh, and you, and you kind of think, oh, well, that's legitimate because it's a, because it's an interview.

00:18:12.900 --> 00:18:15.700
I don't want to show me, show me the source code or something.

00:18:15.700 --> 00:18:16.200
Exactly.

00:18:16.200 --> 00:18:16.700
Yeah.

00:18:16.700 --> 00:18:20.300
It totally makes sense because yeah, if I saw this, well, then I would be able to.

00:18:20.300 --> 00:18:20.800
Nope.

00:18:20.800 --> 00:18:25.900
Your job is to have this opaque thing and write this one part, but no, it's just the opaque part is a virus.

00:18:25.900 --> 00:18:27.300
Oh, that's so sucks.

00:18:27.300 --> 00:18:28.300
It totally does.

00:18:28.300 --> 00:18:28.800
Yeah.

00:18:28.800 --> 00:18:31.200
So I would, do you have recommendations?

00:18:31.200 --> 00:18:32.700
Well, I, let's hear yours first.

00:18:32.700 --> 00:18:48.600
Oh, I was thinking that, so, I've, both, taken interviews like this, coding exercises and given them, but in, in, let's see, most of the times I've only given them in text form.

00:18:48.600 --> 00:18:57.300
I've given a description and then somebody can like email me back or, or submit, on a form the, what code for answering it.

00:18:57.300 --> 00:19:03.500
Um, and then also since there's AI and everything, or you could just like hire somebody to do the code for you.

00:19:03.500 --> 00:19:07.700
Um, that code I then use as part of the interview process.

00:19:07.700 --> 00:19:14.200
Like we'll talk about, we'll talk about what choices they made in the code during the actual talking interview.

00:19:14.200 --> 00:19:21.000
Um, the other thing, and I've had, I've had that happen with me as well when I've done coding exercises.

00:19:21.000 --> 00:19:22.800
The other thing is using platforms.

00:19:22.800 --> 00:19:24.500
Like there's, there's online platforms.

00:19:24.500 --> 00:19:28.000
You don't install anything on your own computer, during a coding exercise.

00:19:28.000 --> 00:19:32.200
And I would be more willing to do that, then, then believe somebody.

00:19:32.200 --> 00:19:41.300
But I know there's a lot of GitHub based, like there's a private repo you get add to, and then you can go and try to take the, do the coding assignment.

00:19:41.300 --> 00:19:46.200
I know that happens and I would just, I probably wouldn't do it, I guess, or I don't know, but yeah.

00:19:46.200 --> 00:19:46.700
Sure.

00:19:46.700 --> 00:19:55.900
I think some other things that I had in mind was if you're just trying out a Docker container and it's something real simple, sorry, a Python package, I'd do it in a Docker container.

00:19:55.900 --> 00:20:08.900
You know, if you're just doing it on the terminal or like a simple editor, just fire up a Docker container, shell into it, you know, Docker exec, GSH or bash or whatever, and then play with it over there and then throw the container away.

00:20:08.900 --> 00:20:11.300
Or like you said, there's a lot of online platforms.

00:20:11.300 --> 00:20:16.300
So for example, I think VS Code has, you know, code.dev.

00:20:16.300 --> 00:20:17.200
Is that right?

00:20:17.200 --> 00:20:18.000
I can't remember what it was.

00:20:18.000 --> 00:20:23.300
The, like if you open up GitHub and just press dot, whatever happens there, maybe you could do it there.

00:20:23.300 --> 00:20:23.800
Yeah.

00:20:23.800 --> 00:20:24.800
Um, maybe not.

00:20:24.800 --> 00:20:30.000
Uh, probably what I would actually do is I would fire up a virtual machine that has snapshotting capabilities.

00:20:30.000 --> 00:20:35.200
And by snapshot, I mean like save how it is now on the, on the disk and then make a differencing disk.

00:20:35.200 --> 00:20:40.100
And then when you're done with the project, just throw away the snapshot, the, the different reset to the snapshot.

00:20:40.100 --> 00:20:40.700
Right.

00:20:40.700 --> 00:20:45.800
So that's long as it's, you're not afraid of it being potentially on your network.

00:20:45.800 --> 00:20:46.100
Right.

00:20:46.100 --> 00:20:48.400
But if it's in a VM, it's probably pretty safe.

00:20:48.400 --> 00:20:48.700
Right.

00:20:48.700 --> 00:20:56.100
And then also you could go over to Azure and get a Windows machine, Windows VM that you can remote desktop into.

00:20:56.100 --> 00:20:58.200
That's a full Windows machine in the desktop.

00:20:58.200 --> 00:20:58.600
Yeah.

00:20:58.600 --> 00:21:06.100
In the cloud as a desktop, you log into right there and just throw away the virtual machine because you know, then it's not even on your network.

00:21:06.100 --> 00:21:06.500
Right.

00:21:06.500 --> 00:21:06.900
Yeah.

00:21:06.900 --> 00:21:17.200
I think, and as much as I like using my own editor, I think that I'm, I think that people that are giving coding exercises really should use a platform, because it's just more fair for everybody.

00:21:17.200 --> 00:21:23.100
The, and the, even our friends at PyBytes have their own interview platform that you can do.

00:21:23.100 --> 00:21:24.000
Interesting.

00:21:24.000 --> 00:21:25.400
Do their little things.

00:21:25.400 --> 00:21:25.700
Yeah.

00:21:25.700 --> 00:21:26.500
Matt agrees with you.

00:21:26.500 --> 00:21:27.900
Plus one for coding platforms.

00:21:27.900 --> 00:21:29.100
Yeah.

00:21:29.100 --> 00:21:29.600
All right.

00:21:29.600 --> 00:21:30.100
Okay.

00:21:30.100 --> 00:21:33.000
So folks be, be on the lookout.

00:21:33.000 --> 00:21:34.000
Be careful out there.

00:21:34.000 --> 00:21:34.700
It's the internet.

00:21:34.700 --> 00:21:36.600
Well, is it my turn?

00:21:36.600 --> 00:21:37.500
I think so.

00:21:37.500 --> 00:21:40.500
Um, let's, let's talk about office hours.

00:21:40.500 --> 00:21:46.800
Um, so the PSF has announced that the PSF board is having office hours, which is kind of cool.

00:21:46.800 --> 00:21:47.700
They're going to do it monthly.

00:21:47.700 --> 00:21:50.700
So if you have a question, if you, well, what do they say?

00:21:50.700 --> 00:21:52.500
Um, greetings Pythonista.

00:21:52.500 --> 00:21:59.200
I'm not going to read all of this, but the PSF, is going to open up, office hours and monthly.

00:21:59.200 --> 00:22:08.900
The office hours will be a session, be sessions where you can share with us how we can help your community and express your perspectives and provide feedback to the PSF.

00:22:08.900 --> 00:22:13.400
And hopefully everybody will be nice, but had an issue with people being nice.

00:22:13.400 --> 00:22:14.900
So try to be nice.

00:22:14.900 --> 00:22:20.600
Um, then also, the joining of the office hours, there's, there's, we missed the first one.

00:22:20.600 --> 00:22:23.500
It was September 10, but there's one in October 8th.

00:22:23.500 --> 00:22:26.500
And then, and then there's, you know, there's a list here.

00:22:26.500 --> 00:22:29.100
We've got, well, I'll just put the list in the show notes also.

00:22:29.100 --> 00:22:31.200
Um, what do you, what are they going to talk about?

00:22:31.200 --> 00:22:37.000
Well, they might have, they might have a topic, but, they also might not.

00:22:37.000 --> 00:22:48.100
So it says that you can bring up, I can't remember where, where it said this, but you can bring up, there'll either be a topic, but if there's not a topic, you can bring up something that's Python related or something that the board might be able to help you with.

00:22:48.100 --> 00:22:49.500
So that's really cool.

00:22:49.500 --> 00:22:54.100
I love the accessibility that, that, that people have access to.

00:22:54.100 --> 00:22:55.400
Yeah, I think it's kind of cool.

00:22:55.400 --> 00:23:07.900
I think it's kind of like, it kind of reminds me of, you know, you can, I've never gone, but my, my little local community that I live in, I can go watch the, the, the, the city board meetings if I wanted to.

00:23:07.900 --> 00:23:10.300
I don't, I don't do that, but I like that.

00:23:10.300 --> 00:23:11.700
It's possible that I can.

00:23:11.700 --> 00:23:13.200
So it's a good thing.

00:23:13.200 --> 00:23:14.400
So thanks PSF.

00:23:14.400 --> 00:23:15.300
Yep.

00:23:15.300 --> 00:23:15.900
Yeah.

00:23:15.900 --> 00:23:16.400
Very cool.

00:23:16.400 --> 00:23:16.900
All right.

00:23:16.900 --> 00:23:21.700
Um, and I kind of made this one short cause I know we've got quite a few extras to talk about.

00:23:21.700 --> 00:23:24.200
Um, do you want to kick off the extras?

00:23:24.200 --> 00:23:25.500
Let's kick it off.

00:23:25.500 --> 00:23:27.300
Let's, this is a good one to kick it off with.

00:23:27.300 --> 00:23:36.500
Cause this is a joint extra big news is our courses, mine, yours, and our friends are on humble bundle for a couple of weeks.

00:23:36.500 --> 00:23:44.800
So if you want to get what I think is probably a ridiculous deal, like thousand $882 worth of content for $25.

00:23:44.800 --> 00:23:47.900
Check it out.

00:23:47.900 --> 00:23:55.700
One of the things that's unique about humble bundle, if you're not familiar with it, and partly why we're participating is a lot of money goes to charity right now.

00:23:55.700 --> 00:23:56.500
It's just launched.

00:23:56.500 --> 00:23:59.400
And so far has already raised almost $3,000 for charity.

00:23:59.400 --> 00:23:59.900
That's pretty cool.

00:23:59.900 --> 00:24:07.600
Traditionally over the years, we've worked with humble bundle and raised a lot of money for the PSF and for other organizations through this.

00:24:07.600 --> 00:24:11.000
So this year's charity is girls who code.

00:24:11.000 --> 00:24:23.400
So check it out and there's stuff from me, from Brian, from JetBrains, from Matt Harrison, from Reuven Lerner, from PyBytes, real Python.

00:24:23.400 --> 00:24:25.300
And anybody I'm leaving out there?

00:24:25.300 --> 00:24:26.400
I don't think so.

00:24:26.400 --> 00:24:27.000
But yeah.

00:24:27.000 --> 00:24:28.300
What else do you want to say about this Brian?

00:24:28.300 --> 00:24:31.600
I'm kind of excited about checking out the CPython internals.

00:24:31.600 --> 00:24:32.900
I've put off looking at that.

00:24:32.900 --> 00:24:36.100
Um, and I think I might grab it so I can read that.

00:24:36.100 --> 00:24:44.200
Also, I think my Visual Studio code plus Python skills are pretty good, but I'm curious to know what your course has in there.

00:24:44.200 --> 00:24:47.600
There's actually quite a few goodies in there.

00:24:47.600 --> 00:24:50.300
And also it's ridiculous though.

00:24:50.300 --> 00:25:00.000
I'm including both the new Hello pytest course and the complete pytest course and the pytest course on your side.

00:25:00.000 --> 00:25:04.700
I know that's kind of a lot of pytest, but I think about it a lot.

00:25:04.700 --> 00:25:11.400
So a lot of exciting people already joining and I'm getting some great questions in the community forum.

00:25:11.400 --> 00:25:12.600
So that's really good.

00:25:12.600 --> 00:25:13.700
Even some great feedback.

00:25:13.700 --> 00:25:14.900
Yeah, that's awesome.

00:25:14.900 --> 00:25:16.800
So I'm pretty excited about this.

00:25:16.800 --> 00:25:17.300
All right.

00:25:17.300 --> 00:25:21.900
So this is one among many extras, but do check that out if this sounds interesting to you.

00:25:21.900 --> 00:25:24.500
It's a lot of stuff and it's for a good cause.

00:25:24.500 --> 00:25:25.700
Okay, next.

00:25:25.700 --> 00:25:30.300
I believe we've talked about the Django-Naut program before, which is super cool.

00:25:30.300 --> 00:25:35.700
I've had Sarah and Tushar on Talk Python and linked about that as well in the show notes.

00:25:35.700 --> 00:25:41.200
But the news here is that Django-Naut Space Session 3 applications are open.

00:25:41.200 --> 00:25:42.900
So get in there and apply.

00:25:42.900 --> 00:25:48.900
This is a program that helps you become a contributor, possibly on the path to core developer for Django.

00:25:48.900 --> 00:25:50.100
And I think it's a really cool program.

00:25:50.100 --> 00:25:52.800
Free, eight-week group mentoring program.

00:25:52.800 --> 00:25:53.300
Cool.

00:25:53.300 --> 00:25:57.000
Yeah, so if you're a fan of Django and you want to get better at open source, here we go.

00:25:57.000 --> 00:25:59.400
I'll, like I said, I'll link to this.

00:25:59.400 --> 00:26:00.700
Two more things real quick.

00:26:00.700 --> 00:26:03.200
One planned and one a surprise.

00:26:03.200 --> 00:26:04.100
Alt-Tab.

00:26:04.100 --> 00:26:07.100
If you're on Windows, Alt-Tab is the way you switch between apps.

00:26:07.100 --> 00:26:09.600
On macOS, if you switch to macOS, things get weird.

00:26:09.600 --> 00:26:15.700
Like Command-Tab seems like the Alt-Tab, but Command-Tab switches between applications, not between Windows.

00:26:15.700 --> 00:26:20.800
So for example, if there's like a, "Hey, there's an update available for your app," and then it goes behind another window,

00:26:20.800 --> 00:26:23.900
there may be no way to keyboard over to it.

00:26:23.900 --> 00:26:30.500
You might have to hit Control-Down and then find it because it doesn't register as like a top-level application, but it's there.

00:26:30.500 --> 00:26:36.200
And like, you want to switch between two Windows and a web browser, I know there's Command-Tab, but that, or sorry, Command-Tilde,

00:26:36.200 --> 00:26:37.100
but that just cycles.

00:26:37.100 --> 00:26:38.500
That doesn't give you a list.

00:26:38.500 --> 00:26:52.100
So Alt-Tab is a free open source thing for macOS with a ridiculous amount of options that has a super cool UI for switching between Windows, not applications.

00:26:52.100 --> 00:26:57.200
And like I said, it's open source, but also it doesn't take over the typical commands.

00:26:57.200 --> 00:27:00.600
So it's an either/or, whatever you feel like hitting while you're working on Mac.

00:27:00.600 --> 00:27:01.600
What do you think, Brian? Cool?

00:27:01.600 --> 00:27:05.000
- Yeah, actually, I don't, I never even tried any of this stuff.

00:27:05.000 --> 00:27:10.600
I just usually don't have very much open, or I have no idea how to find my stuff.

00:27:10.600 --> 00:27:14.500
- Yeah, but if you look over on GitHub, it's got 10,000, almost 11,000 stars.

00:27:14.500 --> 00:27:16.000
It's pretty neat.

00:27:16.000 --> 00:27:18.200
Yeah, so anyway, people can check that out if they want.

00:27:18.200 --> 00:27:19.500
And this is a surprise.

00:27:19.500 --> 00:27:24.100
This was not true when I hit, when we logged in to hit record today.

00:27:24.100 --> 00:27:29.100
However, since then, the macOS Sequoia, the new version of macOS is now out.

00:27:29.100 --> 00:27:33.400
Now, if you go to the website, apple.com/macOS, it says it's in a preview.

00:27:33.400 --> 00:27:36.400
But if you go to a system settings, it says, would you like to install it?

00:27:36.400 --> 00:27:38.600
So. - I don't know.

00:27:38.600 --> 00:27:42.000
- If people want to live on the cutting edge, here you go.

00:27:42.000 --> 00:27:42.700
It's time.

00:27:42.700 --> 00:27:43.800
- I'll let you go first.

00:27:43.800 --> 00:27:48.800
And then if your computer still works to log in next week, I'll upgrade.

00:27:48.800 --> 00:27:52.500
If you ever hear from me again, then it'll be fine.

00:27:52.500 --> 00:27:53.500
- Yeah. - Sounds good.

00:27:53.500 --> 00:27:54.600
Anyway, those are my extras.

00:27:54.600 --> 00:27:55.600
- Okay.

00:27:55.600 --> 00:27:59.200
I think that we should have covered this earlier, but oh well.

00:27:59.200 --> 00:28:03.000
PyCascades has, the call for proposals is open.

00:28:03.000 --> 00:28:05.400
We, maybe we covered it, that I just don't remember.

00:28:05.400 --> 00:28:08.800
But anyway, CFP is open, but you only have a few days.

00:28:08.800 --> 00:28:13.500
It's September 16 right now, and the deadline is September 20th.

00:28:13.500 --> 00:28:16.400
So if you haven't gotten those in yet, get those in.

00:28:16.400 --> 00:28:21.100
And mostly I'm bringing this up because I forgot, and I'm going to submit a couple.

00:28:21.100 --> 00:28:23.300
But it's going to be exciting because it's in Portland.

00:28:23.300 --> 00:28:24.900
- Yay, it's in Portland.

00:28:24.900 --> 00:28:26.100
- At least I'll be there.

00:28:26.100 --> 00:28:26.900
Will you be there?

00:28:26.900 --> 00:28:28.200
Probably. - Unclear.

00:28:28.200 --> 00:28:28.900
Maybe. - Unclear.

00:28:28.900 --> 00:28:30.900
Okay. - Let's give it a strong maybe.

00:28:30.900 --> 00:28:32.600
- Well, I'm going to try to make sure to be there.

00:28:32.600 --> 00:28:34.800
- Yeah, that'd be nice. - I love PyCascades.

00:28:34.800 --> 00:28:37.300
Okay, so that's my first.

00:28:37.300 --> 00:28:39.900
And that's in February.

00:28:39.900 --> 00:28:46.300
So last week we talked about all the UV Python stuff being super cool.

00:28:46.300 --> 00:28:50.000
And this, but we mentioned that you can't do Python 3.13.

00:28:50.000 --> 00:28:50.800
Well, you can now.

00:28:50.800 --> 00:28:59.400
So Python 3.13 is now available for virtual environments and for anything with UV.

00:28:59.400 --> 00:29:02.800
So UV supports Python 13, but it does not subvert.

00:29:02.800 --> 00:29:08.300
If the next question is, can I do the, what, the other one?

00:29:08.300 --> 00:29:09.000
Free-threaded.

00:29:09.000 --> 00:29:10.400
Can we do through free-threaded?

00:29:10.400 --> 00:29:11.800
No, not yet.

00:29:11.800 --> 00:29:16.100
But hey, I think it's great to just support the normal one so that people can get their

00:29:16.100 --> 00:29:16.600
stuff in.

00:29:16.600 --> 00:29:19.700
So I think that's all my extras.

00:29:19.700 --> 00:29:20.600
- Awesome.

00:29:20.600 --> 00:29:21.000
Awesome.

00:29:21.000 --> 00:29:21.500
Awesome.

00:29:21.500 --> 00:29:22.700
- Anyway, thanks a lot.

00:29:22.700 --> 00:29:28.700
- Yeah, I just want to quickly add that I tried UV Python list, --Python preference,

00:29:28.700 --> 00:29:35.800
dash online only managed, and it didn't show 3.13 or 12.6.

00:29:35.800 --> 00:29:38.900
But then a UV self-update, run it again.

00:29:38.900 --> 00:29:43.000
So just beware, I think you have to update your UV to get it to show the thing that you put in.

00:29:43.000 --> 00:29:44.000
- I'm glad you brought that up.

00:29:44.000 --> 00:29:45.600
I was going to say that.

00:29:45.600 --> 00:29:47.500
- Yeah, I forgot.

00:29:47.500 --> 00:29:51.500
And also, I think UV self-update is such an awesome thing.

00:29:51.500 --> 00:29:54.500
You just have to, it's a great thing, self-update.

00:29:54.500 --> 00:29:57.400
I wish I had Brian's self-update.

00:29:57.400 --> 00:29:58.900
That'd be cool.

00:29:58.900 --> 00:30:00.400
- Exactly.

00:30:00.400 --> 00:30:01.800
- It's getting a little old and beat up.

00:30:01.800 --> 00:30:02.400
Self-update.

00:30:02.400 --> 00:30:03.400
Oh, there we go.

00:30:03.400 --> 00:30:03.800
- Yeah.

00:30:03.800 --> 00:30:06.300
- Nice.

00:30:06.300 --> 00:30:07.100
- Power.

00:30:07.100 --> 00:30:08.100
We can rebuild them.

00:30:08.100 --> 00:30:08.600
Okay.

00:30:08.600 --> 00:30:10.800
- Okay, let's get something funny.

00:30:10.800 --> 00:30:17.500
All right, well, I was saving this for the November when we have the election in the U.S.

00:30:17.500 --> 00:30:19.700
This is not political, people, so please don't write me.

00:30:19.700 --> 00:30:21.300
But this is a tech joke.

00:30:21.300 --> 00:30:24.700
But since Biden dropped out, you know, the joke's kind of got a shelf life.

00:30:24.700 --> 00:30:25.800
Let's go with it.

00:30:25.800 --> 00:30:27.300
So here it is, Brian.

00:30:27.300 --> 00:30:29.700
Errors 404 and 403 went voting.

00:30:29.700 --> 00:30:31.100
404 voted for Trump.

00:30:31.100 --> 00:30:34.500
403, 403 forbidden.

00:30:34.500 --> 00:30:36.700
- Oh, Biden, oh, dear.

00:30:36.700 --> 00:30:38.800
- Because 403 is forbidden, but anyway.

00:30:38.800 --> 00:30:42.700
- Oh.

00:30:42.700 --> 00:30:46.100
- That's what I got for you today.

00:30:46.100 --> 00:30:47.200
- That's terrible.

00:30:47.200 --> 00:30:48.800
- Yeah, it's definitely a dad joke.

00:30:48.800 --> 00:30:49.900
- Okay.

00:30:49.900 --> 00:30:51.700
I've got a good one for you next week.

00:30:51.700 --> 00:30:52.700
- All right, yeah, let's do it.

00:30:52.700 --> 00:30:53.000
- All right.

00:30:53.000 --> 00:30:53.900
- Looking forward to it.

00:30:53.900 --> 00:30:55.800
And yeah, thanks.

00:30:55.800 --> 00:30:57.500
- Thanks to everybody for showing up.

00:30:57.500 --> 00:31:02.600
And remember, check out the Humble Bundle.

00:31:02.600 --> 00:31:03.400
We appreciate it.

00:31:03.400 --> 00:31:04.200
- Yeah, indeed.

