
00:00:00.000 --> 00:00:04.800
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:04.800 --> 00:00:10.400
This is episode 312, recorded November 29th, 2022.


00:00:10.400 --> 00:00:11.500
I'm Michael Kennedy.


00:00:11.500 --> 00:00:12.700
And I'm Brian Okken.


00:00:12.700 --> 00:00:15.900
This episode is brought to you by the Compiler Podcast from Red Hat.


00:00:15.900 --> 00:00:17.000
Check them out.


00:00:17.000 --> 00:00:18.900
Really appreciate them supporting the show.


00:00:18.900 --> 00:00:20.200
Brian, we got a lot to cover today.


00:00:20.200 --> 00:00:21.300
You want to just jump right into it?


00:00:21.300 --> 00:00:23.700
What I want to talk about is Simon Willison.


00:00:23.700 --> 00:00:26.100
This is incredible.


00:00:26.100 --> 00:00:30.300
So Simon did a talk at DjangoCon 2022,


00:00:30.300 --> 00:00:33.500
and then he wrote up the slides and everything,


00:00:33.500 --> 00:00:35.660
and we're going to link to his blog.


00:00:35.660 --> 00:00:40.220
His blog title is "Coping Strategies for the Serial Project Hoarder."


00:00:40.220 --> 00:00:43.100
And then the talk title was


00:00:43.100 --> 00:00:45.980
"Massively increase your productivity on personal projects


00:00:45.980 --> 00:00:49.100
with comprehensive documentation and automated tests."


00:00:49.100 --> 00:00:50.580
Yes, that's a mouthful.


00:00:50.580 --> 00:00:53.420
But really, I don't know what a good name for this is,


00:00:53.420 --> 00:00:57.760
other than everybody that works with development needs to watch this talk,


00:00:57.760 --> 00:00:59.760
because it's incredible.


00:00:59.760 --> 00:01:02.860
So he goes through a lot of stuff.


00:01:02.860 --> 00:01:04.560
I'm going to go through it.


00:01:04.560 --> 00:01:06.720
Luckily, he's got screenshots on here.


00:01:06.720 --> 00:01:08.860
But he starts out...


00:01:08.860 --> 00:01:12.820
So this is important, not just for open source projects


00:01:12.820 --> 00:01:17.520
or personal projects. This is also for if you're working in a company,


00:01:17.520 --> 00:01:19.120
I think this is equally true.


00:01:19.120 --> 00:01:23.920
So he talks about how he got these techniques from working at –


00:01:23.920 --> 00:01:26.520
now I'm going to forget where he worked, but –


00:01:26.520 --> 00:01:28.520
yeah, it's gone –


00:01:28.520 --> 00:01:31.160
a large company with multiple continents,


00:01:31.160 --> 00:01:35.720
and it was helpful to do this model.


00:01:35.720 --> 00:01:37.320
So what is he talking about?


00:01:37.320 --> 00:01:41.600
So one of the things he talks about is the perfect commit.


00:01:41.600 --> 00:01:45.720
So we don't really – as a professional software developer,


00:01:45.720 --> 00:01:49.000
you're not really doing new code all the time.


00:01:49.000 --> 00:01:51.720
what you're doing is maintaining existing software.


00:01:51.720 --> 00:01:55.800
So the commit is your unit of work.


00:01:55.800 --> 00:02:00.240
And a perfect commit includes the implementation of whatever you've done,


00:02:00.240 --> 00:02:03.480
but it also has tests and documentation


00:02:03.480 --> 00:02:05.920
and a link to the issue thread.


00:02:05.920 --> 00:02:08.720
And this seems like a lot to me,


00:02:08.720 --> 00:02:11.400
but walking through his talk, it totally makes sense.


00:02:11.400 --> 00:02:17.400
So he gives an example of one of his with some cool highlights


00:02:17.400 --> 00:02:19.900
that highlights that he's got documentation changes also.


00:02:19.900 --> 00:02:24.800
And the documentation might just be a single line change or something.


00:02:24.800 --> 00:02:31.700
But the tests, he does pause here and say tests are hard for some people, some developers.


00:02:31.700 --> 00:02:37.600
So it's important to get a working test framework in place quickly


00:02:37.600 --> 00:02:40.700
so that a test developer isn't starting from scratch.


00:02:40.700 --> 00:02:44.000
They're just, or a software developer when they're writing tests, it's just,


00:02:44.000 --> 00:02:50.040
It's not like comprehensive testing has to be there, but it is a test that passes


00:02:50.040 --> 00:02:56.200
when your change is there and fails when it's not there or fails when it's not working.


00:02:56.200 --> 00:03:02.140
That's enough. You can do more thorough testing, but that's enough to get us started.


00:03:02.140 --> 00:03:04.140
And I think that's a good way to think about it.


00:03:04.140 --> 00:03:08.300
But he goes, he throws in this little cool thing of like,


00:03:08.300 --> 00:03:13.740
just keep common types of projects that you have around as cookie cutters in your own,


00:03:13.740 --> 00:03:15.240
in your own GitHub area.


00:03:15.240 --> 00:03:18.920
He's got a Python library and a click app and


00:03:18.920 --> 00:03:20.680
dataset plugin for him.


00:03:20.680 --> 00:03:23.640
I might have different things like a pytest plugin or something.


00:03:23.640 --> 00:03:26.780
And that way you can just keep up with your best practices,


00:03:26.780 --> 00:03:29.720
what you think of as best practices in one place.


00:03:29.720 --> 00:03:30.920
This is a cool idea.


00:03:30.920 --> 00:03:32.640
Totally gonna steal this.


00:03:32.640 --> 00:03:36.180
>> I've done that for myself as well. I've built like a


00:03:36.180 --> 00:03:39.080
predated cookie cutter, but I built this thing like


00:03:39.080 --> 00:03:40.780
I always want to have logging


00:03:40.780 --> 00:03:43.040
and I want it like this. I always want to, you know,


00:03:43.040 --> 00:03:47.360
connect to this other service and like ping it to make sure that the thing is alive or whatever,


00:03:47.360 --> 00:03:51.280
whatever thing we decided for monitoring inside of the company I worked at.


00:03:51.280 --> 00:03:53.680
Like all the new projects would just start that way.


00:03:53.680 --> 00:03:55.480
It was so nice because you didn't like,


00:03:55.480 --> 00:03:58.840
is it really worth doing the thing to make sure that we can monitor it sometime?


00:03:58.840 --> 00:04:02.160
Like you just run the one command line thing and it's there.


00:04:02.160 --> 00:04:06.000
We could give it to an intern and they could run it to start their projects. It was great.


00:04:06.000 --> 00:04:10.320
>> Then he's got like this thing that supposedly with a GitHub hook,


00:04:10.320 --> 00:04:12.360
and I'm going to have to dig into this more because I


00:04:12.360 --> 00:04:14.060
didn't quite understand how this works.


00:04:14.060 --> 00:04:15.600
But he's got a way within


00:04:15.600 --> 00:04:17.780
the GitHub interface to say I want a new project,


00:04:17.780 --> 00:04:21.380
and it automatically gives you the choices of what project,


00:04:21.380 --> 00:04:24.600
and then fills out all the defaults from the start,


00:04:24.600 --> 00:04:27.160
instead of just getting the read me like normally.


00:04:27.160 --> 00:04:31.340
This is neat, and I guess I want to try figuring this out.


00:04:31.340 --> 00:04:33.980
The documentation bit, at


00:04:33.980 --> 00:04:36.300
least one of the things about including this,


00:04:36.300 --> 00:04:37.700
even if it's difficult,


00:04:37.700 --> 00:04:40.900
you can have this be part of the code review requirements.


00:04:40.900 --> 00:04:45.900
So don't accept a code review until the documentation is there also.


00:04:45.900 --> 00:04:47.840
So this is a cool idea.


00:04:47.840 --> 00:04:53.920
Then it's the bonus trick of testing documentation, which is a cool idea.


00:04:53.920 --> 00:04:56.460
Then the links to the issue,


00:04:56.460 --> 00:04:58.400
and I thought this was just yes,


00:04:58.400 --> 00:05:01.320
you should do this, but this is really the meat of the talk,


00:05:01.320 --> 00:05:06.280
is him doing his entire thought process in the issue thread.


00:05:06.280 --> 00:05:10.580
He even gives examples where there's sometimes like up to 50 60


00:05:10.580 --> 00:05:13.440
Comments and it's just him talking to himself


00:05:13.440 --> 00:05:20.060
but this is brilliant and I'm not going to convince you as much as as he is but includes screenshots and and


00:05:20.060 --> 00:05:24.240
Dead ends like I tried this thing and it didn't work and we're gonna go back and do this other thing


00:05:24.240 --> 00:05:26.380
This isn't


00:05:26.380 --> 00:05:32.280
It calls it temporal documentation and I just love this idea and I'm gonna try to follow this myself


00:05:32.680 --> 00:05:35.160
because I have a memory issue.


00:05:35.160 --> 00:05:39.000
I write stuff down and then I forget where I wrote it down.


00:05:39.000 --> 00:05:41.740
This way, he says,


00:05:41.740 --> 00:05:43.600
"You don't have to remember anything.


00:05:43.600 --> 00:05:45.440
You just dump it there."


00:05:45.440 --> 00:05:48.980
That way, let's say you get pulled off of a project


00:05:48.980 --> 00:05:52.040
and you don't get back to it for six months


00:05:52.040 --> 00:05:54.480
because you've been fighting fires and doing other stuff.


00:05:54.480 --> 00:05:55.700
Then you get back to it,


00:05:55.700 --> 00:05:57.640
you won't remember where you're at.


00:05:57.640 --> 00:06:02.080
With this line of thinking of keeping all of your thinking in


00:06:02.080 --> 00:06:04.440
the issue thread, you can just jump in and go,


00:06:04.440 --> 00:06:07.220
"Oh, that's where I was," and get started pretty quickly.


00:06:07.220 --> 00:06:09.100
I love this. It's cool.


00:06:09.100 --> 00:06:11.980
Then the rest of the talk is pretty interesting too,


00:06:11.980 --> 00:06:15.180
talking about how scientists have been doing this,


00:06:15.180 --> 00:06:17.700
and other engineers have been doing this for a long time.


00:06:17.700 --> 00:06:19.600
They called them lab notebooks before,


00:06:19.600 --> 00:06:22.460
and we got out of the habit of doing that with software.


00:06:22.460 --> 00:06:24.340
But anyway, lots of great techniques,


00:06:24.340 --> 00:06:25.780
and I think this is just how to


00:06:25.780 --> 00:06:27.720
be a professional software developer now.


00:06:27.720 --> 00:06:31.380
>> I love that it's a casual conversation and not like,


00:06:31.380 --> 00:06:32.740
here are my four recommendations,


00:06:32.740 --> 00:06:34.940
but like the playing around and the dead ends


00:06:34.940 --> 00:06:36.940
are really, really valuable.


00:06:36.940 --> 00:06:38.260
Kim out in the audience says,


00:06:38.260 --> 00:06:40.060
"The cookie cutter approach also works beautifully


00:06:40.060 --> 00:06:42.760
"from a DevOps perspective for setting up developers


00:06:42.760 --> 00:06:45.380
"to use your firm's specific infrastructure."


00:06:45.380 --> 00:06:46.260
Yeah, I totally agree,


00:06:46.260 --> 00:06:48.140
and that's a little bit of what I was hinting at


00:06:48.140 --> 00:06:49.660
of like here's how we integrate with this,


00:06:49.660 --> 00:06:50.940
like uptime manager and stuff,


00:06:50.940 --> 00:06:53.220
but obviously DevOps, that was talk,


00:06:53.220 --> 00:06:56.740
we were deploying to a server in a closet,


00:06:56.740 --> 00:06:59.980
which I mean that tells you all you need to know.


00:06:59.980 --> 00:07:01.360
Speaking of stuff you might need to know,


00:07:01.360 --> 00:07:05.400
Brian, Google Copilot and these code writing AIs,


00:07:05.400 --> 00:07:07.640
I have more to say about that at the very end of the show,


00:07:07.640 --> 00:07:09.160
bookend this a little bit,


00:07:09.160 --> 00:07:13.000
they train themselves on lots of code.


00:07:13.000 --> 00:07:15.600
And Google Copilot, for those of you who don't know,


00:07:15.600 --> 00:07:17.640
you basically can give it a comment,


00:07:17.640 --> 00:07:21.200
and like, I want to connect to a Postgres database


00:07:21.200 --> 00:07:23.720
with SQLAlchemy, and then boom,


00:07:23.720 --> 00:07:25.640
it'll like literally write all the code,


00:07:25.640 --> 00:07:27.400
import the usings, you know,


00:07:27.400 --> 00:07:29.520
come up with a connection string, all that kind of stuff.


00:07:29.520 --> 00:07:31.880
It's pretty fantastic, has some privacy issues.


00:07:31.880 --> 00:07:34.080
I don't know what it's doing now.


00:07:34.080 --> 00:07:37.160
It used to send your source code that you wrote


00:07:37.160 --> 00:07:41.620
up to GitHub, which made me not wanna use it already.


00:07:41.620 --> 00:07:46.300
But the big news here is the website


00:07:46.300 --> 00:07:49.380
githubcopilotlitigation.com.


00:07:49.380 --> 00:07:52.460
And that's as ominous as it sounds.


00:07:52.460 --> 00:07:55.560
It says, "We filed," this is what the website


00:07:55.560 --> 00:07:57.800
sort of announces, "We filed a lawsuit


00:07:57.800 --> 00:08:00.720
challenging GitHub copilot and AI product that relies on


00:08:00.720 --> 00:08:03.920
unprecedented open-source software piracy.


00:08:03.920 --> 00:08:06.940
Why piracy? Because it's trained on things that are like


00:08:06.940 --> 00:08:10.960
GPL and Creative Commons share alike or attribution.


00:08:10.960 --> 00:08:13.360
Then it outputs code based on


00:08:13.360 --> 00:08:17.120
that original input that has no GPL and it has no,


00:08:17.120 --> 00:08:21.640
whatever license, the license is stripped and no attribution. What do you think?


00:08:21.640 --> 00:08:24.240
>> Something we talked about from the very beginning of like,


00:08:24.240 --> 00:08:26.000
how is this okay?


00:08:26.000 --> 00:08:26.680
>> Yeah.


00:08:26.680 --> 00:08:27.280
>> Not sure.


00:08:27.280 --> 00:08:35.320
Absolutely. If it did things like we're only going to look at MIT licenses and other commercial open no attribution licenses.


00:08:35.320 --> 00:08:39.960
I don't think there'd be anything to say about it, but apparently that's not the case.


00:08:39.960 --> 00:08:42.840
So there's a couple of updates as well.


00:08:42.840 --> 00:08:47.000
I suppose we should also like they do on this page say we are not a lawyer.


00:08:47.000 --> 00:08:48.600
Please don't take legal advice from us.


00:08:48.600 --> 00:08:52.000
We write code, not legal documents.


00:08:52.000 --> 00:08:56.600
But nonetheless, it says this is Matthew Butterick,


00:08:56.600 --> 00:09:00.900
and they've set up to investigate Google Copilot,


00:09:00.900 --> 00:09:03.900
and they filed a class action lawsuit in the US federal court


00:09:03.900 --> 00:09:07.040
in San Francisco on behalf of a couple folks.


00:09:07.040 --> 00:09:11.320
So they're challenging the legality of GitHub Copilot


00:09:11.320 --> 00:09:16.180
and a related product, OpenAI Codex, which powers Copilot.


00:09:16.180 --> 00:09:18.660
The suit has been filed against a set of defendants


00:09:18.660 --> 00:09:21.660
that includes GitHub, Microsoft, and OpenAI.


00:09:21.660 --> 00:09:24.780
Wow. There's an update down here somewhere.


00:09:24.780 --> 00:09:28.780
Let's see. It says, "By training..." Here's the motivation for their


00:09:28.780 --> 00:09:33.740
lawsuit. "By training their AI systems on public GitHub repositories,


00:09:33.740 --> 00:09:37.020
though based on their public statements, possibly much more,


00:09:37.020 --> 00:09:41.020
we contend that the defendants have violated the legal rights of a vast


00:09:41.020 --> 00:09:45.020
number of creators who posted code or other work under certain open source


00:09:45.020 --> 00:09:48.620
licenses on GitHub, which licenses a set of 11 popular open


00:09:48.620 --> 00:09:50.940
open source licenses that all require attribution,


00:09:50.940 --> 00:09:52.460
the author's name and copyright,


00:09:52.460 --> 00:09:54.580
including, I guess, the MIT license as well,


00:09:54.580 --> 00:09:56.460
the GPL and the Apache license.


00:09:56.460 --> 00:09:57.700
And it's listed out there.


00:09:57.700 --> 00:09:58.900
There's a whole bunch more details.


00:09:58.900 --> 00:10:01.260
And it says, "Update November 10th."


00:10:01.260 --> 00:10:04.920
That original was November 3rd.


00:10:04.920 --> 00:10:06.420
There's an update here.


00:10:06.420 --> 00:10:08.700
This is, "We filed a second class action lawsuit


00:10:08.700 --> 00:10:10.980
"on behalf of two additional plaintiffs.


00:10:10.980 --> 00:10:13.660
"The defendants and claimants are otherwise similar


00:10:13.660 --> 00:10:14.580
"to the initial one."


00:10:14.580 --> 00:10:16.340
So there you go.


00:10:16.340 --> 00:10:17.180
- It's gonna be interesting.


00:10:17.180 --> 00:10:22.820
It's not going to be just interesting for Google, for Google GitHub Copilot, but basically


00:10:22.820 --> 00:10:24.460
AI in general, right?


00:10:24.460 --> 00:10:33.260
It says it's going to challenge that AI strips the ownership and other requirements of inputs


00:10:33.260 --> 00:10:34.260
and outputs, right?


00:10:34.260 --> 00:10:35.580
And maybe it does, maybe it doesn't.


00:10:35.580 --> 00:10:41.460
I mean, we heard that APIs are not copyrightable in the Google Oracle Java lawsuit.


00:10:41.460 --> 00:10:42.460
So we're going to find out here.


00:10:42.460 --> 00:10:43.460
>> Oh, interesting.


00:10:43.460 --> 00:10:48.960
>> Yeah. When we looked into this a little bit earlier,


00:10:48.960 --> 00:10:52.960
if it's helping you fill in parameters to a function or


00:10:52.960 --> 00:10:56.600
what likely things you're going to fill in for a function call,


00:10:56.600 --> 00:11:00.680
that's one thing, but when it plops down 20 lines of code for you,


00:11:00.680 --> 00:11:03.080
where did it get those 20 lines of code?


00:11:03.080 --> 00:11:07.260
Then open source doesn't necessarily mean you can copy it,


00:11:07.260 --> 00:11:08.960
it's just open to read.


00:11:08.960 --> 00:11:12.140
I mean, you can put your own license in there,


00:11:12.140 --> 00:11:15.140
You can make up your own license that says anybody can read this,


00:11:15.140 --> 00:11:16.540
but you can't copy it,


00:11:16.540 --> 00:11:19.300
use it, or do anything else with it at all.


00:11:19.300 --> 00:11:25.500
Can't even fork it. There's nothing stopping you from doing that sort of a license.


00:11:25.500 --> 00:11:27.900
>> The default, if you put on GitHub,


00:11:27.900 --> 00:11:32.700
I believe if you put no license means you're conferring no license whatsoever.


00:11:32.700 --> 00:11:36.580
>> Yeah. It means it's just like writing a book.


00:11:36.580 --> 00:11:38.060
When you write a book,


00:11:38.060 --> 00:11:42.020
you have the full copyright unless you give it to somebody else.


00:11:42.020 --> 00:11:43.700
So yeah, absolutely.


00:11:43.700 --> 00:11:46.740
All right, well, let's stick with my screen for a second.


00:11:46.740 --> 00:11:49.900
I want to tell you all about our sponsor for this week,


00:11:49.900 --> 00:11:50.860
Compiler.


00:11:50.860 --> 00:11:52.820
So this episode of Python Bytes,


00:11:52.820 --> 00:11:54.260
this episode of Python Bytes is sponsored


00:11:54.260 --> 00:11:56.940
by the Compiler podcast from Red Hat.


00:11:56.940 --> 00:11:59.580
Like you, Brian and I are fans of podcasts.


00:11:59.580 --> 00:12:01.620
I listen to more and more of these days actually,


00:12:01.620 --> 00:12:03.300
and I'm happy to share this one,


00:12:03.300 --> 00:12:05.620
Compiler, an original podcast from Red Hat.


00:12:05.620 --> 00:12:07.300
So if you want to stay on top of tech


00:12:07.300 --> 00:12:09.300
without dedicating tons of time to it,


00:12:09.300 --> 00:12:12.260
Check out Compiler, they present perspectives


00:12:12.260 --> 00:12:14.280
and topics and insights from the tech industry


00:12:14.280 --> 00:12:15.780
free of jargon and judgment.


00:12:15.780 --> 00:12:18.240
They want to discover where technology is headed


00:12:18.240 --> 00:12:19.780
beyond headlines and create a place


00:12:19.780 --> 00:12:22.580
for new IT professionals to learn, grow, and thrive.


00:12:22.580 --> 00:12:24.580
Compiler helps people break through barriers


00:12:24.580 --> 00:12:26.780
and challenges turning code into community


00:12:26.780 --> 00:12:28.620
at all levels of the enterprise.


00:12:28.620 --> 00:12:31.500
One recent interesting episode is their great stack debate.


00:12:31.500 --> 00:12:34.540
I love talking to people about their architecture,


00:12:34.540 --> 00:12:36.620
their code, all the trade-offs and conventions.


00:12:36.620 --> 00:12:38.220
As you will see later in the show,


00:12:38.220 --> 00:12:41.500
So I'm gonna talk a bit about that at the end as well for us.


00:12:41.500 --> 00:12:44.180
And the costs that come with this, the challenges,


00:12:44.180 --> 00:12:45.940
things that are awesome, the things that are not.


00:12:45.940 --> 00:12:47.820
So this episode is like that.


00:12:47.820 --> 00:12:49.940
So you can check it out to see if software is like an onion


00:12:49.940 --> 00:12:52.540
or like lasagna or it's more complicated.


00:12:52.540 --> 00:12:54.940
It's the first episode in a compiler series


00:12:54.940 --> 00:12:56.420
on the software stack.


00:12:56.420 --> 00:12:58.860
So listen to more about compiler at pythonbytes.com.


00:12:58.860 --> 00:13:02.060
So you can just go type compiler into your podcast player


00:13:02.060 --> 00:13:03.500
and that's what I would do in general,


00:13:03.500 --> 00:13:06.020
but please use our link so that the folks at Red Hat


00:13:06.020 --> 00:13:07.540
know that you came from us.


00:13:07.540 --> 00:13:08.580
- Yes. - Yes.


00:13:08.580 --> 00:13:13.280
And thanks to Compiler for keeping our podcast going strong.


00:13:13.280 --> 00:13:14.240
All right, over to you, Brian.


00:13:14.240 --> 00:13:15.240
What's the next one?


00:13:15.240 --> 00:13:19.400
- So this is a silly thing,


00:13:19.400 --> 00:13:22.720
but sometimes I've got code that I wanna,


00:13:22.720 --> 00:13:25.040
Python code that I wanna have a pop-up,


00:13:25.040 --> 00:13:26.280
you know, a window pop-up.


00:13:26.280 --> 00:13:30.240
And I've always been using, what is it,


00:13:30.240 --> 00:13:31.620
PySimpleGUI?


00:13:31.620 --> 00:13:33.960
Well, not always, but that's what I've been using lately


00:13:33.960 --> 00:13:37.080
for like really easy, just a simple pop-up thing,


00:13:37.080 --> 00:13:40.520
especially if I needed to use run on Macs and really anywhere,


00:13:40.520 --> 00:13:43.640
because it's totally fast to get it done,


00:13:43.640 --> 00:13:45.140
and I don't have to think about it anymore.


00:13:45.140 --> 00:13:49.080
However, PySimpleGUI, I haven't


00:13:49.080 --> 00:13:54.200
mastered the art of getting it to look just like a native dialog box.


00:13:54.200 --> 00:13:57.440
Maybe there's some tricks that you can do that I just don't know.


00:13:57.440 --> 00:14:00.960
But if I know it's on Windows,


00:14:00.960 --> 00:14:05.200
maybe we could just go ahead and use the Windows DLLs and


00:14:05.200 --> 00:14:07.800
and do a native Windows.


00:14:07.800 --> 00:14:11.400
>> Just call straight into the Windows 132 API for.


00:14:11.400 --> 00:14:12.600
>> Yeah, sure.


00:14:12.600 --> 00:14:14.000
>> Message box or whatever it is.


00:14:14.000 --> 00:14:15.720
>> That shouldn't be too hard, right?


00:14:15.720 --> 00:14:17.400
It sounds scary to me,


00:14:17.400 --> 00:14:21.500
but I ran across Matt Callahan's blog.


00:14:21.500 --> 00:14:24.800
Matt Callahan has an article called Display


00:14:24.800 --> 00:14:27.240
a Message Box in Python without


00:14:27.240 --> 00:14:30.800
using a non-standard library or other dependency.


00:14:30.800 --> 00:14:31.920
Actually, you just do this,


00:14:31.920 --> 00:14:34.520
you don't have to install anything.


00:14:34.520 --> 00:14:37.920
And I got this, I want to, where did I get this from?


00:14:37.920 --> 00:14:39.760
Give credit where credit is due.


00:14:39.760 --> 00:14:42.760
I got this from the PyCorders Weekly newsletter.


00:14:42.760 --> 00:14:44.760
So thanks to them.


00:14:44.760 --> 00:14:47.060
Anyway, this is not hard.


00:14:47.060 --> 00:14:49.200
So he has a little pop-up example.


00:14:49.200 --> 00:14:52.800
And I should have read the article, but I just skimmed for the code.


00:14:52.800 --> 00:14:55.240
Here's some code. That's it.


00:14:55.240 --> 00:14:57.740
This pop makes a dialog box pop up.


00:14:57.740 --> 00:15:00.540
And it's calling the, so it calls,


00:15:00.540 --> 00:15:03.580
it's just like a couple of flags, like 10 lines of code.


00:15:03.580 --> 00:15:11.120
It calls ctypes, windll, user32, messagebox, exw, whatever that means.


00:15:11.120 --> 00:15:14.960
And with some stuff in it, like a title and a message and everything.


00:15:14.960 --> 00:15:21.800
So it's using ctypes, which I don't use much, but you can get into DLLs.


00:15:21.800 --> 00:15:23.800
So ctypes is built into Python.


00:15:23.800 --> 00:15:27.880
And so this messagebox, I wanted to play with it a little bit more.


00:15:27.880 --> 00:15:29.380
So as I was playing with this,


00:15:29.380 --> 00:15:33.560
looked into the Microsoft documentation,


00:15:33.560 --> 00:15:36.100
the message box dialog,


00:15:36.100 --> 00:15:38.400
one of the flags is this U type,


00:15:38.400 --> 00:15:41.040
and it's like this hex value thing or bit field,


00:15:41.040 --> 00:15:42.920
and you can orient a whole bunch of stuff.


00:15:42.920 --> 00:15:47.460
You can use this to get an okay box or an okay cancel box,


00:15:47.460 --> 00:15:51.760
different types of dialog boxes using this flag.


00:15:51.760 --> 00:15:54.360
Then once you've got this popped up,


00:15:54.360 --> 00:15:57.840
you need to know what users clicked on and stuff.


00:15:57.840 --> 00:16:04.040
there's return values from this and you can just like check the return value and it's defined to be like, you know,


00:16:04.040 --> 00:16:11.000
a three for abort and a two for cancel and one for okay, and you just check this value


00:16:11.000 --> 00:16:16.920
So with just a little bit of code, you can have a native dialog box pop up if you need to in your code


00:16:16.920 --> 00:16:18.160
So yeah, that's awesome


00:16:18.160 --> 00:16:24.120
And it does things like natively that you would expect like for example, you hit escape and you have an okay cancel


00:16:24.120 --> 00:16:27.360
It'll return cancel. I hate some of these these like UI things


00:16:27.360 --> 00:16:30.900
they show up and you're like, well, it's got one text input and a submit button.


00:16:30.900 --> 00:16:32.000
You hit enter, it does nothing.


00:16:32.000 --> 00:16:32.700
You're like, yeah, great.


00:16:32.700 --> 00:16:33.300
Okay.


00:16:33.300 --> 00:16:35.000
Uh, apparently this is not real.


00:16:35.000 --> 00:16:37.440
I'm going to have to just, you know, go click it or whatever.


00:16:37.440 --> 00:16:37.720
Right.


00:16:37.720 --> 00:16:40.380
And so hooking into the native OS is sweet like that.


00:16:40.380 --> 00:16:45.620
This looks like a thing that would be ripe for a short, simple little


00:16:45.620 --> 00:16:47.640
package that wraps up, say all the.


00:16:47.640 --> 00:16:50.480
The OK, cancel.


00:16:50.480 --> 00:16:51.940
What kind of icon you want?


00:16:51.940 --> 00:16:53.000
Do you want like a warning?


00:16:53.000 --> 00:16:54.520
Do you want an informational icon?


00:16:54.520 --> 00:16:55.960
Um, the buttons.


00:16:55.960 --> 00:16:56.580
Yeah.


00:16:56.580 --> 00:16:57.260
It seems really great.


00:16:57.260 --> 00:16:59.180
But this is fantastic.


00:16:59.180 --> 00:17:01.900
>> Neat and built-in.


00:17:01.900 --> 00:17:03.700
Anyway, just a quickie.


00:17:03.700 --> 00:17:06.500
>> Yeah, it comes included and yeah, I really like it.


00:17:06.500 --> 00:17:10.020
It's also a bit of a roadmap to show what you could do beyond that.


00:17:10.020 --> 00:17:12.420
There's more than just really simple dialog boxes.


00:17:12.420 --> 00:17:14.660
For example, like the open file dialog box


00:17:14.660 --> 00:17:16.660
on Windows could probably be real similar.


00:17:16.660 --> 00:17:18.740
>> Oh yeah, probably.


00:17:18.740 --> 00:17:20.740
I was looking it up, there's a whole bunch


00:17:20.740 --> 00:17:22.940
of dialog boxes you got access to.


00:17:22.940 --> 00:17:25.020
>> Yeah, exactly. It's like a roadmap to like,


00:17:25.020 --> 00:17:27.560
"Oh, I can like create a file or, you know,


00:17:27.560 --> 00:17:29.860
any of these things," which I think is pretty cool.


00:17:29.860 --> 00:17:33.740
All right, let's flip away from OS specific to OS general,


00:17:33.740 --> 00:17:35.460
but stick with PyCoders for a minute.


00:17:35.460 --> 00:17:37.580
So this one also comes from PyCoders.


00:17:37.580 --> 00:17:40.480
I don't know if it's the same issue or not, but very cool.


00:17:40.480 --> 00:17:42.840
It says write Chrome extensions,


00:17:42.840 --> 00:17:46.040
which also mean like Brave and Vivaldi and others,


00:17:46.040 --> 00:17:49.820
Edge maybe, write Chrome extensions in Python.


00:17:49.820 --> 00:17:52.800
Oh, how does it work?


00:17:52.800 --> 00:17:54.920
PyScript, of course.


00:17:54.920 --> 00:17:58.560
So, yeah, we just take PyScript


00:17:58.560 --> 00:18:01.560
and this is an article by Pete Fiston


00:18:01.560 --> 00:18:05.360
and it sort of walks through how he was able to use


00:18:05.360 --> 00:18:08.440
PyScript, which is Python on WebAssembly


00:18:08.440 --> 00:18:09.760
running in the browser,


00:18:09.760 --> 00:18:12.300
to use that to power a Chrome extension.


00:18:12.300 --> 00:18:13.360
And it doesn't really matter


00:18:13.360 --> 00:18:15.240
if it's a bit of a nine meg download


00:18:15.240 --> 00:18:16.280
because you install it once


00:18:16.280 --> 00:18:18.680
and it's local on your computer, right?


00:18:18.680 --> 00:18:19.920
So it just, if you wanna do this,


00:18:19.920 --> 00:18:22.280
it walks you through all the things you gotta do


00:18:22.280 --> 00:18:25.240
in order to use PyScript to write Chrome extensions


00:18:25.240 --> 00:18:26.720
or Python to write Chrome extensions.


00:18:26.720 --> 00:18:27.560
What do you think?


00:18:27.560 --> 00:18:29.040
Cool, even shows you how to put an icon.


00:18:29.040 --> 00:18:30.040
- That's pretty cool.


00:18:30.040 --> 00:18:33.000
- Yeah, but I have more for you.


00:18:33.000 --> 00:18:34.480
So just so in case people don't know,


00:18:34.480 --> 00:18:36.960
this is an extra, extra, extra, hear all about it section


00:18:36.960 --> 00:18:38.280
'cause I'm gonna hit a whole bunch of things.


00:18:38.280 --> 00:18:42.320
So as of recently, just published this episode.


00:18:42.320 --> 00:18:46.280
Let me look, 31 minutes ago,


00:18:46.280 --> 00:18:48.880
and it says PyScript powered by MicroPython.


00:18:48.880 --> 00:18:51.440
So one of the challenges that PyScript has had traditionally


00:18:51.440 --> 00:18:57.680
It's based on the full, nearly the full CPython runtime compiled into WebAssembly,


00:18:57.680 --> 00:19:00.640
which after you strip a bunch out that doesn't work in the browser,


00:19:00.640 --> 00:19:02.320
it comes down to like nine megabytes.


00:19:02.320 --> 00:19:03.120
Okay.


00:19:03.120 --> 00:19:05.200
That's for like this browser extension thing.


00:19:05.200 --> 00:19:05.960
That's reasonable.


00:19:05.960 --> 00:19:11.800
But for, you would never use it in place of like Vue.js on a popular page because


00:19:11.800 --> 00:19:13.480
you want that page to load quickly.


00:19:13.480 --> 00:19:15.320
You want it to be good for SEO, all those things.


00:19:15.320 --> 00:19:17.600
But you know what's small and fast?


00:19:17.600 --> 00:19:18.960
MicroPython.


00:19:18.960 --> 00:19:19.680
Oh, neat.


00:19:19.840 --> 00:19:25.960
So I just had Brett Cannon, Nicholas Toliver and Fabio Fleger, on


00:19:25.960 --> 00:19:30.920
talk Python to talk about the work that they're doing to make high script,


00:19:30.920 --> 00:19:35.840
not run on full CPython, but to run on micro Python, micro Python.


00:19:35.840 --> 00:19:38.720
You can get that to load up in a hundred milliseconds on your page.


00:19:38.720 --> 00:19:43.200
And it's only a couple hundred K all of a sudden that starts to sound a lot like a


00:19:43.200 --> 00:19:47.320
pretty rich front end framework level of stuff you got to download and get started.


00:19:47.320 --> 00:19:49.020
And you cash it, then you're good to go.


00:19:49.200 --> 00:19:50.300
That's exciting, huh?


00:19:50.300 --> 00:19:52.020
- That's super exciting, yeah.


00:19:52.020 --> 00:19:54.340
- Yeah, so this Chrome extension thing is cool.


00:19:54.340 --> 00:19:56.420
When you look at the shipping version,


00:19:56.420 --> 00:19:58.160
I don't know if you can call it shipping


00:19:58.160 --> 00:20:00.260
'cause the price script is still like super alpha,


00:20:00.260 --> 00:20:02.580
but what you can get today.


00:20:02.580 --> 00:20:06.220
So Nicholas said probably spring


00:20:06.220 --> 00:20:08.520
that they'll have something to share,


00:20:08.520 --> 00:20:10.700
but in terms of being able to use MicroPython,


00:20:10.700 --> 00:20:11.900
but I think that's pretty excellent.


00:20:11.900 --> 00:20:15.460
That could really, really unlock some super cool features.


00:20:15.460 --> 00:20:18.500
If now we could build like a Vue.js type thing,


00:20:18.500 --> 00:20:19.460
but with Python.


00:20:19.460 --> 00:20:21.980
And one of the goals that they stated is


00:20:21.980 --> 00:20:25.140
that they're looking to build this as a framework,


00:20:25.140 --> 00:20:26.980
or excuse me, a platform


00:20:26.980 --> 00:20:29.100
that you can build frameworks on top of.


00:20:29.100 --> 00:20:30.100
So it's not just,


00:20:30.100 --> 00:20:32.180
here's how you write some Python code in the browser,


00:20:32.180 --> 00:20:34.780
but here's a foundation that people could create


00:20:34.780 --> 00:20:36.820
like a PyView or a PyAngular


00:20:36.820 --> 00:20:38.900
or whatever they wanted to create, right?


00:20:38.900 --> 00:20:40.180
- Yeah. - Okay.


00:20:40.180 --> 00:20:41.020
Yeah, go ahead.


00:20:41.020 --> 00:20:43.700
- Question just for my own personal use.


00:20:43.700 --> 00:20:47.620
Would Chrome extensions work on Vivaldi?


00:20:47.620 --> 00:20:48.920
- Yeah, yeah, they do.


00:20:48.920 --> 00:20:50.840
One of the things that's interesting about Vivaldi,


00:20:50.840 --> 00:20:54.320
and I think it probably affects its reporting a little bit,


00:20:54.320 --> 00:20:57.160
when you look at the user agent of Vivaldi,


00:20:57.160 --> 00:20:59.280
it's exactly the user agent of Chrome.


00:20:59.280 --> 00:21:02.920
So it lies to the world and tells the world it's Chrome.


00:21:02.920 --> 00:21:04.400
There's no user agent for Vivaldi,


00:21:04.400 --> 00:21:08.640
it's just whatever version of Chrome it's using.


00:21:08.640 --> 00:21:10.160
So when you go to the Chrome web store,


00:21:10.160 --> 00:21:11.520
it's like, put this in Chrome, you click it,


00:21:11.520 --> 00:21:12.360
and yeah, it goes.


00:21:12.360 --> 00:21:13.440
So it worked perfectly, sure.


00:21:13.440 --> 00:21:14.280
- Cool. - Yes.


00:21:14.280 --> 00:21:16.000
And John Sheehan says, yes, they do.


00:21:16.000 --> 00:21:18.500
All right, next extra, extra, extra.


00:21:18.500 --> 00:21:20.880
Brian, I've been excited a little bit about Mastodon.


00:21:20.880 --> 00:21:22.420
I don't know if you notice.


00:21:22.420 --> 00:21:23.340
- Yeah, me too.


00:21:23.340 --> 00:21:24.320
- I know, it's fantastic.


00:21:24.320 --> 00:21:26.120
It's really tons of great interactions.


00:21:26.120 --> 00:21:28.280
And I started putting in our show notes,


00:21:28.280 --> 00:21:30.580
which you'll see when I publish this,


00:21:30.580 --> 00:21:32.220
your Mastodon account and mine,


00:21:32.220 --> 00:21:33.540
so people can connect with us


00:21:33.540 --> 00:21:36.700
and have even more conversations over there.


00:21:36.700 --> 00:21:39.660
But there was a really interesting article by Eugene,


00:21:39.660 --> 00:21:42.020
the guy who created Mastodon,


00:21:42.020 --> 00:21:44.340
called some, I've been looking and looking.


00:21:44.340 --> 00:21:47.620
It's about scaling Mastodon and the challenges they were having.


00:21:47.620 --> 00:21:52.640
And boy, it's, I would love to link to it, but I just can't find it, but it's


00:21:52.640 --> 00:21:54.940
so it's written in Ruby, right?


00:21:54.940 --> 00:21:56.860
And so it talks so much about.


00:21:56.860 --> 00:22:01.400
These are the challenges of scaling out threads and, oh, we have this thing


00:22:01.400 --> 00:22:05.520
called a GIL and it really doesn't allow you to use threads very easily.


00:22:05.520 --> 00:22:09.980
And, and here's, there's just, it was so interesting to look at, at how a


00:22:09.980 --> 00:22:16.700
technology that doesn't have asyncio and async and await getting all tangled up trying to do


00:22:16.700 --> 00:22:22.860
IO based things. So it's like, well, can we have, maybe we should have 10 to 20 threads to do the


00:22:22.860 --> 00:22:27.820
network communication. But if we have more than 20, then we get like a context switching and


00:22:27.820 --> 00:22:33.020
contention in the operating system, you know, that just comes with having OS threads. Well,


00:22:33.020 --> 00:22:38.540
guess what? You can do really well with no threads or one thread. You can talk to web,


00:22:38.540 --> 00:22:41.260
You can call other websites, you can receive web requests


00:22:41.260 --> 00:22:45.100
and the mechanism for doing that in Python is async and await


00:22:45.100 --> 00:22:48.140
and async.io requires no additional threads,


00:22:48.140 --> 00:22:50.700
very, very little overhead, no contact switching.


00:22:50.700 --> 00:22:56.300
So this project by Andrew,


00:22:56.300 --> 00:22:59.980
sorry if I am not getting, Andrew Godwin, sorry,


00:22:59.980 --> 00:23:03.980
forgot his last name for a moment, of Django channels said,


00:23:03.980 --> 00:23:08.380
what if I rewrote this but in Python with an async and await?


00:23:08.380 --> 00:23:12.380
Okay, so there's a bunch of challenges of running Mastodon.


00:23:12.380 --> 00:23:14.180
People want to have their own server because they're like,


00:23:14.180 --> 00:23:17.140
"Oh, I want my own server so I'm not stuck in one of these communities."


00:23:17.140 --> 00:23:23.380
And beholden to them, the problem is every one of those is like a standalone DevOps adventure.


00:23:23.380 --> 00:23:27.780
There's tons of like things working together and it's a lot of work, right?


00:23:27.780 --> 00:23:35.220
It'd be better if you put like host more of them on one machine and sort of scale that up in a nice way.


00:23:35.220 --> 00:23:39.660
This one lets you host multiple domains for small to medium instances,


00:23:39.660 --> 00:23:42.280
and it's written with async and await,


00:23:42.280 --> 00:23:43.980
which is pretty awesome.


00:23:43.980 --> 00:23:46.780
Anyway, I think you should check this out.


00:23:46.780 --> 00:23:49.820
>> I didn't know if I caught you trying to pronounce it.


00:23:49.820 --> 00:23:50.780
>> Takahe?


00:23:50.780 --> 00:23:51.780
>> I don't know.


00:23:51.780 --> 00:23:54.460
>> I don't know. I'm going to go with that.


00:23:54.460 --> 00:23:57.580
>> Of course, Andrew Godwin just said,


00:23:57.580 --> 00:24:01.500
"I can probably write this in Python and get it out in a couple of weeks."


00:24:01.500 --> 00:24:03.340
>> I think it was like five days or something.


00:24:03.340 --> 00:24:04.940
(laughing)


00:24:04.940 --> 00:24:06.880
So key features, multiple domain support,


00:24:06.880 --> 00:24:09.020
multiple identities per user,


00:24:09.020 --> 00:24:11.020
which is kind of interesting.


00:24:11.020 --> 00:24:13.740
Desktop, mobile, and PWA compatible.


00:24:13.740 --> 00:24:15.060
Again, how many days?


00:24:15.060 --> 00:24:17.860
And easy deployment, a web worker, a background worker,


00:24:17.860 --> 00:24:20.940
and one database, not all this crazy, crazy stuff.


00:24:20.940 --> 00:24:23.900
So anyway, people can check it out.


00:24:23.900 --> 00:24:25.300
Let's check out the requirements.


00:24:25.300 --> 00:24:27.140
See what we got going on here.


00:24:27.140 --> 00:24:30.060
UVicorn for an HTTPX.


00:24:30.060 --> 00:24:32.820
I mean, that pretty much says it right there.


00:24:32.820 --> 00:24:33.360
Oh, interesting.


00:24:33.360 --> 00:24:38.640
It's based on each Django HTMX is pretty interesting as some of the


00:24:38.640 --> 00:24:40.500
building blocks, but yeah, super cool.


00:24:40.500 --> 00:24:42.360
Um, so there's another one.


00:24:42.360 --> 00:24:42.840
All right.


00:24:42.840 --> 00:24:47.120
I, I, we just had our black Friday sale over at talk Python.


00:24:47.120 --> 00:24:47.480
Cool.


00:24:47.480 --> 00:24:48.400
And that was really excellent.


00:24:48.400 --> 00:24:51.840
So a bunch of courses, we sold some PI test courses by the way.


00:24:51.840 --> 00:24:52.560
Yeah.


00:24:52.560 --> 00:24:57.040
I'm just excited because sometimes we have these sort of conversations


00:24:57.040 --> 00:24:58.980
about you've like cool sales and stuff.


00:24:58.980 --> 00:25:00.560
And I'm glad that I get to be a part of that now.


00:25:00.760 --> 00:25:04.660
We've done other fun things where like we couldn't sell your book through them


00:25:04.660 --> 00:25:08.080
because it's through the publisher and I, yes, it gets tricky.


00:25:08.080 --> 00:25:08.280
Right.


00:25:08.280 --> 00:25:09.440
So I'm really excited as well.


00:25:09.440 --> 00:25:13.540
So we did our black Friday sale and I guess what I noticed


00:25:13.540 --> 00:25:14.960
something a little bit unusual.


00:25:14.960 --> 00:25:19.200
So I, after a little bit, I opened up glances on the main web server and


00:25:19.200 --> 00:25:21.340
said, CPU usage is 85%.


00:25:21.340 --> 00:25:22.400
I'm like, Oh, that's not so good.


00:25:22.400 --> 00:25:24.280
88, 91, 92.


00:25:24.280 --> 00:25:30.440
Oh, but what was super interesting was engine X not Python was the thing


00:25:30.440 --> 00:25:31.280
getting hammered.


00:25:31.280 --> 00:25:35.660
So both engine X workers were like almost a hundred percent and Python was just


00:25:35.660 --> 00:25:36.020
chilling.


00:25:36.020 --> 00:25:40.180
I'm like, okay, that is a really interesting story for Python performance.


00:25:40.180 --> 00:25:45.140
That something amazing like engine X that people say is fast all the time is the


00:25:45.140 --> 00:25:45.820
bottleneck.


00:25:45.820 --> 00:25:48.980
And it turned out it survived, but just barely, right?


00:25:48.980 --> 00:25:51.780
If it were like twice as bad, it would have, it would have keeled over, which


00:25:51.780 --> 00:25:52.340
had been bad.


00:25:52.340 --> 00:25:56.940
So I talked to a bunch of people about this and I realize that there's one HTTP


00:25:56.940 --> 00:25:57.900
response.


00:25:57.940 --> 00:25:58.780
It's got to spell that better.


00:25:58.780 --> 00:26:04.180
Um, and 12 CSS files, 43 images and one JavaScript file on the page.


00:26:04.180 --> 00:26:04.660
I was sending them.


00:26:04.660 --> 00:26:09.620
So I'm like, all right, maybe I, I should try to use some interest in CDN, which I


00:26:09.620 --> 00:26:12.780
had got a recommendation from one of our listeners, but otherwise hadn't heard


00:26:12.780 --> 00:26:14.620
about what a cool service.


00:26:14.620 --> 00:26:19.580
So now we have 112 different locations serving up those static


00:26:19.580 --> 00:26:22.100
files and just processing.


00:26:22.100 --> 00:26:26.800
So I, I went back today when we did our cyber Monday and I said, when I, it was


00:26:26.800 --> 00:26:32.400
yesterday when I pushed out the announcement for Cyber Monday closing and I pulled up the


00:26:32.400 --> 00:26:33.400
real time data.


00:26:33.400 --> 00:26:34.720
Look at that traffic.


00:26:34.720 --> 00:26:38.880
That's CSS and JavaScript and images 1.4 gigabytes a second.


00:26:38.880 --> 00:26:41.720
Oh my gosh, insane dude.


00:26:41.720 --> 00:26:43.160
And check this out on the server.


00:26:43.160 --> 00:26:44.600
This is the most important part.


00:26:44.600 --> 00:26:50.960
3% CPU usage on NGINX and across the whole computer across all of all of the micro WSGI


00:26:50.960 --> 00:26:51.960
processes.


00:26:51.960 --> 00:26:52.960
Just a couple of more percent.


00:26:52.960 --> 00:26:54.560
>>CDN to the rescue.


00:26:54.560 --> 00:26:55.560
>>Exactly.


00:26:55.560 --> 00:26:58.920
The thing that's also interesting is that Python is just like, yeah, it was nothing.


00:26:58.920 --> 00:27:01.160
Like, we can take that, but it's all those static files.


00:27:01.160 --> 00:27:06.960
So anyway, I put that right up together for people in order to serve out that data.


00:27:06.960 --> 00:27:10.240
Pay $2, right, for 0.35 terabytes.


00:27:10.240 --> 00:27:14.440
And by the way, it's going right now.


00:27:14.440 --> 00:27:16.840
Oh, it's got a refresh here.


00:27:16.840 --> 00:27:21.360
They have these cool real-time maps and whatnot, but that little spike right there is when


00:27:21.360 --> 00:27:24.440
I released the Talk Python episode.


00:27:24.440 --> 00:27:27.640
and that's about four and a half terabytes per second,


00:27:27.640 --> 00:27:28.900
which is just insane.


00:27:28.900 --> 00:27:31.580
So anyway, I totally recommend people check this out.


00:27:31.580 --> 00:27:32.600
It's super fun.


00:27:32.600 --> 00:27:34.060
- You're reaching people all over the world.


00:27:34.060 --> 00:27:35.120
That's pretty cool.


00:27:35.120 --> 00:27:36.140
- Yeah, isn't that amazing?


00:27:36.140 --> 00:27:37.900
You get all these different locations.


00:27:37.900 --> 00:27:42.760
I think it lost its web socket connection


00:27:42.760 --> 00:27:43.600
'cause it stopped updating.


00:27:43.600 --> 00:27:45.360
It's like, there's a little warning.


00:27:45.360 --> 00:27:48.940
This live monitor is like a little bit of a suggestion


00:27:48.940 --> 00:27:51.760
of how things might be, but yeah, anyway.


00:27:51.760 --> 00:27:54.040
- Yeah, what's up with Alaska people not listening?


00:27:54.040 --> 00:27:54.640
>> Hey, Alaska.


00:27:54.640 --> 00:27:55.980
>> Yeah, man. Come on.


00:27:55.980 --> 00:28:00.440
They're going to have to CD and over to Canada anyway.


00:28:00.440 --> 00:28:03.500
Not that. This final one here.


00:28:03.500 --> 00:28:06.480
No, not final one. Second to final one of the read all about it,


00:28:06.480 --> 00:28:08.600
or hear all about it. Reader five.


00:28:08.600 --> 00:28:11.920
I'm actually been really getting back into RSS.


00:28:11.920 --> 00:28:13.480
>> I've never left.


00:28:13.480 --> 00:28:16.120
>> Yeah. What's your RSS story these days?


00:28:16.120 --> 00:28:21.000
>> No, I use a Pidley on my phone just to keep up on stuff.


00:28:21.000 --> 00:28:24.360
>> Nice. I'd switch to things like Zite,


00:28:24.360 --> 00:28:27.040
which is sadly gone, and Flipboard,


00:28:27.040 --> 00:28:29.720
and these Apple News like things


00:28:29.720 --> 00:28:32.000
where they curate a bunch of different sources.


00:28:32.000 --> 00:28:34.160
I'm like, "You know what? There's a bunch of great places.


00:28:34.160 --> 00:28:36.800
I would really like to just directly get them from and


00:28:36.800 --> 00:28:39.580
curate a little more than just I suggest more Python."


00:28:39.580 --> 00:28:43.240
Because do you know how many times my Python channel in


00:28:43.240 --> 00:28:47.980
Flipboard has woman scared of Python that comes out of toilet.


00:28:47.980 --> 00:28:50.080
Like, "No, not that Python.


00:28:50.080 --> 00:28:51.080
Really not.


00:28:51.080 --> 00:28:52.080
>> No, no, no.


00:28:52.080 --> 00:28:54.000
>> I've just been super loving.


00:28:54.000 --> 00:28:57.360
I've been using Reader 5 with two E's.


00:28:57.360 --> 00:29:01.480
What a nice piece of software this thing is for 10 bucks.


00:29:01.480 --> 00:29:02.080
>> Okay.


00:29:02.080 --> 00:29:02.640
>> Really, really cool.


00:29:02.640 --> 00:29:04.160
>> Let's check it out.


00:29:04.160 --> 00:29:06.320
>> Yeah. Another thing I would like,


00:29:06.320 --> 00:29:10.160
if people have awesome recommendations for blogs,


00:29:10.160 --> 00:29:13.120
especially Python blogs that I should be following,


00:29:13.120 --> 00:29:14.780
or people, listeners should be following,


00:29:14.780 --> 00:29:17.120
put that on the YouTube channel comments


00:29:17.120 --> 00:29:20.040
or send it to us on Mastodon or Twitter.


00:29:20.040 --> 00:29:23.040
and maybe I'll give a shout out to ones that are extra good.


00:29:23.040 --> 00:29:24.400
But very, very cool.


00:29:24.400 --> 00:29:25.720
Let's see.


00:29:25.720 --> 00:29:26.620
Check this out.


00:29:26.620 --> 00:29:29.640
There's a podcast called Sing for Science.


00:29:29.640 --> 00:29:31.560
And on season three, episode eight,


00:29:31.560 --> 00:29:34.120
which just came out six days ago,


00:29:34.120 --> 00:29:37.360
Rivers Cuomo of Weezer and Guido van Rossum


00:29:37.360 --> 00:29:38.800
sit down for a conversation.


00:29:38.800 --> 00:29:39.720
How cool is that?


00:29:39.720 --> 00:29:40.560
- That's pretty cool.


00:29:40.560 --> 00:29:41.840
- That's really cool.


00:29:41.840 --> 00:29:43.080
- Have you listened to it?


00:29:43.080 --> 00:29:44.000
- Yeah, I listened to it.


00:29:44.000 --> 00:29:47.840
I grabbed my phone and my dog and went for a walk


00:29:47.840 --> 00:29:48.680
and listened to it.


00:29:48.680 --> 00:29:51.020
as the sun came out and that was rare right now.


00:29:51.020 --> 00:29:53.680
So yeah, it's really interesting.


00:29:53.680 --> 00:29:55.080
- Neat.


00:29:55.080 --> 00:29:57.420
- It's a lot of the host talking to Rivers


00:29:57.420 --> 00:29:59.220
and talking to Guido and a little bit of interaction.


00:29:59.220 --> 00:30:00.880
I would love a little more facilitation


00:30:00.880 --> 00:30:04.180
of them two talking directly, but both great people.


00:30:04.180 --> 00:30:05.520
Rivers is awesome.


00:30:05.520 --> 00:30:07.200
He does really cool stuff with Python.


00:30:07.200 --> 00:30:10.860
I had him on talkPython 3.27,


00:30:10.860 --> 00:30:13.040
little automation tools, which was fun.


00:30:13.040 --> 00:30:15.880
So yeah, he's a legit developer these days,


00:30:15.880 --> 00:30:17.200
which is pretty neat.


00:30:17.200 --> 00:30:17.640
All right.


00:30:17.640 --> 00:30:20.400
Final thing, Brian, final extra, extra, extra.


00:30:20.400 --> 00:30:22.880
We started with, I started at least my segment


00:30:22.880 --> 00:30:26.960
with AI coding and I'm gonna end it with AI coding kite.


00:30:26.960 --> 00:30:27.880
Do you remember kite?


00:30:27.880 --> 00:30:30.160
It was like the original GitHub co-pilot.


00:30:30.160 --> 00:30:30.980
- Yeah.


00:30:30.980 --> 00:30:31.820
- Yeah.


00:30:31.820 --> 00:30:33.600
Unfortunately they are shutting down.


00:30:33.600 --> 00:30:37.440
So they've been around for 10 years or so,


00:30:37.440 --> 00:30:39.240
not quite seven years, something like that.


00:30:39.240 --> 00:30:40.080
- Really?


00:30:40.080 --> 00:30:41.400
- Quite a while, but they're shutting down.


00:30:41.400 --> 00:30:44.640
So thanks for all the code, I suppose.


00:30:44.640 --> 00:30:47.400
And that's it, that's all I got for all my extras.


00:30:47.400 --> 00:30:49.260
- I wanna add one.


00:30:49.260 --> 00:30:53.900
So we talked, Simon Willison talked to,


00:30:53.900 --> 00:30:56.380
one thing I didn't mention about in his talk


00:30:56.380 --> 00:30:57.980
is he encouraged people to write blogs


00:30:57.980 --> 00:31:01.680
because there's not that, blogs were huge for a while


00:31:01.680 --> 00:31:04.780
and then everybody was doing it and now not so much.


00:31:04.780 --> 00:31:08.860
And so you do get noticed more if you're writing a blog.


00:31:08.860 --> 00:31:10.180
I think that that's a good thing.


00:31:10.180 --> 00:31:12.340
Plus you can link, we can link to it easier


00:31:12.340 --> 00:31:14.180
if you've got your article on a blog.


00:31:14.180 --> 00:31:18.220
But also, and RSS wise,


00:31:18.220 --> 00:31:20.820
PlanetPython is something I still check out.


00:31:20.820 --> 00:31:23.460
PlanetPython.org, if you haven't heard of it,


00:31:23.460 --> 00:31:26.300
it has, you can either have the full content,


00:31:26.300 --> 00:31:31.220
so you can read, and it pulls all of this through RSS from different blogs.


00:31:31.220 --> 00:31:34.160
If you have, and titles only,


00:31:34.160 --> 00:31:38.140
if you have a Python blog or you're starting one,


00:31:38.140 --> 00:31:42.560
check out PlanetPython.org and try to get your name on the list,


00:31:42.560 --> 00:31:45.100
maybe put out like three or four articles first,


00:31:45.100 --> 00:31:48.780
and then try to get your name on the list or your blog on the list.


00:31:48.780 --> 00:31:51.520
That way it gets seen by people like us,


00:31:51.520 --> 00:31:53.260
even if you don't notify us.


00:31:53.260 --> 00:31:55.060
>> Yeah, that's excellent.


00:31:55.060 --> 00:31:57.020
I didn't subscribe to that because I feel


00:31:57.020 --> 00:31:59.100
like it's a little bit too much of everything,


00:31:59.100 --> 00:32:01.280
but I went through all the recent posts and said,


00:32:01.280 --> 00:32:02.820
this writer looks interesting or


00:32:02.820 --> 00:32:05.340
this source looks interesting and like subscribe directly.


00:32:05.340 --> 00:32:09.620
I used it to start my exploration of those things I want to subscribe to.


00:32:09.620 --> 00:32:11.460
>> Yeah, not a bad idea. You know they have


00:32:11.460 --> 00:32:13.800
- Or RSS feeds, 'cause they're in here.


00:32:13.800 --> 00:32:15.380
- Exactly.


00:32:15.380 --> 00:32:17.460
Since you brought it up, I just wanna also point out


00:32:17.460 --> 00:32:19.620
one of my roadblocks of writing a lot was,


00:32:19.620 --> 00:32:22.300
well, I don't have time to write an article,


00:32:22.300 --> 00:32:25.860
something well thought out and a thousand words and that.


00:32:25.860 --> 00:32:26.680
You know what?


00:32:26.680 --> 00:32:29.020
My new philosophy has been,


00:32:29.020 --> 00:32:31.580
let's just write really short posts.


00:32:31.580 --> 00:32:33.700
Here's one about a fun thing I did with spammers


00:32:33.700 --> 00:32:35.360
and it's three paragraphs.


00:32:35.360 --> 00:32:38.660
Or here's one about installing something as a PWA,


00:32:38.660 --> 00:32:40.900
it's two pictures and four paragraphs.


00:32:40.900 --> 00:32:43.120
and you don't have to write essay,


00:32:43.120 --> 00:32:46.640
like long essays to contribute interesting things


00:32:46.640 --> 00:32:47.480
and ideas, I think.


00:32:47.480 --> 00:32:49.060
So I just following up on that.


00:32:49.060 --> 00:32:52.500
- Yeah, my thoughts are if it's gonna be a thread,


00:32:52.500 --> 00:32:54.020
make it a post instead.


00:32:54.020 --> 00:32:55.860
- Yeah, exactly, exactly.


00:32:55.860 --> 00:32:59.460
All right, well, my jokes have vanished.


00:32:59.460 --> 00:33:02.580
I had a cool joke on social media and it got taken down.


00:33:02.580 --> 00:33:05.220
It was very funny.


00:33:05.220 --> 00:33:06.040
It was totally benign.


00:33:06.040 --> 00:33:07.980
I don't know why it's gone, but whatever.


00:33:07.980 --> 00:33:10.020
And then by the way, following up on this,


00:33:10.020 --> 00:33:13.760
Jeremy Page says, "You could also RSS Mastodon users."


00:33:13.760 --> 00:33:14.360
>> Okay.


00:33:14.360 --> 00:33:16.080
>> That's on it.


00:33:16.080 --> 00:33:19.720
>> Mastodon hashtags as well.


00:33:19.720 --> 00:33:20.800
>> RSS those.


00:33:20.800 --> 00:33:23.160
>> Okay. Yeah, I follow the Python hashtag over there.


00:33:23.160 --> 00:33:24.800
I could RSS it, I suppose.


00:33:24.800 --> 00:33:28.280
Excellent. All right. Brian, so do you have a joke for us?


00:33:28.280 --> 00:33:30.000
>> Yeah. Speaking of Mastodon,


00:33:30.000 --> 00:33:31.640
on Mastodon, I said,


00:33:31.640 --> 00:33:34.500
I'm getting a lot of great Python content on Mastodon,


00:33:34.500 --> 00:33:37.160
but I need some joke people to like,


00:33:37.160 --> 00:33:38.720
I need some nerd jokes.


00:33:38.720 --> 00:33:40.600
So I'm asking for people.


00:33:40.600 --> 00:33:44.320
This somebody didn't tell me a person to follow.


00:33:44.320 --> 00:33:46.320
I'm still looking for people to follow with good jokes.


00:33:46.320 --> 00:33:52.020
So if you send them my way or send me their way if you know of people.


00:33:52.020 --> 00:33:54.880
But here's one that I got from somebody I'm asked it on.


00:33:54.880 --> 00:33:56.280
So I got it from,


00:33:56.280 --> 00:33:57.380
who did I get this from?


00:33:57.380 --> 00:33:58.960
I should probably give credit.


00:33:58.960 --> 00:34:02.000
So this came from Steven Box.


00:34:02.000 --> 00:34:03.400
Nice. Thanks, Steven.


00:34:03.400 --> 00:34:06.820
So exit condition from monkeyuser.com.


00:34:06.820 --> 00:34:09.720
So it took me a while to get this.


00:34:09.720 --> 00:34:14.840
So there's a couple people sitting at a desk,


00:34:14.840 --> 00:34:16.840
pair of programming, are guessing,


00:34:16.840 --> 00:34:18.840
and then somebody else is frustrated.


00:34:18.840 --> 00:34:22.680
They hear, "Wait," and the frustrated guy says, "That's it,"


00:34:22.680 --> 00:34:27.540
and he starts going towards a door that's labeled recursion.


00:34:27.540 --> 00:34:31.080
And somebody says, "Wait, there's no... I'm going in."


00:34:31.080 --> 00:34:35.480
He goes in, and he gets into the other side and says,


00:34:35.480 --> 00:34:37.560
Wait, he's the person trying to say wait.


00:34:37.560 --> 00:34:41.720
Oh my gosh, there's no exit condition.


00:34:41.720 --> 00:34:45.920
So it's a dumb joke, but it's really good.


00:34:45.920 --> 00:34:47.720
And it's got some clever.


00:34:47.720 --> 00:34:52.320
The cartoon is clever where like the speech of the other one is off screen.


00:34:52.320 --> 00:34:54.320
So it kind of looks like it comes from the original group,


00:34:54.320 --> 00:34:57.160
but in fact is coming from the recursion of the first one.


00:34:57.160 --> 00:34:58.880
And yeah, it's yeah.


00:34:58.880 --> 00:35:00.680
OK, well, one more.


00:35:00.680 --> 00:35:04.280
Somebody said I should follow Olafer.


00:35:04.280 --> 00:35:09.880
Wait, anyways, I just thought this was dumb and funny.


00:35:09.880 --> 00:35:14.720
Bobby pin? No, I go by my full name, Robert Pindle.


00:35:14.720 --> 00:35:17.480
It reminded me of the Bobby Tables thing.


00:35:17.480 --> 00:35:19.560
>> Yes, exactly. I love it.


00:35:19.560 --> 00:35:22.800
Well, thank you everyone for listening and Brian,


00:35:22.800 --> 00:35:23.560
thanks for being here.


00:35:23.560 --> 00:35:24.120
>> Thank you.


00:35:24.120 --> 00:35:25.760
>> Yeah, bye everyone.

