WEBVTT

00:00:00.000 --> 00:00:06.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:06.000 --> 00:00:11.800
This is episode 383, recorded May 14th, 2024.

00:00:11.800 --> 00:00:12.800
And I am Brian Okken.

00:00:12.800 --> 00:00:14.200
And I am Michael Kennedy.

00:00:14.200 --> 00:00:19.000
And this, today's episode is sponsored by a new sponsor, Mailtrap.

00:00:19.000 --> 00:00:22.200
Thank you, Mailtrap. Listen to their spot later in the show.

00:00:22.200 --> 00:00:27.400
And if you want to connect to us, we're all on Fosstodon and on Mastodon.

00:00:27.400 --> 00:00:30.200
And those links are all in the show notes, of course.

00:00:30.200 --> 00:00:37.200
And also in the show notes or just at pythonbytes.fm, you can find out information to join us live on YouTube.

00:00:37.200 --> 00:00:39.800
It's always fun. And if not, that's OK.

00:00:39.800 --> 00:00:44.600
But you can catch us later. If you sign up to be a friend of the show, you can get the email.

00:00:44.600 --> 00:00:47.600
And the friend of the show emails are going well.

00:00:47.600 --> 00:00:51.000
It's growing, growing well. I'm excited about that.

00:00:51.000 --> 00:00:55.400
And also the open rate staying very high. So that's pretty exciting.

00:00:55.400 --> 00:00:56.200
So thank you.

00:00:56.200 --> 00:00:59.800
People must care. I think it's cool. I enjoy getting in myself, actually.

00:00:59.800 --> 00:01:06.600
Yeah, I do too. So also, I enjoy hearing from Michael about the exciting news in Python.

00:01:06.600 --> 00:01:09.000
So, Michael, what do you got for us first?

00:01:09.000 --> 00:01:11.800
Brian, why aren't you shipping code faster? Come on.

00:01:11.800 --> 00:01:13.200
What's taking so long?

00:01:13.200 --> 00:01:18.000
Well, you know that feeling when you start a new project and think everything's going quick.

00:01:18.000 --> 00:01:23.600
And then after a couple of years, you're like, why do we have so many meetings to like add a button?

00:01:23.600 --> 00:01:26.200
You know what I mean? Or something like that.

00:01:26.200 --> 00:01:32.600
Yeah, it's tricky. And so we're not the only ones to wonder this.

00:01:32.600 --> 00:01:39.400
Daksh Gupta said, I was also wondering this, but he took more action than most people I imagine would.

00:01:39.400 --> 00:01:45.000
And said, I'm going to ask 100 developers why they aren't shipping code faster and then write it up.

00:01:45.000 --> 00:01:49.000
So I read it up and let's share it. There's some interesting things in here, basically.

00:01:49.000 --> 00:01:58.000
Like, look, I talked to people from a lot of the tech companies you would know, Meta, Pinterest, Heroku, Roblox, etc., etc.

00:01:58.000 --> 00:02:02.200
Some that I could probably make a joke out of, but I'm going to try not to.

00:02:02.200 --> 00:02:06.500
I'm going to try not to. But I thought it might be fun to summarize this for you.

00:02:06.500 --> 00:02:15.400
All right. So they broke it down into multiple big categories like meetings or human interaction type stuff.

00:02:15.400 --> 00:02:20.000
And the first big category is code bases.

00:02:20.000 --> 00:02:23.500
And right at the top is dependency bugs.

00:02:23.500 --> 00:02:31.200
So you kind of got to look at these a little bit of what are your current today blockers?

00:02:31.200 --> 00:02:42.000
And maybe the person who said I'm blocked by this is a 27 year old who never worked when your only resource was a book and there were no packages, no dependencies.

00:02:42.000 --> 00:02:46.000
You want a dependency? You crack it open and you get the algorithm and you start writing.

00:02:46.000 --> 00:02:48.000
You know what I mean? Like that.

00:02:48.000 --> 00:02:54.000
So the problem is they say, look, if I hit what they have got a bunch of quotes that are actually nice in here.

00:02:54.000 --> 00:03:00.000
So Jack, an ex-Microsoft person, says the number one barrier to shipping faster is dependency bugs.

00:03:00.000 --> 00:03:09.000
So hitting a random mysterious bug with libraries that require reading tons of old code or stack overflow links and GitHub issues.

00:03:09.000 --> 00:03:13.000
They're just trying to figure out like, why is this thing, why did it stop working?

00:03:13.000 --> 00:03:22.000
You know what I mean? And I would change that a little bit or maybe Michael's version is when something changes and it becomes incompatible.

00:03:22.000 --> 00:03:35.000
And the worst case scenario is especially with the modern resolver and pipe and pip basically is if we can't find a matching fit for you, you don't get it.

00:03:35.000 --> 00:03:40.000
Rather than we're going to give you a warning that it's not a great idea, but we're going to let you run it.

00:03:40.000 --> 00:03:51.000
So if there's something that says I have to have this version of a library less than a version and something else says I have to have this library greater than a version and there's not an intersection there.

00:03:51.000 --> 00:03:55.000
You're now hunting around and you're like, well, guess we're done.

00:03:55.000 --> 00:03:57.000
And you can roll back.

00:03:57.000 --> 00:04:02.000
You could say, OK, well, what of this like weird combination of things that it's coming up that I got to deal with?

00:04:02.000 --> 00:04:05.000
Can I roll back so that there is an intersection?

00:04:05.000 --> 00:04:09.000
But if you need a new feature, all right, then it's hard.

00:04:09.000 --> 00:04:19.000
Or even if it's not any feature you need, it's just like, well, here's an hour and a half I spent juggling the intersection of these dependencies such that I didn't care about their interaction.

00:04:19.000 --> 00:04:22.000
Really, I just want them both to be here.

00:04:22.000 --> 00:04:24.000
But there's this bizarre interaction I got to deal with.

00:04:24.000 --> 00:04:32.000
And my complaint about the pip being 100 percent like, no, we can't find it so you don't get it is that incompatibility.

00:04:32.000 --> 00:04:37.000
The one thing that said less than the other things that greater than maybe that has to do with multi multi processing.

00:04:37.000 --> 00:04:43.000
If you're not using multi processing, it would probably be fine, even though there is like a known intersection bug.

00:04:43.000 --> 00:04:47.000
If you're not using that part of the code path, it's not your problem.

00:04:47.000 --> 00:04:48.000
And you can say, look, I tested it.

00:04:48.000 --> 00:04:50.000
I don't care if it's says it's the wrong version.

00:04:50.000 --> 00:04:51.000
I want to just keep working.

00:04:51.000 --> 00:04:52.000
Right.

00:04:52.000 --> 00:04:55.000
And so, well, that's a lot of timing spent on that.

00:04:55.000 --> 00:04:56.000
Right.

00:04:56.000 --> 00:04:57.000
OK.

00:04:57.000 --> 00:04:59.000
There also is bugs in your dependencies.

00:04:59.000 --> 00:05:02.000
And I don't I don't know if that was covered by this or not.

00:05:02.000 --> 00:05:04.000
Yes, that's true.

00:05:04.000 --> 00:05:06.000
But that's that's one of those.

00:05:06.000 --> 00:05:12.000
I think there's expectations that don't match really how they what reality should be.

00:05:12.000 --> 00:05:15.000
So we like you said, we used to write all of our code.

00:05:15.000 --> 00:05:20.000
And even if even if you got it out of a book, you wouldn't blame the book author if there was a bug in it.

00:05:20.000 --> 00:05:22.000
You would fix it yourself.

00:05:22.000 --> 00:05:31.000
But now we've got tons of dependencies and there's a lot of projects that are really 10 to 20 percent new code and the rest of it we're pulling in from everybody else.

00:05:31.000 --> 00:05:38.000
Now, if those other things have a bug, do we think that it's we we just save time to not have to write all that.

00:05:38.000 --> 00:05:43.000
Do we go out and fix those in the dependent projects or do we just complain about it or.

00:05:43.000 --> 00:05:44.000
Yeah, exactly.

00:05:44.000 --> 00:05:45.000
Exactly.

00:05:45.000 --> 00:05:46.000
And it's usually open source.

00:05:46.000 --> 00:05:48.000
Usually PRS are welcome.

00:05:48.000 --> 00:05:49.000
Right.

00:05:49.000 --> 00:05:50.000
And they do it.

00:05:50.000 --> 00:06:00.000
But that's why I brought up like the the younger developer who didn't have to live through the time where there were no package or no package management things because there were no packages.

00:06:00.000 --> 00:06:01.000
Right.

00:06:01.000 --> 00:06:07.000
You just maybe if you're lucky, you download some random code off the Internet and you like work it into your app if you're right.

00:06:07.000 --> 00:06:13.000
And so the velocity of writing software is so much faster than it used to be.

00:06:13.000 --> 00:06:17.000
And it takes a step back by 20 percent because that thing has drawbacks.

00:06:17.000 --> 00:06:19.000
It's still vastly better than it used to be.

00:06:19.000 --> 00:06:20.000
So that was all I was saying there.

00:06:20.000 --> 00:06:21.000
Yeah.

00:06:22.000 --> 00:06:24.000
And I know you live you live through the same thing, right?

00:06:24.000 --> 00:06:25.000
Yeah.

00:06:26.000 --> 00:06:27.000
OK, so that's not the only one.

00:06:27.000 --> 00:06:28.000
No, no.

00:06:28.000 --> 00:06:30.000
There's plenty more complicated code bases.

00:06:30.000 --> 00:06:31.000
It's it's.

00:06:31.000 --> 00:06:32.000
Yeah, it's tricky.

00:06:32.000 --> 00:06:34.000
I would have said number one if it was me.

00:06:34.000 --> 00:06:35.000
Yeah.

00:06:36.000 --> 00:06:38.000
So it says here, look, the law, the logic is sound.

00:06:38.000 --> 00:06:40.000
You've got a growing startup.

00:06:40.000 --> 00:06:41.000
You've got to ship faster.

00:06:41.000 --> 00:06:42.000
You're going to die.

00:06:42.000 --> 00:06:43.000
It's time to write docs.

00:06:43.000 --> 00:06:45.000
Early engineers churn out as the company grows.

00:06:45.000 --> 00:06:49.000
New engineers come into a big mess and they've got to deal with it.

00:06:49.000 --> 00:06:52.000
But they still got to grow fast, ship fast, etc.

00:06:52.000 --> 00:06:53.000
Right.

00:06:53.000 --> 00:06:58.000
It says Maria from Amazon says there's so much undocumented in our service, including

00:06:58.000 --> 00:07:04.000
poor records of new features, non-existent or outdated info and our dependencies or even

00:07:04.000 --> 00:07:06.000
essential things like best practices for testing.

00:07:06.000 --> 00:07:10.000
A lot of time is wasted and things trying to find what this is all about.

00:07:10.000 --> 00:07:11.000
Right.

00:07:11.000 --> 00:07:15.000
And nobody has time to write documentation, which creates a vicious cycle.

00:07:15.000 --> 00:07:17.000
This is your number one?

00:07:17.000 --> 00:07:19.000
The complicated code base is definitely number one.

00:07:19.000 --> 00:07:27.000
But the document, the documentation and comments part, I used to have a tool handy that would

00:07:27.000 --> 00:07:31.000
strip out, do a fork of a repo and strip out all the comments.

00:07:31.000 --> 00:07:32.000
I love it.

00:07:32.000 --> 00:07:36.000
Because it was so much easier to navigate some code bases without the comments.

00:07:36.000 --> 00:07:38.000
But yeah, comments are great.

00:07:38.000 --> 00:07:41.000
But if it's not, I really know what else you do for this.

00:07:41.000 --> 00:07:48.000
But if the function is, let's say 10 lines, but the documentation is 20 or 30, all of

00:07:48.000 --> 00:07:52.000
a sudden you're like, okay, I'm trying to see, I'm trying, you know what I mean?

00:07:52.000 --> 00:07:54.000
It's like a little tricky and you can do stuff.

00:07:54.000 --> 00:07:59.000
I have, for example, in editors, you can code fold the comments and things like that.

00:07:59.000 --> 00:08:00.000
Right.

00:08:00.000 --> 00:08:01.000
That could help.

00:08:01.000 --> 00:08:02.000
Yeah.

00:08:02.000 --> 00:08:04.000
But also like when you fix a bug, do you go back and fix the comment?

00:08:04.000 --> 00:08:06.000
Sometimes not.

00:08:06.000 --> 00:08:09.000
Okay, let's move on.

00:08:09.000 --> 00:08:10.000
All right.

00:08:10.000 --> 00:08:13.000
Next major section is process and QA loops.

00:08:13.000 --> 00:08:15.000
Let me see what you think about this.

00:08:15.000 --> 00:08:22.000
But it's not so much a test or no test, but when you have a QA department and so on, it

00:08:22.000 --> 00:08:27.000
says Taylor, who's worked for a series of high growth startups, says me, creating a

00:08:27.000 --> 00:08:32.000
test spec for QA, QA finding problems, getting a list of problems two days later, fixing

00:08:32.000 --> 00:08:38.000
the merge conflicts, because the code has changed since then, switching back, back to

00:08:38.000 --> 00:08:40.000
QA, deep looping, that kind of thing.

00:08:40.000 --> 00:08:41.000
Right.

00:08:41.000 --> 00:08:44.000
Maybe the challenge here is depending on other people for your code quality.

00:08:44.000 --> 00:08:45.000
Yeah.

00:08:45.000 --> 00:08:48.000
I think that's always in large projects, so it's going to be a thing.

00:08:48.000 --> 00:08:52.000
But having one of the things that helps with that, I know we're not trying to fix this

00:08:52.000 --> 00:08:56.000
here, but having embedded QA developers in the development teams.

00:08:56.000 --> 00:08:59.000
Yeah, that's an interesting suggestion for sure.

00:08:59.000 --> 00:09:05.000
Waiting for specs on larger companies, just waiting for, what are we going to build?

00:09:05.000 --> 00:09:11.000
Well, I got to wait for people to approve the schemas or the API points or whatever.

00:09:11.000 --> 00:09:13.000
People wishing we had waterfall again?

00:09:13.000 --> 00:09:15.000
I don't know what's going on.

00:09:15.000 --> 00:09:16.000
Yeah, exactly.

00:09:16.000 --> 00:09:20.000
Just design it all up front and give it to me.

00:09:20.000 --> 00:09:24.000
I think a lot of the next one also is awaiting stakeholder approval.

00:09:24.000 --> 00:09:27.000
I think there's just a lot of that kind of stuff.

00:09:27.000 --> 00:09:31.000
We're a pure vegetarian team, so we have no stakeholders.

00:09:31.000 --> 00:09:34.000
Put the steak down.

00:09:34.000 --> 00:09:35.000
Okay.

00:09:35.000 --> 00:09:43.000
Raj from AWS said, "Amazon meetings approval, talking to 10 different stakeholders because

00:09:43.000 --> 00:09:47.000
changing the color of a button affects 15 microservices."

00:09:47.000 --> 00:09:49.000
Oh, microservices.

00:09:49.000 --> 00:09:52.000
Could that just be its own thing, like microservices?

00:09:52.000 --> 00:09:54.000
Okay, let's go.

00:09:54.000 --> 00:09:55.000
Writing tests.

00:09:55.000 --> 00:10:02.000
Devs complain around tests could be basically divided into one, not enough tests or bad tests.

00:10:02.000 --> 00:10:08.000
So Grant at FinTech Unicorn, the biggest thing was we didn't have good tests or good types,

00:10:08.000 --> 00:10:14.000
so I had to do a whole lot of work to do and testing of stuff whenever I wanted to ship things.

00:10:14.000 --> 00:10:17.000
Yeah, he could have wrote them.

00:10:17.000 --> 00:10:19.000
Yeah, yeah, yeah.

00:10:19.000 --> 00:10:26.000
Another one has to do with it doesn't at first sound like bad tests, but CI/CD taking so long.

00:10:26.000 --> 00:10:31.000
So running pipelines for shipping takes a lot of time and ensures proper code coverage.

00:10:31.000 --> 00:10:35.000
The tests sometimes require these pipelines to take their time, which slows us down.

00:10:35.000 --> 00:10:36.000
Yeah.

00:10:36.000 --> 00:10:43.000
Yeah, I know there's more here, but one of the metrics that I love is throughput.

00:10:43.000 --> 00:10:47.000
So is it throughput or cycle time?

00:10:47.000 --> 00:10:48.000
I don't know.

00:10:48.000 --> 00:10:49.000
Cycle time.

00:10:49.000 --> 00:10:55.000
Basically, how long does it take you to get from a single line code change that's to shipping?

00:10:55.000 --> 00:11:01.000
And how all that process through the CI pipeline, the testing, approvals, whatever you have to do

00:11:01.000 --> 00:11:05.000
to measure that and try to get that as low as possible and get the junk out of it?

00:11:05.000 --> 00:11:07.000
Because that is a problem.

00:11:07.000 --> 00:11:08.000
Yeah, absolutely.

00:11:08.000 --> 00:11:11.000
All right, I can also blend the last one together with this.

00:11:11.000 --> 00:11:14.000
So people are waiting for PRs to be approved.

00:11:14.000 --> 00:11:16.000
Scope creep.

00:11:16.000 --> 00:11:23.000
Josh says, "The human tendency to stuff last-minute items into the crevices of their luggage

00:11:23.000 --> 00:11:28.000
minutes before leaving for the airport manifests itself at software companies as scope creep.

00:11:28.000 --> 00:11:33.000
Slowly and surely, it will push back your release date with every incremental addition

00:11:33.000 --> 00:11:41.000
feeling like an insignificant task, but in aggregate, adding significant molasses to the team's velocity."

00:11:41.000 --> 00:11:42.000
Yes, yes.

00:11:42.000 --> 00:11:46.000
Let's just ship it and then add those features later.

00:11:46.000 --> 00:11:47.000
Excessive meetings.

00:11:47.000 --> 00:11:48.000
I agree.

00:11:48.000 --> 00:11:52.000
I'm going to wrap it up with this one, Brian, because it's been kind of long, but this is interesting.

00:11:52.000 --> 00:11:53.000
Motivation.

00:11:53.000 --> 00:11:59.000
Diane, a former engineer at Meta, said the number one reason that slowed her down was motivation.

00:11:59.000 --> 00:12:02.000
So honest answer is, I was working on ads.

00:12:02.000 --> 00:12:05.000
And that's a very old, complicated, and large stack.

00:12:05.000 --> 00:12:06.000
I didn't understand it.

00:12:06.000 --> 00:12:09.000
My friends on younger teams seemed happier.

00:12:09.000 --> 00:12:10.000
I was miserable.

00:12:10.000 --> 00:12:13.000
Yeah, basically, it shouldn't be surprising.

00:12:13.000 --> 00:12:15.000
People want to work on inspiring projects.

00:12:15.000 --> 00:12:17.000
And when you're inspired, think more about it.

00:12:17.000 --> 00:12:18.000
You put more time into it.

00:12:18.000 --> 00:12:24.000
And it's like, well, can we squeeze a percent of a percent out of this retargeting thing

00:12:24.000 --> 00:12:26.000
to squeeze a bit more money for the company?

00:12:26.000 --> 00:12:29.000
Not the same sort of inspiration as it is.

00:12:29.000 --> 00:12:31.000
All right, well, people can check this list out.

00:12:31.000 --> 00:12:37.000
And hopefully, maybe bring some of these ideas together to push back some of these problems at your company.

00:12:37.000 --> 00:12:38.000
Yeah.

00:12:39.000 --> 00:12:40.000
All right, back to you, Brian.

00:12:40.000 --> 00:12:43.000
Well, I want to talk about Python 3.13.

00:12:43.000 --> 00:12:44.000
Yay!

00:12:44.000 --> 00:12:45.000
Speaking of shipping things.

00:12:45.000 --> 00:12:47.000
Yeah, shipping things.

00:12:47.000 --> 00:12:55.000
3.13, 3.13.0, Beta 1 is released as of May 8th.

00:12:55.000 --> 00:12:57.000
I guess this is like a week old.

00:12:57.000 --> 00:12:59.000
Anyway, Beta 1 released.

00:12:59.000 --> 00:13:01.000
And there's some fun stuff in here.

00:13:01.000 --> 00:13:04.000
So Beta is available to play with.

00:13:04.000 --> 00:13:08.000
And reminder, the Beta does not mean that it's completely done.

00:13:08.000 --> 00:13:10.000
It is half-baked.

00:13:10.000 --> 00:13:15.000
So the feature freeze for Python, is it an end feature freeze?

00:13:15.000 --> 00:13:16.000
I guess.

00:13:16.000 --> 00:13:17.000
I believe so.

00:13:17.000 --> 00:13:21.000
Yeah, I believe when they hit Beta, they say, "What's here is here."

00:13:21.000 --> 00:13:26.000
Ideally, unless maybe they have to take something out because they can't get it to work in the end.

00:13:26.000 --> 00:13:29.000
All right, so disclaimer, it is still under development.

00:13:29.000 --> 00:13:35.000
But there are four Beta releases, previews planned for 3.13.

00:13:35.000 --> 00:13:44.000
And this is a good time to, it says, "We bold, strongly encourage maintainers of third-party projects to test with 3.13."

00:13:44.000 --> 00:13:51.000
So time to turn on your, or at least check to see if you can turn on your 3.13 pipelines in CI.

00:13:51.000 --> 00:13:55.000
So a whole bunch of fun new things in 3.13.

00:13:55.000 --> 00:14:03.000
A lot of these are sort of internal stuff that I'm excited about, but end users maybe might not care about.

00:14:03.000 --> 00:14:09.000
This is the experimental free-threaded build mode to disable the GIL.

00:14:09.000 --> 00:14:10.000
This is kind of fun.

00:14:10.000 --> 00:14:15.000
A preliminary experimental just-in-time compiler.

00:14:15.000 --> 00:14:16.000
That's kind of neat.

00:14:16.000 --> 00:14:17.000
This is cool.

00:14:17.000 --> 00:14:28.000
A cyclic garbage collector that is now incremental, which should mean shorter pauses for collection and programs with a lot of objects.

00:14:28.000 --> 00:14:29.000
Oh, nice.

00:14:29.000 --> 00:14:33.000
Different version of Mimalloc. I don't know how to pronounce that.

00:14:33.000 --> 00:14:38.000
Yeah, some possible memory improvements, which is kind of neat.

00:14:38.000 --> 00:14:40.000
The thing that I'm really, okay.

00:14:40.000 --> 00:14:44.000
A couple other notes. I'll get to the exciting thing that I'm excited about.

00:14:44.000 --> 00:14:46.000
There's a bunch of removals.

00:14:46.000 --> 00:14:50.000
So I guess we're getting rid of CGI now, whatever.

00:14:50.000 --> 00:14:52.000
That's how you run the web.

00:14:52.000 --> 00:14:54.000
However, well, I run my website.

00:14:54.000 --> 00:15:00.000
And last week I mentioned this last week, typing.type is.

00:15:00.000 --> 00:15:03.000
Type is, I think I pronounced it type LS.

00:15:03.000 --> 00:15:04.000
It's IS.

00:15:04.000 --> 00:15:06.000
That makes more sense.

00:15:06.000 --> 00:15:08.000
I was looking at the wrong font, I guess.

00:15:08.000 --> 00:15:19.000
But some of the exciting bits are that we have a new improved REPL or interactive interpreter.

00:15:19.000 --> 00:15:24.000
And this is so exciting that actually Trey Hunter wrote an article about it.

00:15:24.000 --> 00:15:33.000
So even like the URL for this is, I have the URL hidden, is like my favorite thing of Python 3.13.

00:15:33.000 --> 00:15:37.000
So what's cool about the REPL is there's a bunch of cool stuff.

00:15:37.000 --> 00:15:40.000
There's a, it's colored prompt, which is fun.

00:15:40.000 --> 00:15:42.000
We like colors now.

00:15:42.000 --> 00:15:45.000
And then, oh, blue.

00:15:45.000 --> 00:15:47.000
There's, you can exit now.

00:15:47.000 --> 00:15:51.000
You used to have to do, you used to say like exit, bracket, bracket.

00:15:51.000 --> 00:15:52.000
What? It'll exit?

00:15:52.000 --> 00:15:54.000
Yeah, exit works now.

00:15:54.000 --> 00:15:55.000
Oh my gosh.

00:15:55.000 --> 00:15:57.000
I was thinking of doing a PR to make this happen.

00:15:57.000 --> 00:16:00.000
I'm just like, why is this so clunky?

00:16:00.000 --> 00:16:01.000
Yay.

00:16:01.000 --> 00:16:02.000
I mean, a pep.

00:16:02.000 --> 00:16:04.000
Just like, we got to like, we got to rally folks.

00:16:04.000 --> 00:16:10.000
This is worth 3.13 just to get exit to work.

00:16:10.000 --> 00:16:11.000
Block level history.

00:16:11.000 --> 00:16:12.000
Really cool.

00:16:12.000 --> 00:16:19.000
Basically, this is like some of these niceties that you used to get from other sort of alternative REPLs.

00:16:19.000 --> 00:16:25.000
Things like being able to edit the block and, you know, some little block history.

00:16:25.000 --> 00:16:29.000
It's really pretty cool to be able to like go back and modify things.

00:16:29.000 --> 00:16:31.000
And pasting code works better.

00:16:31.000 --> 00:16:38.000
So if you copy some stuff out of the REPL and paste it in the REPL, it doesn't paste in the dot, dot, dots correctly.

00:16:38.000 --> 00:16:39.000
You know, it does that right now.

00:16:39.000 --> 00:16:41.000
So neat.

00:16:41.000 --> 00:16:44.000
The downside, it's curses.

00:16:44.000 --> 00:16:49.000
So it won't work correctly on, doesn't currently work on Windows.

00:16:49.000 --> 00:16:51.000
So that's, actually, it's a pretty big deal.

00:16:51.000 --> 00:16:54.000
But, you know, anyway, some fun stuff.

00:16:54.000 --> 00:16:55.000
Why not Rich?

00:16:56.000 --> 00:16:58.000
Rich and Textual.

00:16:58.000 --> 00:17:01.000
That would have been awesome if they'd done that.

00:17:01.000 --> 00:17:02.000
Right?

00:17:02.000 --> 00:17:03.000
I mean, I'm not joking.

00:17:03.000 --> 00:17:04.000
Like, it works all cross-platform.

00:17:04.000 --> 00:17:06.000
It's got some incredible UI stuff.

00:17:06.000 --> 00:17:08.000
Would have been cool.

00:17:08.000 --> 00:17:11.000
Yeah, Rich and Textual don't work everywhere either.

00:17:11.000 --> 00:17:13.000
But, you know, but more places.

00:17:13.000 --> 00:17:16.000
Maybe this is a to-be-done.

00:17:16.000 --> 00:17:19.000
Or maybe just you get the old terminal on Windows.

00:17:19.000 --> 00:17:21.000
But, you know, that's 50% of the user base, right?

00:17:21.000 --> 00:17:35.000
That's like, it's not like, well, there's one particular MicroPython type of device that's like this odd $5 thing that goes into tractors that it won't work.

00:17:35.000 --> 00:17:37.000
Like, it's like half of the user base.

00:17:37.000 --> 00:17:38.000
So, I don't know.

00:17:38.000 --> 00:17:39.000
That's a surprise.

00:17:39.000 --> 00:17:46.000
Well, Blaze recommends instead of exit, we should just require people to do colon Q.

00:17:46.000 --> 00:17:47.000
How do you exit the ruffle?

00:17:47.000 --> 00:17:48.000
You reboot your computer.

00:17:48.000 --> 00:17:49.000
Okay, next.

00:17:49.000 --> 00:17:52.000
Anyway.

00:17:52.000 --> 00:17:53.000
All right.

00:17:53.000 --> 00:17:56.000
Well, should we talk about our lovely sponsor, Mailchimp?

00:17:56.000 --> 00:17:57.000
Yes, indeed.

00:17:57.000 --> 00:17:59.000
Although, I would like to add two things real quick.

00:17:59.000 --> 00:18:01.000
And then I'll tell everyone about them.

00:18:01.000 --> 00:18:04.000
One, this is very exciting.

00:18:04.000 --> 00:18:07.000
It's going to be interesting to see where the free-threaded Python stuff goes.

00:18:07.000 --> 00:18:10.000
Because that's another one of the big deals.

00:18:10.000 --> 00:18:11.000
But it's weird, right?

00:18:11.000 --> 00:18:13.000
You've got to have a separate build.

00:18:13.000 --> 00:18:15.000
It's not even a flag or something you can set.

00:18:15.000 --> 00:18:17.000
But it's going to be something else.

00:18:17.000 --> 00:18:22.000
But also the high-performance changes outside of this free-threaded thing with a JIT.

00:18:22.000 --> 00:18:23.000
Excuse me?

00:18:23.000 --> 00:18:24.000
A JIT?

00:18:24.000 --> 00:18:25.000
Not just interpreted?

00:18:25.000 --> 00:18:26.000
This is great.

00:18:26.000 --> 00:18:27.000
So, very interesting.

00:18:27.000 --> 00:18:29.000
And then a follow-up.

00:18:29.000 --> 00:18:30.000
I apologize.

00:18:30.000 --> 00:18:32.000
I can't remember who said it in the comments.

00:18:32.000 --> 00:18:39.000
But DORA, DevOps Research and Assessment Metrics, includes four key metrics divided into these areas.

00:18:39.000 --> 00:18:48.000
Deployment frequency or lead time for changes to measure team velocity and change failure rate and time to restore service.

00:18:48.000 --> 00:18:49.000
Measure stability.

00:18:49.000 --> 00:18:51.000
So, that's pretty cool.

00:18:51.000 --> 00:18:52.000
DORA metrics.

00:18:52.000 --> 00:18:53.000
All right.

00:18:53.000 --> 00:18:55.000
How about we talk Mailtrap now?

00:18:55.000 --> 00:18:56.000
Okay.

00:18:56.000 --> 00:19:00.000
This episode is sponsored by Mailtrap, an email delivery platform that developers love.

00:19:00.000 --> 00:19:12.000
An email sending solution with industry-best analytics, SMTP, and email API, as well as SDKs for major programming languages and 24/7 human support.

00:19:12.000 --> 00:19:15.000
Try for free at mailtrap.io.

00:19:15.000 --> 00:19:17.000
Thank you, Mailtrap, for supporting the show.

00:19:17.000 --> 00:19:19.000
Awesome to have them on board.

00:19:19.000 --> 00:19:22.000
We'll be telling you about them on upcoming shows as well.

00:19:22.000 --> 00:19:23.000
All right.

00:19:23.000 --> 00:19:27.000
So, if you do Jupyter Notebooks, Brian, that means you're going to settle so we see some pictures.

00:19:27.000 --> 00:19:34.000
If you do Jupyter Notebooks or JupyterLab in particular, it's got the way it looks and so on.

00:19:34.000 --> 00:19:38.000
But what if you could have a nice theming system for it?

00:19:38.000 --> 00:19:51.000
So, there's an extension I want to highlight, JupyterLab Theme Editor, which is an extension to provide basically editing of colors, font families, font sizes of different elements in the user interface.

00:19:51.000 --> 00:19:52.000
Right?

00:19:52.000 --> 00:19:53.000
Yeah.

00:19:53.000 --> 00:19:54.000
So, pretty cool.

00:19:54.000 --> 00:20:04.000
You can install it and then you can open up this little sidebar and it lets you pick the layout color, the accent color, the border color, the UI font size, the content font size.

00:20:04.000 --> 00:20:11.000
So, one of the things that sometimes drives me crazy about UIs, think about Zoom.

00:20:11.000 --> 00:20:14.000
If you go to VS Code and you say Zoom, Zoom's everything.

00:20:14.000 --> 00:20:18.000
What if I just want to Zoom just the stuff I actually care about, like the text?

00:20:18.000 --> 00:20:23.000
And I don't want all the other crap to take up more space and make the text even harder to read.

00:20:23.000 --> 00:20:25.000
I just stay over there and just see.

00:20:25.000 --> 00:20:26.000
All right.

00:20:26.000 --> 00:20:31.000
So, having different settings for content size versus UI element size is really awesome.

00:20:31.000 --> 00:20:32.000
So, there's a bunch of things like that.

00:20:32.000 --> 00:20:37.000
And yeah, you can basically pick all these different colors that you like.

00:20:37.000 --> 00:20:44.000
You want a style to be light blue on dark blue or dark blue on light blue or purple or whatever you want.

00:20:44.000 --> 00:20:48.000
There's a bunch of color palettes you can pick from, which is pretty nice.

00:20:48.000 --> 00:20:51.000
And it's not a huge thing, but it's kind of interesting.

00:20:51.000 --> 00:20:54.000
So, pip install Jupyter Theme Editor and off you go.

00:20:54.000 --> 00:21:00.000
Yeah, I want to try to make it theme like early 2000s.

00:21:00.000 --> 00:21:04.000
Yeah, where's like the blinking elements and the gradients?

00:21:04.000 --> 00:21:06.000
I want now.

00:21:06.000 --> 00:21:07.000
Yeah.

00:21:07.000 --> 00:21:11.000
Yeah, so that's a quick one, but people can check it out if they use JupyterLab.

00:21:11.000 --> 00:21:12.000
Nice.

00:21:12.000 --> 00:21:13.000
Yeah.

00:21:13.000 --> 00:21:14.000
All right.

00:21:14.000 --> 00:21:17.000
Well, I've got another quick one, a little bit.

00:21:17.000 --> 00:21:25.000
We were talking about using rich and textual for colors and stuff and love both of those projects.

00:21:25.000 --> 00:21:36.000
One of the things that and you can get colors and things, nice help output if you're using like type or click or some of the other extensions for different argument parsing.

00:21:36.000 --> 00:21:41.000
But a lot of people and I do too on simple projects, I just use arg parse.

00:21:41.000 --> 00:21:44.000
It works great for simple things.

00:21:44.000 --> 00:21:45.000
It's nice to test.

00:21:45.000 --> 00:21:48.000
However, it's more black and white.

00:21:48.000 --> 00:21:52.000
So, today we've got rich arg parse.

00:21:52.000 --> 00:21:54.000
So, rich arg parse is cool.

00:21:54.000 --> 00:21:55.000
It's not.

00:21:55.000 --> 00:22:01.000
So, if you're having a command line program that you want to use colors, of course, you could use rich, just use the colors.

00:22:01.000 --> 00:22:03.000
But the help is auto generated.

00:22:03.000 --> 00:22:07.000
Well, rich arg parse or auto generates the format.

00:22:07.000 --> 00:22:09.000
Rich arg parse gets colors in those.

00:22:09.000 --> 00:22:19.000
So, it's got, you know, nice orange color, orange and blue and white and green and some different great colors to really highlight.

00:22:19.000 --> 00:22:22.000
It's a lot easier to read the help text if it's in color.

00:22:22.000 --> 00:22:26.000
So, if you can add, if you're okay with adding a dependency, this is great.

00:22:26.000 --> 00:22:29.000
And it's also like really easy to add.

00:22:29.000 --> 00:22:31.000
I was like, is it possible?

00:22:31.000 --> 00:22:32.000
This is so easy.

00:22:32.000 --> 00:22:35.000
And so, the how you add it, there is a whole bunch of features.

00:22:35.000 --> 00:22:39.000
So, there's built in formatters.

00:22:39.000 --> 00:22:45.000
So, rich arg parse defines different formatters to help with the help formatter or the raw description help formatter.

00:22:45.000 --> 00:22:46.000
There are different types.

00:22:46.000 --> 00:22:53.000
But the easiest thing to do to try it out is all you have to do is import rich help formatter.

00:22:53.000 --> 00:23:02.000
And when you're instantiating your argument parser, you just pass in rich help formatter as the formatter class.

00:23:02.000 --> 00:23:05.000
And those two lines of code, that's all we did.

00:23:05.000 --> 00:23:10.000
So, I wanted to try this out to see how fun colors were in your help.

00:23:10.000 --> 00:23:14.000
And I've got a little test project called test arg parse apps.

00:23:14.000 --> 00:23:18.000
Basically, a hello world app that uses arg parse and runs testing on it.

00:23:18.000 --> 00:23:20.000
And I'm like, how do I do that?

00:23:20.000 --> 00:23:23.000
And so, the help for my little program looks like this.

00:23:23.000 --> 00:23:26.000
It's just white, normal.

00:23:26.000 --> 00:23:33.000
And when I added these two, just these two lines of code for rich arg parse, you just get a nice orange and blue.

00:23:33.000 --> 00:23:34.000
It's really much nicer.

00:23:34.000 --> 00:23:35.000
Yeah.

00:23:35.000 --> 00:23:38.000
Color in the terminal is, I feel it's kind of non-optional.

00:23:38.000 --> 00:23:41.000
I will say that it is one more dependency, though.

00:23:41.000 --> 00:23:48.000
And one of the reasons why I use arg parse a lot of times is because I don't want to add any dependencies and I still want argument parsing.

00:23:48.000 --> 00:23:50.000
So, keep that in mind.

00:23:50.000 --> 00:23:51.000
That's a totally good point.

00:23:51.000 --> 00:23:55.000
But I can imagine plenty of projects that said, we're not going to have dependencies.

00:23:55.000 --> 00:23:56.000
Let's just use arg parse.

00:23:56.000 --> 00:23:58.000
And then eventually they start having some.

00:23:58.000 --> 00:24:03.000
And once you're already there, you might as well throw this on here and make it look nicer without writing much different code, right?

00:24:03.000 --> 00:24:04.000
Yeah.

00:24:04.000 --> 00:24:09.000
And I love that it's, I mean, there are more features you go through, go look at the documentation.

00:24:09.000 --> 00:24:15.000
But I love projects where you can make your program better by just adding a couple lines of code.

00:24:15.000 --> 00:24:16.000
Pretty great.

00:24:16.000 --> 00:24:17.000
Indeed.

00:24:17.000 --> 00:24:19.000
Jeff out there likes to bring it full circle.

00:24:19.000 --> 00:24:24.000
So, wasn't dependency issues one of the biggest causes for slowdown development?

00:24:24.000 --> 00:24:25.000
Yes.

00:24:25.000 --> 00:24:28.000
Well, it's also, it's just two lines of code to change back.

00:24:28.000 --> 00:24:31.000
If you got a test break, you can take that out.

00:24:31.000 --> 00:24:34.000
That's assuming that the original developer that knows that it's still there.

00:24:34.000 --> 00:24:35.000
They could have left.

00:24:35.000 --> 00:24:37.000
And then, no, I'm just kidding.

00:24:37.000 --> 00:24:39.000
It's a fair point, honestly.

00:24:39.000 --> 00:24:40.000
So, anyway.

00:24:40.000 --> 00:24:41.000
I like it.

00:24:41.000 --> 00:24:42.000
Well, those are our items.

00:24:42.000 --> 00:24:44.000
Do you have any extras for us?

00:24:44.000 --> 00:24:45.000
Only one.

00:24:46.000 --> 00:24:49.000
But I will, it's very exciting.

00:24:49.000 --> 00:24:50.000
But it's just one of them.

00:24:50.000 --> 00:24:51.000
It's good.

00:24:51.000 --> 00:24:52.000
It's the only one.

00:24:52.000 --> 00:24:54.000
We have a brand new course over at Talk Python.

00:24:54.000 --> 00:24:59.000
And this is done by Vincent, who's been on the podcast before with us.

00:24:59.000 --> 00:25:03.000
So, it's called Getting Started with NLP and Spacy.

00:25:03.000 --> 00:25:04.000
Oh, neat.

00:25:04.000 --> 00:25:05.000
Yeah.

00:25:05.000 --> 00:25:10.000
So, basically, if you have a lot of text and you want to process it, pull out entities,

00:25:10.000 --> 00:25:12.000
understand things about it, right?

00:25:12.000 --> 00:25:15.000
Like, at a real deep level, you know, NLP.

00:25:15.000 --> 00:25:19.000
Spacy is one of the most important ways that you can, one of the most important libraries

00:25:19.000 --> 00:25:20.000
for doing that.

00:25:20.000 --> 00:25:25.000
And so, here's an awesome course that talks about how to do that with Spacy, but also

00:25:25.000 --> 00:25:32.000
even goes into using a little bit some of the extensions and fun things like Spacy LLM

00:25:32.000 --> 00:25:39.000
to integrate, say, ChatGPT or other LLMs along with the Spacy processing to pull things out.

00:25:39.000 --> 00:25:42.000
Talks about training custom Spacy models.

00:25:42.000 --> 00:25:49.000
Vincent did a really cool job where basically all the examples of this course are based

00:25:49.000 --> 00:25:52.000
on Talk Python to me podcast transcripts.

00:25:52.000 --> 00:25:58.000
So, he wrote a single function that will give you every line ever spoken on Talk Python

00:25:58.000 --> 00:26:04.000
over the last eight years as a generator, which is insanely awesome.

00:26:04.000 --> 00:26:06.000
And completely not useful.

00:26:06.000 --> 00:26:08.000
Very interesting, right?

00:26:08.000 --> 00:26:09.000
Very interesting.

00:26:09.000 --> 00:26:12.000
I'm not going to use the generators, but then you can just start feeding that kind of information

00:26:12.000 --> 00:26:16.000
and say, "Well, who has talked about FastAPI?

00:26:16.000 --> 00:26:21.000
And when you do talk about FastAPI, what other projects in the libraries were talked about?"

00:26:21.000 --> 00:26:28.000
You could do things to discover the zeitgeist of a topic or a tool over time by seeing how

00:26:28.000 --> 00:26:31.000
much other guests on the show talk about it and stuff.

00:26:31.000 --> 00:26:36.000
It's a really cool course, and people should definitely check it out.

00:26:36.000 --> 00:26:39.000
Train, annotate your own data, do all sorts of fun things.

00:26:39.000 --> 00:26:43.000
Link is in the show notes, and if you're on the list, I will probably be sending you an

00:26:43.000 --> 00:26:45.000
email about it as well.

00:26:45.000 --> 00:26:47.000
But yeah, very excited to have this new course up for everybody.

00:26:47.000 --> 00:26:49.000
It's going to be a lot of fun.

00:26:49.000 --> 00:26:55.000
The one extra I've got is last week I announced that I was going to switch the pytest course,

00:26:55.000 --> 00:26:57.000
the one at pythontest.com.

00:26:57.000 --> 00:27:02.000
Of course, there is also a pytest course at Talk Python Training.

00:27:02.000 --> 00:27:04.000
Definitely still worth trying out.

00:27:04.000 --> 00:27:09.000
It's a complete pytest course that covers the entire Python or the pytest book.

00:27:09.000 --> 00:27:13.000
That switched to Podia, and that switch is done to Podia.

00:27:13.000 --> 00:27:15.000
So, well, almost done.

00:27:15.000 --> 00:27:16.000
It's there.

00:27:16.000 --> 00:27:20.000
Everybody's been invited, except for one person, so they didn't get their invite.

00:27:20.000 --> 00:27:22.000
I'll get that out later today.

00:27:22.000 --> 00:27:30.000
But if you're still using the teachable version, it'll still be around until a little bit into

00:27:30.000 --> 00:27:34.000
June, but please switch over soon.

00:27:34.000 --> 00:27:39.000
And then the next step of this is Podia comes with email services, too.

00:27:39.000 --> 00:27:45.000
So I'm switching from ConvertKit to Podia for email, and I'm starting that this week.

00:27:45.000 --> 00:27:48.000
So doing that, that's the news on my end.

00:27:48.000 --> 00:27:55.000
And a lot of this has to do with just since I'm not as turbo of a course creator as Michael

00:27:55.000 --> 00:28:03.000
is, it's to keep my overhead down so that I can do smaller courses cheaper and get more

00:28:03.000 --> 00:28:04.000
of them out to you.

00:28:04.000 --> 00:28:06.000
There's still good quality stuff.

00:28:06.000 --> 00:28:07.000
It's just--

00:28:07.000 --> 00:28:08.000
>> That's awesome.

00:28:08.000 --> 00:28:09.000
Yeah, you keep the optionality, right?

00:28:09.000 --> 00:28:10.000
>> Keep the optionality open.

00:28:10.000 --> 00:28:11.000
So, yeah.

00:28:11.000 --> 00:28:12.000
All right.

00:28:12.000 --> 00:28:13.000
>> Yeah, congratulations.

00:28:13.000 --> 00:28:16.000
I know that's a big deal to move all that stuff around.

00:28:16.000 --> 00:28:17.000
>> Yeah, it was a little stressful.

00:28:17.000 --> 00:28:21.000
I was worried that tons of people were going to be mad, but I haven't had any complaints

00:28:21.000 --> 00:28:22.000
so far.

00:28:22.000 --> 00:28:25.000
And I'm not inviting other people to complain, but--

00:28:25.000 --> 00:28:27.000
>> You want me to complain?

00:28:27.000 --> 00:28:28.000
No, just kidding.

00:28:28.000 --> 00:28:29.000
>> Anyway.

00:28:29.000 --> 00:28:34.000
Oh, one of the cool things that it has that I hadn't used before is there's comments within

00:28:34.000 --> 00:28:35.000
the course.

00:28:35.000 --> 00:28:37.000
So people can ask questions like right there.

00:28:37.000 --> 00:28:40.000
I know it's a complicated topic, so it's kind of cool to have comments.

00:28:40.000 --> 00:28:41.000
>> Yeah, that is cool.

00:28:41.000 --> 00:28:44.000
>> Anyway, do you have anything funny for us, Michael?

00:28:44.000 --> 00:28:46.000
>> I do.

00:28:46.000 --> 00:28:47.000
I do.

00:28:48.000 --> 00:28:49.000
Let's see.

00:28:49.000 --> 00:28:50.000
Let me put it up here.

00:28:50.000 --> 00:28:53.000
So another testing one to follow up with your extra, of course.

00:28:53.000 --> 00:28:56.000
It comes to us from the venerable xkcd.

00:28:56.000 --> 00:28:58.000
This is 2928.

00:28:58.000 --> 00:28:59.000
Okay.

00:28:59.000 --> 00:29:02.000
So it's called Software Testing Day.

00:29:02.000 --> 00:29:04.000
Did you know there's a Software Testing Day, Brian?

00:29:04.000 --> 00:29:05.000
>> No.

00:29:05.000 --> 00:29:06.000
>> Yeah.

00:29:06.000 --> 00:29:08.000
It's right behind Valentine's Day, apparently.

00:29:08.000 --> 00:29:13.000
So do you and the other QA engineers have any fun plans for the holiday?

00:29:13.000 --> 00:29:15.000
Yeah, assuming the schedule system doesn't crash.

00:29:15.000 --> 00:29:22.000
Software Testing Day is a holiday celebrated every negative one years on January 0th at 2571 p.m.

00:29:22.000 --> 00:29:26.000
>> That's why I don't celebrate.

00:29:26.000 --> 00:29:31.000
>> Then if you look at the hover, as you do on xkcd, it says the company tried to document how often

00:29:31.000 --> 00:29:37.000
employees were celebrating Software Testing Day, but their record-keeping system kept mysteriously crashing.

00:29:37.000 --> 00:29:39.000
>> This is good.

00:29:39.000 --> 00:29:40.000
>> It's a subtle one, right?

00:29:40.000 --> 00:29:41.000
>> Yeah.

00:29:41.000 --> 00:29:43.000
>> Celebrate every negative one years.

00:29:43.000 --> 00:29:51.000
I actually had the question today from somebody as to why we can't structure our tests so that we can

00:29:51.000 --> 00:29:58.000
completely test our complicated software so that we never see anything after we write the code.

00:29:58.000 --> 00:30:01.000
>> Yeah.

00:30:01.000 --> 00:30:02.000
>> What a messy place.

00:30:02.000 --> 00:30:10.000
>> I wanted to ask him how much time he had because proving software is correct is something we tried to do a long time ago,

00:30:10.000 --> 00:30:13.000
and it's not worth going down that road.

00:30:13.000 --> 00:30:14.000
>> Yeah.

00:30:14.000 --> 00:30:20.000
The only few places it might make sense is like the Voyager probe or something like that.

00:30:20.000 --> 00:30:24.000
We're sending it out, and we want it to run 50 years from now.

00:30:24.000 --> 00:30:30.000
>> No, thoroughly testing is good, but you still can't prove that you've caught all the bugs.

00:30:30.000 --> 00:30:31.000
You just can't.

00:30:31.000 --> 00:30:32.000
>> Yeah, absolutely.

00:30:32.000 --> 00:30:36.000
All right, well, here's a nice little test case for them to use.

00:30:36.000 --> 00:30:38.000
>> Yeah, every negative one years.

00:30:38.000 --> 00:30:40.000
>> Indeed.

00:30:40.000 --> 00:30:41.000
>> Nice.

00:30:41.000 --> 00:30:43.000
All right, well, oh, fun, cool.

00:30:43.000 --> 00:30:49.000
Blaze just mentioned, speaking of testing, BlazeTube says, "Fun fact, right after this session,

00:30:49.000 --> 00:30:52.000
they're meeting to go through Chapter 6 of the pytest book."

00:30:52.000 --> 00:30:53.000
Yay.

00:30:53.000 --> 00:30:54.000
Anyway.

00:30:54.000 --> 00:30:55.000
>> Awesome.

00:30:55.000 --> 00:30:56.000
>> Cool.

00:30:56.000 --> 00:30:57.000
Well, thanks a lot for this wonderful episode, Michael.

00:30:57.000 --> 00:30:58.000
>> Yep.

00:30:58.000 --> 00:30:59.000
As always.

00:30:59.000 --> 00:31:00.000
Bye, Brian.

