WEBVTT

00:00:00.000 --> 00:00:05.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.000 --> 00:00:11.500
This is episode 367, recorded January 16, 2024, and I am Brian Okken.

00:00:11.500 --> 00:00:12.700
And I'm Michael Kennedy.

00:00:12.700 --> 00:00:18.800
And I guess we do have a sponsor today, so that's awesome.

00:00:18.800 --> 00:00:23.700
But Michael, do you want to tell us why you're not?

00:00:23.700 --> 00:00:36.900
Yeah, for people who are listening, maybe they hear a slightly different setup for me, for people who might watch the video, well, that right there in the background is lovely and very icy Portland, Oregon.

00:00:36.900 --> 00:00:47.400
And so I'll go ahead and put this on the screen and people can check out if they feel like they can check out the YouTube stream at like one minute, 19 seconds.

00:00:47.400 --> 00:00:55.100
This is the entrance to my house, Brian, and it looks like an apocalypse, just every I would say every block or so.

00:00:55.100 --> 00:01:01.100
There's like a hundred foot tree that's fallen somewhere and it's just taken out the power in so many ways.

00:01:01.100 --> 00:01:04.900
It's like it was now it was 13 now.

00:01:04.900 --> 00:01:06.300
It's 18 degrees Fahrenheit.

00:01:06.300 --> 00:01:11.900
So negative 9 something like that Celsius, no power for five days, not a place for podcasting.

00:01:11.900 --> 00:01:19.600
So I'm hanging out here downtown in a hotel with the family until the power comes back on, hopefully today, fingers crossed.

00:01:19.600 --> 00:01:31.600
Well, hopefully, yeah, hopefully there's actually quite a few people in Portland without power and did experience power outages and pipes bursting and things like that.

00:01:31.600 --> 00:01:39.900
And, you know, for people that are in parts of the country where they get like way colder than us, it might seem like we're just being wusses.

00:01:39.900 --> 00:01:48.000
But what we get here is often very heavy rain, heavy snow or freezing rain.

00:01:48.000 --> 00:01:53.200
And the freezing rain just weighs down trees and bricks, power lines and stuff like that.

00:01:53.200 --> 00:01:53.800
Absolutely.

00:01:53.800 --> 00:01:56.400
And this had up to 100 mile an hour winds with these really old trees.

00:01:56.400 --> 00:01:59.500
And also just the city is not really built for it.

00:01:59.500 --> 00:02:01.900
We don't get it enough that they have infrastructures for it.

00:02:01.900 --> 00:02:03.900
So it's like, oh, it's snowed three inches.

00:02:03.900 --> 00:02:05.300
So just good luck with that.

00:02:05.300 --> 00:02:07.000
We're not going to do anything right.

00:02:07.000 --> 00:02:08.400
No salt, no gravel.

00:02:08.400 --> 00:02:09.800
Just hope that works out.

00:02:09.800 --> 00:02:12.000
So anyway, it's been all right.

00:02:12.000 --> 00:02:13.400
But yeah, different setup, Brian.

00:02:13.400 --> 00:02:16.400
So thanks everyone for the understanding.

00:02:16.400 --> 00:02:17.100
Indeed.

00:02:17.100 --> 00:02:21.700
And also I want to say thanks to Bright Data.

00:02:21.700 --> 00:02:24.100
We'll talk more about them for sponsoring the show.

00:02:24.100 --> 00:02:30.100
But let's talk about something contrarian, I guess you would say, Brian.

00:02:30.100 --> 00:02:30.600
Okay.

00:02:30.600 --> 00:02:35.400
You know, many people I'm sure have heard of 37 Signals, right?

00:02:35.400 --> 00:02:40.000
David Hennemeyer Hansen, he's the guy who created Ruby on Rails, most notably.

00:02:40.000 --> 00:02:44.700
But there's also Basecamp and Heymail and all that kind of stuff, right?

00:02:44.700 --> 00:02:45.200
Yeah.

00:02:45.200 --> 00:02:49.100
So needless to say, they run a ton of SaaS products in the cloud.

00:02:49.100 --> 00:02:59.100
And I came across what I guess was more or less some kind of like conclusion to a bunch of conversations and stuff they've been working on.

00:02:59.100 --> 00:03:01.600
And so I'll work my way backwards just a little bit.

00:03:01.600 --> 00:03:02.800
But it's pretty fascinating.

00:03:02.800 --> 00:03:07.900
And the headline on the post is, "We have left the cloud."

00:03:07.900 --> 00:03:10.200
Brian, I thought we were all told to go to the cloud.

00:03:10.200 --> 00:03:13.000
I mean, we saw the picture of what happens when the clouds get angry.

00:03:13.000 --> 00:03:15.900
So I understand why you might leave the clouds.

00:03:15.900 --> 00:03:18.600
But more seriously, like clouds are supposed to save us.

00:03:18.600 --> 00:03:19.600
They save us money.

00:03:19.600 --> 00:03:22.500
They give us agility, et cetera, et cetera, right?

00:03:22.500 --> 00:03:23.000
Yeah.

00:03:23.000 --> 00:03:25.400
So hence the contrarian aspect, right?

00:03:25.400 --> 00:03:26.200
Yeah.

00:03:26.200 --> 00:03:32.800
Like I guess it's not like 37 Signals is the same sort of place as like a lot of startups.

00:03:32.800 --> 00:03:33.700
But, you know.

00:03:33.700 --> 00:03:34.200
That's true.

00:03:34.200 --> 00:03:36.700
If you were in, they do make that point.

00:03:36.700 --> 00:03:42.100
Like if you are an early stage startup where the costs are low, by all means cloud it up.

00:03:42.100 --> 00:03:49.400
But as I guess one of the big lessons here is the more that you get like the cloud hooks

00:03:49.400 --> 00:03:56.600
in the sort of abstract sense into your app, the more it might set you up for a tough time as you get bigger.

00:03:56.600 --> 00:03:56.900
Right?

00:03:56.900 --> 00:03:59.700
So let me get through this and we can talk a bit more about that.

00:03:59.700 --> 00:04:09.000
So let's, so they say we stand to save over $7 million in five years from our cloud exit.

00:04:09.000 --> 00:04:13.100
And so why do they not just say, well, that's 1.2 or 1.

00:04:13.100 --> 00:04:17.500
Whatever it is, 1.1 million per year because of our cloud exit.

00:04:17.500 --> 00:04:20.000
Because what they did is they went and they bought.

00:04:20.000 --> 00:04:25.100
So when they said they left the cloud, they didn't mean just like we're not using Kubernetes

00:04:25.100 --> 00:04:28.400
or we're not using Lambdas and serverless.

00:04:28.400 --> 00:04:32.600
Like they are, they bought physical hardware.

00:04:32.600 --> 00:04:33.000
Okay?

00:04:33.000 --> 00:04:35.300
So they've got these big pallets.

00:04:35.300 --> 00:04:44.100
And what they did is they bought this Dell 20 Dell R7625 servers, which don't mean a lot to me,

00:04:44.100 --> 00:04:49.100
maybe do to some people, but it basically takes up like two server racks.

00:04:49.100 --> 00:05:00.900
And that means 4,000 CPUs, 7.7 terabytes of RAM and almost a half a petabyte of high-speed SSD storage.

00:05:00.900 --> 00:05:06.500
And that costs them $600,000 to buy that, which is a lot of money.

00:05:06.500 --> 00:05:16.500
However, they were paying like 1.2 million a year in cloud prices and cloud to AWS basically.

00:05:16.500 --> 00:05:22.500
And so after six months it's paid for in the five years part is they expect this hardware to last them five years.

00:05:22.500 --> 00:05:24.900
And apparently it's super, super fast.

00:05:24.900 --> 00:05:27.600
So it's pretty interesting.

00:05:27.600 --> 00:05:33.400
And I would really recommend people go through and read this, what some of the values were.

00:05:33.400 --> 00:05:37.800
And basically what they did is they said, we're going to buy like a really big server.

00:05:37.800 --> 00:05:44.600
I know it's a bunch of kind of CPUs and stuff, but they kind of clustered into like one compute cluster.

00:05:44.600 --> 00:05:50.700
And then they came up with this thing called, it's kind of like Kubernetes called Camel, which would work for Python.

00:05:50.700 --> 00:05:58.700
But I think originally they're deploying Rails apps on it and basically gives you zero downtime slices of this giant server.

00:05:58.700 --> 00:06:04.400
And the reason this really fascinates me is this whole philosophy here.

00:06:04.400 --> 00:06:11.700
It's also not just, hey, they're leaving the cloud because many people are running to the cloud.

00:06:11.700 --> 00:06:19.300
But it's also they're getting a really huge server, like one huge server rather than a whole bunch of small distributed servers,

00:06:19.300 --> 00:06:24.600
which also was like a little bit the way that the cloud was initially sold, right?

00:06:24.600 --> 00:06:26.400
We'll get commodity hardware.

00:06:26.400 --> 00:06:29.000
You buy a bunch of little small slices all over the place.

00:06:29.000 --> 00:06:32.200
You can buy more small slices with auto scaling if you need.

00:06:32.200 --> 00:06:34.700
And instead they're like, no, this.

00:06:34.700 --> 00:06:42.200
And sort of along those same lines is I a little while ago interviewed Mark Russinovich, the CTO of Azure at Microsoft.

00:06:42.200 --> 00:06:46.800
Super cool guy, really, really smart, but also CTO of Azure.

00:06:46.800 --> 00:06:50.200
And he talked about how they start out with a bunch of small machines as well,

00:06:50.200 --> 00:06:56.300
and they're just getting bigger and bigger ones and slicing them up for tenants to be using them.

00:06:56.300 --> 00:07:09.500
So I think this is also a really interesting trend that we're going to see more of is like more big machines rather than a bunch of small machines that then maybe you slice up with Docker or Kubernetes or other things.

00:07:09.500 --> 00:07:12.700
And Brian, we've hardly even talked about this yet.

00:07:12.700 --> 00:07:21.100
But that has changed the way I got to type holding the mic in the wrong hand here for typing.

00:07:21.100 --> 00:07:23.600
That's changed the way that I'm running a lot of our infrastructure.

00:07:23.600 --> 00:07:26.500
So I've been thinking about this for a while and reading this stuff.

00:07:26.500 --> 00:07:29.400
I thought I'd make the first topic of our show.

00:07:29.400 --> 00:07:38.500
But also I had eight servers for all the Talk Python and Python bytes infrastructure, you know, some database server stuff.

00:07:38.500 --> 00:07:42.300
One that ran Python bytes, a bunch of services, a bunch of small machines, right?

00:07:42.300 --> 00:07:44.400
And I'm like, you know, why am I messing with all these small machines?

00:07:44.400 --> 00:07:55.500
So I ended up consolidating like last week all of that into one big, big server, just running a bunch of multi-tier Docker setups over there.

00:07:55.500 --> 00:07:56.900
And it's glorious, right?

00:07:56.900 --> 00:07:58.700
One machine runs great.

00:07:58.700 --> 00:08:04.800
There's a single command I type to upgrade like 13 different web apps all at once.

00:08:04.800 --> 00:08:12.900
That means upgrade their server infrastructure, upgrade their potentially to ship their new dependencies to rebuild them, all of that kind of stuff.

00:08:12.900 --> 00:08:13.900
One command.

00:08:13.900 --> 00:08:14.600
Interesting.

00:08:14.600 --> 00:08:16.500
So yeah, it's really interesting.

00:08:16.500 --> 00:08:17.100
It's really different.

00:08:17.100 --> 00:08:20.000
It let me like quickly and easily throw in some more things.

00:08:20.000 --> 00:08:22.500
And also I think it's better for security, right?

00:08:22.500 --> 00:08:32.300
Like I had like little fast API apps that were just like little utility things running that I didn't pay this much attention to as I did the other apps.

00:08:32.300 --> 00:08:40.600
And so, you know, they just didn't, they didn't get their dependencies updated as frequently and their Python versions revved as frequently.

00:08:40.600 --> 00:08:44.600
And if something happened to them, right, it's on technically on the same VM, right?

00:08:44.600 --> 00:08:45.100
That's an issue.

00:08:45.100 --> 00:08:48.800
But now they're all locked up behind like a Docker container.

00:08:48.800 --> 00:08:50.800
So it's a little more isolation as well.

00:08:50.800 --> 00:08:53.500
Anyway, it's this whole, I encourage people to read through.

00:08:53.500 --> 00:09:00.800
I put a bunch of different parts of this story in for the 37 signals we've left the cloud.

00:09:00.800 --> 00:09:01.900
It's worth reading.

00:09:01.900 --> 00:09:05.000
I'll just go through really quick the five values and then this is kind of a long segment.

00:09:05.000 --> 00:09:06.900
So I'll move us on.

00:09:06.900 --> 00:09:11.500
But here are the five values guiding our cloud exit.

00:09:11.500 --> 00:09:17.600
We value independence above all else and being trapped in Amazon cloud is not great.

00:09:17.600 --> 00:09:19.100
We serve the Internet.

00:09:19.100 --> 00:09:26.500
This business owes its entire existence to the societal and economic aberration that is the Internet in a positive way.

00:09:26.500 --> 00:09:30.100
And we don't want to just be locked up behind a few hyperscalers.

00:09:30.100 --> 00:09:33.900
We want to be kind of just on the Internet on our own terms.

00:09:33.900 --> 00:09:40.000
Spend money wisely, even if you have lots of money, you know, they're getting better value for money.

00:09:40.000 --> 00:09:46.200
Leading the way, the cloud has been sold as the answer to SaaS companies weren't so sure and they seek adventure.

00:09:46.200 --> 00:09:47.500
And you bet they do.

00:09:47.500 --> 00:09:50.200
So anyway, it's not leaving data centers.

00:09:50.200 --> 00:09:51.900
They have that in a managed data center.

00:09:51.900 --> 00:09:53.600
They just have it on hardware that they own.

00:09:53.600 --> 00:09:56.600
So anyway, what do you think about all this?

00:09:56.600 --> 00:10:04.100
So a lot of this is, I think it's interesting that it affects you even like that you, but you're not okay.

00:10:04.100 --> 00:10:10.600
When you said you put them all on one machine, you're not, it's you don't have like a server in your basement or something.

00:10:10.600 --> 00:10:11.300
No, no.

00:10:11.300 --> 00:10:16.400
So what I did is I instead of having a bunch of small VMs at DigitalOcean, I bought one big VM.

00:10:16.400 --> 00:10:16.800
Okay.

00:10:16.800 --> 00:10:23.200
What I have right now is like eight gigs, four CPUs, but I'm pretty sure I'm going to switch to like 16 gigs and eight CPUs.

00:10:23.200 --> 00:10:26.100
And even that would be cheaper than what I was doing before.

00:10:26.100 --> 00:10:40.200
And it's still, and the other thing that's interesting, we're in danger of going super long in this, but because all those different apps are sharing, let's say the final destination of eight CPUs, their spikes in performance are not at the same time.

00:10:40.200 --> 00:10:47.700
Like what makes talk Python or Python bytes spike in load is not the same that what makes the courses spike on load.

00:10:47.700 --> 00:10:56.200
Like a new course release or like Black Friday or something like that is very unlikely to intersect with when a podcast is released because I'm busy doing one or the other.

00:10:56.200 --> 00:10:56.400
Right.

00:10:56.400 --> 00:11:03.200
And so they basically has access to all eight cores instead of that one gets two cores, that one gets one core.

00:11:03.200 --> 00:11:11.800
And even though they're sharing, like basically in aggregate, it's the same number because the spikes don't line up, they get more capacity for whatever they're doing.

00:11:11.800 --> 00:11:12.600
It's pretty interesting.

00:11:12.600 --> 00:11:13.100
Yeah.

00:11:13.100 --> 00:11:13.600
Okay.

00:11:13.600 --> 00:11:15.600
It is interesting.

00:11:15.600 --> 00:11:16.100
Back to you.

00:11:16.100 --> 00:11:20.100
Well, let's completely go to a short topic.

00:11:20.100 --> 00:11:28.100
And I'd like to talk about little tiny scripts, or maybe big scripts, but single file applications.

00:11:28.100 --> 00:11:30.100
So single file scripts.

00:11:30.100 --> 00:11:33.100
So I wanted to talk about PEP 723.

00:11:33.100 --> 00:11:36.100
And that is inline script metadata.

00:11:36.100 --> 00:11:42.600
And one of the things that we've noticed recently in this, this is authored, it's interesting author.

00:11:42.600 --> 00:11:46.100
The author is Ofek Lev, I think that's how you say his name.

00:11:46.100 --> 00:11:48.100
He's the dude from Hatch.

00:11:48.100 --> 00:11:52.100
So Hatch is, I guess, in packaging.

00:11:52.100 --> 00:11:53.100
So this is around packaging.

00:11:53.100 --> 00:12:02.600
And the idea is that you've got a script has depend, might have dependencies also, and it also might depend on Python.

00:12:02.600 --> 00:12:10.600
And we can't really tell Python currently that a script needs a dependency or a particular version of Python.

00:12:10.600 --> 00:12:13.100
So this is an attempt to kind of fix that.

00:12:13.100 --> 00:12:19.100
And there's some motivation and stuff at the top that I like, you know, kind of skimmed through a little bit.

00:12:19.100 --> 00:12:20.100
No, I read it.

00:12:20.100 --> 00:12:29.600
But the real, at the end is we're going to put stuff like pyproject.toml, but you can do it in a script.

00:12:29.600 --> 00:12:31.100
And this isn't there yet.

00:12:31.100 --> 00:12:39.600
But there's an example where you just sort of do a pound sign and then like a few slashes and then say script.

00:12:39.600 --> 00:12:45.100
And then after that, you can put a little bit of like toml right in here as a comment.

00:12:45.100 --> 00:12:48.100
And the idea is something like pip--

00:12:48.100 --> 00:12:53.100
This is like the world's craziest docstring sort of thing, right?

00:12:53.100 --> 00:12:53.600
Almost.

00:12:53.600 --> 00:12:54.600
I don't understand.

00:12:54.600 --> 00:12:58.100
So supposedly there's reasons behind this syntax.

00:12:58.100 --> 00:13:00.100
It's the weirdest syntax I've ever seen.

00:13:00.100 --> 00:13:01.100
But maybe it's just--

00:13:01.100 --> 00:13:03.600
It's not quite shebang, but it's kind of shebang-ish.

00:13:03.600 --> 00:13:04.600
Yeah.

00:13:05.100 --> 00:13:17.100
But like in their example, they're saying, okay, well, you've got a little script that just requires, you know, and this is going to be common, I think, actually, requires requests and rich.

00:13:17.100 --> 00:13:23.600
So because it's going to like grab something off the internet and it's going to print some stuff and wants to do it with color and whatever.

00:13:23.600 --> 00:13:26.100
But how do you do that without packaging it?

00:13:26.100 --> 00:13:31.600
And here's one way is to just tell Python that it needs these other things.

00:13:31.600 --> 00:13:36.600
So there's a-- I don't really completely understand this.

00:13:36.600 --> 00:13:38.600
Like what are the back end?

00:13:38.600 --> 00:13:39.600
What's going to happen?

00:13:39.600 --> 00:13:43.100
What is-- I think the different tools will treat this different.

00:13:43.100 --> 00:13:47.600
Because my question is really where are these dependencies going to be installed at?

00:13:47.600 --> 00:13:51.600
Is it-- like if I just say-- I guess it depends on the thing.

00:13:51.600 --> 00:13:56.100
So if you're going to do-- if it hatch, for instance, or pipx might handle this.

00:13:56.100 --> 00:14:03.100
So if I say pipx, you know, run this script and it finds this, it'll probably create a pipx virtual environment area.

00:14:03.100 --> 00:14:06.100
And hatch will do the same thing in a different manner.

00:14:06.100 --> 00:14:10.600
But behind the scenes, grab-- like create a little virtual environment.

00:14:10.600 --> 00:14:19.100
This kind of-- it mostly seems like it's hiding virtual environment and dependency installs from users, but it's probably needed.

00:14:19.100 --> 00:14:21.100
So anyway, what do you think of this?

00:14:21.100 --> 00:14:23.100
I think it's interesting.

00:14:23.100 --> 00:14:27.100
Similar to installed, as Liz is pointing out.

00:14:27.100 --> 00:14:31.100
Sounds very similar to installed that we talked about not too long ago.

00:14:31.100 --> 00:14:34.100
And I think it solves an interesting problem.

00:14:34.100 --> 00:14:39.100
All of these do have that little bit of a bootstrap that has to happen, right?

00:14:39.100 --> 00:14:44.100
For something-- for this to work, it's not built into Python, right?

00:14:44.100 --> 00:14:51.100
And so you've got to have like one library installed that then you can use to run and kick off all the other runs.

00:14:51.100 --> 00:15:01.100
But if you somehow make that happen or get your company to agree, like, we're all going to have this foundation and then it just runs, I think that's pretty excellent.

00:15:01.100 --> 00:15:03.100
So yeah, very cool.

00:15:03.100 --> 00:15:05.100
And I think Ofek is killing it, right?

00:15:05.100 --> 00:15:09.100
He's being really creative and working a lot of different things.

00:15:09.100 --> 00:15:17.100
And this is a PEP, right? So if this was built into Python, then all of a sudden, yeah, we can have it run.

00:15:17.100 --> 00:15:22.100
So, okay, for some reason, I flew right over my head that it's a PEP and not just an extension to Hatch.

00:15:22.100 --> 00:15:28.100
So yeah, this is going to be-- this could be super, super important.

00:15:28.100 --> 00:15:30.100
And it was last updated in December.

00:15:30.100 --> 00:15:32.100
It's accepted now.

00:15:32.100 --> 00:15:35.100
I'm not sure how long it's been accepted, but it's around the packaging.

00:15:35.100 --> 00:15:52.100
So PEPs with packaging are interesting because we don't really have to wait for-- once they're accepted, we don't really have to wait for a release of Python because things like PEP and Hatch and other things don't have the same release cadence as Python.

00:15:52.100 --> 00:16:01.100
So this could be-- like there's a note here that says it's not going to be declared final until at least a couple of tools utilize it.

00:16:01.100 --> 00:16:08.100
So far, there's no tools that utilize it, but their example is possibly PipRun and PipX.

00:16:08.100 --> 00:16:13.100
And probably Hatch as well, considering who wrote it.

00:16:13.100 --> 00:16:17.100
>> Yeah, I would imagine it might show up and might get support from Hatch as well.

00:16:17.100 --> 00:16:18.100
>> Yeah.

00:16:18.100 --> 00:16:23.100
>> Yeah, funny comments out there in the audience, you guys, about being Rust-inspired indeed.

00:16:23.100 --> 00:16:26.100
Brian, you want to know what else is inspiring?

00:16:26.100 --> 00:16:27.100
>> What?

00:16:27.100 --> 00:16:29.100
>> Our sponsor, Bright Data.

00:16:29.100 --> 00:16:30.100
>> Yeah.

00:16:30.100 --> 00:16:31.100
>> Indeed.

00:16:31.100 --> 00:16:35.100
So I just want to say thank you to Bright Data for supporting the show.

00:16:35.100 --> 00:16:39.100
Check them out at pythonbytes.fm/brightdata.

00:16:39.100 --> 00:16:41.100
And there's-- go ahead, yeah?

00:16:41.100 --> 00:16:43.100
>> Do we want to put their stuff on the--?

00:16:43.100 --> 00:16:47.100
>> We do, and somehow I did not quite-- we did quite do it.

00:16:47.100 --> 00:16:49.100
There we go.

00:16:49.100 --> 00:16:50.100
Awesome.

00:16:50.100 --> 00:16:56.100
Yeah, so there's tons and tons of data out on the internet, unimaginable amounts of data, right?

00:16:56.100 --> 00:17:00.100
And we're lucky to live in a time where so much of this is behind structured APIs,

00:17:00.100 --> 00:17:04.100
and you can go and access it with HTTPS or requests or whatever.

00:17:04.100 --> 00:17:09.100
But the truth is that most of the data is not served up over clean APIs.

00:17:09.100 --> 00:17:13.100
It's just sitting there on a web page as gnarly HTML.

00:17:13.100 --> 00:17:14.100
Maybe it's even worse than that.

00:17:14.100 --> 00:17:18.100
Maybe it's obscured behind some front-end framework like React,

00:17:18.100 --> 00:17:22.100
where when you actually look at the HTML, it just says, "Pull in the React app."

00:17:22.100 --> 00:17:23.100
Good luck with that.

00:17:23.100 --> 00:17:25.100
And then something else happens somewhere along the way, right?

00:17:25.100 --> 00:17:28.100
So getting access to that data can be hard.

00:17:28.100 --> 00:17:29.100
What's the answer?

00:17:29.100 --> 00:17:31.100
Well, web scraping, everyone says.

00:17:31.100 --> 00:17:33.100
Yes, true.

00:17:33.100 --> 00:17:37.100
But just like you wouldn't want to set up your production infrastructure in your home office,

00:17:37.100 --> 00:17:41.100
running web scraping jobs on a single computer, even in a data center,

00:17:41.100 --> 00:17:49.100
can lead to your program being potentially unreliable with data pinned where whatever source you're accessing

00:17:49.100 --> 00:17:51.100
thinks you're located, right?

00:17:51.100 --> 00:17:54.100
Maybe there's different data if you're in the EU than if you're in Ohio,

00:17:54.100 --> 00:17:57.100
but your computer is in Ohio, so there you go.

00:17:57.100 --> 00:18:01.100
Or it gets blocked because of rate limiting or other types of things like that, right?

00:18:01.100 --> 00:18:05.100
So if you need to do professional web scraping, check out Bright Data.

00:18:05.100 --> 00:18:11.100
They have an award-winning proxy network with millions of different places to access data from.

00:18:11.100 --> 00:18:17.100
And powerful web scrapers, they have even ready-to-go datasets you can download.

00:18:17.100 --> 00:18:22.100
So they've already curated these datasets, and you can just access them and get updates from them

00:18:22.100 --> 00:18:24.100
and not even do web scraping, which is awesome.

00:18:24.100 --> 00:18:26.100
So they've got a whole marketplace for that.

00:18:26.100 --> 00:18:30.100
And everyone knows, and we're probably going to come back to it some more,

00:18:30.100 --> 00:18:37.100
privacy-conscious stuff that I really care about, and they are both CCPA and GDPR compliant.

00:18:37.100 --> 00:18:42.100
They have low-code solutions as well as Python programming models with async I/O and playwrights.

00:18:42.100 --> 00:18:46.100
So if you have serious data needs and those websites that have the data don't offer an API,

00:18:46.100 --> 00:18:48.100
then you need to check out Bright Data.

00:18:48.100 --> 00:18:55.100
Give them a try at pythonbytes.fm/brightdata, and please use that URL so you know that they heard from us.

00:18:55.100 --> 00:18:57.100
Thank you to Bright Data for supporting the show.

00:18:57.100 --> 00:19:00.100
Links in your podcast player show notes.

00:19:00.100 --> 00:19:02.100
So pretty awesome.

00:19:02.100 --> 00:19:03.100
All right.

00:19:03.100 --> 00:19:05.100
Back to the next thing.

00:19:05.100 --> 00:19:10.100
So this is super exciting, and it came -- I believe this was sent in by Balazs.

00:19:10.100 --> 00:19:14.100
Let me check. Yeah, Balazs sent this over. Thank you, Balazs, for pointing this out.

00:19:14.100 --> 00:19:21.100
So I've had Fedor Fitzner on Python before, and we've talked about FLET.

00:19:21.100 --> 00:19:27.100
And FLET is basically Flutter but with a Python programming API, right?

00:19:27.100 --> 00:19:32.100
Flutter is actually how we built the apps at Talk Python, right, for courses.

00:19:32.100 --> 00:19:39.100
Super cool framework, but you're writing Dart, and Dart is good, but it's not Python, right?

00:19:39.100 --> 00:19:42.100
And so it would be great to be able to write that kind of code.

00:19:42.100 --> 00:19:44.100
Here's an example, by the way, Brian.

00:19:44.100 --> 00:19:49.100
We talked about FastUI, and I said, "Oh, that reminds me of this sort of hierarchical code structure.

00:19:49.100 --> 00:19:53.100
Reminds me of Flutter," right?

00:19:53.100 --> 00:19:58.100
And so here's the same thing, the Flutter UI but in Python code instead of Dart.

00:19:58.100 --> 00:20:01.100
I know the link for this code is in the show notes. You can check it out.

00:20:01.100 --> 00:20:06.100
Right. So the big news is you can now build APKs for Android.

00:20:06.100 --> 00:20:11.100
And for those of you who have not suffered the indignity of the app stores,

00:20:11.100 --> 00:20:16.100
the way you get something into the Google Play Store is you build what's called an APK,

00:20:16.100 --> 00:20:22.100
and then you send them that, they process it, and then that's what gets shipped out to run on the phones on Android.

00:20:22.100 --> 00:20:27.100
So this means even though FLET built Flutter apps, you couldn't really deploy it.

00:20:27.100 --> 00:20:32.100
You could kind of get the FLET app and then put your Python code on there, but that's not like your app.

00:20:32.100 --> 00:20:35.100
That's like Jupyter or something like that kind of.

00:20:35.100 --> 00:20:41.100
So this is awesome. This means that people can now build apps that go in the app store,

00:20:41.100 --> 00:20:46.100
at least for Android, with Flutter and FLET and Python in particular.

00:20:46.100 --> 00:20:50.100
We'll see about iOS. It's on the roadmap. So super exciting.

00:20:50.100 --> 00:20:52.100
Yeah.

00:20:52.100 --> 00:20:59.100
I mean, I would have used FLET if I was sure I could get it to build and ship on the different things.

00:20:59.100 --> 00:21:03.100
I'd much rather have done that than use Flutter or Dart for Flutter.

00:21:03.100 --> 00:21:08.100
But you've got to work with the building blocks you've got, and this one just got better. So exciting.

00:21:08.100 --> 00:21:09.100
Yeah.

00:21:09.100 --> 00:21:15.100
Oh, also really quick, in the show notes, there's a video by this guy called Neural9.

00:21:15.100 --> 00:21:18.100
His channel is called Neural9. Walking through the steps to do all that build.

00:21:18.100 --> 00:21:21.100
So you want to see how it works, you can watch that eight-minute video.

00:21:21.100 --> 00:21:23.100
Cool. Neat.

00:21:23.100 --> 00:21:31.100
So that's for Android apps. For command line, normal command line stuff, I was going to talk about Harlequin.

00:21:31.100 --> 00:21:39.100
So there's a lot of people that use SQL and SQLite for different purposes, of course, for databases.

00:21:39.100 --> 00:21:47.100
But to take a look at your SQLite data, there is an IDE called Harlequin.

00:21:47.100 --> 00:21:49.100
I don't think we've covered it.

00:21:49.100 --> 00:21:57.100
But it's an open source Python project that it looks like it's pretty cool.

00:21:57.100 --> 00:22:03.100
It's got on the – we're showing on the screen the little snippet or screenshot.

00:22:03.100 --> 00:22:08.100
You've got kind of your tables, your data catalog on the left panel.

00:22:08.100 --> 00:22:13.100
You've got a query editor and then some query results at the bottom right.

00:22:13.100 --> 00:22:18.100
And it actually looks pretty slick for quickly going through some data.

00:22:18.100 --> 00:22:24.100
It looks like it has hooks to go into DuckDB and SQLite.

00:22:24.100 --> 00:22:28.100
That's why I brought up SQLite. And I'd probably use it for SQLite.

00:22:28.100 --> 00:22:29.100
I haven't used DuckDB.

00:22:29.100 --> 00:22:36.100
For people who don't know, DuckDB is also in process very much like SQLite, but it's Columnar instead of row-based.

00:22:36.100 --> 00:22:39.100
So they're kind of in the same category, I guess.

00:22:39.100 --> 00:22:42.100
Yeah. Okay. Yeah, I haven't used it.

00:22:42.100 --> 00:22:45.100
But definitely SQLite, use that a lot.

00:22:45.100 --> 00:22:50.100
So this is kind of fun. I like command line tools. This looks neat.

00:22:50.100 --> 00:22:57.100
I wanted to – it's kind of a short topic. Just, hey, this is a command line interface for SQLite or DuckDB.

00:22:57.100 --> 00:23:03.100
And that's fun. It looks like it runs on Linux, Mac, and Windows, which is cool.

00:23:03.100 --> 00:23:14.100
But I was also – one of the things I've noticed is in like, for instance, a lot of Django tutorials, Django starts with SQLite.

00:23:14.100 --> 00:23:20.100
And you – I mean, by default, it does that. And I think that you can – and then you can specify other databases.

00:23:20.100 --> 00:23:26.100
But I noticed today a discussion on Mastodon that I wanted to bring up, kind of SQLite-related.

00:23:26.100 --> 00:23:32.100
Jeff Chirplet posted a post by somebody else, Anze.

00:23:32.100 --> 00:23:40.100
But, okay, Jeff's comment is, "This is a nice write-up about using SQLite in production with pitfalls and open questions.

00:23:40.100 --> 00:23:47.100
I cringe whenever I see some Django Python luminary recommending people use SQLite in production.

00:23:47.100 --> 00:23:52.100
I don't care how good you are. You won't get it right, even if you think you did."

00:23:52.100 --> 00:23:55.100
Anyway, so interesting commentary there.

00:23:55.100 --> 00:24:04.100
So Anze's post was, "I wrote a blog post about using SQLite in production and dealing with DB as closed errors.

00:24:04.100 --> 00:24:06.100
Happy to hear your thoughts."

00:24:06.100 --> 00:24:13.100
So the article is called, "Django, SQLite, and Databases Locked Error," and it walks through those.

00:24:13.100 --> 00:24:20.100
And the – kind of the reality is Django doesn't, I guess, lock the database when it reads correctly.

00:24:20.100 --> 00:24:22.100
The transactions are weird.

00:24:22.100 --> 00:24:32.100
And a lot of the discussion around this really is if you're using – if you're using SQLite for a database that's mostly read-only,

00:24:32.100 --> 00:24:36.100
most people are just reading stuff, it'll probably work fine. And it might work great.

00:24:36.100 --> 00:24:40.100
And it might be way less hassle than doing Postgres or something else.

00:24:40.100 --> 00:24:48.100
But if there are a lot of transactions that are writing to it, if you have multiple writers, then you've got issues.

00:24:48.100 --> 00:24:53.100
So just thought this was an interesting discussion. I wanted to bring it up.

00:24:53.100 --> 00:24:58.100
>> Yeah, it is interesting. I think it really depends on the type of app you got.

00:24:58.100 --> 00:25:03.100
Is it an analytics thing that's writing like crazy, or is it basically like the database here blog?

00:25:03.100 --> 00:25:09.100
Right where it's really just you make an entry once a week if you're a good blogger.

00:25:09.100 --> 00:25:13.100
You know what I mean? That kind of thing. And then it's all reads? Probably fine.

00:25:13.100 --> 00:25:21.100
Right, so somewhere in the middle, I guess, like you can sort of turn that bar or watch that gauge turn from green to red

00:25:21.100 --> 00:25:25.100
as it gets closer to like a full analytics system. But yeah, it's pretty interesting.

00:25:25.100 --> 00:25:27.100
>> Yeah, interesting discussion.

00:25:27.100 --> 00:25:28.100
>> Indeed.

00:25:28.100 --> 00:25:30.100
>> All right. What you got? Oh, we're done?

00:25:30.100 --> 00:25:34.100
>> We're done. We're done. But we're not done because I have many extras. Do you have extras?

00:25:34.100 --> 00:25:40.100
>> I've got just a couple extras. So since I've got my screen up, I'll run through a couple extras.

00:25:40.100 --> 00:25:51.100
I started Python People podcast last summer and then kind of ran out of time trying to get the pytest course done.

00:25:51.100 --> 00:25:54.100
And so now I'm coming back and cleaning up some things.

00:25:54.100 --> 00:26:01.100
So there's a few recent episodes that finally came out. So like I stopped in October and then picked it up in January.

00:26:01.100 --> 00:26:07.100
So we've got Will Vincent and Julian Sequeira and Pamela Fox episodes out now. So check those out.

00:26:07.100 --> 00:26:13.100
>> Oh, excellent. Yeah, those are all great people. And many of them have been on this show as well.

00:26:13.100 --> 00:26:17.100
So very cool. Nice to see these go in there. They provide a really interesting look,

00:26:17.100 --> 00:26:21.100
like really out of bounds looks into what people are doing.

00:26:21.100 --> 00:26:30.100
You and Paul talked a lot about lacrosse, right, and empowering women and not the next pep.

00:26:30.100 --> 00:26:33.100
And that was really interesting. So keep it going.

00:26:33.100 --> 00:26:41.100
>> Some of the fun bits are to try to talk to kind of dig deeper into stuff that I normally don't ask about.

00:26:41.100 --> 00:26:47.100
Like, for instance, Julian Sequeira. Julian's a really pretty positive person.

00:26:47.100 --> 00:26:51.100
So I poked at that a bit and tried to ask him, like, really, how did you get this mindset?

00:26:51.100 --> 00:26:56.100
I mean, clearly bad stuff must happen to you. And so we talk about his, you know,

00:26:56.100 --> 00:27:01.100
how does he get through it and keep maintaining a positive mindset. So it's good.

00:27:01.100 --> 00:27:04.100
Anyway, what are your extras for us?

00:27:04.100 --> 00:27:09.100
>> Let's see if I can find them here. OK, page find. Yes, that's the first one, page find.

00:27:09.100 --> 00:27:13.100
So Brian, you and I, we both Hugo, right? >> Yeah.

00:27:13.100 --> 00:27:20.100
>> Hugo is awesome. Go Hugo for people who don't know. Go Hugo.io. That's right.

00:27:20.100 --> 00:27:27.100
Super, super cool way to build static websites, not just blogs, but static websites that are really, really powerful.

00:27:27.100 --> 00:27:34.100
And I learned about this one from Mark Little. He also does a ton of stuff with Hugo.

00:27:34.100 --> 00:27:39.100
He said, hey, you should check out page find. So what is this? I have no idea.

00:27:39.100 --> 00:27:47.100
So page find, this is not just a Hugo thing, but for all static sites, it's a fully static search library.

00:27:47.100 --> 00:27:53.100
So for static sites, whether this is Flask, Freeze or Hugo or Pelican or whatever,

00:27:53.100 --> 00:28:01.100
this is like a post build step thing that runs and it indexes all of your HTML or the parts that you tell it to index.

00:28:01.100 --> 00:28:05.100
Or tell it to, you know, you can basically say don't include this part or whatever.

00:28:05.100 --> 00:28:11.100
And it's no configuration. It has rich filtering. It has custom sorting attributes.

00:28:11.100 --> 00:28:19.100
And the way it structures, it's what it does basically is JavaScript and it has an index that then the JavaScript reads in.

00:28:19.100 --> 00:28:21.100
But the index is broken into a bunch of pieces.

00:28:21.100 --> 00:28:26.100
So the front end stuff can like pull just little bits of it and not pull all the results back basically. Right.

00:28:26.100 --> 00:28:34.100
So I added this over to my website where you're over here like Brian, we could see what I said about AI and check that out.

00:28:34.100 --> 00:28:38.100
Isn't that awesome? So it finds all the different things that we could be talking about.

00:28:38.100 --> 00:28:44.100
But it also like in my markdown, I have like H1, H2, H3.

00:28:44.100 --> 00:28:53.100
And it will actually subdivide the results into sections like what is in this section demarked by H2 on this one page.

00:28:53.100 --> 00:28:54.100
Oh, that's pretty cool.

00:28:54.100 --> 00:28:59.100
That's really cool. Right. And it also does things like, I don't know if I can see any examples here,

00:28:59.100 --> 00:29:05.100
but if you type Y-O, it'll do like you, yourself, etc.

00:29:05.100 --> 00:29:09.100
So it's not even just like exact word matching. It's like a really smart search engine.

00:29:09.100 --> 00:29:14.100
And all it takes is just running a script for like a couple of seconds after you build your static site

00:29:14.100 --> 00:29:19.100
and then dropping the output into like a known location. Is that cool or what?

00:29:19.100 --> 00:29:26.100
That's very cool. It's one of the issues I've had when switching to a static site is not knowing how to deal with the search part.

00:29:26.100 --> 00:29:29.100
Yeah. So I was psyched when Mark sent this over. I'm like, yes, this is going in.

00:29:29.100 --> 00:29:35.100
Yeah. The other part that I'm trying to figure out is how to get a decent contact form.

00:29:35.100 --> 00:29:38.100
So that's still to be determined.

00:29:38.100 --> 00:29:41.100
Yeah. I don't think page find is going to help with that, but this is cool. This is really cool.

00:29:41.100 --> 00:29:44.100
So I'll add it to my stuff too. Neat.

00:29:44.100 --> 00:29:50.100
It's incredibly fast. Like search for AI and I'm on like hotel Wi-Fi and it's nearly instant. Right.

00:29:50.100 --> 00:29:58.100
So that is super, super cool. There's a lot of sites, even static sites. So like searching, searching, you'll see the little spinner.

00:29:58.100 --> 00:30:02.100
You're like, what is it doing? Like, why is this search slow? No, it should be instant. Right.

00:30:02.100 --> 00:30:08.100
And that's very much in line with like plugging something like this into Hugo means like it's still instant.

00:30:08.100 --> 00:30:10.100
All right. I got a few more. Let's blaze them.

00:30:10.100 --> 00:30:16.100
Okay. This is not to encourage people like more of a just interesting. Hey, careful.

00:30:16.100 --> 00:30:21.100
We've got Pipey and PIP, the JavaScript world has NPM.

00:30:21.100 --> 00:30:28.100
There's an article called when everything becomes too much, the NPM package chaos of 2024.

00:30:28.100 --> 00:30:40.100
An NPM user named Patrick JS launched a troll campaign with a package called everything that depended on every NPM package there.

00:30:40.100 --> 00:30:46.100
So when you install it, it tries to install the millions of NPM packages.

00:30:46.100 --> 00:30:54.100
It destroyed it like because people were installing it and it was just taking too much resources and so on.

00:30:54.100 --> 00:30:58.100
So the follies of package management, how's that? Yeah. Nice.

00:30:58.100 --> 00:31:08.100
I'll get a little out of order here. So Matthew Fiker wanted us and we're happy to do so announce that the SciPy conference is coming.

00:31:08.100 --> 00:31:16.100
And we'll be in beautiful Tacoma, Washington this year. So if you're interested, check that out and put a link to that.

00:31:16.100 --> 00:31:24.100
And the last thing is I wrote an essay called unsolicited advice from Mozilla and Firefox about four things.

00:31:24.100 --> 00:31:35.100
I think three things I think they did wrong and four things I think they could do to like absolutely both change the way that the place of Firefox in the market.

00:31:35.100 --> 00:31:41.100
And alleviate their insane dependency on Google.

00:31:41.100 --> 00:31:46.100
Like not anti Google. I do stuff with Google. I love YouTube, things like that necessarily.

00:31:46.100 --> 00:31:53.100
But I don't think they're congruent with Firefox's focus on privacy very much.

00:31:53.100 --> 00:32:01.100
And also 95% of your company's revenue from one deal with one company that's kind of at a whim could just change their mind.

00:32:01.100 --> 00:32:08.100
That's not a great place to be. I'd like to see Firefox doing well. So I thought a lot about it and wrote about it, including they should just lie about their user agent.

00:32:08.100 --> 00:32:14.100
Right. Like when a website says this site runs best on Chrome and using this crappy old browser we don't know about.

00:32:14.100 --> 00:32:19.100
You know why you never see that on Vivaldi or Brave? Because their user agent is identical to Chrome.

00:32:19.100 --> 00:32:23.100
So when you get to the website like, oh, this is my favorite one. Perfect. We're good to go.

00:32:23.100 --> 00:32:29.100
Right. How many people leave Firefox because when they get to a site, it says this doesn't work well. You need to go get this other browser.

00:32:29.100 --> 00:32:34.100
It would stop saying that if Firefox just said, hey, we're Chrome. Things like that.

00:32:34.100 --> 00:32:42.100
And sure, it would hurt a little. It would hurt their pride. But people leave Firefox because the website will refuse to run.

00:32:42.100 --> 00:32:49.100
And it probably would work. But if it's going to refuse to work, then it's not going to work. Things like that.

00:32:49.100 --> 00:32:53.100
So anyway, this is I think is a really fun article. I had a lot of fun thinking about it. So people can check that out.

00:32:53.100 --> 00:33:03.100
And I think I don't dwell on this too much, but there are a lot of internal site stuff. So a lot of people do internal tools at companies.

00:33:03.100 --> 00:33:11.100
And they'll do that. It should use Chrome. And somebody will try it with Firefox and they'll be like, oh, it doesn't work.

00:33:11.100 --> 00:33:16.100
And it probably does. It just blocks it for the heck of it.

00:33:16.100 --> 00:33:20.100
Exactly. And no one's going to update that site. Right. It's just, yeah.

00:33:20.100 --> 00:33:30.100
Another thing that's just maybe interesting to put on people's radar is another thing a friend of mine co-founded, Wayne's, is this thing called Island.

00:33:30.100 --> 00:33:38.100
Which is like a enterprise browser meant just for giving enterprises super interesting control over things like that you were just talking about.

00:33:38.100 --> 00:33:42.100
So this is actually super interesting. One of the things I think Firefox could do, but also it's just really interesting.

00:33:42.100 --> 00:33:46.100
Island.io. People can check that out. Sounds weird. Like why would you ever want that?

00:33:46.100 --> 00:33:50.100
And then you watch the video or listen to it and you're like, actually, that's awesome. So.

00:33:50.100 --> 00:33:51.100
Okay.

00:33:51.100 --> 00:33:55.100
Like installed. All right. Shall we joke?

00:33:55.100 --> 00:33:56.100
Yeah, let's do a joke.

00:33:56.100 --> 00:34:01.100
All right. Well, this is a Linux joke. It's more than a Python joke, honestly.

00:34:01.100 --> 00:34:07.100
So, Brian, have you ever got a bike lock? One of those really combination lock for anything. But in this case, it's a bike lock, right?

00:34:07.100 --> 00:34:08.100
Okay.

00:34:08.100 --> 00:34:13.100
So here's a little character says, my new bicycle lock. Hmm. To keep my new bicycle secure.

00:34:13.100 --> 00:34:18.100
It has three digits. Let's see. So that's a thousand combinations of what we could have.

00:34:18.100 --> 00:34:23.100
And then they start to rule out where the ridiculous ones, right? Like one, two, three and stuff like, hmm.

00:34:23.100 --> 00:34:31.100
Nine, nine, eight, maybe. I am not silly enough to use six, six, six or seven, seven, seven to give full access to everyone.

00:34:31.100 --> 00:34:38.100
Change mod seven, seven, seven. Which gives it full access to the read/write access to whatever you change modded.

00:34:38.100 --> 00:34:40.100
That is funny.

00:34:40.100 --> 00:34:45.100
Yeah, it's pretty good. I mean, obviously you wouldn't use seven, seven, seven.

00:34:45.100 --> 00:34:55.100
I may be the wrong target market for this because it's sort of funny, but also I'm thinking, did bike locks really have three combinations, three numbers or were there four?

00:34:55.100 --> 00:35:00.100
You're being way too practical. Like four, six or something like that.

00:35:00.100 --> 00:35:05.100
I had a smartphone smart lock once and it was awesome. You would hold your phone up to it and it would unlock.

00:35:05.100 --> 00:35:10.100
I got it from my electric bike before my niece decided electric biking wasn't for me.

00:35:10.100 --> 00:35:21.100
And one time I was out biking with a friend and I parked it in the summer in the sun and like the electronics bit of it got direct sunlight and it's a black because it's a lock, right?

00:35:21.100 --> 00:35:27.100
Got super hot, like so hot you couldn't hardly touch it, but also so hot that like the electronics wouldn't run and I couldn't unlock it.

00:35:27.100 --> 00:35:30.100
I had to like put it in the shade for an hour before I could go home. I was so frustrated.

00:35:30.100 --> 00:35:34.100
I covered it with my shirt or something and just sat there until it cooled off so I could go home.

00:35:34.100 --> 00:35:49.100
Oh, that's, that's bad. And then also I've seen, like the, the combinations really kind of doesn't matter. It's how thick the rest of the lock is because I've seen people just come up with these, like a battery powered just cutters and just cut the lock off.

00:35:49.100 --> 00:36:00.100
Um, but yeah, exactly. It's probably not the combination, but if you do have one, don't use seven, seven, seven, because clearly that's gonna, I don't know, it'll just fall right off if you do that.

00:36:00.100 --> 00:36:04.100
Just go with one, two, three, four. So yeah, exactly.

00:36:04.100 --> 00:36:09.100
Anyway, well, thanks a lot. I hope you get power back at your house soon.

00:36:09.100 --> 00:36:16.100
Thanks. I hope so too. probably the, the power people said probably today, but never know. You never know.

00:36:16.100 --> 00:36:19.100
All right. Well, good to be here with you later. Bye.

00:36:19.100 --> 00:36:20.100
Yeah. Bye everyone. Bye.

