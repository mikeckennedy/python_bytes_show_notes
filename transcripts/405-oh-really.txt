00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 405, recorded October 14th, 2024.

00:00:09 And I'm Brian Aukin.

00:00:11 And I'm Michael Kennedy.

00:00:12 And this episode is sponsored by Scout APM.

00:00:15 Please listen to them, their segment later in the show.

00:00:18 And if you'd like to connect with us and ask us a question or submit an article,

00:00:22 you can find us on Mastodon, on Fosstodon.org.

00:00:27 We are at mkennedy, at Brian Aukin, and at Python Bytes.

00:00:30 And if you cc all three of us, it actually gets to us really a lot better.

00:00:34 Or you can email it to us.

00:00:36 There's a contact form on our website, pythonbytes.fm.

00:00:40 If you'd like to watch live, you can join us on YouTube and go to pythonbytes.fm slash live.

00:00:46 Be part of the audience or watch old episodes.

00:00:49 It's a lot of fun.

00:00:50 We love getting questions in the chat.

00:00:52 And also, finally, if you'd like to get all the links, just listen and enjoy the show while you're listening.

00:00:59 And then read the links later.

00:01:01 You don't have to write anything down.

00:01:03 Just join.

00:01:04 Go to pythonbytes.fm and get on our mailing list.

00:01:08 Go to Friends of the Show or just say sign up for Newsletter.

00:01:11 And we'll send you a weekly email with all the links and all the topics from the show.

00:01:16 So, to get started, Michael, that was a long intro.

00:01:21 Maybe it could be a little more brief with you.

00:01:23 I'm going to try.

00:01:24 I'm going to keep this one brief, okay?

00:01:25 Okay.

00:01:25 Briefer.

00:01:26 Let's talk about Briefer from Briefer Cloud.

00:01:28 So, this is new to me.

00:01:31 Obviously, 98.4%, according to the last survey, of our listeners know about Jupyter and Jupyter Notebooks.

00:01:38 Okay.

00:01:39 Right?

00:01:39 For those of you who don't, notebooks are a way to sort of explore data, mix in explanation graphics along with code and analysis.

00:01:47 And by far, Jupyter Notebooks are the most popular way to do notebook-type programming, but not the only way.

00:01:53 Right?

00:01:54 We've talked previously about Shiny for Python, which is a really cool option.

00:01:58 But today, I want to tell you about Briefer.

00:02:00 And my theory is the name comes from the thing that delivers a briefing because it's about not just exploratory data notebooks,

00:02:09 but it seems to be even a little more focused on delivering a dashboard experience that non-developers,

00:02:15 or at least not the person creating the thing, comes to look at.

00:02:18 They can just sort of explore it as an interactive webpage.

00:02:21 Okay?

00:02:21 Okay.

00:02:22 So, it is, I'll give you their little spiel.

00:02:26 It's dashboards and notebooks in a single place.

00:02:28 Create powerful and flexible dashboards using code, beautiful notion-like notebooks, and share them with your team.

00:02:34 And yeah, that pretty much sums it up.

00:02:36 So, I believe this used to be a commercial product.

00:02:40 Still is a commercial product, don't get me wrong.

00:02:41 It used to be exclusively a commercial project because they have a big banner at the top.

00:02:45 Briefer is now open source.

00:02:47 Go stars on GitHub.

00:02:48 And let's see how many people have.

00:02:49 3.3 thousand.

00:02:51 That's a respectable amount of traffic, right?

00:02:53 That's pretty good.

00:02:53 But if you go to their webpage at briefer.cloud, you can see a little bit more of like, what the heck is this thing about?

00:02:59 Okay.

00:03:00 So, multiplayer, as in multiple people can work on it.

00:03:03 And I think one of the things that's unique about this compared to, say, a Jupyter notebook.

00:03:07 So, for example, suppose I want to talk to a Postgres database or something like that as part of my data that I need to pull back.

00:03:17 Well, you've got to connect to Postgres in your notebook.

00:03:19 And you've got to put your password and your connection string in your notebook.

00:03:23 That's not, that's really ideal.

00:03:25 You might be able to pull in, I'm sure there's a way to pull in environment variables or something like that.

00:03:29 But it's not super easy, right?

00:03:31 So, one of the deals I think here is you connect a database and then you write Python and SQL to query the database and transform it into the right shape and filter it and so on.

00:03:41 And then you use this tool to create visualizations and dashboards and reports, data apps and so on out of it.

00:03:48 So, it's like you configure the system to know about your data connection.

00:03:53 And then just any notebook can talk to the database, something along those lines.

00:03:56 Obviously, that's not a totally universal use case, but that's the idea, okay?

00:04:01 And it also came out of Y Combinator.

00:04:04 Like I said, I think it was primarily just commercial at first and then expanded.

00:04:08 So, yeah, it says connect your data source, run some queries, run Python code using your query results as data frames and then share your results.

00:04:18 So, they've got some cool examples in here.

00:04:21 They have AI because Y Combinator and it has to, apparently.

00:04:25 But these are good looking things.

00:04:26 And then you can have notebook styles and you can create a dashboard where you put like different charts and stuff next to each other.

00:04:32 And then they're just web pages that people can check out.

00:04:35 This is pretty cool.

00:04:36 Pretty neat, right?

00:04:37 I like it.

00:04:37 Yeah, I mean, then you publish it to the web.

00:04:39 So, the thing to know is if you look at pricing, there's two options.

00:04:43 Paid and not paid, right?

00:04:44 So, open source, self-hosted, free, install it from GitHub, off to the races.

00:04:49 Then there's Community, which has a free one, a pro and enterprise.

00:04:52 This is not any sort of ad or anything, right?

00:04:53 But I do think the fact that it's open source and it has these cool features, sort of executable Python is pretty neat.

00:04:59 There's some more cool Python stuff about it here.

00:05:02 I can't remember where I was reading it.

00:05:05 Oh, yeah.

00:05:05 You can also put like little sliders and date pickers and stuff that will, as people interact with them, right?

00:05:11 It'll update what happens.

00:05:13 But you can also, somewhere along here, is it a schedule?

00:05:16 Yeah.

00:05:17 You can schedule your Python blocks to run on a recurring schedule.

00:05:20 So, if it's got to go, yeah, it's got to go pull, I don't know, daily information from some CSV source or who knows, right?

00:05:28 So, yeah.

00:05:29 Anyway, that's what I got.

00:05:31 People can check it out.

00:05:33 And if you're over here, of course, there is a dockercompose.yml.

00:05:38 So, if you're going to self-host it, you can just docker compose it to life.

00:05:41 Nice.

00:05:41 Well, I know that school started last month for most people.

00:05:48 It's been going on for a while, but it's still kind of near the beginning.

00:05:51 And I was thinking about students and thinking there's a lot of people learning some new web stuff.

00:05:56 And so, I picked a couple topics around learning new things.

00:06:00 And we're going to start with Python.

00:06:01 So, I got this from, I forgot his name already, Jose Blanca.

00:06:08 And I think he's the dude that wrote it.

00:06:10 That, yeah, it's an introduction to programming with Python, but it's all web-based.

00:06:16 I kind of, and it's kind of nice, all web-based.

00:06:20 And it's just a free kind of a basic intro.

00:06:25 And I think it'll be more than enough for a lot of people to get started on there, like they're taking some programming course or need to know a little Python for a course or something or a new project.

00:06:34 So, why, there's a few things that I like about it.

00:06:38 One of them is it's not a complete overview.

00:06:40 It does not try, it says, it doesn't try to cover all every detail of Python language, just what a beginner might need to start the journey.

00:06:47 And I know there's a lot of great training tutorials, especially over maybe at Talk Python training to get started.

00:06:53 But if all you got is no money and a web connection, I think this is maybe something to check out.

00:07:03 I want to point out a couple other features.

00:07:06 It's running, if we scroll to the bottom, it's running Corto, which I think we've covered this, Corto Publishing System.

00:07:16 I believe that we have.

00:07:17 Yeah, that comes from the Shiny folks as well.

00:07:20 Some people who make Shiny for Python that I mentioned before.

00:07:23 Well, it's based on that with a Corto Live extension that allows Python to run in the browser using Pyodide.

00:07:30 And at the bottom, we can see a GitHub link.

00:07:33 So, this whole thing is open source.

00:07:35 That's the kind of thing that is intriguing to me.

00:07:38 The whole project's open source.

00:07:40 So, if you wanted to have an internal training for your company or for your own individual teachers, wanted to customize this for your own class, you could fork this and do your own thing.

00:07:52 Which is, I kind of love that.

00:07:54 And I was curious about what it's running.

00:08:00 So, I went over and I looked at the Hello World.

00:08:04 So, we go to Hello World.

00:08:06 There's a...

00:08:08 It's the first time you get to actually play with the code.

00:08:10 And there's these, like...

00:08:12 Because it's Pyodide, there's the...

00:08:13 You're reading about Python and then there's these little code run blocks.

00:08:17 And you can just run stuff.

00:08:19 But...

00:08:19 And then you can start over and do it again.

00:08:21 But you can also just blop some new stuff in there.

00:08:24 So, I just blopped import sys, print sys version to see what Python version it was running.

00:08:30 And it's running 3.12.1.

00:08:33 I was...

00:08:35 I guess I would have been surprised if it was already running 3.13.

00:08:38 But 3.12.1's a bit...

00:08:42 I kind of expected something a little newer than that.

00:08:44 Anyway, it's still pretty...

00:08:46 It's better than 3.8, everybody.

00:08:48 But, yeah.

00:08:49 3.12.1, not bad.

00:08:51 So, just to be able to just sort of run a few things.

00:08:55 So, what all has it got in it?

00:08:56 Let's...

00:08:57 If we go to the intro, there's a...

00:08:59 I forget what I was reading.

00:09:02 Never mind.

00:09:03 It just...

00:09:06 Python's used everywhere.

00:09:07 We love Python.

00:09:07 And if you're...

00:09:09 If some of the courses are out of reach for you, or if you'd like to have something to...

00:09:13 On the go, this might be something to look for.

00:09:15 Or especially...

00:09:16 The real thing I was thinking is people, like teachers, trying to customize their own

00:09:20 introduction or different things that they're trying to teach using Pyodide.

00:09:24 This is a good example.

00:09:25 It's all in the...

00:09:26 If you don't want to start with, let's begin with what a virtual environment is and your

00:09:29 path and that kind of stuff.

00:09:30 Yeah.

00:09:31 Well, that...

00:09:32 And also, just if you'd like to write your own online tutorial book for a particular topic

00:09:39 that you're covering.

00:09:41 I was thinking, seeing if I could do some of this stuff for testing concepts.

00:09:45 That'd be kind of fun.

00:09:47 Yeah.

00:09:47 I'll tell you, I know some folks that do research and work with teachers, like middle school teacher

00:09:53 type folks.

00:09:55 And they were choosing some kind of programming language to work with with their students.

00:10:00 And they decided, they're like, oh, we should use R because R will install on Chromebooks more

00:10:06 easily than Python.

00:10:07 By the way, I said, no, no, that's actually...

00:10:09 You can install them both.

00:10:10 However, if you're using iPads for school or Chromebooks, your web browser works just fine.

00:10:16 Right?

00:10:17 Yeah.

00:10:17 With something like this.

00:10:18 It's a really good option.

00:10:18 Yeah, exactly.

00:10:19 Or a lot of other new platforms.

00:10:21 And these...

00:10:22 So we'll see more of this stuff coming along, I think.

00:10:25 So it's good.

00:10:27 We absolutely will.

00:10:28 Very cool.

00:10:29 Let me tell you real quick about Scout APM.

00:10:33 They're big supporters of Python Bytes.

00:10:35 So we appreciate that very much.

00:10:37 So if you are tired of spending hours trying to find the root cause of issues impacting your

00:10:42 performance, then you owe it to yourself to check out Scout APM.

00:10:46 They're a leading Python application performance monitoring tool, APM, that helps you identify

00:10:52 and solve performance abnormalities faster and easier.

00:10:55 Scout APM ties bottlenecks such as memory leaks, slow database queries, background jobs, and the

00:11:00 dreaded N plus one queries that you can end up if you do lazy loading in your ORM.

00:11:06 And then you say, oh, no.

00:11:06 Why is it so slow?

00:11:08 Why are you doing 200 database queries for what should be one?

00:11:10 So you can find out things like that.

00:11:12 And it links it back directly to source code so you can spend less time in the debugger and

00:11:16 healing logs and just finding the problems and moving on.

00:11:19 And you'll love it because it's built for developers by developers.

00:11:22 It makes it easy to get set up.

00:11:23 Seriously, you can do it in less than four minutes.

00:11:26 So that's awesome.

00:11:27 And the best part is the pricing is straightforward.

00:11:30 You only pay for the data that you use with no hidden overage fees or per seat pricing.

00:11:35 And I just learned this, Brian.

00:11:38 They also have they provide the pro version for free to all open source projects.

00:11:43 So if you're an open source maintainer and you want to have Scout APM for that project,

00:11:47 just shoot them a message or something on their pricing page about that.

00:11:50 So you can start your free trial and get instant insights today.

00:11:54 Visit pythonbytes.fm slash Scout.

00:11:57 The link is in your podcast player show notes as well.

00:11:59 And please use that link.

00:12:00 Don't just search for them because otherwise they don't think you came from us.

00:12:04 And then they'd stop supporting the show.

00:12:06 So please use our link pythonbytes.fm slash Scout.

00:12:08 Check them out.

00:12:09 It really supports the show.

00:12:11 So remember I talked about trying to be more efficient on PyPI.org and not just especially

00:12:19 under Docker and containers, not just blasting it every time like, hey, my requirements are

00:12:25 my PyProject.tomla or whatever results in 200 dependencies downloaded.

00:12:30 And let's start fresh every time I do a build to run a PR test or something along those lines.

00:12:36 And I wrote that article on my website that talked about several different things.

00:12:41 How do you install Python using UV?

00:12:43 How do you make, how can you set up caching both for pip and for UV to make that better?

00:12:48 And we both said, well, GitHub is probably the most, probably the worst of all of these things.

00:12:55 And I think you even mentioned that.

00:12:56 Wouldn't it be awesome if GitHub would actually just realize, oh, you're getting something from

00:13:00 PyPI out of CI.

00:13:02 Let's just give you the one we got like the other half a million times today.

00:13:06 Or whatever, right?

00:13:07 Yeah.

00:13:07 So all of those statements remain true and valid.

00:13:11 And I definitely encourage people to check that out because I feel like we could just do

00:13:15 a lot better and not just destroy PyPI in terms of traffic and financial bandwidth.

00:13:20 But what I wanted to bring up was someone in the audience.

00:13:23 I think it was Henry Schreiner, but I'm not 100% sure, pointed out that there's this thing

00:13:28 called setup-uv.

00:13:30 I'd never heard of it.

00:13:31 Mostly I don't do much with CI, GitHub CI, that kind of things.

00:13:37 Personally, it just, I don't know, it just doesn't fit into my life.

00:13:39 It's not a requirement I got to do a lot.

00:13:41 So I just don't play with GitHub Actions that much.

00:13:43 But this is a GitHub Action.

00:13:45 If you go to the repo I'm linking to, it says, use this GitHub Action with your project.

00:13:50 Click here.

00:13:50 But the idea is it will set up a GitHub Action workflow for both installing a specific version

00:13:56 of UV, managing the UV version, and managing the caching of all the things it downloads.

00:14:01 Isn't that cool?

00:14:02 Oh, that's very cool.

00:14:03 Yeah, exactly.

00:14:04 So it says it will install a version of UV and add it to your path.

00:14:09 Thank you.

00:14:09 That's handy.

00:14:10 Cache the installed version of UV to speed up consecutive runs on self-hosted runners.

00:14:16 That's kind of nice.

00:14:18 It'll potentially, optionally persist the UV cache in the GitHub Actions cache.

00:14:24 That's what I'm talking about, where you can get it to say the second time your CI runs,

00:14:28 if it's still the same requirements.

00:14:30 Both, this is good on PyPI.

00:14:32 I mean, gentle and kind to PyPI.

00:14:34 But it also means that it's faster.

00:14:37 If there's some kind of source distribution that has to do an install or something like that,

00:14:42 some of these dependencies are slow to install if they got to compile.

00:14:45 But once they're cached, they're super fast.

00:14:47 So this will make your PRs and all of your CI just run faster.

00:14:51 So I think that's great.

00:14:52 And then there's some other checks.

00:14:54 But you can come down and basically specify a particular version.

00:14:58 You can pin it to a, what is that, a minor version?

00:15:01 Like a 0.3, whatever latest.

00:15:03 You can have checksums.

00:15:05 And you can even set up caching with your GitHub Actions.

00:15:08 So that's about all I know about this.

00:15:10 But I know people who do a lot with GitHub Actions, they'll probably be able to take this and run with it.

00:15:14 And I'm with Rhett.

00:15:17 Rhett Turnbull says, I haven't tried UV yet primarily because I didn't want to mess with uploading GitHub Actions.

00:15:23 This will be very handy.

00:15:24 I have been using UV, but I haven't added it to any of my GitHub Action other projects.

00:15:31 So, yeah, I'm definitely going to check this out.

00:15:33 Awesome.

00:15:33 Hey, Rhett.

00:15:34 I'm glad to hear you like it.

00:15:36 Okay.

00:15:38 The last topic I've got is I was thinking, again, on the people kind of starting things new, maybe possibly students, is learning some HTML.

00:15:50 And especially, I was, this is nice.

00:15:55 I wanted to highlight HTML4people.com.

00:15:58 And it's nice.

00:16:00 Just sort of an online book.

00:16:01 And I just noticed that the phone on the, there's a great image on the front.

00:16:06 The phone on the desk is at, the time is 404.

00:16:11 Nice.

00:16:11 I think that's funny.

00:16:12 Although they should have made it 2 o'clock for 200 okay.

00:16:15 I mean, you want to start out on a positive note.

00:16:17 Yeah.

00:16:18 But that's really clever.

00:16:19 I like it.

00:16:20 But it's just a really well-written website.

00:16:25 And it's really clean looking.

00:16:28 But I was looking through the introduction and really kind of reminded me how I learned HTML.

00:16:34 So I learned HTML way like back in the old days, in the 90s.

00:16:40 And we didn't have a lot.

00:16:42 There were some HTML generators, but we just wanted to, I wrote most of my HTML by hand, just in a BI or something.

00:16:49 And probably Emacs at the time.

00:16:52 But anyway.

00:16:53 So this walks through actually building a website.

00:16:57 Like it walks through doing a website, adding content.

00:17:01 It does talk about maybe using a better text editor.

00:17:05 If you're just using just a basic text editor, there are better ones.

00:17:10 Talking about style, adding an about page, a blog, a resume.

00:17:14 Some great stuff for especially college students to kind of do something nice.

00:17:19 In raw HTML as a website.

00:17:21 There's even some bonus chapters on it had some simple CSS that it was including, but basically customizing the CSS that was included in the course.

00:17:34 And then also covering some CSS basics.

00:17:36 Because that isn't new since when I was back in the 90s writing HTML.

00:17:42 No CSS there.

00:17:43 But now it's essential that you learn at least a little bit of CSS along with your HTML.

00:17:49 And maybe you're not going to write a pure HTML website.

00:17:52 But especially with things like static generators or templates, there's a lot of HTML we still write, even if you're not writing raw HTML web pages.

00:18:01 So going through a tutorial that just talks about the basics of HTML, I think it's a great way to get started.

00:18:09 Yeah.

00:18:09 So I love it.

00:18:11 And that's great.

00:18:11 It's got a little bit of a hat tip to Kenneth Wright.

00:18:14 Although I don't know if there's any connection, but you know, for humans sort of thing.

00:18:17 I noticed that if you go to the bottom, you have GitHub stuff for finding, for getting the source code.

00:18:25 And if you need it offline and stuff like that.

00:18:27 Yeah.

00:18:27 Oh, cool.

00:18:28 That's neat.

00:18:28 And it's got a Creative Commons license.

00:18:31 Oh, interesting.

00:18:32 Yeah.

00:18:32 Non-commercial.

00:18:33 Attribution non-commercial share like 4.0 international license.

00:18:36 It's one of the longer Creative Commons licenses I've seen, but very nice.

00:18:39 Yeah.

00:18:39 Cool.

00:18:42 CC by NCSA 4.0.

00:18:44 I'll have to look at that one.

00:18:45 I don't exactly know what all that is.

00:18:47 Yeah.

00:18:48 Yeah.

00:18:49 Anyway.

00:18:51 Right.

00:18:51 I love it.

00:18:52 That's a good one.

00:18:53 Extras?

00:18:53 Extras, extras.

00:18:54 I don't have any extras.

00:18:56 Do you have any extras?

00:18:57 Just a couple of real quick things.

00:18:59 So, last time, I think it was last time, recently we spoke about something we must replace.

00:19:03 MicroWizGoo is something else.

00:19:04 And I just wrote down some thoughts and some links and some alternatives on my blog about that.

00:19:09 So, people can check that out if they're interested.

00:19:11 That's a brilliant idea.

00:19:13 Some of the stuff that we talk about on this episode, or this podcast, we could write blog

00:19:17 posts about some of them.

00:19:18 Yeah.

00:19:18 Sometimes I just want to shine a light on something.

00:19:21 And we did that depending on the podcast.

00:19:22 But, you know, the entire world doesn't necessarily listen.

00:19:26 They should, but they don't.

00:19:27 Really?

00:19:27 I know.

00:19:28 It's so odd, Brian.

00:19:29 I did meet somebody once who didn't listen to the show.

00:19:32 Okay.

00:19:32 Well, I know you got something else, but I wanted to say, you could be a good friend to all of

00:19:39 the rest of your friends if you share this podcast with them.

00:19:42 Yes, absolutely.

00:19:44 Absolutely.

00:19:44 All right.

00:19:45 So, people can check that out if they want to follow up on that.

00:19:48 Also, I want to give a shout out to Carlton Gibson.

00:19:52 He's one of the co-hosts for Django Chat, but that's not why I'm shouting him out.

00:19:56 I am because he created an extension for Django.

00:19:59 Django, you knew a unique user email.

00:20:02 So, by default, the Django user model, I believe, requires you to have a username in addition

00:20:08 to your email.

00:20:09 And it's the username that's unique, not the email that's unique, which is kind of weird.

00:20:13 Anyway, Carlton fixed it.

00:20:17 So, there, I fixed it.

00:20:18 And it created this login by email with your default user model for Django by making auth.user.email,

00:20:25 the database deal unique with a key constraint.

00:20:28 So, anyway, not a whole lot to add to that, but, you know, it's got steps on how to install

00:20:33 it as a Django app and make it go.

00:20:36 But I think this kind of feels like it should have been there all the time.

00:20:38 So, well done.

00:20:39 Seems required.

00:20:40 Certainly.

00:20:41 Certainly does.

00:20:42 You know what else is required?

00:20:43 What?

00:20:44 A joke.

00:20:45 Yes.

00:20:45 Let's do it.

00:20:46 Now, this one is kind of a choose your own joke.

00:20:48 I didn't pick ahead, but what I found is a source of many jokes that I can foresee coming

00:20:54 at some point here, Brian.

00:20:55 Okay.

00:20:56 I found the practical dev on GitHub has created an O'Reilly full res covers for a whole bunch

00:21:03 of O'Reillys.

00:21:04 You know what these are, right?

00:21:05 Yeah.

00:21:05 They're like mock, like fake O'Reilly books.

00:21:08 Exactly.

00:21:09 Exactly.

00:21:10 So, let's check out the ignoring deprecation warnings one.

00:21:13 See what that one's like.

00:21:15 So, maybe they'll just go away on their own.

00:21:20 It's a sleeping cat that says ignore deprecation warnings.

00:21:23 Nice.

00:21:24 What do you think?

00:21:25 That one's pretty good, right?

00:21:26 I like it.

00:21:27 Yeah.

00:21:27 Plus, I like cats.

00:21:28 I do.

00:21:29 Cats are nice.

00:21:29 I'll see if I can find.

00:21:30 What about this one?

00:21:31 This one says, is that a camel, I think?

00:21:35 Does it run?

00:21:36 Just leave it alone.

00:21:37 Writing code that nobody else can read.

00:21:41 The definitive guide.

00:21:42 Oh, really?

00:21:42 Oh, funny.

00:21:45 And the definitive pearl book had a camel on the front.

00:21:50 Right.

00:21:51 Let's see.

00:21:51 I'll find.

00:21:52 I'll find.

00:21:52 Oh, how about the big regex by trial and error?

00:21:55 I click this button doesn't give me the full view.

00:21:58 Nope.

00:21:58 Okay.

00:21:59 So, this one is combining slashes and dots until a thing happens.

00:22:03 Expert.

00:22:05 Regex by trial and error with a very curious giraffe peeking around the corner.

00:22:09 Adding slashes and dots.

00:22:11 Yeah.

00:22:11 Until something happens.

00:22:13 All right.

00:22:13 Well, that's what I got for you.

00:22:14 You all can poke around in there.

00:22:15 Maybe we'll come back some other time in the future and grab a few more good ones.

00:22:18 Buzzword.

00:22:19 Like, buzzword first.

00:22:21 I mean, that's buzzword first development.

00:22:23 Fashion forward development.

00:22:25 Buzzword first design.

00:22:26 I love it.

00:22:27 That reminds me of design by, or is it resume driven design?

00:22:33 Yeah, that's it.

00:22:33 There you go.

00:22:34 That's right.

00:22:35 So, nice.

00:22:36 Well, good jokes and good talking with you.

00:22:38 Yes, as always.

00:22:40 Talk to you later.

00:22:41 Yeah.

00:22:41 See you later.

