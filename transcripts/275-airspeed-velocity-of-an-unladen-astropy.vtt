
00:00:00.000 --> 00:00:05.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:06.500 --> 00:00:10.880
This is episode 275, recorded March 15th.


00:00:10.880 --> 00:00:12.200
And I am Brian Okken.


00:00:12.200 --> 00:00:13.760
I am Michael Kennedy.


00:00:13.760 --> 00:00:14.760
And I'm Emily Morehouse.


00:00:14.760 --> 00:00:17.440
Yay, thanks for coming.


00:00:17.440 --> 00:00:23.920
I also want to thank, give a shout out to Microsoft for Startup Founders Hub, and we'll


00:00:23.920 --> 00:00:26.160
learn more about them later in the show.


00:00:26.160 --> 00:00:28.040
So welcome, Emily.


00:00:28.040 --> 00:00:31.100
if people aren't familiar with who you are, who are you?


00:00:31.100 --> 00:00:32.040
- Yeah, of course.


00:00:32.040 --> 00:00:34.800
So I'm Emily, I am the Director of Engineering


00:00:34.800 --> 00:00:37.200
and one of the co-founders of CuddleSoft.


00:00:37.200 --> 00:00:39.800
So we are a creative product development agency


00:00:39.800 --> 00:00:43.880
focused on web, mobile, IoT, and the cloud.


00:00:43.880 --> 00:00:46.600
I'm also a Python core developer


00:00:46.600 --> 00:00:49.880
and the PyCon conference chair for this year.


00:00:49.880 --> 00:00:50.720
- Awesome.


00:00:50.720 --> 00:00:51.540
- That is awesome.


00:00:51.540 --> 00:00:53.800
Said another way, you're quite busy.


00:00:53.800 --> 00:00:55.380
- Yeah, I also have a 10 month old,


00:00:55.380 --> 00:00:57.760
so not a lot going on in my life.


00:00:57.760 --> 00:01:00.520
- Yeah, no, a lot of time to binge watch Netflix.


00:01:00.520 --> 00:01:01.360
- 10 months.


00:01:01.360 --> 00:01:05.600
- So are you pretty busy for PyCon already?


00:01:05.600 --> 00:01:07.800
- So interestingly enough, this is kind of a time


00:01:07.800 --> 00:01:09.720
that goes into autopilot in a way,


00:01:09.720 --> 00:01:12.040
you know, like most things are already set in motion


00:01:12.040 --> 00:01:13.160
that need to be set in motion.


00:01:13.160 --> 00:01:16.680
So it's really, we're working on the fun stuff right now,


00:01:16.680 --> 00:01:20.000
like, you know, speaker and staff gifts and stuff like that.


00:01:20.000 --> 00:01:22.720
But otherwise it's pretty smooth sailing


00:01:22.720 --> 00:01:25.560
and just sitting back and watching COVID numbers


00:01:25.560 --> 00:01:28.760
and hoping that we don't get another spike before April 9th.


00:01:28.760 --> 00:01:30.800
- Yeah, fingers crossed.


00:01:30.800 --> 00:01:34.240
This'll be the first PyCon after COVID hit.


00:01:34.240 --> 00:01:35.720
So hopefully everything goes great.


00:01:35.720 --> 00:01:36.720
I know people are excited.


00:01:36.720 --> 00:01:37.720
- Yeah. - Yeah.


00:01:37.720 --> 00:01:39.040
- Well, Brian, do I have the first one?


00:01:39.040 --> 00:01:39.880
- You do. - Do we have to wait?


00:01:39.880 --> 00:01:42.480
Do we have to wait for me or can I talk about this?


00:01:42.480 --> 00:01:44.320
- Yeah, so I'll wait.


00:01:44.320 --> 00:01:46.480
- Well, let's, oh, wait.


00:01:46.480 --> 00:01:47.980
I'm very excited to talk about this one, actually.


00:01:47.980 --> 00:01:50.340
This one comes from Frederick Averpill.


00:01:50.340 --> 00:01:51.700
I believe listens to the show a lot.


00:01:51.700 --> 00:01:54.240
So hello, Frederick, nice work on this.


00:01:54.240 --> 00:01:58.200
I was working on the Python Bytes website of all things,


00:01:58.200 --> 00:02:01.400
and I wanted to do some stuff with like uploading MP3s


00:02:01.400 --> 00:02:04.940
and having a bunch of automation happen behind the scenes.


00:02:04.940 --> 00:02:07.760
And one of the things I did not too long ago


00:02:07.760 --> 00:02:10.100
is switch over to an async database.


00:02:10.100 --> 00:02:11.720
I think we talked about moving to Beanie


00:02:11.720 --> 00:02:12.960
and some of the cool stuff I'm doing


00:02:12.960 --> 00:02:15.520
to like halfway move to async, but not all the way yet,


00:02:15.520 --> 00:02:17.520
not till we're quite ready.


00:02:17.520 --> 00:02:20.420
But as part of that, I'm like, well, all this file stuff,


00:02:20.420 --> 00:02:22.860
this is kind of slow, like this is a couple of seconds.


00:02:22.860 --> 00:02:26.140
is there a way to sort of set the web server free


00:02:26.140 --> 00:02:28.420
while we're doing this work, right?


00:02:28.420 --> 00:02:31.620
And some of that involved calling subprocesses.


00:02:31.620 --> 00:02:35.720
I thought, well, maybe there's some third-party package


00:02:35.720 --> 00:02:39.100
like AIO files that I could use


00:02:39.100 --> 00:02:41.700
that would allow me to asynchronously do subprocesses


00:02:41.700 --> 00:02:43.700
instead of the subprocess module.


00:02:43.700 --> 00:02:44.940
So I did a quick Google search


00:02:44.940 --> 00:02:46.940
and I came across Frederick's article here


00:02:46.940 --> 00:02:48.500
and much to my surprise,


00:02:48.500 --> 00:02:49.940
I don't know if you all are aware of this,


00:02:49.940 --> 00:02:54.940
but built in asyncio has async subprocess management already.


00:02:54.940 --> 00:02:56.740
- That's pretty cool. - Isn't that cool?


00:02:56.740 --> 00:02:58.100
- Yeah. - Yeah.


00:02:58.100 --> 00:03:00.260
Emily, have you played with this any?


00:03:00.260 --> 00:03:02.380
- Yeah, you know, I actually think I've used


00:03:02.380 --> 00:03:04.780
this exact blog post, which is super funny.


00:03:04.780 --> 00:03:07.500
I was actually just recently writing


00:03:07.500 --> 00:03:11.260
like CLI regression test and pytest.


00:03:11.260 --> 00:03:14.460
And you basically like test running two different servers.


00:03:14.460 --> 00:03:17.700
And I was like fighting with subprocess to get it to work.


00:03:17.700 --> 00:03:19.980
I don't think they were using a new enough version


00:03:19.980 --> 00:03:21.340
that I could use async await,


00:03:21.340 --> 00:03:23.100
but I definitely remember referencing this.


00:03:23.100 --> 00:03:24.100
So, yeah.


00:03:24.100 --> 00:03:25.400
- Yeah, very cool.


00:03:25.400 --> 00:03:27.900
So you can just say async io, the module,


00:03:27.900 --> 00:03:31.760
dot create subprocess exec for just running it.


00:03:31.760 --> 00:03:34.860
Or if you need to sort of follow along


00:03:34.860 --> 00:03:35.980
and see what's going on,


00:03:35.980 --> 00:03:38.620
you can use even the shell one that requires shell commands,


00:03:38.620 --> 00:03:41.760
like a CD or an LS type of thing.


00:03:41.760 --> 00:03:45.300
And then you could just grab the standard out


00:03:45.300 --> 00:03:50.100
from set that to be async.io subprocess.pipe and so on,


00:03:50.100 --> 00:03:51.740
you can get the results out of it and everything.


00:03:51.740 --> 00:03:54.740
So you just do things like await,


00:03:54.740 --> 00:03:58.980
creating a subprocess with a shell or execing it and so on.


00:03:58.980 --> 00:04:01.260
Then you can await communicating with it,


00:04:01.260 --> 00:04:03.940
which I think is pretty cool and so on.


00:04:03.940 --> 00:04:06.480
So not a whole lot more to say than other than


00:04:06.480 --> 00:04:08.340
if you're doing stuff with subprocess


00:04:08.340 --> 00:04:11.440
and you're moving already into other areas


00:04:11.440 --> 00:04:13.940
where async and await are very doable,


00:04:13.940 --> 00:04:18.940
Think FastAPI, SQL model, the SQLAlchemy 1.4 or later,


00:04:18.940 --> 00:04:22.460
where you're already doing a bunch of other async stuff,


00:04:22.460 --> 00:04:24.340
go ahead and write this in the async way


00:04:24.340 --> 00:04:27.140
so it just sort of flows into the rest of what you're doing.


00:04:27.140 --> 00:04:28.540
- That's pretty cool.


00:04:28.540 --> 00:04:33.140
This is from like 2017, it's an older article, isn't it?


00:04:33.140 --> 00:04:34.540
- Yeah, it looks like it, yeah.


00:04:34.540 --> 00:04:35.820
- Yeah.


00:04:35.820 --> 00:04:37.820
- It's news to me, maybe not news to the world.


00:04:37.820 --> 00:04:40.660
Like Emily said, she was already working with it


00:04:40.660 --> 00:04:42.180
previously, but yeah, I think it's great.


00:04:42.180 --> 00:04:48.340
>> Right. Well, the Subprocess Communicate is people often shifted over to just run.


00:04:48.340 --> 00:04:51.580
I'm hoping there's a run version of that too.


00:04:51.580 --> 00:04:53.340
>> Yeah, probably is.


00:04:53.340 --> 00:04:54.820
>> Anyway, cool.


00:04:54.820 --> 00:04:58.420
>> Indeed. All right. Well, I'm going to explain some stuff to us, Brian.


00:04:58.420 --> 00:04:59.100
>> I must.


00:04:59.100 --> 00:05:03.020
>> I see the author of what you're about to talk about out in the audience as well.


00:05:03.020 --> 00:05:05.540
>> Really? That's very cool.


00:05:05.540 --> 00:05:06.540
Well, this is pretty fun.


00:05:06.540 --> 00:05:07.620
>> Definitely an exciting one.


00:05:07.620 --> 00:05:11.980
>> Yeah. This is TypeSplainer and let me explain it to you.


00:05:11.980 --> 00:05:16.220
So I don't know, it's just this cool thing.


00:05:16.220 --> 00:05:17.340
It popped up last week.


00:05:17.340 --> 00:05:18.580
We saw it.


00:05:18.580 --> 00:05:21.620
This is from Arian, sorry,


00:05:21.620 --> 00:05:23.700
Arian Malik Wasi.


00:05:23.700 --> 00:05:26.380
It's a pretty cool name by the way.


00:05:26.380 --> 00:05:32.020
But so this is this little neat Heroku app that has,


00:05:32.020 --> 00:05:33.660
it's pretty simple.


00:05:33.660 --> 00:05:36.020
Well, I don't know how simple it is behind the scenes,


00:05:36.020 --> 00:05:38.420
but to use it's very simple.


00:05:38.420 --> 00:05:43.420
you pop in any sort of Python code that has type hints in it.


00:05:43.420 --> 00:05:45.380
And so this one has, like, for instance,


00:05:45.380 --> 00:05:47.740
we've got an example up that the default


00:05:47.740 --> 00:05:51.420
with like a callable that takes a std and an int


00:05:51.420 --> 00:05:53.040
and a generator.


00:05:53.040 --> 00:05:56.340
And yeah, so there's a bunch of type hints in here.


00:05:56.340 --> 00:05:59.300
This is even like kind of more than most people use


00:05:59.300 --> 00:06:02.180
all the time, but, and then you hit typesplain


00:06:02.180 --> 00:06:06.440
and it will show you what the different type hints mean


00:06:06.440 --> 00:06:09.880
and translate them into English for you.


00:06:09.880 --> 00:06:14.520
It's just pretty cool. I like it.


00:06:14.520 --> 00:06:19.600
One of the things that Wasi said that he was also,


00:06:19.600 --> 00:06:20.800
when he was developing this,


00:06:20.800 --> 00:06:26.640
he was on his way to developing a Visual Studio Code plugin.


00:06:26.640 --> 00:06:31.320
If you search for TypeSplainer as a VS Code plugin,


00:06:31.320 --> 00:06:36.080
that functionality is available to you right in your editor as well.


00:06:36.080 --> 00:06:37.160
This is pretty neat.


00:06:37.160 --> 00:06:39.660
>> Yeah, this is really cool. This explanation you have there,


00:06:39.660 --> 00:06:42.700
like dictionary of list of set of frozen set of it.


00:06:42.700 --> 00:06:46.100
Like, oh my gosh, the description is something like


00:06:46.100 --> 00:06:48.700
a dictionary that maps a list of sets,


00:06:48.700 --> 00:06:50.680
of frozen sets of integers onto a string.


00:06:50.680 --> 00:06:54.800
That's way more legible and internalizable than.


00:06:54.800 --> 00:06:55.460
>> Yeah.


00:06:55.460 --> 00:06:57.060
>> How many brackets deeper we were?


00:06:57.060 --> 00:07:00.820
Four brackets deep in that type information there?


00:07:00.820 --> 00:07:04.980
>> Yeah. It's interesting on Twitter with the announcement of it,


00:07:04.980 --> 00:07:09.060
or we heard about it through Will McGugan,


00:07:09.060 --> 00:07:10.900
or at least I did.


00:07:10.900 --> 00:07:14.860
Some of the comments were like,


00:07:14.860 --> 00:07:16.500
not that this isn't cool,


00:07:16.500 --> 00:07:18.020
it was like, "Oh, yeah, this is cool."


00:07:18.020 --> 00:07:19.580
But maybe Python shouldn't be


00:07:19.580 --> 00:07:22.380
this complicated if you have to explain it.


00:07:22.380 --> 00:07:24.860
>> Have these people done C++?


00:07:24.860 --> 00:07:25.780
Let me just ask them.


00:07:25.780 --> 00:07:30.260
>> I know. You don't have to use types if you don't want to,


00:07:30.260 --> 00:07:33.500
but there's a lot of places where types are helping out a lot.


00:07:33.500 --> 00:07:36.480
If you're running into somebody else's code that has


00:07:36.480 --> 00:07:39.460
some types on there that you're not quite sure what that's going on,


00:07:39.460 --> 00:07:43.280
throw it in TypeSplainer and you'll be able to figure it out.


00:07:43.280 --> 00:07:44.880
>> Absolutely.


00:07:44.880 --> 00:07:46.900
>> Yeah, and I did actually take a look.


00:07:46.900 --> 00:07:47.200
>> Emily, what do you think about this?


00:07:47.200 --> 00:07:50.080
>> I think this is awesome. I absolutely agree.


00:07:50.080 --> 00:07:53.180
mypy has allowed us to do gradual typing and all that,


00:07:53.180 --> 00:07:56.440
but a lot of times you do jump into somebody else's code base and you're like,


00:07:56.440 --> 00:07:58.800
"Whoa, these are more types than I've ever seen."


00:07:58.800 --> 00:08:02.120
Being able to convert it really easily is nice.


00:08:02.120 --> 00:08:05.800
And I did actually take a look at how it works under the hood.


00:08:05.800 --> 00:08:11.480
There's a really big if statement of like serialization, but then it also, I'm a nerd


00:08:11.480 --> 00:08:14.320
for anything AST related.


00:08:14.320 --> 00:08:19.580
And so it uses like the mypyparse under the hood, which is actually relatively complex


00:08:19.580 --> 00:08:23.600
for what it needs to handle based on, you know, different Python versions and whatnot.


00:08:23.600 --> 00:08:25.080
Wow, that's pretty awesome.


00:08:25.080 --> 00:08:30.280
Yeah, the very first time you were on talkbythenomy was to talk about the AST, the abstract syntax


00:08:30.280 --> 00:08:31.280
tree, right?


00:08:31.280 --> 00:08:35.480
It was right around my first conference talk back in the day.


00:08:35.480 --> 00:08:37.400
>> Yeah, awesome. Way back in the day.


00:08:37.400 --> 00:08:39.320
I think we met in Vancouver to set that up.


00:08:39.320 --> 00:08:41.520
When you were up, we met at PyCascades there.


00:08:41.520 --> 00:08:44.240
>> I generally think of myself as a smart person,


00:08:44.240 --> 00:08:48.560
but people that can handle doing AST work in Python,


00:08:48.560 --> 00:08:53.960
I'm like, "Oh my gosh, it's over my head."


00:08:53.960 --> 00:08:57.520
>> Yeah, that's pretty awesome. One thing really quick before we move on, Brian.


00:08:57.520 --> 00:09:00.040
If you go to the homepage of the TypeSplainer,


00:09:00.040 --> 00:09:01.800
- Yeah. - Which is basically back one.


00:09:01.800 --> 00:09:04.920
So it's got this fairly pathological insane example


00:09:04.920 --> 00:09:07.360
to show you like you can take crazy stuff


00:09:07.360 --> 00:09:08.560
and explain it, yeah? - Yeah.


00:09:08.560 --> 00:09:09.660
- But you can type in there.


00:09:09.660 --> 00:09:10.840
Like you can take that code away


00:09:10.840 --> 00:09:12.240
and put whatever you want in there


00:09:12.240 --> 00:09:13.520
and then hit type spline.


00:09:13.520 --> 00:09:16.800
So if you just made like a function that just took,


00:09:16.800 --> 00:09:18.520
you know, yeah, exactly.


00:09:18.520 --> 00:09:20.760
Give it a name and do a dot, dot, dot, yeah.


00:09:20.760 --> 00:09:22.560
Give the function a name, you'll be good.


00:09:22.560 --> 00:09:23.400
- Type spline. - And then you hit


00:09:23.400 --> 00:09:24.240
type spline.


00:09:24.240 --> 00:09:25.680
Oh, oh, oh. - Compiler, nevermind.


00:09:25.680 --> 00:09:27.320
- It needs a function name.


00:09:27.320 --> 00:09:28.680
- Oh, I didn't.


00:09:28.680 --> 00:09:30.080
- It's not JavaScript, come on.


00:09:30.080 --> 00:09:31.640
(both laughing)


00:09:31.640 --> 00:09:34.400
- Try and use Python. - Ooh, I love it.


00:09:34.400 --> 00:09:37.040
Yeah, see, I mean, it's not a super huge explanation


00:09:37.040 --> 00:09:37.880
of what an integer is,


00:09:37.880 --> 00:09:39.640
but like you can take some random code


00:09:39.640 --> 00:09:41.880
and drop it and then go explain it to me.


00:09:41.880 --> 00:09:44.120
I guess now you can also use the VS Code extension,


00:09:44.120 --> 00:09:44.960
which I haven't seen.


00:09:44.960 --> 00:09:47.320
Anyway, I thought this was cool as well


00:09:47.320 --> 00:09:49.360
and certainly saw a lot of people talking about it


00:09:49.360 --> 00:09:50.800
on Twitter when it came out.


00:09:50.800 --> 00:09:54.080
So, but final thing, I think this is noteworthy as well.


00:09:54.080 --> 00:09:57.800
And I think it's worth mentioning, WASI is just 14.


00:09:57.800 --> 00:10:02.200
So speaking of people like Emily, who can do like AST stuff, like crazy, like also,


00:10:02.200 --> 00:10:05.320
if you write this when you're 14, well done, you're on your way.


00:10:05.320 --> 00:10:10.160
Plus it's, it's really good looking for something right out of the gate.


00:10:10.160 --> 00:10:11.320
So it looks nice.


00:10:11.320 --> 00:10:11.560
Yeah.


00:10:11.560 --> 00:10:12.000
Awesome.


00:10:12.000 --> 00:10:12.640
Yeah.


00:10:12.640 --> 00:10:16.040
I also think the, the like architecture of it's really great too.


00:10:16.040 --> 00:10:17.920
So I really like that.


00:10:17.920 --> 00:10:23.240
He embraced sort of building out the tool itself and then building a CLI and a web


00:10:23.240 --> 00:10:25.660
interface and a VX code extension.


00:10:25.840 --> 00:10:28.320
So I think that is a really great example


00:10:28.320 --> 00:10:31.220
of how to structure a project like this, yeah.


00:10:31.220 --> 00:10:33.080
- Nice. - Yeah, that's awesome.


00:10:33.080 --> 00:10:35.360
Hey, Emily, we lost your screen,


00:10:35.360 --> 00:10:36.800
if you wanna share it back,


00:10:36.800 --> 00:10:39.120
or I can just add in. - Oh, yeah.


00:10:39.120 --> 00:10:39.960
- While you're working on that,


00:10:39.960 --> 00:10:41.520
let me just follow up with Sam real quick,


00:10:41.520 --> 00:10:42.960
who pointed out,


00:10:42.960 --> 00:10:45.320
"Be super aware of the limitations of your hardware


00:10:45.320 --> 00:10:47.500
"when you try to write files in async environments.


00:10:47.500 --> 00:10:49.400
"I had this project that ground to a halt


00:10:49.400 --> 00:10:52.000
"because too many workers were trying to run at once."


00:10:52.000 --> 00:10:54.040
Yes, absolutely, good point, Sam.


00:10:54.040 --> 00:10:57.400
That is generally true for any limited resource


00:10:57.400 --> 00:10:59.800
that you point async things at, right?


00:10:59.800 --> 00:11:02.620
If you're going like async against a database


00:11:02.620 --> 00:11:04.320
and a couple of queries will max it out,


00:11:04.320 --> 00:11:05.920
and if you end up hitting it with 100 queries


00:11:05.920 --> 00:11:08.160
at the same time, it's not gonna go faster.


00:11:08.160 --> 00:11:10.060
It's only gonna get worse as it like fights


00:11:10.060 --> 00:11:13.200
for contention and resources and stuff.


00:11:13.200 --> 00:11:17.240
And then on this one, on the TypeSplainer,


00:11:17.240 --> 00:11:19.480
Brian Skin says, "Agreed, very nice work."


00:11:19.480 --> 00:11:20.980
So awesome.


00:11:20.980 --> 00:11:21.820
- All right, so this is another--


00:11:21.820 --> 00:11:23.640
- All right, Emily, you're up for the first one.


00:11:23.640 --> 00:11:27.400
- Yeah, so this is another one of those new to me things,


00:11:27.400 --> 00:11:29.120
but Marlene's article just came out


00:11:29.120 --> 00:11:30.540
and that's how I actually found out about it.


00:11:30.540 --> 00:11:33.280
So Marlene wrote this really excellent introduction


00:11:33.280 --> 00:11:36.400
to using IBIS for Python programmers.


00:11:36.400 --> 00:11:39.800
IBIS itself has been around for like seven years or so.


00:11:39.800 --> 00:11:43.080
It's a project I think that was started by Wes McKinney,


00:11:43.080 --> 00:11:46.120
but they are a productivity-centered


00:11:46.120 --> 00:11:49.740
Python data analysis framework for SQL engines and Hadoop.


00:11:49.740 --> 00:11:52.480
So you get a ton of different backends.


00:11:52.480 --> 00:11:59.120
going to compile to basically any flavor of SQL database and then a bunch of more data


00:11:59.120 --> 00:12:04.720
science-focused backends. But this popped up on my Twitter feed from Marlene. And it's just


00:12:04.720 --> 00:12:10.400
a really great introduction. Also, just a really interesting sort of application.


00:12:10.400 --> 00:12:16.720
So she went through and wanted to pull some art information about a city that she was going to


00:12:16.720 --> 00:12:22.080
visit because she likes the experience, the culture of a new city. So it just walks through


00:12:22.080 --> 00:12:28.000
like, how to get data into it and then how to interact with it with IDIS. So I'll actually


00:12:28.000 --> 00:12:33.960
switch over to the IDIS documentation. Oh, and this is now just different because it's


00:12:33.960 --> 00:12:42.320
small. But, yeah, I think I was really interested in it because we have, like, a pseudo legacy


00:12:42.320 --> 00:12:48.380
system that we're moving all the migrations out of Django and we're actually managing


00:12:48.380 --> 00:12:55.100
it with a tool called Hasura. We're so used to having Django that's going to use SQLAlchemy


00:12:55.100 --> 00:13:03.180
and ORM and everything is magic from there. You give it a YAML file and you get seed data.


00:13:03.180 --> 00:13:07.420
So we're trying to figure out how to manage seed data in a wildly different environment


00:13:07.420 --> 00:13:13.960
where you have to load it in via the Hasura CLI tool. And you need SQL. And I don't want


00:13:13.960 --> 00:13:18.120
generate SQL like anything I can possibly do to avoid that.


00:13:18.120 --> 00:13:25.000
So this was a really neat way for getting around needing that modeling.


00:13:25.000 --> 00:13:27.440
So let's see if I can get super cool.


00:13:27.440 --> 00:13:31.400
Yeah, it also looks like it integrates with Hadoop and other things that maybe are not


00:13:31.400 --> 00:13:33.320
direct SQL.


00:13:33.320 --> 00:13:35.720
It might need a slightly different query language anyway, right?


00:13:35.720 --> 00:13:37.280
Yeah, and it's super interesting.


00:13:37.280 --> 00:13:39.480
So they have a few different ways that it works.


00:13:39.480 --> 00:13:45.400
So it directly will execute pandas and then it compiled in a few different ways to either


00:13:45.400 --> 00:13:51.720
those SQL databases, Dask, Hadoop, BigQuery, a bunch of different stuff.


00:13:51.720 --> 00:13:54.600
But yeah, it's not necessarily just going to be straight SQL, but it's going to handle


00:13:54.600 --> 00:13:56.160
that for you.


00:13:56.160 --> 00:14:00.480
So you're really future-proofing yourself away from that.


00:14:00.480 --> 00:14:07.120
But yeah, they just got a ton of really intelligent ways to filter data and interact with data


00:14:07.120 --> 00:14:08.640
in a really performant way.


00:14:08.640 --> 00:14:14.060
I'm actually gonna go back to Marlene's blog post real quick and do some quick scrolls.


00:14:14.060 --> 00:14:20.280
It's also one of the most Pythonic tools to integrate with SQL that I've seen. So she


00:14:20.280 --> 00:14:25.600
gets to the point where she has this database table. So you just tell it, you know, your


00:14:25.600 --> 00:14:31.480
table name and you set the variable. And then you can interact with it as if it's just a


00:14:31.480 --> 00:14:33.840
dictionary. So you've got your table.


00:14:33.840 --> 00:14:34.840
Oh, that is cool.


00:14:34.840 --> 00:14:39.360
you want to just pull these columns and you've got it and it's there. So I thought it was


00:14:39.360 --> 00:14:40.360
like a really beautiful.


00:14:40.360 --> 00:14:45.640
So you would say something like dv dot table of quote art and then you say art, you know,


00:14:45.640 --> 00:14:51.000
art equals the art bracket, quote artists and display and then boom, you get those back,


00:14:51.000 --> 00:14:55.400
right? That's awesome as a dictionary, I guess, or something like that. Yeah, that's cool.


00:14:55.400 --> 00:14:59.360
So yeah, there's a ton of different things that you can do with it. I highly recommend


00:14:59.360 --> 00:15:04.240
checking out their tutorials. They've got a ton of different options. My favorite one


00:15:04.240 --> 00:15:09.000
One is the geospatial analysis. So, if you check out their example, they're going to


00:15:09.000 --> 00:15:15.360
show you how to pull information out of a geospatial database and then a really quick


00:15:15.360 --> 00:15:21.120
way of actually mapping out the data. So, if you check out these examples, I know it's


00:15:21.120 --> 00:15:26.880
not going to come through necessarily on audio, but you can pull information out of these


00:15:26.880 --> 00:15:33.540
land plots and then tell it to graph it. And it gives you a really nice looking graph with


00:15:33.540 --> 00:15:37.400
of all the data there in like a whopping 10 lines of code.


00:15:37.400 --> 00:15:39.000
So, yeah.


00:15:39.000 --> 00:15:40.760
- Generating that picture in 10 lines of code,


00:15:40.760 --> 00:15:43.160
that's awesome.


00:15:43.160 --> 00:15:44.120
- Yeah, it's pretty neat.


00:15:44.120 --> 00:15:45.400
- It makes me think I should be doing more


00:15:45.400 --> 00:15:46.980
with geospatial stuff.


00:15:46.980 --> 00:15:48.600
Like I don't do very much 'cause I'm always afraid


00:15:48.600 --> 00:15:49.920
like, ah, how am I gonna graph it?


00:15:49.920 --> 00:15:51.600
What am I gonna do?


00:15:51.600 --> 00:15:53.440
But there's a lot of cool layers in that graph


00:15:53.440 --> 00:15:54.640
and everything, that's neat.


00:15:54.640 --> 00:15:56.080
- Yep. - Yeah, yeah.


00:15:56.080 --> 00:15:59.680
The API reminds me a little bit of PyMongo actually,


00:15:59.680 --> 00:16:01.480
where you kind of just say, you know, dot


00:16:01.480 --> 00:16:03.080
and give it the name of things


00:16:03.080 --> 00:16:05.380
and it's really kind of dynamic in that sense


00:16:05.380 --> 00:16:07.380
and you get dictionaries back and stuff.


00:16:07.380 --> 00:16:08.820
- Yeah, and any--


00:16:08.820 --> 00:16:10.820
- But it's against different databases, right?


00:16:10.820 --> 00:16:12.980
- Right, yeah, but I do like that perspective.


00:16:12.980 --> 00:16:16.900
Like it really is kind of taking any database,


00:16:16.900 --> 00:16:19.340
but especially taking a relational database


00:16:19.340 --> 00:16:23.660
and giving it more of a document-oriented interface to it,


00:16:23.660 --> 00:16:24.700
which is pretty cool.


00:16:24.700 --> 00:16:25.660
- Yeah, this is cool.


00:16:25.660 --> 00:16:27.460
I definitely want to check this out for,


00:16:27.460 --> 00:16:29.100
especially for exploration.


00:16:29.100 --> 00:16:31.840
It feels like it's really got a lot of advantages


00:16:31.840 --> 00:16:32.780
for data scientists.


00:16:32.780 --> 00:16:36.460
like they're going to fire up a notebook and like I just need to start looking at this and playing with it.


00:16:36.460 --> 00:16:39.260
They don't really want to write queries and then convert that right.


00:16:39.260 --> 00:16:56.620
Well it also looks like as far as I can tell it looks like both in this article and in one of the tutorials on the main web page is that there's a good relation one to almost a one to one relationship between SQL things you can do in SQL and things you can do here.


00:16:57.940 --> 00:17:02.020
So, so the people familiar, already familiar with SQL


00:17:02.020 --> 00:17:04.220
can transfer over pretty easily.


00:17:04.220 --> 00:17:05.300
So that's pretty neat.


00:17:05.300 --> 00:17:06.540
- Absolutely.


00:17:06.540 --> 00:17:07.900
Yeah, this is a nice find.


00:17:07.900 --> 00:17:09.320
All right, Brian, before we move on,


00:17:09.320 --> 00:17:10.980
can I take a second to tell you about our sponsor?


00:17:10.980 --> 00:17:11.900
- Yes. - Very excited about this.


00:17:11.900 --> 00:17:14.260
I think it's a big opportunity for people.


00:17:14.260 --> 00:17:15.740
So let me tell you about


00:17:15.740 --> 00:17:17.540
Microsoft for Startups Founders Hub.


00:17:17.540 --> 00:17:20.060
This episode of Python Bytes is brought to you by


00:17:20.060 --> 00:17:22.740
Microsoft for Startups Founders Hub.


00:17:22.740 --> 00:17:24.460
Starting a business is hard.


00:17:24.460 --> 00:17:26.980
By some estimates, over 90% of startups


00:17:26.980 --> 00:17:29.720
will go out of business in just their first year.


00:17:29.720 --> 00:17:32.120
With that in mind, Microsoft for Startups set out


00:17:32.120 --> 00:17:35.080
to understand what startups need to be successful


00:17:35.080 --> 00:17:36.880
and to create a digital platform


00:17:36.880 --> 00:17:38.880
to help them overcome those challenges.


00:17:38.880 --> 00:17:41.480
Microsoft for Startups Founders Hub was born.


00:17:41.480 --> 00:17:44.440
Founders Hub provides all founders at any stage


00:17:44.440 --> 00:17:48.400
with free resources to solve their startup challenges.


00:17:48.400 --> 00:17:50.840
The platform provides technology benefits,


00:17:50.840 --> 00:17:53.720
access to expert guidance and skilled resources,


00:17:53.720 --> 00:17:56.840
mentorship and networking connections, and much more.


00:17:56.840 --> 00:17:58.360
Unlike others in the industry,


00:17:58.360 --> 00:18:00.560
Microsoft for Startups Founders Hub


00:18:00.560 --> 00:18:03.560
doesn't require startups to be investor backed


00:18:03.560 --> 00:18:06.400
or third party validated to participate.


00:18:06.400 --> 00:18:08.880
Founders Hub is truly open to all.


00:18:08.880 --> 00:18:10.480
So what do you get if you join them?


00:18:10.480 --> 00:18:12.560
You speed up your development with free access


00:18:12.560 --> 00:18:15.440
to GitHub and Microsoft Cloud computing resources


00:18:15.440 --> 00:18:18.680
and the ability to unlock more credits over time.


00:18:18.680 --> 00:18:19.920
To help your startup innovate,


00:18:19.920 --> 00:18:22.320
Founders Hub is partnering with innovative companies


00:18:22.320 --> 00:18:25.800
like OpenAI, a global leader in AI research and development


00:18:25.800 --> 00:18:28.480
to provide exclusive benefits and discounts.


00:18:28.480 --> 00:18:30.780
Through Microsoft for Startups Founders Hub,


00:18:30.780 --> 00:18:33.560
becoming a founder is no longer about who you know.


00:18:33.560 --> 00:18:35.340
You'll have access to their mentorship network,


00:18:35.340 --> 00:18:37.400
giving you a pool of hundreds of mentors


00:18:37.400 --> 00:18:40.060
across a range of disciplines and areas


00:18:40.060 --> 00:18:42.480
like idea validation, fundraising,


00:18:42.480 --> 00:18:44.600
management and coaching, sales and marketing,


00:18:44.600 --> 00:18:47.220
as well as specific technical stress points.


00:18:47.220 --> 00:18:48.880
You'll be able to book a one-on-one meeting


00:18:48.880 --> 00:18:49.720
with the mentors,


00:18:49.720 --> 00:18:52.480
many of whom are former founders themselves.


00:18:52.480 --> 00:18:53.680
Make your idea a reality.


00:18:53.680 --> 00:18:57.600
today with a critical support you'll get from Founder's Hub.


00:18:57.600 --> 00:19:01.700
To join the program, just visit pythonbytes.fm/foundertub,


00:19:01.700 --> 00:19:04.080
all one word, the link's in your show notes.


00:19:04.080 --> 00:19:06.200
Thank you to Microsoft for supporting the show.


00:19:06.200 --> 00:19:08.880
Yeah, so $150,000 credit people get.


00:19:08.880 --> 00:19:10.360
So if you're doing a startup,


00:19:10.360 --> 00:19:11.580
you know, that would have been awesome


00:19:11.580 --> 00:19:13.000
when I was trying to do a startup.


00:19:13.000 --> 00:19:14.600
Now, this next thing I wanna tell you about,


00:19:14.600 --> 00:19:18.600
I think this kind of lives in your wheelhouse as well.


00:19:18.600 --> 00:19:20.920
And keeping with the theme of the show,


00:19:20.920 --> 00:19:22.840
this one is recommended by Will McGugan.


00:19:22.840 --> 00:19:25.680
So thank you Will for all the good ideas.


00:19:25.680 --> 00:19:27.360
I know you're out there scouring the internet


00:19:27.360 --> 00:19:29.280
for all sorts of cool things to use


00:19:29.280 --> 00:19:32.120
on textual and rich and whatnot.


00:19:32.120 --> 00:19:33.720
And this is the one of the ones they said


00:19:33.720 --> 00:19:35.760
they are gonna start testing on


00:19:35.760 --> 00:19:37.680
and that has to do with performance.


00:19:37.680 --> 00:19:40.640
So the topic is, or the library is airspeed,


00:19:40.640 --> 00:19:44.700
velocity or ASV and the pip nomenclature.


00:19:44.700 --> 00:19:48.200
And the idea is basically setting up profiling


00:19:48.200 --> 00:19:50.760
and performance as a thing that you can measure


00:19:50.760 --> 00:19:52.680
over the lifetime of your project


00:19:52.680 --> 00:19:54.920
rather than a thing that you measure when you feel like,


00:19:54.920 --> 00:19:56.360
ah, it's slow, I need to go figure out


00:19:56.360 --> 00:19:57.840
why it's slow for now.


00:19:57.840 --> 00:20:00.400
So as you automatically do, as you do check-ins,


00:20:00.400 --> 00:20:02.720
as you know, like CI runs and stuff like that.


00:20:02.720 --> 00:20:05.240
So probably the best way to see this


00:20:05.240 --> 00:20:07.060
is to just like pick on an example.


00:20:07.060 --> 00:20:08.840
So if you go to the link in the show notes,


00:20:08.840 --> 00:20:11.360
airspeed velocity, there's a thing that says,


00:20:11.360 --> 00:20:14.400
see examples for AstroPi, NumPy, SciPy,


00:20:14.400 --> 00:20:17.480
I'll pick up AstroPi, and you get all these graphs.


00:20:17.480 --> 00:20:21.040
So each one of these graphs here is the performance


00:20:21.040 --> 00:20:24.500
of some aspect of Astropy over time.


00:20:24.500 --> 00:20:25.640
How cool is this?


00:20:25.640 --> 00:20:26.620
Look at that.


00:20:26.620 --> 00:20:27.460
- That's pretty.


00:20:27.460 --> 00:20:28.280
- And if you hover over it,


00:20:28.280 --> 00:20:31.780
it shows you the code that runs that scenario.


00:20:31.780 --> 00:20:32.620
- Wow.


00:20:32.620 --> 00:20:33.740
- Yeah.


00:20:33.740 --> 00:20:36.300
And this is a sample, this is a sample,


00:20:36.300 --> 00:20:37.580
and then they did a huge,


00:20:37.580 --> 00:20:39.940
you can see there are like two massive refactorings


00:20:39.940 --> 00:20:42.820
on the sky coordinate benchmarks,


00:20:42.820 --> 00:20:44.540
scalar, whatever this is, right?


00:20:44.540 --> 00:20:46.100
This particular test they did there,


00:20:46.100 --> 00:20:47.580
it goes along pretty steady state,


00:20:47.580 --> 00:20:49.880
and then there's a big drop, a little spike up,


00:20:49.880 --> 00:20:51.040
and then another big drop


00:20:51.040 --> 00:20:53.200
and then steady state for a long time.


00:20:53.200 --> 00:20:55.240
So wouldn't it be cool to have these different views


00:20:55.240 --> 00:20:59.160
into your system about like how it's performing over time?


00:20:59.160 --> 00:21:01.360
- Yeah, so lower is better, right?


00:21:01.360 --> 00:21:02.960
- Yeah, I believe lower is better.


00:21:02.960 --> 00:21:04.320
I think lower is better.


00:21:04.320 --> 00:21:05.480
You can pull up regressions.


00:21:05.480 --> 00:21:07.520
You can say, okay, well, what got worse?


00:21:07.520 --> 00:21:12.520
Like for example, timetable out putter got 35 times slower.


00:21:12.520 --> 00:21:15.600
So that might want some attention.


00:21:15.600 --> 00:21:18.040
And it lists the GitHub command,


00:21:18.040 --> 00:21:19.520
or really technically I suppose it just lists


00:21:19.520 --> 00:21:22.040
the git commit, which is probably on GitHub,


00:21:22.040 --> 00:21:24.960
which is on GitHub, so that you can actually say,


00:21:24.960 --> 00:21:26.640
this is the code that changed


00:21:26.640 --> 00:21:28.920
that made it go 35 times slower.


00:21:28.920 --> 00:21:30.480
- Wow. - That's neat, I think.


00:21:30.480 --> 00:21:34.000
I think one of the other challenges here is,


00:21:34.000 --> 00:21:38.640
what about, what if you wanted this information,


00:21:38.640 --> 00:21:41.920
but you're only now learning about this project, right?


00:21:41.920 --> 00:21:44.560
You're only like now realizing,


00:21:44.560 --> 00:21:46.960
wouldn't it be great to have these graphs?


00:21:46.960 --> 00:21:49.440
How do you get those graphs back in history?


00:21:49.440 --> 00:21:53.560
So Will pointed out that you can actually connect it


00:21:53.560 --> 00:21:54.840
with your Git repository


00:21:54.840 --> 00:21:57.480
and it will check out older versions and run it.


00:21:57.480 --> 00:22:00.200
It'll like roll back in time


00:22:00.200 --> 00:22:02.200
and go across different versions


00:22:02.200 --> 00:22:03.440
and different versions of Python


00:22:03.440 --> 00:22:05.680
and generate those graphs for you,


00:22:05.680 --> 00:22:07.280
even if you just pick it up now.


00:22:07.280 --> 00:22:08.120
- That's awesome.


00:22:08.120 --> 00:22:10.680
Any idea of if it's like restricted to packages


00:22:10.680 --> 00:22:11.520
or if you can also apply this to general projects?


00:22:11.520 --> 00:22:13.960
- I think you can apply it to general projects.


00:22:13.960 --> 00:22:16.160
I don't remember where I saw it.


00:22:16.160 --> 00:22:17.160
I had to pull it back up here.


00:22:17.160 --> 00:22:19.940
Somehow I've escaped the main part.


00:22:19.940 --> 00:22:23.660
But yeah, I think if you look at the using Airspeed,


00:22:23.660 --> 00:22:26.380
you basically come up with a configuration file


00:22:26.380 --> 00:22:31.280
that says, you know, this particular project


00:22:31.280 --> 00:22:34.280
with these settings, and then here's like the run command.


00:22:34.280 --> 00:22:35.700
You come up with one of these test suites.


00:22:35.700 --> 00:22:39.100
I don't think it has any tie-in to packages per se,


00:22:39.100 --> 00:22:42.380
'cause I think it goes against Git, not against IPI.


00:22:42.380 --> 00:22:44.380
Yeah, yeah, so pretty neat.


00:22:44.380 --> 00:22:45.500
People can check that out,


00:22:45.500 --> 00:22:48.960
but like here you can specify like which versions of Python


00:22:48.960 --> 00:22:51.720
or is this two seven stuff, I don't know.


00:22:51.720 --> 00:22:54.140
But yeah, so you can run it against all those old versions,


00:22:54.140 --> 00:22:56.040
you can configure how it runs and so on.


00:22:56.040 --> 00:22:59.080
- Okay, so you can even, you can set up like,


00:22:59.080 --> 00:23:01.120
since you're defining what's being timed,


00:23:01.120 --> 00:23:06.120
you can time large things like a particular workflow


00:23:06.120 --> 00:23:10.280
through lots of bits of code first and things like that.


00:23:10.280 --> 00:23:11.120
- Yeah, exactly.


00:23:11.120 --> 00:23:13.040
So you basically come up with a couple of scenarios


00:23:13.040 --> 00:23:14.600
of what you would want to do


00:23:14.600 --> 00:23:15.860
that you're going to run against.


00:23:15.860 --> 00:23:20.700
Here you can see you can benchmark against tags and things like that and get,


00:23:20.700 --> 00:23:22.100
or branches.


00:23:22.100 --> 00:23:22.940
>> Yeah.


00:23:22.940 --> 00:23:23.300
>> Yeah.


00:23:23.300 --> 00:23:31.180
>> So Will says he ran it against two years worth of rich releases.


00:23:31.180 --> 00:23:32.100
That's cool.


00:23:32.100 --> 00:23:35.100
>> And found a performance regression. Nice work.


00:23:35.100 --> 00:23:38.660
I love it. Optimizations that made rich slower.


00:23:38.660 --> 00:23:40.680
Isn't that true? This is going to make it better.


00:23:40.680 --> 00:23:41.520
- No.


00:23:41.520 --> 00:23:45.340
- Yeah, so pretty cool.


00:23:45.340 --> 00:23:47.800
- And I have to give a nice shout out


00:23:47.800 --> 00:23:51.720
to the full embracing of the mypython reference.


00:23:51.720 --> 00:23:53.720
If you go back to the AstroPy version


00:23:53.720 --> 00:23:55.360
in the top left corner,


00:23:55.360 --> 00:23:57.960
it says airspeed velocity of an unladen AstroPy.


00:23:57.960 --> 00:24:00.440
- Oh yeah, I did notice that, that's awesome.


00:24:00.440 --> 00:24:02.000
- It's nice.


00:24:02.000 --> 00:24:03.520
- Yeah, very cool.


00:24:03.520 --> 00:24:06.200
Well, yeah, thanks for sending that over, Will.


00:24:06.200 --> 00:24:08.520
- Yeah, I got some projects I'd like to do that on.


00:24:08.520 --> 00:24:11.640
But speaking of testing things,


00:24:11.640 --> 00:24:13.640
this one comes from Anthony Shaw.


00:24:13.640 --> 00:24:15.020
This is Perflint.


00:24:15.020 --> 00:24:19.560
So this is a pilot extension


00:24:19.560 --> 00:24:22.720
to check for performance anti-patterns.


00:24:22.720 --> 00:24:26.600
And it's Tony somewhere, Anthony.


00:24:26.600 --> 00:24:29.160
- Some guy named Anthony Shaw.


00:24:29.160 --> 00:24:30.000
- Anthony Shaw.


00:24:30.000 --> 00:24:30.840
- I forgot if I even mentioned him.


00:24:30.840 --> 00:24:32.440
- Tony Bologna.


00:24:32.440 --> 00:24:33.920
Says, oh, here it is.


00:24:33.920 --> 00:24:35.440
Project is in early beta.


00:24:35.440 --> 00:24:38.860
it will likely raise many false positives.


00:24:38.860 --> 00:24:42.100
So I'm thinking that might be why he went


00:24:42.100 --> 00:24:43.920
with an extension to Pylint


00:24:43.920 --> 00:24:47.760
instead of like an extension to PyFlex or Flake 8


00:24:47.760 --> 00:24:51.260
because Pylint gives lots of false positives.


00:24:51.260 --> 00:24:56.060
No, at least in my experience with Pylint,


00:24:56.060 --> 00:24:59.660
it takes some configuration to get happy with it


00:24:59.660 --> 00:25:02.580
because it will show you things that maybe you're okay with.


00:25:02.580 --> 00:25:06.100
Like I threw Pylint against some demo code


00:25:06.100 --> 00:25:08.760
that I have for like teaching people stuff.


00:25:08.760 --> 00:25:11.420
And I'm using short variable names like,


00:25:11.420 --> 00:25:13.900
you know, X and Y and things like that.


00:25:13.900 --> 00:25:16.740
And one of the restrictions for Pylint is


00:25:16.740 --> 00:25:18.060
you have to have,


00:25:18.060 --> 00:25:21.020
most everything has to be three characters or longer.


00:25:21.020 --> 00:25:24.020
And you know, for production code, that's probably fine.


00:25:24.020 --> 00:25:26.900
But if you have different rules, you can change that.


00:25:26.900 --> 00:25:29.420
But back to this, I really like,


00:25:29.420 --> 00:25:31.860
I like the idea of having something look over my shoulder


00:25:31.860 --> 00:25:33.160
and look at performance problems,


00:25:33.160 --> 00:25:37.660
because I'm an advocate for don't solve performance problems


00:25:37.660 --> 00:25:40.080
unless you find that there's a performance problem.


00:25:40.080 --> 00:25:42.900
So don't do premature optimization.


00:25:42.900 --> 00:25:47.680
However, having some things are just kind of slow


00:25:47.680 --> 00:25:50.000
that you should get out of the habit of doing


00:25:50.000 --> 00:25:53.320
like when using list in a for loop,


00:25:53.320 --> 00:25:55.520
if the thing that you're using a list of


00:25:55.520 --> 00:25:56.820
already is an iterable,


00:25:56.820 --> 00:26:01.340
that's a big performance hit if it's a huge thing,


00:26:01.340 --> 00:26:05.380
because that turns an iterable or a generator


00:26:05.380 --> 00:26:07.500
into an entire list.


00:26:07.500 --> 00:26:08.380
It creates the list.


00:26:08.380 --> 00:26:09.340
You don't need to do that.


00:26:09.340 --> 00:26:11.180
So that's a big one.


00:26:11.180 --> 00:26:13.300
Anyway, there's a whole bunch of different things


00:26:13.300 --> 00:26:14.480
it checks for.


00:26:14.480 --> 00:26:16.500
And I like the idea of just,


00:26:16.500 --> 00:26:20.380
as you're writing code and as you're running this


00:26:20.380 --> 00:26:24.660
and trying to figure out if there's problems with it,


00:26:24.660 --> 00:26:26.100
you can kind of get out of the habit


00:26:26.100 --> 00:26:27.580
of doing some of these things.


00:26:27.580 --> 00:26:28.700
- Yeah, these are nice.


00:26:28.700 --> 00:26:32.340
catch just some of the things you might think you need to do,


00:26:32.340 --> 00:26:35.740
you're not super experienced with or whatever.


00:26:35.740 --> 00:26:40.700
>> Yeah. One of the things here is error W801,


00:26:40.700 --> 00:26:43.140
which is loop invariant statement.


00:26:43.140 --> 00:26:46.820
This is one that's interesting is,


00:26:46.820 --> 00:26:51.220
there is an example of taking the length of something within a loop.


00:26:51.220 --> 00:26:53.840
If that never changes within the loop,


00:26:53.840 --> 00:26:55.820
don't do the length in the loop,


00:26:55.820 --> 00:26:56.940
take it out of the loop.


00:26:56.940 --> 00:26:58.820
>> Yeah, exactly.


00:26:58.820 --> 00:27:03.380
>> There's a few examples that you might not notice right away,


00:27:03.380 --> 00:27:07.820
especially if you've taken something that was some linear code


00:27:07.820 --> 00:27:12.540
that you added it inside of a loop and indented it over,


00:27:12.540 --> 00:27:13.860
and now it's in a loop.


00:27:13.860 --> 00:27:16.100
You might forget that some of the stuff inside


00:27:16.100 --> 00:27:18.820
might maybe shouldn't be in the loop.


00:27:18.820 --> 00:27:20.340
>> Yeah. This example here,


00:27:20.340 --> 00:27:22.820
you're doing a loop 10,000 times,


00:27:22.820 --> 00:27:25.540
and every time you're asking the length of this thing that is


00:27:25.540 --> 00:27:27.420
to find outside the loop and is unchanging.


00:27:27.420 --> 00:27:32.980
So you're basically doing it 10,000, 9,999 times more than necessary.


00:27:32.980 --> 00:27:33.300
Yeah.


00:27:33.300 --> 00:27:33.620
Yep.


00:27:33.620 --> 00:27:35.460
So kind of fun.


00:27:35.460 --> 00:27:39.260
I'm going to give it a shot, see what I think in as using it.


00:27:39.260 --> 00:27:40.660
So yeah, definitely.


00:27:40.660 --> 00:27:46.220
Emily, do you use some of these linters or any things like this to give you warnings?


00:27:46.220 --> 00:27:47.320
Yeah.


00:27:47.320 --> 00:27:48.040
Yeah.


00:27:48.040 --> 00:27:51.780
I mean, I think we mostly use Playgate, but I'm definitely curious to try this out too.


00:27:51.860 --> 00:27:58.420
I can see how this would be tricky to get really consistent errors for these things.


00:27:58.420 --> 00:28:01.860
So props to Tony Bologna for taking it on.


00:28:01.860 --> 00:28:03.140
- Well done, yeah, this is exciting.


00:28:03.140 --> 00:28:04.420
I'm glad to see this coming out.


00:28:04.420 --> 00:28:09.300
I know he was talking about it, but I didn't see actually anything on GitHub yet or anything.


00:28:09.300 --> 00:28:10.860
So yeah, very well done.


00:28:10.860 --> 00:28:12.260
- Yeah, this is cool.


00:28:12.260 --> 00:28:16.460
I like stuff like this that really like takes you to that next level of like, this is something


00:28:16.460 --> 00:28:20.620
that somebody would hopefully notice in like a code review, but if you can automate it.


00:28:20.620 --> 00:28:21.620
- Yeah, I think that's a great point.


00:28:21.620 --> 00:28:25.700
I think a lot of these things that would have to be a discussion during a code review,


00:28:25.700 --> 00:28:31.660
if they could be automated and you could save the code review for meaningful stuff like security


00:28:31.660 --> 00:28:35.460
or, you know, like how are we going to version this over time?


00:28:35.460 --> 00:28:36.380
It's going to be tricky.


00:28:36.380 --> 00:28:39.340
Like, are you really storing pickles in the database?


00:28:39.340 --> 00:28:40.620
Let's not, you know, stuff like that.


00:28:40.620 --> 00:28:41.140
Yeah.


00:28:41.140 --> 00:28:42.100
All right.


00:28:42.100 --> 00:28:47.300
PEP 594 has been accepted, which is super exciting.


00:28:47.300 --> 00:28:53.380
So PEP594, if you don't know what that is, it's a Python enhancement proposal.


00:28:53.380 --> 00:28:58.220
So a proposed change to the Python language itself.


00:28:58.220 --> 00:29:02.020
And so this one is removing dead batteries from the standard library.


00:29:02.020 --> 00:29:05.300
It was written by Christian Himes and Brett Cannon.


00:29:05.300 --> 00:29:10.760
I think I saw a tweet from Brett saying that it had been accepted.


00:29:10.760 --> 00:29:16.700
So this is just really exciting for anyone who's followed along with any of this discussion.


00:29:16.700 --> 00:29:22.780
It's been a long time coming. I think there was a major discussion about it at PyCon US


00:29:22.780 --> 00:29:29.140
2019, it must have been. And shortly after that, there was a pep. But it's been since


00:29:29.140 --> 00:29:34.980
then that it's kind of been off and on in discussion and finally figuring out what is


00:29:34.980 --> 00:29:41.180
going to be the thing that really works for everyone and for the future of the language.


00:29:41.180 --> 00:29:45.060
So this is going to be targeting version 3.11.


00:29:45.060 --> 00:29:50.140
So just a quick recap of the release plan for that.


00:29:50.140 --> 00:29:54.240
Development on 3.11 will start this May, so May 2021.


00:29:54.240 --> 00:29:59.840
The final release, even for 3.11, is not until October 2022.


00:29:59.840 --> 00:30:03.360
And even then, this is just going to be deprecating modules.


00:30:03.360 --> 00:30:06.160
So it'll be deprecations in 3.11 and 3.12.


00:30:06.160 --> 00:30:12.320
And it's not until 3/13 that it will actually be fully removed from the language itself.


00:30:12.320 --> 00:30:18.520
So you can kind of get a glimpse into how long of a process this is and how big of a


00:30:18.520 --> 00:30:21.320
decision it was to get everyone on board.


00:30:21.320 --> 00:30:24.320
Yeah, it didn't look at all like anything rushed.


00:30:24.320 --> 00:30:29.000
When I went through and read this, it was like, here's the things that we think we can


00:30:29.000 --> 00:30:30.000
take out.


00:30:30.000 --> 00:30:36.760
why there's a table in there that shows third party alternatives to certain things.


00:30:36.760 --> 00:30:38.880
Mostly, yeah, that's the one.


00:30:38.880 --> 00:30:41.200
So there's certain things in here just like,


00:30:41.200 --> 00:30:45.520
"No, that probably isn't needed or it's really superseded."


00:30:45.520 --> 00:30:48.480
So there's pipes, but then we also have subprocess,


00:30:48.480 --> 00:30:50.240
which will take care of that,


00:30:50.240 --> 00:30:51.520
and that's a built-in one.


00:30:51.520 --> 00:30:54.520
Then async core,


00:30:54.520 --> 00:30:55.880
just use asyncio,


00:30:55.880 --> 00:30:57.680
but then there's other ones.


00:30:57.680 --> 00:31:00.480
- There's a bunch in here I've never even heard of.


00:31:00.480 --> 00:31:01.800
- Yeah, that's the thing, right?


00:31:01.800 --> 00:31:03.760
There's one called Crypt and it's like,


00:31:03.760 --> 00:31:06.560
look, just use Passlib or Argon or Hashlib


00:31:06.560 --> 00:31:08.760
or anything that is better and modern.


00:31:08.760 --> 00:31:10.920
You know, this was from 1994.


00:31:10.920 --> 00:31:14.560
Cryptography is not exactly the same as it was then.


00:31:14.560 --> 00:31:17.880
So, you know, maybe it makes sense to take it out, right?


00:31:17.880 --> 00:31:18.720
- Yeah.


00:31:18.720 --> 00:31:20.440
- I guess.


00:31:20.440 --> 00:31:22.680
- Yeah, yeah, I think it's a really like,


00:31:22.680 --> 00:31:24.320
it's a thin line to walk, right?


00:31:24.320 --> 00:31:27.100
Like some people are using these


00:31:27.100 --> 00:31:31.420
and some of these modules maybe didn't have a lot of like maintenance over time.


00:31:31.420 --> 00:31:37.420
But that also meant that there wasn't somebody watching it for bugs or security vulnerabilities or anything like that.


00:31:37.420 --> 00:31:43.980
So the balance of is it worth pulling it out if somebody was relying on it


00:31:43.980 --> 00:31:48.860
versus the maintenance cost or the lack of maintenance that could be a liability.


00:31:48.860 --> 00:31:54.620
There's a CGI library. That's something else that takes you back from '95.


00:31:54.620 --> 00:31:57.720
- Yeah, that's how I started, but not with Python.


00:31:57.720 --> 00:32:00.980
I was doing CGI with Perl way back in '95.


00:32:00.980 --> 00:32:02.660
- Yeah, that does go back.


00:32:02.660 --> 00:32:05.060
It also talks about whether that bit of code


00:32:05.060 --> 00:32:07.940
has a maintainer and whether that maintainer is active.


00:32:07.940 --> 00:32:10.100
For example, CGI has no maintainer.


00:32:10.100 --> 00:32:11.740
Like, no one wants that.


00:32:11.740 --> 00:32:13.240
One of the things that's interesting here


00:32:13.240 --> 00:32:15.540
is you could take this code and you could still use it.


00:32:15.540 --> 00:32:18.380
You could vendor it into your code, right?


00:32:18.380 --> 00:32:20.540
Just instead of using-- - Yeah, now you're the maintainer.


00:32:20.540 --> 00:32:21.860
Yeah. - Yeah, exactly.


00:32:21.860 --> 00:32:23.380
It's all yours, you can have that.


00:32:23.380 --> 00:32:26.700
But you could just go to CPython on GitHub,


00:32:26.700 --> 00:32:28.940
get that module, copy it over,


00:32:28.940 --> 00:32:30.900
and now you kind of still have that functionality,


00:32:30.900 --> 00:32:33.000
just you're taking it on.


00:32:33.000 --> 00:32:34.520
I expect maybe one or two of these


00:32:34.520 --> 00:32:36.580
might end up in their own GitHub repository


00:32:36.580 --> 00:32:39.020
as a package that is maintained.


00:32:39.020 --> 00:32:40.900
They did talk about that, right, Emily?


00:32:40.900 --> 00:32:42.780
About that being one of the possible paths


00:32:42.780 --> 00:32:43.980
they decided against?


00:32:43.980 --> 00:32:45.500
- Yeah, yeah, yeah.


00:32:45.500 --> 00:32:48.420
That was like the big conversation


00:32:48.420 --> 00:32:51.500
back at the Language Summit in 2019 was, you know,


00:32:51.500 --> 00:32:57.300
could we get libraries on a more independent release schedule


00:32:57.300 --> 00:33:00.460
and pull them out of the standard library entirely


00:33:00.460 --> 00:33:03.180
and just have them be sort of their own standalone thing,


00:33:03.180 --> 00:33:06.140
which as I have briefly outlaunched the release


00:33:06.140 --> 00:33:11.940
schedule for 3.11, you can see that it is on a very long scale


00:33:11.940 --> 00:33:12.660
time frame.


00:33:12.660 --> 00:33:14.260
So I definitely agree.


00:33:14.260 --> 00:33:16.700
I think that's some of the use that people are still using.


00:33:16.700 --> 00:33:19.640
People are either going to go in there and grab the code


00:33:19.640 --> 00:33:22.740
and hopefully grab the license with it as well.


00:33:22.740 --> 00:33:24.540
Or they're just gonna become, you know,


00:33:24.540 --> 00:33:26.540
modules that enough people care about


00:33:26.540 --> 00:33:28.340
that live on their own in PyPI.


00:33:28.340 --> 00:33:30.160
- I don't see anything here that I would miss,


00:33:30.160 --> 00:33:33.020
but that doesn't mean that there's not people using them.


00:33:33.020 --> 00:33:34.860
- So on the good side, I mean,


00:33:34.860 --> 00:33:37.260
it totally makes sense to like remove things,


00:33:37.260 --> 00:33:39.380
especially stuff that's not getting maintained


00:33:39.380 --> 00:33:42.420
and there's no maintainer and does,


00:33:42.420 --> 00:33:45.220
possibly has bugs in it now, nobody knows.


00:33:46.780 --> 00:33:50.000
But like, what are some of the good aspects,


00:33:50.000 --> 00:33:51.160
other good aspects?


00:33:51.160 --> 00:33:54.960
Is it gonna make the library or the Python standard,


00:33:54.960 --> 00:33:59.220
the install smaller or, I mean, you'd think,


00:33:59.220 --> 00:34:01.040
anybody know the numbers on that?


00:34:01.040 --> 00:34:01.880
Okay.


00:34:01.880 --> 00:34:03.400
- I don't know the numbers on that,


00:34:03.400 --> 00:34:04.240
but that is something interesting to look at.


00:34:04.240 --> 00:34:06.640
- I would say the biggest change is like maintenance.


00:34:06.640 --> 00:34:10.280
Just no one has to worry about whether there's a bug in CGI


00:34:10.280 --> 00:34:13.040
that someone discovers 'cause it's just not there.


00:34:13.040 --> 00:34:14.040
- Yeah.


00:34:14.040 --> 00:34:14.880
- Yeah.


00:34:14.880 --> 00:34:21.920
And especially with CPython, there's often a very big barrier to entry. So if a CGI bug


00:34:21.920 --> 00:34:30.720
was even filed by somebody, where would you start to take that off? And then the other thing too,


00:34:30.720 --> 00:34:36.160
is maybe somebody else goes through the effort to fix it. But it always takes the core dev to


00:34:36.160 --> 00:34:41.360
review that PR and get it merged in. And so a lot of times, if you don't have an owner of a module,


00:34:41.360 --> 00:34:43.360
It's just not going to get a lot of attention.


00:34:43.360 --> 00:34:52.000
So as a whole, it should be hopefully an impact on how we interpret core developer time.


00:34:52.000 --> 00:34:56.000
Because right now I think we're at like over a thousand PRs open on GitHub.


00:34:56.000 --> 00:35:00.960
So a lot of times, you know, it's not just core developers writing code.


00:35:00.960 --> 00:35:05.040
And a lot of times you can have even more of an impact being that person that, you know,


00:35:05.040 --> 00:35:07.840
tries to review PRs and keep that number down.


00:35:07.840 --> 00:35:09.720
- Brian out in the audience points out


00:35:09.720 --> 00:35:11.800
that the comment threads on discuss.python


00:35:11.800 --> 00:35:13.400
and elsewhere are really interesting


00:35:13.400 --> 00:35:15.640
if you wanna see examples of these old modules


00:35:15.640 --> 00:35:17.600
still in use, yeah.


00:35:17.600 --> 00:35:19.000
- Yeah, I've got a couple of them here.


00:35:19.000 --> 00:35:21.100
I think I linked them in the show notes,


00:35:21.100 --> 00:35:22.720
but if they're not there, I'll make sure it's in there.


00:35:22.720 --> 00:35:24.720
- Nice, yeah, you got a link to Brett's,


00:35:24.720 --> 00:35:26.560
or the Brett's discussion there, that's cool.


00:35:26.560 --> 00:35:27.920
No, I think this is good, I think this is good.


00:35:27.920 --> 00:35:30.760
And quick shout out to a new theme, right?


00:35:30.760 --> 00:35:33.240
- Yeah, so it's a brand new PEP site.


00:35:33.240 --> 00:35:35.040
So it's peps.python.org,


00:35:35.040 --> 00:35:37.240
and there's this really lovely theme on it.


00:35:37.240 --> 00:35:39.200
It's really clean and modern.


00:35:39.200 --> 00:35:41.700
You've got a nice dark theme here as well.


00:35:41.700 --> 00:35:43.000
- Yeah, I noticed the dark theme, that was cool.


00:35:43.000 --> 00:35:45.420
And I think it even auto adapts to the time of day,


00:35:45.420 --> 00:35:46.260
which is great.


00:35:46.260 --> 00:35:47.840
Right, is that it for all of our main items?


00:35:47.840 --> 00:35:49.520
- I think it is.


00:35:49.520 --> 00:35:50.360
- It is.


00:35:50.360 --> 00:35:52.140
- Do you have anything extra for us?


00:35:52.140 --> 00:35:53.880
- Would it surprise you if I said no?


00:35:53.880 --> 00:35:55.120
- Yeah, what? - Nothing extra.


00:35:55.120 --> 00:35:57.280
I know, I always have like 10 extra things.


00:35:57.280 --> 00:35:58.600
No, I don't have anything extra this week.


00:35:58.600 --> 00:35:59.800
- Oh, really?


00:35:59.800 --> 00:36:00.640
- Yeah.


00:36:00.640 --> 00:36:01.520
- Nice, nice, okay.


00:36:01.520 --> 00:36:02.840
How about you, Emily?


00:36:02.840 --> 00:36:03.900
- Cool.


00:36:03.900 --> 00:36:06.000
Yeah, I've got a couple of extra things.


00:36:06.000 --> 00:36:07.800
So as I was prepping for this, I looked at,


00:36:07.800 --> 00:36:11.160
I think it was just the most recent episode before this one.


00:36:11.160 --> 00:36:16.200
There was a blog post that I think Brian shared


00:36:16.200 --> 00:36:20.200
on like a better Git flow that basically was saying like,


00:36:20.200 --> 00:36:22.840
commit all your stuff, reset everything,


00:36:22.840 --> 00:36:24.760
and then recommit everything


00:36:24.760 --> 00:36:27.480
once you're like ready to make a clean PR.


00:36:27.480 --> 00:36:30.520
And so I wanted to share this as well.


00:36:30.520 --> 00:36:32.760
This is one of my favorite tools that I learned about


00:36:32.760 --> 00:36:34.160
probably a few months ago.


00:36:34.160 --> 00:36:36.280
Again, it's 2015.


00:36:36.280 --> 00:36:38.340
Not a new thing, but new to me.


00:36:38.340 --> 00:36:42.840
So you can do auto-squashing of Git commits


00:36:42.840 --> 00:36:45.040
when you're interactive rebasing.


00:36:45.040 --> 00:36:47.760
So essentially, if you've got a ton of different commits


00:36:47.760 --> 00:36:51.760
and you realize, oh, like I had a style commit


00:36:51.760 --> 00:36:54.680
for styling all my new stuff a few commits back,


00:36:54.680 --> 00:36:56.780
but like I wanna make this one more change,


00:36:56.780 --> 00:36:59.560
instead of needing to rebase immediately


00:36:59.560 --> 00:37:03.640
or remember to stage it in a certain way in the future,


00:37:03.640 --> 00:37:06.880
you can actually go ahead and just commit one more time.


00:37:06.880 --> 00:37:09.520
And then you flag that commit that you're making


00:37:09.520 --> 00:37:10.720
with the fix up flag.


00:37:10.720 --> 00:37:12.680
So it's just --fix up.


00:37:12.680 --> 00:37:15.400
And then you tell it the commit


00:37:15.400 --> 00:37:18.380
that you're wanting to sort of amend.


00:37:18.380 --> 00:37:19.760
So you can just keep working like that,


00:37:19.760 --> 00:37:21.040
make your fix up commits.


00:37:21.040 --> 00:37:24.180
And then the only thing that you do right before you PR


00:37:24.180 --> 00:37:27.960
is you tell it to rebase with auto-squashing.


00:37:27.960 --> 00:37:31.140
So once you do that interactive rebase with auto-squash,


00:37:31.140 --> 00:37:33.240
it's gonna find all those fix up commits


00:37:33.240 --> 00:37:35.520
And when you interrupt a rebase,


00:37:35.520 --> 00:37:38.000
you often have to move commits around


00:37:38.000 --> 00:37:39.960
and tell it to squash it in the previous commit.


00:37:39.960 --> 00:37:42.160
You've gotta get it in the right order.


00:37:42.160 --> 00:37:43.600
This handles all of it for you.


00:37:43.600 --> 00:37:45.980
And anything that's flagged with a fix up,


00:37:45.980 --> 00:37:49.040
it finds that commit ID and auto squashes it back in.


00:37:49.040 --> 00:37:51.640
So you get a really, really clean history


00:37:51.640 --> 00:37:56.480
without having to redo all of your commit work


00:37:56.480 --> 00:37:57.320
that you had done a long way.


00:37:57.320 --> 00:37:58.140
- Yeah, this is really nice.


00:37:58.140 --> 00:37:59.920
And this looks built in to Git.


00:37:59.920 --> 00:38:01.100
Yeah.


00:38:01.100 --> 00:38:02.680
I've never heard of auto squashing.


00:38:02.680 --> 00:38:05.080
I've definitely never used it, but it looks really useful.


00:38:05.080 --> 00:38:06.520
- Yeah. - Cool, thank you.


00:38:06.520 --> 00:38:07.600
All right, what's your next one?


00:38:07.600 --> 00:38:11.680
- Yeah, yeah, and then a couple other cool ones.


00:38:11.680 --> 00:38:15.040
There was a tweet from Dustin Ingram about an award


00:38:15.040 --> 00:38:18.480
that the Python Software Foundation actually received.


00:38:18.480 --> 00:38:22.840
It's from the Annie Awards, which is, you know,


00:38:22.840 --> 00:38:27.020
animation version of the Academy Awards sort of thing.


00:38:27.020 --> 00:38:31.800
And it was for Python's use in animation.


00:38:31.800 --> 00:38:33.500
And so I think this is just super cool.


00:38:33.500 --> 00:38:35.940
It's one of those like applications


00:38:35.940 --> 00:38:38.120
that you don't necessarily think about


00:38:38.120 --> 00:38:39.940
for Python all the time.


00:38:39.940 --> 00:38:41.980
I don't think it gets talked about enough.


00:38:41.980 --> 00:38:44.220
I actually tried to find,


00:38:44.220 --> 00:38:48.180
Paul Hildebrandt had a talk at PyCon Montreal,


00:38:48.180 --> 00:38:51.140
but I think it was back before we were recording these.


00:38:51.140 --> 00:38:54.380
So if you ever see Paul at a conference,


00:38:54.380 --> 00:38:56.540
you've got to ask him about, you know,


00:38:56.540 --> 00:38:59.020
how Python is used in animation and at studios.


00:38:59.020 --> 00:39:00.740
- Oh yeah, that's really neat.


00:39:00.740 --> 00:39:01.580
So exciting.


00:39:01.580 --> 00:39:03.300
I would have never expected that, but that's great.


00:39:03.300 --> 00:39:05.400
And congrats, Guido, for getting the award.


00:39:05.400 --> 00:39:07.420
- And two more quick ones.


00:39:07.420 --> 00:39:11.420
The PSF Spring Fundraiser launched yesterday


00:39:11.420 --> 00:39:12.720
and they're having a ton of fun with it.


00:39:12.720 --> 00:39:16.660
Launched on at least Pi Day in the United States.


00:39:16.660 --> 00:39:20.460
So if you donate with some sort of contribution


00:39:20.460 --> 00:39:22.940
that is related to the number Pi,


00:39:22.940 --> 00:39:25.400
you get like a free swag bag.


00:39:25.400 --> 00:39:28.940
So just a fun twist on this.


00:39:28.940 --> 00:39:31.140
- You can donate $3.14


00:39:31.140 --> 00:39:35.380
$31 and 41 cents or $314 and 116 cents.


00:39:35.380 --> 00:39:40.060
And yeah, like it goes pretty far out if I remember pi,


00:39:40.060 --> 00:39:41.460
there's a lot of numbers in there.


00:39:41.460 --> 00:39:43.340
So yeah, just keep going.


00:39:43.340 --> 00:39:44.020
Yeah.


00:39:44.020 --> 00:39:46.620
Cause whatever your bank account will allow.


00:39:46.620 --> 00:39:49.940
All right.


00:39:49.940 --> 00:39:51.700
Anything else you want to throw out?


00:39:51.700 --> 00:39:54.480
Um, yeah, just one last quick one.


00:39:54.480 --> 00:39:56.860
Just a small plug for, for us.


00:39:56.860 --> 00:39:58.260
Uh, Kettlesoft is hiring.


00:39:58.580 --> 00:40:04.580
We have a bunch of different positions open, but we're especially always looking for Python engineers.


00:40:04.580 --> 00:40:08.580
We're a small team. We're a team of about eight people right now.


00:40:08.580 --> 00:40:17.580
Predominantly female engineering team. And just the pride of what I have done in the last few years of building this team.


00:40:17.580 --> 00:40:24.580
So if you're looking for some place that is always innovating, always focused on really high-quality tested code,


00:40:24.580 --> 00:40:27.480
but you wanna work in a small team environment,


00:40:27.480 --> 00:40:30.340
get hands-on with clients, get hands-on with product,


00:40:30.340 --> 00:40:31.180
come check us out.


00:40:31.180 --> 00:40:32.200
- Codalsoft looks really cool.


00:40:32.200 --> 00:40:33.900
You seem to be doing a lot of,


00:40:33.900 --> 00:40:35.520
bunch of different small fun projects


00:40:35.520 --> 00:40:38.340
instead of just getting stuck in like one huge legacy code.


00:40:38.340 --> 00:40:40.920
So if you're looking to kind of bounce around


00:40:40.920 --> 00:40:42.320
from project to project and learn a lot,


00:40:42.320 --> 00:40:44.780
I think that'd be a good place, right?


00:40:44.780 --> 00:40:46.760
- Yeah, absolutely. - All right.


00:40:46.760 --> 00:40:48.660
Well, I have two jokes for us,


00:40:48.660 --> 00:40:49.640
even though I have no extras,


00:40:49.640 --> 00:40:51.000
so I'm making up for it there, I guess.


00:40:51.000 --> 00:40:52.360
- Nice.


00:40:52.360 --> 00:40:54.600
So Aaron Patterson said,


00:40:54.600 --> 00:40:56.060
"I heard Microsoft is trying to change


00:40:56.060 --> 00:40:57.680
"the file separator in Windows,


00:40:57.680 --> 00:41:00.440
"but it received tons of backslash from the community."


00:41:00.440 --> 00:41:03.640
(imitates drum roll)


00:41:03.640 --> 00:41:04.480
That's pretty funny, right?


00:41:04.480 --> 00:41:06.760
- But the forward slash works fine in Windows.


00:41:06.760 --> 00:41:08.120
People just forget to use it.


00:41:08.120 --> 00:41:11.000
- It actually does, it totally does.


00:41:11.000 --> 00:41:13.000
And following along there,


00:41:13.000 --> 00:41:15.040
oh, Emily, I think this is the perfect follow-on


00:41:15.040 --> 00:41:16.400
for you as well.


00:41:16.400 --> 00:41:21.020
Do you ever look at people's GitHub profiles if they apply?


00:41:21.020 --> 00:41:22.820
Like if they say, yeah, right, of course.


00:41:22.820 --> 00:41:25.060
I mean, that would be crazy not to, right?


00:41:25.060 --> 00:41:27.360
So this person here,


00:41:27.360 --> 00:41:29.760
you know, if you go to your GitHub profile,


00:41:29.760 --> 00:41:33.000
it will show you your public activity over time.


00:41:33.000 --> 00:41:34.620
And it'll say like on this day, you know,


00:41:34.620 --> 00:41:36.800
in September on Monday, you had this much work


00:41:36.800 --> 00:41:37.840
and then on Tuesday that much,


00:41:37.840 --> 00:41:40.820
and it'll color like different colors of green.


00:41:40.820 --> 00:41:42.140
So if you all check out the link here,


00:41:42.140 --> 00:41:46.700
we have a GitHub activity for a year that spells out,


00:41:46.700 --> 00:41:49.680
please hire me in like the exact amount of commits


00:41:49.680 --> 00:41:51.000
on just the right day.


00:41:51.000 --> 00:41:52.440
And I think that's.


00:41:52.440 --> 00:41:55.040
- I think there's some history manipulation going on here,


00:41:55.040 --> 00:41:55.880
but.


00:41:55.880 --> 00:41:58.880
- There are probably some auto squashing, I don't know.


00:41:58.880 --> 00:42:01.120
(laughing)


00:42:01.120 --> 00:42:04.320
- I mean, hey, I would look at that


00:42:04.320 --> 00:42:06.800
and think that they had some decent enough


00:42:06.800 --> 00:42:07.640
Git skills to manage that. - Yeah, exactly.


00:42:07.640 --> 00:42:09.960
It does mean that you're probably not doing


00:42:09.960 --> 00:42:11.860
like normal Git work on one hand,


00:42:11.860 --> 00:42:13.600
but on the other, like,


00:42:13.600 --> 00:42:15.000
I'd have to think for a while to figure out


00:42:15.000 --> 00:42:16.360
how to get it to draw that out.


00:42:16.360 --> 00:42:17.660
So that's pretty cool too.


00:42:19.320 --> 00:42:24.600
That's one of the main reasons why I switched my blog to Hugo, so that blog posts count


00:42:24.600 --> 00:42:25.600
as Git commits.


00:42:25.600 --> 00:42:26.600
>> Exactly, double dip.


00:42:26.600 --> 00:42:27.600
>> Yeah.


00:42:27.600 --> 00:42:28.600
>> Nice.


00:42:28.600 --> 00:42:32.440
Well, that's what I brought for the jokes.


00:42:32.440 --> 00:42:33.440
>> Nice.


00:42:33.440 --> 00:42:35.880
Well, thanks, everybody, for showing up.


00:42:35.880 --> 00:42:39.320
Thanks, Emily, for showing up here, and also for the Walrus operator.


00:42:39.320 --> 00:42:40.320
Love it.


00:42:40.320 --> 00:42:41.320
>> Yeah.


00:42:41.320 --> 00:42:42.360
>> And we'll see everybody next week.

