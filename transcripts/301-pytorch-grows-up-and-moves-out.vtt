
00:00:00.000 --> 00:00:05.360
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.360 --> 00:00:10.000
This is episode 301, recorded September 13th, 2022.


00:00:10.000 --> 00:00:11.200
And I am Brian Okken.


00:00:11.200 --> 00:00:12.480
And I'm Michael Kennedy.


00:00:12.480 --> 00:00:14.240
And we're listening.


00:00:14.240 --> 00:00:16.880
Anyway.


00:00:16.880 --> 00:00:17.600
Hey Brian.


00:00:17.600 --> 00:00:23.360
Before we get started, we do have a sponsor, Microsoft for smart startups this week.


00:00:23.360 --> 00:00:24.240
So that's cool.


00:00:24.240 --> 00:00:24.720
Thank you.


00:00:24.720 --> 00:00:26.160
We'll talk about them later.


00:00:26.160 --> 00:00:28.800
And what do you have for us first, Michael?


00:00:28.800 --> 00:00:30.160
I want to take you on a journey.


00:00:30.160 --> 00:00:31.920
Let's start at python.org.


00:00:31.920 --> 00:00:35.360
I've mentioned this before and it's been a while and not very many times,


00:00:35.360 --> 00:00:37.120
and I never noticed this.


00:00:37.120 --> 00:00:39.680
But if you see that code sample,


00:00:39.680 --> 00:00:43.560
there's a set of different code samples that are on the page.


00:00:43.560 --> 00:00:45.080
It's like the REPL,


00:00:45.080 --> 00:00:46.480
and there's a little yellow,


00:00:46.480 --> 00:00:48.480
I guess that's supposed to be a prompt.


00:00:48.480 --> 00:00:50.560
I don't know. It doesn't look like my prompt,


00:00:50.560 --> 00:00:53.680
but you click it though and you wait for a moment.


00:00:53.680 --> 00:00:57.920
What actually happens is it really inside the website,


00:00:57.920 --> 00:01:01.880
opens up a Python REPL that is yours.


00:01:01.880 --> 00:01:02.800
You can run it, right?


00:01:02.800 --> 00:01:06.260
And this online console is hosted from Python anywhere.


00:01:06.260 --> 00:01:07.220
>> Pretty cool.


00:01:07.220 --> 00:01:08.220
>> That is cool, right?


00:01:08.220 --> 00:01:12.800
And it has, I think, stuff like various popular packages.


00:01:12.800 --> 00:01:16.860
So I can type import requests and whatnot without doing any,


00:01:16.860 --> 00:01:18.440
there's no pip install and stuff, right?


00:01:18.440 --> 00:01:20.600
You have access to not just the standard library,


00:01:20.600 --> 00:01:24.320
but you have access to many aspects of the Python ecosystem.


00:01:24.320 --> 00:01:25.400
That's super cool.


00:01:25.400 --> 00:01:28.360
And you can also run not just these terminals,


00:01:28.360 --> 00:01:31.400
but you can also run probably more relevantly.


00:01:31.400 --> 00:01:34.360
Most people is Python web apps.


00:01:34.360 --> 00:01:39.360
So API endpoints or some kind of like sign up application


00:01:39.360 --> 00:01:43.280
for your kids, I don't know, your kids baseball team,


00:01:43.280 --> 00:01:44.660
who knows what, right?


00:01:44.660 --> 00:01:46.460
So they make it pretty easy


00:01:46.460 --> 00:01:48.240
because they've installed a lot of the things


00:01:48.240 --> 00:01:50.820
like Django and Flask and Pyramid.


00:01:50.820 --> 00:01:52.900
So you don't even have to do a lot of setup.


00:01:52.900 --> 00:01:54.740
They configure the servers.


00:01:54.740 --> 00:01:59.060
You get this console in your browser to access it,


00:01:59.060 --> 00:02:00.420
get your own domain name,


00:02:00.420 --> 00:02:02.860
and you can get much of this for free


00:02:02.860 --> 00:02:04.060
with some limitations.


00:02:04.060 --> 00:02:04.900
- Okay.


00:02:04.900 --> 00:02:07.340
- So yeah, so the reason I bring this up is,


00:02:07.340 --> 00:02:09.860
Matthew Kramer sent over a message and said,


00:02:09.860 --> 00:02:13.080
"In light of Heroku canceling their free tiers,"


00:02:13.080 --> 00:02:16.740
which we talked about last week, I think, as an extra.


00:02:16.740 --> 00:02:20.060
And so the Python Anywhere folks said,


00:02:20.060 --> 00:02:22.140
"We are reaffirming our commitment


00:02:22.140 --> 00:02:25.780
to providing free accounts and free resources


00:02:25.780 --> 00:02:26.820
for the Python community.


00:02:26.820 --> 00:02:27.980
How cool is that?


00:02:27.980 --> 00:02:29.860
- That's pretty cool, yeah.


00:02:29.860 --> 00:02:31.260
- Yeah, I think this is great.


00:02:31.260 --> 00:02:32.100
They start out by saying,


00:02:32.100 --> 00:02:34.420
"Look, managing fraud and abuse for free products


00:02:34.420 --> 00:02:36.140
is definitely a challenge."


00:02:36.140 --> 00:02:38.720
I mean, the thing I still really, really miss


00:02:38.720 --> 00:02:40.500
is Firefox Send.


00:02:40.500 --> 00:02:41.340
Do you remember that?


00:02:41.340 --> 00:02:43.700
You used to be able to go and create a temporary,


00:02:43.700 --> 00:02:46.420
encrypted, end-to-end encrypted type of way


00:02:46.420 --> 00:02:48.220
to exchange files, and it was amazing,


00:02:48.220 --> 00:02:52.060
until people started using it for malicious purposes.


00:02:52.060 --> 00:02:55.000
and writing on the back of the domain for Firefox


00:02:55.000 --> 00:02:57.340
that would give it more credit than it otherwise deserves.


00:02:57.340 --> 00:02:59.340
So it's hard to have free things on the internet


00:02:59.340 --> 00:03:02.260
because people are mean, or some people are mean.


00:03:02.260 --> 00:03:03.860
- This is why we can't have nice things.


00:03:03.860 --> 00:03:06.300
- It is absolutely why we can't have nice things.


00:03:06.300 --> 00:03:08.900
But the Python Anywhere folks are saying,


00:03:08.900 --> 00:03:12.300
"Look, we think we can have nice things within limits,


00:03:12.300 --> 00:03:14.960
and we think those limits are not too significant."


00:03:14.960 --> 00:03:17.740
So, you know, both of these companies


00:03:17.740 --> 00:03:19.660
went through an acquisition


00:03:19.660 --> 00:03:21.800
and possibly some kind of cultural shift.


00:03:21.800 --> 00:03:23.340
So it's interesting to think about.


00:03:23.340 --> 00:03:26.740
So Heroku was acquired by Salesforce.


00:03:26.740 --> 00:03:28.860
Salesforce is a pretty interesting company.


00:03:28.860 --> 00:03:30.540
They've got some wild history.


00:03:30.540 --> 00:03:34.460
And then Python Anywhere was acquired by Anaconda Inc.


00:03:34.460 --> 00:03:36.620
So, you know, if you think of who's deeper


00:03:36.620 --> 00:03:37.500
in the Python space,


00:03:37.500 --> 00:03:40.220
certainly Anaconda is more so than Salesforce.


00:03:40.220 --> 00:03:41.940
- Also, I want to point out that the free,


00:03:41.940 --> 00:03:43.220
I mean, free is awesome,


00:03:43.220 --> 00:03:46.140
but if it's not quite enough for you,


00:03:46.140 --> 00:03:48.740
their one step up is only five a month.


00:03:48.740 --> 00:03:50.460
That seems like a reasonable step.


00:03:50.460 --> 00:03:53.060
- Yeah, it seems totally, totally reasonable.


00:03:53.060 --> 00:03:54.860
So they said, look, we think we found a way


00:03:54.860 --> 00:03:55.900
to have free things.


00:03:55.900 --> 00:03:58.020
And in our world, what that looks like


00:03:58.020 --> 00:04:00.780
is a few very minor restrictions.


00:04:00.780 --> 00:04:05.100
So for example, in this terminal that I showed you here,


00:04:05.100 --> 00:04:07.540
the REPL, you, for free accounts,


00:04:07.540 --> 00:04:10.460
you cannot have outbound internet access.


00:04:10.460 --> 00:04:13.980
You can pull things in, but you can't serve stuff.


00:04:13.980 --> 00:04:14.820
What is it?


00:04:14.820 --> 00:04:15.980
You can't serve stuff out


00:04:15.980 --> 00:04:17.660
or something along those lines, right?


00:04:17.660 --> 00:04:20.260
It's like one of the directions is restricted.


00:04:20.260 --> 00:04:21.100
- Okay.


00:04:21.100 --> 00:04:21.940
- Because they said,


00:04:21.940 --> 00:04:24.020
"As soon as we had it completely open,


00:04:24.020 --> 00:04:26.280
"bi-directional, hackers were all over it,


00:04:26.280 --> 00:04:28.140
"doing all kinds of things."


00:04:28.140 --> 00:04:32.240
So let's see, they say explicitly here in the article,


00:04:32.240 --> 00:04:34.660
yeah, they limit outbound internet access.


00:04:34.660 --> 00:04:36.500
That's what it is for free accounts.


00:04:36.500 --> 00:04:38.860
And that dramatically limited the abuse


00:04:38.860 --> 00:04:39.900
that they have to deal with.


00:04:39.900 --> 00:04:42.640
The other problem, running these,


00:04:42.640 --> 00:04:44.220
especially for web apps, for consoles,


00:04:44.220 --> 00:04:45.780
like who cares, it doesn't really matter.


00:04:45.780 --> 00:04:48.660
But if you have a web app that's constantly running,


00:04:48.660 --> 00:04:51.240
probably its biggest resource is memory, right?


00:04:51.240 --> 00:04:52.680
You know, it's using a certain amount of memory


00:04:52.680 --> 00:04:55.400
to keep that Flask or Django app running.


00:04:55.400 --> 00:04:57.440
You don't really shut down the web app


00:04:57.440 --> 00:05:00.200
because the person stops interacting with it, right?


00:05:00.200 --> 00:05:01.780
So it's accounts like that


00:05:01.780 --> 00:05:04.640
where people might wanna create an account to say,


00:05:04.640 --> 00:05:07.000
"Hey, look, I tried out Flask and here's my app.


00:05:07.000 --> 00:05:08.320
I got it on the internet."


00:05:08.320 --> 00:05:10.580
And then they left it alone, they just quit.


00:05:10.580 --> 00:05:12.320
They have no intention of doing anything with it,


00:05:12.320 --> 00:05:15.000
but they didn't bother to shut it down or delete it.


00:05:15.000 --> 00:05:16.120
Right, that's pretty tricky.


00:05:16.120 --> 00:05:20.760
So they basically set up a proof of life scenario here.


00:05:20.760 --> 00:05:23.760
So for a free web app to keep running,


00:05:23.760 --> 00:05:26.760
what you have to do is you have to go and click a button.


00:05:26.760 --> 00:05:29.700
Yes, I want it to still run once every three months.


00:05:29.700 --> 00:05:32.520
- That seems completely reasonable.


00:05:32.520 --> 00:05:33.760
- That seems pretty reasonable, right?


00:05:33.760 --> 00:05:35.340
Four times a year, you gotta click a button.


00:05:35.340 --> 00:05:37.440
You can automate it if you really want it, I suppose.


00:05:37.440 --> 00:05:40.600
And then similarly for accounts,


00:05:40.600 --> 00:05:42.540
if you have a free account


00:05:42.540 --> 00:05:44.120
and you wanna keep your resources,


00:05:44.120 --> 00:05:47.320
you've got to do something similar once a year.


00:05:47.320 --> 00:05:48.520
So you've got to go in and say,


00:05:48.520 --> 00:05:50.400
yeah, yeah, please keep my account active.


00:05:50.400 --> 00:05:51.480
And that's pretty much it.


00:05:51.480 --> 00:05:55.100
So with those don't seem like terrible restrictions


00:05:55.100 --> 00:05:58.560
and they get to keep offering free Python as a service.


00:05:58.560 --> 00:06:00.920
- Yeah, yeah, I think that's completely reasonable.


00:06:00.920 --> 00:06:01.760
Yeah, cool.


00:06:01.760 --> 00:06:02.580
- Yeah, yeah, pretty cool.


00:06:02.580 --> 00:06:06.000
Anyway, thanks Matthew for sending that in.


00:06:06.000 --> 00:06:07.360
- Yeah, it is neat that people can,


00:06:07.360 --> 00:06:09.600
like especially like the example you put,


00:06:09.600 --> 00:06:11.280
you mentioned if so,


00:06:11.280 --> 00:06:14.200
I learned Flask and I made this Flask web app,


00:06:14.200 --> 00:06:17.820
and I want to at least show my teacher and my friends and everything,


00:06:17.820 --> 00:06:21.500
and my parents maybe, and leave it where that's from.


00:06:21.500 --> 00:06:24.260
>> Exactly. I want to put up a school project,


00:06:24.260 --> 00:06:28.060
but I don't know Linux and I want to go to big Cloud providers.


00:06:28.060 --> 00:06:29.460
I just want to get it up and running.


00:06:29.460 --> 00:06:29.760
>> Yeah.


00:06:29.760 --> 00:06:32.340
>> That's great. I need something for my Raspberry Pi that


00:06:32.340 --> 00:06:35.700
shows automation for my school project or whatever.


00:06:35.700 --> 00:06:36.580
>> Yeah.


00:06:36.580 --> 00:06:37.740
>> All right. What's next?


00:06:37.740 --> 00:06:40.980
>> I would like to talk about Python tooling.


00:06:40.980 --> 00:06:51.180
So I ran across this, not sure how, but there's an article called Python tooling could be much better, much faster, much, much faster.


00:06:51.180 --> 00:06:53.380
And this is by Charlie Marsh.


00:06:53.380 --> 00:06:58.180
And he, so he, apparently this is a thing that's going on.


00:06:58.180 --> 00:07:06.380
I don't have an ear to the JavaScript world, but apparently the JavaScript ecosystem as well is thinking we need to make sure that our tools are really fast.


00:07:06.380 --> 00:07:11.380
And Charlie said, "Maybe the Python tool should be really fast too."


00:07:11.380 --> 00:07:17.220
So what he did was he's putting together, he put together a thing called Ruff,


00:07:17.220 --> 00:07:20.060
which is, he says it's a proof of concept.


00:07:20.060 --> 00:07:22.660
It's a Python linter, kind of like Flakate.


00:07:22.660 --> 00:07:24.420
It's written in Rust.


00:07:24.420 --> 00:07:28.460
And it's like 150 times faster or something like that.


00:07:28.460 --> 00:07:29.540
>> Wow.


00:07:29.540 --> 00:07:32.740
>> And I was like, "Well, it doesn't cover everything."


00:07:32.740 --> 00:07:38.620
but it's covering most of the stuff that Flake 8 covers without any plugins.


00:07:38.620 --> 00:07:42.820
I guess, well, without the three main plugins that it ships with.


00:07:42.820 --> 00:07:46.100
It's pretty neat.


00:07:46.100 --> 00:07:48.980
I downloaded it, tried it out.


00:07:48.980 --> 00:07:53.500
We'll take a look at the GitHub repos here.


00:07:53.500 --> 00:07:56.540
It's pretty awesome.


00:07:56.540 --> 00:07:58.260
I downloaded it, tried it on.


00:07:58.260 --> 00:08:00.180
Granted, I had a small project.


00:08:00.180 --> 00:08:03.580
I had a small project where Flake 8 takes like a third of a second.


00:08:03.580 --> 00:08:05.860
But even at a third of a second,


00:08:05.860 --> 00:08:08.380
I was interested to know that I can


00:08:08.380 --> 00:08:10.700
detect that it's doing something and then coming back.


00:08:10.700 --> 00:08:12.700
But that's fast enough for me.


00:08:12.700 --> 00:08:17.580
But I ran rough and I just returned.


00:08:17.580 --> 00:08:20.460
I'm like, "Oh, something's broken because it's not doing anything."


00:08:20.460 --> 00:08:21.220
>> It didn't do anything.


00:08:21.220 --> 00:08:23.220
>> It didn't do anything. So I ran it again and


00:08:23.220 --> 00:08:25.500
then looked at the output and it said found zero things.


00:08:25.500 --> 00:08:29.100
I'm like, "Well, maybe I'm not pointing it at my code or something."


00:08:29.100 --> 00:08:33.460
So I intentionally added some errors,


00:08:33.460 --> 00:08:34.820
and it found those errors,


00:08:34.820 --> 00:08:37.860
and it was in 0.01 seconds or something.


00:08:37.860 --> 00:08:40.500
It came back so fast.


00:08:40.500 --> 00:08:44.900
So I'm pretty blown away by it.


00:08:44.900 --> 00:08:46.980
I think other people are too.


00:08:46.980 --> 00:08:49.060
I took a look at the stars,


00:08:49.060 --> 00:08:50.500
I'm like, "How long has this been around?"


00:08:50.500 --> 00:08:54.260
It only came in at the end of August.


00:08:54.260 --> 00:08:55.820
So a couple of weeks,


00:08:55.820 --> 00:08:58.700
And we're at, what, 1.8?


00:08:58.700 --> 00:09:00.500
>> Yeah, that's fantastic.


00:09:00.500 --> 00:09:02.700
>> 1.8 thousand stars. So it's pretty cool.


00:09:02.700 --> 00:09:04.500
>> That's very cool.


00:09:04.500 --> 00:09:07.140
>> There's a hat tip to Flake 8 and stuff.


00:09:07.140 --> 00:09:11.220
And so there's a desire to make it.


00:09:11.220 --> 00:09:12.860
It doesn't do everything yet,


00:09:12.860 --> 00:09:14.220
but they're working on it.


00:09:14.220 --> 00:09:15.900
It's compatible with Black.


00:09:15.900 --> 00:09:21.820
And yeah, so a whole bunch of rules already built into it already.


00:09:21.820 --> 00:09:25.180
And I think this is also a cool project if people wanted


00:09:25.180 --> 00:09:28.380
to help out with the, or take a look at a project


00:09:28.380 --> 00:09:31.580
that's a Rust Python hybrid sort of thing.


00:09:31.580 --> 00:09:33.820
This is kind of a neat project to take a look at.


00:09:33.820 --> 00:09:34.700
- Yeah, it looks very neat.


00:09:34.700 --> 00:09:37.780
Can you pull up the star count thing?


00:09:37.780 --> 00:09:38.620
- Yeah.


00:09:38.620 --> 00:09:40.340
- Is it star-history.com?


00:09:40.340 --> 00:09:44.480
Yeah, hat tip to the XKCD type graph there, huh?


00:09:44.480 --> 00:09:46.540
- Yeah, I actually love star history.


00:09:46.540 --> 00:09:48.180
It's kind of fun to look at.


00:09:48.180 --> 00:09:51.800
Have you used this before?


00:09:51.800 --> 00:09:53.140
- I've never used it, what do you do?


00:09:53.140 --> 00:09:57.020
You just pop in a GitHub account.


00:09:57.020 --> 00:10:00.380
So for this one, what I went to the GitHub thing and


00:10:00.380 --> 00:10:05.100
just took the GitHub address and popped it in.


00:10:05.100 --> 00:10:07.380
>> Nice. This is fantastic. I really like it.


00:10:07.380 --> 00:10:07.900
>> That's it.


00:10:07.900 --> 00:10:10.060
>> Okay. Well, now I definitely,


00:10:10.060 --> 00:10:11.540
and you can compare them too.


00:10:11.540 --> 00:10:16.540
I see. So you can put say like Flake 8 on there and it would show you.


00:10:16.540 --> 00:10:20.860
>> Yeah. I'd have to go look up what the GitHub repo is for Flake 8.


00:10:20.860 --> 00:10:22.340
I don't know it off the top of my head.


00:10:22.340 --> 00:10:27.380
Yeah, of course. But this is neat. I like it. I'm gonna have to play with star history, but also rough.


00:10:27.380 --> 00:10:29.700
Yeah, very good. Very good.


00:10:29.700 --> 00:10:37.140
Well, cool. Before we get going any further, we need to thank Microsoft for Startups Founders Hub.


00:10:37.140 --> 00:10:42.740
And thank you for sponsoring the episode. They've been sponsoring a lot this year, and we really appreciate it.


00:10:42.740 --> 00:10:49.340
So starting a business is hard. By some estimates, over 90% of startups will go out of business in their first year.


00:10:49.340 --> 00:10:58.080
With this in mind, Microsoft for Startups set out to understand what startups need to be successful and create a digital platform to help overcome those challenges.


00:10:58.080 --> 00:11:00.340
And that's Microsoft for Startups Founders Hub.


00:11:00.340 --> 00:11:06.180
The Founders Hub provides all founders at any stage with free resources to help solve startup challenges.


00:11:06.180 --> 00:11:14.640
The platform provides technology benefits, access to expert guidance and skilling resources, mentorship and networking connections and so much more.


00:11:14.640 --> 00:11:17.880
Unlike others in the industry, Microsoft for startups,


00:11:17.880 --> 00:11:21.160
Founders Hub doesn't require startups to be investor backed


00:11:21.160 --> 00:11:23.640
or third party validated to participate.


00:11:23.640 --> 00:11:26.040
Founders Hub is truly open to all.


00:11:26.040 --> 00:11:26.880
So what do you get?


00:11:26.880 --> 00:11:29.480
You speed up development with free access to GitHub


00:11:29.480 --> 00:11:33.360
and the Microsoft Cloud with the ability to unlock credits over time.


00:11:33.360 --> 00:11:34.960
And to help startups innovate,


00:11:34.960 --> 00:11:39.080
Founders Hub is partnering with innovative companies like OpenAI,


00:11:39.080 --> 00:11:41.760
a global leader in AI research and development,


00:11:41.760 --> 00:11:44.400
to provide exclusive benefits and discounts.


00:11:44.400 --> 00:11:53.040
Through the founders hub becoming a founder is no longer who you know you have access to their mentorship network giving you access


00:11:53.040 --> 00:11:57.620
to a pool of hundreds of mentors across a range of disciplines across areas like


00:11:57.620 --> 00:12:05.860
idea validation fundraising management and coaching sales and marketing as well as specific technical stress points you'll be able to look


00:12:05.860 --> 00:12:11.720
you believe you'll be able to book a one to one meeting with the mentors many of whom are former


00:12:11.680 --> 00:12:15.680
former founders themselves make your idea reality today


00:12:15.680 --> 00:12:19.680
with the critical support you'll get from Microsoft for Startups Founders Hub.


00:12:19.680 --> 00:12:25.680
To join the program, visit pythonbytes.fm/foundershub2022


00:12:25.680 --> 00:12:28.380
and of course that link is in our show notes.


00:12:28.380 --> 00:12:30.180
Awesome. Thanks Microsoft. Really appreciate it.


00:12:30.180 --> 00:12:31.580
And that's such a cool program.


00:12:31.580 --> 00:12:34.380
If I were doing a startup, I would consider reaching out and applying.


00:12:34.380 --> 00:12:38.880
But my startup has started and it's cruising along, keeping me extremely busy.


00:12:38.880 --> 00:12:41.280
So it's all good. More on that later actually, Brian.


00:12:41.280 --> 00:12:47.520
Yeah. Right now, let's talk about a startup that's started a while ago called Meta. Have you heard of it?


00:12:47.520 --> 00:12:54.720
Facebook? Yeah, I've heard a few things. So many of the machine learning frameworks are actually


00:12:54.720 --> 00:13:02.960
brought out of internal projects at places like Google, Facebook, other large Silicon Valley type


00:13:02.960 --> 00:13:10.880
companies. And PyTorch comes from Meta. Okay. And, you know, Angular is Google and things like this.


00:13:10.880 --> 00:13:13.380
And I think that that can also flutter.


00:13:13.380 --> 00:13:16.680
Things like that can cause a little bit of concern.


00:13:16.680 --> 00:13:18.480
Like, well, if you depend on this project,


00:13:18.480 --> 00:13:22.180
you're kind of buying into the Facebook world


00:13:22.180 --> 00:13:24.680
or the Google world or whichever world


00:13:24.680 --> 00:13:26.380
that that framework came from.


00:13:26.380 --> 00:13:30.280
So the news here is that Meta is spinning off PyTorch


00:13:30.280 --> 00:13:34.280
into the PyTorch Foundation and making it vendor neutral


00:13:34.280 --> 00:13:38.180
by making it basically part of the Linux Foundation.


00:13:38.180 --> 00:13:39.180
- Okay, interesting.


00:13:39.180 --> 00:13:40.020
- Cool, right?


00:13:40.020 --> 00:13:43.540
- Yeah, so if you're interested in PyTorch,


00:13:43.540 --> 00:13:46.260
well, it's a little more open than it used to be.


00:13:46.260 --> 00:13:49.700
And this is the article I'm linking to for the announcement.


00:13:49.700 --> 00:13:51.580
You can check out their direct blog post if you want,


00:13:51.580 --> 00:13:54.100
but I'm linking to the Ars Technica article.


00:13:54.100 --> 00:13:55.780
I love the comment section


00:13:55.780 --> 00:13:58.980
and just the type of discussion around some of these things.


00:13:58.980 --> 00:13:59.940
In Ars Technica,


00:13:59.940 --> 00:14:02.980
although maybe this is not the best example of that,


00:14:02.980 --> 00:14:04.740
'cause there's some silly questions in the comments,


00:14:04.740 --> 00:14:06.500
but anyway, says,


00:14:06.500 --> 00:14:12.580
PyTorch, which powers Tesla Autopilot and 150,000 other projects will join the Linux Foundation.


00:14:12.580 --> 00:14:19.060
So that's pretty cool. Let me see here. So they say the PyTorch Foundation will strive to adhere


00:14:19.060 --> 00:14:25.940
to four principles remaining open, maintaining neutral branding, staying fair, and forging a


00:14:25.940 --> 00:14:30.580
strong technical identity. And according to Meta, the transition to the PyTorch Foundation will not


00:14:30.580 --> 00:14:36.020
affect any PyTorch code. I'm guessing no namespaces change or anything like that.


00:14:36.020 --> 00:14:42.180
Yeah, the relevant part, I guess, is that the governing board will include representatives


00:14:42.180 --> 00:14:49.700
from Nvidia, Meta, Google, Microsoft, Amazon, and AMD. Okay. Yeah. So, yeah. So why do you know?


00:14:49.700 --> 00:14:54.740
Well, I think just to make it feel a little more truly open source and a little more


00:14:54.740 --> 00:14:58.900
independent, not something that's going to... Less completely controlled by one company.


00:14:58.900 --> 00:15:01.180
- Yeah, exactly, and maybe there's,


00:15:01.180 --> 00:15:04.980
I think especially with AI, machine learning frameworks,


00:15:04.980 --> 00:15:08.220
there's a little more concern that some implicit,


00:15:08.220 --> 00:15:09.940
and bias is not quite the right word,


00:15:09.940 --> 00:15:14.020
but some implicit influences that are being driven


00:15:14.020 --> 00:15:17.020
by the company behind it will influence the way


00:15:17.020 --> 00:15:18.460
that maybe it makes decisions.


00:15:18.460 --> 00:15:21.060
So if the algorithm is slightly tweaked in ways


00:15:21.060 --> 00:15:24.300
to help Facebook do more Facebook-like things,


00:15:24.300 --> 00:15:26.520
well, maybe it becomes less of a good framework


00:15:26.520 --> 00:15:28.860
to help you drive a car, I don't know.


00:15:28.860 --> 00:15:30.660
right, something like that, right?


00:15:30.660 --> 00:15:31.900
Whereas if it's a web framework,


00:15:31.900 --> 00:15:34.400
it's kind of like, dude, these are pipes.


00:15:34.400 --> 00:15:35.540
They just do pipe stuff.


00:15:35.540 --> 00:15:38.320
They carry the HTTP over, they return it.


00:15:38.320 --> 00:15:41.500
There's no concern that it's gonna do stuff


00:15:41.500 --> 00:15:45.660
a little more interested in raising engagement in social


00:15:45.660 --> 00:15:48.000
because it just is irrelevant to it, right?


00:15:48.000 --> 00:15:49.160
Whereas maybe with machine learning,


00:15:49.160 --> 00:15:50.780
that's more of a concern.


00:15:50.780 --> 00:15:52.340
Like I did highlight the comments.


00:15:52.340 --> 00:15:55.280
And so, much like you asked, I respect this move,


00:15:55.280 --> 00:15:57.240
but I wonder why anybody would want to give up


00:15:57.240 --> 00:16:00.360
such a value control of such a valuable software package.


00:16:00.360 --> 00:16:02.360
And why do Microsoft and Google give things away?


00:16:02.360 --> 00:16:03.840
I mean, obviously like it's just


00:16:03.840 --> 00:16:06.160
the benefits of open source, right?


00:16:06.160 --> 00:16:09.160
It's not the framework that gives them the magic,


00:16:09.160 --> 00:16:10.600
it's the data.


00:16:10.600 --> 00:16:12.680
They can, you know, train the framework up on


00:16:12.680 --> 00:16:14.480
and then apply the framework to,


00:16:14.480 --> 00:16:16.320
and they're not giving away the Facebook data.


00:16:16.320 --> 00:16:17.680
So I don't see a big problem.


00:16:17.680 --> 00:16:20.400
But what was an interesting conversation is that,


00:16:20.400 --> 00:16:23.720
for example, Google, their version of this is TensorFlow,


00:16:23.720 --> 00:16:27.320
but Google is also a part of the representative group.


00:16:27.320 --> 00:16:28.320
That's interesting, right?


00:16:28.320 --> 00:16:29.600
- Yeah, that is interesting.


00:16:29.600 --> 00:16:32.040
- The people in the comments basically said,


00:16:32.040 --> 00:16:34.760
well, look, much of the research field


00:16:34.760 --> 00:16:38.240
has moved to centralize on PyTorch,


00:16:38.240 --> 00:16:40.120
and Google has a bunch of research people,


00:16:40.120 --> 00:16:41.760
and it's still relevant to them as well.


00:16:41.760 --> 00:16:43.600
- And it's a big company.


00:16:43.600 --> 00:16:45.040
- Yeah, and it's a big company.


00:16:45.040 --> 00:16:46.380
There's like a thousand things.


00:16:46.380 --> 00:16:47.960
Let's see, Paul Cutler, hey, Paul,


00:16:47.960 --> 00:16:49.080
fellow podcaster out there says,


00:16:49.080 --> 00:16:51.040
it helps to be more neutral or perceived neutral.


00:16:51.040 --> 00:16:52.720
The Lindex Foundation is a good steward


00:16:52.720 --> 00:16:54.760
for projects like that.


00:16:54.760 --> 00:16:58.400
Yeah, and Pamphil says also in the quote war,


00:16:58.400 --> 00:17:00.800
you know, in the battle for Mindshare, I guess,


00:17:00.800 --> 00:17:03.240
against TensorFlow, it's a killer move to say,


00:17:03.240 --> 00:17:04.300
well, which one are you gonna choose?


00:17:04.300 --> 00:17:05.720
Well, why not the more open one?


00:17:05.720 --> 00:17:06.560
- Yeah, yep.


00:17:06.560 --> 00:17:07.520
- Yeah, for sure.


00:17:07.520 --> 00:17:08.720
Well, good thoughts.


00:17:08.720 --> 00:17:09.840
- It's a good move, yeah.


00:17:09.840 --> 00:17:10.680
- It is.


00:17:10.680 --> 00:17:11.880
All right, well, well done, Meta.


00:17:11.880 --> 00:17:12.780
- Yeah, well done.


00:17:12.780 --> 00:17:16.320
Well, I just wanna take it back to simple things


00:17:16.320 --> 00:17:17.480
like strings.


00:17:17.480 --> 00:17:20.720
So I actually kind of really enjoy this every once in a while


00:17:20.720 --> 00:17:23.480
They're just, especially people coming from,


00:17:23.480 --> 00:17:28.000
you know, I came from C++ and other languages,


00:17:28.000 --> 00:17:30.440
Perl and whatnot, into Python.


00:17:30.440 --> 00:17:33.960
And so it's good to, sometimes I forget exactly


00:17:33.960 --> 00:17:35.520
how powerful a string is, even,


00:17:35.520 --> 00:17:37.160
just simple things in Python.


00:17:37.160 --> 00:17:39.440
So this is an article from Trey Hunter


00:17:39.440 --> 00:17:41.960
called "Python String Methods to Know."


00:17:41.960 --> 00:17:44.640
And there's a, and this is something that's,


00:17:44.640 --> 00:17:46.640
I mean, we see articles like this every once in a while,


00:17:46.640 --> 00:17:49.600
but I like having one, a newer one,


00:17:49.600 --> 00:17:53.160
because some cool stuff came in in 3.9.


00:17:53.160 --> 00:17:55.680
I like how he broke it out too.


00:17:55.680 --> 00:17:59.680
He broke out the most useful string things to know,


00:17:59.680 --> 00:18:02.960
like join and split and replace,


00:18:02.960 --> 00:18:05.480
and then strip, of course,


00:18:05.480 --> 00:18:08.840
and then also he has it laid out with related methods.


00:18:08.840 --> 00:18:13.080
For instance, strip has Rstrip and Lstrip for the left and right.


00:18:13.080 --> 00:18:17.440
Then a couple of things that came out recently,


00:18:17.440 --> 00:18:20.400
I think the remove prefix and remove suffix


00:18:20.400 --> 00:18:22.920
are things that came out in 3.9, I believe.


00:18:22.920 --> 00:18:25.760
- Yeah, everyone thought that would not,


00:18:25.760 --> 00:18:28.240
many people thought strip, if you gave it a substring,


00:18:28.240 --> 00:18:29.680
would take that substring off.


00:18:29.680 --> 00:18:31.160
- Yeah. - Really.


00:18:31.160 --> 00:18:32.200
- Yeah, and it doesn't.


00:18:32.200 --> 00:18:37.200
So the, yeah, remove prefix was added in 3.9.


00:18:37.200 --> 00:18:41.040
So these are like really kind of cool things


00:18:41.040 --> 00:18:44.640
to just be able to do string manipulation quickly.


00:18:44.640 --> 00:18:48.320
and it's a good reminder as you jump in,


00:18:48.320 --> 00:18:51.440
just because people manipulate strings all the time.


00:18:51.440 --> 00:18:54.520
There's some power here you should be aware of.


00:18:54.520 --> 00:18:56.680
Then if all of these seem easy,


00:18:56.680 --> 00:18:59.520
at the bottom he's got learn these methods later,


00:18:59.520 --> 00:19:02.960
like encode and title and capitalize.


00:19:02.960 --> 00:19:07.080
I forget about this all the time that we have the title function.


00:19:07.080 --> 00:19:08.680
>> Title, interesting.


00:19:08.680 --> 00:19:10.320
I did forget about that too actually.


00:19:10.320 --> 00:19:13.360
>> To title case a string and that's pretty cool.


00:19:13.360 --> 00:19:15.360
and justification even.


00:19:15.360 --> 00:19:16.760
Neat.


00:19:16.760 --> 00:19:18.760
I didn't know isIdentifier was a thing.


00:19:18.760 --> 00:19:20.760
I learned that new looking at this.


00:19:20.760 --> 00:19:23.760
So check if a string is a valid Python identifier.


00:19:23.760 --> 00:19:25.760
Okay, so this is kind of a quick one.


00:19:25.760 --> 00:19:28.060
So I wanted to throw in another one string related.


00:19:28.060 --> 00:19:30.960
I use fstrings a lot and I use numbers a lot.


00:19:30.960 --> 00:19:34.560
And so I ran across this


00:19:34.560 --> 00:19:37.560
Python fstring number formatting cheat sheet.


00:19:37.560 --> 00:19:40.760
It's actually pretty darn useful.


00:19:40.760 --> 00:19:43.220
I always have a cheat sheet like this around.


00:19:43.220 --> 00:19:45.080
I used to have one for C++,


00:19:45.080 --> 00:19:46.460
then I had one for Perl,


00:19:46.460 --> 00:19:49.240
and now I've got one for Python.


00:19:49.240 --> 00:19:50.800
It's a nice layout.


00:19:50.800 --> 00:19:53.680
You got float representations and how to print those,


00:19:53.680 --> 00:19:58.340
how to replace a field within an expression.


00:19:58.340 --> 00:20:00.520
It's neat, field replacement.


00:20:00.520 --> 00:20:05.320
But the main thing I like around it is all the number format things.


00:20:05.320 --> 00:20:07.640
To remember, if you want to have


00:20:07.640 --> 00:20:10.860
a certain number of digits on the right of the decimal point.


00:20:10.860 --> 00:20:13.740
How do you do that? If you want it scientific case with


00:20:13.740 --> 00:20:18.620
like e to the plus three or something, how to do that.


00:20:18.620 --> 00:20:21.200
These are cool things, especially if you're dealing with


00:20:21.200 --> 00:20:23.860
science and numbers and engineering and whatnot.


00:20:23.860 --> 00:20:27.740
>> The percent one is great because I've always just said,


00:20:27.740 --> 00:20:30.420
all right, well, if I have 0.5 and I want to put it,


00:20:30.420 --> 00:20:33.720
I'll multiply it by 100 and then treat it as a float.


00:20:33.720 --> 00:20:36.180
But you can just do a percent and it will


00:20:36.180 --> 00:20:38.140
multiply it by 100 and treat it as a float for you.


00:20:38.140 --> 00:20:38.580
It's great.


00:20:38.580 --> 00:20:39.860
>> I actually didn't know that.


00:20:39.860 --> 00:20:40.820
>> I didn't either.


00:20:40.820 --> 00:20:42.020
>> Yeah, neat.


00:20:42.020 --> 00:20:44.060
>> Yes. Save a line of code there.


00:20:44.060 --> 00:20:44.660
>> Nice.


00:20:44.660 --> 00:20:46.120
>> A little bit of memory.


00:20:46.120 --> 00:20:47.860
>> Yeah. Cool.


00:20:47.860 --> 00:20:49.500
>> Awesome. Yeah, this is great.


00:20:49.500 --> 00:20:55.740
I love the cheat sheets and there's a lot you can do in either f strings or just.format style.


00:20:55.740 --> 00:20:59.540
It's the same format string that goes on the end there,


00:20:59.540 --> 00:21:00.740
but this is cool.


00:21:00.740 --> 00:21:02.860
Like I said, I learned something with the percent already.


00:21:02.860 --> 00:21:05.660
>> All right. Are those our items?


00:21:05.660 --> 00:21:12.380
Those are items. How about some extras? Yeah, I've got a couple and then we have a really big one that I'm excited about so


00:21:12.380 --> 00:21:18.220
One of the in back in episode 271 we talked to that talked about


00:21:18.220 --> 00:21:24.280
And that was back in February. We talked about Seaborn was trying out a new object interface and


00:21:24.280 --> 00:21:31.640
So Seaborn just announced that Seaborn the release of Seaborn 0.12 does have that object interface


00:21:31.640 --> 00:21:37.040
So if you're waiting for an official release to use the object interface, it's here.


00:21:37.040 --> 00:21:39.040
So go out and use it.


00:21:39.040 --> 00:21:47.240
The other thing we've talked about lazy imports a couple times on the show, PEP 690.


00:21:47.240 --> 00:21:51.840
There was an interesting discussion on LWNNet.


00:21:51.840 --> 00:21:53.840
I don't know how to say that.


00:21:53.840 --> 00:21:59.240
Anyway, there's a cool discussion there about talking about some of the pros and cons.


00:21:59.240 --> 00:22:10.640
But anyway, the pep says it's on, it's still in draft mode, so it's not, they haven't made a decision yet, but it's targeting 312. I kind of hope it goes in.


00:22:10.640 --> 00:22:19.200
Yeah, I kind of do too. Yeah. It seems like a good one, right? You get the performance of not importing things unless you actually use them.


00:22:19.200 --> 00:22:25.520
There's always those edge cases, right? With enough people living at the edges, then it can become an issue, I guess.


00:22:25.520 --> 00:22:28.840
Yeah, and the discussion around how to turn it on,


00:22:28.840 --> 00:22:31.000
whether you turn it on by default or whether you


00:22:31.000 --> 00:22:34.400
do a flag or have to turn it on in your code


00:22:34.400 --> 00:22:36.400
with the comment that like


00:22:36.400 --> 00:22:38.960
if you're doing a library,


00:22:38.960 --> 00:22:41.320
you don't know how somebody's going to use it, so


00:22:41.320 --> 00:22:43.320
maybe not turn it on, but if you're doing


00:22:43.320 --> 00:22:46.200
or package or something, but if you're doing


00:22:46.200 --> 00:22:49.520
an application, then you're testing everything and you know


00:22:49.520 --> 00:22:51.080
whether or not it's going to work, so


00:22:51.080 --> 00:22:52.240
you can turn it on.


00:22:52.240 --> 00:22:53.600
Give it a try, see if it works, yeah.


00:22:53.600 --> 00:22:54.400
See if it's worth it.


00:22:54.400 --> 00:22:57.900
Indeed, before we move on to my item, I just want to say,


00:22:57.900 --> 00:23:00.400
whilst out there says, "First time watching the show,"


00:23:00.400 --> 00:23:02.040
usually just check into the audio.


00:23:02.040 --> 00:23:03.780
I just want to take this chance to say,


00:23:03.780 --> 00:23:05.660
if you're listening to the show


00:23:05.660 --> 00:23:08.580
and you want to maybe get your comments featured


00:23:08.580 --> 00:23:12.160
or you want to see what we look like on video, I suppose,


00:23:12.160 --> 00:23:13.000
check us out.


00:23:13.000 --> 00:23:16.760
We usually stream on Tuesdays at noon Pacific time.


00:23:16.760 --> 00:23:18.540
And we're going to try to stick to that for a while.


00:23:18.540 --> 00:23:21.140
Also, they say, "Like the browser choice, Vivaldi."


00:23:21.140 --> 00:23:21.980
It's very cool.


00:23:21.980 --> 00:23:23.920
Like you and I are both using Vivaldi for this


00:23:23.920 --> 00:23:26.120
and many other things, of course.


00:23:26.120 --> 00:23:27.800
Also check out Qt Browser.


00:23:27.800 --> 00:23:30.440
That we actually covered back in episode 291


00:23:30.440 --> 00:23:31.720
about three months ago.


00:23:31.720 --> 00:23:33.840
So people can check that out if they're interested.


00:23:33.840 --> 00:23:35.280
All right, onto my item.


00:23:35.280 --> 00:23:36.120
>> Yeah.


00:23:36.120 --> 00:23:38.880
>> Hey, Brian, tell me about PyTest.


00:23:38.880 --> 00:23:41.980
>> Yes, so we've been working on this for a while


00:23:41.980 --> 00:23:43.440
and it's live now.


00:23:43.440 --> 00:23:47.760
So there's a PyTest course now at,


00:23:47.760 --> 00:23:49.080
how do people get there?


00:23:49.080 --> 00:23:51.960
>> They just go to talkpython.fm,


00:23:51.960 --> 00:23:55.000
click on courses and it will be right at the top.


00:23:55.000 --> 00:23:58.160
So yeah, super easy to get there.


00:23:58.160 --> 00:23:59.520
And you just hit the courses.


00:23:59.520 --> 00:24:02.680
It's like the very first one because it is the newest one released


00:24:02.680 --> 00:24:04.920
just over the weekend basically.


00:24:04.920 --> 00:24:06.480
And people can check this out.


00:24:06.480 --> 00:24:11.760
It's a four hour course that goes through all things PyTest.


00:24:11.760 --> 00:24:13.960
And it's really good for getting,


00:24:13.960 --> 00:24:19.320
I think it's good for getting a sense of what is the spectrum of features of PyTest.


00:24:19.320 --> 00:24:48.400
Right? Like it's, we've all seen courses that are like, well, red, green refactor, let's go, you know, and it's, it's fine. And it's, it's, those are useful ways to learn testing. But if you really want to take advantage of modern Python testing, you know, what are, what are the ways to structure your code? What are the different things that Pyctest can do and some of the plugins that make it better, like xfail and whatnot. I think you did a really good job putting all those together. So especially the


00:24:48.400 --> 00:24:51.880
of fixtures and programmatization and say that fast.


00:24:51.880 --> 00:24:53.800
>> If anybody has the book, for instance,


00:24:53.800 --> 00:24:56.760
I think and you've read the book and it's,


00:24:56.760 --> 00:24:58.780
thank you if you've read the book.


00:24:58.780 --> 00:25:03.400
But a lot of the material is related to the content in the book,


00:25:03.400 --> 00:25:07.080
but the material of this course being that it's intended to be like,


00:25:07.080 --> 00:25:09.560
yeah, what is it? 4.7 hours or 3.7,


00:25:09.560 --> 00:25:11.180
I don't know, it's around four hours or something.


00:25:11.180 --> 00:25:12.080
>> Four-ish.


00:25:12.080 --> 00:25:15.920
>> Four-ish. We edited.


00:25:15.920 --> 00:25:18.320
So we took out a lot of the material from the book


00:25:18.320 --> 00:25:22.000
to focus really on ramping people up


00:25:22.000 --> 00:25:25.000
and showing them the complete power of PyTest.


00:25:25.000 --> 00:25:27.600
And I think people can run with it as is,


00:25:27.600 --> 00:25:29.640
with the content of the book,


00:25:29.640 --> 00:25:31.920
for quite a while before they hit roadblocks


00:25:31.920 --> 00:25:33.640
and need to learn a little bit more.


00:25:33.640 --> 00:25:36.320
So I think this would be great


00:25:36.320 --> 00:25:38.400
for teams to take together too.


00:25:38.400 --> 00:25:39.240
- Yeah, absolutely.


00:25:39.240 --> 00:25:41.480
That'd be great, you know, get together,


00:25:41.480 --> 00:25:44.760
spend a week, one hour each, like a lunchtime,


00:25:44.760 --> 00:25:46.460
and get lunch together, sit in a conference room,


00:25:46.460 --> 00:25:47.860
and watch it together maybe.


00:25:47.860 --> 00:25:49.140
- Yeah, that'd be cool.


00:25:49.140 --> 00:25:50.740
So yeah, very excited.


00:25:50.740 --> 00:25:52.160
- Yay, yay, awesome.


00:25:52.160 --> 00:25:53.180
I'm excited for you as well.


00:25:53.180 --> 00:25:55.100
And like I said, I learned a bunch from it.


00:25:55.100 --> 00:25:56.020
I thought it was a great course.


00:25:56.020 --> 00:25:58.220
So really excited to be offering it.


00:25:58.220 --> 00:26:01.420
And people go check it out, talkbython.fm.


00:26:01.420 --> 00:26:03.060
Click on courses, it'll be right there.


00:26:03.060 --> 00:26:03.880
- Awesome.


00:26:03.880 --> 00:26:05.380
- All right, that's not very funny.


00:26:05.380 --> 00:26:06.980
It's very useful, very cool, but not that funny.


00:26:06.980 --> 00:26:08.820
I caught something that's pretty funny though.


00:26:08.820 --> 00:26:09.660
- Okay.


00:26:09.660 --> 00:26:11.620
- Okay, before we do the joke though,


00:26:11.620 --> 00:26:12.580
let me just really quick,


00:26:12.580 --> 00:26:13.940
handful of other audience follow-ups.


00:26:13.940 --> 00:26:16.700
On Scientific Python, we already are providing lazy imports.


00:26:16.700 --> 00:26:18.900
SciPy and Scikit image, for instance,


00:26:18.900 --> 00:26:21.980
have a version of that and are acknowledged in the PEP.


00:26:21.980 --> 00:26:22.580
Very cool.


00:26:22.580 --> 00:26:25.660
And Alvaro says, congrats on the new course, Brian.


00:26:25.660 --> 00:26:26.260
Thank you.


00:26:26.260 --> 00:26:27.740
All right, now for something funny.


00:26:27.740 --> 00:26:30.380
What if you're trying to build a horse with programming?


00:26:30.380 --> 00:26:31.580
What would that look like?


00:26:31.580 --> 00:26:35.980
So this is a cartoon by Goon Squad by Toggle.


00:26:35.980 --> 00:26:37.940
And so it goes through the different languages.


00:26:37.940 --> 00:26:39.300
You do C++, right?


00:26:39.300 --> 00:26:39.860
Yeah.


00:26:39.860 --> 00:26:42.420
So it starts with C++.


00:26:42.420 --> 00:26:45.280
and it says, "So you built a horse,


00:26:45.280 --> 00:26:47.560
and the people are looking quite disgusted at it,


00:26:47.560 --> 00:26:50.100
and it has no skin or anything,


00:26:50.100 --> 00:26:51.320
the organs are all hanging out,


00:26:51.320 --> 00:26:53.880
there's weird bits that are not seen uses as.


00:26:53.880 --> 00:26:55.280
It's ugly as can be,


00:26:55.280 --> 00:26:56.840
and has a lot of dangling parts,


00:26:56.840 --> 00:26:58.800
but it gets the job done."


00:26:58.800 --> 00:27:01.060
Of course, for Java,


00:27:01.060 --> 00:27:03.640
of course, you really want to build a horse,


00:27:03.640 --> 00:27:06.100
so you open up your Blueprints and you're studying.


00:27:06.100 --> 00:27:08.600
It says, "But first, you need to build a horse factory."


00:27:08.600 --> 00:27:09.920
Oh, no.


00:27:09.920 --> 00:27:10.960
>> Yeah.


00:27:10.960 --> 00:27:13.520
>> The indirection, it runs deep.


00:27:13.520 --> 00:27:15.280
JavaScript is pretty darn good.


00:27:15.280 --> 00:27:17.640
Your horse has arrived in different packages.


00:27:17.640 --> 00:27:20.680
You built the horse, but the backbone came out of Angular.


00:27:20.680 --> 00:27:22.000
So the horse is paralyzed.


00:27:22.000 --> 00:27:23.520
It's like a droopy horse that


00:27:23.520 --> 00:27:25.320
probably left it by its poor front legs.


00:27:25.320 --> 00:27:29.440
So sad. The person is gasping and covering their mouth like,


00:27:29.440 --> 00:27:31.000
"Oh no, what have I done?"


00:27:31.000 --> 00:27:32.120
>> That's great.


00:27:32.120 --> 00:27:34.240
>> All right. Next, we have a NoSQL horse.


00:27:34.240 --> 00:27:35.800
I guess speaking to like,


00:27:35.800 --> 00:27:37.360
maybe it's unreliable, I don't know.


00:27:37.360 --> 00:27:39.440
NoSQL, you had a fast, beautiful horse.


00:27:39.440 --> 00:27:42.720
Now there's a person in a pasture with no horse, but you have no idea where it is.


00:27:42.720 --> 00:27:49.200
All right, next one up kobold. This one is real good. It's black and white, like old


00:27:49.200 --> 00:27:55.760
fashion overalls, like where it's being built. You built a horse in 1962 and like so triumphant.


00:27:55.760 --> 00:28:00.720
It can only be tamed by the original creator for all of the purposes. It's a dragon. It's like


00:28:00.720 --> 00:28:05.920
breathing fire and it's being battled by like modern military people. Yeah, that's funny.


00:28:05.920 --> 00:28:06.920
That was pretty good.


00:28:06.920 --> 00:28:10.800
Now, before I show you the Lisp one, I don't know if people are familiar with Lisp.


00:28:10.800 --> 00:28:17.020
This is like the first CS class I had to take in college when I did a CS, a couple of classes


00:28:17.020 --> 00:28:20.140
from my, like a minor part of my math degree.


00:28:20.140 --> 00:28:21.800
And I really wanted to take C++.


00:28:21.800 --> 00:28:23.280
And I said, "Please can I take that?"


00:28:23.280 --> 00:28:24.280
"No, you have to take Lisp."


00:28:24.280 --> 00:28:25.280
I'm like, "All right, great."


00:28:25.280 --> 00:28:29.580
So Lisp, I don't know if you've ever seen it, but boy, is it fun to have parentheses.


00:28:29.580 --> 00:28:32.700
It's like everything is just parentheses, parentheses, parentheses.


00:28:32.700 --> 00:28:35.500
you end up with like, even like a really simple example


00:28:35.500 --> 00:28:37.700
with like a line with five consecutive


00:28:37.700 --> 00:28:39.260
closing parentheses, right?


00:28:39.260 --> 00:28:41.100
So it's just all about the parentheses.


00:28:41.100 --> 00:28:44.620
- Lisp stands for lots of insipid silly parentheses.


00:28:44.620 --> 00:28:45.500
- Exactly.


00:28:45.500 --> 00:28:48.220
So the Lisp one is, it just says you built a


00:28:48.220 --> 00:28:49.940
parentheses, parentheses, parentheses, parentheses,


00:28:49.940 --> 00:28:52.460
like about 50 parentheses, a horse emoji,


00:28:52.460 --> 00:28:55.220
close parentheses about 50 times to match those off.


00:28:55.220 --> 00:28:58.500
That one's awesome, isn't it?


00:28:58.500 --> 00:28:59.740
- Yeah, that's good.


00:28:59.740 --> 00:29:01.660
- All right, C#.


00:29:01.660 --> 00:29:06.140
C# has camel casing for its naming.


00:29:06.140 --> 00:29:08.020
So it says, "The horse works best


00:29:08.020 --> 00:29:09.940
"when dressed in a camel costume."


00:29:09.940 --> 00:29:13.420
They try to take it off and make it do something.


00:29:13.420 --> 00:29:15.580
When you try anything else than a camel,


00:29:15.580 --> 00:29:17.020
it gets a bit fuzzy.


00:29:17.020 --> 00:29:18.100
Won't even eat an apple


00:29:18.100 --> 00:29:20.420
'cause it's got its camel costume off.


00:29:20.420 --> 00:29:24.700
Assembly, this one may be,


00:29:24.700 --> 00:29:26.340
actually, this might be my favorite.


00:29:26.340 --> 00:29:28.500
It's like eight-bit graphics.


00:29:28.500 --> 00:29:31.220
It's super old school looking.


00:29:31.220 --> 00:29:34.420
And it's a, so it's like completely, I don't know,


00:29:34.420 --> 00:29:36.980
it looks like it's out of late 80s graphics.


00:29:36.980 --> 00:29:39.860
It says the horse turns out a little basic,


00:29:39.860 --> 00:29:41.420
but boy can it run fast.


00:29:41.420 --> 00:29:45.140
And the girl just ride it like lightning.


00:29:45.140 --> 00:29:45.980
- Yeah.


00:29:45.980 --> 00:29:46.800
- I think it's the last one.


00:29:46.800 --> 00:29:48.820
PHP, you built a Trojan horse.


00:29:48.820 --> 00:29:52.100
Oh great, it releases hundreds of tiny horses


00:29:52.100 --> 00:29:54.220
to punish you every day forever.


00:29:54.220 --> 00:29:56.460
(laughing)


00:29:56.460 --> 00:29:59.900
- Okay.


00:29:59.900 --> 00:30:02.380
And no, but unfortunately Python was absent.


00:30:02.380 --> 00:30:04.620
Or I don't know, I'm not sure what it would have said.


00:30:04.620 --> 00:30:05.900
But Alvaro added it.


00:30:05.900 --> 00:30:09.300
I guess for the Python one, it's just import horse emoji.


00:30:09.300 --> 00:30:10.420
- Import horse emoji.


00:30:10.420 --> 00:30:11.620
- That's pretty good actually.


00:30:11.620 --> 00:30:15.320
- Oh, can you put emojis in package names on PyPI?


00:30:15.320 --> 00:30:16.560
- I don't know about package names.


00:30:16.560 --> 00:30:18.400
You can put them in Python code.


00:30:18.400 --> 00:30:19.620
Like they can be comments.


00:30:19.620 --> 00:30:22.820
I don't know if you can be a pop, a pip install horse,


00:30:22.820 --> 00:30:23.920
but that'd be awesome.


00:30:23.920 --> 00:30:28.340
Python Roman says, "Python is beautiful but slow."


00:30:28.340 --> 00:30:29.760
It's like a show horse.


00:30:29.760 --> 00:30:34.100
Unless it's chased by C++ in our run.


00:30:34.100 --> 00:30:37.160
- Yeah, the fast horses are actually just written in Rust


00:30:37.160 --> 00:30:38.660
and then imported in Python.


00:30:38.660 --> 00:30:42.360
- Exactly, very true.


00:30:42.360 --> 00:30:43.880
All right, well I thought this was a pretty good one.


00:30:43.880 --> 00:30:46.800
A bit of a language lesson for everyone.


00:30:46.800 --> 00:30:48.520
So what did we learn about PHP?


00:30:48.520 --> 00:30:50.560
It releases hundreds of tiny horses


00:30:50.560 --> 00:30:52.280
to punish you every day forever.


00:30:52.280 --> 00:30:56.120
- You just hire new people to maintain it.


00:30:56.120 --> 00:30:57.260
- Exactly.


00:30:57.260 --> 00:30:58.780
All right, well, good times.


00:30:58.780 --> 00:30:59.820
- Good times, yeah.


00:30:59.820 --> 00:31:02.700
Thanks for all the work on the PyTest course too.


00:31:02.700 --> 00:31:03.540
I appreciate it.


00:31:03.540 --> 00:31:04.500
- Yeah, absolutely.


00:31:04.500 --> 00:31:05.420
Yeah, people do check it out.


00:31:05.420 --> 00:31:06.300
It really is good.


00:31:06.300 --> 00:31:08.100
And Brian, thanks for doing it,


00:31:08.100 --> 00:31:08.940
and thanks for being here.


00:31:08.940 --> 00:31:10.460
Bye everyone. - Thank you, bye.

