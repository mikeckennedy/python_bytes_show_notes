WEBVTT

00:00:00.001 --> 00:00:05.360
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.360 --> 00:00:09.920
This is episode 72, recorded April 4th, 2018.

00:00:09.920 --> 00:00:10.900
I'm Michael Kennedy.

00:00:10.900 --> 00:00:11.760
And I'm Brian Okken.

00:00:11.760 --> 00:00:13.220
And we've got some awesome stuff for you.

00:00:13.220 --> 00:00:15.900
Before we get to it, Brian, I want to say thank you to Datadog.

00:00:15.900 --> 00:00:20.200
Check out what they're offering over at talkpython.fm/datadog.

00:00:20.200 --> 00:00:24.380
And they've got a bunch of cool stuff, including a cute little doggy t-shirt.

00:00:24.380 --> 00:00:25.660
I still need to get one of those.

00:00:25.660 --> 00:00:26.060
I know.

00:00:26.060 --> 00:00:26.800
I don't have a shirt either.

00:00:26.800 --> 00:00:27.800
I really need to do that.

00:00:27.800 --> 00:00:28.900
All right.

00:00:29.140 --> 00:00:32.340
I guess the first thing we should talk about is versioning.

00:00:32.340 --> 00:00:43.220
When I normally look at commercial software, they have numbers in the front, like version 6 or 12 or version 3 of this software.

00:00:43.220 --> 00:00:48.040
It's pretty rare to have 3.anything in open source, isn't it?

00:00:48.040 --> 00:00:52.460
I don't know if it's rare, but there sure is a lot of stuff that's still...

00:00:52.460 --> 00:00:55.280
We think of stuff that starts with a zero as being in beta.

00:00:55.280 --> 00:00:57.600
And it's not...

00:00:57.600 --> 00:01:00.480
Well, like, for instance, with semantic versioning, you can...

00:01:00.480 --> 00:01:05.820
Once it's at 1.0, the interface is pretty solid and you can depend on it.

00:01:05.820 --> 00:01:13.800
But there was a website put up this month called ZeroVer to talk about zero-based versioning.

00:01:13.800 --> 00:01:16.020
And it's sort of tongue-in-cheek.

00:01:16.020 --> 00:01:22.200
It's from one of our friends, Mahmoud Hashemi, and some others that started it.

00:01:22.520 --> 00:01:37.680
But they kind of wanted to call out a bunch of Python projects and other projects that are perpetually starting with zero by putting up this sort of mock website to say that you don't need to do anything other than zero-based versioning.

00:01:37.720 --> 00:01:38.080
Yeah.

00:01:38.080 --> 00:01:38.840
It really helps you.

00:01:38.840 --> 00:01:39.840
It gives it...

00:01:39.840 --> 00:01:41.780
Like, it starts out with a down-to-earth demo.

00:01:41.780 --> 00:01:42.460
It's pretty awesome.

00:01:42.460 --> 00:01:46.040
So it has, like, some versions and says, yes, these are good.

00:01:46.040 --> 00:01:47.240
Zero.0.1.

00:01:47.240 --> 00:01:48.760
Zero.1.0.dev.

00:01:48.760 --> 00:01:49.820
Zero.4.0.

00:01:49.820 --> 00:01:50.920
And then, no.

00:01:50.920 --> 00:01:51.780
1.0.

00:01:51.780 --> 00:01:53.180
1.0.0.0.

00:01:53.600 --> 00:01:54.840
1.0.18.0.

00:01:54.840 --> 00:01:57.200
2018.04.0.

00:01:57.200 --> 00:01:58.380
Like, none of these are okay.

00:01:58.380 --> 00:01:59.580
Right.

00:01:59.580 --> 00:02:01.700
And, yeah.

00:02:01.700 --> 00:02:04.440
So if you haven't figured it out, it is a joke.

00:02:04.440 --> 00:02:08.140
But it is, like, for instance, I guess I hadn't realized this.

00:02:08.140 --> 00:02:10.820
Flask is one of the ones that was called out.

00:02:10.820 --> 00:02:13.480
It's currently 0.12.2.

00:02:13.480 --> 00:02:14.500
Come on.

00:02:14.500 --> 00:02:16.120
It's been eight years.

00:02:16.120 --> 00:02:19.440
I think that maybe you can go to a 1.0.

00:02:19.440 --> 00:02:21.040
I have a new solution here.

00:02:21.040 --> 00:02:23.520
A new way to solve this problem.

00:02:23.520 --> 00:02:30.080
Just whenever you print or look at the version number, just strip off all the left zeros and dots.

00:02:30.080 --> 00:02:35.020
So it's, like, 12.2 is basically what Flask is.

00:02:35.020 --> 00:02:44.800
You know, there's some pretty ones that are very dependent on by a bunch of people that, like, if they completely change the interface, the API, that would be bad.

00:02:44.800 --> 00:02:48.760
So they're clear to the point where they could bump to a 1.0.

00:02:48.840 --> 00:02:56.060
Yeah, I think eight years, absolutely, is a timeframe where you could say, you know, we're pretty stable at this point, right?

00:02:56.060 --> 00:02:58.520
Like, also Pandas in here with a 0.23.

00:02:58.520 --> 00:03:00.520
And it's 7.1 years.

00:03:00.520 --> 00:03:03.160
So, and also they count the releases, right?

00:03:03.160 --> 00:03:07.940
Like, 21 releases of Flask, 75 releases of Pandas, and it's still on a zero.

00:03:07.940 --> 00:03:31.760
One thing I would like to point out is if you go and you look at a lot of the sort of manager folks at more commercial-oriented enterprise software groups, so people that use, like, .NET or other non-open source development ecosystems, when they see things like 0.1, they're like, oh, this thing is not ready for us to use.

00:03:31.840 --> 00:03:33.100
We can't use this at our company.

00:03:33.100 --> 00:03:38.060
And I think it actually sends a bit of a message that this thing's not quite ready.

00:03:38.060 --> 00:03:41.600
I mean, I know, obviously, looking at this list, it doesn't mean that.

00:03:41.600 --> 00:03:45.180
But a significant number of people, I think, interpret it that way.

00:03:45.460 --> 00:03:51.840
And so, you know, I think it's worth considering maybe saying, all right, we're actually at a version where we're going to call it 1.0.

00:03:51.840 --> 00:03:54.220
Like, Flask is probably fully ready for 1.0.

00:03:54.220 --> 00:03:58.540
Anything that starts with it, it's just the dots and it's not date-based.

00:03:58.540 --> 00:04:01.040
People kind of assume it's just semantic versioning.

00:04:01.040 --> 00:04:03.760
So, I think semantic versioning is the way to go.

00:04:03.760 --> 00:04:05.580
It's not an easy thing, though.

00:04:05.580 --> 00:04:08.740
And that's part of the reason why they're being a little gentle with it.

00:04:08.740 --> 00:04:14.000
If you check out the About page, it talks about, on here, it talks about really what you should do about it.

00:04:14.280 --> 00:04:22.600
But when you're actually running a project, it's hard to decide what's something that's big enough to go to flip the major digit.

00:04:22.600 --> 00:04:24.880
Django is doing that pretty well, I think, right?

00:04:24.880 --> 00:04:28.100
They had their 1.0, and that was stable for a long time.

00:04:28.100 --> 00:04:32.500
They said, we're going to make a major breaking change, so we're flipping to 2.0, right?

00:04:32.500 --> 00:04:34.600
The DropPython 2 support and all that kind of stuff.

00:04:34.600 --> 00:04:37.840
So, Django is one that's not following Mahmoud's recommendation.

00:04:37.840 --> 00:04:39.440
Recommendation, yeah.

00:04:39.440 --> 00:04:41.000
Yeah, I love it.

00:04:41.000 --> 00:04:43.540
I love it how he branded that, him and all the folks involved.

00:04:43.540 --> 00:04:44.120
It's very cool.

00:04:45.000 --> 00:04:55.160
So, when we build these projects in Python and any open source system, really, you basically layer on a whole bunch of external dependencies and packages and stuff.

00:04:55.160 --> 00:04:58.680
How do you know when something has gone terribly wrong?

00:04:58.680 --> 00:05:06.140
Like, suppose you depend on Vexig in Flask, and there's some huge security vulnerability in that dependency.

00:05:06.140 --> 00:05:07.660
Do you get notified?

00:05:07.660 --> 00:05:08.620
How do you know?

00:05:08.620 --> 00:05:09.420
No, I don't know.

00:05:09.500 --> 00:05:09.920
You don't know.

00:05:09.920 --> 00:05:10.480
Right.

00:05:10.580 --> 00:05:12.200
And so, this is actually a really big problem.

00:05:12.200 --> 00:05:18.800
It's like, when you think about problems or security issues with your application, it's not just what you have.

00:05:18.800 --> 00:05:20.200
It's the stuff you're built upon.

00:05:20.200 --> 00:05:25.660
I mean, the whole Equifax thing was a vulnerability in the, was it Swing?

00:05:25.660 --> 00:05:26.420
Swing?

00:05:26.420 --> 00:05:26.840
I don't know.

00:05:26.840 --> 00:05:31.660
Some foundational library in Java, and they just didn't pass it in time, right?

00:05:31.800 --> 00:05:33.980
So, getting notified of these things is really important.

00:05:33.980 --> 00:05:39.580
And so much of our code lives on GitHub, and GitHub decided they're going to take some responsibility for this and try to help people.

00:05:39.580 --> 00:05:48.620
So, there's a nice article that says, GitHub security alerts detected over 4 million vulnerabilities last year, I think it was in the year?

00:05:48.620 --> 00:05:48.880
Yeah.

00:05:49.020 --> 00:05:50.180
Actually, it's not even the year.

00:05:50.180 --> 00:05:52.460
It's since, like, November of last year or something.

00:05:52.460 --> 00:05:54.260
So, that's pretty insane.

00:05:54.260 --> 00:05:56.660
So, they launched this thing called GitHub security alerts.

00:05:56.660 --> 00:06:04.580
Initially, it's only for Ruby and JavaScript, which is lame, but they have Python support coming, which is why I'm talking about this.

00:06:04.580 --> 00:06:09.840
And what it does is it looks at your GitHub repo, and it says, are you using a certain dependency?

00:06:09.840 --> 00:06:12.060
Is that dependency of a known security vulnerability?

00:06:12.480 --> 00:06:21.140
If it does, then, like, right at the top of your repo, you get this great scary warning that says, your application isn't insecure because it depends on this thing that is insecure.

00:06:21.140 --> 00:06:21.580
Yeah.

00:06:21.580 --> 00:06:22.840
Actually, that's a great idea.

00:06:22.840 --> 00:06:23.080
Yeah.

00:06:23.080 --> 00:06:28.580
I don't know if you get an email notice, but certainly, your repo looks scary when that's the case.

00:06:28.580 --> 00:06:38.760
Like, this happened to one of my courses, and it just came back again because one of my courses, the PyTron course, demonstrates using ElectronJS, editing an ElectronJS app.

00:06:38.760 --> 00:06:41.340
And ElectronJS had some security vulnerability.

00:06:41.340 --> 00:06:43.580
It's not actually used, but, you know, whatever.

00:06:43.580 --> 00:06:47.040
It still says, your app, it depends upon ElectronJS, and it's got this issue.

00:06:47.040 --> 00:06:48.520
So, it's pretty cool.

00:06:48.520 --> 00:06:51.380
And then, there's some good numbers and whatnot here.

00:06:51.380 --> 00:07:01.960
It says, nearly half of all the displayed alerts were responded to within a week, and 30% were fixed within the first seven days.

00:07:01.960 --> 00:07:02.860
Oh, that's great.

00:07:02.860 --> 00:07:03.380
That's good.

00:07:03.380 --> 00:07:05.320
That's a good thing that they're adding that.

00:07:05.320 --> 00:07:05.820
And it does.

00:07:05.820 --> 00:07:10.980
So, you said it's coming for Python, and I see that it is planned for this year for 2018.

00:07:10.980 --> 00:07:12.440
So, that's good.

00:07:12.440 --> 00:07:12.760
Yeah.

00:07:12.760 --> 00:07:16.580
There's not a whole lot of details about exactly when it's coming, but, yeah, that will be great.

00:07:16.580 --> 00:07:27.840
They said if you look at repositories that have had a contribution in the last 90 days, so things that are active, it says 98% of such repositories were patched within fewer than seven days.

00:07:28.280 --> 00:07:28.920
Like, that's insane.

00:07:28.920 --> 00:07:30.100
That's a really big deal.

00:07:30.100 --> 00:07:30.500
Yeah.

00:07:30.500 --> 00:07:30.860
Yeah.

00:07:30.860 --> 00:07:37.520
So, they said they found over half a million repositories that had some kind of security vulnerability and were pretty much fixed up.

00:07:37.520 --> 00:07:39.400
So, anyway, that's all really good.

00:07:39.400 --> 00:07:43.660
I just want to give a shout out to PyUp as well, P-Y-U-P dot I-O.

00:07:43.660 --> 00:07:49.620
I use that for my stuff, and it basically does the same thing and more for Python already.

00:07:49.620 --> 00:07:51.320
So, you link it to your GitHub repo.

00:07:51.320 --> 00:07:53.320
It'll, like, look at your requirements.txt.

00:07:53.320 --> 00:07:57.760
If there's a new version, it'll send you a PR to upgrade your dependencies.

00:07:57.960 --> 00:07:59.560
And if there's a security alert, it'll tell you.

00:07:59.560 --> 00:08:06.440
Don't really want to get on this tangent too far, but I started using PyUp for the cards project that I started recently.

00:08:06.440 --> 00:08:11.900
Since I'm sort of doing this project, I can't remember who I read it from,

00:08:11.900 --> 00:08:18.300
but the packages that are intended to be used by other applications probably shouldn't have their versions pegged.

00:08:18.300 --> 00:08:24.860
So, if I unpegged all my versions in a package, then PyUp dot I-O kind of complains about that.

00:08:25.040 --> 00:08:25.940
Yeah, that's a little bit.

00:08:25.940 --> 00:08:28.200
It does require you more or less pin your versions.

00:08:28.200 --> 00:08:29.960
And you can do expressions.

00:08:29.960 --> 00:08:34.200
Like, I want it to be this version or higher, and I think maybe it'll upgrade it.

00:08:34.200 --> 00:08:34.700
I don't know.

00:08:34.700 --> 00:08:35.840
There's a little flexibility.

00:08:35.840 --> 00:08:36.560
It's not perfect.

00:08:36.560 --> 00:08:41.840
But for, like, fixed apps, like my web apps, I'll have the stuff pinned, and it just automatically updates.

00:08:41.840 --> 00:08:43.220
Because nothing depends upon it.

00:08:43.220 --> 00:08:43.580
It's fine.

00:08:43.580 --> 00:08:43.800
Yeah.

00:08:43.800 --> 00:08:44.700
Yeah, pretty nice.

00:08:44.900 --> 00:08:47.460
And it's free for stuff, so for open source.

00:08:47.460 --> 00:08:48.260
Yeah, it's pretty nice.

00:08:48.260 --> 00:08:48.540
Great.

00:08:48.540 --> 00:08:53.680
Speaking of open source, PyPI is the place where it lives, and now you can describe it better, right?

00:08:53.680 --> 00:08:54.440
Yes.

00:08:54.440 --> 00:09:01.800
I'm very excited about this, because, like, the cards project I was working on, I was sort of bummed that I had to put the readme in rest.

00:09:01.800 --> 00:09:04.560
Or not rest, but restructured text.

00:09:04.560 --> 00:09:06.960
And now you don't anymore.

00:09:06.960 --> 00:09:07.680
That's awesome.

00:09:07.680 --> 00:09:14.100
So readme.md and a couple other variants of that extension are now supported on pypi.org.

00:09:14.100 --> 00:09:19.780
And we're linking to a couple articles, one of them basically describing all the steps you have to do.

00:09:19.780 --> 00:09:27.780
There's a little bit of changes you have to do to your setup.py file and a couple other things and update all your tools.

00:09:27.780 --> 00:09:31.280
But for the most part, it just works, and that's awesome.

00:09:31.860 --> 00:09:37.020
And then also, just recently, GitHub-flavored markdown has been added.

00:09:37.020 --> 00:09:37.680
Oh, yeah.

00:09:37.680 --> 00:09:38.180
That's nice.

00:09:38.180 --> 00:09:42.260
GitHub-flavored markdown has a little bit more, I think, from the stuff that I played with.

00:09:42.260 --> 00:09:44.040
Like tables and cross-

00:09:44.040 --> 00:09:44.780
Yes, tables.

00:09:44.780 --> 00:09:46.420
Markthrough and stuff.

00:09:46.420 --> 00:09:48.180
So that's nice.

00:09:48.180 --> 00:09:52.420
And I'm looking forward to changing a couple projects to utilize that.

00:09:52.420 --> 00:09:59.060
And now the old legacy PyPI, which I think maybe they've taken from your legacy Python.

00:09:59.060 --> 00:09:59.800
I love it.

00:09:59.800 --> 00:10:00.920
Yeah.

00:10:01.220 --> 00:10:06.300
It still renders the descriptions as plain text, but they comment, don't worry, it's going

00:10:06.300 --> 00:10:07.180
away real soon.

00:10:07.180 --> 00:10:07.540
Yeah.

00:10:07.540 --> 00:10:11.000
I was just talking to Ernest, who's doing some of the work there.

00:10:11.000 --> 00:10:17.960
And they're really, really close to just saying PyPI.org is where you go and doing a redirect.

00:10:17.960 --> 00:10:20.420
He said, you know that little scary bar across the top?

00:10:20.420 --> 00:10:21.880
He said, you can now dismiss that.

00:10:21.880 --> 00:10:24.480
But I want it to just go away automatically.

00:10:24.480 --> 00:10:25.240
When does this happen?

00:10:25.240 --> 00:10:28.160
PyPI.org is really close to being the thing.

00:10:28.160 --> 00:10:34.520
So maybe this will just hasten the move away from legacy PyPI with the descriptions looking

00:10:34.520 --> 00:10:34.880
funky.

00:10:35.020 --> 00:10:35.300
Yeah.

00:10:35.300 --> 00:10:36.280
So hopefully.

00:10:36.280 --> 00:10:36.660
Yeah.

00:10:36.660 --> 00:10:37.000
Awesome.

00:10:37.000 --> 00:10:39.080
I'm really excited to see PyPI making some progress.

00:10:39.080 --> 00:10:40.860
It felt kind of stale for a little while.

00:10:40.860 --> 00:10:43.280
And it seems like it's really been rocking the last nine months.

00:10:43.280 --> 00:10:50.860
To be fair, even if your markdown gets displayed as plain text on legacy PyPI, that's the point

00:10:50.860 --> 00:10:52.240
of markdown is it's still readable.

00:10:52.240 --> 00:10:53.120
So that's okay.

00:10:53.200 --> 00:10:53.560
Exactly.

00:10:53.560 --> 00:10:56.000
If it were HTML with lots of styles, it would have been different.

00:10:56.000 --> 00:10:56.460
That's right.

00:10:56.460 --> 00:10:56.720
Yeah.

00:10:56.720 --> 00:10:57.020
Nice.

00:10:57.020 --> 00:10:57.360
All right.

00:10:57.360 --> 00:10:59.760
So before we get to the next one, let me tell you about Datadog.

00:10:59.760 --> 00:11:01.140
It's a monitoring solution.

00:11:01.140 --> 00:11:05.840
Provides deep visibility and tracking into your distributed apps.

00:11:05.840 --> 00:11:09.940
So your application, your data layer, your servers, your services, everything.

00:11:09.940 --> 00:11:14.780
So within minutes, you'll be able to investigate bottlenecks and actually see where they are throughout

00:11:14.780 --> 00:11:18.680
your entire distributed app, which is pretty cool to put it together.

00:11:19.300 --> 00:11:24.520
So if you want to visualize your Python performance today, get started with a free trial and also

00:11:24.520 --> 00:11:28.700
get that cool Datadog t-shirt, visit pythonbytes.fm/Datadog.

00:11:28.700 --> 00:11:30.020
Earlier I said talk Python.

00:11:30.020 --> 00:11:32.620
They both work, but pythonbytes.fm/Datadog.

00:11:32.620 --> 00:11:38.740
Speaking of web apps and distributed things and whatnot, I think there's a really interesting

00:11:38.740 --> 00:11:43.340
new web server that people should start paying attention to in the Python space.

00:11:43.340 --> 00:11:46.040
So you probably heard of Nginx, right, Brian?

00:11:46.040 --> 00:11:48.020
I know you don't do a ton of web stuff, but yeah.

00:11:48.020 --> 00:11:48.760
Yeah, definitely.

00:11:49.000 --> 00:11:54.160
Nginx is kind of like the static front-end server and load balancer thing for many web

00:11:54.160 --> 00:11:54.440
apps.

00:11:54.440 --> 00:12:01.560
Like on my sites, I have Nginx hitting, like it takes all the requests, does the SSL stuff,

00:12:01.560 --> 00:12:05.820
any static resources, CSS, JavaScript, images, that just gets sent straight back.

00:12:05.820 --> 00:12:11.380
And only the sort of data-driven stuff makes its way back to the Python web server, which

00:12:11.380 --> 00:12:13.000
in my case is MicroWSGI.

00:12:13.280 --> 00:12:14.780
And MicroWSGI is really nice.

00:12:14.780 --> 00:12:20.020
But the Nginx folks have come up with this thing called NginxUnit.

00:12:20.500 --> 00:12:27.020
And so the thing I want to link to is this performance comparison between NginxUnit and MicroWSGI.

00:12:27.020 --> 00:12:29.780
So MicroWSGI is written in C++.

00:12:29.780 --> 00:12:35.820
It's like one of the best high-performance things that will run and farm out your Python application,

00:12:35.820 --> 00:12:36.920
Pyramid Flask, whatever.

00:12:37.620 --> 00:12:38.700
And it works really well.

00:12:38.900 --> 00:12:42.720
But NginxUnit is a little more flexible.

00:12:42.720 --> 00:12:48.640
And for example, you can configure it over a RESTful API instead of just config files.

00:12:48.640 --> 00:12:56.740
It'll run multiple languages and versions at the same time, improve TLS support, HTTP2, which is cool.

00:12:56.740 --> 00:13:00.000
It'll run Python, multiple versions.

00:13:00.000 --> 00:13:03.380
It'll run Go, Ruby, JavaScript, whatever, right?

00:13:03.420 --> 00:13:05.300
So it'll run all these things in this one server.

00:13:05.300 --> 00:13:08.660
It's not just I'm going to run one flavor of Python.

00:13:08.660 --> 00:13:10.440
So anyway, it's pretty cool.

00:13:10.440 --> 00:13:13.240
And the thing I wanted to look at was this comparison.

00:13:13.240 --> 00:13:19.280
So there's this, I don't know who did it actually, a group that put together sort of a performance analysis

00:13:19.280 --> 00:13:24.940
and said we're going to slowly add more and more traffic, concurrent traffic,

00:13:24.940 --> 00:13:29.380
to both of these things running more or less a Hello World Flask app, right?

00:13:29.580 --> 00:13:31.020
And so pull up the pictures.

00:13:31.020 --> 00:13:32.740
And those of you who are listening, there's a little link.

00:13:32.740 --> 00:13:33.460
You can pull up the pictures.

00:13:33.460 --> 00:13:34.980
And this really tells it all.

00:13:34.980 --> 00:13:35.380
Okay.

00:13:35.380 --> 00:13:36.220
You got the pictures, Brian?

00:13:36.220 --> 00:13:36.760
Yeah.

00:13:36.760 --> 00:13:41.160
So if you look at that, there's like a line that's pretty much flat across its NginxUnit

00:13:41.160 --> 00:13:46.300
as you go from zero to 500 concurrent users doing 10,000 requests per second.

00:13:46.300 --> 00:13:49.080
And it's just kind of like, got it, no problem.

00:13:49.080 --> 00:13:57.060
Microwisgee or with or without threads is sort of a linear slope equals one downward trend of performance

00:13:57.060 --> 00:13:58.520
as you add more and more traffic.

00:13:58.720 --> 00:14:04.020
Like, soon as you get to, you know, a couple hundred users, it just really becomes,

00:14:04.020 --> 00:14:10.120
it goes from handling like 7,500 requests to handling 50 per second.

00:14:10.120 --> 00:14:11.320
I mean, it really falls over.

00:14:11.320 --> 00:14:13.500
So I thought that was pretty interesting.

00:14:13.500 --> 00:14:20.000
This whole NginxUnit thing seems like it might be a really powerful and new way to run some nice backing stuff.

00:14:20.000 --> 00:14:20.380
Okay.

00:14:20.380 --> 00:14:21.960
So the high numbers are better.

00:14:21.960 --> 00:14:22.560
You want to keep...

00:14:22.560 --> 00:14:22.720
Yeah.

00:14:22.720 --> 00:14:23.740
Those are requests per second.

00:14:23.740 --> 00:14:24.120
Okay.

00:14:24.120 --> 00:14:24.480
Basically.

00:14:24.480 --> 00:14:25.020
Yeah.

00:14:25.020 --> 00:14:30.140
So it just, once you do 100,000 requests, it goes to zero on Microwisgee where it's still

00:14:30.140 --> 00:14:31.940
basically flat on NginxUnit.

00:14:31.940 --> 00:14:33.260
So really, really cool.

00:14:33.260 --> 00:14:40.500
I think that's quite promising in terms of making Python faster and scale better, which is, you

00:14:40.500 --> 00:14:44.560
know, super important because people move to other languages, Go or whatever.

00:14:44.640 --> 00:14:47.760
Because like, well, we need this concurrency, like, or you could just run something that

00:14:47.760 --> 00:14:48.240
runs it better.

00:14:48.240 --> 00:14:51.960
Well, so they have a little note that says it's still in beta, not for production.

00:14:51.960 --> 00:14:52.520
Yeah.

00:14:52.520 --> 00:14:53.100
It's pretty new.

00:14:53.100 --> 00:14:54.160
It's not quite ready.

00:14:54.160 --> 00:14:58.540
So my message, my takeaway is I'm going to start paying attention to this thing.

00:14:58.540 --> 00:15:01.600
Maybe switch to it at some point, but yeah, don't switch to it yet.

00:15:01.600 --> 00:15:03.000
I wonder what version number it is.

00:15:03.000 --> 00:15:03.680
It doesn't say.

00:15:03.680 --> 00:15:05.060
It's got to be zero something, right?

00:15:07.820 --> 00:15:09.980
Yeah, I don't know either what version number it is.

00:15:09.980 --> 00:15:10.860
That's a good question.

00:15:10.860 --> 00:15:11.260
Okay.

00:15:11.260 --> 00:15:11.580
Cool.

00:15:11.580 --> 00:15:12.240
Very, very funny.

00:15:12.240 --> 00:15:13.180
All right.

00:15:13.180 --> 00:15:13.660
Awesome.

00:15:13.660 --> 00:15:15.440
You've got something on looping, right?

00:15:15.440 --> 00:15:18.200
Trey Hunter, who was on the show last week.

00:15:18.200 --> 00:15:19.240
Didn't he do last week?

00:15:19.240 --> 00:15:22.600
He was your fill and your stand in, your impersonator last week.

00:15:22.600 --> 00:15:27.820
Well, he's got an article, which is a really good read and I'm going to not do it justice,

00:15:27.820 --> 00:15:32.540
but it's called Loop Better, A Deeper Look at Iteration in Python.

00:15:32.540 --> 00:15:35.440
And, you know, I'm glancing through this.

00:15:35.440 --> 00:15:37.440
I'm thinking, you know, I already know how to loop in Python.

00:15:37.980 --> 00:15:44.500
But the general, he shows a few gotcha examples of generators used in loops.

00:15:44.500 --> 00:15:49.140
And generators are like, for instance, even a list comprehension is a generator.

00:15:49.140 --> 00:15:50.720
You can't loop twice.

00:15:50.720 --> 00:15:59.380
And if you use containment check, like is nine in my generator, it'll work once and then it

00:15:59.380 --> 00:16:00.380
won't work the next time.

00:16:00.380 --> 00:16:01.500
But it's not in there anymore.

00:16:01.500 --> 00:16:03.220
And your collection's half the size.

00:16:03.220 --> 00:16:05.440
And it's a little strange.

00:16:05.720 --> 00:16:07.560
And it just behaves weird.

00:16:07.560 --> 00:16:12.100
I mean, I don't know if I've ever run into these, but I didn't.

00:16:12.100 --> 00:16:14.280
It hurt my head at first trying to figure out.

00:16:14.280 --> 00:16:15.860
I didn't know why these weren't working.

00:16:16.420 --> 00:16:22.820
So then the article goes on to describe in detail, really, the iterator protocol and what iterators,

00:16:22.820 --> 00:16:26.600
iterables, sequences and generators and all that good stuff is.

00:16:26.600 --> 00:16:33.520
And then go back and look at those gotchas again and explain with that information why they behave as they do.

00:16:33.520 --> 00:16:40.120
And I think this is just a well-written article that'll be going to make you a smarter Python programmer to read it.

00:16:40.200 --> 00:16:40.660
Yeah, it's cool.

00:16:40.660 --> 00:16:41.720
Definitely covers a lot.

00:16:41.720 --> 00:16:42.660
Well done, Trey.

00:16:42.660 --> 00:16:59.160
I think this is one of those concepts where if you come from a language that doesn't have generators, this concept of generators, or maybe if you just never really use them, the stuff that comes out of these generators, it looks like you just treat it like a normal collection.

00:16:59.420 --> 00:17:02.920
But you're right, they definitely don't behave like normal collections in a lot of ways.

00:17:02.920 --> 00:17:04.580
And you can find these subtle bugs.

00:17:04.580 --> 00:17:06.400
So nice to have them all covered like that.

00:17:06.400 --> 00:17:06.740
Yeah.

00:17:06.740 --> 00:17:15.980
And one of the things, I guess I'll go a little bit, is that generators, it's this iterator protocol and you keep it internally in a loop.

00:17:15.980 --> 00:17:20.120
Python will call the next operator and then eventually it gets to the end.

00:17:20.120 --> 00:17:22.100
There's not a way to reset them.

00:17:22.100 --> 00:17:23.080
So they...

00:17:23.080 --> 00:17:23.900
Yeah, they're done.

00:17:23.900 --> 00:17:24.540
They're done.

00:17:24.540 --> 00:17:25.600
And you got to generate...

00:17:25.600 --> 00:17:26.660
But you can generate...

00:17:26.660 --> 00:17:29.220
However you generate them, you can generate another one.

00:17:29.220 --> 00:17:29.860
Yeah, pretty cool.

00:17:29.860 --> 00:17:34.760
So the final thing that I want to cover is a little bit like the first one.

00:17:34.760 --> 00:17:40.040
It's a bit of a warning, but this is not an automated system like GitHub saying, hey, there's all these repos.

00:17:40.040 --> 00:17:41.220
We're going to tell you there's this problem.

00:17:41.220 --> 00:17:44.320
It's just something people should be aware of.

00:17:44.320 --> 00:17:49.600
So in Django, there's these configuration files and there's this part where you can set debug true or false.

00:17:49.600 --> 00:17:53.420
And there's like a little comment by it that says, do not set this to be true in production.

00:17:53.740 --> 00:18:00.000
However, do you think everyone goes into it, the big long config file and fixes that before they push it out?

00:18:00.000 --> 00:18:00.220
No.

00:18:00.220 --> 00:18:00.540
No.

00:18:00.540 --> 00:18:01.580
No, they don't.

00:18:01.580 --> 00:18:08.880
So the article is called, misconfigured Django apps are exposing secret API keys and database passwords.

00:18:08.880 --> 00:18:10.220
That sounds bad.

00:18:10.220 --> 00:18:10.460
No.

00:18:10.460 --> 00:18:11.340
No.

00:18:11.340 --> 00:18:11.400
No.

00:18:11.400 --> 00:18:11.620
Yeah.

00:18:11.620 --> 00:18:19.520
So it says, researchers have begun stumbling upon misconfigured Django apps that are exposing information like these API keys.

00:18:19.520 --> 00:18:20.620
Could be your stripe key, whatever.

00:18:20.620 --> 00:18:27.840
In just like a week, they discovered 28,000 Django apps where the admin left the debug mode enabled.

00:18:28.360 --> 00:18:33.620
And then, you know, you see, it'll be like screenshots of pulling up just random apps on the internet.

00:18:33.620 --> 00:18:35.900
Here's the AWS secret key.

00:18:35.900 --> 00:18:39.720
Here's the database password, et cetera, et cetera, just listed in the debug tools.

00:18:39.720 --> 00:18:42.360
So that sounds bad, right?

00:18:42.360 --> 00:18:42.800
Yeah.

00:18:42.800 --> 00:18:48.200
Well, especially you're probably, you probably leave that on while you're developing it so that you can look at all that stuff.

00:18:48.200 --> 00:18:48.420
Yeah.

00:18:48.420 --> 00:18:49.460
It sounds really bad.

00:18:49.460 --> 00:18:50.980
And it pretty much is.

00:18:50.980 --> 00:19:01.660
It says, just skimming through a few servers, researchers found debug mode were exposing extremely sensitive information that would allow a malicious actor full access to the app owner's data.

00:19:01.660 --> 00:19:07.840
But they were really, I like that they were really clear to emphasize this is not a failure on the Django side.

00:19:07.840 --> 00:19:11.260
But in fact, you're just not supposed to do this in production.

00:19:11.260 --> 00:19:17.880
And somebody on Twitter was like, it would be so awesome if there was like a comment or like a little note in Django that said, don't put this in production.

00:19:18.060 --> 00:19:22.800
And then, of course, right under there's a screenshot of never run this in production in debug mode.

00:19:22.800 --> 00:19:25.140
It's not supposedly not Django's fault.

00:19:25.140 --> 00:19:29.360
However, I mean, maybe there needs to be more than just on or off.

00:19:29.360 --> 00:19:35.500
Maybe there needs to be a I'm debugging my app, but I don't want to expose all the API keys mode or something.

00:19:35.500 --> 00:19:37.120
Yeah, for sure.

00:19:37.120 --> 00:19:42.700
I think or maybe just the debug stuff is off by default and you have to turn it on.

00:19:42.700 --> 00:19:45.220
And the act of turning it on, you go to the section, you read that.

00:19:45.300 --> 00:19:47.620
But you might never go and read that part of the config file.

00:19:47.620 --> 00:19:48.440
So you just don't know.

00:19:48.440 --> 00:19:48.680
Right.

00:19:48.680 --> 00:19:52.480
I mean, Django is famous for like getting easy, like just getting stuff up really easy.

00:19:52.480 --> 00:19:54.040
I don't have to be a super developer.

00:19:54.040 --> 00:19:55.600
So maybe you just don't know.

00:19:55.600 --> 00:19:55.840
Right.

00:19:55.840 --> 00:19:57.560
Sort of make things worse.

00:19:57.560 --> 00:20:04.720
Security researcher Victor Givas said some of these apps running Django have already been compromised.

00:20:04.720 --> 00:20:08.400
And he found one server running the Weevily web shell.

00:20:08.400 --> 00:20:09.740
That's bad.

00:20:09.740 --> 00:20:14.460
I mean, they were somehow able to entirely take over the computer and just SSH into it.

00:20:14.460 --> 00:20:19.780
And so he said, I've been notifying server owners about their leaky Django apps.

00:20:19.780 --> 00:20:22.740
At the moment, we've reported 1,822 servers.

00:20:22.740 --> 00:20:24.660
Well, 143 were fixed.

00:20:24.660 --> 00:20:27.660
Not so many, right?

00:20:27.660 --> 00:20:27.940
Yeah.

00:20:27.940 --> 00:20:28.940
Or taken offline.

00:20:28.940 --> 00:20:34.620
Which the taken offline tells me that there's some people out there that just don't know how to do that yet.

00:20:34.620 --> 00:20:36.220
So they'll just take it down.

00:20:36.340 --> 00:20:37.180
Yeah, there's like, you know what?

00:20:37.180 --> 00:20:39.140
My little toy site is not worth getting hacked.

00:20:39.140 --> 00:20:39.920
I'm just taking it off.

00:20:39.920 --> 00:20:40.740
Right.

00:20:40.740 --> 00:20:41.020
Yeah.

00:20:41.020 --> 00:20:41.220
Right.

00:20:41.220 --> 00:20:46.960
Well, so I guess takeaway, if you're running Django site, make sure it's not in debug mode.

00:20:46.960 --> 00:20:48.420
Or you could be a statistic.

00:20:48.420 --> 00:20:49.560
Don't be a statistic.

00:20:49.560 --> 00:20:49.900
Yes.

00:20:49.900 --> 00:20:51.220
Don't be a statistic.

00:20:51.220 --> 00:20:52.480
All right.

00:20:52.480 --> 00:20:55.620
That's it for our official six items.

00:20:55.620 --> 00:20:56.500
Brian, you got anything else?

00:20:56.500 --> 00:20:57.080
Yeah.

00:20:57.080 --> 00:21:05.760
I just got ping today to tell me that in episode 70, we covered Wagtail, which is a CMS written in Python.

00:21:05.760 --> 00:21:10.360
But the Wagtail team is trying to get some new features out.

00:21:10.360 --> 00:21:14.900
And they're running a Kickstarter campaign to try to fund that.

00:21:14.900 --> 00:21:16.600
So I think it's a good thing.

00:21:16.600 --> 00:21:18.120
They're not looking for that much money.

00:21:18.120 --> 00:21:20.560
So if everybody pitches in a little bit, it'd be good.

00:21:20.560 --> 00:21:21.500
So we've got a link.

00:21:21.600 --> 00:21:24.040
Yeah, they're pretty close to their goal, right?

00:21:24.040 --> 00:21:25.240
They've got 10 days left.

00:21:25.240 --> 00:21:27.080
They're about halfway there.

00:21:27.080 --> 00:21:28.260
They should get there, hopefully.

00:21:28.260 --> 00:21:28.560
Yeah.

00:21:28.560 --> 00:21:31.780
Wagtail is one of the really nice CMSs that's based on Django.

00:21:31.780 --> 00:21:33.440
Hopefully, if it's a bug mode, equals false.

00:21:33.440 --> 00:21:34.300
Yeah.

00:21:34.300 --> 00:21:34.980
Pretty nice stuff.

00:21:34.980 --> 00:21:40.520
So yeah, if you care at all about Wagtail or the CMSs, go in there and help them out a bit.

00:21:40.520 --> 00:21:44.820
I wanted to mention I've had a lot of great feedback on testing code.

00:21:44.820 --> 00:21:49.920
I've been doing kind of a series of getting an open source project out.

00:21:50.320 --> 00:21:54.920
And all of the sort of the testing requirements around it and talking about some of the common

00:21:54.920 --> 00:21:56.840
test design patterns.

00:21:56.840 --> 00:21:58.760
And that's been going well.

00:21:58.760 --> 00:22:02.200
And I've actually been learning a lot about running an open source.

00:22:02.200 --> 00:22:07.300
I thought, you know, lately I've just been using GitHub for just like a revision control.

00:22:07.300 --> 00:22:12.020
But actually running an open source project, even if it's just got a couple of contributors,

00:22:12.020 --> 00:22:12.900
you learn a lot.

00:22:12.900 --> 00:22:16.440
So hopefully I'll get some of those learnings written up sometime soon.

00:22:16.440 --> 00:22:17.100
You definitely should.

00:22:17.100 --> 00:22:18.660
That's a really cool project you're doing.

00:22:18.660 --> 00:22:19.500
So keep it up.

00:22:19.500 --> 00:22:19.760
Yeah.

00:22:20.020 --> 00:22:20.640
You got any news?

00:22:20.640 --> 00:22:21.600
No news right now.

00:22:21.600 --> 00:22:25.020
Nothing to report, but I'm always working on new projects.

00:22:25.020 --> 00:22:26.140
I will let you know soon.

00:22:26.140 --> 00:22:26.640
All right.

00:22:26.640 --> 00:22:28.280
Well, thanks a lot for today.

00:22:28.280 --> 00:22:28.820
Yeah, you bet.

00:22:29.720 --> 00:22:31.540
Thank you for listening to Python Bytes.

00:22:31.540 --> 00:22:34.120
Follow the show on Twitter via at Python Bytes.

00:22:34.120 --> 00:22:37.000
That's Python Bytes as in B-Y-T-E-S.

00:22:37.000 --> 00:22:40.440
And get the full show notes at pythonbytes.fm.

00:22:40.440 --> 00:22:44.760
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:22:44.760 --> 00:22:47.480
We're always on the lookout for sharing something cool.

00:22:47.480 --> 00:22:50.860
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:22:50.860 --> 00:22:54.480
Thank you for listening and sharing this podcast with your friends and colleagues.

