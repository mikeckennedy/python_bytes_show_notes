
00:00:00.000 --> 00:00:01.960
Hey there, thanks for listening.


00:00:01.960 --> 00:00:05.220
Before we jump into this episode, I just want to remind you that this episode is brought


00:00:05.220 --> 00:00:10.460
to you by us over at Talk Python Training, and Brian through his pytest book.


00:00:10.460 --> 00:00:15.560
So if you want to get hands on and learn something with Python, be sure to consider our courses


00:00:15.560 --> 00:00:17.600
over at Talk Python Training.


00:00:17.600 --> 00:00:21.560
Visit them via pythonbytes.fm/courses.


00:00:21.560 --> 00:00:25.920
And if you're looking to do testing and get better with pytest, check out Brian's book


00:00:25.920 --> 00:00:29.160
at pythonbytes.fm/pytest.


00:00:29.160 --> 00:00:33.640
the episode. Hello and welcome to Python Bytes where we deliver Python news and headlines


00:00:33.640 --> 00:00:41.880
directly to your earbuds. This is episode 264 recorded December 22nd, 2021. I'm Michael Kennedy.


00:00:41.880 --> 00:00:43.160
And I'm Brian Ockett.


00:00:43.160 --> 00:00:44.680
And I am Kim van Dijk.


00:00:44.680 --> 00:00:47.960
Kim, welcome. You've been on Talk Python before, but not here.


00:00:47.960 --> 00:00:51.080
Yeah, that's right. I've done a couple of TalkBytes with you, including the one where


00:00:51.080 --> 00:00:55.960
you bravely submitted yourself to questions from your audience. The other one, I taught


00:00:55.960 --> 00:00:58.840
them some small tools. So that was very good fun. I'm very much looking forward to this one as well.


00:00:58.840 --> 00:01:01.320
- You know, both the episodes you were on


00:01:01.320 --> 00:01:02.240
were super popular.


00:01:02.240 --> 00:01:04.120
One was about little automation tools


00:01:04.120 --> 00:01:06.040
and just cool stuff that people can pick up


00:01:06.040 --> 00:01:07.000
and use really easily there.


00:01:07.000 --> 00:01:07.840
And that was great.


00:01:07.840 --> 00:01:09.580
And the "Ask Me Anything" was surprisingly


00:01:09.580 --> 00:01:11.100
one of the more popular episodes as well.


00:01:11.100 --> 00:01:12.640
So thank you for being part of that.


00:01:12.640 --> 00:01:15.560
And you've been part of the audience for sure.


00:01:15.560 --> 00:01:18.120
You've offered comments and feedback


00:01:18.120 --> 00:01:20.600
as we do the live show and the recording.


00:01:20.600 --> 00:01:22.600
- Could be so, yeah, to be honest.


00:01:22.600 --> 00:01:24.880
- Yeah, but now here you are on stage.


00:01:24.880 --> 00:01:25.700
Thank you for being here.


00:01:25.700 --> 00:01:27.920
Tell people a bit about yourself before we get started.


00:01:27.920 --> 00:01:31.360
- Sure, I am a DevOps engineer at the moment


00:01:31.360 --> 00:01:33.800
and also move engineering based in South Africa,


00:01:33.800 --> 00:01:36.320
working with a home loan provider,


00:01:36.320 --> 00:01:38.760
a mortgage provider in the American sense.


00:01:38.760 --> 00:01:42.200
I've been probably doing Python for close on 20 years.


00:01:42.200 --> 00:01:44.320
So the fact that I've shaved means


00:01:44.320 --> 00:01:45.240
you can't see the gray beard,


00:01:45.240 --> 00:01:47.040
but I have been around for a while.


00:01:47.040 --> 00:01:48.840
- Not the gray beard.


00:01:48.840 --> 00:01:50.060
We're gonna come back for some good jokes


00:01:50.060 --> 00:01:51.800
at the end about this as well.


00:01:51.800 --> 00:01:54.280
Not your beard, but just beards in general.


00:01:54.280 --> 00:01:55.840
- Gray hair. - Gray hair, yeah.


00:01:55.840 --> 00:01:58.580
Awesome, that sounds like really fun stuff.


00:01:58.580 --> 00:02:00.420
So yeah, thanks for being here.


00:02:00.420 --> 00:02:03.840
Now, before we actually get into the main content


00:02:03.840 --> 00:02:05.120
of the show, Brian, I wanna do something


00:02:05.120 --> 00:02:06.500
just a little bit meta.


00:02:06.500 --> 00:02:11.500
So I went and pulled up or created a question air for people.


00:02:11.500 --> 00:02:13.140
When we first created Python Bytes,


00:02:13.140 --> 00:02:14.740
we're like, all right, it's 20 minutes.


00:02:14.740 --> 00:02:16.820
The time of this episode is gonna be 20 minutes.


00:02:16.820 --> 00:02:18.100
So we're just gonna like knock it out,


00:02:18.100 --> 00:02:19.180
you and me real quick.


00:02:19.180 --> 00:02:20.420
And I think it's grown a little bit.


00:02:20.420 --> 00:02:22.980
We've done, we cover a little bit more detail.


00:02:22.980 --> 00:02:24.500
We've added a joke.


00:02:24.500 --> 00:02:26.920
We've added a few like little extra things.


00:02:26.920 --> 00:02:28.580
We brought on guests like Kim.


00:02:28.580 --> 00:02:32.320
And is that still in line with what people want


00:02:32.320 --> 00:02:33.380
when they signed up?


00:02:33.380 --> 00:02:35.580
So I put together a questionnaire here


00:02:35.580 --> 00:02:37.860
that just asks three simple questions.


00:02:37.860 --> 00:02:39.460
And I'd really appreciate if listeners could go


00:02:39.460 --> 00:02:42.620
to the show notes and just click on the link


00:02:42.620 --> 00:02:45.300
that says this three question Google form,


00:02:45.300 --> 00:02:47.420
or find it on our Twitter account or wherever,


00:02:47.420 --> 00:02:49.120
but should be in your podcast player show notes


00:02:49.120 --> 00:02:50.000
right near the top.


00:02:50.000 --> 00:02:51.860
And they can just click that and fill it out


00:02:51.860 --> 00:02:55.260
Give us some quick feedback on the idea of having a guest,


00:02:55.260 --> 00:02:57.380
on the length of the show, and so on.


00:02:57.380 --> 00:02:58.700
So anything you wanna add about that, Brian?


00:02:58.700 --> 00:03:01.180
Just encourage people to give us feedback so we know.


00:03:01.180 --> 00:03:02.580
- Yeah, I'd love to hear feedback


00:03:02.580 --> 00:03:04.540
because sometimes we feel a little guilty


00:03:04.540 --> 00:03:05.820
that we're running long,


00:03:05.820 --> 00:03:09.120
but I enjoy the a little bit more in-depth conversation.


00:03:09.120 --> 00:03:12.980
We still don't go super deep, but I think it's a good...


00:03:12.980 --> 00:03:17.220
Well, I'm flavoring the survey, though,


00:03:17.220 --> 00:03:18.700
so forget what I said.


00:03:18.700 --> 00:03:20.980
No, I'd love to hear feedback on what people think.


00:03:20.980 --> 00:03:22.180
- Yeah, absolutely.


00:03:22.180 --> 00:03:23.680
Yeah, so people can give us feedback there.


00:03:23.680 --> 00:03:24.740
We'd really appreciate it.


00:03:24.740 --> 00:03:27.020
The way people seem to be feeling so far


00:03:27.020 --> 00:03:28.620
is they kind of like the link.


00:03:28.620 --> 00:03:31.260
They definitely like the guest format.


00:03:31.260 --> 00:03:32.660
So you're welcome here, Kim.


00:03:32.660 --> 00:03:34.380
According to listeners, fantastic.


00:03:34.380 --> 00:03:35.220
- Thank you.


00:03:35.220 --> 00:03:37.260
- But yeah, I think people are generally liking,


00:03:37.260 --> 00:03:39.820
but still, let's just hear from everyone


00:03:39.820 --> 00:03:42.340
'cause if a bunch of the people in the audience


00:03:42.340 --> 00:03:45.340
are like, "No, we really want no more than 20 minutes


00:03:45.340 --> 00:03:46.420
"and my going on about this


00:03:46.420 --> 00:03:48.500
"is actually making it still longer,"


00:03:48.500 --> 00:03:50.900
then it'd be great to know, right?


00:03:50.900 --> 00:03:52.460
So we'll go from there.


00:03:52.460 --> 00:03:54.980
And with that, let's play a game.


00:03:54.980 --> 00:03:56.380
- Jump into the first topic.


00:03:56.380 --> 00:03:57.300
Yeah.


00:03:57.300 --> 00:03:58.740
I wanna talk about Jupyter games


00:03:58.740 --> 00:04:03.740
and the idea around this is a iPython canvas


00:04:03.740 --> 00:04:06.260
or iPy canvas with Box2D.


00:04:06.260 --> 00:04:07.660
I'll get a little bit more into it.


00:04:07.660 --> 00:04:12.660
But the gist is making video games and small video games


00:04:12.660 --> 00:04:17.740
is one of the ways that a lot of us started programming.


00:04:17.740 --> 00:04:20.060
I know that was the case for me.


00:04:20.060 --> 00:04:22.060
And they were not difficult games,


00:04:22.060 --> 00:04:26.580
but it was difficult enough, these 2D engines.


00:04:26.580 --> 00:04:28.580
And some of that's lacking,


00:04:28.580 --> 00:04:30.760
and I haven't seen that in Jupyter before.


00:04:30.760 --> 00:04:34.580
And Jupyter is an excellent platform for a lot of things,


00:04:34.580 --> 00:04:38.180
especially teaching with people that don't have computers


00:04:38.180 --> 00:04:40.100
if they use an iPad or something like that.


00:04:40.100 --> 00:04:43.080
So often they can still get access to Jupyter


00:04:43.080 --> 00:04:45.100
through hosted systems.


00:04:45.100 --> 00:04:46.900
So this is a Jupyter,


00:04:46.900 --> 00:04:51.900
This article talks about writing 2D games


00:04:51.900 --> 00:04:55.500
and mostly it's a 2D physics engine


00:04:55.500 --> 00:04:58.660
around a library called Box2D,


00:04:58.660 --> 00:05:01.620
which is a C++ type engine,


00:05:01.620 --> 00:05:04.460
but it's something that you can access through Python.


00:05:04.460 --> 00:05:05.580
- And that is neat.


00:05:05.580 --> 00:05:06.420
- Yeah, the author--


00:05:06.420 --> 00:05:07.500
- Those kinds of physics stuff,


00:05:07.500 --> 00:05:09.500
when people think of games, they think of,


00:05:09.500 --> 00:05:12.940
oh, here's what I gotta do to get the picture on the screen.


00:05:12.940 --> 00:05:14.500
Oh, that's just a start.


00:05:14.500 --> 00:05:16.460
Like you need physics, you need collisions,


00:05:16.460 --> 00:05:18.780
there's like so much stuff that also gets done.


00:05:18.780 --> 00:05:20.020
So this is really cool.


00:05:20.020 --> 00:05:21.920
- Yeah, things like physics and gravity


00:05:21.920 --> 00:05:25.520
and collision detection and like the examples


00:05:25.520 --> 00:05:26.780
on this page are great.


00:05:26.780 --> 00:05:30.460
But the person that wrote it is Torsten Beer.


00:05:30.460 --> 00:05:34.020
And he's one of the, I think he's got a library


00:05:34.020 --> 00:05:39.020
called PyB2D, which is one of two different Python accesses


00:05:39.020 --> 00:05:45.900
to this Box2D system, but it's pretty cool.


00:05:46.020 --> 00:05:49.820
The one of the things I like about this article is it talk.


00:05:49.820 --> 00:05:51.820
It has like lots of pretty examples,


00:05:51.820 --> 00:05:56.060
but physics engines are, even if they're built for games,


00:05:56.060 --> 00:06:01.060
they can also be used for things like an engine simulation


00:06:01.060 --> 00:06:04.220
or even like airflow simulations.


00:06:04.220 --> 00:06:06.460
So there's a lot of cool uses for this too


00:06:06.460 --> 00:06:08.740
that are outside of games.


00:06:08.740 --> 00:06:11.140
But the one of the incredible things


00:06:11.140 --> 00:06:13.300
is how small the programs can be.


00:06:13.300 --> 00:06:17.680
So this article has a contained,


00:06:17.680 --> 00:06:20.760
like an attached notebook, hosted notebook


00:06:20.760 --> 00:06:23.460
that has things like angry shapes,


00:06:23.460 --> 00:06:26.960
which is like angry birds and a rocket game.


00:06:26.960 --> 00:06:28.400
And there's a color mixing game,


00:06:28.400 --> 00:06:30.120
which I was just fascinated by.


00:06:30.120 --> 00:06:32.280
There's like a bunch of colors drop into it.


00:06:32.280 --> 00:06:35.480
It isn't listed on the article,


00:06:35.480 --> 00:06:36.780
but if you go to the example,


00:06:36.780 --> 00:06:38.640
it's kind of color mixing thing.


00:06:38.640 --> 00:06:42.480
And it's only like 70 lines of code.


00:06:42.480 --> 00:06:47.480
And with that, you can have some amazing physics examples.


00:06:47.480 --> 00:06:49.920
And I'm pretty excited about this actually.


00:06:49.920 --> 00:06:51.880
So I'd like to do those.


00:06:51.880 --> 00:06:53.420
- You know, I think this makes a lot of sense


00:06:53.420 --> 00:06:55.320
in the notebook form


00:06:55.320 --> 00:06:57.480
because you're trying to visualize certain things.


00:06:57.480 --> 00:06:59.280
And sometimes graphs are fine,


00:06:59.280 --> 00:07:03.040
but other times they just don't capture like flow


00:07:03.040 --> 00:07:04.520
and that kind of stuff.


00:07:04.520 --> 00:07:07.020
And it seems like game animation would be great.


00:07:07.020 --> 00:07:07.860
Kim, what do you think?


00:07:07.860 --> 00:07:09.800
- I was also gonna say, if you can get something


00:07:09.800 --> 00:07:11.640
very impressive done in 70 lines of code


00:07:11.640 --> 00:07:13.400
as a learning tool, that's brilliant,


00:07:13.400 --> 00:07:15.920
because that's effectively a screen of code.


00:07:15.920 --> 00:07:19.080
Otherwise, if you're looking at hundreds and hundreds


00:07:19.080 --> 00:07:20.940
of lines, if you're a seasoned developer,


00:07:20.940 --> 00:07:21.980
that's perfectly reasonable,


00:07:21.980 --> 00:07:24.900
but to a new person, that must look overwhelming.


00:07:24.900 --> 00:07:27.880
If you can fit a single screen and say, here is it,


00:07:27.880 --> 00:07:30.160
this is everything you need to make this thing work,


00:07:30.160 --> 00:07:31.680
it's quite a powerful tool,


00:07:31.680 --> 00:07:33.000
and it looks like a lot of fun, actually.


00:07:33.000 --> 00:07:34.040
- It does look fun.


00:07:34.040 --> 00:07:36.440
- Yeah, and so there's some interesting,


00:07:36.440 --> 00:07:38.560
the article talks about some interesting hoops


00:07:38.560 --> 00:07:41.320
he had to jump through using IPyEvents,


00:07:41.320 --> 00:07:46.320
and I I pie widgets and canvas to be able to draw things and get


00:07:46.320 --> 00:07:51.480
events from people. But this is just some fun stuff. Here's like


00:07:51.480 --> 00:07:55.280
the I'm sure we're showing on the screen the thing like angry


00:07:55.280 --> 00:08:01.360
birds and to be honest, like the play ability of it isn't maybe


00:08:01.360 --> 00:08:04.680
like it's not on the level of what we don't play in an Xbox


00:08:04.680 --> 00:08:06.960
or something like that. Obviously you probably won't hook


00:08:06.960 --> 00:08:13.600
a controller to it. Yeah, but that you can do something like this so quickly is pretty amazing.


00:08:13.600 --> 00:08:18.000
And also on the other hand, if you write, once you write it yourself, the playability actually


00:08:18.000 --> 00:08:22.160
doesn't matter that much. I mean, it's you're looking at interacting with the thing you wrote.


00:08:22.160 --> 00:08:27.200
I think that. Yeah. Yeah. I love it. This is really cool. Nice find, Brian. All right. Let


00:08:27.200 --> 00:08:34.240
me tell you about some really interesting cyber security side of things. So I'm going to first


00:08:34.240 --> 00:08:39.040
tell you about this thing called a thinkst canary, but that's not actually what I want to talk about.


00:08:39.040 --> 00:08:45.520
It's just to set the stage. Okay. So here's a challenge, something that always stresses me out


00:08:45.520 --> 00:08:51.680
is what if somebody was to break into your app, into your systems, into your cloud infrastructure


00:08:51.680 --> 00:08:56.000
or whatever, how would you know, right? Like what, what would be the indicator, right? If long,


00:08:56.000 --> 00:09:01.440
if they don't trash it, they don't, you know, lock it with a crypto lockers or anything like that,


00:09:01.440 --> 00:09:04.880
ransomware, then they could just cruise around there, right?


00:09:04.880 --> 00:09:09.280
So this company thinks Canary created this.


00:09:09.280 --> 00:09:12.880
I think you can put it in the cloud as like a hosted container type thing,


00:09:12.880 --> 00:09:16.800
or you can get like a little raspberry pi like things and put them physically on your network.


00:09:16.800 --> 00:09:20.560
If you had a physical network and you could say you act like a SQL server,


00:09:20.560 --> 00:09:22.560
you act like an exchange server.


00:09:22.560 --> 00:09:26.880
You if somebody tries to search the network and says, show me all the active directories,


00:09:26.880 --> 00:09:30.640
you be that maybe we're not even using active directory because we're not on Windows.


00:09:30.640 --> 00:09:34.180
But if somebody breaks in, they may well start looking for those types of things.


00:09:34.180 --> 00:09:38.180
And what they'll do is they'll trigger alarms if somebody tries to interact with them.


00:09:38.180 --> 00:09:42.180
And normal things shouldn't because only if you're like trolling around looking for them,


00:09:42.180 --> 00:09:43.440
should it be discovered, right?


00:09:43.440 --> 00:09:44.940
So that's what this is.


00:09:44.940 --> 00:09:48.060
And with this whole log for shell stuff that's going on,


00:09:48.060 --> 00:09:54.120
it's just such a nightmare of like, well, we installed this app that did invoice management for us.


00:09:54.120 --> 00:09:56.360
Did it have a log for shell vulnerability?


00:09:56.360 --> 00:09:58.120
I don't know, maybe they said they fixed it.


00:09:58.120 --> 00:10:02.200
And, but if somebody gets in, it's not just, we have to patch the log for shell


00:10:02.200 --> 00:10:07.180
or the log for J version, we've also got to then know what else has been run.


00:10:07.180 --> 00:10:08.480
Cause they could have installed whatever.


00:10:08.480 --> 00:10:08.720
Right.


00:10:08.720 --> 00:10:09.180
Yeah.


00:10:09.180 --> 00:10:12.960
So the thing I actually want to recommend to Python people is


00:10:12.960 --> 00:10:15.040
this thing called canary tokens.


00:10:15.040 --> 00:10:16.220
So check this out.


00:10:16.220 --> 00:10:17.320
This is fantastic.


00:10:17.320 --> 00:10:21.840
So what you can do is you can get different things that will then trigger alarms, like


00:10:21.840 --> 00:10:23.880
emails or other sorts of stuff to you.


00:10:24.220 --> 00:10:27.620
So I can come over here and I can say, I would like to get a URL.


00:10:27.620 --> 00:10:32.140
And if anybody visits that URL, send me an email and say, you know,


00:10:32.140 --> 00:10:33.320
whatever message I put in here.


00:10:33.320 --> 00:10:36.760
So I could come in and say, here's a URL and send me at Michael at


00:10:36.760 --> 00:10:43.100
talk by Thon or my email and say, this is hidden in the admin section.


00:10:43.100 --> 00:10:44.920
Unused or something like that.


00:10:44.920 --> 00:10:49.040
If somebody sends me an email, if I get that email, somebody's gone in and click


00:10:49.040 --> 00:10:50.880
that link in the admin section of my site.


00:10:50.880 --> 00:10:53.780
And if I didn't, it gives you like IP address and all that sort of stuff.


00:10:54.080 --> 00:10:55.520
of what comes back.


00:10:55.520 --> 00:10:58.560
So if I didn't do it, or it looks like an unknown IP,


00:10:58.560 --> 00:11:01.120
that should be highly concerning, right?


00:11:01.120 --> 00:11:01.960
So what else?


00:11:01.960 --> 00:11:03.380
That URL is interesting.


00:11:03.380 --> 00:11:04.980
I can get a DNS token.


00:11:04.980 --> 00:11:07.920
Somebody requests, like, does a DNS lookup on


00:11:07.920 --> 00:11:12.080
rollouts.pythonbytes.fm.


00:11:12.080 --> 00:11:13.300
I can get an alert to that.


00:11:13.300 --> 00:11:15.440
That'd be pretty interesting.


00:11:15.440 --> 00:11:17.080
A unique email address.


00:11:17.080 --> 00:11:19.240
If somebody ever tries to contact that.


00:11:19.240 --> 00:11:20.240
A Word document.


00:11:20.240 --> 00:11:21.480
So you get like a Word document


00:11:21.480 --> 00:11:23.000
and put it in say like SharePoint


00:11:23.000 --> 00:11:24.400
or something dreadful like that.


00:11:24.400 --> 00:11:26.000
And if it gets opened,


00:11:26.000 --> 00:11:28.780
you'll get an email that somebody got that.


00:11:28.780 --> 00:11:31.720
Let's see, you've got VPN wire guards,


00:11:31.720 --> 00:11:33.560
file, you can create a custom EXE.


00:11:33.560 --> 00:11:37.080
And if somebody runs your EXE or a SQL server instance,


00:11:37.080 --> 00:11:41.240
or you can even do like directly a log for shell link


00:11:41.240 --> 00:11:42.680
that will run.


00:11:42.680 --> 00:11:45.240
So if you are trying to like figure out,


00:11:45.240 --> 00:11:46.640
just put stuff in there to let you know


00:11:46.640 --> 00:11:47.720
if somebody gets into a part


00:11:47.720 --> 00:11:48.680
they're not supposed to be in,


00:11:48.680 --> 00:11:49.720
like this is really cool.


00:11:49.720 --> 00:11:51.960
There's no, it's free, it doesn't cost anything.


00:11:51.960 --> 00:11:55.240
It doesn't require any setup, like put a Word document in a folder.


00:11:55.240 --> 00:11:56.960
If it gets opened, let us know.


00:11:56.960 --> 00:11:57.600
What do you think?


00:11:57.600 --> 00:12:02.200
Well, I was going to say, I'm, I've been looking for ways to do exactly this kind


00:12:02.200 --> 00:12:06.640
of thing, because, you know, I'm totally unique in being concerned that log for


00:12:06.640 --> 00:12:10.040
shell has got impacts that I don't, that I can't see on our systems.


00:12:10.040 --> 00:12:10.520
Yeah.


00:12:10.520 --> 00:12:13.360
Just because your public facing systems happen not to have used log for shell


00:12:13.360 --> 00:12:15.600
things, doesn't mean that you're necessarily safe.


00:12:15.600 --> 00:12:19.360
All it means is that, you know, if some other, by some other means, somebody's


00:12:19.360 --> 00:12:22.440
got into one of your internal systems wouldn't necessarily know that.


00:12:22.440 --> 00:12:25.640
So, I'm very much interested in this.


00:12:25.640 --> 00:12:30.400
I knew about canaries already, things happened to sponsor the local


00:12:30.400 --> 00:12:32.160
South African PyCon ZA conference.


00:12:32.160 --> 00:12:36.400
Um, but I can, every tokens are very funky, additional add onto that.


00:12:36.400 --> 00:12:36.640
These,


00:12:36.640 --> 00:12:37.200
exactly.


00:12:37.200 --> 00:12:38.640
I knew about the canaries as well.


00:12:38.640 --> 00:12:40.960
I'm like, ah, but that doesn't really apply to the world that I live in.


00:12:40.960 --> 00:12:44.480
I'm not like an enterprise, but like this, these make a lot of sense and


00:12:44.480 --> 00:12:45.600
they're free, which I think is cool.


00:12:45.600 --> 00:12:46.080
Yeah.


00:12:46.080 --> 00:12:50.080
Here's what it looks like if you get a notice.


00:12:50.080 --> 00:12:52.160
It says, this is the email I got.


00:12:52.160 --> 00:12:54.080
Your Canary token was triggered.


00:12:54.080 --> 00:12:55.820
The channel was HTTP.


00:12:55.820 --> 00:12:56.880
The token was that.


00:12:56.880 --> 00:12:59.280
This is a test, the IP address of the person.


00:12:59.280 --> 00:13:00.560
So this was one of those URLs.


00:13:00.560 --> 00:13:02.560
Somebody interacts with this URL, let me know.


00:13:02.560 --> 00:13:04.240
Here's their user agent.


00:13:04.240 --> 00:13:05.080
Here's the message.


00:13:05.080 --> 00:13:06.160
There's the IP and so on.


00:13:06.160 --> 00:13:07.620
So you would just get a notice like that


00:13:07.620 --> 00:13:09.920
that says somebody clicked on something


00:13:09.920 --> 00:13:11.160
they shouldn't have had access to.


00:13:11.160 --> 00:13:12.860
Yeah, so anyway, pretty neat.


00:13:12.860 --> 00:13:13.880
Brian?


00:13:13.880 --> 00:13:15.320
- Yeah, I'm not sure.


00:13:15.320 --> 00:13:17.480
- Yeah, it's actually pretty cool.


00:13:17.480 --> 00:13:20.160
Some of the things I didn't think you could,


00:13:20.160 --> 00:13:22.520
I wouldn't even expect, like can somebody


00:13:22.520 --> 00:13:25.880
cloning your website or didn't know that was a thing.


00:13:25.880 --> 00:13:28.200
- I'm scared now to be honest.


00:13:28.200 --> 00:13:29.040
(laughing)


00:13:29.040 --> 00:13:30.400
I didn't realize that was something


00:13:30.400 --> 00:13:32.040
I should be worrying about.


00:13:32.040 --> 00:13:35.080
- Get an alert when a MySQL dump is loaded.


00:13:35.080 --> 00:13:37.280
Like, okay, like how does that happen?


00:13:37.280 --> 00:13:39.600
I don't know, but that's pretty awesome that it's possible


00:13:39.600 --> 00:13:40.880
and also frightening.


00:13:40.880 --> 00:13:41.720
- Yeah.


00:13:41.720 --> 00:13:43.760
- Yeah, and Sam out in the audience says,


00:13:43.760 --> 00:13:46.640
Ironically, the log for shell might have its own vulnerabilities.


00:13:46.640 --> 00:13:47.640
(laughs)


00:13:47.640 --> 00:13:50.340
You know, that thing's been patched a couple of times.


00:13:50.340 --> 00:13:51.560
It's going to be a big, big problem.


00:13:51.560 --> 00:13:55.460
Anyway, Canary tokens, I think this is broadly useful for Python people.


00:13:55.460 --> 00:13:58.240
You could put the URL stuff inside of your app.


00:13:58.240 --> 00:14:01.000
You could put an email inside of locations.


00:14:01.000 --> 00:14:05.760
There's lots of stuff that I like this, the database restore type things and so on.


00:14:05.760 --> 00:14:06.760
This looks useful.


00:14:06.760 --> 00:14:09.560
- Yeah, so I'm still a little lost.


00:14:09.560 --> 00:14:13.440
You throw this, like, for instance, like you said, in the admin section that you shouldn't


00:14:13.440 --> 00:14:16.240
and you just know about it so you don't click it or something.


00:14:16.240 --> 00:14:18.980
- Yeah. So imagine this, imagine you've got,


00:14:18.980 --> 00:14:21.120
in your admin section, you've got a,


00:14:21.120 --> 00:14:23.620
like a search for user button and then next to it,


00:14:23.620 --> 00:14:26.920
you could just put an export all data.


00:14:26.920 --> 00:14:27.760
- Yeah.


00:14:27.760 --> 00:14:30.360
- And then put one of these URLs at the end point.


00:14:30.360 --> 00:14:32.480
And nobody who works, you just tell everyone,


00:14:32.480 --> 00:14:33.880
never click the export all data.


00:14:33.880 --> 00:14:34.840
It doesn't do anything.


00:14:34.840 --> 00:14:35.960
But if someone were to break in,


00:14:35.960 --> 00:14:37.120
what's the first thing they're going to want?


00:14:37.120 --> 00:14:38.720
Oh, well, let's get the export all data.


00:14:38.720 --> 00:14:40.640
Boom, they'll go click it and you'll know.


00:14:40.640 --> 00:14:42.220
They're still in, it's bad,


00:14:42.220 --> 00:14:43.740
but at least they're not in


00:14:43.740 --> 00:14:46.900
and just have unlimited time to be in, you know?


00:14:46.900 --> 00:14:48.460
- Yeah, you can put some other stuff too.


00:14:48.460 --> 00:14:50.180
Like let's say you've got a Django website


00:14:50.180 --> 00:14:54.020
and you stick, you load a like a PHP admin page


00:14:54.020 --> 00:14:57.100
or something like that, just at the same URL


00:14:57.100 --> 00:14:59.980
in case somebody's trying to grab that or something.


00:14:59.980 --> 00:15:03.380
- Yep, yeah, a lot of interesting little breadcrumbs


00:15:03.380 --> 00:15:04.220
you can leave in there.


00:15:04.220 --> 00:15:07.260
Okay, Kim, that brings us to yours.


00:15:07.260 --> 00:15:10.740
- Sure, the first topic I was going to talk about


00:15:10.740 --> 00:15:15.980
are actually two similar, but not quite the same pieces of software by pi auto


00:15:15.980 --> 00:15:21.940
GUI and pi win auto are both toolkits for automating GUIs, effectively, or


00:15:21.940 --> 00:15:25.020
automating GUIs for interacting programmatically with GUIs.


00:15:25.020 --> 00:15:25.500
Nice.


00:15:25.500 --> 00:15:27.060
I wouldn't want to be really hard, right?


00:15:27.060 --> 00:15:30.020
Hey, before you go on, before you go on, could you give that like three


00:15:30.020 --> 00:15:31.460
control pluses just for sure.


00:15:31.460 --> 00:15:31.740
Sorry.


00:15:31.740 --> 00:15:34.260
I was just seeing now it's a little bit on the small side.


00:15:34.260 --> 00:15:34.900
Thanks.


00:15:34.900 --> 00:15:35.420
How's that?


00:15:35.420 --> 00:15:37.380
A little more space to play with.


00:15:37.380 --> 00:15:37.980
There you go.


00:15:37.980 --> 00:15:38.700
Fair enough.


00:15:39.020 --> 00:15:41.660
Well, let me just, while I remember, do it to this one as well.


00:15:41.660 --> 00:15:44.220
They both happen to be Read the Docs documents.


00:15:44.220 --> 00:15:47.360
So you're quite right, the programmatically controlling a GUI,


00:15:47.360 --> 00:15:49.160
it can be quite a pain,


00:15:49.160 --> 00:15:53.760
particularly for GUIs that aren't particularly easy to understand.


00:15:53.760 --> 00:15:55.960
And the reason I bring tools like this up


00:15:55.960 --> 00:15:58.120
is that there's quite a lot of use cases.


00:15:58.120 --> 00:16:00.820
I can think of two examples off the top of my own career,


00:16:00.820 --> 00:16:02.460
and I'm sure there's hundreds more,


00:16:02.460 --> 00:16:03.760
where this kind of thing is useful,


00:16:03.760 --> 00:16:06.180
and you might not know it's something you can do.


00:16:06.180 --> 00:16:08.080
And the kind of examples I'm thinking of


00:16:08.160 --> 00:16:13.280
Uh, particularly in I'm sure much enterprise and in industrial software.


00:16:13.280 --> 00:16:17.300
When you get a piece of equipment, you frequently get a GUI tool that


00:16:17.300 --> 00:16:19.700
accompanies it, but it is no API, right?


00:16:19.700 --> 00:16:21.440
Well, no API server.


00:16:21.440 --> 00:16:25.120
There's a tool you fire up and you set all the settings, but because the company


00:16:25.120 --> 00:16:27.600
that supplied you the piece of equipment, they don't write software.


00:16:27.600 --> 00:16:28.260
It's not their thing.


00:16:28.260 --> 00:16:31.560
You know, they, they, they either outsource the tool or the intern writes it.


00:16:31.560 --> 00:16:36.920
And it has 50 check boxes and you know, in laid out in grid form, and you need


00:16:36.920 --> 00:16:40.600
set it up every single time you want to use that piece of software. There's no ability to remember


00:16:40.600 --> 00:16:44.600
what you set, there's nothing to do. And I've worked with a couple of those systems, and I see


00:16:44.600 --> 00:16:48.920
Brian, I think you probably have as well, where basically there's a piece of paper next to the


00:16:48.920 --> 00:16:52.600
computer the software is on with a screen print of what the settings should be. So that the person


00:16:52.600 --> 00:16:56.440
who has to come down and use it knows which of the 50 tick boxes to check, and then they have


00:16:56.440 --> 00:17:00.600
to check that the pattern effectively matches on screen, and then they hit run. And something like


00:17:00.600 --> 00:17:06.840
PyAutoGUI or PyWinauto are both useful so that you can effectively script the startup of that


00:17:06.840 --> 00:17:11.400
app. And you can say to you write a small piece of Python that fires this tool up, identifies all the


00:17:11.400 --> 00:17:16.600
checkboxes, ticks the ones you've programmed in, and then either leaves it for the human to push


00:17:16.600 --> 00:17:20.120
go or whatever it is the app does, or for that matter, pushes go itself and then closes the app


00:17:20.120 --> 00:17:25.400
and records that it did that. So that kind of use case is very powerful. And I think there are lots


00:17:25.400 --> 00:17:30.760
of cases, particularly in enterprise software, or internal software that, you know, somebody wrote


00:17:30.760 --> 00:17:34.200
for the company to do something very useful, but it's been around for 20 years, and the guy who


00:17:34.200 --> 00:17:39.800
wrote it is not around. Nobody wants to touch it because the source is terrifying. So nobody's


00:17:39.800 --> 00:17:43.640
going to sit down and change it. How do you even get that Visual Basic 6 or Visual Basic 5 and


00:17:43.640 --> 00:17:49.240
solve it? Well, exactly. How do you even compile it now? Exactly. So to be able to wrap it is a


00:17:49.240 --> 00:17:53.560
very powerful thing to be able to do. And the other kind of use case that's somewhat related,


00:17:53.560 --> 00:17:59.000
it also comes to mind, is I've spent a large amount of my career doing industrial automation,


00:17:59.000 --> 00:18:04.680
factory-based type work. And there, the faster you can go and the fewer steps you need a human to


00:18:04.680 --> 00:18:09.960
repeatedly do, the better for you in many ways. The human's time is best spent actually manipulating


00:18:09.960 --> 00:18:13.720
objects and checking things rather than opening pieces of software and clicking boxes and closing


00:18:13.720 --> 00:18:19.960
them again. So quite frequently, we've had cases on the production line where the vendor of the


00:18:19.960 --> 00:18:24.440
chip we're using has supplied this tool that does some security-related thing. And it's a GUI tool,


00:18:24.440 --> 00:18:28.520
and every single time you would have to open it up, you'd have to click the same two boxes,


00:18:28.520 --> 00:18:32.680
they'd have to say, yes, secure this chip, close it again, repeat, wait for another one to arrive


00:18:32.680 --> 00:18:37.560
at your workstation. And if you can automate it again with a wrapping tool, nobody need even be


00:18:37.560 --> 00:18:42.200
involved at all. Part of your production process is you wrap it, you fire up the tool, you click


00:18:42.200 --> 00:18:47.400
the two buttons programmatically, you hit go, and you close it again and repeat. And again,


00:18:47.400 --> 00:18:51.480
I personally have encountered situations where that's useful and I'd like to, I would imagine


00:18:51.480 --> 00:18:56.680
I'm far from alone in it, so I just thought I'd mention these things do exist. I suspect


00:18:56.680 --> 00:19:01.280
Lots of people do use them, but for people who don't know they're there, very useful things to be able to do.


00:19:01.280 --> 00:19:07.080
Wrapping GUIs is a bit tedious up front because often these tools aren't very well written.


00:19:07.080 --> 00:19:11.680
So you'll have checkbox 1, checkbox 4, checkbox 27, checkbox 295,


00:19:11.680 --> 00:19:15.680
and no obvious naming consistency with what they do or how they work.


00:19:15.680 --> 00:19:20.680
But once you've figured it out, let the computer worry, let the script worry about what those checkboxes do.


00:19:20.680 --> 00:19:26.080
I've seen the backside of that code where you're like looking at some event handler and it's like,


00:19:26.080 --> 00:19:29.660
If checkbox 24 checked,


00:19:29.660 --> 00:19:31.560
then do this like what in the world?


00:19:31.560 --> 00:19:33.660
Like who exactly didn't want to name this


00:19:33.660 --> 00:19:35.220
'cause they got a program against those names.


00:19:35.220 --> 00:19:36.220
That's insane.


00:19:36.220 --> 00:19:37.860
Well, they just do one at a time


00:19:37.860 --> 00:19:39.200
when you're working on exactly it.


00:19:39.200 --> 00:19:40.560
Yeah, yeah.


00:19:40.560 --> 00:19:41.960
So you're working on one feature and you go,


00:19:41.960 --> 00:19:42.960
oh, I need a checkbox.


00:19:42.960 --> 00:19:45.360
Oh, the default is checkbox 24.


00:19:45.360 --> 00:19:48.000
Then you look for the you do the callback handling


00:19:48.000 --> 00:19:49.700
and you just did it.


00:19:49.700 --> 00:19:51.240
So, you know, it's 24.


00:19:51.240 --> 00:19:53.380
So I don't want to bother changing it.


00:19:53.380 --> 00:19:53.880
That's cool.


00:19:53.880 --> 00:19:56.920
- Brian, does this automation have a place in your world?


00:19:56.920 --> 00:20:00.000
- Yeah, so there's, like Kim said,


00:20:00.000 --> 00:20:01.200
there's places where tools


00:20:01.200 --> 00:20:04.120
that don't necessarily have a user interface.


00:20:04.120 --> 00:20:06.080
The thing that this doesn't,


00:20:06.080 --> 00:20:07.880
I don't think these do like web stuff,


00:20:07.880 --> 00:20:10.240
the web automations, other tools.


00:20:10.240 --> 00:20:12.280
- Well, I presume you could automate a browser,


00:20:12.280 --> 00:20:13.760
but I mean, by the time you're doing that,


00:20:13.760 --> 00:20:17.040
you might as well be using the tools designed for it.


00:20:17.040 --> 00:20:18.320
- Yeah, Selenium or something.


00:20:18.320 --> 00:20:22.440
What I really hope is anybody that has any sort of tool


00:20:22.440 --> 00:20:24.960
that they're writing in in on a web.


00:20:24.960 --> 00:20:26.760
So web frameworks often get


00:20:26.760 --> 00:20:28.840
internal tools get written web frameworks


00:20:28.840 --> 00:20:32.040
and and then people forget to throw IDs in things.


00:20:32.040 --> 00:20:35.040
So yes, the best way to automate a web stuff


00:20:35.040 --> 00:20:36.880
is to have an ID that you can grab onto.


00:20:36.880 --> 00:20:40.920
But often they're just these in these nested div nightmares.


00:20:40.920 --> 00:20:43.520
But anyway, yeah, there's a couple tools


00:20:43.520 --> 00:20:47.160
that we've used by Win Auto for that are pretty nice.


00:20:47.160 --> 00:20:48.200
Yeah, very nice.


00:20:48.200 --> 00:20:50.120
Yeah, it seems like if you're building a GUI app,


00:20:50.120 --> 00:20:52.120
you could test it with this, right?


00:20:52.120 --> 00:20:55.020
sort of full-on integration tests from the outside.


00:20:55.020 --> 00:20:57.320
And also I was talking to somebody and they were like,


00:20:57.320 --> 00:20:59.320
well, this app that I work on,


00:20:59.320 --> 00:21:01.680
it doesn't have like a concept of a back button.


00:21:01.680 --> 00:21:04.080
So you drive into the menu, hit a thing, go,


00:21:04.080 --> 00:21:05.720
and then it'll take you back home.


00:21:05.720 --> 00:21:07.780
It's like 10 steps, right?


00:21:07.780 --> 00:21:10.680
I could definitely see a little toolbar thing,


00:21:10.680 --> 00:21:11.680
you press a couple of buttons,


00:21:11.680 --> 00:21:14.580
like get me to this scenario and I'll put the last thing in.


00:21:14.580 --> 00:21:15.760
Get me to that scenario,


00:21:15.760 --> 00:21:17.780
like do the nine steps, I'll do the 10th.


00:21:17.780 --> 00:21:18.520
>> Exactly.


00:21:18.520 --> 00:21:19.280
>> Yeah.


00:21:19.280 --> 00:21:21.480
>> In many ways, the way I've mainly


00:21:21.480 --> 00:21:25.260
encountered it has been that the first scenario laid out not so much actually


00:21:25.260 --> 00:21:29.040
automating the full running of the tool, but setting the tool up so that it is in


00:21:29.040 --> 00:21:32.280
the right state for what the company needs without having somebody have to


00:21:32.280 --> 00:21:35.520
either consult a document and risk getting it wrong or not know which of


00:21:35.520 --> 00:21:37.860
the settings they should have, because that piece of paper isn't with the


00:21:37.860 --> 00:21:39.760
computer anymore, all that kind of thing.


00:21:39.760 --> 00:21:41.440
It shouldn't happen, but it does.


00:21:41.440 --> 00:21:44.240
And it's much easier to have this kind of, to have the computer worry


00:21:44.240 --> 00:21:45.180
about what the settings should be.


00:21:45.180 --> 00:21:48.300
Ideally the program should remember that, but you know, they don't, they don't.


00:21:48.300 --> 00:21:50.360
You know, it's not much you can do to change that off of the fact.


00:21:50.440 --> 00:21:52.760
It's like external intelligence for a bad app.


00:21:52.760 --> 00:21:54.160
That's right.


00:21:54.160 --> 00:21:55.680
- Well, there's also like API stuff


00:21:55.680 --> 00:21:56.960
that people forget about.


00:21:56.960 --> 00:22:01.960
Like I've got a device that I need to automate


00:22:01.960 --> 00:22:06.480
connecting it to Windows and getting the device set up


00:22:06.480 --> 00:22:08.760
or something every time I plug one in.


00:22:08.760 --> 00:22:12.520
And just automating that that works sometimes too.


00:22:12.520 --> 00:22:13.440
So anyway. - Oh yeah.


00:22:13.440 --> 00:22:14.700
- Absolutely.


00:22:14.700 --> 00:22:16.320
All right, Brian, over to you.


00:22:16.320 --> 00:22:17.160
- Thanks.


00:22:19.440 --> 00:22:22.800
I saw this, Brett Cannon wrote an article called


00:22:22.800 --> 00:22:24.600
a reverse chronological,


00:22:24.600 --> 00:22:27.760
a reverse chronology of some Python features.


00:22:27.760 --> 00:22:29.720
And I really love this article.


00:22:29.720 --> 00:22:31.360
It's pretty simple.


00:22:31.360 --> 00:22:32.960
One of the things I like about it is just


00:22:32.960 --> 00:22:34.360
'cause we cover so much


00:22:34.360 --> 00:22:37.560
and we've been covering Python releases for quite a while.


00:22:37.560 --> 00:22:41.720
I kind of forget which releases I got which feature in.


00:22:41.720 --> 00:22:45.260
So a really brief, you know, rundown


00:22:45.260 --> 00:22:47.840
of some of the different features is nice.


00:22:47.840 --> 00:22:50.440
Like last week we were talking and saying,


00:22:50.440 --> 00:22:54.640
well, if you're on 3.7, why would you wanna move forward?


00:22:54.640 --> 00:22:57.220
And I can't remember which features and which.


00:22:57.220 --> 00:22:58.920
So having a quick bullet list,


00:22:58.920 --> 00:23:02.880
like in 3.10 we got the match statement, of course,


00:23:02.880 --> 00:23:04.600
we've talked about that recently,


00:23:04.600 --> 00:23:06.720
but also better error messages.


00:23:06.720 --> 00:23:09.440
And I'm gonna pause a little bit,


00:23:09.440 --> 00:23:13.080
Brett brings up in the introduction discussion


00:23:13.080 --> 00:23:15.080
that if you're kind of one of those people


00:23:15.080 --> 00:23:17.680
that think Python's kind of getting bloated


00:23:17.680 --> 00:23:20.080
and they're throwing too much stuff in it.


00:23:20.080 --> 00:23:21.920
And I wish that we had the good old days


00:23:21.920 --> 00:23:23.600
where you could just think about all Python


00:23:23.600 --> 00:23:25.300
in your own head.


00:23:25.300 --> 00:23:28.040
Well, you kind of throw everything out.


00:23:28.040 --> 00:23:31.640
He recommends going down this list


00:23:31.640 --> 00:23:32.960
and picking the first feature


00:23:32.960 --> 00:23:34.920
that you don't think you could live without.


00:23:34.920 --> 00:23:38.280
And everything before that led to that.


00:23:38.280 --> 00:23:40.240
So you can't throw that stuff out either.


00:23:40.240 --> 00:23:41.600
It all kind of goes together.


00:23:41.600 --> 00:23:45.360
And one of the examples is the match statement


00:23:45.360 --> 00:23:48.100
or the, what are they, pattern matching.


00:23:48.100 --> 00:23:51.140
That was sort of controversial,


00:23:51.140 --> 00:23:55.700
but the code to get that to work involved,


00:23:55.700 --> 00:23:56.820
or the process involved,


00:23:56.820 --> 00:24:00.020
even like making a new parser for Python,


00:24:00.020 --> 00:24:03.120
or using a new parser for Python.


00:24:03.120 --> 00:24:05.640
And, but with that new parser,


00:24:05.640 --> 00:24:08.540
then things like better error messages are possible.


00:24:08.540 --> 00:24:12.860
So if you like better error messages, which I do,


00:24:12.860 --> 00:24:15.700
That means 310 and everything below kind of has to stay.


00:24:15.700 --> 00:24:19.180
But anyway, it's kind of funny.


00:24:19.180 --> 00:24:22.980
Moving on, like I forgot what the dictionary support


00:24:22.980 --> 00:24:27.980
for like the or and or equal, that came in in 3.9.


00:24:27.980 --> 00:24:33.140
So if somebody's thinking, well, why should I upgrade?


00:24:33.140 --> 00:24:35.380
This is a good list to take a look at.


00:24:35.380 --> 00:24:37.660
- Nice, all right, I did the little exercise.


00:24:37.660 --> 00:24:38.900
I've decided 3.7.


00:24:38.900 --> 00:24:39.820
- 3.7 for you.


00:24:39.820 --> 00:24:42.680
So what was the thing in 3.7 that you can't live without?


00:24:42.680 --> 00:24:47.600
>> So the dictionary preserving order stuff is really nice for


00:24:47.600 --> 00:24:51.520
like reading and writing files and making sure that they don't diff hard.


00:24:51.520 --> 00:24:52.120
You know what I mean?


00:24:52.120 --> 00:24:55.040
>> Yeah. >> If you try to, so they're in the order you put them there.


00:24:55.040 --> 00:24:56.320
All the other stuff I'm not hating on it.


00:24:56.320 --> 00:24:58.360
Like I like the walrus operator.


00:24:58.360 --> 00:24:59.720
I like some of the other things.


00:24:59.720 --> 00:25:03.480
I like the lowercase list bracket int rather than importing types.


00:25:03.480 --> 00:25:04.240
All those are great.


00:25:04.240 --> 00:25:05.000
I'm not knocking them.


00:25:05.000 --> 00:25:07.400
I'm just saying like, where would I go?


00:25:07.400 --> 00:25:09.080
It starts to hurt where?


00:25:09.080 --> 00:25:11.520
It really starts to hurt for me at three, seven and below.


00:25:11.520 --> 00:25:13.760
- Well, I was trying a Jupyter,


00:25:13.760 --> 00:25:17.120
like an interactive Jupyter system the other day,


00:25:17.120 --> 00:25:18.640
looking at some data science stuff


00:25:18.640 --> 00:25:19.860
and it was already set up.


00:25:19.860 --> 00:25:21.940
And I tried to throw in this,


00:25:21.940 --> 00:25:25.120
the fstring value equal thing


00:25:25.120 --> 00:25:27.800
to be able to quickly debug an item


00:25:27.800 --> 00:25:28.640
and it didn't work.


00:25:28.640 --> 00:25:29.680
- You said, what the heck?


00:25:29.680 --> 00:25:33.320
- And it turned out it was using 3.7 and not 3.8.


00:25:33.320 --> 00:25:35.440
And apparently I'm very used to that.


00:25:35.440 --> 00:25:38.320
And I don't think I could live without it.


00:25:38.320 --> 00:25:41.640
But and then a reminder also that 3.11,


00:25:41.640 --> 00:25:43.480
when it comes out in a year,


00:25:43.480 --> 00:25:45.680
it's just gonna have a lot of speed ups.


00:25:45.680 --> 00:25:46.520
So--


00:25:46.520 --> 00:25:48.200
- Yeah, if that comes up with a lot of the performance stuff


00:25:48.200 --> 00:25:50.040
then like that's my new number.


00:25:50.040 --> 00:25:51.480
Kim, where are you?


00:25:51.480 --> 00:25:53.280
- If you forced me to roll back,


00:25:53.280 --> 00:25:55.400
I would refuse to go further than 3.6


00:25:55.400 --> 00:25:57.120
because I must have those f-strings.


00:25:57.120 --> 00:25:58.160
- Yeah.


00:25:58.160 --> 00:26:00.000
- 'Cause they're basically so much,


00:26:00.000 --> 00:26:02.360
they just make your code so much more attractive.


00:26:02.360 --> 00:26:05.040
That said, while I don't necessarily use


00:26:05.040 --> 00:26:06.560
everything that comes in the new versions,


00:26:06.560 --> 00:26:09.060
I don't particularly have any problem with them being there.


00:26:09.060 --> 00:26:11.960
I'm quite happy to just use the parts of Python I want.


00:26:11.960 --> 00:26:14.520
What really happens to me is that I don't necessarily know


00:26:14.520 --> 00:26:16.800
I can do something until two versions later.


00:26:16.800 --> 00:26:20.760
I probably only started doing that val= on 3.9, for example.


00:26:20.760 --> 00:26:24.300
Mainly because that's probably the first time I needed it more than anything else.


00:26:24.300 --> 00:26:27.900
I don't particularly rush forward and use the new features when they're available,


00:26:27.900 --> 00:26:30.360
but I'm glad they're there when I do ultimately want them.


00:26:30.360 --> 00:26:34.720
Yeah, 3.6 is an interesting example you bring up because it's got fStrings.


00:26:34.800 --> 00:26:39.040
It's got a whole bunch of other stuff too, but really, we can stop with f-strings.


00:26:39.040 --> 00:26:41.600
- Pretty much. - Yeah.


00:26:41.600 --> 00:26:45.480
And then the debugging stuff, Sam, the audience says,


00:26:45.480 --> 00:26:49.040
"Yes, F curly bracket name equals is indispensable for debugging."


00:26:49.040 --> 00:26:52.400
Oh, yeah, I'm with them. As I say, I hadn't used it when it first became available,


00:26:52.400 --> 00:26:54.880
but I would really not want to not have it available now.


00:26:54.880 --> 00:26:58.240
- Yeah. - I'm a caveman print debugger.


00:26:58.240 --> 00:27:01.480
- Yeah. - Kim, I like your take on it.


00:27:01.480 --> 00:27:03.480
Like, it's not going to hurt me if I don't care about it.


00:27:03.480 --> 00:27:09.480
I think one of the powers of Python is that you can be very successful with Python with a partial,


00:27:09.480 --> 00:27:12.480
quite partial understanding of what it even is.


00:27:12.480 --> 00:27:17.480
You don't need to know what a generator is, what a yield is, like what an expression is, what a class is,


00:27:17.480 --> 00:27:19.480
maybe not even how to create a function.


00:27:19.480 --> 00:27:23.480
Just write the code top to bottom and it'll probably still do something for you.


00:27:23.480 --> 00:27:27.480
And so you can sort of bring these in when it makes sense.


00:27:27.480 --> 00:27:31.480
Yeah, I would definitely still not teach match statements to beginners.


00:27:31.480 --> 00:27:32.940
- It's unnecessary. - No.


00:27:32.940 --> 00:27:34.440
- Exactly. - Yeah.


00:27:34.440 --> 00:27:36.740
- Totally agree. - Whereas I would use if strings, for example,


00:27:36.740 --> 00:27:39.940
for a beginner because it's just so much more readable than the other stuff is.


00:27:39.940 --> 00:27:41.940
But you're right, you don't have to magically,


00:27:41.940 --> 00:27:43.940
you don't have to use it all because it's there.


00:27:43.940 --> 00:27:46.240
Yeah. I'm sure there's people out there who feel like,


00:27:46.240 --> 00:27:49.240
"I gotta use it, it's here." But no, I agree with you.


00:27:49.240 --> 00:27:51.480
- Alright, so how about we talk-- - I don't think I've ever written a


00:27:51.480 --> 00:27:53.740
- walrus operator, for example. Sorry, you're saying. - Yeah.


00:27:53.740 --> 00:27:57.840
I actually took down a Talk Python website, or the training website,


00:27:57.840 --> 00:27:59.580
one of them with the walrus operator.


00:27:59.580 --> 00:28:03.240
because I put the walrus operator in a utility script


00:28:03.240 --> 00:28:05.240
that's not actually used by the site,


00:28:05.240 --> 00:28:07.640
but the site scans all the files trying to figure out


00:28:07.640 --> 00:28:10.040
where the handlers, the view methods are,


00:28:10.040 --> 00:28:13.520
and it killed it because I forgot that this is way back when


00:28:13.520 --> 00:28:15.180
it was still running 3.7.


00:28:15.180 --> 00:28:17.560
So that was my first really, oh my gosh.


00:28:17.560 --> 00:28:18.400
But yeah, now I use it.


00:28:18.400 --> 00:28:19.220
It's good.


00:28:19.220 --> 00:28:20.600
All right, so I want to talk about something


00:28:20.600 --> 00:28:23.960
that I've actually personally been working on lately.


00:28:23.960 --> 00:28:27.400
This is a follow-up to a Talk Python episode I did


00:28:27.400 --> 00:28:29.440
where I interviewed Mike Bayer,


00:28:29.440 --> 00:28:31.040
came on and did a great job,


00:28:31.040 --> 00:28:33.800
talked about SQLAlchemy2 and so on.


00:28:33.800 --> 00:28:35.560
And I mentioned that,


00:28:35.560 --> 00:28:38.800
just the way that Python's GC is set up


00:28:38.800 --> 00:28:43.280
is it's somewhat hostile to things like ORMs


00:28:43.280 --> 00:28:45.320
where they have to create a bunch of objects


00:28:45.320 --> 00:28:48.640
and return them to you in one batch.


00:28:48.640 --> 00:28:49.840
And what do I mean by that?


00:28:49.840 --> 00:28:52.000
Well, if I'm gonna do a query


00:28:52.000 --> 00:28:54.480
and it's gonna return a thousand records,


00:28:54.480 --> 00:28:56.000
the best case scenario


00:28:56.000 --> 00:28:57.840
is it has to create a thousand classes,


00:28:57.840 --> 00:29:00.280
SQLAlchemy models, and give them back, right?


00:29:00.280 --> 00:29:01.820
If I'm asking for them as a list.


00:29:01.820 --> 00:29:04.320
Well, the way the GC in Python works,


00:29:04.320 --> 00:29:06.580
not the reference counting, but the garbage collector is,


00:29:06.580 --> 00:29:09.840
after 700 allocations of container types,


00:29:09.840 --> 00:29:12.280
classes, dictionaries, lists, et cetera,


00:29:12.280 --> 00:29:13.680
that do not get cleaned up,


00:29:13.680 --> 00:29:17.480
700 surviving over the cleanups over a period of time,


00:29:17.480 --> 00:29:19.280
that's gonna trigger a garbage collection.


00:29:19.280 --> 00:29:20.640
And so I said, "Ah, you know, like,


00:29:20.640 --> 00:29:22.100
"is there something you could do?


00:29:22.100 --> 00:29:22.920
"Is there something we could like,


00:29:22.920 --> 00:29:24.360
"kind of think about with ORMs?"


00:29:24.360 --> 00:29:27.100
This is not at all specific to SQLAlchemy.


00:29:27.100 --> 00:29:29.780
This happens, I have an example here


00:29:29.780 --> 00:29:32.620
called Pythons GC and ORMs as a app


00:29:32.620 --> 00:29:34.300
and a little conversation on GitHub.


00:29:34.300 --> 00:29:36.260
And I said, is there something we maybe can do


00:29:36.260 --> 00:29:37.380
or have you guys thought about it?


00:29:37.380 --> 00:29:39.140
'Cause I don't really sure what the answer is.


00:29:39.140 --> 00:29:43.780
And said, not so much sure, but here, check this out.


00:29:43.780 --> 00:29:44.700
So I created this app.


00:29:44.700 --> 00:29:47.620
It creates a thousand records in both a SQLite database


00:29:47.620 --> 00:29:49.500
and a MongoDB database.


00:29:49.500 --> 00:29:51.700
We have like two really different examples.


00:29:51.700 --> 00:29:54.560
and then you run a query that returned 20,000 records.


00:29:54.560 --> 00:29:55.820
It's probably a lot.


00:29:55.820 --> 00:29:58.920
- But it's not like it makes a hundred thousand records.


00:29:58.920 --> 00:29:59.860
- Yeah, if I didn't say that,


00:29:59.860 --> 00:30:01.300
a hundred thousand records in the database


00:30:01.300 --> 00:30:03.220
and it gets 20,000 of them back.


00:30:03.220 --> 00:30:05.180
Okay, it's probably a little extra,


00:30:05.180 --> 00:30:07.120
but for example, if you go to,


00:30:07.120 --> 00:30:11.020
you go over to the Talk Python Training site,


00:30:11.020 --> 00:30:12.780
over here we've got a site map


00:30:12.780 --> 00:30:14.700
and in this site map,


00:30:14.700 --> 00:30:17.180
there are many, many,


00:30:17.180 --> 00:30:18.960
holding down the page down arrow


00:30:18.960 --> 00:30:20.220
and you can barely see it.


00:30:20.220 --> 00:30:22.940
We've got to get like 5,000 records, 6,000 records


00:30:22.940 --> 00:30:26.060
just to like list out the number of the pages


00:30:26.060 --> 00:30:29.020
that contain transcripts for the sitemap, right?


00:30:29.020 --> 00:30:31.500
So it's not entirely unreasonable


00:30:31.500 --> 00:30:33.020
that you would get a bunch of records back


00:30:33.020 --> 00:30:35.660
and then do something like render a page with it, right?


00:30:35.660 --> 00:30:39.740
Well, under this scenario, if you just run straight Python,


00:30:39.740 --> 00:30:44.740
that single query results in 1,859 garbage collection runs


00:30:44.740 --> 00:30:48.780
just to get one answer back.


00:30:48.780 --> 00:30:49.860
Is that insane?


00:30:49.860 --> 00:30:50.900
None of which is garbage.


00:30:50.900 --> 00:30:55.020
Yeah, it's not garbage yet because it's just being realized from the database.


00:30:55.020 --> 00:30:55.260
Right?


00:30:55.260 --> 00:30:58.880
Like it, it hasn't even come into existence all the way yet.


00:30:58.880 --> 00:31:01.180
And it's just like garbage, garbage, garbage, garbage, garbage.


00:31:01.180 --> 00:31:04.060
And it takes a 900 milliseconds.


00:31:04.060 --> 00:31:08.300
If you go and you tweak it in a way that I described here, which you may or may not


00:31:08.300 --> 00:31:12.900
want to do, but if you did, if you tweak the garbage collector, it will go from


00:31:12.900 --> 00:31:23.420
1800 collections to 29, 64 times less, the speed of the program is 23% faster. Okay,


00:31:23.420 --> 00:31:24.980
but it also uses less memory.


00:31:24.980 --> 00:31:27.580
Okay, less garbage collection.


00:31:27.580 --> 00:31:35.860
Less, less garbage collection. And it's not just 1800 versus 29. Python has this 100 to


00:31:35.860 --> 00:31:42.100
10 to one ratio of Gen 0, Gen 1 and Gen 2 collections. And Gen 0 collections are pretty


00:31:42.100 --> 00:31:44.340
cheap because it just touches new memory and looks at it.


00:31:44.340 --> 00:31:47.260
Gen one looks at like stuff that's only been inspected once


00:31:47.260 --> 00:31:50.100
and Gen two inspects the entire memory space.


00:31:50.100 --> 00:31:51.900
Well to see right.


00:31:51.900 --> 00:31:54.300
So this one this one will also trigger.


00:31:54.300 --> 00:31:56.100
Uh what is that?


00:31:56.100 --> 00:31:58.500
Um 185.


00:31:58.500 --> 00:32:00.300
Yeah 185 Gen one.


00:32:00.300 --> 00:32:03.000
So 18 Gen twos right.


00:32:03.000 --> 00:32:04.600
So it's not just oh there's fewer.


00:32:04.600 --> 00:32:07.000
There's also like this this other 29 here.


00:32:07.000 --> 00:32:09.400
This is zero Gen two collections very likely right.


00:32:09.400 --> 00:32:11.800
So it's not just the number.


00:32:11.800 --> 00:32:14.960
they're also like cheaper than doing that.


00:32:14.960 --> 00:32:16.840
So this is pretty interesting.


00:32:16.840 --> 00:32:18.000
What do you got to do?


00:32:18.000 --> 00:32:21.520
You just say you run less frequently on allocations


00:32:21.520 --> 00:32:23.200
and then leave everything else alone.


00:32:23.200 --> 00:32:25.720
Does it make a lot of sense for absolutely everything?


00:32:25.720 --> 00:32:26.560
Probably not.


00:32:26.560 --> 00:32:28.840
There's probably some scenario with lots of cycles


00:32:28.840 --> 00:32:29.920
that this is a problem.


00:32:29.920 --> 00:32:34.360
But anyway, this is an interesting thing to sort of consider


00:32:34.360 --> 00:32:37.760
if you were doing some kind of API or a website


00:32:37.760 --> 00:32:39.440
or something that queries a lot of data,


00:32:39.440 --> 00:32:41.640
over 700 records basically.


00:32:41.640 --> 00:32:44.720
you're going to absolutely encourage GC


00:32:44.720 --> 00:32:47.100
when you know it's not garbage, right?


00:32:47.100 --> 00:32:49.100
So I don't know.


00:32:49.100 --> 00:32:50.100
I thought this was interesting.


00:32:50.100 --> 00:32:51.640
I'll put it out there for people to play with


00:32:51.640 --> 00:32:53.940
and get some feedback.


00:32:53.940 --> 00:32:55.400
Should be fun to hear about it.


00:32:55.400 --> 00:32:57.700
- I think this is very interesting.


00:32:57.700 --> 00:33:00.900
And I'm going to, I plan on playing


00:33:00.900 --> 00:33:02.400
with the garbage collection myself.


00:33:02.400 --> 00:33:05.080
So I'm glad you have this little sample app thing up


00:33:05.080 --> 00:33:07.420
to start playing with it.


00:33:07.420 --> 00:33:09.280
One of the things that you can do


00:33:09.280 --> 00:33:14.720
that a lot of people don't mess with too much is not slowing down the frequency,


00:33:14.720 --> 00:33:17.960
but you can disable it and enable it.


00:33:17.960 --> 00:33:22.640
And I'm not sure, I'd like to play with that a little bit more to see if you can


00:33:22.640 --> 00:33:24.720
kind of kick it off or something like that, because...


00:33:24.720 --> 00:33:28.920
You can disable it and you can call GC collect if you need to.


00:33:28.920 --> 00:33:30.040
So like it's there.


00:33:30.040 --> 00:33:34.480
I'm not sure if it makes sense to do it, but the switches are there.


00:33:34.480 --> 00:33:34.960
Yeah.


00:33:34.960 --> 00:33:37.720
I mean, there's times where, I mean, you're not going to get real time with


00:33:37.720 --> 00:33:42.520
But you can get, there's times where you know that


00:33:42.520 --> 00:33:43.560
you're not doing anything else,


00:33:43.560 --> 00:33:44.680
so garbage collection's fine.


00:33:44.680 --> 00:33:46.600
And there's times where you're doing an event


00:33:46.600 --> 00:33:48.280
and you really want to get done with this


00:33:48.280 --> 00:33:49.680
as fast as possible.


00:33:49.680 --> 00:33:52.160
So it might make sense to turn off GC.


00:33:52.160 --> 00:33:55.360
- Sure, and for people who are not super focused on this,


00:33:55.360 --> 00:33:56.600
turning off garbage collection


00:33:56.600 --> 00:33:58.560
or altering garbage collection


00:33:58.560 --> 00:34:02.040
only affects a very small portion of Python's memory


00:34:02.040 --> 00:34:05.280
because the primary way is reference counting.


00:34:05.280 --> 00:34:07.200
So reference counting, things stop referring to it,


00:34:07.200 --> 00:34:10.320
that goes away only in the case where there are cycles,


00:34:10.320 --> 00:34:12.480
does GC even apply, right?


00:34:12.480 --> 00:34:13.320
So that's actually,


00:34:13.320 --> 00:34:15.620
unless you've got really interesting algorithms


00:34:15.620 --> 00:34:17.860
that are super focused on that kind of stuff,


00:34:17.860 --> 00:34:19.520
you know, you probably don't even have cycles


00:34:19.520 --> 00:34:20.840
or very rarely do you.


00:34:20.840 --> 00:34:21.680
- Yeah, interesting.


00:34:21.680 --> 00:34:23.640
- It's not a one size fits all solution,


00:34:23.640 --> 00:34:25.240
but where it does fit,


00:34:25.240 --> 00:34:27.240
it's a pretty simple thing to do


00:34:27.240 --> 00:34:28.800
that really makes a heck of a difference.


00:34:28.800 --> 00:34:30.620
- Yeah, it's quite interesting.


00:34:30.620 --> 00:34:32.680
So my musings was, well,


00:34:32.680 --> 00:34:35.800
maybe someday Python will have an adaptive GC


00:34:35.800 --> 00:34:38.000
where it runs a certain number of times and says,


00:34:38.000 --> 00:34:41.000
"Oh, I ran, but I didn't actually find any garbage,


00:34:41.000 --> 00:34:44.180
"any cycles, so let me back off that threshold


00:34:44.180 --> 00:34:45.520
"by a factor or two."


00:34:45.520 --> 00:34:46.680
And then I didn't find any garbage again,


00:34:46.680 --> 00:34:47.520
so I'll back it off.


00:34:47.520 --> 00:34:48.640
And then I'll go, "Look, I found a bunch,


00:34:48.640 --> 00:34:50.440
"so now we gotta start doing this more frequently."


00:34:50.440 --> 00:34:53.520
And I can see like an adaptive garbage collector


00:34:53.520 --> 00:34:55.680
turning these numbers, but until then,


00:34:55.680 --> 00:34:57.160
I just cranked it up.


00:34:57.160 --> 00:34:58.000
Yeah.


00:34:58.000 --> 00:34:58.820
- Interesting. - All right.


00:34:58.820 --> 00:34:59.720
Yeah.


00:34:59.720 --> 00:35:01.980
Kim, you wanna take us out of here for our main topics?


00:35:01.980 --> 00:35:03.040
- Sure.


00:35:03.040 --> 00:35:04.640
The other topic I was gonna talk about


00:35:04.640 --> 00:35:08.120
is a tool called Docker Slim, which basically--


00:35:08.120 --> 00:35:09.760
- It already sounds good, I don't know what it does,


00:35:09.760 --> 00:35:12.120
but it's opposite of Docker Slim.


00:35:12.120 --> 00:35:13.600
(laughing)


00:35:13.600 --> 00:35:15.800
I want my Dockers to be slim, let's do it.


00:35:15.800 --> 00:35:18.480
- It's effectively, as far as I can tell,


00:35:18.480 --> 00:35:20.640
well, not quite magic, but it certainly seems like it.


00:35:20.640 --> 00:35:23.480
I use Docker quite extensively at work,


00:35:23.480 --> 00:35:25.880
and because I use a fair amount of it at work,


00:35:25.880 --> 00:35:28.200
I started using it for a lot of personal stuff as well,


00:35:28.200 --> 00:35:30.120
and websites I deploy in my own write,


00:35:30.120 --> 00:35:31.880
and little things running my own systems


00:35:31.880 --> 00:35:33.600
are all in Docker containers.


00:35:33.600 --> 00:35:36.360
And unless you take a lot of care about it,


00:35:36.360 --> 00:35:38.560
your Docker images can end up quite large.


00:35:38.560 --> 00:35:41.600
If you start with just a Python in an Ubuntu base,


00:35:41.600 --> 00:35:43.160
for example, you're probably looking at about a gig


00:35:43.160 --> 00:35:46.320
of Docker image before you get anything done.


00:35:46.320 --> 00:35:47.960
Now, the way Docker works,


00:35:47.960 --> 00:35:49.480
unless you have just one of those things,


00:35:49.480 --> 00:35:50.320
if you've got more than one,


00:35:50.320 --> 00:35:52.240
you start to benefit from shared layers.


00:35:52.240 --> 00:35:54.000
So you're not having a gig and another gig


00:35:54.000 --> 00:35:54.840
and another gig, et cetera,


00:35:54.840 --> 00:35:56.520
but still it all kind of adds up.


00:35:56.520 --> 00:35:58.880
Docker Slim is a tool to basically look


00:35:58.880 --> 00:36:01.440
at your existing images, do some analysis,


00:36:01.440 --> 00:36:05.840
and give you back a much smaller and in many ways, much more secure image.


00:36:05.840 --> 00:36:09.140
I have run this, I ran it earlier today


00:36:09.140 --> 00:36:12.640
just to kind of check that I wasn't misremembering from the last time I used it.


00:36:12.640 --> 00:36:14.700
And I fed it an image I had,


00:36:14.700 --> 00:36:19.200
which was an incredibly simple, small little Flask API app I had written.


00:36:19.200 --> 00:36:20.580
It had one job.


00:36:20.580 --> 00:36:22.840
It basically, whenever you sent anything to an endpoint,


00:36:22.840 --> 00:36:24.180
it printed out what that was.


00:36:24.180 --> 00:36:26.340
I forget exactly why I needed that.


00:36:26.340 --> 00:36:29.180
I think I was having trouble figuring out some suppliers.


00:36:29.240 --> 00:36:32.880
that it wasn't documented how some suppliers web book was going to work.


00:36:32.880 --> 00:36:35.640
So basically I set this up and I said, talk to me and then looked at what it said.


00:36:35.640 --> 00:36:36.880
Exactly.


00:36:36.880 --> 00:36:37.800
Side note.


00:36:37.800 --> 00:36:42.400
That's way better than trusting their outdated, crappy, inconsistent documentation.


00:36:42.400 --> 00:36:44.080
It's just, all right, why don't you just call it?


00:36:44.080 --> 00:36:47.840
We'll just print out the JSON and then we'll go from there.


00:36:47.840 --> 00:36:48.360
Yep.


00:36:48.360 --> 00:36:54.040
So yeah, as a side note, that was quite an easy thing to do, but that was, I just put that into a


00:36:54.040 --> 00:36:58.040
an Ubuntu-based container running, I forget exactly what,


00:36:58.040 --> 00:37:00.160
presumably I was using FastAPI.


00:37:00.160 --> 00:37:02.720
So it would have been Python and Ubuntu and FastAPI


00:37:02.720 --> 00:37:05.760
and et cetera, and that was about a gig of image.


00:37:05.760 --> 00:37:09.280
I fed that to Docker slim and I ended up with 48 megs


00:37:09.280 --> 00:37:10.360
and it still worked.


00:37:10.360 --> 00:37:11.840
It did everything it was supposed to do.


00:37:11.840 --> 00:37:13.840
Granted, I fed the simplest thing I had.


00:37:13.840 --> 00:37:15.720
I mean, it had one end point and so forth.


00:37:15.720 --> 00:37:17.320
- I have-- - There's a lot


00:37:17.320 --> 00:37:18.160
of dependencies.


00:37:18.160 --> 00:37:20.320
There's Python, there's Flask,


00:37:20.320 --> 00:37:22.560
maybe there's even micro-WSGI or something running there,


00:37:22.560 --> 00:37:23.840
who knows, but yeah.


00:37:23.840 --> 00:37:29.040
Well, exactly. What it has done is it's closed down all sorts of other angles of attack makes


00:37:29.040 --> 00:37:32.440
it sound a bit dramatic, but all sorts of ways that you could interface with the container


00:37:32.440 --> 00:37:37.760
that you don't necessarily need. It no longer has, for example, a bash is no longer available


00:37:37.760 --> 00:37:43.080
in it. You can't run it in interactive mode and talk to it, which is not necessarily a


00:37:43.080 --> 00:37:46.440
100% positive thing. It makes debugging a bit harder, but they do have some solutions


00:37:46.440 --> 00:37:51.280
for how you can do that with side containers and talk to it in other ways and the like.


00:37:51.280 --> 00:37:57.120
If you go through their documentation, effectively, they're doing all the security stuff and the app armoring stuff


00:37:57.120 --> 00:38:00.920
and all sorts of things that I know are important, but I don't know enough about to do right.


00:38:00.920 --> 00:38:04.720
I don't trust myself to do those things correctly. I can basically follow someone's suggestions,


00:38:04.720 --> 00:38:07.920
but I have absolutely no way of knowing if the suggestions I'm following are valid.


00:38:07.920 --> 00:38:10.820
I'm not immersed enough in this world to know what the best thing is to do.


00:38:10.820 --> 00:38:15.120
So I'm much happier to have somebody come along and say, "We've written this tool. We get this stuff.


00:38:15.120 --> 00:38:18.580
We'll do the best we can to make it more secure."


00:38:18.660 --> 00:38:22.100
Even if it isn't 100% secure, it's far better than I was going to achieve on my own.


00:38:22.100 --> 00:38:28.100
And I haven't used it enough to get a 100% recommendation


00:38:28.100 --> 00:38:29.360
that this will fit every use case.


00:38:29.360 --> 00:38:31.400
I'm sure every tool has things it does well,


00:38:31.400 --> 00:38:32.500
there's things it doesn't do well,


00:38:32.500 --> 00:38:34.640
there's some use cases where it's maybe not so suited.


00:38:34.640 --> 00:38:37.700
But just from a little bit of experimentation with it,


00:38:37.700 --> 00:38:41.060
it looks like something I'm going to be inserting into my toolchain where I can,


00:38:41.060 --> 00:38:43.700
because the smaller the images are, the better, really.


00:38:43.700 --> 00:38:45.140
Especially if we're all working from home,


00:38:45.200 --> 00:38:50.000
putting these things down from servers that aren't actually in the building that you're in anymore.


00:38:50.000 --> 00:38:55.400
And if you're doing a continuous deployment, which means pushing those actual images,


00:38:55.400 --> 00:38:59.000
then you want to move that quicker. Yeah, cool. Very nice.


00:38:59.000 --> 00:39:03.800
Yeah, one of the things that Docker's used for that I think a lot of web people don't think about


00:39:03.800 --> 00:39:09.200
is cross compiling. That's one of the places where Docker shows up.


00:39:09.200 --> 00:39:14.900
And it's one of the places I use it is to compile on a machine that I don't have access to.


00:39:14.900 --> 00:39:19.620
so I can have a Docker image like I can have a Windows machine with Linux Docker image or


00:39:19.620 --> 00:39:24.340
something. And I can do compiling in there. So slimming that down speeds up my compiles,


00:39:24.340 --> 00:39:30.980
or I conceptually would. So I think this is something that definitely to try if you're using


00:39:30.980 --> 00:39:37.540
using that. Exactly. You've reminded me of in a similar vein, Docker is the basis of our


00:39:37.540 --> 00:39:43.620
continuous integration systems. And the ultimate end result is built inside a Docker container with


00:39:43.620 --> 00:39:44.920
with all the bits we need.


00:39:44.920 --> 00:39:47.280
That can take quite a while because it can be quite large.


00:39:47.280 --> 00:39:48.480
You can slim that down as well.


00:39:48.480 --> 00:39:50.840
You know, the faster you see I is the better for you really.


00:39:50.840 --> 00:39:52.000
- Yeah, always.


00:39:52.000 --> 00:39:52.880
- Yeah, absolutely.


00:39:52.880 --> 00:39:55.400
All right, well, Brian, I think that might be it.


00:39:55.400 --> 00:39:56.320
Time for some extras.


00:39:56.320 --> 00:39:57.680
Oh, I do want to do a quick follow up.


00:39:57.680 --> 00:39:59.720
I thought these were extras, but they're actually not.


00:39:59.720 --> 00:40:04.080
They're things that I do want to point out really quick.


00:40:04.080 --> 00:40:05.900
I actually gave a talk on this whole memory thing.


00:40:05.900 --> 00:40:09.040
If that GC conversation sounds interesting to you


00:40:09.040 --> 00:40:10.760
over at the Python web conferences here.


00:40:10.760 --> 00:40:11.880
So people can check that out


00:40:11.880 --> 00:40:13.880
and also have a talk Python class


00:40:13.880 --> 00:40:15.640
that like dives into a whole bunch of this stuff.


00:40:15.640 --> 00:40:16.480
- Nice.


00:40:16.480 --> 00:40:18.560
- I meant to include that in the before thing.


00:40:18.560 --> 00:40:19.520
Now we're at the extras.


00:40:19.520 --> 00:40:20.360
Let's talk about that.


00:40:20.360 --> 00:40:21.360
What do you got?


00:40:21.360 --> 00:40:23.640
- The only thing, one of the things I wanna shout out


00:40:23.640 --> 00:40:28.640
is to everybody that supported the pytest book.


00:40:28.640 --> 00:40:33.520
So at Pragmatic, if you just go to the main page,


00:40:33.520 --> 00:40:37.360
there is a best sellers link


00:40:37.360 --> 00:40:41.840
that has had Python testing with pytest on it


00:40:41.840 --> 00:40:44.980
for many weeks now in the top six.


00:40:44.980 --> 00:40:47.200
And I just wanted to thank everybody


00:40:47.200 --> 00:40:50.720
that supported the book and helped the success of this.


00:40:50.720 --> 00:40:54.360
Also the feedback that I got of the technical reviewers


00:40:54.360 --> 00:40:56.280
and plus many other people going through


00:40:56.280 --> 00:40:58.760
and submitting a RADA is gonna make this


00:40:58.760 --> 00:41:01.000
a really solid book and I'm really just happy


00:41:01.000 --> 00:41:03.720
to be part of a community to put this together, so thanks.


00:41:03.720 --> 00:41:05.280
- Yeah, congratulations, that's awesome.


00:41:05.280 --> 00:41:07.280
Kim, you got anything extra you wanna throw out there?


00:41:07.280 --> 00:41:09.740
- A couple of small things I was hoping to mention


00:41:09.740 --> 00:41:14.420
we had at the time. I see we've actually got Mess with DNS up on screen. This is a good


00:41:14.420 --> 00:41:19.580
place to start. I just wanted to mention this little website, messwithdns.net, which Julia


00:41:19.580 --> 00:41:26.300
Evans, who on Twitter is Bork, and produces a variety of excellent webzines and so forth.


00:41:26.300 --> 00:41:30.740
I think you've actually discussed her Git learning webzines before.


00:41:30.740 --> 00:41:32.220
Oh, blank Git.


00:41:32.220 --> 00:41:36.420
That's the one, yeah. And I think there's an HR-friendly one whose name I can't remember


00:41:36.420 --> 00:41:39.060
because we all remember the memorable one.


00:41:39.060 --> 00:41:41.620
Oh, something like that.


00:41:41.620 --> 00:41:42.820
Something like that, yeah.


00:41:42.820 --> 00:41:45.420
She released messwithdns.net recently


00:41:45.420 --> 00:41:49.900
as effectively a way to play with DNS without breaking your actual website,


00:41:49.900 --> 00:41:52.700
which isn't something I'd ever thought to look for,


00:41:52.700 --> 00:41:55.600
but now that it's around, it's actually a brilliant idea.


00:41:55.600 --> 00:41:59.260
There are some hard-to-understand things based into DNS.


00:41:59.260 --> 00:42:01.220
What is a record and a CNAME?


00:42:01.220 --> 00:42:05.620
And if your TTL is a three-digit number versus a five-digit number,


00:42:05.620 --> 00:42:07.820
what's the difference? Or for that matter, what does TTL mean?


00:42:07.900 --> 00:42:10.420
And it's not necessarily an explainer for all these things,


00:42:10.420 --> 00:42:13.020
but it is a way to make these settings and see what they do


00:42:13.020 --> 00:42:15.220
without actually breaking a real website.


00:42:15.220 --> 00:42:20.100
So effectively, she's spun up a sub domain with a assigned name.


00:42:20.100 --> 00:42:23.180
This one I happen to be on is goblin61messwithdns.com.


00:42:23.180 --> 00:42:26.660
The worst you can do is break goblin61.messwithdns.com


00:42:26.660 --> 00:42:28.860
and that will then just go away when the next person comes along.


00:42:28.860 --> 00:42:31.620
So it's actually a really smart, really clever idea.


00:42:31.620 --> 00:42:33.540
And typical to Julia's thoroughness,


00:42:33.540 --> 00:42:36.140
she's got a series of experimental suggestions on the side.


00:42:36.420 --> 00:42:39.940
Here are some things you can try, here are some tutorials, how about making a CNAME?


00:42:39.940 --> 00:42:41.740
Or here are some weird things you can try.


00:42:41.740 --> 00:42:43.580
What happens if you've got a very long TTL?


00:42:43.580 --> 00:42:47.940
Or you convince three different DNS servers that your subdomain has three different IPs?


00:42:47.940 --> 00:42:49.740
Why you would do that is a mystery to me.


00:42:49.740 --> 00:42:53.620
But you know, what would happen if you did is something you can explore with this site


00:42:53.620 --> 00:42:55.220
without actually breaking your real website.


00:42:55.220 --> 00:42:57.140
And this seems like a very useful learning tool.


00:42:57.140 --> 00:42:58.340
Yeah, absolutely.


00:42:58.340 --> 00:42:59.940
Cool, I love it. That's fantastic.


00:42:59.940 --> 00:43:03.620
There were two other small things I just wanted to mention.


00:43:03.620 --> 00:43:08.660
one just because I use it all the time and I don't know how common knowledge it is. It is possible


00:43:08.660 --> 00:43:14.820
in Python, and I don't have a web page to open for this, to run a small little web server. If you do


00:43:14.820 --> 00:43:21.620
python-m-http.server, I've gone blank on which it is now, to be honest.


00:43:21.620 --> 00:43:23.540
>> Dot server. >> Dot server.


00:43:23.540 --> 00:43:26.020
>> Yeah, yeah. I'm reading your notes. I don't actually...


00:43:26.020 --> 00:43:28.100
>> I'm just going back to the notes to have a look myself.


00:43:28.100 --> 00:43:32.740
>> That effectively fires up a web server in the directory you open it in


00:43:32.740 --> 00:43:36.180
and serves up the files that are there or the sub directories that are in there.


00:43:36.180 --> 00:43:39.940
And there's no security, there's no attractiveness, there's no styling, there's anything of the sort.


00:43:39.940 --> 00:43:41.340
You wouldn't serve this to the public.


00:43:41.340 --> 00:43:46.300
But if you wanted to get a file off the machine, and I do this quite a lot to get files onto my phone, for example,


00:43:46.300 --> 00:43:49.700
firing up a web server there and then and just pointing


00:43:49.700 --> 00:43:52.980
by that script or your own, you know, just to send your browser to


00:43:52.980 --> 00:43:55.980
your, the local host with the port you gave it


00:43:55.980 --> 00:43:59.100
and just download the files from there. It's a useful thing to be able to do.


00:43:59.100 --> 00:44:00.540
Yeah, that's a cool trick.


00:44:00.540 --> 00:44:03.040
It's like directory browsing, basically, yeah.


00:44:03.040 --> 00:44:06.340
Exactly. And then the final little extra I just wanted to talk about,


00:44:06.340 --> 00:44:08.740
and this is a little more tongue-in-cheek somewhat,


00:44:08.740 --> 00:44:13.000
in both last week's Python Bytes and on recent Talk Python episodes,


00:44:13.000 --> 00:44:16.340
you have been speaking a little bit about different ways of doing Git.


00:44:16.340 --> 00:44:19.380
You were discussing doing all your Git on the CLI,


00:44:19.380 --> 00:44:23.740
and I think one of your audience members at the last Python Bytes


00:44:23.740 --> 00:44:26.240
suggested the way they do Git is just mash all the buttons


00:44:26.240 --> 00:44:27.800
they can find in VS Code.


00:44:27.880 --> 00:44:30.480
There is, I just want to put out there,


00:44:30.480 --> 00:44:32.480
there is a middle ground that you could be looking at.


00:44:32.480 --> 00:44:35.780
There's a tool called Magit, M-A-G-I-T,


00:44:35.780 --> 00:44:38.940
which is effectively, if you're an Emacs user


00:44:38.940 --> 00:44:41.780
and you don't know Magit, you should change that immediately.


00:44:41.780 --> 00:44:45.140
Magit is effectively a brilliant way of doing,


00:44:45.140 --> 00:44:48.120
to me, a brilliant, indispensable way of doing Git inside Emacs.


00:44:48.120 --> 00:44:49.920
Granted, it doesn't mean you need to learn Emacs,


00:44:49.920 --> 00:44:52.280
but in just a couple of short years after that,


00:44:52.280 --> 00:44:56.080
you should be an expert at, you should find Magit indispensable.


00:44:56.140 --> 00:44:58.680
It'll take you a couple of years to learn Emacs. I'm not disputing that.


00:44:58.680 --> 00:45:00.840
But once you've got the Emacs down,


00:45:00.840 --> 00:45:04.000
Magic really is an excellent option to look at doing your Git with.


00:45:04.000 --> 00:45:07.080
So if you're tired of doing it on the CLI, just set some years aside,


00:45:07.080 --> 00:45:09.480
learn yourself some Emacs, turn to Magic,


00:45:09.480 --> 00:45:12.100
and then wonder how you ever did anything else.


00:45:12.100 --> 00:45:13.980
Set some years aside.


00:45:13.980 --> 00:45:20.680
I don't think that's fair to Emacs, but just a little bit of it.


00:45:20.680 --> 00:45:21.740
Too much.


00:45:21.740 --> 00:45:24.600
I'll concede Emacs is a much longer learning curve than VI,


00:45:24.680 --> 00:45:26.680
but it's not gears, Scott.


00:45:26.680 --> 00:45:29.180
And I say this, I mean, yeah.


00:45:29.180 --> 00:45:33.580
Yeah, and Mario and the audience is taking credit for the VS Code button matching.


00:45:33.580 --> 00:45:35.580
Right.


00:45:35.580 --> 00:45:37.580
Right on. Cool, yeah, that's a great recommendation.


00:45:37.580 --> 00:45:40.080
- Yeah. - All right, is that it for your extras?


00:45:40.080 --> 00:45:42.980
I should just point out in terms of it being unfair to Emacs,


00:45:42.980 --> 00:45:46.580
I've been using it for more than 20 years, and I find it almost impossible to use anything else,


00:45:46.580 --> 00:45:49.580
but I'm sure it didn't take me years to learn, it's just been a long time.


00:45:49.580 --> 00:45:51.280
That's right.


00:45:51.280 --> 00:45:53.760
- Cool, all right, I got a few throughout there,


00:45:53.760 --> 00:45:55.200
actually just one.


00:45:55.200 --> 00:45:58.280
I made a comment, I think on the last show, Brian,


00:45:58.280 --> 00:46:01.320
about using emojis in my code.


00:46:01.320 --> 00:46:02.160
- Yeah.


00:46:02.160 --> 00:46:03.000
- So I wanted to bring that example up.


00:46:03.000 --> 00:46:05.720
So here's like a little CMS thing that I got going on.


00:46:05.720 --> 00:46:07.800
And if you return a collection,


00:46:07.800 --> 00:46:10.520
like themes are represented by these little tags in the CMS.


00:46:10.520 --> 00:46:11.640
And if you return a collection,


00:46:11.640 --> 00:46:14.320
the comment has a list of emojis.


00:46:14.320 --> 00:46:16.280
And if you return, if they're just like processing


00:46:16.280 --> 00:46:19.400
a single thing, you get that emoji.


00:46:19.400 --> 00:46:23.280
or pages you get a list of page emojis and so on.


00:46:23.280 --> 00:46:25.120
Anyway, that's what I had in mind when I talked about that.


00:46:25.120 --> 00:46:26.160
- That's pretty cool to use.


00:46:26.160 --> 00:46:27.640
- Yeah, you can sort of just scan through,


00:46:27.640 --> 00:46:28.560
oh look, there's a list of these,


00:46:28.560 --> 00:46:30.120
this must be to a bunch of stuff,


00:46:30.120 --> 00:46:31.480
or I don't know, I could probably come up with something


00:46:31.480 --> 00:46:33.800
like a modifying, I'm gonna change a theme


00:46:33.800 --> 00:46:36.600
versus read a theme or something like that.


00:46:36.600 --> 00:46:37.440
- Yeah.


00:46:37.440 --> 00:46:39.680
- Anyway, well, that brings us to the laughs


00:46:39.680 --> 00:46:41.800
and I hope you all enjoy schadenfreude


00:46:41.800 --> 00:46:44.140
because it's bad this time.


00:46:44.140 --> 00:46:46.840
(both laughing)


00:46:46.840 --> 00:46:47.800
Thank you, Log4j.


00:46:47.800 --> 00:46:50.120
- Okay, so let's see.


00:46:50.120 --> 00:46:51.440
First of all, this is not shot in 4K.


00:46:51.440 --> 00:46:53.040
This is just something about the cookies.


00:46:53.040 --> 00:46:55.840
My daughter yesterday gave me this candle.


00:46:55.840 --> 00:46:56.680
It has a website.


00:46:56.680 --> 00:46:58.760
"We use cookies to improve our performance."


00:46:58.760 --> 00:47:01.320
And then me, same, I just eat cookies.


00:47:01.320 --> 00:47:02.760
I thought that was really just funny


00:47:02.760 --> 00:47:05.240
for like a tech candle that she found.


00:47:05.240 --> 00:47:07.520
- It should be a tan of cookies, though.


00:47:07.520 --> 00:47:08.760
- I know it should.


00:47:08.760 --> 00:47:09.680
It absolutely should.


00:47:09.680 --> 00:47:12.080
At least it should smell like cookies.


00:47:12.080 --> 00:47:12.960
It says scented.


00:47:12.960 --> 00:47:14.600
I have no idea what scent it is,


00:47:14.600 --> 00:47:15.440
but it better smell like cookies.


00:47:15.440 --> 00:47:16.360
- Does it smell like websites?


00:47:16.360 --> 00:47:17.200
Maybe.


00:47:17.200 --> 00:47:18.040
- Baby.


00:47:18.040 --> 00:47:19.640
- And then I just want to point out more practically,


00:47:19.640 --> 00:47:21.760
I have this add-on you can get for all the browsers.


00:47:21.760 --> 00:47:22.760
I don't care about cookies.


00:47:22.760 --> 00:47:24.960
And if it sees one of those cookie warnings,


00:47:24.960 --> 00:47:26.800
it'll try to click it and just accept it.


00:47:26.800 --> 00:47:28.200
- Oh, this is indispensable.


00:47:28.200 --> 00:47:29.040
That's brilliant.


00:47:29.040 --> 00:47:30.600
- Absolutely.


00:47:30.600 --> 00:47:35.560
And then Brian Skin starts us off with the log4j stuff.


00:47:35.560 --> 00:47:37.920
So if you remember, if you're aware,


00:47:37.920 --> 00:47:41.520
log4j, the problem with log4j is if you try to log


00:47:41.520 --> 00:47:44.560
a piece of text, even as an argument,


00:47:44.560 --> 00:47:49.560
if that text has J and D I colon L A D P L A L D A P


00:47:49.560 --> 00:47:54.200
colon slash slash to some Java library,


00:47:54.200 --> 00:47:57.400
instead of logging it, it will execute that Java stuff.


00:47:57.400 --> 00:48:00.000
Even if it's remotely on the internet,


00:48:00.000 --> 00:48:01.760
then it'll output the result of that.


00:48:01.760 --> 00:48:03.600
Like you're hacked or whatever, right?


00:48:03.600 --> 00:48:06.320
So we've all heard a little Bobby tables, right?


00:48:06.320 --> 00:48:08.320
Here's the modern day one.


00:48:08.320 --> 00:48:10.280
Hi, this is your son's school.


00:48:10.280 --> 00:48:12.320
We're having computer trouble.


00:48:12.320 --> 00:48:14.120
Oh dear, did he break something?


00:48:14.120 --> 00:48:17.040
Well, in a way, did you really name your son,


00:48:17.040 --> 00:48:22.040
Curly, you know, dollar curly J and D I colon L D A P colon


00:48:22.040 --> 00:48:25.500
slash slash evalcorp, parenthesis, parenthesis Bobby.


00:48:25.500 --> 00:48:27.880
Oh yes. Little Bobby Jindy we call him.


00:48:27.880 --> 00:48:32.040
We've got our servers crypto locked.


00:48:32.040 --> 00:48:33.080
I hope you're happy.


00:48:33.080 --> 00:48:36.040
I hope you've learned to synthesize your log for J inputs.


00:48:36.040 --> 00:48:39.080
Isn't that fantastic?


00:48:39.080 --> 00:48:43.840
- Yeah. I have a feeling this is going to go on.


00:48:43.840 --> 00:48:45.840
It'll be the next, it isn't log for J.


00:48:45.840 --> 00:48:47.120
It'll be something else next year.


00:48:47.120 --> 00:48:47.760
It's yeah.


00:48:47.760 --> 00:48:50.040
And well, I mean, it's been there for 10 years.


00:48:50.040 --> 00:48:51.040
Exactly.


00:48:51.040 --> 00:48:52.240
It's not, it's not a new thing.


00:48:52.240 --> 00:48:54.200
Unfortunately, it's not even a vulnerability.


00:48:54.200 --> 00:48:54.680
It's just.


00:48:54.680 --> 00:48:55.520
Exactly.


00:48:55.520 --> 00:48:57.000
You can actually do that on purpose.


00:48:57.000 --> 00:49:05.000
And Brian helpfully suggests this actually came from log for J memes.com.


00:49:05.000 --> 00:49:06.960
So we got to go there for a second.


00:49:06.960 --> 00:49:07.960
And of course that exists.


00:49:07.960 --> 00:49:08.920
Of course.


00:49:08.920 --> 00:49:11.000
And Oh my gosh, like, look at this picture.


00:49:11.280 --> 00:49:13.800
So Brian, will you describe this person for me on the screen?


00:49:13.800 --> 00:49:15.360
There's a person in a saying next to him.


00:49:15.360 --> 00:49:16.360
Old white guy.


00:49:16.360 --> 00:49:21.720
Um, to me, he looks like a perfect sort of grandpa sort of character, right?


00:49:21.720 --> 00:49:23.640
Getting up there probably 70.


00:49:23.640 --> 00:49:27.840
You know, nothing wrong with a guy, but it says upgrading log for J three times.


00:49:27.840 --> 00:49:28.880
It wasn't that stressful.


00:49:28.880 --> 00:49:30.360
Dave, 28 years old.


00:49:30.360 --> 00:49:34.640
What else have we got in here?


00:49:34.640 --> 00:49:35.440
We've got,


00:49:35.440 --> 00:49:37.880
I wish that was outrageously funny and not just kind of truish.


00:49:37.880 --> 00:49:38.280
But yeah,


00:49:38.280 --> 00:49:38.720
I know.


00:49:38.720 --> 00:49:42.800
So here's like a 1940s looking picture, like a dad and some kids hanging around.


00:49:42.800 --> 00:49:45.760
Daddy, what did you do during the Great War?


00:49:45.760 --> 00:49:48.280
The Log for Shell incident.


00:49:48.280 --> 00:49:49.280
Let's see.


00:49:49.280 --> 00:49:55.080
There's a few of you going here, like there's the how many days since such and such accident?


00:49:55.080 --> 00:49:57.660
Zero days without log for JCVE.


00:49:57.660 --> 00:50:01.560
And there's like Homer running around with like a nuclear glowing stick.


00:50:01.560 --> 00:50:04.120
You can just spend, you can spend some time in this place.


00:50:04.120 --> 00:50:06.480
It's probably unhealthy.


00:50:06.480 --> 00:50:08.280
There's like a grim reaper,


00:50:08.280 --> 00:50:10.680
just going through taking out technology.


00:50:10.680 --> 00:50:13.800
And it has a log for J on the grim reaper, you know.


00:50:13.800 --> 00:50:16.760
Let me see if I can find one more that there's,


00:50:16.760 --> 00:50:18.300
there's some really good ones.


00:50:18.300 --> 00:50:19.860
This one is probably good.


00:50:19.860 --> 00:50:21.960
There's a picture of a guy in a tuxedo says,


00:50:21.960 --> 00:50:23.880
vendor not vulnerable to log for J,


00:50:23.880 --> 00:50:26.280
but there's a mirror and you see the back of him.


00:50:26.280 --> 00:50:27.680
His clothes are just all God.


00:50:27.680 --> 00:50:29.360
It says he uses EOL.


00:50:29.360 --> 00:50:30.560
- Yeah.


00:50:30.560 --> 00:50:31.460
- Yeah, that one's pretty gross.


00:50:31.460 --> 00:50:33.200
I want to get that on the screen.


00:50:33.200 --> 00:50:37.360
But yeah, these are just fantastic here.


00:50:37.360 --> 00:50:39.500
So anyway, people can check out the memes.


00:50:39.500 --> 00:50:40.680
Thanks, Brian, for sending that in.


00:50:40.680 --> 00:50:41.520
Brian Skin.


00:50:41.520 --> 00:50:43.300
- Yeah, I have to say, I am reminded,


00:50:43.300 --> 00:50:44.220
I did see one the other day,


00:50:44.220 --> 00:50:45.680
I don't know that I could put it up now,


00:50:45.680 --> 00:50:46.860
but it's effectively that,


00:50:46.860 --> 00:50:48.200
I've just seen it in various other means,


00:50:48.200 --> 00:50:50.960
a chap receiving an award from probably his manager,


00:50:50.960 --> 00:50:53.240
saying, you know, me receiving an award from the manager


00:50:53.240 --> 00:50:56.520
for not being vulnerable to the log4j vulnerabilities.


00:50:56.520 --> 00:50:57.440
And inside thinking,


00:50:57.440 --> 00:50:59.000
that's mainly because I chose not to log in,


00:50:59.000 --> 00:51:00.500
I completely forgot to log anything.


00:51:00.500 --> 00:51:01.920
(both laughing)


00:51:01.920 --> 00:51:02.760
- Exactly.


00:51:02.760 --> 00:51:04.920
- Yeah, here's a tweet.


00:51:04.920 --> 00:51:07.480
Today, Java runs on billions of devices.


00:51:07.480 --> 00:51:08.920
It's not a statement of pride,


00:51:08.920 --> 00:51:10.520
but a statement of pure terror.


00:51:10.520 --> 00:51:13.120
(both laughing)


00:51:13.120 --> 00:51:17.160
All right, well, I don't wanna hit on Java too hard,


00:51:17.160 --> 00:51:19.920
but the Log4J, I just cannot believe somebody thought


00:51:19.920 --> 00:51:23.140
it's a fantastic idea to execute remote code


00:51:23.140 --> 00:51:24.920
that you cannot escape.


00:51:24.920 --> 00:51:26.560
- From a logging system.


00:51:26.560 --> 00:51:27.640
- Yeah, in a logging system.


00:51:27.640 --> 00:51:29.840
It's just, what did you think you would get?


00:51:29.840 --> 00:51:31.080
So, here we are.


00:51:32.020 --> 00:51:35.480
with log4jmemes.com if you want to scroll through it.


00:51:35.480 --> 00:51:38.100
- Let's back up and say somebody thought


00:51:38.100 --> 00:51:40.260
writing an application in Java was a good idea.


00:51:40.260 --> 00:51:41.460
No, sorry.


00:51:41.460 --> 00:51:44.120
(both laughing)


00:51:44.120 --> 00:51:46.560
I'll get hate mail for that one.


00:51:46.560 --> 00:51:49.060
- Yeah, don't mail Brian.


00:51:49.060 --> 00:51:50.760
Don't email Brian, he knows.


00:51:50.760 --> 00:51:53.920
All right, well, so Brian, that's it for the year, isn't it?


00:51:53.920 --> 00:51:55.800
I mean, this is the last episode.


00:51:55.800 --> 00:51:57.800
We're gonna take a little bit of time off.


00:51:57.800 --> 00:52:00.080
- Yeah, some well-deserved time off.


00:52:00.080 --> 00:52:00.920
- Yeah, absolutely.


00:52:00.920 --> 00:52:03.820
So thank you everyone for listening.


00:52:03.820 --> 00:52:05.920
Kim, thanks for coming to join us this time.


00:52:05.920 --> 00:52:07.520
Brian, as always, thank you.


00:52:07.520 --> 00:52:09.440
- And we'll see everybody next year.


00:52:09.440 --> 00:52:10.280
- Yeah, see you next year.


00:52:10.280 --> 00:52:11.100
- Thank you for having me, guys.


00:52:11.100 --> 00:52:12.120
That was brilliant.


00:52:12.120 --> 00:52:13.020
- Yeah, you're welcome.


00:52:13.020 --> 00:52:13.860
And if you're out there


00:52:13.860 --> 00:52:15.280
and you still haven't filled out that form


00:52:15.280 --> 00:52:16.680
and given us our feedback,


00:52:16.680 --> 00:52:17.520
let us know.


00:52:17.520 --> 00:52:20.560
The Google Form link is at the top of the show notes.


00:52:20.560 --> 00:52:21.680
All right, bye.


00:52:21.680 --> 00:52:23.120
- Cheers.


00:52:23.120 --> 00:52:24.940
- Thanks for listening to Python Bytes.


00:52:24.940 --> 00:52:27.840
Follow the show on Twitter via @PythonBytes.


00:52:27.840 --> 00:52:34.520
That's Python bytes as in B y t s. Get the full show notes over at Python bytes.fm. If


00:52:34.520 --> 00:52:38.840
you have a news item we should cover, just visit Python bytes.fm and click Submit in


00:52:38.840 --> 00:52:42.840
the navbar. We're always on the lookout for sharing something cool. If you want to join


00:52:42.840 --> 00:52:47.360
us for the live recording, just visit the website and click live stream to get notified


00:52:47.360 --> 00:52:53.180
of when our next episode goes live. That's usually happening at noon Pacific on Wednesdays


00:52:53.180 --> 00:52:54.780
over at YouTube.


00:52:54.780 --> 00:52:58.100
On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:52:58.100 --> 00:53:01.580
Thank you for listening and sharing this podcast with your friends and colleagues.

