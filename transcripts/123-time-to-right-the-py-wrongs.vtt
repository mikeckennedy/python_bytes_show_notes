
00:00:00.000 --> 00:00:12.320
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 123 recorded March 27th, 2019. I'm Michael Kennedy.


00:00:12.320 --> 00:00:13.200
I'm Brian Okken.


00:00:13.200 --> 00:00:19.480
This episode is brought to you by Datadog. They're a big sponsor of the show and long time supporter. Tell you more about them later.


00:00:19.480 --> 00:00:27.800
Brian, do you think it's a pretty cool episode number? I mean, often people say like episode 100, 500, 1000. These are big, but 1, 2, 3, that's pretty cool too.


00:00:27.800 --> 00:00:29.280
I was just going to comment on it.


00:00:29.280 --> 00:00:30.840
One, two, three is really cool.


00:00:30.840 --> 00:00:31.680
I like that number.


00:00:31.680 --> 00:00:36.360
So I think we should start maybe counted down three, two, one XKCD go.


00:00:36.360 --> 00:00:38.300
Yeah.


00:00:38.300 --> 00:00:39.040
Okay, sure.


00:00:39.040 --> 00:00:43.160
And it's the intent is to say like, Oh my God, Python packaging and deployment


00:00:43.160 --> 00:00:44.640
and version management is a mess.


00:00:44.640 --> 00:00:47.760
Like the subtitle is my Python environment has become so degraded.


00:00:47.760 --> 00:00:49.800
My laptop has been declared a super fun site.


00:00:49.800 --> 00:00:50.040
Right.


00:00:50.040 --> 00:00:51.800
So that's kind of the theme of it.


00:00:51.800 --> 00:00:52.160
Yeah.


00:00:52.160 --> 00:00:54.920
But I mean, it is interesting that it's that title.


00:00:55.280 --> 00:00:58.820
doesn't really say that the environment is terrible,


00:00:58.820 --> 00:01:02.860
but his particular laptop environment has a whole bunch of stuff on it.


00:01:02.860 --> 00:01:05.360
And that's kind of where there's also now,


00:01:05.360 --> 00:01:11.520
Brett Cannon wrote an article called "Deconstructing XKCD 1987,"


00:01:11.520 --> 00:01:13.960
where he goes through all of the different pieces.


00:01:13.960 --> 00:01:17.020
So if you're looking at this, a lot of people might,


00:01:17.020 --> 00:01:19.120
especially if they're new to Python,


00:01:19.120 --> 00:01:21.420
not even know what some of these things are.


00:01:21.420 --> 00:01:24.320
So if you're not familiar with Anaconda or Homebrew


00:01:24.320 --> 00:01:27.920
or other things or why this comes in.


00:01:27.920 --> 00:01:33.120
So Brett zooms in on all the pieces and just talks about all the different environments.


00:01:33.120 --> 00:01:35.280
And he's honest to say, yes,


00:01:35.280 --> 00:01:40.440
some people's laptops kind of looks like this because if you were trying out different things,


00:01:40.440 --> 00:01:42.280
you're like, oh, I want to try homebrew,


00:01:42.280 --> 00:01:45.360
how to homebrew install in or this other stuff.


00:01:45.360 --> 00:01:49.960
You can go down this route and do all these crazy different ways to


00:01:49.960 --> 00:01:54.160
install Python and have it in your environment, but you don't have to.


00:01:54.160 --> 00:01:58.240
Any one of these would be sufficient and you can delete them when you're done.


00:01:58.240 --> 00:02:01.840
You shouldn't have just the system Python.


00:02:01.840 --> 00:02:06.160
You should have system Python and the thing that you're using at the very least.


00:02:06.160 --> 00:02:09.600
Yeah, I feel like this is a little bit like saying


00:02:09.600 --> 00:02:13.760
"GUI desktop paradigm suck" because look at my desktop.


00:02:13.760 --> 00:02:16.720
It's a cluttered, absolute mess of stuff piled on here.


00:02:16.720 --> 00:02:21.360
And that's not necessarily the problem of your OS.


00:02:22.160 --> 00:02:26.160
It's also one of the benefits is that you can have multiple Python versions.


00:02:26.160 --> 00:02:31.360
There's like, you're not going to say I've got like seven versions of Chrome on my desktop.


00:02:31.360 --> 00:02:35.520
No, you can only have one. I think you can only have one version installed.


00:02:35.520 --> 00:02:39.040
Python is something you can have multiple different versions installed. And it's,


00:02:39.040 --> 00:02:42.560
that's one of the benefits, especially for developers to be able to


00:02:42.560 --> 00:02:47.200
test against multiple versions on one machine. But it does kind of get out of hand. He also,


00:02:47.200 --> 00:02:53.360
you know, so he'll just he describes what homebrew is and and what anaconda is and all that but the


00:02:53.360 --> 00:02:59.860
I think actually it's kind of a fun article because it's a little bit of an educational history lesson into all of this stuff


00:02:59.860 --> 00:03:03.660
It looks super interesting. I love it. Well, well done Brett, and I'm glad you picked it


00:03:03.660 --> 00:03:08.300
I I'm definitely gonna go through it. You just I just saw it here on the list last minute


00:03:08.300 --> 00:03:10.460
So I haven't read it yet, but it looks really good. Yeah, nice


00:03:10.460 --> 00:03:14.220
And so, let me take you on a journey with this next one, right? Okay, so


00:03:14.740 --> 00:03:18.220
Have I talked about Google lighthouse in the show? I think so. It sounds neat


00:03:18.220 --> 00:03:22.440
yeah, like about speeding up perceived page speed and most importantly what


00:03:22.440 --> 00:03:28.140
search engines think your page speed is because Google uses your page speed somewhat as a


00:03:28.140 --> 00:03:35.200
Index on like how you rank so going down that path. I did all sorts of work to make our sites


00:03:35.200 --> 00:03:41.320
Much much faster Python bytes out of them a training site all these things. So that was great


00:03:41.320 --> 00:03:44.320
But what I realized is when I restart,


00:03:44.320 --> 00:03:47.280
like I deploy a new version of the Python app,


00:03:47.280 --> 00:03:49.560
the very first time you hit a page


00:03:49.560 --> 00:03:52.120
that hasn't been loaded by that like worker process,


00:03:52.120 --> 00:03:54.020
it has to parse up the templates


00:03:54.020 --> 00:03:55.260
and do a little bit of work.


00:03:55.260 --> 00:03:58.520
And so maybe the first time you hit like a landing page


00:03:58.520 --> 00:04:00.280
that might not get hit that often,


00:04:00.280 --> 00:04:03.560
maybe it's, I don't know, it takes half a second,


00:04:03.560 --> 00:04:06.280
70, 750 milliseconds or something to load.


00:04:06.280 --> 00:04:09.240
After that, it's like 20, 50 milliseconds.


00:04:09.240 --> 00:04:12.760
super fast, but the first time you hit it, it doesn't. So I'm like, all right, well,


00:04:12.760 --> 00:04:17.560
what if I restart and I've done all this work and then that's when the search indexing happens and


00:04:17.560 --> 00:04:21.560
everything still appears slow. So what can I do to make it faster? Well, why don't I just request


00:04:21.560 --> 00:04:27.000
every page and do that in parallel as many worker processes I have so it has to hit all the worker


00:04:27.000 --> 00:04:31.960
processes? It's not perfect, but it's a decent heuristic, right? So it works. You run it one


00:04:31.960 --> 00:04:37.720
time, every request is kind of slow, the next time it's incredibly fast. So I wrote this little app


00:04:37.720 --> 00:04:42.040
And i'm like, well, I don't want to just like type python my little script against the thing


00:04:42.040 --> 00:04:44.280
What you do is you point it at a site map


00:04:44.280 --> 00:04:49.960
Of any site and it'll figure out what the urls are and it'll like warm them all up basically


00:04:49.960 --> 00:04:53.000
So I linked to this. Yeah, so I linked to this little github thing


00:04:53.000 --> 00:04:57.720
But what I wanted to do is I wanted to type I called it like warm up or wake up or something like that


00:04:57.720 --> 00:05:01.260
So I wanted to just go to my website and say wake up python bytes.fm


00:05:01.260 --> 00:05:05.080
And that was it and make that part of my like ci cd


00:05:05.700 --> 00:05:09.060
deployment pipeline. Yeah. But I'm like, well, wait a minute. How do I,


00:05:09.060 --> 00:05:10.460
how do I make a,


00:05:10.460 --> 00:05:14.620
I know there are things like piece or from Python and cookie cutter and pie


00:05:14.620 --> 00:05:17.900
test and all these things that I can run, but how do I make that invite?


00:05:17.900 --> 00:05:21.780
I just had never thought about that. And I think even you had sent me a message.


00:05:21.780 --> 00:05:25.860
And so the idea is that if you create an entry point in your setup for your


00:05:25.860 --> 00:05:30.860
package, those will become executable commands on your OS,


00:05:30.860 --> 00:05:32.180
right? So that's pretty cool.


00:05:32.180 --> 00:05:36.620
So what I'm going to do is I'm going to link to a thing called Python package as a CLI option.


00:05:36.620 --> 00:05:43.740
And this just talks you through all the steps of setting it up so that basically you create a package in the package, you set up the entry points.


00:05:43.740 --> 00:05:45.260
It talks about how to structure those.


00:05:45.260 --> 00:05:53.740
And then if you just pip install your package, then, you know, all of a sudden these commands are available to globally as if they were like full on executables in the OS.


00:05:53.740 --> 00:05:54.460
Yeah, nice.


00:05:54.940 --> 00:06:01.060
It's actually one of those also one of those things that like, I'm glad you bring it up because it's not obvious how to do it.


00:06:01.060 --> 00:06:06.040
But the once you know how to do it, you're like, Oh, yeah, that's how you do it.


00:06:06.040 --> 00:06:07.620
And then you don't think about it anymore.


00:06:07.620 --> 00:06:08.540
Exactly.


00:06:08.540 --> 00:06:09.180
It's super easy.


00:06:09.180 --> 00:06:10.500
Everyone's like, Oh, this is what you do.


00:06:10.500 --> 00:06:12.900
I'm like, I've just never even thought about that.


00:06:12.900 --> 00:06:14.100
But yeah, it's not super obvious.


00:06:14.100 --> 00:06:20.300
Uh, because you know, in other environments, the way you do that is you compile it to an executable binary and you put that in your path.


00:06:20.300 --> 00:06:21.460
That's not how it works in Python.


00:06:21.460 --> 00:06:21.740
No.


00:06:21.740 --> 00:06:21.980
Yeah.


00:06:21.980 --> 00:06:28.980
you have to have like this magic entry points thing for setup tools and then the other ones have like different versions


00:06:28.980 --> 00:06:30.220
So yeah, exactly


00:06:30.220 --> 00:06:36.180
So anyway, I linked to that little site map one thing that drove me down this path and then also to the article


00:06:36.180 --> 00:06:38.740
That talks about this. How do you do this?


00:06:38.740 --> 00:06:42.380
And it's you know, it's not super new but I think it's certainly relevant to people out there


00:06:42.380 --> 00:06:46.340
And I think I was inspired to do this because I wanted to have it as part of pip X


00:06:46.340 --> 00:06:48.300
So you can pip X install your thing


00:06:48.300 --> 00:06:53.000
It says here's the executables that you got when you pipx install this thing and like I want mine to have one of those


00:06:53.000 --> 00:06:59.600
Come on. Yeah. Well, I'm glad you were actually I'm gonna use your app because we've got a a new visualization tool that we're using at


00:06:59.600 --> 00:07:01.080
work and


00:07:01.080 --> 00:07:08.240
At one of the demos we demoed it and like it was super slow as like, oh my god, what what happened?


00:07:08.240 --> 00:07:13.680
Well, it's the intern just edited all the code right before you have the demo. Yeah, exactly and


00:07:14.240 --> 00:07:19.120
So and this will fix it if you have a site map it'll just go request every page you tell it how many worker processes


00:07:19.120 --> 00:07:22.040
It'll do it all in parallel with a sink in a way. It's beautiful


00:07:22.040 --> 00:07:23.320
It's worth mentioning


00:07:23.320 --> 00:07:25.240
I guess that that little thing is not on


00:07:25.240 --> 00:07:30.200
Pi API at least not yet unless people can convince me to do it because I'm happy to build it for myself and it's on


00:07:30.200 --> 00:07:34.360
GitHub and you can pip install it from the github link, you know with the github option


00:07:34.360 --> 00:07:39.160
But I haven't decided I haven't committed to owning that puppy as an open source thing


00:07:39.160 --> 00:07:43.640
So I just I don't want to put it necessarily on the pip just yet. I'm not sure


00:07:43.720 --> 00:07:45.360
- Okay, cool.


00:07:45.360 --> 00:07:47.160
Well, next I wanna talk about,


00:07:47.160 --> 00:07:50.440
we've talked about type checking and,


00:07:50.440 --> 00:07:51.520
what do we call this stuff?


00:07:51.520 --> 00:07:52.600
The type hints and stuff. - Type annotations,


00:07:52.600 --> 00:07:53.440
type hints, yeah.


00:07:53.440 --> 00:07:54.520
- Yeah, yeah.


00:07:54.520 --> 00:07:57.100
We've talked about MyAPI several times.


00:07:57.100 --> 00:07:58.760
And I actually think,


00:07:58.760 --> 00:08:01.880
I don't even feel bad for not remembering who specifically,


00:08:01.880 --> 00:08:04.760
because I think we got this suggestion from lots of people.


00:08:04.760 --> 00:08:09.200
There's another tool called PyRight, P-Y-R-I-G-H-T.


00:08:09.200 --> 00:08:12.960
And it's a Microsoft, it's from the Microsoft repo.


00:08:12.960 --> 00:08:17.020
and it's the Microsoft static type checker for Python.


00:08:17.020 --> 00:08:21.060
And it's got a little bit of an interesting twist on it.


00:08:21.060 --> 00:08:22.880
It's written in TypeScript.


00:08:22.880 --> 00:08:24.960
What is TypeScript, a JavaScript thing or?


00:08:24.960 --> 00:08:25.780
- That's pretty meta.


00:08:25.780 --> 00:08:30.320
So TypeScript is basically like the idea of adding type hints


00:08:30.320 --> 00:08:31.360
or annotations of Python,


00:08:31.360 --> 00:08:33.040
like TypeScript is that to JavaScript,


00:08:33.040 --> 00:08:34.320
but to like the nth degree.


00:08:34.320 --> 00:08:37.960
So like TypeScript adds concrete typing and static typing


00:08:37.960 --> 00:08:39.680
and whatnot to JavaScript.


00:08:39.680 --> 00:08:41.840
And then it's its own language


00:08:41.840 --> 00:08:45.200
and then it compiles to native JavaScript basically.


00:08:45.200 --> 00:08:47.880
So yeah, it's kind of meta that that's the way they did it.


00:08:47.880 --> 00:08:49.400
- Okay, so it's written in TypeScript


00:08:49.400 --> 00:08:53.520
and it runs within Node and they're very open about it.


00:08:53.520 --> 00:08:57.060
It's intended for large code bases.


00:08:57.060 --> 00:08:59.600
So they're hinting at, this isn't something


00:08:59.600 --> 00:09:02.840
for just everybody to just use on your small little project


00:09:02.840 --> 00:09:04.200
or your small open source project.


00:09:04.200 --> 00:09:06.680
- Probably means it's a pain to set up.


00:09:06.680 --> 00:09:07.600
- Maybe, maybe.


00:09:07.600 --> 00:09:08.440
- I don't know, I've never tried it.


00:09:08.440 --> 00:09:09.440
- Once you have it set up,


00:09:09.440 --> 00:09:14.280
supposedly five times faster than mypy. For a lot of people, and it has a watch


00:09:14.280 --> 00:09:19.600
feature, it can watch code bases, large code bases, so that's for people with a


00:09:19.600 --> 00:09:23.120
big code base with a lot of people getting involved in it, that might be a


00:09:23.120 --> 00:09:26.920
really great idea. Yeah, this looks like a super idea. I think typins are a good


00:09:26.920 --> 00:09:31.240
idea if not over applied and this definitely seems useful. One of their


00:09:31.240 --> 00:09:35.400
comments, I just wanted to, they're not slamming mypy at all, but they say


00:09:35.400 --> 00:09:38.040
the PyRite was created to address gaps


00:09:38.040 --> 00:09:41.160
in the existing Python type checkers like mypy.


00:09:41.160 --> 00:09:42.080
- Okay, that's cool.


00:09:42.080 --> 00:09:43.040
Yeah, it looks really great.


00:09:43.040 --> 00:09:44.480
It has a lot of stars on GitHub already,


00:09:44.480 --> 00:09:47.400
so happy to see them putting that out there.


00:09:47.400 --> 00:09:48.540
All right, before we get to the next one,


00:09:48.540 --> 00:09:50.240
let me tell everyone about Datadog.


00:09:50.240 --> 00:09:52.720
So this episode, as many of them are,


00:09:52.720 --> 00:09:53.840
is sponsored by Datadog,


00:09:53.840 --> 00:09:56.280
and they're a monitoring and analytics service,


00:09:56.280 --> 00:09:58.240
and they bring all of your metrics and logs


00:09:58.240 --> 00:10:00.680
and distributed traces together in one place.


00:10:00.680 --> 00:10:02.880
They're client auto-instruments,


00:10:02.880 --> 00:10:05.720
things like asyncio for async and away


00:10:05.720 --> 00:10:07.640
and popular frameworks like Django and Tornado


00:10:07.640 --> 00:10:09.260
to help you visualize performance.


00:10:09.260 --> 00:10:11.080
So you can trace all your requests


00:10:11.080 --> 00:10:14.600
across service boundaries, identify bottlenecks,


00:10:14.600 --> 00:10:16.040
you've got a bunch of microservices,


00:10:16.040 --> 00:10:18.040
like how do you correlate these into one


00:10:18.040 --> 00:10:21.420
sort of call stack performance statement.


00:10:21.420 --> 00:10:22.260
It'll do that for you.


00:10:22.260 --> 00:10:23.400
So pretty awesome stuff.


00:10:23.400 --> 00:10:26.480
Check them out at pythonbytes.fm/datadog.


00:10:26.480 --> 00:10:27.760
- Nice, thanks Datadog.


00:10:27.760 --> 00:10:28.600
- Thank you Datadog.


00:10:28.600 --> 00:10:30.840
Now, it wouldn't be a show if we didn't talk


00:10:30.840 --> 00:10:32.160
about Anthony Shaw, would it?


00:10:32.160 --> 00:10:34.320
- Oh, is this an Anthony Shah article?


00:10:34.320 --> 00:10:37.120
- And a real Python thing as well.


00:10:37.120 --> 00:10:38.800
So this next one that I want to talk about


00:10:38.800 --> 00:10:40.480
is something I'm super passionate about,


00:10:40.480 --> 00:10:42.360
and so I'm glad Anthony wrote about it,


00:10:42.360 --> 00:10:45.520
and Dan Bader had it on real Python,


00:10:45.520 --> 00:10:49.120
is refactoring, especially for simplicity.


00:10:49.120 --> 00:10:51.160
So he wrote an article that I think people


00:10:51.160 --> 00:10:53.840
who maybe haven't thought too much about this lately


00:10:53.840 --> 00:10:54.760
should check out called


00:10:54.760 --> 00:10:58.360
Refactoring Python Applications for Simplicity.


00:10:58.360 --> 00:10:59.920
So pretty cool.


00:10:59.920 --> 00:11:04.600
A lot of it turns out to be about answering the question of,


00:11:04.600 --> 00:11:06.200
is my code complex?


00:11:06.200 --> 00:11:07.600
And that's interesting.


00:11:07.600 --> 00:11:09.800
I don't know, I've been working on it, it doesn't seem bad.


00:11:09.800 --> 00:11:11.080
Like, where is it bad?


00:11:11.080 --> 00:11:12.640
That part over there, I don't like to edit.


00:11:12.640 --> 00:11:14.200
I know that breaks a lot if I touch that,


00:11:14.200 --> 00:11:16.240
so we just don't mess with that too much.


00:11:16.240 --> 00:11:17.080
Things like that, right?


00:11:17.080 --> 00:11:18.880
But in general, how do you know?


00:11:18.880 --> 00:11:23.520
So he talks about different metrics for complexity.


00:11:23.520 --> 00:11:24.960
So if you haven't thought about that, that's pretty cool.


00:11:24.960 --> 00:11:26.960
So lines of code, super obvious,


00:11:26.960 --> 00:11:29.000
like it's 10,000 lines of code.


00:11:29.000 --> 00:11:31.420
I don't know, that can mean something or it could just mean, you know, a lot of


00:11:31.420 --> 00:11:34.580
stuff you got to do, but then a hundred is easier.


00:11:34.580 --> 00:11:35.460
Yeah, exactly.


00:11:35.460 --> 00:11:37.340
A hundred is definitely easier in general.


00:11:37.340 --> 00:11:38.260
So.


00:11:38.260 --> 00:11:42.320
Talked about cyclomatic complexity, which is pretty awesome.


00:11:42.320 --> 00:11:45.780
And as a tester, I think that's a pretty interesting thing to think about as well.


00:11:45.780 --> 00:11:49.640
It's like, so if I've got like four in loop and within that four in loop, I have


00:11:49.640 --> 00:11:53.580
an if statement, you know, maybe depending on how you've structured it, that might be


00:11:53.580 --> 00:11:55.660
like three for the cyclomatic complexity.


00:11:55.660 --> 00:11:58.620
Cause you could write some code that has an empty list, so you don't iterate over.


00:11:58.620 --> 00:12:01.500
So that's one branch of execution.


00:12:01.500 --> 00:12:03.060
Another one is maybe you are looping through stuff,


00:12:03.060 --> 00:12:04.340
but none of them hits that if statement,


00:12:04.340 --> 00:12:05.260
or maybe it does, right?


00:12:05.260 --> 00:12:07.460
So how do you basically execute each path


00:12:07.460 --> 00:12:10.420
of all the potential conditional logic


00:12:10.420 --> 00:12:12.980
and going in or not into loops and stuff like that?


00:12:12.980 --> 00:12:14.320
So that's cool.


00:12:14.320 --> 00:12:17.740
If you have a function that has 15 of those things,


00:12:17.740 --> 00:12:20.060
I don't know what it's doing, but it's wrong.


00:12:20.060 --> 00:12:20.900
Right?


00:12:20.900 --> 00:12:21.820
It should not be doing that.


00:12:21.820 --> 00:12:23.280
It should not be doing that much.


00:12:23.280 --> 00:12:26.540
You have smaller functions, probably.


00:12:26.540 --> 00:12:28.780
Maybe that's a little bit of a harsh blanket statement,


00:12:28.780 --> 00:12:30.500
but there is a number where,


00:12:30.500 --> 00:12:32.020
I don't know what you're doing, but it's too much.


00:12:32.020 --> 00:12:32.980
You know what I mean?


00:12:32.980 --> 00:12:35.100
Whereas lines of code, you can't really say that.


00:12:35.100 --> 00:12:38.140
And there's also a couple other metrics


00:12:38.140 --> 00:12:39.020
that I'm not gonna talk about


00:12:39.020 --> 00:12:40.900
that go into this thing that's like,


00:12:40.900 --> 00:12:43.220
sort of takes more of them into account


00:12:43.220 --> 00:12:44.940
called a maintainability index.


00:12:44.940 --> 00:12:46.140
And he also talks about Wiley,


00:12:46.140 --> 00:12:47.380
which I think we've covered on the show,


00:12:47.380 --> 00:12:51.060
which is a tool he created to compute those numbers


00:12:51.060 --> 00:12:52.620
for your Python application.


00:12:52.620 --> 00:12:53.460
That's pretty cool.


00:12:53.460 --> 00:12:54.380
So all of that is to say,


00:12:54.380 --> 00:12:56.580
is my code complex and where?


00:12:56.580 --> 00:12:58.620
And then he talks about, all right, how do we refactor it?


00:12:58.620 --> 00:12:59.940
What are the tools?


00:12:59.940 --> 00:13:02.900
We can use PyCharm because it has killer refactoring stuff


00:13:02.900 --> 00:13:06.300
built in, there's some plugins for things like Vim and stuff


00:13:06.300 --> 00:13:10.160
or packages you can get, also VS Code stuff.


00:13:10.160 --> 00:13:12.500
And then the most, I think the most important part is like,


00:13:12.500 --> 00:13:14.660
here are some anti-patterns,


00:13:14.660 --> 00:13:16.980
like highly nested code, for example,


00:13:16.980 --> 00:13:20.980
and here are ways to refactor your way to better code.


00:13:20.980 --> 00:13:22.980
And I think that's actually the most valuable


00:13:22.980 --> 00:13:25.220
an actionable part of this article.


00:13:25.220 --> 00:13:26.860
Like, do I do this?


00:13:26.860 --> 00:13:27.740
Yes, I do.


00:13:27.740 --> 00:13:28.580
That's bad.


00:13:28.580 --> 00:13:29.400
Oh, here's the fix.


00:13:29.400 --> 00:13:30.240
Let me do that.


00:13:30.240 --> 00:13:31.060
I think that's great.


00:13:31.060 --> 00:13:32.620
- Yeah, actually, this is incredible.


00:13:32.620 --> 00:13:35.940
I think this should be like, turn into like a chapter


00:13:35.940 --> 00:13:40.940
in a couple lessons in all computer science programs


00:13:40.940 --> 00:13:43.140
'cause there's a lot of information in here.


00:13:43.140 --> 00:13:44.460
- Yeah, it's super good.


00:13:44.460 --> 00:13:47.760
I mean, the complexity measures is really interesting


00:13:47.760 --> 00:13:49.540
as well as the answer patterns.


00:13:49.540 --> 00:13:51.100
And yeah, I definitely like it.


00:13:51.100 --> 00:13:52.960
And it certainly, I think it probably would resonate


00:13:52.960 --> 00:13:55.880
with you as well 'cause it has this testing angle, right?


00:13:55.880 --> 00:13:57.920
Like how do you know it's safe to refactor your way


00:13:57.920 --> 00:13:58.760
out of anti-patterns?


00:13:58.760 --> 00:14:00.760
Well, if you have tests, you're good.


00:14:00.760 --> 00:14:02.520
- Yeah, with some of the things like Wiley


00:14:02.520 --> 00:14:04.120
and others, you can test for this.


00:14:04.120 --> 00:14:05.760
So it's nice. - Yeah, super cool.


00:14:05.760 --> 00:14:06.680
- Cool. - All right, well,


00:14:06.680 --> 00:14:08.840
check that one out if you want a refresher


00:14:08.840 --> 00:14:12.240
or on refactorator, you wanna see some of the anti-patterns.


00:14:12.240 --> 00:14:14.520
- Speaking of like things to learn and lessons,


00:14:14.520 --> 00:14:18.960
we had Colin Sullivan suggested that we cover FastAPI.


00:14:18.960 --> 00:14:19.800
So thanks, Colin.


00:14:19.800 --> 00:14:20.680
- Yeah, and I hadn't heard of it,


00:14:20.680 --> 00:14:21.880
but it looks cool, doesn't it?


00:14:21.880 --> 00:14:24.240
- Yeah, my first reaction is, okay, I'll check it out,


00:14:24.240 --> 00:14:28.400
but it's yet another API generator stuff


00:14:28.400 --> 00:14:31.320
so that you can create like REST APIs


00:14:31.320 --> 00:14:33.500
fairly quickly and easily.


00:14:33.500 --> 00:14:37.120
But it is super cool and they're building it as fast.


00:14:37.120 --> 00:14:39.640
So it's FastAPI, high performance, easy to learn,


00:14:39.640 --> 00:14:42.440
fast to code, ready for production.


00:14:42.440 --> 00:14:45.160
And yeah, I'm gonna drop in their little sales pitch.


00:14:45.160 --> 00:14:47.780
It's fast, fast to code, fewer bugs,


00:14:47.780 --> 00:14:50.120
supposedly more intuitive.


00:14:50.120 --> 00:14:51.660
And I just, this morning, I was,


00:14:51.660 --> 00:14:54.800
I just went through their tutorial on it,


00:14:54.800 --> 00:14:56.400
installed it, ran something.


00:14:56.400 --> 00:14:59.680
'Cause I was, I had one question is there,


00:14:59.680 --> 00:15:02.260
that has both Swagger and Redock,


00:15:02.260 --> 00:15:06.080
which are ways to document your APIs,


00:15:06.080 --> 00:15:08.880
like live, you can just go to the webpage


00:15:08.880 --> 00:15:11.600
and go to the docs and see what it is,


00:15:11.600 --> 00:15:13.380
what your API looks like.


00:15:13.380 --> 00:15:16.080
And I'm like, that's just automatically there.


00:15:16.080 --> 00:15:19.160
And sure enough, yeah, did the demo and it's right there.


00:15:19.160 --> 00:15:23.000
You can walk along with the demo and see the hunt through it.


00:15:23.000 --> 00:15:26.320
And it only took a couple of minutes for me to try this out.


00:15:26.320 --> 00:15:29.520
And then it's built on top of Starlet,


00:15:29.520 --> 00:15:31.800
which I hadn't heard of before, which


00:15:31.800 --> 00:15:35.120
is a project for some of the web parts of it.


00:15:35.120 --> 00:15:37.320
Yeah, the most important part about Starlet


00:15:37.320 --> 00:15:40.360
is that I think is that it adds the async and await


00:15:40.360 --> 00:15:43.480
capabilities and the parallelism as well.


00:15:43.480 --> 00:15:48.440
And then Pydantic, which is for some of the data,


00:15:48.440 --> 00:15:50.520
controlling the data structures.


00:15:50.520 --> 00:15:53.400
And then at the bottom of the, just the front page


00:15:53.400 --> 00:15:55.560
that only takes a few minutes to go through,


00:15:55.560 --> 00:15:58.280
it says, oh yeah, we also have this tutorial.


00:15:58.280 --> 00:16:01.240
And the tutorial looks like it goes through,


00:16:01.240 --> 00:16:04.600
I think like some of the best practice crash course


00:16:04.600 --> 00:16:06.880
of API best practices.


00:16:06.880 --> 00:16:08.820
And so I'm totally gonna go through that.


00:16:08.820 --> 00:16:11.880
I think I might learn a whole bunch about schemas


00:16:11.880 --> 00:16:13.720
and a whole bunch of stuff.


00:16:13.720 --> 00:16:14.560
- Right.


00:16:14.560 --> 00:16:15.380
- Just by trying that.


00:16:15.380 --> 00:16:17.240
- Which I use this verb and yeah, it looks,


00:16:17.240 --> 00:16:20.360
This looks super cool. And one of the things I like about, well,


00:16:20.360 --> 00:16:23.440
certainly one of the things I like is this async and await capability.


00:16:23.440 --> 00:16:27.240
You know, there's some talk every now and then you hear these things flare up,


00:16:27.240 --> 00:16:30.320
like, "Oh, we're switching to Go because it's not fast enough." Or,


00:16:30.320 --> 00:16:33.720
"We're switching to Node.js because I don't know." Right? You know,


00:16:33.720 --> 00:16:35.040
because it was hot and amazing.


00:16:35.040 --> 00:16:38.160
And they say we have super fast performance for this,


00:16:38.160 --> 00:16:40.880
like on par with Node.js and on par with Go.


00:16:40.880 --> 00:16:45.040
And I think largely they say thanks to Starlette and Pydantic.


00:16:45.060 --> 00:16:49.300
And it's also thanks to this native asyncio and uviacorn


00:16:49.300 --> 00:16:53.340
and all the ASGI foundations, which is super, super nice.


00:16:53.340 --> 00:16:56.380
- Yeah, and uviacorn, they have me using that


00:16:56.380 --> 00:16:58.540
with just the introduction demo.


00:16:58.540 --> 00:16:59.780
That's cool.


00:16:59.780 --> 00:17:02.300
And one of the things you can, they have you doing


00:17:02.300 --> 00:17:06.620
is to try out the reload flag, which just means like,


00:17:06.620 --> 00:17:10.180
while you can just type your code and change it


00:17:10.180 --> 00:17:12.060
and it just changes on the fly


00:17:12.060 --> 00:17:14.940
and you don't have to restart your application.


00:17:14.940 --> 00:17:18.300
Right. Normally when you run your web map, you type UVicorn or


00:17:18.300 --> 00:17:21.420
microwizky or whatever, and it's going to just load your Python files.


00:17:21.420 --> 00:17:26.140
And until you restart it, it's not going to reload them. But it's like the UVicorn


00:17:26.140 --> 00:17:30.060
thing you're talking about is a watch the files. And if there's any change, it'll just automatically


00:17:30.060 --> 00:17:35.260
restart your process. So you can just type save request, type save request, and it's all good.


00:17:35.260 --> 00:17:38.620
Yeah, I feel smarter already just going through the little intro.


00:17:38.620 --> 00:17:42.060
Yeah, that's great. I'm glad you pulled that out because that's super cool.


00:17:42.060 --> 00:17:47.340
the API is really nice as well. Okay, so I talked about at the beginning, I don't know if I want


00:17:47.340 --> 00:17:51.980
that puppy. There's a lot of folks out there that have probably open source projects and they're


00:17:51.980 --> 00:17:58.220
just like, "Ah, there's somebody angry at me on GitHub again. I can't go back there today."


00:17:58.220 --> 00:18:04.780
So there's a project called Bleach, which is a web server foundation type thing or web framework


00:18:04.780 --> 00:18:10.220
foundation type thing. And the reason it's called Bleach is it will take link text and stuff like


00:18:10.220 --> 00:18:14.860
that and make sure that it is safe for HTML. Because if you get it from an untrusted source,


00:18:14.860 --> 00:18:20.700
there's all sorts of insanity that with Unicode, escape codes, and all sorts of bizarre stuff that


00:18:20.700 --> 00:18:25.980
you can put into links to make bad stuff happen on servers. And so the idea of this is it's supposed


00:18:25.980 --> 00:18:32.060
to apply some bleach to this user input and stop the problem. So this guy, Will Congreen,


00:18:32.060 --> 00:18:36.460
he had been maintaining this project. He picked it up from someone else. And he decided, "You know


00:18:36.460 --> 00:18:39.140
"You know what, I don't want to work on this anymore.


00:18:39.140 --> 00:18:41.220
Been working on it for a while and it doesn't bring me joy,


00:18:41.220 --> 00:18:42.500
so I'm going to step down."


00:18:42.500 --> 00:18:43.820
And I thought I'd just highlight this


00:18:43.820 --> 00:18:46.240
because I think it tells an interesting story


00:18:46.240 --> 00:18:47.980
that probably resonates with a lot of folks.


00:18:47.980 --> 00:18:49.900
He said, "Look, I picked up maintenance of this project


00:18:49.900 --> 00:18:51.860
'cause when I was familiar with it,


00:18:51.860 --> 00:18:53.980
the current maintainer wanted to step down.


00:18:53.980 --> 00:18:55.220
I guess he worked for Mozilla


00:18:55.220 --> 00:18:57.020
and Mozilla was using it on a bunch of sites


00:18:57.020 --> 00:18:58.660
and he felt an obligation to make sure


00:18:58.660 --> 00:19:00.900
it didn't just drop to nowhere


00:19:00.900 --> 00:19:03.020
and he knew that he could do it.


00:19:03.020 --> 00:19:04.500
He didn't really like working on it


00:19:04.500 --> 00:19:07.240
'cause it's just really tedious to sort of fight


00:19:07.240 --> 00:19:09.220
all these weird escape codes and stuff.


00:19:09.220 --> 00:19:12.660
And he did a bunch of work, he didn't like using it,


00:19:12.660 --> 00:19:15.340
but he felt obligated to make sure it kept going.


00:19:15.340 --> 00:19:18.300
So he said, is he getting paid to work on it?


00:19:18.300 --> 00:19:19.140
No.


00:19:19.140 --> 00:19:19.960
Does he like working on it?


00:19:19.960 --> 00:19:20.800
No.


00:19:20.800 --> 00:19:21.620
Seems like he shouldn't be doing it.


00:19:21.620 --> 00:19:23.100
So it's just basically he's stepping down,


00:19:23.100 --> 00:19:25.340
but I thought it was just kind of an interesting


00:19:25.340 --> 00:19:28.740
journal entry of that side of open source.


00:19:28.740 --> 00:19:29.580
- Yeah.


00:19:29.580 --> 00:19:31.420
- Yeah, so people are out there, they can read this


00:19:31.420 --> 00:19:33.420
and maybe it'll resonate, maybe it'll help them


00:19:33.420 --> 00:19:34.240
stay on the project.


00:19:34.240 --> 00:19:35.520
- No, no, no, actually I don't feel like this.


00:19:35.520 --> 00:19:38.100
You know, actually I am getting joy from this or whatever,


00:19:38.100 --> 00:19:39.400
or maybe they are and not.


00:19:39.400 --> 00:19:42.080
- Is there somebody else taking it over?


00:19:42.080 --> 00:19:44.120
- There's somebody else who's working on it,


00:19:44.120 --> 00:19:47.320
I think who may be taking it over.


00:19:47.320 --> 00:19:51.400
Last line of the article said something to the effect of,


00:19:51.400 --> 00:19:52.300
what happens to bleach?


00:19:52.300 --> 00:19:55.020
I'm stepping down without working on what comes next.


00:19:55.020 --> 00:19:56.760
I think Greg is gonna figure that out.


00:19:56.760 --> 00:19:58.240
I'm afraid of it, I don't know who Greg is,


00:19:58.240 --> 00:19:59.440
but he's one of the people working on it.


00:19:59.440 --> 00:20:00.480
So it's kind of like,


00:20:00.480 --> 00:20:02.760
someone else is gonna have to--


00:20:02.760 --> 00:20:03.600
- Good luck, Greg.


00:20:03.600 --> 00:20:04.580
(laughing)


00:20:04.580 --> 00:20:05.420
- Yeah, yeah, good luck.


00:20:05.420 --> 00:20:07.860
So anyway, not a super positive story,


00:20:07.860 --> 00:20:09.140
but also I just thought it would be


00:20:09.140 --> 00:20:10.260
kind of interesting to share,


00:20:10.260 --> 00:20:12.520
because it's an interesting look


00:20:12.520 --> 00:20:15.420
into the sort of lifecycle of maintainers


00:20:15.420 --> 00:20:16.540
of open source projects.


00:20:16.540 --> 00:20:17.500
- Yeah, interesting.


00:20:17.500 --> 00:20:18.580
- Nice, yeah.


00:20:18.580 --> 00:20:20.740
So Brian, you got any extras for us this week?


00:20:20.740 --> 00:20:21.900
Or things you wanted to start real quick?


00:20:21.900 --> 00:20:25.060
- So something that came up that I thought was funny,


00:20:25.060 --> 00:20:29.500
Tim Hopper sent this out, and it's called SleepSort.


00:20:29.500 --> 00:20:32.660
And he found another implementation of SleepSort,


00:20:32.660 --> 00:20:35.620
and then he implemented it as his in Python.


00:20:35.620 --> 00:20:37.380
But I think it's just hilarious.


00:20:37.380 --> 00:20:41.140
So the idea is, can you make a sort algorithm


00:20:41.140 --> 00:20:44.580
by just sleeping for the period of time


00:20:44.580 --> 00:20:47.120
with the number is, and then printing out the number


00:20:47.120 --> 00:20:47.960
when you're done?


00:20:47.960 --> 00:20:49.380
So if you're on it, just sort numbers.


00:20:49.380 --> 00:20:50.620
- Oh, that's awesome.


00:20:50.620 --> 00:20:52.540
So if I have like one, seven, and three,


00:20:52.540 --> 00:20:53.900
and I wanna print one, three, seven,


00:20:53.900 --> 00:20:56.700
I just go to all of them and sleep as long as they are


00:20:56.700 --> 00:20:57.540
and then print them out?


00:20:57.540 --> 00:21:00.180
- Yeah, with Async, you can just like line them all up


00:21:00.180 --> 00:21:02.820
and sleep for the amount of time that it says,


00:21:02.820 --> 00:21:06.420
and then they'll all be sorted because it's time sorting.


00:21:06.420 --> 00:21:08.340
- Time sorts for you, how interesting.


00:21:08.340 --> 00:21:09.340
Yeah, I guess it does.


00:21:09.340 --> 00:21:10.340
(laughing)


00:21:10.340 --> 00:21:13.900
- I don't think it's useful, but it's interesting.


00:21:13.900 --> 00:21:14.740
Anyway.


00:21:14.740 --> 00:21:15.700
- It's an interesting thought experiment.


00:21:15.700 --> 00:21:17.260
And you know, if you're in college,


00:21:17.260 --> 00:21:18.860
you're in one of these algorithm courses,


00:21:18.860 --> 00:21:20.660
and they want to talk about quicksort, bubble sort,


00:21:20.660 --> 00:21:23.400
like here's a little interesting one


00:21:23.400 --> 00:21:25.540
that people might not see coming.


00:21:25.540 --> 00:21:27.260
- Yeah.


00:21:27.260 --> 00:21:28.380
- I have a couple I want to throw out there really quick.


00:21:28.380 --> 00:21:33.140
First of all, Python 3.7.3 is out now.


00:21:33.140 --> 00:21:34.860
So that's pretty cool.


00:21:34.860 --> 00:21:36.820
There's a decent number of changes to it.


00:21:36.820 --> 00:21:40.460
I would say there's some, a decent number of changes.


00:21:40.460 --> 00:21:43.460
It's really hard sometimes I find on the change logs


00:21:43.460 --> 00:21:47.980
for Python to see what the point release changes are


00:21:47.980 --> 00:21:49.260
versus just the major ones.


00:21:49.260 --> 00:21:51.660
So you go to where they say what the changes are


00:21:51.660 --> 00:21:53.220
for Python 3.7, it says,


00:21:53.220 --> 00:21:55.460
well these are the new pips in 3.7.


00:21:55.460 --> 00:21:57.660
Okay, well, what about this particular one?


00:21:57.660 --> 00:22:03.980
I mean, anyway, so probably people can put me in a better place in the release logs, but that seems like it should include those


00:22:03.980 --> 00:22:06.700
Anyway, so if you want to stay in the latest


00:22:06.700 --> 00:22:09.820
official release of python 3.7 you can go


00:22:09.820 --> 00:22:17.500
Install python 3.7.3 or however you do that. Right don't end up like the xkcd at the beginning pick one and go with it


00:22:17.500 --> 00:22:26.220
Yeah, another one this one I didn't really think it was worth covering the whole episode but alexander lori who is a medical doctor


00:22:26.300 --> 00:22:31.260
who's learning Python, a guy I know from the podcast and also from courses and stuff, really,


00:22:31.260 --> 00:22:37.260
really great guy, sent us this thing called Stack RoboFlow. So we all know Stack Overflow.


00:22:37.260 --> 00:22:42.140
So Brian, click on Stack RoboFlow and see what you get. It looks like Stack Overflow. So here,


00:22:42.140 --> 00:22:45.500
let me just read like real quick, summarize what I get. So it looks like Stack Overflow,


00:22:45.500 --> 00:22:49.660
sort of, but there's obvious disclaimers. And it says, "Subversion branches related to local


00:22:49.660 --> 00:22:53.980
directory. Sometimes I need to rename a


00:22:53.980 --> 00:22:56.940
local file on my SVN


00:22:56.940 --> 00:23:00.220
repository and in remote desktop I do this.


00:23:00.220 --> 00:23:02.620
SVN-L. It goes in and talks about it.


00:23:02.620 --> 00:23:04.380
This is written by an AI.


00:23:04.380 --> 00:23:06.140
It's like an AI that's been


00:23:06.140 --> 00:23:08.300
trained on Stack Overflow and it knows


00:23:08.300 --> 00:23:10.300
how to ask questions and answer questions


00:23:10.300 --> 00:23:12.940
as if it were a Stack Overflow-like


00:23:12.940 --> 00:23:14.700
movie. They have the code, so


00:23:14.700 --> 00:23:15.900
if you're into machine learning and


00:23:15.900 --> 00:23:17.260
stuff, you want to check that out. It's


00:23:17.260 --> 00:23:18.780
pretty amusing. Or if you just want to


00:23:17.260 --> 00:23:22.940
to laugh to see how close can an AI get to just random stack overflow.


00:23:22.940 --> 00:23:24.940
I really also like the logo.


00:23:24.940 --> 00:23:25.940
Yeah, it's funny.


00:23:25.940 --> 00:23:26.940
Yeah, it's cute.


00:23:26.940 --> 00:23:28.940
All right, last one really quick.


00:23:28.940 --> 00:23:30.580
I thought this one just might be useful.


00:23:30.580 --> 00:23:32.260
I can't remember why I ran across this.


00:23:32.260 --> 00:23:35.260
I don't think it's written in Python, but it doesn't actually matter.


00:23:35.260 --> 00:23:37.780
It could be useful for teams writing Python.


00:23:37.780 --> 00:23:38.780
Called Passbolt.


00:23:38.780 --> 00:23:39.780
Have you heard of Passbolt?


00:23:39.780 --> 00:23:40.780
No.


00:23:40.780 --> 00:23:46.900
So Passbolt is a password manager, like one password or a last pass, something like that.


00:23:46.900 --> 00:23:49.900
But it's for teams, like for software teams and stuff.


00:23:49.900 --> 00:23:55.020
And it's free, open source, it's self-hosted, it's based on OpenPGB and stuff like that.


00:23:55.020 --> 00:24:00.500
So it's like your own private, personal hosted stuff for things like server passwords.


00:24:00.500 --> 00:24:04.980
And you know, how do I get into this GitHub and how, like, whose password goes to the


00:24:04.980 --> 00:24:08.140
mail server and like all that kind of stuff meant for teams.


00:24:08.140 --> 00:24:11.620
So it looks pretty cool for software teams to like keep track of that stuff.


00:24:11.620 --> 00:24:12.780
That's actually pretty cool.


00:24:12.780 --> 00:24:13.940
Yeah, it's pretty awesome.


00:24:13.940 --> 00:24:19.640
Maybe some folks out there can not put that on sticky notes or Excel or wherever it's right now


00:24:19.640 --> 00:24:25.900
Yeah, or in a wiki or something? Yeah or a wiki exactly. Okay, so that wraps it up for our serious topics


00:24:25.900 --> 00:24:30.260
How about something not serious? You got a joke for us? You got a pie joke for us?


00:24:30.260 --> 00:24:35.820
Yeah, pie joke. Thanks my joke. How many programmers does it take to kill a cockroach?


00:24:35.820 --> 00:24:39.860
I don't know - one to hold it and the other to install Windows on it


00:24:42.340 --> 00:24:47.400
It's pretty bad. I got one for you as well. Thanks to pie joke up eight bites walk into a bar


00:24:47.400 --> 00:24:51.520
The bartender asked can I get you anything said yeah replies the bites make us a double


00:24:51.520 --> 00:24:59.000
It's not really a joke, but it's just like serious advice from pie joke friends. Don't let friends use Python 2 7


00:24:59.000 --> 00:25:01.160
So maybe we'll just leave it at that


00:25:01.160 --> 00:25:06.760
Yeah, definitely. All right. Okay. Well Brian, thanks for being here and finding all these things and sharing with everyone. Thank you


00:25:06.760 --> 00:25:07.760
- Thank you. - You bet. Bye.


00:25:07.760 --> 00:25:09.260
Thank you for listening to Python Bytes.


00:25:09.260 --> 00:25:11.760
Follow the show on Twitter via @pythonbytes.


00:25:11.760 --> 00:25:14.760
That's Python Bytes as in B-Y-T-E-S.


00:25:14.760 --> 00:25:17.760
And get the full show notes at pythonbytes.fm.


00:25:17.760 --> 00:25:19.760
If you have a news item you want featured,


00:25:19.760 --> 00:25:21.760
just visit pythonbytes.fm and send it our way.


00:25:21.760 --> 00:25:24.760
We're always on the lookout for sharing something cool.


00:25:24.760 --> 00:25:26.760
On behalf of myself and Brian Aukin,


00:25:26.760 --> 00:25:27.760
this is Michael Kennedy.


00:25:27.760 --> 00:25:29.760
Thank you for listening and sharing this podcast


00:25:29.760 --> 00:25:31.760
with your friends and colleagues.

