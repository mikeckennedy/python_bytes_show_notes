WEBVTT

00:00:00.040 --> 00:00:04.880
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.880 --> 00:00:10.860
This is episode 323, recorded Valentine's Day, February 14th, 2023.

00:00:10.860 --> 00:00:12.220
And I am Brian Okken.

00:00:12.220 --> 00:00:13.240
I'm Michael Kennedy.

00:00:13.240 --> 00:00:14.540
Hi, I'm Pamela Fox.

00:00:14.540 --> 00:00:17.260
So thanks, Pamela, for joining us today.

00:00:17.260 --> 00:00:20.140
So for people that don't know who you are, can you introduce yourself?

00:00:20.140 --> 00:00:26.180
Yeah, I'm Pamela, and I currently work at Microsoft, where I am a cloud advocate in Python,

00:00:26.180 --> 00:00:33.840
which means that I figure out how to get stuff working on Azure while using Python

00:00:33.840 --> 00:00:39.620
and make sure that our code samples are nice and Pythonic and that we're doing things the Python way

00:00:39.620 --> 00:00:41.940
and just trying to streamline the experience.

00:00:41.940 --> 00:00:46.300
And yeah, that's really fun because it just means I get to write Python all day.

00:00:46.300 --> 00:00:48.040
And actually, it just means I deploy all day.

00:00:48.040 --> 00:00:53.100
I'm pretty much always doing something, which I guess is appropriate.

00:00:53.100 --> 00:00:59.540
I once had an ex-boyfriend who named our Wi-Fi network, Don't Stop Deploying.

00:00:59.540 --> 00:01:01.680
And the password was, I like to ship it.

00:01:01.680 --> 00:01:03.900
And I guess it's because I deployed so much back then.

00:01:03.900 --> 00:01:05.580
So I guess I've always been a deployer.

00:01:05.580 --> 00:01:06.400
So it works.

00:01:06.400 --> 00:01:08.380
But yeah, that's what I do now.

00:01:08.380 --> 00:01:11.180
Before this, I was at UC Berkeley teaching Python.

00:01:11.180 --> 00:01:15.760
And then before that was at Khan Academy and Coursera and all sorts of places,

00:01:15.760 --> 00:01:17.400
programming in Python and JavaScript.

00:01:17.400 --> 00:01:18.480
Ooh, neat.

00:01:18.480 --> 00:01:20.420
That sounds like such a fun job.

00:01:20.420 --> 00:01:26.780
I've always thought the developer advocate would be really cool because you get to do all the cool coding tech stuff.

00:01:26.780 --> 00:01:29.880
You don't have to run so much production software.

00:01:29.880 --> 00:01:31.140
So you're not on pager duty.

00:01:31.140 --> 00:01:32.820
And you get to travel and talk to a lot of people.

00:01:32.820 --> 00:01:34.160
Like, what else could you want, you know?

00:01:34.160 --> 00:01:34.700
Yeah.

00:01:34.700 --> 00:01:38.540
I think for you two, it probably would be a really good job too.

00:01:38.540 --> 00:01:44.580
It's always just a really nice combination of programming and using the other parts of your brain too.

00:01:44.880 --> 00:01:45.080
Yeah.

00:01:45.080 --> 00:01:45.540
Excellent.

00:01:45.540 --> 00:01:46.020
Excellent.

00:01:46.020 --> 00:01:47.620
Well, we're happy to have you on the show.

00:01:47.620 --> 00:01:48.540
So thanks for being here.

00:01:48.540 --> 00:01:55.000
And unrelated to Pamela being here and working for Microsoft, this episode is also brought to you by Microsoft for Startups.

00:01:55.000 --> 00:01:57.200
But we'll talk more about that later.

00:01:57.200 --> 00:01:58.500
Brian, should we kick it off?

00:01:58.500 --> 00:01:59.440
Yeah.

00:01:59.440 --> 00:02:05.940
While we all love to be in this tech space and we're all big fans and that's why we're here.

00:02:06.260 --> 00:02:07.820
Sometimes you just want to get away, right?

00:02:07.820 --> 00:02:13.820
And especially in the American West, there's a lot of places that you could get away to.

00:02:13.820 --> 00:02:16.100
The camping sites around here are magnificent.

00:02:16.100 --> 00:02:21.180
There's one that I really like that has free roaming peacocks that just cruise through your camp while you're camping.

00:02:21.180 --> 00:02:22.820
It's really nuts.

00:02:22.820 --> 00:02:24.300
And eagles flying around.

00:02:24.300 --> 00:02:30.520
However, that and all the other places are super hard to find for this exact same reason.

00:02:30.880 --> 00:02:30.960
Okay.

00:02:30.960 --> 00:02:40.020
So one of our listeners, oh gosh, I don't see his name here, but Justin is the name here.

00:02:40.020 --> 00:02:51.480
Justin Flannery from Denver, also a place with great camping, put together this cool CLI, this terminal app called Camply.

00:02:51.480 --> 00:02:54.120
So Camply is the campsite finder.

00:02:54.120 --> 00:03:03.100
It's a tool to find campgrounds and campsites that are typically sold out through recreation.gov and Yellowstone and other sites.

00:03:03.100 --> 00:03:03.500
Okay.

00:03:03.500 --> 00:03:04.300
Okay.

00:03:04.300 --> 00:03:06.140
So, you know, it's all Python.

00:03:06.140 --> 00:03:11.120
So the idea is basically you, it talks to all these different APIs.

00:03:11.120 --> 00:03:13.600
You can either run it in Docker or just run it in Python, I believe.

00:03:13.600 --> 00:03:16.940
PipX install Camply, which I love it.

00:03:16.940 --> 00:03:23.800
PipX is exactly how CLI tools that are not part of your programming story should be installed coming from Python.

00:03:23.960 --> 00:03:31.160
And so you would say like Camply, recreation areas, dash, you could do a search like dash, dash search, Glacier National Park.

00:03:31.160 --> 00:03:35.760
Or have you ever wanted to stay in a fire lookout tower in California?

00:03:35.760 --> 00:03:36.780
How cool would that be?

00:03:36.780 --> 00:03:38.440
That'd be pretty neat.

00:03:38.440 --> 00:03:40.800
Depends if there's a fire or not.

00:03:40.800 --> 00:03:41.740
Yes, exactly.

00:03:41.740 --> 00:03:43.840
Well, if there's no fire.

00:03:43.840 --> 00:03:45.620
So maybe, maybe not September.

00:03:45.620 --> 00:03:46.380
I don't know.

00:03:46.380 --> 00:03:48.600
Yeah, you got a glacier and a fire.

00:03:48.600 --> 00:03:50.720
So maybe you just use this to counter each other.

00:03:51.320 --> 00:03:55.080
Have you ever wanted to go down a really long ladder to use the restroom?

00:03:55.080 --> 00:03:58.380
Oh, you're so practical, Brian.

00:03:58.380 --> 00:03:59.260
So practical.

00:03:59.260 --> 00:04:04.180
Anyway, these things are not super easy to find potentially.

00:04:04.180 --> 00:04:09.780
So you can say, I'm looking for campsites in some area, start date, end date, and search forever.

00:04:09.780 --> 00:04:12.920
And it'll just sit there and just wait and hang out.

00:04:12.920 --> 00:04:18.780
So it'll search at recreation.gov, Yellowstone, going to camp, Reserve California, some other places.

00:04:18.780 --> 00:04:22.980
And yeah, it'll just sit there and pull that data for you.

00:04:23.440 --> 00:04:25.440
And I think it's just a really cool app.

00:04:25.440 --> 00:04:26.900
It's a cool use of Python.

00:04:26.900 --> 00:04:31.260
And people, if they're interested in going camping.

00:04:31.260 --> 00:04:37.260
The bit about this that I like is it has configurable notifications for if it finds something.

00:04:37.260 --> 00:04:41.640
So if you're looking for a particular campground and you just got it running in the background,

00:04:41.820 --> 00:04:47.800
you can have it hooked up to give you a Slack notification or an email or even a text message through Twilio.

00:04:47.800 --> 00:04:54.620
And that's pretty darn cool to be able to just have it, you know, text you when you find something.

00:04:54.620 --> 00:04:55.000
Yeah.

00:04:55.000 --> 00:04:55.820
Just kick it off.

00:04:55.820 --> 00:04:56.380
Let it run.

00:04:56.380 --> 00:04:57.460
Let it keep watching.

00:04:57.460 --> 00:04:59.500
Is it a cron job?

00:04:59.500 --> 00:05:01.720
How does the search forever work?

00:05:02.380 --> 00:05:03.540
I think you leave it.

00:05:03.540 --> 00:05:06.700
I don't know for sure, but I think you just leave your terminal running.

00:05:06.700 --> 00:05:09.120
It must have a sleep or something.

00:05:09.120 --> 00:05:09.840
I don't know.

00:05:09.840 --> 00:05:10.140
Yeah.

00:05:10.140 --> 00:05:10.720
Yeah, yeah.

00:05:10.720 --> 00:05:11.480
You would hope.

00:05:11.480 --> 00:05:13.840
Otherwise, it's going to get banned pretty soon.

00:05:13.840 --> 00:05:16.740
But no, I would think it just pulls every so often.

00:05:16.740 --> 00:05:20.160
I think it's doing, I think there's some APIs in here.

00:05:20.160 --> 00:05:24.640
If you look through, it talks about where the data is coming from.

00:05:24.640 --> 00:05:30.040
You know, there's a recreational information database from recreation.gov.

00:05:30.520 --> 00:05:32.540
And, you know, it's pulling some of that data.

00:05:32.540 --> 00:05:37.160
And yeah, I do think it's really cool that it also does those different notifications.

00:05:37.160 --> 00:05:41.320
I've just learned about push bullet and push over and realized I should probably figure out

00:05:41.320 --> 00:05:41.680
what those are.

00:05:41.680 --> 00:05:42.240
Those sound cool.

00:05:42.240 --> 00:05:43.380
I know what Twilio is.

00:05:43.380 --> 00:05:50.500
And one of the things I like about this is this could be like a SaaS app or something like

00:05:50.500 --> 00:05:50.960
that.

00:05:50.960 --> 00:05:51.640
Yes.

00:05:51.640 --> 00:05:54.360
But I'm glad that somebody, but you don't have to.

00:05:54.360 --> 00:05:58.140
If you have like a cool need that works for you and you think somebody else might have a

00:05:58.140 --> 00:05:59.460
need for a similar thing.

00:05:59.560 --> 00:06:01.280
So build something like this and share it.

00:06:01.280 --> 00:06:05.380
You don't necessarily have to make money off the back of it.

00:06:05.380 --> 00:06:11.020
There's a lot of, it's one of the things I've trained to be pushing more is software developers

00:06:11.020 --> 00:06:13.980
have these skills that we can build things like this.

00:06:13.980 --> 00:06:15.540
But a lot of people don't.

00:06:15.540 --> 00:06:20.080
And being able to build things and share things is one of the great pleasures of doing what

00:06:20.080 --> 00:06:20.480
we do.

00:06:20.480 --> 00:06:21.980
So kudos to Justin.

00:06:21.980 --> 00:06:22.080
Absolutely.

00:06:22.540 --> 00:06:22.740
Yeah.

00:06:22.740 --> 00:06:22.980
Yeah.

00:06:22.980 --> 00:06:23.820
Well done, Justin.

00:06:23.820 --> 00:06:24.680
Thanks for sending that in.

00:06:24.680 --> 00:06:30.180
And one of our listeners, Kim, also been on the show before, points out that, you know,

00:06:30.180 --> 00:06:31.320
he's from South Africa.

00:06:31.320 --> 00:06:33.680
You should try camping in some places in South Africa.

00:06:33.680 --> 00:06:37.740
Free roaming rhinos and elephants are slightly more concerning than peacocks.

00:06:37.740 --> 00:06:38.360
Yeah.

00:06:38.420 --> 00:06:42.940
I'm impressed with people that live in places that have, you know, free roaming rhinos

00:06:42.940 --> 00:06:44.780
or pretty much all of Australia.

00:06:44.780 --> 00:06:45.800
All of it.

00:06:45.800 --> 00:06:46.260
Yeah.

00:06:46.260 --> 00:06:46.780
Very impressed.

00:06:46.780 --> 00:06:50.880
It's a lovely place, but I'm always a little nervous to be like out of the city there.

00:06:50.880 --> 00:06:51.320
Anyway.

00:06:51.320 --> 00:06:53.100
All of nature wants to kill you in Australia.

00:06:53.100 --> 00:06:53.720
Exactly.

00:06:53.720 --> 00:06:54.720
And it's good at it.

00:06:54.720 --> 00:06:55.420
All right.

00:06:55.420 --> 00:06:56.360
Off to you, Brian.

00:06:56.360 --> 00:06:57.260
Okay.

00:06:57.260 --> 00:06:57.700
Wow.

00:06:57.700 --> 00:06:58.780
I'm not sharing anything yet.

00:06:58.780 --> 00:07:00.660
So just one moment.

00:07:00.660 --> 00:07:01.340
Share screen.

00:07:01.340 --> 00:07:02.100
Sorry.

00:07:02.100 --> 00:07:04.500
All of the people were listening and waiting for this.

00:07:04.500 --> 00:07:05.380
Okay.

00:07:05.380 --> 00:07:07.900
We've got fancy readmes.

00:07:07.900 --> 00:07:10.520
So everybody loves you.

00:07:10.520 --> 00:07:16.160
Hinnick points out that your fancy project needs a fancy PyPI readme.

00:07:16.160 --> 00:07:17.120
Of course it does.

00:07:17.120 --> 00:07:18.040
It's very nice.

00:07:18.040 --> 00:07:18.920
There's lots of stuff.

00:07:18.920 --> 00:07:21.080
So what sort of fancy stuff would you like?

00:07:21.080 --> 00:07:25.220
So one example is the black readme.

00:07:25.220 --> 00:07:30.080
So black is one of the ones that uses the same project that we're going to talk about.

00:07:30.080 --> 00:07:32.280
But so what's fancy about it?

00:07:32.280 --> 00:07:35.200
It's just got the normal standard readme stuff.

00:07:35.200 --> 00:07:41.780
But one of the stuff that has things at the bottom is it's got a changelog listed here and

00:07:41.780 --> 00:07:46.520
the authors and some other stuff, the highlights from different versions.

00:07:46.520 --> 00:07:49.420
How do you do that within a readme without copy and pasting?

00:07:49.420 --> 00:07:50.880
So that's where this comes in.

00:07:50.880 --> 00:07:56.780
So this is a project called Hatch Fancy PyPI readme.

00:07:57.340 --> 00:08:05.240
And Hinnick has used, apparently in the past, setup.py for generating for packaging.

00:08:05.240 --> 00:08:11.640
And with that was the ability to do some code while you're running setup.py.

00:08:12.100 --> 00:08:15.700
But pyproject.tomal based stuff is different, right?

00:08:15.700 --> 00:08:21.620
So if you just have a flit thing and you point it to readme, it'll just point to a static readme.

00:08:21.620 --> 00:08:23.680
Or you'd have generators outside of this.

00:08:23.680 --> 00:08:32.360
But what this tool does is it has, apparently there's a hook system within Hatch that allowed this functionality.

00:08:32.560 --> 00:08:40.000
So there's configuration that you can do things like, and there's configuration on this readme to tell you how to use it and everything.

00:08:40.000 --> 00:08:43.660
But the things you'd want to use with it is these little fragments.

00:08:43.960 --> 00:08:46.400
So you can add a text fragment, of course.

00:08:46.400 --> 00:08:50.940
But, you know, that doesn't really help you much because you already have to write it down in your readme.

00:08:51.860 --> 00:09:04.000
But this is actually what this is, is this will be part of your, in conjunction with pyproject.tomal and your readme to work together, which is cool.

00:09:04.000 --> 00:09:09.140
So you can define some of the text fragments in your pyproject.tomal and have them show up in your readme.

00:09:09.140 --> 00:09:10.880
You can also do files.

00:09:10.880 --> 00:09:14.020
You can say, hey, I actually want the author's file in there also.

00:09:14.020 --> 00:09:19.220
And the files have a start after and start before and stuff.

00:09:19.220 --> 00:09:25.420
So some of the files that you include in there might have some boring stuff that you don't want to include in there, and you can cut that out.

00:09:25.420 --> 00:09:32.000
So this is really exciting to be able to, because I've switched like all my project to pyproject.tomal-based projects.

00:09:32.000 --> 00:09:34.860
But I do want some neat stuff in my readme.

00:09:34.860 --> 00:09:37.060
So I'll start using this as well.

00:09:37.060 --> 00:09:38.240
Okay, so you have files.

00:09:38.240 --> 00:09:42.700
You also have pattern matching, which is neat with files.

00:09:42.700 --> 00:09:45.580
But then down below, substitutions.

00:09:45.580 --> 00:09:46.100
Substitutions.

00:09:46.100 --> 00:09:51.160
So you've got like search and replace patterns that use regular expression substitutions.

00:09:51.160 --> 00:09:53.840
And then I think that's all.

00:09:53.840 --> 00:09:54.880
I'm not missing anything.

00:09:54.880 --> 00:09:57.960
But some pretty neat things that you can do within your readme.

00:09:57.960 --> 00:10:00.400
Yeah, and you've got a CLI interface.

00:10:00.400 --> 00:10:01.200
It's lovely.

00:10:01.200 --> 00:10:07.300
It's almost like Jinja, Chameleon, some templating language for your readme.

00:10:07.840 --> 00:10:15.020
So here's the thing that I am always confused about is, do you, you know, there's the readme and then there's the read the docs, right?

00:10:15.020 --> 00:10:19.360
And sometimes when I go to a package, I'm like, which one should I go?

00:10:19.360 --> 00:10:23.100
Like, should I start in the readme and then see if there are more read the docs?

00:10:23.100 --> 00:10:25.420
Like, so this blurs the line even more.

00:10:25.420 --> 00:10:27.860
It's like, should it just all be in the readme?

00:10:28.120 --> 00:10:31.500
When do you go to, you know, the external docs?

00:10:31.500 --> 00:10:32.860
Well, okay.

00:10:32.860 --> 00:10:34.960
So I've struggled with this on a couple of things.

00:10:34.960 --> 00:10:37.160
And I've got one that's like on the line.

00:10:37.160 --> 00:10:38.500
It's got a ton of functionality.

00:10:38.500 --> 00:10:41.660
And so maybe it ought to be a read the docs thing.

00:10:41.660 --> 00:10:43.700
But some people have really big readmes.

00:10:43.700 --> 00:10:46.000
So which should you go to?

00:10:46.000 --> 00:10:47.060
Well, the package.

00:10:47.060 --> 00:10:51.280
So are you talking about the package maintainer or the person learning about the package?

00:10:51.280 --> 00:10:52.040
Where should they go?

00:10:52.040 --> 00:10:55.120
Well, I think you have both those questions, right?

00:10:55.120 --> 00:10:57.800
Because one thing is I can't decide where should I link to.

00:10:57.800 --> 00:11:01.280
Should I link to the PyPy page or should I link to their read the docs page, right?

00:11:01.280 --> 00:11:03.540
It's just what is the canonical documentation?

00:11:03.540 --> 00:11:10.780
And right now, I think as both a creator and a user of packages, it's not clear where to go.

00:11:10.780 --> 00:11:16.560
Well, as a user, I always try to start at the PyPI page and whatever.

00:11:16.560 --> 00:11:18.480
Hopefully there's either a homepage.

00:11:18.480 --> 00:11:21.580
It's got like Black has homepage and changelog.

00:11:21.580 --> 00:11:23.960
You can include a documentation link too.

00:11:23.960 --> 00:11:28.420
So if it's just got a homepage, it's just probably the readme.

00:11:28.420 --> 00:11:41.120
But the documentation, I think it's nice if people leave the homepage to go to their GitHub repo and add a documentation link if they've got a read the docs thing.

00:11:41.120 --> 00:11:41.820
I think so.

00:11:42.960 --> 00:11:45.360
I do like to see a lot of stuff in the readme.

00:11:45.360 --> 00:11:48.900
Because if you're already there, you don't have to go track it down.

00:11:48.900 --> 00:11:55.140
The time that I would see, Brian, maybe as if there's like a lot, a lot of different scenarios.

00:11:55.140 --> 00:12:01.240
Here's this API function and here's a tutorial and here, you know, maybe there's a lot of navigation, I guess.

00:12:01.240 --> 00:12:03.060
Maybe it makes sense for a read the docs.

00:12:03.060 --> 00:12:06.520
Or if it fits on one file, then maybe make a copy.

00:12:06.700 --> 00:12:07.100
I don't know.

00:12:07.100 --> 00:12:14.360
And I've got a lot of like tiny little pytest plugins that I'm just not going to do a read the docs documentation tree.

00:12:14.360 --> 00:12:15.680
It's just a little tool.

00:12:15.680 --> 00:12:16.840
So small tools.

00:12:16.840 --> 00:12:17.600
It's easy.

00:12:17.600 --> 00:12:20.500
It's the in-between part that it's difficult.

00:12:20.500 --> 00:12:21.760
So I don't know.

00:12:21.760 --> 00:12:23.020
Yeah, for sure.

00:12:23.020 --> 00:12:23.640
All right.

00:12:23.640 --> 00:12:24.560
I love our audience.

00:12:24.560 --> 00:12:26.340
They all have great things to add here.

00:12:26.540 --> 00:12:33.300
Henry Schreiner says, GitHub dependency graphs now support PEP 621 as of yesterday.

00:12:33.300 --> 00:12:35.380
So how's that for keeping on top of things?

00:12:35.380 --> 00:12:36.640
So perfect time to switch.

00:12:36.640 --> 00:12:38.980
If you haven't yet, nice readmes too.

00:12:38.980 --> 00:12:45.580
And then Saro says, the docs link should always be at the top of the readme.

00:12:45.580 --> 00:12:46.520
So excellent.

00:12:46.520 --> 00:12:48.280
Yeah, I like that too.

00:12:48.280 --> 00:12:49.200
Yep.

00:12:49.200 --> 00:12:51.340
And one more piece of real-time follow-up.

00:12:51.740 --> 00:12:55.180
Justin, author of Camply, is in the audience, says, yes.

00:12:55.180 --> 00:12:57.140
Wait, no, wrong one.

00:12:57.140 --> 00:12:58.300
I got out of sync there.

00:12:58.300 --> 00:12:59.780
Thanks for featuring this.

00:12:59.780 --> 00:13:01.480
You can leave it running in the background.

00:13:01.480 --> 00:13:04.180
That's where the accompanying Docker image is from.

00:13:04.180 --> 00:13:08.220
So you could just push it over to a Raspberry Pi and just let it cruise there, which is kind of cool.

00:13:08.220 --> 00:13:11.240
So just to figure out, make sure I understand this,

00:13:11.240 --> 00:13:16.300
if you close your laptop while a Docker image is running, is it going to keep?

00:13:16.300 --> 00:13:17.580
It's probably going to stop.

00:13:17.580 --> 00:13:18.240
Okay.

00:13:18.240 --> 00:13:19.700
It depends on your sleep.

00:13:19.700 --> 00:13:20.360
So that's why you want the Raspberry Pi?

00:13:20.360 --> 00:13:21.060
Yeah.

00:13:21.300 --> 00:13:22.700
Yeah, something you can just leave on.

00:13:22.700 --> 00:13:28.300
Or, you know, something, I guess you could set your laptop to still running if the clamshell

00:13:28.300 --> 00:13:29.320
bit is closed.

00:13:29.320 --> 00:13:31.260
But generally, it would close.

00:13:31.260 --> 00:13:36.300
You could even put it onto one of those little tiny Adafruit things, I would imagine.

00:13:36.300 --> 00:13:39.440
I doubt that there's anything that platform-specific.

00:13:39.440 --> 00:13:41.360
Probably just requests and stuff.

00:13:41.360 --> 00:13:43.420
Or you could have a Mac Mini running.

00:13:43.420 --> 00:13:47.120
Yes, you could definitely have a Mac Mini running, like the one I'm using right now.

00:13:47.120 --> 00:13:47.920
All right.

00:13:47.980 --> 00:13:52.600
Before we move on, let me tell you about our sponsor this week.

00:13:52.600 --> 00:13:58.160
So, as I said before, this episode is brought to you by Microsoft for Startups, Founders Hub.

00:13:58.520 --> 00:14:04.300
I'm here to tell you all about a fantastic opportunity for startup founders, especially those interested in AI.

00:14:04.300 --> 00:14:08.960
With over six figures in benefits, this program is a game changer for startups.

00:14:09.360 --> 00:14:19.780
You'll get $150,000 in Azure credits, so you can work with Pam a lot to deploy many, many things, which is the richest credit offering from any cloud provider.

00:14:19.780 --> 00:14:29.940
Founders Hub is offering a unique chance to access open AIs, APIs, as well as the new Azure open AI service, so you can easily infuse generative AI capabilities into your applications.

00:14:29.940 --> 00:14:38.380
The team at Microsoft will also provide you with one-on-one technical advice to help you with architectural plans, scalability, implementation, best practices, and security.

00:14:38.380 --> 00:14:44.080
Plus, you'll have access to the network of mentors plugged into the startup world, which we've talked about a lot.

00:14:44.080 --> 00:14:45.760
A huge asset for building your network.

00:14:45.760 --> 00:14:50.060
The best part is the program is open to everyone and has no funding requirements.

00:14:50.220 --> 00:14:55.260
Whether you're in idea phase or further along, it just takes five minutes to apply and you'll get all these benefits.

00:14:55.260 --> 00:14:57.660
So, harness the power of AI in your startup.

00:14:57.660 --> 00:14:59.580
Sign up for Microsoft for Startups, Founders Hub.

00:14:59.580 --> 00:15:03.440
Today at pythonbytes.fm/foundershub 2022.

00:15:03.440 --> 00:15:04.920
Link is in your show notes.

00:15:04.920 --> 00:15:07.540
No-brainer opportunity for startup founders, so don't miss out.

00:15:07.540 --> 00:15:08.780
And Brian, one more thing.

00:15:08.780 --> 00:15:15.680
Just to make the point about how awesome some of these open AI APIs and different things that they're offering here is,

00:15:15.680 --> 00:15:19.440
I asked that same AI to write this ad for us.

00:15:19.860 --> 00:15:22.140
So, how cool is that?

00:15:22.140 --> 00:15:28.460
If you want to do, I don't know if you've played with these things yet, but open AI is really incredible.

00:15:28.460 --> 00:15:35.460
And if you want all these credits to be able to work with it, access to AI, different APIs that maybe people don't all have,

00:15:35.460 --> 00:15:37.740
sign up at our link in the show notes.

00:15:37.740 --> 00:15:39.500
So, thanks to Microsoft for supporting the show.

00:15:39.500 --> 00:15:40.100
Nice.

00:15:40.100 --> 00:15:43.400
And thanks to open AI for writing a cool ad for us.

00:15:43.400 --> 00:15:44.280
Wow.

00:15:44.280 --> 00:15:47.340
I still don't have access to open AI and I work for Microsoft.

00:15:47.340 --> 00:15:50.380
So, I guess I just need to apply for that program.

00:15:50.380 --> 00:15:50.760
Exactly.

00:15:50.760 --> 00:15:51.320
I've been waiting.

00:15:51.320 --> 00:15:52.800
Where's your startup idea?

00:15:52.800 --> 00:15:53.620
Get in the game.

00:15:53.620 --> 00:15:54.640
All right.

00:15:54.640 --> 00:15:58.640
This next one comes to us from Pamphil.

00:15:58.640 --> 00:15:59.960
Well, wait.

00:15:59.960 --> 00:16:00.740
Oh, go ahead.

00:16:00.740 --> 00:16:02.260
Don't we have one from Pamela?

00:16:03.260 --> 00:16:04.800
How did I skip that?

00:16:04.800 --> 00:16:06.740
Yes, we absolutely have one from Pamela.

00:16:06.740 --> 00:16:07.540
Sorry.

00:16:07.540 --> 00:16:08.780
All right.

00:16:08.780 --> 00:16:09.120
Sweet.

00:16:09.120 --> 00:16:12.860
So, I'm going to talk about something new in PyDyde.

00:16:12.860 --> 00:16:15.100
I know PyDyde has been on this show before.

00:16:15.100 --> 00:16:21.580
PyDyde is Python for the browser based on WebAssembly, a port of CPython to WebAssembly.

00:16:21.940 --> 00:16:25.240
Now, the really cool thing, I've been using PyDyde for various projects for a while.

00:16:25.240 --> 00:16:31.660
But the very cool thing that happened recently is that there's now 3.11 support in the latest.

00:16:31.660 --> 00:16:34.380
So, in mains, there's 3.11 support.

00:16:34.380 --> 00:16:36.320
This was the PR for it.

00:16:36.320 --> 00:16:38.360
And so, it's not in stable yet.

00:16:38.360 --> 00:16:38.960
It's in latest.

00:16:39.100 --> 00:16:44.460
But that means you can actually, you know, try it out in their little REPL here.

00:16:44.460 --> 00:16:47.960
I can't pick up 3.11 code off of that.

00:16:47.960 --> 00:16:50.300
But you can see it says 3.11.

00:16:50.300 --> 00:16:55.680
And what they're working on right now is, let's see, they're working on some benchmarks.

00:16:55.680 --> 00:16:59.620
So, they did some benchmarks here to show, you know, there's...

00:16:59.620 --> 00:17:02.620
Because 3.11 has a lot of speed up improvements.

00:17:02.620 --> 00:17:04.980
So, they did a bunch of benchmark here.

00:17:05.100 --> 00:17:09.560
But it looks like they're also interested in other benchmarks as well.

00:17:09.560 --> 00:17:12.200
Yeah, it looks like some are getting faster though, which is really cool.

00:17:12.200 --> 00:17:12.920
Yeah.

00:17:12.920 --> 00:17:14.140
And I also...

00:17:14.140 --> 00:17:15.960
So, I did my own benchmark.

00:17:15.960 --> 00:17:17.800
I mean, I wrote a function called benchmark.

00:17:17.800 --> 00:17:19.180
So, it must be a benchmark, right?

00:17:19.180 --> 00:17:24.000
So, one thing that I use PyDyde for is recursionvisualizer.com.

00:17:24.000 --> 00:17:26.640
This is something I built when I was teaching Python at Berkeley.

00:17:26.640 --> 00:17:30.820
And we taught a lot of recursion in Python, which I know is a weird thing to teach in Python.

00:17:30.820 --> 00:17:32.060
But this is academia.

00:17:32.060 --> 00:17:33.540
So, we teach recursion in Python.

00:17:34.640 --> 00:17:40.640
So, this is a tool that uses PyDyde in order to visualize the cloud graphs.

00:17:40.640 --> 00:17:46.160
And so, you know, when you're doing recursive functions, they can take actually a long time.

00:17:46.160 --> 00:17:48.260
It's actually going to take a while.

00:17:48.260 --> 00:17:49.420
Here we go.

00:17:49.420 --> 00:17:49.960
We got it.

00:17:49.960 --> 00:17:51.040
That wasn't that bad.

00:17:51.040 --> 00:17:53.040
Oh, my gosh.

00:17:53.040 --> 00:17:53.800
It's a bit long.

00:17:53.800 --> 00:17:55.220
Here we go.

00:17:55.220 --> 00:17:55.480
It's amazing.

00:17:55.480 --> 00:18:08.460
So, I enabled 3.11 for this yesterday in my local branch and did my own little benchmarking.

00:18:08.860 --> 00:18:17.020
And it's like 15% faster, which is actually relevant for recursive functions because some of the recursive functions that you run here can actually take a long time.

00:18:17.020 --> 00:18:19.840
All you have to do is increase this parameter a little bit more.

00:18:19.840 --> 00:18:21.960
And it really takes a while.

00:18:21.960 --> 00:18:28.220
So, it is definitely faster for at least this use case here.

00:18:28.940 --> 00:18:30.140
So, that's cool.

00:18:30.140 --> 00:18:33.240
It's not yet in the stable.

00:18:33.240 --> 00:18:34.920
So, you can see what they're working on here.

00:18:34.920 --> 00:18:38.140
It should be in the next release of PyDyde 2.23.

00:18:38.140 --> 00:18:39.400
They're working on that.

00:18:40.100 --> 00:18:44.200
So, I also tried it out in my other tool that uses PyDyde.

00:18:44.200 --> 00:18:46.520
So, this is disthis.com.

00:18:46.520 --> 00:18:53.980
So, this is a way to disassemble Python code in the browser because I love the dis module and I want everybody else to love it too.

00:18:53.980 --> 00:18:56.140
So, disthis.com.

00:18:56.660 --> 00:19:11.900
And the thing that I was able to do with this because of 3.11 is that 3.11 has the specializing adaptive interpreter, which actually replaces certain opcodes with other opcodes when it sees that it's hot code.

00:19:11.900 --> 00:19:18.900
So, some code has been run, you know, at least like eight times and it's doing some particular operation that it can optimize.

00:19:18.900 --> 00:19:20.680
It actually replaces the bytecode.

00:19:20.680 --> 00:19:31.580
So, we can compare this to this and you see that when we have the adaptive interpreter, it's using different opcodes than it used before.

00:19:31.580 --> 00:19:33.660
And it's also got this cache here.

00:19:33.660 --> 00:19:43.100
So, this is cool that now you can actually see 3.11 and see the difference in how 3.11 can work versus 3.10.

00:19:43.100 --> 00:19:44.940
So, yeah, I thought this was really fun.

00:19:44.940 --> 00:19:46.160
This is amazing.

00:19:46.160 --> 00:19:50.220
And your visualizer for the recursion is really cool.

00:19:50.220 --> 00:19:50.860
Yeah.

00:19:50.860 --> 00:19:51.000
Yeah.

00:19:51.000 --> 00:19:52.580
Yeah.

00:19:52.580 --> 00:19:53.240
That's really cool.

00:19:53.240 --> 00:19:57.280
So, this one, this disthis and, you know, props for a good naming there.

00:19:57.280 --> 00:19:57.820
That's funny.

00:19:57.820 --> 00:20:03.520
But, wow, you even get the adaptive interpreter in Pyodide.

00:20:03.520 --> 00:20:04.460
Yeah.

00:20:04.460 --> 00:20:05.060
Yeah.

00:20:05.060 --> 00:20:10.740
So, in order to do this, so I put this together yesterday since I wanted, you know, something cool to show.

00:20:10.900 --> 00:20:22.360
So, to do, if you want to have the, if you want to have the latest Pyodide, if you want to try it out, if you're like me and for some reason have a huge number of Pyodide projects.

00:20:23.180 --> 00:20:24.200
I'm sure you all are.

00:20:24.200 --> 00:20:26.740
You just have to do slash dev, right?

00:20:26.740 --> 00:20:28.800
So, instead of a hard version number.

00:20:28.800 --> 00:20:31.780
And, of course, you shouldn't do this if you're using Pyodide for something production.

00:20:31.780 --> 00:20:34.400
But I don't know who's using Pyodide for something production.

00:20:34.400 --> 00:20:39.360
Because, to me, Pyodide is all about a great way for building educational tools in the browser.

00:20:39.620 --> 00:20:42.120
I have no desire to replace JavaScript with Python.

00:20:42.120 --> 00:20:45.860
I think you should use JavaScript if that's, you know, just trying to make it interactive site.

00:20:45.860 --> 00:20:51.400
But for making educational Python tools in the browser, Pyodide is not, it's so good, right?

00:20:51.400 --> 00:20:53.540
We don't have to run a sandbox server.

00:20:53.540 --> 00:21:00.400
So, if you want to try out 3.11, you just do slash dev instead of a hard version number.

00:21:00.400 --> 00:21:01.060
Nice.

00:21:01.060 --> 00:21:01.620
Yeah.

00:21:01.620 --> 00:21:03.120
This is very exciting stuff.

00:21:03.120 --> 00:21:04.900
What are your thoughts on PyScript?

00:21:04.900 --> 00:21:06.160
Did you play with that, Annie?

00:21:06.160 --> 00:21:06.740
Right.

00:21:06.740 --> 00:21:11.400
So, I think PyScript is exactly what I don't want, which is trying to replace JavaScript, right?

00:21:11.400 --> 00:21:13.620
As far as I understand, I haven't played with it.

00:21:13.620 --> 00:21:13.940
Yeah.

00:21:13.940 --> 00:21:15.540
I think it might be.

00:21:15.540 --> 00:21:21.360
Although, I think also it may offer some interesting alternatives, right?

00:21:21.360 --> 00:21:29.380
Like, for example, if you've got a progressive web app or you've got an Electron.js thing and you want to write Python more locally.

00:21:29.380 --> 00:21:33.380
You know, I think some of these are kind of interesting options.

00:21:33.380 --> 00:21:33.840
Yeah.

00:21:33.840 --> 00:21:42.180
So, for educational tools, for dev tools, but we really need, I mean, we already, even with JavaScript, we're making websites that are not very performant, even with JavaScript.

00:21:42.180 --> 00:21:45.200
And when you bring in these Pyodide, Pyodide is huge.

00:21:45.200 --> 00:21:46.260
It's a big old bundle.

00:21:46.260 --> 00:21:52.000
You shouldn't be like this YOLO downloading Python, downloading Python into your webpage, right?

00:21:52.000 --> 00:21:53.240
It's definitely too big for that.

00:21:53.240 --> 00:21:53.800
That's for sure.

00:21:54.280 --> 00:21:54.460
All right.

00:21:54.460 --> 00:21:56.420
Also, I'm super impressed.

00:21:56.420 --> 00:22:00.740
A lot of our guests will say, I found this cool thing and it was really neat.

00:22:00.740 --> 00:22:05.100
But you're like, oh, I wanted to create this amazing website to demonstrate some stuff of a new feature.

00:22:05.100 --> 00:22:07.660
So, well done on Disqus and other things.

00:22:07.660 --> 00:22:08.500
That's awesome.

00:22:08.500 --> 00:22:09.180
Cool examples.

00:22:09.180 --> 00:22:09.660
Yeah.

00:22:09.660 --> 00:22:10.280
All right.

00:22:10.280 --> 00:22:11.280
Yeah, very cool.

00:22:11.280 --> 00:22:14.580
We'll definitely put those links in the show notes for people to go check out.

00:22:14.580 --> 00:22:15.760
All right, Brian.

00:22:15.760 --> 00:22:17.300
Now, should I go?

00:22:17.300 --> 00:22:18.320
Now it's your turn.

00:22:18.320 --> 00:22:22.300
I can't believe I almost skipped all this amazing stuff.

00:22:22.300 --> 00:22:22.600
All right.

00:22:22.600 --> 00:22:28.520
So, going from really fun to slightly less fun, how about we talk about European law?

00:22:28.520 --> 00:22:29.100
Is that good?

00:22:29.100 --> 00:22:30.420
Sure.

00:22:30.420 --> 00:22:31.720
That sounds exciting.

00:22:31.720 --> 00:22:32.380
Yeah.

00:22:32.380 --> 00:22:36.440
There's this, what is it called?

00:22:36.440 --> 00:22:38.360
Let me pull up my notes here.

00:22:38.360 --> 00:22:57.520
There's the Cyber Resilience Act, the CRA, which is a proposal to hold, I think the most important part is to hold companies that write and ship software liable for knowingly being really negligent about shipping vulnerable software.

00:22:57.520 --> 00:22:59.640
So, for example, you sell a router.

00:22:59.640 --> 00:23:02.840
It's like some cheap knockoff router.

00:23:02.840 --> 00:23:06.080
You support it with updates maybe once, maybe never.

00:23:06.080 --> 00:23:12.800
It has some huge vulnerability that people take over your home network if they run it, you know, RCE, remote code execution, really, really bad.

00:23:12.800 --> 00:23:15.600
You just don't bother to fix it because it's not worth it, right?

00:23:15.600 --> 00:23:17.040
We don't want to worry about that.

00:23:17.040 --> 00:23:26.960
And I think that's the idea of this is to say, companies that do that, no, they can't sell us a device we put in our house or we put software systems that we put into our hospitals.

00:23:27.120 --> 00:23:30.640
And just don't care about fixing them from a security perspective, right?

00:23:30.640 --> 00:23:33.140
Not from a not working so well perspective.

00:23:33.140 --> 00:23:42.200
However, the concern that Pamphil Roy pointed out and sent this over, and that's why I'm talking about it, is there's a concern that that also applies to open source.

00:23:42.200 --> 00:23:49.340
So, if I made some open source project, somebody adopted it, there was some vulnerability in it.

00:23:49.480 --> 00:23:57.180
Am I now facing, you know, fines and punishment from the European Union because I didn't patch my silly little program?

00:23:57.500 --> 00:24:00.800
So, there's this organization called the Open Source Initiative.

00:24:00.800 --> 00:24:04.320
And they, let me pull up my little heights here.

00:24:04.320 --> 00:24:12.460
It says, this Cyber Resiliency Act is an interesting and important proposal for European law that tries to drive safety and integrity for software.

00:24:13.020 --> 00:24:24.920
The proposal includes a requirement for self-certification of suppliers of software to attest that they conform to it for security, privacy, and the lack of CVEs, critical vulnerability events.

00:24:25.260 --> 00:24:30.620
However, the European Commission has framed an exception for open source.

00:24:30.620 --> 00:24:35.900
But they say, we've been doing this for a long time, drawing on two decades of experience.

00:24:35.900 --> 00:24:40.640
We can clearly see the current text will cause extensive problems for open source.

00:24:41.040 --> 00:24:49.980
Since the goal is to avoid harming open source software, we really need to make sure that certain wording of this basically gets replaced.

00:24:49.980 --> 00:24:59.180
So, the thing I'm linking to is the feedback from the open source initiative around this project submitted by Simon Phillips.

00:24:59.180 --> 00:25:02.680
So, people can check it out and see what they think.

00:25:02.920 --> 00:25:08.300
But there's a lot of things out there that are well-intentioned that have unintended consequences.

00:25:08.300 --> 00:25:16.020
And I'd hate to see open source get squashed because, you know, people are afraid of the security liability of it basically.

00:25:16.020 --> 00:25:29.680
Is this related to that lawsuit against the crypto open source authors where they're trying to get lots of money from them, claiming that they should be able to recover their tokens?

00:25:29.680 --> 00:25:31.060
Interesting.

00:25:31.060 --> 00:25:32.960
It might have been inspired.

00:25:32.960 --> 00:25:40.340
I think it's more of a general, kind of like the GDPR, a general law proposed in the EU.

00:25:40.340 --> 00:25:41.280
Yeah.

00:25:41.280 --> 00:25:42.660
Pretty interesting.

00:25:42.660 --> 00:25:44.680
There's a lot of stuff up in the air.

00:25:44.680 --> 00:25:48.200
We've got, you know, the GitHub co-pilot lawsuit.

00:25:48.200 --> 00:25:53.260
And we've got the stable diffusion lawsuit with Getty.

00:25:53.260 --> 00:25:54.760
You've got this kind of stuff.

00:25:54.760 --> 00:26:00.760
In the U.S., everyone seems bent on destroying Section 230, which is the protection.

00:26:00.760 --> 00:26:03.460
The protection to allow people to post their own stuff.

00:26:03.460 --> 00:26:06.140
If you moderate it, it's, we'll see where it goes.

00:26:06.140 --> 00:26:09.760
I have no idea what's going to happen with these things, but they're kind of, a lot of stuff's up in the air.

00:26:09.760 --> 00:26:10.720
And here's one more bit.

00:26:10.720 --> 00:26:11.520
Yeah.

00:26:11.520 --> 00:26:12.020
All right.

00:26:12.020 --> 00:26:13.380
Brian, over to you.

00:26:15.620 --> 00:26:16.000
Okay.

00:26:16.000 --> 00:26:18.180
So, that was deep.

00:26:18.180 --> 00:26:19.180
I know.

00:26:19.180 --> 00:26:23.400
So, I told you we were going from a really fun thing that Pamela did, like, oh, here's some law.

00:26:23.400 --> 00:26:25.660
Well, let's go to something really simple.

00:26:25.660 --> 00:26:28.940
Single quotes or double quotes on your strings.

00:26:28.940 --> 00:26:30.020
What?

00:26:30.360 --> 00:26:32.760
So, let's do a quick poll here.

00:26:32.760 --> 00:26:34.200
Pamela, you got a preference?

00:26:34.200 --> 00:26:41.380
I had to figure this out a couple days ago because I've been trying to make the Azure samples more Pythonic and by running black.

00:26:41.380 --> 00:26:45.020
But black changes all the, what does it change?

00:26:45.020 --> 00:26:46.260
I don't even know.

00:26:46.260 --> 00:26:46.420
I think it's single to double, right?

00:26:46.420 --> 00:26:47.460
Single to double.

00:26:47.560 --> 00:26:48.480
I'm not totally sure.

00:26:48.480 --> 00:26:51.160
It changes all the single to double, but it's such a big change.

00:26:51.160 --> 00:26:52.420
I'm like, it's so arbitrary.

00:26:52.420 --> 00:26:53.040
It doesn't matter.

00:26:53.040 --> 00:26:54.960
So, I undid that change.

00:26:54.960 --> 00:26:59.320
Luckily, there's a black option that you can do, which is, like, ignore string normalization.

00:26:59.320 --> 00:27:01.340
So, I now run it with that.

00:27:01.340 --> 00:27:09.260
Because I don't have, I think the only reason I would tend to do single quotes is that in case I was embedding HTML, I really want double quotes in HTML.

00:27:09.260 --> 00:27:12.660
Of course, that means I'm a bad person that's embedding HTML in my Python.

00:27:12.660 --> 00:27:13.580
So, shh, shh.

00:27:13.580 --> 00:27:15.900
There's other reasons, too.

00:27:17.120 --> 00:27:20.680
Well, similar, okay, Michael, do you have a preference?

00:27:20.680 --> 00:27:26.000
I think I prefer single quotes because it's one fewer keys to press on the keyboard.

00:27:26.000 --> 00:27:26.460
Yeah?

00:27:26.460 --> 00:27:28.440
Oh, yeah, you don't have to do shift.

00:27:28.440 --> 00:27:37.780
Given that I have, excuse me, that I have RSI issues and I got to be careful of and I have my super cool Microsoft ergonomic keyboard that makes a massive difference.

00:27:37.780 --> 00:27:43.360
But I still always am thinking about what can I do to, like, type less, do less with my hands and accomplish the same thing.

00:27:43.360 --> 00:27:44.560
But I have an exception.

00:27:45.060 --> 00:27:47.500
And it's similar to Pamela's but not exactly the same.

00:27:47.500 --> 00:27:51.260
If I'm doing anything where I want to put a quote.

00:27:51.260 --> 00:27:56.580
So, if I have to say, it's the second day of the week, then I want to put an apostrophe for the its.

00:27:56.580 --> 00:27:57.980
And I don't want to backslash that.

00:27:57.980 --> 00:28:02.140
So, I put double quotes for the string so that I don't have to escape the single quote.

00:28:02.140 --> 00:28:05.260
But if I was using double quotes in the string, then I would put single quotes.

00:28:05.440 --> 00:28:11.580
So, if I'm using one that I'll use inside the string, I'll use the other so I don't have to use escape characters.

00:28:11.580 --> 00:28:19.720
So, that's like the argument that Black has for why they chose the double quotes, I think, is because of the apostrophes.

00:28:20.720 --> 00:28:24.380
But I'm not really writing a lot of prose within.

00:28:24.380 --> 00:28:29.200
If I'm writing a lot of prose, it's a triple quoted string and it doesn't matter.

00:28:29.200 --> 00:28:30.280
Usually.

00:28:30.280 --> 00:28:31.920
Because I'm doing a block thing.

00:28:31.920 --> 00:28:36.020
But, so this article is a single or double quotes in Python.

00:28:36.480 --> 00:28:44.720
And this is coming from somebody that came from R and came to Python and similarly wanted to make sure they were doing things Pythonic-like.

00:28:44.720 --> 00:28:49.640
And they ran across people using Black and, you know, what to do about that.

00:28:49.640 --> 00:28:51.300
So, they looked into it a little bit more.

00:28:51.300 --> 00:28:54.520
And, like, you know, what is, what's Pep8 say?

00:28:54.520 --> 00:28:57.360
Well, Pep8 doesn't say anything about this.

00:28:57.940 --> 00:29:14.840
And I don't think this article goes into it, but the other thing, not just Pep8, but if you try out Python itself, the REPL, if you define a string in the REPL and then, like, X equals hi there, and then say what's the value of X, the REPL uses single quotes.

00:29:14.840 --> 00:29:19.220
So, that seems Pythonic to me unless we're saying the REPL is non-Pythonic.

00:29:19.220 --> 00:29:24.840
So, the real answer in this article is it's up to you.

00:29:25.180 --> 00:29:28.540
But it kind of isn't because people use Black in their projects.

00:29:28.540 --> 00:29:33.900
And there's a lot of people that are Black fanatics and nothing against them.

00:29:33.900 --> 00:29:35.100
I'm kind of one of them as well.

00:29:35.100 --> 00:29:39.360
So, me personally, I am kind of a mix.

00:29:39.360 --> 00:29:48.260
So, I use Black on almost all projects and I use, but I just type it in as single quotes and just let Black fix it for me.

00:29:48.260 --> 00:29:54.360
And so, the RSI is solved and Black's happy.

00:29:54.360 --> 00:29:58.080
But mostly, it's just I don't want to make that decision on a lot of projects.

00:29:58.080 --> 00:30:06.460
But there are some projects that there's a lot of quotes in there and it really, or the tradition, or there's a ton of code already there.

00:30:06.460 --> 00:30:11.600
And so, I wanted to point out that this, I guess, is a public service announcement.

00:30:11.600 --> 00:30:19.860
If you're not really into Black or just this part of it, just Black is a great idea, but I just don't want to go with double-quoted strings.

00:30:20.220 --> 00:30:20.720
There's blue.

00:30:20.720 --> 00:30:23.180
So, everybody, just remember there's blues around.

00:30:23.180 --> 00:30:27.800
Blue is just like Black, but there's three primary differences.

00:30:27.800 --> 00:30:33.060
The single quote, it defaults to single quotes instead of double quotes.

00:30:33.060 --> 00:30:45.080
So, for projects where it really makes sense to use most of the time single quotes, and I have several that we're sending strings to other APIs, and it's just tradition to use.

00:30:45.080 --> 00:30:49.860
There's other parameters inside that use double quotes, and they can't be single quotes inside.

00:30:50.080 --> 00:30:54.780
So, there's projects I use blue on that for that.

00:30:54.780 --> 00:31:02.460
The other thing is black defaults to the line length of 88 characters, I think, which is a little weird.

00:31:02.460 --> 00:31:05.840
I know there's logic around it, but it's still a little weird.

00:31:06.400 --> 00:31:13.420
And if you're going with Pep8s or the traditional 79, I don't think Pep8s specifies 79, but a lot of people use 79.

00:31:13.420 --> 00:31:15.260
So, blue defaults to 79.

00:31:15.260 --> 00:31:20.240
And the other thing that I like is it preserves white space around hash marks.

00:31:20.440 --> 00:31:31.400
So, if you've got comments along the right side of your code, like in multi-lines, and they're lined up by the hash marks, black will strip that out and says, ah, you only need two spaces there.

00:31:31.400 --> 00:31:33.920
And blue says, you can align over there.

00:31:33.920 --> 00:31:34.620
That's fine.

00:31:34.620 --> 00:31:37.240
So, those are the three differences.

00:31:37.240 --> 00:31:38.180
So, blue is pretty cool.

00:31:38.180 --> 00:31:38.880
I like it.

00:31:38.880 --> 00:31:39.980
Yeah.

00:31:39.980 --> 00:31:42.020
Pamela, use blue, black.

00:31:42.020 --> 00:31:43.920
Yeah.

00:31:43.920 --> 00:31:45.200
Oh, my gosh.

00:31:45.200 --> 00:31:45.920
There's too many options.

00:31:45.920 --> 00:31:52.600
I am waiting for rough to implement formatting, and then I will have only one tool that I need to use for everything.

00:31:52.600 --> 00:31:55.720
Because rough now supports eyesore and pi upgrade.

00:31:55.720 --> 00:31:57.160
So, we're just waiting.

00:31:57.160 --> 00:31:59.740
And Charlie says he's working on formatting.

00:31:59.740 --> 00:32:01.820
So, I'll just do whatever rough does.

00:32:01.820 --> 00:32:02.860
Rough is awesome.

00:32:02.860 --> 00:32:03.460
Yeah.

00:32:03.460 --> 00:32:04.320
Rough is really cool.

00:32:04.320 --> 00:32:10.040
Some interesting angles from the audience I think we're throwing out here.

00:32:10.040 --> 00:32:14.280
However, if you want to fix this, if you think black should use single quotes, just do a PR.

00:32:14.280 --> 00:32:15.280
I'm sure they'll accept it.

00:32:15.560 --> 00:32:20.240
I hear a thing like, no, we've decided.

00:32:20.240 --> 00:32:26.960
Kim says, if you write both C and Python, you'll learn to stick with double quotes, or you'll wonder why C doesn't work.

00:32:26.960 --> 00:32:28.620
And, yeah.

00:32:28.620 --> 00:32:31.080
So, basically, David Poole says the same thing.

00:32:31.080 --> 00:32:38.280
Like, if you're working in a language that treats or doesn't support single quotes for strings, like, you might want to.

00:32:38.280 --> 00:32:39.840
It's not the only thing.

00:32:39.840 --> 00:32:43.140
I keep trying to write print Fs in my Python code.

00:32:43.140 --> 00:32:44.480
You do?

00:32:44.620 --> 00:32:44.700
Wow.

00:32:44.700 --> 00:32:45.320
You're so old school.

00:32:45.320 --> 00:32:47.600
I use C out less than, less than.

00:32:47.600 --> 00:32:51.780
For my C++ style there.

00:32:51.780 --> 00:32:52.740
All right.

00:32:52.740 --> 00:32:52.900
Yep.

00:32:52.900 --> 00:32:53.940
All right.

00:32:53.940 --> 00:32:55.500
So, who we got next?

00:32:55.500 --> 00:32:56.600
Pamela.

00:32:56.600 --> 00:32:57.360
Pamela.

00:32:57.360 --> 00:33:02.640
This weekend, I decided that my personal website is overengineered.

00:33:02.900 --> 00:33:05.900
So, my personal website is PamelaFox.org.

00:33:05.900 --> 00:33:08.380
And it's super overengineered.

00:33:08.380 --> 00:33:11.000
So, right now, it is a Docker.

00:33:11.000 --> 00:33:12.160
So, it's containerized.

00:33:12.160 --> 00:33:19.100
It's a Flask app running inside a Docker container on Azure container apps with a CDN in front.

00:33:21.100 --> 00:33:27.560
And it pulls the data from a Google spreadsheet, an authenticated Google spreadsheet.

00:33:27.560 --> 00:33:30.520
So, all this data is actually from a Google spreadsheet.

00:33:30.520 --> 00:33:31.360
That's cool.

00:33:31.800 --> 00:33:33.420
So, it's a little overengineered.

00:33:33.420 --> 00:33:37.700
And part of the reason it's overengineered is because I ported it from App Engine, Python 2.7.

00:33:37.700 --> 00:33:38.880
So, like old school App Engine.

00:33:38.880 --> 00:33:40.160
And I was trying to port it to Azure.

00:33:40.160 --> 00:33:42.700
And so, I was using Memcache before.

00:33:42.700 --> 00:33:43.280
And I was trying.

00:33:43.280 --> 00:33:44.740
So, that's why I put a CDN in front.

00:33:44.800 --> 00:33:48.660
So, anyway, I realized, you know, it's not that fancy of a website.

00:33:48.660 --> 00:33:52.200
And the data only updates like once a month or something, right?

00:33:52.200 --> 00:33:57.780
So, why do I have this whole Flask app that's just running all the time using up cloud resources?

00:33:57.780 --> 00:33:59.820
So, I wanted to be less wasteful.

00:33:59.820 --> 00:34:05.300
And I also wanted to try out static web apps because I feel like everybody's talking about that all the time, at least around me.

00:34:05.300 --> 00:34:08.840
So, I was like, okay, how could I make this into a static web app?

00:34:08.840 --> 00:34:13.660
And people have recommended various things in Python like Pelican and Lector.

00:34:13.660 --> 00:34:16.420
But I already had this Flask app.

00:34:16.420 --> 00:34:18.960
So, I was like, there has to be an easy way to do this for Flask.

00:34:18.960 --> 00:34:21.800
So, I found this frozen Flask.

00:34:21.800 --> 00:34:26.360
And it takes a Flask application and turns into a set of static files.

00:34:26.360 --> 00:34:29.020
So, you just put in this code here.

00:34:29.020 --> 00:34:30.580
And then you just run this.

00:34:30.580 --> 00:34:34.880
And it'll create a folder and put the HTML files in there.

00:34:34.960 --> 00:34:42.220
And it just does it by looking at the routes and then looking at all the URL for and then recursively following URL for until it thinks it gets it all.

00:34:42.220 --> 00:34:44.180
And then you can deploy it.

00:34:44.180 --> 00:34:47.920
So, you could deploy to whatever static web apps.

00:34:47.920 --> 00:34:48.860
So, I deployed to Azure.

00:34:48.860 --> 00:34:54.160
But you could also probably deploy to Netlify or wherever the cool kids deploy their static web apps.

00:34:54.160 --> 00:34:55.320
GitHub Pages, Netlify.

00:34:55.320 --> 00:34:55.660
Yeah.

00:34:55.660 --> 00:34:58.720
So, if you do GitHub Pages, then you do have to check it in, right?

00:34:58.720 --> 00:35:01.340
So, that's the only thing is if you did GitHub Pages, you'd have to check it in.

00:35:01.340 --> 00:35:04.640
So, now I see one of the advantages of using something other than GitHub Pages.

00:35:04.640 --> 00:35:08.740
Because I usually use like Recursion Visualizer, Dish This, they're all GitHub Pages.

00:35:08.740 --> 00:35:14.340
But I wanted to see, oh, what's it like when you're actually not just using GitHub Pages for everything?

00:35:14.340 --> 00:35:17.720
So, I thought this was cool.

00:35:17.720 --> 00:35:20.100
And it's not a recent thing.

00:35:20.180 --> 00:35:26.220
But the thing that's relevant is that it recently lost its maintainer.

00:35:26.220 --> 00:35:33.620
So, in December, there was this pull request where the current maintainer, the most recent maintainer, stepped down.

00:35:33.620 --> 00:35:36.240
So, it currently has no maintainers.

00:35:36.240 --> 00:35:38.340
So, that makes me sad.

00:35:38.340 --> 00:35:42.160
And maybe somebody here to maintain it.

00:35:42.560 --> 00:35:44.780
Because to me, it was a very useful project.

00:35:44.780 --> 00:35:47.000
Because I was able to, here's the pull request, right?

00:35:47.000 --> 00:35:50.220
And the pull request does way more than I actually had to change.

00:35:50.220 --> 00:35:55.640
But, you know, I was able to do this freeze and then, you know, set up some infrastructure.

00:35:55.640 --> 00:35:58.580
And boom, I've got a static website.

00:35:58.780 --> 00:36:04.420
And I didn't have to do a big old port to mark down and Pelican and, you know, all sorts of things.

00:36:04.420 --> 00:36:06.480
So, I think it's a cool project.

00:36:06.480 --> 00:36:09.660
It could use a little love today on Valentine's Day.

00:36:09.660 --> 00:36:11.020
Some maintainer love.

00:36:11.020 --> 00:36:14.640
So, that's what I wanted to show it.

00:36:14.640 --> 00:36:21.080
So, I like Kim's comment saying, surely personal websites are supposed to be over-engineered.

00:36:21.080 --> 00:36:25.520
It's how you learn what not to do in your employer's production environment.

00:36:25.520 --> 00:36:27.100
Yeah.

00:36:27.100 --> 00:36:27.940
No, I know.

00:36:28.220 --> 00:36:30.380
And so, you know, I'm glad I over-engineered it.

00:36:30.380 --> 00:36:31.420
But then I saw the bill.

00:36:31.420 --> 00:36:35.980
I was like, I really do not need to be paying this much for my personal website.

00:36:35.980 --> 00:36:37.620
So, I did learn.

00:36:37.620 --> 00:36:38.160
Yeah.

00:36:38.160 --> 00:36:38.720
Thank you, Kim.

00:36:38.720 --> 00:36:39.400
Yeah.

00:36:39.400 --> 00:36:42.560
So, my personal stuff's on Netlify.

00:36:42.560 --> 00:36:43.700
It's a Hugo.

00:36:43.700 --> 00:36:45.840
Running Hugo as a generator.

00:36:45.840 --> 00:36:47.760
And then running on Netlify.

00:36:47.760 --> 00:36:49.160
And it's all free.

00:36:49.160 --> 00:36:50.240
So, I like that.

00:36:50.240 --> 00:36:51.660
But I like the work.

00:36:51.660 --> 00:36:52.920
It's mostly the workflow.

00:36:52.920 --> 00:36:55.300
So, the workflow of like, I want to write something new.

00:36:55.300 --> 00:36:56.980
What does that workflow look like?

00:36:57.040 --> 00:37:00.760
And right now, it's write a markdown file and commit it and push it.

00:37:00.760 --> 00:37:01.240
And that's it.

00:37:01.240 --> 00:37:02.880
So, I like that.

00:37:02.880 --> 00:37:03.580
Yeah.

00:37:03.580 --> 00:37:05.700
For me, it's I update my Google spreadsheet.

00:37:05.700 --> 00:37:08.480
I'm debating I might move it to a JSON file.

00:37:08.480 --> 00:37:13.580
Because, you know, then I could have like a CI that just makes sure the JSON is well formatted.

00:37:13.580 --> 00:37:14.740
Maybe something like that.

00:37:15.200 --> 00:37:17.600
But I'm kind of a freak for spreadsheets.

00:37:17.600 --> 00:37:20.020
So, I've been using a Google spreadsheet for 15 years.

00:37:20.020 --> 00:37:21.700
Spreadsheets for website content?

00:37:21.700 --> 00:37:23.020
Actually, I love it.

00:37:23.020 --> 00:37:24.320
It's so amazing.

00:37:24.320 --> 00:37:28.780
You've got to have overflow wrap, though, on some of those columns, I'd imagine.

00:37:29.480 --> 00:37:30.840
In the spreadsheet, right?

00:37:30.840 --> 00:37:32.160
Yeah.

00:37:32.160 --> 00:37:32.520
Yeah.

00:37:32.520 --> 00:37:32.700
I know.

00:37:32.700 --> 00:37:39.520
This looks like a really cool offering or a cool library for people who, for whatever reason, have a website written in Flask.

00:37:39.520 --> 00:37:42.180
And it doesn't have to just be for a blog or a personal site.

00:37:42.180 --> 00:37:49.480
You know, it could be someone's built a Flask site for like an e-commerce type of thing or some marketing type of thing.

00:37:49.480 --> 00:37:51.780
And they realize, you know, we don't really change this.

00:37:51.780 --> 00:37:53.760
We haven't changed this in a year and a half.

00:37:53.760 --> 00:37:56.180
Why do we need to maintain servers and patch things, right?

00:37:56.180 --> 00:37:56.660
No.

00:37:56.660 --> 00:38:02.780
And this is kind of a neat project for somebody to take on as a new maintainer.

00:38:02.780 --> 00:38:03.420
Yeah.

00:38:03.420 --> 00:38:06.000
Looking to level up your open source game.

00:38:06.000 --> 00:38:07.680
How about extras?

00:38:07.680 --> 00:38:09.600
We got all of our main stuff done.

00:38:09.600 --> 00:38:11.160
Pamela, do you have extras?

00:38:11.540 --> 00:38:20.160
The extra that I was going to mention was already brought up in the chat was the fact that GitHub dependency graph now supports pyproject.toml.

00:38:20.160 --> 00:38:22.560
And I think maybe Henry brought that up.

00:38:22.560 --> 00:38:23.240
Yeah.

00:38:23.240 --> 00:38:25.340
Henry brought that up in the chat.

00:38:25.340 --> 00:38:29.100
But I was going to show, wait, where's my, okay.

00:38:29.100 --> 00:38:35.480
So I found this Python package template from Microsoft for somebody at Microsoft.

00:38:35.480 --> 00:38:43.760
So if you're starting a new Python project, this has like everything in it that's done the proper way, including the pyproject.toml.

00:38:43.760 --> 00:38:45.260
Or, okay, maybe not proper.

00:38:45.260 --> 00:38:47.740
The way that they think it could be done.

00:38:47.740 --> 00:38:58.340
So if you use this, then, you know, then the GitHub dependency graph should pick up on your dependencies.

00:38:58.500 --> 00:39:05.620
So that was my extra thing was just to talk about the pyproject.toml with the dependency support now.

00:39:05.620 --> 00:39:06.080
Okay.

00:39:06.080 --> 00:39:07.060
That's big news.

00:39:07.060 --> 00:39:07.840
Very good one.

00:39:07.840 --> 00:39:08.220
Brian?

00:39:08.220 --> 00:39:11.760
I'll have to go take a look at that and see what all I disagree with.

00:39:11.760 --> 00:39:12.760
I guess.

00:39:12.760 --> 00:39:16.280
I was just...

00:39:16.280 --> 00:39:17.100
The hemisaur structure.

00:39:17.100 --> 00:39:18.620
You're halfway there to liken it.

00:39:18.620 --> 00:39:20.460
That's good.

00:39:20.460 --> 00:39:23.840
So I just was curious what everybody thought.

00:39:23.840 --> 00:39:25.840
I don't know if this is new, but I just saw it.

00:39:25.840 --> 00:39:27.780
The pricing structure for GitHub.

00:39:27.780 --> 00:39:29.080
Is this a new thing?

00:39:29.080 --> 00:39:30.400
I don't know.

00:39:30.400 --> 00:39:36.600
So the individual user gets extra stuff for $48 a year, essentially.

00:39:36.600 --> 00:39:38.440
It's not per month.

00:39:38.440 --> 00:39:39.040
It's per year.

00:39:39.040 --> 00:39:40.260
So that doesn't seem terrible.

00:39:40.260 --> 00:39:41.480
But what do we get?

00:39:41.480 --> 00:39:44.920
So this is basically the free tier is just always...

00:39:44.920 --> 00:39:46.460
You still get everything for free.

00:39:46.460 --> 00:39:50.540
But the co-pilot is, what, $10 a month or something?

00:39:50.540 --> 00:39:53.280
So there's some extras that you can add on to other things.

00:39:55.280 --> 00:40:01.820
Before the transition or whatever, a couple years ago, I was paying for GitHub Pro so that I could have private repos.

00:40:01.820 --> 00:40:05.640
Now you can have private repos with the free one.

00:40:05.640 --> 00:40:06.560
So I switched to the free.

00:40:06.560 --> 00:40:07.720
Is there...

00:40:07.720 --> 00:40:08.620
What do you guys...

00:40:08.620 --> 00:40:10.780
Michael, do you have an opinion on this?

00:40:11.520 --> 00:40:17.420
I guess I have an opinion since I pay GitHub every month for the Talk Python organization.

00:40:17.420 --> 00:40:30.060
Because if you have an organization and you want to have people in your organization like Talk Python authors, then you have to pay to have them, which is different than an individual having private repos and things like that.

00:40:30.740 --> 00:40:38.860
One of the things that looks interesting from the team perspective is the code spaces, which is basically a server to run your code on, right?

00:40:38.860 --> 00:40:39.620
Is that right, Pamela?

00:40:39.620 --> 00:40:40.160
Yeah.

00:40:40.160 --> 00:40:41.220
But why are they...

00:40:41.220 --> 00:40:44.640
This is what I actually just opened it up to look at that particular point and expanded it.

00:40:44.640 --> 00:40:45.680
Because you can...

00:40:45.680 --> 00:40:48.240
I use GitHub Codespaces constantly on free.

00:40:48.240 --> 00:40:50.760
And you can use it on free as well.

00:40:50.840 --> 00:40:55.280
So I'm trying to understand what the distinction between the free and the team is for code spaces.

00:40:55.280 --> 00:40:57.580
Because I'm also a code spaces freak.

00:40:57.580 --> 00:41:00.940
Looks like on free you've got 15 gigabytes max.

00:41:00.940 --> 00:41:02.300
So...

00:41:02.300 --> 00:41:03.040
I don't know.

00:41:03.040 --> 00:41:05.100
You can just pay for a little bit more.

00:41:05.100 --> 00:41:05.900
I just pay.

00:41:05.900 --> 00:41:07.060
Because I go over.

00:41:07.060 --> 00:41:10.320
And more CICD.

00:41:10.320 --> 00:41:18.760
I mean, I guess I'm getting to the point where a lot of these extra things like GitHub Actions and more complex GitHub Actions.

00:41:19.060 --> 00:41:21.340
And basically, I'm doing more.

00:41:21.340 --> 00:41:24.700
If I ever hit some of these limits, I think I'd be happy with paying.

00:41:24.700 --> 00:41:25.660
Yeah.

00:41:25.660 --> 00:41:29.280
$40 a year is not the worst subscription that I pay yearly.

00:41:29.280 --> 00:41:30.380
Yeah.

00:41:30.380 --> 00:41:34.020
There's stuff I use way less and pay more for.

00:41:34.020 --> 00:41:34.660
Oh, yeah.

00:41:34.660 --> 00:41:35.200
Anyway.

00:41:35.200 --> 00:41:35.480
Okay.

00:41:35.480 --> 00:41:36.440
That was just my extra.

00:41:36.440 --> 00:41:37.460
I was just curious about that.

00:41:37.460 --> 00:41:38.160
Okay.

00:41:38.160 --> 00:41:39.960
I've got a couple as well for us.

00:41:39.960 --> 00:41:40.380
Okay.

00:41:40.380 --> 00:41:43.880
Our transcripts are way better over here now.

00:41:43.880 --> 00:41:48.980
So if people are interested in using the transcripts, which we have for every episode,

00:41:49.340 --> 00:41:54.900
not entirely unrelated to OpenAI stuff, we have way better transcripts.

00:41:54.900 --> 00:42:03.080
Like, for example, even when Brian said PyProject.toml, it got that perfectly right, which is amazing.

00:42:03.080 --> 00:42:04.560
And that means our search.

00:42:04.560 --> 00:42:05.360
We have search.

00:42:05.360 --> 00:42:06.360
That doesn't just search.

00:42:06.360 --> 00:42:09.580
You know, some people search on their site, like for podcasts and stuff.

00:42:09.580 --> 00:42:10.660
Just search as the show notes.

00:42:10.660 --> 00:42:13.140
Our search is every spoken word.

00:42:13.140 --> 00:42:13.400
Right.

00:42:13.400 --> 00:42:21.160
So if you looked for ChatGPT and PyProject, something like that, then check it out.

00:42:21.160 --> 00:42:22.480
We're also live streamed, by the way.

00:42:22.480 --> 00:42:23.300
But there it is.

00:42:23.300 --> 00:42:23.480
Right.

00:42:23.480 --> 00:42:23.900
That one.

00:42:23.900 --> 00:42:26.840
Which neither of those, I believe, were listed in the show notes whatsoever.

00:42:27.260 --> 00:42:32.220
So because we're getting much better, like, tech words in our search, in our transcripts,

00:42:32.220 --> 00:42:34.680
that means our search should be way better for people who try that out.

00:42:34.680 --> 00:42:35.080
Anyway.

00:42:35.080 --> 00:42:37.460
So how did you make the transcripts?

00:42:37.460 --> 00:42:38.180
What did you use?

00:42:39.040 --> 00:42:47.200
Some of the OpenAI API stuff over there, I got a cool Mac app that, like, plugs into that.

00:42:47.200 --> 00:42:47.720
Oh.

00:42:47.720 --> 00:42:48.820
Yeah.

00:42:48.820 --> 00:42:49.920
It's pretty.

00:42:49.920 --> 00:42:56.380
If you need something that will make your Apple Silicon Mac that normally is cold to the touch,

00:42:56.380 --> 00:42:58.460
and you put it on your lap, you're like, oh, that thing's a cold laptop.

00:42:58.460 --> 00:42:59.520
You want it like a heater?

00:42:59.520 --> 00:43:02.340
You can try to generate one of these transcripts.

00:43:02.340 --> 00:43:04.020
It'll be warm for about half an hour.

00:43:04.020 --> 00:43:05.400
All right.

00:43:05.900 --> 00:43:13.120
And similar, not the same thing, but somewhat related, is the AI chat wars, I think, are really

00:43:13.120 --> 00:43:13.640
taking off.

00:43:13.640 --> 00:43:18.800
And I watched an interview with Satya Nadella, CEO of Microsoft.

00:43:18.800 --> 00:43:20.460
He was just relishing.

00:43:20.460 --> 00:43:26.320
He was just completely sitting back and smiling and rubbing his hands like, oh, this is going

00:43:26.320 --> 00:43:29.700
to be good because, you know, Microsoft and OpenAI have that partnership.

00:43:29.700 --> 00:43:31.160
I'll leave it at that.

00:43:31.160 --> 00:43:35.120
I guess it's probably a little more complicated with partial owners and credit anyway.

00:43:35.220 --> 00:43:36.580
But they're working very closely together.

00:43:36.580 --> 00:43:42.860
And so Microsoft announces that Bing is going to have chat GDP integration as part of its

00:43:42.860 --> 00:43:43.380
results.

00:43:43.380 --> 00:43:44.540
And you can actually talk to it.

00:43:44.540 --> 00:43:47.040
And GDP4, I believe, not just the one that's out.

00:43:47.040 --> 00:43:51.840
And so as a result of that, like that day, Microsoft Bing rockets to the top of the app

00:43:51.840 --> 00:43:53.940
store after announcing chat GDP integration.

00:43:53.940 --> 00:43:56.720
Like, when was the last time you were like, oh, my God, where is Bing?

00:43:56.720 --> 00:43:57.680
I've got to get it.

00:43:57.680 --> 00:44:00.720
You know, this is just not something that has been happening lately.

00:44:00.720 --> 00:44:01.040
Right.

00:44:01.040 --> 00:44:03.100
And like, boom, overnight it switches.

00:44:03.100 --> 00:44:06.360
The converse is the same day.

00:44:06.360 --> 00:44:07.520
Maybe the next day.

00:44:07.520 --> 00:44:08.740
I think that's the same day.

00:44:08.740 --> 00:44:14.440
Google shares drop $100 billion after the company's AI chat bot flops in the door.

00:44:14.440 --> 00:44:16.320
So contrast those two things.

00:44:16.320 --> 00:44:20.600
And it's going to be an interesting next year or so in the big tech space.

00:44:20.600 --> 00:44:21.540
Yeah.

00:44:21.540 --> 00:44:28.360
So anyway, that's just put that out there as something interesting to check out.

00:44:28.360 --> 00:44:34.200
Also, I worked with the folks at JetBrains to get our students at Talk Python training a free

00:44:34.200 --> 00:44:35.920
copy of PyCharm Pro.

00:44:36.160 --> 00:44:39.560
So for folks who want that, this only works for new users.

00:44:39.560 --> 00:44:40.640
It doesn't work for renewals.

00:44:40.640 --> 00:44:45.420
But if you don't have a PyCharm Pro account already, then just visit the link.

00:44:45.420 --> 00:44:48.540
And you must be a customer at Talk Python training.

00:44:48.540 --> 00:44:49.840
That's part of the deal with JetBrains.

00:44:49.840 --> 00:44:51.020
I can't just hand them out randomly.

00:44:51.020 --> 00:44:53.680
Anyway, if you are, there's like a little statement of what it needs.

00:44:53.680 --> 00:44:57.800
But for many people, they can just check that out and get a free copy of PyCharm Pro, which

00:44:57.800 --> 00:44:58.160
is fun.

00:44:58.160 --> 00:45:03.820
And if you're not already a member, just go ahead and purchase the pytest course.

00:45:03.820 --> 00:45:04.440
Yeah, exactly.

00:45:04.440 --> 00:45:07.100
I think the pytest course, this guy named Aachen wrote it.

00:45:07.100 --> 00:45:07.580
It's pretty good.

00:45:07.580 --> 00:45:08.500
People should check that out.

00:45:08.500 --> 00:45:14.020
The mobile apps last time or time before last, I mentioned I was looking for someone to help

00:45:14.020 --> 00:45:14.800
me rewrite that.

00:45:14.800 --> 00:45:20.660
The flutterification of our mobile app story is well underway.

00:45:20.660 --> 00:45:24.840
And that's so thanks to the audience for helping get that going.

00:45:24.840 --> 00:45:25.260
Yeah.

00:45:25.260 --> 00:45:30.960
And then very last thing, Brian, is I did a Talk Python episode in the behind the scenes

00:45:30.960 --> 00:45:33.520
at the Lawrence Livermore National Laboratory with the folks.

00:45:33.520 --> 00:45:39.960
how Python was used to do the fusion ignition breakthrough that we all heard about like a month

00:45:39.960 --> 00:45:40.700
and a half ago.

00:45:40.700 --> 00:45:41.440
Wow.

00:45:41.440 --> 00:45:42.300
That was a big deal.

00:45:42.300 --> 00:45:44.160
So Python is a super important part of that.

00:45:44.160 --> 00:45:48.300
Turns out, and I interviewed Jay Solomonson.

00:45:48.300 --> 00:45:50.640
He's down at the bottom because of responsiveness.

00:45:50.640 --> 00:45:52.100
But great story.

00:45:52.100 --> 00:45:53.420
Look inside that whole thing.

00:45:53.420 --> 00:45:54.420
So people should check that out.

00:45:54.420 --> 00:45:59.580
I think it's kind of a unique story that this was in the news a lot, but not this aspect of it.

00:45:59.580 --> 00:45:59.860
Cool.

00:46:00.180 --> 00:46:00.600
All right.

00:46:00.600 --> 00:46:01.280
That's all my extras.

00:46:01.280 --> 00:46:05.980
So was the, we usually do a joke, but we forgot our joke last week.

00:46:05.980 --> 00:46:08.580
Was, was the Bing story the joke or?

00:46:08.580 --> 00:46:11.200
No, the Bing story is real.

00:46:11.200 --> 00:46:13.580
We have, we have a couple of good jokes, I believe.

00:46:13.580 --> 00:46:14.100
Yeah.

00:46:14.100 --> 00:46:14.560
Okay.

00:46:14.560 --> 00:46:16.080
Let's for some, let me pull them up here.

00:46:16.080 --> 00:46:20.280
I think you've got one as well, but let me put my stuff back on the screen.

00:46:20.280 --> 00:46:22.560
I didn't know we were supposed to have jokes.

00:46:22.560 --> 00:46:23.300
Oh no.

00:46:23.300 --> 00:46:24.560
We normally, we just have one.

00:46:24.560 --> 00:46:25.800
We just screwed up last time.

00:46:25.800 --> 00:46:28.720
So we only had a, we somehow skipped it.

00:46:28.720 --> 00:46:32.880
So this, this is one of those, you know, you go to the fast food restaurants and you'll see

00:46:32.880 --> 00:46:35.340
they've got these digital menus up on the screen.

00:46:35.340 --> 00:46:35.820
Yeah.

00:46:35.820 --> 00:46:41.800
So here we've got, there's a Mook chicken, all rights reserved little circle meal.

00:46:41.800 --> 00:46:44.440
There's a Big Mac, all rights reserved meal.

00:46:44.440 --> 00:46:47.660
There's a chicken McNuggets, 10 piece meal.

00:46:47.660 --> 00:46:49.300
But do you see what's in the middle there, Brian?

00:46:49.300 --> 00:46:49.980
Yeah.

00:46:50.980 --> 00:46:53.780
The dollar bracket title bracket.

00:46:53.780 --> 00:46:55.980
It's 1350.

00:46:55.980 --> 00:46:57.460
What is it?

00:46:57.460 --> 00:46:59.340
The dollar bracket title.

00:46:59.340 --> 00:47:00.840
It's so amazing that it's up there.

00:47:00.840 --> 00:47:04.040
I don't know if there's just supposed to be curly braces and they missed the shift or something,

00:47:04.040 --> 00:47:07.760
but the comments folks, the comments are nonstop.

00:47:07.760 --> 00:47:14.940
Some of them I can't read because, because it's, you know, not necessarily safe for work,

00:47:14.940 --> 00:47:18.360
but it's like, you know, what the blank is happening to my menu.

00:47:18.360 --> 00:47:20.280
And oh my gosh, it's so good.

00:47:21.060 --> 00:47:21.460
It's funny.

00:47:21.460 --> 00:47:22.360
Yeah.

00:47:22.360 --> 00:47:24.640
Also the pricing is really high.

00:47:24.640 --> 00:47:26.680
I don't know who pays, you know, what is that?

00:47:26.680 --> 00:47:32.600
$13 for a McNugget meal or $10 for a cheeseburger, but that's a pricey burger.

00:47:32.600 --> 00:47:35.180
I guess it's a meal includes a drink, but still whatever.

00:47:35.180 --> 00:47:35.840
That's a lot.

00:47:35.840 --> 00:47:36.280
Yeah.

00:47:36.280 --> 00:47:38.880
That's funny.

00:47:38.880 --> 00:47:39.780
Okay.

00:47:39.780 --> 00:47:44.920
Well, I have something that I was laughing like so hard at, and I'm not going to go through

00:47:44.920 --> 00:47:50.240
all of it, but it's, it's 59 hilariously infuriating examples of user interfaces.

00:47:50.240 --> 00:47:55.080
Um, and, I was like, couldn't, couldn't stop laughing.

00:47:55.080 --> 00:47:57.920
The, the, the first one right off the bat, please enter your phone number.

00:47:57.920 --> 00:47:59.460
It's just kind of plus sign.

00:47:59.460 --> 00:48:01.360
You just walk up.

00:48:02.840 --> 00:48:08.260
Um, and then the second one's actually my favorite is, you got to press it like

00:48:08.260 --> 00:48:09.260
7 million times.

00:48:09.260 --> 00:48:14.020
The, angry birds version of a volume control.

00:48:14.460 --> 00:48:19.560
Um, so you just like pull it back and then shoot the ball to what volume you want.

00:48:19.560 --> 00:48:21.720
Oh, I love it.

00:48:21.720 --> 00:48:23.260
I want that actually.

00:48:23.260 --> 00:48:24.080
That would be fun.

00:48:24.080 --> 00:48:27.640
Um, but there's 59 of these that are just terrible.

00:48:27.640 --> 00:48:29.580
Please enter your phone number with a dial wheel.

00:48:31.620 --> 00:48:32.280
A digital.

00:48:32.280 --> 00:48:33.500
That sounds kind of fun though.

00:48:33.500 --> 00:48:38.340
It's been so long to say, I kind of want to go out and just get an old phone just to do

00:48:38.340 --> 00:48:38.640
that.

00:48:38.640 --> 00:48:39.260
Yeah.

00:48:39.260 --> 00:48:42.260
Um, I, I, a volume slider.

00:48:42.260 --> 00:48:45.720
That's just like, you have to like, make it level.

00:48:45.720 --> 00:48:46.500
Yeah.

00:48:46.500 --> 00:48:47.060
It's like a level.

00:48:47.060 --> 00:48:49.920
It slides the volume to like balance it out.

00:48:49.920 --> 00:48:50.480
Yeah.

00:48:50.480 --> 00:48:53.680
So, is this your phone number?

00:48:53.680 --> 00:48:58.080
It's a phone number entry that just guesses your phone number and you have to say if it's

00:48:58.080 --> 00:49:05.160
right or not, anyway, these are, we won't go through all 59, but, this is, these

00:49:05.160 --> 00:49:06.140
are worth a good laugh.

00:49:06.140 --> 00:49:10.380
Um, don't, it's probably not safe for work unless it's okay for you to be laughing at work.

00:49:10.380 --> 00:49:12.240
Um, there's nothing illicit.

00:49:12.240 --> 00:49:18.820
There is just, you know, you're not allowed to laugh at work.

00:49:18.820 --> 00:49:19.860
Well, this is work.

00:49:19.860 --> 00:49:21.020
This is not for fun.

00:49:21.020 --> 00:49:21.700
You're at work.

00:49:21.700 --> 00:49:22.260
Remember that.

00:49:22.260 --> 00:49:27.760
Uh, I had a manager once that like was sat across a long time ago.

00:49:27.840 --> 00:49:29.080
That sat right across from me.

00:49:29.080 --> 00:49:33.280
And every time I glanced over, he was playing solitaire on his computer.

00:49:33.280 --> 00:49:36.720
Like, and like, I'm like, like six hours out of the day.

00:49:36.720 --> 00:49:38.400
Every time I looked over, it was solitaire.

00:49:38.400 --> 00:49:40.100
Like I, I want his job.

00:49:40.100 --> 00:49:43.860
No, but anyway.

00:49:43.860 --> 00:49:44.300
All right.

00:49:44.300 --> 00:49:45.640
Brian, thanks a lot.

00:49:45.640 --> 00:49:49.100
You just ruined the next hour of productivity for me with this, this article.

00:49:49.100 --> 00:49:53.120
Anyway, I guess that wraps up all of our items.

00:49:53.120 --> 00:49:57.660
Uh, thanks everybody on the, live stream for watching and everybody that watches it

00:49:57.660 --> 00:49:57.920
later.

00:49:57.920 --> 00:49:58.640
Super.

00:49:58.640 --> 00:50:00.540
Thanks to Pamela for showing up today.

00:50:00.540 --> 00:50:01.520
And thanks, Michael.

00:50:01.520 --> 00:50:01.960
Yeah.

00:50:01.960 --> 00:50:02.620
Thank you.

00:50:02.620 --> 00:50:03.800
Great to have you on the show, Pamela.

