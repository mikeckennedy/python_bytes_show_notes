
00:00:00.000 --> 00:00:04.500
Hello and welcome to Python Bytes, where we deliver news and headlines directly to your earbuds.


00:00:04.500 --> 00:00:09.500
This is episode 229, recorded April 14th, 2021.


00:00:09.500 --> 00:00:10.600
And I am Brian Okken.


00:00:10.600 --> 00:00:11.600
I'm Michael Kennedy.


00:00:11.600 --> 00:00:13.200
Hi, I'm Gwen Farraday.


00:00:13.200 --> 00:00:15.500
Hey, Gwen. Great to have you here. Thanks for coming.


00:00:15.500 --> 00:00:16.800
Yeah, thanks for having me.


00:00:16.800 --> 00:00:19.200
We invited you because you're doing really cool stuff with Python,


00:00:19.200 --> 00:00:21.500
and you're doing some neat things on YouTube,


00:00:21.500 --> 00:00:25.200
and some, are you doing live streaming as well, or just videos?


00:00:25.200 --> 00:00:28.900
Maybe just tell people real quick about yourself before we get into our topics.


00:00:28.900 --> 00:00:58.880
Yeah, sure. So I'm, I work as a senior software developer at a consulting company. We do almost entirely Django projects there. And I've really loved getting to use Django for the past couple years. On the side, I also teach at a coding school where we do full stack JavaScript. But most of our back end and computer science curriculum is actually Python. And then we also use Django for the final portion of the curriculum as well as the final project.


00:00:58.880 --> 00:01:01.880
And then on the side, as Michael mentioned,


00:01:01.880 --> 00:01:05.640
I really like to make videos and content


00:01:05.640 --> 00:01:06.480
and things like that.


00:01:06.480 --> 00:01:11.100
So I've done a mixture of JavaScript and Python content


00:01:11.100 --> 00:01:13.560
under the name Faraday Academy.


00:01:13.560 --> 00:01:15.680
And I also have Twitch live streams.


00:01:15.680 --> 00:01:17.960
So most recently for Python,


00:01:17.960 --> 00:01:22.000
I've been kind of diving into fast API live


00:01:22.000 --> 00:01:24.160
and trying to learn async Python


00:01:24.160 --> 00:01:27.320
since I haven't really done much with async Python


00:01:27.320 --> 00:01:28.800
in the Django world.


00:01:28.800 --> 00:01:29.640
- Nice.


00:01:29.640 --> 00:01:30.480
- Yeah, super fun.


00:01:30.480 --> 00:01:31.840
Fast API is great.


00:01:31.840 --> 00:01:32.680
- Yeah, it's awesome.


00:01:32.680 --> 00:01:33.940
- And technology to work with.


00:01:33.940 --> 00:01:36.280
So you sound like you're busy, but in a good way.


00:01:36.280 --> 00:01:39.960
- But I love programming, so it's like my passion.


00:01:39.960 --> 00:01:41.800
It's not burdensome, I guess.


00:01:41.800 --> 00:01:42.800
- Yeah, it doesn't count as work.


00:01:42.800 --> 00:01:43.640
That's great.


00:01:43.640 --> 00:01:45.080
Brian, you want to kick us off?


00:01:45.080 --> 00:01:48.180
- Yeah, the first story I want to cover is about coverage.


00:01:48.180 --> 00:01:49.440
(laughing)


00:01:49.440 --> 00:01:50.740
Couldn't help the bad pun.


00:01:50.740 --> 00:01:55.860
So Ned Batchelder put a post out just the other day.


00:01:56.820 --> 00:01:58.740
there's a beta out for coverage.


00:01:58.740 --> 00:02:01.520
It's a 5.6 beta one,


00:02:01.520 --> 00:02:05.780
and it's a big revamp.


00:02:05.780 --> 00:02:08.040
Well, I don't know how much code he changed,


00:02:08.040 --> 00:02:09.760
but he says it's a big deal.


00:02:09.760 --> 00:02:13.040
The thing that's exciting about this is,


00:02:13.040 --> 00:02:16.520
it's supposed to exclude third-party packages.


00:02:16.520 --> 00:02:20.100
This is actually amazing because in the workflow,


00:02:20.100 --> 00:02:23.040
one of the problems I've had before is,


00:02:23.040 --> 00:02:26.680
I'm just starting out with a project.


00:02:26.680 --> 00:02:29.340
I got some code in a directory.


00:02:29.340 --> 00:02:31.700
I've got my virtual environment there also,


00:02:31.700 --> 00:02:34.920
same directory, throw some test code in there.


00:02:34.920 --> 00:02:38.440
You have to tell coverage,


00:02:38.440 --> 00:02:40.160
if you don't give it any flags,


00:02:40.160 --> 00:02:42.420
it just measures everything.


00:02:42.420 --> 00:02:44.180
But now it doesn't.


00:02:44.180 --> 00:02:48.780
Now if you say coverage run pytest or coverage run


00:02:48.780 --> 00:02:51.660
your whatever your module is because


00:02:51.660 --> 00:02:54.780
you can run coverage without tests too, that's a thing.


00:02:54.780 --> 00:02:58.120
It just grabs everything and reports everything,


00:02:58.120 --> 00:03:00.960
and that's hardly ever what you want.


00:03:00.960 --> 00:03:04.600
The change in 5.6 Beta 1 is


00:03:04.600 --> 00:03:09.560
to knock out the third-party packages and not collect those.


00:03:09.560 --> 00:03:11.640
I tried it out on a couple of projects,


00:03:11.640 --> 00:03:12.980
I want to try it out on more.


00:03:12.980 --> 00:03:15.780
But for instance, if you do it on your current directory,


00:03:15.780 --> 00:03:18.680
even if you say, give it just your current directory,


00:03:18.680 --> 00:03:20.580
it's going to include all your virtual environment


00:03:20.580 --> 00:03:22.960
there if it's there also, and you don't want that.


00:03:22.960 --> 00:03:24.960
So this is a really cool thing.


00:03:24.960 --> 00:03:29.360
And he's also, it's beta because he'd like to hear


00:03:29.360 --> 00:03:31.560
from people to find out if there's problems.


00:03:31.560 --> 00:03:33.620
So go out and test it out.


00:03:33.620 --> 00:03:36.800
I haven't tried it on PyTest plugins yet.


00:03:36.800 --> 00:03:39.740
That's what I'd like to do next, but this is cool.


00:03:39.740 --> 00:03:41.360
- Yeah, that's really nice because obviously


00:03:41.360 --> 00:03:43.560
you wanna have code coverage of your code,


00:03:43.560 --> 00:03:45.240
but you absolutely have no interest


00:03:45.240 --> 00:03:47.640
in testing other people's projects, right?


00:03:47.640 --> 00:03:49.680
There are packages that you're using and whatnot.


00:03:49.680 --> 00:03:50.800
So yeah, that's perfect.


00:03:50.800 --> 00:03:52.800
Do you have to do anything to make this turn on?


00:03:52.800 --> 00:03:56.240
Well, yes, you have to right now because it's in beta.


00:03:56.240 --> 00:04:00.960
You have to initially install coverage equals equals.


00:04:00.960 --> 00:04:05.720
We've got it in our show notes, but coverage equals equals 5.6b1.


00:04:05.720 --> 00:04:08.720
It's also in the blog post that we linked to.


00:04:08.720 --> 00:04:14.760
And it works with, so I tried it also with the pytest-cov plugin.


00:04:14.760 --> 00:04:19.400
And if you install pytest-cov and then install this other version of coverage,


00:04:19.400 --> 00:04:22.520
they'll work together and you can use them together too.


00:04:22.520 --> 00:04:23.440
- Yeah, very nice.


00:04:23.440 --> 00:04:25.800
Gwyn, what's the coverage story for you all?


00:04:25.800 --> 00:04:28.640
Do you do unit testing, code coverage,


00:04:28.640 --> 00:04:30.520
analysis, things like that?


00:04:30.520 --> 00:04:34.680
- So as far as for our Python and Django projects,


00:04:34.680 --> 00:04:37.260
we do some testing.


00:04:37.260 --> 00:04:39.280
I would say not enough testing.


00:04:39.280 --> 00:04:42.200
So just like most companies I've worked at,


00:04:42.200 --> 00:04:44.920
we always have the discussion, we should do more testing,


00:04:44.920 --> 00:04:47.260
and sometimes we do more testing and sometimes we don't.


00:04:47.260 --> 00:04:50.660
So our development team has been talking about it.


00:04:50.660 --> 00:04:55.260
So actually this package, coverage.py, I've never used before,


00:04:55.260 --> 00:04:59.460
but I was reading about it in the show notes and looking it up before this episode.


00:04:59.460 --> 00:05:02.580
So I was like, "Oh, that's a really nice tool. I think I'm going to use it."


00:05:02.580 --> 00:05:09.020
But mostly we do unit testing on really complicated areas that we think might break


00:05:09.020 --> 00:05:11.700
or might have edge cases or something like that.


00:05:11.700 --> 00:05:14.500
That's actually a great use for coverage because you can,


00:05:14.500 --> 00:05:18.540
Like if you specify the sort like which source to cover,


00:05:18.540 --> 00:05:20.520
you can zoom in and say,


00:05:20.520 --> 00:05:24.620
I just have this little directory or these few modules of code,


00:05:24.620 --> 00:05:29.240
you can say, just cover those and you can check the coverage on that.


00:05:29.240 --> 00:05:34.640
>> That's interesting. So you could generate reports on different areas even.


00:05:34.640 --> 00:05:35.500
>> Yeah.


00:05:35.500 --> 00:05:36.240
>> Nice.


00:05:36.240 --> 00:05:37.940
>> Yeah. I only care about this part,


00:05:37.940 --> 00:05:39.960
so just tell me about this part. That's perfect.


00:05:39.960 --> 00:05:40.480
>> Yeah.


00:05:40.480 --> 00:05:43.920
>> All right. Well, this next one that I want to cover has to do with


00:05:43.920 --> 00:06:13.760
platform as a service. So we often hear about Azure, AWS, and in the Python world, Heroku is very popular. But you know, these platforms as a service places you where you get push your code, and then it makes servers go and new versions get deployed. And who knows how that happens? It's all well and good if you want to run in the public cloud. But what if you want to run just on your own servers? So Ian Maurer sent over this thing called Piku. So Piku is the tiniest past platform as a service you've ever


00:06:13.760 --> 00:06:17.120
scene and allows you to do a get push deployment to your own servers.


00:06:17.120 --> 00:06:17.860
Isn't that cool?


00:06:17.860 --> 00:06:19.220
Yeah.


00:06:19.220 --> 00:06:19.340
Yeah.


00:06:19.340 --> 00:06:24.060
So the idea is you basically set this up on your server and then you connect


00:06:24.060 --> 00:06:26.820
it basically directly through GitHub.


00:06:26.820 --> 00:06:30.620
And then whenever you do a get push that automatically kicks


00:06:30.620 --> 00:06:33.340
off a new server creation.


00:06:33.340 --> 00:06:36.920
I think it probably is running on Docker or something like that, but not a hundred


00:06:36.920 --> 00:06:40.660
percent sure I haven't dug into the internal tout runs, but so here you can


00:06:40.660 --> 00:06:45.540
even see on the right of the homepage, which is an animated GIF. You can go and check that


00:06:45.540 --> 00:06:49.940
out. But you just sort of see what it does. It says, as soon as you do a get push, it'll


00:06:49.940 --> 00:06:55.460
come along and says, you're remote creating as opposed to just, you know, writing objects,


00:06:55.460 --> 00:06:59.980
you push it done, it like continues on. It says remote creating app, deploying app, your


00:06:59.980 --> 00:07:03.980
branch is up to date. Now your app is detected creating virtual environment. And you can


00:07:03.980 --> 00:07:10.200
basically tell it what your requirements files is what the execute file just like Heroku,


00:07:10.200 --> 00:07:12.440
you give it a like a proc file or something.


00:07:12.440 --> 00:07:13.440
It's called something like that,


00:07:13.440 --> 00:07:14.640
where it just basically says,


00:07:14.640 --> 00:07:15.920
when you run this project,


00:07:15.920 --> 00:07:17.800
what command do you give it?


00:07:17.800 --> 00:07:19.000
And then it just runs.


00:07:19.000 --> 00:07:20.780
And that's pretty cool.


00:07:20.780 --> 00:07:24.120
So it's really meant to be especially useful


00:07:24.120 --> 00:07:25.360
for low end devices.


00:07:25.360 --> 00:07:27.280
So I think this originates actually


00:07:27.280 --> 00:07:29.840
from working on Raspberry Pi.


00:07:29.840 --> 00:07:32.680
So like git push deploy to Raspberry Pi,


00:07:32.680 --> 00:07:36.440
which is a Raspberry Pi clusters, which is awesome.


00:07:36.440 --> 00:07:38.040
So one of its, you know,


00:07:38.040 --> 00:07:39.920
some of its core ideas are it's supposed


00:07:39.920 --> 00:07:44.880
run on low-end devices, it's supposed to be accessible for hobbyists and lower school,


00:07:44.880 --> 00:07:50.840
like K-12 school grade students. The whole platform as a service is about a thousand


00:07:50.840 --> 00:07:57.080
lines of code of Python, I think, and quite functional. It adheres to the 12-factor app


00:07:57.080 --> 00:08:04.280
of separation of concerns and separation of configuration and login and so on. Yeah, it's


00:08:04.280 --> 00:08:08.080
pretty neat, pretty simple to use. And then you just install the client and then you just


00:08:08.080 --> 00:08:10.080
do your get pushes with this thing.


00:08:10.080 --> 00:08:12.680
So if you've got a bunch of


00:08:12.680 --> 00:08:14.760
Raspberry Pis or other devices you want to


00:08:14.760 --> 00:08:17.040
use as a platform as a service,


00:08:17.040 --> 00:08:19.400
here's a pretty interesting option if you just have


00:08:19.400 --> 00:08:22.640
also plain Linux x86 machines and you want to make


00:08:22.640 --> 00:08:25.440
them be something like Heroku.


00:08:25.440 --> 00:08:28.440
I went through a lot of work over at Talkby.training so we


00:08:28.440 --> 00:08:32.040
can get push to a production branch and that


00:08:32.040 --> 00:08:35.360
automatically kicks off this whole workflow that not


00:08:35.360 --> 00:08:39.200
just updates the requirements and installs the new ones and restarts it.


00:08:39.200 --> 00:08:41.320
But a little bit more than that, it was a lot of work.


00:08:41.320 --> 00:08:44.880
This thing sounds really handy if you've got a pretty straightforward case,


00:08:44.880 --> 00:08:46.640
but you want that same workflow.


00:08:46.640 --> 00:08:51.160
>> Does it just work with GitHub or can I use it with other things too?


00:08:51.160 --> 00:08:52.900
>> I think it just works with Git.


00:08:52.900 --> 00:08:55.280
I don't think it has anything to do with GitHub itself.


00:08:55.280 --> 00:08:57.320
>> Okay. That's great.


00:08:57.320 --> 00:08:58.880
>> Yeah, it's pretty cool.


00:08:58.880 --> 00:09:03.080
If you go and you watch the animated GIF and you click on it,


00:09:03.080 --> 00:09:04.660
it becomes like a little movie type thing.


00:09:04.660 --> 00:09:09.780
You can see they start from an empty directory with the code that they create.


00:09:09.780 --> 00:09:11.820
The code is already there, but it's not in source control.


00:09:11.820 --> 00:09:14.020
Then they get init the local repository,


00:09:14.020 --> 00:09:16.580
then they add a remote which is not GitHub,


00:09:16.580 --> 00:09:17.820
and then as soon as they push to it,


00:09:17.820 --> 00:09:21.380
it kicks off the creation and running of this thing.


00:09:21.380 --> 00:09:25.260
>> I think we're going to use this because just for internal servers,


00:09:25.260 --> 00:09:31.300
so we've got internal projects that we can't host them on Heroku or something like that.


00:09:31.300 --> 00:09:33.220
That just ain't going to work.


00:09:33.220 --> 00:09:40.220
But we could, you know, update the website and stuff and push to get and have it, have it pull it into the server automatically.


00:09:40.220 --> 00:09:51.220
Yeah, there's all these little internal web apps that people run at companies that wouldn't make sense necessarily to run on a public cloud, because maybe they need to talk to local infrastructure.


00:09:51.220 --> 00:09:55.220
And you guys even have hardware devices where you're working that you actually talk to.


00:09:55.220 --> 00:10:01.220
So, yeah, here's a way to get a better deployment story without making it your next project to keep maintaining.


00:10:01.220 --> 00:10:02.220
maintaining.


00:10:02.220 --> 00:10:03.060
- Nice.


00:10:03.060 --> 00:10:05.020
- Yeah, I was looking at this


00:10:05.020 --> 00:10:08.800
and I have a somewhat clunky setup for personal projects


00:10:08.800 --> 00:10:11.700
where I have different Docker containers and watching


00:10:11.700 --> 00:10:15.520
and the Watchman Docker container running on my servers.


00:10:15.520 --> 00:10:18.380
So I was looking at this, I was like, that's so easy.


00:10:18.380 --> 00:10:20.160
Why don't I just use this?


00:10:20.160 --> 00:10:21.000
- Exactly.


00:10:21.000 --> 00:10:23.180
Yeah, I don't know how flexible it is


00:10:23.180 --> 00:10:25.060
and how much of a general solution it is.


00:10:25.060 --> 00:10:26.860
'Cause like I said, I already have a solution


00:10:26.860 --> 00:10:29.940
that is like this, but I'm super glad to be able to just


00:10:29.940 --> 00:10:32.640
git push to a certain branch,


00:10:32.640 --> 00:10:35.440
and that means in 30 seconds it'll be deployed


00:10:35.440 --> 00:10:37.520
in a consistent, reliable way that I don't have to think


00:10:37.520 --> 00:10:39.720
about it, it just makes it so easy to go,


00:10:39.720 --> 00:10:42.200
oh, this part of the code is ready for production,


00:10:42.200 --> 00:10:44.840
git push, as opposed to all the steps


00:10:44.840 --> 00:10:46.200
that a lot of people go through manually


00:10:46.200 --> 00:10:47.840
to do various things.


00:10:47.840 --> 00:10:49.800
So yeah, cool, definitely neat.


00:10:49.800 --> 00:10:51.680
All right, Gwen, you got the next one?


00:10:51.680 --> 00:10:54.920
Something kind of in the news these days?


00:10:54.920 --> 00:10:59.800
- Yes, so I got this kind of fit in with everything


00:10:59.800 --> 00:11:02.720
that's going on on Reddit and the news and everything.


00:11:02.720 --> 00:11:07.340
So blockchains, I think most of you have heard


00:11:07.340 --> 00:11:10.080
of blockchains and Bitcoin and Ethereum.


00:11:10.080 --> 00:11:15.080
And there are ways to basically build applications


00:11:15.080 --> 00:11:17.700
for the blockchain using Python.


00:11:17.700 --> 00:11:22.700
So for example, web3.py is a popular library


00:11:22.700 --> 00:11:27.960
where you can interact with the Ethereum blockchain


00:11:27.960 --> 00:11:30.160
via a Python API.


00:11:30.160 --> 00:11:33.160
So it's basically a wrapper that it gives you.


00:11:33.160 --> 00:11:36.960
And there's also a similar language to Python


00:11:36.960 --> 00:11:39.000
that was built for the Ethereum blockchain.


00:11:39.000 --> 00:11:40.200
It's called Vypr.


00:11:40.200 --> 00:11:45.200
So it's kind of Python, get it Python and Vypr,


00:11:45.200 --> 00:11:46.880
they're both snakes.


00:11:46.880 --> 00:11:48.800
But it's basically a Pythonic language


00:11:48.800 --> 00:11:52.040
so you can actually write these smart contracts


00:11:52.040 --> 00:11:56.280
or applications for the blockchain in that language


00:11:56.280 --> 00:12:00.780
or in Solidity or some other language.


00:12:00.780 --> 00:12:04.740
And you can deploy your applications to the blockchain


00:12:04.740 --> 00:12:06.380
and then you can interact with them


00:12:06.380 --> 00:12:09.840
or interact with any general blockchain information


00:12:09.840 --> 00:12:12.460
using Python with web3.py.


00:12:12.460 --> 00:12:16.740
So it's a really robust library and solution.


00:12:16.740 --> 00:12:21.740
And especially with NFTs or non-fungible tokens


00:12:21.800 --> 00:12:25.920
and things like that being so big right now.


00:12:25.920 --> 00:12:30.160
Using web3.py, you can also interact


00:12:30.160 --> 00:12:32.880
with those types of contracts that you deploy


00:12:32.880 --> 00:12:35.520
to the blockchain and build applications


00:12:35.520 --> 00:12:38.320
for people as well and for users.


00:12:38.320 --> 00:12:39.600
- Oh, this is really cool.


00:12:39.600 --> 00:12:42.640
I haven't done nothing with the blockchain


00:12:42.640 --> 00:12:44.600
and nothing with cryptocurrency.


00:12:44.600 --> 00:12:48.160
So Ethereum, is this more a blockchain thing,


00:12:48.160 --> 00:12:49.680
not a cryptocurrency thing?


00:12:49.680 --> 00:12:51.280
What's the distinction there?


00:12:51.280 --> 00:12:52.660
Or is it not?


00:12:52.660 --> 00:12:59.460
So cryptocurrencies, basically they're built on the blockchain, right?


00:12:59.460 --> 00:13:04.100
Or some other type of post blockchain technology which evolved from blockchain.


00:13:04.100 --> 00:13:10.980
So you can use this to interact with cryptocurrencies.


00:13:10.980 --> 00:13:15.460
I think people have built trading bots and different things with these.


00:13:15.460 --> 00:13:22.460
But you can also build really any type of application on the blockchain and use web3.py


00:13:22.460 --> 00:13:23.940
to interact with it.


00:13:23.940 --> 00:13:30.980
Whether it's a voting application or some kind of exchange or whatever you want to do


00:13:30.980 --> 00:13:35.300
on the blockchain, you will have the API interface with web3.py.


00:13:35.300 --> 00:13:42.220
I just bring up non-fungible tokens because of all the artwork and you know all the hype


00:13:42.220 --> 00:13:45.740
around, what was it, Dogecoin and all of that stuff.


00:13:45.740 --> 00:13:49.620
I'm thinking of taking a screenshot of Brian and we can make it a non-fungible token and


00:13:49.620 --> 00:13:50.620
sell him.


00:13:50.620 --> 00:13:53.700
What do you think we could get from Brian?


00:13:53.700 --> 00:13:58.540
We could take multiple screenshots and just sell like hundreds of them.


00:13:58.540 --> 00:13:59.540
Yes, exactly.


00:13:59.540 --> 00:14:03.740
Yeah, I think the non-fungible token stuff is really interesting.


00:14:03.740 --> 00:14:09.500
It's really far out there, but the blockchain seems to be the most concrete, practical,


00:14:09.500 --> 00:14:10.500
you know, you could build stuff.


00:14:10.500 --> 00:14:11.900
Like you mentioned, voting and other stuff.


00:14:11.900 --> 00:14:19.820
I could certainly see if the world could ever get it together, some kind of online voting system based on the blockchain.


00:14:19.820 --> 00:14:30.460
Yeah, and some places, some organizations, and also I believe some countries and localities are already using the blockchain for things like that.


00:14:30.460 --> 00:14:31.260
Nice.


00:14:31.260 --> 00:14:34.220
I think it's even being talked about in our own government.


00:14:34.220 --> 00:14:41.780
They have some committees that are talking about using blockchain in different ways, of course, with securities and how it's going to affect securities.


00:14:41.780 --> 00:14:45.740
but also with other possible future use cases,


00:14:45.740 --> 00:14:47.500
like things like voting.


00:14:47.500 --> 00:14:50.460
>> Awesome. Yeah, I'm going to have a woman from


00:14:50.460 --> 00:14:53.820
the FEC Federal Election Commission on


00:14:53.820 --> 00:14:57.500
Hawk Python to talk about using Python for the FEC.


00:14:57.500 --> 00:15:01.220
I feel like we definitely got to talk about blockchain.


00:15:01.220 --> 00:15:01.260
>> That's interesting.


00:15:01.260 --> 00:15:02.440
>> Yeah, that'll be fun.


00:15:02.440 --> 00:15:06.820
>> Man, you get some cool hosts or guests on your show. That's great.


00:15:06.820 --> 00:15:08.340
>> Thanks.


00:15:08.340 --> 00:15:24.620
Yes, I'm really excited with where blockchain is going, you know, being used in supply chain, in refugee camps, in pretty much every major bank now, every country is looking into blockchain. So I think it's a really good thing to get on board with.


00:15:24.780 --> 00:15:30.380
And Python is a really easy entryway to really to prototype anything in Python.


00:15:30.380 --> 00:15:34.540
So you'll see a lot of people want to find out about blockchain,


00:15:34.540 --> 00:15:38.860
and they'll build like their own test blockchain in Python to understand it.


00:15:38.860 --> 00:15:41.980
But there are also libraries where you can interact with real blockchains like


00:15:41.980 --> 00:15:45.340
hyperledger SDKs in Python.


00:15:45.340 --> 00:15:48.620
So you can use different kinds of popular blockchains,


00:15:48.620 --> 00:15:52.540
or the most popular blockchain now, which is Ethereum.


00:15:52.540 --> 00:15:55.660
So you could interact with that via web3.py.


00:15:55.660 --> 00:15:59.740
Yeah. Okay, cool. If people want to check it out, this is a great recommendation.


00:15:59.740 --> 00:16:03.340
Quick question from or comment from the live show.


00:16:03.340 --> 00:16:06.460
Tuna Army Captain says, "At what point does this become about monetizing?"


00:16:06.460 --> 00:16:08.060
Or cruxes.


00:16:08.060 --> 00:16:10.620
Or cruxes, Brian, help me out here.


00:16:10.620 --> 00:16:14.540
I think so.


00:16:14.540 --> 00:16:15.100
Yeah.


00:16:15.100 --> 00:16:17.420
Today. It's gotten there today.


00:16:17.420 --> 00:16:21.740
Absolutely. All right. Well, very cool, very cool recommendation.


00:16:21.740 --> 00:16:23.220
What's the next one that you got here, Brian?


00:16:23.220 --> 00:16:25.020
I checked this out. I'm super excited about this.


00:16:25.020 --> 00:16:27.020
This is a great idea.


00:16:27.020 --> 00:16:33.740
>> Yeah. This was a recommendation from Johannes Lippmann.


00:16:33.740 --> 00:16:36.940
He mentioned in Episode 227,


00:16:36.940 --> 00:16:40.700
we talked about SNYK.


00:16:40.700 --> 00:16:44.820
>> SNYK. Package Advisor, I think it was.


00:16:44.820 --> 00:16:48.540
>> Yeah. It gives you a health recommendation


00:16:48.540 --> 00:16:51.700
or health score on any package.


00:16:51.700 --> 00:16:56.100
Python package. Well, it's not really similar.


00:16:56.100 --> 00:16:58.260
It's I guess in the same category.


00:16:58.260 --> 00:17:00.260
Dead dependency.


00:17:00.260 --> 00:17:02.660
D-E-A-D dependency.


00:17:02.660 --> 00:17:05.500
This is a tool that's got,


00:17:05.500 --> 00:17:09.180
there's a paid version, but it's free for open-source projects.


00:17:09.180 --> 00:17:13.820
It's a GitHub thing or GitHub application.


00:17:13.820 --> 00:17:15.820
>> Yeah, GitHub app.


00:17:15.820 --> 00:17:20.180
>> What it does is it looks at your dependencies.


00:17:20.180 --> 00:17:25.000
It looks at a lot of stuff.


00:17:25.000 --> 00:17:27.480
I'm just going to bring up an example.


00:17:27.480 --> 00:17:29.880
Somebody who wants to add some functionality to


00:17:29.880 --> 00:17:37.560
your project, they change it and it adds a dependency.


00:17:37.560 --> 00:17:39.540
One of the things you'll see in the pull request,


00:17:39.540 --> 00:17:41.940
if you use this,


00:17:41.940 --> 00:17:44.520
is a dead dependency will go out and look to


00:17:44.520 --> 00:17:47.080
see how healthy that dependency is.


00:17:47.080 --> 00:17:48.540
So you've got a new one in there,


00:17:48.540 --> 00:17:55.260
And it's got a whole bunch of configurable options that I really think are pretty cool.


00:17:55.260 --> 00:17:58.820
It checks for things like how recent was,


00:17:58.820 --> 00:18:02.620
wanted to make sure that there's recent releases, recent commits.


00:18:02.620 --> 00:18:05.820
And they're pretty broad. The defaults are like,


00:18:05.820 --> 00:18:09.620
has there been a commit in the last 12 months?


00:18:09.620 --> 00:18:13.460
Can you scroll down just like one page to the jQuery example?


00:18:13.460 --> 00:18:14.220
Yeah.


00:18:14.220 --> 00:18:16.020
That's a great example right there.


00:18:16.020 --> 00:18:22.020
>> Yeah. Their example is you've got a jQuery UI that's added.


00:18:22.020 --> 00:18:25.420
What it does is it doesn't just check for one thing,


00:18:25.420 --> 00:18:28.940
it looks for all your dependencies and it shows that


00:18:28.940 --> 00:18:33.820
jQuery UI hasn't been released for over 12 months.


00:18:33.820 --> 00:18:36.940
Then package called nom nom,


00:18:36.940 --> 00:18:39.660
that's no commits for the last nine months,


00:18:39.660 --> 00:18:43.140
and it's been deprecated in the package registry.


00:18:43.140 --> 00:18:48.100
It checks for deprecations and also things like,


00:18:48.100 --> 00:18:52.700
yeah, if it's been deprecated or if it's gone down to a single author,


00:18:52.700 --> 00:18:55.720
maybe that might be at risk for some projects.


00:18:55.720 --> 00:18:58.520
But all of it's configurable, so this is pretty neat.


00:18:58.520 --> 00:18:59.740
>> Yeah, I love the idea.


00:18:59.740 --> 00:19:03.680
It works not just for Python or as JavaScript as you mentioned,


00:19:03.680 --> 00:19:07.320
but also Rust, Ruby, C#, Kotlin, bunch of stuff.


00:19:07.320 --> 00:19:11.580
>> Yeah. I tried it out and I couldn't get it to work,


00:19:11.580 --> 00:19:14.460
but I know why I couldn't get it to work.


00:19:14.460 --> 00:19:16.900
I'm using Flit now,


00:19:16.900 --> 00:19:21.460
so I'm using pyproject.toml for my dependencies and stuff in my projects,


00:19:21.460 --> 00:19:23.240
and this doesn't support it yet.


00:19:23.240 --> 00:19:26.500
It supports requirements.txt and pip file.


00:19:26.500 --> 00:19:29.780
Last night I was playing with it and I sent him an e-mail and said,


00:19:29.780 --> 00:19:34.460
"It'd be really great if it would support setup.py and pyproject.toml."


00:19:34.460 --> 00:19:37.500
Gosh, within an hour, I got a response back and said,


00:19:37.500 --> 00:19:40.620
"Yeah, you're right. We should do pyproject.toml."


00:19:40.620 --> 00:19:43.420
It's a simple format and we'll try to support it.


00:19:43.420 --> 00:19:47.860
But setup.py, a little more difficult because as we know,


00:19:47.860 --> 00:19:52.020
setup.py has no real restrictions on its formatting.


00:19:52.020 --> 00:19:54.780
There's a lot of crazy stuff out there for that.


00:19:54.780 --> 00:19:57.900
>> Yeah, for sure. Quinn, what do you think?


00:19:57.900 --> 00:20:01.500
>> Yeah, I was just going to say I was going to try this out on a project,


00:20:01.500 --> 00:20:03.140
but I also use poetry,


00:20:03.140 --> 00:20:07.340
so use pyproject.toml for the dependencies.


00:20:07.340 --> 00:20:09.140
But like you said,


00:20:09.140 --> 00:20:13.780
It's an easy format, so maybe if they support it soon, I'll try this out.


00:20:13.780 --> 00:20:15.620
It seems like a really good idea.


00:20:15.620 --> 00:20:17.620
>> Yeah, it's fairly new too.


00:20:17.620 --> 00:20:19.020
It looks really slick.


00:20:19.020 --> 00:20:20.740
Their website's all nice and great.


00:20:20.740 --> 00:20:22.580
I'm like, "Oh, they must have been up for a while."


00:20:22.580 --> 00:20:24.020
As far as I can tell,


00:20:24.020 --> 00:20:26.480
it looks like at least their defect tracker,


00:20:26.480 --> 00:20:29.500
they've got a GitHub defect tracker


00:20:29.500 --> 00:20:32.300
that's only been alive since last September.


00:20:32.300 --> 00:20:34.660
They already support a whole bunch of stuff,


00:20:34.660 --> 00:20:37.180
so hopefully, we'll get some new features here soon.


00:20:37.180 --> 00:20:40.220
Yeah, fantastic. And I just came up with a new idea for a GitHub bot.


00:20:40.220 --> 00:20:45.500
So you have a GitHub bot that if you put a pyproject.toml or a pip file,


00:20:45.500 --> 00:20:48.700
it'll automatically create the others and keep them in sync.


00:20:48.700 --> 00:20:53.260
So if you check in your pyproject.toml, it'll automatically generate a requirements.txt


00:20:53.260 --> 00:20:55.740
that's in sync. And if you make changes, it'll update it.


00:20:55.740 --> 00:21:00.300
And so you just work with whatever tools you want. That's my new idea.


00:21:00.300 --> 00:21:06.940
Isn't everything switching over to pyproject.toml now, then?


00:21:06.940 --> 00:21:09.660
>> Well, for packages, not everything is.


00:21:09.660 --> 00:21:12.500
The setup is going to be supported for a long time.


00:21:12.500 --> 00:21:15.900
But you can use setup tools with myproject.toml.


00:21:15.900 --> 00:21:18.060
There is a lot of people converting.


00:21:18.060 --> 00:21:21.440
But that's for packages and stuff and libraries.


00:21:21.440 --> 00:21:24.340
A lot of applications don't use anything like that.


00:21:24.340 --> 00:21:27.020
They just use a requirements file.


00:21:27.020 --> 00:21:29.700
>> I used to use a requirements file and then


00:21:29.700 --> 00:21:32.380
I switched to using Poetry like a year ago.


00:21:32.380 --> 00:21:35.540
I was like, what have I been doing all this time? So much nicer.


00:21:35.540 --> 00:21:38.220
- Yeah, poetry's nice, very cool.


00:21:38.220 --> 00:21:40.900
Speaking of switching to new things,


00:21:40.900 --> 00:21:43.340
I wanted to talk about all the important changes


00:21:43.340 --> 00:21:46.000
and features in Python 3.10.


00:21:46.000 --> 00:21:47.020
- So excited.


00:21:47.020 --> 00:21:47.860
- So exciting, yeah.


00:21:47.860 --> 00:21:52.340
So this is a blog post by Martin Hines.


00:21:52.340 --> 00:21:54.620
Apparently, blog post number 47,


00:21:54.620 --> 00:21:56.540
look at the URL here, which is interesting.


00:21:56.540 --> 00:21:58.980
And basically what it does, it just walks you through


00:21:58.980 --> 00:22:01.220
all the stuff coming in Python 3.10.


00:22:01.220 --> 00:22:04.460
So Python 3.10 has been in alpha for a little while.


00:22:04.460 --> 00:22:05.740
that means feature is changing,


00:22:05.740 --> 00:22:06.900
but now it's about to go beta,


00:22:06.900 --> 00:22:08.020
so it's about to stabilize


00:22:08.020 --> 00:22:10.060
and it's time to start thinking about


00:22:10.060 --> 00:22:11.240
what features are coming


00:22:11.240 --> 00:22:14.940
because they're most likely gonna be fixed as they are.


00:22:14.940 --> 00:22:17.260
First thing it talks about is how to go through


00:22:17.260 --> 00:22:19.580
installing the alpha or the beta,


00:22:19.580 --> 00:22:21.500
whatever the latest version is.


00:22:21.500 --> 00:22:22.580
It's pretty simple.


00:22:22.580 --> 00:22:25.820
So you just do the download and install from source,


00:22:25.820 --> 00:22:29.600
except for it has this comment to say make install.


00:22:29.600 --> 00:22:30.780
You're welcome to run make install,


00:22:30.780 --> 00:22:32.180
but that will make your Python 3


00:22:32.180 --> 00:22:35.120
in your system be the alpha Python 3.10,


00:22:35.120 --> 00:22:36.680
which you might not want to do.


00:22:36.680 --> 00:22:38.160
I mean, you may, but you might not.


00:22:38.160 --> 00:22:41.280
If you say make alt, A-L-T, install,


00:22:41.280 --> 00:22:42.500
alt install is one word,


00:22:42.500 --> 00:22:44.400
then it'll just install it so you can refer to it


00:22:44.400 --> 00:22:47.920
as Python 3.10, but it won't replace your system Python,


00:22:47.920 --> 00:22:49.040
which I would recommend.


00:22:49.040 --> 00:22:53.000
So there's some interesting improvements for type checking.


00:22:53.000 --> 00:22:55.240
One of the things that's really nice about Python


00:22:55.240 --> 00:22:57.760
is you have this optional type hint, type checking,


00:22:57.760 --> 00:23:00.080
type hint, type annotation stuff,


00:23:00.080 --> 00:23:03.260
but it can get kind of crazy with the generics.


00:23:03.260 --> 00:23:07.520
Like if I have a generator that returns a list of integer,


00:23:07.520 --> 00:23:10.020
I mean, it's just like the way you express that


00:23:10.020 --> 00:23:12.360
and kind of almost like generic syntax,


00:23:12.360 --> 00:23:16.760
like generic from C++ style, it gets a little wild.


00:23:16.760 --> 00:23:19.400
So one of the improvements is around union,


00:23:19.400 --> 00:23:20.800
'cause you can say, well, this thing will either


00:23:20.800 --> 00:23:23.800
take an int or a float, and I can just deal with it


00:23:23.800 --> 00:23:25.360
as basically a number.


00:23:25.360 --> 00:23:29.880
So you used to have to say, from typing import union,


00:23:29.880 --> 00:23:33.980
And then you would say union bracket int comma float bracket


00:23:33.980 --> 00:23:35.200
and that was the thing.


00:23:35.200 --> 00:23:37.800
So now you can just use the pipe or the or,


00:23:37.800 --> 00:23:39.200
the bitwise or operator.


00:23:39.200 --> 00:23:42.040
So int or, you know, vertical pipe float


00:23:42.040 --> 00:23:44.360
and that tells you it's a int or a float.


00:23:44.360 --> 00:23:45.360
What do you think of this?


00:23:45.360 --> 00:23:46.200
Yeah, you like it?


00:23:46.200 --> 00:23:47.640
- I think it's nice.


00:23:47.640 --> 00:23:48.920
- That seems cleaner to me.


00:23:48.920 --> 00:23:49.760
- Yeah, I didn't really like it.


00:23:49.760 --> 00:23:51.040
- The union stuff is wonky.


00:23:51.040 --> 00:23:52.400
- Yeah, I didn't like the union before.


00:23:52.400 --> 00:23:54.900
I mean, I was glad it was there 'cause we needed it,


00:23:54.900 --> 00:23:57.520
but the or makes it nice and clean.


00:23:57.520 --> 00:23:59.200
- Yeah, I almost never used the union


00:23:59.200 --> 00:24:01.240
'cause it was just messy.


00:24:01.240 --> 00:24:02.320
So anyway, this is pretty nice.


00:24:02.320 --> 00:24:06.800
There's also some stuff about is instance.


00:24:06.800 --> 00:24:08.720
So you can, that exists already,


00:24:08.720 --> 00:24:11.960
but you can pass this int or string,


00:24:11.960 --> 00:24:14.120
int pipe string in, and it'll tell you


00:24:14.120 --> 00:24:16.560
if it's either an int or a string as an instance,


00:24:16.560 --> 00:24:18.600
which is kind of a cool thing as well.


00:24:18.600 --> 00:24:19.440
- Oh, wow.


00:24:19.440 --> 00:24:22.120
- Yeah, you can also create type aliases,


00:24:22.120 --> 00:24:23.540
and you could do that previously.


00:24:23.540 --> 00:24:25.840
So if I have a thing I wanna call a file name,


00:24:25.840 --> 00:24:26.720
and right now it's a string,


00:24:26.720 --> 00:24:28.860
but maybe it becomes a class later,


00:24:28.860 --> 00:24:30.100
'cause we're gonna upgrade it.


00:24:30.100 --> 00:24:32.500
And I just wanna refer to it as this,


00:24:32.500 --> 00:24:33.940
right now as a file name, right?


00:24:33.940 --> 00:24:37.660
So you used to say file name equals str, S-T-R,


00:24:37.660 --> 00:24:39.420
and there's no real way to understand


00:24:39.420 --> 00:24:41.980
that I'm just, I'm trying to create a type definition,


00:24:41.980 --> 00:24:44.020
but in fact, it just tells me,


00:24:44.020 --> 00:24:46.740
well, there's this other name for the string class, right?


00:24:46.740 --> 00:24:49.700
And that worked, but there was no way for the tools


00:24:49.700 --> 00:24:51.380
to know what your intention was.


00:24:51.380 --> 00:24:54.820
So now there's gonna be a file name colon type alias


00:24:54.820 --> 00:24:56.940
equals string, and that will tell you


00:24:56.940 --> 00:24:59.820
file name is an actual alias for the class string,


00:24:59.820 --> 00:25:01.500
not just it happens to be a thing


00:25:01.500 --> 00:25:02.580
that looks a whole lot like it.


00:25:02.580 --> 00:25:04.020
So that's kind of cool.


00:25:04.020 --> 00:25:07.220
There's some stuff about knowing on integers


00:25:07.220 --> 00:25:09.380
to figure out how many bits are involved.


00:25:09.380 --> 00:25:11.860
That's not super applicable or useful.


00:25:11.860 --> 00:25:14.260
Disk details, speaking of, I mean, you may want to know,


00:25:14.260 --> 00:25:16.900
but it's like not, I doubt it's a big question


00:25:16.900 --> 00:25:18.260
people want to know often.


00:25:18.260 --> 00:25:20.500
Disk details are being deprecated.


00:25:20.500 --> 00:25:23.160
They've pretty much been deprecated for a while.


00:25:23.160 --> 00:25:26.240
You should be using setup tools and packaging,


00:25:26.240 --> 00:25:29.140
but they were officially deprecated in 3.10


00:25:29.140 --> 00:25:31.620
and will be gone in 3.12, just so you all know.


00:25:31.620 --> 00:25:34.080
This next one, I'm excited about quite a bit.


00:25:34.080 --> 00:25:37.980
It's super common to want to have more than one thing


00:25:37.980 --> 00:25:42.100
that is tied to a context block, like a with statement.


00:25:42.100 --> 00:25:44.220
So if I'm gonna open two files


00:25:44.220 --> 00:25:46.100
and I wanna make sure I close them both,


00:25:46.100 --> 00:25:47.260
even if there's an error,


00:25:47.260 --> 00:25:50.360
it would make a lot of sense to say with file one,


00:25:50.360 --> 00:25:51.300
with file two.


00:25:51.300 --> 00:25:52.700
And so what were your options?


00:25:52.700 --> 00:25:53.620
You're gonna have one with block


00:25:53.620 --> 00:25:56.480
and then indent another one just to have the second file,


00:25:56.480 --> 00:26:00.020
which is weird, you could create the files separately,


00:26:00.020 --> 00:26:01.220
the file objects separately,


00:26:01.220 --> 00:26:03.740
and then say with file one comma file two,


00:26:03.740 --> 00:26:05.500
and then use them, that actually worked.


00:26:05.500 --> 00:26:09.200
But what if file two crashed when you tried to create it,


00:26:09.200 --> 00:26:10.300
then file one would leak,


00:26:10.300 --> 00:26:12.180
and there's just like all these weird situations.


00:26:12.180 --> 00:26:17.020
So now with blocks support multiple lines with parentheses.


00:26:17.020 --> 00:26:18.700
So I can say with parentheses,


00:26:18.700 --> 00:26:20.900
thing one that has to be managed in the context,


00:26:20.900 --> 00:26:23.580
thing two that has to be managed in the context, and so on.


00:26:23.580 --> 00:26:25.800
and then work with them and they're treated as a block,


00:26:25.800 --> 00:26:27.040
which I think is sweet.


00:26:27.040 --> 00:26:29.720
- That's gonna be very useful 'cause I've had times


00:26:29.720 --> 00:26:32.860
where I've had two or three levels all the time, so.


00:26:32.860 --> 00:26:35.680
- Yeah, yeah, so you're usually juggling some edge case


00:26:35.680 --> 00:26:37.240
that might not quite work, but usually works,


00:26:37.240 --> 00:26:39.200
and this is just make it part of the language,


00:26:39.200 --> 00:26:40.920
make sure it always works, I love it.


00:26:40.920 --> 00:26:43.100
Also, a performance.


00:26:43.100 --> 00:26:45.760
So it brings some performance improvements


00:26:45.760 --> 00:26:50.440
for constructors like strings, bytes, byte arrays, and so on.


00:26:50.440 --> 00:26:53.760
And then also feeding, working with functions


00:26:53.760 --> 00:26:55.720
that have type annotations, I think,


00:26:55.720 --> 00:26:57.360
are something like two times faster.


00:26:57.360 --> 00:27:00.240
They are now, the type annotations are evaluated


00:27:00.240 --> 00:27:02.920
at compilation time.


00:27:02.920 --> 00:27:04.520
They usually evaluate at run time,


00:27:04.520 --> 00:27:05.860
which would slow them down.


00:27:05.860 --> 00:27:07.080
So that's nice.


00:27:07.080 --> 00:27:10.280
And then the big one is the switch statement,


00:27:10.280 --> 00:27:11.520
which we're not calling switch statement,


00:27:11.520 --> 00:27:13.120
it's pattern matching.


00:27:13.120 --> 00:27:15.080
And we actually talked a lot with Brett Cannon about that,


00:27:15.080 --> 00:27:16.760
and I think people appreciated that episode


00:27:16.760 --> 00:27:18.680
where we got to dig into that, right?


00:27:18.680 --> 00:27:19.520
- Yeah.


00:27:19.520 --> 00:27:20.340
- Yeah, that was fun.


00:27:20.340 --> 00:27:22.780
So there's some nice examples of what you can do,


00:27:22.780 --> 00:27:24.540
like basically how it works, you know,


00:27:24.540 --> 00:27:27.220
match on day, case Monday, case Friday,


00:27:27.220 --> 00:27:29.720
case Saturday or Sunday and so on.


00:27:29.720 --> 00:27:31.140
And then some more interesting ones


00:27:31.140 --> 00:27:33.940
about matching objects like classes,


00:27:33.940 --> 00:27:36.340
where you're looking at multiple fields.


00:27:36.340 --> 00:27:41.040
So you can match on age and you could match on gender.


00:27:41.040 --> 00:27:43.380
This is like a person example, name, age, gender,


00:27:43.380 --> 00:27:45.180
and you could match on different things


00:27:45.180 --> 00:27:46.660
and depending on how it matches,


00:27:46.660 --> 00:27:48.380
you kind of fall into these case statements.


00:27:48.380 --> 00:27:49.820
So we've gone over that a lot.


00:27:49.820 --> 00:27:51.820
I don't want to dive into it too much,


00:27:51.820 --> 00:27:54.180
but pretty neat to see these examples here.


00:27:54.180 --> 00:27:56.860
So that's, I would say that's the big change that's coming.


00:27:56.860 --> 00:27:58.620
Don't you think?


00:27:58.620 --> 00:28:01.580
- Do the case statements fall through like JavaScript?


00:28:01.580 --> 00:28:04.460
- There is a fall through, it's not in these examples,


00:28:04.460 --> 00:28:06.340
but there is a fall through mechanism.


00:28:06.340 --> 00:28:08.380
- Okay, but not by default.


00:28:08.380 --> 00:28:09.460
- Well, it's not called default,


00:28:09.460 --> 00:28:12.180
but I think there, I can't remember the syntax.


00:28:12.180 --> 00:28:16.460
- Oh, I mean like, so from the first case.


00:28:16.460 --> 00:28:17.300
- Oh, right, yeah.


00:28:17.300 --> 00:28:18.660
- Yeah, you don't have to say break.


00:28:18.660 --> 00:28:20.000
I don't think it falls through.


00:28:20.000 --> 00:28:21.220
- Yeah, it doesn't fall through.


00:28:21.220 --> 00:28:23.720
- Yeah, yeah, 'cause in C++, if you don't say break,


00:28:23.720 --> 00:28:26.620
you're gonna print all, it's gonna run every case


00:28:26.620 --> 00:28:27.760
top to bottom, right?


00:28:27.760 --> 00:28:28.760
Well, depending where it matches.


00:28:28.760 --> 00:28:31.640
From where it matches onward, basically, yeah.


00:28:31.640 --> 00:28:34.220
No, I don't think it falls through in that sense.


00:28:34.220 --> 00:28:36.760
But Brian's right, there's a default, yeah.


00:28:36.760 --> 00:28:40.660
- But the fall through mechanism in C++ and C and Java,


00:28:40.660 --> 00:28:44.200
other type language, C-like languages,


00:28:44.200 --> 00:28:47.000
it's caused me more problems than it ever solved.


00:28:47.000 --> 00:28:49.600
I mean, I've actually wanted it to fall through.


00:28:49.600 --> 00:28:51.460
I'd rather have a fall through keyword


00:28:51.460 --> 00:28:54.800
than have it be, have to put a break everywhere.


00:28:54.800 --> 00:28:55.960
- Yeah, I agree.


00:28:55.960 --> 00:28:58.060
- Yeah, I just use my go-to statements and we're good.


00:28:58.060 --> 00:28:58.900
So it's still fine.


00:28:58.900 --> 00:29:00.600
(laughing)


00:29:00.600 --> 00:29:02.000
Dean out there in the live stream says,


00:29:02.000 --> 00:29:04.560
"Can't wait for 3.10 now with a double context


00:29:04.560 --> 00:29:06.000
or multi-line context."


00:29:06.000 --> 00:29:09.120
I agree, those are quite awesome.


00:29:09.120 --> 00:29:10.400
I think that's a really good feature


00:29:10.400 --> 00:29:13.160
and it's super simple, so I like that a lot.


00:29:13.160 --> 00:29:15.600
- I wanted to add a couple things.


00:29:15.600 --> 00:29:19.100
I just found out today that one of the things that's going in 3.10


00:29:19.100 --> 00:29:27.360
is some better error messages if you use an attribute error,


00:29:27.360 --> 00:29:34.340
if you try to access from name tuple import something else,


00:29:34.340 --> 00:29:36.400
and you get something wrong.


00:29:36.400 --> 00:29:40.120
It tries to give you a suggestion for what the right thing is,


00:29:40.120 --> 00:29:41.900
and that'll be really cool,


00:29:41.900 --> 00:29:45.000
especially for working on the REPL and stuff.


00:29:45.000 --> 00:29:46.760
And I also wanted to point out that


00:29:46.760 --> 00:29:50.040
I don't think I would build Python.


00:29:50.040 --> 00:29:51.340
I would just download it.


00:29:51.340 --> 00:29:55.920
If you Google Python 3.10 download,


00:29:55.920 --> 00:29:58.600
you can get it just from python.org.


00:29:58.600 --> 00:29:59.680
You can download it there.


00:29:59.680 --> 00:30:01.080
- Without compiling it?


00:30:01.080 --> 00:30:02.560
- Yeah, it's just the installer.


00:30:02.560 --> 00:30:04.120
I'll put a link in the show notes.


00:30:04.120 --> 00:30:04.960
- Yeah.


00:30:04.960 --> 00:30:06.160
- Or use pyenv.


00:30:06.160 --> 00:30:07.200
- Yeah, pyenv.


00:30:07.200 --> 00:30:10.000
- Right, yeah, you can use pyenv, yeah, sure, cool.


00:30:10.000 --> 00:30:13.780
All right, well, that brings us to the next item,


00:30:13.780 --> 00:30:15.260
but I don't have the link to it.


00:30:15.260 --> 00:30:16.100
That's yours, Gwen.


00:30:16.100 --> 00:30:16.940
So you wanna tell us about it?


00:30:16.940 --> 00:30:18.500
I think I can just Google it.


00:30:18.500 --> 00:30:21.180
I'm not gonna Google, I'm gonna DuckDuckGo, but carry on.


00:30:21.180 --> 00:30:23.260
- Good, I use DuckDuckGo too.


00:30:23.260 --> 00:30:24.100
- Nice.


00:30:24.100 --> 00:30:26.540
- So yeah, I wanted to give a shout out


00:30:26.540 --> 00:30:29.500
to Free Code Camp's Python curriculum.


00:30:29.500 --> 00:30:34.100
So last year, they launched a Python curriculum


00:30:34.100 --> 00:30:36.880
with I think it's almost a thousand hours


00:30:36.880 --> 00:30:41.880
of curriculum material between challenges, lessons,


00:30:41.880 --> 00:30:49.700
lessons, and of course, projects and certifications as well on topics from


00:30:49.700 --> 00:30:54.340
Python basics to data science, machine learning, algorithms, all sorts of things.


00:30:54.340 --> 00:30:59.160
And that's in addition to the thousands of hours they already had learning


00:30:59.160 --> 00:31:04.420
JavaScript and basic programming skills and algorithms and other types of things.


00:31:04.420 --> 00:31:10.500
So that Python curriculum was in the works for a few years. I've been a top


00:31:10.500 --> 00:31:14.820
contributor with Free Code Camp for a couple years. So I got to go to their summit before


00:31:14.820 --> 00:31:20.260
the whole COVID thing hit. And I remember everyone getting together kind of talking


00:31:20.260 --> 00:31:25.620
excitedly several years ago about Python coming out. So it was definitely in the works for a long


00:31:25.620 --> 00:31:30.660
time. And a lot of people put a lot of effort into it. So I think it's a really good curriculum.


00:31:30.660 --> 00:31:38.180
And Free Code Camp has also done a really good job of putting out a lot of supplementary material


00:31:38.180 --> 00:31:48.640
in Python and data science. So you can see on their YouTube channel, I believe they have over 100 hours of Python content, including this one 12 hour


00:31:48.640 --> 00:31:58.880
Python data science crash course on their YouTube channel. And they also have one of the most popular developer blogs on the internet. I'm also a writer for them.


00:31:59.000 --> 00:32:08.140
Recently i wrote one jango article and i have a whole bunch more jango articles that i'm planning to write when i get around to it.


00:32:08.140 --> 00:32:12.620
So as far as python education,


00:32:12.620 --> 00:32:20.500
i think this is a really good option that's free accessible to anybody even on mobile devices.


00:32:20.500 --> 00:32:26.080
and one that stayed true to its mission, it didn't just build to kind of sell out to another company, but


00:32:26.080 --> 00:32:30.440
you know, since I believe the end of 2014, when it's launched,


00:32:30.440 --> 00:32:36.720
it's kept this mission of making coding education accessible to everyone. So I think they've done


00:32:36.720 --> 00:32:40.840
a really good comprehensive job of now adding Python onto that.


00:32:40.840 --> 00:32:48.680
Oh, and they're also adding on, right now they're working on an even bigger expanded curriculum


00:32:48.680 --> 00:32:53.000
for that data science and machine learning that they have right now in Python.


00:32:53.000 --> 00:32:57.560
It's going to include all the different math and a lot more


00:32:57.560 --> 00:33:01.080
elements of machine learning than it currently covers. So


00:33:01.080 --> 00:33:06.840
yeah, I'm excited for that. They were raising money for it this year and they've been working on it since last year.


00:33:06.840 --> 00:33:11.800
So I'm hoping we'll see at least the initial stages of that soon.


00:33:11.800 --> 00:33:18.720
Yeah, very cool. I put my, I worked with them to put my free MongoDB course up there, which is a Python course.


00:33:18.720 --> 00:33:19.720
Oh, awesome.


00:33:19.720 --> 00:33:20.920
A little bit up there, yeah.


00:33:20.920 --> 00:33:23.720
What were you using with MongoDB?


00:33:23.720 --> 00:33:29.640
It was just some, it wasn't even a real web framework, it was something that kind of was just a simple CLI app


00:33:29.640 --> 00:33:32.120
that talked to it to keep it, you know, not complex.


00:33:32.120 --> 00:33:33.120
Oh, okay.


00:33:33.120 --> 00:33:34.760
Yeah, very cool.


00:33:34.760 --> 00:33:38.680
I've been using Django, or Django in MongoDB.


00:33:38.680 --> 00:33:40.200
Okay, that's cool.


00:33:40.200 --> 00:33:45.240
It actually works pretty well except the migrations are a little bit funky.


00:33:45.240 --> 00:33:46.240
Okay.


00:33:46.240 --> 00:33:51.600
So it's not easy to roll back the migrations like it is if you use Postgres.


00:33:51.600 --> 00:33:56.320
But overall it works really well and you can use the same ORM you use in Django.


00:33:56.320 --> 00:33:59.480
Oh, that's fantastic. I use Mongo engine for my main stuff,


00:33:59.480 --> 00:34:04.320
which is very much modeled on Django, but it's not, you know, not Django itself.


00:34:04.320 --> 00:34:04.920
Cool.


00:34:04.920 --> 00:34:05.920
Nice.


00:34:05.920 --> 00:34:08.680
Let's see, really quick, a couple of fallbacks.


00:34:08.680 --> 00:34:11.480
Robert Robertson says they should create an error message package


00:34:11.480 --> 00:34:14.080
that breaks down your error into plain English.


00:34:14.080 --> 00:34:15.120
That's a good idea.


00:34:15.120 --> 00:34:16.120
Yeah, that's a great idea.


00:34:16.120 --> 00:34:18.960
And then Dean says there are third-party packages that do it nicely.


00:34:18.960 --> 00:34:20.320
Brian, do you remember if we've covered any?


00:34:20.320 --> 00:34:22.480
I don't. I mean, Dean, if you've got some ideas, throw them out there.


00:34:22.480 --> 00:34:25.880
I think we do, but I think we did cover them, but I don't remember them.


00:34:25.880 --> 00:34:30.160
I know we've covered stuff that do things like pretty print the message


00:34:30.160 --> 00:34:32.440
or highlight certain parts so it's clear.


00:34:32.440 --> 00:34:37.640
But I feel like it would be cool if it would just print the first stack overflow response


00:34:37.640 --> 00:34:41.940
accepted response underneath the crash.


00:34:41.940 --> 00:34:43.240
That would be fantastic.


00:34:43.240 --> 00:34:47.360
>> We talked about possibly just formatting


00:34:47.360 --> 00:34:50.160
your error message nicely so that you could Google it,


00:34:50.160 --> 00:34:51.960
or DuckDuckGo it,


00:34:51.960 --> 00:34:55.080
of how to search for this on the Internet.


00:34:55.080 --> 00:34:57.800
Escaping quotes and things like that.


00:34:57.800 --> 00:34:58.600
>> Exactly.


00:34:58.600 --> 00:35:01.140
>> That'd be cool. Somebody else, let's see,


00:35:01.140 --> 00:35:03.400
Pailang mentioned, and I think this is right,


00:35:03.400 --> 00:35:09.120
that the fall through on the pattern matching is the underscore.


00:35:09.120 --> 00:35:09.680
I think that's correct.


00:35:09.680 --> 00:35:11.720
>> Is that the default? I think that's the default case,


00:35:11.720 --> 00:35:13.120
not the fall through. Is that right?


00:35:13.120 --> 00:35:15.320
>> Right. Not the fall through, the default case.


00:35:15.320 --> 00:35:15.920
>> Okay.


00:35:15.920 --> 00:35:19.680
>> Thanks. I don't think there is a way to, I don't know.


00:35:19.680 --> 00:35:21.000
There might be a way to fall through.


00:35:21.000 --> 00:35:23.160
There's always, I don't know.


00:35:23.160 --> 00:35:24.200
I haven't played with it yet.


00:35:24.200 --> 00:35:28.120
>> Yeah. Dean points out that we covered the one that you can ask why.


00:35:28.120 --> 00:35:30.160
Remember you'd ask why what?


00:35:30.160 --> 00:35:32.720
There's a bunch of Ws and we're coming up with


00:35:32.720 --> 00:35:35.760
the name of like a name for that,


00:35:35.760 --> 00:35:37.360
a better name for another,


00:35:37.360 --> 00:35:40.320
what we can ask like WTF or something like that.


00:35:40.320 --> 00:35:41.240
I don't remember what that's called,


00:35:41.240 --> 00:35:43.760
but sadly, that was a fun one.


00:35:43.760 --> 00:35:47.000
>> That'd be a great package name, Python WTF.


00:35:47.000 --> 00:35:49.520
>> Brian, is that it for our main topics?


00:35:49.520 --> 00:35:50.120
>> Yeah.


00:35:50.120 --> 00:35:52.960
>> Yeah. All right. You got any extras you want to cover?


00:35:52.960 --> 00:35:55.720
Yeah, I do as always, but yeah, how about you?


00:35:55.720 --> 00:35:58.560
>> Well, I don't know when it'll get released,


00:35:58.560 --> 00:35:59.440
but I just recorded it.


00:35:59.440 --> 00:36:00.960
But a few episodes ago,


00:36:00.960 --> 00:36:03.480
we talked about Python Adventure.


00:36:03.480 --> 00:36:05.000
So an adventure game,


00:36:05.000 --> 00:36:06.920
a text-based adventure in Python.


00:36:06.920 --> 00:36:12.920
But yeah, I got to talk to the creator on the testing code.


00:36:12.920 --> 00:36:15.280
So there'll be an upcoming testing code.


00:36:15.280 --> 00:36:16.960
I'll go in depth into that.


00:36:16.960 --> 00:36:18.000
So that'll be good.


00:36:18.000 --> 00:36:19.520
>> Yeah, very fun.


00:36:19.520 --> 00:36:20.840
>> How about you?


00:36:20.840 --> 00:36:22.740
>> Let's see. I got a couple of things.


00:36:22.740 --> 00:36:24.760
Let's see. This one.


00:36:24.760 --> 00:36:28.680
We talked about the Supreme Court ruling on Java,


00:36:28.680 --> 00:36:30.160
the Google versus Oracle,


00:36:30.160 --> 00:36:33.240
Or maybe for the Oracle versus Google, maybe how it should be said.


00:36:33.240 --> 00:36:39.240
But I think it's just in passing, interesting that Microsoft has now unveiled its own Java distribution,


00:36:39.240 --> 00:36:44.640
the Microsoft version of OpenJDK to compete with Oracle in the Java distribution space.


00:36:44.640 --> 00:36:49.400
I know that we're not really a Java podcast for sure, and I don't do any Java,


00:36:49.400 --> 00:36:53.960
but I think it's an interesting open source follow on to covering that last time.


00:36:53.960 --> 00:36:54.680
What do you think?


00:36:54.680 --> 00:36:58.000
I think this is going to be big.


00:36:58.000 --> 00:37:01.840
A lot of people already have Microsoft distributions all over their workplace.


00:37:01.840 --> 00:37:03.040
Yeah. Gwen?


00:37:03.040 --> 00:37:03.540
Yes.


00:37:03.540 --> 00:37:05.280
Any comments? Any thoughts?


00:37:05.280 --> 00:37:07.280
Oh, comments on Java?


00:37:07.280 --> 00:37:09.280
Yeah, yeah, yeah. On this thing? No, okay.


00:37:09.280 --> 00:37:12.400
I got a couple more and then I know you have some things to throw out there as well.


00:37:12.400 --> 00:37:15.760
PyCharm 2021.1 is out.


00:37:15.760 --> 00:37:18.880
It has a very colorful splash screen, which is always fun.


00:37:18.880 --> 00:37:23.840
But its main thing is it has much better support for Windows subsystem for Linux.


00:37:23.840 --> 00:37:28.140
It has better indexing, so much faster indexing.


00:37:28.140 --> 00:37:31.400
It does cool things like if you need to type,


00:37:31.400 --> 00:37:34.200
let's say you have requests installed,


00:37:34.200 --> 00:37:36.580
but you haven't imported it into the file.


00:37:36.580 --> 00:37:39.400
If you type RG,


00:37:39.400 --> 00:37:45.380
it very likely may propose to you request.get as an autocomplete option.


00:37:45.380 --> 00:37:49.880
If you choose it, it'll write import request and then autocomplete request.get


00:37:49.880 --> 00:37:52.540
all like in one tab completion.


00:37:52.540 --> 00:37:56.220
So they've like done some really cool stuff with the autocomplete to like kind of ramp that up.


00:37:56.220 --> 00:37:57.820
And there's a few other things as well.


00:37:57.820 --> 00:38:00.820
But yeah, anyway, if people are into that, check that out.


00:38:00.820 --> 00:38:03.780
We covered Beanie a couple times.


00:38:03.780 --> 00:38:07.660
We covered Beanie the first time introducing which is an ODM for MongoDB


00:38:07.660 --> 00:38:11.860
based on Pydantic, which is super cool by Roman Wright.


00:38:11.860 --> 00:38:17.380
And then I said, I reached out to him and said, oh, that's great, but you should have a way to add indexes.


00:38:17.380 --> 00:38:19.260
So he did, which was really cool.


00:38:19.260 --> 00:38:21.180
And Gwyn just mentioned migration.


00:38:21.180 --> 00:38:25.500
And so he just added migrations for Beanie as well.


00:38:25.500 --> 00:38:27.420
And there's some real interesting ways to


00:38:27.420 --> 00:38:28.860
like write your migrations


00:38:28.860 --> 00:38:31.680
and convert from one schema to another.


00:38:31.680 --> 00:38:33.740
So basically you say, here's the old model,


00:38:33.740 --> 00:38:35.340
here's the new model, fix it.


00:38:35.340 --> 00:38:38.100
Is more or less the way that you say that.


00:38:38.100 --> 00:38:40.820
So yeah, that's, it's pretty cool.


00:38:40.820 --> 00:38:43.220
We already covered it, but definitely


00:38:43.220 --> 00:38:45.660
just a neat thing to see that he's adding it.


00:38:45.660 --> 00:38:48.140
So congrats on that, seeing that thing grow.


00:38:48.140 --> 00:38:49.420
Gwyn, I know you got a couple of things


00:38:49.420 --> 00:38:54.100
want to talk about mem.dev. That's a really cool thing. I didn't know about this before,


00:38:54.100 --> 00:38:56.100
but I checked it out when you put it in the show notes.


00:38:56.100 --> 00:39:02.360
Yeah, it's basically a spaced repetition learning system, but built specifically for developers.


00:39:02.360 --> 00:39:08.260
So a lot of people use Anki, which is its own algorithm. I also use Anki synced across


00:39:08.260 --> 00:39:14.220
my desktop and mobile phone and everything to learn different concepts, mostly programming,


00:39:14.220 --> 00:39:15.920
or science, all of that stuff.


00:39:15.920 --> 00:39:19.040
But one thing I like about also using mem.dev


00:39:19.040 --> 00:39:22.500
is that there's a browser plugin


00:39:22.500 --> 00:39:24.940
and I can directly copy snippets


00:39:24.940 --> 00:39:27.540
from places like Stack Overflow.


00:39:27.540 --> 00:39:29.100
In all those coding boxes,


00:39:29.100 --> 00:39:32.300
it will have a mem.dev icon in the corner


00:39:32.300 --> 00:39:33.700
of any coding box,


00:39:33.700 --> 00:39:36.080
and I can just copy the snippet


00:39:36.080 --> 00:39:40.060
to make into a card later on mem.dev.


00:39:40.060 --> 00:39:41.720
Another really cool feature


00:39:41.720 --> 00:39:44.600
is it lets you practice keyboard shortcuts now.


00:39:44.600 --> 00:39:48.780
So to get faster and better as a developer,


00:39:48.780 --> 00:39:51.160
it's really good to practice


00:39:51.160 --> 00:39:53.560
different kinds of keyboard shortcuts.


00:39:53.560 --> 00:39:56.560
Also, I find it helpful because things like Django


00:39:56.560 --> 00:40:00.120
have a massive API, and as a consultant,


00:40:00.120 --> 00:40:02.680
I feel like I'm being pulled in so many directions.


00:40:02.680 --> 00:40:06.800
It's really hard for me to keep up with everything I'm doing


00:40:06.800 --> 00:40:09.280
and still feel like I'm really good


00:40:09.280 --> 00:40:11.320
at the technologies I'm using.


00:40:11.320 --> 00:40:14.740
So that's why I'm using supplementary resources


00:40:14.740 --> 00:40:16.920
like these spaced repetition learning systems


00:40:16.920 --> 00:40:20.680
so I don't forget different parts of the API


00:40:20.680 --> 00:40:22.320
even if I haven't used it in a couple months


00:40:22.320 --> 00:40:25.360
'cause I'll have to recall that for a future project


00:40:25.360 --> 00:40:26.600
or something like that.


00:40:26.600 --> 00:40:29.680
- Yeah, so I looked at this and you can go to places


00:40:29.680 --> 00:40:32.800
and sort of save these web snippets


00:40:32.800 --> 00:40:34.640
and then turn them into stuff you wanna remember


00:40:34.640 --> 00:40:36.240
and practice almost like flashcards.


00:40:36.240 --> 00:40:38.560
So one example is if I'm on Stack Overflow


00:40:38.560 --> 00:40:40.720
and I see some code, I can go to that code thing


00:40:40.720 --> 00:40:43.500
say, make this a snippet, and then I could even upgrade that


00:40:43.500 --> 00:40:46.020
to this repetition practice.


00:40:46.020 --> 00:40:47.080
Yeah, that's pretty neat.


00:40:47.080 --> 00:40:48.340
- Yeah.


00:40:48.340 --> 00:40:49.180
- Cool.


00:40:49.180 --> 00:40:52.820
- And then what about graphing Django?


00:40:52.820 --> 00:40:57.540
- Yeah, so this probably isn't a secret to anybody.


00:40:57.540 --> 00:41:01.740
So it's basically kind of the standard package


00:41:01.740 --> 00:41:04.900
to be able to use GraphQL with Django.


00:41:04.900 --> 00:41:06.740
But as I've been using it more and more,


00:41:06.740 --> 00:41:10.300
'cause I use mostly Django REST framework,


00:41:10.300 --> 00:41:12.740
But now that I'm using Graphene Django,


00:41:12.740 --> 00:41:14.900
it's like, oh, this is so nice.


00:41:14.900 --> 00:41:17.060
You know, I don't have to update


00:41:17.060 --> 00:41:19.340
and manage all of these different endpoints.


00:41:19.340 --> 00:41:21.240
I just have one endpoint,


00:41:21.240 --> 00:41:23.700
and then I'm managing, you know,


00:41:23.700 --> 00:41:28.020
how my data gets sent back


00:41:28.020 --> 00:41:31.300
from my different schemas and stuff.


00:41:31.300 --> 00:41:33.480
I feel like as your application grows,


00:41:33.480 --> 00:41:37.340
it's much more easy to manage and maintain


00:41:37.340 --> 00:41:41.560
with GraphQL than with the standard REST interface.


00:41:41.560 --> 00:41:44.160
So that's something that I've been playing around with a lot.


00:41:44.160 --> 00:41:46.780
I want to, before I use it in a professional project,


00:41:46.780 --> 00:41:48.220
I want to kind of get better


00:41:48.220 --> 00:41:51.480
with using authentication with it.


00:41:51.480 --> 00:41:56.220
So there is kind of a standard library for Graphene Django.


00:41:56.220 --> 00:41:58.260
I think it's called Graphene Django Auth


00:41:58.260 --> 00:42:00.700
and it uses JWT tokens.


00:42:00.700 --> 00:42:04.020
So I'm gonna play around with that a little bit soon.


00:42:04.020 --> 00:42:05.100
- Yeah, very cool.


00:42:05.100 --> 00:42:09.640
- Yeah, so it's Django enhancement built upon Graphene itself.


00:42:09.640 --> 00:42:10.480
- Yes.


00:42:10.480 --> 00:42:11.560
- Very cool.


00:42:11.560 --> 00:42:15.220
And Brian, out in the live stream,


00:42:15.220 --> 00:42:16.760
who was it that told us?


00:42:16.760 --> 00:42:17.920
It was Dean.


00:42:17.920 --> 00:42:21.200
Dean told us that we did in fact cover Friendly,


00:42:21.200 --> 00:42:24.140
the Friendly library, which allows you to ask,


00:42:24.140 --> 00:42:27.400
it gives you, when it crashes, you get,


00:42:27.400 --> 00:42:30.000
what is it, like a little REPL type thing


00:42:30.000 --> 00:42:31.640
that you can go ask questions about.


00:42:31.640 --> 00:42:34.000
- Yeah, that's the one where you're gonna ask who, what,


00:42:34.000 --> 00:42:36.600
- Yeah, exactly, yeah.


00:42:36.600 --> 00:42:38.040
- I guess maybe not who, but.


00:42:38.040 --> 00:42:38.880
- Yeah, perfect.


00:42:38.880 --> 00:42:39.920
- That's interesting.


00:42:39.920 --> 00:42:41.360
- That's it for this one.


00:42:41.360 --> 00:42:43.600
- Well, thanks a lot for joining us, Gwen.


00:42:43.600 --> 00:42:44.440
- Yeah, thank you.


00:42:44.440 --> 00:42:45.260
- It was a lot of fun.


00:42:45.260 --> 00:42:46.100
- Yeah, Gwen, it was great to have you here.


00:42:46.100 --> 00:42:47.120
Thanks so much for being here


00:42:47.120 --> 00:42:50.600
and keep up the good work on YouTube and everywhere else.


00:42:50.600 --> 00:42:51.800
- Yeah, thanks, Michael.


00:42:51.800 --> 00:42:52.760
Thanks, Brian.


00:42:52.760 --> 00:42:53.600
- Yeah, you bet.


00:42:53.600 --> 00:42:54.420
Bye, Brian.

