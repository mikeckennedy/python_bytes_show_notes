
00:00:00.000 --> 00:00:07.520
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 133


00:00:07.520 --> 00:00:10.560
recorded May 30th, 2019. I'm Michael Kennedy.


00:00:10.560 --> 00:00:11.520
And I'm Brian Okken.


00:00:11.520 --> 00:00:17.360
And this episode is brought to you by DigitalOcean. Check them out at pythonbytes.fm/digitalocean. More on that later.


00:00:17.360 --> 00:00:18.560
Brian, how you been?


00:00:18.560 --> 00:00:20.080
I'm doing well. How about you?


00:00:20.080 --> 00:00:29.360
I am as well. The summer is here. The weather is nice. Getting to finally emerge from being stuck by the rain inside for all these years or all these


00:00:29.360 --> 00:00:34.880
months, I guess, in Portland. So very, very happy. Everyone's got a little bit of a smile from the weather, I think.


00:00:34.880 --> 00:00:36.280
Yeah, definitely. It's nice.


00:00:36.280 --> 00:00:44.720
You know what I think also might make you smile is knowing that a bunch of cool features are already included in Python before you have to even go grab a library.


00:00:44.720 --> 00:00:58.240
Yep, there are a whole bunch of built-ins. And I'm highlighting an article from Trey Hunter called Python built-ins worth learning. And this comes from when he does a lot of training new people into Python.


00:00:58.240 --> 00:01:01.740
and some people sometimes feel a little overwhelmed


00:01:01.740 --> 00:01:04.240
about all the stuff they need to learn.


00:01:04.240 --> 00:01:06.240
This is an interesting quote he has.


00:01:06.240 --> 00:01:10.740
He said there's 69 built-in keywords or built-in functions


00:01:10.740 --> 00:01:13.240
with Python. There's more keywords, but anyway.


00:01:13.240 --> 00:01:17.240
He said he estimates that most developers only need about 30 of them,


00:01:17.240 --> 00:01:21.240
but the 30 that you need is different depending on what you're doing.


00:01:21.240 --> 00:01:24.240
And I think that's probably fair.


00:01:24.240 --> 00:01:31.840
So he split all of these 69 keywords into a bunch of categories. I guess there's five categories commonly known


00:01:31.840 --> 00:01:35.480
overlooked by beginners learn it later and


00:01:35.480 --> 00:01:42.000
Maybe learn it eventually and you'll likely not need these and for the most part


00:01:42.000 --> 00:01:47.520
I agreed with them and I think it's kind of a fun thing to look at especially somebody new to the language or if you're


00:01:47.520 --> 00:01:50.680
Helping somebody out. I'm not gonna go through the entire list


00:01:50.680 --> 00:01:57.720
It's a big list, but I wanted to highlight a couple of them the ones that he said are often overlooked by beginners are


00:01:57.720 --> 00:02:00.220
some


00:02:00.220 --> 00:02:06.360
enumerate zip bool reversed sorted min max any and all and


00:02:06.360 --> 00:02:10.900
Of those I think people will figure out that there's probably a way to do this


00:02:10.900 --> 00:02:16.700
But the the zip feature is something that people don't get right away. And so practicing that a little bit is good


00:02:17.340 --> 00:02:20.060
enumerate also, but be careful.


00:02:20.060 --> 00:02:23.940
- Yeah, enumerate stands out as like a super important one


00:02:23.940 --> 00:02:27.060
that you can have a lot of non-Pythonic patterns.


00:02:27.060 --> 00:02:30.540
Like if I wanna do a loop over some collection


00:02:30.540 --> 00:02:33.140
and I wanna print out like, number one is this,


00:02:33.140 --> 00:02:34.740
number two is that, kind of like generating


00:02:34.740 --> 00:02:36.180
this ordered list that he has right here


00:02:36.180 --> 00:02:38.060
on his article, right?


00:02:38.060 --> 00:02:40.340
You might go, well, the for-in loop doesn't work


00:02:40.340 --> 00:02:42.860
because I don't get the index or whatever, right?


00:02:42.860 --> 00:02:44.300
There's a bunch of nice little cases


00:02:44.300 --> 00:02:46.020
where enumerate really, really helps.


00:02:46.020 --> 00:02:49.060
Yeah, and there's a good list for somebody to read through.


00:02:49.060 --> 00:02:50.740
He also got descriptions of all of them.


00:02:50.740 --> 00:02:53.740
It's a fairly lengthy article, but it reads pretty quick.


00:02:53.740 --> 00:02:56.100
All the stuff you already know, you'll just skim past,


00:02:56.100 --> 00:02:58.820
and the stuff that you don't stands out.


00:02:58.820 --> 00:03:01.100
I didn't know about any and all at first


00:03:01.100 --> 00:03:04.460
for if there's any values in a list that are true


00:03:04.460 --> 00:03:07.240
or making sure that all of them are true.


00:03:07.240 --> 00:03:09.340
Those sometimes are useful.


00:03:09.340 --> 00:03:11.340
And then I wanted to jump to a little bit.


00:03:11.340 --> 00:03:14.360
There's in his category of learn it later,


00:03:14.360 --> 00:03:15.340
there's a bunch of them,


00:03:15.340 --> 00:03:19.940
But one of the things in there is a get attr for get attribute.


00:03:19.940 --> 00:03:20.900
I kind of disagree.


00:03:20.900 --> 00:03:24.300
I think that you ought to learn that a little bit earlier because the behavior


00:03:24.300 --> 00:03:28.940
of getting an attribute and then defaulting to a different value is very


00:03:28.940 --> 00:03:31.340
important and it's hard to do otherwise.


00:03:31.340 --> 00:03:33.140
>> Yeah. >> If you're going to get an attribute


00:03:33.140 --> 00:03:36.300
of an object and it might not have that attribute, but


00:03:36.300 --> 00:03:41.380
you know what value you want anyway, get attr is great.


00:03:41.380 --> 00:03:48.580
I like using overloading get adder for basically nicer dictionaries, maybe with default values.


00:03:48.580 --> 00:03:53.720
So we have default dict and we have some other things like regular dicts and so on.


00:03:53.720 --> 00:03:57.840
But if you want to kind of treat them like JavaScript type of objects where you can just


00:03:57.840 --> 00:04:03.160
say object dot value, right, you can't do that with normal dictionaries.


00:04:03.160 --> 00:04:06.300
And even with default dictionaries, you can't make it give the default value.


00:04:06.300 --> 00:04:09.660
But if you say derive from dictionary,


00:04:09.660 --> 00:04:11.740
but then also implement git adder,


00:04:11.740 --> 00:04:13.040
you could actually add it


00:04:13.040 --> 00:04:15.780
so it has that nice little cleaner syntax, I think.


00:04:15.780 --> 00:04:16.700
- Yeah, you can.


00:04:16.700 --> 00:04:18.500
I often just use dictionaries,


00:04:18.500 --> 00:04:21.100
but then I use the git accessor.


00:04:21.100 --> 00:04:21.940
- Yeah, exactly.


00:04:21.940 --> 00:04:23.820
- That you can get a default for.


00:04:23.820 --> 00:04:24.660
- Yeah, cool.


00:04:24.660 --> 00:04:25.480
So this is a good one.


00:04:25.480 --> 00:04:27.180
I definitely think it's worth skimming over.


00:04:27.180 --> 00:04:28.900
Even as somebody who's not a beginner,


00:04:28.900 --> 00:04:31.700
it's kind of like, all right, well, let's try this.


00:04:31.700 --> 00:04:34.220
So here's the ones I likely don't need,


00:04:34.220 --> 00:04:35.500
or maybe I don't really know.


00:04:35.500 --> 00:04:36.920
Let me go through and see what I know.


00:04:36.920 --> 00:04:38.140
Oh, well, there's round.


00:04:38.140 --> 00:04:39.060
I know that one.


00:04:39.060 --> 00:04:40.780
There's ABS and hash and objects.


00:04:40.780 --> 00:04:41.940
Okay, all those.


00:04:41.940 --> 00:04:43.180
Oh, wait, there's div mod.


00:04:43.180 --> 00:04:44.020
What is div mod?


00:04:44.020 --> 00:04:44.860
And for example, right?


00:04:44.860 --> 00:04:45.940
So it's kind of fun to just go through


00:04:45.940 --> 00:04:47.580
and see which ones you do know,


00:04:47.580 --> 00:04:48.940
'cause there's certainly some I don't.


00:04:48.940 --> 00:04:50.700
- Yeah, and it's also, I think it's a fun article


00:04:50.700 --> 00:04:52.680
for people to bookmark, and it's just,


00:04:52.680 --> 00:04:55.160
as they're learning, come back to every couple months


00:04:55.160 --> 00:04:56.420
and learn something new.


00:04:56.420 --> 00:04:57.500
- Yeah, absolutely.


00:04:57.500 --> 00:05:01.460
So a while ago, Brian, we spoke about GitHub


00:05:01.460 --> 00:05:02.980
being acquired by Microsoft,


00:05:02.980 --> 00:05:06.400
And that actually created quite the kerfuffle.


00:05:06.400 --> 00:05:09.860
A lot of folks saw that as like an ominous sign.


00:05:09.860 --> 00:05:13.100
I personally didn't see it that dark.


00:05:13.100 --> 00:05:15.100
I thought it was actually kind of a mixed bag,


00:05:15.100 --> 00:05:18.420
but looking more into it, like the state of GitHub,


00:05:18.420 --> 00:05:20.740
I feel like this is probably a pretty positive thing


00:05:20.740 --> 00:05:22.380
in the end, right?


00:05:22.380 --> 00:05:23.220
Do you remember that?


00:05:23.220 --> 00:05:26.180
We're starting to see consequences, outcomes, benefits,


00:05:26.180 --> 00:05:29.740
however you want to perceive this next round of announcements


00:05:29.740 --> 00:05:31.180
but there's actually two announcements


00:05:31.180 --> 00:05:34.500
that I'm gonna highlight in this show about that.


00:05:34.500 --> 00:05:37.820
And the first one is, I think, is really cool.


00:05:37.820 --> 00:05:40.540
So, for example, we have a Patreon for Python Bytes,


00:05:40.540 --> 00:05:42.100
and the way that works is people can say,


00:05:42.100 --> 00:05:43.620
I would like to support you guys doing this,


00:05:43.620 --> 00:05:45.620
we'll donate a dollar or two a month, whatever, right?


00:05:45.620 --> 00:05:47.100
Something small like that.


00:05:47.100 --> 00:05:49.500
And there's been a lot of failed attempts


00:05:49.500 --> 00:05:50.860
for this in open source.


00:05:50.860 --> 00:05:54.520
So like, hey, on my open source, read the docs,


00:05:54.520 --> 00:05:56.900
I'm gonna put a PayPal button that says donate.


00:05:56.900 --> 00:06:01.100
And it probably reaped like a massive $39


00:06:01.100 --> 00:06:02.640
that year or something, right?


00:06:02.640 --> 00:06:05.480
Like it just, it's not a way in which people


00:06:05.480 --> 00:06:06.540
do those types of things.


00:06:06.540 --> 00:06:10.120
But I think Patreon legitimately works, right?


00:06:10.120 --> 00:06:11.640
At least for folks who are really,


00:06:11.640 --> 00:06:14.340
like creators who are really focused on that.


00:06:14.340 --> 00:06:16.460
I've seen some really successful people there.


00:06:16.460 --> 00:06:20.420
So GitHub has just launched this thing called Sponsors.


00:06:20.420 --> 00:06:21.260
Have you heard of this?


00:06:21.260 --> 00:06:22.620
- Yeah, and I'm pretty excited about it.


00:06:22.620 --> 00:06:23.860
- I'm pretty excited about it too.


00:06:23.860 --> 00:06:25.900
And first, when I first heard the news,


00:06:25.900 --> 00:06:28.720
I thought, okay, GitHub Sponsors is a way


00:06:28.720 --> 00:06:30.640
to sponsor open source projects.


00:06:30.640 --> 00:06:32.880
So maybe I'm a big fan of Flask.


00:06:32.880 --> 00:06:36.000
So I go to Flask and I can give money to them.


00:06:36.000 --> 00:06:38.000
Or maybe I'd like to see Pyramid doing more,


00:06:38.000 --> 00:06:39.800
so I'll go donate some money to Pyramid


00:06:39.800 --> 00:06:41.120
or something like that.


00:06:41.120 --> 00:06:44.120
But it turns out, it is like this Patreon model for GitHub,


00:06:44.120 --> 00:06:48.400
but it's not just for projects, it's also for people,


00:06:48.400 --> 00:06:49.600
which I thought was pretty cool.


00:06:49.600 --> 00:06:51.520
So anyone who contributes to open source,


00:06:51.520 --> 00:06:54.760
whether through code, documentation, leadership, mentorship,


00:06:54.760 --> 00:06:56.920
Designe is eligible to be sponsored.


00:06:56.920 --> 00:06:58.480
- Yeah, that's pretty cool.


00:06:58.480 --> 00:07:00.200
Is it in like a beta or something?


00:07:00.200 --> 00:07:02.440
You can't just go sign up, you've got to like,


00:07:02.440 --> 00:07:04.560
request early access, or I don't know


00:07:04.560 --> 00:07:06.440
what the terminology they used there was.


00:07:06.440 --> 00:07:08.560
But yeah, it's not fully open, but it's getting started.


00:07:08.560 --> 00:07:11.280
- There's also some things about their matching funds


00:07:11.280 --> 00:07:12.680
and the fees.


00:07:12.680 --> 00:07:13.520
- Yeah, that's pretty sweet.


00:07:13.520 --> 00:07:16.800
So they said there will be no fees charged,


00:07:16.800 --> 00:07:18.720
all right, like Patreon, I don't know what they take,


00:07:18.720 --> 00:07:21.240
like 7%, 10%, something like that,


00:07:21.240 --> 00:07:23.520
to run Patreon as part of what they donate.


00:07:23.520 --> 00:07:26.000
So GitHub says 100% of the fees go to developers,


00:07:26.000 --> 00:07:29.680
or 100% of the money that's given goes to developers.


00:07:29.680 --> 00:07:32.260
There's no fees other than credit card fees,


00:07:32.260 --> 00:07:34.960
which like the world just has to accept 3%


00:07:34.960 --> 00:07:37.100
on all transactions apparently.


00:07:37.100 --> 00:07:42.100
But I believe there's a little like star in the first year


00:07:42.100 --> 00:07:43.160
or something like that.


00:07:43.160 --> 00:07:45.300
Like I don't think that's a permanent thing.


00:07:45.300 --> 00:07:48.100
Also a little star in the first year,


00:07:48.100 --> 00:07:49.340
maybe not the first year of the program,


00:07:49.340 --> 00:07:53.080
but first year of your sponsorship is GitHub will match.


00:07:53.080 --> 00:07:56.140
So suppose you get $6,000, no that's not,


00:07:56.140 --> 00:07:57.820
yeah, let's suppose you get $6,000.


00:07:57.820 --> 00:08:01.120
GitHub will match up to 5,000 of whatever you've gotten.


00:08:01.120 --> 00:08:03.700
So you would actually get 11,000 contributions that year.


00:08:03.700 --> 00:08:06.180
- That's really cool, and it also encourages people


00:08:06.180 --> 00:08:09.460
to even donate a small amount to a developer


00:08:09.460 --> 00:08:11.580
that they depend on because they know


00:08:11.580 --> 00:08:14.300
that that money's gonna get doubled.


00:08:14.300 --> 00:08:15.420
So that's pretty cool.


00:08:15.420 --> 00:08:17.140
- Yeah, I'm pretty excited about this.


00:08:17.140 --> 00:08:18.780
I think we need to wait 'til it becomes


00:08:18.780 --> 00:08:20.300
a little more public.


00:08:20.300 --> 00:08:22.620
I haven't seen anywhere I can go sponsor somebody.


00:08:22.620 --> 00:08:23.940
It's more like, hey, sign up,


00:08:23.940 --> 00:08:25.100
and I think they're building the list


00:08:25.100 --> 00:08:26.980
of people to be sponsored.


00:08:26.980 --> 00:08:29.700
But yeah, this is super cool news and I'm excited about it.


00:08:29.700 --> 00:08:32.700
I wonder how this will, if this will make open source


00:08:32.700 --> 00:08:36.140
even more viable in countries that don't have


00:08:36.140 --> 00:08:38.780
the same cost of living, but also not the same


00:08:38.780 --> 00:08:41.580
income levels as say, the US and Europe, right?


00:08:41.580 --> 00:08:42.460
Like the Western world, right?


00:08:42.460 --> 00:08:45.560
So if I live somewhere where the average monthly income


00:08:45.560 --> 00:08:49.440
is 500 bucks, if I can get 500 bucks in contributions


00:08:49.440 --> 00:08:51.940
on GitHub, right, maybe that's like a better way


00:08:51.940 --> 00:08:53.220
to spend my time, I don't know.


00:08:53.220 --> 00:08:54.420
It could be really interesting there.


00:08:54.420 --> 00:08:56.380
- Yeah, there should probably be like a list


00:08:56.380 --> 00:08:59.420
the Python people that are available for this


00:08:59.420 --> 00:09:01.060
so we could find them or something.


00:09:01.060 --> 00:09:03.820
- Yeah, it'd be really cool if there's some kind of list


00:09:03.820 --> 00:09:05.260
or some people could maybe send it in


00:09:05.260 --> 00:09:07.020
or put it in the comments or something.


00:09:07.020 --> 00:09:07.860
That would be great.


00:09:07.860 --> 00:09:09.180
- Yeah, cool. - Yeah, what's next, Brian?


00:09:09.180 --> 00:09:10.340
- One of the things I wanted to do


00:09:10.340 --> 00:09:12.100
is play with some REST frameworks.


00:09:12.100 --> 00:09:15.620
And so I ran across this article called


00:09:15.620 --> 00:09:20.620
Build a REST API in 30 Minutes with Django REST Framework.


00:09:20.620 --> 00:09:26.200
And it sounds like it'll fit within my lunch break.


00:09:26.200 --> 00:09:27.700
So this is nice.


00:09:27.700 --> 00:09:29.320
And so it's been at Garner,


00:09:29.320 --> 00:09:31.660
and it includes like from the very beginning,


00:09:31.660 --> 00:09:32.980
setting up a virtual environment,


00:09:32.980 --> 00:09:34.460
setting up Django,


00:09:34.460 --> 00:09:38.440
then creating a model in a database with the Django ORM.


00:09:38.440 --> 00:09:39.960
Is it ORM or ORM?


00:09:39.960 --> 00:09:41.180
How do people normally say that?


00:09:41.180 --> 00:09:43.540
- I think it goes either way, like SQL and SQL,


00:09:43.540 --> 00:09:46.660
but I think ORM is a little more popular,


00:09:46.660 --> 00:09:49.020
at least in the spaces I've heard people talk about.


00:09:49.020 --> 00:09:50.220
- And then setting up,


00:09:50.220 --> 00:09:52.620
installing and setting up the Django REST framework,


00:09:52.620 --> 00:09:56.020
and then serializing the model.


00:09:56.020 --> 00:09:58.980
Okay, I see I haven't read the article yet completely,


00:09:58.980 --> 00:10:00.700
so I'm not sure what this means.


00:10:00.700 --> 00:10:03.220
But then creating URI endpoints,


00:10:03.220 --> 00:10:05.780
is that universal resource?


00:10:05.780 --> 00:10:07.020
I don't know what that is.


00:10:07.020 --> 00:10:08.500
And how to serialize the data,


00:10:08.500 --> 00:10:10.540
but it's got pretty pictures and it goes through it


00:10:10.540 --> 00:10:12.740
in a little example of a hero database


00:10:12.740 --> 00:10:14.460
with a hero name and alias.


00:10:14.460 --> 00:10:16.520
So it's a fairly simple toy model,


00:10:16.520 --> 00:10:18.300
but I'm gonna use it to try to learn


00:10:18.300 --> 00:10:20.020
Django REST framework rather quickly.


00:10:20.020 --> 00:10:20.840
- Yeah, that's cool.


00:10:20.840 --> 00:10:22.220
Yeah, Django REST framework looks nice.


00:10:22.220 --> 00:10:23.500
I haven't done a whole lot with it,


00:10:23.500 --> 00:10:24.980
but it definitely seems nice,


00:10:24.980 --> 00:10:26.620
and this is a really good introduction.


00:10:26.620 --> 00:10:28.460
So, well done, Bennett.


00:10:28.460 --> 00:10:29.420
Speaking of well done,


00:10:29.420 --> 00:10:32.580
before we move on to the next news about GitHub,


00:10:32.580 --> 00:10:35.300
let me just tell you a little bit more about DigitalOcean.


00:10:35.300 --> 00:10:38.060
So, DigitalOcean has now made their Kubernetes,


00:10:38.060 --> 00:10:41.120
their managed Kubernetes cluster generally available.


00:10:41.120 --> 00:10:43.980
So, if you're trying to do Docker and containers


00:10:43.980 --> 00:10:46.980
and basically run your containers in production,


00:10:46.980 --> 00:10:50.180
Kubernetes is a super good option for that.


00:10:50.180 --> 00:10:53.020
And so, all you gotta do is go over to DigitalOcean,


00:10:53.020 --> 00:10:56.060
sign up, fire up their cluster, and it'll,


00:10:56.060 --> 00:10:56.980
you know, within a minute or two,


00:10:56.980 --> 00:10:58.220
you'll have your cluster up and running,


00:10:58.220 --> 00:11:01.980
and you can just start issuing Kubernetes commands to it,


00:11:01.980 --> 00:11:03.740
running your containers over there,


00:11:03.740 --> 00:11:04.900
and get your stuff all working.


00:11:04.900 --> 00:11:06.340
So definitely give that a shot.


00:11:06.340 --> 00:11:09.060
Check them out at pythonbytes.fm/digitalocean.


00:11:09.060 --> 00:11:11.620
Get a $50 credit for new users.


00:11:11.620 --> 00:11:14.660
So help support the show, and they're doing good stuff.


00:11:14.660 --> 00:11:16.340
We can definitely recommend it.


00:11:16.340 --> 00:11:18.780
I told you I have two pieces of news on GitHub.


00:11:18.780 --> 00:11:22.700
And the second one is that, have you heard of Dependabot?


00:11:22.700 --> 00:11:23.540
I have not.


00:11:23.540 --> 00:11:25.580
- So dependabot is interesting.


00:11:25.580 --> 00:11:29.660
The idea is that most open source stuff


00:11:29.660 --> 00:11:33.340
is built upon layers and layers and layers


00:11:33.340 --> 00:11:35.900
of little libraries, right?


00:11:35.900 --> 00:11:40.820
In Python we have PyPI, and if you pip install a thing,


00:11:40.820 --> 00:11:43.400
you know, that thing may pip install three other things


00:11:43.400 --> 00:11:46.100
as dependencies, and those may have two other ones, right?


00:11:46.100 --> 00:11:48.780
So if I pip install requests, it's going to install


00:11:48.780 --> 00:11:50.620
even like five or six other little things


00:11:50.620 --> 00:11:52.260
that it needs to do its job.


00:11:52.260 --> 00:11:53.740
for example, right?


00:11:53.740 --> 00:11:57.340
So knowing, is there some kind of security problem


00:11:57.340 --> 00:11:59.100
or is there even just a new version


00:11:59.100 --> 00:12:01.300
that maybe I would like to have of that


00:12:01.300 --> 00:12:03.800
would be really nice to know, right?


00:12:03.800 --> 00:12:06.540
If I could say somehow put it in my requirements files,


00:12:06.540 --> 00:12:08.740
you know, pin the versions in your requirement files,


00:12:08.740 --> 00:12:11.460
which is a good idea for apps, maybe not for libraries,


00:12:11.460 --> 00:12:13.040
but definitely for apps.


00:12:13.040 --> 00:12:15.340
So say these are the versions I'm working with


00:12:15.340 --> 00:12:17.020
in my website or whatever.


00:12:17.020 --> 00:12:18.780
If GitHub could say, hey, you know,


00:12:18.780 --> 00:12:21.340
there's a new version of the Stripe API,


00:12:21.340 --> 00:12:24.740
the Stripe package and hears its changes


00:12:24.740 --> 00:12:26.860
and help us automatically upgrade to that.


00:12:26.860 --> 00:12:28.180
That would be super cool.


00:12:28.180 --> 00:12:30.100
So that's basically what Dependabot does.


00:12:30.100 --> 00:12:32.040
It looks at your requirements,


00:12:32.040 --> 00:12:33.780
and I believe it's not just for Python.


00:12:33.780 --> 00:12:36.540
Like it could look at your NPM for your static JavaScript


00:12:36.540 --> 00:12:37.760
and all that kind of stuff, right?


00:12:37.760 --> 00:12:41.380
So sort of spanning all the different dependencies


00:12:41.380 --> 00:12:44.220
that you might have across even programming languages.


00:12:44.220 --> 00:12:46.420
It could say, hey, this week there's a whole bunch


00:12:46.420 --> 00:12:50.480
of changes and it will actually create a pull request.


00:12:50.480 --> 00:12:53.540
So, checks for updates, then it'll create a pull request


00:12:53.540 --> 00:12:55.240
for stuff that's out of date,


00:12:55.240 --> 00:12:58.400
individual pull requests for each dependency, right?


00:12:58.400 --> 00:12:59.680
That's kind of cool, I guess,


00:12:59.680 --> 00:13:01.600
if you can just check them all off.


00:13:01.600 --> 00:13:04.420
And then, basically, that should trigger your CI, right,


00:13:04.420 --> 00:13:05.940
as it does for normal PRs.


00:13:05.940 --> 00:13:08.520
Verify everything's working, you can check that in,


00:13:08.520 --> 00:13:10.480
accept, you know, merge it, and keep rolling.


00:13:10.480 --> 00:13:11.320
So that's pretty cool, huh?


00:13:11.320 --> 00:13:12.320
- Yeah, definitely.


00:13:12.320 --> 00:13:15.200
If you got your CI set up to test all merge requests,


00:13:15.200 --> 00:13:17.160
then it'll just go ahead and run your tests against it,


00:13:17.160 --> 00:13:18.000
make sure that--


00:13:18.000 --> 00:13:20.020
- Right, right, and probably the first step of your test


00:13:20.020 --> 00:13:21.300
is to create a virtual environment


00:13:21.300 --> 00:13:22.860
and pip install the requirements,


00:13:22.860 --> 00:13:25.220
or npm init or npm install them,


00:13:25.220 --> 00:13:26.860
or whatever you're gonna do, right?


00:13:26.860 --> 00:13:27.700
So that's all good.


00:13:27.700 --> 00:13:29.120
What does this have to do with GitHub?


00:13:29.120 --> 00:13:31.740
Well, GitHub has now bought Dependabot,


00:13:31.740 --> 00:13:34.380
which used to be a commercial paid service,


00:13:34.380 --> 00:13:36.020
and now it's a free service of GitHub.


00:13:36.020 --> 00:13:37.540
- Yeah, that's actually pretty cool.


00:13:37.540 --> 00:13:39.460
- Yeah, so I think it's pretty awesome.


00:13:39.460 --> 00:13:41.380
Basically said, if you already have an account


00:13:41.380 --> 00:13:43.620
at Dependabot, well, that's free.


00:13:43.620 --> 00:13:44.920
And if you're not using it,


00:13:44.920 --> 00:13:47.260
you should definitely think about something


00:13:47.260 --> 00:13:48.180
to this effect, right?


00:13:48.180 --> 00:13:49.740
Think about using something like this,


00:13:49.740 --> 00:13:53.380
because I use something called pyup at pyup.io


00:13:53.380 --> 00:13:56.460
and it's been around a little more Python focused


00:13:56.460 --> 00:13:58.860
since maybe even before Dependabot


00:13:58.860 --> 00:14:00.420
and I definitely like it.


00:14:00.420 --> 00:14:02.080
I'm not sure what this announcement means for it.


00:14:02.080 --> 00:14:04.500
It could be negative news for the PyUp folks,


00:14:04.500 --> 00:14:06.000
I would imagine.


00:14:06.000 --> 00:14:08.820
But the service that both of these are providing


00:14:08.820 --> 00:14:09.660
is really valuable.


00:14:09.660 --> 00:14:11.320
Like on Monday mornings, I wake up,


00:14:11.320 --> 00:14:13.980
I go check my email and I see all the changes.


00:14:13.980 --> 00:14:15.340
Sometimes they're super minor,


00:14:15.340 --> 00:14:17.300
like Boto Core has been updated.


00:14:17.300 --> 00:14:19.060
Like okay, I don't really care that much,


00:14:19.060 --> 00:14:20.620
but I guess I'll accept that, right?


00:14:20.620 --> 00:14:23.300
But other times it's, there's been some bug fixed


00:14:23.300 --> 00:14:25.300
or there was a security vulnerability that's been fixed


00:14:25.300 --> 00:14:26.220
and it's really helpful.


00:14:26.220 --> 00:14:28.380
So just, you know, you get in the habit of just like


00:14:28.380 --> 00:14:30.540
accepting the merge, the pull requests


00:14:30.540 --> 00:14:32.700
once a week or whatever and it's good.


00:14:32.700 --> 00:14:35.380
- As you said, as they're coming in one at a time


00:14:35.380 --> 00:14:37.260
and you're accepting them,


00:14:37.260 --> 00:14:40.540
if something goes through and starts breaking stuff,


00:14:40.540 --> 00:14:42.260
you can roll back pretty easily.


00:14:42.260 --> 00:14:43.340
- Yeah, yeah, absolutely.


00:14:43.340 --> 00:14:45.260
And then like, yeah, the act of actually


00:14:45.260 --> 00:14:50.060
quickly rolling back is just to like revert requirements.txt


00:14:50.060 --> 00:14:53.140
or the pyproject.toml or whatever it is, right?


00:14:53.140 --> 00:14:54.780
It's a minor, minor change.


00:14:54.780 --> 00:14:55.900
Cool.


00:14:55.900 --> 00:14:59.260
So we've talked a lot about legacy Python, modern Python,


00:14:59.260 --> 00:15:01.100
Python 2 versus Python 3.


00:15:01.100 --> 00:15:04.020
We've kind of moved beyond that debate, or have we?


00:15:04.020 --> 00:15:05.020
(laughing)


00:15:05.020 --> 00:15:06.660
- Well, I don't know.


00:15:06.660 --> 00:15:09.140
I was wondering, questioning whether it was too painful


00:15:09.140 --> 00:15:11.980
still, but you know, the transition's been going on


00:15:11.980 --> 00:15:14.940
for a while, so I think it's okay to joke about it.


00:15:14.940 --> 00:15:18.780
And I think it's a guy named Charles Leifer.


00:15:18.780 --> 00:15:22.260
He's the person behind the Pwe.org,


00:15:22.260 --> 00:15:25.420
but he wrote an article called


00:15:25.420 --> 00:15:29.300
New Features Planned for Python 4.0.


00:15:29.300 --> 00:15:31.700
And this is totally a spoof article.


00:15:31.700 --> 00:15:33.860
It's not real, but it's funny.


00:15:33.860 --> 00:15:35.600
And it made me laugh.


00:15:35.600 --> 00:15:36.500
So one of my favorite,


00:15:36.500 --> 00:15:38.260
I just pulled out a few of the favorites.


00:15:38.260 --> 00:15:42.100
He has a long list of things that are humorously going in 4.0


00:15:42.100 --> 00:15:43.420
that are not really.


00:15:43.420 --> 00:15:45.140
So PEP 8 has been updated.


00:15:45.140 --> 00:15:48.340
There's the long, or will be updated,


00:15:48.340 --> 00:15:50.300
the long debate between whether or not


00:15:50.300 --> 00:15:53.060
you should have 79 characters or 100 characters.


00:15:53.060 --> 00:15:55.580
They're compromising at 89 and a half.


00:15:55.580 --> 00:15:57.820
- Nice.


00:15:57.820 --> 00:16:00.460
You can only put skinny characters on the last part,


00:16:00.460 --> 00:16:02.840
like an exclamation or a dot,


00:16:02.840 --> 00:16:04.260
but definitely not like a zero.


00:16:04.260 --> 00:16:05.660
- Yeah, no.


00:16:05.660 --> 00:16:07.220
Or capital Z, you can't do that.


00:16:07.220 --> 00:16:08.040
- Nope.


00:16:08.040 --> 00:16:10.740
- So all new libraries and standard lib modules


00:16:10.740 --> 00:16:12.860
must include the phrase for humans


00:16:12.860 --> 00:16:13.860
somewhere in their title.


00:16:13.860 --> 00:16:14.940
(laughing)


00:16:14.940 --> 00:16:15.780
- I agree.


00:16:15.780 --> 00:16:17.100
- Type hinting has been extended


00:16:17.100 --> 00:16:19.660
to provide even fewer tangible benefits


00:16:19.660 --> 00:16:21.740
and will be called type whispering.


00:16:21.740 --> 00:16:23.420
(laughing)


00:16:23.420 --> 00:16:24.420
- I do like that name.


00:16:24.420 --> 00:16:26.060
- And you can make stuff go faster


00:16:26.060 --> 00:16:28.860
by adding async before every other keyword,


00:16:28.860 --> 00:16:32.160
including if, when, if and all those things,


00:16:32.160 --> 00:16:34.220
you can just add async before everything.


00:16:34.220 --> 00:16:35.940
It'll make it go faster.


00:16:35.940 --> 00:16:39.860
And then notable items left out of 4.0,


00:16:39.860 --> 00:16:41.420
still no switch statement


00:16:41.420 --> 00:16:44.320
and absolutely no improvements to packaging.


00:16:44.320 --> 00:16:46.720
- That's pretty funny.


00:16:46.720 --> 00:16:47.680
I like it, I like it.


00:16:47.680 --> 00:16:49.400
Yeah, that's a good article.


00:16:49.400 --> 00:16:50.320
- Yeah. - I don't know.


00:16:50.320 --> 00:16:51.720
- 89 and type whispering.


00:16:51.720 --> 00:16:54.440
- A type whispering is pretty sweet.


00:16:54.440 --> 00:16:57.080
All right, so last item I wanna cover for us today


00:16:57.080 --> 00:16:59.600
is something called Black Sheep.


00:16:59.600 --> 00:17:01.800
Now, I felt like for a long time,


00:17:01.800 --> 00:17:06.200
like the web framework story in Python was fairly stable.


00:17:06.200 --> 00:17:08.800
Django, Flask, Pyramid, some of the other stuff,


00:17:08.800 --> 00:17:10.920
Bottle and a few things had kind of been around.


00:17:10.920 --> 00:17:13.120
They were kind of doing their thing,


00:17:13.120 --> 00:17:18.120
but this whole need for modern asynchronous framework


00:17:18.120 --> 00:17:21.920
involving say maybe type hinting for validation


00:17:21.920 --> 00:17:24.480
or the async keyword,


00:17:24.480 --> 00:17:26.200
it's just like unleashed


00:17:26.200 --> 00:17:28.160
all these little web frameworks, right?


00:17:28.160 --> 00:17:31.480
So we've got Molten, Sanic, Gepronto,


00:17:31.480 --> 00:17:34.160
a whole bunch of others, API star.


00:17:34.160 --> 00:17:37.680
Well, there's another one called Blacksheep that is here


00:17:37.680 --> 00:17:39.560
and people can check that one out.


00:17:39.560 --> 00:17:41.080
So Blacksheet looks pretty cool.


00:17:41.080 --> 00:17:46.080
It is a fast HTTP server and client micro framework.


00:17:46.080 --> 00:17:50.240
So it has both the server side and the client side.


00:17:50.240 --> 00:17:52.680
So it's both like trying to be kind of a replacement


00:17:52.680 --> 00:17:54.800
for Flask, but also for requests.


00:17:54.800 --> 00:17:57.640
Yeah, and it's built on AsyncIO and Cython,


00:17:57.640 --> 00:18:01.040
which we talked about last week, UV loop and HTTP tools.


00:18:01.040 --> 00:18:04.220
So it's kind of bringing in a lot of good stuff in it.


00:18:04.220 --> 00:18:06.400
One of the things you'll notice really quickly


00:18:06.400 --> 00:18:09.440
when you work with it is it's Flask-like.


00:18:09.440 --> 00:18:14.400
This I think is one of the more interesting parts


00:18:14.400 --> 00:18:17.280
of just thinking about these web frameworks.


00:18:17.280 --> 00:18:18.720
If somebody were to ask you, Brian,


00:18:18.720 --> 00:18:21.280
which one is more popular, Django or Flask?


00:18:21.280 --> 00:18:23.880
I don't know, do you have a sense of where that might land?


00:18:23.880 --> 00:18:24.720
- No.


00:18:24.720 --> 00:18:28.320
- I think the latest stats put it just pretty much even,


00:18:28.320 --> 00:18:31.640
right, both have met like 40% or something like this.


00:18:31.640 --> 00:18:35.480
Right, and I think actually Flask is like growing faster


00:18:35.480 --> 00:18:39.280
than Django, so I think Flask is maybe a little more,


00:18:39.280 --> 00:18:41.260
it's maybe a little bit more of a vote in that


00:18:41.260 --> 00:18:43.840
because it's both like, it's raw numbers are matching,


00:18:43.840 --> 00:18:46.320
but now it's also, I think, growing more quickly.


00:18:46.320 --> 00:18:48.400
But what is really interesting here is


00:18:48.400 --> 00:18:51.000
so many of these new little frameworks


00:18:51.000 --> 00:18:54.200
basically take the Flask API


00:18:54.200 --> 00:18:56.600
and give it like a solid hat tip,


00:18:56.600 --> 00:18:58.360
but then try to do their own thing.


00:18:58.360 --> 00:19:02.440
So for example, to create a web app in Blacksheep,


00:19:02.440 --> 00:19:06.420
I say app equals application or blacksheep.application,


00:19:06.420 --> 00:19:08.640
blacksheep.server.application, I guess.


00:19:08.640 --> 00:19:13.500
And then I say @app.route on some web function, right?


00:19:13.500 --> 00:19:16.200
But there's a couple of differences, right, also.


00:19:16.200 --> 00:19:19.760
So I could say async def function


00:19:19.760 --> 00:19:22.400
because it's async enabled natively based on UV loop,


00:19:22.400 --> 00:19:24.520
which is probably the best option.


00:19:24.520 --> 00:19:27.200
And you also pass in the request object instead of not.


00:19:27.200 --> 00:19:29.360
So what I think is really interesting is,


00:19:29.360 --> 00:19:32.560
Like Flask and Django, they're kind of neck and neck


00:19:32.560 --> 00:19:35.360
doing their battling, but all these other little frameworks


00:19:35.360 --> 00:19:38.920
seem to be like, we're gonna take Flask


00:19:38.920 --> 00:19:41.620
and change it a tiny bit in ways that we feel


00:19:41.620 --> 00:19:43.300
it's like, could be better or deficient,


00:19:43.300 --> 00:19:46.260
or we just like this better, over and over and over.


00:19:46.260 --> 00:19:48.640
So there's like all these little Flask-like APIs.


00:19:48.640 --> 00:19:51.040
So in that sense, I think Flask is sort of winning


00:19:51.040 --> 00:19:52.800
the API side of the world.


00:19:52.800 --> 00:19:55.040
- Yeah, I don't even know if it's a fair comparison.


00:19:55.040 --> 00:19:58.420
I know you can do lightweight things in Django,


00:19:58.420 --> 00:20:01.600
and you can do large applications in Flask.


00:20:01.600 --> 00:20:05.020
But in general, they are in a different realm.


00:20:05.020 --> 00:20:08.320
Generally, I think that people are writing


00:20:08.320 --> 00:20:10.420
larger applications, more people are writing


00:20:10.420 --> 00:20:12.560
larger applications in Django,


00:20:12.560 --> 00:20:14.440
and for the lightweight stuff,


00:20:14.440 --> 00:20:17.460
you're gonna use Flask or some of these other things.


00:20:17.460 --> 00:20:19.880
For instance, there's probably a lot of Flask applications


00:20:19.880 --> 00:20:21.600
that absolutely have no front end.


00:20:21.600 --> 00:20:23.800
They're REST only. - Right, right.


00:20:23.800 --> 00:20:24.720
Yeah, I think you're right.


00:20:24.720 --> 00:20:26.720
I think that is generally the trend


00:20:26.720 --> 00:20:30.320
that people use Django for larger stuff.


00:20:30.320 --> 00:20:32.800
They probably appreciate the backend admin section


00:20:32.800 --> 00:20:34.120
and things like that.


00:20:34.120 --> 00:20:35.080
All right, so for BlackSheep,


00:20:35.080 --> 00:20:36.920
let me just talk about a few interesting things.


00:20:36.920 --> 00:20:39.800
So it has built-in support for multi-processing,


00:20:39.800 --> 00:20:40.640
which is cool.


00:20:40.640 --> 00:20:42.760
It has its own middleware.


00:20:42.760 --> 00:20:45.040
It has routing, much like Flask does.


00:20:45.040 --> 00:20:47.440
It uses some really interesting features.


00:20:47.440 --> 00:20:50.280
So for example, you can have chunked encoding,


00:20:50.280 --> 00:20:54.000
where if I'm gonna send bits of response over time,


00:20:54.000 --> 00:20:56.940
so it can come down progressively to the browser


00:20:56.940 --> 00:20:58.560
or the consumer. - Oh, that's cool.


00:20:58.560 --> 00:21:00.960
- It uses the yield keyword for that.


00:21:00.960 --> 00:21:02.040
That's pretty killer, right?


00:21:02.040 --> 00:21:04.140
- Yeah. - It has special strategies


00:21:04.140 --> 00:21:06.520
for handling exceptions,


00:21:06.520 --> 00:21:09.920
automatic binding of route and query parameters,


00:21:09.920 --> 00:21:12.680
pass to the methods, automatic reloading,


00:21:12.680 --> 00:21:13.680
all sorts of stuff.


00:21:13.680 --> 00:21:17.600
And then, like I said, it also has this client option.


00:21:17.600 --> 00:21:22.600
So it has user-friendly SSL behavior by default,


00:21:23.720 --> 00:21:25.880
and it uses HTTP connection pooling.


00:21:25.880 --> 00:21:30.300
So much like async or AIO HTTP client,


00:21:30.300 --> 00:21:32.880
rather than it is like requests.


00:21:32.880 --> 00:21:34.280
So it's kind of like your joke,


00:21:34.280 --> 00:21:38.080
you have to create an async with block to create a client,


00:21:38.080 --> 00:21:40.100
and then you can call like get, post, put,


00:21:40.100 --> 00:21:41.520
all that kind of stuff.


00:21:41.520 --> 00:21:43.260
But yeah, it's pretty cool.


00:21:43.260 --> 00:21:45.520
So it has sort of both sides of the story.


00:21:45.520 --> 00:21:47.720
And I guess you could just use only the server


00:21:47.720 --> 00:21:50.120
or only the client, but they're kind of all together there.


00:21:50.120 --> 00:21:51.320
- Yeah, and it'll be interesting to watch.


00:21:51.320 --> 00:21:55.400
We're in an interesting place where we can just see


00:21:55.400 --> 00:21:57.120
how many of these are gonna be still around


00:21:57.120 --> 00:21:58.240
in two or three years.


00:21:58.240 --> 00:21:59.480
- That's a real challenge.


00:21:59.480 --> 00:22:02.320
I think about would it make sense to create content


00:22:02.320 --> 00:22:05.200
around some of these various libraries or write articles


00:22:05.200 --> 00:22:08.360
or just whatever, use them potentially.


00:22:08.360 --> 00:22:11.200
It's great that a thousand little flowers are blooming,


00:22:11.200 --> 00:22:14.400
but the lawnmower is coming.


00:22:14.400 --> 00:22:15.760
They won't all exist.


00:22:15.760 --> 00:22:17.400
They won't all be kept up.


00:22:17.400 --> 00:22:20.280
And if there's 20 little web frameworks,


00:22:20.280 --> 00:22:22.540
each with 100 or 1,000 GitHub stars,


00:22:22.540 --> 00:22:24.840
like what ones are gonna last?


00:22:24.840 --> 00:22:26.120
So I don't know.


00:22:26.120 --> 00:22:27.540
I don't even know if they have to last, right?


00:22:27.540 --> 00:22:30.320
Like I think some of these ideas could be really interesting


00:22:30.320 --> 00:22:32.400
like, okay, maybe something that they're doing


00:22:32.400 --> 00:22:34.520
that's really cool here around like chunked encoding


00:22:34.520 --> 00:22:35.880
makes its way into Flask.


00:22:35.880 --> 00:22:37.560
And the async stuff makes its way into Flask.


00:22:37.560 --> 00:22:38.600
And eventually like, well,


00:22:38.600 --> 00:22:41.080
it's not different enough from Flask anymore


00:22:41.080 --> 00:22:42.600
that we'll just keep using Flask, right?


00:22:42.600 --> 00:22:45.160
But I think these little experimentations are super cool.


00:22:45.160 --> 00:22:46.160
And that's why I wanted to highlight it.


00:22:46.160 --> 00:22:47.200
- Yeah, I think so too.


00:22:47.200 --> 00:22:48.600
And I do look forward to seeing


00:22:48.600 --> 00:22:52.440
what the flask equivalent of like the official,


00:22:52.440 --> 00:22:54.440
if it's flask or whether it's something else


00:22:54.440 --> 00:22:57.000
that's sort of the de facto standard


00:22:57.000 --> 00:22:58.600
for if you want something like flask,


00:22:58.600 --> 00:23:00.240
but asynchronous, what do you use?


00:23:00.240 --> 00:23:01.080
- Yeah, it's definitely cool


00:23:01.080 --> 00:23:02.920
to see a lot of options out there.


00:23:02.920 --> 00:23:04.980
Well, that's it for our main items, right?


00:23:04.980 --> 00:23:06.840
Anything else you wanna touch on?


00:23:06.840 --> 00:23:08.680
- I don't have anything extra, how about you?


00:23:08.680 --> 00:23:10.040
- I got a couple of things.


00:23:10.040 --> 00:23:13.020
One, kick it off, I guess, with the PSF.


00:23:13.020 --> 00:23:15.340
So the PSF board elections,


00:23:15.340 --> 00:23:17.720
not to be confused with the steering council,


00:23:17.720 --> 00:23:20.000
which is like the core developer management stuff.


00:23:20.000 --> 00:23:22.160
This is the PSF board itself.


00:23:22.160 --> 00:23:25.120
Those elections are starting to get going.


00:23:25.120 --> 00:23:28.580
So you can suggest, nominate people now.


00:23:28.580 --> 00:23:30.840
You can submit a nomination.


00:23:30.840 --> 00:23:33.780
And on June 7th, the election will actually begin.


00:23:33.780 --> 00:23:36.820
So, yeah, until June 1st, you can nominate anyone.


00:23:36.820 --> 00:23:38.880
And I believe they've changed the rules


00:23:38.880 --> 00:23:41.960
around who can be nominated to just like,


00:23:41.960 --> 00:23:44.320
pretty much anyone that people want to nominate.


00:23:44.320 --> 00:23:46.440
So, I think there might've been rules


00:23:46.440 --> 00:23:49.200
of how you had to participate previously to be eligible,


00:23:49.200 --> 00:23:51.600
but it seems like it's pretty wide open at this point.


00:23:51.600 --> 00:23:52.440
- Mm, neat.


00:23:52.440 --> 00:23:54.360
- So also on that same page,


00:23:54.360 --> 00:23:56.620
I realized that, I knew about this before,


00:23:56.620 --> 00:23:58.040
but it kind of pointed out, it says,


00:23:58.040 --> 00:24:00.000
you can contribute to the PSF


00:24:00.000 --> 00:24:02.100
by purchasing a PyCharm license,


00:24:02.100 --> 00:24:05.000
and all proceeds benefit to the PSF.


00:24:05.000 --> 00:24:07.640
So I think this is like a one-month thing going on here,


00:24:07.640 --> 00:24:10.640
but if you buy a copy of PyCharm,


00:24:10.640 --> 00:24:12.660
you'll get apparently 30% off,


00:24:12.660 --> 00:24:17.600
and all the profit, I'm guessing, goes to the PSF.


00:24:17.600 --> 00:24:18.620
Probably not revenue,


00:24:18.620 --> 00:24:19.980
'cause they gotta pay people and whatnot.


00:24:19.980 --> 00:24:20.820
- That's neat.


00:24:20.820 --> 00:24:21.640
- Yeah, that's a pretty good deal.


00:24:21.640 --> 00:24:24.100
So, yay JetBrains for doing that.


00:24:24.100 --> 00:24:25.420
That's great.


00:24:25.420 --> 00:24:27.260
And then I guess two other really quick ones.


00:24:27.260 --> 00:24:29.340
Just wanna remind people that if they wanna take


00:24:29.340 --> 00:24:30.980
some of my classes,


00:24:30.980 --> 00:24:34.580
they can go to training.talkpython.fm/apps,


00:24:34.580 --> 00:24:36.740
install one of the mobile apps, iOS or Android,


00:24:36.740 --> 00:24:38.440
and there's a couple of free courses in there,


00:24:38.440 --> 00:24:39.940
so people can check that out.


00:24:39.940 --> 00:24:43.020
And then one more reminder before it kicks off next week,


00:24:43.020 --> 00:24:45.820
I'm doing my webcast next week called


00:24:45.820 --> 00:24:50.700
10 Tools and Techniques Python Web Developers Should Explore.


00:24:50.700 --> 00:24:52.460
So it has a bunch of ideas of things


00:24:52.460 --> 00:24:54.540
that maybe you've heard about, maybe you haven't.


00:24:54.540 --> 00:24:56.300
But if you're doing stuff on the web,


00:24:56.300 --> 00:24:58.980
you definitely should think about.


00:24:58.980 --> 00:25:03.460
So cool stuff like ngrok or async or database migrations


00:25:03.460 --> 00:25:06.180
or Let's Encrypt, all those little things,


00:25:06.180 --> 00:25:07.860
a bunch of cool little tips.


00:25:07.860 --> 00:25:09.700
Some of the stuff we even found on the show.


00:25:09.700 --> 00:25:12.380
That's free and that's around for next week.


00:25:12.380 --> 00:25:14.300
- Is that one of those things where if I sign up


00:25:14.300 --> 00:25:17.420
and get emails about it, but I don't actually,


00:25:17.420 --> 00:25:19.580
can't actually watch it during the webcast,


00:25:19.580 --> 00:25:20.460
can I watch it later?


00:25:20.460 --> 00:25:21.500
- Yeah, you should be able to.


00:25:21.500 --> 00:25:23.420
And actually, honestly, it should just be,


00:25:23.420 --> 00:25:26.180
I'm doing this with a collaboration with Wintelect


00:25:26.180 --> 00:25:28.060
and it just should be on their YouTube channel


00:25:28.060 --> 00:25:30.020
like a couple days later, even if you don't sign up.


00:25:30.020 --> 00:25:31.780
But yeah, sign up and you'll get notified, yeah.


00:25:31.780 --> 00:25:32.620
- Cool, thanks.


00:25:32.620 --> 00:25:33.440
- Yep, you bet.


00:25:33.440 --> 00:25:35.420
Well, that was all serious, but we also have some jokes.


00:25:35.420 --> 00:25:36.260
- Yeah.


00:25:36.260 --> 00:25:37.740
- So, you know how I like to pick on you


00:25:37.740 --> 00:25:38.780
'cause you're a fan of him?


00:25:38.780 --> 00:25:39.620
- Yeah.


00:25:39.620 --> 00:25:42.700
in a very nice and warm-hearted way.


00:25:42.700 --> 00:25:45.340
So I've chosen a couple of things


00:25:45.340 --> 00:25:47.940
that I feel like might touch on that theme.


00:25:47.940 --> 00:25:48.780
- Yeah, they're good.


00:25:48.780 --> 00:25:51.420
- In programming, how do you generate a random string?


00:25:51.420 --> 00:25:52.600
- Use the random module.


00:25:52.600 --> 00:25:54.300
- One option, or you put a first-year


00:25:54.300 --> 00:25:55.720
computer science student in Vim


00:25:55.720 --> 00:25:57.060
and ask them to save and exit.


00:25:57.060 --> 00:25:59.380
(laughing)


00:25:59.380 --> 00:26:00.960
- This is funny.


00:26:00.960 --> 00:26:03.840
- So another one is, imagine you're at a restaurant.


00:26:03.840 --> 00:26:05.720
Some guy falls over, he starts choking,


00:26:05.720 --> 00:26:07.420
the waiter runs over and goes,


00:26:07.420 --> 00:26:09.900
"Oh my gosh, he's choking, is anyone here a doctor?"


00:26:09.900 --> 00:26:11.200
Some programmer stands up and goes,


00:26:11.200 --> 00:26:12.500
"Hey, I'm a Vim user."


00:26:12.500 --> 00:26:15.140
(both laughing)


00:26:15.140 --> 00:26:17.220
- That doesn't make any sense.


00:26:17.220 --> 00:26:19.260
- It's the programming equivalent of,


00:26:19.260 --> 00:26:22.100
how do you know if someone is a marathon runner?


00:26:22.100 --> 00:26:22.940
- I don't know.


00:26:22.940 --> 00:26:23.760
- Don't worry, they'll tell you.


00:26:23.760 --> 00:26:25.940
(both laughing)


00:26:25.940 --> 00:26:29.180
- Okay, so I was chuckling about these the other day


00:26:29.180 --> 00:26:31.060
and I tried to describe it to my daughter,


00:26:31.060 --> 00:26:32.580
my nine-year-old daughter.


00:26:32.580 --> 00:26:34.700
I knew that I had to get some backstory.


00:26:34.700 --> 00:26:37.620
I said, so this is sort of funny because in Vim,


00:26:37.620 --> 00:26:40.420
if especially you're in terminal mode,


00:26:40.420 --> 00:26:45.420
you save an exit by doing escape colon WQ,


00:26:45.420 --> 00:26:48.100
and if you're really serious about it,


00:26:48.100 --> 00:26:49.900
an exclamation point also.


00:26:49.900 --> 00:26:52.820
And she's like, that's a terrible interface.


00:26:52.820 --> 00:26:55.060
(laughing)


00:26:55.060 --> 00:26:57.060
- She has a good sense.


00:26:57.060 --> 00:26:57.980
How interesting.


00:26:57.980 --> 00:26:59.740
Funny, funny.


00:26:59.740 --> 00:27:01.500
Cool, all right, well, thanks for the laps


00:27:01.500 --> 00:27:03.420
and covering all these items as always.


00:27:03.420 --> 00:27:04.340
- Yeah, thank you.


00:27:04.340 --> 00:27:05.180
- Yep.


00:27:05.180 --> 00:27:06.680
Thank you for listening to Python Bytes.


00:27:06.680 --> 00:27:09.140
Follow the show on Twitter via @PythonBytes.


00:27:09.140 --> 00:27:12.180
That's Python Bytes as in B-Y-T-E-S.


00:27:12.180 --> 00:27:15.380
And get the full show notes at pythonbytes.fm.


00:27:15.380 --> 00:27:16.980
If you have a news item you want featured,


00:27:16.980 --> 00:27:19.440
just visit pythonbytes.fm and send it our way.


00:27:19.440 --> 00:27:22.320
We're always on the lookout for sharing something cool.


00:27:22.320 --> 00:27:24.160
On behalf of myself and Brian Auken,


00:27:24.160 --> 00:27:25.500
this is Michael Kennedy.


00:27:25.500 --> 00:27:27.500
Thank you for listening and sharing this podcast


00:27:27.500 --> 00:27:29.140
with your friends and colleagues.

