WEBVTT

00:00:00.001 --> 00:00:03.820
Hey there, thanks for listening. Before we jump into this episode, I just want to remind you

00:00:03.820 --> 00:00:09.540
that this episode is brought to you by us over at Talk Python Training and Brian through his pytest

00:00:09.540 --> 00:00:14.820
book. So if you want to get hands-on and learn something with Python, be sure to consider our

00:00:14.820 --> 00:00:21.500
courses over at Talk Python Training. Visit them via pythonbytes.fm/courses. And if you're

00:00:21.500 --> 00:00:27.100
looking to do testing and get better with pytest, check out Brian's book at pythonbytes.fm slash

00:00:27.100 --> 00:00:31.640
pytest. Enjoy the episode. Welcome to Python Bytes, where we deliver Python news and headlines

00:00:31.640 --> 00:00:38.280
directly to your earbuds. This is episode 246, recorded August 11th, 2021. I'm Michael Kennedy.

00:00:38.280 --> 00:00:39.400
And I'm Brian Okken.

00:00:39.400 --> 00:00:40.480
And I'm David Smith.

00:00:40.480 --> 00:00:43.460
Hey, David Smith. Welcome. So good to have you here.

00:00:43.460 --> 00:00:44.420
It's good to be here.

00:00:44.420 --> 00:00:50.460
Yeah, you've been a suggester of topics, I believe. You've sent in some ideas and thoughts for us. And

00:00:50.460 --> 00:00:53.820
well, we're going to get a good dose of that today for sure.

00:00:53.860 --> 00:00:56.900
Quite honestly, if I'd known that you're going to open this up, I probably would have

00:00:56.900 --> 00:00:59.340
afforded some of those because it was a little bit of a scramble. Be like,

00:00:59.340 --> 00:01:03.900
Oh yeah, I already gave them that tip. So yeah, I had to dig a little bit.

00:01:03.900 --> 00:01:05.660
Yeah, you've already shared all your favorites. Well,

00:01:05.660 --> 00:01:10.080
your losses are gained because you've made it easier for us in the past. So thanks for sharing

00:01:10.080 --> 00:01:14.020
those things. And yeah, thanks for being here. It's going to be great to have you.

00:01:14.020 --> 00:01:14.680
Definitely.

00:01:14.680 --> 00:01:19.620
Yeah, I want to give the quick elevator pitch on you. People, what should they know about you?

00:01:19.620 --> 00:01:24.560
Well, I'm a recent tech convert, I'll say. Over the last 10 years, I've been working in

00:01:24.560 --> 00:01:28.500
the manufacturing space, either in quality engineering or manufacturing engineering. And

00:01:28.500 --> 00:01:34.020
over the last couple of years, been using Python a lot more heavily. I used to do a lot of VBA

00:01:34.020 --> 00:01:39.300
and Excel, which it was painful. And I got a suggestion from one of our equipment suppliers

00:01:39.300 --> 00:01:43.280
to say, hey, use Python. It's really, really nice. I kind of resisted doing it because I didn't

00:01:43.280 --> 00:01:47.680
want to learn something new. It seemed intimidating because it's a programming language. I'm not a programmer,

00:01:47.680 --> 00:01:54.400
but I finally caved when it came to trying to automate plotting, which is pretty painful in

00:01:54.400 --> 00:01:59.680
Excel. And yeah, once I started on it and had something useful working in a couple hours,

00:01:59.680 --> 00:02:04.160
I was hooked. And then I started looking for more and more resources, found your show and got more

00:02:04.160 --> 00:02:08.000
and more into it from there. I started digging into the web and it's just been a, I'd say an upward

00:02:08.000 --> 00:02:13.200
spiral from there. And about probably about two and a half weeks ago, I started in my first,

00:02:13.200 --> 00:02:18.400
I guess, official tech role and a similar kind of domain as a for an automotive supplier. I'm doing

00:02:19.920 --> 00:02:25.520
engineering work. So it's been really exciting to be able to use Python full time. It is part of my

00:02:25.520 --> 00:02:30.480
job because, you know, the bits of times I got to use Python before, that's always the parts I like

00:02:30.480 --> 00:02:33.280
the most. So I'm happy to be doing it, you know, on purpose.

00:02:33.280 --> 00:02:36.800
Awesome. Yeah, me too. I wish I could do it full time.

00:02:36.800 --> 00:02:42.960
I remember my first full time software development job. I was like, I can't believe they're paying me to

00:02:42.960 --> 00:02:46.640
do this. I better figure this stuff out before they fire me. I can't believe I'm doing this. It

00:02:46.640 --> 00:02:47.680
was so great. Yeah.

00:02:47.680 --> 00:02:50.480
So good. All right. Well, congratulations and happy to have you here.

00:02:50.480 --> 00:02:52.000
Brian, I feel like we should document this.

00:02:52.000 --> 00:02:58.560
Definitely should document it and test our docs too. So one of the things I'd like to try, did I just

00:02:58.560 --> 00:03:05.120
try to edit? There we go. Something that came up recently was Vincent Warmerdam. I think we've had

00:03:05.120 --> 00:03:05.760
him on the show.

00:03:05.760 --> 00:03:06.320
Mm hmm.

00:03:06.320 --> 00:03:08.160
Yeah. A couple episodes ago. Yeah.

00:03:08.160 --> 00:03:38.140
Yeah. So Vincent announced that he's got a library called make test docs. And I kind of love this. So the idea is you, it's a bunch of utilities that you can use to, to help test your documentation. It doesn't do it right out of the box. You have to, you have to create your own test files to do this. But the idea, like the, the, the, the first example that he shows on his read me is,

00:03:38.140 --> 00:04:08.120
is that you've got a markdown file and it's got some, some Python blocks and code blocks in it. And you can make a test that goes through, reads the markdown, grabs the Python code and runs it. And if there's any problems with it, if there's any exceptions, it fails the test. This is just brilliant. There's examples in here for, for doing it with doc strings and even class doc strings. And then Vincent even did, he does the com code.

00:04:08.120 --> 00:04:34.040
And he did a little com code video on how to use this. Yeah. And you're putting that in the show notes for people, right? To check out. Yep. There's a link to the tutorial with the video. the suggestion or the use case that he was talking about at first was, that maybe you're using make docs for documentation. Therefore you've got a bunch of markdown, but my use case is going to be blogs. So.

00:04:34.040 --> 00:04:48.040
Yeah. I think that's a huge use case actually. Yeah. I've got Python code in my, in my blog source code. That's it's markdown files. I totally want that's one. On my to-do list is to try this, to make sure that the blog content is accurate.

00:04:48.040 --> 00:04:54.080
it. That is super cool. You know, one more thing that you might find interesting. I think this is

00:04:54.080 --> 00:05:01.900
a more true software engineering type of solution, but another sort of whizzy wig as you work style

00:05:01.900 --> 00:05:07.060
of solution is PyCharm. If you have a markdown file and you have Python code in there, we'll

00:05:07.060 --> 00:05:12.200
highlight the errors and actually show you if like symbols are missing and stuff. So if you had the

00:05:12.200 --> 00:05:17.400
markdown associated with the sample code and then you like do stuff with your little examples, it

00:05:17.400 --> 00:05:20.500
may actually show you the errors live as well.

00:05:20.500 --> 00:05:21.340
Oh, that's cool.

00:05:21.340 --> 00:05:25.640
Yeah. I mean, that's not like a CI sort of keep it fixed, but that's a as you type kind of thing.

00:05:25.640 --> 00:05:32.280
Yeah. And the other comment that he had is if you, I normally don't put like asserting things are valid

00:05:32.280 --> 00:05:39.240
in documentation, but the comment in the read me is that if you put asserts in there, it'll get

00:05:39.240 --> 00:05:42.400
checked also. So you've got like unit tests built into your documentation.

00:05:42.400 --> 00:05:44.520
Super cool. David, what do you think?

00:05:44.520 --> 00:05:46.900
It's interesting. I'm just trying to figure out.

00:05:47.260 --> 00:05:52.300
Is a, are you doing like a parameterized test and looking at your inputs versus outputs for the

00:05:52.300 --> 00:05:56.860
code that's in the documentation or how do you actually know it's testing correctly?

00:05:56.860 --> 00:05:57.500
Oh, right.

00:05:57.500 --> 00:05:59.100
Is it a valid Python or?

00:05:59.100 --> 00:06:04.620
So the little code snippet we've got in that we're showing on the screen in the chat, but

00:06:04.620 --> 00:06:09.100
also there's a link in the read me to the read in the show notes to the read me.

00:06:09.100 --> 00:06:17.420
The parameterizes that it uses uses the like in this example, I'm saying go look in my docs folder.

00:06:17.580 --> 00:06:26.940
And for everything that it finds in there, that's a markdown file that'll show up as a, a parameterized, the parameterization of the test.

00:06:26.940 --> 00:06:30.940
So if I've got this test will run once per file.

00:06:30.940 --> 00:06:36.140
So if I've got three markdown files in there, it'll, the test will run three times.

00:06:36.140 --> 00:06:39.740
This is the most comprehensive and yet extremely short test I've seen.

00:06:39.740 --> 00:06:41.180
In a really long time.

00:06:41.180 --> 00:06:48.140
It's three lines and it will like basically work, traverse a tree of markdown file hierarchy type thing.

00:06:48.140 --> 00:06:50.540
Oh, I do tons of really tiny tests.

00:06:50.540 --> 00:06:51.580
So yeah.

00:06:51.580 --> 00:06:52.060
Yeah.

00:06:52.060 --> 00:06:52.460
Nice.

00:06:52.460 --> 00:06:52.700
Nice.

00:06:52.700 --> 00:06:53.100
Nice.

00:06:53.100 --> 00:06:53.260
Nice.

00:06:53.260 --> 00:06:53.580
Nice.

00:06:53.580 --> 00:06:54.140
All right.

00:06:54.140 --> 00:06:54.620
Avaro.

00:06:54.620 --> 00:06:55.580
Welcome to live stream.

00:06:55.580 --> 00:06:56.460
Happy to have you here.

00:06:56.460 --> 00:06:58.060
Uh, let's see, let's move on to the next one.

00:06:58.060 --> 00:07:04.860
I think speaking of users, giving us our listeners, giving us ideas and helping us out here.

00:07:04.860 --> 00:07:09.420
I want to talk about something that I've been hanging onto for a little while since March,

00:07:09.420 --> 00:07:12.780
but I finally decided it's time to talk about it.

00:07:12.780 --> 00:07:19.420
And that is creating cues, out of process sort of asynchronous queue processing.

00:07:19.420 --> 00:07:25.740
So if I've got, say a web app or an API, or even if I'm testing a bunch of the hardware

00:07:25.740 --> 00:07:30.940
and I want to kick off a bunch of jobs, eventually I don't want to, you know, necessarily block on

00:07:30.940 --> 00:07:31.660
all of them.

00:07:31.660 --> 00:07:34.540
I might want to push them down so other things can work on them.

00:07:34.540 --> 00:07:38.300
Um, you know, if I'm going to send a bunch of emails, if you've ever tried to send a thousand

00:07:38.300 --> 00:07:42.780
emails in order, synchronously, it turns out that times out your web request.

00:07:42.780 --> 00:07:43.580
Don't do that.

00:07:43.580 --> 00:07:46.940
So a better idea would be to like push them to a queue and have some sort of background process.

00:07:46.940 --> 00:07:48.140
Go, oh, there's new emails to send.

00:07:48.140 --> 00:07:49.980
Let me jam those on down the line.

00:07:49.980 --> 00:07:56.540
So, Scott hacker sent over this, pointer to this library, a small, but cool little one

00:07:56.540 --> 00:08:02.460
called, called it is called QR three and QR three is a queue for Redis.

00:08:02.460 --> 00:08:03.900
And the three means Python three.

00:08:03.900 --> 00:08:05.980
Cause there used to be a QR that wasn't three.

00:08:05.980 --> 00:08:07.580
That's not Python three compatible.

00:08:07.580 --> 00:08:13.580
So here's like a, a re-imagining of that for Python three, or just a compatibility

00:08:13.580 --> 00:08:14.540
that got moved over.

00:08:14.540 --> 00:08:16.140
So it's pretty cool.

00:08:16.140 --> 00:08:17.100
We check it out.

00:08:17.100 --> 00:08:22.380
The API and implementation or the, the, the usage is quite simple as you could imagine.

00:08:22.380 --> 00:08:26.300
So all you got to do is you got to, it's built upon Redis pie.

00:08:26.300 --> 00:08:27.580
You've got to have Redis installed.

00:08:27.580 --> 00:08:31.980
That could be, you know, wherever even be Redis as a service on some of these cloud platforms,

00:08:31.980 --> 00:08:33.340
run it in Docker, run it locally.

00:08:33.340 --> 00:08:34.380
You have Redis pie.

00:08:34.380 --> 00:08:37.980
And then you just go over and you create a queue.

00:08:37.980 --> 00:08:43.260
So you just say queue and you give it a name and then some server connect info, like a location,

00:08:43.260 --> 00:08:44.940
authentication and whatnot.

00:08:44.940 --> 00:08:47.500
And then all you've got to do is you push items to it.

00:08:47.500 --> 00:08:51.740
They could be just really simple things like a bunch of email addresses you're going to send,

00:08:51.740 --> 00:08:53.820
but it could also be really complicated.

00:08:53.820 --> 00:08:59.100
Like for example, it could be, say Pydantic models that store all the data that you need

00:08:59.100 --> 00:09:00.620
to process that request.

00:09:00.620 --> 00:09:01.580
So that's pretty cool.

00:09:01.580 --> 00:09:08.300
It has, the, the default way of getting data over to it is through C pickle and C pickle

00:09:08.300 --> 00:09:12.540
is better than pickle, but still has issues and other restrictions.

00:09:12.540 --> 00:09:15.980
Um, some of the restrictions are, you can't put certain types of objects.

00:09:15.980 --> 00:09:20.700
Like it wouldn't make sense to serialize a database connection that has an open socket or

00:09:20.700 --> 00:09:22.460
a thread or some weird thing like that.

00:09:22.460 --> 00:09:22.780
Right.

00:09:22.780 --> 00:09:26.700
But most of the sort of message, here's the data you need to process that you would send

00:09:26.700 --> 00:09:28.140
over all that stuff at work.

00:09:28.140 --> 00:09:34.940
And you can also, create your own serial serializer on a per queue basis, which is kind

00:09:34.940 --> 00:09:35.180
of cool.

00:09:35.180 --> 00:09:40.380
So if you said, I want to only work with Pydantic models, you could put the sort of from dictionary

00:09:40.380 --> 00:09:44.540
to dictionary transformation with the validation and all that kind of stuff.

00:09:44.540 --> 00:09:49.740
I personally would not use C pickle because one of the things you can run into is if you upgrade

00:09:49.740 --> 00:09:54.220
your version of Python on one server, but not the other, because you're in the process of going

00:09:54.220 --> 00:09:58.300
from one to the other and some thing has a different structure and memory and gets put

00:09:58.300 --> 00:09:59.020
over there.

00:09:59.020 --> 00:10:03.340
The other ones can't read it or like, there's always these, these challenges of pure binary

00:10:03.340 --> 00:10:03.740
matches.

00:10:03.740 --> 00:10:04.380
I don't know.

00:10:04.380 --> 00:10:04.860
I would do that.

00:10:04.860 --> 00:10:08.060
Probably serializes JSON or something and serialize it back.

00:10:08.060 --> 00:10:09.340
But anyway, it's pretty cool.

00:10:09.340 --> 00:10:10.060
What do you guys think?

00:10:10.060 --> 00:10:10.860
This looks nice.

00:10:10.860 --> 00:10:15.100
I actually haven't used cues in Python before, but it's on my to-do list.

00:10:15.100 --> 00:10:20.700
Um, because I mean, designing complex systems, breaking it up into, into different processes

00:10:20.700 --> 00:10:23.580
with cues back and forth is a cool way to do it.

00:10:23.580 --> 00:10:23.820
Yeah.

00:10:23.820 --> 00:10:25.420
I'm kind of inspired by this.

00:10:25.420 --> 00:10:27.660
Uh, I kind of want to do more stuff with cues as well.

00:10:27.660 --> 00:10:28.140
David?

00:10:28.140 --> 00:10:30.620
Oh, it seems like a really clean, simple way to use cues.

00:10:30.620 --> 00:10:31.260
I'm with Brian.

00:10:31.260 --> 00:10:35.660
I haven't really used it in a Python context before, but like the examples you gave are

00:10:35.660 --> 00:10:36.220
perfect.

00:10:36.220 --> 00:10:38.620
You know, emails are, they take a long time.

00:10:38.620 --> 00:10:41.100
So you don't want to be binding up your, your main application.

00:10:41.100 --> 00:10:42.940
You need to dump this off into a background task.

00:10:42.940 --> 00:10:45.260
And this looks really, really simple to use.

00:10:45.260 --> 00:10:49.100
So, you know, I seem like it'd be worth a try for sure.

00:10:49.100 --> 00:10:50.060
Yeah, for sure.

00:10:50.060 --> 00:10:54.060
Other things are like, you need to generate a report that takes 30 seconds, you know, kick

00:10:54.060 --> 00:10:58.620
off the generation and then see if it's in the database and just do some sort of like Ajax

00:10:58.620 --> 00:11:00.460
poll until it's there or whatever.

00:11:00.460 --> 00:11:02.060
Um, it has some more features.

00:11:02.060 --> 00:11:05.740
So it has a queue, which is first in first out, as you can imagine.

00:11:05.740 --> 00:11:08.620
Uh, it has a capped and I call it a capped collection.

00:11:08.620 --> 00:11:13.020
I feel like it should be capped a queue because it's implemented behind the scenes as a capped

00:11:13.020 --> 00:11:13.420
collection.

00:11:13.420 --> 00:11:16.300
Uh, they also say a bounded queue is another AKA.

00:11:16.300 --> 00:11:21.180
So the idea is if you're doing like analytics and logging and you're trying to eventually

00:11:21.180 --> 00:11:24.700
process that and save it to the database, but you want to say, you know what, we really don't

00:11:24.700 --> 00:11:29.020
want this queue to get more than a hundred thousand items at a time because we should be writing

00:11:29.020 --> 00:11:29.820
this to the database.

00:11:29.820 --> 00:11:32.700
And if for something goes wrong, it can completely wreck the server.

00:11:32.700 --> 00:11:35.420
So you increase these capped queues where you're like, I'm going to start throwing away

00:11:35.420 --> 00:11:35.820
old stuff.

00:11:35.820 --> 00:11:40.620
If we don't get to it in time, there's a DQ, which to me sounds like getting stuff out of

00:11:40.620 --> 00:11:42.540
a queue, but oh no, it's a double ended queue.

00:11:42.540 --> 00:11:43.660
A double ended queue.

00:11:43.660 --> 00:11:45.420
Uh, it should be a, yeah.

00:11:45.420 --> 00:11:50.860
Anyway, it should be, the idea is you can basically put stuff onto the front or the back,

00:11:50.860 --> 00:11:52.940
and you can pop stuff off the front and the back.

00:11:52.940 --> 00:11:59.100
So you could, for example, put low priority items on the back, or something's really important.

00:11:59.100 --> 00:12:01.580
You could kick it up to the front or right to the front of the queue.

00:12:01.580 --> 00:12:03.580
And then finally, you also do a stack.

00:12:03.580 --> 00:12:08.460
Um, you can also do a priority queue, which is like sort of pretty close to what I described,

00:12:08.460 --> 00:12:12.540
but you can't jump ahead of the things that have a similar priority, right?

00:12:12.540 --> 00:12:17.980
Like if there's super urgent and then low, you can put like a super urgent new thing at the

00:12:17.980 --> 00:12:21.660
front of the super urgent ones, but it would appear before all the others, things like that.

00:12:21.660 --> 00:12:23.500
So, this is all pretty neat.

00:12:23.500 --> 00:12:27.180
What I really like about this is obviously Python has queues built in, right?

00:12:27.180 --> 00:12:28.300
Like that's just a data type.

00:12:28.300 --> 00:12:30.460
A list itself could basically be a queue.

00:12:30.460 --> 00:12:32.700
You can pop stuff off the front and shazam, you have a queue.

00:12:32.700 --> 00:12:35.100
But this is out of process, right?

00:12:35.100 --> 00:12:40.060
This means if you have to scale out for your worker processes in any sort of API,

00:12:40.060 --> 00:12:44.700
or you want it to be able to be durable across app restarts, things like that.

00:12:44.700 --> 00:12:48.140
And if you think, oh, I'm not going to scale out across, I'm not having multiple servers.

00:12:48.140 --> 00:12:52.860
Like almost every Python web app and web API runs with multiple worker processes at a minimum.

00:12:52.860 --> 00:12:54.140
So yeah, you're scaling out.

00:12:54.140 --> 00:12:55.580
Anyway, I think this is pretty useful.

00:12:55.580 --> 00:12:57.820
And if you're all about Redis, this is cool.

00:12:57.820 --> 00:12:58.620
Redis seems nice.

00:12:58.620 --> 00:13:01.820
I'm kind of inspired to do something like this with MongoDB, but I'm also busy.

00:13:01.820 --> 00:13:03.820
So probably, probably not right away.

00:13:03.820 --> 00:13:07.500
And John Sheehan out there in the live stream is telling me that, learned a few years

00:13:07.500 --> 00:13:09.980
ago that DQ is pronounced deck.

00:13:09.980 --> 00:13:11.420
So yeah, double ended.

00:13:11.420 --> 00:13:11.820
Yeah.

00:13:11.820 --> 00:13:12.140
All right.

00:13:12.140 --> 00:13:13.020
So deck.

00:13:13.020 --> 00:13:13.260
Thanks.

00:13:13.820 --> 00:13:27.100
And then Teddy on live stream says, I'm not so familiar with queues, but how would it work if you, your queue process that execute Python code, it would end up being a process, sequentially because of the Python gill.

00:13:27.100 --> 00:13:28.300
Uh, yeah.

00:13:28.300 --> 00:13:33.020
So are you, are you ending up with like a serial process because of this, serial processing?

00:13:33.020 --> 00:13:36.220
I think it depends on just how you create the workers, right?

00:13:36.220 --> 00:13:37.980
So there's two ends that you build.

00:13:37.980 --> 00:13:39.740
One end is the put stuff in the queue.

00:13:39.740 --> 00:13:43.580
Then you literally build the end that goes to the queue and says, give me the next item.

00:13:43.580 --> 00:13:47.340
And that's stored in Redis, which obviously can support multiple clients.

00:13:47.340 --> 00:13:55.980
So if you just scaled out the cons, the consumers of the, the queue messages, the things running the jobs, then you would escape the gill, right?

00:13:55.980 --> 00:13:57.340
Because you would have multiple processes.

00:13:57.340 --> 00:14:01.020
You can do, you can have multiple things feeding the queue as well.

00:14:01.020 --> 00:14:01.340
Yes.

00:14:01.340 --> 00:14:03.420
Multiple web requests or something.

00:14:03.420 --> 00:14:04.220
Yeah, absolutely.

00:14:04.220 --> 00:14:04.980
Absolutely.

00:14:04.980 --> 00:14:07.660
All right, David, what you got for us?

00:14:07.660 --> 00:14:08.820
All right.

00:14:08.820 --> 00:14:12.200
Well, are you, either of you have the pandas users?

00:14:12.200 --> 00:14:17.320
I'm a pandas admirer and I use it a little bit, but I always feel like when I come to the end of the queue,

00:14:17.320 --> 00:14:19.800
I come to pandas, I know there's way more I should be doing with this.

00:14:19.800 --> 00:14:22.920
And this is so cool, but not as much as I should be.

00:14:22.920 --> 00:14:30.480
Well, and I use pandas pretty, pretty heavily in my previous job to do a lot of analysis, especially on the one dimensional data sets.

00:14:30.480 --> 00:14:33.140
And, you know, it always happened.

00:14:33.140 --> 00:14:37.400
When I first started using pandas, I was doing a lot of really bad things like it arose and that type of thing.

00:14:37.400 --> 00:14:41.680
And the more you kind of learn about it, the better you get at doing setup type operations.

00:14:41.680 --> 00:14:46.080
But even, even, you know, in the last, you know, couple of months, you think I'd have everything down.

00:14:46.080 --> 00:14:47.620
But the API is huge.

00:14:47.620 --> 00:14:52.100
And I always had these ah moments because I learned about something like transform.

00:14:52.580 --> 00:14:56.900
And, you know, once I realized what you could do with transform, it simplified so many things that I was doing.

00:14:56.900 --> 00:15:02.400
And the first item I have is an article that says 25 panda functions you didn't know existed.

00:15:02.400 --> 00:15:06.500
And I don't normally like these articles because they almost feel a little bit clickbaity.

00:15:06.500 --> 00:15:09.560
But this one actually had a handful of ah moments for me.

00:15:09.640 --> 00:15:11.180
So I thought I would go ahead and share it.

00:15:11.180 --> 00:15:14.920
So I have them listed in the show notes, kind of the ah moments for me.

00:15:14.920 --> 00:15:18.460
But ah, between is a really nice, ah, really nice.

00:15:18.460 --> 00:15:28.460
Ah, I think it would consider it a method on the data frame or a series and basically allows you to simplify logic instead of trying to say greater than or equal to blank and less than or equal to blank.

00:15:28.460 --> 00:15:34.940
You can just say between values very similar to the operation that you would do in a sequel transaction.

00:15:34.940 --> 00:15:37.820
Ah, Styler, I had no idea existed.

00:15:37.820 --> 00:15:42.820
Ah, you can actually apply styles to the tables coming out of pandas.

00:15:42.820 --> 00:15:51.820
Ah, I do a lot to try to make my notebooks really, really pretty so that I can convert them to HTML or another format and share them with the business.

00:15:51.820 --> 00:15:57.820
The business isn't typically like notebooks, but I'm trying because I can't stand the intermediate step of copying to a PowerPoint.

00:15:57.820 --> 00:16:00.260
But this would definitely help.

00:16:00.260 --> 00:16:01.540
You can do gradients.

00:16:01.540 --> 00:16:09.020
You can may have a bunch of different functions behind that options is another one I kind of played with a little bit.

00:16:09.020 --> 00:16:12.060
Ah, but there's one in here that I wanted to try before the show.

00:16:12.060 --> 00:16:12.820
I hadn't had a chance.

00:16:12.820 --> 00:16:16.520
You can change the graphing back end on pandas from that plot lead to something else.

00:16:16.520 --> 00:16:22.020
So at some point I'm going to try changing it to plot because that's my my preferred plotting library for most things.

00:16:22.020 --> 00:16:23.860
Convert D types is really nice.

00:16:23.860 --> 00:16:30.340
If you know you have a categorical types, a set of information, you can dramatically lose some or reduce how much memory is taken.

00:16:30.340 --> 00:16:33.340
So, mask was a nice, a nice one.

00:16:33.340 --> 00:16:37.820
It basically allows you to quickly convert somewhere down here.

00:16:37.820 --> 00:16:43.660
Quickly converts certain particular values or values that meet a criteria to another value.

00:16:43.660 --> 00:16:47.100
I was doing this oftentimes in multiple stages.

00:16:47.100 --> 00:16:49.820
This would clean up that code significantly.

00:16:49.820 --> 00:16:53.620
Any smallest and any largest also could have been very helpful.

00:16:53.620 --> 00:17:01.100
Essentially, it's similar to like a max or a min, but instead of just pulling a single, you can pull in this case five.

00:17:01.100 --> 00:17:04.100
And a clip at time.

00:17:04.100 --> 00:17:11.580
So like if I want to see the five largest revenue producing customers in my data frame, I could just quick do that.

00:17:11.580 --> 00:17:14.580
Yeah. And there are ways you can like with anything else pandas.

00:17:14.580 --> 00:17:17.060
You could use a couple other methods to get that done, too.

00:17:17.060 --> 00:17:22.060
But it's just so much cleaner to do diamonds and largest five and then price.

00:17:22.060 --> 00:17:28.380
It's just very clean and fast instead of having multiple lines to do a transformation and then a transformation and then another change.

00:17:28.380 --> 00:17:30.580
So I wanted to suggest this article.

00:17:30.580 --> 00:17:36.980
Like I said, I've been doing pandas for a couple of years and I still have these moments and this article.

00:17:36.980 --> 00:17:39.740
Well, some of them are maybe quite on moments for me.

00:17:39.740 --> 00:17:46.780
They may be on moments for someone else because everybody probably knows 20% and maybe a slightly different 20% of the pandas API.

00:17:46.780 --> 00:17:48.260
Yeah, this is really neat.

00:17:48.260 --> 00:17:54.100
I love these types of things that I mean, it's super easy to just scan through and decide whether or not it's it's really helpful to you.

00:17:54.100 --> 00:18:04.620
The one for me, the pandas one that had the biggest like, oh, my goodness, was web scraping and like pulling HTML tables and turning those into data frames.

00:18:04.620 --> 00:18:06.820
So, like, obviously, I can go.

00:18:06.820 --> 00:18:10.020
Yeah, you go with like requests and beautiful soup and do something.

00:18:10.020 --> 00:18:13.020
But then you still end up with just a table of HTML.

00:18:13.020 --> 00:18:18.820
But with pandas, you can say, read HTML and then just give me table three as a data frame.

00:18:18.820 --> 00:18:19.860
Like, it's ridiculous, right?

00:18:19.860 --> 00:18:20.860
Mm hmm.

00:18:20.860 --> 00:18:30.340
Now, pandas has some really nice I/O tools, too, around CSVs, Parquet, the most common data format types and even some of the lesser common ones.

00:18:30.340 --> 00:18:32.740
It's a really nice library overall.

00:18:32.740 --> 00:18:35.940
But yeah, like I said, there's always always some odd moments.

00:18:35.940 --> 00:18:39.140
And it's nice to have a article that highlights several odd moments for me.

00:18:39.140 --> 00:18:40.140
Yeah, super cool.

00:18:40.140 --> 00:18:42.140
So go ahead, Brian.

00:18:42.140 --> 00:18:45.940
The one that jumps right out at me was the number number one one.

00:18:45.940 --> 00:18:49.940
I didn't know that that you could just write Excel with pandas.

00:18:49.940 --> 00:18:50.940
That's pretty cool.

00:18:50.940 --> 00:18:58.340
And I think there's another wrapper around write Excel that kind of simplifies converting a data frame to Excel.

00:18:58.340 --> 00:19:02.740
But I think write Excel lets you do some more more intricate things with Excel.

00:19:02.740 --> 00:19:03.340
Yeah.

00:19:03.340 --> 00:19:04.140
That's pretty cool.

00:19:04.140 --> 00:19:05.340
Yeah, that's super cool.

00:19:05.340 --> 00:19:05.540
All right.

00:19:05.540 --> 00:19:12.540
Before we move on really quick from the live stream, I liked when you ask if anyone uses pandas and likes it.

00:19:12.540 --> 00:19:14.540
Dean Langston just said, yes.

00:19:14.540 --> 00:19:15.540
All caps, beautiful.

00:19:15.540 --> 00:19:23.940
But then also suggested pointed out this project that he built that is a like a give you live tips while you work with pandas and notebooks type thing called Dove Panda.

00:19:23.940 --> 00:19:26.340
So I literally am just checking this out now.

00:19:26.340 --> 00:19:32.340
But as you work with it, you can see here like it gives you like little tips like, oh, by the way, do you know you can concatenate like this?

00:19:32.340 --> 00:19:39.240
If you specify to access one, you get, you know, such and such and gives you a little little tips and tricks as you work with it so people can check that out.

00:19:39.240 --> 00:19:39.740
Yeah.

00:19:39.740 --> 00:19:40.240
Yeah.

00:19:40.240 --> 00:19:40.740
Yeah.

00:19:40.740 --> 00:19:42.240
This is a great time on moments.

00:19:42.240 --> 00:19:43.540
Exactly.

00:19:43.540 --> 00:19:43.940
Exactly.

00:19:43.940 --> 00:19:44.540
Exactly.

00:19:44.540 --> 00:19:44.940
Thanks, Dean.

00:19:44.940 --> 00:19:51.240
Brian, I do love some FastAPI and I love rich and I'm looking forward to what you're going to do by trying to put these together.

00:19:51.240 --> 00:19:52.040
Yeah.

00:19:52.040 --> 00:19:54.140
Well, I was I've been watching.

00:19:54.140 --> 00:19:57.740
Yeah, we've been watching rich, of course, and FastAPI a lot.

00:19:57.740 --> 00:19:58.740
Yeah.

00:19:58.740 --> 00:20:07.940
And so this this articles by Hayden Kotelman, I think, and it's a FastAPI and rich tracebacks in development.

00:20:07.940 --> 00:20:15.040
So the idea is that one of the things that cool things that rich has is like these awesome tracebacks and logging.

00:20:15.040 --> 00:20:16.140
They're just beautiful.

00:20:16.140 --> 00:20:20.640
And I mean, if you can say a traceback is beautiful, it's because of rich, probably.

00:20:20.640 --> 00:20:24.140
They look pretty great and the logging is pretty good.

00:20:24.140 --> 00:20:28.840
So the I'm just going to scroll down to some of these examples at the bottom.

00:20:28.840 --> 00:20:33.740
So the it's kind of tiny, but the logging is nice and colorized and stuff.

00:20:33.740 --> 00:20:39.440
And then the the exceptions, one of the things with the tracebacks and exceptions is there's a highlighted line number.

00:20:39.440 --> 00:20:48.240
It highlights the actual file name and kind of puts in lower, you know, more muted colors, the stuff you don't really need to care about right away.

00:20:48.240 --> 00:20:51.140
And it's just kind of a nice way to do it.

00:20:51.140 --> 00:20:56.140
But it gives you syntax highlighting in your like keyword highlighting in your code.

00:20:56.140 --> 00:20:57.140
Yeah.

00:20:57.140 --> 00:21:00.840
And that is the stack trace of a crash in the traceback.

00:21:00.840 --> 00:21:12.140
And so we've we've seen some examples of how to how to how to how to use the rich tracebacks from other programs, but I haven't seen it actually written up by somebody else.

00:21:12.140 --> 00:21:17.340
And so this is nice using FastAPI is fast.

00:21:17.340 --> 00:21:20.140
API is awesome for building web web APIs.

00:21:20.140 --> 00:21:22.340
And but how do you do this?

00:21:22.340 --> 00:21:24.540
How do you get this your application to do this?

00:21:24.540 --> 00:21:31.740
And so I'm not going to scroll through all of this, but the the gist of it is, is there's really only a few steps.

00:21:31.740 --> 00:21:41.140
So this post walks through all of it with all the code and just for the most part, you create a database data class with the logger configuration.

00:21:41.940 --> 00:21:47.640
And then you need a function that will either install rich as a handler or the production log configuration.

00:21:47.640 --> 00:21:50.340
I like that he puts this, this, this switch in place.

00:21:50.340 --> 00:21:57.240
So the idea around this is when you're debugging, you're going to use this, this nice, these nice tracebacks.

00:21:57.240 --> 00:22:00.280
But when you're winning some production, it's not going to use that.

00:22:00.280 --> 00:22:03.400
It's just going to do the, the, the default logging.

00:22:03.400 --> 00:22:07.840
And then you have to call logging basic config with the new settings.

00:22:07.960 --> 00:22:13.320
And then a little note that if you're using UVA corn, you probably want to override the logger for that.

00:22:13.320 --> 00:22:15.260
And that's it really sets it up.

00:22:15.260 --> 00:22:22.820
And it's got all the code in place so that your FastAPI application can have these lovely logs and tracebacks during development.

00:22:22.820 --> 00:22:24.040
Yeah, it's super neat.

00:22:24.040 --> 00:22:26.440
David, are you a fan of either of these frameworks?

00:22:26.440 --> 00:22:28.440
I haven't had a chance to use rich too much.

00:22:28.440 --> 00:22:32.400
I have been watching textual pretty closely on Twitter because it's just phenomenal.

00:22:32.400 --> 00:22:33.880
What he's been able to do.

00:22:33.880 --> 00:22:38.240
Like how, how do you have a docking scrolling side thing in a terminal window?

00:22:38.240 --> 00:22:38.980
What's going on here?

00:22:38.980 --> 00:22:41.620
I mean, I, I do, I love FastAPI.

00:22:41.620 --> 00:22:44.440
I built my, my wife's website using flask.

00:22:44.440 --> 00:22:48.220
And I liked how FastAPI was similar to flask in a lot of ways.

00:22:48.220 --> 00:22:50.980
But, you know, some of the syntax is, was a little bit cleaner.

00:22:50.980 --> 00:22:54.520
Although with the, the newer version of flask, it kind of borrows some of the same syntax.

00:22:54.520 --> 00:23:06.860
And it's just got a lot of really good, cities built in the API documentation was really, I think that's kind of clutch when you're learning a new framework too, because you're not having to do like curl commands or anything like that.

00:23:06.860 --> 00:23:10.920
You can just bring up a webpage and hook at it, you know, visually, which is, which is pretty nice.

00:23:10.920 --> 00:23:12.820
So no, I really like FastAPI.

00:23:12.820 --> 00:23:18.320
I just, you know, other than, you know, kind of building some small toy things, haven't had a really compelling reason to use it yet.

00:23:18.320 --> 00:23:19.060
So yeah.

00:23:19.060 --> 00:23:19.560
Yeah.

00:23:19.560 --> 00:23:19.900
Very cool.

00:23:19.900 --> 00:23:21.300
Toys are compelling reasons.

00:23:21.640 --> 00:23:24.020
I think definitely, definitely.

00:23:24.020 --> 00:23:27.380
Maybe some Arduino thing could run a FastAPI server or who knows.

00:23:27.380 --> 00:23:28.060
All right.

00:23:28.060 --> 00:23:31.560
So let me talk about some good news, good news, good news.

00:23:31.560 --> 00:23:39.600
We've had a couple of things we've covered about some visionary sponsors coming on to support Python and the PSF.

00:23:39.600 --> 00:23:41.580
So on, which is fantastic, right?

00:23:41.580 --> 00:23:51.520
I've certainly whinged a lot about people running, you know, multi-billion dollar revenue companies and doing nothing really to give back other than maybe a PR or something.

00:23:51.520 --> 00:23:55.960
But we've got Microsoft, we've got Bloomberg, we've got Google as visionary sponsors, right?

00:23:55.960 --> 00:24:02.300
And one of the things that that made possible is the CPython developer in residence.

00:24:02.300 --> 00:24:06.640
I don't know if it's directly related to one of those or if it's just sort of like that sort of brought it all together.

00:24:06.640 --> 00:24:19.140
But recently the PSF said they're going to have a developer in residence position and well-known community member, friend of the show, Lucas Lenga has applied and got hired.

00:24:19.140 --> 00:24:21.380
He's now the developer in residence.

00:24:21.380 --> 00:24:34.260
This is a little bit old news for it's from last month, but I wanted to make sure we gave it a quick shout out because I think it's going to be pretty interesting to know that there is a developer side person inside the PSF making sure things are going.

00:24:34.260 --> 00:24:37.600
So the PSF has seven, eight, nine, I don't know, something like this.

00:24:37.600 --> 00:24:41.960
I haven't got recent updates including this, but include this position.

00:24:41.960 --> 00:24:43.500
Full-time employees, right?

00:24:43.500 --> 00:24:52.460
So there's a bunch of people who work there, but to my knowledge, this is the first like developer person rather than marketing, legal, whatever, right?

00:24:52.460 --> 00:24:55.720
All that sort of business director, administrative side.

00:24:55.720 --> 00:24:58.320
Apologies to everybody that works at the PSF.

00:24:58.320 --> 00:25:00.260
That's like, don't forget me.

00:25:00.260 --> 00:25:01.520
Yeah, no, no, no.

00:25:01.520 --> 00:25:10.380
Those are super important, but it's interesting that there's not been a Python developer type of role within that group is all I'm saying.

00:25:10.380 --> 00:25:12.900
So they put that out.

00:25:12.900 --> 00:25:14.420
Lucas Lenga is now part of it.

00:25:14.420 --> 00:25:16.280
And there's some interesting takeaways here.

00:25:16.280 --> 00:25:26.140
So basically, let me just give a bit of a quote here for how Lucas decided to sort of position this and how he sees it.

00:25:26.140 --> 00:25:31.360
He said, I don't really want this to be like, hey, I'm the appointed CEO of Python.

00:25:31.360 --> 00:25:34.080
So listen to what I have to say, right?

00:25:34.080 --> 00:25:42.720
He said, no, he's incredibly hopeful for Python because of this and wanting to apply for it and so on.

00:25:42.720 --> 00:25:48.080
He says, I think it's a role with transformational potential for the project.

00:25:48.080 --> 00:25:55.540
In short, I believe the mission of the developer in residence, the DIR, is to accelerate the developer experience of everybody else.

00:25:55.540 --> 00:26:03.540
And that not includes just the core team, but most importantly, the drive-by contributions, contributors submitting pull requests and creating issues on the tracker.

00:26:03.920 --> 00:26:14.300
So he's hoping that with this role, he can do things like make sure that there's a steady review of the stream of PRs and issues so they don't get stale and there's not a backlog.

00:26:14.300 --> 00:26:15.900
Triage the issues.

00:26:15.900 --> 00:26:20.920
Be present in the official communication channels to unblock people if they get stuck trying to contribute.

00:26:20.920 --> 00:26:25.080
Keeping CI and test suites in a usable state and making them run quick.

00:26:25.460 --> 00:26:29.360
And keeping tabs on where the work is most needed and the projects that are most important.

00:26:29.360 --> 00:26:36.300
So he's sort of the, it sounds to me almost like the technical person in the room to help the community keep moving.

00:26:36.300 --> 00:26:39.180
And just making sure, oh, everyone's having a problem.

00:26:39.180 --> 00:26:43.440
Many people are having a problem trying to do a PR because they can't get CPython to build.

00:26:43.440 --> 00:26:46.120
Let's make that incredibly simple for them and things like that.

00:26:46.120 --> 00:26:50.180
Yeah, I like his attitude of where he's going with this.

00:26:50.720 --> 00:26:51.500
Yep, yep.

00:26:51.500 --> 00:26:59.460
If I didn't point it out, Lucas is also the creator of Black, the Black formatter, which I know we've talked about in 100,000 variations here.

00:26:59.460 --> 00:27:00.160
So that's great.

00:27:00.160 --> 00:27:02.040
David, how do you feel about this?

00:27:02.040 --> 00:27:03.060
I think it's great.

00:27:03.060 --> 00:27:09.520
Any full-time person that can have working for the PSF or on Python directly is going to help increase stability.

00:27:09.520 --> 00:27:16.100
And I like his approach too, where he's going to try to increase throughput by maximizing everybody else's efficiency.

00:27:16.100 --> 00:27:30.300
I think that's a, it'd be easy to say like, oh, I'm going to work on these features or on this, but he's most concerned about making development for Python as ergonomic as possible, which I think ultimately will create more throughput and, you know, a better, better Python in the long run.

00:27:30.300 --> 00:27:30.800
Yeah.

00:27:30.800 --> 00:27:37.700
And absolutely props to the PSF because it's easy to hire somebody and say, here's what I want you to produce for us.

00:27:37.700 --> 00:27:43.500
It's harder to hire somebody and say, I want you to be an enabler of other people because it's hard to measure that, right?

00:27:43.500 --> 00:27:44.240
Mm-hmm.

00:27:44.240 --> 00:27:44.760
Yep.

00:27:44.760 --> 00:27:54.720
One of the interesting things that I think that he's doing is, I'm not sure if he's going to keep this up, but it looks like he has so far, is he puts out weekly report posts of what he's been doing.

00:27:54.720 --> 00:28:01.040
So this, I can't imagine having that much public scrutiny over what my work week looks like.

00:28:01.040 --> 00:28:02.940
But I mean, it's really cool.

00:28:02.940 --> 00:28:04.880
So much time working on CI, come on.

00:28:06.600 --> 00:28:09.620
So it's pretty, pretty, pretty impressive.

00:28:09.620 --> 00:28:12.420
And it's cool that he's, he's doing that.

00:28:12.420 --> 00:28:15.740
That's a, the entire Python world is watching.

00:28:15.740 --> 00:28:16.960
No pressure or anything.

00:28:16.960 --> 00:28:18.020
Yeah.

00:28:18.020 --> 00:28:23.280
He did say he was a little nervous about this because this is the first year of this position.

00:28:23.280 --> 00:28:31.260
And so the success or failure that he has will influence like whether it continues and, you know, what happens sort of in the future.

00:28:31.260 --> 00:28:32.280
So super cool.

00:28:32.280 --> 00:28:34.780
Let me get a little feedback from the audience here.

00:28:34.780 --> 00:28:35.940
So Sam Morley.

00:28:36.080 --> 00:28:38.180
Kate says, good for Lucas.

00:28:38.180 --> 00:28:38.640
He's great.

00:28:38.640 --> 00:28:42.300
I watched a bunch of videos he did on YouTube about making music with asyncio.

00:28:42.300 --> 00:28:43.380
I haven't seen those.

00:28:43.380 --> 00:28:44.060
I have to check them out.

00:28:44.060 --> 00:28:54.920
And Dean out in the live stream says, CEO of Python reminds me of a known joke in my country where this famous newscaster was shouting, get me the person in charge of the internet.

00:28:54.920 --> 00:28:57.020
Get me the person in charge of the internet.

00:28:58.700 --> 00:28:59.360
That's great.

00:28:59.360 --> 00:28:59.400
That's great.

00:28:59.400 --> 00:29:02.100
Dean, you have to let us know what country that is.

00:29:02.100 --> 00:29:02.700
That's awesome.

00:29:02.700 --> 00:29:03.360
All right.

00:29:03.360 --> 00:29:04.420
Brian, you want the next one?

00:29:04.420 --> 00:29:05.040
What's that?

00:29:05.040 --> 00:29:06.060
You're next.

00:29:06.060 --> 00:29:07.540
No, you already did this, right?

00:29:07.540 --> 00:29:07.940
Yeah.

00:29:07.940 --> 00:29:08.100
Yeah.

00:29:08.100 --> 00:29:08.520
David's next.

00:29:08.520 --> 00:29:10.260
I got to keep track of what's happening here.

00:29:10.260 --> 00:29:11.360
David, you're next.

00:29:11.360 --> 00:29:11.680
Okay.

00:29:11.960 --> 00:29:12.120
Yep.

00:29:12.120 --> 00:29:16.860
So my next item is a library or framework.

00:29:16.860 --> 00:29:19.280
I'm not sure which one it falls under called Dagster.

00:29:19.280 --> 00:29:24.420
It is a data orchestrator for machine learning analytics and ETL.

00:29:24.780 --> 00:29:29.960
It's one of the first attempts I tried for any kind of data pipeline.

00:29:29.960 --> 00:29:32.220
And it's based in Python.

00:29:32.220 --> 00:29:46.600
So you programmatically build up your pipeline using Python and, you know, different decorators depending on what kind of if you're building a solid or, you know, depending on what you're building in the pipeline or if you're doing configuration, use different decorators.

00:29:46.780 --> 00:29:49.400
And it took a little bit to kind of wrap my head around it.

00:29:49.400 --> 00:29:55.580
I think it had more to do with the just kind of understanding how pipelines are typically constructed in industry.

00:29:55.580 --> 00:29:59.020
But once I got my head wrapped around it, it was really simple to use.

00:29:59.020 --> 00:30:00.780
I felt like I could produce things pretty quickly.

00:30:00.780 --> 00:30:16.760
One really nice thing that they do is they, you know, allow you to essentially work on your pipeline locally, then deploy to production to like a Kubernetes or you can deploy to Airflow or Dask or, you know, whatever underlining engine you want to run your pipeline.

00:30:16.760 --> 00:30:20.960
And, you know, there's very little transition there.

00:30:20.960 --> 00:30:29.240
You know, you're not developing something local and having to completely change it for, you know, like a cluster or, you know, larger scale.

00:30:29.240 --> 00:30:33.760
So and another really nice feature it has is a UI called Daggett.

00:30:33.760 --> 00:30:43.160
So you could do everything via the command line if you want to, but it does come with a really nice UI that allows you to see an overview of your pipeline.

00:30:43.160 --> 00:30:46.160
It allows you to test it using the playground.

00:30:46.160 --> 00:30:49.840
You can update your configuration in the playground.

00:30:49.840 --> 00:30:53.120
You can look at previous runs to see if they passed or failed.

00:30:53.120 --> 00:30:55.680
It gives detailed logging and error messaging.

00:30:55.680 --> 00:31:02.020
So it's, you know, this by itself is pretty nice on top of an already very nice tool.

00:31:02.020 --> 00:31:06.400
So I can give a quick demo too.

00:31:06.800 --> 00:31:12.100
So this is the, I think it's the first part of the tutorial they have you where you have multiple solids.

00:31:12.100 --> 00:31:16.240
So these represent different, different pieces of processing.

00:31:16.240 --> 00:31:18.100
And then, like I said, you can use the playground.

00:31:18.100 --> 00:31:23.360
It'll check all of your configuration, everything to make sure it's correct before it lets you run anything.

00:31:23.360 --> 00:31:28.120
So if you have something misconfigured, it's not going to blow up halfway through a, you know, a 30 minute job.

00:31:28.600 --> 00:31:29.600
And then when you, oh no.

00:31:29.600 --> 00:31:29.840
Oh, that's nice.

00:31:29.840 --> 00:31:30.700
Like that?

00:31:30.700 --> 00:31:31.380
Oh no.

00:31:31.380 --> 00:31:32.420
That's unfortunate.

00:31:32.420 --> 00:31:32.940
Yeah.

00:31:32.940 --> 00:31:33.480
No.

00:31:33.480 --> 00:31:38.200
So I'll probably, I'll probably forgo the, the real time demonstration.

00:31:38.200 --> 00:31:40.600
I think my terminal probably died is what that was.

00:31:40.600 --> 00:31:48.860
But yeah, it'll actually show a run in sequence and show the different pieces that they're completing and feeding into the other piece too.

00:31:48.860 --> 00:31:54.080
So it's not so much for this because it's a very small, quick pipeline.

00:31:54.080 --> 00:31:59.660
But if you have like longer SQL queries or something like that, it'll actually kind of show in real time, you know, how it's processing.

00:31:59.660 --> 00:32:04.220
So you can kind of get a visual intuition to what's going on on top of everything else too.

00:32:04.520 --> 00:32:10.340
So yeah, a couple of the resources around this too, if you want someone that explains it a little bit better than I do.

00:32:10.340 --> 00:32:16.280
The data engineering podcast had an episode and a software engineering daily also did an episode about Dexter.

00:32:16.280 --> 00:32:19.220
So, you know, that's kind of where I first learned about it.

00:32:19.220 --> 00:32:21.120
And there's a lot of really good information in those podcasts.

00:32:21.120 --> 00:32:21.720
Yeah.

00:32:21.720 --> 00:32:26.580
These data pipeline frameworks are super interesting.

00:32:26.580 --> 00:32:28.900
I've certainly realized just how valuable they can be.

00:32:28.900 --> 00:32:32.080
Dean asks, David, how is this compared to Airflow?

00:32:32.080 --> 00:32:32.720
Do you have any idea?

00:32:32.720 --> 00:32:33.300
Have you tried?

00:32:33.300 --> 00:32:34.240
Have you looked at either?

00:32:34.240 --> 00:32:34.280
Yeah.

00:32:34.280 --> 00:32:36.200
This was, I haven't used Airflow.

00:32:36.200 --> 00:32:39.980
This is the first, my first stab at any kind of data pipeline.

00:32:39.980 --> 00:32:42.740
And in my current job, we're not using Airflow or Dexter.

00:32:42.740 --> 00:32:44.700
We're using one of the cloud-based tools.

00:32:44.700 --> 00:32:50.440
So it's, I think Airflow is more draggy, droppy, more visual, but I could be wrong about that.

00:32:50.440 --> 00:32:56.140
One thing I really liked about Dexter is, at least compared to my, what I'm currently using,

00:32:56.140 --> 00:32:58.920
is that you could programmatically create these interfaces.

00:32:59.220 --> 00:33:06.600
And technically the tool I'm using now has an API that you can throw JSON against to create your different resources and everything.

00:33:06.600 --> 00:33:12.740
But it's nice having Python code because that works a little bit better with my brain than a lot of the draggy, droppy stuff.

00:33:12.800 --> 00:33:13.120
Yeah, yeah.

00:33:13.120 --> 00:33:21.280
I did have the Airflow folks on the show, on Talk Python, not the show, a little while ago.

00:33:21.280 --> 00:33:23.480
It's not out yet, but last week maybe.

00:33:23.880 --> 00:33:27.620
And they pointed out that it's mostly, it's like pretty much all Python here as well.

00:33:27.620 --> 00:33:30.540
So you program it in Python over on Airflow.

00:33:30.540 --> 00:33:39.440
And then you have similar visual tools to actually see what's happening, but you can't interact with it through those things.

00:33:39.440 --> 00:33:42.720
You can just like kind of watch it and debug it and stuff from my understanding.

00:33:42.720 --> 00:33:44.720
So I would put them in a pretty similar category.

00:33:44.720 --> 00:33:47.840
I would say one thing that's pretty interesting is there's, that's not what I would pull out.

00:33:47.840 --> 00:33:51.680
Actually, when Airflow GitHub is what I wanted to sort of point out.

00:33:51.680 --> 00:33:56.740
I was really surprised to learn that Airflow has 22,000 stars on GitHub, which kind of blew my mind.

00:33:56.740 --> 00:33:59.640
I thought of it as like a little framework that people might use.

00:33:59.640 --> 00:34:00.560
Apparently it's popular.

00:34:00.560 --> 00:34:02.000
I'm not really sure about Dagster.

00:34:02.000 --> 00:34:03.140
I guess I could look as well.

00:34:03.140 --> 00:34:04.640
I think it's relatively new.

00:34:04.640 --> 00:34:07.340
So I'd be surprised if it were quite as popular as Airflow.

00:34:07.340 --> 00:34:15.940
But one nice thing that Dagster can do, if you're running, if you're running, or if you have Airflow pipelines that you're using,

00:34:16.000 --> 00:34:18.620
you can use that server to run Dagster too.

00:34:18.620 --> 00:34:23.100
It can basically pilot you something that's compatible with Airflow if you need to do that.

00:34:23.100 --> 00:34:28.300
So there's a couple of different, I think, translation ways you can translate it too.

00:34:28.300 --> 00:34:31.040
So it seems like a pretty interesting tool.

00:34:31.040 --> 00:34:34.840
And like I said, I had developed a small pipeline in my previous job.

00:34:34.840 --> 00:34:39.100
It's kind of my first stab at pipelines to eliminate it in Excel sheet.

00:34:39.100 --> 00:34:41.760
I was doing a bunch of horrible, awful SQL queries.

00:34:41.760 --> 00:34:45.640
I could just imagine that people are trying to do this with Excel and it was probably wrong.

00:34:45.920 --> 00:34:48.800
Not necessarily incorrect, but it was wrong to do it.

00:34:48.800 --> 00:34:51.740
Well, it was interesting.

00:34:51.740 --> 00:34:54.820
Excel is just very interesting to reverse engineering.

00:34:54.820 --> 00:34:56.240
It's a lot of go-to statements.

00:34:56.240 --> 00:35:02.840
It's ubiquitous, but it's definitely, as far as programming production systems, not a good tool.

00:35:03.620 --> 00:35:04.060
Yeah.

00:35:04.060 --> 00:35:04.500
Yeah.

00:35:04.500 --> 00:35:04.820
Very cool.

00:35:04.820 --> 00:35:05.080
All right.

00:35:05.080 --> 00:35:07.100
So I got some more real-time updates here.

00:35:07.100 --> 00:35:13.120
Teddy says, I know one of the big differences with Airflow is that you can use the output of a task as the input of the next task.

00:35:13.120 --> 00:35:16.760
From what I understand, Dagster is kind of a second generation data orchestration.

00:35:16.760 --> 00:35:21.560
Unsure which generation Airflow would be, but here we go.

00:35:21.860 --> 00:35:31.200
And then Airflow mostly assumes you store and load data in each task, even though Airflow has something called XCOM, which allows you to pass the output as input of the next.

00:35:31.200 --> 00:35:31.640
Okay.

00:35:31.640 --> 00:35:32.260
Interesting.

00:35:32.260 --> 00:35:32.700
Yeah.

00:35:32.700 --> 00:35:34.420
Thanks for all that background info there.

00:35:34.680 --> 00:35:37.700
I haven't used either, but I definitely, definitely think they're both neat.

00:35:37.700 --> 00:35:41.120
And I feel there's a lot of places that are just like, well, how else are we going to do it?

00:35:41.120 --> 00:35:42.340
Of course, we're going to use that spreadsheet.

00:35:42.340 --> 00:35:42.820
Right.

00:35:42.820 --> 00:35:45.480
And if they had tools like this, it would be very empowering.

00:35:45.480 --> 00:35:56.520
One of the things I find very interesting about these frameworks is usually what you end up building is like the little piece, like load the CSV into the database or run the report that gets me the revenue for the day.

00:35:56.520 --> 00:36:04.660
And what you end up building are very, very small pieces and you don't have to worry about the reusability, the reproducibility, the durability.

00:36:04.660 --> 00:36:18.180
You just go like, I'm going to build an incredibly small bit of Python and we'll just click it in as part of this workflow, which really seems to empower people almost like the microservices story, but for data processing without all the hard deployment side of things.

00:36:18.180 --> 00:36:26.980
I hope that they, if they don't already have it, I hope that they put a tool connected with Degster called Degnavit because it needs to be there.

00:36:26.980 --> 00:36:30.660
I think maybe some sort of capture tool or something.

00:36:30.660 --> 00:36:31.620
Degnavit would be good.

00:36:31.620 --> 00:36:32.060
Yeah.

00:36:32.060 --> 00:36:34.340
I love the UI bit of it as well.

00:36:34.340 --> 00:36:34.960
All right.

00:36:34.960 --> 00:36:36.440
Quick bit of follow up.

00:36:36.440 --> 00:36:38.380
I guess, Brian, you want to start and you got any extras today?

00:36:38.380 --> 00:36:42.320
I've got just a vanity extra.

00:36:42.320 --> 00:36:50.940
So one of the things that we noticed, Will mentioned about textual.

00:36:50.940 --> 00:36:52.420
We talked about textual briefly.

00:36:52.420 --> 00:36:57.540
The stars on textual is just going through the roof.

00:36:57.540 --> 00:36:58.540
I love the graph.

00:36:58.540 --> 00:37:02.980
What like, is this the XKCD format of Matt Plotlib or something?

00:37:02.980 --> 00:37:03.520
What is this?

00:37:03.520 --> 00:37:07.180
It's a, it's, I have no idea what it is.

00:37:07.180 --> 00:37:07.460
That's great.

00:37:07.460 --> 00:37:09.080
Anyway, show us the other pictures.

00:37:09.080 --> 00:37:10.760
This is the, yeah, the stars are insane.

00:37:10.760 --> 00:37:12.920
It's like a vertical line on a graph.

00:37:12.920 --> 00:37:16.180
One of my, one of my own projects has a similar trajectory.

00:37:16.180 --> 00:37:18.180
So I wanted to just highlight that.

00:37:18.180 --> 00:37:23.060
It's looking up to, of course, I only have 16 stars.

00:37:23.060 --> 00:37:24.860
Will has like 3000.

00:37:24.860 --> 00:37:29.300
A little different, but still look, it's kind of the same.

00:37:29.300 --> 00:37:29.680
Do you think?

00:37:29.680 --> 00:37:30.600
Yeah.

00:37:30.600 --> 00:37:31.440
That's awesome.

00:37:31.440 --> 00:37:33.100
It's 15 stars.

00:37:33.100 --> 00:37:34.340
Most of my repos.

00:37:34.340 --> 00:37:37.140
Hey, you just got to extrapolate out a little bit.

00:37:37.140 --> 00:37:38.220
No, that's, that's really cool.

00:37:38.220 --> 00:37:38.600
Awesome.

00:37:39.340 --> 00:37:40.980
David, do you have any extra stuff you want to throw out?

00:37:40.980 --> 00:37:41.640
Sorry, Brian.

00:37:41.640 --> 00:37:43.360
I had one, one extra.

00:37:43.360 --> 00:37:45.980
I didn't load it on my screen over here.

00:37:45.980 --> 00:37:48.280
Let me see if I can pop it over real quick.

00:37:48.280 --> 00:37:53.000
But I, and this isn't Python, but I know SQL and Python.

00:37:53.000 --> 00:37:58.720
Are you going to go back to some nostalgic time on the internet where you open up a DOS prompt

00:37:58.720 --> 00:38:00.140
and type when to start Windows?

00:38:00.140 --> 00:38:00.740
What is this?

00:38:00.740 --> 00:38:02.700
This, this is a modern SQL.

00:38:02.940 --> 00:38:07.660
It's a really fantastic slideshow that goes through a lot of updates.

00:38:07.660 --> 00:38:12.580
So if you're still doing SQL the old fashioned way, it shows you how you can replace that with,

00:38:12.580 --> 00:38:16.180
you know, better cleaner, more concise versions.

00:38:16.180 --> 00:38:21.360
And there are so many things in here that I have was doing a lot of like just horrible hacky tricks

00:38:21.360 --> 00:38:24.620
to get to work that you could take care of in one line for SQL.

00:38:24.620 --> 00:38:27.840
And that, you know, even with some of the newer things I've learned, like there's just so many,

00:38:27.840 --> 00:38:32.000
so many great, great, you know, I don't know if you call them tools or methods or what,

00:38:32.000 --> 00:38:37.280
but, you know, Python and SQL tend to work together a lot, especially in the data space.

00:38:37.280 --> 00:38:42.920
So if you're kind of like me where you, you have some, some, I guess, self-taught SQL experience,

00:38:42.920 --> 00:38:46.660
something like this can be very helpful, to kind of learn some of the, I guess,

00:38:46.660 --> 00:38:49.740
better practices for, for different things that you might want to try to do with SQL.

00:38:49.740 --> 00:38:53.440
No, this is great because I, I learned SQL like in the nineties.

00:38:53.440 --> 00:38:55.820
So it's changed a lot since then.

00:38:55.820 --> 00:39:00.100
And I was just thinking the same thing, Brian, like it's been at least 10 years since I've tried to

00:39:00.100 --> 00:39:02.520
refresh my SQL skill.

00:39:02.520 --> 00:39:06.240
Uh, so there's probably a lot of stuff that's, oh, you, you shouldn't do this.

00:39:06.320 --> 00:39:07.320
Michael, why you do this?

00:39:07.320 --> 00:39:10.040
If you use this other keyword, it's more efficient, safer, faster.

00:39:10.040 --> 00:39:10.760
Come on.

00:39:10.760 --> 00:39:11.660
Yeah.

00:39:11.660 --> 00:39:12.820
That's like it.

00:39:12.820 --> 00:39:15.060
Jealous of the people learning SQL now.

00:39:15.060 --> 00:39:16.040
Yeah.

00:39:16.040 --> 00:39:17.420
How about you, Michael?

00:39:17.420 --> 00:39:18.140
Got anything extras?

00:39:18.140 --> 00:39:21.900
I got some follow-up, some follow-up from last time.

00:39:21.900 --> 00:39:25.100
This comes to us from John Hagan.

00:39:25.100 --> 00:39:28.480
And I think I probably is the one who said this.

00:39:28.480 --> 00:39:29.920
I said, oh, there's really cool timepip.

00:39:29.920 --> 00:39:36.180
I would like about being able to use lowercase d dict and lowercase l list as type hints rather than,

00:39:36.180 --> 00:39:40.400
from typing import capital L list or capital D dict, right?

00:39:40.400 --> 00:39:41.760
He said, oh, that's coming in 310.

00:39:41.760 --> 00:39:42.200
Fantastic.

00:39:42.200 --> 00:39:44.680
He's like, you know, that's in 3.5 or 3.9.

00:39:44.680 --> 00:39:45.820
So it's kind of already out.

00:39:45.820 --> 00:39:46.560
Oh, right.

00:39:46.560 --> 00:39:46.860
Okay.

00:39:47.220 --> 00:39:49.800
But he did point out some things that are coming that are neat.

00:39:49.800 --> 00:39:55.920
So for example, we're previously, we had to say, if I want a potentially optional, it could

00:39:55.920 --> 00:39:56.900
be none or it could be a list.

00:39:56.900 --> 00:40:01.080
And the list, if it is a list has strings, you have to say optional bracket list bracket

00:40:01.080 --> 00:40:01.660
stir.

00:40:01.660 --> 00:40:06.180
And those are all capital because they have this parallel type implementation over in typing,

00:40:06.180 --> 00:40:06.500
right?

00:40:06.500 --> 00:40:12.420
In Python 3.9, I can now say optional of lowercase l list of bracket stir.

00:40:12.460 --> 00:40:15.020
And you might think who cares if it's lowercase or uppercase l?

00:40:15.020 --> 00:40:19.220
Well, the difference is you don't have to do an import and explain to people who don't

00:40:19.220 --> 00:40:19.840
know that code.

00:40:19.840 --> 00:40:22.800
Like, oh, you've got to go import this other type things to say the type.

00:40:22.800 --> 00:40:24.900
Yes, I know list is right there, but you can't use list.

00:40:24.900 --> 00:40:26.160
You got to do something else, right?

00:40:26.160 --> 00:40:30.640
So that's the feature that I was excited about that I said was in 3.10, in 3.9.

00:40:30.640 --> 00:40:31.580
So hooray.

00:40:31.580 --> 00:40:36.540
But he also pointed out that the union operators were simplified.

00:40:36.540 --> 00:40:39.800
It used to be you would have a similar syntax for union as optional.

00:40:39.940 --> 00:40:43.220
You would say union of bracket one thing, comma, bracket the other thing.

00:40:43.220 --> 00:40:48.120
But now you can say just type one pipe vertical bar type two.

00:40:48.120 --> 00:40:51.980
And this actually allows us to model optional without importing optional.

00:40:51.980 --> 00:40:57.320
So instead of optional of list of string, we can just have list of string pipe none.

00:40:57.320 --> 00:40:58.560
Yeah, this is cool.

00:40:58.560 --> 00:41:03.140
And I'm glad somebody pointed out because the 3.10 announcements don't say anything about

00:41:03.140 --> 00:41:03.600
optional.

00:41:04.420 --> 00:41:06.320
But in effect, they do.

00:41:06.320 --> 00:41:08.020
You don't have to use this anymore.

00:41:08.020 --> 00:41:10.580
But are you going to start using this?

00:41:10.580 --> 00:41:12.180
The pipe thing?

00:41:12.180 --> 00:41:13.260
Well, yeah.

00:41:13.260 --> 00:41:14.320
And the optional thing.

00:41:14.320 --> 00:41:15.700
Because I started to.

00:41:15.700 --> 00:41:19.400
And then I realized that if I start using that, then my code is 3.10 only.

00:41:19.400 --> 00:41:20.760
Yes, exactly.

00:41:20.760 --> 00:41:24.580
Which depends on the scenarios, right?

00:41:24.680 --> 00:41:28.760
So for, say, Talk Python training, the code all behind that, I control the server.

00:41:28.760 --> 00:41:30.400
Yeah, nobody's looking at it.

00:41:30.400 --> 00:41:32.420
It's easy for me to make it the brand new thing.

00:41:32.420 --> 00:41:38.280
If I were to say generate, if I were going to build an example app for a course, then I

00:41:38.280 --> 00:41:39.840
would be hesitant to use this right away.

00:41:39.840 --> 00:41:40.920
I might wait a year or two.

00:41:41.180 --> 00:41:43.820
Because I don't want to have to have people have a bad experience.

00:41:43.820 --> 00:41:44.800
Like, well, I have 3.9.

00:41:44.800 --> 00:41:45.420
That's pretty new.

00:41:45.420 --> 00:41:45.980
That should be worth.

00:41:45.980 --> 00:41:48.880
Like, nope, that doesn't work because I didn't want to say the word optional, right?

00:41:48.880 --> 00:41:49.400
Yeah.

00:41:49.400 --> 00:41:55.340
And if it was an open source project, I guess it would depend on if I wanted to support older

00:41:55.340 --> 00:41:55.980
versions.

00:41:55.980 --> 00:41:57.680
Probably even longer there.

00:41:57.680 --> 00:41:57.920
Wait.

00:41:57.920 --> 00:41:58.400
I don't know.

00:41:58.400 --> 00:41:58.760
What do you think?

00:41:58.760 --> 00:42:04.580
Yeah, I was thinking a library specifically, you'd probably want to almost stick with the

00:42:04.580 --> 00:42:09.080
3.5 to 3, at least for a while to kind of flush out people that are using some

00:42:09.080 --> 00:42:10.440
the older versions of Python.

00:42:10.440 --> 00:42:17.380
Yeah, I think 3.9, I'm using 3.9 on everything now, but I think for a lot of people, that's

00:42:17.380 --> 00:42:21.560
still pretty aggressive to have a 3.9 or higher requirement for a library.

00:42:21.560 --> 00:42:22.840
Yeah, I agree.

00:42:22.840 --> 00:42:25.860
A couple of bits of real-time feedback out there.

00:42:25.860 --> 00:42:31.360
Sam and Dean both say there are Dunder future imports that you can do now that will enable

00:42:31.360 --> 00:42:32.600
some of this stuff already.

00:42:32.600 --> 00:42:35.760
So, like, from Dunder future import pipe.

00:42:35.760 --> 00:42:37.920
I don't know if that's true.

00:42:38.140 --> 00:42:39.300
Or if it's a joke.

00:42:39.300 --> 00:42:45.660
Well, I do know that the Dunder future stuff does support the newer type information.

00:42:45.660 --> 00:42:47.180
I don't know about for pipe.

00:42:47.180 --> 00:42:47.760
Okay.

00:42:47.760 --> 00:42:48.300
Yeah.

00:42:48.300 --> 00:42:48.820
Yeah.

00:42:48.820 --> 00:42:49.860
Okay.

00:42:49.860 --> 00:42:53.400
We can do some after coding on this.

00:42:53.400 --> 00:42:54.500
Coding after the recording.

00:42:54.500 --> 00:42:55.720
And we'll know.

00:42:55.720 --> 00:42:58.040
Oh, Dean says he's kidding.

00:42:58.040 --> 00:42:58.320
Yeah.

00:42:58.320 --> 00:43:00.320
So, but you really can.

00:43:00.320 --> 00:43:01.080
Thank you.

00:43:01.080 --> 00:43:06.360
You really can do some of these other type information with the import Dunder futures.

00:43:06.720 --> 00:43:06.960
Okay.

00:43:06.960 --> 00:43:09.440
Are you ready for a joke?

00:43:09.440 --> 00:43:10.000
Yeah.

00:43:10.000 --> 00:43:11.340
All right, Brian.

00:43:11.340 --> 00:43:13.240
So, you're going to have to help me along here.

00:43:13.240 --> 00:43:14.440
Okay.

00:43:14.640 --> 00:43:18.620
So, there's two developers staring very worried at a screen.

00:43:18.620 --> 00:43:24.300
They have one section, then a big, long, quiet section, and then some more.

00:43:24.300 --> 00:43:27.260
So, you be the very first person, and I'll be the second person here.

00:43:27.260 --> 00:43:27.740
Okay.

00:43:27.740 --> 00:43:28.340
Okay.

00:43:28.340 --> 00:43:29.580
I hope it works.

00:43:29.580 --> 00:43:30.720
Do not hope.

00:43:30.720 --> 00:43:31.640
Pray.

00:43:31.640 --> 00:43:31.760
Pray.

00:43:31.760 --> 00:43:34.160
Pray it works.

00:43:34.160 --> 00:43:38.500
Have you ever been there and just in this situation where you're just like, oh, you must.

00:43:38.620 --> 00:43:39.360
It must work.

00:43:39.360 --> 00:43:40.880
If this doesn't work, we're done.

00:43:40.880 --> 00:43:41.480
Yeah.

00:43:41.480 --> 00:43:42.340
Yeah.

00:43:42.340 --> 00:43:44.280
And that's so much on the software side of things.

00:43:44.280 --> 00:43:50.560
But when I was a manufacturing engineer, there was so many times we'd be troubleshooting a machine on a Saturday for eight hours straight.

00:43:50.560 --> 00:43:51.820
And you'd think you made that.

00:43:51.820 --> 00:43:54.540
And everybody's just holding their breath, crossing their fingers.

00:43:54.540 --> 00:43:55.240
It worked.

00:43:55.240 --> 00:43:55.720
It worked.

00:43:55.720 --> 00:43:56.400
It worked.

00:43:56.400 --> 00:43:57.560
It's like you want to go home someday.

00:43:57.560 --> 00:43:58.440
Yeah.

00:43:58.440 --> 00:43:59.600
I remember how.

00:43:59.600 --> 00:44:00.400
Go ahead, Brian.

00:44:00.700 --> 00:44:11.100
No, I definitely feel this when I'm working on C++ code because you have to wait for it to compile and then load it and then test it and stuff like that.

00:44:11.100 --> 00:44:23.680
But even with Python stuff, I still feel this when I'm working on CI tools because the continuous integration, you're not sure if you got it right, the syntax right, the YAML right or whatever until you push it and see what happens.

00:44:23.680 --> 00:44:24.300
Yeah.

00:44:24.300 --> 00:44:24.960
Yeah.

00:44:24.960 --> 00:44:25.700
CI is a good point.

00:44:25.700 --> 00:44:27.240
You have so little visibility in there.

00:44:27.380 --> 00:44:31.300
And if it's not working, there's one bit of real time follow up on mine here.

00:44:31.300 --> 00:44:40.420
It's like if you come over here and you look at the PEP 585, it does say the implementation of some of these new features under typing.

00:44:40.420 --> 00:44:43.020
This is the one that's coming out that came out in 3.9.

00:44:43.020 --> 00:44:48.780
It says you can say from future import annotations and then start using lowercase L and things like that.

00:44:48.780 --> 00:44:49.400
Lowercase D.

00:44:49.400 --> 00:44:50.740
Who knows?

00:44:50.740 --> 00:44:54.060
I know Dean said he was joking, but maybe you really can get the pipe to come out that way.

00:44:54.060 --> 00:45:02.020
But at least you can do like these sort of 3.9 level changes using a back to 3.7, it looks like.

00:45:02.020 --> 00:45:02.420
Okay.

00:45:02.420 --> 00:45:03.180
All right.

00:45:03.180 --> 00:45:03.700
Cool, cool.

00:45:03.700 --> 00:45:05.260
Well, that was a lot of fun.

00:45:05.260 --> 00:45:06.240
Yeah, it was.

00:45:06.240 --> 00:45:07.800
I had another one, but I'm going to save it.

00:45:07.800 --> 00:45:08.040
So.

00:45:08.040 --> 00:45:08.540
Good.

00:45:08.540 --> 00:45:09.120
All right.

00:45:09.120 --> 00:45:10.900
Well, I'm looking forward to hear about it next week.

00:45:10.900 --> 00:45:12.420
David, thank you for joining us.

00:45:12.420 --> 00:45:13.720
Thank you for having me.

00:45:13.720 --> 00:45:14.120
Yeah.

00:45:14.120 --> 00:45:14.340
Yeah.

00:45:14.340 --> 00:45:17.000
And thanks for all the tips and stuff you've had throughout the years.

00:45:17.000 --> 00:45:18.760
And yeah, it's really good to have you here.

00:45:18.760 --> 00:45:21.360
And congratulations on your first dev job.

00:45:21.360 --> 00:45:22.000
That's fantastic.

00:45:22.060 --> 00:45:23.240
That is fantastic.

00:45:23.240 --> 00:45:29.560
And thanks for, thanks Dean for correcting us in real time.

00:45:29.560 --> 00:45:30.200
That's awesome.

00:45:30.200 --> 00:45:31.800
It's good.

00:45:31.800 --> 00:45:32.680
Yeah, absolutely.

00:45:32.680 --> 00:45:33.040
Yeah.

00:45:33.040 --> 00:45:33.820
Thank you everyone.

00:45:33.820 --> 00:45:39.580
And oh, Sam does sadly show us that import pipe from the future doesn't work, but yeah.

00:45:39.580 --> 00:45:40.660
Thanks everyone.

00:45:40.660 --> 00:45:41.460
See y'all later.

00:45:41.460 --> 00:45:41.760
Bye.

00:45:41.760 --> 00:45:42.620
Thank you.

00:45:42.880 --> 00:45:44.360
Thanks for listening to Python Bytes.

00:45:44.360 --> 00:45:47.140
Follow the show on Twitter via at Python Bytes.

00:45:47.140 --> 00:45:50.220
That's Python Bytes as in B-Y-T-E-S.

00:45:50.220 --> 00:45:53.020
Get the full show notes over at Pythonbytes.fm.

00:45:53.020 --> 00:45:57.880
If you have a news item we should cover, just visit Pythonbytes.fm and click submit in the

00:45:57.880 --> 00:45:58.300
nav bar.

00:45:58.300 --> 00:46:00.420
We're always on the lookout for sharing something cool.

00:46:00.420 --> 00:46:04.860
If you want to join us for the live recording, just visit the website and click live stream

00:46:04.860 --> 00:46:07.740
to get notified of when our next episode goes live.

00:46:07.740 --> 00:46:12.080
That's usually happening at noon Pacific on Wednesdays over at YouTube.

00:46:12.080 --> 00:46:15.420
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:46:15.420 --> 00:46:19.140
Thank you for listening and sharing this podcast with your friends and colleagues.

