
00:00:00.000 --> 00:00:01.880
Hey there, thanks for listening.


00:00:01.880 --> 00:00:05.120
Before we jump into this episode, I just want to remind you that this episode is brought


00:00:05.120 --> 00:00:10.220
to you by us over at TalkBython Training and Brian through his pytest book.


00:00:10.220 --> 00:00:15.320
So if you want to get hands on and learn something with Python, be sure to consider our courses


00:00:15.320 --> 00:00:17.120
over at TalkBython Training.


00:00:17.120 --> 00:00:20.800
Visit them via pythonbytes.fm/courses.


00:00:20.800 --> 00:00:25.180
And if you're looking to do testing and get better with pytest, check out Brian's book


00:00:25.180 --> 00:00:28.040
at pythonbytes.fm/pytest.


00:00:28.040 --> 00:00:29.040
Enjoy the episode.


00:00:29.040 --> 00:00:31.300
Welcome to Python Bytes, where we deliver Python news


00:00:31.300 --> 00:00:33.080
and headlines directly to your earbuds.


00:00:33.080 --> 00:00:37.560
This is episode 246, recorded August 11th, 2021.


00:00:37.560 --> 00:00:38.680
I'm Michael Kennedy.


00:00:38.680 --> 00:00:39.520
- And I'm Brian Okken.


00:00:39.520 --> 00:00:40.880
- And I'm David Smith.


00:00:40.880 --> 00:00:42.600
- Hey, David Smith, welcome.


00:00:42.600 --> 00:00:43.880
So good to have you here.


00:00:43.880 --> 00:00:44.780
- It's good to be here.


00:00:44.780 --> 00:00:48.360
- Yeah, you've been a suggester of topics, I believe.


00:00:48.360 --> 00:00:50.280
You've sent in some ideas and thoughts for us,


00:00:50.280 --> 00:00:53.440
and well, we're gonna get a good dose of that today,


00:00:53.440 --> 00:00:54.280
for sure.


00:00:54.280 --> 00:00:56.000
- But honestly, if I'd known that you were gonna open


00:00:56.000 --> 00:00:57.760
this up, I probably would have ordered some of those,


00:00:57.760 --> 00:00:59.860
'cause it was a little bit of a scramble to like,


00:00:59.860 --> 00:01:02.340
oh yeah, I already gave them that tip.


00:01:02.340 --> 00:01:03.180
So yeah, had to dig a little bit.


00:01:03.180 --> 00:01:05.440
- Yeah, you've already shared all your favorites.


00:01:05.440 --> 00:01:07.680
Well, your losses are gained


00:01:07.680 --> 00:01:09.480
because you've made it easier for us in the past.


00:01:09.480 --> 00:01:10.760
So thanks for sharing those things.


00:01:10.760 --> 00:01:13.160
And yeah, thanks for being here.


00:01:13.160 --> 00:01:14.320
It's gonna be great to have you.


00:01:14.320 --> 00:01:15.160
- Definitely.


00:01:15.160 --> 00:01:17.760
- Yeah, wanna give the quick elevator pitch on you?


00:01:17.760 --> 00:01:19.960
People, what do people, what do they know about you?


00:01:19.960 --> 00:01:23.000
- Well, I'm a recent tech convert, I'll say.


00:01:23.000 --> 00:01:23.920
Over the last 10 years,


00:01:23.920 --> 00:01:26.040
I've been working in the manufacturing space,


00:01:26.040 --> 00:01:28.400
either in quality engineering or manufacturing engineering.


00:01:28.400 --> 00:01:30.360
And over the last couple years,


00:01:30.360 --> 00:01:33.040
been using Python a lot more heavily.


00:01:33.040 --> 00:01:36.960
Used to do a lot of VBA and Excel, which it was painful.


00:01:36.960 --> 00:01:39.400
And I got a suggestion from one of our equipment suppliers


00:01:39.400 --> 00:01:42.000
to say, "Hey, use Python, it's really, really nice."


00:01:42.000 --> 00:01:43.040
I kind of resisted doing it


00:01:43.040 --> 00:01:44.220
'cause I didn't want to learn something new.


00:01:44.220 --> 00:01:46.760
It seemed intimidating 'cause it's a programming language.


00:01:46.760 --> 00:01:50.720
I'm not a programmer, but I finally caved


00:01:50.720 --> 00:01:52.820
when it came to trying to automate plotting,


00:01:52.820 --> 00:01:54.920
which is pretty painful in Excel.


00:01:54.920 --> 00:01:58.760
And yeah, once I started on it and had something useful


00:01:58.760 --> 00:02:00.400
working in a couple hours, I was hooked.


00:02:00.400 --> 00:02:02.680
And then I started looking for more and more resources,


00:02:02.680 --> 00:02:05.200
found your show and got more and more into it from there.


00:02:05.200 --> 00:02:07.320
Started digging into the web and it's just been a,


00:02:07.320 --> 00:02:09.120
I'd say an upward spiral from there.


00:02:09.120 --> 00:02:12.120
And about, probably about two and a half weeks ago,


00:02:12.120 --> 00:02:15.040
I started in my first, I guess, official tech role


00:02:15.040 --> 00:02:18.280
in a similar kind of domain as a foreign automotive supplier


00:02:18.280 --> 00:02:21.160
doing engineering work. - Fantastic.


00:02:21.160 --> 00:02:24.200
- So it's been really exciting to be able to use Python


00:02:24.200 --> 00:02:26.600
full time is part of my job because,


00:02:26.600 --> 00:02:29.340
you know, the bits of times I got to use Python before,


00:02:29.340 --> 00:02:31.000
that's always the parts I like the most.


00:02:31.000 --> 00:02:33.800
So I'm happy to be doing it, you know, on purpose.


00:02:33.800 --> 00:02:34.640
- Awesome. - Yeah, me too.


00:02:34.640 --> 00:02:35.480
- Congratulations.


00:02:35.480 --> 00:02:37.100
- I wish I could do it full time.


00:02:37.100 --> 00:02:41.720
- I remember my first full time software development job.


00:02:41.720 --> 00:02:43.720
I was like, I can't believe they're paying me to do this.


00:02:43.720 --> 00:02:45.680
I better figure this stuff out before they fire me.


00:02:45.680 --> 00:02:46.720
I can't believe I'm doing this.


00:02:46.720 --> 00:02:47.600
It was so great.


00:02:47.600 --> 00:02:48.440
- Yeah. - So good.


00:02:48.440 --> 00:02:49.280
All right, well, congratulations


00:02:49.280 --> 00:02:50.680
and happy to have you here.


00:02:50.680 --> 00:02:52.440
Brian, I feel like we should document this.


00:02:52.440 --> 00:02:53.600
- Definitely should document it.


00:02:53.600 --> 00:02:55.040
And test our docs too.


00:02:55.040 --> 00:02:57.960
So one of the things I'd like to tie,


00:02:57.960 --> 00:02:59.320
did I just try to edit?


00:02:59.320 --> 00:03:00.700
There we go.


00:03:00.700 --> 00:03:04.680
Something that came up recently was Vincent Warmerdam.


00:03:04.680 --> 00:03:06.160
I think we've had him on the show.


00:03:06.160 --> 00:03:08.560
- Mm-hmm, we have. - A couple episodes ago, yeah.


00:03:08.560 --> 00:03:11.360
- Yeah, so Vincent announced that he's got


00:03:11.360 --> 00:03:15.560
a library called MakeTestDocs,


00:03:15.560 --> 00:03:17.360
and I kind of love this.


00:03:17.360 --> 00:03:21.880
So the idea is it's a bunch of utilities


00:03:21.880 --> 00:03:25.780
that you can use to help test your documentation.


00:03:25.780 --> 00:03:27.720
It doesn't do it right out of the box.


00:03:27.720 --> 00:03:31.080
You have to create your own test files to do this.


00:03:31.080 --> 00:03:36.080
But the idea, like the first example that he shows


00:03:36.080 --> 00:03:41.120
on his readme is that you've got a Markdown file


00:03:41.120 --> 00:03:45.660
and it's got some Python blocks and code blocks in it.


00:03:45.660 --> 00:03:47.800
And you can make a test that goes through,


00:03:47.800 --> 00:03:51.800
reads the Markdown, grabs the Python code and runs it.


00:03:51.800 --> 00:03:53.920
and if there's any problems with it,


00:03:53.920 --> 00:03:57.600
if there's any exceptions, it fails the test.


00:03:57.600 --> 00:03:59.200
This is just brilliant.


00:03:59.200 --> 00:04:03.000
There's examples in here for doing it with docstrings


00:04:03.000 --> 00:04:04.920
and even class docstrings.


00:04:04.920 --> 00:04:08.560
And then Vincent even did, he does the com code


00:04:08.560 --> 00:04:13.360
and he did a little com code video on how to use this.


00:04:13.360 --> 00:04:14.560
- Yeah, and you're putting that in the show notes


00:04:14.560 --> 00:04:16.200
for people, right, to check out?


00:04:16.200 --> 00:04:20.260
- Yep, there's a link to the tutorial with the video.


00:04:20.260 --> 00:04:25.060
The suggestion, or the use case that he was talking about at first was


00:04:25.060 --> 00:04:28.260
that maybe you're using make docs for documentation,


00:04:28.260 --> 00:04:29.860
therefore you've got a bunch of markdown.


00:04:29.860 --> 00:04:33.760
But my use case is going to be blogs.


00:04:33.760 --> 00:04:34.760
So I write--


00:04:34.760 --> 00:04:36.760
- Yeah, I think that's a huge use case, actually.


00:04:36.760 --> 00:04:40.760
- Yeah, I've got Python code in my blog source code.


00:04:40.760 --> 00:04:42.060
It's markdown files.


00:04:42.060 --> 00:04:45.460
I totally want-- that's one of my to-do list is to try this


00:04:45.460 --> 00:04:48.260
to make sure that the blog content is accurate.


00:04:48.260 --> 00:04:49.760
- That is super cool.


00:04:49.760 --> 00:04:53.300
You know, one more thing that you might find interesting,


00:04:53.300 --> 00:04:57.540
I think this is a more true software engineering


00:04:57.540 --> 00:05:00.800
type of solution, but another sort of whizzy wig


00:05:00.800 --> 00:05:03.560
as you work style of solution is PyCharm.


00:05:03.560 --> 00:05:06.360
If you have a Markdown file and you have Python code


00:05:06.360 --> 00:05:09.240
in there, will highlight the errors and actually show you


00:05:09.240 --> 00:05:11.240
if like symbols are missing and stuff.


00:05:11.240 --> 00:05:15.200
So if you had the Markdown associated with the sample code


00:05:15.200 --> 00:05:17.280
and then you like do stuff with your little examples,


00:05:17.280 --> 00:05:20.640
it may actually show you the errors live as well.


00:05:20.640 --> 00:05:21.480
- Oh, that's cool.


00:05:21.480 --> 00:05:23.800
- Yeah, I mean, that's not like a CI sort of keep it fixed,


00:05:23.800 --> 00:05:25.760
but that's a as you type kind of thing.


00:05:25.760 --> 00:05:27.960
- Yeah, and the other comment that he had is,


00:05:27.960 --> 00:05:31.560
I normally don't put like asserting things


00:05:31.560 --> 00:05:34.120
are valid in documentation,


00:05:34.120 --> 00:05:37.560
but the comment in the readme is that


00:05:37.560 --> 00:05:39.880
if you put asserts in there, it'll get checked also.


00:05:39.880 --> 00:05:43.160
So you've got like unit tests built into your documentation.


00:05:43.160 --> 00:05:45.240
- Super cool. David, what do you think?


00:05:45.240 --> 00:05:46.080
- It's interesting.


00:05:46.080 --> 00:05:50.720
just trying to figure out, are you doing a parameterized test


00:05:50.720 --> 00:05:54.220
and looking at your inputs versus outputs for the code that's in the documentation?


00:05:54.220 --> 00:05:57.180
Or how do you actually know it's testing correctly?


00:05:57.180 --> 00:05:59.420
Is it a valid Python?


00:05:59.420 --> 00:06:04.420
The little code snippet we've got in that we're showing on the screen in the chat,


00:06:04.420 --> 00:06:09.480
but also there's a link in the show notes to the readme,


00:06:09.480 --> 00:06:15.020
the parameterize is that it uses, like in this example,


00:06:15.080 --> 00:06:17.680
I'm saying, go look in my docs folder,


00:06:17.680 --> 00:06:21.340
and for everything that it finds in there that's a markdown file,


00:06:21.340 --> 00:06:27.080
that'll show up as a parameterization of the test.


00:06:27.080 --> 00:06:31.400
If I've got this test will run once per file.


00:06:31.400 --> 00:06:34.400
I've got three markdown files in there,


00:06:34.400 --> 00:06:36.340
the test will run three times.


00:06:36.340 --> 00:06:40.200
>> This is the most comprehensive and yet extremely short test I've seen.


00:06:40.200 --> 00:06:42.640
Really long times, three lines,


00:06:42.640 --> 00:06:45.720
and it will basically work, traverse a tree


00:06:45.720 --> 00:06:48.480
of Markdown file hierarchy type thing.


00:06:48.480 --> 00:06:50.960
- Oh, I do tons of really tiny tests.


00:06:50.960 --> 00:06:51.920
So yeah.


00:06:51.920 --> 00:06:53.640
- Yeah, nice, nice, nice.


00:06:53.640 --> 00:06:55.720
All right, Avaro, welcome to the live stream.


00:06:55.720 --> 00:06:56.920
Happy to have you here.


00:06:56.920 --> 00:06:58.140
Let's see, let's move on to the next one.


00:06:58.140 --> 00:07:01.920
I think speaking of users giving us,


00:07:01.920 --> 00:07:04.960
our listeners giving us ideas and helping us out here,


00:07:04.960 --> 00:07:07.700
I wanna talk about something that I've been hanging on to


00:07:07.700 --> 00:07:09.760
for a little while, since March,


00:07:09.760 --> 00:07:12.920
but I finally decided it's time to talk about it.


00:07:12.920 --> 00:07:17.320
And that is creating queues out of process,


00:07:17.320 --> 00:07:19.580
sort of asynchronous queue processing.


00:07:19.580 --> 00:07:23.720
So if I've got say a web app or an API,


00:07:23.720 --> 00:07:26.120
or even if I'm testing a bunch of the hardware


00:07:26.120 --> 00:07:28.160
and I wanna kick off a bunch of jobs,


00:07:28.160 --> 00:07:31.840
eventually I don't wanna necessarily block on all of them.


00:07:31.840 --> 00:07:33.240
I might wanna push them down


00:07:33.240 --> 00:07:35.200
so other things can work on them.


00:07:35.200 --> 00:07:37.040
You know, if I'm gonna send a bunch of emails,


00:07:37.040 --> 00:07:39.160
if you've ever tried to send a thousand emails


00:07:39.160 --> 00:07:40.640
in order synchronously.


00:07:40.640 --> 00:07:42.880
It turns out that times out your web request.


00:07:42.880 --> 00:07:43.720
Don't do that.


00:07:43.720 --> 00:07:45.680
So a better idea would be to like push them to a queue


00:07:45.680 --> 00:07:47.200
and have some sort of background process go,


00:07:47.200 --> 00:07:48.240
oh, there's new emails to send.


00:07:48.240 --> 00:07:50.040
Let me jam those on down the line.


00:07:50.040 --> 00:07:54.760
So Scott Hacker sent over this pointer to this library,


00:07:54.760 --> 00:07:57.560
that small but cool little one called,


00:07:57.560 --> 00:07:59.840
well, they just called it QR3.


00:07:59.840 --> 00:08:02.600
And QR3 is a Q for Redis.


00:08:02.600 --> 00:08:04.040
And the three means Python three


00:08:04.040 --> 00:08:06.200
'cause there used to be a QR that wasn't three,


00:08:06.200 --> 00:08:07.720
that's not Python three compatible.


00:08:07.720 --> 00:08:11.800
So here's like a re-imagining of that for Python 3


00:08:11.800 --> 00:08:14.760
or just a compatibility that got moved over.


00:08:14.760 --> 00:08:16.280
So it's pretty cool.


00:08:16.280 --> 00:08:18.920
We check it out, the API and implementation


00:08:18.920 --> 00:08:22.580
or the usage is quite simple as you could imagine.


00:08:22.580 --> 00:08:24.680
So all you gotta do is you gotta,


00:08:24.680 --> 00:08:26.520
it's built upon Redis Pi.


00:08:26.520 --> 00:08:27.760
You've gotta have Redis installed.


00:08:27.760 --> 00:08:29.160
That could be, you know, wherever.


00:08:29.160 --> 00:08:32.280
Even be Redis as a service on some of these cloud platforms


00:08:32.280 --> 00:08:33.640
or in Docker, run it locally.


00:08:33.640 --> 00:08:36.420
You have Redis Pi and then you just go over


00:08:36.420 --> 00:08:38.060
and you create a queue.


00:08:38.060 --> 00:08:40.360
So you just say queue and you give it a name


00:08:40.360 --> 00:08:42.120
and then some server connect info


00:08:42.120 --> 00:08:45.000
like location, authentication and whatnot.


00:08:45.000 --> 00:08:47.600
And then all you've got to do is you push items to it.


00:08:47.600 --> 00:08:49.520
They could be just really simple things


00:08:49.520 --> 00:08:51.920
like a bunch of email addresses you're gonna send,


00:08:51.920 --> 00:08:53.960
but it could also be really complicated.


00:08:53.960 --> 00:08:56.360
Like for example, it could be say,


00:08:56.360 --> 00:08:58.720
pedantic models that store all the data


00:08:58.720 --> 00:09:00.760
that you need to process that request.


00:09:00.760 --> 00:09:01.720
So that's pretty cool.


00:09:01.720 --> 00:09:05.560
It has the default way of getting data over to it


00:09:05.560 --> 00:09:12.520
through CPickle and CPickle is better than Pickle but still has issues and other restrictions.


00:09:12.520 --> 00:09:17.560
Some of the restrictions are you can't put certain types of objects like it wouldn't make sense to


00:09:17.560 --> 00:09:22.440
serialize a database connection that has an open socket or a thread or some weird thing like that


00:09:22.440 --> 00:09:27.320
right but most of the sort of message here's the data you need to process the UITS and over all


00:09:27.320 --> 00:09:34.600
that stuff at work and you can also create your own serial serializer on a per-queue basis which


00:09:34.600 --> 00:09:35.440
which is kind of cool.


00:09:35.440 --> 00:09:38.280
So if you said, I want to only work with identic models,


00:09:38.280 --> 00:09:41.240
you could put the sort of from dictionary to dictionary


00:09:41.240 --> 00:09:43.400
transformation with the validation


00:09:43.400 --> 00:09:44.620
and all that kind of stuff.


00:09:44.620 --> 00:09:46.840
I personally would not use CPQL


00:09:46.840 --> 00:09:49.040
because one of the things you can run into


00:09:49.040 --> 00:09:51.900
is if you upgrade your version of Python on one server,


00:09:51.900 --> 00:09:52.740
but not the other,


00:09:52.740 --> 00:09:55.440
'cause you're in the process of going from one to the other.


00:09:55.440 --> 00:09:57.960
And some thing has a different structure and memory


00:09:57.960 --> 00:09:59.240
and gets put over there.


00:09:59.240 --> 00:10:00.360
The other ones can't read it.


00:10:00.360 --> 00:10:03.920
Like there's always these challenges of pure binary matches.


00:10:03.920 --> 00:10:08.120
I don't know, I would do that probably serialize as JSON or something and serialize it back.


00:10:08.120 --> 00:10:10.120
But anyway, it's pretty cool. What do you guys think?


00:10:10.120 --> 00:10:13.920
This looks nice. I actually haven't used queues in Python before,


00:10:13.920 --> 00:10:15.920
but it's on my to-do list.


00:10:15.920 --> 00:10:18.480
Because I mean, designing complex systems,


00:10:18.480 --> 00:10:23.600
breaking it up into different processes with queues back and forth is a cool way to do it.


00:10:23.600 --> 00:10:25.600
Yeah, I'm kind of inspired by this.


00:10:25.600 --> 00:10:28.240
I kind of want to do more stuff with queues as well. David?


00:10:28.240 --> 00:10:30.680
Oh, it seems like a really clean, simple way to use queues.


00:10:30.680 --> 00:10:34.280
I'm with Brian, I haven't really used it in a Python context before,


00:10:34.280 --> 00:10:36.600
but like the examples you gave are perfect.


00:10:36.600 --> 00:10:38.720
You know, emails are, they take a long time,


00:10:38.720 --> 00:10:41.280
so you don't want to be binding up your main application,


00:10:41.280 --> 00:10:43.000
you need to dump those off into a background task.


00:10:43.000 --> 00:10:45.400
And this looks really, really simple to use.


00:10:45.400 --> 00:10:49.360
So, you know, I seem like it'd be worth a try for sure.


00:10:49.360 --> 00:10:50.120
Yeah, for sure.


00:10:50.120 --> 00:10:53.560
Other things are like you need to generate a report that takes 30 seconds,


00:10:53.560 --> 00:10:56.600
you know, kick off the generation and then see if it's in the database


00:10:56.600 --> 00:11:00.640
and just do some sort of like Ajax pull until it's there or whatever.


00:11:00.640 --> 00:11:02.180
It has some more features.


00:11:02.180 --> 00:11:05.940
So it has a queue, which is first in first out, as you can imagine.


00:11:05.940 --> 00:11:08.740
It has a capped, I call it a capped collection.


00:11:08.740 --> 00:11:10.700
I feel like it should be capped queue


00:11:10.700 --> 00:11:13.700
because it's implemented behind the scenes as a capped collection.


00:11:13.700 --> 00:11:16.580
They also say a bounded queue is another AKA.


00:11:16.580 --> 00:11:19.740
So the idea is if you're doing like analytics and logging


00:11:19.740 --> 00:11:22.840
and you're trying to eventually process that and save it to the database,


00:11:22.840 --> 00:11:24.140
but you want to say, you know what,


00:11:24.140 --> 00:11:26.580
we really don't want this queue to get more than


00:11:26.580 --> 00:11:28.420
a hundred thousand items at a time


00:11:28.420 --> 00:11:29.920
'cause we should be writing this to the database


00:11:29.920 --> 00:11:31.100
and if something goes wrong,


00:11:31.100 --> 00:11:33.020
it can completely wreck the server.


00:11:33.020 --> 00:11:34.640
So you increase these capped queues where you're like,


00:11:34.640 --> 00:11:35.940
I'm gonna start throwing away old stuff


00:11:35.940 --> 00:11:37.300
if we don't get to it in time.


00:11:37.300 --> 00:11:39.940
Here's a DQ, which to me sounds like


00:11:39.940 --> 00:11:41.560
getting stuff out of a queue, but oh no,


00:11:41.560 --> 00:11:42.860
it's a double-ended queue.


00:11:42.860 --> 00:11:45.980
A double-ended queue, it should be a, yeah.


00:11:45.980 --> 00:11:49.260
Anyway, it should be, the idea is you can basically


00:11:49.260 --> 00:11:51.020
put stuff onto the front or the back


00:11:51.020 --> 00:11:53.100
and you can pop stuff off the front and the back.


00:11:53.100 --> 00:11:56.780
So you could, for example, put low priority items


00:11:56.780 --> 00:11:59.180
on the back or something's really important,


00:11:59.180 --> 00:12:00.660
you could kick it up to the front


00:12:00.660 --> 00:12:01.700
or right to the front of the queue.


00:12:01.700 --> 00:12:04.340
And then finally, you also do a stack.


00:12:04.340 --> 00:12:06.020
You can also do a priority queue,


00:12:06.020 --> 00:12:08.620
which is like sort of pretty close to what I described,


00:12:08.620 --> 00:12:10.860
but you can't jump ahead of the things


00:12:10.860 --> 00:12:12.660
that have a similar priority, right?


00:12:12.660 --> 00:12:15.780
Like if there's super urgent and then low,


00:12:15.780 --> 00:12:17.940
you can put like a super urgent new thing


00:12:17.940 --> 00:12:19.420
at the front of the super urgent ones,


00:12:19.420 --> 00:12:21.940
but it would appear before all the others, things like that.


00:12:21.940 --> 00:12:23.660
So this is all pretty neat.


00:12:23.660 --> 00:12:25.580
What I really like about this is obviously Python


00:12:25.580 --> 00:12:27.360
has queues built in, right?


00:12:27.360 --> 00:12:28.860
Like that's just a data type.


00:12:28.860 --> 00:12:30.580
List itself could basically be a queue.


00:12:30.580 --> 00:12:33.740
You can pop stuff off the front and shazam, you have a queue.


00:12:33.740 --> 00:12:35.240
But this is out of process, right?


00:12:35.240 --> 00:12:38.620
This means if you have to scale out for your worker processes


00:12:38.620 --> 00:12:42.700
in any sort of API, or you want it to be able to be durable


00:12:42.700 --> 00:12:44.860
across app restarts, things like that.


00:12:44.860 --> 00:12:47.120
And if you think, oh, I'm not gonna scale out across,


00:12:47.120 --> 00:12:48.300
I'm not having multiple servers.


00:12:48.300 --> 00:12:50.540
Like almost every Python web app and web API


00:12:50.540 --> 00:12:52.960
runs with multiple worker processes at a minimum.


00:12:52.960 --> 00:12:54.340
So yeah, you're scaling up.


00:12:54.340 --> 00:12:55.740
Anyway, I think this is pretty useful.


00:12:55.740 --> 00:12:57.980
And if you're all about Redis, this is cool.


00:12:57.980 --> 00:12:58.820
Redis seems nice.


00:12:58.820 --> 00:13:00.240
I'm kind of inspired to do something like this


00:13:00.240 --> 00:13:01.940
with MongoDB, but I'm also busy.


00:13:01.940 --> 00:13:03.960
So probably not right away.


00:13:03.960 --> 00:13:05.540
And John Sheehan out there in the live stream


00:13:05.540 --> 00:13:08.060
is telling me that learned a few years ago


00:13:08.060 --> 00:13:10.060
that DQ is pronounced deck.


00:13:10.060 --> 00:13:12.000
So yeah, double, yeah.


00:13:12.000 --> 00:13:14.060
All right, so deck, thanks.


00:13:14.060 --> 00:13:15.660
And then Teddy out in live stream says,


00:13:15.660 --> 00:13:17.580
I'm not too familiar with queues,


00:13:17.580 --> 00:13:21.700
but how would it work if you were a queue process


00:13:21.700 --> 00:13:23.060
that execute Python code,


00:13:23.060 --> 00:13:25.540
it would end up being a process sequentially


00:13:25.540 --> 00:13:27.420
because of the Python gill?


00:13:27.420 --> 00:13:31.300
So are you ending up with like a serial process


00:13:31.300 --> 00:13:33.660
because of this, a serial processing?


00:13:33.660 --> 00:13:36.260
I think it depends on just how you create the workers, right?


00:13:36.260 --> 00:13:38.020
So there's two ends that you build.


00:13:38.020 --> 00:13:39.780
One end is the put stuff in the queue,


00:13:39.780 --> 00:13:42.140
then you literally build the end that goes to the queue


00:13:42.140 --> 00:13:43.940
and says, give me the next item.


00:13:43.940 --> 00:13:45.620
And that's stored in Redis,


00:13:45.620 --> 00:13:47.540
which obviously can support multiple clients.


00:13:47.540 --> 00:13:52.140
So if you just scaled out the consumers of the queue messages,


00:13:52.140 --> 00:13:56.020
the things running the jobs, then you would escape the gill, right?


00:13:56.020 --> 00:13:57.380
Because you would have multiple processes.


00:13:57.380 --> 00:14:00.780
You can do, you can do multiple things, feeding the queue as well.


00:14:00.780 --> 00:14:01.460
Yes.


00:14:01.460 --> 00:14:01.860
Yeah.


00:14:01.860 --> 00:14:03.460
Multiple web requests or something.


00:14:03.460 --> 00:14:04.300
Yeah, absolutely.


00:14:04.300 --> 00:14:05.100
Absolutely.


00:14:05.100 --> 00:14:07.620
All right, David, what you got for us?


00:14:07.620 --> 00:14:08.860
All right.


00:14:08.860 --> 00:14:12.340
Well, are you, either of you have the pandas users?


00:14:12.340 --> 00:14:17.140
I'm a pandas admirer and I use it a little bit, but I always feel like when I


00:14:17.140 --> 00:14:19.020
I come to pandas, I know there's way more


00:14:19.020 --> 00:14:19.900
I should be doing with this.


00:14:19.900 --> 00:14:23.500
And this is so cool, but not as much as I should be.


00:14:23.500 --> 00:14:26.560
- And I use pandas pretty heavily in my previous job


00:14:26.560 --> 00:14:27.900
to do a lot of analysis,


00:14:27.900 --> 00:14:30.580
especially on the one dimensional data sets.


00:14:30.580 --> 00:14:33.220
And it always happened.


00:14:33.220 --> 00:14:34.740
When I first started using pandas,


00:14:34.740 --> 00:14:36.380
I was doing a lot of really bad things


00:14:36.380 --> 00:14:37.220
like it arose and that type of thing.


00:14:37.220 --> 00:14:39.020
And the more you kind of learn about it,


00:14:39.020 --> 00:14:41.820
the better you get at doing set of type operations.


00:14:41.820 --> 00:14:44.940
But even in the last couple of months,


00:14:44.940 --> 00:14:46.180
you'd think I'd have everything down,


00:14:46.180 --> 00:14:47.900
But the API is huge.


00:14:47.900 --> 00:14:50.540
And I always had these ah moments because


00:14:50.540 --> 00:14:52.380
I learned about something like transform.


00:14:52.380 --> 00:14:55.020
And, you know, once I realized what you could do with transform,


00:14:55.020 --> 00:14:57.020
it simplified so many things that I was doing.


00:14:57.020 --> 00:15:00.500
And the first item I have is an article that says


00:15:00.500 --> 00:15:02.780
25 Panda functions you didn't know existed.


00:15:02.780 --> 00:15:05.020
I don't normally like these articles


00:15:05.020 --> 00:15:06.580
because they almost feel a little bit clickbaity.


00:15:06.580 --> 00:15:09.620
But this one actually had a handful of moments for me.


00:15:09.620 --> 00:15:11.300
So I thought I would go ahead and share it.


00:15:11.300 --> 00:15:13.700
So I have them listed in the show notes,


00:15:13.700 --> 00:15:14.980
kind of the moments for me.


00:15:14.980 --> 00:15:22.300
But between is a really nice, I think it would be considered a method on the data frame or a series,


00:15:22.300 --> 00:15:29.340
and basically allows you to simplify logic instead of trying to say greater than or equal to blank and less than or equal to blank,


00:15:29.340 --> 00:15:35.060
you can just say between values very similar to the operation that you would do in a SQL transaction.


00:15:35.060 --> 00:15:42.980
Styler, I had no idea existed, you can actually apply styles to the tables coming out of pandas.


00:15:42.980 --> 00:15:47.140
I do a lot to try to make my notebooks really, really pretty


00:15:47.140 --> 00:15:51.060
so that I can convert them to HTML or another format and share them


00:15:51.060 --> 00:15:54.740
with the business. The business isn't typically like notebooks, but I'm trying


00:15:54.740 --> 00:15:58.340
because I can't stand the intermediate step of copying to a PowerPoint. But


00:15:58.340 --> 00:16:02.100
this would definitely help. You can do gradients, you can


00:16:02.100 --> 00:16:05.060
may have a bunch of different functions behind that.


00:16:05.060 --> 00:16:07.940
Options is another one I've kind of


00:16:07.940 --> 00:16:09.700
played with a little bit.


00:16:09.700 --> 00:16:12.780
But there's one in here that I wanted to try before the show I hadn't had a chance,


00:16:12.780 --> 00:16:15.060
you can change the graphing back end on pandas,


00:16:15.060 --> 00:16:16.540
from app plotlib to something else.


00:16:16.540 --> 00:16:19.300
So at some point, I'm going to try changing it to plot because that's my


00:16:19.300 --> 00:16:22.140
preferred plotting library for most things.


00:16:22.140 --> 00:16:27.260
ConvertDtypes is really nice if you know you have a categorical type set of information,


00:16:27.260 --> 00:16:30.500
you can dramatically reduce how much memory is taken.


00:16:30.500 --> 00:16:36.100
Mask was a nice one, it basically allows you to quickly convert


00:16:36.100 --> 00:16:37.380
somewhere down here,


00:16:37.380 --> 00:16:43.460
quickly convert certain particular values or values that meet a criteria to another value.


00:16:43.460 --> 00:16:49.460
I was doing this oftentimes in multiple stages, this would clean up that code significantly.


00:16:49.460 --> 00:16:54.500
Any smallest and any largest also could have been very helpful. Essentially,


00:16:54.500 --> 00:16:58.340
it's similar to like a max or a min, but instead of just pulling a single,


00:16:58.340 --> 00:17:04.100
you can pull, in this case, five. And clip at time.


00:17:04.100 --> 00:17:11.380
So like, if I want to see the five largest revenue producing customers in my data frame, I could just quick do that. Yeah.


00:17:11.380 --> 00:17:17.940
Yep. And there are ways you can, like with anything else, pandas, you could use a couple other methods to get that done too. But


00:17:17.940 --> 00:17:27.460
it's just so much cleaner to do diamonds in largest five and then price is just very clean and fast instead of having multiple lines to do a transformation and then a transformation and then


00:17:27.460 --> 00:17:35.540
another chain. So I wanted to suggest this article, like I said, I've been doing pandas for a couple years, and I still have these moments.


00:17:35.540 --> 00:17:42.300
And this article, well, some of them are maybe quite odd moments for me, they may be odd moments for someone else, because everybody


00:17:42.300 --> 00:17:46.980
probably knows 20%, and maybe a slightly different 20% of the pandas API.


00:17:46.980 --> 00:17:51.740
Yeah, this is really neat. I love these types of things that I mean, it's super easy to just scan through


00:17:51.740 --> 00:17:54.220
and decide whether or not it's really helpful to you.


00:17:54.220 --> 00:17:58.020
The one for me, the pandas one that had the biggest like, oh my goodness,


00:17:58.020 --> 00:18:00.620
was web scraping


00:18:00.620 --> 00:18:04.820
and like pulling HTML tables and turning those into data frames.


00:18:04.820 --> 00:18:06.820
So like, obviously I can go,


00:18:06.820 --> 00:18:09.320
yeah, you go with like requests and beautiful soup and


00:18:09.320 --> 00:18:13.620
do something but then you still end up with just a table of HTML but with


00:18:13.620 --> 00:18:16.220
pandas you can say, read HTML


00:18:16.220 --> 00:18:17.920
and then just give me table three


00:18:17.920 --> 00:18:20.020
as a data frame. Like it's ridiculous, right?


00:18:20.020 --> 00:18:23.020
Now pandas has some really nice


00:18:23.020 --> 00:18:26.180
I/O tools to around CSVs, Parquet, most,


00:18:26.180 --> 00:18:30.820
the most common data, data format types, and even some of the lesser common ones.


00:18:30.820 --> 00:18:33.540
It's a really nice library overall. But yeah,


00:18:33.540 --> 00:18:37.020
like I said, there's always some aww moments and it's nice to have an


00:18:37.020 --> 00:18:39.380
article that highlights several moments for me.


00:18:39.380 --> 00:18:40.580
Yeah, super cool.


00:18:40.580 --> 00:18:42.580
So, go ahead, Brian.


00:18:42.580 --> 00:18:45.980
The one that jumps right out at me was the number


00:18:45.980 --> 00:18:47.580
one one, I didn't know that,


00:18:47.580 --> 00:18:49.580
that you could just write Excel


00:18:49.580 --> 00:18:51.580
with pandas. That's pretty cool.


00:18:51.580 --> 00:18:55.100
And I think there's another wrapper around write Excel that


00:18:55.100 --> 00:18:57.660
kind of simplifies converting a data frame to


00:18:57.660 --> 00:19:00.620
Excel, but I think write Excel lets you do some more


00:19:00.620 --> 00:19:02.860
more intricate things with Excel.


00:19:02.860 --> 00:19:03.980
Yeah, that's pretty cool.


00:19:03.980 --> 00:19:07.500
Yeah, that's super cool. Alright, before we move on really quick from the live stream,


00:19:07.500 --> 00:19:09.340
I liked


00:19:09.340 --> 00:19:12.300
when you asked if anyone uses pandas and likes it,


00:19:12.300 --> 00:19:14.380
Dean Langston just said, yes,


00:19:14.380 --> 00:19:16.780
all caps, beautiful, but then also suggested,


00:19:16.780 --> 00:19:19.020
pointed out this project that he built that is a


00:19:19.020 --> 00:19:23.740
like a give you live tips while you work with pandas and notebooks type thing called Dove Panda.


00:19:23.740 --> 00:19:28.460
So I literally I'm just checking this out now. But as you work with it, you can see here like it


00:19:28.460 --> 00:19:32.380
gives you like little tips like, oh, by the way, do you know you can concatenate like this? If you


00:19:32.380 --> 00:19:37.500
specified access one, you get, you know, such and such and gives you a little little tips and tricks


00:19:37.500 --> 00:19:44.620
as you work with it. So people can check it out. Yeah. Yeah. Moments. Exactly. Exactly. Thanks,


00:19:44.620 --> 00:19:48.380
- 16, Brian, I do love some FastAPI and I love Rich


00:19:48.380 --> 00:19:50.180
and I'm looking forward to what you're gonna do


00:19:50.180 --> 00:19:51.940
by trying to put these together.


00:19:51.940 --> 00:19:54.460
- Yeah, well, I've been watching,


00:19:54.460 --> 00:19:58.660
we've been watching Rich, of course, and FastAPI a lot.


00:19:58.660 --> 00:20:03.660
And so this article's by Hayden Kodelman, I think,


00:20:03.660 --> 00:20:08.020
and it's FastAPI and Rich Tracebacks in Development.


00:20:08.020 --> 00:20:10.980
So the idea is that one of the things,


00:20:10.980 --> 00:20:13.620
the cool things that Rich has is like these awesome


00:20:13.620 --> 00:20:16.140
tracebacks and logging, they're just beautiful.


00:20:16.140 --> 00:20:18.980
And I mean, if you can say a traceback is beautiful,


00:20:18.980 --> 00:20:20.760
it's because of rich probably.


00:20:20.760 --> 00:20:24.180
They look pretty great and the logging is pretty good.


00:20:24.180 --> 00:20:27.040
So the, I'm just gonna scroll down


00:20:27.040 --> 00:20:28.900
to some of these examples at the bottom.


00:20:28.900 --> 00:20:31.280
So the, oh, it's kind of tiny,


00:20:31.280 --> 00:20:33.800
but the logging is nice and colorized and stuff.


00:20:33.800 --> 00:20:35.420
And then the exceptions,


00:20:35.420 --> 00:20:37.720
one of the things with the tracebacks and exceptions


00:20:37.720 --> 00:20:39.540
is there's a highlighted line number.


00:20:39.540 --> 00:20:41.460
It highlights the actual file name


00:20:41.460 --> 00:20:46.140
and puts in lower, more muted colors,


00:20:46.140 --> 00:20:49.020
the stuff you don't really need to care about right away.


00:20:49.020 --> 00:20:51.260
It's just a nice way to do it.


00:20:51.260 --> 00:20:56.340
>> It gives you syntax highlighting in your keyword highlighting in your code.


00:20:56.340 --> 00:20:57.180
>> Yeah.


00:20:57.180 --> 00:21:01.380
>> That is the stack trace of a crash in the traceback.


00:21:01.380 --> 00:21:09.340
>> We've seen some examples of how to use the rich tracebacks from other programs,


00:21:09.340 --> 00:21:12.420
but I haven't seen it actually written up by somebody else.


00:21:12.420 --> 00:21:16.080
This is nice. Using FastAPI,


00:21:16.080 --> 00:21:20.880
FastAPI is awesome for building web APIs.


00:21:20.880 --> 00:21:25.060
But how do you do this? How do you get your application to do this?


00:21:25.060 --> 00:21:27.300
I'm not going to scroll through all of this,


00:21:27.300 --> 00:21:29.660
but the gist of it is,


00:21:29.660 --> 00:21:31.860
there's really only a few steps.


00:21:31.860 --> 00:21:35.820
This post walks through all of it with all the code.


00:21:35.820 --> 00:21:38.820
For the most part, you create a database,


00:21:38.820 --> 00:21:41.580
our data class with the logger configuration.


00:21:41.580 --> 00:21:44.500
Then you need a function that will either install


00:21:44.500 --> 00:21:47.700
rich as a handler or the production log configuration.


00:21:47.700 --> 00:21:50.580
I like that he puts this switch in place.


00:21:50.580 --> 00:21:53.820
The idea around this is when you're debugging,


00:21:53.820 --> 00:21:57.340
you're going to use these nice tracebacks.


00:21:57.340 --> 00:21:59.420
But when it's in production,


00:21:59.420 --> 00:22:03.940
it's not going to use that. It's just going to do the default logging.


00:22:03.940 --> 00:22:08.100
Then you have to call logging basic config with the new settings,


00:22:08.100 --> 00:22:13.400
And then a little note that if you're using UVA Corn, you probably want to override the logger for that.


00:22:13.400 --> 00:22:17.540
And that's it. It really sets it up and it's got all the code in place so that your


00:22:17.540 --> 00:22:22.980
FastAPI application can have these lovely logs and tracebacks during development.


00:22:22.980 --> 00:22:24.180
Yeah, that's super neat.


00:22:24.180 --> 00:22:26.680
David, are you a fan of either of these frameworks?


00:22:26.680 --> 00:22:31.840
I haven't had a chance to use Rich too much. I have been watching textual pretty closely on Twitter because it's just


00:22:31.840 --> 00:22:34.680
phenomenal what he's been able to do.


00:22:34.680 --> 00:22:39.160
How do you have a docking scrolling side thing in a terminal window? What's going on here?


00:22:39.160 --> 00:22:50.120
I do. I love FastAPI. I built my wife's website using flask. And I liked how FastAPI was similar to flask in a lot of ways. But, you know, some of the syntax is


00:22:50.120 --> 00:22:56.280
was a little bit cleaner, although with the newer version of flask, it kind of borrows some of the same syntax. And it's just got a lot of


00:22:56.280 --> 00:23:02.360
really good nested built in the API documentation was really, I think that's kind of clutch when


00:23:02.360 --> 00:23:06.520
you're learning a new framework to because you're not having to do like curl commands or anything


00:23:06.520 --> 00:23:10.200
like that you can just bring up a web page and poke at it, you know, visually, which is which


00:23:10.200 --> 00:23:15.320
is pretty nice. So no, I really like fast. I just, you know, other than, you know, kind of building


00:23:15.320 --> 00:23:19.160
some small toy things haven't had a really compelling reason to use it yet. So yeah,


00:23:19.160 --> 00:23:21.960
yeah, very cool. Toys are compelling new reasons, I think.


00:23:23.080 --> 00:23:27.840
>> Definitely. Maybe some Arduino thing could run a FastAPI server, who knows?


00:23:27.840 --> 00:23:30.640
So let me talk about some good news.


00:23:30.640 --> 00:23:35.240
Good news. We've had a couple of things we've covered about


00:23:35.240 --> 00:23:39.720
some visionary sponsors coming on to support Python and the PSF,


00:23:39.720 --> 00:23:41.440
so on, which is fantastic.


00:23:41.440 --> 00:23:45.200
I've certainly whinged a lot about people running


00:23:45.200 --> 00:23:48.640
multi-billion dollar revenue companies and doing


00:23:48.640 --> 00:23:51.700
nothing really to give back than maybe a PR or something.


00:23:51.700 --> 00:23:53.620
But we've got Microsoft, we've got Bloomberg,


00:23:53.620 --> 00:23:56.160
we've got Google as visionary sponsors, right?


00:23:56.160 --> 00:23:59.300
And one of the things that that made possible


00:23:59.300 --> 00:24:02.600
is the CPython developer in residence.


00:24:02.600 --> 00:24:04.340
I don't know if it's directly related to one of those


00:24:04.340 --> 00:24:05.600
or if it's just sort of like that,


00:24:05.600 --> 00:24:06.640
sort of brought it all together.


00:24:06.640 --> 00:24:09.440
But recently the PSF said they're gonna have


00:24:09.440 --> 00:24:12.140
a developer in residence position.


00:24:12.140 --> 00:24:14.940
And well-known community member,


00:24:14.940 --> 00:24:16.680
friend of the show, Lucas Lenga,


00:24:16.680 --> 00:24:19.120
has applied and got hired.


00:24:19.120 --> 00:24:21.380
He's now the developer in residence.


00:24:21.380 --> 00:24:23.880
This is a little bit old news for it's from last month,


00:24:23.880 --> 00:24:26.760
but I wanted to make sure we gave it a quick shout out


00:24:26.760 --> 00:24:30.020
because I think it's going to be pretty interesting to know that there is a


00:24:30.020 --> 00:24:34.260
developer side person inside the PSF making sure things are going.


00:24:34.260 --> 00:24:37.560
So the PSF has seven, eight, nine, I don't know, something like this.


00:24:37.560 --> 00:24:41.980
I haven't got recent updates, including this, but include this position.


00:24:41.980 --> 00:24:43.520
Full time employees. Right.


00:24:43.520 --> 00:24:45.180
So there's a bunch of people who work there.


00:24:45.180 --> 00:24:49.260
But to my knowledge, this is the first like developer person


00:24:49.260 --> 00:24:52.420
rather than marketing, legal, whatever, right?


00:24:52.420 --> 00:24:55.700
All that sort of business director, administrative side.


00:24:55.700 --> 00:24:56.700
So this is pretty interesting.


00:24:56.700 --> 00:24:58.300
Apologies to everybody that works at the PSF.


00:24:58.300 --> 00:25:00.220
That's like, don't forget me.


00:25:00.220 --> 00:25:01.540
Yeah, no, no, no.


00:25:01.540 --> 00:25:05.740
Those are super important, but it's, it's interesting that there's not been a


00:25:05.740 --> 00:25:10.340
Python developer type of role within that group is all I'm saying.


00:25:10.340 --> 00:25:12.860
Um, so they put that out.


00:25:12.860 --> 00:25:14.340
LucasLinga is now part of it.


00:25:14.340 --> 00:25:16.340
And there's some interesting takeaways here.


00:25:16.500 --> 00:25:26.100
So basically, let me do the, just give a bit of a quote here for how Lucas decided to sort of position this and how he sees it.


00:25:26.100 --> 00:25:31.500
He said, I don't really want this to be like, hey, I'm the, you know, the appointed CEO of Python.


00:25:31.500 --> 00:25:34.100
So listen to what I have to say, right?


00:25:34.100 --> 00:25:42.140
That now, he's in, it's incredible hope, incredibly hopeful for Python because of this and wanted to apply for it.


00:25:42.220 --> 00:25:46.420
and so on, he says, I think it's a role that with a role with transformational


00:25:46.420 --> 00:25:52.120
potential for the project. In short, I believe the mission of the developer in residence, the DIR


00:25:52.120 --> 00:25:55.720
is to accelerate the developer experience of everybody else.


00:25:55.720 --> 00:26:00.620
And that not includes just the core team, but most importantly, the drive by contributions,


00:26:00.620 --> 00:26:03.720
contributors submitting pull requests and creating issues on the tracker.


00:26:03.720 --> 00:26:08.220
So he's hoping that with this role, he can do things like


00:26:08.220 --> 00:26:13.260
make sure that there's a steady review of the stream of PRs and issues so they don't get stale


00:26:13.260 --> 00:26:16.060
and there's not a backlog, triage the issues,


00:26:16.060 --> 00:26:21.160
be present in the official communication channels to unblock people if they get stuck trying to contribute,


00:26:21.160 --> 00:26:25.260
keeping CI and test suites in a usable state, making them run quick,


00:26:25.260 --> 00:26:29.560
and keeping tabs on where the work is most needed in the projects that are most important.


00:26:29.560 --> 00:26:34.660
So he's sort of the, it sounds to me almost like the technical person in the room


00:26:34.660 --> 00:26:37.360
to help the community keep moving and just making sure


00:26:37.360 --> 00:26:39.360
Oh, everyone's having a problem.


00:26:39.360 --> 00:26:42.480
Many people having a problem trying to do a PR because they can't get


00:26:42.480 --> 00:26:46.240
CPython to build. Let's make that incredibly simple for them and things like that.


00:26:46.240 --> 00:26:50.400
Yeah, I like his attitude of where he's going with this.


00:26:50.400 --> 00:26:54.800
So, yeah, yeah. If I didn't point out, Lucas is also the creator of black,


00:26:54.800 --> 00:27:00.080
the black formatter, which I know we've talked about in 100,000 variations here. So that's great.


00:27:00.080 --> 00:27:02.160
David, how do you feel about this?


00:27:02.160 --> 00:27:08.480
I think it's great any any full time person that can have working for the PSF or on Python directly is gonna


00:27:08.480 --> 00:27:11.760
help increase stability and I like his approach to where he's


00:27:11.760 --> 00:27:14.240
going to try to increase throughput by


00:27:14.240 --> 00:27:17.200
maximizing everybody else's efficiency. I think that's a


00:27:17.200 --> 00:27:22.360
it'd be easy to say like, oh, I'm going to work on these features or on this, but he's most concerned about making


00:27:22.360 --> 00:27:25.760
development for Python as ergonomic as possible, which I think


00:27:25.760 --> 00:27:29.040
ultimately will create more throughput and you know, a better


00:27:29.040 --> 00:27:30.440
better Python in the long run.


00:27:30.440 --> 00:27:35.400
Yeah, and absolutely props to the PSF because it's easy to hire somebody and say,


00:27:35.400 --> 00:27:37.680
here's what I want you to produce for us.


00:27:37.680 --> 00:27:39.600
It's harder to hire somebody and say,


00:27:39.600 --> 00:27:44.040
I want you to be an enabler of other people because it's hard to measure that.


00:27:44.040 --> 00:27:47.920
One of the interesting things that I think that he's doing is,


00:27:47.920 --> 00:27:49.640
I'm not sure if he's going to keep this up,


00:27:49.640 --> 00:27:51.260
but it looks like he has so far,


00:27:51.260 --> 00:27:55.120
is he puts out weekly report posts of what he's been doing.


00:27:55.120 --> 00:28:00.280
I can't imagine having that much public scrutiny over what my work


00:28:00.280 --> 00:28:01.980
week looks like, but I mean,


00:28:01.980 --> 00:28:04.360
>> Brian, why do you spend so much time working on CI?


00:28:04.360 --> 00:28:05.880
Come on.


00:28:05.880 --> 00:28:13.160
>> It's pretty impressive and it's cool that he's doing that.


00:28:13.160 --> 00:28:15.960
The entire Python world is watching,


00:28:15.960 --> 00:28:17.480
no pressure or anything.


00:28:17.480 --> 00:28:20.400
>> Yeah, he did say he was a little nervous about this


00:28:20.400 --> 00:28:23.640
because this is the first year of this position.


00:28:23.640 --> 00:28:27.960
The success or failure he has will influence whether it continues


00:28:27.960 --> 00:28:31.300
and what happens in the future.


00:28:31.300 --> 00:28:32.300
So super cool.


00:28:32.300 --> 00:28:34.800
Let me get a little feedback from the audience here.


00:28:34.800 --> 00:28:38.220
So Sam Orlehate says, "Good for Lucas.


00:28:38.220 --> 00:28:40.500
He's great. I watched a bunch of videos he did on YouTube


00:28:40.500 --> 00:28:42.620
about making music with AsyncIO."


00:28:42.620 --> 00:28:44.220
I haven't seen those. I'll have to check them out.


00:28:44.220 --> 00:28:46.420
And Dean out in the live stream says,


00:28:46.420 --> 00:28:49.920
"CEO of Python reminds me of a known joke in my country


00:28:49.920 --> 00:28:53.060
where this famous newscaster was shouting,


00:28:53.060 --> 00:28:55.120
'Get me the person in charge of the internet.


00:28:55.120 --> 00:28:57.220
Get me the person in charge of the internet.'"


00:28:57.220 --> 00:29:00.220
That's great.


00:29:00.220 --> 00:29:02.900
Dean, you also let us know what country that is. That's awesome.


00:29:02.900 --> 00:29:04.580
All right, Brian, you're with the next one?


00:29:04.580 --> 00:29:05.220
What's that?


00:29:05.220 --> 00:29:06.220
You're next.


00:29:06.220 --> 00:29:07.620
No, you already did this, right?


00:29:07.620 --> 00:29:08.620
Yeah, David's next.


00:29:08.620 --> 00:29:10.300
I got to keep track of what's happening here.


00:29:10.300 --> 00:29:11.420
David, you're next.


00:29:11.420 --> 00:29:12.220
Okay.


00:29:12.220 --> 00:29:15.580
So my next item is a


00:29:15.580 --> 00:29:17.580
library or framework. I'm not sure


00:29:17.580 --> 00:29:19.580
which one it falls under called Daxter.


00:29:19.580 --> 00:29:20.580
It is a


00:29:20.580 --> 00:29:24.580
data orchestrator for machine learning analytics and ETL.


00:29:24.580 --> 00:29:30.140
It's one of the first attempts I tried for any kind of data pipeline.


00:29:30.140 --> 00:29:36.340
And it's based in Python. So you programmatically build up your pipeline using Python and


00:29:36.340 --> 00:29:42.620
be, you know, different decorators depending on what kind of if you're building a solid, or, you know,


00:29:42.620 --> 00:29:47.020
depending on what you're building in the pipeline, or if you're doing configuration use different decorators.


00:29:47.020 --> 00:29:51.660
And it took a little bit to kind of wrap my head around it. I think it had more to do with the


00:29:51.660 --> 00:30:01.020
just kind of understanding how pipelines are typically constructed in industry. But once I got my head wrapped around, it was really simple to use, I felt like I could produce things pretty quickly.


00:30:01.020 --> 00:30:08.660
One really nice thing that they do is they, you know, allow you to essentially work on your pipeline locally,


00:30:08.660 --> 00:30:14.420
then deploy to production to like a Kubernetes, or you can deploy to Airflow or Dask or you know, whatever


00:30:14.420 --> 00:30:17.460
underlying engine you want to run your pipeline and


00:30:17.460 --> 00:30:21.140
the, you know, there's very little transition there.


00:30:21.140 --> 00:30:25.860
you know, you're not developing something local and having to completely change it for,


00:30:25.860 --> 00:30:29.780
you know, like a cluster, you know, larger scale. So


00:30:29.780 --> 00:30:33.620
and another really nice feature it has is a UI


00:30:33.620 --> 00:30:37.580
called Daggett. So you could do everything via the command line if you want to, but


00:30:37.580 --> 00:30:39.740
it does come with a really nice


00:30:39.740 --> 00:30:44.500
UI that allows you to see an overview of your pipeline, it allows you to


00:30:44.500 --> 00:30:46.860
test it using the playground, you can


00:30:46.860 --> 00:30:49.180
update your configuration


00:30:49.180 --> 00:30:54.060
in the playground, you can look at previous runs to see if they pass or fail to give detailed


00:30:54.060 --> 00:30:59.420
logging and error messaging. So it's, it's got, you know, this this by itself is pretty,


00:30:59.420 --> 00:31:06.620
pretty nice on top of an already already very nice tool. So I can give a quick demo too. So


00:31:06.620 --> 00:31:11.580
this is the I think it's the first part of this work tutorial they have you where you have multiple


00:31:11.580 --> 00:31:17.180
solids. So these represent different, different pieces of processing. And then like I said,


00:31:17.180 --> 00:31:21.100
said, you can use the playground, it'll check all of your configuration, everything to make


00:31:21.100 --> 00:31:25.020
sure it's correct before it lets you run anything. So if you have something misconfigured, it's


00:31:25.020 --> 00:31:30.460
not going to blow up halfway through a, you know, a 30 minute job. And then when you like


00:31:30.460 --> 00:31:38.300
that, Oh, no, no, no, so I'll probably I'll probably forgo the, the real time demonstration.


00:31:38.300 --> 00:31:43.700
I think my terminal probably died is what that was. But yeah, it will actually show


00:31:43.700 --> 00:31:48.900
a run in sequence and show the different pieces as they're completing and feeding into the other piece too.


00:31:48.900 --> 00:31:54.100
So it's not so much for this because it's a very small, quick pipeline.


00:31:54.100 --> 00:31:58.100
But if you have like longer SQL queries or something like that, it'll actually kind of show in real time,


00:31:58.100 --> 00:32:02.740
you know how it's processing. So you can kind of get a visual intuition to what's going on,


00:32:02.740 --> 00:32:05.220
on top of everything else too. So yeah,


00:32:05.220 --> 00:32:10.580
there are a couple of the resources around this too, if you want someone that explains a little bit better than I do.


00:32:10.580 --> 00:32:13.380
The data engineering podcast had an episode


00:32:13.380 --> 00:32:16.820
and software engineering daily also did an episode about Daxter.


00:32:16.820 --> 00:32:19.220
So, you know, that's kind of where I first learned about it.


00:32:19.220 --> 00:32:21.220
And there's a lot of really good information in those podcasts.


00:32:21.220 --> 00:32:23.220
Yeah, these


00:32:23.220 --> 00:32:25.700
data pipeline frameworks are


00:32:25.700 --> 00:32:28.980
super interesting. I've certainly realized just how valuable they can be.


00:32:28.980 --> 00:32:32.820
Dean asks, David, how is this compared to Airflow? Do you have any idea?


00:32:32.820 --> 00:32:34.420
Have you tried? Have you looked at either?


00:32:34.420 --> 00:32:37.780
This was, I haven't used Airflow. This is the first,


00:32:37.780 --> 00:32:46.540
my first stab at any kind of data pipeline. And in my current job, we're not using Airflow or Daxter, we're using one of the cloud based tools. So it's,


00:32:46.540 --> 00:32:58.260
I think Airflow is more draggy, droppy, more visual, but I could be wrong about that. One thing I really liked about Daxter is at least compared to my what I'm currently using is that you could programmatically create these


00:32:58.260 --> 00:33:02.020
interfaces and technically the tool I'm using now has a


00:33:02.020 --> 00:33:03.300
an API that you can


00:33:03.300 --> 00:33:05.060
throw JSON against to create your


00:33:05.060 --> 00:33:08.340
different resources and everything but it's nice having


00:33:08.340 --> 00:33:12.140
Python code because that works a little bit better with my brain than a lot of the draggy


00:33:12.140 --> 00:33:13.260
droppy stuff.


00:33:13.260 --> 00:33:16.740
I did have the


00:33:16.740 --> 00:33:19.860
Airflow folks on the show, on Talk Python not the show,


00:33:19.860 --> 00:33:21.540
a little while ago.


00:33:21.540 --> 00:33:22.580
It's not out yet but


00:33:22.580 --> 00:33:23.700
last week maybe.


00:33:23.700 --> 00:33:27.700
And they pointed out that it's mostly, it's like pretty much all Python here as well.


00:33:27.700 --> 00:33:30.800
So you program it in Python over on Airflow


00:33:30.800 --> 00:33:34.660
and then you have similar visual tools


00:33:34.660 --> 00:33:37.380
to actually see what's happening


00:33:37.380 --> 00:33:39.500
but you can't interact with it through those things.


00:33:39.500 --> 00:33:41.420
You can just like kind of watch it and debug it


00:33:41.420 --> 00:33:42.820
and stuff from my understanding.


00:33:42.820 --> 00:33:44.860
So I would put them in a pretty similar category.


00:33:44.860 --> 00:33:46.380
I would say one thing that's pretty interesting


00:33:46.380 --> 00:33:47.860
is there's, that's not what I would pull up.


00:33:47.860 --> 00:33:49.740
Actually, when Airflow GitHub


00:33:49.740 --> 00:33:51.940
is what I wanted to sort of point out.


00:33:51.940 --> 00:33:53.140
I was really surprised to learn


00:33:53.140 --> 00:33:55.720
that Airflow has 22,000 stars on GitHub


00:33:55.720 --> 00:33:56.780
which kind of blew my mind.


00:33:56.780 --> 00:33:59.780
I thought of it as like a little framework that people might use.


00:33:59.780 --> 00:34:02.280
Apparently, it's popular. I'm not really sure about Daxter.


00:34:02.280 --> 00:34:03.280
I guess I could look as well.


00:34:03.280 --> 00:34:06.080
I think it's relatively new, so I'd be surprised if it were


00:34:06.080 --> 00:34:07.880
quite as popular as Airflow. But


00:34:07.880 --> 00:34:10.780
one nice thing that Daxter can do


00:34:10.780 --> 00:34:14.680
if you're running, if you're running, or if you have Airflow


00:34:14.680 --> 00:34:16.880
pipelines that you're using, you can use


00:34:16.880 --> 00:34:19.680
that server to run Daxter 2. It can basically


00:34:19.680 --> 00:34:22.280
pilot to something that's compatible with Airflow


00:34:22.280 --> 00:34:23.580
if you need to do that. So


00:34:23.580 --> 00:34:25.480
there's a couple different


00:34:25.480 --> 00:34:29.640
I think translation ways you can translate it to so it's


00:34:29.640 --> 00:34:35.880
it seems like a pretty interesting tool. And like I said, I had developed a small pipeline in my previous job is kind of my first


00:34:35.880 --> 00:34:41.080
stab at pipelines to to eliminate it in Excel sheet that was doing a bunch of horrible, awful


00:34:41.080 --> 00:34:45.800
SQL queries. I can just imagine that people are trying to do this with Excel and it was probably wrong.


00:34:45.800 --> 00:34:48.920
It was not necessarily incorrect, but it was wrong to do it.


00:34:48.920 --> 00:34:52.280
Well, it was it was interesting.


00:34:52.280 --> 00:34:54.880
Excel's just very interesting to reverse engineering.


00:34:54.880 --> 00:34:56.600
It's a lot of go-to statements.


00:34:56.600 --> 00:34:59.520
It's ubiquitous, but it's definitely,


00:34:59.520 --> 00:35:02.960
as far as programming production systems, not a good tool.


00:35:02.960 --> 00:35:04.840
Yeah, very cool.


00:35:04.840 --> 00:35:07.160
All right, so I got some more real-time updates here.


00:35:07.160 --> 00:35:09.720
Teddy says, "I know one of the big differences with Airflow


00:35:09.720 --> 00:35:13.280
is that you can use the output of a task as the input of the next task.


00:35:13.280 --> 00:35:16.840
From what I understand, Daxter is kind of a second generation data orchestration."


00:35:16.840 --> 00:35:21.680
Unsure which generation Airflow would be, but here we go.


00:35:21.680 --> 00:35:25.720
And then Airflow mostly assumes you store and load data in each task,


00:35:25.720 --> 00:35:28.640
even though Airflow has something called Xcom,


00:35:28.640 --> 00:35:31.280
which allows you to pass the output as input of the next.


00:35:31.280 --> 00:35:32.440
Okay, interesting.


00:35:32.440 --> 00:35:34.560
Yeah, thanks for all that background info there.


00:35:34.560 --> 00:35:37.720
I haven't used either, but I definitely think they're both neat.


00:35:37.720 --> 00:35:40.080
And I feel there's a lot of places that are just like,


00:35:40.080 --> 00:35:41.080
"Well, how else are we going to do it?


00:35:41.080 --> 00:35:42.480
Of course, we're going to use that spreadsheet."


00:35:42.480 --> 00:35:45.560
Right? And if they had tools like this, it would be very empowering.


00:35:45.560 --> 00:35:48.000
One of the things I find very interesting about these frameworks


00:35:48.000 --> 00:35:50.360
is usually what you end up building is like the little piece,


00:35:50.360 --> 00:35:57.000
like load the CSV into the database or run the report that gets me the revenue for the day or,


00:35:57.000 --> 00:36:01.000
and what you end up building are very, very small pieces. And you don't have to worry about the


00:36:01.000 --> 00:36:06.600
reusability, the reproducibility, the durability, you just go like, I'm going to build an incredibly


00:36:06.600 --> 00:36:11.160
small bit of Python, and we'll just click it in as part of this workflow, which really seems to


00:36:11.160 --> 00:36:16.680
empower people almost like the microservices story, but for data processing, without all the


00:36:16.680 --> 00:36:18.480
the hard deployment side of things.


00:36:18.480 --> 00:36:21.240
- I hope that they, if they don't already have it,


00:36:21.240 --> 00:36:24.400
I hope that they put a tool connected with Degster


00:36:24.400 --> 00:36:28.260
called Dagnabit, 'cause it needs to be there, I think.


00:36:28.260 --> 00:36:30.800
Maybe some sort of capture tool or something.


00:36:30.800 --> 00:36:31.880
Dagnabit would be good.


00:36:31.880 --> 00:36:34.660
- Yeah, yeah, I love the UI bit of it as well.


00:36:34.660 --> 00:36:36.440
All right, quick bit of follow-up.


00:36:36.440 --> 00:36:37.480
I guess, Brian, you wanna start?


00:36:37.480 --> 00:36:39.400
You got any extras today?


00:36:39.400 --> 00:36:42.640
- I've got just a vanity extra.


00:36:42.640 --> 00:36:48.080
So one of the things that we noticed,


00:36:48.080 --> 00:36:53.200
Will mentioned about Textual, we talked about Textual briefly.


00:36:53.200 --> 00:36:57.600
The stars on Textual is just going through the roof.


00:36:57.600 --> 00:36:59.280
I love the graph.


00:36:59.280 --> 00:37:03.000
Is this the XKCD format of Matplotlib or something?


00:37:03.000 --> 00:37:04.240
What is this?


00:37:04.240 --> 00:37:07.240
It's a-- I have no idea what it is.


00:37:07.240 --> 00:37:07.720
But it's--


00:37:07.720 --> 00:37:09.320
Anyway, show us the other pictures.


00:37:09.320 --> 00:37:10.800
Yeah, the stars are insane.


00:37:10.800 --> 00:37:12.940
It's like a vertical line on a graph.


00:37:12.940 --> 00:37:17.380
One of my one of my own project has a similar trajectory, so I wanted to just


00:37:17.380 --> 00:37:23.120
highlight that it's looking up to, of course, I only have 16 stars.


00:37:23.120 --> 00:37:27.880
Will has like 3000 a little different, but still look, it's


00:37:27.880 --> 00:37:29.700
done kind of the same day, I think.


00:37:29.700 --> 00:37:31.480
Yeah, that's awesome.


00:37:31.480 --> 00:37:34.340
It's been seen stars most of my repost.


00:37:34.340 --> 00:37:37.120
So you just got to extrapolate it a little bit.


00:37:37.120 --> 00:37:38.240
No, that's really cool.


00:37:38.240 --> 00:37:38.640
Awesome.


00:37:39.480 --> 00:37:41.160
David, do you have any extra stuff you want to throw out?


00:37:41.160 --> 00:37:41.660
Sorry, Brian.


00:37:41.660 --> 00:37:43.660
Yeah, I had one extra.


00:37:43.660 --> 00:37:45.920
I didn't load it on my screen over here.


00:37:45.920 --> 00:37:48.400
Let me see if I can pop it over real quick.


00:37:48.400 --> 00:37:50.000
But I...


00:37:50.000 --> 00:37:53.840
And this isn't Python, but I know SQL and Python tend to play a lot together.


00:37:53.840 --> 00:37:55.840
Are you going to go back to some


00:37:55.840 --> 00:37:58.680
nostalgic time on the internet where you open up a DOS prompt


00:37:58.680 --> 00:38:00.680
and type win to start Windows? What is this?


00:38:00.680 --> 00:38:02.680
This is a modern SQL.


00:38:02.680 --> 00:38:06.640
It's a really fantastic slideshow that goes through


00:38:06.640 --> 00:38:07.640
a lot of updates.


00:38:07.640 --> 00:38:14.120
So if you're still doing SQL the old fashioned way, it shows you how you can replace that with, you know, better,


00:38:14.120 --> 00:38:16.840
cleaner, more concise versions of them.


00:38:16.840 --> 00:38:22.440
There's so many things in here that I have was doing a lot of like, just horrible hacky tricks to get to work that


00:38:22.440 --> 00:38:24.600
you could take care of in one line for SQL.


00:38:24.600 --> 00:38:29.640
And, you know, even with some of the newer things I've learned, like, there's just so many, so many great, great,


00:38:29.640 --> 00:38:33.080
you know, I don't know if you call them tools or methods or what, but, you know,


00:38:33.080 --> 00:38:35.080
I found in a SQL tend to


00:38:35.080 --> 00:38:38.200
work together a lot, especially in the data space. So if you're


00:38:38.200 --> 00:38:41.560
kind of like me where you have some, I guess,


00:38:41.560 --> 00:38:44.520
self-taught SQL experience, something like this can be very helpful


00:38:44.520 --> 00:38:50.120
to kind of learn some of the, I guess, better practices for different things you might want to try to do with SQL.


00:38:50.120 --> 00:38:55.960
No, this is great because I learned SQL like in the 90s. So it's changed a lot since then.


00:38:55.960 --> 00:38:58.200
And I was just thinking the same thing, Brian, like,


00:38:58.200 --> 00:39:00.200
it's been at least 10 years since I've tried to


00:39:00.200 --> 00:39:02.760
refresh my SQL skill


00:39:02.760 --> 00:39:05.040
So there's probably a lot of stuff that's,


00:39:05.040 --> 00:39:06.340
"Oh, you shouldn't do this."


00:39:06.340 --> 00:39:07.360
Like, "Why you do this?"


00:39:07.360 --> 00:39:08.440
If you use this other keyword,


00:39:08.440 --> 00:39:10.240
it's more efficient, safer, faster.


00:39:10.240 --> 00:39:11.080
Come on.


00:39:11.080 --> 00:39:11.920
- Yeah.


00:39:11.920 --> 00:39:12.760
- That's like a--


00:39:12.760 --> 00:39:15.880
- Jealous of the people learning SQL now.


00:39:15.880 --> 00:39:16.720
- Yeah.


00:39:16.720 --> 00:39:17.560
- How about you, Michael?


00:39:17.560 --> 00:39:18.400
Got anything extras?


00:39:18.400 --> 00:39:20.440
- I got some follow-up,


00:39:20.440 --> 00:39:22.240
some follow-up from last time.


00:39:22.240 --> 00:39:25.440
This comes to us from John Hagan.


00:39:25.440 --> 00:39:28.560
And I think I probably is the one who said this.


00:39:28.560 --> 00:39:30.120
I said, "Oh, there's really cool time before,


00:39:30.120 --> 00:39:35.400
like about being able to use lowercase ddict and lowercase llist as type hints


00:39:35.400 --> 00:39:40.520
rather than from typing import capital L list or capital ddict, right?


00:39:40.520 --> 00:39:42.280
So, oh, that's coming in 3.10. Fantastic.


00:39:42.280 --> 00:39:44.680
He's like, you know, that's in 3.5 or 3.9.


00:39:44.680 --> 00:39:46.120
So it's kind of already out.


00:39:46.120 --> 00:39:47.320
Oh, right. Okay.


00:39:47.320 --> 00:39:49.880
But he did point out some things that are coming that are neat.


00:39:49.880 --> 00:39:55.560
So, for example, we're previously we had to say if I want a potentially optional,


00:39:55.560 --> 00:39:57.240
it could be none or it could be a list in the list.


00:39:57.240 --> 00:40:02.080
if it is a list has strings, you have say optional bracket list bracket str


00:40:02.080 --> 00:40:06.620
and those are all capital because they have this parallel type implementation over in typing, right?


00:40:06.620 --> 00:40:08.880
In Python 3.9, I can now say


00:40:08.880 --> 00:40:11.620
optional of lowercase l list


00:40:11.620 --> 00:40:15.240
of bracket str and you might think who cares if it's lowercase or uppercase L?


00:40:15.240 --> 00:40:19.080
Well, the difference is you don't have to do an import and explain to people who don't


00:40:19.080 --> 00:40:22.780
know that code like, oh, you've got to go import this other type things to save the type.


00:40:22.780 --> 00:40:25.080
Yes, I know list is right there, but you can't use list.


00:40:25.080 --> 00:40:26.180
You got to do something else, right?


00:40:26.180 --> 00:40:29.860
So that's the feature that I was excited about that I said was in 3.10,


00:40:29.860 --> 00:40:31.860
in 3.9, so hooray.


00:40:31.860 --> 00:40:36.620
But he also pointed out that the union operators were simplified.


00:40:36.620 --> 00:40:39.820
It used to be you would have a similar syntax for union as optional.


00:40:39.820 --> 00:40:43.420
You would say union of bracket one thing comma bracket the other thing.


00:40:43.420 --> 00:40:48.220
But now you can say just type one pipe vertical bar type two.


00:40:48.220 --> 00:40:52.020
And this actually allows us to model optional without importing optional.


00:40:52.020 --> 00:40:55.120
So instead of optional of list of string,


00:40:55.120 --> 00:40:57.520
we can just have list of string, pipe, none.


00:40:57.520 --> 00:40:58.720
>> Yeah, this is cool.


00:40:58.720 --> 00:41:00.240
I'm glad somebody pointed it out because


00:41:00.240 --> 00:41:04.120
the 310 announcements don't say anything about optional.


00:41:04.120 --> 00:41:06.360
But in effect, they do.


00:41:06.360 --> 00:41:08.360
You don't have to use this anymore.


00:41:08.360 --> 00:41:11.000
But are you going to start using this?


00:41:11.000 --> 00:41:12.440
>> The piping?


00:41:12.440 --> 00:41:14.320
>> Well, yeah, and the optional thing.


00:41:14.320 --> 00:41:17.760
Because I started to and then I realized that if I start using that,


00:41:17.760 --> 00:41:19.780
then my code is 310 only.


00:41:19.780 --> 00:41:24.880
>> Yes, exactly. It depends on the scenarios.


00:41:24.880 --> 00:41:27.760
So for say, talk, Python training, the code all behind that,


00:41:27.760 --> 00:41:29.440
I control the server.


00:41:29.440 --> 00:41:30.280
- Yeah, nobody's looking at that.


00:41:30.280 --> 00:41:32.720
- It's easy for me to make it the brand new thing.


00:41:32.720 --> 00:41:34.360
If I were to say generate,


00:41:34.360 --> 00:41:37.520
if I were gonna build an example app for a course,


00:41:37.520 --> 00:41:39.920
then I would be hesitant to use this right away.


00:41:39.920 --> 00:41:41.240
I might wait a year or two,


00:41:41.240 --> 00:41:43.100
because I don't wanna have to have people


00:41:43.100 --> 00:41:43.940
have a bad experience.


00:41:43.940 --> 00:41:45.480
Like, well, I have three nine, that's pretty new.


00:41:45.480 --> 00:41:46.300
That should be work.


00:41:46.300 --> 00:41:47.480
Like, nope, that doesn't work because of,


00:41:47.480 --> 00:41:49.200
I didn't wanna say the word optional, right?


00:41:49.200 --> 00:41:50.040
- Yeah.


00:41:50.040 --> 00:41:52.560
- And if it was an open source project,


00:41:52.560 --> 00:41:54.320
I guess it would depend on how,


00:41:54.320 --> 00:41:56.480
if I wanted to support older versions.


00:41:56.480 --> 00:41:58.220
Probably even longer there, wait.


00:41:58.220 --> 00:41:59.060
I know, what do you think?


00:41:59.060 --> 00:42:00.640
- Yeah, I was thinking,


00:42:00.640 --> 00:42:02.520
thinking library specifically,


00:42:02.520 --> 00:42:05.480
probably want to almost stick with the 3.5.3,


00:42:05.480 --> 00:42:06.960
at least for a while,


00:42:06.960 --> 00:42:08.560
to kind of flush out people


00:42:08.560 --> 00:42:11.120
that are using some of the older versions of Python.


00:42:11.120 --> 00:42:14.400
Yeah, I think 3.9,


00:42:14.400 --> 00:42:16.000
I'm using 3.9 on everything now,


00:42:16.000 --> 00:42:17.240
but I think for a lot of people,


00:42:17.240 --> 00:42:19.240
that's still pretty aggressive


00:42:19.240 --> 00:42:22.000
to have a 3.9 or higher requirement for a library.


00:42:22.000 --> 00:42:23.560
- Yeah, I agree.


00:42:23.560 --> 00:42:26.280
Couple of bits of real-time feedback out there.


00:42:26.280 --> 00:42:29.680
Sam and Dean both say there are Dunder Future imports


00:42:29.680 --> 00:42:31.480
that you can do now that will enable


00:42:31.480 --> 00:42:32.980
some of this stuff already.


00:42:32.980 --> 00:42:36.040
So like from Dunder Future import pipe.


00:42:36.040 --> 00:42:40.120
- I don't know if that's true or if it's a joke.


00:42:40.120 --> 00:42:43.780
- Well, I do know that the Dunder Future stuff


00:42:43.780 --> 00:42:46.120
does support the newer type information.


00:42:46.120 --> 00:42:47.600
I don't know about for pipe.


00:42:47.600 --> 00:42:49.680
- Okay. - Yeah, yeah.


00:42:49.680 --> 00:42:53.480
Okay, we can do some after coding on this.


00:42:53.480 --> 00:42:56.000
Coding after the recording and we'll know.


00:42:56.000 --> 00:42:59.160
Oh, Dean Stays is kidding, yeah.


00:42:59.160 --> 00:43:01.480
But you really can, thank you,


00:43:01.480 --> 00:43:04.960
you really can do some of these other type information


00:43:04.960 --> 00:43:06.680
with the import under features.


00:43:06.680 --> 00:43:09.840
Okay, ready for a joke?


00:43:09.840 --> 00:43:10.920
- Yeah.


00:43:10.920 --> 00:43:11.760
- All right, Brian.


00:43:11.760 --> 00:43:14.280
So you're gonna have to help me along here.


00:43:14.280 --> 00:43:15.120
- Okay.


00:43:15.120 --> 00:43:19.180
- So there's two developers staring very worried at a screen.


00:43:19.180 --> 00:43:23.820
They have one section, then a big long quiet section,


00:43:23.820 --> 00:43:24.660
and then some more.


00:43:24.660 --> 00:43:26.060
So you be the very first person


00:43:26.060 --> 00:43:27.580
and I'll be the second person here.


00:43:27.580 --> 00:43:28.420
- Okay.


00:43:28.420 --> 00:43:30.060
- Okay, I hope it works.


00:43:30.060 --> 00:43:32.120
- Do not hope, pray.


00:43:32.120 --> 00:43:35.100
Pray it works.


00:43:35.100 --> 00:43:36.700
Have you ever been there and just in this situation


00:43:36.700 --> 00:43:39.820
where you're just like, oh, it must work.


00:43:39.820 --> 00:43:41.300
If this doesn't work, we're done.


00:43:41.300 --> 00:43:44.380
- Yeah, not so much in the software side of things,


00:43:44.380 --> 00:43:46.260
but when I was a manufacturing engineer,


00:43:46.260 --> 00:43:48.980
there was so many times we'd be troubleshooting a machine


00:43:48.980 --> 00:43:50.680
on a Saturday for eight hours straight.


00:43:50.680 --> 00:43:52.040
And you think you made it.


00:43:52.040 --> 00:43:54.780
Everybody's just holding their breath, crossing their fingers.


00:43:54.780 --> 00:43:57.780
Work, work, because you want to go home someday.


00:43:57.780 --> 00:44:00.580
Yeah, I remember how... Go ahead, Brian.


00:44:00.580 --> 00:44:03.380
No, I definitely feel this when I'm using...


00:44:03.380 --> 00:44:05.480
when I'm... you're working on C++ code,


00:44:05.480 --> 00:44:08.280
because you have to, you know, wait for it to compile,


00:44:08.280 --> 00:44:11.080
and then test, load it, and then test it, and stuff like that.


00:44:11.080 --> 00:44:12.980
But even with Python stuff,


00:44:12.980 --> 00:44:15.780
I still feel this when I'm working on CI tools,


00:44:15.780 --> 00:44:17.580
because the continuous integration, you have to...


00:44:17.580 --> 00:44:23.900
you're not sure if you got the syntax right, the YAML right or whatever until you push it and see what happens.


00:44:23.900 --> 00:44:27.300
Yeah, CI is a good point. You have so little visibility in there.


00:44:27.300 --> 00:44:31.300
And if it's not working, there's one better real-time follow up on mine here.


00:44:31.300 --> 00:44:34.500
It's like if you come over here and you look at the


00:44:34.500 --> 00:44:39.580
the pep-585, it does say the implementation of some of these new features


00:44:39.580 --> 00:44:40.780
under typing.


00:44:40.780 --> 00:44:46.060
This is the one that came out in 3.9. So you can say from future import annotations


00:44:46.060 --> 00:44:49.620
and then start using lowercase l and things like that, lowercase d.


00:44:49.620 --> 00:44:54.900
Who knows? I know Dean said he was joking, but maybe you really can get the pipe to come out that way.


00:44:54.900 --> 00:44:58.800
But at least you can do like these sort of 3.9 level


00:44:58.800 --> 00:45:02.100
changes using a back to 3.7 it looks like.


00:45:02.100 --> 00:45:02.600
Okay.


00:45:02.600 --> 00:45:03.900
Alright, cool cool.


00:45:03.900 --> 00:45:05.600
Well, that was a lot of fun.


00:45:05.600 --> 00:45:08.260
Yeah, it was. I had another one, but I'm going to save it.


00:45:08.260 --> 00:45:11.020
Good. Alright, well, I'm looking forward to hear about it next week.


00:45:11.020 --> 00:45:12.660
David, thank you for joining us.


00:45:12.660 --> 00:45:13.860
Thank you for having me.


00:45:13.860 --> 00:45:16.980
Yeah, and thanks for all the tips and stuff you've had throughout the years.


00:45:16.980 --> 00:45:18.740
And it's really good to have you here.


00:45:18.740 --> 00:45:21.340
And congratulations on your first dev job.


00:45:21.340 --> 00:45:22.340
That's fantastic.


00:45:22.340 --> 00:45:23.580
That is fantastic.


00:45:23.580 --> 00:45:29.580
And thanks, Dean, for correcting us in real time.


00:45:29.580 --> 00:45:30.580
That's awesome.


00:45:30.580 --> 00:45:31.980
That's good.


00:45:31.980 --> 00:45:32.980
Yeah, absolutely.


00:45:32.980 --> 00:45:33.980
Thank you, everyone.


00:45:33.980 --> 00:45:38.860
And oh, Sam does sadly show us that import pipe from the future doesn't work.


00:45:38.860 --> 00:45:40.980
But yeah, thanks, everyone.


00:45:40.980 --> 00:45:41.980
See you all later.


00:45:41.980 --> 00:45:42.980
Bye.


00:45:42.980 --> 00:45:44.820
Thanks for listening to Python Bytes.


00:45:44.820 --> 00:45:47.660
Follow the show on Twitter via @PythonBytes.


00:45:47.660 --> 00:45:50.620
That's Python Bytes as in B-Y-T-E-S.


00:45:50.620 --> 00:45:53.380
Get the full show notes over at PythonBytes.fm.


00:45:53.380 --> 00:45:57.780
If you have a news item we should cover, just visit PythonBytes.fm and click submit in the


00:45:57.780 --> 00:45:58.780
nav bar.


00:45:58.780 --> 00:46:00.820
We're always on the lookout for sharing something cool.


00:46:00.820 --> 00:46:04.820
If you want to join us for the live recording, just visit the website and click live stream


00:46:04.820 --> 00:46:08.180
to get notified of when our next episode goes live.


00:46:08.180 --> 00:46:12.400
That's usually happening at noon Pacific on Wednesdays over at YouTube.


00:46:12.400 --> 00:46:15.920
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:46:15.920 --> 00:46:19.240
Thank you for listening and sharing this podcast with your friends and colleagues.

