
00:00:00.000 --> 00:00:03.280
Hello and welcome to Python Bytes where we deliver Python news and headlines


00:00:03.280 --> 00:00:04.920
directly to your earbuds.


00:00:04.920 --> 00:00:11.040
This is episode 276 recorded March 22nd, 2022.


00:00:11.040 --> 00:00:12.000
So many twos.


00:00:12.000 --> 00:00:13.040
I'm Michael Kennedy.


00:00:13.040 --> 00:00:14.040
And I'm Brian Arkin.


00:00:14.040 --> 00:00:15.160
And I'm Ian Helen.


00:00:15.160 --> 00:00:17.380
Hey Ian, welcome to the show.


00:00:17.380 --> 00:00:18.140
It's great to have you here.


00:00:18.140 --> 00:00:19.420
Thank you very much.


00:00:19.420 --> 00:00:23.220
I've listened to the show a lot and I feel very privileged to appear on it.


00:00:23.220 --> 00:00:26.400
It's our privilege to have you here.


00:00:26.400 --> 00:00:28.040
Thank you so much for listening.


00:00:28.040 --> 00:00:29.840
And I know you got some cool stuff to share.


00:00:29.840 --> 00:00:32.120
So we're, we're looking forward to hearing about that.


00:00:32.120 --> 00:00:37.280
Also, I do want to say thank you to Fusion Auth for sponsoring the show.


00:00:37.280 --> 00:00:39.400
I'll tell you more about them later.


00:00:39.400 --> 00:00:42.840
Before we get into the topics, Ian, tell people a bit about yourself.


00:00:42.840 --> 00:00:43.480
Sure.


00:00:43.480 --> 00:00:48.200
I'm a developer in Microsoft, in Microsoft Threat Intelligence Center.


00:00:48.200 --> 00:00:49.920
Been with Microsoft for quite a long time.


00:00:49.920 --> 00:00:53.000
Only relatively recently, like four years or so ago, got into


00:00:53.000 --> 00:00:55.320
Python coding with Jupyter notebooks.


00:00:55.640 --> 00:01:00.720
So I work on Jupyter notebooks for the Microsoft Sentinel project and own a


00:01:00.720 --> 00:01:05.960
modest open source package that we'll call Mystic Pi, which we'll cover a little bit


00:01:05.960 --> 00:01:06.320
later.


00:01:06.320 --> 00:01:07.560
Takes most of my time.


00:01:07.560 --> 00:01:08.440
Fantastic.


00:01:08.440 --> 00:01:11.920
The whole cybersecurity threat detection stuff.


00:01:11.920 --> 00:01:13.680
It's, it's very interesting.


00:01:13.680 --> 00:01:17.280
There's a lot of innovation there, but it's also, it's a challenging area to be


00:01:17.280 --> 00:01:17.600
working.


00:01:17.600 --> 00:01:18.120
Yep.


00:01:18.120 --> 00:01:18.560
Yep.


00:01:18.560 --> 00:01:20.040
We never short of stuff to do.


00:01:20.040 --> 00:01:20.720
So that's.


00:01:20.720 --> 00:01:22.440
I'm sure you're not.


00:01:22.440 --> 00:01:25.520
Well, Brian, how about you kick us off here?


00:01:25.560 --> 00:01:27.600
Well, so I'm going to start off with a problem.


00:01:27.600 --> 00:01:31.000
So I had a problem and I have a cool solution for it.


00:01:31.000 --> 00:01:33.640
So my problem is on test and code,


00:01:33.640 --> 00:01:38.640
I've got titles and I want to end a show on MP3 file,


00:01:38.640 --> 00:01:42.120
but I want to create a show notes,


00:01:42.120 --> 00:01:45.560
automated show notes or not show notes, transcripts.


00:01:45.560 --> 00:01:47.200
So one of the problems,


00:01:47.200 --> 00:01:48.840
there's a lot of problems in doing this,


00:01:48.840 --> 00:01:51.760
trying to automate it, but one of them is the title.


00:01:51.760 --> 00:01:56.240
I want to turn that into something that's a little bit,


00:01:56.240 --> 00:01:58.420
so something like, you know,


00:01:58.420 --> 00:02:00.640
it's got normal English and capitalization


00:02:00.640 --> 00:02:02.360
and all sorts of spaces and stuff.


00:02:02.360 --> 00:02:03.400
I want to turn that into a--


00:02:03.400 --> 00:02:04.560
- Things that URLs hate.


00:02:04.560 --> 00:02:06.700
- Yeah, I want to turn that into a URL.


00:02:06.700 --> 00:02:11.700
And one of the things is getting rid of stop words.


00:02:11.700 --> 00:02:14.420
So there's a bunch of stuff like lowercasing.


00:02:14.420 --> 00:02:15.580
I can do that easy.


00:02:15.580 --> 00:02:17.960
But getting rid of stop words was a little hard.


00:02:17.960 --> 00:02:22.060
So I ran across this thing called GenSim


00:02:22.060 --> 00:02:24.000
parsing pre-processing.


00:02:24.000 --> 00:02:29.000
So pre-processing, so GenSim is a larger sort of beast.


00:02:29.000 --> 00:02:34.100
It's used for machine learning and stuff to generate models.


00:02:34.100 --> 00:02:38.880
But I'm just really using one little piece of it,


00:02:38.880 --> 00:02:43.200
the pre-processing part, and it's really pretty cool.


00:02:43.200 --> 00:02:46.040
I was looking, I actually found this article first.


00:02:46.040 --> 00:02:49.780
there was an article called Removing Stopwords from Strings in Python.


00:02:49.780 --> 00:02:55.060
It has a discussion of NLTK and GenSim and Spacy.


00:02:55.060 --> 00:02:57.020
I tried all of them out actually,


00:02:57.020 --> 00:03:00.220
and the one that really stuck best for me is


00:03:00.220 --> 00:03:07.660
using removed stopwords is exactly what I wanted from GenSim.


00:03:07.660 --> 00:03:10.300
I went ahead and tried that and it worked really well,


00:03:10.300 --> 00:03:11.420
but I'm like, "Wait,


00:03:11.420 --> 00:03:15.460
I'm pulling this in from the pre-processing library.


00:03:15.460 --> 00:03:18.060
I wonder what else is in there.


00:03:18.060 --> 00:03:21.000
There's all sorts of really cool stuff in here.


00:03:21.000 --> 00:03:24.240
There's lowercase to Unicode.


00:03:24.240 --> 00:03:26.520
It turns it both into lowercase and in Unicode.


00:03:26.520 --> 00:03:29.720
That's pretty neat. Don't think I need it, but that's neat.


00:03:29.720 --> 00:03:32.420
But then there was one that was,


00:03:32.420 --> 00:03:35.240
I thought maybe this is exactly what I want.


00:03:35.240 --> 00:03:37.760
It's something called pre-processed string,


00:03:37.760 --> 00:03:40.920
and it has a whole bunch of filters built into it.


00:03:40.920 --> 00:03:41.560
>> Oh, nice.


00:03:41.560 --> 00:03:42.100
>> Like strip.


00:03:42.100 --> 00:03:45.160
>> Strip. Yeah, strip whitespace, strip punctuation. I love it.


00:03:45.160 --> 00:03:47.260
- Yeah, and take away multiple,


00:03:47.260 --> 00:03:48.800
after it strips punctuation,


00:03:48.800 --> 00:03:51.300
like you're gonna have, if I go back,


00:03:51.300 --> 00:03:54.960
I had a slash in my title for one of the episodes.


00:03:54.960 --> 00:03:55.860
If it takes that out,


00:03:55.860 --> 00:03:58.040
I'm gonna have a space before and a space after.


00:03:58.040 --> 00:04:00.040
So I wanna remove those.


00:04:00.040 --> 00:04:02.140
So it'll strip multiple white space,


00:04:02.140 --> 00:04:03.160
strips out numerics,


00:04:03.160 --> 00:04:05.380
'cause I probably don't want numbers in there,


00:04:05.380 --> 00:04:07.460
and then remove stop words.


00:04:07.460 --> 00:04:08.860
The one thing I don't want


00:04:08.860 --> 00:04:12.180
that I'll have to like customize how I'm calling this


00:04:12.180 --> 00:04:13.980
is a stem text.


00:04:13.980 --> 00:04:16.560
So stem text, I don't know what that did


00:04:16.560 --> 00:04:18.260
without playing with it, but what it does


00:04:18.260 --> 00:04:20.200
is it will take things like twisted


00:04:20.200 --> 00:04:22.400
and turn it into twist.


00:04:22.400 --> 00:04:23.840
That's really not right.


00:04:23.840 --> 00:04:24.680
- So you definitely don't want that.


00:04:24.680 --> 00:04:25.620
- I don't want that.


00:04:25.620 --> 00:04:26.460
- That'll mess it up.


00:04:26.460 --> 00:04:27.620
- But I think I want everything else.


00:04:27.620 --> 00:04:31.640
So this Gensim library has, you know,


00:04:31.640 --> 00:04:34.900
if you're doing machine learning, coming up with models,


00:04:34.900 --> 00:04:37.980
I think this is a great tool to look into,


00:04:37.980 --> 00:04:42.520
but if it's actually, I'm gonna use it just for removing,


00:04:42.520 --> 00:04:46.080
to create these titles for my podcast.


00:04:46.080 --> 00:04:49.520
But it feels a little weird.


00:04:49.520 --> 00:04:51.560
It feels like I'm using this really big hammer


00:04:51.560 --> 00:04:53.600
to do this little tiny problem.


00:04:53.600 --> 00:04:58.140
I guess I'm okay with it, but do you have any other ideas


00:04:58.140 --> 00:04:59.360
where it could use or?


00:04:59.360 --> 00:05:03.320
- Well, I didn't know about this, so I wrote my own.


00:05:03.320 --> 00:05:04.160
- Okay.


00:05:04.160 --> 00:05:07.280
- And it's kind of janky, like it's a little bit


00:05:07.280 --> 00:05:09.280
recursive, iterative, it's like,


00:05:09.280 --> 00:05:11.480
we'll take away all the punctuation now,


00:05:11.480 --> 00:05:14.100
Turn all of your white spaces into single white spaces.


00:05:14.100 --> 00:05:16.980
Cause there might've been, you know, dot space.


00:05:16.980 --> 00:05:19.460
So now you've got two white spaces, but you've got to take away, you know,


00:05:19.460 --> 00:05:22.040
there's like a bunch of weird steps and then put it back.


00:05:22.040 --> 00:05:23.300
This looks cleaner.


00:05:23.300 --> 00:05:25.300
It is a dependency, but it does look cleaner.


00:05:25.300 --> 00:05:25.940
I like this.


00:05:25.940 --> 00:05:27.740
I think it's, I'm glad I know about it.


00:05:27.740 --> 00:05:28.640
Ian, what do you think?


00:05:28.640 --> 00:05:29.940
Is it a huge thing?


00:05:29.940 --> 00:05:34.140
I mean, dependency, but I always think of like ML like stuff, but this


00:05:34.140 --> 00:05:35.840
is like just the pre-processing, right?


00:05:35.840 --> 00:05:36.860
This is kind of neat.


00:05:36.860 --> 00:05:39.320
I'm actually pulling in all of GenSim to get this.


00:05:39.320 --> 00:05:41.040
I don't know if I can pull in a little bits.


00:05:41.300 --> 00:05:45.740
But it's not really part of my application that I'm shipping.


00:05:45.740 --> 00:05:47.940
It's just a tool that I'm using on my laptop.


00:05:47.940 --> 00:05:52.180
So I guess downloading it once doesn't really bother me too much,


00:05:52.180 --> 00:05:53.460
even if it's a big thing.


00:05:53.460 --> 00:05:54.700
>> But cool. Yeah, I was thinking.


00:05:54.700 --> 00:05:56.100
>> Yeah, that's a good point.


00:05:56.100 --> 00:05:59.420
If it's running local, it's like a dev dependency, who cares?


00:05:59.420 --> 00:06:01.180
It's like worrying about how big pytest is.


00:06:01.180 --> 00:06:02.660
Like it doesn't really matter.


00:06:02.660 --> 00:06:05.220
>> And I'm not, well, I kind of care about that


00:06:05.220 --> 00:06:07.980
because CI is going to pull it in all the time for pytest.


00:06:07.980 --> 00:06:10.260
>> Yeah, but they got fast networks.


00:06:10.260 --> 00:06:11.100
- Yeah.


00:06:11.100 --> 00:06:11.920
(laughing)


00:06:11.920 --> 00:06:13.960
- It's not your bandwidth, it'll be all right.


00:06:13.960 --> 00:06:14.800
- Yeah, anyway.


00:06:14.800 --> 00:06:16.840
- One of the things that struck me about this


00:06:16.840 --> 00:06:19.260
that made me think of your situation is


00:06:19.260 --> 00:06:21.100
like that lowercase to Unicode


00:06:21.100 --> 00:06:24.140
in so many times in the security space,


00:06:24.140 --> 00:06:27.140
it's about like, you're checking for this representation,


00:06:27.140 --> 00:06:29.040
but what if there's another representation


00:06:29.040 --> 00:06:30.280
that means the same thing?


00:06:30.280 --> 00:06:31.620
Like you don't say go to this directory,


00:06:31.620 --> 00:06:33.180
you say go dot dot and then over there,


00:06:33.180 --> 00:06:37.000
you know, those kinds of non-canonical representations.


00:06:37.000 --> 00:06:39.660
I wonder if there's any use of this kind of stuff for you.


00:06:39.660 --> 00:06:42.860
Yeah, there's something I kind of touch on the pigment section later on, which


00:06:42.860 --> 00:06:47.740
like the attackers typically write scripted attacks and try to obfuscate


00:06:47.740 --> 00:06:52.060
code using a mix of upper case and putting random dots, I'm just thinking


00:06:52.060 --> 00:06:55.700
that'd be a nice, potentially a nice way of kind of cleaning some of that, that


00:06:55.700 --> 00:06:56.220
stuff up.


00:06:56.220 --> 00:06:57.300
Yeah, for sure.


00:06:57.300 --> 00:07:01.020
There was a, there's been some interesting supply chain vulnerability stuff.


00:07:01.020 --> 00:07:06.380
Remember, remember the guy with the color and I think the faker stuff in JavaScript


00:07:06.380 --> 00:07:09.740
that sabotaged his libraries.


00:07:09.740 --> 00:07:13.940
There was another one that maybe well-intentioned,


00:07:13.940 --> 00:07:17.060
I don't know, it was some open source library,


00:07:17.060 --> 00:07:19.300
I don't believe it was Python, I can't remember what it was.


00:07:19.300 --> 00:07:21.900
It could have been, I'm pretty sure it was in JavaScript


00:07:21.900 --> 00:07:23.900
'cause that's where all, most of the bad stuff was,


00:07:23.900 --> 00:07:27.020
it seems, anyway, they wrote their,


00:07:27.020 --> 00:07:32.020
they taught their dependency to erase everybody's hard drive


00:07:32.020 --> 00:07:35.200
who installed it, who was in Belarus and Russia,


00:07:35.200 --> 00:07:37.300
which, okay, maybe they're trying to contribute,


00:07:37.300 --> 00:07:39.560
but it ended up doing a bunch of bad things,


00:07:39.560 --> 00:07:41.760
even to places that were trying to help,


00:07:41.760 --> 00:07:44.680
say, people in the press and journalists


00:07:44.680 --> 00:07:47.700
do certain things and connect with sources


00:07:47.700 --> 00:07:49.600
and interrace that database as well.


00:07:49.600 --> 00:07:53.560
And what they did to make it so that nobody would notice


00:07:53.560 --> 00:07:56.600
in the GitHub commit before it went out to NPM


00:07:56.600 --> 00:07:59.120
was base64 encode their changes.


00:07:59.120 --> 00:08:01.600
So they basically put a base64 encoded string


00:08:01.600 --> 00:08:04.040
and then decode and then run that.


00:08:04.040 --> 00:08:05.120
It's like that kind of stuff.


00:08:05.120 --> 00:08:10.600
I know this won't solve that problem, but that sort of category of like weird representations.


00:08:10.600 --> 00:08:11.600
Yeah.


00:08:11.600 --> 00:08:12.600
You need mystic pie for something like that.


00:08:12.600 --> 00:08:18.000
It's one of the things we, yeah, it's a common thing, kind of basics before decoding, before


00:08:18.000 --> 00:08:19.000
the obfuscating.


00:08:19.000 --> 00:08:20.000
Yeah.


00:08:20.000 --> 00:08:21.000
Yeah.


00:08:21.000 --> 00:08:22.000
Interesting.


00:08:22.000 --> 00:08:23.000
Yeah.


00:08:23.000 --> 00:08:25.960
I thought of maybe using something like that with, because one of the problems we have


00:08:25.960 --> 00:08:29.000
is like every script is kind of slightly different.


00:08:29.000 --> 00:08:35.040
If you could use something like that to essentially kind of apply like sentiment analysis to script


00:08:35.040 --> 00:08:36.120
I mean, this is a big problem.


00:08:36.120 --> 00:08:37.920
This is not something I've particularly solved.


00:08:37.920 --> 00:08:42.080
Um, but that might be a kind of useful, useful thing to just picking out certain


00:08:42.080 --> 00:08:46.400
things that indicates malicious, like format, you know, format drive.


00:08:46.400 --> 00:08:48.440
Exactly.


00:08:48.440 --> 00:08:48.860
Yeah.


00:08:48.860 --> 00:08:51.660
You could certainly represent like this one does hard drive stuff.


00:08:51.660 --> 00:08:53.580
Is this, I thought it was parsing colors.


00:08:53.580 --> 00:08:55.120
Why is it doing things with the hard drive?


00:08:55.120 --> 00:08:57.740
This is odd, you know, like, or with the network, stuff like that.


00:08:57.740 --> 00:08:58.200
Cool.


00:08:58.200 --> 00:08:58.840
All right.


00:08:58.840 --> 00:09:02.480
Well, you know what you would really want to check out if you were trying to


00:09:02.480 --> 00:09:04.280
research these things, probably documentation.


00:09:04.520 --> 00:09:07.760
So I want to tell you all about DevDocs, devdocs.io.


00:09:07.760 --> 00:09:08.720
This is pretty cool.


00:09:08.720 --> 00:09:11.360
Now, when you get there, it's an interesting,


00:09:11.360 --> 00:09:14.240
on my Firefox, it's just got like the mobile view,


00:09:14.240 --> 00:09:15.440
which is really odd.


00:09:15.440 --> 00:09:17.640
If you go there with a full browser,


00:09:17.640 --> 00:09:19.820
it's what it believes is a full browser, I guess.


00:09:19.820 --> 00:09:21.000
It's like a slightly different view


00:09:21.000 --> 00:09:23.000
that's pretty similar, but not the same.


00:09:23.000 --> 00:09:25.940
So there's, if you open up a whole bunch


00:09:25.940 --> 00:09:28.240
of programming technologies, let's say,


00:09:28.240 --> 00:09:31.200
not just Python or JavaScript or something,


00:09:31.200 --> 00:09:33.060
but there's also Vue.js.


00:09:33.060 --> 00:09:35.100
There's Vexoic, for example,


00:09:35.100 --> 00:09:36.580
like some of the foundation of Flash,


00:09:36.580 --> 00:09:39.060
and you can pick the particular versions and stuff.


00:09:39.060 --> 00:09:41.340
You can go and like enable these different things.


00:09:41.340 --> 00:09:42.840
So maybe I care about view,


00:09:42.840 --> 00:09:44.860
I can go over here and enable that one.


00:09:44.860 --> 00:09:46.660
Let's, we definitely want some Python.


00:09:46.660 --> 00:09:48.140
Let me go find some Python.


00:09:48.140 --> 00:09:50.340
It gives you all the versions, I'll pick that.


00:09:50.340 --> 00:09:53.020
And let's say I'm also working with Postgres,


00:09:53.020 --> 00:09:54.700
so I'll enable that documentation.


00:09:54.700 --> 00:09:57.540
And then I might be working with Nginx for the front end,


00:09:57.540 --> 00:10:00.580
which is somewhere right here.


00:10:00.580 --> 00:10:02.060
So you can go enable that.


00:10:02.060 --> 00:10:05.800
And then it will be up near the top somewhere here.


00:10:05.800 --> 00:10:07.820
You can see these are either the default ones


00:10:07.820 --> 00:10:08.900
or the ones that I checked on.


00:10:08.900 --> 00:10:10.180
So then you can open them up and say,


00:10:10.180 --> 00:10:15.100
I wanna go and see the Nginx guide about a debugging log.


00:10:15.100 --> 00:10:17.380
And then it takes you to the documentation


00:10:17.380 --> 00:10:18.980
for that technology.


00:10:18.980 --> 00:10:22.100
So it's like a meta documentation repository


00:10:22.100 --> 00:10:23.780
for all of these things all at once,


00:10:23.780 --> 00:10:25.260
which is pretty cool, right?


00:10:25.260 --> 00:10:26.520
So I can go up here and search.


00:10:26.520 --> 00:10:28.420
I wanna know about like,


00:10:28.420 --> 00:10:30.620
let's go about like media tags or something.


00:10:30.620 --> 00:10:33.020
So you can see the stuff in HTML5,


00:10:33.020 --> 00:10:35.020
you can see the stuff in,


00:10:35.020 --> 00:10:36.700
when you say media, it looks like median.


00:10:36.700 --> 00:10:39.820
So you can see that in the statistics module for Python,


00:10:39.820 --> 00:10:42.260
some stuff for CSS,


00:10:42.260 --> 00:10:43.100
or you could come over here and say,


00:10:43.100 --> 00:10:45.620
like, I just want to search for CSS.


00:10:45.620 --> 00:10:47.700
And then you get like using media queries


00:10:47.700 --> 00:10:49.040
and how to do that kind of stuff.


00:10:49.040 --> 00:10:50.420
So it's kind of a,


00:10:50.420 --> 00:10:52.040
what you do is you turn on the pieces


00:10:52.040 --> 00:10:53.180
that are relevant to you,


00:10:53.180 --> 00:10:55.700
and then you can search across those technologies.


00:10:55.700 --> 00:10:56.540
Cool, right?


00:10:56.540 --> 00:10:57.820
- Mm-mm, wow.


00:10:57.820 --> 00:11:00.660
- Yeah, and then if you're on the move,


00:11:00.660 --> 00:11:04.860
you can come over here and turn on offline data,


00:11:04.860 --> 00:11:07.900
and it'll download all of that as an app


00:11:07.900 --> 00:11:09.820
so that then you're at the coffee shop


00:11:09.820 --> 00:11:11.780
and you're playing, you now have all the documentation


00:11:11.780 --> 00:11:15.180
for Python 3.10, Vue.js, Verix, Zoid, Nginx,


00:11:15.180 --> 00:11:17.300
et cetera, et cetera, that you can use,


00:11:17.300 --> 00:11:18.420
which is pretty cool.


00:11:18.420 --> 00:11:22.100
And this is something that drives me crazy about Firefox.


00:11:22.100 --> 00:11:23.380
They had it and they took it away,


00:11:23.380 --> 00:11:24.700
and I don't understand why,


00:11:24.700 --> 00:11:28.780
So they took away the ability to do progressive web apps in Firefox, but


00:11:28.780 --> 00:11:30.460
all the Chromium browsers support it.


00:11:30.460 --> 00:11:35.100
So you can actually go and install this as a dedicated application on your system.


00:11:35.100 --> 00:11:38.020
So you, if you have no web, you just click that open.


00:11:38.020 --> 00:11:38.940
It's its own window.


00:11:38.940 --> 00:11:42.820
You can up, you know, alt tab, command tab between it's super easy.


00:11:42.820 --> 00:11:44.980
And then turn on the offline mode.


00:11:44.980 --> 00:11:48.340
And you basically have an app that has offline documentation for all the


00:11:48.340 --> 00:11:50.020
programming technologies that you care about.


00:11:50.020 --> 00:11:51.940
So, so that's, that's a great point.


00:11:51.940 --> 00:11:53.940
programming technologies that you care about.


00:11:53.940 --> 00:11:54.780
- So this is our way to--


00:11:54.780 --> 00:11:56.740
- So this is my new coffee shop buddy.


00:11:56.740 --> 00:11:59.220
- Is the search go across the thing you've selected then?


00:11:59.220 --> 00:12:01.420
So if I search for like replace or something,


00:12:01.420 --> 00:12:03.700
it's the things I've selected?


00:12:03.700 --> 00:12:05.940
- Yeah, so if you turn on like JavaScript and Python,


00:12:05.940 --> 00:12:08.420
it would look for that in both languages.


00:12:08.420 --> 00:12:09.260
- Oh, okay.


00:12:09.260 --> 00:12:10.900
- Yeah, so basically the ones you turn on,


00:12:10.900 --> 00:12:11.900
there's a ton of them, right?


00:12:11.900 --> 00:12:13.860
And you pick, you say, these are interesting to me,


00:12:13.860 --> 00:12:16.060
and then search and stuff, from what I can tell,


00:12:16.060 --> 00:12:18.980
only applies to the technologies you say you care about.


00:12:18.980 --> 00:12:20.900
'Cause like if you don't use Java,


00:12:20.900 --> 00:12:22.340
you really don't wanna see the documentation


00:12:22.340 --> 00:12:23.300
for Java search, right?


00:12:23.300 --> 00:12:24.340
That would be useless.


00:12:24.340 --> 00:12:25.540
- Yeah, one of the things I like about this


00:12:25.540 --> 00:12:26.900
is it also has versions.


00:12:26.900 --> 00:12:30.820
So if you're using an older version of Postgres,


00:12:30.820 --> 00:12:33.380
you can just enable that version.


00:12:33.380 --> 00:12:34.220
- Right.


00:12:34.220 --> 00:12:35.700
Sometimes it doesn't matter very much,


00:12:35.700 --> 00:12:37.400
but other times it matters massively.


00:12:37.400 --> 00:12:39.820
Like Bootstrap 3 and Bootstrap 5,


00:12:39.820 --> 00:12:41.620
they're fully incompatible, basically.


00:12:41.620 --> 00:12:44.780
Like they're totally different keywords and grid systems,


00:12:44.780 --> 00:12:46.260
and you don't want just the latest


00:12:46.260 --> 00:12:47.860
if you've got an old app you're working on,


00:12:47.860 --> 00:12:48.740
something like that.


00:12:48.740 --> 00:12:51.660
Python's more forgiving about that kind of stuff,


00:12:51.660 --> 00:12:53.100
but it doesn't break as often.


00:12:53.100 --> 00:12:55.440
- I was amused that the list though is,


00:12:55.440 --> 00:13:00.060
it has like three, nine, three, eight for Python,


00:13:00.060 --> 00:13:01.540
and it has three, 10 at the bottom


00:13:01.540 --> 00:13:03.500
because one is obviously--


00:13:03.500 --> 00:13:05.860
- 'Cause it's alphabetically sorted, how interesting.


00:13:05.860 --> 00:13:07.060
(laughing)


00:13:07.060 --> 00:13:08.420
Ian, what do you think of this?


00:13:08.420 --> 00:13:10.020
- That's very cool, I'm amazed.


00:13:10.020 --> 00:13:12.780
Is somebody at DevDocs kind of manually maintaining


00:13:12.780 --> 00:13:14.080
all of the links to these,


00:13:14.080 --> 00:13:17.460
like the original source documentation?


00:13:17.460 --> 00:13:19.180
>> Yeah, where are they getting it from, right?


00:13:19.180 --> 00:13:21.380
Because they're super desperate.


00:13:21.380 --> 00:13:24.620
It's like Matplotlib and Markdown and MariaDB,


00:13:24.620 --> 00:13:28.220
it's unlikely they're all stored in the same basic system.


00:13:28.220 --> 00:13:30.220
I don't know how they get them actually.


00:13:30.220 --> 00:13:32.900
>> Yeah, that's very cool. I normally have solved


00:13:32.900 --> 00:13:35.180
the same problem by having 130 tabs


00:13:35.180 --> 00:13:38.580
open to different bits of Python docs and pandas.


00:13:38.580 --> 00:13:42.940
>> Exactly. Yeah, I'm pretty sure they got pandas in here.


00:13:42.940 --> 00:13:44.860
They got NumPy as its own thing.


00:13:44.860 --> 00:13:46.260
Then we saw Matplotlib,


00:13:46.260 --> 00:13:50.220
There's pandas and there's even versions of pandas across there.


00:13:50.220 --> 00:13:52.140
Single tab solution.


00:13:52.140 --> 00:13:52.780
Brilliant.


00:13:52.780 --> 00:13:53.340
Yeah.


00:13:53.340 --> 00:13:55.300
It looks, looks pretty good to me.


00:13:55.300 --> 00:13:56.060
All right.


00:13:56.060 --> 00:13:58.300
You want to tell us about what you got for your first item?


00:13:58.300 --> 00:13:59.540
Okay, sure.


00:13:59.540 --> 00:13:59.740
Yeah.


00:13:59.740 --> 00:14:05.260
Um, so, as I mentioned earlier, I own a package called mystic pie.


00:14:05.260 --> 00:14:08.460
Um, and first thing to sort out with it is the spelling.


00:14:08.460 --> 00:14:12.900
Cause I suffer from this on a daily basis, mistyping it, even though I've


00:14:12.900 --> 00:14:14.500
owned it for like three or four years.


00:14:14.780 --> 00:14:19.020
So it's MSTIC, Standard for Microsoft Threat Intelligence Center.


00:14:19.020 --> 00:14:20.780
There's no Y or anything like that in there.


00:14:20.780 --> 00:14:26.060
So it's a tool set for cybersecurity investigations and hunting in


00:14:26.060 --> 00:14:28.380
Python, mainly in Jupyter notebooks.


00:14:28.380 --> 00:14:31.180
So there are a couple of questions to ask about that.


00:14:31.180 --> 00:14:35.900
So firstly, what is cybersecurity hunting and investigation and


00:14:35.900 --> 00:14:37.780
why are Jupyter notebooks useful?


00:14:37.780 --> 00:14:42.940
So the first one, CyberSec investigation is really responding to alerts or


00:14:42.940 --> 00:14:47.020
other kinds of threat intelligence and trawling through typically large amounts


00:14:47.020 --> 00:14:52.220
of security logs from cloud services, hosts, account services to determine


00:14:52.220 --> 00:14:53.700
whether this is a real threat or not.


00:14:53.700 --> 00:14:55.100
And there were two main kind of.


00:14:55.100 --> 00:14:56.680
>> That's one of the huge problems, right?


00:14:56.680 --> 00:14:59.140
Is you've got all these different systems.


00:14:59.140 --> 00:15:02.540
How are you going to know if someone, if you don't have a tool like this, how


00:15:02.540 --> 00:15:05.440
are you going to know that something, someone's in there rooting around?


00:15:05.440 --> 00:15:05.740
Right?


00:15:05.740 --> 00:15:06.340
>> Yeah.


00:15:06.340 --> 00:15:06.920
Yeah.


00:15:06.920 --> 00:15:10.900
And there are a couple of things that usually trigger this kind of search.


00:15:10.900 --> 00:15:17.980
So one of them is an alert may be coming from your SIEM and that stands for security information


00:15:17.980 --> 00:15:18.980
event management.


00:15:18.980 --> 00:15:24.800
So it's like a console, like ArcSight is a traditional one or Microsoft Sentinel is a


00:15:24.800 --> 00:15:25.800
cloud-based one.


00:15:25.800 --> 00:15:30.940
So you get an alert based on a rule and you need to go in a fairly managed process.


00:15:30.940 --> 00:15:34.780
Somebody needs to go and investigate, is this a real threat or is this just noise?


00:15:34.780 --> 00:15:38.720
Or there might be something like the solar winds, they never were a year ago, the log


00:15:38.720 --> 00:15:45.120
4J, like something in the press or something from a threat intel kind of alert that says


00:15:45.120 --> 00:15:46.760
this kind of threat is around.


00:15:46.760 --> 00:15:52.740
And that's a more ad hoc process, kind of hunting, like, do we see this in our organization?


00:15:52.740 --> 00:15:57.840
So that's kind of what Mystic Pi is trying to address the needs of that.


00:15:57.840 --> 00:16:00.060
And the second question is why Jupyter Notebooks?


00:16:00.060 --> 00:16:04.360
Why would you do any Jupyter Notebook rather than in your existing SOC tools?


00:16:04.360 --> 00:16:08.280
I mean, I think there's a lot in common.


00:16:08.280 --> 00:16:15.300
This kind of activity is a lot in common with like big science data, sorry, big data science.


00:16:15.300 --> 00:16:19.240
Something like astronomy where you're kind of hunting for an adversary activity is a


00:16:19.240 --> 00:16:24.360
little bit like trying to find an exoplanet in kind of gigabytes of data or a new quasar


00:16:24.360 --> 00:16:25.360
or something like that.


00:16:25.360 --> 00:16:26.360
Yeah.


00:16:26.360 --> 00:16:30.600
A hundred thousand stars or a hundred thousand lines of log file and you're hunting for some


00:16:30.600 --> 00:16:31.600
patterns and stuff, right?


00:16:31.600 --> 00:16:34.840
And you've got a few photons you're trying to determine, all these kind of different,


00:16:34.840 --> 00:16:37.920
you know, something like adversary activity is a little bit like that.


00:16:37.920 --> 00:16:42.340
like millions and millions of events and you're trying to find the bad stuff.


00:16:42.340 --> 00:16:45.480
So traditional SOC tools are kind of, you know, can be really excellent.


00:16:45.480 --> 00:16:49.880
And I work with one that I think is really good, but they all have limitations.


00:16:49.880 --> 00:16:52.160
But a SOC tool.


00:16:52.160 --> 00:16:53.160
A SOC tool, yeah.


00:16:53.160 --> 00:16:55.080
So, SOC, Security Operations Center.


00:16:55.080 --> 00:17:02.960
So something like a console that fires alerts and tells you that you have a bunch of analysts,


00:17:02.960 --> 00:17:06.920
engineers looking at this output of this and deciding, and that's the trigger for their


00:17:06.920 --> 00:17:11.720
investigations. They're like, is it like failed login to SQL server? Yeah, something like


00:17:11.720 --> 00:17:16.840
that. Or, you know, it could be a more sophisticated thing like, something's exit, you know,


00:17:16.840 --> 00:17:20.520
trying to access the kind of password data on this. It looks like it's trying to access


00:17:20.520 --> 00:17:27.480
password data on this host or, or has made a weird kind of configuration change to a


00:17:27.480 --> 00:17:32.720
mailbox settings. So all those kinds of things can kind of trigger alerts and investigations.


00:17:32.720 --> 00:17:38.520
But you are limited in most kind of operation center environments.


00:17:38.520 --> 00:17:41.520
Notebooks allow you to kind of break out of some of the constraints of that.


00:17:41.520 --> 00:17:44.920
So firstly, you can get data from anywhere.


00:17:44.920 --> 00:17:46.840
You're not just limited by kind of what's in your logs.


00:17:46.840 --> 00:17:50.960
You could go to virus total, or so you can bring data from anywhere.


00:17:50.960 --> 00:17:54.920
You can use customized kind of analysis.


00:17:54.920 --> 00:17:57.400
So write your own or get things from PyPI.


00:17:57.400 --> 00:18:00.040
Lots of people have kind of written this stuff.


00:18:00.040 --> 00:18:03.780
You control the workflow, so you don't have to follow what the tool says.


00:18:03.780 --> 00:18:07.580
You can reorder things, you can backtrack, redo things.


00:18:07.580 --> 00:18:08.580
And the workflow is repeatable.


00:18:08.580 --> 00:18:15.740
So if you get a similar issue again, or similar kind of alert, you can fish out an old notebook


00:18:15.740 --> 00:18:18.580
and rerun the same kind of analysis.


00:18:18.580 --> 00:18:23.900
And you end up with a nice kind of shareable document that describes your investigation


00:18:23.900 --> 00:18:26.420
a bit like the results of a scientific investigation.


00:18:26.420 --> 00:18:29.780
It's like, "Here are all the steps I took, and these are the results, and this is what


00:18:29.780 --> 00:18:33.540
they, this is what we determined to be the bad, you know, the bad activity.


00:18:33.540 --> 00:18:34.260
Right.


00:18:34.260 --> 00:18:37.460
The other thing that seems useful here is Jupyter.


00:18:37.460 --> 00:18:42.900
Often the notebooks will save the last bit of computed information, and then you can


00:18:42.900 --> 00:18:47.060
go, you know, change a cell, ask the question again, without rerunning the whole


00:18:47.060 --> 00:18:47.380
thing.


00:18:47.380 --> 00:18:52.300
And like that's parsing tons of logs or pulling them over SSH or whatever that


00:18:52.300 --> 00:18:54.060
not doing that again is nice.


00:18:54.060 --> 00:18:54.540
Yeah.


00:18:54.540 --> 00:18:57.660
And it's brilliant if you don't like doing lots of queries in different browser


00:18:57.660 --> 00:19:00.820
tabs and your browser crashes, they've all gone.


00:19:00.820 --> 00:19:01.820
What do you do?


00:19:01.820 --> 00:19:03.980
It's all in a Jupyter notebook.


00:19:03.980 --> 00:19:07.420
I say, it's like second by second after you do it, you can just go back and you can go


00:19:07.420 --> 00:19:09.740
back to things like you may have done months ago.


00:19:09.740 --> 00:19:10.740
So.


00:19:10.740 --> 00:19:11.740
Yeah, absolutely.


00:19:11.740 --> 00:19:12.740
Yeah.


00:19:12.740 --> 00:19:17.680
So, so when I started all of this, I kind of thought a lot of this stuff for cyber investigations


00:19:17.680 --> 00:19:19.180
would be available on PyPI.


00:19:19.180 --> 00:19:21.980
I thought, great Jupyter notebook seemed like brilliant.


00:19:21.980 --> 00:19:25.300
And there's going to be process tree viewer and there's going to be an event timeline


00:19:25.300 --> 00:19:26.300
and all this kind of stuff.


00:19:26.300 --> 00:19:31.100
And I found out there wasn't, at least I couldn't find it.


00:19:31.100 --> 00:19:35.980
So I decided to stop, maybe we need to start writing this stuff.


00:19:35.980 --> 00:19:40.460
So it turns out that things like visualizations you need for detecting exoplanets are a bit


00:19:40.460 --> 00:19:45.380
different from ones you need to detect bad actors.


00:19:45.380 --> 00:19:49.500
So we started building this thing, originally me, but there's now Pete Bryan and Ashwin


00:19:49.500 --> 00:19:56.400
I'm also kind of working on it to my colleagues and a bunch of people in the community.


00:19:56.400 --> 00:19:58.880
It's got four main functional sections.


00:19:58.880 --> 00:20:03.760
It's like data querying, how you get data in, how you do templated queries.


00:20:03.760 --> 00:20:04.760
There's enrichment.


00:20:04.760 --> 00:20:09.500
So, for example, if you have something like an IP address, you might have a bunch of questions


00:20:09.500 --> 00:20:14.520
about it as an analyst, like which geographical location is this IP address from?


00:20:14.520 --> 00:20:17.000
Does it have any malware reports about it?


00:20:17.000 --> 00:20:22.360
Third area is analysis, so things like anomaly identification, like the thing you've been


00:20:22.360 --> 00:20:27.400
talking about, a spike in failed logon events, unusual spike in failed logon events, that


00:20:27.400 --> 00:20:28.400
kind of thing.


00:20:28.400 --> 00:20:32.040
The final area is visualizations, and these are more specialized.


00:20:32.040 --> 00:20:34.560
I've got a couple of examples in the show notes.


00:20:34.560 --> 00:20:38.120
This is like an anomaly identification pattern.


00:20:38.120 --> 00:20:45.080
This is one of the custom, we use Boca, which is a really nice visualization package to


00:20:45.080 --> 00:20:50.600
allow you to kind of view data in a way that analyst kind of expects you to see it.


00:20:50.600 --> 00:20:54.400
So the more this kind of visualization and more traditional kind of graphs.


00:20:54.400 --> 00:20:59.040
I would much rather look at this than log files or event logs or whatever, you know?


00:20:59.040 --> 00:21:00.040
Yeah.


00:21:00.040 --> 00:21:02.920
That's the whole thing about, you know, you may have thousands of events and you need


00:21:02.920 --> 00:21:08.180
to get down to the few that are the interesting, the interesting thing.


00:21:08.180 --> 00:21:12.000
So one of the areas that we've, we try to focus on currently, cause we wrote all this


00:21:12.000 --> 00:21:16.640
stuff and you have like hundreds of functions that you could use, but it's


00:21:16.640 --> 00:21:18.300
kind of difficult to discover them.


00:21:18.300 --> 00:21:21.240
And they all, cause they evolved a little bit organically.


00:21:21.240 --> 00:21:25.380
Like, how do you, they'll work in a little bit of a different way,


00:21:25.380 --> 00:21:26.640
different set of parameters.


00:21:26.640 --> 00:21:29.260
So the work we're currently doing is trying to make this


00:21:29.260 --> 00:21:30.420
all a bit more accessible.


00:21:30.420 --> 00:21:35.020
So all of the functions that relate to say an IP address, all the questions


00:21:35.020 --> 00:21:39.780
you want to ask about it, kind of dynamically attached to a class called IP


00:21:39.780 --> 00:21:40.380
address.


00:21:40.380 --> 00:21:41.700
So they're all like things like.


00:21:41.700 --> 00:21:42.380
Oh, interesting.


00:21:42.380 --> 00:21:46.820
Do, do you don't have to work just with a raw string or just some raw IP


00:21:46.820 --> 00:21:49.900
representation, but you can ask it questions like its location?


00:21:49.900 --> 00:21:51.620
Well, it's not quite that intelligent.


00:21:51.620 --> 00:21:57.180
So even a bit less intelligent than Alexa, but, but it's, but it's more like,


00:21:57.180 --> 00:22:01.380
you know, there might be things like geolocation of an IP address, threat


00:22:01.380 --> 00:22:07.540
intel lookups, different queries that might be have IP addresses like a parameter.


00:22:07.840 --> 00:22:11.880
And previously you'd have to go and find all of these things and import them


00:22:11.880 --> 00:22:13.120
separately and run them.


00:22:13.120 --> 00:22:17.080
But now they're all kind of dynamically attached as methods to the fact that


00:22:17.080 --> 00:22:21.560
use IP address as a parameter means that you just have one object to import, and


00:22:21.560 --> 00:22:25.320
then you can do all of these different operations on this single item.


00:22:25.320 --> 00:22:27.880
There's some things that don't work with that.


00:22:27.880 --> 00:22:31.800
Some things like the visualizations, for example, they're not IP address


00:22:31.800 --> 00:22:33.680
or host or account specific.


00:22:33.680 --> 00:22:35.640
They work on big blocks of data.


00:22:35.960 --> 00:22:40.880
So the other area we're working on is try to, anything that takes a bunch of data as


00:22:40.880 --> 00:22:44.120
an input, we're writing those as pandas accessors.


00:22:44.120 --> 00:22:47.360
So they appear as methods to a data frame.


00:22:47.360 --> 00:22:53.040
So you do kind of data frame dot MP plot dot timeline, and it would produce your


00:22:53.040 --> 00:22:54.840
timeline as long as it's the right kind of data.


00:22:54.840 --> 00:22:59.640
So yeah, that's one of the challenges of writing this kind of thing organically is


00:22:59.640 --> 00:23:03.480
you end up with a lot of stuff, but nobody knows it's there and nobody knows how to


00:23:03.480 --> 00:23:08.680
import it. So try to make it as accessible so that it just becomes a very intuitive thing.


00:23:08.680 --> 00:23:13.160
Oh, I have an IP address. What functions can I do? I could do this. You know, it's all


00:23:13.160 --> 00:23:14.920
tab completable, that kind of thing.


00:23:14.920 --> 00:23:19.240
Yeah, I think it's really cool. You've taken this Python data stack view of


00:23:19.240 --> 00:23:22.040
cybersecurity and threat detection.


00:23:22.040 --> 00:23:22.520
Yeah.


00:23:22.520 --> 00:23:23.240
Yeah. Brian, what do you think?


00:23:23.240 --> 00:23:29.560
Well, it's definitely a complicated area. And it trying to, one of the things I like


00:23:29.560 --> 00:23:35.480
about this story is just talking about the complexities in API design and discoverability


00:23:35.480 --> 00:23:38.840
that applies to lots of different fields.


00:23:38.840 --> 00:23:42.680
Yeah, it's one of those things you should have thought about at the beginning, but even


00:23:42.680 --> 00:23:46.480
at the end you can tidy things up.


00:23:46.480 --> 00:23:50.600
Famous last words.


00:23:50.600 --> 00:23:55.240
So yeah, we're definitely open for other people collaborating, contributing stuff, because


00:23:55.240 --> 00:23:57.320
there's a lot of ground to cover.


00:23:57.320 --> 00:23:58.720
Yeah, for sure.


00:23:58.720 --> 00:24:00.840
It's on GitHub, I saw.


00:24:00.840 --> 00:24:02.720
One final question before we move on.


00:24:02.720 --> 00:24:08.360
Is it just for Azure or is this a thing that more broadly works across different systems?


00:24:08.360 --> 00:24:10.840
>> No, I think I should have mentioned that a little bit earlier on.


00:24:10.840 --> 00:24:16.160
We recently built it for Microsoft Sentinel notebooks, but it supports like Splunk, Defender,


00:24:16.160 --> 00:24:19.280
we're working on Elastic, Provider.


00:24:19.280 --> 00:24:24.200
So really anything you can get into a Pandas data frame, you can use most of the functionality.


00:24:24.200 --> 00:24:27.600
So even if we don't have a provider ourselves,


00:24:27.600 --> 00:24:29.840
if you've got something like PySpark


00:24:29.840 --> 00:24:30.920
and you can get a data frame,


00:24:30.920 --> 00:24:34.180
then all of our functions take data frame.


00:24:34.180 --> 00:24:37.720
We use pandas as our universal data interchange format.


00:24:37.720 --> 00:24:39.800
- Yeah, indeed, indeed.


00:24:39.800 --> 00:24:42.200
Kim Van Wick out in the audience likes it.


00:24:42.200 --> 00:24:45.680
It's way like a much nicer way to glean info


00:24:45.680 --> 00:24:47.120
in logs and complex script.


00:24:47.120 --> 00:24:48.680
I'm right there with you.


00:24:48.680 --> 00:24:50.600
All right, now, before we move on, Brian,


00:24:50.600 --> 00:24:54.040
let me tell you about our sponsor for this episode.


00:24:54.040 --> 00:24:57.320
This episode of Python Bytes is brought to you by FusionAuth.


00:24:57.320 --> 00:25:00.680
FusionAuth is an authentication and authorization platform


00:25:00.680 --> 00:25:02.840
built by devs for devs.


00:25:02.840 --> 00:25:05.880
It solves the problem of building essential user security


00:25:05.880 --> 00:25:07.940
without adding risk or distracting


00:25:07.940 --> 00:25:09.600
from the primary application.


00:25:09.600 --> 00:25:11.660
FusionAuth has all the features you need


00:25:11.660 --> 00:25:14.520
with great support and a price that won't break the bank.


00:25:14.520 --> 00:25:16.440
And you can either self-host it


00:25:16.440 --> 00:25:18.360
or get the fully managed solution


00:25:18.360 --> 00:25:20.840
hosted in any AWS region.


00:25:20.840 --> 00:25:23.040
Do you have a side project that needs custom login


00:25:23.040 --> 00:25:25.440
and registration, multi-factor authentication,


00:25:25.440 --> 00:25:27.600
social logins, or user management,


00:25:27.600 --> 00:25:30.720
download Fusion Auth Community Edition for free.


00:25:30.720 --> 00:25:33.280
The best part is you get unlimited users


00:25:33.280 --> 00:25:36.240
and there's no credit card or subscription required.


00:25:36.240 --> 00:25:40.680
Learn more and get started at pythonbytes.fm/fusionauth.


00:25:40.680 --> 00:25:42.000
The link's in your show notes.


00:25:42.000 --> 00:25:44.440
Thank you to Fusion Auth for supporting the show.


00:25:44.440 --> 00:25:46.600
All right, what do you got for your next one, Brian?


00:25:46.600 --> 00:25:49.320
Numbers, something every computer scientist should know.


00:25:49.320 --> 00:25:50.640
- Yes, floating point.


00:25:50.640 --> 00:25:52.440
Arithmetic is complicated.


00:25:52.440 --> 00:25:57.640
When I started working professionally,


00:25:57.640 --> 00:26:01.120
one of the things that was recommended reading was an article called,


00:26:01.120 --> 00:26:05.200
"What Every Computer Scientist Should Know About Floating-Point Arithmetic."


00:26:05.200 --> 00:26:09.480
Don't worry, it's only a really long paper with lots of math.


00:26:09.480 --> 00:26:12.300
I am not telling you to read this,


00:26:12.300 --> 00:26:14.340
although it is an interesting read.


00:26:14.340 --> 00:26:18.360
What I would like you to read is this article by David Amos,


00:26:18.360 --> 00:26:20.860
called "The Right Way to Compare Floats in Python."


00:26:20.860 --> 00:26:25.980
because there's a few things that we need to know about floats when we're using them and floating


00:26:25.980 --> 00:26:31.740
points is, and he covers all of this in the article without going through tons of scary math,


00:26:31.740 --> 00:26:37.420
is the floating point numbers have to be represented in a way that the computer can


00:26:37.420 --> 00:26:44.060
store them and use them and manipulate them even though some numbers are huge and won't fit


00:26:44.060 --> 00:26:49.260
normally. So we have to do things like accept that there's error and rounding. So there's a little


00:26:49.260 --> 00:26:54.300
bit of a discussion there that he talks about. One of the things that surprises people sometimes


00:26:54.300 --> 00:26:59.980
when they first come into Python, but it's not just Python, it's most languages, is somewhere


00:26:59.980 --> 00:27:07.420
there's going to be something obvious that doesn't work. Like in David's example, 0.1 plus 0.2


00:27:07.420 --> 00:27:16.300
equals or comparison equals 0.3 and that will show up as false because they don't. And this is weird,


00:27:16.300 --> 00:27:17.940
They obviously are equal.


00:27:17.940 --> 00:27:20.340
>> So crazy that that doesn't work.


00:27:20.340 --> 00:27:21.900
>> But it's not just equals.


00:27:21.900 --> 00:27:25.900
You can also do comparisons like less than or greater than.


00:27:25.900 --> 00:27:28.380
Not only are they not equal,


00:27:28.380 --> 00:27:33.700
they're not like 0.1 plus 0.2 is not even less than or equal to 0.3.


00:27:33.700 --> 00:27:38.260
It's weird. What do you do?


00:27:38.260 --> 00:27:41.820
The gist of it is don't compare things with


00:27:41.820 --> 00:27:45.620
normal math comparisons if there's floating points involved.


00:27:45.620 --> 00:27:48.580
So what you want to do instead is,


00:27:48.580 --> 00:27:50.980
and here's a little tiny bit of math,


00:27:50.980 --> 00:27:53.820
way less than the example.


00:27:53.820 --> 00:27:55.180
- The thesis, the dissertation.


00:27:55.180 --> 00:27:56.220
- Yeah.


00:27:56.220 --> 00:27:58.540
So there's a whole bunch of stuff built into Python


00:27:58.540 --> 00:28:02.900
that you can, to work with comparisons.


00:28:02.900 --> 00:28:05.800
And one of the most common ones I'm trying to get there


00:28:05.800 --> 00:28:07.700
is math is close.


00:28:07.700 --> 00:28:09.860
So there's a math library that's,


00:28:09.860 --> 00:28:11.680
that with an is close function,


00:28:11.680 --> 00:28:13.700
that it's used to just say,


00:28:13.700 --> 00:28:16.900
"Hey, I've got two values, are these close, close enough?"


00:28:16.900 --> 00:28:22.660
And if you're using, if you have to compare floats,


00:28:22.660 --> 00:28:24.740
something like this is great.


00:28:24.740 --> 00:28:27.020
And underneath the scene, behind the scenes,


00:28:27.020 --> 00:28:29.880
what it does is it's taking the two values


00:28:29.880 --> 00:28:33.400
and subtracting them and figuring out if the delta is,


00:28:33.400 --> 00:28:37.580
or the absolute value of the delta is below some tolerance,


00:28:37.580 --> 00:28:39.860
some reasonable tolerance, like close enough.


00:28:39.860 --> 00:28:41.700
And what that tolerance is,


00:28:41.700 --> 00:28:44.540
is either a relative or absolute tolerance.


00:28:44.540 --> 00:28:48.000
And most of the time you can kind of get away


00:28:48.000 --> 00:28:49.040
with not caring about that,


00:28:49.040 --> 00:28:51.280
but if you do care about it, you can control that.


00:28:51.280 --> 00:28:53.740
You can pass in what tolerance you expect


00:28:53.740 --> 00:28:55.120
things to be closer to.


00:28:55.120 --> 00:28:58.640
I use stuff like this all the time with test equipment


00:28:58.640 --> 00:29:01.620
because I definitely want to know control


00:29:01.620 --> 00:29:03.240
over the tolerance levels.


00:29:03.240 --> 00:29:04.760
So-- - Yeah, for sure.


00:29:04.760 --> 00:29:07.600
- So there's math is close, but then there's also,


00:29:07.600 --> 00:29:09.600
I'm not gonna scroll all the way down here,


00:29:09.600 --> 00:29:12.540
but he also covers NumPy.


00:29:12.540 --> 00:29:15.020
So NumPy has got a couple of these that are really great.


00:29:15.020 --> 00:29:19.180
One of them is close also, but it works on arrays


00:29:19.180 --> 00:29:23.880
and it'll give you an array of true and false values,


00:29:23.880 --> 00:29:26.060
but you can also use all close,


00:29:26.060 --> 00:29:27.980
which just says you've got two arrays


00:29:27.980 --> 00:29:30.940
and if all of the pairs are close enough,


00:29:30.940 --> 00:29:32.460
it'll match those up.


00:29:32.460 --> 00:29:35.380
Also covered, which we use during testing a lot


00:29:35.380 --> 00:29:39.260
is pytestProx, which is a little bit of a different beast,


00:29:39.260 --> 00:29:42.240
but David covers that.


00:29:42.240 --> 00:29:46.040
Basically, this is a semi-regular reminder to


00:29:46.040 --> 00:29:49.000
anybody using floating-point math in Python,


00:29:49.000 --> 00:29:51.980
that you should be careful with it or any other language.


00:29:51.980 --> 00:29:53.780
>> Yeah, it's not a Python thing,


00:29:53.780 --> 00:29:57.040
it's just representing things that don't fit.


00:29:57.040 --> 00:29:58.160
>> Now, there's some things,


00:29:58.160 --> 00:30:00.120
sometimes where you have to be very exact,


00:30:00.120 --> 00:30:01.400
you need to be very precise,


00:30:01.400 --> 00:30:02.800
and in those cases,


00:30:02.800 --> 00:30:06.020
Python does have the decimal and fraction types,


00:30:06.020 --> 00:30:08.340
and David covers these in the article,


00:30:08.340 --> 00:30:10.540
which are cool, they're cool things to know about,


00:30:10.540 --> 00:30:16.540
like definitely around people using money or other very high precision.


00:30:16.540 --> 00:30:17.820
But if you're also,


00:30:17.820 --> 00:30:19.540
so those are covered,


00:30:19.540 --> 00:30:21.900
they do get some hit for those.


00:30:21.900 --> 00:30:28.060
But if you really care about the precision and want to do things exactly right,


00:30:28.060 --> 00:30:31.820
then you probably should read that larger article because there's things that you have to


00:30:31.820 --> 00:30:35.140
do like certain operations before other operations to


00:30:35.140 --> 00:30:38.420
to try to keep the error from accumulating too high.


00:30:38.420 --> 00:30:40.580
So it gets messy.


00:30:40.580 --> 00:30:42.380
- I think I'm fundamentally disturbed


00:30:42.380 --> 00:30:44.220
by the idea that zero isn't zero.


00:30:44.220 --> 00:30:46.500
So my approach to floating point numbers


00:30:46.500 --> 00:30:48.140
is normally convert them to ints.


00:30:48.140 --> 00:30:53.020
- Yeah, I was thinking that,


00:30:53.020 --> 00:30:55.140
sometimes that is the way to do it, right?


00:30:55.140 --> 00:30:58.020
I was thinking this kind of stuff


00:30:58.020 --> 00:31:00.440
maybe applies a lot to the project that you're working on


00:31:00.440 --> 00:31:02.940
if you're trying to come up with ratios


00:31:02.940 --> 00:31:07.180
that represent how risky something is and things like that.


00:31:07.180 --> 00:31:11.740
>> Yeah, yeah, I mean, certainly a lot of, yeah, I was being a bit flippant before we


00:31:11.740 --> 00:31:12.740
got into it.


00:31:12.740 --> 00:31:17.620
It's just as fun, it's like I'm very platonic at heart, I think, so like zeroed one should


00:31:17.620 --> 00:31:20.180
be zeroed one, not nearly one of nearly zero.


00:31:20.180 --> 00:31:22.980
>> There should be a perfect square and a perfect circle.


00:31:22.980 --> 00:31:25.860
How can they not exist in our language?


00:31:25.860 --> 00:31:29.540
>> Is it really zero or negative zero?


00:31:29.540 --> 00:31:32.380
(both laughing)


00:31:32.380 --> 00:31:34.280
Henry on the audience, hey Henry,


00:31:34.280 --> 00:31:36.100
also points out that pytest approximate


00:31:36.100 --> 00:31:38.500
also works on NumPy arrays as well.


00:31:38.500 --> 00:31:39.340
- Nice. - Which is pretty cool.


00:31:39.340 --> 00:31:40.660
- Mm-hmm, cool.


00:31:40.660 --> 00:31:41.680
- You can put that all together.


00:31:41.680 --> 00:31:44.780
All right, let me tell you all about Piper.


00:31:44.780 --> 00:31:47.180
I think that might be the representation,


00:31:47.180 --> 00:31:48.300
the way you pronounce it.


00:31:48.300 --> 00:31:49.980
Everything needs its own description,


00:31:49.980 --> 00:31:51.700
its own little phonetic bit.


00:31:51.700 --> 00:31:56.580
So this is a simple way to create scripts


00:31:56.580 --> 00:31:59.500
that run and do stuff on your computer using Python.


00:31:59.500 --> 00:32:02.420
And what's cool about it is it has a real simple way


00:32:02.420 --> 00:32:03.860
to define the steps.


00:32:03.860 --> 00:32:05.300
Some of those steps can be optional,


00:32:05.300 --> 00:32:07.140
but then you can also piece together things


00:32:07.140 --> 00:32:08.720
like other programming.


00:32:08.720 --> 00:32:12.140
So you can combine commands, different scripts


00:32:12.140 --> 00:32:15.100
in different languages and applications all into one


00:32:15.100 --> 00:32:17.980
sequence of events that happens on your computer.


00:32:17.980 --> 00:32:20.540
So it's basically a task runner


00:32:20.540 --> 00:32:22.700
where you define stuff in YAML.


00:32:22.700 --> 00:32:25.580
And probably the best way to see is to go check out the docs


00:32:25.580 --> 00:32:27.620
and there's a whole bunch of docs.


00:32:27.620 --> 00:32:29.220
The docs are really nice here actually.


00:32:29.220 --> 00:32:31.940
So for example, if you go to getting started


00:32:31.940 --> 00:32:34.980
and come down here and run your first pipeline,


00:32:34.980 --> 00:32:37.400
I really like the way the docs here look, how they look.


00:32:37.400 --> 00:32:40.940
But the way you define it, here's like a one step one


00:32:40.940 --> 00:32:43.660
is you just say the steps and it's all YAML


00:32:43.660 --> 00:32:46.240
and give a step a name so you can refer to it.


00:32:46.240 --> 00:32:47.780
And then you have inputs and outputs


00:32:47.780 --> 00:32:49.740
and you can do the little curly string


00:32:49.740 --> 00:32:51.400
interpolation types of things.


00:32:51.400 --> 00:32:56.060
Or you can have more complex ones like with different steps


00:32:56.060 --> 00:32:57.380
and you can even have little comments.


00:32:57.380 --> 00:33:01.100
There's a way to put a comma in your YAML file as well.


00:33:01.100 --> 00:33:02.820
So there's also conditional.


00:33:02.820 --> 00:33:05.180
Let's see if I can find a good conditional one down here.


00:33:05.180 --> 00:33:07.620
Here's the one that goes and works with like,


00:33:07.620 --> 00:33:11.200
this one is just an echo statement and the ping command,


00:33:11.200 --> 00:33:13.200
but whatever you wanna do,


00:33:13.200 --> 00:33:16.060
you can basically pass command line arguments


00:33:16.060 --> 00:33:20.380
to the YAML file or to the workflow, the pipeline,


00:33:20.380 --> 00:33:22.560
and it'll take those and feed them into the steps.


00:33:22.560 --> 00:33:24.600
So for example, when you call it,


00:33:24.600 --> 00:33:28.280
you can say like count equals one and IP equals that.


00:33:28.280 --> 00:33:31.140
And those will come the little string interpolated pieces


00:33:31.140 --> 00:33:32.420
that go in there.


00:33:32.420 --> 00:33:34.200
So you can just combine whatever,


00:33:34.200 --> 00:33:36.880
basically whatever commands are available to the shell,


00:33:36.880 --> 00:33:40.760
right, be that Python or POSIX or Windows or PowerShell


00:33:40.760 --> 00:33:42.400
or whatever you're looking to do.


00:33:42.400 --> 00:33:43.760
Pretty cool, huh?


00:33:43.760 --> 00:33:44.640
- That's pretty neat.


00:33:44.640 --> 00:33:49.440
I might need this for my job of automating my show notes.


00:33:49.440 --> 00:33:50.800
Might use some of this.


00:33:50.800 --> 00:33:52.000
- Oh yeah, there you go.


00:33:52.000 --> 00:33:53.840
If you can find this, go do that and so on.


00:33:53.840 --> 00:33:57.600
Like here's one that sort of uses the truthiness.


00:33:57.600 --> 00:33:59.400
So it says there's a bunch of different steps


00:33:59.400 --> 00:34:01.960
and you can use the run flag.


00:34:01.960 --> 00:34:05.880
So here it says run if there's a value for A on this one.


00:34:05.880 --> 00:34:07.720
And this one says run if there's a value for B.


00:34:07.720 --> 00:34:09.520
And then there's an example where it says,


00:34:09.520 --> 00:34:11.280
okay, we run it by itself, those don't run.


00:34:11.280 --> 00:34:13.920
But if you pass A, then it runs that A step.


00:34:13.920 --> 00:34:15.640
If you pass B, it does the B step,


00:34:15.640 --> 00:34:17.360
or it can do both if you pass them both.


00:34:17.360 --> 00:34:19.220
And I like the simplicity of it.


00:34:19.220 --> 00:34:20.880
Like a lot of these tools like this


00:34:20.880 --> 00:34:23.040
feel like they're pretty complicated.


00:34:23.040 --> 00:34:27.080
You know, you're sort of like your example with the Genshin, Brian, where you're like,


00:34:27.080 --> 00:34:30.960
is this thing too heavyweight for what I'm trying to ask it to do, you know?


00:34:30.960 --> 00:34:34.240
And this seems like a real simple thing and I don't have to learn about make or any of


00:34:34.240 --> 00:34:35.240
those kinds of things.


00:34:35.240 --> 00:34:36.240
>> Yeah.


00:34:36.240 --> 00:34:37.240
GitHub actions or.


00:34:37.240 --> 00:34:38.240
>> Yeah.


00:34:38.240 --> 00:34:39.240
>> Yeah.


00:34:39.240 --> 00:34:41.160
>> Yeah, it's got a bit of a GitHub actions feel to it.


00:34:41.160 --> 00:34:44.120
>> It's, but it seems like a, yeah, nicer kind of declarative.


00:34:44.120 --> 00:34:45.120
That's pretty cool.


00:34:45.120 --> 00:34:46.120
>> Indeed.


00:34:46.120 --> 00:34:49.960
Yeah, if you were not, not into programming or you didn't want your steps to be programming,


00:34:49.960 --> 00:34:55.080
But of course what happens at each step, you could call a Python app or script that's going


00:34:55.080 --> 00:34:56.520
to do something complicated, right?


00:34:56.520 --> 00:34:57.520
If it needs to.


00:34:57.520 --> 00:35:00.200
But the orchestration of that, you don't have to make complicated.


00:35:00.200 --> 00:35:03.920
>> Is it just a command line tool or can you invoke it from Python?


00:35:03.920 --> 00:35:04.920
Might be a-


00:35:04.920 --> 00:35:05.920
>> Interesting.


00:35:05.920 --> 00:35:09.440
I'm sure there's a way to import it and make it do a thing.


00:35:09.440 --> 00:35:13.600
You know, it's probably just a Python package with an entry point in this package.


00:35:13.600 --> 00:35:14.600
So I would think so.


00:35:14.600 --> 00:35:17.800
>> Yeah, because it would be nice to be able to do that rather than just using subprocess


00:35:17.800 --> 00:35:19.200
to invoke a lot of things.


00:35:19.200 --> 00:35:20.200
if you're in.


00:35:20.200 --> 00:35:21.200
Oh, interesting.


00:35:21.200 --> 00:35:24.680
I hadn't really thought about it as a replacement for subprocess.


00:35:24.680 --> 00:35:28.700
But yeah, because a lot of times when you're trying to orchestrate stuff, like it talks


00:35:28.700 --> 00:35:33.440
about here being part of the shell or being another app or another language, you would


00:35:33.440 --> 00:35:35.400
just use subprocess on it, right?


00:35:35.400 --> 00:35:36.400
Yeah, cool.


00:35:36.400 --> 00:35:39.200
Well, there it is, Piper, piper.io.


00:35:39.200 --> 00:35:40.200
And people can check that out.


00:35:40.200 --> 00:35:41.200
It looks pretty interesting.


00:35:41.200 --> 00:35:42.200
Nice.


00:35:42.200 --> 00:35:44.760
All right, Ian, you want to take us out with your final item here?


00:35:44.760 --> 00:35:45.760
Ah, pigments.


00:35:45.760 --> 00:35:46.760
Okay.


00:35:46.760 --> 00:35:47.760
So this is a package.


00:35:47.760 --> 00:35:51.280
I mean, if you're a developer, there's a very good chance that you have been using this


00:35:51.280 --> 00:35:54.280
for years without knowing, like me, without knowing about it.


00:35:54.280 --> 00:35:56.600
You might have seen it being installed as like a dependency.


00:35:56.600 --> 00:35:57.880
It's like, what is that thing?


00:35:57.880 --> 00:35:59.120
>> That was my thought, Ian.


00:35:59.120 --> 00:36:01.880
I'm like, I know I see this all the time in my dependencies.


00:36:01.880 --> 00:36:04.400
And I just never really bothered to look into what it does.


00:36:04.400 --> 00:36:05.400
>> Yeah.


00:36:05.400 --> 00:36:06.640
So I hadn't until recently.


00:36:06.640 --> 00:36:13.560
So if you use Jupyter Notebook markdown, you know, you can do like three backticks and


00:36:13.560 --> 00:36:15.920
then a block of code.


00:36:15.920 --> 00:36:22.200
And you can actually put like Python or Bash or something and it will intelligently highlight


00:36:22.200 --> 00:36:23.200
it.


00:36:23.200 --> 00:36:27.560
So the thing that's doing that intelligent highlighting is pigments, GitHub markdown,


00:36:27.560 --> 00:36:28.560
same kind of thing.


00:36:28.560 --> 00:36:30.840
Although I'm not sure whether GitHub uses pigments.


00:36:30.840 --> 00:36:36.040
And if you do developer docs like reader docs and Sphinx, that also uses pigments to kind


00:36:36.040 --> 00:36:40.040
of color code your code samples.


00:36:40.040 --> 00:36:42.440
And I know there's a lot of...


00:36:42.440 --> 00:36:44.960
kind of blog posts and stuff like that.


00:36:44.960 --> 00:36:48.920
There are some quite a few services out there where you can take a chunk of code and it


00:36:48.920 --> 00:36:53.680
will intelligently highlight it and give you a JPEG or a PNG back.


00:36:53.680 --> 00:36:58.840
And that's kind of nice, but then you can't copy and paste the code from those samples.


00:36:58.840 --> 00:36:59.840
So I don't like that really.


00:36:59.840 --> 00:37:03.640
I think if you're going to put code in an article, you're probably intended for people


00:37:03.640 --> 00:37:05.400
to be able to copy and paste it.


00:37:05.400 --> 00:37:06.400
Yeah.


00:37:06.400 --> 00:37:08.240
That's the most likely thing you are to copy and paste.


00:37:08.240 --> 00:37:09.240
Yeah.


00:37:09.240 --> 00:37:10.240
Right.


00:37:10.240 --> 00:37:11.240
Because you want that code over here.


00:37:11.240 --> 00:37:14.920
You could use OCR to like reinterpret it, but it's all...


00:37:14.920 --> 00:37:22.880
And then maybe Brian's GenSim to like tidy it up.


00:37:22.880 --> 00:37:28.360
So with Pigments, you can use it as a standalone package and it can do this kind of rendering.


00:37:28.360 --> 00:37:32.920
And it can render to like HTML with like CSS style sheets for all of the coding.


00:37:32.920 --> 00:37:39.060
It also rendered to like ANSI terminal, latex, a few other kind of things.


00:37:39.060 --> 00:37:45.160
So if you're using, if you want a kind of nicely formatted piece of code in a document


00:37:45.160 --> 00:37:47.880
or you're doing developer docs, it's certainly kind of useful.


00:37:47.880 --> 00:37:51.120
I came across it, or should I just say one thing?


00:37:51.120 --> 00:37:55.720
It also supports, maybe I can just switch, supports lots and lots of languages.


00:37:55.720 --> 00:37:57.600
So it's very simple to use.


00:37:57.600 --> 00:38:02.620
It has a highlight function, and then you import Alexa, which is like the thing that


00:38:02.620 --> 00:38:08.400
understands the tokens in a language, and a formatter for the output type you want.


00:38:08.400 --> 00:38:10.160
I think there's hundreds of these things.


00:38:10.160 --> 00:38:13.560
>> There are a lot of languages in there. No kidding.


00:38:13.560 --> 00:38:15.440
>> More than half of these I've never heard of.


00:38:15.440 --> 00:38:19.240
It also supports as well as things like you'd expect Python.


00:38:19.240 --> 00:38:21.040
It supports Python tracebacks.


00:38:21.040 --> 00:38:24.600
It has separate Lexa for color-coding tracebacks.


00:38:24.600 --> 00:38:26.760
All the usual languages you'd expect,


00:38:26.760 --> 00:38:33.080
but also some things like data formats like TML, JSON, XML.


00:38:33.080 --> 00:38:36.760
>> Okay. Interesting. A lot of the files that we might run across,


00:38:36.760 --> 00:38:38.760
You can syntax highlight them.


00:38:38.760 --> 00:38:39.760
Yeah.


00:38:39.760 --> 00:38:41.960
And so it's very easy to use.


00:38:41.960 --> 00:38:48.020
And the reason I came across it is because I, it recently, so a lot of attacker code


00:38:48.020 --> 00:38:50.120
tends to be a deliberately obfuscated.


00:38:50.120 --> 00:38:55.320
So it's kind of a base 64 encoded, but then even once you decode it, it's kind of munged


00:38:55.320 --> 00:38:58.240
in a way to make it as unreadable as possible.


00:38:58.240 --> 00:39:02.960
So one of the things that we try to do is, is pull that code back, like decode it, trying


00:39:02.960 --> 00:39:05.960
to re like clean it, deobfuscate it.


00:39:05.960 --> 00:39:11.320
But if you can present it as close to the way a developer would write it as possible,


00:39:11.320 --> 00:39:15.840
it makes it much quicker for an analyst to determine what is this doing.


00:39:15.840 --> 00:39:22.680
So we use it now in MysticPy to kind of color display things like malicious PowerShell script


00:39:22.680 --> 00:39:25.560
or Bash or something like that.


00:39:25.560 --> 00:39:26.880
So that's how I came across it.


00:39:26.880 --> 00:39:31.720
Actually, rather than just seeing it go past as part of a pip install, actually, I have


00:39:31.720 --> 00:39:34.040
to invoke it directly.


00:39:34.040 --> 00:39:38.360
I got a big shout out to the developers maintainers of pigments.


00:39:38.360 --> 00:39:41.920
It's one of those package that probably millions of people benefit from,


00:39:41.920 --> 00:39:45.400
but like very few people kind of know about it or you know, you can,


00:39:45.400 --> 00:39:48.160
and it's just super easy to use.


00:39:48.160 --> 00:39:50.160
They seem to be adding kind of Lexus all the time.


00:39:50.160 --> 00:39:51.840
So, great.


00:39:51.840 --> 00:39:52.840
Yeah, this is amazing.


00:39:52.840 --> 00:39:55.280
I didn't realize that it did all of this.


00:39:55.280 --> 00:39:57.640
This is way more advanced than I thought.


00:39:57.640 --> 00:39:58.600
Brian, did you know?


00:39:58.600 --> 00:40:03.040
No, I just thought it was something that magically syntax did syntax highlighting.


00:40:03.040 --> 00:40:05.040
I didn't have to care about it.


00:40:05.040 --> 00:40:07.040
Yeah, exactly.


00:40:07.040 --> 00:40:11.040
I got a little example in the show notes as well.


00:40:11.040 --> 00:40:12.040
I pasted it.


00:40:12.040 --> 00:40:13.040
It has a dark theme?


00:40:13.040 --> 00:40:15.040
Yeah, yeah.


00:40:15.040 --> 00:40:17.040
Yeah, and you probably want to include this


00:40:17.040 --> 00:40:20.040
"no background equals true" if you're using Jupyter Notebooks,


00:40:20.040 --> 00:40:25.040
because if you select a theme, it just flips the whole notebook's kind of CSS theme.


00:40:25.040 --> 00:40:28.040
So that tells it just not to mess with what's in the background.


00:40:28.040 --> 00:40:29.040
Okay.


00:40:29.040 --> 00:40:31.040
Yeah, that looks great.


00:40:31.040 --> 00:40:33.980
>> Thanks for pointing out how useful that can be.


00:40:33.980 --> 00:40:35.460
That's cool. Like I said,


00:40:35.460 --> 00:40:36.580
I've seen it go by all the time.


00:40:36.580 --> 00:40:39.180
I just never really paid that much attention to it.


00:40:39.180 --> 00:40:40.660
>> It's probably a pretty minority use,


00:40:40.660 --> 00:40:42.860
but if you need it, it's great.


00:40:42.860 --> 00:40:45.180
>> Yeah, it's incredibly powerful. Fantastic.


00:40:45.180 --> 00:40:46.620
Well, that's all of our main items.


00:40:46.620 --> 00:40:47.680
Brian, you got any extras?


00:40:47.680 --> 00:40:48.940
>> Just one extra actually.


00:40:48.940 --> 00:40:51.500
One of the things when I was doing that,


00:40:51.500 --> 00:40:54.820
the first topic with GenSim,


00:40:54.820 --> 00:40:57.420
it doesn't have very many dependencies,


00:40:57.420 --> 00:40:59.100
but one of the dependencies is


00:40:59.100 --> 00:41:02.780
this library called SmartOpen.


00:41:02.780 --> 00:41:06.340
I open things and I want to be smart about it,


00:41:06.340 --> 00:41:08.380
so I wanted to check this out.


00:41:08.380 --> 00:41:11.100
It's pretty neat. I don't know if we've covered this before,


00:41:11.100 --> 00:41:15.620
but it basically mimics the interface of open,


00:41:15.620 --> 00:41:19.260
normal Python open, but you can pass it really anything.


00:41:19.260 --> 00:41:25.220
It does transparent on-the-fly reading of things,


00:41:25.220 --> 00:41:28.860
efficient streaming of large files from S3 or


00:41:28.860 --> 00:41:31.660
Azure or over the web.


00:41:31.660 --> 00:41:33.100
>> Even straight just HTTP.


00:41:33.100 --> 00:41:33.420
>> Yeah.


00:41:33.420 --> 00:41:35.980
>> If you just have a link to a large file on a web server.


00:41:35.980 --> 00:41:40.660
>> Yeah. Then just the code for it is just super nice.


00:41:40.660 --> 00:41:44.100
You import open from SmartOpen and you got like for


00:41:44.100 --> 00:41:46.820
a line in open this thing


00:41:46.820 --> 00:41:51.700
and you can work from each line there. It's pretty cool.


00:41:51.700 --> 00:41:55.260
>> I love it. That's a great one. Very nice.


00:41:55.260 --> 00:41:58.100
- All right, Ian, you got any extras you wanna shout out


00:41:58.100 --> 00:41:59.020
while we're here?


00:41:59.020 --> 00:42:00.500
- I don't, I'm afraid.


00:42:00.500 --> 00:42:02.180
I have some. - No, that's fine.


00:42:02.180 --> 00:42:07.180
I have two real quick ones to just quickly talk about.


00:42:07.180 --> 00:42:11.860
Last time, Emily Morehouse spoke about using AutoSquash,


00:42:11.860 --> 00:42:13.380
which was really cool.


00:42:13.380 --> 00:42:17.860
So Adam, let me get the attribution correct here.


00:42:17.860 --> 00:42:21.020
Adam Parkin sent in a follow-up to say,


00:42:21.020 --> 00:42:23.420
hey, you should check out this article over here


00:42:23.420 --> 00:42:27.100
called fixing commits with git commit --fix up


00:42:27.100 --> 00:42:30.420
and git rebase --auto squash.


00:42:30.420 --> 00:42:32.020
Woo, the long and the short of it is,


00:42:32.020 --> 00:42:33.360
talks about doing a lot of things


00:42:33.360 --> 00:42:35.140
that Emily said was pretty cool.


00:42:35.140 --> 00:42:36.500
But in the end,


00:42:36.500 --> 00:42:41.300
setting up your .git config to auto squash equals true


00:42:41.300 --> 00:42:42.540
and then adding an alias


00:42:42.540 --> 00:42:45.220
so you can just type git space fix up.


00:42:45.220 --> 00:42:46.060
And when you type that,


00:42:46.060 --> 00:42:49.660
it actually does git log and shows the last 50 items


00:42:49.660 --> 00:42:53.020
and then allows you to go back and work with those.


00:42:53.020 --> 00:42:56.640
And basically it's just a real quick way to get back into the scenario where you


00:42:56.640 --> 00:42:58.720
mark different elements for fix up.


00:42:58.720 --> 00:43:04.120
So people can check that out if they were following Emily's advice, but


00:43:04.120 --> 00:43:05.520
they want it to be like one line.


00:43:05.520 --> 00:43:06.280
They don't have to remember.


00:43:06.280 --> 00:43:06.860
There you go.


00:43:06.860 --> 00:43:07.360
That's cool.


00:43:07.360 --> 00:43:12.680
And then Python 3.10.3 is out as of about a week ago, I suppose.


00:43:12.680 --> 00:43:15.760
So there are many changes amongst here.


00:43:15.760 --> 00:43:18.400
You know, I would love, there's like so many great changes here.


00:43:18.400 --> 00:43:19.040
You can see, I don't know.


00:43:19.040 --> 00:43:20.320
How many do you think that is?


00:43:20.320 --> 00:43:22.760
Probably a hundred, maybe a little bit less.


00:43:22.760 --> 00:43:24.580
it would be great if there was like a,


00:43:24.580 --> 00:43:27.020
"These are critically important."


00:43:27.020 --> 00:43:30.420
At the front, there's a security problem that was fixed,


00:43:30.420 --> 00:43:33.380
or there's a thing we've taken out is no longer here.


00:43:33.380 --> 00:43:35.680
They're all the same priority.


00:43:35.680 --> 00:43:38.540
But nonetheless, there's a bunch of changes that people can


00:43:38.540 --> 00:43:42.100
check out and upgrade to the newer version of Python 3.10.


00:43:42.100 --> 00:43:45.140
>> Different people care about different stuff though.


00:43:45.140 --> 00:43:46.620
>> I know. I don't want to impose


00:43:46.620 --> 00:43:48.740
my importance on other people's importance.


00:43:48.740 --> 00:43:49.260
>> Yeah.


00:43:49.260 --> 00:43:49.860
>> So it's funny.


00:43:49.860 --> 00:43:50.300
>> All right.


00:43:50.300 --> 00:43:52.780
When I first came across Python,


00:43:52.780 --> 00:43:56.500
you'd be like, "Why is it so slow between the major versions coming out?"


00:43:56.500 --> 00:43:58.500
Then suddenly, as a Python developer,


00:43:58.500 --> 00:44:00.820
it's like, "Why are the versions coming out so quickly?"


00:44:00.820 --> 00:44:01.780
I can't get it.


00:44:01.780 --> 00:44:05.420
>> Yeah. It's definitely true.


00:44:05.420 --> 00:44:09.100
There's a ton of change. This is just some minor version change


00:44:09.100 --> 00:44:11.620
that has all these changes in here, which is pretty cool.


00:44:11.620 --> 00:44:12.820
>> Well, we also used to be on


00:44:12.820 --> 00:44:15.580
an 18-month cycle and now we're on a yearly cycle.


00:44:15.580 --> 00:44:16.940
>> Yeah.


00:44:16.940 --> 00:44:20.780
It's Lucas Schlinga's fault that we are 50% faster now.


00:44:20.780 --> 00:44:21.620
Thanks Lucas.


00:44:21.620 --> 00:44:24.220
All right, how about a joke to close out the show?


00:44:24.220 --> 00:44:25.100
- That'd be great.


00:44:25.100 --> 00:44:28.040
- Yeah, so here's a good tweet


00:44:28.040 --> 00:44:31.180
and it's this sort of perplexed,


00:44:31.180 --> 00:44:33.220
I think in a good way, character,


00:44:33.220 --> 00:44:35.700
wearing all these, are these prizes?


00:44:35.700 --> 00:44:37.940
I don't know, anyway, Python developers,


00:44:37.940 --> 00:44:40.380
when someone asks what their secret is,


00:44:40.380 --> 00:44:41.660
and this person just says,


00:44:41.660 --> 00:44:45.740
"I just keep writing pseudocode and it just keeps working."


00:44:45.740 --> 00:44:49.020
It's a little bit like that joke where they have some code,


00:44:49.020 --> 00:44:50.300
pseudocode in a text file.


00:44:50.300 --> 00:44:52.420
They're like, just rename it to .py and try to run it.


00:44:52.420 --> 00:44:53.260
See what happens.


00:44:53.260 --> 00:44:56.100
Anyway, that's the joke.


00:44:56.100 --> 00:44:56.940
- Nice.


00:44:56.940 --> 00:44:57.940
- Thank you, Brian, as always.


00:44:57.940 --> 00:44:59.700
And Ian, thanks for being part of the show.


00:44:59.700 --> 00:45:00.540
- Thank you. - Thank you.


00:45:00.540 --> 00:45:01.360
- Great to have you here.


00:45:01.360 --> 00:45:02.200
- Thank you very much both.


00:45:02.200 --> 00:45:03.140
Been a real pleasure.


00:45:03.140 --> 00:45:04.220
- Yeah, it sure has.

