
00:00:00.000 --> 00:00:05.300
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.300 --> 00:00:09.800
This is episode 237, recorded June 9, 2021.


00:00:09.800 --> 00:00:10.900
I'm Brian Okken.


00:00:10.900 --> 00:00:12.000
I'm Michael Kennedy.


00:00:12.000 --> 00:00:13.100
And I'm Mike Groves.


00:00:13.100 --> 00:00:16.000
Hey Mike, thanks for showing up today. Tell us a little bit about yourself.


00:00:16.000 --> 00:00:18.400
Yeah, well, thank you guys for having me. This is actually really fun.


00:00:18.400 --> 00:00:23.800
My name is Mike Groves. I am leading the engineering at a company called Assembly AI.


00:00:23.800 --> 00:00:28.100
We are mainly a Python shop, but we do a lot.


00:00:28.100 --> 00:00:32.100
We do speech to text for developers.


00:00:32.100 --> 00:00:33.780
We're an API company.


00:00:33.780 --> 00:00:38.100
So you can really think of us as we are trying to make


00:00:38.100 --> 00:00:40.820
speech to text and all of the ways


00:00:40.820 --> 00:00:42.660
that you can take that text and do things with it


00:00:42.660 --> 00:00:46.660
really easy for developers so that they can integrate


00:00:46.660 --> 00:00:48.020
this value into their products


00:00:48.020 --> 00:00:49.460
and make their customers happier.


00:00:49.460 --> 00:00:50.180
- Yeah, that's really cool.


00:00:50.180 --> 00:00:53.860
I had somebody who, I had spoken to you guys


00:00:53.860 --> 00:00:56.660
at Assembly AI for some talk Python stuff,


00:00:56.660 --> 00:00:59.020
But someone else that I'm working with reached out to me and said,


00:00:59.020 --> 00:01:02.260
"Hey, I'm doing this stuff with this assembly AI API,


00:01:02.260 --> 00:01:04.520
and I don't know how to save the file that well.


00:01:04.520 --> 00:01:05.820
Can you help me?" I'm like, "Oh,


00:01:05.820 --> 00:01:07.260
this looks really simple. This is really nice."


00:01:07.260 --> 00:01:08.300
So yeah, you guys are doing good work.


00:01:08.300 --> 00:01:09.820
>> Yeah, we try to make it really simple.


00:01:09.820 --> 00:01:10.220
>> Yeah.


00:01:10.220 --> 00:01:13.340
>> Yeah. Fantastic. Brian, shall we kick it off?


00:01:13.340 --> 00:01:14.540
>> I think we should.


00:01:14.540 --> 00:01:15.540
>> With the TUI?


00:01:15.540 --> 00:01:16.060
>> Oh, yeah.


00:01:16.060 --> 00:01:18.940
>> Part of a GUI, a graphical user interface,


00:01:18.940 --> 00:01:21.660
and this new trend of


00:01:21.660 --> 00:01:25.460
taking stuff that happens in the terminal and making it nicer.


00:01:25.460 --> 00:01:28.060
We've covered things like rich and stuff before, right?


00:01:28.060 --> 00:01:29.520
>> Yeah, a lot. I love rich.


00:01:29.520 --> 00:01:32.060
>> Yeah, I do too. I'm a super big fan.


00:01:32.060 --> 00:01:37.100
So I want to cover something that's like a derivative of rich from Will McGann.


00:01:37.100 --> 00:01:40.460
See, here we are messing up names already.


00:01:40.460 --> 00:01:43.080
Sorry, Will. The idea is,


00:01:43.080 --> 00:01:48.520
if I wanted to create like Emacs or a richer UI with something like rich,


00:01:48.520 --> 00:01:51.580
I can control stuff on the screen and how it prints,


00:01:51.580 --> 00:01:53.540
but it's not full-on curses.


00:01:53.540 --> 00:01:55.840
It's not, I want to write in this section over here


00:01:55.840 --> 00:01:57.800
and I want to dock this other bit to the right


00:01:57.800 --> 00:02:00.540
and have Rich automatically put stuff into it and so on.


00:02:00.540 --> 00:02:03.640
So I introduce you to Textual.


00:02:03.640 --> 00:02:06.300
It was called rich.tui, T-U-I,


00:02:06.300 --> 00:02:08.500
as in text terminal user interface,


00:02:08.500 --> 00:02:10.800
but it's now called Textual.


00:02:10.800 --> 00:02:12.760
And the idea is we can have these cool things,


00:02:12.760 --> 00:02:16.720
like I would like a thing to be a header of my terminal app


00:02:16.720 --> 00:02:17.920
and the footer of my terminal app.


00:02:17.920 --> 00:02:21.640
And I want to dock a 30 column wide section to the left


00:02:21.640 --> 00:02:25.960
and then just fill out the rest in a little area that just takes the rest of the space.


00:02:25.960 --> 00:02:26.920
How cool is that?


00:02:26.920 --> 00:02:28.200
Yeah, it's great.


00:02:28.200 --> 00:02:32.680
Yeah. And then each one of these areas is written to and controlled by Rich.


00:02:32.680 --> 00:02:35.640
So all the nice stuff that we've already talked about with Rich


00:02:35.640 --> 00:02:38.280
and the really nice things you get from there.


00:02:38.280 --> 00:02:41.640
So, you know, if people remember like Rich lets you have


00:02:41.640 --> 00:02:49.640
spectrums and like centered text or right aligned text and tables and just all sorts of good stuff.


00:02:49.640 --> 00:02:55.240
So think of doing that, but on top of this, like, it's almost like a layout for terminals.


00:02:55.240 --> 00:03:01.560
Yeah, he's kind of rethinking how to do terminal stuff. So this, I know you can do all of this


00:03:01.560 --> 00:03:07.480
stuff with Cursus libraries and things like that, but Cursus isn't always easy on all platforms.


00:03:07.480 --> 00:03:12.440
So he's rethinking all of it. And I think it's really kind of fun.


00:03:12.440 --> 00:03:17.800
Yeah, I do want to point out something here really quick. There's a comment in the readme


00:03:17.800 --> 00:03:20.100
I mean, it says this project is currently a work in progress


00:03:20.100 --> 00:03:22.100
and may not be usable for a while.


00:03:22.100 --> 00:03:25.140
So, you know, just kind of maybe watch the repo


00:03:25.140 --> 00:03:28.140
and get notifications and stuff and see,


00:03:28.140 --> 00:03:29.540
you know, keep your eye out for it.


00:03:29.540 --> 00:03:32.020
On the other hand, this kind of thing,


00:03:32.020 --> 00:03:34.620
these early stages, a lot of people contact us and say,


00:03:34.620 --> 00:03:36.020
I really wanna get into open source.


00:03:36.020 --> 00:03:38.740
I want to contribute to some project.


00:03:38.740 --> 00:03:39.580
What should I work on?


00:03:39.580 --> 00:03:40.460
Should I work on Django?


00:03:40.460 --> 00:03:42.700
It's like, well, that's gonna be a little bit complicated.


00:03:42.700 --> 00:03:45.220
It's highly polished and there's a ton of dependencies.


00:03:45.220 --> 00:03:47.740
Like projects like this that are in their early stages


00:03:47.740 --> 00:03:50.140
are really good for jumping in and getting involved


00:03:50.140 --> 00:03:52.100
if it sparks your interest.


00:03:52.100 --> 00:03:53.420
- Yeah, and there's a lot of room for people


00:03:53.420 --> 00:03:56.540
to do things like add to the testing,


00:03:56.540 --> 00:03:58.740
do documentation, test on different platforms,


00:03:58.740 --> 00:04:01.140
and really help it so that Will can concentrate


00:04:01.140 --> 00:04:03.020
on doing more features.


00:04:03.020 --> 00:04:03.980
- Yeah, yeah, exactly.


00:04:03.980 --> 00:04:06.420
Even documentation, like a little tutorial or whatever.


00:04:06.420 --> 00:04:08.380
And Kim, out in the live stream,


00:04:08.380 --> 00:04:11.620
hey Kim, says, "I would argue Cursus isn't easy anywhere."


00:04:11.620 --> 00:04:13.180
I agree, it always feels like,


00:04:13.180 --> 00:04:15.660
oh boy, we're going down this path.


00:04:15.660 --> 00:04:16.660
Mike, what do you think?


00:04:16.660 --> 00:04:19.860
- Well, it looks like a really cool library.


00:04:19.860 --> 00:04:22.380
And I think for me, I try to think of what would I use it


00:04:22.380 --> 00:04:24.980
for and certainly a lot of internal tooling,


00:04:24.980 --> 00:04:28.300
that we could use this for to,


00:04:28.300 --> 00:04:30.580
so that we can make better ways of monitoring


00:04:30.580 --> 00:04:33.580
our machine learning systems and how that all works.


00:04:33.580 --> 00:04:35.460
And so, yeah, I think that's would be something


00:04:35.460 --> 00:04:37.180
I would like to look at.


00:04:37.180 --> 00:04:39.500
And yeah, and also just a lot of times too,


00:04:39.500 --> 00:04:41.300
is just trying something out,


00:04:41.300 --> 00:04:43.140
even if you have like a day or two to just try it out


00:04:43.140 --> 00:04:45.340
and hit the bug so you can really communicate that


00:04:45.340 --> 00:04:47.520
with the community on what is broken


00:04:47.520 --> 00:04:49.460
and what could be fixed.


00:04:49.460 --> 00:04:50.420
- Yeah, absolutely.


00:04:50.420 --> 00:04:52.220
I'm excited to see where this goes.


00:04:52.220 --> 00:04:57.160
- Yeah, so next up, we wanna talk about pip-tools.


00:04:57.160 --> 00:05:00.460
So we actually, one of the listeners, John Hagen,


00:05:00.460 --> 00:05:01.980
contacted us a while ago and said,


00:05:01.980 --> 00:05:03.420
"Hey, have you covered this?"


00:05:03.420 --> 00:05:06.100
And we thought we had, but I don't think we have.


00:05:06.100 --> 00:05:08.900
So I'm gonna cover it now.


00:05:08.900 --> 00:05:11.860
pip-tools, so we've talked about other things around PIP,


00:05:11.860 --> 00:05:15.580
like Poetry and there's other ways to,


00:05:15.580 --> 00:05:18.460
and some virtual environment controllers and stuff.


00:05:18.460 --> 00:05:21.180
This isn't that, this isn't an all-in-one thing.


00:05:21.180 --> 00:05:22.780
But one of the things that,


00:05:22.780 --> 00:05:25.180
like for instance Poetry gives you is,


00:05:25.180 --> 00:05:30.140
and a couple of other packaging things is lock files and stuff.


00:05:30.140 --> 00:05:34.860
A lock file really isn't what it does.


00:05:34.860 --> 00:05:37.900
I don't know if it's a lock file or pinned requirements,


00:05:37.900 --> 00:05:39.900
but the idea around,


00:05:39.900 --> 00:05:42.100
PIPTools does a whole bunch of stuff,


00:05:42.100 --> 00:05:44.940
but right now I'm just going to concentrate on the compile part.


00:05:44.940 --> 00:05:46.740
The problem it solves is,


00:05:46.740 --> 00:05:49.400
so let's say I'm going to give an example.


00:05:49.400 --> 00:05:51.780
I've got a requirement,


00:05:51.780 --> 00:05:56.820
my dependency is rich and typer is two libraries I'm depending on.


00:05:56.820 --> 00:06:01.340
I could just have a simple requirements.in file that has this,


00:06:01.340 --> 00:06:03.660
just those two labels in it.


00:06:03.660 --> 00:06:07.180
Then with PIPtools, I can take that and take that requirements.in


00:06:07.180 --> 00:06:10.100
file and compile it.


00:06:10.100 --> 00:06:15.340
I run pip compile and then I get a pinned list.


00:06:15.340 --> 00:06:19.340
It actually just goes in and writes the requirements.txt file.


00:06:19.340 --> 00:06:21.020
Just from an easy,


00:06:21.020 --> 00:06:27.060
I require these things and it'll pop out the actual pinned dependencies.


00:06:27.060 --> 00:06:33.080
Now I can deploy this and all the other developers and stuff can use it and be okay with it.


00:06:33.080 --> 00:06:39.440
Of course, before you do the deployment, please test this.


00:06:39.440 --> 00:06:43.400
That's the idea, is you update your requirements


00:06:43.400 --> 00:06:46.520
and then test it before you deploy it.


00:06:46.520 --> 00:06:48.480
But this little extra step of taking,


00:06:48.480 --> 00:06:51.340
I've got a loose list of requirements,


00:06:51.340 --> 00:06:54.160
and I want to create a pinned list.


00:06:54.160 --> 00:06:58.460
pip-tools also has a way to just say,


00:06:58.460 --> 00:07:00.840
let me get the syntax right, upgrade.


00:07:00.840 --> 00:07:04.260
You say --upgrade and it updates your requirements.


00:07:04.260 --> 00:07:07.780
One of the things I love about it also is it doesn't just do one file.


00:07:07.780 --> 00:07:11.860
If you've got a requirements.txt and a dev requirements.txt,


00:07:11.860 --> 00:07:14.340
for instance, with your testing tools,


00:07:14.340 --> 00:07:15.800
pytest and such,


00:07:15.800 --> 00:07:19.260
you can throw that in a different file and it'll update those too.


00:07:19.260 --> 00:07:23.180
So you can have actually as many requirements files as you want,


00:07:23.180 --> 00:07:25.020
and it handles it just fine.


00:07:25.020 --> 00:07:26.800
This is a really cool thing.


00:07:26.800 --> 00:07:30.320
Jonathan also gave us an example project,


00:07:30.320 --> 00:07:35.600
this Python blueprint that has example code in it,


00:07:35.600 --> 00:07:38.560
and it uses this workflow and it has the readme.


00:07:38.560 --> 00:07:41.880
If you want to check out a project that uses this, go and do that.


00:07:41.880 --> 00:07:44.740
I don't really, actually to be honest,


00:07:44.740 --> 00:07:47.520
I don't use the pip-tools for anything other than this.


00:07:47.520 --> 00:07:49.560
This is what I use pip-tools for, it's just this.


00:07:49.560 --> 00:07:50.980
I know it does other things too,


00:07:50.980 --> 00:07:52.660
but this is what I use it for.


00:07:52.660 --> 00:07:55.020
>> I'm psyched about this. This looks fantastic.


00:07:55.020 --> 00:08:00.020
I have a requirements.txt and a dev requirements-dev.txt.


00:08:00.020 --> 00:08:04.060
And in there, I've been putting like at the top,


00:08:04.060 --> 00:08:07.060
here's the stuff that I really wanted to install.


00:08:07.060 --> 00:08:09.500
And below it, these are the things I want to pin,


00:08:09.500 --> 00:08:11.180
not because I actually care about them


00:08:11.180 --> 00:08:12.940
or you would actually need to mention them,


00:08:12.940 --> 00:08:14.780
but I want things like to pin to bot


00:08:14.780 --> 00:08:16.660
to see that there's a security problem


00:08:16.660 --> 00:08:19.420
in the dependency I'm using, not the thing itself.


00:08:19.420 --> 00:08:21.700
And so it'll bump the version and fix it, right?


00:08:21.700 --> 00:08:22.540
- Yeah.


00:08:22.540 --> 00:08:24.660
- And that means, I just noticed a couple of days ago


00:08:24.660 --> 00:08:26.420
that there's these other libraries.


00:08:26.420 --> 00:08:28.280
I'm like, where did this come from?


00:08:28.280 --> 00:08:29.660
This is in my virtual environment


00:08:29.660 --> 00:08:33.040
and I didn't, it's not in either of those scenarios, right?


00:08:33.040 --> 00:08:35.700
Well, some new dependency was added to the main dependency


00:08:35.700 --> 00:08:36.980
that I didn't pay attention to.


00:08:36.980 --> 00:08:39.020
So now I'm like babysitting the bottom half


00:08:39.020 --> 00:08:40.380
of my requirements TXT file,


00:08:40.380 --> 00:08:43.700
which seems like a thing I don't wanna do with life.


00:08:43.700 --> 00:08:44.540
This is beautiful.


00:08:44.540 --> 00:08:45.380
I'm all about this.


00:08:45.380 --> 00:08:47.740
I'm very much thinking that this is gonna be something


00:08:47.740 --> 00:08:49.300
I'm using out there.


00:08:49.300 --> 00:08:50.400
My guys seem to agree.


00:08:50.400 --> 00:08:51.660
- Yeah, I absolutely agree.


00:08:51.660 --> 00:08:53.820
And I actually have, we do not use this.


00:08:53.820 --> 00:08:57.660
I do not use this, but I will be looking into this right after this podcast.


00:08:57.660 --> 00:09:00.900
So, you know, like, why am I not doing well?


00:09:00.900 --> 00:09:04.380
This is this. This will make my life a lot easier, and I'm definitely looking to it.


00:09:04.380 --> 00:09:04.860
Yeah.


00:09:04.860 --> 00:09:10.580
Now, Juergen brings up, oh, you, the PIPTools is awesome.


00:09:10.580 --> 00:09:12.300
Yes, it is.


00:09:12.300 --> 00:09:16.180
And he also brings up that it's all about the app versus library story.


00:09:16.180 --> 00:09:18.580
So PIPTools is definitely on the app side.


00:09:18.580 --> 00:09:23.300
So you you wouldn't want completely pinned dependencies


00:09:23.300 --> 00:09:27.300
in a library because it might conflict with the rest of the application.


00:09:27.300 --> 00:09:27.600
So,


00:09:27.600 --> 00:09:28.200
right.


00:09:28.200 --> 00:09:29.300
Or pin you to say,


00:09:29.300 --> 00:09:32.800
I have to have the one that has the vulnerability in it rather than the


00:09:32.800 --> 00:09:33.800
newer one that fixes it.


00:09:33.800 --> 00:09:33.900
Right?


00:09:33.900 --> 00:09:34.600
You don't want that.


00:09:34.600 --> 00:09:35.000
Yeah,


00:09:35.000 --> 00:09:35.400
right.


00:09:35.400 --> 00:09:35.900
Yeah.


00:09:35.900 --> 00:09:36.500
Awesome.


00:09:36.500 --> 00:09:37.300
Yeah.


00:09:37.300 --> 00:09:38.500
So I think,


00:09:38.500 --> 00:09:38.900
yeah,


00:09:38.900 --> 00:09:39.700
I think you're up.


00:09:39.700 --> 00:09:40.100
I think I'm up.


00:09:40.100 --> 00:09:40.500
All right.


00:09:40.500 --> 00:09:41.000
Now you,


00:09:41.000 --> 00:09:41.200
okay.


00:09:41.200 --> 00:09:41.800
So here,


00:09:41.800 --> 00:09:43.600
here's a hint on the pronunciation,


00:09:43.600 --> 00:09:45.500
but you're gonna have to give this a shot on your own.


00:09:45.500 --> 00:09:46.100
Yeah.


00:09:46.100 --> 00:09:47.100
So I'm going to say it's,


00:09:47.100 --> 00:09:48.200
it's pinegwin,


00:09:48.200 --> 00:09:49.600
but I guess you could call it penguin.


00:09:49.600 --> 00:09:50.100
I don't know.


00:09:50.100 --> 00:09:52.600
I don't know what the proper pronunciation,


00:09:52.600 --> 00:10:00.280
pronunciation there is. So Penguin is a library for automating the generation of tests. So


00:10:00.280 --> 00:10:08.600
basically what you do is at CLI, you set this up, you point it at your code, you can sometimes give


00:10:08.600 --> 00:10:18.200
it hints, and then it goes off and it processes your files and produces tests. Just disclaimer


00:10:18.200 --> 00:10:22.440
here. They mentioned this several times. And this is very important. It will run your code.


00:10:22.440 --> 00:10:28.720
So and it will try many different inputs. So you have to be very careful with what that


00:10:28.720 --> 00:10:34.960
code is doing. So they suggest wrapping it in a Docker container to prevent it from affecting


00:10:34.960 --> 00:10:37.160
or poisoning your file system.


00:10:37.160 --> 00:10:41.040
Yeah, maybe don't give it access to the production database, something like that.


00:10:41.040 --> 00:10:49.040
Yes, exactly. Exactly. So yes, I didn't go deep into it, but I know that they're using


00:10:49.040 --> 00:10:54.080
some interesting search techniques. This is actually developed by a colleague at a university


00:10:54.080 --> 00:10:58.640
and there's a white paper behind it. I don't think it's here, but if you look it up, I'm


00:10:58.640 --> 00:11:03.860
sure you could find the white paper that's associated, but it's supposed to be a very


00:11:03.860 --> 00:11:12.620
interesting technique around searching for the inputs that would find good edge cases.


00:11:12.620 --> 00:11:17.100
So it does take a while to run, they say, so you can give it some hints and they talk


00:11:17.100 --> 00:11:22.140
about that within the documentation. But I really think this is something for me, when


00:11:22.140 --> 00:11:26.180
I look at tools, I'm like, "Well, what would I use it for?" And I think a lot of times


00:11:26.180 --> 00:11:31.780
we're busy and we don't get the coverage that we really want to get because deadlines and


00:11:31.780 --> 00:11:36.860
we want to land this customer and so we have to work really quick to get this one feature


00:11:36.860 --> 00:11:42.920
done and we only get half coverage instead of getting 90% or plus.


00:11:42.920 --> 00:11:49.140
So I think this tool could help maybe bridge that gap in those cases and maybe give you


00:11:49.140 --> 00:11:54.520
a jumpstart to getting the coverage that you're looking for on your projects.


00:11:54.520 --> 00:11:58.580
So that's what I'm looking at it for and yeah, I think it's a cool project.


00:11:58.580 --> 00:12:01.520
It looks like one of those systems a little bit like hypothesis.


00:12:01.520 --> 00:12:03.520
Are you familiar with hypothesis?


00:12:03.520 --> 00:12:04.620
- Only by name.


00:12:04.620 --> 00:12:05.900
I haven't actually looked into it.


00:12:05.900 --> 00:12:07.580
- Where it kind of tries to determine,


00:12:07.580 --> 00:12:09.560
oh, what are some edge cases and some,


00:12:09.560 --> 00:12:10.860
like you give it bounds of data


00:12:10.860 --> 00:12:13.220
and it'll test different scenarios for you.


00:12:13.220 --> 00:12:14.420
It looks quite interesting.


00:12:14.420 --> 00:12:15.660
Brian, are you familiar with this?


00:12:15.660 --> 00:12:16.660
- I'm not.


00:12:16.660 --> 00:12:20.980
I'm actually often leery of test generators,


00:12:20.980 --> 00:12:23.540
but I don't know if people find it useful.


00:12:23.540 --> 00:12:24.740
Maybe it's worth checking out.


00:12:24.740 --> 00:12:25.580
- Yeah. - Yeah.


00:12:25.580 --> 00:12:26.660
- Yeah, it looks neat.


00:12:26.660 --> 00:12:27.500
- Yeah, I'm the same.


00:12:27.500 --> 00:12:29.060
I would say I'm the same, Brian.


00:12:29.060 --> 00:12:31.720
I did, you know, I was a little bit leery, I guess,


00:12:31.720 --> 00:12:33.540
about the idea of it.


00:12:33.540 --> 00:12:36.860
For me, as I said, I think it's just really that gap


00:12:36.860 --> 00:12:38.540
that, you know, if you have a gap in coverage


00:12:38.540 --> 00:12:41.620
and you're really just trying to get a quick jumpstart


00:12:41.620 --> 00:12:45.300
on your coverage, this might be a good tool to start with.


00:12:45.300 --> 00:12:46.580
That's my thought.


00:12:46.580 --> 00:12:47.940
- Yeah, yeah, very cool.


00:12:47.940 --> 00:12:48.780
That's good.


00:12:48.780 --> 00:12:50.620
Although, Brian, I don't know if you really


00:12:50.620 --> 00:12:51.780
wanna encourage it too much.


00:12:51.780 --> 00:12:53.020
You were getting out there.


00:12:53.020 --> 00:12:54.300
If I'd known about Penguin earlier,


00:12:54.300 --> 00:12:56.380
I might not have bought Brian's textbook.


00:12:56.380 --> 00:12:58.540
>> You didn't need to highlight that.


00:12:58.540 --> 00:13:01.700
>> Indeed, indeed.


00:13:01.700 --> 00:13:03.060
All right. You got the next one?


00:13:03.060 --> 00:13:07.460
>> Well, I think we're at the sponsor bit.


00:13:07.460 --> 00:13:08.620
>> I believe we are.


00:13:08.620 --> 00:13:13.300
>> Yeah. I don't have our sponsor up.


00:13:13.300 --> 00:13:14.300
>> I got you.


00:13:14.300 --> 00:13:15.820
>> There we go. This episode of


00:13:15.820 --> 00:13:17.780
Python Bytes is brought to you by Sentry.


00:13:17.780 --> 00:13:20.540
How would you like to remove a little stress from your life?


00:13:20.540 --> 00:13:24.300
Well, do you worry that users may be


00:13:24.300 --> 00:13:26.640
having difficulties or encountering errors in your app?


00:13:26.640 --> 00:13:30.920
Right now, would you even know until they sent you a support e-mail?


00:13:30.920 --> 00:13:32.920
How much better would it be to have


00:13:32.920 --> 00:13:36.060
error and performance details immediately sent to you,


00:13:36.060 --> 00:13:38.140
including the call stack and values of


00:13:38.140 --> 00:13:41.760
local variables and the active user recorded in the report?


00:13:41.760 --> 00:13:43.280
That'd be awesome. With Sentry,


00:13:43.280 --> 00:13:45.120
it's not only possible but simple.


00:13:45.120 --> 00:13:47.480
In fact, Michael uses Sentry on all of


00:13:47.480 --> 00:13:50.480
his web properties including Python bytes here.


00:13:50.480 --> 00:13:52.620
He actually fixed a bug triggered by


00:13:52.620 --> 00:13:57.000
a user and had the upgrade ready to roll out as he got the support email.


00:13:57.000 --> 00:13:59.940
That's also Sentry, but also because Michael's awesome.


00:13:59.940 --> 00:14:03.080
But anyway, surprise and delight your users today.


00:14:03.080 --> 00:14:06.700
Create your Sentry account at pythonbytes.fm/sentry.


00:14:06.700 --> 00:14:08.100
Please, when signing up,


00:14:08.100 --> 00:14:14.620
click the "Got a promo code" and redeem and enter Python bytes, all one word.


00:14:14.620 --> 00:14:18.100
It's good for two free months of Sentry's team plan,


00:14:18.100 --> 00:14:20.660
which will give you up to 20 times as many


00:14:20.660 --> 00:14:23.020
monthly events, as well as other features.


00:14:23.020 --> 00:14:28.020
That's Python bytes slash Sentry and promo code Python bytes.


00:14:28.020 --> 00:14:29.180
- Yep, thanks Sentry.


00:14:29.180 --> 00:14:30.860
All right, I guess I got the next one.


00:14:30.860 --> 00:14:34.380
This one is sent in by a friend of the show, Brian Skin.


00:14:34.380 --> 00:14:35.340
Thank you, Brian.


00:14:35.340 --> 00:14:38.900
And he let us know that there is something out there


00:14:38.900 --> 00:14:42.060
for all of us who love these external packages


00:14:42.060 --> 00:14:44.620
and all of these amazing Lego building blocks


00:14:44.620 --> 00:14:48.860
that are PyPI, and yet that's running other people's code


00:14:48.860 --> 00:14:52.380
with dependencies on them getting things right.


00:14:52.380 --> 00:14:54.700
And this is under the PyPA.


00:14:54.700 --> 00:14:58.040
So this is sort of pretty neat in terms of,


00:14:58.040 --> 00:14:59.340
you know, being officially


00:14:59.340 --> 00:15:02.060
the Python Packaging Authority Group, right?


00:15:02.060 --> 00:15:03.020
I believe.


00:15:03.020 --> 00:15:06.060
And so it's called the Advisory-DB.


00:15:06.060 --> 00:15:08.320
It's a security advisory database


00:15:08.320 --> 00:15:11.260
for Python packages published on pypi.org.


00:15:11.260 --> 00:15:15.100
And the idea is if somebody finds some major problem


00:15:15.100 --> 00:15:17.780
with the package, or maybe even worse,


00:15:17.780 --> 00:15:19.940
maybe it's like a type of squatting scenario,


00:15:19.940 --> 00:15:21.820
but more like, you know that part


00:15:21.820 --> 00:15:24.580
where they were supposed to check the input in that form,


00:15:24.580 --> 00:15:26.940
and then they did this direct SQL query,


00:15:26.940 --> 00:15:28.420
they didn't do that, now they are,


00:15:28.420 --> 00:15:30.020
you really, really should change that


00:15:30.020 --> 00:15:33.320
so that they're using like parameterized queries now.


00:15:33.320 --> 00:15:36.700
And so there's a vulnerabilities directory


00:15:36.700 --> 00:15:38.940
that is just a bunch of YAML files.


00:15:38.940 --> 00:15:41.700
You come over here, like, let's take one here


00:15:41.700 --> 00:15:44.060
that maybe is security conscious, Bleach.


00:15:44.060 --> 00:15:45.980
I love the name of this package.


00:15:45.980 --> 00:15:48.380
The idea is you take user input and you sanitize it


00:15:48.380 --> 00:15:50.380
by putting bleach on it, which is fantastic,


00:15:50.380 --> 00:15:53.180
but even the sanitizers can have problems, right?


00:15:53.180 --> 00:15:56.500
So we checked this out back apparently in 2020,


00:15:56.500 --> 00:15:59.460
there's a problem with bleach in PyPI.


00:15:59.460 --> 00:16:02.180
It said in Mozilla bleach before 3.12,


00:16:02.180 --> 00:16:06.420
a mutation XSS cross-site scripted in bleach.clean


00:16:06.420 --> 00:16:11.060
when RC data and either the SVG or math tags


00:16:11.060 --> 00:16:14.140
are whitelisted and such and such is set, like, oh my gosh,


00:16:14.140 --> 00:16:15.540
but here's all the version it affects


00:16:15.540 --> 00:16:17.000
and here's the fixed version.


00:16:17.000 --> 00:16:18.960
And then there's some more info about like


00:16:18.960 --> 00:16:20.440
where that was spoken about,


00:16:20.440 --> 00:16:22.800
like where the problem was discovered and so on.


00:16:22.800 --> 00:16:23.640
This is really cool.


00:16:23.640 --> 00:16:25.140
So if you depend on these packages,


00:16:25.140 --> 00:16:26.320
and we already spoke at the beginning


00:16:26.320 --> 00:16:29.320
about how having a tracking your dependencies,


00:16:29.320 --> 00:16:31.200
not just the things you directly install,


00:16:31.200 --> 00:16:33.000
lets you be more aware of this, right?


00:16:33.000 --> 00:16:35.480
You could look at that pip tools generated


00:16:35.480 --> 00:16:38.000
requirements.txt file and see this problem.


00:16:38.000 --> 00:16:40.760
And then very likely GitHub through dependent bot


00:16:40.760 --> 00:16:42.840
would even be proposing a fix.


00:16:42.840 --> 00:16:43.660
What do you guys think?


00:16:43.660 --> 00:16:44.500
- Yeah, that's great.


00:16:44.500 --> 00:16:46.420
- I think this is cool.


00:16:46.420 --> 00:16:47.380
So how do you use it?


00:16:47.380 --> 00:16:49.780
Do you just look stuff up or?


00:16:49.780 --> 00:16:50.800
- You let it help you.


00:16:50.800 --> 00:16:53.180
I mean, you can come over here and obviously look it up.


00:16:53.180 --> 00:16:54.840
It depends on what's going on.


00:16:54.840 --> 00:16:56.980
I think more if you're maintaining a package,


00:16:56.980 --> 00:17:00.380
you can do a PR to let people know.


00:17:00.380 --> 00:17:04.580
There's a triage service, which goes through the NIST.


00:17:04.580 --> 00:17:06.860
It pulls a lot of data from the NIST,


00:17:06.860 --> 00:17:07.700
what's it called?


00:17:07.700 --> 00:17:10.260
The National Vulnerability Database Data Feed.


00:17:10.260 --> 00:17:11.500
Woo, say that again.


00:17:11.500 --> 00:17:13.140
So like if it gets submitted there,


00:17:13.140 --> 00:17:16.100
it gets a lot of the data gets pulled back in.


00:17:16.100 --> 00:17:18.260
They have a tool to perform some heuristics


00:17:18.260 --> 00:17:19.540
to match that back up.


00:17:19.540 --> 00:17:21.340
And then you can do most importantly


00:17:21.340 --> 00:17:23.540
is there's an API that you can use.


00:17:23.540 --> 00:17:25.960
So these vulnerabilities when submitted


00:17:25.960 --> 00:17:29.420
to this GitHub repository are then submitted outwardly


00:17:29.420 --> 00:17:32.780
to this place called the open source vulnerability


00:17:32.780 --> 00:17:34.940
or the database for open source vulnerabilities.


00:17:34.940 --> 00:17:38.560
And then this has an API that people can call


00:17:38.560 --> 00:17:39.820
to learn about these problems.


00:17:39.820 --> 00:17:42.460
So if you ran, I don't know, if you were an API company


00:17:42.460 --> 00:17:45.100
you wanted to make sure your API wasn't getting hacked


00:17:45.100 --> 00:17:46.340
by having a bad dependency,


00:17:46.340 --> 00:17:50.180
maybe you make this part of your CI/CD or something, Mike.


00:17:50.180 --> 00:17:51.100
- Yeah, absolutely.


00:17:51.100 --> 00:17:54.980
I'm gonna have to tell our DevOps guru, Mitch,


00:17:54.980 --> 00:17:55.820
to look into this.


00:17:55.820 --> 00:17:56.660
(laughing)


00:17:56.660 --> 00:17:57.740
- Exactly.


00:17:57.740 --> 00:17:59.820
So, I mean, for the most part,


00:17:59.820 --> 00:18:01.940
having stuff pinned in GitHub


00:18:01.940 --> 00:18:05.380
will trigger an immediate security notification to you


00:18:05.380 --> 00:18:07.900
when GitHub finds out about it, when it makes it out.


00:18:07.900 --> 00:18:09.860
But if you wanna be a little more proactive


00:18:09.860 --> 00:18:12.420
or you're a security researcher or something like that,


00:18:12.420 --> 00:18:13.580
This looks like a good one.


00:18:13.580 --> 00:18:15.960
So in the longer term, we're looking,


00:18:15.960 --> 00:18:19.180
we're working with the PyPI team to build a pipeline


00:18:19.180 --> 00:18:21.460
to automatically get these vulnerabilities into PyPI.


00:18:21.460 --> 00:18:23.940
So maybe like you could see it or something like that.


00:18:23.940 --> 00:18:26.500
I'm not exactly sure what the story is there,


00:18:26.500 --> 00:18:29.900
but it's a start for basically storing that data


00:18:29.900 --> 00:18:31.040
and sharing that data.


00:18:31.040 --> 00:18:33.140
And then hopefully like it makes its way over


00:18:33.140 --> 00:18:34.780
to PyPI and such.


00:18:34.780 --> 00:18:35.980
Sam Morley, welcome.


00:18:35.980 --> 00:18:37.700
Glad you made the live show, man.


00:18:37.700 --> 00:18:41.000
Said, is there a tool that can run like a pre-commit hook?


00:18:41.000 --> 00:18:44.040
I feel like maybe with just a tiny bit of wrapper,


00:18:44.040 --> 00:18:46.320
you could call that API over at the open source


00:18:46.320 --> 00:18:49.200
vulnerabilities project and get some information back.


00:18:49.200 --> 00:18:50.040
- Yeah, that'd be cool.


00:18:50.040 --> 00:18:50.880
- Yeah, that would be a cool thing.


00:18:50.880 --> 00:18:52.880
Like don't check that in, it's got a problem.


00:18:52.880 --> 00:18:55.160
- Yeah, don't push it.


00:18:55.160 --> 00:18:56.840
- Yeah, exactly, exactly.


00:18:56.840 --> 00:18:59.000
So anyway, I think this is a pretty cool one.


00:18:59.000 --> 00:19:01.280
Thanks Brian Skin for sending it in.


00:19:01.280 --> 00:19:03.380
- Yeah, so I don't know.


00:19:03.380 --> 00:19:04.320
- Sorry, Brian, I was gonna say,


00:19:04.320 --> 00:19:06.760
yeah, you're a C++ developer, right?


00:19:06.760 --> 00:19:07.600
- Yeah.


00:19:07.600 --> 00:19:10.360
- And C++ is all about overriding functions by type.


00:19:10.360 --> 00:19:11.800
Like, oh, it takes an int, it takes a float.


00:19:11.800 --> 00:19:13.640
This one takes a string and it's totally different.


00:19:13.640 --> 00:19:15.000
Python doesn't have that.


00:19:15.000 --> 00:19:17.040
- Yeah, what's funny is I don't actually use it


00:19:17.040 --> 00:19:18.160
that much in C++.


00:19:18.160 --> 00:19:20.380
I mean, you learn about it a lot,


00:19:20.380 --> 00:19:23.000
but I don't, I mean, I normally don't write


00:19:23.000 --> 00:19:25.340
a whole bunch of functions that have the same name


00:19:25.340 --> 00:19:26.760
but take different parameters.


00:19:26.760 --> 00:19:28.480
But you can do, yes, you can do that,


00:19:28.480 --> 00:19:30.320
definitely do it in C++ and C.


00:19:30.320 --> 00:19:33.460
And there's probably other languages you can do that in,


00:19:33.460 --> 00:19:35.920
but those are the two main languages that I work with.


00:19:35.920 --> 00:19:37.400
- C#, for example, does it.


00:19:37.400 --> 00:19:39.160
- Java as well.


00:19:39.160 --> 00:19:40.600
The Python, you cannot.


00:19:40.600 --> 00:19:44.460
Python, if you try to do that,


00:19:44.460 --> 00:19:46.480
the second one wins and you just have


00:19:46.480 --> 00:19:49.760
another name that is attached to the function.


00:19:49.760 --> 00:19:53.200
I never really thought that I had a problem with this,


00:19:53.200 --> 00:19:56.020
but there are definitely times where it would be simpler to not


00:19:56.020 --> 00:19:59.500
try to put a switch in place or something and just


00:19:59.500 --> 00:20:02.720
have several functions that dealt


00:20:02.720 --> 00:20:06.680
with related things but in different functions.


00:20:06.680 --> 00:20:12.080
there's an article called The Correct Way to Overload Functions in Python.


00:20:12.080 --> 00:20:17.320
Maybe it is, but I'm not somebody that likes to use the phrase,


00:20:17.320 --> 00:20:20.340
the correct way because somebody will tell me I'm wrong.


00:20:20.340 --> 00:20:22.080
But anyway, it's an interesting article.


00:20:22.080 --> 00:20:23.520
>> You might, for example, hear like,


00:20:23.520 --> 00:20:25.280
you shouldn't overload functions in Python.


00:20:25.280 --> 00:20:27.280
You're doing it wrong if you do it at all, for example.


00:20:27.280 --> 00:20:28.640
>> Yeah, exactly.


00:20:28.640 --> 00:20:31.040
>> Although this is a cool solution. I totally like it.


00:20:31.040 --> 00:20:32.640
>> Definitely, it's a cool solution.


00:20:32.640 --> 00:20:38.360
There's apparently a built-in way with FuncTools.


00:20:38.360 --> 00:20:44.480
FuncTools has a decorator called single dispatch.


00:20:44.480 --> 00:20:47.320
What it does is you can decorate


00:20:47.320 --> 00:20:50.720
basically a function signature with a single function.


00:20:50.720 --> 00:20:53.800
You say, I'm going to single dispatch this function.


00:20:53.800 --> 00:20:55.360
Then you register all,


00:20:55.360 --> 00:20:58.160
you do the name of the function.register as


00:20:58.160 --> 00:21:03.320
decorators around other functions.


00:21:03.320 --> 00:21:07.760
The example shown in the articles just uses underscore.


00:21:07.760 --> 00:21:10.480
I'm guessing that's just because you don't care what the name is.


00:21:10.480 --> 00:21:13.640
I don't know, but that seems like a good way to do it.


00:21:13.640 --> 00:21:17.280
Then after that, you just have that works.


00:21:17.280 --> 00:21:19.840
It works like you've done function overloading.


00:21:19.840 --> 00:21:22.540
>> That's awesome. In the example it takes,


00:21:22.540 --> 00:21:25.220
you can call this format function with a string,


00:21:25.220 --> 00:21:28.340
with a date, with a date time and a time,


00:21:28.340 --> 00:21:29.540
and you actually get,


00:21:29.540 --> 00:21:31.500
there's like three different functions that get called.


00:21:31.500 --> 00:21:32.540
One for a string,


00:21:32.540 --> 00:21:35.180
one for a date, one that just falls back or something.


00:21:35.180 --> 00:21:41.460
>> Yeah. It's a pretty simple example and it's pretty clean code.


00:21:41.460 --> 00:21:44.580
I would definitely try to keep all these things


00:21:44.580 --> 00:21:47.580
together in one module of course.


00:21:47.580 --> 00:21:49.900
>> You would be mean to put them in different places.


00:21:49.900 --> 00:21:50.900
That would be so wrong.


00:21:50.900 --> 00:21:54.540
>> Or even like spread out in the same function would be terrible.


00:21:54.540 --> 00:21:58.820
but keeping them together, this is great.


00:21:58.820 --> 00:22:02.640
One of the things that the article mentions is that,


00:22:02.640 --> 00:22:10.700
it's called single dispatch because it's based on the type of the first parameter.


00:22:10.700 --> 00:22:13.780
So if you want to do multi-parameter ones,


00:22:13.780 --> 00:22:18.980
there's a third-party plugin called multiple dispatch.


00:22:18.980 --> 00:22:19.740
>> Wow.


00:22:19.740 --> 00:22:21.580
>> You can just pip install.


00:22:21.580 --> 00:22:23.940
Then it works the same, although-


00:22:23.940 --> 00:22:25.860
- Ooh, I kind of like this one better, honestly.


00:22:25.860 --> 00:22:27.860
- The syntax is a little different


00:22:27.860 --> 00:22:31.580
and it probably does single dispatch too, I'm guessing.


00:22:31.580 --> 00:22:34.060
- Yeah, just one parameter.


00:22:34.060 --> 00:22:37.860
- But in this one, yeah, similar sort of thing.


00:22:37.860 --> 00:22:41.220
It just works on multiple parameters, multiple options.


00:22:41.220 --> 00:22:43.020
- I'm digging the multiple dispatch style


00:22:43.020 --> 00:22:46.260
where you just say dispatch, this is arguments are list str.


00:22:46.260 --> 00:22:49.260
You know, we're gonna maybe get to where Mike is going


00:22:49.260 --> 00:22:51.500
at the end of the show, but it would be even cooler


00:22:51.500 --> 00:22:57.100
you could just say at dispatch and then put a type like a colon list B colon


00:22:57.100 --> 00:22:57.580
stir.


00:22:57.580 --> 00:23:01.700
So I want to dispatch on types and stuff like that and have the dispatch


00:23:01.700 --> 00:23:05.620
uh, decorator look at the function that's passed in and look at the type


00:23:05.620 --> 00:23:07.240
parameters and then just do that.


00:23:07.240 --> 00:23:10.460
So you don't have to say the types more than once anyway.


00:23:10.460 --> 00:23:12.620
We'll, we come back to that as well.


00:23:12.620 --> 00:23:13.040
Yeah.


00:23:13.040 --> 00:23:15.640
So, so I, you know, I'm in a past life.


00:23:15.640 --> 00:23:21.340
I was, I was a Java engineer, so we, you know, we call it


00:23:21.340 --> 00:23:22.860
dynamic dispatch in Java.


00:23:22.860 --> 00:23:25.620
And it's actually, there's a lot of patterns,


00:23:25.620 --> 00:23:28.420
object-oriented patterns that kind of are derived


00:23:28.420 --> 00:23:31.100
from that feature, from the, you know,


00:23:31.100 --> 00:23:34.460
from again, from the C++, well, from the old days.


00:23:34.460 --> 00:23:38.900
And yeah, no, to me, this actually, you know,


00:23:38.900 --> 00:23:40.460
when I saw it, I was like, okay,


00:23:40.460 --> 00:23:43.620
I could definitely use this for a lot of cases.


00:23:43.620 --> 00:23:46.100
I know that like when you might wanna build,


00:23:46.100 --> 00:23:47.460
when you have like a piece of code


00:23:47.460 --> 00:23:49.820
that has to work with a variety of different types,


00:23:49.820 --> 00:23:51.860
but they're very similar types maybe,


00:23:51.860 --> 00:23:55.900
and you want to do something with that family of types,


00:23:55.900 --> 00:23:58.080
you know, I think that would be something I would,


00:23:58.080 --> 00:24:00.540
you know, I would think to look at,


00:24:00.540 --> 00:24:02.580
to solve with something like this.


00:24:02.580 --> 00:24:03.660
- Yeah, yeah.


00:24:03.660 --> 00:24:05.100
I kind of had the same thought,


00:24:05.100 --> 00:24:07.380
and I do not think I would make this


00:24:07.380 --> 00:24:10.500
any sort of normal workflow use case for my code,


00:24:10.500 --> 00:24:13.060
but there are times where you have some code that says,


00:24:13.060 --> 00:24:15.640
if, you know, argument is,


00:24:15.640 --> 00:24:17.820
the type of this is a list, do this thing.


00:24:17.820 --> 00:24:19.720
If it's not a list, then make an empty list,


00:24:19.720 --> 00:24:21.200
put it in and then do this other thing.


00:24:21.200 --> 00:24:24.160
You know, like if you're doing that type switching already,


00:24:24.160 --> 00:24:27.400
like this dispatch thing might actually make it more clear.


00:24:27.400 --> 00:24:29.000
Right? It's not common to do it in Python,


00:24:29.000 --> 00:24:29.840
but there are times you're like,


00:24:29.840 --> 00:24:31.960
I kind of want to be able to take a string or a date time


00:24:31.960 --> 00:24:33.440
and then just parse the string of it.


00:24:33.440 --> 00:24:35.080
You know, those kinds of things.


00:24:35.080 --> 00:24:37.000
- So, as an API company,


00:24:37.000 --> 00:24:38.360
this is actually kind of interesting,


00:24:38.360 --> 00:24:40.440
it fits into what we do as an API company.


00:24:40.440 --> 00:24:43.420
We have to, a lot of times, you know, we're not very,


00:24:43.420 --> 00:24:45.840
we're not overly strict on our input types.


00:24:45.840 --> 00:24:48.640
We allow like truthy and falsy kind of types to come in


00:24:48.640 --> 00:24:53.040
for like Booleans and I could see us using this for that.


00:24:53.040 --> 00:24:55.800
Right, so that way, instead of using all the helper code


00:24:55.800 --> 00:24:56.640
we've already written for that,


00:24:56.640 --> 00:24:58.240
have it more along the lines of,


00:24:58.240 --> 00:25:00.240
okay, if it's this type of input,


00:25:00.240 --> 00:25:01.960
you know, then you can convert it this way.


00:25:01.960 --> 00:25:04.000
If it's this type of input, you can convert it that way.


00:25:04.000 --> 00:25:06.280
And I think we could probably write some code


00:25:06.280 --> 00:25:09.400
to handle our inputs differently using this pattern.


00:25:09.400 --> 00:25:11.320
- Yeah, yeah, very neat insight there.


00:25:11.320 --> 00:25:13.160
Brian, you blew up our chat with this.


00:25:13.160 --> 00:25:14.760
(Brian laughs)


00:25:14.760 --> 00:25:16.400
- Well, you wanna pull out some highlights?


00:25:16.400 --> 00:25:17.220
- Yeah, all right.


00:25:17.220 --> 00:25:20.960
So John Cian says, "Function overloading was one of those things like switch statements


00:25:20.960 --> 00:25:24.780
that I missed when I first started Python, but then I found I rarely needed it."


00:25:24.780 --> 00:25:26.300
Yeah, I'm kind of with you on that.


00:25:26.300 --> 00:25:30.100
Like I said, there's a few cases for me that I'm like, where I'm doing a type check or


00:25:30.100 --> 00:25:32.780
is instance of, that I think is the one time.


00:25:32.780 --> 00:25:34.780
But that's a couple of times in a whole program.


00:25:34.780 --> 00:25:36.540
What do you think, Brian?


00:25:36.540 --> 00:25:41.100
>> Yeah, I definitely missed it at first, and now I just don't even really notice it.


00:25:41.100 --> 00:25:42.100
>> Yeah.


00:25:42.100 --> 00:25:42.940
(laughing)


00:25:42.940 --> 00:25:45.100
- Then you've got, you're gonna get into this,


00:25:45.100 --> 00:25:49.540
Luciano Romano, also explains this in Fluent Python.


00:25:49.540 --> 00:25:52.780
I just read the pre-version of the second edition,


00:25:52.780 --> 00:25:54.060
getting some polish, yeah, very nice.


00:25:54.060 --> 00:25:57.220
That's a really good book, Fluent Python as well.


00:25:57.220 --> 00:25:58.040
Came out there says,


00:25:58.040 --> 00:25:59.580
"That's the kind of thing I was thinking of."


00:25:59.580 --> 00:26:02.220
Yeah, oh, sorry, that's a different comment.


00:26:02.220 --> 00:26:03.220
I'll come back to that in a minute.


00:26:03.220 --> 00:26:04.540
And then, (laughing)


00:26:04.540 --> 00:26:07.660
Sam Morley, "I don't tend to find this kind of dispatching


00:26:07.660 --> 00:26:09.660
"that useful, I generally just write a master function


00:26:09.660 --> 00:26:12.300
that takes star, star, KW args


00:26:12.300 --> 00:26:13.740
and dispatch to other functions.


00:26:13.740 --> 00:26:14.660
- Yeah. - Yep.


00:26:14.660 --> 00:26:16.380
- But if you're switching on this instance,


00:26:16.380 --> 00:26:18.180
it could be a time.


00:26:18.180 --> 00:26:19.020
- Yeah.


00:26:19.020 --> 00:26:20.820
- And then stepping back one quick topic,


00:26:20.820 --> 00:26:23.340
Kim VanWijk says, "Would be handy if some pip tooling


00:26:23.340 --> 00:26:25.560
"could automatically check the PyPA advisory


00:26:25.560 --> 00:26:27.060
"before downloading a package."


00:26:27.060 --> 00:26:28.460
That would be slick, yeah.


00:26:28.460 --> 00:26:32.100
I just did a typo squatting and PyPI security episode


00:26:32.100 --> 00:26:34.780
over on Talk Python and we had a lot of interesting ideas,


00:26:34.780 --> 00:26:36.740
like almost like a have I been pwned,


00:26:36.740 --> 00:26:38.260
like remember what I installed


00:26:38.260 --> 00:26:39.500
and if you ever see I installed something,


00:26:39.500 --> 00:26:41.180
and how to vulnerability quick, shoot me a note,


00:26:41.180 --> 00:26:42.820
let me know, hey, a few weeks ago,


00:26:42.820 --> 00:26:44.100
you installed this thing,


00:26:44.100 --> 00:26:45.940
you might wanna get rid of it now, stuff like that.


00:26:45.940 --> 00:26:48.500
I think this is another interesting thing along those lines.


00:26:48.500 --> 00:26:50.180
All right, like how to cache that data


00:26:50.180 --> 00:26:53.060
and then just say, you know, I know you wanna install it.


00:26:53.060 --> 00:26:54.340
And maybe this is what they're talking about


00:26:54.340 --> 00:26:57.380
with integrating that into pypi.org itself, who knows?


00:26:57.380 --> 00:26:58.220
But very cool.


00:26:58.220 --> 00:27:00.220
All right, Mike, you got the last one, some secret.


00:27:00.220 --> 00:27:05.220
- Yeah, so AIO SQL is a, as it says, simple SQL in Python.


00:27:06.220 --> 00:27:09.240
It's a SQL templating framework or library


00:27:09.240 --> 00:27:14.080
that really, what you do is you give it some SQL files


00:27:14.080 --> 00:27:16.060
with some, it has some conventions


00:27:16.060 --> 00:27:18.120
around how you define queries.


00:27:18.120 --> 00:27:20.740
And then it essentially gives you a query mapping


00:27:20.740 --> 00:27:22.520
that you can then use in your code.


00:27:22.520 --> 00:27:24.540
And this is kind of a, it's a minimalistic way


00:27:24.540 --> 00:27:27.340
of accessing your database.


00:27:27.340 --> 00:27:30.180
It is, with the A in front of it,


00:27:30.180 --> 00:27:33.060
it's natively asynchronous.


00:27:33.060 --> 00:27:35.940
It works really well with async-pg.


00:27:35.940 --> 00:27:44.660
I know that we use Postgres, so that was a highlight for us to look at it.


00:27:44.660 --> 00:27:48.060
And I think we all have worked with ORMs.


00:27:48.060 --> 00:27:51.420
I've come back and forth on ORMs over the years.


00:27:51.420 --> 00:27:59.140
I think this is a nice fit for when you don't have to touch a lot of different tables or


00:27:59.140 --> 00:28:00.140
do a lot of joins.


00:28:00.140 --> 00:28:05.380
Maybe you have a small microservice that just needs to do a couple, you know, reads and


00:28:05.380 --> 00:28:07.820
writes updates.


00:28:07.820 --> 00:28:12.740
And it also I think this really helps because ORMs, especially when you're dealing at scale,


00:28:12.740 --> 00:28:16.660
you have to really know the ORM at a very deep level to understand what it's doing.


00:28:16.660 --> 00:28:20.180
And this kind of exposes all of, you know, it really just brings you down to the SQL


00:28:20.180 --> 00:28:21.180
level.


00:28:21.180 --> 00:28:22.180
So now you know exactly what you're doing.


00:28:22.180 --> 00:28:26.620
And you can be a little bit more direct on what you want to do with your data.


00:28:26.620 --> 00:28:27.860
- Yeah, yeah, sometimes you're like,


00:28:27.860 --> 00:28:31.420
well, I want to do the join and then the filter


00:28:31.420 --> 00:28:32.780
not the filter, then the, I don't know.


00:28:32.780 --> 00:28:34.700
Like if you're really good at SQL,


00:28:34.700 --> 00:28:37.100
you can put these little tricks and like,


00:28:37.100 --> 00:28:39.420
oh, it's actually likes it better if we do it this way


00:28:39.420 --> 00:28:40.260
rather than that way.


00:28:40.260 --> 00:28:42.140
And, oh, I'm probably not gonna let you do that.


00:28:42.140 --> 00:28:44.340
So let me just describe this to people out there


00:28:44.340 --> 00:28:46.740
'cause it's breaking some paradigms for me.


00:28:46.740 --> 00:28:51.080
So this is a library that allows you to write queries


00:28:51.080 --> 00:28:55.460
against a database, but you do it almost with data access,


00:28:55.460 --> 00:28:57.720
data access layer style of things.


00:28:57.720 --> 00:29:01.860
So you don't do a quote select star from such and such.


00:29:01.860 --> 00:29:05.600
You would say like query.getAllGreetings


00:29:05.600 --> 00:29:08.780
or getUserByUsername and you pass a username equals


00:29:08.780 --> 00:29:10.900
such and such in an asynchronous way,


00:29:10.900 --> 00:29:12.620
which is pretty interesting.


00:29:12.620 --> 00:29:15.180
But the way that that has meaning is you create


00:29:15.180 --> 00:29:18.900
a .sql file that has like a doc string like thing


00:29:18.900 --> 00:29:22.020
and you write a bunch of SQL, almost like stored procedures,


00:29:22.020 --> 00:29:23.300
but just in a text file.


00:29:23.300 --> 00:29:25.100
This thing parses it and then it becomes


00:29:25.100 --> 00:29:28.020
like a smart query data access layer.


00:29:28.020 --> 00:29:28.860
- Correct, yeah.


00:29:28.860 --> 00:29:31.940
So it basically builds out other data access layer


00:29:31.940 --> 00:29:33.560
or data access object kind of for you


00:29:33.560 --> 00:29:38.060
where you can basically map in these queries.


00:29:38.060 --> 00:29:40.320
And it's not just queries, you can do mutations


00:29:40.320 --> 00:29:42.620
and you can do DDL and all of that.


00:29:42.620 --> 00:29:44.700
So yeah, it gives you--


00:29:44.700 --> 00:29:46.260
- Like create tables or whatever,


00:29:46.260 --> 00:29:47.740
give you a function you call, yeah.


00:29:47.740 --> 00:29:48.660
- Absolutely, so--


00:29:48.660 --> 00:29:49.500
- Brian, what do you think?


00:29:49.500 --> 00:29:51.620
Do you touch SQL much these days?


00:29:51.620 --> 00:29:55.820
I'm touching it more and more and I love this actually.


00:29:55.820 --> 00:29:57.860
Because I always assume if there's a bug,


00:29:57.860 --> 00:29:59.720
it's probably in my SQL statement.


00:29:59.720 --> 00:30:01.340
But this looks pretty cool.


00:30:01.340 --> 00:30:05.380
So get your selects and stuff figured out what queries you want to


00:30:05.380 --> 00:30:10.420
do ahead of time and then use them in your code. This is cool.


00:30:10.420 --> 00:30:16.380
>> Yeah. I'm very repelled by writing raw SQL statements in my code.


00:30:16.380 --> 00:30:18.860
Very much like Kim VanWijk others.


00:30:18.860 --> 00:30:20.900
This looks exactly what I like,


00:30:20.900 --> 00:30:23.460
like not writing SQL but not using ORM.


00:30:23.460 --> 00:30:25.140
So it's no secret to the world out there


00:30:25.140 --> 00:30:26.520
that I'm a MongoDB fan.


00:30:26.520 --> 00:30:29.660
So I don't have like direct use for this a lot,


00:30:29.660 --> 00:30:31.420
but I do find this super valuable,


00:30:31.420 --> 00:30:34.700
especially if people on the team are really good at SQL


00:30:34.700 --> 00:30:37.420
and they're like, "Oh, this library is inhibiting me


00:30:37.420 --> 00:30:40.300
"from like using my superpower on the database."


00:30:40.300 --> 00:30:41.260
Right, Mike? - Exactly.


00:30:41.260 --> 00:30:42.100
Yeah, that's exactly.


00:30:42.100 --> 00:30:43.540
And I was just about to say that, you know,


00:30:43.540 --> 00:30:46.140
if you have a DBA or you have someone who is,


00:30:46.140 --> 00:30:48.540
you know, basically they are focused or concentrated


00:30:48.540 --> 00:30:51.440
on the database and optimizing those queries.


00:30:51.440 --> 00:30:54.820
You know, I think what this allows you to do,


00:30:54.820 --> 00:30:56.580
then you can go define your queries,


00:30:56.580 --> 00:30:59.460
you can write them yourself how they are as developer,


00:30:59.460 --> 00:31:01.500
and then maybe you can take that to the experts


00:31:01.500 --> 00:31:03.680
and have him refine them for you


00:31:03.680 --> 00:31:05.600
without actually changing the abstraction, right?


00:31:05.600 --> 00:31:07.880
Like without, you still get that, yeah.


00:31:07.880 --> 00:31:09.180
- Yeah, there's also times where like,


00:31:09.180 --> 00:31:10.700
let's say I've got an internal tool


00:31:10.700 --> 00:31:12.940
that I wanna put together and it needs a database,


00:31:12.940 --> 00:31:14.680
and it's really not that big of a deal


00:31:14.680 --> 00:31:17.460
to tell like your IT department


00:31:17.460 --> 00:31:18.580
and your supervisor and stuff,


00:31:18.580 --> 00:31:20.820
you're gonna throw up a MySQL database


00:31:20.820 --> 00:31:24.420
or something and interact with it or Postgres.


00:31:24.420 --> 00:31:27.180
But to say, "Hey, I'm gonna throw Mongo in there,"


00:31:27.180 --> 00:31:29.820
that might bring up just a discussion


00:31:29.820 --> 00:31:31.580
that you're just not ready to have.


00:31:31.580 --> 00:31:33.540
- Yeah, for sure.


00:31:33.540 --> 00:31:37.500
Let me suggest a pairing, kind of like as you pair wines,


00:31:37.500 --> 00:31:39.340
a pairing with this library.


00:31:39.340 --> 00:31:41.980
I think Pydantic might go fantastic with this, right?


00:31:41.980 --> 00:31:45.420
So you get these results back as tuples


00:31:45.420 --> 00:31:48.760
And then you could just, you know, star orgs that


00:31:48.760 --> 00:31:52.520
into your Pydantic models and you get your validation


00:31:52.520 --> 00:31:53.960
and all sorts of like stuff.


00:31:53.960 --> 00:31:55.240
And then you get a list of Pydantic,


00:31:55.240 --> 00:31:57.400
like you're one list comprehension away


00:31:57.400 --> 00:31:58.840
from something beautiful here.


00:31:58.840 --> 00:32:01.040
- Yeah, this is, that's exactly what we're doing.


00:32:01.040 --> 00:32:02.840
You know, we're using, you know, I think right now


00:32:02.840 --> 00:32:05.240
we're building out a new stack and it's basically,


00:32:05.240 --> 00:32:09.280
it's FastAPI, Pydantic, you know, AIO SQL.


00:32:09.280 --> 00:32:10.120
- Oh, interesting.


00:32:10.120 --> 00:32:11.920
And you're finding it works well?


00:32:11.920 --> 00:32:13.720
- Oh, it's, yeah, and it's very performant.


00:32:13.720 --> 00:32:15.920
So it's, you know, because it's asynchronous, right?


00:32:15.920 --> 00:32:18.460
We're using async PG all the way down to the database too.


00:32:18.460 --> 00:32:21.360
So it's pretty much asynchronous from end to end.


00:32:21.360 --> 00:32:22.200
- Fantastic.


00:32:22.200 --> 00:32:23.600
This is a really good recommendation.


00:32:23.600 --> 00:32:24.920
Yeah. You like it too, right, Brian?


00:32:24.920 --> 00:32:25.760
It's pretty sweet.


00:32:25.760 --> 00:32:26.580
- Yeah, this is great.


00:32:26.580 --> 00:32:27.980
- Yeah, I do.


00:32:27.980 --> 00:32:30.080
I really like the separation of concerns


00:32:30.080 --> 00:32:32.540
of the SQL statements and the Python code,


00:32:32.540 --> 00:32:34.980
but the flexibility of having both, it's pretty cool.


00:32:34.980 --> 00:32:35.820
- Awesome.


00:32:35.820 --> 00:32:37.000
- Brian, is that it for us?


00:32:37.000 --> 00:32:37.840
- Yeah.


00:32:37.840 --> 00:32:41.120
- Or maybe you have any other topics they want to bring up?


00:32:41.120 --> 00:32:42.720
- Oh, you know I do.


00:32:42.720 --> 00:32:45.920
- Kind of crazy, so not quite an extra, extra, extra,


00:32:45.920 --> 00:32:46.820
extra here all about it.


00:32:46.820 --> 00:32:50.180
But a couple of things sent in from some listeners.


00:32:50.180 --> 00:32:52.900
So let me make sure I credit these.


00:32:52.900 --> 00:32:57.340
So Daniel Mulkey sent this one in and said,


00:32:57.340 --> 00:32:59.980
"There is now, has been for a little while,


00:32:59.980 --> 00:33:03.180
"from Science Direct, there's a journal for academics


00:33:03.180 --> 00:33:06.840
"called Software X, and this library is pretty cool.


00:33:06.840 --> 00:33:10.200
"So it aims to acknowledge the impact of software


00:33:10.200 --> 00:33:11.280
"in today's research."


00:33:11.280 --> 00:33:14.340
So if you're in academics, one of the big challenges


00:33:14.340 --> 00:33:16.500
is that whole publish or perish sort of thing.


00:33:16.500 --> 00:33:18.640
And it would be great to take this cool library


00:33:18.640 --> 00:33:20.900
and make it a thing that's out on PyPI


00:33:20.900 --> 00:33:22.620
or Conda that people can use.


00:33:22.620 --> 00:33:24.440
Oh, but that's gonna take a week and a half


00:33:24.440 --> 00:33:28.060
and you really only get credit for your citations


00:33:28.060 --> 00:33:30.220
in articles, not in code, right?


00:33:30.220 --> 00:33:32.620
So this kind of addresses that to try to give people


00:33:32.620 --> 00:33:35.740
a place to publish their projects in a meaningful way.


00:33:35.740 --> 00:33:38.380
And I just wanna point out that there's a special issue


00:33:38.380 --> 00:33:41.500
on the software that contributed to the LIGO experiment,


00:33:41.500 --> 00:33:43.180
the gravitational wave discovery,


00:33:43.180 --> 00:33:45.020
which pretty sure got the Nobel prize.


00:33:45.020 --> 00:33:46.720
I don't totally remember.


00:33:46.720 --> 00:33:48.860
But if you just start poking around here,


00:33:48.860 --> 00:33:52.580
you know, you might find the word Python periodically


00:33:52.580 --> 00:33:54.220
in this thing here.


00:33:54.220 --> 00:33:57.300
So over in this one, we got some Python.


00:33:57.300 --> 00:33:59.060
I'm just randomly clicking articles


00:33:59.060 --> 00:34:00.380
and they're all coming up Python.


00:34:00.380 --> 00:34:01.860
So I think that that's pretty sweet.


00:34:01.860 --> 00:34:03.800
If people are in science


00:34:03.800 --> 00:34:05.940
and they do this computational side of thing,


00:34:05.940 --> 00:34:06.780
check this out.


00:34:06.780 --> 00:34:07.600
- Very cool.


00:34:07.600 --> 00:34:08.680
Yeah, that's number one.


00:34:08.680 --> 00:34:11.260
Number two, PyCon has been finished for a little while


00:34:11.260 --> 00:34:13.680
and we were able to go through some like


00:34:13.680 --> 00:34:15.800
meeting platform type thing


00:34:15.800 --> 00:34:17.480
where we could watch the replays,


00:34:17.480 --> 00:34:19.880
but it's a little bit wonky in the way


00:34:19.880 --> 00:34:20.800
that the playback work.


00:34:20.800 --> 00:34:22.440
Like I had to do some weird stuff


00:34:22.440 --> 00:34:24.640
to actually get logged back in after a while.


00:34:24.640 --> 00:34:26.240
Anyway, it was fine for live stuff,


00:34:26.240 --> 00:34:27.560
but it was weird for playback.


00:34:27.560 --> 00:34:29.180
YouTube is pretty awesome for playback.


00:34:29.180 --> 00:34:31.840
And here's the, I put in the show notes,


00:34:31.840 --> 00:34:36.360
the playlist for all of PyCon 2021 US.


00:34:36.360 --> 00:34:37.200
So that's pretty cool.


00:34:37.200 --> 00:34:39.280
how many videos are in here, it looks like 86 videos.


00:34:39.280 --> 00:34:41.520
So if you want to catch up on the PyCon talks,


00:34:41.520 --> 00:34:42.520
there's a really good way.


00:34:42.520 --> 00:34:47.520
- Nice, it looks like Juergen had a lightning talk there.


00:34:47.520 --> 00:34:48.540
- Yeah. - Cool.


00:34:48.540 --> 00:34:49.840
- Yeah, very cool, well done.


00:34:49.840 --> 00:34:53.680
And also want to make sure I get the credit


00:34:53.680 --> 00:34:55.000
for this one right.


00:34:55.000 --> 00:34:58.360
Madison Swain Bowden, who we both met, I believe,


00:34:58.360 --> 00:35:01.000
at PyCascades, shared this with us,


00:35:01.000 --> 00:35:06.000
that AICS image IO, which is used all over B2B


00:35:06.000 --> 00:35:10.140
used all over biological imaging and microscopy


00:35:10.140 --> 00:35:12.600
and that kind of stuff from the Allen Institute,


00:35:12.600 --> 00:35:14.280
Allen Brain Institute, I'm guessing,


00:35:14.280 --> 00:35:16.000
was just released.


00:35:16.000 --> 00:35:18.080
So if you're doing anything with like graphics


00:35:18.080 --> 00:35:20.760
and pictures and file formats and stuff for that,


00:35:20.760 --> 00:35:21.960
check that out.


00:35:21.960 --> 00:35:23.560
And yeah, that's it for me.


00:35:23.560 --> 00:35:26.240
I think, Mike, you got one as well, right, at least?


00:35:26.240 --> 00:35:31.240
- Yeah, so yeah, it's PEP 563 was,


00:35:31.240 --> 00:35:35.120
I think it's postponed evaluation of annotations


00:35:35.120 --> 00:35:38.780
And basically there was some,


00:35:38.780 --> 00:35:40.340
as I think I mentioned before,


00:35:40.340 --> 00:35:44.100
I'm a big fan of FastAPI and Pydantic.


00:35:44.100 --> 00:35:47.740
And there was some worry a couple of months ago


00:35:47.740 --> 00:35:52.020
that this change would effectively break these projects


00:35:52.020 --> 00:35:54.100
in 3.10 if it was introduced.


00:35:54.100 --> 00:35:55.700
And so I just wanted to give a shout out


00:35:55.700 --> 00:35:57.460
to the community for jumping on this


00:35:57.460 --> 00:36:00.820
and just being really open-minded about this


00:36:00.820 --> 00:36:03.900
and basically postponing this a little further


00:36:03.900 --> 00:36:06.140
so that better decisions can be made


00:36:06.140 --> 00:36:09.660
on how to navigate this change.


00:36:09.660 --> 00:36:11.940
So I don't wanna go too deep into it,


00:36:11.940 --> 00:36:14.300
but I read some of the threads on this


00:36:14.300 --> 00:36:15.860
and it was just really positive,


00:36:15.860 --> 00:36:19.140
really positive exchange within the community.


00:36:19.140 --> 00:36:20.860
And I think it turned out really well.


00:36:20.860 --> 00:36:22.500
There was like a unanimous decision, I believe,


00:36:22.500 --> 00:36:24.860
to postpone it and it saved these projects


00:36:24.860 --> 00:36:27.220
from having to, well, basically--


00:36:27.220 --> 00:36:29.500
- At a minimum scramble, right?


00:36:29.500 --> 00:36:31.580
Worst case, not work.


00:36:31.580 --> 00:36:32.400
- Yeah.


00:36:32.400 --> 00:36:33.860
- Yeah, let me see if I can give the elevator pitch


00:36:33.860 --> 00:36:37.880
there was a proposal in Python 3.10, I guess 5.3.8,


00:36:37.880 --> 00:36:41.700
I know, sorry, 5.6.3, I don't know where that came from,


00:36:41.700 --> 00:36:45.140
5.6.3, PEP 5.6.3, where there is an attempt


00:36:45.140 --> 00:36:48.100
to simplify and speed up type annotations.


00:36:48.100 --> 00:36:50.740
And by, 'cause right now, if you wanna do a type annotation,


00:36:50.740 --> 00:36:52.540
if I'm gonna say I've created a Pydantic model,


00:36:52.540 --> 00:36:53.740
it's called user, and I'm gonna say,


00:36:53.740 --> 00:36:56.820
this thing returns a user, I have to import user at the top.


00:36:56.820 --> 00:36:59.340
And it was like, well, you're not gonna get those evaluated


00:36:59.340 --> 00:37:01.260
or really dealt with unless you're doing


00:37:01.260 --> 00:37:04.140
type annotation analysis.


00:37:04.140 --> 00:37:07.380
So we're gonna treat those as strings basically.


00:37:07.380 --> 00:37:10.620
Right, and things like FastAPI and Pydantic and others


00:37:10.620 --> 00:37:13.760
were going, they would actually get the type information,


00:37:13.760 --> 00:37:16.300
standard Python style, and then use that


00:37:16.300 --> 00:37:18.700
to modify behavior, right?


00:37:18.700 --> 00:37:20.660
Like to do, oh, it says it's a list of ints,


00:37:20.660 --> 00:37:22.460
so we're gonna convert from this list of those,


00:37:22.460 --> 00:37:24.180
or maybe a list of user, we're gonna convert


00:37:24.180 --> 00:37:26.580
these JSON things to users.


00:37:26.580 --> 00:37:27.980
But with this change, it would have said,


00:37:27.980 --> 00:37:30.060
well, it's a string, and what does user mean?


00:37:30.060 --> 00:37:32.480
If you don't know the actual type where it's coming from,


00:37:32.480 --> 00:37:33.680
there could be multiple users.


00:37:33.680 --> 00:37:35.940
It could be a user that couldn't track down,


00:37:35.940 --> 00:37:36.960
has it been imported yet,


00:37:36.960 --> 00:37:39.160
all sorts of weirdness around it.


00:37:39.160 --> 00:37:42.960
The runtime behavior of these type annotated things like typer,


00:37:42.960 --> 00:37:45.960
pydantic, fastAPI, we're not sure how


00:37:45.960 --> 00:37:48.680
they were going to keep working with this being adopted.


00:37:48.680 --> 00:37:51.320
It sounds like it's postponed at least till 3.11.


00:37:51.320 --> 00:37:52.480
>> Yeah, exactly.


00:37:52.480 --> 00:37:54.360
>> Yeah. Thanks for bringing this up. That's a good one.


00:37:54.360 --> 00:37:54.640
>> Yeah.


00:37:54.640 --> 00:37:59.200
>> All right. Well, into the show, do we have any jokes?


00:37:59.200 --> 00:38:00.880
I got something for you.


00:38:00.880 --> 00:38:04.080
I'll tell you, let me know if it qualifies.


00:38:04.080 --> 00:38:08.240
This is from Zach, RMRF on Twitter says,


00:38:08.240 --> 00:38:11.160
did you hear about the four Pythonistas that robbed a bank?


00:38:11.160 --> 00:38:13.240
Three got caught and when questioned,


00:38:13.240 --> 00:38:15.920
they all stated that the fourth would never be caught,


00:38:15.920 --> 00:38:18.440
couldn't be caught because he knew RegX


00:38:18.440 --> 00:38:20.360
and was something of an escape artist.


00:38:20.360 --> 00:38:22.600
(laughing)


00:38:22.600 --> 00:38:24.360
- That's funny.


00:38:24.360 --> 00:38:25.180
- Yeah, I think that's pretty good.


00:38:25.180 --> 00:38:26.020
Well done, Zach.


00:38:26.020 --> 00:38:26.920
Thanks for sending that in.


00:38:26.920 --> 00:38:28.380
Brian, you got anything as well?


00:38:28.380 --> 00:38:31.300
>> Yeah, let me pull it up.


00:38:31.300 --> 00:38:38.620
Not Rich, Will McGugan asked about Rich and said,


00:38:38.620 --> 00:38:42.540
"Hey, if I wrote a book about Rich,


00:38:42.540 --> 00:38:44.580
how much money would you pay for it?


00:38:44.580 --> 00:38:46.500
But also what should be in the book?"


00:38:46.500 --> 00:38:48.240
Of course, I said,


00:38:48.240 --> 00:38:50.980
it should cover how fast it is to install it,


00:38:50.980 --> 00:38:53.020
kind of a get rich quick guide.


00:38:53.020 --> 00:38:55.280
(laughing)


00:38:55.280 --> 00:38:59.220
- Love it, love it.


00:38:59.220 --> 00:39:01.580
And I believe the response was something like, get out.


00:39:01.580 --> 00:39:03.780
- Get out, yeah, definitely.


00:39:03.780 --> 00:39:04.620
- Oh, nice.


00:39:04.620 --> 00:39:06.420
Will's getting a lot of coverage this week.


00:39:06.420 --> 00:39:07.260
That's beautiful.


00:39:07.260 --> 00:39:08.560
He's doing good work.


00:39:08.560 --> 00:39:09.500
All right, speed of coverage.


00:39:09.500 --> 00:39:10.740
Yeah, thanks for being here, Mike.


00:39:10.740 --> 00:39:11.680
- Well, thank you guys for having me.


00:39:11.680 --> 00:39:12.580
This was really fun.


00:39:12.580 --> 00:39:13.660
- Yeah, thank you.


00:39:13.660 --> 00:39:16.140
Thanks for everybody for joining on the live stream as well.


00:39:16.140 --> 00:39:16.980
- Wow.


00:39:16.980 --> 00:39:18.500
Thank you for listening to Python Bytes.


00:39:18.500 --> 00:39:20.940
Follow the show on Twitter via @pythonbytes.


00:39:20.940 --> 00:39:24.100
that's Python Bytes as in B-Y-T-E-S.


00:39:24.100 --> 00:39:27.420
And get the full show notes at pythonbytes.fm.


00:39:27.420 --> 00:39:29.020
If you have a news item you want featured,


00:39:29.020 --> 00:39:31.460
just visit pythonbytes.fm and send it our way.


00:39:31.460 --> 00:39:34.420
We're always on the lookout for sharing something cool.


00:39:34.420 --> 00:39:36.260
On behalf of myself and Brian Okken,


00:39:36.260 --> 00:39:37.660
this is Michael Kennedy.


00:39:37.660 --> 00:39:39.660
Thank you for listening and sharing this podcast


00:39:39.660 --> 00:39:41.300
with your friends and colleagues.

