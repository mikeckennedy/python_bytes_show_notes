WEBVTT

00:00:00.000 --> 00:00:04.880
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.880 --> 00:00:11.440
This is episode 341, recorded June 20th, 2023, and I am Brian Okken.


00:00:11.440 --> 00:00:12.440
I'm Michael Kennedy.


00:00:12.440 --> 00:00:14.760
This episode is sponsored by us.


00:00:14.760 --> 00:00:19.040
If you want to support us, you can take one of the courses at Talk Python Training.


00:00:19.040 --> 00:00:21.040
There's an excellent pytest course there.


00:00:21.040 --> 00:00:26.880
And please check out Test & Code Podcast and a book about pytest if you're curious.


00:00:26.880 --> 00:00:30.160
We also have Patreon supporters, so thank you Patreon supporters.


00:00:30.160 --> 00:00:37.840
If you'd like to talk to us or suggest something, we've got a contact form at pythonbytes.fm,


00:00:37.840 --> 00:00:42.040
but you can also send us something on Mastodon.


00:00:42.040 --> 00:00:49.200
We're all at fostodon.org,@mkennedy@bryanokken and @pythonbytes,


00:00:49.200 --> 00:00:51.080
and we check those regularly.


00:00:51.080 --> 00:00:54.560
Let's hit it off. Michael, what do you got for us for the first topic?


00:00:54.560 --> 00:00:57.120
I'm going to back up what you just said, Brian.


00:00:57.120 --> 00:00:57.720
Okay.


00:00:57.720 --> 00:01:00.520
The very first item comes to us from Mario Munoz.


00:01:00.520 --> 00:01:01.400
Thank you, Mario.


00:01:01.400 --> 00:01:02.660
Right on Mastodon.


00:01:02.660 --> 00:01:03.560
Awesome.


00:01:03.560 --> 00:01:06.320
Mario says the pedantic roadmap looks interesting.


00:01:06.320 --> 00:01:10.080
I especially like the combination of analytics and observability.


00:01:10.080 --> 00:01:12.240
Looking forward to what the team ends up building.


00:01:12.240 --> 00:01:15.840
So the first thing I want to talk about is this thing that Mario referenced.


00:01:15.840 --> 00:01:20.360
What did us at the identic 2.0 roadmap or more specifically,


00:01:20.560 --> 00:01:22.120
Pydantic Incorporated.


00:01:22.120 --> 00:01:24.840
So recall Samuel Colvin, excellent guy,


00:01:24.840 --> 00:01:26.640
got to hang out, we both got to hang out


00:01:26.640 --> 00:01:29.080
both with Mario and Samuel at PyCon this year,


00:01:29.080 --> 00:01:29.920
which was fun.


00:01:29.920 --> 00:01:33.880
And he announced Pydantic Incorporated,


00:01:33.880 --> 00:01:38.160
which is a company around building data tools,


00:01:38.160 --> 00:01:40.000
somewhat around Pydantic and Rust


00:01:40.000 --> 00:01:41.720
and those kinds of things for the Python


00:01:41.720 --> 00:01:45.000
and larger base, larger developer space.


00:01:45.000 --> 00:01:47.360
So, but it didn't have a ton of details


00:01:47.360 --> 00:01:49.400
of exactly where they were going.


00:01:49.400 --> 00:01:51.640
So this roadmap is two things.


00:01:51.640 --> 00:01:55.620
It is a hint on what Identik Inc is going to be about,


00:01:55.620 --> 00:01:58.260
what kind of tools Samuel and team are going to offer.


00:01:58.260 --> 00:02:01.260
There's also a call to action to help them


00:02:01.260 --> 00:02:02.580
choose the right direction


00:02:02.580 --> 00:02:04.500
so that when they go off building things,


00:02:04.500 --> 00:02:07.080
they might build something that you actually would want to use.


00:02:07.080 --> 00:02:07.920
- Oh, cool.


00:02:07.920 --> 00:02:08.740
- Yeah, right?


00:02:08.740 --> 00:02:11.340
And so it says, look,


00:02:11.340 --> 00:02:13.260
in return for giving us honest feedback,


00:02:13.260 --> 00:02:15.660
you have the option to get early access,


00:02:15.660 --> 00:02:17.300
get inside the closed beta,


00:02:17.300 --> 00:02:19.060
all those things for the platform.


00:02:19.060 --> 00:02:20.980
And if you're familiar with Pydantic,


00:02:20.980 --> 00:02:23.060
you know it's all about data exchange,


00:02:23.060 --> 00:02:26.500
data validation, strong schemas where there are none,


00:02:26.500 --> 00:02:27.540
and those kinds of things, right?


00:02:27.540 --> 00:02:29.940
Bringing sanity to your data, as they say.


00:02:29.940 --> 00:02:31.860
So there's two tacks here.


00:02:31.860 --> 00:02:33.420
Samuel says, "Well, first, before going into


00:02:33.420 --> 00:02:35.000
"what we might build, I want to tell you


00:02:35.000 --> 00:02:36.260
"what we're not building.


00:02:36.260 --> 00:02:38.720
"We're not building a new database or query engine.


00:02:38.720 --> 00:02:40.160
"They're not going to be building


00:02:40.160 --> 00:02:42.540
"or pretending that non-developers or AI


00:02:42.540 --> 00:02:44.540
"can do the job of a developer."


00:02:44.540 --> 00:02:47.780
They want to accelerate developers' workflows.


00:02:47.780 --> 00:02:50.780
For example, they're going to have CLIs before they have GUIs and they're not


00:02:50.780 --> 00:02:55.940
doing 314 integrations into every conceivable technology, right?


00:02:55.940 --> 00:02:57.580
Think Zapier or something like that.


00:02:57.580 --> 00:03:00.740
If this, then that, and finally, they're not going to have


00:03:00.740 --> 00:03:02.180
an SDK for every language.


00:03:02.180 --> 00:03:05.300
They're just focusing on a few languages with Python right up front.


00:03:05.300 --> 00:03:05.780
I'm sure.


00:03:05.780 --> 00:03:07.100
So it says, how can you help?


00:03:07.100 --> 00:03:11.540
Well, give us feedback on the five different things that they're considering.


00:03:11.540 --> 00:03:11.940
Okay.


00:03:11.940 --> 00:03:12.580
Okay.


00:03:12.580 --> 00:03:16.460
Number one, this is the one, this is the one that Mario like.


00:03:16.820 --> 00:03:19.420
Python Analytics and Observability,


00:03:19.420 --> 00:03:21.820
a logging and metrics platform with


00:03:21.820 --> 00:03:25.100
tight integration with Python and Pydantic,


00:03:25.100 --> 00:03:27.040
designed to make the data flowing through


00:03:27.040 --> 00:03:29.160
your application more readily usable for


00:03:29.160 --> 00:03:31.540
both engineering and business analytics.


00:03:31.540 --> 00:03:33.720
If you're doing say, FastAPI,


00:03:33.720 --> 00:03:37.520
exchanging data over at Python Bytes,


00:03:37.520 --> 00:03:39.820
like all the stuff coming to you has come through


00:03:39.820 --> 00:03:41.820
Pydantic classes because we're using


00:03:41.820 --> 00:03:44.020
Beanie as the database access layer,


00:03:44.020 --> 00:03:45.900
which is based on Pydantic if you don't know.


00:03:45.900 --> 00:03:48.980
Okay, so that's the analytics and observability.


00:03:48.980 --> 00:03:53.540
Another one is a couple of angles here around data gateways for object stores.


00:03:53.540 --> 00:03:56.060
So think S3, something,


00:03:56.060 --> 00:03:58.460
Azure Blob Storage, those kinds of things,


00:03:58.460 --> 00:04:02.260
Azure Ocean Spaces. So gateway for your object store.


00:04:02.260 --> 00:04:03.940
So add validation, transformation,


00:04:03.940 --> 00:04:08.300
and cataloging in front of things like S3 with schemas defined and


00:04:08.300 --> 00:04:11.900
pedantic models and then validated by their REST service,


00:04:11.900 --> 00:04:15.500
or same idea but integrated into your existing data warehouse.


00:04:15.500 --> 00:04:17.740
Number four is a schema catalog.


00:04:17.740 --> 00:04:19.500
For many, Pydantic already holds


00:04:19.500 --> 00:04:23.060
the highest fidelity representation of data schemas.


00:04:23.060 --> 00:04:24.780
If you had a schema catalog,


00:04:24.780 --> 00:04:26.300
it could take that to the next level,


00:04:26.300 --> 00:04:28.940
serving as an organization-wide single source


00:04:28.940 --> 00:04:30.780
of truth for those schemas.


00:04:30.780 --> 00:04:34.420
If you've got a bunch of different apps or whatever,


00:04:34.420 --> 00:04:36.140
especially across language maybe,


00:04:36.140 --> 00:04:39.500
that languages that talk to certain data stores,


00:04:39.500 --> 00:04:42.740
certain APIs, might be some central store that says,


00:04:42.740 --> 00:04:44.180
"This is what it looks like,


00:04:44.180 --> 00:04:46.900
and here's how you maybe generate classes to talk to it.


00:04:46.900 --> 00:04:50.300
Finally, dashboards and UIs powered by Pydantic models,


00:04:50.300 --> 00:04:53.100
a managed platform to deploy and control dashboards,


00:04:53.100 --> 00:04:55.140
auxiliary apps, and internal tools,


00:04:55.140 --> 00:04:57.980
where everything from UI components like forms and tables


00:04:57.980 --> 00:05:01.300
to database schema would be defined in Python using Pydantic models.


00:05:01.300 --> 00:05:06.780
So, we go into a bunch of details with code samples of what they actually might look like


00:05:06.780 --> 00:05:08.980
if you were to go down one of these paths.


00:05:08.980 --> 00:05:11.140
But I'm just going to leave it here and say,


00:05:11.140 --> 00:05:15.300
encourage everyone who cares about this to go participate in Samuel's survey so


00:05:15.300 --> 00:05:17.300
that they get the right feedback that they need.


00:05:17.300 --> 00:05:19.220
>> Is all of the above an option?


00:05:19.220 --> 00:05:20.620
Because that all sounds great.


00:05:20.620 --> 00:05:22.060
>> Yeah, that sounds pretty good, doesn't it?


00:05:22.060 --> 00:05:22.660
>> Yeah.


00:05:22.660 --> 00:05:27.820
>> Some of these don't really apply to me like a schema catalog for the whole company.


00:05:27.820 --> 00:05:30.980
It's me, sometimes me and another developer.


00:05:30.980 --> 00:05:33.380
But if you were in a large organization,


00:05:33.380 --> 00:05:36.340
even a handful of people or a couple of software teams,


00:05:36.340 --> 00:05:38.020
it starts to get real valuable.


00:05:38.020 --> 00:05:39.060
>> I think they all look great,


00:05:39.060 --> 00:05:43.580
but the data gateway for data warehouses and for object stores,


00:05:43.580 --> 00:05:46.060
it sounds really cool because I mean,


00:05:46.060 --> 00:05:51.860
that's actually they all look pretty good.


00:05:51.860 --> 00:05:55.260
I was curious, so you use Bionic now, right?


00:05:55.260 --> 00:06:00.780
I know one of the things it does is it filters out stuff,


00:06:00.780 --> 00:06:03.500
it sends an error code or something.


00:06:03.500 --> 00:06:08.580
If you try to send data and it's not the right type or the right kind of data,


00:06:08.580 --> 00:06:13.300
Is that reported somewhere or is that part of the analytics and observability thing?


00:06:13.300 --> 00:06:15.840
>> That would be analytics and observability because right


00:06:15.840 --> 00:06:18.100
now it just appears as an exception.


00:06:18.100 --> 00:06:19.780
If you have integration with something like


00:06:19.780 --> 00:06:21.420
Sentry or one of them other things,


00:06:21.420 --> 00:06:24.860
then it would report it as an exception with some details.


00:06:24.860 --> 00:06:26.580
But I don't think that's what they're thinking.


00:06:26.580 --> 00:06:28.400
I think they're thinking much more,


00:06:28.400 --> 00:06:31.620
even possibly like success data going through.


00:06:31.620 --> 00:06:38.300
>> Oh, yeah. Really see how people are using an API or using an entry point.


00:06:38.300 --> 00:06:40.180
I think that looks pretty cool.


00:06:40.180 --> 00:06:42.180
Yeah, it does look pretty cool.


00:06:42.180 --> 00:06:44.180
Nice.


00:06:44.180 --> 00:06:44.940
Over to you.


00:06:44.940 --> 00:06:50.780
I'd like to talk about shells out of the web and into talking with


00:06:50.780 --> 00:06:53.620
your operating system, kind of.


00:06:53.620 --> 00:06:56.780
So I want to highlight an article called


00:06:56.780 --> 00:06:59.280
the right way to run shell commands from Python.


00:06:59.280 --> 00:07:03.740
So I guess it's not really necessarily shell commands, but kind of.


00:07:03.740 --> 00:07:07.100
So when you're writing, some Python programs


00:07:07.100 --> 00:07:09.100
have to interact with the operating system


00:07:09.100 --> 00:07:12.380
for things like file system things or


00:07:12.380 --> 00:07:14.380
starting other applications and whatnot.


00:07:14.380 --> 00:07:17.580
And there's various ways to do that, but one of the


00:07:17.580 --> 00:07:20.580
I guess, I guess that's kind of part of this article


00:07:20.580 --> 00:07:22.380
is talking about some of these tools.


00:07:22.380 --> 00:07:25.820
So there's, it starts off with talking about


00:07:25.820 --> 00:07:29.300
natively into Python. So some things that you might not


00:07:29.300 --> 00:07:31.300
when you start having to think


00:07:31.300 --> 00:07:33.700
I have to interact with the shell,


00:07:33.700 --> 00:07:35.460
you might not have to actually.


00:07:35.460 --> 00:07:39.060
Like there's pathlib that can do quite a bit for you.


00:07:39.060 --> 00:07:44.060
And you can create temp files and stuff like that with a temp file package.


00:07:44.060 --> 00:07:49.260
And there's shutil, which is, I guess, pretty good.


00:07:49.260 --> 00:07:53.460
And I've never used syslog or signal, but those things are around.


00:07:53.460 --> 00:07:56.360
Okay, so those are things built into Python.


00:07:56.360 --> 00:07:59.860
So make sure you check out the things built into Python already.


00:07:59.860 --> 00:08:04.760
But then there's a couple other different modules that might help.


00:08:04.760 --> 00:08:09.000
The OS module, he's kind of going this backwards,


00:08:09.000 --> 00:08:13.080
is probably don't directly reach for the OS module.


00:08:13.080 --> 00:08:16.160
But there's a few things in the OS module that are really great,


00:08:16.160 --> 00:08:19.600
like to get your get environment variables,


00:08:19.600 --> 00:08:21.400
like get the path variable or something,


00:08:21.400 --> 00:08:23.680
and use OS get, get env.


00:08:23.680 --> 00:08:27.640
There's a few other things like getting username and stuff.


00:08:27.640 --> 00:08:31.200
But I guess get you name,


00:08:31.200 --> 00:08:33.000
I don't know what that is. Is that username?


00:08:33.000 --> 00:08:36.440
I don't know. But anyway, the...


00:08:36.440 --> 00:08:40.200
So there's a few things in the OS module that are interesting


00:08:40.200 --> 00:08:42.200
that you're probably not looking there.


00:08:42.200 --> 00:08:47.800
I often have used subprocess, and this is, I guess, a reminder that


00:08:47.800 --> 00:08:49.800
with modern Python development,


00:08:49.800 --> 00:08:53.440
if you're using subprocess, you probably want subprocess run,


00:08:53.440 --> 00:08:56.000
even though there's a lot of other


00:08:56.000 --> 00:09:01.320
legacy stuff in the subprocess package.


00:09:01.320 --> 00:09:04.120
P open, yeah, P open, for example.


00:09:04.120 --> 00:09:04.320
Yeah.


00:09:04.320 --> 00:09:04.920
Yeah.


00:09:04.920 --> 00:09:07.120
And call, you probably don't want those.


00:09:07.120 --> 00:09:08.620
What you probably want is run.


00:09:08.620 --> 00:09:13.720
Run is kind of a catch-all that works for most things now.


00:09:13.720 --> 00:09:18.420
Because I really like, doesn't show it in the example,


00:09:18.420 --> 00:09:24.320
but there's options in run to just turn on, like, encoding.


00:09:24.320 --> 00:09:27.020
Here's the encoding bit that says, you know, turn it on.


00:09:27.020 --> 00:09:28.620
Capture the standard in.


00:09:28.620 --> 00:09:29.520
Oh, yeah, there it is.


00:09:29.520 --> 00:09:34.960
capture output equals true is so that you can capture the output.


00:09:34.960 --> 00:09:39.680
That's often what I want to do if I'm running a program is find out what its output is.


00:09:39.680 --> 00:09:41.120
So this is handy.


00:09:41.120 --> 00:09:48.800
However, one of the things that I haven't used, this article Martin Heinz mentions,


00:09:48.800 --> 00:09:55.440
there's one right way and for his opinion, the right way is use the third-party package,


00:09:57.440 --> 00:10:01.280
which is a very unsearchable package name called the SH.


00:10:01.280 --> 00:10:05.080
>> You don't even want to talk about it.


00:10:05.080 --> 00:10:08.680
>> So I have no idea if anybody's written about this because it's


00:10:08.680 --> 00:10:12.400
really hard to Google SH because it's everywhere.


00:10:12.400 --> 00:10:14.560
But it's a neat package.


00:10:14.560 --> 00:10:17.280
So I looked it up, of course,


00:10:17.280 --> 00:10:23.120
and it's tested on all sorts of versions and downloaded a ton.


00:10:23.120 --> 00:10:26.280
So 3.9 million a month.


00:10:26.280 --> 00:10:29.480
Look at the stars 6.6 thousand stars.


00:10:29.480 --> 00:10:31.620
So fairly popular package.


00:10:31.620 --> 00:10:33.660
So most of you probably already know about it.


00:10:33.660 --> 00:10:35.460
But the just that's Brian.


00:10:35.460 --> 00:10:37.040
>> It's just as we did it though.


00:10:37.040 --> 00:10:38.800
But there's a, it's kind of neat.


00:10:38.800 --> 00:10:39.920
There's what it is,


00:10:39.920 --> 00:10:42.140
is you've got commands that are,


00:10:42.140 --> 00:10:44.940
that are just kind of look like they did before.


00:10:44.940 --> 00:10:47.940
Like LS is sh.ls.


00:10:47.940 --> 00:10:50.840
That's kind of neat. And you can pass in arguments.


00:10:50.840 --> 00:10:53.760
What's some of the others like,


00:10:53.760 --> 00:10:55.640
I'm going to go over to the documentation.


00:10:55.640 --> 00:10:58.840
You've got LS, you've got like, what else?


00:10:58.840 --> 00:11:02.340
Oh, yes, it just has LX examples.


00:11:02.340 --> 00:11:03.340
Get.


00:11:03.340 --> 00:11:05.740
Yeah, I guess that's cool.


00:11:05.740 --> 00:11:07.740
Anyway, find.


00:11:07.740 --> 00:11:08.640
There's a few others.


00:11:08.640 --> 00:11:09.840
There's a bunch of others.


00:11:09.840 --> 00:11:15.440
Actually, it's a pretty big package and it isn't a rewriting of all of these things.


00:11:15.440 --> 00:11:17.540
It's actually talking to your operating system.


00:11:17.540 --> 00:11:18.740
So that's the catch.


00:11:18.740 --> 00:11:22.540
It's talking to a Unix like operating system.


00:11:22.540 --> 00:11:24.140
So it works on Linux.


00:11:24.140 --> 00:11:25.140
It works on Mac.


00:11:25.140 --> 00:11:27.140
It will not work on Windows apparently.


00:11:27.140 --> 00:11:30.680
>> Unless you're using Linux subsystem for Windows.


00:11:30.680 --> 00:11:33.640
Wait, yeah. Linux subsystem for Windows.


00:11:33.640 --> 00:11:34.520
>> Maybe.


00:11:34.520 --> 00:11:36.040
>> Linux, I guess it is.


00:11:36.040 --> 00:11:37.960
Yeah. Anyway, the embedded Linux,


00:11:37.960 --> 00:11:39.240
you can run on Windows if you want.


00:11:39.240 --> 00:11:39.660
>> Okay.


00:11:39.660 --> 00:11:40.720
>> Because that's just Ubuntu.


00:11:40.720 --> 00:11:41.840
>> Perfect.


00:11:41.840 --> 00:11:43.720
>> One thing I like, if you scroll just a little bit here,


00:11:43.720 --> 00:11:44.680
so I can point at you on it.


00:11:44.680 --> 00:11:46.960
It says, actually it's down one page.


00:11:46.960 --> 00:11:51.320
It says, what you can do is you can say sh.ls,


00:11:51.320 --> 00:11:52.960
or you can create a command like


00:11:52.960 --> 00:11:55.640
any executable you want,


00:11:55.640 --> 00:11:59.760
you can just say sh.command and you give it the path to the executable.


00:11:59.760 --> 00:12:05.680
Then the arguments can be passed as if they were a function call on that resulting thing.


00:12:05.680 --> 00:12:07.780
Instead of chaining it all together,


00:12:07.780 --> 00:12:11.180
you could say like create the git command and then you could do a git


00:12:11.180 --> 00:12:16.300
parentheses checkout, main or prod or whatever.


00:12:16.300 --> 00:12:19.400
That's a pretty cool way to integrate with the command line there.


00:12:19.400 --> 00:12:21.000
>> Yeah, that is pretty neat.


00:12:21.000 --> 00:12:24.000
And that'll work with even your like, like you said,


00:12:24.000 --> 00:12:28.000
>> I think so. If you look at the next example down right below the ls underscore command.


00:12:28.000 --> 00:12:30.500
Yeah. Custom CMD is what it says. Yeah.


00:12:30.500 --> 00:12:36.000
>> So your own command, you can have it run something and have the arguments listed.


00:12:36.000 --> 00:12:37.000
It's pretty neat.


00:12:37.000 --> 00:12:38.500
>> It could even be another Python command.


00:12:38.500 --> 00:12:41.500
You might think, why would I ever do that in Python?


00:12:41.500 --> 00:12:44.000
But you know, maybe that's coming out of a different virtual environment


00:12:44.000 --> 00:12:49.000
with like some setup that's got a bunch of things that you're not integrating into your system.


00:12:49.000 --> 00:12:50.000
I don't know. There might be reasons.


00:12:50.000 --> 00:12:58.920
Or you're using, so like if you're using, what, click or was the typer?


00:12:58.920 --> 00:13:04.960
They have built-in test frameworks, but if you have another, a different command line interface that you're testing against,


00:13:04.960 --> 00:13:10.720
it might not have a way to run the commands directly. So you could use this to run a Python command for testing.


00:13:10.720 --> 00:13:12.560
So, neat.


00:13:12.560 --> 00:13:15.360
A couple of live stream comments, Brian.


00:13:15.360 --> 00:13:17.760
Michael says, not Michael, Michael W.


00:13:17.760 --> 00:13:20.320
Every time I fall back to OS.System out of habit,


00:13:20.320 --> 00:13:25.600
I feel like the old guy measuring his gas mileage in rods for hedgehogs head.


00:13:25.600 --> 00:13:30.980
I love it. Henry Schreiner out there says there's also Plumbum,


00:13:30.980 --> 00:13:35.080
of which he's been a maintainer since 2015, similar to SH.


00:13:35.080 --> 00:13:40.420
But he's not really up on them both well enough to give a comparison.


00:13:40.420 --> 00:13:41.760
He doesn't know SH that well.


00:13:41.760 --> 00:13:44.040
>> I will check out Plumbum. Nice.


00:13:44.040 --> 00:13:45.320
Cool. Thanks guys.


00:13:45.320 --> 00:13:46.640
>> Well, what you got for us?


00:13:46.640 --> 00:13:49.040
>> I think, yeah, we got one more, don't we?


00:13:49.040 --> 00:13:50.280
Got another one.


00:13:50.280 --> 00:13:52.360
Over here, I've got-


00:13:52.360 --> 00:13:53.680
>> Or do we want to do it in?


00:13:53.680 --> 00:13:57.120
>> Well, encourage people to check out the courses over at Talk Python Training.


00:13:57.120 --> 00:13:58.840
Always supports us that way,


00:13:58.840 --> 00:14:00.200
including the pytest course.


00:14:00.200 --> 00:14:03.680
Check out the new mobile app that we built and check out the pytest book.


00:14:03.680 --> 00:14:07.200
Really supporting our work that way is really the best way to support


00:14:07.200 --> 00:14:11.440
the podcast and visiting the sponsors when we have other sponsors.


00:14:11.440 --> 00:14:14.880
But I want to talk about buying and selling your data.


00:14:14.880 --> 00:14:20.480
So there's an article on PC Magaball Places that I got this that talks about a report


00:14:20.480 --> 00:14:28.640
released by the Office of the Director of National Intelligence, ODNI, which pretty


00:14:28.640 --> 00:14:30.800
much how I'm going to refer to them from here on out.


00:14:30.800 --> 00:14:36.880
ODNI released this, declassified this report from January 2022.


00:14:36.880 --> 00:14:41.760
And the headline is the US says, the United States says, yep, we're buying your data,


00:14:41.760 --> 00:14:46.320
including your embarrassing secrets. Digital information can be purchased from commercial


00:14:46.320 --> 00:14:51.600
data brokers and de-anonymized to ID the person it is tied to, including US citizens,


00:14:51.600 --> 00:14:56.160
says the ODNI. That's a little disturbing. So when you, you know, when you go to,


00:14:56.160 --> 00:15:04.400
you know, that ad-ridden website that has 29 trackers and 42 ad networks on it, right,


00:15:04.400 --> 00:15:07.680
They're collecting a bunch of data, but that same network is on a bunch of other


00:15:07.680 --> 00:15:11.600
sites and they're pulling all those things together. We have these data brokers who


00:15:11.600 --> 00:15:16.960
gather all that information, but also really, really frustrating things where they buy and


00:15:16.960 --> 00:15:21.680
sell your credit card data and you don't get to say whether or not you want your credit card data


00:15:21.680 --> 00:15:27.600
for sale. I'm pretty sure it was T-Mobile. There's one of the mobile carriers who was selling your


00:15:27.600 --> 00:15:32.160
location data and you didn't get to opt out of it. Just like, well, you're using your phone,


00:15:32.160 --> 00:15:33.800
And I just, so why isn't that for sale?


00:15:33.800 --> 00:15:37.640
And all of that stuff gets combined into like a profile on you, right.


00:15:37.640 --> 00:15:38.460
A shadow profile.


00:15:38.460 --> 00:15:43.940
And so the news is that the declassified report is here.


00:15:43.940 --> 00:15:48.000
It talks about how the U S has been buying large amounts of this type of


00:15:48.000 --> 00:15:53.920
commercial information for purposes of spying and other intelligence related.


00:15:53.920 --> 00:15:54.440
Thanks.


00:15:54.440 --> 00:15:54.820
Right.


00:15:54.820 --> 00:15:59.120
And to some degree, I support what the U S does with national intelligence.


00:15:59.120 --> 00:16:02.280
Do you want them to keep us safe and things like that?


00:16:02.280 --> 00:16:05.360
On the other hand, this seems really out of bounds, right?


00:16:05.360 --> 00:16:08.600
Like I think the report itself even said


00:16:08.600 --> 00:16:12.920
the declassification of the report prompted Senator Wyden


00:16:12.920 --> 00:16:14.120
to call on the US government


00:16:14.120 --> 00:16:16.000
to rein in unchecked surveillance.


00:16:16.000 --> 00:16:17.840
And according to the report,


00:16:17.840 --> 00:16:21.680
ODNI does not even know which agents are doing this


00:16:21.680 --> 00:16:24.440
and said if the government can buy its way


00:16:24.440 --> 00:16:25.520
around the fourth amendment,


00:16:25.520 --> 00:16:29.200
the required must have a reason to search people


00:16:29.200 --> 00:16:31.520
and their properties due process,


00:16:31.520 --> 00:16:33.520
then what's the point of it, right?


00:16:33.520 --> 00:16:36.600
So that's basically what this report goes through


00:16:36.600 --> 00:16:37.960
and talks about.


00:16:37.960 --> 00:16:40.920
And yeah, it's not terribly scary,


00:16:40.920 --> 00:16:44.240
but it's just another reminder that you should be,


00:16:44.240 --> 00:16:46.400
when you go to a website,


00:16:46.400 --> 00:16:50.020
like if you go to say cnn.com or somewhere else


00:16:50.020 --> 00:16:51.400
and you get a big pop-up,


00:16:51.400 --> 00:16:52.560
don't you wanna support us?


00:16:52.560 --> 00:16:54.280
Unblock your ad blocker, right?


00:16:54.280 --> 00:16:57.240
it's not just about selling the ads, right?


00:16:57.240 --> 00:17:01.200
It's about, you know, willingly feeding yourself


00:17:01.200 --> 00:17:06.000
into surveillance pipelines, into retargeting pipelines


00:17:06.000 --> 00:17:08.800
that might change the price you pay for insurance


00:17:08.800 --> 00:17:12.360
or determine whether or not you're eligible for a mortgage,


00:17:12.360 --> 00:17:14.160
not because of what you present,


00:17:14.160 --> 00:17:16.400
but because of, you know, some back channel thing


00:17:16.400 --> 00:17:18.060
that has been discovered about you


00:17:18.060 --> 00:17:20.080
in some way that you didn't intend to,


00:17:20.080 --> 00:17:22.440
or probably, you know, maybe doesn't even make sense, right?


00:17:22.440 --> 00:17:23.280
- Yeah.


00:17:23.280 --> 00:17:24.100
- Accidentally clicked a link


00:17:24.100 --> 00:17:27.220
you're, you're marked as something that you didn't necessarily mean to be.


00:17:27.220 --> 00:17:27.500
Right.


00:17:27.500 --> 00:17:30.140
So anyway, you can, people can look through this.


00:17:30.140 --> 00:17:34.180
I just want to encourage, encourage folks that like, as they think about


00:17:34.180 --> 00:17:37.140
working with ad company, they think about creating these products, just,


00:17:37.140 --> 00:17:38.940
you know, probably less ads, right.


00:17:38.940 --> 00:17:41.540
Over at Python bites, go to one of these.


00:17:41.540 --> 00:17:42.620
We have our ads right here.


00:17:42.620 --> 00:17:45.340
I have like the most intense ad blocking you can get pretty much.


00:17:45.340 --> 00:17:46.660
And what do we see right there?


00:17:46.660 --> 00:17:49.780
An ad from influx data, because we're not retracking you.


00:17:49.780 --> 00:17:50.460
We're not targeting.


00:17:50.460 --> 00:17:53.020
You don't see a cookie banner because there's no cookies, right?


00:17:53.020 --> 00:17:54.260
There's no third party cookies.


00:17:54.260 --> 00:17:57.100
And, and, this, this is certainly possible.


00:17:57.100 --> 00:18:00.740
So I encourage people to use browsers such as Vivaldi or brave, not Chrome


00:18:00.740 --> 00:18:05.300
that do not track you as well as next DNS.


00:18:05.300 --> 00:18:07.540
But I put a link to that in the show notes.


00:18:07.540 --> 00:18:10.740
So, next DNS, I've spelled that right.


00:18:10.740 --> 00:18:12.180
Which is, this is awesome.


00:18:12.180 --> 00:18:14.860
I talked about it before, but like on your mobile phone apps.


00:18:14.860 --> 00:18:17.740
So for example, Flipboard is a thing you flip through when your


00:18:17.740 --> 00:18:21.520
magazine ads or Apple news, when you open it up, those are still full of ads.


00:18:21.540 --> 00:18:24.700
even if you've got an ad blocker installed on your browser, right?


00:18:24.700 --> 00:18:26.700
But once you put this on your local network,


00:18:26.700 --> 00:18:29.020
then everything has ad blocking built in,


00:18:29.020 --> 00:18:31.300
even your mobile apps, which is pretty excellent.


00:18:31.300 --> 00:18:32.180
>> That's pretty cool.


00:18:32.180 --> 00:18:33.580
>> Yeah.


00:18:33.580 --> 00:18:36.700
>> I highly encourage people with


00:18:36.700 --> 00:18:40.180
lots of non-tech savvy people in your household to turn


00:18:40.180 --> 00:18:43.020
this on so that people can be protected.


00:18:43.020 --> 00:18:43.900
Anyway.


00:18:43.900 --> 00:18:47.140
>> The only trick is it's a little bit challenging to turn it


00:18:47.140 --> 00:18:50.180
off because it's like a router setting for the whole system.


00:18:50.180 --> 00:18:50.580
>> Okay.


00:18:50.580 --> 00:18:54.740
And so what you can do is you can set up DNS over HTTP


00:18:54.740 --> 00:18:55.940
on your browsers, right?


00:18:55.940 --> 00:18:58.500
So that way, even if you're not at home, it still works.


00:18:58.500 --> 00:19:01.760
But also, I have a second browser, a second browser,


00:19:01.760 --> 00:19:05.940
that if I have to turn off that, I set its HTTPS,


00:19:05.940 --> 00:19:09.100
or its DNS over HTTPS, to a non-blocking one.


00:19:09.100 --> 00:19:12.380
So I can turn on the ads with that browser explicitly,


00:19:12.380 --> 00:19:14.420
like to get around this, so I don't have to configure things.


00:19:14.420 --> 00:19:16.980
But it's a tiny bit of a hassle, but it's super worth it.


00:19:16.980 --> 00:19:19.980
- Yeah, another thing, you talked about ads,


00:19:19.980 --> 00:19:24.340
but there's also tracking analytics.


00:19:24.340 --> 00:19:27.660
So a lot of people are not doing any ads,


00:19:27.660 --> 00:19:30.180
but they're just curious about how good their site


00:19:30.180 --> 00:19:33.440
is working and stuff, so they turn on Google Analytics


00:19:33.440 --> 00:19:34.860
or some other analytics.


00:19:34.860 --> 00:19:39.420
And a lot of analytics are kind of awful


00:19:39.420 --> 00:19:42.060
about collecting and selling data.


00:19:42.060 --> 00:19:43.500
You might get a little bit of value.


00:19:43.500 --> 00:19:46.100
Google gets a lot of value from seeing everybody


00:19:46.100 --> 00:19:47.260
that goes to your website.


00:19:47.260 --> 00:19:52.060
So I do like a lot of people switching to other types of analytics.


00:19:52.060 --> 00:19:56.560
Collecting download counts, a lot of times your host can do that.


00:19:56.560 --> 00:19:59.360
You don't need to put that in cookies or anything like that.


00:19:59.360 --> 00:20:01.840
>> Exactly. That's what we did as well.


00:20:01.840 --> 00:20:03.520
I do want to point out one final thing.


00:20:03.520 --> 00:20:05.760
I do find it ironic.


00:20:05.760 --> 00:20:07.920
I don't know really what you do about this in life.


00:20:07.920 --> 00:20:10.100
So this article is on PCMag,


00:20:10.100 --> 00:20:12.720
which is a well-written article by Michael Pan.


00:20:12.720 --> 00:20:16.000
If I go to search that in Taggy and I pull it up,


00:20:16.000 --> 00:20:19.700
Taggy has like a privacy report on the right hand side of all these things.


00:20:19.700 --> 00:20:23.300
19 trackers and blockers, including advertising,


00:20:23.300 --> 00:20:26.500
Google email aggressive, fingerprinting, email invasive,


00:20:26.500 --> 00:20:28.400
fingerprinting, on and on and on.


00:20:28.400 --> 00:20:29.400
It's like, well, okay.


00:20:29.400 --> 00:20:30.000
Wow.


00:20:30.000 --> 00:20:32.400
As you go to learn about how this is not ideal,


00:20:32.400 --> 00:20:36.000
you only get 19 trackers put on you.


00:20:36.000 --> 00:20:38.000
Yeah, yeah.


00:20:38.000 --> 00:20:40.200
Okay.


00:20:40.200 --> 00:20:42.300
Maybe one final thing here is


00:20:42.300 --> 00:20:43.500
Daniel points out


00:20:43.500 --> 00:20:47.820
Piehole DNS ad blocker has a feature that lets you disable ad blocking for a period of time.


00:20:47.820 --> 00:20:52.700
Interesting. And so the next DNS thing is like Piehole as a service, basically.


00:20:52.700 --> 00:20:54.860
So they're similar. Interesting. Okay.


00:20:54.860 --> 00:21:01.100
All right. Well, on a slightly brighter note, maybe, let's talk about pytest.


00:21:01.100 --> 00:21:02.380
Yes.


00:21:02.380 --> 00:21:07.820
So Frank Wiles wrote an article for RevSys titled,


00:21:07.820 --> 00:21:10.060
"Pro Tip, pytest Fixtures Are Magic."


00:21:10.060 --> 00:21:13.020
They're not really magic, but they kind of look like magic.


00:21:13.020 --> 00:21:14.020
They seem like magic.


00:21:14.020 --> 00:21:19.700
So I just wanted to highlight this because it was a pretty well,


00:21:19.700 --> 00:21:23.540
fixtures are the part of pytest that is the brain shift.


00:21:23.540 --> 00:21:25.180
So when you get into pytest,


00:21:25.180 --> 00:21:32.660
understanding fixtures is the big thing that is difficult to get your head around.


00:21:32.660 --> 00:21:37.940
So that's why I really appreciate the article talking through that.


00:21:37.940 --> 00:21:40.660
Fixtures, if anybody is unfamiliar,


00:21:40.660 --> 00:21:55.620
you can kind of think of them like set up and tear down they run before and after your test and well parts of it run after if you set it up if you need to the now revsys does a lot of work with Django so there's


00:21:55.620 --> 00:22:00.180
this is articles talking about the idea of like you


00:22:00.140 --> 00:22:11.820
To test your like let's say you have a it has a like is the hypothetical scenario that you got a feature where like you're testing a workflow we have you want your


00:22:11.820 --> 00:22:20.020
you need to you gotta have different users you need to create an owner because you want to see if you can filter swear words out of comments


00:22:19.960 --> 00:22:31.000
So in like some in and so it like in get up or something you'd have to create an organization and then create a user and then have a public repo in a private repo to be able to test


00:22:31.000 --> 00:22:41.600
your functionality and there's a lot of setup and there's often a lot of setup needed for a lot of a lot of software projects so fix your helpful so that's the setup you get it's through


00:22:41.520 --> 00:22:45.280
goes through just talking basically about how to use them.


00:22:45.280 --> 00:22:48.000
Fixtures are just a function that's decorated with


00:22:48.000 --> 00:22:51.520
pytest.fixture, and you use it by, in the test, you just


00:22:51.520 --> 00:22:56.480
call the, you put the function name, the name of the fixture in the parameter list,


00:22:56.480 --> 00:23:00.080
and it magically just happens for you. And that's the magic part.


00:23:00.080 --> 00:23:04.960
One of the things I really like is it goes, kind of goes into depth of


00:23:04.960 --> 00:23:07.760
even more than that, they're kind of cool, you can compose them,


00:23:07.760 --> 00:23:16.080
fixtures can use other fixtures and you can use more than one it's kind of neat goes through talking about also


00:23:16.080 --> 00:23:24.820
that they can return things so they can return either just simple data like strings or numbers but they can also return


00:23:24.820 --> 00:23:33.720
dictionaries and objects and instantiated things and they can even return a function that can create things for you so


00:23:33.660 --> 00:23:39.980
So it's kind of a neat example, he returns, he has a fixture called makeUser


00:23:39.980 --> 00:23:48.460
that returns a new user created, it returns a function that you can call to create a user


00:23:48.460 --> 00:23:51.740
with parameters and stuff. So that's kind of a neat example.


00:23:51.740 --> 00:23:53.580
It's like a fixture factory.


00:23:53.580 --> 00:23:58.780
Yeah, like an object factory returned as a fixture thing.


00:23:58.780 --> 00:24:04.320
So yeah, and another example with like a make admin fixture


00:24:04.320 --> 00:24:08.320
that returns a function that can create an admin user.


00:24:08.320 --> 00:24:10.320
So that's kind of neat.


00:24:10.320 --> 00:24:12.640
One of the things that was new that I hadn't seen,


00:24:12.640 --> 00:24:14.640
which is kind of a cool idea,


00:24:14.640 --> 00:24:16.840
is how to organize your fixtures.


00:24:16.840 --> 00:24:19.840
So he talks about putting...


00:24:19.840 --> 00:24:23.240
He's got like, let's say, a big Django project


00:24:23.240 --> 00:24:27.840
and each of the different Django applications within the project


00:24:27.840 --> 00:24:35.040
have their own tests and within those there's a fixtures file you can't use that directly


00:24:35.040 --> 00:24:40.720
this is a trick that they're doing is sticking the fixtures in a file called fixtures


00:24:40.720 --> 00:24:46.960
and then at the top level having a conf test file that imports those just imports everything out of it


00:24:46.960 --> 00:24:51.600
and at first i was like why would you do that why don't you just put conf test files there


00:24:51.600 --> 00:25:00.080
And his reason, whether you think he's sane or not, the reason is so that you can keep the code local to the application that's using it.


00:25:00.080 --> 00:25:07.240
Maybe it's even a sub project or sub Git repo or something, who knows.


00:25:07.240 --> 00:25:15.640
But at the top level, you can have access to it. So any test can access any fixture within any other application.


00:25:15.640 --> 00:25:19.880
That may or may not be a good thing for you, but it's kind of a cool idea.


00:25:19.880 --> 00:25:28.060
And then he talks about how plugins can have fixtures also. There's the excellent pytest Django


00:25:28.060 --> 00:25:35.240
plugin that has things like DB which marks your tests, creates the database for you before you start,


00:25:35.240 --> 00:25:42.600
and a client that, you know, it makes it, I'm learning Django right now and I'm using pytest Django and it's pretty awesome.


00:25:42.600 --> 00:25:48.100
And then RevSys itself has an extension called Django Test Plus,


00:25:48.100 --> 00:25:50.440
which has a thing called TP,


00:25:50.440 --> 00:25:54.940
and that has some extra cool features


00:25:54.940 --> 00:25:58.440
that aren't out of the box with pytest Django.


00:25:58.440 --> 00:25:59.640
So that's kind of fun.


00:25:59.640 --> 00:26:00.640
The last bit of--


00:26:00.640 --> 00:26:03.140
And even get requests like within the app.


00:26:03.140 --> 00:26:03.940
Yeah.


00:26:03.940 --> 00:26:05.640
Yeah, and test for the response.


00:26:05.640 --> 00:26:07.640
Yeah, a lot of-- kind of like what you would do with requests,


00:26:07.640 --> 00:26:09.840
but inside without actually going through the network.


00:26:09.840 --> 00:26:10.340
Right.


00:26:10.340 --> 00:26:18.820
And it's very similar to the unit test framework around Django, built into Django also.


00:26:18.820 --> 00:26:24.320
I'm glad that the Django Test+ and the Django pytest plugin


00:26:24.320 --> 00:26:30.460
are pretty consistent with the unit test, so if you want to switch back and forth, it's not that hard.


00:26:30.460 --> 00:26:36.420
And as a reminder, you can run unit test functions from pytest also, but why would you?


00:26:36.420 --> 00:26:44.300
The last bit I want to highlight, and I have reached out to Frank, but I haven't heard anything back.


00:26:44.300 --> 00:26:49.180
He has an example on the auto use. It's just wrong. So don't take his word for it.


00:26:49.180 --> 00:26:57.020
The auto use is cool. Auto use makes fixtures just run automatically before your test without having to call them out.


00:26:57.020 --> 00:27:04.300
But it's really hard to come up with a good toy example for why you'd use it, because there aren't very many good examples for why you'd use it.


00:27:04.300 --> 00:27:07.580
It seems magical at first, and then it suddenly


00:27:07.580 --> 00:27:10.620
doesn't take long to go, "Wow, I really should be careful with that."


00:27:10.620 --> 00:27:11.980
Because you should be careful with it.


00:27:11.980 --> 00:27:15.340
This example shows that a global value being set


00:27:15.340 --> 00:27:18.380
with a fixture, and that's just not true. It doesn't do that.


00:27:18.380 --> 00:27:22.780
If you want to get the object, the return value of a fixture,


00:27:22.780 --> 00:27:25.100
you have to name the fixture within the test.


00:27:25.100 --> 00:27:30.620
So that's about it, really. It's a pretty fun introduction to fixtures.


00:27:30.620 --> 00:27:33.100
Yeah, they could fix it up by just having a variable


00:27:33.100 --> 00:27:36.040
in the module and saying global and then set its value, right?


00:27:36.040 --> 00:27:37.840
Like you would with any other Python function.


00:27:37.840 --> 00:27:38.240
>> Yeah.


00:27:38.240 --> 00:27:39.200
>> If you wanted to.


00:27:39.200 --> 00:27:41.720
>> The other thing I wanted to point out is he says,


00:27:41.720 --> 00:27:44.320
tempter is a really cool built-in fixture.


00:27:44.320 --> 00:27:46.900
It is, but it's deprecated.


00:27:46.900 --> 00:27:50.400
Temp path is what we try to get people to use now


00:27:50.400 --> 00:27:53.640
because it uses pathlib and pathlib is awesome.


00:27:53.640 --> 00:27:58.160
>> Indeed, Tony Sherman has been on the same journey and says,


00:27:58.160 --> 00:28:00.120
"It seems so great, auto use."


00:28:00.120 --> 00:28:02.840
at the beginning and things blow up quickly.


00:28:02.840 --> 00:28:03.760
>> Yeah.


00:28:03.760 --> 00:28:05.920
>> Brian, can you open up a website for me?


00:28:05.920 --> 00:28:06.360
>> Sure.


00:28:06.360 --> 00:28:09.960
>> Before we move on as a piece of follow-up for plausible.io.


00:28:09.960 --> 00:28:14.960
Pat Decker, former co-guest host about a year ago,


00:28:14.960 --> 00:28:19.240
says plausible is the open-source option alternative to Google Analytics,


00:28:19.240 --> 00:28:22.880
which is GDPR compliant and doesn't set third-party cookies.


00:28:22.880 --> 00:28:24.920
If you scroll down, you can see that somewhere in there.


00:28:24.920 --> 00:28:25.440
>> Cool.


00:28:25.440 --> 00:28:26.640
>> Why did I ask you to open it?


00:28:26.640 --> 00:28:28.640
Why didn't I just open it on my share?


00:28:28.640 --> 00:28:35.900
Because my next DNS blocks it like it does everything else until I like clear the DNS out of my web browser, which is good.


00:28:35.900 --> 00:28:36.900
Oh, it finally came back.


00:28:36.900 --> 00:28:39.700
It took a while, even though I allow us to did so I could pull it up.


00:28:39.700 --> 00:28:41.940
But yeah, it's, it looks pretty interesting.


00:28:41.940 --> 00:28:42.940
I had not heard about that.


00:28:42.940 --> 00:28:44.580
So thank you, Pat, for that shout out.


00:28:44.580 --> 00:28:56.300
That certainly seems like a, I know nothing about it, but what I've already learned is it looks like a, a mega improvement over the other types of retargeting feeding third party cookie drop in analytics systems.


00:28:56.300 --> 00:28:57.140
So pretty cool.


00:28:57.140 --> 00:28:57.740
Thanks.


00:28:57.740 --> 00:28:58.180
Cool.


00:28:58.180 --> 00:28:58.420
Yeah.


00:28:58.420 --> 00:28:59.540
I have no extras.


00:28:59.540 --> 00:29:01.540
You have no extras.


00:29:01.540 --> 00:29:03.540
Okay, well I got a couple of extras.


00:29:03.540 --> 00:29:09.340
I ran across this fun tool, or fun contest.


00:29:09.340 --> 00:29:14.700
The International Obfuscated Python Code Competition.


00:29:14.700 --> 00:29:19.220
I know that those existed for C and Perl,


00:29:19.220 --> 00:29:21.220
but I didn't know that we had a Python one.


00:29:21.220 --> 00:29:25.820
Submissions are due tentatively by August 30th,


00:29:25.820 --> 00:29:29.620
and I have no idea about who's running this.


00:29:29.620 --> 00:29:31.980
But it looks fun.


00:29:31.980 --> 00:29:33.980
Oh, probably the judges.


00:29:33.980 --> 00:29:37.820
So Julius, Kevin, Shane, and Anonymous will judge you.


00:29:37.820 --> 00:29:38.820
Yeah.


00:29:38.820 --> 00:29:42.820
But I'm just curious if...


00:29:42.820 --> 00:29:46.260
I know that it's possible to write terrible Python code,


00:29:46.260 --> 00:29:48.820
but I'm looking forward to seeing the results.


00:29:48.820 --> 00:29:52.820
Next up, there's a quick...


00:29:52.820 --> 00:29:57.740
We talk about a lot of things that are using Rust to speed up parts of Python.


00:29:57.740 --> 00:30:02.340
So there's a decent article called "Porting Python Objects to Rust".


00:30:02.340 --> 00:30:05.540
I think it's decent. I haven't walked through it to see if you can actually do this.


00:30:05.540 --> 00:30:08.900
But the recommendation here is


00:30:08.900 --> 00:30:12.300
if you've got a Python project that you'd like to replace


00:30:12.300 --> 00:30:16.780
all or part of it with Rust, go slow and port pieces of it at a time.


00:30:16.780 --> 00:30:18.780
Iterative porting.


00:30:18.780 --> 00:30:21.580
I like, there's a lot of things that I've thought about


00:30:21.580 --> 00:30:24.100
or cool Python tools that'd be kind of neat


00:30:24.100 --> 00:30:26.260
if like part of it was speeded up with,


00:30:26.260 --> 00:30:27.380
sped up with Rust.


00:30:27.380 --> 00:30:29.220
- Maybe.


00:30:29.220 --> 00:30:30.420
- Step one, learn Rust.


00:30:30.420 --> 00:30:31.780
- Step one.


00:30:31.780 --> 00:30:35.040
Or step one, have a podcast where you convince other people


00:30:35.040 --> 00:30:36.140
to write it in Rust.


00:30:36.140 --> 00:30:38.100
- That's right.


00:30:38.100 --> 00:30:39.020
Also an option.


00:30:39.020 --> 00:30:40.860
- Yeah, anyway, that's all I got.


00:30:40.860 --> 00:30:42.100
- All right, cool, those are good.


00:30:42.100 --> 00:30:44.500
Final one here is Henry points out


00:30:44.500 --> 00:30:46.620
that scientific Python use is possible


00:30:46.620 --> 00:30:47.980
on their website, presumably.


00:30:47.980 --> 00:30:48.980
>> Okay.


00:30:48.980 --> 00:30:50.940
>> Okay. Ready for a joke?


00:30:50.940 --> 00:30:54.240
>> Well, almost. I would like to encourage people to


00:30:54.240 --> 00:30:58.820
submit questions to our Ask Me Anything.


00:30:58.820 --> 00:31:01.500
Let's see, do we have a link for that?


00:31:01.500 --> 00:31:03.180
>> We do have a link for that.


00:31:03.180 --> 00:31:08.500
The link is, which I was going to mention that and somehow didn't, didn't I?


00:31:08.500 --> 00:31:11.940
It's pythonbytes.fm/ama2023.


00:31:11.940 --> 00:31:13.500
I'll put a link in the show notes.


00:31:13.500 --> 00:31:16.500
>> Okay. Link will be in the show notes and it'll look something like this.


00:31:16.500 --> 00:31:20.080
So indeed, and we've got a bunch of great comments and thoughts and


00:31:20.080 --> 00:31:21.600
very kind messages in there as well.


00:31:21.600 --> 00:31:23.120
So much appreciated.


00:31:23.120 --> 00:31:29.060
We're going to do our ask me, ask us anything in July 11th.


00:31:29.060 --> 00:31:32.620
If we can make it work, then we'll confirm as we get closer, but that'd be a fun one


00:31:32.620 --> 00:31:35.420
for a lot of people to attend live because they could also ask us stuff.


00:31:35.420 --> 00:31:36.520
Yeah, it'll be good.


00:31:36.520 --> 00:31:36.840
Sure.


00:31:36.840 --> 00:31:37.380
Well, all right.


00:31:37.380 --> 00:31:38.240
Ready for a joke now?


00:31:38.240 --> 00:31:38.940
Yes.


00:31:38.940 --> 00:31:41.220
So stack overflow is pretty awesome, right?


00:31:41.220 --> 00:31:41.720
Brian?


00:31:41.720 --> 00:31:45.520
I mean, it's a huge resource if you want to find something, right?


00:31:45.520 --> 00:31:47.240
you got some kind of problem,


00:31:47.240 --> 00:31:48.880
especially if it's kind of outside the realm


00:31:48.880 --> 00:31:50.080
of your usual expertise.


00:31:50.080 --> 00:31:51.800
You're like, ah, I gotta work on,


00:31:51.800 --> 00:31:53.760
gotta work on this JavaScript thing.


00:31:53.760 --> 00:31:54.600
I don't know how it works.


00:31:54.600 --> 00:31:56.560
If I just Google it, maybe someone else had the problem


00:31:56.560 --> 00:31:59.160
or you know, something's not working, yeah?


00:31:59.160 --> 00:32:00.280
But as a social network,


00:32:00.280 --> 00:32:02.320
it can be a bit of a rough and tumble place.


00:32:02.320 --> 00:32:05.720
Come in here and it has this picture of this guy


00:32:05.720 --> 00:32:09.680
wearing a t-shirt offering like a bouquet


00:32:09.680 --> 00:32:11.760
of lavender flowers or something.


00:32:11.760 --> 00:32:16.400
he just picked up off of the, you know, like along the side during some protests


00:32:16.400 --> 00:32:20.360
and there's these like cops or military folks in like armor and he tries to


00:32:20.360 --> 00:32:24.040
offer it to one of them and says, me asking a question on stack overflow.


00:32:24.040 --> 00:32:28.880
And then immediately they swarm him and like, you know, put him in a necklock


00:32:28.880 --> 00:32:30.360
and stuff and it says, Mark does duplicate.


00:32:30.360 --> 00:32:32.640
It's always marked as duplicate.


00:32:32.640 --> 00:32:33.760
Yeah.


00:32:33.760 --> 00:32:35.520
And that's the easy one.


00:32:35.520 --> 00:32:38.840
Um, yeah, it's can be a brutal place.


00:32:38.840 --> 00:32:40.160
Yes, it can.


00:32:40.160 --> 00:32:42.160
I find it better as read-only.


00:32:42.160 --> 00:32:43.520
[LAUGHTER]


00:32:43.520 --> 00:32:47.280
>> Yeah. But it is one of those handy places that happens to have,


00:32:47.280 --> 00:32:49.520
like when you just take


00:32:49.520 --> 00:32:52.940
your actual error message and Google it,


00:32:52.940 --> 00:32:55.460
it often lands in Stack Overflow somewhere.


00:32:55.460 --> 00:32:57.920
>> Yes, it does. It's often helpful.


00:32:57.920 --> 00:32:58.760
>> Yeah.


00:32:58.760 --> 00:33:00.760
>> If you're willing to take a little abuse.


00:33:00.760 --> 00:33:02.840
>> If you want to get a headlock, yeah.


00:33:02.840 --> 00:33:03.680
>> Yeah, exactly.


00:33:03.680 --> 00:33:04.960
[LAUGHTER]


00:33:04.960 --> 00:33:07.340
>> Nice. I also heard that recently,


00:33:07.340 --> 00:33:10.020
There's been a bunch of Stack Overflow,


00:33:10.020 --> 00:33:12.660
like issue moderators and stuff that-


00:33:12.660 --> 00:33:13.180
>> Reddit.


00:33:13.180 --> 00:33:14.060
>> Oh, was it Reddit?


00:33:14.060 --> 00:33:15.180
>> Reddit blackout.


00:33:15.180 --> 00:33:16.140
>> Yeah.


00:33:16.140 --> 00:33:18.780
>> So the CEO, I forgot the guy's name,


00:33:18.780 --> 00:33:21.820
the CEO of Reddit decided that they were going to


00:33:21.820 --> 00:33:26.580
monetize the API of Reddit because like Twitter did a little bit,


00:33:26.580 --> 00:33:29.220
Twitter wanted to kill off the third-party clients


00:33:29.220 --> 00:33:31.500
just to make them go away so they had more control.


00:33:31.500 --> 00:33:34.700
That was one of the things that happened when us took over.


00:33:34.700 --> 00:33:36.340
So they didn't quite want to do that.


00:33:36.340 --> 00:33:40.740
They wanted to charge money for the API because they're not showing ads for the mobile apps.


00:33:40.740 --> 00:33:45.420
And Apollo was the mobile app that was most is, I guess, maybe was more accurate, was


00:33:45.420 --> 00:33:46.780
most popular.


00:33:46.780 --> 00:33:51.060
And in order for that app to keep running, I think they have to pay $20 million a year


00:33:51.060 --> 00:33:53.760
in API fee call fees.


00:33:53.760 --> 00:33:55.540
So they're like, well, we don't make that much money.


00:33:55.540 --> 00:33:56.540
We're shutting down.


00:33:56.540 --> 00:34:01.380
And so they're effectively killed off all the third party clients, which set off a protest


00:34:01.380 --> 00:34:07.380
And the protest manifested in that people who are moderating popular Reddit areas,


00:34:07.380 --> 00:34:12.580
sub-Reddits, mark them all as private to say, you know,


00:34:12.580 --> 00:34:16.380
we're taking our content, our contributions we put into Reddit off


00:34:16.380 --> 00:34:19.380
as a way of protesting what you're doing for the community


00:34:19.380 --> 00:34:22.380
to like close it down and, you know, extract money from it basically.


00:34:22.380 --> 00:34:24.980
Yeah, but also, I mean, also Stack Overflow.


00:34:24.980 --> 00:34:29.380
So Stack Overflow is a, I don't know, six months ago,


00:34:29.380 --> 00:34:34.100
is like blocked because of people like it.


00:34:34.100 --> 00:34:38.140
Obviously, I think everybody on our that's listening here knows what Stack Overflow is.


00:34:38.140 --> 00:34:42.660
But people are taking the questions and just going and pasting them in ChatGPT,


00:34:42.660 --> 00:34:45.420
getting the answer and putting them back in the Stack Overflow.


00:34:45.420 --> 00:34:47.420
That's lame.


00:34:47.420 --> 00:34:49.980
What even?


00:34:49.980 --> 00:34:52.260
So apparently, that's blocked.


00:34:52.260 --> 00:34:53.060
>> Yeah.


00:34:53.060 --> 00:34:57.780
>> Well, I sure had fun talking with you today and talking with everybody.


00:34:57.780 --> 00:35:04.180
and just excited about the future of not using AI for my software.


00:35:04.180 --> 00:35:04.860
Thanks, Michael.


00:35:04.860 --> 00:35:06.580
>> I have to go back to writing to myself as well.


00:35:06.580 --> 00:35:07.100
>> Yeah.


00:35:07.100 --> 00:35:07.980
>> Thanks as always, Brian.

