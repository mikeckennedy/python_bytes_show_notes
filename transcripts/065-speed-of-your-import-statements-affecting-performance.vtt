WEBVTT

00:00:00.001 --> 00:00:04.800
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.800 --> 00:00:08.720
This is episode 65, recorded February 7th, 2018.

00:00:08.720 --> 00:00:09.780
I'm Michael Kennedy.

00:00:09.780 --> 00:00:10.680
And I'm Brian Ackett.

00:00:10.680 --> 00:00:13.240
And we got a bunch of cool stuff.

00:00:13.240 --> 00:00:15.840
I really am excited to share a couple of these things with you.

00:00:15.840 --> 00:00:18.980
And I'm excited to have Rollbar as a sponsor.

00:00:18.980 --> 00:00:21.820
So you probably heard about Rollbar from other episodes.

00:00:21.820 --> 00:00:25.760
If you want to check them out, we got a special offer at pythonbytes.fm/rollbar.

00:00:25.760 --> 00:00:26.980
Tell you more about that later.

00:00:26.980 --> 00:00:29.400
I kind of want to know about some charts.

00:00:29.400 --> 00:00:31.320
I have got like this just...

00:00:31.320 --> 00:00:35.100
Have you ever seen the test output on Jenkins?

00:00:35.100 --> 00:00:36.440
If you have testing?

00:00:36.440 --> 00:00:37.580
No, I haven't played with Jenkins.

00:00:37.580 --> 00:00:38.000
Okay.

00:00:38.000 --> 00:00:42.660
Well, so in Jenkins builds, there's this thing where you can, after you run your tests,

00:00:42.660 --> 00:00:47.280
you can have it display your passed and failed tests in this little graph.

00:00:47.280 --> 00:00:48.440
It's just a little chart.

00:00:48.440 --> 00:00:49.360
It's an area chart.

00:00:49.360 --> 00:00:55.720
I wanted one of those, but I wanted something that would show like five of those charts, a whole bunch of them.

00:00:55.720 --> 00:00:57.680
So it doesn't do it automatically.

00:00:57.680 --> 00:01:02.740
I probably could have hunted into Jenkins or something, but I wanted to build my own thing.

00:01:02.740 --> 00:01:04.160
So I want to do it in Flask.

00:01:04.160 --> 00:01:06.680
And I've been trying to figure this out.

00:01:06.680 --> 00:01:09.600
And there was a great tutorial by...

00:01:09.600 --> 00:01:11.320
This is going to be a little story anyway.

00:01:11.320 --> 00:01:17.720
But there was this great tutorial by the Matt McKay from Fullstack that showed how to do this,

00:01:17.720 --> 00:01:20.120
almost how to do this in Boca or Bokeh.

00:01:20.240 --> 00:01:20.420
Yeah.

00:01:20.420 --> 00:01:21.100
Very nice.

00:01:21.100 --> 00:01:22.600
That's a cool project too.

00:01:22.600 --> 00:01:22.940
Yeah.

00:01:22.940 --> 00:01:26.920
But Bokeh, the current version of Bokeh dropped the charting feature.

00:01:26.920 --> 00:01:28.060
That's not helpful.

00:01:28.060 --> 00:01:30.660
But there goes your solution you just found.

00:01:30.660 --> 00:01:31.000
Yeah.

00:01:31.000 --> 00:01:32.700
So I'm trying to do it in...

00:01:32.700 --> 00:01:34.360
And I gave up and asked Twitter.

00:01:34.360 --> 00:01:41.500
And what came back was one of these options was Pygal, P-Y-G-A-L, which ends up very...

00:01:41.500 --> 00:01:43.700
It's very simple, but I can...

00:01:43.700 --> 00:01:47.220
Within 20 minutes, I had a Flask app running with these charts up.

00:01:47.380 --> 00:01:54.280
So it's not as hugely featured as some of the other graphing applications, but it's very cool.

00:01:54.280 --> 00:01:56.740
And it also can export SVG.

00:01:56.740 --> 00:01:57.920
So these are small.

00:01:57.920 --> 00:02:00.760
It's pretty small also when you're displaying these.

00:02:00.760 --> 00:02:01.460
That's cool.

00:02:01.460 --> 00:02:08.260
And the SVGs can have basically infinite, very high levels of sort of zoomability, right?

00:02:08.260 --> 00:02:10.920
Because they're scalable, right?

00:02:10.920 --> 00:02:12.440
That's their first name.

00:02:12.440 --> 00:02:13.020
That's the S.

00:02:13.020 --> 00:02:14.820
They also do PMGs, like you said.

00:02:14.820 --> 00:02:15.160
That's cool.

00:02:15.160 --> 00:02:16.880
And they have a bunch of great looking charts.

00:02:16.880 --> 00:02:18.260
Like, these are really nice.

00:02:18.260 --> 00:02:22.820
So you can do like bar charts or Py or the radar ones, all sorts of good stuff.

00:02:22.820 --> 00:02:26.720
So I still want to get something like bouquet or something like that to work so that I can

00:02:26.720 --> 00:02:30.580
make them interactive because these aren't interactive things.

00:02:30.580 --> 00:02:32.840
You build them and just display them.

00:02:32.840 --> 00:02:35.580
But for my needs right now, that works.

00:02:35.580 --> 00:02:36.560
And it's very nice.

00:02:36.560 --> 00:02:37.560
Yeah, very nice.

00:02:37.560 --> 00:02:42.780
And kudos to the people writing the documentation because they have documentation on how to...

00:02:42.780 --> 00:02:46.680
Pretty much they have it in Django, Flask, and pretty much any HTML that you

00:02:46.680 --> 00:02:48.840
want to throw this in, how to do that.

00:02:48.840 --> 00:02:49.300
Oh, yeah.

00:02:49.300 --> 00:02:50.080
That's super cool.

00:02:50.080 --> 00:02:55.000
And they have nice pictures, which is always really powerful when you're talking about graphs

00:02:55.000 --> 00:02:56.940
or UI or things like this.

00:02:56.940 --> 00:02:57.060
Yeah.

00:02:57.060 --> 00:02:58.420
You can just admire the picture.

00:02:58.420 --> 00:02:59.220
You go, okay, I want this.

00:02:59.220 --> 00:02:59.880
Now I'll pay attention.

00:02:59.880 --> 00:03:01.180
Really nice.

00:03:01.340 --> 00:03:06.860
So a lot of people send us messages and they ask for advice on like a sort of career path

00:03:06.860 --> 00:03:11.600
or I'm thinking about this technology or how do I get started in programming or, you know,

00:03:11.600 --> 00:03:12.460
something like that.

00:03:12.460 --> 00:03:18.380
And there was this really interesting post over on Reddit under learn programming.

00:03:18.380 --> 00:03:22.460
And so it's not technically a Python thing, but a bunch of Python people are hanging out

00:03:22.460 --> 00:03:22.640
there.

00:03:22.640 --> 00:03:23.400
So that's kind of cool.

00:03:24.140 --> 00:03:28.380
And the idea was this guy, he gets a guy who wrote me.

00:03:28.380 --> 00:03:34.500
Anyway, person posted it, sent a message and said, hey, look, I'm 31 days into a self-study

00:03:34.500 --> 00:03:36.800
program on Python and I'm loving every minute of it.

00:03:36.800 --> 00:03:37.920
A couple of questions.

00:03:37.920 --> 00:03:41.140
Could you all fill this out just so we can share our experiences?

00:03:41.140 --> 00:03:42.020
Oh, interesting.

00:03:42.020 --> 00:03:42.560
Isn't that cool?

00:03:42.640 --> 00:03:45.580
So what were you doing before you began self-study and programming?

00:03:45.580 --> 00:03:50.380
So it's for people who are doing self-study and what made you want to study programming on

00:03:50.380 --> 00:03:50.900
your own?

00:03:50.900 --> 00:03:52.300
How did you get started?

00:03:52.300 --> 00:03:56.920
How long did it take for you to feel confident enough in your skills and knowledge to think

00:03:56.920 --> 00:03:57.900
that you could be employed?

00:03:57.900 --> 00:04:01.600
What else did you do besides self-study that helped you?

00:04:01.600 --> 00:04:03.120
And what are you, what's next?

00:04:03.120 --> 00:04:08.580
And this thread just blew up on Reddit and there's all these really interesting conversations.

00:04:09.280 --> 00:04:13.720
And so anyone out there who is sort of in the early stages of self-study, maybe they're

00:04:13.720 --> 00:04:18.760
doing a hundred days of code type thing, or they're in a bootcamp or they're taking, you

00:04:18.760 --> 00:04:19.620
know, online courses.

00:04:19.620 --> 00:04:21.860
I know a few places have good ones of those.

00:04:21.860 --> 00:04:28.100
I think going through here and reading this, it would be really, really valuable to sort of

00:04:28.100 --> 00:04:29.280
have that shared experience.

00:04:29.280 --> 00:04:29.960
Isn't that cool?

00:04:29.960 --> 00:04:30.800
Oh, that's great.

00:04:30.800 --> 00:04:31.100
Yes.

00:04:31.100 --> 00:04:33.640
So there's another story that's linked from there.

00:04:33.640 --> 00:04:37.960
So this one doesn't technically count as an item, but people might also find it interesting

00:04:37.960 --> 00:04:43.040
as a thread to keep following is someone said, oh, this, there are people who are like 30,

00:04:43.040 --> 00:04:45.820
40, like, hey, I'm learning to code in my forties.

00:04:45.820 --> 00:04:49.340
And you guys are really inspiring me to realize this is actually possible.

00:04:49.340 --> 00:04:51.100
It's not too late for me, you know?

00:04:51.100 --> 00:04:55.820
So there's this article called stories from 300 developers who got their first tech job in

00:04:55.820 --> 00:04:58.980
their thirties, forties, and fifties linked from there.

00:04:58.980 --> 00:04:59.700
That's cool.

00:04:59.700 --> 00:05:00.840
I got to go read that.

00:05:00.840 --> 00:05:01.180
Yeah.

00:05:01.180 --> 00:05:03.460
And I think that might be real helpful to some folks as well.

00:05:03.460 --> 00:05:08.300
So if you're in this space and you want some shared experiences and to connect with some

00:05:08.300 --> 00:05:10.820
people, check out this thread we're linking to because I think it's helpful.

00:05:10.820 --> 00:05:16.060
On that topic of learning, actually, there's a couple episodes of Test and Code that'll be

00:05:16.060 --> 00:05:16.460
good.

00:05:16.460 --> 00:05:22.960
I just did one recently about extended learning through universities, which I hadn't considered

00:05:22.960 --> 00:05:23.400
before.

00:05:23.400 --> 00:05:30.100
And then also there's upcoming, I'm talking with Stephanie Hurlbert on talking with mentors

00:05:30.100 --> 00:05:32.860
and opening yourself up to be a mentor as well.

00:05:32.860 --> 00:05:33.120
Yeah.

00:05:33.120 --> 00:05:33.320
Yeah.

00:05:33.320 --> 00:05:33.680
Very cool.

00:05:33.680 --> 00:05:35.240
I'm looking forward to checking those out.

00:05:35.240 --> 00:05:37.780
This is one of those well-planned, awesome transitions.

00:05:37.780 --> 00:05:38.460
Amazing.

00:05:38.460 --> 00:05:42.240
So one of the things that you probably don't care about when you're getting started is how

00:05:42.240 --> 00:05:43.440
fast your imports run.

00:05:43.440 --> 00:05:46.080
You probably don't know what an import is at the beginning.

00:05:46.080 --> 00:05:46.680
Exactly.

00:05:46.680 --> 00:05:53.100
But import, how long it takes to import your different modules is part of the painful startup

00:05:53.100 --> 00:05:55.360
process of any Python application.

00:05:55.360 --> 00:05:58.140
And I didn't really know how to debug that, actually.

00:05:58.300 --> 00:05:59.600
I never really thought of it before.

00:05:59.600 --> 00:06:07.700
But in Python 3.7 coming up, there will be a, there is a dash X import time that allows

00:06:07.700 --> 00:06:14.440
you to, there's a flag that you can run that allows you to investigate and profile all of

00:06:14.440 --> 00:06:19.740
the time for importing different libraries, which sounds really cool, actually.

00:06:19.740 --> 00:06:22.540
Yeah, that is really, really quite cool.

00:06:22.680 --> 00:06:28.540
And so you can just basically run it and it'll tell you this library took that long to import.

00:06:28.540 --> 00:06:31.060
This other library took that long to import and so on.

00:06:31.060 --> 00:06:34.540
And I didn't realize how long some of these actually took to load.

00:06:34.540 --> 00:06:38.920
And like any optimization, it's probably never where you really think it's going to be.

00:06:38.920 --> 00:06:40.100
It's probably someplace else.

00:06:40.100 --> 00:06:42.680
So having it profiled is great.

00:06:42.680 --> 00:06:47.080
And, you know, sometimes you just have to import things, but some, some parts of your system

00:06:47.080 --> 00:06:53.000
may have too many imports initially and they could be possibly delayed till later.

00:06:53.000 --> 00:06:55.900
Yeah, you could definitely possibly do it conditionally, right?

00:06:55.900 --> 00:07:00.620
If you only know in certain circumstances that code is going to run.

00:07:00.620 --> 00:07:04.780
So you could maybe somehow delay the import until you actually need it.

00:07:04.780 --> 00:07:06.480
So a lot of, a lot of cool things, right?

00:07:06.620 --> 00:07:10.780
Like, let's say you've got a, like an editor application or something, you'd, all of the

00:07:10.780 --> 00:07:14.280
stuff that you'd need to, I don't know, like convert your format.

00:07:14.280 --> 00:07:17.260
So that for saving, you don't really need that all the time.

00:07:17.260 --> 00:07:19.920
You could load it when you, when somebody's trying to save.

00:07:19.920 --> 00:07:20.160
Right.

00:07:20.160 --> 00:07:23.020
Wait, wait for him, hit the command as control us, something like that.

00:07:23.020 --> 00:07:23.320
That's right.

00:07:23.320 --> 00:07:23.560
Yeah.

00:07:23.560 --> 00:07:23.900
Yeah.

00:07:23.900 --> 00:07:24.840
So very, very cool.

00:07:24.840 --> 00:07:29.300
And so this is a feature of Python 3.7 on this is like in the new fancy version.

00:07:29.300 --> 00:07:34.740
Yeah, it's a new fancy version, but I mean, everybody's probably, if you've got a, an application

00:07:34.740 --> 00:07:39.400
working in 3.6 right now, you probably thinking about making sure that it's going to work in

00:07:39.400 --> 00:07:40.440
3.7 by now.

00:07:40.440 --> 00:07:44.860
And you can probably use the 3.7 to optimize current code anyway.

00:07:44.860 --> 00:07:45.120
Right.

00:07:45.120 --> 00:07:48.400
Because you want data classes and why not be able to time your imports while you're at it?

00:07:48.400 --> 00:07:48.880
Yeah.

00:07:48.880 --> 00:07:50.420
Nice.

00:07:50.420 --> 00:07:50.640
Yeah.

00:07:50.640 --> 00:07:54.920
So this just came out in beta last week and we already talked about that.

00:07:54.920 --> 00:07:56.900
So here's one more thing you can do.

00:07:57.000 --> 00:08:02.940
If you've got some library that's taken a while to basically import, I think that article

00:08:02.940 --> 00:08:08.540
that you mentioned that, you know, John, the conclusion, it says the, so I can reduce my

00:08:08.540 --> 00:08:12.780
time for pip and --version from 800 milliseconds to 500 milliseconds.

00:08:12.780 --> 00:08:19.200
That still sounds like a long time, but that's actually, you know, that's 60%, 30%, depending

00:08:19.200 --> 00:08:20.600
on which angle you measure it.

00:08:20.600 --> 00:08:22.940
And not quite, but, but it's a big improvement.

00:08:23.220 --> 00:08:27.940
And it's down into the pieces where it makes it less noticeable from people.

00:08:27.940 --> 00:08:28.180
Yeah.

00:08:28.180 --> 00:08:28.580
Quite cool.

00:08:28.580 --> 00:08:30.080
All right.

00:08:30.080 --> 00:08:33.520
So before we move on the next one, let me tell you about roll bar.

00:08:33.520 --> 00:08:38.500
So roll bar is the thing you integrate into your web applications, whether you're using Django,

00:08:38.500 --> 00:08:41.460
Flask, Pyramid, super easy to integrate.

00:08:42.160 --> 00:08:46.940
Basically to integrate it into Pyramid, you just put a few things in your config file and

00:08:46.940 --> 00:08:47.720
that's it.

00:08:47.720 --> 00:08:51.600
I don't even think you have to touch your code unless you want to directly interact with the

00:08:51.600 --> 00:08:54.000
roll bar API, which you often don't have to do.

00:08:54.000 --> 00:08:58.780
And you can even get it for JavaScript and some other frameworks as well.

00:08:58.780 --> 00:09:01.400
And it'll basically be there when your app is running.

00:09:01.400 --> 00:09:06.620
Anytime there's an error, it'll capture all the details of stack trace, the URL, all the

00:09:06.620 --> 00:09:12.540
request and response values, even the user who is logged in potentially, it'll send that

00:09:12.540 --> 00:09:17.440
off and give you notification over in Slack or email or all sorts of places.

00:09:17.440 --> 00:09:20.460
So you want to make sure you're not missing errors in your web app.

00:09:20.460 --> 00:09:24.540
And if you're not monitoring it, I bet you there are errors in your web app somewhere you don't

00:09:24.540 --> 00:09:24.940
know about.

00:09:24.940 --> 00:09:28.020
Check them out at pythonbytes.fm/roll bar.

00:09:28.780 --> 00:09:34.260
Brian, speaking of web apps, this one we're going to talk about now is it's not the kind

00:09:34.260 --> 00:09:36.660
of web app you might have originally thought of.

00:09:36.660 --> 00:09:38.600
I didn't mention it there in that roll bar ad.

00:09:38.600 --> 00:09:39.660
Anpilar?

00:09:39.660 --> 00:09:41.980
I'm really sure about the pronunciation.

00:09:41.980 --> 00:09:43.400
You want to take a shot at it?

00:09:43.400 --> 00:09:44.140
Anpilar?

00:09:44.140 --> 00:09:44.700
I don't know.

00:09:44.700 --> 00:09:46.080
It's kind of fun to try.

00:09:46.080 --> 00:09:47.080
It's fun to try.

00:09:47.080 --> 00:09:49.860
And I think the an is kind of like Angular.

00:09:49.860 --> 00:09:52.260
The py, obviously, Python.

00:09:52.260 --> 00:09:55.280
The lar, what a great thing to put it in a word.

00:09:55.280 --> 00:10:03.720
But what it is, is it's a web framework for building front end, rich client spa type applications.

00:10:03.720 --> 00:10:05.780
So it's a Python framework.

00:10:05.780 --> 00:10:07.040
You write in it.

00:10:07.040 --> 00:10:10.180
It runs on the client side in the browser.

00:10:10.180 --> 00:10:11.540
Isn't that interesting?

00:10:11.540 --> 00:10:11.940
Yeah.

00:10:11.940 --> 00:10:17.240
So it says basically create web apps with the elegance, simplicity, and full power of Python.

00:10:17.240 --> 00:10:19.760
And you get these sort of reusable components.

00:10:19.760 --> 00:10:23.900
It's very much like AngularJS in that regard that has like a routing engine.

00:10:23.900 --> 00:10:27.840
So you don't actually navigate, but you move around the different views of the app.

00:10:27.840 --> 00:10:29.860
You write all the stuff in Python.

00:10:29.860 --> 00:10:31.940
It's pretty interesting.

00:10:31.940 --> 00:10:34.160
So it's got a reactive programming model.

00:10:34.160 --> 00:10:40.860
It has promises, standard Python formatting, reusable components, the scope styling, integrated

00:10:40.860 --> 00:10:41.580
routing engine.

00:10:41.580 --> 00:10:43.300
That's the navigation stuff I was talking about.

00:10:43.300 --> 00:10:46.280
So it's pretty cool, actually.

00:10:47.220 --> 00:10:51.820
I don't know what the underlying technology is for making the Python run.

00:10:51.820 --> 00:10:55.460
If they've built their own thing, if they're using something like Brython or Sculpt or something

00:10:55.460 --> 00:10:55.760
else.

00:10:55.760 --> 00:10:57.840
But yeah, it's pretty amazing.

00:10:57.840 --> 00:10:59.420
It sounds like it'd be fun to play with.

00:10:59.420 --> 00:11:00.580
Yeah, it's definitely fun to play with.

00:11:00.580 --> 00:11:09.980
The one caveat is if you're going to embed Python compiled JavaScript in a JavaScript file and

00:11:09.980 --> 00:11:15.180
download it, that JavaScript file may be bigger than standard JavaScript file sizes.

00:11:15.180 --> 00:11:20.720
So I checked in, I think the minified version is 3.6 megs, which is...

00:11:20.720 --> 00:11:21.800
A little large.

00:11:22.240 --> 00:11:24.020
It depends on your use case.

00:11:24.020 --> 00:11:25.560
So imagine this.

00:11:25.560 --> 00:11:32.120
On one hand, if you're building a really high traffic website, people use it for mobile or low

00:11:32.120 --> 00:11:36.380
speed connections, it's totally unacceptable to put your front end in this.

00:11:36.380 --> 00:11:44.360
However, if what you're doing is you're building Electron.js apps, you're building Ionic and

00:11:44.360 --> 00:11:49.360
Cordova apps, these sort of offline, like here are my files, run them as if it was a web

00:11:49.360 --> 00:11:49.620
app.

00:11:49.620 --> 00:11:51.600
It doesn't matter if the thing is big, right?

00:11:51.600 --> 00:11:53.760
It just starts up off the local disk anyway.

00:11:53.760 --> 00:11:54.540
Yeah, that's true.

00:11:54.540 --> 00:11:55.860
That's a great use case.

00:11:55.860 --> 00:11:56.180
Right.

00:11:56.180 --> 00:11:59.560
Like VS Code, for example, is Electron.js.

00:11:59.560 --> 00:12:01.160
Ionic is a bunch of cool stuff.

00:12:01.160 --> 00:12:06.360
And in that circumstance, like you just, who cares if, you know, your uncompressed shipping

00:12:06.360 --> 00:12:07.660
size is another three megs.

00:12:07.660 --> 00:12:08.620
It's already a hundred megs.

00:12:08.620 --> 00:12:10.100
Like what's a hundred versus a hundred three?

00:12:10.100 --> 00:12:10.720
Nobody cares.

00:12:10.720 --> 00:12:11.320
Right.

00:12:11.320 --> 00:12:11.860
Something like that.

00:12:11.860 --> 00:12:18.440
So for those situations where it's kind of this offline rich client web experience, it's

00:12:18.440 --> 00:12:18.620
cool.

00:12:18.620 --> 00:12:19.240
I like it.

00:12:19.240 --> 00:12:19.860
Oh, that's cool.

00:12:19.860 --> 00:12:20.480
That's a good idea.

00:12:20.580 --> 00:12:20.720
Yeah.

00:12:20.720 --> 00:12:22.660
So there's some nice ways to play around with it.

00:12:22.660 --> 00:12:23.880
They got some little demo apps.

00:12:23.880 --> 00:12:28.240
So like down the bottom, there's like a little grid of buttons, like eight or 10 or something.

00:12:28.240 --> 00:12:30.240
You can click around there and play with it a bit.

00:12:30.240 --> 00:12:32.140
So yeah, it's pretty cool.

00:12:32.140 --> 00:12:36.940
If you want to give this a try and your use case makes a lot of sense, right?

00:12:36.940 --> 00:12:40.360
Like it's somehow getting that JavaScript there is not a big problem.

00:12:40.360 --> 00:12:42.120
Definitely check it out.

00:12:42.120 --> 00:12:42.400
It's cool.

00:12:42.400 --> 00:12:45.460
The other thing to point out is WebAssembly is coming.

00:12:45.460 --> 00:12:47.460
WebAssembly is going to be pretty sweet.

00:12:47.920 --> 00:12:54.240
If somebody can get a really nice version of Python in WebAssembly, that may make a big

00:12:54.240 --> 00:12:55.680
difference on a lot of fronts.

00:12:55.680 --> 00:12:56.700
Do you know WebAssembly?

00:12:56.700 --> 00:12:57.420
I do not.

00:12:57.420 --> 00:13:01.460
So WebAssembly basically is a new standard for the browsers.

00:13:02.140 --> 00:13:07.380
I think it's already partially supported where instead of shipping JavaScript, you ship binary

00:13:07.380 --> 00:13:10.820
executable equivalents, right?

00:13:10.820 --> 00:13:13.540
So you've got the problem of running.

00:13:14.240 --> 00:13:18.020
You download a text version of a big thing and then you parse it.

00:13:18.020 --> 00:13:21.520
You do all the sort of runtime stuff to get it executable.

00:13:21.520 --> 00:13:23.480
And then you execute it, right?

00:13:23.480 --> 00:13:25.580
You get into like bytecode or whatever JavaScript does.

00:13:25.580 --> 00:13:31.700
So I think WebAssembly is more or less like we're going to get it to that last pre-processed

00:13:31.700 --> 00:13:33.120
step of what JavaScript would do.

00:13:33.280 --> 00:13:37.600
And we'll give it to you as a binary thing, sort of like shipping PYC files in Python.

00:13:37.600 --> 00:13:39.560
I think it actually has more effect.

00:13:39.560 --> 00:13:42.940
So it should be a lot smaller because it's small and tokenized and stuff, but it should

00:13:42.940 --> 00:13:43.860
also start up quicker.

00:13:43.860 --> 00:13:44.560
So who knows?

00:13:44.560 --> 00:13:50.200
Maybe WebAssembly makes this better for somebody sneaking JavaScript or Python through the JavaScript

00:13:50.200 --> 00:13:51.220
straw.

00:13:51.680 --> 00:13:54.220
random binaries off of any website on the internet.

00:13:54.220 --> 00:13:55.020
What could go wrong?

00:13:55.020 --> 00:13:57.940
I think it's only the equivalent of running JavaScript.

00:13:57.940 --> 00:14:00.940
It's not like fully executing data.

00:14:00.940 --> 00:14:04.800
So I think it's no worse than JavaScript, but yeah.

00:14:04.800 --> 00:14:05.100
Okay.

00:14:05.100 --> 00:14:06.280
I don't know more than that.

00:14:06.280 --> 00:14:07.100
We'll have to keep track.

00:14:07.100 --> 00:14:11.920
I think we should round out this entire, the rest of this episode on just Python 3 stuff.

00:14:11.920 --> 00:14:12.300
What do you think?

00:14:12.300 --> 00:14:16.620
I don't think on this podcast we've pushed the migration to Python 3 enough.

00:14:16.620 --> 00:14:19.480
No, we have talked about how bad legacy Python is.

00:14:19.480 --> 00:14:21.180
Go ahead.

00:14:21.180 --> 00:14:21.440
Yeah.

00:14:21.580 --> 00:14:22.940
You go first on this Python thing.

00:14:22.940 --> 00:14:29.080
And this is actually just a little GitHub repo that is called Migrating to Python 3 with

00:14:29.080 --> 00:14:33.620
Pleasure, a short guide on features of Python 3 for data scientists.

00:14:33.620 --> 00:14:39.920
And it's a pretty quick read, but it's pretty thorough and actually gets pretty exciting.

00:14:39.920 --> 00:14:48.220
It starts off with a quick tutorial with examples of how to use Pathlib so that you can easily,

00:14:48.220 --> 00:14:51.360
if people haven't played with it yet, you can, you know,

00:14:51.400 --> 00:14:55.720
define paths as just like these little, just strings with division marks like you would

00:14:55.720 --> 00:14:56.860
in a browser.

00:14:56.860 --> 00:14:58.120
It's kind of crazy, right?

00:14:58.120 --> 00:14:58.540
Pathlib.

00:14:58.540 --> 00:15:04.640
It's like you put the slashes outside the strings and it, the division operator becomes like

00:15:04.640 --> 00:15:06.580
OS.path.join type of things.

00:15:06.720 --> 00:15:07.180
Yeah, definitely.

00:15:07.180 --> 00:15:07.180
Yeah.

00:15:07.180 --> 00:15:07.180
Yeah.

00:15:07.180 --> 00:15:07.260
Yeah.

00:15:07.260 --> 00:15:07.620
Definitely.

00:15:07.620 --> 00:15:10.320
And it's, but it works great and it makes your code really readable.

00:15:10.320 --> 00:15:11.800
So there's that.

00:15:11.800 --> 00:15:16.260
And then it goes on to talk about type hinting and how cool it works with thing editors like

00:15:16.260 --> 00:15:19.180
PyCharm and stuff to help you see what you're doing.

00:15:19.540 --> 00:15:24.720
Then one of the things that I did not, hadn't heard of before I came about a few things in

00:15:24.720 --> 00:15:29.720
here is the, how to enforce, types at runtime.

00:15:29.720 --> 00:15:33.880
I didn't know you could do that, but there's a, there's a package called enforce that you

00:15:33.880 --> 00:15:38.440
can, put a decorator on a particular function and it'll throw an error.

00:15:38.440 --> 00:15:41.000
If somebody tries to put it past in the wrong type.

00:15:41.000 --> 00:15:42.540
I had never heard about that either.

00:15:42.540 --> 00:15:43.860
That is really awesome.

00:15:43.860 --> 00:15:49.020
I don't know if I necessarily want it all the time, but it could be fun to turn on, especially

00:15:49.020 --> 00:15:53.100
if you're like doing a refactoring or you're like doing some major upgrades.

00:15:53.100 --> 00:15:57.680
You're like, all right, let's turn this on and just see if it's doing what we think it's

00:15:57.680 --> 00:15:57.940
doing.

00:15:57.940 --> 00:15:58.180
Right.

00:15:58.180 --> 00:15:58.560
Yeah.

00:15:58.560 --> 00:16:00.960
Especially during like a testing phase or something.

00:16:00.960 --> 00:16:01.520
It'd be fun.

00:16:01.520 --> 00:16:01.920
Yeah.

00:16:01.920 --> 00:16:03.520
And then this kind of hurt my head.

00:16:03.520 --> 00:16:06.660
There was a, some function annotations for units.

00:16:07.160 --> 00:16:10.040
There's a example is how AstroPy does it.

00:16:10.040 --> 00:16:16.840
And it's, things like you can attach to variables like units, like, like kilograms

00:16:16.840 --> 00:16:20.900
or something like that, which that just seems cool.

00:16:20.900 --> 00:16:22.080
I got to play with that a little bit more.

00:16:22.080 --> 00:16:25.100
Oh, it looks like, which one is it?

00:16:25.100 --> 00:16:25.940
There's a library.

00:16:25.940 --> 00:16:26.880
I think it's called pint.

00:16:26.880 --> 00:16:27.580
Oh, right.

00:16:27.580 --> 00:16:27.860
Yeah.

00:16:27.860 --> 00:16:28.620
Like, right.

00:16:28.620 --> 00:16:34.200
That lets you like multiply, say like, you know, this thing time a foot, that thing times an

00:16:34.200 --> 00:16:35.800
inch and then add them together.

00:16:35.800 --> 00:16:36.300
Yeah.

00:16:36.300 --> 00:16:36.540
Yeah.

00:16:36.540 --> 00:16:37.060
That's it.

00:16:37.060 --> 00:16:43.580
And this looks like a little bit of the same type of story, but you might multiply by like

00:16:43.580 --> 00:16:47.940
a kilogram or a degree and sort of the physicist, astrophysicist equivalent of that.

00:16:47.940 --> 00:16:48.340
That's cool.

00:16:48.340 --> 00:16:54.340
Like in their example, they show, dividing a meter in speeds in, I don't know what it is,

00:16:54.340 --> 00:16:57.660
but, coming up with like, terahertz.

00:16:57.660 --> 00:16:58.920
We didn't start with terahertz.

00:16:58.920 --> 00:16:59.980
You started with something else.

00:16:59.980 --> 00:17:00.280
Okay.

00:17:00.300 --> 00:17:02.480
Now I'm, I'm just making up words now, I think.

00:17:02.480 --> 00:17:04.980
So pretty cool.

00:17:04.980 --> 00:17:05.460
Pretty cool.

00:17:05.460 --> 00:17:07.460
You also have a matrix multiplication in there.

00:17:07.460 --> 00:17:07.860
Yeah.

00:17:07.860 --> 00:17:07.900
Yeah.

00:17:07.900 --> 00:17:11.820
Matrix, which I don't use a lot, but it's very cool for people that need matrix multiplication.

00:17:11.820 --> 00:17:13.440
Matrix multiplication is interesting.

00:17:13.440 --> 00:17:14.500
It's one of these things.

00:17:14.500 --> 00:17:21.560
It was, it's held up as one of the best examples of the whole PEP process and bringing a new feature

00:17:21.560 --> 00:17:22.360
into the language.

00:17:22.740 --> 00:17:28.360
So the, from the time the PEP was proposed until it was, done, it was like eight days.

00:17:28.360 --> 00:17:28.740
Wow.

00:17:28.740 --> 00:17:33.280
And it has to do with like how well the people who proposed the idea had like already done

00:17:33.280 --> 00:17:37.420
like sort of market research amongst all the scientific computation people.

00:17:37.420 --> 00:17:42.360
And, they had a really clear vision and a strong sort of displayed need.

00:17:42.360 --> 00:17:44.480
And so it's really interesting that that's in here as well.

00:17:44.480 --> 00:17:49.840
And globbing with star star, which is, something I hadn't used since,

00:17:49.840 --> 00:17:52.460
Oh, one of the Z shell does that.

00:17:52.540 --> 00:17:59.080
So like you can, do recursive subdirectories with, two asterisks and, that's kind

00:17:59.080 --> 00:17:59.320
of neat.

00:17:59.320 --> 00:18:03.240
And then went through a whole bunch of other stuff like f-strings and floating division

00:18:03.240 --> 00:18:05.720
now is real, real division now.

00:18:05.720 --> 00:18:11.260
And the rest of it is things that if you've been living Python three for a while, you just

00:18:11.260 --> 00:18:12.800
kind of take this stuff for granted.

00:18:12.800 --> 00:18:18.440
But, it's a very, a fairly complete list of, it'd be good if you're in a science community

00:18:18.440 --> 00:18:22.340
and you're trying to convince somebody to switch to Python three, this article would be a

00:18:22.340 --> 00:18:22.640
good one.

00:18:22.640 --> 00:18:23.800
Yeah, definitely a good one.

00:18:23.800 --> 00:18:25.500
It sounds really interesting.

00:18:25.500 --> 00:18:30.360
Like it really brings up, these are the benefits that you get from making this move rather than

00:18:30.360 --> 00:18:36.440
just the stick of it's going to be expired or, you know, go out of maintenance in 2020.

00:18:36.440 --> 00:18:39.320
It's like, you know, here's all the good stuff that you're missing that you don't even know

00:18:39.320 --> 00:18:39.700
you're missing.

00:18:39.900 --> 00:18:40.080
Yeah.

00:18:40.080 --> 00:18:45.660
And it includes, I didn't even list it, but it includes like a dictionary ordering and

00:18:45.660 --> 00:18:47.940
stuff, which, I love that.

00:18:47.940 --> 00:18:48.320
Right.

00:18:48.320 --> 00:18:48.580
Yeah.

00:18:48.580 --> 00:18:49.760
That is really, really nice.

00:18:49.760 --> 00:18:52.420
I think enforce might be the big news out of that.

00:18:52.420 --> 00:18:53.560
That's I hadn't even heard of that.

00:18:53.560 --> 00:18:54.380
That's pretty cool.

00:18:54.380 --> 00:18:54.760
Yeah.

00:18:54.760 --> 00:18:56.480
I'm definitely going to go play with that tomorrow.

00:18:56.480 --> 00:18:57.520
So that's neat.

00:18:57.520 --> 00:18:57.740
Cool.

00:18:57.740 --> 00:18:59.320
So let's talk about moving to Python three.

00:18:59.320 --> 00:18:59.680
Okay.

00:19:00.240 --> 00:19:02.820
So I want to give you the new topic.

00:19:02.820 --> 00:19:03.580
Exactly.

00:19:03.580 --> 00:19:08.140
I want to give you something like this, but from a web development perspective, it's pretty

00:19:08.140 --> 00:19:08.500
interesting.

00:19:08.500 --> 00:19:12.260
There's this place called ticket EA.com ticket.

00:19:12.260 --> 00:19:12.540
Yeah.

00:19:12.540 --> 00:19:13.160
I don't know.

00:19:13.160 --> 00:19:14.100
Ticket EA.com.

00:19:14.100 --> 00:19:15.020
That's what I'm going to go with.

00:19:15.020 --> 00:19:20.220
And they said how we migrated ticket EA.com to Python three in two weeks.

00:19:20.220 --> 00:19:20.620
Wow.

00:19:20.620 --> 00:19:24.140
So it's apparently a pretty big project that they have running.

00:19:24.140 --> 00:19:27.900
It runs their whole sort of fulfillment e-commerce type thing and so on.

00:19:27.900 --> 00:19:29.940
And you'll hear the word Aphrodite.

00:19:29.940 --> 00:19:33.880
That's kind of their, their code name word for their project.

00:19:33.880 --> 00:19:38.140
So they do a bunch of stuff with Docker and their first step was to just say, okay, we're

00:19:38.140 --> 00:19:45.840
going to change the Aphrodite's base Docker image to Python colon 3.6 slim from, I don't

00:19:45.840 --> 00:19:46.200
know, what's it?

00:19:46.200 --> 00:19:47.160
Two seven fat.

00:19:47.160 --> 00:19:47.800
I don't know.

00:19:47.800 --> 00:19:48.900
Something like this.

00:19:48.900 --> 00:19:52.320
And they said when they did that, you know, they just tried to run their tests and a bunch

00:19:52.320 --> 00:19:53.320
of stuff went crazy.

00:19:53.320 --> 00:19:55.680
Like outdated libraries didn't work.

00:19:55.680 --> 00:19:57.760
Base string had to be moved to string.

00:19:57.760 --> 00:19:59.900
URL parse had to move to URL.

00:19:59.900 --> 00:20:02.900
Lib dot URL pars, other stuff like that.

00:20:02.900 --> 00:20:03.120
Right.

00:20:03.120 --> 00:20:04.520
So said, all right.

00:20:04.520 --> 00:20:06.600
Well, the first thing we're going to do is going to run two to three.

00:20:06.600 --> 00:20:07.000
Right.

00:20:07.000 --> 00:20:10.580
So this is the utility that can manually fix some of those things.

00:20:10.580 --> 00:20:12.600
So like every time you see base string, that's STR.

00:20:12.600 --> 00:20:14.960
Now we're just going to do that for example.

00:20:14.960 --> 00:20:15.280
Right.

00:20:15.420 --> 00:20:16.700
So they ran that against it.

00:20:16.700 --> 00:20:22.100
And they also look for patterns like, hey, we're using map reduce or map type functions

00:20:22.100 --> 00:20:25.840
and so on, or filtering functions plus lambdas to make it work.

00:20:25.840 --> 00:20:27.600
And these could really just be list comprehensions.

00:20:27.600 --> 00:20:27.860
Right.

00:20:27.860 --> 00:20:32.620
So they kind of upgraded the, they took better advantage of like the new language features

00:20:32.620 --> 00:20:33.800
that were then available to them.

00:20:34.040 --> 00:20:35.540
So that's pretty cool.

00:20:35.540 --> 00:20:38.240
And then they said, okay, well, that's the low hanging fruit.

00:20:38.240 --> 00:20:39.280
Now what?

00:20:39.280 --> 00:20:44.360
And they had to run their tests, you know, sort of find some more problems.

00:20:44.360 --> 00:20:49.740
They took the opportunity to upgrade, at least get ready to upgrade to Django too, because

00:20:49.740 --> 00:20:50.720
they are running on Django.

00:20:50.980 --> 00:20:51.660
So that's cool.

00:20:51.660 --> 00:20:58.620
They said a couple of lessons we learned code coverage was 75% or 70%, you know, the more

00:20:58.620 --> 00:20:59.660
tests, the better.

00:20:59.660 --> 00:21:04.040
It's good to keep the Python three branch up to date with the master branch until you switch.

00:21:04.040 --> 00:21:05.380
That's one way of doing it.

00:21:05.380 --> 00:21:08.800
Like remember the Instagram keynote at PyCon 2017.

00:21:08.800 --> 00:21:09.380
Yeah.

00:21:09.380 --> 00:21:12.480
That is a whole nother level of upgrading to Python three, right?

00:21:12.480 --> 00:21:20.680
They upgraded all of Instagram to Python three without branching, which is,

00:21:20.800 --> 00:21:21.940
yeah, at all.

00:21:21.940 --> 00:21:22.800
That's, that's crazy.

00:21:22.800 --> 00:21:24.020
And they were checking in all the time.

00:21:24.020 --> 00:21:26.460
So that's another level you can check out that as well.

00:21:26.460 --> 00:21:29.820
But this is, I suspect this is more common that you kind of branch.

00:21:29.820 --> 00:21:31.620
You're like, are we going to try to keep these going?

00:21:31.620 --> 00:21:34.240
It's a good story to see somebody doing it the other way.

00:21:34.240 --> 00:21:34.840
Yeah, for sure.

00:21:34.840 --> 00:21:38.840
And so they, they ran flake eight against all the stuff to make sure they're, everything

00:21:38.840 --> 00:21:39.540
was working right.

00:21:39.540 --> 00:21:40.400
So I don't know.

00:21:40.400 --> 00:21:45.400
They said they about, they had to modify around 200 files to make flake eight happy again with

00:21:45.400 --> 00:21:47.480
Python three, but yeah, all good.

00:21:47.480 --> 00:21:50.620
And then the final thing I thought was really cool is they're running on Google app engine.

00:21:50.620 --> 00:21:54.480
I don't do, I don't do anything with Google app engine, but one of the features that these

00:21:54.480 --> 00:21:57.200
platforms as a service have, that's really pretty cool.

00:21:57.200 --> 00:21:58.660
It's something called traffic splitting.

00:21:58.660 --> 00:22:04.220
So there's basically like a little slider and you say, this version of the app is going to

00:22:04.220 --> 00:22:05.760
get 60% of the traffic.

00:22:05.760 --> 00:22:07.980
This version of the app is going to get 40% of the traffic.

00:22:08.140 --> 00:22:09.840
And you can add in different versions.

00:22:09.840 --> 00:22:15.520
So you can say, well, let's just send like 1% of our traffic over towards these new versions

00:22:15.520 --> 00:22:16.860
and see what happens.

00:22:16.860 --> 00:22:19.040
So you don't completely take the site down.

00:22:19.040 --> 00:22:21.560
You just may break it for a very small group.

00:22:22.200 --> 00:22:24.180
And you could even do that.

00:22:24.180 --> 00:22:26.200
I think by like IP address and stuff.

00:22:26.200 --> 00:22:29.020
So you say only the people that work here get the new version.

00:22:29.020 --> 00:22:33.140
People on the outside, they get the old version and slowly migrated along.

00:22:33.140 --> 00:22:37.240
And so they call these canary releases, which I think is actually a pretty cool way to think

00:22:37.240 --> 00:22:37.420
of it.

00:22:37.420 --> 00:22:39.860
So there's, there's some neat lessons in here.

00:22:39.860 --> 00:22:43.080
This is, but I didn't know Google app engine did that.

00:22:43.080 --> 00:22:43.580
That's neat.

00:22:43.760 --> 00:22:47.080
Yeah, I didn't either, but I definitely like it a little bit better now.

00:22:47.080 --> 00:22:47.640
That's cool.

00:22:47.640 --> 00:22:51.160
I mean, I don't dislike it, but that's definitely a feature that would draw me into it.

00:22:51.160 --> 00:22:51.580
All right.

00:22:51.580 --> 00:22:53.280
So I think, I think these are really interesting.

00:22:53.280 --> 00:22:54.420
Yours was on data science.

00:22:54.420 --> 00:23:00.020
Mine is a sort of web story and they both are compelling sort of for moving to Python 3.

00:23:00.020 --> 00:23:02.140
Things that you get and the steps to get there.

00:23:02.140 --> 00:23:02.520
Definitely.

00:23:02.520 --> 00:23:05.900
And we'll keep pounding on it until Python 2.7 is gone.

00:23:05.900 --> 00:23:06.740
That's right.

00:23:06.740 --> 00:23:09.360
We will see legacy Python fade away.

00:23:09.360 --> 00:23:11.720
So you have a webcast coming up, don't you?

00:23:11.720 --> 00:23:13.100
Yeah, we brought it up last week,

00:23:13.200 --> 00:23:19.800
but I just wanted to remind people that I'm doing a webcast on pytest and PyCharm with

00:23:19.800 --> 00:23:23.640
the PyCharm guys that's coming up on February 22nd.

00:23:23.640 --> 00:23:26.760
So we'll leave a link in the show notes and go register.

00:23:26.760 --> 00:23:28.220
Hope to see everybody there.

00:23:28.220 --> 00:23:29.940
Yeah, they should definitely go register for it.

00:23:29.940 --> 00:23:30.860
There's a couple reasons.

00:23:30.860 --> 00:23:32.160
One, Brian's going to be there.

00:23:32.160 --> 00:23:32.680
It'll be awesome.

00:23:32.680 --> 00:23:34.460
Two, it's free.

00:23:34.460 --> 00:23:36.860
So you'll get what you pay for, for sure.

00:23:36.860 --> 00:23:37.980
I promise you that.

00:23:37.980 --> 00:23:40.620
Unless you count your time, then I don't know.

00:23:40.620 --> 00:23:43.120
And then you also potentially, if you can't make it,

00:23:43.140 --> 00:23:44.560
you'll get the recording notification.

00:23:44.560 --> 00:23:48.020
If you register and you don't show up, then you'll get a message say,

00:23:48.020 --> 00:23:49.480
you didn't show up, but hey, you still get it.

00:23:49.480 --> 00:23:50.440
People should check out.

00:23:50.440 --> 00:23:52.900
There's a whole bunch of old webinars there.

00:23:52.900 --> 00:23:56.500
And it's not just about trying to push PyCharm stuff.

00:23:56.500 --> 00:24:00.940
It's just people in the community showing some interesting things to do.

00:24:00.940 --> 00:24:03.220
So it's a good thing that they're doing.

00:24:03.220 --> 00:24:05.280
I had this project that I wanted to play with.

00:24:05.420 --> 00:24:10.960
Not so much to build in the app, but to play with the foundational bits of the app.

00:24:10.960 --> 00:24:17.720
So I have a program that sort of demonstrates using cookie cutter from an API mode.

00:24:17.720 --> 00:24:23.460
So cookie cutter, normally you type cookie cutter space, some template name, and then stuff happens.

00:24:23.460 --> 00:24:28.960
And then you have a project, like a starter project, a scaffold type thing for all sorts of various things.

00:24:29.480 --> 00:24:32.020
So there's also an API for cookie cutter.

00:24:32.220 --> 00:24:39.580
And so you can put like fancy front ends, or if you've got any kind of application that needs to generate like a sub project,

00:24:39.580 --> 00:24:41.480
that's going to be messed with by somebody else.

00:24:41.480 --> 00:24:44.400
If you're doing like developer tools or you're building something for your company,

00:24:44.400 --> 00:24:46.200
you're like, we're always going to start this way.

00:24:46.200 --> 00:24:48.920
So here's the CLI and it asks you the questions.

00:24:48.920 --> 00:24:53.540
And then boom, you've got this kind of standard starter app that's integrated into your infrastructure.

00:24:53.540 --> 00:24:56.000
So these are all good uses.

00:24:56.000 --> 00:24:58.740
So I said, all right, well, I want to play with this project called GUI.

00:24:58.740 --> 00:25:01.680
And we talked about GUI a while ago, G-O-O-E-Y.

00:25:01.680 --> 00:25:08.240
And so I took my little cookie cutter app that would work with all the pyramid-based cookie cutter templates

00:25:08.240 --> 00:25:12.060
and put a friendly front end on the front of that.

00:25:12.060 --> 00:25:15.840
And then I put a GUI on top of that CLI app.

00:25:15.840 --> 00:25:16.380
Nice.

00:25:16.380 --> 00:25:16.820
Yeah.

00:25:16.820 --> 00:25:17.500
So it's really fun.

00:25:17.500 --> 00:25:23.300
And it really took like 20 minutes to get it 99% working more on that a sec.

00:25:23.300 --> 00:25:27.460
So I put a link to the GitHub repository that has that up there.

00:25:27.460 --> 00:25:28.540
So people can download it.

00:25:28.540 --> 00:25:34.540
You just clone it, create a virtual environment, pip install dash R, the requirements file,

00:25:34.540 --> 00:25:35.800
and then you can just run the program.

00:25:35.800 --> 00:25:37.360
And you have a really sweet GUI.

00:25:37.360 --> 00:25:40.560
And it's based on WX Python Phoenix and GUI.

00:25:40.560 --> 00:25:41.620
It's quite cool.

00:25:41.620 --> 00:25:48.200
The one little hangup is I'm having a problem getting it to run if I package it.

00:25:48.200 --> 00:25:50.820
So I could literally hand out a .app or .exe.

00:25:51.060 --> 00:25:54.060
There's some kind of hangup, and I think it's a bug with GUI.

00:25:54.060 --> 00:25:57.900
I can't tell entirely, but maybe by the time you hear this, I have it figured out.

00:25:57.900 --> 00:25:58.580
But we'll see.

00:25:58.580 --> 00:25:59.000
All right.

00:25:59.000 --> 00:26:00.160
Either way, it's a great example.

00:26:00.160 --> 00:26:06.360
You know, if you can forget the packaging, it's actually an awesome example of a really simple Python GUI app that looks professional.

00:26:06.360 --> 00:26:08.560
If you can forget packaging, Python is awesome.

00:26:08.560 --> 00:26:10.060
That's a good thing.

00:26:10.060 --> 00:26:11.320
The packaging works fine.

00:26:11.320 --> 00:26:12.460
GUI works fine.

00:26:12.660 --> 00:26:15.280
A packaged GUI app sometimes works fine.

00:26:15.280 --> 00:26:15.900
Yeah, okay.

00:26:15.900 --> 00:26:19.920
It's the intersection of all these things that are cool.

00:26:19.920 --> 00:26:24.340
There's a small bruise on the shininess of it.

00:26:24.340 --> 00:26:25.260
But it's all good.

00:26:25.260 --> 00:26:25.780
It's all good.

00:26:25.780 --> 00:26:26.540
So check that out.

00:26:26.540 --> 00:26:31.340
There's tons of people working on all these features to make it even more seamless in the future.

00:26:31.340 --> 00:26:32.420
Yeah, absolutely.

00:26:32.420 --> 00:26:32.840
Absolutely.

00:26:32.840 --> 00:26:33.400
Well, good job.

00:26:33.400 --> 00:26:33.840
Cool.

00:26:33.840 --> 00:26:34.420
Thanks so much.

00:26:34.420 --> 00:26:38.560
Brian, thanks for sharing everything with all of our listeners and with me.

00:26:38.560 --> 00:26:38.960
Thank you.

00:26:38.960 --> 00:26:40.080
And we'll talk to you next week.

00:26:40.080 --> 00:26:40.400
You bet.

00:26:40.400 --> 00:26:40.600
Bye.

00:26:42.220 --> 00:26:43.980
Thank you for listening to Python Bytes.

00:26:43.980 --> 00:26:46.540
Follow the show on Twitter via at Python Bytes.

00:26:46.540 --> 00:26:49.440
That's Python Bytes as in B-Y-T-E-S.

00:26:49.440 --> 00:26:52.840
And get the full show notes at pythonbytes.fm.

00:26:52.840 --> 00:26:57.200
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:26:57.200 --> 00:26:59.900
We're always on the lookout for sharing something cool.

00:26:59.900 --> 00:27:03.300
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:27:03.300 --> 00:27:06.900
Thank you for listening and sharing this podcast with your friends and colleagues.

