
00:00:00.000 --> 00:00:04.880
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:04.880 --> 00:00:09.000
This is episode 65, recorded February 7th, 2018.


00:00:09.000 --> 00:00:09.840
I'm Michael Kennedy.


00:00:09.840 --> 00:00:10.720
And I'm Brian Atkin.


00:00:10.720 --> 00:00:13.280
And we got a bunch of cool stuff.


00:00:13.280 --> 00:00:16.080
I really am excited to share a couple of these things with you.


00:00:16.080 --> 00:00:19.120
And I'm excited to have Rollbar as a sponsor.


00:00:19.120 --> 00:00:21.920
So you probably heard about Rollbar from other episodes.


00:00:21.920 --> 00:00:25.840
If you want to check them out, we got a special offer at pythonbytes.fm/rollbar.


00:00:25.840 --> 00:00:27.280
Tell you more about that later.


00:00:27.280 --> 00:00:29.520
I kind of want to know about some charts.


00:00:29.520 --> 00:00:35.800
I have got like this just, have you ever used, seen the test output on like Jenkins?


00:00:35.800 --> 00:00:36.800
If you have testing?


00:00:36.800 --> 00:00:37.800
No, I haven't played with Jenkins.


00:00:37.800 --> 00:00:42.600
Okay, well, so in Jenkins builds, there's this thing where you can, after you run your


00:00:42.600 --> 00:00:47.440
tests, you can have it display your past and failed tests in this little graph.


00:00:47.440 --> 00:00:48.440
It's just a little chart.


00:00:48.440 --> 00:00:49.800
It's an area chart.


00:00:49.800 --> 00:00:54.920
I wanted one of those, but I wanted something that would show like five of those charts,


00:00:54.920 --> 00:00:56.160
a whole bunch of them.


00:00:56.160 --> 00:00:57.840
So it doesn't do it automatically.


00:00:57.840 --> 00:01:01.520
I probably could have hunted into Jenkins or something,


00:01:01.520 --> 00:01:02.760
but I wanted to build my own thing.


00:01:02.760 --> 00:01:04.800
So I want to do it in Flask.


00:01:04.800 --> 00:01:06.760
And I've been trying to figure this out.


00:01:06.760 --> 00:01:09.920
And there was a great tutorial by--


00:01:09.920 --> 00:01:11.680
this is going to be a little story anyway.


00:01:11.680 --> 00:01:14.680
But there was this great tutorial by Matt McKay


00:01:14.680 --> 00:01:18.440
from Fullstack that showed how to do this, almost how


00:01:18.440 --> 00:01:20.200
to do this in Bokeh.


00:01:20.200 --> 00:01:21.400
Yeah, very nice.


00:01:21.400 --> 00:01:22.720
That's a cool project, too.


00:01:22.720 --> 00:01:25.400
Yeah, but Bokeh, the current version of Bokeh,


00:01:25.400 --> 00:01:27.360
dropped the charting feature.


00:01:27.360 --> 00:01:29.220
That's not helpful.


00:01:29.220 --> 00:01:30.760
But there goes your solution you just found.


00:01:30.760 --> 00:01:32.640
- Yeah, so I'm trying to do it in,


00:01:32.640 --> 00:01:34.820
and I gave up and asked Twitter.


00:01:34.820 --> 00:01:38.440
And what came back was one of these options was PyGAL,


00:01:38.440 --> 00:01:42.600
P-Y-G-A-L, which ends up very, it's very simple,


00:01:42.600 --> 00:01:44.600
but I can, within 20 minutes,


00:01:44.600 --> 00:01:47.260
I had a Flask app running with these charts up.


00:01:47.260 --> 00:01:50.740
So it's not as hugely featured


00:01:50.740 --> 00:01:52.720
as some of the other graphing applications,


00:01:52.720 --> 00:01:54.380
but it's very cool.


00:01:54.380 --> 00:01:56.840
And it also can export SVG.


00:01:56.840 --> 00:01:58.760
So these are small.


00:01:58.760 --> 00:02:00.960
It's pretty small also when you're displaying these.


00:02:00.960 --> 00:02:01.800
- That's cool.


00:02:01.800 --> 00:02:04.760
And the SVGs can have basically infinite,


00:02:04.760 --> 00:02:08.280
very high levels of sort of zoom ability, right?


00:02:08.280 --> 00:02:10.960
Because they're scalable, right?


00:02:10.960 --> 00:02:12.440
That's their first name.


00:02:12.440 --> 00:02:13.560
That's the S.


00:02:13.560 --> 00:02:15.200
They also do PNGs, like you said, that's cool.


00:02:15.200 --> 00:02:16.920
And they have a bunch of great looking charts.


00:02:16.920 --> 00:02:18.480
Like these are really nice.


00:02:18.480 --> 00:02:22.000
So you can do like bar charts or PI or the radar ones,


00:02:22.000 --> 00:02:22.880
all sorts of good stuff.


00:02:22.880 --> 00:02:24.800
- So I still want to get something like Bokeh


00:02:24.800 --> 00:02:28.800
or something like that to work so that I can make them interactive because these aren't


00:02:28.800 --> 00:02:34.720
interactive things. You build them and just display them. But for my needs right now,


00:02:34.720 --> 00:02:39.840
that works. And it's very nice. Yeah, very nice. And kudos to the people writing the documentation


00:02:39.840 --> 00:02:44.960
because they have documentation on how to pretty much they have it in Django, Flask,


00:02:44.960 --> 00:02:48.800
and pretty much any HTML that you want to throw this in, how to do that.


00:02:48.800 --> 00:02:53.680
Oh, yeah, that's super cool. And they have nice pictures, which is always really powerful when


00:02:53.680 --> 00:02:57.460
when you're talking about graphs or UI or things like this.


00:02:57.460 --> 00:02:58.560
You can just sit by the picture and go,


00:02:58.560 --> 00:03:00.760
"Okay, I want this, now I'll pay attention."


00:03:00.760 --> 00:03:01.600
Really nice.


00:03:01.600 --> 00:03:03.940
So a lot of people send us messages


00:03:03.940 --> 00:03:06.940
and they ask for advice on like a sort of career path


00:03:06.940 --> 00:03:08.480
or I'm thinking about this technology


00:03:08.480 --> 00:03:10.500
or how do I get started in programming


00:03:10.500 --> 00:03:12.520
or something like that.


00:03:12.520 --> 00:03:15.600
And there was this really interesting post


00:03:15.600 --> 00:03:18.680
over on Reddit under Learn Programming.


00:03:18.680 --> 00:03:20.620
And so it's not technically a Python thing,


00:03:20.620 --> 00:03:22.720
but a bunch of Python people are hanging out there.


00:03:22.720 --> 00:03:24.320
So that's kind of cool.


00:03:24.320 --> 00:03:26.520
And the idea was this guy,


00:03:26.520 --> 00:03:28.720
he gets a guy who wrote me.


00:03:28.720 --> 00:03:31.680
Anyway, person posted it, sent a message and said,


00:03:31.680 --> 00:03:35.520
"Hey, look, I'm 31 days into a self-study program on Python.


00:03:35.520 --> 00:03:37.120
"I'm loving every minute of it.


00:03:37.120 --> 00:03:38.420
"Couple of questions.


00:03:38.420 --> 00:03:39.880
"Could you all fill this out


00:03:39.880 --> 00:03:41.440
"just so we can share our experiences?"


00:03:41.440 --> 00:03:42.280
- Oh, interesting.


00:03:42.280 --> 00:03:43.100
- Isn't that cool?


00:03:43.100 --> 00:03:44.380
So what were you doing before you began


00:03:44.380 --> 00:03:46.380
self-study and programming?


00:03:46.380 --> 00:03:48.200
So it's for people who are doing self-studying.


00:03:48.200 --> 00:03:51.460
What made you want to study programming on your own?


00:03:51.460 --> 00:03:52.880
How did you get started?


00:03:52.880 --> 00:03:54.880
How long did it take for you to feel confident enough


00:03:54.880 --> 00:03:56.260
in your skills and knowledge


00:03:56.260 --> 00:03:58.680
to think that you could be employed?


00:03:58.680 --> 00:04:01.640
What else did you do besides self-study that helped you?


00:04:01.640 --> 00:04:03.840
And what's next?


00:04:03.840 --> 00:04:06.240
And this thread just blew up on Reddit.


00:04:06.240 --> 00:04:09.640
And there's all these really interesting conversations.


00:04:09.640 --> 00:04:11.320
And so anyone out there who is sort of


00:04:11.320 --> 00:04:13.400
in the early stages of self-study,


00:04:13.400 --> 00:04:16.240
maybe they're doing 100 days of code type thing,


00:04:16.240 --> 00:04:17.760
or they're in a bootcamp,


00:04:17.760 --> 00:04:19.800
or they're taking online courses.


00:04:19.800 --> 00:04:22.480
I know a few places have good ones of those.


00:04:22.480 --> 00:04:24.480
I think going through here and reading this,


00:04:24.480 --> 00:04:27.640
it would be really, really valuable


00:04:27.640 --> 00:04:29.640
to sort of have that shared experience.


00:04:29.640 --> 00:04:30.480
Isn't that cool?


00:04:30.480 --> 00:04:31.300
- Oh, that's great.


00:04:31.300 --> 00:04:33.720
- Yes, so there's another story that's linked from there.


00:04:33.720 --> 00:04:36.160
So this one doesn't technically count as an item,


00:04:36.160 --> 00:04:38.120
but people might also find it interesting


00:04:38.120 --> 00:04:40.920
as a thread to keep following is someone said,


00:04:40.920 --> 00:04:43.600
oh, there are people who are like 30, 40,


00:04:43.600 --> 00:04:45.960
like, hey, I'm learning to code in my 40s,


00:04:45.960 --> 00:04:47.560
and you guys are really inspiring me


00:04:47.560 --> 00:04:49.560
to realize this is actually possible.


00:04:49.560 --> 00:04:51.160
and it's not too late for me, you know.


00:04:51.160 --> 00:04:54.400
So there's this article called "Stories from 300 Developers


00:04:54.400 --> 00:04:58.200
who got their first tech job in their 30s, 40s, and 50s"


00:04:58.200 --> 00:04:59.060
linked from there.


00:04:59.060 --> 00:05:00.000
- That's cool.


00:05:00.000 --> 00:05:00.900
I gotta go read that.


00:05:00.900 --> 00:05:02.500
- Yeah, and I think that might be real helpful


00:05:02.500 --> 00:05:03.460
to some folks as well.


00:05:03.460 --> 00:05:05.260
So if you're in this space


00:05:05.260 --> 00:05:07.540
and you want some shared experiences


00:05:07.540 --> 00:05:08.560
and to connect with some people,


00:05:08.560 --> 00:05:09.940
check out this thread we're linking to


00:05:09.940 --> 00:05:10.860
'cause I think it's helpful.


00:05:10.860 --> 00:05:12.260
- On that topic of learning,


00:05:12.260 --> 00:05:15.560
actually there's a couple episodes of "Test and Code"


00:05:15.560 --> 00:05:16.800
that'll be good.


00:05:16.800 --> 00:05:20.960
I just did one recently about extended learning


00:05:20.960 --> 00:05:23.960
through universities, which I hadn't considered before.


00:05:23.960 --> 00:05:26.520
And then also there's an upcoming,


00:05:26.520 --> 00:05:30.440
I'm talking with Stephanie Hurlburt on talking with mentors


00:05:30.440 --> 00:05:33.000
and opening yourself up to be a mentor as well.


00:05:33.000 --> 00:05:34.200
- Yeah, yeah, very cool.


00:05:34.200 --> 00:05:35.480
I'm looking forward to checking those out.


00:05:35.480 --> 00:05:38.080
- This is one of those well-planned, awesome transitions.


00:05:38.080 --> 00:05:39.040
- Amazing.


00:05:39.040 --> 00:05:41.200
So one of the things that you probably don't care about


00:05:41.200 --> 00:05:44.080
when you're getting started is how fast your imports run.


00:05:44.080 --> 00:05:45.620
You probably don't even know what an import is


00:05:45.620 --> 00:05:46.460
at the beginning.


00:05:46.460 --> 00:05:49.420
- Exactly, but import, how long it takes to import


00:05:49.420 --> 00:05:53.260
your different modules is part of the painful startup


00:05:53.260 --> 00:05:56.100
process of any Python application.


00:05:56.100 --> 00:05:58.320
And I didn't really know how to debug that, actually.


00:05:58.320 --> 00:05:59.740
I never really thought of it before,


00:05:59.740 --> 00:06:04.220
but in Python 3.7 coming up, there will be a,


00:06:04.220 --> 00:06:08.940
there is a -x import time that allows you to,


00:06:08.940 --> 00:06:11.900
there's a flag that you can run that allows you to


00:06:11.900 --> 00:06:15.220
investigate and profile all of the time


00:06:15.220 --> 00:06:17.360
for importing different libraries,


00:06:17.360 --> 00:06:19.920
which sounds really cool, actually.


00:06:19.920 --> 00:06:22.640
- Yeah, that is really, really quite cool.


00:06:22.640 --> 00:06:25.320
And so you can just basically run it


00:06:25.320 --> 00:06:28.680
and it'll tell you this library took that long to import,


00:06:28.680 --> 00:06:31.120
this other library took that long to import, and so on.


00:06:31.120 --> 00:06:33.120
And I didn't realize how long


00:06:33.120 --> 00:06:34.720
some of these actually took to load.


00:06:34.720 --> 00:06:36.440
- And like any optimization,


00:06:36.440 --> 00:06:39.040
it's probably never where you really think it's gonna be.


00:06:39.040 --> 00:06:40.200
It's probably someplace else.


00:06:40.200 --> 00:06:42.840
So having it profiled is great.


00:06:42.840 --> 00:06:45.280
And sometimes you just have to import things,


00:06:45.280 --> 00:06:49.800
but some parts of your system may have too many imports


00:06:49.800 --> 00:06:53.120
initially and they could be possibly delayed till later.


00:06:53.120 --> 00:06:56.080
- Yeah, you could definitely possibly do it conditionally.


00:06:56.080 --> 00:06:59.680
If you only know in certain circumstances


00:06:59.680 --> 00:07:02.000
that code's gonna run, so you could maybe


00:07:02.000 --> 00:07:04.880
somehow delay the import until you actually need it.


00:07:04.880 --> 00:07:06.680
So a lot of cool things, right?


00:07:06.680 --> 00:07:08.760
- Like let's say you've got an editor application


00:07:08.760 --> 00:07:12.360
or something, all of the stuff that you'd need to,


00:07:12.360 --> 00:07:15.800
I don't know, like convert your format for saving.


00:07:15.800 --> 00:07:17.360
You don't really need that all the time.


00:07:17.360 --> 00:07:20.000
You could load it when somebody's trying to save.


00:07:20.000 --> 00:07:22.120
- Right, wait for it to hit the command S,


00:07:22.120 --> 00:07:23.600
control S, something like that, that's right.


00:07:23.600 --> 00:07:25.120
- Yeah. - Yeah, so very, very cool.


00:07:25.120 --> 00:07:26.920
So this is a feature of Python 3.7, huh?


00:07:26.920 --> 00:07:29.400
This is like in the new fancy version?


00:07:29.400 --> 00:07:30.760
- Yeah, it's in the new fancy version,


00:07:30.760 --> 00:07:33.000
but I mean, everybody's probably,


00:07:33.000 --> 00:07:36.400
if you've got an application working in 3.6 right now,


00:07:36.400 --> 00:07:38.660
you're probably thinking about making sure


00:07:38.660 --> 00:07:40.800
that it's gonna work in 3.7 by now,


00:07:40.800 --> 00:07:43.380
and you can probably use the 3.7


00:07:43.380 --> 00:07:45.000
to optimize current code anyway.


00:07:45.000 --> 00:07:46.420
- Right, because you want data classes


00:07:46.420 --> 00:07:48.680
and why not be able to time your imports while you're at it?


00:07:48.680 --> 00:07:50.140
- Yeah.


00:07:50.140 --> 00:07:53.020
- Nice, yeah, so this just came out in beta last week


00:07:53.020 --> 00:07:55.000
and we already talked about that.


00:07:55.000 --> 00:07:56.980
So here's one more thing you can do


00:07:56.980 --> 00:07:59.520
if you've got some library that's taken a while


00:07:59.520 --> 00:08:02.100
to basically import.


00:08:02.100 --> 00:08:03.900
I think that article that you mentioned,


00:08:03.900 --> 00:08:06.100
that you know, John, the conclusion it says,


00:08:07.480 --> 00:08:10.780
So I can reduce my time for pip and --version


00:08:10.780 --> 00:08:13.080
from 800 milliseconds to 500 milliseconds.


00:08:13.080 --> 00:08:14.300
That still sounds like a long time,


00:08:14.300 --> 00:08:19.020
but that's actually, you know, that's 60%, 30%,


00:08:19.020 --> 00:08:21.360
depending on which angle you measure it.


00:08:21.360 --> 00:08:23.120
And not quite, but it's a big improvement.


00:08:23.120 --> 00:08:25.860
- And it's down into the pieces


00:08:25.860 --> 00:08:28.080
where it makes it less noticeable from people.


00:08:28.080 --> 00:08:29.760
- Yeah, quite cool.


00:08:29.760 --> 00:08:32.480
All right, so before we move on to the next one,


00:08:32.480 --> 00:08:33.720
let me tell you about Rollbar.


00:08:33.720 --> 00:08:35.560
So Rollbar is the thing you integrate


00:08:35.560 --> 00:08:38.980
into your web applications, whether using Django,


00:08:38.980 --> 00:08:42.220
Flask, Pyramid, super easy to integrate.


00:08:42.220 --> 00:08:44.140
Basically to integrate it into Pyramid,


00:08:44.140 --> 00:08:46.560
you just put a few things in your config file,


00:08:46.560 --> 00:08:47.940
and that's it.


00:08:47.940 --> 00:08:49.420
I don't even think you have to touch your code


00:08:49.420 --> 00:08:52.300
unless you want to directly interact with the Rollbar API,


00:08:52.300 --> 00:08:54.940
which you often don't have to do.


00:08:54.940 --> 00:08:57.260
And you can even get it for JavaScript


00:08:57.260 --> 00:08:59.060
and some other frameworks as well.


00:08:59.060 --> 00:09:01.540
And it'll basically be there when your app is running.


00:09:01.540 --> 00:09:03.940
Anytime there's an error, it'll capture all the details,


00:09:03.940 --> 00:09:08.980
stack trace, the URL, all the request and response values,


00:09:08.980 --> 00:09:12.780
even the user who is logged in, potentially, it'll send that off


00:09:12.780 --> 00:09:17.060
and give you notification over in Slack or email or all sorts


00:09:17.060 --> 00:09:19.740
of places. So you want to make sure you're not missing errors


00:09:19.740 --> 00:09:22.700
in your web app. And if you're not monitoring it, I bet you


00:09:22.700 --> 00:09:24.940
there are errors in your web app somewhere you don't know about.


00:09:24.940 --> 00:09:28.060
Check them out at pythonbytes.fm/rollbar.


00:09:28.060 --> 00:09:32.020
Brian, speaking of web apps, this one we're going to talk


00:09:32.100 --> 00:09:35.700
about now is it's not the kind of web app you might've


00:09:35.700 --> 00:09:36.780
originally thought of.


00:09:36.780 --> 00:09:39.300
I didn't mention it there in that roll bar ad.


00:09:39.300 --> 00:09:40.120
Anpiler?


00:09:40.120 --> 00:09:42.500
I'm not really sure about the pronunciation.


00:09:42.500 --> 00:09:43.460
You wanna take a shot at it?


00:09:43.460 --> 00:09:44.380
- Anpiler?


00:09:44.380 --> 00:09:45.220
I don't know.


00:09:45.220 --> 00:09:46.300
It's kind of fun to try.


00:09:46.300 --> 00:09:50.520
- It's fun to try and I think the an is kind of like angular.


00:09:50.520 --> 00:09:52.900
The pi, obviously Python.


00:09:52.900 --> 00:09:55.580
The lar, what a great thing to put it in a word.


00:09:55.580 --> 00:09:58.780
But what it is, is it's a web framework


00:09:58.780 --> 00:10:02.420
for building front-end, rich client,


00:10:02.420 --> 00:10:04.260
spa-type applications.


00:10:04.260 --> 00:10:06.360
So it's a Python framework.


00:10:06.360 --> 00:10:10.900
You write in it, it runs on the client side in the browser.


00:10:10.900 --> 00:10:12.100
Isn't that interesting?


00:10:12.100 --> 00:10:14.240
So it says basically, create web apps


00:10:14.240 --> 00:10:18.060
with the elegance, simplicity, and full power of Python.


00:10:18.060 --> 00:10:19.960
And you get these sort of reusable components.


00:10:19.960 --> 00:10:22.620
It's very much like AngularJS in that regard


00:10:22.620 --> 00:10:24.120
that has like a routing engine,


00:10:24.120 --> 00:10:25.500
so you don't actually navigate,


00:10:25.500 --> 00:10:28.540
but you move around the different views of the app.


00:10:28.540 --> 00:10:32.340
you write all this stuff in Python, it's pretty interesting.


00:10:32.340 --> 00:10:34.260
So it's got a reactive programming model,


00:10:34.260 --> 00:10:37.420
it has promises, standard Python formatting,


00:10:37.420 --> 00:10:40.540
reusable components, the scope styling,


00:10:40.540 --> 00:10:41.700
integrated routing engine,


00:10:41.700 --> 00:10:44.180
that's the navigation stuff I was talking about.


00:10:44.180 --> 00:10:47.320
So it's pretty cool, actually.


00:10:47.320 --> 00:10:49.820
I don't know what the underlying technology


00:10:49.820 --> 00:10:51.900
is for making the Python run,


00:10:51.900 --> 00:10:53.040
if they've built their own thing,


00:10:53.040 --> 00:10:55.180
if they're using something like Brython or Sculpt


00:10:55.180 --> 00:10:58.020
or something else, but yeah, it's pretty amazing.


00:10:58.020 --> 00:10:59.500
- Yeah, it sounds like it'd be fun to play with.


00:10:59.500 --> 00:11:00.700
- Yeah, it's definitely fun to play with.


00:11:00.700 --> 00:11:05.700
The one caveat is if you're going to embed Python


00:11:05.700 --> 00:11:09.860
compiled to JavaScript in a JavaScript file


00:11:09.860 --> 00:11:12.380
and download it, that JavaScript file may be bigger


00:11:12.380 --> 00:11:16.120
than standard JavaScript file sizes.


00:11:16.120 --> 00:11:20.340
So I checked and I think the minified version's 3.6 megs,


00:11:20.340 --> 00:11:21.180
which is--


00:11:21.180 --> 00:11:22.300
- A little large.


00:11:22.300 --> 00:11:24.100
- It depends on your use case.


00:11:24.100 --> 00:11:26.880
So imagine this, on one hand,


00:11:26.880 --> 00:11:30.040
If you're building like a really high traffic website,


00:11:30.040 --> 00:11:33.040
people use it for mobile or low speed connections,


00:11:33.040 --> 00:11:36.640
it's totally unacceptable to put your front end in this.


00:11:36.640 --> 00:11:38.860
However, if what you're doing


00:11:38.860 --> 00:11:41.740
is you're building Electron JS apps,


00:11:41.740 --> 00:11:45.120
you're building Ionic and Cordova apps,


00:11:45.120 --> 00:11:48.040
these sort of offline, like here are my files,


00:11:48.040 --> 00:11:50.080
run them as if it was a web app,


00:11:50.080 --> 00:11:51.680
it doesn't matter if the thing is big, right?


00:11:51.680 --> 00:11:54.000
It just starts up off the local disk anyway.


00:11:54.000 --> 00:11:54.840
- Yeah, that's true.


00:11:54.840 --> 00:11:56.000
That's a great use case.


00:11:56.000 --> 00:11:59.740
Right, like VS Code, for example, is Electron.js.


00:11:59.740 --> 00:12:01.240
Ionic is a bunch of cool stuff.


00:12:01.240 --> 00:12:03.840
And in that circumstance, like you just,


00:12:03.840 --> 00:12:06.880
who cares if your uncompressed shipping size


00:12:06.880 --> 00:12:07.720
is another three megs?


00:12:07.720 --> 00:12:08.680
It's already 100 megs.


00:12:08.680 --> 00:12:10.200
Like what's 100 versus 103?


00:12:10.200 --> 00:12:11.420
Nobody cares, right?


00:12:11.420 --> 00:12:12.260
Something like that.


00:12:12.260 --> 00:12:15.640
So for those situations where it's kind of this offline,


00:12:15.640 --> 00:12:18.720
rich client web experience, it's cool.


00:12:18.720 --> 00:12:19.560
I like it.


00:12:19.560 --> 00:12:20.380
- Oh, that's cool.


00:12:20.380 --> 00:12:21.220
That's a good idea.


00:12:21.220 --> 00:12:22.720
- Yeah, so there's some nice ways to play around with it.


00:12:22.720 --> 00:12:23.960
They got some little demo apps.


00:12:23.960 --> 00:12:26.120
So like down the bottom, there's like a little grid


00:12:26.120 --> 00:12:28.320
of buttons, like eight or 10 or something.


00:12:28.320 --> 00:12:30.920
You can click around there and play with it a bit.


00:12:30.920 --> 00:12:32.200
So yeah, it's pretty cool.


00:12:32.200 --> 00:12:33.840
If you wanna give this a try


00:12:33.840 --> 00:12:37.000
and your use case makes a lot of sense, right?


00:12:37.000 --> 00:12:39.640
Like it's somehow getting that JavaScript there


00:12:39.640 --> 00:12:41.480
is not a big problem.


00:12:41.480 --> 00:12:42.560
Definitely check it out, it's cool.


00:12:42.560 --> 00:12:45.960
The other thing to point out is WebAssembly is coming.


00:12:45.960 --> 00:12:48.240
WebAssembly is gonna be pretty sweet.


00:12:48.240 --> 00:12:51.640
If somebody can get a really nice version of Python


00:12:51.640 --> 00:12:54.700
in WebAssembly, that may make a big difference


00:12:54.700 --> 00:12:56.100
on a lot of fronts.


00:12:56.100 --> 00:12:56.940
Do you know WebAssembly?


00:12:56.940 --> 00:12:57.760
- I do not.


00:12:57.760 --> 00:13:00.580
- So WebAssembly basically is a new standard


00:13:00.580 --> 00:13:02.460
for the browsers.


00:13:02.460 --> 00:13:04.060
I think it's already partially supported


00:13:04.060 --> 00:13:05.980
where instead of shipping JavaScript,


00:13:05.980 --> 00:13:10.900
you ship binary executable equivalents, right?


00:13:10.900 --> 00:13:14.500
So you've got the problem of running,


00:13:14.500 --> 00:13:16.780
you download a text version of a big thing


00:13:16.780 --> 00:13:18.500
and then you parse it,


00:13:18.500 --> 00:13:20.600
you do all the sort of runtime stuff


00:13:20.600 --> 00:13:23.520
to get it executable and then you execute it, right?


00:13:23.520 --> 00:13:26.200
You get into like byte code or whatever JavaScript does.


00:13:26.200 --> 00:13:28.260
So I think WebAssembly is more or less like


00:13:28.260 --> 00:13:31.940
we're going to get it to that last pre-processed step


00:13:31.940 --> 00:13:33.520
of what JavaScript would do.


00:13:33.520 --> 00:13:35.160
And we'll give it to you as a binary thing,


00:13:35.160 --> 00:13:38.400
sort of like shipping PYC files in Python.


00:13:38.400 --> 00:13:39.640
I think it actually has more effect.


00:13:39.640 --> 00:13:40.600
So it should be a lot smaller


00:13:40.600 --> 00:13:42.560
'cause it's small and tokenized and stuff,


00:13:42.560 --> 00:13:44.000
but it should also start up quicker.


00:13:44.000 --> 00:13:46.800
So who knows, maybe WebAssembly makes this better


00:13:46.800 --> 00:13:49.000
for somebody sneaking JavaScript


00:13:49.000 --> 00:13:51.400
or Python through the JavaScript straw.


00:13:51.400 --> 00:13:53.840
- Running random binaries off of any website


00:13:53.840 --> 00:13:55.120
on the internet, what could go wrong?


00:13:55.120 --> 00:13:58.120
- I think it's only the equivalent of running JavaScript.


00:13:58.120 --> 00:14:01.000
It's not like fully executing data.


00:14:01.000 --> 00:14:02.360
So it's-- - Yeah, okay.


00:14:02.360 --> 00:14:04.920
- I think it's no worse than JavaScript, but yeah.


00:14:04.920 --> 00:14:06.400
- Okay. - I don't know more than that.


00:14:06.400 --> 00:14:07.240
- We'll have to keep track.


00:14:07.240 --> 00:14:09.400
- I think we should round out this entire,


00:14:09.400 --> 00:14:11.960
the rest of this episode on just Python 3 stuff.


00:14:11.960 --> 00:14:12.800
What do you think?


00:14:12.800 --> 00:14:14.720
- I don't think on this podcast we've pushed


00:14:14.720 --> 00:14:16.760
the migration to Python 3 enough.


00:14:16.760 --> 00:14:19.700
- No, we have talked about how bad legacy Python is.


00:14:19.700 --> 00:14:21.680
Go ahead. - Yeah.


00:14:21.680 --> 00:14:23.040
- You go first on this Python thing.


00:14:23.040 --> 00:14:25.640
- And this is actually just a little GitHub repo


00:14:25.640 --> 00:14:29.720
that is called Migrating to Python 3 with Pleasure,


00:14:29.720 --> 00:14:34.360
a short guide on features of Python 3 for data scientists.


00:14:34.360 --> 00:14:37.720
And it's a pretty quick read, but it's pretty thorough


00:14:37.720 --> 00:14:40.080
and actually gets pretty exciting.


00:14:40.080 --> 00:14:43.580
There's a, starts off with a quick tutorial


00:14:43.580 --> 00:14:46.080
with examples of how to use pathlib


00:14:46.080 --> 00:14:50.460
so that you can easily, if people haven't played with it yet,


00:14:50.460 --> 00:14:54.220
you can define paths as just like these little strings


00:14:54.220 --> 00:14:57.080
with division marks like you would in a browser.


00:14:57.080 --> 00:14:58.620
- It's kind of crazy, right, Pathlib?


00:14:58.620 --> 00:15:01.860
It's like you put the slashes outside the strings


00:15:01.860 --> 00:15:04.960
and the division operator becomes like


00:15:04.960 --> 00:15:06.680
OS.path.join type of things.


00:15:06.680 --> 00:15:08.220
- Yeah, definitely.


00:15:08.220 --> 00:15:10.720
But it works great and it makes your code really readable.


00:15:10.720 --> 00:15:13.400
So there's that and then it goes on to talk about


00:15:13.400 --> 00:15:16.120
type hinting and how cool it works with thing editors


00:15:16.120 --> 00:15:19.680
like PyCharm and stuff to help you see what you're doing.


00:15:19.680 --> 00:15:21.960
Then one of the things that I did not,


00:15:21.960 --> 00:15:25.520
hadn't heard of before I came about a few things in here


00:15:25.520 --> 00:15:29.940
is the, how to enforce types at runtime.


00:15:29.940 --> 00:15:31.120
I didn't know you could do that,


00:15:31.120 --> 00:15:33.620
but there's a package called enforce


00:15:33.620 --> 00:15:36.960
that you can put a decorator on a particular function


00:15:36.960 --> 00:15:40.080
and it'll throw an error if somebody tries to put it,


00:15:40.080 --> 00:15:41.080
pass in the wrong type.


00:15:41.080 --> 00:15:42.840
- I had never heard about that either.


00:15:42.840 --> 00:15:44.080
- That is really awesome.


00:15:44.080 --> 00:15:46.360
I don't know if I necessarily want it all the time,


00:15:46.360 --> 00:15:48.640
but it could be fun to turn on,


00:15:48.640 --> 00:15:51.200
especially if you're like doing a refactoring


00:15:51.200 --> 00:15:53.160
or you're like doing some major upgrade.


00:15:53.160 --> 00:15:55.120
You're like, all right, let's turn this on


00:15:55.120 --> 00:15:58.360
and just see if it's doing what we think it's doing, right?


00:15:58.360 --> 00:16:01.120
- Yeah, especially during like a testing phase or something.


00:16:01.120 --> 00:16:02.120
It'd be fun. - Yeah.


00:16:02.120 --> 00:16:03.640
- And then this kind of hurt my head.


00:16:03.640 --> 00:16:07.240
There was some function annotations for units.


00:16:07.240 --> 00:16:10.660
There's an example is how Astropy does it.


00:16:10.660 --> 00:16:15.660
And it's things like you can attach to variables like units,


00:16:15.660 --> 00:16:18.640
like kilograms or something like that,


00:16:18.640 --> 00:16:20.980
which that just seems cool.


00:16:20.980 --> 00:16:22.220
I got to play with that a little bit more.


00:16:22.220 --> 00:16:25.140
- Oh, it looks like, which one is it?


00:16:25.140 --> 00:16:27.260
There's a library of things called pint.


00:16:27.260 --> 00:16:28.380
- Oh, right, yeah, like pint.


00:16:28.380 --> 00:16:31.000
- Right, that lets you like multiply,


00:16:31.000 --> 00:16:33.340
say like, you know, this thing time a foot,


00:16:33.340 --> 00:16:36.100
that thing times an inch and then add them together.


00:16:36.100 --> 00:16:37.500
Yeah, yeah, that's it.


00:16:37.500 --> 00:16:41.820
And this looks like a little bit of the same type of story,


00:16:41.820 --> 00:16:45.100
but you might multiply by like a kilogram or a degree,


00:16:45.100 --> 00:16:46.420
and sort of the physicist,


00:16:46.420 --> 00:16:47.980
astrophysicist equivalent of that.


00:16:47.980 --> 00:16:48.800
That's cool.


00:16:48.800 --> 00:16:51.700
- Like in their example, they show dividing a meter


00:16:51.700 --> 00:16:54.380
in speeds in, I don't know what it is,


00:16:54.380 --> 00:16:57.780
but coming up with like a terahertz,


00:16:57.780 --> 00:16:58.980
we didn't start with terahertz,


00:16:58.980 --> 00:17:00.060
you started with something else.


00:17:00.060 --> 00:17:02.580
Okay, now I'm just making up words now, I think.


00:17:02.580 --> 00:17:04.580
(laughing)


00:17:04.580 --> 00:17:05.540
- Pretty cool, pretty cool.


00:17:05.540 --> 00:17:07.660
- You also have matrix multiplication in there.


00:17:07.660 --> 00:17:09.340
- Yeah, matrix, which I don't use a lot,


00:17:09.340 --> 00:17:10.580
but it's very cool for people


00:17:10.580 --> 00:17:12.020
that need matrix multiplication.


00:17:12.020 --> 00:17:13.540
- Matrix multiplication is interesting.


00:17:13.540 --> 00:17:17.240
It's one of these things, it's held up as one of the best


00:17:17.240 --> 00:17:20.220
examples of the whole PEP process


00:17:20.220 --> 00:17:22.900
in bringing a new feature into the language.


00:17:22.900 --> 00:17:25.500
So from the time the PEP was proposed


00:17:25.500 --> 00:17:28.500
until it was done was like eight days.


00:17:28.500 --> 00:17:29.340
- Wow.


00:17:29.340 --> 00:17:30.740
- And it has to do with how well the people


00:17:30.740 --> 00:17:33.980
who proposed the idea had already done


00:17:33.980 --> 00:17:36.580
sort of market research amongst all the scientific


00:17:36.580 --> 00:17:39.940
computation people and they had a really clear vision


00:17:39.940 --> 00:17:42.420
and a strong sort of displayed need.


00:17:42.420 --> 00:17:44.540
And so it's really interesting that that's in here as well.


00:17:44.540 --> 00:17:46.380
- And globbing with star star,


00:17:46.380 --> 00:17:49.700
which is something I hadn't used since,


00:17:49.700 --> 00:17:52.580
oh, one of the Z shell does that.


00:17:52.580 --> 00:17:55.960
So like you can do recursive subdirectories


00:17:55.960 --> 00:17:59.380
with two asterisks and that's kind of neat.


00:17:59.380 --> 00:18:01.040
And then we threw a whole bunch of other stuff


00:18:01.040 --> 00:18:03.380
like f-strings and floating division


00:18:03.380 --> 00:18:06.140
now is real division now.


00:18:06.140 --> 00:18:08.500
And the rest of it is things that,


00:18:08.500 --> 00:18:10.780
if you've been living Python 3 for a while,


00:18:10.780 --> 00:18:13.300
you just kind of take this stuff for granted.


00:18:13.300 --> 00:18:16.300
But it's a fairly complete list.


00:18:16.300 --> 00:18:18.900
It would be good if you're in a science community


00:18:18.900 --> 00:18:20.180
and you're trying to convince somebody


00:18:20.180 --> 00:18:22.740
to switch to Python 3, this article would be a good one.


00:18:22.740 --> 00:18:24.020
- Yeah, definitely a good one.


00:18:24.020 --> 00:18:25.820
It sounds really interesting.


00:18:25.820 --> 00:18:27.420
It really brings out,


00:18:27.420 --> 00:18:29.740
these are the benefits that you get from making this move,


00:18:29.740 --> 00:18:31.680
rather than just the stick of,


00:18:31.680 --> 00:18:36.680
that's going to be expired or go out of maintenance in 2020.


00:18:36.680 --> 00:18:38.580
It's like, here's all the good stuff that you're missing


00:18:38.580 --> 00:18:39.900
that you don't even know you're missing.


00:18:39.900 --> 00:18:42.500
- Yeah, and I didn't even list it,


00:18:42.500 --> 00:18:46.380
but it includes like a dictionary ordering and stuff,


00:18:46.380 --> 00:18:48.060
which I love that.


00:18:48.060 --> 00:18:50.560
- Right, yeah, that is really, really nice.


00:18:50.560 --> 00:18:52.700
I think Enforce might be the big news out of that.


00:18:52.700 --> 00:18:53.660
I hadn't even heard of that.


00:18:53.660 --> 00:18:54.660
That's pretty cool.


00:18:54.660 --> 00:18:56.660
- Yeah, I'm definitely gonna go play with that tomorrow.


00:18:56.660 --> 00:18:57.620
So that's neat.


00:18:57.620 --> 00:18:59.460
- Cool, so let's talk about moving to Python 3.


00:18:59.460 --> 00:19:00.420
- Okay.


00:19:00.420 --> 00:19:02.140
So I want to give you the--


00:19:02.140 --> 00:19:02.980
- Completely new topic.


00:19:02.980 --> 00:19:05.020
- Exactly, I want to give you something like this,


00:19:05.020 --> 00:19:07.740
but from a web development perspective,


00:19:07.740 --> 00:19:09.060
it's pretty interesting.


00:19:09.060 --> 00:19:12.780
There's this place called TicketEA.com, TicketEA?


00:19:12.780 --> 00:19:15.140
I don't know, TicketEA.com is what I'm gonna go with.


00:19:15.140 --> 00:19:18.300
And they said, "How we migrated TicketEA.com


00:19:18.300 --> 00:19:20.700
"to Python 3 in two weeks."


00:19:20.700 --> 00:19:23.620
So it's apparently a pretty big project


00:19:23.620 --> 00:19:25.380
that they have running, it runs their whole


00:19:25.380 --> 00:19:28.340
sort of fulfillment e-commerce type thing and so on.


00:19:28.340 --> 00:19:30.060
And you'll hear the word Aphrodite,


00:19:30.060 --> 00:19:34.620
That's kind of their code name word for their project.


00:19:34.620 --> 00:19:36.260
So they do a bunch of stuff with Docker.


00:19:36.260 --> 00:19:37.740
And their first step was to just say,


00:19:37.740 --> 00:19:42.740
okay, we're gonna change the Aphrodite's base Docker image


00:19:42.740 --> 00:19:45.980
to Python colon 3.6 slim from, I don't know,


00:19:45.980 --> 00:19:47.360
what's it, 2.7 fat?


00:19:47.360 --> 00:19:48.200
I don't know.


00:19:48.200 --> 00:19:49.500
Something like this.


00:19:49.500 --> 00:19:50.900
And they said when they did that,


00:19:50.900 --> 00:19:52.060
they just tried to run their tests


00:19:52.060 --> 00:19:53.440
and a bunch of stuff went crazy.


00:19:53.440 --> 00:19:55.900
Like outdated libraries didn't work,


00:19:55.900 --> 00:19:57.860
base string had to be moved to string,


00:19:57.860 --> 00:20:02.020
URL pars, how to move to urllib.urlpars,


00:20:02.020 --> 00:20:03.340
other stuff like that, right?


00:20:03.340 --> 00:20:05.500
So, said, all right, well, the first thing we're gonna do


00:20:05.500 --> 00:20:07.060
is we're gonna run two to three, right?


00:20:07.060 --> 00:20:10.020
So this is the utility that can manually fix


00:20:10.020 --> 00:20:10.860
some of those things.


00:20:10.860 --> 00:20:12.820
We're like, every time we see base string, that's str now.


00:20:12.820 --> 00:20:15.420
We're just gonna do that, for example, right?


00:20:15.420 --> 00:20:16.740
So they ran that against it,


00:20:16.740 --> 00:20:18.220
and they also look for patterns like,


00:20:18.220 --> 00:20:21.060
hey, we're using map reduce,


00:20:21.060 --> 00:20:23.180
or map type functions and so on,


00:20:23.180 --> 00:20:25.860
or filtering functions plus lambdas to make it work.


00:20:25.860 --> 00:20:27.900
and these could really just be list comprehensions, right?


00:20:27.900 --> 00:20:30.260
So they kind of upgraded the,


00:20:30.260 --> 00:20:32.680
they took better advantage of like the new language features


00:20:32.680 --> 00:20:34.120
that were then available to them.


00:20:34.120 --> 00:20:35.640
So that's pretty cool.


00:20:35.640 --> 00:20:37.120
And then they said, okay, well,


00:20:37.120 --> 00:20:40.060
that's the low hanging fruit, now what?


00:20:40.060 --> 00:20:42.880
And they had to run their tests,


00:20:42.880 --> 00:20:44.680
you know, sort of find some more problems.


00:20:44.680 --> 00:20:47.680
They took the opportunity to upgrade,


00:20:47.680 --> 00:20:49.600
at least get ready to upgrade to Django 2


00:20:49.600 --> 00:20:50.920
'cause they are running on Django.


00:20:50.920 --> 00:20:51.920
So that's cool.


00:20:51.920 --> 00:20:54.320
They said a couple of lessons we learned,


00:20:54.320 --> 00:20:58.280
code coverage was 75% or 70%, you know,


00:20:58.280 --> 00:20:59.960
the more tests, the better.


00:20:59.960 --> 00:21:02.240
It's good to keep the Python 3 branch


00:21:02.240 --> 00:21:04.280
up to date with the master branch until you switch.


00:21:04.280 --> 00:21:05.440
That's one way of doing it.


00:21:05.440 --> 00:21:09.200
Like, remember the Instagram keynote at PyCon 2017?


00:21:09.200 --> 00:21:10.040
- Yeah.


00:21:10.040 --> 00:21:11.000
- That is a whole nother level


00:21:11.000 --> 00:21:13.000
of upgrading to Python 3, right?


00:21:13.000 --> 00:21:17.320
They upgraded all of Instagram to Python 3


00:21:17.320 --> 00:21:22.000
without branching, which is, yeah, at all.


00:21:22.000 --> 00:21:22.880
That's crazy.


00:21:22.880 --> 00:21:24.060
And they were checking in all the time.


00:21:24.060 --> 00:21:26.540
So that's another level, you can check out that as well.


00:21:26.540 --> 00:21:29.000
But this is, I suspect this is more common


00:21:29.000 --> 00:21:30.100
that you kind of branch, like,


00:21:30.100 --> 00:21:31.820
all right, we're gonna try to keep these going.


00:21:31.820 --> 00:21:34.380
- It's a good story to see somebody doing it the other way.


00:21:34.380 --> 00:21:35.220
- Yeah, for sure.


00:21:35.220 --> 00:21:37.860
And so they ran Flake 8 against all the stuff


00:21:37.860 --> 00:21:39.820
to make sure everything was working right.


00:21:39.820 --> 00:21:42.300
So I don't know, they said they had to modify


00:21:42.300 --> 00:21:45.300
around 200 files to make Flake 8 happy again


00:21:45.300 --> 00:21:47.560
with Python 3, but yeah, all good.


00:21:47.560 --> 00:21:49.300
And then the final thing I thought was really cool


00:21:49.300 --> 00:21:50.780
is they're running on Google App Engine.


00:21:50.780 --> 00:21:53.320
I don't do anything with Google App Engine,


00:21:53.320 --> 00:21:57.120
But one of the features that these platforms as a service have that's really pretty cool


00:21:57.120 --> 00:21:59.120
is something called traffic splitting.


00:21:59.120 --> 00:22:04.100
So there's basically like a little slider and you say, this version of the app is going


00:22:04.100 --> 00:22:06.040
to get 60% of the traffic.


00:22:06.040 --> 00:22:08.240
This version of the app is going to get 40% of the traffic.


00:22:08.240 --> 00:22:09.880
And you can add in different versions.


00:22:09.880 --> 00:22:15.680
So you can say, well, let's just send like 1% of our traffic over towards these new versions


00:22:15.680 --> 00:22:17.000
and see what happens.


00:22:17.000 --> 00:22:19.240
So you don't completely take the site down.


00:22:19.240 --> 00:22:22.560
You just may break it for a very small group.


00:22:22.560 --> 00:22:26.280
And you could even do that, I think, by IP address and stuff.


00:22:26.280 --> 00:22:28.300
So you could say, only the people that work here


00:22:28.300 --> 00:22:29.440
get the new version.


00:22:29.440 --> 00:22:31.600
People on the outside, they get the old version.


00:22:31.600 --> 00:22:33.240
And slowly migrate it along.


00:22:33.240 --> 00:22:35.240
And so they call these canary releases,


00:22:35.240 --> 00:22:37.480
which I think is actually a pretty cool way to think of it.


00:22:37.480 --> 00:22:40.680
So there's some neat lessons in here.


00:22:40.680 --> 00:22:41.520
This is by--


00:22:41.520 --> 00:22:43.200
- I didn't know Google App Engine did that.


00:22:43.200 --> 00:22:44.040
That's neat.


00:22:44.040 --> 00:22:44.860
- Yeah, I didn't either.


00:22:44.860 --> 00:22:47.360
But I definitely like it a little bit better now.


00:22:47.360 --> 00:22:48.200
That's cool.


00:22:48.200 --> 00:22:49.020
I mean, I don't dislike it,


00:22:49.020 --> 00:22:51.440
but that's definitely a feature that would draw me into it.


00:22:51.440 --> 00:22:53.380
- All right, so I think these are really interesting.


00:22:53.380 --> 00:22:56.180
Yours was on data science, mine is a sort of web story,


00:22:56.180 --> 00:22:58.660
and they both are compelling,


00:22:58.660 --> 00:23:00.340
sort of for moving to Python 3.


00:23:00.340 --> 00:23:02.260
Things that you get, the steps to get there.


00:23:02.260 --> 00:23:04.540
- Definitely, and we'll keep pounding on it


00:23:04.540 --> 00:23:06.380
until Python 2.7 is gone.


00:23:06.380 --> 00:23:07.680
- That's right.


00:23:07.680 --> 00:23:09.580
We will see legacy Python fade away.


00:23:09.580 --> 00:23:11.860
So you have a webcast coming up, don't you?


00:23:11.860 --> 00:23:13.220
- Yeah, we brought it up last week,


00:23:13.220 --> 00:23:14.900
but I just wanted to remind people


00:23:14.900 --> 00:23:19.540
that I'm doing a webcast on pytest and PyCharm


00:23:19.540 --> 00:23:23.700
with the PyCharm guys that's coming up on February 22nd.


00:23:23.700 --> 00:23:27.300
So we'll leave a link in the show notes and go register.


00:23:27.300 --> 00:23:28.340
Hope to see everybody there.


00:23:28.340 --> 00:23:29.980
- Yeah, they should definitely go register for it.


00:23:29.980 --> 00:23:31.020
There's a couple reasons.


00:23:31.020 --> 00:23:33.360
One, Brian's gonna be there, it'll be awesome.


00:23:33.360 --> 00:23:37.060
Two, it's free, so you'll get what you pay for for sure.


00:23:37.060 --> 00:23:38.580
I promise you that.


00:23:38.580 --> 00:23:41.380
Unless you count your time, then I don't know.


00:23:41.380 --> 00:23:43.140
And then you also potentially, if you can't make it,


00:23:43.140 --> 00:23:45.120
you'll get the recording notification.


00:23:45.120 --> 00:23:46.940
If you register and you don't show up,


00:23:46.940 --> 00:23:48.740
then you'll get a message to say you didn't show up,


00:23:48.740 --> 00:23:49.700
but hey, you can still get it.


00:23:49.700 --> 00:23:50.540
- People should check out,


00:23:50.540 --> 00:23:52.980
there's a whole bunch of old webinars there,


00:23:52.980 --> 00:23:56.620
and it's not just about trying to push PyCharm stuff,


00:23:56.620 --> 00:23:58.660
it's just people in the community


00:23:58.660 --> 00:24:01.340
showing some interesting things to do.


00:24:01.340 --> 00:24:03.380
So, it's a good thing that they're doing.


00:24:03.380 --> 00:24:05.500
- I had this project that I wanted to play with.


00:24:05.500 --> 00:24:07.740
Not so much to build the app,


00:24:07.740 --> 00:24:11.040
but to play with the foundational bits of the app.


00:24:11.040 --> 00:24:14.580
So I have a program that sort of demonstrates


00:24:14.580 --> 00:24:17.820
using Cookie Cutter from an API mode.


00:24:17.820 --> 00:24:19.320
So cookie cutter, normally you write,


00:24:19.320 --> 00:24:21.860
you type cookie cutter space, some template name,


00:24:21.860 --> 00:24:24.980
and then stuff happens, and then you have a projects,


00:24:24.980 --> 00:24:27.300
like a starter project, a scaffold type thing


00:24:27.300 --> 00:24:29.800
for all sorts of various things.


00:24:29.800 --> 00:24:32.520
So there's also an API for cookie cutter.


00:24:32.520 --> 00:24:34.860
And so you can put like fancy front ends,


00:24:34.860 --> 00:24:36.540
or if you've got any kind of application


00:24:36.540 --> 00:24:39.740
that needs to generate like a sub project


00:24:39.740 --> 00:24:41.580
that's going to be messed with by somebody else,


00:24:41.580 --> 00:24:43.100
if you're doing like developer tools,


00:24:43.100 --> 00:24:44.500
or you're building stuff for your company,


00:24:44.500 --> 00:24:46.540
you're like, we're always gonna start this way.


00:24:46.540 --> 00:24:49.140
So here's the CLI and it asks you the questions


00:24:49.140 --> 00:24:51.460
and then boom, you've got this kind of standard starter app


00:24:51.460 --> 00:24:54.800
that's integrated into your infrastructure.


00:24:54.800 --> 00:24:56.180
So these are all good uses.


00:24:56.180 --> 00:24:57.020
So I said, all right, well,


00:24:57.020 --> 00:24:58.860
I wanna play with this project called GUI


00:24:58.860 --> 00:25:02.380
and we talked about GUI a while ago, G-O-O-E-Y.


00:25:02.380 --> 00:25:05.060
And so I took my little cookie cutter app


00:25:05.060 --> 00:25:07.000
that would work with all the pyramid based


00:25:07.000 --> 00:25:09.060
cookie cutter templates


00:25:09.060 --> 00:25:12.500
and put a friendly front end on the front of that.


00:25:12.500 --> 00:25:16.060
And then I put a GUI on top of that CLI app.


00:25:16.060 --> 00:25:16.900
- Nice.


00:25:16.900 --> 00:25:18.880
- Yeah, so it's really fun and it was, it took,


00:25:18.880 --> 00:25:22.700
it really took like 20 minutes to get it 99% working,


00:25:22.700 --> 00:25:23.540
more on that in a sec.


00:25:23.540 --> 00:25:26.020
But, so I put a link to the GitHub repository


00:25:26.020 --> 00:25:27.540
that has that up there.


00:25:27.540 --> 00:25:30.260
So people can download it, you just clone it,


00:25:30.260 --> 00:25:33.220
create a virtual environment, pip install -r,


00:25:33.220 --> 00:25:35.980
the requirements file, and then you can just run the program


00:25:35.980 --> 00:25:37.700
and you have this really sweet GUI.


00:25:37.700 --> 00:25:40.700
And it's based on WX Python Phoenix and GUI,


00:25:40.700 --> 00:25:42.720
and it's quite cool.


00:25:42.720 --> 00:25:46.360
The one little hangup is I'm having a problem


00:25:46.360 --> 00:25:48.240
getting it to run if I package it


00:25:48.240 --> 00:25:51.240
so I could literally hand out a .app or a .exe.


00:25:51.240 --> 00:25:52.240
There's some kind of hangup,


00:25:52.240 --> 00:25:54.160
and I think it's a bug with GUI.


00:25:54.160 --> 00:25:57.200
I can't tell entirely, but maybe by the time you hear this,


00:25:57.200 --> 00:25:59.040
I have it figured out, but we'll see.


00:25:59.040 --> 00:26:00.360
Either way, it's a great example.


00:26:00.360 --> 00:26:01.760
You know, if you can forget the packaging,


00:26:01.760 --> 00:26:03.400
it's actually an awesome example


00:26:03.400 --> 00:26:06.440
of a really simple Python GUI app that looks professional.


00:26:06.440 --> 00:26:09.120
- If you can forget packaging, Python is awesome.


00:26:09.120 --> 00:26:10.160
That's a-- (laughing)


00:26:10.160 --> 00:26:12.600
- The packaging works fine, GUI works fine,


00:26:12.600 --> 00:26:15.480
A packaged GUI app sometimes works fine.


00:26:15.480 --> 00:26:16.320
- Yeah, okay.


00:26:16.320 --> 00:26:17.680
(laughing)


00:26:17.680 --> 00:26:20.440
- It's the intersection of all these things that are cool.


00:26:20.440 --> 00:26:24.360
There's a small bruise on the shininess of it,


00:26:24.360 --> 00:26:25.840
but it's all good, it's all good.


00:26:25.840 --> 00:26:26.680
So check that out.


00:26:26.680 --> 00:26:28.500
- There's tons of people working on all these features


00:26:28.500 --> 00:26:31.840
to make it even more seamless in the future.


00:26:31.840 --> 00:26:33.000
- Yeah, absolutely, absolutely.


00:26:33.000 --> 00:26:33.880
- Well, good job, cool.


00:26:33.880 --> 00:26:34.880
- Thanks so much.


00:26:34.880 --> 00:26:36.440
Brian, thanks for sharing everything


00:26:36.440 --> 00:26:38.600
with all of our listeners and with me.


00:26:38.600 --> 00:26:40.160
- Thank you, and we'll talk to you next week.


00:26:40.160 --> 00:26:41.000
- You bet, bye.


00:26:42.400 --> 00:26:44.160
Thank you for listening to Python Bytes.


00:26:44.160 --> 00:26:46.640
Follow the show on Twitter via @pythonbytes.


00:26:46.640 --> 00:26:49.840
That's Python Bytes as in B-Y-T-E-S.


00:26:49.840 --> 00:26:53.200
And get the full show notes at pythonbytes.fm.


00:26:53.200 --> 00:26:54.820
If you have a news item you want featured,


00:26:54.820 --> 00:26:57.280
just visit pythonbytes.fm and send it our way.


00:26:57.280 --> 00:27:00.440
We're always on the lookout for sharing something cool.


00:27:00.440 --> 00:27:02.280
On behalf of myself and Brian Okken,


00:27:02.280 --> 00:27:03.800
this is Michael Kennedy.


00:27:03.800 --> 00:27:05.800
Thank you for listening and sharing this podcast


00:27:05.800 --> 00:27:07.440
with your friends and colleagues.

